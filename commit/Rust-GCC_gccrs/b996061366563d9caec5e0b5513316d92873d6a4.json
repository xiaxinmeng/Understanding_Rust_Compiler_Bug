{"sha": "b996061366563d9caec5e0b5513316d92873d6a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjk5NjA2MTM2NjU2M2Q5Y2FlYzVlMGI1NTEzMzE2ZDkyODczZDZhNA==", "commit": {"author": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2000-08-09T13:01:44Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2000-08-09T13:01:44Z"}, "message": "Makefile.am: Move beans and applet classes to awt_java_source_files.\n\n2000-08-09  Bryce McKinlay  <bryce@albatross.co.nz>\n\n\t* Makefile.am: Move beans and applet classes to\n\tawt_java_source_files.\n\t* Makefile.in: Rebuilt.\n\t* java/awt/Color.java (getTransparency): New method.\n\t* java/awt/Component.java: Various updates.\n\t* java/awt/Container.java (removeNotify): Call super.removeNotify()\n\tafter dealing with children.\n\t* java/awt/Toolkit.java (changeSupport): Renamed from pcsupport.\n\t* java/awt/Window.java: Various new methods and updates.\n\t* java/awt/color/ICC_Profile.java (getNumComponents): Cast profileID\n\tto int for switch.\n\t* java/awt/event/KeyEvent.java (paramString): Initialize `r'.\n\t* java/awt/event/WindowEvent.java (paramString): Ditto.\n\t* java/awt/geom/Dimension2D.java (clone): Wrap super call with\n\ttry/catch block.\n\t* java/awt/geom/Point2D.java (clone): Ditto.\n\t* java/awt/geom/RectangularShape.java (clone): Ditto.\n\t* java/awt/image/ColorModel.java (bits, cspace, transparency,\n\thasAlpha, isAlphaPremultiplied): Make package-private, not private.\n\nFrom-SVN: r35589", "tree": {"sha": "6680b09725d91ed3d9ada722960071772ab26354", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6680b09725d91ed3d9ada722960071772ab26354"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b996061366563d9caec5e0b5513316d92873d6a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b996061366563d9caec5e0b5513316d92873d6a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b996061366563d9caec5e0b5513316d92873d6a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b996061366563d9caec5e0b5513316d92873d6a4/comments", "author": null, "committer": null, "parents": [{"sha": "7e8dad182700d23558d74de4d1461379d9ed6124", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e8dad182700d23558d74de4d1461379d9ed6124", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e8dad182700d23558d74de4d1461379d9ed6124"}], "stats": {"total": 442, "additions": 320, "deletions": 122}, "files": [{"sha": "9e1b53bfc3984f9d463b0e9f2515489fbb449269", "filename": "libjava/java/awt/Color.java", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b996061366563d9caec5e0b5513316d92873d6a4/libjava%2Fjava%2Fawt%2FColor.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b996061366563d9caec5e0b5513316d92873d6a4/libjava%2Fjava%2Fawt%2FColor.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FColor.java?ref=b996061366563d9caec5e0b5513316d92873d6a4", "patch": "@@ -87,4 +87,12 @@ public int getRGB()\n   {\n     return rgba;\n   }\n+  \n+  public int getTransparency()\n+  {\n+    if (getAlpha() == 0xFF)\n+      return Transparency.OPAQUE;\n+    else\n+      return Transparency.TRANSLUCENT;\n+  }\n }"}, {"sha": "a11c407aa15cb8fc99b92a81a9c410cfa964c313", "filename": "libjava/java/awt/Component.java", "status": "modified", "additions": 58, "deletions": 59, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b996061366563d9caec5e0b5513316d92873d6a4/libjava%2Fjava%2Fawt%2FComponent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b996061366563d9caec5e0b5513316d92873d6a4/libjava%2Fjava%2Fawt%2FComponent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FComponent.java?ref=b996061366563d9caec5e0b5513316d92873d6a4", "patch": "@@ -21,12 +21,15 @@\n import java.beans.PropertyChangeListener;\n // import javax.accessibility.AccessibleContext;\n \n-/* Status: Incomplete. The event dispatch mechanism is implemented. All \n-   other methods defined in the J2SE 1.3 API javadoc exist, but are mostly \n-   incomplete or only stubs; except for methods relating to the Drag and Drop, \n-   Input Method, and Accessibility frameworks: These methods are present but \n-   commented out. */\n-\n+/**\n+  * The root of all evil.\n+  *\n+  * Status: Incomplete. The event dispatch mechanism is implemented. All \n+  * other methods defined in the J2SE 1.3 API javadoc exist, but are mostly \n+  * incomplete or only stubs; except for methods relating to the Drag and Drop, \n+  * Input Method, and Accessibility frameworks: These methods are present but \n+  * commented out.\n+  */\n public abstract class Component implements ImageObserver, MenuContainer, \n \t\t\t\t\t   java.io.Serializable\n {\n@@ -38,11 +41,11 @@ public abstract class Component implements ImageObserver, MenuContainer,\n \t\t\t    RIGHT_ALIGNMENT  = 1.0f,\n \t\t\t    TOP_ALIGNMENT    = 0.0f;\n \n-    /* Make the treelock a String so that it can easily be identified\n-       in debug dumps. We clone the String in order to avoid a conflict in \n-       the unlikely event that some other package uses exactly the same string\n-       as a lock object. */\n-    static Object treeLock = new String(\"AWT_TREE_LOCK\");\n+  /* Make the treelock a String so that it can easily be identified\n+     in debug dumps. We clone the String in order to avoid a conflict in \n+     the unlikely event that some other package uses exactly the same string\n+     as a lock object. */\n+  static Object treeLock = new String(\"AWT_TREE_LOCK\");\n \n   /* Serialized fields from the serialization spec. */\n   // FIXME: Default values?\n@@ -140,7 +143,8 @@ public DropTarget getDropTarget()\n   /** @since 1.3 */\n   public GraphicsConfiguration getGraphicsConfiguration()\n   {\n-    // FIXME\n+    if (parent != null)\n+      return parent.getGraphicsConfiguration();\n     return null;\n   }\n \n@@ -166,8 +170,7 @@ public boolean isValid()\n   /** @since 1.2 */\n   public boolean isDisplayable()\n   {\n-    // FIXME\n-    return false;\n+    return (peer != null);\n   }\n   \n   public boolean isVisible()\n@@ -225,28 +228,38 @@ public void enableInputMethods(boolean enable)\n     // FIXME\n   }\n   \n+  /** @specnote  Inspection by subclassing shows that Sun's implementation\n+                 calls show(boolean) which then calls show() or hide(). It is\n+\t\t the show() method that is overriden in subclasses like Window.\n+\t\t We do the same to preserve compatibility for subclasses. */\n   public void setVisible(boolean b)\n   {\n-    visible = true;\n-    // FIXME\n+    show (b);\n   }\n   \n   /** @deprecated */\n   public void show()\n   {\n-    setVisible(true);\n+    if (peer != null)\n+      peer.setVisible(true);\n+    this.visible = true;\n   }\n   \n   /** @deprecated */\n   public void show(boolean b)\n   {\n-    setVisible(b);\n+    if (b)\n+      show();\n+    else\n+      hide();\n   }\n   \n   /** @deprecated */\n   public void hide()\n   {\n-    setVisible(false);\n+    if (peer != null)\n+      peer.setVisible(false);\n+    this.visible = false;\n   }\n   \n   public Color getForeground()\n@@ -256,6 +269,8 @@ public Color getForeground()\n   \n   public void setForeground(Color c)\n   {\n+    if (peer != null)\n+      peer.setForeground(c);\n     this.foreground = c;\n   }\n   \n@@ -266,6 +281,8 @@ public Color getBackground()\n   \n   public void setBackground(Color c)\n   {\n+    if (peer != null)\n+      peer.setBackground(c);\n     this.background = c;\n   }\n   \n@@ -276,6 +293,8 @@ public Font getFont()\n   \n   public void setFont(Font f)\n   {\n+    if (peer != null)\n+      peer.setFont(f);\n     this.font = f;\n   }\n \n@@ -633,7 +652,7 @@ public boolean prepareImage(Image image, int width, int height, ImageObserver ob\n   public int checkImage(Image image, ImageObserver observer)\n   {\n     // FIXME\n-    return false;\n+    return 0;\n   }\n   \n   public int checkImage(Image image, int width, int height, ImageObserver observer)\n@@ -699,41 +718,6 @@ public final void dispatchEvent(AWTEvent e)\n   {\n     dispatchEventImpl(e);\n   }\n-  /* This code needs to be split up and put in to dispatchEventImpl() in the\n-     appropriate Component subclasses:\n-   \n-    else if ((e.id <= WindowEvent.WINDOW_LAST\n-             && e.id >= WindowEvent.WINDOW_FIRST)\n-\t&& (windowListener != null\n-\t    || eventMask & AWTEvent.WINDOW_EVENT_MASK != 0))\n-      processEvent(e);\n-    else if ((e.id <= AdjustmentEvent.ADJUSTMENT_LAST\n-             && e.id >= AdjustmentEvent.ADJUSTMENT_FIRST)\n-\t&& (adjustmentListener != null\n-\t    || eventMask & AWTEvent.ADJUSTMENT_EVENT_MASK != 0))\n-      processEvent(e);\n-    else if ((e.id <= ItemEvent.ITEM_LAST\n-             && e.id >= ItemEvent.ITEM_FIRST)\n-\t&& (itemListener != null\n-\t    || eventMask & AWTEvent.ITEM_EVENT_MASK != 0))\n-      processEvent(e);\n-    else if ((e.id <= PaintEvent.PAINT_LAST\n-             && e.id >= PaintEvent.PAINT_FIRST)\n-\t&& (paintListener != null\n-\t    || eventMask & AWTEvent.PAINT_EVENT_MASK != 0))\n-      processEvent(e);\n-    else if ((e.id <= TextEvent.TEXT_LAST\n-             && e.id >= TextEvent.TEXT_FIRST)\n-\t&& (textListener != null\n-\t    || eventMask & AWTEvent.TEXT_EVENT_MASK != 0))\n-      processEvent(e);\n-    else if ((e.id <= InvocationEvent.INVOCATION_LAST\n-             && e.id >= InvocationEvent.INVOCATION_FIRST)\n-\t&& (invocationListener != null\n-\t    || eventMask & AWTEvent.INVOCATION_EVENT_MASK != 0))\n-      processEvent(e);\n-  }\n-  */      \n   \n   void dispatchEventImpl(AWTEvent e)\n   {\n@@ -1218,12 +1202,16 @@ public boolean action(Event evt, Object what)\n \n   public void addNotify()\n   {\n-    // FIXME\n+    if (peer == null)\n+      peer = getToolkit().createComponent(this);\n   }\n   \n   public void removeNotify()\n-  {\n-    // FIXME\n+  {    \n+    if (peer != null)\n+      peer.dispose();\n+    peer = null;\n+    visible = false;\n   }\n   \n   /** @deprecated */\n@@ -1312,26 +1300,37 @@ public void list(PrintWriter out, int indent)\n   \n   public void addPropertyChangeListener(PropertyChangeListener listener)\n   {\n-\n+    if (changeSupport == null)\n+      changeSupport = new PropertyChangeSupport(this);\n+    changeSupport.addPropertyChangeListener(listener);\n   }\n   \n   public void removePropertyChangeListener(PropertyChangeListener listener)\n   {\n+    if (changeSupport != null)\n+      changeSupport.removePropertyChangeListener(listener);         \n   }\n   \n   public void addPropertyChangeListener(String propertyName,\n                                 \tPropertyChangeListener listener)\n   {\n+    if (changeSupport == null)\n+      changeSupport = new PropertyChangeSupport(this);\n+    changeSupport.addPropertyChangeListener(propertyName, listener);  \n   }\n   \n   public void removePropertyChangeListener(String propertyName,\n                                            PropertyChangeListener listener)\n   {\n+    if (changeSupport != null)\n+      changeSupport.removePropertyChangeListener(propertyName, listener);\n   }\n   \n   protected void firePropertyChange(String propertyName, Object oldValue, \n                                     Object newValue)\n   {\n+    if (changeSupport != null)\n+      changeSupport.firePropertyChange(propertyName, oldValue, newValue);    \n   }\n   \n   public void setComponentOrientation(ComponentOrientation o)"}, {"sha": "8cc0664ba5449a28cd2b865c55ffc296c4cb5bd5", "filename": "libjava/java/awt/ComponentOrientation.java", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b996061366563d9caec5e0b5513316d92873d6a4/libjava%2Fjava%2Fawt%2FComponentOrientation.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b996061366563d9caec5e0b5513316d92873d6a4/libjava%2Fjava%2Fawt%2FComponentOrientation.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FComponentOrientation.java?ref=b996061366563d9caec5e0b5513316d92873d6a4", "patch": "@@ -15,6 +15,10 @@\n \n public class ComponentOrientation implements java.io.Serializable\n {\n+  // Here is a wild guess.\n+  private static int HORIZONTAL_ID    = 1 << 0,\n+                     LEFT_TO_RIGHT_ID = 1 << 1;\n+\n   public static final ComponentOrientation LEFT_TO_RIGHT\n     = new ComponentOrientation(HORIZONTAL_ID & LEFT_TO_RIGHT_ID);\n   public static final ComponentOrientation RIGHT_TO_LEFT\n@@ -26,10 +30,6 @@ public class ComponentOrientation implements java.io.Serializable\n   // correct values?\n   int orientation;\n   \n-  // Here is a wild guess.\n-  private static int HORIZONTAL_ID    = 1 << 0,\n-                     LEFT_TO_RIGHT_ID = 1 << 1;\n-\n   ComponentOrientation(int orientation)\n   {\n     this.orientation = orientation;"}, {"sha": "a315f850ed7257f55519664fed7b3275441ed0f7", "filename": "libjava/java/awt/Container.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b996061366563d9caec5e0b5513316d92873d6a4/libjava%2Fjava%2Fawt%2FContainer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b996061366563d9caec5e0b5513316d92873d6a4/libjava%2Fjava%2Fawt%2FContainer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FContainer.java?ref=b996061366563d9caec5e0b5513316d92873d6a4", "patch": "@@ -433,7 +433,7 @@ public void removeNotify()\n   {\n     for (int i = 0; i < ncomponents; ++i)\n       component[i].removeNotify ();\n-    // FIXME: remove our peer.\n+    super.removeNotify();\n   }\n \n   public boolean isAncestorOf (Component comp)"}, {"sha": "d0bfcd88b646894c793ef7b3a83009d2b7eeb231", "filename": "libjava/java/awt/Toolkit.java", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b996061366563d9caec5e0b5513316d92873d6a4/libjava%2Fjava%2Fawt%2FToolkit.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b996061366563d9caec5e0b5513316d92873d6a4/libjava%2Fjava%2Fawt%2FToolkit.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FToolkit.java?ref=b996061366563d9caec5e0b5513316d92873d6a4", "patch": "@@ -21,7 +21,7 @@\n {\n   static Toolkit defaultToolkit;\n   static EventQueue systemEventQueue = new EventQueue();\n-  PropertyChangeSupport pcsupport = new PropertyChangeSupport(this);\n+  PropertyChangeSupport changeSupport = new PropertyChangeSupport(this);\n   Hashtable desktopProperties = new Hashtable();\n \n   public static Toolkit getDefaultToolkit()\n@@ -216,7 +216,7 @@ protected final void setDesktopProperty(String name, Object newValue)\n   {\n     Object oldValue = getDesktopProperty(name);\n     desktopProperties.put(name, newValue);\n-    pcsupport.firePropertyChange(name, oldValue, newValue);\n+    changeSupport.firePropertyChange(name, oldValue, newValue);\n   }\n \n   protected Object lazilyLoadDesktopProperty(String name)\n@@ -233,13 +233,13 @@ protected void initializeDesktopProperties()\n   public void addPropertyChangeListener(String name,\n                                 \tPropertyChangeListener pcl)\n   {\n-    pcsupport.addPropertyChangeListener(name, pcl);\n+    changeSupport.addPropertyChangeListener(name, pcl);\n   }\n   \n   public void removePropertyChangeListener(String name,\n                                            PropertyChangeListener pcl)\n   {\n-    pcsupport.removePropertyChangeListener(name, pcl);\n+    changeSupport.removePropertyChangeListener(name, pcl);\n   }\n \n   public void addAWTEventListener(AWTEventListener listener, long eventMask)"}, {"sha": "e8d04492604187dc6546c5cf468c53fe06cb5a31", "filename": "libjava/java/awt/Window.java", "status": "modified", "additions": 222, "deletions": 43, "changes": 265, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b996061366563d9caec5e0b5513316d92873d6a4/libjava%2Fjava%2Fawt%2FWindow.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b996061366563d9caec5e0b5513316d92873d6a4/libjava%2Fjava%2Fawt%2FWindow.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FWindow.java?ref=b996061366563d9caec5e0b5513316d92873d6a4", "patch": "@@ -1,69 +1,242 @@\n /* Copyright (C) 1999, 2000  Free Software Foundation\n \n-   This file is part of libjava.\n+   This file is part of libgcj.\n \n This software is copyrighted work licensed under the terms of the\n-Libjava License.  Please consult the file \"LIBJAVA_LICENSE\" for\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n details.  */\n \n package java.awt;\n import java.awt.event.WindowEvent;\n import java.awt.event.WindowListener;\n import java.awt.peer.WindowPeer;\n import java.awt.peer.ComponentPeer;\n+import java.util.EventListener;\n import java.util.Locale;\n+import java.util.ResourceBundle;\n \n-/* A very incomplete placeholder. */\n+/* Status: partially implemented. */\n \n public class Window extends Container\n {\n-  public Window (Frame parent)\n+  // Serialized fields, from Sun's serialization spec.\n+  // private FocusManager focusMgr;  // FIXME: what is this?  \n+  private String warningString = null;\n+  private int state = 0;\n+  private int windowSerializedDataVersion = 0; // FIXME\n+\n+  private transient WindowListener windowListener;\n+  private transient GraphicsConfiguration graphicsConfiguration;\n+\n+  public Window(Frame owner)\n+  {\n+    this (owner, null);\n+  }\n+\n+  /** @since 1.2 */\n+  public Window(Window owner)\n   {\n-    this.parent = parent;\n+    this (owner, null);\n+  }\n+  \n+  /** @since 1.3 */\n+  public Window(Window owner, GraphicsConfiguration gc)\n+  {\n+    /*  FIXME: Security check\n+    SecurityManager.checkTopLevelWindow(...)\n+\n+    if (gc != null\n+        && gc.getDevice().getType() != GraphicsDevice.TYPE_RASTER_SCREEN)\n+      throw new IllegalArgumentException (\"gc must be from a screen device\");\n+\n+    if (gc == null)\n+      graphicsConfiguration = GraphicsEnvironment.getLocalGraphicsEnvironment()\n+\t\t\t     .getDefaultScreenDevice()\n+\t\t\t     .getDefaultConfiguration();\n+    else\n+    */    \n+      graphicsConfiguration = gc;\n+\n     // FIXME: compiler bug\n     // this.layoutMgr = new BorderLayout ();\n+    \n+    if (owner == null)\n+      throw new IllegalArgumentException (\"Owner can not be null\");\n+          \n+    this.parent = owner;\n+    \n+    // FIXME: add to owner's \"owned window\" list\n   }\n \n-  public void addNotify ()\n+  protected void finalize() throws Throwable\n+  {\n+    // FIXME: remove from owner's \"owned window\" list (Weak References)\n+  }\n+\n+  public void addNotify()\n   {\n     if (peer == null)\n+      // FIXME: This cast should NOT be required. ??? Compiler bug ???\n       peer = (ComponentPeer) getToolkit ().createWindow (this);\n-    super.addNotify ();\n   }\n \n-  public synchronized void addWindowListener (WindowListener listener)\n+  /** @specnote pack() doesn't appear to be called internally by show(), so\n+                we duplicate some of the functionality. */\n+  public void pack()\n   {\n-    windowListener = AWTEventMulticaster.add (windowListener, listener);\n+    if (parent != null\n+        && !parent.isDisplayable())\n+      parent.addNotify();\n+        if (peer == null)\n+      addNotify();\n+    \n+    // FIXME: do layout stuff here\n+    \n+    validate();\n+  }\n+\n+  public void show ()\n+  {\n+    if (isVisible())\n+      {\n+\tthis.toFront();\n+\treturn;\n+      }\n+  \n+    if (parent != null\n+        && !parent.isDisplayable())\n+      parent.addNotify();\n+    if (peer == null)\n+      addNotify ();    \n+\n+    validate ();\n+    \n+    super.show ();\n+\n+    // FIXME: Is this call neccessary or do we assume the peer takes care of \n+    // it?\n+    // this.toFront();\n+  }\n+\n+  public void hide()\n+  {\n+    // FIXME: call hide() on amy \"owned\" children here.\n+    super.hide();\n+  }\n+\n+  public void dispose()\n+  {\n+    // FIXME: first call removeNotify() on owned children\n+    for (int i = 0; i < ncomponents; ++i)\n+      component[i].removeNotify();\n+    this.removeNotify();\n   }\n \n-  public void dispose ()\n+  public void toBack ()\n   {\n+    if (peer != null)\n+      {\n+\tWindowPeer wp = (WindowPeer) peer;\n+\twp.toBack ();\n+      }\n   }\n \n-  public Component getFocusOwner ()\n+  public void toFront ()\n   {\n-    return null;\t\t// FIXME\n+    if (peer != null)\n+      {\n+\tWindowPeer wp = (WindowPeer) peer;\n+\twp.toFront ();\n+      }\n+  }\n+\n+  public Toolkit getToolkit()\n+  {\n+    // FIXME: why different from Component.getToolkit() ?\n+    return super.getToolkit();\n+  }\n+\n+  public final String getWarningString()\n+  {\n+    boolean secure = true;\n+    /* boolean secure = SecurityManager.checkTopLevelWindow(...) */\n+\n+    if (!secure)\n+      {\n+        if (warningString != null)\n+\t  return warningString;\n+\telse\n+\t  {\n+\t    String warning = System.getProperty(\"awt.appletWarning\");\n+\t    return warning;\n+\t  }\n+      }\n+    return null;\n   }\n \n   public Locale getLocale ()\n   {\n     return locale == null ? Locale.getDefault () : locale;\n   }\n \n-  public String getWarningString ()\n+  /*\n+  /** @since 1.2\n+  public InputContext getInputContext()\n   {\n-    return warningString;\n+    // FIXME\n   }\n+  */\n \n-  public void pack ()\n+  public void setCursor(Cursor cursor)\n   {\n-    addNotify ();\n-    // FIXME\n+    // FIXME: why different from Component.setCursor() ?\n+    super.setCursor(cursor);\n+  }\n+\n+  public Window getOwner()\n+  {\n+    if (parent != null)\n+      return (Window) parent;\n+    else \n+      return null;\n   }\n \n-  public boolean postEvent (Event evt)\n+  /** @since 1.2 */\n+  public Window[] getOwnedWindows()\n   {\n-    return false;\t\t// FIXME\n+    // FIXME: return array containing all the windows this window currently \n+    // owns.\n+    return null;\n+  }\n+\n+  public synchronized void addWindowListener (WindowListener listener)\n+  {\n+    windowListener = AWTEventMulticaster.add (windowListener, listener);\n+  }\n+\n+  public synchronized void removeWindowListener (WindowListener listener)\n+  {\n+    windowListener = AWTEventMulticaster.remove (windowListener, listener);\n+  }\n+\n+  /** @since 1.3 */\n+  public EventListener[] getListeners(Class listenerType)\n+  {\n+    if (listenerType == WindowListener.class)\n+      return getListenersImpl(listenerType, windowListener);\n+    else return super.getListeners(listenerType);\n+  }\n+\n+  void dispatchEventImpl(AWTEvent e)\n+  {\n+    // Make use of event id's in order to avoid multiple instanceof tests.\n+    if (e.id <= WindowEvent.WINDOW_LAST \n+        && e.id >= WindowEvent.WINDOW_FIRST\n+        && (windowListener != null \n+\t    || (eventMask & AWTEvent.WINDOW_EVENT_MASK) != 0))\n+      processEvent(e);\n+    else\n+      super.dispatchEventImpl(e);\n   }\n \n   protected void processEvent (AWTEvent evt)\n@@ -105,41 +278,47 @@ protected void processWindowEvent (WindowEvent evt)\n       }\n   }\n \n-  public synchronized void removeWindowListener (WindowListener listener)\n+  public Component getFocusOwner()\n   {\n-    windowListener = AWTEventMulticaster.remove (windowListener, listener);\n+    // FIXME\n+    return null;\n   }\n \n-  public void show ()\n+  public boolean postEvent(Event e)\n   {\n-    addNotify ();\n-    validate ();\n-    setVisible (true);\n-    // FIXME: is there more to it?\n+    // FIXME\n+    return false;\n   }\n \n-  public void toBack ()\n+  public boolean isShowing()\n   {\n-    if (peer != null)\n-      {\n-\tWindowPeer wp = (WindowPeer) peer;\n-\twp.toBack ();\n-      }\n+    // FIXME: Also check if window is within the boundary of the screen?\n+    return isVisible();\n   }\n \n-  public void toFront ()\n+  /** @since 1.2 */\n+  public void applyResourceBundle(ResourceBundle rb)\n   {\n-    if (peer != null)\n-      {\n-\tWindowPeer wp = (WindowPeer) peer;\n-\twp.toFront ();\n-      }\n+    // FIXME\n   }\n \n-  // Serialized fields, from Sun's serialization spec.\n-  // private FocusManager focusMgr;  // FIXME: what is this?\n-  private int state;\n-  private String warningString;\n+  /** @since 1.2 */\n+  public void applyResourceBundle(String rbName)\n+  {\n+    ResourceBundle rb = ResourceBundle.getBundle(rbName);\n+    if (rb != null)\n+      applyResourceBundle(rb);    \n+  }\n \n-  private transient WindowListener windowListener;\n+  /*\n+  public AccessibleContext getAccessibleContext()\n+  {\n+    // FIXME\n+  }\n+  */\n+\n+  public GraphicsConfiguration getGraphicsConfiguration()\n+  {\n+    return graphicsConfiguration;\n+  }\n }"}, {"sha": "34e92c7447ff246977e370eb6becbd63afadb289", "filename": "libjava/java/awt/color/ICC_Profile.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b996061366563d9caec5e0b5513316d92873d6a4/libjava%2Fjava%2Fawt%2Fcolor%2FICC_Profile.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b996061366563d9caec5e0b5513316d92873d6a4/libjava%2Fjava%2Fawt%2Fcolor%2FICC_Profile.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fcolor%2FICC_Profile.java?ref=b996061366563d9caec5e0b5513316d92873d6a4", "patch": "@@ -24,7 +24,7 @@\n \n   public int getNumComponents()\n   {\n-    switch (profileID)\n+    switch ((int) profileID)\n       {\n       case ColorSpace.CS_sRGB:\n       case ColorSpace.CS_LINEAR_RGB:"}, {"sha": "36e116f4748a75cf35feb6b9e31ad400a706e2b7", "filename": "libjava/java/awt/event/KeyEvent.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b996061366563d9caec5e0b5513316d92873d6a4/libjava%2Fjava%2Fawt%2Fevent%2FKeyEvent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b996061366563d9caec5e0b5513316d92873d6a4/libjava%2Fjava%2Fawt%2Fevent%2FKeyEvent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fevent%2FKeyEvent.java?ref=b996061366563d9caec5e0b5513316d92873d6a4", "patch": "@@ -251,7 +251,7 @@ public boolean isActionKey ()\n \n   public String paramString ()\n   {\n-    String r;\n+    String r = \"\";\n     switch (id)\n       {\n         case KEY_PRESSED:"}, {"sha": "28108f8e4a8388d2340aa547338755fa7e94c0df", "filename": "libjava/java/awt/event/WindowEvent.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b996061366563d9caec5e0b5513316d92873d6a4/libjava%2Fjava%2Fawt%2Fevent%2FWindowEvent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b996061366563d9caec5e0b5513316d92873d6a4/libjava%2Fjava%2Fawt%2Fevent%2FWindowEvent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fevent%2FWindowEvent.java?ref=b996061366563d9caec5e0b5513316d92873d6a4", "patch": "@@ -35,7 +35,7 @@ public Window getWindow ()\n \n   public String paramString ()\n   {\n-    String r;\n+    String r = \"\";\n     switch (id)\n       {\n         case WINDOW_ACTIVATED:"}, {"sha": "f891bf056ab65139327f81029f878013ae5b2b1c", "filename": "libjava/java/awt/geom/Dimension2D.java", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b996061366563d9caec5e0b5513316d92873d6a4/libjava%2Fjava%2Fawt%2Fgeom%2FDimension2D.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b996061366563d9caec5e0b5513316d92873d6a4/libjava%2Fjava%2Fawt%2Fgeom%2FDimension2D.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fgeom%2FDimension2D.java?ref=b996061366563d9caec5e0b5513316d92873d6a4", "patch": "@@ -31,6 +31,10 @@ public void setSize (Dimension2D dim)\n \n   public Object clone ()\n   {\n-    return super.clone();\n+    try\n+    {\n+      return super.clone ();\n+    } \n+    catch (CloneNotSupportedException _) {return null;}\n   }\n }"}, {"sha": "1e92adce3a144534c288265fc4729b45a8a2945b", "filename": "libjava/java/awt/geom/Point2D.java", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b996061366563d9caec5e0b5513316d92873d6a4/libjava%2Fjava%2Fawt%2Fgeom%2FPoint2D.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b996061366563d9caec5e0b5513316d92873d6a4/libjava%2Fjava%2Fawt%2Fgeom%2FPoint2D.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fgeom%2FPoint2D.java?ref=b996061366563d9caec5e0b5513316d92873d6a4", "patch": "@@ -64,7 +64,11 @@ public double distance (Point2D pt)\n \n   public Object clone()\n   {\n-    return super.clone();\n+    try\n+    {\n+      return super.clone ();\n+    } \n+    catch (CloneNotSupportedException _) {return null;}\n   }\n \n   public static class Double extends Point2D"}, {"sha": "536dd28b88f26da0358165f23b5fceb124028ce1", "filename": "libjava/java/awt/geom/RectangularShape.java", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b996061366563d9caec5e0b5513316d92873d6a4/libjava%2Fjava%2Fawt%2Fgeom%2FRectangularShape.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b996061366563d9caec5e0b5513316d92873d6a4/libjava%2Fjava%2Fawt%2Fgeom%2FRectangularShape.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fgeom%2FRectangularShape.java?ref=b996061366563d9caec5e0b5513316d92873d6a4", "patch": "@@ -170,7 +170,11 @@ public PathIterator getPathIterator (AffineTransform at, double flatness)\n \n   public Object clone ()\n   {\n-    return super.clone ();\n+    try\n+    {\n+      return super.clone ();\n+    } \n+    catch (CloneNotSupportedException _) {return null;}\n   }\n \n   // This implements the PathIterator for all RectangularShape objects"}, {"sha": "8e5ea3a64bb97bd45f37941e4c8e829a574bcf43", "filename": "libjava/java/awt/image/ColorModel.java", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b996061366563d9caec5e0b5513316d92873d6a4/libjava%2Fjava%2Fawt%2Fimage%2FColorModel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b996061366563d9caec5e0b5513316d92873d6a4/libjava%2Fjava%2Fawt%2Fimage%2FColorModel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fimage%2FColorModel.java?ref=b996061366563d9caec5e0b5513316d92873d6a4", "patch": "@@ -54,11 +54,11 @@ public abstract class ColorModel implements Transparency\n   protected int pixel_bits;\n   protected int transferType;\n \n-  private int[] bits;\n-  private ColorSpace cspace;\n-  private int transparency;\n-  private boolean hasAlpha;\n-  private boolean isAlphaPremultiplied;\n+  int[] bits;\n+  ColorSpace cspace;\n+  int transparency;\n+  boolean hasAlpha;\n+  boolean isAlphaPremultiplied;\n     \n   static int[] nArray(int value, int times)\n   {"}]}