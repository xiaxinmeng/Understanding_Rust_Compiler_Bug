{"sha": "48099f7dafe8d10e92ddfc88c0fd5bfbb435d3d6", "node_id": "C_kwDOANBUbNoAKDQ4MDk5ZjdkYWZlOGQxMGU5MmRkZmM4OGMwZmQ1YmZiYjQzNWQzZDY", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-06-23T17:17:30Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-06-27T10:08:16Z"}, "message": "libstdc++: Invert relationship between std::is_clock and std::is_clock_v\n\nThis redefines std::is_clock in terms of std::is_clock_v, instead of the\nother way around. This avoids instantiatng the class template for code\nthat only uses the variable template.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/chrono.h (is_clock_v): Define to false.\n\t(is_clock_v<T>): Define partial specialization for true cases.\n\t(is_clock): Define in terms of is_clock_v.", "tree": {"sha": "97cd15f174865a1c8e5d2bc863b78797181f4307", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97cd15f174865a1c8e5d2bc863b78797181f4307"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/48099f7dafe8d10e92ddfc88c0fd5bfbb435d3d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48099f7dafe8d10e92ddfc88c0fd5bfbb435d3d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48099f7dafe8d10e92ddfc88c0fd5bfbb435d3d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48099f7dafe8d10e92ddfc88c0fd5bfbb435d3d6/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "153689603fd6aeb95b20a86f3a04fc5b93b01b09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/153689603fd6aeb95b20a86f3a04fc5b93b01b09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/153689603fd6aeb95b20a86f3a04fc5b93b01b09"}], "stats": {"total": 45, "additions": 18, "deletions": 27}, "files": [{"sha": "05987ca09df1809830cfc800e9a6826bd477e79c", "filename": "libstdc++-v3/include/bits/chrono.h", "status": "modified", "additions": 18, "deletions": 27, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48099f7dafe8d10e92ddfc88c0fd5bfbb435d3d6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchrono.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48099f7dafe8d10e92ddfc88c0fd5bfbb435d3d6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchrono.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchrono.h?ref=48099f7dafe8d10e92ddfc88c0fd5bfbb435d3d6", "patch": "@@ -273,16 +273,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif // C++17\n \n #if __cplusplus > 201703L\n-    template<typename _Tp>\n-      struct is_clock;\n-\n-    template<typename _Tp>\n-      inline constexpr bool is_clock_v = is_clock<_Tp>::value;\n-\n #if __cpp_lib_concepts\n     template<typename _Tp>\n-      struct is_clock : false_type\n-      { };\n+      inline constexpr bool is_clock_v = false;\n \n     template<typename _Tp>\n       requires requires {\n@@ -298,32 +291,30 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \trequires same_as<typename _Tp::time_point::duration,\n \t\t\t typename _Tp::duration>;\n       }\n-      struct is_clock<_Tp> : true_type\n-      { };\n+    inline constexpr bool is_clock_v<_Tp> = true;\n #else\n     template<typename _Tp, typename = void>\n-      struct __is_clock_impl : false_type\n-      { };\n+      inline constexpr bool is_clock_v = false;\n \n     template<typename _Tp>\n-      struct __is_clock_impl<_Tp,\n-\t\t\t     void_t<typename _Tp::rep, typename _Tp::period,\n-\t\t\t\t    typename _Tp::duration,\n-\t\t\t\t    typename _Tp::time_point::duration,\n-\t\t\t\t    decltype(_Tp::is_steady),\n-\t\t\t\t    decltype(_Tp::now())>>\n-      : __and_<is_same<typename _Tp::duration,\n-\t\t       duration<typename _Tp::rep, typename _Tp::period>>,\n-\t       is_same<typename _Tp::time_point::duration,\n-\t\t       typename _Tp::duration>,\n-\t       is_same<decltype(&_Tp::is_steady), const bool*>,\n-\t       is_same<decltype(_Tp::now()), typename _Tp::time_point>>::type\n-      { };\n+      inline constexpr bool\n+      is_clock_v<_Tp, void_t<typename _Tp::rep, typename _Tp::period,\n+\t\t\t     typename _Tp::duration,\n+\t\t\t     typename _Tp::time_point::duration,\n+\t\t\t     decltype(_Tp::is_steady),\n+\t\t\t     decltype(_Tp::now())>>\n+\t= __and_v<is_same<typename _Tp::duration,\n+\t\t\t  duration<typename _Tp::rep, typename _Tp::period>>,\n+\t\t  is_same<typename _Tp::time_point::duration,\n+\t\t\t  typename _Tp::duration>,\n+\t\t  is_same<decltype(&_Tp::is_steady), const bool*>,\n+\t\t  is_same<decltype(_Tp::now()), typename _Tp::time_point>>;\n+#endif\n \n     template<typename _Tp>\n-      struct is_clock : __is_clock_impl<_Tp>::type\n+      struct is_clock\n+      : bool_constant<is_clock_v<_Tp>>\n       { };\n-#endif\n #endif // C++20\n \n #if __cplusplus >= 201703L"}]}