{"sha": "b52ce03da5fcaf93480c6f0d95e9be500a97fb33", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjUyY2UwM2RhNWZjYWY5MzQ4MGM2ZjBkOTVlOWJlNTAwYTk3ZmIzMw==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "amylaar@cygnus.co.uk", "date": "1998-05-21T11:35:10Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "1998-05-21T11:35:10Z"}, "message": "combine.c (nonzero_bits): For paradoxical subregs, take LOAD_EXTENDED_OP into account.\n\n\t* combine.c (nonzero_bits): For paradoxical subregs, take\n\tLOAD_EXTENDED_OP into account.\n\nFrom-SVN: r19928", "tree": {"sha": "431dc6bf5789b9644883f3f5629c6b90c7570170", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/431dc6bf5789b9644883f3f5629c6b90c7570170"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b52ce03da5fcaf93480c6f0d95e9be500a97fb33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b52ce03da5fcaf93480c6f0d95e9be500a97fb33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b52ce03da5fcaf93480c6f0d95e9be500a97fb33", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b52ce03da5fcaf93480c6f0d95e9be500a97fb33/comments", "author": null, "committer": null, "parents": [{"sha": "d4dfe7d66cd2d6141684e2b686a4c3bc7bddbf39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4dfe7d66cd2d6141684e2b686a4c3bc7bddbf39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4dfe7d66cd2d6141684e2b686a4c3bc7bddbf39"}], "stats": {"total": 29, "additions": 21, "deletions": 8}, "files": [{"sha": "077c913a85b3052732e9e02181e30455eb4761e9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52ce03da5fcaf93480c6f0d95e9be500a97fb33/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52ce03da5fcaf93480c6f0d95e9be500a97fb33/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b52ce03da5fcaf93480c6f0d95e9be500a97fb33", "patch": "@@ -1,3 +1,8 @@\n+Thu May 21 19:32:27 1998  J\"orn Rennecke <amylaar@cygnus.co.uk>\n+\n+\t* combine.c (nonzero_bits): For paradoxical subregs, take\n+\tLOAD_EXTENDED_OP into account.\n+\n Thu May 21 11:51:15 1998  Dave Brolley  <brolley@cygnus.com>\n \n \t* configure.in (extra_c_objs): add prefix.o."}, {"sha": "14da483ccd11194c936f75db9ef6038797da77c1", "filename": "gcc/combine.c", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52ce03da5fcaf93480c6f0d95e9be500a97fb33/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52ce03da5fcaf93480c6f0d95e9be500a97fb33/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=b52ce03da5fcaf93480c6f0d95e9be500a97fb33", "patch": "@@ -7693,15 +7693,23 @@ nonzero_bits (x, mode)\n \t{\n \t  nonzero &= nonzero_bits (SUBREG_REG (x), mode);\n \n-#ifndef WORD_REGISTER_OPERATIONS\n-\t  /* On many CISC machines, accessing an object in a wider mode\n-\t     causes the high-order bits to become undefined.  So they are\n-\t     not known to be zero.  */\n-\t  if (GET_MODE_SIZE (GET_MODE (x))\n-\t      > GET_MODE_SIZE (GET_MODE (SUBREG_REG (x))))\n-\t    nonzero |= (GET_MODE_MASK (GET_MODE (x))\n-\t\t\t& ~ GET_MODE_MASK (GET_MODE (SUBREG_REG (x))));\n+#if defined (WORD_REGISTER_OPERATIONS) && defined (LOAD_EXTEND_OP)\n+\t  /* If this is a typical RISC machine, we only have to worry\n+\t     about the way loads are extended.  */\n+\t  if (LOAD_EXTEND_OP (GET_MODE (SUBREG_REG (x))) == SIGN_EXTEND\n+\t      ? (nonzero\n+\t\t & (1L << (GET_MODE_BITSIZE (GET_MODE (SUBREG_REG (x))) - 1)))\n+\t      : LOAD_EXTEND_OP (GET_MODE (SUBREG_REG (x))) != ZERO_EXTEND)\n #endif\n+\t    {\n+\t      /* On many CISC machines, accessing an object in a wider mode\n+\t\t causes the high-order bits to become undefined.  So they are\n+\t\t not known to be zero.  */\n+\t      if (GET_MODE_SIZE (GET_MODE (x))\n+\t\t  > GET_MODE_SIZE (GET_MODE (SUBREG_REG (x))))\n+\t\tnonzero |= (GET_MODE_MASK (GET_MODE (x))\n+\t\t\t    & ~ GET_MODE_MASK (GET_MODE (SUBREG_REG (x))));\n+\t    }\n \t}\n       break;\n "}]}