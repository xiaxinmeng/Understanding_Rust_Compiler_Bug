{"sha": "a11e0df4da7c987c9627724748fe727183e9379f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTExZTBkZjRkYTdjOTg3Yzk2Mjc3MjQ3NDhmZTcyNzE4M2U5Mzc5Zg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2011-05-25T11:00:14Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2011-05-25T11:00:14Z"}, "message": "common.opt (flag_stack_usage_info): New variable.\n\n\t* common.opt (flag_stack_usage_info): New variable.\n\t(-Wstack-usage): New option.\n\t* doc/invoke.texi (Warning options): Document -Wstack-usage.\n\t* opts.c (common_handle_option) <OPT_Wstack_usage_>: New case.\n\t<OPT_fstack_usage>: Likewise.\n\t* toplev.c (output_stack_usage): Handle -Wstack-usage.\n\t* calls.c (expand_call): Test flag_stack_usage_info variable instead\n\tof flag_stack_usage.\n\t(emit_library_call_value_1): Likewise.\n\t* explow.c (allocate_dynamic_stack_space): Likewise.\n\t* function.c (instantiate_virtual_regs ): Likewise.\n\t(prepare_function_start): Likewise.\n\t(rest_of_handle_thread_prologue_and_epilogue): Likewise.\n\t* config/alpha/alpha.c (alpha_expand_prologue): Likewise.\n\t* config/arm/arm.c (arm_expand_prologue): Likewise.\n\t(thumb1_expand_prologue): Likewise.\n\t* config/avr/avr.c (expand_prologue): Likewise.\n\t* config/i386/i386.c (ix86_expand_prologue): Likewise.\n\t* config/ia64/ia64.c (ia64_expand_prologue): Likewise.\n\t* config/m68k/m68k.c (m68k_expand_prologue): Likewise.\n\t* config/mips/mips.c (mips_expand_prologue): Likewise.\n\t* config/pa/pa.c (hppa_expand_prologue): Likewise.\n\t* config/rs6000/rs6000.c (rs6000_emit_prologue): Likewise.\n\t* config/s390/s390.c (s390_emit_prologue): Likewise.\n\t* config/sh/sh.c (sh_expand_prologue): Likewise.\n\t* config/sparc/sparc.c (sparc_expand_prologue): Likewise.\n\t* config/spu/spu.c (spu_expand_prologue): Likewise.\n\nFrom-SVN: r174182", "tree": {"sha": "8f263f60484dabe77a13c389e9ce210b121dbc56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f263f60484dabe77a13c389e9ce210b121dbc56"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a11e0df4da7c987c9627724748fe727183e9379f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a11e0df4da7c987c9627724748fe727183e9379f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a11e0df4da7c987c9627724748fe727183e9379f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a11e0df4da7c987c9627724748fe727183e9379f/comments", "author": null, "committer": null, "parents": [{"sha": "e7cfe2413fe50e22eb2c013415cec9e154d3c391", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7cfe2413fe50e22eb2c013415cec9e154d3c391", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7cfe2413fe50e22eb2c013415cec9e154d3c391"}], "stats": {"total": 229, "additions": 182, "deletions": 47}, "files": [{"sha": "b57b242724e6d4990e0f13b635a6e9f4f1738f54", "filename": "gcc/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11e0df4da7c987c9627724748fe727183e9379f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11e0df4da7c987c9627724748fe727183e9379f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a11e0df4da7c987c9627724748fe727183e9379f", "patch": "@@ -1,3 +1,33 @@\n+2011-05-25  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* common.opt (flag_stack_usage_info): New variable.\n+\t(-Wstack-usage): New option.\n+\t* doc/invoke.texi (Warning options): Document -Wstack-usage.\n+\t* opts.c (common_handle_option) <OPT_Wstack_usage_>: New case.\n+\t<OPT_fstack_usage>: Likewise.\n+\t* toplev.c (output_stack_usage): Handle -Wstack-usage.\n+\t* calls.c (expand_call): Test flag_stack_usage_info variable instead\n+\tof flag_stack_usage.\n+\t(emit_library_call_value_1): Likewise.\n+\t* explow.c (allocate_dynamic_stack_space): Likewise.\n+\t* function.c (instantiate_virtual_regs ): Likewise.\n+\t(prepare_function_start): Likewise.\n+\t(rest_of_handle_thread_prologue_and_epilogue): Likewise.\n+\t* config/alpha/alpha.c (alpha_expand_prologue): Likewise.\n+\t* config/arm/arm.c (arm_expand_prologue): Likewise.\n+\t(thumb1_expand_prologue): Likewise.\n+\t* config/avr/avr.c (expand_prologue): Likewise.\n+\t* config/i386/i386.c (ix86_expand_prologue): Likewise.\n+\t* config/ia64/ia64.c (ia64_expand_prologue): Likewise.\n+\t* config/m68k/m68k.c (m68k_expand_prologue): Likewise.\n+\t* config/mips/mips.c (mips_expand_prologue): Likewise.\n+\t* config/pa/pa.c (hppa_expand_prologue): Likewise.\n+\t* config/rs6000/rs6000.c (rs6000_emit_prologue): Likewise.\n+\t* config/s390/s390.c (s390_emit_prologue): Likewise.\n+\t* config/sh/sh.c (sh_expand_prologue): Likewise.\n+\t* config/sparc/sparc.c (sparc_expand_prologue): Likewise.\n+\t* config/spu/spu.c (spu_expand_prologue): Likewise.\n+\n 2011-05-25  Richard Guenther  <rguenther@suse.de>\n \n \t* gimple.c (iterative_hash_canonical_type): Skip non-FIELD_DECLs."}, {"sha": "512ff0e4912ae29661943668ce60b27b39f02ea0", "filename": "gcc/calls.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11e0df4da7c987c9627724748fe727183e9379f/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11e0df4da7c987c9627724748fe727183e9379f/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=a11e0df4da7c987c9627724748fe727183e9379f", "patch": "@@ -2501,7 +2501,7 @@ expand_call (tree exp, rtx target, int ignore)\n \t      stack_arg_under_construction = 0;\n \t    }\n \t  argblock = push_block (ARGS_SIZE_RTX (adjusted_args_size), 0, 0);\n-\t  if (flag_stack_usage)\n+\t  if (flag_stack_usage_info)\n \t    current_function_has_unbounded_dynamic_stack_size = 1;\n \t}\n       else\n@@ -2708,7 +2708,7 @@ expand_call (tree exp, rtx target, int ignore)\n       /* Record the maximum pushed stack space size.  We need to delay\n \t doing it this far to take into account the optimization done\n \t by combine_pending_stack_adjustment_and_call.  */\n-      if (flag_stack_usage\n+      if (flag_stack_usage_info\n \t  && !ACCUMULATE_OUTGOING_ARGS\n \t  && pass\n \t  && adjusted_args_size.var == 0)\n@@ -3573,7 +3573,7 @@ emit_library_call_value_1 (int retval, rtx orgfun, rtx value,\n   if (args_size.constant > crtl->outgoing_args_size)\n     crtl->outgoing_args_size = args_size.constant;\n \n-  if (flag_stack_usage && !ACCUMULATE_OUTGOING_ARGS)\n+  if (flag_stack_usage_info && !ACCUMULATE_OUTGOING_ARGS)\n     {\n       int pushed = args_size.constant + pending_stack_adjust;\n       if (pushed > current_function_pushed_stack_size)"}, {"sha": "3ee9ded462454f3a82a5df145f151ee7638008ef", "filename": "gcc/common.opt", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11e0df4da7c987c9627724748fe727183e9379f/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11e0df4da7c987c9627724748fe727183e9379f/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=a11e0df4da7c987c9627724748fe727183e9379f", "patch": "@@ -138,6 +138,10 @@ enum vect_verbosity_levels user_vect_verbosity_level = MAX_VERBOSITY_LEVEL\n Variable\n enum stack_check_type flag_stack_check = NO_STACK_CHECK\n \n+; True if stack usage information needs to be computed.\n+Variable\n+bool flag_stack_usage_info = false\n+\n ; -dA causes debug commentary information to be produced in\n ; the generated assembly code (to make it more readable).  This option\n ; is generally only of use to those who actually need to read the\n@@ -575,6 +579,10 @@ Wstack-protector\n Common Var(warn_stack_protect) Warning\n Warn when not issuing stack smashing protection for some reason\n \n+Wstack-usage=\n+Common Joined RejectNegative UInteger Var(warn_stack_usage) Init(-1) Warning\n+Warn if stack usage might be larger than specified amount\n+\n Wstrict-aliasing\n Common Warning\n Warn about code which might break strict aliasing rules"}, {"sha": "7323329e80df3c5150dd3297d20ef74cdc2efb77", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11e0df4da7c987c9627724748fe727183e9379f/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11e0df4da7c987c9627724748fe727183e9379f/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=a11e0df4da7c987c9627724748fe727183e9379f", "patch": "@@ -7522,7 +7522,7 @@ alpha_expand_prologue (void)\n   sa_size = alpha_sa_size ();\n   frame_size = compute_frame_size (get_frame_size (), sa_size);\n \n-  if (flag_stack_usage)\n+  if (flag_stack_usage_info)\n     current_function_static_stack_size = frame_size;\n \n   if (TARGET_ABI_OPEN_VMS)"}, {"sha": "22ddcd217cef586772ae4064ff06966e1821ae36", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11e0df4da7c987c9627724748fe727183e9379f/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11e0df4da7c987c9627724748fe727183e9379f/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=a11e0df4da7c987c9627724748fe727183e9379f", "patch": "@@ -15815,7 +15815,7 @@ arm_expand_prologue (void)\n \t}\n     }\n \n-  if (flag_stack_usage)\n+  if (flag_stack_usage_info)\n     current_function_static_stack_size\n       = offsets->outgoing_args - offsets->saved_args;\n \n@@ -20800,7 +20800,7 @@ thumb1_expand_prologue (void)\n     emit_move_insn (gen_rtx_REG (Pmode, ARM_HARD_FRAME_POINTER_REGNUM),\n \t\t    stack_pointer_rtx);\n \n-  if (flag_stack_usage)\n+  if (flag_stack_usage_info)\n     current_function_static_stack_size\n       = offsets->outgoing_args - offsets->saved_args;\n "}, {"sha": "5a565b0857ffcc2db81c05de44d100efe31d10e2", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11e0df4da7c987c9627724748fe727183e9379f/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11e0df4da7c987c9627724748fe727183e9379f/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=a11e0df4da7c987c9627724748fe727183e9379f", "patch": "@@ -892,7 +892,7 @@ expand_prologue (void)\n         }\n     }\n \n-  if (flag_stack_usage)\n+  if (flag_stack_usage_info)\n     current_function_static_stack_size = cfun->machine->stack_usage;\n }\n "}, {"sha": "4b5bc96c49293e42ab886aaf48a8f96ff45d1e43", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11e0df4da7c987c9627724748fe727183e9379f/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11e0df4da7c987c9627724748fe727183e9379f/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=a11e0df4da7c987c9627724748fe727183e9379f", "patch": "@@ -10546,7 +10546,7 @@ ix86_expand_prologue (void)\n \n   allocate = frame.stack_pointer_offset - m->fs.sp_offset;\n \n-  if (flag_stack_usage)\n+  if (flag_stack_usage_info)\n     {\n       /* We start to count from ARG_POINTER.  */\n       HOST_WIDE_INT stack_size = frame.stack_pointer_offset;"}, {"sha": "c1cebbaf21b3b96020aac2c6dffcf29320630e6e", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11e0df4da7c987c9627724748fe727183e9379f/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11e0df4da7c987c9627724748fe727183e9379f/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=a11e0df4da7c987c9627724748fe727183e9379f", "patch": "@@ -3183,7 +3183,7 @@ ia64_expand_prologue (void)\n   ia64_compute_frame_size (get_frame_size ());\n   last_scratch_gr_reg = 15;\n \n-  if (flag_stack_usage)\n+  if (flag_stack_usage_info)\n     current_function_static_stack_size = current_frame_info.total_size;\n \n   if (dump_file) "}, {"sha": "fd27ee43a148b87251803c1c5644ea113a44d5eb", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11e0df4da7c987c9627724748fe727183e9379f/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11e0df4da7c987c9627724748fe727183e9379f/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=a11e0df4da7c987c9627724748fe727183e9379f", "patch": "@@ -981,7 +981,7 @@ m68k_expand_prologue (void)\n \n   m68k_compute_frame_layout ();\n \n-  if (flag_stack_usage)\n+  if (flag_stack_usage_info)\n     current_function_static_stack_size\n       = current_frame.size + current_frame.offset;\n "}, {"sha": "46b25f7b985296b57637ce865b3041602569c202", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11e0df4da7c987c9627724748fe727183e9379f/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11e0df4da7c987c9627724748fe727183e9379f/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=a11e0df4da7c987c9627724748fe727183e9379f", "patch": "@@ -10008,7 +10008,7 @@ mips_expand_prologue (void)\n   frame = &cfun->machine->frame;\n   size = frame->total_size;\n \n-  if (flag_stack_usage)\n+  if (flag_stack_usage_info)\n     current_function_static_stack_size = size;\n \n   /* Save the registers.  Allocate up to MIPS_MAX_FIRST_STACK_STEP"}, {"sha": "e512a33c0700152b19803229c9252a347c3f731a", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11e0df4da7c987c9627724748fe727183e9379f/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11e0df4da7c987c9627724748fe727183e9379f/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=a11e0df4da7c987c9627724748fe727183e9379f", "patch": "@@ -3807,7 +3807,7 @@ hppa_expand_prologue (void)\n     local_fsize += STARTING_FRAME_OFFSET;\n \n   actual_fsize = compute_frame_size (size, &save_fregs);\n-  if (flag_stack_usage)\n+  if (flag_stack_usage_info)\n     current_function_static_stack_size = actual_fsize;\n \n   /* Compute a few things we will use often.  */"}, {"sha": "48f387e98b6c5a81355f31456d66e052c1171b69", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11e0df4da7c987c9627724748fe727183e9379f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11e0df4da7c987c9627724748fe727183e9379f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=a11e0df4da7c987c9627724748fe727183e9379f", "patch": "@@ -20116,7 +20116,7 @@ rs6000_emit_prologue (void)\n \t\t\t      && call_used_regs[STATIC_CHAIN_REGNUM]);\n   HOST_WIDE_INT sp_offset = 0;\n \n-  if (flag_stack_usage)\n+  if (flag_stack_usage_info)\n     current_function_static_stack_size = info->total_size;\n \n   if (flag_stack_check == STATIC_BUILTIN_STACK_CHECK && info->total_size)"}, {"sha": "e86755b37d99531e841ec57ec9cd6332f24b463a", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11e0df4da7c987c9627724748fe727183e9379f/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11e0df4da7c987c9627724748fe727183e9379f/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=a11e0df4da7c987c9627724748fe727183e9379f", "patch": "@@ -8097,7 +8097,7 @@ s390_emit_prologue (void)\n   if (!TARGET_PACKED_STACK)\n     next_fpr = cfun_save_high_fprs_p ? 31 : 0;\n \n-  if (flag_stack_usage)\n+  if (flag_stack_usage_info)\n     current_function_static_stack_size = cfun_frame_layout.frame_size;\n \n   /* Decrement stack pointer.  */"}, {"sha": "94c8ba4fb0ac8ab44e29670e3fa886df7cddf794", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11e0df4da7c987c9627724748fe727183e9379f/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11e0df4da7c987c9627724748fe727183e9379f/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=a11e0df4da7c987c9627724748fe727183e9379f", "patch": "@@ -7349,7 +7349,7 @@ sh_expand_prologue (void)\n       emit_insn (gen_shcompact_incoming_args ());\n     }\n \n-  if (flag_stack_usage)\n+  if (flag_stack_usage_info)\n     current_function_static_stack_size = stack_usage;\n }\n "}, {"sha": "c0f4e75590aed86748d8b7faf21ffda85dc66ac3", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11e0df4da7c987c9627724748fe727183e9379f/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11e0df4da7c987c9627724748fe727183e9379f/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=a11e0df4da7c987c9627724748fe727183e9379f", "patch": "@@ -4522,7 +4522,7 @@ sparc_expand_prologue (void)\n   /* Advertise that the data calculated just above are now valid.  */\n   sparc_prologue_data_valid_p = true;\n \n-  if (flag_stack_usage)\n+  if (flag_stack_usage_info)\n     current_function_static_stack_size = actual_fsize;\n \n   if (flag_stack_check == STATIC_BUILTIN_STACK_CHECK && actual_fsize)"}, {"sha": "51a771563c6e1f031dc2694f43019bfc13fbd187", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11e0df4da7c987c9627724748fe727183e9379f/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11e0df4da7c987c9627724748fe727183e9379f/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=a11e0df4da7c987c9627724748fe727183e9379f", "patch": "@@ -2101,7 +2101,7 @@ spu_expand_prologue (void)\n \t}\n     }\n \n-  if (flag_stack_usage)\n+  if (flag_stack_usage_info)\n     current_function_static_stack_size = total_size;\n }\n "}, {"sha": "f53d61071148a5cbb080de7d07fa0db2300acc3c", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11e0df4da7c987c9627724748fe727183e9379f/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11e0df4da7c987c9627724748fe727183e9379f/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=a11e0df4da7c987c9627724748fe727183e9379f", "patch": "@@ -260,7 +260,7 @@ Objective-C and Objective-C++ Dialects}.\n -Wredundant-decls @gol\n -Wreturn-type  -Wsequence-point  -Wshadow @gol\n -Wsign-compare  -Wsign-conversion  -Wstack-protector @gol\n--Wstrict-aliasing -Wstrict-aliasing=n @gol\n+-Wstack-usage=@var{len} -Wstrict-aliasing -Wstrict-aliasing=n @gol\n -Wstrict-overflow -Wstrict-overflow=@var{n} @gol\n -Wsuggest-attribute=@r{[}pure@r{|}const@r{|}noreturn@r{]} @gol\n -Wswitch  -Wswitch-default  -Wswitch-enum -Wsync-nand @gol\n@@ -3924,6 +3924,37 @@ via @code{alloca}, variable-length arrays, or related constructs\n is not included by the compiler when determining\n whether or not to issue a warning.\n \n+@item -Wstack-usage=@var{len}\n+@opindex Wstack-usage\n+Warn if the stack usage of a function might be larger than @var{len} bytes.\n+The computation done to determine the stack usage is conservative.\n+Any space allocated via @code{alloca}, variable-length arrays, or related\n+constructs is included by the compiler when determining whether or not to\n+issue a warning.\n+\n+The message is in keeping with the output of @option{-fstack-usage}.\n+\n+@itemize\n+@item\n+If the stack usage is fully static but exceeds the specified amount, it's:\n+\n+@smallexample\n+\ufffd warning: stack usage is 1120 bytes\n+@end smallexample\n+@item\n+If the stack usage is (partly) dynamic but bounded, it's:\n+\n+@smallexample\n+\ufffd warning: stack usage might be 1648 bytes\n+@end smallexample\n+@item\n+If the stack usage is (partly) dynamic and not bounded, it's:\n+\n+@smallexample\n+\ufffd warning: stack usage might be unbounded\n+@end smallexample\n+@end itemize\n+\n @item -Wunsafe-loop-optimizations\n @opindex Wunsafe-loop-optimizations\n @opindex Wno-unsafe-loop-optimizations"}, {"sha": "fe507877c900c694cd116645b0cc7f3e9bd2d2a1", "filename": "gcc/explow.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11e0df4da7c987c9627724748fe727183e9379f/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11e0df4da7c987c9627724748fe727183e9379f/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=a11e0df4da7c987c9627724748fe727183e9379f", "patch": "@@ -1150,7 +1150,7 @@ allocate_dynamic_stack_space (rtx size, unsigned size_align,\n   /* If stack usage info is requested, look into the size we are passed.\n      We need to do so this early to avoid the obfuscation that may be\n      introduced later by the various alignment operations.  */\n-  if (flag_stack_usage)\n+  if (flag_stack_usage_info)\n     {\n       if (CONST_INT_P (size))\n \tstack_usage_size = INTVAL (size);\n@@ -1242,7 +1242,7 @@ allocate_dynamic_stack_space (rtx size, unsigned size_align,\n       size = plus_constant (size, extra);\n       size = force_operand (size, NULL_RTX);\n \n-      if (flag_stack_usage)\n+      if (flag_stack_usage_info)\n \tstack_usage_size += extra;\n \n       if (extra && size_align > extra_align)\n@@ -1273,7 +1273,7 @@ allocate_dynamic_stack_space (rtx size, unsigned size_align,\n       /* The above dynamic offset cannot be computed statically at this\n \t point, but it will be possible to do so after RTL expansion is\n \t done.  Record how many times we will need to add it.  */\n-      if (flag_stack_usage)\n+      if (flag_stack_usage_info)\n \tcurrent_function_dynamic_alloc_count++;\n \n       /* ??? Can we infer a minimum of STACK_BOUNDARY here?  */\n@@ -1298,7 +1298,7 @@ allocate_dynamic_stack_space (rtx size, unsigned size_align,\n     {\n       size = round_push (size);\n \n-      if (flag_stack_usage)\n+      if (flag_stack_usage_info)\n \t{\n \t  int align = crtl->preferred_stack_boundary / BITS_PER_UNIT;\n \t  stack_usage_size = (stack_usage_size + align - 1) / align * align;\n@@ -1309,7 +1309,7 @@ allocate_dynamic_stack_space (rtx size, unsigned size_align,\n \n   /* The size is supposed to be fully adjusted at this point so record it\n      if stack usage info is requested.  */\n-  if (flag_stack_usage)\n+  if (flag_stack_usage_info)\n     {\n       current_function_dynamic_stack_size += stack_usage_size;\n "}, {"sha": "c0350be5b177dc1db9dc693b1901da1a6f7cc8ff", "filename": "gcc/function.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11e0df4da7c987c9627724748fe727183e9379f/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11e0df4da7c987c9627724748fe727183e9379f/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=a11e0df4da7c987c9627724748fe727183e9379f", "patch": "@@ -1939,7 +1939,7 @@ instantiate_virtual_regs (void)\n \n   /* See allocate_dynamic_stack_space for the rationale.  */\n #ifdef SETJMP_VIA_SAVE_AREA\n-  if (flag_stack_usage && cfun->calls_setjmp)\n+  if (flag_stack_usage_info && cfun->calls_setjmp)\n     {\n       int align = PREFERRED_STACK_BOUNDARY / BITS_PER_UNIT;\n       dynamic_offset = (dynamic_offset + align - 1) / align * align;\n@@ -4465,7 +4465,7 @@ prepare_function_start (void)\n   init_expr ();\n   default_rtl_profile ();\n \n-  if (flag_stack_usage)\n+  if (flag_stack_usage_info)\n     {\n       cfun->su = ggc_alloc_cleared_stack_usage ();\n       cfun->su->static_stack_size = -1;\n@@ -5939,7 +5939,7 @@ rest_of_handle_thread_prologue_and_epilogue (void)\n   thread_prologue_and_epilogue_insns ();\n \n   /* The stack usage info is finalized during prologue expansion.  */\n-  if (flag_stack_usage)\n+  if (flag_stack_usage_info)\n     output_stack_usage ();\n \n   return 0;"}, {"sha": "f7355576928e8c670e1c33c3b1ab6d4e4fc05758", "filename": "gcc/opts.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11e0df4da7c987c9627724748fe727183e9379f/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11e0df4da7c987c9627724748fe727183e9379f/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=a11e0df4da7c987c9627724748fe727183e9379f", "patch": "@@ -1422,6 +1422,11 @@ common_handle_option (struct gcc_options *opts,\n       opts->x_warn_frame_larger_than = value != -1;\n       break;\n \n+    case OPT_Wstack_usage_:\n+      opts->x_warn_stack_usage = value;\n+      opts->x_flag_stack_usage_info = value != -1;\n+      break;\n+\n     case OPT_Wstrict_aliasing:\n       set_Wstrict_aliasing (opts, value);\n       break;\n@@ -1643,6 +1648,11 @@ common_handle_option (struct gcc_options *opts,\n       /* Deferred.  */\n       break;\n \n+    case OPT_fstack_usage:\n+      opts->x_flag_stack_usage = value;\n+      opts->x_flag_stack_usage_info = value != 0;\n+      break;\n+\n     case OPT_ftree_vectorizer_verbose_:\n       vect_set_verbosity_level (opts, value);\n       break;"}, {"sha": "7e1878504f7f9aa09999f9f1ba5b8892377bb75c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11e0df4da7c987c9627724748fe727183e9379f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11e0df4da7c987c9627724748fe727183e9379f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a11e0df4da7c987c9627724748fe727183e9379f", "patch": "@@ -1,3 +1,8 @@\n+2011-05-25  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc.dg/stack-usage-1.c: Adjust comment.\n+\t* gcc.dg/stack-usage-2.c: New test.\n+\n 2011-05-25  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/49136"}, {"sha": "f55168e9e4401a2f6c6000d5e2898f799c592408", "filename": "gcc/testsuite/gcc.dg/stack-usage-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11e0df4da7c987c9627724748fe727183e9379f/gcc%2Ftestsuite%2Fgcc.dg%2Fstack-usage-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11e0df4da7c987c9627724748fe727183e9379f/gcc%2Ftestsuite%2Fgcc.dg%2Fstack-usage-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstack-usage-1.c?ref=a11e0df4da7c987c9627724748fe727183e9379f", "patch": "@@ -2,7 +2,7 @@\n /* { dg-options \"-fstack-usage\" } */\n \n /* This is aimed at testing basic support for -fstack-usage in the back-ends.\n-   See the SPARC back-end for an example (grep flag_stack_usage in sparc.c).\n+   See the SPARC back-end for example (grep flag_stack_usage_info in sparc.c).\n    Once it is implemented, adjust SIZE below so that the stack usage for the\n    function FOO is reported as 256 or 264 in the stack usage (.su) file.\n    Then check that this is the actual stack usage in the assembly file.  */"}, {"sha": "d3c17a84d88224ce1ce2ed8e586011242be1cfef", "filename": "gcc/testsuite/gcc.dg/stack-usage-2.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11e0df4da7c987c9627724748fe727183e9379f/gcc%2Ftestsuite%2Fgcc.dg%2Fstack-usage-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11e0df4da7c987c9627724748fe727183e9379f/gcc%2Ftestsuite%2Fgcc.dg%2Fstack-usage-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstack-usage-2.c?ref=a11e0df4da7c987c9627724748fe727183e9379f", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wstack-usage=512\" } */\n+\n+int foo1 (void)\n+{\n+  char arr[16];\n+  arr[0] = 1;\n+  return 0;\n+} /* { dg-bogus \"stack usage\" } */\n+\n+int foo2 (void)\n+{\n+  char arr[1024];\n+  arr[0] = 1;\n+  return 0;\n+} /* { dg-warning \"stack usage is \\[0-9\\]* bytes\" } */\n+\n+int foo3 (void)\n+{\n+  char arr[1024] __attribute__((aligned (512)));\n+  arr[0] = 1;\n+  /* Force dynamic realignment of argument pointer.  */\n+  __builtin_apply ((void (*)()) foo2, 0, 0);\n+  return 0;\n+\n+} /* { dg-warning \"stack usage might be \\[0-9\\]* bytes\" } */\n+\n+int foo4 (int n)\n+{\n+  char arr[n];\n+  arr[0] = 1;\n+  return 0;\n+} /* { dg-warning \"stack usage might be unbounded\" } */"}, {"sha": "6c992cf21b7d4427469248646a097be03b8ce8a3", "filename": "gcc/toplev.c", "status": "modified", "additions": 38, "deletions": 20, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11e0df4da7c987c9627724748fe727183e9379f/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11e0df4da7c987c9627724748fe727183e9379f/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=a11e0df4da7c987c9627724748fe727183e9379f", "patch": "@@ -1048,14 +1048,12 @@ output_stack_usage (void)\n   };\n   HOST_WIDE_INT stack_usage = current_function_static_stack_size;\n   enum stack_usage_kind_type stack_usage_kind;\n-  expanded_location loc;\n-  const char *raw_id, *id;\n \n   if (stack_usage < 0)\n     {\n       if (!warning_issued)\n \t{\n-\t  warning (0, \"-fstack-usage not supported for this target\");\n+\t  warning (0, \"stack usage computation not supported for this target\");\n \t  warning_issued = true;\n \t}\n       return;\n@@ -1082,24 +1080,44 @@ output_stack_usage (void)\n       stack_usage += current_function_dynamic_stack_size;\n     }\n \n-  loc = expand_location (DECL_SOURCE_LOCATION (current_function_decl));\n+  if (flag_stack_usage)\n+    {\n+      expanded_location loc\n+\t= expand_location (DECL_SOURCE_LOCATION (current_function_decl));\n+      const char *raw_id, *id;\n+\n+      /* Strip the scope prefix if any.  */\n+      raw_id = lang_hooks.decl_printable_name (current_function_decl, 2);\n+      id = strrchr (raw_id, '.');\n+      if (id)\n+\tid++;\n+      else\n+\tid = raw_id;\n+\n+      fprintf (stack_usage_file,\n+\t       \"%s:%d:%d:%s\\t\"HOST_WIDE_INT_PRINT_DEC\"\\t%s\\n\",\n+\t       lbasename (loc.file),\n+\t       loc.line,\n+\t       loc.column,\n+\t       id,\n+\t       stack_usage,\n+\t       stack_usage_kind_str[stack_usage_kind]);\n+    }\n \n-  /* Strip the scope prefix if any.  */\n-  raw_id = lang_hooks.decl_printable_name (current_function_decl, 2);\n-  id = strrchr (raw_id, '.');\n-  if (id)\n-    id++;\n-  else\n-    id = raw_id;\n-\n-  fprintf (stack_usage_file,\n-\t   \"%s:%d:%d:%s\\t\"HOST_WIDE_INT_PRINT_DEC\"\\t%s\\n\",\n-\t   lbasename (loc.file),\n-\t   loc.line,\n-\t   loc.column,\n-\t   id,\n-\t   stack_usage,\n-\t   stack_usage_kind_str[stack_usage_kind]);\n+  if (warn_stack_usage >= 0)\n+    {\n+      if (stack_usage_kind == DYNAMIC)\n+\twarning (OPT_Wstack_usage_, \"stack usage might be unbounded\");\n+      else if (stack_usage > warn_stack_usage)\n+\t{\n+\t  if (stack_usage_kind == DYNAMIC_BOUNDED)\n+\t    warning (OPT_Wstack_usage_, \"stack usage might be %wd bytes\",\n+\t\t     stack_usage);\n+\t  else\n+\t    warning (OPT_Wstack_usage_, \"stack usage is %wd bytes\",\n+\t\t     stack_usage);\n+\t}\n+    }\n }\n \n /* Open an auxiliary output file.  */"}]}