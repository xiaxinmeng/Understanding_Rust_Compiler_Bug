{"sha": "b15d92bfddbc400d6bc221c1b57d905a926bbb4c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjE1ZDkyYmZkZGJjNDAwZDZiYzIyMWMxYjU3ZDkwNWE5MjZiYmI0Yw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2014-04-21T18:34:10Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2014-04-21T18:34:10Z"}, "message": "re PR target/60909 (ICE: in extract_insn, at recog.c:2202 (unrecognizable insn) with -mrdrnd and __builtin_ia32_rdrand32_step())\n\n\tPR target/60909\n\t* config/i386/i386.c (ix86_expand_builtin)\n\t<case IX86_BUILTIN_RDRAND{16,32,64}_STEP>: Use temporary\n\tregister for target RTX.\n\t<case IX86_BUILTIN_RDSEED{16,32,64}_STEP>: Ditto.\n\nTestsuite/ChangeLog:\n\n\tPR target/60909\n\t* gcc.target/i386/pr60909-1.c: New test.\n\t* gcc.target/i386/pr60909-2.c: Ditto.\n\nFrom-SVN: r209545", "tree": {"sha": "ab05b66d41e5cce4962b61f154dc965d9913e040", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab05b66d41e5cce4962b61f154dc965d9913e040"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b15d92bfddbc400d6bc221c1b57d905a926bbb4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b15d92bfddbc400d6bc221c1b57d905a926bbb4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b15d92bfddbc400d6bc221c1b57d905a926bbb4c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b15d92bfddbc400d6bc221c1b57d905a926bbb4c/comments", "author": null, "committer": null, "parents": [{"sha": "4e4c8692b3ab339af21065190c46c233df332dd4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e4c8692b3ab339af21065190c46c233df332dd4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e4c8692b3ab339af21065190c46c233df332dd4"}], "stats": {"total": 141, "additions": 77, "deletions": 64}, "files": [{"sha": "e2024192b18e1e68ebb9d2d614696b6c8f55c4ad", "filename": "gcc/ChangeLog", "status": "modified", "additions": 30, "deletions": 44, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b15d92bfddbc400d6bc221c1b57d905a926bbb4c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b15d92bfddbc400d6bc221c1b57d905a926bbb4c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b15d92bfddbc400d6bc221c1b57d905a926bbb4c", "patch": "@@ -1,18 +1,24 @@\n+2014-04-21  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/60909\n+\t* config/i386/i386.c (ix86_expand_builtin)\n+\t<case IX86_BUILTIN_RDRAND{16,32,64}_STEP>: Use temporary\n+\tregister for target RTX.\n+\t<case IX86_BUILTIN_RDSEED{16,32,64}_STEP>: Ditto.\n+\n 2014-04-18  Cong Hou  <congh@google.com>\n \n \t* tree-vect-patterns.c (vect_recog_widen_mult_pattern): Enhance\n-\tthe widen-mult pattern by handling two operands with different\n-\tsizes, and operands whose size is smaller than half of the result\n-\ttype.\n+\tthe widen-mult pattern by handling two operands with different sizes,\n+\tand operands whose size is smaller than half of the result type.\n \n 2014-04-18  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* ipa-inline.h (INLINE_HINT_known_hot): New hint.\n \t* ipa-inline-analysis.c (dump_inline_hints): Dump it.\n \t(do_estimate_edge_time): Compute it.\n \t* ipa-inline.c (want_inline_small_function_p): Bypass\n-\tINLINE_INSNS_AUTO/SINGLE limits for calls that are known\n-\tto be hot.\n+\tINLINE_INSNS_AUTO/SINGLE limits for calls that are known to be hot.\n \n 2014-04-18  Jan Hubicka  <hubicka@ucw.cz>\n \n@@ -27,16 +33,14 @@\n \n 2014-04-18  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n-\t* config/rs6000/vsx.md (vsx_xxmrghw_<mode>): Adjust for\n-\tlittle-endian.\n+\t* config/rs6000/vsx.md (vsx_xxmrghw_<mode>): Adjust for little-endian.\n \t(vsx_xxmrglw_<mode>): Likewise.\n \n 2014-04-17  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \tPR target/60876\n \t* config/rs6000/rs6000.c (rs6000_setup_reg_addr_masks): Make sure\n-\tGET_MODE_SIZE gets passed an enum machine_mode type and not\n-\tinteger.\n+\tGET_MODE_SIZE gets passed an enum machine_mode type and not integer.\n \t(rs6000_init_hard_regno_mode_ok): Likewise.\n \n 2014-04-17  Jan Hubicka  <hubicka@ucw.cz>\n@@ -186,7 +190,7 @@\n \t* configure: Regenerate.\n \n 2014-04-17  Trevor Saunders  <tsaunders@mozilla.com>\n-\t\n+\n \t* passes.c (dump_one_pass): don't check pass->has_gate.\n \t(execute_ipa_summary_passes): Likewise.\n \t(execute_one_pass): Likewise.\n@@ -230,7 +234,8 @@\n \n 2014-04-17  Trevor Saunders  <tsaunders@mozilla.com>\n \n-\t* pass_manager.h (pass_manager::register_dump_files_1): Remove declaration.\n+\t* pass_manager.h (pass_manager::register_dump_files_1): Remove\n+\tdeclaration.\n \t* passes.c (pass_manager::register_dump_files_1): Merge into\n \t(pass_manager::register_dump_files): this, and remove its handling of\n \tproperties since the pass always has the properties anyway.\n@@ -330,8 +335,7 @@\n \t(record_target_from_binfo): Add bases_to_consider array;\n \trecord bases for types w/o instances and skip CXX destructor.\n \t(possible_polymorphic_call_targets_1): Add bases_to_consider\n-\tand consider_construction parameters; check if type may\n-\thave instance.\n+\tand consider_construction parameters; check if type may have instance.\n \t(get_polymorphic_call_info): Set maybe_in_construction to true\n \twhen we know nothing.\n \t(record_targets_from_bases): Skip CXX destructors; they are\n@@ -348,7 +352,7 @@\n 2014-04-16  Andrew  Pinski  <apinski@cavium.com>\n \n \t* config/host-linux.c (TRY_EMPTY_VM_SPACE): Change aarch64 ilp32\n-        definition.\n+\tdefinition.\n \n 2014-04-16  Eric Botcazou  <ebotcazou@adacore.com>\n \n@@ -640,7 +644,7 @@\n \n 2014-04-14  Christian Bruel  <christian.bruel@st.com>\n \n-        * config/sh/sh-mem.cc (sh_expand_strlen): Unroll last word.\n+\t* config/sh/sh-mem.cc (sh_expand_strlen): Unroll last word.\n \n 2014-04-14  Christian Bruel  <christian.bruel@st.com>\n \n@@ -949,21 +953,21 @@\n 2014-04-04  Martin Jambor  <mjambor@suse.cz>\n \n \tPR ipa/60640\n-        * cgraph.h (cgraph_clone_node): New parameter added to declaration.\n-        Adjust all callers.\n+\t* cgraph.h (cgraph_clone_node): New parameter added to declaration.\n+\tAdjust all callers.\n \t* cgraph.c (clone_of_p): Also return true if thunks match.\n \t(verify_edge_corresponds_to_fndecl): Removed extraneous call to\n \tcgraph_function_or_thunk_node and an obsolete comment.\n-        * cgraphclones.c (build_function_type_skip_args): Moved upwards in the\n-        file.\n-        (build_function_decl_skip_args): Likewise.\n+\t* cgraphclones.c (build_function_type_skip_args): Moved upwards in the\n+\tfile.\n+\t(build_function_decl_skip_args): Likewise.\n \t(set_new_clone_decl_and_node_flags): New function.\n-        (duplicate_thunk_for_node): Likewise.\n-        (redirect_edge_duplicating_thunks): Likewise.\n-        (cgraph_clone_node): New parameter args_to_skip, pass it to\n-        redirect_edge_duplicating_thunks which is called instead of\n-        cgraph_redirect_edge_callee.\n-        (cgraph_create_virtual_clone): Pass args_to_skip to cgraph_clone_node,\n+\t(duplicate_thunk_for_node): Likewise.\n+\t(redirect_edge_duplicating_thunks): Likewise.\n+\t(cgraph_clone_node): New parameter args_to_skip, pass it to\n+\tredirect_edge_duplicating_thunks which is called instead of\n+\tcgraph_redirect_edge_callee.\n+\t(cgraph_create_virtual_clone): Pass args_to_skip to cgraph_clone_node,\n \tmoved setting of a lot of flags to set_new_clone_decl_and_node_flags.\n \n 2014-04-04  Jeff Law  <law@redhat.com>\n@@ -1046,24 +1050,6 @@\n \t(Weffc++): Remove Scott's numbering, merge lists and reference\n \tWnon-virtual-dtor.\n \n-\tc-family/\n-\n-\tcp/\n-\t* class.c (accessible_nvdtor_p): New.\n-\t(check_bases): Don't check base destructor here ...\n-\t(check_bases_and_members): ... check them here.  Trigger on\n-\tWnon-virtual-dtor flag.\n-\t(finish_struct_1): Use accessible_nvdtor_p.\n-\n-\ttestsuite/\n-\t* g++.dg/warn/Wnvdtor.C: Add non-polymorphic case.\n-\t* g++.dg/warn/Wnvdtor-2.C: New.\n-\t* g++.dg/warn/Wnvdtor-3.C: New.\n-\t* g++.dg/warn/Wnvdtor-4.C: New.\n-\t* g++.dg/warn/Weff1.C: Delete.\n-\t* g++.old-deja/g++.benjamin/15309-1.C: Delete.\n-\t* g++.old-deja/g++.benjamin/15309-2.C: Delete.\n-\n 2014-04-03  Nick Clifton  <nickc@redhat.com>\n \n \t* config/rl78/rl78-expand.md (movqi): Handle (SUBREG (SYMBOL_REF))"}, {"sha": "859e71aabf6ecb0c97b563bfc5ddf8e0a909f1cd", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b15d92bfddbc400d6bc221c1b57d905a926bbb4c/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b15d92bfddbc400d6bc221c1b57d905a926bbb4c/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=b15d92bfddbc400d6bc221c1b57d905a926bbb4c", "patch": "@@ -35400,7 +35400,8 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n       else\n \top2 = gen_rtx_SUBREG (SImode, op0, 0);\n \n-      if (target == 0)\n+      if (target == 0\n+\t  || !register_operand (target, SImode))\n \ttarget = gen_reg_rtx (SImode);\n \n       pat = gen_rtx_GEU (VOIDmode, gen_rtx_REG (CCCmode, FLAGS_REG),\n@@ -35442,7 +35443,8 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n                          const0_rtx);\n       emit_insn (gen_rtx_SET (VOIDmode, op2, pat));\n \n-      if (target == 0)\n+      if (target == 0\n+\t  || !register_operand (target, SImode))\n         target = gen_reg_rtx (SImode);\n \n       emit_insn (gen_zero_extendqisi2 (target, op2));"}, {"sha": "39ea7e1611f4ba12a710bbeea8285065075824b2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 21, "deletions": 18, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b15d92bfddbc400d6bc221c1b57d905a926bbb4c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b15d92bfddbc400d6bc221c1b57d905a926bbb4c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b15d92bfddbc400d6bc221c1b57d905a926bbb4c", "patch": "@@ -1,3 +1,9 @@\n+2014-04-21  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/60909\n+\t* gcc.target/i386/pr60909-1.c: New test.\n+\t* gcc.target/i386/pr60909-2.c: Ditto.\n+\n 2014-04-18  Cong Hou  <congh@google.com>\n \n \t* gcc.dg/vect/vect-widen-mult-u8-s16-s32.c: New test.\n@@ -157,7 +163,7 @@\n \t* gcc.dg/lto/pr55113_0.c: Skip on i?86-*-solaris2.1[0-1]*.\n \n 2014-04-14  Richard Biener  <rguenther@suse.de>\n-\tMarc Glisse  <marc.glisse@inria.fr>\n+\t    Marc Glisse  <marc.glisse@inria.fr>\n \n \tPR c/60819\n \t* gcc.target/i386/vec-may_alias.c: New testcase.\n@@ -334,8 +340,7 @@\n \n 2014-04-08  Jason Merrill  <jason@redhat.com>\n \n-\t* lib/gcc-dg.exp (dg-build-dso): Reset dg-do-what-default to\n-\tcompile.\n+\t* lib/gcc-dg.exp (dg-build-dso): Reset dg-do-what-default to compile.\n \n 2014-04-08  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n \n@@ -455,10 +460,10 @@\n 2014-04-04  Martin Jambor  <mjambor@suse.cz>\n \n \tPR ipa/60640\n-        * g++.dg/ipa/pr60640-1.C: New test.\n-        * g++.dg/ipa/pr60640-2.C: Likewise.\n-        * g++.dg/ipa/pr60640-3.C: Likewise.\n-        * g++.dg/ipa/pr60640-4.C: Likewise.\n+\t* g++.dg/ipa/pr60640-1.C: New test.\n+\t* g++.dg/ipa/pr60640-2.C: Likewise.\n+\t* g++.dg/ipa/pr60640-3.C: Likewise.\n+\t* g++.dg/ipa/pr60640-4.C: Likewise.\n \n 2014-04-04  Jeff Law  <law@redhat.com>\n \n@@ -570,7 +575,7 @@\n \n 2014-04-01  Fabien Ch\u00eane  <fabien@gcc.gnu.org>\n \n-        * g++.dg/init/ctor4.C: Adjust.\n+\t* g++.dg/init/ctor4.C: Adjust.\n \t* g++.dg/init/ctor4-1.C: New.\n \t* g++.dg/cpp0x/defaulted2.C: Adjust.\n \n@@ -658,8 +663,8 @@\n \n 2014-03-27  Jeff Law  <law@redhat.com>\n \n-       PR target/60648\n-       * g++.dg/pr60648.C: New test.\n+\tPR target/60648\n+\t* g++.dg/pr60648.C: New test.\n \n 2014-03-28  Adam Butcher  <adam@jessamine.co.uk>\n \n@@ -692,14 +697,13 @@\n \n 2014-03-28  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n \n-\t* gcc.dg/tree-ssa/ssa-dom-thread-4.c: Remove s390 special\n-          option.\n+\t* gcc.dg/tree-ssa/ssa-dom-thread-4.c: Remove s390 special option.\n \t* lib/target-supports.exp: Return true for s390\n-          in check_effective_logical_op_short_circuit.\n+\tin check_effective_logical_op_short_circuit.\n \n 2014-03-28  Kirill Yukhin  <kirill.yukhin@intel.com>\n \n-        * gcc.target/i386/avx512f-vshuff32x4-2.c: Fix initialization\n+\t* gcc.target/i386/avx512f-vshuff32x4-2.c: Fix initialization\n \tof second source operand.\n \t* gcc.target/i386/avx512f-vshuff64x2-2.c: Ditto.\n \t* gcc.target/i386/avx512f-vshufi32x4-2.c: Ditto.\n@@ -834,8 +838,8 @@\n \n 2014-03-24  Marek Polacek  <polacek@redhat.com>\n \n-\t* c-c++-common/ubsan/div-by-zero-4.c: Don't include limits.h.  Define\n-\tINT_MIN.\n+\t* c-c++-common/ubsan/div-by-zero-4.c: Don't include limits.h.\n+\tDefine INT_MIN.\n \t* c-c++-common/ubsan/overflow-1.c: Check for unwanted output.\n \t* c-c++-common/ubsan/overflow-add-1.c: Likewise.\n \t* c-c++-common/ubsan/overflow-mul-1.c: Likewise.\n@@ -920,8 +924,7 @@\n 2014-03-21  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/60599\n-\t* lib/gcc-dg.exp (scan-module): Uncompress .mod files for\n-\treading.\n+\t* lib/gcc-dg.exp (scan-module): Uncompress .mod files for reading.\n \n 2014-03-20  Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "5a1ac3c0f6c244d896ed691701d51ff7463fd6aa", "filename": "gcc/testsuite/gcc.target/i386/pr60909-1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b15d92bfddbc400d6bc221c1b57d905a926bbb4c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr60909-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b15d92bfddbc400d6bc221c1b57d905a926bbb4c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr60909-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr60909-1.c?ref=b15d92bfddbc400d6bc221c1b57d905a926bbb4c", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mrdrnd\" } */\n+\n+extern void bar (int);\n+\n+void\n+foo (unsigned *u)\n+{\n+  int i = __builtin_ia32_rdrand32_step (u);\n+  bar (i);\n+}"}, {"sha": "dd356685ba90a0e7f92cefaf14a2d11c46bfb5d3", "filename": "gcc/testsuite/gcc.target/i386/pr60909-2.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b15d92bfddbc400d6bc221c1b57d905a926bbb4c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr60909-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b15d92bfddbc400d6bc221c1b57d905a926bbb4c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr60909-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr60909-2.c?ref=b15d92bfddbc400d6bc221c1b57d905a926bbb4c", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mrdseed\" } */\n+\n+extern void bar (int);\n+\n+void\n+foo (unsigned *u)\n+{\n+  int i = __builtin_ia32_rdseed_si_step (u);\n+  bar (i);\n+}"}]}