{"sha": "4cb52980e5d5fb64a393d385923da1b51ab34606", "node_id": "C_kwDOANBUbNoAKDRjYjUyOTgwZTVkNWZiNjRhMzkzZDM4NTkyM2RhMWI1MWFiMzQ2MDY", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-10-12T12:31:50Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-10-14T12:47:01Z"}, "message": "Eliminate AUTODETECT_VALUE usage in options.\n\ngcc/ChangeLog:\n\n\t* common.opt: Stop using AUTODETECT_VALUE\n\tand use EnabledBy where possible.\n\t* opts.c: Enable OPT_fvar_tracking with optimize >= 1.\n\t* toplev.c (AUTODETECT_VALUE): Remove macro.\n\t(process_options): Simplify by using EnabledBy and\n\tOPT_fvar_tracking.  Use OPTION_SET_P macro instead of\n\tAUTODETECT_VALUE.", "tree": {"sha": "7b992e7cc5339f45a9af703dd8d876896df0229f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b992e7cc5339f45a9af703dd8d876896df0229f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4cb52980e5d5fb64a393d385923da1b51ab34606", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cb52980e5d5fb64a393d385923da1b51ab34606", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cb52980e5d5fb64a393d385923da1b51ab34606", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cb52980e5d5fb64a393d385923da1b51ab34606/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6779e9ba2cb242e51a4257fdc51cc03b870f8570", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6779e9ba2cb242e51a4257fdc51cc03b870f8570", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6779e9ba2cb242e51a4257fdc51cc03b870f8570"}], "stats": {"total": 66, "additions": 25, "deletions": 41}, "files": [{"sha": "a2af7fb36e0dd514918892d2d43a8ff74dd5ab2f", "filename": "gcc/common.opt", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cb52980e5d5fb64a393d385923da1b51ab34606/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cb52980e5d5fb64a393d385923da1b51ab34606/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=4cb52980e5d5fb64a393d385923da1b51ab34606", "patch": "@@ -3003,19 +3003,16 @@ Common Undocumented Var(flag_use_linker_plugin)\n \n ; Positive if we should track variables, negative if we should run\n ; the var-tracking pass only to discard debug annotations, zero if\n-; we're not to run it.  When flag_var_tracking == 2 (AUTODETECT_VALUE) it\n-; will be set according to optimize, debug_info_level and debug_hooks\n-; in process_options ().\n+; we're not to run it.\n fvar-tracking\n-Common Var(flag_var_tracking) Init(2) PerFunction\n+Common Var(flag_var_tracking) PerFunction EnabledBy(fvar-tracking-uninit)\n Perform variable tracking.\n \n ; Positive if we should track variables at assignments, negative if\n ; we should run the var-tracking pass only to discard debug\n-; annotations.  When flag_var_tracking_assignments ==\n-; AUTODETECT_VALUE it will be set according to flag_var_tracking.\n+; annotations.\n fvar-tracking-assignments\n-Common Var(flag_var_tracking_assignments) Init(2) PerFunction\n+Common Var(flag_var_tracking_assignments) PerFunction\n Perform variable tracking by annotating assignments.\n \n ; Nonzero if we should toggle flag_var_tracking_assignments after\n@@ -3026,8 +3023,7 @@ Toggle -fvar-tracking-assignments.\n \n ; Positive if we should track uninitialized variables, negative if\n ; we should run the var-tracking pass only to discard debug\n-; annotations.  When flag_var_tracking_uninit == AUTODETECT_VALUE it\n-; will be set according to flag_var_tracking.\n+; annotations.\n fvar-tracking-uninit\n Common Var(flag_var_tracking_uninit) PerFunction\n Perform variable tracking and also tag variables that are uninitialized.\n@@ -3190,11 +3186,11 @@ Common Driver RejectNegative JoinedOrMissing\n Generate debug information in default format.\n \n gas-loc-support\n-Common Driver Var(dwarf2out_as_loc_support) Init(2)\n+Common Driver Var(dwarf2out_as_loc_support)\n Assume assembler support for (DWARF2+) .loc directives.\n \n gas-locview-support\n-Common Driver Var(dwarf2out_as_locview_support) Init(2)\n+Common Driver Var(dwarf2out_as_locview_support)\n Assume assembler support for view in (DWARF2+) .loc directives.\n \n gcoff\n@@ -3248,7 +3244,7 @@ Common Driver JoinedOrMissing\n Generate debug information in default extended format.\n \n ginline-points\n-Common Driver Var(debug_inline_points) Init(2)\n+Common Driver Var(debug_inline_points)\n Generate extended entry point information for inlined functions.\n \n ginternal-reset-location-views\n@@ -3288,7 +3284,7 @@ Common Driver JoinedOrMissing Negative(gvms)\n Generate debug information in extended STABS format.\n \n gstatement-frontiers\n-Common Driver Var(debug_nonbind_markers_p) Init(2)\n+Common Driver Var(debug_nonbind_markers_p)\n Emit progressive recommended breakpoint locations.\n \n gstrict-dwarf\n@@ -3304,7 +3300,7 @@ Common Driver Var(flag_gtoggle)\n Toggle debug information generation.\n \n gvariable-location-views\n-Common Driver Var(debug_variable_location_views, 1) Init(2)\n+Common Driver Var(debug_variable_location_views, 1)\n Augment variable location lists with progressive views.\n \n gvariable-location-views=incompat5"}, {"sha": "65fe192a1987c9f300565d5e9e124cf74746980b", "filename": "gcc/opts.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cb52980e5d5fb64a393d385923da1b51ab34606/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cb52980e5d5fb64a393d385923da1b51ab34606/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=4cb52980e5d5fb64a393d385923da1b51ab34606", "patch": "@@ -581,6 +581,7 @@ static const struct default_options default_options_table[] =\n     { OPT_LEVELS_1_PLUS, OPT_ftree_sink, NULL, 1 },\n     { OPT_LEVELS_1_PLUS, OPT_ftree_slsr, NULL, 1 },\n     { OPT_LEVELS_1_PLUS, OPT_ftree_ter, NULL, 1 },\n+    { OPT_LEVELS_1_PLUS, OPT_fvar_tracking, NULL, 1 },\n \n     /* -O1 (and not -Og) optimizations.  */\n     { OPT_LEVELS_1_PLUS_NOT_DEBUG, OPT_fbranch_count_reg, NULL, 1 },"}, {"sha": "4f574a5aad3e98d54314d59494a8823e19f47ca6", "filename": "gcc/toplev.c", "status": "modified", "additions": 14, "deletions": 27, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cb52980e5d5fb64a393d385923da1b51ab34606/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cb52980e5d5fb64a393d385923da1b51ab34606/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=4cb52980e5d5fb64a393d385923da1b51ab34606", "patch": "@@ -119,10 +119,6 @@ unsigned int save_decoded_options_count;\n /* Vector of saved Optimization decoded command line options.  */\n vec<cl_decoded_option> *save_opt_decoded_options;\n \n-/* Used to enable -fvar-tracking, -fweb and -frename-registers according\n-   to optimize in process_options ().  */\n-#define AUTODETECT_VALUE 2\n-\n /* Debug hooks - dependent upon command line options.  */\n \n const struct gcc_debug_hooks *debug_hooks;\n@@ -1483,8 +1479,9 @@ process_options (bool no_backend)\n       || !dwarf_debuginfo_p ()\n       || debug_hooks->var_location == do_nothing_debug_hooks.var_location)\n     {\n-      if (flag_var_tracking == 1\n-\t  || flag_var_tracking_uninit == 1)\n+      if ((OPTION_SET_P (flag_var_tracking) && flag_var_tracking == 1)\n+\t  || (OPTION_SET_P (flag_var_tracking_uninit)\n+\t      && flag_var_tracking_uninit == 1))\n         {\n \t  if (debug_info_level < DINFO_LEVEL_NORMAL)\n \t    warning_at (UNKNOWN_LOCATION, 0,\n@@ -1505,19 +1502,11 @@ process_options (bool no_backend)\n   if (flag_dump_go_spec != NULL)\n     debug_hooks = dump_go_spec_init (flag_dump_go_spec, debug_hooks);\n \n-  /* If the user specifically requested variable tracking with tagging\n-     uninitialized variables, we need to turn on variable tracking.\n-     (We already determined above that variable tracking is feasible.)  */\n-  if (flag_var_tracking_uninit == 1)\n-    flag_var_tracking = 1;\n-\n-  if (flag_var_tracking == AUTODETECT_VALUE)\n-    flag_var_tracking = optimize >= 1;\n-\n-  if (flag_var_tracking_uninit == AUTODETECT_VALUE)\n-    flag_var_tracking_uninit = flag_var_tracking;\n+  /* One could use EnabledBy, but it would lead to a circular dependency.  */\n+  if (!OPTION_SET_P (flag_var_tracking_uninit))\n+     flag_var_tracking_uninit = flag_var_tracking;\n \n-  if (flag_var_tracking_assignments == AUTODETECT_VALUE)\n+  if (!OPTION_SET_P (flag_var_tracking_assignments))\n     flag_var_tracking_assignments\n       = (flag_var_tracking\n \t && !(flag_selective_scheduling || flag_selective_scheduling2));\n@@ -1533,21 +1522,19 @@ process_options (bool no_backend)\n     warning_at (UNKNOWN_LOCATION, 0,\n \t\t\"var-tracking-assignments changes selective scheduling\");\n \n-  if (debug_nonbind_markers_p == AUTODETECT_VALUE)\n+  if (!OPTION_SET_P (debug_nonbind_markers_p))\n     debug_nonbind_markers_p\n       = (optimize\n \t && debug_info_level >= DINFO_LEVEL_NORMAL\n \t && dwarf_debuginfo_p ()\n \t && !(flag_selective_scheduling || flag_selective_scheduling2));\n \n-  if (dwarf2out_as_loc_support == AUTODETECT_VALUE)\n-    dwarf2out_as_loc_support\n-      = dwarf2out_default_as_loc_support ();\n-  if (dwarf2out_as_locview_support == AUTODETECT_VALUE)\n-    dwarf2out_as_locview_support\n-      = dwarf2out_default_as_locview_support ();\n+  if (!OPTION_SET_P (dwarf2out_as_loc_support))\n+    dwarf2out_as_loc_support = dwarf2out_default_as_loc_support ();\n+  if (!OPTION_SET_P (dwarf2out_as_locview_support))\n+    dwarf2out_as_locview_support = dwarf2out_default_as_locview_support ();\n \n-  if (debug_variable_location_views == AUTODETECT_VALUE)\n+  if (!OPTION_SET_P (debug_variable_location_views))\n     {\n       debug_variable_location_views\n \t= (flag_var_tracking\n@@ -1581,7 +1568,7 @@ process_options (bool no_backend)\n       debug_internal_reset_location_views = 0;\n     }\n \n-  if (debug_inline_points == AUTODETECT_VALUE)\n+  if (!OPTION_SET_P (debug_inline_points))\n     debug_inline_points = debug_variable_location_views;\n   else if (debug_inline_points && !debug_nonbind_markers_p)\n     {"}]}