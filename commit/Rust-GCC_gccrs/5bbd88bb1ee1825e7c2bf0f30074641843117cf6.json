{"sha": "5bbd88bb1ee1825e7c2bf0f30074641843117cf6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWJiZDg4YmIxZWUxODI1ZTdjMmJmMGYzMDA3NDY0MTg0MzExN2NmNg==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2019-05-22T15:23:52Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-09-08T04:44:50Z"}, "message": "AVX512FP16: Add tests for vector passing in variable arguments.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/avx512fp16-vararg-1.c: New test.\n\t* gcc.target/i386/avx512fp16-vararg-2.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vararg-3.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vararg-4.c: Ditto.", "tree": {"sha": "6e254708943e3950bc98e4f39e4b35bc9deaeb84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e254708943e3950bc98e4f39e4b35bc9deaeb84"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5bbd88bb1ee1825e7c2bf0f30074641843117cf6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bbd88bb1ee1825e7c2bf0f30074641843117cf6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bbd88bb1ee1825e7c2bf0f30074641843117cf6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bbd88bb1ee1825e7c2bf0f30074641843117cf6/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f3318dbcfd2390b49231b66a47ebed505af18f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f3318dbcfd2390b49231b66a47ebed505af18f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f3318dbcfd2390b49231b66a47ebed505af18f9"}], "stats": {"total": 458, "additions": 458, "deletions": 0}, "files": [{"sha": "9bd366838b98236455993ebc04e2837b9771cb02", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vararg-1.c", "status": "added", "additions": 122, "deletions": 0, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bbd88bb1ee1825e7c2bf0f30074641843117cf6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vararg-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bbd88bb1ee1825e7c2bf0f30074641843117cf6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vararg-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vararg-1.c?ref=5bbd88bb1ee1825e7c2bf0f30074641843117cf6", "patch": "@@ -0,0 +1,122 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx512fp16 } */\n+/* { dg-options \"-mavx512fp16\" } */\n+\n+#include <stdarg.h>\n+#include <assert.h>\n+\n+static void do_test (void);\n+\n+#define DO_TEST do_test\n+#define AVX512FP16\n+#include \"avx512-check.h\"\n+\n+struct m256h\n+{\n+  __m256h  v;\n+};\n+\n+__m128 n1 = { -283.3, -23.3, 213.4, 1119.03 };\n+struct m256h n2 = { { -93.83f16, 893.318f16, 3994.3f16, -39484.0f16, 213.4f16, 323.4f16, 42.5f16, -43.4f16,\n+\t\t      234.4f16, 93.9f16, 34.5f16, -14.5f16, -34.9f16, -421.0f16, 234.5f16, 214.5f16 } };\n+__m128h n3 = { 11.5f16, -31.80f16, 242.3f16, 136.4f16, 42.8f16, -22.8f16, 343.8f16, 215.4f16 } ;\n+_Float16 n4 = 32.4f16;\n+double n5 = 103.3;\n+__m128h n6 = { -12.3f16, 2.0f16, 245.9f16, -432.1f16, 53.5f16, -13.4f16, 432.5f16, 482.4f16 };\n+__m128d n7 = { -91.387, -8193.518 };\n+struct m256h n8 = { { -93.83f16, 893.318f16, 3994.3f16, -39484.0f16, 213.4f16, 323.4f16, 42.5f16, -43.4f16,\n+\t\t      234.4f16, 93.9f16, 34.5f16, -14.5f16, -34.9f16, -421.0f16, 234.5f16, 214.5f16 } };\n+__m128 n9 = { -123.3, 2.3, 3.4, -10.03 };\n+__m128h n10 = { 123.3f16, -100.0f16, 246.9f16, 13.4f16, -134.4f16, 35.4f16, 156.5f16, 953.1f16 };\n+_Float16 n11 = 40.7f16;\n+double n12 = 304.9;\n+__m128h n13 = { 23.3f16, -11.0f16, 24.5f16, -24.5f16, 535.4f16, 35.4f16, -13.4f16, 14.5f16 };\n+__m256h n14 = { -123.3f16, 23.9f16, 34.4f16, -100.3f16, 284.4f16, 352.5f16, 131.5f16, -13.2f16,\n+\t\t131.4f16, 382.5f16, 38.5f16, 99.6f16, 423.2f16, -12.44f16, 43.2f16, -34.45f16 };\n+__m512h n15 = { -39.3f16, -180.9f16, 13.4f16, 35.4f16, -41.1f16, -14.4f16, 24.5f16, 53.54f16,\n+\t\t 238.4f16, -134.8f16, 24.5f16, 35.6f16, -346.7f16, -43.4f16, -535.3f16, 324.7f16,\n+\t\t 82.5f16, 21.4f16, 24.4f16, 53.4f16, 23.5f16, -24.4f16, -34.5f16, -32.5f16,\n+\t\t 23.6f16, -13.4f16, 24.5f16, 35.5f16, -34.4f16, -24.5f16, -34.5f16, 13.5f16 };\n+__m128d n16 = { 73.0, 63.18 };\n+__m256 n17 = { -183.3, -22.3, 13.9, -119.3, 483.1, 122.3, -33.4, -9.37 };\n+__m128 n18 = { -183.3, 22.3, 13.4, -19.03 };\n+\n+__m128 e1;\n+struct m256h e2;\n+__m128h e3;\n+_Float16 e4;\n+double e5;\n+__m128h e6;\n+__m128d e7;\n+struct m256h e8;\n+__m128 e9;\n+__m128h e10;\n+_Float16 e11;\n+double e12;\n+__m128h e13;\n+__m256h e14;\n+__m512h e15;\n+__m128d e16;\n+__m256 e17;\n+__m128 e18;\n+\n+static void\n+__attribute__((noinline))\n+foo (va_list va_arglist)\n+{\n+  e4 = va_arg (va_arglist, _Float16);\n+  e5 = va_arg (va_arglist, double);\n+  e6 = va_arg (va_arglist, __m128h);\n+  e7 = va_arg (va_arglist, __m128d);\n+  e8 = va_arg (va_arglist, struct m256h);\n+  e9 = va_arg (va_arglist, __m128);\n+  e10 = va_arg (va_arglist, __m128h);\n+  e11 = va_arg (va_arglist, _Float16);\n+  e12 = va_arg (va_arglist, double);\n+  e13 = va_arg (va_arglist, __m128h);\n+  e14 = va_arg (va_arglist, __m256h);\n+  e15 = va_arg (va_arglist, __m512h);\n+  e16 = va_arg (va_arglist, __m128d);\n+  e17 = va_arg (va_arglist, __m256);\n+  e18 = va_arg (va_arglist, __m128);\n+  va_end (va_arglist);\n+}\n+\n+static void\n+__attribute__((noinline))\n+test (__m128 a1, struct m256h a2, __m128h a3, ...)\n+{\n+  va_list va_arglist;\n+\n+  e1 = a1;\n+  e2 = a2;\n+  e3 = a3;\n+  va_start (va_arglist, a3);\n+  foo (va_arglist);\n+  va_end (va_arglist);\n+}\n+\n+static void\n+do_test (void)\n+{\n+  test (n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12,\n+\tn13, n14, n15, n16, n17, n18);\n+  assert (__builtin_memcmp (&e1, &n1, sizeof (e1)) == 0);\n+  assert (__builtin_memcmp (&e2, &n2, sizeof (e2)) == 0);\n+  assert (__builtin_memcmp (&e3, &n3, sizeof (e3)) == 0);\n+  assert (n4 == e4);\n+  assert (n5 == e5);\n+  assert (__builtin_memcmp (&e6, &n6, sizeof (e6)) == 0);\n+  assert (__builtin_memcmp (&e7, &n7, sizeof (e7)) == 0);\n+  assert (__builtin_memcmp (&e8, &n8, sizeof (e8)) == 0);\n+  assert (__builtin_memcmp (&e9, &n9, sizeof (e9)) == 0);\n+  assert (__builtin_memcmp (&e10, &n10, sizeof (e10)) == 0);\n+  assert (n11 == e11);\n+  assert (n12 == e12);\n+  assert (__builtin_memcmp (&e13, &n13, sizeof (e13)) == 0);\n+  assert (__builtin_memcmp (&e14, &n14, sizeof (e14)) == 0);\n+  assert (__builtin_memcmp (&e15, &n15, sizeof (e15)) == 0);\n+  assert (__builtin_memcmp (&e16, &n16, sizeof (e16)) == 0);\n+  assert (__builtin_memcmp (&e17, &n17, sizeof (e17)) == 0);\n+  assert (__builtin_memcmp (&e18, &n18, sizeof (e18)) == 0);\n+}"}, {"sha": "043f1c75d00d73789aea42f8172791d2c2bb78cb", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vararg-2.c", "status": "added", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bbd88bb1ee1825e7c2bf0f30074641843117cf6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vararg-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bbd88bb1ee1825e7c2bf0f30074641843117cf6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vararg-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vararg-2.c?ref=5bbd88bb1ee1825e7c2bf0f30074641843117cf6", "patch": "@@ -0,0 +1,107 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx512fp16 } */\n+/* { dg-options \"-mavx512fp16\" } */\n+\n+#include <stdarg.h>\n+#include <assert.h>\n+\n+static void do_test (void);\n+\n+#define DO_TEST do_test\n+#define AVX512FP16\n+#include \"avx512-check.h\"\n+\n+__m128 n1 = { -283.3, -23.3, 213.4, 1119.03 };\n+__m256d n2 = { -93.83, 893.318, 3994.3, -39484.0 };\n+__m128h n3 = { 11.5f16, -31.80f16, 242.3f16, 136.4f16, 42.8f16, -22.8f16, 343.8f16, 215.4f16 } ;\n+_Float16 n4 = 32.4f16;\n+double n5 = 103.3;\n+__m128h n6 = { -12.3f16, 2.0f16, 245.9f16, -432.1f16, 53.5f16, -13.4f16, 432.5f16, 482.4f16 };\n+__m128d n7 = { -91.387, -8193.518 };\n+__m256d n8 = { -123.3, 2.3, 3.4, -10.03 };\n+__m128 n9 = { -123.3, 2.3, 3.4, -10.03 };\n+__m128h n10 = { 123.3f16, -100.0f16, 246.9f16, 13.4f16, -134.4f16, 35.4f16, 156.5f16, 953.1f16 };\n+_Float16 n11 = 40.7f16;\n+double n12 = 304.9;\n+__m128h n13 = { 23.3f16, -11.0f16, 24.5f16, -24.5f16, 535.4f16, 35.4f16, -13.4f16, 14.5f16 };\n+__m256h n14 = { -123.3f16, 23.9f16, 34.4f16, -100.3f16, 284.4f16, 352.5f16, 131.5f16, -13.2f16,\n+\t\t131.4f16, 382.5f16, 38.5f16, 99.6f16, 423.2f16, -12.44f16, 43.2f16, -34.45f16 };\n+__m512h n15 = { -39.3f16, -180.9f16, 13.4f16, 35.4f16, -41.1f16, -14.4f16, 24.5f16, 53.54f16,\n+\t\t 238.4f16, -134.8f16, 24.5f16, 35.6f16, -346.7f16, -43.4f16, -535.3f16, 324.7f16,\n+\t\t 82.5f16, 21.4f16, 24.4f16, 53.4f16, 23.5f16, -24.4f16, -34.5f16, -32.5f16,\n+\t\t 23.6f16, -13.4f16, 24.5f16, 35.5f16, -34.4f16, -24.5f16, -34.5f16, 13.5f16 };\n+__m128d n16 = { 73.0, 63.18 };\n+__m256 n17 = { -183.3, -22.3, 13.9, -119.3, 483.1, 122.3, -33.4, -9.37 };\n+__m128 n18 = { -183.3, 22.3, 13.4, -19.03 };\n+\n+__m128 e1;\n+__m256d e2;\n+__m128h e3;\n+_Float16 e4;\n+double e5;\n+__m128h e6;\n+__m128d e7;\n+__m256d e8;\n+__m128 e9;\n+__m128h e10;\n+_Float16 e11;\n+double e12;\n+__m128h e13;\n+__m256h e14;\n+__m512h e15;\n+__m128d e16;\n+__m256 e17;\n+__m128 e18;\n+\n+static void\n+__attribute__((noinline))\n+test (__m128 a1, __m256d a2, __m128h a3, ...)\n+{\n+  va_list va_arglist;\n+\n+  e1 = a1;\n+  e2 = a2;\n+  e3 = a3;\n+  va_start (va_arglist, a3);\n+  e4 = va_arg (va_arglist, _Float16);\n+  e5 = va_arg (va_arglist, double);\n+  e6 = va_arg (va_arglist, __m128h);\n+  e7 = va_arg (va_arglist, __m128d);\n+  e8 = va_arg (va_arglist, __m256d);\n+  e9 = va_arg (va_arglist, __m128);\n+  e10 = va_arg (va_arglist, __m128h);\n+  e11 = va_arg (va_arglist, _Float16);\n+  e12 = va_arg (va_arglist, double);\n+  e13 = va_arg (va_arglist, __m128h);\n+  e14 = va_arg (va_arglist, __m256h);\n+  e15 = va_arg (va_arglist, __m512h);\n+  e16 = va_arg (va_arglist, __m128d);\n+  e17 = va_arg (va_arglist, __m256);\n+  e18 = va_arg (va_arglist, __m128);\n+  va_end (va_arglist);\n+}\n+\n+static void\n+do_test (void)\n+{\n+  test (n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12,\n+\tn13, n14, n15, n16, n17, n18);\n+  assert (__builtin_memcmp (&e1, &n1, sizeof (e1)) == 0);\n+  assert (__builtin_memcmp (&e2, &n2, sizeof (e2)) == 0);\n+  assert (__builtin_memcmp (&e3, &n3, sizeof (e3)) == 0);\n+  assert (n4 == e4);\n+  assert (n5 == e5);\n+  assert (__builtin_memcmp (&e6, &n6, sizeof (e6)) == 0);\n+  assert (__builtin_memcmp (&e7, &n7, sizeof (e7)) == 0);\n+  assert (__builtin_memcmp (&e8, &n8, sizeof (e8)) == 0);\n+  assert (__builtin_memcmp (&e9, &n9, sizeof (e9)) == 0);\n+  assert (__builtin_memcmp (&e10, &n10, sizeof (e10)) == 0);\n+  assert (n11 == e11);\n+  assert (n12 == e12);\n+  assert (__builtin_memcmp (&e13, &n13, sizeof (e13)) == 0);\n+  assert (__builtin_memcmp (&e14, &n14, sizeof (e14)) == 0);\n+  assert (__builtin_memcmp (&e15, &n15, sizeof (e15)) == 0);\n+  assert (__builtin_memcmp (&e16, &n16, sizeof (e16)) == 0);\n+  assert (__builtin_memcmp (&e17, &n17, sizeof (e17)) == 0);\n+  assert (__builtin_memcmp (&e18, &n18, sizeof (e18)) == 0);\n+}"}, {"sha": "cb414a97753b727ecbcada855bb1128c2eeced4b", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vararg-3.c", "status": "added", "additions": 114, "deletions": 0, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bbd88bb1ee1825e7c2bf0f30074641843117cf6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vararg-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bbd88bb1ee1825e7c2bf0f30074641843117cf6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vararg-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vararg-3.c?ref=5bbd88bb1ee1825e7c2bf0f30074641843117cf6", "patch": "@@ -0,0 +1,114 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx512fp16 } */\n+/* { dg-options \"-mavx512fp16\" } */\n+\n+#include <stdarg.h>\n+#include <assert.h>\n+\n+static void do_test (void);\n+\n+#define DO_TEST do_test\n+#define AVX512FP16\n+#include \"avx512-check.h\"\n+\n+struct m256h\n+{\n+  __m256h  v;\n+};\n+\n+__m128 n1 = { -283.3, -23.3, 213.4, 1119.03 };\n+struct m256h n2 = { { -93.83f16, 893.318f16, 3994.3f16, -39484.0f16, 213.4f16, 323.4f16, 42.5f16, -43.4f16,\n+\t\t      234.4f16, 93.9f16, 34.5f16, -14.5f16, -34.9f16, -421.0f16, 234.5f16, 214.5f16 } };\n+__m128h n3 = { 11.5f16, -31.80f16, 242.3f16, 136.4f16, 42.8f16, -22.8f16, 343.8f16, 215.4f16 } ;\n+_Float16 n4 = 32.4f16;\n+double n5 = 103.3;\n+__m128h n6 = { -12.3f16, 2.0f16, 245.9f16, -432.1f16, 53.5f16, -13.4f16, 432.5f16, 482.4f16 };\n+__m128d n7 = { -91.387, -8193.518 };\n+struct m256h n8 = { { -93.83f16, 893.318f16, 3994.3f16, -39484.0f16, 213.4f16, 323.4f16, 42.5f16, -43.4f16,\n+\t\t      234.4f16, 93.9f16, 34.5f16, -14.5f16, -34.9f16, -421.0f16, 234.5f16, 214.5f16 } };\n+__m128 n9 = { -123.3, 2.3, 3.4, -10.03 };\n+__m128h n10 = { 123.3f16, -100.0f16, 246.9f16, 13.4f16, -134.4f16, 35.4f16, 156.5f16, 953.1f16 };\n+_Float16 n11 = 40.7f16;\n+double n12 = 304.9;\n+__m128h n13 = { 23.3f16, -11.0f16, 24.5f16, -24.5f16, 535.4f16, 35.4f16, -13.4f16, 14.5f16 };\n+__m256h n14 = { -123.3f16, 23.9f16, 34.4f16, -100.3f16, 284.4f16, 352.5f16, 131.5f16, -13.2f16,\n+\t\t131.4f16, 382.5f16, 38.5f16, 99.6f16, 423.2f16, -12.44f16, 43.2f16, -34.45f16 };\n+__m512h n15 = { -39.3f16, -180.9f16, 13.4f16, 35.4f16, -41.1f16, -14.4f16, 24.5f16, 53.54f16,\n+\t\t 238.4f16, -134.8f16, 24.5f16, 35.6f16, -346.7f16, -43.4f16, -535.3f16, 324.7f16,\n+\t\t 82.5f16, 21.4f16, 24.4f16, 53.4f16, 23.5f16, -24.4f16, -34.5f16, -32.5f16,\n+\t\t 23.6f16, -13.4f16, 24.5f16, 35.5f16, -34.4f16, -24.5f16, -34.5f16, 13.5f16 };\n+__m128d n16 = { 73.0, 63.18 };\n+__m256 n17 = { -183.3, -22.3, 13.9, -119.3, 483.1, 122.3, -33.4, -9.37 };\n+__m128 n18 = { -183.3, 22.3, 13.4, -19.03 };\n+\n+__m128 e1;\n+struct m256h e2;\n+__m128h e3;\n+_Float16 e4;\n+double e5;\n+__m128h e6;\n+__m128d e7;\n+struct m256h e8;\n+__m128 e9;\n+__m128h e10;\n+_Float16 e11;\n+double e12;\n+__m128h e13;\n+__m256h e14;\n+__m512h e15;\n+__m128d e16;\n+__m256 e17;\n+__m128 e18;\n+\n+static void\n+__attribute__((noinline))\n+test (__m128 a1, struct m256h a2, __m128h a3, ...)\n+{\n+  va_list va_arglist;\n+\n+  e1 = a1;\n+  e2 = a2;\n+  e3 = a3;\n+  va_start (va_arglist, a3);\n+  e4 = va_arg (va_arglist, _Float16);\n+  e5 = va_arg (va_arglist, double);\n+  e6 = va_arg (va_arglist, __m128h);\n+  e7 = va_arg (va_arglist, __m128d);\n+  e8 = va_arg (va_arglist, struct m256h);\n+  e9 = va_arg (va_arglist, __m128);\n+  e10 = va_arg (va_arglist, __m128h);\n+  e11 = va_arg (va_arglist, _Float16);\n+  e12 = va_arg (va_arglist, double);\n+  e13 = va_arg (va_arglist, __m128h);\n+  e14 = va_arg (va_arglist, __m256h);\n+  e15 = va_arg (va_arglist, __m512h);\n+  e16 = va_arg (va_arglist, __m128d);\n+  e17 = va_arg (va_arglist, __m256);\n+  e18 = va_arg (va_arglist, __m128);\n+  va_end (va_arglist);\n+}\n+\n+static void\n+do_test (void)\n+{\n+  test (n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12,\n+\tn13, n14, n15, n16, n17, n18);\n+  assert (__builtin_memcmp (&e1, &n1, sizeof (e1)) == 0);\n+  assert (__builtin_memcmp (&e2, &n2, sizeof (e2)) == 0);\n+  assert (__builtin_memcmp (&e3, &n3, sizeof (e3)) == 0);\n+  assert (n4 == e4);\n+  assert (n5 == e5);\n+  assert (__builtin_memcmp (&e6, &n6, sizeof (e6)) == 0);\n+  assert (__builtin_memcmp (&e7, &n7, sizeof (e7)) == 0);\n+  assert (__builtin_memcmp (&e8, &n8, sizeof (e8)) == 0);\n+  assert (__builtin_memcmp (&e9, &n9, sizeof (e9)) == 0);\n+  assert (__builtin_memcmp (&e10, &n10, sizeof (e10)) == 0);\n+  assert (n11 == e11);\n+  assert (n12 == e12);\n+  assert (__builtin_memcmp (&e13, &n13, sizeof (e13)) == 0);\n+  assert (__builtin_memcmp (&e14, &n14, sizeof (e14)) == 0);\n+  assert (__builtin_memcmp (&e15, &n15, sizeof (e15)) == 0);\n+  assert (__builtin_memcmp (&e16, &n16, sizeof (e16)) == 0);\n+  assert (__builtin_memcmp (&e17, &n17, sizeof (e17)) == 0);\n+  assert (__builtin_memcmp (&e18, &n18, sizeof (e18)) == 0);\n+}"}, {"sha": "962c2bf031d6b0531dab7d81873cd88a2a87fb0f", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vararg-4.c", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bbd88bb1ee1825e7c2bf0f30074641843117cf6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vararg-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bbd88bb1ee1825e7c2bf0f30074641843117cf6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vararg-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vararg-4.c?ref=5bbd88bb1ee1825e7c2bf0f30074641843117cf6", "patch": "@@ -0,0 +1,115 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx512fp16 } */\n+/* { dg-options \"-mavx512fp16\" } */\n+\n+#include <stdarg.h>\n+#include <assert.h>\n+\n+static void do_test (void);\n+\n+#define DO_TEST do_test\n+#define AVX512FP16\n+#include \"avx512-check.h\"\n+\n+__m128 n1 = { -283.3, -23.3, 213.4, 1119.03 };\n+__m256d n2 = { -93.83, 893.318, 3994.3, -39484.0 };\n+__m128h n3 = { 11.5f16, -31.80f16, 242.3f16, 136.4f16, 42.8f16, -22.8f16, 343.8f16, 215.4f16 } ;\n+_Float16 n4 = 32.4f16;\n+double n5 = 103.3;\n+__m128h n6 = { -12.3f16, 2.0f16, 245.9f16, -432.1f16, 53.5f16, -13.4f16, 432.5f16, 482.4f16 };\n+__m128d n7 = { -91.387, -8193.518 };\n+__m256d n8 = { -123.3, 2.3, 3.4, -10.03 };\n+__m128 n9 = { -123.3, 2.3, 3.4, -10.03 };\n+__m128h n10 = { 123.3f16, -100.0f16, 246.9f16, 13.4f16, -134.4f16, 35.4f16, 156.5f16, 953.1f16 };\n+_Float16 n11 = 40.7f16;\n+double n12 = 304.9;\n+__m128h n13 = { 23.3f16, -11.0f16, 24.5f16, -24.5f16, 535.4f16, 35.4f16, -13.4f16, 14.5f16 };\n+__m256h n14 = { -123.3f16, 23.9f16, 34.4f16, -100.3f16, 284.4f16, 352.5f16, 131.5f16, -13.2f16,\n+\t\t131.4f16, 382.5f16, 38.5f16, 99.6f16, 423.2f16, -12.44f16, 43.2f16, -34.45f16 };\n+__m512h n15 = { -39.3f16, -180.9f16, 13.4f16, 35.4f16, -41.1f16, -14.4f16, 24.5f16, 53.54f16,\n+\t\t 238.4f16, -134.8f16, 24.5f16, 35.6f16, -346.7f16, -43.4f16, -535.3f16, 324.7f16,\n+\t\t 82.5f16, 21.4f16, 24.4f16, 53.4f16, 23.5f16, -24.4f16, -34.5f16, -32.5f16,\n+\t\t 23.6f16, -13.4f16, 24.5f16, 35.5f16, -34.4f16, -24.5f16, -34.5f16, 13.5f16 };\n+__m128d n16 = { 73.0, 63.18 };\n+__m256 n17 = { -183.3, -22.3, 13.9, -119.3, 483.1, 122.3, -33.4, -9.37 };\n+__m128 n18 = { -183.3, 22.3, 13.4, -19.03 };\n+\n+__m128 e1;\n+__m256d e2;\n+__m128h e3;\n+_Float16 e4;\n+double e5;\n+__m128h e6;\n+__m128d e7;\n+__m256d e8;\n+__m128 e9;\n+__m128h e10;\n+_Float16 e11;\n+double e12;\n+__m128h e13;\n+__m256h e14;\n+__m512h e15;\n+__m128d e16;\n+__m256 e17;\n+__m128 e18;\n+\n+static void\n+__attribute__((noinline))\n+foo (va_list va_arglist)\n+{\n+  e4 = va_arg (va_arglist, _Float16);\n+  e5 = va_arg (va_arglist, double);\n+  e6 = va_arg (va_arglist, __m128h);\n+  e7 = va_arg (va_arglist, __m128d);\n+  e8 = va_arg (va_arglist, __m256d);\n+  e9 = va_arg (va_arglist, __m128);\n+  e10 = va_arg (va_arglist, __m128h);\n+  e11 = va_arg (va_arglist, _Float16);\n+  e12 = va_arg (va_arglist, double);\n+  e13 = va_arg (va_arglist, __m128h);\n+  e14 = va_arg (va_arglist, __m256h);\n+  e15 = va_arg (va_arglist, __m512h);\n+  e16 = va_arg (va_arglist, __m128d);\n+  e17 = va_arg (va_arglist, __m256);\n+  e18 = va_arg (va_arglist, __m128);\n+  va_end (va_arglist);\n+}\n+\n+static void\n+__attribute__((noinline))\n+test (__m128 a1, __m256d a2, __m128h a3, ...)\n+{\n+  va_list va_arglist;\n+\n+  e1 = a1;\n+  e2 = a2;\n+  e3 = a3;\n+  va_start (va_arglist, a3);\n+  foo (va_arglist);\n+  va_end (va_arglist);\n+}\n+\n+static void\n+do_test (void)\n+{\n+  test (n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12,\n+\tn13, n14, n15, n16, n17, n18);\n+  assert (__builtin_memcmp (&e1, &n1, sizeof (e1)) == 0);\n+  assert (__builtin_memcmp (&e2, &n2, sizeof (e2)) == 0);\n+  assert (__builtin_memcmp (&e3, &n3, sizeof (e3)) == 0);\n+  assert (n4 == e4);\n+  assert (n5 == e5);\n+  assert (__builtin_memcmp (&e6, &n6, sizeof (e6)) == 0);\n+  assert (__builtin_memcmp (&e7, &n7, sizeof (e7)) == 0);\n+  assert (__builtin_memcmp (&e8, &n8, sizeof (e8)) == 0);\n+  assert (__builtin_memcmp (&e9, &n9, sizeof (e9)) == 0);\n+  assert (__builtin_memcmp (&e10, &n10, sizeof (e10)) == 0);\n+  assert (n11 == e11);\n+  assert (n12 == e12);\n+  assert (__builtin_memcmp (&e13, &n13, sizeof (e13)) == 0);\n+  assert (__builtin_memcmp (&e14, &n14, sizeof (e14)) == 0);\n+  assert (__builtin_memcmp (&e15, &n15, sizeof (e15)) == 0);\n+  assert (__builtin_memcmp (&e16, &n16, sizeof (e16)) == 0);\n+  assert (__builtin_memcmp (&e17, &n17, sizeof (e17)) == 0);\n+  assert (__builtin_memcmp (&e18, &n18, sizeof (e18)) == 0);\n+}"}]}