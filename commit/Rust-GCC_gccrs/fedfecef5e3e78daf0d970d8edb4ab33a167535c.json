{"sha": "fedfecef5e3e78daf0d970d8edb4ab33a167535c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmVkZmVjZWY1ZTNlNzhkYWYwZDk3MGQ4ZWRiNGFiMzNhMTY3NTM1Yw==", "commit": {"author": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2014-06-03T17:35:34Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2014-06-03T17:35:34Z"}, "message": "re PR c/60439 (No warning for case overflow in switch statement.)\n\n\tPR c/60439\n\t* doc/invoke.texi: Document -Wswitch-bool.\n\t* function.c (stack_protect_epilogue): Cast controlling expression of\n\tthe switch to int.\n\t* gengtype.c (walk_type): Generate switch expression with its\n\tcontrolling expression cast to int.\nc/\n\t* c-parser.c (c_parser_switch_statement): Pass explicit_cast_p to\n\tc_start_case.\n\t* c-tree.h (c_start_case): Update.\n\t* c-typeck.c (c_start_case): Add new boolean parameter.  Warn if\n\tswitch condition has boolean value.\ncp/\n\t* semantics.c (finish_switch_cond): Warn if switch condition has\n\tboolean value.\nc-family/\n\t* c.opt (Wswitch-bool): New option.\ntestsuite/\n\t* c-c++-common/pr60439.c: New test.\n\t* g++.dg/eh/scope1.C (f4): Add dg-warning.\n\nFrom-SVN: r211194", "tree": {"sha": "91bf428ee9f7a6bf677d0b5faa7d6cf778b29135", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91bf428ee9f7a6bf677d0b5faa7d6cf778b29135"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fedfecef5e3e78daf0d970d8edb4ab33a167535c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fedfecef5e3e78daf0d970d8edb4ab33a167535c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fedfecef5e3e78daf0d970d8edb4ab33a167535c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fedfecef5e3e78daf0d970d8edb4ab33a167535c/comments", "author": null, "committer": null, "parents": [{"sha": "e4f36438a9dd49f88a9fb4006b481aeeda780255", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4f36438a9dd49f88a9fb4006b481aeeda780255", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4f36438a9dd49f88a9fb4006b481aeeda780255"}], "stats": {"total": 214, "additions": 200, "deletions": 14}, "files": [{"sha": "406179f1764a90f5131613c49691eacdaddaa815", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fedfecef5e3e78daf0d970d8edb4ab33a167535c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fedfecef5e3e78daf0d970d8edb4ab33a167535c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fedfecef5e3e78daf0d970d8edb4ab33a167535c", "patch": "@@ -1,13 +1,22 @@\n-2014-06-03  Vishnu K S <Vishnu.k_s@atmel.com>\n+2014-06-03  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/60439\n+\t* doc/invoke.texi: Document -Wswitch-bool.\n+\t* function.c (stack_protect_epilogue): Cast controlling expression of\n+\tthe switch to int.\n+\t* gengtype.c (walk_type): Generate switch expression with its\n+\tcontrolling expression cast to int.\n+\n+2014-06-03  Vishnu K S  <Vishnu.k_s@atmel.com>\n \n \t* config/avr/avr-mcus.def: Add new avr25 devices attiny441, attiny828\n \tand attiny841.\n \t* config/avr/avr-tables.opt: Regenerate.\n \t* config/avr/t-multilib: Regenerate.\n \t* doc/avr-mmcu.texi: Regenerate.\n \n-2014-06-03  Vishnu K S <vishnu.k_s@atmel.com>\n-\t    Pitchumani Sivanupandi <pitchumani.s@atmel.com>\n+2014-06-03  Vishnu K S  <vishnu.k_s@atmel.com>\n+\t    Pitchumani Sivanupandi  <pitchumani.s@atmel.com>\n \n \t* config/avr/avr-mcus.def (ata6616c): Add new avr25 device.\n \t(ata6617c, ata664251): Add new avr35 devices."}, {"sha": "86267f4b33fe69f0c0fc5fd4db25d91cf82d31d7", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fedfecef5e3e78daf0d970d8edb4ab33a167535c/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fedfecef5e3e78daf0d970d8edb4ab33a167535c/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=fedfecef5e3e78daf0d970d8edb4ab33a167535c", "patch": "@@ -1,3 +1,8 @@\n+2014-06-03  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/60439\n+\t* c.opt (Wswitch-bool): New option.\n+\n 2014-05-22  Thomas Schwinge  <thomas@codesourcery.com>\n \n \t* c-common.h (c_omp_sharing_predetermined, c_omp_remap_decl):"}, {"sha": "5d36a80408dab0c22ffb1227d773d9218155b96e", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fedfecef5e3e78daf0d970d8edb4ab33a167535c/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fedfecef5e3e78daf0d970d8edb4ab33a167535c/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=fedfecef5e3e78daf0d970d8edb4ab33a167535c", "patch": "@@ -534,6 +534,10 @@ Wswitch-enum\n C ObjC C++ ObjC++ Var(warn_switch_enum) Warning\n Warn about all enumerated switches missing a specific case\n \n+Wswitch-bool\n+C ObjC C++ ObjC++ Warning Init(1)\n+Warn about switches with boolean controlling expression\n+\n Wmissing-format-attribute\n C ObjC C++ ObjC++ Alias(Wsuggest-attribute=format)\n ;"}, {"sha": "1047a65b636d698fe68f8465fa818153cfffc1a1", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fedfecef5e3e78daf0d970d8edb4ab33a167535c/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fedfecef5e3e78daf0d970d8edb4ab33a167535c/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=fedfecef5e3e78daf0d970d8edb4ab33a167535c", "patch": "@@ -1,3 +1,12 @@\n+2014-06-03  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/60439\n+\t* c-parser.c (c_parser_switch_statement): Pass explicit_cast_p to\n+\tc_start_case.\n+\t* c-tree.h (c_start_case): Update.\n+\t* c-typeck.c (c_start_case): Add new boolean parameter.  Warn if\n+\tswitch condition has boolean value.\n+\n 2014-06-02  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* c-decl.c: Include builtins.h."}, {"sha": "abd636c5436e5dd80b109120627172e12fbb7066", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fedfecef5e3e78daf0d970d8edb4ab33a167535c/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fedfecef5e3e78daf0d970d8edb4ab33a167535c/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=fedfecef5e3e78daf0d970d8edb4ab33a167535c", "patch": "@@ -5197,9 +5197,13 @@ c_parser_switch_statement (c_parser *parser)\n   gcc_assert (c_parser_next_token_is_keyword (parser, RID_SWITCH));\n   c_parser_consume_token (parser);\n   block = c_begin_compound_stmt (flag_isoc99);\n+  bool explicit_cast_p = false;\n   if (c_parser_require (parser, CPP_OPEN_PAREN, \"expected %<(%>\"))\n     {\n       switch_cond_loc = c_parser_peek_token (parser)->location;\n+      if (c_parser_next_token_is (parser, CPP_OPEN_PAREN)\n+\t  && c_token_starts_typename (c_parser_peek_2nd_token (parser)))\n+\texplicit_cast_p = true;\n       ce = c_parser_expression (parser);\n       ce = convert_lvalue_to_rvalue (switch_cond_loc, ce, true, false);\n       expr = ce.value;\n@@ -5217,7 +5221,7 @@ c_parser_switch_statement (c_parser *parser)\n       switch_cond_loc = UNKNOWN_LOCATION;\n       expr = error_mark_node;\n     }\n-  c_start_case (switch_loc, switch_cond_loc, expr);\n+  c_start_case (switch_loc, switch_cond_loc, expr, explicit_cast_p);\n   save_break = c_break_label;\n   c_break_label = NULL_TREE;\n   body = c_parser_c99_block_statement (parser);"}, {"sha": "133930f4a098e008ded0bf1c65bd071fb7a5121b", "filename": "gcc/c/c-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fedfecef5e3e78daf0d970d8edb4ab33a167535c/gcc%2Fc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fedfecef5e3e78daf0d970d8edb4ab33a167535c/gcc%2Fc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-tree.h?ref=fedfecef5e3e78daf0d970d8edb4ab33a167535c", "patch": "@@ -614,7 +614,7 @@ extern void process_init_element (location_t, struct c_expr, bool,\n \t\t\t\t  struct obstack *);\n extern tree build_compound_literal (location_t, tree, tree, bool);\n extern void check_compound_literal_type (location_t, struct c_type_name *);\n-extern tree c_start_case (location_t, location_t, tree);\n+extern tree c_start_case (location_t, location_t, tree, bool);\n extern void c_finish_case (tree);\n extern tree build_asm_expr (location_t, tree, tree, tree, tree, tree, bool);\n extern tree build_asm_stmt (tree, tree);"}, {"sha": "a98ce0786f30a20a7b9a706e5e79aac00c6c6767", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fedfecef5e3e78daf0d970d8edb4ab33a167535c/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fedfecef5e3e78daf0d970d8edb4ab33a167535c/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=fedfecef5e3e78daf0d970d8edb4ab33a167535c", "patch": "@@ -9361,12 +9361,13 @@ struct c_switch *c_switch_stack;\n \n /* Start a C switch statement, testing expression EXP.  Return the new\n    SWITCH_EXPR.  SWITCH_LOC is the location of the `switch'.\n-   SWITCH_COND_LOC is the location of the switch's condition.  */\n+   SWITCH_COND_LOC is the location of the switch's condition.\n+   EXPLICIT_CAST_P is true if the expression EXP has explicit cast.  */\n \n tree\n c_start_case (location_t switch_loc,\n \t      location_t switch_cond_loc,\n-\t      tree exp)\n+\t      tree exp, bool explicit_cast_p)\n {\n   tree orig_type = error_mark_node;\n   struct c_switch *cs;\n@@ -9387,6 +9388,19 @@ c_start_case (location_t switch_loc,\n       else\n \t{\n \t  tree type = TYPE_MAIN_VARIANT (orig_type);\n+\t  tree e = exp;\n+\n+\t  /* Warn if the condition has boolean value.  */\n+\t  while (TREE_CODE (e) == COMPOUND_EXPR)\n+\t    e = TREE_OPERAND (e, 1);\n+\n+\t  if ((TREE_CODE (type) == BOOLEAN_TYPE\n+\t       || truth_value_p (TREE_CODE (e)))\n+\t      /* Explicit cast to int suppresses this warning.  */\n+\t      && !(TREE_CODE (type) == INTEGER_TYPE\n+\t\t   && explicit_cast_p))\n+\t    warning_at (switch_cond_loc, OPT_Wswitch_bool,\n+\t\t\t\"switch condition has boolean value\");\n \n \t  if (!in_system_header_at (input_location)\n \t      && (type == long_integer_type_node"}, {"sha": "2fa1549f963f3f4bbb91c9dde8b8fc384fa38b91", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fedfecef5e3e78daf0d970d8edb4ab33a167535c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fedfecef5e3e78daf0d970d8edb4ab33a167535c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=fedfecef5e3e78daf0d970d8edb4ab33a167535c", "patch": "@@ -1,3 +1,9 @@\n+2014-06-03  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/60439\n+\t* semantics.c (finish_switch_cond): Warn if switch condition has\n+\tboolean value.\n+\n 2014-06-03  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/60992"}, {"sha": "c1c16f49f9301a8068db8b6085677cd81624f361", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fedfecef5e3e78daf0d970d8edb4ab33a167535c/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fedfecef5e3e78daf0d970d8edb4ab33a167535c/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=fedfecef5e3e78daf0d970d8edb4ab33a167535c", "patch": "@@ -1130,6 +1130,11 @@ finish_switch_cond (tree cond, tree switch_stmt)\n       orig_type = TREE_TYPE (cond);\n       if (cond != error_mark_node)\n \t{\n+\t  /* Warn if the condition has boolean value.  */\n+\t  if (TREE_CODE (orig_type) == BOOLEAN_TYPE)\n+\t    warning_at (input_location, OPT_Wswitch_bool,\n+\t\t\t\"switch condition has type bool\");\n+\n \t  /* [stmt.switch]\n \n \t     Integral promotions are performed.  */"}, {"sha": "1c2e079533489cf0b01090dc35a3f204e0d70ea8", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fedfecef5e3e78daf0d970d8edb4ab33a167535c/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fedfecef5e3e78daf0d970d8edb4ab33a167535c/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=fedfecef5e3e78daf0d970d8edb4ab33a167535c", "patch": "@@ -271,7 +271,7 @@ Objective-C and Objective-C++ Dialects}.\n -Wstrict-aliasing=n @gol -Wstrict-overflow -Wstrict-overflow=@var{n} @gol\n -Wsuggest-attribute=@r{[}pure@r{|}const@r{|}noreturn@r{|}format@r{]} @gol\n -Wmissing-format-attribute @gol\n--Wswitch  -Wswitch-default  -Wswitch-enum -Wsync-nand @gol\n+-Wswitch  -Wswitch-default  -Wswitch-enum -Wswitch-bool -Wsync-nand @gol\n -Wsystem-headers  -Wtrampolines  -Wtrigraphs  -Wtype-limits  -Wundef @gol\n -Wuninitialized  -Wunknown-pragmas  -Wno-pragmas @gol\n -Wunsuffixed-float-constants  -Wunused  -Wunused-function @gol\n@@ -3846,6 +3846,22 @@ between @option{-Wswitch} and this option is that this option gives a\n warning about an omitted enumeration code even if there is a\n @code{default} label.\n \n+@item -Wswitch-bool\n+@opindex Wswitch-bool\n+@opindex Wno-switch-bool\n+Warn whenever a @code{switch} statement has an index of boolean type.\n+It is possible to suppress this warning by casting the controlling\n+expression to a type other than @code{bool}.  For example:\n+@smallexample\n+@group\n+switch ((int) (a == 4))\n+  @{\n+  ...\n+  @}\n+@end group\n+@end smallexample\n+This warning is enabled by default for C and C++ programs.\n+\n @item -Wsync-nand @r{(C and C++ only)}\n @opindex Wsync-nand\n @opindex Wno-sync-nand"}, {"sha": "922f567734e418ccd0adc0373c4ea7d7401127d8", "filename": "gcc/function.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fedfecef5e3e78daf0d970d8edb4ab33a167535c/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fedfecef5e3e78daf0d970d8edb4ab33a167535c/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=fedfecef5e3e78daf0d970d8edb4ab33a167535c", "patch": "@@ -4649,7 +4649,7 @@ stack_protect_epilogue (void)\n \n   /* Allow the target to compare Y with X without leaking either into\n      a register.  */\n-  switch (HAVE_stack_protect_test != 0)\n+  switch ((int) (HAVE_stack_protect_test != 0))\n     {\n     case 1:\n       tmp = gen_stack_protect_test (x, y, label);"}, {"sha": "ffe3f94a6ae5c05177aeabc206a8d7b363b85e7f", "filename": "gcc/gengtype.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fedfecef5e3e78daf0d970d8edb4ab33a167535c/gcc%2Fgengtype.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fedfecef5e3e78daf0d970d8edb4ab33a167535c/gcc%2Fgengtype.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype.c?ref=fedfecef5e3e78daf0d970d8edb4ab33a167535c", "patch": "@@ -3099,9 +3099,9 @@ walk_type (type_p t, struct walk_type_data *d)\n \t\t\t       t->u.s.tag);\n \t\tdesc = \"1\";\n \t      }\n-\t    oprintf (d->of, \"%*sswitch (\", d->indent, \"\");\n+\t    oprintf (d->of, \"%*sswitch ((int) (\", d->indent, \"\");\n \t    output_escaped_param (d, desc, \"desc\");\n-\t    oprintf (d->of, \")\\n\");\n+\t    oprintf (d->of, \"))\\n\");\n \t    d->indent += 2;\n \t    oprintf (d->of, \"%*s{\\n\", d->indent, \"\");\n \t  }\n@@ -3121,9 +3121,9 @@ walk_type (type_p t, struct walk_type_data *d)\n \t\t\t       \"missing `tag' option for type `%s'\",\n \t\t\t       t->u.s.tag);\n \t      }\n-\t    oprintf (d->of, \"%*sswitch (\", d->indent, \"\");\n+\t    oprintf (d->of, \"%*sswitch ((int) (\", d->indent, \"\");\n \t    output_escaped_param (d, desc, \"desc\");\n-\t    oprintf (d->of, \")\\n\");\n+\t    oprintf (d->of, \"))\\n\");\n \t    d->indent += 2;\n \t    oprintf (d->of, \"%*s{\\n\", d->indent, \"\");\n \t    oprintf (d->of, \"%*scase %s:\\n\", d->indent, \"\", type_tag);"}, {"sha": "c409d99f21117128c0e22d4100a6be2aa3e96dd1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fedfecef5e3e78daf0d970d8edb4ab33a167535c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fedfecef5e3e78daf0d970d8edb4ab33a167535c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fedfecef5e3e78daf0d970d8edb4ab33a167535c", "patch": "@@ -1,3 +1,9 @@\n+2014-06-03  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/60439\n+\t* c-c++-common/pr60439.c: New test.\n+\t* g++.dg/eh/scope1.C (f4): Add dg-warning.\n+\n 2014-06-03  Martin Jambor  <mjambor@suse.cz>\n \n \tPR ipa/61160"}, {"sha": "3368a0b944d3e52a66144dcef439bf99003f09cb", "filename": "gcc/testsuite/c-c++-common/pr60439.c", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fedfecef5e3e78daf0d970d8edb4ab33a167535c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr60439.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fedfecef5e3e78daf0d970d8edb4ab33a167535c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr60439.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr60439.c?ref=fedfecef5e3e78daf0d970d8edb4ab33a167535c", "patch": "@@ -0,0 +1,108 @@\n+/* PR c/60439 */\n+/* { dg-do compile } */\n+\n+#ifndef __cplusplus\n+# define bool _Bool\n+#endif\n+\n+extern bool foo (void);\n+\n+void\n+f1 (bool b)\n+{\n+  switch (b) /* { dg-warning \"switch condition has\" } */\n+    break;\n+}\n+\n+void\n+f2 (int a, int b)\n+{\n+  switch (a && b) /* { dg-warning \"switch condition has\" } */\n+    break;\n+  switch ((bool) (a && b)) /* { dg-warning \"switch condition has\" } */\n+    break;\n+  switch ((a && b) || a) /* { dg-warning \"switch condition has\" } */\n+    break;\n+  /* No warnings on following.  */\n+  switch ((int) (a && b))\n+    break;\n+  switch ((unsigned int) (a && b))\n+    break;\n+  switch ((unsigned short int) (a && b))\n+    break;\n+  switch ((char) (a && b))\n+    break;\n+}\n+\n+void\n+f3 (int a)\n+{\n+  switch (!!a) /* { dg-warning \"switch condition has\" } */\n+    break;\n+  switch (!a) /* { dg-warning \"switch condition has\" } */\n+    break;\n+}\n+\n+void\n+f4 (void)\n+{\n+  switch (foo ()) /* { dg-warning \"switch condition has\" } */\n+    break;\n+}\n+\n+void\n+f5 (int a)\n+{\n+  switch (a == 3) /* { dg-warning \"switch condition has\" } */\n+    break;\n+  switch (a != 3) /* { dg-warning \"switch condition has\" } */\n+    break;\n+  switch (a > 3) /* { dg-warning \"switch condition has\" } */\n+    break;\n+  switch (a < 3) /* { dg-warning \"switch condition has\" } */\n+    break;\n+  switch (a <= 3) /* { dg-warning \"switch condition has\" } */\n+    break;\n+  switch (a >= 3) /* { dg-warning \"switch condition has\" } */\n+    break;\n+  switch (foo (), foo (), a >= 42) /* { dg-warning \"switch condition has\" } */\n+    break;\n+  switch (a == 3, a & 4, a ^ 5, a)\n+    break;\n+  switch ((int) (a == 3))\n+    break;\n+  switch ((int) (a != 3))\n+    break;\n+}\n+\n+void\n+f6 (bool b)\n+{\n+  switch (b) /* { dg-warning \"switch condition has\" } */\n+    break;\n+  switch (!b) /* { dg-warning \"switch condition has\" } */\n+    break;\n+  switch (b++) /* { dg-warning \"switch condition has\" } */\n+    break;\n+}\n+\n+void\n+f7 (void)\n+{\n+  bool b;\n+  switch (b = 1) /* { dg-warning \"switch condition has\" } */\n+    break;\n+}\n+\n+void\n+f8 (int i)\n+{\n+  switch (i)\n+    break;\n+  switch ((int) i)\n+    break;\n+  switch ((unsigned int) i)\n+    break;\n+  switch ((bool) i) /* { dg-warning \"switch condition has\" } */\n+    break;\n+}"}, {"sha": "8d553d8295b26bcbc081402ccac46106423bbac5", "filename": "gcc/testsuite/g++.dg/eh/scope1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fedfecef5e3e78daf0d970d8edb4ab33a167535c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fscope1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fedfecef5e3e78daf0d970d8edb4ab33a167535c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fscope1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fscope1.C?ref=fedfecef5e3e78daf0d970d8edb4ab33a167535c", "patch": "@@ -31,7 +31,7 @@ void f3 ()\n \n void f4 ()\n {\n-  switch (C br = C())\n+  switch (C br = C()) /* { dg-warning \"switch condition has\" } */\n     {\n     default:\n       abort ();"}]}