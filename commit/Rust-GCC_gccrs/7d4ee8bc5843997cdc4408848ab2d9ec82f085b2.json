{"sha": "7d4ee8bc5843997cdc4408848ab2d9ec82f085b2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Q0ZWU4YmM1ODQzOTk3Y2RjNDQwODg0OGFiMmQ5ZWM4MmYwODViMg==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-07-15T21:00:11Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-07-30T10:03:58Z"}, "message": "d: Implement core.bitop.rol() and core.bitop.ror() as intrinsics.\n\ngcc/d/ChangeLog:\n\n\t* intrinsics.cc (expand_intrinsic_rotate): Add function.\n\t(maybe_expand_intrinsic): Handle rol and ror intrinsics.\n\t* intrinsics.def (ROL): Add intrinsic.\n\t(ROL_TIARG): Add intrinsic.\n\t(ROR): Add intrinsic.\n\t(ROR_TIARG): Add intrinsic.\n\ngcc/testsuite/ChangeLog:\n\n\t* gdc.dg/intrinsics.d: Add ror and rol tests.", "tree": {"sha": "c09107f7a7bd6e186cfa6ffbccc6b00f468bf714", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c09107f7a7bd6e186cfa6ffbccc6b00f468bf714"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d4ee8bc5843997cdc4408848ab2d9ec82f085b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d4ee8bc5843997cdc4408848ab2d9ec82f085b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d4ee8bc5843997cdc4408848ab2d9ec82f085b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d4ee8bc5843997cdc4408848ab2d9ec82f085b2/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ee874f1353933b1427b5e2953358eb3424090d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ee874f1353933b1427b5e2953358eb3424090d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ee874f1353933b1427b5e2953358eb3424090d5"}], "stats": {"total": 67, "additions": 67, "deletions": 0}, "files": [{"sha": "28667c63e17442dc6f3ac4446e9fb97bd269df42", "filename": "gcc/d/intrinsics.cc", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d4ee8bc5843997cdc4408848ab2d9ec82f085b2/gcc%2Fd%2Fintrinsics.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d4ee8bc5843997cdc4408848ab2d9ec82f085b2/gcc%2Fd%2Fintrinsics.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fintrinsics.cc?ref=7d4ee8bc5843997cdc4408848ab2d9ec82f085b2", "patch": "@@ -390,6 +390,56 @@ expand_intrinsic_popcnt (tree callexp)\n   return call_builtin_fn (callexp, code, 1, arg);\n }\n \n+/* Expand a front-end intrinsic call to INTRINSIC, which is either a call to\n+   rol() or ror().  These intrinsics expect to take one or two arguments,\n+   the signature to which can be either:\n+\n+\tT rol(T) (const T value, const uint count);\n+\tT rol(uint count, T) (const T value);\n+\tT ror(T) (const T value, const uint count);\n+\tT ror(uint count, T) (const T value);\n+\n+   This bitwise rotates VALUE left or right by COUNT bit positions.  */\n+\n+static tree\n+expand_intrinsic_rotate (intrinsic_code intrinsic, tree callexp)\n+{\n+  tree type = TREE_TYPE (callexp);\n+  tree value = CALL_EXPR_ARG (callexp, 0);\n+  tree count;\n+  tree_code code;\n+\n+  /* Get the equivalent tree code for the intrinsic.  */\n+  if (intrinsic == INTRINSIC_ROL || intrinsic == INTRINSIC_ROL_TIARG)\n+    code = LROTATE_EXPR;\n+  else if (intrinsic == INTRINSIC_ROR || intrinsic == INTRINSIC_ROR_TIARG)\n+    code = RROTATE_EXPR;\n+  else\n+    gcc_unreachable ();\n+\n+  /* Get the COUNT parameter.  Either from the call expression arguments or the\n+     template instantiation arguments.  */\n+  if (intrinsic == INTRINSIC_ROL || intrinsic == INTRINSIC_ROR)\n+    count = CALL_EXPR_ARG (callexp, 1);\n+  else\n+    {\n+      tree callee = CALL_EXPR_FN (callexp);\n+\n+      if (TREE_CODE (callee) == ADDR_EXPR)\n+\tcallee = TREE_OPERAND (callee, 0);\n+\n+      /* Retrieve from the encoded template instantation.  */\n+      TemplateInstance *ti = DECL_LANG_FRONTEND (callee)->isInstantiated ();\n+      gcc_assert (ti && ti->tiargs && ti->tiargs->length == 2);\n+\n+      Expression *e = isExpression ((*ti->tiargs)[0]);\n+      gcc_assert (e && e->op == TOKint64);\n+      count = build_expr (e, true);\n+    }\n+\n+  return fold_build2 (code, type, value, count);\n+}\n+\n /* Expand a front-end intrinsic call to copysign().  This takes two arguments,\n    the signature to which can be either:\n \n@@ -737,6 +787,12 @@ maybe_expand_intrinsic (tree callexp)\n     case INTRINSIC_POPCNT64:\n       return expand_intrinsic_popcnt (callexp);\n \n+    case INTRINSIC_ROL:\n+    case INTRINSIC_ROL_TIARG:\n+    case INTRINSIC_ROR:\n+    case INTRINSIC_ROR_TIARG:\n+      return expand_intrinsic_rotate (intrinsic, callexp);\n+\n     case INTRINSIC_BSWAP32:\n     case INTRINSIC_BSWAP64:\n     case INTRINSIC_CEIL:"}, {"sha": "5b8cb712264343cdb6fb06a94263aceb2c7c562c", "filename": "gcc/d/intrinsics.def", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d4ee8bc5843997cdc4408848ab2d9ec82f085b2/gcc%2Fd%2Fintrinsics.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d4ee8bc5843997cdc4408848ab2d9ec82f085b2/gcc%2Fd%2Fintrinsics.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fintrinsics.def?ref=7d4ee8bc5843997cdc4408848ab2d9ec82f085b2", "patch": "@@ -59,6 +59,11 @@ DEF_D_BUILTIN (BSWAP64, BSWAP64, \"bswap\", \"core.bitop\", \"FNaNbNiNfmZm\")\n DEF_D_BUILTIN (POPCNT32, NONE, \"popcnt\", \"core.bitop\", \"FNaNbNiNfkZi\")\n DEF_D_BUILTIN (POPCNT64, NONE, \"popcnt\", \"core.bitop\", \"FNaNbNiNfmZi\")\n \n+DEF_D_BUILTIN (ROL, NONE, \"rol\", \"core.bitop\", \"FNaI1TkZI1T\")\n+DEF_D_BUILTIN (ROL_TIARG, NONE, \"rol\", \"core.bitop\", \"FNaI1TZI1T\")\n+DEF_D_BUILTIN (ROR, NONE, \"ror\", \"core.bitop\", \"FNaI1TkZI1T\")\n+DEF_D_BUILTIN (ROR_TIARG, NONE, \"ror\", \"core.bitop\", \"FNaI1TZI1T\")\n+\n DEF_D_BUILTIN (VLOAD8, NONE, \"volatileLoad\", \"core.bitop\", \"FNbNiNfPhZh\")\n DEF_D_BUILTIN (VLOAD16, NONE, \"volatileLoad\", \"core.bitop\", \"FNbNiNfPtZt\")\n DEF_D_BUILTIN (VLOAD32, NONE, \"volatileLoad\", \"core.bitop\", \"FNbNiNfPkZk\")"}, {"sha": "5888361a43865fc60fdd472560287892401aff8c", "filename": "gcc/testsuite/gdc.dg/intrinsics.d", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d4ee8bc5843997cdc4408848ab2d9ec82f085b2/gcc%2Ftestsuite%2Fgdc.dg%2Fintrinsics.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d4ee8bc5843997cdc4408848ab2d9ec82f085b2/gcc%2Ftestsuite%2Fgdc.dg%2Fintrinsics.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fintrinsics.d?ref=7d4ee8bc5843997cdc4408848ab2d9ec82f085b2", "patch": "@@ -38,6 +38,12 @@ void test_volatileStore(ubyte *a, ubyte b) { return volatileStore(a, b); }\n void test_volatileStore(ushort *a, ushort b) { return volatileStore(a, b); }\n void test_volatileStore(uint *a, uint b) { return volatileStore(a, b); }\n void test_volatileStore(ulong *a, ulong b) { return volatileStore(a, b); }\n+// { dg-final { scan-tree-dump-not \" rol \" \"original\" } }\n+ubyte test_rol(ubyte a, uint b) { return rol!ubyte(a, b); }\n+uint test_rol(uint a) { return rol!(1, uint)(a); }\n+// { dg-final { scan-tree-dump-not \" ror \" \"original\" } }\n+ushort test_ror(ushort a, uint b) { return ror!ushort(a, b); }\n+ulong test_ror(ulong a) { return ror!(1, ulong)(a); }\n \n //////////////////////////////////////////////////////\n // core.checkedint"}]}