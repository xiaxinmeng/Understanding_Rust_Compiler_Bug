{"sha": "fe04ce064a68fb28986a07d1061bdc5cb98e2a89", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmUwNGNlMDY0YTY4ZmIyODk4NmEwN2QxMDYxYmRjNWNiOThlMmE4OQ==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2005-01-26T03:20:22Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2005-01-26T03:20:22Z"}, "message": "cris.h (LIB_SPEC): Use -lsyslinux, not -lsyssim.\n\n\t* config/cris/cris.h (LIB_SPEC) <sim*>: Use -lsyslinux, not\n\t-lsyssim.  Wrap -lc -lsyssim in --start-group --end-group instead\n\tof doubling.\n\t(STARTFILE_SPEC): Add crti.o, before crtbegin.o.\n \t<sim*>: Always use crt1.o, regardless of N in simN.\n\t<!sim>: Drop support for -pg and -p variants; always use crt0.o.\n\t(ENDFILE_SPEC): Add crtn.o, after crtend.o.\n\t(CRT_CALL_STATIC_FUNCTION): Remove.\n\t* config/cris/aout.h (STARTFILE_SPEC): <!melinux && sim*>: Always\n\tuse crt1.o, regardless of N in simN.\n\t<!sim>: Drop support for -pg and -p variants; always use crt0.o.\n\t(LIB_SPEC): Do not define; default to the one in config/cris/cris.h.\n\t(CRIS_CPP_SUBTARGET_SPEC) <melinux && !nostdinc>: Remove special\n\tcase isystem setting.\n\t(MAX_OFILE_ALIGNMENT): Correct to 32, not 16.\n\nFrom-SVN: r94251", "tree": {"sha": "9ba1caadb88ecb5beadab9673342ae40c0206879", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ba1caadb88ecb5beadab9673342ae40c0206879"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe04ce064a68fb28986a07d1061bdc5cb98e2a89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe04ce064a68fb28986a07d1061bdc5cb98e2a89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe04ce064a68fb28986a07d1061bdc5cb98e2a89", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe04ce064a68fb28986a07d1061bdc5cb98e2a89/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6a03afdf3e124f0d08809f861ad313da5c3f8e74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a03afdf3e124f0d08809f861ad313da5c3f8e74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a03afdf3e124f0d08809f861ad313da5c3f8e74"}], "stats": {"total": 94, "additions": 30, "deletions": 64}, "files": [{"sha": "145cc2d0bf404e58bf39a225c92a39f9ab60352b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe04ce064a68fb28986a07d1061bdc5cb98e2a89/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe04ce064a68fb28986a07d1061bdc5cb98e2a89/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fe04ce064a68fb28986a07d1061bdc5cb98e2a89", "patch": "@@ -1,3 +1,21 @@\n+2005-01-26  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\t* config/cris/cris.h (LIB_SPEC) <sim*>: Use -lsyslinux, not\n+\t-lsyssim.  Wrap -lc -lsyssim in --start-group --end-group instead\n+\tof doubling.\n+\t(STARTFILE_SPEC): Add crti.o, before crtbegin.o.\n+ \t<sim*>: Always use crt1.o, regardless of N in simN.\n+\t<!sim>: Drop support for -pg and -p variants; always use crt0.o.\n+\t(ENDFILE_SPEC): Add crtn.o, after crtend.o.\n+\t(CRT_CALL_STATIC_FUNCTION): Remove.\n+\t* config/cris/aout.h (STARTFILE_SPEC): <!melinux && sim*>: Always\n+\tuse crt1.o, regardless of N in simN.\n+\t<!sim>: Drop support for -pg and -p variants; always use crt0.o.\n+\t(LIB_SPEC): Do not define; default to the one in config/cris/cris.h.\n+\t(CRIS_CPP_SUBTARGET_SPEC) <melinux && !nostdinc>: Remove special\n+\tcase isystem setting.\n+\t(MAX_OFILE_ALIGNMENT): Correct to 32, not 16.\n+\n 2005-01-25  Ian Lance Taylor  <ian@airs.com>\n \n \t* gimple-low.c (block_may_fallthru): Correct handling of"}, {"sha": "28fdac8e82137c30f226588b36129fee97af2dfe", "filename": "gcc/config/cris/aout.h", "status": "modified", "additions": 3, "deletions": 26, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe04ce064a68fb28986a07d1061bdc5cb98e2a89/gcc%2Fconfig%2Fcris%2Faout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe04ce064a68fb28986a07d1061bdc5cb98e2a89/gcc%2Fconfig%2Fcris%2Faout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Faout.h?ref=fe04ce064a68fb28986a07d1061bdc5cb98e2a89", "patch": "@@ -41,37 +41,14 @@ Boston, MA 02111-1307, USA.  */\n #undef STARTFILE_SPEC\n #define STARTFILE_SPEC \\\n  \"%{melinux:crt0.o%s}\\\n-  %{!melinux:\\\n-   %{sim2:s2crt0.o%s}\\\n-   %{!sim2:\\\n-    %{sim:scrt0.o%s}\\\n-    %{!sim:%{pg:gcrt0.o%s}\\\n-     %{!pg:%{p:mcrt0.o%s}%{!p:crt0.o%s}}}}}\"\n+  %{!melinux:%{sim*:crt1.o%s}%{!sim*:crt0.o%s}}\"\n \n /* Override cris.h define.  */\n #undef ENDFILE_SPEC\n \n-/* Which library to get.  The only difference from the default is to get\n-   libsc.a if -sim is given to the driver.  Repeat -lc -lsysX\n-   {X=sim,linux}, because libsysX needs (at least) errno from libc, and\n-   then we want to resolve new unknowns in libc against libsysX, not\n-   libnosys.  Assume everything is in libc for -mlinux.  */\n-#undef LIB_SPEC\n-#define LIB_SPEC \\\n- \"%{melinux:-lc -lsyslinux -lc -lsyslinux -lic}\\\n-  %{!melinux:\\\n-   %{sim*:-lc -lsyssim -lc -lsyssim}\\\n-   %{!sim*:%{g*:-lg}\\\n-     %{!p:%{!pg:-lc}}%{p:-lc_p}%{pg:-lc_p} -lbsp}\\\n-   -lnosys}\"\n-\n #undef CRIS_CPP_SUBTARGET_SPEC\n #define CRIS_CPP_SUBTARGET_SPEC \\\n  \"%{melinux:-D__gnu_linux__ -D__linux__ -D__unix__ -D__elinux__ -D__uclinux__\\\n-    %{!nostdinc:\\\n-      %{!mbest-lib-options:%{isystem*}}\\\n-      -isystem elinux/include%s\\\n-      %{mbest-lib-options:%{isystem*}}}\\\n     %{!ansi:%{!std=*:%{!undef:-Dlinux -Dunix -Delinux -Duclinux}}}}\\\n   %{mbest-lib-options:\\\n    %{!moverride-best-lib-options:\\\n@@ -135,8 +112,8 @@ Boston, MA 02111-1307, USA.  */\n \n /* Node: Storage Layout */\n \n-/* We can align to 16 bits (only) with CRIS a.out.  */\n-#define MAX_OFILE_ALIGNMENT 16\n+/* All sections but the .bss is rounded up to a 4-byte multiple size.  */\n+#define MAX_OFILE_ALIGNMENT 32\n \n \n /* Node: Data Output */"}, {"sha": "66255ee53dd2e4091205b61e874ac4123578e878", "filename": "gcc/config/cris/cris.h", "status": "modified", "additions": 9, "deletions": 38, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe04ce064a68fb28986a07d1061bdc5cb98e2a89/gcc%2Fconfig%2Fcris%2Fcris.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe04ce064a68fb28986a07d1061bdc5cb98e2a89/gcc%2Fconfig%2Fcris%2Fcris.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.h?ref=fe04ce064a68fb28986a07d1061bdc5cb98e2a89", "patch": "@@ -210,35 +210,27 @@ extern const char *cris_elinux_stacksize_str;\n   %{sim2:%{!T*:-Tdata 0x4000000 -Tbss 0x8000000}}\\\n   %{!r:%{O2|O3: --gc-sections}}\"\n \n-/* Which library to get.  The only difference from the default is to get\n-   libsc.a if -sim is given to the driver.  Repeat -lc -lsysX\n-   {X=sim,linux}, because libsysX needs (at least) errno from libc, and\n-   then we want to resolve new unknowns in libc against libsysX, not\n-   libnosys.  */\n+/* Which library to get.  The simulator uses a different library for\n+   the low-level syscalls (implementing the Linux syscall ABI instead\n+   of direct-iron accesses).  Default everything with the stub \"nosys\"\n+   library.  */\n /* Override previous definitions (linux.h).  */\n #undef LIB_SPEC\n #define LIB_SPEC \\\n- \"%{sim*:-lc -lsyssim -lc -lsyssim}\\\n+ \"%{sim*:--start-group -lc -lsyslinux --end-group}\\\n   %{!sim*:%{g*:-lg}\\\n     %{!p:%{!pg:-lc}}%{p:-lc_p}%{pg:-lc_p} -lbsp}\\\n   -lnosys\"\n \n /* Linker startfile options; crt0 flavors.\n-\n-   At the moment there are no gcrt0.o or mcrt0.o, but keep them here and\n-   link them to crt0.o to be prepared.  Use scrt0.c if running the\n-   simulator, linear style, or s2crt0.c if fixed style.  */\n-/* We need to remove any previous definition (elfos.h).  */\n+   We need to remove any previous definition (elfos.h).  */\n #undef STARTFILE_SPEC\n #define STARTFILE_SPEC \\\n- \"%{sim2:s2crt0.o%s}\\\n-  %{!sim2:%{sim:scrt0.o%s}\\\n-   %{!sim:%{pg:gcrt0.o%s}\\\n-    %{!pg:%{p:mcrt0.o%s}%{!p:crt0.o%s}}}}\\\n-  crtbegin.o%s\"\n+ \"%{sim*:crt1.o%s}%{!sim*:crt0.o%s}\\\n+  crti.o%s crtbegin.o%s\"\n \n #undef ENDFILE_SPEC\n-#define ENDFILE_SPEC \"crtend.o%s\"\n+#define ENDFILE_SPEC \"crtend.o%s crtn.o%s\"\n \n #define EXTRA_SPECS\t\t\t\t\\\n   {\"cpp_subtarget\", CRIS_CPP_SUBTARGET_SPEC},\t\\\n@@ -1335,27 +1327,6 @@ struct cum_args {int regs;};\n /* The jump table is immediately connected to the preceding insn.  */\n #define JUMP_TABLES_IN_TEXT_SECTION 1\n \n-/* We pull a little trick to register the _fini function with atexit,\n-   after (presumably) registering the eh frame info, since we don't handle\n-   _fini (a.k.a. ___fini_start) in crt0 or have a crti for \"pure\" ELF.  If\n-   you change this, don't forget that you can't have library function\n-   references (e.g. to atexit) in crtend.o, since those won't be resolved\n-   to libraries; those are linked in *before* crtend.o.  */\n-#ifdef CRT_BEGIN\n-# define CRT_CALL_STATIC_FUNCTION(SECTION_OP, FUNC)\t\t\\\n-static void __attribute__((__used__))\t\t\t\t\\\n-call_ ## FUNC (void)\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\\\n-  asm (SECTION_OP);\t\t\t\t\t\t\\\n-  FUNC ();\t\t\t\t\t\t\t\\\n-  if (__builtin_strcmp (#FUNC, \"frame_dummy\") == 0)\t\t\\\n-   {\t\t\t\t\t\t\t\t\\\n-     extern void __fini__start (void);\t\t\t\t\\\n-     atexit (__fini__start);\t\t\t\t\t\\\n-   }\t\t\t\t\t\t\t\t\\\n-  asm (TEXT_SECTION_ASM_OP);\t\t\t\t\t\\\n-}\n-#endif\n \n /* Node: PIC */\n "}]}