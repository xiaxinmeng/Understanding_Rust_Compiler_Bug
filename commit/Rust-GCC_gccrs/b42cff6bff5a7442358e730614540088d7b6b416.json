{"sha": "b42cff6bff5a7442358e730614540088d7b6b416", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjQyY2ZmNmJmZjVhNzQ0MjM1OGU3MzA2MTQ1NDAwODhkN2I2YjQxNg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@hxi.com", "date": "2002-02-27T01:09:50Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2002-02-27T01:09:50Z"}, "message": "h8300-protos.h: Update the prototype for compute_logical_op_length.\n\n\t* config/h8300/h8300-protos.h: Update the prototype for\n\tcompute_logical_op_length.  Add the prototype for\n\tcompute_logical_op_cc.\n\t* config/h8300/h8300.c (compute_logical_op_length): Figure out\n\tcode from operands.\n\t(compute_logical_op_cc): New.\n\t* config/h8300/h8300.md: Combine all the logical op patterns\n\tin HImode and SImode.  Use compute_logical_op_cc.\n\nFrom-SVN: r50078", "tree": {"sha": "50554ae928e1666bc074b9f47a7a611bb9457ed0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/50554ae928e1666bc074b9f47a7a611bb9457ed0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b42cff6bff5a7442358e730614540088d7b6b416", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b42cff6bff5a7442358e730614540088d7b6b416", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b42cff6bff5a7442358e730614540088d7b6b416", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b42cff6bff5a7442358e730614540088d7b6b416/comments", "author": null, "committer": null, "parents": [{"sha": "3af7d37f671a693f2e136e0da7faeee38850130d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3af7d37f671a693f2e136e0da7faeee38850130d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3af7d37f671a693f2e136e0da7faeee38850130d"}], "stats": {"total": 211, "additions": 91, "deletions": 120}, "files": [{"sha": "3bef7cd98ca626a5a9642eb276374b5db8f8c01b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b42cff6bff5a7442358e730614540088d7b6b416/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b42cff6bff5a7442358e730614540088d7b6b416/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b42cff6bff5a7442358e730614540088d7b6b416", "patch": "@@ -1,3 +1,14 @@\n+2002-02-26  Kazu Hirata  <kazu@hxi.com>\n+\n+\t* config/h8300/h8300-protos.h: Update the prototype for\n+\tcompute_logical_op_length.  Add the prototype for\n+\tcompute_logical_op_cc.\n+\t* config/h8300/h8300.c (compute_logical_op_length): Figure out\n+\tcode from operands.\n+\t(compute_logical_op_cc): New.\n+\t* config/h8300/h8300.md: Combine all the logical op patterns\n+\tin HImode and SImode.  Use compute_logical_op_cc.\n+\n 2002-02-26  Kelley Cook  <kelleycook@comcast.net>\n \n \t* config/i386/i386.c (print_operand): Don't append ATT-style"}, {"sha": "e930d5ec0dd04de3bdb1312ce6bc4315a5a0143e", "filename": "gcc/config/h8300/h8300-protos.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b42cff6bff5a7442358e730614540088d7b6b416/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b42cff6bff5a7442358e730614540088d7b6b416/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h?ref=b42cff6bff5a7442358e730614540088d7b6b416", "patch": "@@ -35,9 +35,10 @@ extern void print_operand PARAMS ((FILE *, rtx, int));\n extern void final_prescan_insn PARAMS ((rtx, rtx *, int));\n extern int do_movsi PARAMS ((rtx[]));\n extern void notice_update_cc PARAMS ((rtx, rtx));\n-extern const char *output_logical_op PARAMS ((enum machine_mode, int, rtx *));\n+extern const char *output_logical_op PARAMS ((enum machine_mode, rtx *));\n extern unsigned int compute_logical_op_length PARAMS ((enum machine_mode,\n-\t\t\t\t\t\t       enum rtx_code, rtx *));\n+\t\t\t\t\t\t       rtx *));\n+extern int compute_logical_op_cc PARAMS ((enum machine_mode, rtx *));\n extern int expand_a_shift PARAMS ((enum machine_mode, int, rtx[]));\n extern int expand_a_rotate PARAMS ((enum rtx_code, rtx[]));\n extern int fix_bit_operand PARAMS ((rtx *, int, enum rtx_code));"}, {"sha": "1e997c885d77c15fce12839e155973895e3fa38d", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 55, "deletions": 4, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b42cff6bff5a7442358e730614540088d7b6b416/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b42cff6bff5a7442358e730614540088d7b6b416/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=b42cff6bff5a7442358e730614540088d7b6b416", "patch": "@@ -1487,11 +1487,12 @@ bit_operator (x, mode)\n }\n \f\n const char *\n-output_logical_op (mode, code, operands)\n+output_logical_op (mode, operands)\n      enum machine_mode mode;\n-     int code;\n      rtx *operands;\n {\n+  /* Figure out the logical op that we need to perform.  */\n+  enum rtx_code code = GET_CODE (operands[3]);\n   /* Pretend that every byte is affected if both operands are registers.  */\n   unsigned HOST_WIDE_INT intval =\n     (unsigned HOST_WIDE_INT) ((GET_CODE (operands[2]) == CONST_INT)\n@@ -1629,11 +1630,12 @@ output_logical_op (mode, code, operands)\n }\n \n unsigned int\n-compute_logical_op_length (mode, code, operands)\n+compute_logical_op_length (mode, operands)\n      enum machine_mode mode;\n-     enum rtx_code code;\n      rtx *operands;\n {\n+  /* Figure out the logical op that we need to perform.  */\n+  enum rtx_code code = GET_CODE (operands[3]);\n   /* Pretend that every byte is affected if both operands are registers.  */\n   unsigned HOST_WIDE_INT intval =\n     (unsigned HOST_WIDE_INT) ((GET_CODE (operands[2]) == CONST_INT)\n@@ -1738,6 +1740,55 @@ compute_logical_op_length (mode, code, operands)\n     }\n   return length;\n }\n+\n+int\n+compute_logical_op_cc (mode, operands)\n+     enum machine_mode mode;\n+     rtx *operands;\n+{\n+  /* Figure out the logical op that we need to perform.  */\n+  enum rtx_code code = GET_CODE (operands[3]);\n+  /* Pretend that every byte is affected if both operands are registers.  */\n+  unsigned HOST_WIDE_INT intval =\n+    (unsigned HOST_WIDE_INT) ((GET_CODE (operands[2]) == CONST_INT)\n+\t\t\t      ? INTVAL (operands[2]) : 0x55555555);\n+  /* The determinant of the algorithm.  If we perform an AND, 0\n+     affects a bit.  Otherwise, 1 affects a bit.  */\n+  unsigned HOST_WIDE_INT det = (code != AND) ? intval : ~intval;\n+  /* Condition code.  */\n+  enum attr_cc cc = CC_CLOBBER;\n+\n+  switch (mode)\n+    {\n+    case HImode:\n+      /* First, see if we can finish with one insn.  */\n+      if ((TARGET_H8300H || TARGET_H8300S)\n+\t  && ((det & 0x00ff) != 0)\n+\t  && ((det & 0xff00) != 0))\n+\t{\n+\t  cc = CC_SET_ZNV;\n+\t}\n+      break;\n+    case SImode:\n+      /* First, see if we can finish with one insn.\n+\n+\t If code is either AND or XOR, we exclude two special cases,\n+\t 0xffffff00 and 0xffff00ff, because insns like sub.w or not.w\n+\t can do a better job.  */\n+      if ((TARGET_H8300H || TARGET_H8300S)\n+\t  && ((det & 0x0000ffff) != 0)\n+\t  && ((det & 0xffff0000) != 0)\n+\t  && (code == IOR || det != 0xffffff00)\n+\t  && (code == IOR || det != 0xffff00ff))\n+\t{\n+\t  cc = CC_SET_ZNV;\n+\t}\n+      break;\n+    default:\n+      abort ();\n+    }\n+  return cc;\n+}\n \f\n /* Shifts.\n "}, {"sha": "b17d555794450e01fcc27aa1cb4870de212e5abe", "filename": "gcc/config/h8300/h8300.md", "status": "modified", "additions": 22, "deletions": 114, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b42cff6bff5a7442358e730614540088d7b6b416/gcc%2Fconfig%2Fh8300%2Fh8300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b42cff6bff5a7442358e730614540088d7b6b416/gcc%2Fconfig%2Fh8300%2Fh8300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.md?ref=b42cff6bff5a7442358e730614540088d7b6b416", "patch": "@@ -1033,26 +1033,6 @@\n   \"\"\n   \"\")\n \n-(define_insn \"\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n-\t(and:HI (match_operand:HI 1 \"register_operand\" \"%0\")\n-\t\t(match_operand:HI 2 \"nonmemory_operand\" \"rn\")))]\n-  \"TARGET_H8300\"\n-  \"* return output_logical_op (HImode, AND, operands);\"\n-  [(set (attr \"length\")\n-\t(symbol_ref \"compute_logical_op_length (HImode, AND, operands)\"))\n-   (set_attr \"cc\" \"clobber\")])\n-\n-(define_insn \"\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"=r,r\")\n-\t(and:HI (match_operand:HI 1 \"register_operand\" \"%0,0\")\n-\t\t(match_operand:HI 2 \"nonmemory_operand\" \"r,n\")))]\n-  \"TARGET_H8300H || TARGET_H8300S\"\n-  \"* return output_logical_op (HImode, AND, operands);\"\n-  [(set (attr \"length\")\n-\t(symbol_ref \"compute_logical_op_length (HImode, AND, operands)\"))\n-   (set_attr \"cc\" \"set_znv,clobber\")])\n-\n (define_insn \"*andorhi3\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n \t(ior:HI (and:HI (match_operand:HI 2 \"register_operand\" \"r\")\n@@ -1079,26 +1059,6 @@\n   \"\"\n   \"\")\n \n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(and:SI (match_operand:SI 1 \"register_operand\" \"%0\")\n-\t\t(match_operand:SI 2 \"nonmemory_operand\" \"rn\")))]\n-  \"TARGET_H8300\"\n-  \"* return output_logical_op (SImode, AND, operands);\"\n-  [(set (attr \"length\")\n-\t(symbol_ref \"compute_logical_op_length (SImode, AND, operands)\"))\n-   (set_attr \"cc\" \"clobber\")])\n-\n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n-\t(and:SI (match_operand:SI 1 \"register_operand\" \"%0,0\")\n-\t\t(match_operand:SI 2 \"nonmemory_operand\" \"r,n\")))]\n-  \"TARGET_H8300H || TARGET_H8300S\"\n-  \"* return output_logical_op (SImode, AND, operands);\"\n-  [(set (attr \"length\")\n-\t(symbol_ref \"compute_logical_op_length (SImode, AND, operands)\"))\n-   (set_attr \"cc\" \"set_znv,clobber\")])\n-\n ;; ----------------------------------------------------------------------\n ;; OR INSTRUCTIONS\n ;; ----------------------------------------------------------------------\n@@ -1145,53 +1105,13 @@\n   \"\"\n   \"\")\n \n-(define_insn \"\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=r,r\")\n-\t(ior:HI (match_operand:HI 1 \"general_operand\" \"%0,0\")\n-\t\t(match_operand:HI 2 \"general_operand\" \"J,rn\")))]\n-  \"TARGET_H8300\"\n-  \"* return output_logical_op (HImode, IOR, operands);\"\n-  [(set (attr \"length\")\n-\t(symbol_ref \"compute_logical_op_length (HImode, IOR, operands)\"))\n-   (set_attr \"cc\" \"clobber,clobber\")])\n-\n-(define_insn \"\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=r,r,r\")\n-\t(ior:HI (match_operand:HI 1 \"general_operand\" \"%0,0,0\")\n-\t\t(match_operand:HI 2 \"general_operand\" \"J,r,n\")))]\n-  \"TARGET_H8300H || TARGET_H8300S\"\n-  \"* return output_logical_op (HImode, IOR, operands);\"\n-  [(set (attr \"length\")\n-\t(symbol_ref \"compute_logical_op_length (HImode, IOR, operands)\"))\n-   (set_attr \"cc\" \"clobber,set_znv,clobber\")])\n-\n (define_expand \"iorsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(ior:SI (match_operand:SI 1 \"register_operand\" \"\")\n \t\t(match_operand:SI 2 \"nonmemory_operand\" \"\")))]\n   \"\"\n   \"\")\n \n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n-\t(ior:SI (match_operand:SI 1 \"register_operand\" \"%0,0\")\n-\t\t(match_operand:SI 2 \"nonmemory_operand\" \"J,rn\")))]\n-  \"TARGET_H8300\"\n-  \"* return output_logical_op (SImode, IOR, operands);\"\n-  [(set (attr \"length\")\n-\t(symbol_ref \"compute_logical_op_length (SImode, IOR, operands)\"))\n-   (set_attr \"cc\" \"clobber,clobber\")])\n-\n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r,r,r\")\n-\t(ior:SI (match_operand:SI 1 \"register_operand\" \"%0,0,0\")\n-\t\t(match_operand:SI 2 \"nonmemory_operand\" \"J,r,n\")))]\n-  \"TARGET_H8300H || TARGET_H8300S\"\n-  \"* return output_logical_op (SImode, IOR, operands);\"\n-  [(set (attr \"length\")\n-\t(symbol_ref \"compute_logical_op_length (SImode, IOR, operands)\"))\n-   (set_attr \"cc\" \"clobber,set_znv,clobber\")])\n-\n ;; ----------------------------------------------------------------------\n ;; XOR INSTRUCTIONS\n ;; ----------------------------------------------------------------------\n@@ -1238,52 +1158,40 @@\n   \"\"\n   \"\")\n \n-(define_insn \"\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"=r,r\")\n-\t(xor:HI (match_operand:HI 1 \"register_operand\" \"%0,0\")\n-\t\t(match_operand:HI 2 \"nonmemory_operand\" \"J,rn\")))]\n-  \"TARGET_H8300\"\n-  \"* return output_logical_op (HImode, XOR, operands);\"\n-  [(set (attr \"length\")\n-\t(symbol_ref \"compute_logical_op_length (HImode, XOR, operands)\"))\n-   (set_attr \"cc\" \"clobber,clobber\")])\n-\n-(define_insn \"\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"=r,r,r\")\n-\t(xor:HI (match_operand:HI 1 \"register_operand\" \"%0,0,0\")\n-\t\t(match_operand:HI 2 \"nonmemory_operand\" \"J,r,n\")))]\n-  \"TARGET_H8300H || TARGET_H8300S\"\n-  \"* return output_logical_op (HImode, XOR, operands);\"\n-  [(set (attr \"length\")\n-\t(symbol_ref \"compute_logical_op_length (HImode, XOR, operands)\"))\n-   (set_attr \"cc\" \"clobber,set_znv,clobber\")])\n-\n (define_expand \"xorsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(xor:SI (match_operand:SI 1 \"register_operand\" \"\")\n \t\t(match_operand:SI 2 \"nonmemory_operand\" \"\")))]\n   \"\"\n   \"\")\n \n+;; ----------------------------------------------------------------------\n+;; {AND,IOR,XOR}{HI3,SI3} PATTERNS\n+;; ----------------------------------------------------------------------\n+\n (define_insn \"\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n-\t(xor:SI (match_operand:SI 1 \"register_operand\" \"%0,0\")\n-\t\t(match_operand:SI 2 \"nonmemory_operand\" \"J,rn\")))]\n-  \"TARGET_H8300\"\n-  \"* return output_logical_op (SImode, XOR, operands);\"\n+  [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n+\t(match_operator:HI 3 \"bit_operator\"\n+\t  [(match_operand:HI 1 \"register_operand\" \"%0\")\n+\t   (match_operand:HI 2 \"nonmemory_operand\" \"rn\")]))]\n+  \"\"\n+  \"* return output_logical_op (HImode, operands);\"\n   [(set (attr \"length\")\n-\t(symbol_ref \"compute_logical_op_length (SImode, XOR, operands)\"))\n-   (set_attr \"cc\" \"clobber,clobber\")])\n+\t(symbol_ref \"compute_logical_op_length (HImode, operands)\"))\n+   (set (attr \"cc\")\n+\t(symbol_ref \"compute_logical_op_cc (HImode, operands)\"))])\n \n (define_insn \"\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r,r,r\")\n-\t(xor:SI (match_operand:SI 1 \"register_operand\" \"%0,0,0\")\n-\t\t(match_operand:SI 2 \"nonmemory_operand\" \"J,r,n\")))]\n-  \"TARGET_H8300H || TARGET_H8300S\"\n-  \"* return output_logical_op (SImode, XOR, operands);\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(match_operator:SI 3 \"bit_operator\"\n+\t  [(match_operand:SI 1 \"register_operand\" \"%0\")\n+\t   (match_operand:SI 2 \"nonmemory_operand\" \"rn\")]))]\n+  \"\"\n+  \"* return output_logical_op (SImode, operands);\"\n   [(set (attr \"length\")\n-\t(symbol_ref \"compute_logical_op_length (SImode, XOR, operands)\"))\n-   (set_attr \"cc\" \"clobber,set_znv,clobber\")])\n+\t(symbol_ref \"compute_logical_op_length (SImode, operands)\"))\n+   (set (attr \"cc\")\n+\t(symbol_ref \"compute_logical_op_cc (SImode, operands)\"))])\n \f\n ;; ----------------------------------------------------------------------\n ;; NEGATION INSTRUCTIONS"}]}