{"sha": "7b1de3eb9ed3f8dde54732d88520292c5ad1157d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2IxZGUzZWI5ZWQzZjhkZGU1NDczMmQ4ODUyMDI5MmM1YWQxMTU3ZA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-08-05T12:34:00Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-08-05T14:16:58Z"}, "message": "libstdc++: Move attributes that follow requires-clauses [PR101782]\n\nAs explained in the PR, the grammar in the Concepts TS means that a [\ntoken following a requires-clause is parsed as part of the\nlogical-or-expression rather than the start of an attribute. That makes\nthe following ill-formed when using -fconcepts-ts:\n\n  template<typename T> requires foo<T> [[nodiscard]] int f(T);\n\nThis change moves all attributes that follow a requires-clause to the\nend of the function declarator.\n\nSigned-off-by: Jonathan Wakely <jwakely@redhat.com>\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/101782\n\t* include/bits/ranges_base.h (ranges::begin, ranges::end)\n\t(ranges::rbegin, ranges::rend, ranges::size, ranges::ssize)\n\t(ranges::empty, ranges::data): Move attribute to the end of\n\tthe declarator.\n\t* include/bits/stl_iterator.h (__gnu_cxx::__normal_iterator)\n\t(common_iterator): Likewise for non-member operator functions.\n\t* include/std/ranges (views::all, views::filter)\n\t(views::transform, views::take, views::take_while, views::drop)\n\t(views::drop_while, views::join, views::lazy_split)\n\t(views::split, views::counted, views::common, views::reverse)\n\t(views::elements): Likewise.\n\t* testsuite/std/ranges/access/101782.cc: New test.", "tree": {"sha": "50945c8bc786a899aeae7355e645b3d2cda1a32f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/50945c8bc786a899aeae7355e645b3d2cda1a32f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b1de3eb9ed3f8dde54732d88520292c5ad1157d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b1de3eb9ed3f8dde54732d88520292c5ad1157d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b1de3eb9ed3f8dde54732d88520292c5ad1157d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b1de3eb9ed3f8dde54732d88520292c5ad1157d/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72264a639729a5dcc21dbee304717ce22b338bfd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72264a639729a5dcc21dbee304717ce22b338bfd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72264a639729a5dcc21dbee304717ce22b338bfd"}], "stats": {"total": 63, "additions": 36, "deletions": 27}, "files": [{"sha": "1dac9680b4fe36192da63dd945d7eca3baab4b89", "filename": "libstdc++-v3/include/bits/ranges_base.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b1de3eb9ed3f8dde54732d88520292c5ad1157d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b1de3eb9ed3f8dde54732d88520292c5ad1157d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_base.h?ref=7b1de3eb9ed3f8dde54732d88520292c5ad1157d", "patch": "@@ -110,9 +110,9 @@ namespace ranges\n       template<__maybe_borrowed_range _Tp>\n \trequires is_array_v<remove_reference_t<_Tp>> || __member_begin<_Tp>\n \t  || __adl_begin<_Tp>\n-\t[[nodiscard]]\n \tconstexpr auto\n \toperator()(_Tp&& __t) const noexcept(_S_noexcept<_Tp&>())\n+\t[[nodiscard]]\n \t{\n \t  if constexpr (is_array_v<remove_reference_t<_Tp>>)\n \t    {\n@@ -162,9 +162,9 @@ namespace ranges\n       template<__maybe_borrowed_range _Tp>\n \trequires is_bounded_array_v<remove_reference_t<_Tp>>\n \t  || __member_end<_Tp> || __adl_end<_Tp>\n-\t[[nodiscard]]\n \tconstexpr auto\n \toperator()(_Tp&& __t) const noexcept(_S_noexcept<_Tp&>())\n+\t[[nodiscard]]\n \t{\n \t  if constexpr (is_bounded_array_v<remove_reference_t<_Tp>>)\n \t    {\n@@ -267,10 +267,10 @@ namespace ranges\n     public:\n       template<__maybe_borrowed_range _Tp>\n \trequires __member_rbegin<_Tp> || __adl_rbegin<_Tp> || __reversable<_Tp>\n-\t[[nodiscard]]\n \tconstexpr auto\n \toperator()(_Tp&& __t) const\n \tnoexcept(_S_noexcept<_Tp&>())\n+\t[[nodiscard]]\n \t{\n \t  if constexpr (__member_rbegin<_Tp>)\n \t    return __t.rbegin();\n@@ -326,10 +326,10 @@ namespace ranges\n     public:\n       template<__maybe_borrowed_range _Tp>\n \trequires __member_rend<_Tp> || __adl_rend<_Tp> || __reversable<_Tp>\n-\t[[nodiscard]]\n \tconstexpr auto\n \toperator()(_Tp&& __t) const\n \tnoexcept(_S_noexcept<_Tp&>())\n+\t[[nodiscard]]\n \t{\n \t  if constexpr (__member_rend<_Tp>)\n \t    return __t.rend();\n@@ -416,9 +416,9 @@ namespace ranges\n       template<typename _Tp>\n \trequires is_bounded_array_v<remove_reference_t<_Tp>>\n \t  || __member_size<_Tp> || __adl_size<_Tp> || __sentinel_size<_Tp>\n-\t[[nodiscard]]\n \tconstexpr auto\n \toperator()(_Tp&& __t) const noexcept(_S_noexcept<_Tp&>())\n+\t[[nodiscard]]\n \t{\n \t  if constexpr (is_bounded_array_v<remove_reference_t<_Tp>>)\n \t    return extent_v<remove_reference_t<_Tp>>;\n@@ -437,9 +437,9 @@ namespace ranges\n       // 3403. Domain of ranges::ssize(E) doesn't match ranges::size(E)\n       template<typename _Tp>\n \trequires requires (_Tp& __t) { _Size{}(__t); }\n-\t[[nodiscard]]\n \tconstexpr auto\n \toperator()(_Tp&& __t) const noexcept(noexcept(_Size{}(__t)))\n+\t[[nodiscard]]\n \t{\n \t  auto __size = _Size{}(__t);\n \t  using __size_type = decltype(__size);\n@@ -497,9 +497,9 @@ namespace ranges\n       template<typename _Tp>\n \trequires __member_empty<_Tp> || __size0_empty<_Tp>\n \t  || __eq_iter_empty<_Tp>\n-\t[[nodiscard]]\n \tconstexpr bool\n \toperator()(_Tp&& __t) const noexcept(_S_noexcept<_Tp&>())\n+\t[[nodiscard]]\n \t{\n \t  if constexpr (__member_empty<_Tp>)\n \t    return bool(__t.empty());\n@@ -539,9 +539,9 @@ namespace ranges\n     public:\n       template<__maybe_borrowed_range _Tp>\n \trequires __member_data<_Tp> || __begin_data<_Tp>\n-\t[[nodiscard]]\n \tconstexpr auto\n \toperator()(_Tp&& __t) const noexcept(_S_noexcept<_Tp>())\n+\t[[nodiscard]]\n \t{\n \t  if constexpr (__member_data<_Tp>)\n \t    return __t.data();"}, {"sha": "053ae41e9c388d6f41e0963ad0cc67d45b593aa7", "filename": "libstdc++-v3/include/bits/stl_iterator.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b1de3eb9ed3f8dde54732d88520292c5ad1157d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b1de3eb9ed3f8dde54732d88520292c5ad1157d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h?ref=7b1de3eb9ed3f8dde54732d88520292c5ad1157d", "patch": "@@ -1120,19 +1120,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _IteratorL, typename _IteratorR, typename _Container>\n     requires requires (_IteratorL __lhs, _IteratorR __rhs)\n     { { __lhs == __rhs } -> std::convertible_to<bool>; }\n-    [[nodiscard]]\n     constexpr bool\n     operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,\n \t       const __normal_iterator<_IteratorR, _Container>& __rhs)\n     noexcept(noexcept(__lhs.base() == __rhs.base()))\n+    [[nodiscard]]\n     { return __lhs.base() == __rhs.base(); }\n \n   template<typename _IteratorL, typename _IteratorR, typename _Container>\n-    [[nodiscard]]\n     constexpr std::__detail::__synth3way_t<_IteratorR, _IteratorL>\n     operator<=>(const __normal_iterator<_IteratorL, _Container>& __lhs,\n \t\tconst __normal_iterator<_IteratorR, _Container>& __rhs)\n     noexcept(noexcept(std::__detail::__synth3way(__lhs.base(), __rhs.base())))\n+    [[nodiscard]]\n     { return std::__detail::__synth3way(__lhs.base(), __rhs.base()); }\n #else\n    // Forward iterator requirements\n@@ -1984,10 +1984,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     template<typename _It2, sentinel_for<_It> _Sent2>\n       requires sentinel_for<_Sent, _It2>\n-      [[nodiscard]]\n       friend bool\n       operator==(const common_iterator& __x,\n \t\t const common_iterator<_It2, _Sent2>& __y)\n+      [[nodiscard]]\n       {\n \tswitch(__x._M_index << 2 | __y._M_index)\n \t  {\n@@ -2007,10 +2007,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     template<typename _It2, sentinel_for<_It> _Sent2>\n       requires sentinel_for<_Sent, _It2> && equality_comparable_with<_It, _It2>\n-      [[nodiscard]]\n       friend bool\n       operator==(const common_iterator& __x,\n \t\t const common_iterator<_It2, _Sent2>& __y)\n+      [[nodiscard]]\n       {\n \tswitch(__x._M_index << 2 | __y._M_index)\n \t  {\n@@ -2031,10 +2031,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     template<sized_sentinel_for<_It> _It2, sized_sentinel_for<_It> _Sent2>\n       requires sized_sentinel_for<_Sent, _It2>\n-      [[nodiscard]]\n       friend iter_difference_t<_It2>\n       operator-(const common_iterator& __x,\n \t\tconst common_iterator<_It2, _Sent2>& __y)\n+      [[nodiscard]]\n       {\n \tswitch(__x._M_index << 2 | __y._M_index)\n \t  {"}, {"sha": "71b7dc7d295336c0d5193fb9d5702942a515e830", "filename": "libstdc++-v3/include/std/ranges", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b1de3eb9ed3f8dde54732d88520292c5ad1157d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b1de3eb9ed3f8dde54732d88520292c5ad1157d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges?ref=7b1de3eb9ed3f8dde54732d88520292c5ad1157d", "patch": "@@ -1126,10 +1126,10 @@ namespace views::__adaptor\n \trequires view<decay_t<_Range>>\n \t  || __detail::__can_ref_view<_Range>\n \t  || __detail::__can_subrange<_Range>\n-\t[[nodiscard]]\n \tconstexpr auto\n \toperator()(_Range&& __r) const\n \tnoexcept(_S_noexcept<_Range>())\n+\t[[nodiscard]]\n \t{\n \t  if constexpr (view<decay_t<_Range>>)\n \t    return std::forward<_Range>(__r);\n@@ -1553,9 +1553,9 @@ namespace views::__adaptor\n     {\n       template<viewable_range _Range, typename _Pred>\n \trequires __detail::__can_filter_view<_Range, _Pred>\n-\t[[nodiscard]]\n \tconstexpr auto\n \toperator()(_Range&& __r, _Pred&& __p) const\n+\t[[nodiscard]]\n \t{\n \t  return filter_view(std::forward<_Range>(__r), std::forward<_Pred>(__p));\n \t}\n@@ -1931,9 +1931,9 @@ namespace views::__adaptor\n     {\n       template<viewable_range _Range, typename _Fp>\n \trequires __detail::__can_transform_view<_Range, _Fp>\n-\t[[nodiscard]]\n \tconstexpr auto\n \toperator()(_Range&& __r, _Fp&& __f) const\n+\t[[nodiscard]]\n \t{\n \t  return transform_view(std::forward<_Range>(__r), std::forward<_Fp>(__f));\n \t}\n@@ -2113,9 +2113,9 @@ namespace views::__adaptor\n     {\n       template<viewable_range _Range, typename _Tp>\n \trequires __detail::__can_take_view<_Range, _Tp>\n-\t[[nodiscard]]\n \tconstexpr auto\n \toperator()(_Range&& __r, _Tp&& __n) const\n+\t[[nodiscard]]\n \t{\n \t  return take_view(std::forward<_Range>(__r), std::forward<_Tp>(__n));\n \t}\n@@ -2241,9 +2241,9 @@ namespace views::__adaptor\n     {\n       template<viewable_range _Range, typename _Pred>\n \trequires __detail::__can_take_while_view<_Range, _Pred>\n-\t[[nodiscard]]\n \tconstexpr auto\n \toperator()(_Range&& __r, _Pred&& __p) const\n+\t[[nodiscard]]\n \t{\n \t  return take_while_view(std::forward<_Range>(__r), std::forward<_Pred>(__p));\n \t}\n@@ -2362,9 +2362,9 @@ namespace views::__adaptor\n     {\n       template<viewable_range _Range, typename _Tp>\n \trequires __detail::__can_drop_view<_Range, _Tp>\n-\t[[nodiscard]]\n \tconstexpr auto\n \toperator()(_Range&& __r, _Tp&& __n) const\n+\t[[nodiscard]]\n \t{\n \t  return drop_view(std::forward<_Range>(__r), std::forward<_Tp>(__n));\n \t}\n@@ -2451,9 +2451,9 @@ namespace views::__adaptor\n     {\n       template<viewable_range _Range, typename _Pred>\n \trequires __detail::__can_drop_while_view<_Range, _Pred>\n-\t[[nodiscard]]\n \tconstexpr auto\n \toperator()(_Range&& __r, _Pred&& __p) const\n+\t[[nodiscard]]\n \t{\n \t  return drop_while_view(std::forward<_Range>(__r),\n \t\t\t\t std::forward<_Pred>(__p));\n@@ -2814,9 +2814,9 @@ namespace views::__adaptor\n     {\n       template<viewable_range _Range>\n \trequires __detail::__can_join_view<_Range>\n-\t[[nodiscard]]\n \tconstexpr auto\n \toperator()(_Range&& __r) const\n+\t[[nodiscard]]\n \t{\n \t  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t  // 3474. Nesting join_views is broken because of CTAD\n@@ -3266,9 +3266,9 @@ namespace views::__adaptor\n     {\n       template<viewable_range _Range, typename _Pattern>\n \trequires __detail::__can_lazy_split_view<_Range, _Pattern>\n-\t[[nodiscard]]\n \tconstexpr auto\n \toperator()(_Range&& __r, _Pattern&& __f) const\n+\t[[nodiscard]]\n \t{\n \t  return lazy_split_view(std::forward<_Range>(__r), std::forward<_Pattern>(__f));\n \t}\n@@ -3475,9 +3475,9 @@ namespace views::__adaptor\n     {\n       template<viewable_range _Range, typename _Pattern>\n \trequires __detail::__can_split_view<_Range, _Pattern>\n-\t[[nodiscard]]\n \tconstexpr auto\n \toperator()(_Range&& __r, _Pattern&& __f) const\n+\t[[nodiscard]]\n \t{\n \t  return split_view(std::forward<_Range>(__r), std::forward<_Pattern>(__f));\n \t}\n@@ -3497,9 +3497,9 @@ namespace views::__adaptor\n     struct _Counted\n     {\n       template<input_or_output_iterator _Iter>\n-      [[nodiscard]]\n       constexpr auto\n       operator()(_Iter __i, iter_difference_t<_Iter> __n) const\n+      [[nodiscard]]\n       {\n \tif constexpr (random_access_iterator<_Iter>)\n \t  return subrange(__i, __i + __n);\n@@ -3619,9 +3619,9 @@ namespace views::__adaptor\n       template<viewable_range _Range>\n \trequires __detail::__already_common<_Range>\n \t  || __detail::__can_common_view<_Range>\n-\t[[nodiscard]]\n \tconstexpr auto\n \toperator()(_Range&& __r) const\n+\t[[nodiscard]]\n \t{\n \t  if constexpr (__detail::__already_common<_Range>)\n \t    return views::all(std::forward<_Range>(__r));\n@@ -3742,9 +3742,9 @@ namespace views::__adaptor\n \trequires __detail::__is_reverse_view<remove_cvref_t<_Range>>\n \t  || __detail::__is_reversible_subrange<remove_cvref_t<_Range>>\n \t  || __detail::__can_reverse_view<_Range>\n-\t[[nodiscard]]\n \tconstexpr auto\n \toperator()(_Range&& __r) const\n+\t[[nodiscard]]\n \t{\n \t  using _Tp = remove_cvref_t<_Range>;\n \t  if constexpr (__detail::__is_reverse_view<_Tp>)\n@@ -4141,9 +4141,9 @@ namespace views::__adaptor\n       {\n \ttemplate<viewable_range _Range>\n \t  requires __detail::__can_elements_view<_Nm, _Range>\n-\t  [[nodiscard]]\n \t  constexpr auto\n \t  operator()(_Range&& __r) const\n+\t  [[nodiscard]]\n \t  {\n \t    return elements_view<all_t<_Range>, _Nm>{std::forward<_Range>(__r)};\n \t  }"}, {"sha": "abb0c8dab0f1394c22c34507bdc2bb74b3b7807d", "filename": "libstdc++-v3/testsuite/std/ranges/access/101782.cc", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b1de3eb9ed3f8dde54732d88520292c5ad1157d/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2F101782.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b1de3eb9ed3f8dde54732d88520292c5ad1157d/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2F101782.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2F101782.cc?ref=7b1de3eb9ed3f8dde54732d88520292c5ad1157d", "patch": "@@ -0,0 +1,9 @@\n+// { dg-options \"-std=gnu++20 -fconcepts-ts\" }\n+// { dg-do compile { target c++20 } }\n+\n+// PR testsuite/101782\n+// attribute-specifier-seq cannot follow requires-clause with -fconcepts-ts\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <ranges>"}]}