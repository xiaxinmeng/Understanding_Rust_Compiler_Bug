{"sha": "6384eff56dba1fac071c1b525f7e49cf03f2737f", "node_id": "C_kwDOANBUbNoAKDYzODRlZmY1NmRiYTFmYWMwNzFjMWI1MjVmN2U0OWNmMDNmMjczN2Y", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2022-02-20T19:02:23Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2022-02-20T22:37:32Z"}, "message": "d: Merge upstream dmd cb49e99f8, druntime 55528bd1, phobos 1a3e80ec2.\n\nD front-end changes:\n\n    - Import dmd v2.099.0-beta.1.\n    - It's now an error to use `alias this' for partial assignment.\n    - The `delete' keyword has been removed from the language.\n    - Using `this' and `super' as types has been removed from the\n      language, the parser no longer specially handles this wrong code\n      with an informative error.\n\nD Runtime changes:\n\n    - Import druntime v2.099.0-beta.1.\n\nPhobos changes:\n\n    - Import phobos v2.099.0-beta.1.\n\ngcc/d/ChangeLog:\n\n\t* dmd/MERGE: Merge upstream dmd cb49e99f8.\n\t* dmd/VERSION: Update version to v2.099.0-beta.1.\n\t* decl.cc (layout_class_initializer): Update call to NewExp::create.\n\t* expr.cc (ExprVisitor::visit (DeleteExp *)): Remove handling of\n\tdeleting arrays and pointers.\n\t(ExprVisitor::visit (DotVarExp *)): Convert complex types to the\n\tfront-end library type representing them.\n\t(ExprVisitor::visit (StringExp *)): Use getCodeUnit instead of charAt\n\tto get the value of each index in a string expression.\n\t* runtime.def (DELMEMORY): Remove.\n\t(DELARRAYT): Remove.\n\t* types.cc (TypeVisitor::visit (TypeEnum *)): Handle anonymous enums.\n\nlibphobos/ChangeLog:\n\n\t* libdruntime/MERGE: Merge upstream druntime 55528bd1.\n\t* src/MERGE: Merge upstream phobos 1a3e80ec2.\n\t* testsuite/libphobos.hash/test_hash.d: Update.\n\t* testsuite/libphobos.betterc/test19933.d: New test.", "tree": {"sha": "7263a4a6ec603a81f6df660f4f6b19a4607513fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7263a4a6ec603a81f6df660f4f6b19a4607513fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6384eff56dba1fac071c1b525f7e49cf03f2737f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6384eff56dba1fac071c1b525f7e49cf03f2737f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6384eff56dba1fac071c1b525f7e49cf03f2737f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6384eff56dba1fac071c1b525f7e49cf03f2737f/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e49508ac6b36adb8a2056c5a1fb6e0178de2439d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e49508ac6b36adb8a2056c5a1fb6e0178de2439d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e49508ac6b36adb8a2056c5a1fb6e0178de2439d"}], "stats": {"total": 10480, "additions": 5541, "deletions": 4939}, "files": [{"sha": "7ec0caf1bc05e918d1717097e40b049984328861", "filename": "gcc/d/decl.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdecl.cc?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -2235,7 +2235,7 @@ aggregate_initializer_decl (AggregateDeclaration *decl)\n tree\n layout_class_initializer (ClassDeclaration *cd)\n {\n-  NewExp *ne = NewExp::create (cd->loc, NULL, NULL, cd->type, NULL);\n+  NewExp *ne = NewExp::create (cd->loc, NULL, cd->type, NULL);\n   ne->type = cd->type;\n \n   Expression *e = ne->ctfeInterpret ();"}, {"sha": "b92f3760e88db2c1bc10e0bea7bef3a2048bb3db", "filename": "gcc/d/dmd/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2FMERGE?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -1,4 +1,4 @@\n-52844d4b1e9d6714bfd2e535f25a72074a046209\n+cb49e99f80e8111c71035b88fe47fe7d855c300f\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/dmd repository."}, {"sha": "12042fff7ecfba26a773be3932d8d10b68264a57", "filename": "gcc/d/dmd/VERSION", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2FVERSION", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2FVERSION", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2FVERSION?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -1 +1 @@\n-v2.098.1\n+v2.099.0-beta.1"}, {"sha": "ac2c80ef64e427e4ecb9736dd191ff16d634826a", "filename": "gcc/d/dmd/apply.d", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Fapply.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Fapply.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fapply.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -110,13 +110,13 @@ public:\n     override void visit(NewExp e)\n     {\n         //printf(\"NewExp::apply(): %s\\n\", toChars());\n-        doCond(e.thisexp) || doCond(e.newargs) || doCond(e.arguments) || applyTo(e);\n+        doCond(e.thisexp) || doCond(e.arguments) || applyTo(e);\n     }\n \n     override void visit(NewAnonClassExp e)\n     {\n         //printf(\"NewAnonClassExp::apply(): %s\\n\", toChars());\n-        doCond(e.thisexp) || doCond(e.newargs) || doCond(e.arguments) || applyTo(e);\n+        doCond(e.thisexp) || doCond(e.arguments) || applyTo(e);\n     }\n \n     override void visit(TypeidExp e)"}, {"sha": "745e552a8e2bb3e181ddad23a564d10105861844", "filename": "gcc/d/dmd/canthrow.d", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Fcanthrow.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Fcanthrow.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fcanthrow.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -114,9 +114,7 @@ extern (C++) /* CT */ BE canThrow(Expression e, FuncDeclaration func, bool mustN\n                         import dmd.id : Id;\n \n                         auto sd = ts.sym;\n-                        if (sd.dtor && ce.f.ident == Id._d_delstruct)\n-                            checkFuncThrows(ce, sd.dtor);\n-                        else if (sd.postblit &&\n+                        if (sd.postblit &&\n                             (ce.f.ident == Id._d_arrayctor || ce.f.ident == Id._d_arraysetctor))\n                         {\n                             checkFuncThrows(ce, sd.postblit);\n@@ -175,14 +173,6 @@ extern (C++) /* CT */ BE canThrow(Expression e, FuncDeclaration func, bool mustN\n                 ad = tb.isTypeClass().sym;\n                 break;\n \n-            case Tpointer:\n-            case Tarray:\n-                auto ts = tb.nextOf().baseElemOf().isTypeStruct();\n-                if (!ts)\n-                    return;\n-                ad = ts.sym;\n-                break;\n-\n             default:\n                 assert(0);  // error should have been detected by semantic()\n             }"}, {"sha": "a6dbd8e281a86daaa4822d89e3e7f1a8eabdcce6", "filename": "gcc/d/dmd/clone.d", "status": "modified", "additions": 18, "deletions": 19, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Fclone.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Fclone.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fclone.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -521,9 +521,9 @@ FuncDeclaration buildOpEquals(StructDeclaration sd, Scope* sc)\n \n /******************************************\n  * Build __xopEquals for TypeInfo_Struct\n- *      static bool __xopEquals(ref const S p, ref const S q)\n+ *      bool __xopEquals(ref const S p) const\n  *      {\n- *          return p == q;\n+ *          return this == p;\n  *      }\n  *\n  * This is called by TypeInfo.equals(p1, p2). If the struct does not support\n@@ -570,14 +570,15 @@ FuncDeclaration buildXopEquals(StructDeclaration sd, Scope* sc)\n     Loc declLoc; // loc is unnecessary so __xopEquals is never called directly\n     Loc loc; // loc is unnecessary so errors are gagged\n     auto parameters = new Parameters();\n-    parameters.push(new Parameter(STC.ref_ | STC.const_, sd.type, Id.p, null, null))\n-              .push(new Parameter(STC.ref_ | STC.const_, sd.type, Id.q, null, null));\n-    auto tf = new TypeFunction(ParameterList(parameters), Type.tbool, LINK.d);\n+    parameters.push(new Parameter(STC.ref_ | STC.const_, sd.type, Id.p, null, null));\n+    auto tf = new TypeFunction(ParameterList(parameters), Type.tbool, LINK.d, STC.const_);\n+    tf = tf.addSTC(STC.const_).toTypeFunction();\n     Identifier id = Id.xopEquals;\n-    auto fop = new FuncDeclaration(declLoc, Loc.initial, id, STC.static_, tf);\n+    auto fop = new FuncDeclaration(declLoc, Loc.initial, id, 0, tf);\n     fop.generated = true;\n-    Expression e1 = new IdentifierExp(loc, Id.p);\n-    Expression e2 = new IdentifierExp(loc, Id.q);\n+    fop.parent = sd;\n+    Expression e1 = new IdentifierExp(loc, Id.This);\n+    Expression e2 = new IdentifierExp(loc, Id.p);\n     Expression e = new EqualExp(EXP.equal, loc, e1, e2);\n     fop.fbody = new ReturnStatement(loc, e);\n     uint errors = global.startGagging(); // Do not report errors\n@@ -594,9 +595,9 @@ FuncDeclaration buildXopEquals(StructDeclaration sd, Scope* sc)\n \n /******************************************\n  * Build __xopCmp for TypeInfo_Struct\n- *      static bool __xopCmp(ref const S p, ref const S q)\n+ *      int __xopCmp(ref const S p) const\n  *      {\n- *          return p.opCmp(q);\n+ *          return this.opCmp(p);\n  *      }\n  *\n  * This is called by TypeInfo.compare(p1, p2). If the struct does not support\n@@ -691,17 +692,15 @@ FuncDeclaration buildXopCmp(StructDeclaration sd, Scope* sc)\n     Loc loc; // loc is unnecessary so errors are gagged\n     auto parameters = new Parameters();\n     parameters.push(new Parameter(STC.ref_ | STC.const_, sd.type, Id.p, null, null));\n-    parameters.push(new Parameter(STC.ref_ | STC.const_, sd.type, Id.q, null, null));\n-    auto tf = new TypeFunction(ParameterList(parameters), Type.tint32, LINK.d);\n+    auto tf = new TypeFunction(ParameterList(parameters), Type.tint32, LINK.d, STC.const_);\n+    tf = tf.addSTC(STC.const_).toTypeFunction();\n     Identifier id = Id.xopCmp;\n-    auto fop = new FuncDeclaration(declLoc, Loc.initial, id, STC.static_, tf);\n+    auto fop = new FuncDeclaration(declLoc, Loc.initial, id, 0, tf);\n     fop.generated = true;\n-    Expression e1 = new IdentifierExp(loc, Id.p);\n-    Expression e2 = new IdentifierExp(loc, Id.q);\n-    version (IN_GCC)\n-        Expression e = new CallExp(loc, new DotIdExp(loc, e1, Id.cmp), e2);\n-    else\n-        Expression e = new CallExp(loc, new DotIdExp(loc, e2, Id.cmp), e1);\n+    fop.parent = sd;\n+    Expression e1 = new IdentifierExp(loc, Id.This);\n+    Expression e2 = new IdentifierExp(loc, Id.p);\n+    Expression e = new CallExp(loc, new DotIdExp(loc, e1, Id.cmp), e2);\n     fop.fbody = new ReturnStatement(loc, e);\n     uint errors = global.startGagging(); // Do not report errors\n     Scope* sc2 = sc.push();"}, {"sha": "7bc890f9ae229128f106037dab1cd4c17fa3e516", "filename": "gcc/d/dmd/constfold.d", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Fconstfold.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Fconstfold.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fconstfold.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -827,9 +827,9 @@ UnionExp Equal(EXP op, const ref Loc loc, Type type, Expression e1, Expression e\n         else\n         {\n             cmp = 1; // if dim1 winds up being 0\n-            for (size_t i = 0; i < dim1; i++)\n+            foreach (i; 0 .. dim1)\n             {\n-                uinteger_t c = es1.charAt(i);\n+                uinteger_t c = es1.getCodeUnit(i);\n                 auto ee2 = es2[i];\n                 if (ee2.isConst() != 1)\n                 {\n@@ -1247,7 +1247,7 @@ UnionExp Index(Type type, Expression e1, Expression e2)\n         }\n         else\n         {\n-            emplaceExp!(IntegerExp)(&ue, loc, es1.charAt(i), type);\n+            emplaceExp!(IntegerExp)(&ue, loc, es1.getCodeUnit(cast(size_t) i), type);\n         }\n     }\n     else if (e1.type.toBasetype().ty == Tsarray && e2.op == EXP.int64)"}, {"sha": "0fe645906b7abcbe98f0e19547f01b4af03d5145", "filename": "gcc/d/dmd/cparse.d", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Fcparse.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Fcparse.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fcparse.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -197,6 +197,7 @@ final class CParser(AST) : Parser!AST\n             }\n             break;\n \n+        case TOK.charLiteral:\n         case TOK.int32Literal:\n         case TOK.uns32Literal:\n         case TOK.int64Literal:\n@@ -264,6 +265,7 @@ final class CParser(AST) : Parser!AST\n         case TOK.const_:\n         case TOK.volatile:\n         case TOK.restrict:\n+        case TOK.__stdcall:\n \n         // alignment-specifier\n         case TOK._Alignas:\n@@ -635,6 +637,7 @@ final class CParser(AST) : Parser!AST\n             nextToken();\n             break;\n \n+        case TOK.charLiteral:\n         case TOK.int32Literal:\n             e = new AST.IntegerExp(loc, token.intvalue, AST.Type.tint32);\n             nextToken();\n@@ -1585,7 +1588,7 @@ final class CParser(AST) : Parser!AST\n         if (tspec && specifier.mod & MOD.xconst)\n         {\n             tspec = toConst(tspec);\n-            specifier.mod = MOD.xnone;          // 'used' it\n+            specifier.mod &= ~MOD.xnone;          // 'used' it\n         }\n \n         bool first = true;\n@@ -1708,7 +1711,7 @@ final class CParser(AST) : Parser!AST\n                         symbols.push(stag);\n                         if (tt.tok == TOK.enum_)\n                         {\n-                            if (!tt.members)\n+                            if (!stag.members)\n                                 error(tt.loc, \"`enum %s` has no members\", stag.toChars());\n                             isalias = false;\n                             s = new AST.AliasDeclaration(token.loc, id, stag);\n@@ -1842,8 +1845,8 @@ final class CParser(AST) : Parser!AST\n             /* Since there were declarations, the parameter-list must have been\n              * an identifier-list.\n              */\n+            ft.parameterList.hasIdentifierList = true;        // semantic needs to know to adjust parameter types\n             auto pl = ft.parameterList;\n-            pl.hasIdentifierList = true;        // semantic needs to know to adjust parameter types\n             if (pl.varargs != AST.VarArg.none && pl.length)\n                 error(\"function identifier-list cannot end with `...`\");\n             ft.parameterList.varargs = AST.VarArg.variadic;     // but C11 allows extra arguments\n@@ -2071,6 +2074,7 @@ final class CParser(AST) : Parser!AST\n                 case TOK.const_:     modx = MOD.xconst;     break;\n                 case TOK.volatile:   modx = MOD.xvolatile;  break;\n                 case TOK.restrict:   modx = MOD.xrestrict;  break;\n+                case TOK.__stdcall:  modx = MOD.x__stdcall; break;\n \n                 // Type specifiers\n                 case TOK.char_:      tkwx = TKW.xchar;      break;\n@@ -2409,6 +2413,13 @@ final class CParser(AST) : Parser!AST\n                      *       T ((*fp))();\n                      */\n                     nextToken();\n+\n+                    if (token.value == TOK.__stdcall) // T (__stdcall*fp)();\n+                    {\n+                        specifier.mod |= MOD.x__stdcall;\n+                        nextToken();\n+                    }\n+\n                     ts = parseDecl(t);\n                     check(TOK.rightParenthesis);\n                     break;\n@@ -2544,7 +2555,8 @@ final class CParser(AST) : Parser!AST\n                         this.symbols = null;\n \n                         auto parameterList = cparseParameterList();\n-                        AST.Type tf = new AST.TypeFunction(parameterList, t, linkage, 0);\n+                        const lkg = specifier.mod & MOD.x__stdcall ? LINK.windows : linkage;\n+                        AST.Type tf = new AST.TypeFunction(parameterList, t, lkg, 0);\n     //                  tf = tf.addSTC(storageClass);  // TODO\n                         insertTx(ts, tf, t);  // ts -> ... -> tf -> t\n \n@@ -2612,6 +2624,7 @@ final class CParser(AST) : Parser!AST\n      *    restrict\n      *    volatile\n      *    _Atomic\n+     *    __stdcall\n      */\n     MOD cparseTypeQualifierList()\n     {\n@@ -2624,6 +2637,7 @@ final class CParser(AST) : Parser!AST\n                 case TOK.volatile:   mod |= MOD.xvolatile;  break;\n                 case TOK.restrict:   mod |= MOD.xrestrict;  break;\n                 case TOK._Atomic:    mod |= MOD.x_Atomic;   break;\n+                case TOK.__stdcall:  mod |= MOD.x__stdcall; break;\n \n                 default:\n                     return mod;\n@@ -3708,6 +3722,7 @@ final class CParser(AST) : Parser!AST\n                 case TOK.const_:\n                 case TOK.volatile:\n                 case TOK.restrict:\n+                case TOK.__stdcall:\n                     t = peek(t);\n                     any = true;\n                     continue;\n@@ -3948,6 +3963,7 @@ final class CParser(AST) : Parser!AST\n                 case TOK.restrict:\n                 case TOK.volatile:\n                 case TOK._Atomic:\n+                case TOK.__stdcall:\n                     t = peek(t);\n                     continue;\n \n@@ -4000,6 +4016,7 @@ final class CParser(AST) : Parser!AST\n                 case TOK.const_:\n                 case TOK.restrict:\n                 case TOK.volatile:\n+                case TOK.__stdcall:\n \n                 // Type Specifiers\n                 case TOK.char_:\n@@ -4202,6 +4219,7 @@ final class CParser(AST) : Parser!AST\n         switch (t.value)\n         {\n             case TOK.identifier:\n+            case TOK.charLiteral:\n             case TOK.int32Literal:\n             case TOK.uns32Literal:\n             case TOK.int64Literal:\n@@ -4283,6 +4301,7 @@ final class CParser(AST) : Parser!AST\n         xvolatile = 2,\n         xrestrict = 4,\n         x_Atomic  = 8,\n+        x__stdcall = 0x10, // Windows linkage extension\n     }\n \n     /**********************************"}, {"sha": "9bc453de18927f9f51da9cc532ca0e3e01eae42d", "filename": "gcc/d/dmd/ctfeexpr.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Fctfeexpr.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Fctfeexpr.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fctfeexpr.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -1565,7 +1565,7 @@ Expression ctfeIndex(UnionExp* pue, const ref Loc loc, Type type, Expression e1,\n             error(loc, \"string index %llu is out of bounds `[0 .. %llu]`\", indx, cast(ulong)es1.len);\n             return CTFEExp.cantexp;\n         }\n-        emplaceExp!IntegerExp(pue, loc, es1.charAt(indx), type);\n+        emplaceExp!IntegerExp(pue, loc, es1.getCodeUnit(cast(size_t) indx), type);\n         return pue.exp();\n     }\n "}, {"sha": "f1afa76e53b0f8b1b5ce5230f2a140d563acc37b", "filename": "gcc/d/dmd/dcast.d", "status": "modified", "additions": 2124, "deletions": 2143, "changes": 4267, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Fdcast.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Fdcast.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdcast.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f"}, {"sha": "cdf9355e94cc3fe6e1f86dc06966fa9ef927cfa3", "filename": "gcc/d/dmd/declaration.d", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Fdeclaration.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Fdeclaration.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdeclaration.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -1064,9 +1064,8 @@ extern (C++) class VarDeclaration : Declaration\n     // Both these mean the var is not rebindable once assigned,\n     // and the destructor gets run when it goes out of scope\n     bool onstack;                   // it is a class that was allocated on the stack\n-    bool mynew;                     // it is a class new'd with custom operator new\n \n-    byte canassign;                  // it can be assigned to\n+    byte canassign;                 // it can be assigned to\n     bool overlapped;                // if it is a field and has overlapping\n     bool overlapUnsafe;             // if it is an overlapping field and the overlaps are unsafe\n     bool doNotInferScope;           // do not infer 'scope' for this variable\n@@ -1452,7 +1451,7 @@ extern (C++) class VarDeclaration : Declaration\n                 //if (cd.isInterfaceDeclaration())\n                 //    error(\"interface `%s` cannot be scope\", cd.toChars());\n \n-                if (mynew || onstack) // if any destructors\n+                if (onstack) // if any destructors\n                 {\n                     // delete'ing C++ classes crashes (and delete is deprecated anyway)\n                     if (cd.classKind == ClassKind.cpp)"}, {"sha": "e30acb41b2a71ea99c109cb811575f9c4d4e2c1b", "filename": "gcc/d/dmd/declaration.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Fdeclaration.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Fdeclaration.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdeclaration.h?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -248,7 +248,6 @@ class VarDeclaration : public Declaration\n     bool isowner;               // this is an Owner, despite it being `scope`\n     bool setInCtorOnly;         // field can only be set in a constructor, as it is const or immutable\n     bool onstack;               // it is a class that was allocated on the stack\n-    bool mynew;                 // it is a class new'd with custom operator new\n     char canassign;             // it can be assigned to\n     bool overlapped;            // if it is a field and has overlapping\n     bool overlapUnsafe;         // if it is an overlapping field and the overlaps are unsafe"}, {"sha": "6c3454daf10c79622dcea3e5605cd369e0954c0e", "filename": "gcc/d/dmd/dinterpret.d", "status": "modified", "additions": 15, "deletions": 91, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Fdinterpret.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Fdinterpret.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdinterpret.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -3820,6 +3820,21 @@ public:\n \n             payload = &(*sle.elements)[fieldi];\n             oldval = *payload;\n+            if (auto ival = newval.isIntegerExp())\n+            {\n+                if (auto bf = v.isBitFieldDeclaration())\n+                {\n+                    sinteger_t value = ival.toInteger();\n+                    if (bf.type.isunsigned())\n+                        value &= (1L << bf.fieldWidth) - 1; // zero extra bits\n+                    else\n+                    {   // sign extend extra bits\n+                        value = value << (64 - bf.fieldWidth);\n+                        value = value >> (64 - bf.fieldWidth);\n+                    }\n+                    ival.setInteger(value);\n+                }\n+            }\n         }\n         else if (auto ie = e1.isIndexExp())\n         {\n@@ -4851,47 +4866,6 @@ public:\n                 result = interpret(ce, istate);\n                 return;\n             }\n-            else if (fd.ident == Id._d_delstruct)\n-            {\n-                // Only interpret the dtor and the argument.\n-                assert(e.arguments.dim == 1);\n-\n-                Type tb = (*e.arguments)[0].type.toBasetype();\n-                auto ts = tb.nextOf().baseElemOf().isTypeStruct();\n-                if (ts)\n-                {\n-                    result = interpretRegion((*e.arguments)[0], istate);\n-                    if (exceptionOrCant(result))\n-                        return;\n-\n-                    if (result.op == EXP.null_)\n-                    {\n-                        result = CTFEExp.voidexp;\n-                        return;\n-                    }\n-\n-                    if (result.op != EXP.address ||\n-                        (cast(AddrExp)result).e1.op != EXP.structLiteral)\n-                    {\n-                        e.error(\"`delete` on invalid struct pointer `%s`\", result.toChars());\n-                        result = CTFEExp.cantexp;\n-                        return;\n-                    }\n-\n-                    auto sd = ts.sym;\n-                    if (sd.dtor)\n-                    {\n-                        auto sle = cast(StructLiteralExp)(cast(AddrExp)result).e1;\n-                        result = interpretFunction(pue, sd.dtor, istate, null, sle);\n-                        if (exceptionOrCant(result))\n-                            return;\n-\n-                        result = CTFEExp.voidexp;\n-                    }\n-                }\n-\n-                return;\n-            }\n         }\n         else if (auto soe = ecall.isSymOffExp())\n         {\n@@ -5835,56 +5809,6 @@ public:\n \n             break;\n \n-        case Tpointer:\n-            tb = (cast(TypePointer)tb).next.toBasetype();\n-            if (tb.ty == Tstruct)\n-            {\n-                if (result.op != EXP.address ||\n-                    (cast(AddrExp)result).e1.op != EXP.structLiteral)\n-                {\n-                    e.error(\"`delete` on invalid struct pointer `%s`\", result.toChars());\n-                    result = CTFEExp.cantexp;\n-                    return;\n-                }\n-\n-                auto sd = (cast(TypeStruct)tb).sym;\n-                auto sle = cast(StructLiteralExp)(cast(AddrExp)result).e1;\n-\n-                if (sd.dtor)\n-                {\n-                    result = interpretFunction(pue, sd.dtor, istate, null, sle);\n-                    if (exceptionOrCant(result))\n-                        return;\n-                }\n-            }\n-            break;\n-\n-        case Tarray:\n-            auto tv = tb.nextOf().baseElemOf();\n-            if (tv.ty == Tstruct)\n-            {\n-                if (result.op != EXP.arrayLiteral)\n-                {\n-                    e.error(\"`delete` on invalid struct array `%s`\", result.toChars());\n-                    result = CTFEExp.cantexp;\n-                    return;\n-                }\n-\n-                auto sd = (cast(TypeStruct)tv).sym;\n-\n-                if (sd.dtor)\n-                {\n-                    auto ale = cast(ArrayLiteralExp)result;\n-                    foreach (el; *ale.elements)\n-                    {\n-                        result = interpretFunction(pue, sd.dtor, istate, null, el);\n-                        if (exceptionOrCant(result))\n-                            return;\n-                    }\n-                }\n-            }\n-            break;\n-\n         default:\n             assert(0);\n         }"}, {"sha": "ad305f966d42a695d4c924f9fbb3e463d13f1649", "filename": "gcc/d/dmd/dmangle.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Fdmangle.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Fdmangle.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdmangle.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -726,7 +726,8 @@ public:\n     extern (D) static const(char)[] externallyMangledIdentifier(Declaration d)\n     {\n         const par = d.toParent(); //toParent() skips over mixin templates\n-        if (!par || par.isModule() || d.linkage == LINK.cpp)\n+        if (!par || par.isModule() || d.linkage == LINK.cpp ||\n+            (d.linkage == LINK.c && d.isCsymbol() && d.isFuncDeclaration()))\n         {\n             if (d.linkage != LINK.d && d.localNum)\n                 d.error(\"the same declaration cannot be in multiple scopes with non-D linkage\");"}, {"sha": "84e29fe1023a2a41aff1fceadc71d78c0dff0073", "filename": "gcc/d/dmd/dmodule.d", "status": "modified", "additions": 46, "deletions": 32, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Fdmodule.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Fdmodule.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdmodule.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -524,17 +524,8 @@ extern (C++) final class Module : Package\n             buf.printf(\"%s\\t(%s)\", ident.toChars(), m.srcfile.toChars());\n             message(\"import    %s\", buf.peekChars());\n         }\n-        m = m.parse();\n+        if((m = m.parse()) is null) return null;\n \n-        // Call onImport here because if the module is going to be compiled then we\n-        // need to determine it early because it affects semantic analysis. This is\n-        // being done after parsing the module so the full module name can be taken\n-        // from whatever was declared in the file.\n-        if (!m.isRoot() && Compiler.onImport(m))\n-        {\n-            m.importedFrom = m;\n-            assert(m.isRoot());\n-        }\n         return m;\n     }\n \n@@ -727,7 +718,7 @@ extern (C++) final class Module : Package\n             if (buf.length & 3)\n             {\n                 error(\"odd length of UTF-32 char source %llu\", cast(ulong) buf.length);\n-                fatal();\n+                return null;\n             }\n \n             const (uint)[] eBuf = cast(const(uint)[])buf;\n@@ -743,7 +734,7 @@ extern (C++) final class Module : Package\n                     if (u > 0x10FFFF)\n                     {\n                         error(\"UTF-32 value %08x greater than 0x10FFFF\", u);\n-                        fatal();\n+                        return null;\n                     }\n                     dbuf.writeUTF8(u);\n                 }\n@@ -773,7 +764,7 @@ extern (C++) final class Module : Package\n             if (buf.length & 1)\n             {\n                 error(\"odd length of UTF-16 char source %llu\", cast(ulong) buf.length);\n-                fatal();\n+                return null;\n             }\n \n             const (ushort)[] eBuf = cast(const(ushort)[])buf;\n@@ -793,26 +784,26 @@ extern (C++) final class Module : Package\n                         if (i >= eBuf.length)\n                         {\n                             error(\"surrogate UTF-16 high value %04x at end of file\", u);\n-                            fatal();\n+                            return null;\n                         }\n                         const u2 = readNext(&eBuf[i]);\n                         if (u2 < 0xDC00 || 0xE000 <= u2)\n                         {\n                             error(\"surrogate UTF-16 low value %04x out of range\", u2);\n-                            fatal();\n+                            return null;\n                         }\n                         u = (u - 0xD7C0) << 10;\n                         u |= (u2 - 0xDC00);\n                     }\n                     else if (u >= 0xDC00 && u <= 0xDFFF)\n                     {\n                         error(\"unpaired surrogate UTF-16 value %04x\", u);\n-                        fatal();\n+                        return null;\n                     }\n                     else if (u == 0xFFFE || u == 0xFFFF)\n                     {\n                         error(\"illegal UTF-16 value %04x\", u);\n-                        fatal();\n+                        return null;\n                     }\n                     dbuf.writeUTF8(u);\n                 }\n@@ -899,7 +890,7 @@ extern (C++) final class Module : Package\n                     if (buf[0] >= 0x80)\n                     {\n                         error(\"source file must start with BOM or ASCII character, not \\\\x%02X\", buf[0]);\n-                        fatal();\n+                        return null;\n                     }\n                 }\n             }\n@@ -929,6 +920,8 @@ extern (C++) final class Module : Package\n                       ? UTF32ToUTF8!(Endian.little)(buf)\n                       : UTF32ToUTF8!(Endian.big)(buf);\n             }\n+            // an error happened on UTF conversion\n+            if (buf is null) return null;\n         }\n \n         /* If it starts with the string \"Ddoc\", then it's a documentation\n@@ -962,6 +955,16 @@ extern (C++) final class Module : Package\n             isHdrFile = true;\n         }\n \n+        /// Promote `this` to a root module if requested via `-i`\n+        void checkCompiledImport()\n+        {\n+            if (!this.isRoot() && Compiler.onImport(this))\n+                this.importedFrom = this;\n+        }\n+\n+        DsymbolTable dst;\n+        Package ppack = null;\n+\n         /* If it has the extension \".c\", it is a \"C\" file.\n          * If it has the extension \".i\", it is a preprocessed \"C\" file.\n          */\n@@ -971,33 +974,41 @@ extern (C++) final class Module : Package\n \n             scope p = new CParser!AST(this, buf, cast(bool) docfile, target.c);\n             p.nextToken();\n+            checkCompiledImport();\n             members = p.parseModule();\n-            md = p.md;\n+            assert(!p.md); // C doesn't have module declarations\n             numlines = p.scanloc.linnum;\n         }\n         else\n         {\n             scope p = new Parser!AST(this, buf, cast(bool) docfile);\n             p.nextToken();\n-            members = p.parseModule();\n+            p.parseModuleDeclaration();\n             md = p.md;\n+\n+            if (md)\n+            {\n+                /* A ModuleDeclaration, md, was provided.\n+                * The ModuleDeclaration sets the packages this module appears in, and\n+                * the name of this module.\n+                */\n+                this.ident = md.id;\n+                dst = Package.resolve(md.packages, &this.parent, &ppack);\n+            }\n+\n+            // Done after parsing the module header because `module x.y.z` may override the file name\n+            checkCompiledImport();\n+\n+            members = p.parseModuleContent();\n             numlines = p.scanloc.linnum;\n         }\n         srcBuffer.destroy();\n         srcBuffer = null;\n         /* The symbol table into which the module is to be inserted.\n          */\n-        DsymbolTable dst;\n+\n         if (md)\n         {\n-            /* A ModuleDeclaration, md, was provided.\n-             * The ModuleDeclaration sets the packages this module appears in, and\n-             * the name of this module.\n-             */\n-            this.ident = md.id;\n-            Package ppack = null;\n-            dst = Package.resolve(md.packages, &this.parent, &ppack);\n-\n             // Mark the package path as accessible from the current module\n             // https://issues.dlang.org/show_bug.cgi?id=21661\n             // Code taken from Import.addPackageAccess()\n@@ -1201,10 +1212,13 @@ extern (C++) final class Module : Package\n             if (StringExp se = msg ? msg.toStringExp() : null)\n             {\n                 const slice = se.peekString();\n-                deprecation(loc, \"is deprecated - %.*s\", cast(int)slice.length, slice.ptr);\n+                if (slice.length)\n+                {\n+                    deprecation(loc, \"is deprecated - %.*s\", cast(int)slice.length, slice.ptr);\n+                    return;\n+                }\n             }\n-            else\n-                deprecation(loc, \"is deprecated\");\n+            deprecation(loc, \"is deprecated\");\n         }\n     }\n "}, {"sha": "936d19af623c73bfdb7111c2cfe4bd385e74319a", "filename": "gcc/d/dmd/dscope.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Fdscope.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Fdscope.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdscope.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -692,7 +692,7 @@ struct Scope\n     }\n \n     /********************************************\n-     * Search enclosing scopes for ClassDeclaration.\n+     * Search enclosing scopes for ClassDeclaration or StructDeclaration.\n      */\n     extern (C++) AggregateDeclaration getStructClassScope()\n     {"}, {"sha": "200cb7639c7e6d993b7cac048d1419709305b449", "filename": "gcc/d/dmd/dsymbol.d", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Fdsymbol.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Fdsymbol.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdsymbol.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -51,6 +51,7 @@ import dmd.root.rootobject;\n import dmd.root.speller;\n import dmd.root.string;\n import dmd.statement;\n+import dmd.staticassert;\n import dmd.tokens;\n import dmd.visitor;\n \n@@ -1305,9 +1306,10 @@ extern (C++) class Dsymbol : ASTNode\n     inout(AttribDeclaration)           isAttribDeclaration()           inout { return null; }\n     inout(AnonDeclaration)             isAnonDeclaration()             inout { return null; }\n     inout(CPPNamespaceDeclaration)     isCPPNamespaceDeclaration()     inout { return null; }\n-    inout(VisibilityDeclaration)             isVisibilityDeclaration()             inout { return null; }\n+    inout(VisibilityDeclaration)       isVisibilityDeclaration()       inout { return null; }\n     inout(OverloadSet)                 isOverloadSet()                 inout { return null; }\n     inout(CompileDeclaration)          isCompileDeclaration()          inout { return null; }\n+    inout(StaticAssert)                isStaticAssert()                inout { return null; }\n }\n \n /***********************************************************\n@@ -2500,12 +2502,15 @@ Dsymbol handleSymbolRedeclarations(ref Scope sc, Dsymbol s, Dsymbol s2, ScopeDsy\n         if (fd.fbody)                   // fd is the definition\n         {\n             sds.symtab.update(fd);      // replace fd2 in symbol table with fd\n+            fd.overnext = fd2;\n             return fd;\n         }\n \n-        /* BUG: just like with VarDeclaration, the types should match, which needs semantic() to be run on it.\n-         * FuncDeclaration::semantic2() can detect this, but it relies overnext being set.\n+        /* Just like with VarDeclaration, the types should match, which needs semantic() to be run on it.\n+         * FuncDeclaration::semantic() detects this, but it relies on .overnext being set.\n          */\n+        fd2.overloadInsert(fd);\n+\n         return fd2;\n     }\n "}, {"sha": "03d5c3d2e986ead167ce4265c22f0f6c63feaa2a", "filename": "gcc/d/dmd/dsymbol.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Fdsymbol.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Fdsymbol.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdsymbol.h?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -71,6 +71,7 @@ class Expression;\n class ExpressionDsymbol;\n class AliasAssign;\n class OverloadSet;\n+class StaticAssert;\n struct AA;\n #ifdef IN_GCC\n typedef union tree_node Symbol;\n@@ -307,6 +308,7 @@ class Dsymbol : public ASTNode\n     virtual VisibilityDeclaration *isVisibilityDeclaration() { return NULL; }\n     virtual OverloadSet *isOverloadSet() { return NULL; }\n     virtual CompileDeclaration *isCompileDeclaration() { return NULL; }\n+    virtual StaticAssert *isStaticAssert() { return NULL; }\n     void accept(Visitor *v) { v->visit(this); }\n };\n "}, {"sha": "8ad0178f814f6f8821052173b1465b9e6f342d6d", "filename": "gcc/d/dmd/dsymbolsem.d", "status": "modified", "additions": 98, "deletions": 86, "changes": 184, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Fdsymbolsem.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Fdsymbolsem.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdsymbolsem.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -847,11 +847,10 @@ private extern(C++) final class DsymbolSemanticVisitor : Visitor\n                 dsym.error(\"globals, statics, fields, manifest constants, ref and out parameters cannot be `scope`\");\n             }\n \n-            // @@@DEPRECATED@@@  https://dlang.org/deprecate.html#scope%20as%20a%20type%20constraint\n+            // @@@DEPRECATED_2.097@@@  https://dlang.org/deprecate.html#scope%20as%20a%20type%20constraint\n             // Deprecated in 2.087\n             // Remove this when the feature is removed from the language\n-            if (0 &&          // deprecation disabled for now to accommodate existing extensive use\n-               !(dsym.storage_class & STC.scope_))\n+            if (!(dsym.storage_class & STC.scope_))\n             {\n                 if (!(dsym.storage_class & STC.parameter) && dsym.ident != Id.withSym)\n                     dsym.error(\"reference to `scope class` must be `scope`\");\n@@ -1040,15 +1039,8 @@ private extern(C++) final class DsymbolSemanticVisitor : Visitor\n                             // See if initializer is a NewExp that can be allocated on the stack\n                             if (dsym.type.toBasetype().ty == Tclass)\n                             {\n-                                if (ne.newargs && ne.newargs.dim > 1)\n-                                {\n-                                    dsym.mynew = true;\n-                                }\n-                                else\n-                                {\n-                                    ne.onstack = 1;\n-                                    dsym.onstack = true;\n-                                }\n+                                ne.onstack = 1;\n+                                dsym.onstack = true;\n                             }\n                         }\n                         else if (auto fe = ex.isFuncExp())\n@@ -2438,8 +2430,12 @@ private extern(C++) final class DsymbolSemanticVisitor : Visitor\n             Type tprev = eprev.type.toHeadMutable().equals(em.ed.type.toHeadMutable())\n                 ? em.ed.memtype\n                 : eprev.type;\n-\n-            Expression emax = tprev.getProperty(sc, em.ed.loc, Id.max, 0);\n+            /*\n+                https://issues.dlang.org/show_bug.cgi?id=20777\n+                Previously this used getProperty, which doesn't consider anything user defined,\n+                this construct does do that and thus fixes the bug.\n+            */\n+            Expression emax = DotIdExp.create(em.ed.loc, new TypeExp(em.ed.loc, tprev), Id.max);\n             emax = emax.expressionSemantic(sc);\n             emax = emax.ctfeInterpret();\n \n@@ -2979,10 +2975,6 @@ private extern(C++) final class DsymbolSemanticVisitor : Visitor\n \n     void funcDeclarationSemantic(FuncDeclaration funcdecl)\n     {\n-        TypeFunction f;\n-        AggregateDeclaration ad;\n-        InterfaceDeclaration id;\n-\n         version (none)\n         {\n             printf(\"FuncDeclaration::semantic(sc = %p, this = %p, '%s', linkage = %d)\\n\", sc, funcdecl, funcdecl.toPrettyChars(), sc.linkage);\n@@ -3023,7 +3015,7 @@ private extern(C++) final class DsymbolSemanticVisitor : Visitor\n         funcdecl.foverrides.setDim(0); // reset in case semantic() is being retried for this function\n \n         funcdecl.storage_class |= sc.stc & ~STC.ref_;\n-        ad = funcdecl.isThis();\n+        AggregateDeclaration ad = funcdecl.isThis();\n         // Don't nest structs b/c of generated methods which should not access the outer scopes.\n         // https://issues.dlang.org/show_bug.cgi?id=16627\n         if (ad && !funcdecl.generated)\n@@ -3042,21 +3034,22 @@ private extern(C++) final class DsymbolSemanticVisitor : Visitor\n         if (sc.flags & SCOPE.compile)\n             funcdecl.flags |= FUNCFLAG.compileTimeOnly; // don't emit code for this function\n \n-        FuncLiteralDeclaration fld = funcdecl.isFuncLiteralDeclaration();\n-        if (fld && fld.treq)\n+        funcdecl.linkage = sc.linkage;\n+        if (auto fld = funcdecl.isFuncLiteralDeclaration())\n         {\n-            Type treq = fld.treq;\n-            assert(treq.nextOf().ty == Tfunction);\n-            if (treq.ty == Tdelegate)\n-                fld.tok = TOK.delegate_;\n-            else if (treq.isPtrToFunction())\n-                fld.tok = TOK.function_;\n-            else\n-                assert(0);\n-            funcdecl.linkage = treq.nextOf().toTypeFunction().linkage;\n+            if (fld.treq)\n+            {\n+                Type treq = fld.treq;\n+                assert(treq.nextOf().ty == Tfunction);\n+                if (treq.ty == Tdelegate)\n+                    fld.tok = TOK.delegate_;\n+                else if (treq.isPtrToFunction())\n+                    fld.tok = TOK.function_;\n+                else\n+                    assert(0);\n+                funcdecl.linkage = treq.nextOf().toTypeFunction().linkage;\n+            }\n         }\n-        else\n-            funcdecl.linkage = sc.linkage;\n \n         // evaluate pragma(inline)\n         if (auto pragmadecl = sc.inlining)\n@@ -3078,16 +3071,24 @@ private extern(C++) final class DsymbolSemanticVisitor : Visitor\n \n         if (!funcdecl.originalType)\n             funcdecl.originalType = funcdecl.type.syntaxCopy();\n-        if (funcdecl.type.ty != Tfunction)\n+\n+        static TypeFunction getFunctionType(FuncDeclaration fd)\n         {\n-            if (funcdecl.type.ty != Terror)\n+            if (auto tf = fd.type.isTypeFunction())\n+                return tf;\n+\n+            if (!fd.type.isTypeError())\n             {\n-                funcdecl.error(\"`%s` must be a function instead of `%s`\", funcdecl.toChars(), funcdecl.type.toChars());\n-                funcdecl.type = Type.terror;\n+                fd.error(\"`%s` must be a function instead of `%s`\", fd.toChars(), fd.type.toChars());\n+                fd.type = Type.terror;\n             }\n-            funcdecl.errors = true;\n-            return;\n+            fd.errors = true;\n+            return null;\n         }\n+\n+        if (!getFunctionType(funcdecl))\n+            return;\n+\n         if (!funcdecl.type.deco)\n         {\n             sc = sc.push();\n@@ -3147,14 +3148,17 @@ private extern(C++) final class DsymbolSemanticVisitor : Visitor\n                 sc.stc |= STC.property;\n             if (tf.purity == PURE.fwdref)\n                 sc.stc |= STC.pure_;\n+\n             if (tf.trust != TRUST.default_)\n+            {\n                 sc.stc &= ~STC.safeGroup;\n-            if (tf.trust == TRUST.safe)\n-                sc.stc |= STC.safe;\n-            if (tf.trust == TRUST.system)\n-                sc.stc |= STC.system;\n-            if (tf.trust == TRUST.trusted)\n-                sc.stc |= STC.trusted;\n+                if (tf.trust == TRUST.safe)\n+                    sc.stc |= STC.safe;\n+                else if (tf.trust == TRUST.system)\n+                    sc.stc |= STC.system;\n+                else if (tf.trust == TRUST.trusted)\n+                    sc.stc |= STC.trusted;\n+            }\n \n             if (funcdecl.isCtorDeclaration())\n             {\n@@ -3206,37 +3210,46 @@ private extern(C++) final class DsymbolSemanticVisitor : Visitor\n             funcdecl.type = funcdecl.type.typeSemantic(funcdecl.loc, sc);\n             sc = sc.pop();\n         }\n-        if (funcdecl.type.ty != Tfunction)\n-        {\n-            if (funcdecl.type.ty != Terror)\n-            {\n-                funcdecl.error(\"`%s` must be a function instead of `%s`\", funcdecl.toChars(), funcdecl.type.toChars());\n-                funcdecl.type = Type.terror;\n-            }\n-            funcdecl.errors = true;\n-            return;\n-        }\n-        else\n+\n+        auto f = getFunctionType(funcdecl);\n+        if (!f)\n+            return;     // funcdecl's type is not a function\n+\n         {\n             // Merge back function attributes into 'originalType'.\n             // It's used for mangling, ddoc, and json output.\n             TypeFunction tfo = funcdecl.originalType.toTypeFunction();\n-            TypeFunction tfx = funcdecl.type.toTypeFunction();\n-            tfo.mod = tfx.mod;\n-            tfo.isScopeQual = tfx.isScopeQual;\n-            tfo.isreturninferred = tfx.isreturninferred;\n-            tfo.isscopeinferred = tfx.isscopeinferred;\n-            tfo.isref = tfx.isref;\n-            tfo.isnothrow = tfx.isnothrow;\n-            tfo.isnogc = tfx.isnogc;\n-            tfo.isproperty = tfx.isproperty;\n-            tfo.purity = tfx.purity;\n-            tfo.trust = tfx.trust;\n+            tfo.mod = f.mod;\n+            tfo.isScopeQual = f.isScopeQual;\n+            tfo.isreturninferred = f.isreturninferred;\n+            tfo.isscopeinferred = f.isscopeinferred;\n+            tfo.isref = f.isref;\n+            tfo.isnothrow = f.isnothrow;\n+            tfo.isnogc = f.isnogc;\n+            tfo.isproperty = f.isproperty;\n+            tfo.purity = f.purity;\n+            tfo.trust = f.trust;\n \n             funcdecl.storage_class &= ~(STC.TYPECTOR | STC.FUNCATTR);\n         }\n \n-        f = cast(TypeFunction)funcdecl.type;\n+        if (funcdecl.overnext && funcdecl.isCsymbol())\n+        {\n+            /* C does not allow function overloading, but it does allow\n+             * redeclarations of the same function. If .overnext points\n+             * to a redeclaration, ok. Error if it is an overload.\n+             */\n+            auto fnext = funcdecl.overnext.isFuncDeclaration();\n+            funcDeclarationSemantic(fnext);\n+            auto fn = fnext.type.isTypeFunction();\n+            if (!fn || !cFuncEquivalence(f, fn))\n+            {\n+                funcdecl.error(\"redeclaration with different type\");\n+                //printf(\"t1: %s\\n\", f.toChars());\n+                //printf(\"t2: %s\\n\", fn.toChars());\n+            }\n+            funcdecl.overnext = null;   // don't overload the redeclarations\n+        }\n \n         if ((funcdecl.storage_class & STC.auto_) && !f.isref && !funcdecl.inferRetType)\n             funcdecl.error(\"storage class `auto` has no effect if return type is not inferred\");\n@@ -3355,15 +3368,15 @@ private extern(C++) final class DsymbolSemanticVisitor : Visitor\n             }\n         }\n \n-        id = parent.isInterfaceDeclaration();\n-        if (id)\n+        if (auto id = parent.isInterfaceDeclaration())\n         {\n             funcdecl.storage_class |= STC.abstract_;\n             if (funcdecl.isCtorDeclaration() || funcdecl.isPostBlitDeclaration() || funcdecl.isDtorDeclaration() || funcdecl.isInvariantDeclaration() || funcdecl.isNewDeclaration() || funcdecl.isDelete())\n                 funcdecl.error(\"constructors, destructors, postblits, invariants, new and delete functions are not allowed in interface `%s`\", id.toChars());\n             if (funcdecl.fbody && funcdecl.isVirtual())\n                 funcdecl.error(\"function body only allowed in `final` functions in interface `%s`\", id.toChars());\n         }\n+\n         if (UnionDeclaration ud = parent.isUnionDeclaration())\n         {\n             if (funcdecl.isPostBlitDeclaration() || funcdecl.isDtorDeclaration() || funcdecl.isInvariantDeclaration())\n@@ -3449,8 +3462,7 @@ private extern(C++) final class DsymbolSemanticVisitor : Visitor\n                     Dsymbol s = cd.baseClass.search(funcdecl.loc, funcdecl.ident);\n                     if (s)\n                     {\n-                        FuncDeclaration f2 = s.isFuncDeclaration();\n-                        if (f2)\n+                        if (auto f2 = s.isFuncDeclaration())\n                         {\n                             f2 = f2.overloadExactMatch(funcdecl.type);\n                             if (f2 && f2.isFinalFunc() && f2.visible().kind != Visibility.Kind.private_)\n@@ -3802,11 +3814,9 @@ private extern(C++) final class DsymbolSemanticVisitor : Visitor\n             {\n                 if (b.sym)\n                 {\n-                    Dsymbol s = search_function(b.sym, funcdecl.ident);\n-                    if (s)\n+                    if (auto s = search_function(b.sym, funcdecl.ident))\n                     {\n-                        FuncDeclaration f2 = s.isFuncDeclaration();\n-                        if (f2)\n+                        if (auto f2 = s.isFuncDeclaration())\n                         {\n                             f2 = f2.overloadExactMatch(funcdecl.type);\n                             if (f2 && f2.isFinalFunc() && f2.visible().kind != Visibility.Kind.private_)\n@@ -3853,8 +3863,7 @@ private extern(C++) final class DsymbolSemanticVisitor : Visitor\n          */\n         if (funcdecl.isVirtual())\n         {\n-            TemplateInstance ti = parent.isTemplateInstance();\n-            if (ti)\n+            if (auto ti = parent.isTemplateInstance())\n             {\n                 // Take care of nested templates\n                 while (1)\n@@ -4426,7 +4435,7 @@ private extern(C++) final class DsymbolSemanticVisitor : Visitor\n             return;\n         int errors = global.errors;\n \n-        //printf(\"+StructDeclaration::semantic(this=%p, '%s', sizeok = %d)\\n\", this, sd.toPrettyChars(), sd.sizeok);\n+        //printf(\"+StructDeclaration::semantic(this=%p, '%s', sizeok = %d)\\n\", sd, sd.toPrettyChars(), sd.sizeok);\n         Scope* scx = null;\n         if (sd._scope)\n         {\n@@ -5275,7 +5284,7 @@ private extern(C++) final class DsymbolSemanticVisitor : Visitor\n         }\n         //printf(\"-ClassDeclaration.dsymbolSemantic(%s), type = %p, sizeok = %d, this = %p\\n\", toChars(), type, sizeok, this);\n \n-        // @@@DEPRECATED@@@ https://dlang.org/deprecate.html#scope%20as%20a%20type%20constraint\n+        // @@@DEPRECATED_2.097@@@ https://dlang.org/deprecate.html#scope%20as%20a%20type%20constraint\n         // Deprecated in 2.087\n         // Make an error in 2.091\n         // Don't forget to remove code at https://github.com/dlang/dmd/blob/b2f8274ba76358607fc3297a1e9f361480f9bcf9/src/dmd/dsymbolsem.d#L1032-L1036\n@@ -5582,12 +5591,12 @@ private extern(C++) final class DsymbolSemanticVisitor : Visitor\n         }\n         assert(idec.type.ty != Tclass || (cast(TypeClass)idec.type).sym == idec);\n \n-        // @@@DEPRECATED@@@https://dlang.org/deprecate.html#scope%20as%20a%20type%20constraint\n+        // @@@DEPRECATED_2.120@@@ https://dlang.org/deprecate.html#scope%20as%20a%20type%20constraint\n         // Deprecated in 2.087\n-        // Remove in 2.091\n+        // Made an error in 2.100, but removal depends on `scope class` being removed too\n         // Don't forget to remove code at https://github.com/dlang/dmd/blob/b2f8274ba76358607fc3297a1e9f361480f9bcf9/src/dmd/dsymbolsem.d#L1032-L1036\n         if (idec.storage_class & STC.scope_)\n-            deprecation(idec.loc, \"`scope` as a type constraint is deprecated.  Use `scope` at the usage site.\");\n+            error(idec.loc, \"`scope` as a type constraint is obsolete.  Use `scope` at the usage site.\");\n     }\n }\n \n@@ -5879,13 +5888,16 @@ void templateInstanceSemantic(TemplateInstance tempinst, Scope* sc, Expressions*\n             scope v = new InstMemberWalker(tempinst.inst);\n             tempinst.inst.accept(v);\n \n-            if (tempinst.minst) // if inst was not speculative\n+            if (!global.params.allInst &&\n+                tempinst.minst) // if inst was not speculative...\n             {\n-                /* Add 'inst' once again to the root module members[], then the\n-                 * instance members will get codegen chances.\n-                 */\n+                assert(!tempinst.minst.isRoot()); // ... it was previously appended to a non-root module\n+                // Append again to the root module members[], so that the instance will\n+                // get codegen chances (depending on `tempinst.inst.needsCodegen()`).\n                 tempinst.inst.appendToModuleMember();\n             }\n+\n+            assert(tempinst.inst.memberOf && tempinst.inst.memberOf.isRoot(), \"no codegen chances\");\n         }\n \n         // modules imported by an existing instance should be added to the module"}, {"sha": "457c5d12892b11da59fb57c04e09cbe780958eaf", "filename": "gcc/d/dmd/dtemplate.d", "status": "modified", "additions": 24, "deletions": 28, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Fdtemplate.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Fdtemplate.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdtemplate.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -5125,15 +5125,6 @@ private bool reliesOnTemplateParameters(Expression e, TemplateParameter[] tparam\n             //printf(\"NewExp.reliesOnTemplateParameters('%s')\\n\", e.toChars());\n             if (e.thisexp)\n                 e.thisexp.accept(this);\n-            if (!result && e.newargs)\n-            {\n-                foreach (ea; *e.newargs)\n-                {\n-                    ea.accept(this);\n-                    if (result)\n-                        return;\n-                }\n-            }\n             result = e.newtype.reliesOnTemplateParameters(tparams);\n             if (!result && e.arguments)\n             {\n@@ -7351,12 +7342,12 @@ extern (C++) class TemplateInstance : ScopeDsymbol\n         //    toPrettyChars(),\n         //    enclosing ? enclosing.toPrettyChars() : null,\n         //    mi ? mi.toPrettyChars() : null);\n-        if (!mi || mi.isRoot())\n+        if (global.params.allInst || !mi || mi.isRoot())\n         {\n             /* If the instantiated module is speculative or root, insert to the\n              * member of a root module. Then:\n              *  - semantic3 pass will get called on the instance members.\n-             *  - codegen pass will get a selection chance to do/skip it.\n+             *  - codegen pass will get a selection chance to do/skip it (needsCodegen()).\n              */\n             static Dsymbol getStrictEnclosing(TemplateInstance ti)\n             {\n@@ -7374,33 +7365,31 @@ extern (C++) class TemplateInstance : ScopeDsymbol\n             // where tempdecl is declared.\n             mi = (enc ? enc : tempdecl).getModule();\n             if (!mi.isRoot())\n-                mi = mi.importedFrom;\n-            assert(mi.isRoot());\n+            {\n+                if (mi.importedFrom)\n+                {\n+                    mi = mi.importedFrom;\n+                    assert(mi.isRoot());\n+                }\n+                else\n+                {\n+                    // This can happen when using the frontend as a library.\n+                    // Append it to the non-root module.\n+                }\n+            }\n         }\n         else\n         {\n             /* If the instantiated module is non-root, insert to the member of the\n              * non-root module. Then:\n              *  - semantic3 pass won't be called on the instance.\n              *  - codegen pass won't reach to the instance.\n+             * Unless it is re-appended to a root module later (with changed minst).\n              */\n         }\n         //printf(\"\\t-. mi = %s\\n\", mi.toPrettyChars());\n \n-        if (memberOf is mi)     // already a member\n-        {\n-            debug               // make sure it really is a member\n-            {\n-                auto a = mi.members;\n-                for (size_t i = 0; 1; ++i)\n-                {\n-                    assert(i != a.dim);\n-                    if (this == (*a)[i])\n-                        break;\n-                }\n-            }\n-            return null;\n-        }\n+        assert(!memberOf || (!memberOf.isRoot() && mi.isRoot()), \"can only re-append from non-root to root module\");\n \n         Dsymbols* a = mi.members;\n         a.push(this);\n@@ -7801,15 +7790,22 @@ struct TemplateInstanceBox\n     {\n         bool res = void;\n         if (ti.inst && s.ti.inst)\n+        {\n             /* This clause is only used when an instance with errors\n              * is replaced with a correct instance.\n              */\n             res = ti is s.ti;\n+        }\n         else\n+        {\n             /* Used when a proposed instance is used to see if there's\n              * an existing instance.\n              */\n-            res = (cast()s.ti).equalsx(cast()ti);\n+            static if (__VERSION__ >= 2099)\n+                res = (cast()ti).equalsx(cast()s.ti);\n+            else // https://issues.dlang.org/show_bug.cgi?id=22717\n+                res = (cast()s.ti).equalsx(cast()ti);\n+        }\n \n         debug (FindExistingInstance) ++(res ? nHits : nCollisions);\n         return res;"}, {"sha": "a34e2ccae289b74eb24db61cf11a272e0189579d", "filename": "gcc/d/dmd/dtoh.d", "status": "modified", "additions": 2, "deletions": 22, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Fdtoh.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Fdtoh.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdtoh.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -2545,29 +2545,9 @@ public:\n             buf.writeByte('U');\n         buf.writeByte('\"');\n \n-        for (size_t i = 0; i < e.len; i++)\n+        foreach (i; 0 .. e.len)\n         {\n-            uint c = e.charAt(i);\n-            switch (c)\n-            {\n-                case '\"':\n-                case '\\\\':\n-                    buf.writeByte('\\\\');\n-                    goto default;\n-                default:\n-                    if (c <= 0xFF)\n-                    {\n-                        if (c >= 0x20 && c < 0x80)\n-                            buf.writeByte(c);\n-                        else\n-                            buf.printf(\"\\\\x%02x\", c);\n-                    }\n-                    else if (c <= 0xFFFF)\n-                        buf.printf(\"\\\\u%04x\", c);\n-                    else\n-                        buf.printf(\"\\\\U%08x\", c);\n-                    break;\n-            }\n+            writeCharLiteral(*buf, e.getCodeUnit(i));\n         }\n         buf.writeByte('\"');\n     }"}, {"sha": "35c1f76e6004069df9185891eb978a74738a9bf5", "filename": "gcc/d/dmd/escape.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Fescape.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Fescape.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fescape.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -380,7 +380,7 @@ bool checkParamArgumentEscape(Scope* sc, FuncDeclaration fdc, Parameter par, Exp\n \n         notMaybeScope(v);\n \n-        if (!v.isReference() && p == sc.func)\n+        if (p == sc.func)\n         {\n             if (psr == ScopeRef.Scope ||\n                 psr == ScopeRef.RefScope ||"}, {"sha": "b3aa0b268b457913bdab5f5c39324d03a19119a7", "filename": "gcc/d/dmd/expression.d", "status": "modified", "additions": 71, "deletions": 44, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Fexpression.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Fexpression.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fexpression.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -1742,11 +1742,21 @@ extern (C++) abstract class Expression : ASTNode\n         inout(PrettyFuncInitExp) isPrettyFuncInitExp() { return op == EXP.prettyFunction ? cast(typeof(return))this : null; }\n         inout(ClassReferenceExp) isClassReferenceExp() { return op == EXP.classReference ? cast(typeof(return))this : null; }\n         inout(ThrownExceptionExp) isThrownExceptionExp() { return op == EXP.thrownException ? cast(typeof(return))this : null; }\n-    }\n \n-    inout(BinAssignExp) isBinAssignExp() pure inout nothrow @nogc\n-    {\n-        return null;\n+        inout(UnaExp) isUnaExp() pure inout nothrow @nogc\n+        {\n+            return exptab[op] & EXPFLAGS.unary ? cast(typeof(return))this : null;\n+        }\n+\n+        inout(BinExp) isBinExp() pure inout nothrow @nogc\n+        {\n+            return exptab[op] & EXPFLAGS.binary ? cast(typeof(return))this : null;\n+        }\n+\n+        inout(BinAssignExp) isBinAssignExp() pure inout nothrow @nogc\n+        {\n+            return exptab[op] & EXPFLAGS.binaryAssign ? cast(typeof(return))this : null;\n+        }\n     }\n \n     override void accept(Visitor v)\n@@ -2716,29 +2726,6 @@ extern (C++) final class StringExp : Expression\n         return ErrorExp.get();\n     }\n \n-    uint charAt(uinteger_t i) const\n-    {\n-        uint value;\n-        switch (sz)\n-        {\n-        case 1:\n-            value = (cast(char*)string)[cast(size_t)i];\n-            break;\n-\n-        case 2:\n-            value = (cast(ushort*)string)[cast(size_t)i];\n-            break;\n-\n-        case 4:\n-            value = (cast(uint*)string)[cast(size_t)i];\n-            break;\n-\n-        default:\n-            assert(0);\n-        }\n-        return value;\n-    }\n-\n     /********************************\n      * Convert string contents to a 0 terminated string,\n      * allocated by mem.xmalloc().\n@@ -3516,12 +3503,11 @@ extern (C++) final class TemplateExp : Expression\n }\n \n /***********************************************************\n- * thisexp.new(newargs) newtype(arguments)\n+ * newtype(arguments)\n  */\n extern (C++) final class NewExp : Expression\n {\n     Expression thisexp;         // if !=null, 'this' for class being allocated\n-    Expressions* newargs;       // Array of Expression's to call new operator\n     Type newtype;\n     Expressions* arguments;     // Array of Expression's\n \n@@ -3530,25 +3516,23 @@ extern (C++) final class NewExp : Expression\n     bool onstack;               // allocate on stack\n     bool thrownew;              // this NewExp is the expression of a ThrowStatement\n \n-    extern (D) this(const ref Loc loc, Expression thisexp, Expressions* newargs, Type newtype, Expressions* arguments)\n+    extern (D) this(const ref Loc loc, Expression thisexp, Type newtype, Expressions* arguments)\n     {\n         super(loc, EXP.new_, __traits(classInstanceSize, NewExp));\n         this.thisexp = thisexp;\n-        this.newargs = newargs;\n         this.newtype = newtype;\n         this.arguments = arguments;\n     }\n \n-    static NewExp create(const ref Loc loc, Expression thisexp, Expressions* newargs, Type newtype, Expressions* arguments)\n+    static NewExp create(const ref Loc loc, Expression thisexp, Type newtype, Expressions* arguments)\n     {\n-        return new NewExp(loc, thisexp, newargs, newtype, arguments);\n+        return new NewExp(loc, thisexp, newtype, arguments);\n     }\n \n     override NewExp syntaxCopy()\n     {\n         return new NewExp(loc,\n             thisexp ? thisexp.syntaxCopy() : null,\n-            arraySyntaxCopy(newargs),\n             newtype.syntaxCopy(),\n             arraySyntaxCopy(arguments));\n     }\n@@ -3560,27 +3544,25 @@ extern (C++) final class NewExp : Expression\n }\n \n /***********************************************************\n- * thisexp.new(newargs) class baseclasses { } (arguments)\n+ * class baseclasses { } (arguments)\n  */\n extern (C++) final class NewAnonClassExp : Expression\n {\n     Expression thisexp;     // if !=null, 'this' for class being allocated\n-    Expressions* newargs;   // Array of Expression's to call new operator\n     ClassDeclaration cd;    // class being instantiated\n     Expressions* arguments; // Array of Expression's to call class constructor\n \n-    extern (D) this(const ref Loc loc, Expression thisexp, Expressions* newargs, ClassDeclaration cd, Expressions* arguments)\n+    extern (D) this(const ref Loc loc, Expression thisexp, ClassDeclaration cd, Expressions* arguments)\n     {\n         super(loc, EXP.newAnonymousClass, __traits(classInstanceSize, NewAnonClassExp));\n         this.thisexp = thisexp;\n-        this.newargs = newargs;\n         this.cd = cd;\n         this.arguments = arguments;\n     }\n \n     override NewAnonClassExp syntaxCopy()\n     {\n-        return new NewAnonClassExp(loc, thisexp ? thisexp.syntaxCopy() : null, arraySyntaxCopy(newargs), cd.syntaxCopy(null), arraySyntaxCopy(arguments));\n+        return new NewAnonClassExp(loc, thisexp ? thisexp.syntaxCopy() : null, cd.syntaxCopy(null), arraySyntaxCopy(arguments));\n     }\n \n     override void accept(Visitor v)\n@@ -4593,11 +4575,6 @@ extern (C++) class BinAssignExp : BinExp\n         return toLvalue(sc, this);\n     }\n \n-    override inout(BinAssignExp) isBinAssignExp() pure inout nothrow @nogc @safe\n-    {\n-        return this;\n-    }\n-\n     override void accept(Visitor v)\n     {\n         v.visit(this);\n@@ -7055,3 +7032,53 @@ extern(D) Modifiable checkModifiable(Expression exp, Scope* sc, ModifyFlags flag\n             return exp.type ? Modifiable.yes : Modifiable.no; // default modifiable\n     }\n }\n+\n+/******************************\n+ * Provide efficient way to implement isUnaExp(), isBinExp(), isBinAssignExp()\n+ */\n+private immutable ubyte[EXP.max + 1] exptab =\n+() {\n+    ubyte[EXP.max + 1] tab;\n+    with (EXPFLAGS)\n+    {\n+        foreach (i; Eunary)  { tab[i] |= unary;  }\n+        foreach (i; Ebinary) { tab[i] |= unary | binary; }\n+        foreach (i; EbinaryAssign) { tab[i] |= unary | binary | binaryAssign; }\n+    }\n+    return tab;\n+} ();\n+\n+private enum EXPFLAGS : ubyte\n+{\n+    unary = 1,\n+    binary = 2,\n+    binaryAssign = 4,\n+}\n+\n+private enum Eunary =\n+    [\n+        EXP.import_, EXP.assert_, EXP.throw_, EXP.dotIdentifier, EXP.dotTemplateDeclaration,\n+        EXP.dotVariable, EXP.dotTemplateInstance, EXP.delegate_, EXP.dotType, EXP.call,\n+        EXP.address, EXP.star, EXP.negate, EXP.uadd, EXP.tilde, EXP.not, EXP.delete_, EXP.cast_,\n+        EXP.vector, EXP.vectorArray, EXP.slice, EXP.arrayLength, EXP.array, EXP.delegatePointer,\n+        EXP.delegateFunctionPointer, EXP.preMinusMinus, EXP.prePlusPlus,\n+    ];\n+\n+private enum Ebinary =\n+    [\n+        EXP.dot, EXP.comma, EXP.index, EXP.minusMinus, EXP.plusPlus, EXP.assign,\n+        EXP.add, EXP.min, EXP.concatenate, EXP.mul, EXP.div, EXP.mod, EXP.pow, EXP.leftShift,\n+        EXP.rightShift, EXP.unsignedRightShift, EXP.and, EXP.or, EXP.xor, EXP.andAnd, EXP.orOr,\n+        EXP.lessThan, EXP.lessOrEqual, EXP.greaterThan, EXP.greaterOrEqual,\n+        EXP.in_, EXP.remove, EXP.equal, EXP.notEqual, EXP.identity, EXP.notIdentity,\n+        EXP.question,\n+        EXP.construct, EXP.blit,\n+    ];\n+\n+private enum EbinaryAssign =\n+    [\n+        EXP.addAssign, EXP.minAssign, EXP.mulAssign, EXP.divAssign, EXP.modAssign,\n+        EXP.andAssign, EXP.orAssign, EXP.xorAssign, EXP.powAssign,\n+        EXP.leftShiftAssign, EXP.rightShiftAssign, EXP.unsignedRightShiftAssign,\n+        EXP.concatenateAssign, EXP.concatenateElemAssign, EXP.concatenateDcharAssign,\n+    ];"}, {"sha": "9522b23a3b14faaad9c29ce7f0d4b96f0f0ef148", "filename": "gcc/d/dmd/expression.h", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Fexpression.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Fexpression.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fexpression.h?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -234,7 +234,10 @@ class Expression : public ASTNode\n     FuncInitExp* isFuncInitExp();\n     PrettyFuncInitExp* isPrettyFuncInitExp();\n     ClassReferenceExp* isClassReferenceExp();\n-    virtual BinAssignExp* isBinAssignExp();\n+    ThrownExceptionExp* isThrownExceptionExp();\n+    UnaExp* isUnaExp();\n+    BinExp* isBinExp();\n+    BinAssignExp* isBinAssignExp();\n \n     void accept(Visitor *v) { v->visit(this); }\n };\n@@ -374,13 +377,14 @@ class StringExp : public Expression\n     static StringExp *create(const Loc &loc, const void *s, size_t len);\n     static void emplace(UnionExp *pue, const Loc &loc, const char *s);\n     bool equals(const RootObject *o) const;\n+    char32_t getCodeUnit(size_t i) const;\n+    void setCodeUnit(size_t i, char32_t c);\n     StringExp *toStringExp();\n     StringExp *toUTF8(Scope *sc);\n     Optional<bool> toBool();\n     bool isLvalue();\n     Expression *toLvalue(Scope *sc, Expression *e);\n     Expression *modifiableLvalue(Scope *sc, Expression *e);\n-    unsigned charAt(uinteger_t i) const;\n     void accept(Visitor *v) { v->visit(this); }\n     size_t numberOfCodeUnits(int tynto = 0) const;\n     void writeTo(void* dest, bool zero, int tyto = 0) const;\n@@ -519,10 +523,9 @@ class TemplateExp : public Expression\n class NewExp : public Expression\n {\n public:\n-    /* thisexp.new(newargs) newtype(arguments)\n+    /* newtype(arguments)\n      */\n     Expression *thisexp;        // if !NULL, 'this' for class being allocated\n-    Expressions *newargs;       // Array of Expression's to call new operator\n     Type *newtype;\n     Expressions *arguments;     // Array of Expression's\n \n@@ -532,7 +535,7 @@ class NewExp : public Expression\n     bool onstack;               // allocate on stack\n     bool thrownew;              // this NewExp is the expression of a ThrowStatement\n \n-    static NewExp *create(const Loc &loc, Expression *thisexp, Expressions *newargs, Type *newtype, Expressions *arguments);\n+    static NewExp *create(const Loc &loc, Expression *thisexp, Type *newtype, Expressions *arguments);\n     NewExp *syntaxCopy();\n \n     void accept(Visitor *v) { v->visit(this); }\n@@ -541,10 +544,9 @@ class NewExp : public Expression\n class NewAnonClassExp : public Expression\n {\n public:\n-    /* thisexp.new(newargs) class baseclasses { } (arguments)\n+    /* class baseclasses { } (arguments)\n      */\n     Expression *thisexp;        // if !NULL, 'this' for class being allocated\n-    Expressions *newargs;       // Array of Expression's to call new operator\n     ClassDeclaration *cd;       // class being instantiated\n     Expressions *arguments;     // Array of Expression's to call class constructor\n \n@@ -716,7 +718,6 @@ class BinAssignExp : public BinExp\n     bool isLvalue();\n     Expression *toLvalue(Scope *sc, Expression *ex);\n     Expression *modifiableLvalue(Scope *sc, Expression *e);\n-    BinAssignExp* isBinAssignExp();\n     void accept(Visitor *v) { v->visit(this); }\n };\n "}, {"sha": "0320f662bdfdd71132b43805fdee9933af082161", "filename": "gcc/d/dmd/expressionsem.d", "status": "modified", "additions": 123, "deletions": 181, "changes": 304, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Fexpressionsem.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Fexpressionsem.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fexpressionsem.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -1236,21 +1236,21 @@ private Expression resolvePropertiesX(Scope* sc, Expression e1, Expression e2 =\n         tthis = null;\n         goto Lfd;\n     }\n-    else if (e1.op == EXP.dotVariable && e1.type && (e1.type.toBasetype().ty == Tfunction || (cast(DotVarExp)e1).var.isOverDeclaration()))\n+    else if (e1.isDotVarExp() && e1.type && (e1.type.toBasetype().isTypeFunction() || e1.isDotVarExp().var.isOverDeclaration()))\n     {\n-        DotVarExp dve = cast(DotVarExp)e1;\n+        DotVarExp dve = e1.isDotVarExp();\n         s = dve.var;\n         tiargs = null;\n         tthis = dve.e1.type;\n         goto Lfd;\n     }\n-    else if (sc && sc.flags & SCOPE.Cfile && e1.op == EXP.variable && !e2)\n+    else if (sc && sc.flags & SCOPE.Cfile && e1.isVarExp() && !e2)\n     {\n         // ImportC: do not implicitly call function if no ( ) are present\n     }\n-    else if (e1.op == EXP.variable && e1.type && (e1.type.toBasetype().ty == Tfunction || (cast(VarExp)e1).var.isOverDeclaration()))\n+    else if (e1.isVarExp() && e1.type && (e1.type.toBasetype().isTypeFunction() || e1.isVarExp().var.isOverDeclaration()))\n     {\n-        s = (cast(VarExp)e1).var;\n+        s = e1.isVarExp().var;\n         tiargs = null;\n         tthis = null;\n     Lfd:\n@@ -1272,9 +1272,9 @@ private Expression resolvePropertiesX(Scope* sc, Expression e1, Expression e2 =\n                     return ErrorExp.get();\n                 if (!checkSymbolAccess(sc, fd))\n                 {\n-                    // @@@DEPRECATED_2020-10@@@\n+                    // @@@DEPRECATED_2.105@@@\n                     // When turning into error, uncomment the return statement\n-                    TypeFunction tf = cast(TypeFunction)fd.type;\n+                    TypeFunction tf = fd.type.isTypeFunction();\n                     deprecation(loc, \"Function `%s` of type `%s` is not accessible from module `%s`\",\n                                 fd.toPrettyChars(), tf.toChars, sc._module.toChars);\n                     //return ErrorExp.get();\n@@ -1290,13 +1290,12 @@ private Expression resolvePropertiesX(Scope* sc, Expression e1, Expression e2 =\n             {\n                 if (fd.errors)\n                     return ErrorExp.get();\n-                assert(fd.type.ty == Tfunction);\n-                TypeFunction tf = cast(TypeFunction)fd.type;\n+                TypeFunction tf = fd.type.isTypeFunction();\n                 if (!e2 || tf.isref)\n                 {\n                     if (!checkSymbolAccess(sc, fd))\n                     {\n-                        // @@@DEPRECATED_2020-10@@@\n+                        // @@@DEPRECATED_2.105@@@\n                         // When turning into error, uncomment the return statement\n                         deprecation(loc, \"Function `%s` of type `%s` is not accessible from module `%s`\",\n                                     fd.toPrettyChars(), tf.toChars, sc._module.toChars);\n@@ -1319,17 +1318,18 @@ private Expression resolvePropertiesX(Scope* sc, Expression e1, Expression e2 =\n         if (e2)\n             goto Leprop;\n     }\n-    if (e1.op == EXP.variable)\n+    if (auto ve = e1.isVarExp())\n     {\n-        VarExp ve = cast(VarExp)e1;\n-        VarDeclaration v = ve.var.isVarDeclaration();\n-        if (v && ve.checkPurity(sc, v))\n-            return ErrorExp.get();\n+        if (auto v = ve.var.isVarDeclaration())\n+        {\n+            if (ve.checkPurity(sc, v))\n+                return ErrorExp.get();\n+        }\n     }\n     if (e2)\n         return null;\n \n-    if (e1.type && e1.op != EXP.type) // function type is not a property\n+    if (e1.type && !e1.isTypeExp()) // function type is not a property\n     {\n         /* Look for e1 being a lazy parameter; rewrite as delegate call\n          * only if the symbol wasn't already treated as a delegate\n@@ -1340,15 +1340,14 @@ private Expression resolvePropertiesX(Scope* sc, Expression e1, Expression e2 =\n                 Expression e = new CallExp(loc, e1);\n                 return e.expressionSemantic(sc);\n         }\n-        else if (e1.op == EXP.dotVariable)\n+        else if (e1.isDotVarExp())\n         {\n             // Check for reading overlapped pointer field in @safe code.\n             if (checkUnsafeAccess(sc, e1, true, true))\n                 return ErrorExp.get();\n         }\n-        else if (e1.op == EXP.call)\n+        else if (auto ce = e1.isCallExp())\n         {\n-            CallExp ce = cast(CallExp)e1;\n             // Check for reading overlapped pointer field in @safe code.\n             if (checkUnsafeAccess(sc, ce.e1, true, true))\n                 return ErrorExp.get();\n@@ -1560,14 +1559,12 @@ private Expression opAssignToOp(const ref Loc loc, EXP op, Expression e1, Expres\n  */\n private Expression rewriteOpAssign(BinExp exp)\n {\n-    Expression e;\n-\n-    assert(exp.e1.op == EXP.arrayLength);\n-    ArrayLengthExp ale = cast(ArrayLengthExp)exp.e1;\n-    if (ale.e1.op == EXP.variable)\n+    ArrayLengthExp ale = exp.e1.isArrayLengthExp();\n+    if (ale.e1.isVarExp())\n     {\n-        e = opAssignToOp(exp.loc, exp.op, ale, exp.e2);\n+        Expression e = opAssignToOp(exp.loc, exp.op, ale, exp.e2);\n         e = new AssignExp(exp.loc, ale.syntaxCopy(), e);\n+        return e;\n     }\n     else\n     {\n@@ -1578,11 +1575,11 @@ private Expression rewriteOpAssign(BinExp exp)\n \n         Expression e1 = new ArrayLengthExp(ale.loc, new PtrExp(ale.loc, new VarExp(ale.loc, tmp)));\n         Expression elvalue = e1.syntaxCopy();\n-        e = opAssignToOp(exp.loc, exp.op, e1, exp.e2);\n+        Expression e = opAssignToOp(exp.loc, exp.op, e1, exp.e2);\n         e = new AssignExp(exp.loc, elvalue, e);\n         e = new CommaExp(exp.loc, new DeclarationExp(ale.loc, tmp), e);\n+        return e;\n     }\n-    return e;\n }\n \n /****************************************\n@@ -1650,10 +1647,9 @@ private bool preFunctionParameters(Scope* sc, Expressions* exps, const bool repo\n  */\n private bool checkDefCtor(Loc loc, Type t)\n {\n-    t = t.baseElemOf();\n-    if (t.ty == Tstruct)\n+    if (auto ts = t.baseElemOf().isTypeStruct())\n     {\n-        StructDeclaration sd = (cast(TypeStruct)t).sym;\n+        StructDeclaration sd = ts.sym;\n         if (sd.noDefaultCtor)\n         {\n             sd.error(loc, \"default construction is disabled\");\n@@ -1846,7 +1842,7 @@ private bool functionParameters(const ref Loc loc, Scope* sc,\n                         auto args = new Expressions(nargs - i);\n                         foreach (u; i .. nargs)\n                             (*args)[u - i] = (*arguments)[u];\n-                        arg = new NewExp(loc, null, null, p.type, args);\n+                        arg = new NewExp(loc, null, p.type, args);\n                         break;\n                     }\n                 default:\n@@ -1923,7 +1919,7 @@ private bool functionParameters(const ref Loc loc, Scope* sc,\n                     }\n                     else if (auto ff = s.isFuncDeclaration())\n                     {\n-                        if ((cast(TypeFunction)ff.type).iswild)\n+                        if (ff.type.isTypeFunction().iswild)\n                             return errorInout(wildmatch);\n \n                         if (ff.isNested() || ff.isThis())\n@@ -1969,7 +1965,7 @@ private bool functionParameters(const ref Loc loc, Scope* sc,\n                     ? p.type.substWildTo(wildmatch)\n                     : p.type;\n \n-                const hasCopyCtor = (arg.type.ty == Tstruct) && (cast(TypeStruct)arg.type).sym.hasCopyCtor;\n+                const hasCopyCtor = arg.type.isTypeStruct() && arg.type.isTypeStruct().sym.hasCopyCtor;\n                 const typesMatch = arg.type.mutableOf().unSharedOf().equals(tprm.mutableOf().unSharedOf());\n                 if (!((hasCopyCtor && typesMatch) || tprm.equals(arg.type)))\n                 {\n@@ -2059,8 +2055,8 @@ private bool functionParameters(const ref Loc loc, Scope* sc,\n                 /* Argument value cannot escape from the called function.\n                  */\n                 Expression a = arg;\n-                if (a.op == EXP.cast_)\n-                    a = (cast(CastExp)a).e1;\n+                if (auto ce = a.isCastExp())\n+                    a = ce.e1;\n \n                 ArrayLiteralExp ale;\n                 if (p.type.toBasetype().ty == Tarray &&\n@@ -2074,26 +2070,22 @@ private bool functionParameters(const ref Loc loc, Scope* sc,\n                     arg = CommaExp.combine(declareTmp, castToSlice);\n                     arg = arg.expressionSemantic(sc);\n                 }\n-                else if (a.op == EXP.function_)\n+                else if (auto fe = a.isFuncExp())\n                 {\n                     /* Function literals can only appear once, so if this\n                      * appearance was scoped, there cannot be any others.\n                      */\n-                    FuncExp fe = cast(FuncExp)a;\n                     fe.fd.tookAddressOf = 0;\n                 }\n-                else if (a.op == EXP.delegate_)\n+                else if (auto de = a.isDelegateExp())\n                 {\n                     /* For passing a delegate to a scoped parameter,\n                      * this doesn't count as taking the address of it.\n                      * We only worry about 'escaping' references to the function.\n                      */\n-                    DelegateExp de = cast(DelegateExp)a;\n-                    if (de.e1.op == EXP.variable)\n+                    if (auto ve = de.e1.isVarExp())\n                     {\n-                        VarExp ve = cast(VarExp)de.e1;\n-                        FuncDeclaration f = ve.var.isFuncDeclaration();\n-                        if (f)\n+                        if (auto f = ve.var.isFuncDeclaration())\n                         {\n                             if (f.tookAddressOf)\n                                 --f.tookAddressOf;\n@@ -2174,9 +2166,8 @@ private bool functionParameters(const ref Loc loc, Scope* sc,\n             // Convert static arrays to dynamic arrays\n             // BUG: I don't think this is right for D2\n             Type tb = arg.type.toBasetype();\n-            if (tb.ty == Tsarray)\n+            if (auto ts = tb.isTypeSArray())\n             {\n-                TypeSArray ts = cast(TypeSArray)tb;\n                 Type ta = ts.next.arrayOf();\n                 if (ts.size(arg.loc) == 0)\n                     arg = new NullExp(arg.loc, ta);\n@@ -2188,9 +2179,8 @@ private bool functionParameters(const ref Loc loc, Scope* sc,\n                 //arg = callCpCtor(sc, arg);\n             }\n             // Give error for overloaded function addresses\n-            if (arg.op == EXP.symbolOffset)\n+            if (auto se = arg.isSymOffExp())\n             {\n-                SymOffExp se = cast(SymOffExp)arg;\n                 if (se.hasOverloads && !se.var.isFuncDeclaration().isUnique())\n                 {\n                     arg.error(\"function `%s` is overloaded\", arg.toChars());\n@@ -3469,10 +3459,11 @@ private extern (C++) final class ExpressionSemanticVisitor : Visitor\n         // T should be analyzed first and edim should go into arguments iff it's\n         // not a tuple.\n         Expression edim = null;\n-        if (!exp.arguments && exp.newtype.ty == Tsarray)\n+        if (!exp.arguments && exp.newtype.isTypeSArray())\n         {\n-            edim = (cast(TypeSArray)exp.newtype).dim;\n-            exp.newtype = (cast(TypeNext)exp.newtype).next;\n+            auto ts = exp.newtype.isTypeSArray();\n+            edim = ts.dim;\n+            exp.newtype = ts.next;\n         }\n \n         ClassDeclaration cdthis = null;\n@@ -3522,11 +3513,6 @@ private extern (C++) final class ExpressionSemanticVisitor : Visitor\n         exp.newtype = exp.type; // in case type gets cast to something else\n         Type tb = exp.type.toBasetype();\n         //printf(\"tb: %s, deco = %s\\n\", tb.toChars(), tb.deco);\n-        if (arrayExpressionSemantic(exp.newargs, sc) ||\n-            preFunctionParameters(sc, exp.newargs))\n-        {\n-            return setError();\n-        }\n         if (arrayExpressionSemantic(exp.arguments, sc))\n         {\n             return setError();\n@@ -3556,9 +3542,9 @@ private extern (C++) final class ExpressionSemanticVisitor : Visitor\n         const size_t nargs = exp.arguments ? exp.arguments.dim : 0;\n         Expression newprefix = null;\n \n-        if (tb.ty == Tclass)\n+        if (auto tc = tb.isTypeClass())\n         {\n-            auto cd = (cast(TypeClass)tb).sym;\n+            auto cd = tc.sym;\n             cd.size(exp.loc);\n             if (cd.sizeok != Sizeok.done)\n                 return setError();\n@@ -3692,14 +3678,6 @@ private extern (C++) final class ExpressionSemanticVisitor : Visitor\n                           originalNewtype.toChars());\n                 return setError();\n             }\n-            else\n-            {\n-                if (exp.newargs && exp.newargs.dim)\n-                {\n-                    exp.error(\"no allocator for `%s`\", cd.toChars());\n-                    return setError();\n-                }\n-            }\n \n             if (cd.ctor)\n             {\n@@ -3710,7 +3688,7 @@ private extern (C++) final class ExpressionSemanticVisitor : Visitor\n                 checkFunctionAttributes(exp, sc, f);\n                 checkAccess(cd, exp.loc, sc, f);\n \n-                TypeFunction tf = cast(TypeFunction)f.type;\n+                TypeFunction tf = f.type.isTypeFunction();\n                 if (!exp.arguments)\n                     exp.arguments = new Expressions();\n                 if (functionParameters(exp.loc, sc, tf, null, exp.type, exp.arguments, f, &exp.type, &exp.argprefix))\n@@ -3744,9 +3722,9 @@ private extern (C++) final class ExpressionSemanticVisitor : Visitor\n                 }\n             }\n         }\n-        else if (tb.ty == Tstruct)\n+        else if (auto ts = tb.isTypeStruct())\n         {\n-            auto sd = (cast(TypeStruct)tb).sym;\n+            auto sd = ts.sym;\n             sd.size(exp.loc);\n             if (sd.sizeok != Sizeok.done)\n                 return setError();\n@@ -3765,14 +3743,6 @@ private extern (C++) final class ExpressionSemanticVisitor : Visitor\n                           originalNewtype.toChars());\n                 return setError();\n             }\n-            else\n-            {\n-                if (exp.newargs && exp.newargs.dim)\n-                {\n-                    exp.error(\"no allocator for `%s`\", sd.toChars());\n-                    return setError();\n-                }\n-            }\n \n             if (sd.hasRegularCtor() && nargs)\n             {\n@@ -3783,7 +3753,7 @@ private extern (C++) final class ExpressionSemanticVisitor : Visitor\n                 checkFunctionAttributes(exp, sc, f);\n                 checkAccess(sd, exp.loc, sc, f);\n \n-                TypeFunction tf = cast(TypeFunction)f.type;\n+                TypeFunction tf = f.type.isTypeFunction();\n                 if (!exp.arguments)\n                     exp.arguments = new Expressions();\n                 if (functionParameters(exp.loc, sc, tf, null, exp.type, exp.arguments, f, &exp.type, &exp.argprefix))\n@@ -3861,7 +3831,7 @@ private extern (C++) final class ExpressionSemanticVisitor : Visitor\n                     return setError();\n                 }\n                 (*exp.arguments)[i] = arg;\n-                tb = (cast(TypeDArray)tb).next.toBasetype();\n+                tb = tb.isTypeDArray().next.toBasetype();\n             }\n         }\n         else if (tb.isscalar())\n@@ -3924,7 +3894,7 @@ private extern (C++) final class ExpressionSemanticVisitor : Visitor\n             sds.members.push(e.cd);\n         }\n \n-        Expression n = new NewExp(e.loc, e.thisexp, e.newargs, e.cd.type, e.arguments);\n+        Expression n = new NewExp(e.loc, e.thisexp, e.cd.type, e.arguments);\n \n         Expression c = new CommaExp(e.loc, d, n);\n         result = c.expressionSemantic(sc);\n@@ -4097,6 +4067,15 @@ private extern (C++) final class ExpressionSemanticVisitor : Visitor\n         // Type is a \"delegate to\" or \"pointer to\" the function literal\n         if ((exp.fd.isNested() && exp.fd.tok == TOK.delegate_) || (exp.tok == TOK.reserved && exp.fd.treq && exp.fd.treq.ty == Tdelegate))\n         {\n+            // https://issues.dlang.org/show_bug.cgi?id=22686\n+            // if the delegate return type is an error\n+            // abort semantic of the FuncExp and propagate\n+            // the error\n+            if (exp.fd.type.isTypeError())\n+            {\n+                e = ErrorExp.get();\n+                goto Ldone;\n+            }\n             exp.type = new TypeDelegate(exp.fd.type.isTypeFunction());\n             exp.type = exp.type.typeSemantic(exp.loc, sc);\n \n@@ -5239,21 +5218,21 @@ private extern (C++) final class ExpressionSemanticVisitor : Visitor\n             break;\n         }\n \n-        VarDeclaration v = s.isVarDeclaration();\n-        if (v)\n-        {\n-            // Do semantic() on initializer first, so:\n-            //      int a = a;\n-            // will be illegal.\n-            e.declaration.dsymbolSemantic(sc);\n-            s.parent = sc.parent;\n-        }\n-\n         //printf(\"inserting '%s' %p into sc = %p\\n\", s.toChars(), s, sc);\n         // Insert into both local scope and function scope.\n         // Must be unique in both.\n         if (s.ident)\n         {\n+            VarDeclaration v = s.isVarDeclaration();\n+            if (v && !(sc.flags & SCOPE.Cfile))\n+            {\n+                /* Do semantic() on initializer first so this will be illegal:\n+                 *      int a = a;\n+                 */\n+                e.declaration.dsymbolSemantic(sc);\n+                s.parent = sc.parent;\n+            }\n+\n             if (!sc.insert(s))\n             {\n                 auto conflict = sc.search(Loc.initial, s.ident, null);\n@@ -5262,7 +5241,17 @@ private extern (C++) final class ExpressionSemanticVisitor : Visitor\n                                   conflict.kind(), conflict.toChars());\n                 return setError();\n             }\n-            else if (sc.func)\n+\n+            if (v && (sc.flags & SCOPE.Cfile))\n+            {\n+                /* Do semantic() on initializer last so this will be legal:\n+                 *      int a = a;\n+                 */\n+                e.declaration.dsymbolSemantic(sc);\n+                s.parent = sc.parent;\n+            }\n+\n+            if (sc.func)\n             {\n                 // https://issues.dlang.org/show_bug.cgi?id=11720\n                 if ((s.isFuncDeclaration() ||\n@@ -5278,14 +5267,19 @@ private extern (C++) final class ExpressionSemanticVisitor : Visitor\n                     // Perturb the name mangling so that the symbols can co-exist\n                     // instead of colliding\n                     s.localNum = cast(ushort)(originalSymbol.localNum + 1);\n-                    assert(s.localNum);         // 65535 should be enough for anyone\n+                    // 65535 should be enough for anyone\n+                    if (!s.localNum)\n+                    {\n+                        e.error(\"more than 65535 symbols with name `%s` generated\", s.ident.toChars());\n+                        return setError();\n+                    }\n \n                     // Replace originalSymbol with s, which updates the localCount\n                     sc.func.localsymtab.update(s);\n \n                     // The mangling change only works for D mangling\n                 }\n-//              else\n+\n                 {\n                     /* https://issues.dlang.org/show_bug.cgi?id=21272\n                      * If we are in a foreach body we need to extract the\n@@ -6943,15 +6937,19 @@ private extern (C++) final class ExpressionSemanticVisitor : Visitor\n         }\n         else if (!exp.e1.type.deco)\n         {\n-            if (exp.e1.op == EXP.variable)\n+            // try to resolve the type\n+            exp.e1.type = exp.e1.type.typeSemantic(exp.e1.loc, null);\n+            if (!exp.e1.type.deco)  // still couldn't resolve it\n             {\n-                VarExp ve = cast(VarExp)exp.e1;\n-                Declaration d = ve.var;\n-                exp.error(\"forward reference to %s `%s`\", d.kind(), d.toChars());\n+                if (auto ve = exp.e1.isVarExp())\n+                {\n+                    Declaration d = ve.var;\n+                    exp.error(\"forward reference to %s `%s`\", d.kind(), d.toChars());\n+                }\n+                else\n+                    exp.error(\"forward reference to type `%s` of expression `%s`\", exp.e1.type.toChars(), exp.e1.toChars());\n+                return setError();\n             }\n-            else\n-                exp.error(\"forward reference to `%s`\", exp.e1.toChars());\n-            return setError();\n         }\n \n         exp.type = exp.e1.type.pointerTo();\n@@ -7327,14 +7325,14 @@ private extern (C++) final class ExpressionSemanticVisitor : Visitor\n \n     override void visit(DeleteExp exp)\n     {\n-        if (!sc.isDeprecated)\n+        // @@@DEPRECATED_2.109@@@\n+        // 1. Deprecated since 2.079\n+        // 2. Error since 2.099\n+        // 3. Removal of keyword, \"delete\" can be used for other identities\n+        if (!exp.isRAII)\n         {\n-            // @@@DEPRECATED_2019-02@@@\n-            // 1. Deprecation for 1 year\n-            // 2. Error for 1 year\n-            // 3. Removal of keyword, \"delete\" can be used for other identities\n-            if (!exp.isRAII)\n-                deprecation(exp.loc, \"The `delete` keyword has been deprecated.  Use `object.destroy()` (and `core.memory.GC.free()` if applicable) instead.\");\n+            error(exp.loc, \"The `delete` keyword is obsolete.  Use `object.destroy()` (and `core.memory.GC.free()` if applicable) instead.\");\n+            return setError();\n         }\n \n         Expression e = exp;\n@@ -7353,89 +7351,32 @@ private extern (C++) final class ExpressionSemanticVisitor : Visitor\n         }\n         exp.type = Type.tvoid;\n \n-        AggregateDeclaration ad = null;\n         Type tb = exp.e1.type.toBasetype();\n-        switch (tb.ty)\n-        {\n-        case Tclass:\n-            {\n-                auto cd = (cast(TypeClass)tb).sym;\n-                if (cd.isCOMinterface())\n-                {\n-                    /* Because COM classes are deleted by IUnknown.Release()\n-                     */\n-                    exp.error(\"cannot `delete` instance of COM interface `%s`\", cd.toChars());\n-                    return setError();\n-                }\n-                ad = cd;\n-                break;\n-            }\n-        case Tpointer:\n-            tb = (cast(TypePointer)tb).next.toBasetype();\n-            if (tb.ty == Tstruct)\n-            {\n-                ad = (cast(TypeStruct)tb).sym;\n-\n-                Identifier hook = global.params.tracegc ? Id._d_delstructTrace : Id._d_delstruct;\n-                if (!verifyHookExist(exp.loc, *sc, Id._d_delstructImpl, \"deleting struct with dtor\", Id.object))\n-                    return setError();\n \n-                // Lower to .object._d_delstruct{,Trace}(exp.e1)\n-                Expression id = new IdentifierExp(exp.loc, Id.empty);\n-                id = new DotIdExp(exp.loc, id, Id.object);\n-\n-                auto tiargs = new Objects();\n-                tiargs.push(exp.e1.type);\n-                id = new DotTemplateInstanceExp(exp.loc, id, Id._d_delstructImpl, tiargs);\n-                id = new DotIdExp(exp.loc, id, hook);\n-\n-                e = new CallExp(exp.loc, id, exp.e1);\n-                /* Gag errors generated by calls to `_d_delstruct`, because they display\n-                 * internal compiler information, which is unnecessary to the user.\n-                 */\n-                uint errors = global.startGagging();\n-                e = e.expressionSemantic(sc);\n-                global.endGagging(errors);\n-            }\n-            break;\n-\n-        case Tarray:\n-            {\n-                Type tv = tb.nextOf().baseElemOf();\n-                if (tv.ty == Tstruct)\n-                {\n-                    ad = (cast(TypeStruct)tv).sym;\n-                    if (ad.dtor)\n-                        semanticTypeInfo(sc, ad.type);\n-                }\n-                break;\n-            }\n-        default:\n+        /* Now that `delete` in user code is an error, we only get here when\n+         * `isRAII` has been set to true for the deletion of a `scope class`.  */\n+        if (tb.ty != Tclass)\n+        {\n             exp.error(\"cannot delete type `%s`\", exp.e1.type.toChars());\n             return setError();\n         }\n \n-        bool err = false;\n-        if (ad)\n+        ClassDeclaration cd = (cast(TypeClass)tb).sym;\n+        if (cd.isCOMinterface())\n         {\n-            if (ad.dtor)\n-            {\n-                err |= !ad.dtor.functionSemantic();\n-                err |= exp.checkPurity(sc, ad.dtor);\n-                err |= exp.checkSafety(sc, ad.dtor);\n-                err |= exp.checkNogc(sc, ad.dtor);\n-            }\n-            if (err)\n-                return setError();\n+            /* Because COM classes are deleted by IUnknown.Release()\n+             */\n+            exp.error(\"cannot `delete` instance of COM interface `%s`\", cd.toChars());\n+            return setError();\n         }\n \n-        if (!sc.intypeof && sc.func &&\n-            !exp.isRAII &&\n-            !(sc.flags & SCOPE.debug_) &&\n-            sc.func.setUnsafe())\n+        bool err = false;\n+        if (cd.dtor)\n         {\n-            exp.error(\"`%s` is not `@safe` but is used in `@safe` function `%s`\", exp.toChars(), sc.func.toChars());\n-            err = true;\n+            err |= !cd.dtor.functionSemantic();\n+            err |= exp.checkPurity(sc, cd.dtor);\n+            err |= exp.checkSafety(sc, cd.dtor);\n+            err |= exp.checkNogc(sc, cd.dtor);\n         }\n         if (err)\n             return setError();\n@@ -7457,12 +7398,13 @@ private extern (C++) final class ExpressionSemanticVisitor : Visitor\n         }\n \n         if ((sc && sc.flags & SCOPE.Cfile) &&\n-            exp.to && exp.to.ty == Tident &&\n+            exp.to && (exp.to.ty == Tident || exp.to.ty == Tsarray) &&\n             (exp.e1.op == EXP.address || exp.e1.op == EXP.star ||\n              exp.e1.op == EXP.uadd || exp.e1.op == EXP.negate))\n         {\n             /* Ambiguous cases arise from CParser if type-name is just an identifier.\n              *   ( identifier ) cast-expression\n+             *   ( identifier [expression]) cast-expression\n              * If we determine that `identifier` is a variable, and cast-expression\n              * is one of the unary operators (& * + -), then rewrite this cast\n              * as a binary expression.\n@@ -9858,7 +9800,7 @@ private extern (C++) final class ExpressionSemanticVisitor : Visitor\n         {\n             VarExp ve = cast(VarExp)exp.e1;\n             VarDeclaration vd = ve.var.isVarDeclaration();\n-            if (vd && (vd.onstack || vd.mynew))\n+            if (vd && vd.onstack)\n             {\n                 assert(t1.ty == Tclass);\n                 exp.error(\"cannot rebind scope variables\");"}, {"sha": "39cb8456fdab419de4119e530030ef8cfb684bc0", "filename": "gcc/d/dmd/func.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Ffunc.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Ffunc.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Ffunc.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -567,7 +567,8 @@ extern (C++) class FuncDeclaration : Declaration\n              * do existing practice. But we should examine how TypeFunction does\n              * it, for consistency.\n              */\n-            if (!tf.isref && isRefReturnScope(vthis.storage_class))\n+            if (global.params.useDIP1000 != FeatureState.enabled &&\n+                !tf.isref && isRefReturnScope(vthis.storage_class))\n             {\n                 /* if `ref return scope`, evaluate to `ref` `return scope`\n                  */"}, {"sha": "6b8ecc5c07f4c45b1c6764b185da45b9ec1664f4", "filename": "gcc/d/dmd/hdrgen.d", "status": "modified", "additions": 7, "deletions": 63, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Fhdrgen.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Fhdrgen.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fhdrgen.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -991,8 +991,9 @@ public:\n     override void visit(VisibilityDeclaration d)\n     {\n         visibilityToBuffer(buf, d.visibility);\n-        buf.writeByte(' ');\n         AttribDeclaration ad = cast(AttribDeclaration)d;\n+        if (ad.decl.dim <= 1)\n+            buf.writeByte(' ');\n         if (ad.decl.dim == 1 && (*ad.decl)[0].isVisibilityDeclaration)\n             visit(cast(AttribDeclaration)(*ad.decl)[0]);\n         else\n@@ -1693,17 +1694,8 @@ public:\n \n     override void visit(DtorDeclaration d)\n     {\n-        if (d.storage_class & STC.trusted)\n-            buf.writestring(\"@trusted \");\n-        if (d.storage_class & STC.safe)\n-            buf.writestring(\"@safe \");\n-        if (d.storage_class & STC.nogc)\n-            buf.writestring(\"@nogc \");\n-        if (d.storage_class & STC.live)\n-            buf.writestring(\"@live \");\n-        if (d.storage_class & STC.disable)\n-            buf.writestring(\"@disable \");\n-\n+        if (stcToBuffer(buf, d.storage_class))\n+            buf.writeByte(' ');\n         buf.writestring(\"~this()\");\n         bodyToBuffer(d);\n     }\n@@ -1992,29 +1984,9 @@ public:\n     {\n         buf.writeByte('\"');\n         const o = buf.length;\n-        for (size_t i = 0; i < e.len; i++)\n+        foreach (i; 0 .. e.len)\n         {\n-            const c = e.charAt(i);\n-            switch (c)\n-            {\n-            case '\"':\n-            case '\\\\':\n-                buf.writeByte('\\\\');\n-                goto default;\n-            default:\n-                if (c <= 0xFF)\n-                {\n-                    if (c <= 0x7F && isprint(c))\n-                        buf.writeByte(c);\n-                    else\n-                        buf.printf(\"\\\\x%02x\", c);\n-                }\n-                else if (c <= 0xFFFF)\n-                    buf.printf(\"\\\\x%02x\\\\x%02x\", c & 0xFF, c >> 8);\n-                else\n-                    buf.printf(\"\\\\x%02x\\\\x%02x\\\\x%02x\\\\x%02x\", c & 0xFF, (c >> 8) & 0xFF, (c >> 16) & 0xFF, c >> 24);\n-                break;\n-            }\n+            writeCharLiteral(*buf, e.getCodeUnit(i));\n         }\n         if (hgs.ddoc)\n             escapeDdocString(buf, o);\n@@ -2113,12 +2085,6 @@ public:\n             buf.writeByte('.');\n         }\n         buf.writestring(\"new \");\n-        if (e.newargs && e.newargs.dim)\n-        {\n-            buf.writeByte('(');\n-            argsToBuffer(e.newargs, buf, hgs);\n-            buf.writeByte(')');\n-        }\n         typeToBuffer(e.newtype, null, buf, hgs);\n         if (e.arguments && e.arguments.dim)\n         {\n@@ -2136,12 +2102,6 @@ public:\n             buf.writeByte('.');\n         }\n         buf.writestring(\"new\");\n-        if (e.newargs && e.newargs.dim)\n-        {\n-            buf.writeByte('(');\n-            argsToBuffer(e.newargs, buf, hgs);\n-            buf.writeByte(')');\n-        }\n         buf.writestring(\" class \");\n         if (e.arguments && e.arguments.dim)\n         {\n@@ -2909,22 +2869,6 @@ string stcToString(ref StorageClass stc)\n     return null;\n }\n \n-/// Ditto\n-extern (D) string trustToString(TRUST trust) pure nothrow\n-{\n-    final switch (trust)\n-    {\n-    case TRUST.default_:\n-        return null;\n-    case TRUST.system:\n-        return \"@system\";\n-    case TRUST.trusted:\n-        return \"@trusted\";\n-    case TRUST.safe:\n-        return \"@safe\";\n-    }\n-}\n-\n private void linkageToBuffer(OutBuffer* buf, LINK linkage)\n {\n     const s = linkageToString(linkage);\n@@ -3902,7 +3846,7 @@ private void typeToBufferx(Type t, OutBuffer* buf, HdrGenState* hgs)\n         buf.writeByte(' ');\n         if (t.id)\n             buf.writestring(t.id.toChars());\n-        if (t.base.ty != TY.Tint32)\n+        if (t.tok == TOK.enum_ && t.base.ty != TY.Tint32)\n         {\n             buf.writestring(\" : \");\n             visitWithMask(t.base, t.mod, buf, hgs);"}, {"sha": "7d4fbc3e45b9dde0c360fb8d1ae3937580ab07fb", "filename": "gcc/d/dmd/iasmgcc.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Fiasmgcc.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Fiasmgcc.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fiasmgcc.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -84,7 +84,7 @@ int parseExtAsmOperands(Parser)(Parser p, GccAsmStatement s)\n \n             case TOK.string_:\n                 constraint = p.parsePrimaryExp();\n-                // @@@DEPRECATED@@@\n+                // @@@DEPRECATED_2.101@@@\n                 // Old parser allowed omitting parentheses around the expression.\n                 // Deprecated in 2.091. Can be made permanent error after 2.100\n                 if (p.token.value != TOK.leftParenthesis)"}, {"sha": "31a44db2542b819b70b62371b81ecc41e4df6f6a", "filename": "gcc/d/dmd/id.d", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Fid.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Fid.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fid.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -115,7 +115,6 @@ immutable Msgtable[] msgtable =\n     { \"line\" },\n     { \"empty\", \"\" },\n     { \"p\" },\n-    { \"q\" },\n     { \"__vptr\" },\n     { \"__monitor\" },\n     { \"gate\", \"__gate\" },\n@@ -311,9 +310,6 @@ immutable Msgtable[] msgtable =\n     { \"__ArrayPostblit\" },\n     { \"__ArrayDtor\" },\n     { \"_d_delThrowable\" },\n-    { \"_d_delstructImpl\" },\n-    { \"_d_delstruct\" },\n-    { \"_d_delstructTrace\" },\n     { \"_d_assert_fail\" },\n     { \"dup\" },\n     { \"_aaApply\" },"}, {"sha": "a48b339bf5047a27c095aba181d5d1c272f9498c", "filename": "gcc/d/dmd/importc.d", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Fimportc.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Fimportc.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fimportc.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -260,3 +260,50 @@ Expression castCallAmbiguity(Expression e, Scope* sc)\n     }\n }\n \n+/********************************************\n+ * Implement the C11 notion of function equivalence,\n+ * which allows prototyped functions to match K+R functions,\n+ * even though they are different.\n+ * Params:\n+ *      tf1 = type of first function\n+ *      tf2 = type of second function\n+ * Returns:\n+ *      true if C11 considers them equivalent\n+ */\n+\n+bool cFuncEquivalence(TypeFunction tf1, TypeFunction tf2)\n+{\n+    if (tf1.equals(tf2))\n+        return true;\n+\n+    if (tf1.linkage != tf2.linkage)\n+        return false;\n+\n+    // Allow func(void) to match func()\n+    if (tf1.parameterList.length == 0 && tf2.parameterList.length == 0)\n+        return true;\n+\n+    if (!tf1.parameterList.hasIdentifierList &&\n+        !tf2.parameterList.hasIdentifierList)\n+        return false;   // both functions are prototyped\n+\n+    // Otherwise ignore variadicness, as K+R functions are all variadic\n+\n+    if (!tf1.nextOf().equals(tf2.nextOf()))\n+        return false;   // function return types don't match\n+\n+    if (tf1.parameterList.length != tf2.parameterList.length)\n+        return false;\n+\n+    foreach (i, fparam ; tf1.parameterList)\n+    {\n+        Type t1 = fparam.type;\n+        Type t2 = tf2.parameterList[i].type;\n+        if (!t1.equals(t2))\n+            return false;\n+    }\n+\n+    //printf(\"t1: %s\\n\", tf1.toChars());\n+    //printf(\"t2: %s\\n\", tf2.toChars());\n+    return true;\n+}"}, {"sha": "bc02bf93476e4d46fea53298bb55125e724f1af2", "filename": "gcc/d/dmd/initsem.d", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Finitsem.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Finitsem.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Finitsem.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -590,7 +590,11 @@ extern(C++) Initializer initializerSemantic(Initializer init, Scope* sc, ref Typ\n                     i.exp = ErrorExp.get();\n                 }\n             }\n+            Type et = i.exp.type;\n+            const errors = global.startGagging();\n             i.exp = i.exp.implicitCastTo(sc, t);\n+            if (global.endGagging(errors))\n+                currExp.error(\"cannot implicitly convert expression `%s` of type `%s` to `%s`\", currExp.toChars(), et.toChars(), t.toChars());\n         }\n     L1:\n         if (i.exp.op == EXP.error)"}, {"sha": "7c8b504f4197ba7d2272b8be84839d33ff4b915d", "filename": "gcc/d/dmd/lexer.d", "status": "modified", "additions": 210, "deletions": 234, "changes": 444, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Flexer.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Flexer.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Flexer.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -38,172 +38,6 @@ import dmd.utils;\n \n nothrow:\n \n-private enum LS = 0x2028;       // UTF line separator\n-private enum PS = 0x2029;       // UTF paragraph separator\n-\n-/********************************************\n- * Do our own char maps\n- */\n-private static immutable cmtable = () {\n-    ubyte[256] table;\n-    foreach (const c; 0 .. table.length)\n-    {\n-        if ('0' <= c && c <= '7')\n-            table[c] |= CMoctal;\n-        if (c_isxdigit(c))\n-            table[c] |= CMhex;\n-        if (c_isalnum(c) || c == '_')\n-            table[c] |= CMidchar;\n-\n-        switch (c)\n-        {\n-            case 'x': case 'X':\n-            case 'b': case 'B':\n-                table[c] |= CMzerosecond;\n-                break;\n-\n-            case '0': .. case '9':\n-            case 'e': case 'E':\n-            case 'f': case 'F':\n-            case 'l': case 'L':\n-            case 'p': case 'P':\n-            case 'u': case 'U':\n-            case 'i':\n-            case '.':\n-            case '_':\n-                table[c] |= CMzerosecond | CMdigitsecond;\n-                break;\n-\n-            default:\n-                break;\n-        }\n-\n-        switch (c)\n-        {\n-            case '\\\\':\n-            case '\\n':\n-            case '\\r':\n-            case 0:\n-            case 0x1A:\n-            case '\\'':\n-                break;\n-            default:\n-                if (!(c & 0x80))\n-                    table[c] |= CMsinglechar;\n-                break;\n-        }\n-    }\n-    return table;\n-}();\n-\n-private\n-{\n-    enum CMoctal  = 0x1;\n-    enum CMhex    = 0x2;\n-    enum CMidchar = 0x4;\n-    enum CMzerosecond = 0x8;\n-    enum CMdigitsecond = 0x10;\n-    enum CMsinglechar = 0x20;\n-}\n-\n-private bool isoctal(const char c) pure @nogc @safe\n-{\n-    return (cmtable[c] & CMoctal) != 0;\n-}\n-\n-private bool ishex(const char c) pure @nogc @safe\n-{\n-    return (cmtable[c] & CMhex) != 0;\n-}\n-\n-private bool isidchar(const char c) pure @nogc @safe\n-{\n-    return (cmtable[c] & CMidchar) != 0;\n-}\n-\n-private bool isZeroSecond(const char c) pure @nogc @safe\n-{\n-    return (cmtable[c] & CMzerosecond) != 0;\n-}\n-\n-private bool isDigitSecond(const char c) pure @nogc @safe\n-{\n-    return (cmtable[c] & CMdigitsecond) != 0;\n-}\n-\n-private bool issinglechar(const char c) pure @nogc @safe\n-{\n-    return (cmtable[c] & CMsinglechar) != 0;\n-}\n-\n-private bool c_isxdigit(const int c) pure @nogc @safe\n-{\n-    return (( c >= '0' && c <= '9') ||\n-            ( c >= 'a' && c <= 'f') ||\n-            ( c >= 'A' && c <= 'F'));\n-}\n-\n-private bool c_isalnum(const int c) pure @nogc @safe\n-{\n-    return (( c >= '0' && c <= '9') ||\n-            ( c >= 'a' && c <= 'z') ||\n-            ( c >= 'A' && c <= 'Z'));\n-}\n-\n-unittest\n-{\n-    //printf(\"lexer.unittest\\n\");\n-    /* Not much here, just trying things out.\n-     */\n-    string text = \"int\"; // We rely on the implicit null-terminator\n-    scope Lexer lex1 = new Lexer(null, text.ptr, 0, text.length, 0, 0);\n-    TOK tok;\n-    tok = lex1.nextToken();\n-    //printf(\"tok == %s, %d, %d\\n\", Token::toChars(tok), tok, TOK.int32);\n-    assert(tok == TOK.int32);\n-    tok = lex1.nextToken();\n-    assert(tok == TOK.endOfFile);\n-    tok = lex1.nextToken();\n-    assert(tok == TOK.endOfFile);\n-    tok = lex1.nextToken();\n-    assert(tok == TOK.endOfFile);\n-}\n-\n-unittest\n-{\n-    // We don't want to see Lexer error output during these tests.\n-    uint errors = global.startGagging();\n-    scope(exit) global.endGagging(errors);\n-\n-    // Test malformed input: even malformed input should end in a TOK.endOfFile.\n-    static immutable char[][] testcases =\n-    [   // Testcase must end with 0 or 0x1A.\n-        [0], // not malformed, but pathological\n-        ['\\'', 0],\n-        ['\\'', 0x1A],\n-        ['{', '{', 'q', '{', 0],\n-        [0xFF, 0],\n-        [0xFF, 0x80, 0],\n-        [0xFF, 0xFF, 0],\n-        [0xFF, 0xFF, 0],\n-        ['x', '\"', 0x1A],\n-    ];\n-\n-    foreach (testcase; testcases)\n-    {\n-        scope Lexer lex2 = new Lexer(null, testcase.ptr, 0, testcase.length-1, 0, 0);\n-        TOK tok = lex2.nextToken();\n-        size_t iterations = 1;\n-        while ((tok != TOK.endOfFile) && (iterations++ < testcase.length))\n-        {\n-            tok = lex2.nextToken();\n-        }\n-        assert(tok == TOK.endOfFile);\n-        tok = lex2.nextToken();\n-        assert(tok == TOK.endOfFile);\n-    }\n-}\n-\n version (DMDLIB)\n {\n     version = LocOffset;\n@@ -440,7 +274,7 @@ class Lexer\n                 if (issinglechar(p[1]) && p[2] == '\\'')\n                 {\n                     t.unsvalue = p[1];        // simple one character literal\n-                    t.value = Ccompile ? TOK.int32Literal : TOK.charLiteral;\n+                    t.value = TOK.charLiteral;\n                     p += 3;\n                 }\n                 else if (Ccompile)\n@@ -1716,9 +1550,11 @@ class Lexer\n         if (*p == '\"')\n             p++;\n         else if (hereid)\n-            error(\"delimited string must end in %s\\\"\", hereid.toChars());\n+            error(\"delimited string must end in `%s\\\"`\", hereid.toChars());\n+        else if (isspace(delimright))\n+            error(\"delimited string must end in `\\\"`\");\n         else\n-            error(\"delimited string must end in %c\\\"\", delimright);\n+            error(\"delimited string must end in `%c\\\"`\", delimright);\n         result.setString(stringbuffer);\n         stringPostfix(result);\n     }\n@@ -2030,7 +1866,7 @@ class Lexer\n             default:\n                 assert(0);\n         }\n-        t.value = TOK.int32Literal;\n+        t.value = n == 1 ? TOK.charLiteral : TOK.int32Literal;\n         t.unsvalue = u;\n     }\n \n@@ -2113,7 +1949,11 @@ class Lexer\n                 if (p[1] == '.')\n                     goto Ldone; // if \"..\"\n                 if (isalpha(p[1]) || p[1] == '_' || p[1] & 0x80)\n+                {\n+                    if (Ccompile && (p[1] == 'f' || p[1] == 'F' || p[1] == 'l' || p[1] == 'L'))\n+                        goto Lreal;  // if `0.f` or `0.L`\n                     goto Ldone; // if \".identifier\" or \".unicode\"\n+                }\n                 goto Lreal; // '.' is part of current token\n             case 'i':\n             case 'f':\n@@ -2182,7 +2022,12 @@ class Lexer\n                 if (p[1] == '.')\n                     goto Ldone; // if \"..\"\n                 if (base <= 10 && n > 0 && (isalpha(p[1]) || p[1] == '_' || p[1] & 0x80))\n+                {\n+                    if (Ccompile && base == 10 &&\n+                        (p[1] == 'f' || p[1] == 'F' || p[1] == 'l' || p[1] == 'L'))\n+                        goto Lreal;  // if `1.f` or `1.L`\n                     goto Ldone; // if \".identifier\" or \".unicode\"\n+                }\n                 if (base == 16 && (!ishex(p[1]) || p[1] == '_' || p[1] & 0x80))\n                     goto Ldone; // if \".identifier\" or \".unicode\"\n                 if (base == 2)\n@@ -2421,11 +2266,6 @@ class Lexer\n             flags = cast(FLAGS)(flags | f);\n         }\n \n-        void overflow()\n-        {\n-            error(\"integer overflow\");\n-        }\n-\n         TOK result = TOK.int32Literal;     // default\n         switch (flags)\n         {\n@@ -2438,91 +2278,50 @@ class Lexer\n                  * First that fits: int, unsigned, long, unsigned long,\n                  * long long, unsigned long long\n                  */\n-                if (longsize == 4)\n-                {\n-                    if (n & 0x8000000000000000L)\n-                        result = TOK.uns64Literal;\n-                    else if (n & 0xFFFFFFFF00000000L)\n-                        result = TOK.int64Literal;\n-                    else if (n & 0x80000000)\n-                        result = TOK.uns32Literal;\n-                    else\n-                        result = TOK.int32Literal;\n-                }\n+                if (n & 0x8000000000000000L)\n+                    result = TOK.uns64Literal;      // unsigned long\n+                else if (n & 0xFFFFFFFF00000000L)\n+                    result = TOK.int64Literal;      // long\n+                else if (n & 0x80000000)\n+                    result = TOK.uns32Literal;\n                 else\n-                {\n-                    if (n & 0x8000000000000000L)\n-                        result = TOK.uns64Literal;      // unsigned long\n-                    else if (n & 0xFFFFFFFF00000000L)\n-                        result = TOK.int64Literal;      // long\n-                    else if (n & 0x80000000)\n-                        result = TOK.uns32Literal;\n-                    else\n-                        result = TOK.int32Literal;\n-                }\n+                    result = TOK.int32Literal;\n                 break;\n \n             case FLAGS.decimal:\n                 /* First that fits: int, long, long long\n                  */\n-                if (longsize == 4)\n-                {\n-                    if (n & 0x8000000000000000L)\n-                        result = TOK.uns64Literal;\n-                    else if (n & 0xFFFFFFFF80000000L)\n-                        result = TOK.int64Literal;\n-                    else\n-                        result = TOK.int32Literal;\n-                }\n+                if (n & 0x8000000000000000L)\n+                    result = TOK.uns64Literal;      // unsigned long\n+                else if (n & 0xFFFFFFFF80000000L)\n+                    result = TOK.int64Literal;      // long\n                 else\n-                {\n-                    if (n & 0x8000000000000000L)\n-                        result = TOK.uns64Literal;      // unsigned long\n-                    else if (n & 0xFFFFFFFF80000000L)\n-                        result = TOK.int64Literal;      // long\n-                    else\n-                        result = TOK.int32Literal;\n-                }\n+                    result = TOK.int32Literal;\n                 break;\n \n             case FLAGS.octalhex | FLAGS.unsigned:\n             case FLAGS.decimal | FLAGS.unsigned:\n                 /* First that fits: unsigned, unsigned long, unsigned long long\n                  */\n-                if (longsize == 4)\n-                {\n-                    if (n & 0xFFFFFFFF00000000L)\n-                        result = TOK.uns64Literal;\n-                    else\n-                        result = TOK.uns32Literal;\n-                }\n+                if (n & 0xFFFFFFFF00000000L)\n+                    result = TOK.uns64Literal;      // unsigned long\n                 else\n-                {\n-                    if (n & 0xFFFFFFFF00000000L)\n-                        result = TOK.uns64Literal;      // unsigned long\n-                    else\n-                        result = TOK.uns32Literal;\n-                }\n+                    result = TOK.uns32Literal;\n                 break;\n \n             case FLAGS.decimal | FLAGS.long_:\n                 /* First that fits: long, long long\n                  */\n                 if (longsize == 4)\n                 {\n-                    if (n & 0x8000000000000000L)\n-                        overflow();\n-                    else if (n & 0xFFFFFFFF_80000000L)\n+                    if (n & 0xFFFFFFFF_80000000L)\n                         result = TOK.int64Literal;\n                     else\n-                        result = TOK.int32Literal;      // long\n+                        result = TOK.int32Literal;  // long\n                 }\n                 else\n                 {\n-                    if (n & 0x8000000000000000L)\n-                        overflow();\n-                    else\n-                        result = TOK.int64Literal;      // long\n+                    result = TOK.int64Literal;      // long\n                 }\n                 break;\n \n@@ -3353,6 +3152,11 @@ class Lexer\n     }\n }\n \n+\n+/******************************* Private *****************************************/\n+\n+private:\n+\n /// Support for `__DATE__`, `__TIME__`, and `__TIMESTAMP__`\n private struct TimeStampInfo\n {\n@@ -3389,6 +3193,121 @@ private struct TimeStampInfo\n     }\n }\n \n+private enum LS = 0x2028;       // UTF line separator\n+private enum PS = 0x2029;       // UTF paragraph separator\n+\n+/********************************************\n+ * Do our own char maps\n+ */\n+private static immutable cmtable = ()\n+{\n+    ubyte[256] table;\n+    foreach (const c; 0 .. table.length)\n+    {\n+        if ('0' <= c && c <= '7')\n+            table[c] |= CMoctal;\n+        if (c_isxdigit(c))\n+            table[c] |= CMhex;\n+        if (c_isalnum(c) || c == '_')\n+            table[c] |= CMidchar;\n+\n+        switch (c)\n+        {\n+            case 'x': case 'X':\n+            case 'b': case 'B':\n+                table[c] |= CMzerosecond;\n+                break;\n+\n+            case '0': .. case '9':\n+            case 'e': case 'E':\n+            case 'f': case 'F':\n+            case 'l': case 'L':\n+            case 'p': case 'P':\n+            case 'u': case 'U':\n+            case 'i':\n+            case '.':\n+            case '_':\n+                table[c] |= CMzerosecond | CMdigitsecond;\n+                break;\n+\n+            default:\n+                break;\n+        }\n+\n+        switch (c)\n+        {\n+            case '\\\\':\n+            case '\\n':\n+            case '\\r':\n+            case 0:\n+            case 0x1A:\n+            case '\\'':\n+                break;\n+            default:\n+                if (!(c & 0x80))\n+                    table[c] |= CMsinglechar;\n+                break;\n+        }\n+    }\n+    return table;\n+}();\n+\n+private\n+{\n+    enum CMoctal  = 0x1;\n+    enum CMhex    = 0x2;\n+    enum CMidchar = 0x4;\n+    enum CMzerosecond = 0x8;\n+    enum CMdigitsecond = 0x10;\n+    enum CMsinglechar = 0x20;\n+}\n+\n+private bool isoctal(const char c) pure @nogc @safe\n+{\n+    return (cmtable[c] & CMoctal) != 0;\n+}\n+\n+private bool ishex(const char c) pure @nogc @safe\n+{\n+    return (cmtable[c] & CMhex) != 0;\n+}\n+\n+private bool isidchar(const char c) pure @nogc @safe\n+{\n+    return (cmtable[c] & CMidchar) != 0;\n+}\n+\n+private bool isZeroSecond(const char c) pure @nogc @safe\n+{\n+    return (cmtable[c] & CMzerosecond) != 0;\n+}\n+\n+private bool isDigitSecond(const char c) pure @nogc @safe\n+{\n+    return (cmtable[c] & CMdigitsecond) != 0;\n+}\n+\n+private bool issinglechar(const char c) pure @nogc @safe\n+{\n+    return (cmtable[c] & CMsinglechar) != 0;\n+}\n+\n+private bool c_isxdigit(const int c) pure @nogc @safe\n+{\n+    return (( c >= '0' && c <= '9') ||\n+            ( c >= 'a' && c <= 'f') ||\n+            ( c >= 'A' && c <= 'F'));\n+}\n+\n+private bool c_isalnum(const int c) pure @nogc @safe\n+{\n+    return (( c >= '0' && c <= '9') ||\n+            ( c >= 'a' && c <= 'z') ||\n+            ( c >= 'A' && c <= 'Z'));\n+}\n+\n+/******************************* Unittest *****************************************/\n+\n unittest\n {\n     import dmd.console;\n@@ -3441,6 +3360,7 @@ unittest\n \n     diagnosticHandler = null;\n }\n+\n unittest\n {\n     import dmd.console;\n@@ -3510,3 +3430,59 @@ unittest\n \n     diagnosticHandler = null;\n }\n+\n+unittest\n+{\n+    //printf(\"lexer.unittest\\n\");\n+    /* Not much here, just trying things out.\n+     */\n+    string text = \"int\"; // We rely on the implicit null-terminator\n+    scope Lexer lex1 = new Lexer(null, text.ptr, 0, text.length, 0, 0);\n+    TOK tok;\n+    tok = lex1.nextToken();\n+    //printf(\"tok == %s, %d, %d\\n\", Token::toChars(tok), tok, TOK.int32);\n+    assert(tok == TOK.int32);\n+    tok = lex1.nextToken();\n+    assert(tok == TOK.endOfFile);\n+    tok = lex1.nextToken();\n+    assert(tok == TOK.endOfFile);\n+    tok = lex1.nextToken();\n+    assert(tok == TOK.endOfFile);\n+}\n+\n+unittest\n+{\n+    // We don't want to see Lexer error output during these tests.\n+    uint errors = global.startGagging();\n+    scope(exit) global.endGagging(errors);\n+\n+    // Test malformed input: even malformed input should end in a TOK.endOfFile.\n+    static immutable char[][] testcases =\n+    [   // Testcase must end with 0 or 0x1A.\n+        [0], // not malformed, but pathological\n+        ['\\'', 0],\n+        ['\\'', 0x1A],\n+        ['{', '{', 'q', '{', 0],\n+        [0xFF, 0],\n+        [0xFF, 0x80, 0],\n+        [0xFF, 0xFF, 0],\n+        [0xFF, 0xFF, 0],\n+        ['x', '\"', 0x1A],\n+    ];\n+\n+    foreach (testcase; testcases)\n+    {\n+        scope Lexer lex2 = new Lexer(null, testcase.ptr, 0, testcase.length-1, 0, 0);\n+        TOK tok = lex2.nextToken();\n+        size_t iterations = 1;\n+        while ((tok != TOK.endOfFile) && (iterations++ < testcase.length))\n+        {\n+            tok = lex2.nextToken();\n+        }\n+        assert(tok == TOK.endOfFile);\n+        tok = lex2.nextToken();\n+        assert(tok == TOK.endOfFile);\n+    }\n+}\n+\n+"}, {"sha": "28978776e03edbad835d4b4b76096a65d2bd7d85", "filename": "gcc/d/dmd/mtype.d", "status": "modified", "additions": 37, "deletions": 8, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Fmtype.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Fmtype.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fmtype.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -206,6 +206,32 @@ string MODtoString(MOD mod) nothrow pure\n     }\n }\n \n+/*************************************************\n+ * Pick off one of the trust flags from trust,\n+ * and return a string representation of it.\n+ */\n+string trustToString(TRUST trust) pure nothrow @nogc @safe\n+{\n+    final switch (trust)\n+    {\n+    case TRUST.default_:\n+        return null;\n+    case TRUST.system:\n+        return \"@system\";\n+    case TRUST.trusted:\n+        return \"@trusted\";\n+    case TRUST.safe:\n+        return \"@safe\";\n+    }\n+}\n+\n+unittest\n+{\n+    assert(trustToString(TRUST.default_) == \"\");\n+    assert(trustToString(TRUST.system) == \"@system\");\n+    assert(trustToString(TRUST.trusted) == \"@trusted\");\n+    assert(trustToString(TRUST.safe) == \"@safe\");\n+}\n \n /************************************\n  * Convert MODxxxx to STCxxx\n@@ -400,7 +426,7 @@ extern (C++) abstract class Type : ASTNode\n     extern (C++) __gshared Type[TMAX] basic;\n \n     extern (D) __gshared StringTable!Type stringtable;\n-    extern (D) private __gshared ubyte[TMAX] sizeTy = ()\n+    extern (D) private static immutable ubyte[TMAX] sizeTy = ()\n         {\n             ubyte[TMAX] sizeTy = __traits(classInstanceSize, TypeBasic);\n             sizeTy[Tsarray] = __traits(classInstanceSize, TypeSArray);\n@@ -2604,6 +2630,10 @@ extern (C++) abstract class Type : ASTNode\n             default:\n                 assert(0);\n             }\n+            // @@@DEPRECATED_2.117@@@\n+            // Deprecated in 2.097 - Can be made an error from 2.117.\n+            // The deprecation period is longer than usual as `cfloat`,\n+            // `cdouble`, and `creal` were quite widely used.\n             if (t.iscomplex())\n             {\n                 deprecation(loc, \"use of complex type `%s` is deprecated, use `std.complex.Complex!(%s)` instead\",\n@@ -4219,9 +4249,9 @@ extern (C++) final class TypeFunction : TypeNext\n         this.trust = TRUST.default_;\n         if (stc & STC.safe)\n             this.trust = TRUST.safe;\n-        if (stc & STC.system)\n+        else if (stc & STC.system)\n             this.trust = TRUST.system;\n-        if (stc & STC.trusted)\n+        else if (stc & STC.trusted)\n             this.trust = TRUST.trusted;\n     }\n \n@@ -6346,7 +6376,7 @@ extern (C++) final class TypeClass : Type\n         /* Conversion derived to const(base)\n          */\n         int offset = 0;\n-        if (to.isBaseOf(this, &offset) && offset == 0 && MODimplicitConv(mod, to.mod))\n+        if (to.isBaseOf(this, &offset) && MODimplicitConv(mod, to.mod))\n         {\n             // Disallow:\n             //  derived to base\n@@ -7253,10 +7283,9 @@ void attributesApply(const TypeFunction tf, void delegate(string) dg, TRUSTforma\n \n     if (trustAttrib == TRUST.default_)\n     {\n-        if (trustFormat == TRUSTformatSystem)\n-            trustAttrib = TRUST.system;\n-        else\n-            return; // avoid calling with an empty string\n+        if (trustFormat != TRUSTformatSystem)\n+            return;\n+        trustAttrib = TRUST.system; // avoid calling with an empty string\n     }\n \n     dg(trustToString(trustAttrib));"}, {"sha": "d6735d45099cbf01f00337cf550984ac3d90428b", "filename": "gcc/d/dmd/nogc.d", "status": "modified", "additions": 2, "deletions": 40, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Fnogc.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Fnogc.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fnogc.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -84,20 +84,6 @@ public:\n             }\n             f.printGCUsage(e.loc, \"setting `length` may cause a GC allocation\");\n         }\n-        else if (fd.ident == Id._d_delstruct)\n-        {\n-            // In expressionsem.d, `delete s` was lowererd to `_d_delstruct(s)`.\n-            // The following code handles the call like the original expression,\n-            // so the error is menaningful to the user.\n-            if (f.setGC())\n-            {\n-                e.error(\"cannot use `delete` in `@nogc` %s `%s`\", f.kind(),\n-                    f.toPrettyChars());\n-                err = true;\n-                return;\n-            }\n-            f.printGCUsage(e.loc, \"`delete` requires the GC\");\n-        }\n     }\n \n     override void visit(ArrayLiteralExp e)\n@@ -158,32 +144,8 @@ public:\n                 return; // delete for scope allocated class object\n         }\n \n-        Type tb = e.e1.type.toBasetype();\n-        AggregateDeclaration ad = null;\n-        switch (tb.ty)\n-        {\n-        case Tclass:\n-            ad = (cast(TypeClass)tb).sym;\n-            break;\n-\n-        case Tpointer:\n-            tb = (cast(TypePointer)tb).next.toBasetype();\n-            if (tb.ty == Tstruct)\n-                ad = (cast(TypeStruct)tb).sym;\n-            break;\n-\n-        default:\n-            break;\n-        }\n-\n-        if (f.setGC())\n-        {\n-            e.error(\"cannot use `delete` in `@nogc` %s `%s`\",\n-                f.kind(), f.toPrettyChars());\n-            err = true;\n-            return;\n-        }\n-        f.printGCUsage(e.loc, \"`delete` requires the GC\");\n+        // Semantic should have already handled this case.\n+        assert(0);\n     }\n \n     override void visit(IndexExp e)"}, {"sha": "01708d65655d28b86e5224213ea0d674538e7c9c", "filename": "gcc/d/dmd/opover.d", "status": "modified", "additions": 162, "deletions": 180, "changes": 342, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Fopover.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Fopover.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fopover.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -272,47 +272,31 @@ private Expression checkAliasThisForRhs(AggregateDeclaration ad, Scope* sc, BinE\n  */\n Expression op_overload(Expression e, Scope* sc, EXP* pop = null)\n {\n-    extern (C++) final class OpOverload : Visitor\n-    {\n-        alias visit = Visitor.visit;\n-    public:\n-        Scope* sc;\n-        EXP* pop;\n-        Expression result;\n-\n-        extern (D) this(Scope* sc, EXP* pop)\n-        {\n-            this.sc = sc;\n-            this.pop = pop;\n-        }\n-\n-        override void visit(Expression e)\n+        Expression visit(Expression e)\n         {\n             assert(0);\n         }\n \n-        override void visit(UnaExp e)\n+        Expression visitUna(UnaExp e)\n         {\n             //printf(\"UnaExp::op_overload() (%s)\\n\", e.toChars());\n-            if (e.e1.op == EXP.array)\n+            Expression result;\n+            if (auto ae = e.e1.isArrayExp())\n             {\n-                ArrayExp ae = cast(ArrayExp)e.e1;\n                 ae.e1 = ae.e1.expressionSemantic(sc);\n                 ae.e1 = resolveProperties(sc, ae.e1);\n                 Expression ae1old = ae.e1;\n                 const(bool) maybeSlice = (ae.arguments.dim == 0 || ae.arguments.dim == 1 && (*ae.arguments)[0].op == EXP.interval);\n                 IntervalExp ie = null;\n                 if (maybeSlice && ae.arguments.dim)\n                 {\n-                    assert((*ae.arguments)[0].op == EXP.interval);\n-                    ie = cast(IntervalExp)(*ae.arguments)[0];\n+                    ie = (*ae.arguments)[0].isIntervalExp();\n                 }\n                 while (true)\n                 {\n                     if (ae.e1.op == EXP.error)\n                     {\n-                        result = ae.e1;\n-                        return;\n+                        return ae.e1;\n                     }\n                     Expression e0 = null;\n                     Expression ae1save = ae.e1;\n@@ -328,7 +312,7 @@ Expression op_overload(Expression e, Scope* sc, EXP* pop = null)\n                         if (!result) // op(a[i..j]) might be: a.opSliceUnary!(op)(i, j)\n                             goto Lfallback;\n                         if (result.op == EXP.error)\n-                            return;\n+                            return result;\n                         /* Rewrite op(a[arguments]) as:\n                          *      a.opIndexUnary!(op)(arguments)\n                          */\n@@ -342,8 +326,7 @@ Expression op_overload(Expression e, Scope* sc, EXP* pop = null)\n                             result = result.expressionSemantic(sc);\n                         if (result)\n                         {\n-                            result = Expression.combine(e0, result);\n-                            return;\n+                            return Expression.combine(e0, result);\n                         }\n                     }\n                 Lfallback:\n@@ -352,7 +335,7 @@ Expression op_overload(Expression e, Scope* sc, EXP* pop = null)\n                         // Deal with $\n                         result = resolveOpDollar(sc, ae, ie, &e0);\n                         if (result.op == EXP.error)\n-                            return;\n+                            return result;\n                         /* Rewrite op(a[i..j]) as:\n                          *      a.opSliceUnary!(op)(i, j)\n                          */\n@@ -367,7 +350,7 @@ Expression op_overload(Expression e, Scope* sc, EXP* pop = null)\n                         result = new CallExp(e.loc, result, a);\n                         result = result.expressionSemantic(sc);\n                         result = Expression.combine(e0, result);\n-                        return;\n+                        return result;\n                     }\n                     // Didn't find it. Forward to aliasthis\n                     if (ad.aliasthis && !isRecursiveAliasThis(ae.att1, ae.e1.type))\n@@ -388,8 +371,7 @@ Expression op_overload(Expression e, Scope* sc, EXP* pop = null)\n             e.e1 = resolveProperties(sc, e.e1);\n             if (e.e1.op == EXP.error)\n             {\n-                result = e.e1;\n-                return;\n+                return e.e1;\n             }\n             AggregateDeclaration ad = isAggregate(e.e1.type);\n             if (ad)\n@@ -405,7 +387,7 @@ Expression op_overload(Expression e, Scope* sc, EXP* pop = null)\n                     result = new DotTemplateInstanceExp(e.loc, e.e1, fd.ident, tiargs);\n                     result = new CallExp(e.loc, result);\n                     result = result.expressionSemantic(sc);\n-                    return;\n+                    return result;\n                 }\n                 // D1-style operator overloads, deprecated\n                 if (e.op != EXP.prePlusPlus && e.op != EXP.preMinusMinus)\n@@ -420,7 +402,7 @@ Expression op_overload(Expression e, Scope* sc, EXP* pop = null)\n                         e.deprecation(\"`%s` is deprecated.  Use `opUnary(string op)() if (op == \\\"%s\\\")` instead.\", id.toChars(), EXPtoString(e.op).ptr);\n                         // Rewrite +e1 as e1.add()\n                         result = build_overload(e.loc, sc, e.e1, null, fd);\n-                        return;\n+                        return result;\n                     }\n                 }\n                 // Didn't find it. Forward to aliasthis\n@@ -434,12 +416,13 @@ Expression op_overload(Expression e, Scope* sc, EXP* pop = null)\n                     UnaExp ue = cast(UnaExp)e.copy();\n                     ue.e1 = e1;\n                     result = ue.trySemantic(sc);\n-                    return;\n+                    return result;\n                 }\n             }\n+            return result;\n         }\n \n-        override void visit(ArrayExp ae)\n+        Expression visitArray(ArrayExp ae)\n         {\n             //printf(\"ArrayExp::op_overload() (%s)\\n\", ae.toChars());\n             ae.e1 = ae.e1.expressionSemantic(sc);\n@@ -449,15 +432,14 @@ Expression op_overload(Expression e, Scope* sc, EXP* pop = null)\n             IntervalExp ie = null;\n             if (maybeSlice && ae.arguments.dim)\n             {\n-                assert((*ae.arguments)[0].op == EXP.interval);\n-                ie = cast(IntervalExp)(*ae.arguments)[0];\n+                ie = (*ae.arguments)[0].isIntervalExp();\n             }\n+            Expression result;\n             while (true)\n             {\n                 if (ae.e1.op == EXP.error)\n                 {\n-                    result = ae.e1;\n-                    return;\n+                    return ae.e1;\n                 }\n                 Expression e0 = null;\n                 Expression ae1save = ae.e1;\n@@ -475,14 +457,14 @@ Expression op_overload(Expression e, Scope* sc, EXP* pop = null)\n                         {\n                             result = new SliceExp(ae.loc, ae.e1, ie);\n                             result = result.expressionSemantic(sc);\n-                            return;\n+                            return result;\n                         }\n                         // Convert to IndexExp\n                         if (ae.arguments.dim == 1)\n                         {\n                             result = new IndexExp(ae.loc, ae.e1, (*ae.arguments)[0]);\n                             result = result.expressionSemantic(sc);\n-                            return;\n+                            return result;\n                         }\n                     }\n                     break;\n@@ -494,7 +476,7 @@ Expression op_overload(Expression e, Scope* sc, EXP* pop = null)\n                     if (!result) // a[i..j] might be: a.opSlice(i, j)\n                         goto Lfallback;\n                     if (result.op == EXP.error)\n-                        return;\n+                        return result;\n                     /* Rewrite e1[arguments] as:\n                      *      e1.opIndex(arguments)\n                      */\n@@ -507,8 +489,7 @@ Expression op_overload(Expression e, Scope* sc, EXP* pop = null)\n                         result = result.expressionSemantic(sc);\n                     if (result)\n                     {\n-                        result = Expression.combine(e0, result);\n-                        return;\n+                        return Expression.combine(e0, result);\n                     }\n                 }\n             Lfallback:\n@@ -517,7 +498,7 @@ Expression op_overload(Expression e, Scope* sc, EXP* pop = null)\n                     result = new SliceExp(ae.loc, ae.e1, ie);\n                     result = result.expressionSemantic(sc);\n                     result = Expression.combine(e0, result);\n-                    return;\n+                    return result;\n                 }\n                 if (maybeSlice && search_function(ad, Id.slice))\n                 {\n@@ -529,7 +510,7 @@ Expression op_overload(Expression e, Scope* sc, EXP* pop = null)\n                         if (!e0 && !search_function(ad, Id.dollar)) {\n                             ae.loc.errorSupplemental(\"Aggregate declaration '%s' does not define 'opDollar'\", ae.e1.toChars());\n                         }\n-                        return;\n+                        return result;\n                     }\n                     /* Rewrite a[i..j] as:\n                      *      a.opSlice(i, j)\n@@ -544,7 +525,7 @@ Expression op_overload(Expression e, Scope* sc, EXP* pop = null)\n                     result = new CallExp(ae.loc, result, a);\n                     result = result.expressionSemantic(sc);\n                     result = Expression.combine(e0, result);\n-                    return;\n+                    return result;\n                 }\n                 // Didn't find it. Forward to aliasthis\n                 if (ad.aliasthis && !isRecursiveAliasThis(ae.att1, ae.e1.type))\n@@ -561,15 +542,17 @@ Expression op_overload(Expression e, Scope* sc, EXP* pop = null)\n             }\n             ae.e1 = ae1old; // recovery\n             ae.lengthVar = null;\n+            return result;\n         }\n \n         /***********************************************\n          * This is mostly the same as UnaryExp::op_overload(), but has\n          * a different rewrite.\n          */\n-        override void visit(CastExp e)\n+        Expression visitCast(CastExp e)\n         {\n             //printf(\"CastExp::op_overload() (%s)\\n\", e.toChars());\n+            Expression result;\n             AggregateDeclaration ad = isAggregate(e.e1.type);\n             if (ad)\n             {\n@@ -586,16 +569,15 @@ Expression op_overload(Expression e, Scope* sc, EXP* pop = null)\n                         if (fd.isFuncDeclaration())\n                         {\n                             // Rewrite as:  e1.opCast()\n-                            result = build_overload(e.loc, sc, e.e1, null, fd);\n-                            return;\n+                            return build_overload(e.loc, sc, e.e1, null, fd);\n                         }\n                     }\n                     auto tiargs = new Objects();\n                     tiargs.push(e.to);\n                     result = new DotTemplateInstanceExp(e.loc, e.e1, fd.ident, tiargs);\n                     result = new CallExp(e.loc, result);\n                     result = result.expressionSemantic(sc);\n-                    return;\n+                    return result;\n                 }\n                 // Didn't find it. Forward to aliasthis\n                 if (ad.aliasthis && !isRecursiveAliasThis(e.att1, e.e1.type))\n@@ -608,13 +590,14 @@ Expression op_overload(Expression e, Scope* sc, EXP* pop = null)\n                         result = e.copy();\n                         (cast(UnaExp)result).e1 = e1;\n                         result = result.op_overload(sc);\n-                        return;\n+                        return result;\n                     }\n                 }\n             }\n+            return result;\n         }\n \n-        override void visit(BinExp e)\n+        Expression visitBin(BinExp e)\n         {\n             //printf(\"BinExp::op_overload() (%s)\\n\", e.toChars());\n             Identifier id = opId(e);\n@@ -635,7 +618,7 @@ Expression op_overload(Expression e, Scope* sc, EXP* pop = null)\n                      (sd.hasBlitAssign && !e.e2.isLvalue())))\n                 {\n                     /* This is bitwise struct assignment. */\n-                    return;\n+                    return null;\n                 }\n             }\n             Dsymbol s = null;\n@@ -645,7 +628,7 @@ Expression op_overload(Expression e, Scope* sc, EXP* pop = null)\n             {\n                 // Bug4099 fix\n                 if (ad1 && search_function(ad1, Id.opUnary))\n-                    return;\n+                    return null;\n             }\n             if (e.op != EXP.equal && e.op != EXP.notEqual && e.op != EXP.assign && e.op != EXP.plusPlus && e.op != EXP.minusMinus)\n             {\n@@ -657,8 +640,7 @@ Expression op_overload(Expression e, Scope* sc, EXP* pop = null)\n                     if (s && !s.isTemplateDeclaration())\n                     {\n                         e.e1.error(\"`%s.opBinary` isn't a template\", e.e1.toChars());\n-                        result = ErrorExp.get();\n-                        return;\n+                        return ErrorExp.get();\n                     }\n                 }\n                 if (ad2)\n@@ -667,8 +649,7 @@ Expression op_overload(Expression e, Scope* sc, EXP* pop = null)\n                     if (s_r && !s_r.isTemplateDeclaration())\n                     {\n                         e.e2.error(\"`%s.opBinaryRight` isn't a template\", e.e2.toChars());\n-                        result = ErrorExp.get();\n-                        return;\n+                        return ErrorExp.get();\n                     }\n                     if (s_r && s_r == s) // https://issues.dlang.org/show_bug.cgi?id=12778\n                         s_r = null;\n@@ -735,8 +716,7 @@ Expression op_overload(Expression e, Scope* sc, EXP* pop = null)\n                     functionResolve(m, s, e.loc, sc, tiargs, e.e1.type, &args2);\n                     if (m.lastf && (m.lastf.errors || m.lastf.semantic3Errors))\n                     {\n-                        result = ErrorExp.get();\n-                        return;\n+                        return ErrorExp.get();\n                     }\n                 }\n                 FuncDeclaration lastf = m.lastf;\n@@ -745,8 +725,7 @@ Expression op_overload(Expression e, Scope* sc, EXP* pop = null)\n                     functionResolve(m, s_r, e.loc, sc, tiargs, e.e2.type, &args1);\n                     if (m.lastf && (m.lastf.errors || m.lastf.semantic3Errors))\n                     {\n-                        result = ErrorExp.get();\n-                        return;\n+                        return ErrorExp.get();\n                     }\n                 }\n                 if (m.count > 1)\n@@ -766,19 +745,18 @@ Expression op_overload(Expression e, Scope* sc, EXP* pop = null)\n                     // as unary, but it's implemented as a binary.\n                     // Rewrite (e1 ++ e2) as e1.postinc()\n                     // Rewrite (e1 -- e2) as e1.postdec()\n-                    result = build_overload(e.loc, sc, e.e1, null, m.lastf ? m.lastf : s);\n+                    return build_overload(e.loc, sc, e.e1, null, m.lastf ? m.lastf : s);\n                 }\n                 else if (lastf && m.lastf == lastf || !s_r && m.last == MATCH.nomatch)\n                 {\n                     // Rewrite (e1 op e2) as e1.opfunc(e2)\n-                    result = build_overload(e.loc, sc, e.e1, e.e2, m.lastf ? m.lastf : s);\n+                    return build_overload(e.loc, sc, e.e1, e.e2, m.lastf ? m.lastf : s);\n                 }\n                 else\n                 {\n                     // Rewrite (e1 op e2) as e2.opfunc_r(e1)\n-                    result = build_overload(e.loc, sc, e.e2, e.e1, m.lastf ? m.lastf : s_r);\n+                    return build_overload(e.loc, sc, e.e2, e.e1, m.lastf ? m.lastf : s_r);\n                 }\n-                return;\n             }\n         L1:\n             version (all)\n@@ -820,8 +798,7 @@ Expression op_overload(Expression e, Scope* sc, EXP* pop = null)\n                             functionResolve(m, s_r, e.loc, sc, tiargs, e.e1.type, &args2);\n                             if (m.lastf && (m.lastf.errors || m.lastf.semantic3Errors))\n                             {\n-                                result = ErrorExp.get();\n-                                return;\n+                                return ErrorExp.get();\n                             }\n                         }\n                         FuncDeclaration lastf = m.lastf;\n@@ -830,8 +807,7 @@ Expression op_overload(Expression e, Scope* sc, EXP* pop = null)\n                             functionResolve(m, s, e.loc, sc, tiargs, e.e2.type, &args1);\n                             if (m.lastf && (m.lastf.errors || m.lastf.semantic3Errors))\n                             {\n-                                result = ErrorExp.get();\n-                                return;\n+                                return ErrorExp.get();\n                             }\n                         }\n                         if (m.count > 1)\n@@ -847,27 +823,26 @@ Expression op_overload(Expression e, Scope* sc, EXP* pop = null)\n                         if (lastf && m.lastf == lastf || !s && m.last == MATCH.nomatch)\n                         {\n                             // Rewrite (e1 op e2) as e1.opfunc_r(e2)\n-                            result = build_overload(e.loc, sc, e.e1, e.e2, m.lastf ? m.lastf : s_r);\n+                            return build_overload(e.loc, sc, e.e1, e.e2, m.lastf ? m.lastf : s_r);\n                         }\n                         else\n                         {\n                             // Rewrite (e1 op e2) as e2.opfunc(e1)\n-                            result = build_overload(e.loc, sc, e.e2, e.e1, m.lastf ? m.lastf : s);\n+                            Expression result = build_overload(e.loc, sc, e.e2, e.e1, m.lastf ? m.lastf : s);\n                             // When reversing operands of comparison operators,\n                             // need to reverse the sense of the op\n                             if (pop)\n                                 *pop = reverseRelation(e.op);\n+                            return result;\n                         }\n-                        return;\n                     }\n                 }\n             }\n \n-            Expression tempResult;\n+            Expression rewrittenLhs;\n             if (!(e.op == EXP.assign && ad2 && ad1 == ad2)) // https://issues.dlang.org/show_bug.cgi?id=2943\n             {\n-                result = checkAliasThisForLhs(ad1, sc, e);\n-                if (result)\n+                if (Expression result = checkAliasThisForLhs(ad1, sc, e))\n                 {\n                     /* https://issues.dlang.org/show_bug.cgi?id=19441\n                      *\n@@ -880,43 +855,42 @@ Expression op_overload(Expression e, Scope* sc, EXP* pop = null)\n                      * one of the members, hence the `ad1.fields.dim == 2 && ad1.vthis`\n                      * condition.\n                      */\n-                    if (e.op != EXP.assign || e.e1.op == EXP.type)\n-                        return;\n+                    if (result.op != EXP.assign)\n+                        return result;     // i.e: Rewrote `e1 = e2` -> `e1(e2)`\n+\n+                    auto ae = result.isAssignExp();\n+                    if (ae.e1.op != EXP.dotVariable)\n+                        return result;     // i.e: Rewrote `e1 = e2` -> `e1() = e2`\n \n-                    if (ad1.fields.dim == 1 || (ad1.fields.dim == 2 && ad1.vthis))\n+                    auto dve = ae.e1.isDotVarExp();\n+                    if (auto ad = dve.var.isMember2())\n                     {\n-                        auto var = ad1.aliasthis.sym.isVarDeclaration();\n-                        if (var && var.type == ad1.fields[0].type)\n-                            return;\n-\n-                        auto func = ad1.aliasthis.sym.isFuncDeclaration();\n-                        auto tf = cast(TypeFunction)(func.type);\n-                        if (tf.isref && ad1.fields[0].type == tf.next)\n-                            return;\n+                        // i.e: Rewrote `e1 = e2` -> `e1.some.var = e2`\n+                        // Ensure that `var` is the only field member in `ad`\n+                        if (ad.fields.dim == 1 || (ad.fields.dim == 2 && ad.vthis))\n+                        {\n+                            if (dve.var == ad.aliasthis.sym)\n+                                return result;\n+                        }\n                     }\n-                    tempResult = result;\n+                    rewrittenLhs = ae.e1;\n                 }\n             }\n             if (!(e.op == EXP.assign && ad1 && ad1 == ad2)) // https://issues.dlang.org/show_bug.cgi?id=2943\n             {\n-                result = checkAliasThisForRhs(ad2, sc, e);\n-                if (result)\n-                    return;\n+                if (Expression result = checkAliasThisForRhs(ad2, sc, e))\n+                    return result;\n             }\n-\n-            // @@@DEPRECATED_2019-02@@@\n-            // 1. Deprecation for 1 year\n-            // 2. Turn to error after\n-            if (tempResult)\n+            if (rewrittenLhs)\n             {\n-                // move this line where tempResult is assigned to result and turn to error when derecation period is over\n-                e.deprecation(\"Cannot use `alias this` to partially initialize variable `%s` of type `%s`. Use `%s`\", e.e1.toChars(), ad1.toChars(), (cast(BinExp)tempResult).e1.toChars());\n-                // delete this line when deprecation period is over\n-                result = tempResult;\n+                e.error(\"cannot use `alias this` to partially initialize variable `%s` of type `%s`. Use `%s`\",\n+                        e.e1.toChars(), ad1.toChars(), rewrittenLhs.toChars());\n+                return ErrorExp.get();\n             }\n+            return null;\n         }\n \n-        override void visit(EqualExp e)\n+        Expression visitEqual(EqualExp e)\n         {\n             //printf(\"EqualExp::op_overload() (%s)\\n\", e.toChars());\n             Type t1 = e.e1.type.toBasetype();\n@@ -929,7 +903,7 @@ Expression op_overload(Expression e, Scope* sc, EXP* pop = null)\n             if ((t1.ty == Tarray || t1.ty == Tsarray) &&\n                 (t2.ty == Tarray || t2.ty == Tsarray))\n             {\n-                return;\n+                return null;\n             }\n \n             /* Check for class equality with null literal or typeof(null).\n@@ -940,14 +914,13 @@ Expression op_overload(Expression e, Scope* sc, EXP* pop = null)\n                 e.error(\"use `%s` instead of `%s` when comparing with `null`\",\n                     EXPtoString(e.op == EXP.equal ? EXP.identity : EXP.notIdentity).ptr,\n                     EXPtoString(e.op).ptr);\n-                result = ErrorExp.get();\n-                return;\n+                return ErrorExp.get();\n             }\n             if (t1.ty == Tclass && t2.ty == Tnull ||\n                 t1.ty == Tnull && t2.ty == Tclass)\n             {\n                 // Comparing a class with typeof(null) should not call opEquals\n-                return;\n+                return null;\n             }\n \n             /* Check for class equality.\n@@ -973,26 +946,25 @@ Expression op_overload(Expression e, Scope* sc, EXP* pop = null)\n                     if (cd2.isInterfaceDeclaration())\n                         e2x = new CastExp(e.loc, e.e2, t2.isMutable() ? to : to.constOf());\n \n-                    result = new IdentifierExp(e.loc, Id.empty);\n+                    Expression result = new IdentifierExp(e.loc, Id.empty);\n                     result = new DotIdExp(e.loc, result, Id.object);\n                     result = new DotIdExp(e.loc, result, Id.eq);\n                     result = new CallExp(e.loc, result, e1x, e2x);\n                     if (e.op == EXP.notEqual)\n                         result = new NotExp(e.loc, result);\n                     result = result.expressionSemantic(sc);\n-                    return;\n+                    return result;\n                 }\n             }\n \n-            result = compare_overload(e, sc, Id.eq, null);\n-            if (result)\n+            if (Expression result = compare_overload(e, sc, Id.eq, null))\n             {\n                 if (lastComma(result).op == EXP.call && e.op == EXP.notEqual)\n                 {\n                     result = new NotExp(result.loc, result);\n                     result = result.expressionSemantic(sc);\n                 }\n-                return;\n+                return result;\n             }\n \n             /* Check for pointer equality.\n@@ -1008,27 +980,25 @@ Expression op_overload(Expression e, Scope* sc, EXP* pop = null)\n                  * as the backend input.\n                  */\n                 auto op2 = e.op == EXP.equal ? EXP.identity : EXP.notIdentity;\n-                result = new IdentityExp(op2, e.loc, e.e1, e.e2);\n-                result = result.expressionSemantic(sc);\n-                return;\n+                Expression r = new IdentityExp(op2, e.loc, e.e1, e.e2);\n+                return r.expressionSemantic(sc);\n             }\n \n             /* Check for struct equality without opEquals.\n              */\n             if (t1.ty == Tstruct && t2.ty == Tstruct)\n             {\n-                auto sd = (cast(TypeStruct)t1).sym;\n-                if (sd != (cast(TypeStruct)t2).sym)\n-                    return;\n+                auto sd = t1.isTypeStruct().sym;\n+                if (sd != t2.isTypeStruct().sym)\n+                    return null;\n \n                 import dmd.clone : needOpEquals;\n                 if (!global.params.fieldwise && !needOpEquals(sd))\n                 {\n                     // Use bitwise equality.\n                     auto op2 = e.op == EXP.equal ? EXP.identity : EXP.notIdentity;\n-                    result = new IdentityExp(op2, e.loc, e.e1, e.e2);\n-                    result = result.expressionSemantic(sc);\n-                    return;\n+                    Expression r = new IdentityExp(op2, e.loc, e.e1, e.e2);\n+                    return r.expressionSemantic(sc);\n                 }\n \n                 /* Do memberwise equality.\n@@ -1042,49 +1012,49 @@ Expression op_overload(Expression e, Scope* sc, EXP* pop = null)\n                  * also compare the parent class's equality. Otherwise, compares\n                  * the identity of parent context through void*.\n                  */\n-                if (e.att1 && t1.equivalent(e.att1)) return;\n-                if (e.att2 && t2.equivalent(e.att2)) return;\n+                if (e.att1 && t1.equivalent(e.att1)) return null;\n+                if (e.att2 && t2.equivalent(e.att2)) return null;\n \n-                e = cast(EqualExp)e.copy();\n+                e = e.copy().isEqualExp();\n                 if (!e.att1) e.att1 = t1;\n                 if (!e.att2) e.att2 = t2;\n                 e.e1 = new DotIdExp(e.loc, e.e1, Id._tupleof);\n                 e.e2 = new DotIdExp(e.loc, e.e2, Id._tupleof);\n \n                 auto sc2 = sc.push();\n                 sc2.flags |= SCOPE.noaccesscheck;\n-                result = e.expressionSemantic(sc2);\n+                Expression r = e.expressionSemantic(sc2);\n                 sc2.pop();\n \n                 /* https://issues.dlang.org/show_bug.cgi?id=15292\n                  * if the rewrite result is same with the original,\n                  * the equality is unresolvable because it has recursive definition.\n                  */\n-                if (result.op == e.op &&\n-                    (cast(EqualExp)result).e1.type.toBasetype() == t1)\n+                if (r.op == e.op &&\n+                    r.isEqualExp().e1.type.toBasetype() == t1)\n                 {\n                     e.error(\"cannot compare `%s` because its auto generated member-wise equality has recursive definition\",\n                         t1.toChars());\n-                    result = ErrorExp.get();\n+                    return ErrorExp.get();\n                 }\n-                return;\n+                return r;\n             }\n \n             /* Check for tuple equality.\n              */\n             if (e.e1.op == EXP.tuple && e.e2.op == EXP.tuple)\n             {\n-                auto tup1 = cast(TupleExp)e.e1;\n-                auto tup2 = cast(TupleExp)e.e2;\n+                auto tup1 = e.e1.isTupleExp();\n+                auto tup2 = e.e2.isTupleExp();\n                 size_t dim = tup1.exps.dim;\n                 if (dim != tup2.exps.dim)\n                 {\n                     e.error(\"mismatched tuple lengths, `%d` and `%d`\",\n                         cast(int)dim, cast(int)tup2.exps.dim);\n-                    result = ErrorExp.get();\n-                    return;\n+                    return ErrorExp.get();\n                 }\n \n+                Expression result;\n                 if (dim == 0)\n                 {\n                     // zero-length tuple comparison should always return true or false.\n@@ -1112,41 +1082,39 @@ Expression op_overload(Expression e, Scope* sc, EXP* pop = null)\n                 result = Expression.combine(tup1.e0, tup2.e0, result);\n                 result = result.expressionSemantic(sc);\n \n-                return;\n+                return result;\n             }\n+            return null;\n         }\n \n-        override void visit(CmpExp e)\n+        Expression visitCmp(CmpExp e)\n         {\n             //printf(\"CmpExp:: () (%s)\\n\", e.toChars());\n-            result = compare_overload(e, sc, Id.cmp, pop);\n+            return compare_overload(e, sc, Id.cmp, pop);\n         }\n \n         /*********************************\n          * Operator overloading for op=\n          */\n-        override void visit(BinAssignExp e)\n+        Expression visitBinAssign(BinAssignExp e)\n         {\n             //printf(\"BinAssignExp::op_overload() (%s)\\n\", e.toChars());\n-            if (e.e1.op == EXP.array)\n+            if (auto ae = e.e1.isArrayExp())\n             {\n-                ArrayExp ae = cast(ArrayExp)e.e1;\n                 ae.e1 = ae.e1.expressionSemantic(sc);\n                 ae.e1 = resolveProperties(sc, ae.e1);\n                 Expression ae1old = ae.e1;\n                 const(bool) maybeSlice = (ae.arguments.dim == 0 || ae.arguments.dim == 1 && (*ae.arguments)[0].op == EXP.interval);\n                 IntervalExp ie = null;\n                 if (maybeSlice && ae.arguments.dim)\n                 {\n-                    assert((*ae.arguments)[0].op == EXP.interval);\n-                    ie = cast(IntervalExp)(*ae.arguments)[0];\n+                    ie = (*ae.arguments)[0].isIntervalExp();\n                 }\n                 while (true)\n                 {\n                     if (ae.e1.op == EXP.error)\n                     {\n-                        result = ae.e1;\n-                        return;\n+                        return ae.e1;\n                     }\n                     Expression e0 = null;\n                     Expression ae1save = ae.e1;\n@@ -1158,14 +1126,14 @@ Expression op_overload(Expression e, Scope* sc, EXP* pop = null)\n                     if (search_function(ad, Id.opIndexOpAssign))\n                     {\n                         // Deal with $\n-                        result = resolveOpDollar(sc, ae, &e0);\n+                        Expression result = resolveOpDollar(sc, ae, &e0);\n                         if (!result) // (a[i..j] op= e2) might be: a.opSliceOpAssign!(op)(e2, i, j)\n                             goto Lfallback;\n                         if (result.op == EXP.error)\n-                            return;\n+                            return result;\n                         result = e.e2.expressionSemantic(sc);\n                         if (result.op == EXP.error)\n-                            return;\n+                            return result;\n                         e.e2 = result;\n                         /* Rewrite a[arguments] op= e2 as:\n                          *      a.opIndexOpAssign!(op)(e2, arguments)\n@@ -1181,20 +1149,19 @@ Expression op_overload(Expression e, Scope* sc, EXP* pop = null)\n                             result = result.expressionSemantic(sc);\n                         if (result)\n                         {\n-                            result = Expression.combine(e0, result);\n-                            return;\n+                            return Expression.combine(e0, result);\n                         }\n                     }\n                 Lfallback:\n                     if (maybeSlice && search_function(ad, Id.opSliceOpAssign))\n                     {\n                         // Deal with $\n-                        result = resolveOpDollar(sc, ae, ie, &e0);\n+                        Expression result = resolveOpDollar(sc, ae, ie, &e0);\n                         if (result.op == EXP.error)\n-                            return;\n+                            return result;\n                         result = e.e2.expressionSemantic(sc);\n                         if (result.op == EXP.error)\n-                            return;\n+                            return result;\n                         e.e2 = result;\n                         /* Rewrite (a[i..j] op= e2) as:\n                          *      a.opSliceOpAssign!(op)(e2, i, j)\n@@ -1211,7 +1178,7 @@ Expression op_overload(Expression e, Scope* sc, EXP* pop = null)\n                         result = new CallExp(e.loc, result, a);\n                         result = result.expressionSemantic(sc);\n                         result = Expression.combine(e0, result);\n-                        return;\n+                        return result;\n                     }\n                     // Didn't find it. Forward to aliasthis\n                     if (ad.aliasthis && !isRecursiveAliasThis(ae.att1, ae.e1.type))\n@@ -1228,14 +1195,13 @@ Expression op_overload(Expression e, Scope* sc, EXP* pop = null)\n                 ae.e1 = ae1old; // recovery\n                 ae.lengthVar = null;\n             }\n-            result = e.binSemanticProp(sc);\n+            Expression result = e.binSemanticProp(sc);\n             if (result)\n-                return;\n+                return result;\n             // Don't attempt 'alias this' if an error occurred\n             if (e.e1.type.ty == Terror || e.e2.type.ty == Terror)\n             {\n-                result = ErrorExp.get();\n-                return;\n+                return ErrorExp.get();\n             }\n             Identifier id = opId(e);\n             Expressions args2;\n@@ -1250,8 +1216,7 @@ Expression op_overload(Expression e, Scope* sc, EXP* pop = null)\n                 if (s && !s.isTemplateDeclaration())\n                 {\n                     e.error(\"`%s.opOpAssign` isn't a template\", e.e1.toChars());\n-                    result = ErrorExp.get();\n-                    return;\n+                    return ErrorExp.get();\n                 }\n             }\n             // Set tiargs, the template argument list, which will be the operator string\n@@ -1290,8 +1255,7 @@ Expression op_overload(Expression e, Scope* sc, EXP* pop = null)\n                     functionResolve(m, s, e.loc, sc, tiargs, e.e1.type, &args2);\n                     if (m.lastf && (m.lastf.errors || m.lastf.semantic3Errors))\n                     {\n-                        result = ErrorExp.get();\n-                        return;\n+                        return ErrorExp.get();\n                     }\n                 }\n                 if (m.count > 1)\n@@ -1306,23 +1270,38 @@ Expression op_overload(Expression e, Scope* sc, EXP* pop = null)\n                     m.lastf = null;\n                 }\n                 // Rewrite (e1 op e2) as e1.opOpAssign(e2)\n-                result = build_overload(e.loc, sc, e.e1, e.e2, m.lastf ? m.lastf : s);\n-                return;\n+                return build_overload(e.loc, sc, e.e1, e.e2, m.lastf ? m.lastf : s);\n             }\n         L1:\n             result = checkAliasThisForLhs(ad1, sc, e);\n             if (result || !s) // no point in trying Rhs alias-this if there's no overload of any kind in lhs\n-                return;\n+                return result;\n \n-            result = checkAliasThisForRhs(isAggregate(e.e2.type), sc, e);\n+            return checkAliasThisForRhs(isAggregate(e.e2.type), sc, e);\n         }\n-    }\n \n     if (pop)\n         *pop = e.op;\n-    scope OpOverload v = new OpOverload(sc, pop);\n-    e.accept(v);\n-    return v.result;\n+\n+    switch (e.op)\n+    {\n+        case EXP.cast_         : return visitCast(e.isCastExp());\n+        case EXP.array         : return visitArray(e.isArrayExp());\n+\n+        case EXP.notEqual      :\n+        case EXP.equal         : return visitEqual(e.isEqualExp());\n+\n+        case EXP.lessOrEqual   :\n+        case EXP.greaterThan   :\n+        case EXP.greaterOrEqual:\n+        case EXP.lessThan      : return visitCmp(cast(CmpExp)e);\n+\n+        default:\n+            if (auto ex = e.isBinAssignExp()) return visitBinAssign(ex);\n+            if (auto ex = e.isBinExp())       return visitBin(ex);\n+            if (auto ex = e.isUnaExp())       return visitUna(ex);\n+            return visit(e);\n+    }\n }\n \n /******************************************\n@@ -1505,8 +1484,8 @@ bool inferForeachAggregate(Scope* sc, bool isForeach, ref Expression feaggr, out\n         case Tclass:\n         case Tstruct:\n         {\n-            AggregateDeclaration ad = (tab.ty == Tclass) ? (cast(TypeClass)tab).sym\n-                                                         : (cast(TypeStruct)tab).sym;\n+            AggregateDeclaration ad = (tab.ty == Tclass) ? tab.isTypeClass().sym\n+                                                         : tab.isTypeStruct().sym;\n             if (!sliced)\n             {\n                 sapply = search_function(ad, isForeach ? Id.apply : Id.applyReverse);\n@@ -1547,9 +1526,9 @@ bool inferForeachAggregate(Scope* sc, bool isForeach, ref Expression feaggr, out\n         }\n \n         case Tdelegate:        // https://dlang.org/spec/statement.html#foreach_over_delegates\n-            if (aggr.op == EXP.delegate_)\n+            if (auto de = aggr.isDelegateExp())\n             {\n-                sapply = (cast(DelegateExp)aggr).func;\n+                sapply = de.func;\n             }\n             break;\n \n@@ -1600,7 +1579,7 @@ bool inferApplyArgTypes(ForeachStatement fes, Scope* sc, ref Dsymbol sapply)\n         else\n         {\n             assert(tab.ty == Tdelegate && fes.aggr.op == EXP.delegate_);\n-            ethis = (cast(DelegateExp)fes.aggr).e1;\n+            ethis = fes.aggr.isDelegateExp().e1;\n         }\n \n         /* Look for like an\n@@ -1613,7 +1592,7 @@ bool inferApplyArgTypes(ForeachStatement fes, Scope* sc, ref Dsymbol sapply)\n             if (fdapply)\n             {\n                 // Fill in any missing types on foreach parameters[]\n-                matchParamsToOpApply(cast(TypeFunction)fdapply.type, fes.parameters, true);\n+                matchParamsToOpApply(fdapply.type.isTypeFunction(), fes.parameters, true);\n                 sapply = fdapply;\n                 return true;\n             }\n@@ -1649,7 +1628,7 @@ bool inferApplyArgTypes(ForeachStatement fes, Scope* sc, ref Dsymbol sapply)\n \n     case Taarray:\n         {\n-            TypeAArray taa = cast(TypeAArray)tab;\n+            TypeAArray taa = tab.isTypeAArray();\n             if (fes.parameters.dim == 2)\n             {\n                 if (!p.type)\n@@ -1672,8 +1651,8 @@ bool inferApplyArgTypes(ForeachStatement fes, Scope* sc, ref Dsymbol sapply)\n     case Tclass:\n     case Tstruct:\n     {\n-        AggregateDeclaration ad = (tab.ty == Tclass) ? (cast(TypeClass)tab).sym\n-                                                     : (cast(TypeStruct)tab).sym;\n+        AggregateDeclaration ad = (tab.ty == Tclass) ? tab.isTypeClass().sym\n+                                                     : tab.isTypeStruct().sym;\n         if (fes.parameters.dim == 1)\n         {\n             if (!p.type)\n@@ -1697,7 +1676,7 @@ bool inferApplyArgTypes(ForeachStatement fes, Scope* sc, ref Dsymbol sapply)\n                 {\n                 }\n                 else if (s && s.isDeclaration())\n-                    p.type = (cast(Declaration)s).type;\n+                    p.type = s.isDeclaration().type;\n                 else\n                     break;\n             }\n@@ -1707,9 +1686,12 @@ bool inferApplyArgTypes(ForeachStatement fes, Scope* sc, ref Dsymbol sapply)\n     }\n \n     case Tdelegate:\n-        if (!matchParamsToOpApply(cast(TypeFunction)tab.nextOf(), fes.parameters, true))\n+    {\n+        auto td = tab.isTypeDelegate();\n+        if (!matchParamsToOpApply(td.next.isTypeFunction(), fes.parameters, true))\n             return false;\n         break;\n+    }\n \n     default:\n         break; // ignore error, caught later\n@@ -1738,7 +1720,7 @@ private FuncDeclaration findBestOpApplyMatch(Expression ethis, FuncDeclaration f\n         auto f = s.isFuncDeclaration();\n         if (!f)\n             return 0;           // continue\n-        auto tf = cast(TypeFunction)f.type;\n+        auto tf = f.type.isTypeFunction();\n         MATCH m = MATCH.exact;\n         if (f.isThis())\n         {\n@@ -1825,10 +1807,10 @@ private bool matchParamsToOpApply(TypeFunction tf, Parameters* parameters, bool\n     /* Get the type of opApply's dg parameter\n      */\n     Parameter p0 = tf.parameterList[0];\n-    if (p0.type.ty != Tdelegate)\n+    auto de = p0.type.isTypeDelegate();\n+    if (!de)\n         return nomatch;\n-    TypeFunction tdg = cast(TypeFunction)p0.type.nextOf();\n-    assert(tdg.ty == Tfunction);\n+    TypeFunction tdg = de.next.isTypeFunction();\n \n     /* We now have tdg, the type of the delegate.\n      * tdg's parameters must match that of the foreach arglist (i.e. parameters)."}, {"sha": "3653aa8b06b902c7cb5b83f1080ba4c35a5498b6", "filename": "gcc/d/dmd/optimize.d", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Foptimize.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Foptimize.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Foptimize.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -631,13 +631,6 @@ Expression Expression_optimize(Expression e, int result, bool keepLvalue)\n     {\n         expOptimize(e.thisexp, WANTvalue);\n         // Optimize parameters\n-        if (e.newargs)\n-        {\n-            for (size_t i = 0; i < e.newargs.dim; i++)\n-            {\n-                expOptimize((*e.newargs)[i], WANTvalue);\n-            }\n-        }\n         if (e.arguments)\n         {\n             for (size_t i = 0; i < e.arguments.dim; i++)"}, {"sha": "e83b326c7e30bf5626a03da822d59550dde98c20", "filename": "gcc/d/dmd/parse.d", "status": "modified", "additions": 429, "deletions": 365, "changes": 794, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Fparse.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Fparse.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fparse.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -28,268 +28,6 @@ import dmd.root.rootobject;\n import dmd.root.string;\n import dmd.tokens;\n \n-// How multiple declarations are parsed.\n-// If 1, treat as C.\n-// If 0, treat:\n-//      int *p, i;\n-// as:\n-//      int* p;\n-//      int* i;\n-private enum CDECLSYNTAX = 0;\n-\n-// Support C cast syntax:\n-//      (type)(expression)\n-private enum CCASTSYNTAX = 1;\n-\n-// Support postfix C array declarations, such as\n-//      int a[3][4];\n-private enum CARRAYDECL = 1;\n-\n-/**********************************\n- * Set operator precedence for each operator.\n- *\n- * Used by hdrgen\n- */\n-immutable PREC[EXP.max + 1] precedence =\n-[\n-    EXP.type : PREC.expr,\n-    EXP.error : PREC.expr,\n-    EXP.objcClassReference : PREC.expr, // Objective-C class reference, same as EXP.type\n-\n-    EXP.typeof_ : PREC.primary,\n-    EXP.mixin_ : PREC.primary,\n-\n-    EXP.import_ : PREC.primary,\n-    EXP.dotVariable : PREC.primary,\n-    EXP.scope_ : PREC.primary,\n-    EXP.identifier : PREC.primary,\n-    EXP.this_ : PREC.primary,\n-    EXP.super_ : PREC.primary,\n-    EXP.int64 : PREC.primary,\n-    EXP.float64 : PREC.primary,\n-    EXP.complex80 : PREC.primary,\n-    EXP.null_ : PREC.primary,\n-    EXP.string_ : PREC.primary,\n-    EXP.arrayLiteral : PREC.primary,\n-    EXP.assocArrayLiteral : PREC.primary,\n-    EXP.classReference : PREC.primary,\n-    EXP.file : PREC.primary,\n-    EXP.fileFullPath : PREC.primary,\n-    EXP.line : PREC.primary,\n-    EXP.moduleString : PREC.primary,\n-    EXP.functionString : PREC.primary,\n-    EXP.prettyFunction : PREC.primary,\n-    EXP.typeid_ : PREC.primary,\n-    EXP.is_ : PREC.primary,\n-    EXP.assert_ : PREC.primary,\n-    EXP.halt : PREC.primary,\n-    EXP.template_ : PREC.primary,\n-    EXP.dSymbol : PREC.primary,\n-    EXP.function_ : PREC.primary,\n-    EXP.variable : PREC.primary,\n-    EXP.symbolOffset : PREC.primary,\n-    EXP.structLiteral : PREC.primary,\n-    EXP.compoundLiteral : PREC.primary,\n-    EXP.arrayLength : PREC.primary,\n-    EXP.delegatePointer : PREC.primary,\n-    EXP.delegateFunctionPointer : PREC.primary,\n-    EXP.remove : PREC.primary,\n-    EXP.tuple : PREC.primary,\n-    EXP.traits : PREC.primary,\n-    EXP.default_ : PREC.primary,\n-    EXP.overloadSet : PREC.primary,\n-    EXP.void_ : PREC.primary,\n-    EXP.vectorArray : PREC.primary,\n-    EXP._Generic : PREC.primary,\n-\n-    // post\n-    EXP.dotTemplateInstance : PREC.primary,\n-    EXP.dotIdentifier : PREC.primary,\n-    EXP.dotTemplateDeclaration : PREC.primary,\n-    EXP.dot : PREC.primary,\n-    EXP.dotType : PREC.primary,\n-    EXP.plusPlus : PREC.primary,\n-    EXP.minusMinus : PREC.primary,\n-    EXP.prePlusPlus : PREC.primary,\n-    EXP.preMinusMinus : PREC.primary,\n-    EXP.call : PREC.primary,\n-    EXP.slice : PREC.primary,\n-    EXP.array : PREC.primary,\n-    EXP.index : PREC.primary,\n-\n-    EXP.delegate_ : PREC.unary,\n-    EXP.address : PREC.unary,\n-    EXP.star : PREC.unary,\n-    EXP.negate : PREC.unary,\n-    EXP.uadd : PREC.unary,\n-    EXP.not : PREC.unary,\n-    EXP.tilde : PREC.unary,\n-    EXP.delete_ : PREC.unary,\n-    EXP.new_ : PREC.unary,\n-    EXP.newAnonymousClass : PREC.unary,\n-    EXP.cast_ : PREC.unary,\n-    EXP.throw_ : PREC.unary,\n-\n-    EXP.vector : PREC.unary,\n-    EXP.pow : PREC.pow,\n-\n-    EXP.mul : PREC.mul,\n-    EXP.div : PREC.mul,\n-    EXP.mod : PREC.mul,\n-\n-    EXP.add : PREC.add,\n-    EXP.min : PREC.add,\n-    EXP.concatenate : PREC.add,\n-\n-    EXP.leftShift : PREC.shift,\n-    EXP.rightShift : PREC.shift,\n-    EXP.unsignedRightShift : PREC.shift,\n-\n-    EXP.lessThan : PREC.rel,\n-    EXP.lessOrEqual : PREC.rel,\n-    EXP.greaterThan : PREC.rel,\n-    EXP.greaterOrEqual : PREC.rel,\n-    EXP.in_ : PREC.rel,\n-\n-    /* Note that we changed precedence, so that < and != have the same\n-     * precedence. This change is in the parser, too.\n-     */\n-    EXP.equal : PREC.rel,\n-    EXP.notEqual : PREC.rel,\n-    EXP.identity : PREC.rel,\n-    EXP.notIdentity : PREC.rel,\n-\n-    EXP.and : PREC.and,\n-    EXP.xor : PREC.xor,\n-    EXP.or : PREC.or,\n-\n-    EXP.andAnd : PREC.andand,\n-    EXP.orOr : PREC.oror,\n-\n-    EXP.question : PREC.cond,\n-\n-    EXP.assign : PREC.assign,\n-    EXP.construct : PREC.assign,\n-    EXP.blit : PREC.assign,\n-    EXP.addAssign : PREC.assign,\n-    EXP.minAssign : PREC.assign,\n-    EXP.concatenateAssign : PREC.assign,\n-    EXP.concatenateElemAssign : PREC.assign,\n-    EXP.concatenateDcharAssign : PREC.assign,\n-    EXP.mulAssign : PREC.assign,\n-    EXP.divAssign : PREC.assign,\n-    EXP.modAssign : PREC.assign,\n-    EXP.powAssign : PREC.assign,\n-    EXP.leftShiftAssign : PREC.assign,\n-    EXP.rightShiftAssign : PREC.assign,\n-    EXP.unsignedRightShiftAssign : PREC.assign,\n-    EXP.andAssign : PREC.assign,\n-    EXP.orAssign : PREC.assign,\n-    EXP.xorAssign : PREC.assign,\n-\n-    EXP.comma : PREC.expr,\n-    EXP.declaration : PREC.expr,\n-\n-    EXP.interval : PREC.assign,\n-];\n-\n-enum ParseStatementFlags : int\n-{\n-    semi          = 1,        // empty ';' statements are allowed, but deprecated\n-    scope_        = 2,        // start a new scope\n-    curly         = 4,        // { } statement is required\n-    curlyScope    = 8,        // { } starts a new scope\n-    semiOk        = 0x10,     // empty ';' are really ok\n-}\n-\n-struct PrefixAttributes(AST)\n-{\n-    StorageClass storageClass;\n-    AST.Expression depmsg;\n-    LINK link;\n-    AST.Visibility visibility;\n-    bool setAlignment;\n-    AST.Expression ealign;\n-    AST.Expressions* udas;\n-    const(char)* comment;\n-}\n-\n-/// The result of the `ParseLinkage` function\n-struct ParsedLinkage(AST)\n-{\n-    /// What linkage was specified\n-    LINK link;\n-    /// If `extern(C++, class|struct)`, contains the `class|struct`\n-    CPPMANGLE cppmangle;\n-    /// If `extern(C++, some.identifier)`, will be the identifiers\n-    AST.Identifiers* idents;\n-    /// If `extern(C++, (some_tuple_expression)|\"string\"), will be the expressions\n-    AST.Expressions* identExps;\n-}\n-\n-/*****************************\n- * Destructively extract storage class from pAttrs.\n- */\n-private StorageClass getStorageClass(AST)(PrefixAttributes!(AST)* pAttrs)\n-{\n-    StorageClass stc = STC.undefined_;\n-    if (pAttrs)\n-    {\n-        stc = pAttrs.storageClass;\n-        pAttrs.storageClass = STC.undefined_;\n-    }\n-    return stc;\n-}\n-\n-/**************************************\n- * dump mixin expansion to file for better debugging\n- */\n-private bool writeMixin(const(char)[] s, ref Loc loc)\n-{\n-    if (!global.params.mixinOut)\n-        return false;\n-\n-    OutBuffer* ob = global.params.mixinOut;\n-\n-    ob.writestring(\"// expansion at \");\n-    ob.writestring(loc.toChars());\n-    ob.writenl();\n-\n-    global.params.mixinLines++;\n-\n-    loc = Loc(global.params.mixinFile, global.params.mixinLines + 1, loc.charnum);\n-\n-    // write by line to create consistent line endings\n-    size_t lastpos = 0;\n-    for (size_t i = 0; i < s.length; ++i)\n-    {\n-        // detect LF and CRLF\n-        const c = s[i];\n-        if (c == '\\n' || (c == '\\r' && i+1 < s.length && s[i+1] == '\\n'))\n-        {\n-            ob.writestring(s[lastpos .. i]);\n-            ob.writenl();\n-            global.params.mixinLines++;\n-            if (c == '\\r')\n-                ++i;\n-            lastpos = i + 1;\n-        }\n-    }\n-\n-    if(lastpos < s.length)\n-        ob.writestring(s[lastpos .. $]);\n-\n-    if (s.length == 0 || s[$-1] != '\\n')\n-    {\n-        ob.writenl(); // ensure empty line after expansion\n-        global.params.mixinLines++;\n-    }\n-    ob.writenl();\n-    global.params.mixinLines++;\n-\n-    return true;\n-}\n-\n /***********************************************************\n  */\n class Parser(AST) : Lexer\n@@ -344,80 +82,49 @@ class Parser(AST) : Lexer\n         //nextToken();              // start up the scanner\n     }\n \n+    /++\n+     + Parse a module, i.e. the optional `module x.y.z` declaration and all declarations\n+     + found in the current file.\n+     +\n+     + Returns: the list of declarations or an empty list in case of malformed declarations,\n+     +          the module declaration will be stored as `this.md` if found\n+     +/\n     AST.Dsymbols* parseModule()\n+    {\n+        if (!parseModuleDeclaration())\n+            return errorReturn();\n+\n+        return parseModuleContent();\n+    }\n+\n+    /++\n+     + Parse the optional module declaration\n+     +\n+     + Returns: false if a malformed module declaration was found\n+     +/\n+    final bool parseModuleDeclaration()\n     {\n         const comment = token.blockComment;\n         bool isdeprecated = false;\n         AST.Expression msg = null;\n-        AST.Expressions* udas = null;\n-        AST.Dsymbols* decldefs;\n-        AST.Dsymbol lastDecl = mod; // for attaching ddoc unittests to module decl\n-\n-        Token* tk;\n-        if (skipAttributes(&token, &tk) && tk.value == TOK.module_)\n-        {\n-            while (token.value != TOK.module_)\n-            {\n-                switch (token.value)\n-                {\n-                case TOK.deprecated_:\n-                    {\n-                        // deprecated (...) module ...\n-                        if (isdeprecated)\n-                            error(\"there is only one deprecation attribute allowed for module declaration\");\n-                        isdeprecated = true;\n-                        nextToken();\n-                        if (token.value == TOK.leftParenthesis)\n-                        {\n-                            check(TOK.leftParenthesis);\n-                            msg = parseAssignExp();\n-                            check(TOK.rightParenthesis);\n-                        }\n-                        break;\n-                    }\n-                case TOK.at:\n-                    {\n-                        AST.Expressions* exps = null;\n-                        const stc = parseAttribute(exps);\n-                        if (stc & atAttrGroup)\n-                        {\n-                            error(\"`@%s` attribute for module declaration is not supported\", token.toChars());\n-                        }\n-                        else\n-                        {\n-                            udas = AST.UserAttributeDeclaration.concat(udas, exps);\n-                        }\n-                        if (stc)\n-                            nextToken();\n-                        break;\n-                    }\n-                default:\n-                    {\n-                        error(\"`module` expected instead of `%s`\", token.toChars());\n-                        nextToken();\n-                        break;\n-                    }\n-                }\n-            }\n-        }\n \n-        if (udas)\n-        {\n-            auto a = new AST.Dsymbols();\n-            auto udad = new AST.UserAttributeDeclaration(udas, a);\n-            mod.userAttribDecl = udad;\n-        }\n+        // Parse optional module attributes\n+        parseModuleAttributes(msg, isdeprecated);\n \n-        // ModuleDeclation leads off\n+        // ModuleDeclaration leads off\n         if (token.value == TOK.module_)\n         {\n             const loc = token.loc;\n-\n             nextToken();\n+\n+            /* parse ModuleFullyQualifiedName\n+             * https://dlang.org/spec/module.html#ModuleFullyQualifiedName\n+             */\n+\n             if (token.value != TOK.identifier)\n             {\n                 error(\"identifier expected following `module`\");\n-                goto Lerr;\n+                return false;\n             }\n \n             Identifier[] a;\n@@ -430,7 +137,7 @@ class Parser(AST) : Lexer\n                 if (token.value != TOK.identifier)\n                 {\n                     error(\"identifier expected following `package`\");\n-                    goto Lerr;\n+                    return false;\n                 }\n                 id = token.ident;\n             }\n@@ -442,29 +149,115 @@ class Parser(AST) : Lexer\n             nextToken();\n             addComment(mod, comment);\n         }\n+        return true;\n+    }\n \n-        decldefs = parseDeclDefs(0, &lastDecl);\n+    /++\n+     + Parse the content of a module, i.e. all declarations found until the end of file.\n+     +\n+     + Returns: the list of declarations or an empty list in case of malformed declarations\n+     +/\n+    final AST.Dsymbols* parseModuleContent()\n+    {\n+        AST.Dsymbol lastDecl = mod;\n+        AST.Dsymbols* decldefs = parseDeclDefs(0, &lastDecl);\n \n         if (token.value == TOK.rightCurly)\n         {\n             error(token.loc, \"unmatched closing brace\");\n-            goto Lerr;\n+            return errorReturn();\n         }\n \n         if (token.value != TOK.endOfFile)\n         {\n             error(token.loc, \"unrecognized declaration\");\n-            goto Lerr;\n+            return errorReturn();\n         }\n         return decldefs;\n+    }\n \n-    Lerr:\n+    /++\n+     + Skips to the end of the current declaration - denoted by either `;` or EOF\n+     +\n+     + Returns: An empty list of Dsymbols\n+     +/\n+    private AST.Dsymbols* errorReturn()\n+    {\n         while (token.value != TOK.semicolon && token.value != TOK.endOfFile)\n             nextToken();\n         nextToken();\n         return new AST.Dsymbols();\n     }\n \n+    /**********************************\n+     * Parse the ModuleAttributes preceding a module declaration.\n+     * ModuleDeclaration:\n+     *    ModuleAttributes(opt) module ModuleFullyQualifiedName ;\n+     * https://dlang.org/spec/module.html#ModuleAttributes\n+     * Params:\n+     *  msg = set to the AssignExpression from DeprecatedAttribute https://dlang.org/spec/module.html#DeprecatedAttribute\n+     *  isdeprecated = set to true if a DeprecatedAttribute is seen\n+     */\n+    private\n+    void parseModuleAttributes(out AST.Expression msg, out bool isdeprecated)\n+    {\n+        Token* tk;\n+        if (!(skipAttributes(&token, &tk) && tk.value == TOK.module_))\n+            return;             // no module attributes\n+\n+        AST.Expressions* udas = null;\n+        while (token.value != TOK.module_)\n+        {\n+            switch (token.value)\n+            {\n+            case TOK.deprecated_:\n+                {\n+                    // deprecated (...) module ...\n+                    if (isdeprecated)\n+                        error(\"there is only one deprecation attribute allowed for module declaration\");\n+                    isdeprecated = true;\n+                    nextToken();\n+                    if (token.value == TOK.leftParenthesis)\n+                    {\n+                        check(TOK.leftParenthesis);\n+                        msg = parseAssignExp();\n+                        check(TOK.rightParenthesis);\n+                    }\n+                    break;\n+                }\n+            case TOK.at:\n+                {\n+                    AST.Expressions* exps = null;\n+                    const stc = parseAttribute(exps);\n+                    if (stc & atAttrGroup)\n+                    {\n+                        error(\"`@%s` attribute for module declaration is not supported\", token.toChars());\n+                    }\n+                    else\n+                    {\n+                        udas = AST.UserAttributeDeclaration.concat(udas, exps);\n+                    }\n+                    if (stc)\n+                        nextToken();\n+                    break;\n+                }\n+            default:\n+                {\n+                    error(\"`module` expected instead of `%s`\", token.toChars());\n+                    nextToken();\n+                    break;\n+                }\n+            }\n+        }\n+\n+        if (udas)\n+        {\n+            auto a = new AST.Dsymbols();\n+            auto udad = new AST.UserAttributeDeclaration(udas, a);\n+            mod.userAttribDecl = udad;\n+        }\n+    }\n+\n   final:\n \n     /**\n@@ -914,7 +707,7 @@ class Parser(AST) : Lexer\n                      tk.value == TOK.out_ || tk.value == TOK.do_ || tk.value == TOK.goesTo ||\n                      tk.value == TOK.identifier && tk.ident == Id._body))\n                 {\n-                    // @@@DEPRECATED@@@\n+                    // @@@DEPRECATED_2.117@@@\n                     // https://github.com/dlang/DIPs/blob/1f5959abe482b1f9094f6484a7d0a3ade77fc2fc/DIPs/accepted/DIP1003.md\n                     // Deprecated in 2.097 - Can be removed from 2.117\n                     // The deprecation period is longer than usual as `body`\n@@ -1418,6 +1211,15 @@ class Parser(AST) : Lexer\n      */\n     private StorageClass appendStorageClass(StorageClass orig, StorageClass added)\n     {\n+        void checkConflictSTCGroup(bool at = false)(StorageClass group)\n+        {\n+            if (added & group && orig & group & ((orig & group) - 1))\n+                error(\n+                    at ? \"conflicting attribute `@%s`\"\n+                       : \"conflicting attribute `%s`\",\n+                    token.toChars());\n+        }\n+\n         if (orig & added)\n         {\n             OutBuffer buf;\n@@ -1460,24 +1262,9 @@ class Parser(AST) : Lexer\n             return orig;\n         }\n \n-        if (added & (STC.const_ | STC.immutable_ | STC.manifest))\n-        {\n-            StorageClass u = orig & (STC.const_ | STC.immutable_ | STC.manifest);\n-            if (u & (u - 1))\n-                error(\"conflicting attribute `%s`\", Token.toChars(token.value));\n-        }\n-        if (added & (STC.gshared | STC.shared_ | STC.tls))\n-        {\n-            StorageClass u = orig & (STC.gshared | STC.shared_ | STC.tls);\n-            if (u & (u - 1))\n-                error(\"conflicting attribute `%s`\", Token.toChars(token.value));\n-        }\n-        if (added & STC.safeGroup)\n-        {\n-            StorageClass u = orig & STC.safeGroup;\n-            if (u & (u - 1))\n-                error(\"conflicting attribute `@%s`\", token.toChars());\n-        }\n+        checkConflictSTCGroup(STC.const_ | STC.immutable_ | STC.manifest);\n+        checkConflictSTCGroup(STC.gshared | STC.shared_ | STC.tls);\n+        checkConflictSTCGroup!true(STC.safeGroup);\n \n         return orig;\n     }\n@@ -2885,7 +2672,7 @@ class Parser(AST) : Lexer\n         }\n         nextToken();\n \n-        /* @@@DEPRECATED_2.098@@@\n+        /* @@@DEPRECATED_2.108@@@\n          * After deprecation period (2.108), remove all code in the version(all) block.\n          */\n         version (all)\n@@ -4614,7 +4401,7 @@ class Parser(AST) : Lexer\n                     (tk.value == TOK.leftParenthesis || tk.value == TOK.leftCurly || tk.value == TOK.in_ || tk.value == TOK.out_ || tk.value == TOK.goesTo ||\n                      tk.value == TOK.do_ || tk.value == TOK.identifier && tk.ident == Id._body))\n                 {\n-                    // @@@DEPRECATED@@@\n+                    // @@@DEPRECATED_2.117@@@\n                     // https://github.com/dlang/DIPs/blob/1f5959abe482b1f9094f6484a7d0a3ade77fc2fc/DIPs/accepted/DIP1003.md\n                     // Deprecated in 2.097 - Can be removed from 2.117\n                     // The deprecation period is longer than usual as `body`\n@@ -5028,12 +4815,18 @@ class Parser(AST) : Lexer\n                         // parseAttributes shouldn't have set these variables\n                         assert(link == linkage && !setAlignment && ealign is null);\n                         auto tpl_ = cast(AST.TemplateDeclaration) s;\n-                        assert(tpl_ !is null && tpl_.members.dim == 1);\n-                        auto fd = cast(AST.FuncLiteralDeclaration) (*tpl_.members)[0];\n-                        auto tf = cast(AST.TypeFunction) fd.type;\n-                        assert(tf.parameterList.parameters.dim > 0);\n-                        auto as = new AST.Dsymbols();\n-                        (*tf.parameterList.parameters)[0].userAttribDecl = new AST.UserAttributeDeclaration(udas, as);\n+                        if (tpl_ is null || tpl_.members.dim != 1)\n+                        {\n+                            error(\"user-defined attributes are not allowed on `alias` declarations\");\n+                        }\n+                        else\n+                        {\n+                            auto fd = cast(AST.FuncLiteralDeclaration) (*tpl_.members)[0];\n+                            auto tf = cast(AST.TypeFunction) fd.type;\n+                            assert(tf.parameterList.parameters.dim > 0);\n+                            auto as = new AST.Dsymbols();\n+                            (*tf.parameterList.parameters)[0].userAttribDecl = new AST.UserAttributeDeclaration(udas, as);\n+                        }\n                     }\n \n                     v = new AST.AliasDeclaration(loc, ident, s);\n@@ -5060,7 +4853,7 @@ class Parser(AST) : Lexer\n                         {\n                             OutBuffer buf;\n                             AST.stcToBuffer(&buf, remStc);\n-                            // @@@DEPRECATED_2.093@@@\n+                            // @@@DEPRECATED_2.103@@@\n                             // Deprecated in 2020-07, can be made an error in 2.103\n                             deprecation(\"storage class `%s` has no effect in type aliases\", buf.peekChars());\n                         }\n@@ -5287,7 +5080,7 @@ class Parser(AST) : Lexer\n         case TOK.identifier:\n             if (token.ident == Id._body)\n             {\n-                // @@@DEPRECATED@@@\n+                // @@@DEPRECATED_2.117@@@\n                 // https://github.com/dlang/DIPs/blob/1f5959abe482b1f9094f6484a7d0a3ade77fc2fc/DIPs/accepted/DIP1003.md\n                 // Deprecated in 2.097 - Can be removed from 2.117\n                 // The deprecation period is longer than usual as `body`\n@@ -7607,7 +7400,7 @@ LagainStc:\n             case TOK.identifier:\n                 if (t.ident == Id._body)\n                 {\n-                    // @@@DEPRECATED@@@\n+                    // @@@DEPRECATED_2.117@@@\n                     // https://github.com/dlang/DIPs/blob/1f5959abe482b1f9094f6484a7d0a3ade77fc2fc/DIPs/accepted/DIP1003.md\n                     // Deprecated in 2.097 - Can be removed from 2.117\n                     // The deprecation period is longer than usual as `body`\n@@ -8652,6 +8445,9 @@ LagainStc:\n             break;\n \n         case TOK.delete_:\n+            // @@@DEPRECATED_2.109@@@\n+            // Use of `delete` keyword has been an error since 2.099.\n+            // Remove from the parser after 2.109.\n             nextToken();\n             e = parseUnaryExp();\n             e = new AST.DeleteExp(loc, e, false);\n@@ -9409,12 +9205,7 @@ LagainStc:\n         const loc = token.loc;\n \n         nextToken();\n-        AST.Expressions* newargs = null;\n         AST.Expressions* arguments = null;\n-        if (token.value == TOK.leftParenthesis)\n-        {\n-            newargs = parseArguments();\n-        }\n \n         // An anonymous nested class starts with \"class\"\n         if (token.value == TOK.class_)\n@@ -9444,7 +9235,7 @@ LagainStc:\n             }\n \n             auto cd = new AST.ClassDeclaration(loc, id, baseclasses, members, false);\n-            auto e = new AST.NewAnonClassExp(loc, thisexp, newargs, cd, arguments);\n+            auto e = new AST.NewAnonClassExp(loc, thisexp, cd, arguments);\n             return e;\n         }\n \n@@ -9469,7 +9260,7 @@ LagainStc:\n             arguments = parseArguments();\n         }\n \n-        auto e = new AST.NewExp(loc, thisexp, newargs, t, arguments);\n+        auto e = new AST.NewExp(loc, thisexp, t, arguments);\n         return e;\n     }\n \n@@ -9519,7 +9310,7 @@ LagainStc:\n                 STC.live     |\n                 /*STC.future   |*/ // probably should be included\n                 STC.disable;\n-    }\n+}\n \n enum PREC : int\n {\n@@ -9541,3 +9332,276 @@ enum PREC : int\n     unary,\n     primary,\n }\n+\n+/**********************************\n+ * Set operator precedence for each operator.\n+ *\n+ * Used by hdrgen\n+ */\n+immutable PREC[EXP.max + 1] precedence =\n+[\n+    EXP.type : PREC.expr,\n+    EXP.error : PREC.expr,\n+    EXP.objcClassReference : PREC.expr, // Objective-C class reference, same as EXP.type\n+\n+    EXP.typeof_ : PREC.primary,\n+    EXP.mixin_ : PREC.primary,\n+\n+    EXP.import_ : PREC.primary,\n+    EXP.dotVariable : PREC.primary,\n+    EXP.scope_ : PREC.primary,\n+    EXP.identifier : PREC.primary,\n+    EXP.this_ : PREC.primary,\n+    EXP.super_ : PREC.primary,\n+    EXP.int64 : PREC.primary,\n+    EXP.float64 : PREC.primary,\n+    EXP.complex80 : PREC.primary,\n+    EXP.null_ : PREC.primary,\n+    EXP.string_ : PREC.primary,\n+    EXP.arrayLiteral : PREC.primary,\n+    EXP.assocArrayLiteral : PREC.primary,\n+    EXP.classReference : PREC.primary,\n+    EXP.file : PREC.primary,\n+    EXP.fileFullPath : PREC.primary,\n+    EXP.line : PREC.primary,\n+    EXP.moduleString : PREC.primary,\n+    EXP.functionString : PREC.primary,\n+    EXP.prettyFunction : PREC.primary,\n+    EXP.typeid_ : PREC.primary,\n+    EXP.is_ : PREC.primary,\n+    EXP.assert_ : PREC.primary,\n+    EXP.halt : PREC.primary,\n+    EXP.template_ : PREC.primary,\n+    EXP.dSymbol : PREC.primary,\n+    EXP.function_ : PREC.primary,\n+    EXP.variable : PREC.primary,\n+    EXP.symbolOffset : PREC.primary,\n+    EXP.structLiteral : PREC.primary,\n+    EXP.compoundLiteral : PREC.primary,\n+    EXP.arrayLength : PREC.primary,\n+    EXP.delegatePointer : PREC.primary,\n+    EXP.delegateFunctionPointer : PREC.primary,\n+    EXP.remove : PREC.primary,\n+    EXP.tuple : PREC.primary,\n+    EXP.traits : PREC.primary,\n+    EXP.default_ : PREC.primary,\n+    EXP.overloadSet : PREC.primary,\n+    EXP.void_ : PREC.primary,\n+    EXP.vectorArray : PREC.primary,\n+    EXP._Generic : PREC.primary,\n+\n+    // post\n+    EXP.dotTemplateInstance : PREC.primary,\n+    EXP.dotIdentifier : PREC.primary,\n+    EXP.dotTemplateDeclaration : PREC.primary,\n+    EXP.dot : PREC.primary,\n+    EXP.dotType : PREC.primary,\n+    EXP.plusPlus : PREC.primary,\n+    EXP.minusMinus : PREC.primary,\n+    EXP.prePlusPlus : PREC.primary,\n+    EXP.preMinusMinus : PREC.primary,\n+    EXP.call : PREC.primary,\n+    EXP.slice : PREC.primary,\n+    EXP.array : PREC.primary,\n+    EXP.index : PREC.primary,\n+\n+    EXP.delegate_ : PREC.unary,\n+    EXP.address : PREC.unary,\n+    EXP.star : PREC.unary,\n+    EXP.negate : PREC.unary,\n+    EXP.uadd : PREC.unary,\n+    EXP.not : PREC.unary,\n+    EXP.tilde : PREC.unary,\n+    EXP.delete_ : PREC.unary,\n+    EXP.new_ : PREC.unary,\n+    EXP.newAnonymousClass : PREC.unary,\n+    EXP.cast_ : PREC.unary,\n+    EXP.throw_ : PREC.unary,\n+\n+    EXP.vector : PREC.unary,\n+    EXP.pow : PREC.pow,\n+\n+    EXP.mul : PREC.mul,\n+    EXP.div : PREC.mul,\n+    EXP.mod : PREC.mul,\n+\n+    EXP.add : PREC.add,\n+    EXP.min : PREC.add,\n+    EXP.concatenate : PREC.add,\n+\n+    EXP.leftShift : PREC.shift,\n+    EXP.rightShift : PREC.shift,\n+    EXP.unsignedRightShift : PREC.shift,\n+\n+    EXP.lessThan : PREC.rel,\n+    EXP.lessOrEqual : PREC.rel,\n+    EXP.greaterThan : PREC.rel,\n+    EXP.greaterOrEqual : PREC.rel,\n+    EXP.in_ : PREC.rel,\n+\n+    /* Note that we changed precedence, so that < and != have the same\n+     * precedence. This change is in the parser, too.\n+     */\n+    EXP.equal : PREC.rel,\n+    EXP.notEqual : PREC.rel,\n+    EXP.identity : PREC.rel,\n+    EXP.notIdentity : PREC.rel,\n+\n+    EXP.and : PREC.and,\n+    EXP.xor : PREC.xor,\n+    EXP.or : PREC.or,\n+\n+    EXP.andAnd : PREC.andand,\n+    EXP.orOr : PREC.oror,\n+\n+    EXP.question : PREC.cond,\n+\n+    EXP.assign : PREC.assign,\n+    EXP.construct : PREC.assign,\n+    EXP.blit : PREC.assign,\n+    EXP.addAssign : PREC.assign,\n+    EXP.minAssign : PREC.assign,\n+    EXP.concatenateAssign : PREC.assign,\n+    EXP.concatenateElemAssign : PREC.assign,\n+    EXP.concatenateDcharAssign : PREC.assign,\n+    EXP.mulAssign : PREC.assign,\n+    EXP.divAssign : PREC.assign,\n+    EXP.modAssign : PREC.assign,\n+    EXP.powAssign : PREC.assign,\n+    EXP.leftShiftAssign : PREC.assign,\n+    EXP.rightShiftAssign : PREC.assign,\n+    EXP.unsignedRightShiftAssign : PREC.assign,\n+    EXP.andAssign : PREC.assign,\n+    EXP.orAssign : PREC.assign,\n+    EXP.xorAssign : PREC.assign,\n+\n+    EXP.comma : PREC.expr,\n+    EXP.declaration : PREC.expr,\n+\n+    EXP.interval : PREC.assign,\n+];\n+\n+enum ParseStatementFlags : int\n+{\n+    semi          = 1,        // empty ';' statements are allowed, but deprecated\n+    scope_        = 2,        // start a new scope\n+    curly         = 4,        // { } statement is required\n+    curlyScope    = 8,        // { } starts a new scope\n+    semiOk        = 0x10,     // empty ';' are really ok\n+}\n+\n+struct PrefixAttributes(AST)\n+{\n+    StorageClass storageClass;\n+    AST.Expression depmsg;\n+    LINK link;\n+    AST.Visibility visibility;\n+    bool setAlignment;\n+    AST.Expression ealign;\n+    AST.Expressions* udas;\n+    const(char)* comment;\n+}\n+\n+/// The result of the `ParseLinkage` function\n+struct ParsedLinkage(AST)\n+{\n+    /// What linkage was specified\n+    LINK link;\n+    /// If `extern(C++, class|struct)`, contains the `class|struct`\n+    CPPMANGLE cppmangle;\n+    /// If `extern(C++, some.identifier)`, will be the identifiers\n+    AST.Identifiers* idents;\n+    /// If `extern(C++, (some_tuple_expression)|\"string\"), will be the expressions\n+    AST.Expressions* identExps;\n+}\n+\n+\n+/*********************************** Private *************************************/\n+\n+/***********************\n+ * How multiple declarations are parsed.\n+ * If 1, treat as C.\n+ * If 0, treat:\n+ *      int *p, i;\n+ * as:\n+ *      int* p;\n+ *      int* i;\n+ */\n+private enum CDECLSYNTAX = 0;\n+\n+/*****\n+ * Support C cast syntax:\n+ *      (type)(expression)\n+ */\n+private enum CCASTSYNTAX = 1;\n+\n+/*****\n+ * Support postfix C array declarations, such as\n+ *      int a[3][4];\n+ */\n+private enum CARRAYDECL = 1;\n+\n+/*****************************\n+ * Destructively extract storage class from pAttrs.\n+ */\n+private StorageClass getStorageClass(AST)(PrefixAttributes!(AST)* pAttrs)\n+{\n+    StorageClass stc = STC.undefined_;\n+    if (pAttrs)\n+    {\n+        stc = pAttrs.storageClass;\n+        pAttrs.storageClass = STC.undefined_;\n+    }\n+    return stc;\n+}\n+\n+/**************************************\n+ * dump mixin expansion to file for better debugging\n+ */\n+private bool writeMixin(const(char)[] s, ref Loc loc)\n+{\n+    if (!global.params.mixinOut)\n+        return false;\n+\n+    OutBuffer* ob = global.params.mixinOut;\n+\n+    ob.writestring(\"// expansion at \");\n+    ob.writestring(loc.toChars());\n+    ob.writenl();\n+\n+    global.params.mixinLines++;\n+\n+    loc = Loc(global.params.mixinFile, global.params.mixinLines + 1, loc.charnum);\n+\n+    // write by line to create consistent line endings\n+    size_t lastpos = 0;\n+    for (size_t i = 0; i < s.length; ++i)\n+    {\n+        // detect LF and CRLF\n+        const c = s[i];\n+        if (c == '\\n' || (c == '\\r' && i+1 < s.length && s[i+1] == '\\n'))\n+        {\n+            ob.writestring(s[lastpos .. i]);\n+            ob.writenl();\n+            global.params.mixinLines++;\n+            if (c == '\\r')\n+                ++i;\n+            lastpos = i + 1;\n+        }\n+    }\n+\n+    if(lastpos < s.length)\n+        ob.writestring(s[lastpos .. $]);\n+\n+    if (s.length == 0 || s[$-1] != '\\n')\n+    {\n+        ob.writenl(); // ensure empty line after expansion\n+        global.params.mixinLines++;\n+    }\n+    ob.writenl();\n+    global.params.mixinLines++;\n+\n+    return true;\n+}\n+\n+"}, {"sha": "571c3fc4cc7acb42a4602af80c5f58f05cd6b6a9", "filename": "gcc/d/dmd/printast.d", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Fprintast.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Fprintast.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fprintast.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -122,6 +122,16 @@ extern (C++) final class PrintASTVisitor : Visitor\n         printAST(e.e1, indent + 2);\n     }\n \n+    override void visit(CastExp e)\n+    {\n+        printIndent(indent);\n+        auto s = EXPtoString(e.op);\n+        printf(\"%.*s %s\\n\", cast(int)s.length, s.ptr, e.type ? e.type.toChars() : \"\");\n+        printIndent(indent + 2);\n+        printf(\".to: %s\\n\", e.to.toChars());\n+        printAST(e.e1, indent + 2);\n+    }\n+\n     override void visit(VectorExp e)\n     {\n         printIndent(indent);"}, {"sha": "85c4d5bf6a5ae525df8c0c5bb2863a31cfa5a389", "filename": "gcc/d/dmd/semantic2.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Fsemantic2.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Fsemantic2.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fsemantic2.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -422,7 +422,7 @@ private extern(C++) final class Semantic2Visitor : Visitor\n                 const sameParams = tf1.parameterList == tf2.parameterList;\n \n                 // Allow the hack to declare overloads with different parameters/STC's\n-                // @@@DEPRECATED_2.094@@@\n+                // @@@DEPRECATED_2.104@@@\n                 // Deprecated in 2020-08, make this an error in 2.104\n                 if (parent1.isModule() &&\n                     f1.linkage != LINK.d && f1.linkage != LINK.cpp &&"}, {"sha": "3f019669400d40e5ca0f6838a2f9b252874cb6a6", "filename": "gcc/d/dmd/semantic3.d", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Fsemantic3.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Fsemantic3.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fsemantic3.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -377,6 +377,12 @@ private extern(C++) final class Semantic3Visitor : Visitor\n \n             // Reverts: https://issues.dlang.org/show_bug.cgi?id=5710\n             // No compiler supports this, and there was never any spec for it.\n+            // @@@DEPRECATED_2.116@@@\n+            // Deprecated in 2.096, can be made an error in 2.116.\n+            // The deprecation period is longer than usual as dual-context\n+            // functions may be widely used by dmd-compiled projects.\n+            // It also gives more time for the implementation of dual-context\n+            // functions to be reworked as a frontend-only feature.\n             if (funcdecl.isThis2)\n             {\n                 funcdecl.deprecation(\"function requires a dual-context, which is deprecated\");\n@@ -746,7 +752,7 @@ private extern(C++) final class Semantic3Visitor : Visitor\n                 // Check for errors related to 'nothrow'.\n                 const blockexit = funcdecl.fbody.blockExit(funcdecl, f.isnothrow);\n                 if (f.isnothrow && blockexit & BE.throw_)\n-                    error(funcdecl.loc, \"`nothrow` %s `%s` may throw\", funcdecl.kind(), funcdecl.toPrettyChars());\n+                    error(funcdecl.loc, \"%s `%s` may throw but is marked as `nothrow`\", funcdecl.kind(), funcdecl.toPrettyChars());\n \n                 if (!(blockexit & (BE.throw_ | BE.halt) || funcdecl.flags & FUNCFLAG.hasCatches))\n                 {\n@@ -1146,14 +1152,16 @@ private extern(C++) final class Semantic3Visitor : Visitor\n \n                             s = s.statementSemantic(sc2);\n \n-                            bool isnothrow = f.isnothrow & !(funcdecl.flags & FUNCFLAG.nothrowInprocess);\n+                            immutable bool isnothrow = f.isnothrow && !(funcdecl.flags & FUNCFLAG.nothrowInprocess);\n                             const blockexit = s.blockExit(funcdecl, isnothrow);\n                             if (blockexit & BE.throw_)\n+                            {\n                                 funcdecl.eh_none = false;\n-                            if (f.isnothrow && isnothrow && blockexit & BE.throw_)\n-                                error(funcdecl.loc, \"`nothrow` %s `%s` may throw\", funcdecl.kind(), funcdecl.toPrettyChars());\n-                            if (funcdecl.flags & FUNCFLAG.nothrowInprocess && blockexit & BE.throw_)\n-                                f.isnothrow = false;\n+                                if (isnothrow)\n+                                    error(funcdecl.loc, \"%s `%s` may throw but is marked as `nothrow`\", funcdecl.kind(), funcdecl.toPrettyChars());\n+                                else if (funcdecl.flags & FUNCFLAG.nothrowInprocess)\n+                                    f.isnothrow = false;\n+                            }\n \n                             if (sbody.blockExit(funcdecl, f.isnothrow) == BE.fallthru)\n                                 sbody = new CompoundStatement(Loc.initial, sbody, s);\n@@ -1402,7 +1410,7 @@ private extern(C++) final class Semantic3Visitor : Visitor\n         auto sexp = new ExpStatement(ctor.loc, ce);\n         auto ss = new ScopeStatement(ctor.loc, sexp, ctor.loc);\n \n-        // @@@DEPRECATED_2096@@@\n+        // @@@DEPRECATED_2.106@@@\n         // Allow negligible attribute violations to allow for a smooth\n         // transition. Remove this after the usual deprecation period\n         // after 2.106."}, {"sha": "5dbe5b66d3ec543aab4e5913ce644924b0a581a3", "filename": "gcc/d/dmd/statementsem.d", "status": "modified", "additions": 60, "deletions": 146, "changes": 206, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Fstatementsem.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Fstatementsem.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fstatementsem.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -1608,7 +1608,7 @@ package (dmd) extern (C++) final class StatementSemanticVisitor : Visitor\n      * Params:\n      *  sc = context\n      *  fs = ForeachStatement\n-     *  tfld = type of function literal to be created, can be null\n+     *  tfld = type of function literal to be created (type of opApply() function if any), can be null\n      * Returns:\n      *  Function literal created, as an expression\n      *  null if error.\n@@ -1619,7 +1619,7 @@ package (dmd) extern (C++) final class StatementSemanticVisitor : Visitor\n         foreach (i; 0 .. fs.parameters.dim)\n         {\n             Parameter p = (*fs.parameters)[i];\n-            StorageClass stc = STC.ref_;\n+            StorageClass stc = STC.ref_ | (p.storageClass & STC.scope_);\n             Identifier id;\n \n             p.type = p.type.typeSemantic(fs.loc, sc);\n@@ -1628,17 +1628,17 @@ package (dmd) extern (C++) final class StatementSemanticVisitor : Visitor\n             {\n                 Parameter prm = tfld.parameterList[i];\n                 //printf(\"\\tprm = %s%s\\n\", (prm.storageClass&STC.ref_?\"ref \":\"\").ptr, prm.ident.toChars());\n-                stc = prm.storageClass & STC.ref_;\n-                id = p.ident; // argument copy is not need.\n-                if ((p.storageClass & STC.ref_) != stc)\n+                stc = (prm.storageClass & STC.ref_) | (p.storageClass & STC.scope_);\n+                if ((p.storageClass & STC.ref_) != (prm.storageClass & STC.ref_))\n                 {\n-                    if (!stc)\n+                    if (!(prm.storageClass & STC.ref_))\n                     {\n                         fs.error(\"`foreach`: cannot make `%s` `ref`\", p.ident.toChars());\n                         return null;\n                     }\n                     goto LcopyArg;\n                 }\n+                id = p.ident; // argument copy is not need.\n             }\n             else if (p.storageClass & STC.ref_)\n             {\n@@ -1655,7 +1655,7 @@ package (dmd) extern (C++) final class StatementSemanticVisitor : Visitor\n \n                 Initializer ie = new ExpInitializer(fs.loc, new IdentifierExp(fs.loc, id));\n                 auto v = new VarDeclaration(fs.loc, p.type, p.ident, ie);\n-                v.storage_class |= STC.temp;\n+                v.storage_class |= STC.temp | (stc & STC.scope_);\n                 Statement s = new ExpStatement(fs.loc, v);\n                 fs._body = new CompoundStatement(fs.loc, s, fs._body);\n             }\n@@ -3567,7 +3567,6 @@ package (dmd) extern (C++) final class StatementSemanticVisitor : Visitor\n \n         tcs.tryBody = sc.tryBody;   // chain on the in-flight tryBody\n         tcs._body = tcs._body.semanticScope(sc, null, null, tcs);\n-        assert(tcs._body);\n \n         /* Even if body is empty, still do semantic analysis on catches\n          */\n@@ -3610,6 +3609,11 @@ package (dmd) extern (C++) final class StatementSemanticVisitor : Visitor\n         if (catchErrors)\n             return setError();\n \n+        // No actual code in the try (i.e. omitted any conditionally compiled code)\n+        // Could also be extended to check for hasCode\n+        if (!tcs._body)\n+            return;\n+\n         if (tcs._body.isErrorStatement())\n         {\n             result = tcs._body;\n@@ -4764,161 +4768,71 @@ private Statements* flatten(Statement statement, Scope* sc)\n }\n \n /***********************************************************\n- * Convert TemplateMixin members (== Dsymbols) to Statements.\n+ * Convert TemplateMixin members (which are Dsymbols) to Statements.\n+ * Params:\n+ *    s = the symbol to convert to a Statement\n+ * Returns:\n+ *    s redone as a Statement\n  */\n private Statement toStatement(Dsymbol s)\n {\n-    extern (C++) final class ToStmt : Visitor\n-    {\n-        alias visit = Visitor.visit;\n-    public:\n-        Statement result;\n-\n-        Statement visitMembers(Loc loc, Dsymbols* a)\n-        {\n-            if (!a)\n-                return null;\n-\n-            auto statements = new Statements();\n-            foreach (s; *a)\n-            {\n-                statements.push(toStatement(s));\n-            }\n-            return new CompoundStatement(loc, statements);\n-        }\n+    Statement result;\n \n-        override void visit(Dsymbol s)\n+    if (auto tm = s.isTemplateMixin())\n+    {\n+        auto a = new Statements();\n+        foreach (m; *tm.members)\n         {\n-            .error(Loc.initial, \"Internal Compiler Error: cannot mixin %s `%s`\\n\", s.kind(), s.toChars());\n-            result = new ErrorStatement();\n+            if (Statement sx = toStatement(m))\n+                a.push(sx);\n         }\n-\n-        override void visit(TemplateMixin tm)\n-        {\n-            auto a = new Statements();\n-            foreach (m; *tm.members)\n-            {\n-                Statement s = toStatement(m);\n-                if (s)\n-                    a.push(s);\n-            }\n-            result = new CompoundStatement(tm.loc, a);\n-        }\n-\n+        result = new CompoundStatement(tm.loc, a);\n+    }\n+    else if (s.isVarDeclaration()       ||\n+             s.isAggregateDeclaration() ||\n+             s.isFuncDeclaration()      ||\n+             s.isEnumDeclaration()      ||\n+             s.isAliasDeclaration()     ||\n+             s.isTemplateDeclaration())\n+    {\n+        /* Perhaps replace the above with isScopeDsymbol() || isDeclaration()\n+         */\n         /* An actual declaration symbol will be converted to DeclarationExp\n          * with ExpStatement.\n          */\n-        Statement declStmt(Dsymbol s)\n-        {\n-            auto de = new DeclarationExp(s.loc, s);\n-            de.type = Type.tvoid; // avoid repeated semantic\n-            return new ExpStatement(s.loc, de);\n-        }\n-\n-        override void visit(VarDeclaration d)\n-        {\n-            result = declStmt(d);\n-        }\n-\n-        override void visit(AggregateDeclaration d)\n-        {\n-            result = declStmt(d);\n-        }\n-\n-        override void visit(FuncDeclaration d)\n-        {\n-            result = declStmt(d);\n-        }\n-\n-        override void visit(EnumDeclaration d)\n-        {\n-            result = declStmt(d);\n-        }\n-\n-        override void visit(AliasDeclaration d)\n-        {\n-            result = declStmt(d);\n-        }\n-\n-        override void visit(TemplateDeclaration d)\n-        {\n-            result = declStmt(d);\n-        }\n-\n+        auto de = new DeclarationExp(s.loc, s);\n+        de.type = Type.tvoid; // avoid repeated semantic\n+        result = new ExpStatement(s.loc, de);\n+    }\n+    else if (auto d = s.isAttribDeclaration())\n+    {\n         /* All attributes have been already picked by the semantic analysis of\n          * 'bottom' declarations (function, struct, class, etc).\n          * So we don't have to copy them.\n          */\n-        override void visit(StorageClassDeclaration d)\n-        {\n-            result = visitMembers(d.loc, d.decl);\n-        }\n-\n-        override void visit(DeprecatedDeclaration d)\n-        {\n-            result = visitMembers(d.loc, d.decl);\n-        }\n-\n-        override void visit(LinkDeclaration d)\n-        {\n-            result = visitMembers(d.loc, d.decl);\n-        }\n-\n-        override void visit(VisibilityDeclaration d)\n-        {\n-            result = visitMembers(d.loc, d.decl);\n-        }\n-\n-        override void visit(AlignDeclaration d)\n+        if (Dsymbols* a = d.include(null))\n         {\n-            result = visitMembers(d.loc, d.decl);\n-        }\n-\n-        override void visit(UserAttributeDeclaration d)\n-        {\n-            result = visitMembers(d.loc, d.decl);\n-        }\n-\n-        override void visit(ForwardingAttribDeclaration d)\n-        {\n-            result = visitMembers(d.loc, d.decl);\n-        }\n-\n-        override void visit(StaticAssert s)\n-        {\n-        }\n-\n-        override void visit(Import s)\n-        {\n-        }\n-\n-        override void visit(PragmaDeclaration d)\n-        {\n-        }\n-\n-        override void visit(ConditionalDeclaration d)\n-        {\n-            result = visitMembers(d.loc, d.include(null));\n-        }\n-\n-        override void visit(StaticForeachDeclaration d)\n-        {\n-            assert(d.sfe && !!d.sfe.aggrfe ^ !!d.sfe.rangefe);\n-            result = visitMembers(d.loc, d.include(null));\n-        }\n-\n-        override void visit(CompileDeclaration d)\n-        {\n-            result = visitMembers(d.loc, d.include(null));\n+            auto statements = new Statements();\n+            foreach (sx; *a)\n+            {\n+                statements.push(toStatement(sx));\n+            }\n+            result = new CompoundStatement(d.loc, statements);\n         }\n     }\n+    else if (s.isStaticAssert() ||\n+             s.isImport())\n+    {\n+        /* Ignore as they are not Statements\n+         */\n+    }\n+    else\n+    {\n+        .error(Loc.initial, \"Internal Compiler Error: cannot mixin %s `%s`\\n\", s.kind(), s.toChars());\n+        result = new ErrorStatement();\n+    }\n \n-    if (!s)\n-        return null;\n-\n-    scope ToStmt v = new ToStmt();\n-    s.accept(v);\n-    return v.result;\n+    return result;\n }\n \n /**"}, {"sha": "c7d314808efcb74129b60cb1cabda0c30cbc79b7", "filename": "gcc/d/dmd/staticassert.d", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Fstaticassert.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Fstaticassert.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fstaticassert.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -59,6 +59,11 @@ extern (C++) final class StaticAssert : Dsymbol\n         return \"static assert\";\n     }\n \n+    override inout(StaticAssert) isStaticAssert() inout\n+    {\n+        return this;\n+    }\n+\n     override void accept(Visitor v)\n     {\n         v.visit(this);"}, {"sha": "38142bc6efc50fc5381e5bccc808949ccb7cd0a2", "filename": "gcc/d/dmd/staticassert.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Fstaticassert.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Fstaticassert.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fstaticassert.h?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -24,5 +24,6 @@ class StaticAssert : public Dsymbol\n     void addMember(Scope *sc, ScopeDsymbol *sds);\n     bool oneMember(Dsymbol **ps, Identifier *ident);\n     const char *kind() const;\n+    StaticAssert *isStaticAssert() { return this; }\n     void accept(Visitor *v) { v->visit(this); }\n };"}, {"sha": "9c24df065305408522c34b0821547699f1abbc0f", "filename": "gcc/d/dmd/tokens.d", "status": "modified", "additions": 75, "deletions": 45, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Ftokens.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Ftokens.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Ftokens.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -35,7 +35,6 @@ enum TOK : ubyte\n     leftCurly,\n     rightCurly,\n     colon,\n-    negate,\n     semicolon,\n     dotDotDot,\n     endOfFile,\n@@ -44,26 +43,18 @@ enum TOK : ubyte\n     assert_,\n     true_,\n     false_,\n-    array,\n-    call,\n-    address,\n-    type,\n     throw_,\n     new_,\n     delete_,\n-    star,\n     variable,\n     slice,\n     version_,\n     module_,\n     dollar,\n     template_,\n-    declaration,\n     typeof_,\n     pragma_,\n     typeid_,\n-    uadd,\n-    remove,\n     comment,\n \n     // Operators\n@@ -75,7 +66,6 @@ enum TOK : ubyte\n     notEqual,\n     identity,\n     notIdentity,\n-    index,\n     is_,\n \n     leftShift,\n@@ -281,6 +271,7 @@ enum TOK : ubyte\n     _import,\n     __cdecl,\n     __declspec,\n+    __stdcall,\n     __attribute__,\n }\n \n@@ -589,6 +580,7 @@ private immutable TOK[] keywords =\n     TOK._import,\n     TOK.__cdecl,\n     TOK.__declspec,\n+    TOK.__stdcall,\n     TOK.__attribute__,\n ];\n \n@@ -617,7 +609,7 @@ static immutable TOK[TOK.max + 1] Ckeywords =\n                        restrict, return_, int16, signed, sizeof_, static_, struct_, switch_, typedef_,\n                        union_, unsigned, void_, volatile, while_, asm_,\n                        _Alignas, _Alignof, _Atomic, _Bool, _Complex, _Generic, _Imaginary, _Noreturn,\n-                       _Static_assert, _Thread_local, _import, __cdecl, __declspec, __attribute__ ];\n+                       _Static_assert, _Thread_local, _import, __cdecl, __declspec, __stdcall, __attribute__ ];\n \n         foreach (kw; Ckwds)\n             tab[kw] = cast(TOK) kw;\n@@ -805,18 +797,11 @@ extern (C++) struct Token\n         TOK.andAnd: \"&&\",\n         TOK.or: \"|\",\n         TOK.orOr: \"||\",\n-        TOK.array: \"[]\",\n-        TOK.index: \"[i]\",\n-        TOK.address: \"&\",\n-        TOK.star: \"*\",\n         TOK.tilde: \"~\",\n         TOK.dollar: \"$\",\n         TOK.plusPlus: \"++\",\n         TOK.minusMinus: \"--\",\n-        TOK.type: \"type\",\n         TOK.question: \"?\",\n-        TOK.negate: \"-\",\n-        TOK.uadd: \"+\",\n         TOK.variable: \"var\",\n         TOK.addAssign: \"+=\",\n         TOK.minAssign: \"-=\",\n@@ -829,7 +814,6 @@ extern (C++) struct Token\n         TOK.andAssign: \"&=\",\n         TOK.orAssign: \"|=\",\n         TOK.concatenateAssign: \"~=\",\n-        TOK.call: \"call\",\n         TOK.identity: \"is\",\n         TOK.notIdentity: \"!is\",\n         TOK.identifier: \"identifier\",\n@@ -844,14 +828,12 @@ extern (C++) struct Token\n         // For debugging\n         TOK.error: \"error\",\n         TOK.string_: \"string\",\n-        TOK.declaration: \"declaration\",\n         TOK.onScopeExit: \"scope(exit)\",\n         TOK.onScopeSuccess: \"scope(success)\",\n         TOK.onScopeFailure: \"scope(failure)\",\n \n         // Finish up\n         TOK.reserved: \"reserved\",\n-        TOK.remove: \"remove\",\n         TOK.comment: \"comment\",\n         TOK.int32Literal: \"int32v\",\n         TOK.uns32Literal: \"uns32v\",\n@@ -896,6 +878,7 @@ extern (C++) struct Token\n         TOK._import       : \"__import\",\n         TOK.__cdecl        : \"__cdecl\",\n         TOK.__declspec     : \"__declspec\",\n+        TOK.__stdcall      : \"__stdcall\",\n         TOK.__attribute__  : \"__attribute__\",\n     ];\n \n@@ -963,12 +946,20 @@ nothrow:\n             sprintf(&buffer[0], \"%d\", cast(d_int32)intvalue);\n             break;\n         case TOK.uns32Literal:\n-        case TOK.charLiteral:\n         case TOK.wcharLiteral:\n         case TOK.dcharLiteral:\n         case TOK.wchar_tLiteral:\n             sprintf(&buffer[0], \"%uU\", cast(d_uns32)unsvalue);\n             break;\n+        case TOK.charLiteral:\n+        {\n+            const v = cast(d_int32)intvalue;\n+            if (v >= ' ' && v <= '~')\n+                sprintf(&buffer[0], \"'%c'\", v);\n+            else\n+                sprintf(&buffer[0], \"'\\\\x%02x'\", v);\n+            break;\n+        }\n         case TOK.int64Literal:\n             sprintf(&buffer[0], \"%lldL\", cast(long)intvalue);\n             break;\n@@ -1006,29 +997,7 @@ nothrow:\n                 {\n                     dchar c;\n                     utf_decodeChar(ustring[0 .. len], i, c);\n-                    switch (c)\n-                    {\n-                    case 0:\n-                        break;\n-                    case '\"':\n-                    case '\\\\':\n-                        buf.writeByte('\\\\');\n-                        goto default;\n-                    default:\n-                        if (c <= 0x7F)\n-                        {\n-                            if (isprint(c))\n-                                buf.writeByte(c);\n-                            else\n-                                buf.printf(\"\\\\x%02x\", c);\n-                        }\n-                        else if (c <= 0xFFFF)\n-                            buf.printf(\"\\\\u%04x\", c);\n-                        else\n-                            buf.printf(\"\\\\U%08x\", c);\n-                        continue;\n-                    }\n-                    break;\n+                    writeCharLiteral(buf, c);\n                 }\n                 buf.writeByte('\"');\n                 if (postfix)\n@@ -1103,3 +1072,64 @@ nothrow:\n     }\n }\n \n+/**\n+ * Write a character, using a readable escape sequence if needed\n+ *\n+ * Useful for printing \"\" string literals in e.g. error messages, ddoc, or the `.stringof` property\n+ *\n+ * Params:\n+ *   buf = buffer to append character in\n+ *   c = code point to write\n+ */\n+nothrow\n+void writeCharLiteral(ref OutBuffer buf, dchar c)\n+{\n+    switch (c)\n+    {\n+        case '\\0':\n+            buf.writestring(\"\\\\0\");\n+            break;\n+        case '\\n':\n+            buf.writestring(\"\\\\n\");\n+            break;\n+        case '\\r':\n+            buf.writestring(\"\\\\r\");\n+            break;\n+        case '\\t':\n+            buf.writestring(\"\\\\t\");\n+            break;\n+        case '\\b':\n+            buf.writestring(\"\\\\b\");\n+            break;\n+        case '\\f':\n+            buf.writestring(\"\\\\f\");\n+            break;\n+        case '\"':\n+        case '\\\\':\n+            buf.writeByte('\\\\');\n+            goto default;\n+        default:\n+            if (c <= 0x7F)\n+            {\n+                if (isprint(c))\n+                    buf.writeByte(c);\n+                else\n+                    buf.printf(\"\\\\x%02x\", c);\n+            }\n+            else if (c <= 0xFFFF)\n+                buf.printf(\"\\\\u%04x\", c);\n+            else\n+                buf.printf(\"\\\\U%08x\", c);\n+            break;\n+    }\n+}\n+\n+unittest\n+{\n+    OutBuffer buf;\n+    foreach(dchar d; \"a\\n\\r\\t\\b\\f\\0\\x11\\u7233\\U00017233\"d)\n+    {\n+        writeCharLiteral(buf, d);\n+    }\n+    assert(buf.extractSlice() == `a\\n\\r\\t\\b\\f\\0\\x11\\u7233\\U00017233`);\n+}"}, {"sha": "a9f5028038e08e593c340f61b41cad853a5049ad", "filename": "gcc/d/dmd/tokens.h", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Ftokens.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Ftokens.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Ftokens.h?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -44,7 +44,6 @@ enum class TOK : unsigned char\n     leftCurly,\n     rightCurly,\n     colon,\n-    negate,\n     semicolon,\n     dotDotDot,\n     endOfFile,\n@@ -53,26 +52,18 @@ enum class TOK : unsigned char\n     assert_,\n     true_,\n     false_,\n-    array,\n-    call,\n-    address,\n-    type,\n     throw_,\n     new_,\n     delete_,\n-    star,\n     variable,\n     slice,\n     version_,\n     module_,\n     dollar,\n     template_,\n-    declaration,\n     typeof_,\n     pragma_,\n     typeid_,\n-    uadd,\n-    remove,\n     comment,\n \n     // Operators\n@@ -84,7 +75,6 @@ enum class TOK : unsigned char\n     notEqual,\n     identity,\n     notIdentity,\n-    index,\n     is_,\n \n     leftShift,      // 64\n@@ -288,8 +278,9 @@ enum class TOK : unsigned char\n \n     // C only extended keywords\n     _import,\n-    cdecl,\n+    cdecl_,\n     declspec,\n+    stdcall,\n     attribute__,\n \n     MAX,"}, {"sha": "615c49fd6233f104d725714daaba22c823120566", "filename": "gcc/d/dmd/transitivevisitor.d", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Ftransitivevisitor.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Ftransitivevisitor.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Ftransitivevisitor.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -961,8 +961,6 @@ package mixin template ParseVisitMethods(AST)\n         //printf(\"Visiting NewExp\\n\");\n         if (e.thisexp)\n             e.thisexp.accept(this);\n-        if (e.newargs && e.newargs.dim)\n-            visitArgs(e.newargs);\n         visitType(e.newtype);\n         if (e.arguments && e.arguments.dim)\n             visitArgs(e.arguments);\n@@ -973,8 +971,6 @@ package mixin template ParseVisitMethods(AST)\n         //printf(\"Visiting NewAnonClassExp\\n\");\n         if (e.thisexp)\n             e.thisexp.accept(this);\n-        if (e.newargs && e.newargs.dim)\n-            visitArgs(e.newargs);\n         if (e.arguments && e.arguments.dim)\n             visitArgs(e.arguments);\n         if (e.cd)"}, {"sha": "637b32ecdadd0095c0587ac09e160368c7e9f3e7", "filename": "gcc/d/dmd/typesem.d", "status": "modified", "additions": 38, "deletions": 42, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Ftypesem.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fdmd%2Ftypesem.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Ftypesem.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -210,6 +210,9 @@ private void resolveHelper(TypeQualified mt, const ref Loc loc, Scope* sc, Dsymb\n             error(loc, \"undefined identifier `%s`, did you mean %s `%s`?\", p, s2.kind(), s2.toChars());\n         else if (const q = Scope.search_correct_C(id))\n             error(loc, \"undefined identifier `%s`, did you mean `%s`?\", p, q);\n+        else if ((id == Id.This   && sc.getStructClassScope()) ||\n+                 (id == Id._super && sc.getClassScope()))\n+            error(loc, \"undefined identifier `%s`, did you mean `typeof(%s)`?\", p, p);\n         else\n             error(loc, \"undefined identifier `%s`\", p);\n \n@@ -273,7 +276,7 @@ private void resolveHelper(TypeQualified mt, const ref Loc loc, Scope* sc, Dsymb\n             // Same check as in Expression.semanticY(DotIdExp)\n             else if (sm.isPackage() && checkAccess(sc, sm.isPackage()))\n             {\n-                // @@@DEPRECATED_2.096@@@\n+                // @@@DEPRECATED_2.106@@@\n                 // Should be an error in 2.106. Just remove the deprecation call\n                 // and uncomment the null assignment\n                 deprecation(loc, \"%s %s is not accessible here, perhaps add 'static import %s;'\", sm.kind(), sm.toPrettyChars(), sm.toPrettyChars());\n@@ -2040,23 +2043,39 @@ extern(C++) Type typeSemantic(Type type, const ref Loc loc, Scope* sc)\n             return mtype.resolved;\n         }\n \n+        /* Find the current scope by skipping tag scopes.\n+         * In C, tag scopes aren't considered scopes.\n+         */\n+        Scope* sc2 = sc;\n+        while (1)\n+        {\n+            sc2 = sc2.inner();\n+            auto scopesym = sc2.scopesym;\n+            if (scopesym.isStructDeclaration())\n+            {\n+                sc2 = sc2.enclosing;\n+                continue;\n+            }\n+            break;\n+        }\n+\n         /* Declare mtype as a struct/union/enum declaration\n          */\n         void declareTag()\n         {\n             void declare(ScopeDsymbol sd)\n             {\n                 sd.members = mtype.members;\n-                auto scopesym = sc.inner().scopesym;\n+                auto scopesym = sc2.inner().scopesym;\n                 if (scopesym.members)\n                     scopesym.members.push(sd);\n                 if (scopesym.symtab && !scopesym.symtabInsert(sd))\n                 {\n                     Dsymbol s2 = scopesym.symtabLookup(sd, mtype.id);\n-                    handleTagSymbols(*sc, sd, s2, scopesym);\n+                    handleTagSymbols(*sc2, sd, s2, scopesym);\n                 }\n-                sd.parent = sc.parent;\n-                sd.dsymbolSemantic(sc);\n+                sd.parent = sc2.parent;\n+                sd.dsymbolSemantic(sc2);\n             }\n \n             switch (mtype.tok)\n@@ -2098,7 +2117,7 @@ extern(C++) Type typeSemantic(Type type, const ref Loc loc, Scope* sc)\n         /* look for pre-existing declaration\n          */\n         Dsymbol scopesym;\n-        auto s = sc.search(mtype.loc, mtype.id, &scopesym, IgnoreErrors | TagNameSpace);\n+        auto s = sc2.search(mtype.loc, mtype.id, &scopesym, IgnoreErrors | TagNameSpace);\n         if (!s || s.isModule())\n         {\n             // no pre-existing declaration, so declare it\n@@ -2111,7 +2130,7 @@ extern(C++) Type typeSemantic(Type type, const ref Loc loc, Scope* sc)\n         /* A redeclaration only happens if both declarations are in\n          * the same scope\n          */\n-        const bool redeclar = (scopesym == sc.inner().scopesym);\n+        const bool redeclar = (scopesym == sc2.inner().scopesym);\n \n         if (redeclar)\n         {\n@@ -2154,7 +2173,7 @@ extern(C++) Type typeSemantic(Type type, const ref Loc loc, Scope* sc)\n                          * picked up and added to the symtab.\n                          */\n                         sd.semanticRun = PASS.semantic;\n-                        sd.dsymbolSemantic(sc);\n+                        sd.dsymbolSemantic(sc2);\n                     }\n                 }\n                 else\n@@ -2985,44 +3004,21 @@ void resolve(Type mt, const ref Loc loc, Scope* sc, out Expression pe, out Type\n     void visitIdentifier(TypeIdentifier mt)\n     {\n         //printf(\"TypeIdentifier::resolve(sc = %p, idents = '%s')\\n\", sc, mt.toChars());\n-        if ((mt.ident.equals(Id._super) || mt.ident.equals(Id.This)) && !hasThis(sc))\n-        {\n-            // @@@DEPRECATED_v2.091@@@.\n-            // Made an error in 2.086.\n-            // Eligible for removal in 2.091.\n-            if (mt.ident.equals(Id._super))\n-            {\n-                error(mt.loc, \"Using `super` as a type is obsolete. Use `typeof(super)` instead\");\n-            }\n-             // @@@DEPRECATED_v2.091@@@.\n-            // Made an error in 2.086.\n-            // Eligible for removal in 2.091.\n-            if (mt.ident.equals(Id.This))\n-            {\n-                error(mt.loc, \"Using `this` as a type is obsolete. Use `typeof(this)` instead\");\n-            }\n-            if (AggregateDeclaration ad = sc.getStructClassScope())\n-            {\n-                if (ClassDeclaration cd = ad.isClassDeclaration())\n-                {\n-                    if (mt.ident.equals(Id.This))\n-                        mt.ident = cd.ident;\n-                    else if (cd.baseClass && mt.ident.equals(Id._super))\n-                        mt.ident = cd.baseClass.ident;\n-                }\n-                else\n-                {\n-                    StructDeclaration sd = ad.isStructDeclaration();\n-                    if (sd && mt.ident.equals(Id.This))\n-                        mt.ident = sd.ident;\n-                }\n-            }\n-        }\n         if (mt.ident == Id.ctfe)\n         {\n             error(loc, \"variable `__ctfe` cannot be read at compile time\");\n             return returnError();\n         }\n+        if (mt.ident == Id.builtin_va_list) // gcc has __builtin_va_xxxx for stdarg.h\n+        {\n+            /* Since we don't support __builtin_va_start, -arg, -end, we don't\n+             * have to actually care what -list is. A void* will do.\n+             * If we ever do care, import core.stdc.stdarg and pull\n+             * the definition out of that, similarly to how std.math is handled for PowExp\n+             */\n+            pt = target.va_listType(loc, sc);\n+            return;\n+        }\n \n         Dsymbol scopesym;\n         Dsymbol s = sc.search(loc, mt.ident, &scopesym);\n@@ -3821,7 +3817,7 @@ Expression dotExp(Type mt, Scope* sc, Expression e, Identifier ident, int flag)\n                  *  e.opDot().ident\n                  */\n                 e = build_overload(e.loc, sc, e, null, fd);\n-                // @@@DEPRECATED_2.087@@@.\n+                // @@@DEPRECATED_2.092@@@.\n                 e.deprecation(\"`opDot` is deprecated. Use `alias this`\");\n                 e = new DotIdExp(e.loc, e, ident);\n                 return returnExp(e.expressionSemantic(sc));"}, {"sha": "d5e4df7f563941b9d4f1ff017a270c419a864759", "filename": "gcc/d/expr.cc", "status": "modified", "additions": 10, "deletions": 36, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fexpr.cc?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -22,6 +22,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"dmd/aggregate.h\"\n #include \"dmd/ctfe.h\"\n #include \"dmd/declaration.h\"\n+#include \"dmd/enum.h\"\n #include \"dmd/expression.h\"\n #include \"dmd/identifier.h\"\n #include \"dmd/init.h\"\n@@ -1460,40 +1461,6 @@ class ExprVisitor : public Visitor\n \tt1 = build_address (t1);\n \tthis->result_ = build_libcall (libcall, Type::tvoid, 1, t1);\n       }\n-    else if (tb1->ty == TY::Tarray)\n-      {\n-\t/* For dynamic arrays, the garbage collector is called to immediately\n-\t   release the memory.  */\n-\tType *telem = tb1->nextOf ()->baseElemOf ();\n-\ttree ti = null_pointer_node;\n-\n-\tif (TypeStruct *ts = telem->isTypeStruct ())\n-\t  {\n-\t    /* Might need to run destructor on array contents.  */\n-\t    if (ts->sym->dtor)\n-\t      ti = build_typeinfo (e->loc, tb1->nextOf ());\n-\t  }\n-\n-\t/* Generate: _delarray_t (&t1, ti);  */\n-\tthis->result_ = build_libcall (LIBCALL_DELARRAYT, Type::tvoid, 2,\n-\t\t\t\t       build_address (t1), ti);\n-      }\n-    else if (tb1->ty == TY::Tpointer)\n-      {\n-\t/* For pointers to a struct instance, if the struct has overloaded\n-\t   operator delete, then that operator is called.  */\n-\tt1 = build_address (t1);\n-\tType *tnext = tb1->isTypePointer ()->next->toBasetype ();\n-\n-\t/* This case should have been rewritten to `_d_delstruct` in the\n-\t   semantic phase.  */\n-\tif (TypeStruct *ts = tnext->isTypeStruct ())\n-\t  gcc_assert (!ts->sym->dtor);\n-\n-\t/* Otherwise, the garbage collector is called to immediately free the\n-\t   memory allocated for the pointer.  */\n-\tthis->result_ = build_libcall (LIBCALL_DELMEMORY, Type::tvoid, 1, t1);\n-      }\n     else\n       {\n \terror (\"don%'t know how to delete %qs\", e->e1->toChars ());\n@@ -1936,10 +1903,17 @@ class ExprVisitor : public Visitor\n \telse\n \t  {\n \t    tree object = build_expr (e->e1);\n+\t    Type *tb = e->e1->type->toBasetype ();\n \n-\t    if (e->e1->type->toBasetype ()->ty != TY::Tstruct)\n+\t    if (tb->ty != TY::Tstruct)\n \t      object = build_deref (object);\n \n+\t    /* __complex is represented as a struct in the front-end, but\n+\t       underlying is really a complex type.  */\n+\t    if (e->e1->type->ty == TY::Tenum\n+\t\t&& e->e1->type->isTypeEnum ()->sym->isSpecial ())\n+\t      object = build_vconvert (build_ctype (tb), object);\n+\n \t    this->result_ = component_ref (object, get_symbol_decl (vd));\n \t  }\n       }\n@@ -2604,7 +2578,7 @@ class ExprVisitor : public Visitor\n \n \tfor (size_t i = 0; i < e->len; i++)\n \t  {\n-\t    tree value = build_integer_cst (e->charAt (i), etype);\n+\t    tree value = build_integer_cst (e->getCodeUnit (i), etype);\n \t    CONSTRUCTOR_APPEND_ELT (elms, size_int (i), value);\n \t  }\n "}, {"sha": "acb610f71f0e4b85474734674d601ce164a7f95a", "filename": "gcc/d/runtime.def", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fruntime.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Fruntime.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fruntime.def?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -83,9 +83,6 @@ DEF_D_RUNTIME (INTERFACE_CAST, \"_d_interface_cast\", RT(OBJECT),\n DEF_D_RUNTIME (NEWITEMT, \"_d_newitemT\", RT(VOIDPTR), P1(CONST_TYPEINFO), 0)\n DEF_D_RUNTIME (NEWITEMIT, \"_d_newitemiT\", RT(VOIDPTR), P1(CONST_TYPEINFO), 0)\n \n-/* Used when calling delete on a pointer.  */\n-DEF_D_RUNTIME (DELMEMORY, \"_d_delmemory\", RT(VOID), P1(POINTER_VOIDPTR), 0)\n-\n /* Used when calling new on an array.  The `i' variant is for when the\n    initializer is nonzero, and the `m' variant is when initializing a\n    multi-dimensional array.  */\n@@ -102,10 +99,6 @@ DEF_D_RUNTIME (NEWARRAYMITX, \"_d_newarraymiTX\", RT(ARRAY_VOID),\n DEF_D_RUNTIME (ARRAYLITERALTX, \"_d_arrayliteralTX\", RT(VOIDPTR),\n \t       P2(CONST_TYPEINFO, SIZE_T), 0)\n \n-/* Used when calling delete on an array.  */\n-DEF_D_RUNTIME (DELARRAYT, \"_d_delarray_t\", RT(VOID),\n-\t       P2(ARRAYPTR_VOID, CONST_TYPEINFO), 0)\n-\n /* Used for value equality (x == y) and comparisons (x < y) of non-trivial\n    arrays.  Such as an array of structs or classes.  */\n DEF_D_RUNTIME (ADEQ2, \"_adEq2\", RT(INT),"}, {"sha": "d897ec4c5e42d80c33b802b1d91faedee558b8bd", "filename": "gcc/d/types.cc", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Fd%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Ftypes.cc?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -993,13 +993,17 @@ class TypeVisitor : public Visitor\n \tt->ctype = build_variant_type_copy (build_ctype (underlying));\n \tbuild_type_decl (t->ctype, t->sym);\n       }\n-    else if (!INTEGRAL_TYPE_P (basetype) || TREE_CODE (basetype) == BOOLEAN_TYPE)\n+    else if (t->sym->ident == NULL\n+\t     || !INTEGRAL_TYPE_P (basetype)\n+\t     || TREE_CODE (basetype) == BOOLEAN_TYPE)\n       {\n-\t/* Enums in D2 can have a base type that is not necessarily integral.\n-\t   For these, we simplify this a little by using the base type directly\n-\t   instead of building an ENUMERAL_TYPE.  */\n+\t/* Enums in D2 can either be anonymous, or have a base type that is not\n+\t   necessarily integral. For these, we simplify this a little by using\n+\t   the base type directly instead of building an ENUMERAL_TYPE.  */\n \tt->ctype = build_variant_type_copy (basetype);\n-\tbuild_type_decl (t->ctype, t->sym);\n+\n+\tif (t->sym->ident != NULL)\n+\t  build_type_decl (t->ctype, t->sym);\n       }\n     else\n       {"}, {"sha": "8881dd0c299fd1431eb1b058f09dbee394039ee9", "filename": "gcc/testsuite/gdc.dg/special1.d", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.dg%2Fspecial1.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.dg%2Fspecial1.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fspecial1.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -0,0 +1,12 @@\n+// { dg-do compile }\n+\n+struct _Complex(T) { T re; T im; }\n+enum __c_complex_float : _Complex!float;\n+\n+bool equals(__c_complex_float[] lhs, __c_complex_float[] rhs)\n+{\n+    foreach (i; 0 .. lhs.length)\n+        if (lhs.ptr[i] != rhs.ptr[i])\n+            return false;\n+    return true;\n+}"}, {"sha": "ac416eb0fcbb5b77d3f17b851f39782c5a2bf2cf", "filename": "gcc/testsuite/gdc.test/compilable/99bottles.d", "status": "modified", "additions": 106, "deletions": 106, "changes": 212, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2F99bottles.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2F99bottles.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2F99bottles.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -3,7 +3,7 @@\n //    http://www.99-bottles-of-beer.net/language-d-1212.html\n \n // Generates the \"99 bottles of beer\" song at compile time,\n-// using the template metaprograming facilities of D. \n+// using the template metaprograming facilities of D.\n // No executable is generated. No libraries are used.\n // Illustrates template default values, template string value parameters,\n // compile-time concatenation of constant strings, static if.\n@@ -24,13 +24,13 @@ template itoa(ulong n)\n \n template showHowMany(int n, string where, bool needcapital = false)\n {\n-  static if ( n > 1 ) \n+  static if ( n > 1 )\n       const string showHowMany = itoa!(n) ~ \" bottles of beer\" ~ where ~ \"\\n\";\n   else static if ( n == 1 )\n       const string showHowMany = \"1 bottle of beer\" ~ where ~ \"\\n\";\n   else static if ( needcapital )\n       const string showHowMany = \"No more bottles of beer\" ~ where ~ \"\\n\";\n-  else \n+  else\n       const string showHowMany = \"no more bottles of beer\" ~ where ~ \"\\n\";\n }\n \n@@ -39,514 +39,514 @@ template beer(int maxbeers, int n = maxbeers)\n   static if ( n > 0 )\n     const string beer = showHowMany!(n, \" on the wall,\", true)\n         ~ showHowMany!(n, \".\")\n-        ~ \"Take one down and pass it around, \" ~ \"\\n\" \n-        ~ showHowMany!( n - 1 , \" on the wall.\") \n+        ~ \"Take one down and pass it around,\" ~ \"\\n\"\n+        ~ showHowMany!( n - 1 , \" on the wall.\")\n         ~ \"\\n\" ~ beer!(maxbeers, n - 1); // recurse for subsequent verses.\n   else\n     const string beer = showHowMany!(n, \" on the wall,\", true)\n         ~ showHowMany!(n, \".\")\n-        ~ \"Go to the store and buy some more, \" ~ \"\\n\"\n+        ~ \"Go to the store and buy some more,\" ~ \"\\n\"\n         ~ showHowMany!( maxbeers, \" on the wall.\");\n }\n \n enum expected = `99 bottles of beer on the wall,\n 99 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 98 bottles of beer on the wall.\n \n 98 bottles of beer on the wall,\n 98 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 97 bottles of beer on the wall.\n \n 97 bottles of beer on the wall,\n 97 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 96 bottles of beer on the wall.\n \n 96 bottles of beer on the wall,\n 96 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 95 bottles of beer on the wall.\n \n 95 bottles of beer on the wall,\n 95 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 94 bottles of beer on the wall.\n \n 94 bottles of beer on the wall,\n 94 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 93 bottles of beer on the wall.\n \n 93 bottles of beer on the wall,\n 93 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 92 bottles of beer on the wall.\n \n 92 bottles of beer on the wall,\n 92 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 91 bottles of beer on the wall.\n \n 91 bottles of beer on the wall,\n 91 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 90 bottles of beer on the wall.\n \n 90 bottles of beer on the wall,\n 90 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 89 bottles of beer on the wall.\n \n 89 bottles of beer on the wall,\n 89 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 88 bottles of beer on the wall.\n \n 88 bottles of beer on the wall,\n 88 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 87 bottles of beer on the wall.\n \n 87 bottles of beer on the wall,\n 87 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 86 bottles of beer on the wall.\n \n 86 bottles of beer on the wall,\n 86 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 85 bottles of beer on the wall.\n \n 85 bottles of beer on the wall,\n 85 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 84 bottles of beer on the wall.\n \n 84 bottles of beer on the wall,\n 84 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 83 bottles of beer on the wall.\n \n 83 bottles of beer on the wall,\n 83 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 82 bottles of beer on the wall.\n \n 82 bottles of beer on the wall,\n 82 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 81 bottles of beer on the wall.\n \n 81 bottles of beer on the wall,\n 81 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 80 bottles of beer on the wall.\n \n 80 bottles of beer on the wall,\n 80 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 79 bottles of beer on the wall.\n \n 79 bottles of beer on the wall,\n 79 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 78 bottles of beer on the wall.\n \n 78 bottles of beer on the wall,\n 78 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 77 bottles of beer on the wall.\n \n 77 bottles of beer on the wall,\n 77 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 76 bottles of beer on the wall.\n \n 76 bottles of beer on the wall,\n 76 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 75 bottles of beer on the wall.\n \n 75 bottles of beer on the wall,\n 75 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 74 bottles of beer on the wall.\n \n 74 bottles of beer on the wall,\n 74 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 73 bottles of beer on the wall.\n \n 73 bottles of beer on the wall,\n 73 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 72 bottles of beer on the wall.\n \n 72 bottles of beer on the wall,\n 72 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 71 bottles of beer on the wall.\n \n 71 bottles of beer on the wall,\n 71 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 70 bottles of beer on the wall.\n \n 70 bottles of beer on the wall,\n 70 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 69 bottles of beer on the wall.\n \n 69 bottles of beer on the wall,\n 69 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 68 bottles of beer on the wall.\n \n 68 bottles of beer on the wall,\n 68 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 67 bottles of beer on the wall.\n \n 67 bottles of beer on the wall,\n 67 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 66 bottles of beer on the wall.\n \n 66 bottles of beer on the wall,\n 66 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 65 bottles of beer on the wall.\n \n 65 bottles of beer on the wall,\n 65 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 64 bottles of beer on the wall.\n \n 64 bottles of beer on the wall,\n 64 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 63 bottles of beer on the wall.\n \n 63 bottles of beer on the wall,\n 63 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 62 bottles of beer on the wall.\n \n 62 bottles of beer on the wall,\n 62 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 61 bottles of beer on the wall.\n \n 61 bottles of beer on the wall,\n 61 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 60 bottles of beer on the wall.\n \n 60 bottles of beer on the wall,\n 60 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 59 bottles of beer on the wall.\n \n 59 bottles of beer on the wall,\n 59 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 58 bottles of beer on the wall.\n \n 58 bottles of beer on the wall,\n 58 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 57 bottles of beer on the wall.\n \n 57 bottles of beer on the wall,\n 57 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 56 bottles of beer on the wall.\n \n 56 bottles of beer on the wall,\n 56 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 55 bottles of beer on the wall.\n \n 55 bottles of beer on the wall,\n 55 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 54 bottles of beer on the wall.\n \n 54 bottles of beer on the wall,\n 54 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 53 bottles of beer on the wall.\n \n 53 bottles of beer on the wall,\n 53 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 52 bottles of beer on the wall.\n \n 52 bottles of beer on the wall,\n 52 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 51 bottles of beer on the wall.\n \n 51 bottles of beer on the wall,\n 51 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 50 bottles of beer on the wall.\n \n 50 bottles of beer on the wall,\n 50 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 49 bottles of beer on the wall.\n \n 49 bottles of beer on the wall,\n 49 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 48 bottles of beer on the wall.\n \n 48 bottles of beer on the wall,\n 48 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 47 bottles of beer on the wall.\n \n 47 bottles of beer on the wall,\n 47 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 46 bottles of beer on the wall.\n \n 46 bottles of beer on the wall,\n 46 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 45 bottles of beer on the wall.\n \n 45 bottles of beer on the wall,\n 45 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 44 bottles of beer on the wall.\n \n 44 bottles of beer on the wall,\n 44 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 43 bottles of beer on the wall.\n \n 43 bottles of beer on the wall,\n 43 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 42 bottles of beer on the wall.\n \n 42 bottles of beer on the wall,\n 42 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 41 bottles of beer on the wall.\n \n 41 bottles of beer on the wall,\n 41 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 40 bottles of beer on the wall.\n \n 40 bottles of beer on the wall,\n 40 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 39 bottles of beer on the wall.\n \n 39 bottles of beer on the wall,\n 39 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 38 bottles of beer on the wall.\n \n 38 bottles of beer on the wall,\n 38 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 37 bottles of beer on the wall.\n \n 37 bottles of beer on the wall,\n 37 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 36 bottles of beer on the wall.\n \n 36 bottles of beer on the wall,\n 36 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 35 bottles of beer on the wall.\n \n 35 bottles of beer on the wall,\n 35 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 34 bottles of beer on the wall.\n \n 34 bottles of beer on the wall,\n 34 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 33 bottles of beer on the wall.\n \n 33 bottles of beer on the wall,\n 33 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 32 bottles of beer on the wall.\n \n 32 bottles of beer on the wall,\n 32 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 31 bottles of beer on the wall.\n \n 31 bottles of beer on the wall,\n 31 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 30 bottles of beer on the wall.\n \n 30 bottles of beer on the wall,\n 30 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 29 bottles of beer on the wall.\n \n 29 bottles of beer on the wall,\n 29 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 28 bottles of beer on the wall.\n \n 28 bottles of beer on the wall,\n 28 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 27 bottles of beer on the wall.\n \n 27 bottles of beer on the wall,\n 27 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 26 bottles of beer on the wall.\n \n 26 bottles of beer on the wall,\n 26 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 25 bottles of beer on the wall.\n \n 25 bottles of beer on the wall,\n 25 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 24 bottles of beer on the wall.\n \n 24 bottles of beer on the wall,\n 24 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 23 bottles of beer on the wall.\n \n 23 bottles of beer on the wall,\n 23 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 22 bottles of beer on the wall.\n \n 22 bottles of beer on the wall,\n 22 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 21 bottles of beer on the wall.\n \n 21 bottles of beer on the wall,\n 21 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 20 bottles of beer on the wall.\n \n 20 bottles of beer on the wall,\n 20 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 19 bottles of beer on the wall.\n \n 19 bottles of beer on the wall,\n 19 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 18 bottles of beer on the wall.\n \n 18 bottles of beer on the wall,\n 18 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 17 bottles of beer on the wall.\n \n 17 bottles of beer on the wall,\n 17 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 16 bottles of beer on the wall.\n \n 16 bottles of beer on the wall,\n 16 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 15 bottles of beer on the wall.\n \n 15 bottles of beer on the wall,\n 15 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 14 bottles of beer on the wall.\n \n 14 bottles of beer on the wall,\n 14 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 13 bottles of beer on the wall.\n \n 13 bottles of beer on the wall,\n 13 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 12 bottles of beer on the wall.\n \n 12 bottles of beer on the wall,\n 12 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 11 bottles of beer on the wall.\n \n 11 bottles of beer on the wall,\n 11 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 10 bottles of beer on the wall.\n \n 10 bottles of beer on the wall,\n 10 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 9 bottles of beer on the wall.\n \n 9 bottles of beer on the wall,\n 9 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 8 bottles of beer on the wall.\n \n 8 bottles of beer on the wall,\n 8 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 7 bottles of beer on the wall.\n \n 7 bottles of beer on the wall,\n 7 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 6 bottles of beer on the wall.\n \n 6 bottles of beer on the wall,\n 6 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 5 bottles of beer on the wall.\n \n 5 bottles of beer on the wall,\n 5 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 4 bottles of beer on the wall.\n \n 4 bottles of beer on the wall,\n 4 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 3 bottles of beer on the wall.\n \n 3 bottles of beer on the wall,\n 3 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 2 bottles of beer on the wall.\n \n 2 bottles of beer on the wall,\n 2 bottles of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n 1 bottle of beer on the wall.\n \n 1 bottle of beer on the wall,\n 1 bottle of beer.\n-Take one down and pass it around, \n+Take one down and pass it around,\n no more bottles of beer on the wall.\n \n No more bottles of beer on the wall,\n no more bottles of beer.\n-Go to the store and buy some more, \n+Go to the store and buy some more,\n 99 bottles of beer on the wall.\n `;\n "}, {"sha": "3bc699aa7da1adad4d305e5d6545f16297f568a2", "filename": "gcc/testsuite/gdc.test/compilable/b18242.d", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fb18242.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fb18242.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fb18242.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -5,14 +5,14 @@ module object;\n class Object { }\n \n class TypeInfo { }\n-class TypeInfo_Class : TypeInfo \n-{ \n+class TypeInfo_Class : TypeInfo\n+{\n     version(D_LP64) { ubyte[136] _x; } else { ubyte[68] _x; }\n }\n \n class Throwable { }\n \n-int _d_run_main() \n+int _d_run_main()\n {\n     try { } catch(Throwable e) { return 1; }\n     return 0;"}, {"sha": "ed1a71747e409fad5bc09b297da0f0920020d5bb", "filename": "gcc/testsuite/gdc.test/compilable/b19294.d", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fb19294.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fb19294.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fb19294.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -51,19 +51,19 @@ void test()\n     MT s = MyStruct!int(1);\n     MT[] arr = [s, 2 * s, 3 * s, 4 * s, 5 * s, 6 * s];\n     MT[] result = new MT[arr.length];\n-    \n+\n     result[] = arr[] + s;\n     result[] = s + arr[];\n-    \n+\n     result[] = arr[] - s;\n     result[] = s - arr[];\n-    \n+\n     result[] = arr[] * s;\n     result[] = s * arr[];\n-    \n+\n     result[] = arr[] / s;\n     result[] = s / arr[];\n-    \n+\n     result[] = arr[] ^^ s;\n     result[] = s ^^ arr[];\n }"}, {"sha": "ba3565ae8f901697a04dd8bee222630a88dee7bb", "filename": "gcc/testsuite/gdc.test/compilable/b20938.d", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fb20938.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fb20938.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fb20938.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -12,11 +12,11 @@ void fun() {\n     immutable S _is;\n     Object o;\n     immutable Object io;\n-    \n+\n     auto a = [pi, ipi];\n-    auto b = [ai, iai];    \n+    auto b = [ai, iai];\n     auto c = [s, _is];\n     auto d = [o, io];\n-    \n+\n     auto e = [A.a, B.b];\n }"}, {"sha": "482faa77f0da684b0d6cca03948d9fb9db85fbb0", "filename": "gcc/testsuite/gdc.test/compilable/b21285.d", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fb21285.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fb21285.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fb21285.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -1,27 +1,27 @@\n // REQUIRED_ARGS: -unittest\n-// Issue 21285 - Delegate covariance broken between 2.092 and 2.094 (git master). \n+// Issue 21285 - Delegate covariance broken between 2.092 and 2.094 (git master).\n unittest\n {\n     string path;\n     int bank;\n     static string path2;\n     static int bank2;\n-    \n+\n     // delegates\n     auto a = [\n         (string arg) { path = arg; },\n         (string arg) { bank = 1; throw new Exception(\"\"); }\n     ];\n-    \n+\n     // functions\n     auto ab = [\n         (string arg) { path2 = arg; },\n         (string arg) { bank2 = 1; throw new Exception(\"\"); }\n     ];\n-    \n+\n     alias dg = void delegate(string) pure @safe;\n     alias fn = void function(string) @safe;\n-    \n+\n     static assert(is(typeof(a[0]) == dg));\n     static assert(is(typeof(ab[0]) == fn));\n }"}, {"sha": "a740994d7b5480f27a9469d4a220c4919c137de5", "filename": "gcc/testsuite/gdc.test/compilable/commontype.d", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fcommontype.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fcommontype.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fcommontype.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -196,7 +196,8 @@ static assert(is( X!( C***, B*** ) == const(B**)* )); // `B***`\n \n static assert(is( X!( C*, I* ) == I* ));\n static assert(is( X!( I*, C* ) == I* ));\n-static assert(Error!( C**, I** ));\n+//static assert(Error!( C**, I** ));\n+static assert(is( X!( C**, I** ) == const(I*)* ));\n \n static assert(Error!( C*, D* )); // should work\n \n@@ -303,13 +304,15 @@ static assert(is( X!(C[4], B[4]) ));\n static assert(Error!( C[4], I[4] ));\n static assert(Error!( C[4], D[4] ));\n static assert(is( X!( C[4], const(B)[4] ) == const(B)[4] ));\n-static assert(Error!( C[4], const(I)[4] ));\n+//static assert(Error!( C[4], const(I)[4] ));\n+static assert(is( X!( C[4], const(I)[4] ) == const(I)[] ));\n static assert(Error!( C[4], const(D)[4] ));\n static assert(Error!( C*[4], B*[4] ));\n static assert(Error!( C*[4], I*[4] ));\n static assert(Error!( C*[4], D*[4] ));\n static assert(is( X!( C*[4], const(B*)[4] ) == const(B*)[] )); // !?\n-static assert(Error!( C*[4], const(I*)[4] ));\n+//static assert(Error!( C*[4], const(I*)[4] ));\n+static assert(is( X!( C*[4], const(I*)[4] ) == const(I*)[] ));\n static assert(Error!( C*[4], const(D*)[4] ));\n static assert(Error!( C*[4], B**[4] ));\n static assert(Error!( C*[4], const(B*)*[4] ));"}, {"sha": "2f614095a8e0b5bf43cf63075482ccf9f038bf05", "filename": "gcc/testsuite/gdc.test/compilable/ddoc10.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fddoc10.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fddoc10.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fddoc10.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -171,7 +171,7 @@ struct T\n     /****\n      */\n     this(A...)(A args) { }\n-    \n+\n     ///\n     this(int){}\n }"}, {"sha": "0082455d0aeb414dcb27b6bd80ad9f71e6ead49a", "filename": "gcc/testsuite/gdc.test/compilable/ddoc11.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fddoc11.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fddoc11.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fddoc11.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -49,7 +49,7 @@ struct lldiv_t { long quot,rem; }\n \n \n \n-    void *calloc(size_t, size_t);\t/// \n+    void *calloc(size_t, size_t);\t///\n     void *malloc(size_t);\t/// dittx\n \n /**"}, {"sha": "fae99d401f1f15f1825aac2d865dafab335ad862", "filename": "gcc/testsuite/gdc.test/compilable/ddoc14.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fddoc14.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fddoc14.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fddoc14.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -77,7 +77,7 @@ interface Interface {\n     V mColon(lazy P p) ; /// 10\n }\n +/\n-    \n+\n public P variable;  /// 0\n V mNone(lazy P p) {}  /// 1\n pure nothrow V mPrefix(lazy P p) {}   /// 2"}, {"sha": "3b47497a1a79a718b38dbd6556ebedbde66350da", "filename": "gcc/testsuite/gdc.test/compilable/ddoc3.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fddoc3.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fddoc3.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fddoc3.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -42,7 +42,7 @@\n  *\t$(TROW 4, 5, 6)\n  *\t)\n  *\n- * $(D_CODE \n+ * $(D_CODE\n       $(B pragma)( $(I name) );\n       $(B pragma)( $(I name) , $(I option) [ $(I option) ] );\n       $(U $(LPAREN))"}, {"sha": "5a964f3dc654e407ed00e0ba277142811c231635", "filename": "gcc/testsuite/gdc.test/compilable/ddoc5.d", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fddoc5.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fddoc5.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fddoc5.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -15,10 +15,10 @@ class TestMembers(TemplateArg)\n   public:\n     /**\n \n-       a static method \n+       a static method\n \n        Params: idx = index\n-   \n+\n     */\n     static void PublicStaticMethod(int  idx)\n     {"}, {"sha": "29cb8c9cefd7dddb28fa6005b47434c6292ca0eb", "filename": "gcc/testsuite/gdc.test/compilable/ddoc5446.d", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fddoc5446.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fddoc5446.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fddoc5446.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -30,41 +30,41 @@ struct Bar\n {\n     /** */\n     alias A_Foo Bar_A_Foo;\n-    \n+\n     /** */\n     alias A_Foo_Alias Bar_A_Foo_Alias;\n-    \n+\n     /** */\n     alias A_Int Bar_A_Int;\n-    \n+\n     /** */\n     alias This_Foo Bar_This_Foo;\n-    \n+\n     /** */\n     alias This_Foo_Alias Bar_This_Foo_Alias;\n-    \n+\n     /** */\n     alias This_Int Bar_This_Int;\n-    \n+\n     /** */\n     alias Nested Nested_Alias;\n-    \n+\n     /** */\n     alias .Nested Fake_Nested;\n-    \n+\n     /** */\n     struct Nested\n     {\n         /** */\n         alias Bar Bar_Nested_Bar_Alias;\n-        \n+\n         /** */\n         alias .Bar Bar_Alias;\n-        \n+\n         /** */\n         struct Bar\n         {\n-            \n+\n         }\n     }\n }"}, {"sha": "e03d422041bd6d96253a62447fba1d96cc9f0c8b", "filename": "gcc/testsuite/gdc.test/compilable/ddoc9155.d", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fddoc9155.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fddoc9155.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fddoc9155.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -12,12 +12,12 @@ module ddoc9155;\n  +  ---\n  +  import std.stdio;   //&\n  +  writeln(\"Hello world!\");\n- +  if (test) {  \n+ +  if (test) {\n  +    writefln(\"D programming language\");\n  +  }\n  +\n  +      algorithm;\n- +  \n+ +\n  +  xxx;    //comment\n  +      yyy;\n  +  /* test\n@@ -28,7 +28,7 @@ module ddoc9155;\n  +File f = File(\"./text.txt\", \"r\");\n  +uint line = 0;\n  + // The ElementType of data is not aggregation type\n- +foreach (encoded; Base64.encoder(data)) \n+ +foreach (encoded; Base64.encoder(data))\n  +  ---\n  +/\n \n@@ -45,12 +45,12 @@ module ddoc9155;\n  *  ---\n  *  import std.stdio;   //&\n  *  writeln(\"Hello world!\");\n- *  if (test) {  \n+ *  if (test) {\n  *    writefln(\"D programming language\");\n  *  }\n  *\n  *      algorithm;\n- *  \n+ *\n  *  xxx;    //comment\n  *      yyy;\n  *  /+ test"}, {"sha": "947d820fcac228692550031e82bc252353221c1e", "filename": "gcc/testsuite/gdc.test/compilable/debugInference.d", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2FdebugInference.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2FdebugInference.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2FdebugInference.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -1,9 +1,5 @@\n /*\n REQUIRED_ARGS: -debug\n-TEST_OUTPUT:\n----\n-compilable/debugInference.d(35): Deprecation: The `delete` keyword has been deprecated.  Use `object.destroy()` (and `core.memory.GC.free()` if applicable) instead.\n----\n https://issues.dlang.org/show_bug.cgi?id=20507\n */\n \n@@ -32,7 +28,7 @@ void bar()()\n         auto f2Ptr = &f2;\n \n         S s;\n-        delete s;\n+        destroy(s);\n \n         int* ptr = cast(int*) 0;\n         int[] slice = ptr[0 .. 4];"}, {"sha": "5b4e5897c1f0658d2dd59c6d182569e9aff93b4e", "filename": "gcc/testsuite/gdc.test/compilable/defa.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fdefa.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fdefa.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fdefa.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -3,7 +3,7 @@\n module defa;\n \n private import imports.defaa;\n-\t\n+\n public abstract class A\n {\n \tDisplay d;"}, {"sha": "36617f544c4771532edf130633e6129cc4f72353", "filename": "gcc/testsuite/gdc.test/compilable/dlangui_crash.d", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fdlangui_crash.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fdlangui_crash.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fdlangui_crash.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -0,0 +1,34 @@\n+// https://issues.dlang.org/show_bug.cgi?id=22365\n+\n+class DrawableCache\n+{\n+    Ref _nullDrawable;\n+\n+    this()\n+    {\n+        debug Log;\n+    }\n+}\n+\n+class DrawableCacheEmpty\n+{\n+    Ref _nullDrawable;\n+\n+    this() {}\n+}\n+\n+struct Ref\n+{\n+\n+    ~this()\n+    {\n+    }\n+}\n+\n+void foo()\n+{\n+    try\n+        debug Log;\n+    catch (Exception)\n+        assert(false);\n+}"}, {"sha": "4dbc56da476ddae7e263321de06901dec4b28854", "filename": "gcc/testsuite/gdc.test/compilable/enumbasearithmetic.d", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fenumbasearithmetic.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fenumbasearithmetic.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fenumbasearithmetic.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -0,0 +1,20 @@\n+//https://issues.dlang.org/show_bug.cgi?id=20777\n+struct FooInt\n+{\n+    int i;\n+    auto opBinary(string op : \"+\")(int j)\n+    {\n+        return typeof(this)(i + j);\n+    }\n+\n+    static @property FooInt max()\n+    {\n+        return typeof(this)(int.max);\n+    }\n+}\n+\n+enum foolist\n+{\n+    hi  = FooInt(0),\n+    bye\n+}"}, {"sha": "080a0960a149ecfa7a2e8b4c4fe4e01363214221", "filename": "gcc/testsuite/gdc.test/compilable/header18364.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fheader18364.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fheader18364.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fheader18364.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -8,7 +8,7 @@ TEST_OUTPUT:\n === ${RESULTS_DIR}/compilable/header18364.di\n // D import file generated from 'compilable/header18364.d'\n module foo.bar.ba;\n-nothrow pure @nogc @safe package(foo) \n+nothrow pure @nogc @safe package(foo)\n {\n \tvoid foo();\n \tnothrow pure @nogc @safe package(foo.bar) void foo2();"}, {"sha": "bd8fd0c2664e4376880819de2aba7969cb651c35", "filename": "gcc/testsuite/gdc.test/compilable/imports/b33a.d", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fimports%2Fb33a.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fimports%2Fb33a.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fimports%2Fb33a.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -6,10 +6,10 @@ struct IsEqual( T )\n     {\n \treturn p1 == p2;\n     }\n-}    \n+}\n \n template find_( Elem, Pred = IsEqual!(Elem) )\n-{    \n+{\n     size_t fn( char[] buf, Pred pred = Pred.init )\n     {\n         return 3;"}, {"sha": "9df542b5e0ff63d839e6af75625acbff6be77ad2", "filename": "gcc/testsuite/gdc.test/compilable/imports/imp22734.c", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fimports%2Fimp22734.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fimports%2Fimp22734.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fimports%2Fimp22734.c?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -0,0 +1,3 @@\n+typedef enum { C } E;\n+\n+int a = C;"}, {"sha": "7b77272a51bde6416b020fbebcd3165abbc28c1c", "filename": "gcc/testsuite/gdc.test/compilable/imports/test22714a.d", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fimports%2Ftest22714a.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fimports%2Ftest22714a.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fimports%2Ftest22714a.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -0,0 +1,3 @@\n+module imports.test22714a;\n+import imports.test22714b;\n+class Statement {}"}, {"sha": "68bd95b16741186138e0affb65dccd601b472651", "filename": "gcc/testsuite/gdc.test/compilable/imports/test22714b.d", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fimports%2Ftest22714b.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fimports%2Ftest22714b.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fimports%2Ftest22714b.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -0,0 +1,12 @@\n+module imports.test22714b;\n+import imports.test22714a;\n+struct Array(T)\n+{\n+    T[] data;\n+    T[1] smallarray;\n+}\n+struct Ensure\n+{\n+    Statement ensure;\n+    Array!Ensure* arraySyntaxCopy;\n+}"}, {"sha": "a4353cee93697af302825aa5401762af405934df", "filename": "gcc/testsuite/gdc.test/compilable/issue16472.d", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fissue16472.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fissue16472.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fissue16472.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -0,0 +1,42 @@\n+// https://issues.dlang.org/show_bug.cgi?id=16472\n+enum e() = 0;\n+\n+template t(alias v = e!()) {} //Error\n+alias dummy = t!(e!());\n+\n+template E(F){\n+    enum E {\n+        K = F(1)\n+    }\n+}\n+\n+struct S(F = float, alias e_ = E!double.K) {}\n+S!float x; // Error: E!double.K is used as a type\n+\n+alias T = E!double.K;\n+struct S2(F = float, alias e_ = T) {}\n+S2!float y; // alias makes it okay...\n+\n+struct S3(F = float, alias e_ = (E!double.K)) {}\n+S3!float z; // just putting parens make it okay as well... wat!?\n+\n+// for coverage\n+\n+template G(T)\n+{\n+    struct G\n+    {\n+        alias I = int;\n+        static int i;\n+    }\n+}\n+\n+struct H(F = float, alias e_ = G!double) {}\n+H!float a;\n+\n+struct H1(F = float, alias e_ = G!double.I) {}\n+H1!float b;\n+\n+// https://issues.dlang.org/show_bug.cgi?id=21795\n+// struct H2(F = float, alias e_ = G!double.i) {}\n+// H2!float c;"}, {"sha": "03d37bdc61a4bfb792c959ba354cc78a3743a9cd", "filename": "gcc/testsuite/gdc.test/compilable/issue21340.d", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fissue21340.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fissue21340.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fissue21340.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -5,7 +5,7 @@ version (CppRuntime_Sun)   version = CppMangle_Itanium;\n template ScopeClass(C)\n if (is(C == class) && __traits(getLinkage, C) == \"C++\")\n {\n-    \n+\n     extern(C++, class)\n     extern(C++, __traits(getCppNamespaces,C))\n     extern(C++, (ns))\n@@ -35,4 +35,4 @@ alias ns = AliasSeq!();\n immutable ns2 = AliasSeq!();\n extern(C++,(ns)) class Bar {}\n extern(C++,) class Baz {}\n-extern(C++, (ns2)) class Quux {} \n+extern(C++, (ns2)) class Quux {}"}, {"sha": "0af986b34a697ed83f4d3c4837cdcb04b86520f8", "filename": "gcc/testsuite/gdc.test/compilable/issue21813b.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fissue21813b.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fissue21813b.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fissue21813b.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -4,7 +4,7 @@ Target.OS defaultTargetOS()\n     return Target.OS.linux;\n }\n \n-struct Target \n+struct Target\n {\n     enum OS { linux }\n     OS os = defaultTargetOS();"}, {"sha": "155f0edb618901822190019e965aa32aa1ace43d", "filename": "gcc/testsuite/gdc.test/compilable/minimal.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fminimal.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fminimal.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fminimal.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -10,7 +10,7 @@\n \n struct S { }\n \n-enum E \n+enum E\n {\n     e0 = 0,\n     e1 = 1"}, {"sha": "9a99187aa06f0f9f4c7d5364370d10686d53dee9", "filename": "gcc/testsuite/gdc.test/compilable/test10993.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest10993.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest10993.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest10993.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -19,7 +19,7 @@ auto fun()\n {\n \tauto x = foo!()(test!(a=>a)());\n //\tpragma(msg, \"fun: \" ~ typeof(x).mangleof);\n-\t\n+\n \treturn x;\n }\n "}, {"sha": "3de4dd13c4b89a632613b3fe9f0e9b2b8596039e", "filename": "gcc/testsuite/gdc.test/compilable/test16107.d", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest16107.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest16107.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest16107.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -3,12 +3,12 @@\n bool check()\n {\n     bool result = false;\n-    \n+\n     result |= false;\n     if (result) goto ret;\n-    \n+\n     result |= false;\n     if (result) {}\n-    \n+\n     ret: return true;\n }"}, {"sha": "6285418b8068bb9930a8eb4ce7917a35a750b9b0", "filename": "gcc/testsuite/gdc.test/compilable/test17545.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest17545.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest17545.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest17545.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -12,5 +12,5 @@ struct Attrib {}\n \n @Attrib enum TEST = 123;\n \n-pragma(msg, __traits(getAttributes, \n+pragma(msg, __traits(getAttributes,\n                      __traits(getMember, example, \"TEST\")));"}, {"sha": "9c4a547a3e771d663856eaba637f9bb282696630", "filename": "gcc/testsuite/gdc.test/compilable/test17906.d", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e49508ac6b36adb8a2056c5a1fb6e0178de2439d/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest17906.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e49508ac6b36adb8a2056c5a1fb6e0178de2439d/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest17906.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest17906.d?ref=e49508ac6b36adb8a2056c5a1fb6e0178de2439d", "patch": "@@ -1,7 +0,0 @@\n-// REQUIRED_ARGS: -de\n-// https://issues.dlang.org/show_bug.cgi?id=18647\n-deprecated void main ()\n-{\n-    Object o = new Object;\n-    delete o;\n-}"}, {"sha": "37f8630d2b12b56651d24925bd3fbee6fb32aa54", "filename": "gcc/testsuite/gdc.test/compilable/test18030.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest18030.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest18030.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest18030.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -9,6 +9,6 @@ struct S(T)\n class C\n {\n \talias Al = S!C;\n-\t\n+\n \tstatic void func(U)(U var) { }\n }"}, {"sha": "1110b28faeb3eafcbfdb08cc026f71dfec47bb96", "filename": "gcc/testsuite/gdc.test/compilable/test19014.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest19014.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest19014.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest19014.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -8,5 +8,5 @@ void main()\n     {\n     \tstatic import core.stdc.math;\n     }\n-    static assert(!__traits(compiles, core.stdc.math.cos(0))); \n+    static assert(!__traits(compiles, core.stdc.math.cos(0)));\n }"}, {"sha": "e95ecace07ac54351d2a2c3768f50890756a82a6", "filename": "gcc/testsuite/gdc.test/compilable/test19315.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest19315.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest19315.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest19315.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -1,5 +1,5 @@\n //https://issues.dlang.org/show_bug.cgi?id=19315\n-void main() \n+void main()\n {\n     #line 100 \"file.d\"\n     enum code = q{"}, {"sha": "b11ae1095cd3ed73c2ff6d71554884d4dbbdbb6b", "filename": "gcc/testsuite/gdc.test/compilable/test19557.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest19557.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest19557.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest19557.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -1,6 +1,6 @@\n // https://issues.dlang.org/show_bug.cgi?id=19557\n // Error: redundant linkage `extern (C++)`\n-    \n+\n extern(C++, \"ns\")\n extern(C++, class)\n struct test {}"}, {"sha": "df8f891ec8f35ac9ad03ce3244d07d5078e22f8c", "filename": "gcc/testsuite/gdc.test/compilable/test19609.d", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest19609.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest19609.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest19609.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -3,9 +3,9 @@\n /*\n TEST_OUTPUT:\n ---\n-compilable/test19609.d(11): Deprecation: module `imports.test19609a` is deprecated - \n+compilable/test19609.d(11): Deprecation: module `imports.test19609a` is deprecated\n compilable/test19609.d(12): Deprecation: module `imports.test19609b` is deprecated - hello\n-compilable/test19609.d(13): Deprecation: module `imports.test19609c` is deprecated -\n+compilable/test19609.d(13): Deprecation: module `imports.test19609c` is deprecated\n ---\n */\n import imports.test19609a;"}, {"sha": "b3b613bc0e9c9153808580cf40d58dd16251cc46", "filename": "gcc/testsuite/gdc.test/compilable/test21177.d", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest21177.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest21177.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest21177.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -0,0 +1,76 @@\n+// https://issues.dlang.org/show_bug.cgi?id=21177\n+/*\n+DISABLED: win\n+TEST_OUTPUT:\n+---\n+compilable/test21177.d(103): Deprecation: more format specifiers than 0 arguments\n+compilable/test21177.d(150): Deprecation: more format specifiers than 0 arguments\n+compilable/test21177.d(151): Deprecation: more format specifiers than 0 arguments\n+compilable/test21177.d(152): Deprecation: more format specifiers than 0 arguments\n+compilable/test21177.d(153): Deprecation: more format specifiers than 0 arguments\n+compilable/test21177.d(200): Deprecation: more format specifiers than 0 arguments\n+compilable/test21177.d(203): Deprecation: format specifier `\"%m\"` is invalid\n+compilable/test21177.d(204): Deprecation: format specifier `\"%m\"` is invalid\n+compilable/test21177.d(205): Deprecation: argument `c` for format specification `\"%a\"` must be `float*`, not `char*`\n+compilable/test21177.d(206): Deprecation: argument `c` for format specification `\"%a\"` must be `float*`, not `char*`\n+---\n+*/\n+\n+import core.stdc.stdio;\n+import core.stdc.string;\n+import core.stdc.stdlib;\n+\n+void main()\n+{\n+    version (CRuntime_Glibc)\n+    {\n+        #line 100\n+        printf(\"%m this is a string in errno\");\n+        printf(\"%s %m\", \"str\".ptr, 2);\n+        printf(\"%a\", 2.);\n+        printf(\"%m %m %s\");\n+        printf(\"%*m\");\n+\n+        char* a, b;\n+        sscanf(\"salut poilu\", \"%a %m\", a, b);\n+        assert(!strcmp(a, b));\n+        free(a);\n+        free(b);\n+\n+        char* t, p;\n+        sscanf(\"Tomate Patate\", \"%ms %as\", t, p);\n+        free(t);\n+        free(p);\n+\n+        #line 150\n+        sscanf(\"150\", \"%m\");\n+        sscanf(\"151\", \"%ms\");\n+        sscanf(\"152\", \"%a\");\n+        sscanf(\"153\", \"%as\");\n+\n+        pragma(msg, \"compilable/test21177.d(200): Deprecation: more format specifiers than 0 arguments\");\n+        pragma(msg, \"compilable/test21177.d(203): Deprecation: format specifier `\\\"%m\\\"` is invalid\");\n+        pragma(msg, \"compilable/test21177.d(204): Deprecation: format specifier `\\\"%m\\\"` is invalid\");\n+        pragma(msg, \"compilable/test21177.d(205): Deprecation: argument `c` for format specification `\\\"%a\\\"` must be `float*`, not `char*`\");\n+        pragma(msg, \"compilable/test21177.d(206): Deprecation: argument `c` for format specification `\\\"%a\\\"` must be `float*`, not `char*`\");\n+    }\n+    else\n+    {\n+        // fake it\n+        pragma(msg, \"compilable/test21177.d(103): Deprecation: more format specifiers than 0 arguments\");\n+        pragma(msg, \"compilable/test21177.d(150): Deprecation: more format specifiers than 0 arguments\");\n+        pragma(msg, \"compilable/test21177.d(151): Deprecation: more format specifiers than 0 arguments\");\n+        pragma(msg, \"compilable/test21177.d(152): Deprecation: more format specifiers than 0 arguments\");\n+        pragma(msg, \"compilable/test21177.d(153): Deprecation: more format specifiers than 0 arguments\");\n+\n+        #line 200\n+        printf(\"%m\");\n+\n+        char* c;\n+        sscanf(\"204\", \"%m\", c);\n+        sscanf(\"205\", \"%ms\", c);\n+        sscanf(\"206\", \"%a\", c);\n+        sscanf(\"207\", \"%as\", c);\n+\n+    }\n+}"}, {"sha": "f8507b434f29c80a34734f8889601a9daddf7037", "filename": "gcc/testsuite/gdc.test/compilable/test21196.d", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest21196.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest21196.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest21196.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -0,0 +1,71 @@\n+// https://issues.dlang.org/show_bug.cgi?id=21674\n+// REQUIRED_ARGS: -de\n+\n+struct Module\n+{\n+    CachedString data;\n+}\n+\n+struct CachedString\n+{\n+    private size_t len;\n+\n+    this (string data) { this.len = data.length; }\n+    public string str () const { return null; }\n+    public void str (string value) { this.len = value.length; }\n+\n+    alias str this;\n+}\n+\n+void test21674a()\n+{\n+    Module m;\n+    m.data = \"Hello World\";\n+}\n+\n+//////////////////////////////////////////\n+\n+struct StaticGetter(T)\n+{\n+    private static T _impl;\n+    static ref T value() { return _impl; }\n+    alias value this;\n+}\n+\n+struct StaticWrapper\n+{\n+    StaticGetter!int get;\n+    alias get this;\n+}\n+\n+void test21674b()\n+{\n+    StaticGetter!float sg;\n+    sg = 4.2;\n+\n+    StaticWrapper sw;\n+    sw = 42;\n+}\n+\n+//////////////////////////////////////////\n+\n+EntryType arr;\n+auto getPtr() { return &arr; }\n+\n+struct EntryType\n+{\n+    bool _state;\n+    alias _state this;\n+}\n+\n+struct S19441\n+{\n+    @property auto ref entry() { return *getPtr(); }\n+    alias entry this;\n+}\n+\n+void test19441()\n+{\n+    S19441 s19441;\n+    s19441 = true;\n+}"}, {"sha": "ef131e998c39c9ace9eee493e49b98c5ee3aad92", "filename": "gcc/testsuite/gdc.test/compilable/test22224.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest22224.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest22224.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest22224.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -1,4 +1,4 @@\n // REQUIRED_ARGS: -profile -c\n \n-import core.stdc.stdarg; \n+import core.stdc.stdarg;\n void error(...) { }"}, {"sha": "673b51b00f060a6a81dd2a82056869d6dfb25d11", "filename": "gcc/testsuite/gdc.test/compilable/test22632.d", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest22632.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest22632.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest22632.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -0,0 +1,4 @@\n+// https://issues.dlang.org/show_bug.cgi?id=22632\n+\n+static assert([\"one\": 1] != null);\n+static assert(null != [\"one\": 1]);"}, {"sha": "2973e1d0c27ed79905cb5ec91ff6091650af108d", "filename": "gcc/testsuite/gdc.test/compilable/test22714.d", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest22714.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest22714.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest22714.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -0,0 +1,3 @@\n+// EXTRA_FILES: imports/test22714a.d imports/test22714b.d\n+// https://issues.dlang.org/show_bug.cgi?id=22714\n+import imports.test22714a;"}, {"sha": "fdd962eedb42d99dc81d13a4c2c83f8d274692d9", "filename": "gcc/testsuite/gdc.test/compilable/test22734.d", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest22734.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest22734.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest22734.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -0,0 +1,6 @@\n+// https://issues.dlang.org/show_bug.cgi?id=22734\n+// EXTRA_FILES: imports/imp22734.c\n+\n+import imports.imp22734;\n+\n+auto dc = C;"}, {"sha": "1cc7a3a1c2e673fee158e6817dd9d7d4c8bdbd79", "filename": "gcc/testsuite/gdc.test/compilable/test4375.d", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest4375.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest4375.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest4375.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -256,7 +256,7 @@ label1:\n                         else\n                             assert(89);\n     else\n-        assert(12); \n+        assert(12);\n \n \n     with (x)\n@@ -299,7 +299,7 @@ label1:\n             if (true)\n                 assert(110);\n             else\n-                assert(112);                \n+                assert(112);\n         finally\n             assert(111);\n \n@@ -316,7 +316,7 @@ label1:\n             int w;\n \n         static if (true)\n-            int t; \n+            int t;\n         else static if (false)\n             int u;\n         else"}, {"sha": "a4cf663066eccce6ae996f75257909a31c361ebc", "filename": "gcc/testsuite/gdc.test/compilable/test7172.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest7172.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest7172.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest7172.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -7,7 +7,7 @@ void main()\n     static assert(!__traits(compiles, { class D : FinalC{} }));\n \n     scope class ScopeC{}\n-//    static assert(!__traits(compiles, { auto  sc = new ScopeC(); }));\n+    static assert(!__traits(compiles, { auto  sc = new ScopeC(); }));\n     static assert( __traits(compiles, { scope sc = new ScopeC(); }));\n \n     synchronized class SyncC{ void f(){} }"}, {"sha": "cd175b553220f1dcfc37d931fdd2048b8565cf42", "filename": "gcc/testsuite/gdc.test/compilable/test8296.d", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest8296.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest8296.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest8296.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -10,7 +10,7 @@ struct bar2\n \n class InnerBar {\n   bar2 b;\n-  \n+\n   this()\n   {\n     b = bar2(0);\n@@ -21,7 +21,7 @@ struct bar1\n {\n   InnerBar b;\n }\n-  \n+\n class Foo\n {\n   bar1 m_bar1;"}, {"sha": "4b5d5120502ac107bfb40c8cca03823b1cedf014", "filename": "gcc/testsuite/gdc.test/compilable/test8513.d", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest8513.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest8513.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest8513.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -5,25 +5,25 @@ class Bar\n {\n     interface I_Foo { void i_inner(); }\n     class C_Foo { void c_inner() { } }\n-    \n+\n     class Impl1 : C_Foo, I_Foo\n     {\n         override void i_inner() { }\n         override void c_inner() { }\n     }\n-    \n+\n     class Impl2 : C_Foo, .I_Foo\n     {\n         override void i_outer() { }\n         override void c_inner() { }\n     }\n-    \n+\n     class Impl3 : .C_Foo, I_Foo\n     {\n         override void i_inner() { }\n         override void c_outer() { }\n     }\n-    \n+\n     class Impl4 : .C_Foo, .I_Foo\n     {\n         override void i_outer() { }"}, {"sha": "dff4bc59eb9cc65fb8f19edc137d23221fc7e52b", "filename": "gcc/testsuite/gdc.test/compilable/testpostblit.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftestpostblit.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftestpostblit.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftestpostblit.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -14,4 +14,4 @@ struct Test1c\n {\n     const Test1b b;\n     @disable this(this);\n-} \n+}"}, {"sha": "7826cd4894d2aed152d5fadb8f942d9976914877", "filename": "gcc/testsuite/gdc.test/compilable/testsctreturn.d", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftestsctreturn.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftestsctreturn.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftestsctreturn.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -17,3 +17,19 @@ void test()\n     size_t* p;\n     const ppi = const(PackedPtrImpl!(3))(p);\n }\n+\n+/************************************************/\n+\n+// issues.dlang.org/show_bug.cgi?id=22541\n+\n+struct S\n+{\n+    int i;\n+    int* ptr;\n+\n+    int* wannabeReturnRef() scope return\n+    {\n+        return &i;\n+    }\n+}\n+"}, {"sha": "b2292bf60d749cf73e533ba100b7a63c5606b946", "filename": "gcc/testsuite/gdc.test/compilable/typeid_name.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftypeid_name.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftypeid_name.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftypeid_name.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -9,6 +9,6 @@ class Panzer {}\n class Tiger : Panzer {}\n \n static assert (() {\n-    Panzer p = new Tiger(); return classname(p); \n+    Panzer p = new Tiger(); return classname(p);\n } () == \"Tiger\");\n "}, {"sha": "8bfe1d079e2955bc701dae8f1a3efcb0c471fca2", "filename": "gcc/testsuite/gdc.test/compilable/vgc1.d", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fvgc1.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fvgc1.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fvgc1.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -65,20 +65,9 @@ void testNewScope()\n \n /***************** DeleteExp *******************/\n \n-/*\n-TEST_OUTPUT:\n----\n-compilable/vgc1.d(81): Deprecation: The `delete` keyword has been deprecated.  Use `object.destroy()` (and `core.memory.GC.free()` if applicable) instead.\n-compilable/vgc1.d(81): vgc: `delete` requires the GC\n-compilable/vgc1.d(82): Deprecation: The `delete` keyword has been deprecated.  Use `object.destroy()` (and `core.memory.GC.free()` if applicable) instead.\n-compilable/vgc1.d(82): vgc: `delete` requires the GC\n-compilable/vgc1.d(83): Deprecation: The `delete` keyword has been deprecated.  Use `object.destroy()` (and `core.memory.GC.free()` if applicable) instead.\n-compilable/vgc1.d(83): vgc: `delete` requires the GC\n----\n-*/\n void testDelete(int* p, Object o, S1* s)\n {\n-    delete p;\n-    delete o;\n-    delete s;\n+    destroy(p);\n+    destroy(o);\n+    destroy(s);\n }"}, {"sha": "7baad47f378ad2f2fa023caea602d8f897251b84", "filename": "gcc/testsuite/gdc.test/fail_compilation/b20011.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fb20011.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fb20011.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fb20011.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -37,4 +37,4 @@ void main()\n     assignableByRef(s1.member);\n     assignableByOut(s1.member);\n     assignableByConstRef(s1.member);\n-} \n+}"}, {"sha": "0dda8bdd3a4c71057f4f5f183b6eab14e9a19543", "filename": "gcc/testsuite/gdc.test/fail_compilation/b3841.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fb3841.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fb3841.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fb3841.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -47,7 +47,7 @@ void main()\n         f!(op, long, short)();\n         f!(op, float, long)();\n         f!(op, double, float)();\n-        \n+\n         // Should that really be OK ?\n         f!(op, short, int)();\n         f!(op, float, double)();"}, {"sha": "ca9879733ce2cbc0d8bff20db8b96cfc38790617", "filename": "gcc/testsuite/gdc.test/fail_compilation/bug16165.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fbug16165.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fbug16165.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fbug16165.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -7,7 +7,7 @@ void g()\n \tf(5, 6, 404);\n }\n \n-/* \n+/*\n TEST_OUTPUT:\n ---\n fail_compilation/bug16165.d(6): Error: function `bug16165.f(int x, Object y)` is not callable using argument types `(Object, Object, int)`"}, {"sha": "fab12c20b84157138e2b456aeeb37d3918b10002", "filename": "gcc/testsuite/gdc.test/fail_compilation/bug8150a.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fbug8150a.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fbug8150a.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fbug8150a.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -3,7 +3,7 @@\n TEST_OUTPUT:\n ---\n fail_compilation/bug8150a.d(14): Error: `object.Exception` is thrown but not caught\n-fail_compilation/bug8150a.d(12): Error: `nothrow` constructor `bug8150a.Foo.this` may throw\n+fail_compilation/bug8150a.d(12): Error: constructor `bug8150a.Foo.this` may throw but is marked as `nothrow`\n ---\n */\n "}, {"sha": "606b628270b86f1be72d7b8225fa531e8fb87325", "filename": "gcc/testsuite/gdc.test/fail_compilation/bug8150b.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fbug8150b.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fbug8150b.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fbug8150b.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -3,7 +3,7 @@\n TEST_OUTPUT:\n ---\n fail_compilation/bug8150b.d(15): Error: `object.Exception` is thrown but not caught\n-fail_compilation/bug8150b.d(13): Error: `nothrow` constructor `bug8150b.Foo.__ctor!().this` may throw\n+fail_compilation/bug8150b.d(13): Error: constructor `bug8150b.Foo.__ctor!().this` may throw but is marked as `nothrow`\n fail_compilation/bug8150b.d(20): Error: template instance `bug8150b.Foo.__ctor!()` error instantiating\n ---\n */"}, {"sha": "dab298441588bc3a9d592f57a2d175c0fc370be1", "filename": "gcc/testsuite/gdc.test/fail_compilation/ccast.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fccast.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fccast.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fccast.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -1,4 +1,4 @@\n-/* \n+/*\n TEST_OUTPUT:\n ---\n fail_compilation/ccast.d(9): Error: C style cast illegal, use `cast(byte)i`"}, {"sha": "0f12d99f8cde83395b381a2d3ab13786d01c24a5", "filename": "gcc/testsuite/gdc.test/fail_compilation/ctfe14731.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fctfe14731.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fctfe14731.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fctfe14731.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -1,7 +1,7 @@\n /*\n TEST_OUTPUT:\n ---\n-fail_compilation/ctfe14731.d(16): Error: cannot implicitly convert expression `[\"a b\"]` of type `string[]` to `string`\n+fail_compilation/ctfe14731.d(16): Error: cannot implicitly convert expression `split(\"a b\")` of type `string[]` to `string`\n fail_compilation/ctfe14731.d(17): Error: cannot implicitly convert expression `split(\"a b\")` of type `string[]` to `string`\n ---\n */"}, {"sha": "416d56310e18d62b6e0cedb6f4d61b6c23d14c34", "filename": "gcc/testsuite/gdc.test/fail_compilation/diag10319.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fdiag10319.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fdiag10319.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fdiag10319.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -9,7 +9,7 @@ fail_compilation/diag10319.d(28): Error: `@safe` function `D main` cannot call `\n fail_compilation/diag10319.d(18):        `diag10319.bar!int.bar` is declared here\n fail_compilation/diag10319.d(27): Error: function `diag10319.foo` is not `nothrow`\n fail_compilation/diag10319.d(28): Error: function `diag10319.bar!int.bar` is not `nothrow`\n-fail_compilation/diag10319.d(25): Error: `nothrow` function `D main` may throw\n+fail_compilation/diag10319.d(25): Error: function `D main` may throw but is marked as `nothrow`\n ---\n */\n "}, {"sha": "ed38167b4c48eaba043668b285173e6694825f73", "filename": "gcc/testsuite/gdc.test/fail_compilation/diag10805.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fdiag10805.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fdiag10805.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fdiag10805.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -1,7 +1,7 @@\n /*\n TEST_OUTPUT:\n ---\n-fail_compilation/diag10805.d(12): Error: delimited string must end in FOO\"\n+fail_compilation/diag10805.d(12): Error: delimited string must end in `FOO\"`\n fail_compilation/diag10805.d(14): Error: unterminated string constant starting at fail_compilation/diag10805.d(14)\n fail_compilation/diag10805.d(14): Error: Implicit string concatenation is error-prone and disallowed in D\n fail_compilation/diag10805.d(14):        Use the explicit syntax instead (concatenating literals is `@nogc`): \"\" ~ \"\""}, {"sha": "fc0d9f54dffbaba4bb04e23f8d8881fefa6a98ec", "filename": "gcc/testsuite/gdc.test/fail_compilation/diag13281.d", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fdiag13281.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fdiag13281.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fdiag13281.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -11,9 +11,9 @@ fail_compilation/diag13281.d(26): Error: cannot implicitly convert expression `1\n fail_compilation/diag13281.d(27): Error: cannot implicitly convert expression `123.4i` of type `idouble` to `int`\n fail_compilation/diag13281.d(28): Error: cannot implicitly convert expression `123.4Fi` of type `ifloat` to `int`\n fail_compilation/diag13281.d(29): Error: cannot implicitly convert expression `123.4Li` of type `ireal` to `int`\n-fail_compilation/diag13281.d(30): Error: cannot implicitly convert expression `(123.4+5.6i)` of type `cdouble` to `int`\n-fail_compilation/diag13281.d(31): Error: cannot implicitly convert expression `(123.4F+5.6Fi)` of type `cfloat` to `int`\n-fail_compilation/diag13281.d(32): Error: cannot implicitly convert expression `(123.4L+5.6Li)` of type `creal` to `int`\n+fail_compilation/diag13281.d(30): Error: cannot implicitly convert expression `123.4 + 5.6i` of type `cdouble` to `int`\n+fail_compilation/diag13281.d(31): Error: cannot implicitly convert expression `123.4F + 5.6Fi` of type `cfloat` to `int`\n+fail_compilation/diag13281.d(32): Error: cannot implicitly convert expression `123.4L + 5.6Li` of type `creal` to `int`\n ---\n */\n "}, {"sha": "1c614083bfc211ccfa16728038f9de240c3a627c", "filename": "gcc/testsuite/gdc.test/fail_compilation/diag15713.d", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fdiag15713.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fdiag15713.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fdiag15713.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -2,8 +2,8 @@\n TEST_OUTPUT:\n ---\n fail_compilation/diag15713.d(19): Error: no property `widthSign` for type `diag15713.WrData.Data`\n-fail_compilation/diag15713.d(39): Error: template instance `diag15713.conwritefImpl!(\"parse-int\", \"width\", \"\\x0a\", Data(null))` error instantiating\n-fail_compilation/diag15713.d(44):        instantiated from here: `conwritefImpl!(\"main\", \"\\x0a\", Data(null))`\n+fail_compilation/diag15713.d(39): Error: template instance `diag15713.conwritefImpl!(\"parse-int\", \"width\", \"\\n\", Data(null))` error instantiating\n+fail_compilation/diag15713.d(44):        instantiated from here: `conwritefImpl!(\"main\", \"\\n\", Data(null))`\n fail_compilation/diag15713.d(49):        instantiated from here: `fdwritef!()`\n ---\n */"}, {"sha": "73d628584d5f1fac861effef2c89feff409b0e24", "filename": "gcc/testsuite/gdc.test/fail_compilation/diag16977.d", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fdiag16977.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fdiag16977.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fdiag16977.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -13,7 +13,7 @@ fail_compilation/diag16977.d(30): Error: template instance `diag16977.test.funcT\n ---\n */\n \n-// when copying the expression of a default argument, location information is \n+// when copying the expression of a default argument, location information is\n //   replaced by the location of the caller to improve debug information\n // verify error messages are displayed for the original location only\n \n@@ -26,7 +26,7 @@ void test()\n     void badOp(int x, int y = 1 ~ \"string\") {}\n     void lazyTemplate(int x, lazy int y = 4.templ) {}\n     void funcTemplate(T)(T y = 5) {}\n-    \n+\n     funcTemplate!string();\n     undefinedId(1);\n     badOp(2);"}, {"sha": "21a12ed0253cc99d735102d36aeb8e81c59cc808", "filename": "gcc/testsuite/gdc.test/fail_compilation/dtor_attributes.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fdtor_attributes.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fdtor_attributes.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fdtor_attributes.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -20,7 +20,7 @@ fail_compilation/dtor_attributes.d(118): Error: destructor `dtor_attributes.Stri\n fail_compilation/dtor_attributes.d(113):        generated `Strict.~this` is not nothrow because of the following field's destructors:\n fail_compilation/dtor_attributes.d(111):         - HasDtor member\n fail_compilation/dtor_attributes.d(103):           not nothrow `HasDtor.~this` is declared here\n-fail_compilation/dtor_attributes.d(116): Error: `nothrow` function `dtor_attributes.test1` may throw\n+fail_compilation/dtor_attributes.d(116): Error: function `dtor_attributes.test1` may throw but is marked as `nothrow`\n ---\n */\n #line 100"}, {"sha": "9f38cb04069b84d308f6b22176672695ab05b029", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail10964.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail10964.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail10964.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail10964.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -7,7 +7,7 @@ fail_compilation/fail10964.d(30): Error: function `fail10964.S.__postblit` is no\n fail_compilation/fail10964.d(33): Error: function `fail10964.S.__postblit` is not `nothrow`\n fail_compilation/fail10964.d(34): Error: function `fail10964.S.__postblit` is not `nothrow`\n fail_compilation/fail10964.d(35): Error: function `fail10964.S.__postblit` is not `nothrow`\n-fail_compilation/fail10964.d(22): Error: `nothrow` function `fail10964.foo` may throw\n+fail_compilation/fail10964.d(22): Error: function `fail10964.foo` may throw but is marked as `nothrow`\n ---\n */\n "}, {"sha": "7592a5a1dfd23a6bb88a4ab22389f6e27217bc52", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail11375.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail11375.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail11375.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail11375.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -2,7 +2,7 @@\n TEST_OUTPUT:\n ---\n fail_compilation/fail11375.d(17): Error: constructor `fail11375.D!().D.this` is not `nothrow`\n-fail_compilation/fail11375.d(15): Error: `nothrow` function `D main` may throw\n+fail_compilation/fail11375.d(15): Error: function `D main` may throw but is marked as `nothrow`\n ---\n */\n "}, {"sha": "3c2f9c13a7bc414fce7c5e59258e80289533f370", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail11542.d", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail11542.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail11542.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail11542.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -4,9 +4,9 @@\n TEST_OUTPUT:\n ---\n fail_compilation/fail11542.d(15): Error: `object.Exception` is thrown but not caught\n-fail_compilation/fail11542.d(12): Error: `nothrow` function `fail11542.test_success1` may throw\n+fail_compilation/fail11542.d(12): Error: function `fail11542.test_success1` may throw but is marked as `nothrow`\n fail_compilation/fail11542.d(25): Error: `object.Exception` is thrown but not caught\n-fail_compilation/fail11542.d(22): Error: `nothrow` function `fail11542.test_success3` may throw\n+fail_compilation/fail11542.d(22): Error: function `fail11542.test_success3` may throw but is marked as `nothrow`\n ---\n */\n void test_success1() nothrow\n@@ -29,7 +29,7 @@ void test_success3() nothrow\n TEST_OUTPUT:\n ---\n fail_compilation/fail11542.d(38): Error: `object.Exception` is thrown but not caught\n-fail_compilation/fail11542.d(35): Error: `nothrow` function `fail11542.test_failure1` may throw\n+fail_compilation/fail11542.d(35): Error: function `fail11542.test_failure1` may throw but is marked as `nothrow`\n ---\n */\n void test_failure1() nothrow\n@@ -52,7 +52,7 @@ void est_failure3() nothrow\n TEST_OUTPUT:\n ---\n fail_compilation/fail11542.d(61): Error: `object.Exception` is thrown but not caught\n-fail_compilation/fail11542.d(58): Error: `nothrow` function `fail11542.test_exit1` may throw\n+fail_compilation/fail11542.d(58): Error: function `fail11542.test_exit1` may throw but is marked as `nothrow`\n ---\n */\n void test_exit1() nothrow"}, {"sha": "65e89b196c7e878a7d1530a8bdafb804b49e9af3", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail12809.d", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail12809.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail12809.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail12809.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -6,10 +6,10 @@ bool cond;\n TEST_OUTPUT:\n ---\n fail_compilation/fail12809.d(18): Error: `object.Exception` is thrown but not caught\n-fail_compilation/fail12809.d(15): Error: `nothrow` function `fail12809.test_finally1` may throw\n+fail_compilation/fail12809.d(15): Error: function `fail12809.test_finally1` may throw but is marked as `nothrow`\n fail_compilation/fail12809.d(34): Error: `object.Exception` is thrown but not caught\n fail_compilation/fail12809.d(38): Error: `object.Exception` is thrown but not caught\n-fail_compilation/fail12809.d(31): Error: `nothrow` function `fail12809.test_finally3` may throw\n+fail_compilation/fail12809.d(31): Error: function `fail12809.test_finally3` may throw but is marked as `nothrow`\n ---\n */\n void test_finally1() nothrow\n@@ -44,10 +44,10 @@ void test_finally3() nothrow\n TEST_OUTPUT:\n ---\n fail_compilation/fail12809.d(58): Error: `object.Exception` is thrown but not caught\n-fail_compilation/fail12809.d(53): Error: `nothrow` function `fail12809.test_finally4` may throw\n+fail_compilation/fail12809.d(53): Error: function `fail12809.test_finally4` may throw but is marked as `nothrow`\n fail_compilation/fail12809.d(74): Error: `object.Exception` is thrown but not caught\n fail_compilation/fail12809.d(78): Error: `object.Exception` is thrown but not caught\n-fail_compilation/fail12809.d(69): Error: `nothrow` function `fail12809.test_finally6` may throw\n+fail_compilation/fail12809.d(69): Error: function `fail12809.test_finally6` may throw but is marked as `nothrow`\n ---\n */\n void test_finally4() nothrow"}, {"sha": "fd6e618c0cefc3ec7ba93a241c4ae7af52b747ac", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail14277.d", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail14277.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail14277.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail14277.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -0,0 +1,10 @@\n+// https://issues.dlang.org/show_bug.cgi?id=14277\n+\n+/*\n+TEST_OUTPUT:\n+---\n+fail_compilation/fail14277.d(10): Error: cannot implicitly convert expression `new char[](9999$?:32=u|64=LU$)` of type `char[]` to `ubyte[]`\n+---\n+*/\n+\n+ubyte[] u = new char[9999];"}, {"sha": "c7a2b89f448ba01bc9498488d09cc7951b83d561", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail14486.d", "status": "modified", "additions": 12, "deletions": 33, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail14486.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail14486.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail14486.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -3,39 +3,18 @@\n /*\n TEST_OUTPUT:\n ---\n-fail_compilation/fail14486.d(56): Deprecation: The `delete` keyword has been deprecated.  Use `object.destroy()` (and `core.memory.GC.free()` if applicable) instead.\n-fail_compilation/fail14486.d(56): Error: `delete c0` is not `@safe` but is used in `@safe` function `test1a`\n-fail_compilation/fail14486.d(57): Deprecation: The `delete` keyword has been deprecated.  Use `object.destroy()` (and `core.memory.GC.free()` if applicable) instead.\n-fail_compilation/fail14486.d(57): Error: `pure` function `fail14486.test1a` cannot call impure destructor `fail14486.C1a.~this`\n-fail_compilation/fail14486.d(57): Error: `@safe` function `fail14486.test1a` cannot call `@system` destructor `fail14486.C1a.~this`\n-fail_compilation/fail14486.d(43):        `fail14486.C1a.~this` is declared here\n-fail_compilation/fail14486.d(57): Error: `@nogc` function `fail14486.test1a` cannot call non-@nogc destructor `fail14486.C1a.~this`\n-fail_compilation/fail14486.d(62): Deprecation: The `delete` keyword has been deprecated.  Use `object.destroy()` (and `core.memory.GC.free()` if applicable) instead.\n-fail_compilation/fail14486.d(63): Deprecation: The `delete` keyword has been deprecated.  Use `object.destroy()` (and `core.memory.GC.free()` if applicable) instead.\n-fail_compilation/fail14486.d(63): Error: destructor `fail14486.C1b.~this` is not `nothrow`\n-fail_compilation/fail14486.d(60): Error: `nothrow` function `fail14486.test1b` may throw\n-fail_compilation/fail14486.d(68): Deprecation: The `delete` keyword has been deprecated.  Use `object.destroy()` (and `core.memory.GC.free()` if applicable) instead.\n-fail_compilation/fail14486.d(68): Error: `delete s0` is not `@safe` but is used in `@safe` function `test2a`\n-fail_compilation/fail14486.d(69): Deprecation: The `delete` keyword has been deprecated.  Use `object.destroy()` (and `core.memory.GC.free()` if applicable) instead.\n-fail_compilation/fail14486.d(69): Error: `pure` function `fail14486.test2a` cannot call impure destructor `fail14486.S1a.~this`\n-fail_compilation/fail14486.d(69): Error: `@safe` function `fail14486.test2a` cannot call `@system` destructor `fail14486.S1a.~this`\n-fail_compilation/fail14486.d(49):        `fail14486.S1a.~this` is declared here\n-fail_compilation/fail14486.d(69): Error: `@nogc` function `fail14486.test2a` cannot call non-@nogc destructor `fail14486.S1a.~this`\n-fail_compilation/fail14486.d(74): Deprecation: The `delete` keyword has been deprecated.  Use `object.destroy()` (and `core.memory.GC.free()` if applicable) instead.\n-fail_compilation/fail14486.d(75): Deprecation: The `delete` keyword has been deprecated.  Use `object.destroy()` (and `core.memory.GC.free()` if applicable) instead.\n-fail_compilation/fail14486.d(75): Error: destructor `fail14486.S1b.~this` is not `nothrow`\n-fail_compilation/fail14486.d(72): Error: `nothrow` function `fail14486.test2b` may throw\n-fail_compilation/fail14486.d(80): Deprecation: The `delete` keyword has been deprecated.  Use `object.destroy()` (and `core.memory.GC.free()` if applicable) instead.\n-fail_compilation/fail14486.d(80): Error: `delete a0` is not `@safe` but is used in `@safe` function `test3a`\n-fail_compilation/fail14486.d(81): Deprecation: The `delete` keyword has been deprecated.  Use `object.destroy()` (and `core.memory.GC.free()` if applicable) instead.\n-fail_compilation/fail14486.d(81): Error: `pure` function `fail14486.test3a` cannot call impure destructor `fail14486.S1a.~this`\n-fail_compilation/fail14486.d(81): Error: `@safe` function `fail14486.test3a` cannot call `@system` destructor `fail14486.S1a.~this`\n-fail_compilation/fail14486.d(49):        `fail14486.S1a.~this` is declared here\n-fail_compilation/fail14486.d(81): Error: `@nogc` function `fail14486.test3a` cannot call non-@nogc destructor `fail14486.S1a.~this`\n-fail_compilation/fail14486.d(86): Deprecation: The `delete` keyword has been deprecated.  Use `object.destroy()` (and `core.memory.GC.free()` if applicable) instead.\n-fail_compilation/fail14486.d(87): Deprecation: The `delete` keyword has been deprecated.  Use `object.destroy()` (and `core.memory.GC.free()` if applicable) instead.\n-fail_compilation/fail14486.d(87): Error: destructor `fail14486.S1b.~this` is not `nothrow`\n-fail_compilation/fail14486.d(84): Error: `nothrow` function `fail14486.test3b` may throw\n+fail_compilation/fail14486.d(35): Error: The `delete` keyword is obsolete.  Use `object.destroy()` (and `core.memory.GC.free()` if applicable) instead.\n+fail_compilation/fail14486.d(36): Error: The `delete` keyword is obsolete.  Use `object.destroy()` (and `core.memory.GC.free()` if applicable) instead.\n+fail_compilation/fail14486.d(41): Error: The `delete` keyword is obsolete.  Use `object.destroy()` (and `core.memory.GC.free()` if applicable) instead.\n+fail_compilation/fail14486.d(42): Error: The `delete` keyword is obsolete.  Use `object.destroy()` (and `core.memory.GC.free()` if applicable) instead.\n+fail_compilation/fail14486.d(47): Error: The `delete` keyword is obsolete.  Use `object.destroy()` (and `core.memory.GC.free()` if applicable) instead.\n+fail_compilation/fail14486.d(48): Error: The `delete` keyword is obsolete.  Use `object.destroy()` (and `core.memory.GC.free()` if applicable) instead.\n+fail_compilation/fail14486.d(53): Error: The `delete` keyword is obsolete.  Use `object.destroy()` (and `core.memory.GC.free()` if applicable) instead.\n+fail_compilation/fail14486.d(54): Error: The `delete` keyword is obsolete.  Use `object.destroy()` (and `core.memory.GC.free()` if applicable) instead.\n+fail_compilation/fail14486.d(59): Error: The `delete` keyword is obsolete.  Use `object.destroy()` (and `core.memory.GC.free()` if applicable) instead.\n+fail_compilation/fail14486.d(60): Error: The `delete` keyword is obsolete.  Use `object.destroy()` (and `core.memory.GC.free()` if applicable) instead.\n+fail_compilation/fail14486.d(65): Error: The `delete` keyword is obsolete.  Use `object.destroy()` (and `core.memory.GC.free()` if applicable) instead.\n+fail_compilation/fail14486.d(66): Error: The `delete` keyword is obsolete.  Use `object.destroy()` (and `core.memory.GC.free()` if applicable) instead.\n ---\n */\n "}, {"sha": "b71a68e2322a4d9d3e34edf0f1fcf7735bf23e30", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail14554.d", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail14554.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail14554.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail14554.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -25,6 +25,6 @@ struct issue14554_2 {\n \n void test14554()\n {\n-     issue14554_1.foo!bool(1);    \n-     issue14554_2.foo!bool(1);    \n+     issue14554_1.foo!bool(1);\n+     issue14554_2.foo!bool(1);\n }"}, {"sha": "9aa94f863dfe697ee13f184e9b0aecc044231378", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail15089.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail15089.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail15089.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail15089.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -1,7 +1,7 @@\n /*\n TEST_OUTPUT:\n ---\n-fail_compilation/fail15089.d(10): Error: cannot implicitly convert expression `130` of type `int` to `byte`\n+fail_compilation/fail15089.d(10): Error: cannot implicitly convert expression `2 ^ 128` of type `int` to `byte`\n ---\n */\n "}, {"sha": "0c8a9378b64ade9b5a1f434012e0758fdde80570", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail160.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail160.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail160.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail160.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -14,7 +14,7 @@ template Wrapper(B, alias Func, int func)\n     alias typeof(&Func) FuncPtr;\n \n     private static FuncPtr get_funcptr() { return func; }\n-} \n+}\n \n \n int main(char[][] args)"}, {"sha": "689dd489c95525ca4605e9641714fb6616a1c850", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail17906.d", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail17906.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail17906.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail17906.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -0,0 +1,12 @@\n+// REQUIRED_ARGS: -de\n+/* TEST_OUTPUT:\n+---\n+fail_compilation/fail17906.d(11): Error: The `delete` keyword is obsolete.  Use `object.destroy()` (and `core.memory.GC.free()` if applicable) instead.\n+---\n+*/\n+// https://issues.dlang.org/show_bug.cgi?id=18647\n+deprecated void main ()\n+{\n+    Object o = new Object;\n+    delete o;\n+}"}, {"sha": "e6b95564b444390a1313daf1355f1ce29b104db6", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail17969.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail17969.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail17969.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail17969.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -4,7 +4,7 @@ fail_compilation/fail17969.d(9): Error: no property `sum` for type `fail17969.__\n ---\n  * https://issues.dlang.org/show_bug.cgi?id=17969\n  */\n- \n+\n \n alias fun = a => MapResult2!(b => b).sum;\n "}, {"sha": "8da0b8d443744efcdb36d9f56d919e29e06a2791", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail18228.d", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail18228.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail18228.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail18228.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -1,9 +1,9 @@\n /*\n TEST_OUTPUT:\n ---\n-fail_compilation/fail18228.d(12): Error: Using `this` as a type is obsolete. Use `typeof(this)` instead\n-fail_compilation/fail18228.d(13): Error: Using `this` as a type is obsolete. Use `typeof(this)` instead\n-fail_compilation/fail18228.d(14): Error: Using `super` as a type is obsolete. Use `typeof(super)` instead\n+fail_compilation/fail18228.d(12): Error: undefined identifier `this`, did you mean `typeof(this)`?\n+fail_compilation/fail18228.d(13): Error: undefined identifier `this`, did you mean `typeof(this)`?\n+fail_compilation/fail18228.d(14): Error: undefined identifier `super`, did you mean `typeof(super)`?\n ---\n */\n "}, {"sha": "520eb763b9b71bdff01ec7ec0c288d5bb1bf9460", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail19441.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail19441.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail19441.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail19441.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -2,7 +2,7 @@\n /*\n TEST_OUTPUT:\n ---\n-fail_compilation/fail19441.d(44): Deprecation: Cannot use `alias this` to partially initialize variable `wrap[0]` of type `Wrap10595`. Use `wrap[0].i`\n+fail_compilation/fail19441.d(44): Error: cannot use `alias this` to partially initialize variable `wrap[0]` of type `Wrap10595`. Use `wrap[0].i`\n ---\n */\n "}, {"sha": "55c3bd89ff9c3dfad92d1af2e583fffe9bd52e13", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail196.d", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail196.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail196.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail196.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -1,14 +1,14 @@\n /*\n TEST_OUTPUT:\n ---\n-fail_compilation/fail196.d(27): Error: delimited string must end in )\"\n+fail_compilation/fail196.d(27): Error: delimited string must end in `)\"`\n fail_compilation/fail196.d(27): Error: Implicit string concatenation is error-prone and disallowed in D\n-fail_compilation/fail196.d(27):        Use the explicit syntax instead (concatenating literals is `@nogc`): \"foo(xxx)\" ~ \";\\x0a    assert(s == \"\n+fail_compilation/fail196.d(27):        Use the explicit syntax instead (concatenating literals is `@nogc`): \"foo(xxx)\" ~ \";\\n    assert(s == \"\n fail_compilation/fail196.d(28): Error: semicolon needed to end declaration of `s`, instead of `foo`\n fail_compilation/fail196.d(27):        `s` declared here\n-fail_compilation/fail196.d(28): Error: found `\");\\x0a\\x0a    s = q\"` when expecting `;` following statement\n-fail_compilation/fail196.d(30): Error: found `\";\\x0a    assert(s == \"` when expecting `;` following statement\n-fail_compilation/fail196.d(31): Error: found `\");\\x0a\\x0a    s = q\"` when expecting `;` following statement\n+fail_compilation/fail196.d(28): Error: found `\");\\n\\n    s = q\"` when expecting `;` following statement\n+fail_compilation/fail196.d(30): Error: found `\";\\n    assert(s == \"` when expecting `;` following statement\n+fail_compilation/fail196.d(31): Error: found `\");\\n\\n    s = q\"` when expecting `;` following statement\n fail_compilation/fail196.d(33): Error: found `{` when expecting `;` following statement\n fail_compilation/fail196.d(33): Error: found `}` when expecting `;` following statement\n fail_compilation/fail196.d(34): Error: found `foo` when expecting `;` following statement"}, {"sha": "49df470677757191ec0a63b28c2b4a8d8097e70b", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail19897.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail19897.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail19897.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail19897.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -1,7 +1,7 @@\n /*\n TEST_OUTPUT:\n ---\n-fail_compilation/fail19897.d(9): Error: cannot implicitly convert expression `[]` of type `const(char[0])` to `const(char)`\n+fail_compilation/fail19897.d(12): Error: cannot implicitly convert expression `a.x` of type `const(char[0])` to `const(char)`\n ---\n */\n struct S"}, {"sha": "9f2dbbb81abc9a615cc8674ccb98309c92089909", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail19911b.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail19911b.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail19911b.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail19911b.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -1,4 +1,4 @@\n-/* \n+/*\n DFLAGS:\n EXTRA_SOURCES: extra-files/minimal/object.d\n TEST_OUTPUT:"}, {"sha": "c1c654942c6305c2e0ea0ca28ee2616583ecdd01", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail19911c.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail19911c.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail19911c.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail19911c.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -1,4 +1,4 @@\n-/* \n+/*\n DFLAGS:\n TEST_OUTPUT:\n ---"}, {"sha": "1476666414cd9940cac4f3e9796d9b556913d48c", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail19922.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail19922.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail19922.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail19922.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -1,4 +1,4 @@\n-/* \n+/*\n DFLAGS:\n TEST_OUTPUT:\n ---"}, {"sha": "d98dd03fd855465d3d9a88b5c712652e5e52fd2b", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail19923.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail19923.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail19923.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail19923.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -1,4 +1,4 @@\n-/* \n+/*\n DFLAGS:\n TEST_OUTPUT:\n ---"}, {"sha": "4528d365da87050ffb83203c3896466e05913269", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail20.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail20.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail20.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail20.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -14,6 +14,6 @@ void main()\n     FOO one;\n     FOO two;\n     if (one < two){} // This should tell me that there\n-                     // is no opCmp() defined instead \n+                     // is no opCmp() defined instead\n                      // of crashing.\n }"}, {"sha": "185baecd0a21a79890f434a8a6a747bb313a8ed7", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail20800.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail20800.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail20800.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail20800.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -15,7 +15,7 @@ struct RegexMatch\n }\n static m() { return RegexMatch(); }\n \n-void fun(int a); \n+void fun(int a);\n \n void initCommands()\n {"}, {"sha": "c6e3684289e2e2033d041f7cc15ae0c375565be9", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail22127.d", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail22127.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail22127.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail22127.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -0,0 +1,11 @@\n+/* TEST_OUTPUT:\n+---\n+fail_compilation/fail22127.d(101): Error: user-defined attributes are not allowed on `alias` declarations\n+---\n+ */\n+\n+// https://issues.dlang.org/show_bug.cgi?id=22127\n+\n+#line 100\n+\n+alias getOne = @(0) function int () => 1;"}, {"sha": "320d1eb07f434e31aad214c5bc671a22b6365600", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail22634.d", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail22634.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail22634.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail22634.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -0,0 +1,12 @@\n+/*\n+TEST_OUTPUT:\n+---\n+fail_compilation/fail22634.d(9): Error: more than 65535 symbols with name `i` generated\n+---\n+*/\n+void main()\n+{\n+    static foreach(i; 0..65537)\n+    {\n+    }\n+}"}, {"sha": "dd83f75e9c2b81a40f2c0fbdd7de17b5f20df814", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail22780.d", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail22780.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail22780.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail22780.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -0,0 +1,12 @@\n+// https://issues.dlang.org/show_bug.cgi?id=22780\n+/* TEST_OUTPUT:\n+---\n+fail_compilation/fail22780.d(11): Error: variable `fail22780.test10717.c` reference to `scope class` must be `scope`\n+---\n+*/\n+scope class C10717 { }\n+\n+void test10717()\n+{\n+    C10717 c;\n+}"}, {"sha": "57edd3a0edde9fc395a22d414344718ca5b4e3b0", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail2361.d", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail2361.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail2361.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail2361.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -1,8 +1,7 @@\n /*\n TEST_OUTPUT:\n ---\n-fail_compilation/fail2361.d(14): Deprecation: The `delete` keyword has been deprecated.  Use `object.destroy()` (and `core.memory.GC.free()` if applicable) instead.\n-fail_compilation/fail2361.d(14): Error: cannot modify `immutable` expression `c`\n+fail_compilation/fail2361.d(13): Error: The `delete` keyword is obsolete.  Use `object.destroy()` (and `core.memory.GC.free()` if applicable) instead.\n ---\n */\n "}, {"sha": "63cbfd43cf5e6128b8c2743b5b4d55bf862ae5d4", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail258.d", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail258.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail258.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail258.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -1,13 +1,15 @@\n /*\n TEST_OUTPUT:\n ---\n-fail_compilation/fail258.d(11): Error: delimiter cannot be whitespace\n-fail_compilation/fail258.d(11): Error: delimited string must end in \n-\"\n-fail_compilation/fail258.d(11): Error: declaration expected, not `\"X\"`\n-fail_compilation/fail258.d(14): Error: unterminated string constant starting at fail_compilation/fail258.d(14)\n+fail_compilation/fail258.d(101): Error: delimiter cannot be whitespace\n+fail_compilation/fail258.d(101): Error: delimited string must end in `\"`\n+fail_compilation/fail258.d(101): Error: declaration expected, not `\"X\"`\n+fail_compilation/fail258.d(104): Error: unterminated string constant starting at fail_compilation/fail258.d(104)\n ---\n */\n+\n+#line 100\n+\n q\"\n X\n "}, {"sha": "91f8046470564ed893e1a25eb3e2e205b8fb71cf", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail332.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail332.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail332.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail332.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -21,7 +21,7 @@ void test()\n {\n     foo();\n     foo(null);\n-    \n+\n     baz(\"\");\n     baz(3, null);\n }"}, {"sha": "215453ebe75a2226e5b0e30e6e2aa9787760818d", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail349.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail349.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail349.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail349.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -2,7 +2,7 @@\n TEST_OUTPUT:\n ---\n fail_compilation/fail349.d(15): Error: function `fail349.bug6109throwing` is not `nothrow`\n-fail_compilation/fail349.d(13): Error: `nothrow` function `fail349.bug6109noThrow` may throw\n+fail_compilation/fail349.d(13): Error: function `fail349.bug6109noThrow` may throw but is marked as `nothrow`\n ---\n */\n "}, {"sha": "2795acc1059b77f24a4aa057e94a878979fee1d4", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail354.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail354.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail354.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail354.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -10,4 +10,4 @@ struct S(int N)\n {\n     this(T!N) { }\n }\n-alias S!1 M; \n+alias S!1 M;"}, {"sha": "a09f725754bd4abfe576fc47a3d4f5649d50c573", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail4082.d", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail4082.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail4082.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail4082.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -2,7 +2,7 @@\n TEST_OUTPUT:\n ---\n fail_compilation/fail4082.d(14): Error: destructor `fail4082.Foo.~this` is not `nothrow`\n-fail_compilation/fail4082.d(12): Error: `nothrow` function `fail4082.test1` may throw\n+fail_compilation/fail4082.d(12): Error: function `fail4082.test1` may throw but is marked as `nothrow`\n ---\n */\n struct Foo\n@@ -22,7 +22,7 @@ NEXT:\n TEST_OUTPUT:\n ---\n fail_compilation/fail4082.d(32): Error: destructor `fail4082.Bar.~this` is not `nothrow`\n-fail_compilation/fail4082.d(32): Error: `nothrow` function `fail4082.test2` may throw\n+fail_compilation/fail4082.d(32): Error: function `fail4082.test2` may throw but is marked as `nothrow`\n ---\n */\n struct Bar"}, {"sha": "69b142eb3420d97a6fd4d85f0e0da5611dabda1f", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail4269a.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail4269a.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail4269a.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail4269a.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -10,6 +10,6 @@ enum bool WWW = is(typeof(A.x));\n \n interface A {\n     B blah;\n-    void foo(B b){} \n+    void foo(B b){}\n }\n "}, {"sha": "e0ebd2f1a0a65cc5fb78ae03cbc387afc0aeebe8", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail4269b.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail4269b.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail4269b.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail4269b.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -9,6 +9,6 @@ enum bool WWW = is(typeof(A.x));\n \n struct A {\n     B blah;\n-    void foo(B b){} \n+    void foo(B b){}\n }\n "}, {"sha": "5bba42e04ea351c75c58c826e741b0f6f4e46ad4", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail4269c.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail4269c.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail4269c.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail4269c.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -9,6 +9,6 @@ enum bool WWW = is(typeof(A.x));\n \n class A {\n     B blah;\n-    void foo(B b){} \n+    void foo(B b){}\n }\n "}, {"sha": "9c6aaed8cde6b2672b1588d8d7e40683e2e94de4", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail4375d.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail4375d.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail4375d.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail4375d.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -14,7 +14,7 @@ void main() {\n label2:\n         if (true)\n             assert(15);\n-    else \n+    else\n         assert(16);\n }\n "}, {"sha": "aca90c6c3dd0c72c00e06fa0a441bbd0944d9eb9", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail6968.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail6968.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail6968.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail6968.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -29,4 +29,4 @@ template PredAny(A, B...)\n void main()\n {\n     pragma(msg, PredAny!(int, long, float));\n-} \n+}"}, {"sha": "e8371c4f7fed00a55b55d6d53e784b2fb1ea7537", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail7848.d", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail7848.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail7848.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail7848.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -8,13 +8,13 @@ fail_compilation/fail7848.d(27): Error: `@safe` function `fail7848.C.__unittest_\n fail_compilation/fail7848.d(21):        `fail7848.func` is declared here\n fail_compilation/fail7848.d(27): Error: `@nogc` function `fail7848.C.__unittest_L25_C30` cannot call non-@nogc function `fail7848.func`\n fail_compilation/fail7848.d(27): Error: function `fail7848.func` is not `nothrow`\n-fail_compilation/fail7848.d(25): Error: `nothrow` function `fail7848.C.__unittest_L25_C30` may throw\n+fail_compilation/fail7848.d(25): Error: function `fail7848.C.__unittest_L25_C30` may throw but is marked as `nothrow`\n fail_compilation/fail7848.d(32): Error: `pure` function `fail7848.C.__invariant1` cannot call impure function `fail7848.func`\n fail_compilation/fail7848.d(32): Error: `@safe` function `fail7848.C.__invariant1` cannot call `@system` function `fail7848.func`\n fail_compilation/fail7848.d(21):        `fail7848.func` is declared here\n fail_compilation/fail7848.d(32): Error: `@nogc` function `fail7848.C.__invariant1` cannot call non-@nogc function `fail7848.func`\n fail_compilation/fail7848.d(32): Error: function `fail7848.func` is not `nothrow`\n-fail_compilation/fail7848.d(30): Error: `nothrow` function `fail7848.C.__invariant1` may throw\n+fail_compilation/fail7848.d(30): Error: function `fail7848.C.__invariant1` may throw but is marked as `nothrow`\n ---\n */\n "}, {"sha": "a378fbbfdeb637d6966893769cd3981a23c87cbc", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail80_m32.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail80_m32.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail80_m32.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail80_m32.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -23,7 +23,7 @@ class Test\n \n     static Image[] images;\n \n-    static void initIcons() \n+    static void initIcons()\n     {\n         images[\"progress_rem\"]  = ResourceManager.getImage(\"progress_rem.gif\"); // delete_obj_dis\n         images[\"redo\"]          = ResourceManager.getImage(\"redo.gif\");"}, {"sha": "e0cc871323bbad690efd36f18e68b3a0659868c5", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail80_m64.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail80_m64.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail80_m64.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail80_m64.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -23,7 +23,7 @@ class Test\n \n     static Image[] images;\n \n-    static void initIcons() \n+    static void initIcons()\n     {\n         images[\"progress_rem\"]  = ResourceManager.getImage(\"progress_rem.gif\"); // delete_obj_dis\n         images[\"redo\"]          = ResourceManager.getImage(\"redo.gif\");"}, {"sha": "92d313a5624e78eb3b4b8ecbf1b605ee52bed3a0", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail8724.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail8724.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail8724.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail8724.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -3,7 +3,7 @@\n TEST_OUTPUT:\n ---\n fail_compilation/fail8724.d(14): Error: `object.Exception` is thrown but not caught\n-fail_compilation/fail8724.d(12): Error: `nothrow` constructor `fail8724.Foo.this` may throw\n+fail_compilation/fail8724.d(12): Error: constructor `fail8724.Foo.this` may throw but is marked as `nothrow`\n ---\n */\n "}, {"sha": "7087b0c8c72093285b1eae7b0695e7ff5ebb004e", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail_arrayop2.d", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail_arrayop2.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail_arrayop2.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail_arrayop2.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -209,8 +209,7 @@ fail_compilation/fail_arrayop2.d(269): Error: array operation `\"abc\"[] + '\\x01'`\n fail_compilation/fail_arrayop2.d(272): Error: array operation `[1] * 6` without destination memory not allowed\n fail_compilation/fail_arrayop2.d(275): Error: `([1] * 6)[0..2]` is not an lvalue and cannot be modified\n fail_compilation/fail_arrayop2.d(278): Error: can only `*` a pointer, not a `int[]`\n-fail_compilation/fail_arrayop2.d(281): Deprecation: The `delete` keyword has been deprecated.  Use `object.destroy()` (and `core.memory.GC.free()` if applicable) instead.\n-fail_compilation/fail_arrayop2.d(281): Error: `[1] * 6` is not an lvalue and cannot be modified\n+fail_compilation/fail_arrayop2.d(281): Error: The `delete` keyword is obsolete.  Use `object.destroy()` (and `core.memory.GC.free()` if applicable) instead.\n fail_compilation/fail_arrayop2.d(284): Error: array operation `da[] * 6` without destination memory not allowed\n fail_compilation/fail_arrayop2.d(287): Error: array operation `da[] * 6` without destination memory not allowed\n fail_compilation/fail_arrayop2.d(290): Error: `[1] * 6` is not an lvalue and cannot be modified\n@@ -235,6 +234,7 @@ fail_compilation/fail_arrayop2.d(321): Error: array operation `[1] * 6` without\n fail_compilation/fail_arrayop2.d(321): Error: array operation `[1] * 6` without destination memory not allowed\n ---\n */\n+\n // Test all expressions, which can take arrays as their operands but cannot be a part of array operation.\n void test15407exp()\n {\n@@ -252,7 +252,7 @@ void test15407exp()\n     // StructLiteralExp.elements <- preFunctionParameters in CallExp\n     { auto r = S([1] * 6); }\n \n-    // NewExp.newargs/arguments <- preFunctionParameters\n+    // NewExp.arguments <- preFunctionParameters\n     { auto r = new S([1] * 6); }\n \n     // TODO: TypeidExp"}, {"sha": "392cebd2f73e8b54cb7ee7698bc12755f098a668", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail_typeof.d", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail_typeof.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail_typeof.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail_typeof.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -0,0 +1,82 @@\n+/* TEST_OUTPUT:\n+---\n+fail_compilation/fail_typeof.d(18): Error: undefined identifier `this`\n+fail_compilation/fail_typeof.d(23): Error: `this` is not in a class or struct scope\n+fail_compilation/fail_typeof.d(23): Error: `this` is only defined in non-static member functions, not `fail_typeof`\n+fail_compilation/fail_typeof.d(28): Error: undefined identifier `super`\n+fail_compilation/fail_typeof.d(33): Error: `super` is not in a class scope\n+fail_compilation/fail_typeof.d(33): Error: `super` is only allowed in non-static class member functions\n+fail_compilation/fail_typeof.d(40): Error: undefined identifier `this`, did you mean `typeof(this)`?\n+fail_compilation/fail_typeof.d(50): Error: undefined identifier `super`\n+fail_compilation/fail_typeof.d(55): Error: `super` is not in a class scope\n+fail_compilation/fail_typeof.d(55): Error: `super` is only allowed in non-static class member functions\n+fail_compilation/fail_typeof.d(63): Error: undefined identifier `this`, did you mean `typeof(this)`?\n+fail_compilation/fail_typeof.d(73): Error: undefined identifier `super`, did you mean `typeof(super)`?\n+---\n+*/\n+\n+enum E1 : this\n+{\n+    fail,\n+}\n+\n+enum E2 : typeof(this)\n+{\n+    fail,\n+}\n+\n+enum E3 : super\n+{\n+    fail,\n+}\n+\n+enum E4 : typeof(super)\n+{\n+    fail,\n+}\n+\n+struct S1\n+{\n+    enum E1 : this\n+    {\n+        fail,\n+    }\n+\n+    enum E2 : typeof(this)\n+    {\n+        ok = S1(),\n+    }\n+\n+    enum E3 : super\n+    {\n+        fail,\n+    }\n+\n+    enum E4 : typeof(super)\n+    {\n+        fail,\n+    }\n+}\n+\n+class C1\n+{\n+    enum E1 : this\n+    {\n+        fail,\n+    }\n+\n+    enum E2 : typeof(this)\n+    {\n+        ok = new C1,\n+    }\n+\n+    enum E3 : super\n+    {\n+        fail,\n+    }\n+\n+    enum E4 : typeof(super)\n+    {\n+        ok = new C1,\n+    }\n+}"}, {"sha": "0a2999763d1ea2e6bb8b15f2f43196244c32ca3f", "filename": "gcc/testsuite/gdc.test/fail_compilation/faildeleteaa.d", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffaildeleteaa.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffaildeleteaa.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffaildeleteaa.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -1,8 +1,7 @@\n /*\n TEST_OUTPUT:\n ---\n-fail_compilation/faildeleteaa.d(12): Deprecation: The `delete` keyword has been deprecated.  Use `object.destroy()` (and `core.memory.GC.free()` if applicable) instead.\n-fail_compilation/faildeleteaa.d(12): Error: cannot delete type `int`\n+fail_compilation/faildeleteaa.d(11): Error: The `delete` keyword is obsolete.  Use `object.destroy()` (and `core.memory.GC.free()` if applicable) instead.\n ---\n */\n "}, {"sha": "6d3b223db0e02d4c73e9b80e1e889ee6b9c38e89", "filename": "gcc/testsuite/gdc.test/fail_compilation/ice10727a.d", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fice10727a.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fice10727a.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fice10727a.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -4,6 +4,8 @@\n TEST_OUTPUT:\n ---\n fail_compilation/imports/foo10727a.d(34): Error: undefined identifier `Frop`\n+fail_compilation/imports/foo10727a.d(26): Error: template instance `foo10727a.CirBuff!(Foo)` error instantiating\n+fail_compilation/imports/foo10727a.d(31):        instantiated from here: `Bar!(Foo)`\n ---\n */\n "}, {"sha": "4a59d5ce6b5c498eff8c846d0f285c9bba7cb961", "filename": "gcc/testsuite/gdc.test/fail_compilation/ice10727b.d", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fice10727b.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fice10727b.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fice10727b.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -4,6 +4,8 @@\n TEST_OUTPUT:\n ---\n fail_compilation/imports/foo10727b.d(25): Error: undefined identifier `Frop`\n+fail_compilation/imports/foo10727b.d(17): Error: template instance `foo10727b.CirBuff!(Foo)` error instantiating\n+fail_compilation/imports/foo10727b.d(22):        instantiated from here: `Bar!(Foo)`\n ---\n */\n "}, {"sha": "ea44eae7838db9aecf13b2c28603724c332187ba", "filename": "gcc/testsuite/gdc.test/fail_compilation/ice11968.d", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fice11968.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fice11968.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fice11968.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -1,8 +1,7 @@\n /*\n TEST_OUTPUT:\n ----\n-fail_compilation/ice11968.d(9): Deprecation: The `delete` keyword has been deprecated.  Use `object.destroy()` (and `core.memory.GC.free()` if applicable) instead.\n-fail_compilation/ice11968.d(9): Error: cannot modify string literal `\"fail_compilation$?:windows=\\\\|/$ice11968.d\"`\n+fail_compilation/ice11968.d(8): Error: The `delete` keyword is obsolete.  Use `object.destroy()` (and `core.memory.GC.free()` if applicable) instead.\n ----\n */\n "}, {"sha": "253025cdc7a3be754899d4705ac81a3105dd7639", "filename": "gcc/testsuite/gdc.test/fail_compilation/ice18753.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fice18753.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fice18753.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fice18753.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -14,7 +14,7 @@ struct ChunkByImpl\n {\n     struct Group\n     { }\n-    \n+\n     static assert(isForwardRange!Group);\n }\n "}, {"sha": "6569d4c22398772d76aa598f57dc45b77f3cda05", "filename": "gcc/testsuite/gdc.test/fail_compilation/lexer1.d", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Flexer1.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Flexer1.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Flexer1.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -10,10 +10,10 @@ fail_compilation/lexer1.d(34): Error: declaration expected, not `0.1L`\n fail_compilation/lexer1.d(35): Error: declaration expected, not `0.1i`\n fail_compilation/lexer1.d(36): Error: declaration expected, not `0.1fi`\n fail_compilation/lexer1.d(37): Error: declaration expected, not `0.1Li`\n-fail_compilation/lexer1.d(38): Error: declaration expected, not `32U`\n+fail_compilation/lexer1.d(38): Error: declaration expected, not `' '`\n fail_compilation/lexer1.d(39): Error: declaration expected, not `55295U`\n fail_compilation/lexer1.d(40): Error: declaration expected, not `65536U`\n-fail_compilation/lexer1.d(41): Error: declaration expected, not `\"ab\\\\c\\\"\\u1234a\\U00011100a\"d`\n+fail_compilation/lexer1.d(41): Error: declaration expected, not `\"ab\\\\c\\\"\\u1234a\\U00011100a\\0ab\"d`\n fail_compilation/lexer1.d(43): Error: declaration expected, not `module`\n fail_compilation/lexer1.d(45): Error: escape hex sequence has 1 hex digits instead of 2\n fail_compilation/lexer1.d(46): Error: undefined escape hex sequence \\xG"}, {"sha": "5a8af977227b242f31d38bd41c524447e2cd64f4", "filename": "gcc/testsuite/gdc.test/fail_compilation/no_Throwable.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fno_Throwable.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fno_Throwable.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fno_Throwable.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -1,4 +1,4 @@\n-/* \n+/*\n DFLAGS:\n REQUIRED_ARGS: -c\n EXTRA_SOURCES: extra-files/minimal/object.d"}, {"sha": "a55332a4fe8c5e4bd40df451591d9d22d09b1817", "filename": "gcc/testsuite/gdc.test/fail_compilation/no_TypeInfo.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fno_TypeInfo.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fno_TypeInfo.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fno_TypeInfo.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -1,4 +1,4 @@\n-/* \n+/*\n DFLAGS:\n REQUIRED_ARGS: -c\n EXTRA_SOURCES: extra-files/minimal/object.d"}, {"sha": "8f18ec5c30dad47579238326d694a6e7cae4c283", "filename": "gcc/testsuite/gdc.test/fail_compilation/nogc1.d", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fnogc1.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fnogc1.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fnogc1.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -63,12 +63,9 @@ fail_compilation/nogc1.d(55): Error: cannot use `new` in `@nogc` function `nogc1\n /*\n TEST_OUTPUT:\n ---\n-fail_compilation/nogc1.d(76): Deprecation: The `delete` keyword has been deprecated.  Use `object.destroy()` (and `core.memory.GC.free()` if applicable) instead.\n-fail_compilation/nogc1.d(76): Error: cannot use `delete` in `@nogc` function `nogc1.testDelete`\n-fail_compilation/nogc1.d(77): Deprecation: The `delete` keyword has been deprecated.  Use `object.destroy()` (and `core.memory.GC.free()` if applicable) instead.\n-fail_compilation/nogc1.d(77): Error: cannot use `delete` in `@nogc` function `nogc1.testDelete`\n-fail_compilation/nogc1.d(78): Deprecation: The `delete` keyword has been deprecated.  Use `object.destroy()` (and `core.memory.GC.free()` if applicable) instead.\n-fail_compilation/nogc1.d(78): Error: cannot use `delete` in `@nogc` function `nogc1.testDelete`\n+fail_compilation/nogc1.d(73): Error: The `delete` keyword is obsolete.  Use `object.destroy()` (and `core.memory.GC.free()` if applicable) instead.\n+fail_compilation/nogc1.d(74): Error: The `delete` keyword is obsolete.  Use `object.destroy()` (and `core.memory.GC.free()` if applicable) instead.\n+fail_compilation/nogc1.d(75): Error: The `delete` keyword is obsolete.  Use `object.destroy()` (and `core.memory.GC.free()` if applicable) instead.\n ---\n */\n @nogc void testDelete(int* p, Object o, S1* s)"}, {"sha": "7bb2fa9ab48890cb417e02e7db2bae2dd03218f1", "filename": "gcc/testsuite/gdc.test/fail_compilation/noreturn2.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fnoreturn2.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fnoreturn2.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fnoreturn2.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -93,7 +93,7 @@ auto returnVoid3(int i)\n TEST_OUTPUT:\n ---\n fail_compilation/noreturn2.d(104): Error: `object.Exception` is thrown but not caught\n-fail_compilation/noreturn2.d(100): Error: `nothrow` function `noreturn2.doesNestedThrow` may throw\n+fail_compilation/noreturn2.d(100): Error: function `noreturn2.doesNestedThrow` may throw but is marked as `nothrow`\n ---\n +/\n "}, {"sha": "1e152f54d14886bcd41549c78b5e7a3986c17203", "filename": "gcc/testsuite/gdc.test/fail_compilation/scope_type.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fscope_type.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fscope_type.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fscope_type.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -2,7 +2,7 @@\n REQUIRED_ARGS: -de\n TEST_OUTPUT:\n ---\n-fail_compilation/scope_type.d(11): Deprecation: `scope` as a type constraint is deprecated.  Use `scope` at the usage site.\n+fail_compilation/scope_type.d(11): Error: `scope` as a type constraint is obsolete.  Use `scope` at the usage site.\n ---\n */\n "}, {"sha": "a62eb864a5446743ff101a46d721908a988ad646", "filename": "gcc/testsuite/gdc.test/fail_compilation/test12228.d", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest12228.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest12228.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest12228.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -1,10 +1,10 @@\n /*\n TEST_OUTPUT:\n ---\n-fail_compilation/test12228.d(13): Error: Using `this` as a type is obsolete. Use `typeof(this)` instead\n+fail_compilation/test12228.d(13): Error: undefined identifier `this`, did you mean `typeof(this)`?\n fail_compilation/test12228.d(18): Error: no property `x` for type `object.Object`\n-fail_compilation/test12228.d(19): Error: Using `super` as a type is obsolete. Use `typeof(super)` instead\n-fail_compilation/test12228.d(20): Error: Using `super` as a type is obsolete. Use `typeof(super)` instead\n+fail_compilation/test12228.d(19): Error: undefined identifier `super`, did you mean `typeof(super)`?\n+fail_compilation/test12228.d(20): Error: undefined identifier `super`, did you mean `typeof(super)`?\n ---\n */\n "}, {"sha": "6d6c51e09fa5b9c45e1b4d072bbcb5b72f777c4a", "filename": "gcc/testsuite/gdc.test/fail_compilation/test16195.d", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest16195.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest16195.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest16195.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -1,8 +1,7 @@\n /*\n  * TEST_OUTPUT:\n ---\n-fail_compilation/test16195.d(14): Deprecation: The `delete` keyword has been deprecated.  Use `object.destroy()` (and `core.memory.GC.free()` if applicable) instead.\n-fail_compilation/test16195.d(14): Error: `delete p` is not `@safe` but is used in `@safe` function `test`\n+fail_compilation/test16195.d(13): Error: The `delete` keyword is obsolete.  Use `object.destroy()` (and `core.memory.GC.free()` if applicable) instead.\n ---\n  */\n "}, {"sha": "e73cca697fdbf7df5253b18d3513348256301e54", "filename": "gcc/testsuite/gdc.test/fail_compilation/test17307.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest17307.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest17307.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest17307.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -1,4 +1,4 @@\n-/* \n+/*\n TEST_OUTPUT:\n ---\n fail_compilation/test17307.d(9): Error: anonymous struct can only be a part of an aggregate, not module `test17307`"}, {"sha": "74c5384298f75c87dad77cb2c3b7e401c7a2417e", "filename": "gcc/testsuite/gdc.test/fail_compilation/test20245.d", "status": "modified", "additions": 50, "deletions": 3, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest20245.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest20245.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest20245.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -2,15 +2,23 @@\n REQUIRED_ARGS: -preview=dip1000\n TEST_OUTPUT:\n ---\n-fail_compilation/test20245.d(14): Error: scope variable `a` may not be returned\n-fail_compilation/test20245.d(18): Error: cannot take address of `scope` parameter `x` in `@safe` function `foo`\n-fail_compilation/test20245.d(33): Error: reference to local variable `price` assigned to non-scope `this.minPrice`\n+fail_compilation/test20245.d(20): Error: reference to local variable `x` assigned to non-scope parameter `ptr` calling test20245.escape\n+fail_compilation/test20245.d(21): Error: copying `&x` into allocated memory escapes a reference to parameter variable `x`\n+fail_compilation/test20245.d(22): Error: scope variable `a` may not be returned\n+fail_compilation/test20245.d(26): Error: cannot take address of `scope` parameter `x` in `@safe` function `foo`\n+fail_compilation/test20245.d(32): Error: reference to local variable `x` assigned to non-scope parameter `ptr` calling test20245.escape\n+fail_compilation/test20245.d(33): Error: copying `&x` into allocated memory escapes a reference to parameter variable `x`\n+fail_compilation/test20245.d(49): Error: reference to local variable `price` assigned to non-scope `this.minPrice`\n+fail_compilation/test20245.d(68): Error: reference to local variable `this` assigned to non-scope parameter `msg` calling object.Exception.this\n+fail_compilation/test20245.d(88): Error: reference to local variable `this` assigned to non-scope parameter `content` calling test20245.listUp\n ---\n */\n \n // https://issues.dlang.org/show_bug.cgi?id=20245\n @safe int* foo(ref int x) {\n     int* a = &x;\n+    escape(&x);\n+    auto b = [&x];\n     return a;\n }\n \n@@ -21,9 +29,17 @@ fail_compilation/test20245.d(33): Error: reference to local variable `price` ass\n \n @safe int* foo(return ref int x) {\n     int* a = &x;\n+    escape(&x);\n+    auto b = [&x];\n     return a;\n }\n \n+int* gPtr;\n+@safe void escape(int* ptr)\n+{\n+    gPtr = ptr;\n+}\n+\n // https://issues.dlang.org/show_bug.cgi?id=21212\n class MinPointerRecorder\n {\n@@ -41,3 +57,34 @@ void main() @safe\n     () { ulong[1000] stomp = 13; } ();\n     auto x = *r.minPrice; // \"13\"\n }\n+\n+// https://issues.dlang.org/show_bug.cgi?id=22782\n+struct DontDoThis\n+{\n+    immutable char[12] content;\n+    @safe this(char ch)\n+    {\n+        content[] = ch;\n+        throw new Exception(content[]);\n+    }\n+}\n+\n+void main1() @safe\n+{\n+    DontDoThis('a');\n+}\n+\n+// https://issues.dlang.org/show_bug.cgi?id=22783\n+const(char)* charPtr;\n+\n+// argument is not, or should not be scope\n+auto listUp(const(char)* content) {charPtr = content;}\n+\n+struct DontDoThis2\n+{\n+    char content;\n+    @safe escape()\n+    {\n+        listUp(&content);\n+    }\n+}"}, {"sha": "3e9f747e911d1a0f32e894eebcf70e4cfa941454", "filename": "gcc/testsuite/gdc.test/fail_compilation/test22145.d", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest22145.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest22145.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest22145.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -0,0 +1,28 @@\n+/* TEST_OUTPUT:\n+---\n+fail_compilation/test22145.d(115): Error: scope variable `x` assigned to non-scope `global`\n+---\n+ */\n+\n+// issues.dlang.org/show_bug.cgi?id=22145\n+\n+#line 100\n+\n+struct S\n+{\n+    int opApply (scope int delegate (scope int* ptr) @safe dg) @safe\n+    {\n+        return 0;\n+    }\n+}\n+\n+void test() @safe\n+{\n+    static int* global;\n+    S s;\n+    foreach (scope int* x; s)\n+    {\n+        global = x;\n+    }\n+}\n+"}, {"sha": "ee500bcce14ad77f20474d630f9df488652c0973", "filename": "gcc/testsuite/gdc.test/fail_compilation/test22686.d", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest22686.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest22686.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest22686.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -0,0 +1,21 @@\n+// https://issues.dlang.org/show_bug.cgi?id=22686\n+\n+/*\n+TEST_OUTPUT:\n+---\n+fail_compilation/test22686.d(15): Error: `this` is only defined in non-static member functions, not `create`\n+---\n+*/\n+\n+struct S\n+{\n+    int[] data;\n+    static auto create()\n+    {\n+        auto self = &this;\n+        return {\n+            assert(data.length);\n+            return self;\n+        };\n+    }\n+}"}, {"sha": "f4b825fb9b9ba1a6cb7ecff31f7af3a7fd360a69", "filename": "gcc/testsuite/gdc.test/runnable/b18034.d", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Fb18034.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Fb18034.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Fb18034.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -3,22 +3,22 @@ import core.simd;\n \n static if (__traits(compiles, { void16 a; ushort8 b; }))\n {\n-    void check(void16 a) \n+    void check(void16 a)\n     {\n-        foreach (x; (cast(ushort8)a).array) \n+        foreach (x; (cast(ushort8)a).array)\n         {\n \t        assert(x == 1);\n         }\n     }\n \n-    void make(ushort x) \n+    void make(ushort x)\n     {\n         ushort8 v = ushort8(x);\n         check(v);\n     }\n \n-    void main() \n-    {\t\n+    void main()\n+    {\n         make(1);\n     }\n }"}, {"sha": "82682f7e696a3a4cb2fd870ecee020241a2fab01", "filename": "gcc/testsuite/gdc.test/runnable/imports/a15079.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Fimports%2Fa15079.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Fimports%2Fa15079.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Fimports%2Fa15079.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -41,7 +41,7 @@ void destroy(T)(ref T obj) if (is(T == struct))\n     _destructRecurse(obj);\n     () @trusted {\n         auto buf = (cast(ubyte*) &obj)[0 .. T.sizeof];\n-        auto init = cast(ubyte[])typeid(T).init();\n+        const init = cast(ubyte[]) __traits(initSymbol, T);\n         if (init.ptr is null) // null ptr means initialize to 0s\n             buf[] = 0;\n         else"}, {"sha": "f3910cb5f0d7b6ff14bec9e23cdc65b4613eef58", "filename": "gcc/testsuite/gdc.test/runnable/imports/a19a.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Fimports%2Fa19a.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Fimports%2Fa19a.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Fimports%2Fa19a.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -11,5 +11,5 @@ struct TemplatedStruct(Param)\n \n void foo()\n {\n-        alias TemplatedStruct!(Dummy) X;        \n+        alias TemplatedStruct!(Dummy) X;\n }"}, {"sha": "677282e8ef6416d2bfb03452cee2052913d33365", "filename": "gcc/testsuite/gdc.test/runnable/imports/link12144a.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Fimports%2Flink12144a.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Fimports%2Flink12144a.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Fimports%2Flink12144a.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -28,7 +28,7 @@ void fun()()\n     { alias P = S3*; auto p = new P; }\n     { S4[int] aa; auto b = (aa == aa); }\n     { S5[] a; a.length = 10; }\n-    { S6[] a; delete a; }\n+    { S6[] a; destroy(a); }\n     { S7[] a = []; }\n     { S8[] a = [S8.init]; }\n     { S9[int] aa = [1:S9.init]; }"}, {"sha": "abe4aee1995a7685ebd47059ad0510f07cc5e61d", "filename": "gcc/testsuite/gdc.test/runnable/imports/test11745b.d", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Fimports%2Ftest11745b.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Fimports%2Ftest11745b.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Fimports%2Ftest11745b.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -1,17 +1,17 @@\n module imports.test11745b;\n \n-unittest \n+unittest\n {\n-\t\t\n+\n }\n \n-private unittest \n+private unittest\n {\n-\t\n+\n }\n \n private:\n-unittest \n+unittest\n {\n-\t\n+\n }"}, {"sha": "d5cc142fe88a03ec84fe36b5579f741eee9bcfb7", "filename": "gcc/testsuite/gdc.test/runnable/imports/test46c.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Fimports%2Ftest46c.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Fimports%2Ftest46c.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Fimports%2Ftest46c.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -3,5 +3,5 @@ module imports.test46c;\n class C(T)\n {\n     void foo() { }\n-} \n+}\n "}, {"sha": "eca5727873964a281d8c0e15b99fef4ae575ea57", "filename": "gcc/testsuite/gdc.test/runnable/inline7625.d", "status": "added", "additions": 185, "deletions": 0, "changes": 185, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Finline7625.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Finline7625.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Finline7625.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -0,0 +1,185 @@\n+// REQUIRED_ARGS: -inline\n+\n+/***************************************************/\n+\n+pragma(inline, true)\n+{\n+    int foo1(int v)\n+    {\n+        return bar1(2 * v);\n+    }\n+\n+    int bar1(int a)\n+    {\n+        if (a > 0)\n+            return 1;\n+        else\n+            return baz1(a);\n+    }\n+}\n+\n+int baz1(int a)\n+{\n+    if (a > 0)\n+        throw new Exception(\"a > 0\");\n+    return a - 1;\n+}\n+\n+// ---\n+\n+pragma(inline, true)\n+{\n+    int foo2(int v)\n+    {\n+        return bar2(2 * v);\n+    }\n+\n+    int bar2(int a)\n+    {\n+        if (a > 0)\n+            return 1;\n+        // else\n+            return baz2(a);\n+    }\n+}\n+\n+int baz2(int a)\n+{\n+    if (a > 0)\n+        throw new Exception(\"a > 0\");\n+    return a - 1;\n+}\n+\n+// ---\n+\n+pragma(inline, true)\n+{\n+    int foo3(int v)\n+    {\n+        return bar3(2 * v);\n+    }\n+\n+    int bar3(int a)\n+    {\n+        if (a > 0)\n+            a = 1;\n+        else\n+            return baz3(a);\n+        return a;\n+    }\n+}\n+\n+int baz3(int a)\n+{\n+    if (a > 0)\n+        throw new Exception(\"a > 0\");\n+    return a - 1;\n+}\n+\n+void test7625a()\n+{\n+    assert(foo1(1) ==  1);\n+    assert(foo1(0) == -1);\n+    assert(foo2(1) ==  1);\n+    assert(foo2(0) == -1);\n+    assert(foo3(1) ==  1);\n+    assert(foo3(0) == -1);\n+}\n+\n+/***************************************************/\n+\n+@safe pragma(inline, true)\n+{\n+    int tembo(int x, int y)\n+    {\n+        if (y == 0)\n+            return 0;\n+        x++;\n+        return x / y;\n+    }\n+    int pembo(int x, int y)\n+    {\n+        if (y == 0)\n+            return 0;\n+        else\n+        {\n+            x++;\n+            return x / y;\n+        }\n+    }\n+\n+    int twiga(int x, int y, int z)\n+    {\n+        auto w = tembo(x, y);\n+        return w * z;\n+    }\n+\n+    int simba(int x, int y, int z)\n+    {\n+        auto w = pembo(x, y);\n+        return w * z;\n+    }\n+}\n+\n+void test7625b()\n+{\n+    assert(twiga(5, 3, 4) == 8);\n+    assert(twiga(5, 0, 4) == 0);\n+\n+    assert(simba(5, 3, 4) == 8);\n+    assert(simba(5, 0, 4) == 0);\n+}\n+\n+/***************************************************/\n+\n+@safe pragma(inline, true)\n+{\n+    bool inlineMe15483a(bool left)\n+    {\n+        if (left)\n+            return true;\n+\n+        return false;\n+    }\n+\n+    bool inlineMe15483b(bool left)\n+    {\n+        if (left)\n+            return true;\n+\n+        static if (false)\n+        {\n+            /* https://issues.dlang.org/show_bug.cgi?id=15483\n+               Even though it does absolutely nothing,\n+               the mere presence of this block prevents inlining\n+               of this function.\n+            */\n+        }\n+\n+        return false;\n+    }\n+}\n+\n+int foo15483()\n+{\n+    auto r1 = inlineMe15483a(true);\n+    auto r2 = inlineMe15483b(true); // OK <- NG\n+\n+    return 128;\n+}\n+\n+void test15483()\n+{\n+    // Prevent inlining of test function call.\n+    auto fp = &foo15483;\n+    assert(fp() == 128);\n+}\n+\n+/***************************************************/\n+\n+void main()\n+{\n+    test7625a();\n+    test7625b();\n+    test15483();\n+}"}, {"sha": "a53c5ee2b430b40f9def8327012ffbb8043d036c", "filename": "gcc/testsuite/gdc.test/runnable/interface.d", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Finterface.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Finterface.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Finterface.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -1,11 +1,3 @@\n-/*\n-TEST_OUTPUT:\n----\n-runnable/interface.d(41): Deprecation: The `delete` keyword has been deprecated.  Use `object.destroy()` (and `core.memory.GC.free()` if applicable) instead.\n-runnable/interface.d(55): Deprecation: The `delete` keyword has been deprecated.  Use `object.destroy()` (and `core.memory.GC.free()` if applicable) instead.\n----\n-*/\n-\n import core.stdc.stdio;\n \n /*******************************************/\n@@ -38,7 +30,7 @@ void test1()\n     IO io = new IO();\n     printf(\"io = %p\\n\", io);\n     foo(io, io);\n-    delete io;\n+    destroy(io);\n }\n \n /*******************************************/\n@@ -52,7 +44,7 @@ class C : I\n void test2()\n {\n     I i = new C();\n-    delete i;\n+    destroy(i);\n \n   {\n     scope I j = new C();"}, {"sha": "fabbbfd4bfc429ef2dc83111c1838103af33a894", "filename": "gcc/testsuite/gdc.test/runnable/interface2.d", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Finterface2.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Finterface2.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Finterface2.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -1,11 +1,4 @@\n // PERMUTE_ARGS:\n-/*\n-TEST_OUTPUT:\n----\n-runnable/interface2.d(47): Deprecation: The `delete` keyword has been deprecated.  Use `object.destroy()` (and `core.memory.GC.free()` if applicable) instead.\n-runnable/interface2.d(98): Deprecation: The `delete` keyword has been deprecated.  Use `object.destroy()` (and `core.memory.GC.free()` if applicable) instead.\n----\n-*/\n \n extern(C) int printf(const char*, ...);\n \n@@ -44,7 +37,7 @@ void test1()\n     printf(\"cast(Bar)f = %p\\n\", b2);\n     assert(b is b2);\n \n-    delete f;\n+    destroy(f);\n }\n \n /*******************************************************/\n@@ -95,7 +88,7 @@ class E3 : D3, C3\n void test3()\n {\n     C3 c = new E3();\n-    delete c;\n+    destroy(c);\n }\n \n "}, {"sha": "4d02a924a21400d285d65e6c11163bbbc8fac471", "filename": "gcc/testsuite/gdc.test/runnable/interpret.d", "status": "modified", "additions": 73, "deletions": 18, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Finterpret.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Finterpret.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Finterpret.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -4,14 +4,6 @@ TEST_OUTPUT:\n true\n g\n &Test109S(&Test109S(<recursion>))\n-runnable/interpret.d(3197): Deprecation: The `delete` keyword has been deprecated.  Use `object.destroy()` (and `core.memory.GC.free()` if applicable) instead.\n-runnable/interpret.d(3199): Deprecation: The `delete` keyword has been deprecated.  Use `object.destroy()` (and `core.memory.GC.free()` if applicable) instead.\n-runnable/interpret.d(3202): Deprecation: The `delete` keyword has been deprecated.  Use `object.destroy()` (and `core.memory.GC.free()` if applicable) instead.\n-runnable/interpret.d(3205): Deprecation: The `delete` keyword has been deprecated.  Use `object.destroy()` (and `core.memory.GC.free()` if applicable) instead.\n-runnable/interpret.d(3206): Deprecation: The `delete` keyword has been deprecated.  Use `object.destroy()` (and `core.memory.GC.free()` if applicable) instead.\n-runnable/interpret.d(3212): Deprecation: The `delete` keyword has been deprecated.  Use `object.destroy()` (and `core.memory.GC.free()` if applicable) instead.\n-runnable/interpret.d(3213): Deprecation: The `delete` keyword has been deprecated.  Use `object.destroy()` (and `core.memory.GC.free()` if applicable) instead.\n-runnable/interpret.d(3216): Deprecation: The `delete` keyword has been deprecated.  Use `object.destroy()` (and `core.memory.GC.free()` if applicable) instead.\n tfoo\n tfoo\n Crash!\n@@ -3187,33 +3179,96 @@ auto test110 = [Test110f(1, Test110s(1, 2, 3))];\n \n /************************************************/\n // https://issues.dlang.org/show_bug.cgi?id=6907\n+// FIXME: Shouldn't this go in core.memory now that `delete` has been removed?\n \n int test6907()\n {\n+    import core.memory : __delete;\n+\n     int dtor1;\n     class C { ~this() { ++dtor1; } }\n \n     // delete on Object\n-    { Object o; delete o; }\n+    { Object o; if (!__ctfe) __delete(o); }\n     { scope o = new Object(); }\n-    { Object o = new Object(); delete o; }\n+    { Object o = new Object(); if (!__ctfe) __delete(o); }\n \n     // delete on C\n-    { C c; delete c; }\n-    { { scope c = new C(); } assert(dtor1 == 1); }\n-    { { scope Object o = new C(); } assert(dtor1 == 2); }\n-    { C c = new C(); delete c; assert(dtor1 == 3); }\n-    { Object o = new C(); delete o; assert(dtor1 == 4); }\n+    {\n+        C c;\n+        if (!__ctfe)\n+            __delete(c);\n+    }\n+    {\n+        { scope c = new C(); }\n+        assert(dtor1 == 1);\n+    }\n+    {\n+        { scope Object o = new C(); }\n+        assert(dtor1 == 2);\n+    }\n+    {\n+        C c = new C();\n+        if (__ctfe)\n+        {\n+            c.__dtor();\n+            c = null;\n+        }\n+        else\n+            __delete(c);\n+        assert(dtor1 == 3);\n+    }\n+    {\n+        Object o = new C();\n+        if (__ctfe)\n+        {\n+            (cast(C)o).__dtor();\n+            o = null;\n+        }\n+        else\n+            __delete(o);\n+        assert(dtor1 == 4);\n+    }\n \n     int dtor2;\n     struct S1 { ~this() { ++dtor2; } }\n \n     // delete on S1\n-    { S1* p; delete p; }\n-    { S1* p = new S1(); delete p; assert(dtor2 == 1); }\n+    {\n+        S1* p;\n+        // https://issues.dlang.org/show_bug.cgi?id=22779\n+        // Uncomment after druntime fix\n+        version (none)\n+        {\n+            if (!__ctfe)\n+                __delete(p);\n+        }\n+    }\n+    {\n+        S1* p = new S1();\n+        if (__ctfe) \n+        {\n+            (*p).__dtor();\n+            destroy(p);\n+        }\n+        else\n+            __delete(p);\n+        assert(dtor2 == 1);\n+    }\n \n     // delete on S1[]\n-    { S1[] a = [S1(), S1()]; delete a; assert(dtor2 == 3); }\n+    {\n+        S1[] a = [S1(), S1()];\n+        if (__ctfe)\n+        {\n+            a[1].__dtor();\n+            a[0].__dtor();\n+            destroy(a);\n+        }\n+        else\n+            __delete(a);\n+        assert(dtor2 == 3);\n+    }\n \n     return 1;\n }"}, {"sha": "90925563e15215366dd8246d9ddac89a98eef804", "filename": "gcc/testsuite/gdc.test/runnable/link12144.d", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Flink12144.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Flink12144.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Flink12144.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -1,11 +1,5 @@\n // COMPILE_SEPARATELY: -g\n // EXTRA_SOURCES: imports/link12144a.d\n-/*\n-TEST_OUTPUT:\n----\n-runnable/imports/link12144a.d(31): Deprecation: The `delete` keyword has been deprecated.  Use `object.destroy()` (and `core.memory.GC.free()` if applicable) instead.\n----\n-*/\n \n import imports.link12144a;\n "}, {"sha": "ef52dfbd7f39d61596613f7dc647ecfd6a53524a", "filename": "gcc/testsuite/gdc.test/runnable/link15017.d", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Flink15017.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Flink15017.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Flink15017.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -1,11 +1,5 @@\n // COMPILE_SEPARATELY:\n // EXTRA_SOURCES: imports/std15017variant.d\n-/*\n-TEST_OUTPUT:\n----\n-runnable/link15017.d(48): Deprecation: The `delete` keyword has been deprecated.  Use `object.destroy()` (and `core.memory.GC.free()` if applicable) instead.\n----\n-*/\n \n import imports.std15017variant;\n \n@@ -45,7 +39,7 @@ void test()\n \n     // OK <- in DeleteExp::semantic\n     Variant10* p10;\n-    delete p10;\n+    destroy(p10);\n     static assert(Variant10.__dtor.mangleof == \"_D7imports15std15017variant__T8VariantNVki10ZQp6__dtorMFNaNbNiNfZv\");\n }\n "}, {"sha": "d36d3f1ec0e08857574f2cbc0ff0eb51fe86c003", "filename": "gcc/testsuite/gdc.test/runnable/mixin1.d", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Fmixin1.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Fmixin1.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Fmixin1.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -1,9 +1,4 @@\n /*\n-TEST_OUTPUT:\n----\n-runnable/mixin1.d(948): Deprecation: The `delete` keyword has been deprecated.  Use `object.destroy()` (and `core.memory.GC.free()` if applicable) instead.\n----\n-\n RUN_OUTPUT:\n ---\n Foo3.func()\n@@ -945,7 +940,7 @@ class Outer38\n void test38()\n {\n     Outer38 o = new Outer38();\n-    delete o;\n+    destroy(o);\n     assert(Outer38.c == 3);\n }\n "}, {"sha": "8ba7a0c44c261a936d17b56024521b12eefd71dd", "filename": "gcc/testsuite/gdc.test/runnable/newdel.d", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Fnewdel.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Fnewdel.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Fnewdel.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -1,10 +1,4 @@\n // PERMUTE_ARGS:\n-/*\n-TEST_OUTPUT:\n----\n-runnable/newdel.d(46): Deprecation: The `delete` keyword has been deprecated.  Use `object.destroy()` (and `core.memory.GC.free()` if applicable) instead.\n----\n-*/\n \n import core.stdc.stdio;\n import core.stdc.stdlib;\n@@ -43,7 +37,7 @@ void test1()\n     assert(f.d == 56);\n     assert(Foo.flags == 0);\n \n-    delete f;\n+    destroy(f);\n     assert(Foo.flags == 1);\n }\n "}, {"sha": "e6b3238149e7fe6885c8ee22651f69e14792791f", "filename": "gcc/testsuite/gdc.test/runnable/sdtor.d", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Fsdtor.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Fsdtor.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Fsdtor.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -3,19 +3,13 @@\n /*\n TEST_OUTPUT:\n ---\n-runnable/sdtor.d(36): Deprecation: The `delete` keyword has been deprecated.  Use `object.destroy()` (and `core.memory.GC.free()` if applicable) instead.\n-runnable/sdtor.d(59): Deprecation: The `delete` keyword has been deprecated.  Use `object.destroy()` (and `core.memory.GC.free()` if applicable) instead.\n-runnable/sdtor.d(93): Deprecation: The `delete` keyword has been deprecated.  Use `object.destroy()` (and `core.memory.GC.free()` if applicable) instead.\n-runnable/sdtor.d(117): Deprecation: The `delete` keyword has been deprecated.  Use `object.destroy()` (and `core.memory.GC.free()` if applicable) instead.\n-runnable/sdtor.d(143): Deprecation: The `delete` keyword has been deprecated.  Use `object.destroy()` (and `core.memory.GC.free()` if applicable) instead.\n-runnable/sdtor.d(177): Deprecation: The `delete` keyword has been deprecated.  Use `object.destroy()` (and `core.memory.GC.free()` if applicable) instead.\n-runnable/sdtor.d(203): Deprecation: The `delete` keyword has been deprecated.  Use `object.destroy()` (and `core.memory.GC.free()` if applicable) instead.\n-runnable/sdtor.d(276): Deprecation: The `delete` keyword has been deprecated.  Use `object.destroy()` (and `core.memory.GC.free()` if applicable) instead.\n S7353\n ---\n */\n \n import core.vararg;\n+// FIXME: Shouldn't tests that use this go in core.memory now that `delete` has been removed?\n+import core.memory : __delete;\n \n extern (C) int printf(const(char*) fmt, ...) nothrow;\n \n@@ -33,7 +27,7 @@ struct S1\n void test1()\n {\n     S1* s = new S1();\n-    delete s;\n+    __delete(s);\n     assert(sdtor == 1);\n }\n \n@@ -56,7 +50,7 @@ void test3()\n {\n     T3* s = new T3();\n     s.s.a = 3;\n-    delete s;\n+    __delete(s);\n     assert(sdtor3 == 1);\n }\n \n@@ -90,7 +84,7 @@ void test4()\n {\n     T4* s = new T4();\n     s.s.a = 4;\n-    delete s;\n+    __delete(s);\n     assert(sdtor4 == 3);\n }\n \n@@ -114,7 +108,7 @@ struct T5\n void test5()\n {\n     T5* s = new T5();\n-    delete s;\n+    __delete(s);\n     assert(sdtor5 == 2);\n }\n \n@@ -140,7 +134,7 @@ class T6\n void test6()\n {\n     T6 s = new T6();\n-    delete s;\n+    __delete(s);\n     assert(sdtor6 == 2);\n }\n \n@@ -174,7 +168,7 @@ struct T7\n void test7()\n {\n     T7* s = new T7();\n-    delete s;\n+    __delete(s);\n     assert(sdtor7 == 4);\n }\n \n@@ -200,7 +194,7 @@ void test8()\n     s[0].c = 2;\n     s[1].c = 1;\n     s[2].c = 0;\n-    delete s;\n+    __delete(s);\n     assert(sdtor8 == 3);\n }\n \n@@ -273,7 +267,7 @@ class T11\n void test11()\n {\n     T11 s = new T11();\n-    delete s;\n+    __delete(s);\n     assert(sdtor11 == 2);\n }\n "}, {"sha": "7e6dc041924330ffa040123db1dab2df85578069", "filename": "gcc/testsuite/gdc.test/runnable/test11934.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Ftest11934.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Ftest11934.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Ftest11934.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -5,7 +5,7 @@ void main()\n         this(int i) { instances++; }\n         this(this) { instances++; }\n         ~this() { instances--; }\n-        static size_t instances = 0;\t\n+        static size_t instances = 0;\n     }\n \n     struct Range11934"}, {"sha": "efdce0847ba06cfdb102ed09c10780fb1744bbd1", "filename": "gcc/testsuite/gdc.test/runnable/test17684.d", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Ftest17684.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Ftest17684.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Ftest17684.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -7,17 +7,17 @@ struct StructField(T)\n struct StructProperty(T)\n {\n     static T Field;\n-\t\n+\n \tstatic @property T property()\n \t{\n-\t\treturn Field;\t\n+\t\treturn Field;\n \t}\n-\t\n+\n \tstatic @property void property(T value)\n \t{\n-\t\tField = value;\t\n+\t\tField = value;\n \t}\n-\t\n+\n     static alias property this;\n }\n \n@@ -30,17 +30,17 @@ class ClassField(T)\n class ClassProperty(T)\n {\n     static T Field;\n-\t\n+\n \tstatic @property T property()\n \t{\n-\t\treturn Field;\t\n+\t\treturn Field;\n \t}\n-\t\n+\n \tstatic @property void property(T value)\n \t{\n-\t\tField = value;\t\n+\t\tField = value;\n \t}\n-\t\n+\n     static alias property this;\n }\n "}, {"sha": "2ad60d0841466420da7d29e6704b9c2afa24469e", "filename": "gcc/testsuite/gdc.test/runnable/test17899.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Ftest17899.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Ftest17899.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Ftest17899.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -1,7 +1,7 @@\n module test17899;\n \n // Test that the ICE in 13259 does not ICE but produces correct code\n-auto dg = delegate {}; \n+auto dg = delegate {};\n \n int setme = 0;\n void delegate() bar1 = (){ setme = 1;};"}, {"sha": "5d47b06a7fe4ffff9c9eed3608111fa5f95d8536", "filename": "gcc/testsuite/gdc.test/runnable/test20.d", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Ftest20.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Ftest20.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Ftest20.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -1,9 +1,3 @@\n-/*\n-TEST_OUTPUT:\n----\n-runnable/test20.d(448): Deprecation: The `delete` keyword has been deprecated.  Use `object.destroy()` (and `core.memory.GC.free()` if applicable) instead.\n----\n-*/\n import core.vararg;\n \n extern(C) int printf(const char*, ...);\n@@ -445,7 +439,7 @@ class Buffer\n void test20()\n {\n     Buffer b = new Buffer();\n-    delete b;\n+    destroy(b);\n }\n \n /*****************************************/"}, {"sha": "8b5af24396e2182f91120d760b567de854f18800", "filename": "gcc/testsuite/gdc.test/runnable/test22136.d", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Ftest22136.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Ftest22136.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Ftest22136.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -0,0 +1,25 @@\n+\n+interface IObject\n+{\n+    size_t toHash() @trusted nothrow;\n+}\n+\n+interface Dummy {}\n+interface Bug(E) : Dummy, IObject {}\n+interface OK(E) : IObject, Dummy {}\n+\n+void main()\n+{\n+\n+    {\n+        Bug!string s;\n+        size_t t = hashOf(s);\n+    }\n+    {\n+        OK!string s;\n+        size_t t = hashOf(s);\n+    }\n+\n+    static assert(is(immutable Bug!string* : immutable IObject*));\n+    static assert(is(immutable OK!string* : immutable IObject*));\n+}"}, {"sha": "2613763e600b3f6de777b84281f3532e66e7022f", "filename": "gcc/testsuite/gdc.test/runnable/test22163.d", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Ftest22163.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Ftest22163.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Ftest22163.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -0,0 +1,13 @@\n+// https://issues.dlang.org/show_bug.cgi?id=22163\n+void fun(float[2] arr)\n+{\n+    assert(arr[0] == 10.0);\n+    assert(arr[1] == 20.0);\n+    auto dg = (int x) => arr[0];\n+}\n+\n+void main()\n+{\n+    float[2] arr = [10.0, 20.0];\n+    fun(arr);\n+}"}, {"sha": "75d54c77b0adf77217bd6c25d59f435497b24cc0", "filename": "gcc/testsuite/gdc.test/runnable/test22717.d", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Ftest22717.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Ftest22717.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Ftest22717.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -0,0 +1,31 @@\n+// PERMUTE_ARGS: -version=XopEquals\n+\n+void main()\n+{\n+    static struct S\n+    {\n+        int value;\n+\n+        version (XopEquals)\n+        {\n+            bool opEquals(const S rhs) const\n+            {\n+                assert(this.value == 42);\n+                return true;\n+            }\n+        }\n+        else\n+        {\n+            bool opEquals(const ref S rhs) const\n+            {\n+                assert(this.value == 42);\n+                return true;\n+            }\n+        }\n+    }\n+\n+    auto a = S(42);\n+    auto b = S(24);\n+    auto ti = typeid(S);\n+    assert(ti.equals(&a, &b));\n+}"}, {"sha": "8a3f9267320f1028b180604e846189052c2214cf", "filename": "gcc/testsuite/gdc.test/runnable/test4.d", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Ftest4.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Ftest4.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Ftest4.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -1,11 +1,5 @@\n // PERMUTE_ARGS:\n // REQUIRED_ARGS:\n-/*\n-TEST_OUTPUT:\n----\n-runnable/test4.d(717): Deprecation: The `delete` keyword has been deprecated.  Use `object.destroy()` (and `core.memory.GC.free()` if applicable) instead.\n----\n-*/\n \n import core.exception;\n import core.stdc.math;\n@@ -714,7 +708,7 @@ void test29()\n \n     Foo29 f = new Foo29();\n \n-    delete f;\n+    destroy(f);\n     assert(x29 == 3);\n }\n "}, {"sha": "cedd8d7009a7d1abf4f18292cf5dfa17dbc2d968", "filename": "gcc/testsuite/gdc.test/runnable/testappend.d", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Ftestappend.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Ftestappend.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Ftestappend.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -1,13 +1,5 @@\n /*\n PERMUTE_ARGS:\n-TEST_OUTPUT:\n----\n-runnable/testappend.d(54): Deprecation: The `delete` keyword has been deprecated.  Use `object.destroy()` (and `core.memory.GC.free()` if applicable) instead.\n-runnable/testappend.d(55): Deprecation: The `delete` keyword has been deprecated.  Use `object.destroy()` (and `core.memory.GC.free()` if applicable) instead.\n-runnable/testappend.d(76): Deprecation: The `delete` keyword has been deprecated.  Use `object.destroy()` (and `core.memory.GC.free()` if applicable) instead.\n-runnable/testappend.d(77): Deprecation: The `delete` keyword has been deprecated.  Use `object.destroy()` (and `core.memory.GC.free()` if applicable) instead.\n----\n-\n RUN_OUTPUT:\n ---\n Success\n@@ -51,8 +43,8 @@ int main()\n     {\n         assert(isnan(v));\n     }\n-    delete a;\n-    delete b;\n+    destroy(a);\n+    destroy(b);\n \n     a = null;\n     for (int i = 0; i < 100000; i++)\n@@ -73,8 +65,8 @@ int main()\n     {\n         assert(v == k);\n     }\n-    delete a;\n-    delete b;\n+    destroy(a);\n+    destroy(b);\n \n     test12826();\n     printf(\"Success\\n\");"}, {"sha": "502dca03c9288250c712bc16e32ca9d4a56873d2", "filename": "gcc/testsuite/gdc.test/runnable/testconst.d", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Ftestconst.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Ftestconst.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Ftestconst.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -2175,13 +2175,13 @@ void test4251b()\n     // derived class to const(base interface) in tail\n     interface I {}\n     class X : I {}\n-    static assert(!is( X[] : const(I)[] ));\n+    static assert(is( X[] : const(I)[] ));\n \n     // interface to const(base interface) in tail\n     interface J {}\n     interface K : I, J {}\n     static assert( is( K[] : const(I)[] )); // OK, runtime offset is same\n-    static assert(!is( K[] : const(J)[] )); // NG, runtime offset is different\n+    static assert(is( K[] : const(J)[] )); // !? NG, runtime offset is different\n }\n \n /************************************/"}, {"sha": "03af20710f2eebad51da1afe4fa7491578165dd5", "filename": "gcc/testsuite/gdc.test/runnable/testdstress.d", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Ftestdstress.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Ftestdstress.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Ftestdstress.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -1,10 +1,4 @@\n // PERMUTE_ARGS:\n-/*\n-TEST_OUTPUT:\n----\n-runnable/testdstress.d(666): Deprecation: The `delete` keyword has been deprecated.  Use `object.destroy()` (and `core.memory.GC.free()` if applicable) instead.\n----\n-*/\n \n module run.module_01;\n \n@@ -663,7 +657,7 @@ void test30()\n \n         assert(status30 == 1);\n \n-        delete m;   // _d_callfinalizer\n+        destroy(m);   // _d_callfinalizer\n     }\n     catch (Error e) // FinalizeError\n     {"}, {"sha": "7255595cb57d2883fb03ee23856f850da52ea06f", "filename": "gcc/testsuite/gdc.test/runnable/testptrref.d", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Ftestptrref.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Ftestptrref.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Ftestptrref.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -21,7 +21,7 @@ version(CRuntime_Microsoft)\n                                               void[] function(string name) nothrow @nogc);\n         dataSection = findImageSection(\".data\");\n     }\n-    \n+\n     void[] tlsRange;\n     static this()\n     {\n@@ -30,7 +30,7 @@ version(CRuntime_Microsoft)\n                                               void[] function() nothrow @nogc);\n         tlsRange = initTLSRanges();\n     }\n-    \n+\n     version = ptrref_supported;\n }\n else version(Win32)\n@@ -126,7 +126,7 @@ bool findDataPtr(const(void)* ptr)\n             void* addr = dataSection.ptr + *p;\n         else\n             void* addr = *p;\n-        \n+\n         if (addr == ptr)\n             return true;\n     }\n@@ -158,7 +158,7 @@ void testRefPtr()\n \n     assert(!findTlsPtr(cast(size_t*)&tlsStr)); // length\n     assert(findTlsPtr(cast(size_t*)&tlsStr + 1)); // ptr\n-    \n+\n     // monitor is manually managed\n     assert(!findDataPtr(cast(size_t*)cast(void*)Class.classinfo + 1));\n     assert(!findDataPtr(cast(size_t*)cast(void*)Class.classinfo + 1));\n@@ -167,7 +167,7 @@ void testRefPtr()\n     assert(!findTlsPtr(&arr));\n     assert(!findDataPtr(cast(size_t*)&arr + 1));\n     assert(!findTlsPtr(cast(size_t*)&arr + 1));\n-    \n+\n     assert(findDataPtr(cast(size_t*)&strArr[0] + 1)); // ptr in _DATA!\n     assert(findDataPtr(cast(size_t*)&strArr[1] + 1)); // ptr in _DATA!\n     strArr[1] = \"c\";"}, {"sha": "588911639456833868fd7a7567c5e46a578e60ea", "filename": "gcc/testsuite/gdc.test/runnable/xpostblit.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Fxpostblit.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Fxpostblit.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Fxpostblit.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -86,7 +86,7 @@ struct FieldThrow\n \n     bool throwExcept;\n     this(this)\n-    { \n+    {\n         if (throwExcept)\n         {\n             throw new Exception(\"\");"}, {"sha": "e31588948a6faf9db5588eaa9af492bcc424b0dc", "filename": "gcc/testsuite/gdc.test/runnable_cxx/cppa.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Frunnable_cxx%2Fcppa.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/gcc%2Ftestsuite%2Fgdc.test%2Frunnable_cxx%2Fcppa.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Frunnable_cxx%2Fcppa.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -469,7 +469,7 @@ extern (C++, std)\n         static if (__traits(getTargetInfo, \"cppStd\") >= 201703)\n         {\n             // std::allocator no longer derives from __gnu_cxx::new_allocator,\n-            // it derives from std::__new_allocator instead. \n+            // it derives from std::__new_allocator instead.\n             struct __new_allocator(T)\n             {\n                 alias size_type = size_t;"}, {"sha": "49f6ae282e0ea6eceb471927d7b5cc3a3ed185c5", "filename": "libphobos/libdruntime/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Flibdruntime%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Flibdruntime%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2FMERGE?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -1,4 +1,4 @@\n-dbd0c874a345438b8b4379a67525a933436d039a\n+55528bd1e963d858eaa63901fc818b957c349fbc\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/druntime repository."}, {"sha": "e5c448e00cfee10d2df5f21bc93768cee7b5880a", "filename": "libphobos/libdruntime/__builtins.di", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Flibdruntime%2F__builtins.di", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Flibdruntime%2F__builtins.di", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2F__builtins.di?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -38,3 +38,68 @@ alias __builtin_va_copy = core.stdc.stdarg.va_copy;\n /* dmd's ImportC rewrites __builtin_va_arg into an instantiation of va_arg\n  */\n alias va_arg = core.stdc.stdarg.va_arg;\n+\n+version (CRuntime_Microsoft)\n+{\n+    //https://docs.microsoft.com/en-us/cpp/cpp/int8-int16-int32-int64?view=msvc-170\n+    alias __int8 = byte;\n+    alias __int16 = short;\n+    alias __int32 = int;\n+    alias __int64 = long;\n+}\n+\n+/*********** floating point *************/\n+\n+/* https://gcc.gnu.org/onlinedocs/gcc/Other-Builtins.html\n+ */\n+\n+version (DigitalMars)\n+{\n+    double __builtin_inf()()  { return double.infinity; }\n+    float  __builtin_inff()() { return float.infinity; }\n+    real   __builtin_infl()() { return real.infinity; }\n+\n+    alias __builtin_huge_val  = __builtin_inf;\n+    alias __builtin_huge_valf = __builtin_inff;\n+    alias __builtin_huge_vall = __builtin_infl;\n+\n+    import core.stdc.math;\n+\n+    alias __builtin_fabs  = core.stdc.math.fabs;\n+    alias __builtin_fabsf = core.stdc.math.fabsf;\n+    alias __builtin_fabsl = core.stdc.math.fabsl;\n+\n+    ushort __builtin_bswap16()(ushort value)\n+    {\n+        import core.bitop;\n+        return core.bitop.byteswap(value);\n+    }\n+\n+    uint __builtin_bswap32()(uint value)\n+    {\n+        import core.bitop;\n+        return core.bitop.bswap(value);\n+    }\n+\n+    ulong  __builtin_bswap64()(ulong value)\n+    {\n+        import core.bitop;\n+        return core.bitop.bswap(value);\n+    }\n+\n+    // Stub these out to no-ops\n+    int   __builtin_constant_p(T)(T exp) { return 0; } // should be something like __traits(compiles, enum X = expr)\n+    long  __builtin_expect()(long exp, long c) { return exp; }\n+    void* __builtin_assume_aligned()(const void* p, size_t align_, ...) { return cast(void*)p; }\n+\n+    // https://releases.llvm.org/13.0.0/tools/clang/docs/LanguageExtensions.html#builtin-assume\n+    void __builtin_assume(T)(lazy T arg) { }\n+\n+    /* Header on macOS for arm64 references this.\n+     * Don't need to implement it, it just needs to compile\n+     */\n+    align (16) struct __uint128_t\n+    {\n+        ulong a, b;\n+    }\n+}"}, {"sha": "69b20f0bd3c02747d08c51f222c03ab3ba16494b", "filename": "libphobos/libdruntime/core/attribute.d", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Flibdruntime%2Fcore%2Fattribute.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Flibdruntime%2Fcore%2Fattribute.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fattribute.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -241,3 +241,52 @@ version (UdaGNUAbiTag) struct gnuAbiTag\n         this.tags = tags;\n     }\n }\n+\n+/**\n+ * Use this attribute to ensure that values of a `struct` or `union` type are\n+ * not discarded.\n+ *\n+ * The value of an expression is considered to be discarded if\n+ *\n+ * $(UL\n+ *  $(LI\n+ *      the expression is the top-level expression in a statement or the\n+ *      left-hand expression in a comma expression, and\n+ *  ),\n+ *  $(LI\n+ *      the expression is not an assignment (`=`, `+=`, etc.), increment\n+ *      (`++`), or decrement (`--`) expression.\n+ *  ),\n+ * )\n+ *\n+ * If the declaration of a `struct` or `union` type has the `@mustuse`\n+ * attribute, the compiler will emit an error any time a value of that type\n+ * would be discarded.\n+ *\n+ * Currently, `@mustuse` is only recognized by the compiler when attached to\n+ * `struct` and `union` declarations. To allow for future expansion, attaching\n+ * `@mustuse` to a `class`, `interface`, `enum`, or function declaration is\n+ * currently forbidden, and will result in a compile-time error. All other uses\n+ * of `@mustuse` are ignored.\n+ *\n+ * Examples:\n+ * ---\n+ * @mustuse struct ErrorCode { int value; }\n+ *\n+ * extern(C) ErrorCode doSomething();\n+ *\n+ * void main()\n+ * {\n+ *     // error: would discard a value of type ErrorCode\n+ *     //doSomething();\n+ *\n+ *     ErrorCode result;\n+ *     // ok: value is assigned to a variable\n+ *     result = doSomething();\n+ *\n+ *     // ok: can ignore the value explicitly with a cast\n+ *     cast(void) doSomething();\n+ * }\n+ * ---\n+ */\n+enum mustuse;"}, {"sha": "59445f091475efd103496f5e9977ecc7a60e61d9", "filename": "libphobos/libdruntime/core/bitop.d", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Flibdruntime%2Fcore%2Fbitop.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Flibdruntime%2Fcore%2Fbitop.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fbitop.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -758,19 +758,6 @@ version (DigitalMars) version (AnyX86)\n }\n \n \n-// @@@DEPRECATED_2.099@@@\n-deprecated(\"volatileLoad has been moved to core.volatile. Use core.volatile.volatileLoad instead.\")\n-{\n-    public import core.volatile : volatileLoad;\n-}\n-\n-// @@@DEPRECATED_2.099@@@\n-deprecated(\"volatileStore has been moved to core.volatile. Use core.volatile.volatileStore instead.\")\n-{\n-    public import core.volatile : volatileStore;\n-}\n-\n-\n /**\n  * Reverses the order of bits in a 32-bit integer.\n  */"}, {"sha": "2f628c031387f4f3b7ac0e7a3332edf589e570a7", "filename": "libphobos/libdruntime/core/int128.d", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Flibdruntime%2Fcore%2Fint128.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Flibdruntime%2Fcore%2Fint128.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fint128.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -801,6 +801,7 @@ unittest\n     const Cm10_0 = inc(com(C10_0)); // Cent(0, -10);\n     const Cm10_1 = inc(com(C10_1)); // Cent(-1, -11);\n     const Cm10_3 = inc(com(C10_3)); // Cent(-3, -11);\n+    const Cm20_0 = inc(com(C20_0)); // Cent(0, -20);\n \n     enum Cs_3 = Cent(3, I.min);\n \n@@ -904,6 +905,7 @@ unittest\n     assert(mul(C9_3, C10) == C90_30);\n     assert(mul(Cs_3, C10) == C30);\n     assert(mul(Cm10, Cm10) == C100);\n+    assert(mul(C20_0, Cm1) == Cm20_0);\n \n     assert( or(C4_8, C3_1) == C7_9);\n     assert(and(C4_8, C7_9) == C4_8);"}, {"sha": "172263c684a295a5610bf2b7ac154499685fc2de", "filename": "libphobos/libdruntime/core/internal/array/appending.d", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Flibdruntime%2Fcore%2Finternal%2Farray%2Fappending.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Flibdruntime%2Fcore%2Finternal%2Farray%2Fappending.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Finternal%2Farray%2Fappending.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -35,14 +35,14 @@ template _d_arrayappendcTXImpl(Tarr : T[], T)\n     *   is temporarily declared `@trusted pure` until the implementation can be brought up to modern D expectations.\n      */\n     static if (isCopyingNothrow!T) // `nothrow` deduction doesn't work, so this is needed\n-        ref Tarr _d_arrayappendcTX(return scope ref Tarr px, size_t n) @trusted pure nothrow\n+        ref Tarr _d_arrayappendcTX(return ref scope Tarr px, size_t n) @trusted pure nothrow\n         {\n             pragma(inline, false);\n \n             mixin(_d_arrayappendcTXBody);\n         }\n     else\n-        ref Tarr _d_arrayappendcTX(return scope ref Tarr px, size_t n) @trusted pure nothrow\n+        ref Tarr _d_arrayappendcTX(return ref scope Tarr px, size_t n) @trusted pure nothrow\n         {\n             pragma(inline, false);\n \n@@ -96,14 +96,14 @@ template _d_arrayappendTImpl(Tarr : T[], T)\n     *   is temporarily declared `@trusted pure` until the implementation can be brought up to modern D expectations.\n      */\n     static if (isCopyingNothrow!T)\n-        ref Tarr _d_arrayappendT(return scope ref Tarr x, scope Tarr y) @trusted pure nothrow\n+        ref Tarr _d_arrayappendT(return ref scope Tarr x, scope Tarr y) @trusted pure nothrow\n         {\n             pragma(inline, false);\n \n             mixin(_d_arrayappendTBody);\n         }\n     else\n-        ref Tarr _d_arrayappendT(return scope ref Tarr x, scope Tarr y) @trusted pure\n+        ref Tarr _d_arrayappendT(return ref scope Tarr x, scope Tarr y) @trusted pure\n         {\n             pragma(inline, false);\n "}, {"sha": "821f96e25c0db291144d3545f77a922130b4e977", "filename": "libphobos/libdruntime/core/internal/array/comparison.d", "status": "modified", "additions": 15, "deletions": 18, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Flibdruntime%2Fcore%2Finternal%2Farray%2Fcomparison.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Flibdruntime%2Fcore%2Finternal%2Farray%2Fcomparison.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Finternal%2Farray%2Fcomparison.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -60,24 +60,21 @@ int __cmp(T)(scope const T[] lhs, scope const T[] rhs) @trusted\n         immutable len = lhs.length <= rhs.length ? lhs.length : rhs.length;\n         foreach (const u; 0 .. len)\n         {\n-            static if (__traits(isFloating, T))\n+            auto a = lhs.ptr[u], b = rhs.ptr[u];\n+            static if (is(T : creal))\n             {\n-                immutable a = lhs.ptr[u], b = rhs.ptr[u];\n-                static if (is(T == cfloat) || is(T == cdouble)\n-                    || is(T == creal))\n-                {\n-                    // Use rt.cmath2._Ccmp instead ?\n-                    auto r = (a.re > b.re) - (a.re < b.re);\n-                    if (!r) r = (a.im > b.im) - (a.im < b.im);\n-                }\n-                else\n-                {\n-                    const r = (a > b) - (a < b);\n-                }\n-                if (r) return r;\n+                // Use rt.cmath2._Ccmp instead ?\n+                // Also: if NaN is present, numbers will appear equal.\n+                auto r = (a.re > b.re) - (a.re < b.re);\n+                if (!r) r = (a.im > b.im) - (a.im < b.im);\n+            }\n+            else\n+            {\n+                // This pattern for three-way comparison is better than conditional operators\n+                // See e.g. https://godbolt.org/z/3j4vh1\n+                const r = (a > b) - (a < b);\n             }\n-            else if (lhs.ptr[u] != rhs.ptr[u])\n-                return lhs.ptr[u] < rhs.ptr[u] ? -1 : 1;\n+            if (r) return r;\n         }\n         return (lhs.length > rhs.length) - (lhs.length < rhs.length);\n     }\n@@ -117,8 +114,8 @@ if (!__traits(isScalar, T1) && !__traits(isScalar, T2))\n         }\n         else static if (__traits(compiles, at(s1, u) < at(s2, u)))\n         {\n-            if (at(s1, u) != at(s2, u))\n-                return at(s1, u) < at(s2, u) ? -1 : 1;\n+            if (int result = (at(s1, u) > at(s2, u)) - (at(s1, u) < at(s2, u)))\n+                return result;\n         }\n         else\n         {"}, {"sha": "92eb243ec1a9a74145944df72b22d51dd091b51d", "filename": "libphobos/libdruntime/core/internal/convert.d", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Flibdruntime%2Fcore%2Finternal%2Fconvert.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Flibdruntime%2Fcore%2Finternal%2Fconvert.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Finternal%2Fconvert.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -741,28 +741,6 @@ const(ubyte)[] toUbyte(T)(const ref scope T val) if (is(T == __vector))\n     }\n }\n \n-// @@@DEPRECATED_2022-02@@@\n-deprecated\n-@trusted pure nothrow @nogc\n-const(ubyte)[] toUbyte(T)(const ref return scope T val) if (__traits(isFloating, T) && is(T : creal))\n-{\n-    if (__ctfe)\n-    {\n-        auto re = val.re;\n-        auto im = val.im;\n-        auto a = re.toUbyte();\n-        auto b = im.toUbyte();\n-        ubyte[] result = ctfe_alloc(a.length + b.length);\n-        result[0 .. a.length] = a[0 .. a.length];\n-        result[a.length .. $] = b[0 .. b.length];\n-        return result;\n-    }\n-    else\n-    {\n-        return (cast(const(ubyte)*)&val)[0 .. T.sizeof];\n-    }\n-}\n-\n @trusted pure nothrow @nogc\n const(ubyte)[] toUbyte(T)(const ref return scope T val) if (is(T == enum))\n {"}, {"sha": "3a7c8e02b8a20925a0adcfca1ff07bf7f5a7f772", "filename": "libphobos/libdruntime/core/lifetime.d", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Flibdruntime%2Fcore%2Flifetime.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Flibdruntime%2Fcore%2Flifetime.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Flifetime.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -2646,9 +2646,9 @@ T _d_newThrowable(T, Args...)(auto ref Args args) @trusted\n {\n     debug(PRINTF) printf(\"_d_newThrowable(%s)\\n\", cast(char*) T.stringof);\n \n-    import core.stdc.stdlib : malloc;\n+    import core.memory : pureMalloc;\n     auto init = __traits(initSymbol, T);\n-    void* p = malloc(init.length);\n+    void* p = pureMalloc(init.length);\n     if (!p)\n     {\n         import core.exception : onOutOfMemoryError;"}, {"sha": "30fc1308e4b51f9290b8bd71058d2f41a93953ee", "filename": "libphobos/libdruntime/core/math.d", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Flibdruntime%2Fcore%2Fmath.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Flibdruntime%2Fcore%2Fmath.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fmath.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -36,6 +36,7 @@ nothrow:\n  * greater than long.max, the result is\n  * indeterminate.\n  */\n+deprecated(\"rndtonl is to be removed by 2.100. Please use round instead\")\n extern (C) real rndtonl(real x);\n \n pure:"}, {"sha": "d1378afca91ae9200e4c8ae248da4bdd9f20fdb8", "filename": "libphobos/libdruntime/core/runtime.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Flibdruntime%2Fcore%2Fruntime.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Flibdruntime%2Fcore%2Fruntime.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fruntime.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -285,7 +285,7 @@ struct Runtime\n      * an appropriate calling context from which to begin the trace.\n      *\n      * Params:\n-     *  h = The new trace handler.  Set to null to use the default handler.\n+     *  h = The new trace handler.  Set to null to disable exception backtracing.\n      */\n     extern(C) pragma(mangle, \"rt_setTraceHandler\") static @property void traceHandler(TraceHandler h);\n "}, {"sha": "0dcdb6efc26026fba3ccc2ec8cae8398574a2d57", "filename": "libphobos/libdruntime/core/stdc/stdio.d", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fstdio.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fstdio.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fstdio.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -700,9 +700,8 @@ else version (Solaris)\n }\n else version (CRuntime_Bionic)\n {\n-    import core.sys.posix.sys.types : off_t;\n     ///\n-    alias off_t fpos_t;\n+    alias c_long fpos_t; // couldn't use off_t because of static if issue\n \n     ///\n     struct __sFILE\n@@ -745,12 +744,10 @@ else version (CRuntime_UClibc)\n     import core.stdc.stddef : wchar_t;\n     import core.sys.posix.sys.types : ssize_t, pthread_mutex_t;\n \n-    alias long off_t;\n-\n     ///\n     struct fpos_t\n     {\n-        off_t __pos;\n+        long __pos; // couldn't use off_t because of static if issue\n         mbstate_t __state;\n         int __mblen_pending;\n     }\n@@ -759,7 +756,7 @@ else version (CRuntime_UClibc)\n     {\n        ssize_t function(void* __cookie, char* __buf, size_t __bufsize)          read;\n        ssize_t function(void* __cookie, const char* __buf, size_t __bufsize)    write;\n-       int function(void* __cookie, off_t* __pos, int __whence)                 seek;\n+       int function(void* __cookie, long* __pos, int __whence)                  seek;\n        int function(void* __cookie)                                             close;\n     }\n \n@@ -900,12 +897,14 @@ else version (CRuntime_Microsoft)\n \n     extern shared void function() _fcloseallp;\n \n+    FILE* __acrt_iob_func(int hnd);     // VS2015+, reimplemented in msvc.d for VS2013-\n+\n     ///\n-    shared FILE* stdin;  // = &__iob_func()[0];\n+    FILE* stdin()() { return __acrt_iob_func(0); }\n     ///\n-    shared FILE* stdout; // = &__iob_func()[1];\n+    FILE* stdout()() { return __acrt_iob_func(1); }\n     ///\n-    shared FILE* stderr; // = &__iob_func()[2];\n+    FILE* stderr()() { return __acrt_iob_func(2); }\n }\n else version (CRuntime_Glibc)\n {"}, {"sha": "5d38244f8584b1fafa898184922cbfb1a2d3a9a7", "filename": "libphobos/libdruntime/core/sys/linux/config.d", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fconfig.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fconfig.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fconfig.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -24,6 +24,9 @@ deprecated(\"use _DEFAULT_SOURCE\")\n     enum _SVID_SOURCE = true;\n }\n \n+deprecated(\"use _DEFAULT_SOURCE\")\n enum __USE_MISC = _DEFAULT_SOURCE;\n+deprecated(\"use _ATFILE_SOURCE\")\n enum __USE_ATFILE = _ATFILE_SOURCE;\n+deprecated(\"use _GNU_SOURCE\")\n enum __USE_GNU = _GNU_SOURCE;"}, {"sha": "fbb84627af8fdacdaffd5aba66f315f5d1c0b025", "filename": "libphobos/libdruntime/core/sys/linux/dlfcn.d", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fdlfcn.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fdlfcn.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fdlfcn.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -34,7 +34,7 @@ import core.sys.linux.config;\n version (X86_Any)\n {\n     // http://sourceware.org/git/?p=glibc.git;a=blob;f=bits/dlfcn.h\n-    static if (__USE_GNU)\n+    static if (_GNU_SOURCE)\n     {\n         RT DL_CALL_FCT(RT, Args...)(RT function(Args) fctp, auto ref Args args)\n         {\n@@ -48,7 +48,7 @@ version (X86_Any)\n else version (HPPA_Any)\n {\n     // http://sourceware.org/git/?p=glibc.git;a=blob;f=ports/sysdeps/hppa/bits/dlfcn.h\n-    static if (__USE_GNU)\n+    static if (_GNU_SOURCE)\n     {\n         RT DL_CALL_FCT(RT, Args...)(RT function(Args) fctp, auto ref Args args)\n         {\n@@ -62,7 +62,7 @@ else version (HPPA_Any)\n else version (MIPS_Any)\n {\n     // http://sourceware.org/git/?p=glibc.git;a=blob;f=ports/sysdeps/mips/bits/dlfcn.h\n-    static if (__USE_GNU)\n+    static if (_GNU_SOURCE)\n     {\n         RT DL_CALL_FCT(RT, Args...)(RT function(Args) fctp, auto ref Args args)\n         {\n@@ -76,7 +76,7 @@ else version (MIPS_Any)\n else version (PPC_Any)\n {\n     // http://sourceware.org/git/?p=glibc.git;a=blob;f=bits/dlfcn.h\n-    static if (__USE_GNU)\n+    static if (_GNU_SOURCE)\n     {\n         RT DL_CALL_FCT(RT, Args...)(RT function(Args) fctp, auto ref Args args)\n         {\n@@ -90,7 +90,7 @@ else version (PPC_Any)\n else version (ARM_Any)\n {\n     // http://sourceware.org/git/?p=glibc.git;a=blob;f=bits/dlfcn.h\n-    static if (__USE_GNU)\n+    static if (_GNU_SOURCE)\n     {\n         RT DL_CALL_FCT(RT, Args...)(RT function(Args) fctp, auto ref Args args)\n         {\n@@ -104,7 +104,7 @@ else version (ARM_Any)\n else version (RISCV_Any)\n {\n     // http://sourceware.org/git/?p=glibc.git;a=blob;f=bits/dlfcn.h\n-    static if (__USE_GNU)\n+    static if (_GNU_SOURCE)\n     {\n         RT DL_CALL_FCT(RT, Args...)(RT function(Args) fctp, auto ref Args args)\n         {\n@@ -118,7 +118,7 @@ else version (RISCV_Any)\n else version (SPARC_Any)\n {\n     // http://sourceware.org/git/?p=glibc.git;a=blob;f=bits/dlfcn.h\n-    static if (__USE_GNU)\n+    static if (_GNU_SOURCE)\n     {\n         RT DL_CALL_FCT(RT, Args...)(RT function(Args) fctp, auto ref Args args)\n         {\n@@ -132,7 +132,7 @@ else version (SPARC_Any)\n else version (IBMZ_Any)\n {\n     // http://sourceware.org/git/?p=glibc.git;a=blob;f=bits/dlfcn.h\n-    static if (__USE_GNU)\n+    static if (_GNU_SOURCE)\n     {\n         RT DL_CALL_FCT(RT, Args...)(RT function(Args) fctp, auto ref Args args)\n         {\n@@ -148,7 +148,7 @@ else\n \n // <bits/dlfcn.h>\n \n-static if (__USE_GNU)\n+static if (_GNU_SOURCE)\n {\n     enum RTLD_NEXT = cast(void *)-1L;\n     enum RTLD_DEFAULT = cast(void *)0;\n@@ -161,15 +161,15 @@ static if (__USE_GNU)\n // int dlclose(void* __handle); // POSIX\n // void* dlsym(void* __handle, const scope char* __name); // POSIX\n \n-static if (__USE_GNU)\n+static if (_GNU_SOURCE)\n {\n     void* dlmopen(Lmid_t __nsid, const scope char* __file, int __mode);\n     void* dlvsym(void* __handle, const scope char* __name, const scope char* __version);\n }\n \n // char* dlerror(); // POSIX\n \n-static if (__USE_GNU)\n+static if (_GNU_SOURCE)\n {\n     int dladdr1(void* __address, Dl_info* __info, void** __extra_info, int __flags);\n "}, {"sha": "d7a39acb932f6bedea70bc894ea9624c762688fd", "filename": "libphobos/libdruntime/core/sys/linux/errno.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Ferrno.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Ferrno.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Ferrno.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -13,7 +13,7 @@ nothrow:\n public import core.stdc.errno;\n import core.sys.linux.config;\n \n-static if (__USE_GNU)\n+static if (_GNU_SOURCE)\n {\n     extern __gshared char* program_invocation_name, program_invocation_short_name;\n     alias error_t = int;"}, {"sha": "1b428f5aecccf37baae8888fb938318748ed85c4", "filename": "libphobos/libdruntime/core/sys/linux/netinet/in_.d", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fnetinet%2Fin_.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fnetinet%2Fin_.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fnetinet%2Fin_.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -115,7 +115,7 @@ version (linux_libc)\n     enum IN6ADDR_ANY_INIT      = in6_addr.init;\n     enum IN6ADDR_LOOPBACK_INIT = in6_addr([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]);\n \n-    version (gnu_libc) static if (__USE_MISC)\n+    version (gnu_libc) static if (_DEFAULT_SOURCE)\n     {\n         struct ip_mreq\n         {\n@@ -174,13 +174,13 @@ version (linux_libc)\n \n     extern(D) bool IN6_ARE_ADDR_EQUAL(in6_addr* a, in6_addr* b) pure @safe { return *a == *b; }\n \n-    version (gnu_libc) static if (__USE_MISC)\n+    version (gnu_libc) static if (_DEFAULT_SOURCE)\n     {\n         int bindresvport(int __sockfd, sockaddr_in* __sock_in);\n         int bindresvport6(int __sockfd, sockaddr_in6* _);\n     }\n \n-    version (gnu_libc) static if (__USE_GNU)\n+    version (gnu_libc) static if (_GNU_SOURCE)\n     {\n         struct in6_pktinfo\n         {\n@@ -254,7 +254,7 @@ version (linux_libc)\n     enum IP_DROP_SOURCE_MEMBERSHIP = 40;\n     enum IP_MSFILTER               = 41;\n \n-    version (gnu_libc) static if (__USE_MISC)\n+    version (gnu_libc) static if (_DEFAULT_SOURCE)\n     {\n         enum MCAST_JOIN_GROUP         = 42;\n         enum MCAST_BLOCK_SOURCE       = 43;\n@@ -307,7 +307,7 @@ version (linux_libc)\n     enum IP_DEFAULT_MULTICAST_LOOP = 1;\n     enum IP_MAX_MEMBERSHIPS        = 20;\n \n-    version (gnu_libc) static if (__USE_MISC)\n+    version (gnu_libc) static if (_DEFAULT_SOURCE)\n     {\n         struct ip_opts\n         {"}, {"sha": "880faa4d7019c8cde5ffa28df0889bdbf2eab84f", "filename": "libphobos/libdruntime/core/sys/linux/string.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fstring.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fstring.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fstring.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -16,7 +16,7 @@ nothrow:\n @nogc:\n @system:\n \n-static if (__USE_GNU)\n+static if (_GNU_SOURCE)\n {\n     pure void* memmem(return scope const void* haystack, size_t haystacklen, scope const void* needle, size_t needlelen);\n }"}, {"sha": "649e2af848f9128c79ac86a47ce5429443cfa982", "filename": "libphobos/libdruntime/core/sys/linux/sys/mman.d", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fsys%2Fmman.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fsys%2Fmman.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fsys%2Fmman.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -37,7 +37,7 @@ version (PPC_Any)\n {\n     enum PROT_SAO = 0x10;\n \n-    static if (__USE_MISC) enum\n+    static if (_DEFAULT_SOURCE) enum\n     {\n         MAP_GROWSDOWN = 0x00100,\n         MAP_DENYWRITE = 0x00800,\n@@ -60,7 +60,7 @@ version (PPC_Any)\n // http://sourceware.org/git/?p=glibc.git;a=blob;f=sysdeps/unix/sysv/linux/riscv/bits/mman.h\n else version (RISCV_Any)\n {\n-    static if (__USE_MISC) enum\n+    static if (_DEFAULT_SOURCE) enum\n     {\n         MAP_GROWSDOWN = 0x00100,\n         MAP_DENYWRITE = 0x00800,\n@@ -85,7 +85,7 @@ else version (RISCV_Any)\n // http://sourceware.org/git/?p=glibc.git;a=blob;f=sysdeps/unix/sysv/linux/s390/bits/mman.h\n else version (IBMZ_Any)\n {\n-    static if (__USE_MISC) enum\n+    static if (_DEFAULT_SOURCE) enum\n     {\n         MAP_GROWSDOWN = 0x00100,\n         MAP_DENYWRITE = 0x00800,\n@@ -101,7 +101,7 @@ else version (IBMZ_Any)\n // http://sourceware.org/git/?p=glibc.git;a=blob;f=sysdeps/unix/sysv/linux/sh/bits/mman.h\n else version (SH)\n {\n-    static if (__USE_MISC) enum\n+    static if (_DEFAULT_SOURCE) enum\n     {\n         MAP_GROWSDOWN = 0x0100,\n         MAP_DENYWRITE = 0x0800,\n@@ -117,7 +117,7 @@ else version (SH)\n // http://sourceware.org/git/?p=glibc.git;a=blob;f=sysdeps/unix/sysv/linux/sparc/bits/mman.h\n else version (SPARC_Any)\n {\n-    static if (__USE_MISC) enum\n+    static if (_DEFAULT_SOURCE) enum\n     {\n         MAP_GROWSDOWN = 0x0200,\n         MAP_DENYWRITE = 0x0800,\n@@ -141,9 +141,9 @@ else version (SPARC_Any)\n // http://sourceware.org/git/?p=glibc.git;a=blob;f=sysdeps/unix/sysv/linux/x86/bits/mman.h\n else version (X86_Any)\n {\n-    static if (__USE_MISC) enum MAP_32BIT = 0x40;\n+    static if (_DEFAULT_SOURCE) enum MAP_32BIT = 0x40;\n \n-    static if (__USE_MISC) enum\n+    static if (_DEFAULT_SOURCE) enum\n     {\n         MAP_GROWSDOWN = 0x00100,\n         MAP_DENYWRITE = 0x00800,\n@@ -159,7 +159,7 @@ else version (X86_Any)\n // http://sourceware.org/git/?p=glibc.git;a=blob;f=sysdeps/unix/sysv/linux/aarch64/bits/mman.h\n else version (AArch64)\n {\n-    static if (__USE_MISC) enum\n+    static if (_DEFAULT_SOURCE) enum\n     {\n         MAP_GROWSDOWN = 0x00100,\n         MAP_DENYWRITE = 0x00800,\n@@ -187,11 +187,11 @@ else version (Alpha)\n \n     enum MAP_SHARED = 0x01;\n     enum MAP_PRIVATE = 0x02;\n-    static if (__USE_MISC)\n+    static if (_DEFAULT_SOURCE)\n         enum MAP_TYPE = 0x0f;\n \n     enum MAP_FIXED = 0x10;\n-    static if (__USE_MISC) enum\n+    static if (_DEFAULT_SOURCE) enum\n     {\n         MAP_FILE = 0,\n         MAP_ANONYMOUS = MAP_ANON,\n@@ -201,7 +201,7 @@ else version (Alpha)\n         MAP_HUGE_MASK = 0x3f,\n     }\n \n-    static if (__USE_MISC) enum\n+    static if (_DEFAULT_SOURCE) enum\n     {\n         MAP_GROWSDOWN = 0x01000,\n         MAP_DENYWRITE = 0x02000,\n@@ -229,13 +229,13 @@ else version (Alpha)\n     //     MCL_FUTURE = 16384,\n     // }\n \n-    static if (__USE_GNU) enum\n+    static if (_GNU_SOURCE) enum\n     {\n         MREMAP_MAYMOVE = 1,\n         MREMAP_FIXED = 2,\n     }\n \n-    static if (__USE_MISC) enum\n+    static if (_DEFAULT_SOURCE) enum\n     {\n         MADV_NORMAL = 0,\n         MADV_RANDOM = 1,\n@@ -255,7 +255,7 @@ else version (Alpha)\n     }\n \n     // in core.sys.posix.sys.mman\n-    // static if (__USE_XOPEN2K) enum\n+    // static if (_XOPEN_SOURCE >= 600) enum\n     // {\n     //         POSIX_MADV_NORMAL = 0,\n     //         POSIX_MADV_RANDOM = 1,\n@@ -267,7 +267,7 @@ else version (Alpha)\n // http://sourceware.org/git/?p=glibc.git;a=blob;f=sysdeps/unix/sysv/linux/arm/bits/mman.h\n else version (ARM)\n {\n-    static if (__USE_MISC) enum\n+    static if (_DEFAULT_SOURCE) enum\n     {\n         MAP_GROWSDOWN = 0x00100,\n         MAP_DENYWRITE = 0x00800,\n@@ -295,11 +295,11 @@ else version (HPPA_Any)\n \n     enum MAP_SHARED = 0x01;\n     enum MAP_PRIVATE = 0x02;\n-    static if (__USE_MISC)\n+    static if (_DEFAULT_SOURCE)\n         enum MAP_TYPE = 0x0f;\n \n     enum MAP_FIXED = 0x04;\n-    static if (__USE_MISC) enum\n+    static if (_DEFAULT_SOURCE) enum\n     {\n         MAP_FILE = 0,\n         MAP_ANONYMOUS = MAP_ANON,\n@@ -310,7 +310,7 @@ else version (HPPA_Any)\n         MAP_HUGE_MASK = 0x3f,\n     }\n \n-    static if (__USE_MISC) enum\n+    static if (_DEFAULT_SOURCE) enum\n     {\n         MAP_DENYWRITE = 0x0800,\n         MAP_EXECUTABLE = 0x1000,\n@@ -336,13 +336,13 @@ else version (HPPA_Any)\n     //     MCL_FUTURE = 2,\n     // }\n \n-    static if (__USE_GNU) enum\n+    static if (_GNU_SOURCE) enum\n     {\n         MREMAP_MAYMOVE = 1,\n         MREMAP_FIXED = 2,\n     }\n \n-    static if (__USE_MISC) enum\n+    static if (_DEFAULT_SOURCE) enum\n     {\n         MADV_NORMAL = 0,\n         MADV_RANDOM = 1,\n@@ -375,7 +375,7 @@ else version (HPPA_Any)\n     }\n \n     // in core.sys.posix.sys.mman\n-    // static if (__USE_XOPEN2K) enum\n+    // static if (_XOPEN_SOURCE >= 600) enum\n     // {\n     //     POSIX_MADV_NORMAL = 0,\n     //     POSIX_MADV_RANDOM = 1,\n@@ -387,7 +387,7 @@ else version (HPPA_Any)\n // http://sourceware.org/git/?p=glibc.git;a=blob;f=sysdeps/unix/sysv/linux/ia64/bits/mman.h\n else version (IA64)\n {\n-    static if (__USE_MISC) enum\n+    static if (_DEFAULT_SOURCE) enum\n     {\n         MAP_GROWSDOWN = 0x00100,\n         MAP_GROWSUP = 0x00200,\n@@ -404,7 +404,7 @@ else version (IA64)\n // http://sourceware.org/git/?p=glibc.git;a=blob;f=sysdeps/unix/sysv/linux/m68k/bits/mman.h\n else version (M68K)\n {\n-    static if (__USE_MISC) enum\n+    static if (_DEFAULT_SOURCE) enum\n     {\n         MAP_GROWSDOWN = 0x00100,\n         MAP_DENYWRITE = 0x00800,\n@@ -420,7 +420,7 @@ else version (M68K)\n // http://sourceware.org/git/?p=glibc.git;a=blob;f=sysdeps/unix/sysv/linux/mips/bits/mman.h\n else version (MIPS_Any)\n {\n-    static if (__USE_MISC) enum\n+    static if (_DEFAULT_SOURCE) enum\n     {\n         MAP_NORESERVE = 0x0400,\n         MAP_GROWSDOWN = 0x1000,\n@@ -460,11 +460,11 @@ else\n \n     enum MAP_SHARED = 0x01;\n     enum MAP_PRIVATE = 0x02;\n-    static if (__USE_MISC)\n+    static if (_DEFAULT_SOURCE)\n         enum MAP_TYPE = 0x0f;\n \n     enum MAP_FIXED = 0x10;\n-    static if (__USE_MISC) enum\n+    static if (_DEFAULT_SOURCE) enum\n     {\n         MAP_FILE = 0,\n         MAP_ANONYMOUS = MAP_ANON,\n@@ -482,13 +482,13 @@ else\n     //     MS_INVALIDATE = 2,\n     // }\n \n-    static if (__USE_GNU) enum\n+    static if (_GNU_SOURCE) enum\n     {\n         MREMAP_MAYMOVE = 1,\n         MREMAP_FIXED = 2,\n     }\n \n-    static if (__USE_MISC) enum\n+    static if (_DEFAULT_SOURCE) enum\n     {\n         MADV_NORMAL = 0,\n         MADV_RANDOM = 1,\n@@ -508,7 +508,7 @@ else\n     }\n \n     // in core.sys.posix.sys.mman\n-    // static if (__USE_XOPEN2K) enum\n+    // static if (_XOPEN_SOURCE >= 600) enum\n     // {\n     //     POSIX_MADV_NORMAL = 0,\n     //     POSIX_MADV_RANDOM = 1,\n@@ -530,12 +530,12 @@ else\n // http://sourceware.org/git/?p=glibc.git;a=blob;f=sysdeps/unix/sysv/linux/sparc/bits/mman.h\n version (SPARC_Any)\n {\n-    static if (__USE_MISC) enum MAP_RENAME = MAP_ANONYMOUS;\n+    static if (_DEFAULT_SOURCE) enum MAP_RENAME = MAP_ANONYMOUS;\n }\n // http://sourceware.org/git/?p=glibc.git;a=blob;f=sysdeps/unix/sysv/linux/mips/bits/mman.h\n else version (MIPS_Any)\n {\n-    static if (__USE_MISC) enum MAP_RENAME = MAP_ANONYMOUS;\n+    static if (_DEFAULT_SOURCE) enum MAP_RENAME = MAP_ANONYMOUS;\n }\n \n // http://sourceware.org/git/?p=glibc.git;a=blob;f=misc/sys/mman.h\n@@ -548,14 +548,14 @@ else version (MIPS_Any)\n // int munmap(void*, size_t);\n // int mprotect(void *__addr, size_t __len, int __prot);\n // int msync(void *__addr, size_t __len, int __flags);\n-static if (__USE_MISC) int madvise(void *__addr, size_t __len, int __advice);\n-// static if (__USE_XOPEN2K) int posix_madvise(void *__addr, size_t __len, int __advice);\n+static if (_DEFAULT_SOURCE) int madvise(void *__addr, size_t __len, int __advice);\n+// static if (_XOPEN_SOURCE >= 600) int posix_madvise(void *__addr, size_t __len, int __advice);\n // int mlock(const(void) *__addr, size_t __len);\n // int munlock(const(void) *__addr, size_t __len);\n // int mlockall(int __flags);\n // int munlockall();\n-static if (__USE_MISC) int mincore(void *__start, size_t __len, ubyte *__vec);\n-static if (__USE_GNU) void *mremap(void *__addr, size_t __old_len, size_t __new_len, int __flags, ...);\n-static if (__USE_GNU) int remap_file_pages(void *__start, size_t __size, int __prot, size_t __pgoff, int __flags);\n+static if (_DEFAULT_SOURCE) int mincore(void *__start, size_t __len, ubyte *__vec);\n+static if (_GNU_SOURCE) void *mremap(void *__addr, size_t __old_len, size_t __new_len, int __flags, ...);\n+static if (_GNU_SOURCE) int remap_file_pages(void *__start, size_t __size, int __prot, size_t __pgoff, int __flags);\n // int shm_open(in char *__name, int __oflag, mode_t __mode);\n // int shm_unlink(in char *__name);"}, {"sha": "a76846e91dff9f608edf834b5fdfaeaa64437a76", "filename": "libphobos/libdruntime/core/sys/posix/aio.d", "status": "modified", "additions": 3, "deletions": 129, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Faio.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Faio.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Faio.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -99,57 +99,7 @@ else version (CRuntime_Musl)\n }\n else version (CRuntime_UClibc)\n {\n-    import core.sys.posix.config;\n-    import core.sys.posix.sys.types;\n-\n-    struct aiocb\n-    {\n-        int aio_fildes;\n-        int aio_lio_opcode;\n-        int aio_reqprio;\n-        void* aio_buf;   //volatile\n-        size_t aio_nbytes;\n-        sigevent aio_sigevent;\n-\n-        aiocb* __next_prio;\n-        int __abs_prio;\n-        int __policy;\n-        int __error_code;\n-        ssize_t __return_value;\n-\n-        static if (__USE_LARGEFILE64)\n-        {\n-            off_t aio_offset;\n-            ubyte[off64_t.sizeof - off_t.sizeof] __pad;\n-        }\n-        else\n-        {\n-            off64_t aio_offset;\n-        }\n-        ubyte[32] __unused;\n-    }\n-\n-    static if (__USE_LARGEFILE64)\n-    {\n-        struct aiocb64\n-        {\n-            int aio_fildes;\n-            int aio_lio_opcode;\n-            int aio_reqprio;\n-            void* aio_buf;   //volatile\n-            size_t aio_nbytes;\n-            sigevent aio_sigevent;\n-\n-            aiocb* __next_prio;\n-            int __abs_prio;\n-            int __policy;\n-            int __error_code;\n-            ssize_t __return_value;\n-\n-            off64_t aio_offset;\n-            ubyte[32] __unused;\n-        }\n-    }\n+    // UClibc does not implement aiocb.\n }\n else version (Darwin)\n {\n@@ -272,15 +222,6 @@ else version (CRuntime_Musl)\n         AIO_ALLDONE\n     }\n }\n-else version (CRuntime_UClibc)\n-{\n-    enum\n-    {\n-        AIO_CANCELED,\n-        AIO_NOTCANCELED,\n-        AIO_ALLDONE\n-    }\n-}\n else version (Darwin)\n {\n     enum\n@@ -328,15 +269,6 @@ else version (CRuntime_Musl)\n         LIO_NOP\n     }\n }\n-else version (CRuntime_UClibc)\n-{\n-    enum\n-    {\n-        LIO_READ,\n-        LIO_WRITE,\n-        LIO_NOP\n-    }\n-}\n else version (Darwin)\n {\n     enum\n@@ -382,14 +314,6 @@ else version (CRuntime_Musl)\n         LIO_NOWAIT\n     }\n }\n-else version (CRuntime_UClibc)\n-{\n-    enum\n-    {\n-        LIO_WAIT,\n-        LIO_NOWAIT\n-    }\n-}\n else version (Darwin)\n {\n     enum\n@@ -456,37 +380,7 @@ else version (CRuntime_Bionic)\n }\n else version (CRuntime_UClibc)\n {\n-    static if (__USE_LARGEFILE64)\n-    {\n-        int aio_read64(aiocb64* aiocbp);\n-        int aio_write64(aiocb64* aiocbp);\n-        int aio_fsync64(int op, aiocb64* aiocbp);\n-        int aio_error64(const(aiocb64)* aiocbp);\n-        ssize_t aio_return64(aiocb64* aiocbp);\n-        int aio_suspend64(const(aiocb64*)* aiocb_list, int nitems, const(timespec)* timeout);\n-        int aio_cancel64(int fd, aiocb64* aiocbp);\n-        int lio_listio64(int mode, const(aiocb64*)* aiocb_list, int nitems, sigevent* sevp);\n-\n-        alias aio_read = aio_read64;\n-        alias aio_write = aio_write64;\n-        alias aio_fsync = aio_fsync64;\n-        alias aio_error = aio_error64;\n-        alias aio_return = aio_return64;\n-        alias aio_suspend = aio_suspend64;\n-        alias aio_cancel = aio_cancel64;\n-        alias lio_listio = lio_listio64;\n-    }\n-    else\n-    {\n-        int aio_read(aiocb* aiocbp);\n-        int aio_write(aiocb* aiocbp);\n-        int aio_fsync(int op, aiocb* aiocbp);\n-        int aio_error(const(aiocb)* aiocbp);\n-        ssize_t aio_return(aiocb* aiocbp);\n-        int aio_suspend(const(aiocb*)* aiocb_list, int nitems, const(timespec)* timeout);\n-        int aio_cancel(int fd, aiocb* aiocbp);\n-        int lio_listio(int mode, const(aiocb*)* aiocb_list, int nitems, sigevent* sevp);\n-    }\n+    // UClibc does not implement aio.h\n }\n else version (OpenBSD)\n {\n@@ -507,27 +401,7 @@ else\n /* Functions outside/extending POSIX requirement.  */\n version (CRuntime_Glibc)\n {\n-    static if (__USE_GNU)\n-    {\n-        /* To customize the implementation one can use the following struct.  */\n-        struct aioinit\n-        {\n-            int aio_threads;\n-            int aio_num;\n-            int aio_locks;\n-            int aio_usedba;\n-            int aio_debug;\n-            int aio_numusers;\n-            int aio_idle_time;\n-            int aio_reserved;\n-        }\n-\n-        void aio_init(const(aioinit)* init);\n-    }\n-}\n-else version (CRuntime_UClibc)\n-{\n-    static if (__USE_GNU)\n+    static if (_GNU_SOURCE)\n     {\n         /* To customize the implementation one can use the following struct.  */\n         struct aioinit"}, {"sha": "7bd07229ea5592654d3db54d153d752988dee686", "filename": "libphobos/libdruntime/core/sys/posix/config.d", "status": "modified", "additions": 46, "deletions": 12, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fconfig.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fconfig.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fconfig.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -51,14 +51,24 @@ version (CRuntime_Glibc)\n     enum __USE_LARGEFILE     = __USE_FILE_OFFSET64 && !__REDIRECT;\n     enum __USE_LARGEFILE64   = __USE_FILE_OFFSET64 && !__REDIRECT;\n \n-    enum __USE_XOPEN2K       = _XOPEN_SOURCE >= 600;\n-    enum __USE_XOPEN2KXSI    = _XOPEN_SOURCE >= 600;\n-    enum __USE_XOPEN2K8      = _XOPEN_SOURCE >= 700;\n-    enum __USE_XOPEN2K8XSI   = _XOPEN_SOURCE >= 700;\n+    deprecated(\"use _XOPEN_SOURCE >= 600\")\n+    {\n+        enum __USE_XOPEN2K      = _XOPEN_SOURCE >= 600;\n+        enum __USE_XOPEN2KXSI   = _XOPEN_SOURCE >= 600;\n+    }\n+    deprecated(\"use _XOPEN_SOURCE >= 700\")\n+    {\n+        enum __USE_XOPEN2K8     = _XOPEN_SOURCE >= 700;\n+        enum __USE_XOPEN2K8XSI  = _XOPEN_SOURCE >= 700;\n+    }\n \n+    deprecated(\"use _DEFAULT_SOURCE\")\n     enum __USE_MISC          = _DEFAULT_SOURCE;\n+    deprecated(\"use _ATFILE_SOURCE\")\n     enum __USE_ATFILE        = _ATFILE_SOURCE;\n+    deprecated(\"use _GNU_SOURCE\")\n     enum __USE_GNU           = _GNU_SOURCE;\n+    deprecated(\"use _REENTRANT\")\n     enum __USE_REENTRANT     = _REENTRANT;\n \n     version (D_LP64)\n@@ -68,6 +78,10 @@ version (CRuntime_Glibc)\n }\n else version (CRuntime_Musl)\n {\n+    enum _GNU_SOURCE         = false;\n+    enum _DEFAULT_SOURCE     = false;\n+    enum _ATFILE_SOURCE      = false;\n+\n     // off_t is always 64 bits on Musl\n     enum _FILE_OFFSET_BITS   = 64;\n \n@@ -99,14 +113,24 @@ else version (CRuntime_UClibc)\n     enum __USE_LARGEFILE     = __USE_FILE_OFFSET64 && !__REDIRECT;\n     enum __USE_LARGEFILE64   = __USE_FILE_OFFSET64 && !__REDIRECT;\n \n-    enum __USE_XOPEN2K       = _XOPEN_SOURCE >= 600;\n-    enum __USE_XOPEN2KXSI    = _XOPEN_SOURCE >= 600;\n-    enum __USE_XOPEN2K8      = _XOPEN_SOURCE >= 700;\n-    enum __USE_XOPEN2K8XSI   = _XOPEN_SOURCE >= 700;\n+    deprecated(\"use _XOPEN_SOURCE >= 600\")\n+    {\n+        enum __USE_XOPEN2K      = _XOPEN_SOURCE >= 600;\n+        enum __USE_XOPEN2KXSI   = _XOPEN_SOURCE >= 600;\n+    }\n+    deprecated(\"use _XOPEN_SOURCE >= 700\")\n+    {\n+        enum __USE_XOPEN2K8     = _XOPEN_SOURCE >= 700;\n+        enum __USE_XOPEN2K8XSI  = _XOPEN_SOURCE >= 700;\n+    }\n \n+    deprecated(\"use _DEFAULT_SOURCE\")\n     enum __USE_MISC          = _DEFAULT_SOURCE;\n+    deprecated(\"use _ATFILE_SOURCE\")\n     enum __USE_ATFILE        = _ATFILE_SOURCE;\n+    deprecated(\"use _GNU_SOURCE\")\n     enum __USE_GNU           = _GNU_SOURCE;\n+    deprecated(\"use _REENTRANT\")\n     enum __USE_REENTRANT     = _REENTRANT;\n \n     version (D_LP64)\n@@ -117,7 +141,11 @@ else version (CRuntime_UClibc)\n else version (CRuntime_Bionic)\n {\n     enum _GNU_SOURCE         = false;\n+    enum _DEFAULT_SOURCE     = false;\n+    enum _ATFILE_SOURCE      = false;\n+\n     enum __USE_FILE_OFFSET64 = false; // see https://android.googlesource.com/platform/bionic/+/master/docs/32-bit-abi.md\n+    deprecated(\"use _GNU_SOURCE\")\n     enum __USE_GNU           = _GNU_SOURCE;\n \n     version (D_LP64)\n@@ -187,10 +215,16 @@ else version (Solaris)\n     enum __USE_LARGEFILE = __USE_FILE_OFFSET64 && !__REDIRECT;\n     enum __USE_LARGEFILE64 = __USE_FILE_OFFSET64 && !__REDIRECT;\n \n-    enum __USE_XOPEN2K = _XOPEN_SOURCE >= 600;\n-    enum __USE_XOPEN2KXSI = _XOPEN_SOURCE >= 600;\n-    enum __USE_XOPEN2K8 = _XOPEN_SOURCE >= 700;\n-    enum __USE_XOPEN2K8XSI = _XOPEN_SOURCE >= 700;\n+    deprecated(\"use _XOPEN_SOURCE >= 600\")\n+    {\n+        enum __USE_XOPEN2K      = _XOPEN_SOURCE >= 600;\n+        enum __USE_XOPEN2KXSI   = _XOPEN_SOURCE >= 600;\n+    }\n+    deprecated(\"use _XOPEN_SOURCE >= 700\")\n+    {\n+        enum __USE_XOPEN2K8     = _XOPEN_SOURCE >= 700;\n+        enum __USE_XOPEN2K8XSI  = _XOPEN_SOURCE >= 700;\n+    }\n \n     version (D_LP64)\n         enum __WORDSIZE = 64;"}, {"sha": "cfa3a40057c84e5574172064e945a77c584771b9", "filename": "libphobos/libdruntime/core/sys/posix/spawn.d", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fspawn.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fspawn.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fspawn.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -100,8 +100,8 @@ version (linux)\n             POSIX_SPAWN_SETSCHEDPARAM = 0x10,\n             POSIX_SPAWN_SETSCHEDULER = 0x20\n         }\n-        import core.sys.posix.config : __USE_GNU;\n-        static if (__USE_GNU)\n+        import core.sys.posix.config : _GNU_SOURCE;\n+        static if (_GNU_SOURCE)\n         {\n             enum\n             {\n@@ -140,8 +140,8 @@ version (linux)\n             POSIX_SPAWN_SETSCHEDPARAM = 16,\n             POSIX_SPAWN_SETSCHEDULER = 32\n         }\n-        import core.sys.posix.config : __USE_GNU;\n-        static if (__USE_GNU)\n+        import core.sys.posix.config : _GNU_SOURCE;\n+        static if (_GNU_SOURCE)\n         {\n             enum\n             {\n@@ -196,8 +196,8 @@ version (linux)\n             POSIX_SPAWN_SETSCHEDPARAM = 0x10,\n             POSIX_SPAWN_SETSCHEDULER = 0x20\n         }\n-        import core.sys.posix.config : __USE_GNU;\n-        static if (__USE_GNU)\n+        import core.sys.posix.config : _GNU_SOURCE;\n+        static if (_GNU_SOURCE)\n         {\n             enum\n             {"}, {"sha": "17182438e7aa3b79b4af7260d01fc96ef4e61c20", "filename": "libphobos/libdruntime/core/sys/posix/sys/ipc.d", "status": "modified", "additions": 64, "deletions": 1, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fipc.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fipc.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fipc.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -83,7 +83,26 @@ version (linux)\n }\n else version (Darwin)\n {\n+    align(4) struct ipc_perm\n+    {\n+        uid_t   uid;\n+        gid_t   gid;\n+        uid_t   cuid;\n+        gid_t   cgid;\n+        mode_t  mode;\n+        ushort  _seq;\n+        key_t   _key;\n+    }\n+\n+    enum IPC_CREAT      = 0x0200; // 01000\n+    enum IPC_EXCL       = 0x0400; // 02000\n+    enum IPC_NOWAIT     = 0x0800; // 04000\n+\n+    enum key_t IPC_PRIVATE = 0;\n \n+    enum IPC_RMID       = 0;\n+    enum IPC_SET        = 1;\n+    enum IPC_STAT       = 2;\n }\n else version (FreeBSD)\n {\n@@ -188,6 +207,46 @@ else version (DragonFlyBSD)\n     enum IPC_SET        = 1;\n     enum IPC_STAT       = 2;\n }\n+else version (Solaris)\n+{\n+    version (D_LP64)\n+    {\n+        struct ipc_perm\n+        {\n+            uid_t   uid;\n+            gid_t   gid;\n+            uid_t   cuid;\n+            gid_t   cgid;\n+            mode_t  mode;\n+            uint    seq;\n+            key_t   key;\n+        }\n+    }\n+    else\n+    {\n+        struct ipc_perm\n+        {\n+            uid_t   uid;\n+            gid_t   gid;\n+            uid_t   cuid;\n+            gid_t   cgid;\n+            mode_t  mode;\n+            uint    seq;\n+            key_t   key;\n+            int[4] pad;\n+        }\n+    }\n+\n+    enum IPC_CREAT      = 0x200;\n+    enum IPC_EXCL       = 0x400;\n+    enum IPC_NOWAIT     = 0x800;\n+\n+    enum key_t IPC_PRIVATE = 0;\n+\n+    enum IPC_RMID       = 10;\n+    enum IPC_SET        = 11;\n+    enum IPC_STAT       = 12;\n+}\n else\n {\n     static assert(false, \"Unsupported platform\");\n@@ -203,7 +262,7 @@ version (CRuntime_Glibc)\n }\n else version (Darwin)\n {\n-\n+    key_t ftok(const scope char*, int);\n }\n else version (FreeBSD)\n {\n@@ -221,6 +280,10 @@ else version (DragonFlyBSD)\n {\n     key_t ftok(const scope char*, int);\n }\n+else version (Solaris)\n+{\n+    key_t ftok(const scope char*, int);\n+}\n else version (CRuntime_Bionic)\n {\n     key_t ftok(const scope char*, int);"}, {"sha": "430f21571ecf7a4739abdf65022fc2c84751f657", "filename": "libphobos/libdruntime/core/sys/posix/sys/mman.d", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fmman.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fmman.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fmman.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -56,7 +56,7 @@ int posix_madvise(void*, size_t, int);\n \n version (CRuntime_Glibc)\n {\n-    static if (__USE_XOPEN2K)\n+    static if (_XOPEN_SOURCE >= 600)\n     {\n         int posix_madvise(void *__addr, size_t __len, int __advice);\n     }\n@@ -303,7 +303,7 @@ else version (CRuntime_Musl)\n }\n else version (CRuntime_UClibc)\n {\n-    static if (__USE_LARGEFILE64) void* mmap64(void*, size_t, int, int, int, off64_t);\n+    static if (__USE_LARGEFILE64) void* mmap64(void*, size_t, int, int, int, off_t);\n     static if (__USE_FILE_OFFSET64)\n         alias mmap = mmap64;\n     else"}, {"sha": "d04e7926913daa661845a74fee998121460e06c1", "filename": "libphobos/libdruntime/core/sys/posix/sys/shm.d", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fshm.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fshm.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fshm.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -259,6 +259,18 @@ else version (CRuntime_Musl)\n     int   shmdt(const scope void*);\n     int   shmget(key_t, size_t, int);\n }\n+else version (CRuntime_Bionic)\n+{\n+    enum SHMLBA = 4096;\n+\n+    deprecated(\"Not useful on Android because it's disallowed by SELinux\")\n+    {\n+        void* shmat(int, const scope void*, int);\n+        int   shmctl(int, int, shmid_ds*);\n+        int   shmdt(const scope void*);\n+        int   shmget(key_t, size_t, int);\n+    }\n+}\n else version (CRuntime_UClibc)\n {\n     int   __getpagesize();"}, {"sha": "c1309a68c9c4e6805ce19e55feebfda6c9f05510", "filename": "libphobos/libdruntime/core/sys/posix/sys/socket.d", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fsocket.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fsocket.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fsocket.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -1038,9 +1038,9 @@ else version (OpenBSD)\n     {\n          ubyte       ss_len;\n          sa_family_t ss_family;\n-         byte[6]     __ss_pad1;\n+         ubyte[6]    __ss_pad1;\n          long        __ss_align;\n-         byte[240]   __ss_pad2;\n+         ubyte[240]  __ss_pad2;\n     }\n \n     struct msghdr\n@@ -1063,20 +1063,25 @@ else version (OpenBSD)\n \n     enum : uint\n     {\n-        SCM_RIGHTS    = 0x01\n+        SCM_RIGHTS    = 0x01,\n+        SCM_TIMESTAMP = 0x04\n     }\n \n     private // <sys/_types.h>\n     {\n-        extern (D) size_t _ALIGN(size_t p) { return (p + _ALIGNBYTES) & ~_ALIGNBYTES; }\n+        enum _ALIGNBYTES = c_long.sizeof - 1;\n+        extern (D) size_t _ALIGN(size_t p) pure nothrow @nogc\n+        {\n+            return (p + _ALIGNBYTES) & ~_ALIGNBYTES;\n+        }\n     }\n \n-    extern (D) ubyte* CMSG_DATA(cmsghdr* cmsg)\n+    extern (D) ubyte* CMSG_DATA(cmsghdr* cmsg) pure nothrow @nogc\n     {\n         return cast(ubyte*) cmsg + _ALIGN(cmsghdr.sizeof);\n     }\n \n-    extern (D) cmsghdr* CMSG_NXTHDR(msghdr* mhdr, cmsghdr* cmsg)\n+    extern (D) cmsghdr* CMSG_NXTHDR(msghdr* mhdr, cmsghdr* cmsg) pure nothrow @nogc\n     {\n         if (cast(ubyte*) cmsg + _ALIGN(cmsg.cmsg_len) + _ALIGN(cmsghdr.sizeof) >\n                 cast(ubyte*) mhdr.msg_control + mhdr.msg_controllen)\n@@ -1085,11 +1090,24 @@ else version (OpenBSD)\n             return cast(cmsghdr*) (cast(ubyte*) cmsg + _ALIGN(cmsg.cmsg_len));\n     }\n \n-    extern (D) cmsghdr* CMSG_FIRSTHDR(msghdr* mhdr)\n+    extern (D) cmsghdr* CMSG_FIRSTHDR(msghdr* mhdr) pure nothrow @nogc\n     {\n         return mhdr.msg_controllen >= cmsghdr.sizeof ? cast(cmsghdr*) mhdr.msg_control : null;\n     }\n \n+    extern (D)\n+    {\n+        size_t CMSG_LEN(size_t len) pure nothrow @nogc\n+        {\n+            return _ALIGN(cmsghdr.sizeof) + len;\n+        }\n+    }\n+\n+    extern (D) size_t CMSG_SPACE(size_t len) pure nothrow @nogc\n+    {\n+        return _ALIGN(cmsghdr.sizeof) + _ALIGN(len);\n+    }\n+\n     struct linger\n     {\n         int l_onoff;"}, {"sha": "22f4df66455efa9c8fa84b24fb9ca1f8545fea54", "filename": "libphobos/libdruntime/core/sys/posix/sys/stat.d", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fstat.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fstat.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fstat.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -89,7 +89,7 @@ version (linux)\n             off_t       st_size;\n             blksize_t   st_blksize;\n             blkcnt_t    st_blocks;\n-            static if (__USE_MISC || __USE_XOPEN2K8)\n+            static if (_DEFAULT_SOURCE || _XOPEN_SOURCE >= 700)\n             {\n                 timespec    st_atim;\n                 timespec    st_mtim;\n@@ -136,7 +136,7 @@ version (linux)\n             off_t       st_size;\n             blksize_t   st_blksize;\n             blkcnt_t    st_blocks;\n-            static if (__USE_MISC || __USE_XOPEN2K8)\n+            static if (_DEFAULT_SOURCE || _XOPEN_SOURCE >= 700)\n             {\n                 timespec    st_atim;\n                 timespec    st_mtim;\n@@ -218,7 +218,7 @@ version (linux)\n                 __blkcnt64_t st_blocks;\n             }\n \n-            static if ( __USE_MISC || __USE_XOPEN2K8)\n+            static if ( _DEFAULT_SOURCE || _XOPEN_SOURCE >= 700)\n             {\n                 __timespec st_atim;\n                 __timespec st_mtim;\n@@ -278,7 +278,7 @@ version (linux)\n                 c_long[3]   st_pad2;\n                 off_t       st_size;\n             }\n-            static if (__USE_MISC || __USE_XOPEN2K8)\n+            static if (_DEFAULT_SOURCE || _XOPEN_SOURCE >= 700)\n             {\n                 timespec    st_atim;\n                 timespec    st_mtim;\n@@ -339,7 +339,7 @@ version (linux)\n                 uint[3]     st_pad2;\n                 off_t       st_size;\n             }\n-            static if (__USE_MISC || __USE_XOPEN2K8)\n+            static if (_DEFAULT_SOURCE || _XOPEN_SOURCE >= 700)\n             {\n                 timespec    st_atim;\n                 timespec    st_mtim;\n@@ -491,7 +491,7 @@ version (linux)\n                 __blkcnt_t st_blocks;\n             }\n \n-            static if (__USE_MISC)\n+            static if (_DEFAULT_SOURCE)\n             {\n                 __timespec st_atim;\n                 __timespec st_mtim;\n@@ -573,7 +573,7 @@ version (linux)\n                 __blkcnt64_t st_blocks;\n             }\n \n-            static if ( __USE_MISC || __USE_XOPEN2K8)\n+            static if ( _DEFAULT_SOURCE || _XOPEN_SOURCE >= 700)\n             {\n                 __timespec st_atim;\n                 __timespec st_mtim;\n@@ -668,7 +668,7 @@ version (linux)\n                 __blkcnt64_t st_blocks;\n             }\n \n-            static if (__USE_MISC)\n+            static if (_DEFAULT_SOURCE)\n             {\n                 __timespec st_atim;\n                 __timespec st_mtim;\n@@ -753,7 +753,7 @@ version (linux)\n                 __blkcnt64_t st_blocks;\n             }\n \n-            static if (__USE_XOPEN2K8)\n+            static if (_XOPEN_SOURCE >= 700)\n             {\n                 __timespec st_atim;\n                 __timespec st_mtim;\n@@ -830,7 +830,7 @@ version (linux)\n                 __blkcnt_t st_blocks;\n             else\n                 __blkcnt64_t st_blocks;\n-            static if (__USE_XOPEN2K8)\n+            static if (_XOPEN_SOURCE >= 700)\n             {\n                 __timespec st_atim;\n                 __timespec st_mtim;\n@@ -894,7 +894,7 @@ version (linux)\n             int __glibc_reserved0;\n             __dev_t st_rdev;\n             __off_t st_size;\n-            static if (__USE_XOPEN2K8)\n+            static if (_XOPEN_SOURCE >= 700)\n             {\n                 __timespec st_atim;\n                 __timespec st_mtim;\n@@ -919,7 +919,7 @@ version (linux)\n             __blkcnt_t st_blocks;\n             c_long[3] __glibc_reserved;\n         }\n-        static if (__USE_XOPEN2K8)\n+        static if (_XOPEN_SOURCE >= 700)\n             static assert(stat_t.sizeof == 144);\n         else\n             static assert(stat_t.sizeof == 144);"}, {"sha": "df9030d6e5b997ea8d81444ff045838e6ff92603", "filename": "libphobos/libdruntime/core/sys/posix/sys/statvfs.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fstatvfs.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fstatvfs.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fstatvfs.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -44,7 +44,7 @@ version (CRuntime_Glibc) {\n     }\n     /* Definitions for the flag in `f_flag'.  These definitions should be\n       kept in sync with the definitions in <sys/mount.h>.  */\n-    static if (__USE_GNU)\n+    static if (_GNU_SOURCE)\n     {\n         enum FFlag\n         {"}, {"sha": "ec229dd3b2b2f11469756ec0c1d00eacba277136", "filename": "libphobos/libdruntime/core/sys/posix/sys/types.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Ftypes.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Ftypes.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Ftypes.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -322,7 +322,7 @@ else version (Darwin)\n     alias uint   fsfilcnt_t;\n     alias c_long clock_t;\n     alias uint   id_t;\n-    // key_t\n+    alias int    key_t;\n     alias int    suseconds_t;\n     alias uint   useconds_t;\n }"}, {"sha": "cf7cf967aa6adb2bc5901298ff33ba79e2a9329d", "filename": "libphobos/libdruntime/object.d", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Flibdruntime%2Fobject.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Flibdruntime%2Fobject.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fobject.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -1885,8 +1885,8 @@ class TypeInfo_Struct : TypeInfo\n             return false;\n         else if (xopEquals)\n         {\n-            const dg = _memberFunc(p2, xopEquals);\n-            return dg.xopEquals(p1);\n+            const dg = _memberFunc(p1, xopEquals);\n+            return dg.xopEquals(p2);\n         }\n         else if (p1 == p2)\n             return true;"}, {"sha": "7b55693a720de6184bc363c79af80336fb9bfede", "filename": "libphobos/libdruntime/rt/util/typeinfo.d", "status": "modified", "additions": 105, "deletions": 184, "changes": 289, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Flibdruntime%2Frt%2Futil%2Ftypeinfo.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Flibdruntime%2Frt%2Futil%2Ftypeinfo.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Frt%2Futil%2Ftypeinfo.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -1,109 +1,83 @@\n /**\n- * This module contains utilities for TypeInfo implementation.\n+ * A few predefined implementations for primitive types and arrays thereof. Also a couple of helpers.\n  *\n  * Copyright: Copyright Kenji Hara 2014-.\n- * License:   <a href=\"http://www.boost.org/LICENSE_1_0.txt\">Boost License 1.0</a>.\n+ * License:   <a href=\"https://boost.org/LICENSE_1_0.txt\">Boost License 1.0</a>.\n  * Authors:   Kenji Hara\n  * Source: $(DRUNTIMESRC rt/util/_typeinfo.d)\n  */\n module rt.util.typeinfo;\n import rt.util.utility : d_cfloat, d_cdouble, d_creal, isComplex;\n static import core.internal.hash;\n \n-template Floating(T)\n-if (is(T == float) || is(T == double) || is(T == real))\n+// Three-way compare for integrals: negative if `lhs < rhs`, positive if `lhs > rhs`, 0 otherwise.\n+pragma(inline, true)\n+private int cmp3(T)(const T lhs, const T rhs)\n+if (__traits(isIntegral, T))\n {\n-  pure nothrow @safe:\n-\n-    bool equals(T f1, T f2)\n-    {\n-        return f1 == f2;\n-    }\n-\n-    int compare(T d1, T d2)\n-    {\n-        if (d1 != d1 || d2 != d2) // if either are NaN\n-        {\n-            if (d1 != d1)\n-            {\n-                if (d2 != d2)\n-                    return 0;\n-                return -1;\n-            }\n-            return 1;\n-        }\n-        return (d1 == d2) ? 0 : ((d1 < d2) ? -1 : 1);\n-    }\n+    static if (T.sizeof < int.sizeof)\n+        // Taking the difference will always fit in an int.\n+        return int(lhs) - int(rhs);\n+    else\n+        return (lhs > rhs) - (lhs < rhs);\n+}\n \n-    public alias hashOf = core.internal.hash.hashOf;\n+// Three-way compare for real fp types. NaN is smaller than all valid numbers.\n+// Code is small and fast, see https://godbolt.org/z/fzb877\n+pragma(inline, true)\n+private int cmp3(T)(const T d1, const T d2)\n+if (is(T == float) || is(T == double) || is(T == real))\n+{\n+    if (d2 != d2)\n+        return d1 == d1; // 0 if both ar NaN, 1 if d1 is valid and d2 is NaN.\n+    // If d1 is NaN, both comparisons are false so we get -1, as needed.\n+    return (d1 > d2) - !(d1 >= d2);\n }\n \n-// @@@DEPRECATED_2.105@@@\n-template Floating(T)\n+// Three-way compare for complex types.\n+pragma(inline, true)\n+private int cmp3(T)(const T f1, const T f2)\n if (isComplex!T)\n {\n-  pure nothrow @safe:\n-\n-    bool equals(T f1, T f2)\n-    {\n-        return f1.re == f2.re && f1.im == f2.im;\n-    }\n-\n-    int compare(T f1, T f2)\n-    {\n-        int result;\n-\n-        if (f1.re < f2.re)\n-            result = -1;\n-        else if (f1.re > f2.re)\n-            result = 1;\n-        else if (f1.im < f2.im)\n-            result = -1;\n-        else if (f1.im > f2.im)\n-            result = 1;\n-        else\n-            result = 0;\n+    if (int result = cmp3(f1.re, f2.re))\n         return result;\n-    }\n-\n-    size_t hashOf(scope const T val)\n-    {\n-        return core.internal.hash.hashOf(val.re, core.internal.hash.hashOf(val.im));\n-    }\n+    return cmp3(f1.im, f2.im);\n }\n \n-template Array(T)\n-if (is(T == float) || is(T == double) || is(T == real))\n+unittest\n {\n-  pure nothrow @safe:\n-\n-    bool equals(T[] s1, T[] s2)\n-    {\n-        size_t len = s1.length;\n-        if (len != s2.length)\n-            return false;\n-        for (size_t u = 0; u < len; u++)\n-        {\n-            if (!Floating!T.equals(s1[u], s2[u]))\n-                return false;\n-        }\n-        return true;\n-    }\n-\n-    int compare(T[] s1, T[] s2)\n-    {\n-        size_t len = s1.length;\n-        if (s2.length < len)\n-            len = s2.length;\n-        for (size_t u = 0; u < len; u++)\n-        {\n-            if (int c = Floating!T.compare(s1[u], s2[u]))\n-                return c;\n-        }\n-        return (s1.length > s2.length) - (s1.length < s2.length);\n-    }\n-\n-    public alias hashOf = core.internal.hash.hashOf;\n+    assert(cmp3(short.max, short.min) > 0);\n+    assert(cmp3(42, 42) == 0);\n+    assert(cmp3(int.max, int.min) > 0);\n+\n+    double x, y;\n+    assert(cmp3(x, y) == 0);\n+    assert(cmp3(y, x) == 0);\n+    x = 42;\n+    assert(cmp3(x, y) > 0);\n+    assert(cmp3(y, x) < 0);\n+    y = 43;\n+    assert(cmp3(x, y) < 0);\n+    assert(cmp3(y, x) > 0);\n+    y = 42;\n+    assert(cmp3(x, y) == 0);\n+    assert(cmp3(y, x) == 0);\n+\n+    d_cdouble u, v;\n+    assert(cmp3(u, v) == 0);\n+    assert(cmp3(v, u) == 0);\n+    u = d_cdouble(42, 42);\n+    assert(cmp3(u, v) > 0);\n+    assert(cmp3(v, u) < 0);\n+    v = d_cdouble(43, 42);\n+    assert(cmp3(u, v) < 0);\n+    assert(cmp3(v, u) > 0);\n+    v = d_cdouble(42, 43);\n+    assert(cmp3(u, v) < 0);\n+    assert(cmp3(v, u) > 0);\n+    v = d_cdouble(42, 42);\n+    assert(cmp3(u, v) == 0);\n+    assert(cmp3(v, u) == 0);\n }\n \n // @@@DEPRECATED_2.105@@@\n@@ -209,7 +183,7 @@ unittest\n     }();\n }\n \n-// Reduces to `T` if `cond` is `true` or `U` otherwise.\n+// Reduces to `T` if `cond` is `true` or `U` otherwise. Consider moving elsewhere if useful.\n private template Select(bool cond, T, U)\n {\n     static if (cond) alias Select = T;\n@@ -238,57 +212,38 @@ if (T.sizeof == Base.sizeof && T.alignof == Base.alignof)\n     static if (is(T == Base))\n         override size_t getHash(scope const void* p)\n         {\n-            static if (__traits(isFloating, T) || isComplex!T)\n-                return Floating!T.hashOf(*cast(T*)p);\n-            else\n-                return hashOf(*cast(const T *)p);\n+            return hashOf(*cast(const T *)p);\n         }\n \n     // `equals` is the same for `Base` and `T`, introduce it just once.\n     static if (is(T == Base))\n         override bool equals(in void* p1, in void* p2)\n         {\n-            static if (__traits(isFloating, T) || isComplex!T)\n-                return Floating!T.equals(*cast(T*)p1, *cast(T*)p2);\n-            else\n-                return *cast(T *)p1 == *cast(T *)p2;\n+            return *cast(const T *)p1 == *cast(const T *)p2;\n         }\n \n     // `T` and `Base` may have different signedness, so this function is introduced conditionally.\n     static if (is(T == Base) || (__traits(isIntegral, T) && T.max != Base.max))\n         override int compare(in void* p1, in void* p2)\n         {\n-            static if (__traits(isFloating, T) || isComplex!T)\n-            {\n-                return Floating!T.compare(*cast(T*)p1, *cast(T*)p2);\n-            }\n-            else static if (T.sizeof < int.sizeof)\n-            {\n-                // Taking the difference will always fit in an int.\n-                return int(*cast(T *) p1) - int(*cast(T *) p2);\n-            }\n-            else\n-            {\n-                auto lhs = *cast(T *) p1, rhs = *cast(T *) p2;\n-                return (lhs > rhs) - (lhs < rhs);\n-            }\n+            return cmp3(*cast(const T*) p1, *cast(const T*) p2);\n         }\n \n     static if (is(T == Base))\n-        override @property size_t tsize() nothrow pure\n+        override @property size_t tsize()\n         {\n             return T.sizeof;\n         }\n \n     static if (is(T == Base))\n-        override @property size_t talign() nothrow pure\n+        override @property size_t talign()\n         {\n             return T.alignof;\n         }\n \n     // Override initializer only if necessary.\n     static if (is(T == Base) || T.init != Base.init)\n-        override const(void)[] initializer() @trusted\n+        override const(void)[] initializer()\n         {\n             static if (__traits(isZeroInit, T))\n             {\n@@ -311,7 +266,7 @@ if (T.sizeof == Base.sizeof && T.alignof == Base.alignof)\n         }\n \n     static if (is(T == Base) || RTInfo!T != RTInfo!Base)\n-        override @property immutable(void)* rtInfo() nothrow pure const @safe\n+        override @property immutable(void)* rtInfo()\n         {\n             return RTInfo!T;\n         }\n@@ -377,52 +332,33 @@ private class TypeInfoArrayGeneric(T, Base = T) : Select!(is(T == Base), TypeInf\n     static if (is(T == Base))\n         override size_t getHash(scope const void* p) @trusted const\n         {\n-            static if (__traits(isFloating, T) || isComplex!T)\n-                return Array!T.hashOf(*cast(T[]*)p);\n-            else\n-                return hashOf(*cast(const T[]*) p);\n+            return hashOf(*cast(const T[]*) p);\n         }\n \n     static if (is(T == Base))\n         override bool equals(in void* p1, in void* p2) const\n         {\n-            static if (__traits(isFloating, T) || isComplex!T)\n-            {\n-                return Array!T.equals(*cast(T[]*)p1, *cast(T[]*)p2);\n-            }\n-            else\n-            {\n-                import core.stdc.string;\n-                auto s1 = *cast(T[]*)p1;\n-                auto s2 = *cast(T[]*)p2;\n-                return s1.length == s2.length &&\n-                    memcmp(s1.ptr, s2.ptr, s1.length) == 0;\n-            }\n+            // Just reuse the builtin.\n+            return *cast(const(T)[]*) p1 == *cast(const(T)[]*) p2;\n         }\n \n     static if (is(T == Base) || (__traits(isIntegral, T) && T.max != Base.max))\n         override int compare(in void* p1, in void* p2) const\n         {\n-            static if (__traits(isFloating, T) || isComplex!T)\n-            {\n-                return Array!T.compare(*cast(T[]*)p1, *cast(T[]*)p2);\n-            }\n-            else\n+            // Can't reuse __cmp in object.d because that handles NaN differently.\n+            // (Q: would it make sense to unify behaviors?)\n+            // return __cmp(*cast(const T[]*) p1, *cast(const T[]*) p2);\n+            auto lhs = *cast(const T[]*) p1;\n+            auto rhs = *cast(const T[]*) p2;\n+            size_t len = lhs.length;\n+            if (rhs.length < len)\n+                len = rhs.length;\n+            for (size_t u = 0; u < len; u++)\n             {\n-                auto s1 = *cast(T[]*)p1;\n-                auto s2 = *cast(T[]*)p2;\n-                auto len = s1.length;\n-\n-                if (s2.length < len)\n-                    len = s2.length;\n-                for (size_t u = 0; u < len; u++)\n-                {\n-                    if (int result = (s1[u] > s2[u]) - (s1[u] < s2[u]))\n-                        return result;\n-                }\n-                return (s1.length > s2.length) - (s1.length < s2.length);\n+                if (int result = cmp3(lhs.ptr[u], rhs.ptr[u]))\n+                    return result;\n             }\n-        }\n+            return cmp3(lhs.length, rhs.length);        }\n \n     override @property inout(TypeInfo) next() inout\n     {\n@@ -692,52 +628,37 @@ unittest\n // typeof(null)\n class TypeInfo_n : TypeInfo\n {\n-    override string toString() const @safe { return \"typeof(null)\"; }\n+    const: pure: @nogc: nothrow: @safe:\n \n-    override size_t getHash(scope const void* p) const\n-    {\n-        return 0;\n-    }\n+    override string toString() { return \"typeof(null)\"; }\n \n-    override bool equals(in void* p1, in void* p2) const @trusted\n-    {\n-        return true;\n-    }\n+    override size_t getHash(scope const void*) { return 0; }\n \n-    override int compare(in void* p1, in void* p2) const @trusted\n-    {\n-        return 0;\n-    }\n+    override bool equals(in void*, in void*) { return true; }\n \n-    override @property size_t tsize() const\n-    {\n-        return typeof(null).sizeof;\n-    }\n+    override int compare(in void*, in void*) { return 0; }\n \n-    override const(void)[] initializer() const @trusted\n-    {\n-        __gshared immutable void[typeof(null).sizeof] init;\n-        return init;\n-    }\n+    override @property size_t tsize() { return typeof(null).sizeof; }\n \n-    override void swap(void *p1, void *p2) const @trusted\n-    {\n-    }\n+    override const(void)[] initializer() @trusted { return (cast(void *)null)[0 .. size_t.sizeof]; }\n \n-    override @property immutable(void)* rtInfo() nothrow pure const @safe { return rtinfoNoPointers; }\n+    override void swap(void*, void*) {}\n \n-    unittest\n+    override @property immutable(void)* rtInfo() { return rtinfoNoPointers; }\n+}\n+\n+unittest\n+{\n+    with (typeid(typeof(null)))\n     {\n-        with (typeid(typeof(null)))\n-        {\n-            assert(toString == \"typeof(null)\");\n-            assert(getHash(null) == 0);\n-            assert(equals(null, null));\n-            assert(compare(null, null) == 0);\n-            assert(tsize == typeof(null).sizeof);\n-            assert(initializer == new ubyte[(void*).sizeof]);\n-            assert(rtInfo == rtinfoNoPointers);\n-        }\n+        assert(toString == \"typeof(null)\");\n+        assert(getHash(null) == 0);\n+        assert(equals(null, null));\n+        assert(compare(null, null) == 0);\n+        assert(tsize == typeof(null).sizeof);\n+        assert(initializer.ptr is null);\n+        assert(initializer.length == typeof(null).sizeof);\n+        assert(rtInfo == rtinfoNoPointers);\n     }\n }\n "}, {"sha": "b5b939f41b314d1a9767ef8bc866b3aa5d6994e6", "filename": "libphobos/src/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Fsrc%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Fsrc%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2FMERGE?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -1,4 +1,4 @@\n-896b1d0e1e8b69bccac0e180ecd1b42a70f95d5b\n+1a3e80ec25afab6123cdcfe20186f36f006b68bb\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/phobos repository."}, {"sha": "6b45599524e1e6816565793e333a8aa655e44bc8", "filename": "libphobos/src/std/algorithm/internal.d", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Fsrc%2Fstd%2Falgorithm%2Finternal.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Fsrc%2Fstd%2Falgorithm%2Finternal.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Falgorithm%2Finternal.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -62,4 +62,6 @@ version (StdUnittest)\n     }\n }\n \n+// Used instead of `&object.member` when `member` may be\n+// either a field or a @property function.\n package(std) T* addressOf(T)(ref T val) { return &val; }"}, {"sha": "b2fcc07142bacb5f79d33669475d115439520477", "filename": "libphobos/src/std/bigint.d", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Fsrc%2Fstd%2Fbigint.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Fsrc%2Fstd%2Fbigint.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Fbigint.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -414,17 +414,17 @@ public:\n     /**\n      * Implements assignment operators of the form `BigInt op= BigInt`.\n      */\n-    BigInt opOpAssign(string op, T)(T y) pure nothrow @safe scope return\n+    BigInt opOpAssign(string op, T)(T y) pure nothrow @safe return scope\n         if ((op==\"+\" || op== \"-\" || op==\"*\" || op==\"|\" || op==\"&\" || op==\"^\" || op==\"/\" || op==\"%\")\n             && is (T: BigInt))\n     {\n         static if (op == \"+\")\n         {\n-            data = BigUint.addOrSub(data, y.data, sign != y.sign, &sign);\n+            data = BigUint.addOrSub(data, y.data, sign != y.sign, sign);\n         }\n         else static if (op == \"-\")\n         {\n-            data = BigUint.addOrSub(data, y.data, sign == y.sign, &sign);\n+            data = BigUint.addOrSub(data, y.data, sign == y.sign, sign);\n         }\n         else static if (op == \"*\")\n         {\n@@ -2244,7 +2244,7 @@ void divMod(const BigInt dividend, const BigInt divisor, out BigInt quotient, ou\n     BigUint.divMod(dividend.data, divisor.data, q, r);\n     quotient.sign = dividend.sign != divisor.sign;\n     quotient.data = q;\n-    remainder.sign = dividend.sign;\n+    remainder.sign = r.isZero() ? false : dividend.sign;\n     remainder.data = r;\n }\n \n@@ -2291,6 +2291,14 @@ void divMod(const BigInt dividend, const BigInt divisor, out BigInt quotient, ou\n     assert(q * d + r == -c);\n }\n \n+// https://issues.dlang.org/show_bug.cgi?id=22771\n+@safe pure nothrow unittest\n+{\n+    BigInt quotient, remainder;\n+    divMod(BigInt(-50), BigInt(1), quotient, remainder);\n+    assert(remainder == 0);\n+}\n+\n // https://issues.dlang.org/show_bug.cgi?id=19740\n @safe unittest\n {"}, {"sha": "622dee4df2f4edd5fbcaf45aabe4cbd76e33c2b2", "filename": "libphobos/src/std/container/rbtree.d", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Fsrc%2Fstd%2Fcontainer%2Frbtree.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Fsrc%2Fstd%2Fcontainer%2Frbtree.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Fcontainer%2Frbtree.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -111,23 +111,23 @@ struct RBNode(V)\n     /**\n      * Get the left child\n      */\n-    @property inout(RBNode)* left() inout\n+    @property inout(RBNode)* left() inout return scope\n     {\n         return _left;\n     }\n \n     /**\n      * Get the right child\n      */\n-    @property inout(RBNode)* right() inout\n+    @property inout(RBNode)* right() inout return scope\n     {\n         return _right;\n     }\n \n     /**\n      * Get the parent\n      */\n-    @property inout(RBNode)* parent() inout\n+    @property inout(RBNode)* parent() inout return scope\n     {\n         return _parent;\n     }\n@@ -377,7 +377,7 @@ struct RBNode(V)\n      * Returns the next highest valued node in the tree after this one, or end\n      * if this was the highest-valued node.\n      */\n-    Node remove(Node end)\n+    Node remove(Node end) return\n     {\n         //\n         // remove this node from the tree, fixing the color if necessary.\n@@ -558,7 +558,7 @@ struct RBNode(V)\n     /**\n      * Return the leftmost descendant of this node.\n      */\n-    @property inout(RBNode)* leftmost() inout\n+    @property inout(RBNode)* leftmost() inout return\n     {\n         inout(RBNode)* result = &this;\n         while (result._left !is null)\n@@ -569,7 +569,7 @@ struct RBNode(V)\n     /**\n      * Return the rightmost descendant of this node\n      */\n-    @property inout(RBNode)* rightmost() inout\n+    @property inout(RBNode)* rightmost() inout return\n     {\n         inout(RBNode)* result = &this;\n         while (result._right !is null)\n@@ -583,7 +583,7 @@ struct RBNode(V)\n      * You should never call this on the marker node, as it is assumed that\n      * there is a valid next node.\n      */\n-    @property inout(RBNode)* next() inout\n+    @property inout(RBNode)* next() inout return\n     {\n         inout(RBNode)* n = &this;\n         if (n.right is null)\n@@ -602,7 +602,7 @@ struct RBNode(V)\n      * You should never call this on the leftmost node of the tree as it is\n      * assumed that there is a valid previous node.\n      */\n-    @property inout(RBNode)* prev() inout\n+    @property inout(RBNode)* prev() inout return\n     {\n         inout(RBNode)* n = &this;\n         if (n.left is null)"}, {"sha": "8512a445daff75f9148a199f8a0cb63b7557189b", "filename": "libphobos/src/std/conv.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Fsrc%2Fstd%2Fconv.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Fsrc%2Fstd%2Fconv.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Fconv.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -1642,7 +1642,7 @@ if (!isImplicitlyConvertible!(S, T) &&\n Array-to-array conversion (except when target is a string type)\n converts each element in turn by using `to`.\n  */\n-private T toImpl(T, S)(S value)\n+private T toImpl(T, S)(scope S value)\n if (!isImplicitlyConvertible!(S, T) &&\n     !isSomeString!S && isDynamicArray!S &&\n     !isExactSomeString!T && isArray!T)"}, {"sha": "a99c5170afbfb0b5d40baa2d7f7c86c33ecb9907", "filename": "libphobos/src/std/file.d", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Fsrc%2Fstd%2Ffile.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Fsrc%2Fstd%2Ffile.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Ffile.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -4635,7 +4635,7 @@ private struct DirIteratorImpl\n             import std.path : chainPath;\n             auto searchPattern = chainPath(directory, \"*.*\");\n \n-            static auto trustedFindFirstFileW(typeof(searchPattern) pattern, WIN32_FIND_DATAW* findinfo) @trusted\n+            static auto trustedFindFirstFileW(typeof(searchPattern) pattern, scope WIN32_FIND_DATAW* findinfo) @trusted\n             {\n                 return FindFirstFileW(pattern.tempCString!FSChar(), findinfo);\n             }\n@@ -4653,7 +4653,7 @@ private struct DirIteratorImpl\n             return toNext(true, &_findinfo);\n         }\n \n-        bool toNext(bool fetch, WIN32_FIND_DATAW* findinfo) @trusted\n+        bool toNext(bool fetch, scope WIN32_FIND_DATAW* findinfo) @trusted\n         {\n             import core.stdc.wchar_ : wcscmp;\n \n@@ -5274,7 +5274,21 @@ Returns:\n */\n string tempDir() @trusted\n {\n-    import std.path : dirSeparator;\n+    // We must check that the end of a path is not a separator, before adding another\n+    // If we don't we end up with https://issues.dlang.org/show_bug.cgi?id=22738\n+    static string addSeparator(string input)\n+    {\n+        import std.path : dirSeparator;\n+        import std.algorithm.searching : endsWith;\n+\n+        // It is very rare a directory path will reach this point with a directory separator at the end\n+        // However on OSX this can happen, so we must verify lest we break user code i.e. https://github.com/dlang/dub/pull/2208\n+        if (!input.endsWith(dirSeparator))\n+            return input ~ dirSeparator;\n+        else\n+            return input;\n+    }\n+\n     static string cache;\n     if (cache is null)\n     {\n@@ -5294,7 +5308,7 @@ string tempDir() @trusted\n             static string findExistingDir(T...)(lazy T alternatives)\n             {\n                 foreach (dir; alternatives)\n-                    if (!dir.empty && exists(dir)) return dir ~ dirSeparator;\n+                    if (!dir.empty && exists(dir)) return addSeparator(dir);\n                 return null;\n             }\n \n@@ -5309,7 +5323,7 @@ string tempDir() @trusted\n \n         if (cache is null)\n         {\n-            cache = getcwd() ~ dirSeparator;\n+            cache = addSeparator(getcwd());\n         }\n     }\n     return cache;\n@@ -5338,6 +5352,9 @@ string tempDir() @trusted\n     import std.algorithm.searching : endsWith;\n     import std.path : dirSeparator;\n     assert(tempDir.endsWith(dirSeparator));\n+\n+    // https://issues.dlang.org/show_bug.cgi?id=22738\n+    assert(!tempDir.endsWith(dirSeparator ~ dirSeparator));\n }\n \n /**"}, {"sha": "da698e045fe3f21e4ed2ccd557ab7f9b044eee35", "filename": "libphobos/src/std/functional.d", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Fsrc%2Fstd%2Ffunctional.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Fsrc%2Fstd%2Ffunctional.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Ffunctional.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -68,6 +68,8 @@ import std.traits : isCallable, Parameters;\n \n import std.internal.attributes : betterC;\n \n+public import core.lifetime : forward;\n+\n private template needOpCallAlias(alias fun)\n {\n     /* Determine whether or not unaryFun and binaryFun need to alias to fun or\n@@ -1845,10 +1847,3 @@ if (isCallable!(F))\n         static assert(! is(typeof(dg_xtrnC) == typeof(dg_xtrnD)));\n     }\n }\n-\n-// forward used to be here but was moved to druntime\n-template forward(args...)\n-{\n-    import core.lifetime : fun = forward;\n-    alias forward = fun!args;\n-}"}, {"sha": "d5c4768f064232169ec78cc1508c30b698ff642a", "filename": "libphobos/src/std/internal/math/biguintcore.d", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Fsrc%2Fstd%2Finternal%2Fmath%2Fbiguintcore.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Fsrc%2Fstd%2Finternal%2Fmath%2Fbiguintcore.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Finternal%2Fmath%2Fbiguintcore.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -813,7 +813,7 @@ public:\n \n     // If wantSub is false, return x + y, leaving sign unchanged.\n     // If wantSub is true, return abs(x - y), negating sign if x<y\n-    static BigUint addOrSub(scope BigUint x, scope BigUint y, bool wantSub, bool *sign)\n+    static BigUint addOrSub(scope BigUint x, scope BigUint y, bool wantSub, ref bool sign)\n         pure nothrow @safe\n     {\n         BigUint r;\n@@ -822,10 +822,10 @@ public:\n             bool negative;\n             // sub returns GC allocated array, can be safely cast to immutable\n             r.data = (() @trusted => cast(immutable) sub(x.data, y.data, &negative))();\n-            *sign ^= negative;\n+            sign ^= negative;\n             if (r.isZero())\n             {\n-                *sign = false;\n+                sign = false;\n             }\n         }\n         else"}, {"sha": "cd2323281d3fb075bb1a7bb258da51db0d589c45", "filename": "libphobos/src/std/socket.d", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Fsrc%2Fstd%2Fsocket.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Fsrc%2Fstd%2Fsocket.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Fsocket.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -787,13 +787,20 @@ class InternetHost\n     assert(ih.name == \"www.digitalmars.com\" || ih.name == \"digitalmars.com\",\n             ih.name);\n \n-    assert(ih.getHostByAddr(ih.addrList[0]));\n-    string getHostNameFromInt = ih.name.dup;\n+    /* The following assert randomly fails in the test suite.\n+     * https://issues.dlang.org/show_bug.cgi?id=22791\n+     * So just ignore it when it fails.\n+     */\n+    //assert(ih.getHostByAddr(ih.addrList[0]));\n+    if (ih.getHostByAddr(ih.addrList[0]))\n+    {\n+        string getHostNameFromInt = ih.name.dup;\n \n-    assert(ih.getHostByAddr(ia.toAddrString()));\n-    string getHostNameFromStr = ih.name.dup;\n+        assert(ih.getHostByAddr(ia.toAddrString()));\n+        string getHostNameFromStr = ih.name.dup;\n \n-    assert(getHostNameFromInt == getHostNameFromStr);\n+        assert(getHostNameFromInt == getHostNameFromStr);\n+    }\n }\n \n "}, {"sha": "5e35a6b9cd570f05618a7f028a67bb69a951fb85", "filename": "libphobos/src/std/sumtype.d", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Fsrc%2Fstd%2Fsumtype.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Fsrc%2Fstd%2Fsumtype.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Fsumtype.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -262,6 +262,8 @@ private enum isHashable(T) = __traits(compiles,\n \n private enum hasPostblit(T) = __traits(hasPostblit, T);\n \n+private enum isInout(T) = is(T == inout);\n+\n /**\n  * A [tagged union](https://en.wikipedia.org/wiki/Tagged_union) that can hold a\n  * single value from any of a specified set of types.\n@@ -419,6 +421,7 @@ public:\n         (\n             allSatisfy!(isCopyable, Map!(InoutOf, Types))\n             && !anySatisfy!(hasPostblit, Map!(InoutOf, Types))\n+            && allSatisfy!(isInout, Map!(InoutOf, Types))\n         )\n         {\n             /// Constructs a `SumType` that's a copy of another `SumType`.\n@@ -1492,6 +1495,23 @@ version (D_BetterC) {} else\n     immutable SumType!(int*) si = &ni;\n }\n \n+// Immutable member type with copy constructor\n+// https://issues.dlang.org/show_bug.cgi?id=22572\n+@safe unittest\n+{\n+    static struct CopyConstruct\n+    {\n+        this(ref inout CopyConstruct other) inout {}\n+    }\n+\n+    static immutable struct Value\n+    {\n+        CopyConstruct c;\n+    }\n+\n+    SumType!Value s;\n+}\n+\n /// True if `T` is an instance of the `SumType` template, otherwise false.\n private enum bool isSumTypeInstance(T) = is(T == SumType!Args, Args...);\n "}, {"sha": "ea8f8bd054551d6eed125f9424f320c1d640647e", "filename": "libphobos/src/std/typecons.d", "status": "modified", "additions": 34, "deletions": 8, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Fsrc%2Fstd%2Ftypecons.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Fsrc%2Fstd%2Ftypecons.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Ftypecons.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -2798,13 +2798,24 @@ struct Nullable(T)\n         }\n     }\n \n-    this (ref return scope inout Nullable!T rhs) inout\n+    static if (__traits(hasPostblit, T))\n     {\n-        _isNull = rhs._isNull;\n-        if (!_isNull)\n-            _value.payload = rhs._value.payload;\n-        else\n-            _value = DontCallDestructorT.init;\n+        this(this)\n+        {\n+            if (!_isNull)\n+                _value.payload.__xpostblit();\n+        }\n+    }\n+    else static if (__traits(hasCopyConstructor, T))\n+    {\n+        this(ref return scope inout Nullable!T rhs) inout\n+        {\n+            _isNull = rhs._isNull;\n+            if (!_isNull)\n+                _value.payload = rhs._value.payload;\n+            else\n+                _value = DontCallDestructorT.init;\n+        }\n     }\n \n     /**\n@@ -9630,13 +9641,28 @@ unittest\n     {\n         int b;\n         @disable this(this);\n-        this (ref return scope inout S rhs) inout\n+        this(ref return scope inout S rhs) inout\n         {\n             this.b = rhs.b + 1;\n         }\n     }\n \n     Nullable!S s1 = S(1);\n+    assert(s1.get().b == 2);\n+    Nullable!S s2 = s1;\n+    assert(s2.get().b == 3);\n+}\n+\n+@safe unittest\n+{\n+    static struct S\n+    {\n+        int b;\n+        this(this) { ++b; }\n+    }\n+\n+    Nullable!S s1 = S(1);\n+    assert(s1.get().b == 2);\n     Nullable!S s2 = s1;\n-    assert(s2.get().b > s1.get().b);\n+    assert(s2.get().b == 3);\n }"}, {"sha": "9780b1b318f82e1fe8364205aae1b0cc3817aeb7", "filename": "libphobos/src/std/uni/package.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Fsrc%2Fstd%2Funi%2Fpackage.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Fsrc%2Fstd%2Funi%2Fpackage.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Funi%2Fpackage.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -5363,7 +5363,7 @@ pure @safe unittest\n pure @safe unittest\n {\n     import std.range : stride;\n-    static bool testAll(Matcher, Range)(scope ref Matcher m, ref Range r)\n+    static bool testAll(Matcher, Range)(ref Matcher m, ref Range r) @safe\n     {\n         bool t = m.test(r);\n         auto save = r.idx;"}, {"sha": "72d128700bf19d74157d185e7f6fd451c73f854f", "filename": "libphobos/src/std/zip.d", "status": "modified", "additions": 1, "deletions": 34, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Fsrc%2Fstd%2Fzip.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Fsrc%2Fstd%2Fzip.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Fzip.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -221,14 +221,6 @@ final class ArchiveMember\n      */\n     @property @safe pure nothrow @nogc uint expandedSize() const { return _expandedSize; }\n \n-    /**\n-     * Should be 0.\n-     *\n-     * Returns: The number of the disk where this member can be found.\n-     */\n-    deprecated(\"Multidisk not supported; will be removed in 2.099.0\")\n-    @property @safe pure nothrow @nogc ushort diskNumber() const { return 0; }\n-\n     /**\n      * Data of member in compressed form.\n      *\n@@ -452,13 +444,6 @@ public:\n     private bool _isZip64;\n     static const ushort zip64ExtractVersion = 45;\n \n-    deprecated(\"Use digitalSignatureLength instead; will be removed in 2.098.0\")\n-    static const int digiSignLength = 6;\n-    deprecated(\"Use zip64EndOfCentralDirLocatorLength instead; will be removed in 2.098.0\")\n-    static const int eocd64LocLength = 20;\n-    deprecated(\"Use zip64EndOfCentralDirLength instead; will be removed in 2.098.0\")\n-    static const int eocd64Length = 56;\n-\n     private Segment[] _segs;\n \n     /**\n@@ -468,30 +453,12 @@ public:\n      */\n     @property @safe @nogc pure nothrow ubyte[] data() { return _data; }\n \n-    /**\n-     * 0 since multi-disk zip archives are not supported.\n-     *\n-     * Returns: Number of this disk.\n-     */\n-    deprecated(\"Multidisk not supported; will be removed in 2.099.0\")\n-    @property @safe @nogc pure nothrow uint diskNumber() const { return 0; }\n-\n-    /**\n-     * 0 since multi-disk zip archives are not supported.\n-     *\n-     * Returns: Number of the disk, where the central directory starts.\n-     */\n-    deprecated(\"Multidisk not supported; will be removed in 2.099.0\")\n-    @property @safe @nogc pure nothrow uint diskStartDir() const { return 0; }\n-\n     /**\n      * Number of ArchiveMembers in the directory.\n      *\n      * Returns: The number of files in this archive.\n      */\n-    deprecated(\"Use totalEntries instead; will be removed in 2.099.0\")\n-    @property @safe @nogc pure nothrow uint numEntries() const { return cast(uint) _directory.length; }\n-    @property @safe @nogc pure nothrow uint totalEntries() const { return cast(uint) _directory.length; }    /// ditto\n+    @property @safe @nogc pure nothrow uint totalEntries() const { return cast(uint) _directory.length; }\n \n     /**\n      * True when the archive is in Zip64 format. Set this to true to force building a Zip64 archive."}, {"sha": "a0faadd211203537ae8fab7bab0a80af25ccd42b", "filename": "libphobos/testsuite/libphobos.betterc/test19933.d", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Ftestsuite%2Flibphobos.betterc%2Ftest19933.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Ftestsuite%2Flibphobos.betterc%2Ftest19933.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Ftestsuite%2Flibphobos.betterc%2Ftest19933.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -0,0 +1,11 @@\n+/*******************************************/\n+// https://issues.dlang.org/show_bug.cgi?id=19933\n+// https://issues.dlang.org/show_bug.cgi?id=18816\n+\n+import core.stdc.stdio;\n+\n+extern(C) int main()\n+{\n+    fprintf(stderr, \"Hello\\n\");\n+    return 0;\n+}"}, {"sha": "0ad2443c826ea2cfebc9223c893bd9a9cfd7c246", "filename": "libphobos/testsuite/libphobos.hash/test_hash.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Ftestsuite%2Flibphobos.hash%2Ftest_hash.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6384eff56dba1fac071c1b525f7e49cf03f2737f/libphobos%2Ftestsuite%2Flibphobos.hash%2Ftest_hash.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Ftestsuite%2Flibphobos.hash%2Ftest_hash.d?ref=6384eff56dba1fac071c1b525f7e49cf03f2737f", "patch": "@@ -277,7 +277,7 @@ void issue22076()\n     static struct S1\n     {\n         S0 a;\n-        inout(S0)* b() inout nothrow { return &a; }\n+        inout(S0)* b() inout return nothrow { return &a; }\n         alias b this;\n     }\n "}]}