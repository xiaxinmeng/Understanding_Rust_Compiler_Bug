{"sha": "93bcc8c9ff361dbf3f42c9dcced458acfb5e994d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTNiY2M4YzlmZjM2MWRiZjNmNDJjOWRjY2VkNDU4YWNmYjVlOTk0ZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2012-01-24T07:24:34Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2012-01-24T07:24:34Z"}, "message": "re PR target/51957 (ppc64 .debug_loc toc reference)\n\n\tPR target/51957\n\t* target.def (const_not_ok_for_debug_p): New hook.\n\t* doc/tm.texi.in (TARGET_CONST_NOT_OK_FOR_DEBUG_P): New hook\n\tdocumentation.\n\t* doc/tm.texi: Regenerated.\n\t* dwarf2out.c (const_ok_for_output_1): If\n\ttargetm.const_not_ok_for_debug_p returns true, fail.\n\t* config/rs6000/rs6000.c (rs6000_const_not_ok_for_debug_p): New\n\tfunction.\n\t(TARGET_CONST_NOT_OK_FOR_DEBUG_P): Redefine.\n\n\t* gcc.dg/pr51957-1.c: New test.\n\t* gcc.dg/pr51957-1.h: New file.\n\t* gcc.dg/pr51957-2.c: New test.\n\nFrom-SVN: r183468", "tree": {"sha": "98b79c67cec7eff5791d93ba80cf2ec5abb1fbad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/98b79c67cec7eff5791d93ba80cf2ec5abb1fbad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/93bcc8c9ff361dbf3f42c9dcced458acfb5e994d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93bcc8c9ff361dbf3f42c9dcced458acfb5e994d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93bcc8c9ff361dbf3f42c9dcced458acfb5e994d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93bcc8c9ff361dbf3f42c9dcced458acfb5e994d/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9848887afad7b720d100d536ab35deb7d6c4396c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9848887afad7b720d100d536ab35deb7d6c4396c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9848887afad7b720d100d536ab35deb7d6c4396c"}], "stats": {"total": 141, "additions": 141, "deletions": 0}, "files": [{"sha": "6455954d3030b68c23fdad559ae7945295aa59f7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93bcc8c9ff361dbf3f42c9dcced458acfb5e994d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93bcc8c9ff361dbf3f42c9dcced458acfb5e994d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=93bcc8c9ff361dbf3f42c9dcced458acfb5e994d", "patch": "@@ -1,3 +1,16 @@\n+2012-01-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/51957\n+\t* target.def (const_not_ok_for_debug_p): New hook.\n+\t* doc/tm.texi.in (TARGET_CONST_NOT_OK_FOR_DEBUG_P): New hook\n+\tdocumentation.\n+\t* doc/tm.texi: Regenerated.\n+\t* dwarf2out.c (const_ok_for_output_1): If\n+\ttargetm.const_not_ok_for_debug_p returns true, fail.\n+\t* config/rs6000/rs6000.c (rs6000_const_not_ok_for_debug_p): New\n+\tfunction.\n+\t(TARGET_CONST_NOT_OK_FOR_DEBUG_P): Redefine.\n+\n 2012-01-23  Kai Tietz  <ktietz@redhat.com>\n \n \tPR target/51900"}, {"sha": "539cc8b3beeefd66909aa338b97fba9ebb0a4482", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93bcc8c9ff361dbf3f42c9dcced458acfb5e994d/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93bcc8c9ff361dbf3f42c9dcced458acfb5e994d/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=93bcc8c9ff361dbf3f42c9dcced458acfb5e994d", "patch": "@@ -1106,6 +1106,7 @@ static rtx rs6000_debug_legitimize_address (rtx, rtx, enum machine_mode);\n static rtx rs6000_legitimize_tls_address (rtx, enum tls_model);\n static void rs6000_output_dwarf_dtprel (FILE *, int, rtx) ATTRIBUTE_UNUSED;\n static rtx rs6000_delegitimize_address (rtx);\n+static bool rs6000_const_not_ok_for_debug_p (rtx);\n static rtx rs6000_tls_get_addr (void);\n static rtx rs6000_got_sym (void);\n static int rs6000_tls_symbol_ref_1 (rtx *, void *);\n@@ -1405,6 +1406,9 @@ static const struct attribute_spec rs6000_attribute_table[] =\n #undef TARGET_DELEGITIMIZE_ADDRESS\n #define TARGET_DELEGITIMIZE_ADDRESS rs6000_delegitimize_address\n \n+#undef TARGET_CONST_NOT_OK_FOR_DEBUG_P\n+#define TARGET_CONST_NOT_OK_FOR_DEBUG_P rs6000_const_not_ok_for_debug_p\n+\n #undef TARGET_ASM_FUNCTION_PROLOGUE\n #define TARGET_ASM_FUNCTION_PROLOGUE rs6000_output_function_prologue\n #undef TARGET_ASM_FUNCTION_EPILOGUE\n@@ -5815,6 +5819,25 @@ rs6000_delegitimize_address (rtx orig_x)\n   return orig_x;\n }\n \n+/* Return true if X shouldn't be emitted into the debug info.\n+   The linker doesn't like .toc section references from\n+   .debug_* sections, so reject .toc section symbols.  */\n+\n+static bool\n+rs6000_const_not_ok_for_debug_p (rtx x)\n+{\n+  if (GET_CODE (x) == SYMBOL_REF\n+      && CONSTANT_POOL_ADDRESS_P (x))\n+    {\n+      rtx c = get_pool_constant (x);\n+      enum machine_mode cmode = get_pool_mode (x);\n+      if (ASM_OUTPUT_SPECIAL_POOL_ENTRY_P (c, cmode))\n+\treturn true;\n+    }\n+\n+  return false;\n+}\n+\n /* Construct the SYMBOL_REF for the tls_get_addr function.  */\n \n static GTY(()) rtx rs6000_tls_symbol;"}, {"sha": "ceb0d1ea4dec5b469af947cf1b7d4c323c67e40c", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93bcc8c9ff361dbf3f42c9dcced458acfb5e994d/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93bcc8c9ff361dbf3f42c9dcced458acfb5e994d/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=93bcc8c9ff361dbf3f42c9dcced458acfb5e994d", "patch": "@@ -5631,6 +5631,11 @@ the semantics of these opaque @code{UNSPEC}s by converting them back\n into their original form.\n @end deftypefn\n \n+@deftypefn {Target Hook} bool TARGET_CONST_NOT_OK_FOR_DEBUG_P (rtx @var{x})\n+This hook should return true if @var{x} should not be emitted into\n+debug sections.\n+@end deftypefn\n+\n @deftypefn {Target Hook} bool TARGET_CANNOT_FORCE_CONST_MEM (enum machine_mode @var{mode}, rtx @var{x})\n This hook should return true if @var{x} is of a form that cannot (or\n should not) be spilled to the constant pool.  @var{mode} is the mode"}, {"sha": "55c8432c3bf1ea1d9ec80f4dd3e3e666f89e2ccc", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93bcc8c9ff361dbf3f42c9dcced458acfb5e994d/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93bcc8c9ff361dbf3f42c9dcced458acfb5e994d/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=93bcc8c9ff361dbf3f42c9dcced458acfb5e994d", "patch": "@@ -5567,6 +5567,11 @@ the semantics of these opaque @code{UNSPEC}s by converting them back\n into their original form.\n @end deftypefn\n \n+@hook TARGET_CONST_NOT_OK_FOR_DEBUG_P\n+This hook should return true if @var{x} should not be emitted into\n+debug sections.\n+@end deftypefn\n+\n @hook TARGET_CANNOT_FORCE_CONST_MEM\n This hook should return true if @var{x} is of a form that cannot (or\n should not) be spilled to the constant pool.  @var{mode} is the mode"}, {"sha": "fee5c60e403020cbea20e240ae919a002c9887ab", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93bcc8c9ff361dbf3f42c9dcced458acfb5e994d/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93bcc8c9ff361dbf3f42c9dcced458acfb5e994d/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=93bcc8c9ff361dbf3f42c9dcced458acfb5e994d", "patch": "@@ -10683,6 +10683,13 @@ const_ok_for_output_1 (rtx *rtlp, void *data ATTRIBUTE_UNUSED)\n       return 1;\n     }\n \n+  if (targetm.const_not_ok_for_debug_p (rtl))\n+    {\n+      expansion_failed (NULL_TREE, rtl,\n+\t\t\t\"Expression rejected for debug by the backend.\\n\");\n+      return 1;\n+    }\n+\n   if (GET_CODE (rtl) != SYMBOL_REF)\n     return 0;\n "}, {"sha": "f86f782b0209bcd2f3b6bb2133d6d3ec2fdfdd5a", "filename": "gcc/target.def", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93bcc8c9ff361dbf3f42c9dcced458acfb5e994d/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93bcc8c9ff361dbf3f42c9dcced458acfb5e994d/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=93bcc8c9ff361dbf3f42c9dcced458acfb5e994d", "patch": "@@ -1382,6 +1382,14 @@ DEFHOOK\n  rtx, (rtx x),\n  delegitimize_mem_from_attrs)\n \n+/* Given an RTX, return true if it is not ok to emit it into debug info\n+   section.  */\n+DEFHOOK\n+(const_not_ok_for_debug_p,\n+ \"\",\n+ bool, (rtx x),\n+ hook_bool_rtx_false)\n+\n /* Given an address RTX, say whether it is valid.  */\n DEFHOOK\n (legitimate_address_p,"}, {"sha": "9825bc517fa5afd10eef9de06750cb612a713635", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93bcc8c9ff361dbf3f42c9dcced458acfb5e994d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93bcc8c9ff361dbf3f42c9dcced458acfb5e994d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=93bcc8c9ff361dbf3f42c9dcced458acfb5e994d", "patch": "@@ -1,3 +1,10 @@\n+2012-01-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/51957\n+\t* gcc.dg/pr51957-1.c: New test.\n+\t* gcc.dg/pr51957-1.h: New file.\n+\t* gcc.dg/pr51957-2.c: New test.\n+\n 2012-01-23  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/51930"}, {"sha": "d899771ad001ba253dc093f3c2e1ae92164b1b15", "filename": "gcc/testsuite/gcc.dg/pr51957-1.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93bcc8c9ff361dbf3f42c9dcced458acfb5e994d/gcc%2Ftestsuite%2Fgcc.dg%2Fpr51957-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93bcc8c9ff361dbf3f42c9dcced458acfb5e994d/gcc%2Ftestsuite%2Fgcc.dg%2Fpr51957-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr51957-1.c?ref=93bcc8c9ff361dbf3f42c9dcced458acfb5e994d", "patch": "@@ -0,0 +1,29 @@\n+/* PR target/51957 */\n+/* { dg-do link } */\n+/* { dg-options \"-O2 -g -fprofile-use\" } */\n+/* { dg-additional-sources \"pr51957-2.c\" } */\n+\n+int v[128];\n+#include \"pr51957-1.h\"\n+\n+void\n+foo (U *x)\n+{\n+  T *a = x->u;\n+  while (1)\n+    {\n+      union R *b;\n+      b = fn1 ();\n+      if (b != w[0] && !(v[b->p->c] == 1))\n+\t{\n+\t  fn2 (a->t, \"foobar\", b->p);\n+\t  b = w[0];\n+\t}\n+      if (b != w[0])\n+\tfn3 ();\n+      if (w[0] && b != w[0])\n+\tfn4 (b->p);\n+      if (b != w[0] && (v[b->p->c] == 1) && fn4 (b->p))\n+\tbreak;\n+    }\n+}"}, {"sha": "cfafb2cc57ea714335f235cf3689fd7f7a302666", "filename": "gcc/testsuite/gcc.dg/pr51957-1.h", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93bcc8c9ff361dbf3f42c9dcced458acfb5e994d/gcc%2Ftestsuite%2Fgcc.dg%2Fpr51957-1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93bcc8c9ff361dbf3f42c9dcced458acfb5e994d/gcc%2Ftestsuite%2Fgcc.dg%2Fpr51957-1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr51957-1.h?ref=93bcc8c9ff361dbf3f42c9dcced458acfb5e994d", "patch": "@@ -0,0 +1,9 @@\n+union R { int c; union R *p; };\n+extern union R *w[];\n+typedef struct { int t; } T;\n+typedef struct { void *u; } U;\n+union R *fn1 (void);\n+void fn2 (int, const char *, union R *);\n+void fn3 (void);\n+int fn4 (union R *);\n+void foo (U *x);"}, {"sha": "038921ea34e5ef52ec846e763254c0c79d41cf1e", "filename": "gcc/testsuite/gcc.dg/pr51957-2.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93bcc8c9ff361dbf3f42c9dcced458acfb5e994d/gcc%2Ftestsuite%2Fgcc.dg%2Fpr51957-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93bcc8c9ff361dbf3f42c9dcced458acfb5e994d/gcc%2Ftestsuite%2Fgcc.dg%2Fpr51957-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr51957-2.c?ref=93bcc8c9ff361dbf3f42c9dcced458acfb5e994d", "patch": "@@ -0,0 +1,35 @@\n+/* PR target/51957 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O0\" } */\n+\n+#include \"pr51957-1.h\"\n+\n+union R *w[10];\n+\n+union R *\n+fn1 (void)\n+{\n+  return (union R *) 0;\n+}\n+\n+void\n+fn2 (int x, const char *y, union R *z)\n+{\n+}\n+\n+void\n+fn3 (void)\n+{\n+}\n+\n+int\n+fn4 (union R *x)\n+{\n+  return 0;\n+}\n+\n+int\n+main ()\n+{\n+  return 0;\n+}"}]}