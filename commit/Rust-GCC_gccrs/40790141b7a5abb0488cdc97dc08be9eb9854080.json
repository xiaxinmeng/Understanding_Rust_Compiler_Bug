{"sha": "40790141b7a5abb0488cdc97dc08be9eb9854080", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDA3OTAxNDFiN2E1YWJiMDQ4OGNkYzk3ZGMwOGJlOWViOTg1NDA4MA==", "commit": {"author": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "2007-05-10T18:52:03Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "2007-05-10T18:52:03Z"}, "message": "Improve comment...\n\nFrom-SVN: r124597", "tree": {"sha": "98fc5d41e85f06c859b6779a070e178813341908", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/98fc5d41e85f06c859b6779a070e178813341908"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40790141b7a5abb0488cdc97dc08be9eb9854080", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40790141b7a5abb0488cdc97dc08be9eb9854080", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40790141b7a5abb0488cdc97dc08be9eb9854080", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40790141b7a5abb0488cdc97dc08be9eb9854080/comments", "author": null, "committer": null, "parents": [{"sha": "b548a9c2c2037434a577d39730cc4d46610f4a66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b548a9c2c2037434a577d39730cc4d46610f4a66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b548a9c2c2037434a577d39730cc4d46610f4a66"}], "stats": {"total": 5, "additions": 3, "deletions": 2}, "files": [{"sha": "1619c5e47c0c85f8316ffb80903d141adb1cd1c0", "filename": "gcc/ipa-type-escape.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40790141b7a5abb0488cdc97dc08be9eb9854080/gcc%2Fipa-type-escape.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40790141b7a5abb0488cdc97dc08be9eb9854080/gcc%2Fipa-type-escape.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-type-escape.c?ref=40790141b7a5abb0488cdc97dc08be9eb9854080", "patch": "@@ -196,8 +196,9 @@ compare_type_brand (splay_tree_key sk1, splay_tree_key sk2)\n /* This is a trivial algorithm for removing duplicate types.  This\n    would not work for any language that used structural equivalence as\n    the basis of its type system.  */\n-/* Return either TYPE if this is first time TYPE has been seen an\n-   compatible TYPE that has already been processed.  */ \n+/* Return TYPE if no type compatible with TYPE has been seen so far,\n+   otherwise return a type compatible with TYPE that has already been\n+   processed.  */\n \n static tree\n discover_unique_type (tree type)"}]}