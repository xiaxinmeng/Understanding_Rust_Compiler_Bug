{"sha": "e41ba804ba5f5ca433e09238d561b1b4c8b10985", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQxYmE4MDRiYTVmNWNhNDMzZTA5MjM4ZDU2MWIxYjRjOGIxMDk4NQ==", "commit": {"author": {"name": "Kewen Lin", "email": "linkw@linux.ibm.com", "date": "2021-07-30T03:26:25Z"}, "committer": {"name": "Kewen Lin", "email": "linkw@linux.ibm.com", "date": "2021-07-30T03:26:25Z"}, "message": "Use range-based for loops for traversing loops\n\nThis patch follows Martin's suggestion here[1], to support\nrange based loop for iterating loops, analogously to the\npatch for vec[2].\n\nFor example, use below range-based for loop\n\n    for (auto loop : loops_list (cfun, 0))\n\nto replace the previous macro FOR_EACH_LOOP\n\n    FOR_EACH_LOOP (loop, 0)\n\n[1] https://gcc.gnu.org/pipermail/gcc-patches/2021-June/573424.html\n[2] https://gcc.gnu.org/pipermail/gcc-patches/2021-June/572315.html\n\ngcc/ChangeLog:\n\n\t* cfgloop.h (as_const): New function.\n\t(class loop_iterator): Rename to ...\n\t(class loops_list): ... this.\n\t(loop_iterator::next): Rename to ...\n\t(loops_list::Iter::fill_curr_loop): ... this and adjust.\n\t(loop_iterator::loop_iterator): Rename to ...\n\t(loops_list::loops_list): ... this and adjust.\n\t(loops_list::Iter): New class.\n\t(loops_list::iterator): New type.\n\t(loops_list::const_iterator): New type.\n\t(loops_list::begin): New function.\n\t(loops_list::end): Likewise.\n\t(loops_list::begin const): Likewise.\n\t(loops_list::end const): Likewise.\n\t(FOR_EACH_LOOP): Remove.\n\t(FOR_EACH_LOOP_FN): Remove.\n\t* cfgloop.c (flow_loops_dump): Adjust FOR_EACH_LOOP* with range-based\n\tfor loop with loops_list instance.\n\t(sort_sibling_loops): Likewise.\n\t(disambiguate_loops_with_multiple_latches): Likewise.\n\t(verify_loop_structure): Likewise.\n\t* cfgloopmanip.c (create_preheaders): Likewise.\n\t(force_single_succ_latches): Likewise.\n\t* config/aarch64/falkor-tag-collision-avoidance.c\n\t(execute_tag_collision_avoidance): Likewise.\n\t* config/mn10300/mn10300.c (mn10300_scan_for_setlb_lcc): Likewise.\n\t* config/s390/s390.c (s390_adjust_loops): Likewise.\n\t* doc/loop.texi: Likewise.\n\t* gimple-loop-interchange.cc (pass_linterchange::execute): Likewise.\n\t* gimple-loop-jam.c (tree_loop_unroll_and_jam): Likewise.\n\t* gimple-loop-versioning.cc (loop_versioning::analyze_blocks): Likewise.\n\t(loop_versioning::make_versioning_decisions): Likewise.\n\t* gimple-ssa-split-paths.c (split_paths): Likewise.\n\t* graphite-isl-ast-to-gimple.c (graphite_regenerate_ast_isl): Likewise.\n\t* graphite.c (canonicalize_loop_form): Likewise.\n\t(graphite_transform_loops): Likewise.\n\t* ipa-fnsummary.c (analyze_function_body): Likewise.\n\t* ipa-pure-const.c (analyze_function): Likewise.\n\t* loop-doloop.c (doloop_optimize_loops): Likewise.\n\t* loop-init.c (loop_optimizer_finalize): Likewise.\n\t(fix_loop_structure): Likewise.\n\t* loop-invariant.c (calculate_loop_reg_pressure): Likewise.\n\t(move_loop_invariants): Likewise.\n\t* loop-unroll.c (decide_unrolling): Likewise.\n\t(unroll_loops): Likewise.\n\t* modulo-sched.c (sms_schedule): Likewise.\n\t* predict.c (predict_loops): Likewise.\n\t(pass_profile::execute): Likewise.\n\t* profile.c (branch_prob): Likewise.\n\t* sel-sched-ir.c (sel_finish_pipelining): Likewise.\n\t(sel_find_rgns): Likewise.\n\t* tree-cfg.c (replace_loop_annotate): Likewise.\n\t(replace_uses_by): Likewise.\n\t(move_sese_region_to_fn): Likewise.\n\t* tree-if-conv.c (pass_if_conversion::execute): Likewise.\n\t* tree-loop-distribution.c (loop_distribution::execute): Likewise.\n\t* tree-parloops.c (parallelize_loops): Likewise.\n\t* tree-predcom.c (tree_predictive_commoning): Likewise.\n\t* tree-scalar-evolution.c (scev_initialize): Likewise.\n\t(scev_reset): Likewise.\n\t* tree-ssa-dce.c (find_obviously_necessary_stmts): Likewise.\n\t* tree-ssa-live.c (remove_unused_locals): Likewise.\n\t* tree-ssa-loop-ch.c (ch_base::copy_headers): Likewise.\n\t* tree-ssa-loop-im.c (analyze_memory_references): Likewise.\n\t(tree_ssa_lim_initialize): Likewise.\n\t* tree-ssa-loop-ivcanon.c (canonicalize_induction_variables): Likewise.\n\t* tree-ssa-loop-ivopts.c (tree_ssa_iv_optimize): Likewise.\n\t* tree-ssa-loop-manip.c (get_loops_exits): Likewise.\n\t* tree-ssa-loop-niter.c (estimate_numbers_of_iterations): Likewise.\n\t(free_numbers_of_iterations_estimates): Likewise.\n\t* tree-ssa-loop-prefetch.c (tree_ssa_prefetch_arrays): Likewise.\n\t* tree-ssa-loop-split.c (tree_ssa_split_loops): Likewise.\n\t* tree-ssa-loop-unswitch.c (tree_ssa_unswitch_loops): Likewise.\n\t* tree-ssa-loop.c (gate_oacc_kernels): Likewise.\n\t(pass_scev_cprop::execute): Likewise.\n\t* tree-ssa-propagate.c (clean_up_loop_closed_phi): Likewise.\n\t* tree-ssa-sccvn.c (do_rpo_vn): Likewise.\n\t* tree-ssa-threadupdate.c\n\t(jump_thread_path_registry::thread_through_all_blocks): Likewise.\n\t* tree-vectorizer.c (vectorize_loops): Likewise.\n\t* tree-vrp.c (vrp_asserts::find_assert_locations): Likewise.", "tree": {"sha": "9a6cab4e6014bbc9384d2dc8717ece6966cc6faf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a6cab4e6014bbc9384d2dc8717ece6966cc6faf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e41ba804ba5f5ca433e09238d561b1b4c8b10985", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e41ba804ba5f5ca433e09238d561b1b4c8b10985", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e41ba804ba5f5ca433e09238d561b1b4c8b10985", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e41ba804ba5f5ca433e09238d561b1b4c8b10985/comments", "author": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4186cb9cc017a0d4b3f45ef6b2f959ef10f17fc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4186cb9cc017a0d4b3f45ef6b2f959ef10f17fc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4186cb9cc017a0d4b3f45ef6b2f959ef10f17fc5"}], "stats": {"total": 389, "additions": 194, "deletions": 195}, "files": [{"sha": "6284ae292b68f08cad7258591bd7c4f71ae65927", "filename": "gcc/cfgloop.c", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Fcfgloop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Fcfgloop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.c?ref=e41ba804ba5f5ca433e09238d561b1b4c8b10985", "patch": "@@ -162,14 +162,12 @@ flow_loop_dump (const class loop *loop, FILE *file,\n void\n flow_loops_dump (FILE *file, void (*loop_dump_aux) (const class loop *, FILE *, int), int verbose)\n {\n-  class loop *loop;\n-\n   if (!current_loops || ! file)\n     return;\n \n   fprintf (file, \";; %d loops found\\n\", number_of_loops (cfun));\n \n-  FOR_EACH_LOOP (loop, LI_INCLUDE_ROOT)\n+  for (auto loop : loops_list (cfun, LI_INCLUDE_ROOT))\n     {\n       flow_loop_dump (loop, file, loop_dump_aux, verbose);\n     }\n@@ -559,8 +557,7 @@ sort_sibling_loops (function *fn)\n   free (rc_order);\n \n   auto_vec<loop_p, 3> siblings;\n-  loop_p loop;\n-  FOR_EACH_LOOP_FN (fn, loop, LI_INCLUDE_ROOT)\n+  for (auto loop : loops_list (fn, LI_INCLUDE_ROOT))\n     if (loop->inner && loop->inner->next)\n       {\n \tloop_p sibling = loop->inner;\n@@ -836,9 +833,7 @@ disambiguate_multiple_latches (class loop *loop)\n void\n disambiguate_loops_with_multiple_latches (void)\n {\n-  class loop *loop;\n-\n-  FOR_EACH_LOOP (loop, 0)\n+  for (auto loop : loops_list (cfun, 0))\n     {\n       if (!loop->latch)\n \tdisambiguate_multiple_latches (loop);\n@@ -1457,7 +1452,7 @@ verify_loop_structure (void)\n   auto_sbitmap visited (last_basic_block_for_fn (cfun));\n   bitmap_clear (visited);\n   bbs = XNEWVEC (basic_block, n_basic_blocks_for_fn (cfun));\n-  FOR_EACH_LOOP (loop, LI_FROM_INNERMOST)\n+  for (auto loop : loops_list (cfun, LI_FROM_INNERMOST))\n     {\n       unsigned n;\n \n@@ -1503,7 +1498,7 @@ verify_loop_structure (void)\n   free (bbs);\n \n   /* Check headers and latches.  */\n-  FOR_EACH_LOOP (loop, 0)\n+  for (auto loop : loops_list (cfun, 0))\n     {\n       i = loop->num;\n       if (loop->header == NULL)\n@@ -1629,7 +1624,7 @@ verify_loop_structure (void)\n     }\n \n   /* Check the recorded loop exits.  */\n-  FOR_EACH_LOOP (loop, 0)\n+  for (auto loop : loops_list (cfun, 0))\n     {\n       if (!loop->exits || loop->exits->e != NULL)\n \t{\n@@ -1723,7 +1718,7 @@ verify_loop_structure (void)\n \t  err = 1;\n \t}\n \n-      FOR_EACH_LOOP (loop, 0)\n+      for (auto loop : loops_list (cfun, 0))\n \t{\n \t  eloops = 0;\n \t  for (exit = loop->exits->next; exit->e; exit = exit->next)"}, {"sha": "885632bbbed456ce9192d17e13a36d9fcfccaa67", "filename": "gcc/cfgloop.h", "status": "modified", "additions": 107, "deletions": 33, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Fcfgloop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Fcfgloop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.h?ref=e41ba804ba5f5ca433e09238d561b1b4c8b10985", "patch": "@@ -658,55 +658,141 @@ enum li_flags\n   LI_ONLY_INNERMOST = 4\t\t/* Iterate only over innermost loops.  */\n };\n \n-/* The iterator for loops.  */\n+/* Provide the functionality of std::as_const to support range-based for\n+   to use const iterator.  (We can't use std::as_const itself because it's\n+   a C++17 feature.)  */\n+template <typename T>\n+constexpr const T &\n+as_const (T &t)\n+{\n+  return t;\n+}\n+\n+/* A list for visiting loops, which contains the loop numbers instead of\n+   the loop pointers.  The scope is restricted in function FN and the\n+   visiting order is specified by FLAGS.  */\n \n-class loop_iterator\n+class loops_list\n {\n public:\n-  loop_iterator (function *fn, loop_p *loop, unsigned flags);\n+  loops_list (function *fn, unsigned flags);\n+\n+  template <typename T> class Iter\n+  {\n+  public:\n+    Iter (const loops_list &l, unsigned idx) : list (l), curr_idx (idx)\n+    {\n+      fill_curr_loop ();\n+    }\n+\n+    T operator* () const { return curr_loop; }\n+\n+    Iter &\n+    operator++ ()\n+    {\n+      if (curr_idx < list.to_visit.length ())\n+\t{\n+\t  /* Bump the index and fill a new one.  */\n+\t  curr_idx++;\n+\t  fill_curr_loop ();\n+\t}\n+      else\n+\tgcc_assert (!curr_loop);\n+\n+      return *this;\n+    }\n+\n+    bool\n+    operator!= (const Iter &rhs) const\n+    {\n+      return this->curr_idx != rhs.curr_idx;\n+    }\n+\n+  private:\n+    /* Fill the current loop starting from the current index.  */\n+    void fill_curr_loop ();\n+\n+    /* Reference to the loop list to visit.  */\n+    const loops_list &list;\n+\n+    /* The current index in the list to visit.  */\n+    unsigned curr_idx;\n \n-  inline loop_p next ();\n+    /* The loop implied by the current index.  */\n+    class loop *curr_loop;\n+  };\n \n+  using iterator = Iter<class loop *>;\n+  using const_iterator = Iter<const class loop *>;\n+\n+  iterator\n+  begin ()\n+  {\n+    return iterator (*this, 0);\n+  }\n+\n+  iterator\n+  end ()\n+  {\n+    return iterator (*this, to_visit.length ());\n+  }\n+\n+  const_iterator\n+  begin () const\n+  {\n+    return const_iterator (*this, 0);\n+  }\n+\n+  const_iterator\n+  end () const\n+  {\n+    return const_iterator (*this, to_visit.length ());\n+  }\n+\n+private:\n   /* The function we are visiting.  */\n   function *fn;\n \n   /* The list of loops to visit.  */\n   auto_vec<int, 16> to_visit;\n-\n-  /* The index of the actual loop.  */\n-  unsigned idx;\n };\n \n-inline loop_p\n-loop_iterator::next ()\n+/* Starting from current index CURR_IDX (inclusive), find one index\n+   which stands for one valid loop and fill the found loop as CURR_LOOP,\n+   if we can't find one, set CURR_LOOP as null.  */\n+\n+template <typename T>\n+inline void\n+loops_list::Iter<T>::fill_curr_loop ()\n {\n   int anum;\n \n-  while (this->to_visit.iterate (this->idx, &anum))\n+  while (this->list.to_visit.iterate (this->curr_idx, &anum))\n     {\n-      this->idx++;\n-      loop_p loop = get_loop (fn, anum);\n+      class loop *loop = get_loop (this->list.fn, anum);\n       if (loop)\n-\treturn loop;\n+\t{\n+\t  curr_loop = loop;\n+\t  return;\n+\t}\n+      this->curr_idx++;\n     }\n \n-  return NULL;\n+  curr_loop = nullptr;\n }\n \n-inline\n-loop_iterator::loop_iterator (function *fn, loop_p *loop, unsigned flags)\n+/* Set up the loops list to visit according to the specified\n+   function scope FN and iterating order FLAGS.  */\n+\n+inline loops_list::loops_list (function *fn, unsigned flags)\n {\n   class loop *aloop;\n   unsigned i;\n   int mn;\n \n-  this->idx = 0;\n   this->fn = fn;\n   if (!loops_for_fn (fn))\n-    {\n-      *loop = NULL;\n-      return;\n-    }\n+    return;\n \n   this->to_visit.reserve_exact (number_of_loops (fn));\n   mn = (flags & LI_INCLUDE_ROOT) ? 0 : 1;\n@@ -766,20 +852,8 @@ loop_iterator::loop_iterator (function *fn, loop_p *loop, unsigned flags)\n \t    }\n \t}\n     }\n-\n-  *loop = this->next ();\n }\n \n-#define FOR_EACH_LOOP(LOOP, FLAGS) \\\n-  for (loop_iterator li(cfun, &(LOOP), FLAGS); \\\n-       (LOOP); \\\n-       (LOOP) = li.next ())\n-\n-#define FOR_EACH_LOOP_FN(FN, LOOP, FLAGS) \\\n-  for (loop_iterator li(FN, &(LOOP), FLAGS); \\\n-       (LOOP); \\\n-       (LOOP) = li.next ())\n-\n /* The properties of the target.  */\n struct target_cfgloop {\n   /* Number of available registers.  */"}, {"sha": "82c242dd720d236a2d30892890c558640e606b56", "filename": "gcc/cfgloopmanip.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Fcfgloopmanip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Fcfgloopmanip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloopmanip.c?ref=e41ba804ba5f5ca433e09238d561b1b4c8b10985", "patch": "@@ -1572,12 +1572,10 @@ create_preheader (class loop *loop, int flags)\n void\n create_preheaders (int flags)\n {\n-  class loop *loop;\n-\n   if (!current_loops)\n     return;\n \n-  FOR_EACH_LOOP (loop, 0)\n+  for (auto loop : loops_list (cfun, 0))\n     create_preheader (loop, flags);\n   loops_state_set (LOOPS_HAVE_PREHEADERS);\n }\n@@ -1587,10 +1585,9 @@ create_preheaders (int flags)\n void\n force_single_succ_latches (void)\n {\n-  class loop *loop;\n   edge e;\n \n-  FOR_EACH_LOOP (loop, 0)\n+  for (auto loop : loops_list (cfun, 0))\n     {\n       if (loop->latch != loop->header && single_succ_p (loop->latch))\n \tcontinue;"}, {"sha": "6c8e02a56ab973d67c75074be7bc50f5acf50be8", "filename": "gcc/config/aarch64/falkor-tag-collision-avoidance.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Fconfig%2Faarch64%2Ffalkor-tag-collision-avoidance.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Fconfig%2Faarch64%2Ffalkor-tag-collision-avoidance.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Ffalkor-tag-collision-avoidance.c?ref=e41ba804ba5f5ca433e09238d561b1b4c8b10985", "patch": "@@ -808,8 +808,6 @@ record_loads (tag_map_t &tag_map, struct loop *loop)\n void\n execute_tag_collision_avoidance ()\n {\n-  struct loop *loop;\n-\n   df_set_flags (DF_RD_PRUNE_DEAD_DEFS);\n   df_chain_add_problem (DF_UD_CHAIN);\n   df_compute_regs_ever_live (true);\n@@ -824,7 +822,7 @@ execute_tag_collision_avoidance ()\n   calculate_dominance_info (CDI_DOMINATORS);\n   loop_optimizer_init (AVOID_CFG_MODIFICATIONS);\n \n-  FOR_EACH_LOOP (loop, LI_FROM_INNERMOST)\n+  for (auto loop : loops_list (cfun, LI_FROM_INNERMOST))\n     {\n       tag_map_t tag_map (512);\n "}, {"sha": "aeb5d04b3e1a6638670a994d104d8be24b142b0b", "filename": "gcc/config/mn10300/mn10300.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.c?ref=e41ba804ba5f5ca433e09238d561b1b4c8b10985", "patch": "@@ -3234,8 +3234,6 @@ mn10300_loop_contains_call_insn (loop_p loop)\n static void\n mn10300_scan_for_setlb_lcc (void)\n {\n-  loop_p loop;\n-\n   DUMP (\"Looking for loops that can use the SETLB insn\", NULL_RTX);\n \n   df_analyze ();\n@@ -3248,7 +3246,7 @@ mn10300_scan_for_setlb_lcc (void)\n      if an inner loop is not suitable for use with the SETLB/Lcc insns, it may\n      be the case that its parent loop is suitable.  Thus we should check all\n      loops, but work from the innermost outwards.  */\n-  FOR_EACH_LOOP (loop, LI_ONLY_INNERMOST)\n+  for (auto loop : loops_list (cfun, LI_ONLY_INNERMOST))\n     {\n       const char * reason = NULL;\n "}, {"sha": "8c7d36675f5270e91278c92ec6987661e6dc1725", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=e41ba804ba5f5ca433e09238d561b1b4c8b10985", "patch": "@@ -14479,15 +14479,13 @@ s390_adjust_loop_scan_osc (struct loop* loop)\n static void\n s390_adjust_loops ()\n {\n-  struct loop *loop = NULL;\n-\n   df_analyze ();\n   compute_bb_for_insn ();\n \n   /* Find the loops.  */\n   loop_optimizer_init (AVOID_CFG_MODIFICATIONS);\n \n-  FOR_EACH_LOOP (loop, LI_ONLY_INNERMOST)\n+  for (auto loop : loops_list (cfun, LI_ONLY_INNERMOST))\n     {\n       if (dump_file)\n \t{"}, {"sha": "94eed6720b1eb60c125dad409e468eaead2d81be", "filename": "gcc/doc/loop.texi", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Fdoc%2Floop.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Fdoc%2Floop.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Floop.texi?ref=e41ba804ba5f5ca433e09238d561b1b4c8b10985", "patch": "@@ -79,14 +79,15 @@ and its subloops in the numbering.  The index of a loop never changes.\n \n The entries of the @code{larray} field should not be accessed directly.\n The function @code{get_loop} returns the loop description for a loop with\n-the given index.  @code{number_of_loops} function returns number of\n-loops in the function.  To traverse all loops, use @code{FOR_EACH_LOOP}\n-macro.  The @code{flags} argument of the macro is used to determine\n-the direction of traversal and the set of loops visited.  Each loop is\n+the given index.  @code{number_of_loops} function returns number of loops\n+in the function.  To traverse all loops, use a range-based for loop with\n+class @code{loops_list} instance. The @code{flags} argument passed to the\n+constructor function of class @code{loops_list} is used to determine the\n+direction of traversal and the set of loops visited.  Each loop is\n guaranteed to be visited exactly once, regardless of the changes to the\n loop tree, and the loops may be removed during the traversal.  The newly\n-created loops are never traversed, if they need to be visited, this\n-must be done separately after their creation.\n+created loops are never traversed, if they need to be visited, this must\n+be done separately after their creation.\n \n Each basic block contains the reference to the innermost loop it belongs\n to (@code{loop_father}).  For this reason, it is only possible to have"}, {"sha": "ccd5083145f8946dcaffaaf27f7a742ea8ba4b27", "filename": "gcc/gimple-loop-interchange.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Fgimple-loop-interchange.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Fgimple-loop-interchange.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-loop-interchange.cc?ref=e41ba804ba5f5ca433e09238d561b1b4c8b10985", "patch": "@@ -2089,8 +2089,7 @@ pass_linterchange::execute (function *fun)\n     return 0;\n \n   bool changed_p = false;\n-  class loop *loop;\n-  FOR_EACH_LOOP (loop, LI_ONLY_INNERMOST)\n+  for (auto loop : loops_list (cfun, LI_ONLY_INNERMOST))\n     {\n       vec<loop_p> loop_nest = vNULL;\n       vec<data_reference_p> datarefs = vNULL;"}, {"sha": "d212e3914894b072d240768f9ec21cf28e4fc3b2", "filename": "gcc/gimple-loop-jam.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Fgimple-loop-jam.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Fgimple-loop-jam.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-loop-jam.c?ref=e41ba804ba5f5ca433e09238d561b1b4c8b10985", "patch": "@@ -487,13 +487,12 @@ adjust_unroll_factor (class loop *inner, struct data_dependence_relation *ddr,\n static unsigned int\n tree_loop_unroll_and_jam (void)\n {\n-  class loop *loop;\n   unsigned int todo = 0;\n \n   gcc_assert (scev_initialized_p ());\n \n   /* Go through all innermost loops.  */\n-  FOR_EACH_LOOP (loop, LI_ONLY_INNERMOST)\n+  for (auto loop : loops_list (cfun, LI_ONLY_INNERMOST))\n     {\n       class loop *outer = loop_outer (loop);\n "}, {"sha": "114a22f6e5f16fff9863e8998c8688afc5c458c5", "filename": "gcc/gimple-loop-versioning.cc", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Fgimple-loop-versioning.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Fgimple-loop-versioning.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-loop-versioning.cc?ref=e41ba804ba5f5ca433e09238d561b1b4c8b10985", "patch": "@@ -1428,8 +1428,7 @@ loop_versioning::analyze_blocks ()\n      versioning at that level could be useful in some cases.  */\n   get_loop_info (get_loop (m_fn, 0)).rejected_p = true;\n \n-  class loop *loop;\n-  FOR_EACH_LOOP (loop, LI_FROM_INNERMOST)\n+  for (auto loop : loops_list (cfun, LI_FROM_INNERMOST))\n     {\n       loop_info &linfo = get_loop_info (loop);\n \n@@ -1650,8 +1649,7 @@ loop_versioning::make_versioning_decisions ()\n   AUTO_DUMP_SCOPE (\"make_versioning_decisions\",\n \t\t   dump_user_location_t::from_function_decl (m_fn->decl));\n \n-  class loop *loop;\n-  FOR_EACH_LOOP (loop, LI_FROM_INNERMOST)\n+  for (auto loop : loops_list (cfun, LI_FROM_INNERMOST))\n     {\n       loop_info &linfo = get_loop_info (loop);\n       if (decide_whether_loop_is_versionable (loop))"}, {"sha": "04ad9c0247746b924f41bb9f2121a5282fb6f581", "filename": "gcc/gimple-ssa-split-paths.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Fgimple-ssa-split-paths.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Fgimple-ssa-split-paths.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-split-paths.c?ref=e41ba804ba5f5ca433e09238d561b1b4c8b10985", "patch": "@@ -473,13 +473,12 @@ static bool\n split_paths ()\n {\n   bool changed = false;\n-  loop_p loop;\n \n   loop_optimizer_init (LOOPS_NORMAL | LOOPS_HAVE_RECORDED_EXITS);\n   initialize_original_copy_tables ();\n   calculate_dominance_info (CDI_DOMINATORS);\n \n-  FOR_EACH_LOOP (loop, LI_FROM_INNERMOST)\n+  for (auto loop : loops_list (cfun, LI_FROM_INNERMOST))\n     {\n       /* Only split paths if we are optimizing this loop for speed.  */\n       if (!optimize_loop_for_speed_p (loop))"}, {"sha": "1ad68a1d4735e76b3fc8a71e12273ae1d6047587", "filename": "gcc/graphite-isl-ast-to-gimple.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Fgraphite-isl-ast-to-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Fgraphite-isl-ast-to-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-isl-ast-to-gimple.c?ref=e41ba804ba5f5ca433e09238d561b1b4c8b10985", "patch": "@@ -1535,9 +1535,8 @@ graphite_regenerate_ast_isl (scop_p scop)\n       if_region->false_region->region.entry->flags |= EDGE_FALLTHRU;\n       /* remove_edge_and_dominated_blocks marks loops for removal but\n \t doesn't actually remove them (fix that...).  */\n-      loop_p loop;\n-      FOR_EACH_LOOP (loop, LI_FROM_INNERMOST)\n-\tif (! loop->header)\n+      for (auto loop : loops_list (cfun, LI_FROM_INNERMOST))\n+\tif (!loop->header)\n \t  delete_loop (loop);\n     }\n "}, {"sha": "0060caea22ed0650a275c43334b93626bf9b5f60", "filename": "gcc/graphite.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Fgraphite.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Fgraphite.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite.c?ref=e41ba804ba5f5ca433e09238d561b1b4c8b10985", "patch": "@@ -377,8 +377,7 @@ canonicalize_loop_closed_ssa (loop_p loop, edge e)\n static void\n canonicalize_loop_form (void)\n {\n-  loop_p loop;\n-  FOR_EACH_LOOP (loop, LI_FROM_INNERMOST)\n+  for (auto loop : loops_list (cfun, LI_FROM_INNERMOST))\n     {\n       edge e = single_exit (loop);\n       if (!e || (e->flags & (EDGE_COMPLEX|EDGE_FAKE)))\n@@ -494,10 +493,9 @@ graphite_transform_loops (void)\n \n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n-      loop_p loop;\n       int num_no_dependency = 0;\n \n-      FOR_EACH_LOOP (loop, 0)\n+      for (auto loop : loops_list (cfun, 0))\n \tif (loop->can_be_parallel)\n \t  num_no_dependency++;\n "}, {"sha": "2470937460fbde4ad00c1f08d2d039f4af0be05a", "filename": "gcc/ipa-fnsummary.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Fipa-fnsummary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Fipa-fnsummary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-fnsummary.c?ref=e41ba804ba5f5ca433e09238d561b1b4c8b10985", "patch": "@@ -2923,7 +2923,7 @@ analyze_function_body (struct cgraph_node *node, bool early)\n       if (dump_file && (dump_flags & TDF_DETAILS))\n \tflow_loops_dump (dump_file, NULL, 0);\n       scev_initialize ();\n-      FOR_EACH_LOOP (loop, 0)\n+      for (auto loop : loops_list (cfun, 0))\n \t{\n \t  predicate loop_iterations = true;\n \t  sreal header_freq;"}, {"sha": "a84a4eb7ac0fa180cd820b8994b90f0345ce4898", "filename": "gcc/ipa-pure-const.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Fipa-pure-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Fipa-pure-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-pure-const.c?ref=e41ba804ba5f5ca433e09238d561b1b4c8b10985", "patch": "@@ -1087,9 +1087,8 @@ analyze_function (struct cgraph_node *fn, bool ipa)\n \t    }\n \t  else\n \t    {\n-\t      class loop *loop;\n \t      scev_initialize ();\n-\t      FOR_EACH_LOOP (loop, 0)\n+\t      for (auto loop : loops_list (cfun, 0))\n \t\tif (!finite_loop_p (loop))\n \t\t  {\n \t\t    if (dump_file)"}, {"sha": "c3a4523ad189f126615cdd9d3dda604c06201fd0", "filename": "gcc/loop-doloop.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Floop-doloop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Floop-doloop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-doloop.c?ref=e41ba804ba5f5ca433e09238d561b1b4c8b10985", "patch": "@@ -789,18 +789,14 @@ doloop_optimize (class loop *loop)\n void\n doloop_optimize_loops (void)\n {\n-  class loop *loop;\n-\n   if (optimize == 1)\n     {\n       df_live_add_problem ();\n       df_live_set_all_dirty ();\n     }\n \n-  FOR_EACH_LOOP (loop, 0)\n-    {\n-      doloop_optimize (loop);\n-    }\n+  for (auto loop : loops_list (cfun, 0))\n+    doloop_optimize (loop);\n \n   if (optimize == 1)\n     df_remove_problem (df_live);"}, {"sha": "04054ef6222f8bdc07f693b44bf17006ee36d430", "filename": "gcc/loop-init.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Floop-init.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Floop-init.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-init.c?ref=e41ba804ba5f5ca433e09238d561b1b4c8b10985", "patch": "@@ -137,7 +137,6 @@ loop_optimizer_init (unsigned flags)\n void\n loop_optimizer_finalize (struct function *fn, bool clean_loop_closed_phi)\n {\n-  class loop *loop;\n   basic_block bb;\n \n   timevar_push (TV_LOOP_FINI);\n@@ -167,7 +166,7 @@ loop_optimizer_finalize (struct function *fn, bool clean_loop_closed_phi)\n       goto loop_fini_done;\n     }\n \n-  FOR_EACH_LOOP_FN (fn, loop, 0)\n+  for (auto loop : loops_list (fn, 0))\n     free_simple_loop_desc (loop);\n \n   /* Clean up.  */\n@@ -229,7 +228,7 @@ fix_loop_structure (bitmap changed_bbs)\n      loops, so that when we remove the loops, we know that the loops inside\n      are preserved, and do not waste time relinking loops that will be\n      removed later.  */\n-  FOR_EACH_LOOP (loop, LI_FROM_INNERMOST)\n+  for (auto loop : loops_list (cfun, LI_FROM_INNERMOST))\n     {\n       /* Detect the case that the loop is no longer present even though\n          it wasn't marked for removal."}, {"sha": "fca0c2b24be44c83a01303a6311bd0556f58f25a", "filename": "gcc/loop-invariant.c", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Floop-invariant.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Floop-invariant.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-invariant.c?ref=e41ba804ba5f5ca433e09238d561b1b4c8b10985", "patch": "@@ -2136,7 +2136,7 @@ calculate_loop_reg_pressure (void)\n   rtx link;\n   class loop *loop, *parent;\n \n-  FOR_EACH_LOOP (loop, 0)\n+  for (auto loop : loops_list (cfun, 0))\n     if (loop->aux == NULL)\n       {\n \tloop->aux = xcalloc (1, sizeof (class loop_data));\n@@ -2203,7 +2203,7 @@ calculate_loop_reg_pressure (void)\n   bitmap_release (&curr_regs_live);\n   if (flag_ira_region == IRA_REGION_MIXED\n       || flag_ira_region == IRA_REGION_ALL)\n-    FOR_EACH_LOOP (loop, 0)\n+    for (auto loop : loops_list (cfun, 0))\n       {\n \tEXECUTE_IF_SET_IN_BITMAP (&LOOP_DATA (loop)->regs_live, 0, j, bi)\n \t  if (! bitmap_bit_p (&LOOP_DATA (loop)->regs_ref, j))\n@@ -2217,7 +2217,7 @@ calculate_loop_reg_pressure (void)\n       }\n   if (dump_file == NULL)\n     return;\n-  FOR_EACH_LOOP (loop, 0)\n+  for (auto loop : loops_list (cfun, 0))\n     {\n       parent = loop_outer (loop);\n       fprintf (dump_file, \"\\n  Loop %d (parent %d, header bb%d, depth %d)\\n\",\n@@ -2251,8 +2251,6 @@ calculate_loop_reg_pressure (void)\n void\n move_loop_invariants (void)\n {\n-  class loop *loop;\n-\n   if (optimize == 1)\n     df_live_add_problem ();\n   /* ??? This is a hack.  We should only need to call df_live_set_all_dirty\n@@ -2271,7 +2269,7 @@ move_loop_invariants (void)\n     }\n   df_set_flags (DF_EQ_NOTES + DF_DEFER_INSN_RESCAN);\n   /* Process the loops, innermost first.  */\n-  FOR_EACH_LOOP (loop, LI_FROM_INNERMOST)\n+  for (auto loop : loops_list (cfun, LI_FROM_INNERMOST))\n     {\n       curr_loop = loop;\n       /* move_single_loop_invariants for very large loops is time consuming\n@@ -2284,10 +2282,8 @@ move_loop_invariants (void)\n \tmove_single_loop_invariants (loop);\n     }\n \n-  FOR_EACH_LOOP (loop, 0)\n-    {\n+  for (auto loop : loops_list (cfun, 0))\n       free_loop_data (loop);\n-    }\n \n   if (flag_ira_loop_pressure)\n     /* There is no sense to keep this info because it was most"}, {"sha": "2b31fafa3a389dea3fb6de966a34b40509c5230a", "filename": "gcc/loop-unroll.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Floop-unroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Floop-unroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-unroll.c?ref=e41ba804ba5f5ca433e09238d561b1b4c8b10985", "patch": "@@ -214,10 +214,8 @@ report_unroll (class loop *loop, dump_location_t locus)\n static void\n decide_unrolling (int flags)\n {\n-  class loop *loop;\n-\n   /* Scan the loops, inner ones first.  */\n-  FOR_EACH_LOOP (loop, LI_FROM_INNERMOST)\n+  for (auto loop : loops_list (cfun, LI_FROM_INNERMOST))\n     {\n       loop->lpt_decision.decision = LPT_NONE;\n       dump_user_location_t locus = get_loop_location (loop);\n@@ -278,14 +276,13 @@ decide_unrolling (int flags)\n void\n unroll_loops (int flags)\n {\n-  class loop *loop;\n   bool changed = false;\n \n   /* Now decide rest of unrolling.  */\n   decide_unrolling (flags);\n \n   /* Scan the loops, inner ones first.  */\n-  FOR_EACH_LOOP (loop, LI_FROM_INNERMOST)\n+  for (auto loop : loops_list (cfun, LI_FROM_INNERMOST))\n     {\n       /* And perform the appropriate transformations.  */\n       switch (loop->lpt_decision.decision)"}, {"sha": "1c1b459d34fb7b33987d4b4067286e4dd833c095", "filename": "gcc/modulo-sched.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Fmodulo-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Fmodulo-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmodulo-sched.c?ref=e41ba804ba5f5ca433e09238d561b1b4c8b10985", "patch": "@@ -1353,7 +1353,6 @@ sms_schedule (void)\n   int maxii, max_asap;\n   partial_schedule_ptr ps;\n   basic_block bb = NULL;\n-  class loop *loop;\n   basic_block condition_bb = NULL;\n   edge latch_edge;\n   HOST_WIDE_INT trip_count, max_trip_count;\n@@ -1397,7 +1396,7 @@ sms_schedule (void)\n \n   /* Build DDGs for all the relevant loops and hold them in G_ARR\n      indexed by the loop index.  */\n-  FOR_EACH_LOOP (loop, 0)\n+  for (auto loop : loops_list (cfun, 0))\n     {\n       rtx_insn *head, *tail;\n       rtx count_reg;\n@@ -1543,7 +1542,7 @@ sms_schedule (void)\n   }\n \n   /* We don't want to perform SMS on new loops - created by versioning.  */\n-  FOR_EACH_LOOP (loop, 0)\n+  for (auto loop : loops_list (cfun, 0))\n     {\n       rtx_insn *head, *tail;\n       rtx count_reg;"}, {"sha": "d9c7249831e4a630f717e6cce603a941da8adef3", "filename": "gcc/predict.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=e41ba804ba5f5ca433e09238d561b1b4c8b10985", "patch": "@@ -1949,7 +1949,7 @@ predict_loops (void)\n \n   /* Try to predict out blocks in a loop that are not part of a\n      natural loop.  */\n-  FOR_EACH_LOOP (loop, LI_FROM_INNERMOST)\n+  for (auto loop : loops_list (cfun, LI_FROM_INNERMOST))\n     {\n       basic_block bb, *bbs;\n       unsigned j, n_exits = 0;\n@@ -4111,8 +4111,7 @@ pass_profile::execute (function *fun)\n     profile_status_for_fn (fun) = PROFILE_GUESSED;\n  if (dump_file && (dump_flags & TDF_DETAILS))\n    {\n-     class loop *loop;\n-     FOR_EACH_LOOP (loop, LI_FROM_INNERMOST)\n+     for (auto loop : loops_list (cfun, LI_FROM_INNERMOST))\n        if (loop->header->count.initialized_p ())\n          fprintf (dump_file, \"Loop got predicted %d to iterate %i times.\\n\",\n        \t   loop->num,"}, {"sha": "c33c833167f660fe15f70da323d1c7b49c91e3a2", "filename": "gcc/profile.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Fprofile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Fprofile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile.c?ref=e41ba804ba5f5ca433e09238d561b1b4c8b10985", "patch": "@@ -1466,13 +1466,12 @@ branch_prob (bool thunk)\n   if (flag_branch_probabilities\n       && (profile_status_for_fn (cfun) == PROFILE_READ))\n     {\n-      class loop *loop;\n       if (dump_file && (dump_flags & TDF_DETAILS))\n \treport_predictor_hitrates ();\n \n       /* At this moment we have precise loop iteration count estimates.\n \t Record them to loop structure before the profile gets out of date. */\n-      FOR_EACH_LOOP (loop, 0)\n+      for (auto loop : loops_list (cfun, 0))\n \tif (loop->header->count > 0 && loop->header->count.reliable_p ())\n \t  {\n \t    gcov_type nit = expected_loop_iterations_unbounded (loop);"}, {"sha": "48965bfb0adca8d99048e67a94cf2f79abb54251", "filename": "gcc/sel-sched-ir.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Fsel-sched-ir.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Fsel-sched-ir.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched-ir.c?ref=e41ba804ba5f5ca433e09238d561b1b4c8b10985", "patch": "@@ -6247,10 +6247,8 @@ make_regions_from_the_rest (void)\n /* Free data structures used in pipelining of loops.  */\n void sel_finish_pipelining (void)\n {\n-  class loop *loop;\n-\n   /* Release aux fields so we don't free them later by mistake.  */\n-  FOR_EACH_LOOP (loop, 0)\n+  for (auto loop : loops_list (cfun, 0))\n     loop->aux = NULL;\n \n   loop_optimizer_finalize ();\n@@ -6271,11 +6269,11 @@ sel_find_rgns (void)\n \n   if (current_loops)\n     {\n-      loop_p loop;\n+      unsigned flags = flag_sel_sched_pipelining_outer_loops\n+\t\t\t ? LI_FROM_INNERMOST\n+\t\t\t : LI_ONLY_INNERMOST;\n \n-      FOR_EACH_LOOP (loop, (flag_sel_sched_pipelining_outer_loops\n-\t\t\t    ? LI_FROM_INNERMOST\n-\t\t\t    : LI_ONLY_INNERMOST))\n+      for (auto loop : loops_list (cfun, flags))\n \tmake_regions_from_loop_nest (loop);\n     }\n "}, {"sha": "48ee8c011abda6d2d8da0cafc31dc9fdbbf15d3a", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=e41ba804ba5f5ca433e09238d561b1b4c8b10985", "patch": "@@ -312,12 +312,11 @@ replace_loop_annotate_in_block (basic_block bb, class loop *loop)\n static void\n replace_loop_annotate (void)\n {\n-  class loop *loop;\n   basic_block bb;\n   gimple_stmt_iterator gsi;\n   gimple *stmt;\n \n-  FOR_EACH_LOOP (loop, 0)\n+  for (auto loop : loops_list (cfun, 0))\n     {\n       /* First look into the header.  */\n       replace_loop_annotate_in_block (loop->header, loop);\n@@ -2027,12 +2026,8 @@ replace_uses_by (tree name, tree val)\n   /* Also update the trees stored in loop structures.  */\n   if (current_loops)\n     {\n-      class loop *loop;\n-\n-      FOR_EACH_LOOP (loop, 0)\n-\t{\n+      for (auto loop : loops_list (cfun, 0))\n \t  substitute_in_loop_info (loop, name, val);\n-\t}\n     }\n }\n \n@@ -7752,9 +7747,9 @@ move_sese_region_to_fn (struct function *dest_cfun, basic_block entry_bb,\n \n   /* Fix up orig_loop_num.  If the block referenced in it has been moved\n      to dest_cfun, update orig_loop_num field, otherwise clear it.  */\n-  class loop *dloop;\n+  class loop *dloop = NULL;\n   signed char *moved_orig_loop_num = NULL;\n-  FOR_EACH_LOOP_FN (dest_cfun, dloop, 0)\n+  for (class loop *dloop : loops_list (dest_cfun, 0))\n     if (dloop->orig_loop_num)\n       {\n \tif (moved_orig_loop_num == NULL)"}, {"sha": "d7b7b3093090c29e96aba1a0f7e59425a08d2e31", "filename": "gcc/tree-if-conv.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Ftree-if-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Ftree-if-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.c?ref=e41ba804ba5f5ca433e09238d561b1b4c8b10985", "patch": "@@ -3300,14 +3300,13 @@ pass_if_conversion::gate (function *fun)\n unsigned int\n pass_if_conversion::execute (function *fun)\n {\n-  class loop *loop;\n   unsigned todo = 0;\n \n   if (number_of_loops (fun) <= 1)\n     return 0;\n \n   auto_vec<gimple *> preds;\n-  FOR_EACH_LOOP (loop, 0)\n+  for (auto loop : loops_list (cfun, 0))\n     if (flag_tree_loop_if_convert == 1\n \t|| ((flag_tree_loop_vectorize || loop->force_vectorize)\n \t    && !loop->dont_vectorize))"}, {"sha": "2df762c8aa88d84eaf615f4a6e67f7f23f6cdbfe", "filename": "gcc/tree-loop-distribution.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Ftree-loop-distribution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Ftree-loop-distribution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-loop-distribution.c?ref=e41ba804ba5f5ca433e09238d561b1b4c8b10985", "patch": "@@ -3315,7 +3315,7 @@ loop_distribution::execute (function *fun)\n \n   /* We can at the moment only distribute non-nested loops, thus restrict\n      walking to innermost loops.  */\n-  FOR_EACH_LOOP (loop, LI_ONLY_INNERMOST)\n+  for (auto loop : loops_list (cfun, LI_ONLY_INNERMOST))\n     {\n       /* Don't distribute multiple exit edges loop, or cold loop when\n          not doing pattern detection.  */"}, {"sha": "5e64d5ed7a38d95126cb17535ab7f0bb3b1a2ad4", "filename": "gcc/tree-parloops.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Ftree-parloops.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Ftree-parloops.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-parloops.c?ref=e41ba804ba5f5ca433e09238d561b1b4c8b10985", "patch": "@@ -3990,7 +3990,6 @@ parallelize_loops (bool oacc_kernels_p)\n {\n   unsigned n_threads;\n   bool changed = false;\n-  class loop *loop;\n   class loop *skip_loop = NULL;\n   class tree_niter_desc niter_desc;\n   struct obstack parloop_obstack;\n@@ -4021,7 +4020,7 @@ parallelize_loops (bool oacc_kernels_p)\n \n   calculate_dominance_info (CDI_DOMINATORS);\n \n-  FOR_EACH_LOOP (loop, 0)\n+  for (auto loop : loops_list (cfun, 0))\n     {\n       if (loop == skip_loop)\n \t{"}, {"sha": "bed30d2ec7a5f2e4a7b7a36ba0ed1e973975669a", "filename": "gcc/tree-predcom.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Ftree-predcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Ftree-predcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-predcom.c?ref=e41ba804ba5f5ca433e09238d561b1b4c8b10985", "patch": "@@ -3419,11 +3419,10 @@ pcom_worker::tree_predictive_commoning_loop (bool allow_unroll_p)\n unsigned\n tree_predictive_commoning (bool allow_unroll_p)\n {\n-  class loop *loop;\n   unsigned ret = 0, changed = 0;\n \n   initialize_original_copy_tables ();\n-  FOR_EACH_LOOP (loop, LI_ONLY_INNERMOST)\n+  for (auto loop : loops_list (cfun, LI_ONLY_INNERMOST))\n     if (optimize_loop_for_speed_p (loop))\n       {\n \tpcom_worker w(loop);"}, {"sha": "dbdfe8ffa7217bc2b4cc4949b376581a63770af0", "filename": "gcc/tree-scalar-evolution.c", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Ftree-scalar-evolution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Ftree-scalar-evolution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.c?ref=e41ba804ba5f5ca433e09238d561b1b4c8b10985", "patch": "@@ -2977,16 +2977,12 @@ gather_stats_on_scev_database (void)\n void\n scev_initialize (void)\n {\n-  class loop *loop;\n-\n   gcc_assert (! scev_initialized_p ());\n \n   scalar_evolution_info = hash_table<scev_info_hasher>::create_ggc (100);\n \n-  FOR_EACH_LOOP (loop, 0)\n-    {\n-      loop->nb_iterations = NULL_TREE;\n-    }\n+  for (auto loop : loops_list (cfun, 0))\n+    loop->nb_iterations = NULL_TREE;\n }\n \n /* Return true if SCEV is initialized.  */\n@@ -3015,14 +3011,10 @@ scev_reset_htab (void)\n void\n scev_reset (void)\n {\n-  class loop *loop;\n-\n   scev_reset_htab ();\n \n-  FOR_EACH_LOOP (loop, 0)\n-    {\n-      loop->nb_iterations = NULL_TREE;\n-    }\n+  for (auto loop : loops_list (cfun, 0))\n+    loop->nb_iterations = NULL_TREE;\n }\n \n /* Return true if the IV calculation in TYPE can overflow based on the knowledge"}, {"sha": "0778eb9704a6753df6f8bbf8d948c7c39de16f6f", "filename": "gcc/tree-ssa-dce.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Ftree-ssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Ftree-ssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.c?ref=e41ba804ba5f5ca433e09238d561b1b4c8b10985", "patch": "@@ -417,7 +417,6 @@ find_obviously_necessary_stmts (bool aggressive)\n   /* Prevent the empty possibly infinite loops from being removed.  */\n   if (aggressive)\n     {\n-      class loop *loop;\n       if (mark_irreducible_loops ())\n \tFOR_EACH_BB_FN (bb, cfun)\n \t  {\n@@ -433,7 +432,7 @@ find_obviously_necessary_stmts (bool aggressive)\n \t\t}\n \t  }\n \n-      FOR_EACH_LOOP (loop, 0)\n+      for (auto loop : loops_list (cfun, 0))\n \tif (!finite_loop_p (loop))\n \t  {\n \t    if (dump_file)"}, {"sha": "3d5fa8dc0f8225cfeae6fec9e6296d0610d9d072", "filename": "gcc/tree-ssa-live.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Ftree-ssa-live.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Ftree-ssa-live.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-live.c?ref=e41ba804ba5f5ca433e09238d561b1b4c8b10985", "patch": "@@ -908,8 +908,7 @@ remove_unused_locals (void)\n \n   if (cfun->has_simduid_loops)\n     {\n-      class loop *loop;\n-      FOR_EACH_LOOP (loop, 0)\n+      for (auto loop : loops_list (cfun, 0))\n \tif (loop->simduid && !is_used_p (loop->simduid))\n \t  loop->simduid = NULL_TREE;\n     }"}, {"sha": "b4e09f97b28e8de0dc887fde40caf3d520316664", "filename": "gcc/tree-ssa-loop-ch.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Ftree-ssa-loop-ch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Ftree-ssa-loop-ch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ch.c?ref=e41ba804ba5f5ca433e09238d561b1b4c8b10985", "patch": "@@ -348,7 +348,6 @@ class pass_ch_vect : public ch_base\n unsigned int\n ch_base::copy_headers (function *fun)\n {\n-  class loop *loop;\n   basic_block header;\n   edge exit, entry;\n   basic_block *bbs, *copied_bbs;\n@@ -365,7 +364,7 @@ ch_base::copy_headers (function *fun)\n \n   auto_vec<std::pair<edge, loop_p> > copied;\n \n-  FOR_EACH_LOOP (loop, 0)\n+  for (auto loop : loops_list (cfun, 0))\n     {\n       int initial_limit = param_max_loop_header_insns;\n       int remaining_limit = initial_limit;"}, {"sha": "d9f75d5025ee9f69fbd2ac1c46a31b52338c95de", "filename": "gcc/tree-ssa-loop-im.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Ftree-ssa-loop-im.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Ftree-ssa-loop-im.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-im.c?ref=e41ba804ba5f5ca433e09238d561b1b4c8b10985", "patch": "@@ -1662,7 +1662,7 @@ analyze_memory_references (bool store_motion)\n {\n   gimple_stmt_iterator bsi;\n   basic_block bb, *bbs;\n-  class loop *loop, *outer;\n+  class loop *outer;\n   unsigned i, n;\n \n   /* Collect all basic-blocks in loops and sort them after their\n@@ -1706,7 +1706,7 @@ analyze_memory_references (bool store_motion)\n \n   /* Propagate the information about accessed memory references up\n      the loop hierarchy.  */\n-  FOR_EACH_LOOP (loop, LI_FROM_INNERMOST)\n+  for (auto loop : loops_list (cfun, LI_FROM_INNERMOST))\n     {\n       /* Finalize the overall touched references (including subloops).  */\n       bitmap_ior_into (&memory_accesses.all_refs_stored_in_loop[loop->num],\n@@ -3133,7 +3133,6 @@ fill_always_executed_in (void)\n static void\n tree_ssa_lim_initialize (bool store_motion)\n {\n-  class loop *loop;\n   unsigned i;\n \n   bitmap_obstack_initialize (&lim_bitmap_obstack);\n@@ -3177,7 +3176,7 @@ tree_ssa_lim_initialize (bool store_motion)\n      its postorder index.  */\n   i = 0;\n   bb_loop_postorder = XNEWVEC (unsigned, number_of_loops (cfun));\n-  FOR_EACH_LOOP (loop, LI_FROM_INNERMOST)\n+  for (auto loop : loops_list (cfun, LI_FROM_INNERMOST))\n     bb_loop_postorder[loop->num] = i++;\n }\n "}, {"sha": "8d8791f837ec92d0554bb24a6fb74aef801db4d2", "filename": "gcc/tree-ssa-loop-ivcanon.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Ftree-ssa-loop-ivcanon.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Ftree-ssa-loop-ivcanon.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivcanon.c?ref=e41ba804ba5f5ca433e09238d561b1b4c8b10985", "patch": "@@ -1285,14 +1285,13 @@ canonicalize_loop_induction_variables (class loop *loop,\n unsigned int\n canonicalize_induction_variables (void)\n {\n-  class loop *loop;\n   bool changed = false;\n   bool irred_invalidated = false;\n   bitmap loop_closed_ssa_invalidated = BITMAP_ALLOC (NULL);\n \n   estimate_numbers_of_iterations (cfun);\n \n-  FOR_EACH_LOOP (loop, LI_FROM_INNERMOST)\n+  for (auto loop : loops_list (cfun, LI_FROM_INNERMOST))\n     {\n       changed |= canonicalize_loop_induction_variables (loop,\n \t\t\t\t\t\t\ttrue, UL_SINGLE_ITER,"}, {"sha": "4a498abe3b018b68f25c4fec3ae6321f7ad15bc3", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=e41ba804ba5f5ca433e09238d561b1b4c8b10985", "patch": "@@ -8131,14 +8131,13 @@ tree_ssa_iv_optimize_loop (struct ivopts_data *data, class loop *loop,\n void\n tree_ssa_iv_optimize (void)\n {\n-  class loop *loop;\n   struct ivopts_data data;\n   auto_bitmap toremove;\n \n   tree_ssa_iv_optimize_init (&data);\n \n   /* Optimize the loops starting with the innermost ones.  */\n-  FOR_EACH_LOOP (loop, LI_FROM_INNERMOST)\n+  for (auto loop : loops_list (cfun, LI_FROM_INNERMOST))\n     {\n       if (!dbg_cnt (ivopts_loop))\n \tcontinue;"}, {"sha": "c7a2f67b1293e337b3dd6f702f1072700be450e3", "filename": "gcc/tree-ssa-loop-manip.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Ftree-ssa-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Ftree-ssa-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-manip.c?ref=e41ba804ba5f5ca433e09238d561b1b4c8b10985", "patch": "@@ -362,11 +362,10 @@ add_exit_phis (bitmap names_to_rename, bitmap *use_blocks, bitmap *loop_exits)\n static void\n get_loops_exits (bitmap *loop_exits)\n {\n-  class loop *loop;\n   unsigned j;\n   edge e;\n \n-  FOR_EACH_LOOP (loop, 0)\n+  for (auto loop : loops_list (cfun, 0))\n     {\n       auto_vec<edge> exit_edges = get_loop_exit_edges (loop);\n       loop_exits[loop->num] = BITMAP_ALLOC (&loop_renamer_obstack);"}, {"sha": "466158a5eb16e1432a28853f5992c97ce076172f", "filename": "gcc/tree-ssa-loop-niter.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Ftree-ssa-loop-niter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Ftree-ssa-loop-niter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.c?ref=e41ba804ba5f5ca433e09238d561b1b4c8b10985", "patch": "@@ -4559,13 +4559,11 @@ estimated_stmt_executions (class loop *loop, widest_int *nit)\n void\n estimate_numbers_of_iterations (function *fn)\n {\n-  class loop *loop;\n-\n   /* We don't want to issue signed overflow warnings while getting\n      loop iteration estimates.  */\n   fold_defer_overflow_warnings ();\n \n-  FOR_EACH_LOOP_FN (fn, loop, 0)\n+  for (auto loop : loops_list (fn, 0))\n     estimate_numbers_of_iterations (loop);\n \n   fold_undefer_and_ignore_overflow_warnings ();\n@@ -5031,9 +5029,7 @@ free_numbers_of_iterations_estimates (class loop *loop)\n void\n free_numbers_of_iterations_estimates (function *fn)\n {\n-  class loop *loop;\n-\n-  FOR_EACH_LOOP_FN (fn, loop, 0)\n+  for (auto loop : loops_list (fn, 0))\n     free_numbers_of_iterations_estimates (loop);\n }\n "}, {"sha": "85977e2324556ae2c4e15e80329a6798c2d7703a", "filename": "gcc/tree-ssa-loop-prefetch.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Ftree-ssa-loop-prefetch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Ftree-ssa-loop-prefetch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-prefetch.c?ref=e41ba804ba5f5ca433e09238d561b1b4c8b10985", "patch": "@@ -1980,7 +1980,6 @@ loop_prefetch_arrays (class loop *loop)\n unsigned int\n tree_ssa_prefetch_arrays (void)\n {\n-  class loop *loop;\n   bool unrolled = false;\n   int todo_flags = 0;\n \n@@ -2025,7 +2024,7 @@ tree_ssa_prefetch_arrays (void)\n       set_builtin_decl (BUILT_IN_PREFETCH, decl, false);\n     }\n \n-  FOR_EACH_LOOP (loop, LI_FROM_INNERMOST)\n+  for (auto loop : loops_list (cfun, LI_FROM_INNERMOST))\n     {\n       if (dump_file && (dump_flags & TDF_DETAILS))\n \tfprintf (dump_file, \"Processing loop %d:\\n\", loop->num);"}, {"sha": "3f6ad04662352d682c48ec04ddd688dbc9ea8ae1", "filename": "gcc/tree-ssa-loop-split.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Ftree-ssa-loop-split.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Ftree-ssa-loop-split.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-split.c?ref=e41ba804ba5f5ca433e09238d561b1b4c8b10985", "patch": "@@ -1598,18 +1598,17 @@ split_loop_on_cond (struct loop *loop)\n static unsigned int\n tree_ssa_split_loops (void)\n {\n-  class loop *loop;\n   bool changed = false;\n \n   gcc_assert (scev_initialized_p ());\n \n   calculate_dominance_info (CDI_POST_DOMINATORS);\n \n-  FOR_EACH_LOOP (loop, LI_INCLUDE_ROOT)\n+  for (auto loop : loops_list (cfun, LI_INCLUDE_ROOT))\n     loop->aux = NULL;\n \n   /* Go through all loops starting from innermost.  */\n-  FOR_EACH_LOOP (loop, LI_FROM_INNERMOST)\n+  for (auto loop : loops_list (cfun, LI_FROM_INNERMOST))\n     {\n       if (loop->aux)\n \t{\n@@ -1630,7 +1629,7 @@ tree_ssa_split_loops (void)\n \t}\n     }\n \n-  FOR_EACH_LOOP (loop, LI_INCLUDE_ROOT)\n+  for (auto loop : loops_list (cfun, LI_INCLUDE_ROOT))\n     loop->aux = NULL;\n \n   clear_aux_for_blocks ();"}, {"sha": "fe4dacc0833fc4dd8744286546fb98ddf983eae5", "filename": "gcc/tree-ssa-loop-unswitch.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Ftree-ssa-loop-unswitch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Ftree-ssa-loop-unswitch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-unswitch.c?ref=e41ba804ba5f5ca433e09238d561b1b4c8b10985", "patch": "@@ -90,11 +90,10 @@ static tree get_vop_from_header (class loop *);\n unsigned int\n tree_ssa_unswitch_loops (void)\n {\n-  class loop *loop;\n   bool changed = false;\n \n   /* Go through all loops starting from innermost.  */\n-  FOR_EACH_LOOP (loop, LI_FROM_INNERMOST)\n+  for (auto loop : loops_list (cfun, LI_FROM_INNERMOST))\n     {\n       if (!loop->inner)\n \t/* Unswitch innermost loop.  */"}, {"sha": "0cc4b3bbccf343b22ae000b3671c180f653a595e", "filename": "gcc/tree-ssa-loop.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Ftree-ssa-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Ftree-ssa-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop.c?ref=e41ba804ba5f5ca433e09238d561b1b4c8b10985", "patch": "@@ -157,8 +157,7 @@ gate_oacc_kernels (function *fn)\n   if (!lookup_attribute (\"oacc kernels\", DECL_ATTRIBUTES (fn->decl)))\n     return false;\n \n-  class loop *loop;\n-  FOR_EACH_LOOP (loop, 0)\n+  for (auto loop : loops_list (cfun, 0))\n     if (loop->in_oacc_kernels_region)\n       return true;\n \n@@ -455,12 +454,11 @@ class pass_scev_cprop : public gimple_opt_pass\n unsigned\n pass_scev_cprop::execute (function *)\n {\n-  class loop *loop;\n   bool any = false;\n \n   /* Perform final value replacement in loops, in case the replacement\n      expressions are cheap.  */\n-  FOR_EACH_LOOP (loop, LI_FROM_INNERMOST)\n+  for (auto loop : loops_list (cfun, LI_FROM_INNERMOST))\n     any |= final_value_replacement_loop (loop);\n \n   return any ? TODO_cleanup_cfg | TODO_update_ssa_only_virtuals : 0;"}, {"sha": "6d19410caa86b70aca19d5ce1e618c289b346401", "filename": "gcc/tree-ssa-propagate.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Ftree-ssa-propagate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Ftree-ssa-propagate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-propagate.c?ref=e41ba804ba5f5ca433e09238d561b1b4c8b10985", "patch": "@@ -1262,7 +1262,6 @@ clean_up_loop_closed_phi (function *fun)\n   tree rhs;\n   tree lhs;\n   gphi_iterator gsi;\n-  struct loop *loop;\n \n   /* Avoid possibly quadratic work when scanning for loop exits across\n    all loops of a nest.  */\n@@ -1274,7 +1273,7 @@ clean_up_loop_closed_phi (function *fun)\n   calculate_dominance_info  (CDI_DOMINATORS);\n \n   /* Walk over loop in function.  */\n-  FOR_EACH_LOOP_FN (fun, loop, 0)\n+  for (auto loop : loops_list (fun, 0))\n     {\n       /* Check each exit edege of loop.  */\n       auto_vec<edge> exits = get_loop_exit_edges (loop);"}, {"sha": "01fffcd693e32c1c6901af595335aace90601767", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=e41ba804ba5f5ca433e09238d561b1b4c8b10985", "patch": "@@ -7651,9 +7651,8 @@ do_rpo_vn (function *fn, edge entry, bitmap exit_bbs,\n      loops and the outermost one optimistically.  */\n   if (iterate)\n     {\n-      loop_p loop;\n       unsigned max_depth = param_rpo_vn_max_loop_depth;\n-      FOR_EACH_LOOP (loop, LI_ONLY_INNERMOST)\n+      for (auto loop : loops_list (cfun, LI_ONLY_INNERMOST))\n \tif (loop_depth (loop) > max_depth)\n \t  for (unsigned i = 2;\n \t       i < loop_depth (loop) - max_depth; ++i)"}, {"sha": "d08e7d30d8dc9acaa627b2c73bd6845c7a5ec74c", "filename": "gcc/tree-ssa-threadupdate.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Ftree-ssa-threadupdate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Ftree-ssa-threadupdate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadupdate.c?ref=e41ba804ba5f5ca433e09238d561b1b4c8b10985", "patch": "@@ -2562,7 +2562,6 @@ jump_thread_path_registry::thread_through_all_blocks\n {\n   bool retval = false;\n   unsigned int i;\n-  class loop *loop;\n   auto_bitmap threaded_blocks;\n   hash_set<edge> visited_starting_edges;\n \n@@ -2703,7 +2702,7 @@ jump_thread_path_registry::thread_through_all_blocks\n   /* Then perform the threading through loop headers.  We start with the\n      innermost loop, so that the changes in cfg we perform won't affect\n      further threading.  */\n-  FOR_EACH_LOOP (loop, LI_FROM_INNERMOST)\n+  for (auto loop : loops_list (cfun, LI_FROM_INNERMOST))\n     {\n       if (!loop->header\n \t  || !bitmap_bit_p (threaded_blocks, loop->header->index))"}, {"sha": "b9709a613d557445c060669f5b4517a15058f89d", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=e41ba804ba5f5ca433e09238d561b1b4c8b10985", "patch": "@@ -1194,7 +1194,7 @@ vectorize_loops (void)\n   /* If some loop was duplicated, it gets bigger number\n      than all previously defined loops.  This fact allows us to run\n      only over initial loops skipping newly generated ones.  */\n-  FOR_EACH_LOOP (loop, 0)\n+  for (auto loop : loops_list (cfun, 0))\n     if (loop->dont_vectorize)\n       {\n \tany_ifcvt_loops = true;\n@@ -1213,7 +1213,7 @@ vectorize_loops (void)\n \t\t  loop4 (copy of loop2)\n \t\telse\n \t\t  loop5 (copy of loop4)\n-\t   If FOR_EACH_LOOP gives us loop3 first (which has\n+\t   If loops' iteration gives us loop3 first (which has\n \t   dont_vectorize set), make sure to process loop1 before loop4;\n \t   so that we can prevent vectorization of loop4 if loop1\n \t   is successfully vectorized.  */"}, {"sha": "26e71e70c2aa1330f8c4085764497bb6f544f637", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e41ba804ba5f5ca433e09238d561b1b4c8b10985/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=e41ba804ba5f5ca433e09238d561b1b4c8b10985", "patch": "@@ -3337,8 +3337,7 @@ vrp_asserts::find_assert_locations (void)\n   /* Pre-seed loop latch liveness from loop header PHI nodes.  Due to\n      the order we compute liveness and insert asserts we otherwise\n      fail to insert asserts into the loop latch.  */\n-  loop_p loop;\n-  FOR_EACH_LOOP (loop, 0)\n+  for (auto loop : loops_list (cfun, 0))\n     {\n       i = loop->latch->index;\n       unsigned int j = single_succ_edge (loop->latch)->dest_idx;"}]}