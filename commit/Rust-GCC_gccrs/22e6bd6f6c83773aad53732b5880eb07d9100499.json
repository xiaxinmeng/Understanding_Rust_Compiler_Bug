{"sha": "22e6bd6f6c83773aad53732b5880eb07d9100499", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjJlNmJkNmY2YzgzNzczYWFkNTM3MzJiNTg4MGViMDdkOTEwMDQ5OQ==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.vnet.ibm.com", "date": "2014-08-20T20:11:53Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2014-08-20T20:11:53Z"}, "message": "df.h (web_entry_base): Replace existing struct web_entry with a new class web_entry_base with only the...\n\n2014-08-20  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\t* df.h (web_entry_base): Replace existing struct web_entry with a\n\tnew class web_entry_base with only the predecessor member.\n\t(unionfind_root): Remove declaration and move to class member.\n\t(unionfind_union): Remove declaration and move to friend\n\tfunction.\n\t(union_defs): Remove declaration.\n\t* web.c (web_entry_base::unionfind_root): Modify to be member\n\tfunction and adjust accessors.\n\t(unionfind_union): Modify to be friend function and adjust\n\taccessors.\n\t(web_entry): New subclass of web_entry_base containing the reg\n\tmember.\n\t(union_match_dups): Modify for struct -> class changes.\n\t(union_defs): Likewise.\n\t(entry_register): Likewise.\n\t(pass_web::execute): Likewise.\n\nFrom-SVN: r214242", "tree": {"sha": "f16ef727424915ea7d23972c171881bf15c630a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f16ef727424915ea7d23972c171881bf15c630a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22e6bd6f6c83773aad53732b5880eb07d9100499", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22e6bd6f6c83773aad53732b5880eb07d9100499", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22e6bd6f6c83773aad53732b5880eb07d9100499", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22e6bd6f6c83773aad53732b5880eb07d9100499/comments", "author": {"login": "wschmidt-ibm", "id": 5520937, "node_id": "MDQ6VXNlcjU1MjA5Mzc=", "avatar_url": "https://avatars.githubusercontent.com/u/5520937?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wschmidt-ibm", "html_url": "https://github.com/wschmidt-ibm", "followers_url": "https://api.github.com/users/wschmidt-ibm/followers", "following_url": "https://api.github.com/users/wschmidt-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/wschmidt-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/wschmidt-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wschmidt-ibm/subscriptions", "organizations_url": "https://api.github.com/users/wschmidt-ibm/orgs", "repos_url": "https://api.github.com/users/wschmidt-ibm/repos", "events_url": "https://api.github.com/users/wschmidt-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/wschmidt-ibm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cffe22c52a61b5ff19242712661dd014fcaeb74c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cffe22c52a61b5ff19242712661dd014fcaeb74c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cffe22c52a61b5ff19242712661dd014fcaeb74c"}], "stats": {"total": 112, "additions": 71, "deletions": 41}, "files": [{"sha": "9351048440cacbfc22659ccca62e26be134476db", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22e6bd6f6c83773aad53732b5880eb07d9100499/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22e6bd6f6c83773aad53732b5880eb07d9100499/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=22e6bd6f6c83773aad53732b5880eb07d9100499", "patch": "@@ -1,3 +1,22 @@\n+2014-08-20  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\t* df.h (web_entry_base): Replace existing struct web_entry with a\n+\tnew class web_entry_base with only the predecessor member.\n+\t(unionfind_root): Remove declaration and move to class member.\n+\t(unionfind_union): Remove declaration and move to friend\n+\tfunction.\n+\t(union_defs): Remove declaration.\n+\t* web.c (web_entry_base::unionfind_root): Modify to be member\n+\tfunction and adjust accessors.\n+\t(unionfind_union): Modify to be friend function and adjust\n+\taccessors.\n+\t(web_entry): New subclass of web_entry_base containing the reg\n+\tmember.\n+\t(union_match_dups): Modify for struct -> class changes.\n+\t(union_defs): Likewise.\n+\t(entry_register): Likewise.\n+\t(pass_web::execute): Likewise.\n+\n 2014-08-20  Bill Schmidt  <wschmidt@vnet.ibm.com>\n \n \t* config/rs6000/rs6000-c.c (rs6000_cpu_cpp_builtins): Provide"}, {"sha": "c20f8a0ea84a54cd43921fa11e2974bfbf63f912", "filename": "gcc/df.h", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22e6bd6f6c83773aad53732b5880eb07d9100499/gcc%2Fdf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22e6bd6f6c83773aad53732b5880eb07d9100499/gcc%2Fdf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf.h?ref=22e6bd6f6c83773aad53732b5880eb07d9100499", "patch": "@@ -1184,20 +1184,22 @@ df_single_use (const df_insn_info *info)\n \n /* web */\n \n-/* This entry is allocated for each reference in the insn stream.  */\n-struct web_entry\n+class web_entry_base\n {\n-  /* Pointer to the parent in the union/find tree.  */\n-  struct web_entry *pred;\n-  /* Newly assigned register to the entry.  Set only for roots.  */\n-  rtx reg;\n-  void* extra_info;\n-};\n+ private:\n+  /* Reference to the parent in the union/find tree.  */\n+  web_entry_base *pred_pvt;\n+\n+ public:\n+  /* Accessors.  */\n+  web_entry_base *pred () { return pred_pvt; }\n+  void set_pred (web_entry_base *p) { pred_pvt = p; }\n \n-extern struct web_entry *unionfind_root (struct web_entry *);\n-extern bool unionfind_union (struct web_entry *, struct web_entry *);\n-extern void union_defs (df_ref, struct web_entry *,\n-\t\t\tunsigned int *used, struct web_entry *,\n-\t\t\tbool (*fun) (struct web_entry *, struct web_entry *));\n+  /* Find representative in union-find tree.  */\n+  web_entry_base *unionfind_root ();\n+\n+  /* Union with another set, returning TRUE if they are already unioned.  */\n+  friend bool unionfind_union (web_entry_base *first, web_entry_base *second);\n+};\n \n #endif /* GCC_DF_H */"}, {"sha": "42128a1a76bc59f85e7d8867e1cd6c9ea1ff72e4", "filename": "gcc/web.c", "status": "modified", "additions": 37, "deletions": 28, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22e6bd6f6c83773aad53732b5880eb07d9100499/gcc%2Fweb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22e6bd6f6c83773aad53732b5880eb07d9100499/gcc%2Fweb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fweb.c?ref=22e6bd6f6c83773aad53732b5880eb07d9100499", "patch": "@@ -53,17 +53,17 @@ along with GCC; see the file COPYING3.  If not see\n \n /* Find the root of unionfind tree (the representative of set).  */\n \n-struct web_entry *\n-unionfind_root (struct web_entry *element)\n+web_entry_base *\n+web_entry_base::unionfind_root ()\n {\n-  struct web_entry *element1 = element, *element2;\n+  web_entry_base *element = this, *element1 = this, *element2;\n \n-  while (element->pred)\n-    element = element->pred;\n-  while (element1->pred)\n+  while (element->pred ())\n+    element = element->pred ();\n+  while (element1->pred ())\n     {\n-      element2 = element1->pred;\n-      element1->pred = element;\n+      element2 = element1->pred ();\n+      element1->set_pred (element);\n       element1 = element2;\n     }\n   return element;\n@@ -74,23 +74,32 @@ unionfind_root (struct web_entry *element)\n    nothing is done.  Otherwise, return false.  */\n \n bool\n-unionfind_union (struct web_entry *first, struct web_entry *second)\n+unionfind_union (web_entry_base *first, web_entry_base *second)\n {\n-  first = unionfind_root (first);\n-  second = unionfind_root (second);\n+  first = first->unionfind_root ();\n+  second = second->unionfind_root ();\n   if (first == second)\n     return true;\n-  second->pred = first;\n+  second->set_pred (first);\n   return false;\n }\n \n+class web_entry : public web_entry_base\n+{\n+ private:\n+  rtx reg_pvt;\n+\n+ public:\n+  rtx reg () { return reg_pvt; }\n+  void set_reg (rtx r) { reg_pvt = r; }\n+};\n+\n /* For INSN, union all defs and uses that are linked by match_dup.\n    FUN is the function that does the union.  */\n \n static void\n-union_match_dups (rtx insn, struct web_entry *def_entry,\n-\t\t  struct web_entry *use_entry,\n-\t\t  bool (*fun) (struct web_entry *, struct web_entry *))\n+union_match_dups (rtx insn, web_entry *def_entry, web_entry *use_entry,\n+\t\t  bool (*fun) (web_entry_base *, web_entry_base *))\n {\n   struct df_insn_info *insn_info = DF_INSN_INFO_GET (insn);\n   df_ref use_link = DF_INSN_INFO_USES (insn_info);\n@@ -169,9 +178,9 @@ union_match_dups (rtx insn, struct web_entry *def_entry,\n    the values 0 and 1 are reserved for use by entry_register.  */\n \n void\n-union_defs (df_ref use, struct web_entry *def_entry,\n-\t    unsigned int *used, struct web_entry *use_entry,\n- \t    bool (*fun) (struct web_entry *, struct web_entry *))\n+union_defs (df_ref use, web_entry *def_entry,\n+\t    unsigned int *used, web_entry *use_entry,\n+ \t    bool (*fun) (web_entry_base *, web_entry_base *))\n {\n   struct df_insn_info *insn_info = DF_REF_INSN_INFO (use);\n   struct df_link *link = DF_REF_CHAIN (use);\n@@ -246,15 +255,15 @@ union_defs (df_ref use, struct web_entry *def_entry,\n /* Find the corresponding register for the given entry.  */\n \n static rtx\n-entry_register (struct web_entry *entry, df_ref ref, unsigned int *used)\n+entry_register (web_entry *entry, df_ref ref, unsigned int *used)\n {\n-  struct web_entry *root;\n+  web_entry *root;\n   rtx reg, newreg;\n \n   /* Find the corresponding web and see if it has been visited.  */\n-  root = unionfind_root (entry);\n-  if (root->reg)\n-    return root->reg;\n+  root = (web_entry *)entry->unionfind_root ();\n+  if (root->reg ())\n+    return root->reg ();\n \n   /* We are seeing this web for the first time, do the assignment.  */\n   reg = DF_REF_REAL_REG (ref);\n@@ -278,7 +287,7 @@ entry_register (struct web_entry *entry, df_ref ref, unsigned int *used)\n \t\t REGNO (newreg));\n     }\n \n-  root->reg = newreg;\n+  root->set_reg (newreg);\n   return newreg;\n }\n \n@@ -332,8 +341,8 @@ class pass_web : public rtl_opt_pass\n unsigned int\n pass_web::execute (function *fun)\n {\n-  struct web_entry *def_entry;\n-  struct web_entry *use_entry;\n+  web_entry *def_entry;\n+  web_entry *use_entry;\n   unsigned int max = max_reg_num ();\n   unsigned int *used;\n   basic_block bb;\n@@ -364,9 +373,9 @@ pass_web::execute (function *fun)\n     }\n \n   /* Record the number of uses and defs at the beginning of the optimization.  */\n-  def_entry = XCNEWVEC (struct web_entry, DF_DEFS_TABLE_SIZE ());\n+  def_entry = XCNEWVEC (web_entry, DF_DEFS_TABLE_SIZE ());\n   used = XCNEWVEC (unsigned, max);\n-  use_entry = XCNEWVEC (struct web_entry, uses_num);\n+  use_entry = XCNEWVEC (web_entry, uses_num);\n \n   /* Produce the web.  */\n   FOR_ALL_BB_FN (bb, fun)"}]}