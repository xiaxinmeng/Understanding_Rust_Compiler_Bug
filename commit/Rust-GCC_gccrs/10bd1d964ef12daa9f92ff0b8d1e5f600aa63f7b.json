{"sha": "10bd1d964ef12daa9f92ff0b8d1e5f600aa63f7b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTBiZDFkOTY0ZWYxMmRhYTlmOTJmZjBiOGQxZTVmNjAwYWE2M2Y3Yg==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2019-09-03T08:38:08Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2019-09-03T08:38:08Z"}, "message": "[AArch64] Implement ACLE intrinsics for FRINT[32,64][Z,X]\n\nThis patch implements the ACLE intrinsics to access the FRINT[32,64][Z,X] scalar[1] and vector[2][3] instructions\nfrom Armv8.5-a. These are enabled when the __ARM_FEATURE_FRINT macro is defined.\n\nThey're added in a fairly standard way through builtins and unspecs at the RTL level.\n\n\t* config/aarch64/aarch64.md (\"unspec\"): Add UNSPEC_FRINT32Z,\n\tUNSPEC_FRINT32X, UNSPEC_FRINT64Z, UNSPEC_FRINT64X.\n\t(aarch64_<frintnzs_op><mode>): New define_insn.\n\t* config/aarch64/aarch64.h (TARGET_FRINT): Define.\n\t* config/aarch64/aarch64-c.c (aarch64_update_cpp_builtins): Define\n\t__ARM_FEATURE_FRINT when appropriate.\n\t* config/aarch64/aarch64-simd-builtins.def: Add builtins for frint32z,\n\tfrint32x, frint64z, frint64x.\n\t* config/aarch64/arm_acle.h (__rint32zf, __rint32z, __rint64zf,\n\t__rint64z, __rint32xf, __rint32x, __rint64xf, __rint64x): Define.\n\t* config/aarch64/arm_neon.h (vrnd32z_f32, vrnd32zq_f32, vrnd32z_f64,\n\tvrnd32zq_f64, vrnd32x_f32, vrnd32xq_f32, vrnd32x_f64, vrnd32xq_f64,\n\tvrnd64z_f32, vrnd64zq_f32, vrnd64z_f64, vrnd64zq_f64, vrnd64x_f32,\n\tvrnd64xq_f32, vrnd64x_f64, vrnd64xq_f64): Define.\n\t* config/aarch64/iterators.md (VSFDF): Define.\n\t(FRINTNZX): Likewise.\n\t(frintnzs_op): Likewise.\n\n\t* gcc.target/aarch64/acle/rintnzx_1.c: New test.\n\t* gcc.target/aarch64/simd/vrndnzx_1.c: Likewise.\n\nFrom-SVN: r275334", "tree": {"sha": "2628761019cbc1aa1ce2a36ba88c55739a9b643a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2628761019cbc1aa1ce2a36ba88c55739a9b643a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/10bd1d964ef12daa9f92ff0b8d1e5f600aa63f7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10bd1d964ef12daa9f92ff0b8d1e5f600aa63f7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10bd1d964ef12daa9f92ff0b8d1e5f600aa63f7b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10bd1d964ef12daa9f92ff0b8d1e5f600aa63f7b/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e0664b7a63ed8305e9f8539309df7fb3eb13babe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0664b7a63ed8305e9f8539309df7fb3eb13babe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0664b7a63ed8305e9f8539309df7fb3eb13babe"}], "stats": {"total": 439, "additions": 439, "deletions": 0}, "files": [{"sha": "c6df07843fc2591d07216ed1ba593690cf97c320", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10bd1d964ef12daa9f92ff0b8d1e5f600aa63f7b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10bd1d964ef12daa9f92ff0b8d1e5f600aa63f7b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=10bd1d964ef12daa9f92ff0b8d1e5f600aa63f7b", "patch": "@@ -1,3 +1,23 @@\n+2019-09-03  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64.md (\"unspec\"): Add UNSPEC_FRINT32Z,\n+\tUNSPEC_FRINT32X, UNSPEC_FRINT64Z, UNSPEC_FRINT64X.\n+\t(aarch64_<frintnzs_op><mode>): New define_insn.\n+\t* config/aarch64/aarch64.h (TARGET_FRINT): Define.\n+\t* config/aarch64/aarch64-c.c (aarch64_update_cpp_builtins): Define\n+\t__ARM_FEATURE_FRINT when appropriate.\n+\t* config/aarch64/aarch64-simd-builtins.def: Add builtins for frint32z,\n+\tfrint32x, frint64z, frint64x.\n+\t* config/aarch64/arm_acle.h (__rint32zf, __rint32z, __rint64zf,\n+\t__rint64z, __rint32xf, __rint32x, __rint64xf, __rint64x): Define.\n+\t* config/aarch64/arm_neon.h (vrnd32z_f32, vrnd32zq_f32, vrnd32z_f64,\n+\tvrnd32zq_f64, vrnd32x_f32, vrnd32xq_f32, vrnd32x_f64, vrnd32xq_f64,\n+\tvrnd64z_f32, vrnd64zq_f32, vrnd64z_f64, vrnd64zq_f64, vrnd64x_f32,\n+\tvrnd64xq_f32, vrnd64x_f64, vrnd64xq_f64): Define.\n+\t* config/aarch64/iterators.md (VSFDF): Define.\n+\t(FRINTNZX): Likewise.\n+\t(frintnzs_op): Likewise.\n+\n 2019-09-03  Dennis Zhang  <dennis.zhang@arm.com>\n \n \t* config/aarch64/aarch64-cores.def (AARCH64_CORE): New entries"}, {"sha": "c05efeda820f4428eace6e57020eed1b288032e9", "filename": "gcc/config/aarch64/aarch64-c.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10bd1d964ef12daa9f92ff0b8d1e5f600aa63f7b/gcc%2Fconfig%2Faarch64%2Faarch64-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10bd1d964ef12daa9f92ff0b8d1e5f600aa63f7b/gcc%2Fconfig%2Faarch64%2Faarch64-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-c.c?ref=10bd1d964ef12daa9f92ff0b8d1e5f600aa63f7b", "patch": "@@ -157,6 +157,7 @@ aarch64_update_cpp_builtins (cpp_reader *pfile)\n   aarch64_def_or_undef (TARGET_SM4, \"__ARM_FEATURE_SM4\", pfile);\n   aarch64_def_or_undef (TARGET_F16FML, \"__ARM_FEATURE_FP16_FML\", pfile);\n \n+  aarch64_def_or_undef (TARGET_FRINT, \"__ARM_FEATURE_FRINT\", pfile);\n   aarch64_def_or_undef (TARGET_TME, \"__ARM_FEATURE_TME\", pfile);\n \n   /* Not for ACLE, but required to keep \"float.h\" correct if we switch"}, {"sha": "f4ca35a59704c761fe2ac2b6d401fff7c8aba80d", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10bd1d964ef12daa9f92ff0b8d1e5f600aa63f7b/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10bd1d964ef12daa9f92ff0b8d1e5f600aa63f7b/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=10bd1d964ef12daa9f92ff0b8d1e5f600aa63f7b", "patch": "@@ -676,3 +676,9 @@\n   /* Implemented by aarch64_fml<f16mac1>lq_laneq_highv4sf.  */\n   VAR1 (QUADOP_LANE, fmlalq_laneq_high, 0, v4sf)\n   VAR1 (QUADOP_LANE, fmlslq_laneq_high, 0, v4sf)\n+\n+  /* Implemented by aarch64_<frintnzs_op><mode>.  */\n+  BUILTIN_VSFDF (UNOP, frint32z, 0)\n+  BUILTIN_VSFDF (UNOP, frint32x, 0)\n+  BUILTIN_VSFDF (UNOP, frint64z, 0)\n+  BUILTIN_VSFDF (UNOP, frint64x, 0)"}, {"sha": "e621238f13a8d1179e38e75fda6f56e7183c9ebe", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10bd1d964ef12daa9f92ff0b8d1e5f600aa63f7b/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10bd1d964ef12daa9f92ff0b8d1e5f600aa63f7b/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=10bd1d964ef12daa9f92ff0b8d1e5f600aa63f7b", "patch": "@@ -291,6 +291,9 @@ extern unsigned aarch64_architecture_version;\n /* Armv8.3-a Complex number extension to AdvSIMD extensions.  */\n #define TARGET_COMPLEX (TARGET_SIMD && TARGET_ARMV8_3)\n \n+/* Floating-point rounding instructions from Armv8.5-a.  */\n+#define TARGET_FRINT (AARCH64_ISA_V8_5 && TARGET_FLOAT)\n+\n /* TME instructions are enabled.  */\n #define TARGET_TME (AARCH64_ISA_TME)\n "}, {"sha": "f1f9b2157da891dc9710edbfcb0c3bf3926af46e", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10bd1d964ef12daa9f92ff0b8d1e5f600aa63f7b/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10bd1d964ef12daa9f92ff0b8d1e5f600aa63f7b/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=10bd1d964ef12daa9f92ff0b8d1e5f600aa63f7b", "patch": "@@ -141,6 +141,10 @@\n     UNSPEC_CRC32X\n     UNSPEC_FCVTZS\n     UNSPEC_FCVTZU\n+    UNSPEC_FRINT32Z\n+    UNSPEC_FRINT32X\n+    UNSPEC_FRINT64Z\n+    UNSPEC_FRINT64X\n     UNSPEC_URECPE\n     UNSPEC_FRECPE\n     UNSPEC_FRECPS\n@@ -7306,6 +7310,16 @@\n    (set_attr \"speculation_barrier\" \"true\")]\n )\n \n+(define_insn \"aarch64_<frintnzs_op><mode>\"\n+  [(set (match_operand:VSFDF 0 \"register_operand\" \"=w\")\n+\t(unspec:VSFDF [(match_operand:VSFDF 1 \"register_operand\" \"w\")]\n+\t\t      FRINTNZX))]\n+  \"TARGET_FRINT && TARGET_FLOAT\n+   && !(VECTOR_MODE_P (<MODE>mode) && !TARGET_SIMD)\"\n+  \"<frintnzs_op>\\\\t%<v>0<Vmtype>, %<v>1<Vmtype>\"\n+  [(set_attr \"type\" \"f_rint<stype>\")]\n+)\n+\n ;; Transactional Memory Extension (TME) instructions.\n \n (define_insn \"tstart\""}, {"sha": "01a82be3e86add59390fd83c335abe562b26398d", "filename": "gcc/config/aarch64/arm_acle.h", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10bd1d964ef12daa9f92ff0b8d1e5f600aa63f7b/gcc%2Fconfig%2Faarch64%2Farm_acle.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10bd1d964ef12daa9f92ff0b8d1e5f600aa63f7b/gcc%2Fconfig%2Faarch64%2Farm_acle.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_acle.h?ref=10bd1d964ef12daa9f92ff0b8d1e5f600aa63f7b", "patch": "@@ -33,6 +33,59 @@\n extern \"C\" {\n #endif\n \n+#pragma GCC push_options\n+#pragma GCC target (\"arch=armv8.5-a\")\n+__extension__ static __inline float __attribute__ ((__always_inline__))\n+__rint32zf (float __a)\n+{\n+  return __builtin_aarch64_frint32zsf (__a);\n+}\n+\n+__extension__ static __inline double __attribute__ ((__always_inline__))\n+__rint32z (double __a)\n+{\n+  return __builtin_aarch64_frint32zdf (__a);\n+}\n+\n+__extension__ static __inline float __attribute__ ((__always_inline__))\n+__rint64zf (float __a)\n+{\n+  return __builtin_aarch64_frint64zsf (__a);\n+}\n+\n+__extension__ static __inline double __attribute__ ((__always_inline__))\n+__rint64z (double __a)\n+{\n+  return __builtin_aarch64_frint64zdf (__a);\n+}\n+\n+__extension__ static __inline float __attribute__ ((__always_inline__))\n+__rint32xf (float __a)\n+{\n+  return __builtin_aarch64_frint32xsf (__a);\n+}\n+\n+__extension__ static __inline double __attribute__ ((__always_inline__))\n+__rint32x (double __a)\n+{\n+  return __builtin_aarch64_frint32xdf (__a);\n+}\n+\n+__extension__ static __inline float __attribute__ ((__always_inline__))\n+__rint64xf (float __a)\n+{\n+  return __builtin_aarch64_frint64xsf (__a);\n+}\n+\n+__extension__ static __inline double __attribute__ ((__always_inline__))\n+__rint64x (double __a)\n+{\n+  return __builtin_aarch64_frint64xdf (__a);\n+}\n+\n+\n+#pragma GCC pop_options\n+\n #pragma GCC push_options\n \n #pragma GCC target (\"+nothing+crc\")"}, {"sha": "e1b2268cb5aa11f4f21d0b02e9f77beee6e6739b", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10bd1d964ef12daa9f92ff0b8d1e5f600aa63f7b/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10bd1d964ef12daa9f92ff0b8d1e5f600aa63f7b/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=10bd1d964ef12daa9f92ff0b8d1e5f600aa63f7b", "patch": "@@ -34469,6 +34469,124 @@ vfmlslq_laneq_high_f16 (float32x4_t __r, float16x8_t __a, float16x8_t __b,\n \n #pragma GCC pop_options\n \n+#pragma GCC push_options\n+#pragma GCC target (\"arch=armv8.5-a\")\n+\n+__extension__ extern __inline float32x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vrnd32z_f32 (float32x2_t __a)\n+{\n+  return __builtin_aarch64_frint32zv2sf (__a);\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vrnd32zq_f32 (float32x4_t __a)\n+{\n+  return __builtin_aarch64_frint32zv4sf (__a);\n+}\n+\n+__extension__ extern __inline float64x1_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vrnd32z_f64 (float64x1_t __a)\n+{\n+  return (float64x1_t)\n+\t   {__builtin_aarch64_frint32zdf (vget_lane_f64 (__a, 0))};\n+}\n+\n+__extension__ extern __inline float64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vrnd32zq_f64 (float64x2_t __a)\n+{\n+  return __builtin_aarch64_frint32zv2df (__a);\n+}\n+\n+__extension__ extern __inline float32x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vrnd32x_f32 (float32x2_t __a)\n+{\n+  return __builtin_aarch64_frint32xv2sf (__a);\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vrnd32xq_f32 (float32x4_t __a)\n+{\n+  return __builtin_aarch64_frint32xv4sf (__a);\n+}\n+\n+__extension__ extern __inline float64x1_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vrnd32x_f64 (float64x1_t __a)\n+{\n+  return (float64x1_t) {__builtin_aarch64_frint32xdf (vget_lane_f64 (__a, 0))};\n+}\n+\n+__extension__ extern __inline float64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vrnd32xq_f64 (float64x2_t __a)\n+{\n+  return __builtin_aarch64_frint32xv2df (__a);\n+}\n+\n+__extension__ extern __inline float32x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vrnd64z_f32 (float32x2_t __a)\n+{\n+  return __builtin_aarch64_frint64zv2sf (__a);\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vrnd64zq_f32 (float32x4_t __a)\n+{\n+  return __builtin_aarch64_frint64zv4sf (__a);\n+}\n+\n+__extension__ extern __inline float64x1_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vrnd64z_f64 (float64x1_t __a)\n+{\n+  return (float64x1_t) {__builtin_aarch64_frint64zdf (vget_lane_f64 (__a, 0))};\n+}\n+\n+__extension__ extern __inline float64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vrnd64zq_f64 (float64x2_t __a)\n+{\n+  return __builtin_aarch64_frint64zv2df (__a);\n+}\n+\n+__extension__ extern __inline float32x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vrnd64x_f32 (float32x2_t __a)\n+{\n+  return __builtin_aarch64_frint64xv2sf (__a);\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vrnd64xq_f32 (float32x4_t __a)\n+{\n+  return __builtin_aarch64_frint64xv4sf (__a);\n+}\n+\n+__extension__ extern __inline float64x1_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vrnd64x_f64 (float64x1_t __a)\n+{\n+  return (float64x1_t) {__builtin_aarch64_frint64xdf (vget_lane_f64 (__a, 0))};\n+}\n+\n+__extension__ extern __inline float64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vrnd64xq_f64 (float64x2_t __a)\n+{\n+  return __builtin_aarch64_frint64xv2df (__a);\n+}\n+\n+#pragma GCC pop_options\n+\n #undef __aarch64_vget_lane_any\n \n #undef __aarch64_vdup_lane_any"}, {"sha": "49d227f674694725ff18223eb2ff045181b5da61", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10bd1d964ef12daa9f92ff0b8d1e5f600aa63f7b/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10bd1d964ef12daa9f92ff0b8d1e5f600aa63f7b/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=10bd1d964ef12daa9f92ff0b8d1e5f600aa63f7b", "patch": "@@ -128,6 +128,9 @@\n \t\t\t\t  (HF \"TARGET_SIMD_F16INST\")\n \t\t\t\t  SF DF])\n \n+;; Scalar and vetor modes for SF, DF.\n+(define_mode_iterator VSFDF [V2SF V4SF V2DF DF SF])\n+\n ;; Advanced SIMD single Float modes.\n (define_mode_iterator VDQSF [V2SF V4SF])\n \n@@ -1758,6 +1761,9 @@\n \t\t\t    UNSPEC_FCMLA180\n \t\t\t    UNSPEC_FCMLA270])\n \n+(define_int_iterator FRINTNZX [UNSPEC_FRINT32Z UNSPEC_FRINT32X\n+\t\t\t       UNSPEC_FRINT64Z UNSPEC_FRINT64X])\n+\n ;; Iterators for atomic operations.\n \n (define_int_iterator ATOMIC_LDOP\n@@ -2041,6 +2047,9 @@\n (define_int_attr f16mac1 [(UNSPEC_FMLAL \"a\") (UNSPEC_FMLSL \"s\")\n \t\t\t  (UNSPEC_FMLAL2 \"a\") (UNSPEC_FMLSL2 \"s\")])\n \n+(define_int_attr frintnzs_op [(UNSPEC_FRINT32Z \"frint32z\") (UNSPEC_FRINT32X \"frint32x\")\n+\t\t\t      (UNSPEC_FRINT64Z \"frint64z\") (UNSPEC_FRINT64X \"frint64x\")])\n+\n ;; The condition associated with an UNSPEC_COND_<xx>.\n (define_int_attr cmp_op [(UNSPEC_COND_FCMEQ \"eq\")\n \t\t\t (UNSPEC_COND_FCMGE \"ge\")"}, {"sha": "0189c42cdd885617a15ed588597ed5619945565f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10bd1d964ef12daa9f92ff0b8d1e5f600aa63f7b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10bd1d964ef12daa9f92ff0b8d1e5f600aa63f7b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=10bd1d964ef12daa9f92ff0b8d1e5f600aa63f7b", "patch": "@@ -1,3 +1,8 @@\n+2019-09-03  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* gcc.target/aarch64/acle/rintnzx_1.c: New test.\n+\t* gcc.target/aarch64/simd/vrndnzx_1.c: Likewise.\n+\n 2019-09-03  Jakub Jelinek  <jakub@redhat.com>\n \t    Richard Biener  <rguenther@suse.de>\n "}, {"sha": "12572084856d8d77c9df4971605d237e1831c8e7", "filename": "gcc/testsuite/gcc.target/aarch64/acle/rintnzx_1.c", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10bd1d964ef12daa9f92ff0b8d1e5f600aa63f7b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Facle%2Frintnzx_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10bd1d964ef12daa9f92ff0b8d1e5f600aa63f7b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Facle%2Frintnzx_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Facle%2Frintnzx_1.c?ref=10bd1d964ef12daa9f92ff0b8d1e5f600aa63f7b", "patch": "@@ -0,0 +1,73 @@\n+/* Test the __rint[32,64][z,x] intrinsics.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=armv8.5-a\" } */\n+\n+#include <arm_acle.h>\n+\n+#ifdef __ARM_FEATURE_FRINT\n+float\n+foo_32z_f32_scal (float a)\n+{\n+  return __rint32zf (a);\n+}\n+\n+/* { dg-final { scan-assembler-times \"frint32z\\ts\\[0-9\\]+, s\\[0-9\\]+\\n\" 1 } } */\n+\n+double\n+foo_32z_f64_scal (double a)\n+{\n+  return __rint32z (a);\n+}\n+\n+/* { dg-final { scan-assembler-times \"frint32z\\td\\[0-9\\]+, d\\[0-9\\]+\\n\" 1 } } */\n+\n+float\n+foo_32x_f32_scal (float a)\n+{\n+  return __rint32xf (a);\n+}\n+\n+/* { dg-final { scan-assembler-times \"frint32x\\ts\\[0-9\\]+, s\\[0-9\\]+\\n\" 1 } } */\n+\n+double\n+foo_32x_f64_scal (double a)\n+{\n+  return __rint32x (a);\n+}\n+\n+/* { dg-final { scan-assembler-times \"frint32x\\td\\[0-9\\]+, d\\[0-9\\]+\\n\" 1 } } */\n+\n+float\n+foo_64z_f32_scal (float a)\n+{\n+  return __rint64zf (a);\n+}\n+\n+/* { dg-final { scan-assembler-times \"frint64z\\ts\\[0-9\\]+, s\\[0-9\\]+\\n\" 1 } } */\n+\n+double\n+foo_64z_f64_scal (double a)\n+{\n+  return __rint64z (a);\n+}\n+\n+/* { dg-final { scan-assembler-times \"frint64z\\td\\[0-9\\]+, d\\[0-9\\]+\\n\" 1 } } */\n+\n+float\n+foo_64x_f32_scal (float a)\n+{\n+  return __rint64xf (a);\n+}\n+\n+/* { dg-final { scan-assembler-times \"frint64x\\ts\\[0-9\\]+, s\\[0-9\\]+\\n\" 1 } } */\n+\n+double\n+foo_64x_f64_scal (double a)\n+{\n+  return __rint64x (a);\n+}\n+\n+/* { dg-final { scan-assembler-times \"frint64x\\td\\[0-9\\]+, d\\[0-9\\]+\\n\" 1 } } */\n+\n+#endif"}, {"sha": "0399b838df92d7f6d78dcd9421461bfab8bcf5b2", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vrndnzx_1.c", "status": "added", "additions": 137, "deletions": 0, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10bd1d964ef12daa9f92ff0b8d1e5f600aa63f7b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrndnzx_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10bd1d964ef12daa9f92ff0b8d1e5f600aa63f7b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrndnzx_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrndnzx_1.c?ref=10bd1d964ef12daa9f92ff0b8d1e5f600aa63f7b", "patch": "@@ -0,0 +1,137 @@\n+/* Test the vrnd[32,64][z,x] intrinsics.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=armv8.5-a\" } */\n+\n+#include \"arm_neon.h\"\n+\n+#ifdef __ARM_FEATURE_FRINT\n+\n+float32x2_t\n+foo_32z (float32x2_t a)\n+{\n+  return vrnd32z_f32 (a);\n+}\n+\n+/* { dg-final { scan-assembler-times \"frint32z\\tv\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.2s\\n\" 1 } } */\n+\n+float32x4_t\n+foo_32z_q (float32x4_t a)\n+{\n+  return vrnd32zq_f32 (a);\n+}\n+\n+/* { dg-final { scan-assembler-times \"frint32z\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4s\\n\" 1 } } */\n+\n+float64x1_t\n+foo_32z_f64 (float64x1_t a)\n+{\n+  return vrnd32z_f64 (a);\n+}\n+\n+/* { dg-final { scan-assembler-times \"frint32z\\td\\[0-9\\]+, d\\[0-9\\]+\\n\" 1 } } */\n+\n+float64x2_t\n+foo_32z_q_f64 (float64x2_t a)\n+{\n+  return vrnd32zq_f64 (a);\n+}\n+\n+/* { dg-final { scan-assembler-times \"frint32z\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d\\n\" 1 } } */\n+\n+float32x2_t\n+foo_32x (float32x2_t a)\n+{\n+  return vrnd32x_f32 (a);\n+}\n+\n+/* { dg-final { scan-assembler-times \"frint32x\\tv\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.2s\\n\" 1 } } */\n+\n+float32x4_t\n+foo_32x_q (float32x4_t a)\n+{\n+  return vrnd32xq_f32 (a);\n+}\n+\n+/* { dg-final { scan-assembler-times \"frint32x\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4s\\n\" 1 } } */\n+\n+float64x1_t\n+foo_32x_f64 (float64x1_t a)\n+{\n+  return vrnd32x_f64 (a);\n+}\n+\n+/* { dg-final { scan-assembler-times \"frint32x\\td\\[0-9\\]+, d\\[0-9\\]+\\n\" 1 } } */\n+\n+float64x2_t\n+foo_32x_q_f64 (float64x2_t a)\n+{\n+  return vrnd32xq_f64 (a);\n+}\n+\n+/* { dg-final { scan-assembler-times \"frint32x\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d\\n\" 1 } } */\n+\n+float32x2_t\n+foo_64z (float32x2_t a)\n+{\n+  return vrnd64z_f32 (a);\n+}\n+\n+/* { dg-final { scan-assembler-times \"frint64z\\tv\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.2s\\n\" 1 } } */\n+\n+float32x4_t\n+foo_64z_q (float32x4_t a)\n+{\n+  return vrnd64zq_f32 (a);\n+}\n+\n+/* { dg-final { scan-assembler-times \"frint64z\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4s\\n\" 1 } } */\n+\n+float64x1_t\n+foo_64z_f64 (float64x1_t a)\n+{\n+  return vrnd64z_f64 (a);\n+}\n+\n+/* { dg-final { scan-assembler-times \"frint64z\\td\\[0-9\\]+, d\\[0-9\\]+\\n\" 1 } } */\n+\n+float64x2_t\n+foo_64z_q_f64 (float64x2_t a)\n+{\n+  return vrnd64zq_f64 (a);\n+}\n+\n+/* { dg-final { scan-assembler-times \"frint64z\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d\\n\" 1 } } */\n+\n+float32x2_t\n+foo_64x (float32x2_t a)\n+{\n+  return vrnd64x_f32 (a);\n+}\n+\n+/* { dg-final { scan-assembler-times \"frint64x\\tv\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.2s\\n\" 1 } } */\n+\n+float32x4_t\n+foo_64x_q (float32x4_t a)\n+{\n+  return vrnd64xq_f32 (a);\n+}\n+\n+/* { dg-final { scan-assembler-times \"frint64x\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4s\\n\" 1 } } */\n+\n+float64x1_t\n+foo_64x_f64 (float64x1_t a)\n+{\n+  return vrnd64x_f64 (a);\n+}\n+\n+/* { dg-final { scan-assembler-times \"frint64x\\td\\[0-9\\]+, d\\[0-9\\]+\\n\" 1 } } */\n+\n+float64x2_t\n+foo_64x_q_f64 (float64x2_t a)\n+{\n+  return vrnd64xq_f64 (a);\n+}\n+\n+/* { dg-final { scan-assembler-times \"frint64x\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d\\n\" 1 } } */\n+#endif"}]}