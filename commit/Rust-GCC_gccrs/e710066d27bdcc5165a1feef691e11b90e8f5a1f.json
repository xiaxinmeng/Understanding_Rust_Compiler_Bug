{"sha": "e710066d27bdcc5165a1feef691e11b90e8f5a1f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTcxMDA2NmQyN2JkY2M1MTY1YTFmZWVmNjkxZTExYjkwZThmNWExZg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2003-07-25T10:20:09Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2003-07-25T10:20:09Z"}, "message": "Revert patch for 11617 which accidently crept in\n\nFrom-SVN: r69779", "tree": {"sha": "4d4166c519457a60f7accacb4309ef617a7d63fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d4166c519457a60f7accacb4309ef617a7d63fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e710066d27bdcc5165a1feef691e11b90e8f5a1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e710066d27bdcc5165a1feef691e11b90e8f5a1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e710066d27bdcc5165a1feef691e11b90e8f5a1f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e710066d27bdcc5165a1feef691e11b90e8f5a1f/comments", "author": null, "committer": null, "parents": [{"sha": "a91db711890ba12e2385bf10480a5f6c270c2e2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a91db711890ba12e2385bf10480a5f6c270c2e2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a91db711890ba12e2385bf10480a5f6c270c2e2f"}], "stats": {"total": 27, "additions": 13, "deletions": 14}, "files": [{"sha": "f91dca03c47e665a7bd63d967c5d39b5e1992bdd", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e710066d27bdcc5165a1feef691e11b90e8f5a1f/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e710066d27bdcc5165a1feef691e11b90e8f5a1f/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=e710066d27bdcc5165a1feef691e11b90e8f5a1f", "patch": "@@ -7150,7 +7150,8 @@ tsubst_qualified_id (tree qualified_id, tree args,\n     }\n \n   if (!BASELINK_P (name) && !DECL_P (expr))\n-    expr = lookup_qualified_name (scope, expr, /*is_type_p=*/0, false);\n+    expr = lookup_qualified_name (scope, expr, /*is_type_p=*/0,\n+\t\t\t\t  (complain & tf_error) != 0);\n   if (DECL_P (expr))\n     check_accessibility_of_qualified_id (expr, \n \t\t\t\t\t /*object_type=*/NULL_TREE,\n@@ -7167,9 +7168,7 @@ tsubst_qualified_id (tree qualified_id, tree args,\n   if (is_template)\n     expr = lookup_template_function (expr, template_args);\n \n-  if (expr == error_mark_node && complain & tf_error)\n-    nested_name_lookup_error (scope, TREE_OPERAND (qualified_id, 1));\n-  else if (TYPE_P (scope))\n+  if (TYPE_P (scope))\n     {\n       expr = (adjust_result_of_qualified_name_lookup \n \t      (expr, scope, current_class_type));\n@@ -7590,15 +7589,12 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t  {\n \t    tree scope = DECL_INITIAL (decl);\n \t    tree name = DECL_NAME (decl);\n-\t    tree decl;\n \t    \n \t    scope = tsubst_expr (scope, args, complain, in_decl);\n-\t    decl = lookup_qualified_name (scope, name,\n-\t\t\t\t\t  /*is_type_p=*/0, /*complain=*/false);\n-\t    if (decl == error_mark_node)\n-\t      nested_name_lookup_error (scope, name);\n-\t    else\n-\t      do_local_using_decl (decl);\n+\t    do_local_using_decl (lookup_qualified_name (scope,\n+\t\t\t\t\t\t\tname, \n+\t\t\t\t\t\t\t/*is_type_p=*/0,\n+\t\t\t\t\t\t\t/*complain=*/true));\n \t  }\n \telse\n \t  {\n@@ -8256,15 +8252,18 @@ tsubst_copy_and_build (tree t,\n \t       scope is.  */\n \t    tmpl = TREE_OPERAND (TREE_OPERAND (member, 1), 0);\n \t    args = TREE_OPERAND (TREE_OPERAND (member, 1), 1);\n-\t    member = lookup_qualified_name (TREE_OPERAND (member, 0), tmpl, \n-\t\t\t\t\t    /*is_type=*/0, /*complain=*/false);\n+\t    member = lookup_qualified_name (TREE_OPERAND (member, 0),\n+\t\t\t\t\t    tmpl, \n+\t\t\t\t\t    /*is_type=*/0,\n+\t\t\t\t\t    /*complain=*/true);\n \t    if (BASELINK_P (member))\n \t      BASELINK_FUNCTIONS (member) \n \t\t= build_nt (TEMPLATE_ID_EXPR, BASELINK_FUNCTIONS (member),\n \t\t\t    args);\n \t    else\n \t      {\n-\t\tnested_name_lookup_error (TREE_TYPE (object), tmpl);\n+\t\terror (\"`%D' is not a member of `%T'\",\n+\t\t       tmpl, TREE_TYPE (object));\n \t\treturn error_mark_node;\n \t      }\n \t  }"}]}