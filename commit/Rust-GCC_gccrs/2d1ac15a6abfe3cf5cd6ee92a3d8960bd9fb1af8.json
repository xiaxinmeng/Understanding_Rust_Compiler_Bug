{"sha": "2d1ac15a6abfe3cf5cd6ee92a3d8960bd9fb1af8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQxYWMxNWE2YWJmZTNjZjVjZDZlZTkyYTNkODk2MGJkOWZiMWFmOA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-05-04T20:44:40Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-05-04T20:44:40Z"}, "message": "re PR c++/70906 (ice in add_expr, at tree.c:7925)\n\n\tPR c++/70906\n\tPR c++/70933\n\t* tree-core.h (enum operand_equal_flag): Add OEP_HASH_CHECK.\n\t* tree.c (inchash::add_expr): If !IS_EXPR_CODE_CLASS (tclass),\n\tassert flags & OEP_HASH_CHECK, instead of asserting it\n\tnever happens.  Handle TARGET_EXPR.\n\t* fold-const.c (operand_equal_p): For hash verification,\n\tor in OEP_HASH_CHECK into flags.\n\n\t* g++.dg/opt/pr70906.C: New test.\n\t* g++.dg/opt/pr70933.C: New test.\n\nFrom-SVN: r235902", "tree": {"sha": "c73a1cb4d2e0eead0a6bf4402be2850902e37cab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c73a1cb4d2e0eead0a6bf4402be2850902e37cab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d1ac15a6abfe3cf5cd6ee92a3d8960bd9fb1af8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d1ac15a6abfe3cf5cd6ee92a3d8960bd9fb1af8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d1ac15a6abfe3cf5cd6ee92a3d8960bd9fb1af8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d1ac15a6abfe3cf5cd6ee92a3d8960bd9fb1af8/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e4ea422a005d67594f66a8986d930f623c46b200", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4ea422a005d67594f66a8986d930f623c46b200", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4ea422a005d67594f66a8986d930f623c46b200"}], "stats": {"total": 134, "additions": 130, "deletions": 4}, "files": [{"sha": "d1745531864390ecaecc86201309299675f71242", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d1ac15a6abfe3cf5cd6ee92a3d8960bd9fb1af8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d1ac15a6abfe3cf5cd6ee92a3d8960bd9fb1af8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2d1ac15a6abfe3cf5cd6ee92a3d8960bd9fb1af8", "patch": "@@ -1,3 +1,14 @@\n+2016-05-04  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/70906\n+\tPR c++/70933\n+\t* tree-core.h (enum operand_equal_flag): Add OEP_HASH_CHECK.\n+\t* tree.c (inchash::add_expr): If !IS_EXPR_CODE_CLASS (tclass),\n+\tassert flags & OEP_HASH_CHECK, instead of asserting it\n+\tnever happens.  Handle TARGET_EXPR.\n+\t* fold-const.c (operand_equal_p): For hash verification,\n+\tor in OEP_HASH_CHECK into flags.\n+\n 2016-05-04  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* tree-ssa-coalesce.c (gimple_can_coalesce_p): Fix reference in head"}, {"sha": "9ef43bf22590a0ce3b225dcaf304a4e68ece7eaf", "filename": "gcc/fold-const.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d1ac15a6abfe3cf5cd6ee92a3d8960bd9fb1af8/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d1ac15a6abfe3cf5cd6ee92a3d8960bd9fb1af8/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=2d1ac15a6abfe3cf5cd6ee92a3d8960bd9fb1af8", "patch": "@@ -2758,8 +2758,8 @@ operand_equal_p (const_tree arg0, const_tree arg1, unsigned int flags)\n \t  if (arg0 != arg1)\n \t    {\n \t      inchash::hash hstate0 (0), hstate1 (0);\n-\t      inchash::add_expr (arg0, hstate0, flags);\n-\t      inchash::add_expr (arg1, hstate1, flags);\n+\t      inchash::add_expr (arg0, hstate0, flags | OEP_HASH_CHECK);\n+\t      inchash::add_expr (arg1, hstate1, flags | OEP_HASH_CHECK);\n \t      hashval_t h0 = hstate0.end ();\n \t      hashval_t h1 = hstate1.end ();\n \t      gcc_assert (h0 == h1);"}, {"sha": "ea73617155fcb2606782ac535e76f8f801e10358", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d1ac15a6abfe3cf5cd6ee92a3d8960bd9fb1af8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d1ac15a6abfe3cf5cd6ee92a3d8960bd9fb1af8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2d1ac15a6abfe3cf5cd6ee92a3d8960bd9fb1af8", "patch": "@@ -1,5 +1,10 @@\n 2016-05-04  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR c++/70906\n+\tPR c++/70933\n+\t* g++.dg/opt/pr70906.C: New test.\n+\t* g++.dg/opt/pr70933.C: New test.\n+\n \t* gcc.target/i386/avx512vl-vmovq-1.c: New test.\n \n 2016-05-04  Jan Hubicka  <hubicka@ucw.cz>"}, {"sha": "19c91cd6aec3750ed55dac9e5ac66ae4608d6f05", "filename": "gcc/testsuite/g++.dg/opt/pr70906.C", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d1ac15a6abfe3cf5cd6ee92a3d8960bd9fb1af8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr70906.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d1ac15a6abfe3cf5cd6ee92a3d8960bd9fb1af8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr70906.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr70906.C?ref=2d1ac15a6abfe3cf5cd6ee92a3d8960bd9fb1af8", "patch": "@@ -0,0 +1,69 @@\n+// PR c++/70906\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-Wall\" }\n+\n+template <typename> struct B;\n+template <typename U> struct F { typedef U *t; };\n+template <class> struct D {};\n+template <class VP> struct L {\n+  typedef VP np;\n+  typedef typename F<D<VP>>::t cnp;\n+};\n+struct P { typedef L<void *> nt; };\n+template <class N> struct I { typedef typename N::template A<int> t; };\n+template <class O1> struct Q { typedef typename I<O1>::t t; };\n+template <class T, class Hook, Hook T::*> struct G;\n+template <typename P, typename M, M P::*PM>\n+struct mh {\n+  template <class> struct A { typedef G<P, M, PM> pvt; };\n+};\n+template <typename T> struct B<T *> { static T pt(T); };\n+struct R : public D<void *> { typedef P ht; };\n+class lmh : public R {};\n+template <class T, class Hook, Hook T::*P> struct G {\n+  typedef Hook Ht;\n+  typedef typename Ht::ht::nt nt;\n+  typedef T vt;\n+  typedef typename nt::np np;\n+  typedef typename nt::cnp cnp;\n+  static np tnp(T &);\n+  static cnp tnp(const T &p1) {\n+    B<cnp>::pt(static_cast<const Ht &>(p1.*P));\n+    return cnp ();\n+  }\n+};\n+template <class T, class S> struct K {\n+  template <S> struct J;\n+  template <class U> static int foo(J<U::tnp> *, int);\n+  static const int c = sizeof(foo<T>(0, 0));\n+};\n+template <class V> struct W1 {\n+  typedef typename V::vt vt;\n+  static const bool value = K<V, typename V::np (*)(vt &)>::c == K<V, typename V::cnp (*)(const vt &)>::c;\n+};\n+template <class V> struct O {\n+  static const bool svt = W1<V>::value;\n+};\n+template <bool> struct M {};\n+template <class V> class C {\n+  static const bool svt = O<V>::svt;\n+  M<svt> m;\n+};\n+template <class V> struct H {\n+  C<V> bar();\n+};\n+template <class O1> struct ml {\n+  typedef typename Q<O1>::t po;\n+  typedef H<typename po::pvt> t;\n+};\n+template <class O1> class list : public ml<O1>::t {};\n+struct N {\n+  struct IV { lmh hk; };\n+  typedef list<mh<IV, lmh, &IV::hk>> ISL;\n+  friend void fn1(int &, N const &);\n+};\n+void fn1(int &, N const &) {\n+  N::ISL xl;\n+  for (xl.bar();;)\n+    ;\n+}"}, {"sha": "f664d45777cac350880bdd18baa543561d1920a1", "filename": "gcc/testsuite/g++.dg/opt/pr70933.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d1ac15a6abfe3cf5cd6ee92a3d8960bd9fb1af8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr70933.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d1ac15a6abfe3cf5cd6ee92a3d8960bd9fb1af8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr70933.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr70933.C?ref=2d1ac15a6abfe3cf5cd6ee92a3d8960bd9fb1af8", "patch": "@@ -0,0 +1,29 @@\n+// PR c++/70933\n+// { dg-do compile }\n+// { dg-options \"-Wsequence-point\" }\n+\n+struct A\n+{\n+  A (const char *);\n+};\n+\n+template <class T>\n+struct B\n+{\n+  typedef T U;\n+  U &baz (const A &);\n+};\n+\n+template <class T>\n+void\n+bar ()\n+{\n+  B<T> b;\n+  T &p = b.baz (\"p1\") = T(4);\n+}\n+\n+void\n+foo ()\n+{\n+  bar<unsigned> ();\n+}"}, {"sha": "ea832fa5344ebad466bfab02054fb090212b8f7b", "filename": "gcc/tree-core.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d1ac15a6abfe3cf5cd6ee92a3d8960bd9fb1af8/gcc%2Ftree-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d1ac15a6abfe3cf5cd6ee92a3d8960bd9fb1af8/gcc%2Ftree-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-core.h?ref=2d1ac15a6abfe3cf5cd6ee92a3d8960bd9fb1af8", "patch": "@@ -767,7 +767,9 @@ enum operand_equal_flag {\n   OEP_MATCH_SIDE_EFFECTS = 4,\n   OEP_ADDRESS_OF = 8,\n   /* Internal within operand_equal_p:  */\n-  OEP_NO_HASH_CHECK = 16\n+  OEP_NO_HASH_CHECK = 16,\n+  /* Internal within inchash::add_expr:  */\n+  OEP_HASH_CHECK = 32\n };\n \n /* Enum and arrays used for tree allocation stats."}, {"sha": "c5653372f18d212ee48c691e1344c3c3a2a27a11", "filename": "gcc/tree.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d1ac15a6abfe3cf5cd6ee92a3d8960bd9fb1af8/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d1ac15a6abfe3cf5cd6ee92a3d8960bd9fb1af8/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=2d1ac15a6abfe3cf5cd6ee92a3d8960bd9fb1af8", "patch": "@@ -7915,9 +7915,12 @@ add_expr (const_tree t, inchash::hash &hstate, unsigned int flags)\n \t       && integer_zerop (TREE_OPERAND (t, 1)))\n \tinchash::add_expr (TREE_OPERAND (TREE_OPERAND (t, 0), 0),\n \t\t\t   hstate, flags);\n+      /* Don't ICE on FE specific trees, or their arguments etc.\n+\t during operand_equal_p hash verification.  */\n+      else if (!IS_EXPR_CODE_CLASS (tclass))\n+\tgcc_assert (flags & OEP_HASH_CHECK);\n       else\n \t{\n-\t  gcc_assert (IS_EXPR_CODE_CLASS (tclass));\n \t  unsigned int sflags = flags;\n \n \t  hstate.add_object (code);\n@@ -7966,6 +7969,13 @@ add_expr (const_tree t, inchash::hash &hstate, unsigned int flags)\n \t\thstate.add_int (CALL_EXPR_IFN (t));\n \t      break;\n \n+\t    case TARGET_EXPR:\n+\t      /* For TARGET_EXPR, just hash on the TARGET_EXPR_SLOT.\n+\t\t Usually different TARGET_EXPRs just should use\n+\t\t different temporaries in their slots.  */\n+\t      inchash::add_expr (TARGET_EXPR_SLOT (t), hstate, flags);\n+\t      return;\n+\n \t    default:\n \t      break;\n \t    }"}]}