{"sha": "6fba99cf789695c25f3920f876c34c2634515507", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmZiYTk5Y2Y3ODk2OTVjMjVmMzkyMGY4NzZjMzRjMjYzNDUxNTUwNw==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2014-10-16T11:01:28Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2014-10-16T11:01:28Z"}, "message": "IPA ICF pass, part 5/5\n\n        * g++.dg/ipa/ipa-icf-1.C: New test.\n\t* g++.dg/ipa/ipa-icf-2.C: New test.\n\t* g++.dg/ipa/ipa-icf-3.C: New test.\n\t* g++.dg/ipa/ipa-icf-4.C: New test.\n\t* g++.dg/ipa/ipa-icf-5.C: New test.\n\t* gcc.dg/ipa/ipa-icf-1.c: New test.\n\t* gcc.dg/ipa/ipa-icf-10.c: New test.\n\t* gcc.dg/ipa/ipa-icf-11.c: New test.\n\t* gcc.dg/ipa/ipa-icf-12.c: New test.\n\t* gcc.dg/ipa/ipa-icf-13.c: New test.\n\t* gcc.dg/ipa/ipa-icf-14.c: New test.\n\t* gcc.dg/ipa/ipa-icf-15.c: New test.\n\t* gcc.dg/ipa/ipa-icf-16.c: New test.\n\t* gcc.dg/ipa/ipa-icf-17.c: New test.\n\t* gcc.dg/ipa/ipa-icf-18.c: New test.\n\t* gcc.dg/ipa/ipa-icf-19.c: New test.\n\t* gcc.dg/ipa/ipa-icf-2.c: New test.\n\t* gcc.dg/ipa/ipa-icf-20.c: New test.\n\t* gcc.dg/ipa/ipa-icf-21.c: New test.\n\t* gcc.dg/ipa/ipa-icf-22.c: New test.\n\t* gcc.dg/ipa/ipa-icf-23.c: New test.\n\t* gcc.dg/ipa/ipa-icf-24.c: New test.\n\t* gcc.dg/ipa/ipa-icf-25.c: New test.\n\t* gcc.dg/ipa/ipa-icf-26.c: New test.\n\t* gcc.dg/ipa/ipa-icf-27.c: New test.\n\t* gcc.dg/ipa/ipa-icf-28.c: New test.\n\t* gcc.dg/ipa/ipa-icf-29.c: New test.\n\t* gcc.dg/ipa/ipa-icf-3.c: New test.\n\t* gcc.dg/ipa/ipa-icf-30.c: New test.\n\t* gcc.dg/ipa/ipa-icf-4.c: New test.\n\t* gcc.dg/ipa/ipa-icf-5.c: New test.\n\t* gcc.dg/ipa/ipa-icf-6.c: New test.\n\t* gcc.dg/ipa/ipa-icf-7.c: New test.\n\t* gcc.dg/ipa/ipa-icf-8.c: New test.\n\t* gcc.dg/ipa/ipa-icf-9.c: New test.\n\n\nCo-Authored-By: Jan Hubicka <hubicka@ucw.cz>\n\nFrom-SVN: r216308", "tree": {"sha": "4fc9f6523c11cc2d3016b900acbd91480fcac7a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4fc9f6523c11cc2d3016b900acbd91480fcac7a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6fba99cf789695c25f3920f876c34c2634515507", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fba99cf789695c25f3920f876c34c2634515507", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6fba99cf789695c25f3920f876c34c2634515507", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fba99cf789695c25f3920f876c34c2634515507/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3a2317d15bafe848ca54456fdb158377bce235e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a2317d15bafe848ca54456fdb158377bce235e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a2317d15bafe848ca54456fdb158377bce235e4"}], "stats": {"total": 1602, "additions": 1602, "deletions": 0}, "files": [{"sha": "9571e6b03eb458b3050f03098b2ec1b841caab06", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fba99cf789695c25f3920f876c34c2634515507/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fba99cf789695c25f3920f876c34c2634515507/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6fba99cf789695c25f3920f876c34c2634515507", "patch": "@@ -1,3 +1,42 @@\n+2014-10-16  Martin Liska  <mliska@suse.cz>\n+\t    Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* g++.dg/ipa/ipa-icf-1.C: New test.\n+\t* g++.dg/ipa/ipa-icf-2.C: New test.\n+\t* g++.dg/ipa/ipa-icf-3.C: New test.\n+\t* g++.dg/ipa/ipa-icf-4.C: New test.\n+\t* g++.dg/ipa/ipa-icf-5.C: New test.\n+\t* gcc.dg/ipa/ipa-icf-1.c: New test.\n+\t* gcc.dg/ipa/ipa-icf-10.c: New test.\n+\t* gcc.dg/ipa/ipa-icf-11.c: New test.\n+\t* gcc.dg/ipa/ipa-icf-12.c: New test.\n+\t* gcc.dg/ipa/ipa-icf-13.c: New test.\n+\t* gcc.dg/ipa/ipa-icf-14.c: New test.\n+\t* gcc.dg/ipa/ipa-icf-15.c: New test.\n+\t* gcc.dg/ipa/ipa-icf-16.c: New test.\n+\t* gcc.dg/ipa/ipa-icf-17.c: New test.\n+\t* gcc.dg/ipa/ipa-icf-18.c: New test.\n+\t* gcc.dg/ipa/ipa-icf-19.c: New test.\n+\t* gcc.dg/ipa/ipa-icf-2.c: New test.\n+\t* gcc.dg/ipa/ipa-icf-20.c: New test.\n+\t* gcc.dg/ipa/ipa-icf-21.c: New test.\n+\t* gcc.dg/ipa/ipa-icf-22.c: New test.\n+\t* gcc.dg/ipa/ipa-icf-23.c: New test.\n+\t* gcc.dg/ipa/ipa-icf-24.c: New test.\n+\t* gcc.dg/ipa/ipa-icf-25.c: New test.\n+\t* gcc.dg/ipa/ipa-icf-26.c: New test.\n+\t* gcc.dg/ipa/ipa-icf-27.c: New test.\n+\t* gcc.dg/ipa/ipa-icf-28.c: New test.\n+\t* gcc.dg/ipa/ipa-icf-29.c: New test.\n+\t* gcc.dg/ipa/ipa-icf-3.c: New test.\n+\t* gcc.dg/ipa/ipa-icf-30.c: New test.\n+\t* gcc.dg/ipa/ipa-icf-4.c: New test.\n+\t* gcc.dg/ipa/ipa-icf-5.c: New test.\n+\t* gcc.dg/ipa/ipa-icf-6.c: New test.\n+\t* gcc.dg/ipa/ipa-icf-7.c: New test.\n+\t* gcc.dg/ipa/ipa-icf-8.c: New test.\n+\t* gcc.dg/ipa/ipa-icf-9.c: New test.\n+\n 2014-10-16  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \tPR target/53513"}, {"sha": "d27abf47a294ea0c0ac5281e21d3a86039893a76", "filename": "gcc/testsuite/g++.dg/ipa/ipa-icf-1.C", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fba99cf789695c25f3920f876c34c2634515507/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fipa-icf-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fba99cf789695c25f3920f876c34c2634515507/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fipa-icf-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fipa-icf-1.C?ref=6fba99cf789695c25f3920f876c34c2634515507", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-ipa-icf\"  } */\n+\n+class A\n+{\n+public:\n+  __attribute__ ((noinline))\n+  virtual int Foo2()\n+  {\n+    return v;\n+  }\n+\n+  float f;\n+  int v;\n+};\n+\n+class B\n+{\n+public:\n+  __attribute__ ((noinline))\n+  int Bar2()\n+  {\n+    return v;\n+  }\n+\n+  float f, aaa;\n+  int v;\n+};\n+\n+int main()\n+{\n+  A a;\n+  B b;\n+\n+  a.Foo2();\n+  b.Bar2();\n+\n+  return 12345;\n+}\n+\n+/* { dg-final { scan-ipa-dump-not \"Semantic equality hit:\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Equal symbols: 0\" \"icf\"  } } */\n+/* { dg-final { cleanup-ipa-dump \"icf\" } } */"}, {"sha": "48badd740f30f3f7b7ad3da3880f9c29097a0630", "filename": "gcc/testsuite/g++.dg/ipa/ipa-icf-2.C", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fba99cf789695c25f3920f876c34c2634515507/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fipa-icf-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fba99cf789695c25f3920f876c34c2634515507/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fipa-icf-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fipa-icf-2.C?ref=6fba99cf789695c25f3920f876c34c2634515507", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-ipa-icf\"  } */\n+\n+class A\n+{\n+public:\n+  __attribute__ ((noinline))\n+  int Foo2()\n+  {\n+    return 1;\n+  }\n+\n+  int v;\n+  float f;\n+};\n+\n+class B\n+{\n+public:\n+  __attribute__ ((noinline))\n+  int Bar2()\n+  {\n+    return 1;\n+  }\n+\n+  int v;\n+  float f, aaa;\n+};\n+\n+int main()\n+{\n+  A a;\n+  B b;\n+\n+  return a.Foo2() + b.Bar2();\n+}\n+\n+/* { dg-final { scan-ipa-dump \"Semantic equality hit:\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Equal symbols: 1\" \"icf\"  } } */\n+/* { dg-final { cleanup-ipa-dump \"icf\" } } */"}, {"sha": "042f789f66971a6c8e3616871335f12fe39b9edd", "filename": "gcc/testsuite/g++.dg/ipa/ipa-icf-3.C", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fba99cf789695c25f3920f876c34c2634515507/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fipa-icf-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fba99cf789695c25f3920f876c34c2634515507/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fipa-icf-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fipa-icf-3.C?ref=6fba99cf789695c25f3920f876c34c2634515507", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-ipa-icf\"  } */\n+\n+__attribute__ ((noinline))\n+int zero()\n+{\n+  return 0;\n+}\n+\n+__attribute__ ((noinline))\n+int nula()\n+{\n+  return 0;\n+}\n+\n+__attribute__ ((noinline))\n+int foo()\n+{\n+  return zero();\n+}\n+\n+__attribute__ ((noinline))\n+int bar()\n+{\n+  return nula();\n+}\n+\n+int main()\n+{\n+  return foo() + bar();\n+}\n+\n+/* { dg-final { scan-ipa-dump \"Semantic equality hit:.*bar.*->.*foo.*\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Semantic equality hit:.*nula.*->.*zero.*\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Equal symbols: 2\" \"icf\"  } } */\n+/* { dg-final { cleanup-ipa-dump \"icf\" } } */"}, {"sha": "9d1788933410702ebeffefa6756941110f39f365", "filename": "gcc/testsuite/g++.dg/ipa/ipa-icf-4.C", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fba99cf789695c25f3920f876c34c2634515507/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fipa-icf-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fba99cf789695c25f3920f876c34c2634515507/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fipa-icf-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fipa-icf-4.C?ref=6fba99cf789695c25f3920f876c34c2634515507", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-ipa-icf -fno-inline\" } */\n+\n+namespace {\n+struct A\n+{\n+  virtual void foo(void) {}\n+};\n+struct B: virtual A\n+{\n+  virtual void foo(void) {}\n+};\n+struct C: virtual A\n+{\n+  virtual void bar(void) {}\n+};\n+struct D: virtual A\n+{\n+  virtual void sparta(void) {}\n+};\n+struct E: B,C,D\n+{\n+  virtual void foo(void) {}\n+  virtual void barbar(void) {}\n+};\n+} // anonymous namespace\n+\n+int main()\n+{\n+  struct A a;\n+  struct B b;\n+  struct C c;\n+  struct D d;\n+  struct E e;\n+\n+  a.foo();\n+  b.foo();\n+  c.bar();\n+  d.foo();\n+  d.sparta();\n+  e.barbar();\n+\n+  return 123;\n+}\n+\n+/* { dg-final { scan-ipa-dump \"Varpool alias has been created\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Equal symbols: 2\" \"icf\"  } } */\n+/* { dg-final { cleanup-ipa-dump \"icf\" } } */"}, {"sha": "728df20a3900631cae8a0fb9293b1f5faf85ccea", "filename": "gcc/testsuite/g++.dg/ipa/ipa-icf-5.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fba99cf789695c25f3920f876c34c2634515507/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fipa-icf-5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fba99cf789695c25f3920f876c34c2634515507/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fipa-icf-5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fipa-icf-5.C?ref=6fba99cf789695c25f3920f876c34c2634515507", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-ipa-icf\" } */\n+\n+struct test\n+{\n+  int a;\n+  float b;\n+};\n+\n+extern const struct test myarray __attribute__ ((visibility(\"hidden\")));\n+extern const struct test myarray_alias __attribute__ ((visibility(\"hidden\")));\n+\n+const struct test myarray = {1, 1.5f};\n+\n+extern const struct test myarray_alias __attribute__ ((alias (\"myarray\")));\n+\n+int main()\n+{\n+  return myarray.a - myarray_alias.a;\n+}\n+\n+/* { dg-final { scan-ipa-dump \"Varpool alias cannot be created \\\\(alias cycle\\\\).\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Equal symbols: 1\" \"icf\"  } } */\n+/* { dg-final { cleanup-ipa-dump \"icf\" } } */"}, {"sha": "aeee356d6c98da4b2cb59ad8b96290108759ac92", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-icf-1.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fba99cf789695c25f3920f876c34c2634515507/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fba99cf789695c25f3920f876c34c2634515507/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-1.c?ref=6fba99cf789695c25f3920f876c34c2634515507", "patch": "@@ -0,0 +1,61 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-ipa-icf\"  } */\n+\n+#include <stdio.h>\n+\n+struct container\n+{\n+  int x;\n+  int y;\n+};\n+\n+static struct container max;\n+static int array[3][3];\n+static int array2[123];\n+\n+__attribute__ ((noinline))\n+void foo(void)\n+{\n+  printf(\"Foo()\");\n+}\n+\n+__attribute__ ((noinline))\n+int order(int x, int y)\n+{\n+  return x < y ? 2 : 4;\n+}\n+\n+__attribute__ ((noinline))\n+int order2(int y, int x)\n+{\n+  return x < y ? 2 : 4;\n+}\n+\n+__attribute__ ((noinline))\n+void x1(int x)\n+{\n+  int i;\n+  for(i = 0; i < 20; ++i)\n+    array2[i] = i;\n+\n+  array2[2] = 13;\n+}\n+\n+__attribute__ ((noinline))\n+void x2(int a)\n+{\n+  int i;\n+  for(i = 0; i < 20; ++i)\n+    array2[i] = i;\n+\n+  array2[2] = 13;\n+}\n+\n+int main(int argc, char **argv)\n+{\n+  return 0;\n+}\n+\n+/* { dg-final { scan-ipa-dump \"Semantic equality hit:x2->x1\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Equal symbols: 1\" \"icf\"  } } */\n+/* { dg-final { cleanup-ipa-dump \"icf\" } } */"}, {"sha": "b9bca608c8ab8524def8961b46bb5bf23cfecbbe", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-icf-10.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fba99cf789695c25f3920f876c34c2634515507/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fba99cf789695c25f3920f876c34c2634515507/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-10.c?ref=6fba99cf789695c25f3920f876c34c2634515507", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-ipa-icf\"  } */\n+\n+int ferda(int x, int y) __attribute__ ((pure));\n+int funkce(int a, int b) __attribute__ ((pure));\n+\n+__attribute__ ((noinline))\n+int ferda(int x, int y)\n+{\n+  if (x < y)\n+    {\n+      return x;\n+    }\n+  else\n+    return y;\n+}\n+\n+__attribute__ ((noinline))\n+int funkce(int a, int b)\n+{\n+  if(a < b)\n+    return a;\n+  else\n+    return b;\n+}\n+\n+int main(int argc, char **argv)\n+{\n+  return 0;\n+}\n+\n+/* { dg-final { scan-ipa-dump \"Semantic equality hit:funkce->ferda\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Equal symbols: 1\" \"icf\"  } } */\n+/* { dg-final { cleanup-ipa-dump \"icf\" } } */"}, {"sha": "2eb90dac22ba0cf0e06ff635ca7eebcf40870365", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-icf-11.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fba99cf789695c25f3920f876c34c2634515507/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fba99cf789695c25f3920f876c34c2634515507/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-11.c?ref=6fba99cf789695c25f3920f876c34c2634515507", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-ipa-icf\"  } */\n+\n+__attribute__ ((noinline))\n+int fce(int a, int b)\n+{\n+  return a + b;\n+}\n+\n+__attribute__ ((noinline))\n+int f0(int a)\n+{\n+  return fce(a, 5) + fce(a, 7);\n+}\n+\n+__attribute__ ((noinline))\n+int f1(int a)\n+{\n+  return fce(a, 5) + fce(a, 7);\n+}\n+\n+int main(int argc, char **argv)\n+{\n+  return f0(argc) * f1(argc);\n+}\n+\n+/* { dg-final { scan-ipa-dump \"Semantic equality hit:f1->f0\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Equal symbols: 1\" \"icf\"  } } */\n+/* { dg-final { cleanup-ipa-dump \"icf\" } } */"}, {"sha": "d4b7c38d77f84fb4619e00f400a7c4f49b766133", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-icf-12.c", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fba99cf789695c25f3920f876c34c2634515507/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fba99cf789695c25f3920f876c34c2634515507/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-12.c?ref=6fba99cf789695c25f3920f876c34c2634515507", "patch": "@@ -0,0 +1,78 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-ipa-icf\"  } */\n+\n+#include <stdlib.h>\n+#include <stdio.h>\n+\n+int gcd(int x, int y) __attribute__ ((pure));\n+\n+__attribute__ ((noinline))\n+int gcd(int x, int y)\n+{\n+  int swap;\n+\n+  if(x <= 0 || y <= 0)\n+    return 0;\n+\n+  if(x < y)\n+    {\n+      swap = x;\n+      x = y;\n+      y = swap;\n+    }\n+\n+  while(x != y)\n+    {\n+      x = x - y;\n+\n+      if(y > x)\n+\t{\n+\t  swap = x;\n+\t  x = y;\n+\t  y = swap;\n+\t}\n+    }\n+\n+  return x;\n+}\n+\n+int nsd(int x, int y) __attribute__ ((pure));\n+\n+__attribute__ ((noinline))\n+int nsd(int x, int y)\n+{\n+  int swap;\n+\n+  if(x <= 0 || y <= 0)\n+    return 0;\n+\n+  if(x < y)\n+    {\n+      swap = x;\n+      x = y;\n+      y = swap;\n+    }\n+\n+  while(x != y)\n+    {\n+      x = x - y;\n+\n+      if(y > x)\n+\t{\n+\t  swap = x;\n+\t  x = y;\n+\t  y = swap;\n+\t}\n+    }\n+\n+  return x;\n+}\n+\n+int main(int argc, char **argv)\n+{\n+  return 0;\n+}\n+\n+/* { dg-final { scan-ipa-dump \"Semantic equality hit:nsd->gcd\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Equal symbols: 1\" \"icf\"  } } */\n+/* { dg-final { cleanup-ipa-dump \"icf\" } } */"}, {"sha": "e409ee496b18ac93186a051277560ab2495aa1ff", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-icf-13.c", "status": "added", "additions": 194, "deletions": 0, "changes": 194, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fba99cf789695c25f3920f876c34c2634515507/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fba99cf789695c25f3920f876c34c2634515507/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-13.c?ref=6fba99cf789695c25f3920f876c34c2634515507", "patch": "@@ -0,0 +1,194 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-ipa-icf\"  } */\n+\n+#include <stdlib.h>\n+#include <stdio.h>\n+\n+int gcd(int x, int y) __attribute__ ((pure));\n+\n+__attribute__ ((noinline))\n+int gcd(int x, int y)\n+{\n+  int swap;\n+\n+  if(x <= 0 || y <= 0)\n+    return 0;\n+\n+  if(x < y)\n+    {\n+      swap = x;\n+      x = y;\n+      y = swap;\n+    }\n+\n+  while(x != y)\n+    {\n+      x = x - y;\n+\n+      if(y > x)\n+\t{\n+\t  swap = x;\n+\t  x = y;\n+\t  y = swap;\n+\t}\n+    }\n+\n+  return x;\n+}\n+\n+int nsd(int x, int y) __attribute__ ((pure));\n+\n+__attribute__ ((noinline))\n+int nsd(int x, int y)\n+{\n+  int swap;\n+\n+  if(x <= 0 || y <= 0)\n+    return 0;\n+\n+  if(x < y)\n+    {\n+      swap = x;\n+      x = y;\n+      y = swap;\n+    }\n+\n+  while(x != y)\n+    {\n+      x = x - y;\n+\n+      if(y > x)\n+\t{\n+\t  swap = x;\n+\t  x = y;\n+\t  y = swap;\n+\t}\n+    }\n+\n+  return x;\n+}\n+\n+int nsd_different_result(int x, int y) __attribute__ ((pure));\n+\n+__attribute__ ((noinline))\n+int nsd_different_result(int x, int y)\n+{\n+  int pes;\n+\n+  if(x <= 0 || y <= 0)\n+    return 1;\n+\n+  if(x < 10)\n+    y = 12;\n+  else if(x == 44)\n+    y = 124;\n+  else\n+    y = 1111;\n+\n+  if(x < y)\n+    {\n+      pes = x;\n+      x = y;\n+      y = pes;\n+    }\n+\n+  while(x != y)\n+    {\n+      x = x - y;\n+\n+      if(y > x)\n+\t{\n+\t  pes = x;\n+\t  x = y;\n+\t  y = pes;\n+\t}\n+    }\n+\n+  return x;\n+}\n+\n+int nsd_different_result2(int x, int y) __attribute__ ((pure));\n+\n+__attribute__ ((noinline))\n+int nsd_different_result2(int x, int y)\n+{\n+  int pes;\n+\n+  if(x <= 0 || y <= 0)\n+    return 1;\n+\n+  if(x < 10)\n+    y = 12;\n+  else if(x == 44)\n+    y = 124;\n+  else\n+    y = 1111;\n+\n+  if(x < y)\n+    {\n+      pes = x;\n+      x = y;\n+      y = pes;\n+    }\n+\n+  while(x != y)\n+    {\n+      x = x - y;\n+\n+      if(y > x)\n+\t{\n+\t  pes = x;\n+\t  x = y;\n+\t  y = pes;\n+\t}\n+    }\n+\n+  return x;\n+}\n+\n+__attribute__ ((noinline))\n+int s1(int x)\n+{\n+  switch (x)\n+    {\n+    case 10:\n+    case 11:\n+      return 2;\n+    case 12:\n+      return 123;\n+    default:\n+      return x + 2;\n+    }\n+}\n+\n+__attribute__ ((noinline))\n+int s2(int x)\n+{\n+  switch (x)\n+    {\n+    case 10:\n+    case 11:\n+      return 2;\n+    case 12:\n+      return 123;\n+    default:\n+      return x + 2;\n+    }\n+}\n+int main(int argc, char **argv)\n+{\n+  if(argc < 3)\n+    return 1;\n+\n+  int a = atoi(argv[1]);\n+  int b = atoi(argv[2]);\n+\n+  printf(\"Test1: %d, %d, gdc: %d\\n\", a, b, gcd(a, b));\n+  printf(\"Test2: %d, %d, gdc: %d\\n\", a, b, nsd(a, b));\n+}\n+\n+/* { dg-final { scan-ipa-dump \"Semantic equality hit:s2->s1\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Semantic equality hit:nsd_different_result2->nsd_different_result\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Semantic equality hit:nsd->gcd\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Equal symbols: 3\" \"icf\"  } } */\n+/* { dg-final { cleanup-ipa-dump \"icf\" } } */"}, {"sha": "cae02fbd4a6f219299a8e611522c81ee20ddfa42", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-icf-14.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fba99cf789695c25f3920f876c34c2634515507/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fba99cf789695c25f3920f876c34c2634515507/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-14.c?ref=6fba99cf789695c25f3920f876c34c2634515507", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-ipa-icf\"  } */\n+\n+#include <stdio.h>\n+\n+__attribute__ ((noinline))\n+int foo(int a)\n+{\n+  void *l = &&error;\n+\n+  if(a == 4)\n+    goto *l;\n+\n+  return 150;\n+\n+error:\n+  return a;\n+failure:\n+  return a + 2;\n+}\n+\n+__attribute__ ((noinline))\n+int foo_wrong(int a)\n+{\n+  void *l = &&failure;\n+\n+  if(a == 4)\n+    goto *l;\n+\n+  return 150;\n+\n+error:\n+  return a;\n+failure:\n+  return a + 2;\n+}\n+\n+int main(int argc, char **argv)\n+{\n+  printf(\"value: %d\\n\", foo(argc));\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-ipa-dump-not \"Semantic equality hit:\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Equal symbols: 0\" \"icf\"  } } */\n+/* { dg-final { cleanup-ipa-dump \"icf\" } } */"}, {"sha": "04c2320759c7e32a407449221e20adb0b969d9ce", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-icf-15.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fba99cf789695c25f3920f876c34c2634515507/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fba99cf789695c25f3920f876c34c2634515507/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-15.c?ref=6fba99cf789695c25f3920f876c34c2634515507", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-ipa-icf\"  } */\n+\n+#include <stdio.h>\n+\n+__attribute__ ((noinline))\n+int bar(int a)\n+{\n+  void *l = &&error;\n+\n+  if(a == 4)\n+    goto *l;\n+\n+  return 150;\n+\n+error:\n+  return a;\n+failure:\n+  return a + 2;\n+}\n+\n+__attribute__ ((noinline))\n+int foo(int a)\n+{\n+  void *l = &&error;\n+\n+  if(a == 4)\n+    goto *l;\n+\n+  return 150;\n+\n+error:\n+  return a;\n+failure:\n+  return a + 2;\n+}\n+\n+int main(int argc, char **argv)\n+{\n+  printf(\"value: %d\\n\", foo(argc));\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-ipa-dump \"Equal symbols: 0\" \"icf\"  } } */\n+/* { dg-final { cleanup-ipa-dump \"icf\" } } */"}, {"sha": "fb0b116f736d5bb05655d81bcdb29b311fea8135", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-icf-16.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fba99cf789695c25f3920f876c34c2634515507/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fba99cf789695c25f3920f876c34c2634515507/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-16.c?ref=6fba99cf789695c25f3920f876c34c2634515507", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-ipa-icf\"  } */\n+\n+#include <stdio.h>\n+\n+__attribute__ ((noinline))\n+int foo()\n+{\n+  printf (\"Hello world.\\n\");\n+  return 0;\n+}\n+\n+__attribute__ ((noinline))\n+int bar()\n+{\n+  printf (\"Hello world.\\n\");\n+  return 0;\n+}\n+\n+int main()\n+{\n+  return foo() + bar();\n+}\n+\n+/* { dg-final { scan-ipa-dump \"Semantic equality hit:bar->foo\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Equal symbols: 1\" \"icf\"  } } */\n+/* { dg-final { cleanup-ipa-dump \"icf\" } } */"}, {"sha": "7c9172da3fac655407f1d98857c5179b6d142ad3", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-icf-17.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fba99cf789695c25f3920f876c34c2634515507/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fba99cf789695c25f3920f876c34c2634515507/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-17.c?ref=6fba99cf789695c25f3920f876c34c2634515507", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-ipa-icf\"  } */\n+\n+__attribute__ ((noinline))\n+int foo(int x)\n+{\n+  int c = x;\n+\n+  if (x > 10)\n+    c += 2;\n+  else\n+    c -= 3;\n+\n+  return x;\n+}\n+\n+__attribute__ ((noinline))\n+int bar(int y)\n+{\n+  int d = y;\n+\n+  if (y > 10)\n+    d += 2;\n+  else\n+    d -= 3;\n+\n+  return d;\n+}\n+\n+int main()\n+{\n+  return 0;\n+}\n+\n+/* { dg-final { scan-ipa-dump-not \"Semantic equality hit:\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Equal symbols: 0\" \"icf\"  } } */\n+/* { dg-final { cleanup-ipa-dump \"icf\" } } */"}, {"sha": "9dc39791e571878a5f6e3d9ea035b6df61cffa0b", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-icf-18.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fba99cf789695c25f3920f876c34c2634515507/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fba99cf789695c25f3920f876c34c2634515507/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-18.c?ref=6fba99cf789695c25f3920f876c34c2634515507", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-ipa-icf\"  } */\n+\n+__attribute__ ((noinline))\n+int foo(int x)\n+{\n+  int c = x;\n+\n+  if (x > 10)\n+    c += 2;\n+  else\n+    c -= 3;\n+\n+  return c;\n+}\n+\n+__attribute__ ((noinline))\n+int bar(int y)\n+{\n+  int d = y;\n+\n+  if (y > 10)\n+    d += 2;\n+  else\n+    d -= 3;\n+\n+  return d;\n+}\n+\n+int main()\n+{\n+  return 0;\n+}\n+\n+/* { dg-final { scan-ipa-dump \"Semantic equality hit:bar->foo\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Equal symbols: 1\" \"icf\"  } } */\n+/* { dg-final { cleanup-ipa-dump \"icf\" } } */"}, {"sha": "7a29cf3b877cd8e38d3494f78893ca308d9b711e", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-icf-19.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fba99cf789695c25f3920f876c34c2634515507/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-19.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fba99cf789695c25f3920f876c34c2634515507/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-19.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-19.c?ref=6fba99cf789695c25f3920f876c34c2634515507", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-ipa-icf\"  } */\n+\n+__attribute__ ((noinline))\n+int foo(int x)\n+{\n+  int c = x;\n+\n+  if (x > 10)\n+    c += 2;\n+  else\n+    c -= 3;\n+\n+  return c;\n+}\n+\n+__attribute__ ((noinline))\n+int bar(int y)\n+{\n+  int d = y;\n+\n+  if (y > 11)\n+    d += 2;\n+  else\n+    d -= 3;\n+\n+  return d;\n+}\n+\n+int main()\n+{\n+  return 0;\n+}\n+\n+/* { dg-final { scan-ipa-dump-not \"Semantic equality hit:\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Equal symbols: 0\" \"icf\"  } } */\n+/* { dg-final { cleanup-ipa-dump \"icf\" } } */"}, {"sha": "385db0c1b21c7209f33fd8c13153496eb5a90862", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-icf-2.c", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fba99cf789695c25f3920f876c34c2634515507/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fba99cf789695c25f3920f876c34c2634515507/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-2.c?ref=6fba99cf789695c25f3920f876c34c2634515507", "patch": "@@ -0,0 +1,69 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-ipa-icf\"  } */\n+\n+#include <stdio.h>\n+\n+struct container\n+{\n+  int x;\n+  int y;\n+};\n+\n+static struct container max;\n+static int pole[3][3];\n+static int pole2[123];\n+\n+static struct container superpole[10][10];\n+\n+void f1(struct container *c)\n+{\n+  struct container pes;\n+  pes.x = 123;\n+  pes.y = 123;\n+\n+  struct container *pesp = c;\n+  pesp->x = 5;\n+\n+  pole[1][2] = 3;\n+\n+  superpole[4][3].x = 4;\n+  max.x = 3;\n+  void *x = &pole;\n+\n+  int **a = (int**)pole;\n+  a[1][2] = 543;\n+\n+  if(x != 0)\n+    pole[1][2] = 123;\n+}\n+\n+void f2(struct container *c)\n+{\n+  struct container pes;\n+  pes.x = 123;\n+  pes.y = 123;\n+\n+  struct container *pesp = c;\n+  pesp->x = 5;\n+\n+  pole[1][2] = 3;\n+\n+  superpole[4][3].x = 4;\n+  max.x = 3;\n+  void *x = &pole;\n+\n+  int **a = (int**)pole;\n+  a[1][2] = 543;\n+\n+  if(x != 0)\n+    pole[1][2] = 123;\n+}\n+\n+int main(int argc, char **argv)\n+{\n+  return 0;\n+}\n+\n+/* { dg-final { scan-ipa-dump \"Semantic equality hit:f2->f1\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Equal symbols: 1\" \"icf\"  } } */\n+/* { dg-final { cleanup-ipa-dump \"icf\" } } */"}, {"sha": "9912a9a5c69b9abc65e60346c45c65f5578d20cd", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-icf-20.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fba99cf789695c25f3920f876c34c2634515507/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-20.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fba99cf789695c25f3920f876c34c2634515507/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-20.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-20.c?ref=6fba99cf789695c25f3920f876c34c2634515507", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-ipa-icf\"  } */\n+\n+#include <math.h>\n+\n+__attribute__ ((noinline))\n+float foo()\n+{\n+  return sin(12.4f);\n+}\n+\n+__attribute__ ((noinline))\n+float bar()\n+{\n+  return sin(12.4f);\n+}\n+\n+int main()\n+{\n+  foo();\n+  bar();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-ipa-dump \"Semantic equality hit:bar->foo\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Equal symbols: 1\" \"icf\"  } } */\n+/* { dg-final { cleanup-ipa-dump \"icf\" } } */"}, {"sha": "7358e43e384d49c521493973528c21ca19082565", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-icf-21.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fba99cf789695c25f3920f876c34c2634515507/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-21.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fba99cf789695c25f3920f876c34c2634515507/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-21.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-21.c?ref=6fba99cf789695c25f3920f876c34c2634515507", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-ipa-icf\"  } */\n+\n+#include <xmmintrin.h>\n+\n+__attribute__ ((noinline))\n+void foo()\n+{\n+  float x = 1.2345f;\n+  __m128 v =_mm_load1_ps(&x);\n+}\n+\n+__attribute__ ((noinline))\n+void bar()\n+{\n+  float x = 1.2345f;\n+  __m128 v =_mm_load1_ps(&x);\n+}\n+\n+int main()\n+{\n+  return 2;\n+}\n+\n+/* { dg-final { scan-ipa-dump \"Semantic equality hit:bar->foo\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Equal symbols: 1\" \"icf\"  } } */\n+/* { dg-final { cleanup-ipa-dump \"icf\" } } */"}, {"sha": "9561026084951915f01a35477caa22b886d9656a", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-icf-22.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fba99cf789695c25f3920f876c34c2634515507/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fba99cf789695c25f3920f876c34c2634515507/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-22.c?ref=6fba99cf789695c25f3920f876c34c2634515507", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-ipa-icf\"  } */\n+\n+struct A\n+{\n+  int a, b, c;\n+};\n+\n+struct B\n+{\n+  int x, y;\n+};\n+\n+__attribute__ ((noinline))\n+int foo(struct A *a)\n+{\n+  a->c = 1;\n+\n+  return 123;\n+}\n+\n+__attribute__ ((noinline))\n+int bar(struct B *b)\n+{\n+  b->y = 1;\n+\n+  return 123;\n+}\n+\n+int main()\n+{\n+  return foo(0) + bar(0);\n+}\n+\n+/* { dg-final { scan-ipa-dump-not \"Semantic equality hit:\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Equal symbols: 0\" \"icf\"  } } */\n+/* { dg-final { cleanup-ipa-dump \"icf\" } } */"}, {"sha": "7e81ae21ae6af08488eee25f280a017277d99d34", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-icf-23.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fba99cf789695c25f3920f876c34c2634515507/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fba99cf789695c25f3920f876c34c2634515507/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-23.c?ref=6fba99cf789695c25f3920f876c34c2634515507", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-ipa-icf\"  } */\n+\n+struct A\n+{\n+  int a;\n+  int b;\n+};\n+\n+__attribute__ ((noinline))\n+int foo(struct A *a)\n+{\n+  return 123;\n+}\n+\n+__attribute__ ((noinline))\n+int bar(struct A *b)\n+{\n+  return 123;\n+}\n+\n+int main()\n+{\n+  return foo(0) + bar(0);\n+}\n+\n+/* { dg-final { scan-ipa-dump \"Semantic equality hit:bar->foo\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Equal symbols: 1\" \"icf\"  } } */\n+/* { dg-final { cleanup-ipa-dump \"icf\" } } */"}, {"sha": "3cd476ffc5d5f0f5a44a3ffcad0b33e9864f26fd", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-icf-24.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fba99cf789695c25f3920f876c34c2634515507/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-24.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fba99cf789695c25f3920f876c34c2634515507/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-24.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-24.c?ref=6fba99cf789695c25f3920f876c34c2634515507", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-ipa-icf\"  } */\n+\n+struct A\n+{\n+  int a, b, c, d;\n+};\n+\n+struct B\n+{\n+  int x, y, z;\n+};\n+\n+__attribute__ ((noinline))\n+int foo(struct A *a)\n+{\n+  a->c = 1;\n+\n+  return 123;\n+}\n+\n+__attribute__ ((noinline))\n+int bar(struct B *b)\n+{\n+  b->z = 1;\n+\n+  return 123;\n+}\n+\n+int main()\n+{\n+  return foo(0) + bar(0);\n+}\n+\n+/* { dg-final { scan-ipa-dump \"Equal symbols: 0\" \"icf\"  } } */\n+/* { dg-final { cleanup-ipa-dump \"icf\" } } */"}, {"sha": "89f5a80f98f9a148271f88fbd9567711e4afce13", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-icf-25.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fba99cf789695c25f3920f876c34c2634515507/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-25.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fba99cf789695c25f3920f876c34c2634515507/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-25.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-25.c?ref=6fba99cf789695c25f3920f876c34c2634515507", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-ipa-icf\"  } */\n+\n+static int zip();\n+static int zap();\n+static int two();\n+\n+__attribute__ ((noinline))\n+int foo()\n+{\n+  return zip();\n+}\n+\n+__attribute__ ((noinline))\n+int bar()\n+{\n+  return zap();\n+}\n+\n+__attribute__ ((noinline))\n+int baz()\n+{\n+  return two();\n+}\n+\n+__attribute__ ((noinline))\n+int zip()\n+{\n+  return 0;\n+}\n+\n+__attribute__ ((noinline))\n+int zap()\n+{\n+  return 0;\n+}\n+\n+__attribute__ ((noinline))\n+int two()\n+{\n+  return 2;\n+}\n+\n+int main()\n+{\n+  return foo() + bar();\n+}\n+\n+/* { dg-final { scan-ipa-dump \"Semantic equality hit:bar->foo\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Semantic equality hit:zap->zip\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Equal symbols: 2\" \"icf\"  } } */\n+/* { dg-final { cleanup-ipa-dump \"icf\" } } */"}, {"sha": "0c5a5a65e2f6c2acb9f07724f18e1e954640069b", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-icf-26.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fba99cf789695c25f3920f876c34c2634515507/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-26.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fba99cf789695c25f3920f876c34c2634515507/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-26.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-26.c?ref=6fba99cf789695c25f3920f876c34c2634515507", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-ipa-icf\"  } */\n+\n+void destroy (void)\n+{\n+}\n+\n+void remove (void)\n+{\n+}\n+\n+\n+struct callbacks\n+{\n+  void (*success) (void);\n+  void (*error) (void);\n+};\n+\n+struct callbacks my_callbacks;\n+\n+__attribute__ ((noinline))\n+void foo()\n+{\n+  my_callbacks.success = destroy;\n+}\n+\n+__attribute__ ((noinline))\n+void bar()\n+{\n+  my_callbacks.success = remove;\n+}\n+\n+int main()\n+{\n+  foo();\n+  bar();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-ipa-dump \"Semantic equality hit:bar->foo\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Semantic equality hit:remove->destroy\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Equal symbols: 2\" \"icf\"  } } */\n+/* { dg-final { cleanup-ipa-dump \"icf\" } } */"}, {"sha": "fab2e41e9108ad3bc12fb83eefccec2b901df6de", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-icf-27.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fba99cf789695c25f3920f876c34c2634515507/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-27.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fba99cf789695c25f3920f876c34c2634515507/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-27.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-27.c?ref=6fba99cf789695c25f3920f876c34c2634515507", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-ipa-icf -fno-inline\"  } */\n+\n+void destroy (void)\n+{\n+  __asm__ __volatile__ (\"\" : : : \"memory\");\n+}\n+\n+void remove (void)\n+{\n+  __asm__ __volatile__ (\"\" : : : \"memory\");\n+}\n+\n+void remove2 (void)\n+{\n+  __asm__ __volatile__ (\"\" : : : );\n+}\n+\n+int main()\n+{\n+  destroy ();\n+  remove ();\n+  remove2 ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-ipa-dump \"Semantic equality hit:remove->destroy\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Equal symbols: 1\" \"icf\"  } } */\n+/* { dg-final { cleanup-ipa-dump \"icf\" } } */"}, {"sha": "538e0abb9750d4642c2e191812dafb0282363b3c", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-icf-28.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fba99cf789695c25f3920f876c34c2634515507/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-28.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fba99cf789695c25f3920f876c34c2634515507/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-28.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-28.c?ref=6fba99cf789695c25f3920f876c34c2634515507", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-ipa-icf-details -fno-inline\"  } */\n+\n+__attribute__ ((noinline, constructor(200)))\n+int foo()\n+{\n+  return 123;\n+}\n+\n+__attribute__ ((noinline, constructor(400)))\n+int bar()\n+{\n+  return 123;\n+}\n+\n+int main()\n+{\n+  foo() + bar();\n+\n+  return 0;\n+}\n+/* { dg-final { scan-ipa-dump \"Equal symbols: 0\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"attribute values are different\" \"icf\"  } } */\n+/* { dg-final { cleanup-ipa-dump \"icf\" } } */"}, {"sha": "758399535345d75a3c6e327a10a69f9f6111c056", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-icf-29.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fba99cf789695c25f3920f876c34c2634515507/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-29.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fba99cf789695c25f3920f876c34c2634515507/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-29.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-29.c?ref=6fba99cf789695c25f3920f876c34c2634515507", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-ipa-icf -fno-inline\"  } */\n+\n+struct str\n+{\n+  unsigned a:1, b:1;\n+};\n+\n+static struct str test;\n+\n+unsigned foo(struct str *s)\n+{\n+  return s->a;\n+}\n+\n+unsigned bar(struct str *s)\n+{\n+  return s->b;\n+}\n+\n+int main()\n+{\n+  test.a = 0;\n+  test.b = 1;\n+\n+  return foo (&test) != bar (&test);\n+}\n+\n+/* { dg-final { scan-ipa-dump \"Equal symbols: 0\" \"icf\"  } } */\n+/* { dg-final { cleanup-ipa-dump \"icf\" } } */"}, {"sha": "e4e2eb628b97976aa7533ec85437ff127df8f980", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-icf-3.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fba99cf789695c25f3920f876c34c2634515507/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fba99cf789695c25f3920f876c34c2634515507/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-3.c?ref=6fba99cf789695c25f3920f876c34c2634515507", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-ipa-icf\"  } */\n+\n+typedef int v4si __attribute__ ((vector_size (16)));\n+\n+__attribute__ ((noinline))\n+int foo(void)\n+{\n+  v4si a = {1,2,3,4};\n+  v4si b = {3,2,1,4};\n+  v4si c;\n+\n+  return 54;\n+}\n+\n+__attribute__ ((noinline))\n+int bar(void)\n+{\n+  v4si a = {1,2,3,4};\n+  v4si b = {3,2,1,4};\n+  v4si c;\n+\n+  return 54;\n+}\n+\n+int main()\n+{\n+  foo();\n+  bar();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-ipa-dump \"Semantic equality hit:bar->foo\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Equal symbols: 1\" \"icf\"  } } */\n+/* { dg-final { cleanup-ipa-dump \"icf\" } } */"}, {"sha": "75c284f27e077c056cd29086b5724a1f5ea7c969", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-icf-30.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fba99cf789695c25f3920f876c34c2634515507/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-30.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fba99cf789695c25f3920f876c34c2634515507/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-30.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-30.c?ref=6fba99cf789695c25f3920f876c34c2634515507", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-ipa-icf -fno-inline\"  } */\n+\n+struct str\n+{\n+  unsigned a:1, b:1;\n+};\n+\n+static struct str test;\n+\n+unsigned foo(struct str *s)\n+{\n+  return s->a;\n+}\n+\n+unsigned bar(struct str *s)\n+{\n+  return s->a;\n+}\n+\n+int main()\n+{\n+  test.a = 0;\n+  test.b = 1;\n+\n+  return foo (&test) == bar (&test);\n+}\n+\n+/* { dg-final { scan-ipa-dump \"Equal symbols: 1\" \"icf\"  } } */\n+/* { dg-final { cleanup-ipa-dump \"icf\" } } */"}, {"sha": "9434fb05adf4d516cb19066aa53012ce5fe667fe", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-icf-4.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fba99cf789695c25f3920f876c34c2634515507/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fba99cf789695c25f3920f876c34c2634515507/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-4.c?ref=6fba99cf789695c25f3920f876c34c2634515507", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-ipa-icf\"  } */\n+\n+__attribute__ ((noinline))\n+int foo(int a)\n+{\n+  return a * a;\n+}\n+\n+__attribute__ ((noinline))\n+int bar(int b)\n+{\n+  return b;\n+}\n+\n+__attribute__ ((noinline))\n+void caller(int x)\n+{\n+  return;\n+}\n+\n+int main(int argc, char **argv)\n+{\n+  caller(foo(argc));\n+  caller(bar(argc));\n+\n+  return 123;\n+}\n+\n+/* { dg-final { scan-ipa-dump-not \"Semantic equality hit:\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Equal symbols: 0\" \"icf\"  } } */\n+/* { dg-final { cleanup-ipa-dump \"icf\" } } */"}, {"sha": "45fddf589ac23b56c2b141cdb49e5955e55299d9", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-icf-5.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fba99cf789695c25f3920f876c34c2634515507/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fba99cf789695c25f3920f876c34c2634515507/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-5.c?ref=6fba99cf789695c25f3920f876c34c2634515507", "patch": "@@ -0,0 +1,55 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-ipa-icf\"  } */\n+\n+#include <complex.h>\n+\n+static double test;\n+\n+__attribute__ ((noinline))\n+double f1(void)\n+{\n+  double complex z1 = 1.0 + 3.0 * I;\n+  double complex z2 = 1.0 - 4.0 * I;\n+\n+  unsigned a = 123;\n+  unsigned b = 321;\n+\n+  if (a & b)\n+    return 1.2f;\n+\n+  if(cimag(z1) > 1)\n+    return 1.0f;\n+\n+  test = cimag(z1) + 2;\n+\n+  return cimag(z1 + z2);\n+}\n+\n+__attribute__ ((noinline))\n+double f2(void)\n+{\n+  double complex z1 = 1.0 + 3.0 * I;\n+  double complex z2 = 1.0 - 4.0 * I;\n+\n+  unsigned a = 123;\n+  unsigned b = 321;\n+\n+  if (a & b)\n+    return 1.2f;\n+\n+  if(cimag(z1) > 1)\n+    return 1.0f;\n+\n+  test = cimag(z1) + 2;\n+\n+  return cimag(z1 + z2);\n+}\n+\n+int main()\n+{\n+  return 1;\n+}\n+\n+/* { dg-final { scan-ipa-dump \"Semantic equality hit:f2->f1\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Equal symbols: 1\" \"icf\"  } } */\n+/* { dg-final { cleanup-ipa-dump \"icf\" } } */"}, {"sha": "6e6758e9bd3ae8daa7cdfd69191d532a54c21af8", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-icf-6.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fba99cf789695c25f3920f876c34c2634515507/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fba99cf789695c25f3920f876c34c2634515507/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-6.c?ref=6fba99cf789695c25f3920f876c34c2634515507", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O0 -fipa-icf -fdump-ipa-icf\"  } */\n+\n+typedef int v4si __attribute__ ((vector_size (16)));\n+\n+__attribute__ ((noinline))\n+int foo(void)\n+{\n+  v4si a = {1,2,3,4};\n+  v4si b = {3,2,1,4};\n+  v4si c;\n+\n+  return 54;\n+}\n+\n+__attribute__ ((noinline))\n+int bar(void)\n+{\n+  v4si a = {1,2,3,4};\n+  v4si b = {3,2,5,4};\n+  v4si c;\n+\n+  return 54;\n+}\n+\n+int main()\n+{\n+  foo();\n+  bar();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-ipa-dump-not \"Semantic equality hit:\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Equal symbols: 0\" \"icf\"  } } */\n+/* { dg-final { cleanup-ipa-dump \"icf\" } } */"}, {"sha": "ec7961dc17754d3de8817183038f93b03fbf4759", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-icf-7.c", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fba99cf789695c25f3920f876c34c2634515507/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fba99cf789695c25f3920f876c34c2634515507/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-7.c?ref=6fba99cf789695c25f3920f876c34c2634515507", "patch": "@@ -0,0 +1,72 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-ipa-icf\"  } */\n+\n+#include <complex.h>\n+\n+#if (__SIZEOF_INT__ == __SIZEOF_FLOAT__)\n+typedef int intflt;\n+#elif (__SIZEOF_LONG__ == __SIZEOF_FLOAT__)\n+typedef long intflt;\n+#else\n+#error Add target support here for type that will union float size\n+#endif\n+\n+\n+static double test;\n+\n+struct struktura\n+{\n+  union\n+  {\n+    long i;\n+    float f;\n+  } u;\n+};\n+\n+struct struktura sss;\n+\n+struct X\n+{\n+  int i;\n+  union\n+  {\n+    intflt j;\n+    intflt k;\n+    float f;\n+  } u;\n+};\n+\n+__attribute__ ((noinline))\n+intflt foo(intflt j)\n+{\n+  struct X a;\n+\n+  a.u.j = j;\n+  a.u.f = a.u.f;\n+  a.u.f = a.u.f;\n+  a.u.j = a.u.j;\n+  a.u.f = a.u.f;\n+  return a.u.k;\n+}\n+\n+__attribute__ ((noinline))\n+intflt foo2(intflt j)\n+{\n+  struct X a;\n+\n+  a.u.j = j;\n+  a.u.f = a.u.f;\n+  a.u.f = a.u.f;\n+  a.u.j = a.u.j;\n+  a.u.f = a.u.f;\n+  return a.u.k;\n+}\n+\n+int main()\n+{\n+  return 1;\n+}\n+\n+/* { dg-final { scan-ipa-dump \"Semantic equality hit:foo2->foo\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Equal symbols: 1\" \"icf\"  } } */\n+/* { dg-final { cleanup-ipa-dump \"icf\" } } */"}, {"sha": "d35df907005c2800afb03deb44902c21ad855b67", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-icf-8.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fba99cf789695c25f3920f876c34c2634515507/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fba99cf789695c25f3920f876c34c2634515507/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-8.c?ref=6fba99cf789695c25f3920f876c34c2634515507", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-ipa-icf\"  } */\n+\n+#include <stdio.h>\n+\n+__attribute__ ((noinline))\n+int fce1(int a, int b)\n+{\n+  int swap;\n+\n+  if(a < b)\n+    {\n+      swap = a;\n+      a = b;\n+      b = swap;\n+    }\n+\n+  return a / b;\n+}\n+\n+__attribute__ ((noinline))\n+int fce2(int x, int y)\n+{\n+  int tmp;\n+\n+  if(x < y)\n+    {\n+      tmp = x;\n+      x = y;\n+      y = tmp;\n+    }\n+\n+  return x / y;\n+}\n+\n+\n+int main(int argc, char **argv)\n+{\n+  printf(\"fce1: %d\\n\", fce1(argc, argc + 2));\n+  printf(\"fce2: %d\\n\", fce2(argc, 2 * argc));\n+}\n+\n+/* { dg-final { scan-ipa-dump \"Semantic equality hit:fce2->fce1\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Equal symbols: 1\" \"icf\"  } } */\n+/* { dg-final { cleanup-ipa-dump \"icf\" } } */"}, {"sha": "9d04dd1633c938a6def1dd9b7d4f82f8ab6e8a20", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-icf-9.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fba99cf789695c25f3920f876c34c2634515507/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fba99cf789695c25f3920f876c34c2634515507/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-9.c?ref=6fba99cf789695c25f3920f876c34c2634515507", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-ipa-icf\"  } */\n+\n+int funkce(int a, int b) __attribute__ ((pure));\n+\n+__attribute__ ((noinline))\n+int ferda(int x, int y)\n+{\n+  if (x < y)\n+    {\n+      return x;\n+    }\n+  else\n+    return y;\n+}\n+\n+__attribute__ ((noinline))\n+int funkce(int a, int b)\n+{\n+  if(a < b)\n+    return a;\n+  else\n+    return b;\n+}\n+\n+int main(int argc, char **argv)\n+{\n+  return 0;\n+}\n+\n+/* { dg-final { scan-ipa-dump-not \"Semantic equality hit:\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Equal symbols: 0\" \"icf\"  } } */\n+/* { dg-final { cleanup-ipa-dump \"icf\" } } */"}]}