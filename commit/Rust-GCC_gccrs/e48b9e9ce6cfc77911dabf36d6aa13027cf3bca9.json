{"sha": "e48b9e9ce6cfc77911dabf36d6aa13027cf3bca9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQ4YjllOWNlNmNmYzc3OTExZGFiZjM2ZDZhYTEzMDI3Y2YzYmNhOQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-07-06T00:49:17Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-07-06T00:49:17Z"}, "message": "entered into RCS\n\nFrom-SVN: r1458", "tree": {"sha": "b888500c7e40bfd9e56cde7caf32166fb1eaf90b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b888500c7e40bfd9e56cde7caf32166fb1eaf90b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e48b9e9ce6cfc77911dabf36d6aa13027cf3bca9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e48b9e9ce6cfc77911dabf36d6aa13027cf3bca9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e48b9e9ce6cfc77911dabf36d6aa13027cf3bca9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e48b9e9ce6cfc77911dabf36d6aa13027cf3bca9/comments", "author": null, "committer": null, "parents": [{"sha": "3fa9d981f61a8064cb066a7e74b5f70640fc77b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fa9d981f61a8064cb066a7e74b5f70640fc77b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fa9d981f61a8064cb066a7e74b5f70640fc77b7"}], "stats": {"total": 245, "additions": 245, "deletions": 0}, "files": [{"sha": "291d0bb544d0623b9730483edf1c14496b7eb042", "filename": "gcc/config/ns32k/tek6000.h", "status": "added", "additions": 233, "deletions": 0, "changes": 233, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e48b9e9ce6cfc77911dabf36d6aa13027cf3bca9/gcc%2Fconfig%2Fns32k%2Ftek6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e48b9e9ce6cfc77911dabf36d6aa13027cf3bca9/gcc%2Fconfig%2Fns32k%2Ftek6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Ftek6000.h?ref=e48b9e9ce6cfc77911dabf36d6aa13027cf3bca9", "patch": "@@ -0,0 +1,233 @@\n+/* Definitions of target machine for GNU compiler.\n+   Generic Tektronix 6000 series NS32000 version.\n+   See tek6100.h and tek6200.h, which include this file.\n+   Copyright (C) 1990 Free Software Foundation, Inc.\n+   Created by Snoopy  (sopwith.uucp!snoopy).\n+   Based on work by Mark Mason (mason@reed.bitnet,\n+   pyramid!unify!mason@uunet.uu.net) and Keith Packard.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+/* Generate syntax for the UTek assembler. */\n+#ifndef UTEK_ASM\n+#define UTEK_ASM\n+#endif\n+\n+/* Two flags to control how addresses are printed in assembler insns.  */\n+\n+/* The way PUT_ABSOLUTE_PREFIX in ns32k.h works, setting it to 0 will\n+ * turn it off.  Define ABSOLUTE_PREFIX before including ns32k.h.\n+ */\n+#define ABSOLUTE_PREFIX\t\t0\n+#define IMMEDIATE_PREFIX\t'$'\n+\n+#include \"ns32k.h\"\n+\n+/* Define these after ns32k.c so we will notice if gcc tries to\n+ * output external mode addressing.  UTek's as and ld do not support\n+ * external mode addressing, according to Daryl McDaniel (illian.uucp!darylm).\n+ * Hopefully the UTek assembler will complain if gcc feeds it this stuff.\n+ * They don't seem to do anything, I think that gcc is not actually\n+ * trying to generate external mode operands.\n+ */\n+#undef PUT_EXTERNAL_PREFIX\n+#define PUT_EXTERNAL_PREFIX(arg)  fprintf(arg, \"  Should not be using external mode under UTek.  \")\n+#define EXTERNAL_PREFIX '%'\n+\n+/* Used in ns32k.c to control syntax. */\n+#define NO_ABSOLUTE_PREFIX_IF_SYMBOLIC\n+#define NO_IMMEDIATE_PREFIX_IF_SYMBOLIC\n+\n+/* Used in ns32k.md to specify syntax of bsr/jsr operand. */\n+#define CALL_MEMREF_IMPLICIT\n+\n+/* #define PC_RELATIVE */\t/* Seems to break things. */\n+#define BASE_REG_NEEDED\t\t/* Seems to fix problem where external mode\n+\t\t\t\t * syntax was being generated.\n+\t\t\t\t */\n+\n+/*  ------------   Debugging Support   ----------------------------- */\n+\n+/* The sdb support does not yet work with UTek.  Need to teach gcc\n+ * how to create sdb type stabs as well as dbx style stabs.\n+ */\n+#define DBX_DEBUGGING_INFO\n+/* #define SDB_DEBUGGING_INFO */\n+\n+/* Act the same as the UTek complier: -g for dbx, -go for sdb.\n+ * This is used in toplev.c.\n+ */\n+#define PREFERRED_DEBUGGING_TYPE \\\n+\t((len > 1 && !strncmp(str, \"go\", len)) ? SDB_DEBUG : DBX_DEBUG )\n+\n+/* Sequent has some changes in the format of DBX symbols.  */\n+#define DBX_NO_XREFS 1\n+\n+/* Don't split DBX symbols into continuations.  */\n+#define DBX_CONTIN_LENGTH 0\n+\n+/* ------------------------------------------- */\n+\n+#define TARGET_DEFAULT 1\n+\n+/* These control the C++ compiler somehow.  */\n+#define FASCIST_ASSEMBLER\n+#define USE_COLLECT\n+\n+/* Print subsidiary information on the compiler version in use.  */\n+#undef TARGET_VERSION\n+#define TARGET_VERSION fprintf (stderr, \" (ns32k, UTek syntax)\");\n+\n+/* The tek6100.h and tek6200.h files add stratos or merlin respectively. */\n+\n+#define CPP_PREDEFINES_Tek6000 \\\n+  \"-Dns16000 -Dns32000 -Dns32k -Dns32016 -DUTek -DUTEK -Dbsd -DBSD\"\n+#undef CPP_PREDEFINES\n+#define CPP_PREDEFINES \"CPP_PREDEFINES_Tek6000\"\n+\n+/* This is how to align the code that follows an unconditional branch.\n+   Don't define it, since it confuses the assembler (we hear).  */\n+\n+#undef ASM_OUTPUT_ALIGN_CODE\n+\n+/* Assembler pseudo-op for shared data segment. */\n+#define SHARED_SECTION_ASM_OP \".shdata\"\n+\n+#ifdef UTEK_ASM\n+#undef  FUNCTION_PROLOGUE\n+\n+/* This differs from the one in ns32k.h in printing a bitmask\n+   rather than a register list in the enter or save instruction.  */\n+\n+#define FUNCTION_PROLOGUE(FILE, SIZE)     \\\n+{ register int regno, g_regs_used = 0;\t\t\t\t\\\n+  int used_regs_buf[8], *bufp = used_regs_buf;\t\t\t\\\n+  int used_fregs_buf[8], *fbufp = used_fregs_buf;\t\t\\\n+  extern char call_used_regs[];\t\t\t\t\t\\\n+  MAIN_FUNCTION_PROLOGUE;\t\t\t\t\t\\\n+  for (regno = 0; regno < 8; regno++)\t\t\t\t\\\n+    if (regs_ever_live[regno]\t\t\t\t\t\\\n+\t&& ! call_used_regs[regno])\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      *bufp++ = regno; g_regs_used++;\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  *bufp = -1;\t\t\t\t\t\t\t\\\n+  for (; regno < 16; regno++)\t\t\t\t\t\\\n+    if (regs_ever_live[regno] && !call_used_regs[regno]) {\t\\\n+      *fbufp++ = regno;\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  *fbufp = -1;\t\t\t\t\t\t\t\\\n+  bufp = used_regs_buf;\t\t\t\t\t\t\\\n+  if (frame_pointer_needed)\t\t\t\t\t\\\n+    fprintf (FILE, \"\\tenter \");\t\t\t\t\t\\\n+  else if (g_regs_used)\t\t\t\t\t\t\\\n+    fprintf (FILE, \"\\tsave \");\t\t\t\t\t\\\n+  if (frame_pointer_needed || g_regs_used)\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      char mask = 0;\t\t\t\t\t\t\\\n+      while (*bufp >= 0)\t\t\t\t\t\\\n+\tmask |= 1 << *bufp++;\t\t\t\t\t\\\n+      fprintf (FILE, \"$0x%x\", (int) mask & 0xff);\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  if (frame_pointer_needed)\t\t\t\t\t\\\n+    fprintf (FILE, \",$%d\\n\", SIZE);\t\t\t\t\\\n+  else if (g_regs_used)\t\t\t\t\t\t\\\n+    fprintf (FILE, \"\\n\");\t\t\t\t\t\\\n+  fbufp = used_fregs_buf;\t\t\t\t\t\\\n+  while (*fbufp >= 0)\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      if ((*fbufp & 1) || (fbufp[0] != fbufp[1] - 1))\t\t\\\n+\tfprintf (FILE, \"\\tmovf f%d,tos\\n\", *fbufp++ - 8);\t\\\n+      else\t\t\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\\\n+\t  fprintf (FILE, \"\\tmovl f%d,tos\\n\", fbufp[0] - 8);\t\\\n+\t  fbufp += 2;\t\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+}\n+\n+#undef  FUNCTION_EPILOGUE\n+\n+/* This differs from the one in ns32k.h in printing a bitmask\n+   rather than a register list in the exit or restore instruction.  */\n+\n+#define FUNCTION_EPILOGUE(FILE, SIZE) \\\n+{ register int regno, g_regs_used = 0, f_regs_used = 0;\t\t\\\n+  int used_regs_buf[8], *bufp = used_regs_buf;\t\t\t\\\n+  int used_fregs_buf[8], *fbufp = used_fregs_buf;\t\t\\\n+  extern char call_used_regs[];\t\t\t\t\t\\\n+  *fbufp++ = -2;\t\t\t\t\t\t\\\n+  for (regno = 8; regno < 16; regno++)\t\t\t\t\\\n+    if (regs_ever_live[regno] && !call_used_regs[regno]) {\t\\\n+       *fbufp++ = regno; f_regs_used++;\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  fbufp--;\t\t\t\t\t\t\t\\\n+  for (regno = 0; regno < 8; regno++)\t\t\t\t\\\n+    if (regs_ever_live[regno]\t\t\t\t\t\\\n+\t&& ! call_used_regs[regno])\t\t\t\t\\\n+    {                                                         \t\\\n+      *bufp++ = regno; g_regs_used++;\t\t\t\t\\\n+    }                                                         \t\\\n+  while (fbufp > used_fregs_buf)\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      if ((*fbufp & 1) && fbufp[0] == fbufp[-1] + 1)\t\t\\\n+\t{\t\t\t\t\t\t\t\\\n+\t  fprintf (FILE, \"\\tmovl tos,f%d\\n\", fbufp[-1] - 8);\t\\\n+\t  fbufp -= 2;\t\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\\\n+      else fprintf (FILE, \"\\tmovf tos,f%d\\n\", *fbufp-- - 8);\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  if (frame_pointer_needed)\t\t\t\t\t\\\n+    fprintf (FILE, \"\\texit \");\t\t\t\t\t\\\n+  else if (g_regs_used)\t\t\t\t\t\t\\\n+    fprintf (FILE, \"\\trestore \");\t\t\t\t\\\n+  if (g_regs_used || frame_pointer_needed)\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      char mask = 0;\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+      while (bufp > used_regs_buf)\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\\\n+\t  /* Utek assembler takes care of reversing this */\t\\\n+\t  mask |= 1 << *--bufp;\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\\\n+      fprintf (FILE, \"$0x%x\\n\", (int) mask & 0xff);\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  if (current_function_pops_args)\t\t\t\t\\\n+    fprintf (FILE, \"\\tret $%d\\n\", current_function_pops_args);\t\\\n+  else fprintf (FILE, \"\\tret $0\\n\"); }\n+\n+/* UTek assembler needs \"ret $0\", not \"ret 0\". */\n+#undef  TRANSFER_FROM_TRAMPOLINE\n+#define TRANSFER_FROM_TRAMPOLINE\t\\\n+void\t\t\t\t\t\\\n+__transfer_from_trampoline ()\t\t\\\n+{\t\t\t\t\t\\\n+  asm (\"___trampoline:\");\t\t\\\n+  asm (\"movd 16(r2),tos\");\t\t\\\n+  asm (\"movd 12(r2),r2\");\t\t\\\n+  asm (\"ret $0\");\t\t\t\\\n+}\n+\n+#endif /* UTEK_ASM */\n+\n+#undef PRINT_OPERAND_ADDRESS\n+#define PRINT_OPERAND_ADDRESS(FILE, ADDR)  print_operand_address(FILE, ADDR)\n+\n+/* The UTek library supplies bcopy() and friends, not memcpy(). */\n+#ifdef TARGET_MEM_FUNCTIONS\n+#undef TARGET_MEM_FUNCTIONS\n+#endif"}, {"sha": "fa69e087ce52668b965578ec69bfa0b00b3c642b", "filename": "gcc/config/ns32k/tek6100.h", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e48b9e9ce6cfc77911dabf36d6aa13027cf3bca9/gcc%2Fconfig%2Fns32k%2Ftek6100.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e48b9e9ce6cfc77911dabf36d6aa13027cf3bca9/gcc%2Fconfig%2Fns32k%2Ftek6100.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Ftek6100.h?ref=e48b9e9ce6cfc77911dabf36d6aa13027cf3bca9", "patch": "@@ -0,0 +1,6 @@\n+#include \"tek6000.h\"\n+\n+#undef CPP_PREDEFINES\n+#define CPP_PREDEFINES \\\n+ \"-Dns32000 -Dns32k -Dns16000 -Dns32016 -DUTek -DUTEK -Dbsd -DBSD -Dstratos\"\n+"}, {"sha": "d2c67513765e8bab2d43b973fb131c518469a747", "filename": "gcc/config/ns32k/tek6200.h", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e48b9e9ce6cfc77911dabf36d6aa13027cf3bca9/gcc%2Fconfig%2Fns32k%2Ftek6200.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e48b9e9ce6cfc77911dabf36d6aa13027cf3bca9/gcc%2Fconfig%2Fns32k%2Ftek6200.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Ftek6200.h?ref=e48b9e9ce6cfc77911dabf36d6aa13027cf3bca9", "patch": "@@ -0,0 +1,6 @@\n+#include \"tek6000.h\"\n+\n+#undef CPP_PREDEFINES\n+#define CPP_PREDEFINES \\\n+ \"-Dns32000 -Dns32k -Dns16000 -Dns32016 -DUTek -DUTEK -Dbsd -DBSD -Dmerlin\"\n+"}]}