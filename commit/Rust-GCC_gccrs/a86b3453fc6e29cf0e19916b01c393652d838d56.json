{"sha": "a86b3453fc6e29cf0e19916b01c393652d838d56", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTg2YjM0NTNmYzZlMjljZjBlMTk5MTZiMDFjMzkzNjUyZDgzOGQ1Ng==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2021-07-01T13:18:50Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2021-07-01T13:19:28Z"}, "message": "Change the type of predicates to bool.\n\nThe patch was tested on many targets, but some fallout is expected.\nTo fix the build error, simply change the function type from int to bool,\nas was done in the patch for several targets.\n\n2021-07-01  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/\n\t* genpreds.c (write_predicate_subfunction):\n\tChange the type of written subfunction to bool.\n\t(write_one_predicate_function):\n\tChange the type of written function to bool.\n\t(write_tm_preds_h): Ditto.\n\t* recog.h (*insn_operand_predicate_fn): Change the type to bool.\n\t* recog.c (general_operand): Change the type to bool.\n\t(address_operand): Ditto.\n\t(register_operand): Ditto.\n\t(pmode_register_operand): Ditto.\n\t(scratch_operand): Ditto.\n\t(immediate_operand): Ditto.\n\t(const_int_operand): Ditto.\n\t(const_scalar_int_operand): Ditto.\n\t(const_double_operand): Ditto.\n\t(nonimmediate_operand): Ditto.\n\t(nonmemory_operand): Ditto.\n\t(push_operand): Ditto.\n\t(pop_operand): Ditto.\n\t(memory_operand): Ditto.\n\t(indirect_operand): Ditto.\n\t(ordered_comparison_operator): Ditto.\n\t(comparison_operator): Ditto.\n\n\t* config/i386/i386-expand.c (ix86_expand_sse_cmp):\n\tChange the type of indirect predicate function to bool.\n\n\t* config/rs6000/rs6000.c (easy_vector_constant):\n\tChange the type to bool.\n\n\t* config/mips/mips-protos.h (m16_based_address_p):\n\tChange the type of operand 3 to bool.", "tree": {"sha": "235b7c2918275cc5f4f351ef824ebbd24345bb16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/235b7c2918275cc5f4f351ef824ebbd24345bb16"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a86b3453fc6e29cf0e19916b01c393652d838d56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a86b3453fc6e29cf0e19916b01c393652d838d56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a86b3453fc6e29cf0e19916b01c393652d838d56", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a86b3453fc6e29cf0e19916b01c393652d838d56/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a77c07b9b3fe83679358c3ef57721e09e2ad5fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a77c07b9b3fe83679358c3ef57721e09e2ad5fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a77c07b9b3fe83679358c3ef57721e09e2ad5fb"}], "stats": {"total": 89, "additions": 45, "deletions": 44}, "files": [{"sha": "76d6afd6d9db3dea87586fd306cbf375031c482b", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a86b3453fc6e29cf0e19916b01c393652d838d56/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a86b3453fc6e29cf0e19916b01c393652d838d56/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=a86b3453fc6e29cf0e19916b01c393652d838d56", "patch": "@@ -3571,7 +3571,7 @@ ix86_expand_sse_cmp (rtx dest, enum rtx_code code, rtx cmp_op0, rtx cmp_op1,\n \n   cmp_op0 = force_reg (cmp_ops_mode, cmp_op0);\n \n-  int (*op1_predicate)(rtx, machine_mode)\n+  bool (*op1_predicate)(rtx, machine_mode)\n     = VECTOR_MODE_P (cmp_ops_mode) ? vector_operand : nonimmediate_operand;\n \n   if (!op1_predicate (cmp_op1, cmp_ops_mode))"}, {"sha": "51b82b1458dfb00d9f264270cb76341b127ddc90", "filename": "gcc/config/mips/mips-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a86b3453fc6e29cf0e19916b01c393652d838d56/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a86b3453fc6e29cf0e19916b01c393652d838d56/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-protos.h?ref=a86b3453fc6e29cf0e19916b01c393652d838d56", "patch": "@@ -366,7 +366,7 @@ extern bool umips_12bit_offset_address_p (rtx, machine_mode);\n extern bool mips_9bit_offset_address_p (rtx, machine_mode);\n extern bool lwsp_swsp_address_p (rtx, machine_mode);\n extern bool m16_based_address_p (rtx, machine_mode,\n-\t\t\t         int (*)(rtx_def*, machine_mode)); \n+\t\t\t\t bool (*)(rtx_def*, machine_mode));\n extern rtx mips_expand_thread_pointer (rtx);\n extern void mips16_expand_get_fcsr (rtx);\n extern void mips16_expand_set_fcsr (rtx);"}, {"sha": "f3e5f95b8d4e7423b301836624dd9d4fdb7778a9", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a86b3453fc6e29cf0e19916b01c393652d838d56/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a86b3453fc6e29cf0e19916b01c393652d838d56/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=a86b3453fc6e29cf0e19916b01c393652d838d56", "patch": "@@ -1146,7 +1146,7 @@ static bool set_to_load_agen (rtx_insn *,rtx_insn *);\n static bool insn_terminates_group_p (rtx_insn *, enum group_termination);\n static bool insn_must_be_first_in_group (rtx_insn *);\n static bool insn_must_be_last_in_group (rtx_insn *);\n-int easy_vector_constant (rtx, machine_mode);\n+bool easy_vector_constant (rtx, machine_mode);\n static rtx rs6000_debug_legitimize_address (rtx, rtx, machine_mode);\n static rtx rs6000_legitimize_tls_address (rtx, enum tls_model);\n #if TARGET_MACHO"}, {"sha": "9d9715f3d2fd1e3aa8adf7529fe6f60e5091f802", "filename": "gcc/genpreds.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a86b3453fc6e29cf0e19916b01c393652d838d56/gcc%2Fgenpreds.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a86b3453fc6e29cf0e19916b01c393652d838d56/gcc%2Fgenpreds.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenpreds.c?ref=a86b3453fc6e29cf0e19916b01c393652d838d56", "patch": "@@ -110,7 +110,7 @@ process_define_predicate (md_rtx_info *info)\n \n    becomes\n \n-       static inline int basereg_operand_1(rtx op, machine_mode mode)\n+       static inline bool basereg_operand_1(rtx op, machine_mode mode)\n        {\n          if (GET_CODE (op) == SUBREG)\n            op = SUBREG_REG (op);\n@@ -151,7 +151,7 @@ write_predicate_subfunction (struct pred_data *p)\n \n   p->exp = and_exp;\n \n-  printf (\"static inline int\\n\"\n+  printf (\"static inline bool\\n\"\n \t  \"%s_1 (rtx op ATTRIBUTE_UNUSED, machine_mode mode ATTRIBUTE_UNUSED)\\n\",\n \t  p->name);\n   rtx_reader_ptr->print_md_ptr_loc (p->c_block);\n@@ -651,7 +651,7 @@ write_one_predicate_function (struct pred_data *p)\n \n   /* A normal predicate can legitimately not look at machine_mode\n      if it accepts only CONST_INTs and/or CONST_WIDE_INT and/or CONST_DOUBLEs.  */\n-  printf (\"int\\n%s (rtx op, machine_mode mode ATTRIBUTE_UNUSED)\\n{\\n\",\n+  printf (\"bool\\n%s (rtx op, machine_mode mode ATTRIBUTE_UNUSED)\\n{\\n\",\n \t  p->name);\n   write_predicate_stmts (p->exp);\n   fputs (\"}\\n\\n\", stdout);\n@@ -1416,7 +1416,7 @@ write_tm_preds_h (void)\n #ifdef HAVE_MACHINE_MODES\");\n \n   FOR_ALL_PREDICATES (p)\n-    printf (\"extern int %s (rtx, machine_mode);\\n\", p->name);\n+    printf (\"extern bool %s (rtx, machine_mode);\\n\", p->name);\n \n   puts (\"#endif /* HAVE_MACHINE_MODES */\\n\");\n "}, {"sha": "9d880433e6f7781fd6d8b9191e5038bbb779bffd", "filename": "gcc/recog.c", "status": "modified", "additions": 37, "deletions": 36, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a86b3453fc6e29cf0e19916b01c393652d838d56/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a86b3453fc6e29cf0e19916b01c393652d838d56/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=a86b3453fc6e29cf0e19916b01c393652d838d56", "patch": "@@ -1393,7 +1393,7 @@ valid_insn_p (rtx_insn *insn)\n   return true;\n }\n \n-/* Return 1 if OP is a valid general operand for machine mode MODE.\n+/* Return true if OP is a valid general operand for machine mode MODE.\n    This is either a register reference, a memory reference,\n    or a constant.  In the case of a memory reference, the address\n    is checked for general validity for the target machine.\n@@ -1407,7 +1407,7 @@ valid_insn_p (rtx_insn *insn)\n    The main use of this function is as a predicate in match_operand\n    expressions in the machine description.  */\n \n-int\n+bool\n general_operand (rtx op, machine_mode mode)\n {\n   enum rtx_code code = GET_CODE (op);\n@@ -1515,13 +1515,13 @@ general_operand (rtx op, machine_mode mode)\n   return 0;\n }\n \f\n-/* Return 1 if OP is a valid memory address for a memory reference\n+/* Return true if OP is a valid memory address for a memory reference\n    of mode MODE.\n \n    The main use of this function is as a predicate in match_operand\n    expressions in the machine description.  */\n \n-int\n+bool\n address_operand (rtx op, machine_mode mode)\n {\n   /* Wrong mode for an address expr.  */\n@@ -1532,13 +1532,13 @@ address_operand (rtx op, machine_mode mode)\n   return memory_address_p (mode, op);\n }\n \n-/* Return 1 if OP is a register reference of mode MODE.\n+/* Return true if OP is a register reference of mode MODE.\n    If MODE is VOIDmode, accept a register in any mode.\n \n    The main use of this function is as a predicate in match_operand\n    expressions in the machine description.  */\n \n-int\n+bool\n register_operand (rtx op, machine_mode mode)\n {\n   if (GET_CODE (op) == SUBREG)\n@@ -1559,18 +1559,18 @@ register_operand (rtx op, machine_mode mode)\n   return general_operand (op, mode);\n }\n \n-/* Return 1 for a register in Pmode; ignore the tested mode.  */\n+/* Return true for a register in Pmode; ignore the tested mode.  */\n \n-int\n+bool\n pmode_register_operand (rtx op, machine_mode mode ATTRIBUTE_UNUSED)\n {\n   return register_operand (op, Pmode);\n }\n \n-/* Return 1 if OP should match a MATCH_SCRATCH, i.e., if it is a SCRATCH\n+/* Return true if OP should match a MATCH_SCRATCH, i.e., if it is a SCRATCH\n    or a hard register.  */\n \n-int\n+bool\n scratch_operand (rtx op, machine_mode mode)\n {\n   if (GET_MODE (op) != mode && mode != VOIDmode)\n@@ -1583,12 +1583,12 @@ scratch_operand (rtx op, machine_mode mode)\n \t\t      && REGNO_REG_CLASS (REGNO (op)) != NO_REGS))));\n }\n \n-/* Return 1 if OP is a valid immediate operand for mode MODE.\n+/* Return true if OP is a valid immediate operand for mode MODE.\n \n    The main use of this function is as a predicate in match_operand\n    expressions in the machine description.  */\n \n-int\n+bool\n immediate_operand (rtx op, machine_mode mode)\n {\n   /* Don't accept CONST_INT or anything similar\n@@ -1612,9 +1612,9 @@ immediate_operand (rtx op, machine_mode mode)\n \t\t\t\t\t    : mode, op));\n }\n \n-/* Returns 1 if OP is an operand that is a CONST_INT of mode MODE.  */\n+/* Return true if OP is an operand that is a CONST_INT of mode MODE.  */\n \n-int\n+bool\n const_int_operand (rtx op, machine_mode mode)\n {\n   if (!CONST_INT_P (op))\n@@ -1628,9 +1628,9 @@ const_int_operand (rtx op, machine_mode mode)\n }\n \n #if TARGET_SUPPORTS_WIDE_INT\n-/* Returns 1 if OP is an operand that is a CONST_INT or CONST_WIDE_INT\n+/* Return true if OP is an operand that is a CONST_INT or CONST_WIDE_INT\n    of mode MODE.  */\n-int\n+bool\n const_scalar_int_operand (rtx op, machine_mode mode)\n {\n   if (!CONST_SCALAR_INT_P (op))\n@@ -1661,20 +1661,20 @@ const_scalar_int_operand (rtx op, machine_mode mode)\n   return 1;\n }\n \n-/* Returns 1 if OP is an operand that is a constant integer or constant\n+/* Return true if OP is an operand that is a constant integer or constant\n    floating-point number of MODE.  */\n \n-int\n+bool\n const_double_operand (rtx op, machine_mode mode)\n {\n   return (GET_CODE (op) == CONST_DOUBLE)\n \t  && (GET_MODE (op) == mode || mode == VOIDmode);\n }\n #else\n-/* Returns 1 if OP is an operand that is a constant integer or constant\n+/* Return true if OP is an operand that is a constant integer or constant\n    floating-point number of MODE.  */\n \n-int\n+bool\n const_double_operand (rtx op, machine_mode mode)\n {\n   /* Don't accept CONST_INT or anything similar\n@@ -1689,32 +1689,33 @@ const_double_operand (rtx op, machine_mode mode)\n \t      || GET_MODE (op) == VOIDmode));\n }\n #endif\n-/* Return 1 if OP is a general operand that is not an immediate\n+/* Return true if OP is a general operand that is not an immediate\n    operand of mode MODE.  */\n \n-int\n+bool\n nonimmediate_operand (rtx op, machine_mode mode)\n {\n   return (general_operand (op, mode) && ! CONSTANT_P (op));\n }\n \n-/* Return 1 if OP is a register reference or immediate value of mode MODE.  */\n+/* Return true if OP is a register reference or\n+   immediate value of mode MODE.  */\n \n-int\n+bool\n nonmemory_operand (rtx op, machine_mode mode)\n {\n   if (CONSTANT_P (op))\n     return immediate_operand (op, mode);\n   return register_operand (op, mode);\n }\n \n-/* Return 1 if OP is a valid operand that stands for pushing a\n+/* Return true if OP is a valid operand that stands for pushing a\n    value of mode MODE onto the stack.\n \n    The main use of this function is as a predicate in match_operand\n    expressions in the machine description.  */\n \n-int\n+bool\n push_operand (rtx op, machine_mode mode)\n {\n   if (!MEM_P (op))\n@@ -1752,13 +1753,13 @@ push_operand (rtx op, machine_mode mode)\n   return XEXP (op, 0) == stack_pointer_rtx;\n }\n \n-/* Return 1 if OP is a valid operand that stands for popping a\n+/* Return true if OP is a valid operand that stands for popping a\n    value of mode MODE off the stack.\n \n    The main use of this function is as a predicate in match_operand\n    expressions in the machine description.  */\n \n-int\n+bool\n pop_operand (rtx op, machine_mode mode)\n {\n   if (!MEM_P (op))\n@@ -1794,13 +1795,13 @@ memory_address_addr_space_p (machine_mode mode ATTRIBUTE_UNUSED,\n #endif\n }\n \n-/* Return 1 if OP is a valid memory reference with mode MODE,\n+/* Return true if OP is a valid memory reference with mode MODE,\n    including a valid address.\n \n    The main use of this function is as a predicate in match_operand\n    expressions in the machine description.  */\n \n-int\n+bool\n memory_operand (rtx op, machine_mode mode)\n {\n   rtx inner;\n@@ -1820,10 +1821,10 @@ memory_operand (rtx op, machine_mode mode)\n   return (MEM_P (inner) && general_operand (op, mode));\n }\n \n-/* Return 1 if OP is a valid indirect memory reference with mode MODE;\n+/* Return true if OP is a valid indirect memory reference with mode MODE;\n    that is, a memory reference whose address is a general_operand.  */\n \n-int\n+bool\n indirect_operand (rtx op, machine_mode mode)\n {\n   /* Before reload, a SUBREG isn't in memory (see memory_operand, above).  */\n@@ -1848,10 +1849,10 @@ indirect_operand (rtx op, machine_mode mode)\n \t  && general_operand (XEXP (op, 0), Pmode));\n }\n \n-/* Return 1 if this is an ordered comparison operator (not including\n+/* Return true if this is an ordered comparison operator (not including\n    ORDERED and UNORDERED).  */\n \n-int\n+bool\n ordered_comparison_operator (rtx op, machine_mode mode)\n {\n   if (mode != VOIDmode && GET_MODE (op) != mode)\n@@ -1874,10 +1875,10 @@ ordered_comparison_operator (rtx op, machine_mode mode)\n     }\n }\n \n-/* Return 1 if this is a comparison operator.  This allows the use of\n+/* Return true if this is a comparison operator.  This allows the use of\n    MATCH_OPERATOR to recognize all the branch insns.  */\n \n-int\n+bool\n comparison_operator (rtx op, machine_mode mode)\n {\n   return ((mode == VOIDmode || GET_MODE (op) == mode)"}, {"sha": "653d0b081843e6c0f908083f624982494777dbb3", "filename": "gcc/recog.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a86b3453fc6e29cf0e19916b01c393652d838d56/gcc%2Frecog.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a86b3453fc6e29cf0e19916b01c393652d838d56/gcc%2Frecog.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.h?ref=a86b3453fc6e29cf0e19916b01c393652d838d56", "patch": "@@ -393,7 +393,7 @@ which_op_alt ()\n /* A table defined in insn-output.c that give information about\n    each insn-code value.  */\n \n-typedef int (*insn_operand_predicate_fn) (rtx, machine_mode);\n+typedef bool (*insn_operand_predicate_fn) (rtx, machine_mode);\n typedef const char * (*insn_output_fn) (rtx *, rtx_insn *);\n \n struct insn_gen_fn"}]}