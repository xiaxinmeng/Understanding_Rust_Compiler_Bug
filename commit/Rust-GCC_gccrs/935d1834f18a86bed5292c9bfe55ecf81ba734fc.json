{"sha": "935d1834f18a86bed5292c9bfe55ecf81ba734fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTM1ZDE4MzRmMThhODZiZWQ1MjkyYzliZmU1NWVjZjgxYmE3MzRmYw==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@wolery.cumb.org", "date": "2000-05-30T15:44:20Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-05-30T15:44:20Z"}, "message": "cp-tree.h (DECL_ANTICIPATED): New macro.\n\n\t* cp-tree.h (DECL_ANTICIPATED): New macro.\n\tDocument new use of DECL_LANG_FLAG_7.\n\t* decl.c (builtin_function): Set DECL_ANTICIPATED on builtins\n\tin the user namespace.\n\t* lex.c (do_identifier): If the identifier's declaration has\n\tDECL_ANTICIPATED on, it has not yet been declared.  But do not\n\treplace it with an ordinary implicit declaration.\n\n\t* tinfo2.cc: Include stdlib.h.\n\nFrom-SVN: r34267", "tree": {"sha": "095255f1eb1114cb50575474e681499eaba07034", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/095255f1eb1114cb50575474e681499eaba07034"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/935d1834f18a86bed5292c9bfe55ecf81ba734fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/935d1834f18a86bed5292c9bfe55ecf81ba734fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/935d1834f18a86bed5292c9bfe55ecf81ba734fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/935d1834f18a86bed5292c9bfe55ecf81ba734fc/comments", "author": null, "committer": null, "parents": [{"sha": "7758b73fae75b4462a0eb0cd79b03ae914f9f1fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7758b73fae75b4462a0eb0cd79b03ae914f9f1fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7758b73fae75b4462a0eb0cd79b03ae914f9f1fa"}], "stats": {"total": 40, "additions": 37, "deletions": 3}, "files": [{"sha": "e7f8552f7edb25659249520343cf51a921eebdda", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/935d1834f18a86bed5292c9bfe55ecf81ba734fc/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/935d1834f18a86bed5292c9bfe55ecf81ba734fc/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=935d1834f18a86bed5292c9bfe55ecf81ba734fc", "patch": "@@ -1,3 +1,15 @@\n+2000-05-30  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* cp-tree.h (DECL_ANTICIPATED): New macro.\n+\tDocument new use of DECL_LANG_FLAG_7.\n+\t* decl.c (builtin_function): Set DECL_ANTICIPATED on builtins\n+\tin the user namespace.\n+\t* lex.c (do_identifier): If the identifier's declaration has\n+\tDECL_ANTICIPATED on, it has not yet been declared.  But do not\n+\treplace it with an ordinary implicit declaration.             \n+\n+\t* tinfo2.cc: Include stdlib.h.\n+\n 2000-05-29  Mark Mitchell  <mark@codesourcery.com>\n \n \t* cp-tree.h (CLASSTYPE_ALIGN_UNIT): New macro."}, {"sha": "6e53ff257de519787bdcf7b43fe00f0f80eda8c2", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/935d1834f18a86bed5292c9bfe55ecf81ba734fc/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/935d1834f18a86bed5292c9bfe55ecf81ba734fc/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=935d1834f18a86bed5292c9bfe55ecf81ba734fc", "patch": "@@ -101,6 +101,7 @@ Boston, MA 02111-1307, USA.  */\n    5: DECL_INTERFACE_KNOWN.\n    6: DECL_THIS_STATIC (in VAR_DECL or FUNCTION_DECL).\n    7: DECL_DEAD_FOR_LOCAL (in VAR_DECL).\n+      DECL_ANTICIPATED (in FUNCTION_DECL).\n \n    Usage of language-independent fields in a language-dependent manner:\n    \n@@ -2491,6 +2492,10 @@ extern int flag_new_for_scope;\n #define DECL_LOCAL_FUNCTION_P(NODE) \\\n   DECL_LANG_FLAG_0 (FUNCTION_DECL_CHECK (NODE))\n \n+/* Nonzero if NODE is a FUNCTION_DECL for a built-in function, and we have\n+   not yet seen a prototype for that function.  */\n+#define DECL_ANTICIPATED(NODE) DECL_LANG_FLAG_7 (FUNCTION_DECL_CHECK (NODE))\n+\n /* This _DECL represents a compiler-generated entity.  */\n #define SET_DECL_ARTIFICIAL(NODE) (DECL_ARTIFICIAL (NODE) = 1)\n "}, {"sha": "a5ee51a2d14ab25667aa0b671a10ada67598d62e", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/935d1834f18a86bed5292c9bfe55ecf81ba734fc/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/935d1834f18a86bed5292c9bfe55ecf81ba734fc/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=935d1834f18a86bed5292c9bfe55ecf81ba734fc", "patch": "@@ -6770,6 +6770,12 @@ builtin_function (name, type, code, class, libname)\n   if (libname)\n     DECL_ASSEMBLER_NAME (decl) = get_identifier (libname);\n   make_function_rtl (decl);\n+\n+  /* Warn if a function in the namespace for users\n+     is used without an occasion to consider it declared.  */\n+  if (name[0] != '_' || name[1] != '_')\n+    DECL_ANTICIPATED (decl) = 1;\n+\n   return decl;\n }\n "}, {"sha": "5c09fef9f9fe0f047d0e2a4848d826f319a517d6", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/935d1834f18a86bed5292c9bfe55ecf81ba734fc/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/935d1834f18a86bed5292c9bfe55ecf81ba734fc/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=935d1834f18a86bed5292c9bfe55ecf81ba734fc", "patch": "@@ -3111,8 +3111,9 @@ do_identifier (token, parsing, args)\n       id = lookup_name (token, 0);\n       return error_mark_node;\n     }\n-      \n-  if (!id)\n+\n+  if (!id || (TREE_CODE (id) == FUNCTION_DECL\n+\t      && DECL_ANTICIPATED (id)))\n     {\n       if (current_template_parms)\n \treturn build_min_nt (LOOKUP_EXPR, token);\n@@ -3124,7 +3125,16 @@ do_identifier (token, parsing, args)\n \t}\n       else if (in_call && ! flag_strict_prototype)\n \t{\n-\t  id = implicitly_declare (token);\n+\t  if (!id)\n+\t    id = implicitly_declare (token);\n+\t  else\n+\t    {\n+\t      /* Implicit declaration of built-in function.  Don't\n+\t\t change the built-in declaration, but don't let this\n+\t\t go by silently, either.  */\n+\t      cp_pedwarn (\"implicit declaration of function `%D'\", token);\n+\t      DECL_ANTICIPATED (id) = 0;  /* only issue this warning once */\n+\t    }\n \t}\n       else if (current_function_decl == 0)\n \t{"}, {"sha": "0c64e9e1259f5c43acb66330b3e77b921432da05", "filename": "gcc/cp/tinfo2.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/935d1834f18a86bed5292c9bfe55ecf81ba734fc/gcc%2Fcp%2Ftinfo2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/935d1834f18a86bed5292c9bfe55ecf81ba734fc/gcc%2Fcp%2Ftinfo2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftinfo2.cc?ref=935d1834f18a86bed5292c9bfe55ecf81ba734fc", "patch": "@@ -28,6 +28,7 @@\n // the GNU General Public License.\n \n #include <stddef.h>\n+#include <stdlib.h>\t\t// for abort\n #include \"tinfo.h\"\n #include \"new\"\t\t\t// for placement new\n "}]}