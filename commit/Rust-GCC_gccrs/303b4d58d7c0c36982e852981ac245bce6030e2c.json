{"sha": "303b4d58d7c0c36982e852981ac245bce6030e2c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzAzYjRkNThkN2MwYzM2OTgyZTg1Mjk4MWFjMjQ1YmNlNjAzMGUyYw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-12-13T10:25:14Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-12-13T10:25:14Z"}, "message": "exp_ch4.adb (Expand_N_Attribute_Reference, [...]): Take into account VM_Target\n\n\t* exp_ch4.adb (Expand_N_Attribute_Reference, Displace_Allocator_Pointer,\n\tExpand_Allocator_Expression): Take into account VM_Target\n\n\t* exp_ch5.adb (Expand_N_Extended_Return_Statement): Do not use\n\tsecondary stack when VM_Target /= No_VM\n\nFrom-SVN: r130831", "tree": {"sha": "b4b5336d3c65b39c02da40bc438089f8b825404a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b4b5336d3c65b39c02da40bc438089f8b825404a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/303b4d58d7c0c36982e852981ac245bce6030e2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/303b4d58d7c0c36982e852981ac245bce6030e2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/303b4d58d7c0c36982e852981ac245bce6030e2c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/303b4d58d7c0c36982e852981ac245bce6030e2c/comments", "author": null, "committer": null, "parents": [{"sha": "4ce9a2d8c36d75dd21c8ba6ea6a25f7353e7f83d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ce9a2d8c36d75dd21c8ba6ea6a25f7353e7f83d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ce9a2d8c36d75dd21c8ba6ea6a25f7353e7f83d"}], "stats": {"total": 113, "additions": 56, "deletions": 57}, "files": [{"sha": "30e08fd9e624257d4c1f127ab11cfac14dfe902b", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/303b4d58d7c0c36982e852981ac245bce6030e2c/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/303b4d58d7c0c36982e852981ac245bce6030e2c/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=303b4d58d7c0c36982e852981ac245bce6030e2c", "patch": "@@ -83,7 +83,7 @@ package body Exp_Ch4 is\n      (N   : Node_Id;\n       Op1 : Node_Id;\n       Op2 : Node_Id);\n-   --  If an boolean array assignment can be done in place, build call to\n+   --  If a boolean array assignment can be done in place, build call to\n    --  corresponding library procedure.\n \n    procedure Displace_Allocator_Pointer (N : Node_Id);\n@@ -382,6 +382,13 @@ package body Exp_Ch4 is\n       PtrT      : Entity_Id;\n \n    begin\n+      --  Do nothing in case of VM targets: the virtual machine will handle\n+      --  interfaces directly.\n+\n+      if VM_Target /= No_VM then\n+         return;\n+      end if;\n+\n       pragma Assert (Nkind (N) = N_Identifier\n         and then Nkind (Orig_Node) = N_Allocator);\n \n@@ -624,6 +631,7 @@ package body Exp_Ch4 is\n \n             if Is_Class_Wide_Type (Etype (Exp))\n               and then Is_Interface (Etype (Exp))\n+              and then VM_Target = No_VM\n             then\n                Set_Expression\n                  (Expression (N),\n@@ -2816,8 +2824,8 @@ package body Exp_Ch4 is\n          begin\n             P := Parent (N);\n             while Present (P) loop\n-               if Nkind (P) = N_Extended_Return_Statement\n-                 or else Nkind (P) = N_Simple_Return_Statement\n+               if Nkind_In\n+                   (P, N_Extended_Return_Statement, N_Simple_Return_Statement)\n                then\n                   return True;\n \n@@ -3282,8 +3290,8 @@ package body Exp_Ch4 is\n                               New_Occurrence_Of\n                                 (Entity (Nam), Sloc (Nam)), T);\n \n-                     elsif (Nkind (Nam) = N_Indexed_Component\n-                             or else Nkind (Nam) = N_Selected_Component)\n+                     elsif Nkind_In\n+                             (Nam, N_Indexed_Component, N_Selected_Component)\n                        and then Is_Entity_Name (Prefix (Nam))\n                      then\n                         Decls :=\n@@ -4165,8 +4173,8 @@ package body Exp_Ch4 is\n             if Nkind (Parnt) = N_Unchecked_Expression then\n                null;\n \n-            elsif Nkind (Parnt) = N_Object_Renaming_Declaration\n-              or else Nkind (Parnt) = N_Procedure_Call_Statement\n+            elsif Nkind_In (Parnt, N_Object_Renaming_Declaration,\n+                                   N_Procedure_Call_Statement)\n               or else (Nkind (Parnt) = N_Parameter_Association\n                         and then\n                           Nkind (Parent (Parnt)) =  N_Procedure_Call_Statement)\n@@ -4206,8 +4214,7 @@ package body Exp_Ch4 is\n             then\n                return;\n \n-            elsif (Nkind (Parnt) = N_Indexed_Component\n-                    or else Nkind (Parnt) = N_Selected_Component)\n+            elsif Nkind_In (Parnt, N_Indexed_Component, N_Selected_Component)\n                and then Prefix (Parnt) = Child\n             then\n                null;\n@@ -6247,11 +6254,9 @@ package body Exp_Ch4 is\n \n          --  Special case the negation of a binary operation\n \n-         elsif (Nkind (Opnd) = N_Op_And\n-                 or else Nkind (Opnd) = N_Op_Or\n-                 or else Nkind (Opnd) = N_Op_Xor)\n+         elsif Nkind_In (Opnd, N_Op_And, N_Op_Or, N_Op_Xor)\n            and then Safe_In_Place_Array_Op\n-             (Name (Parent (N)), Left_Opnd (Opnd), Right_Opnd (Opnd))\n+                      (Name (Parent (N)), Left_Opnd (Opnd), Right_Opnd (Opnd))\n          then\n             Build_Boolean_Array_Proc_Call (Parent (N), Opnd, Empty);\n             return;\n@@ -6974,9 +6979,9 @@ package body Exp_Ch4 is\n             --  expression, since these are additional cases that do can\n             --  appear on procedure actuals.\n \n-            elsif Nkind (Par) = N_Type_Conversion\n-              or else Nkind (Par) = N_Parameter_Association\n-              or else Nkind (Par) = N_Qualified_Expression\n+            elsif Nkind_In (Par, N_Type_Conversion,\n+                                 N_Parameter_Association,\n+                                 N_Qualified_Expression)\n             then\n                Par := Parent (Par);\n \n@@ -8278,10 +8283,7 @@ package body Exp_Ch4 is\n       --  For identifiers and indexed components, it is sufficent to have a\n       --  constrained Unchecked_Union nominal subtype.\n \n-      if Nkind (N) = N_Identifier\n-           or else\n-         Nkind (N) = N_Indexed_Component\n-      then\n+      if Nkind_In (N, N_Identifier, N_Indexed_Component) then\n          return Is_Unchecked_Union (Base_Type (Etype (N)))\n                   and then\n                 Is_Constrained (Etype (N));\n@@ -8944,9 +8946,7 @@ package body Exp_Ch4 is\n          elsif Is_Entity_Name (Op) then\n             return Is_Unaliased (Op);\n \n-         elsif Nkind (Op) = N_Indexed_Component\n-           or else Nkind (Op) = N_Selected_Component\n-         then\n+         elsif Nkind_In (Op, N_Indexed_Component, N_Selected_Component) then\n             return Is_Unaliased (Prefix (Op));\n \n          elsif Nkind (Op) = N_Slice then"}, {"sha": "d77ec2341fe6107266b8834fc3511ede44507989", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 33, "deletions": 34, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/303b4d58d7c0c36982e852981ac245bce6030e2c/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/303b4d58d7c0c36982e852981ac245bce6030e2c/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=303b4d58d7c0c36982e852981ac245bce6030e2c", "patch": "@@ -1523,9 +1523,7 @@ package body Exp_Ch5 is\n       --  Since P is going to be evaluated more than once, any subscripts\n       --  in P must have their evaluation forced.\n \n-      if (Nkind (Lhs) = N_Indexed_Component\n-           or else\n-          Nkind (Lhs) = N_Selected_Component)\n+      if Nkind_In (Lhs, N_Indexed_Component, N_Selected_Component)\n         and then Is_Ref_To_Bit_Packed_Array (Prefix (Lhs))\n       then\n          declare\n@@ -1562,9 +1560,8 @@ package body Exp_Ch5 is\n             loop\n                Set_Analyzed (Exp, False);\n \n-               if Nkind (Exp) = N_Selected_Component\n-                    or else\n-                  Nkind (Exp) = N_Indexed_Component\n+               if Nkind_In\n+                   (Exp, N_Selected_Component, N_Indexed_Component)\n                then\n                   Exp := Prefix (Exp);\n                else\n@@ -1958,9 +1955,8 @@ package body Exp_Ch5 is\n             Actual_Rhs : Node_Id := Rhs;\n \n          begin\n-            while Nkind (Actual_Rhs) = N_Type_Conversion\n-              or else\n-                  Nkind (Actual_Rhs) = N_Qualified_Expression\n+            while Nkind_In (Actual_Rhs, N_Type_Conversion,\n+                                        N_Qualified_Expression)\n             loop\n                Actual_Rhs := Expression (Actual_Rhs);\n             end loop;\n@@ -2017,9 +2013,7 @@ package body Exp_Ch5 is\n                --  Skip this if left hand side is an array or record component\n                --  and elementary component validity checks are suppressed.\n \n-               if (Nkind (Lhs) = N_Selected_Component\n-                    or else\n-                   Nkind (Lhs) = N_Indexed_Component)\n+               if Nkind_In (Lhs, N_Selected_Component, N_Indexed_Component)\n                  and then not Validity_Check_Components\n                then\n                   null;\n@@ -2798,24 +2792,29 @@ package body Exp_Ch5 is\n                         SS_Allocator := New_Copy_Tree (Heap_Allocator);\n                      end if;\n \n-                     Set_Storage_Pool\n-                       (SS_Allocator, RTE (RE_SS_Pool));\n-                     Set_Procedure_To_Call\n-                       (SS_Allocator, RTE (RE_SS_Allocate));\n-\n-                     --  The allocator is returned on the secondary stack,\n-                     --  so indicate that the function return, as well as\n-                     --  the block that encloses the allocator, must not\n-                     --  release it. The flags must be set now because the\n-                     --  decision to use the secondary stack is done very\n-                     --  late in the course of expanding the return statement,\n-                     --  past the point where these flags are normally set.\n-\n-                     Set_Sec_Stack_Needed_For_Return (Parent_Function);\n-                     Set_Sec_Stack_Needed_For_Return\n-                       (Return_Statement_Entity (N));\n-                     Set_Uses_Sec_Stack (Parent_Function);\n-                     Set_Uses_Sec_Stack (Return_Statement_Entity (N));\n+                     --  The allocator is returned on the secondary stack. We\n+                     --  don't do this on VM targets, since the SS is not used.\n+\n+                     if VM_Target = No_VM then\n+                        Set_Storage_Pool (SS_Allocator, RTE (RE_SS_Pool));\n+                        Set_Procedure_To_Call\n+                          (SS_Allocator, RTE (RE_SS_Allocate));\n+\n+                        --  The allocator is returned on the secondary stack,\n+                        --  so indicate that the function return, as well as\n+                        --  the block that encloses the allocator, must not\n+                        --  release it. The flags must be set now because the\n+                        --  decision to use the secondary stack is done very\n+                        --  late in the course of expanding the return\n+                        --  statement, past the point where these flags are\n+                        --  normally set.\n+\n+                        Set_Sec_Stack_Needed_For_Return (Parent_Function);\n+                        Set_Sec_Stack_Needed_For_Return\n+                          (Return_Statement_Entity (N));\n+                        Set_Uses_Sec_Stack (Parent_Function);\n+                        Set_Uses_Sec_Stack (Return_Statement_Entity (N));\n+                     end if;\n \n                      --  Create an if statement to test the BIP_Alloc_Form\n                      --  formal and initialize the access object to either the\n@@ -3842,8 +3841,8 @@ package body Exp_Ch5 is\n \n       if Is_Tagged_Type (Utyp)\n         and then not Is_Class_Wide_Type (Utyp)\n-        and then (Nkind (Exp) = N_Type_Conversion\n-                    or else Nkind (Exp) = N_Unchecked_Type_Conversion\n+        and then (Nkind_In (Exp, N_Type_Conversion,\n+                                 N_Unchecked_Type_Conversion)\n                     or else (Is_Entity_Name (Exp)\n                                and then Ekind (Entity (Exp)) in Formal_Kind))\n       then\n@@ -3918,8 +3917,8 @@ package body Exp_Ch5 is\n         and then not Scope_Suppress (Accessibility_Check)\n         and then\n           (Is_Class_Wide_Type (Etype (Exp))\n-            or else Nkind (Exp) = N_Type_Conversion\n-            or else Nkind (Exp) = N_Unchecked_Type_Conversion\n+            or else Nkind_In (Exp, N_Type_Conversion,\n+                                   N_Unchecked_Type_Conversion)\n             or else (Is_Entity_Name (Exp)\n                        and then Ekind (Entity (Exp)) in Formal_Kind)\n             or else Scope_Depth (Enclosing_Dynamic_Scope (Etype (Exp))) >"}]}