{"sha": "ba6498124c35e60360f9492d7b5651d0f486d110", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmE2NDk4MTI0YzM1ZTYwMzYwZjk0OTJkN2I1NjUxZDBmNDg2ZDExMA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-11-06T17:59:21Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-11-06T18:50:51Z"}, "message": "core: Rename DECL_IS_BUILTIN -> DECL_IS_UNDECLARED_BUILTIN\n\nIn cleaning up C++'s handling of hidden decls, I renamed its\nDECL_BUILTIN_P, which checks for loc == BUILTINS_LOCATION to\nDECL_UNDECLARED_BUILTIN_P, because the location gets updated, if user\nsource declares the builtin, and the predicate no longer holds.  The\noriginal name was confusing me.  (The builtin may still retain builtin\nproperties in the redeclaration, and other predicates can still detect\nthat.)\n\nI discovered that tree.h had its own variant 'DECL_IS_BUILTIN', which\nbehaves in (almost) the same manner.  And therefore has the same\nmutating behaviour.\n\nThis patch deletes the C++ one, and renames tree.h's to\nDECL_IS_UNDECLARED_BUILTIN, to emphasize its non-constantness.  I\nguess _IS_ wins over _P\n\n\tgcc/\n\t* tree.h (DECL_IS_BUILTIN): Rename to ...\n\t(DECL_IS_UNDECLARED_BUILTIN): ... here.  No need to use SOURCE_LOCUS.\n\t* calls.c (maybe_warn_alloc_args_overflow): Adjust for rename.\n\t* cfgexpand.c (pass_expand::execute): Likewise.\n\t* dwarf2out.c (base_type_die, is_naming_typedef_decl): Likewise.\n\t* godump.c (go_decl, go_type_decl): Likewise.\n\t* print-tree.c (print_decl_identifier): Likewise.\n\t* tree-pretty-print.c (dump_generic_node): Likewise.\n\t* tree-ssa-ccp.c (pass_post_ipa_warn::execute): Likewise.\n\t* xcoffout.c (xcoff_assign_fundamental_type_number): Likewise.\n\tgcc/c-family/\n\t* c-ada-spec.c (collect_ada_nodes): Rename\n\tDECL_IS_BUILTIN->DECL_IS_UNDECLARED_BUILTIN.\n\t(collect_ada_node): Likewise.\n\t(dump_forward_type): Likewise.\n\t* c-common.c (set_underlying_type): Rename\n\tDECL_IS_BUILTIN->DECL_IS_UNDECLARED_BUILTIN.\n\t(user_facing_original_type, c_common_finalize_early_debug): Likewise.\n\tgcc/c/\n\t* c-decl.c (diagnose_mismatched_decls): Rename\n\tDECL_IS_BUILTIN->DECL_IS_UNDECLARED_BUILTIN.\n\t(warn_if_shadowing, implicitly_declare, names_builtin_p)\n\t(collect_source_refs): Likewise.\n\t* c-typeck.c (inform_declaration, inform_for_arg)\n\t(convert_for_assignment): Likewise.\n\tgcc/cp/\n\t* cp-tree.h (DECL_UNDECLARED_BUILTIN_P): Delete.\n\t* cp-objcp-common.c (names_bultin_p): Rename\n\tDECL_IS_BUILTIN->DECL_IS_UNDECLARED_BUILTIN.\n\t* decl.c (decls_match): Likewise.  Replace\n\tDECL_UNDECLARED_BUILTIN_P with DECL_IS_UNDECLARED_BUILTIN.\n\t(duplicate_decls): Likewise.\n\t* decl2.c (collect_source_refs): Likewise.\n\t* name-lookup.c (anticipated_builtin_p, print_binding_level)\n\t(do_nonmember_using_decl): Likewise.\n\t* pt.c (builtin_pack_fn_p): Likewise.\n\t* typeck.c (error_args_num): Likewise.\n\tgcc/lto/\n\t* lto-symtab.c (lto_symtab_merge_decls_1): Rename\n\tDECL_IS_BUILTIN->DECL_IS_UNDECLARED_BUILTIN.\n\tgcc/go/\n\t* go-gcc.cc (Gcc_backend::call_expression): Rename\n\tDECL_IS_BUILTIN->DECL_IS_UNDECLARED_BUILTIN.\n\tlibcc1/\n\t* libcc1plugin.cc (address_rewriter): Rename\n\tDECL_IS_BUILTIN->DECL_IS_UNDECLARED_BUILTIN.\n\t* libcp1plugin.cc (supplement_binding): Likewise.", "tree": {"sha": "006babc6911d92df273c994b888cb2bbae75c911", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/006babc6911d92df273c994b888cb2bbae75c911"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba6498124c35e60360f9492d7b5651d0f486d110", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba6498124c35e60360f9492d7b5651d0f486d110", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba6498124c35e60360f9492d7b5651d0f486d110", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba6498124c35e60360f9492d7b5651d0f486d110/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05f1883cfd041adba5f595e97118100b6e00a524", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05f1883cfd041adba5f595e97118100b6e00a524", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05f1883cfd041adba5f595e97118100b6e00a524"}], "stats": {"total": 129, "additions": 64, "deletions": 65}, "files": [{"sha": "266a7fe0fa439a5566f40e6ffb135dd81a4ee914", "filename": "gcc/c-family/c-ada-spec.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba6498124c35e60360f9492d7b5651d0f486d110/gcc%2Fc-family%2Fc-ada-spec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba6498124c35e60360f9492d7b5651d0f486d110/gcc%2Fc-family%2Fc-ada-spec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-ada-spec.c?ref=ba6498124c35e60360f9492d7b5651d0f486d110", "patch": "@@ -713,7 +713,7 @@ collect_ada_nodes (tree t, const char *source_file)\n      in the context of bindings) and namespaces (we do not handle them properly\n      yet).  */\n   for (n = t; n; n = TREE_CHAIN (n))\n-    if (!DECL_IS_BUILTIN (n)\n+    if (!DECL_IS_UNDECLARED_BUILTIN (n)\n \t&& TREE_CODE (n) != NAMESPACE_DECL\n \t&& LOCATION_FILE (decl_sloc (n, false)) == source_file)\n       to_dump_count++;\n@@ -723,7 +723,7 @@ collect_ada_nodes (tree t, const char *source_file)\n \n   /* Store the relevant nodes.  */\n   for (n = t; n; n = TREE_CHAIN (n))\n-    if (!DECL_IS_BUILTIN (n)\n+    if (!DECL_IS_UNDECLARED_BUILTIN (n)\n \t&& TREE_CODE (n) != NAMESPACE_DECL\n \t&& LOCATION_FILE (decl_sloc (n, false)) == source_file)\n       to_dump[i++] = n;\n@@ -2321,7 +2321,7 @@ dump_ada_node (pretty_printer *buffer, tree node, tree type, int spc,\n       return 0;\n \n     case TYPE_DECL:\n-      if (DECL_IS_BUILTIN (node))\n+      if (DECL_IS_UNDECLARED_BUILTIN (node))\n \t{\n \t  /* Don't print the declaration of built-in types.  */\n \t  if (name_only)\n@@ -2444,7 +2444,7 @@ dump_forward_type (pretty_printer *buffer, tree type, tree t, int spc)\n       return;\n     }\n \n-  if (DECL_IS_BUILTIN (decl) || TREE_VISITED (decl))\n+  if (DECL_IS_UNDECLARED_BUILTIN (decl) || TREE_VISITED (decl))\n     return;\n \n   /* Forward declarations are only needed within a given file.  */"}, {"sha": "9302a2461d4af98749bee9abe0e9f15cf2d678e4", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba6498124c35e60360f9492d7b5651d0f486d110/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba6498124c35e60360f9492d7b5651d0f486d110/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=ba6498124c35e60360f9492d7b5651d0f486d110", "patch": "@@ -7839,7 +7839,7 @@ set_underlying_type (tree x)\n {\n   if (x == error_mark_node)\n     return;\n-  if (DECL_IS_BUILTIN (x) && TREE_CODE (TREE_TYPE (x)) != ARRAY_TYPE)\n+  if (DECL_IS_UNDECLARED_BUILTIN (x) && TREE_CODE (TREE_TYPE (x)) != ARRAY_TYPE)\n     {\n       if (TYPE_NAME (TREE_TYPE (x)) == 0)\n \tTYPE_NAME (TREE_TYPE (x)) = x;\n@@ -7873,7 +7873,7 @@ user_facing_original_type_p (const_tree type)\n   tree decl = TYPE_NAME (type);\n \n   /* Look through any typedef in \"user\" code.  */\n-  if (!DECL_IN_SYSTEM_HEADER (decl) && !DECL_IS_BUILTIN (decl))\n+  if (!DECL_IN_SYSTEM_HEADER (decl) && !DECL_IS_UNDECLARED_BUILTIN (decl))\n     return true;\n \n   /* If the original type is also named and is in the user namespace,\n@@ -8369,13 +8369,13 @@ reject_gcc_builtin (const_tree expr, location_t loc /* = UNKNOWN_LOCATION */)\n   if (TREE_TYPE (expr)\n       && TREE_CODE (TREE_TYPE (expr)) == FUNCTION_TYPE\n       && TREE_CODE (expr) == FUNCTION_DECL\n-      /* The intersection of DECL_BUILT_IN and DECL_IS_BUILTIN avoids\n+      /* The intersection of DECL_BUILT_IN and DECL_IS_UNDECLARED_BUILTIN avoids\n \t false positives for user-declared built-ins such as abs or\n \t strlen, and for C++ operators new and delete.\n \t The c_decl_implicit() test avoids false positives for implicitly\n \t declared built-ins with library fallbacks (such as abs).  */\n       && fndecl_built_in_p (expr)\n-      && DECL_IS_BUILTIN (expr)\n+      && DECL_IS_UNDECLARED_BUILTIN (expr)\n       && !c_decl_implicit (expr)\n       && !DECL_ASSEMBLER_NAME_SET_P (expr))\n     {\n@@ -9137,7 +9137,8 @@ c_common_finalize_early_debug (void)\n   struct cgraph_node *cnode;\n   FOR_EACH_FUNCTION (cnode)\n     if (!cnode->alias && !cnode->thunk\n-\t&& (cnode->has_gimple_body_p () || !DECL_IS_BUILTIN (cnode->decl)))\n+\t&& (cnode->has_gimple_body_p ()\n+\t    || !DECL_IS_UNDECLARED_BUILTIN (cnode->decl)))\n       (*debug_hooks->early_global_decl) (cnode->decl);\n }\n "}, {"sha": "f19c82c81dda1855ba509db45317d651677b27c6", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba6498124c35e60360f9492d7b5651d0f486d110/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba6498124c35e60360f9492d7b5651d0f486d110/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=ba6498124c35e60360f9492d7b5651d0f486d110", "patch": "@@ -2051,7 +2051,7 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n \t    }\n \t}\n       else if (TREE_CODE (olddecl) == FUNCTION_DECL\n-\t       && DECL_IS_BUILTIN (olddecl))\n+\t       && DECL_IS_UNDECLARED_BUILTIN (olddecl))\n \t{\n \t  /* A conflicting function declaration for a predeclared\n \t     function that isn't actually built in.  Objective C uses\n@@ -2265,7 +2265,7 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n \t     built in, newdecl silently overrides olddecl.  The latter\n \t     occur only in Objective C; see also above.  (FIXME: Make\n \t     Objective C use normal builtins.)  */\n-\t  if (!DECL_IS_BUILTIN (olddecl)\n+\t  if (!DECL_IS_UNDECLARED_BUILTIN (olddecl)\n \t      && !DECL_EXTERN_INLINE (olddecl))\n \t    {\n \t      auto_diagnostic_group d;\n@@ -2978,7 +2978,7 @@ warn_if_shadowing (tree new_decl)\n         || warn_shadow_local\n         || warn_shadow_compatible_local)\n       /* No shadow warnings for internally generated vars.  */\n-      || DECL_IS_BUILTIN (new_decl))\n+      || DECL_IS_UNDECLARED_BUILTIN (new_decl))\n     return;\n \n   /* Is anything being shadowed?  Invisible decls do not count.  */\n@@ -3631,7 +3631,7 @@ implicitly_declare (location_t loc, tree functionid)\n \t in the external scope because they're pushed before the file\n \t scope gets created.  Catch this here and rebind them into the\n \t file scope.  */\n-      if (!fndecl_built_in_p (decl) && DECL_IS_BUILTIN (decl))\n+      if (!fndecl_built_in_p (decl) && DECL_IS_UNDECLARED_BUILTIN (decl))\n \t{\n \t  bind (functionid, decl, file_scope,\n \t\t/*invisible=*/false, /*nested=*/true,\n@@ -10500,7 +10500,7 @@ names_builtin_p (const char *name)\n {\n   tree id = get_identifier (name);\n   if (tree decl = identifier_global_value (id))\n-    return TREE_CODE (decl) == FUNCTION_DECL && DECL_IS_BUILTIN (decl);\n+    return TREE_CODE (decl) == FUNCTION_DECL && DECL_IS_UNDECLARED_BUILTIN (decl);\n \n   /* Also detect common reserved C words that aren't strictly built-in\n      functions.  */\n@@ -12134,12 +12134,12 @@ collect_source_refs (void)\n     { \n       decls = DECL_INITIAL (t);\n       for (decl = BLOCK_VARS (decls); decl; decl = TREE_CHAIN (decl))\n-\tif (!DECL_IS_BUILTIN (decl))\n+\tif (!DECL_IS_UNDECLARED_BUILTIN (decl))\n \t  collect_source_ref (DECL_SOURCE_FILE (decl));\n     }\n \n   for (decl = BLOCK_VARS (ext_block); decl; decl = TREE_CHAIN (decl))\n-    if (!DECL_IS_BUILTIN (decl))\n+    if (!DECL_IS_UNDECLARED_BUILTIN (decl))\n       collect_source_ref (DECL_SOURCE_FILE (decl));\n }\n "}, {"sha": "96840377d9020f20f33d92d9a5f0301a04e65242", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba6498124c35e60360f9492d7b5651d0f486d110/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba6498124c35e60360f9492d7b5651d0f486d110/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=ba6498124c35e60360f9492d7b5651d0f486d110", "patch": "@@ -3014,7 +3014,8 @@ build_function_call (location_t loc, tree function, tree params)\n static void\n inform_declaration (tree decl)\n {\n-  if (decl && (TREE_CODE (decl) != FUNCTION_DECL || !DECL_IS_BUILTIN (decl)))\n+  if (decl && (TREE_CODE (decl) != FUNCTION_DECL\n+\t       || !DECL_IS_UNDECLARED_BUILTIN (decl)))\n     inform (DECL_SOURCE_LOCATION (decl), \"declared here\");\n }\n \n@@ -6578,7 +6579,7 @@ inform_for_arg (tree fundecl, location_t ploc, int parmnum,\n \t\ttree expected_type, tree actual_type)\n {\n   location_t loc;\n-  if (fundecl && !DECL_IS_BUILTIN (fundecl))\n+  if (fundecl && !DECL_IS_UNDECLARED_BUILTIN (fundecl))\n     loc = get_fndecl_argument_location (fundecl, parmnum - 1);\n   else\n     loc = ploc;\n@@ -6828,7 +6829,7 @@ convert_for_assignment (location_t location, location_t expr_loc, tree type,\n \t    if (pedwarn (expr_loc, OPT_Wc___compat, \"enum conversion when \"\n \t\t\t \"passing argument %d of %qE is invalid in C++\",\n \t\t\t parmnum, rname))\n-\t      inform ((fundecl && !DECL_IS_BUILTIN (fundecl))\n+\t      inform ((fundecl && !DECL_IS_UNDECLARED_BUILTIN (fundecl))\n \t\t      ? DECL_SOURCE_LOCATION (fundecl) : expr_loc,\n \t\t      \"expected %qT but argument is of type %qT\",\n \t\t      type, rhstype);\n@@ -7239,7 +7240,8 @@ convert_for_assignment (location_t location, location_t expr_loc, tree type,\n \t  case ic_argpass:\n \t    /* Do not warn for built-in functions, for example memcpy, since we\n \t       control how they behave and they can be useful in this area.  */\n-\t    if (TREE_CODE (rname) != FUNCTION_DECL || !DECL_IS_BUILTIN (rname))\n+\t    if (TREE_CODE (rname) != FUNCTION_DECL\n+\t\t|| !DECL_IS_UNDECLARED_BUILTIN (rname))\n \t      warning_at (location, OPT_Wscalar_storage_order,\n \t\t\t  \"passing argument %d of %qE from incompatible \"\n \t\t\t  \"scalar storage order\", parmnum, rname);"}, {"sha": "a93d4bf078743e0f2b4618fe4a60942773a4dfd7", "filename": "gcc/calls.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba6498124c35e60360f9492d7b5651d0f486d110/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba6498124c35e60360f9492d7b5651d0f486d110/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=ba6498124c35e60360f9492d7b5651d0f486d110", "patch": "@@ -1548,7 +1548,7 @@ maybe_warn_alloc_args_overflow (tree fn, tree exp, tree args[2], int idx[2])\n     {\n       location_t fnloc = DECL_SOURCE_LOCATION (fn);\n \n-      if (DECL_IS_BUILTIN (fn))\n+      if (DECL_IS_UNDECLARED_BUILTIN (fn))\n \tinform (loc,\n \t\t\"in a call to built-in allocation function %qD\", fn);\n       else"}, {"sha": "b2d86859b3922e61d78a6b7e5944958de8c8daa5", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba6498124c35e60360f9492d7b5651d0f486d110/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba6498124c35e60360f9492d7b5651d0f486d110/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=ba6498124c35e60360f9492d7b5651d0f486d110", "patch": "@@ -6412,7 +6412,7 @@ pass_expand::execute (function *fun)\n   rtl_profile_for_bb (ENTRY_BLOCK_PTR_FOR_FN (fun));\n \n   insn_locations_init ();\n-  if (!DECL_IS_BUILTIN (current_function_decl))\n+  if (!DECL_IS_UNDECLARED_BUILTIN (current_function_decl))\n     {\n       /* Eventually, all FEs should explicitly set function_start_locus.  */\n       if (LOCATION_LOCUS (fun->function_start_locus) == UNKNOWN_LOCATION)"}, {"sha": "a38bb0a06614bcc3437b4cfe2e18f6f75c9423f6", "filename": "gcc/cp/cp-objcp-common.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba6498124c35e60360f9492d7b5651d0f486d110/gcc%2Fcp%2Fcp-objcp-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba6498124c35e60360f9492d7b5651d0f486d110/gcc%2Fcp%2Fcp-objcp-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.c?ref=ba6498124c35e60360f9492d7b5651d0f486d110", "patch": "@@ -366,7 +366,8 @@ names_builtin_p (const char *name)\n   tree id = get_identifier (name);\n   if (tree binding = get_global_binding (id))\n     {\n-      if (TREE_CODE (binding) == FUNCTION_DECL && DECL_IS_BUILTIN (binding))\n+      if (TREE_CODE (binding) == FUNCTION_DECL\n+\t  && DECL_IS_UNDECLARED_BUILTIN (binding))\n \treturn true;\n \n       /* Handle the case when an overload for a  built-in name exists.  */\n@@ -376,7 +377,7 @@ names_builtin_p (const char *name)\n       for (ovl_iterator it (binding); it; ++it)\n \t{\n \t  tree decl = *it;\n-\t  if (DECL_IS_BUILTIN (decl))\n+\t  if (DECL_IS_UNDECLARED_BUILTIN (decl))\n \t    return true;\n \t}\n     }"}, {"sha": "052291c40fe709a6b8e5b1d8a215d95a479b6da8", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba6498124c35e60360f9492d7b5651d0f486d110/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba6498124c35e60360f9492d7b5651d0f486d110/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=ba6498124c35e60360f9492d7b5651d0f486d110", "patch": "@@ -4038,11 +4038,6 @@ more_aggr_init_expr_args_p (const aggr_init_expr_arg_iterator *iter)\n #define FNDECL_USED_AUTO(NODE) \\\n   TREE_LANG_FLAG_2 (FUNCTION_DECL_CHECK (NODE))\n \n-/* True if NODE is an undeclared builtin decl.  As soon as the user\n-   declares it, the location will be updated.  */\n-#define DECL_UNDECLARED_BUILTIN_P(NODE) \\\n-  (DECL_SOURCE_LOCATION(NODE) == BUILTINS_LOCATION)\n-\n /* True for artificial decls added for OpenMP privatized non-static\n    data members.  */\n #define DECL_OMP_PRIVATIZED_MEMBER(NODE) \\"}, {"sha": "56bd772d01d72489771f31bc7596893feac4076a", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba6498124c35e60360f9492d7b5651d0f486d110/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba6498124c35e60360f9492d7b5651d0f486d110/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=ba6498124c35e60360f9492d7b5651d0f486d110", "patch": "@@ -1002,7 +1002,7 @@ decls_match (tree newdecl, tree olddecl, bool record_versions /* = true */)\n \n       /* A new declaration doesn't match a built-in one unless it\n \t is also extern \"C\".  */\n-      if (DECL_IS_BUILTIN (olddecl)\n+      if (DECL_IS_UNDECLARED_BUILTIN (olddecl)\n \t  && DECL_EXTERN_C_P (olddecl) && !DECL_EXTERN_C_P (newdecl))\n \treturn 0;\n \n@@ -1205,7 +1205,7 @@ check_redeclaration_exception_specification (tree new_decl,\n      all declarations, including the definition and an explicit\n      specialization, of that function shall have an\n      exception-specification with the same set of type-ids.  */\n-  if (! DECL_IS_BUILTIN (old_decl)\n+  if (! DECL_IS_UNDECLARED_BUILTIN (old_decl)\n       && !comp_except_specs (new_exceptions, old_exceptions, ce_normal))\n     {\n       const char *const msg\n@@ -1465,7 +1465,7 @@ duplicate_decls (tree newdecl, tree olddecl, bool hiding, bool was_hidden)\n \n   /* Check for redeclaration and other discrepancies.  */\n   if (TREE_CODE (olddecl) == FUNCTION_DECL\n-      && DECL_UNDECLARED_BUILTIN_P (olddecl))\n+      && DECL_IS_UNDECLARED_BUILTIN (olddecl))\n     {\n       if (TREE_CODE (newdecl) != FUNCTION_DECL)\n \t{\n@@ -1517,7 +1517,7 @@ duplicate_decls (tree newdecl, tree olddecl, bool hiding, bool was_hidden)\n \n \t      /* A new declaration doesn't match a built-in one unless it\n \t\t is also extern \"C\".  */\n-\t      gcc_assert (DECL_IS_BUILTIN (olddecl));\n+\t      gcc_assert (DECL_IS_UNDECLARED_BUILTIN (olddecl));\n \t      gcc_assert (DECL_EXTERN_C_P (olddecl));\n \t      if (!DECL_EXTERN_C_P (newdecl))\n \t\treturn NULL_TREE;\n@@ -1627,11 +1627,11 @@ duplicate_decls (tree newdecl, tree olddecl, bool hiding, bool was_hidden)\n \t  /* Replace the old RTL to avoid problems with inlining.  */\n \t  COPY_DECL_RTL (newdecl, olddecl);\n \t}\n-      /* Even if the types match, prefer the new declarations type for\n-\t built-ins which have not been explicitly declared, for\n-\t exception lists, etc...  */\n-      else if (DECL_IS_BUILTIN (olddecl))\n+      else \n \t{\n+\t  /* Even if the types match, prefer the new declarations type\n+\t     for built-ins which have not been explicitly declared,\n+\t     for exception lists, etc...  */\n \t  tree type = TREE_TYPE (newdecl);\n \t  tree attribs = (*targetm.merge_type_attributes)\n \t    (TREE_TYPE (olddecl), type);"}, {"sha": "1bc7b7e0197a106accb94febc4fe95a219dcae15", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba6498124c35e60360f9492d7b5651d0f486d110/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba6498124c35e60360f9492d7b5651d0f486d110/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=ba6498124c35e60360f9492d7b5651d0f486d110", "patch": "@@ -4347,7 +4347,7 @@ collect_source_refs (tree namespc)\n {\n   /* Iterate over names in this name space.  */\n   for (tree t = NAMESPACE_LEVEL (namespc)->names; t; t = TREE_CHAIN (t))\n-    if (DECL_IS_BUILTIN (t))\n+    if (DECL_IS_UNDECLARED_BUILTIN (t))\n       ;\n     else if (TREE_CODE (t) == NAMESPACE_DECL && !DECL_NAMESPACE_ALIAS (t))\n       collect_source_refs (t);"}, {"sha": "5bda4c2eea93a86f649c25bed6557e72d6d4a609", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba6498124c35e60360f9492d7b5651d0f486d110/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba6498124c35e60360f9492d7b5651d0f486d110/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=ba6498124c35e60360f9492d7b5651d0f486d110", "patch": "@@ -1946,7 +1946,7 @@ anticipated_builtin_p (tree ovl)\n {\n   return (TREE_CODE (ovl) == OVERLOAD\n \t  && OVL_HIDDEN_P (ovl)\n-\t  && DECL_UNDECLARED_BUILTIN_P (OVL_FUNCTION (ovl)));\n+\t  && DECL_IS_UNDECLARED_BUILTIN (OVL_FUNCTION (ovl)));\n }\n \n /* BINDING records an existing declaration for a name in the current scope.\n@@ -3508,7 +3508,7 @@ print_binding_level (cp_binding_level* lvl)\n \t    continue;\n \t  if (no_print_builtins\n \t      && (TREE_CODE (t) == TYPE_DECL)\n-\t      && DECL_IS_BUILTIN (t))\n+\t      && DECL_IS_UNDECLARED_BUILTIN (t))\n \t    continue;\n \n \t  /* Function decls tend to have longer names.  */\n@@ -3826,7 +3826,7 @@ do_nonmember_using_decl (name_lookup &lookup, bool fn_scope_p,\n \t\t}\n \t      else if (old.using_p ())\n \t\tcontinue; /* This is a using decl. */\n-\t      else if (old.hidden_p () && DECL_UNDECLARED_BUILTIN_P (old_fn))\n+\t      else if (old.hidden_p () && DECL_IS_UNDECLARED_BUILTIN (old_fn))\n \t\tcontinue; /* This is an anticipated builtin.  */\n \t      else if (!matching_fn_p (new_fn, old_fn))\n \t\tcontinue; /* Parameters do not match.  */"}, {"sha": "2a885a90857bf8c8ac66fef326cb61a653c43241", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba6498124c35e60360f9492d7b5651d0f486d110/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba6498124c35e60360f9492d7b5651d0f486d110/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=ba6498124c35e60360f9492d7b5651d0f486d110", "patch": "@@ -3767,7 +3767,7 @@ builtin_pack_fn_p (tree fn)\n {\n   if (!fn\n       || TREE_CODE (fn) != FUNCTION_DECL\n-      || !DECL_IS_BUILTIN (fn))\n+      || !DECL_IS_UNDECLARED_BUILTIN (fn))\n     return false;\n \n   if (id_equal (DECL_NAME (fn), \"__integer_pack\"))"}, {"sha": "08e0c80f9b021bb3ecd4bc4cb26baf7226ba337c", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba6498124c35e60360f9492d7b5651d0f486d110/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba6498124c35e60360f9492d7b5651d0f486d110/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=ba6498124c35e60360f9492d7b5651d0f486d110", "patch": "@@ -4062,7 +4062,7 @@ error_args_num (location_t loc, tree fndecl, bool too_many_p)\n \t\t  ? G_(\"too many arguments to function %q#D\")\n \t\t  : G_(\"too few arguments to function %q#D\"),\n \t\t  fndecl);\n-      if (!DECL_IS_BUILTIN (fndecl))\n+      if (!DECL_IS_UNDECLARED_BUILTIN (fndecl))\n \tinform (DECL_SOURCE_LOCATION (fndecl), \"declared here\");\n     }\n   else"}, {"sha": "bc32a17efcd9a64551a6557fb9f7be6a64e9c623", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba6498124c35e60360f9492d7b5651d0f486d110/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba6498124c35e60360f9492d7b5651d0f486d110/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=ba6498124c35e60360f9492d7b5651d0f486d110", "patch": "@@ -12855,7 +12855,7 @@ base_type_die (tree type, bool reverse)\n       if ((dwarf_version >= 4 || !dwarf_strict)\n \t  && TYPE_NAME (type)\n \t  && TREE_CODE (TYPE_NAME (type)) == TYPE_DECL\n-\t  && DECL_IS_BUILTIN (TYPE_NAME (type))\n+\t  && DECL_IS_UNDECLARED_BUILTIN (TYPE_NAME (type))\n \t  && DECL_NAME (TYPE_NAME (type)))\n \t{\n \t  const char *name = IDENTIFIER_POINTER (DECL_NAME (TYPE_NAME (type)));\n@@ -26046,7 +26046,7 @@ is_naming_typedef_decl (const_tree decl)\n       || TREE_CODE (decl) != TYPE_DECL\n       || DECL_NAMELESS (decl)\n       || !is_tagged_type (TREE_TYPE (decl))\n-      || DECL_IS_BUILTIN (decl)\n+      || DECL_IS_UNDECLARED_BUILTIN (decl)\n       || is_redundant_typedef (decl)\n       /* It looks like Ada produces TYPE_DECLs that are very similar\n          to C++ naming typedefs but that have different\n@@ -26958,7 +26958,7 @@ dwarf2out_decl (tree decl)\n \n       /* Don't bother trying to generate any DIEs to represent any of the\n \t normal built-in types for the language we are compiling.  */\n-      if (DECL_IS_BUILTIN (decl))\n+      if (DECL_IS_UNDECLARED_BUILTIN (decl))\n \treturn;\n \n       /* If we are in terse mode, don't generate any DIEs for types.  */"}, {"sha": "ba286fa8e82e2f83133e906de6716be59edac7da", "filename": "gcc/go/go-gcc.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba6498124c35e60360f9492d7b5651d0f486d110/gcc%2Fgo%2Fgo-gcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba6498124c35e60360f9492d7b5651d0f486d110/gcc%2Fgo%2Fgo-gcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgo-gcc.cc?ref=ba6498124c35e60360f9492d7b5651d0f486d110", "patch": "@@ -2110,7 +2110,7 @@ Gcc_backend::call_expression(Bfunction*, // containing fcn for call\n   if (optimize\n       && TREE_CODE(fndecl) == FUNCTION_DECL\n       && fndecl_built_in_p (fndecl, BUILT_IN_NORMAL)\n-      && DECL_IS_BUILTIN (fndecl)\n+      && DECL_IS_UNDECLARED_BUILTIN (fndecl)\n       && nargs > 0\n       && ((SCALAR_FLOAT_TYPE_P(rettype)\n \t   && SCALAR_FLOAT_TYPE_P(TREE_TYPE(args[0])))"}, {"sha": "29a45ce89792ab5229ded6976e24e929c9b504fc", "filename": "gcc/godump.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba6498124c35e60360f9492d7b5651d0f486d110/gcc%2Fgodump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba6498124c35e60360f9492d7b5651d0f486d110/gcc%2Fgodump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgodump.c?ref=ba6498124c35e60360f9492d7b5651d0f486d110", "patch": "@@ -484,7 +484,7 @@ static void\n go_decl (tree decl)\n {\n   if (!TREE_PUBLIC (decl)\n-      || DECL_IS_BUILTIN (decl)\n+      || DECL_IS_UNDECLARED_BUILTIN (decl)\n       || DECL_NAME (decl) == NULL_TREE)\n     return;\n   vec_safe_push (queue, decl);\n@@ -522,7 +522,7 @@ go_type_decl (tree decl, int local)\n {\n   real_debug_hooks->type_decl (decl, local);\n \n-  if (local || DECL_IS_BUILTIN (decl))\n+  if (local || DECL_IS_UNDECLARED_BUILTIN (decl))\n     return;\n   if (DECL_NAME (decl) == NULL_TREE\n       && (TYPE_NAME (TREE_TYPE (decl)) == NULL_TREE"}, {"sha": "0058d98bdb9e49f5b1d604b4a57ed365b03599d8", "filename": "gcc/lto/lto-symtab.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba6498124c35e60360f9492d7b5651d0f486d110/gcc%2Flto%2Flto-symtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba6498124c35e60360f9492d7b5651d0f486d110/gcc%2Flto%2Flto-symtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-symtab.c?ref=ba6498124c35e60360f9492d7b5651d0f486d110", "patch": "@@ -694,8 +694,8 @@ lto_symtab_merge_decls_2 (symtab_node *first, bool diagnosed_p)\n \t location in that case.  It also happens for AVR if two built-ins\n \t use the same asm name because their libgcc assembler code is the\n \t same, see PR78562.  */\n-      if (DECL_IS_BUILTIN (prevailing->decl)\n-\t  && DECL_IS_BUILTIN (decl))\n+      if (DECL_IS_UNDECLARED_BUILTIN (prevailing->decl)\n+\t  && DECL_IS_UNDECLARED_BUILTIN (decl))\n \tcontinue;\n \n       int level = warn_type_compatibility_p (TREE_TYPE (prevailing->decl),"}, {"sha": "17c88f81770b49c41780722038cd927289846763", "filename": "gcc/print-tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba6498124c35e60360f9492d7b5651d0f486d110/gcc%2Fprint-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba6498124c35e60360f9492d7b5651d0f486d110/gcc%2Fprint-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-tree.c?ref=ba6498124c35e60360f9492d7b5651d0f486d110", "patch": "@@ -1052,7 +1052,7 @@ print_decl_identifier (FILE *file, tree decl, int flags)\n \n   if (flags & PRINT_DECL_ORIGIN)\n     {\n-      if (DECL_IS_BUILTIN (decl))\n+      if (DECL_IS_UNDECLARED_BUILTIN (decl))\n \tfputs (\"<built-in>\", file);\n       else\n \t{"}, {"sha": "318f048bcff4a48df44573aa098ee6a7f51db115", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba6498124c35e60360f9492d7b5651d0f486d110/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba6498124c35e60360f9492d7b5651d0f486d110/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=ba6498124c35e60360f9492d7b5651d0f486d110", "patch": "@@ -2165,7 +2165,7 @@ dump_generic_node (pretty_printer *pp, tree node, int spc, dump_flags_t flags,\n       break;\n \n     case TYPE_DECL:\n-      if (DECL_IS_BUILTIN (node))\n+      if (DECL_IS_UNDECLARED_BUILTIN (node))\n \t{\n \t  /* Don't print the declaration of built-in types.  */\n \t  break;"}, {"sha": "23b2902ecfca822b0d467d4f6dd8d45440c13a55", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba6498124c35e60360f9492d7b5651d0f486d110/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba6498124c35e60360f9492d7b5651d0f486d110/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=ba6498124c35e60360f9492d7b5651d0f486d110", "patch": "@@ -3583,7 +3583,7 @@ pass_post_ipa_warn::execute (function *fun)\n \t\tcontinue;\n \n \t      tree fndecl = gimple_call_fndecl (stmt);\n-\t      if (fndecl && DECL_IS_BUILTIN (fndecl))\n+\t      if (fndecl && DECL_IS_UNDECLARED_BUILTIN (fndecl))\n \t\tinform (loc, \"in a call to built-in function %qD\",\n \t\t\tfndecl);\n \t      else if (fndecl)"}, {"sha": "f8f0a60643961fe16cd1d082ce49105e24185423", "filename": "gcc/tree.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba6498124c35e60360f9492d7b5651d0f486d110/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba6498124c35e60360f9492d7b5651d0f486d110/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=ba6498124c35e60360f9492d7b5651d0f486d110", "patch": "@@ -2456,11 +2456,12 @@ extern tree vector_element_bits_tree (const_tree);\n #define DECL_SOURCE_FILE(NODE) LOCATION_FILE (DECL_SOURCE_LOCATION (NODE))\n #define DECL_SOURCE_LINE(NODE) LOCATION_LINE (DECL_SOURCE_LOCATION (NODE))\n #define DECL_SOURCE_COLUMN(NODE) LOCATION_COLUMN (DECL_SOURCE_LOCATION (NODE))\n-/* This accessor returns TRUE if the decl it operates on was created\n-   by a front-end or back-end rather than by user code.  In this case\n-   builtin-ness is indicated by source location.  */\n-#define DECL_IS_BUILTIN(DECL) \\\n-  (LOCATION_LOCUS (DECL_SOURCE_LOCATION (DECL)) <= BUILTINS_LOCATION)\n+/* This decl was created by a front-end or back-end rather than by\n+   user code, and has not been explicitly declared by the user -- when\n+   that happens the source location is updated to the user's\n+   source.  This includes decls with no location (!).  */\n+#define DECL_IS_UNDECLARED_BUILTIN(DECL) \\\n+  (DECL_SOURCE_LOCATION (DECL) <= BUILTINS_LOCATION)\n \n /*  For FIELD_DECLs, this is the RECORD_TYPE, UNION_TYPE, or\n     QUAL_UNION_TYPE node that the field is a member of.  For VAR_DECL,\n@@ -6278,9 +6279,8 @@ type_has_mode_precision_p (const_tree t)\n \n /* Return true if a FUNCTION_DECL NODE is a GCC built-in function.\n \n-   Note that it is different from the DECL_IS_BUILTIN accessor.  For\n-   instance, user declared prototypes of C library functions are not\n-   DECL_IS_BUILTIN but may be fndecl_built_in_p.  */\n+   Note that it is different from the DECL_IS_UNDECLARED_BUILTIN\n+   accessor, as this is impervious to user declaration.  */\n \n inline bool\n fndecl_built_in_p (const_tree node)"}, {"sha": "1e72c6e2cef5b5526c8139d5bf14ea27a484f8f7", "filename": "gcc/xcoffout.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba6498124c35e60360f9492d7b5651d0f486d110/gcc%2Fxcoffout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba6498124c35e60360f9492d7b5651d0f486d110/gcc%2Fxcoffout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fxcoffout.c?ref=ba6498124c35e60360f9492d7b5651d0f486d110", "patch": "@@ -164,7 +164,7 @@ xcoff_assign_fundamental_type_number (tree decl)\n   size_t i;\n \n   /* Do not waste time searching the list for non-intrinsic types.  */\n-  if (DECL_NAME (decl) == 0 || ! DECL_IS_BUILTIN (decl))\n+  if (DECL_NAME (decl) == 0 || ! DECL_IS_UNDECLARED_BUILTIN (decl))\n     return 0;\n \n   name = IDENTIFIER_POINTER (DECL_NAME (decl));"}, {"sha": "241a8158b98bdd51737e278d3200e420701d334e", "filename": "libcc1/libcc1plugin.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba6498124c35e60360f9492d7b5651d0f486d110/libcc1%2Flibcc1plugin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba6498124c35e60360f9492d7b5651d0f486d110/libcc1%2Flibcc1plugin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2Flibcc1plugin.cc?ref=ba6498124c35e60360f9492d7b5651d0f486d110", "patch": "@@ -300,7 +300,7 @@ address_rewriter (tree *in, int *walk_subtrees, void *arg)\n   decl_addr_value *found_value = ctx->address_map.find (&value);\n   if (found_value != NULL)\n     ;\n-  else if (DECL_IS_BUILTIN (*in))\n+  else if (DECL_IS_UNDECLARED_BUILTIN (*in))\n     {\n       gcc_address address;\n "}, {"sha": "bab2751a5ce7711e5a90e364b011ea5fb31e384f", "filename": "libcc1/libcp1plugin.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba6498124c35e60360f9492d7b5651d0f486d110/libcc1%2Flibcp1plugin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba6498124c35e60360f9492d7b5651d0f486d110/libcc1%2Flibcp1plugin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2Flibcp1plugin.cc?ref=ba6498124c35e60360f9492d7b5651d0f486d110", "patch": "@@ -353,7 +353,7 @@ supplement_binding (cxx_binding *binding, tree decl)\n \t   /* If TARGET_BVAL is anticipated but has not yet been\n \t      declared, pretend it is not there at all.  */\n \t   || (TREE_CODE (target_bval) == FUNCTION_DECL\n-\t       && DECL_UNDECLARED_BUILTIN_P (target_bval)))\n+\t       && DECL_IS_UNDECLARED_BUILTIN (target_bval)))\n     binding->value = decl;\n   else if (TREE_CODE (target_bval) == TYPE_DECL\n \t   && DECL_ARTIFICIAL (target_bval)"}]}