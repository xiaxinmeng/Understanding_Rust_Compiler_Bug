{"sha": "f24dfc76177b3994434c8beb287cde1a9976b5ce", "node_id": "C_kwDOANBUbNoAKGYyNGRmYzc2MTc3YjM5OTQ0MzRjOGJlYjI4N2NkZTFhOTk3NmI1Y2U", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-02-18T10:50:44Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-02-22T06:48:38Z"}, "message": "tree-optimization/104582 - make SLP node available in vector cost hook\n\nThis adjusts the vectorizer costing API to allow passing down the\nSLP node the vector stmt is created from.\n\n2022-02-18  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/104582\n\t* tree-vectorizer.h (stmt_info_for_cost::node): New field.\n\t(vector_costs::add_stmt_cost): Add SLP node parameter.\n\t(dump_stmt_cost): Likewise.\n\t(add_stmt_cost): Likewise, new overload and adjust.\n\t(add_stmt_costs): Adjust.\n\t(record_stmt_cost): New overload.\n\t* tree-vectorizer.cc (dump_stmt_cost): Dump the SLP node.\n\t(vector_costs::add_stmt_cost): Adjust.\n\t* tree-vect-loop.cc (vect_estimate_min_profitable_iters):\n\tAdjust.\n\t* tree-vect-slp.cc (vect_prologue_cost_for_slp): Record\n\tthe SLP node for costing.\n\t(vectorizable_slp_permutation): Likewise.\n\t* tree-vect-stmts.cc (record_stmt_cost): Adjust and add\n\tnew overloads.\n\t* config/i386/i386.cc (ix86_vector_costs::add_stmt_cost):\n\tAdjust.\n\t* config/aarch64/aarch64.cc (aarch64_vector_costs::add_stmt_cost):\n\tAdjust.\n\t* config/rs6000/rs6000.cc (rs6000_vector_costs::add_stmt_cost):\n\tAdjust.\n\t(rs6000_cost_data::adjust_vect_cost_per_loop): Likewise.", "tree": {"sha": "198480fb098a52bf230d5e9e5b208fef8a58b2a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/198480fb098a52bf230d5e9e5b208fef8a58b2a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f24dfc76177b3994434c8beb287cde1a9976b5ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f24dfc76177b3994434c8beb287cde1a9976b5ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f24dfc76177b3994434c8beb287cde1a9976b5ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f24dfc76177b3994434c8beb287cde1a9976b5ce/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61fc5e098e76c9809f35f449a70c9c8d74773d9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61fc5e098e76c9809f35f449a70c9c8d74773d9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61fc5e098e76c9809f35f449a70c9c8d74773d9d"}], "stats": {"total": 113, "additions": 75, "deletions": 38}, "files": [{"sha": "dbeaaf484dbc070ae3fcc08530ec9bd20b8ab651", "filename": "gcc/config/aarch64/aarch64.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f24dfc76177b3994434c8beb287cde1a9976b5ce/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f24dfc76177b3994434c8beb287cde1a9976b5ce/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.cc?ref=f24dfc76177b3994434c8beb287cde1a9976b5ce", "patch": "@@ -15058,7 +15058,7 @@ class aarch64_vector_costs : public vector_costs\n   aarch64_vector_costs (vec_info *, bool);\n \n   unsigned int add_stmt_cost (int count, vect_cost_for_stmt kind,\n-\t\t\t      stmt_vec_info stmt_info, tree vectype,\n+\t\t\t      stmt_vec_info stmt_info, slp_tree, tree vectype,\n \t\t\t      int misalign,\n \t\t\t      vect_cost_model_location where) override;\n   void finish_cost (const vector_costs *) override;\n@@ -16003,8 +16003,8 @@ aarch64_stp_sequence_cost (unsigned int count, vect_cost_for_stmt kind,\n \n unsigned\n aarch64_vector_costs::add_stmt_cost (int count, vect_cost_for_stmt kind,\n-\t\t\t\t     stmt_vec_info stmt_info, tree vectype,\n-\t\t\t\t     int misalign,\n+\t\t\t\t     stmt_vec_info stmt_info, slp_tree,\n+\t\t\t\t     tree vectype, int misalign,\n \t\t\t\t     vect_cost_model_location where)\n {\n   fractional_cost stmt_cost"}, {"sha": "0830dbd7dcabc075f61d5b2e2f5ee7f5fd55fefe", "filename": "gcc/config/i386/i386.cc", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f24dfc76177b3994434c8beb287cde1a9976b5ce/gcc%2Fconfig%2Fi386%2Fi386.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f24dfc76177b3994434c8beb287cde1a9976b5ce/gcc%2Fconfig%2Fi386%2Fi386.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.cc?ref=f24dfc76177b3994434c8beb287cde1a9976b5ce", "patch": "@@ -22982,8 +22982,8 @@ class ix86_vector_costs : public vector_costs\n   using vector_costs::vector_costs;\n \n   unsigned int add_stmt_cost (int count, vect_cost_for_stmt kind,\n-\t\t\t      stmt_vec_info stmt_info, tree vectype,\n-\t\t\t      int misalign,\n+\t\t\t      stmt_vec_info stmt_info, slp_tree node,\n+\t\t\t      tree vectype, int misalign,\n \t\t\t      vect_cost_model_location where) override;\n };\n \n@@ -22997,8 +22997,9 @@ ix86_vectorize_create_costs (vec_info *vinfo, bool costing_for_scalar)\n \n unsigned\n ix86_vector_costs::add_stmt_cost (int count, vect_cost_for_stmt kind,\n-\t\t\t\t  stmt_vec_info stmt_info, tree vectype,\n-\t\t\t\t  int misalign, vect_cost_model_location where)\n+\t\t\t\t  stmt_vec_info stmt_info, slp_tree,\n+\t\t\t\t  tree vectype, int misalign,\n+\t\t\t\t  vect_cost_model_location where)\n {\n   unsigned retval = 0;\n   bool scalar_p"}, {"sha": "ca9e7b80dcbfe61a2775ab51d93b14b3dd0123e1", "filename": "gcc/config/rs6000/rs6000.cc", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f24dfc76177b3994434c8beb287cde1a9976b5ce/gcc%2Fconfig%2Frs6000%2Frs6000.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f24dfc76177b3994434c8beb287cde1a9976b5ce/gcc%2Fconfig%2Frs6000%2Frs6000.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.cc?ref=f24dfc76177b3994434c8beb287cde1a9976b5ce", "patch": "@@ -5212,7 +5212,7 @@ class rs6000_cost_data : public vector_costs\n   using vector_costs::vector_costs;\n \n   unsigned int add_stmt_cost (int count, vect_cost_for_stmt kind,\n-\t\t\t      stmt_vec_info stmt_info, tree vectype,\n+\t\t\t      stmt_vec_info stmt_info, slp_tree, tree vectype,\n \t\t\t      int misalign,\n \t\t\t      vect_cost_model_location where) override;\n   void finish_cost (const vector_costs *) override;\n@@ -5428,8 +5428,9 @@ rs6000_cost_data::update_target_cost_per_stmt (vect_cost_for_stmt kind,\n \n unsigned\n rs6000_cost_data::add_stmt_cost (int count, vect_cost_for_stmt kind,\n-\t\t\t\t stmt_vec_info stmt_info, tree vectype,\n-\t\t\t\t int misalign, vect_cost_model_location where)\n+\t\t\t\t stmt_vec_info stmt_info, slp_tree,\n+\t\t\t\t tree vectype, int misalign,\n+\t\t\t\t vect_cost_model_location where)\n {\n   unsigned retval = 0;\n \n@@ -5470,7 +5471,8 @@ rs6000_cost_data::adjust_vect_cost_per_loop (loop_vec_info loop_vinfo)\n \t  /* Each length needs one shift to fill into bits 0-7.  */\n \t  shift_cnt += num_vectors_m1 + 1;\n \n-      add_stmt_cost (shift_cnt, scalar_stmt, NULL, NULL_TREE, 0, vect_body);\n+      add_stmt_cost (shift_cnt, scalar_stmt, NULL, NULL,\n+\t\t     NULL_TREE, 0, vect_body);\n     }\n }\n "}, {"sha": "1f30fc82ca14822c821806bd66d9f83f0c178e8c", "filename": "gcc/tree-vect-loop.cc", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f24dfc76177b3994434c8beb287cde1a9976b5ce/gcc%2Ftree-vect-loop.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f24dfc76177b3994434c8beb287cde1a9976b5ce/gcc%2Ftree-vect-loop.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.cc?ref=f24dfc76177b3994434c8beb287cde1a9976b5ce", "patch": "@@ -3982,7 +3982,7 @@ vect_estimate_min_profitable_iters (loop_vec_info loop_vinfo,\n     {\n       /*  FIXME: Make cost depend on complexity of individual check.  */\n       (void) add_stmt_cost (target_cost_data, 1, vector_stmt,\n-\t\t\t    NULL, NULL_TREE, 0, vect_prologue);\n+\t\t\t    NULL, NULL, NULL_TREE, 0, vect_prologue);\n       if (dump_enabled_p ())\n \tdump_printf (MSG_NOTE,\n \t\t     \"cost model: Adding cost of checks for loop \"\n@@ -4079,8 +4079,8 @@ vect_estimate_min_profitable_iters (loop_vec_info loop_vinfo,\n       {\n \t(void) add_stmt_cost (target_cost_data,\n \t\t\t      si->count * peel_iters_prologue, si->kind,\n-\t\t\t      si->stmt_info, si->vectype, si->misalign,\n-\t\t\t      vect_prologue);\n+\t\t\t      si->stmt_info, si->node, si->vectype,\n+\t\t\t      si->misalign, vect_prologue);\n       }\n \n   /* Add costs associated with peel_iters_epilogue.  */\n@@ -4089,8 +4089,8 @@ vect_estimate_min_profitable_iters (loop_vec_info loop_vinfo,\n       {\n \t(void) add_stmt_cost (target_cost_data,\n \t\t\t      si->count * peel_iters_epilogue, si->kind,\n-\t\t\t      si->stmt_info, si->vectype, si->misalign,\n-\t\t\t      vect_epilogue);\n+\t\t\t      si->stmt_info, si->node, si->vectype,\n+\t\t\t      si->misalign, vect_epilogue);\n       }\n \n   /* Add possible cond_branch_taken/cond_branch_not_taken cost.  */\n@@ -4136,9 +4136,11 @@ vect_estimate_min_profitable_iters (loop_vec_info loop_vinfo,\n \t being the tie-breaker between vectorizing or not, then it's\n \t probably better not to vectorize.  */\n       (void) add_stmt_cost (target_cost_data, num_masks,\n-\t\t\t    vector_stmt, NULL, NULL_TREE, 0, vect_prologue);\n+\t\t\t    vector_stmt, NULL, NULL, NULL_TREE, 0,\n+\t\t\t    vect_prologue);\n       (void) add_stmt_cost (target_cost_data, num_masks - 1,\n-\t\t\t    vector_stmt, NULL, NULL_TREE, 0, vect_body);\n+\t\t\t    vector_stmt, NULL, NULL, NULL_TREE, 0,\n+\t\t\t    vect_body);\n     }\n   else if (LOOP_VINFO_FULLY_WITH_LENGTH_P (loop_vinfo))\n     {"}, {"sha": "9188d727e335f683d504aab4c6edddf4fb19b41b", "filename": "gcc/tree-vect-slp.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f24dfc76177b3994434c8beb287cde1a9976b5ce/gcc%2Ftree-vect-slp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f24dfc76177b3994434c8beb287cde1a9976b5ce/gcc%2Ftree-vect-slp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.cc?ref=f24dfc76177b3994434c8beb287cde1a9976b5ce", "patch": "@@ -4612,7 +4612,7 @@ vect_prologue_cost_for_slp (slp_tree node,\n \tkind = scalar_to_vec;\n       else\n \tkind = vec_construct;\n-      record_stmt_cost (cost_vec, 1, kind, NULL, vectype, 0, vect_prologue);\n+      record_stmt_cost (cost_vec, 1, kind, node, vectype, 0, vect_prologue);\n     }\n }\n \n@@ -7120,7 +7120,7 @@ vectorizable_slp_permutation (vec_info *vinfo, gimple_stmt_iterator *gsi,\n     }\n \n   if (!gsi)\n-    record_stmt_cost (cost_vec, nperms, vec_perm, NULL, vectype, 0, vect_body);\n+    record_stmt_cost (cost_vec, nperms, vec_perm, node, vectype, 0, vect_body);\n \n   return true;\n }"}, {"sha": "5c9e8cfefa5032d39a11696b06cff9ae50f4d46a", "filename": "gcc/tree-vect-stmts.cc", "status": "modified", "additions": 26, "deletions": 4, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f24dfc76177b3994434c8beb287cde1a9976b5ce/gcc%2Ftree-vect-stmts.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f24dfc76177b3994434c8beb287cde1a9976b5ce/gcc%2Ftree-vect-stmts.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.cc?ref=f24dfc76177b3994434c8beb287cde1a9976b5ce", "patch": "@@ -89,9 +89,10 @@ stmt_in_inner_loop_p (vec_info *vinfo, class _stmt_vec_info *stmt_info)\n    target model or by saving it in a vector for later processing.\n    Return a preliminary estimate of the statement's cost.  */\n \n-unsigned\n+static unsigned\n record_stmt_cost (stmt_vector_for_cost *body_cost_vec, int count,\n-\t\t  enum vect_cost_for_stmt kind, stmt_vec_info stmt_info,\n+\t\t  enum vect_cost_for_stmt kind,\n+\t\t  stmt_vec_info stmt_info, slp_tree node,\n \t\t  tree vectype, int misalign,\n \t\t  enum vect_cost_model_location where)\n {\n@@ -102,21 +103,42 @@ record_stmt_cost (stmt_vector_for_cost *body_cost_vec, int count,\n       && (stmt_info && STMT_VINFO_GATHER_SCATTER_P (stmt_info)))\n     kind = vector_scatter_store;\n \n-  stmt_info_for_cost si = { count, kind, where, stmt_info, vectype, misalign };\n+  stmt_info_for_cost si\n+    = { count, kind, where, stmt_info, node, vectype, misalign };\n   body_cost_vec->safe_push (si);\n \n   return (unsigned)\n       (builtin_vectorization_cost (kind, vectype, misalign) * count);\n }\n \n+unsigned\n+record_stmt_cost (stmt_vector_for_cost *body_cost_vec, int count,\n+\t\t  enum vect_cost_for_stmt kind, stmt_vec_info stmt_info,\n+\t\t  tree vectype, int misalign,\n+\t\t  enum vect_cost_model_location where)\n+{\n+  return record_stmt_cost (body_cost_vec, count, kind, stmt_info, NULL,\n+\t\t\t   vectype, misalign, where);\n+}\n+\n+unsigned\n+record_stmt_cost (stmt_vector_for_cost *body_cost_vec, int count,\n+\t\t  enum vect_cost_for_stmt kind, slp_tree node,\n+\t\t  tree vectype, int misalign,\n+\t\t  enum vect_cost_model_location where)\n+{\n+  return record_stmt_cost (body_cost_vec, count, kind, NULL, node,\n+\t\t\t   vectype, misalign, where);\n+}\n+\n unsigned\n record_stmt_cost (stmt_vector_for_cost *body_cost_vec, int count,\n \t\t  enum vect_cost_for_stmt kind,\n \t\t  enum vect_cost_model_location where)\n {\n   gcc_assert (kind == cond_branch_taken || kind == cond_branch_not_taken\n \t      || kind == scalar_stmt);\n-  return record_stmt_cost (body_cost_vec, count, kind, NULL,\n+  return record_stmt_cost (body_cost_vec, count, kind, NULL, NULL,\n \t\t\t   NULL_TREE, 0, where);\n }\n "}, {"sha": "a63fa391273923c351c78d65e0e1fed6030fb510", "filename": "gcc/tree-vectorizer.cc", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f24dfc76177b3994434c8beb287cde1a9976b5ce/gcc%2Ftree-vectorizer.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f24dfc76177b3994434c8beb287cde1a9976b5ce/gcc%2Ftree-vectorizer.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.cc?ref=f24dfc76177b3994434c8beb287cde1a9976b5ce", "patch": "@@ -99,14 +99,17 @@ auto_purge_vect_location::~auto_purge_vect_location ()\n \n void\n dump_stmt_cost (FILE *f, int count, enum vect_cost_for_stmt kind,\n-\t\tstmt_vec_info stmt_info, tree, int misalign, unsigned cost,\n+\t\tstmt_vec_info stmt_info, slp_tree node, tree,\n+\t\tint misalign, unsigned cost,\n \t\tenum vect_cost_model_location where)\n {\n   if (stmt_info)\n     {\n       print_gimple_expr (f, STMT_VINFO_STMT (stmt_info), 0, TDF_SLIM);\n       fprintf (f, \" \");\n     }\n+  else if (node)\n+    fprintf (f, \"node %p \", (void *)node);\n   else\n     fprintf (f, \"<unknown> \");\n   fprintf (f, \"%d times \", count);\n@@ -1766,8 +1769,9 @@ scalar_cond_masked_key::get_cond_ops_from_tree (tree t)\n \n unsigned int\n vector_costs::add_stmt_cost (int count, vect_cost_for_stmt kind,\n-\t\t\t     stmt_vec_info stmt_info, tree vectype,\n-\t\t\t     int misalign, vect_cost_model_location where)\n+\t\t\t     stmt_vec_info stmt_info, slp_tree,\n+\t\t\t     tree vectype, int misalign,\n+\t\t\t     vect_cost_model_location where)\n {\n   unsigned int cost\n     = builtin_vectorization_cost (kind, vectype, misalign) * count;"}, {"sha": "642eb0aeb21264cd736a479b1ec25357abef29cd", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f24dfc76177b3994434c8beb287cde1a9976b5ce/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f24dfc76177b3994434c8beb287cde1a9976b5ce/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=f24dfc76177b3994434c8beb287cde1a9976b5ce", "patch": "@@ -22,6 +22,7 @@ along with GCC; see the file COPYING3.  If not see\n #define GCC_TREE_VECTORIZER_H\n \n typedef class _stmt_vec_info *stmt_vec_info;\n+typedef struct _slp_tree *slp_tree;\n \n #include \"tree-data-ref.h\"\n #include \"tree-hash-traits.h\"\n@@ -101,6 +102,7 @@ struct stmt_info_for_cost {\n   enum vect_cost_for_stmt kind;\n   enum vect_cost_model_location where;\n   stmt_vec_info stmt_info;\n+  slp_tree node;\n   tree vectype;\n   int misalign;\n };\n@@ -151,7 +153,6 @@ struct vect_scalar_ops_slice_hash : typed_noop_remove<vect_scalar_ops_slice>\n /************************************************************************\n   SLP\n  ************************************************************************/\n-typedef struct _slp_tree *slp_tree;\n typedef vec<std::pair<unsigned, unsigned> > lane_permutation_t;\n typedef vec<unsigned> load_permutation_t;\n \n@@ -1462,7 +1463,7 @@ class vector_costs\n      - WHERE specifies whether the cost occurs in the loop prologue,\n        the loop body, or the loop epilogue.\n      - KIND is the kind of statement, which is always meaningful.\n-     - STMT_INFO, if nonnull, describes the statement that will be\n+     - STMT_INFO or NODE, if nonnull, describe the statement that will be\n        vectorized.\n      - VECTYPE, if nonnull, is the vector type that the vectorized\n        statement will operate on.  Note that this should be used in\n@@ -1476,8 +1477,9 @@ class vector_costs\n      Return the calculated cost as well as recording it.  The return\n      value is used for dumping purposes.  */\n   virtual unsigned int add_stmt_cost (int count, vect_cost_for_stmt kind,\n-\t\t\t\t      stmt_vec_info stmt_info, tree vectype,\n-\t\t\t\t      int misalign,\n+\t\t\t\t      stmt_vec_info stmt_info,\n+\t\t\t\t      slp_tree node,\n+\t\t\t\t      tree vectype, int misalign,\n \t\t\t\t      vect_cost_model_location where);\n \n   /* Finish calculating the cost of the code.  The results can be\n@@ -1743,21 +1745,22 @@ init_cost (vec_info *vinfo, bool costing_for_scalar)\n }\n \n extern void dump_stmt_cost (FILE *, int, enum vect_cost_for_stmt,\n-\t\t\t    stmt_vec_info, tree, int, unsigned,\n+\t\t\t    stmt_vec_info, slp_tree, tree, int, unsigned,\n \t\t\t    enum vect_cost_model_location);\n \n /* Alias targetm.vectorize.add_stmt_cost.  */\n \n static inline unsigned\n add_stmt_cost (vector_costs *costs, int count,\n \t       enum vect_cost_for_stmt kind,\n-\t       stmt_vec_info stmt_info, tree vectype, int misalign,\n+\t       stmt_vec_info stmt_info, slp_tree node,\n+\t       tree vectype, int misalign,\n \t       enum vect_cost_model_location where)\n {\n-  unsigned cost = costs->add_stmt_cost (count, kind, stmt_info, vectype,\n+  unsigned cost = costs->add_stmt_cost (count, kind, stmt_info, node, vectype,\n \t\t\t\t\tmisalign, where);\n   if (dump_file && (dump_flags & TDF_DETAILS))\n-    dump_stmt_cost (dump_file, count, kind, stmt_info, vectype, misalign,\n+    dump_stmt_cost (dump_file, count, kind, stmt_info, node, vectype, misalign,\n \t\t    cost, where);\n   return cost;\n }\n@@ -1768,15 +1771,15 @@ add_stmt_cost (vector_costs *costs, int count, enum vect_cost_for_stmt kind,\n {\n   gcc_assert (kind == cond_branch_taken || kind == cond_branch_not_taken\n \t      || kind == scalar_stmt);\n-  return add_stmt_cost (costs, count, kind, NULL, NULL_TREE, 0, where);\n+  return add_stmt_cost (costs, count, kind, NULL, NULL, NULL_TREE, 0, where);\n }\n \n /* Alias targetm.vectorize.add_stmt_cost.  */\n \n static inline unsigned\n add_stmt_cost (vector_costs *costs, stmt_info_for_cost *i)\n {\n-  return add_stmt_cost (costs, i->count, i->kind, i->stmt_info,\n+  return add_stmt_cost (costs, i->count, i->kind, i->stmt_info, i->node,\n \t\t\ti->vectype, i->misalign, i->where);\n }\n \n@@ -1802,7 +1805,7 @@ add_stmt_costs (vector_costs *costs, stmt_vector_for_cost *cost_vec)\n   unsigned i;\n   FOR_EACH_VEC_ELT (*cost_vec, i, cost)\n     add_stmt_cost (costs, cost->count, cost->kind, cost->stmt_info,\n-\t\t   cost->vectype, cost->misalign, cost->where);\n+\t\t   cost->node, cost->vectype, cost->misalign, cost->where);\n }\n \n /*-----------------------------------------------------------------*/\n@@ -2129,6 +2132,9 @@ extern bool supportable_narrowing_operation (enum tree_code, tree, tree,\n extern unsigned record_stmt_cost (stmt_vector_for_cost *, int,\n \t\t\t\t  enum vect_cost_for_stmt, stmt_vec_info,\n \t\t\t\t  tree, int, enum vect_cost_model_location);\n+extern unsigned record_stmt_cost (stmt_vector_for_cost *, int,\n+\t\t\t\t  enum vect_cost_for_stmt, slp_tree,\n+\t\t\t\t  tree, int, enum vect_cost_model_location);\n extern unsigned record_stmt_cost (stmt_vector_for_cost *, int,\n \t\t\t\t  enum vect_cost_for_stmt,\n \t\t\t\t  enum vect_cost_model_location);"}]}