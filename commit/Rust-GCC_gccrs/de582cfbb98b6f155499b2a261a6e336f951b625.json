{"sha": "de582cfbb98b6f155499b2a261a6e336f951b625", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGU1ODJjZmJiOThiNmYxNTU0OTliMmEyNjFhNmUzMzZmOTUxYjYyNQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2003-09-22T06:59:51Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2003-09-22T06:59:51Z"}, "message": "re PR target/9786 (Ice in fixup_abnormal_edges with -fnon-call-exceptions -O2)\n\n\tPR target/9786\n\t* reg-stack.c (convert_regs_1): Purge possible dead eh edges\n\tafter potential deletion of trapping insn. Avoids later ICE\n\tfrom call to fixup_abnormal_edges.\n\t(convert_regs_2): Stack the current block successors before\n\tprocessing this block, that is, before the potential deletion of\n\tdead edges by convert_regs_1, because these edges have been used\n\tto initialize the predecessors count.\n\nFrom-SVN: r71644", "tree": {"sha": "617ef40caca7262bca17e44852b596b9b9383ef0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/617ef40caca7262bca17e44852b596b9b9383ef0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de582cfbb98b6f155499b2a261a6e336f951b625", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de582cfbb98b6f155499b2a261a6e336f951b625", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de582cfbb98b6f155499b2a261a6e336f951b625", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de582cfbb98b6f155499b2a261a6e336f951b625/comments", "author": null, "committer": null, "parents": [{"sha": "316b38c83c3e81c1d3c1b68cba91b2b77051f2fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/316b38c83c3e81c1d3c1b68cba91b2b77051f2fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/316b38c83c3e81c1d3c1b68cba91b2b77051f2fd"}], "stats": {"total": 83, "additions": 80, "deletions": 3}, "files": [{"sha": "b66b5e43e19957bf3cdb1322512ad3b5194cc13f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de582cfbb98b6f155499b2a261a6e336f951b625/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de582cfbb98b6f155499b2a261a6e336f951b625/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=de582cfbb98b6f155499b2a261a6e336f951b625", "patch": "@@ -1,3 +1,14 @@\n+2003-09-22  Olivier Hainque  <hainque@act-europe.fr>\n+\n+\tPR target/9786\n+\t* reg-stack.c (convert_regs_1): Purge possible dead eh edges\n+\tafter potential deletion of trapping insn. Avoids later ICE\n+\tfrom call to fixup_abnormal_edges.\n+\t(convert_regs_2): Stack the current block successors before\n+\tprocessing this block, that is, before the potential deletion of\n+\tdead edges by convert_regs_1, because these edges have been used\n+\tto initialize the predecessors count.\n+\n 2003-09-22  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \t* real.c: Fix several nits in the head comment."}, {"sha": "f432cf1b54d273a86e95455aeee7df4ae3622a3a", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 31, "deletions": 3, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de582cfbb98b6f155499b2a261a6e336f951b625/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de582cfbb98b6f155499b2a261a6e336f951b625/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=de582cfbb98b6f155499b2a261a6e336f951b625", "patch": "@@ -2638,11 +2638,12 @@ convert_regs_1 (FILE *file, basic_block block)\n {\n   struct stack_def regstack;\n   block_info bi = BLOCK_INFO (block);\n-  int inserted, reg;\n+  int deleted, inserted, reg;\n   rtx insn, next;\n   edge e, beste = NULL;\n \n   inserted = 0;\n+  deleted = 0;\n   any_malformed_asm = false;\n \n   /* Find the edge we will copy stack from.  It should be the most frequent\n@@ -2715,6 +2716,7 @@ convert_regs_1 (FILE *file, basic_block block)\n \t      print_stack (file, &regstack);\n \t    }\n \t  subst_stack_regs (insn, &regstack);\n+\t  deleted |= (GET_CODE (insn) == NOTE || INSN_DELETED_P (insn));\n \t}\n     }\n   while (next);\n@@ -2754,8 +2756,23 @@ convert_regs_1 (FILE *file, basic_block block)\n \t\t\t     nan);\n \t  insn = emit_insn_after (set, insn);\n \t  subst_stack_regs (insn, &regstack);\n+\t  deleted |= (GET_CODE (insn) == NOTE || INSN_DELETED_P (insn));\n \t}\n     }\n+  \n+  /* Amongst the insns possibly deleted during the substitution process above,\n+     might have been the only trapping insn in the block.  We purge the now\n+     possibly dead EH edges here to avoid an ICE from fixup_abnormal_edges,\n+     called at the end of convert_regs.  The order in which we process the\n+     blocks ensures that we never delete an already processed edge.\n+\n+     ??? We are normally supposed not to delete trapping insns, so we pretend\n+     that the insns deleted above don't actually trap.  It would have been\n+     better to detect this earlier and avoid creating the EH edge in the first\n+     place, still, but we don't have enough information at that time.  */\n+\n+  if (deleted)\n+    purge_dead_edges (block);\n \n   /* Something failed if the stack lives don't match.  If we had malformed\n      asms, we zapped the instruction itself, but that didn't produce the\n@@ -2800,6 +2817,10 @@ convert_regs_2 (FILE *file, basic_block block)\n   basic_block *stack, *sp;\n   int inserted;\n \n+  /* We process the blocks in a top-down manner, in a way such that one block\n+     is only processed after all its predecessors.  The number of predecessors\n+     of every block has already been computed.  */ \n+\n   stack = xmalloc (sizeof (*stack) * n_basic_blocks);\n   sp = stack;\n \n@@ -2811,16 +2832,23 @@ convert_regs_2 (FILE *file, basic_block block)\n       edge e;\n \n       block = *--sp;\n-      inserted |= convert_regs_1 (file, block);\n-      BLOCK_INFO (block)->done = 1;\n \n+      /* Processing \"block\" is achieved by convert_regs_1, which may purge\n+\t some dead EH outgoing edge after the possible deletion of the\n+\t trapping insn inside the block.  Since the number of predecessors of\n+\t \"block\"'s successors has been computed based on the initial edge set,\n+\t we check for the possiblity to process some of these successors\n+\t before such an edge deletion may happen.  */\n       for (e = block->succ; e ; e = e->succ_next)\n \tif (! (e->flags & EDGE_DFS_BACK))\n \t  {\n \t    BLOCK_INFO (e->dest)->predecessors--;\n \t    if (!BLOCK_INFO (e->dest)->predecessors)\n \t       *sp++ = e->dest;\n \t  }\n+\n+      inserted |= convert_regs_1 (file, block);\n+      BLOCK_INFO (block)->done = 1;\n     }\n   while (sp != stack);\n "}, {"sha": "5c9c984ed4560af3063fda86b4f691eaaa37511b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de582cfbb98b6f155499b2a261a6e336f951b625/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de582cfbb98b6f155499b2a261a6e336f951b625/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=de582cfbb98b6f155499b2a261a6e336f951b625", "patch": "@@ -1,3 +1,7 @@\n+2003-09-22  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\t* g++.dg/opt/reg-stack2.C: New test.\n+\n 2003-09-21  Christian Ehrhardt  <ehrhardt@mathematik.uni-ulm.de>\n \n \t* g++.dg/eh/delayslot1.C: New test."}, {"sha": "08cd590b47169793e32c293f2022fcfb378bbe76", "filename": "gcc/testsuite/g++.dg/opt/reg-stack2.C", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de582cfbb98b6f155499b2a261a6e336f951b625/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Freg-stack2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de582cfbb98b6f155499b2a261a6e336f951b625/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Freg-stack2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Freg-stack2.C?ref=de582cfbb98b6f155499b2a261a6e336f951b625", "patch": "@@ -0,0 +1,34 @@\n+// PR target/9786\n+// Origin: <nick@ilm.com>\n+\n+// This used to fail on x86 because the reg-stack pass deleted\n+// an insn that could seemingly trap (but actually doesn't)\n+// without updating the CFG.\n+\n+// { dg-do compile }\n+// { dg-options \"-O2 -fnon-call-exceptions\" }\n+\n+struct D1 {\n+    float l;\n+    D1 GS() const {D1 d;float f=.299*l;d.l=f;return d;}\n+    static D1 G() {return D1();}\n+};\n+\n+struct D2 {\n+    D1 g;\n+    D2(const D1& gi) : g(gi) {}\n+    D2 GS() const {return D2(g.GS());}\n+};\n+\n+class A {\n+  public:\n+    virtual ~A() {}\n+};\n+\n+class B : public A {\n+  public:\n+    B(const D2& mi);\n+    D2 fm;\n+};\n+\n+B::B(const D2 &mi) : fm(mi.GS()) {}"}]}