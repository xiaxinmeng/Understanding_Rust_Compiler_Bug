{"sha": "13c906f43f473ee9ff16d80590789d719f2190a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTNjOTA2ZjQzZjQ3M2VlOWZmMTZkODA1OTA3ODlkNzE5ZjIxOTBhNA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2021-06-29T19:53:02Z"}, "committer": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2021-06-29T20:44:37Z"}, "message": "compiler: don't generate temporaries for composite literals\n\nWe were generating temporaries for composite literals when a\nconversion to interface type was required.  However, Cherry's\nhttps://golang.org/cl/176459 changed the compiler to insert explicit\ntype conversions.  And those explicit type conversions insert the\nrequired temporaries in Type_conversion_expression::do_flatten.\nSo in practice the composite literal do_flatten methods would never\ninsert temporaries, as the values they see would always be multi_eval_safe.\nSo just remove the unnecessary do_flatten methods.\n\nReviewed-on: https://go-review.googlesource.com/c/gofrontend/+/331691", "tree": {"sha": "1ace75a3584762f6a3768dbf27b6e02d0df80279", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ace75a3584762f6a3768dbf27b6e02d0df80279"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/13c906f43f473ee9ff16d80590789d719f2190a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13c906f43f473ee9ff16d80590789d719f2190a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13c906f43f473ee9ff16d80590789d719f2190a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13c906f43f473ee9ff16d80590789d719f2190a4/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cca7eb8f7cc157ed1b351cbaa10a4066f8065c3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cca7eb8f7cc157ed1b351cbaa10a4066f8065c3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cca7eb8f7cc157ed1b351cbaa10a4066f8065c3a"}], "stats": {"total": 111, "additions": 7, "deletions": 104}, "files": [{"sha": "ab1384d698bda39bbe0e3d2a5f1201937fb41e45", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13c906f43f473ee9ff16d80590789d719f2190a4/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13c906f43f473ee9ff16d80590789d719f2190a4/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=13c906f43f473ee9ff16d80590789d719f2190a4", "patch": "@@ -1,4 +1,4 @@\n-cad187fe3aceb2a7d964b64c70dfa8c8ad24ce65\n+01cb2b5e69a2d08ef3cc1ea023c22ed9b79f5114\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "a0472acc2096001d9834802711a50eafe97fe691", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 6, "deletions": 97, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13c906f43f473ee9ff16d80590789d719f2190a4/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13c906f43f473ee9ff16d80590789d719f2190a4/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=13c906f43f473ee9ff16d80590789d719f2190a4", "patch": "@@ -15147,48 +15147,6 @@ Struct_construction_expression::do_copy()\n   return ret;\n }\n \n-// Flatten a struct construction expression.  Store the values into\n-// temporaries if they may need interface conversion.\n-\n-Expression*\n-Struct_construction_expression::do_flatten(Gogo*, Named_object*,\n-\t\t\t\t\t   Statement_inserter* inserter)\n-{\n-  if (this->vals() == NULL)\n-    return this;\n-\n-  // If this is a constant struct, we don't need temporaries.\n-  if (this->is_constant_struct() || this->is_static_initializer())\n-    return this;\n-\n-  Location loc = this->location();\n-  const Struct_field_list* fields = this->type_->struct_type()->fields();\n-  Struct_field_list::const_iterator pf = fields->begin();\n-  for (Expression_list::iterator pv = this->vals()->begin();\n-       pv != this->vals()->end();\n-       ++pv, ++pf)\n-    {\n-      go_assert(pf != fields->end());\n-      if (*pv != NULL)\n-\t{\n-          if ((*pv)->is_error_expression() || (*pv)->type()->is_error_type())\n-            {\n-              go_assert(saw_errors());\n-              return Expression::make_error(loc);\n-            }\n-\t  if (pf->type()->interface_type() != NULL\n-\t      && !(*pv)->is_multi_eval_safe())\n-\t    {\n-\t      Temporary_statement* temp =\n-\t\tStatement::make_temporary(NULL, *pv, loc);\n-\t      inserter->insert(temp);\n-\t      *pv = Expression::make_temporary_reference(temp, loc);\n-\t    }\n-\t}\n-    }\n-  return this;\n-}\n-\n // Make implicit type conversions explicit.\n \n void\n@@ -15451,55 +15409,6 @@ Array_construction_expression::do_check_types(Gogo*)\n     }\n }\n \n-// Flatten an array construction expression.  Store the values into\n-// temporaries if they may need interface conversion.\n-\n-Expression*\n-Array_construction_expression::do_flatten(Gogo*, Named_object*,\n-\t\t\t\t\t   Statement_inserter* inserter)\n-{\n-  if (this->is_error_expression())\n-    {\n-      go_assert(saw_errors());\n-      return this;\n-    }\n-\n-  if (this->vals() == NULL)\n-    return this;\n-\n-  // If this is a constant array, we don't need temporaries.\n-  if (this->is_constant_array() || this->is_static_initializer())\n-    return this;\n-\n-  // If the array element type is not an interface type, we don't need\n-  // temporaries.\n-  if (this->type_->array_type()->element_type()->interface_type() == NULL)\n-    return this;\n-\n-  Location loc = this->location();\n-  for (Expression_list::iterator pv = this->vals()->begin();\n-       pv != this->vals()->end();\n-       ++pv)\n-    {\n-      if (*pv != NULL)\n-\t{\n-          if ((*pv)->is_error_expression() || (*pv)->type()->is_error_type())\n-            {\n-              go_assert(saw_errors());\n-              return Expression::make_error(loc);\n-            }\n-\t  if (!(*pv)->is_multi_eval_safe())\n-\t    {\n-\t      Temporary_statement* temp =\n-\t\tStatement::make_temporary(NULL, *pv, loc);\n-\t      inserter->insert(temp);\n-\t      *pv = Expression::make_temporary_reference(temp, loc);\n-\t    }\n-\t}\n-    }\n-  return this;\n-}\n-\n // Make implicit type conversions explicit.\n \n void\n@@ -15768,14 +15677,14 @@ Slice_construction_expression::create_array_val()\n // the new temp statement.\n \n Expression*\n-Slice_construction_expression::do_flatten(Gogo* gogo, Named_object* no,\n+Slice_construction_expression::do_flatten(Gogo*, Named_object*,\n                                           Statement_inserter* inserter)\n {\n   if (this->type()->array_type() == NULL)\n-    return NULL;\n-\n-  // Base class flattening first\n-  this->Array_construction_expression::do_flatten(gogo, no, inserter);\n+    {\n+      go_assert(saw_errors());\n+      return Expression::make_error(this->location());\n+    }\n \n   // Create a stack-allocated storage temp if storage won't escape\n   if (!this->storage_escapes_\n@@ -15784,7 +15693,7 @@ Slice_construction_expression::do_flatten(Gogo* gogo, Named_object* no,\n     {\n       Location loc = this->location();\n       this->array_val_ = this->create_array_val();\n-      go_assert(this->array_val_);\n+      go_assert(this->array_val_ != NULL);\n       Temporary_statement* temp =\n           Statement::make_temporary(this->valtype_, this->array_val_, loc);\n       inserter->insert(temp);"}, {"sha": "57c974d3c70b75c102d92fa30340076ed418c87e", "filename": "gcc/go/gofrontend/expressions.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13c906f43f473ee9ff16d80590789d719f2190a4/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13c906f43f473ee9ff16d80590789d719f2190a4/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.h?ref=13c906f43f473ee9ff16d80590789d719f2190a4", "patch": "@@ -3806,9 +3806,6 @@ class Struct_construction_expression : public Expression,\n   Expression*\n   do_copy();\n \n-  Expression*\n-  do_flatten(Gogo*, Named_object*, Statement_inserter*);\n-\n   Bexpression*\n   do_get_backend(Translate_context*);\n \n@@ -3881,9 +3878,6 @@ class Array_construction_expression : public Expression,\n   indexes()\n   { return this->indexes_; }\n \n-  Expression*\n-  do_flatten(Gogo*, Named_object*, Statement_inserter*);\n-\n   // Get the backend constructor for the array values.\n   Bexpression*\n   get_constructor(Translate_context* context, Btype* btype);"}]}