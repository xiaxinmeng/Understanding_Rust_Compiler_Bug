{"sha": "e5a3f08fb899af4efef8d273d9aea556406ebd27", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTVhM2YwOGZiODk5YWY0ZWZlZjhkMjczZDlhZWE1NTY0MDZlYmQyNw==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2018-08-24T18:37:51Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2018-08-24T18:37:51Z"}, "message": "gimple-ssa-evrp-analyze.c (set_ssa_range_info): Pass value_range to range_includes_zero_p.\n\n\t* gimple-ssa-evrp-analyze.c (set_ssa_range_info): Pass value_range\n\tto range_includes_zero_p.  Do not special case VR_ANTI_RANGE.\n\t* tree-vrp.c (range_is_nonnull): Remove.\n\t(range_includes_zero_p): Accept value_range instead of min/max.\n\t(extract_range_from_binary_expr_1): Do not early bail on\n\tPOINTER_PLUS_EXPR.\n\tUse range_includes_zero_p instead of range_is_nonnull.\n\t(extract_range_from_unary_expr): Use range_includes_zero_p instead\n\tof range_is_nonnull.\n\t(vrp_meet_1): Pass value_range to range_includes_zero_p.  Do not\n\tspecial case VR_ANTI_RANGE.\n\t(vrp_finalize): Same.\n\t* tree-vrp.h (range_includes_zero_p): Pass value_range as argument\n\tinstead of min/max.\n\t(range_is_nonnull): Remove.\n\t* vr-values.c (vrp_stmt_computes_nonzero): Use\n\trange_includes_zero_p instead of range_is_nonnull.\n\t(extract_range_basic): Pass value_range to range_includes_zero_p\n\tinstead of range_is_nonnull.\n\nFrom-SVN: r263842", "tree": {"sha": "8768c6a701523800f7f223a2cf000c2f9be31b3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8768c6a701523800f7f223a2cf000c2f9be31b3d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e5a3f08fb899af4efef8d273d9aea556406ebd27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5a3f08fb899af4efef8d273d9aea556406ebd27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5a3f08fb899af4efef8d273d9aea556406ebd27", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5a3f08fb899af4efef8d273d9aea556406ebd27/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6eac0600c4305074b28c96d17f75ed0de5016f5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6eac0600c4305074b28c96d17f75ed0de5016f5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6eac0600c4305074b28c96d17f75ed0de5016f5b"}], "stats": {"total": 108, "additions": 53, "deletions": 55}, "files": [{"sha": "fd7e95f9af85d757e995f9b59cf42d73f58f6da0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5a3f08fb899af4efef8d273d9aea556406ebd27/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5a3f08fb899af4efef8d273d9aea556406ebd27/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e5a3f08fb899af4efef8d273d9aea556406ebd27", "patch": "@@ -1,3 +1,25 @@\n+2018-08-24  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gimple-ssa-evrp-analyze.c (set_ssa_range_info): Pass value_range\n+\tto range_includes_zero_p.  Do not special case VR_ANTI_RANGE.\n+\t* tree-vrp.c (range_is_nonnull): Remove.\n+\t(range_includes_zero_p): Accept value_range instead of min/max.\n+\t(extract_range_from_binary_expr_1): Do not early bail on\n+\tPOINTER_PLUS_EXPR.\n+\tUse range_includes_zero_p instead of range_is_nonnull.\n+\t(extract_range_from_unary_expr): Use range_includes_zero_p instead\n+\tof range_is_nonnull.\n+\t(vrp_meet_1): Pass value_range to range_includes_zero_p.  Do not\n+\tspecial case VR_ANTI_RANGE.\n+\t(vrp_finalize): Same.\n+\t* tree-vrp.h (range_includes_zero_p): Pass value_range as argument\n+\tinstead of min/max.\n+\t(range_is_nonnull): Remove.\n+\t* vr-values.c (vrp_stmt_computes_nonzero): Use\n+\trange_includes_zero_p instead of range_is_nonnull.\n+\t(extract_range_basic): Pass value_range to range_includes_zero_p\n+\tinstead of range_is_nonnull.\n+\n 2018-08-24  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* emit-rtl.c (init_emit_once): Do not emit MODE_POINTER_BOUNDS RTXes."}, {"sha": "e9afa80e1914d5f9c9b114d7c24c4e854792c0d9", "filename": "gcc/gimple-ssa-evrp-analyze.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5a3f08fb899af4efef8d273d9aea556406ebd27/gcc%2Fgimple-ssa-evrp-analyze.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5a3f08fb899af4efef8d273d9aea556406ebd27/gcc%2Fgimple-ssa-evrp-analyze.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-evrp-analyze.c?ref=e5a3f08fb899af4efef8d273d9aea556406ebd27", "patch": "@@ -119,12 +119,7 @@ evrp_range_analyzer::set_ssa_range_info (tree lhs, value_range *vr)\n \t\t\twi::to_wide (vr->max));\n     }\n   else if (POINTER_TYPE_P (TREE_TYPE (lhs))\n-\t   && ((vr->type == VR_RANGE\n-\t\t&& range_includes_zero_p (vr->min,\n-\t\t\t\t\t  vr->max) == 0)\n-\t       || (vr->type == VR_ANTI_RANGE\n-\t\t   && range_includes_zero_p (vr->min,\n-\t\t\t\t\t     vr->max) == 1)))\n+\t   && range_includes_zero_p (vr) == 0)\n     set_ptr_nonnull (lhs);\n }\n "}, {"sha": "f20730a85badf4b6963ce2f7fa91b0b4c7691107", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 26, "deletions": 40, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5a3f08fb899af4efef8d273d9aea556406ebd27/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5a3f08fb899af4efef8d273d9aea556406ebd27/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=e5a3f08fb899af4efef8d273d9aea556406ebd27", "patch": "@@ -502,17 +502,6 @@ vrp_bitmap_equal_p (const_bitmap b1, const_bitmap b2)\n \t      && bitmap_equal_p (b1, b2)));\n }\n \n-/* Return true if VR is ~[0, 0].  */\n-\n-bool\n-range_is_nonnull (value_range *vr)\n-{\n-  return vr->type == VR_ANTI_RANGE\n-\t && integer_zerop (vr->min)\n-\t && integer_zerop (vr->max);\n-}\n-\n-\n /* Return true if VR is [0, 0].  */\n \n static inline bool\n@@ -880,14 +869,25 @@ value_ranges_intersect_p (value_range *vr0, value_range *vr1)\n }\n \n \n-/* Return 1 if [MIN, MAX] includes the value zero, 0 if it does not\n-   include the value zero, -2 if we cannot tell.  */\n+/* Return TRUE if *VR includes the value zero.  */\n \n-int\n-range_includes_zero_p (tree min, tree max)\n+bool\n+range_includes_zero_p (const value_range *vr)\n {\n-  tree zero = build_int_cst (TREE_TYPE (min), 0);\n-  return value_inside_range (zero, min, max);\n+  if (vr->type == VR_VARYING)\n+    return true;\n+\n+  /* Ughh, we don't know.  We choose not to optimize.  */\n+  if (vr->type == VR_UNDEFINED)\n+    return true;\n+\n+  tree zero = build_int_cst (TREE_TYPE (vr->min), 0);\n+  if (vr->type == VR_ANTI_RANGE)\n+    {\n+      int res = value_inside_range (zero, vr->min, vr->max);\n+      return res == 0 || res == -2;\n+    }\n+  return value_inside_range (zero, vr->min, vr->max) != 0;\n }\n \n /* Return true if *VR is know to only contain nonnegative values.  */\n@@ -1424,7 +1424,7 @@ extract_range_from_binary_expr_1 (value_range *vr,\n \t     nullness, if both are non null, then the result is nonnull.\n \t     If both are null, then the result is null. Otherwise they\n \t     are varying.  */\n-\t  if (range_is_nonnull (&vr0) && range_is_nonnull (&vr1))\n+\t  if (!range_includes_zero_p (&vr0) && !range_includes_zero_p (&vr1))\n \t    set_value_range_to_nonnull (vr, expr_type);\n \t  else if (range_is_null (&vr0) && range_is_null (&vr1))\n \t    set_value_range_to_null (vr, expr_type);\n@@ -1435,11 +1435,8 @@ extract_range_from_binary_expr_1 (value_range *vr,\n \t{\n \t  /* For pointer types, we are really only interested in asserting\n \t     whether the expression evaluates to non-NULL.  */\n-\t  if (range_is_nonnull (&vr0)\n-\t      || range_is_nonnull (&vr1)\n-\t      || (vr1.type == VR_RANGE\n-\t\t  && !symbolic_range_p (&vr1)\n-\t\t  && !range_includes_zero_p (vr1.min, vr1.max)))\n+\t  if (!range_includes_zero_p (&vr0)\n+\t      || !range_includes_zero_p (&vr1))\n \t    set_value_range_to_nonnull (vr, expr_type);\n \t  else if (range_is_null (&vr0) && range_is_null (&vr1))\n \t    set_value_range_to_null (vr, expr_type);\n@@ -1450,7 +1447,7 @@ extract_range_from_binary_expr_1 (value_range *vr,\n \t{\n \t  /* For pointer types, we are really only interested in asserting\n \t     whether the expression evaluates to non-NULL.  */\n-\t  if (range_is_nonnull (&vr0) && range_is_nonnull (&vr1))\n+\t  if (!range_includes_zero_p (&vr0) && !range_includes_zero_p (&vr1))\n \t    set_value_range_to_nonnull (vr, expr_type);\n \t  else if (range_is_null (&vr0) || range_is_null (&vr1))\n \t    set_value_range_to_null (vr, expr_type);\n@@ -1888,7 +1885,7 @@ extract_range_from_unary_expr (value_range *vr,\n \t determining if it evaluates to NULL [0, 0] or non-NULL (~[0, 0]).  */\n       if (POINTER_TYPE_P (type))\n \t{\n-\t  if (range_is_nonnull (&vr0))\n+\t  if (!range_includes_zero_p (&vr0))\n \t    set_value_range_to_nonnull (vr, type);\n \t  else if (range_is_null (&vr0))\n \t    set_value_range_to_null (vr, type);\n@@ -6020,17 +6017,9 @@ vrp_meet_1 (value_range *vr0, const value_range *vr1)\n     {\n       /* Failed to find an efficient meet.  Before giving up and setting\n \t the result to VARYING, see if we can at least derive a useful\n-\t anti-range.  FIXME, all this nonsense about distinguishing\n-\t anti-ranges from ranges is necessary because of the odd\n-\t semantics of range_includes_zero_p and friends.  */\n-      if (((saved.type == VR_RANGE\n-\t    && range_includes_zero_p (saved.min, saved.max) == 0)\n-\t   || (saved.type == VR_ANTI_RANGE\n-\t       && range_includes_zero_p (saved.min, saved.max) == 1))\n-\t  && ((vr1->type == VR_RANGE\n-\t       && range_includes_zero_p (vr1->min, vr1->max) == 0)\n-\t      || (vr1->type == VR_ANTI_RANGE\n-\t\t  && range_includes_zero_p (vr1->min, vr1->max) == 1)))\n+\t anti-range.  */\n+      if (range_includes_zero_p (&saved) == 0\n+\t  && range_includes_zero_p (vr1) == 0)\n \t{\n \t  set_value_range_to_nonnull (vr0, TREE_TYPE (saved.min));\n \n@@ -6540,10 +6529,7 @@ vrp_prop::vrp_finalize (bool warn_array_bounds_p)\n \tcontinue;\n \n       if (POINTER_TYPE_P (TREE_TYPE (name))\n-\t  && ((vr->type == VR_RANGE\n-\t       && range_includes_zero_p (vr->min, vr->max) == 0)\n-\t      || (vr->type == VR_ANTI_RANGE\n-\t\t  && range_includes_zero_p (vr->min, vr->max) == 1)))\n+\t  && range_includes_zero_p (vr) == 0)\n \tset_ptr_nonnull (name);\n       else if (!POINTER_TYPE_P (TREE_TYPE (name)))\n \tset_range_info (name, vr->type,"}, {"sha": "f8c1c0c8f72234d2d16a506f33d768b1c73cefe0", "filename": "gcc/tree-vrp.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5a3f08fb899af4efef8d273d9aea556406ebd27/gcc%2Ftree-vrp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5a3f08fb899af4efef8d273d9aea556406ebd27/gcc%2Ftree-vrp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.h?ref=e5a3f08fb899af4efef8d273d9aea556406ebd27", "patch": "@@ -86,7 +86,7 @@ extern void register_edge_assert_for (tree, edge, enum tree_code,\n \t\t\t\t      tree, tree, vec<assert_info> &);\n extern bool stmt_interesting_for_vrp (gimple *);\n extern void set_value_range_to_varying (value_range *);\n-extern int range_includes_zero_p (tree, tree);\n+extern bool range_includes_zero_p (const value_range *);\n extern bool infer_value_range (gimple *, tree, tree_code *, tree *);\n \n extern void set_value_range_to_nonnull (value_range *, tree);\n@@ -96,7 +96,6 @@ extern void set_and_canonicalize_value_range (value_range *,\n \t\t\t\t\t      enum value_range_type,\n \t\t\t\t\t      tree, tree, bitmap);\n extern bool vrp_bitmap_equal_p (const_bitmap, const_bitmap);\n-extern bool range_is_nonnull (value_range *);\n extern tree value_range_constant_singleton (value_range *);\n extern bool symbolic_range_p (value_range *);\n extern int compare_values (tree, tree);"}, {"sha": "072d9a7b4548c53878782c4d886fc2a1ff693f8a", "filename": "gcc/vr-values.c", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5a3f08fb899af4efef8d273d9aea556406ebd27/gcc%2Fvr-values.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5a3f08fb899af4efef8d273d9aea556406ebd27/gcc%2Fvr-values.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvr-values.c?ref=e5a3f08fb899af4efef8d273d9aea556406ebd27", "patch": "@@ -343,7 +343,7 @@ vr_values::vrp_stmt_computes_nonzero (gimple *stmt)\n \t  && TREE_CODE (TREE_OPERAND (base, 0)) == SSA_NAME)\n \t{\n \t  value_range *vr = get_value_range (TREE_OPERAND (base, 0));\n-\t  if (range_is_nonnull (vr))\n+\t  if (!range_includes_zero_p (vr))\n \t    return true;\n \t}\n     }\n@@ -1107,12 +1107,8 @@ vr_values::extract_range_basic (value_range *vr, gimple *stmt)\n \t  if (TREE_CODE (arg) == SSA_NAME)\n \t    {\n \t      value_range *vr0 = get_value_range (arg);\n-\t      /* If arg is non-zero, then ffs or popcount\n-\t\t are non-zero.  */\n-\t      if ((vr0->type == VR_RANGE\n-\t\t   && range_includes_zero_p (vr0->min, vr0->max) == 0)\n-\t\t  || (vr0->type == VR_ANTI_RANGE\n-\t\t      && range_includes_zero_p (vr0->min, vr0->max) == 1))\n+\t      /* If arg is non-zero, then ffs or popcount are non-zero.  */\n+\t      if (range_includes_zero_p (vr0) == 0)\n \t\tmini = 1;\n \t      /* If some high bits are known to be zero,\n \t\t we can decrease the maximum.  */"}]}