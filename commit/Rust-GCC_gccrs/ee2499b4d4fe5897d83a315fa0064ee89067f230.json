{"sha": "ee2499b4d4fe5897d83a315fa0064ee89067f230", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWUyNDk5YjRkNGZlNTg5N2Q4M2EzMTVmYTAwNjRlZTg5MDY3ZjIzMA==", "commit": {"author": {"name": "Trevor Saunders", "email": "tbsaunde+gcc@tbsaunde.org", "date": "2016-06-21T21:57:20Z"}, "committer": {"name": "Trevor Saunders", "email": "tbsaunde@gcc.gnu.org", "date": "2016-06-21T21:57:20Z"}, "message": "remove support for the interix target\n\ncontrib/ChangeLog:\n\n2016-06-21  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n\n\t* config-list.mk: Remove interix target.\n\nlibgcc/ChangeLog:\n\n2016-06-21  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n\n\t* config.host: Remove interix support.\n\t* config/i386/t-interix: Remove.\n\nconfig/ChangeLog:\n\n2016-06-21  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n\n\t* elf.m4: Remove interix support.\n\t* picflag.m4: Likewise.\n\nfixincludes/ChangeLog:\n\n2016-06-21  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n\n\t* mkfixinc.sh: Remove interix support.\n\ngcc/ChangeLog:\n\n2016-06-21  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n\n\t* config.gcc: Remove interix support.\n\t* config/i386/i386-interix.h: Remove.\n\t* config/i386/interix.opt: Remove.\n\t* config/i386/t-interix: Remove.\n\t* configure: Regenerate.\n\t* configure.ac: Remove interix support.\n\t* doc/install.texi: Remove interix documentation.\n\ngcc/testsuite/ChangeLog:\n\n2016-06-21  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n\n\t* gcc.dg/attr-ms_struct-1.c: Stop testing interix.\n\t* gcc.dg/attr-ms_struct-2.c: Likewise.\n\t* gcc.dg/attr-ms_struct-packed1.c: Likewise.\n\t* gcc.dg/bf-ms-attrib.c: Likewise.\n\t* gcc.dg/bf-ms-layout-2.c: Likewise.\n\t* gcc.dg/bf-ms-layout-3.c: Likewise.\n\t* gcc.dg/bf-ms-layout.c: Likewise.\n\t* gcc.dg/bf-no-ms-layout.c: Likewise.\n\t* gcc.target/i386/bitfield1.c: Likewise.\n\t* gcc.target/i386/bitfield2.c: Likewise.\n\t* gcc.target/i386/bitfield3.c: Likewise.\n\nFrom-SVN: r237660", "tree": {"sha": "59b4b9f45fefd0deabd18089ca5442fcb44e5aa3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/59b4b9f45fefd0deabd18089ca5442fcb44e5aa3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee2499b4d4fe5897d83a315fa0064ee89067f230", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee2499b4d4fe5897d83a315fa0064ee89067f230", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee2499b4d4fe5897d83a315fa0064ee89067f230", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee2499b4d4fe5897d83a315fa0064ee89067f230/comments", "author": null, "committer": null, "parents": [{"sha": "caea59ff66c4ec159f4a5bb29c1fec0556cd991a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/caea59ff66c4ec159f4a5bb29c1fec0556cd991a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/caea59ff66c4ec159f4a5bb29c1fec0556cd991a"}], "stats": {"total": 522, "additions": 57, "deletions": 465}, "files": [{"sha": "3b0092b26b9726f4045c27de13a892bb82f88684", "filename": "config/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee2499b4d4fe5897d83a315fa0064ee89067f230/config%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee2499b4d4fe5897d83a315fa0064ee89067f230/config%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2FChangeLog?ref=ee2499b4d4fe5897d83a315fa0064ee89067f230", "patch": "@@ -1,3 +1,8 @@\n+2016-06-21  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n+\n+\t* elf.m4: Remove interix support.\n+\t* picflag.m4: Likewise.\n+\n 2016-04-30  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \t* picflag.m4:  Remove SH5 support."}, {"sha": "5f5cd88da09f15e1986ae27ffcb6d0d20b36a808", "filename": "config/elf.m4", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee2499b4d4fe5897d83a315fa0064ee89067f230/config%2Felf.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee2499b4d4fe5897d83a315fa0064ee89067f230/config%2Felf.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Felf.m4?ref=ee2499b4d4fe5897d83a315fa0064ee89067f230", "patch": "@@ -17,7 +17,7 @@ target_elf=no\n case $target in\n   *-darwin* | *-aix* | *-cygwin* | *-mingw* | *-aout* | *-*coff* | \\\n   *-msdosdjgpp* | *-vms* | *-wince* | *-*-pe* | \\\n-  alpha*-dec-osf* | *-interix* | hppa[[12]]*-*-hpux* | \\\n+  alpha*-dec-osf* | hppa[[12]]*-*-hpux* | \\\n   nvptx-*-none)\n     target_elf=no\n     ;;"}, {"sha": "614421d2a9490b9210b03a5ef4f13c266a892728", "filename": "config/picflag.m4", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee2499b4d4fe5897d83a315fa0064ee89067f230/config%2Fpicflag.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee2499b4d4fe5897d83a315fa0064ee89067f230/config%2Fpicflag.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Fpicflag.m4?ref=ee2499b4d4fe5897d83a315fa0064ee89067f230", "patch": "@@ -27,10 +27,6 @@ case \"${$2}\" in\n \t;;\n     i[[34567]]86-*-mingw* | x86_64-*-mingw*)\n \t;;\n-    i[[34567]]86-*-interix[[3-9]]*)\n-\t# Interix 3.x gcc -fpic/-fPIC options generate broken code.\n-\t# Instead, we relocate shared libraries at runtime.\n-\t;;\n     i[[34567]]86-*-nto-qnx*)\n \t# QNX uses GNU C++, but need to define -shared option too, otherwise\n \t# it will coredump."}, {"sha": "b1f94572b0250d98a443293a80e2fc667f2dc8cf", "filename": "contrib/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee2499b4d4fe5897d83a315fa0064ee89067f230/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee2499b4d4fe5897d83a315fa0064ee89067f230/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=ee2499b4d4fe5897d83a315fa0064ee89067f230", "patch": "@@ -1,3 +1,7 @@\n+2016-06-21  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n+\n+\t* config-list.mk: Remove interix target.\n+\n 2016-06-21  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* config-list.mk: Remove rs6000-ibm-aix4.3, rs6000-ibm-aix5.1,"}, {"sha": "33d20060f19ce4b7d237cacecb4da918ff6c1698", "filename": "contrib/config-list.mk", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee2499b4d4fe5897d83a315fa0064ee89067f230/contrib%2Fconfig-list.mk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee2499b4d4fe5897d83a315fa0064ee89067f230/contrib%2Fconfig-list.mk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fconfig-list.mk?ref=ee2499b4d4fe5897d83a315fa0064ee89067f230", "patch": "@@ -99,8 +99,7 @@ LIST = aarch64-elf aarch64-linux-gnu aarch64-rtems \\\n   x86_64-knetbsd-gnuOPT-enable-obsolete x86_64-w64-mingw32 \\\n   x86_64-mingw32OPT-enable-sjlj-exceptions=yes x86_64-rtems \\\n   xstormy16-elf xtensa-elf \\\n-  xtensa-linux \\\n-  i686-interix3OPT-enable-obsolete\n+  xtensa-linux\n \n LOGFILES = $(patsubst %,log/%-make.out,$(LIST))\n all: $(LOGFILES)"}, {"sha": "957181d18164bdd3f87a8dd51626d838acb15611", "filename": "fixincludes/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee2499b4d4fe5897d83a315fa0064ee89067f230/fixincludes%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee2499b4d4fe5897d83a315fa0064ee89067f230/fixincludes%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2FChangeLog?ref=ee2499b4d4fe5897d83a315fa0064ee89067f230", "patch": "@@ -1,3 +1,7 @@\n+2016-06-21  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n+\n+\t* mkfixinc.sh: Remove interix support.\n+\n 2016-06-13  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* inclhack.def (aix_stdlib_malloc): New fix."}, {"sha": "0f9648608e94f97ab13da223d8192cb04c255772", "filename": "fixincludes/mkfixinc.sh", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee2499b4d4fe5897d83a315fa0064ee89067f230/fixincludes%2Fmkfixinc.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee2499b4d4fe5897d83a315fa0064ee89067f230/fixincludes%2Fmkfixinc.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Fmkfixinc.sh?ref=ee2499b4d4fe5897d83a315fa0064ee89067f230", "patch": "@@ -14,7 +14,6 @@ case $machine in\n     i?86-*-cygwin* | \\\n     i?86-*-mingw32* | \\\n     x86_64-*-mingw32* | \\\n-    i?86-*-interix* | \\\n     powerpc-*-eabisim* | \\\n     powerpc-*-eabi*    | \\\n     powerpc-*-rtems*   | \\"}, {"sha": "c8cb5fc063d13ef80da4541fc308252d5b0e9053", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee2499b4d4fe5897d83a315fa0064ee89067f230/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee2499b4d4fe5897d83a315fa0064ee89067f230/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ee2499b4d4fe5897d83a315fa0064ee89067f230", "patch": "@@ -1,3 +1,13 @@\n+2016-06-21  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n+\n+\t* config.gcc: Remove interix support.\n+\t* config/i386/i386-interix.h: Remove.\n+\t* config/i386/interix.opt: Remove.\n+\t* config/i386/t-interix: Remove.\n+\t* configure: Regenerate.\n+\t* configure.ac: Remove interix support.\n+\t* doc/install.texi: Remove interix documentation.\n+\n 2016-06-21  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n \n \t* config/rs6000/rs6000.h: Add conditional preprocessing directives"}, {"sha": "34da23e5dd17937a84533eeee6708dd238bec4be", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee2499b4d4fe5897d83a315fa0064ee89067f230/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee2499b4d4fe5897d83a315fa0064ee89067f230/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=ee2499b4d4fe5897d83a315fa0064ee89067f230", "patch": "@@ -236,8 +236,7 @@ md_file=\n \n # Obsolete configurations.\n case ${target} in\n- *-interix*\t\t\t\t\\\n- | *-knetbsd-*\t\t\t\t\\\n+ *-knetbsd-*\t\t\t\t\\\n  | *-openbsd2*\t\t\t\t\\\n  | *-openbsd3*\t\t\t\t\\\n  | avr-*rtems*\t\t\t\t\\\n@@ -1778,19 +1777,6 @@ i[34567]86-*-mingw* | x86_64-*-mingw*)\n \t\t\t;;\n \tesac\n \t;;\n-i[34567]86-*-interix[3-9]*)\n-\ttm_file=\"${tm_file} i386/unix.h i386/bsd.h i386/gas.h i386/i386-interix.h\"\n-\ttmake_file=\"${tmake_file} i386/t-interix\"\n-\textra_options=\"${extra_options} rpath.opt i386/interix.opt\"\n-\textra_objs=\"winnt.o winnt-stubs.o\"\n-\ttarget_gtfiles=\"\\$(srcdir)/config/i386/winnt.c\"\n-\tif test x$enable_threads = xyes ; then\n-\t\tthread_file='posix'\n-\tfi\n-\tif test x$stabs = xyes ; then\n-\t\ttm_file=\"${tm_file} dbxcoff.h\"\n-\tfi\n-\t;;\n ia64*-*-elf*)\n \ttm_file=\"${tm_file} dbxelf.h elfos.h newlib-stdint.h ia64/sysv4.h ia64/elf.h\"\n \ttmake_file=\"ia64/t-ia64\""}, {"sha": "7d4b8721ecdc0dc4c6601e3005e721eff8a61309", "filename": "gcc/config/i386/i386-interix.h", "status": "removed", "additions": 0, "deletions": 345, "changes": 345, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caea59ff66c4ec159f4a5bb29c1fec0556cd991a/gcc%2Fconfig%2Fi386%2Fi386-interix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caea59ff66c4ec159f4a5bb29c1fec0556cd991a/gcc%2Fconfig%2Fi386%2Fi386-interix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-interix.h?ref=caea59ff66c4ec159f4a5bb29c1fec0556cd991a", "patch": "@@ -1,345 +0,0 @@\n-/* Target definitions for GCC for Intel 80386 running Interix\n-   Parts Copyright (C) 1991-2016 Free Software Foundation, Inc.\n-\n-   Parts:\n-     by Douglas B. Rupp (drupp@cs.washington.edu).\n-     by Ron Guilmette (rfg@netcom.com).\n-     by Donn Terry (donn@softway.com).\n-     by Mumit Khan (khan@xraylith.wisc.edu).\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 3, or (at your option)\n-any later version.\n-\n-GCC is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GCC; see the file COPYING3.  If not see\n-<http://www.gnu.org/licenses/>.  */\n-\n-/* Note: Interix doesn't support user-written DLLs (use conventional\n-   shared libs (.so) instead).  Thus a lot of the stuff that might apply\n-   about dllimport/dllexport and the like does not apply here. */\n-\n-#include <stdio.h>\n-\n-/* Names to predefine in the preprocessor for this target machine.  */\n-\n-#define DBX_DEBUGGING_INFO 1\n-#define SDB_DEBUGGING_INFO 1\n-#define PREFERRED_DEBUGGING_TYPE DBX_DEBUG\n-\n-/* Our strategy for finding global constructors is a bit different, although\n-   not a lot.  */\n-#define DO_GLOBAL_CTORS_BODY\t\t\t\t\t\t\\\n-do {\t\t\t\t\t\t\t\t\t\\\n-  int i;\t\t\t\t\t\t\t\t\\\n-  unsigned long nptrs;\t\t\t\t\t\t\t\\\n-  func_ptr *p;\t\t\t\t\t\t\t\t\\\n-  asm(\t\t\t\t\t\t\t\t\t\\\n-       \"     .section .ctor_head, \\\"rw\\\"\\n\"\t\t\t\t\\\n-       \"1:\\n\"\t\t\t\t\t\t\t\t\\\n-       \"     .text \\n\"\t\t\t\t\t\t\t\\\n-       ASM_LOAD_ADDR(1b,%0)\t\t\t\t\t\t\\\n-       : \"=r\" (p) : : \"cc\");\t\t\t\t\t\t\\\n-  for (nptrs = 0; p[nptrs] != 0; nptrs++);\t\t\t\t\\\n-  for (i = nptrs-1; i >= 0; i--)\t\t\t\t\t\\\n-    p[i] ();\t\t\t\t\t\t\t\t\\\n-} while (0)\n-\n-#define DO_GLOBAL_DTORS_BODY\t\t\t\t\t\t\\\n-do {\t\t\t\t\t\t\t\t\t\\\n-  func_ptr *p;\t\t\t\t\t\t\t\t\\\n-  asm(\t\t\t\t\t\t\t\t\t\\\n-       \"     .section .dtor_head, \\\"rw\\\"\\n\"\t\t\t\t\\\n-       \"1:\\n\"\t\t\t\t\t\t\t\t\\\n-       \"     .text \\n\"\t\t\t\t\t\t\t\\\n-       ASM_LOAD_ADDR(1b,%0)\t\t\t\t\t\t\\\n-       : \"=r\" (p) : : \"cc\");\t\t\t\t\t\t\\\n-  while (*p)\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      p++;\t\t\t\t\t\t\t\t\\\n-      (*(p-1)) ();\t\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-} while (0)\n-\n-/* We don't use the \"usual\" push-an-address solution. */\n-#undef TARGET_ASM_CONSTRUCTOR\n-\n-#undef  SUBTARGET_SWITCHES\n-#define SUBTARGET_SWITCHES \\\n-{ \"ms-bitfields\", MASK_MS_BITFIELD_LAYOUT, N_(\"Use native (MS) bitfield layout\") }, \\\n-{ \"no-ms-bitfields\", -MASK_MS_BITFIELD_LAYOUT, N_(\"Use gcc default bitfield layout\") },\n-\n-#undef LIB_SPEC\n-#define LIB_SPEC \"\\\n- %{!shared:%{!dynamic:-lc -lpsxdll \\\n- }} \\\n- %{!G:%{!dynamic:-lc -lpsxdll \\\n- }} \\\n- %{dynamic:-lc -lpsxdll \\\n- } \\\n- %{v}\"\n-\n-#undef LINK_SPEC\n-#define LINK_SPEC \"%{!shared:-stack 0x4000000,0x10000} \\\n-\t\t   %{g} \\\n-\t\t   %{dynamic:-Bdynamic} \\\n-\t\t   %{static:-Bstatic} \\\n-\t\t   %{shared:--shared -Bdynamic} \\\n-\t\t   %{G:--shared -Bdynamic} \\\n-\t\t   %{symbolic:--shared -Bsymbolic -Bdynamic} \\\n-   \t\t   %{rpath*:--rpath %*} \\\n-\t\t   \"\n-\n-#undef STARTFILE_SPEC\n-#define STARTFILE_SPEC  \\\n-  \"%{!shared:%{pg:gcrt0%O%s}%{!pg:%{p:mcrt0%O%s}%{!p:crt0%O%s}}} %{shared:crti%O%s}\"\n-\n-#define TARGET_DECLSPEC 1\n-\n-/* cpp handles __STDC__ */\n-#define TARGET_OS_CPP_BUILTINS()\t\t\t\t\t\\\n-  do\t\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-\tbuiltin_define (\"__INTERIX\");\t\t\t\t\t\\\n-\tbuiltin_define (\"_M_IX86=300\");\t\t\t\t\t\\\n-\tbuiltin_define (\"_X86_=1\");\t\t\t\t\t\\\n-\tbuiltin_define (\"__stdcall=__attribute__((__stdcall__))\");\t\\\n-\tbuiltin_define (\"__cdecl=__attribute__((__cdecl__))\");\t\t\\\n-\tbuiltin_define (\"__declspec(x)=__attribute__((x))\");\t\t\\\n-\tbuiltin_assert (\"system=unix\");\t\t\t\t\t\\\n-\tbuiltin_assert (\"system=interix\");\t\t\t\t\\\n-\tif (preprocessing_asm_p ())\t\t\t\t\t\\\n-\t  builtin_define_std (\"LANGUAGE_ASSEMBLY\");\t\t\t\\\n-\telse\t\t\t\t\t\t\t\t\\\n-\t  {\t\t\t\t\t\t\t\t\\\n-\t     builtin_define_std (\"LANGUAGE_C\");\t\t\t\t\\\n-\t     if (c_dialect_cxx ())\t\t\t\t\t\\\n-\t       builtin_define_std (\"LANGUAGE_C_PLUS_PLUS\");\t\t\\\n-\t     if (c_dialect_objc ())\t\t\t\t\t\\\n-\t       builtin_define_std (\"LANGUAGE_OBJECTIVE_C\");\t\t\\\n-\t  } \t\t\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  while (0)\n-\n-#undef CPP_SPEC\n-#define CPP_SPEC \"%{posix:-D_POSIX_SOURCE}\"\n-\n-#define SIZE_TYPE \"unsigned int\"\n-#define PTRDIFF_TYPE \"int\"\n-#define WCHAR_TYPE \"short unsigned int\"\n-#define WCHAR_TYPE_SIZE 16\n-\n-/* Turn off long double being 96 bits.  */\n-#undef LONG_DOUBLE_TYPE_SIZE\n-#define LONG_DOUBLE_TYPE_SIZE 64\n-\n-#define IX86_NO_LIBGCC_TFMODE\n-\n-#undef TARGET_LIBC_HAS_FUNCTION\n-#define TARGET_LIBC_HAS_FUNCTION no_c99_libc_has_function\n-\n-/* The following are needed for us to be able to use winnt.c, but are not\n-   otherwise meaningful to Interix.  (The functions that use these are\n-   never called because we don't do DLLs.) */\n-#define TARGET_NOP_FUN_DLLIMPORT 1\n-#define drectve_section()  /* nothing */\n-\n-\n-#define READONLY_DATA_SECTION_ASM_OP\t\"\\t.section\\t.rdata,\\\"r\\\"\"\n-\n-/* Define this macro if references to a symbol must be treated\n-   differently depending on something about the variale or\n-   function named by the symbol (such as what section it is in).  */\n-\n-#undef TARGET_ENCODE_SECTION_INFO\n-#define TARGET_ENCODE_SECTION_INFO i386_pe_encode_section_info\n-#undef  TARGET_STRIP_NAME_ENCODING\n-#define TARGET_STRIP_NAME_ENCODING  i386_pe_strip_name_encoding_full\n-\n-/* Emit code to check the stack when allocating more that 4000\n-   bytes in one go.  */\n-\n-#define CHECK_STACK_LIMIT 4000\n-\n-/* By default, target has a 80387, uses IEEE compatible arithmetic,\n-   and returns float values in the 387 and needs stack probes\n-   We also align doubles to 64-bits forMSVC default compatibility\n-   Ditto for bitfields. */\n-#undef TARGET_SUBTARGET_DEFAULT\n-#define TARGET_SUBTARGET_DEFAULT \\\n-   (MASK_80387 | MASK_IEEE_FP | MASK_FLOAT_RETURNS | MASK_STACK_PROBE | \\\n-    MASK_ALIGN_DOUBLE | MASK_MS_BITFIELD_LAYOUT)\n-\n-/* The MS compilers take alignment as a number of bytes, so we do as well */\n-#undef ASM_OUTPUT_ALIGN\n-#define ASM_OUTPUT_ALIGN(FILE,LOG) \\\n-  if ((LOG)!=0) fprintf ((FILE), \"\\t.balign %d\\n\", 1<<(LOG))\n-\n-\n-/* Define this macro if in some cases global symbols from one translation\n-   unit may not be bound to undefined symbols in another translation unit\n-   without user intervention.  For instance, under Microsoft Windows\n-   symbols must be explicitly imported from shared libraries (DLLs).  */\n-/*\n- * Old gcc(3.3) did not have 1 here\n- */\n-#define MULTIPLE_SYMBOL_SPACES\t1\n-\n-extern void i386_pe_unique_section (tree, int);\n-#define TARGET_ASM_UNIQUE_SECTION i386_pe_unique_section\n-\n-/* Switch into a generic section.  */\n-#define TARGET_ASM_NAMED_SECTION  default_pe_asm_named_section\n-\n-/* Select attributes for named sections.  */\n-#define TARGET_SECTION_TYPE_FLAGS  i386_pe_section_type_flags\n-\n-/* Write the extra assembler code needed to declare a function\n-   properly.  If we are generating SDB debugging information, this\n-   will happen automatically, so we only need to handle other cases.  */\n-#undef ASM_DECLARE_FUNCTION_NAME\n-#define ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL)\t\t\t\\\n-  do\t\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      if (write_symbols != SDB_DEBUG)\t\t\t\t\t\\\n-       i386_pe_declare_function_type (FILE, NAME, TREE_PUBLIC (DECL));\t\\\n-      ASM_OUTPUT_LABEL (FILE, NAME);       \t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  while (0)\n-\n-/* Add an external function to the list of functions to be declared at\n-   the end of the file.  */\n-#define ASM_OUTPUT_EXTERNAL(FILE, DECL, NAME)\t\t\t\t\\\n-  do\t\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      if (TREE_CODE (DECL) == FUNCTION_DECL)\t\t\t\t\\\n-        i386_pe_record_external_function (DECL, NAME);\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  while (0)\n-\n-/* Declare the type properly for any external libcall.  */\n-#define ASM_OUTPUT_EXTERNAL_LIBCALL(FILE, FUN) \\\n-  i386_pe_declare_function_type (FILE, XSTR (FUN, 0), 1)\n-\n-/* This says out to put a global symbol in the BSS section.  */\n-#undef ASM_OUTPUT_ALIGNED_BSS\n-#define ASM_OUTPUT_ALIGNED_BSS(FILE, DECL, NAME, SIZE, ALIGN) \\\n-  asm_output_aligned_bss ((FILE), (DECL), (NAME), (SIZE), (ALIGN))\n-\n-/* Don't assume anything about the header files.  */\n-#define NO_IMPLICIT_EXTERN_C\n-\n-/* External function declarations.  */\n-extern void i386_pe_record_external_function (tree, const char *);\n-extern void i386_pe_declare_function_type (FILE *, const char *, int);\n-extern void i386_pe_record_exported_symbol (const char *, int);\n-extern void i386_pe_asm_file_end (FILE *);\n-\n-/* For Win32 ABI compatibility */\n-#undef DEFAULT_PCC_STRUCT_RETURN\n-#define DEFAULT_PCC_STRUCT_RETURN 0\n-\n-/* A bitfield declared as `int' forces `int' alignment for the struct.  */\n-#undef PCC_BITFIELD_TYPE_MATTERS\n-#define PCC_BITFIELD_TYPE_MATTERS 1\n-\n-/* Enable alias attribute support.  */\n-#ifndef SET_ASM_OP\n-#define SET_ASM_OP \"\\t.set\\t\"\n-#endif\n-\n-/* Note that there appears to be two different ways to support const\n-   sections at the moment.  You can either #define the symbol\n-   READONLY_DATA_SECTION (giving it some code which switches to the\n-   readonly data section) or else you can #define the symbols\n-   EXTRA_SECTIONS, EXTRA_SECTION_FUNCTIONS, SELECT_SECTION, and\n-   SELECT_RTX_SECTION.  We do both here just to be on the safe side.  */\n-\n-#define USE_CONST_SECTION 1\n-\n-/* The linker will take care of this, and having them causes problems with\n-   ld -r (specifically -rU).  */\n-#define CTOR_LISTS_DEFINED_EXTERNALLY 1\n-\n-/* Output a definition (implements alias) */\n-#define ASM_OUTPUT_DEF(FILE,LABEL1,LABEL2)\t\t\t\t\\\n-do\t\t\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-    fputs (SET_ASM_OP, (FILE));\t\t\t\t\t\t\\\n-    assemble_name (FILE, LABEL1);\t\t\t\t\t\\\n-    fputc (',', (FILE));\t\t\t\t\t\t\\\n-    assemble_name (FILE, LABEL2);\t\t\t\t\t\\\n-    fputc ('\\n', (FILE));\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-while (0)\n-\n-#define HOST_PTR_AS_INT unsigned long\n-\n-/* The following two flags are usually \"off\" for i386, because some non-gnu\n-   tools (for the i386) don't handle them.  However, we don't have that\n-   problem, so....  */\n-\n-/* Forward references to tags are allowed.  */\n-#define SDB_ALLOW_FORWARD_REFERENCES\n-/* Unknown tags are also allowed.  */\n-#define SDB_ALLOW_UNKNOWN_REFERENCES\n-/* DWARF2 Unwinding doesn't work with exception handling yet.  */\n-#define DWARF2_UNWIND_INFO 0\n-/* MSVC returns structs of up to 8 bytes via registers. */\n-\n-#undef SUBTARGET_RETURN_IN_MEMORY\n-#define SUBTARGET_RETURN_IN_MEMORY(TYPE, FNTYPE) \\\n-  (TYPE_MODE (TYPE) == BLKmode || \\\n-     (AGGREGATE_TYPE_P (TYPE) && int_size_in_bytes(TYPE) > 8 ))\n-\n-#define ASM_LOAD_ADDR(loc, reg)   \"     leal \" #loc \",\" #reg \"\\n\"\n-\n-/* The integer half of this list needs to be constant.  However, there's\n-   a lot of disagreement about what the floating point adjustments should\n-   be.  We pick one that works with gdb.  (The underlying problem is\n-   what to do about the segment registers.  Since we have access to them\n-   from /proc, we'll allow them to be accessed in gdb, even tho the\n-   gcc compiler can't generate them.  (There's some evidence that\n-   MSVC does, but possibly only for certain special \"canned\" sequences.)  */\n-\n-#undef DBX_REGISTER_NUMBER\n-#define DBX_REGISTER_NUMBER(n) \\\n-(TARGET_64BIT ? dbx64_register_map[n] \\\n- : (n) == 0 ? (int) 0 \\\n- : (n) == 1 ? (int) 2 \\\n- : (n) == 2 ? (int) 1 \\\n- : (n) == 3 ? (int) 3 \\\n- : (n) == 4 ? (int) 6 \\\n- : (n) == 5 ? (int) 7 \\\n- : (n) == 6 ? (int) 5 \\\n- : (n) == 7 ? (int) 4 \\\n- : ((n) >= FIRST_STACK_REG && (n) <= LAST_STACK_REG) ? (int) (n)+8 \\\n- : (int) (-1))\n-\n-#define EH_FRAME_THROUGH_COLLECT2\n-#define EH_TABLES_CAN_BE_READ_ONLY 0\n-\n-/* the following are OSF linker (not gld) specific... we don't want them */\n-#undef HAS_INIT_SECTION\n-#undef LD_INIT_SWITCH\n-#undef LD_FINI_SWITCH\n-\n-/* The following are needed for us to be able to use winnt.c, but are not\n-   otherwise meaningful to Interix.  (The functions that use these are\n-   never called because we don't do DLLs.) */\n-#define TARGET_NOP_FUN_DLLIMPORT 1\n-#define I386_PE_STRIP_ENCODING(SYM_NAME) \\\n-  ((SYM_NAME) + ((SYM_NAME)[0] == '@' \\\n-                 ? ((SYM_NAME)[3] == '*' ? 4 : 3) : 0) \\\n-             + ((SYM_NAME)[0] == '*' ? 1 : 0))\n-\n-#define drectve_section()  /* nothing */\n-"}, {"sha": "bd65432fe59e11bc3c9a893adc82423e835f55e8", "filename": "gcc/config/i386/interix.opt", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caea59ff66c4ec159f4a5bb29c1fec0556cd991a/gcc%2Fconfig%2Fi386%2Finterix.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caea59ff66c4ec159f4a5bb29c1fec0556cd991a/gcc%2Fconfig%2Fi386%2Finterix.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Finterix.opt?ref=caea59ff66c4ec159f4a5bb29c1fec0556cd991a", "patch": "@@ -1,34 +0,0 @@\n-; Interix-specific options.\n-\n-; Copyright (C) 2005-2016 Free Software Foundation, Inc.\n-;\n-; This file is part of GCC.\n-;\n-; GCC is free software; you can redistribute it and/or modify it under\n-; the terms of the GNU General Public License as published by the Free\n-; Software Foundation; either version 3, or (at your option) any later\n-; version.\n-;\n-; GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n-; WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-; for more details.\n-;\n-; You should have received a copy of the GNU General Public License\n-; along with GCC; see the file COPYING3.  If not see\n-; <http://www.gnu.org/licenses/>.\n-\n-dynamic\n-Driver\n-\n-G\n-Driver\n-\n-posix\n-Driver\n-\n-mpe-aligned-commons\n-Target Var(use_pe_aligned_common) Init(HAVE_GAS_ALIGNED_COMM)\n-Use the GNU extension to the PE format for aligned common data.\n-\n-; This comment is to ensure we retain the blank line above."}, {"sha": "39edbe5ccb6b41d798e6cb9053e66a443ff2d4d3", "filename": "gcc/config/i386/t-interix", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caea59ff66c4ec159f4a5bb29c1fec0556cd991a/gcc%2Fconfig%2Fi386%2Ft-interix", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caea59ff66c4ec159f4a5bb29c1fec0556cd991a/gcc%2Fconfig%2Fi386%2Ft-interix", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ft-interix?ref=caea59ff66c4ec159f4a5bb29c1fec0556cd991a", "patch": "@@ -1,30 +0,0 @@\n-# Copyright (C) 2011-2016 Free Software Foundation, Inc.\n-#\n-# This file is part of GCC.\n-#\n-# GCC is free software; you can redistribute it and/or modify\n-# it under the terms of the GNU General Public License as published by\n-# the Free Software Foundation; either version 3, or (at your option)\n-# any later version.\n-#\n-# GCC is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-# GNU General Public License for more details.\n-#\n-# You should have received a copy of the GNU General Public License\n-# along with GCC; see the file COPYING3.  If not see\n-# <http://www.gnu.org/licenses/>.\n-\n-winnt.o: $(srcdir)/config/i386/winnt.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n-  $(TM_H) $(RTL_H) $(REGS_H) hard-reg-set.h output.h $(TREE_H) flags.h \\\n-  $(TM_P_H) $(HASH_TABLE_H) $(GGC_H)\n-\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n-\t\t$(srcdir)/config/i386/winnt.c\n-\n-winnt-stubs.o: $(srcdir)/config/i386/winnt-stubs.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n-  $(TM_H) $(RTL_H) $(REGS_H) hard-reg-set.h output.h $(TREE_H) flags.h \\\n-  $(TM_P_H) toplev.h $(HASHTAB_H) $(GGC_H)\n-\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n-\t$(srcdir)/config/i386/winnt-stubs.c\n-"}, {"sha": "5648eca3a14623b6490db4312660166b16dbb680", "filename": "gcc/configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee2499b4d4fe5897d83a315fa0064ee89067f230/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee2499b4d4fe5897d83a315fa0064ee89067f230/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=ee2499b4d4fe5897d83a315fa0064ee89067f230", "patch": "@@ -25226,7 +25226,7 @@ _ACEOF\n \n     esac\n     case $target_os in\n-      cygwin* | pe | mingw32* | interix*)\n+      cygwin* | pe | mingw32*)\n \t# Recent binutils allows the three-operand form of \".comm\" on PE.  This\n \t# definition is used unconditionally to initialise the default state of\n \t# the target option variable that governs usage of the feature."}, {"sha": "af40895c175721414d697df744a635703e53b43a", "filename": "gcc/configure.ac", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee2499b4d4fe5897d83a315fa0064ee89067f230/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee2499b4d4fe5897d83a315fa0064ee89067f230/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=ee2499b4d4fe5897d83a315fa0064ee89067f230", "patch": "@@ -3977,7 +3977,7 @@ changequote([,])dnl\n \t   Cygwin DLL exports wrappers to support libstdc++ function replacement.])\n     esac\n     case $target_os in\n-      cygwin* | pe | mingw32* | interix*)\n+      cygwin* | pe | mingw32*)\n \t# Recent binutils allows the three-operand form of \".comm\" on PE.  This\n \t# definition is used unconditionally to initialise the default state of\n \t# the target option variable that governs usage of the feature."}, {"sha": "a74b3d69637945ae5eb712631477d1a1c2c5be49", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee2499b4d4fe5897d83a315fa0064ee89067f230/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee2499b4d4fe5897d83a315fa0064ee89067f230/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=ee2499b4d4fe5897d83a315fa0064ee89067f230", "patch": "@@ -3418,8 +3418,6 @@ information have to.\n @item\n @uref{#x-x-cygwin,,*-*-cygwin}\n @item\n-@uref{#x-x-interix,,*-*-interix}\n-@item\n @uref{#x-x-mingw32,,*-*-mingw32}\n @item\n @uref{#os2,,OS/2}\n@@ -4841,8 +4839,6 @@ and which C libraries are used.\n @itemize\n @item Cygwin @uref{#x-x-cygwin,,*-*-cygwin}: Cygwin provides a user-space\n Linux API emulation layer in the Win32 subsystem.\n-@item Interix @uref{#x-x-interix,,*-*-interix}: The Interix subsystem\n-provides native support for POSIX.\n @item MinGW @uref{#x-x-mingw32,,*-*-mingw32}: MinGW is a native GCC port for\n the Win32 subsystem that provides a subset of POSIX.\n @item MKS i386-pc-mks: NuTCracker from MKS.  See\n@@ -4890,16 +4886,6 @@ used with as up-to-date a version of binutils as possible; use either\n the latest official GNU binutils release in the Cygwin distribution,\n or version 2.20 or above if building your own.\n \n-@html\n-<hr />\n-@end html\n-@anchor{x-x-interix}\n-@heading *-*-interix\n-The Interix target is used by OpenNT, Interix, Services For UNIX (SFU),\n-and Subsystem for UNIX-based Applications (SUA).  Applications compiled\n-with this target run in the Interix subsystem, which is separate from\n-the Win32 subsystem.  This target was last known to work in GCC 3.3.\n-\n @html\n <hr />\n @end html"}, {"sha": "3f8448ac376ea8a312121730b76a0cab87c2dcd2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee2499b4d4fe5897d83a315fa0064ee89067f230/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee2499b4d4fe5897d83a315fa0064ee89067f230/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ee2499b4d4fe5897d83a315fa0064ee89067f230", "patch": "@@ -1,3 +1,17 @@\n+2016-06-21  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n+\n+\t* gcc.dg/attr-ms_struct-1.c: Stop testing interix.\n+\t* gcc.dg/attr-ms_struct-2.c: Likewise.\n+\t* gcc.dg/attr-ms_struct-packed1.c: Likewise.\n+\t* gcc.dg/bf-ms-attrib.c: Likewise.\n+\t* gcc.dg/bf-ms-layout-2.c: Likewise.\n+\t* gcc.dg/bf-ms-layout-3.c: Likewise.\n+\t* gcc.dg/bf-ms-layout.c: Likewise.\n+\t* gcc.dg/bf-no-ms-layout.c: Likewise.\n+\t* gcc.target/i386/bitfield1.c: Likewise.\n+\t* gcc.target/i386/bitfield2.c: Likewise.\n+\t* gcc.target/i386/bitfield3.c: Likewise.\n+\n 2016-06-21  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n \n \t* gcc.target/powerpc/darn-0.c: Add dejagnu directives to disable"}, {"sha": "0b1d0404fd3aa39945ec9974876142a004959af2", "filename": "gcc/testsuite/gcc.dg/attr-ms_struct-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee2499b4d4fe5897d83a315fa0064ee89067f230/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-ms_struct-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee2499b4d4fe5897d83a315fa0064ee89067f230/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-ms_struct-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-ms_struct-1.c?ref=ee2499b4d4fe5897d83a315fa0064ee89067f230", "patch": "@@ -1,5 +1,5 @@\n /* Test for MS structure sizes.  */\n-/* { dg-do run { target *-*-interix* *-*-mingw* *-*-cygwin* i?86-*-darwin* } } */\n+/* { dg-do run { target *-*-mingw* *-*-cygwin* i?86-*-darwin* } } */\n /* { dg-require-effective-target ilp32 } */\n /* { dg-options \"-std=gnu99\" } */\n "}, {"sha": "f2534b5cbab5fc594301e2d29861e1f70fc324f0", "filename": "gcc/testsuite/gcc.dg/attr-ms_struct-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee2499b4d4fe5897d83a315fa0064ee89067f230/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-ms_struct-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee2499b4d4fe5897d83a315fa0064ee89067f230/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-ms_struct-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-ms_struct-2.c?ref=ee2499b4d4fe5897d83a315fa0064ee89067f230", "patch": "@@ -1,5 +1,5 @@\n /* Test for MS structure sizes.  */\n-/* { dg-do run { target *-*-interix* *-*-mingw* *-*-cygwin* i?86-*-darwin* } } */\n+/* { dg-do run { target *-*-mingw* *-*-cygwin* i?86-*-darwin* } } */\n /* { dg-require-effective-target ilp32 } */\n /* { dg-options \"-std=gnu99\" } */\n "}, {"sha": "25388d26e2cd91afaada547836469fb3f2b72028", "filename": "gcc/testsuite/gcc.dg/attr-ms_struct-packed1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee2499b4d4fe5897d83a315fa0064ee89067f230/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-ms_struct-packed1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee2499b4d4fe5897d83a315fa0064ee89067f230/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-ms_struct-packed1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-ms_struct-packed1.c?ref=ee2499b4d4fe5897d83a315fa0064ee89067f230", "patch": "@@ -1,5 +1,5 @@\n /* Test for MS structure with packed attribute.  */\n-/* { dg-do run { target *-*-interix* *-*-mingw* *-*-cygwin* i?86-*-darwin* } }\n+/* { dg-do run { target *-*-mingw* *-*-cygwin* i?86-*-darwin* } }\n /* { dg-options \"-std=gnu99\" } */\n \n extern void abort ();"}, {"sha": "2da4f0320d6a69a08e89d26173b448eee58a2d3c", "filename": "gcc/testsuite/gcc.dg/bf-ms-attrib.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee2499b4d4fe5897d83a315fa0064ee89067f230/gcc%2Ftestsuite%2Fgcc.dg%2Fbf-ms-attrib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee2499b4d4fe5897d83a315fa0064ee89067f230/gcc%2Ftestsuite%2Fgcc.dg%2Fbf-ms-attrib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbf-ms-attrib.c?ref=ee2499b4d4fe5897d83a315fa0064ee89067f230", "patch": "@@ -3,7 +3,7 @@\n    posted to GCC-patches\n    http://gcc.gnu.org/ml/gcc-patches/2000-08/msg00577.html */ \n \n-/* { dg-do run { target *-*-interix* *-*-mingw* *-*-cygwin* } } */\n+/* { dg-do run { target *-*-mingw* *-*-cygwin* } } */\n \n /* We don't want the default \"pedantic-errors\" in this case, since we're\n    testing nonstandard stuff to begin with. */"}, {"sha": "53a55e603c76f506686debb8f044efee2f7242ec", "filename": "gcc/testsuite/gcc.dg/bf-ms-layout-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee2499b4d4fe5897d83a315fa0064ee89067f230/gcc%2Ftestsuite%2Fgcc.dg%2Fbf-ms-layout-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee2499b4d4fe5897d83a315fa0064ee89067f230/gcc%2Ftestsuite%2Fgcc.dg%2Fbf-ms-layout-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbf-ms-layout-2.c?ref=ee2499b4d4fe5897d83a315fa0064ee89067f230", "patch": "@@ -5,7 +5,7 @@\n    posted to GCC-patches\n    http://gcc.gnu.org/ml/gcc-patches/2000-08/msg00577.html */\n \n-/* { dg-do run { target *-*-interix* *-*-mingw* *-*-cygwin* i?86-*-darwin* } } */\n+/* { dg-do run { target *-*-mingw* *-*-cygwin* i?86-*-darwin* } } */\n /* { dg-options \"-D_TEST_MS_LAYOUT\" } */\n /* This test uses the attribute instead of the command line option.  */\n "}, {"sha": "668a036677d7dfe97625aad9d73dc83c58a215cd", "filename": "gcc/testsuite/gcc.dg/bf-ms-layout-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee2499b4d4fe5897d83a315fa0064ee89067f230/gcc%2Ftestsuite%2Fgcc.dg%2Fbf-ms-layout-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee2499b4d4fe5897d83a315fa0064ee89067f230/gcc%2Ftestsuite%2Fgcc.dg%2Fbf-ms-layout-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbf-ms-layout-3.c?ref=ee2499b4d4fe5897d83a315fa0064ee89067f230", "patch": "@@ -1,5 +1,5 @@\n /* Test for MS bitfield layout */\n-/* { dg-do run { target *-*-interix* *-*-mingw* *-*-cygwin* i?86-*-* x86_64-*-* } } */\n+/* { dg-do run { target *-*-mingw* *-*-cygwin* i?86-*-* x86_64-*-* } } */\n \n extern void abort();\n "}, {"sha": "54909d8b32e3a4caebbc5258eab2ec6c8cf0800f", "filename": "gcc/testsuite/gcc.dg/bf-ms-layout.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee2499b4d4fe5897d83a315fa0064ee89067f230/gcc%2Ftestsuite%2Fgcc.dg%2Fbf-ms-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee2499b4d4fe5897d83a315fa0064ee89067f230/gcc%2Ftestsuite%2Fgcc.dg%2Fbf-ms-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbf-ms-layout.c?ref=ee2499b4d4fe5897d83a315fa0064ee89067f230", "patch": "@@ -5,7 +5,7 @@\n    posted to GCC-patches\n    http://gcc.gnu.org/ml/gcc-patches/2000-08/msg00577.html */\n \n-/* { dg-do run { target *-*-interix* *-*-mingw* *-*-cygwin* i?86-*-darwin* } } */\n+/* { dg-do run { target *-*-mingw* *-*-cygwin* i?86-*-darwin* } } */\n /* { dg-options \"-mms-bitfields -D_TEST_MS_LAYOUT\" } */\n \n #include <stddef.h>"}, {"sha": "80f7f98c4b100473b8c7b852f587a9c7ff822bf6", "filename": "gcc/testsuite/gcc.dg/bf-no-ms-layout.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee2499b4d4fe5897d83a315fa0064ee89067f230/gcc%2Ftestsuite%2Fgcc.dg%2Fbf-no-ms-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee2499b4d4fe5897d83a315fa0064ee89067f230/gcc%2Ftestsuite%2Fgcc.dg%2Fbf-no-ms-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbf-no-ms-layout.c?ref=ee2499b4d4fe5897d83a315fa0064ee89067f230", "patch": "@@ -5,7 +5,7 @@\n    posted to GCC-patches\n    http://gcc.gnu.org/ml/gcc-patches/2000-08/msg00577.html */\n \n-/* { dg-do run { target *-*-interix* *-*-mingw* *-*-cygwin* i?86-*-darwin } } */\n+/* { dg-do run { target *-*-mingw* *-*-cygwin* i?86-*-darwin } } */\n /* { dg-options \"-mno-ms-bitfields\" } */\n \n #include <stddef.h>"}, {"sha": "e4e06cb0c0fbca85f0430053458357881f4d7389", "filename": "gcc/testsuite/gcc.target/i386/bitfield1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee2499b4d4fe5897d83a315fa0064ee89067f230/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbitfield1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee2499b4d4fe5897d83a315fa0064ee89067f230/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbitfield1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbitfield1.c?ref=ee2499b4d4fe5897d83a315fa0064ee89067f230", "patch": "@@ -2,7 +2,7 @@\n // { dg-do run }\n // { dg-require-effective-target ia32 }\n // { dg-options \"-O2\" }\n-// { dg-options \"-mno-align-double -mno-ms-bitfields\" { target i?86-*-interix* i?86-*-cygwin* i?86-*-mingw*} }\n+// { dg-options \"-mno-align-double -mno-ms-bitfields\" { target i?86-*-cygwin* i?86-*-mingw*} }\n \n extern void abort (void);\n extern void exit (int);"}, {"sha": "db9d284449ebe1143601a7068fc512bf2b557c6e", "filename": "gcc/testsuite/gcc.target/i386/bitfield2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee2499b4d4fe5897d83a315fa0064ee89067f230/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbitfield2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee2499b4d4fe5897d83a315fa0064ee89067f230/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbitfield2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbitfield2.c?ref=ee2499b4d4fe5897d83a315fa0064ee89067f230", "patch": "@@ -2,7 +2,7 @@\n // { dg-do run }\n // { dg-require-effective-target ia32 }\n // { dg-options \"-O2\" }\n-// { dg-options \"-mno-align-double -mno-ms-bitfields\" { target i?86-*-interix* i?86-*-cygwin* i?86-*-mingw* } }\n+// { dg-options \"-mno-align-double -mno-ms-bitfields\" { target i?86-*-cygwin* i?86-*-mingw* } }\n \n extern void abort (void);\n extern void exit (int);"}, {"sha": "3bee7cd37007a4a1fed94ee45c0d699bd2a7fd16", "filename": "gcc/testsuite/gcc.target/i386/bitfield3.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee2499b4d4fe5897d83a315fa0064ee89067f230/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbitfield3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee2499b4d4fe5897d83a315fa0064ee89067f230/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbitfield3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbitfield3.c?ref=ee2499b4d4fe5897d83a315fa0064ee89067f230", "patch": "@@ -1,7 +1,6 @@\n // Test for bitfield alignment in structs on IA-32\n // { dg-do run }\n // { dg-options \"-O2\" }\n-// { dg-additional-options \"-mno-align-double -mno-ms-bitfields\" { target *-*-interix* } }\n // { dg-additional-options \"-mno-ms-bitfields\" { target *-*-mingw* } }\n \n extern void abort (void);"}, {"sha": "d50e0bc22b311cfa19d049c1cc8d749020bb657f", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee2499b4d4fe5897d83a315fa0064ee89067f230/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee2499b4d4fe5897d83a315fa0064ee89067f230/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=ee2499b4d4fe5897d83a315fa0064ee89067f230", "patch": "@@ -1,3 +1,8 @@\n+2016-06-21  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n+\n+\t* config.host: Remove interix support.\n+\t* config/i386/t-interix: Remove.\n+\n 2016-06-18  John David Anglin  <danglin@gcc.gnu.org>\n \n \t* config/pa/fptr.c (__canonicalize_funcptr_for_compare): Don't set"}, {"sha": "2f55fbdd84dd93c11e414ad2bbe5e2259d688c1c", "filename": "libgcc/config.host", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee2499b4d4fe5897d83a315fa0064ee89067f230/libgcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee2499b4d4fe5897d83a315fa0064ee89067f230/libgcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.host?ref=ee2499b4d4fe5897d83a315fa0064ee89067f230", "patch": "@@ -752,9 +752,6 @@ x86_64-*-mingw*)\n \t\textra_parts=\"$extra_parts vtv_start.o vtv_end.o vtv_start_preinit.o vtv_end_preinit.o\"\n \tfi\n \t;;\n-i[34567]86-*-interix[3-9]*)\n-\ttmake_file=\"$tmake_file i386/t-interix i386/t-chkstk\"\n-\t;;\n ia64*-*-elf*)\n \textra_parts=\"$extra_parts crtbeginS.o crtendS.o crtfastmath.o\"\n \ttmake_file=\"ia64/t-ia64 ia64/t-ia64-elf ia64/t-eh-ia64 t-crtfm\""}, {"sha": "8889e7c6c63408cbd246c7f692ba42d773be25a3", "filename": "libgcc/config/i386/t-interix", "status": "removed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caea59ff66c4ec159f4a5bb29c1fec0556cd991a/libgcc%2Fconfig%2Fi386%2Ft-interix", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caea59ff66c4ec159f4a5bb29c1fec0556cd991a/libgcc%2Fconfig%2Fi386%2Ft-interix", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Ft-interix?ref=caea59ff66c4ec159f4a5bb29c1fec0556cd991a", "patch": "@@ -1,3 +0,0 @@\n-# We need to override LIBGCC2_DEBUG_CFLAGS so libgcc2 will be\n-# built without debugging information\n-LIBGCC2_DEBUG_CFLAGS ="}]}