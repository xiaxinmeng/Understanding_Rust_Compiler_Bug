{"sha": "9d2a20713d87bed983029db5ffacb8dc06662ff6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWQyYTIwNzEzZDg3YmVkOTgzMDI5ZGI1ZmZhY2I4ZGMwNjY2MmZmNg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-31T10:09:08Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-31T10:09:08Z"}, "message": "[multiple changes]\n\n2014-07-31  Robert Dewar  <dewar@adacore.com>\n\n\t* frontend.adb: Minor reformatting.\n\t* sem.adb: Minor reformatting.\n\t* sem_ch6.adb (Analyze_Null_Procedure): Set proper sloc for\n\tidentifiers on rewrite.\n\t* par.adb: Minor comment updates.\n\t* a-ngelfu.adb (Cos): Minor simplification.\n\t* par-ch13.adb (Get_Aspect_Specifications): Improve messages\n\tand recovery for bad aspect.\n\t* exp_ch3.adb: Code clean up.\n\t* sem_util.ads: Minor comment correction.\n\t* sem_ch13.adb (Check_Array_Type): Properly handle large types.\n\t* sem_ch3.adb: Code clean up.\n\t* binderr.ads: Minor comment correction.\n\n2014-07-31  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_disp.adb (Expand_Interface_Conversion): A call whose\n\tprefix is a static conversion to an interface type that is not\n\tclass-wide is not dispatching.\n\nFrom-SVN: r213338", "tree": {"sha": "f57566a77072c4f68d1cbfc9fa74d269655364e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f57566a77072c4f68d1cbfc9fa74d269655364e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d2a20713d87bed983029db5ffacb8dc06662ff6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d2a20713d87bed983029db5ffacb8dc06662ff6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d2a20713d87bed983029db5ffacb8dc06662ff6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d2a20713d87bed983029db5ffacb8dc06662ff6/comments", "author": null, "committer": null, "parents": [{"sha": "7bfff488f808213bf183da60f89f4230271957f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bfff488f808213bf183da60f89f4230271957f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bfff488f808213bf183da60f89f4230271957f4"}], "stats": {"total": 255, "additions": 159, "deletions": 96}, "files": [{"sha": "dbfad40a48ce39969c36da1142ebc77c60012932", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d2a20713d87bed983029db5ffacb8dc06662ff6/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d2a20713d87bed983029db5ffacb8dc06662ff6/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=9d2a20713d87bed983029db5ffacb8dc06662ff6", "patch": "@@ -1,3 +1,25 @@\n+2014-07-31  Robert Dewar  <dewar@adacore.com>\n+\n+\t* frontend.adb: Minor reformatting.\n+\t* sem.adb: Minor reformatting.\n+\t* sem_ch6.adb (Analyze_Null_Procedure): Set proper sloc for\n+\tidentifiers on rewrite.\n+\t* par.adb: Minor comment updates.\n+\t* a-ngelfu.adb (Cos): Minor simplification.\n+\t* par-ch13.adb (Get_Aspect_Specifications): Improve messages\n+\tand recovery for bad aspect.\n+\t* exp_ch3.adb: Code clean up.\n+\t* sem_util.ads: Minor comment correction.\n+\t* sem_ch13.adb (Check_Array_Type): Properly handle large types.\n+\t* sem_ch3.adb: Code clean up.\n+\t* binderr.ads: Minor comment correction.\n+\n+2014-07-31  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_disp.adb (Expand_Interface_Conversion): A call whose\n+\tprefix is a static conversion to an interface type that is not\n+\tclass-wide is not dispatching.\n+\n 2014-07-31  Robert Dewar  <dewar@adacore.com>\n \n \t* inline.adb, s-traceb.adb, s-traceb-hpux.adb, memtrack.adb,"}, {"sha": "f31f685e795bf51d688dd148227c000df99bddba", "filename": "gcc/ada/a-ngelfu.adb", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d2a20713d87bed983029db5ffacb8dc06662ff6/gcc%2Fada%2Fa-ngelfu.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d2a20713d87bed983029db5ffacb8dc06662ff6/gcc%2Fada%2Fa-ngelfu.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-ngelfu.adb?ref=9d2a20713d87bed983029db5ffacb8dc06662ff6", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -509,12 +509,8 @@ package body Ada.Numerics.Generic_Elementary_Functions is\n \n    function Cos (X : Float_Type'Base) return Float_Type'Base is\n    begin\n-      if X = 0.0 then\n-         return 1.0;\n-\n-      elsif abs X < Sqrt_Epsilon then\n+      if abs X < Sqrt_Epsilon then\n          return 1.0;\n-\n       end if;\n \n       return Float_Type'Base (Aux.Cos (Double (X)));"}, {"sha": "46b1846e0ed938a598735d5c2954876423a3b7be", "filename": "gcc/ada/binderr.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d2a20713d87bed983029db5ffacb8dc06662ff6/gcc%2Fada%2Fbinderr.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d2a20713d87bed983029db5ffacb8dc06662ff6/gcc%2Fada%2Fbinderr.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbinderr.ads?ref=9d2a20713d87bed983029db5ffacb8dc06662ff6", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -59,7 +59,7 @@ package Binderr is\n    --      specified by the File_Name_Type value stored in Error_Msg_File_2.\n \n    --    Insertion character $ (Dollar: insert unit name from Names table)\n-   --      The character & is replaced by the text for the unit name specified\n+   --      The character $ is replaced by the text for the unit name specified\n    --      by the Name_Id value stored in Error_Msg_Unit_1. The name is always\n    --      enclosed in quotes. A second $ may appear in a single message in\n    --      which case it is similarly replaced by the name which is specified"}, {"sha": "5d5edf3bf7881acd8596a19cc38e8e08651a7384", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d2a20713d87bed983029db5ffacb8dc06662ff6/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d2a20713d87bed983029db5ffacb8dc06662ff6/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=9d2a20713d87bed983029db5ffacb8dc06662ff6", "patch": "@@ -4589,9 +4589,9 @@ package body Exp_Ch3 is\n       --  Expand_Record_Extension is called directly from the semantics, so\n       --  we must check to see whether expansion is active before proceeding\n       --  Because this affects the visibility of selected components in bodies\n-      --  of instances, it must also be called in ASIS mode.\n+      --  of instances.\n \n-      if not (Expander_Active or ASIS_Mode) then\n+      if not Expander_Active then\n          return;\n       end if;\n "}, {"sha": "69feaa732326e35133dfd19a77f08cc59fc70867", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d2a20713d87bed983029db5ffacb8dc06662ff6/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d2a20713d87bed983029db5ffacb8dc06662ff6/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=9d2a20713d87bed983029db5ffacb8dc06662ff6", "patch": "@@ -1191,6 +1191,19 @@ package body Exp_Disp is\n          end if;\n \n          return;\n+\n+      --  A static conversion to an interface type that is not classwide is\n+      --  curious but legal if the interface operation is a null procedure.\n+      --  If the operation is abstract it will be rejected later.\n+\n+      elsif Is_Static\n+        and then Is_Interface (Etype (N))\n+        and then not Is_Class_Wide_Type (Etype (N))\n+        and then Comes_From_Source (N)\n+      then\n+         Rewrite (N, Unchecked_Convert_To (Etype (N), N));\n+         Analyze (N);\n+         return;\n       end if;\n \n       if not Is_Static then"}, {"sha": "e1c785d95ddee3b83087cbefb77f33d3cbc4b577", "filename": "gcc/ada/frontend.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d2a20713d87bed983029db5ffacb8dc06662ff6/gcc%2Fada%2Ffrontend.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d2a20713d87bed983029db5ffacb8dc06662ff6/gcc%2Fada%2Ffrontend.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffrontend.adb?ref=9d2a20713d87bed983029db5ffacb8dc06662ff6", "patch": "@@ -147,10 +147,10 @@ begin\n       Temp_File : Boolean;\n \n    begin\n-      --  We always analyze config files with style checks off, since\n-      --  we don't want a miscellaneous gnat.adc that is around to\n-      --  discombobulate intended -gnatg or -gnaty compilations. We\n-      --  also disconnect checking for maximum line length.\n+      --  We always analyze config files with style checks off, since we\n+      --  don't want a miscellaneous gnat.adc that is around to discombobulate\n+      --  intended -gnatg or -gnaty compilations. We also disconnect checking\n+      --  for maximum line length.\n \n       Opt.Style_Check := False;\n       Style_Check := False;"}, {"sha": "44193d68428dec53c695cd4f3a62db4ceac780de", "filename": "gcc/ada/par-ch13.adb", "status": "modified", "additions": 73, "deletions": 66, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d2a20713d87bed983029db5ffacb8dc06662ff6/gcc%2Fada%2Fpar-ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d2a20713d87bed983029db5ffacb8dc06662ff6/gcc%2Fada%2Fpar-ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch13.adb?ref=9d2a20713d87bed983029db5ffacb8dc06662ff6", "patch": "@@ -197,16 +197,16 @@ package body Ch13 is\n          --  The aspect mark is not recognized\n \n          if A_Id = No_Aspect then\n-            Error_Msg_SC (\"aspect identifier expected\");\n+            Error_Msg_N (\"& is not a valid aspect identifier\", Token_Node);\n             OK := False;\n \n             --  Check bad spelling\n \n             for J in Aspect_Id_Exclude_No_Aspect loop\n                if Is_Bad_Spelling_Of (Token_Name, Aspect_Names (J)) then\n                   Error_Msg_Name_1 := Aspect_Names (J);\n-                  Error_Msg_SC -- CODEFIX\n-                    (\"\\possible misspelling of%\");\n+                  Error_Msg_N -- CODEFIX\n+                    (\"\\possible misspelling of%\", Token_Node);\n                   exit;\n                end if;\n             end loop;\n@@ -225,9 +225,13 @@ package body Ch13 is\n                Scan; -- past arrow\n                Set_Expression (Aspect, P_Expression);\n \n-            --  The aspect may behave as a boolean aspect\n+            --  If we have a correct terminator (comma or semicolon, or a\n+            --  reasonable likely missing comma), then just proceed.\n \n-            elsif Token = Tok_Comma then\n+            elsif Token = Tok_Comma     or else\n+                  Token = Tok_Semicolon or else\n+                  Token = Tok_Identifier\n+            then\n                null;\n \n             --  Otherwise the aspect contains a junk definition\n@@ -480,89 +484,92 @@ package body Ch13 is\n             if OK then\n                Append (Aspect, Aspects);\n             end if;\n+         end if;\n \n-            --  The aspect specification list contains more than one aspect\n+         --  Merge here after good or bad aspect (we should be at a comma\n+         --  or a semicolon, but there might be other possible errors).\n \n-            if Token = Tok_Comma then\n-               Scan; -- past comma\n-               goto Continue;\n+         --  The aspect specification list contains more than one aspect\n \n-            --  Check for a missing comma between two aspects. Emit an error\n-            --  and proceed to the next aspect.\n+         if Token = Tok_Comma then\n+            Scan; -- past comma\n+            goto Continue;\n \n-            elsif Token = Tok_Identifier\n-              and then Get_Aspect_Id (Token_Name) /= No_Aspect\n-            then\n-               declare\n-                  Scan_State : Saved_Scan_State;\n+         --  Check for a missing comma between two aspects. Emit an error\n+         --  and proceed to the next aspect.\n \n-               begin\n-                  Save_Scan_State (Scan_State);\n-                  Scan; -- past identifier\n+         elsif Token = Tok_Identifier\n+           and then Get_Aspect_Id (Token_Name) /= No_Aspect\n+         then\n+            declare\n+               Scan_State : Saved_Scan_State;\n \n-                  --  Attempt to detect ' or => following a potential aspect\n-                  --  mark.\n+            begin\n+               Save_Scan_State (Scan_State);\n+               Scan; -- past identifier\n \n-                  if Token = Tok_Apostrophe or else Token = Tok_Arrow then\n-                     Restore_Scan_State (Scan_State);\n-                     Error_Msg_AP -- CODEFIX\n-                       (\"|missing \"\",\"\"\");\n-                     goto Continue;\n+               --  Attempt to detect ' or => following a potential aspect\n+               --  mark.\n \n-                  --  The construct following the current aspect is not an\n-                  --  aspect.\n+               if Token = Tok_Apostrophe or else Token = Tok_Arrow then\n+                  Restore_Scan_State (Scan_State);\n+                  Error_Msg_AP -- CODEFIX\n+                    (\"|missing \"\",\"\"\");\n+                  goto Continue;\n \n-                  else\n-                     Restore_Scan_State (Scan_State);\n-                  end if;\n-               end;\n+               --  The construct following the current aspect is not an\n+               --  aspect.\n \n-            --  Check for a mistyped semicolon in place of a comma between two\n-            --  aspects. Emit an error and proceed to the next aspect.\n+               else\n+                  Restore_Scan_State (Scan_State);\n+               end if;\n+            end;\n \n-            elsif Token = Tok_Semicolon then\n-               declare\n-                  Scan_State : Saved_Scan_State;\n+         --  Check for a mistyped semicolon in place of a comma between two\n+         --  aspects. Emit an error and proceed to the next aspect.\n \n-               begin\n-                  Save_Scan_State (Scan_State);\n-                  Scan; -- past semicolon\n+         elsif Token = Tok_Semicolon then\n+            declare\n+               Scan_State : Saved_Scan_State;\n \n-                  if Token = Tok_Identifier\n-                    and then Get_Aspect_Id (Token_Name) /= No_Aspect\n-                  then\n-                     Scan; -- past identifier\n+            begin\n+               Save_Scan_State (Scan_State);\n+               Scan; -- past semicolon\n \n-                     --  Attempt to detect ' or => following a potential aspect\n-                     --  mark.\n+               if Token = Tok_Identifier\n+                 and then Get_Aspect_Id (Token_Name) /= No_Aspect\n+               then\n+                  Scan; -- past identifier\n \n-                     if Token = Tok_Apostrophe or else Token = Tok_Arrow then\n-                        Restore_Scan_State (Scan_State);\n-                        Error_Msg_SC -- CODEFIX\n-                          (\"|\"\";\"\" should be \"\",\"\"\");\n-                        Scan; -- past semicolon\n-                        goto Continue;\n-                     end if;\n+                  --  Attempt to detect ' or => following a potential aspect\n+                  --  mark.\n+\n+                  if Token = Tok_Apostrophe or else Token = Tok_Arrow then\n+                     Restore_Scan_State (Scan_State);\n+                     Error_Msg_SC -- CODEFIX\n+                       (\"|\"\";\"\" should be \"\",\"\"\");\n+                     Scan; -- past semicolon\n+                     goto Continue;\n                   end if;\n+               end if;\n \n-                  --  The construct following the current aspect is not an\n-                  --  aspect.\n+               --  The construct following the current aspect is not an\n+               --  aspect.\n \n-                  Restore_Scan_State (Scan_State);\n-               end;\n-            end if;\n+               Restore_Scan_State (Scan_State);\n+            end;\n+         end if;\n \n-            --  Must be terminator character\n+         --  Must be terminator character\n \n-            if Semicolon then\n-               T_Semicolon;\n-            end if;\n+         if Semicolon then\n+            T_Semicolon;\n+         end if;\n \n-            exit;\n+         exit;\n \n-         <<Continue>>\n-            null;\n-         end if;\n+      <<Continue>>\n+         null;\n       end loop;\n \n       return Aspects;"}, {"sha": "c1363edee75787708ec18f85881be507ed54f743", "filename": "gcc/ada/par.adb", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d2a20713d87bed983029db5ffacb8dc06662ff6/gcc%2Fada%2Fpar.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d2a20713d87bed983029db5ffacb8dc06662ff6/gcc%2Fada%2Fpar.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar.adb?ref=9d2a20713d87bed983029db5ffacb8dc06662ff6", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -947,12 +947,6 @@ function Par (Configuration_Pragmas : Boolean) return List_Id is\n       --  for aspects so it does not matter whether the aspect specifications\n       --  are terminated by semicolon or some other character.\n \n-      function Get_Aspect_Specifications\n-        (Semicolon : Boolean := True) return List_Id;\n-      --  Parse a list of aspects but do not attach them to a declaration node.\n-      --  Subsidiary to the following procedure. Used when parsing a subprogram\n-      --  specification that may be a declaration or a body.\n-\n       procedure P_Aspect_Specifications\n         (Decl      : Node_Id;\n          Semicolon : Boolean := True);\n@@ -977,6 +971,13 @@ function Par (Configuration_Pragmas : Boolean) return List_Id is\n       --  are also ignored, but no error message is given (this is used when\n       --  the caller has already taken care of the error message).\n \n+      function Get_Aspect_Specifications\n+        (Semicolon : Boolean := True) return List_Id;\n+      --  Parse a list of aspects but do not attach them to a declaration node.\n+      --  Subsidiary to P_Aspect_Specifications procedure. Used when parsing\n+      --  a subprogram specification that may be a declaration or a body.\n+      --  Semicolon has the same meaning as for P_Aspect_Specifications above.\n+\n       function P_Code_Statement (Subtype_Mark : Node_Id) return Node_Id;\n       --  Function to parse a code statement. The caller has scanned out\n       --  the name to be used as the subtype mark (but has not checked that"}, {"sha": "0da096ea7e18fc42005a583b9c9bf3886786277b", "filename": "gcc/ada/sem.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d2a20713d87bed983029db5ffacb8dc06662ff6/gcc%2Fada%2Fsem.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d2a20713d87bed983029db5ffacb8dc06662ff6/gcc%2Fada%2Fsem.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem.adb?ref=9d2a20713d87bed983029db5ffacb8dc06662ff6", "patch": "@@ -1268,7 +1268,6 @@ package body Sem is\n            Next     => Suppress_Stack_Entries);\n       Suppress_Stack_Entries := Global_Suppress_Stack_Top;\n       return;\n-\n    end Push_Global_Suppress_Stack_Entry;\n \n    -------------------------------------"}, {"sha": "2ef89b623a16f502223011e4512f1e643aff10b2", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d2a20713d87bed983029db5ffacb8dc06662ff6/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d2a20713d87bed983029db5ffacb8dc06662ff6/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=9d2a20713d87bed983029db5ffacb8dc06662ff6", "patch": "@@ -12067,11 +12067,24 @@ package body Sem_Ch13 is\n             return;\n          end if;\n \n+         --  Case of component size is greater than or equal to 64 and the\n+         --  alignment of the array is at least as large as the alignment\n+         --  of the component. We are definitely OK in this situation.\n+\n+         if Known_Component_Size (Atyp)\n+           and then Component_Size (Atyp) >= 64\n+           and then Known_Alignment (Atyp)\n+           and then Known_Alignment (Ctyp)\n+           and then Alignment (Atyp) >= Alignment (Ctyp)\n+         then\n+            return;\n+         end if;\n+\n          --  Check actual component size\n \n          if not Known_Component_Size (Atyp)\n            or else not (Addressable (Component_Size (Atyp))\n-                          and then Component_Size (Atyp) < 64)\n+                         and then Component_Size (Atyp) < 64)\n            or else Component_Size (Atyp) mod Esize (Ctyp) /= 0\n          then\n             No_Independence;"}, {"sha": "b5df7095c7ea55e61014bae437b7f87d461c4ebe", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d2a20713d87bed983029db5ffacb8dc06662ff6/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d2a20713d87bed983029db5ffacb8dc06662ff6/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=9d2a20713d87bed983029db5ffacb8dc06662ff6", "patch": "@@ -3503,6 +3503,7 @@ package body Sem_Ch3 is\n            and then Nkind (E) = N_Aggregate\n          then\n             Set_Etype (E, T);\n+\n          else\n             Resolve (E, T);\n          end if;\n@@ -8407,9 +8408,16 @@ package body Sem_Ch3 is\n \n       elsif not Private_Extension then\n \n-         --  Add the _parent field in the derived type\n+         --  Add the _parent field in the derived type. In ASIS mode there is\n+         --  not enough semantic information for full expansion, but set the\n+         --  parent subtype to allow resolution of selected components in\n+         --  instance bodies.\n \n-         Expand_Record_Extension (Derived_Type, Type_Def);\n+         if ASIS_Mode then\n+            Set_Parent_Subtype (Derived_Type, Parent_Type);\n+         else\n+            Expand_Record_Extension (Derived_Type, Type_Def);\n+         end if;\n \n          --  Ada 2005 (AI-251): Addition of the Tag corresponding to all the\n          --  implemented interfaces if we are in expansion mode"}, {"sha": "35c59e21b01ad4a49b6cc19b78089ff81d3449eb", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d2a20713d87bed983029db5ffacb8dc06662ff6/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d2a20713d87bed983029db5ffacb8dc06662ff6/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=9d2a20713d87bed983029db5ffacb8dc06662ff6", "patch": "@@ -106,7 +106,7 @@ package body Sem_Ch6 is\n    procedure Analyze_Null_Procedure\n      (N             : Node_Id;\n       Is_Completion : out Boolean);\n-   --  A null procedure can be a declaration or (Ada 2012) a completion.\n+   --  A null procedure can be a declaration or (Ada 2012) a completion\n \n    procedure Analyze_Return_Statement (N : Node_Id);\n    --  Common processing for simple and extended return statements\n@@ -1310,12 +1310,16 @@ package body Sem_Ch6 is\n       --  Create new entities for body and formals\n \n       Set_Defining_Unit_Name (Specification (Null_Body),\n-        Make_Defining_Identifier (Loc, Chars (Defining_Entity (N))));\n+        Make_Defining_Identifier\n+          (Sloc (Defining_Entity (N)),\n+           Chars (Defining_Entity (N))));\n \n       Form := First (Parameter_Specifications (Specification (Null_Body)));\n       while Present (Form) loop\n          Set_Defining_Identifier (Form,\n-           Make_Defining_Identifier (Loc, Chars (Defining_Identifier (Form))));\n+           Make_Defining_Identifier\n+             (Sloc (Defining_Identifier (Form)),\n+              Chars (Defining_Identifier (Form))));\n          Next (Form);\n       end loop;\n "}, {"sha": "cac0fecbfd17b609c7200d87656ee72a32972561", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d2a20713d87bed983029db5ffacb8dc06662ff6/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d2a20713d87bed983029db5ffacb8dc06662ff6/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=9d2a20713d87bed983029db5ffacb8dc06662ff6", "patch": "@@ -88,8 +88,8 @@ package Sem_Util is\n    function Addressable (V : Uint) return Boolean;\n    function Addressable (V : Int)  return Boolean;\n    pragma Inline (Addressable);\n-   --  Returns True if the value of V is the word size of an addressable\n-   --  factor of the word size (typically 8, 16, 32 or 64).\n+   --  Returns True if the value of V is the word size or an addressable factor\n+   --  of the word size (typically 8, 16, 32 or 64).\n \n    procedure Aggregate_Constraint_Checks\n      (Exp       : Node_Id;"}]}