{"sha": "6434da253184ad038fef9a6e90c25fe33f13fad9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQzNGRhMjUzMTg0YWQwMzhmZWY5YTZlOTBjMjVmZTMzZjEzZmFkOQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-01-04T08:28:46Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-01-04T08:28:46Z"}, "message": "Initial revision\n\nFrom-SVN: r162", "tree": {"sha": "df376646f81b41df0cfe10323fa1e05e9a69a633", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df376646f81b41df0cfe10323fa1e05e9a69a633"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6434da253184ad038fef9a6e90c25fe33f13fad9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6434da253184ad038fef9a6e90c25fe33f13fad9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6434da253184ad038fef9a6e90c25fe33f13fad9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6434da253184ad038fef9a6e90c25fe33f13fad9/comments", "author": null, "committer": null, "parents": [{"sha": "6a592e69f586488ff5b3fa6829a975e56c5bd6fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a592e69f586488ff5b3fa6829a975e56c5bd6fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a592e69f586488ff5b3fa6829a975e56c5bd6fd"}], "stats": {"total": 1443, "additions": 1443, "deletions": 0}, "files": [{"sha": "7bba5661606852d976f99aea64c8db21671df23b", "filename": "gcc/config/fx80/fx80.h", "status": "added", "additions": 1443, "deletions": 0, "changes": 1443, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6434da253184ad038fef9a6e90c25fe33f13fad9/gcc%2Fconfig%2Ffx80%2Ffx80.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6434da253184ad038fef9a6e90c25fe33f13fad9/gcc%2Fconfig%2Ffx80%2Ffx80.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffx80%2Ffx80.h?ref=6434da253184ad038fef9a6e90c25fe33f13fad9", "patch": "@@ -0,0 +1,1443 @@\n+/* Definitions of target machine for GNU compiler.  Alliant FX version.\n+   Copyright (C) 1989 Free Software Foundation, Inc.\n+   Adapted from m68k.h by Paul Petersen (petersen@uicsrd.csrd.uiuc.edu)\n+   and Joe Weening (weening@gang-of-four.stanford.edu).\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+\n+/* This file is based on m68k.h, simplified by removing support for\n+   the Sun FPA and other things not applicable to the Alliant.  Some\n+   remnants of these features remain.  */\n+\n+/* Names to predefine in the preprocessor for this target machine.  */\n+\n+#define CPP_PREDEFINES \"-Dmc68000 -Dalliant -Dunix\"\n+\n+/* Print subsidiary information on the compiler version in use.  */\n+\n+#define TARGET_VERSION fprintf (stderr, \" (Alliant)\");\n+\n+/* Run-time compilation parameters selecting different hardware\n+   subsets.  The Alliant IP is an mc68020.  (Older mc68010-based IPs\n+   are no longer supported.)  The Alliant CE is 68020-compatible, and\n+   also has floating point, vector and concurrency instructions.\n+\n+   Although the IP doesn't have floating point, it emulates it in the\n+   operating system.  Using this generally is faster than running code\n+   compiled with -msoft-float, because the soft-float code still uses\n+   (simulated) FP registers and ends up emulating several fmove{s,d}\n+   instructions per call.  So I don't recommend using soft-float for\n+   any Alliant code.  -- JSW\n+*/\n+\n+extern int target_flags;\n+\n+/* Macros used in the machine description to test the flags.  */\n+\n+/* Compile for a 68020 (not a 68000 or 68010).  */\n+#define TARGET_68020 (target_flags & 1)\n+/* Compile CE insns for floating point (not library calls).  */\n+#define TARGET_CE (target_flags & 2)\n+/* Compile using 68020 bitfield insns.  */\n+#define TARGET_BITFIELD (target_flags & 4)\n+/* Compile with 16-bit `int'.  */\n+#define TARGET_SHORT (target_flags & 040)\n+\n+/* Default 3 means compile 68020 and CE instructions.  We don't use\n+   bitfield instructions because there appears to be a bug in the\n+   implementation of bfins on the CE.  */\n+\n+#define TARGET_DEFAULT 3\n+\n+/* Define __HAVE_CE__ in preprocessor according to the -m flags.\n+   This will control the use of inline FP insns in certain macros.\n+   Also inform the program which CPU this is for.  */\n+\n+#if TARGET_DEFAULT & 02\n+\n+/* -mce is the default */\n+#define CPP_SPEC \\\n+\"%{!msoft-float:-D__HAVE_CE__ }\\\n+%{m68000:-Dmc68010}%{mc68000:-Dmc68010}%{!mc68000:%{!m68000:-Dmc68020}}\"\n+\n+#else\n+\n+/* -msoft-float is the default */\n+#define CPP_SPEC \\\n+\"%{mce:-D__HAVE_CE__ }\\\n+%{m68000:-Dmc68010}%{mc68000:-Dmc68010}%{!mc68000:%{!m68000:-Dmc68020}}\"\n+\n+#endif\n+\n+/* Link with libg.a when debugging, for dbx's sake.  */\n+\n+#define LIB_SPEC \"%{g:-lg} %{!p:%{!pg:-lc}}%{p:-lc_p}%{pg:-lc_p} \"\n+\n+/* Make the linker remove temporary labels, since the Alliant assembler\n+   doesn't.  */\n+\n+#define LINK_SPEC \"-X\"\n+\n+/* Every structure or union's size must be a multiple of 2 bytes.  */\n+\n+#define STRUCTURE_SIZE_BOUNDARY 16\n+\n+/* This is BSD, so it wants DBX format.  */\n+\n+#define DBX_DEBUGGING_INFO\n+\n+/* Macro to define tables used to set the flags.\n+   This is a list in braces of pairs in braces,\n+   each pair being { \"NAME\", VALUE }\n+   where VALUE is the bits to set or minus the bits to clear.\n+   An empty string NAME is used to identify the default VALUE.  */\n+\n+#define TARGET_SWITCHES  \\\n+  { { \"68020\", 5},\t\t\t\t\\\n+    { \"c68020\", 5},\t\t\t\t\\\n+    { \"bitfield\", 4},\t\t\t\t\\\n+    { \"68000\", -7},\t\t\t\t\\\n+    { \"c68000\", -7},\t\t\t\t\\\n+    { \"soft-float\", -2},\t\t\t\\\n+    { \"nobitfield\", -4},\t\t\t\\\n+    { \"short\", 040},\t\t\t\t\\\n+    { \"noshort\", -040},\t\t\t\t\\\n+    { \"\", TARGET_DEFAULT}}\n+\f\n+/* target machine storage layout */\n+\n+/* Define this if most significant bit is lowest numbered\n+   in instructions that operate on numbered bit-fields.\n+   This is true for 68020 insns such as bfins and bfexts.\n+   We make it true always by avoiding using the single-bit insns\n+   except in special cases with constant bit numbers.  */\n+#define BITS_BIG_ENDIAN 1\n+\n+/* Define this if most significant byte of a word is the lowest numbered.  */\n+/* That is true on the 68000.  */\n+#define BYTES_BIG_ENDIAN 1\n+\n+/* Define this if most significant word of a multiword number is the lowest\n+   numbered.  */\n+/* For 68000 we can decide arbitrarily\n+   since there are no machine instructions for them.  */\n+#define WORDS_BIG_ENDIAN 0\n+\n+/* number of bits in an addressible storage unit */\n+#define BITS_PER_UNIT 8\n+\n+/* Width in bits of a \"word\", which is the contents of a machine register.\n+   Note that this is not necessarily the width of data type `int';\n+   if using 16-bit ints on a 68000, this would still be 32.\n+   But on a machine with 16-bit registers, this would be 16.  */\n+#define BITS_PER_WORD 32\n+\n+/* Width of a word, in units (bytes).  */\n+#define UNITS_PER_WORD 4\n+\n+/* Width in bits of a pointer.\n+   See also the macro `Pmode' defined below.  */\n+#define POINTER_SIZE 32\n+\n+/* Allocation boundary (in *bits*) for storing arguments in argument list.  */\n+#define PARM_BOUNDARY (TARGET_SHORT ? 16 : 32)\n+\n+/* Boundary (in *bits*) on which stack pointer should be aligned.  */\n+#define STACK_BOUNDARY 16\n+\n+/* Allocation boundary (in *bits*) for the code of a function.  */\n+#define FUNCTION_BOUNDARY 16\n+\n+/* Alignment of field after `int : 0' in a structure.  */\n+#define EMPTY_FIELD_BOUNDARY 16\n+\n+/* No data type wants to be aligned rounder than this.  */\n+#define BIGGEST_ALIGNMENT 16\n+\n+/* Define this if move instructions will actually fail to work\n+   when given unaligned data.  */\n+#define STRICT_ALIGNMENT\n+\n+/* Define number of bits in most basic integer type.\n+   (If undefined, default is BITS_PER_WORD).  */\n+\n+#define INT_TYPE_SIZE (TARGET_SHORT ? 16 : 32)\n+\n+/* Define these to avoid dependence on meaning of `int'.\n+   Note that WCHAR_TYPE_SIZE is used in cexp.y,\n+   where TARGET_SHORT is not available.  */\n+\n+#define WCHAR_TYPE \"long int\"\n+#define WCHAR_TYPE_SIZE 32\n+\f\n+/* Standard register usage.  */\n+\n+/* Number of actual hardware registers.\n+   The hardware registers are assigned numbers for the compiler\n+   from 0 to just below FIRST_PSEUDO_REGISTER.\n+   All registers that the compiler knows about must be given numbers,\n+   even those that are not normally considered general registers.\n+   For the Alliant, we give the data registers numbers 0-7,\n+   the address registers numbers 010-017,\n+   and the floating point registers numbers 020-027.  */\n+#define FIRST_PSEUDO_REGISTER 24\n+\n+/* 1 for registers that have pervasive standard uses\n+   and are not available for the register allocator.\n+   On the Alliant, these are a0 (argument pointer),\n+   a6 (frame pointer) and a7 (stack pointer).  */\n+#define FIXED_REGISTERS  \\\n+ {0, 0, 0, 0, 0, 0, 0, 0, \\\n+  1, 0, 0, 0, 0, 0, 1, 1, \\\n+  0, 0, 0, 0, 0, 0, 0, 0  }\n+\n+/* 1 for registers not available across function calls.\n+   These must include the FIXED_REGISTERS and also any\n+   registers that can be used without being saved.\n+   The latter must include the registers where values are returned\n+   and the register where structure-value addresses are passed.\n+   Aside from that, you can include as many other registers as you like.\n+   The Alliant calling sequence allows a function to use any register,\n+   so we include them all here.  */\n+\n+#define CALL_USED_REGISTERS \\\n+ {1, 1, 1, 1, 1, 1, 1, 1, \\\n+  1, 1, 1, 1, 1, 1, 1, 1, \\\n+  1, 1, 1, 1, 1, 1, 1, 1  }\n+\n+/* Return number of consecutive hard regs needed starting at reg REGNO\n+   to hold something of mode MODE.\n+   This is ordinarily the length in words of a value of mode MODE\n+   but can be less for certain modes in special long registers.\n+\n+   On the Alliant, ordinary registers hold 32 bits worth;\n+   for the FP registers, a single register is always enough for\n+   any floating-point value.  */\n+#define HARD_REGNO_NREGS(REGNO, MODE)   \\\n+  ((REGNO) >= 16 ? GET_MODE_NUNITS (MODE)\t\\\n+   : ((GET_MODE_SIZE (MODE) + UNITS_PER_WORD - 1) / UNITS_PER_WORD))\n+\n+/* Value is 1 if hard register REGNO can hold a value of machine-mode MODE.\n+   On the Alliant, the cpu registers can hold any mode but the FP registers\n+   can hold only floating point.  */\n+#define HARD_REGNO_MODE_OK(REGNO, MODE)\t\t\\\n+  ((REGNO) < 16 || GET_MODE_CLASS (MODE) == MODE_FLOAT\t\\\n+   || GET_MODE_CLASS (MODE) == MODE_COMPLEX_FLOAT)\n+\n+/* Value is 1 if it is a good idea to tie two pseudo registers\n+   when one has mode MODE1 and one has mode MODE2.\n+   If HARD_REGNO_MODE_OK could produce different values for MODE1 and MODE2,\n+   for any hard reg, then this must be 0 for correct output.  */\n+#define MODES_TIEABLE_P(MODE1, MODE2)\t\t\t\\\n+   (((MODE1) == SFmode || (MODE1) == DFmode\t\t\\\n+     || (MODE1) == SCmode || (MODE1) == DCmode)\t\t\\\n+       == ((MODE2) == SFmode || (MODE2) == DFmode\t\\\n+\t   || (MODE2) == SCmode || (MODE2) == DCmode))\n+\n+/* Specify the registers used for certain standard purposes.\n+   The values of these macros are register numbers.  */\n+\n+/* m68000 pc isn't overloaded on a register.  */\n+/* #define PC_REGNUM  */\n+\n+/* Register to use for pushing function arguments.  */\n+#define STACK_POINTER_REGNUM 15\n+\n+/* Base register for access to local variables of the function.  */\n+#define FRAME_POINTER_REGNUM 14\n+\n+/* Value should be nonzero if functions must have frame pointers.\n+   Zero means the frame pointer need not be set up (and parms\n+   may be accessed via the stack pointer) in functions that seem suitable.\n+   This is computed in `reload', in reload1.c.  */\n+/* Set for now on Alliant until we find a way to make this work with\n+   their calling sequence.  */\n+#define FRAME_POINTER_REQUIRED 1\n+\n+/* Base register for access to arguments of the function.  */\n+#define ARG_POINTER_REGNUM  8 \n+\n+/* Register in which static-chain is passed to a function.  */\n+#define STATIC_CHAIN_REGNUM 10\n+\n+/* Register in which address to store a structure value\n+   is passed to a function.  */\n+#define STRUCT_VALUE_REGNUM 9\n+\f\n+/* Define the classes of registers for register constraints in the\n+   machine description.  Also define ranges of constants.\n+\n+   One of the classes must always be named ALL_REGS and include all hard regs.\n+   If there is more than one class, another class must be named NO_REGS\n+   and contain no registers.\n+\n+   The name GENERAL_REGS must be the name of a class (or an alias for\n+   another name such as ALL_REGS).  This is the class of registers\n+   that is allowed by \"g\" or \"r\" in a register constraint.\n+   Also, registers outside this class are allocated only when\n+   instructions express preferences for them.\n+\n+   The classes must be numbered in nondecreasing order; that is,\n+   a larger-numbered class must never be contained completely\n+   in a smaller-numbered class.\n+\n+   For any two classes, it is very desirable that there be another\n+   class that represents their union.  */\n+\n+/* The Alliant has three kinds of registers, so eight classes would be\n+   a complete set.  One of them is not needed.  */\n+\n+enum reg_class { NO_REGS, FP_REGS, DATA_REGS, DATA_OR_FP_REGS,\n+  ADDR_REGS, GENERAL_REGS, ALL_REGS, LIM_REG_CLASSES };\n+\n+#define N_REG_CLASSES (int) LIM_REG_CLASSES\n+\n+/* Give names of register classes as strings for dump file.   */\n+\n+#define REG_CLASS_NAMES \\\n+ { \"NO_REGS\", \"FP_REGS\", \"DATA_REGS\", \"DATA_OR_FP_REGS\",  \\\n+   \"ADDR_REGS\", \"GENERAL_REGS\", \"ALL_REGS\" }\n+\n+/* Define which registers fit in which classes.\n+   This is an initializer for a vector of HARD_REG_SET\n+   of length N_REG_CLASSES.  */\n+\n+#define REG_CLASS_CONTENTS \\\n+{\t\t\t\t\t\\\n+ 0,\t\t/* NO_REGS */\t\t\\\n+ 0x00ff0000,\t/* FP_REGS */\t\t\\\n+ 0x000000ff,\t/* DATA_REGS */\t\t\\\n+ 0x00ff00ff,\t/* DATA_OR_FP_REGS */\t\\\n+ 0x0000ff00,\t/* ADDR_REGS */\t\t\\\n+ 0x0000ffff,\t/* GENERAL_REGS */\t\\\n+ 0x00ffffff\t/* ALL_REGS */\t\t\\\n+}\n+\n+/* The same information, inverted:\n+   Return the class number of the smallest class containing\n+   reg number REGNO.  This could be a conditional expression\n+   or could index an array.  */\n+\n+extern enum reg_class regno_reg_class[];\n+#define REGNO_REG_CLASS(REGNO) (regno_reg_class[(REGNO)>>3])\n+\n+/* The class value for index registers, and the one for base regs.  */\n+\n+#define INDEX_REG_CLASS GENERAL_REGS\n+#define BASE_REG_CLASS ADDR_REGS\n+\n+/* Get reg_class from a letter such as appears in the machine description.  */\n+\n+#define REG_CLASS_FROM_LETTER(C) \\\n+  ((C) == 'a' ? ADDR_REGS :\t\t\t\\\n+   ((C) == 'd' ? DATA_REGS :\t\t\t\\\n+    ((C) == 'f' ? FP_REGS :\t\t\t\\\n+     NO_REGS)))\n+\n+/* The letters I, J, K, L and M in a register constraint string\n+   can be used to stand for particular ranges of immediate operands.\n+   This macro defines what the ranges are.\n+   C is the letter, and VALUE is a constant value.\n+   Return 1 if VALUE is in the range specified by C.\n+\n+   For the 68000, `I' is used for the range 1 to 8\n+   allowed as immediate shift counts and in addq.\n+   `J' is used for the range of signed numbers that fit in 16 bits.\n+   `K' is for numbers that moveq can't handle.\n+   `L' is for range -8 to -1, range of values that can be added with subq.  */\n+\n+#define CONST_OK_FOR_LETTER_P(VALUE, C)  \\\n+  ((C) == 'I' ? (VALUE) > 0 && (VALUE) <= 8 :    \\\n+   (C) == 'J' ? (VALUE) >= -0x8000 && (VALUE) <= 0x7FFF :\t\\\n+   (C) == 'K' ? (VALUE) < -0x80 || (VALUE) >= 0x80 :\t\\\n+   (C) == 'L' ? (VALUE) < 0 && (VALUE) >= -8 : 0)\n+\n+#define CONST_DOUBLE_OK_FOR_LETTER_P(VALUE, C)  0\n+\n+/* Given an rtx X being reloaded into a reg required to be\n+   in class CLASS, return the class of reg to actually use.\n+   In general this is just CLASS; but on some machines\n+   in some cases it is preferable to use a more restrictive class.\n+   On the 68000 series, use a data reg if possible when the\n+   value is a constant in the range where moveq could be used\n+   and we ensure that QImodes are reloaded into data regs.  */\n+\n+#define PREFERRED_RELOAD_CLASS(X,CLASS)  \\\n+  ((GET_CODE (X) == CONST_INT\t\t\t\\\n+    && (unsigned) (INTVAL (X) + 0x80) < 0x100\t\\\n+    && (CLASS) != ADDR_REGS)\t\t\t\\\n+   ? DATA_REGS\t\t\t\t\t\\\n+   : GET_MODE (X) == QImode\t\t\t\\\n+   ? DATA_REGS\t\t\t\t\t\\\n+   : (CLASS))\n+\n+/* Return the maximum number of consecutive registers\n+   needed to represent mode MODE in a register of class CLASS.  */\n+/* On the 68000, this is the size of MODE in words,\n+   except in the FP regs, where a single reg is always enough.  */\n+#define CLASS_MAX_NREGS(CLASS, MODE)\t\\\n+ ((CLASS) == FP_REGS ? 1 \\\n+  : ((GET_MODE_SIZE (MODE) + UNITS_PER_WORD - 1) / UNITS_PER_WORD))\n+\n+/* Moves between fp regs and other regs are two insns.  */\n+#define REGISTER_MOVE_COST(CLASS1, CLASS2)\t\t\\\n+  ((((CLASS1) == FP_REGS && (CLASS2) != FP_REGS)\t\\\n+    || ((CLASS2) == FP_REGS && (CLASS1) != FP_REGS))\t\\\n+   ? 4 : 2)\n+\f\n+/* Stack layout; function entry, exit and calling.  */\n+\n+/* Define this if pushing a word on the stack\n+   makes the stack pointer a smaller address.  */\n+#define STACK_GROWS_DOWNWARD\n+\n+/* Define this if the nominal address of the stack frame\n+   is at the high-address end of the local variables;\n+   that is, each additional local variable allocated\n+   goes at a more negative offset in the frame.  */\n+#define FRAME_GROWS_DOWNWARD\n+\n+/* The Alliant uses -fcaller-saves by default.  */\n+#define DEFAULT_CALLER_SAVES\n+\n+/* Offset within stack frame to start allocating local variables at.\n+   If FRAME_GROWS_DOWNWARD, this is the offset to the END of the\n+   first local allocated.  Otherwise, it is the offset to the BEGINNING\n+   of the first local allocated.  */\n+#define STARTING_FRAME_OFFSET -4\n+\n+/* If we generate an insn to push BYTES bytes,\n+   this says how many the stack pointer really advances by.\n+   On the 68000, sp@- in a byte insn really pushes a word.  */\n+#define PUSH_ROUNDING(BYTES) (((BYTES) + 1) & ~1)\n+\n+/* Offset of first parameter from the argument pointer register value.  */\n+#define FIRST_PARM_OFFSET(FNDECL) 0\n+\n+/* Value is the number of bytes of arguments automatically\n+   popped when returning from a subroutine call.\n+   FUNTYPE is the data type of the function (as a tree),\n+   or for a library call it is an identifier node for the subroutine name.\n+   SIZE is the number of bytes of arguments passed on the stack. \n+\n+   On the Alliant we define this as SIZE and make the calling sequence\n+   (in alliant.md) pop the args.  This wouldn't be necessary if we\n+   could add to the pending stack adjustment the size of the argument\n+   descriptors that are pushed after the arguments.  */\n+\n+#define RETURN_POPS_ARGS(FUNTYPE,SIZE) (SIZE)\n+\n+/* Define how to find the value returned by a function.\n+   VALTYPE is the data type of the value (as a tree).\n+   If the precise function being called is known, FUNC is its FUNCTION_DECL;\n+   otherwise, FUNC is 0.  */\n+\n+/* On the Alliant the return value is in FP0 if real, else D0.  */\n+\n+#define FUNCTION_VALUE(VALTYPE, FUNC)  \\\n+  (TREE_CODE (VALTYPE) == REAL_TYPE \\\n+   ? gen_rtx (REG, TYPE_MODE (VALTYPE), 16) \\\n+   : gen_rtx (REG, TYPE_MODE (VALTYPE), 0))\n+\n+/* Define how to find the value returned by a library function\n+   assuming the value has mode MODE.  */\n+\n+/* On the Alliant the return value is in FP0 if real, else D0.  The\n+   Alliant library functions for floating-point emulation return their\n+   values both in FP0 and in D0/D1.  But since not all libgcc functions\n+   return the results of these directly, we cannot assume that D0/D1\n+   contain the values we expect on return from a libgcc function.  */\n+\n+#define LIBCALL_VALUE(MODE)  \\\n+  (((MODE) == DFmode || (MODE) == SFmode) \\\n+   ? gen_rtx (REG, MODE, 16) \\\n+   : gen_rtx (REG, MODE, 0))\n+\n+/* 1 if N is a possible register number for a function value.\n+   On the Alliant, D0 and FP0 are the only registers thus used.\n+   (No need to mention D1 when used as a pair with D0.)  */\n+\n+#define FUNCTION_VALUE_REGNO_P(N) (((N) & ~16) == 0)\n+\n+/* Define this if PCC uses the nonreentrant convention for returning\n+   structure and union values.  */\n+\n+#define PCC_STATIC_STRUCT_RETURN\n+\n+/* 1 if N is a possible register number for function argument passing.\n+   On the Alliant, no registers are used in this way.  */\n+\n+#define FUNCTION_ARG_REGNO_P(N) 0\n+\f\n+/* Define a data type for recording info about an argument list\n+   during the scan of that argument list.  This data type should\n+   hold all necessary information about the function itself\n+   and about the args processed so far, enough to enable macros\n+   such as FUNCTION_ARG to determine where the next arg should go.\n+\n+   On the Alliant, this is a single integer, which is a number of bytes\n+   of arguments scanned so far.  */\n+\n+#define CUMULATIVE_ARGS int\n+\n+/* Initialize a variable CUM of type CUMULATIVE_ARGS\n+   for a call to a function whose data type is FNTYPE.\n+   For a library call, FNTYPE is 0.\n+\n+   On the Alliant, the offset starts at 0.  */\n+\n+#define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME)\t\\\n+ ((CUM) = 0)\n+\n+/* Update the data in CUM to advance over an argument\n+   of mode MODE and data type TYPE.\n+   (TYPE is null for libcalls where that information may not be available.)  */\n+\n+#define FUNCTION_ARG_ADVANCE(CUM, MODE, TYPE, NAMED)\t\\\n+ ((CUM) += ((MODE) != BLKmode\t\t\t\\\n+\t    ? (GET_MODE_SIZE (MODE) + 3) & ~3\t\\\n+\t    : (int_size_in_bytes (TYPE) + 3) & ~3))\n+\n+/* Define where to put the arguments to a function.\n+   Value is zero to push the argument on the stack,\n+   or a hard register in which to store the argument.\n+\n+   MODE is the argument's machine mode.\n+   TYPE is the data type of the argument (as a tree).\n+    This is null for libcalls where that information may\n+    not be available.\n+   CUM is a variable of type CUMULATIVE_ARGS which gives info about\n+    the preceding args and about the function being called.\n+   NAMED is nonzero if this argument is a named parameter\n+    (otherwise it is an extra parameter matching an ellipsis).  */\n+\n+/* On the Alliant all args are pushed.  */\n+\n+#define FUNCTION_ARG(CUM, MODE, TYPE, NAMED) 0\n+\n+/* For an arg passed partly in registers and partly in memory,\n+   this is the number of registers used.\n+   For args passed entirely in registers or entirely in memory, zero.  */\n+\n+#define FUNCTION_ARG_PARTIAL_NREGS(CUM, MODE, TYPE, NAMED) 0\n+\n+/* This macro generates the assembly code for function entry.\n+   FILE is a stdio stream to output the code to.\n+   SIZE is an int: how many units of temporary storage to allocate.\n+   Refer to the array `regs_ever_live' to determine which registers\n+   to save; `regs_ever_live[I]' is nonzero if register number I\n+   is ever used in the function.  This macro is responsible for\n+   knowing which registers should not be saved even if used.\n+   The Alliant uses caller-saves, so this macro is very simple.  */\n+\n+#define FUNCTION_PROLOGUE(FILE, SIZE)     \\\n+{ int fsize = ((SIZE) - STARTING_FRAME_OFFSET + 3) & -4;\t\\\n+  if (frame_pointer_needed)\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      if (fsize < 0x8000)\t\t\t\t\t\\\n+\tfprintf(FILE,\"\\tlinkw a6,#%d\\n\", -fsize);\t\t\\\n+      else if (TARGET_68020)\t\t\t\t\t\\\n+\tfprintf(FILE,\"\\tlinkl a6,#%d\\n\", -fsize);\t\t\\\n+      else\t\t\t\t\t\t\t\\\n+\tfprintf(FILE,\"\\tlinkw a6,#0\\n\\tsubl #%d,sp\\n\", fsize);  \\\n+      fprintf(FILE, \"\\tmovl a0,a6@(-4)\\n\" ); }}\n+\n+/* Output assembler code to FILE to increment profiler label # LABELNO\n+   for profiling a function entry.  */\n+\n+#define FUNCTION_PROFILER(FILE, LABELNO)  \\\n+  fprintf (FILE, \"\\tjbsr __mcount_\\n\")\n+\n+/* EXIT_IGNORE_STACK should be nonzero if, when returning from a function,\n+   the stack pointer does not matter.  The value is tested only in\n+   functions that have frame pointers.\n+   No definition is equivalent to always zero.  */\n+\n+#define EXIT_IGNORE_STACK 1\n+\n+/* This macro generates the assembly code for function exit,\n+   on machines that need it.  If FUNCTION_EPILOGUE is not defined\n+   then individual return instructions are generated for each\n+   return statement.  Args are same as for FUNCTION_PROLOGUE.\n+\n+   The function epilogue should not depend on the current stack pointer!\n+   It should use the frame pointer only.  This is mandatory because\n+   of alloca; we also take advantage of it to omit stack adjustments\n+   before returning.  */\n+\n+#define FUNCTION_EPILOGUE(FILE, SIZE) \\\n+{ if (frame_pointer_needed)\t\t\t\t\t\\\n+    fprintf (FILE, \"\\tunlk a6\\n\");\t\t\t\t\\\n+  fprintf (FILE, \"\\trts\\n\"); }\n+\n+/* Store in the variable DEPTH the initial difference between the\n+   frame pointer reg contents and the stack pointer reg contents,\n+   as of the start of the function body.  This depends on the layout\n+   of the fixed parts of the stack frame and on how registers are saved.  */\n+\n+#define INITIAL_FRAME_POINTER_OFFSET(DEPTH)\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  int regno;\t\t\t\t\t\t\t\\\n+  int offset = -4;\t\t\t\t\t\t\\\n+  for (regno = 16; regno < FIRST_PSEUDO_REGISTER; regno++)\t\\\n+    if (regs_ever_live[regno] && ! call_used_regs[regno])\t\\\n+      offset += 12;\t\t\t\t\t\t\\\n+  for (regno = 0; regno < 16; regno++)\t\t\t\t\\\n+    if (regs_ever_live[regno] && ! call_used_regs[regno])\t\\\n+      offset += 4;\t\t\t\t\t\t\\\n+  (DEPTH) = offset - ((get_frame_size () + 3) & -4);\t\t\\\n+}\n+\f\n+/* Addressing modes, and classification of registers for them.  */\n+\n+#define HAVE_POST_INCREMENT\n+/* #define HAVE_POST_DECREMENT */\n+\n+#define HAVE_PRE_DECREMENT\n+/* #define HAVE_PRE_INCREMENT */\n+\n+/* Macros to check register numbers against specific register classes.  */\n+\n+/* These assume that REGNO is a hard or pseudo reg number.\n+   They give nonzero only if REGNO is a hard reg of the suitable class\n+   or a pseudo reg currently allocated to a suitable hard reg.\n+   Since they use reg_renumber, they are safe only once reg_renumber\n+   has been allocated, which happens in local-alloc.c.  */\n+\n+#define REGNO_OK_FOR_INDEX_P(REGNO) \\\n+((REGNO) < 16 || (unsigned) reg_renumber[REGNO] < 16)\n+#define REGNO_OK_FOR_BASE_P(REGNO) \\\n+(((REGNO) ^ 010) < 8 || (unsigned) (reg_renumber[REGNO] ^ 010) < 8)\n+#define REGNO_OK_FOR_DATA_P(REGNO) \\\n+((REGNO) < 8 || (unsigned) reg_renumber[REGNO] < 8)\n+#define REGNO_OK_FOR_FP_P(REGNO) \\\n+(((REGNO) ^ 020) < 8 || (unsigned) (reg_renumber[REGNO] ^ 020) < 8)\n+\n+/* Now macros that check whether X is a register and also,\n+   strictly, whether it is in a specified class.\n+\n+   These macros are specific to the 68000, and may be used only\n+   in code for printing assembler insns and in conditions for\n+   define_optimization.  */\n+\n+/* 1 if X is a data register.  */\n+\n+#define DATA_REG_P(X) (REG_P (X) && REGNO_OK_FOR_DATA_P (REGNO (X)))\n+\n+/* 1 if X is an fp register.  */\n+\n+#define FP_REG_P(X) (REG_P (X) && REGNO_OK_FOR_FP_P (REGNO (X)))\n+\n+/* 1 if X is an address register  */\n+\n+#define ADDRESS_REG_P(X) (REG_P (X) && REGNO_OK_FOR_BASE_P (REGNO (X)))\n+\f\n+/* Maximum number of registers that can appear in a valid memory address.  */\n+\n+#define MAX_REGS_PER_ADDRESS 2\n+\n+/* Recognize any constant value that is a valid address.  */\n+\n+#define CONSTANT_ADDRESS_P(X)  CONSTANT_P (X)\n+\n+/* Nonzero if the constant value X is a legitimate general operand.\n+   It is given that X satisfies CONSTANT_P or is a CONST_DOUBLE.  */\n+\n+/* Alliant FP instructions don't take immediate operands, so this\n+   forces them into memory.  */\n+#define LEGITIMATE_CONSTANT_P(X) (GET_CODE (X) != CONST_DOUBLE)\n+\n+/* The macros REG_OK_FOR..._P assume that the arg is a REG rtx\n+   and check its validity for a certain class.\n+   We have two alternate definitions for each of them.\n+   The usual definition accepts all pseudo regs; the other rejects\n+   them unless they have been allocated suitable hard regs.\n+   The symbol REG_OK_STRICT causes the latter definition to be used.\n+\n+   Most source files want to accept pseudo regs in the hope that\n+   they will get allocated to the class that the insn wants them to be in.\n+   Source files for reload pass need to be strict.\n+   After reload, it makes no difference, since pseudo regs have\n+   been eliminated by then.  */\n+\n+#ifndef REG_OK_STRICT\n+\n+/* Nonzero if X is a hard reg that can be used as an index\n+   or if it is a pseudo reg.  */\n+#define REG_OK_FOR_INDEX_P(X) ((REGNO (X) ^ 020) >= 8)\n+/* Nonzero if X is a hard reg that can be used as a base reg\n+   or if it is a pseudo reg.  */\n+#define REG_OK_FOR_BASE_P(X) ((REGNO (X) & ~027) != 0)\n+\n+#else\n+\n+/* Nonzero if X is a hard reg that can be used as an index.  */\n+#define REG_OK_FOR_INDEX_P(X) REGNO_OK_FOR_INDEX_P (REGNO (X))\n+/* Nonzero if X is a hard reg that can be used as a base reg.  */\n+#define REG_OK_FOR_BASE_P(X) REGNO_OK_FOR_BASE_P (REGNO (X))\n+\n+#endif\n+\f\n+/* GO_IF_LEGITIMATE_ADDRESS recognizes an RTL expression\n+   that is a valid memory address for an instruction.\n+   The MODE argument is the machine mode for the MEM expression\n+   that wants to use this address.\n+\n+   The other macros defined here are used only in GO_IF_LEGITIMATE_ADDRESS.  */\n+\n+#define INDIRECTABLE_1_ADDRESS_P(X)  \\\n+  (CONSTANT_ADDRESS_P (X)\t\t\t\t\t\t\\\n+   || (GET_CODE (X) == REG && REG_OK_FOR_BASE_P (X))\t\t\t\\\n+   || ((GET_CODE (X) == PRE_DEC || GET_CODE (X) == POST_INC)\t\t\\\n+       && REG_P (XEXP (X, 0))\t\t\t\t\t\t\\\n+       && REG_OK_FOR_BASE_P (XEXP (X, 0)))\t\t\t\t\\\n+   || (GET_CODE (X) == PLUS\t\t\t\t\t\t\\\n+       && REG_P (XEXP (X, 0)) && REG_OK_FOR_BASE_P (XEXP (X, 0))\t\\\n+       && GET_CODE (XEXP (X, 1)) == CONST_INT\t\t\t\t\\\n+       && ((unsigned) INTVAL (XEXP (X, 1)) + 0x8000) < 0x10000))\n+\n+#define GO_IF_NONINDEXED_ADDRESS(X, ADDR)  \\\n+{ if (INDIRECTABLE_1_ADDRESS_P (X)) goto ADDR; }\n+\n+#define GO_IF_INDEXABLE_BASE(X, ADDR)\t\\\n+{ if (GET_CODE (X) == LABEL_REF) goto ADDR;\t\t\t\t\\\n+  if (GET_CODE (X) == REG && REG_OK_FOR_BASE_P (X)) goto ADDR; }\n+\n+#define GO_IF_INDEXING(X, ADDR)\t\\\n+{ if (GET_CODE (X) == PLUS && LEGITIMATE_INDEX_P (XEXP (X, 0)))\t\t\\\n+    { GO_IF_INDEXABLE_BASE (XEXP (X, 1), ADDR); }\t\t\t\\\n+  if (GET_CODE (X) == PLUS && LEGITIMATE_INDEX_P (XEXP (X, 1)))\t\t\\\n+    { GO_IF_INDEXABLE_BASE (XEXP (X, 0), ADDR); } }\n+\n+#define GO_IF_INDEXED_ADDRESS(X, ADDR)\t \\\n+{ GO_IF_INDEXING (X, ADDR);\t\t\t\t\t\t\\\n+  if (GET_CODE (X) == PLUS)\t\t\t\t\t\t\\\n+    { if (GET_CODE (XEXP (X, 1)) == CONST_INT\t\t\t\t\\\n+\t  && (unsigned) INTVAL (XEXP (X, 1)) + 0x80 < 0x100)\t\t\\\n+\t{ rtx go_temp = XEXP (X, 0); GO_IF_INDEXING (go_temp, ADDR); }\t\\\n+      if (GET_CODE (XEXP (X, 0)) == CONST_INT\t\t\t\t\\\n+\t  && (unsigned) INTVAL (XEXP (X, 0)) + 0x80 < 0x100)\t\t\\\n+\t{ rtx go_temp = XEXP (X, 1); GO_IF_INDEXING (go_temp, ADDR); } } }\n+\n+#define LEGITIMATE_INDEX_REG_P(X)   \\\n+  ((GET_CODE (X) == REG && REG_OK_FOR_INDEX_P (X))\t\\\n+   || (GET_CODE (X) == SIGN_EXTEND\t\t\t\\\n+       && GET_CODE (XEXP (X, 0)) == REG\t\t\t\\\n+       && GET_MODE (XEXP (X, 0)) == HImode\t\t\\\n+       && REG_OK_FOR_INDEX_P (XEXP (X, 0))))\n+\n+#define LEGITIMATE_INDEX_P(X)   \\\n+   (LEGITIMATE_INDEX_REG_P (X)\t\t\t\t\\\n+    || (TARGET_68020 && GET_CODE (X) == MULT\t\t\\\n+\t&& LEGITIMATE_INDEX_REG_P (XEXP (X, 0))\t\t\\\n+\t&& GET_CODE (XEXP (X, 1)) == CONST_INT\t\t\\\n+\t&& (INTVAL (XEXP (X, 1)) == 2\t\t\t\\\n+\t    || INTVAL (XEXP (X, 1)) == 4\t\t\\\n+\t    || INTVAL (XEXP (X, 1)) == 8)))\n+\n+#define GO_IF_LEGITIMATE_ADDRESS(MODE, X, ADDR)  \\\n+{ GO_IF_NONINDEXED_ADDRESS (X, ADDR);\t\t\t\\\n+  GO_IF_INDEXED_ADDRESS (X, ADDR); }\n+\f\n+/* Try machine-dependent ways of modifying an illegitimate address\n+   to be legitimate.  If we find one, return the new, valid address.\n+   This macro is used in only one place: `memory_address' in explow.c.\n+\n+   OLDX is the address as it was before break_out_memory_refs was called.\n+   In some cases it is useful to look at this to decide what needs to be done.\n+\n+   MODE and WIN are passed so that this macro can use\n+   GO_IF_LEGITIMATE_ADDRESS.\n+\n+   It is always safe for this macro to do nothing.  It exists to recognize\n+   opportunities to optimize the output.\n+\n+   For the 68000, we handle X+REG by loading X into a register R and\n+   using R+REG.  R will go in an address reg and indexing will be used.\n+   However, if REG is a broken-out memory address or multiplication,\n+   nothing needs to be done because REG can certainly go in an address reg.  */\n+\n+#define LEGITIMIZE_ADDRESS(X,OLDX,MODE,WIN)   \\\n+{ register int ch = (X) != (OLDX);\t\t\t\t\t\\\n+  if (GET_CODE (X) == PLUS)\t\t\t\t\t\t\\\n+    { if (GET_CODE (XEXP (X, 0)) == MULT)\t\t\t\t\\\n+\tch = 1, XEXP (X, 0) = force_operand (XEXP (X, 0), 0);\t\t\\\n+      if (GET_CODE (XEXP (X, 1)) == MULT)\t\t\t\t\\\n+\tch = 1, XEXP (X, 1) = force_operand (XEXP (X, 1), 0);\t\t\\\n+      if (ch && GET_CODE (XEXP (X, 1)) == REG\t\t\t\t\\\n+\t  && GET_CODE (XEXP (X, 0)) == REG)\t\t\t\t\\\n+\tgoto WIN;\t\t\t\t\t\t\t\\\n+      if (ch) { GO_IF_LEGITIMATE_ADDRESS (MODE, X, WIN); }\t\t\\\n+      if (GET_CODE (XEXP (X, 0)) == REG\t\t\t\t\t\\\n+\t       || (GET_CODE (XEXP (X, 0)) == SIGN_EXTEND\t\t\\\n+\t\t   && GET_CODE (XEXP (XEXP (X, 0), 0)) == REG\t\t\\\n+\t\t   && GET_MODE (XEXP (XEXP (X, 0), 0)) == HImode))\t\\\n+\t{ register rtx temp = gen_reg_rtx (Pmode);\t\t\t\\\n+\t  register rtx val = force_operand (XEXP (X, 1), 0);\t\t\\\n+\t  emit_move_insn (temp, val);\t\t\t\t\t\\\n+\t  XEXP (X, 1) = temp;\t\t\t\t\t\t\\\n+\t  goto WIN; }\t\t\t\t\t\t\t\\\n+      else if (GET_CODE (XEXP (X, 1)) == REG\t\t\t\t\\\n+\t       || (GET_CODE (XEXP (X, 1)) == SIGN_EXTEND\t\t\\\n+\t\t   && GET_CODE (XEXP (XEXP (X, 1), 0)) == REG\t\t\\\n+\t\t   && GET_MODE (XEXP (XEXP (X, 1), 0)) == HImode))\t\\\n+\t{ register rtx temp = gen_reg_rtx (Pmode);\t\t\t\\\n+\t  register rtx val = force_operand (XEXP (X, 0), 0);\t\t\\\n+\t  emit_move_insn (temp, val);\t\t\t\t\t\\\n+\t  XEXP (X, 0) = temp;\t\t\t\t\t\t\\\n+\t  goto WIN; }}}\n+\n+/* Go to LABEL if ADDR (a legitimate address expression)\n+   has an effect that depends on the machine mode it is used for.\n+   On the 68000, only predecrement and postincrement address depend thus\n+   (the amount of decrement or increment being the length of the operand).  */\n+\n+#define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR,LABEL)\t\\\n+ if (GET_CODE (ADDR) == POST_INC || GET_CODE (ADDR) == PRE_DEC) goto LABEL\n+\f\n+/* Specify the machine mode that this machine uses\n+   for the index in the tablejump instruction.  */\n+#define CASE_VECTOR_MODE HImode\n+\n+/* Define this if the tablejump instruction expects the table\n+   to contain offsets from the address of the table.\n+   Do not define this if the table should contain absolute addresses.  */\n+#define CASE_VECTOR_PC_RELATIVE\n+\n+/* Specify the tree operation to be used to convert reals to integers.  */\n+#define IMPLICIT_FIX_EXPR FIX_ROUND_EXPR\n+\n+/* This is the kind of divide that is easiest to do in the general case.  */\n+#define EASY_DIV_EXPR TRUNC_DIV_EXPR\n+\n+/* Define this as 1 if `char' should by default be signed; else as 0.  */\n+#define DEFAULT_SIGNED_CHAR 1\n+\n+/* Max number of bytes we can move from memory to memory\n+   in one reasonably fast instruction.  */\n+#define MOVE_MAX 4\n+\n+/* Define this if zero-extension is slow (more than one real instruction).  */\n+#define SLOW_ZERO_EXTEND\n+\n+/* Nonzero if access to memory by bytes is slow and undesirable.  */\n+#define SLOW_BYTE_ACCESS 0\n+\n+/* Define if shifts truncate the shift count\n+   which implies one can omit a sign-extension or zero-extension\n+   of a shift count.  */\n+#define SHIFT_COUNT_TRUNCATED\n+\n+/* Value is 1 if truncating an integer of INPREC bits to OUTPREC bits\n+   is done just by pretending it is already truncated.  */\n+#define TRULY_NOOP_TRUNCATION(OUTPREC, INPREC) 1\n+\n+/* We assume that the store-condition-codes instructions store 0 for false\n+   and some other value for true.  This is the value stored for true.  */\n+\n+#define STORE_FLAG_VALUE -1\n+\n+/* When a prototype says `char' or `short', really pass an `int'.  */\n+#define PROMOTE_PROTOTYPES\n+\n+/* Specify the machine mode that pointers have.\n+   After generation of rtl, the compiler makes no further distinction\n+   between pointers and any other objects of this machine mode.  */\n+#define Pmode SImode\n+\n+/* A function address in a call instruction\n+   is a byte address (for indexing purposes)\n+   so give the MEM rtx a byte's mode.  */\n+#define FUNCTION_MODE QImode\n+\n+/* Compute the cost of computing a constant rtl expression RTX\n+   whose rtx-code is CODE.  The body of this macro is a portion\n+   of a switch statement.  If the code is computed here,\n+   return it with a return statement.  Otherwise, break from the switch.  */\n+\n+#define CONST_COSTS(RTX,CODE) \\\n+  case CONST_INT:\t\t\t\t\t\t\\\n+    /* Constant zero is super cheap due to clr instruction.  */\t\\\n+    if (RTX == const0_rtx) return 0;\t\t\t\t\\\n+    if ((unsigned) INTVAL (RTX) < 077) return 1;\t\t\\\n+  case CONST:\t\t\t\t\t\t\t\\\n+  case LABEL_REF:\t\t\t\t\t\t\\\n+  case SYMBOL_REF:\t\t\t\t\t\t\\\n+    return 3;\t\t\t\t\t\t\t\\\n+  case CONST_DOUBLE:\t\t\t\t\t\t\\\n+    return 5;\n+\n+/* Check a `double' value for validity for a particular machine mode.\n+   This is defined to avoid crashes outputting certain constants.  */\n+\n+#define CHECK_FLOAT_VALUE(mode, d)\t\t\t\t\t\\\n+  if ((mode) == SFmode)\t\t\t\t\t\t\t\\\n+    { \t\t\t\t\t\t\t\t\t\\\n+      if ((d) > 3.4028234663852890e+38)\t\t\t\t\t\\\n+\t{ warning (\"magnitude of value too large for `float'\");\t\t\\\n+\t  (d) = 3.4028234663852890e+38; }\t\t\t\t\\\n+      else if ((d) < -3.4028234663852890e+38)\t\t\t\t\\\n+\t{ warning (\"magnitude of value too large for `float'\");\t\t\\\n+\t  (d) = -3.4028234663852890e+38; }\t\t\t\t\\\n+      else if (((d) > 0) && ((d) < 1.1754943508222873e-38))\t\t\\\n+\t(d) = 0.0;\t\t\t\t\t\t\t\\\n+      else if (((d) < 0) && ((d) > -1.1754943508222873e-38))\t\t\\\n+\t(d) = 0.0;\t\t\t\t\t\t\t\\\n+    }\n+\f\n+/* Tell final.c how to eliminate redundant test instructions.  */\n+\n+/* Here we define machine-dependent flags and fields in cc_status\n+   (see `conditions.h').  */\n+\n+/* On the Alliant, floating-point instructions do not modify the\n+   ordinary CC register.  Only fcmp and ftest instructions modify the\n+   floating-point CC register.  We should actually keep track of what\n+   both kinds of CC registers contain, but for now we only consider\n+   the most recent instruction that has set either register.  */\n+\n+/* Set if the cc value came from a floating point test, so a floating\n+   point conditional branch must be output.  */\n+#define CC_IN_FP 04000\n+\n+/* Store in cc_status the expressions\n+   that the condition codes will describe\n+   after execution of an instruction whose pattern is EXP.\n+   Do not alter them if the instruction would not alter the cc's.  */\n+\n+/* On the 68000, all the insns to store in an address register\n+   fail to set the cc's.  However, in some cases these instructions\n+   can make it possibly invalid to use the saved cc's.  In those\n+   cases we clear out some or all of the saved cc's so they won't be used.  */\n+\n+#define NOTICE_UPDATE_CC(EXP, INSN) \\\n+{\t\t\t\t\t\t\t\t\\\n+  if (GET_CODE (EXP) == SET)\t\t\t\t\t\\\n+    { if (ADDRESS_REG_P (SET_DEST (EXP)) || FP_REG_P (SET_DEST (EXP)))\t    \\\n+\t{ if (cc_status.value1\t\t\t\t\t\\\n+\t      && reg_overlap_mentioned_p (SET_DEST (EXP), cc_status.value1)) \\\n+\t    cc_status.value1 = 0;\t\t\t\t\\\n+\t  if (cc_status.value2\t\t\t\t\t\\\n+\t      && reg_overlap_mentioned_p (SET_DEST (EXP), cc_status.value2)) \\\n+\t    cc_status.value2 = 0; }\t\t\t\t\\\n+      else if (GET_CODE (SET_SRC (EXP)) == MOD\t\t\t\\\n+\t       || GET_CODE (SET_SRC (EXP)) == UMOD\t\t\\\n+\t       || (GET_CODE (SET_SRC (EXP)) == TRUNCATE\t\t\\\n+\t\t   && (GET_CODE (XEXP (SET_SRC (EXP))) == MOD\t\\\n+\t\t       || GET_CODE (XEXP (SET_SRC (EXP))) == UMOD)))\t\\\n+\t/* The swap insn produces cc's that don't correspond to the \t\\\n+\t   result.  */\t\t\t\t\t\t\\\n+        CC_STATUS_INIT;\t\t\t\t\t\t\\\n+      else if (SET_DEST (EXP) != cc0_rtx\t\t\t\t\\\n+\t       && (FP_REG_P (SET_SRC (EXP))\t\t\t\\\n+\t\t   || GET_CODE (SET_SRC (EXP)) == FIX\t\t\\\n+\t\t   || GET_CODE (SET_SRC (EXP)) == FLOAT_TRUNCATE \\\n+\t\t   || GET_CODE (SET_SRC (EXP)) == FLOAT_EXTEND)) \\\n+\t{ CC_STATUS_INIT; }\t\t\t\t\t\\\n+      /* A pair of move insns doesn't produce a useful overall cc.  */ \\\n+      else if (!FP_REG_P (SET_DEST (EXP))\t\t\t\\\n+\t       && !FP_REG_P (SET_SRC (EXP))\t\t\t\\\n+\t       && GET_MODE_SIZE (GET_MODE (SET_SRC (EXP))) > 4\t\\\n+\t       && (GET_CODE (SET_SRC (EXP)) == REG\t\t\\\n+\t\t   || GET_CODE (SET_SRC (EXP)) == MEM\t\t\\\n+\t\t   || GET_CODE (SET_SRC (EXP)) == CONST_DOUBLE))\\\n+\t{ CC_STATUS_INIT; }\t\t\t\t\t\\\n+      else if (GET_CODE (SET_SRC (EXP)) == CALL)\t\t\\\n+\t{ CC_STATUS_INIT; }\t\t\t\t\t\\\n+      else if (XEXP (EXP, 0) != pc_rtx)\t\t\t\t\\\n+\t{ cc_status.flags = 0;\t\t\t\t\t\\\n+\t  cc_status.value1 = XEXP (EXP, 0);\t\t\t\\\n+\t  cc_status.value2 = XEXP (EXP, 1); } }\t\t\t\\\n+  else if (GET_CODE (EXP) == PARALLEL\t\t\t\t\\\n+\t   && GET_CODE (XVECEXP (EXP, 0, 0)) == SET)\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      if (ADDRESS_REG_P (XEXP (XVECEXP (EXP, 0, 0), 0)))\t\\\n+\tCC_STATUS_INIT;\t\t\t\t\t\t\\\n+      else if (XEXP (XVECEXP (EXP, 0, 0), 0) != pc_rtx)\t\t\\\n+\t{ cc_status.flags = 0;\t\t\t\t\t\\\n+\t  cc_status.value1 = XEXP (XVECEXP (EXP, 0, 0), 0);\t\\\n+\t  cc_status.value2 = XEXP (XVECEXP (EXP, 0, 0), 1); } }\t\\\n+  else CC_STATUS_INIT;\t\t\t\t\t\t\\\n+  if (cc_status.value2 != 0\t\t\t\t\t\\\n+      && ADDRESS_REG_P (cc_status.value2)\t\t\t\\\n+      && GET_MODE (cc_status.value2) == QImode)\t\t\t\\\n+    CC_STATUS_INIT;\t\t\t\t\t\t\\\n+  if (cc_status.value2 != 0)\t\t\t\t\t\\\n+    switch (GET_CODE (cc_status.value2))\t\t\t\\\n+      { case PLUS: case MINUS: case MULT:\t\t\t\\\n+\tcase DIV: case UDIV: case MOD: case UMOD: case NEG:\t\\\n+\tcase ASHIFT: case LSHIFT: case ASHIFTRT: case LSHIFTRT:\t\\\n+\tcase ROTATE: case ROTATERT:\t\t\t\t\\\n+\t  if (GET_MODE (cc_status.value2) != VOIDmode)\t\t\\\n+\t    cc_status.flags |= CC_NO_OVERFLOW;\t\t\t\\\n+\t  break;\t\t\t\t\t\t\\\n+\tcase ZERO_EXTEND:\t\t\t\t\t\\\n+\t  /* (SET r1 (ZERO_EXTEND r2)) on this machine\n+\t     ends with a move insn moving r2 in r2's mode.\n+\t     Thus, the cc's are set for r2.\n+\t     This can set N bit spuriously. */\t\t\t\\\n+\t  cc_status.flags |= CC_NOT_NEGATIVE; }\t\t\t\\\n+  if (cc_status.value1 && GET_CODE (cc_status.value1) == REG\t\\\n+      && cc_status.value2\t\t\t\t\t\\\n+      && reg_overlap_mentioned_p (cc_status.value1, cc_status.value2))\t\\\n+    cc_status.value2 = 0;\t\t\t\t\t\\\n+  if ((cc_status.value1 && FP_REG_P (cc_status.value1))\t\t\\\n+       || (cc_status.value2 && FP_REG_P (cc_status.value2)))\t\\\n+    cc_status.flags = CC_IN_FP; }\n+\n+#define OUTPUT_JUMP(NORMAL, FLOAT, NO_OV)  \\\n+{ if (cc_prev_status.flags & CC_IN_FP)\t\t\t\\\n+    return FLOAT;\t\t\t\t\t\t\\\n+  if (cc_prev_status.flags & CC_NO_OVERFLOW)\t\t\t\\\n+    return NO_OV;\t\t\t\t\t\t\\\n+  return NORMAL; }\n+\f\n+/* Control the assembler format that we output.  */\n+\n+/* Output at beginning of assembler file.  */\n+\n+#define ASM_FILE_START(FILE)\t\\\n+  fprintf (FILE, \"#NO_APP\\n\");\n+\n+/* Output to assembler file text saying following lines\n+   may contain character constants, extra white space, comments, etc.  */\n+\n+#define ASM_APP_ON \"#APP\\n\"\n+\n+/* Output to assembler file text saying following lines\n+   no longer contain unusual constructs.  */\n+\n+#define ASM_APP_OFF \"#NO_APP\\n\"\n+\n+/* Output before read-only data.  */\n+\n+#define TEXT_SECTION_ASM_OP \"\\t.text\"\n+\n+/* Output before writable data.  */\n+\n+#define DATA_SECTION_ASM_OP \"\\t.data\"\n+\n+/* How to refer to registers in assembler output.\n+   This sequence is indexed by compiler's hard-register-number (see above).  */\n+\n+#define REGISTER_NAMES \\\n+{\"d0\", \"d1\", \"d2\", \"d3\", \"d4\", \"d5\", \"d6\", \"d7\",\t\\\n+ \"a0\", \"a1\", \"a2\", \"a3\", \"a4\", \"a5\", \"a6\", \"sp\",\t\\\n+ \"fp0\", \"fp1\", \"fp2\", \"fp3\", \"fp4\", \"fp5\", \"fp6\", \"fp7\" }\n+\n+/* How to renumber registers for dbx and gdb.\n+   On the Sun-3, the floating point registers have numbers\n+   18 to 25, not 16 to 23 as they do in the compiler.  */\n+/* (On the Alliant, dbx isn't working yet at all.  */\n+\n+#define DBX_REGISTER_NUMBER(REGNO) ((REGNO) < 16 ? (REGNO) : (REGNO) + 2)\n+\n+/* This is how to output the definition of a user-level label named NAME,\n+   such as the label on a static function or variable NAME.  */\n+\n+#define ASM_OUTPUT_LABEL(FILE,NAME)\t\\\n+  do { assemble_name (FILE, NAME); fputs (\":\\n\", FILE); } while (0)\n+\n+/* This is how to output a command to make the user-level label named NAME\n+   defined for reference from other files.  */\n+\n+#define ASM_GLOBALIZE_LABEL(FILE,NAME)\t\\\n+  do { fputs (\"\\t.globl \", FILE); assemble_name (FILE, NAME); fputs (\"\\n\", FILE);} while (0)\n+\n+/* This is how to output a reference to a user-level label named NAME.\n+   `assemble_name' uses this.  */\n+\n+#define ASM_OUTPUT_LABELREF(FILE,NAME)\t\\\n+  fprintf (FILE, \"_%s\", NAME)\n+\n+/* This is how to output an internal numbered label where\n+   PREFIX is the class of label and NUM is the number within the class.  */\n+\n+#define ASM_OUTPUT_INTERNAL_LABEL(FILE,PREFIX,NUM)\t\\\n+  fprintf (FILE, \"%s%d:\\n\", PREFIX, NUM)\n+\n+/* This is how to store into the string LABEL\n+   the symbol_ref name of an internal numbered label where\n+   PREFIX is the class of label and NUM is the number within the class.\n+   This is suitable for output with `assemble_name'.  */\n+\n+#define ASM_GENERATE_INTERNAL_LABEL(LABEL,PREFIX,NUM)\t\\\n+  sprintf (LABEL, \"*%s%d\", PREFIX, NUM)\n+\n+/* This is how to output an assembler line defining a `double' constant.  */\n+\n+#define ASM_OUTPUT_DOUBLE(FILE,VALUE)  \\\n+do { union { double d; long v[2];} tem;\t\t\t\\\n+     tem.d = (VALUE);\t\t\t\t\t\\\n+     fprintf (FILE, \"\\t.long 0x%x,0x%x\\n\", tem.v[0], tem.v[1]);\t\\\n+   } while (0)\n+\n+/* This is how to output an assembler line defining a `float' constant.  */\n+\n+#define ASM_OUTPUT_FLOAT(FILE,VALUE)  \\\n+do { union { float f; long l;} tem;\t\t\t\\\n+     tem.f = (VALUE);\t\t\t\t\t\\\n+     fprintf (FILE, \"\\t.long 0x%x\\n\", tem.l);\t\\\n+   } while (0)\n+\n+/* This is how to output an assembler line defining an `int' constant.  */\n+\n+#define ASM_OUTPUT_INT(FILE,VALUE)  \\\n+( fprintf (FILE, \"\\t.long \"),\t\t\t\\\n+  output_addr_const (FILE, (VALUE)),\t\t\\\n+  fprintf (FILE, \"\\n\"))\n+\n+/* Likewise for `char' and `short' constants.  */\n+\n+#define ASM_OUTPUT_SHORT(FILE,VALUE)  \\\n+( fprintf (FILE, \"\\t.word \"),\t\t\t\\\n+  output_addr_const (FILE, (VALUE)),\t\t\\\n+  fprintf (FILE, \"\\n\"))\n+\n+#define ASM_OUTPUT_CHAR(FILE,VALUE)  \\\n+( fprintf (FILE, \"\\t.byte \"),\t\t\t\\\n+  output_addr_const (FILE, (VALUE)),\t\t\\\n+  fprintf (FILE, \"\\n\"))\n+\n+#define ASM_OUTPUT_ASCII(FILE,PTR,SIZE)               \\\n+{ int i; unsigned char *pp = (unsigned char *) (PTR);\t\t\\\n+  fprintf((FILE), \"\\t.byte %d\", (unsigned int)*pp++);\t\t\\\n+  for (i = 1; i < (SIZE); ++i, ++pp) {\t\t\t\t\\\n+    if ((i % 8) == 0)\t\t\t\t\t\t\\\n+      fprintf((FILE), \"\\n\\t.byte %d\", (unsigned int) *pp);\t\\\n+    else\t\t\t\t\t\t\t\\\n+      fprintf((FILE), \",%d\", (unsigned int) *pp); }\t\t\\\n+  fprintf ((FILE), \"\\n\");       }\n+\n+/* This is how to output an assembler line for a numeric constant byte.  */\n+\n+#define ASM_OUTPUT_BYTE(FILE,VALUE)  \\\n+  fprintf (FILE, \"\\t.byte 0x%x\\n\", (VALUE))\n+\n+/* This is how to output an insn to push a register on the stack.\n+   It need not be very fast code.  */\n+\n+#define ASM_OUTPUT_REG_PUSH(FILE,REGNO)  \\\n+  fprintf (FILE, \"\\tmovl %s,sp@-\\n\", reg_names[REGNO])\n+\n+/* This is how to output an insn to pop a register from the stack.\n+   It need not be very fast code.  */\n+\n+#define ASM_OUTPUT_REG_POP(FILE,REGNO)  \\\n+  fprintf (FILE, \"\\tmovl sp@+,%s\\n\", reg_names[REGNO])\n+\n+/* This is how to output an element of a case-vector that is absolute.\n+   (The 68000 does not use such vectors,\n+   but we must define this macro anyway.)  */\n+\n+#define ASM_OUTPUT_ADDR_VEC_ELT(FILE, VALUE)  \\\n+  fprintf (FILE, \"\\t.long L%d\\n\", VALUE)\n+\n+/* This is how to output an element of a case-vector that is relative.  */\n+\n+#define ASM_OUTPUT_ADDR_DIFF_ELT(FILE, VALUE, REL)  \\\n+  fprintf (FILE, \"\\t.word L%d-L%d\\n\", VALUE, REL)\n+\n+/* This is how to output an assembler line\n+   that says to advance the location counter\n+   to a multiple of 2**LOG bytes.  */\n+\n+#define ASM_OUTPUT_ALIGN(FILE,LOG)\t\\\n+  if ((LOG) == 1)\t\t\t\\\n+    fprintf (FILE, \"\\t.even\\n\");\t\\\n+  else if ((LOG) != 0)\t\t\t\\\n+    fprintf (FILE, \"\\t.align %dn\", (LOG));\t\n+\n+#define ASM_OUTPUT_SKIP(FILE,SIZE)  \\\n+  fprintf (FILE, \"\\t. = . + %u\\n\", (SIZE))\n+\n+/* This says how to output an assembler line\n+   to define a global common symbol.  */\n+\n+#define ASM_OUTPUT_COMMON(FILE, NAME, SIZE, ROUNDED)  \\\n+( fputs (\"\\t.comm \", (FILE)),\t\t\t\\\n+  assemble_name ((FILE), (NAME)),\t\t\\\n+  fprintf ((FILE), \",%u\\n\", (ROUNDED)))\n+\n+/* This says how to output an assembler line\n+   to define a local common symbol.  */\n+\n+#define ASM_OUTPUT_LOCAL(FILE, NAME, SIZE, ROUNDED)  \\\n+( fputs (\"\\t.lcomm \", (FILE)),\t\t\t\\\n+  assemble_name ((FILE), (NAME)),\t\t\\\n+  fprintf ((FILE), \",%u\\n\", (ROUNDED)))\n+\n+/* Store in OUTPUT a string (made with alloca) containing\n+   an assembler-name for a local static variable named NAME.\n+   LABELNO is an integer which is different for each call.  */\n+\n+#define ASM_FORMAT_PRIVATE_NAME(OUTPUT, NAME, LABELNO)\t\\\n+( (OUTPUT) = (char *) alloca (strlen ((NAME)) + 10),\t\\\n+  sprintf ((OUTPUT), \"%s.%d\", (NAME), (LABELNO)))\n+\n+/* Define the parentheses used to group arithmetic operations\n+   in assembler code.  */\n+\n+#define ASM_OPEN_PAREN \"(\"\n+#define ASM_CLOSE_PAREN \")\"\n+\n+/* Define results of standard character escape sequences.  */\n+#define TARGET_BELL 007\n+#define TARGET_BS 010\n+#define TARGET_TAB 011\n+#define TARGET_NEWLINE 012\n+#define TARGET_VT 013\n+#define TARGET_FF 014\n+#define TARGET_CR 015\n+\n+/* Print operand X (an rtx) in assembler syntax to file FILE.\n+   CODE is a letter or dot (`z' in `%z0') or 0 if no letter was specified.\n+   For `%' followed by punctuation, CODE is the punctuation and X is null.\n+\n+   On the Alliant, we use several CODE characters:\n+   '.' for dot needed in Motorola-style opcode names.\n+   '-' for an operand pushing on the stack:\n+       sp@-, -(sp) or -(%sp) depending on the style of syntax.\n+   '+' for an operand pushing on the stack:\n+       sp@+, (sp)+ or (%sp)+ depending on the style of syntax.\n+   '@' for a reference to the top word on the stack:\n+       sp@, (sp) or (%sp) depending on the style of syntax.\n+   '#' for an immediate operand prefix (# in MIT and Motorola syntax\n+       but & in SGS syntax).\n+   '!' for the cc register (used in an `and to cc' insn).\n+\n+   'b' for byte insn (no effect, on the Sun; this is for the ISI).\n+   'd' to force memory addressing to be absolute, not relative.\n+   'f' for float insn (print a CONST_DOUBLE as a float rather than in hex)\n+   'x' for float insn (print a CONST_DOUBLE as a float rather than in hex),\n+       or print pair of registers as rx:ry.  */\n+\n+#define PRINT_OPERAND_PUNCT_VALID_P(CODE)\t\t\t\t\\\n+  ((CODE) == '.' || (CODE) == '#' || (CODE) == '-'\t\t\t\\\n+   || (CODE) == '+' || (CODE) == '@' || (CODE) == '!')\n+\n+#define PRINT_OPERAND(FILE, X, CODE)  \\\n+{ int i;\t\t\t\t\t\t\t\t\\\n+  if (CODE == '.') ;\t\t\t\t\t\t\t\\\n+  else if (CODE == '#') fprintf (FILE, \"#\");\t\t\t\t\\\n+  else if (CODE == '-') fprintf (FILE, \"sp@-\");\t\t\t\t\\\n+  else if (CODE == '+') fprintf (FILE, \"sp@+\");\t\t\t\t\\\n+  else if (CODE == '@') fprintf (FILE, \"sp@\");\t\t\t\t\\\n+  else if (CODE == '!') fprintf (FILE, \"cc\");\t\t\t\t\\\n+  else if ((X)  == 0  ) ;\t\t\t\t\t\t\\\n+  else if (GET_CODE (X) == REG)\t\t\t\t\t\t\\\n+    { if (REGNO (X) < 16 && (CODE == 'y' || CODE == 'x') && GET_MODE (X) == DFmode)\t\\\n+        fprintf (FILE, \"%s,%s\", reg_names[REGNO (X)], reg_names[REGNO (X)+1]); \\\n+      else\t\t\t\t\t\t\t\t\\\n+        fprintf (FILE, \"%s\", reg_names[REGNO (X)]);\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  else if (GET_CODE (X) == MEM)\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      output_address (XEXP (X, 0));\t\t\t\t\t\\\n+      if (CODE == 'd' && ! TARGET_68020\t\t\t\t\t\\\n+\t  && CONSTANT_ADDRESS_P (XEXP (X, 0))\t\t\t\t\\\n+\t  && !(GET_CODE (XEXP (X, 0)) == CONST_INT\t\t\t\\\n+\t       && INTVAL (XEXP (X, 0)) < 0x8000\t\t\t\t\\\n+\t       && INTVAL (XEXP (X, 0)) >= -0x8000))\t\t\t\\\n+\tfprintf (FILE, \":l\");\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  else if (GET_CODE (X) == CONST_DOUBLE && GET_MODE (X) == SFmode)\t\\\n+    { union { double d; int i[2]; } u;\t\t\t\t\t\\\n+      union { float f; int i; } u1;\t\t\t\t\t\\\n+      u.i[0] = CONST_DOUBLE_LOW (X); u.i[1] = CONST_DOUBLE_HIGH (X);\t\\\n+      u1.f = u.d;\t\t\t\t\t\t\t\\\n+      if (CODE == 'f')\t\t\t\t\t\t\t\\\n+        fprintf (FILE, \"#0r%.9g\", u1.f);\t\t\t\t\\\n+      else\t\t\t\t\t\t\t\t\\\n+        fprintf (FILE, \"#0x%x\", u1.i); }\t\t\t\t\\\n+  else if (GET_CODE (X) == CONST_DOUBLE && GET_MODE (X) != DImode)\t\\\n+    { union { double d; int i[2]; } u;\t\t\t\t\t\\\n+      u.i[0] = CONST_DOUBLE_LOW (X); u.i[1] = CONST_DOUBLE_HIGH (X);\t\\\n+      fprintf (FILE, \"#0r%.20g\", u.d); }\t\t\t\t\\\n+  else { putc ('#', FILE); output_addr_const (FILE, X); }}\n+\f\n+/* Note that this contains a kludge that knows that the only reason\n+   we have an address (plus (label_ref...) (reg...))\n+   is in the insn before a tablejump, and we know that m68k.md\n+   generates a label LInnn: on such an insn.  */\n+#define PRINT_OPERAND_ADDRESS(FILE, ADDR)  \\\n+{ register rtx reg1, reg2, breg, ireg;\t\t\t\t\t\\\n+  register rtx addr = ADDR;\t\t\t\t\t\t\\\n+  static char *sz = \".BW.L...D\";\t\t\t\t\t\\\n+  rtx offset;\t\t\t\t\t\t\t\t\\\n+  switch (GET_CODE (addr))\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+    case REG:\t\t\t\t\t\t\t\t\\\n+      fprintf (FILE, \"%s@\", reg_names[REGNO (addr)]);\t\t\t\\\n+      break;\t\t\t\t\t\t\t\t\\\n+    case PRE_DEC:\t\t\t\t\t\t\t\\\n+      fprintf (FILE, \"%s@-\", reg_names[REGNO (XEXP (addr, 0))]);\t\\\n+      break;\t\t\t\t\t\t\t\t\\\n+    case POST_INC:\t\t\t\t\t\t\t\\\n+      fprintf (FILE, \"%s@+\", reg_names[REGNO (XEXP (addr, 0))]);\t\\\n+      break;\t\t\t\t\t\t\t\t\\\n+    case PLUS:\t\t\t\t\t\t\t\t\\\n+      reg1 = 0;\treg2 = 0;\t\t\t\t\t\t\\\n+      ireg = 0;\tbreg = 0;\t\t\t\t\t\t\\\n+      offset = 0;\t\t\t\t\t\t\t\\\n+      if (CONSTANT_ADDRESS_P (XEXP (addr, 0)))\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  offset = XEXP (addr, 0);\t\t\t\t\t\\\n+\t  addr = XEXP (addr, 1);\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+      else if (CONSTANT_ADDRESS_P (XEXP (addr, 1)))\t\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  offset = XEXP (addr, 1);\t\t\t\t\t\\\n+\t  addr = XEXP (addr, 0);\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+      if (GET_CODE (addr) != PLUS) ;\t\t\t\t\t\\\n+      else if (GET_CODE (XEXP (addr, 0)) == SIGN_EXTEND)\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  reg1 = XEXP (addr, 0);\t\t\t\t\t\\\n+\t  addr = XEXP (addr, 1);\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+      else if (GET_CODE (XEXP (addr, 1)) == SIGN_EXTEND)\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  reg1 = XEXP (addr, 1);\t\t\t\t\t\\\n+\t  addr = XEXP (addr, 0);\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+      else if (GET_CODE (XEXP (addr, 0)) == MULT)\t\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  reg1 = XEXP (addr, 0);\t\t\t\t\t\\\n+\t  addr = XEXP (addr, 1);\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+      else if (GET_CODE (XEXP (addr, 1)) == MULT)\t\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  reg1 = XEXP (addr, 1);\t\t\t\t\t\\\n+\t  addr = XEXP (addr, 0);\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+      else if (GET_CODE (XEXP (addr, 0)) == REG)\t\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  reg1 = XEXP (addr, 0);\t\t\t\t\t\\\n+\t  addr = XEXP (addr, 1);\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+      else if (GET_CODE (XEXP (addr, 1)) == REG)\t\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  reg1 = XEXP (addr, 1);\t\t\t\t\t\\\n+\t  addr = XEXP (addr, 0);\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+      if (GET_CODE (addr) == REG || GET_CODE (addr) == MULT\t\t\\\n+\t  || GET_CODE (addr) == SIGN_EXTEND)\t\t\t\t\\\n+\t{ if (reg1 == 0) reg1 = addr; else reg2 = addr; addr = 0; }\t\\\n+/*  for OLD_INDEXING\t\t\t\t\t\t\t\\\n+      else if (GET_CODE (addr) == PLUS)\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  if (GET_CODE (XEXP (addr, 0)) == REG)\t\t\t\t\\\n+\t    {\t\t\t\t\t\t\t\t\\\n+\t      reg2 = XEXP (addr, 0);\t\t\t\t\t\\\n+\t      addr = XEXP (addr, 1);\t\t\t\t\t\\\n+\t    }\t\t\t\t\t\t\t\t\\\n+\t  else if (GET_CODE (XEXP (addr, 1)) == REG)\t\t\t\\\n+\t    {\t\t\t\t\t\t\t\t\\\n+\t      reg2 = XEXP (addr, 1);\t\t\t\t\t\\\n+\t      addr = XEXP (addr, 0);\t\t\t\t\t\\\n+\t    }\t\t\t\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+  */\t\t\t\t\t\t\t\t\t\\\n+      if (offset != 0) { if (addr != 0) abort (); addr = offset; }\t\\\n+      if ((reg1 && (GET_CODE (reg1) == SIGN_EXTEND\t\t\t\\\n+\t\t    || GET_CODE (reg1) == MULT))\t\t\t\\\n+\t  || (reg2 != 0 && REGNO_OK_FOR_BASE_P (REGNO (reg2))))\t\t\\\n+\t{ breg = reg2; ireg = reg1; }\t\t\t\t\t\\\n+      else if (reg1 != 0 && REGNO_OK_FOR_BASE_P (REGNO (reg1)))\t\t\\\n+\t{ breg = reg1; ireg = reg2; }\t\t\t\t\t\\\n+      if (ireg != 0 && breg == 0 && GET_CODE (addr) == LABEL_REF)\t\\\n+        { int scale = 1;\t\t\t\t\t\t\\\n+\t  if (GET_CODE (ireg) == MULT)\t\t\t\t\t\\\n+\t    { scale = INTVAL (XEXP (ireg, 1));\t\t\t\t\\\n+\t      ireg = XEXP (ireg, 0); }\t\t\t\t\t\\\n+\t  if (GET_CODE (ireg) == SIGN_EXTEND)\t\t\t\t\\\n+\t    fprintf (FILE, \"pc@(L%d-LI%d-2:B)[%s:W\",\t\t\t\\\n+\t\t     CODE_LABEL_NUMBER (XEXP (addr, 0)),\t\t\\\n+\t\t     CODE_LABEL_NUMBER (XEXP (addr, 0)),\t\t\\\n+\t\t     reg_names[REGNO (XEXP (ireg, 0))]); \t\t\\\n+\t  else\t\t\t\t\t\t\t\t\\\n+\t    fprintf (FILE, \"pc@(L%d-LI%d-2:B)[%s:L\",\t\t\t\\\n+\t\t     CODE_LABEL_NUMBER (XEXP (addr, 0)),\t\t\\\n+\t\t     CODE_LABEL_NUMBER (XEXP (addr, 0)),\t\t\\\n+\t\t     reg_names[REGNO (ireg)]);\t\t\t\t\\\n+\t  fprintf (FILE, \":%c\", sz[scale]);\t\t\t\t\\\n+\t  putc (']', FILE);\t\t\t\t\t\t\\\n+\t  break; }\t\t\t\t\t\t\t\\\n+      if (breg != 0 && ireg == 0 && GET_CODE (addr) == LABEL_REF)\t\\\n+        { fprintf (FILE, \"pc@(L%d-LI%d-2:B)[%s:L:B]\",\t\t\t\\\n+\t\t   CODE_LABEL_NUMBER (XEXP (addr, 0)),\t\t\t\\\n+\t\t   CODE_LABEL_NUMBER (XEXP (addr, 0)),\t\t\t\\\n+\t\t   reg_names[REGNO (breg)]);\t\t\t\t\\\n+\t  break; }\t\t\t\t\t\t\t\\\n+      if (ireg != 0 || breg != 0)\t\t\t\t\t\\\n+\t{ int scale = 1;\t\t\t\t\t\t\\\n+\t  if (breg == 0)\t\t\t\t\t\t\\\n+\t    abort ();\t\t\t\t\t\t\t\\\n+\t  if (addr && GET_CODE (addr) == LABEL_REF) abort ();\t\t\\\n+\t  fprintf (FILE, \"%s@\", reg_names[REGNO (breg)]);\t\t\\\n+\t  if (addr != 0) {\t\t\t\t\t\t\\\n+            putc( '(', FILE );\t\t\t\t\t\t\\\n+\t    output_addr_const (FILE, addr);\t\t\t\t\\\n+            if (ireg != 0) {\t\t\t\t\t\t\\\n+              if (GET_CODE(addr) == CONST_INT) {\t\t\t\\\n+                int size_of = 1, val = INTVAL(addr);\t\t\t\\\n+                if (val < -0x8000 || val >= 0x8000)\t\t\t\\\n+                   size_of = 4;   \t\t\t\t\t\\\n+                else if (val < -0x80 || val >= 0x80)\t\t\t\\\n+                   size_of = 2;\t\t\t\t\t\t\\\n+                fprintf(FILE, \":%c\", sz[size_of]);\t\t\t\\\n+              }        \t\t\t\t\t\t\t\\\n+              else\t\t\t\t\t\t\t\\\n+                fprintf(FILE, \":L\"); } \t\t\t\t\t\\\n+            putc( ')', FILE ); }\t\t\t\t\t\\\n+\t  if (ireg != 0) {\t\t\t\t\t\t\\\n+\t    putc ('[', FILE);\t\t\t\t\t\t\\\n+\t    if (ireg != 0 && GET_CODE (ireg) == MULT)\t\t\t\\\n+\t      { scale = INTVAL (XEXP (ireg, 1));\t\t\t\\\n+\t        ireg = XEXP (ireg, 0); }\t\t\t\t\\\n+\t    if (ireg != 0 && GET_CODE (ireg) == SIGN_EXTEND)\t\t\\\n+\t      fprintf (FILE, \"%s:W\", reg_names[REGNO (XEXP (ireg, 0))]);\t\\\n+\t    else if (ireg != 0)\t\t\t\t\t\t\\\n+\t      fprintf (FILE, \"%s:L\", reg_names[REGNO (ireg)]);\t\t\\\n+\t    fprintf (FILE, \":%c\", sz[scale]);\t\t\t\t\\\n+\t    putc (']', FILE);\t\t\t\t\t\t\\\n+          }\t\t\t\t\t\t\t\t\\\n+\t  break;\t\t\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+      else if (reg1 != 0 && GET_CODE (addr) == LABEL_REF)\t\t\\\n+\t{ fprintf (FILE, \"pc@(L%d-LI%d-2:B)[%s:L:B]\",\t\t\t\\\n+\t\t   CODE_LABEL_NUMBER (XEXP (addr, 0)),\t\t\t\\\n+\t\t   CODE_LABEL_NUMBER (XEXP (addr, 0)),\t\t\t\\\n+\t\t   reg_names[REGNO (reg1)]);\t\t\t\t\\\n+\t  break; }\t\t\t\t\t\t\t\\\n+    default:\t\t\t\t\t\t\t\t\\\n+      if (GET_CODE (addr) == CONST_INT\t\t\t\t\t\\\n+\t  && INTVAL (addr) < 0x8000\t\t\t\t\t\\\n+\t  && INTVAL (addr) >= -0x8000)\t\t\t\t\t\\\n+\tfprintf (FILE, \"%d:W\", INTVAL (addr));\t\t\t\t\\\n+      else\t\t\t\t\t\t\t\t\\\n+        output_addr_const (FILE, addr);\t\t\t\t\t\\\n+    }}\n+\f\n+/*\n+Local variables:\n+version-control: t\n+End:\n+*/\n+"}]}