{"sha": "0f68560161deb000149a59931dfe5bca60af92d8", "node_id": "C_kwDOANBUbNoAKDBmNjg1NjAxNjFkZWIwMDAxNDlhNTk5MzFkZmU1YmNhNjBhZjkyZDg", "commit": {"author": {"name": "Andre Vieira", "email": "andre.simoesdiasvieira@arm.com", "date": "2021-11-10T09:52:49Z"}, "committer": {"name": "Andre Vieira", "email": "andre.simoesdiasvieira@arm.com", "date": "2021-11-10T09:52:49Z"}, "message": "[AArch64] Fix TBAA information when lowering NEON loads and stores to gimple\n\nThis patch fixes the wrong TBAA information when lowering NEON loads and stores\nto gimple that showed up when bootstrapping with UBSAN.\n\ngcc/ChangeLog:\n\n\t* config/aarch64/aarch64-builtins.c\n\t(aarch64_general_gimple_fold_builtin): Change pointer alignment and\n\talias.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/aarch64/simd/lowering_tbaa.c: New test.", "tree": {"sha": "083446c0111171e3fdc88d71538b7507496da336", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/083446c0111171e3fdc88d71538b7507496da336"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f68560161deb000149a59931dfe5bca60af92d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f68560161deb000149a59931dfe5bca60af92d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f68560161deb000149a59931dfe5bca60af92d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f68560161deb000149a59931dfe5bca60af92d8/comments", "author": {"login": "avieira-arm", "id": 68072104, "node_id": "MDQ6VXNlcjY4MDcyMTA0", "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avieira-arm", "html_url": "https://github.com/avieira-arm", "followers_url": "https://api.github.com/users/avieira-arm/followers", "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}", "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions", "organizations_url": "https://api.github.com/users/avieira-arm/orgs", "repos_url": "https://api.github.com/users/avieira-arm/repos", "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/avieira-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "avieira-arm", "id": 68072104, "node_id": "MDQ6VXNlcjY4MDcyMTA0", "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avieira-arm", "html_url": "https://github.com/avieira-arm", "followers_url": "https://api.github.com/users/avieira-arm/followers", "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}", "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions", "organizations_url": "https://api.github.com/users/avieira-arm/orgs", "repos_url": "https://api.github.com/users/avieira-arm/repos", "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/avieira-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02fb5732ff57c43f21ae95d5d01d6da70ca867e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02fb5732ff57c43f21ae95d5d01d6da70ca867e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02fb5732ff57c43f21ae95d5d01d6da70ca867e4"}], "stats": {"total": 65, "additions": 47, "deletions": 18}, "files": [{"sha": "416b4fc2dea7bb52643dbbcc8ef5a15dd65ca605", "filename": "gcc/config/aarch64/aarch64-builtins.c", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f68560161deb000149a59931dfe5bca60af92d8/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f68560161deb000149a59931dfe5bca60af92d8/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c?ref=0f68560161deb000149a59931dfe5bca60af92d8", "patch": "@@ -2670,18 +2670,18 @@ aarch64_general_gimple_fold_builtin (unsigned int fcode, gcall *stmt,\n \t      = get_mem_type_for_load_store(fcode);\n \t    aarch64_simd_type_info simd_type\n \t      = aarch64_simd_types[mem_type];\n-\t    tree elt_ptr_type = build_pointer_type (simd_type.eltype);\n+\t    tree elt_ptr_type = build_pointer_type_for_mode (simd_type.eltype,\n+\t\t\t\t\t\t\t     VOIDmode, true);\n \t    tree zero = build_zero_cst (elt_ptr_type);\n-\t    gimple_seq stmts = NULL;\n-\t    tree base = gimple_convert (&stmts, elt_ptr_type,\n-\t\t\t\t\targs[0]);\n-\t    if (stmts)\n-\t      gsi_insert_seq_before (gsi, stmts, GSI_SAME_STMT);\n+\t    /* Use element type alignment.  */\n+\t    tree access_type\n+\t      = build_aligned_type (simd_type.itype,\n+\t\t\t\t    TYPE_ALIGN (simd_type.eltype));\n \t    new_stmt\n \t      = gimple_build_assign (gimple_get_lhs (stmt),\n \t\t\t\t     fold_build2 (MEM_REF,\n-\t\t\t\t\t\t  simd_type.itype,\n-\t\t\t\t\t\t  base, zero));\n+\t\t\t\t\t\t  access_type,\n+\t\t\t\t\t\t  args[0], zero));\n \t  }\n \tbreak;\n \n@@ -2692,18 +2692,17 @@ aarch64_general_gimple_fold_builtin (unsigned int fcode, gcall *stmt,\n \t      = get_mem_type_for_load_store(fcode);\n \t    aarch64_simd_type_info simd_type\n \t      = aarch64_simd_types[mem_type];\n-\t    tree elt_ptr_type = build_pointer_type (simd_type.eltype);\n+\t    tree elt_ptr_type = build_pointer_type_for_mode (simd_type.eltype,\n+\t\t\t\t\t\t\t     VOIDmode, true);\n \t    tree zero = build_zero_cst (elt_ptr_type);\n-\t    gimple_seq stmts = NULL;\n-\t    tree base = gimple_convert (&stmts, elt_ptr_type,\n-\t\t\t\t\targs[0]);\n-\t    if (stmts)\n-\t      gsi_insert_seq_before (gsi, stmts, GSI_SAME_STMT);\n+\t    /* Use element type alignment.  */\n+\t    tree access_type\n+\t      = build_aligned_type (simd_type.itype,\n+\t\t\t\t    TYPE_ALIGN (simd_type.eltype));\n \t    new_stmt\n-\t      = gimple_build_assign (fold_build2 (MEM_REF,\n-\t\t\t\t     simd_type.itype,\n-\t\t\t\t     base,\n-\t\t\t\t     zero), args[1]);\n+\t      = gimple_build_assign (fold_build2 (MEM_REF, access_type,\n+\t\t\t\t\t\t  args[0], zero),\n+\t\t\t\t     args[1]);\n \t  }\n \tbreak;\n "}, {"sha": "eaeae21f19c7d2d8d4e032f2f8b1b22bb96b7ca4", "filename": "gcc/testsuite/gcc.target/aarch64/simd/lowering_tbaa.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f68560161deb000149a59931dfe5bca60af92d8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Flowering_tbaa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f68560161deb000149a59931dfe5bca60af92d8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Flowering_tbaa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Flowering_tbaa.c?ref=0f68560161deb000149a59931dfe5bca60af92d8", "patch": "@@ -0,0 +1,30 @@\n+/* Tests the TBAA information of lowered AArch64 SIMD loads.  */\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -O2\" } */\n+\n+#include <arm_neon.h>\n+\n+void __attribute__((noipa))\n+g (float *)\n+{\n+}\n+\n+int32x4_t __attribute__((noipa))\n+f (void)\n+{\n+  float a[4] = { 1, 2, 3, 4 };\n+  g (a);\n+  a[0] = a[1] = a[2] = a[3] = 0;\n+  void *volatile ptr = a;\n+  return vld1q_s32 ((int32_t *) ptr);\n+}\n+\n+int\n+main (void)\n+{\n+  int32x4_t x = f ();\n+  int32x4_t y = vdupq_n_s32 (0);\n+  if (__builtin_memcmp (&x, &y, 16) != 0)\n+    __builtin_abort ();\n+  return 0;\n+}"}]}