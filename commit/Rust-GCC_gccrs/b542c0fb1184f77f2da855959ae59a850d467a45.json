{"sha": "b542c0fb1184f77f2da855959ae59a850d467a45", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjU0MmMwZmIxMTg0Zjc3ZjJkYTg1NTk1OWFlNTlhODUwZDQ2N2E0NQ==", "commit": {"author": {"name": "Neil Booth", "email": "neilb@earthling.net", "date": "2000-09-18T21:14:44Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2000-09-18T21:14:44Z"}, "message": "cpp.texi: Update documentation...\n\n        * cpp.texi: Update documentation, including some clarifications,\n        the treatment of various newline combinations, and space\n        between backslash and newline.\n\nFrom-SVN: r36514", "tree": {"sha": "b0b9e5206539f1b4a8f5d14a937d39686b0f0504", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b0b9e5206539f1b4a8f5d14a937d39686b0f0504"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b542c0fb1184f77f2da855959ae59a850d467a45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b542c0fb1184f77f2da855959ae59a850d467a45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b542c0fb1184f77f2da855959ae59a850d467a45", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b542c0fb1184f77f2da855959ae59a850d467a45/comments", "author": null, "committer": null, "parents": [{"sha": "800a6a0ca9b3e0e5857a367a4a88db6826e38e3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/800a6a0ca9b3e0e5857a367a4a88db6826e38e3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/800a6a0ca9b3e0e5857a367a4a88db6826e38e3e"}], "stats": {"total": 76, "additions": 51, "deletions": 25}, "files": [{"sha": "bd55ea688f4a94b53a37202648a88b4b25265d64", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b542c0fb1184f77f2da855959ae59a850d467a45/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b542c0fb1184f77f2da855959ae59a850d467a45/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b542c0fb1184f77f2da855959ae59a850d467a45", "patch": "@@ -1,3 +1,9 @@\n+Mon 18-Sep-2000 22:12:44 BST  Neil Booth  <NeilB@earthling.net>\n+\n+        * cpp.texi: Update documentation, including some clarifications,\n+\tthe treatment of various newline combinations, and space between\n+\tbackslash and newline.\n+\n Mon Sep 18 21:00:47 2000  J\"orn Rennecke <amylaar@redhat.co.uk>\n \n \t* sdbout.c (PUT_SDB_DEF, PUT_SDB_TAG, PUT_SDB_EPILOGUE_END):"}, {"sha": "8a0bc4fa08972a433eb9422d4df427cc6b4be217", "filename": "gcc/cpp.texi", "status": "modified", "additions": 45, "deletions": 25, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b542c0fb1184f77f2da855959ae59a850d467a45/gcc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b542c0fb1184f77f2da855959ae59a850d467a45/gcc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpp.texi?ref=b542c0fb1184f77f2da855959ae59a850d467a45", "patch": "@@ -149,28 +149,45 @@ must also use @samp{-pedantic}.  @xref{Invocation}.\n Most C preprocessor features are inactive unless you give specific\n directives to request their use.  (Preprocessing directives are lines\n starting with a @samp{#} token, possibly preceded by whitespace;\n-@pxref{Directives}).  However, there are three transformations that the\n+@pxref{Directives}).  However, there are four transformations that the\n preprocessor always makes on all the input it receives, even in the\n-absence of directives.\n+absence of directives.  These are, in order:\n \n-@itemize @bullet\n+@enumerate\n @item\n Trigraphs, if enabled, are replaced with the character they represent.\n-Conceptually, this is the very first action undertaken, just before\n-backslash-newline deletion.\n \n @item\n Backslash-newline sequences are deleted, no matter where.  This\n feature allows you to break long lines for cosmetic purposes without\n changing their meaning.\n \n+Recently, the non-traditional preprocessor has relaxed its treatment of\n+escaped newlines.  Previously, the newline had to immediately follow a\n+backslash.  The current implementation allows whitespace in the form of\n+spaces, horizontal and vertical tabs, and form feeds between the\n+backslash and the subsequent newline.  The preprocessor issues a\n+warning, but treats it as a valid escaped newline and combines the two\n+lines to form a single logical line.  This works within comments and\n+tokens, including multi-line strings, as well as between tokens.\n+Comments are @emph{not} treated as whitespace for the purposes of this\n+relaxation, since they have not yet been replaced with spaces.\n+\n @item\n-All C comments are replaced with single spaces.\n+All comments are replaced with single spaces.\n \n @item\n Predefined macro names are replaced with their expansions\n (@pxref{Predefined}).\n-@end itemize\n+@end enumerate\n+\n+For end-of-line indicators, any of \\n, \\r\\n, \\n\\r and \\r are recognised,\n+and treated as ending a single line.  As a result, if you mix these in a\n+single file you might get incorrect line numbering, because the\n+preprocessor would interpret the two-character versions as ending just\n+one line.  Previous implementations would only handle UNIX-style \\n\n+correctly, so DOS-style \\r\\n would need to be passed through a filter\n+first.\n \n The first three transformations are done @emph{before} all other parsing\n and before preprocessing directives are recognized.  Thus, for example,\n@@ -199,7 +216,7 @@ bar\"\n \n is equivalent to @code{\"foo\\bar\"}, not to @code{\"foo\\\\bar\"}.  To avoid\n having to worry about this, do not use the GNU extension which permits\n-multiline strings.  Instead, use string constant concatenation:\n+multi-line strings.  Instead, use string constant concatenation:\n \n @example\n    \"foo\\\\\"\n@@ -208,24 +225,23 @@ multiline strings.  Instead, use string constant concatenation:\n \n Your program will be more portable this way, too.\n \n-There are a few exceptions to all three transformations.\n+There are a few things to note about the above four transformations.\n \n @itemize @bullet\n @item\n Comments and predefined macro names (or any macro names, for that\n matter) are not recognized inside the argument of an @samp{#include}\n-directive, whether it is delimited with quotes or with @samp{<} and\n+directive, when it is delimited with quotes or with @samp{<} and\n @samp{>}.\n \n @item\n Comments and predefined macro names are never recognized within a\n-character or string constant.  (Strictly speaking, this is the rule,\n-not an exception, but it is worth noting here anyway.)\n+character or string constant.\n \n @item\n ISO ``trigraphs'' are converted before backslash-newlines are deleted.\n If you write what looks like a trigraph with a backslash-newline inside,\n-the backslash-newline is deleted as usual, but it is then too late to\n+the backslash-newline is deleted as usual, but it is too late to\n recognize the trigraph.\n \n This is relevant only if you use the @samp{-trigraphs} option to enable\n@@ -2787,33 +2803,35 @@ of the preprocessor may subtly change such behavior or even remove the\n feature altogether.\n \n Preservation of the form of whitespace between tokens is unlikely to\n-change from current behavior (see @ref{Output}), but you are advised not\n+change from current behavior (@ref{Output}), but you are advised not\n to rely on it.\n \n The following are undocumented and subject to change:-\n \n @itemize @bullet\n \n @item Interpretation of the filename between @samp{<} and @samp{>} tokens\n- resulting from a macro-expanded @samp{#include} directive\n+ resulting from a macro-expanded filename in a @samp{#include} directive\n \n The text between the @samp{<} and @samp{>} is taken literally if given\n-directly within a @samp{#include} or similar directive.  If a directive\n-of this form is obtained through macro expansion, however, behavior like\n-preservation of whitespace, and interpretation of backslashes and quotes\n+directly within a @samp{#include} or similar directive.  If the\n+angle-bracketed filename is obtained through macro expansion, however,\n+preservation of whitespace and interpretation of backslashes and quotes\n is undefined. @xref{Include Syntax}.\n \n @item Precedence of ## operators with respect to each other\n \n-It is not defined whether a sequence of ## operators are evaluated\n-left-to-right, right-to-left or indeed in a consistent direction at all.\n-An example of where this might matter is pasting the arguments @samp{1},\n-@samp{e} and @samp{-2}.  This would be fine for left-to-right pasting,\n-but right-to-left pasting would produce an invalid token @samp{e-2}.\n+Whether a sequence of ## operators is evaluated left-to-right,\n+right-to-left or indeed in a consistent direction at all is not\n+specified.  An example of where this might matter is pasting the\n+arguments @samp{1}, @samp{e} and @samp{-2}.  This would be fine for\n+left-to-right pasting, but right-to-left pasting would produce an\n+invalid token @samp{e-2}.  It is possible to guarantee precedence by\n+suitable use of nested macros.\n \n @item Precedence of # operator with respect to the ## operator\n \n-It is undefined which of these two operators is evaluated first.\n+Which of these two operators is evaluated first is not specified.\n \n @end itemize\n \n@@ -3135,7 +3153,9 @@ comment, or whenever a backslash-newline appears in a @samp{//} comment.\n @item -Wtrigraphs\n @findex -Wtrigraphs\n Warn if any trigraphs are encountered.  This option used to take effect\n-only if @samp{-trigraphs} was also specified, but now works independently.\n+only if @samp{-trigraphs} was also specified, but now works\n+independently.  Warnings are not given for trigraphs within comments, as\n+we feel this is obnoxious.\n \n @item -Wwhite-space\n @findex -Wwhite-space"}]}