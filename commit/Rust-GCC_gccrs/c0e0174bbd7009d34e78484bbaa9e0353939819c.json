{"sha": "c0e0174bbd7009d34e78484bbaa9e0353939819c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzBlMDE3NGJiZDcwMDlkMzRlNzg0ODRiYmFhOWUwMzUzOTM5ODE5Yw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-12-02T17:48:08Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-12-02T17:48:08Z"}, "message": "[AArch64] Catch attempts to use SVE types when SVE is disabled\n\nThis patch reports an error if code tries to use variable-length\nSVE types when SVE is disabled.  We already report a similar error\nfor definitions or uses of SVE functions when SVE is disabled.\n\n2019-12-02  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* config/aarch64/aarch64.c (aarch64_report_sve_required): New function.\n\t(aarch64_expand_mov_immediate): Use it when attempting to measure\n\tthe length of an SVE vector.\n\t(aarch64_mov_operand_p): Only allow SVE CNT immediates when\n\tSVE is enabled.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/acle/general/nosve_4.c: New test.\n\t* gcc.target/aarch64/sve/acle/general/nosve_5.c: Likewise.\n\t* gcc.target/aarch64/sve/pcs/nosve_4.c: Expected a second error\n\tfor the copy.\n\t* gcc.target/aarch64/sve/pcs/nosve_5.c: Likewise.\n\t* gcc.target/aarch64/sve/pcs/nosve_6.c: Likewise.\n\nFrom-SVN: r278909", "tree": {"sha": "cbb404f121c885dfdd5f835dd7e55c8e9b294141", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cbb404f121c885dfdd5f835dd7e55c8e9b294141"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c0e0174bbd7009d34e78484bbaa9e0353939819c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0e0174bbd7009d34e78484bbaa9e0353939819c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0e0174bbd7009d34e78484bbaa9e0353939819c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0e0174bbd7009d34e78484bbaa9e0353939819c/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6da4c454acee4dac53c4c549fa1caeb73fe1f82b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6da4c454acee4dac53c4c549fa1caeb73fe1f82b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6da4c454acee4dac53c4c549fa1caeb73fe1f82b"}], "stats": {"total": 68, "additions": 64, "deletions": 4}, "files": [{"sha": "b7d3cc632bcb6ddf2780fc3154e2a9a23e4519c4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0e0174bbd7009d34e78484bbaa9e0353939819c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0e0174bbd7009d34e78484bbaa9e0353939819c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c0e0174bbd7009d34e78484bbaa9e0353939819c", "patch": "@@ -1,3 +1,11 @@\n+2019-12-02  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_report_sve_required): New function.\n+\t(aarch64_expand_mov_immediate): Use it when attempting to measure\n+\tthe length of an SVE vector.\n+\t(aarch64_mov_operand_p): Only allow SVE CNT immediates when\n+\tSVE is enabled.\n+\n 2019-12-02  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* config/aarch64/aarch64-sve-builtins.h"}, {"sha": "c0d49fb7cf04951d773b48e91b00c142a631ca39", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0e0174bbd7009d34e78484bbaa9e0353939819c/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0e0174bbd7009d34e78484bbaa9e0353939819c/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=c0e0174bbd7009d34e78484bbaa9e0353939819c", "patch": "@@ -1473,6 +1473,25 @@ aarch64_err_no_fpadvsimd (machine_mode mode)\n \t     \" vector types\", \"+nofp\");\n }\n \n+/* Report when we try to do something that requires SVE when SVE is disabled.\n+   This is an error of last resort and isn't very high-quality.  It usually\n+   involves attempts to measure the vector length in some way.  */\n+static void\n+aarch64_report_sve_required (void)\n+{\n+  static bool reported_p = false;\n+\n+  /* Avoid reporting a slew of messages for a single oversight.  */\n+  if (reported_p)\n+    return;\n+\n+  error (\"this operation requires the SVE ISA extension\");\n+  inform (input_location, \"you can enable SVE using the command-line\"\n+\t  \" option %<-march%>, or by using the %<target%>\"\n+\t  \" attribute or pragma\");\n+  reported_p = true;\n+}\n+\n /* Return true if REGNO is P0-P15 or one of the special FFR-related\n    registers.  */\n inline bool\n@@ -4525,6 +4544,11 @@ aarch64_expand_mov_immediate (rtx dest, rtx imm)\n \t folding it into the relocation.  */\n       if (!offset.is_constant (&const_offset))\n \t{\n+\t  if (!TARGET_SVE)\n+\t    {\n+\t      aarch64_report_sve_required ();\n+\t      return;\n+\t    }\n \t  if (base == const0_rtx && aarch64_sve_cnt_immediate_p (offset))\n \t    emit_insn (gen_rtx_SET (dest, imm));\n \t  else\n@@ -16864,7 +16888,7 @@ aarch64_mov_operand_p (rtx x, machine_mode mode)\n   if (GET_CODE (x) == SYMBOL_REF && mode == DImode && CONSTANT_ADDRESS_P (x))\n     return true;\n \n-  if (aarch64_sve_cnt_immediate_p (x))\n+  if (TARGET_SVE && aarch64_sve_cnt_immediate_p (x))\n     return true;\n \n   return aarch64_classify_symbolic_expression (x)"}, {"sha": "f4a5bb24e1a7cf5d13a2de4dd80d55a207ebbdb7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0e0174bbd7009d34e78484bbaa9e0353939819c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0e0174bbd7009d34e78484bbaa9e0353939819c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c0e0174bbd7009d34e78484bbaa9e0353939819c", "patch": "@@ -1,3 +1,12 @@\n+2019-12-02  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/sve/acle/general/nosve_4.c: New test.\n+\t* gcc.target/aarch64/sve/acle/general/nosve_5.c: Likewise.\n+\t* gcc.target/aarch64/sve/pcs/nosve_4.c: Expected a second error\n+\tfor the copy.\n+\t* gcc.target/aarch64/sve/pcs/nosve_5.c: Likewise.\n+\t* gcc.target/aarch64/sve/pcs/nosve_6.c: Likewise.\n+\n 2019-12-02  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* gcc.target/aarch64/sve/acle/aarch64-sve-acle.exp: Run the"}, {"sha": "35ab07f1b49dd6278d97f3531767f4c55efd9b36", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general/nosve_4.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0e0174bbd7009d34e78484bbaa9e0353939819c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral%2Fnosve_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0e0174bbd7009d34e78484bbaa9e0353939819c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral%2Fnosve_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral%2Fnosve_4.c?ref=c0e0174bbd7009d34e78484bbaa9e0353939819c", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-options \"-march=armv8-a\" } */\n+\n+void\n+f (__SVBool_t *x, __SVBool_t *y)\n+{\n+  *x = *y; /* { dg-error {this operation requires the SVE ISA extension} } */\n+  *x = *y;\n+}"}, {"sha": "6e8d951b29475986e66210e06ed64e24e5607a57", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general/nosve_5.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0e0174bbd7009d34e78484bbaa9e0353939819c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral%2Fnosve_5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0e0174bbd7009d34e78484bbaa9e0353939819c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral%2Fnosve_5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral%2Fnosve_5.c?ref=c0e0174bbd7009d34e78484bbaa9e0353939819c", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-options \"-march=armv8-a\" } */\n+\n+void\n+f (__SVInt8_t *x, __SVInt8_t *y)\n+{\n+  *x = *y; /* { dg-error {this operation requires the SVE ISA extension} } */\n+  *x = *y;\n+}"}, {"sha": "a248bdbdbd94f82350c8abe75b52f799ff443db5", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pcs/nosve_4.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0e0174bbd7009d34e78484bbaa9e0353939819c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Fnosve_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0e0174bbd7009d34e78484bbaa9e0353939819c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Fnosve_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Fnosve_4.c?ref=c0e0174bbd7009d34e78484bbaa9e0353939819c", "patch": "@@ -10,5 +10,6 @@ void take_svuint8 (svuint8_t);\n void\n f (svuint8_t *ptr)\n {\n-  take_svuint8 (*ptr); /* { dg-error {'take_svuint8' requires the SVE ISA extension} } */\n+  take_svuint8 (*ptr); /* { dg-error {this operation requires the SVE ISA extension} } */\n+  /* { dg-error {'take_svuint8' requires the SVE ISA extension} \"\" { target *-*-* } .-1 } */\n }"}, {"sha": "6263b5acdecbe6254002272c082913763faad340", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pcs/nosve_5.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0e0174bbd7009d34e78484bbaa9e0353939819c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Fnosve_5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0e0174bbd7009d34e78484bbaa9e0353939819c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Fnosve_5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Fnosve_5.c?ref=c0e0174bbd7009d34e78484bbaa9e0353939819c", "patch": "@@ -11,5 +11,6 @@ void take_svuint8_eventually (float, float, float, float,\n void\n f (svuint8_t *ptr)\n {\n-  take_svuint8_eventually (0, 0, 0, 0, 0, 0, 0, 0, *ptr); /* { dg-error {arguments of type '(svuint8_t|__SVUint8_t)' require the SVE ISA extension} } */\n+  take_svuint8_eventually (0, 0, 0, 0, 0, 0, 0, 0, *ptr); /* { dg-error {this operation requires the SVE ISA extension} } */\n+  /* { dg-error {arguments of type '(svuint8_t|__SVUint8_t)' require the SVE ISA extension} \"\" { target *-*-* } .-1 } */\n }"}, {"sha": "85b68bb38816a1b3c82681461825f3b22c357b25", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pcs/nosve_6.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0e0174bbd7009d34e78484bbaa9e0353939819c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Fnosve_6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0e0174bbd7009d34e78484bbaa9e0353939819c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Fnosve_6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Fnosve_6.c?ref=c0e0174bbd7009d34e78484bbaa9e0353939819c", "patch": "@@ -10,5 +10,6 @@ void unprototyped ();\n void\n f (svuint8_t *ptr)\n {\n-  unprototyped (*ptr); /* { dg-error {arguments of type '(svuint8_t|__SVUint8_t)' require the SVE ISA extension} } */\n+  unprototyped (*ptr);  /* { dg-error {this operation requires the SVE ISA extension} } */\n+  /* { dg-error {arguments of type '(svuint8_t|__SVUint8_t)' require the SVE ISA extension} \"\" { target *-*-* } .-1 } */\n }"}]}