{"sha": "653b32a67042e48e7ed43a32e26a52bd314f4104", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjUzYjMyYTY3MDQyZTQ4ZTdlZDQzYTMyZTI2YTUyYmQzMTRmNDEwNA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-07-20T13:17:54Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-07-20T13:17:54Z"}, "message": "Initial revision\n\nFrom-SVN: r12542", "tree": {"sha": "314719bf3d9feb931210a41647577b5686a2ebfa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/314719bf3d9feb931210a41647577b5686a2ebfa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/653b32a67042e48e7ed43a32e26a52bd314f4104", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/653b32a67042e48e7ed43a32e26a52bd314f4104", "html_url": "https://github.com/Rust-GCC/gccrs/commit/653b32a67042e48e7ed43a32e26a52bd314f4104", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/653b32a67042e48e7ed43a32e26a52bd314f4104/comments", "author": null, "committer": null, "parents": [{"sha": "22b54c57a1d3b30ebbfc9c34650e360753b5d591", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22b54c57a1d3b30ebbfc9c34650e360753b5d591", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22b54c57a1d3b30ebbfc9c34650e360753b5d591"}], "stats": {"total": 164, "additions": 164, "deletions": 0}, "files": [{"sha": "752866536b8491ffeb1284baa8b410e68b1ec9ec", "filename": "gcc/config/mips/sni-gas.h", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/653b32a67042e48e7ed43a32e26a52bd314f4104/gcc%2Fconfig%2Fmips%2Fsni-gas.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/653b32a67042e48e7ed43a32e26a52bd314f4104/gcc%2Fconfig%2Fmips%2Fsni-gas.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fsni-gas.h?ref=653b32a67042e48e7ed43a32e26a52bd314f4104", "patch": "@@ -0,0 +1,43 @@\n+#include \"mips/sni-svr4.h\"\n+\n+/* Enable debugging.  */\n+#define DBX_DEBUGGING_INFO\n+#define SDB_DEBUGGING_INFO\n+#define MIPS_DEBUGGING_INFO\n+\n+#define DWARF_DEBUGGING_INFO\n+#undef PREFERRED_DEBUGGING_TYPE\n+#define PREFERRED_DEBUGGING_TYPE DWARF_DEBUG\n+\n+/* We need to use .esize and .etype instead of .size and .type to\n+   avoid conflicting with ELF directives.  These are only recognized\n+   by gas, anyhow, not the native assembler.  */\n+#undef PUT_SDB_SIZE\n+#define PUT_SDB_SIZE(a)                                       \\\n+do {                                                  \\\n+  extern FILE *asm_out_text_file;                     \\\n+  fprintf (asm_out_text_file, \"\\t.esize\\t%d;\", (a));  \\\n+} while (0)\n+\n+#undef PUT_SDB_TYPE\n+#define PUT_SDB_TYPE(a)                                       \\\n+do {                                                  \\\n+  extern FILE *asm_out_text_file;                     \\\n+  fprintf (asm_out_text_file, \"\\t.etype\\t0x%x;\", (a));        \\\n+} while (0)\n+\n+\n+/* This is how to equate one symbol to another symbol.  The syntax used is\n+   `SYM1=SYM2'.  Note that this is different from the way equates are done\n+   with most svr4 assemblers, where the syntax is `.set SYM1,SYM2'.  */\n+\n+#define ASM_OUTPUT_DEF(FILE,LABEL1,LABEL2)\t\t\t\t\\\n+ do {\tfprintf ((FILE), \"\\t\");\t\t\t\t\t\t\\\n+\tassemble_name (FILE, LABEL1);\t\t\t\t\t\\\n+\tfprintf (FILE, \" = \");\t\t\t\t\t\t\\\n+\tassemble_name (FILE, LABEL2);\t\t\t\t\t\\\n+\tfprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n+  } while (0)\n+\n+\n+"}, {"sha": "67b18c02c37007a19ac82dca03a781c41395fd28", "filename": "gcc/config/mips/sni-svr4.h", "status": "added", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/653b32a67042e48e7ed43a32e26a52bd314f4104/gcc%2Fconfig%2Fmips%2Fsni-svr4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/653b32a67042e48e7ed43a32e26a52bd314f4104/gcc%2Fconfig%2Fmips%2Fsni-svr4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fsni-svr4.h?ref=653b32a67042e48e7ed43a32e26a52bd314f4104", "patch": "@@ -0,0 +1,103 @@\n+/* Definitions of target machine for GNU compiler.  SNI SINIX version.\n+   Copyright (C) 1996 Free Software Foundation, Inc.\n+   Contributed by Marco Walther (Marco.Walther@mch.sni.de).\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+#define MIPS_SVR4\n+\n+#define CPP_PREDEFINES \"\\\n+-Dmips -Dunix -Dhost_mips -DMIPSEB -DR3000 -DSYSTYPE_SVR4 \\\n+-D_mips -D_unix -D_host_mips -D_MIPSEB -D_R3000 -D_SYSTYPE_SVR4 \\\n+-Asystem(unix) -Asystem(svr4) -Acpu(mips) -Amachine(mips)\"\n+\n+#define CPP_SPEC \"\\\n+%{.cc:\t-D__LANGUAGE_C_PLUS_PLUS -D_LANGUAGE_C_PLUS_PLUS} \\\n+%{.cxx:\t-D__LANGUAGE_C_PLUS_PLUS -D_LANGUAGE_C_PLUS_PLUS} \\\n+%{.C:\t-D__LANGUAGE_C_PLUS_PLUS -D_LANGUAGE_C_PLUS_PLUS} \\\n+%{.m:\t-D__LANGUAGE_OBJECTIVE_C -D_LANGUAGE_OBJECTIVE_C} \\\n+%{.S:\t-D__LANGUAGE_ASSEMBLY -D_LANGUAGE_ASSEMBLY %{!ansi:-DLANGUAGE_ASSEMBLY}} \\\n+%{.s:\t-D__LANGUAGE_ASSEMBLY -D_LANGUAGE_ASSEMBLY %{!ansi:-DLANGUAGE_ASSEMBLY}} \\\n+%{!.S:%{!.s:\t-D__LANGUAGE_C -D_LANGUAGE_C %{!ansi:-DLANGUAGE_C}}} \\\n+-D__SIZE_TYPE__=unsigned\\\\ int -D__PTRDIFF_TYPE__=int\"\n+\n+#define LINK_SPEC \"\\\n+%{G*} \\\n+%{!mgas: \\\n+\t%{dy} %{dn}}\"\n+\t\t    \n+#define LIB_SPEC \"\\\n+\t%{p:-lprof1} \\\n+\t%{!p:%{pg:-lprof1} \\\n+\t     %{!pg:-L/usr/ccs/lib/ -lc /usr/ccs/lib/crtn.o%s}}\"\n+\n+#define STARTFILE_SPEC \"\\\n+\t%{pg:gcrt0.o%s} \\\n+\t%{!pg:%{p:mcrt0.o%s} \\\n+\t       %{!p:/usr/ccs/lib/crt1.o /usr/ccs/lib/crti.o /usr/ccs/lib/values-Xt.o%s}}\"\n+\n+/* Mips System V.4 doesn't have a getpagesize() function needed by the\n+   trampoline code, so use the POSIX sysconf function to get it.\n+   This is only done when compiling the trampoline code.  */\n+\n+#ifdef  L_trampoline\n+#include <unistd.h>\n+\n+#define getpagesize()\tsysconf(_SC_PAGE_SIZE)\n+#endif /*  L_trampoline */\n+\n+/* Use atexit for static constructors/destructors, instead of defining\n+   our own exit function.  */\n+#define HAVE_ATEXIT\n+\n+/* Generate calls to memcpy, etc., not bcopy, etc.  */\n+#define TARGET_MEM_FUNCTIONS\n+\n+#define OBJECT_FORMAT_ELF\n+\n+#define\tTARGET_DEFAULT\tMASK_ABICALLS\n+#define ABICALLS_ASM_OP \".option pic2\"\n+\n+#define MACHINE_TYPE \"SNI running SINIX 5.42\"\n+\n+#define MIPS_DEFAULT_GVALUE\t0\n+\n+#define NM_FLAGS\t\"-p\"\n+\n+/* wir haben ein Problem, wenn in einem Assembler-File keine .text-section\n+   erzeugt wird. Dann landen diese Pseudo-Labels in irgendeiner anderen\n+   section, z.B. .reginfo. Das macht den ld sehr ungluecklich. */\n+\n+#define ASM_IDENTIFY_GCC(mw_stream) \\\n+\tfprintf(mw_stream, \"\\t.ident \\\"gcc2_compiled.\\\"\\n\");\n+\n+#define ASM_IDENTIFY_LANGUAGE(STREAM)\n+\n+#define ASM_LONG\t\".word\\t\"\n+#define ASM_GLOBAL\t\".rdata\\n\\t\\t.globl\\t\"\n+\n+#include \"mips/mips.h\"\n+\n+/* We do not want to run mips-tfile!  */\n+#undef ASM_FINAL_SPEC\n+\n+#undef OBJECT_FORMAT_COFF\n+\n+/* We don't support debugging info for now. */\n+#undef DBX_DEBUGGING_INFO\n+#undef SDB_DEBUGGING_INFO\n+#undef MIPS_DEBUGGING_INFO"}, {"sha": "f986f88162f4957705d8453df188663d2ad7f7ac", "filename": "gcc/config/mips/x-sni-svr4", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/653b32a67042e48e7ed43a32e26a52bd314f4104/gcc%2Fconfig%2Fmips%2Fx-sni-svr4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/653b32a67042e48e7ed43a32e26a52bd314f4104/gcc%2Fconfig%2Fmips%2Fx-sni-svr4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fx-sni-svr4?ref=653b32a67042e48e7ed43a32e26a52bd314f4104", "patch": "@@ -0,0 +1,18 @@\n+# Define CC and OLDCC as the same, so that the tests:\n+#\tif [ x\"$(OLDCC)\" = x\"$(CC)\" ] ...\n+#\n+# will succeed (if OLDCC != CC, it is assumed that GCC is\n+# being used in secondary stage builds).\n+# -Olimit is so the user can use -O2.  Down with fixed\n+# size tables!\n+\n+CC\t\t= $(OLDCC)\n+OPT\t\t=\n+OLDCC\t\t= cc -Olimit 3000 $(OPT)\n+\n+X_CFLAGS\t= -DNO_SYS_SIGLIST\n+\n+# Show we need to use the C version of ALLOCA\n+# The SVR3 configurations have it, but the SVR4 configurations don't.\n+# For now, just try using it for all SVR* configurations.\n+ALLOCA\t\t= alloca.o"}]}