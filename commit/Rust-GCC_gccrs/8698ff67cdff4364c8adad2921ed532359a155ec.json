{"sha": "8698ff67cdff4364c8adad2921ed532359a155ec", "node_id": "C_kwDOANBUbNoAKDg2OThmZjY3Y2RmZjQzNjRjOGFkYWQyOTIxZWQ1MzIzNTlhMTU1ZWM", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-03-24T11:23:51Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-03-24T11:23:51Z"}, "message": "fold-const: Handle C++ dependent COMPONENT_REFs in operand_equal_p [PR105035]\n\nAs mentioned in the PR, operand_equal_p already contains some hacks so that\nit can be called already on pre-instantiation C++ trees from templates,\nbut the recent change to compare DECL_FIELD_OFFSET in the COMPONENT_REF\ncase broke this.  Many such COMPONENT_REFs are already punted on earlier\nbecause they have NULL TREE_TYPE, but in this case the code knows what\ntype they have but still uses an IDENTIFIER_NODE as second operand\nof COMPONENT_REF (I think SCOPE_REF is something that could be used too).\n\nThe following patch looks at those DECL_FIELD_*OFFSET fields only if\nboth field[01] args are FIELD_DECLs and otherwise keeps it to the\nearlier OP_SAME (1) check that guards this whole block.\n\n2022-03-24  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/105035\n\t* fold-const.cc (operand_equal_p) <case COMPONENT_REF>: If either\n\tfield0 or field1 is not a FIELD_DECL, return false.\n\n\t* g++.dg/warn/Wduplicated-cond2.C: New test.", "tree": {"sha": "91d590dffc06408b709d71a8aceeeca7ebee3612", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91d590dffc06408b709d71a8aceeeca7ebee3612"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8698ff67cdff4364c8adad2921ed532359a155ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8698ff67cdff4364c8adad2921ed532359a155ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8698ff67cdff4364c8adad2921ed532359a155ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8698ff67cdff4364c8adad2921ed532359a155ec/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d937c6e44ba64694c0fc88f40f42390149d1d624", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d937c6e44ba64694c0fc88f40f42390149d1d624", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d937c6e44ba64694c0fc88f40f42390149d1d624"}], "stats": {"total": 36, "additions": 34, "deletions": 2}, "files": [{"sha": "b647e5305aac3055ab0fb8bcb8c488b13efe0344", "filename": "gcc/fold-const.cc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8698ff67cdff4364c8adad2921ed532359a155ec/gcc%2Ffold-const.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8698ff67cdff4364c8adad2921ed532359a155ec/gcc%2Ffold-const.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.cc?ref=8698ff67cdff4364c8adad2921ed532359a155ec", "patch": "@@ -3357,8 +3357,11 @@ operand_compare::operand_equal_p (const_tree arg0, const_tree arg1,\n \t\t    tree field0 = TREE_OPERAND (arg0, 1);\n \t\t    tree field1 = TREE_OPERAND (arg1, 1);\n \n-\t\t    if (!operand_equal_p (DECL_FIELD_OFFSET (field0),\n-\t\t\t\t\t  DECL_FIELD_OFFSET (field1), flags)\n+\t\t    /* Non-FIELD_DECL operands can appear in C++ templates.  */\n+\t\t    if (TREE_CODE (field0) != FIELD_DECL\n+\t\t\t|| TREE_CODE (field1) != FIELD_DECL\n+\t\t\t|| !operand_equal_p (DECL_FIELD_OFFSET (field0),\n+\t\t\t\t\t     DECL_FIELD_OFFSET (field1), flags)\n \t\t\t|| !operand_equal_p (DECL_FIELD_BIT_OFFSET (field0),\n \t\t\t\t\t     DECL_FIELD_BIT_OFFSET (field1),\n \t\t\t\t\t     flags))"}, {"sha": "c977389a2e4eed8cbd9419142ca2d83faa5d8b02", "filename": "gcc/testsuite/g++.dg/warn/Wduplicated-cond2.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8698ff67cdff4364c8adad2921ed532359a155ec/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWduplicated-cond2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8698ff67cdff4364c8adad2921ed532359a155ec/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWduplicated-cond2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWduplicated-cond2.C?ref=8698ff67cdff4364c8adad2921ed532359a155ec", "patch": "@@ -0,0 +1,29 @@\n+// PR c++/105035\n+// { dg-do compile }\n+// { dg-options \"-Wduplicated-cond\" }\n+\n+class A {\n+  struct B { int c; int f; } e;\n+  template <typename> void foo ();\n+  void bar ();\n+};\n+\n+template <typename> void\n+A::foo ()\n+{\n+  int g;\n+  if (&g == &e.c)\n+    ;\n+  else if (&g == &e.f)\n+    ;\n+}\n+\n+void\n+A::bar ()\n+{\n+  int g;\n+  if (&g == &e.c)\t// { dg-message \"previously used here\" }\n+    ;\n+  else if (&g == &e.c)\t// { dg-warning \"duplicated 'if' condition\" }\n+    ;\n+}"}]}