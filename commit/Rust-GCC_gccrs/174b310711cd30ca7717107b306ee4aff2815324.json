{"sha": "174b310711cd30ca7717107b306ee4aff2815324", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTc0YjMxMDcxMWNkMzBjYTc3MTcxMDdiMzA2ZWU0YWZmMjgxNTMyNA==", "commit": {"author": {"name": "Vladimir Makarov", "email": "vmakarov@redhat.com", "date": "2009-04-03T22:02:33Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "2009-04-03T22:02:33Z"}, "message": "revert: reload.c (push_reload, [...]): Use df_get_live_out instead of DF_LR_OUT.\n\n2009-04-03  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tRevert\n\t2009-03-30  Vladimir Makarov  <vmakarov@redhat.com>\n\t* reload.c (push_reload, find_dummy_reload): Use df_get_live_out\n\tinstead of DF_LR_OUT.\n\t* ira-lives.c (process_bb_node_lives): Ditto.\n\t* ira-color.c (ira_loop_edge_freq): Use df_get_live_{out,in}\n\tinstead of DF_LR_{OUT,IN}.\n\t* ira-emit.c (generate_edge_moves, add_ranges_and_copies): Ditto.\n\t* ira-build.c (create_bb_allocnos, create_loop_allocnos): Ditto.\n\nFrom-SVN: r145521", "tree": {"sha": "2dd6bc9ff1434b729792664f7791f8b0f56dac2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2dd6bc9ff1434b729792664f7791f8b0f56dac2e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/174b310711cd30ca7717107b306ee4aff2815324", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/174b310711cd30ca7717107b306ee4aff2815324", "html_url": "https://github.com/Rust-GCC/gccrs/commit/174b310711cd30ca7717107b306ee4aff2815324", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/174b310711cd30ca7717107b306ee4aff2815324/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "535b544aa70749ecce8ea8914831479ece53995f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/535b544aa70749ecce8ea8914831479ece53995f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/535b544aa70749ecce8ea8914831479ece53995f"}], "stats": {"total": 43, "additions": 27, "deletions": 16}, "files": [{"sha": "ebb5da7d8daf625c410ae1e7705a11a33b7c6008", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/174b310711cd30ca7717107b306ee4aff2815324/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/174b310711cd30ca7717107b306ee4aff2815324/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=174b310711cd30ca7717107b306ee4aff2815324", "patch": "@@ -1,3 +1,15 @@\n+2009-04-03  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tRevert\n+\t2009-03-30  Vladimir Makarov  <vmakarov@redhat.com>\n+\t* reload.c (push_reload, find_dummy_reload): Use df_get_live_out\n+\tinstead of DF_LR_OUT.\n+\t* ira-lives.c (process_bb_node_lives): Ditto.\n+\t* ira-color.c (ira_loop_edge_freq): Use df_get_live_{out,in}\n+\tinstead of DF_LR_{OUT,IN}.\n+\t* ira-emit.c (generate_edge_moves, add_ranges_and_copies): Ditto.\n+\t* ira-build.c (create_bb_allocnos, create_loop_allocnos): Ditto.\n+\n 2009-04-03  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* omp-low.c (pass_expand_omp): Don't claim to provide PROP_gimple_lomp."}, {"sha": "9662c4ab7dac04ba345c0a11a71af3502776e532", "filename": "gcc/ira-build.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/174b310711cd30ca7717107b306ee4aff2815324/gcc%2Fira-build.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/174b310711cd30ca7717107b306ee4aff2815324/gcc%2Fira-build.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-build.c?ref=174b310711cd30ca7717107b306ee4aff2815324", "patch": "@@ -1495,7 +1495,7 @@ create_bb_allocnos (ira_loop_tree_node_t bb_node)\n       create_insn_allocnos (PATTERN (insn), false);\n   /* It might be a allocno living through from one subloop to\n      another.  */\n-  EXECUTE_IF_SET_IN_REG_SET (df_get_live_in (bb), FIRST_PSEUDO_REGISTER, i, bi)\n+  EXECUTE_IF_SET_IN_REG_SET (DF_LR_IN (bb), FIRST_PSEUDO_REGISTER, i, bi)\n     if (ira_curr_regno_allocno_map[i] == NULL)\n       ira_create_allocno (i, false, ira_curr_loop_tree_node);\n }\n@@ -1511,9 +1511,9 @@ create_loop_allocnos (edge e)\n   bitmap_iterator bi;\n   ira_loop_tree_node_t parent;\n \n-  live_in_regs = df_get_live_in (e->dest);\n+  live_in_regs = DF_LR_IN (e->dest);\n   border_allocnos = ira_curr_loop_tree_node->border_allocnos;\n-  EXECUTE_IF_SET_IN_REG_SET (df_get_live_out (e->src),\n+  EXECUTE_IF_SET_IN_REG_SET (DF_LR_OUT (e->src),\n \t\t\t     FIRST_PSEUDO_REGISTER, i, bi)\n     if (bitmap_bit_p (live_in_regs, i))\n       {"}, {"sha": "4f1d302b7c7796fd18742224c503bd14039afa23", "filename": "gcc/ira-color.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/174b310711cd30ca7717107b306ee4aff2815324/gcc%2Fira-color.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/174b310711cd30ca7717107b306ee4aff2815324/gcc%2Fira-color.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-color.c?ref=174b310711cd30ca7717107b306ee4aff2815324", "patch": "@@ -1022,17 +1022,17 @@ ira_loop_edge_freq (ira_loop_tree_node_t loop_node, int regno, bool exit_p)\n       FOR_EACH_EDGE (e, ei, loop_node->loop->header->preds)\n \tif (e->src != loop_node->loop->latch\n \t    && (regno < 0\n-\t\t|| (bitmap_bit_p (df_get_live_out (e->src), regno)\n-\t\t    && bitmap_bit_p (df_get_live_in (e->dest), regno))))\n+\t\t|| (bitmap_bit_p (DF_LR_OUT (e->src), regno)\n+\t\t    && bitmap_bit_p (DF_LR_IN (e->dest), regno))))\n \t  freq += EDGE_FREQUENCY (e);\n     }\n   else\n     {\n       edges = get_loop_exit_edges (loop_node->loop);\n       for (i = 0; VEC_iterate (edge, edges, i, e); i++)\n \tif (regno < 0\n-\t    || (bitmap_bit_p (df_get_live_out (e->src), regno)\n-\t\t&& bitmap_bit_p (df_get_live_in (e->dest), regno)))\n+\t    || (bitmap_bit_p (DF_LR_OUT (e->src), regno)\n+\t\t&& bitmap_bit_p (DF_LR_IN (e->dest), regno)))\n \t  freq += EDGE_FREQUENCY (e);\n       VEC_free (edge, heap, edges);\n     }"}, {"sha": "df10ea45d62e9c93bab7bc9d0b0c7c3ce0402669", "filename": "gcc/ira-emit.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/174b310711cd30ca7717107b306ee4aff2815324/gcc%2Fira-emit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/174b310711cd30ca7717107b306ee4aff2815324/gcc%2Fira-emit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-emit.c?ref=174b310711cd30ca7717107b306ee4aff2815324", "patch": "@@ -390,9 +390,9 @@ generate_edge_moves (edge e)\n     return;\n   src_map = src_loop_node->regno_allocno_map;\n   dest_map = dest_loop_node->regno_allocno_map;\n-  EXECUTE_IF_SET_IN_REG_SET (df_get_live_in (e->dest),\n+  EXECUTE_IF_SET_IN_REG_SET (DF_LR_IN (e->dest),\n \t\t\t     FIRST_PSEUDO_REGISTER, regno, bi)\n-    if (bitmap_bit_p (df_get_live_out (e->src), regno))\n+    if (bitmap_bit_p (DF_LR_OUT (e->src), regno))\n       {\n \tsrc_allocno = src_map[regno];\n \tdest_allocno = dest_map[regno];\n@@ -1028,16 +1028,15 @@ add_ranges_and_copies (void)\n \t destination block) to use for searching allocnos by their\n \t regnos because of subsequent IR flattening.  */\n       node = IRA_BB_NODE (bb)->parent;\n-      bitmap_copy (live_through, df_get_live_in (bb));\n+      bitmap_copy (live_through, DF_LR_IN (bb));\n       add_range_and_copies_from_move_list\n \t(at_bb_start[bb->index], node, live_through, REG_FREQ_FROM_BB (bb));\n-      bitmap_copy (live_through, df_get_live_out (bb));\n+      bitmap_copy (live_through, DF_LR_OUT (bb));\n       add_range_and_copies_from_move_list\n \t(at_bb_end[bb->index], node, live_through, REG_FREQ_FROM_BB (bb));\n       FOR_EACH_EDGE (e, ei, bb->succs)\n \t{\n-\t  bitmap_and (live_through, df_get_live_in (e->dest),\n-\t\t      df_get_live_out (bb));\n+\t  bitmap_and (live_through, DF_LR_IN (e->dest), DF_LR_OUT (bb));\n \t  add_range_and_copies_from_move_list\n \t    ((move_t) e->aux, node, live_through,\n \t     REG_FREQ_FROM_EDGE_FREQ (EDGE_FREQUENCY (e)));"}, {"sha": "7ad903d2e4413162035770e71b11f55f110e99a2", "filename": "gcc/ira-lives.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/174b310711cd30ca7717107b306ee4aff2815324/gcc%2Fira-lives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/174b310711cd30ca7717107b306ee4aff2815324/gcc%2Fira-lives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-lives.c?ref=174b310711cd30ca7717107b306ee4aff2815324", "patch": "@@ -838,7 +838,7 @@ process_bb_node_lives (ira_loop_tree_node_t loop_tree_node)\n \t  high_pressure_start_point[ira_reg_class_cover[i]] = -1;\n \t}\n       curr_bb_node = loop_tree_node;\n-      reg_live_out = df_get_live_out (bb);\n+      reg_live_out = DF_LR_OUT (bb);\n       sparseset_clear (allocnos_live);\n       REG_SET_TO_HARD_REG_SET (hard_regs_live, reg_live_out);\n       AND_COMPL_HARD_REG_SET (hard_regs_live, eliminable_regset);"}, {"sha": "a7e9309f63c661d19b8a693afcab7e921af284d9", "filename": "gcc/reload.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/174b310711cd30ca7717107b306ee4aff2815324/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/174b310711cd30ca7717107b306ee4aff2815324/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=174b310711cd30ca7717107b306ee4aff2815324", "patch": "@@ -1549,7 +1549,7 @@ push_reload (rtx in, rtx out, rtx *inloc, rtx *outloc,\n \t    && reg_mentioned_p (XEXP (note, 0), in)\n \t    /* Check that a former pseudo is valid; see find_dummy_reload.  */\n \t    && (ORIGINAL_REGNO (XEXP (note, 0)) < FIRST_PSEUDO_REGISTER\n-\t\t|| (! bitmap_bit_p (df_get_live_out (ENTRY_BLOCK_PTR),\n+\t\t|| (! bitmap_bit_p (DF_LR_OUT (ENTRY_BLOCK_PTR),\n \t\t\t\t    ORIGINAL_REGNO (XEXP (note, 0)))\n \t\t    && hard_regno_nregs[regno][GET_MODE (XEXP (note, 0))] == 1))\n \t    && ! refers_to_regno_for_reload_p (regno,\n@@ -2027,7 +2027,7 @@ find_dummy_reload (rtx real_in, rtx real_out, rtx *inloc, rtx *outloc,\n \t     can ignore the conflict).  We must never introduce writes\n \t     to such hardregs, as they would clobber the other live\n \t     pseudo.  See PR 20973.  */\n-          || (!bitmap_bit_p (df_get_live_out (ENTRY_BLOCK_PTR),\n+          || (!bitmap_bit_p (DF_LR_OUT (ENTRY_BLOCK_PTR),\n \t\t\t     ORIGINAL_REGNO (in))\n \t      /* Similarly, only do this if we can be sure that the death\n \t\t note is still valid.  global can assign some hardreg to"}]}