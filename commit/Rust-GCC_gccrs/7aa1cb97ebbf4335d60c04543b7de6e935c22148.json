{"sha": "7aa1cb97ebbf4335d60c04543b7de6e935c22148", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2FhMWNiOTdlYmJmNDMzNWQ2MGMwNDU0M2I3ZGU2ZTkzNWMyMjE0OA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2007-10-16T21:54:41Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-10-16T21:54:41Z"}, "message": "stl_queue.h (queue<>::queue(_Sequence&&), [...]): Add.\n\n2007-10-16  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/stl_queue.h (queue<>::queue(_Sequence&&),\n\tqueue<>::queue(queue&&), queue<>::operator=(queue&&),\n\tqueue<>::push(value_type&&), queue<>::swap(queue&&),\n\tswap(queue<>&, queue<>&), swap(queue<>&&, queue<>&),\n\tswap(queue<>&, queue<>&&), priority_queue<>::\n\tpriority_queue(const _Compare&, _Sequence&&),\n\tpriority_queue<>::priority_queue(_InputIterator, _InputIterator,\n\tconst _Compare&, _Sequence&&),\n\tpriority_queue<>::priority_queue(priority_queue&&),\n\tpriority_queue<>::operator=(priority_queue&&),\n\tpriority_queue<>::push(value_type&&),\n\tpriority_queue<>::swap(priority_queue&&),\n\tswap(priority_queue<>&, priority_queue<>&),\n\tswap(priority_queue<>&&, priority_queue<>&),\n\tswap(priority_queue<>&, priority_queue<>&&)): Add.\n\t* include/bits/stl_stack.h (stack<>::stack(_Sequence&&),\n\tstack<>::push(value_type&&), stack<>::swap(stack&&),\n\tswap(stack<>&, stack<>&), swap(stack<>&&, stack<>&),\n\tswap(stack<>&, stack<>&&)): Add.\n\t* testsuite/23_containers/queue/moveable.cc: New.\n\t* testsuite/23_containers/priority_queue/moveable.cc: Likewise.\n\nFrom-SVN: r129390", "tree": {"sha": "398ddd68254da0b2d07d1b290a7f71d5fd3ab5b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/398ddd68254da0b2d07d1b290a7f71d5fd3ab5b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7aa1cb97ebbf4335d60c04543b7de6e935c22148", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7aa1cb97ebbf4335d60c04543b7de6e935c22148", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7aa1cb97ebbf4335d60c04543b7de6e935c22148", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7aa1cb97ebbf4335d60c04543b7de6e935c22148/comments", "author": null, "committer": null, "parents": [{"sha": "2bf374ab1436efe3489dcfa437f90a71c2c56e9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bf374ab1436efe3489dcfa437f90a71c2c56e9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bf374ab1436efe3489dcfa437f90a71c2c56e9c"}], "stats": {"total": 316, "additions": 314, "deletions": 2}, "files": [{"sha": "2e27f4aad49780a78e2cbeadc00b0be957ffa217", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7aa1cb97ebbf4335d60c04543b7de6e935c22148/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7aa1cb97ebbf4335d60c04543b7de6e935c22148/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7aa1cb97ebbf4335d60c04543b7de6e935c22148", "patch": "@@ -1,3 +1,27 @@\n+2007-10-16  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/stl_queue.h (queue<>::queue(_Sequence&&),\n+\tqueue<>::queue(queue&&), queue<>::operator=(queue&&),\n+\tqueue<>::push(value_type&&), queue<>::swap(queue&&),\n+\tswap(queue<>&, queue<>&), swap(queue<>&&, queue<>&),\n+\tswap(queue<>&, queue<>&&), priority_queue<>::\n+\tpriority_queue(const _Compare&, _Sequence&&),\n+\tpriority_queue<>::priority_queue(_InputIterator, _InputIterator,\n+\tconst _Compare&, _Sequence&&),\n+\tpriority_queue<>::priority_queue(priority_queue&&),\n+\tpriority_queue<>::operator=(priority_queue&&),\n+\tpriority_queue<>::push(value_type&&),\n+\tpriority_queue<>::swap(priority_queue&&),\n+\tswap(priority_queue<>&, priority_queue<>&),\n+\tswap(priority_queue<>&&, priority_queue<>&),\n+\tswap(priority_queue<>&, priority_queue<>&&)): Add.\n+\t* include/bits/stl_stack.h (stack<>::stack(_Sequence&&),\n+\tstack<>::push(value_type&&), stack<>::swap(stack&&),\n+\tswap(stack<>&, stack<>&), swap(stack<>&&, stack<>&),\n+\tswap(stack<>&, stack<>&&)): Add.\n+\t* testsuite/23_containers/queue/moveable.cc: New.\n+\t* testsuite/23_containers/priority_queue/moveable.cc: Likewise.\n+\n 2007-10-16  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/ext/vstring.h (__versa_string<>::"}, {"sha": "d772c0360acfc4ad5452215ecf78ac94fb1af03f", "filename": "libstdc++-v3/include/bits/stl_queue.h", "status": "modified", "additions": 139, "deletions": 2, "changes": 141, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7aa1cb97ebbf4335d60c04543b7de6e935c22148/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7aa1cb97ebbf4335d60c04543b7de6e935c22148/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h?ref=7aa1cb97ebbf4335d60c04543b7de6e935c22148", "patch": "@@ -131,8 +131,29 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       /**\n        *  @brief  Default constructor creates no elements.\n        */\n+#ifndef __GXX_EXPERIMENTAL_CXX0X__\n       explicit\n-      queue(const _Sequence& __c = _Sequence()) : c(__c) {}\n+      queue(const _Sequence& __c = _Sequence())\n+      : c(__c) { }\n+#else\n+      explicit\n+      queue(const _Sequence& __c)\n+      : c(__c) { }\n+\n+      explicit\n+      queue(_Sequence&& __c = _Sequence())\n+      : c(std::move(__c)) { }\n+\n+      queue(queue&& __q)\n+      : c(std::move(__q.c)) { }\n+\n+      queue&\n+      operator=(queue&& __q)\n+      {\n+\tc = std::move(__q.c);\n+\treturn *this;\n+      }\n+#endif\n \n       /**\n        *  Returns true if the %queue is empty.\n@@ -203,6 +224,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       push(const value_type& __x)\n       { c.push_back(__x); }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      void\n+      push(value_type&& __x)\n+      { c.push_back(std::move(__x)); }\n+#endif\n+\n       /**\n        *  @brief  Removes first element.\n        *\n@@ -220,8 +247,13 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t__glibcxx_requires_nonempty();\n \tc.pop_front();\n       }\n-    };\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      void\n+      swap(queue&& __q)\n+      { c.swap(__q.c); }\n+#endif\n+    };\n \n   /**\n    *  @brief  Queue equality comparison.\n@@ -281,6 +313,23 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     operator>=(const queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)\n     { return !(__x < __y); }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  template<typename _Tp, typename _Seq>\n+    inline void\n+    swap(queue<_Tp, _Seq>& __x, queue<_Tp, _Seq>& __y)\n+    { __x.swap(__y); }\n+\n+  template<typename _Tp, typename _Seq>\n+    inline void\n+    swap(queue<_Tp, _Seq>&& __x, queue<_Tp, _Seq>& __y)\n+    { __x.swap(__y); }\n+\n+  template<typename _Tp, typename _Seq>\n+    inline void\n+    swap(queue<_Tp, _Seq>& __x, queue<_Tp, _Seq>&& __y)\n+    { __x.swap(__y); }\n+#endif\n+\n   /**\n    *  @brief  A standard container automatically sorting its contents.\n    *\n@@ -346,11 +395,25 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       /**\n        *  @brief  Default constructor creates no elements.\n        */\n+#ifndef __GXX_EXPERIMENTAL_CXX0X__\n       explicit\n       priority_queue(const _Compare& __x = _Compare(),\n \t\t     const _Sequence& __s = _Sequence())\n       : c(__s), comp(__x)\n       { std::make_heap(c.begin(), c.end(), comp); }\n+#else\n+      explicit\n+      priority_queue(const _Compare& __x,\n+\t\t     const _Sequence& __s)\n+      : c(__s), comp(__x)\n+      { std::make_heap(c.begin(), c.end(), comp); }\n+\n+      explicit\n+      priority_queue(const _Compare& __x = _Compare(),\n+\t\t     _Sequence&& __s = _Sequence())\n+      : c(std::move(__s)), comp(__x)\n+      { std::make_heap(c.begin(), c.end(), comp); }\n+#endif\n \n       /**\n        *  @brief  Builds a %queue from a range.\n@@ -367,6 +430,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  documentation on @link s20_3_1_base functor base\n        *  classes@endlink.\n        */\n+#ifndef __GXX_EXPERIMENTAL_CXX0X__\n       template<typename _InputIterator>\n         priority_queue(_InputIterator __first, _InputIterator __last,\n \t\t       const _Compare& __x = _Compare(),\n@@ -377,6 +441,40 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t  c.insert(c.end(), __first, __last);\n \t  std::make_heap(c.begin(), c.end(), comp);\n \t}\n+#else\n+      template<typename _InputIterator>\n+        priority_queue(_InputIterator __first, _InputIterator __last,\n+\t\t       const _Compare& __x,\n+\t\t       const _Sequence& __s)\n+\t: c(__s), comp(__x)\n+        {\n+\t  __glibcxx_requires_valid_range(__first, __last);\n+\t  c.insert(c.end(), __first, __last);\n+\t  std::make_heap(c.begin(), c.end(), comp);\n+\t}\n+\n+      template<typename _InputIterator>\n+        priority_queue(_InputIterator __first, _InputIterator __last,\n+\t\t       const _Compare& __x = _Compare(),\n+\t\t       _Sequence&& __s = _Sequence())\n+\t: c(std::move(__s)), comp(__x)\n+        {\n+\t  __glibcxx_requires_valid_range(__first, __last);\n+\t  c.insert(c.end(), __first, __last);\n+\t  std::make_heap(c.begin(), c.end(), comp);\n+\t}\n+\n+      priority_queue(priority_queue&& __pq)\n+      : c(std::move(__pq.c)), comp(std::move(__pq.comp)) { }\n+\n+      priority_queue&\n+      operator=(priority_queue&& __pq)\n+      {\n+\tc = std::move(__pq.c);\n+\tcomp = std::move(__pq.comp);\n+\treturn *this;\n+      }\n+#endif\n \n       /**\n        *  Returns true if the %queue is empty.\n@@ -416,6 +514,15 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \tstd::push_heap(c.begin(), c.end(), comp);\n       }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      void\n+      push(value_type&& __x)\n+      {\n+\tc.push_back(std::move(__x));\n+\tstd::push_heap(c.begin(), c.end(), comp);\n+      }\n+#endif\n+\n       /**\n        *  @brief  Removes first element.\n        *\n@@ -434,10 +541,40 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \tstd::pop_heap(c.begin(), c.end(), comp);\n \tc.pop_back();\n       }\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      void\n+      swap(priority_queue&& __pq)\n+      {\n+\tusing std::swap;\n+\tc.swap(__pq.c);\n+\tswap(comp, __pq.comp);\n+      }\n+#endif\n     };\n \n   // No equality/comparison operators are provided for priority_queue.\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  template<typename _Tp, typename _Sequence, typename _Compare>\n+    inline void\n+    swap(priority_queue<_Tp, _Sequence, _Compare>& __x,\n+\t priority_queue<_Tp, _Sequence, _Compare>& __y)\n+    { __x.swap(__y); }\n+\n+  template<typename _Tp, typename _Sequence, typename _Compare>\n+    inline void\n+    swap(priority_queue<_Tp, _Sequence, _Compare>&& __x,\n+\t priority_queue<_Tp, _Sequence, _Compare>& __y)\n+    { __x.swap(__y); }\n+\n+  template<typename _Tp, typename _Sequence, typename _Compare>\n+    inline void\n+    swap(priority_queue<_Tp, _Sequence, _Compare>& __x,\n+\t priority_queue<_Tp, _Sequence, _Compare>&& __y)\n+    { __x.swap(__y); }\n+#endif\n+\n _GLIBCXX_END_NAMESPACE\n \n #endif /* _STL_QUEUE_H */"}, {"sha": "8af33970f1d3803e4c396ea4613769c884657a18", "filename": "libstdc++-v3/include/bits/stl_stack.h", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7aa1cb97ebbf4335d60c04543b7de6e935c22148/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7aa1cb97ebbf4335d60c04543b7de6e935c22148/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h?ref=7aa1cb97ebbf4335d60c04543b7de6e935c22148", "patch": "@@ -127,9 +127,19 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       /**\n        *  @brief  Default constructor creates no elements.\n        */\n+#ifndef __GXX_EXPERIMENTAL_CXX0X__\n       explicit\n       stack(const _Sequence& __c = _Sequence())\n       : c(__c) { }\n+#else\n+      explicit\n+      stack(const _Sequence& __c)\n+      : c(__c) { }\n+\n+      explicit\n+      stack(_Sequence&& __c = _Sequence())\n+      : c(std::move(__c)) { }\n+#endif\n \n       /**\n        *  Returns true if the %stack is empty.\n@@ -178,6 +188,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       push(const value_type& __x)\n       { c.push_back(__x); }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      void\n+      push(value_type&& __x)\n+      { c.push_back(std::move(__x)); }\n+#endif\n+\n       /**\n        *  @brief  Removes first element.\n        *\n@@ -195,6 +211,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t__glibcxx_requires_nonempty();\n \tc.pop_back();\n       }\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      void\n+      swap(stack&& __s)\n+      { c.swap(__s.c); }\n+#endif\n     };\n \n   /**\n@@ -256,6 +278,23 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     operator>=(const stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y)\n     { return !(__x < __y); }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  template<typename _Tp, typename _Seq>\n+    inline void\n+    swap(stack<_Tp, _Seq>& __x, stack<_Tp, _Seq>& __y)\n+    { __x.swap(__y); }\n+\n+  template<typename _Tp, typename _Seq>\n+    inline void\n+    swap(stack<_Tp, _Seq>&& __x, stack<_Tp, _Seq>& __y)\n+    { __x.swap(__y); }\n+\n+  template<typename _Tp, typename _Seq>\n+    inline void\n+    swap(stack<_Tp, _Seq>& __x, stack<_Tp, _Seq>&& __y)\n+    { __x.swap(__y); }\n+#endif\n+\n _GLIBCXX_END_NAMESPACE\n \n #endif /* _STL_STACK_H */"}, {"sha": "bda5a4c1792e8a19eb674abcf9a1e1425dadf780", "filename": "libstdc++-v3/testsuite/23_containers/priority_queue/moveable.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7aa1cb97ebbf4335d60c04543b7de6e935c22148/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fpriority_queue%2Fmoveable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7aa1cb97ebbf4335d60c04543b7de6e935c22148/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fpriority_queue%2Fmoveable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fpriority_queue%2Fmoveable.cc?ref=7aa1cb97ebbf4335d60c04543b7de6e935c22148", "patch": "@@ -0,0 +1,56 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// NOTE: This makes use of the fact that we know how moveable\n+// is implemented on vector (via swap). If the implementation changed\n+// this test may begin to fail.\n+\n+#include <queue>\n+#include <utility>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::priority_queue<int> a,b;\n+  a.push(1);\n+  b = std::move(a);\n+  VERIFY( b.size() == 1 && b.top() == 1 && a.size() == 0 );\n+\n+  std::priority_queue<int> c(std::move(b));\n+  VERIFY( c.size() == 1 && c.top() == 1 );\n+  VERIFY( b.size() == 0 );\n+}\n+\n+int main(void)\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "6827c48795a476485593ad81f525b6154a669b55", "filename": "libstdc++-v3/testsuite/23_containers/queue/moveable.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7aa1cb97ebbf4335d60c04543b7de6e935c22148/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fqueue%2Fmoveable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7aa1cb97ebbf4335d60c04543b7de6e935c22148/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fqueue%2Fmoveable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fqueue%2Fmoveable.cc?ref=7aa1cb97ebbf4335d60c04543b7de6e935c22148", "patch": "@@ -0,0 +1,56 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// NOTE: This makes use of the fact that we know how moveable\n+// is implemented on vector (via swap). If the implementation changed\n+// this test may begin to fail.\n+\n+#include <queue>\n+#include <utility>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::queue<int> a,b;\n+  a.push(1);\n+  b = std::move(a);\n+  VERIFY( b.size() == 1 && b.front() == 1 && a.size() == 0 );\n+\n+  std::queue<int> c(std::move(b));\n+  VERIFY( c.size() == 1 && c.front() == 1 );\n+  VERIFY( b.size() == 0 );\n+}\n+\n+int main(void)\n+{\n+  test01();\n+  return 0;\n+}"}]}