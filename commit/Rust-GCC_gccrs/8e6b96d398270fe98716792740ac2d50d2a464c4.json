{"sha": "8e6b96d398270fe98716792740ac2d50d2a464c4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGU2Yjk2ZDM5ODI3MGZlOTg3MTY3OTI3NDBhYzJkNTBkMmE0NjRjNA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2004-07-01T19:32:27Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2004-07-01T19:32:27Z"}, "message": "tree-pretty-print.c (dump_generic_node, [...]): Use access functions for lower bound and element size and only output if...\n\n\t* tree-pretty-print.c (dump_generic_node, case ARRAY_REF): Use\n\taccess functions for lower bound and element size and only output\n\tif lower bound nonzero or element size not same as that of type.\n\t(dump_generic_node, case COMPONENT_REF): Use access func. for offset.\n\nFrom-SVN: r83997", "tree": {"sha": "2c0c104908c11178291f6e0b65211456f1d8da76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c0c104908c11178291f6e0b65211456f1d8da76"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8e6b96d398270fe98716792740ac2d50d2a464c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e6b96d398270fe98716792740ac2d50d2a464c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e6b96d398270fe98716792740ac2d50d2a464c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e6b96d398270fe98716792740ac2d50d2a464c4/comments", "author": null, "committer": null, "parents": [{"sha": "695e0fbfe0257a0659880d0a05a2c754660e713f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/695e0fbfe0257a0659880d0a05a2c754660e713f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/695e0fbfe0257a0659880d0a05a2c754660e713f"}], "stats": {"total": 31, "additions": 19, "deletions": 12}, "files": [{"sha": "1850bc844d04c71ca376ee0e2d828eaf3fedb499", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e6b96d398270fe98716792740ac2d50d2a464c4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e6b96d398270fe98716792740ac2d50d2a464c4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8e6b96d398270fe98716792740ac2d50d2a464c4", "patch": "@@ -1,3 +1,10 @@\n+2004-07-01  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* tree-pretty-print.c (dump_generic_node, case ARRAY_REF): Use\n+\taccess functions for lower bound and element size and only output\n+\tif lower bound nonzero or element size not same as that of type.\n+\t(dump_generic_node, case COMPONENT_REF): Use access func. for offset.\n+\n 2004-07-01  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* c-pretty-print.c (pp_c_postfix_expression): Fix pasto."}, {"sha": "188faff0219e5df396f39c8020da96184e9e16a0", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e6b96d398270fe98716792740ac2d50d2a464c4/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e6b96d398270fe98716792740ac2d50d2a464c4/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=8e6b96d398270fe98716792740ac2d50d2a464c4", "patch": "@@ -611,12 +611,12 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n \tpp_character (buffer, ')');\n       pp_string (buffer, str);\n       dump_generic_node (buffer, TREE_OPERAND (node, 1), spc, flags, false);\n-      if (TREE_OPERAND (node, 2)\n-\t  && TREE_CODE (TREE_OPERAND (node, 2)) != INTEGER_CST)\n+\n+      op0 = component_ref_field_offset (node);\n+      if (op0 && TREE_CODE (op0) != INTEGER_CST)\n \t{\n \t  pp_string (buffer, \"{off: \");\n-\t  dump_generic_node (buffer, TREE_OPERAND (node, 2),\n-\t\t\t     spc, flags, false);\n+\t  dump_generic_node (buffer, op0, spc, flags, false);\n \t  pp_character (buffer, '}');\n \t}\n       break;\n@@ -649,17 +649,17 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n \tpp_string (buffer, \" ...\");\n       pp_character (buffer, ']');\n \n-      if ((TREE_OPERAND (node, 2)\n-\t   && TREE_CODE (TREE_OPERAND (node, 2)) != INTEGER_CST)\n-\t  || (TREE_OPERAND (node, 3)\n-\t      && TREE_CODE (TREE_OPERAND (node, 3)) != INTEGER_CST))\n+      op0 = array_ref_low_bound (node);\n+      op1 = array_ref_element_size (node);\n+\n+      if (!integer_zerop (op0)\n+\t  || (TYPE_SIZE_UNIT (TREE_TYPE (node))\n+\t      && !operand_equal_p (op1, TYPE_SIZE_UNIT (TREE_TYPE (node)), 0)))\n \t{\n \t  pp_string (buffer, \"{lb: \");\n-\t  dump_generic_node (buffer, TREE_OPERAND (node, 2),\n-\t\t\t     spc, flags, false);\n+\t  dump_generic_node (buffer, op0, spc, flags, false);\n \t  pp_string (buffer, \" sz: \");\n-\t  dump_generic_node (buffer, TREE_OPERAND (node, 3),\n-\t\t\t     spc, flags, false);\n+\t  dump_generic_node (buffer, op1, spc, flags, false);\n \t  pp_character (buffer, '}');\n \t}\n       break;"}]}