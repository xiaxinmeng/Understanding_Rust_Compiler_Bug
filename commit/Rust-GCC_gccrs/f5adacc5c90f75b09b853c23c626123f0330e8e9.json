{"sha": "f5adacc5c90f75b09b853c23c626123f0330e8e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjVhZGFjYzVjOTBmNzViMDliODUzYzIzYzYyNjEyM2YwMzMwZThlOQ==", "commit": {"author": {"name": "Dorit Nuzman", "email": "dorit@il.ibm.com", "date": "2007-12-17T20:54:01Z"}, "committer": {"name": "Dorit Nuzman", "email": "dorit@gcc.gnu.org", "date": "2007-12-17T20:54:01Z"}, "message": "tree-vectorizer.h (verbosity_levels): Add new verbosity level REPORT_COST.\n\n        * tree-vectorizer.h (verbosity_levels): Add new verbosity level\n        REPORT_COST.\n        * tree-vect-transform.c (vect_estimate_min_profitable_iters): Change\n        verbosity level to REPORT_COST.\n        (vect_model_reduction_cost): Likewise.\n        (vect_model_induction_cost): Likewise.\n        (vect_model_simple_cost): likewise.\n        (vect_model_store_cost): likewise.\n        (vect_model_load_cost): likewise.\n        (conservative_cost_threshold): Likewise. Remove print.\n\nFrom-SVN: r131016", "tree": {"sha": "118bea73c1beb985ba0bfb9d6080775a58416b5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/118bea73c1beb985ba0bfb9d6080775a58416b5d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5adacc5c90f75b09b853c23c626123f0330e8e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5adacc5c90f75b09b853c23c626123f0330e8e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5adacc5c90f75b09b853c23c626123f0330e8e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5adacc5c90f75b09b853c23c626123f0330e8e9/comments", "author": null, "committer": null, "parents": [{"sha": "8619bc82fc9873276dfe2715355de3c1c2bbb70c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8619bc82fc9873276dfe2715355de3c1c2bbb70c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8619bc82fc9873276dfe2715355de3c1c2bbb70c"}], "stats": {"total": 78, "additions": 48, "deletions": 30}, "files": [{"sha": "d5f940d7758d8bec53d942626877014c83377731", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5adacc5c90f75b09b853c23c626123f0330e8e9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5adacc5c90f75b09b853c23c626123f0330e8e9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f5adacc5c90f75b09b853c23c626123f0330e8e9", "patch": "@@ -1,3 +1,16 @@\n+2007-12-17  Dorit Nuzman  <dorit@il.ibm.com>\n+\n+\t* tree-vectorizer.h (verbosity_levels): Add new verbosity level\n+\tREPORT_COST.\n+\t* tree-vect-transform.c (vect_estimate_min_profitable_iters): Change\n+\tverbosity level to REPORT_COST.\n+\t(vect_model_reduction_cost): Likewise.\n+\t(vect_model_induction_cost): Likewise.\n+\t(vect_model_simple_cost): likewise.\n+\t(vect_model_store_cost): likewise.\n+\t(vect_model_load_cost): likewise.\n+\t(conservative_cost_threshold): Likewise. Remove print.\n+\n 2007-12-17  Rask Ingemann Lambertsen  <rask@sygehus.dk>\n \n \t* doc/tm.texi (TARGET_SECONDARY_RELOAD): Fix typos."}, {"sha": "9ede5c19d1d9640e24fa879ecb5a80621b73b913", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5adacc5c90f75b09b853c23c626123f0330e8e9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5adacc5c90f75b09b853c23c626123f0330e8e9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f5adacc5c90f75b09b853c23c626123f0330e8e9", "patch": "@@ -1,3 +1,11 @@\n+2007-12-17  Dorit Nuzman  <dorit@il.ibm.com>\n+\n+\t* gcc.dg/tree-ssa/gen-vect-2.c: Change verbosity level to 4.\t\n+\t* gcc.dg/tree-ssa/gen-vect-32.c: Likewise\n+\t* gcc.dg/tree-ssa/gen-vect-25.c: Likewise\n+\t* gcc.dg/tree-ssa/gen-vect-26.c: Likewise\n+\t* gcc.dg/tree-ssa/gen-vect-28.c: Likewise\n+\n 2007-12-17  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/34506"}, {"sha": "d0c8b85fae02998dc1e0c0ae37ec08bd20ea573e", "filename": "gcc/testsuite/gcc.dg/tree-ssa/gen-vect-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5adacc5c90f75b09b853c23c626123f0330e8e9/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fgen-vect-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5adacc5c90f75b09b853c23c626123f0330e8e9/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fgen-vect-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fgen-vect-2.c?ref=f5adacc5c90f75b09b853c23c626123f0330e8e9", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run { target vect_cmdline_needed } } */\n-/* { dg-options \"-O2 -ftree-vectorize -ftree-vectorizer-verbose=3 -fdump-tree-vect-stats\" } */\n+/* { dg-options \"-O2 -ftree-vectorize -ftree-vectorizer-verbose=4 -fdump-tree-vect-stats\" } */\n \n #include <stdlib.h>\n "}, {"sha": "fdd2ed2b58d74e2333a6a694d9f0e74d009bc63b", "filename": "gcc/testsuite/gcc.dg/tree-ssa/gen-vect-25.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5adacc5c90f75b09b853c23c626123f0330e8e9/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fgen-vect-25.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5adacc5c90f75b09b853c23c626123f0330e8e9/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fgen-vect-25.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fgen-vect-25.c?ref=f5adacc5c90f75b09b853c23c626123f0330e8e9", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run { target vect_cmdline_needed } } */\n-/* { dg-options \"-O2 -ftree-vectorize -ftree-vectorizer-verbose=3 -fdump-tree-vect-stats\" } */\n+/* { dg-options \"-O2 -ftree-vectorize -ftree-vectorizer-verbose=4 -fdump-tree-vect-stats\" } */\n \n #include <stdlib.h>\n "}, {"sha": "545495c9055928c3fce08da485b3db3ecfd5467d", "filename": "gcc/testsuite/gcc.dg/tree-ssa/gen-vect-26.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5adacc5c90f75b09b853c23c626123f0330e8e9/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fgen-vect-26.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5adacc5c90f75b09b853c23c626123f0330e8e9/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fgen-vect-26.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fgen-vect-26.c?ref=f5adacc5c90f75b09b853c23c626123f0330e8e9", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run { target vect_cmdline_needed } } */\n-/* { dg-options \"-O2 -ftree-vectorize -ftree-vectorizer-verbose=3 -fdump-tree-vect-stats\" } */\n+/* { dg-options \"-O2 -ftree-vectorize -ftree-vectorizer-verbose=4 -fdump-tree-vect-stats\" } */\n \n #include <stdlib.h>\n "}, {"sha": "3df4fbc81296bd3fa76355148b3d1e460d8d6474", "filename": "gcc/testsuite/gcc.dg/tree-ssa/gen-vect-28.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5adacc5c90f75b09b853c23c626123f0330e8e9/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fgen-vect-28.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5adacc5c90f75b09b853c23c626123f0330e8e9/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fgen-vect-28.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fgen-vect-28.c?ref=f5adacc5c90f75b09b853c23c626123f0330e8e9", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run { target vect_cmdline_needed } } */\n-/* { dg-options \"-O2 -ftree-vectorize -ftree-vectorizer-verbose=3 -fdump-tree-vect-stats\" } */\n+/* { dg-options \"-O2 -ftree-vectorize -ftree-vectorizer-verbose=4 -fdump-tree-vect-stats\" } */\n \n #include <stdlib.h>\n "}, {"sha": "8ea08657ac75ed949e6d770c5954cdba00205d86", "filename": "gcc/testsuite/gcc.dg/tree-ssa/gen-vect-32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5adacc5c90f75b09b853c23c626123f0330e8e9/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fgen-vect-32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5adacc5c90f75b09b853c23c626123f0330e8e9/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fgen-vect-32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fgen-vect-32.c?ref=f5adacc5c90f75b09b853c23c626123f0330e8e9", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run { target vect_cmdline_needed } } */\n-/* { dg-options \"-O2 -ftree-vectorize -ftree-vectorizer-verbose=3 -fdump-tree-vect-stats\" } */\n+/* { dg-options \"-O2 -ftree-vectorize -ftree-vectorizer-verbose=4 -fdump-tree-vect-stats\" } */\n \n #include <stdlib.h>\n "}, {"sha": "6fe1d63aae670b333d0dfc63e3143b4d0b67cef6", "filename": "gcc/tree-vect-transform.c", "status": "modified", "additions": 21, "deletions": 25, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5adacc5c90f75b09b853c23c626123f0330e8e9/gcc%2Ftree-vect-transform.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5adacc5c90f75b09b853c23c626123f0330e8e9/gcc%2Ftree-vect-transform.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-transform.c?ref=f5adacc5c90f75b09b853c23c626123f0330e8e9", "patch": "@@ -134,7 +134,7 @@ vect_estimate_min_profitable_iters (loop_vec_info loop_vinfo)\n   /* Cost model disabled.  */\n   if (!flag_vect_cost_model)\n     {\n-      if (vect_print_dump_info (REPORT_DETAILS))\n+      if (vect_print_dump_info (REPORT_COST))\n         fprintf (vect_dump, \"cost model disabled.\");      \n       return 0;\n     }\n@@ -153,7 +153,7 @@ vect_estimate_min_profitable_iters (loop_vec_info loop_vinfo)\n       /*  FIXME: Make cost depend on complexity of individual check.  */\n       vec_outside_cost +=\n         VEC_length (tree, LOOP_VINFO_MAY_MISALIGN_STMTS (loop_vinfo));\n-      if (vect_print_dump_info (REPORT_DETAILS))\n+      if (vect_print_dump_info (REPORT_COST))\n         fprintf (vect_dump, \"cost model: Adding cost of checks for loop \"\n                  \"versioning to treat misalignment.\\n\");\n     }\n@@ -163,7 +163,7 @@ vect_estimate_min_profitable_iters (loop_vec_info loop_vinfo)\n       /*  FIXME: Make cost depend on complexity of individual check.  */\n       vec_outside_cost +=\n         VEC_length (ddr_p, LOOP_VINFO_MAY_ALIAS_DDRS (loop_vinfo));\n-      if (vect_print_dump_info (REPORT_DETAILS))\n+      if (vect_print_dump_info (REPORT_COST))\n         fprintf (vect_dump, \"cost model: Adding cost of checks for loop \"\n                  \"versioning aliasing.\\n\");\n     }\n@@ -224,14 +224,14 @@ vect_estimate_min_profitable_iters (loop_vec_info loop_vinfo)\n   if (byte_misalign < 0)\n     {\n       peel_iters_prologue = vf/2;\n-      if (vect_print_dump_info (REPORT_DETAILS))\n+      if (vect_print_dump_info (REPORT_COST))\n         fprintf (vect_dump, \"cost model: \"\n                  \"prologue peel iters set to vf/2.\");\n \n       /* If peeling for alignment is unknown, loop bound of main loop becomes\n          unknown.  */\n       peel_iters_epilogue = vf/2;\n-      if (vect_print_dump_info (REPORT_DETAILS))\n+      if (vect_print_dump_info (REPORT_COST))\n         fprintf (vect_dump, \"cost model: \"\n                  \"epilogue peel iters set to vf/2 because \"\n                  \"peeling for alignment is unknown .\");\n@@ -261,7 +261,7 @@ vect_estimate_min_profitable_iters (loop_vec_info loop_vinfo)\n       if (!LOOP_VINFO_NITERS_KNOWN_P (loop_vinfo))\n         {\n           peel_iters_epilogue = vf/2;\n-          if (vect_print_dump_info (REPORT_DETAILS))\n+          if (vect_print_dump_info (REPORT_COST))\n             fprintf (vect_dump, \"cost model: \"\n                      \"epilogue peel iters set to vf/2 because \"\n                      \"loop iterations are unknown .\");\n@@ -391,15 +391,15 @@ vect_estimate_min_profitable_iters (loop_vec_info loop_vinfo)\n   /* vector version will never be profitable.  */\n   else\n     {\n-      if (vect_print_dump_info (REPORT_DETAILS))\n+      if (vect_print_dump_info (REPORT_COST))\n         fprintf (vect_dump, \"cost model: vector iteration cost = %d \"\n                  \"is divisible by scalar iteration cost = %d by a factor \"\n                  \"greater than or equal to the vectorization factor = %d .\",\n                  vec_inside_cost, scalar_single_iter_cost, vf);\n       return -1;\n     }\n \n-  if (vect_print_dump_info (REPORT_DETAILS))\n+  if (vect_print_dump_info (REPORT_COST))\n     {\n       fprintf (vect_dump, \"Cost model analysis: \\n\");\n       fprintf (vect_dump, \"  Vector inside of loop cost: %d\\n\",\n@@ -425,7 +425,7 @@ vect_estimate_min_profitable_iters (loop_vec_info loop_vinfo)\n        then skip the vectorized loop.  */\n   min_profitable_iters--;\n \n-  if (vect_print_dump_info (REPORT_DETAILS))\n+  if (vect_print_dump_info (REPORT_COST))\n     fprintf (vect_dump, \"  Profitability threshold = %d\\n\",\n \t     min_profitable_iters);\n     \n@@ -465,7 +465,7 @@ vect_model_reduction_cost (stmt_vec_info stmt_info, enum tree_code reduc_code,\n   vectype = get_vectype_for_scalar_type (TREE_TYPE (reduction_op));\n   if (!vectype)\n     {\n-      if (vect_print_dump_info (REPORT_DETAILS))\n+      if (vect_print_dump_info (REPORT_COST))\n         {\n           fprintf (vect_dump, \"unsupported data-type \");\n           print_generic_expr (vect_dump, TREE_TYPE (reduction_op), TDF_SLIM);\n@@ -520,7 +520,7 @@ vect_model_reduction_cost (stmt_vec_info stmt_info, enum tree_code reduc_code,\n \n   STMT_VINFO_OUTSIDE_OF_LOOP_COST (stmt_info) = outer_cost;\n \n-  if (vect_print_dump_info (REPORT_DETAILS))\n+  if (vect_print_dump_info (REPORT_COST))\n     fprintf (vect_dump, \"vect_model_reduction_cost: inside_cost = %d, \"\n              \"outside_cost = %d .\", STMT_VINFO_INSIDE_OF_LOOP_COST (stmt_info),\n              STMT_VINFO_OUTSIDE_OF_LOOP_COST (stmt_info));\n@@ -541,7 +541,7 @@ vect_model_induction_cost (stmt_vec_info stmt_info, int ncopies)\n   /* prologue cost for vec_init and vec_step.  */\n   STMT_VINFO_OUTSIDE_OF_LOOP_COST (stmt_info) = 2 * TARG_SCALAR_TO_VEC_COST;\n   \n-  if (vect_print_dump_info (REPORT_DETAILS))\n+  if (vect_print_dump_info (REPORT_COST))\n     fprintf (vect_dump, \"vect_model_induction_cost: inside_cost = %d, \"\n              \"outside_cost = %d .\", STMT_VINFO_INSIDE_OF_LOOP_COST (stmt_info),\n              STMT_VINFO_OUTSIDE_OF_LOOP_COST (stmt_info));\n@@ -570,7 +570,7 @@ vect_model_simple_cost (stmt_vec_info stmt_info, int ncopies,\n \toutside_cost += TARG_SCALAR_TO_VEC_COST; \n     }\n   \n-  if (vect_print_dump_info (REPORT_DETAILS))\n+  if (vect_print_dump_info (REPORT_COST))\n     fprintf (vect_dump, \"vect_model_simple_cost: inside_cost = %d, \"\n              \"outside_cost = %d .\", inside_cost, outside_cost);\n \n@@ -628,7 +628,7 @@ vect_model_store_cost (stmt_vec_info stmt_info, int ncopies,\n       inside_cost = ncopies * exact_log2(group_size) * group_size \n              * TARG_VEC_STMT_COST;\n \n-      if (vect_print_dump_info (REPORT_DETAILS))\n+      if (vect_print_dump_info (REPORT_COST))\n         fprintf (vect_dump, \"vect_model_store_cost: strided group_size = %d .\",\n                  group_size);\n \n@@ -637,7 +637,7 @@ vect_model_store_cost (stmt_vec_info stmt_info, int ncopies,\n   /* Costs of the stores.  */\n   inside_cost += ncopies * TARG_VEC_STORE_COST;\n \n-  if (vect_print_dump_info (REPORT_DETAILS))\n+  if (vect_print_dump_info (REPORT_COST))\n     fprintf (vect_dump, \"vect_model_store_cost: inside_cost = %d, \"\n              \"outside_cost = %d .\", inside_cost, outside_cost);\n \n@@ -688,7 +688,7 @@ vect_model_load_cost (stmt_vec_info stmt_info, int ncopies, slp_tree slp_node)\n       inside_cost = ncopies * exact_log2(group_size) * group_size\n \t* TARG_VEC_STMT_COST;\n \n-      if (vect_print_dump_info (REPORT_DETAILS))\n+      if (vect_print_dump_info (REPORT_COST))\n         fprintf (vect_dump, \"vect_model_load_cost: strided group_size = %d .\",\n                  group_size);\n \n@@ -701,7 +701,7 @@ vect_model_load_cost (stmt_vec_info stmt_info, int ncopies, slp_tree slp_node)\n       {\n         inside_cost += ncopies * TARG_VEC_LOAD_COST;\n \n-        if (vect_print_dump_info (REPORT_DETAILS))\n+        if (vect_print_dump_info (REPORT_COST))\n           fprintf (vect_dump, \"vect_model_load_cost: aligned.\");\n \n         break;\n@@ -711,7 +711,7 @@ vect_model_load_cost (stmt_vec_info stmt_info, int ncopies, slp_tree slp_node)\n         /* Here, we assign an additional cost for the unaligned load.  */\n         inside_cost += ncopies * TARG_VEC_UNALIGNED_LOAD_COST;\n \n-        if (vect_print_dump_info (REPORT_DETAILS))\n+        if (vect_print_dump_info (REPORT_COST))\n           fprintf (vect_dump, \"vect_model_load_cost: unaligned supported by \"\n                    \"hardware.\");\n \n@@ -731,7 +731,7 @@ vect_model_load_cost (stmt_vec_info stmt_info, int ncopies, slp_tree slp_node)\n       }\n     case dr_explicit_realign_optimized:\n       {\n-        if (vect_print_dump_info (REPORT_DETAILS))\n+        if (vect_print_dump_info (REPORT_COST))\n           fprintf (vect_dump, \"vect_model_load_cost: unaligned software \"\n                    \"pipelined.\");\n \n@@ -758,7 +758,7 @@ vect_model_load_cost (stmt_vec_info stmt_info, int ncopies, slp_tree slp_node)\n       gcc_unreachable ();\n     }\n   \n-  if (vect_print_dump_info (REPORT_DETAILS))\n+  if (vect_print_dump_info (REPORT_COST))\n     fprintf (vect_dump, \"vect_model_load_cost: inside_cost = %d, \"\n              \"outside_cost = %d .\", inside_cost, outside_cost);\n \n@@ -6552,11 +6552,7 @@ conservative_cost_threshold (loop_vec_info loop_vinfo,\n           || min_profitable_iters > min_scalar_loop_bound))\n     th = (unsigned) min_profitable_iters;\n \n-  if (vect_print_dump_info (REPORT_UNVECTORIZED_LOOPS))\t      \n-    fprintf (vect_dump, \"not vectorized: vectorization may not be \"\n-\t     \"profitable.\");\n-  \n-  if (th && vect_print_dump_info (REPORT_DETAILS))\n+  if (th && vect_print_dump_info (REPORT_COST))\n     fprintf (vect_dump, \"Vectorization may not be profitable.\");\n \n   return th;"}, {"sha": "7716e8e876e8defa390dd1fd67678de535b648c2", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5adacc5c90f75b09b853c23c626123f0330e8e9/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5adacc5c90f75b09b853c23c626123f0330e8e9/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=f5adacc5c90f75b09b853c23c626123f0330e8e9", "patch": "@@ -73,6 +73,7 @@ enum verbosity_levels {\n   REPORT_NONE,\n   REPORT_VECTORIZED_LOOPS,\n   REPORT_UNVECTORIZED_LOOPS,\n+  REPORT_COST,\n   REPORT_ALIGNMENT,\n   REPORT_DR_DETAILS,\n   REPORT_BAD_FORM_LOOPS,"}]}