{"sha": "587aa06343905910d85ff1980cad0e3be57984b1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTg3YWEwNjM0MzkwNTkxMGQ4NWZmMTk4MGNhZDBlM2JlNTc5ODRiMQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2009-04-14T13:50:18Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2009-04-14T13:50:18Z"}, "message": "tree-cfg.c (verify_gimple_assign_unary): Adjust vector code verification.\n\n2000-04-14  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-cfg.c (verify_gimple_assign_unary): Adjust vector code\n\tverification.\n\t(verify_gimple_assign_binary): Likewise.  Handle shifts and\n\trotates correctly.\n\t(verify_gimple_phi): Print the mismatched argument position.\n\t* tree-vect-loop-manip.c (vect_update_ivs_after_vectorizer):\n\tFix types.\n\t(vect_update_init_of_dr): Likewise.\n\t* matrix-reorg.c (transform_access_sites): Do what the\n\tcomment suggests.\n\t* omp-low.c (expand_omp_atomic_pipeline): Use the correct types.\n\nFrom-SVN: r146035", "tree": {"sha": "3c14db1949615dbf483ab6fcfa12f3ac5e829397", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c14db1949615dbf483ab6fcfa12f3ac5e829397"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/587aa06343905910d85ff1980cad0e3be57984b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/587aa06343905910d85ff1980cad0e3be57984b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/587aa06343905910d85ff1980cad0e3be57984b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/587aa06343905910d85ff1980cad0e3be57984b1/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "58277f48923ae8fed82265aa5e7ded8f84528ae7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58277f48923ae8fed82265aa5e7ded8f84528ae7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58277f48923ae8fed82265aa5e7ded8f84528ae7"}], "stats": {"total": 100, "additions": 62, "deletions": 38}, "files": [{"sha": "de5f66bb8b8bf59b7c586bf0a785e133d15b56e8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/587aa06343905910d85ff1980cad0e3be57984b1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/587aa06343905910d85ff1980cad0e3be57984b1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=587aa06343905910d85ff1980cad0e3be57984b1", "patch": "@@ -1,3 +1,17 @@\n+2000-04-14  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-cfg.c (verify_gimple_assign_unary): Adjust vector code\n+\tverification.\n+\t(verify_gimple_assign_binary): Likewise.  Handle shifts and\n+\trotates correctly.\n+\t(verify_gimple_phi): Print the mismatched argument position.\n+\t* tree-vect-loop-manip.c (vect_update_ivs_after_vectorizer):\n+\tFix types.\n+\t(vect_update_init_of_dr): Likewise.\n+\t* matrix-reorg.c (transform_access_sites): Do what the\n+\tcomment suggests.\n+\t* omp-low.c (expand_omp_atomic_pipeline): Use the correct types.\n+\n 2009-04-13  Michael Eager <eager@eagercon.com>\n \n \t* config/rs6000/rs6000-c.c: generate defines if rs6000_xilinx_fpu:"}, {"sha": "26b04d63ebb382f5419d22b8cea925234131f5fe", "filename": "gcc/matrix-reorg.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/587aa06343905910d85ff1980cad0e3be57984b1/gcc%2Fmatrix-reorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/587aa06343905910d85ff1980cad0e3be57984b1/gcc%2Fmatrix-reorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatrix-reorg.c?ref=587aa06343905910d85ff1980cad0e3be57984b1", "patch": "@@ -1865,8 +1865,9 @@ transform_access_sites (void **slot, void *data ATTRIBUTE_UNUSED)\n \t\t    tmp = create_tmp_var (TREE_TYPE (lhs), \"new\");\n \t\t    add_referenced_var (tmp);\n \t\t    rhs = gimple_assign_rhs1 (acc_info->stmt);\n-\t\t    new_stmt = gimple_build_assign (tmp,\n-\t\t\t\t\t\t    TREE_OPERAND (rhs, 0));\n+\t\t    rhs = fold_convert (TREE_TYPE (tmp),\n+\t\t\t\t\tTREE_OPERAND (rhs, 0));\n+\t\t    new_stmt = gimple_build_assign (tmp, rhs);\n \t\t    tmp = make_ssa_name (tmp, new_stmt);\n \t\t    gimple_assign_set_lhs (new_stmt, tmp);\n \t\t    gsi = gsi_for_stmt (acc_info->stmt);"}, {"sha": "be0153fea424482e6beee22ebb7e230504541f9d", "filename": "gcc/omp-low.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/587aa06343905910d85ff1980cad0e3be57984b1/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/587aa06343905910d85ff1980cad0e3be57984b1/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=587aa06343905910d85ff1980cad0e3be57984b1", "patch": "@@ -5074,15 +5074,16 @@ expand_omp_atomic_pipeline (basic_block load_bb, basic_block store_bb,\n   /* Build the compare&swap statement.  */\n   new_storedi = build_call_expr (cmpxchg, 3, iaddr, loadedi, storedi);\n   new_storedi = force_gimple_operand_gsi (&si,\n-\t\t\t\t\t  fold_convert (itype, new_storedi),\n+\t\t\t\t\t  fold_convert (TREE_TYPE (loadedi),\n+\t\t\t\t\t\t\tnew_storedi),\n \t\t\t\t\t  true, NULL_TREE,\n \t\t\t\t\t  true, GSI_SAME_STMT);\n \n   if (gimple_in_ssa_p (cfun))\n     old_vali = loadedi;\n   else\n     {\n-      old_vali = create_tmp_var (itype, NULL);\n+      old_vali = create_tmp_var (TREE_TYPE (loadedi), NULL);\n       if (gimple_in_ssa_p (cfun))\n \tadd_referenced_var (old_vali);\n       stmt = gimple_build_assign (old_vali, loadedi);"}, {"sha": "6c5eb87d64443aee8c8737e740aa3ea2ece5699b", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 37, "deletions": 30, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/587aa06343905910d85ff1980cad0e3be57984b1/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/587aa06343905910d85ff1980cad0e3be57984b1/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=587aa06343905910d85ff1980cad0e3be57984b1", "patch": "@@ -3411,23 +3411,23 @@ verify_gimple_assign_unary (gimple stmt)\n         return false;\n       }\n \n-    case TRUTH_NOT_EXPR:\n-      {\n-      }\n+    case VEC_UNPACK_HI_EXPR:\n+    case VEC_UNPACK_LO_EXPR:\n+    case REDUC_MAX_EXPR:\n+    case REDUC_MIN_EXPR:\n+    case REDUC_PLUS_EXPR:\n+    case VEC_UNPACK_FLOAT_HI_EXPR:\n+    case VEC_UNPACK_FLOAT_LO_EXPR:\n+      /* FIXME.  */\n+      return false;\n \n+    case TRUTH_NOT_EXPR:\n     case NEGATE_EXPR:\n     case ABS_EXPR:\n     case BIT_NOT_EXPR:\n     case PAREN_EXPR:\n     case NON_LVALUE_EXPR:\n     case CONJ_EXPR:\n-    case REDUC_MAX_EXPR:\n-    case REDUC_MIN_EXPR:\n-    case REDUC_PLUS_EXPR:\n-    case VEC_UNPACK_HI_EXPR:\n-    case VEC_UNPACK_LO_EXPR:\n-    case VEC_UNPACK_FLOAT_HI_EXPR:\n-    case VEC_UNPACK_FLOAT_LO_EXPR:\n       break;\n \n     default:\n@@ -3498,17 +3498,21 @@ verify_gimple_assign_binary (gimple stmt)\n \n     case LSHIFT_EXPR:\n     case RSHIFT_EXPR:\n-      if (FIXED_POINT_TYPE_P (rhs1_type)\n-\t  && INTEGRAL_TYPE_P (rhs2_type)\n-\t  && useless_type_conversion_p (lhs_type, rhs1_type))\n-\treturn false;\n-      /* Fall through.  */\n-\n     case LROTATE_EXPR:\n     case RROTATE_EXPR:\n       {\n-\tif (!INTEGRAL_TYPE_P (rhs1_type)\n-\t    || !INTEGRAL_TYPE_P (rhs2_type)\n+\t/* Shifts and rotates are ok on integral types, fixed point\n+\t   types and integer vector types.  */\n+\tif ((!INTEGRAL_TYPE_P (rhs1_type)\n+\t     && !FIXED_POINT_TYPE_P (rhs1_type)\n+\t     && !(TREE_CODE (rhs1_type) == VECTOR_TYPE\n+\t\t  && TREE_CODE (TREE_TYPE (rhs1_type)) == INTEGER_TYPE))\n+\t    || (!INTEGRAL_TYPE_P (rhs2_type)\n+\t\t/* Vector shifts of vectors are also ok.  */\n+\t\t&& !(TREE_CODE (rhs1_type) == VECTOR_TYPE\n+\t\t     && TREE_CODE (TREE_TYPE (rhs1_type)) == INTEGER_TYPE\n+\t\t     && TREE_CODE (rhs2_type) == VECTOR_TYPE\n+\t\t     && TREE_CODE (TREE_TYPE (rhs2_type)) == INTEGER_TYPE))\n \t    || !useless_type_conversion_p (lhs_type, rhs1_type))\n \t  {\n \t    error (\"type mismatch in shift expression\");\n@@ -3614,6 +3618,20 @@ verify_gimple_assign_binary (gimple stmt)\n \tbreak;\n       }\n \n+    case WIDEN_SUM_EXPR:\n+    case WIDEN_MULT_EXPR:\n+    case VEC_WIDEN_MULT_HI_EXPR:\n+    case VEC_WIDEN_MULT_LO_EXPR:\n+    case VEC_PACK_TRUNC_EXPR:\n+    case VEC_PACK_SAT_EXPR:\n+    case VEC_PACK_FIX_TRUNC_EXPR:\n+    case VEC_EXTRACT_EVEN_EXPR:\n+    case VEC_EXTRACT_ODD_EXPR:\n+    case VEC_INTERLEAVE_HIGH_EXPR:\n+    case VEC_INTERLEAVE_LOW_EXPR:\n+      /* FIXME.  */\n+      return false;\n+\n     case MULT_EXPR:\n     case TRUNC_DIV_EXPR:\n     case CEIL_DIV_EXPR:\n@@ -3630,17 +3648,6 @@ verify_gimple_assign_binary (gimple stmt)\n     case BIT_IOR_EXPR:\n     case BIT_XOR_EXPR:\n     case BIT_AND_EXPR:\n-    case WIDEN_SUM_EXPR:\n-    case WIDEN_MULT_EXPR:\n-    case VEC_WIDEN_MULT_HI_EXPR:\n-    case VEC_WIDEN_MULT_LO_EXPR:\n-    case VEC_PACK_TRUNC_EXPR:\n-    case VEC_PACK_SAT_EXPR:\n-    case VEC_PACK_FIX_TRUNC_EXPR:\n-    case VEC_EXTRACT_EVEN_EXPR:\n-    case VEC_EXTRACT_ODD_EXPR:\n-    case VEC_INTERLEAVE_HIGH_EXPR:\n-    case VEC_INTERLEAVE_LOW_EXPR:\n       /* Continue with generic binary expression handling.  */\n       break;\n \n@@ -3905,7 +3912,7 @@ verify_gimple_phi (gimple stmt)\n \t}\n       if (!useless_type_conversion_p (type, TREE_TYPE (arg)))\n \t{\n-\t  error (\"Incompatible types in PHI argument\");\n+\t  error (\"Incompatible types in PHI argument %u\", i);\n \t  debug_generic_stmt (type);\n \t  debug_generic_stmt (TREE_TYPE (arg));\n \t  return true;"}, {"sha": "ae578f099fc6bc0008dfa75d1fe1824aeac9be85", "filename": "gcc/tree-vect-loop-manip.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/587aa06343905910d85ff1980cad0e3be57984b1/gcc%2Ftree-vect-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/587aa06343905910d85ff1980cad0e3be57984b1/gcc%2Ftree-vect-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop-manip.c?ref=587aa06343905910d85ff1980cad0e3be57984b1", "patch": "@@ -1639,9 +1639,9 @@ vect_update_ivs_after_vectorizer (loop_vec_info loop_vinfo, tree niters,\n       if (POINTER_TYPE_P (TREE_TYPE (init_expr)))\n \tni = fold_build2 (POINTER_PLUS_EXPR, TREE_TYPE (init_expr), \n \t\t\t  init_expr, \n-\t\t\t  fold_convert (sizetype, \n-\t\t\t\t\tfold_build2 (MULT_EXPR, TREE_TYPE (niters),\n-\t\t\t\t\t\t     niters, step_expr)));\n+\t\t\t  fold_build2 (MULT_EXPR, sizetype,\n+\t\t\t\t       fold_convert (sizetype, niters),\n+\t\t\t\t       step_expr));\n       else\n \tni = fold_build2 (PLUS_EXPR, TREE_TYPE (init_expr),\n \t\t\t  fold_build2 (MULT_EXPR, TREE_TYPE (init_expr),\n@@ -1926,7 +1926,8 @@ vect_update_init_of_dr (struct data_reference *dr, tree niters)\n   niters = fold_build2 (MULT_EXPR, sizetype,\n \t\t\tfold_convert (sizetype, niters),\n \t\t\tfold_convert (sizetype, DR_STEP (dr)));\n-  offset = fold_build2 (PLUS_EXPR, sizetype, offset, niters);\n+  offset = fold_build2 (PLUS_EXPR, sizetype,\n+\t\t\tfold_convert (sizetype, offset), niters);\n   DR_OFFSET (dr) = offset;\n }\n "}]}