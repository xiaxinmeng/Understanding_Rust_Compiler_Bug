{"sha": "92d0652c1eda06a6ec396470550aede34cb72079", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTJkMDY1MmMxZWRhMDZhNmVjMzk2NDcwNTUwYWVkZTM0Y2I3MjA3OQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-03-15T18:27:29Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-03-15T18:27:29Z"}, "message": "Core 1191\n\n\tCore 1191\n\t* method.c (synthezized_method_walk): Cleanups don't affect the\n\ttriviality of a constructor, but do affect deletion and exception\n\tspecification.\n\nFrom-SVN: r171011", "tree": {"sha": "5ff8b7272946b5c3f601006b9e0e83b08fee4c8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ff8b7272946b5c3f601006b9e0e83b08fee4c8a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/92d0652c1eda06a6ec396470550aede34cb72079", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92d0652c1eda06a6ec396470550aede34cb72079", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92d0652c1eda06a6ec396470550aede34cb72079", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92d0652c1eda06a6ec396470550aede34cb72079/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "437697b8ee8aecb8423600201c57641e52ca132d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/437697b8ee8aecb8423600201c57641e52ca132d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/437697b8ee8aecb8423600201c57641e52ca132d"}], "stats": {"total": 58, "additions": 37, "deletions": 21}, "files": [{"sha": "910a7e2bd9483e2f4582ecf732984ff0bbaadfb7", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92d0652c1eda06a6ec396470550aede34cb72079/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92d0652c1eda06a6ec396470550aede34cb72079/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=92d0652c1eda06a6ec396470550aede34cb72079", "patch": "@@ -1,3 +1,10 @@\n+2011-03-15  Jason Merrill  <jason@redhat.com>\n+\n+\tCore 1191\n+\t* method.c (synthesized_method_walk): Cleanups don't affect the\n+\ttriviality of a constructor, but do affect deletion and exception\n+\tspecification.\n+\n 2011-03-15  Rodrigo Rivas Costa  <rodrigorivascosta@gmail.com>\n \n \t* decl2.c (cp_check_const_attributes): New."}, {"sha": "0366988d155438547ee9533274a898ccf1a85196", "filename": "gcc/cp/method.c", "status": "modified", "additions": 9, "deletions": 21, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92d0652c1eda06a6ec396470550aede34cb72079/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92d0652c1eda06a6ec396470550aede34cb72079/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=92d0652c1eda06a6ec396470550aede34cb72079", "patch": "@@ -1080,14 +1080,9 @@ synthesized_method_walk (tree ctype, special_function_kind sfk, bool const_p,\n   tsubst_flags_t complain;\n   const char *msg;\n   bool ctor_p;\n-  tree cleanup_spec;\n-  bool cleanup_trivial = true;\n-  bool cleanup_deleted = false;\n \n-  cleanup_spec\n-    = (cxx_dialect >= cxx0x ? noexcept_true_spec : empty_except_spec);\n   if (spec_p)\n-    *spec_p = cleanup_spec;\n+    *spec_p = (cxx_dialect >= cxx0x ? noexcept_true_spec : empty_except_spec);\n \n   if (deleted_p)\n     {\n@@ -1228,8 +1223,10 @@ synthesized_method_walk (tree ctype, special_function_kind sfk, bool const_p,\n \t     destructors for cleanup of partially constructed objects.  */\n \t  rval = locate_fn_flags (base_binfo, complete_dtor_identifier,\n \t\t\t\t  NULL_TREE, flags, complain);\n-\t  process_subob_fn (rval, false, &cleanup_spec, &cleanup_trivial,\n-\t\t\t    &cleanup_deleted, NULL, NULL,\n+\t  /* Note that we don't pass down trivial_p; the subobject\n+\t     destructors don't affect triviality of the constructor.  */\n+\t  process_subob_fn (rval, false, spec_p, NULL,\n+\t\t\t    deleted_p, NULL, NULL,\n \t\t\t    basetype);\n \t}\n \n@@ -1275,8 +1272,8 @@ synthesized_method_walk (tree ctype, special_function_kind sfk, bool const_p,\n \t    {\n \t      rval = locate_fn_flags (base_binfo, complete_dtor_identifier,\n \t\t\t\t      NULL_TREE, flags, complain);\n-\t      process_subob_fn (rval, false, &cleanup_spec, &cleanup_trivial,\n-\t\t\t\t&cleanup_deleted, NULL, NULL,\n+\t      process_subob_fn (rval, false, spec_p, NULL,\n+\t\t\t\tdeleted_p, NULL, NULL,\n \t\t\t\tbasetype);\n \t    }\n \t}\n@@ -1295,23 +1292,14 @@ synthesized_method_walk (tree ctype, special_function_kind sfk, bool const_p,\n   if (ctor_p)\n     walk_field_subobs (TYPE_FIELDS (ctype), complete_dtor_identifier,\n \t\t       sfk_destructor, TYPE_UNQUALIFIED, false,\n-\t\t       false, false, &cleanup_spec, &cleanup_trivial,\n-\t\t       &cleanup_deleted, NULL,\n+\t\t       false, false, spec_p, NULL,\n+\t\t       deleted_p, NULL,\n \t\t       NULL, flags, complain);\n \n   pop_scope (scope);\n \n   --cp_unevaluated_operand;\n   --c_inhibit_evaluation_warnings;\n-\n-  /* If the constructor isn't trivial, consider the subobject cleanups.  */\n-  if (ctor_p && trivial_p && !*trivial_p)\n-    {\n-      if (deleted_p && cleanup_deleted)\n-\t*deleted_p = true;\n-      if (spec_p)\n-\t*spec_p = merge_exception_specifiers (*spec_p, cleanup_spec);\n-    }\n }\n \n /* DECL is a deleted function.  If it's implicitly deleted, explain why and"}, {"sha": "3d75d5ebb140931cb0d6e0a1851553b52e0231ab", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92d0652c1eda06a6ec396470550aede34cb72079/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92d0652c1eda06a6ec396470550aede34cb72079/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=92d0652c1eda06a6ec396470550aede34cb72079", "patch": "@@ -1,3 +1,7 @@\n+2011-03-15  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/cpp0x/implicit11.C: New.\n+\n 2011-03-15  Rodrigo Rivas Costa  <rodrigorivascosta@gmail.com>\n \n        * g++.dg/cpp0x/constexpr-attribute.C: New."}, {"sha": "7ec8e95dcb636ae28d564b9bd324e0bcd4e8360b", "filename": "gcc/testsuite/g++.dg/cpp0x/implicit11.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92d0652c1eda06a6ec396470550aede34cb72079/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fimplicit11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92d0652c1eda06a6ec396470550aede34cb72079/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fimplicit11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fimplicit11.C?ref=92d0652c1eda06a6ec396470550aede34cb72079", "patch": "@@ -0,0 +1,17 @@\n+// Test that we consider base dtors in determining whether\n+// a derived ctor is deleted even if the ctor is trivial.\n+// { dg-options -std=c++0x }\n+\n+struct A\n+{\n+  ~A() = delete;\t\t// { dg-error \"declared here\" }\n+};\n+\n+struct B: A { };\t\t// { dg-error \"deleted\" }\n+\n+extern B eb;\n+int main()\n+{\n+  B* b1 = new B;\t\t// { dg-error \"use of deleted function\" \"\" { xfail *-*-* } }\n+  B* b2 = new B(eb);\t\t// { dg-error \"use of deleted function\" }\n+}"}]}