{"sha": "8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGJkYmZmZjU3ZWQyZDAxMmZkMmZlNGI3NDExYTZjODE1OTU3ZThhYQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2005-02-17T16:19:49Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2005-02-17T16:19:49Z"}, "message": "bitmap.h (BITMAP_XMALLOC, [...]): Remove.\n\n\t* bitmap.h (BITMAP_XMALLOC, BITMAP_XFREE): Remove.\n\t* bb-reorder.c (duplicate_computed_gotos): Use BITMAP_ALLOC and\n\tBITMAP_FREE.\n\t* bt-load.c (btr_def_live_range, combine_btr_defs,\n\tmigrate_btr_def, migrate_btr_defs): Likewise.\n\t* cfgcleanup.c (thread_jump): Likewise.\n\t* cfgloop.c (get_loop_body_in_bfs_order): Likewise.\n\t* df.c (df_insn_table_realloc, df_bitmaps_alloc, df_bitmaps_free,\n\tdf_alloc, df_free, df_du_chain_create, df_bb_rd_local_compute,\n\tdf_rd_local_compute, df_reg_info_compute): Likewise.\n\t* dominance.c (init_dom_info, free_dom_info): Likewise.\n\t* flow.c (init_propagate_block_info,\n\tfree_propagate_block_info): Likewise.\n\t* gcse.c (alloc_gcse_mem, free_gcse_mem): Likewise.\n\t* global.c (allocate_bb_info, free_bb_info, calculate_reg_pav,\n\tmodify_reg_pav): Likewise.\n\t* loop-invariant.c (find_defs, find_invariant_insn,\n\tfind_invariants, free_inv_motion_data): Likewise.\n\t* predict.c (tree_predict_by_opcode,\n\testimate_bb_frequencies): Likewise.\n\t* stmt.c (expand_case): Likewise.\n\t* tree-cfg.c (tree_duplicate_sese_region): Likewise.\n\t* tree-dfa.c (mark_new_vars_to_rename): Likewise.\n\t* tree-if-conv.c (get_loop_body_in_if_conv_order): Likewise.\n\t* tree-into-ssa.c (insert_phi_nodes_for, def_blocks_free,\n\tget_def_blocks_for, mark_def_site_blocks, rewrite_into_ssa,\n\trewrite_ssa_into_ssa): Likewise.\n\t* tree-optimize.c (tree_rest_of_compilation): Likewise.\n\t* tree-outof-ssa.c (new_temp_expr_table, free_temp_expr_table,\n\tanalyze_edges_for_bb, perform_edge_inserts): Likewise.\n\t* tree-scalar-evolution.c (scev_initialize, scev_finalize): Likewise.\n\t* tree-sra.c (tree_sra): Likewise.\n\t* tree-ssa-alias.c (init_alias_info, delete_alias_info): Likewise.\n\t* tree-ssa-ccp.c (ccp_fold_builtin): Likewise.\n\t* tree-ssa-dce.c (tree_dce_init, tree_dce_done): Likewise.\n\t* tree-ssa-dom.c (tree_ssa_dominator_optimize): Likewise.\n\t* tree-ssa-dse.c (tree_ssa_dse): Likewise.\n\t* tree-ssa-forwprop.c (tree_ssa_forward_propagate_single_use_var):\n\tLikewise.\n\t* tree-ssa-live.c (new_tree_live_info, delete_tree_live_info,\n\tcalculate_live_on_entry, calculate_live_on_exit,\n\tbuild_tree_conflict_graph): Likewise.\n\t* tree-ssa-loop-ivopts.c (tree_ssa_iv_optimize_init, record_use,\n\trecord_important_candidates, set_use_iv_cost, find_depends,\n\tdetermine_use_iv_costs, iv_ca_new, iv_ca_free, free_loop_data,\n\ttree_ssa_iv_optimize_finalize): Likewise.\n\t* tree-ssa-loop-manip.c (add_exit_phis_var, get_loops_exit,\n\tfind_uses_to_rename_use, rewrite_into_loop_closed_ssa,\n\ttree_duplicate_loop_to_header_edge): Likewise.\n\t* tree-ssa-pre.c (init_pre, fini_pre): Likewise.\n\t* tree-ssa.c (verify_flow_insensitive_alias_info,\n\tverify_name_tags, verify_ssa, init_tree_ssa,\n\tdelete_tree_ssa): Likewise.\n\t* tree-ssanames.c (marked_ssa_names, init_ssanames,\n\tfini_ssanames): Likewise.\n\t* tree-vectorizer.c (slpeel_tree_peel_loop_to_edge): Likewise.\n\nFrom-SVN: r95172", "tree": {"sha": "b901e5ed1ebbfd91523fda1156710e4c09b5f550", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b901e5ed1ebbfd91523fda1156710e4c09b5f550"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa/comments", "author": null, "committer": null, "parents": [{"sha": "3abbb7389b7d6c1e01c575a993e8e658863ad636", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3abbb7389b7d6c1e01c575a993e8e658863ad636", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3abbb7389b7d6c1e01c575a993e8e658863ad636"}], "stats": {"total": 475, "additions": 264, "deletions": 211}, "files": [{"sha": "a5511cc0e4ad9b3588fc0d6d0a07953601f14d19", "filename": "gcc/ChangeLog", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa", "patch": "@@ -1,3 +1,62 @@\n+2005-02-17  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* bitmap.h (BITMAP_XMALLOC, BITMAP_XFREE): Remove.\n+\t* bb-reorder.c (duplicate_computed_gotos): Use BITMAP_ALLOC and\n+\tBITMAP_FREE.\n+\t* bt-load.c (btr_def_live_range, combine_btr_defs,\n+\tmigrate_btr_def, migrate_btr_defs): Likewise.\n+\t* cfgcleanup.c (thread_jump): Likewise.\n+\t* cfgloop.c (get_loop_body_in_bfs_order): Likewise.\n+\t* df.c (df_insn_table_realloc, df_bitmaps_alloc, df_bitmaps_free,\n+\tdf_alloc, df_free, df_du_chain_create, df_bb_rd_local_compute,\n+\tdf_rd_local_compute, df_reg_info_compute): Likewise.\n+\t* dominance.c (init_dom_info, free_dom_info): Likewise.\n+\t* flow.c (init_propagate_block_info,\n+\tfree_propagate_block_info): Likewise.\n+\t* gcse.c (alloc_gcse_mem, free_gcse_mem): Likewise.\n+\t* global.c (allocate_bb_info, free_bb_info, calculate_reg_pav,\n+\tmodify_reg_pav): Likewise.\n+\t* loop-invariant.c (find_defs, find_invariant_insn,\n+\tfind_invariants, free_inv_motion_data): Likewise.\n+\t* predict.c (tree_predict_by_opcode,\n+\testimate_bb_frequencies): Likewise.\n+\t* stmt.c (expand_case): Likewise.\n+\t* tree-cfg.c (tree_duplicate_sese_region): Likewise.\n+\t* tree-dfa.c (mark_new_vars_to_rename): Likewise.\n+\t* tree-if-conv.c (get_loop_body_in_if_conv_order): Likewise.\n+\t* tree-into-ssa.c (insert_phi_nodes_for, def_blocks_free,\n+\tget_def_blocks_for, mark_def_site_blocks, rewrite_into_ssa,\n+\trewrite_ssa_into_ssa): Likewise.\n+\t* tree-optimize.c (tree_rest_of_compilation): Likewise.\n+\t* tree-outof-ssa.c (new_temp_expr_table, free_temp_expr_table,\n+\tanalyze_edges_for_bb, perform_edge_inserts): Likewise.\n+\t* tree-scalar-evolution.c (scev_initialize, scev_finalize): Likewise.\n+\t* tree-sra.c (tree_sra): Likewise.\n+\t* tree-ssa-alias.c (init_alias_info, delete_alias_info): Likewise.\n+\t* tree-ssa-ccp.c (ccp_fold_builtin): Likewise.\n+\t* tree-ssa-dce.c (tree_dce_init, tree_dce_done): Likewise.\n+\t* tree-ssa-dom.c (tree_ssa_dominator_optimize): Likewise.\n+\t* tree-ssa-dse.c (tree_ssa_dse): Likewise.\n+\t* tree-ssa-forwprop.c (tree_ssa_forward_propagate_single_use_var):\n+\tLikewise.\n+\t* tree-ssa-live.c (new_tree_live_info, delete_tree_live_info,\n+\tcalculate_live_on_entry, calculate_live_on_exit,\n+\tbuild_tree_conflict_graph): Likewise.\n+\t* tree-ssa-loop-ivopts.c (tree_ssa_iv_optimize_init, record_use,\n+\trecord_important_candidates, set_use_iv_cost, find_depends,\n+\tdetermine_use_iv_costs, iv_ca_new, iv_ca_free, free_loop_data,\n+\ttree_ssa_iv_optimize_finalize): Likewise.\n+\t* tree-ssa-loop-manip.c (add_exit_phis_var, get_loops_exit,\n+\tfind_uses_to_rename_use, rewrite_into_loop_closed_ssa,\n+\ttree_duplicate_loop_to_header_edge): Likewise.\n+\t* tree-ssa-pre.c (init_pre, fini_pre): Likewise.\n+\t* tree-ssa.c (verify_flow_insensitive_alias_info,\n+\tverify_name_tags, verify_ssa, init_tree_ssa,\n+\tdelete_tree_ssa): Likewise.\n+\t* tree-ssanames.c (marked_ssa_names, init_ssanames,\n+\tfini_ssanames): Likewise.\n+\t* tree-vectorizer.c (slpeel_tree_peel_loop_to_edge): Likewise.\n+\n 2005-02-17  Ralf Corsepius  <ralf.corsepius@rtems.org>\n \n \t* config/rs6000/t-rtems: Completely reworked. "}, {"sha": "23cdf095396f406ef2cae856276e40a66e02acaa", "filename": "gcc/bb-reorder.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa/gcc%2Fbb-reorder.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa/gcc%2Fbb-reorder.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbb-reorder.c?ref=8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa", "patch": "@@ -2031,7 +2031,7 @@ duplicate_computed_gotos (void)\n     uncond_jump_length = get_uncond_jump_length ();\n \n   max_size = uncond_jump_length * PARAM_VALUE (PARAM_MAX_GOTO_DUPLICATION_INSNS);\n-  candidates = BITMAP_XMALLOC ();\n+  candidates = BITMAP_ALLOC (NULL);\n \n   /* Build the reorder chain for the original order of blocks.\n      Look for a computed jump while we are at it.  */\n@@ -2094,7 +2094,7 @@ duplicate_computed_gotos (void)\n done:\n   cfg_layout_finalize ();\n \n-  BITMAP_XFREE (candidates);\n+  BITMAP_FREE (candidates);\n \n   timevar_pop (TV_REORDER_BLOCKS);\n }"}, {"sha": "2915623fa416e7d4b791824af58f858c10826603", "filename": "gcc/bitmap.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa/gcc%2Fbitmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa/gcc%2Fbitmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbitmap.h?ref=8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa", "patch": "@@ -159,16 +159,10 @@ extern unsigned bitmap_first_set_bit (bitmap);\n /* Allocate a gc'd bitmap.  */\n #define BITMAP_GGC_ALLOC() bitmap_gc_alloc ()\n \n-/* Allocate a bitmap with xmalloc.  */\n-#define BITMAP_XMALLOC() BITMAP_ALLOC (NULL)\n-\n /* Do any cleanup needed on a bitmap when it is no longer used.  */\n #define BITMAP_FREE(BITMAP)\t\t\t\\\n       \t((void)(bitmap_obstack_free (BITMAP), (BITMAP) = NULL))\n \n-/* Do any cleanup needed on an xmalloced bitmap when it is no longer used.  */\n-#define BITMAP_XFREE(BITMAP) BITMAP_FREE (BITMAP)\n-\n /* Iterator for bitmaps.  */\n \n typedef struct"}, {"sha": "3a02177774838b86c070f5dee81731a9f08ad286", "filename": "gcc/bt-load.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa/gcc%2Fbt-load.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa/gcc%2Fbt-load.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbt-load.c?ref=8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa", "patch": "@@ -996,7 +996,7 @@ btr_def_live_range (btr_def def, HARD_REG_SET *btrs_live_in_range)\n     {\n       btr_user user;\n \n-      def->live_range = BITMAP_XMALLOC ();\n+      def->live_range = BITMAP_ALLOC (NULL);\n \n       bitmap_set_bit (def->live_range, def->bb->index);\n       COPY_HARD_REG_SET (*btrs_live_in_range,\n@@ -1056,7 +1056,7 @@ combine_btr_defs (btr_def def, HARD_REG_SET *btrs_live_in_range)\n \t     target registers live over the merged range.  */\n \t  int btr;\n \t  HARD_REG_SET combined_btrs_live;\n-\t  bitmap combined_live_range = BITMAP_XMALLOC ();\n+\t  bitmap combined_live_range = BITMAP_ALLOC (NULL);\n \t  btr_user user;\n \n \t  if (other_def->live_range == NULL)\n@@ -1114,7 +1114,7 @@ combine_btr_defs (btr_def def, HARD_REG_SET *btrs_live_in_range)\n \t      delete_insn (other_def->insn);\n \n \t    }\n-\t  BITMAP_XFREE (combined_live_range);\n+\t  BITMAP_FREE (combined_live_range);\n \t}\n     }\n }\n@@ -1287,7 +1287,7 @@ migrate_btr_def (btr_def def, int min_cost)\n     }\n \n   btr_def_live_range (def, &btrs_live_in_range);\n-  live_range = BITMAP_XMALLOC ();\n+  live_range = BITMAP_ALLOC (NULL);\n   bitmap_copy (live_range, def->live_range);\n \n #ifdef INSN_SCHEDULING\n@@ -1361,7 +1361,7 @@ migrate_btr_def (btr_def def, int min_cost)\n       if (dump_file)\n \tfprintf (dump_file, \"failed to move\\n\");\n     }\n-  BITMAP_XFREE (live_range);\n+  BITMAP_FREE (live_range);\n   return !give_up;\n }\n \n@@ -1420,7 +1420,7 @@ migrate_btr_defs (enum reg_class btr_class, int allow_callee_save)\n \t    }\n \t}\n       else\n-\tBITMAP_XFREE (def->live_range);\n+\tBITMAP_FREE (def->live_range);\n     }\n \n   free (btrs_live);"}, {"sha": "4cf2577309c59f55a8979ffd0a7ef0247445d20e", "filename": "gcc/cfgcleanup.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa/gcc%2Fcfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa/gcc%2Fcfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgcleanup.c?ref=8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa", "patch": "@@ -353,7 +353,7 @@ thread_jump (int mode, edge e, basic_block b)\n     if (INSN_P (insn))\n       cselib_process_insn (insn);\n \n-  nonequal = BITMAP_XMALLOC();\n+  nonequal = BITMAP_ALLOC (NULL);\n   CLEAR_REG_SET (nonequal);\n \n   /* Now assume that we've continued by the edge E to B and continue\n@@ -401,7 +401,7 @@ thread_jump (int mode, edge e, basic_block b)\n   EXECUTE_IF_SET_IN_REG_SET (nonequal, 0, i, rsi)\n     goto failed_exit;\n \n-  BITMAP_XFREE (nonequal);\n+  BITMAP_FREE (nonequal);\n   cselib_finish ();\n   if ((comparison_dominates_p (code1, code2) != 0)\n       != (XEXP (SET_SRC (set2), 1) == pc_rtx))\n@@ -410,7 +410,7 @@ thread_jump (int mode, edge e, basic_block b)\n     return FALLTHRU_EDGE (b);\n \n failed_exit:\n-  BITMAP_XFREE (nonequal);\n+  BITMAP_FREE (nonequal);\n   cselib_finish ();\n   return NULL;\n }"}, {"sha": "dededd46a5a5bbaf5d9176fdefebba40bcab9f77", "filename": "gcc/cfgloop.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa/gcc%2Fcfgloop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa/gcc%2Fcfgloop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.c?ref=8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa", "patch": "@@ -1103,7 +1103,7 @@ get_loop_body_in_bfs_order (const struct loop *loop)\n   gcc_assert (loop->latch != EXIT_BLOCK_PTR);\n \n   blocks = xcalloc (loop->num_nodes, sizeof (basic_block));\n-  visited = BITMAP_XMALLOC ();\n+  visited = BITMAP_ALLOC (NULL);\n \n   bb = loop->header;\n   while (i < loop->num_nodes)\n@@ -1135,7 +1135,7 @@ get_loop_body_in_bfs_order (const struct loop *loop)\n       bb = blocks[vc++];\n     }\n   \n-  BITMAP_XFREE (visited);\n+  BITMAP_FREE (visited);\n   return blocks;\n }\n "}, {"sha": "ad7852cb4d427a448e648fc000dbb513577a5044", "filename": "gcc/df.c", "status": "modified", "additions": 38, "deletions": 38, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa/gcc%2Fdf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa/gcc%2Fdf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf.c?ref=8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa", "patch": "@@ -320,7 +320,7 @@ df_insn_table_realloc (struct df *df, unsigned int size)\n \n   if (! df->insns_modified)\n     {\n-      df->insns_modified = BITMAP_XMALLOC ();\n+      df->insns_modified = BITMAP_ALLOC (NULL);\n       bitmap_zero (df->insns_modified);\n     }\n }\n@@ -392,10 +392,10 @@ df_bitmaps_alloc (struct df *df, bitmap blocks, int flags)\n \t  if (!bb_info->rd_in)\n \t    {\n \t      /* Allocate bitmaps for reaching definitions.  */\n-\t      bb_info->rd_kill = BITMAP_XMALLOC ();\n-\t      bb_info->rd_gen = BITMAP_XMALLOC ();\n-\t      bb_info->rd_in = BITMAP_XMALLOC ();\n-\t      bb_info->rd_out = BITMAP_XMALLOC ();\n+\t      bb_info->rd_kill = BITMAP_ALLOC (NULL);\n+\t      bb_info->rd_gen = BITMAP_ALLOC (NULL);\n+\t      bb_info->rd_in = BITMAP_ALLOC (NULL);\n+\t      bb_info->rd_out = BITMAP_ALLOC (NULL);\n \t    }\n \t  else\n \t    {\n@@ -411,10 +411,10 @@ df_bitmaps_alloc (struct df *df, bitmap blocks, int flags)\n \t  if (!bb_info->ru_in)\n \t    {\n \t      /* Allocate bitmaps for upward exposed uses.  */\n-\t      bb_info->ru_kill = BITMAP_XMALLOC ();\n-\t      bb_info->ru_gen = BITMAP_XMALLOC ();\n-\t      bb_info->ru_in = BITMAP_XMALLOC ();\n-\t      bb_info->ru_out = BITMAP_XMALLOC ();\n+\t      bb_info->ru_kill = BITMAP_ALLOC (NULL);\n+\t      bb_info->ru_gen = BITMAP_ALLOC (NULL);\n+\t      bb_info->ru_in = BITMAP_ALLOC (NULL);\n+\t      bb_info->ru_out = BITMAP_ALLOC (NULL);\n \t    }\n \t  else\n \t    {\n@@ -430,10 +430,10 @@ df_bitmaps_alloc (struct df *df, bitmap blocks, int flags)\n \t  if (!bb_info->lr_in)\n \t    {\n \t      /* Allocate bitmaps for live variables.  */\n-\t      bb_info->lr_def = BITMAP_XMALLOC ();\n-\t      bb_info->lr_use = BITMAP_XMALLOC ();\n-\t      bb_info->lr_in = BITMAP_XMALLOC ();\n-\t      bb_info->lr_out = BITMAP_XMALLOC ();\n+\t      bb_info->lr_def = BITMAP_ALLOC (NULL);\n+\t      bb_info->lr_use = BITMAP_ALLOC (NULL);\n+\t      bb_info->lr_in = BITMAP_ALLOC (NULL);\n+\t      bb_info->lr_out = BITMAP_ALLOC (NULL);\n \t    }\n \t  else\n \t    {\n@@ -463,39 +463,39 @@ df_bitmaps_free (struct df *df, int flags)\n       if ((flags & DF_RD) && bb_info->rd_in)\n \t{\n \t  /* Free bitmaps for reaching definitions.  */\n-\t  BITMAP_XFREE (bb_info->rd_kill);\n+\t  BITMAP_FREE (bb_info->rd_kill);\n \t  bb_info->rd_kill = NULL;\n-\t  BITMAP_XFREE (bb_info->rd_gen);\n+\t  BITMAP_FREE (bb_info->rd_gen);\n \t  bb_info->rd_gen = NULL;\n-\t  BITMAP_XFREE (bb_info->rd_in);\n+\t  BITMAP_FREE (bb_info->rd_in);\n \t  bb_info->rd_in = NULL;\n-\t  BITMAP_XFREE (bb_info->rd_out);\n+\t  BITMAP_FREE (bb_info->rd_out);\n \t  bb_info->rd_out = NULL;\n \t}\n \n       if ((flags & DF_RU) && bb_info->ru_in)\n \t{\n \t  /* Free bitmaps for upward exposed uses.  */\n-\t  BITMAP_XFREE (bb_info->ru_kill);\n+\t  BITMAP_FREE (bb_info->ru_kill);\n \t  bb_info->ru_kill = NULL;\n-\t  BITMAP_XFREE (bb_info->ru_gen);\n+\t  BITMAP_FREE (bb_info->ru_gen);\n \t  bb_info->ru_gen = NULL;\n-\t  BITMAP_XFREE (bb_info->ru_in);\n+\t  BITMAP_FREE (bb_info->ru_in);\n \t  bb_info->ru_in = NULL;\n-\t  BITMAP_XFREE (bb_info->ru_out);\n+\t  BITMAP_FREE (bb_info->ru_out);\n \t  bb_info->ru_out = NULL;\n \t}\n \n       if ((flags & DF_LR) && bb_info->lr_in)\n \t{\n \t  /* Free bitmaps for live variables.  */\n-\t  BITMAP_XFREE (bb_info->lr_def);\n+\t  BITMAP_FREE (bb_info->lr_def);\n \t  bb_info->lr_def = NULL;\n-\t  BITMAP_XFREE (bb_info->lr_use);\n+\t  BITMAP_FREE (bb_info->lr_use);\n \t  bb_info->lr_use = NULL;\n-\t  BITMAP_XFREE (bb_info->lr_in);\n+\t  BITMAP_FREE (bb_info->lr_in);\n \t  bb_info->lr_in = NULL;\n-\t  BITMAP_XFREE (bb_info->lr_out);\n+\t  BITMAP_FREE (bb_info->lr_out);\n \t  bb_info->lr_out = NULL;\n \t}\n     }\n@@ -538,14 +538,14 @@ df_alloc (struct df *df, int n_regs)\n \n   df_reg_table_realloc (df, df->n_regs);\n \n-  df->bbs_modified = BITMAP_XMALLOC ();\n+  df->bbs_modified = BITMAP_ALLOC (NULL);\n   bitmap_zero (df->bbs_modified);\n \n   df->flags = 0;\n \n   df->bbs = xcalloc (last_basic_block, sizeof (struct bb_info));\n \n-  df->all_blocks = BITMAP_XMALLOC ();\n+  df->all_blocks = BITMAP_ALLOC (NULL);\n   FOR_EACH_BB (bb)\n     bitmap_set_bit (df->all_blocks, bb->index);\n }\n@@ -583,13 +583,13 @@ df_free (struct df *df)\n   df->regs = 0;\n   df->reg_size = 0;\n \n-  BITMAP_XFREE (df->bbs_modified);\n+  BITMAP_FREE (df->bbs_modified);\n   df->bbs_modified = 0;\n \n-  BITMAP_XFREE (df->insns_modified);\n+  BITMAP_FREE (df->insns_modified);\n   df->insns_modified = 0;\n \n-  BITMAP_XFREE (df->all_blocks);\n+  BITMAP_FREE (df->all_blocks);\n   df->all_blocks = 0;\n \n   free_alloc_pool (df_ref_pool);\n@@ -1484,14 +1484,14 @@ df_du_chain_create (struct df *df, bitmap blocks)\n   bitmap ru;\n   basic_block bb;\n \n-  ru = BITMAP_XMALLOC ();\n+  ru = BITMAP_ALLOC (NULL);\n \n   FOR_EACH_BB_IN_BITMAP (blocks, 0, bb,\n     {\n       df_bb_du_chain_create (df, bb, ru);\n     });\n \n-  BITMAP_XFREE (ru);\n+  BITMAP_FREE (ru);\n }\n \n \n@@ -1615,7 +1615,7 @@ df_bb_rd_local_compute (struct df *df, basic_block bb, bitmap call_killed_defs)\n {\n   struct bb_info *bb_info = DF_BB_INFO (df, bb);\n   rtx insn;\n-  bitmap seen = BITMAP_XMALLOC ();\n+  bitmap seen = BITMAP_ALLOC (NULL);\n   bool call_seen = false;\n \n   FOR_BB_INSNS_REVERSE (bb, insn)\n@@ -1661,7 +1661,7 @@ df_bb_rd_local_compute (struct df *df, basic_block bb, bitmap call_killed_defs)\n \t}\n     }\n \n-  BITMAP_XFREE (seen);\n+  BITMAP_FREE (seen);\n }\n \n \n@@ -1676,7 +1676,7 @@ df_rd_local_compute (struct df *df, bitmap blocks)\n \n   if (df->flags & DF_HARD_REGS)\n     {\n-      killed_by_call = BITMAP_XMALLOC ();\n+      killed_by_call = BITMAP_ALLOC (NULL);\n       for (regno = 0; regno < FIRST_PSEUDO_REGISTER; regno++)\n \t{\n \t  if (!TEST_HARD_REG_BIT (regs_invalidated_by_call, regno))\n@@ -1695,7 +1695,7 @@ df_rd_local_compute (struct df *df, bitmap blocks)\n   });\n \n   if (df->flags & DF_HARD_REGS)\n-    BITMAP_XFREE (killed_by_call);\n+    BITMAP_FREE (killed_by_call);\n }\n \n \n@@ -1872,14 +1872,14 @@ df_reg_info_compute (struct df *df, bitmap blocks)\n   basic_block bb;\n   bitmap live;\n \n-  live = BITMAP_XMALLOC ();\n+  live = BITMAP_ALLOC (NULL);\n \n   FOR_EACH_BB_IN_BITMAP (blocks, 0, bb,\n   {\n     df_bb_reg_info_compute (df, bb, live);\n   });\n \n-  BITMAP_XFREE (live);\n+  BITMAP_FREE (live);\n }\n \n "}, {"sha": "98067c4693d3112c3a842e8f146f2e2c866e33e8", "filename": "gcc/dominance.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa/gcc%2Fdominance.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa/gcc%2Fdominance.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdominance.c?ref=8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa", "patch": "@@ -170,7 +170,7 @@ init_dom_info (struct dom_info *di, enum cdi_direction dir)\n   di->dfsnum = 1;\n   di->nodes = 0;\n \n-  di->fake_exit_edge = dir ? BITMAP_XMALLOC () : NULL;\n+  di->fake_exit_edge = dir ? BITMAP_ALLOC (NULL) : NULL;\n }\n \n #undef init_ar\n@@ -191,7 +191,7 @@ free_dom_info (struct dom_info *di)\n   free (di->set_child);\n   free (di->dfs_order);\n   free (di->dfs_to_bb);\n-  BITMAP_XFREE (di->fake_exit_edge);\n+  BITMAP_FREE (di->fake_exit_edge);\n }\n \n /* The nonrecursive variant of creating a DFS tree.  DI is our working"}, {"sha": "503dc0dcdb33c91a07b61ee208259c6d63ac3955", "filename": "gcc/flow.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa", "patch": "@@ -1826,12 +1826,12 @@ init_propagate_block_info (basic_block bb, regset live, regset local_set,\n   else\n     pbi->reg_next_use = NULL;\n \n-  pbi->new_set = BITMAP_XMALLOC ();\n+  pbi->new_set = BITMAP_ALLOC (NULL);\n \n #ifdef HAVE_conditional_execution\n   pbi->reg_cond_dead = splay_tree_new (splay_tree_compare_ints, NULL,\n \t\t\t\t       free_reg_cond_life_info);\n-  pbi->reg_cond_reg = BITMAP_XMALLOC ();\n+  pbi->reg_cond_reg = BITMAP_ALLOC (NULL);\n \n   /* If this block ends in a conditional branch, for each register\n      live from one side of the branch and not the other, record the\n@@ -1973,11 +1973,11 @@ free_propagate_block_info (struct propagate_block_info *pbi)\n {\n   free_EXPR_LIST_list (&pbi->mem_set_list);\n \n-  BITMAP_XFREE (pbi->new_set);\n+  BITMAP_FREE (pbi->new_set);\n \n #ifdef HAVE_conditional_execution\n   splay_tree_delete (pbi->reg_cond_dead);\n-  BITMAP_XFREE (pbi->reg_cond_reg);\n+  BITMAP_FREE (pbi->reg_cond_reg);\n #endif\n \n   if (pbi->flags & PROP_REG_INFO)"}, {"sha": "757f946738cbcaa3fd06e9d310cc1863afc26f5e", "filename": "gcc/gcse.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa", "patch": "@@ -962,16 +962,16 @@ alloc_gcse_mem (rtx f)\n       CUID_INSN (i++) = insn;\n \n   /* Allocate vars to track sets of regs.  */\n-  reg_set_bitmap = BITMAP_XMALLOC ();\n+  reg_set_bitmap = BITMAP_ALLOC (NULL);\n \n   /* Allocate vars to track sets of regs, memory per block.  */\n   reg_set_in_block = sbitmap_vector_alloc (last_basic_block, max_gcse_regno);\n   /* Allocate array to keep a list of insns which modify memory in each\n      basic block.  */\n   modify_mem_list = gcalloc (last_basic_block, sizeof (rtx));\n   canon_modify_mem_list = gcalloc (last_basic_block, sizeof (rtx));\n-  modify_mem_list_set = BITMAP_XMALLOC ();\n-  blocks_with_calls = BITMAP_XMALLOC ();\n+  modify_mem_list_set = BITMAP_ALLOC (NULL);\n+  blocks_with_calls = BITMAP_ALLOC (NULL);\n }\n \n /* Free memory allocated by alloc_gcse_mem.  */\n@@ -982,12 +982,12 @@ free_gcse_mem (void)\n   free (uid_cuid);\n   free (cuid_insn);\n \n-  BITMAP_XFREE (reg_set_bitmap);\n+  BITMAP_FREE (reg_set_bitmap);\n \n   sbitmap_vector_free (reg_set_in_block);\n   free_modify_mem_tables ();\n-  BITMAP_XFREE (modify_mem_list_set);\n-  BITMAP_XFREE (blocks_with_calls);\n+  BITMAP_FREE (modify_mem_list_set);\n+  BITMAP_FREE (blocks_with_calls);\n }\n \f\n /* Compute the local properties of each recorded expression."}, {"sha": "c94e2ad7cce3ffc643c01725fb3bc930f2faa952", "filename": "gcc/global.c", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa/gcc%2Fglobal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa/gcc%2Fglobal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fglobal.c?ref=8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa", "patch": "@@ -2033,21 +2033,21 @@ allocate_bb_info (void)\n   bitmap init;\n \n   alloc_aux_for_blocks (sizeof (struct bb_info));\n-  init = BITMAP_XMALLOC ();\n+  init = BITMAP_ALLOC (NULL);\n   for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n     bitmap_set_bit (init, i);\n   FOR_EACH_BB (bb)\n     {\n       bb_info = bb->aux;\n-      bb_info->earlyclobber = BITMAP_XMALLOC ();\n-      bb_info->avloc = BITMAP_XMALLOC ();\n-      bb_info->killed = BITMAP_XMALLOC ();\n-      bb_info->live_pavin = BITMAP_XMALLOC ();\n-      bb_info->live_pavout = BITMAP_XMALLOC ();\n+      bb_info->earlyclobber = BITMAP_ALLOC (NULL);\n+      bb_info->avloc = BITMAP_ALLOC (NULL);\n+      bb_info->killed = BITMAP_ALLOC (NULL);\n+      bb_info->live_pavin = BITMAP_ALLOC (NULL);\n+      bb_info->live_pavout = BITMAP_ALLOC (NULL);\n       bitmap_copy (bb_info->live_pavin, init);\n       bitmap_copy (bb_info->live_pavout, init);\n     }\n-  BITMAP_XFREE (init);\n+  BITMAP_FREE (init);\n }\n \n /* The function frees the allocated info of all basic blocks.  */\n@@ -2061,11 +2061,11 @@ free_bb_info (void)\n   FOR_EACH_BB (bb)\n     {\n       bb_info = BB_INFO (bb);\n-      BITMAP_XFREE (bb_info->live_pavout);\n-      BITMAP_XFREE (bb_info->live_pavin);\n-      BITMAP_XFREE (bb_info->killed);\n-      BITMAP_XFREE (bb_info->avloc);\n-      BITMAP_XFREE (bb_info->earlyclobber);\n+      BITMAP_FREE (bb_info->live_pavout);\n+      BITMAP_FREE (bb_info->live_pavin);\n+      BITMAP_FREE (bb_info->killed);\n+      BITMAP_FREE (bb_info->avloc);\n+      BITMAP_FREE (bb_info->earlyclobber);\n     }\n   free_aux_for_blocks ();\n }\n@@ -2297,7 +2297,7 @@ calculate_reg_pav (void)\n \n   VARRAY_BB_INIT (bbs, n_basic_blocks, \"basic blocks\");\n   VARRAY_BB_INIT (new_bbs, n_basic_blocks, \"basic blocks for the next iter.\");\n-  temp_bitmap = BITMAP_XMALLOC ();\n+  temp_bitmap = BITMAP_ALLOC (NULL);\n   FOR_EACH_BB (bb)\n     {\n       VARRAY_PUSH_BB (bbs, bb);\n@@ -2351,7 +2351,7 @@ calculate_reg_pav (void)\n       VARRAY_POP_ALL (new_bbs);\n     }\n   sbitmap_free (wset);\n-  BITMAP_XFREE (temp_bitmap);\n+  BITMAP_FREE (temp_bitmap);\n }\n \n /* The function modifies partial availability information for two\n@@ -2373,7 +2373,7 @@ modify_reg_pav (void)\n   CLEAR_HARD_REG_SET (stack_hard_regs);\n   for (i = FIRST_STACK_REG; i <= LAST_STACK_REG; i++)\n     SET_HARD_REG_BIT(stack_hard_regs, i);\n-  stack_regs = BITMAP_XMALLOC ();\n+  stack_regs = BITMAP_ALLOC (NULL);\n   for (i = FIRST_PSEUDO_REGISTER; i < max_regno; i++)\n     {\n       COPY_HARD_REG_SET (used, reg_class_contents[reg_preferred_class (i)]);\n@@ -2405,7 +2405,7 @@ modify_reg_pav (void)\n #endif\n     }\n #ifdef STACK_REGS\n-  BITMAP_XFREE (stack_regs);\n+  BITMAP_FREE (stack_regs);\n #endif\n }\n "}, {"sha": "92d8caad2f54a675c8bff98586b1f9a35d225b0b", "filename": "gcc/loop-invariant.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa/gcc%2Floop-invariant.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa/gcc%2Floop-invariant.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-invariant.c?ref=8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa", "patch": "@@ -296,13 +296,13 @@ static void\n find_defs (struct loop *loop, basic_block *body, struct df *df)\n {\n   unsigned i;\n-  bitmap blocks = BITMAP_XMALLOC ();\n+  bitmap blocks = BITMAP_ALLOC (NULL);\n \n   for (i = 0; i < loop->num_nodes; i++)\n     bitmap_set_bit (blocks, body[i]->index);\n \n   df_analyze_subcfg (df, blocks, DF_UD_CHAIN | DF_HARD_REGS | DF_EQUIV_NOTES);\n-  BITMAP_XFREE (blocks);\n+  BITMAP_FREE (blocks);\n }\n \n /* Creates a new invariant for definition DEF in INSN, depending on invariants\n@@ -447,10 +447,10 @@ find_invariant_insn (rtx insn, bool always_reached, bool always_executed,\n \treturn;\n     }\n \n-  depends_on = BITMAP_XMALLOC ();\n+  depends_on = BITMAP_ALLOC (NULL);\n   if (!check_dependencies (insn, df, depends_on))\n     {\n-      BITMAP_XFREE (depends_on);\n+      BITMAP_FREE (depends_on);\n       return;\n     }\n \n@@ -557,10 +557,10 @@ find_invariants_body (struct loop *loop, basic_block *body,\n static void\n find_invariants (struct loop *loop, struct df *df)\n {\n-  bitmap may_exit = BITMAP_XMALLOC ();\n-  bitmap always_reached = BITMAP_XMALLOC ();\n-  bitmap has_exit = BITMAP_XMALLOC ();\n-  bitmap always_executed = BITMAP_XMALLOC ();\n+  bitmap may_exit = BITMAP_ALLOC (NULL);\n+  bitmap always_reached = BITMAP_ALLOC (NULL);\n+  bitmap has_exit = BITMAP_ALLOC (NULL);\n+  bitmap always_executed = BITMAP_ALLOC (NULL);\n   basic_block *body = get_loop_body_in_dom_order (loop);\n \n   find_exits (loop, body, may_exit, has_exit);\n@@ -570,10 +570,10 @@ find_invariants (struct loop *loop, struct df *df)\n   find_defs (loop, body, df);\n   find_invariants_body (loop, body, always_reached, always_executed, df);\n \n-  BITMAP_XFREE (always_reached);\n-  BITMAP_XFREE (always_executed);\n-  BITMAP_XFREE (may_exit);\n-  BITMAP_XFREE (has_exit);\n+  BITMAP_FREE (always_reached);\n+  BITMAP_FREE (always_executed);\n+  BITMAP_FREE (may_exit);\n+  BITMAP_FREE (has_exit);\n   free (body);\n }\n \n@@ -863,7 +863,7 @@ free_inv_motion_data (struct df *df)\n   for (i = 0; i < VARRAY_ACTIVE_SIZE (invariants); i++)\n     {\n       inv = VARRAY_GENERIC_PTR_NOGC (invariants, i);\n-      BITMAP_XFREE (inv->depends_on);\n+      BITMAP_FREE (inv->depends_on);\n       free (inv);\n     }\n   VARRAY_POP_ALL (invariants);"}, {"sha": "9ecf1e3269d2c29d4f8e7c2f38dc8514c491deb8", "filename": "gcc/predict.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa", "patch": "@@ -1043,9 +1043,9 @@ tree_predict_by_opcode (basic_block bb)\n     return;\n   op0 = TREE_OPERAND (cond, 0);\n   type = TREE_TYPE (op0);\n-  visited = BITMAP_XMALLOC ();\n+  visited = BITMAP_ALLOC (NULL);\n   val = expr_expected_value (cond, visited);\n-  BITMAP_XFREE (visited);\n+  BITMAP_FREE (visited);\n   if (val)\n     {\n       if (integer_zerop (val))\n@@ -1819,7 +1819,7 @@ estimate_bb_frequencies (struct loops *loops)\n       EDGE_SUCC (ENTRY_BLOCK_PTR, 0)->probability = REG_BR_PROB_BASE;\n \n       /* Set up block info for each basic block.  */\n-      tovisit = BITMAP_XMALLOC ();\n+      tovisit = BITMAP_ALLOC (NULL);\n       alloc_aux_for_blocks (sizeof (struct block_info_def));\n       alloc_aux_for_edges (sizeof (struct edge_info_def));\n       FOR_BB_BETWEEN (bb, ENTRY_BLOCK_PTR, NULL, next_bb)\n@@ -1857,7 +1857,7 @@ estimate_bb_frequencies (struct loops *loops)\n \n       free_aux_for_blocks ();\n       free_aux_for_edges ();\n-      BITMAP_XFREE (tovisit);\n+      BITMAP_FREE (tovisit);\n     }\n   compute_function_frequency ();\n   if (flag_reorder_functions)"}, {"sha": "4f366c32264f5bb3cc9f2d71d080e6d711294845", "filename": "gcc/stmt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa", "patch": "@@ -2359,7 +2359,7 @@ expand_case (tree exp)\n \n       uniq = 0;\n       count = 0;\n-      label_bitmap = BITMAP_XMALLOC ();\n+      label_bitmap = BITMAP_ALLOC (NULL);\n       for (n = case_list; n; n = n->right)\n \t{\n \t  /* Count the elements and track the largest and smallest\n@@ -2390,7 +2390,7 @@ expand_case (tree exp)\n \t    }\n \t}\n \n-      BITMAP_XFREE (label_bitmap);\n+      BITMAP_FREE (label_bitmap);\n \n       /* cleanup_tree_cfg removes all SWITCH_EXPR with a single\n \t destination, such as one with a default case only.  */"}, {"sha": "680262c79a4ec139fef082dfecf52f2651998435", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa", "patch": "@@ -5079,7 +5079,7 @@ tree_duplicate_sese_region (edge entry, edge exit,\n     free (region_copy);\n \n   unmark_all_for_rewrite ();\n-  BITMAP_XFREE (definitions);\n+  BITMAP_FREE (definitions);\n \n   return true;\n }"}, {"sha": "b591ffb5e7edad92011b8d6fed6a7875d5c85313", "filename": "gcc/tree-dfa.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa/gcc%2Ftree-dfa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa/gcc%2Ftree-dfa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dfa.c?ref=8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa", "patch": "@@ -956,7 +956,7 @@ mark_new_vars_to_rename (tree stmt, bitmap vars_to_rename)\n   int v_may_defs_before, v_may_defs_after;\n   int v_must_defs_before, v_must_defs_after;\n \n-  vars_in_vops_to_rename = BITMAP_XMALLOC ();\n+  vars_in_vops_to_rename = BITMAP_ALLOC (NULL);\n \n   /* Before re-scanning the statement for operands, mark the existing\n      virtual operands to be renamed again.  We do this because when new\n@@ -1005,7 +1005,7 @@ mark_new_vars_to_rename (tree stmt, bitmap vars_to_rename)\n       || v_must_defs_before > v_must_defs_after)\n     bitmap_ior_into (vars_to_rename, vars_in_vops_to_rename);\n \n-  BITMAP_XFREE (vars_in_vops_to_rename);\n+  BITMAP_FREE (vars_in_vops_to_rename);\n }\n \n /* Find all variables within the gimplified statement that were not previously"}, {"sha": "73fba3fb499710ece41fd64d929663c54f1cf866", "filename": "gcc/tree-if-conv.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa/gcc%2Ftree-if-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa/gcc%2Ftree-if-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.c?ref=8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa", "patch": "@@ -1017,7 +1017,7 @@ get_loop_body_in_if_conv_order (const struct loop *loop)\n   gcc_assert (loop->latch != EXIT_BLOCK_PTR);\n \n   blocks = xcalloc (loop->num_nodes, sizeof (basic_block));\n-  visited = BITMAP_XMALLOC ();\n+  visited = BITMAP_ALLOC (NULL);\n \n   blocks_in_bfs_order = get_loop_body_in_bfs_order (loop);\n \n@@ -1029,7 +1029,7 @@ get_loop_body_in_if_conv_order (const struct loop *loop)\n       if (bb->flags & BB_IRREDUCIBLE_LOOP)\n \t{\n \t  free (blocks_in_bfs_order);\n-\t  BITMAP_XFREE (visited);\n+\t  BITMAP_FREE (visited);\n \t  free (blocks);\n \t  return NULL;\n \t}\n@@ -1052,7 +1052,7 @@ get_loop_body_in_if_conv_order (const struct loop *loop)\n \t}\n     }\n   free (blocks_in_bfs_order);\n-  BITMAP_XFREE (visited);\n+  BITMAP_FREE (visited);\n   return blocks;\n }\n "}, {"sha": "0c4f80aa5913b6c68711739f650a6a2984e28a7f", "filename": "gcc/tree-into-ssa.c", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa/gcc%2Ftree-into-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa/gcc%2Ftree-into-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-into-ssa.c?ref=8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa", "patch": "@@ -1023,7 +1023,7 @@ insert_phi_nodes_for (tree var, bitmap *dfs, VEC(basic_block) **work_stack)\n   if (def_map == NULL)\n     return;\n \n-  phi_insertion_points = BITMAP_XMALLOC ();\n+  phi_insertion_points = BITMAP_ALLOC (NULL);\n \n   EXECUTE_IF_SET_IN_BITMAP (def_map->def_blocks, 0, bb_index, bi)\n     {\n@@ -1088,7 +1088,7 @@ insert_phi_nodes_for (tree var, bitmap *dfs, VEC(basic_block) **work_stack)\n \t}\n     }\n \n-  BITMAP_XFREE (phi_insertion_points);\n+  BITMAP_FREE (phi_insertion_points);\n }\n \n /* SSA Rewriting Step 2.  Rewrite every variable used in each statement in\n@@ -1311,9 +1311,9 @@ static void\n def_blocks_free (void *p)\n {\n   struct def_blocks_d *entry = p;\n-  BITMAP_XFREE (entry->def_blocks);\n-  BITMAP_XFREE (entry->phi_blocks);\n-  BITMAP_XFREE (entry->livein_blocks);\n+  BITMAP_FREE (entry->def_blocks);\n+  BITMAP_FREE (entry->phi_blocks);\n+  BITMAP_FREE (entry->livein_blocks);\n   free (entry);\n }\n \n@@ -1371,9 +1371,9 @@ get_def_blocks_for (tree var)\n     {\n       db_p = xmalloc (sizeof (*db_p));\n       db_p->var = var;\n-      db_p->def_blocks = BITMAP_XMALLOC ();\n-      db_p->phi_blocks = BITMAP_XMALLOC ();\n-      db_p->livein_blocks = BITMAP_XMALLOC ();\n+      db_p->def_blocks = BITMAP_ALLOC (NULL);\n+      db_p->phi_blocks = BITMAP_ALLOC (NULL);\n+      db_p->livein_blocks = BITMAP_ALLOC (NULL);\n       *slot = (void *) db_p;\n     }\n   else\n@@ -1521,7 +1521,7 @@ mark_def_site_blocks (void)\n   /* Notice that this bitmap is indexed using variable UIDs, so it must be\n      large enough to accommodate all the variables referenced in the\n      function, not just the ones we are renaming.  */\n-  mark_def_sites_global_data.kills = BITMAP_XMALLOC ();\n+  mark_def_sites_global_data.kills = BITMAP_ALLOC (NULL);\n   walk_data.global_data = &mark_def_sites_global_data;\n \n   /* We do not have any local data.  */\n@@ -1537,7 +1537,7 @@ mark_def_site_blocks (void)\n   fini_walk_dominator_tree (&walk_data);\n \n   /* We no longer need this bitmap, clear and free it.  */\n-  BITMAP_XFREE (mark_def_sites_global_data.kills);\n+  BITMAP_FREE (mark_def_sites_global_data.kills);\n }\n \n \n@@ -1601,7 +1601,7 @@ rewrite_into_ssa (bool all)\n      can save significant time during PHI insertion for large graphs.  */\n   dfs = (bitmap *) xmalloc (last_basic_block * sizeof (bitmap *));\n   FOR_EACH_BB (bb)\n-    dfs[bb->index] = BITMAP_XMALLOC ();\n+    dfs[bb->index] = BITMAP_ALLOC (NULL);\n \n   /* Compute dominance frontiers.  */\n   compute_dominance_frontiers (dfs);\n@@ -1620,7 +1620,7 @@ rewrite_into_ssa (bool all)\n \n   /* Free allocated memory.  */\n   FOR_EACH_BB (bb)\n-    BITMAP_XFREE (dfs[bb->index]);\n+    BITMAP_FREE (dfs[bb->index]);\n   free (dfs);\n \n   vars_to_rename = old_vars_to_rename;\n@@ -1669,7 +1669,7 @@ rewrite_ssa_into_ssa (void)\n      can save significant time during PHI insertion for large graphs.  */\n   dfs = (bitmap *) xmalloc (last_basic_block * sizeof (bitmap *));\n   FOR_EACH_BB (bb)\n-    dfs[bb->index] = BITMAP_XMALLOC ();\n+    dfs[bb->index] = BITMAP_ALLOC (NULL);\n \n   /* Ensure that the dominance information is OK.  */\n   calculate_dominance_info (CDI_DOMINATORS);\n@@ -1698,7 +1698,7 @@ rewrite_ssa_into_ssa (void)\n       set_current_def (ssa_name (i), NULL_TREE);\n     }\n \n-  mark_def_sites_global_data.kills = BITMAP_XMALLOC ();\n+  mark_def_sites_global_data.kills = BITMAP_ALLOC (NULL);\n   mark_def_sites_global_data.names_to_rename = snames_to_rename;\n   walk_data.global_data = &mark_def_sites_global_data;\n \n@@ -1717,7 +1717,7 @@ rewrite_ssa_into_ssa (void)\n   fini_walk_dominator_tree (&walk_data);\n \n   /* We no longer need this bitmap, clear and free it.  */\n-  BITMAP_XFREE (mark_def_sites_global_data.kills);\n+  BITMAP_FREE (mark_def_sites_global_data.kills);\n \n   /* Insert PHI nodes at dominance frontiers of definition blocks.  */\n   insert_phi_nodes (dfs, to_rename);\n@@ -1773,7 +1773,7 @@ rewrite_ssa_into_ssa (void)\n \n   /* Free allocated memory.  */\n   FOR_EACH_BB (bb)\n-    BITMAP_XFREE (dfs[bb->index]);\n+    BITMAP_FREE (dfs[bb->index]);\n   free (dfs);\n \n   htab_delete (def_blocks);\n@@ -1789,7 +1789,7 @@ rewrite_ssa_into_ssa (void)\n     }\n #endif\n \n-  BITMAP_XFREE (to_rename);\n+  BITMAP_FREE (to_rename);\n   \n   VEC_free (tree_on_heap, block_defs_stack);\n   block_defs_stack = NULL;"}, {"sha": "d2c8ede6d4dabee9f1377e862104d9ca466200fd", "filename": "gcc/tree-optimize.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa/gcc%2Ftree-optimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa/gcc%2Ftree-optimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-optimize.c?ref=8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa", "patch": "@@ -664,7 +664,7 @@ tree_rest_of_compilation (tree fndecl)\n   bitmap_obstack_initialize (NULL);\n   bitmap_obstack_initialize (&reg_obstack); /* FIXME, only at RTL generation*/\n   \n-  vars_to_rename = BITMAP_XMALLOC ();\n+  vars_to_rename = BITMAP_ALLOC (NULL);\n   \n   /* Perform all tree transforms and optimizations.  */\n   execute_pass_list (all_passes);"}, {"sha": "57aa200ebfc92c90e2dfa616d02b4a15c983a32a", "filename": "gcc/tree-outof-ssa.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa/gcc%2Ftree-outof-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa/gcc%2Ftree-outof-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-outof-ssa.c?ref=8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa", "patch": "@@ -1260,8 +1260,8 @@ new_temp_expr_table (var_map map)\n   t->partition_dep_list = xcalloc (num_var_partitions (map) + 1, \n \t\t\t\t   sizeof (value_expr_p));\n \n-  t->replaceable = BITMAP_XMALLOC ();\n-  t->partition_in_use = BITMAP_XMALLOC ();\n+  t->replaceable = BITMAP_ALLOC (NULL);\n+  t->partition_in_use = BITMAP_ALLOC (NULL);\n \n   t->saw_replaceable = false;\n   t->virtual_partition = num_var_partitions (map);\n@@ -1293,8 +1293,8 @@ free_temp_expr_table (temp_expr_table_p t)\n       free (p);\n     }\n \n-  BITMAP_XFREE (t->partition_in_use);\n-  BITMAP_XFREE (t->replaceable);\n+  BITMAP_FREE (t->partition_in_use);\n+  BITMAP_FREE (t->replaceable);\n \n   free (t->partition_dep_list);\n   if (t->saw_replaceable)\n@@ -2115,7 +2115,7 @@ analyze_edges_for_bb (basic_block bb, FILE *debug_file)\n     {\n       VARRAY_EDGE_INIT (edge_leader, 25, \"edge_leader\");\n       VARRAY_TREE_INIT (stmt_list, 25, \"stmt_list\");\n-      leader_has_match = BITMAP_XMALLOC ();\n+      leader_has_match = BITMAP_ALLOC (NULL);\n     }\n   else\n     {\n@@ -2261,7 +2261,7 @@ perform_edge_inserts (FILE *dump_file)\n \n   /* Clear out any tables which were created.  */\n   edge_leader = NULL;\n-  BITMAP_XFREE (leader_has_match);\n+  BITMAP_FREE (leader_has_match);\n \n   if (changed)\n     {"}, {"sha": "c6a60fe6de78f61b3acb682438de8a149b4b2ac1", "filename": "gcc/tree-scalar-evolution.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa/gcc%2Ftree-scalar-evolution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa/gcc%2Ftree-scalar-evolution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.c?ref=8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa", "patch": "@@ -2466,7 +2466,7 @@ scev_initialize (struct loops *loops)\n \n   scalar_evolution_info = htab_create (100, hash_scev_info,\n \t\t\t\t       eq_scev_info, del_scev_info);\n-  already_instantiated = BITMAP_XMALLOC ();\n+  already_instantiated = BITMAP_ALLOC (NULL);\n   \n   initialize_scalar_evolutions_analyzer ();\n \n@@ -2561,6 +2561,6 @@ void\n scev_finalize (void)\n {\n   htab_delete (scalar_evolution_info);\n-  BITMAP_XFREE (already_instantiated);\n+  BITMAP_FREE (already_instantiated);\n }\n "}, {"sha": "1510904537538478dbabbd109a91fe0a0a095785", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa", "patch": "@@ -2079,10 +2079,10 @@ tree_sra (void)\n {\n   /* Initialize local variables.  */\n   gcc_obstack_init (&sra_obstack);\n-  sra_candidates = BITMAP_XMALLOC ();\n-  needs_copy_in = BITMAP_XMALLOC ();\n-  sra_type_decomp_cache = BITMAP_XMALLOC ();\n-  sra_type_inst_cache = BITMAP_XMALLOC ();\n+  sra_candidates = BITMAP_ALLOC (NULL);\n+  needs_copy_in = BITMAP_ALLOC (NULL);\n+  sra_type_decomp_cache = BITMAP_ALLOC (NULL);\n+  sra_type_inst_cache = BITMAP_ALLOC (NULL);\n   sra_map = htab_create (101, sra_elt_hash, sra_elt_eq, NULL);\n \n   /* Scan.  If we find anything, instantiate and scalarize.  */\n@@ -2096,10 +2096,10 @@ tree_sra (void)\n   /* Free allocated memory.  */\n   htab_delete (sra_map);\n   sra_map = NULL;\n-  BITMAP_XFREE (sra_candidates);\n-  BITMAP_XFREE (needs_copy_in);\n-  BITMAP_XFREE (sra_type_decomp_cache);\n-  BITMAP_XFREE (sra_type_inst_cache);\n+  BITMAP_FREE (sra_candidates);\n+  BITMAP_FREE (needs_copy_in);\n+  BITMAP_FREE (sra_type_decomp_cache);\n+  BITMAP_FREE (sra_type_inst_cache);\n   obstack_free (&sra_obstack, NULL);\n }\n "}, {"sha": "3e5f8e3dc5fe38fd0a3a9d54fc8d5f1be2b97e68", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa", "patch": "@@ -534,11 +534,11 @@ init_alias_info (void)\n   ai->ssa_names_visited = sbitmap_alloc (num_ssa_names);\n   sbitmap_zero (ai->ssa_names_visited);\n   VARRAY_TREE_INIT (ai->processed_ptrs, 50, \"processed_ptrs\");\n-  ai->addresses_needed = BITMAP_XMALLOC ();\n+  ai->addresses_needed = BITMAP_ALLOC (NULL);\n   VARRAY_UINT_INIT (ai->num_references, num_referenced_vars, \"num_references\");\n-  ai->written_vars = BITMAP_XMALLOC ();\n-  ai->dereferenced_ptrs_store = BITMAP_XMALLOC ();\n-  ai->dereferenced_ptrs_load = BITMAP_XMALLOC ();\n+  ai->written_vars = BITMAP_ALLOC (NULL);\n+  ai->dereferenced_ptrs_store = BITMAP_ALLOC (NULL);\n+  ai->dereferenced_ptrs_load = BITMAP_ALLOC (NULL);\n \n   /* If aliases have been computed before, clear existing information.  */\n   if (aliases_computed_p)\n@@ -626,7 +626,7 @@ delete_alias_info (struct alias_info *ai)\n \n   sbitmap_free (ai->ssa_names_visited);\n   ai->processed_ptrs = NULL;\n-  BITMAP_XFREE (ai->addresses_needed);\n+  BITMAP_FREE (ai->addresses_needed);\n \n   for (i = 0; i < ai->num_addressable_vars; i++)\n     {\n@@ -643,9 +643,9 @@ delete_alias_info (struct alias_info *ai)\n   free (ai->pointers);\n \n   ai->num_references = NULL;\n-  BITMAP_XFREE (ai->written_vars);\n-  BITMAP_XFREE (ai->dereferenced_ptrs_store);\n-  BITMAP_XFREE (ai->dereferenced_ptrs_load);\n+  BITMAP_FREE (ai->written_vars);\n+  BITMAP_FREE (ai->dereferenced_ptrs_store);\n+  BITMAP_FREE (ai->dereferenced_ptrs_load);\n \n   free (ai);\n }"}, {"sha": "12d5a61982dd755c3dfb09548d174f4c199c39a4", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa", "patch": "@@ -1961,7 +1961,7 @@ ccp_fold_builtin (tree stmt, tree fn)\n     }\n \n   /* Try to use the dataflow information gathered by the CCP process.  */\n-  visited = BITMAP_XMALLOC ();\n+  visited = BITMAP_ALLOC (NULL);\n \n   memset (strlen_val, 0, sizeof (strlen_val));\n   for (i = 0, a = arglist;\n@@ -1974,7 +1974,7 @@ ccp_fold_builtin (tree stmt, tree fn)\n \t  strlen_val[i] = NULL_TREE;\n       }\n \n-  BITMAP_XFREE (visited);\n+  BITMAP_FREE (visited);\n \n   result = NULL_TREE;\n   switch (DECL_FUNCTION_CODE (callee))"}, {"sha": "16b9d480a49bd5b90f4242e16161987e7ce1a61a", "filename": "gcc/tree-ssa-dce.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa/gcc%2Ftree-ssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa/gcc%2Ftree-ssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.c?ref=8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa", "patch": "@@ -879,7 +879,7 @@ tree_dce_init (bool aggressive)\n       control_dependence_map \n \t= xmalloc (last_basic_block * sizeof (bitmap));\n       for (i = 0; i < last_basic_block; ++i)\n-\tcontrol_dependence_map[i] = BITMAP_XMALLOC ();\n+\tcontrol_dependence_map[i] = BITMAP_ALLOC (NULL);\n \n       last_stmt_necessary = sbitmap_alloc (last_basic_block);\n       sbitmap_zero (last_stmt_necessary);\n@@ -901,7 +901,7 @@ tree_dce_done (bool aggressive)\n       int i;\n \n       for (i = 0; i < last_basic_block; ++i)\n-\tBITMAP_XFREE (control_dependence_map[i]);\n+\tBITMAP_FREE (control_dependence_map[i]);\n       free (control_dependence_map);\n \n       sbitmap_free (visited_control_parents);"}, {"sha": "0d34ea22fcfead479beb239361aff727eb0be413", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa", "patch": "@@ -383,8 +383,8 @@ tree_ssa_dominator_optimize (void)\n   nonzero_vars_stack = VEC_alloc (tree_on_heap, 20);\n   vrp_variables_stack = VEC_alloc (tree_on_heap, 20);\n   stmts_to_rescan = VEC_alloc (tree_on_heap, 20);\n-  nonzero_vars = BITMAP_XMALLOC ();\n-  need_eh_cleanup = BITMAP_XMALLOC ();\n+  nonzero_vars = BITMAP_ALLOC (NULL);\n+  need_eh_cleanup = BITMAP_ALLOC (NULL);\n \n   /* Setup callbacks for the generic dominator tree walker.  */\n   walk_data.walk_stmts_backward = false;\n@@ -497,8 +497,8 @@ tree_ssa_dominator_optimize (void)\n   fini_walk_dominator_tree (&walk_data);\n \n   /* Free nonzero_vars.  */\n-  BITMAP_XFREE (nonzero_vars);\n-  BITMAP_XFREE (need_eh_cleanup);\n+  BITMAP_FREE (nonzero_vars);\n+  BITMAP_FREE (need_eh_cleanup);\n   \n   VEC_free (tree_on_heap, block_defs_stack);\n   VEC_free (tree_on_heap, avail_exprs_stack);"}, {"sha": "249132d0f61cf5e76d6305fbda69f536490e4d9f", "filename": "gcc/tree-ssa-dse.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa/gcc%2Ftree-ssa-dse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa/gcc%2Ftree-ssa-dse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dse.c?ref=8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa", "patch": "@@ -433,7 +433,7 @@ tree_ssa_dse (void)\n   walk_data.block_local_data_size = sizeof (struct dse_block_local_data);\n \n   /* This is the main hash table for the dead store elimination pass.  */\n-  dse_gd.stores = BITMAP_XMALLOC ();\n+  dse_gd.stores = BITMAP_ALLOC (NULL);\n   walk_data.global_data = &dse_gd;\n \n   /* Initialize the dominator walker.  */\n@@ -446,7 +446,7 @@ tree_ssa_dse (void)\n   fini_walk_dominator_tree (&walk_data);\n \n   /* Release the main bitmap.  */\n-  BITMAP_XFREE (dse_gd.stores);\n+  BITMAP_FREE (dse_gd.stores);\n \n   /* Free dataflow information.  It's probably out of date now anyway.  */\n   free_df ();"}, {"sha": "12bc551a92e4c6a73b7ac7beba7962aae105c063", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa", "patch": "@@ -480,7 +480,7 @@ tree_ssa_forward_propagate_single_use_vars (void)\n   basic_block bb;\n   varray_type vars_worklist, cond_worklist;\n \n-  vars = BITMAP_XMALLOC ();\n+  vars = BITMAP_ALLOC (NULL);\n   VARRAY_TREE_INIT (vars_worklist, 10, \"VARS worklist\");\n   VARRAY_TREE_INIT (cond_worklist, 10, \"COND worklist\");\n \n@@ -522,7 +522,7 @@ tree_ssa_forward_propagate_single_use_vars (void)\n     }\n \n   /* All done.  Clean up.  */\n-  BITMAP_XFREE (vars);\n+  BITMAP_FREE (vars);\n }\n \n "}, {"sha": "13cd843e9511e69da641c5789e81101c363f3979", "filename": "gcc/tree-ssa-live.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa/gcc%2Ftree-ssa-live.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa/gcc%2Ftree-ssa-live.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-live.c?ref=8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa", "patch": "@@ -439,11 +439,11 @@ new_tree_live_info (var_map map)\n   live->map = map;\n   live->num_blocks = last_basic_block;\n \n-  live->global = BITMAP_XMALLOC ();\n+  live->global = BITMAP_ALLOC (NULL);\n \n   live->livein = (bitmap *)xmalloc (num_var_partitions (map) * sizeof (bitmap));\n   for (x = 0; x < num_var_partitions (map); x++)\n-    live->livein[x] = BITMAP_XMALLOC ();\n+    live->livein[x] = BITMAP_ALLOC (NULL);\n \n   /* liveout is deferred until it is actually requested.  */\n   live->liveout = NULL;\n@@ -460,17 +460,17 @@ delete_tree_live_info (tree_live_info_p live)\n   if (live->liveout)\n     {\n       for (x = live->num_blocks - 1; x >= 0; x--)\n-        BITMAP_XFREE (live->liveout[x]);\n+        BITMAP_FREE (live->liveout[x]);\n       free (live->liveout);\n     }\n   if (live->livein)\n     {\n       for (x = num_var_partitions (live->map) - 1; x >= 0; x--)\n-        BITMAP_XFREE (live->livein[x]);\n+        BITMAP_FREE (live->livein[x]);\n       free (live->livein);\n     }\n   if (live->global)\n-    BITMAP_XFREE (live->global);\n+    BITMAP_FREE (live->global);\n   \n   free (live);\n }\n@@ -573,7 +573,7 @@ calculate_live_on_entry (var_map map)\n   edge_iterator ei;\n #endif\n \n-  saw_def = BITMAP_XMALLOC ();\n+  saw_def = BITMAP_ALLOC (NULL);\n \n   live = new_tree_live_info (map);\n \n@@ -720,7 +720,7 @@ calculate_live_on_entry (var_map map)\n   gcc_assert (num <= 0);\n #endif\n \n-  BITMAP_XFREE (saw_def);\n+  BITMAP_FREE (saw_def);\n \n   return live;\n }\n@@ -742,7 +742,7 @@ calculate_live_on_exit (tree_live_info_p liveinfo)\n \n   on_exit = (bitmap *)xmalloc (last_basic_block * sizeof (bitmap));\n   for (x = 0; x < (unsigned)last_basic_block; x++)\n-    on_exit[x] = BITMAP_XMALLOC ();\n+    on_exit[x] = BITMAP_ALLOC (NULL);\n \n   /* Set all the live-on-exit bits for uses in PHIs.  */\n   FOR_EACH_BB (bb)\n@@ -1309,7 +1309,7 @@ build_tree_conflict_graph (tree_live_info_p liveinfo, tpa_p tpa,\n   if (tpa_num_trees (tpa) == 0)\n     return graph;\n \n-  live = BITMAP_XMALLOC ();\n+  live = BITMAP_ALLOC (NULL);\n \n   VARRAY_INT_INIT (partition_link, num_var_partitions (map) + 1, \"part_link\");\n   VARRAY_INT_INIT (tpa_nodes, tpa_num_trees (tpa), \"tpa nodes\");\n@@ -1443,7 +1443,7 @@ build_tree_conflict_graph (tree_live_info_p liveinfo, tpa_p tpa,\n \tVARRAY_POP_ALL (tpa_to_clear);\n     }\n \n-  BITMAP_XFREE (live);\n+  BITMAP_FREE (live);\n   return graph;\n }\n "}, {"sha": "d1adbabc07b7be0e1c3e2e749a5cc77c0ed0ffa8", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa", "patch": "@@ -730,8 +730,8 @@ tree_ssa_iv_optimize_init (struct loops *loops, struct ivopts_data *data)\n   data->version_info_size = 2 * num_ssa_names;\n   data->version_info = xcalloc (data->version_info_size,\n \t\t\t\tsizeof (struct version_info));\n-  data->relevant = BITMAP_XMALLOC ();\n-  data->important_candidates = BITMAP_XMALLOC ();\n+  data->relevant = BITMAP_ALLOC (NULL);\n+  data->important_candidates = BITMAP_ALLOC (NULL);\n   data->max_inv_id = 0;\n   data->niters = htab_create (10, nfe_hash, nfe_eq, free);\n \n@@ -1152,7 +1152,7 @@ record_use (struct ivopts_data *data, tree *use_p, struct iv *iv,\n   use->iv = iv;\n   use->stmt = stmt;\n   use->op_p = use_p;\n-  use->related_cands = BITMAP_XMALLOC ();\n+  use->related_cands = BITMAP_ALLOC (NULL);\n \n   /* To avoid showing ssa name in the dumps, if it was not reset by the\n      caller.  */\n@@ -2184,7 +2184,7 @@ record_important_candidates (struct ivopts_data *data)\n       for (i = 0; i < n_iv_uses (data); i++)\n \t{\n \t  use = iv_use (data, i);\n-\t  BITMAP_XFREE (use->related_cands);\n+\t  BITMAP_FREE (use->related_cands);\n \t}\n     }\n   else\n@@ -2260,7 +2260,7 @@ set_use_iv_cost (struct ivopts_data *data,\n \n   if (cost == INFTY)\n     {\n-      BITMAP_XFREE (depends_on);\n+      BITMAP_FREE (depends_on);\n       return;\n     }\n \n@@ -2827,7 +2827,7 @@ find_depends (tree *expr_p, int *ws ATTRIBUTE_UNUSED, void *data)\n     return NULL_TREE;\n \n   if (!*depends_on)\n-    *depends_on = BITMAP_XMALLOC ();\n+    *depends_on = BITMAP_ALLOC (NULL);\n   bitmap_set_bit (*depends_on, info->inv_id);\n \n   return NULL_TREE;\n@@ -3589,7 +3589,7 @@ determine_use_iv_costs (struct ivopts_data *data)\n   unsigned i, j;\n   struct iv_use *use;\n   struct iv_cand *cand;\n-  bitmap to_clear = BITMAP_XMALLOC ();\n+  bitmap to_clear = BITMAP_ALLOC (NULL);\n \n   alloc_use_cost_map (data);\n \n@@ -3623,7 +3623,7 @@ determine_use_iv_costs (struct ivopts_data *data)\n \t}\n     }\n \n-  BITMAP_XFREE (to_clear);\n+  BITMAP_FREE (to_clear);\n \n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n@@ -4134,7 +4134,7 @@ iv_ca_new (struct ivopts_data *data)\n   nw->bad_uses = 0;\n   nw->cand_for_use = xcalloc (n_iv_uses (data), sizeof (struct cost_pair *));\n   nw->n_cand_uses = xcalloc (n_iv_cands (data), sizeof (unsigned));\n-  nw->cands = BITMAP_XMALLOC ();\n+  nw->cands = BITMAP_ALLOC (NULL);\n   nw->n_cands = 0;\n   nw->n_regs = 0;\n   nw->cand_use_cost = 0;\n@@ -4152,7 +4152,7 @@ iv_ca_free (struct iv_ca **ivs)\n {\n   free ((*ivs)->cand_for_use);\n   free ((*ivs)->n_cand_uses);\n-  BITMAP_XFREE ((*ivs)->cands);\n+  BITMAP_FREE ((*ivs)->cands);\n   free ((*ivs)->n_invariant_uses);\n   free (*ivs);\n   *ivs = NULL;\n@@ -5192,10 +5192,10 @@ free_loop_data (struct ivopts_data *data)\n       struct iv_use *use = iv_use (data, i);\n \n       free (use->iv);\n-      BITMAP_XFREE (use->related_cands);\n+      BITMAP_FREE (use->related_cands);\n       for (j = 0; j < use->n_map_members; j++)\n \tif (use->cost_map[j].depends_on)\n-\t  BITMAP_XFREE (use->cost_map[j].depends_on);\n+\t  BITMAP_FREE (use->cost_map[j].depends_on);\n       free (use->cost_map);\n       free (use);\n     }\n@@ -5247,8 +5247,8 @@ tree_ssa_iv_optimize_finalize (struct loops *loops, struct ivopts_data *data)\n \n   free_loop_data (data);\n   free (data->version_info);\n-  BITMAP_XFREE (data->relevant);\n-  BITMAP_XFREE (data->important_candidates);\n+  BITMAP_FREE (data->relevant);\n+  BITMAP_FREE (data->important_candidates);\n   htab_delete (data->niters);\n \n   VARRAY_FREE (decl_rtl_to_reset);"}, {"sha": "848abbc88d6130b2ad96886390463e7b8dfbdaab", "filename": "gcc/tree-ssa-loop-manip.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa/gcc%2Ftree-ssa-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa/gcc%2Ftree-ssa-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-manip.c?ref=8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa", "patch": "@@ -159,10 +159,10 @@ add_exit_phis_var (tree var, bitmap livein, bitmap exits)\n \n   bitmap_clear_bit (livein, def_bb->index);\n \n-  def = BITMAP_XMALLOC ();\n+  def = BITMAP_ALLOC (NULL);\n   bitmap_set_bit (def, def_bb->index);\n   compute_global_livein (livein, def);\n-  BITMAP_XFREE (def);\n+  BITMAP_FREE (def);\n \n   EXECUTE_IF_AND_IN_BITMAP (exits, livein, 0, index, bi)\n     {\n@@ -191,7 +191,7 @@ add_exit_phis (bitmap names_to_rename, bitmap *use_blocks, bitmap loop_exits)\n static bitmap\n get_loops_exits (void)\n {\n-  bitmap exits = BITMAP_XMALLOC ();\n+  bitmap exits = BITMAP_ALLOC (NULL);\n   basic_block bb;\n   edge e;\n   edge_iterator ei;\n@@ -235,7 +235,7 @@ find_uses_to_rename_use (basic_block bb, tree use, bitmap *use_blocks)\n     return;\n \n   if (!use_blocks[ver])\n-    use_blocks[ver] = BITMAP_XMALLOC ();\n+    use_blocks[ver] = BITMAP_ALLOC (NULL);\n   bitmap_set_bit (use_blocks[ver], bb->index);\n \n   if (!flow_bb_inside_loop_p (def_loop, bb))\n@@ -330,10 +330,10 @@ rewrite_into_loop_closed_ssa (void)\n   add_exit_phis (names_to_rename, use_blocks, loop_exits);\n \n   for (i = 0; i < num_ssa_names; i++)\n-    BITMAP_XFREE (use_blocks[i]);\n+    BITMAP_FREE (use_blocks[i]);\n   free (use_blocks);\n-  BITMAP_XFREE (loop_exits);\n-  BITMAP_XFREE (names_to_rename);\n+  BITMAP_FREE (loop_exits);\n+  BITMAP_FREE (names_to_rename);\n \n   /* Do the rewriting.  */\n   rewrite_ssa_into_ssa ();\n@@ -618,7 +618,7 @@ tree_duplicate_loop_to_header_edge (struct loop *loop, edge e,\n   definitions = marked_ssa_names ();\n   rename_variables (first_new_block, definitions);\n   unmark_all_for_rewrite ();\n-  BITMAP_XFREE (definitions);\n+  BITMAP_FREE (definitions);\n \n   /* For some time we have the identical ssa names as results in multiple phi\n      nodes.  When phi node is resized, it sets SSA_NAME_DEF_STMT of its result"}, {"sha": "66e2b223ce3787817c53cbb1885ce895bb310345", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa", "patch": "@@ -2170,7 +2170,7 @@ init_pre (bool do_fre)\n       AVAIL_OUT (bb) = bitmap_set_new ();\n     }\n \n-  need_eh_cleanup = BITMAP_XMALLOC ();\n+  need_eh_cleanup = BITMAP_ALLOC (NULL);\n }\n \n \n@@ -2208,7 +2208,7 @@ fini_pre (bool do_fre)\n       cleanup_tree_cfg ();\n     }\n \n-  BITMAP_XFREE (need_eh_cleanup);\n+  BITMAP_FREE (need_eh_cleanup);\n \n   /* Wipe out pointers to VALUE_HANDLEs.  In the not terribly distant\n      future we will want them to be persistent though.  */"}, {"sha": "56a181a37cd9b9c486ccad650fc90ec98a4a4209", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa", "patch": "@@ -341,7 +341,7 @@ verify_flow_insensitive_alias_info (void)\n {\n   size_t i;\n   tree var;\n-  bitmap visited = BITMAP_XMALLOC ();\n+  bitmap visited = BITMAP_ALLOC (NULL);\n \n   for (i = 0; i < num_referenced_vars; i++)\n     {\n@@ -384,7 +384,7 @@ verify_flow_insensitive_alias_info (void)\n \t}\n     }\n \n-  BITMAP_XFREE (visited);\n+  BITMAP_FREE (visited);\n   return;\n \n err:\n@@ -480,7 +480,7 @@ verify_name_tags (void)\n   bitmap first, second;  \n   VEC (tree) *name_tag_reps = NULL;\n   VEC (bitmap) *pt_vars_for_reps = NULL;\n-  bitmap type_aliases = BITMAP_XMALLOC ();\n+  bitmap type_aliases = BITMAP_ALLOC (NULL);\n \n   /* First we compute the name tag representatives and their points-to sets.  */\n   for (i = 0; i < num_ssa_names; i++)\n@@ -604,7 +604,7 @@ verify_ssa (void)\n   ssa_op_iter iter;\n   tree op;\n   enum dom_state orig_dom_state = dom_computed[CDI_DOMINATORS];\n-  bitmap names_defined_in_bb = BITMAP_XMALLOC ();\n+  bitmap names_defined_in_bb = BITMAP_ALLOC (NULL);\n \n   timevar_push (TV_TREE_SSA_VERIFY);\n \n@@ -702,7 +702,7 @@ verify_ssa (void)\n   else\n     dom_computed[CDI_DOMINATORS] = orig_dom_state;\n   \n-  BITMAP_XFREE (names_defined_in_bb);\n+  BITMAP_FREE (names_defined_in_bb);\n   timevar_pop (TV_TREE_SSA_VERIFY);\n   return;\n \n@@ -717,8 +717,8 @@ void\n init_tree_ssa (void)\n {\n   VARRAY_TREE_INIT (referenced_vars, 20, \"referenced_vars\");\n-  call_clobbered_vars = BITMAP_XMALLOC ();\n-  addressable_vars = BITMAP_XMALLOC ();\n+  call_clobbered_vars = BITMAP_ALLOC (NULL);\n+  addressable_vars = BITMAP_ALLOC (NULL);\n   init_ssa_operands ();\n   init_ssanames ();\n   init_phinodes ();\n@@ -762,9 +762,9 @@ delete_tree_ssa (void)\n   fini_ssa_operands ();\n \n   global_var = NULL_TREE;\n-  BITMAP_XFREE (call_clobbered_vars);\n+  BITMAP_FREE (call_clobbered_vars);\n   call_clobbered_vars = NULL;\n-  BITMAP_XFREE (addressable_vars);\n+  BITMAP_FREE (addressable_vars);\n   addressable_vars = NULL;\n   modified_noreturn_calls = NULL;\n }"}, {"sha": "7c181ed8d660ddf027b5cc27d80acdf6b27b3b56", "filename": "gcc/tree-ssanames.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa/gcc%2Ftree-ssanames.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa/gcc%2Ftree-ssanames.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssanames.c?ref=8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa", "patch": "@@ -118,7 +118,7 @@ unmark_all_for_rewrite (void)\n bitmap\n marked_ssa_names (void)\n {\n-  bitmap ret = BITMAP_XMALLOC ();\n+  bitmap ret = BITMAP_ALLOC (NULL);\n \n   bitmap_copy (ret, ssa_names_to_rewrite);\n \n@@ -138,15 +138,15 @@ init_ssanames (void)\n      large.  */\n   VARRAY_PUSH_TREE (ssa_names, NULL_TREE);\n   free_ssanames = NULL;\n-  ssa_names_to_rewrite = BITMAP_XMALLOC ();\n+  ssa_names_to_rewrite = BITMAP_ALLOC (NULL);\n }\n \n /* Finalize management of SSA_NAMEs.  */\n \n void\n fini_ssanames (void)\n {\n-  BITMAP_XFREE (ssa_names_to_rewrite);\n+  BITMAP_FREE (ssa_names_to_rewrite);\n   ggc_free (ssa_names);\n   ssa_names = NULL;\n   free_ssanames = NULL;"}, {"sha": "8c447428780817ba3a4ec9c80aa794aac8cb3651", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=8bdbfff57ed2d012fd2fe4b7411a6c815957e8aa", "patch": "@@ -1023,7 +1023,7 @@ slpeel_tree_peel_loop_to_edge (struct loop *loop, struct loops *loops,\n     slpeel_make_loop_iterate_ntimes (first_loop, first_niters);\n \n   free_new_names (definitions);\n-  BITMAP_XFREE (definitions);\n+  BITMAP_FREE (definitions);\n   unmark_all_for_rewrite ();\n \n   return new_loop;"}]}