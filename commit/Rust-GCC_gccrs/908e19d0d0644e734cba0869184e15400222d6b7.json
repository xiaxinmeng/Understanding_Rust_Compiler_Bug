{"sha": "908e19d0d0644e734cba0869184e15400222d6b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTA4ZTE5ZDBkMDY0NGU3MzRjYmEwODY5MTg0ZTE1NDAwMjIyZDZiNw==", "commit": {"author": {"name": "David S. Miller", "email": "davem@davemloft.net", "date": "2011-10-06T19:15:39Z"}, "committer": {"name": "David S. Miller", "email": "davem@gcc.gnu.org", "date": "2011-10-06T19:15:39Z"}, "message": "Correct errors in sparc SImode popcount/clz patterns when 64-bit.\n\n\t* config/sparc/sparc.md (popcount<mode>2, clz<mode>2): Split up into...\n\t(popcountdi2, popcountsi2, clzdi2, clzsi2): Explicit expanders, in the\n\tSI mode 64-bit code gen case explicitly zero-extend and truncate.\n\t(*popcount<mode>_sp64): Split up into...\n\t(*popcountdi_sp64, *popcountsi_64): Explicit instantiations, and in the\n\tSImode case use truncate.\n\t(*clzsi_sp64): Rewrite to use truncate, and let the expander emit the\n\tsubtract so the compiler can optimize it.\n\t(SIDI): Remove unused mode iterator.\n\nFrom-SVN: r179628", "tree": {"sha": "c3e823b812cfdee24c34666e732f37a32eb6e84f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3e823b812cfdee24c34666e732f37a32eb6e84f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/908e19d0d0644e734cba0869184e15400222d6b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/908e19d0d0644e734cba0869184e15400222d6b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/908e19d0d0644e734cba0869184e15400222d6b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/908e19d0d0644e734cba0869184e15400222d6b7/comments", "author": {"login": "davem330", "id": 1053866, "node_id": "MDQ6VXNlcjEwNTM4NjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1053866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davem330", "html_url": "https://github.com/davem330", "followers_url": "https://api.github.com/users/davem330/followers", "following_url": "https://api.github.com/users/davem330/following{/other_user}", "gists_url": "https://api.github.com/users/davem330/gists{/gist_id}", "starred_url": "https://api.github.com/users/davem330/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davem330/subscriptions", "organizations_url": "https://api.github.com/users/davem330/orgs", "repos_url": "https://api.github.com/users/davem330/repos", "events_url": "https://api.github.com/users/davem330/events{/privacy}", "received_events_url": "https://api.github.com/users/davem330/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f4b31a33a2ba7839164998916ec4215acdb162b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4b31a33a2ba7839164998916ec4215acdb162b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4b31a33a2ba7839164998916ec4215acdb162b9"}], "stats": {"total": 111, "additions": 82, "deletions": 29}, "files": [{"sha": "0649bbe5389e138aa5e4702679607f47c56b86cf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/908e19d0d0644e734cba0869184e15400222d6b7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/908e19d0d0644e734cba0869184e15400222d6b7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=908e19d0d0644e734cba0869184e15400222d6b7", "patch": "@@ -1,3 +1,15 @@\n+2011-10-06  David S. Miller  <davem@davemloft.net>\n+\n+\t* config/sparc/sparc.md (popcount<mode>2, clz<mode>2): Split up into...\n+\t(popcountdi2, popcountsi2, clzdi2, clzsi2): Explicit expanders, in the\n+\tSI mode 64-bit code gen case explicitly zero-extend and truncate.\n+\t(*popcount<mode>_sp64): Split up into...\n+\t(*popcountdi_sp64, *popcountsi_64): Explicit instantiations, and in the\n+\tSImode case use truncate.\n+\t(*clzsi_sp64): Rewrite to use truncate, and let the expander emit the\n+\tsubtract so the compiler can optimize it.\n+\t(SIDI): Remove unused mode iterator.\n+\n 2011-10-06  Bernd Schmidt  <bernds@codesourcery.com>\n \n \t* function.c (thread_prologue_and_epilogue_insns): Emit split"}, {"sha": "a6eba6ca3a6c741374b411890460f01cbd8475a7", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 70, "deletions": 29, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/908e19d0d0644e734cba0869184e15400222d6b7/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/908e19d0d0644e734cba0869184e15400222d6b7/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=908e19d0d0644e734cba0869184e15400222d6b7", "patch": "@@ -206,8 +206,6 @@\n \n (define_mode_iterator V64N8 [V2SI V4HI])\n \n-(define_mode_iterator SIDI [SI DI])\n-\n ;; The upper 32 fp regs on the v9 can't hold SFmode values.  To deal with this\n ;; a second register class, EXTRA_FP_REGS, exists for the v9 chip.  The name\n ;; is a bit of a misnomer as it covers all 64 fp regs.  The corresponding\n@@ -6806,36 +6804,24 @@\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"length\" \"8\")])\n \n-(define_expand \"popcount<mode>2\"\n-  [(set (match_operand:SIDI 0 \"register_operand\" \"\")\n-        (popcount:SIDI (match_operand:SIDI 1 \"register_operand\" \"\")))]\n+(define_expand \"popcountdi2\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+        (popcount:DI (match_operand:DI 1 \"register_operand\" \"\")))]\n   \"TARGET_POPC\"\n {\n   if (! TARGET_ARCH64)\n     {\n-      emit_insn (gen_popcount<mode>_v8plus (operands[0], operands[1]));\n+      emit_insn (gen_popcountdi_v8plus (operands[0], operands[1]));\n       DONE;\n     }\n })\n \n-(define_insn \"*popcount<mode>_sp64\"\n-  [(set (match_operand:SIDI 0 \"register_operand\" \"=r\")\n-        (popcount:SIDI (match_operand:SIDI 1 \"register_operand\" \"r\")))]\n+(define_insn \"*popcountdi_sp64\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+        (popcount:DI (match_operand:DI 1 \"register_operand\" \"r\")))]\n   \"TARGET_POPC && TARGET_ARCH64\"\n   \"popc\\t%1, %0\")\n \n-(define_insn \"popcountsi_v8plus\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-        (popcount:SI (match_operand:SI 1 \"register_operand\" \"r\")))]\n-  \"TARGET_POPC && ! TARGET_ARCH64\"\n-{\n-  if (sparc_check_64 (operands[1], insn) <= 0)\n-    output_asm_insn (\"srl\\t%1, 0, %1\", operands);\n-  return \"popc\\t%1, %0\";\n-}\n-  [(set_attr \"type\" \"multi\")\n-   (set_attr \"length\" \"2\")])\n-\n (define_insn \"popcountdi_v8plus\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n         (popcount:DI (match_operand:DI 1 \"register_operand\" \"r\")))\n@@ -6849,14 +6835,49 @@\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"length\" \"5\")])\n \n-(define_expand \"clz<mode>2\"\n-  [(set (match_operand:SIDI 0 \"register_operand\" \"\")\n-        (clz:SIDI (match_operand:SIDI 1 \"register_operand\" \"\")))]\n+(define_expand \"popcountsi2\"\n+  [(set (match_dup 2)\n+        (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"\")))\n+   (set (match_operand:SI 0 \"register_operand\" \"\")\n+        (truncate:SI (popcount:DI (match_dup 2))))]\n+  \"TARGET_POPC\"\n+{\n+  if (! TARGET_ARCH64)\n+    {\n+      emit_insn (gen_popcountsi_v8plus (operands[0], operands[1]));\n+      DONE;\n+    }\n+  else\n+    operands[2] = gen_reg_rtx (DImode);\n+})\n+\n+(define_insn \"*popcountsi_sp64\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+        (truncate:SI\n+          (popcount:DI (match_operand:DI 1 \"register_operand\" \"r\"))))]\n+  \"TARGET_POPC && TARGET_ARCH64\"\n+  \"popc\\t%1, %0\")\n+\n+(define_insn \"popcountsi_v8plus\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+        (popcount:SI (match_operand:SI 1 \"register_operand\" \"r\")))]\n+  \"TARGET_POPC && ! TARGET_ARCH64\"\n+{\n+  if (sparc_check_64 (operands[1], insn) <= 0)\n+    output_asm_insn (\"srl\\t%1, 0, %1\", operands);\n+  return \"popc\\t%1, %0\";\n+}\n+  [(set_attr \"type\" \"multi\")\n+   (set_attr \"length\" \"2\")])\n+\n+(define_expand \"clzdi2\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+        (clz:DI (match_operand:DI 1 \"register_operand\" \"\")))]\n   \"TARGET_VIS3\"\n {\n   if (! TARGET_ARCH64)\n     {\n-      emit_insn (gen_clz<mode>_v8plus (operands[0], operands[1]));\n+      emit_insn (gen_clzdi_v8plus (operands[0], operands[1]));\n       DONE;\n     }\n })\n@@ -6880,13 +6901,33 @@\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"length\" \"5\")])\n \n+(define_expand \"clzsi2\"\n+  [(set (match_dup 2)\n+        (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"\")))\n+   (set (match_dup 3)\n+        (truncate:SI (clz:DI (match_dup 2))))\n+   (set (match_operand:SI 0 \"register_operand\" \"\")\n+        (minus:SI (match_dup 3) (const_int 32)))]\n+  \"TARGET_VIS3\"\n+{\n+  if (! TARGET_ARCH64)\n+    {\n+      emit_insn (gen_clzsi_v8plus (operands[0], operands[1]));\n+      DONE;\n+    }\n+  else\n+    {\n+      operands[2] = gen_reg_rtx (DImode);\n+      operands[3] = gen_reg_rtx (SImode);\n+    }\n+})\n+\n (define_insn \"*clzsi_sp64\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-        (clz:SI (match_operand:SI 1 \"register_operand\" \"r\")))]\n+        (truncate:SI\n+          (clz:DI (match_operand:DI 1 \"register_operand\" \"r\"))))]\n   \"TARGET_VIS3 && TARGET_ARCH64\"\n-  \"lzd\\t%1, %0\\n\\tsub\\t%0, 32, %0\"\n-  [(set_attr \"type\" \"multi\")\n-   (set_attr \"length\" \"2\")])\n+  \"lzd\\t%1, %0\")\n \n (define_insn \"clzsi_v8plus\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")"}]}