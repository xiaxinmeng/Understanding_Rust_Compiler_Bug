{"sha": "6938f93f2ec91e5c8f68469512593efba643caef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjkzOGY5M2YyZWM5MWU1YzhmNjg0Njk1MTI1OTNlZmJhNjQzY2FlZg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2010-07-07T01:00:42Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2010-07-07T01:00:42Z"}, "message": "re PR middle-end/44813 (ipa-split causes ice in ptr_deref_may_alias_decl_p, at tree-ssa-alias.c:173)\n\n\tPR middle-end/44813\n\t* tree-ssa-uninit.c (ssa_undefined_value_p): Result decl is defined\n\tfor functions passed by reference.\n\t* tree.c (needs_to_live_in_memory): RESULT_DECL don't need to live\n\tin memory when passed by reference.\n\t* tree-ssa-ccp.c (get_default_value): Only VAR_DECL is undefined at\n\tbeggining.\n\t* ipa-split.c (split_function): Cleanup way return value is passed;\n\thandle SSA DECL_BY_REFERENCE retvals.\n\t* tree-ssa.c (verify_def): Verify that RESULT_DECL is read only when\n\tDECL_BY_REFERENCE is set.\n\t* tree-ssa-structalias.c (get_constraint_for_ssa_var, get_fi_for_callee,\n\tfind_what_p_points_to): Handle RESULT_DECL.\n\t* tree-inline.c (declare_return_variable): Get new entry_block argument;\n\twhen passing by reference ensure that RESULT_DECL is gimple_val.\n\t(remap_gimple_op_r): Remap RESULT_DECL ssa name.\n\t(remap_gimple_stmt): Handle SSA DECL_BY_REFERENCE returns.\n\t* g++.dg/torture/pr44813.C: New testcase.\n\t* g++.dg/torture/pr44826.C: New testcase.\n\nFrom-SVN: r161898", "tree": {"sha": "94d7441216e1549f60d0ca9d9c850b862731a503", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/94d7441216e1549f60d0ca9d9c850b862731a503"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6938f93f2ec91e5c8f68469512593efba643caef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6938f93f2ec91e5c8f68469512593efba643caef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6938f93f2ec91e5c8f68469512593efba643caef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6938f93f2ec91e5c8f68469512593efba643caef/comments", "author": null, "committer": null, "parents": [{"sha": "1d8f4f9171a9bf20221425decc286348bb91ab15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d8f4f9171a9bf20221425decc286348bb91ab15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d8f4f9171a9bf20221425decc286348bb91ab15"}], "stats": {"total": 256, "additions": 234, "deletions": 22}, "files": [{"sha": "7c4c89d8d73020107bf2536a0778a0f66e0ef967", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6938f93f2ec91e5c8f68469512593efba643caef/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6938f93f2ec91e5c8f68469512593efba643caef/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6938f93f2ec91e5c8f68469512593efba643caef", "patch": "@@ -1,3 +1,25 @@\n+2010-07-07  Jan Hubicka  <jh@suse.cz>\n+\n+\tWith parts by Richard Guenther\n+\n+\tPR middle-end/44813\n+\t* tree-ssa-uninit.c (ssa_undefined_value_p): Result decl is defined\n+\tfor functions passed by reference.\n+\t* tree.c (needs_to_live_in_memory): RESULT_DECL don't need to live\n+\tin memory when passed by reference.\n+\t* tree-ssa-ccp.c (get_default_value): Only VAR_DECL is undefined at\n+\tbeggining.\n+\t* ipa-split.c (split_function): Cleanup way return value is passed;\n+\thandle SSA DECL_BY_REFERENCE retvals.\n+\t* tree-ssa.c (verify_def): Verify that RESULT_DECL is read only when\n+\tDECL_BY_REFERENCE is set.\n+\t* tree-ssa-structalias.c (get_constraint_for_ssa_var, get_fi_for_callee,\n+\tfind_what_p_points_to): Handle RESULT_DECL.\n+\t* tree-inline.c (declare_return_variable): Get new entry_block argument;\n+\twhen passing by reference ensure that RESULT_DECL is gimple_val.\n+\t(remap_gimple_op_r): Remap RESULT_DECL ssa name.\n+\t(remap_gimple_stmt): Handle SSA DECL_BY_REFERENCE returns.\n+\n 2010-07-07  Bernd Schmidt  <bernds@codesourcery.com>\n \n \tPR rtl-optimization/44787"}, {"sha": "28f96b23854515aa6607886db2617eab76512199", "filename": "gcc/ipa-split.c", "status": "modified", "additions": 52, "deletions": 12, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6938f93f2ec91e5c8f68469512593efba643caef/gcc%2Fipa-split.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6938f93f2ec91e5c8f68469512593efba643caef/gcc%2Fipa-split.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-split.c?ref=6938f93f2ec91e5c8f68469512593efba643caef", "patch": "@@ -967,31 +967,47 @@ split_function (struct split_point *split_point)\n \t\t     return_bb == EXIT_BLOCK_PTR ? 0 : EDGE_FALLTHRU);\n       e->count = call_bb->count;\n       e->probability = REG_BR_PROB_BASE;\n+\n+      /* If there is return basic block, see what value we need to store\n+         return value into and put call just before it.  */\n       if (return_bb != EXIT_BLOCK_PTR)\n \t{\n \t  real_retval = retval = find_retval (return_bb);\n+\n+\t  /* See if return value is computed by split part;\n+\t     function might just return its argument, invariant or undefined\n+\t     value.  In this case we don't need to do any updating.  */\n \t  if (real_retval\n \t      && !is_gimple_min_invariant (retval)\n \t      && (TREE_CODE (retval) != SSA_NAME\n-\t\t  || !SSA_NAME_IS_DEFAULT_DEF (retval)))\n+\t\t  || (!SSA_NAME_IS_DEFAULT_DEF (retval)\n+\t\t      || DECL_BY_REFERENCE\n+\t\t\t   (DECL_RESULT (current_function_decl)))))\n \t    {\n \t      gimple_stmt_iterator psi;\n \n-\t      /* See if there is PHI defining return value.  */\n-\t      for (psi = gsi_start_phis (return_bb);\n-\t\t   !gsi_end_p (psi); gsi_next (&psi))\n-\t\tif (is_gimple_reg (gimple_phi_result (gsi_stmt (psi))))\n-\t\t  break;\n-\n-\t      /* When we have PHI, update PHI.  When there is no PHI,\n-\t\t update the return statement itself.  */\n-\t      if (TREE_CODE (retval) == SSA_NAME)\n+\t      /* See if we need new SSA_NAME for the result.\n+\t\t When DECL_BY_REFERENCE is true, retval is actually pointer to\n+\t\t return value and it is constant in whole function.  */\n+\t      if (TREE_CODE (retval) == SSA_NAME\n+\t\t  && !DECL_BY_REFERENCE (DECL_RESULT (current_function_decl)))\n \t\t{\n \t\t  retval = make_ssa_name (SSA_NAME_VAR (retval), call);\n+\n+\t\t  /* See if there is PHI defining return value.  */\n+\t\t  for (psi = gsi_start_phis (return_bb);\n+\t\t       !gsi_end_p (psi); gsi_next (&psi))\n+\t\t    if (is_gimple_reg (gimple_phi_result (gsi_stmt (psi))))\n+\t\t      break;\n+\n+\t\t  /* When there is PHI, just update its value.  */\n \t\t  if (TREE_CODE (retval) == SSA_NAME\n \t\t      && !gsi_end_p (psi))\n \t\t    add_phi_arg (gsi_stmt (psi), retval, e, UNKNOWN_LOCATION);\n-\t\t  else if (TREE_CODE (retval) == SSA_NAME)\n+\t\t  /* Otherwise update the return BB itself.\n+\t\t     find_return_bb allows at most one assignment to return value,\n+\t\t     so update first statement.  */\n+\t\t  else\n \t\t    {\n \t\t      gimple_stmt_iterator bsi;\n \t\t      for (bsi = gsi_start_bb (return_bb); !gsi_end_p (bsi);\n@@ -1016,6 +1032,9 @@ split_function (struct split_point *split_point)\n \t    }\n           gsi_insert_after (&gsi, call, GSI_NEW_STMT);\n \t}\n+      /* We don't use return block (there is either no return in function or\n+\t multiple of them).  So create new basic block with return statement.\n+\t */\n       else\n \t{\n \t  gimple ret;\n@@ -1030,7 +1049,28 @@ split_function (struct split_point *split_point)\n \t\t  && !DECL_BY_REFERENCE (retval))\n \t\tretval = create_tmp_reg (TREE_TYPE (retval), NULL);\n \t      if (is_gimple_reg (retval))\n-\t\tretval = make_ssa_name (retval, call);\n+\t\t{\n+\t\t  /* When returning by reference, there is only one SSA name\n+\t\t     assigned to RESULT_DECL (that is pointer to return value).\n+\t\t     Look it up or create new one if it is missing.  */\n+\t\t  if (DECL_BY_REFERENCE (retval))\n+\t\t    {\n+\t\t      tree retval_name;\n+\t\t      if ((retval_name = gimple_default_def (cfun, retval))\n+\t\t\t  != NULL)\n+\t\t\tretval = retval_name;\n+\t\t      else\n+\t\t\t{\n+\t\t          retval_name = make_ssa_name (retval,\n+\t\t\t\t\t\t       gimple_build_nop ());\n+\t\t\t  set_default_def (retval, retval_name);\n+\t\t\t  retval = retval_name;\n+\t\t\t}\n+\t\t    }\n+\t\t  /* Otherwise produce new SSA name for return value.  */\n+\t\t  else\n+\t\t    retval = make_ssa_name (retval, call);\n+\t\t}\n \t      if (DECL_BY_REFERENCE (DECL_RESULT (current_function_decl)))\n \t        gimple_call_set_lhs (call, build_simple_mem_ref (retval));\n \t      else"}, {"sha": "63a468ba35d3700c60a6f2a7a465b3250fd5eade", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6938f93f2ec91e5c8f68469512593efba643caef/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6938f93f2ec91e5c8f68469512593efba643caef/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6938f93f2ec91e5c8f68469512593efba643caef", "patch": "@@ -1,3 +1,9 @@\n+2010-07-07  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR middle-end/44813\n+\t* g++.dg/torture/pr44813.C: New testcase.\n+\t* g++.dg/torture/pr44826.C: New testcase.\n+\n 2010-07-07  Bernd Schmidt  <bernds@codesourcery.com>\n \n \tPR rtl-optimization/44787"}, {"sha": "1dc01b06a17ac90323f07a1ccb2c1e9f948de5f1", "filename": "gcc/testsuite/g++.dg/torture/pr44813.C", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6938f93f2ec91e5c8f68469512593efba643caef/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr44813.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6938f93f2ec91e5c8f68469512593efba643caef/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr44813.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr44813.C?ref=6938f93f2ec91e5c8f68469512593efba643caef", "patch": "@@ -0,0 +1,60 @@\n+typedef unsigned int PRUint32;\n+typedef int PRInt32;\n+typedef unsigned long PRUint64;\n+typedef int PRIntn;\n+typedef PRIntn PRBool;\n+struct nsRect {\n+    nsRect(const nsRect& aRect) { }\n+};\n+enum nsCompatibility { eCompatibility_NavQuirks = 3 };\n+class gfxContext;\n+typedef PRUint64 nsFrameState;\n+class nsPresContext {\n+public:\n+    nsCompatibility CompatibilityMode() const { }\n+};\n+class nsStyleContext {\n+public:\n+    PRBool HasTextDecorations() const;\n+};\n+class nsIFrame {\n+public:\n+    nsPresContext* PresContext() const;\n+    nsStyleContext* GetStyleContext() const;\n+    nsFrameState GetStateBits() const;\n+    nsRect GetOverflowRect() const;\n+};\n+class nsFrame : public nsIFrame { };\n+class nsLineList_iterator { };\n+class nsLineList {\n+public:\n+    typedef nsLineList_iterator iterator;\n+};\n+class gfxSkipCharsIterator { };\n+class gfxTextRun {\n+public:\n+    class PropertyProvider { };\n+};\n+class nsTextFrame : public nsFrame\n+{\n+  virtual nsRect ComputeTightBounds(gfxContext* aContext) const;\n+  gfxSkipCharsIterator EnsureTextRun(gfxContext* aReferenceContext = 0L,\n+\t\t\t\t     nsIFrame* aLineContainer = 0L,\n+\t\t\t\t     const nsLineList::iterator* aLine = 0L,\n+\t\t\t\t     PRUint32* aFlowEndInTextRun = 0L);\n+};\n+class PropertyProvider : public gfxTextRun::PropertyProvider\n+{\n+public:\n+    PropertyProvider(nsTextFrame* aFrame, const gfxSkipCharsIterator& aStart);\n+    PRInt32 mLength[64];\n+};\n+nsRect nsTextFrame::ComputeTightBounds(gfxContext* aContext) const\n+{\n+  if ((GetStyleContext()->HasTextDecorations()\n+       && eCompatibility_NavQuirks == PresContext()->CompatibilityMode())\n+      || (GetStateBits() & (nsFrameState(1) << (23))))\n+    return GetOverflowRect();\n+  gfxSkipCharsIterator iter = const_cast<nsTextFrame*>(this)->EnsureTextRun();\n+  PropertyProvider provider(const_cast<nsTextFrame*>(this), iter);\n+}"}, {"sha": "aece14070701875a56247f97ad9b0ad35c709172", "filename": "gcc/testsuite/g++.dg/torture/pr44826.C", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6938f93f2ec91e5c8f68469512593efba643caef/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr44826.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6938f93f2ec91e5c8f68469512593efba643caef/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr44826.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr44826.C?ref=6938f93f2ec91e5c8f68469512593efba643caef", "patch": "@@ -0,0 +1,44 @@\n+typedef unsigned short PRUint16;\n+typedef PRUint16 PRUnichar;\n+template <class CharT> struct nsCharTraits {\n+};\n+class nsAString_internal   {\n+public:\n+    typedef PRUnichar char_type;\n+};\n+class nsString : public nsAString_internal   {\n+public:\n+    typedef nsString self_type;\n+    nsString( const self_type& str );\n+};\n+class nsDependentString : public nsString   {\n+public:\n+    explicit nsDependentString( const char_type* data );\n+};\n+typedef struct sqlite3_stmt sqlite3_stmt;\n+const void *sqlite3_column_text16(sqlite3_stmt*, int iCol);\n+class nsIVariant { };\n+template <typename DataType> struct variant_storage_traits {\n+    typedef DataType ConstructorType;\n+    typedef DataType StorageType;\n+    static inline StorageType storage_conversion(ConstructorType aData) {\n+        return aData;\n+    }\n+};\n+template <typename DataType> class Variant : public nsIVariant {\n+public:\n+    Variant(typename variant_storage_traits<DataType>::ConstructorType aData)\n+        : mData(variant_storage_traits<DataType>::storage_conversion(aData)) {}\n+    typename variant_storage_traits<DataType>::StorageType mData;\n+};\n+typedef Variant<nsString> TextVariant;\n+class Row {\n+    void initialize(sqlite3_stmt *aStatement);\n+};\n+void Row::initialize(sqlite3_stmt *aStatement)\n+{\n+  nsDependentString str(static_cast<const PRUnichar\n+*>(::sqlite3_column_text16(aStatement, 0)));\n+  new TextVariant(str);\n+}\n+"}, {"sha": "98caddebfba938d85015e68933e858d1917f9a7a", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 28, "deletions": 6, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6938f93f2ec91e5c8f68469512593efba643caef/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6938f93f2ec91e5c8f68469512593efba643caef/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=6938f93f2ec91e5c8f68469512593efba643caef", "patch": "@@ -113,7 +113,7 @@ eni_weights eni_time_weights;\n \n /* Prototypes.  */\n \n-static tree declare_return_variable (copy_body_data *, tree, tree);\n+static tree declare_return_variable (copy_body_data *, tree, tree, basic_block);\n static void remap_block (tree *, copy_body_data *);\n static void copy_bind_expr (tree *, int *, copy_body_data *);\n static tree mark_local_for_remap_r (tree *, int *, void *);\n@@ -817,6 +817,12 @@ remap_gimple_op_r (tree *tp, int *walk_subtrees, void *data)\n \t  tree decl = TREE_OPERAND (*tp, 0);\n \t  tree *n;\n \n+          /* See remap_ssa_name.  */\n+          if (TREE_CODE (decl) == SSA_NAME\n+              && TREE_CODE (SSA_NAME_VAR (decl)) == RESULT_DECL\n+              && id->transform_return_to_modify)\n+            decl = SSA_NAME_VAR (decl);\n+\n \t  n = (tree *) pointer_map_contains (id->decl_map, decl);\n \t  if (n)\n \t    {\n@@ -1235,7 +1241,10 @@ remap_gimple_stmt (gimple stmt, copy_body_data *id)\n \t If RETVAL is just the result decl, the result decl has\n \t already been set (e.g. a recent \"foo (&result_decl, ...)\");\n \t just toss the entire GIMPLE_RETURN.  */\n-      if (retval && TREE_CODE (retval) != RESULT_DECL)\n+      if (retval\n+\t  && (TREE_CODE (retval) != RESULT_DECL\n+\t      && (TREE_CODE (retval) != SSA_NAME\n+\t\t  || TREE_CODE (SSA_NAME_VAR (retval)) != RESULT_DECL)))\n         {\n \t  copy = gimple_build_assign (id->retvar, retval);\n \t  /* id->retvar is already substituted.  Skip it on later remapping.  */\n@@ -2735,7 +2744,8 @@ initialize_inlined_parameters (copy_body_data *id, gimple stmt,\n    as seen by the caller.  */\n \n static tree\n-declare_return_variable (copy_body_data *id, tree return_slot, tree modify_dest)\n+declare_return_variable (copy_body_data *id, tree return_slot, tree modify_dest,\n+\t\t\t basic_block entry_bb)\n {\n   tree callee = id->src_fn;\n   tree caller = id->dst_fn;\n@@ -2878,8 +2888,20 @@ declare_return_variable (copy_body_data *id, tree return_slot, tree modify_dest)\n  done:\n   /* Register the VAR_DECL as the equivalent for the RESULT_DECL; that\n      way, when the RESULT_DECL is encountered, it will be\n-     automatically replaced by the VAR_DECL.  */\n-  insert_decl_map (id, result, var);\n+     automatically replaced by the VAR_DECL.  \n+\n+     When returning by reference, ensure that RESULT_DECL remaps to\n+     gimple_val.  */\n+  if (DECL_BY_REFERENCE (result)\n+      && !is_gimple_val (var))\n+    {\n+      tree temp = create_tmp_var (TREE_TYPE (result), \"retvalptr\");\n+      insert_decl_map (id, result, temp);\n+      temp = remap_ssa_name (gimple_default_def (id->src_cfun, result), id);\n+      insert_init_stmt (id, entry_bb, gimple_build_assign (temp, var));\n+    }\n+  else\n+    insert_decl_map (id, result, var);\n \n   /* Remember this so we can ignore it in remap_decls.  */\n   id->retvar = var;\n@@ -3983,7 +4005,7 @@ expand_call_inline (basic_block bb, gimple stmt, copy_body_data *id)\n     }\n \n   /* Declare the return variable for the function.  */\n-  use_retvar = declare_return_variable (id, return_slot, modify_dest);\n+  use_retvar = declare_return_variable (id, return_slot, modify_dest, bb);\n \n   /* Add local vars in this inlined callee to caller.  */\n   add_local_variables (id->src_cfun, cfun, id, true);"}, {"sha": "5223c27a184af1099b1a5e58dc971c7a80e8625b", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6938f93f2ec91e5c8f68469512593efba643caef/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6938f93f2ec91e5c8f68469512593efba643caef/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=6938f93f2ec91e5c8f68469512593efba643caef", "patch": "@@ -300,7 +300,8 @@ get_default_value (tree var)\n \t before being initialized.  If VAR is a local variable, we\n \t can assume initially that it is UNDEFINED, otherwise we must\n \t consider it VARYING.  */\n-      if (is_gimple_reg (sym) && TREE_CODE (sym) != PARM_DECL)\n+      if (is_gimple_reg (sym)\n+\t  && TREE_CODE (sym) == VAR_DECL)\n \tval.lattice_val = UNDEFINED;\n       else\n \tval.lattice_val = VARYING;"}, {"sha": "48a42bd3fceb548b98a977c167c7ee2eca77047c", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6938f93f2ec91e5c8f68469512593efba643caef/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6938f93f2ec91e5c8f68469512593efba643caef/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=6938f93f2ec91e5c8f68469512593efba643caef", "patch": "@@ -2836,7 +2836,8 @@ get_constraint_for_ssa_var (tree t, VEC(ce_s, heap) **results, bool address_p)\n   /* For parameters, get at the points-to set for the actual parm\n      decl.  */\n   if (TREE_CODE (t) == SSA_NAME\n-      && TREE_CODE (SSA_NAME_VAR (t)) == PARM_DECL\n+      && (TREE_CODE (SSA_NAME_VAR (t)) == PARM_DECL\n+\t  || TREE_CODE (SSA_NAME_VAR (t)) == RESULT_DECL)\n       && SSA_NAME_IS_DEFAULT_DEF (t))\n     {\n       get_constraint_for_ssa_var (SSA_NAME_VAR (t), results, address_p);\n@@ -3982,7 +3983,8 @@ get_fi_for_callee (gimple call)\n   if (TREE_CODE (decl) == SSA_NAME)\n     {\n       if (TREE_CODE (decl) == SSA_NAME\n-\t  && TREE_CODE (SSA_NAME_VAR (decl)) == PARM_DECL\n+\t  && (TREE_CODE (SSA_NAME_VAR (decl)) == PARM_DECL\n+\t      || TREE_CODE (SSA_NAME_VAR (decl)) == RESULT_DECL)\n \t  && SSA_NAME_IS_DEFAULT_DEF (decl))\n \tdecl = SSA_NAME_VAR (decl);\n       return get_vi_for_tree (decl);\n@@ -5751,7 +5753,8 @@ find_what_p_points_to (tree p)\n   /* For parameters, get at the points-to set for the actual parm\n      decl.  */\n   if (TREE_CODE (p) == SSA_NAME\n-      && TREE_CODE (SSA_NAME_VAR (p)) == PARM_DECL\n+      && (TREE_CODE (SSA_NAME_VAR (p)) == PARM_DECL\n+\t  || TREE_CODE (SSA_NAME_VAR (p)) == RESULT_DECL)\n       && SSA_NAME_IS_DEFAULT_DEF (p))\n     lookup_p = SSA_NAME_VAR (p);\n "}, {"sha": "51f3bc9c7153c8b76aba31da320e95e82c2874f7", "filename": "gcc/tree-ssa-uninit.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6938f93f2ec91e5c8f68469512593efba643caef/gcc%2Ftree-ssa-uninit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6938f93f2ec91e5c8f68469512593efba643caef/gcc%2Ftree-ssa-uninit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-uninit.c?ref=6938f93f2ec91e5c8f68469512593efba643caef", "patch": "@@ -92,6 +92,12 @@ ssa_undefined_value_p (tree t)\n   if (TREE_CODE (var) == PARM_DECL)\n     return false;\n \n+  /* When returning by reference the return address is actually a hidden\n+     parameter.  */\n+  if (TREE_CODE (SSA_NAME_VAR (t)) == RESULT_DECL\n+      && DECL_BY_REFERENCE (SSA_NAME_VAR (t)))\n+    return false;\n+\n   /* Hard register variables get their initial value from the ether.  */\n   if (TREE_CODE (var) == VAR_DECL && DECL_HARD_REGISTER (var))\n     return false;"}, {"sha": "f3a7a103ea9c905878df540cb3d209f0da5d6c18", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6938f93f2ec91e5c8f68469512593efba643caef/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6938f93f2ec91e5c8f68469512593efba643caef/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=6938f93f2ec91e5c8f68469512593efba643caef", "patch": "@@ -638,6 +638,13 @@ verify_def (basic_block bb, basic_block *definition_block, tree ssa_name,\n   if (verify_ssa_name (ssa_name, is_virtual))\n     goto err;\n \n+  if (TREE_CODE (SSA_NAME_VAR (ssa_name)) == RESULT_DECL\n+      && DECL_BY_REFERENCE (SSA_NAME_VAR (ssa_name)))\n+    {\n+      error (\"RESULT_DECL should be read only when DECL_BY_REFERENCE is set.\");\n+      goto err;\n+    }\n+\n   if (definition_block[SSA_NAME_VERSION (ssa_name)])\n     {\n       error (\"SSA_NAME created in two different blocks %i and %i\","}, {"sha": "dda9287a190c71e5b1d0bcfed4c6405a97cd2f13", "filename": "gcc/tree.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6938f93f2ec91e5c8f68469512593efba643caef/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6938f93f2ec91e5c8f68469512593efba643caef/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=6938f93f2ec91e5c8f68469512593efba643caef", "patch": "@@ -9742,6 +9742,7 @@ needs_to_live_in_memory (const_tree t)\n   return (TREE_ADDRESSABLE (t)\n \t  || is_global_var (t)\n \t  || (TREE_CODE (t) == RESULT_DECL\n+\t      && !DECL_BY_REFERENCE (t)\n \t      && aggregate_value_p (t, current_function_decl)));\n }\n "}]}