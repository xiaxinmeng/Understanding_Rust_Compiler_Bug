{"sha": "b3090f174b35f764f609695e6d33f8c6765e24ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjMwOTBmMTc0YjM1Zjc2NGY2MDk2OTVlNmQzM2Y4YzY3NjVlMjRhYg==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-06-14T15:21:57Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-06-14T15:31:46Z"}, "message": "Add comment about modules and paths\n\nIn order to support modules the path expression will fail here since a\nmodule is not a value and does not have a TyTy type, so this is ok to\ncontinue the rest of resolution so long as there are more segments.\n\nAddresses: #432", "tree": {"sha": "1a957134b88b05baa3ae29c6545cfbb38cd5df8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a957134b88b05baa3ae29c6545cfbb38cd5df8a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b3090f174b35f764f609695e6d33f8c6765e24ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3090f174b35f764f609695e6d33f8c6765e24ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3090f174b35f764f609695e6d33f8c6765e24ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3090f174b35f764f609695e6d33f8c6765e24ab/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de454a17cf5f9cbd7e4af895174c82e4a6890c36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de454a17cf5f9cbd7e4af895174c82e4a6890c36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de454a17cf5f9cbd7e4af895174c82e4a6890c36"}], "stats": {"total": 23, "additions": 22, "deletions": 1}, "files": [{"sha": "578753194a87b0dea8add2bea6fd60796bb5fcc8", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3090f174b35f764f609695e6d33f8c6765e24ab/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3090f174b35f764f609695e6d33f8c6765e24ab/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=b3090f174b35f764f609695e6d33f8c6765e24ab", "patch": "@@ -1097,8 +1097,10 @@ class TypeCheckExpr : public TypeCheckBase\n   {\n     TyTy::BaseType *root_tyty = nullptr;\n     *offset = 0;\n-    for (auto &seg : expr.get_segments ())\n+    for (size_t i = 0; i < expr.get_num_segments (); i++)\n       {\n+\tHIR::PathExprSegment &seg = expr.get_segments ().at (i);\n+\tbool have_more_segments = i < expr.get_num_segments ();\n \tbool is_root = *offset == 0;\n \tNodeId ast_node_id = seg.get_mappings ().get_nodeid ();\n \n@@ -1147,6 +1149,25 @@ class TypeCheckExpr : public TypeCheckBase\n \t    return root_tyty;\n \t  }\n \n+\t// FIXME\n+\t// modules are not going to have an explicit TyTy.In this case we\n+\t// can probably do some kind of check. By looking up if the HirId ref\n+\t// node is a module and continue. If the path expression is single\n+\t// segment of module we can error with expected value but found module\n+\t// or something.\n+\t//\n+\t// Something like this\n+\t//\n+\t// bool seg_is_module = mappings->lookup_module (ref);\n+\t// if (seg_is_module)\n+\t//   {\n+\t//     if (have_more_segments)\n+\t//       continue;\n+\t//\n+\t//     rust_error_at (seg.get_locus (), \"expected value\");\n+\t//     return new TyTy::ErrorType (expr.get_mappings ().get_hirid ());\n+\t//   }\n+\n \tTyTy::BaseType *lookup = nullptr;\n \tif (!context->lookup_type (ref, &lookup))\n \t  {"}]}