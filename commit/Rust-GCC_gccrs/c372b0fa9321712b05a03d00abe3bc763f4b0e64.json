{"sha": "c372b0fa9321712b05a03d00abe3bc763f4b0e64", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzM3MmIwZmE5MzIxNzEyYjA1YTAzZDAwYWJlM2JjNzYzZjRiMGU2NA==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.co.uk", "date": "2002-07-26T16:23:07Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2002-07-26T16:23:07Z"}, "message": "c-common.h (RID_AND, [...]): Remove.\n\n\t* c-common.h (RID_AND, RID_AND_EQ, RID_NOT, RID_NOT_EQ,\n\tRID_OR, RID_OR_EQ, RID_XOR, RID_XOR_EQ, RID_BITAND, RID_BITOR,\n\tRID_COMPL): Remove.\n\t* c-parse.in (rid_to_yy): Similarly.\ncp:\n\t* cp-tree.h (flag_operator_names): Remove.\n\t* decl2.c (flag_operator_names): Remove.\n\t(lang_f_options): Remove operator-names.\n\t* lex.c (D_OPNAME): Remove.\n\t(reswords): Remove operator names.\n\t(rid_to_yy): Remove operator names.\n\t(init_reswords): No need to handle D_OPNAME.\n\t* spew.c (read_process_identifier): There are no operator\n\tnames.\n\nFrom-SVN: r55777", "tree": {"sha": "982f30a0b8e6cf553bcaa41866622680f8adad6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/982f30a0b8e6cf553bcaa41866622680f8adad6e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c372b0fa9321712b05a03d00abe3bc763f4b0e64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c372b0fa9321712b05a03d00abe3bc763f4b0e64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c372b0fa9321712b05a03d00abe3bc763f4b0e64", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c372b0fa9321712b05a03d00abe3bc763f4b0e64/comments", "author": {"login": "neilb-xx", "id": 160762, "node_id": "MDQ6VXNlcjE2MDc2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/160762?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neilb-xx", "html_url": "https://github.com/neilb-xx", "followers_url": "https://api.github.com/users/neilb-xx/followers", "following_url": "https://api.github.com/users/neilb-xx/following{/other_user}", "gists_url": "https://api.github.com/users/neilb-xx/gists{/gist_id}", "starred_url": "https://api.github.com/users/neilb-xx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neilb-xx/subscriptions", "organizations_url": "https://api.github.com/users/neilb-xx/orgs", "repos_url": "https://api.github.com/users/neilb-xx/repos", "events_url": "https://api.github.com/users/neilb-xx/events{/privacy}", "received_events_url": "https://api.github.com/users/neilb-xx/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "558ee214f31ef39421944b6c78cf3218b61c1337", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/558ee214f31ef39421944b6c78cf3218b61c1337", "html_url": "https://github.com/Rust-GCC/gccrs/commit/558ee214f31ef39421944b6c78cf3218b61c1337"}], "stats": {"total": 93, "additions": 22, "deletions": 71}, "files": [{"sha": "21f149e4d15f54597b3df0440c93a227cffe0259", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c372b0fa9321712b05a03d00abe3bc763f4b0e64/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c372b0fa9321712b05a03d00abe3bc763f4b0e64/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c372b0fa9321712b05a03d00abe3bc763f4b0e64", "patch": "@@ -1,3 +1,10 @@\n+2002-07-26  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* c-common.h (RID_AND, RID_AND_EQ, RID_NOT, RID_NOT_EQ,\n+\tRID_OR, RID_OR_EQ, RID_XOR, RID_XOR_EQ, RID_BITAND, RID_BITOR,\n+\tRID_COMPL): Remove.\n+\t* c-parse.in (rid_to_yy): Similarly.\n+\n 2002-07-26  Jason Merrill  <jason@redhat.com>\n \n \t* c-dump.c: Resurrect."}, {"sha": "f7191fa6c7f2a3c357496004f3d5a7ec13ce19a0", "filename": "gcc/c-common.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c372b0fa9321712b05a03d00abe3bc763f4b0e64/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c372b0fa9321712b05a03d00abe3bc763f4b0e64/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=c372b0fa9321712b05a03d00abe3bc763f4b0e64", "patch": "@@ -93,11 +93,6 @@ enum rid\n   /* casts */\n   RID_CONSTCAST, RID_DYNCAST, RID_REINTCAST, RID_STATCAST,\n \n-  /* alternate spellings */\n-  RID_AND, RID_AND_EQ, RID_NOT, RID_NOT_EQ,\n-  RID_OR,  RID_OR_EQ,  RID_XOR, RID_XOR_EQ,\n-  RID_BITAND, RID_BITOR, RID_COMPL,\n-\n   /* Objective C */\n   RID_ID,          RID_AT_ENCODE,    RID_AT_END,\n   RID_AT_CLASS,    RID_AT_ALIAS,     RID_AT_DEFS,"}, {"sha": "b726f5a1bd38cb85209b9d0ea1000a012abba7bd", "filename": "gcc/c-parse.in", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c372b0fa9321712b05a03d00abe3bc763f4b0e64/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c372b0fa9321712b05a03d00abe3bc763f4b0e64/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=c372b0fa9321712b05a03d00abe3bc763f4b0e64", "patch": "@@ -3522,19 +3522,6 @@ static const short rid_to_yy[RID_MAX] =\n   /* RID_REINTCAST */\t0,\n   /* RID_STATCAST */\t0,\n \n-  /* alternate spellings */\n-  /* RID_AND */\t\t0,\n-  /* RID_AND_EQ */\t0,\n-  /* RID_NOT */\t\t0,\n-  /* RID_NOT_EQ */\t0,\n-  /* RID_OR */\t\t0,\n-  /* RID_OR_EQ */\t0,\n-  /* RID_XOR */\t\t0,\n-  /* RID_XOR_EQ */\t0,\n-  /* RID_BITAND */\t0,\n-  /* RID_BITOR */\t0,\n-  /* RID_COMPL */\t0,\n-\n   /* Objective C */\n   /* RID_ID */\t\t\tOBJECTNAME,\n   /* RID_AT_ENCODE */\t\tENCODE,"}, {"sha": "8fd963b3eadd93314e28b67a19a0276a638b4a7b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c372b0fa9321712b05a03d00abe3bc763f4b0e64/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c372b0fa9321712b05a03d00abe3bc763f4b0e64/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c372b0fa9321712b05a03d00abe3bc763f4b0e64", "patch": "@@ -1,3 +1,15 @@\n+2002-07-26  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* cp-tree.h (flag_operator_names): Remove.\n+\t* decl2.c (flag_operator_names): Remove.\n+\t(lang_f_options): Remove operator-names.\n+\t* lex.c (D_OPNAME): Remove.\n+\t(reswords): Remove operator names.\n+\t(rid_to_yy): Remove operator names.\n+\t(init_reswords): No need to handle D_OPNAME.\n+\t* spew.c (read_process_identifier): There are no operator\n+\tnames.\n+\n 2002-07-26  Jason Merrill  <jason@redhat.com>\n \n \t* dump.c (cp_dump_tree): Call c_dump_tree."}, {"sha": "6a2bda39dab426b0a041097df51b77fe5862d297", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c372b0fa9321712b05a03d00abe3bc763f4b0e64/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c372b0fa9321712b05a03d00abe3bc763f4b0e64/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=c372b0fa9321712b05a03d00abe3bc763f4b0e64", "patch": "@@ -945,10 +945,6 @@ extern int flag_no_asm;\n \n extern int flag_no_gnu_keywords;\n \n-/* Nonzero means recognize the named operators from C++98.  */\n-\n-extern int flag_operator_names;\n-\n /* For environments where you can use GNU binutils (as, ld in particular).  */\n \n extern int flag_gnu_binutils;"}, {"sha": "08fd777db39a7ac4f48d29320e55beb44c38c029", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c372b0fa9321712b05a03d00abe3bc763f4b0e64/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c372b0fa9321712b05a03d00abe3bc763f4b0e64/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=c372b0fa9321712b05a03d00abe3bc763f4b0e64", "patch": "@@ -331,10 +331,6 @@ int flag_conserve_space;\n \n int flag_access_control = 1;\n \n-/* Nonzero if we want to understand the operator names, i.e. 'bitand'.  */\n-\n-int flag_operator_names = 1;\n-\n /* Nonzero if we want to check the return value of new and avoid calling\n    constructors if it is a null pointer.  */\n \n@@ -420,7 +416,6 @@ lang_f_options[] =\n   {\"implicit-templates\", &flag_implicit_templates, 1},\n   {\"ms-extensions\", &flag_ms_extensions, 1},\n   {\"nonansi-builtins\", &flag_no_nonansi_builtin, 0},\n-  {\"operator-names\", &flag_operator_names, 1},\n   {\"optional-diags\", &flag_optional_diags, 1},\n   {\"permissive\", &flag_permissive, 1},\n   {\"repo\", &flag_use_repository, 1},"}, {"sha": "e6fad8a37dfa2d9ab9ea70dad1c8f9143038faae", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 1, "deletions": 27, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c372b0fa9321712b05a03d00abe3bc763f4b0e64/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c372b0fa9321712b05a03d00abe3bc763f4b0e64/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=c372b0fa9321712b05a03d00abe3bc763f4b0e64", "patch": "@@ -328,7 +328,6 @@ struct resword\n    _true_.  */\n #define D_EXT\t\t0x01\t/* GCC extension */\n #define D_ASM\t\t0x02\t/* in C99, but has a switch to turn it off */\n-#define D_OPNAME\t0x04\t/* operator names */\n \n CONSTRAINT(ridbits_fit, RID_LAST_MODIFIER < sizeof(unsigned long) * CHAR_BIT);\n \n@@ -368,18 +367,13 @@ static const struct resword reswords[] =\n   { \"__volatile\",\tRID_VOLATILE,\t0 },\n   { \"__volatile__\",\tRID_VOLATILE,\t0 },\n   { \"asm\",\t\tRID_ASM,\tD_ASM },\n-  { \"and\",\t\tRID_AND,\tD_OPNAME },\n-  { \"and_eq\",\t\tRID_AND_EQ,\tD_OPNAME },\n   { \"auto\",\t\tRID_AUTO,\t0 },\n-  { \"bitand\",\t\tRID_BITAND,\tD_OPNAME },\n-  { \"bitor\",\t\tRID_BITOR,\tD_OPNAME },\n   { \"bool\",\t\tRID_BOOL,\t0 },\n   { \"break\",\t\tRID_BREAK,\t0 },\n   { \"case\",\t\tRID_CASE,\t0 },\n   { \"catch\",\t\tRID_CATCH,\t0 },\n   { \"char\",\t\tRID_CHAR,\t0 },\n   { \"class\",\t\tRID_CLASS,\t0 },\n-  { \"compl\",\t\tRID_COMPL,\tD_OPNAME },\n   { \"const\",\t\tRID_CONST,\t0 },\n   { \"const_cast\",\tRID_CONSTCAST,\t0 },\n   { \"continue\",\t\tRID_CONTINUE,\t0 },\n@@ -405,11 +399,7 @@ static const struct resword reswords[] =\n   { \"mutable\",\t\tRID_MUTABLE,\t0 },\n   { \"namespace\",\tRID_NAMESPACE,\t0 },\n   { \"new\",\t\tRID_NEW,\t0 },\n-  { \"not\",\t\tRID_NOT,\tD_OPNAME },\n-  { \"not_eq\",\t\tRID_NOT_EQ,\tD_OPNAME },\n   { \"operator\",\t\tRID_OPERATOR,\t0 },\n-  { \"or\",\t\tRID_OR,\t\tD_OPNAME },\n-  { \"or_eq\",\t\tRID_OR_EQ,\tD_OPNAME },\n   { \"private\",\t\tRID_PRIVATE,\t0 },\n   { \"protected\",\tRID_PROTECTED,\t0 },\n   { \"public\",\t\tRID_PUBLIC,\t0 },\n@@ -440,8 +430,6 @@ static const struct resword reswords[] =\n   { \"volatile\",\t\tRID_VOLATILE,\t0 },\n   { \"wchar_t\",          RID_WCHAR,\t0 },\n   { \"while\",\t\tRID_WHILE,\t0 },\n-  { \"xor\",\t\tRID_XOR,\tD_OPNAME },\n-  { \"xor_eq\",\t\tRID_XOR_EQ,\tD_OPNAME },\n \n };\n \n@@ -557,19 +545,6 @@ const short rid_to_yy[RID_MAX] =\n   /* RID_REINTCAST */\tREINTERPRET_CAST,\n   /* RID_STATCAST */\tSTATIC_CAST,\n \n-  /* alternate spellings */\n-  /* RID_AND */\t\tANDAND,\n-  /* RID_AND_EQ */\tASSIGN,\n-  /* RID_NOT */\t\t'!',\n-  /* RID_NOT_EQ */\tEQCOMPARE,\n-  /* RID_OR */\t\tOROR,\n-  /* RID_OR_EQ */\tASSIGN,\n-  /* RID_XOR */\t\t'^',\n-  /* RID_XOR_EQ */\tASSIGN,\n-  /* RID_BITAND */\t'&',\n-  /* RID_BITOR */\t'|',\n-  /* RID_COMPL */\t'~',\n-\n   /* Objective C */\n   /* RID_ID */\t\t\t0,\n   /* RID_AT_ENCODE */\t\t0,\n@@ -591,8 +566,7 @@ init_reswords ()\n {\n   unsigned int i;\n   tree id;\n-  int mask = ((flag_operator_names ? 0 : D_OPNAME)\n-\t      | (flag_no_asm ? D_ASM : 0)\n+  int mask = ((flag_no_asm ? D_ASM : 0)\n \t      | (flag_no_gnu_keywords ? D_EXT : 0));\n \n   /* It is not necessary to register ridpointers as a GC root, because"}, {"sha": "2c34192db2fe8f74cfd820e5cb987af8c45d708f", "filename": "gcc/cp/spew.c", "status": "modified", "additions": 2, "deletions": 17, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c372b0fa9321712b05a03d00abe3bc763f4b0e64/gcc%2Fcp%2Fspew.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c372b0fa9321712b05a03d00abe3bc763f4b0e64/gcc%2Fcp%2Fspew.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fspew.c?ref=c372b0fa9321712b05a03d00abe3bc763f4b0e64", "patch": "@@ -207,23 +207,8 @@ read_process_identifier (pyylval)\n \n   if (C_IS_RESERVED_WORD (id))\n     {\n-      /* Possibly replace the IDENTIFIER_NODE with a magic cookie.\n-\t Can't put yylval.code numbers in ridpointers[].  Bleah.  */\n-\n-      switch (C_RID_CODE (id))\n-\t{\n-\tcase RID_BITAND: pyylval->code = BIT_AND_EXPR;\treturn '&';\n-\tcase RID_AND_EQ: pyylval->code = BIT_AND_EXPR;\treturn ASSIGN;\n-\tcase RID_BITOR:\t pyylval->code = BIT_IOR_EXPR;\treturn '|';\n-\tcase RID_OR_EQ:\t pyylval->code = BIT_IOR_EXPR;\treturn ASSIGN;\n-\tcase RID_XOR:\t pyylval->code = BIT_XOR_EXPR;\treturn '^';\n-\tcase RID_XOR_EQ: pyylval->code = BIT_XOR_EXPR;\treturn ASSIGN;\n-\tcase RID_NOT_EQ: pyylval->code = NE_EXPR;\treturn EQCOMPARE;\n-\n-\tdefault:\n-\t  pyylval->ttype = ridpointers[C_RID_CODE (id)];\n-\t  return C_RID_YYCODE (id);\n-\t}\n+      pyylval->ttype = ridpointers[C_RID_CODE (id)];\n+      return C_RID_YYCODE (id);\n     }\n \n   /* Make sure that user does not collide with our internal naming"}]}