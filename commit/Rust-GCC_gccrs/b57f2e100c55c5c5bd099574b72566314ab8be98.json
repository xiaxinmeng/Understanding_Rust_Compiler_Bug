{"sha": "b57f2e100c55c5c5bd099574b72566314ab8be98", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjU3ZjJlMTAwYzU1YzVjNWJkMDk5NTc0YjcyNTY2MzE0YWI4YmU5OA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-02-24T13:55:06Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-02-24T13:55:06Z"}, "message": "df.c, [...]: Replace df_analyse with df_analyze.\n\n\t* df.c, df.h, ra-build.c, ra-rewrite.c, ra.c, web.c: Replace\n\tdf_analyse with df_analyze.\n\nFrom-SVN: r78363", "tree": {"sha": "4d1f65c899a2c227f28dcb7530d4ae29a998ce7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d1f65c899a2c227f28dcb7530d4ae29a998ce7b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b57f2e100c55c5c5bd099574b72566314ab8be98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b57f2e100c55c5c5bd099574b72566314ab8be98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b57f2e100c55c5c5bd099574b72566314ab8be98", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b57f2e100c55c5c5bd099574b72566314ab8be98/comments", "author": null, "committer": null, "parents": [{"sha": "cb7c3c3f1ade49849a9facbedbb108f94d941bf4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb7c3c3f1ade49849a9facbedbb108f94d941bf4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb7c3c3f1ade49849a9facbedbb108f94d941bf4"}], "stats": {"total": 41, "additions": 23, "deletions": 18}, "files": [{"sha": "97217fc074acac1b62838cfee32ccd4b7b441748", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b57f2e100c55c5c5bd099574b72566314ab8be98/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b57f2e100c55c5c5bd099574b72566314ab8be98/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b57f2e100c55c5c5bd099574b72566314ab8be98", "patch": "@@ -1,3 +1,8 @@\n+2004-02-24  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* df.c, df.h, ra-build.c, ra-rewrite.c, ra.c, web.c: Replace\n+\tdf_analyse with df_analyze.\n+\n 2004-02-24  Alan Modra  <amodra@bigpond.net.au>\n \n \t* gcse.c (delete_null_pointer_checks_1): Set stop_insn to end, not"}, {"sha": "79dfa09983027ba3dde12afb045174364445f3d7", "filename": "gcc/df.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b57f2e100c55c5c5bd099574b72566314ab8be98/gcc%2Fdf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b57f2e100c55c5c5bd099574b72566314ab8be98/gcc%2Fdf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf.c?ref=b57f2e100c55c5c5bd099574b72566314ab8be98", "patch": "@@ -46,7 +46,7 @@ Here's an example of using the dataflow routines.\n \n       df = df_init ();\n \n-      df_analyse (df, 0, DF_ALL);\n+      df_analyze (df, 0, DF_ALL);\n \n       df_dump (df, DF_ALL, stderr);\n \n@@ -58,7 +58,7 @@ passed to all the dataflow routines.  df_finish destroys this\n object and frees up any allocated memory.   DF_ALL says to analyse\n everything.\n \n-df_analyse performs the following:\n+df_analyze performs the following:\n \n 1. Records defs and uses by scanning the insns in each basic block\n    or by scanning the insns queued by df_insn_modify.\n@@ -83,15 +83,15 @@ deleted or created insn.  If the dataflow information requires\n updating then all the changed, new, or deleted insns needs to be\n marked with df_insn_modify (or df_insns_modify) either directly or\n indirectly (say through calling df_insn_delete).  df_insn_modify\n-marks all the modified insns to get processed the next time df_analyse\n+marks all the modified insns to get processed the next time df_analyze\n  is called.\n \n Beware that tinkering with insns may invalidate the dataflow information.\n The philosophy behind these routines is that once the dataflow\n information has been gathered, the user should store what they require\n before they tinker with any insn.  Once a reg is replaced, for example,\n then the reg-def/reg-use chains will point to the wrong place.  Once a\n-whole lot of changes have been made, df_analyse can be called again\n+whole lot of changes have been made, df_analyze can be called again\n to update the dataflow information.  Currently, this is not very smart\n with regard to propagating changes to the dataflow so it should not\n be called very often.\n@@ -128,7 +128,7 @@ When shadowing loop mems we create new uses and defs for new pseudos\n so we do not affect the existing dataflow information.\n \n My current strategy is to queue up all modified, created, or deleted\n-insns so when df_analyse is called we can easily determine all the new\n+insns so when df_analyze is called we can easily determine all the new\n or deleted refs.  Currently the global dataflow information is\n recomputed from scratch but this could be propagated more efficiently.\n \n@@ -151,7 +151,7 @@ Similarly, should the first entry in the use list be the last use\n \n Often the whole CFG does not need to be analyzed, for example,\n when optimizing a loop, only certain registers are of interest.\n-Perhaps there should be a bitmap argument to df_analyse to specify\n+Perhaps there should be a bitmap argument to df_analyze to specify\n which registers should be analyzed?\n \n \n@@ -261,7 +261,7 @@ static int df_refs_queue (struct df *);\n static int df_refs_process (struct df *);\n static int df_bb_refs_update (struct df *, basic_block);\n static int df_refs_update (struct df *);\n-static void df_analyse_1 (struct df *, bitmap, int, int);\n+static void df_analyze_1 (struct df *, bitmap, int, int);\n \n static void df_insns_modify (struct df *, basic_block, rtx, rtx);\n static int df_rtx_mem_replace (rtx *, void *);\n@@ -1827,7 +1827,7 @@ df_luids_set (struct df *df, bitmap blocks)\n /* Perform dataflow analysis using existing DF structure for blocks\n    within BLOCKS.  If BLOCKS is zero, use all basic blocks in the CFG.  */\n static void\n-df_analyse_1 (struct df *df, bitmap blocks, int flags, int update)\n+df_analyze_1 (struct df *df, bitmap blocks, int flags, int update)\n {\n   int aflags;\n   int dflags;\n@@ -2169,7 +2169,7 @@ df_modified_p (struct df *df, bitmap blocks)\n    BLOCKS, or for the whole CFG if BLOCKS is zero, or just for the\n    modified blocks if BLOCKS is -1.  */\n int\n-df_analyse (struct df *df, bitmap blocks, int flags)\n+df_analyze (struct df *df, bitmap blocks, int flags)\n {\n   int update;\n \n@@ -2190,7 +2190,7 @@ df_analyse (struct df *df, bitmap blocks, int flags)\n \t    }\n \t  /* Allocate and initialize data structures.  */\n \t  df_alloc (df, max_reg_num ());\n-\t  df_analyse_1 (df, 0, flags, 0);\n+\t  df_analyze_1 (df, 0, flags, 0);\n \t  update = 1;\n \t}\n       else\n@@ -2201,7 +2201,7 @@ df_analyse (struct df *df, bitmap blocks, int flags)\n \t  if (! df->n_bbs)\n \t    abort ();\n \n-\t  df_analyse_1 (df, blocks, flags, 1);\n+\t  df_analyze_1 (df, blocks, flags, 1);\n \t  bitmap_zero (df->bbs_modified);\n \t  bitmap_zero (df->insns_modified);\n \t}\n@@ -2400,7 +2400,7 @@ df_insn_mem_replace (struct df *df, basic_block bb, rtx insn, rtx mem, rtx reg)\n      in INSN.  REG should be a new pseudo so it won't affect the\n      dataflow information that we currently have.  We should add\n      the new uses and defs to INSN and then recreate the chains\n-     when df_analyse is called.  */\n+     when df_analyze is called.  */\n   return args.modified;\n }\n \n@@ -2660,7 +2660,7 @@ df_insn_move_before (struct df *df, basic_block bb, rtx insn, basic_block before\n      are likely to be increased.  */\n \n   /* ???? Perhaps all the insns moved should be stored on a list\n-     which df_analyse removes when it recalculates data flow.  */\n+     which df_analyze removes when it recalculates data flow.  */\n \n   return emit_insn_before (insn, before_insn);\n }"}, {"sha": "14aea52a766c305c74de16431f5ee055b284959b", "filename": "gcc/df.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b57f2e100c55c5c5bd099574b72566314ab8be98/gcc%2Fdf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b57f2e100c55c5c5bd099574b72566314ab8be98/gcc%2Fdf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf.h?ref=b57f2e100c55c5c5bd099574b72566314ab8be98", "patch": "@@ -233,7 +233,7 @@ struct df_map\n \n extern struct df *df_init (void);\n \n-extern int df_analyse (struct df *, bitmap, int);\n+extern int df_analyze (struct df *, bitmap, int);\n \n extern void df_finish (struct df *);\n "}, {"sha": "3e2da55df04c9d33cddaf08c1c7dffcfbc1ee036", "filename": "gcc/ra-build.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b57f2e100c55c5c5bd099574b72566314ab8be98/gcc%2Fra-build.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b57f2e100c55c5c5bd099574b72566314ab8be98/gcc%2Fra-build.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fra-build.c?ref=b57f2e100c55c5c5bd099574b72566314ab8be98", "patch": "@@ -1402,7 +1402,7 @@ init_web_parts (struct df *df)\n \t    num_webs++;\n \t}\n       else\n-\t/* The last iteration might have left .ref set, while df_analyse()\n+\t/* The last iteration might have left .ref set, while df_analyze()\n \t   removed that ref (due to a removed copy insn) from the df->defs[]\n \t   array.  As we don't check for that in realloc_web_parts()\n \t   we do that here.  */"}, {"sha": "b0fed6cd194d706a43455f81befbe7dfbcfe29c6", "filename": "gcc/ra-rewrite.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b57f2e100c55c5c5bd099574b72566314ab8be98/gcc%2Fra-rewrite.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b57f2e100c55c5c5bd099574b72566314ab8be98/gcc%2Fra-rewrite.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fra-rewrite.c?ref=b57f2e100c55c5c5bd099574b72566314ab8be98", "patch": "@@ -1513,7 +1513,7 @@ detect_web_parts_to_rebuild (void)\n      And because we sometimes delete insn referring to hardregs (when\n      they became useless because they setup a rematerializable pseudo, which\n      then was rematerialized), some of those uses will go away with the next\n-     df_analyse().  This means we even _must_ delete those uses from\n+     df_analyze().  This means we even _must_ delete those uses from\n      the live_at_end[] bitmaps.  For simplicity we simply delete\n      all of them.  */\n   for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)"}, {"sha": "386541d3fdd905d51a36f38de9dea8ae022221cc", "filename": "gcc/ra.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b57f2e100c55c5c5bd099574b72566314ab8be98/gcc%2Fra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b57f2e100c55c5c5bd099574b72566314ab8be98/gcc%2Fra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fra.c?ref=b57f2e100c55c5c5bd099574b72566314ab8be98", "patch": "@@ -752,7 +752,7 @@ reg_alloc (void)\n       /* First collect all the register refs and put them into\n \t chains per insn, and per regno.  In later passes only update\n          that info from the new and modified insns.  */\n-      df_analyse (df, (ra_pass == 1) ? 0 : (bitmap) -1,\n+      df_analyze (df, (ra_pass == 1) ? 0 : (bitmap) -1,\n \t\t  DF_HARD_REGS | DF_RD_CHAIN | DF_RU_CHAIN | DF_FOR_REGALLOC);\n \n       if ((debug_new_regalloc & DUMP_DF) != 0)"}, {"sha": "d20bcfbdfeddebfe64d97412e673b6eafd97b81a", "filename": "gcc/web.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b57f2e100c55c5c5bd099574b72566314ab8be98/gcc%2Fweb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b57f2e100c55c5c5bd099574b72566314ab8be98/gcc%2Fweb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fweb.c?ref=b57f2e100c55c5c5bd099574b72566314ab8be98", "patch": "@@ -265,7 +265,7 @@ web_main (void)\n   rtx insn;\n \n   df = df_init ();\n-  df_analyse (df, 0, DF_UD_CHAIN | DF_EQUIV_NOTES);\n+  df_analyze (df, 0, DF_UD_CHAIN | DF_EQUIV_NOTES);\n \n   def_entry =\n     (struct web_entry *) xcalloc (df->n_defs, sizeof (struct web_entry));"}]}