{"sha": "94f5a8f0d4910be2d861f7a9699e93efd609d042", "node_id": "C_kwDOANBUbNoAKDk0ZjVhOGYwZDQ5MTBiZTJkODYxZjdhOTY5OWU5M2VmZDYwOWQwNDI", "commit": {"author": {"name": "Maciej W. Rozycki", "email": "macro@embecosm.com", "date": "2022-07-28T13:04:33Z"}, "committer": {"name": "Maciej W. Rozycki", "email": "macro@embecosm.com", "date": "2022-07-28T13:04:33Z"}, "message": "RISC-V: Split unordered FP comparisons into individual RTL insns\n\nWe have unordered FP comparisons implemented as RTL insns that produce\nmultiple machine instructions.  Such RTL insns are hard to match with a\nprocessor pipeline description and additionally there is a redundant\nSNEZ instruction produced on the result of these comparisons even though\nthe FLT.fmt and FLE.fmt machine instructions already produce either 0 or\n1, e.g.:\n\nlong\nflt (double x, double y)\n{\n  return __builtin_isless (x, y);\n}\n\nwith `-O2 -fno-finite-math-only -ftrapping-math -fno-signaling-nans'\ngets compiled to:\n\n\t.globl\tflt\n\t.type\tflt, @function\nflt:\n\tfrflags\ta5\n\tflt.d\ta0,fa0,fa1\n\tfsflags\ta5\n\tsnez\ta0,a0\n\tret\n\t.size\tflt, .-flt\n\nbecause the middle end can't see through the UNSPEC operation unordered\nFP comparisons have been defined in terms of.\n\nThese instructions are only produced via an expander already, so change\nthe expander to emit individual RTL insns for each machine instruction\nin the ultimate ultimate sequence produced rather than deferring to a\nsingle RTL insn producing the whole sequence at once.\n\n\tgcc/\n\t* config/riscv/riscv.md (UNSPECV_FSNVSNAN): New constant.\n\t(QUIET_PATTERN): New int attribute.\n\t(f<quiet_pattern>_quiet<ANYF:mode><X:mode>4): Emit the intended\n\tRTL insns entirely within the preparation statements.\n\t(*f<quiet_pattern>_quiet<ANYF:mode><X:mode>4_default)\n\t(*f<quiet_pattern>_quiet<ANYF:mode><X:mode>4_snan): Remove\n\tinsns.\n\t(*riscv_fsnvsnan<mode>2): New insn.\n\n\tgcc/testsuite/\n\t* gcc.target/riscv/fle-ieee.c: New test.\n\t* gcc.target/riscv/fle-snan.c: New test.\n\t* gcc.target/riscv/fle.c: New test.\n\t* gcc.target/riscv/flef-ieee.c: New test.\n\t* gcc.target/riscv/flef-snan.c: New test.\n\t* gcc.target/riscv/flef.c: New test.\n\t* gcc.target/riscv/flt-ieee.c: New test.\n\t* gcc.target/riscv/flt-snan.c: New test.\n\t* gcc.target/riscv/flt.c: New test.\n\t* gcc.target/riscv/fltf-ieee.c: New test.\n\t* gcc.target/riscv/fltf-snan.c: New test.\n\t* gcc.target/riscv/fltf.c: New test.", "tree": {"sha": "c99f5ddacce04683572fe6689c9891b9a8916158", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c99f5ddacce04683572fe6689c9891b9a8916158"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/94f5a8f0d4910be2d861f7a9699e93efd609d042", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94f5a8f0d4910be2d861f7a9699e93efd609d042", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94f5a8f0d4910be2d861f7a9699e93efd609d042", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94f5a8f0d4910be2d861f7a9699e93efd609d042/comments", "author": {"login": "maciej-w-rozycki", "id": 117297942, "node_id": "U_kgDOBv3TFg", "avatar_url": "https://avatars.githubusercontent.com/u/117297942?v=4", "gravatar_id": "", "url": "https://api.github.com/users/maciej-w-rozycki", "html_url": "https://github.com/maciej-w-rozycki", "followers_url": "https://api.github.com/users/maciej-w-rozycki/followers", "following_url": "https://api.github.com/users/maciej-w-rozycki/following{/other_user}", "gists_url": "https://api.github.com/users/maciej-w-rozycki/gists{/gist_id}", "starred_url": "https://api.github.com/users/maciej-w-rozycki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/maciej-w-rozycki/subscriptions", "organizations_url": "https://api.github.com/users/maciej-w-rozycki/orgs", "repos_url": "https://api.github.com/users/maciej-w-rozycki/repos", "events_url": "https://api.github.com/users/maciej-w-rozycki/events{/privacy}", "received_events_url": "https://api.github.com/users/maciej-w-rozycki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "maciej-w-rozycki", "id": 117297942, "node_id": "U_kgDOBv3TFg", "avatar_url": "https://avatars.githubusercontent.com/u/117297942?v=4", "gravatar_id": "", "url": "https://api.github.com/users/maciej-w-rozycki", "html_url": "https://github.com/maciej-w-rozycki", "followers_url": "https://api.github.com/users/maciej-w-rozycki/followers", "following_url": "https://api.github.com/users/maciej-w-rozycki/following{/other_user}", "gists_url": "https://api.github.com/users/maciej-w-rozycki/gists{/gist_id}", "starred_url": "https://api.github.com/users/maciej-w-rozycki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/maciej-w-rozycki/subscriptions", "organizations_url": "https://api.github.com/users/maciej-w-rozycki/orgs", "repos_url": "https://api.github.com/users/maciej-w-rozycki/repos", "events_url": "https://api.github.com/users/maciej-w-rozycki/events{/privacy}", "received_events_url": "https://api.github.com/users/maciej-w-rozycki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff26f0ba68fe6e870f315d0601b596f889b89680", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff26f0ba68fe6e870f315d0601b596f889b89680", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff26f0ba68fe6e870f315d0601b596f889b89680"}], "stats": {"total": 213, "additions": 180, "deletions": 33}, "files": [{"sha": "0796f91dd3018be8b121e5f5650f53527d3c959d", "filename": "gcc/config/riscv/riscv.md", "status": "modified", "additions": 36, "deletions": 33, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94f5a8f0d4910be2d861f7a9699e93efd609d042/gcc%2Fconfig%2Friscv%2Friscv.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94f5a8f0d4910be2d861f7a9699e93efd609d042/gcc%2Fconfig%2Friscv%2Friscv.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.md?ref=94f5a8f0d4910be2d861f7a9699e93efd609d042", "patch": "@@ -57,6 +57,7 @@\n   ;; Floating-point unspecs.\n   UNSPECV_FRFLAGS\n   UNSPECV_FSFLAGS\n+  UNSPECV_FSNVSNAN\n \n   ;; Interrupt handler instructions.\n   UNSPECV_MRET\n@@ -360,6 +361,7 @@\n ;; Iterator and attributes for quiet comparisons.\n (define_int_iterator QUIET_COMPARISON [UNSPEC_FLT_QUIET UNSPEC_FLE_QUIET])\n (define_int_attr quiet_pattern [(UNSPEC_FLT_QUIET \"lt\") (UNSPEC_FLE_QUIET \"le\")])\n+(define_int_attr QUIET_PATTERN [(UNSPEC_FLT_QUIET \"LT\") (UNSPEC_FLE_QUIET \"LE\")])\n \n ;; This code iterator allows signed and unsigned widening multiplications\n ;; to use the same template.\n@@ -2326,39 +2328,31 @@\n    (set_attr \"mode\" \"<UNITMODE>\")])\n \n (define_expand \"f<quiet_pattern>_quiet<ANYF:mode><X:mode>4\"\n-   [(parallel [(set (match_operand:X      0 \"register_operand\")\n-\t\t    (unspec:X\n-\t\t     [(match_operand:ANYF 1 \"register_operand\")\n-\t\t      (match_operand:ANYF 2 \"register_operand\")]\n-\t\t     QUIET_COMPARISON))\n-\t       (clobber (match_scratch:X 3))])]\n-  \"TARGET_HARD_FLOAT\")\n-\n-(define_insn \"*f<quiet_pattern>_quiet<ANYF:mode><X:mode>4_default\"\n-   [(set (match_operand:X      0 \"register_operand\" \"=r\")\n-\t (unspec:X\n-\t  [(match_operand:ANYF 1 \"register_operand\" \" f\")\n-\t   (match_operand:ANYF 2 \"register_operand\" \" f\")]\n-\t  QUIET_COMPARISON))\n-    (clobber (match_scratch:X 3 \"=&r\"))]\n-  \"TARGET_HARD_FLOAT && ! HONOR_SNANS (<ANYF:MODE>mode)\"\n-  \"frflags\\t%3\\n\\tf<quiet_pattern>.<fmt>\\t%0,%1,%2\\n\\tfsflags\\t%3\"\n-  [(set_attr \"type\" \"fcmp\")\n-   (set_attr \"mode\" \"<UNITMODE>\")\n-   (set (attr \"length\") (const_int 12))])\n-\n-(define_insn \"*f<quiet_pattern>_quiet<ANYF:mode><X:mode>4_snan\"\n-   [(set (match_operand:X      0 \"register_operand\" \"=r\")\n-\t (unspec:X\n-\t  [(match_operand:ANYF 1 \"register_operand\" \" f\")\n-\t   (match_operand:ANYF 2 \"register_operand\" \" f\")]\n-\t  QUIET_COMPARISON))\n-    (clobber (match_scratch:X 3 \"=&r\"))]\n-  \"TARGET_HARD_FLOAT && HONOR_SNANS (<ANYF:MODE>mode)\"\n-  \"frflags\\t%3\\n\\tf<quiet_pattern>.<fmt>\\t%0,%1,%2\\n\\tfsflags\\t%3\\n\\tfeq.<fmt>\\tzero,%1,%2\"\n-  [(set_attr \"type\" \"fcmp\")\n-   (set_attr \"mode\" \"<UNITMODE>\")\n-   (set (attr \"length\") (const_int 16))])\n+   [(set (match_operand:X               0 \"register_operand\")\n+\t (unspec:X [(match_operand:ANYF 1 \"register_operand\")\n+\t\t    (match_operand:ANYF 2 \"register_operand\")]\n+\t\t   QUIET_COMPARISON))]\n+  \"TARGET_HARD_FLOAT\"\n+{\n+  rtx op0 = operands[0];\n+  rtx op1 = operands[1];\n+  rtx op2 = operands[2];\n+  rtx tmp = gen_reg_rtx (SImode);\n+  rtx cmp = gen_rtx_<QUIET_PATTERN> (<X:MODE>mode, op1, op2);\n+  rtx frflags = gen_rtx_UNSPEC_VOLATILE (SImode, gen_rtvec (1, const0_rtx),\n+\t\t\t\t\t UNSPECV_FRFLAGS);\n+  rtx fsflags = gen_rtx_UNSPEC_VOLATILE (SImode, gen_rtvec (1, tmp),\n+\t\t\t\t\t UNSPECV_FSFLAGS);\n+\n+  emit_insn (gen_rtx_SET (tmp, frflags));\n+  emit_insn (gen_rtx_SET (op0, cmp));\n+  emit_insn (fsflags);\n+  if (HONOR_SNANS (<ANYF:MODE>mode))\n+    emit_insn (gen_rtx_UNSPEC_VOLATILE (<ANYF:MODE>mode,\n+\t\t\t\t\tgen_rtvec (2, op1, op2),\n+\t\t\t\t\tUNSPECV_FSNVSNAN));\n+  DONE;\n+})\n \n (define_insn \"*seq_zero_<X:mode><GPR:mode>\"\n   [(set (match_operand:GPR       0 \"register_operand\" \"=r\")\n@@ -2766,6 +2760,15 @@\n   \"TARGET_HARD_FLOAT\"\n   \"fsflags\\t%0\")\n \n+(define_insn \"*riscv_fsnvsnan<mode>2\"\n+  [(unspec_volatile [(match_operand:ANYF 0 \"register_operand\" \"f\")\n+\t\t     (match_operand:ANYF 1 \"register_operand\" \"f\")]\n+\t\t    UNSPECV_FSNVSNAN)]\n+  \"TARGET_HARD_FLOAT\"\n+  \"feq.<fmt>\\tzero,%0,%1\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"mode\" \"<UNITMODE>\")])\n+\n (define_insn \"riscv_mret\"\n   [(return)\n    (unspec_volatile [(const_int 0)] UNSPECV_MRET)]"}, {"sha": "af9d503b1ecced232ec1a2c22f6c6977a2f7cf64", "filename": "gcc/testsuite/gcc.target/riscv/fle-ieee.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94f5a8f0d4910be2d861f7a9699e93efd609d042/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Ffle-ieee.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94f5a8f0d4910be2d861f7a9699e93efd609d042/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Ffle-ieee.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Ffle-ieee.c?ref=94f5a8f0d4910be2d861f7a9699e93efd609d042", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target hard_float } */\n+/* { dg-options \"-fno-finite-math-only -ftrapping-math -fno-signaling-nans\" } */\n+\n+long\n+fle (double x, double y)\n+{\n+  return __builtin_islessequal (x, y);\n+}\n+\n+/* { dg-final { scan-assembler \"\\tfrflags\\t(\\[^\\n\\]*)\\n\\tfle\\\\.d\\t\\[^\\n\\]*\\n\\tfsflags\\t\\\\1\\n\" } } */\n+/* { dg-final { scan-assembler-not \"snez\" } } */"}, {"sha": "0579d93109b30a54bf3d3e2b80f6ddd489e20c27", "filename": "gcc/testsuite/gcc.target/riscv/fle-snan.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94f5a8f0d4910be2d861f7a9699e93efd609d042/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Ffle-snan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94f5a8f0d4910be2d861f7a9699e93efd609d042/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Ffle-snan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Ffle-snan.c?ref=94f5a8f0d4910be2d861f7a9699e93efd609d042", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target hard_float } */\n+/* { dg-options \"-fno-finite-math-only -ftrapping-math -fsignaling-nans\" } */\n+\n+long\n+fle (double x, double y)\n+{\n+  return __builtin_islessequal (x, y);\n+}\n+\n+/* { dg-final { scan-assembler \"\\tfrflags\\t(\\[^\\n\\]*)\\n\\tfle\\\\.d\\t\\[^,\\]*,(\\[^,\\]*),(\\[^,\\]*)\\n\\tfsflags\\t\\\\1\\n\\tfeq\\\\.d\\tzero,\\\\2,\\\\3\\n\" } } */\n+/* { dg-final { scan-assembler-not \"snez\" } } */"}, {"sha": "97c8ab9ad86428013cbb4fd347b566fe87c158a9", "filename": "gcc/testsuite/gcc.target/riscv/fle.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94f5a8f0d4910be2d861f7a9699e93efd609d042/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Ffle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94f5a8f0d4910be2d861f7a9699e93efd609d042/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Ffle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Ffle.c?ref=94f5a8f0d4910be2d861f7a9699e93efd609d042", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target hard_float } */\n+/* { dg-options \"-fno-finite-math-only -fno-trapping-math -fno-signaling-nans\" } */\n+\n+long\n+fle (double x, double y)\n+{\n+  return __builtin_islessequal (x, y);\n+}\n+\n+/* { dg-final { scan-assembler \"\\tf(?:gt|le)\\\\.d\\t\\[^\\n\\]*\\n\" } } */\n+/* { dg-final { scan-assembler-not \"f\\[rs\\]flags\" } } */"}, {"sha": "e2d6b0d91b552ff5a0e2d40b46518c552ab69768", "filename": "gcc/testsuite/gcc.target/riscv/flef-ieee.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94f5a8f0d4910be2d861f7a9699e93efd609d042/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fflef-ieee.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94f5a8f0d4910be2d861f7a9699e93efd609d042/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fflef-ieee.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fflef-ieee.c?ref=94f5a8f0d4910be2d861f7a9699e93efd609d042", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target hard_float } */\n+/* { dg-options \"-fno-finite-math-only -ftrapping-math -fno-signaling-nans\" } */\n+\n+long\n+flef (float x, float y)\n+{\n+  return __builtin_islessequal (x, y);\n+}\n+\n+/* { dg-final { scan-assembler \"\\tfrflags\\t(\\[^\\n\\]*)\\n\\tfle\\\\.s\\t\\[^\\n\\]*\\n\\tfsflags\\t\\\\1\\n\" } } */\n+/* { dg-final { scan-assembler-not \"snez\" } } */"}, {"sha": "2d2c5b9e79f8eb663ca7347ab1512827d3d38b3d", "filename": "gcc/testsuite/gcc.target/riscv/flef-snan.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94f5a8f0d4910be2d861f7a9699e93efd609d042/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fflef-snan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94f5a8f0d4910be2d861f7a9699e93efd609d042/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fflef-snan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fflef-snan.c?ref=94f5a8f0d4910be2d861f7a9699e93efd609d042", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target hard_float } */\n+/* { dg-options \"-fno-finite-math-only -ftrapping-math -fsignaling-nans\" } */\n+\n+long\n+flef (float x, float y)\n+{\n+  return __builtin_islessequal (x, y);\n+}\n+\n+/* { dg-final { scan-assembler \"\\tfrflags\\t(\\[^\\n\\]*)\\n\\tfle\\\\.s\\t\\[^,\\]*,(\\[^,\\]*),(\\[^,\\]*)\\n\\tfsflags\\t\\\\1\\n\\tfeq\\\\.s\\tzero,\\\\2,\\\\3\\n\" } } */\n+/* { dg-final { scan-assembler-not \"snez\" } } */"}, {"sha": "379f5119caa836f02b3f5d924939f2fd6c0b04d3", "filename": "gcc/testsuite/gcc.target/riscv/flef.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94f5a8f0d4910be2d861f7a9699e93efd609d042/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fflef.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94f5a8f0d4910be2d861f7a9699e93efd609d042/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fflef.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fflef.c?ref=94f5a8f0d4910be2d861f7a9699e93efd609d042", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target hard_float } */\n+/* { dg-options \"-fno-finite-math-only -fno-trapping-math -fno-signaling-nans\" } */\n+\n+long\n+flef (float x, float y)\n+{\n+  return __builtin_islessequal (x, y);\n+}\n+\n+/* { dg-final { scan-assembler \"\\tf(?:gt|le)\\\\.s\\t\\[^\\n\\]*\\n\" } } */\n+/* { dg-final { scan-assembler-not \"f\\[rs\\]flags\" } } */"}, {"sha": "7d7aae303e6ccc919801808ec329a7502f21b51e", "filename": "gcc/testsuite/gcc.target/riscv/flt-ieee.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94f5a8f0d4910be2d861f7a9699e93efd609d042/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fflt-ieee.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94f5a8f0d4910be2d861f7a9699e93efd609d042/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fflt-ieee.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fflt-ieee.c?ref=94f5a8f0d4910be2d861f7a9699e93efd609d042", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target hard_float } */\n+/* { dg-options \"-fno-finite-math-only -ftrapping-math -fno-signaling-nans\" } */\n+\n+long\n+flt (double x, double y)\n+{\n+  return __builtin_isless (x, y);\n+}\n+\n+/* { dg-final { scan-assembler \"\\tfrflags\\t(\\[^\\n\\]*)\\n\\tflt\\\\.d\\t\\[^\\n\\]*\\n\\tfsflags\\t\\\\1\\n\" } } */\n+/* { dg-final { scan-assembler-not \"snez\" } } */"}, {"sha": "ff4c4e9ac8d88ff96e84d27bb4fbcf018dac4ab6", "filename": "gcc/testsuite/gcc.target/riscv/flt-snan.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94f5a8f0d4910be2d861f7a9699e93efd609d042/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fflt-snan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94f5a8f0d4910be2d861f7a9699e93efd609d042/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fflt-snan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fflt-snan.c?ref=94f5a8f0d4910be2d861f7a9699e93efd609d042", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target hard_float } */\n+/* { dg-options \"-fno-finite-math-only -ftrapping-math -fsignaling-nans\" } */\n+\n+long\n+flt (double x, double y)\n+{\n+  return __builtin_isless (x, y);\n+}\n+\n+/* { dg-final { scan-assembler \"\\tfrflags\\t(\\[^\\n\\]*)\\n\\tflt\\\\.d\\t\\[^,\\]*,(\\[^,\\]*),(\\[^,\\]*)\\n\\tfsflags\\t\\\\1\\n\\tfeq\\\\.d\\tzero,\\\\2,\\\\3\\n\" } } */\n+/* { dg-final { scan-assembler-not \"snez\" } } */"}, {"sha": "4f5ef1d74e85d2dcd586724f6e885b3d834e3df1", "filename": "gcc/testsuite/gcc.target/riscv/flt.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94f5a8f0d4910be2d861f7a9699e93efd609d042/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fflt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94f5a8f0d4910be2d861f7a9699e93efd609d042/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fflt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fflt.c?ref=94f5a8f0d4910be2d861f7a9699e93efd609d042", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target hard_float } */\n+/* { dg-options \"-fno-finite-math-only -fno-trapping-math -fno-signaling-nans\" } */\n+\n+long\n+flt (double x, double y)\n+{\n+  return __builtin_isless (x, y);\n+}\n+\n+/* { dg-final { scan-assembler \"\\tf(?:ge|lt)\\\\.d\\t\\[^\\n\\]*\\n\" } } */\n+/* { dg-final { scan-assembler-not \"f\\[rs\\]flags\" } } */"}, {"sha": "ede076eea360e5a982f894dd1fb5a1574b50459e", "filename": "gcc/testsuite/gcc.target/riscv/fltf-ieee.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94f5a8f0d4910be2d861f7a9699e93efd609d042/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Ffltf-ieee.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94f5a8f0d4910be2d861f7a9699e93efd609d042/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Ffltf-ieee.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Ffltf-ieee.c?ref=94f5a8f0d4910be2d861f7a9699e93efd609d042", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target hard_float } */\n+/* { dg-options \"-fno-finite-math-only -ftrapping-math -fno-signaling-nans\" } */\n+\n+long\n+fltf (float x, float y)\n+{\n+  return __builtin_isless (x, y);\n+}\n+\n+/* { dg-final { scan-assembler \"\\tfrflags\\t(\\[^\\n\\]*)\\n\\tflt\\\\.s\\t\\[^\\n\\]*\\n\\tfsflags\\t\\\\1\\n\" } } */\n+/* { dg-final { scan-assembler-not \"snez\" } } */"}, {"sha": "d29d786f7f054050fc4ae2858b1ff9bf57ff09a0", "filename": "gcc/testsuite/gcc.target/riscv/fltf-snan.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94f5a8f0d4910be2d861f7a9699e93efd609d042/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Ffltf-snan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94f5a8f0d4910be2d861f7a9699e93efd609d042/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Ffltf-snan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Ffltf-snan.c?ref=94f5a8f0d4910be2d861f7a9699e93efd609d042", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target hard_float } */\n+/* { dg-options \"-fno-finite-math-only -ftrapping-math -fsignaling-nans\" } */\n+\n+long\n+fltf (float x, float y)\n+{\n+  return __builtin_isless (x, y);\n+}\n+\n+/* { dg-final { scan-assembler \"\\tfrflags\\t(\\[^\\n\\]*)\\n\\tflt\\\\.s\\t\\[^,\\]*,(\\[^,\\]*),(\\[^,\\]*)\\n\\tfsflags\\t\\\\1\\n\\tfeq\\\\.s\\tzero,\\\\2,\\\\3\\n\" } } */\n+/* { dg-final { scan-assembler-not \"snez\" } } */"}, {"sha": "c9e6a2b204c4251ca334a44b00c4ac438e4c7b89", "filename": "gcc/testsuite/gcc.target/riscv/fltf.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94f5a8f0d4910be2d861f7a9699e93efd609d042/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Ffltf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94f5a8f0d4910be2d861f7a9699e93efd609d042/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Ffltf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Ffltf.c?ref=94f5a8f0d4910be2d861f7a9699e93efd609d042", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target hard_float } */\n+/* { dg-options \"-fno-finite-math-only -fno-trapping-math -fno-signaling-nans\" } */\n+\n+long\n+fltf (float x, float y)\n+{\n+  return __builtin_isless (x, y);\n+}\n+\n+/* { dg-final { scan-assembler \"\\tf(?:ge|lt)\\\\.s\\t\\[^\\n\\]*\\n\" } } */\n+/* { dg-final { scan-assembler-not \"f\\[rs\\]flags\" } } */"}]}