{"sha": "44741f0366ebdda432a4399a92a40dbb1beabb01", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQ3NDFmMDM2NmViZGRhNDMyYTQzOTlhOTJhNDBkYmIxYmVhYmIwMQ==", "commit": {"author": {"name": "Alexander Monakov", "email": "amonakov@ispras.ru", "date": "2010-04-22T12:44:30Z"}, "committer": {"name": "Alexander Monakov", "email": "amonakov@gcc.gnu.org", "date": "2010-04-22T12:44:30Z"}, "message": "tree-ssa-reassoc.c (eliminate_plus_minus_pair): Handle BIT_NOT_EXPR to simplify a + ~a.\n\n2010-04-22  Alexander Monakov  <amonakov@ispras.ru>\n\n\t* tree-ssa-reassoc.c (eliminate_plus_minus_pair): Handle BIT_NOT_EXPR\n\tto simplify a + ~a.\n\n\t* gfortran.dg/reassoc_6.f: New testcase.\n\nFrom-SVN: r158645", "tree": {"sha": "ce9c97c82ea82bb23402a8499498721b5b7857e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce9c97c82ea82bb23402a8499498721b5b7857e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/44741f0366ebdda432a4399a92a40dbb1beabb01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44741f0366ebdda432a4399a92a40dbb1beabb01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44741f0366ebdda432a4399a92a40dbb1beabb01", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44741f0366ebdda432a4399a92a40dbb1beabb01/comments", "author": {"login": "amonakov", "id": 1997391, "node_id": "MDQ6VXNlcjE5OTczOTE=", "avatar_url": "https://avatars.githubusercontent.com/u/1997391?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amonakov", "html_url": "https://github.com/amonakov", "followers_url": "https://api.github.com/users/amonakov/followers", "following_url": "https://api.github.com/users/amonakov/following{/other_user}", "gists_url": "https://api.github.com/users/amonakov/gists{/gist_id}", "starred_url": "https://api.github.com/users/amonakov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amonakov/subscriptions", "organizations_url": "https://api.github.com/users/amonakov/orgs", "repos_url": "https://api.github.com/users/amonakov/repos", "events_url": "https://api.github.com/users/amonakov/events{/privacy}", "received_events_url": "https://api.github.com/users/amonakov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f873b20530f315ec0691a6c71ce4b430143975c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f873b20530f315ec0691a6c71ce4b430143975c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f873b20530f315ec0691a6c71ce4b430143975c6"}], "stats": {"total": 66, "additions": 59, "deletions": 7}, "files": [{"sha": "5eb1b305bbfc4314a4c61c504734fa07e2fb3721", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44741f0366ebdda432a4399a92a40dbb1beabb01/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44741f0366ebdda432a4399a92a40dbb1beabb01/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=44741f0366ebdda432a4399a92a40dbb1beabb01", "patch": "@@ -1,3 +1,8 @@\n+2010-04-22  Alexander Monakov  <amonakov@ispras.ru>\n+\n+\t* tree-ssa-reassoc.c (eliminate_plus_minus_pair): Handle BIT_NOT_EXPR\n+\tto simplify a + ~a.\n+\n 2010-04-22  Laurynas Biveinis  <laurynas.biveinis@gmail.com>\n \n \t* tree-parloops.c (loop_parallel_p): New argument"}, {"sha": "6aecb02eb63d8b0b29f4f6376a973f2953825aa4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44741f0366ebdda432a4399a92a40dbb1beabb01/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44741f0366ebdda432a4399a92a40dbb1beabb01/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=44741f0366ebdda432a4399a92a40dbb1beabb01", "patch": "@@ -1,3 +1,7 @@\n+2010-04-22  Alexander Monakov  <amonakov@ispras.ru>\n+\n+\t* gfortran.dg/reassoc_6.f: New testcase.\n+\n 2010-04-22  Bernd Schmidt  <bernds@codesourcery.com>\n \n \tPR middle-end/29274"}, {"sha": "cbc36f5675b5893f92610348bd87b6ca7afb6e7c", "filename": "gcc/testsuite/gfortran.dg/reassoc_6.f", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44741f0366ebdda432a4399a92a40dbb1beabb01/gcc%2Ftestsuite%2Fgfortran.dg%2Freassoc_6.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44741f0366ebdda432a4399a92a40dbb1beabb01/gcc%2Ftestsuite%2Fgfortran.dg%2Freassoc_6.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Freassoc_6.f?ref=44741f0366ebdda432a4399a92a40dbb1beabb01", "patch": "@@ -0,0 +1,20 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -fdump-tree-optimized\" }\n+\n+        subroutine test(nb,nx,r2)\n+        implicit none\n+        integer nb,nx,i,l\n+        real*8 r2(nb,nx)\n+\n+\n+             do i=1,nx\n+                do l=1,nb\n+                   r2(l,i)=0.0d0\n+                enddo\n+             enddo\n+\n+        return\n+        end\n+! Verify that offset of the first element is simplified\n+! { dg-final { scan-tree-dump-not \"~\" \"optimized\" } }\n+! { dg-final { cleanup-tree-dump \"optimized\" } }"}, {"sha": "aa080855e5be3f92dbc3cf9b76084c586e39bcfb", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 30, "deletions": 7, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44741f0366ebdda432a4399a92a40dbb1beabb01/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44741f0366ebdda432a4399a92a40dbb1beabb01/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=44741f0366ebdda432a4399a92a40dbb1beabb01", "patch": "@@ -489,11 +489,11 @@ eliminate_duplicate_pair (enum tree_code opcode,\n \n static VEC(tree, heap) *plus_negates;\n \n-/* If OPCODE is PLUS_EXPR, CURR->OP is really a negate expression,\n-   look in OPS for a corresponding positive operation to cancel it\n-   out.  If we find one, remove the other from OPS, replace\n-   OPS[CURRINDEX] with 0, and return true.  Otherwise, return\n-   false. */\n+/* If OPCODE is PLUS_EXPR, CURR->OP is a negate expression or a bitwise not\n+   expression, look in OPS for a corresponding positive operation to cancel\n+   it out.  If we find one, remove the other from OPS, replace\n+   OPS[CURRINDEX] with 0 or -1, respectively, and return true.  Otherwise,\n+   return false. */\n \n static bool\n eliminate_plus_minus_pair (enum tree_code opcode,\n@@ -502,14 +502,16 @@ eliminate_plus_minus_pair (enum tree_code opcode,\n \t\t\t   operand_entry_t curr)\n {\n   tree negateop;\n+  tree notop;\n   unsigned int i;\n   operand_entry_t oe;\n \n   if (opcode != PLUS_EXPR || TREE_CODE (curr->op) != SSA_NAME)\n     return false;\n \n   negateop = get_unary_op (curr->op, NEGATE_EXPR);\n-  if (negateop == NULL_TREE)\n+  notop = get_unary_op (curr->op, BIT_NOT_EXPR);\n+  if (negateop == NULL_TREE && notop == NULL_TREE)\n     return false;\n \n   /* Any non-negated version will have a rank that is one less than\n@@ -539,13 +541,34 @@ eliminate_plus_minus_pair (enum tree_code opcode,\n \t  VEC_ordered_remove (operand_entry_t, *ops, currindex);\n \t  reassociate_stats.ops_eliminated ++;\n \n+\t  return true;\n+\t}\n+      else if (oe->op == notop)\n+\t{\n+\t  tree op_type = TREE_TYPE (oe->op);\n+\n+\t  if (dump_file && (dump_flags & TDF_DETAILS))\n+\t    {\n+\t      fprintf (dump_file, \"Equivalence: \");\n+\t      print_generic_expr (dump_file, notop, 0);\n+\t      fprintf (dump_file, \" + ~\");\n+\t      print_generic_expr (dump_file, oe->op, 0);\n+\t      fprintf (dump_file, \" -> -1\\n\");\n+\t    }\n+\n+\t  VEC_ordered_remove (operand_entry_t, *ops, i);\n+\t  add_to_ops_vec (ops, build_int_cst_type (op_type, -1));\n+\t  VEC_ordered_remove (operand_entry_t, *ops, currindex);\n+\t  reassociate_stats.ops_eliminated ++;\n+\n \t  return true;\n \t}\n     }\n \n   /* CURR->OP is a negate expr in a plus expr: save it for later\n      inspection in repropagate_negates().  */\n-  VEC_safe_push (tree, heap, plus_negates, curr->op);\n+  if (negateop != NULL_TREE)\n+    VEC_safe_push (tree, heap, plus_negates, curr->op);\n \n   return false;\n }"}]}