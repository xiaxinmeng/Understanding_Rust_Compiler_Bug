{"sha": "26f5ea5e141cf1e40289dbc73ac21e85ad39fa57", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjZmNWVhNWUxNDFjZjFlNDAyODlkYmM3M2FjMjFlODVhZDM5ZmE1Nw==", "commit": {"author": {"name": "Kewen Lin", "email": "linkw@linux.ibm.com", "date": "2021-08-27T01:23:58Z"}, "committer": {"name": "Kewen Lin", "email": "linkw@linux.ibm.com", "date": "2021-08-27T01:23:58Z"}, "message": "rs6000: Make some BIFs vectorized on P10\n\nThis patch is to add the support to make vectorizer able to\nvectorize some built-in function scalar versions on Power10.\n\ngcc/ChangeLog:\n\n\t* config/rs6000/rs6000.c (rs6000_builtin_md_vectorized_function): Add\n\tsupport for built-in functions MISC_BUILTIN_DIVWE, MISC_BUILTIN_DIVWEU,\n\tMISC_BUILTIN_DIVDE, MISC_BUILTIN_DIVDEU, P10_BUILTIN_CFUGED,\n\tP10_BUILTIN_CNTLZDM, P10_BUILTIN_CNTTZDM, P10_BUILTIN_PDEPD and\n\tP10_BUILTIN_PEXTD on Power10.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/powerpc/dive-vectorize-1.c: New test.\n\t* gcc.target/powerpc/dive-vectorize-1.h: New test.\n\t* gcc.target/powerpc/dive-vectorize-2.c: New test.\n\t* gcc.target/powerpc/dive-vectorize-2.h: New test.\n\t* gcc.target/powerpc/dive-vectorize-run-1.c: New test.\n\t* gcc.target/powerpc/dive-vectorize-run-2.c: New test.\n\t* gcc.target/powerpc/p10-bifs-vectorize-1.c: New test.\n\t* gcc.target/powerpc/p10-bifs-vectorize-1.h: New test.\n\t* gcc.target/powerpc/p10-bifs-vectorize-run-1.c: New test.", "tree": {"sha": "7108549f5a121bf09fd2e0032d3613c5cbe125f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7108549f5a121bf09fd2e0032d3613c5cbe125f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26f5ea5e141cf1e40289dbc73ac21e85ad39fa57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26f5ea5e141cf1e40289dbc73ac21e85ad39fa57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26f5ea5e141cf1e40289dbc73ac21e85ad39fa57", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26f5ea5e141cf1e40289dbc73ac21e85ad39fa57/comments", "author": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e64eec6719e596e7f095c977edcc63812be18a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e64eec6719e596e7f095c977edcc63812be18a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e64eec6719e596e7f095c977edcc63812be18a4"}], "stats": {"total": 335, "additions": 335, "deletions": 0}, "files": [{"sha": "d02c1b63a24271878f2dd59f2a9c3fe65a13d58a", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f5ea5e141cf1e40289dbc73ac21e85ad39fa57/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f5ea5e141cf1e40289dbc73ac21e85ad39fa57/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=26f5ea5e141cf1e40289dbc73ac21e85ad39fa57", "patch": "@@ -5793,6 +5793,59 @@ rs6000_builtin_md_vectorized_function (tree fndecl, tree type_out,\n     default:\n       break;\n     }\n+\n+  machine_mode in_vmode = TYPE_MODE (type_in);\n+  machine_mode out_vmode = TYPE_MODE (type_out);\n+\n+  /* Power10 supported vectorized built-in functions.  */\n+  if (TARGET_POWER10\n+      && in_vmode == out_vmode\n+      && VECTOR_UNIT_ALTIVEC_OR_VSX_P (in_vmode))\n+    {\n+      machine_mode exp_mode = DImode;\n+      machine_mode exp_vmode = V2DImode;\n+      enum rs6000_builtins bif;\n+      switch (fn)\n+\t{\n+\tcase MISC_BUILTIN_DIVWE:\n+\tcase MISC_BUILTIN_DIVWEU:\n+\t  exp_mode = SImode;\n+\t  exp_vmode = V4SImode;\n+\t  if (fn == MISC_BUILTIN_DIVWE)\n+\t    bif = P10V_BUILTIN_DIVES_V4SI;\n+\t  else\n+\t    bif = P10V_BUILTIN_DIVEU_V4SI;\n+\t  break;\n+\tcase MISC_BUILTIN_DIVDE:\n+\tcase MISC_BUILTIN_DIVDEU:\n+\t  if (fn == MISC_BUILTIN_DIVDE)\n+\t    bif = P10V_BUILTIN_DIVES_V2DI;\n+\t  else\n+\t    bif = P10V_BUILTIN_DIVEU_V2DI;\n+\t  break;\n+\tcase P10_BUILTIN_CFUGED:\n+\t  bif = P10V_BUILTIN_VCFUGED;\n+\t  break;\n+\tcase P10_BUILTIN_CNTLZDM:\n+\t  bif = P10V_BUILTIN_VCLZDM;\n+\t  break;\n+\tcase P10_BUILTIN_CNTTZDM:\n+\t  bif = P10V_BUILTIN_VCTZDM;\n+\t  break;\n+\tcase P10_BUILTIN_PDEPD:\n+\t  bif = P10V_BUILTIN_VPDEPD;\n+\t  break;\n+\tcase P10_BUILTIN_PEXTD:\n+\t  bif = P10V_BUILTIN_VPEXTD;\n+\t  break;\n+\tdefault:\n+\t  return NULL_TREE;\n+\t}\n+\n+      if (in_mode == exp_mode && in_vmode == exp_vmode)\n+\treturn rs6000_builtin_decls[bif];\n+    }\n+\n   return NULL_TREE;\n }\n \f"}, {"sha": "84f1b0a88f29680e892e167eccabc970e06a0e84", "filename": "gcc/testsuite/gcc.target/powerpc/dive-vectorize-1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f5ea5e141cf1e40289dbc73ac21e85ad39fa57/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdive-vectorize-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f5ea5e141cf1e40289dbc73ac21e85ad39fa57/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdive-vectorize-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdive-vectorize-1.c?ref=26f5ea5e141cf1e40289dbc73ac21e85ad39fa57", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target power10_ok } */\n+/* { dg-options \"-mdejagnu-cpu=power10 -O2 -ftree-vectorize -fno-vect-cost-model -fno-unroll-loops -fdump-tree-vect-details\" } */\n+\n+/* Test if signed/unsigned int extended divisions get vectorized.  */\n+\n+#include \"dive-vectorize-1.h\"\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 2 \"vect\" } } */\n+/* { dg-final { scan-assembler-times {\\mvdivesw\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mvdiveuw\\M} 1 } } */"}, {"sha": "119f637b46b667975ee542aaa31cafcc9c30f691", "filename": "gcc/testsuite/gcc.target/powerpc/dive-vectorize-1.h", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f5ea5e141cf1e40289dbc73ac21e85ad39fa57/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdive-vectorize-1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f5ea5e141cf1e40289dbc73ac21e85ad39fa57/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdive-vectorize-1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdive-vectorize-1.h?ref=26f5ea5e141cf1e40289dbc73ac21e85ad39fa57", "patch": "@@ -0,0 +1,22 @@\n+#define N 128\n+\n+typedef signed int si;\n+typedef unsigned int ui;\n+\n+si si_a[N], si_b[N], si_c[N];\n+ui ui_a[N], ui_b[N], ui_c[N];\n+\n+__attribute__ ((noipa)) void\n+test_divwe ()\n+{\n+  for (int i = 0; i < N; i++)\n+    si_c[i] = __builtin_divwe (si_a[i], si_b[i]);\n+}\n+\n+__attribute__ ((noipa)) void\n+test_divweu ()\n+{\n+  for (int i = 0; i < N; i++)\n+    ui_c[i] = __builtin_divweu (ui_a[i], ui_b[i]);\n+}\n+"}, {"sha": "13d768d748c8cddce59d1f7650c4fd5bc178efa0", "filename": "gcc/testsuite/gcc.target/powerpc/dive-vectorize-2.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f5ea5e141cf1e40289dbc73ac21e85ad39fa57/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdive-vectorize-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f5ea5e141cf1e40289dbc73ac21e85ad39fa57/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdive-vectorize-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdive-vectorize-2.c?ref=26f5ea5e141cf1e40289dbc73ac21e85ad39fa57", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* We scan for vdive*d which are only supported on 64-bit env.  */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target power10_ok } */\n+/* { dg-options \"-mdejagnu-cpu=power10 -O2 -ftree-vectorize -fno-vect-cost-model -fno-unroll-loops -fdump-tree-vect-details\" } */\n+\n+/* Test if signed/unsigned long long extended divisions get vectorized.  */\n+\n+#include \"dive-vectorize-2.h\"\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 2 \"vect\" } } */\n+/* { dg-final { scan-assembler-times {\\mvdivesd\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mvdiveud\\M} 1 } } */"}, {"sha": "1cab56b2e0b96759a7ecc00a657c040efa2f9539", "filename": "gcc/testsuite/gcc.target/powerpc/dive-vectorize-2.h", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f5ea5e141cf1e40289dbc73ac21e85ad39fa57/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdive-vectorize-2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f5ea5e141cf1e40289dbc73ac21e85ad39fa57/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdive-vectorize-2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdive-vectorize-2.h?ref=26f5ea5e141cf1e40289dbc73ac21e85ad39fa57", "patch": "@@ -0,0 +1,22 @@\n+#define N 128\n+\n+typedef signed long long sLL;\n+typedef unsigned long long uLL;\n+\n+sLL sll_a[N], sll_b[N], sll_c[N];\n+uLL ull_a[N], ull_b[N], ull_c[N];\n+\n+__attribute__ ((noipa)) void\n+test_divde ()\n+{\n+  for (int i = 0; i < N; i++)\n+    sll_c[i] = __builtin_divde (sll_a[i], sll_b[i]);\n+}\n+\n+__attribute__ ((noipa)) void\n+test_divdeu ()\n+{\n+  for (int i = 0; i < N; i++)\n+    ull_c[i] = __builtin_divdeu (ull_a[i], ull_b[i]);\n+}\n+"}, {"sha": "dab112c2ee6ef01e05fd741c7d8bfee4488fd16d", "filename": "gcc/testsuite/gcc.target/powerpc/dive-vectorize-run-1.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f5ea5e141cf1e40289dbc73ac21e85ad39fa57/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdive-vectorize-run-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f5ea5e141cf1e40289dbc73ac21e85ad39fa57/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdive-vectorize-run-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdive-vectorize-run-1.c?ref=26f5ea5e141cf1e40289dbc73ac21e85ad39fa57", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target power10_hw } */\n+/* { dg-options \"-mdejagnu-cpu=power10 -O2 -ftree-vectorize -fno-vect-cost-model\" } */\n+\n+#include \"dive-vectorize-1.h\"\n+\n+/* Check if test cases with signed/unsigned int extended division\n+   vectorization run successfully.  */\n+\n+/* Make optimize (1) to avoid vectorization applied on check func.  */\n+\n+__attribute__ ((optimize (1))) void\n+check_divwe ()\n+{\n+  test_divwe ();\n+  for (int i = 0; i < N; i++)\n+    {\n+      si exp = __builtin_divwe (si_a[i], si_b[i]);\n+      if (exp != si_c[i])\n+\t__builtin_abort ();\n+    }\n+}\n+\n+__attribute__ ((optimize (1))) void\n+check_divweu ()\n+{\n+  test_divweu ();\n+  for (int i = 0; i < N; i++)\n+    {\n+      ui exp = __builtin_divweu (ui_a[i], ui_b[i]);\n+      if (exp != ui_c[i])\n+\t__builtin_abort ();\n+    }\n+}\n+\n+int\n+main ()\n+{\n+  for (int i = 0; i < N; i++)\n+    {\n+      si_a[i] = 0x10 * (i * 3 + 2);\n+      si_b[i] = 0x7890 * (i * 3 + 1);\n+      ui_a[i] = 0x234 * (i * 11 + 3) - 0xcd * (i * 5 - 7);\n+      ui_b[i] = 0x6078 * (i * 7 + 3) + 0xef * (i * 7 - 11);\n+      if (si_b[i] == 0 || ui_b[i] == 0)\n+\t__builtin_abort ();\n+    }\n+\n+  check_divwe ();\n+  check_divweu ();\n+\n+  return 0;\n+}\n+"}, {"sha": "eb761497def499f9f179c0f1bfb3505a235a2b9f", "filename": "gcc/testsuite/gcc.target/powerpc/dive-vectorize-run-2.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f5ea5e141cf1e40289dbc73ac21e85ad39fa57/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdive-vectorize-run-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f5ea5e141cf1e40289dbc73ac21e85ad39fa57/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdive-vectorize-run-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdive-vectorize-run-2.c?ref=26f5ea5e141cf1e40289dbc73ac21e85ad39fa57", "patch": "@@ -0,0 +1,56 @@\n+/* { dg-do run } */\n+/* The checked bifs are only supported on 64-bit env.  */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target power10_hw } */\n+/* { dg-options \"-mdejagnu-cpu=power10 -O2 -ftree-vectorize -fno-vect-cost-model\" } */\n+\n+#include \"dive-vectorize-2.h\"\n+\n+/* Check if test cases with signed/unsigned int extended division\n+   vectorization run successfully.  */\n+\n+/* Make optimize (1) to avoid vectorization applied on check func.  */\n+\n+__attribute__ ((optimize (1))) void\n+check_divde ()\n+{\n+  test_divde ();\n+  for (int i = 0; i < N; i++)\n+    {\n+      sLL exp = __builtin_divde (sll_a[i], sll_b[i]);\n+      if (exp != sll_c[i])\n+\t__builtin_abort ();\n+    }\n+}\n+\n+__attribute__ ((optimize (1))) void\n+check_divdeu ()\n+{\n+  test_divdeu ();\n+  for (int i = 0; i < N; i++)\n+    {\n+      uLL exp = __builtin_divdeu (ull_a[i], ull_b[i]);\n+      if (exp != ull_c[i])\n+\t__builtin_abort ();\n+    }\n+}\n+\n+int\n+main ()\n+{\n+  for (int i = 0; i < N; i++)\n+    {\n+      sll_a[i] = 0x102 * (i * 3 + 2);\n+      sll_b[i] = 0x789ab * (i * 3 + 1);\n+      ull_a[i] = 0x2345 * (i * 11 + 3) - 0xcd1 * (i * 5 - 7);\n+      ull_b[i] = 0x6078e * (i * 7 + 3) + 0xefa * (i * 7 - 11);\n+      if (sll_b[i] == 0 || ull_b[i] == 0)\n+\t__builtin_abort ();\n+    }\n+\n+  check_divde ();\n+  check_divdeu ();\n+\n+  return 0;\n+}\n+"}, {"sha": "fdbb9ebd61b140e12869d4a3f57f0bf5f65683a5", "filename": "gcc/testsuite/gcc.target/powerpc/p10-bifs-vectorize-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f5ea5e141cf1e40289dbc73ac21e85ad39fa57/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp10-bifs-vectorize-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f5ea5e141cf1e40289dbc73ac21e85ad39fa57/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp10-bifs-vectorize-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp10-bifs-vectorize-1.c?ref=26f5ea5e141cf1e40289dbc73ac21e85ad39fa57", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* What we scan for are only supported on 64-bit env.  */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target power10_ok } */\n+/* { dg-options \"-mdejagnu-cpu=power10 -O2 -ftree-vectorize -fno-vect-cost-model -fno-unroll-loops -fdump-tree-vect-details\" } */\n+\n+/* Test if some Power10 built-in functions get vectorized.  */\n+\n+#include \"p10-bifs-vectorize-1.h\"\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 5 \"vect\" } } */\n+/* { dg-final { scan-assembler-times {\\mvcfuged\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mvclzdm\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mvctzdm\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mvpdepd\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mvpextd\\M} 1 } } */"}, {"sha": "80b7aacf810e43936acf981fc8993dfe65d50c2b", "filename": "gcc/testsuite/gcc.target/powerpc/p10-bifs-vectorize-1.h", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f5ea5e141cf1e40289dbc73ac21e85ad39fa57/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp10-bifs-vectorize-1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f5ea5e141cf1e40289dbc73ac21e85ad39fa57/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp10-bifs-vectorize-1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp10-bifs-vectorize-1.h?ref=26f5ea5e141cf1e40289dbc73ac21e85ad39fa57", "patch": "@@ -0,0 +1,40 @@\n+#define N 32\n+\n+typedef unsigned long long uLL;\n+uLL ull_a[N], ull_b[N], ull_c[N];\n+\n+__attribute__ ((noipa)) void\n+test_cfuged ()\n+{\n+  for (int i = 0; i < N; i++)\n+    ull_c[i] = __builtin_cfuged (ull_a[i], ull_b[i]);\n+}\n+\n+__attribute__ ((noipa)) void\n+test_cntlzdm ()\n+{\n+  for (int i = 0; i < N; i++)\n+    ull_c[i] = __builtin_cntlzdm (ull_a[i], ull_b[i]);\n+}\n+\n+__attribute__ ((noipa)) void\n+test_cnttzdm ()\n+{\n+  for (int i = 0; i < N; i++)\n+    ull_c[i] = __builtin_cnttzdm (ull_a[i], ull_b[i]);\n+}\n+\n+__attribute__ ((noipa)) void\n+test_pdepd ()\n+{\n+  for (int i = 0; i < N; i++)\n+    ull_c[i] = __builtin_pdepd (ull_a[i], ull_b[i]);\n+}\n+\n+__attribute__ ((noipa)) void\n+test_pextd ()\n+{\n+  for (int i = 0; i < N; i++)\n+    ull_c[i] = __builtin_pextd (ull_a[i], ull_b[i]);\n+}\n+"}, {"sha": "828fbe1f9a7434d8ea66d0c157d7cf04bb1d1f6b", "filename": "gcc/testsuite/gcc.target/powerpc/p10-bifs-vectorize-run-1.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f5ea5e141cf1e40289dbc73ac21e85ad39fa57/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp10-bifs-vectorize-run-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f5ea5e141cf1e40289dbc73ac21e85ad39fa57/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp10-bifs-vectorize-run-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp10-bifs-vectorize-run-1.c?ref=26f5ea5e141cf1e40289dbc73ac21e85ad39fa57", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do run } */\n+/* The checked bifs are only supported on 64-bit env.  */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target power10_hw } */\n+/* { dg-options \"-mdejagnu-cpu=power10 -O2 -ftree-vectorize -fno-vect-cost-model\" } */\n+\n+#include \"p10-bifs-vectorize-1.h\"\n+\n+/* Check if vectorized built-in functions run expectedly.  */\n+\n+/* Make optimize (1) to avoid vectorization applied on check func.  */\n+\n+#define CHECK(name)                                                           \\\n+  __attribute__ ((optimize (1))) void check_##name ()                         \\\n+  {                                                                           \\\n+    test_##name ();                                                           \\\n+    for (int i = 0; i < N; i++)                                               \\\n+      {                                                                       \\\n+\tuLL exp = __builtin_##name (ull_a[i], ull_b[i]);                      \\\n+\tif (exp != ull_c[i])                                                  \\\n+\t  __builtin_abort ();                                                 \\\n+      }                                                                       \\\n+  }\n+\n+CHECK (cfuged)\n+CHECK (cntlzdm)\n+CHECK (cnttzdm)\n+CHECK (pdepd)\n+CHECK (pextd)\n+\n+int\n+main ()\n+{\n+  for (int i = 0; i < N; i++)\n+    {\n+      ull_a[i] = 0x789a * (i * 11 - 5) - 0xcd1 * (i * 5 - 7);\n+      ull_b[i] = 0xfedc * (i * 7 + 3) + 0x467 * (i * 7 - 11);\n+    }\n+\n+  check_cfuged ();\n+  check_cntlzdm ();\n+  check_cnttzdm ();\n+  check_pdepd ();\n+  check_pextd ();\n+\n+  return 0;\n+}\n+"}]}