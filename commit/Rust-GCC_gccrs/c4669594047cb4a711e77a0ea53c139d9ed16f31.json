{"sha": "c4669594047cb4a711e77a0ea53c139d9ed16f31", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzQ2Njk1OTQwNDdjYjRhNzExZTc3YTBlYTUzYzEzOWQ5ZWQxNmYzMQ==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2012-07-20T12:25:55Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2012-07-20T12:25:55Z"}, "message": "basic-block.h (BB_FLAGS_TO_PRESERVE): New define.\n\ngcc/\n\t* basic-block.h (BB_FLAGS_TO_PRESERVE): New define.\n\t(brief_dump_cfg): Update prototype to take flags argument.\n\t(check_bb_profile): Remove prototype.\n\t* tracer.c (tracer): Update brief_dump_cfg calls.\n\t* cfghooks.c (dump_bb): Do not pass TDF_COMMENT to dump_bb_info.\n\tCall dump_bb_info before and after the cfghook dump_bb.  Terminate\n\tthe dump with a newline.\n\t(dump_flow_info): Do not call check_bb_profile.\n\t* cfg.c (clear_bb_flags): Update using BB_FLAGS_TO_PRESERVE.\n\t(check_bb_profile): Make static.  Take indent and flags arguments.\n\t(dump_bb_info): Always dump loop depth.  With TDF_DETAILS, call\n\tcheck_bb_profile.  Print one edge per line.\n\t(brief_dump_cfg): Take a flags argument, and filter out\n\tTDF_COMMENT and TDF_DETAILS.\n\t* pretty-print.c (pp_base_newline): Set pp_needs_newline to false.\n\t* gimple-pretty-print.c (dump_gimple_bb_header): Do not use dump_bb_info\n\there, it is already called from dump_bb.  Idem for check_bb_profile.\n\t(dump_gimple_bb_footer): Likewise.\n\t(gimple_dump_bb_buff): Call pp_flush after dump_gimple_stmt to\n\tavoid broken dumps for statement histograms.\n\t(gimple_dump_bb): Handle ENTRY_BLOCK and EXIT_BLOCK.  Do\n\tnot call pp_flush here, the buffer should be empty.\n\t* sched-rgn.c (debug_region): Pass TDF_BLOCKS to dump_bb.\n\t* sched-vis.c (debug_bb_slim): Likewise.\n\t* tree-cfg.c (remove_bb): Pass dump_flags to dump_bb.\n\t(gimple_debug_bb): Pass TDF_BLOCKS to dump_bb.\n\t(gimple_dump_cfg): Do brief_dump_cfg with TDF_COMMENT.\n\t(dump_function_to_file): Do not call check_bb_profile on\n\tENTRY_BLOCK and EXIT_BLOCK, check_bb_profile doesn't handle them.\n\tUse dump_bb instead of gimple_dump_bb.\n\t(print_loops_bb): Use dump_bb instead of gimple_dump_bb.\n\t* passes.c (execute_function_dump): Always call print_rtl_with_bb\n\tfor RTL dumps.\n\t* cfgrtl.c (print_rtl_with_bb): Handle printing without an up-to-date\n\tCFG.  With TDF_BLOCKS and TDF_DETAILS, do DF dumps at the top and bottom\n\tof each basic block.\n\ntestsuite/\n\t* gcc.dg/tree-prof/update-loopch.c: Look for counts on the dumps of\n\tthe basic block and check loop depth.\n\t* gcc.dg/tree-ssa/pr18133-1.c: Dump details, not blocks.  Update\n\tmatching patterns and comments.\n\t* gcc.dg/tree-ssa/20031021-1.c: Fix check patterns.\n\t* gcc.dg/tree-ssa/vector-2.c: Likewise.\n\nFrom-SVN: r189717", "tree": {"sha": "303d907b5ee72aaa7b209fd1bcaf4f0ab16f41b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/303d907b5ee72aaa7b209fd1bcaf4f0ab16f41b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c4669594047cb4a711e77a0ea53c139d9ed16f31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4669594047cb4a711e77a0ea53c139d9ed16f31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4669594047cb4a711e77a0ea53c139d9ed16f31", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4669594047cb4a711e77a0ea53c139d9ed16f31/comments", "author": null, "committer": null, "parents": [{"sha": "a09696774774031a39b305c94a71f3fc84140c45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a09696774774031a39b305c94a71f3fc84140c45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a09696774774031a39b305c94a71f3fc84140c45"}], "stats": {"total": 309, "additions": 207, "deletions": 102}, "files": [{"sha": "3bb9763337c287789f1e190f8bb4cb33f0a9e04e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 40, "deletions": 1, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4669594047cb4a711e77a0ea53c139d9ed16f31/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4669594047cb4a711e77a0ea53c139d9ed16f31/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c4669594047cb4a711e77a0ea53c139d9ed16f31", "patch": "@@ -1,3 +1,42 @@\n+2012-07-20  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* basic-block.h (BB_FLAGS_TO_PRESERVE): New define.\n+\t(brief_dump_cfg): Update prototype to take flags argument.\n+\t(check_bb_profile): Remove prototype.\n+\t* tracer.c (tracer): Update brief_dump_cfg calls.\n+\t* cfghooks.c (dump_bb): Do not pass TDF_COMMENT to dump_bb_info.\n+\tCall dump_bb_info before and after the cfghook dump_bb.  Terminate\n+\tthe dump with a newline.\n+\t(dump_flow_info): Do not call check_bb_profile.\n+\t* cfg.c (clear_bb_flags): Update using BB_FLAGS_TO_PRESERVE.\n+\t(check_bb_profile): Make static.  Take indent and flags arguments.\n+\t(dump_bb_info): Always dump loop depth.  With TDF_DETAILS, call\n+\tcheck_bb_profile.  Print one edge per line.\n+\t(brief_dump_cfg): Take a flags argument, and filter out\n+\tTDF_COMMENT and TDF_DETAILS.\n+\t* pretty-print.c (pp_base_newline): Set pp_needs_newline to false.\n+\t* gimple-pretty-print.c (dump_gimple_bb_header): Do not use dump_bb_info\n+\there, it is already called from dump_bb.  Idem for check_bb_profile.\n+\t(dump_gimple_bb_footer): Likewise.\n+\t(gimple_dump_bb_buff): Call pp_flush after dump_gimple_stmt to\n+\tavoid broken dumps for statement histograms.\n+\t(gimple_dump_bb): Handle ENTRY_BLOCK and EXIT_BLOCK.  Do\n+\tnot call pp_flush here, the buffer should be empty.\n+\t* sched-rgn.c (debug_region): Pass TDF_BLOCKS to dump_bb.\n+\t* sched-vis.c (debug_bb_slim): Likewise.\n+\t* tree-cfg.c (remove_bb): Pass dump_flags to dump_bb.\n+\t(gimple_debug_bb): Pass TDF_BLOCKS to dump_bb.\n+\t(gimple_dump_cfg): Do brief_dump_cfg with TDF_COMMENT.\n+\t(dump_function_to_file): Do not call check_bb_profile on\n+\tENTRY_BLOCK and EXIT_BLOCK, check_bb_profile doesn't handle them.\n+\tUse dump_bb instead of gimple_dump_bb.\n+\t(print_loops_bb): Use dump_bb instead of gimple_dump_bb.\n+\t* passes.c (execute_function_dump): Always call print_rtl_with_bb\n+\tfor RTL dumps.\n+\t* cfgrtl.c (print_rtl_with_bb): Handle printing without an up-to-date\n+\tCFG.  With TDF_BLOCKS and TDF_DETAILS, do DF dumps at the top and bottom\n+\tof each basic block.\n+\n 2012-07-20  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/54031\n@@ -1398,7 +1437,7 @@\n \t(flow_nodes_print): Remove.\n \t(flow_edge_list_print): Remove.\n \t(inverted_post_order_compute): Use FOR_ALL_BB.\n-\t*cfgrtl.c (dump_flow_info): Moved from cfg.c.\n+\t* cfgrtl.c (dump_flow_info): Moved from cfg.c.\n \tDo not call dump_reg_info.\n \t(debug_flow_info): Moved from cfg.c\n \t(dump_bb_info): Moved from cfg.c.  Take 'verbose' argument"}, {"sha": "24f178f3e75234c4d78346e642a772f72284e5ef", "filename": "gcc/basic-block.h", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4669594047cb4a711e77a0ea53c139d9ed16f31/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4669594047cb4a711e77a0ea53c139d9ed16f31/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=c4669594047cb4a711e77a0ea53c139d9ed16f31", "patch": "@@ -203,9 +203,15 @@ enum cfg_bb_flags\n };\n #undef DEF_BASIC_BLOCK_FLAG\n \n-/* Bit mask for all edge flags.  */\n+/* Bit mask for all basic block flags.  */\n #define BB_ALL_FLAGS\t\t((LAST_CFG_BB_FLAG - 1) * 2 - 1)\n \n+/* Bit mask for all basic block flags that must be preserved.  These are\n+   the bit masks that are *not* cleared by clear_bb_flags.  */\n+#define BB_FLAGS_TO_PRESERVE\t\t\t\t\t\\\n+  (BB_DISABLE_SCHEDULE | BB_RTL | BB_NON_LOCAL_GOTO_TARGET\t\\\n+   | BB_HOT_PARTITION | BB_COLD_PARTITION)\n+\n /* Dummy bitmask for convenience in the hot/cold partitioning code.  */\n #define BB_UNPARTITIONED\t0\n \n@@ -395,7 +401,7 @@ extern basic_block create_basic_block_structure (rtx, rtx, rtx, basic_block);\n extern void clear_bb_flags (void);\n extern void dump_bb_info (FILE *, basic_block, int, int, bool, bool);\n extern void dump_edge_info (FILE *, edge, int, int);\n-extern void brief_dump_cfg (FILE *);\n+extern void brief_dump_cfg (FILE *, int);\n extern void clear_edges (void);\n extern void scale_bbs_frequencies_int (basic_block *, int, int, int);\n extern void scale_bbs_frequencies_gcov_type (basic_block *, int, gcov_type,\n@@ -816,7 +822,6 @@ unsigned bb_dom_dfs_out (enum cdi_direction, basic_block);\n extern edge try_redirect_by_replacing_jump (edge, basic_block, bool);\n extern void break_superblocks (void);\n extern void relink_block_chain (bool);\n-extern void check_bb_profile (basic_block, FILE *);\n extern void update_bb_profile_for_threading (basic_block, int, gcov_type, edge);\n extern void init_rtl_bb_info (basic_block);\n "}, {"sha": "839b9b358cf4cfc077e16fd42926b3218ab6988e", "filename": "gcc/cfg-flags.def", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4669594047cb4a711e77a0ea53c139d9ed16f31/gcc%2Fcfg-flags.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4669594047cb4a711e77a0ea53c139d9ed16f31/gcc%2Fcfg-flags.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfg-flags.def?ref=c4669594047cb4a711e77a0ea53c139d9ed16f31", "patch": "@@ -90,8 +90,7 @@ DEF_BASIC_BLOCK_FLAG(MODIFIED, 12)\n DEF_BASIC_BLOCK_FLAG(VISITED, 13)\n \n /* Set on blocks that are in a transaction.  This is calculated on\n-   demand, and is available after calling\n-   compute_transaction_bits().  */\n+   demand, and is available after calling compute_transaction_bits().  */\n DEF_BASIC_BLOCK_FLAG(IN_TRANSACTION, 14)\n \n #endif"}, {"sha": "f8614074ff64a0c76740937882d52b3e53e9445b", "filename": "gcc/cfg.c", "status": "modified", "additions": 52, "deletions": 22, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4669594047cb4a711e77a0ea53c139d9ed16f31/gcc%2Fcfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4669594047cb4a711e77a0ea53c139d9ed16f31/gcc%2Fcfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfg.c?ref=c4669594047cb4a711e77a0ea53c139d9ed16f31", "patch": "@@ -382,30 +382,31 @@ redirect_edge_pred (edge e, basic_block new_pred)\n   connect_src (e);\n }\n \n-/* Clear all basic block flags, with the exception of partitioning and\n-   setjmp_target.  */\n+/* Clear all basic block flags that do not have to be preserved.  */\n void\n clear_bb_flags (void)\n {\n   basic_block bb;\n \n   FOR_BB_BETWEEN (bb, ENTRY_BLOCK_PTR, NULL, next_bb)\n-    bb->flags = (BB_PARTITION (bb)\n-\t\t | (bb->flags & (BB_DISABLE_SCHEDULE + BB_RTL + BB_NON_LOCAL_GOTO_TARGET)));\n+    bb->flags &= BB_FLAGS_TO_PRESERVE;\n }\n \f\n /* Check the consistency of profile information.  We can't do that\n    in verify_flow_info, as the counts may get invalid for incompletely\n    solved graphs, later eliminating of conditionals or roundoff errors.\n    It is still practical to have them reported for debugging of simple\n    testcases.  */\n-void\n-check_bb_profile (basic_block bb, FILE * file)\n+static void\n+check_bb_profile (basic_block bb, FILE * file, int indent, int flags)\n {\n   edge e;\n   int sum = 0;\n   gcov_type lsum;\n   edge_iterator ei;\n+  char *s_indent = (char *) alloca ((size_t) indent + 1);\n+  memset ((void *) s_indent, ' ', (size_t) indent);\n+  s_indent[indent] = '\\0';\n \n   if (profile_status == PROFILE_ABSENT)\n     return;\n@@ -415,14 +416,16 @@ check_bb_profile (basic_block bb, FILE * file)\n       FOR_EACH_EDGE (e, ei, bb->succs)\n \tsum += e->probability;\n       if (EDGE_COUNT (bb->succs) && abs (sum - REG_BR_PROB_BASE) > 100)\n-\tfprintf (file, \"Invalid sum of outgoing probabilities %.1f%%\\n\",\n+\tfprintf (file, \"%s%sInvalid sum of outgoing probabilities %.1f%%\\n\",\n+\t\t (flags & TDF_COMMENT) ? \";; \" : \"\", s_indent,\n \t\t sum * 100.0 / REG_BR_PROB_BASE);\n       lsum = 0;\n       FOR_EACH_EDGE (e, ei, bb->succs)\n \tlsum += e->count;\n       if (EDGE_COUNT (bb->succs)\n \t  && (lsum - bb->count > 100 || lsum - bb->count < -100))\n-\tfprintf (file, \"Invalid sum of outgoing counts %i, should be %i\\n\",\n+\tfprintf (file, \"%s%sInvalid sum of outgoing counts %i, should be %i\\n\",\n+\t\t (flags & TDF_COMMENT) ? \";; \" : \"\", s_indent,\n \t\t (int) lsum, (int) bb->count);\n     }\n   if (bb != ENTRY_BLOCK_PTR)\n@@ -432,13 +435,15 @@ check_bb_profile (basic_block bb, FILE * file)\n \tsum += EDGE_FREQUENCY (e);\n       if (abs (sum - bb->frequency) > 100)\n \tfprintf (file,\n-\t\t \"Invalid sum of incoming frequencies %i, should be %i\\n\",\n+\t\t \"%s%sInvalid sum of incoming frequencies %i, should be %i\\n\",\n+\t\t (flags & TDF_COMMENT) ? \";; \" : \"\", s_indent,\n \t\t sum, bb->frequency);\n       lsum = 0;\n       FOR_EACH_EDGE (e, ei, bb->preds)\n \tlsum += e->count;\n       if (lsum - bb->count > 100 || lsum - bb->count < -100)\n-\tfprintf (file, \"Invalid sum of incoming counts %i, should be %i\\n\",\n+\tfprintf (file, \"%s%sInvalid sum of incoming counts %i, should be %i\\n\",\n+\t\t (flags & TDF_COMMENT) ? \";; \" : \"\", s_indent,\n \t\t (int) lsum, (int) bb->count);\n     }\n }\n@@ -679,6 +684,7 @@ dump_bb_info (FILE *outf, basic_block bb, int indent, int flags,\n #undef DEF_BASIC_BLOCK_FLAG\n     };\n   const unsigned n_bitnames = sizeof (bb_bitnames) / sizeof (char *);\n+  bool first;\n   char *s_indent = (char *) alloca ((size_t) indent + 1);\n   memset ((void *) s_indent, ' ', (size_t) indent);\n   s_indent[indent] = '\\0';\n@@ -691,23 +697,24 @@ dump_bb_info (FILE *outf, basic_block bb, int indent, int flags,\n \n       if (flags & TDF_COMMENT)\n \tfputs (\";; \", outf);\n-      fprintf (outf, \"%sbasic block %d\", s_indent, bb->index);\n+      fprintf (outf, \"%sbasic block %d, loop depth %d\",\n+\t       s_indent, bb->index, bb->loop_depth);\n       if (flags & TDF_DETAILS)\n \t{\n-\t  fprintf (outf, \", loop depth %d, count \" HOST_WIDEST_INT_PRINT_DEC,\n-\t\t   bb->loop_depth, (HOST_WIDEST_INT) bb->count);\n+\t  fprintf (outf, \", count \" HOST_WIDEST_INT_PRINT_DEC,\n+\t\t   (HOST_WIDEST_INT) bb->count);\n \t  fprintf (outf, \", freq %i\", bb->frequency);\n \t  if (maybe_hot_bb_p (bb))\n \t    fputs (\", maybe hot\", outf);\n \t  if (probably_never_executed_bb_p (bb))\n \t    fputs (\", probably never executed\", outf);\n \t}\n       fputc ('\\n', outf);\n+      if (TDF_DETAILS)\n+\tcheck_bb_profile (bb, outf, indent, flags);\n \n       if (flags & TDF_DETAILS)\n \t{\n-\t  bool first = true;\n-\n \t  if (flags & TDF_COMMENT)\n \t    fputs (\";; \", outf);\n \t  fprintf (outf, \"%s prev block \", s_indent);\n@@ -722,6 +729,7 @@ dump_bb_info (FILE *outf, basic_block bb, int indent, int flags,\n \t    fprintf (outf, \"(nil)\");\n \n \t  fputs (\", flags:\", outf);\n+\t  first = true;\n \t  for (i = 0; i < n_bitnames; i++)\n \t    if (bb->flags & (1 << i))\n \t      {\n@@ -734,38 +742,60 @@ dump_bb_info (FILE *outf, basic_block bb, int indent, int flags,\n \t      }\n \t  if (!first)\n \t    fputc (')', outf);\n+\t  fputc ('\\n', outf);\n \t}\n-      fputc ('\\n', outf);\n \n       if (flags & TDF_COMMENT)\n \tfputs (\";; \", outf);\n       fprintf (outf, \"%s pred:      \", s_indent);\n+      first = true;\n       FOR_EACH_EDGE (e, ei, bb->preds)\n-\tdump_edge_info (outf, e, flags, 0);\n-      fputc ('\\n', outf);\n+\t{\n+\t  if (! first)\n+\t    {\n+\t      if (flags & TDF_COMMENT)\n+\t\tfputs (\";; \", outf);\n+\t      fprintf (outf, \"%s            \", s_indent);\n+\t    }\n+\t  first = false;\n+\t  dump_edge_info (outf, e, flags, 0);\n+\t  fputc ('\\n', outf);\n+\t}\n     }\n \n   if (do_footer)\n     {\n       if (flags & TDF_COMMENT)\n \tfputs (\";; \", outf);\n       fprintf (outf, \"%s succ:      \", s_indent);\n+      first = true;\n       FOR_EACH_EDGE (e, ei, bb->succs)\n-\tdump_edge_info (outf, e, flags, 1);\n-      fputs (\"\\n\\n\", outf);\n+        {\n+\t  if (! first)\n+\t    {\n+\t      if (flags & TDF_COMMENT)\n+\t\tfputs (\";; \", outf);\n+\t      fprintf (outf, \"%s            \", s_indent);\n+\t    }\n+\t  first = false;\n+\t  dump_edge_info (outf, e, flags, 1);\n+\t  fputc ('\\n', outf);\n+\t}\n     }\n }\n \n /* Dumps a brief description of cfg to FILE.  */\n \n void\n-brief_dump_cfg (FILE *file)\n+brief_dump_cfg (FILE *file, int flags)\n {\n   basic_block bb;\n \n   FOR_EACH_BB (bb)\n     {\n-      dump_bb_info (file, bb, 0, 0, true, true);\n+      dump_bb_info (file, bb, 0,\n+\t\t    flags & (TDF_COMMENT | TDF_DETAILS),\n+\t\t    true, true);\n     }\n }\n "}, {"sha": "be117cfbacf7833517f9962b1d2323200a9e3343", "filename": "gcc/cfghooks.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4669594047cb4a711e77a0ea53c139d9ed16f31/gcc%2Fcfghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4669594047cb4a711e77a0ea53c139d9ed16f31/gcc%2Fcfghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfghooks.c?ref=c4669594047cb4a711e77a0ea53c139d9ed16f31", "patch": "@@ -271,9 +271,11 @@ verify_flow_info (void)\n void\n dump_bb (FILE *outf, basic_block bb, int indent, int flags)\n {\n-  dump_bb_info (outf, bb, indent, flags | TDF_COMMENT, true, true);\n+  dump_bb_info (outf, bb, indent, flags, true, false);\n   if (cfg_hooks->dump_bb)\n     cfg_hooks->dump_bb (outf, bb, indent, flags);\n+  dump_bb_info (outf, bb, indent, flags, false, true);\n+  fputc ('\\n', outf);\n }\n \n /* Dump the complete CFG to FILE.  FLAGS are the TDF_* flags in dumpfile.h.  */\n@@ -284,10 +286,7 @@ dump_flow_info (FILE *file, int flags)\n \n   fprintf (file, \"\\n%d basic blocks, %d edges.\\n\", n_basic_blocks, n_edges);\n   FOR_ALL_BB (bb)\n-    {\n-      dump_bb (file, bb, 0, flags);\n-      check_bb_profile (bb, file);\n-    }\n+    dump_bb (file, bb, 0, flags);\n \n   putc ('\\n', file);\n }"}, {"sha": "2bf22d86880a8bb8d5736731f9ef388f0d13cde3", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 50, "deletions": 27, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4669594047cb4a711e77a0ea53c139d9ed16f31/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4669594047cb4a711e77a0ea53c139d9ed16f31/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=c4669594047cb4a711e77a0ea53c139d9ed16f31", "patch": "@@ -1875,8 +1875,9 @@ rtl_dump_bb (FILE *outf, basic_block bb, int indent, int flags)\n \n }\n \f\n-/* Like print_rtl, but also print out live information for the start of each\n-   basic block.  FLAGS are the flags documented in dumpfile.h.  */\n+/* Like dump_function_to_file, but for RTL.  Print out dataflow information\n+   for the start of each basic block.  FLAGS are the TDF_* masks documented\n+   in dumpfile.h.  */\n \n void\n print_rtl_with_bb (FILE *outf, const_rtx rtx_first, int flags)\n@@ -1891,52 +1892,74 @@ print_rtl_with_bb (FILE *outf, const_rtx rtx_first, int flags)\n       basic_block *start = XCNEWVEC (basic_block, max_uid);\n       basic_block *end = XCNEWVEC (basic_block, max_uid);\n       enum bb_state *in_bb_p = XCNEWVEC (enum bb_state, max_uid);\n-\n       basic_block bb;\n \n+      /* After freeing the CFG, we still have BLOCK_FOR_INSN set on most\n+\t insns, but the CFG is not maintained so the basic block info\n+\t is not reliable.  Therefore it's omitted from the dumps.  */\n+      if (! (cfun->curr_properties & PROP_cfg))\n+        flags &= ~TDF_BLOCKS;\n+\n       if (df)\n \tdf_dump_start (outf);\n \n-      FOR_EACH_BB_REVERSE (bb)\n+      if (flags & TDF_BLOCKS)\n \t{\n-\t  rtx x;\n-\n-\t  start[INSN_UID (BB_HEAD (bb))] = bb;\n-\t  end[INSN_UID (BB_END (bb))] = bb;\n-\t  for (x = BB_HEAD (bb); x != NULL_RTX; x = NEXT_INSN (x))\n+\t  FOR_EACH_BB_REVERSE (bb)\n \t    {\n-\t      enum bb_state state = IN_MULTIPLE_BB;\n+\t      rtx x;\n+\n+\t      start[INSN_UID (BB_HEAD (bb))] = bb;\n+\t      end[INSN_UID (BB_END (bb))] = bb;\n+\t      for (x = BB_HEAD (bb); x != NULL_RTX; x = NEXT_INSN (x))\n+\t\t{\n+\t\t  enum bb_state state = IN_MULTIPLE_BB;\n \n-\t      if (in_bb_p[INSN_UID (x)] == NOT_IN_BB)\n-\t\tstate = IN_ONE_BB;\n-\t      in_bb_p[INSN_UID (x)] = state;\n+\t\t  if (in_bb_p[INSN_UID (x)] == NOT_IN_BB)\n+\t\t    state = IN_ONE_BB;\n+\t\t  in_bb_p[INSN_UID (x)] = state;\n \n-\t      if (x == BB_END (bb))\n-\t\tbreak;\n+\t\t  if (x == BB_END (bb))\n+\t\t    break;\n+\t\t}\n \t    }\n \t}\n \n       for (tmp_rtx = rtx_first; NULL != tmp_rtx; tmp_rtx = NEXT_INSN (tmp_rtx))\n \t{\n-\t  bb = start[INSN_UID (tmp_rtx)];\n-\t  if (bb != NULL)\n-\t    dump_bb_info (outf, bb, 0, dump_flags | TDF_COMMENT, true, false);\n+\t  if (flags & TDF_BLOCKS)\n+\t    {\n+\t      bb = start[INSN_UID (tmp_rtx)];\n+\t      if (bb != NULL)\n+\t\t{\n+\t\t  dump_bb_info (outf, bb, 0, dump_flags | TDF_COMMENT, true, false);\n+\t\t  if (df && (flags & TDF_DETAILS))\n+\t\t    df_dump_top (bb, outf);\n+\t\t}\n \n-\t  if (in_bb_p[INSN_UID (tmp_rtx)] == NOT_IN_BB\n-\t      && !NOTE_P (tmp_rtx)\n-\t      && !BARRIER_P (tmp_rtx))\n-\t    fprintf (outf, \";; Insn is not within a basic block\\n\");\n-\t  else if (in_bb_p[INSN_UID (tmp_rtx)] == IN_MULTIPLE_BB)\n-\t    fprintf (outf, \";; Insn is in multiple basic blocks\\n\");\n+\t      if (in_bb_p[INSN_UID (tmp_rtx)] == NOT_IN_BB\n+\t\t  && !NOTE_P (tmp_rtx)\n+\t\t  && !BARRIER_P (tmp_rtx))\n+\t\tfprintf (outf, \";; Insn is not within a basic block\\n\");\n+\t      else if (in_bb_p[INSN_UID (tmp_rtx)] == IN_MULTIPLE_BB)\n+\t\tfprintf (outf, \";; Insn is in multiple basic blocks\\n\");\n+\t    }\n \n \t  if (! (flags & TDF_SLIM))\n \t    print_rtl_single (outf, tmp_rtx);\n \t  else\n \t    dump_insn_slim (outf, tmp_rtx);\n \n-\t  bb = end[INSN_UID (tmp_rtx)];\n-\t  if (bb != NULL)\n-\t    dump_bb_info (outf, bb, 0, dump_flags | TDF_COMMENT, false, true);\n+\t  if (flags & TDF_BLOCKS)\n+\t    {\n+\t      bb = end[INSN_UID (tmp_rtx)];\n+\t      if (bb != NULL)\n+\t\t{\n+\t\t  dump_bb_info (outf, bb, 0, dump_flags | TDF_COMMENT, false, true);\n+\t\t  if (df && (flags & TDF_DETAILS))\n+\t\t    df_dump_bottom (bb, outf);\n+\t\t}\n+\t    }\n \n \t  putc ('\\n', outf);\n \t}"}, {"sha": "ce9a3ac880d8b5d9eb9a81e3663614aa06f25fc1", "filename": "gcc/gimple-pretty-print.c", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4669594047cb4a711e77a0ea53c139d9ed16f31/gcc%2Fgimple-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4669594047cb4a711e77a0ea53c139d9ed16f31/gcc%2Fgimple-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-pretty-print.c?ref=c4669594047cb4a711e77a0ea53c139d9ed16f31", "patch": "@@ -115,7 +115,9 @@ print_gimple_expr (FILE *file, gimple g, int spc, int flags)\n \n \n /* Print the GIMPLE sequence SEQ on BUFFER using SPC indentantion\n-   spaces and FLAGS as in dump_gimple_stmt.  */\n+   spaces and FLAGS as in dump_gimple_stmt.\n+   The caller is responsible for calling pp_flush on BUFFER to finalize\n+   the pretty printer.  */\n \n static void\n dump_gimple_seq (pretty_printer *buffer, gimple_seq seq, int spc, int flags)\n@@ -1578,8 +1580,9 @@ dump_gimple_asm (pretty_printer *buffer, gimple gs, int spc, int flags)\n }\n \n \n-/* Dump a PHI node PHI.  BUFFER, SPC and FLAGS are as in\n-   dump_gimple_stmt.  */\n+/* Dump a PHI node PHI.  BUFFER, SPC and FLAGS are as in dump_gimple_stmt.\n+   The caller is responsible for calling pp_flush on BUFFER to finalize\n+   pretty printer.  */\n \n static void\n dump_gimple_phi (pretty_printer *buffer, gimple phi, int spc, int flags)\n@@ -1843,7 +1846,8 @@ dump_gimple_mem_ops (pretty_printer *buffer, gimple gs, int spc, int flags)\n \n /* Dump the gimple statement GS on the pretty printer BUFFER, SPC\n    spaces of indent.  FLAGS specifies details to show in the dump (see\n-   TDF_* in dumpfile.h).  */\n+   TDF_* in dumpfile.h).  The caller is responsible for calling\n+   pp_flush on BUFFER to finalize the pretty printer.  */\n \n void\n dump_gimple_stmt (pretty_printer *buffer, gimple gs, int spc, int flags)\n@@ -2067,8 +2071,6 @@ dump_gimple_bb_header (FILE *outf, basic_block bb, int indent, int flags)\n {\n   if (flags & TDF_BLOCKS)\n     {\n-      dump_bb_info (outf, bb, indent, flags, true, false);\n-\n       if (flags & TDF_LINENO)\n \t{\n \t  gimple_stmt_iterator gsi;\n@@ -2103,18 +2105,20 @@ dump_gimple_bb_header (FILE *outf, basic_block bb, int indent, int flags)\n \t  fprintf (outf, \"%s<bb %d>:\\n\", s_indent, bb->index);\n \t}\n     }\n-  if (cfun)\n-    check_bb_profile (bb, outf);\n }\n \n \n /* Dumps end of basic block BB to buffer BUFFER indented by INDENT\n    spaces.  */\n \n static void\n-dump_gimple_bb_footer (FILE *outf, basic_block bb, int indent, int flags)\n+dump_gimple_bb_footer (FILE *outf ATTRIBUTE_UNUSED,\n+\t\t       basic_block bb ATTRIBUTE_UNUSED,\n+\t\t       int indent ATTRIBUTE_UNUSED,\n+\t\t       int flags ATTRIBUTE_UNUSED)\n {\n-  dump_bb_info (outf, bb, indent, flags, false, true);\n+  /* There is currently no GIMPLE-specific basic block info to dump.  */\n+  return;\n }\n \n \n@@ -2256,7 +2260,7 @@ gimple_dump_bb_buff (pretty_printer *buffer, basic_block bb, int indent,\n \n       INDENT (curr_indent);\n       dump_gimple_stmt (buffer, stmt, curr_indent, flags);\n-      pp_newline (buffer);\n+      pp_flush (buffer);\n       dump_histograms_for_stmt (cfun, buffer->buffer->stream, stmt);\n     }\n \n@@ -2271,8 +2275,10 @@ void\n gimple_dump_bb (FILE *file, basic_block bb, int indent, int flags)\n {\n   dump_gimple_bb_header (file, bb, indent, flags);\n-  maybe_init_pretty_print (file);\n-  gimple_dump_bb_buff (&buffer, bb, indent, flags);\n-  pp_flush (&buffer);\n+  if (bb->index >= NUM_FIXED_BLOCKS)\n+    {\n+      maybe_init_pretty_print (file);\n+      gimple_dump_bb_buff (&buffer, bb, indent, flags);\n+    }\n   dump_gimple_bb_footer (file, bb, indent, flags);\n }"}, {"sha": "7709671a052feac38af2dc434fafee7e4c033af1", "filename": "gcc/passes.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4669594047cb4a711e77a0ea53c139d9ed16f31/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4669594047cb4a711e77a0ea53c139d9ed16f31/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=c4669594047cb4a711e77a0ea53c139d9ed16f31", "patch": "@@ -1725,11 +1725,7 @@ execute_function_dump (void *data ATTRIBUTE_UNUSED)\n         dump_function_to_file (current_function_decl, dump_file, dump_flags);\n       else\n \t{\n-\t  if ((cfun->curr_properties & PROP_cfg)\n-\t      && (dump_flags & TDF_BLOCKS))\n-\t    print_rtl_with_bb (dump_file, get_insns (), dump_flags);\n-          else\n-\t    print_rtl (dump_file, get_insns ());\n+\t  print_rtl_with_bb (dump_file, get_insns (), dump_flags);\n \n \t  if ((cfun->curr_properties & PROP_cfg)\n \t      && graph_dump_format != no_graph"}, {"sha": "4033ba38715d5d09c13caa1dbd4b3cb3312771be", "filename": "gcc/pretty-print.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4669594047cb4a711e77a0ea53c139d9ed16f31/gcc%2Fpretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4669594047cb4a711e77a0ea53c139d9ed16f31/gcc%2Fpretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpretty-print.c?ref=c4669594047cb4a711e77a0ea53c139d9ed16f31", "patch": "@@ -759,6 +759,7 @@ void\n pp_base_newline (pretty_printer *pp)\n {\n   obstack_1grow (pp->buffer->obstack, '\\n');\n+  pp_needs_newline (pp) = false;\n   pp->buffer->line_length = 0;\n }\n "}, {"sha": "1dd0d814a452082894131eea4858541a77ccc291", "filename": "gcc/sched-rgn.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4669594047cb4a711e77a0ea53c139d9ed16f31/gcc%2Fsched-rgn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4669594047cb4a711e77a0ea53c139d9ed16f31/gcc%2Fsched-rgn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-rgn.c?ref=c4669594047cb4a711e77a0ea53c139d9ed16f31", "patch": "@@ -397,7 +397,7 @@ debug_region (int rgn)\n   for (bb = 0; bb < rgn_table[rgn].rgn_nr_blocks; bb++)\n     {\n       dump_bb (stderr, BASIC_BLOCK (rgn_bb_table[current_blocks + bb]),\n-\t       0, TDF_SLIM);\n+\t       0, TDF_SLIM | TDF_BLOCKS);\n       fprintf (stderr, \"\\n\");\n     }\n "}, {"sha": "d5a8747169a4526319c3e8d3d5ec7fc5703955eb", "filename": "gcc/sched-vis.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4669594047cb4a711e77a0ea53c139d9ed16f31/gcc%2Fsched-vis.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4669594047cb4a711e77a0ea53c139d9ed16f31/gcc%2Fsched-vis.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-vis.c?ref=c4669594047cb4a711e77a0ea53c139d9ed16f31", "patch": "@@ -810,7 +810,7 @@ extern void debug_bb_slim (basic_block);\n DEBUG_FUNCTION void\n debug_bb_slim (basic_block bb)\n {\n-  dump_bb (stderr, bb, 0, TDF_SLIM);\n+  dump_bb (stderr, bb, 0, TDF_SLIM | TDF_BLOCKS);\n }\n \n extern void debug_bb_n_slim (int);"}, {"sha": "56aace37ff451b4d90bc8e93162022b4ca1dc3be", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4669594047cb4a711e77a0ea53c139d9ed16f31/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4669594047cb4a711e77a0ea53c139d9ed16f31/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c4669594047cb4a711e77a0ea53c139d9ed16f31", "patch": "@@ -1,3 +1,12 @@\n+2012-07-20  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* gcc.dg/tree-prof/update-loopch.c: Look for counts on the dumps of\n+\tthe basic block and check loop depth.\n+\t* gcc.dg/tree-ssa/pr18133-1.c: Dump details, not blocks.  Update\n+\tmatching patterns and comments.\n+\t* gcc.dg/tree-ssa/20031021-1.c: Fix check patterns.\n+\t* gcc.dg/tree-ssa/vector-2.c: Likewise.\n+\n 2012-07-20  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/28656"}, {"sha": "3388996a8c9d33e26773dd91dc022394c4e0f70b", "filename": "gcc/testsuite/gcc.dg/tree-prof/update-loopch.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4669594047cb4a711e77a0ea53c139d9ed16f31/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fupdate-loopch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4669594047cb4a711e77a0ea53c139d9ed16f31/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fupdate-loopch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fupdate-loopch.c?ref=c4669594047cb4a711e77a0ea53c139d9ed16f31", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-options \"-O2 -fdump-ipa-profile-blocks -fdump-tree-optimized-blocks\" } */\n+/* { dg-options \"-O2 -fdump-ipa-profile-details -fdump-tree-optimized-details\" } */\n int max = 33333;\n int a[8];\n int\n@@ -14,8 +14,8 @@ main ()\n /* Loop header copying will peel away the initial conditional, so the loop body\n    is once reached directly from entry point of function, rest via loopback\n    edge.  */\n-/* { dg-final-use { scan-ipa-dump \"count:33333\" \"profile\"} } */\n-/* { dg-final-use { scan-tree-dump \"count:33332\" \"optimized\"} } */\n+/* { dg-final-use { scan-ipa-dump \"loop depth 1, count 33334\" \"profile\"} } */\n+/* { dg-final-use { scan-tree-dump \"loop depth 1, count 33332\" \"optimized\"} } */\n /* { dg-final-use { scan-tree-dump-not \"Invalid sum\" \"optimized\"} } */\n /* { dg-final-use { cleanup-ipa-dump \"profile\" } } */\n /* { dg-final-use { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "7c34ff4496ac295ef921afa6410f764091e8b9fb", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20031021-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4669594047cb4a711e77a0ea53c139d9ed16f31/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20031021-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4669594047cb4a711e77a0ea53c139d9ed16f31/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20031021-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20031021-1.c?ref=c4669594047cb4a711e77a0ea53c139d9ed16f31", "patch": "@@ -17,5 +17,5 @@ int main()\n }\n \n /* We should only store to a.i, not load from it.  */\n-/* { dg-final { scan-tree-dump-times \"a.i\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \"= a.i\" \"optimized\" } } */\n /* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "8a26479e2944f67cbbefae2c0dd42a3b830afea9", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr18133-1.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4669594047cb4a711e77a0ea53c139d9ed16f31/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr18133-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4669594047cb4a711e77a0ea53c139d9ed16f31/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr18133-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr18133-1.c?ref=c4669594047cb4a711e77a0ea53c139d9ed16f31", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -fdump-tree-optimized-blocks\" } */\n+/* { dg-options \"-O1 -fdump-tree-optimized-details\" } */\n \n void foo (void)\n {\n@@ -12,17 +12,17 @@ return;\n \n /* The goto &L0 should have been optimized away during CFG\n    cleanups.  */\n-/* { dg-final { scan-tree-dump-times \"goto &L0\" 0 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \"goto &L0\" \"optimized\" } } */\n \n /* There should not be any abnormal edges as DOM removed the\n    computed goto.  */\n \n-/* { dg-final { scan-tree-dump-times \"ab\" 0 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \"ABNORMAL\" \"optimized\" } } */\n \n /* And verify that we have fixed the fallthru flag as well. \n    After DOM we will have two fallthru edges (e->0, 0->1),\n-   but in the dump files we mention the 0->1 two times.  So\n-   scan for 3 instances of \"fallthru\".  */\n+   but in the dump files we mention the 2->3 two times.  So\n+   scan for 3 instances of \"FALLTHRU\".  */\n \n-/* { dg-final { scan-tree-dump-times \"fallthru\" 3 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"FALLTHRU\" 3 \"optimized\" } } */\n /* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "2d214df40952b8a742e1e6d9c77e3faef666254d", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vector-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4669594047cb4a711e77a0ea53c139d9ed16f31/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvector-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4669594047cb4a711e77a0ea53c139d9ed16f31/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvector-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvector-2.c?ref=c4669594047cb4a711e77a0ea53c139d9ed16f31", "patch": "@@ -17,7 +17,7 @@ float f(vector float a, int b, vector float c)\n }\n \n /* We should be able to optimize this to just \"return 0.0;\" */\n-/* { dg-final { scan-tree-dump-times \"BIT_FIELD_REF\" 0 \"optimized\"} } */\n-/* { dg-final { scan-tree-dump-times \"0.0\" 1 \"optimized\"} } */\n+/* { dg-final { scan-tree-dump-not \"BIT_FIELD_REF\" \"optimized\"} } */\n+/* { dg-final { scan-tree-dump-times \"return 0.0\" 1 \"optimized\"} } */\n \n /* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "f60f3486e124a419b5a763fc5359689073b16557", "filename": "gcc/tracer.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4669594047cb4a711e77a0ea53c139d9ed16f31/gcc%2Ftracer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4669594047cb4a711e77a0ea53c139d9ed16f31/gcc%2Ftracer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftracer.c?ref=c4669594047cb4a711e77a0ea53c139d9ed16f31", "patch": "@@ -374,15 +374,15 @@ tracer (void)\n \n   mark_dfs_back_edges ();\n   if (dump_file)\n-    brief_dump_cfg (dump_file);\n+    brief_dump_cfg (dump_file, dump_flags);\n \n   /* Trace formation is done on the fly inside tail_duplicate */\n   changed = tail_duplicate ();\n   if (changed)\n     free_dominance_info (CDI_DOMINATORS);\n \n   if (dump_file)\n-    brief_dump_cfg (dump_file);\n+    brief_dump_cfg (dump_file, dump_flags);\n \n   return changed ? TODO_cleanup_cfg : 0;\n }"}, {"sha": "c9187b924565fc0406d6ac2d610f9f7681a5605d", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4669594047cb4a711e77a0ea53c139d9ed16f31/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4669594047cb4a711e77a0ea53c139d9ed16f31/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=c4669594047cb4a711e77a0ea53c139d9ed16f31", "patch": "@@ -1844,7 +1844,7 @@ remove_bb (basic_block bb)\n       fprintf (dump_file, \"Removing basic block %d\\n\", bb->index);\n       if (dump_flags & TDF_DETAILS)\n \t{\n-\t  dump_bb (dump_file, bb, 0, 0);\n+\t  dump_bb (dump_file, bb, 0, dump_flags);\n \t  fprintf (dump_file, \"\\n\");\n \t}\n     }\n@@ -2063,7 +2063,7 @@ find_case_label_for_value (gimple switch_stmt, tree val)\n void\n gimple_debug_bb (basic_block bb)\n {\n-  dump_bb (stderr, bb, 0, TDF_VOPS|TDF_MEMSYMS);\n+  dump_bb (stderr, bb, 0, TDF_VOPS|TDF_MEMSYMS|TDF_BLOCKS);\n }\n \n \n@@ -2103,7 +2103,7 @@ gimple_dump_cfg (FILE *file, int flags)\n       fprintf (file, \";; \\n%d basic blocks, %d edges, last basic block %d.\\n\\n\",\n \t       n_basic_blocks, n_edges, last_basic_block);\n \n-      brief_dump_cfg (file);\n+      brief_dump_cfg (file, flags | TDF_COMMENT);\n       fprintf (file, \"\\n\");\n     }\n \n@@ -6687,18 +6687,16 @@ dump_function_to_file (tree fn, FILE *file, int flags)\n   if (cfun && cfun->decl == fn && cfun->cfg && basic_block_info)\n     {\n       /* If the CFG has been built, emit a CFG-based dump.  */\n-      check_bb_profile (ENTRY_BLOCK_PTR, file);\n       if (!ignore_topmost_bind)\n \tfprintf (file, \"{\\n\");\n \n       if (any_var && n_basic_blocks)\n \tfprintf (file, \"\\n\");\n \n       FOR_EACH_BB (bb)\n-\tgimple_dump_bb (file, bb, 2, flags);\n+\tdump_bb (file, bb, 2, flags | TDF_COMMENT);\n \n       fprintf (file, \"}\\n\");\n-      check_bb_profile (EXIT_BLOCK_PTR, file);\n     }\n   else if (DECL_SAVED_TREE (fn) == NULL)\n     {\n@@ -6821,7 +6819,7 @@ print_loops_bb (FILE *file, basic_block bb, int indent, int verbosity)\n   if (verbosity >= 3)\n     {\n       fprintf (file, \"%s  {\\n\", s_indent);\n-      gimple_dump_bb (file, bb, indent + 4, TDF_VOPS|TDF_MEMSYMS);\n+      dump_bb (file, bb, indent + 4, TDF_VOPS|TDF_MEMSYMS);\n       fprintf (file, \"%s  }\\n\", s_indent);\n     }\n }"}]}