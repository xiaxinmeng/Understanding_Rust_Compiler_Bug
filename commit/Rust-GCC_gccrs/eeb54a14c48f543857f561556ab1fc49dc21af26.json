{"sha": "eeb54a14c48f543857f561556ab1fc49dc21af26", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWViNTRhMTRjNDhmNTQzODU3ZjU2MTU1NmFiMWZjNDlkYzIxYWYyNg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-06-04T07:09:01Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-06-04T07:09:01Z"}, "message": "c++: Reject some further reinterpret casts in constexpr [PR82304, PR95307]\n\ncxx_eval_outermost_constant_expr had a check for reinterpret_casts from\npointers (well, it checked from ADDR_EXPRs) to integral type, but that\nonly caught such cases at the toplevel of expressions.\nAs the comment said, it should be done even inside of the expressions,\nbut at the point of the writing e.g. pointer differences used to be a\nproblem.  We now have POINTER_DIFF_EXPR, so this is no longer an issue.\n\nHad to do it just for CONVERT_EXPR, because the FE emits NOP_EXPR casts\nfrom pointers to integrals in various spots, e.g. for the PMR & 1 tests,\nthough on NOP_EXPR we have the REINTERPRET_CAST_P bit that we do check,\nwhile on CONVERT_EXPR we don't.\n\n2020-06-04  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/82304\n\tPR c++/95307\n\t* constexpr.c (cxx_eval_constant_expression): Diagnose CONVERT_EXPR\n\tconversions from pointer types to arithmetic types here...\n\t(cxx_eval_outermost_constant_expr): ... instead of here.\n\n\t* g++.dg/template/pr79650.C: Expect different diagnostics and expect\n\tit on all lines that do pointer to integer casts.\n\t* g++.dg/cpp1y/constexpr-shift1.C: Expect different diagnostics.\n\t* g++.dg/cpp1y/constexpr-82304.C: New test.\n\t* g++.dg/cpp0x/constexpr-95307.C: New test.", "tree": {"sha": "95500253f7dcd78bb2d1f598b93675917cb3e32f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/95500253f7dcd78bb2d1f598b93675917cb3e32f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eeb54a14c48f543857f561556ab1fc49dc21af26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eeb54a14c48f543857f561556ab1fc49dc21af26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eeb54a14c48f543857f561556ab1fc49dc21af26", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eeb54a14c48f543857f561556ab1fc49dc21af26/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a5b7438c85a926a0dba9dc980039f3d67571763", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a5b7438c85a926a0dba9dc980039f3d67571763", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a5b7438c85a926a0dba9dc980039f3d67571763"}], "stats": {"total": 58, "additions": 38, "deletions": 20}, "files": [{"sha": "c7d17e9b86e0b6055b97e353256ca7e075fe571c", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeb54a14c48f543857f561556ab1fc49dc21af26/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeb54a14c48f543857f561556ab1fc49dc21af26/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=eeb54a14c48f543857f561556ab1fc49dc21af26", "patch": "@@ -6210,6 +6210,18 @@ cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n \tif (VOID_TYPE_P (type))\n \t  return void_node;\n \n+\tif (TREE_CODE (t) == CONVERT_EXPR\n+\t    && ARITHMETIC_TYPE_P (type)\n+\t    && INDIRECT_TYPE_P (TREE_TYPE (op)))\n+\t  {\n+\t    if (!ctx->quiet)\n+\t      error_at (loc,\n+\t\t\t\"conversion from pointer type %qT to arithmetic type \"\n+\t\t\t\"%qT in a constant expression\", TREE_TYPE (op), type);\n+\t    *non_constant_p = true;\n+\t    return t;\n+\t  }\n+\n \tif (TREE_CODE (op) == PTRMEM_CST && !TYPE_PTRMEM_P (type))\n \t  op = cplus_expand_constant (op);\n \n@@ -6811,19 +6823,6 @@ cxx_eval_outermost_constant_expr (tree t, bool allow_non_constant,\n       non_constant_p = true;\n     }\n \n-  /* Technically we should check this for all subexpressions, but that\n-     runs into problems with our internal representation of pointer\n-     subtraction and the 5.19 rules are still in flux.  */\n-  if (CONVERT_EXPR_CODE_P (TREE_CODE (r))\n-      && ARITHMETIC_TYPE_P (TREE_TYPE (r))\n-      && TREE_CODE (TREE_OPERAND (r, 0)) == ADDR_EXPR)\n-    {\n-      if (!allow_non_constant)\n-\terror (\"conversion from pointer type %qT \"\n-\t       \"to arithmetic type %qT in a constant expression\",\n-\t       TREE_TYPE (TREE_OPERAND (r, 0)), TREE_TYPE (r));\n-      non_constant_p = true;\n-    }\n \n   if (!non_constant_p && overflow_p)\n     non_constant_p = true;"}, {"sha": "bd3c6a8f91f1293ead1dc338b178fea7a0fcee3e", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-95307.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeb54a14c48f543857f561556ab1fc49dc21af26/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-95307.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeb54a14c48f543857f561556ab1fc49dc21af26/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-95307.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-95307.C?ref=eeb54a14c48f543857f561556ab1fc49dc21af26", "patch": "@@ -0,0 +1,5 @@\n+// PR c++/95307\n+// { dg-do compile { target c++11 } }\n+\n+int v;\n+constexpr auto p{reinterpret_cast<__UINTPTR_TYPE__>(&v) - 1u};\t// { dg-error \"conversion from pointer type\" }"}, {"sha": "3b05243df25481d024f39f7801d2556521b2899d", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-82304.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeb54a14c48f543857f561556ab1fc49dc21af26/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-82304.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeb54a14c48f543857f561556ab1fc49dc21af26/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-82304.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-82304.C?ref=eeb54a14c48f543857f561556ab1fc49dc21af26", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/82304\n+// { dg-do compile { target c++14 } }\n+\n+typedef __UINTPTR_TYPE__ uintptr_t;\n+\n+constexpr const char *\n+foo (const char *p)\n+{\n+  auto l = reinterpret_cast<uintptr_t>(p);\t// { dg-error \"conversion from pointer\" }\n+  ++l;\n+  return reinterpret_cast<const char *>(l);\n+}\n+\n+constexpr auto s = foo (\"Hello\");"}, {"sha": "e0e56e262f0ca654b2d87d0d7322dd84cfc145c8", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-shift1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeb54a14c48f543857f561556ab1fc49dc21af26/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-shift1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeb54a14c48f543857f561556ab1fc49dc21af26/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-shift1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-shift1.C?ref=eeb54a14c48f543857f561556ab1fc49dc21af26", "patch": "@@ -3,7 +3,7 @@\n constexpr int p = 1;\n constexpr __PTRDIFF_TYPE__ bar (int a)\n {\n-  return ((__PTRDIFF_TYPE__) &p) << a; // { dg-error \"is not a constant expression\" }\n+  return ((__PTRDIFF_TYPE__) &p) << a;\t// { dg-error \"conversion from pointer\" }\n }\n constexpr __PTRDIFF_TYPE__ r = bar (2); // { dg-message \"in .constexpr. expansion of\" }\n-constexpr __PTRDIFF_TYPE__ s = bar (0); // { dg-error \"conversion from pointer\" }\n+constexpr __PTRDIFF_TYPE__ s = bar (0);"}, {"sha": "11d28c5b2077ef241053c818540878f247266f75", "filename": "gcc/testsuite/g++.dg/template/pr79650.C", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeb54a14c48f543857f561556ab1fc49dc21af26/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr79650.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeb54a14c48f543857f561556ab1fc49dc21af26/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr79650.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr79650.C?ref=eeb54a14c48f543857f561556ab1fc49dc21af26", "patch": "@@ -11,10 +11,10 @@ foo ()\n   static int a, b;\n lab1:\n lab2:\n-  A<(intptr_t)&&lab1 - (__INTPTR_TYPE__)&&lab2> c;\t// { dg-error \"not a constant integer\" }\n-  A<(intptr_t)&&lab1 - (__INTPTR_TYPE__)&&lab1> d;\n-  A<(intptr_t)&a - (intptr_t)&b> e;\t\t\t// { dg-error \"is not a constant expression\" }\n-  A<(intptr_t)&a - (intptr_t)&a> f;\n-  A<(intptr_t)sizeof(a) + (intptr_t)&a> g;\t\t// { dg-error \"not a constant integer\" }\n+  A<(intptr_t)&&lab1 - (__INTPTR_TYPE__)&&lab2> c;\t// { dg-error \"conversion from pointer type\" }\n+  A<(intptr_t)&&lab1 - (__INTPTR_TYPE__)&&lab1> d;\t// { dg-error \"conversion from pointer type\" }\n+  A<(intptr_t)&a - (intptr_t)&b> e;\t\t\t// { dg-error \"conversion from pointer type\" }\n+  A<(intptr_t)&a - (intptr_t)&a> f;\t\t\t// { dg-error \"conversion from pointer type\" }\n+  A<(intptr_t)sizeof(a) + (intptr_t)&a> g;\t\t// { dg-error \"conversion from pointer type\" }\n   A<(intptr_t)&a> h;\t\t\t\t\t// { dg-error \"conversion from pointer type\" }\n }"}]}