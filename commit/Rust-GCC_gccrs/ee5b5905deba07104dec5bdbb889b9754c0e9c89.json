{"sha": "ee5b5905deba07104dec5bdbb889b9754c0e9c89", "node_id": "C_kwDOANBUbNoAKGVlNWI1OTA1ZGViYTA3MTA0ZGVjNWJkYmI4ODliOTc1NGMwZTljODk", "commit": {"author": {"name": "Owen Avery", "email": "powerboat9.gamer@gmail.com", "date": "2023-05-17T16:32:23Z"}, "committer": {"name": "CohenArthur", "email": "arthur.cohen@embecosm.com", "date": "2023-05-18T20:29:52Z"}, "message": "Handle keyword metavariables\n\ngcc/rust/ChangeLog:\n\n\t* expand/rust-macro-substitute-ctx.cc\n\t(SubstituteCtx::check_repetition_amount): Handle keywords.\n\t(SubstituteCtx::substitute_token): Likewise.\n\t* lex/rust-token.cc\n\t(Token::get_str): Likewise.\n\t* parse/rust-parse-impl.h\n\t(Parser::parse_macro_match_fragment): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* rust/compile/macro-issue2194.rs: New test.\n\nSigned-off-by: Owen Avery <powerboat9.gamer@gmail.com>", "tree": {"sha": "1954cb3650f2f864424cbbccfa00e21b1ca6b63a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1954cb3650f2f864424cbbccfa00e21b1ca6b63a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee5b5905deba07104dec5bdbb889b9754c0e9c89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee5b5905deba07104dec5bdbb889b9754c0e9c89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee5b5905deba07104dec5bdbb889b9754c0e9c89", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee5b5905deba07104dec5bdbb889b9754c0e9c89/comments", "author": {"login": "powerboat9", "id": 7397652, "node_id": "MDQ6VXNlcjczOTc2NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/7397652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/powerboat9", "html_url": "https://github.com/powerboat9", "followers_url": "https://api.github.com/users/powerboat9/followers", "following_url": "https://api.github.com/users/powerboat9/following{/other_user}", "gists_url": "https://api.github.com/users/powerboat9/gists{/gist_id}", "starred_url": "https://api.github.com/users/powerboat9/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/powerboat9/subscriptions", "organizations_url": "https://api.github.com/users/powerboat9/orgs", "repos_url": "https://api.github.com/users/powerboat9/repos", "events_url": "https://api.github.com/users/powerboat9/events{/privacy}", "received_events_url": "https://api.github.com/users/powerboat9/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c78ef9854b560940aeaf36e74439ce3f10d5eb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c78ef9854b560940aeaf36e74439ce3f10d5eb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c78ef9854b560940aeaf36e74439ce3f10d5eb2"}], "stats": {"total": 40, "additions": 28, "deletions": 12}, "files": [{"sha": "0a38578bd74a483b13df891ca41b708fb14aa5cd", "filename": "gcc/rust/expand/rust-macro-substitute-ctx.cc", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee5b5905deba07104dec5bdbb889b9754c0e9c89/gcc%2Frust%2Fexpand%2Frust-macro-substitute-ctx.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee5b5905deba07104dec5bdbb889b9754c0e9c89/gcc%2Frust%2Fexpand%2Frust-macro-substitute-ctx.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-substitute-ctx.cc?ref=ee5b5905deba07104dec5bdbb889b9754c0e9c89", "patch": "@@ -58,7 +58,8 @@ SubstituteCtx::check_repetition_amount (size_t pattern_start,\n       if (macro.at (i)->get_id () == DOLLAR_SIGN)\n \t{\n \t  auto &frag_token = macro.at (i + 1);\n-\t  if (frag_token->get_id () == IDENTIFIER)\n+\t  if (token_id_is_keyword (frag_token->get_id ())\n+\t      || frag_token->get_id () == IDENTIFIER)\n \t    {\n \t      auto it = fragments.find (frag_token->get_str ());\n \t      if (it == fragments.end ())\n@@ -199,11 +200,21 @@ std::pair<std::vector<std::unique_ptr<AST::Token>>, size_t>\n SubstituteCtx::substitute_token (size_t token_idx)\n {\n   auto &token = macro.at (token_idx);\n+\n   switch (token->get_id ())\n     {\n-    case IDENTIFIER:\n-      rust_debug (\"expanding metavar: %s\", token->get_str ().c_str ());\n-      return {substitute_metavar (token), 1};\n+    default:\n+      if (token_id_is_keyword (token->get_id ()))\n+\t{\n+\tcase IDENTIFIER:\n+\t  rust_debug (\"expanding metavar: %s\", token->get_str ().c_str ());\n+\t  return {substitute_metavar (token), 1};\n+\t}\n+      rust_error_at (token->get_locus (),\n+\t\t     \"unexpected token in macro transcribe: expected \"\n+\t\t     \"%<(%> or identifier after %<$%>, got %<%s%>\",\n+\t\t     get_token_description (token->get_id ()));\n+      break;\n       case LEFT_PAREN: {\n \t// We need to parse up until the closing delimiter and expand this\n \t// fragment->n times.\n@@ -279,11 +290,6 @@ SubstituteCtx::substitute_token (size_t token_idx)\n       // with no associated fragment and paste the dollar sign in the\n       // transcription. Unsure how to do that since we always have at\n       // least the closing curly brace after an empty $...\n-    default:\n-      rust_error_at (token->get_locus (),\n-\t\t     \"unexpected token in macro transcribe: expected \"\n-\t\t     \"%<(%> or identifier after %<$%>, got %<%s%>\",\n-\t\t     get_token_description (token->get_id ()));\n     }\n \n   // FIXME: gcc_unreachable() error case?"}, {"sha": "b6be9cafaa5e389547ab4bef2b97744600fe4563", "filename": "gcc/rust/lex/rust-token.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee5b5905deba07104dec5bdbb889b9754c0e9c89/gcc%2Frust%2Flex%2Frust-token.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee5b5905deba07104dec5bdbb889b9754c0e9c89/gcc%2Frust%2Flex%2Frust-token.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flex%2Frust-token.cc?ref=ee5b5905deba07104dec5bdbb889b9754c0e9c89", "patch": "@@ -152,6 +152,9 @@ Token::get_type_hint_str () const\n const std::string &\n Token::get_str () const\n {\n+  if (token_id_is_keyword (token_id))\n+    return token_id_keyword_string (token_id);\n+\n   // FIXME: attempt to return null again\n   // gcc_assert(str != NULL);\n "}, {"sha": "dbb322b3ae51528595d8d784292db4555b7d5499", "filename": "gcc/rust/parse/rust-parse-impl.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee5b5905deba07104dec5bdbb889b9754c0e9c89/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee5b5905deba07104dec5bdbb889b9754c0e9c89/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse-impl.h?ref=ee5b5905deba07104dec5bdbb889b9754c0e9c89", "patch": "@@ -2146,10 +2146,10 @@ Parser<ManagedTokenSource>::parse_macro_match_fragment ()\n \n   Identifier ident = \"\";\n   auto identifier = lexer.peek_token ();\n-  if (identifier->has_str ())\n-    ident = identifier->get_str ();\n+  if (identifier->get_id () == UNDERSCORE)\n+    ident = \"_\";\n   else\n-    ident = std::string (token_id_to_str (identifier->get_id ()));\n+    ident = identifier->get_str ();\n \n   if (ident.empty ())\n     {"}, {"sha": "c94b1147d66fe830a625b0a5321be225d0c6f5e6", "filename": "gcc/testsuite/rust/compile/macro-issue2194.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee5b5905deba07104dec5bdbb889b9754c0e9c89/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro-issue2194.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee5b5905deba07104dec5bdbb889b9754c0e9c89/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro-issue2194.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro-issue2194.rs?ref=ee5b5905deba07104dec5bdbb889b9754c0e9c89", "patch": "@@ -0,0 +1,7 @@\n+macro_rules! foo {($type:ident) => {\n+    let $type = 12;\n+}} \n+\n+pub fn foo() {\n+    foo!(_a);\n+}"}]}