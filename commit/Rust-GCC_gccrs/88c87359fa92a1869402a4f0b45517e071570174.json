{"sha": "88c87359fa92a1869402a4f0b45517e071570174", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODhjODczNTlmYTkyYTE4Njk0MDJhNGYwYjQ1NTE3ZTA3MTU3MDE3NA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-10-17T14:49:11Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-10-17T14:49:11Z"}, "message": "re PR libstdc++/43554 (profile-mode version of forward_list missing)\n\n2010-10-17  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR libstdc++/43554\n\t* include/profile/forward_list: New file.\n\t* include/std/forward_list: Include <profile/forward_list>.\n\t* include/Makefile.am: Add.\n\t* testsuite/23_containers/forward_list/capacity/1.cc: Adjust.\n\t* include/Makefile.in: Regenerate.\n\nFrom-SVN: r165587", "tree": {"sha": "2ed7b273b695c9a48d924cc22f6df17c3ad2a509", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ed7b273b695c9a48d924cc22f6df17c3ad2a509"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88c87359fa92a1869402a4f0b45517e071570174", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88c87359fa92a1869402a4f0b45517e071570174", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88c87359fa92a1869402a4f0b45517e071570174", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88c87359fa92a1869402a4f0b45517e071570174/comments", "author": null, "committer": null, "parents": [{"sha": "c37d8c307c43a58b602a40b9f6ba19caac77b00a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c37d8c307c43a58b602a40b9f6ba19caac77b00a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c37d8c307c43a58b602a40b9f6ba19caac77b00a"}], "stats": {"total": 206, "additions": 199, "deletions": 7}, "files": [{"sha": "5b44105f488cd17555650c1e8eee5e8b99024955", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88c87359fa92a1869402a4f0b45517e071570174/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88c87359fa92a1869402a4f0b45517e071570174/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=88c87359fa92a1869402a4f0b45517e071570174", "patch": "@@ -1,3 +1,12 @@\n+2010-10-17  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR libstdc++/43554\n+\t* include/profile/forward_list: New file.\n+\t* include/std/forward_list: Include <profile/forward_list>.\n+\t* include/Makefile.am: Add.\n+\t* testsuite/23_containers/forward_list/capacity/1.cc: Adjust.\n+\t* include/Makefile.in: Regenerate.\n+\n 2010-10-15  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/std/functional (function<>::operator==, operator!=):"}, {"sha": "8093425c06be514d06e857852dc45eb582e9dd71", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88c87359fa92a1869402a4f0b45517e071570174/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88c87359fa92a1869402a4f0b45517e071570174/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=88c87359fa92a1869402a4f0b45517e071570174", "patch": "@@ -800,6 +800,7 @@ profile_headers = \\\n \t${profile_srcdir}/vector \\\n \t${profile_srcdir}/bitset \\\n \t${profile_srcdir}/deque \\\n+\t${profile_srcdir}/forward_list \\\n \t${profile_srcdir}/list \\\n \t${profile_srcdir}/map \\\n \t${profile_srcdir}/map.h \\"}, {"sha": "256bac6e437ca1f0df583527b8d0620aca2f6b65", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88c87359fa92a1869402a4f0b45517e071570174/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88c87359fa92a1869402a4f0b45517e071570174/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=88c87359fa92a1869402a4f0b45517e071570174", "patch": "@@ -1033,6 +1033,7 @@ profile_headers = \\\n \t${profile_srcdir}/vector \\\n \t${profile_srcdir}/bitset \\\n \t${profile_srcdir}/deque \\\n+\t${profile_srcdir}/forward_list \\\n \t${profile_srcdir}/list \\\n \t${profile_srcdir}/map \\\n \t${profile_srcdir}/map.h \\"}, {"sha": "5ae5bd590fe171dce65f820288de6a9de3ce8078", "filename": "libstdc++-v3/include/profile/forward_list", "status": "added", "additions": 179, "deletions": 0, "changes": 179, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88c87359fa92a1869402a4f0b45517e071570174/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fforward_list", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88c87359fa92a1869402a4f0b45517e071570174/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fforward_list", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fforward_list?ref=88c87359fa92a1869402a4f0b45517e071570174", "patch": "@@ -0,0 +1,179 @@\n+// <forward_list> -*- C++ -*-\n+\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+/** @file profile/forward_list\n+ *  This file is a GNU debug extension to the Standard C++ Library.\n+ */\n+\n+#ifndef _GLIBCXX_PROFILE_FORWARD_LIST\n+#define _GLIBCXX_PROFILE_FORWARD_LIST 1\n+\n+#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+# include <bits/c++0x_warning.h>\n+#else\n+\n+#include <forward_list>\n+\n+namespace std\n+{\n+namespace __profile\n+{\n+  /// Class std::forward_list wrapper with performance instrumentation.\n+  template<typename _Tp, typename _Alloc = std::allocator<_Tp> >\n+    class forward_list\n+    : public _GLIBCXX_STD_D::forward_list<_Tp, _Alloc>\n+    {\n+      typedef _GLIBCXX_STD_D::forward_list<_Tp, _Alloc> _Base;\n+\n+    public:\n+      typedef typename _Base::size_type             size_type;\n+\n+    public:\n+      // 23.2.3.1 construct/copy/destroy:\n+      explicit\n+      forward_list(const _Alloc& __al = _Alloc())\n+      : _Base(__al) { }\n+\n+      forward_list(const forward_list& __list, const _Alloc& __al)\n+      : _Base(__list, __al)\n+      { }\n+\n+      forward_list(forward_list&& __list, const _Alloc& __al)\n+      : _Base(std::move(__list), __al)\n+      { }\n+\n+      explicit\n+      forward_list(size_type __n)\n+      : _Base(__n)\n+      { }\n+\n+      forward_list(size_type __n, const _Tp& __value,\n+                   const _Alloc& __al = _Alloc())\n+      : _Base(__n, __value, __al)\n+      { }\n+\n+      template<typename _InputIterator>\n+        forward_list(_InputIterator __first, _InputIterator __last,\n+                     const _Alloc& __al = _Alloc())\n+        : _Base(__first, __last, __al)\n+        { }\n+\n+      forward_list(const forward_list& __list)\n+      : _Base(__list)\n+      { }\n+\n+      forward_list(forward_list&& __list)\n+      : _Base(std::move(__list)) { }\n+\n+      forward_list(std::initializer_list<_Tp> __il,\n+                   const _Alloc& __al = _Alloc())\n+      : _Base(__il, __al)\n+      { }\n+\n+      ~forward_list()\n+      { }\n+\n+      forward_list&\n+      operator=(const forward_list& __list)\n+      {\n+\tstatic_cast<_Base&>(*this) = __list;\n+\treturn *this;\n+      }\n+\n+      forward_list&\n+      operator=(forward_list&& __list)\n+      {\n+\t// NB: DR 1204.\n+\t// NB: DR 675.\n+\t_Base::clear();\n+\t_Base::swap(__list);\n+\treturn *this;\n+      }\n+\n+      forward_list&\n+      operator=(std::initializer_list<_Tp> __il)\n+      {\n+\tstatic_cast<_Base&>(*this) = __il;\n+        return *this;\n+      }\n+\n+      _Base&\n+      _M_base()       { return *this; }\n+\n+      const _Base&\n+      _M_base() const { return *this; }\n+    };\n+\n+  template<typename _Tp, typename _Alloc>\n+    inline bool\n+    operator==(const forward_list<_Tp, _Alloc>& __lx,\n+               const forward_list<_Tp, _Alloc>& __ly)\n+    { return __lx._M_base() == __ly._M_base(); }\n+\n+  template<typename _Tp, typename _Alloc>\n+    inline bool\n+    operator<(const forward_list<_Tp, _Alloc>& __lx,\n+              const forward_list<_Tp, _Alloc>& __ly)\n+    { return __lx._M_base() < __ly._M_base(); }\n+\n+  template<typename _Tp, typename _Alloc>\n+    inline bool\n+    operator!=(const forward_list<_Tp, _Alloc>& __lx,\n+               const forward_list<_Tp, _Alloc>& __ly)\n+    { return !(__lx == __ly); }\n+\n+  /// Based on operator<\n+  template<typename _Tp, typename _Alloc>\n+    inline bool\n+    operator>(const forward_list<_Tp, _Alloc>& __lx,\n+              const forward_list<_Tp, _Alloc>& __ly)\n+    { return (__ly < __lx); }\n+\n+  /// Based on operator<\n+  template<typename _Tp, typename _Alloc>\n+    inline bool\n+    operator>=(const forward_list<_Tp, _Alloc>& __lx,\n+               const forward_list<_Tp, _Alloc>& __ly)\n+    { return !(__lx < __ly); }\n+\n+  /// Based on operator<\n+  template<typename _Tp, typename _Alloc>\n+    inline bool\n+    operator<=(const forward_list<_Tp, _Alloc>& __lx,\n+               const forward_list<_Tp, _Alloc>& __ly)\n+    { return !(__ly < __lx); }\n+\n+  /// See std::forward_list::swap().\n+  template<typename _Tp, typename _Alloc>\n+    inline void\n+    swap(forward_list<_Tp, _Alloc>& __lx,\n+\t forward_list<_Tp, _Alloc>& __ly)\n+    { __lx.swap(__ly); }\n+\n+} // namespace __profile\n+} // namespace std\n+\n+#endif // __GXX_EXPERIMENTAL_CXX0X__\n+\n+#endif"}, {"sha": "a4bc10dd2433293596ff76d4a660c9117384e410", "filename": "libstdc++-v3/include/std/forward_list", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88c87359fa92a1869402a4f0b45517e071570174/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fforward_list", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88c87359fa92a1869402a4f0b45517e071570174/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fforward_list", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fforward_list?ref=88c87359fa92a1869402a4f0b45517e071570174", "patch": "@@ -46,6 +46,10 @@\n # include <debug/forward_list>\n #endif\n \n+#ifdef _GLIBCXX_PROFILE\n+# include <profile/forward_list>\n+#endif\n+\n #endif // __GXX_EXPERIMENTAL_CXX0X__\n \n #endif // _GLIBCXX_FORWARD_LIST"}, {"sha": "fec4fff46aced398cf9fc61f9bd3eca54b8724dc", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/capacity/1.cc", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88c87359fa92a1869402a4f0b45517e071570174/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fcapacity%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88c87359fa92a1869402a4f0b45517e071570174/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fcapacity%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fcapacity%2F1.cc?ref=88c87359fa92a1869402a4f0b45517e071570174", "patch": "@@ -22,13 +22,11 @@\n #include <forward_list>\n #include <testsuite_hooks.h>\n \n-bool test __attribute__((unused)) = true;\n-\n-// This test verifies the following.\n-//\n void\n test01()\n {\n+  bool test __attribute__((unused)) = true;\n+\n   std::forward_list<double> fld;\n   VERIFY(fld.empty() == true);\n \n@@ -38,10 +36,10 @@ test01()\n   fld.resize(0);\n   VERIFY(fld.empty() == true);\n \n-#ifndef _GLIBCXX_DEBUG\n-  using std::_Fwd_list_node;\n-#else\n+#if defined(_GLIBCXX_DEBUG) || defined(_GLIBCXX_PROFILE)\n   using std::_GLIBCXX_STD_D::_Fwd_list_node;\n+#else\n+  using std::_Fwd_list_node;\n #endif\n \n   VERIFY( (fld.max_size()"}]}