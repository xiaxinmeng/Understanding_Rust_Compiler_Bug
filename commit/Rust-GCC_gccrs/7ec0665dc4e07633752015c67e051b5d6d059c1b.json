{"sha": "7ec0665dc4e07633752015c67e051b5d6d059c1b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2VjMDY2NWRjNGUwNzYzMzc1MjAxNWM2N2UwNTFiNWQ2ZDA1OWMxYg==", "commit": {"author": {"name": "Sebastian Pop", "email": "sebastian.pop@amd.com", "date": "2009-11-25T04:29:43Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2009-11-25T04:29:43Z"}, "message": "tree-scalar-evolution.c (instantiate_scev_bitnot): New.\n\n2009-09-01  Sebastian Pop  <sebastian.pop@amd.com>\n\n\t* tree-scalar-evolution.c (instantiate_scev_bitnot): New.\n\t(instantiate_scev_1): Move code in instantiate_scev_bitnot.\n\nFrom-SVN: r154535", "tree": {"sha": "d0847bf6904f2e40e0c06212964b957e6b76c159", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d0847bf6904f2e40e0c06212964b957e6b76c159"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ec0665dc4e07633752015c67e051b5d6d059c1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ec0665dc4e07633752015c67e051b5d6d059c1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ec0665dc4e07633752015c67e051b5d6d059c1b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ec0665dc4e07633752015c67e051b5d6d059c1b/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c382ce91b28348d8b93de761064216538161894", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c382ce91b28348d8b93de761064216538161894", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c382ce91b28348d8b93de761064216538161894"}], "stats": {"total": 64, "additions": 46, "deletions": 18}, "files": [{"sha": "72ed8cd83248a6528a59aa122bec32c7b3fb1d70", "filename": "gcc/ChangeLog.graphite", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ec0665dc4e07633752015c67e051b5d6d059c1b/gcc%2FChangeLog.graphite", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ec0665dc4e07633752015c67e051b5d6d059c1b/gcc%2FChangeLog.graphite", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.graphite?ref=7ec0665dc4e07633752015c67e051b5d6d059c1b", "patch": "@@ -1,3 +1,8 @@\n+2009-09-01  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\t* tree-scalar-evolution.c (instantiate_scev_bitnot): New.\n+\t(instantiate_scev_1): Move code in instantiate_scev_bitnot.\n+\n 2009-09-01  Sebastian Pop  <sebastian.pop@amd.com>\n \n \t* tree-scalar-evolution.c (instantiate_scev_convert): New."}, {"sha": "6d8bf26c64c00d9f6c5b6b26901a8eea61044bb5", "filename": "gcc/tree-scalar-evolution.c", "status": "modified", "additions": 41, "deletions": 18, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ec0665dc4e07633752015c67e051b5d6d059c1b/gcc%2Ftree-scalar-evolution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ec0665dc4e07633752015c67e051b5d6d059c1b/gcc%2Ftree-scalar-evolution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.c?ref=7ec0665dc4e07633752015c67e051b5d6d059c1b", "patch": "@@ -2297,6 +2297,44 @@ instantiate_scev_convert (basic_block instantiate_below,\n   return chrec_convert (type, op0, NULL);\n }\n \n+/* Analyze all the parameters of the chrec, between INSTANTIATE_BELOW\n+   and EVOLUTION_LOOP, that were left under a symbolic form.\n+\n+   CHREC is a BIT_NOT_EXPR expression to be instantiated.\n+   Handle ~X as -1 - X.\n+\n+   CACHE is the cache of already instantiated values.\n+\n+   FOLD_CONVERSIONS should be set to true when the conversions that\n+   may wrap in signed/pointer type are folded, as long as the value of\n+   the chrec is preserved.\n+\n+   SIZE_EXPR is used for computing the size of the expression to be\n+   instantiated, and to stop if it exceeds some limit.  */\n+\n+static tree\n+instantiate_scev_bitnot (basic_block instantiate_below,\n+\t\t\t struct loop *evolution_loop, tree chrec,\n+\t\t\t bool fold_conversions, htab_t cache, int size_expr)\n+{\n+  tree type = chrec_type (chrec);\n+  tree op0 = instantiate_scev_1 (instantiate_below, evolution_loop,\n+\t\t\t\t TREE_OPERAND (chrec, 0),\n+\t\t\t\t fold_conversions, cache, size_expr);\n+  if (op0 == chrec_dont_know)\n+    return chrec_dont_know;\n+\n+  if (TREE_OPERAND (chrec, 0) != op0)\n+    {\n+      op0 = chrec_convert (type, op0, NULL);\n+      chrec = chrec_fold_minus (type,\n+\t\t\t\tfold_convert (type,\n+\t\t\t\t\t      integer_minus_one_node),\n+\t\t\t\top0);\n+    }\n+  return chrec;\n+}\n+\n /* Analyze all the parameters of the chrec, between INSTANTIATE_BELOW\n    and EVOLUTION_LOOP, that were left under a symbolic form.\n \n@@ -2317,7 +2355,6 @@ instantiate_scev_1 (basic_block instantiate_below,\n \t\t    bool fold_conversions, htab_t cache, int size_expr)\n {\n   tree op0, op1, op2;\n-  tree type = chrec_type (chrec);\n \n   /* Give up if the expression is larger than the MAX that we allow.  */\n   if (size_expr++ > PARAM_VALUE (PARAM_SCEV_MAX_EXPR_SIZE))\n@@ -2367,22 +2404,8 @@ instantiate_scev_1 (basic_block instantiate_below,\n \t\t\t\t       fold_conversions, cache, size_expr);\n \n     case BIT_NOT_EXPR:\n-      /* Handle ~X as -1 - X.  */\n-      op0 = instantiate_scev_1 (instantiate_below, evolution_loop,\n-\t\t\t\tTREE_OPERAND (chrec, 0),\n-\t\t\t\tfold_conversions, cache, size_expr);\n-      if (op0 == chrec_dont_know)\n-\treturn chrec_dont_know;\n-\n-      if (TREE_OPERAND (chrec, 0) != op0)\n-\t{\n-\t  op0 = chrec_convert (type, op0, NULL);\n-\t  chrec = chrec_fold_minus (type,\n-\t\t\t\t    fold_convert (type,\n-\t\t\t\t\t\t  integer_minus_one_node),\n-\t\t\t\t    op0);\n-\t}\n-      return chrec;\n+      return instantiate_scev_bitnot (instantiate_below, evolution_loop, chrec,\n+\t\t\t\t      fold_conversions, cache, size_expr);\n \n     case SCEV_NOT_KNOWN:\n       return chrec_dont_know;\n@@ -2443,7 +2466,7 @@ instantiate_scev_1 (basic_block instantiate_below,\n \t  && op1 == TREE_OPERAND (chrec, 1))\n \treturn chrec;\n       return fold_build2 (TREE_CODE (chrec), TREE_TYPE (chrec), op0, op1);\n-\t    \n+\n     case 1:\n       op0 = instantiate_scev_1 (instantiate_below, evolution_loop,\n \t\t\t\tTREE_OPERAND (chrec, 0),"}]}