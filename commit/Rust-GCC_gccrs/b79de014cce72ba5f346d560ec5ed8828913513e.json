{"sha": "b79de014cce72ba5f346d560ec5ed8828913513e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjc5ZGUwMTRjY2U3MmJhNWYzNDZkNTYwZWM1ZWQ4ODI4OTEzNTEzZQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@codesourcery.com", "date": "2006-01-28T22:01:54Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2006-01-28T22:01:54Z"}, "message": "expmed.c (const_mult_add_overflow_p): Remove.\n\n\t* expmed.c (const_mult_add_overflow_p): Remove.\n\t* expr.h: Remove the prototype for const_mult_add_overflow_p.\n\nFrom-SVN: r110334", "tree": {"sha": "14e729b9052c1fe3a5ad3d88c1cff04aae55b131", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/14e729b9052c1fe3a5ad3d88c1cff04aae55b131"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b79de014cce72ba5f346d560ec5ed8828913513e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b79de014cce72ba5f346d560ec5ed8828913513e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b79de014cce72ba5f346d560ec5ed8828913513e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b79de014cce72ba5f346d560ec5ed8828913513e/comments", "author": null, "committer": null, "parents": [{"sha": "3d538baeb51b697b4e68b74037bae1489249ae98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d538baeb51b697b4e68b74037bae1489249ae98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d538baeb51b697b4e68b74037bae1489249ae98"}], "stats": {"total": 44, "additions": 5, "deletions": 39}, "files": [{"sha": "f7210c4f4db82c16fd850bfbf121f89bee0a0939", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b79de014cce72ba5f346d560ec5ed8828913513e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b79de014cce72ba5f346d560ec5ed8828913513e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b79de014cce72ba5f346d560ec5ed8828913513e", "patch": "@@ -1,3 +1,8 @@\n+2006-01-28  Kazu Hirata  <kazu@codesourcery.com>\n+\n+\t* expmed.c (const_mult_add_overflow_p): Remove.\n+\t* expr.h: Remove the prototype for const_mult_add_overflow_p.\n+\n 2006-01-28  David Edelsohn  <edelsohn@gnu.org>\n \n \t* config/rs6000/aix43.h (SUBTARGET_OVERRIDE_OPTIONS): -msoft-float"}, {"sha": "1ad0949fc608bb8e48daad75bedbd5ef258532bc", "filename": "gcc/expmed.c", "status": "modified", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b79de014cce72ba5f346d560ec5ed8828913513e/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b79de014cce72ba5f346d560ec5ed8828913513e/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=b79de014cce72ba5f346d560ec5ed8828913513e", "patch": "@@ -5025,44 +5025,6 @@ make_tree (tree type, rtx x)\n     }\n }\n \n-/* Check whether the multiplication X * MULT + ADD overflows.\n-   X, MULT and ADD must be CONST_*.\n-   MODE is the machine mode for the computation.\n-   X and MULT must have mode MODE.  ADD may have a different mode.\n-   So can X (defaults to same as MODE).\n-   UNSIGNEDP is nonzero to do unsigned multiplication.  */\n-\n-bool\n-const_mult_add_overflow_p (rtx x, rtx mult, rtx add,\n-\t\t\t   enum machine_mode mode, int unsignedp)\n-{\n-  tree type, mult_type, add_type, result;\n-\n-  type = lang_hooks.types.type_for_mode (mode, unsignedp);\n-\n-  /* In order to get a proper overflow indication from an unsigned\n-     type, we have to pretend that it's a sizetype.  */\n-  mult_type = type;\n-  if (unsignedp)\n-    {\n-      /* FIXME:It would be nice if we could step directly from this\n-\t type to its sizetype equivalent.  */\n-      mult_type = build_distinct_type_copy (type);\n-      TYPE_IS_SIZETYPE (mult_type) = 1;\n-    }\n-\n-  add_type = (GET_MODE (add) == VOIDmode ? mult_type\n-\t      : lang_hooks.types.type_for_mode (GET_MODE (add), unsignedp));\n-\n-  result = fold_build2 (PLUS_EXPR, mult_type,\n-\t\t\tfold_build2 (MULT_EXPR, mult_type,\n-\t\t\t\t     make_tree (mult_type, x),\n-\t\t\t\t     make_tree (mult_type, mult)),\n-\t\t\tmake_tree (add_type, add));\n-\n-  return TREE_CONSTANT_OVERFLOW (result);\n-}\n-\n /* Return an rtx representing the value of X * MULT + ADD.\n    TARGET is a suggestion for where to store the result (an rtx).\n    MODE is the machine mode for the computation."}, {"sha": "6d09644a048dfe28d21d9d2d0b8741d795b626b3", "filename": "gcc/expr.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b79de014cce72ba5f346d560ec5ed8828913513e/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b79de014cce72ba5f346d560ec5ed8828913513e/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=b79de014cce72ba5f346d560ec5ed8828913513e", "patch": "@@ -722,7 +722,6 @@ extern rtx extract_bit_field (rtx, unsigned HOST_WIDE_INT,\n \t\t\t      unsigned HOST_WIDE_INT, int, rtx,\n \t\t\t      enum machine_mode, enum machine_mode);\n extern rtx expand_mult (enum machine_mode, rtx, rtx, rtx, int);\n-extern bool const_mult_add_overflow_p (rtx, rtx, rtx, enum machine_mode, int);\n extern rtx expand_mult_add (rtx, rtx, rtx, rtx,enum machine_mode, int);\n extern rtx expand_mult_highpart_adjust (enum machine_mode, rtx, rtx, rtx, rtx, int);\n "}]}