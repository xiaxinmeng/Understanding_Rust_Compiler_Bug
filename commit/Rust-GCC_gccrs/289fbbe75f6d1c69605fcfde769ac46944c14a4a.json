{"sha": "289fbbe75f6d1c69605fcfde769ac46944c14a4a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjg5ZmJiZTc1ZjZkMWM2OTYwNWZjZmRlNzY5YWM0Njk0NGMxNGE0YQ==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-05-15T18:50:17Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-05-15T18:50:17Z"}, "message": "c++: Revert unnecessary parts of fix for [PR90996]\n\nThe process_init_constructor_array part of my PR90996 patch turns out to\nbe neither necessary nor sufficient to make the pr90996.C testcase work,\nand I wasn't able to come up with a testcase that demonstrates this part\nis ever necessary.\n\ngcc/cp/ChangeLog:\n\n\tRevert:\n\n\t2020-04-07  Patrick Palka  <ppalka@redhat.com>\n\n\tPR c++/90996\n\t* typeck2.c (process_init_constructor_array): Propagate\n\tCONSTRUCTOR_PLACEHOLDER_BOUNDARY up from each element\n\tinitializer to the array initializer.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/90996\n\t* g++.dg/cpp1y/pr90996.C: Turn into execution test to verify\n\tthat each PLACEHOLDER_EXPR gets correctly resolved.", "tree": {"sha": "05140a4e596705204fd2404eac3bf4503d70a576", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/05140a4e596705204fd2404eac3bf4503d70a576"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/289fbbe75f6d1c69605fcfde769ac46944c14a4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/289fbbe75f6d1c69605fcfde769ac46944c14a4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/289fbbe75f6d1c69605fcfde769ac46944c14a4a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/289fbbe75f6d1c69605fcfde769ac46944c14a4a/comments", "author": null, "committer": null, "parents": [{"sha": "cda6396a1b6e6bba2a3b0847931567c3458f2184", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cda6396a1b6e6bba2a3b0847931567c3458f2184", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cda6396a1b6e6bba2a3b0847931567c3458f2184"}], "stats": {"total": 54, "additions": 35, "deletions": 19}, "files": [{"sha": "acd2d7be844e879b54da958efa1bd57e8c3bb2de", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/289fbbe75f6d1c69605fcfde769ac46944c14a4a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/289fbbe75f6d1c69605fcfde769ac46944c14a4a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=289fbbe75f6d1c69605fcfde769ac46944c14a4a", "patch": "@@ -1,3 +1,14 @@\n+2020-05-15  Patrick Palka  <ppalka@redhat.com>\n+\n+\tRevert:\n+\n+\t2020-04-07  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/90996\n+\t* typeck2.c (process_init_constructor_array): Propagate\n+\tCONSTRUCTOR_PLACEHOLDER_BOUNDARY up from each element initializer to\n+\tthe array initializer.\n+\n 2020-05-15  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/93286 - ICE with __is_constructible and variadic template."}, {"sha": "5fd3b82fa8937bcf7c6b61c46fc22f3ad651b0a1", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/289fbbe75f6d1c69605fcfde769ac46944c14a4a/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/289fbbe75f6d1c69605fcfde769ac46944c14a4a/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=289fbbe75f6d1c69605fcfde769ac46944c14a4a", "patch": "@@ -1496,17 +1496,6 @@ process_init_constructor_array (tree type, tree init, int nested, int flags,\n \t= massage_init_elt (TREE_TYPE (type), ce->value, nested, flags,\n \t\t\t    complain);\n \n-      if (TREE_CODE (ce->value) == CONSTRUCTOR\n-\t  && CONSTRUCTOR_PLACEHOLDER_BOUNDARY (ce->value))\n-\t{\n-\t  /* Shift CONSTRUCTOR_PLACEHOLDER_BOUNDARY from the element initializer\n-\t     up to the array initializer, so that the call to\n-\t     replace_placeholders from store_init_value can resolve any\n-\t     PLACEHOLDER_EXPRs inside this element initializer.  */\n-\t  CONSTRUCTOR_PLACEHOLDER_BOUNDARY (ce->value) = 0;\n-\t  CONSTRUCTOR_PLACEHOLDER_BOUNDARY (init) = 1;\n-\t}\n-\n       gcc_checking_assert\n \t(ce->value == error_mark_node\n \t || (same_type_ignoring_top_level_qualifiers_p\n@@ -1535,13 +1524,6 @@ process_init_constructor_array (tree type, tree init, int nested, int flags,\n \t      /* The default zero-initialization is fine for us; don't\n \t\t add anything to the CONSTRUCTOR.  */\n \t      next = NULL_TREE;\n-\t    else if (TREE_CODE (next) == CONSTRUCTOR\n-\t\t     && CONSTRUCTOR_PLACEHOLDER_BOUNDARY (next))\n-\t      {\n-\t\t/* As above.  */\n-\t\tCONSTRUCTOR_PLACEHOLDER_BOUNDARY (next) = 0;\n-\t\tCONSTRUCTOR_PLACEHOLDER_BOUNDARY (init) = 1;\n-\t      }\n \t  }\n \telse if (!zero_init_p (TREE_TYPE (type)))\n \t  next = build_zero_init (TREE_TYPE (type),"}, {"sha": "0a77dbdf980c0fa25cb0b6ccd58a4660ca226087", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/289fbbe75f6d1c69605fcfde769ac46944c14a4a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/289fbbe75f6d1c69605fcfde769ac46944c14a4a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=289fbbe75f6d1c69605fcfde769ac46944c14a4a", "patch": "@@ -1,3 +1,9 @@\n+2020-05-15  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/90996\n+\t* g++.dg/cpp1y/pr90996.C: Turn into execution test to verify that each\n+\tPLACEHOLDER_EXPR gets correctly resolved.\n+\n 2020-05-15  Tobias Burnus  <tobias@codesourcery.com>\n \n \tPR fortran/94690"}, {"sha": "eff5b62db2892988e9ba990425040f65c7453953", "filename": "gcc/testsuite/g++.dg/cpp1y/pr90996.C", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/289fbbe75f6d1c69605fcfde769ac46944c14a4a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr90996.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/289fbbe75f6d1c69605fcfde769ac46944c14a4a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr90996.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr90996.C?ref=289fbbe75f6d1c69605fcfde769ac46944c14a4a", "patch": "@@ -1,5 +1,5 @@\n // PR c++/90996\n-// { dg-do compile { target c++14 } }\n+// { dg-do run { target c++14 } }\n \n struct S\n {\n@@ -15,3 +15,20 @@ struct T\n };\n \n T d {};\n+\n+int\n+main()\n+{\n+  if (++c[0][0].b[0] != 6\n+      || ++c[0][1].b[0] != 3\n+      || ++c[1][0].b[0] != 3\n+      || ++c[1][1].b[0] != 3)\n+    __builtin_abort();\n+\n+  auto& e = d.c;\n+  if (++e[0][0].b[0] != 8\n+      || ++e[0][1].b[0] != 3\n+      || ++e[1][0].b[0] != 3\n+      || ++e[1][1].b[0] != 3)\n+    __builtin_abort();\n+}"}]}