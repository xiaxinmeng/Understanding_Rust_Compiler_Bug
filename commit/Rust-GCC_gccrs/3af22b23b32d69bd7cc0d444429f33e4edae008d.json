{"sha": "3af22b23b32d69bd7cc0d444429f33e4edae008d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2FmMjJiMjNiMzJkNjliZDdjYzBkNDQ0NDI5ZjMzZTRlZGFlMDA4ZA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2005-12-06T17:19:30Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2005-12-06T17:19:30Z"}, "message": "basic_string.h (insert(iterator, _CharT), [...]): Avoid troubles with ADL, user defined operators and __normal_iterator.\n\n2005-12-06  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/basic_string.h (insert(iterator, _CharT),\n\terase(iterator), erase(iterator, iterator)): Avoid troubles\n\twith ADL, user defined operators and __normal_iterator.\n\t* include/bits/stl_iterator.h (operator-(const __normal_iterator\n\t<_Iterator, _Container>&, const __normal_iterator<_Iterator,\n\t_Container>&)): Add overload for left and right iterators of\n\tthe same type.\n\t* include/debug/safe_iterator.h (operator-(const _Safe_iterator\n\t<_Iterator, _Sequence>&, const _Safe_iterator<_Iterator,\n\t_Sequence>&)): Likewise.\n\t* testsuite/21_strings/basic_string/types/1.cc: New.\n\nFrom-SVN: r108123", "tree": {"sha": "910230266a33d36f91eb5e255199e42cb826cade", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/910230266a33d36f91eb5e255199e42cb826cade"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3af22b23b32d69bd7cc0d444429f33e4edae008d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3af22b23b32d69bd7cc0d444429f33e4edae008d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3af22b23b32d69bd7cc0d444429f33e4edae008d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3af22b23b32d69bd7cc0d444429f33e4edae008d/comments", "author": null, "committer": null, "parents": [{"sha": "d1a4872d76d14c7a2b93e07db95f4ef32b8af645", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1a4872d76d14c7a2b93e07db95f4ef32b8af645", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1a4872d76d14c7a2b93e07db95f4ef32b8af645"}], "stats": {"total": 90, "additions": 87, "deletions": 3}, "files": [{"sha": "223bdd88dea4ca6187e8df4c981110bfacee09a7", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3af22b23b32d69bd7cc0d444429f33e4edae008d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3af22b23b32d69bd7cc0d444429f33e4edae008d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3af22b23b32d69bd7cc0d444429f33e4edae008d", "patch": "@@ -1,3 +1,17 @@\n+2005-12-06  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/basic_string.h (insert(iterator, _CharT),\n+\terase(iterator), erase(iterator, iterator)): Avoid troubles\n+\twith ADL, user defined operators and __normal_iterator.\n+\t* include/bits/stl_iterator.h (operator-(const __normal_iterator\n+\t<_Iterator, _Container>&, const __normal_iterator<_Iterator,\n+\t_Container>&)): Add overload for left and right iterators of\n+\tthe same type.\n+\t* include/debug/safe_iterator.h (operator-(const _Safe_iterator\n+\t<_Iterator, _Sequence>&, const _Safe_iterator<_Iterator,\n+\t_Sequence>&)): Likewise.\n+\t* testsuite/21_strings/basic_string/types/1.cc: New.\n+\n 2005-12-05  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/ext/sso_string_base.h (__sso_string_base<>::_M_assign):"}, {"sha": "0ff2e54e8d3a17a3dffec04dfc6c6becd86d3cd1", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3af22b23b32d69bd7cc0d444429f33e4edae008d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3af22b23b32d69bd7cc0d444429f33e4edae008d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=3af22b23b32d69bd7cc0d444429f33e4edae008d", "patch": "@@ -1097,7 +1097,7 @@ namespace std\n \tconst size_type __pos = __p - _M_ibegin();\n \t_M_replace_aux(__pos, size_type(0), size_type(1), __c);\n \t_M_rep()->_M_set_leaked();\n-\treturn this->_M_ibegin() + __pos;\n+\treturn iterator(_M_data() + __pos);\n       }\n \n       /**\n@@ -1138,7 +1138,7 @@ namespace std\n \tconst size_type __pos = __position - _M_ibegin();\n \t_M_mutate(__pos, size_type(1), size_type(0));\n \t_M_rep()->_M_set_leaked();\n-\treturn _M_ibegin() + __pos;\n+\treturn iterator(_M_data() + __pos);\n       }\n \n       /**\n@@ -1158,7 +1158,7 @@ namespace std\n         const size_type __pos = __first - _M_ibegin();\n \t_M_mutate(__pos, __last - __first, size_type(0));\n \t_M_rep()->_M_set_leaked();\n-\treturn _M_ibegin() + __pos;\n+\treturn iterator(_M_data() + __pos);\n       }\n \n       /**"}, {"sha": "12b2e9c6f9a4c91f4d80ae359c6dc47e851c7fca", "filename": "libstdc++-v3/include/bits/stl_iterator.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3af22b23b32d69bd7cc0d444429f33e4edae008d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3af22b23b32d69bd7cc0d444429f33e4edae008d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h?ref=3af22b23b32d69bd7cc0d444429f33e4edae008d", "patch": "@@ -808,6 +808,12 @@ namespace __gnu_cxx\n \t      const __normal_iterator<_IteratorR, _Container>& __rhs)\n     { return __lhs.base() - __rhs.base(); }\n \n+  template<typename _Iterator, typename _Container>\n+    inline typename __normal_iterator<_Iterator, _Container>::difference_type\n+    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,\n+\t      const __normal_iterator<_Iterator, _Container>& __rhs)\n+    { return __lhs.base() - __rhs.base(); }\n+\n   template<typename _Iterator, typename _Container>\n     inline __normal_iterator<_Iterator, _Container>\n     operator+(typename __normal_iterator<_Iterator, _Container>::difference_type"}, {"sha": "c497c113c888e190e78ce4f381df981df3a4d6e9", "filename": "libstdc++-v3/include/debug/safe_iterator.h", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3af22b23b32d69bd7cc0d444429f33e4edae008d/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3af22b23b32d69bd7cc0d444429f33e4edae008d/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h?ref=3af22b23b32d69bd7cc0d444429f33e4edae008d", "patch": "@@ -607,6 +607,22 @@ namespace __gnu_debug\n       return __lhs.base() - __rhs.base();\n     }\n \n+   template<typename _Iterator, typename _Sequence>\n+     inline typename _Safe_iterator<_Iterator, _Sequence>::difference_type\n+     operator-(const _Safe_iterator<_Iterator, _Sequence>& __lhs,\n+\t       const _Safe_iterator<_Iterator, _Sequence>& __rhs)\n+     {\n+       _GLIBCXX_DEBUG_VERIFY(! __lhs._M_singular() && ! __rhs._M_singular(),\n+\t\t\t     _M_message(__msg_distance_bad)\n+\t\t\t     ._M_iterator(__lhs, \"lhs\")\n+\t\t\t     ._M_iterator(__rhs, \"rhs\"));\n+       _GLIBCXX_DEBUG_VERIFY(__lhs._M_can_compare(__rhs),\n+\t\t\t     _M_message(__msg_distance_different)\n+\t\t\t     ._M_iterator(__lhs, \"lhs\")\n+\t\t\t     ._M_iterator(__rhs, \"rhs\"));\n+       return __lhs.base() - __rhs.base();\n+     }\n+\n   template<typename _Iterator, typename _Sequence>\n     inline _Safe_iterator<_Iterator, _Sequence>\n     operator+(typename _Safe_iterator<_Iterator,_Sequence>::difference_type __n,"}, {"sha": "a316cf5b4c7b2e304cec00ecae672cf95c9f6363", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/types/1.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3af22b23b32d69bd7cc0d444429f33e4edae008d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Ftypes%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3af22b23b32d69bd7cc0d444429f33e4edae008d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Ftypes%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Ftypes%2F1.cc?ref=3af22b23b32d69bd7cc0d444429f33e4edae008d", "patch": "@@ -0,0 +1,48 @@\n+// 2005-12-01  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// { dg-do compile }\n+\n+#include <string>\n+\n+namespace N\n+{\n+  struct X { };\n+\n+  template<typename T>\n+    X operator+(T, std::size_t)\n+    { return X(); }\n+\n+  template<typename T>\n+    X operator-(T, T)\n+    { return X(); }\n+}\n+\n+int main()\n+{ \n+  std::basic_string<N::X> s(5, N::X());\n+\n+  s.erase(s.begin());\n+  s.erase(s.begin(), s.end());\n+  s.insert(s.begin(), N::X());\n+  s.replace(s.begin(), s.end(), s.begin(), s.end());\n+\n+  return 0;\n+}"}]}