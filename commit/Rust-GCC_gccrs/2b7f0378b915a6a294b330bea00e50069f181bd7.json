{"sha": "2b7f0378b915a6a294b330bea00e50069f181bd7", "node_id": "C_kwDOANBUbNoAKDJiN2YwMzc4YjkxNWE2YTI5NGIzMzBiZWEwMGU1MDA2OWYxODFiZDc", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2022-10-05T17:24:55Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2022-11-16T05:53:31Z"}, "message": "libstdc++: Fix gdb FilteringTypePrinter\n\nOnce we found a matching FilteringTypePrinter instance we look for the associated\ntypedef and check that the returned Python Type is equal to the Type to recognize.\nBut gdb Python Type includes properties to distinguish a typedef from the actual\ntype. So use gdb.types.get_basic_type to check if we are indeed on the same type.\n\nAdditionnaly enhance FilteringTypePrinter matching mecanism by introducing targ1 that,\nif not None, will be used as the 1st template parameter.\n\nlibstdc++-v3/ChangeLog:\n\n\t* python/libstdcxx/v6/printers.py (FilteringTypePrinter): Rename 'match' field\n\t'template'. Add self.targ1 to specify the first template parameter of the instantiation\n\tto match.\n\t(add_one_type_printer): Add targ1 optional parameter, default to None.\n\tUse gdb.types.get_basic_type to compare the type to recognize and the type\n\treturned from the typedef lookup.\n\t(register_type_printers): Adapt calls to add_one_type_printers.", "tree": {"sha": "babfd2f8267218ad6230f69d4f3efabf8ad7600d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/babfd2f8267218ad6230f69d4f3efabf8ad7600d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b7f0378b915a6a294b330bea00e50069f181bd7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b7f0378b915a6a294b330bea00e50069f181bd7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b7f0378b915a6a294b330bea00e50069f181bd7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b7f0378b915a6a294b330bea00e50069f181bd7/comments", "author": null, "committer": null, "parents": [{"sha": "63e1b2e767a3f4695373c2406ff719c0a60c1858", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63e1b2e767a3f4695373c2406ff719c0a60c1858", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63e1b2e767a3f4695373c2406ff719c0a60c1858"}], "stats": {"total": 84, "additions": 49, "deletions": 35}, "files": [{"sha": "eaaf5e817c04e1bd559b46bb4739eada5ad9c977", "filename": "libstdc++-v3/python/libstdcxx/v6/printers.py", "status": "modified", "additions": 49, "deletions": 35, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b7f0378b915a6a294b330bea00e50069f181bd7/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b7f0378b915a6a294b330bea00e50069f181bd7/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py?ref=2b7f0378b915a6a294b330bea00e50069f181bd7", "patch": "@@ -2069,74 +2069,80 @@ class FilteringTypePrinter(object):\n     A type printer that uses typedef names for common template specializations.\n \n     Args:\n-        match (str): The class template to recognize.\n+        template (str): The class template to recognize.\n         name (str): The typedef-name that will be used instead.\n+        targ1 (str): The first template argument.\n+            If arg1 is provided (not None), match only template specializations\n+            with this type as the first template argument,\n+            e.g. if template='basic_string<targ1'\n \n-    Checks if a specialization of the class template 'match' is the same type\n+    Checks if a specialization of the class template 'template' is the same type\n     as the typedef 'name', and prints it as 'name' instead.\n \n     e.g. if an instantiation of std::basic_istream<C, T> is the same type as\n     std::istream then print it as std::istream.\n     \"\"\"\n \n-    def __init__(self, match, name):\n-        self.match = match\n+    def __init__(self, template, name, targ1):\n+        self.template = template\n         self.name = name\n+        self.targ1 = targ1\n         self.enabled = True\n \n     class _recognizer(object):\n         \"The recognizer class for FilteringTypePrinter.\"\n \n-        def __init__(self, match, name):\n-            self.match = match\n+        def __init__(self, template, name, targ1):\n+            self.template = template\n             self.name = name\n+            self.targ1 = targ1\n             self.type_obj = None\n \n         def recognize(self, type_obj):\n             \"\"\"\n-            If type_obj starts with self.match and is the same type as\n+            If type_obj starts with self.template and is the same type as\n             self.name then return self.name, otherwise None.\n             \"\"\"\n             if type_obj.tag is None:\n                 return None\n \n             if self.type_obj is None:\n-                if not type_obj.tag.startswith(self.match):\n+                if self.targ1 is not None:\n+                    if not type_obj.tag.startswith('{}<{}'.format(self.template, self.targ1)):\n+                        # Filter didn't match.\n+                        return None\n+                elif not type_obj.tag.startswith(self.template):\n                     # Filter didn't match.\n                     return None\n+\n                 try:\n                     self.type_obj = gdb.lookup_type(self.name).strip_typedefs()\n                 except:\n                     pass\n-            if self.type_obj == type_obj:\n-                return strip_inline_namespaces(self.name)\n \n             if self.type_obj is None:\n                 return None\n \n-            # Workaround ambiguous typedefs matching both std:: and std::__cxx11:: symbols.\n-            ambiguous = False\n-            for ch in ('', 'w', 'u8', 'u16', 'u32'):\n-                if self.name == 'std::' + ch + 'string':\n-                    ambiguous = True\n-                    break\n+            if gdb.types.get_basic_type(self.type_obj) == gdb.types.get_basic_type(type_obj):\n+                return strip_inline_namespaces(self.name)\n \n-            if ambiguous:\n+            # Workaround ambiguous typedefs matching both std:: and std::__cxx11:: symbols.\n+            if self.template.split('::')[-1] == 'basic_string':\n                 if self.type_obj.tag.replace('__cxx11::', '') == type_obj.tag.replace('__cxx11::', ''):\n                     return strip_inline_namespaces(self.name)\n \n             return None\n \n     def instantiate(self):\n         \"Return a recognizer object for this type printer.\"\n-        return self._recognizer(self.match, self.name)\n+        return self._recognizer(self.template, self.name, self.targ1)\n \n-def add_one_type_printer(obj, match, name):\n-    printer = FilteringTypePrinter('std::' + match, 'std::' + name)\n+def add_one_type_printer(obj, template, name, targ1 = None):\n+    printer = FilteringTypePrinter('std::' + template, 'std::' + name, targ1)\n     gdb.types.register_type_printer(obj, printer)\n-    if _versioned_namespace and not '__cxx11' in match:\n+    if _versioned_namespace and not '__cxx11' in template:\n         ns = 'std::' + _versioned_namespace\n-        printer = FilteringTypePrinter(ns + match, ns + name)\n+        printer = FilteringTypePrinter(ns + template, ns + name, targ1)\n         gdb.types.register_type_printer(obj, printer)\n \n def register_type_printers(obj):\n@@ -2146,29 +2152,33 @@ def register_type_printers(obj):\n         return\n \n     # Add type printers for typedefs std::string, std::wstring etc.\n-    for ch in ('', 'w', 'u8', 'u16', 'u32'):\n-        add_one_type_printer(obj, 'basic_string', ch + 'string')\n-        add_one_type_printer(obj, '__cxx11::basic_string', ch + 'string')\n+    for ch in (('', 'char'),\n+               ('w', 'wchar_t'),\n+               ('u8', 'char8_t'),\n+               ('u16', 'char16_t'),\n+               ('u32', 'char32_t')):\n+        add_one_type_printer(obj, 'basic_string', ch[0] + 'string', ch[1])\n+        add_one_type_printer(obj, '__cxx11::basic_string', ch[0] + 'string', ch[1])\n         # Typedefs for __cxx11::basic_string used to be in namespace __cxx11:\n         add_one_type_printer(obj, '__cxx11::basic_string',\n-                             '__cxx11::' + ch + 'string')\n-        add_one_type_printer(obj, 'basic_string_view', ch + 'string_view')\n+                             '__cxx11::' + ch[0] + 'string', ch[1])\n+        add_one_type_printer(obj, 'basic_string_view', ch[0] + 'string_view', ch[1])\n \n     # Add type printers for typedefs std::istream, std::wistream etc.\n-    for ch in ('', 'w'):\n+    for ch in (('', 'char'), ('w', 'wchar_t')):\n         for x in ('ios', 'streambuf', 'istream', 'ostream', 'iostream',\n                   'filebuf', 'ifstream', 'ofstream', 'fstream'):\n-            add_one_type_printer(obj, 'basic_' + x, ch + x)\n+            add_one_type_printer(obj, 'basic_' + x, ch[0] + x, ch[1])\n         for x in ('stringbuf', 'istringstream', 'ostringstream',\n                   'stringstream'):\n-            add_one_type_printer(obj, 'basic_' + x, ch + x)\n+            add_one_type_printer(obj, 'basic_' + x, ch[0] + x, ch[1])\n             # <sstream> types are in __cxx11 namespace, but typedefs aren't:\n-            add_one_type_printer(obj, '__cxx11::basic_' + x, ch + x)\n+            add_one_type_printer(obj, '__cxx11::basic_' + x, ch[0] + x, ch[1])\n \n     # Add type printers for typedefs regex, wregex, cmatch, wcmatch etc.\n     for abi in ('', '__cxx11::'):\n-        for ch in ('', 'w'):\n-            add_one_type_printer(obj, abi + 'basic_regex', abi + ch + 'regex')\n+        for ch in (('', 'char'), ('w', 'wchar_t')):\n+            add_one_type_printer(obj, abi + 'basic_regex', abi + ch[0] + 'regex', ch[1])\n         for ch in ('c', 's', 'wc', 'ws'):\n             add_one_type_printer(obj, abi + 'match_results', abi + ch + 'match')\n             for x in ('sub_match', 'regex_iterator', 'regex_token_iterator'):\n@@ -2196,9 +2206,13 @@ def register_type_printers(obj):\n \n     # Add type printers for experimental::basic_string_view typedefs.\n     ns = 'experimental::fundamentals_v1::'\n-    for ch in ('', 'w', 'u8', 'u16', 'u32'):\n+    for ch in (('', 'char'),\n+               ('w', 'wchar_t'),\n+               ('u8', 'char8_t'),\n+               ('u16', 'char16_t'),\n+               ('u32', 'char32_t')):\n         add_one_type_printer(obj, ns + 'basic_string_view',\n-                             ns + ch + 'string_view')\n+                             ns + ch[0] + 'string_view', ch[1])\n \n     # Do not show defaulted template arguments in class templates.\n     add_one_template_type_printer(obj, 'unique_ptr',"}]}