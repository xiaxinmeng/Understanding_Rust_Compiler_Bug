{"sha": "d71126eeea5c324115c8825b3cec55e5c2fd1627", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDcxMTI2ZWVlYTVjMzI0MTE1Yzg4MjViM2NlYzU1ZTVjMmZkMTYyNw==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-09-12T00:16:18Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-09-12T00:16:18Z"}, "message": "Daily bump.", "tree": {"sha": "24c057bc34a118a5ba008bec34e20cf410e22c60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/24c057bc34a118a5ba008bec34e20cf410e22c60"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d71126eeea5c324115c8825b3cec55e5c2fd1627", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d71126eeea5c324115c8825b3cec55e5c2fd1627", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d71126eeea5c324115c8825b3cec55e5c2fd1627", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d71126eeea5c324115c8825b3cec55e5c2fd1627/comments", "author": null, "committer": null, "parents": [{"sha": "79513dc0b2d980bfd1b109d0d502de487c02b894", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79513dc0b2d980bfd1b109d0d502de487c02b894", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79513dc0b2d980bfd1b109d0d502de487c02b894"}], "stats": {"total": 72, "additions": 71, "deletions": 1}, "files": [{"sha": "84db68fb9f33a34be38e75516d0822ab6ea80ff4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d71126eeea5c324115c8825b3cec55e5c2fd1627/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d71126eeea5c324115c8825b3cec55e5c2fd1627/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d71126eeea5c324115c8825b3cec55e5c2fd1627", "patch": "@@ -1,3 +1,55 @@\n+2021-09-11  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* tree-ssa-threadbackward.c (class back_threader_registry): Use\n+\tback_jt_path_registry.\n+\t* tree-ssa-threadedge.c (jump_threader::jump_threader): Use\n+\tfwd_jt_path_registry.\n+\t* tree-ssa-threadedge.h (class jump_threader): Same..\n+\t* tree-ssa-threadupdate.c\n+\t(jump_thread_path_registry::jump_thread_path_registry): Rename...\n+\t(jt_path_registry::jt_path_registry): ...to this.\n+\t(jump_thread_path_registry::~jump_thread_path_registry): Rename...\n+\t(jt_path_registry::~jt_path_registry): ...this.\n+\t(fwd_jt_path_registry::fwd_jt_path_registry): New.\n+\t(fwd_jt_path_registry::~fwd_jt_path_registry): New.\n+\t(jump_thread_path_registry::allocate_thread_edge): Rename...\n+\t(jt_path_registry::allocate_thread_edge): ...to this.\n+\t(jump_thread_path_registry::allocate_thread_path): Rename...\n+\t(jt_path_registry::allocate_thread_path): ...to this.\n+\t(jump_thread_path_registry::lookup_redirection_data): Rename...\n+\t(fwd_jt_path_registry::lookup_redirection_data): ...to this.\n+\t(jump_thread_path_registry::thread_block_1): Rename...\n+\t(fwd_jt_path_registry::thread_block_1): ...to this.\n+\t(jump_thread_path_registry::thread_block): Rename...\n+\t(fwd_jt_path_registry::thread_block): ...to this.\n+\t(jt_path_registry::thread_through_loop_header): Rename...\n+\t(fwd_jt_path_registry::thread_through_loop_header): ...to this.\n+\t(jump_thread_path_registry::mark_threaded_blocks): Rename...\n+\t(fwd_jt_path_registry::mark_threaded_blocks): ...to this.\n+\t(jump_thread_path_registry::debug_path): Rename...\n+\t(jt_path_registry::debug_path): ...to this.\n+\t(jump_thread_path_registry::dump): Rename...\n+\t(jt_path_registry::debug): ...to this.\n+\t(jump_thread_path_registry::rewire_first_differing_edge): Rename...\n+\t(back_jt_path_registry::rewire_first_differing_edge): ...to this.\n+\t(jump_thread_path_registry::adjust_paths_after_duplication): Rename...\n+\t(back_jt_path_registry::adjust_paths_after_duplication): ...to this.\n+\t(jump_thread_path_registry::duplicate_thread_path): Rename...\n+\t(back_jt_path_registry::duplicate_thread_path): ...to this.  Also,\n+\tdrop ill-formed candidates.\n+\t(jump_thread_path_registry::remove_jump_threads_including): Rename...\n+\t(fwd_jt_path_registry::remove_jump_threads_including): ...to this.\n+\t(jt_path_registry::thread_through_all_blocks): New.\n+\t(back_jt_path_registry::update_cfg): New.\n+\t(fwd_jt_path_registry::update_cfg): New.\n+\t(jump_thread_path_registry::register_jump_thread): Rename...\n+\t(jt_path_registry::register_jump_thread): ...to this.\n+\t* tree-ssa-threadupdate.h (class jump_thread_path_registry):\n+\tAbstract to...\n+\t(class jt_path_registry): ...here.\n+\t(class fwd_jt_path_registry): New.\n+\t(class back_jt_path_registry): New.\n+\n 2021-09-10  liuhongt  <hongtao.liu@intel.com>\n \n \tRevert:"}, {"sha": "95cff1627a67a65d0e0d50b305fc25511e780549", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d71126eeea5c324115c8825b3cec55e5c2fd1627/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d71126eeea5c324115c8825b3cec55e5c2fd1627/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=d71126eeea5c324115c8825b3cec55e5c2fd1627", "patch": "@@ -1 +1 @@\n-20210911\n+20210912"}, {"sha": "a3b6f13f2f82573d1809f178380022078b90def0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d71126eeea5c324115c8825b3cec55e5c2fd1627/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d71126eeea5c324115c8825b3cec55e5c2fd1627/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d71126eeea5c324115c8825b3cec55e5c2fd1627", "patch": "@@ -1,3 +1,21 @@\n+2021-09-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-c++-common/auto-init-1.c: Enable test only on ilp32 or lp64\n+\ttargets, expect different long and pointer sizes between ilp32 and\n+\tlp64.\n+\t* c-c++-common/auto-init-2.c: Likewise.\n+\t* c-c++-common/auto-init-3.c: Expect one of the common long double\n+\tsizes (8/12/16 bytes) instead of hardcoding 16 bytes.\n+\t* c-c++-common/auto-init-4.c: Likewise.\n+\t* c-c++-common/auto-init-5.c: Expect one of the common\n+\t_Complex long double sizes (16/24/32 bytes) instead of hardcoding 32\n+\tbytes.\n+\t* c-c++-common/auto-init-6.c: Likewise.\n+\t* c-c++-common/auto-init-padding-1.c: Enable test only on ilp32 or lp64\n+\ttargets.\n+\t(struct test_small_hole): Change type of four to unsigned long long\n+\tand add aligned attribute.\n+\n 2021-09-10  Petter Tomner  <tomner@kth.se>\n \n \t* jit.dg/test-error-array-bounds.c: Array is not unsigned"}]}