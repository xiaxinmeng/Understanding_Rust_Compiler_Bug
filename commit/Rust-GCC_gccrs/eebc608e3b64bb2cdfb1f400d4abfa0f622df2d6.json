{"sha": "eebc608e3b64bb2cdfb1f400d4abfa0f622df2d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWViYzYwOGUzYjY0YmIyY2RmYjFmNDAwZDRhYmZhMGY2MjJkZjJkNg==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-12-13T09:25:44Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-12-13T09:25:44Z"}, "message": "[multiple changes]\n\n\n2000-12-12  Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n\n\t* acinclude.m4 (GLIBCPP_CHECK_CTYPE_SUPPORT): Don't link ctype\n\tfiles here...\n\t* configure.in: Rather, do it once for all targets here. Clean up\n\tcanadian cross and cross compile targets for linux-targeted\n\tcrosses.\n\t* configure: Regenerate.\n\t* aclocal.m4: Regnerate.\n\t* acconfig.h: Add more defines.\n\t* config.h.in: Regenerate.\n\n2000-12-12  Angela Marie Thomas <angela@cygnus.com>\n\n\t* configure.in: Fix case for host-x-linux\n\t* configure: Regenerate.\n\nFrom-SVN: r38217", "tree": {"sha": "43a56406cf2f2cb108a8ae44a1e6dd9690671415", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43a56406cf2f2cb108a8ae44a1e6dd9690671415"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eebc608e3b64bb2cdfb1f400d4abfa0f622df2d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eebc608e3b64bb2cdfb1f400d4abfa0f622df2d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eebc608e3b64bb2cdfb1f400d4abfa0f622df2d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eebc608e3b64bb2cdfb1f400d4abfa0f622df2d6/comments", "author": null, "committer": null, "parents": [{"sha": "29b8e5ddc05726cbbf26142fcd09448193a7071a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29b8e5ddc05726cbbf26142fcd09448193a7071a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29b8e5ddc05726cbbf26142fcd09448193a7071a"}], "stats": {"total": 3952, "additions": 2573, "deletions": 1379}, "files": [{"sha": "2c1efe0986b6c90806d73982456db6c0dfc7f755", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eebc608e3b64bb2cdfb1f400d4abfa0f622df2d6/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eebc608e3b64bb2cdfb1f400d4abfa0f622df2d6/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=eebc608e3b64bb2cdfb1f400d4abfa0f622df2d6", "patch": "@@ -1,3 +1,20 @@\n+2000-12-12  Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n+\n+\t* acinclude.m4 (GLIBCPP_CHECK_CTYPE_SUPPORT): Don't link ctype\n+\tfiles here...\n+\t* configure.in: Rather, do it once for all targets here. Clean up\n+\tcanadian cross and cross compile targets for linux-targeted\n+\tcrosses.\n+\t* configure: Regenerate.\n+\t* aclocal.m4: Regnerate.\n+\t* acconfig.h: Add more defines.\n+\t* config.h.in: Regenerate.\n+\t\n+2000-12-12  Angela Marie Thomas <angela@cygnus.com>\n+\n+\t* configure.in: Fix case for host-x-linux\n+\t* configure: Regenerate.\n+\n 2000-12-10  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n \n \t* src/Makefile.am (libstdc++.INC:): 2000-12-05 reverted to include"}, {"sha": "8990f6a879ae79394daaec1aec69ae707395aad9", "filename": "libstdc++-v3/Makefile.in", "status": "modified", "additions": 1, "deletions": 42, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eebc608e3b64bb2cdfb1f400d4abfa0f622df2d6/libstdc%2B%2B-v3%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eebc608e3b64bb2cdfb1f400d4abfa0f622df2d6/libstdc%2B%2B-v3%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.in?ref=eebc608e3b64bb2cdfb1f400d4abfa0f622df2d6", "patch": "@@ -135,48 +135,7 @@ MULTICLEAN = true\n # Work around what appears to be a GNU make bug handling MAKEFLAGS\n # values defined in terms of make variables, as is the case for CC and\n # friends when we are called from the top level Makefile.\n-AM_MAKEFLAGS = \\\n-\t\"AR_FLAGS=$(AR_FLAGS)\" \\\n-\t\"CC_FOR_BUILD=$(CC_FOR_BUILD)\" \\\n-\t\"CC_FOR_TARGET=$(CC_FOR_TARGET)\" \\\n-\t\"CFLAGS=$(CFLAGS)\" \\\n-\t\"CXXFLAGS=$(CXXFLAGS)\" \\\n-\t\"CFLAGS_FOR_BUILD=$(CFLAGS_FOR_BUILD)\" \\\n-\t\"CFLAGS_FOR_TARGET=$(CFLAGS_FOR_TARGET)\" \\\n-\t\"INSTALL=$(INSTALL)\" \\\n-\t\"INSTALL_DATA=$(INSTALL_DATA)\" \\\n-\t\"INSTALL_PROGRAM=$(INSTALL_PROGRAM)\" \\\n-\t\"INSTALL_SCRIPT=$(INSTALL_SCRIPT)\" \\\n-\t\"LDFLAGS=$(LDFLAGS)\" \\\n-\t\"LIBCFLAGS=$(LIBCFLAGS)\" \\\n-\t\"LIBCFLAGS_FOR_TARGET=$(LIBCFLAGS_FOR_TARGET)\" \\\n-\t\"MAKE=$(MAKE)\" \\\n-\t\"MAKEINFO=$(MAKEINFO) $(MAKEINFOFLAGS)\" \\\n-\t\"PICFLAG=$(PICFLAG)\" \\\n-\t\"PICFLAG_FOR_TARGET=$(PICFLAG_FOR_TARGET)\" \\\n-\t\"SHELL=$(SHELL)\" \\\n-\t\"EXPECT=$(EXPECT)\" \\\n-\t\"RUNTEST=$(RUNTEST)\" \\\n-\t\"RUNTESTFLAGS=$(RUNTESTFLAGS)\" \\\n-\t\"exec_prefix=$(exec_prefix)\" \\\n-\t\"infodir=$(infodir)\" \\\n-\t\"libdir=$(libdir)\" \\\n-\t\"includedir=$(includedir)\" \\\n-\t\"prefix=$(prefix)\" \\\n-\t\"tooldir=$(tooldir)\" \\\n-\t\"AR=$(AR)\" \\\n-\t\"AS=$(AS)\" \\\n-\t\"CC=$(CC)\" \\\n-\t\"CXX=$(CXX)\" \\\n-\t\"LD=$(LD)\" \\\n-\t\"LIBCFLAGS=$(LIBCFLAGS)\" \\\n-\t\"PICFLAG=$(PICFLAG)\" \\\n-\t\"RANLIB=$(RANLIB)\" \\\n-\t\"NM=$(NM)\" \\\n-\t\"NM_FOR_BUILD=$(NM_FOR_BUILD)\" \\\n-\t\"NM_FOR_TARGET=$(NM_FOR_TARGET)\" \\\n-\t\"DESTDIR=$(DESTDIR)\" \\\n-\t\"WERROR=$(WERROR)\" \n+AM_MAKEFLAGS =  \t\"AR_FLAGS=$(AR_FLAGS)\" \t\"CC_FOR_BUILD=$(CC_FOR_BUILD)\" \t\"CC_FOR_TARGET=$(CC_FOR_TARGET)\" \t\"CFLAGS=$(CFLAGS)\" \t\"CXXFLAGS=$(CXXFLAGS)\" \t\"CFLAGS_FOR_BUILD=$(CFLAGS_FOR_BUILD)\" \t\"CFLAGS_FOR_TARGET=$(CFLAGS_FOR_TARGET)\" \t\"INSTALL=$(INSTALL)\" \t\"INSTALL_DATA=$(INSTALL_DATA)\" \t\"INSTALL_PROGRAM=$(INSTALL_PROGRAM)\" \t\"INSTALL_SCRIPT=$(INSTALL_SCRIPT)\" \t\"LDFLAGS=$(LDFLAGS)\" \t\"LIBCFLAGS=$(LIBCFLAGS)\" \t\"LIBCFLAGS_FOR_TARGET=$(LIBCFLAGS_FOR_TARGET)\" \t\"MAKE=$(MAKE)\" \t\"MAKEINFO=$(MAKEINFO) $(MAKEINFOFLAGS)\" \t\"PICFLAG=$(PICFLAG)\" \t\"PICFLAG_FOR_TARGET=$(PICFLAG_FOR_TARGET)\" \t\"SHELL=$(SHELL)\" \t\"EXPECT=$(EXPECT)\" \t\"RUNTEST=$(RUNTEST)\" \t\"RUNTESTFLAGS=$(RUNTESTFLAGS)\" \t\"exec_prefix=$(exec_prefix)\" \t\"infodir=$(infodir)\" \t\"libdir=$(libdir)\" \t\"includedir=$(includedir)\" \t\"prefix=$(prefix)\" \t\"tooldir=$(tooldir)\" \t\"AR=$(AR)\" \t\"AS=$(AS)\" \t\"CC=$(CC)\" \t\"CXX=$(CXX)\" \t\"LD=$(LD)\" \t\"LIBCFLAGS=$(LIBCFLAGS)\" \t\"PICFLAG=$(PICFLAG)\" \t\"RANLIB=$(RANLIB)\" \t\"NM=$(NM)\" \t\"NM_FOR_BUILD=$(NM_FOR_BUILD)\" \t\"NM_FOR_TARGET=$(NM_FOR_TARGET)\" \t\"DESTDIR=$(DESTDIR)\" \t\"WERROR=$(WERROR)\" \n \n ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n mkinstalldirs = $(SHELL) $(top_srcdir)/../mkinstalldirs"}, {"sha": "f516be0c69c301617637ef3a7b4042b8be58e17f", "filename": "libstdc++-v3/acconfig.h", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eebc608e3b64bb2cdfb1f400d4abfa0f622df2d6/libstdc%2B%2B-v3%2Facconfig.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eebc608e3b64bb2cdfb1f400d4abfa0f622df2d6/libstdc%2B%2B-v3%2Facconfig.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facconfig.h?ref=eebc608e3b64bb2cdfb1f400d4abfa0f622df2d6", "patch": "@@ -18,6 +18,21 @@\n // Define if lldiv_t exists in stdlib.h.\n #undef HAVE_LLDIV_T\n \n+/* Define if you have the atan2f function.  */\n+#define _GLIBCPP_HAVE_ATAN2F 1\n+\n+/* Define if you have the atan2l function.  */\n+#define _GLIBCPP_HAVE_ATAN2L 1\n+\n+/* Define if you have the copysignf function.  */\n+#define _GLIBCPP_HAVE_COPYSIGNF 1\n+\n+/* Define if you have the modff function.  */\n+#undef HAVE_MODFF\n+\n+/* Define if you have the modfl function.  */\n+#undef HAVE_MODFL\n+\n // Define if the compiler/host combination has __builtin_abs\n #undef HAVE___BUILTIN_ABS\n "}, {"sha": "e55172a94e1f47b8397809a650e301a22a73df7f", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eebc608e3b64bb2cdfb1f400d4abfa0f622df2d6/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eebc608e3b64bb2cdfb1f400d4abfa0f622df2d6/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=eebc608e3b64bb2cdfb1f400d4abfa0f622df2d6", "patch": "@@ -614,6 +614,7 @@ AC_DEFUN(GLIBCPP_CHECK_MATH_SUPPORT, [\n   dnl Check to see if basic C math functions have float versions.\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(isnanf)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(isinff)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(copysignf)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(acosf)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(asinf)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(atanf)\n@@ -683,6 +684,7 @@ AC_DEFUN(GLIBCPP_CHECK_MATH_SUPPORT, [\n   dnl Check to see if basic C math functions have float versions.\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_isnanf)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_isinff)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(_copysignf)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_acosf)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_asinf)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_atanf)\n@@ -754,8 +756,7 @@ AC_DEFUN(GLIBCPP_CHECK_COMPLEX_MATH_SUPPORT, [\n   dnl Check for complex versions of math functions of platform.\n   AC_CHECK_HEADERS([complex.h])\n   AC_CHECK_LIB(m, main)\n-  AC_REPLACE_MATHFUNCS(csqrt csqrtf nan hypot hypotf atan2f expf \\\n-  copysignf)\n+  AC_REPLACE_MATHFUNCS(csqrt csqrtf nan hypot hypotf)\n \n   dnl Compile the long double complex functions only if the function \n   dnl provides the non-complex long double functions that are needed.\n@@ -963,13 +964,6 @@ AC_DEFUN(GLIBCPP_CHECK_CTYPE_SUPPORT, [\n       ctype_include_dir=\"config/os/generic\"\n       AC_MSG_WARN(\"Using default ctype headers.\")\n     fi\n-\n-    AC_LINK_FILES($ctype_include_dir/bits/ctype_base.h, \n-    include/bits/ctype_base.h)\n-    AC_LINK_FILES($ctype_include_dir/bits/ctype_inline.h, \n-    include/bits/ctype_inline.h)\n-    AC_LINK_FILES($ctype_include_dir/bits/ctype_noninline.h, \\\n-    include/bits/ctype_noninline.h)\n   ])\n ])\n "}, {"sha": "4ef2bdb77df6c7e18fca880568630d52c7d9b498", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eebc608e3b64bb2cdfb1f400d4abfa0f622df2d6/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eebc608e3b64bb2cdfb1f400d4abfa0f622df2d6/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=eebc608e3b64bb2cdfb1f400d4abfa0f622df2d6", "patch": "@@ -626,6 +626,7 @@ AC_DEFUN(GLIBCPP_CHECK_MATH_SUPPORT, [\n   dnl Check to see if basic C math functions have float versions.\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(isnanf)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(isinff)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(copysignf)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(acosf)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(asinf)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(atanf)\n@@ -695,6 +696,7 @@ AC_DEFUN(GLIBCPP_CHECK_MATH_SUPPORT, [\n   dnl Check to see if basic C math functions have float versions.\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_isnanf)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_isinff)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(_copysignf)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_acosf)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_asinf)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_atanf)\n@@ -766,8 +768,7 @@ AC_DEFUN(GLIBCPP_CHECK_COMPLEX_MATH_SUPPORT, [\n   dnl Check for complex versions of math functions of platform.\n   AC_CHECK_HEADERS([complex.h])\n   AC_CHECK_LIB(m, main)\n-  AC_REPLACE_MATHFUNCS(csqrt csqrtf nan hypot hypotf atan2f expf \\\n-  copysignf)\n+  AC_REPLACE_MATHFUNCS(csqrt csqrtf nan hypot hypotf)\n \n   dnl Compile the long double complex functions only if the function \n   dnl provides the non-complex long double functions that are needed.\n@@ -975,13 +976,6 @@ AC_DEFUN(GLIBCPP_CHECK_CTYPE_SUPPORT, [\n       ctype_include_dir=\"config/os/generic\"\n       AC_MSG_WARN(\"Using default ctype headers.\")\n     fi\n-\n-    AC_LINK_FILES($ctype_include_dir/bits/ctype_base.h, \n-    include/bits/ctype_base.h)\n-    AC_LINK_FILES($ctype_include_dir/bits/ctype_inline.h, \n-    include/bits/ctype_inline.h)\n-    AC_LINK_FILES($ctype_include_dir/bits/ctype_noninline.h, \\\n-    include/bits/ctype_noninline.h)\n   ])\n ])\n "}, {"sha": "ce72a7ed26f161b660dd1a90bccd4811928f4a54", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eebc608e3b64bb2cdfb1f400d4abfa0f622df2d6/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eebc608e3b64bb2cdfb1f400d4abfa0f622df2d6/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=eebc608e3b64bb2cdfb1f400d4abfa0f622df2d6", "patch": "@@ -18,6 +18,12 @@\n // Define if lldiv_t exists in stdlib.h.\n #undef HAVE_LLDIV_T\n \n+/* Define if you have the modff function.  */\n+#undef HAVE_MODFF\n+\n+/* Define if you have the modfl function.  */\n+#undef HAVE_MODFL\n+\n // Define if the compiler/host combination has __builtin_abs\n #undef HAVE___BUILTIN_ABS\n \n@@ -69,12 +75,6 @@\n // Define if LC_MESSAGES is available in <locale.h>.\n #undef HAVE_LC_MESSAGES\n \n-// Define if <float.h> exists.\n-#undef HAVE_FLOAT_H\n-\n-// Define if modf is present in <math.h>\n-#undef HAVE_MODF\n-\n /* Define if you have the _acosf function.  */\n #undef HAVE__ACOSF\n \n@@ -108,6 +108,9 @@\n /* Define if you have the _copysign function.  */\n #undef HAVE__COPYSIGN\n \n+/* Define if you have the _copysignf function.  */\n+#undef HAVE__COPYSIGNF\n+\n /* Define if you have the _copysignl function.  */\n #undef HAVE__COPYSIGNL\n "}, {"sha": "fb3ece4abed0dd0828ce09bacdff675c0d47b982", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 2361, "deletions": 1079, "changes": 3440, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eebc608e3b64bb2cdfb1f400d4abfa0f622df2d6/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eebc608e3b64bb2cdfb1f400d4abfa0f622df2d6/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=eebc608e3b64bb2cdfb1f400d4abfa0f622df2d6"}, {"sha": "d8d5b3e565003c92645cb9a375d08f750b9be929", "filename": "libstdc++-v3/configure.in", "status": "modified", "additions": 100, "deletions": 31, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eebc608e3b64bb2cdfb1f400d4abfa0f622df2d6/libstdc%2B%2B-v3%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eebc608e3b64bb2cdfb1f400d4abfa0f622df2d6/libstdc%2B%2B-v3%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.in?ref=eebc608e3b64bb2cdfb1f400d4abfa0f622df2d6", "patch": "@@ -42,18 +42,17 @@ GLIBCPP_ENABLE_THREADS\n GLIBCPP_ENABLE_ATOMICITY\n GLIBCPP_ENABLE_CXX_FLAGS([none])\n \n-\n if test -n \"$with_cross_host\"; then\n \n   # We are being configured with a cross compiler.  AC_REPLACE_FUNCS\n   # may not work correctly, because the compiler may not be able to\n   # link executables.\n-\n   xcompiling=1\n   NATIVE=no\n+\n   # If Canadian cross, then don't pick up tools from the build\n   # directory.\n-  if test \"$build\" != \"$with_cross_host\"; then\n+  if test x\"$build\" != x\"$with_cross_host\" && x\"$build\" != x\"$target\"; then\n     CANADIAN=yes\n     NULL_TARGET=yes\n   else\n@@ -62,27 +61,96 @@ if test -n \"$with_cross_host\"; then\n   fi\n \n   case \"$target_alias\" in\n-    *-wince-*)\n-\t# Configure for Microsoft Windows CE, or whatever they are\n-\t# currently calling it.\n-\tAC_DEFINE(HAVE_FLOAT_H)\n-\n-\tAC_DEFINE(HAVE__FINITE)\n-\tAC_DEFINE(HAVE__ISNAN)\n-\tAC_DEFINE(HAVE__COPYSIGN)\n-\tAC_DEFINE(HAVE__FPCLASS)\n-\tAC_DEFINE(HAVE_MODF)\n-\n-\tctype_include_dir=\"config/os/wince\"\n-\tAC_LINK_FILES($ctype_include_dir/bits/ctype_base.h, \n-\tinclude/bits/ctype_base.h)\n-\tAC_LINK_FILES($ctype_include_dir/bits/ctype_inline.h, \\\n-\tinclude/bits/ctype_inline.h)\n-\tAC_LINK_FILES($ctype_include_dir/bits/ctype_noninline.h, \\\n-\tinclude/bits/ctype_noninline.h)\n-\n-\tAC_DEFINE(_GLIBCPP_BUGGY_FLOAT_COMPLEX)\n-\tAC_DEFINE(_GLIBCPP_BUGGY_COMPLEX)\n+    *-linux-*)\n+\t# Construct linux crosses by hand, eliminating bits that need ld...\n+        # Check for available headers.\n+        AC_CHECK_HEADERS([nan.h ieeefp.h endian.h sys/isa_defs.h \\\n+\tmachine/endian.h machine/param.h sys/machine.h fp.h locale.h \\\n+\tfloat.h inttypes.h])\n+\n+\t# GLIBCPP_CHECK_COMPILER_FEATURES\n+\tWFMT_FLAGS='-fdiagnostics-show-location=once'\n+\tSECTION_FLAGS='-ffunction-sections -fdata-sections'\n+\tAC_SUBST(WFMT_FLAGS)\n+\tAC_SUBST(SECTION_FLAGS)\n+\tGLIBCPP_CHECK_LINKER_FEATURES\n+\t# GLIBCPP_CHECK_BUILTIN_MATH_SUPPORT\n+\t# GLIBCPP_CHECK_MATH_SUPPORT\n+\tAC_DEFINE(HAVE_ACOSF)\n+\tAC_DEFINE(HAVE_ASINF)\n+\tAC_DEFINE(HAVE_ATAN2F)\n+\tAC_DEFINE(HAVE_ATANF)\n+\tAC_DEFINE(HAVE_CEILF)\n+\tAC_DEFINE(HAVE_COPYSIGN)\n+\tAC_DEFINE(HAVE_COPYSIGNF)\n+\tAC_DEFINE(HAVE_COSF)\n+\tAC_DEFINE(HAVE_COSHF)\n+\tAC_DEFINE(HAVE_EXPF)\n+\tAC_DEFINE(HAVE_FABSF)\n+\tAC_DEFINE(HAVE_FINITE)\n+\tAC_DEFINE(HAVE_FINITEF)\n+\tAC_DEFINE(HAVE_FLOORF)\n+\tAC_DEFINE(HAVE_FMODF)\n+\tAC_DEFINE(HAVE_FREXPF)\n+\tAC_DEFINE(HAVE_ISINF)\n+\tAC_DEFINE(HAVE_ISINFF)\n+\tAC_DEFINE(HAVE_ISNAN)\n+\tAC_DEFINE(HAVE_ISNANF)\n+\tAC_DEFINE(HAVE_LDEXPF)\n+\tAC_DEFINE(HAVE_LOG10F)\n+\tAC_DEFINE(HAVE_LOGF)\n+\tAC_DEFINE(HAVE_MODFF)\n+\tAC_DEFINE(HAVE_POWF)\n+\tAC_DEFINE(HAVE_SINCOS)\n+\tAC_DEFINE(HAVE_SINCOSF)\n+\tAC_DEFINE(HAVE_SINF)\n+\tAC_DEFINE(HAVE_SINHF)\n+\tAC_DEFINE(HAVE_SQRTF)\n+\tAC_DEFINE(HAVE_TANF)\n+\tAC_DEFINE(HAVE_TANHF)\n+\n+\t# At some point, we should differentiate between architectures\n+\t# like x86, which have long double versions, and alpha/powerpc/etc.,\n+\t# which don't. For the time being, punt.\n+\tif test x\"long_double_math_on_this_cpu\" = x\"yes\"; then\n+\t  AC_DEFINE(HAVE_ACOSL)\n+\t  AC_DEFINE(HAVE_ASINL)\n+\t  AC_DEFINE(HAVE_ATAN2L)\n+\t  AC_DEFINE(HAVE_ATANL)\n+\t  AC_DEFINE(HAVE_CEILL)\n+\t  AC_DEFINE(HAVE_COPYSIGNL)\n+\t  AC_DEFINE(HAVE_COSL)\n+\t  AC_DEFINE(HAVE_COSHL)\n+\t  AC_DEFINE(HAVE_EXPL)\n+\t  AC_DEFINE(HAVE_FABSL)\n+\t  AC_DEFINE(HAVE_FINITEL)\n+\t  AC_DEFINE(HAVE_FLOORL)\n+\t  AC_DEFINE(HAVE_FMODL)\n+\t  AC_DEFINE(HAVE_FREXPL)\n+\t  AC_DEFINE(HAVE_ISINFL)\n+\t  AC_DEFINE(HAVE_ISNANL)\n+\t  AC_DEFINE(HAVE_LDEXPL)\n+\t  AC_DEFINE(HAVE_LOG10L)\n+\t  AC_DEFINE(HAVE_LOGL)\n+\t  AC_DEFINE(HAVE_MODFL)\n+\t  AC_DEFINE(HAVE_POWL)\n+\t  AC_DEFINE(HAVE_SINCOSL)\n+\t  AC_DEFINE(HAVE_SINL)\n+\t  AC_DEFINE(HAVE_SINHL)\n+\t  AC_DEFINE(HAVE_SQRTL)\n+\t  AC_DEFINE(HAVE_TANL)\n+\t  AC_DEFINE(HAVE_TANHL)\n+\tfi\n+\tGLIBCPP_CHECK_COMPLEX_MATH_SUPPORT\n+\tGLIBCPP_CHECK_COMPLEX_MATH_COMPILER_SUPPORT\n+\tGLIBCPP_CHECK_WCHAR_T_SUPPORT\n+\t# GLIBCPP_CHECK_CTYPE_SUPPORT\n+\tctype_include_dir=\"config/os/gnu-linux\"\n+\t# GLIBCPP_CHECK_STDLIB_SUPPORT\n+\tAC_DEFINE(HAVE_STRTOF)        \n+\tAC_DEFINE(HAVE_STRTOLD)        \n+\t# AC_FUNC_MMAP\n+\tAC_DEFINE(HAVE_MMAP)\n \t;;\n     *)\n \t# We assume newlib.  This lets us hard-code the functions we know\n@@ -94,12 +162,6 @@ if test -n \"$with_cross_host\"; then\n \tAC_DEFINE(HAVE_ISINFF)\n \n \tctype_include_dir=\"config/os/newlib\"\n-\tAC_LINK_FILES($ctype_include_dir/bits/ctype_base.h, \n-\tinclude/bits/ctype_base.h)\n-\tAC_LINK_FILES($ctype_include_dir/bits/ctype_inline.h, \\\n-\tinclude/bits/ctype_inline.h)\n-\tAC_LINK_FILES($ctype_include_dir/bits/ctype_noninline.h, \\\n-\tinclude/bits/ctype_noninline.h)\n \n \tAC_DEFINE(_GLIBCPP_BUGGY_FLOAT_COMPLEX)\n \tAC_DEFINE(_GLIBCPP_BUGGY_COMPLEX)\n@@ -111,7 +173,6 @@ else\n   # We are being configured natively. We can do more elaborate tests\n   # that include AC_TRY_COMPILE now, as the linker is assumed to be\n   # working.\n-\n   xcompiling=0\n   NATIVE=yes\n   CANADIAN=no\n@@ -134,6 +195,14 @@ else\n   AC_FUNC_MMAP\n fi\n \n+# Now that ctype is determined for all possible targets, we can do this...\n+AC_LINK_FILES($ctype_include_dir/bits/ctype_base.h, \\\n+include/bits/ctype_base.h)\n+AC_LINK_FILES($ctype_include_dir/bits/ctype_inline.h, \\\n+include/bits/ctype_inline.h)\n+AC_LINK_FILES($ctype_include_dir/bits/ctype_noninline.h, \\\n+include/bits/ctype_noninline.h)\n+\n AM_CONDITIONAL(CANADIAN, test \"$CANADIAN\" = yes)\n AM_CONDITIONAL(NULL_TARGET, test \"$NULL_TARGET\" = yes)\n AM_CONDITIONAL(NATIVE, test \"$NATIVE\" = yes || test \"$NULL_TARGET\" = yes)"}, {"sha": "d9b60c6b3dfb0bd43229b989f28abb03095a6e7f", "filename": "libstdc++-v3/libio/Makefile.in", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eebc608e3b64bb2cdfb1f400d4abfa0f622df2d6/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eebc608e3b64bb2cdfb1f400d4abfa0f622df2d6/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2FMakefile.in?ref=eebc608e3b64bb2cdfb1f400d4abfa0f622df2d6", "patch": "@@ -110,7 +110,7 @@ libio_la = @libio_la@\n libstdcxx_interface = @libstdcxx_interface@\n \n AUTOMAKE_OPTIONS = 1.3 cygnus\n-@GLIBCPP_BUILD_LIBIO_TRUE@noinst_LTLIBRARIES = @GLIBCPP_BUILD_LIBIO_TRUE@libio.la\n+@GLIBCPP_BUILD_LIBIO_TRUE@noinst_LTLIBRARIES = libio.la\n @GLIBCPP_BUILD_LIBIO_FALSE@noinst_LTLIBRARIES = \n \n # Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n@@ -122,21 +122,14 @@ LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n CSHADOW_INCLUDES = @CSHADOW_INCLUDES@\n \n-INCLUDES = \\\n-\t-nostdinc++ \\\n-\t-I$(top_builddir)/include -I$(GLIBCPP_INCLUDE_DIR) \\\n-\t$(LIBIO_INCLUDES) $(TOPLEVEL_INCLUDES)\t\n+INCLUDES =  \t-nostdinc++ \t-I$(top_builddir)/include -I$(GLIBCPP_INCLUDE_DIR) \t$(LIBIO_INCLUDES) $(TOPLEVEL_INCLUDES)\t\n \n \n-libio_headers = \\\n-        libio.h libioP.h iolibio.h\n+libio_headers =          libio.h libioP.h iolibio.h\n \n-@GLIBCPP_NEED_LIBIO_TRUE@LIBIO_SRCS = @GLIBCPP_NEED_LIBIO_TRUE@\\\n-@GLIBCPP_NEED_LIBIO_TRUE@\tfiledoalloc.c genops.c fileops.c stdfiles.c c_codecvt.c iofclose.c \\\n-@GLIBCPP_NEED_LIBIO_TRUE@    iofopen.c stdio.c\n+@GLIBCPP_NEED_LIBIO_TRUE@LIBIO_SRCS = \tfiledoalloc.c genops.c fileops.c stdfiles.c c_codecvt.c iofclose.c     iofopen.c stdio.c\n @GLIBCPP_NEED_LIBIO_FALSE@LIBIO_SRCS = \n-@GLIBCPP_NEED_WLIBIO_TRUE@LIBIO_WSRCS = @GLIBCPP_NEED_WLIBIO_TRUE@\\\n-@GLIBCPP_NEED_WLIBIO_TRUE@\twfiledoalloc.c wfileops.c wgenops.c iofwide.c\n+@GLIBCPP_NEED_WLIBIO_TRUE@LIBIO_WSRCS = \twfiledoalloc.c wfileops.c wgenops.c iofwide.c\n @GLIBCPP_NEED_WLIBIO_FALSE@LIBIO_WSRCS = \n \n EXTRA_DIST = iostreamP.h"}, {"sha": "7d9de5913175b5b39f5fc7e4c296c4ebb576fdfc", "filename": "libstdc++-v3/libmath/Makefile.in", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eebc608e3b64bb2cdfb1f400d4abfa0f622df2d6/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eebc608e3b64bb2cdfb1f400d4abfa0f622df2d6/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in?ref=eebc608e3b64bb2cdfb1f400d4abfa0f622df2d6", "patch": "@@ -113,24 +113,18 @@ AUTOMAKE_OPTIONS = 1.3 cygnus\n \n noinst_LTLIBRARIES = libmath.la\n \n-EXTRA_LONG_DOUBLE_yes = \\\n-\tcsqrtl.c hypotl.c signbitl.c\n+EXTRA_LONG_DOUBLE_yes =  \tcsqrtl.c hypotl.c signbitl.c\n \n \n-EXTRA_DIST = \\\n-\tcsqrt.c csqrtf.c hypot.c hypotf.c atan2f.c expf.c \\\n-\t$(EXTRA_LONG_DOUBLE_yes) \n+EXTRA_DIST =  \tcsqrt.c csqrtf.c hypot.c hypotf.c atan2f.c expf.c \t$(EXTRA_LONG_DOUBLE_yes) \n \n \n-libmath_la_LIBADD = \\\n-\t@LIBMATHOBJS@ \\\n-\t$(EXTRA_LONG_DOUBLE_$(USE_COMPLEX_LONG_DOUBLE)) \n+libmath_la_LIBADD =  \t@LIBMATHOBJS@ \t$(EXTRA_LONG_DOUBLE_$(USE_COMPLEX_LONG_DOUBLE)) \n \n \n libmath_la_DEPENDENCIES = $(libmath_la_LIBADD)\n \n-libmath_la_SOURCES = \\\n-\tsignbit.c signbitf.c\n+libmath_la_SOURCES =  \tsignbit.c signbitf.c\n \n \n LINK = $(LIBTOOL) --mode=link \"$(CCLD)\" $(AM_CFLAGS) $(CFLAGS) $(LDFLAGS) -o $@\n@@ -144,9 +138,7 @@ LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n CSHADOW_INCLUDES = @CSHADOW_INCLUDES@\n \n-INCLUDES = \\\n-\t-I$(GLIBCPP_INCLUDE_DIR) -I$(top_builddir)/include  \\\n-\t$(TOPLEVEL_INCLUDES) \n+INCLUDES =  \t-I$(GLIBCPP_INCLUDE_DIR) -I$(top_builddir)/include  \t$(TOPLEVEL_INCLUDES) \n \n mkinstalldirs = $(SHELL) $(top_srcdir)/../mkinstalldirs\n CONFIG_HEADER = ../config.h"}, {"sha": "0b6892e03edf3dc1e03a2768590f4ecdfa2c47b3", "filename": "libstdc++-v3/libsupc++/Makefile.in", "status": "modified", "additions": 17, "deletions": 44, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eebc608e3b64bb2cdfb1f400d4abfa0f622df2d6/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eebc608e3b64bb2cdfb1f400d4abfa0f622df2d6/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in?ref=eebc608e3b64bb2cdfb1f400d4abfa0f622df2d6", "patch": "@@ -111,12 +111,12 @@ MAINT_CHARSET = latin1\n \n # Cross compiler and multilib support.\n # Install a library built with a cross compiler in tooldir, not libdir.\n-@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@gcc_version = @USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@@gcc_version@\n-@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@toolexecdir = @USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@$(libdir)/gcc-lib/$(target_alias)\n-@USE_LIBDIR_FALSE@toolexecdir = @USE_LIBDIR_FALSE@$(exec_prefix)/$(target_alias)\n-@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@toolexeclibdir = @USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@$(toolexecdir)/$(gcc_version)\n-@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_FALSE@toolexeclibdir = @USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_FALSE@$(libdir)$(MULTISUBDIR)\n-@USE_LIBDIR_FALSE@toolexeclibdir = @USE_LIBDIR_FALSE@$(toolexecdir)/lib$(MULTISUBDIR)\n+@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@gcc_version = @gcc_version@\n+@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@toolexecdir = $(libdir)/gcc-lib/$(target_alias)\n+@USE_LIBDIR_FALSE@toolexecdir = $(exec_prefix)/$(target_alias)\n+@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@toolexeclibdir = $(toolexecdir)/$(gcc_version)\n+@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_FALSE@toolexeclibdir = $(libdir)$(MULTISUBDIR)\n+@USE_LIBDIR_FALSE@toolexeclibdir = $(toolexecdir)/lib$(MULTISUBDIR)\n \n # Need this library to both be part of libstdc++.a, and installed\n # separately too.\n@@ -132,13 +132,11 @@ OPTIMIZE_CXXFLAGS = @OPTIMIZE_CXXFLAGS@\n # These bits are all figured out from configure. Look in acinclude.m4\n # or configure.in to see how they are set. See GLIBCPP_EXPORT_FLAGS\n # NB: DEBUGFLAGS have to be at the end so that -O2 can be overridden.\n-CONFIG_CXXFLAGS = \\\n-\t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @CSHADOW_FLAGS@ @DEBUG_FLAGS@ \n+CONFIG_CXXFLAGS =  \t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @CSHADOW_FLAGS@ @DEBUG_FLAGS@ \n \n \n # Warning flags to use.\n-WARN_CXXFLAGS = \\\n-\t@WARN_FLAGS@ $(WERROR) @WFMT_FLAGS@\n+WARN_CXXFLAGS =  \t@WARN_FLAGS@ $(WERROR) @WFMT_FLAGS@\n \n \n # Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n@@ -150,38 +148,20 @@ LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n CSHADOW_INCLUDES = @CSHADOW_INCLUDES@\n \n-INCLUDES = \\\n-\t-I$(top_srcdir)/../gcc -I$(top_srcdir)/../include \\\n-\t$(CSHADOW_INCLUDES)  $(LIBSUPCXX_INCLUDES) -I$(GLIBCPP_INCLUDE_DIR) \\\n-\t$(CONFIG_INCLUDES) -I$(top_builddir)/include\n+INCLUDES =  \t-I$(top_srcdir)/../gcc -I$(top_srcdir)/../include \t$(CSHADOW_INCLUDES)  $(LIBSUPCXX_INCLUDES) -I$(GLIBCPP_INCLUDE_DIR) \t$(CONFIG_INCLUDES) -I$(top_builddir)/include\n \n \n-headers = \\\n-\tcxxabi.h exception new typeinfo\n+headers =  \tcxxabi.h exception new typeinfo\n \n \n-sources = \\\n-\tdel_op.cc \\\n-\tdel_opnt.cc \\\n-\tdel_opv.cc \\\n-\tdel_opvnt.cc \\\n-\texception_support.cc \\\n-\tnew_handler.cc \\\n-\tnew_op.cc \\\n-\tnew_opnt.cc \\\n-\tnew_opv.cc \\\n-\tnew_opvnt.cc \\\n-\tpure.cc \\\n-\ttinfo.cc \\\n-\ttinfo2.cc \\\n-\tvec.cc\n+sources =  \tdel_op.cc \tdel_opnt.cc \tdel_opv.cc \tdel_opvnt.cc \texception_support.cc \tnew_handler.cc \tnew_op.cc \tnew_opnt.cc \tnew_opv.cc \tnew_opvnt.cc \tpure.cc \ttinfo.cc \ttinfo2.cc \tvec.cc\n \n \n libsupc___la_SOURCES = $(sources)\n libsupc__convenience_la_SOURCES = $(sources)\n-@GXX_INCLUDE_DIR_TRUE@glibcppinstalldir = @GXX_INCLUDE_DIR_TRUE@@gxx_include_dir@\n-@GXX_INCLUDE_DIR_FALSE@@VERSION_SPECIFIC_LIBS_TRUE@glibcppinstalldir = @GXX_INCLUDE_DIR_FALSE@@VERSION_SPECIFIC_LIBS_TRUE@$(libdir)/gcc-lib/$(target_alias)/@gcc_version@/include/g++\n-@GXX_INCLUDE_DIR_FALSE@@VERSION_SPECIFIC_LIBS_FALSE@glibcppinstalldir = @GXX_INCLUDE_DIR_FALSE@@VERSION_SPECIFIC_LIBS_FALSE@$(prefix)/include/g++-@libstdcxx_interface@\n+@GXX_INCLUDE_DIR_TRUE@glibcppinstalldir = @gxx_include_dir@\n+@GXX_INCLUDE_DIR_FALSE@@VERSION_SPECIFIC_LIBS_TRUE@glibcppinstalldir = $(libdir)/gcc-lib/$(target_alias)/@gcc_version@/include/g++\n+@GXX_INCLUDE_DIR_FALSE@@VERSION_SPECIFIC_LIBS_FALSE@glibcppinstalldir = $(prefix)/include/g++-@libstdcxx_interface@\n \n glibcppinstall_HEADERS = $(headers)\n \n@@ -194,12 +174,7 @@ LIBSUPCXX_CXXFLAGS = -prefer-pic\n # set this option because CONFIG_CXXFLAGS has to be after\n # OPTIMIZE_CXXFLAGS on the compile line so that -O2 can be overridden\n # as the occasion call for it. (ie, --enable-debug)\n-AM_CXXFLAGS = \\\n-\t-fno-implicit-templates \\\n-\t$(LIBSUPCXX_CXXFLAGS) \\\n-\t$(WARN_CXXFLAGS) \\\n-\t$(OPTIMIZE_CXXFLAGS) \\\n-\t$(CONFIG_CXXFLAGS) \n+AM_CXXFLAGS =  \t-fno-implicit-templates \t$(LIBSUPCXX_CXXFLAGS) \t$(WARN_CXXFLAGS) \t$(OPTIMIZE_CXXFLAGS) \t$(CONFIG_CXXFLAGS) \n \n \n # libstdc++ libtool notes\n@@ -220,16 +195,14 @@ AM_CXXFLAGS = \\\n # correct solution is to add `--tag CXX' to LTCXXCOMPILE and maybe\n # CXXLINK, just after $(LIBTOOL), so that libtool doesn't have to\n # attempt to infer which configuration to use\n-LTCXXCOMPILE = $(LIBTOOL) --tag CXX --mode=compile $(CXX) $(INCLUDES) \\\n-\t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n+LTCXXCOMPILE = $(LIBTOOL) --tag CXX --mode=compile $(CXX) $(INCLUDES) \t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n \n \n # 3) We have a problem when building the shared libstdc++ object if\n # the rules automake generates would be used.  We cannot allow CXX to\n # be used in libtool since this would add -lstdc++ to the link line\n # which of course is problematic at this point.\n-CXXLINK = $(LIBTOOL) --mode=link \"$(CC)\" \\\n-\t  @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n+CXXLINK = $(LIBTOOL) --mode=link \"$(CC)\" \t  @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n \n mkinstalldirs = $(SHELL) $(top_srcdir)/../mkinstalldirs\n CONFIG_HEADER = ../config.h"}, {"sha": "56eabecd8c233972a44429f7e290ee639dced748", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 37, "deletions": 134, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eebc608e3b64bb2cdfb1f400d4abfa0f622df2d6/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eebc608e3b64bb2cdfb1f400d4abfa0f622df2d6/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=eebc608e3b64bb2cdfb1f400d4abfa0f622df2d6", "patch": "@@ -111,12 +111,12 @@ MAINT_CHARSET = latin1\n \n # Cross compiler and multilib support.\n # Install a library built with a cross compiler in tooldir, not libdir.\n-@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@gcc_version = @USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@@gcc_version@\n-@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@toolexecdir = @USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@$(libdir)/gcc-lib/$(target_alias)\n-@USE_LIBDIR_FALSE@toolexecdir = @USE_LIBDIR_FALSE@$(exec_prefix)/$(target_alias)\n-@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@toolexeclibdir = @USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@$(toolexecdir)/$(gcc_version)\n-@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_FALSE@toolexeclibdir = @USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_FALSE@$(libdir)$(MULTISUBDIR)\n-@USE_LIBDIR_FALSE@toolexeclibdir = @USE_LIBDIR_FALSE@$(toolexecdir)/lib$(MULTISUBDIR)\n+@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@gcc_version = @gcc_version@\n+@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@toolexecdir = $(libdir)/gcc-lib/$(target_alias)\n+@USE_LIBDIR_FALSE@toolexecdir = $(exec_prefix)/$(target_alias)\n+@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@toolexeclibdir = $(toolexecdir)/$(gcc_version)\n+@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_FALSE@toolexeclibdir = $(libdir)$(MULTISUBDIR)\n+@USE_LIBDIR_FALSE@toolexeclibdir = $(toolexecdir)/lib$(MULTISUBDIR)\n \n toolexeclib_LTLIBRARIES = libstdc++.la\n EXTRA_LTLIBRARIES = libinst-string.la libinst-wstring.la\n@@ -128,13 +128,11 @@ OPTIMIZE_CXXFLAGS = @OPTIMIZE_CXXFLAGS@\n # These bits are all figured out from configure. Look in acinclude.m4\n # or configure.in to see how they are set. See GLIBCPP_EXPORT_FLAGS\n # NB: DEBUGFLAGS have to be at the end so that -O2 can be overridden.\n-CONFIG_CXXFLAGS = \\\n-\t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @CSHADOW_FLAGS@ @DEBUG_FLAGS@ \n+CONFIG_CXXFLAGS =  \t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @CSHADOW_FLAGS@ @DEBUG_FLAGS@ \n \n \n # Warning flags to use.\n-WARN_CXXFLAGS = \\\n-\t@WARN_FLAGS@ $(WERROR) @WFMT_FLAGS@\n+WARN_CXXFLAGS =  \t@WARN_FLAGS@ $(WERROR) @WFMT_FLAGS@\n \n \n # Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n@@ -146,120 +144,35 @@ LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n CSHADOW_INCLUDES = @CSHADOW_INCLUDES@\n \n-INCLUDES = \\\n-\t-nostdinc++ \\\n-\t$(CSHADOW_INCLUDES) $(LIBSUPCXX_INCLUDES) -I$(GLIBCPP_INCLUDE_DIR) \\\n-\t$(LIBIO_INCLUDES) $(LIBMATH_INCLUDES) -I$(top_builddir)/include \\\n-\t$(TOPLEVEL_INCLUDES)\t\n-\n-\n-base_headers = \\\n-\tbits/cpp_type_traits.h bits/char_traits.h bits/codecvt.h \\\n-\tbits/basic_string.h bits/std_string.h  bits/string.tcc \\\n-\tbits/generic_shadow.h bits/std_utility.h \\\n-\tbits/std_complex.h \\\n-\tbits/valarray_array.h bits/valarray_array.tcc bits/valarray_meta.h \\\n-\tbits/std_valarray.h bits/mask_array.h bits/slice.h bits/slice_array.h \\\n-\tbits/gslice.h bits/gslice_array.h bits/indirect_array.h \\\n-\tbits/exception_support.h \\\n-\tbits/std_fstream.h bits/std_iomanip.h \\\n-\tbits/ios_base.h bits/fpos.h bits/basic_ios.h bits/basic_ios.tcc \\\n-\tbits/std_ios.h bits/std_iosfwd.h bits/std_iostream.h \\\n-\tbits/std_istream.h bits/istream.tcc bits/std_locale.h \\\n-\tbits/fstream.tcc bits/ostream.tcc bits/sbuf_iter.h bits/sstream.tcc \\\n-\tbits/std_ostream.h bits/std_sstream.h bits/std_streambuf.h \\\n-\tbits/streambuf.tcc bits/basic_file.h \\\n-\tbits/locale_facets.h bits/locale_facets.tcc bits/localefwd.h \\\n-\tbits/stl_pthread_alloc.h bits/pthread_allocimpl.h \\\n-\tbits/stl_threads.h bits/stl_iterator_base.h \\\n-\tbits/std_bitset.h bits/std_deque.h bits/std_functional.h \\\n-\tbits/std_iterator.h bits/std_list.h \\\n-\tbits/std_map.h bits/std_memory.h bits/std_numeric.h \\\n-\tbits/std_queue.h bits/std_set.h bits/std_stack.h \\\n-\tbits/std_stdexcept.h bits/std_vector.h \\\n-\tbits/stl_algo.h bits/stl_algobase.h bits/stl_alloc.h \\\n-\tbits/stl_deque.h bits/stl_function.h \\\n-\tbits/stl_heap.h bits/stl_iterator.h bits/stl_list.h bits/stl_map.h \\\n-\tbits/stl_multimap.h bits/stl_multiset.h bits/stl_numeric.h \\\n-\tbits/stl_pair.h bits/stl_queue.h bits/stl_raw_storage_iter.h \\\n-\tbits/stl_relops.h bits/stl_set.h \\\n-\tbits/stl_stack.h bits/stl_string_fwd.h bits/stl_tempbuf.h \\\n-\tbits/stl_tree.h bits/stl_uninitialized.h bits/stl_vector.h \\\n-\tbits/type_traits.h bits/stl_range_errors.h bits/std_algorithm.h \\\n-\tbits/concept_checks.h bits/container_concepts.h \\\n-\tbits/sequence_concepts.h bits/stl_config.h bits/stl_construct.h\n-\n-\n-backward_headers = \\\n-\tbackward/complex.h backward/iomanip.h backward/istream.h \\\n-\tbackward/ostream.h backward/stream.h backward/streambuf.h \\\n-\tbackward/algo.h backward/algobase.h backward/alloc.h \\\n-\tbackward/bvector.h backward/defalloc.h backward/deque.h \\\n-\tbackward/function.h backward/hash_map.h backward/hash_set.h \\\n-\tbackward/hashtable.h backward/heap.h backward/iterator.h \\\n-\tbackward/list.h backward/map.h backward/multimap.h backward/new.h \\\n-\tbackward/multiset.h backward/pair.h backward/iostream.h \\\n-\tbackward/rope.h backward/set.h backward/slist.h backward/stack.h \\\n-\tbackward/tempbuf.h backward/tree.h backward/vector.h \\\n-\tbackward/fstream.h backward/strstream.h backward/strstream\n-\n-\n-ext_headers = \\\n-\text/ropeimpl.h ext/stl_rope.h \\\n-\text/stl_bvector.h ext/stl_hashtable.h ext/stl_hash_fun.h \\\n-\text/hash_map ext/hash_set ext/rope ext/slist \\\n-\text/tree ext/bvector \n-\n-\n-c_base_headers = \\\n-\tbits/std_cassert.h bits/std_cctype.h bits/std_cerrno.h \\\n-\tbits/std_cfloat.h bits/std_climits.h bits/std_clocale.h \\\n-\tbits/std_cmath.h bits/std_csetjmp.h bits/std_csignal.h \\\n-\tbits/std_cstdarg.h bits/std_cstddef.h bits/std_cstdio.h \\\n-\tbits/std_cstdlib.h bits/std_cstring.h bits/std_ctime.h \\\n-\tbits/std_cwchar.h bits/std_cwctype.h bits/cmath.tcc\n-\n-@GLIBCPP_USE_CSHADOW_TRUE@c_shadow_headers = @GLIBCPP_USE_CSHADOW_TRUE@\\\n-@GLIBCPP_USE_CSHADOW_TRUE@\tassert.h ctype.h errno.h float.h limits.h locale.h math.h setjmp.h \\\n-@GLIBCPP_USE_CSHADOW_TRUE@\tsignal.h stdarg.h stddef.h stdio.h stdlib.h string.h time.h wchar.h \\\n-@GLIBCPP_USE_CSHADOW_TRUE@\twctype.h fcntl.h libio.h iolibio.h libioP.h pthread.h iconv.h \\\n-@GLIBCPP_USE_CSHADOW_TRUE@\tfeatures.h langinfo.h \\\n-@GLIBCPP_USE_CSHADOW_TRUE@\tbits/wrap_libio.h bits/wrap_iolibio.h bits/wrap_libioP.h \\\n-@GLIBCPP_USE_CSHADOW_TRUE@\tbits/wrap_iconv.h bits/wrap_fcntl.h bits/wrap_pthread.h \\\n-@GLIBCPP_USE_CSHADOW_TRUE@\tbits/wrap_features.h bits/wrap_langinfo.h \\\n-@GLIBCPP_USE_CSHADOW_TRUE@\tsys/cdefs.h \n+INCLUDES =  \t-nostdinc++ \t$(CSHADOW_INCLUDES) $(LIBSUPCXX_INCLUDES) -I$(GLIBCPP_INCLUDE_DIR) \t$(LIBIO_INCLUDES) $(LIBMATH_INCLUDES) -I$(top_builddir)/include \t$(TOPLEVEL_INCLUDES)\t\n+\n+\n+base_headers =  \tbits/cpp_type_traits.h bits/char_traits.h bits/codecvt.h \tbits/basic_string.h bits/std_string.h  bits/string.tcc \tbits/generic_shadow.h bits/std_utility.h \tbits/std_complex.h \tbits/valarray_array.h bits/valarray_array.tcc bits/valarray_meta.h \tbits/std_valarray.h bits/mask_array.h bits/slice.h bits/slice_array.h \tbits/gslice.h bits/gslice_array.h bits/indirect_array.h \tbits/exception_support.h \tbits/std_fstream.h bits/std_iomanip.h \tbits/ios_base.h bits/fpos.h bits/basic_ios.h bits/basic_ios.tcc \tbits/std_ios.h bits/std_iosfwd.h bits/std_iostream.h \tbits/std_istream.h bits/istream.tcc bits/std_locale.h \tbits/fstream.tcc bits/ostream.tcc bits/sbuf_iter.h bits/sstream.tcc \tbits/std_ostream.h bits/std_sstream.h bits/std_streambuf.h \tbits/streambuf.tcc bits/basic_file.h \tbits/locale_facets.h bits/locale_facets.tcc bits/localefwd.h \tbits/stl_pthread_alloc.h bits/pthread_allocimpl.h \tbits/stl_threads.h bits/stl_iterator_base.h \tbits/std_bitset.h bits/std_deque.h bits/std_functional.h \tbits/std_iterator.h bits/std_list.h \tbits/std_map.h bits/std_memory.h bits/std_numeric.h \tbits/std_queue.h bits/std_set.h bits/std_stack.h \tbits/std_stdexcept.h bits/std_vector.h \tbits/stl_algo.h bits/stl_algobase.h bits/stl_alloc.h \tbits/stl_deque.h bits/stl_function.h \tbits/stl_heap.h bits/stl_iterator.h bits/stl_list.h bits/stl_map.h \tbits/stl_multimap.h bits/stl_multiset.h bits/stl_numeric.h \tbits/stl_pair.h bits/stl_queue.h bits/stl_raw_storage_iter.h \tbits/stl_relops.h bits/stl_set.h \tbits/stl_stack.h bits/stl_string_fwd.h bits/stl_tempbuf.h \tbits/stl_tree.h bits/stl_uninitialized.h bits/stl_vector.h \tbits/type_traits.h bits/stl_range_errors.h bits/std_algorithm.h \tbits/concept_checks.h bits/container_concepts.h \tbits/sequence_concepts.h bits/stl_config.h bits/stl_construct.h\n+\n+\n+backward_headers =  \tbackward/complex.h backward/iomanip.h backward/istream.h \tbackward/ostream.h backward/stream.h backward/streambuf.h \tbackward/algo.h backward/algobase.h backward/alloc.h \tbackward/bvector.h backward/defalloc.h backward/deque.h \tbackward/function.h backward/hash_map.h backward/hash_set.h \tbackward/hashtable.h backward/heap.h backward/iterator.h \tbackward/list.h backward/map.h backward/multimap.h backward/new.h \tbackward/multiset.h backward/pair.h backward/iostream.h \tbackward/rope.h backward/set.h backward/slist.h backward/stack.h \tbackward/tempbuf.h backward/tree.h backward/vector.h \tbackward/fstream.h backward/strstream.h backward/strstream\n+\n+\n+ext_headers =  \text/ropeimpl.h ext/stl_rope.h \text/stl_bvector.h ext/stl_hashtable.h ext/stl_hash_fun.h \text/hash_map ext/hash_set ext/rope ext/slist \text/tree ext/bvector \n+\n+\n+c_base_headers =  \tbits/std_cassert.h bits/std_cctype.h bits/std_cerrno.h \tbits/std_cfloat.h bits/std_climits.h bits/std_clocale.h \tbits/std_cmath.h bits/std_csetjmp.h bits/std_csignal.h \tbits/std_cstdarg.h bits/std_cstddef.h bits/std_cstdio.h \tbits/std_cstdlib.h bits/std_cstring.h bits/std_ctime.h \tbits/std_cwchar.h bits/std_cwctype.h bits/cmath.tcc\n+\n+@GLIBCPP_USE_CSHADOW_TRUE@c_shadow_headers = \tassert.h ctype.h errno.h float.h limits.h locale.h math.h setjmp.h \tsignal.h stdarg.h stddef.h stdio.h stdlib.h string.h time.h wchar.h \twctype.h fcntl.h libio.h iolibio.h libioP.h pthread.h iconv.h \tfeatures.h langinfo.h \tbits/wrap_libio.h bits/wrap_iolibio.h bits/wrap_libioP.h \tbits/wrap_iconv.h bits/wrap_fcntl.h bits/wrap_pthread.h \tbits/wrap_features.h bits/wrap_langinfo.h \tsys/cdefs.h \n @GLIBCPP_USE_CSHADOW_FALSE@c_shadow_headers = \n \n-std_headers = \\\n-\talgorithm bitset complex deque fstream functional \\\n-\tiomanip ios iosfwd iostream istream iterator limits list locale \\\n-\tmap memory numeric ostream queue set sstream stack stdexcept \\\n-\tstreambuf string utility valarray vector \\\n-\tcassert cctype cerrno cfloat climits clocale ciso646 \\\n-\tcmath csetjmp csignal cstdarg cstddef cstdio cstdlib \\\n-\tcstring ctime cwchar cwctype\n-\n-@GLIBCPP_NEED_LIBIO_TRUE@libio_headers = @GLIBCPP_NEED_LIBIO_TRUE@\\\n-@GLIBCPP_NEED_LIBIO_TRUE@\t$(top_srcdir)/libio/_G_config.h $(top_srcdir)/libio/libio.h\n+std_headers =  \talgorithm bitset complex deque fstream functional \tiomanip ios iosfwd iostream istream iterator limits list locale \tmap memory numeric ostream queue set sstream stack stdexcept \tstreambuf string utility valarray vector \tcassert cctype cerrno cfloat climits clocale ciso646 \tcmath csetjmp csignal cstdarg cstddef cstdio cstdlib \tcstring ctime cwchar cwctype\n+\n+@GLIBCPP_NEED_LIBIO_TRUE@libio_headers = \t$(top_srcdir)/libio/_G_config.h $(top_srcdir)/libio/libio.h\n @GLIBCPP_NEED_LIBIO_FALSE@libio_headers = \n \n-build_headers = \\\n-\tbits/std_limits.h bits/c++config.h bits/c++io.h bits/c++threads.h \\\n-\tbits/atomicity.h bits/os_defines.h \\\n-\tbits/ctype_base.h bits/ctype_noninline.h bits/ctype_inline.h \n+build_headers =  \tbits/std_limits.h bits/c++config.h bits/c++io.h bits/c++threads.h \tbits/atomicity.h bits/os_defines.h \tbits/ctype_base.h bits/ctype_noninline.h bits/ctype_inline.h \n \n \n-sources = \\\n-\tlimitsMEMBERS.cc \\\n-\tcomplex.cc complexf.cc complexl.cc complex_io.cc \\\n-\tstdexcept.cc bitset.cc \\\n-\tc++io.cc ios.cc stdstreams.cc strstream.cc \\\n-\tlocale.cc localename.cc codecvt.cc \\\n-\tlocale-inst.cc stl-inst.cc misc-inst.cc valarray-inst.cc string-inst.cc\n+sources =  \tlimitsMEMBERS.cc \tcomplex.cc complexf.cc complexl.cc complex_io.cc \tstdexcept.cc bitset.cc \tc++io.cc ios.cc stdstreams.cc strstream.cc \tlocale.cc localename.cc codecvt.cc \tlocale-inst.cc stl-inst.cc misc-inst.cc valarray-inst.cc string-inst.cc\n \n \n-wstring_sources = \\\n-\twstring-inst.cc\n+wstring_sources =  \twstring-inst.cc\n \n VPATH =  $(top_srcdir) $(top_srcdir)/src $(GLIBCPP_INCLUDE_DIR)  $(GLIBCPP_INCLUDE_DIR)/std $(C_INCLUDE_DIR)\n \n@@ -270,20 +183,17 @@ libstdc___la_SOURCES = $(sources)\n \n libinst_wstring_la_SOURCES = $(wstring_sources)\n \n-libstdc___la_LIBADD = \\\n-\t../libmath/libmath.la @libio_la@ \\\n-\t../libsupc++/libsupc++convenience.la \\\n-\t@libinst_wstring_la@\n+libstdc___la_LIBADD =  \t../libmath/libmath.la @libio_la@ \t../libsupc++/libsupc++convenience.la \t@libinst_wstring_la@\n \n \n libstdc___la_LDFLAGS = -version-info 3:0:0 -lm\n \n libstdc___la_DEPENDENCIES = $(libstdc___la_LIBADD)\n-@GLIBCPP_USE_CSHADOW_TRUE@CSHADOW_H = @GLIBCPP_USE_CSHADOW_TRUE@$(top_builddir)/stamp-cshadow\n+@GLIBCPP_USE_CSHADOW_TRUE@CSHADOW_H = $(top_builddir)/stamp-cshadow\n @GLIBCPP_USE_CSHADOW_FALSE@CSHADOW_H = \n-@GXX_INCLUDE_DIR_TRUE@myincludep = @GXX_INCLUDE_DIR_TRUE@@gxx_include_dir@\n-@GXX_INCLUDE_DIR_FALSE@@VERSION_SPECIFIC_LIBS_TRUE@myincludep = @GXX_INCLUDE_DIR_FALSE@@VERSION_SPECIFIC_LIBS_TRUE@$(libdir)/gcc-lib/$(target_alias)/@gcc_version@/include/g++\n-@GXX_INCLUDE_DIR_FALSE@@VERSION_SPECIFIC_LIBS_FALSE@myincludep = @GXX_INCLUDE_DIR_FALSE@@VERSION_SPECIFIC_LIBS_FALSE@$(prefix)/include/g++-@libstdcxx_interface@\n+@GXX_INCLUDE_DIR_TRUE@myincludep = @gxx_include_dir@\n+@GXX_INCLUDE_DIR_FALSE@@VERSION_SPECIFIC_LIBS_TRUE@myincludep = $(libdir)/gcc-lib/$(target_alias)/@gcc_version@/include/g++\n+@GXX_INCLUDE_DIR_FALSE@@VERSION_SPECIFIC_LIBS_FALSE@myincludep = $(prefix)/include/g++-@libstdcxx_interface@\n \n # NB: As libio_headers may be empty, need this to make sure bash doesn't\n # choke on an empty for... loop by using libio_headers_install\n@@ -297,12 +207,7 @@ c_incdir = @C_INCLUDE_DIR@\n # set this option because CONFIG_CXXFLAGS has to be after\n # OPTIMIZE_CXXFLAGS on the compile line so that -O2 can be overridden\n # as the occasion call for it. (ie, --enable-debug)\n-AM_CXXFLAGS = \\\n-\t-fno-implicit-templates \\\n-\t$(LIBSUPCXX_CXXFLAGS) \\\n-\t$(WARN_CXXFLAGS) \\\n-\t$(OPTIMIZE_CXXFLAGS) \\\n-\t$(CONFIG_CXXFLAGS) \n+AM_CXXFLAGS =  \t-fno-implicit-templates \t$(LIBSUPCXX_CXXFLAGS) \t$(WARN_CXXFLAGS) \t$(OPTIMIZE_CXXFLAGS) \t$(CONFIG_CXXFLAGS) \n \n \n # libstdc++ libtool notes\n@@ -323,16 +228,14 @@ AM_CXXFLAGS = \\\n # correct solution is to add `--tag CXX' to LTCXXCOMPILE and maybe\n # CXXLINK, just after $(LIBTOOL), so that libtool doesn't have to\n # attempt to infer which configuration to use\n-LTCXXCOMPILE = $(LIBTOOL) --tag CXX --mode=compile $(CXX) $(INCLUDES) \\\n-\t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n+LTCXXCOMPILE = $(LIBTOOL) --tag CXX --mode=compile $(CXX) $(INCLUDES) \t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n \n \n # 3) We have a problem when building the shared libstdc++ object if\n # the rules automake generates would be used.  We cannot allow CXX to\n # be used in libtool since this would add -lstdc++ to the link line\n # which of course is problematic at this point.\n-CXXLINK = $(LIBTOOL) --mode=link \"$(CC)\" \\\n-\t  @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n+CXXLINK = $(LIBTOOL) --mode=link \"$(CC)\" \t  @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n \n mkinstalldirs = $(SHELL) $(top_srcdir)/../mkinstalldirs\n CONFIG_HEADER = ../config.h"}]}