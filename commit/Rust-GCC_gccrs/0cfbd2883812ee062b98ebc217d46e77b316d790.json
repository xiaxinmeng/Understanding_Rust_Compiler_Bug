{"sha": "0cfbd2883812ee062b98ebc217d46e77b316d790", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGNmYmQyODgzODEyZWUwNjJiOThlYmMyMTdkNDZlNzdiMzE2ZDc5MA==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "francois.cppdevs@free.fr", "date": "2011-04-22T19:34:38Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2011-04-22T19:34:38Z"}, "message": "libstdc++.exp (check_v3_target_time): Discard unused compilation result thanks to /dev/null.\n\n2011-04-22  Fran\u00e7ois Dumont  <francois.cppdevs@free.fr>\n\n        * testsuite/lib/libstdc++.exp (check_v3_target_time): Discard\n        unused compilation result thanks to /dev/null.\n        * testsuite/lib/libstdc++.exp (check_v3_target_debug_mode\n        check_v3_target_profile_mode check_v3_target_normal_mode\n        check_v3_target_cstdint check_v3_target_cmath\n        check_v3_target_atomic_builtins check_v3_target_gthreads\n        check_v3_target_nanosleep check_v3_target_sched_yield\n        check_v3_target_string_conversions check_v3_target_swprintf\n        check_v3_target_binary_io): Use simple preprocessing rather than\n        compilation. Discard unused preprocessing result thanks to /dev/null.\n\nFrom-SVN: r172872", "tree": {"sha": "7175c58b874a12bd7d75a282378ce1d1c69f73d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7175c58b874a12bd7d75a282378ce1d1c69f73d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0cfbd2883812ee062b98ebc217d46e77b316d790", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cfbd2883812ee062b98ebc217d46e77b316d790", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cfbd2883812ee062b98ebc217d46e77b316d790", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cfbd2883812ee062b98ebc217d46e77b316d790/comments", "author": null, "committer": null, "parents": [{"sha": "1df5b0db1cc49d434c5d1ac2dc6a71daf0066d0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1df5b0db1cc49d434c5d1ac2dc6a71daf0066d0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1df5b0db1cc49d434c5d1ac2dc6a71daf0066d0e"}], "stats": {"total": 150, "additions": 66, "deletions": 84}, "files": [{"sha": "4ae1278265ac81099fc65825e4b2398f8c56fd12", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cfbd2883812ee062b98ebc217d46e77b316d790/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cfbd2883812ee062b98ebc217d46e77b316d790/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0cfbd2883812ee062b98ebc217d46e77b316d790", "patch": "@@ -1,3 +1,16 @@\n+2011-04-22  Fran\u00e7ois Dumont  <francois.cppdevs@free.fr>\n+\n+\t* testsuite/lib/libstdc++.exp (check_v3_target_time): Discard\n+\tunused compilation result thanks to /dev/null.\n+\t* testsuite/lib/libstdc++.exp (check_v3_target_debug_mode\n+\tcheck_v3_target_profile_mode check_v3_target_normal_mode\n+\tcheck_v3_target_cstdint check_v3_target_cmath\n+\tcheck_v3_target_atomic_builtins check_v3_target_gthreads\n+\tcheck_v3_target_nanosleep check_v3_target_sched_yield\n+\tcheck_v3_target_string_conversions check_v3_target_swprintf\n+\tcheck_v3_target_binary_io): Use simple preprocessing rather than\n+\tcompilation. Discard unused preprocessing result thanks to /dev/null.\n+\n 2011-04-20  Jim Meyering  <meyering@redhat.com>\n \n \t* libsupc++/del_opnt.cc (operator delete): Remove useless"}, {"sha": "151c9422f0c69a3e9d454312483256c2e7c61744", "filename": "libstdc++-v3/testsuite/lib/libstdc++.exp", "status": "modified", "additions": 53, "deletions": 84, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cfbd2883812ee062b98ebc217d46e77b316d790/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cfbd2883812ee062b98ebc217d46e77b316d790/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp?ref=0cfbd2883812ee062b98ebc217d46e77b316d790", "patch": "@@ -824,7 +824,6 @@ proc check_v3_target_time { } {\n \t# Set up and compile a C++ test program that tries to use\n \t# the time function\n \tset src time[pid].cc\n-\tset exe time[pid].x\n \n \tset f [open $src \"w\"]\n \tputs $f \"#include <time.h>\"\n@@ -835,13 +834,12 @@ proc check_v3_target_time { } {\n \tputs $f \"}\" \n \tclose $f\n \n-\tset lines [v3_target_compile $src $exe executable \"\"]\n+\tset lines [v3_target_compile $src /dev/null executable \"\"]\n \tfile delete $src\n \n \tif [string match \"\" $lines] {\n \t    # No error message, compilation succeeded.\n \t    verbose \"check_v3_target_time: compilation succeeded\" 2\n-\t    remote_file build delete $exe\n \t    set et_time_saved 1\n \t} else {\n \t    verbose \"check_v3_target_time: compilation failed\" 2\n@@ -927,25 +925,21 @@ proc check_v3_target_debug_mode { } {\n     } else {\n \tset et_debug_mode 0\n \n-\t# Set up and compile a C++ test program that depends\n+\t# Set up and preprocess a C++ test program that depends\n \t# on debug mode activated.\n \tset src debug_mode[pid].cc\n-\tset exe debug_mode[pid].exe\n \n \tset f [open $src \"w\"]\n \tputs $f \"#ifndef _GLIBCXX_DEBUG\"\n \tputs $f \"#  error No debug mode\"\n \tputs $f \"#endif\"\n-\tputs $f \"int main()\"\n-\tputs $f \"{ return 0; }\"\n \tclose $f\n \n-\tset lines [v3_target_compile $src $exe executable \"\"]\n+\tset lines [v3_target_compile $src /dev/null preprocess \"\"]\n \tfile delete $src\n \n \tif [string match \"\" $lines] {\n-\t    # No error message, compilation succeeded.\n-\t    remote_file build delete $exe\n+\t    # No error message, preprocessing succeeded.\n \t    set et_debug_mode 1\n \t}\n     }\n@@ -977,25 +971,21 @@ proc check_v3_target_profile_mode { } {\n     } else {\n \tset et_profile_mode 0\n \n-\t# Set up and compile a C++ test program that depends\n+\t# Set up and preprocess a C++ test program that depends\n \t# on profile mode activated.\n \tset src profile_mode[pid].cc\n-\tset exe profile_mode[pid].exe\n \n \tset f [open $src \"w\"]\n \tputs $f \"#ifndef _GLIBCXX_PROFILE\"\n \tputs $f \"#  error No profile mode\"\n \tputs $f \"#endif\"\n-\tputs $f \"int main()\"\n-\tputs $f \"{ return 0; }\"\n \tclose $f\n \n-\tset lines [v3_target_compile $src $exe executable \"\"]\n+\tset lines [v3_target_compile $src /dev/null preprocess \"\"]\n \tfile delete $src\n \n \tif [string match \"\" $lines] {\n-\t    # No error message, compilation succeeded.\n-\t    remote_file build delete $exe\n+\t    # No error message, preprocessing succeeded.\n \t    set et_profile_mode 1\n \t}\n     }\n@@ -1030,17 +1020,14 @@ proc check_v3_target_normal_mode { } {\n \t# Set up and compile a C++ test program that depends\n \t# on normal mode activated.\n \tset src normal_mode[pid].cc\n-\tset exe normal_mode[pid].exe\n \n \tset f [open $src \"w\"]\n \tputs $f \"#if defined(_GLIBCXX_DEBUG) || defined(_GLIBCXX_PROFILE) || defined(_GLIBCXX_PARALLEL)\"\n \tputs $f \"#  error No normal mode\"\n \tputs $f \"#endif\"\n-\tputs $f \"int main()\"\n-\tputs $f \"{ return 0; }\"\n \tclose $f\n \n-\tset lines [v3_target_compile $src $exe executable \"\"]\n+\tset lines [v3_target_compile $src /dev/null preprocess \"\"]\n \tfile delete $src\n \n \tif [string match \"\" $lines] {\n@@ -1115,28 +1102,26 @@ proc check_v3_target_cstdint { } {\n     } else {\n \tset et_cstdint 0\n \n-\t# Set up and compile a C++0x test program that depends\n+\t# Set up and preprocess a C++0x test program that depends\n \t# on the C99 stdint facilities to be available.\n \tset src cstdint[pid].cc\n-\tset exe cstdint[pid].exe\n \n \tset f [open $src \"w\"]\n \tputs $f \"#include <tr1/cstdint>\"\n-\tputs $f \"int main()\"\n-\tputs $f \"#ifdef _GLIBCXX_USE_C99_STDINT_TR1\"\n-\tputs $f \"{ return 0; }\"\n+\tputs $f \"#ifndef _GLIBCXX_USE_C99_STDINT_TR1\"\n+\tputs $f \"#  error No C99 stdint\"\n \tputs $f \"#endif\"\n \tclose $f\n \n \tset cxxflags_saved $cxxflags\n \tset cxxflags \"$cxxflags $DEFAULT_CXXFLAGS -Werror\"\n \n-\tset lines [v3_target_compile $src $exe executable \"\"]\n+\tset lines [v3_target_compile $src /dev/null preprocess \"\"]\n \tset cxxflags $cxxflags_saved\n \tfile delete $src\n \n \tif [string match \"\" $lines] {\n-\t    # No error message, compilation succeeded.\n+\t    # No error message, preprocess succeeded.\n \t    set et_cstdint 1\n \t} else {\n \t    verbose \"check_v3_target_cstdint: compilation failed\" 2\n@@ -1173,28 +1158,26 @@ proc check_v3_target_cmath { } {\n     } else {\n \tset et_c99_math 0\n \n-\t# Set up and compile a C++0x test program that depends\n+\t# Set up and preprocess a C++0x test program that depends\n \t# on the C99 math facilities to be available.\n \tset src c99_math[pid].cc\n-\tset exe c99_math[pid].exe\n \n \tset f [open $src \"w\"]\n \tputs $f \"#include <tr1/cmath>\"\n-\tputs $f \"int main()\"\n-\tputs $f \"#ifdef _GLIBCXX_USE_C99_MATH_TR1\"\n-\tputs $f \"{ return 0; }\"\n+\tputs $f \"#ifndef _GLIBCXX_USE_C99_MATH_TR1\"\n+\tputs $f \"#  error No C99 math\"\n \tputs $f \"#endif\"\n \tclose $f\n \n \tset cxxflags_saved $cxxflags\n \tset cxxflags \"$cxxflags $DEFAULT_CXXFLAGS -Werror\"\n \n-\tset lines [v3_target_compile $src $exe executable \"\"]\n+\tset lines [v3_target_compile $src /dev/null preprocess \"\"]\n \tset cxxflags $cxxflags_saved\n \tfile delete $src\n \n \tif [string match \"\" $lines] {\n-\t    # No error message, compilation succeeded.\n+\t    # No error message, preprocess succeeded.\n \t    set et_c99_math 1\n \t} else {\n \t    verbose \"check_v3_target_c99_math: compilation failed\" 2\n@@ -1231,28 +1214,26 @@ proc check_v3_target_atomic_builtins { } {\n     } else {\n \tset et_atomic_builtins 0\n \n-\t# Set up and compile a C++0x test program that depends\n+\t# Set up and preprocess a C++0x test program that depends\n \t# on the atomic builtin facilities to be available.\n \tset src atomic_builtins[pid].cc\n-\tset exe atomic_builtins[pid].exe\n \n \tset f [open $src \"w\"]\n \tputs $f \"#include <bits/c++config.h>\"\n-\tputs $f \"int main()\"\n-\tputs $f \"#ifdef _GLIBCXX_ATOMIC_BUILTINS_4\"\n-\tputs $f \"{ return 0; }\"\n+\tputs $f \"#ifndef _GLIBCXX_ATOMIC_BUILTINS_4\"\n+\tputs $f \"#  error No atomic builtins\"\n \tputs $f \"#endif\"\n \tclose $f\n \n \tset cxxflags_saved $cxxflags\n \tset cxxflags \"$cxxflags $DEFAULT_CXXFLAGS -Werror\"\n \n-\tset lines [v3_target_compile $src $exe executable \"\"]\n+\tset lines [v3_target_compile $src /dev/null preprocess \"\"]\n \tset cxxflags $cxxflags_saved\n \tfile delete $src\n \n \tif [string match \"\" $lines] {\n-\t    # No error message, compilation succeeded.\n+\t    # No error message, preprocess succeeded.\n \t    set et_atomic_builtins 1\n \t} else {\n \t    verbose \"check_v3_target_atomic_builtins: compilation failed\" 2\n@@ -1289,28 +1270,26 @@ proc check_v3_target_gthreads { } {\n     } else {\n         set et_gthreads 0\n \n-        # Set up and compile a C++0x test program that depends\n+        # Set up and preprocess a C++0x test program that depends\n         # on the gthreads facilities to be available.\n         set src gthreads[pid].cc\n-        set exe gthreads[pid].exe\n \n         set f [open $src \"w\"]\n \tputs $f \"#include <bits/c++config.h>\"\n-        puts $f \"int main()\"\n-        puts $f \"#ifdef _GLIBCXX_HAS_GTHREADS\"\n-        puts $f \"{ return 0; }\"\n+        puts $f \"#ifndef _GLIBCXX_HAS_GTHREADS\"\n+        puts $f \"#  error No gthread\"\n         puts $f \"#endif\"\n         close $f\n \n         set cxxflags_saved $cxxflags\n         set cxxflags \"$cxxflags $DEFAULT_CXXFLAGS -Werror\"\n \n-        set lines [v3_target_compile $src $exe executable \"\"]\n+        set lines [v3_target_compile $src /dev/null preprocess \"\"]\n         set cxxflags $cxxflags_saved\n         file delete $src\n \n         if [string match \"\" $lines] {\n-            # No error message, compilation succeeded.\n+            # No error message, preprocessing succeeded.\n             set et_gthreads 1\n         } else {\n             verbose \"check_v3_target_gthreads: compilation failed\" 2\n@@ -1347,28 +1326,26 @@ proc check_v3_target_nanosleep { } {\n     } else {\n         set et_nanosleep 0\n \t\n-\t# Set up and compile a C++0x test program that depends\n+\t# Set up and preprocess a C++0x test program that depends\n         # on the nanosleep facilities to be available.\n         set src nanosleep[pid].cc\n-        set exe nanosleep[pid].exe\n \n         set f [open $src \"w\"]\n         puts $f \"#include <bits/c++config.h>\"\n-        puts $f \"int main()\"\n-        puts $f \"#ifdef _GLIBCXX_USE_NANOSLEEP\"\n-        puts $f \"{ return 0; }\"\n+        puts $f \"#ifndef _GLIBCXX_USE_NANOSLEEP\"\n+        puts $f \"#  error No nanosleep\"\n         puts $f \"#endif\"\n         close $f\n \n         set cxxflags_saved $cxxflags\n         set cxxflags \"$cxxflags $DEFAULT_CXXFLAGS -Werror\"\n \n-        set lines [v3_target_compile $src $exe executable \"\"]\n+        set lines [v3_target_compile $src /dev/null preprocess \"\"]\n         set cxxflags $cxxflags_saved\n         file delete $src\n \n         if [string match \"\" $lines] {\n-            # No error message, compilation succeeded.\n+            # No error message, preprocessing succeeded.\n             set et_nanosleep 1\n         } else {\n             verbose \"check_v3_target_nanosleep: compilation failed\" 2\n@@ -1405,28 +1382,26 @@ proc check_v3_target_sched_yield { } {\n     } else {\n         set et_sched_yield 0\n \n-        # Set up and compile a C++0x test program that depends\n+        # Set up and preprocess a C++0x test program that depends\n         # on the sched_yield facility to be available.\n         set src sched_yield[pid].cc\n-        set exe sched_yield[pid].exe\n \n         set f [open $src \"w\"]\n         puts $f \"#include <bits/c++config.h>\"\n-        puts $f \"int main()\"\n-        puts $f \"#ifdef _GLIBCXX_USE_SCHED_YIELD\"\n-        puts $f \"{ return 0; }\"\n+        puts $f \"#ifndef _GLIBCXX_USE_SCHED_YIELD\"\n+        puts $f \"#  error No sched yield\"\n         puts $f \"#endif\"\n         close $f\n \n         set cxxflags_saved $cxxflags\n         set cxxflags \"$cxxflags $DEFAULT_CXXFLAGS -Werror\"\n \n-        set lines [v3_target_compile $src $exe executable \"\"]\n+        set lines [v3_target_compile $src /dev/null preprocess \"\"]\n         set cxxflags $cxxflags_saved\n         file delete $src\n \n         if [string match \"\" $lines] {\n-            # No error message, compilation succeeded.\n+            # No error message, preprocessing succeeded.\n             set et_sched_yield 1\n         } else {\n             verbose \"check_v3_target_sched_yield: compilation failed\" 2\n@@ -1463,28 +1438,26 @@ proc check_v3_target_string_conversions { } {\n     } else {\n         set et_string_conversions 0\n \t\n-\t# Set up and compile a C++0x test program that depends\n+\t# Set up and preprocess a C++0x test program that depends\n         # on the string_conversions facilities to be available.\n         set src string_conversions[pid].cc\n-        set exe string_conversions[pid].exe\n \n         set f [open $src \"w\"]\n         puts $f \"#include <bits/c++config.h>\"\n-        puts $f \"int main()\"\n-        puts $f \"#if defined(_GLIBCXX_USE_C99) && !defined(_GLIBCXX_HAVE_BROKEN_VSWPRINTF)\"\n-        puts $f \"{ return 0; }\"\n+        puts $f \"#if !defined(_GLIBCXX_USE_C99) || defined(_GLIBCXX_HAVE_BROKEN_VSWPRINTF)\"\n+        puts $f \"#  error No string conversions\"\n         puts $f \"#endif\"\n         close $f\n \n         set cxxflags_saved $cxxflags\n         set cxxflags \"$cxxflags $DEFAULT_CXXFLAGS -Werror\"\n \n-        set lines [v3_target_compile $src $exe executable \"\"]\n+        set lines [v3_target_compile $src /dev/null preprocess \"\"]\n         set cxxflags $cxxflags_saved\n         file delete $src\n \n         if [string match \"\" $lines] {\n-            # No error message, compilation succeeded.\n+            # No error message, preprocessing succeeded.\n             set et_string_conversions 1\n         } else {\n             verbose \"check_v3_target_string_conversions: compilation failed\" 2\n@@ -1521,28 +1494,26 @@ proc check_v3_target_swprintf { } {\n     } else {\n         set et_swprintf 0\n \t\n-\t# Set up and compile a C++0x test program that depends\n+\t# Set up and preprocess a C++0x test program that depends\n         # on a standard swprintf function to be available.\n         set src swprintf[pid].cc\n-        set exe swprintf[pid].exe\n \n         set f [open $src \"w\"]\n         puts $f \"#include <bits/c++config.h>\"\n-        puts $f \"int main()\"\n-        puts $f \"#if !defined(_GLIBCXX_HAVE_BROKEN_VSWPRINTF)\"\n-        puts $f \"{ return 0; }\"\n+        puts $f \"#if defined(_GLIBCXX_HAVE_BROKEN_VSWPRINTF)\"\n+        puts $f \"#  error No swprintf\"\n         puts $f \"#endif\"\n         close $f\n \n         set cxxflags_saved $cxxflags\n         set cxxflags \"$cxxflags $DEFAULT_CXXFLAGS -Werror\"\n \n-        set lines [v3_target_compile $src $exe executable \"\"]\n+        set lines [v3_target_compile $src /dev/null preprocess \"\"]\n         set cxxflags $cxxflags_saved\n         file delete $src\n \n         if [string match \"\" $lines] {\n-            # No error message, compilation succeeded.\n+            # No error message, preprocessing succeeded.\n             set et_swprintf 1\n         } else {\n             verbose \"check_v3_target_swprintf: compilation failed\" 2\n@@ -1579,28 +1550,26 @@ proc check_v3_target_binary_io { } {\n     } else {\n         set et_binary_io 0\n \t\n-\t# Set up and compile a C++0x test program that depends\n+\t# Set up and preprocess a C++0x test program that depends\n         # on text and binary I/O being the same.\n         set src binary_io[pid].cc\n-        set exe binary_io[pid].exe\n \n         set f [open $src \"w\"]\n         puts $f \"#include <bits/c++config.h>\"\n-        puts $f \"int main()\"\n-        puts $f \"#if !defined(_GLIBCXX_HAVE_DOS_BASED_FILESYSTEM)\"\n-        puts $f \"{ return 0; }\"\n+        puts $f \"#if defined(_GLIBCXX_HAVE_DOS_BASED_FILESYSTEM)\"\n+        puts $f \"#  error No binary io\"\n         puts $f \"#endif\"\n         close $f\n \n         set cxxflags_saved $cxxflags\n         set cxxflags \"$cxxflags $DEFAULT_CXXFLAGS -Werror\"\n \n-        set lines [v3_target_compile $src $exe executable \"\"]\n+        set lines [v3_target_compile $src /dev/null preprocess \"\"]\n         set cxxflags $cxxflags_saved\n         file delete $src\n \n         if [string match \"\" $lines] {\n-            # No error message, compilation succeeded.\n+            # No error message, preprocessing succeeded.\n             set et_binary_io 1\n         } else {\n             verbose \"check_v3_target_binary_io: compilation failed\" 2"}]}