{"sha": "898600d5fa876b04ef2e4de7d3f9f83fd85cf3aa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODk4NjAwZDVmYTg3NmIwNGVmMmU0ZGU3ZDNmOWY4M2ZkODVjZjNhYQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@markmitchell.com", "date": "1998-08-19T15:14:58Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1998-08-19T15:14:58Z"}, "message": "cp-tree.h (ansi_null_node): New variable.\n\n\t* cp-tree.h (ansi_null_node): New variable.\n\t* decl.c (ansi_null_node): New variable.\n\t(init_decl_processing): Initialize its type.\n\t* lex.c (init_parse): Initialize its value.  Use ansi_null_node\n\tfor null_node in non-ANSI mode.\n\t* typeck.c (build_binary_op_nodefault): Use ansi_null_node in\n\tplace of null_node to avoid spurious errors.\n\nFrom-SVN: r21858", "tree": {"sha": "a8e8e350b77e108b758cfb2cd7b897d48d0d05bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a8e8e350b77e108b758cfb2cd7b897d48d0d05bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/898600d5fa876b04ef2e4de7d3f9f83fd85cf3aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/898600d5fa876b04ef2e4de7d3f9f83fd85cf3aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/898600d5fa876b04ef2e4de7d3f9f83fd85cf3aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/898600d5fa876b04ef2e4de7d3f9f83fd85cf3aa/comments", "author": null, "committer": null, "parents": [{"sha": "a255ef043cf7c8f5e1174006b240e5d73b6242c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a255ef043cf7c8f5e1174006b240e5d73b6242c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a255ef043cf7c8f5e1174006b240e5d73b6242c9"}], "stats": {"total": 55, "additions": 49, "deletions": 6}, "files": [{"sha": "65e8eb8baa72420ff58f15b4fb31fe84da8dda25", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/898600d5fa876b04ef2e4de7d3f9f83fd85cf3aa/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/898600d5fa876b04ef2e4de7d3f9f83fd85cf3aa/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=898600d5fa876b04ef2e4de7d3f9f83fd85cf3aa", "patch": "@@ -1,3 +1,13 @@\n+1998-08-19  Mark Mitchell  <mark@markmitchell.com>\n+\n+\t* cp-tree.h (ansi_null_node): New variable.\n+\t* decl.c (ansi_null_node): New variable.\n+\t(init_decl_processing): Initialize its type.\n+\t* lex.c (init_parse): Initialize its value.  Use ansi_null_node\n+\tfor null_node in non-ANSI mode.\n+\t* typeck.c (build_binary_op_nodefault): Use ansi_null_node in\n+\tplace of null_node to avoid spurious errors.\n+\t\n 1998-08-17  Mark Mitchell  <mark@markmitchell.com>\n \n \t* cp-tree.h (enter_scope_of): New function."}, {"sha": "f96af15fcf6a045a3d128afb8174860b2f7525da", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/898600d5fa876b04ef2e4de7d3f9f83fd85cf3aa/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/898600d5fa876b04ef2e4de7d3f9f83fd85cf3aa/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=898600d5fa876b04ef2e4de7d3f9f83fd85cf3aa", "patch": "@@ -1918,6 +1918,7 @@ extern tree long_long_integer_type_node, long_long_unsigned_type_node;\n extern tree integer_two_node, integer_three_node;\n extern tree boolean_type_node, boolean_true_node, boolean_false_node;\n \n+extern tree ansi_null_node;\n extern tree null_node;\n \n /* in pt.c  */"}, {"sha": "5e6efa4997824d13a05c1063eaff96811be82391", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/898600d5fa876b04ef2e4de7d3f9f83fd85cf3aa/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/898600d5fa876b04ef2e4de7d3f9f83fd85cf3aa/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=898600d5fa876b04ef2e4de7d3f9f83fd85cf3aa", "patch": "@@ -429,9 +429,13 @@ tree static_aggregates;\n tree integer_zero_node;\n tree null_pointer_node;\n \n-/* The value for __null (NULL), either of type `void *' or, with -ansi,\n-   an integer type of the same size.  */\n+/* The value for __null (NULL), when -ansi is specified.  As per the\n+   standard, this is an implementation-defined null pointer constant.  */\n+tree ansi_null_node;\n \n+/* The value for __null (NULL).  With -ansi, this is just\n+   ansi_null_node.  Without -ansi, this is a zero-valued pointer\n+   constant of type `{unknown type}*'.  */\n tree null_node;\n \n /* A node for the integer constants 1, 2, and 3.  */\n@@ -6030,9 +6034,8 @@ init_decl_processing ()\n   /* Indirecting an UNKNOWN_TYPE node yields an UNKNOWN_TYPE node.  */\n   TREE_TYPE (unknown_type_node) = unknown_type_node;\n \n-  if (flag_ansi)\n-    TREE_TYPE (null_node) = type_for_size (POINTER_SIZE, 0);\n-  else\n+  TREE_TYPE (ansi_null_node) = type_for_size (POINTER_SIZE, 0);\n+  if (!flag_ansi)\n     TREE_TYPE (null_node) = build_pointer_type (unknown_type_node);\n \n   /* Looking up TYPE_POINTER_TO and TYPE_REFERENCE_TO yield the same"}, {"sha": "998817bc0b0e3fc7a3d845f97122b0407f7d7e18", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/898600d5fa876b04ef2e4de7d3f9f83fd85cf3aa/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/898600d5fa876b04ef2e4de7d3f9f83fd85cf3aa/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=898600d5fa876b04ef2e4de7d3f9f83fd85cf3aa", "patch": "@@ -777,7 +777,15 @@ init_parse (filename)\n   TREE_TYPE (signature_type_node) = signature_type_node;\n   ridpointers[(int) RID_SIGNATURE] = signature_type_node;\n \n-  null_node = build_int_2 (0, 0);\n+  /* Create the built-in __null node.  Note that we can't yet call for\n+     type_for_size here because integer_type_node and so forth are not\n+     set up.  Therefore, we don't set the type of these nodes until\n+     init_decl_processing.  */\n+  ansi_null_node = build_int_2 (0, 0);\n+  if (flag_ansi)\n+    null_node = ansi_null_node;\n+  else\n+    null_node = build_int_2 (0, 0);\n   ridpointers[RID_NULL] = null_node;\n \n   opname_tab[(int) COMPONENT_REF] = \"->\";"}, {"sha": "2c5529afe83cd25c7efac58f3804a7ee41d4702f", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/898600d5fa876b04ef2e4de7d3f9f83fd85cf3aa/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/898600d5fa876b04ef2e4de7d3f9f83fd85cf3aa/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=898600d5fa876b04ef2e4de7d3f9f83fd85cf3aa", "patch": "@@ -3244,6 +3244,15 @@ build_binary_op_nodefault (code, orig_op0, orig_op1, error_code)\n   /* Nonzero means set RESULT_TYPE to the common type of the args.  */\n   int common = 0;\n \n+  /* Unless -ansi is specified, __null has pointer type.  But, then,\n+     things like `7 != NULL' result in errors about comparisons\n+     between pointers and integers.  So, here, we replace __null with\n+     an appropriate null pointer constant.  */\n+  if (orig_op0 == null_node)\n+    orig_op0 = ansi_null_node;\n+  if (orig_op1 == null_node)\n+    orig_op1 = ansi_null_node;\n+\n   /* Apply default conversions.  */\n   if (code == TRUTH_AND_EXPR || code == TRUTH_ANDIF_EXPR\n       || code == TRUTH_OR_EXPR || code == TRUTH_ORIF_EXPR"}, {"sha": "4bdb048f1cecccfc89263a26805f731d6976cbea", "filename": "gcc/testsuite/g++.old-deja/g++.other/null1.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/898600d5fa876b04ef2e4de7d3f9f83fd85cf3aa/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fnull1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/898600d5fa876b04ef2e4de7d3f9f83fd85cf3aa/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fnull1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fnull1.C?ref=898600d5fa876b04ef2e4de7d3f9f83fd85cf3aa", "patch": "@@ -0,0 +1,12 @@\n+// Build don't link:\n+\n+#include <cstddef>\n+\n+void f()\n+{\n+  int i;\n+  float f;\n+\n+  i != NULL;\n+  f != NULL;\n+}"}]}