{"sha": "aa2d5ba2c737dbc5e0913804d38eb1d0547be33d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWEyZDViYTJjNzM3ZGJjNWUwOTEzODA0ZDM4ZWIxZDA1NDdiZTMzZA==", "commit": {"author": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2002-07-20T06:26:27Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2002-07-20T06:26:27Z"}, "message": "abi.txt: New file.\n\n2002-07-20  Phil Edwards  <pme@gcc.gnu.org>\n\n\t* docs/html/abi.txt:  New file.\n\t* docs/html/23_containers/howto.html:  Tweak vector-overhead text.\n\t* docs/html/ext/lwg-active.html, docs/html/ext/lwg-defects.html:\n\tImport from upstream, R22.\n\n\t* include/bits/char_traits.h, include/bits/stl_iterator.h,\n\tinclude/bits/stl_iterator_base_types.h, libsupc++/exception,\n\tlibsupc++/new, libsupc++/typeinfo:  Use @brief markup.\n\n\t* include/bits/deque.tcc, include/bits/stl_alloc.h,\n\tinclude/bits/stl_deque.h, include/bits/stl_list.h:  Postpone removal\n\tof deprecated functions until 3.4.  (Same timeframe, different text.)\n\t* include/bits/stl_vector.h:  Ditto.  Also do the same cleanups that\n\tthe other sequence classes received.\n\nFrom-SVN: r55602", "tree": {"sha": "8947d353e94e069f407dc793b088a3411ca30b80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8947d353e94e069f407dc793b088a3411ca30b80"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa2d5ba2c737dbc5e0913804d38eb1d0547be33d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa2d5ba2c737dbc5e0913804d38eb1d0547be33d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa2d5ba2c737dbc5e0913804d38eb1d0547be33d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa2d5ba2c737dbc5e0913804d38eb1d0547be33d/comments", "author": null, "committer": null, "parents": [{"sha": "e3485bbc86dcb46db022d8e2d4256d319b3c7fcd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3485bbc86dcb46db022d8e2d4256d319b3c7fcd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3485bbc86dcb46db022d8e2d4256d319b3c7fcd"}], "stats": {"total": 4382, "additions": 2800, "deletions": 1582}, "files": [{"sha": "7c752b02854a0953004e813ad0249c3644c24b76", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa2d5ba2c737dbc5e0913804d38eb1d0547be33d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa2d5ba2c737dbc5e0913804d38eb1d0547be33d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=aa2d5ba2c737dbc5e0913804d38eb1d0547be33d", "patch": "@@ -1,3 +1,20 @@\n+2002-07-20  Phil Edwards  <pme@gcc.gnu.org>\n+\n+\t* docs/html/abi.txt:  New file.\n+\t* docs/html/23_containers/howto.html:  Tweak vector-overhead text.\n+\t* docs/html/ext/lwg-active.html, docs/html/ext/lwg-defects.html:\n+\tImport from upstream, R22.\n+\n+\t* include/bits/char_traits.h, include/bits/stl_iterator.h,\n+\tinclude/bits/stl_iterator_base_types.h, libsupc++/exception,\n+\tlibsupc++/new, libsupc++/typeinfo:  Use @brief markup.\n+\n+\t* include/bits/deque.tcc, include/bits/stl_alloc.h,\n+\tinclude/bits/stl_deque.h, include/bits/stl_list.h:  Postpone removal\n+\tof deprecated functions until 3.4.  (Same timeframe, different text.)\n+\t* include/bits/stl_vector.h:  Ditto.  Also do the same cleanups that\n+\tthe other sequence classes received.\n+\n 2002-07-18  Brendan Kehoe  <brendan@zen.org>\n \n \t* bits/slice_array.h (_DEFINE_VALARRAY_OPERATOR): Fix typo of"}, {"sha": "a64d79c75ae7d574ebd75d2498a6a78330dfdf4a", "filename": "libstdc++-v3/docs/html/23_containers/howto.html", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa2d5ba2c737dbc5e0913804d38eb1d0547be33d/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F23_containers%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa2d5ba2c737dbc5e0913804d38eb1d0547be33d/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F23_containers%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F23_containers%2Fhowto.html?ref=aa2d5ba2c737dbc5e0913804d38eb1d0547be33d", "patch": "@@ -27,7 +27,7 @@ <h1>Contents</h1>\n    <li><a href=\"#4\">&quot;Hinting&quot; during insertion</a>\n    <li><a href=\"#5\">Bitmasks and string arguments</a>\n    <li><a href=\"#6\"><code>std::list::size()</code> is O(n)!</a>\n-   <li><a href=\"#7\">Memory management for vectors</a>\n+   <li><a href=\"#7\">Space overhead management for vectors</a>\n </ul>\n \n <hr>\n@@ -434,17 +434,19 @@ <h2><a name=\"6\"><code>std::list::size()</code> is O(n)!</a></h2>\n    </p>\n \n <hr>\n-<h2><a name=\"7\">Memory management for vectors</h2>\n+<h2><a name=\"7\">Space overhead management for vectors</h2>\n    <p>In\n       <a href=\"http://gcc.gnu.org/ml/libstdc++/2002-04/msg00105.html\">this\n       message to the list</a>, Daniel Kostecky announced work on an\n       alternate form of <code>std::vector</code> that would support hints\n-      about free store management.  The design was also described, along\n-      with possible implementation choices.\n-   </p>\n-   <p>The first alpha release was announced\n-      <a href=\"http://gcc.gnu.org/ml/libstdc++/2002-07/msg00048.html\">recently</a>\n-      and the releases themselves are available at\n+      on the number of elements to be over-allocated.  The design was also\n+      described, along with possible implementation choices.\n+   </p>\n+   <p>The first two alpha releases were announced\n+      <a href=\"http://gcc.gnu.org/ml/libstdc++/2002-07/msg00048.html\">here</a>\n+      and\n+      <a href=\"http://gcc.gnu.org/ml/libstdc++/2002-07/msg00111.html\">here</a>.\n+      The releases themselves are available at\n       <a href=\"http://www.kotelna.sk/dk/sw/caphint/\">\n       http://www.kotelna.sk/dk/sw/caphint/</a>.\n    </p>"}, {"sha": "6c0ae1e79dd8306ec9b3bea9c4a901706740c6b6", "filename": "libstdc++-v3/docs/html/abi.txt", "status": "added", "additions": 166, "deletions": 0, "changes": 166, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa2d5ba2c737dbc5e0913804d38eb1d0547be33d/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fabi.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa2d5ba2c737dbc5e0913804d38eb1d0547be33d/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fabi.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fabi.txt?ref=aa2d5ba2c737dbc5e0913804d38eb1d0547be33d", "patch": "@@ -0,0 +1,166 @@\n+\n+===========================\n+\n+See http://gcc.gnu.org/ml/libstdc++/2002-07/msg00054.html for why this\n+document exists, why it's incomplete, and what needs to be done still.\n+\n+===========================\n+\n+2002-07-01 Benjamin Kosnik\n+\n+Description of the libstdc++ ABI.\n+\n+I. What is an ABI? What's covered? What's not?\n+\n+- What's the deal with C++? Why can't different compiler's object\n+  files link with each other? Bug? Feature?\n+\n+- scope of document, of use to system integrators.\n+\n+- compilation includes and linked library binary must match up..\n+\n+- library ABI, compiler ABI different (but effects)\n+\n+- GNU C++ does not have a compiler command line option to switch\n+  between various different C++ ABIs. For instance, there is no way to\n+  switch between the gcc-3.0.x ABI, gcc-3.1.x ABI, and the gcc-3.2.x\n+  ABI during compilation. Other C++ compilers do allow this, and some\n+  g++ command line options may change the ABI (-fno-exceptions, see\n+  the complete list), but there is no version switch. Sorry. The GNU\n+  Project recommends that\n+\n+- shared library only, static is immutable.\n+\n+- Minimum environment that supports a versioned ABI: what's needed?  A\n+  supported dynamic linker, a GNU linker of sufficient vintage to\n+  understand demangled C++ name globbing (ld), a shared executable\n+  compiled with g++, and shared libraries (libgcc_s, libstdc++-v3)\n+  compiled by a compiler (g++) with a compatible ABI. Phew.\n+\n+  On top of all that, an additional constraint: libstdc++ did not\n+  attempt to version symbols (or age gracefully, really) until version\n+  3.1.0. \n+\n+  Most modern Linux and BSD versions, particularly ones using\n+  gcc-3.1.x tools, will meet the requirements above.\n+\n+- What configure options impact symbol versioning?\n+  There is only one: --enable-symvers. For more information see:\n+  http://gcc.gnu.org/onlinedocs/libstdc++/configopts.html\n+\n+  In particular, libstdc++-v3/acinclude.m4 has a macro called\n+  GLIBCPP_ENABLE_SYMVERS that defaults to yes (or the argument passed\n+  in via --enable-symvers=foo). At that point, the macro attempts to\n+  make sure that all the requirement for symbol versioning are in\n+  place. For more information, please consult acinclude.m4. \n+\n+- How can I tell if symbol versioning is, indeed, active? \n+\n+  When the GNU C++ library is being built with symbol versioning on,\n+  you should see the following at configure time for libstdc++-v3:\n+\n+checking versioning on shared library symbols... gnu\n+\n+  If you don't see this line in the configure output, or if this line\n+  appears but the last word is 'no', then you are out of luck.\n+\n+  If the compiler is pre-installed, a quick way to test is to compile\n+  the following (or any) simple C++ file:\n+\n+#include <iostream>\n+\n+int main()\n+{ std::cout << \"hello\" << std::endl; return 0; }\n+\n+%g++ hello.cc -o hello.out\n+%nm hello.out\n+\n+If you see symbols in the resulting output with \"GLIBCPP_3.x\" as part\n+of the name, then the executable is versioned. Here's an example:\n+\n+         U _ZNSt8ios_base4InitC1Ev@@GLIBCPP_3.1\n+\n+\n+\n+\n+\n+\n+II. ABI changes\n+\n+- (anything) changing size of an exported symbol\n+\n+- (anything) changing alignment of an exported symbol\n+\n+- (anything) changing the layout of an exported symbol\n+\n+- (anything) changing mangling on an exported symbol\n+\n+- (anything) adding or deleting an exported symbol\n+\n+\n+III. Versioning\n+\n+- include files\n+\n+  - versioning headers with version, why necessary\n+    (need to control member/non-member functions, add delete files)\n+\n+- shared library binaries\n+\n+  - release versions\n+\n+  - libtool versions\n+\n+  - when does so version get a bump? what are the options?\n+\n+  - how is the link map used?  \n+\n+  - in an non-abi breaking minor release, how are symbols added?\n+    removed?\n+\n+  - in an abi-breaking major release, what happens? symbol fall back\n+\n+\n+IV. Testing ABI changes\n+\n+- 'make check-abi'??\n+\n+- other ABI checkers\n+\n+\n+V. Issues not directly addressed, and possible suggestions\n+\n+- what to do about multi-ABI systems (nathan scenario)?\n+\n+  - compatibility libs\n+\n+  --enable-version-specific-runtime-libs\n+\n+  - Alexandre Oliva proposal to have extended name attributes, modify ld\n+ \n+  - directory-level versioning\n+\n+- wrapping C++ API's n \"C\" to use the C ABI.\n+\n+\n+V. References\n+\n+ABIcheck, a vauge idea of checking ABI compatibility\n+http://abicheck.sourceforge.net/\n+\n+C++ ABI reference\n+http://www.codesourcery.com/cxx-abi/\n+\n+Intel ABI documentation\n+\"Intel\ufffd Compilers for Linux* -Compatibility with the GNU Compilers\"\n+(included in icc 6.0)\n+\n+Sun Solaris 2.9 docs\n+Linker and Libraries Guide (document 816-1386)\n+C++ Migration Guide (document 816-2459)\n+http://docs.sun.com/db/prod/solaris.9\n+http://docs.sun.com/?p=/doc/816-1386&a=load\n+\n+Ulrich Drepper, \"ELF Symbol Versioning\"\n+http://people.redhat.com/drepper/symbol-versioning\n+"}, {"sha": "c8d33f36f4be68fc49508af2e7dd55dfa6613731", "filename": "libstdc++-v3/docs/html/ext/lwg-active.html", "status": "modified", "additions": 1190, "deletions": 1505, "changes": 2695, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa2d5ba2c737dbc5e0913804d38eb1d0547be33d/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Flwg-active.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa2d5ba2c737dbc5e0913804d38eb1d0547be33d/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Flwg-active.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Flwg-active.html?ref=aa2d5ba2c737dbc5e0913804d38eb1d0547be33d"}, {"sha": "eea548b8db7cb7e8acb64839becb33ed9726f439", "filename": "libstdc++-v3/docs/html/ext/lwg-defects.html", "status": "modified", "additions": 1348, "deletions": 18, "changes": 1366, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa2d5ba2c737dbc5e0913804d38eb1d0547be33d/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Flwg-defects.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa2d5ba2c737dbc5e0913804d38eb1d0547be33d/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Flwg-defects.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Flwg-defects.html?ref=aa2d5ba2c737dbc5e0913804d38eb1d0547be33d", "patch": "@@ -5,11 +5,11 @@\n <table>\n <tr>\n <td align=\"left\">Doc. no.</td>\n-<td align=\"left\">J16/01-0053 = WG21 N1338</td>\n+<td align=\"left\">J16/02-0028 = WG21 N1370</td>\n </tr>\n <tr>\n <td align=\"left\">Date:</td>\n-<td align=\"left\">09 Nov 2001</td>\n+<td align=\"left\">10 May 2002</td>\n </tr>\n <tr>\n <td align=\"left\">Project:</td>\n@@ -20,7 +20,7 @@\n <td align=\"left\">Matt Austern &lt;austern@research.att.com&gt;</td>\n </tr>\n </table>\n-<h1>C++ Standard Library Defect Report List (Revision 20)</h1>\n+<h1>C++ Standard Library Defect Report List (Revision 22)</h1>\n   <p>Reference ISO/IEC IS 14882:1998(E)</p>\n   <p>Also see:</p>\n     <ul>\n@@ -42,26 +42,32 @@ <h1>C++ Standard Library Defect Report List (Revision 20)</h1>\n   document.</p>\n <h2>Revision History</h2>\n <ul>\n+<li>R22: \n+Post-Cura&ccedil;ao mailing.  Added new issues <a href=\"lwg-active.html#362\">362</a>-<a href=\"lwg-active.html#366\">366</a>.\n+</li>\n+<li>R21: \n+Pre-Cura&ccedil;ao mailing.  Added new issues <a href=\"lwg-closed.html#351\">351</a>-<a href=\"lwg-active.html#361\">361</a>.\n+</li>\n <li>R20: \n Post-Redmond mailing; reflects actions taken in Redmond.  Added\n new issues <a href=\"lwg-active.html#336\">336</a>-<a href=\"lwg-active.html#350\">350</a>, of which issues \n <a href=\"lwg-active.html#347\">347</a>-<a href=\"lwg-active.html#350\">350</a> were added since Redmond, hence\n not discussed at the meeting.  \n \n All Ready issues were moved to DR status, with the exception of issues\n-<a href=\"lwg-active.html#284\">284</a>, <a href=\"lwg-active.html#241\">241</a>, and <a href=\"lwg-closed.html#267\">267</a>.\n+<a href=\"lwg-defects.html#284\">284</a>, <a href=\"lwg-active.html#241\">241</a>, and <a href=\"lwg-closed.html#267\">267</a>.\n \n Noteworthy issues discussed at Redmond include \n <a href=\"lwg-active.html#120\">120</a> <a href=\"lwg-active.html#202\">202</a>, <a href=\"lwg-active.html#226\">226</a>, <a href=\"lwg-active.html#233\">233</a>, \n-<a href=\"lwg-active.html#270\">270</a>, <a href=\"lwg-active.html#253\">253</a>, <a href=\"lwg-active.html#254\">254</a>, <a href=\"lwg-active.html#323\">323</a>.\n+<a href=\"lwg-defects.html#270\">270</a>, <a href=\"lwg-active.html#253\">253</a>, <a href=\"lwg-active.html#254\">254</a>, <a href=\"lwg-active.html#323\">323</a>.\n </li>\n <li>R19: \n Pre-Redmond mailing.  Added new issues \n-<a href=\"lwg-active.html#323\">323</a>-<a href=\"lwg-active.html#335\">335</a>.\n+<a href=\"lwg-active.html#323\">323</a>-<a href=\"lwg-defects.html#335\">335</a>.\n </li>\n <li>R18: \n Post-Copenhagen mailing; reflects actions taken in Copenhagen.\n-Added new issues <a href=\"lwg-defects.html#312\">312</a>-<a href=\"lwg-active.html#317\">317</a>, and discussed\n+Added new issues <a href=\"lwg-defects.html#312\">312</a>-<a href=\"lwg-defects.html#317\">317</a>, and discussed\n new issues <a href=\"lwg-defects.html#271\">271</a>-<a href=\"lwg-closed.html#314\">314</a>.\n \n Changed status of issues\n@@ -80,7 +86,7 @@ <h2>Revision History</h2>\n <a href=\"lwg-defects.html#238\">238</a> <a href=\"lwg-active.html#241\">241</a> <a href=\"lwg-defects.html#242\">242</a> <a href=\"lwg-defects.html#250\">250</a>\n <a href=\"lwg-defects.html#259\">259</a> <a href=\"lwg-defects.html#264\">264</a> <a href=\"lwg-defects.html#266\">266</a> <a href=\"lwg-closed.html#267\">267</a>\n <a href=\"lwg-defects.html#271\">271</a> <a href=\"lwg-defects.html#272\">272</a> <a href=\"lwg-defects.html#273\">273</a> <a href=\"lwg-defects.html#275\">275</a>\n-<a href=\"lwg-defects.html#281\">281</a> <a href=\"lwg-active.html#284\">284</a> <a href=\"lwg-defects.html#285\">285</a> <a href=\"lwg-defects.html#286\">286</a>\n+<a href=\"lwg-defects.html#281\">281</a> <a href=\"lwg-defects.html#284\">284</a> <a href=\"lwg-defects.html#285\">285</a> <a href=\"lwg-defects.html#286\">286</a>\n <a href=\"lwg-defects.html#288\">288</a> <a href=\"lwg-defects.html#292\">292</a> <a href=\"lwg-defects.html#295\">295</a> <a href=\"lwg-defects.html#297\">297</a>\n <a href=\"lwg-defects.html#298\">298</a> <a href=\"lwg-defects.html#301\">301</a> <a href=\"lwg-defects.html#303\">303</a> <a href=\"lwg-defects.html#306\">306</a>\n <a href=\"lwg-defects.html#307\">307</a> <a href=\"lwg-defects.html#308\">308</a> <a href=\"lwg-defects.html#312\">312</a>\n@@ -95,8 +101,8 @@ <h2>Revision History</h2>\n </li>\n <li>R17: \n Pre-Copenhagen mailing.  Converted issues list to XML.  Added proposed\n-resolutions for issues <a href=\"lwg-defects.html#49\">49</a>, <a href=\"lwg-active.html#76\">76</a>, <a href=\"lwg-active.html#91\">91</a>, <a href=\"lwg-defects.html#235\">235</a>, <a href=\"lwg-defects.html#250\">250</a>, <a href=\"lwg-closed.html#267\">267</a>.\n-Added new issues <a href=\"lwg-active.html#278\">278</a>-<a href=\"lwg-active.html#311\">311</a>.\n+resolutions for issues <a href=\"lwg-defects.html#49\">49</a>, <a href=\"lwg-defects.html#76\">76</a>, <a href=\"lwg-active.html#91\">91</a>, <a href=\"lwg-defects.html#235\">235</a>, <a href=\"lwg-defects.html#250\">250</a>, <a href=\"lwg-closed.html#267\">267</a>.\n+Added new issues <a href=\"lwg-active.html#278\">278</a>-<a href=\"lwg-defects.html#311\">311</a>.\n </li>\n <li>R16:  \n post-Toronto mailing; reflects actions taken in Toronto. Added new\n@@ -142,7 +148,7 @@ <h2>Revision History</h2>\n post-Kona mailing: Updated to reflect LWG and full committee actions\n in Kona (99-0048/N1224). Note changed resolution of issues\n <a href=\"lwg-closed.html#4\">4</a> and <a href=\"lwg-defects.html#38\">38</a>. Added issues <a href=\"lwg-closed.html#196\">196</a>\n-to <a href=\"lwg-active.html#198\">198</a>. Closed issues list split into &quot;defects&quot; and\n+to <a href=\"lwg-defects.html#198\">198</a>. Closed issues list split into &quot;defects&quot; and\n &quot;closed&quot; documents.  Changed the proposed resolution of issue\n <a href=\"lwg-closed.html#4\">4</a> to NAD, and changed the wording of proposed resolution\n of issue <a href=\"lwg-defects.html#38\">38</a>.\n@@ -2229,6 +2235,119 @@ <h2>Defect Reports</h2>\n   <tt>max</tt> elements.</p>\n </blockquote>\n <hr>\n+<a name=\"76\"><h3>76.&nbsp;Can a <tt>codecvt</tt> facet always convert one internal character at a time?</h3></a><p>\n+<b>Section:</b>&nbsp;22.2.1.5 <a href=\"lib-locales.html#lib.locale.codecvt\"> [lib.locale.codecvt]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"lwg-active.html#DR\">DR</a>&nbsp; <b>Submitter:</b>&nbsp;Matt Austern&nbsp; <b>Date:</b>&nbsp;25 Sep 1998</p>\n+<p>This issue concerns the requirements on classes derived from\n+<tt>codecvt</tt>, including user-defined classes. What are the\n+restrictions on the conversion from external characters\n+(e.g. <tt>char</tt>) to internal characters (e.g. <tt>wchar_t</tt>)?\n+Or, alternatively, what assumptions about <tt>codecvt</tt> facets can\n+the I/O library make? </p>\n+\n+<p>The question is whether it's possible to convert from internal\n+characters to external characters one internal character at a time,\n+and whether, given a valid sequence of external characters, it's\n+possible to pick off internal characters one at a time. Or, to put it\n+differently: given a sequence of external characters and the\n+corresponding sequence of internal characters, does a position in the\n+internal sequence correspond to some position in the external\n+sequence? </p>\n+\n+<p>To make this concrete, suppose that <tt>[first, last)</tt> is a\n+sequence of <i>M</i> external characters and that <tt>[ifirst,\n+ilast)</tt> is the corresponding sequence of <i>N</i> internal\n+characters, where <i>N &gt; 1</i>. That is, <tt>my_encoding.in()</tt>,\n+applied to <tt>[first, last)</tt>, yields <tt>[ifirst,\n+ilast)</tt>. Now the question: does there necessarily exist a\n+subsequence of external characters, <tt>[first, last_1)</tt>, such\n+that the corresponding sequence of internal characters is the single\n+character <tt>*ifirst</tt>?\n+</p>\n+\n+<p>(What a &quot;no&quot; answer would mean is that\n+<tt>my_encoding</tt> translates sequences only as blocks. There's a\n+sequence of <i>M</i> external characters that maps to a sequence of\n+<i>N</i> internal characters, but that external sequence has no\n+subsequence that maps to <i>N-1</i> internal characters.) </p>\n+\n+<p>Some of the wording in the standard, such as the description of\n+<tt>codecvt::do_max_length</tt> (22.2.1.5.2 <a href=\"lib-locales.html#lib.locale.codecvt.virtuals\"> [lib.locale.codecvt.virtuals]</a>,\n+paragraph 11) and <tt>basic_filebuf::underflow</tt> (27.8.1.4 <a href=\"lib-iostreams.html#lib.filebuf.virtuals\"> [lib.filebuf.virtuals]</a>, paragraph 3) suggests that it must always be\n+possible to pick off internal characters one at a time from a sequence\n+of external characters. However, this is never explicitly stated one\n+way or the other. </p>\n+\n+<p>This issue seems (and is) quite technical, but it is important if\n+we expect users to provide their own encoding facets. This is an area\n+where the standard library calls user-supplied code, so a well-defined\n+set of requirements for the user-supplied code is crucial. Users must\n+be aware of the assumptions that the library makes. This issue affects\n+positioning operations on <tt>basic_filebuf</tt>, unbuffered input,\n+and several of <tt>codecvt</tt>'s member functions. </p>\n+<p><b>Proposed resolution:</b></p>\n+<p>Add the following text as a new paragraph, following 22.2.1.5.2 <a href=\"lib-locales.html#lib.locale.codecvt.virtuals\"> [lib.locale.codecvt.virtuals]</a> paragraph 2:</p>\n+\n+<blockquote>\n+<p>A <tt>codecvt</tt> facet that is used by <tt>basic_filebuf</tt>\n+(27.8 <a href=\"lib-iostreams.html#lib.file.streams\"> [lib.file.streams]</a>) must have the property that if</p>\n+<pre>\n+    do_out(state, from, from_end, from_next, to, to_lim, to_next)\n+</pre>\n+would return <tt>ok</tt>, where <tt>from != from_end</tt>, then \n+<pre>\n+    do_out(state, from, from + 1, from_next, to, to_end, to_next)\n+</pre>\n+must also return <tt>ok</tt>, and that if\n+<pre>\n+    do_in(state, from, from_end, from_next, to, to_lim, to_next)\n+</pre>\n+would return <tt>ok</tt>, where <tt>to != to_lim</tt>, then\n+<pre>\n+    do_in(state, from, from_end, from_next, to, to + 1, to_next)\n+</pre>\n+<p>must also return <tt>ok</tt>.  [<i>Footnote:</i> Informally, this\n+means that <tt>basic_filebuf</tt> assumes that the mapping from\n+internal to external characters is 1 to N: a <tt>codecvt</tt> that is\n+used by <tt>basic_filebuf</tt> must be able to translate characters\n+one internal character at a time.  <i>--End Footnote</i>]</p>\n+</blockquote>\n+\n+<p><i>[Redmond: Minor change in proposed resolution.  Original\n+proposed resolution talked about &quot;success&quot;, with a parenthetical\n+comment that success meant returning <tt>ok</tt>.  New wording\n+removes all talk about &quot;success&quot;, and just talks about the\n+return value.]</i></p>\n+\n+<p><b>Rationale:</b></p>\n+\n+  <p>The proposed resoluion says that conversions can be performed one\n+  internal character at a time.  This rules out some encodings that\n+  would otherwise be legal.  The alternative answer would mean there\n+  would be some internal positions that do not correspond to any\n+  external file position.</p>\n+  <p>\n+  An example of an encoding that this rules out is one where the\n+  <tt>internT</tt> and <tt>externT</tt> are of the same type, and\n+  where the internal sequence <tt>c1 c2</tt> corresponds to the\n+  external sequence <tt>c2 c1</tt>.\n+  </p>\n+  <p>It was generally agreed that <tt>basic_filebuf</tt> relies\n+  on this property: it was designed under the assumption that\n+  the external-to-internal mapping is N-to-1, and it is not clear\n+  that <tt>basic_filebuf</tt> is implementable without that \n+  restriction.\n+  </p>\n+  <p>\n+  The proposed resolution is expressed as a restriction on\n+  <tt>codecvt</tt> when used by <tt>basic_filebuf</tt>, rather\n+  than a blanket restriction on all <tt>codecvt</tt> facets,\n+  because <tt>basic_filebuf</tt> is the only other part of the \n+  library that uses <tt>codecvt</tt>.  If a user wants to define\n+  a <tt>codecvt</tt> facet that implements a more general N-to-M\n+  mapping, there is no reason to prohibit it, so long as the user\n+  does not expect <tt>basic_filebuf</tt> to be able to use it.\n+  </p>\n+<hr>\n <a name=\"78\"><h3>78.&nbsp;Typo: event_call_back</h3></a><p>\n <b>Section:</b>&nbsp;27.4.2 <a href=\"lib-iostreams.html#lib.ios.base\"> [lib.ios.base]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"lwg-active.html#DR\">DR</a>&nbsp; <b>Submitter:</b>&nbsp;Nico Josuttis&nbsp; <b>Date:</b>&nbsp;29 Sep 1998</p>\n <p>typo: event_call_back should be event_callback &nbsp; </p>\n@@ -3210,7 +3329,7 @@ <h2>Defect Reports</h2>\n <p>Sections 21.3.6.4 paragraph 1 and 21.3.6.6 paragraph 1 surely have misprints where they\n say:<br>\n <br>\n-&#x97; <tt>xpos &lt;= pos</tt> and <tt>pos &lt; size();</tt>\n+&#151; <tt>xpos &lt;= pos</tt> and <tt>pos &lt; size();</tt>\n </p>\n \n <p>Surely the document meant to say ``<tt>xpos &lt; size()</tt>'' in both places.</p>\n@@ -3220,11 +3339,11 @@ <h2>Defect Reports</h2>\n <p><b>Proposed resolution:</b></p>\n <p>Change Sections 21.3.6.4 paragraph 1 and 21.3.6.6 paragraph 1, the line which says:<br>\n <br>\n-&#x97; <tt>xpos &lt;= pos</tt> and <tt>pos &lt; size();<br>\n+&#151; <tt>xpos &lt;= pos</tt> and <tt>pos &lt; size();<br>\n <br>\n </tt>to:<br>\n <tt><br>\n-</tt>&#x97; <tt>xpos &lt;= pos</tt> and <tt>xpos &lt; size();</tt>\n+</tt>&#151; <tt>xpos &lt;= pos</tt> and <tt>xpos &lt; size();</tt>\n </p>\n <hr>\n <a name=\"142\"><h3>142.&nbsp;lexicographical_compare complexity wrong</h3></a><p>\n@@ -3989,10 +4108,10 @@ <h2>Defect Reports</h2>\n omit the <tt> std::</tt> namespace qualification.</p> <p>For\n example, 17.4.3.4 <a href=\"lib-intro.html#lib.replacement.functions\"> [lib.replacement.functions]</a> paragraph 2:</p>\n <blockquote>\n-<pre>&#x97; operator new(size_t)\n-&#x97; operator new(size_t, const std::nothrow_t&amp;)\n-&#x97; operator new[](size_t)\n-&#x97; operator new[](size_t, const std::nothrow_t&amp;)</pre>\n+<pre>&#151; operator new(size_t)\n+&#151; operator new(size_t, const std::nothrow_t&amp;)\n+&#151; operator new[](size_t)\n+&#151; operator new[](size_t, const std::nothrow_t&amp;)</pre>\n </blockquote>\n <p><b>Proposed resolution:</b></p>\n <p>   In 17.4.3.4 <a href=\"lib-intro.html#lib.replacement.functions\"> [lib.replacement.functions]</a> paragraph 2: replace:</p>\n@@ -4521,6 +4640,132 @@ <h2>Defect Reports</h2>\n <tt>ios_base::failure</tt>).\n </p>\n </blockquote>\n+<hr>\n+<a name=\"198\"><h3>198.&nbsp;Validity of pointers and references unspecified after iterator destruction</h3></a><p>\n+<b>Section:</b>&nbsp;24.1 <a href=\"lib-iterators.html#lib.iterator.requirements\"> [lib.iterator.requirements]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"lwg-active.html#DR\">DR</a>&nbsp; <b>Submitter:</b>&nbsp;Beman Dawes&nbsp; <b>Date:</b>&nbsp;3 Nov 1999</p>\n+<p>\n+Is a pointer or reference obtained from an iterator still valid after\n+destruction of the iterator?\n+</p>\n+<p>\n+Is a pointer or reference obtained from an iterator still valid after the value\n+of the iterator changes?\n+</p>\n+<blockquote>\n+<pre>\n+#include &lt;iostream&gt;\n+#include &lt;vector&gt;\n+#include &lt;iterator&gt;\n+\n+int main()\n+{\n+    typedef std::vector&lt;int&gt; vec_t;\n+    vec_t v;\n+    v.push_back( 1 );\n+\n+    // Is a pointer or reference obtained from an iterator still\n+    // valid after destruction of the iterator?\n+    int * p = &amp;*v.begin();\n+    std::cout &lt;&lt; *p &lt;&lt; '\\n';  // OK?\n+\n+    // Is a pointer or reference obtained from an iterator still\n+    // valid after the value of the iterator changes?\n+    vec_t::iterator iter( v.begin() );\n+    p = &amp;*iter++;\n+    std::cout &lt;&lt; *p &lt;&lt; '\\n';  // OK?\n+\n+    return 0;\n+}\n+</pre>\n+</blockquote>\n+\n+<p>The standard doesn't appear to directly address these\n+questions. The standard needs to be clarified. At least two real-world\n+cases have been reported where library implementors wasted\n+considerable effort because of the lack of clarity in the\n+standard. The question is important because requiring pointers and\n+references to remain valid has the effect for practical purposes of\n+prohibiting iterators from pointing to cached rather than actual\n+elements of containers.</p>\n+\n+<p>The standard itself assumes that pointers and references obtained\n+from an iterator are still valid after iterator destruction or\n+change. The definition of reverse_iterator::operator*(), 24.4.1.3.3 <a href=\"lib-iterators.html#lib.reverse.iter.op.star\"> [lib.reverse.iter.op.star]</a>, which returns a reference, defines\n+effects:</p>\n+\n+<blockquote>\n+  <pre>Iterator tmp = current;\n+return *--tmp;</pre>\n+</blockquote>\n+<p>The definition of reverse_iterator::operator-&gt;(), 24.4.1.3.4 <a href=\"lib-iterators.html#lib.reverse.iter.opref\"> [lib.reverse.iter.opref]</a>, which returns a pointer, defines effects:</p>\n+<blockquote>\n+  <pre>return &amp;(operator*());</pre>\n+</blockquote>\n+\n+<p>Because the standard itself assumes pointers and references remain\n+valid after iterator destruction or change, the standard should say so\n+explicitly. This will also reduce the chance of user code breaking\n+unexpectedly when porting to a different standard library\n+implementation.</p>\n+<p><b>Proposed resolution:</b></p>\n+<p>Add a new paragraph to 24.1 <a href=\"lib-iterators.html#lib.iterator.requirements\"> [lib.iterator.requirements]</a>:</p>\n+<blockquote>\n+Destruction of an iterator may invalidate pointers and references\n+previously obtained from that iterator.\n+</blockquote>\n+\n+<p>Replace paragraph 1 of 24.4.1.3.3 <a href=\"lib-iterators.html#lib.reverse.iter.op.star\"> [lib.reverse.iter.op.star]</a> with:</p>\n+\n+<blockquote>\n+<p><b>Effects:</b></p>\n+<pre>\n+  this-&gt;tmp = current;\n+  --this-&gt;tmp;\n+  return *this-&gt;tmp;\n+</pre>\n+\n+<p>\n+[<i>Note:</i> This operation must use an auxiliary member variable,\n+rather than a temporary variable, to avoid returning a reference that\n+persists beyond the lifetime of its associated iterator.  (See\n+24.1 <a href=\"lib-iterators.html#lib.iterator.requirements\"> [lib.iterator.requirements]</a>.)  The name of this member variable is shown for\n+exposition only.  <i>--end note</i>]\n+</p>\n+</blockquote>\n+\n+<p><i>[Post-Tokyo: The issue has been reformulated purely\n+in terms of iterators.]</i></p>\n+\n+<p><i>[Pre-Toronto: Steve Cleary pointed out the no-invalidation\n+assumption by reverse_iterator. The issue and proposed resolution was\n+reformulated yet again to reflect this reality.]</i></p>\n+\n+<p><i>[Copenhagen: Steve Cleary pointed out that reverse_iterator\n+assumes its underlying iterator has persistent pointers and\n+references.  Andy Koenig pointed out that it is possible to rewrite\n+reverse_iterator so that it no longer makes such an assupmption.\n+However, this issue is related to issue <a href=\"lwg-active.html#299\">299</a>.  If we\n+decide it is intentional that <tt>p[n]</tt> may return by value\n+instead of reference when <tt>p</tt> is a Random Access Iterator,\n+other changes in reverse_iterator will be necessary.]</i></p>\n+<p><b>Rationale:</b></p>\n+<p>This issue has been discussed extensively.  Note that it is\n+<i>not</i> an issue about the behavior of predefined iterators.  It is\n+asking whether or not user-defined iterators are permitted to have\n+transient pointers and references.  Several people presented examples\n+of useful user-defined iterators that have such a property; examples\n+include a B-tree iterator, and an &quot;iota iterator&quot; that doesn't point\n+to memory.  Library implementors already seem to be able to cope with\n+such iterators: they take pains to avoid forming references to memory\n+that gets iterated past.  The only place where this is a problem is\n+<tt>reverse_iterator</tt>, so this issue changes\n+<tt>reverse_iterator</tt> to make it work.</p>\n+\n+<p>This resolution does not weaken any guarantees provided by\n+predefined iterators like <tt>list&lt;int&gt;::iterator</tt>.\n+Clause 23 should be reviewed to make sure that guarantees for\n+predefined iterators are as strong as users expect.</p>\n+\n <hr>\n <a name=\"199\"><h3>199.&nbsp;What does <tt>allocate(0)</tt> return?</h3></a><p>\n <b>Section:</b>&nbsp;20.1.5 <a href=\"lib-utilities.html#lib.allocator.requirements\"> [lib.allocator.requirements]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"lwg-active.html#DR\">DR</a>&nbsp; <b>Submitter:</b>&nbsp;Matt Austern&nbsp; <b>Date:</b>&nbsp;19 Nov 1999</p>\n@@ -5217,6 +5462,89 @@ <h2>Defect Reports</h2>\n <p>We could fix 27.7.1.1 paragraph 4, but there would be no point.  If\n we fixed it, it would say just the same thing as text that's already\n in the standard.</p>\n+<hr>\n+<a name=\"239\"><h3>239.&nbsp;Complexity of unique() and/or unique_copy incorrect</h3></a><p>\n+<b>Section:</b>&nbsp;25.2.8 <a href=\"lib-algorithms.html#lib.alg.unique\"> [lib.alg.unique]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"lwg-active.html#DR\">DR</a>&nbsp; <b>Submitter:</b>&nbsp;Angelika Langer&nbsp; <b>Date:</b>&nbsp;May 15 2000</p>\n+<p>The complexity of unique and unique_copy are inconsistent with each\n+other and inconsistent with the implementations.&nbsp; The standard\n+specifies:</p>\n+\n+<p>for unique():</p>\n+\n+<blockquote>-3- Complexity: If the range (last - first) is not empty, exactly\n+(last - first) - 1 applications of the corresponding predicate, otherwise\n+no applications of the predicate.</blockquote>\n+\n+<p>for unique_copy():</p>\n+\n+<blockquote>-7- Complexity: Exactly last - first applications of the corresponding\n+predicate.</blockquote>\n+\n+<p>\n+The implementations do it the other way round: unique() applies the\n+predicate last-first times and unique_copy() applies it last-first-1\n+times.</p>\n+\n+<p>As both algorithms use the predicate for pair-wise comparison of\n+sequence elements I don't see a justification for unique_copy()\n+applying the predicate last-first times, especially since it is not\n+specified to which pair in the sequence the predicate is applied\n+twice.</p>\n+<p><b>Proposed resolution:</b></p>\n+<p>Change both complexity sections in 25.2.8 <a href=\"lib-algorithms.html#lib.alg.unique\"> [lib.alg.unique]</a> to:</p>\n+\n+<blockquote>Complexity: For nonempty ranges, exactly last - first - 1\n+applications of the corresponding predicate.</blockquote>\n+\n+<hr>\n+<a name=\"240\"><h3>240.&nbsp;Complexity of adjacent_find() is meaningless</h3></a><p>\n+<b>Section:</b>&nbsp;25.1.5 <a href=\"lib-algorithms.html#lib.alg.adjacent.find\"> [lib.alg.adjacent.find]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"lwg-active.html#DR\">DR</a>&nbsp; <b>Submitter:</b>&nbsp;Angelika Langer&nbsp; <b>Date:</b>&nbsp;May 15 2000</p>\n+<p>The complexity section of adjacent_find is defective:</p>\n+\n+<blockquote>\n+<pre>\n+template &lt;class ForwardIterator&gt;\n+ForwardIterator adjacent_find(ForwardIterator first, ForwardIterator last\n+                              BinaryPredicate pred);\n+</pre>\n+\n+<p>-1- Returns: The first iterator i such that both i and i + 1 are in\n+the range [first, last) for which the following corresponding\n+conditions hold: *i == *(i + 1), pred(*i, *(i + 1)) != false. Returns\n+last if no such iterator is found.</p>\n+\n+<p>-2- Complexity: Exactly find(first, last, value) - first applications\n+of the corresponding predicate.\n+</p>\n+</blockquote>\n+\n+<p>In the Complexity section, it is not defined what &quot;value&quot;\n+is supposed to mean. My best guess is that &quot;value&quot; means an\n+object for which one of the conditions pred(*i,value) or\n+pred(value,*i) is true, where i is the iterator defined in the Returns\n+section. However, the value type of the input sequence need not be\n+equality-comparable and for this reason the term find(first, last,\n+value) - first is meaningless.</p>\n+\n+<p>A term such as find_if(first, last, bind2nd(pred,*i)) - first or\n+find_if(first, last, bind1st(pred,*i)) - first might come closer to\n+the intended specification.  Binders can only be applied to function\n+objects that have the function call operator declared const, which is\n+not required of predicates because they can have non-const data\n+members. For this reason, a specification using a binder could only be\n+an &quot;as-if&quot; specification.</p>\n+<p><b>Proposed resolution:</b></p>\n+<p>Change the complexity section in 25.1.5 <a href=\"lib-algorithms.html#lib.alg.adjacent.find\"> [lib.alg.adjacent.find]</a> to:</p>\n+<blockquote>\n+For a nonempty range, exactly <tt>min((<i>i</i> - <i>first</i>) + 1,\n+(<i>last</i> - <i>first</i>) - 1)</tt> applications of the\n+corresponding predicate, where <i>i</i> is <tt>adjacent_find</tt>'s\n+return value.\n+</blockquote>\n+\n+<p><i>[Copenhagen: the original resolution specified an upper\n+bound.  The LWG preferred an exact count.]</i></p>\n+\n <hr>\n <a name=\"242\"><h3>242.&nbsp;Side effects of function objects</h3></a><p>\n <b>Section:</b>&nbsp;25.2.3 <a href=\"lib-algorithms.html#lib.alg.transform\"> [lib.alg.transform]</a>, 26.4 <a href=\"lib-numerics.html#lib.numeric.ops\"> [lib.numeric.ops]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"lwg-active.html#DR\">DR</a>&nbsp; <b>Submitter:</b>&nbsp;Angelika Langer&nbsp; <b>Date:</b>&nbsp;May 15 2000</p>\n@@ -5894,6 +6222,259 @@ <h2>Defect Reports</h2>\n         locale(const locale&amp; other) throw();\n </pre>\n <hr>\n+<a name=\"270\"><h3>270.&nbsp;Binary search requirements overly strict</h3></a><p>\n+<b>Section:</b>&nbsp;25.3.3 <a href=\"lib-algorithms.html#lib.alg.binary.search\"> [lib.alg.binary.search]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"lwg-active.html#DR\">DR</a>&nbsp; <b>Submitter:</b>&nbsp;Matt Austern&nbsp; <b>Date:</b>&nbsp;18 Oct 2000</p>\n+<p>\n+Each of the four binary search algorithms (lower_bound, upper_bound,\n+equal_range, binary_search) has a form that allows the user to pass a\n+comparison function object.  According to 25.3, paragraph 2, that\n+comparison function object has to be a strict weak ordering.\n+</p>\n+\n+<p>\n+This requirement is slightly too strict.  Suppose we are searching\n+through a sequence containing objects of type X, where X is some\n+large record with an integer key.  We might reasonably want to look\n+up a record by key, in which case we would want to write something\n+like this:\n+</p>\n+<pre>\n+    struct key_comp {\n+      bool operator()(const X&amp; x, int n) const {\n+        return x.key() &lt; n;\n+      }\n+    }\n+\n+    std::lower_bound(first, last, 47, key_comp());\n+</pre>\n+\n+<p>\n+key_comp is not a strict weak ordering, but there is no reason to\n+prohibit its use in lower_bound.\n+</p>\n+\n+<p>\n+There's no difficulty in implementing lower_bound so that it allows\n+the use of something like key_comp.  (It will probably work unless an\n+implementor takes special pains to forbid it.)  What's difficult is\n+formulating language in the standard to specify what kind of\n+comparison function is acceptable.  We need a notion that's slightly\n+more general than that of a strict weak ordering, one that can encompass\n+a comparison function that involves different types.  Expressing that\n+notion may be complicated.\n+</p>\n+\n+<p><i>Additional questions raised at the Toronto meeting:</i></p>\n+<ul>\n+<li> Do we really want to specify what ordering the implementor must\n+     use when calling the function object?  The standard gives \n+     specific expressions when describing these algorithms, but it also\n+     says that other expressions (with different argument order) are\n+     equivalent.</li>\n+<li> If we are specifying ordering, note that the standard uses both\n+     orderings when describing <tt>equal_range</tt>.</li>\n+<li> Are we talking about requiring these algorithms to work properly\n+     when passed a binary function object whose two argument types\n+     are not the same, or are we talking about requirements when\n+     they are passed a binary function object with several overloaded\n+     versions of <tt>operator()</tt>?</li>\n+<li> The definition of a strict weak ordering does not appear to give\n+     any guidance on issues of overloading; it only discusses expressions,\n+     and all of the values in these expressions are of the same type.\n+     Some clarification would seem to be in order.</li>\n+</ul>\n+\n+<p><i>Additional discussion from Copenhagen:</i></p>\n+<ul>\n+<li>It was generally agreed that there is a real defect here: if\n+the predicate is merely required to be a Strict Weak Ordering, then\n+it's possible to pass in a function object with an overloaded\n+operator(), where the version that's actually called does something\n+completely inappropriate.  (Such as returning a random value.)</li>\n+\n+<li>An alternative formulation was presented in a paper distributed by\n+David Abrahams at the meeting, &quot;Binary Search with Heterogeneous\n+Comparison&quot;, J16-01/0027 = WG21 N1313: Instead of viewing the\n+predicate as a Strict Weak Ordering acting on a sorted sequence, view\n+the predicate/value pair as something that partitions a sequence.\n+This is almost equivalent to saying that we should view binary search\n+as if we are given a unary predicate and a sequence, such that f(*p)\n+is true for all p below a specific point and false for all p above it.\n+The proposed resolution is based on that alternative formulation.</li>\n+</ul>\n+<p><b>Proposed resolution:</b></p>\n+\n+<p>Change 25.3 [lib.alg.sorting] paragraph 3 from:</p>\n+\n+<blockquote>\n+  3 For all algorithms that take Compare, there is a version that uses\n+  operator&lt; instead. That is, comp(*i, *j) != false defaults to *i &lt;\n+  *j != false. For the algorithms to work correctly, comp has to\n+  induce a strict weak ordering on the values.\n+</blockquote>\n+\n+<p>to:</p>\n+\n+<blockquote>\n+  3 For all algorithms that take Compare, there is a version that uses\n+  operator&lt; instead. That is, comp(*i, *j) != false defaults to *i\n+  &lt; *j != false. For algorithms other than those described in\n+  lib.alg.binary.search (25.3.3) to work correctly, comp has to induce\n+  a strict weak ordering on the values.\n+</blockquote>\n+\n+<p>Add the following paragraph after 25.3 [lib.alg.sorting] paragraph 5:</p>\n+\n+<blockquote>\n+  -6- A sequence [start, finish) is partitioned with respect to an\n+  expression f(e) if there exists an integer n such that\n+  for all 0 &lt;= i &lt; distance(start, finish), f(*(begin+i)) is true if\n+  and only if i &lt; n.\n+</blockquote>\n+\n+<p>Change 25.3.3 [lib.alg.binary.search] paragraph 1 from:</p>\n+\n+<blockquote>\n+  -1- All of the algorithms in this section are versions of binary\n+   search and assume that the sequence being searched is in order\n+   according to the implied or explicit comparison function. They work\n+   on non-random access iterators minimizing the number of\n+   comparisons, which will be logarithmic for all types of\n+   iterators. They are especially appropriate for random access\n+   iterators, because these algorithms do a logarithmic number of\n+   steps through the data structure. For non-random access iterators\n+   they execute a linear number of steps.\n+</blockquote>\n+\n+<p>to:</p>\n+\n+<blockquote>\n+   -1- All of the algorithms in this section are versions of binary\n+    search and assume that the sequence being searched is partitioned\n+    with respect to an expression formed by binding the search key to\n+    an argument of the implied or explicit comparison function. They\n+    work on non-random access iterators minimizing the number of\n+    comparisons, which will be logarithmic for all types of\n+    iterators. They are especially appropriate for random access\n+    iterators, because these algorithms do a logarithmic number of\n+    steps through the data structure. For non-random access iterators\n+    they execute a linear number of steps.\n+</blockquote>\n+\n+<p>Change 25.3.3.1 [lib.lower.bound] paragraph 1 from:</p>\n+\n+<blockquote>\n+   -1- Requires: Type T is LessThanComparable\n+    (lib.lessthancomparable). \n+</blockquote>\n+\n+<p>to:</p>\n+\n+<blockquote>\n+   -1- Requires: The elements e of [first, last) are partitioned with\n+   respect to the expression e &lt; value or comp(e, value)\n+</blockquote>\n+\n+\n+<p>Remove 25.3.3.1 [lib.lower.bound] paragraph 2:</p>\n+\n+<blockquote>\n+   -2- Effects: Finds the first position into which value can be\n+    inserted without violating the ordering. \n+</blockquote>\n+\n+<p>Change 25.3.3.2 [lib.upper.bound] paragraph 1 from:</p>\n+\n+<blockquote>\n+  -1- Requires: Type T is LessThanComparable (lib.lessthancomparable).\n+</blockquote>\n+\n+<p>to:</p>\n+\n+<blockquote>\n+   -1- Requires: The elements e of [first, last) are partitioned with\n+   respect to the expression !(value &lt; e) or !comp(value, e)\n+</blockquote>\n+\n+<p>Remove 25.3.3.2 [lib.upper.bound] paragraph 2:</p>\n+\n+<blockquote>\n+   -2- Effects: Finds the furthermost position into which value can be\n+    inserted without violating the ordering.\n+</blockquote>\n+\n+<p>Change 25.3.3.3 [lib.equal.range] paragraph 1 from:</p>\n+\n+<blockquote>\n+   -1- Requires: Type T is LessThanComparable\n+    (lib.lessthancomparable).\n+</blockquote>\n+\n+<p>to:</p>\n+\n+<blockquote>\n+   -1- Requires: The elements e of [first, last) are partitioned with\n+   respect to the expressions e &lt; value and !(value &lt; e) or\n+   comp(e, value) and !comp(value, e).  Also, for all elements e of\n+   [first, last), e &lt; value implies !(value &lt; e) or comp(e,\n+   value) implies !comp(value, e)\n+</blockquote>\n+\n+<p>Change 25.3.3.3 [lib.equal.range] paragraph 2 from:</p>\n+\n+<blockquote>\n+   -2- Effects: Finds the largest subrange [i, j) such that the value\n+    can be inserted at any iterator k in it without violating the\n+    ordering. k satisfies the corresponding conditions: !(*k &lt; value)\n+    &amp;&amp; !(value &lt; *k) or comp(*k, value) == false &amp;&amp; comp(value, *k) ==\n+    false.\n+</blockquote>\n+\n+<p>to:</p>\n+\n+<pre>\n+   -2- Returns: \n+         make_pair(lower_bound(first, last, value),\n+                   upper_bound(first, last, value))\n+       or\n+         make_pair(lower_bound(first, last, value, comp),\n+                   upper_bound(first, last, value, comp))\n+</pre>\n+\n+<p>Change 25.3.3.3 [lib.binary.search] paragraph 1 from:</p>\n+\n+<blockquote>\n+   -1- Requires: Type T is LessThanComparable\n+    (lib.lessthancomparable).\n+</blockquote>\n+\n+<p>to:</p>\n+\n+<blockquote>\n+   -1- Requires: The elements e of [first, last) are partitioned with\n+   respect to the expressions e &lt; value and !(value &lt; e) or comp(e,\n+   value) and !comp(value, e). Also, for all elements e of [first,\n+   last), e &lt; value implies !(value &lt; e) or comp(e, value) implies\n+   !comp(value, e)\n+</blockquote>\n+\n+<p><i>[Copenhagen: Dave Abrahams provided this wording]</i></p>\n+\n+<p><i>[Redmond: Minor changes in wording.  (Removed &quot;non-negative&quot;, and\n+changed the &quot;other than those described in&quot; wording.) Also, the LWG\n+decided to accept the &quot;optional&quot; part.]</i></p>\n+\n+<p><b>Rationale:</b></p>\n+<p>The proposed resolution reinterprets binary search. Instead of\n+thinking about searching for a value in a sorted range, we view that\n+as an important special case of a more general algorithm: searching\n+for the partition point in a partitioned range.</p>\n+\n+<p>We also add a guarantee that the old wording did not: we ensure\n+that the upper bound is no earlier than the lower bound, that\n+the pair returned by equal_range is a valid range, and that the first\n+part of that pair is the lower bound.</p>\n+<hr>\n <a name=\"271\"><h3>271.&nbsp;basic_iostream missing typedefs</h3></a><p>\n <b>Section:</b>&nbsp;27.6.1.5 <a href=\"lib-iostreams.html#lib.iostreamclass\"> [lib.iostreamclass]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"lwg-active.html#DR\">DR</a>&nbsp; <b>Submitter:</b>&nbsp;Martin Sebor&nbsp; <b>Date:</b>&nbsp;02 Nov 2000</p>\n <p>\n@@ -5942,6 +6523,62 @@ <h2>Defect Reports</h2>\n <p><b>Proposed resolution:</b></p>\n <p>Qualify the names with the name of the class of which they are\n members, i.e., ios_base.</p>\n+<hr>\n+<a name=\"274\"><h3>274.&nbsp;a missing/impossible allocator requirement</h3></a><p>\n+<b>Section:</b>&nbsp;20.1.5 <a href=\"lib-utilities.html#lib.allocator.requirements\"> [lib.allocator.requirements]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"lwg-active.html#DR\">DR</a>&nbsp; <b>Submitter:</b>&nbsp;Martin Sebor&nbsp; <b>Date:</b>&nbsp;02 Nov 2000</p>\n+<p>\n+I see that table 31 in 20.1.5, p3 allows T in std::allocator&lt;T&gt; to be of\n+any type. But the synopsis in 20.4.1 calls for allocator&lt;&gt;::address() to\n+be overloaded on reference and const_reference, which is ill-formed for\n+all T = const U. In other words, this won't work:\n+</p>\n+\n+<p>\n+template class std::allocator&lt;const int&gt;;\n+</p>\n+\n+<p>\n+The obvious solution is to disallow specializations of allocators on\n+const types. However, while containers' elements are required to be\n+assignable (which rules out specializations on const T's), I think that\n+allocators might perhaps be potentially useful for const values in other\n+contexts. So if allocators are to allow const types a partial\n+specialization of std::allocator&lt;const T&gt; would probably have to be\n+provided.\n+</p>\n+<p><b>Proposed resolution:</b></p>\n+<p>Change the text in row 1, column 2 of table 32 in 20.1.5, p3 from</p>\n+\n+    <blockquote>\n+    any type\n+    </blockquote>\n+\n+<p>to</p>\n+    <blockquote>\n+    any non-const, non-reference type\n+    </blockquote>\n+\n+<p><i>[Redmond: previous proposed resolution was &quot;any non-const,\n+non-volatile, non-reference type&quot;.  Got rid of the &quot;non-volatile&quot;.]</i></p>\n+\n+<p><b>Rationale:</b></p>\n+<p>\n+Two resolutions were originally proposed: one that partially\n+specialized std::allocator for const types, and one that said an\n+allocator's value type may not be const.  The LWG chose the second.\n+The first wouldn't be appropriate, because allocators are intended for\n+use by containers, and const value types don't work in containers.\n+Encouraging the use of allocators with const value types would only\n+lead to unsafe code.\n+</p>\n+<p>\n+The original text for proposed resolution 2 was modified so that it\n+also forbids volatile types and reference types.\n+</p>\n+\n+<p><i>[Cura&ccedil;ao: LWG double checked and believes volatile is correctly\n+excluded from the PR.]</i></p>\n+\n <hr>\n <a name=\"275\"><h3>275.&nbsp;Wrong type in num_get::get() overloads</h3></a><p>\n <b>Section:</b>&nbsp;22.2.2.1.1 <a href=\"lib-locales.html#lib.facet.num.get.members\"> [lib.facet.num.get.members]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"lwg-active.html#DR\">DR</a>&nbsp; <b>Submitter:</b>&nbsp;Matt Austern&nbsp; <b>Date:</b>&nbsp;02 Nov 2000</p>\n@@ -5993,6 +6630,150 @@ <h2>Defect Reports</h2>\n   iter_type get(iter_type in, iter_type end, ios_base&amp; str,\n                 ios_base::iostate&amp; err, float&amp; val) const;\n </pre>\n+<hr>\n+<a name=\"276\"><h3>276.&nbsp;Assignable requirement for container value type overly strict</h3></a><p>\n+<b>Section:</b>&nbsp;23.1 <a href=\"lib-containers.html#lib.container.requirements\"> [lib.container.requirements]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"lwg-active.html#DR\">DR</a>&nbsp; <b>Submitter:</b>&nbsp;Peter Dimov&nbsp; <b>Date:</b>&nbsp;07 Nov 2000</p>\n+<p>\n+23.1/3 states that the objects stored in a container must be\n+Assignable.  23.3.1 <a href=\"lib-containers.html#lib.map\"> [lib.map]</a>, paragraph 2,\n+states that map satisfies all requirements for a container, while in\n+the same time defining value_type as pair&lt;const Key, T&gt; - a type\n+that is not Assignable.\n+</p>\n+\n+<p>\n+It should be noted that there exists a valid and non-contradictory\n+interpretation of the current text. The wording in 23.1/3 avoids \n+mentioning value_type, referring instead to &quot;objects stored in a\n+container.&quot; One might argue that map does not store objects of\n+type map::value_type, but of map::mapped_type instead, and that the\n+Assignable requirement applies to map::mapped_type, not\n+map::value_type.\n+</p>\n+\n+<p>\n+However, this makes map a special case (other containers store objects of\n+type value_type) and the Assignable requirement is needlessly restrictive in\n+general.\n+</p>\n+\n+<p>\n+For example, the proposed resolution of active library issue \n+<a href=\"lwg-defects.html#103\">103</a> is to make set::iterator a constant iterator; this\n+means that no set operations can exploit the fact that the stored\n+objects are Assignable.\n+</p>\n+\n+<p>\n+This is related to, but slightly broader than, closed issue\n+<a href=\"lwg-closed.html#140\">140</a>.\n+</p>\n+<p><b>Proposed resolution:</b></p>\n+<p>23.1/3: Strike the trailing part of the sentence:</p>\n+    <blockquote>\n+    , and the additional requirements of Assignable types from 23.1/3\n+    </blockquote>\n+<p>so that it reads:</p>\n+    <blockquote>\n+    -3- The type of objects stored in these components must meet the \n+    requirements of CopyConstructible types (lib.copyconstructible).\n+    </blockquote>\n+\n+<p>23.1/4: Modify to make clear that this requirement is not for all \n+containers.  Change to:</p>\n+\n+<blockquote>\n+-4- Table 64 defines the Assignable requirement.  Some containers \n+require this property of the types to be stored in the container.  T is \n+the type used to instantiate the container. t is a value of T, and u is \n+a value of (possibly const) T.\n+</blockquote>\n+\n+<p>23.1, Table 65: in the first row, change &quot;T is Assignable&quot; to &quot;T is\n+CopyConstructible&quot;.</p>\n+\n+<p>23.2.1/2: Add sentence for Assignable requirement.  Change to:</p>\n+\n+<blockquote>\n+-2- A deque satisfies all of the requirements of a container and of a \n+reversible container (given in tables in lib.container.requirements) and \n+of a sequence, including the optional sequence requirements \n+(lib.sequence.reqmts).  In addition to the requirements on the stored \n+object described in 23.1[lib.container.requirements], the stored object \n+must also meet the requirements of Assignable.  Descriptions are \n+provided here only for operations on deque that are not described in one \n+of these tables or for operations where there is additional semantic \n+information.\n+</blockquote>\n+\n+<p>23.2.2/2:  Add Assignable requirement to specific methods of list.  \n+Change to:</p>\n+\n+<blockquote>\n+<p>-2- A list satisfies all of the requirements of a container and of a \n+reversible container (given in two tables in lib.container.requirements) \n+and of a sequence, including most of the the optional sequence \n+requirements (lib.sequence.reqmts). The exceptions are the operator[] \n+and at member functions, which are not provided. \n+\n+[Footnote: These member functions are only provided by containers whose \n+iterators are random access iterators. --- end foonote]\n+</p>\n+\n+<p>list does not require the stored type T to be Assignable unless the \n+following methods are instantiated:\n+\n+[Footnote: Implementors are permitted but not required to take advantage \n+of T's Assignable properties for these methods. -- end foonote]\n+</p>\n+<pre>\n+     list&lt;T,Allocator&gt;&amp; operator=(const list&lt;T,Allocator&gt;&amp;  x );\n+     template &lt;class InputIterator&gt;\n+       void assign(InputIterator first, InputIterator last);\n+     void assign(size_type n, const T&amp; t);\n+</pre>\n+\n+\n+<p>Descriptions are provided here only for operations on list that are not \n+described in one of these tables or for operations where there is \n+additional semantic information.</p>\n+</blockquote>\n+\n+<p>23.2.4/2:   Add sentence for Assignable requirement.  Change to:</p>\n+\n+<blockquote>\n+-2- A vector satisfies all of the requirements of a container and of a \n+reversible container (given in two tables in lib.container.requirements) \n+and of a sequence, including most of the optional sequence requirements \n+(lib.sequence.reqmts). The exceptions are the push_front and pop_front \n+member functions, which are not provided.  In addition to the \n+requirements on the stored object described in \n+23.1[lib.container.requirements], the stored object must also meet the \n+requirements of Assignable.  Descriptions are provided here only for \n+operations on vector that are not described in one of these tables or \n+for operations where there is additional semantic information.\n+</blockquote>\n+<p><b>Rationale:</b></p>\n+<p>list, set, multiset, map, multimap are able to store non-Assignables.\n+However, there is some concern about <tt>list&lt;T&gt;</tt>:\n+although in general there's no reason for T to be Assignable, some\n+implementations of the member functions <tt>operator=</tt> and\n+<tt>assign</tt> do rely on that requirement.  The LWG does not want\n+to forbid such implementations.</p>\n+\n+<p>Note that the type stored in a standard container must still satisfy\n+the requirements of the container's allocator; this rules out, for\n+example, such types as &quot;const int&quot;.  See issue <a href=\"lwg-defects.html#274\">274</a>\n+for more details.\n+</p>\n+\n+<p>In principle we could also relax the &quot;Assignable&quot; requirement for\n+individual <tt>vector</tt> member functions, such as\n+<tt>push_back</tt>.  However, the LWG did not see great value in such\n+selective relaxation.  Doing so would remove implementors' freedom to\n+implement <tt>vector::push_back</tt> in terms of\n+<tt>vector::insert</tt>.</p>\n+\n <hr>\n <a name=\"281\"><h3>281.&nbsp;std::min() and max() requirements overly restrictive</h3></a><p>\n <b>Section:</b>&nbsp;25.3.7 <a href=\"lib-algorithms.html#lib.alg.min.max\"> [lib.alg.min.max]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"lwg-active.html#DR\">DR</a>&nbsp; <b>Submitter:</b>&nbsp;Martin Sebor&nbsp; <b>Date:</b>&nbsp;02 Dec 2000</p>\n@@ -6015,6 +6796,54 @@ <h2>Defect Reports</h2>\n <b>-4- Requires:</b> Type T is <tt>LessThanComparable</tt> \n (20.1.2 <a href=\"lib-utilities.html#lib.lessthancomparable\"> [lib.lessthancomparable]</a>).\n </p>\n+<hr>\n+<a name=\"284\"><h3>284.&nbsp;unportable example in 20.3.7, p6</h3></a><p>\n+<b>Section:</b>&nbsp;20.3.7 <a href=\"lib-utilities.html#lib.function.pointer.adaptors\"> [lib.function.pointer.adaptors]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"lwg-active.html#DR\">DR</a>&nbsp; <b>Submitter:</b>&nbsp;Martin Sebor&nbsp; <b>Date:</b>&nbsp;26 Dec 2000</p>\n+<p>The example in 20.3.7 <a href=\"lib-utilities.html#lib.function.pointer.adaptors\"> [lib.function.pointer.adaptors]</a>, p6 shows how to use the C\n+library function <tt>strcmp()</tt> with the function pointer adapter\n+<tt>ptr_fun()</tt>. But since it's unspecified whether the C library\n+functions have <tt>extern &quot;C&quot;</tt> or <tt>extern\n+&quot;C++&quot;</tt> linkage [17.4.2.2 <a href=\"lib-intro.html#lib.using.linkage\"> [lib.using.linkage]</a>], and since\n+function pointers with different the language linkage specifications\n+(7.5 <a href=\"dcl.html#dcl.link\"> [dcl.link]</a>) are incompatible, whether this example is\n+well-formed is unspecified.\n+</p>\n+<p><b>Proposed resolution:</b></p>\n+<p>Change 20.3.7 <a href=\"lib-utilities.html#lib.function.pointer.adaptors\"> [lib.function.pointer.adaptors]</a> paragraph 6 from:</p>\n+<blockquote>\n+  <p>[<i>Example:</i>\n+</p>\n+  <pre>\n+    replace_if(v.begin(), v.end(), not1(bind2nd(ptr_fun(strcmp), &quot;C&quot;)), &quot;C++&quot;);\n+  </pre>\n+  <p>replaces each <tt>C</tt> with <tt>C++</tt> in sequence <tt>v</tt>.</p>\n+</blockquote>\n+\n+\n+<p>to:</p>\n+<blockquote>\n+  <p>[<i>Example:</i>\n+</p>\n+  <pre>\n+    int compare(const char*, const char*);\n+    replace_if(v.begin(), v.end(),\n+               not1(bind2nd(ptr_fun(compare), &quot;abc&quot;)), &quot;def&quot;);\n+  </pre>\n+  <p>replaces each <tt>abc</tt> with <tt>def</tt> in sequence <tt>v</tt>.</p>\n+</blockquote>\n+\n+<p>Also, remove footnote 215 in that same paragraph.</p>\n+\n+<p><i>[Copenhagen: Minor change in the proposed resolution.  Since this\n+issue deals in part with C and C++ linkage, it was believed to be too\n+confusing for the strings in the example to be &quot;C&quot; and &quot;C++&quot;.\n+]</i></p>\n+\n+<p><i>[Redmond: More minor changes.  Got rid of the footnote (which\n+seems to make a sweeping normative requirement, even though footnotes\n+aren't normative), and changed the sentence after the footnote so that\n+it corresponds to the new code fragment.]</i></p>\n+\n <hr>\n <a name=\"285\"><h3>285.&nbsp;minor editorial errors in fstream ctors</h3></a><p>\n <b>Section:</b>&nbsp;27.8.1.6 <a href=\"lib-iostreams.html#lib.ifstream.cons\"> [lib.ifstream.cons]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"lwg-active.html#DR\">DR</a>&nbsp; <b>Submitter:</b>&nbsp;Martin Sebor&nbsp; <b>Date:</b>&nbsp;31 Dec 2000</p>\n@@ -6694,6 +7523,125 @@ <h2>Defect Reports</h2>\n Table 82.  However, &lt;cstdio&gt; is mentioned several times within\n section 27.8 <a href=\"lib-iostreams.html#lib.file.streams\"> [lib.file.streams]</a>, including 27.8.2 <a href=\"lib-iostreams.html#lib.c.files\"> [lib.c.files]</a>.]</i></p>\n \n+<hr>\n+<a name=\"310\"><h3>310.&nbsp;Is errno a macro?</h3></a><p>\n+<b>Section:</b>&nbsp;17.4.1.2 <a href=\"lib-intro.html#lib.headers\"> [lib.headers]</a>, 19.3 <a href=\"lib-diagnostics.html#lib.errno\"> [lib.errno]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"lwg-active.html#DR\">DR</a>&nbsp; <b>Submitter:</b>&nbsp;Steve Clamage&nbsp; <b>Date:</b>&nbsp;21 Mar 2001</p>\n+  <p>\n+  Exactly how should errno be declared in a conforming C++ header?\n+  </p>\n+\n+  <p>\n+  The C standard says in 7.1.4 that it is unspecified whether errno is a\n+  macro or an identifier with external linkage.  In some implementations\n+  it can be either, depending on compile-time options.  (E.g., on\n+  Solaris in multi-threading mode, errno is a macro that expands to a\n+  function call, but is an extern int otherwise.  &quot;Unspecified&quot; allows\n+  such variability.)\n+  </p>\n+\n+  <p>The C++ standard:</p>\n+  <ul>\n+  <li>17.4.1.2 says in a note that errno must be macro in C. (false)</li>\n+  <li>17.4.3.1.3 footnote 166 says errno is reserved as an external \n+      name (true), and implies that it is an identifier.</li>\n+  <li>19.3 simply lists errno as a macro (by what reasoning?) and goes\n+      on to say that the contents of of C++ &lt;errno.h&gt; are the\n+      same as in C, begging the question.</li>\n+  <li>C.2, table 95 lists errno as a macro, without comment.</li>\n+  </ul>\n+\n+  <p>I find no other references to errno.</p>\n+\n+  <p>We should either explicitly say that errno must be a macro, even\n+  though it need not be a macro in C, or else explicitly leave it\n+  unspecified.  We also need to say something about namespace std. \n+  A user who includes &lt;cerrno&gt; needs to know whether to write\n+  <tt>errno</tt>, or <tt>::errno</tt>, or <tt>std::errno</tt>, or\n+  else &lt;cerrno&gt; is useless.</p>\n+\n+  <p>Two acceptable fixes:</p>\n+  <ul>\n+    <li><p>errno must be a macro. This is trivially satisfied by adding<br>\n+        &nbsp;&nbsp;#define errno (::std::errno)<br>\n+        to the headers if errno is not already a macro. You then always\n+        write errno without any scope qualification, and it always expands\n+        to a correct reference. Since it is always a macro, you know to\n+        avoid using errno as a local identifer.</p></li>\n+    <li><p>errno is in the global namespace. This fix is inferior, because\n+        ::errno is not guaranteed to be well-formed.</p></li>\n+  </ul>\n+\n+  <p><i>[\n+    This issue was first raised in 1999, but it slipped through \n+    the cracks.\n+  ]</i></p>\n+<p><b>Proposed resolution:</b></p>\n+  <p>Change the Note in section 17.4.1.2p5 from</p>\n+\n+    <blockquote>\n+    Note: the names defined as macros in C include the following:\n+    assert, errno, offsetof, setjmp, va_arg, va_end, and va_start.\n+    </blockquote>\n+\n+  <p>to</p>\n+\n+    <blockquote>\n+    Note: the names defined as macros in C include the following:\n+    assert, offsetof, setjmp, va_arg, va_end, and va_start.\n+    </blockquote>\n+\n+  <p>In section 19.3, change paragraph 2 from</p>\n+\n+    <blockquote>\n+    The contents are the same as the Standard C library header\n+    &lt;errno.h&gt;.\n+    </blockquote>\n+\n+  <p>to</p>\n+\n+    <blockquote>\n+    The contents are the same as the Standard C library header \n+    &lt;errno.h&gt;, except that errno shall be defined as a macro.\n+    </blockquote>\n+<p><b>Rationale:</b></p>\n+<p>C++ must not leave it up to the implementation to decide whether or\n+not a name is a macro; it must explicitly specify exactly which names\n+are required to be macros.  The only one that really works is for it\n+to be a macro.</p>\n+\n+<p><i>[Cura&ccedil;ao: additional rationale added.]</i></p>\n+\n+<hr>\n+<a name=\"311\"><h3>311.&nbsp;Incorrect wording in basic_ostream class synopsis</h3></a><p>\n+<b>Section:</b>&nbsp;27.6.2.1 <a href=\"lib-iostreams.html#lib.ostream\"> [lib.ostream]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"lwg-active.html#DR\">DR</a>&nbsp; <b>Submitter:</b>&nbsp;Andy Sawyer&nbsp; <b>Date:</b>&nbsp;21 Mar 2001</p>\n+\n+<p>In 27.6.2.1 <a href=\"lib-iostreams.html#lib.ostream\"> [lib.ostream]</a>, the synopsis of class basic_ostream says:</p>\n+\n+<pre>\n+  // partial specializationss\n+  template&lt;class traits&gt;\n+    basic_ostream&lt;char,traits&gt;&amp; operator&lt;&lt;( basic_ostream&lt;char,traits&gt;&amp;,\n+                                            const char * );\n+</pre>\n+\n+<p>Problems:</p>\n+<ul>\n+<li>Too many 's's at the end of &quot;specializationss&quot; </li>\n+<li>This is an overload, not a partial specialization</li>\n+</ul>\n+\n+<p><b>Proposed resolution:</b></p>\n+<p>In the synopsis in 27.6.2.1 <a href=\"lib-iostreams.html#lib.ostream\"> [lib.ostream]</a>, remove the \n+<i>// partial specializationss</i> comment.  Also remove the same \n+comment (correctly spelled, but still incorrect) from the synopsis in \n+27.6.2.5.4 <a href=\"lib-iostreams.html#lib.ostream.inserters.character\"> [lib.ostream.inserters.character]</a>.\n+</p>\n+\n+<p><i>[\n+Pre-Redmond: added 27.6.2.5.4 <a href=\"lib-iostreams.html#lib.ostream.inserters.character\"> [lib.ostream.inserters.character]</a> because of Martin's\n+comment in c++std-lib-8939.\n+]</i></p>\n+\n <hr>\n <a name=\"312\"><h3>312.&nbsp;Table 27 is missing headers</h3></a><p>\n <b>Section:</b>&nbsp;20 <a href=\"lib-utilities.html#lib.utilities\"> [lib.utilities]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"lwg-active.html#DR\">DR</a>&nbsp; <b>Submitter:</b>&nbsp;Martin Sebor&nbsp; <b>Date:</b>&nbsp;29 Mar 2001</p>\n@@ -6703,6 +7651,388 @@ <h2>Defect Reports</h2>\n <p><b>Proposed resolution:</b></p>\n <p>Add &lt;cstdlib&gt; and &lt;cstring&gt; to Table 27, in the same row\n as &lt;memory&gt;.</p>\n+<hr>\n+<a name=\"315\"><h3>315.&nbsp;Bad &quot;range&quot; in list::unique complexity</h3></a><p>\n+<b>Section:</b>&nbsp;23.2.2.4 <a href=\"lib-containers.html#lib.list.ops\"> [lib.list.ops]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"lwg-active.html#DR\">DR</a>&nbsp; <b>Submitter:</b>&nbsp;Andy Sawyer&nbsp; <b>Date:</b>&nbsp;1 May 2001</p>\n+<p>\n+23.2.2.4 <a href=\"lib-containers.html#lib.list.ops\"> [lib.list.ops]</a>, Para 21 describes the complexity of\n+list::unique as: &quot;If the range (last - first) is not empty, exactly\n+(last - first) -1 applications of the corresponding predicate,\n+otherwise no applications of the predicate)&quot;.\n+</p>\n+\n+<p>\n+&quot;(last - first)&quot; is not a range.\n+</p>\n+<p><b>Proposed resolution:</b></p>\n+<p>\n+Change the &quot;range&quot; from (last - first) to [first, last).\n+</p>\n+<hr>\n+<a name=\"316\"><h3>316.&nbsp;Vague text in Table 69</h3></a><p>\n+<b>Section:</b>&nbsp;23.1.2 <a href=\"lib-containers.html#lib.associative.reqmts\"> [lib.associative.reqmts]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"lwg-active.html#DR\">DR</a>&nbsp; <b>Submitter:</b>&nbsp;Martin Sebor&nbsp; <b>Date:</b>&nbsp;4 May 2001</p>\n+<p>Table 69 says this about a_uniq.insert(t):</p>\n+\n+<blockquote>\n+inserts t if and only if there is no element in the container with key\n+equivalent to the key of t. The bool component of the returned pair \n+indicates whether the insertion takes place and the iterator component of the\n+pair points to the element with key equivalent to the key of t.\n+</blockquote>\n+\n+<p>The description should be more specific about exactly how the bool component\n+indicates whether the insertion takes place.</p>\n+<p><b>Proposed resolution:</b></p>\n+<p>Change the text in question to</p>\n+\n+<blockquote>\n+...The bool component of the returned pair is true if and only if the insertion\n+takes place...\n+</blockquote>\n+<hr>\n+<a name=\"317\"><h3>317.&nbsp;Instantiation vs. specialization of facets</h3></a><p>\n+<b>Section:</b>&nbsp;22 <a href=\"lib-locales.html#lib.localization\"> [lib.localization]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"lwg-active.html#DR\">DR</a>&nbsp; <b>Submitter:</b>&nbsp;Martin Sebor&nbsp; <b>Date:</b>&nbsp;4 May 2001</p>\n+<p>\n+The localization section of the standard refers to specializations of\n+the facet templates as instantiations even though the required facets\n+are typically specialized rather than explicitly (or implicitly)\n+instantiated. In the case of ctype&lt;char&gt; and\n+ctype_byname&lt;char&gt; (and the wchar_t versions), these facets are\n+actually required to be specialized. The terminology should be\n+corrected to make it clear that the standard doesn't mandate explicit\n+instantiation (the term specialization encompasses both explicit\n+instantiations and specializations).\n+</p>\n+<p><b>Proposed resolution:</b></p>\n+<p>\n+In the following paragraphs, replace all occurrences of the word\n+instantiation or instantiations with specialization or specializations,\n+respectively:\n+</p>\n+\n+<blockquote>\n+22.1.1.1.1, p4, Table 52, 22.2.1.1, p2, 22.2.1.5, p3, 22.2.1.5.1, p5,\n+22.2.1.5.2, p10, 22.2.2, p2, 22.2.3.1, p1, 22.2.3.1.2, p1, p2 and p3, \n+22.2.4.1, p1, 22.2.4.1.2, p1, 22,2,5, p1, 22,2,6, p2, 22.2.6.3.2, p7, and\n+Footnote 242.\n+</blockquote>\n+\n+<p>And change the text in 22.1.1.1.1, p4 from</p>\n+\n+<blockquote>\n+    An implementation is required to provide those instantiations\n+    for facet templates identified as members of a category, and\n+    for those shown in Table 52:\n+</blockquote>\n+\n+<p>to</p>\n+\n+<blockquote>\n+    An implementation is required to provide those specializations...\n+</blockquote>\n+\n+<p><i>[Nathan will review these changes, and will look for places where\n+explicit specialization is necessary.]</i></p>\n+\n+<p><b>Rationale:</b></p>\n+<p>This is a simple matter of outdated language.  The language to\n+describe templates was clarified during the standardization process,\n+but the wording in clause 22 was never updated to reflect that\n+change.</p>\n+<hr>\n+<a name=\"318\"><h3>318.&nbsp;Misleading comment in definition of numpunct_byname</h3></a><p>\n+<b>Section:</b>&nbsp;22.2.3.2 <a href=\"lib-locales.html#lib.locale.numpunct.byname\"> [lib.locale.numpunct.byname]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"lwg-active.html#DR\">DR</a>&nbsp; <b>Submitter:</b>&nbsp;Martin Sebor&nbsp; <b>Date:</b>&nbsp;12 May 2001</p>\n+<p>The definition of the numpunct_byname template contains the following\n+comment:</p>\n+\n+<pre>\n+    namespace std {\n+        template &lt;class charT&gt;\n+        class numpunct_byname : public numpunct&lt;charT&gt; {\n+    // this class is specialized for char and wchar_t.\n+        ...\n+</pre>\n+\n+<p>There is no documentation of the specializations and it seems\n+conceivable that an implementation will not explicitly specialize the\n+template at all, but simply provide the primary template.</p>\n+<p><b>Proposed resolution:</b></p>\n+<p>Remove the comment from the text in 22.2.3.2 and from the proposed\n+resolution of library issue <a href=\"lwg-defects.html#228\">228</a>.</p>\n+<hr>\n+<a name=\"319\"><h3>319.&nbsp;Storage allocation wording confuses &quot;Required behavior&quot;, &quot;Requires&quot;</h3></a><p>\n+<b>Section:</b>&nbsp;18.4.1.1 <a href=\"lib-support.html#lib.new.delete.single\"> [lib.new.delete.single]</a>, 18.4.1.2 <a href=\"lib-support.html#lib.new.delete.array\"> [lib.new.delete.array]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"lwg-active.html#DR\">DR</a>&nbsp; <b>Submitter:</b>&nbsp;Beman Dawes&nbsp; <b>Date:</b>&nbsp;15 May 2001</p>\n+<p>The standard specifies 17.3.1.3 <a href=\"lib-intro.html#lib.structure.specifications\"> [lib.structure.specifications]</a> that &quot;Required\n+behavior&quot; elements describe &quot;the semantics of a function definition\n+provided by either the implementation or a C++ program.&quot;</p>\n+\n+<p>The standard specifies 17.3.1.3 <a href=\"lib-intro.html#lib.structure.specifications\"> [lib.structure.specifications]</a> that &quot;Requires&quot;\n+elements describe &quot;the preconditions for calling the function.&quot;</p>\n+\n+<p>In the sections noted below, the current wording specifies\n+&quot;Required Behavior&quot; for what are actually preconditions, and thus\n+should be specified as &quot;Requires&quot;.</p>\n+\n+<p><b>Proposed resolution:</b></p>\n+\n+<p>In 18.4.1.1 <a href=\"lib-support.html#lib.new.delete.single\"> [lib.new.delete.single]</a> Para 12 Change:</p>\n+<blockquote>\n+  <p>Required behavior: accept a value of ptr that is null or that was\n+  returned by an earlier call ...</p>\n+</blockquote>\n+<p>to:</p>\n+<blockquote>\n+  <p>Requires: the value of ptr is null or the value returned by an\n+  earlier call ...</p>\n+</blockquote>\n+\n+<p>In 18.4.1.2 <a href=\"lib-support.html#lib.new.delete.array\"> [lib.new.delete.array]</a> Para 11 Change:</p>\n+<blockquote>\n+  <p>Required behavior: accept a value of ptr that is null or that was\n+  returned by an earlier call ...</p>\n+</blockquote>\n+<p>to:</p>\n+<blockquote>\n+  <p>Requires: the value of ptr is null or the value returned by an\n+  earlier call ...</p>\n+</blockquote>\n+\n+<hr>\n+<a name=\"321\"><h3>321.&nbsp;Typo in num_get</h3></a><p>\n+<b>Section:</b>&nbsp;22.2.2.1.2 <a href=\"lib-locales.html#lib.facet.num.get.virtuals\"> [lib.facet.num.get.virtuals]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"lwg-active.html#DR\">DR</a>&nbsp; <b>Submitter:</b>&nbsp;Kevin Djang&nbsp; <b>Date:</b>&nbsp;17 May 2001</p>\n+<p>\n+Section 22.2.2.1.2 at p7 states that &quot;A length specifier is added to\n+the conversion function, if needed, as indicated in Table 56.&quot;\n+However, Table 56 uses the term &quot;length modifier&quot;, not &quot;length\n+specifier&quot;.\n+</p>\n+<p><b>Proposed resolution:</b></p>\n+<p>\n+In 22.2.2.1.2 at p7, change the text &quot;A length specifier is added ...&quot;\n+to be &quot;A length modifier is added ...&quot;\n+</p>\n+<p><b>Rationale:</b></p>\n+<p>C uses the term &quot;length modifier&quot;.  We should be consistent.</p>\n+<hr>\n+<a name=\"322\"><h3>322.&nbsp;iterator and const_iterator should have the same value type</h3></a><p>\n+<b>Section:</b>&nbsp;23.1 <a href=\"lib-containers.html#lib.container.requirements\"> [lib.container.requirements]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"lwg-active.html#DR\">DR</a>&nbsp; <b>Submitter:</b>&nbsp;Matt Austern&nbsp; <b>Date:</b>&nbsp;17 May 2001</p>\n+<p>\n+It's widely assumed that, if X is a container,\n+iterator_traits&lt;X::iterator&gt;::value_type and\n+iterator_traits&lt;X::const_iterator&gt;::value_type should both be\n+X::value_type.  However, this is nowhere stated.  The language in\n+Table 65 is not precise about the iterators' value types (it predates\n+iterator_traits), and could even be interpreted as saying that\n+iterator_traits&lt;X::const_iterator&gt;::value_type should be &quot;const\n+X::value_type&quot;.\n+</p>\n+\n+<p>Related issue: <a href=\"lwg-closed.html#279\">279</a>.</p>\n+<p><b>Proposed resolution:</b></p>\n+<p>In Table 65 (&quot;Container Requirements&quot;), change the return type for\n+X::iterator to &quot;iterator type whose value type is T&quot;.  Change the\n+return type for X::const_iterator to &quot;constant iterator type whose\n+value type is T&quot;.</p>\n+<p><b>Rationale:</b></p>\n+<p>\n+This belongs as a container requirement, rather than an iterator\n+requirement, because the whole notion of iterator/const_iterator\n+pairs is specific to containers' iterator.\n+</p>\n+<p>\n+It is existing practice that (for example) \n+iterator_traits&lt;list&lt;int&gt;::const_iterator&gt;::value_type\n+is &quot;int&quot;, rather than &quot;const int&quot;.  This is consistent with\n+the way that const pointers are handled: the standard already \n+requires that iterator_traits&lt;const int*&gt;::value_type is int.\n+</p>\n+<hr>\n+<a name=\"327\"><h3>327.&nbsp;Typo in time_get facet in table 52</h3></a><p>\n+<b>Section:</b>&nbsp;22.1.1.1.1 <a href=\"lib-locales.html#lib.locale.category\"> [lib.locale.category]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"lwg-active.html#DR\">DR</a>&nbsp; <b>Submitter:</b>&nbsp;Tiki Wan&nbsp; <b>Date:</b>&nbsp;06 Jul 2001</p>\n+<p>The <tt>wchar_t</tt> versions of <tt>time_get</tt> and\n+<tt>time_get_byname</tt> are listed incorrectly in table 52,\n+required instantiations.  In both cases the second template\n+parameter is given as OutputIterator.  It should instead be\n+InputIterator, since these are input facets.</p>\n+<p><b>Proposed resolution:</b></p>\n+<p>\n+In table 52, required instantiations, in \n+22.1.1.1.1 <a href=\"lib-locales.html#lib.locale.category\"> [lib.locale.category]</a>, change</p>\n+<pre>\n+    time_get&lt;wchar_t, OutputIterator&gt;\n+    time_get_byname&lt;wchar_t, OutputIterator&gt;\n+</pre>\n+<p>to</p>\n+<pre>\n+    time_get&lt;wchar_t, InputIterator&gt;\n+    time_get_byname&lt;wchar_t, InputIterator&gt;\n+</pre>\n+\n+<p><i>[Redmond: Very minor change in proposed resolution.  Original had\n+a typo, wchart instead of wchar_t.]</i></p>\n+\n+<hr>\n+<a name=\"328\"><h3>328.&nbsp;Bad sprintf format modifier in money_put&lt;&gt;::do_put()</h3></a><p>\n+<b>Section:</b>&nbsp;22.2.6.2.2 <a href=\"lib-locales.html#lib.locale.money.put.virtuals\"> [lib.locale.money.put.virtuals]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"lwg-active.html#DR\">DR</a>&nbsp; <b>Submitter:</b>&nbsp;Martin Sebor&nbsp; <b>Date:</b>&nbsp;07 Jul 2001</p>\n+<p>The sprintf format string , &quot;%.01f&quot; (that's the digit one), in the\n+description of the do_put() member functions of the money_put facet in\n+22.2.6.2.2, p1 is incorrect. First, the f format specifier is wrong\n+for values of type long double, and second, the precision of 01\n+doesn't seem to make sense. What was most likely intended was\n+&quot;%.0Lf&quot;., that is a precision of zero followed by the L length\n+modifier.</p>\n+<p><b>Proposed resolution:</b></p>\n+<p>Change the format string to &quot;%.0Lf&quot;.</p>\n+<p><b>Rationale:</b></p>\n+<p>Fixes an obvious typo</p>\n+<hr>\n+<a name=\"331\"><h3>331.&nbsp;bad declaration of destructor for ios_base::failure</h3></a><p>\n+<b>Section:</b>&nbsp;27.4.2.1.1 <a href=\"lib-iostreams.html#lib.ios::failure\"> [lib.ios::failure]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"lwg-active.html#DR\">DR</a>&nbsp; <b>Submitter:</b>&nbsp;PremAnand M. Rao&nbsp; <b>Date:</b>&nbsp;23 Aug 2001</p>\n+<p>\n+With the change in 17.4.4.8 <a href=\"lib-intro.html#lib.res.on.exception.handling\"> [lib.res.on.exception.handling]</a> to state\n+   &quot;An implementation may strengthen the exception-specification for a \n+    non-virtual function by removing listed exceptions.&quot;\n+(issue <a href=\"lwg-defects.html#119\">119</a>)\n+and the following declaration of ~failure() in ios_base::failure\n+</p>\n+<pre>\n+    namespace std {\n+       class ios_base::failure : public exception {\n+       public:\n+           ...\n+           virtual ~failure();\n+           ...\n+       };\n+     }\n+</pre>\n+<p>the class failure cannot be implemented since in 18.6.1 <a href=\"lib-support.html#lib.exception\"> [lib.exception]</a> the destructor of class exception has an empty\n+exception specification:</p>\n+<pre>\n+    namespace std {\n+       class exception {\n+       public:\n+         ...\n+         virtual ~exception() throw();\n+         ...\n+       };\n+     }\n+</pre>\n+<p><b>Proposed resolution:</b></p>\n+<p>Remove the declaration of ~failure().</p>\n+<p><b>Rationale:</b></p>\n+<p>The proposed resolution is consistent with the way that destructors\n+of other classes derived from <tt>exception</tt> are handled.</p>\n+<hr>\n+<a name=\"335\"><h3>335.&nbsp;minor issue with char_traits, table 37</h3></a><p>\n+<b>Section:</b>&nbsp;21.1.1 <a href=\"lib-strings.html#lib.char.traits.require\"> [lib.char.traits.require]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"lwg-active.html#DR\">DR</a>&nbsp; <b>Submitter:</b>&nbsp;Andy Sawyer&nbsp; <b>Date:</b>&nbsp;06 Sep 2001</p>\n+<p>\n+Table 37, in 21.1.1 <a href=\"lib-strings.html#lib.char.traits.require\"> [lib.char.traits.require]</a>, descibes char_traits::assign\n+as:\n+</p>\n+<pre>\n+  X::assign(c,d)   assigns c = d.\n+</pre>\n+\n+<p>And para 1 says:</p>\n+\n+<blockquote>\n+ [...] c and d denote values of type CharT [...]\n+</blockquote>\n+\n+<p>\n+Naturally, if c and d are <i>values</i>, then the assignment is\n+(effectively) meaningless. It's clearly intended that (in the case of\n+assign, at least), 'c' is intended to be a reference type.\n+</p>\n+\n+<p>I did a quick survey of the four implementations I happened to have\n+lying around, and sure enough they all have signatures:</p>\n+<pre>\n+    assign( charT&amp;, const charT&amp; );\n+</pre>\n+\n+<p>(or the equivalent). It's also described this way in Nico's book.\n+(Not to mention the synopses of char_traits&lt;char&gt; in 21.1.3.1\n+and char_traits&lt;wchar_t&gt; in 21.1.3.2...)\n+</p>\n+<p><b>Proposed resolution:</b></p>\n+<p>Add the following to 21.1.1 para 1:</p>\n+<blockquote>\n+ r denotes an lvalue of CharT\n+</blockquote>\n+\n+<p>and change the description of assign in the table to:</p>\n+<pre>\n+  X::assign(r,d)   assigns r = d\n+</pre>\n+<hr>\n+<a name=\"337\"><h3>337.&nbsp;replace_copy_if's template parameter should be InputIterator</h3></a><p>\n+<b>Section:</b>&nbsp;25.2.4 <a href=\"lib-algorithms.html#lib.alg.replace\"> [lib.alg.replace]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"lwg-active.html#DR\">DR</a>&nbsp; <b>Submitter:</b>&nbsp;Detlef Vollmann&nbsp; <b>Date:</b>&nbsp;07 Sep 2001</p>\n+<p>From c++std-edit-876:</p>\n+\n+<p>\n+In section 25.2.4 <a href=\"lib-algorithms.html#lib.alg.replace\"> [lib.alg.replace]</a> before p4: The name of the first\n+parameter of template replace_copy_if should be &quot;InputIterator&quot;\n+instead of &quot;Iterator&quot;.  According to 17.3.2.1 <a href=\"lib-intro.html#lib.type.descriptions\"> [lib.type.descriptions]</a> p1 the\n+parameter name conveys real normative meaning.\n+</p>\n+<p><b>Proposed resolution:</b></p>\n+<p>Change <tt>Iterator</tt> to <tt>InputIterator</tt>.</p>\n+<hr>\n+<a name=\"345\"><h3>345.&nbsp;type tm in &lt;cwchar&gt;</h3></a><p>\n+<b>Section:</b>&nbsp;21.4 <a href=\"lib-strings.html#lib.c.strings\"> [lib.c.strings]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"lwg-active.html#DR\">DR</a>&nbsp; <b>Submitter:</b>&nbsp;Clark Nelson&nbsp; <b>Date:</b>&nbsp;19 Oct 2001</p>\n+<p>\n+C99, and presumably amendment 1 to C90, specify that &lt;wchar.h&gt;\n+declares struct tm as an incomplete type. However, table 48 in 21.4 <a href=\"lib-strings.html#lib.c.strings\"> [lib.c.strings]</a> does not mention the type tm as being declared in\n+&lt;cwchar&gt;. Is this omission intentional or accidental?\n+</p>\n+<p><b>Proposed resolution:</b></p>\n+<p>In section 21.4 <a href=\"lib-strings.html#lib.c.strings\"> [lib.c.strings]</a>, add &quot;tm&quot; to table 48.</p>\n+<hr>\n+<a name=\"346\"><h3>346.&nbsp;Some iterator member functions should be const</h3></a><p>\n+<b>Section:</b>&nbsp;24.1 <a href=\"lib-iterators.html#lib.iterator.requirements\"> [lib.iterator.requirements]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"lwg-active.html#DR\">DR</a>&nbsp; <b>Submitter:</b>&nbsp;Jeremy Siek&nbsp; <b>Date:</b>&nbsp;20 Oct 2001</p>\n+<p>Iterator member functions and operators that do not change the state\n+of the iterator should be defined as const member functions or as\n+functions that take iterators either by const reference or by\n+value. The standard does not explicitly state which functions should\n+be const.  Since this a fairly common mistake, the following changes\n+are suggested to make this explicit.</p>\n+\n+<p>The tables almost indicate constness properly through naming: r\n+for non-const and a,b for const iterators. The following changes\n+make this more explicit and also fix a couple problems.</p>\n+<p><b>Proposed resolution:</b></p>\n+<p>In 24.1 <a href=\"lib-iterators.html#lib.iterator.requirements\"> [lib.iterator.requirements]</a> Change the first section of p9 from\n+&quot;In the following sections, a and b denote values of X...&quot; to\n+&quot;In the following sections, a and b denote values of type const X...&quot;.</p>\n+\n+<p>In Table 73, change</p>\n+<pre>\n+    a-&gt;m   U&amp;         ...\n+</pre>\n+\n+<p>to</p>\n+\n+<pre>\n+    a-&gt;m   const U&amp;   ...\n+    r-&gt;m   U&amp;         ...\n+</pre>\n+\n+<p>In Table 73 expression column, change</p>\n+\n+<pre>\n+    *a = t\n+</pre>\n+\n+<p>to</p>\n+\n+<pre>\n+    *r = t\n+</pre>\n+\n+<p><i>[Redmond: The container requirements should be reviewed to see if\n+the same problem appears there.]</i></p>\n+\n <p>----- End of document -----</p>\n </body>\n </html>"}, {"sha": "48ca669afc41915881555acabc92dc9ab599adec", "filename": "libstdc++-v3/include/bits/char_traits.h", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa2d5ba2c737dbc5e0913804d38eb1d0547be33d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa2d5ba2c737dbc5e0913804d38eb1d0547be33d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h?ref=aa2d5ba2c737dbc5e0913804d38eb1d0547be33d", "patch": "@@ -46,9 +46,13 @@\n \n namespace std \n {\n-  /// 21.1.2 Basis for explicit _Traits specialization \n-  /// NB: That for any given actual character type this definition is\n-  /// probably wrong.\n+  // 21.1.2\n+  /**\n+   *  @brief  Basis for explicit traits specializations.\n+   *\n+   *  @note  For any given actual character type, this definition is\n+   *  probably wrong.\n+  */\n   template<class _CharT>\n     struct char_traits\n     {"}, {"sha": "31711bab505d7ea576aabda2fde87a43baeccc94", "filename": "libstdc++-v3/include/bits/deque.tcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa2d5ba2c737dbc5e0913804d38eb1d0547be33d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa2d5ba2c737dbc5e0913804d38eb1d0547be33d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc?ref=aa2d5ba2c737dbc5e0913804d38eb1d0547be33d", "patch": "@@ -516,7 +516,7 @@ template <typename _Tp, typename _Alloc>\n // Nothing seems to actually use this.  According to the pattern followed by\n // the rest of the SGI code, it would be called by the deprecated insert(pos)\n // function, but that has been replaced.  We'll take our time removing this\n-// anyhow; mark for 3.3.  -pme\n+// anyhow; mark for 3.4.  -pme\n template <typename _Tp, typename _Alloc>\n   typename deque<_Tp,_Alloc>::iterator \n   deque<_Tp,_Alloc>::"}, {"sha": "1ae80f40512a60b31e1c109fe400733c8cf0ad88", "filename": "libstdc++-v3/include/bits/stl_alloc.h", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa2d5ba2c737dbc5e0913804d38eb1d0547be33d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_alloc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa2d5ba2c737dbc5e0913804d38eb1d0547be33d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_alloc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_alloc.h?ref=aa2d5ba2c737dbc5e0913804d38eb1d0547be33d", "patch": "@@ -75,7 +75,7 @@\n  *  @endif\n  *\n  *  @note The @c reallocate member functions have been deprecated for 3.2\n- *        and will be removed in 3.3.  You must define @c _GLIBCPP_DEPRECATED\n+ *        and will be removed in 3.4.  You must define @c _GLIBCPP_DEPRECATED\n  *        to make this visible in 3.2; see c++config.h.\n  *\n  *  The canonical description of these classes is in docs/html/ext/howto.html\n@@ -221,7 +221,8 @@ namespace std\n   /**\n    *  @if maint\n    *  This is used primarily (only?) in _Alloc_traits and other places to\n-   *  help provide the _Alloc_type typedef.\n+   *  help provide the _Alloc_type typedef.  All it does is forward the\n+   *  requests after some minimal checking.\n    *\n    *  This is neither \"standard\"-conforming nor \"SGI\".  The _Alloc parameter\n    *  must be \"SGI\" style.\n@@ -620,8 +621,10 @@ namespace std\n \n \n   /**\n-   *  This is a \"standard\" allocator, as per [20.4].  The private _Alloc is\n-   *  \"SGI\" style.  (See comments at the top of stl_alloc.h.)\n+   *  @brief  The \"standard\" allocator, as per [20.4].\n+   *\n+   *  The private _Alloc is \"SGI\" style.  (See comments at the top\n+   *  of stl_alloc.h.)\n    *\n    *  The underlying allocator behaves as follows.\n    *  - if __USE_MALLOC then"}, {"sha": "711d9219eb1b798fb6ca9f0127c79aeb90c358ed", "filename": "libstdc++-v3/include/bits/stl_deque.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa2d5ba2c737dbc5e0913804d38eb1d0547be33d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa2d5ba2c737dbc5e0913804d38eb1d0547be33d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h?ref=aa2d5ba2c737dbc5e0913804d38eb1d0547be33d", "patch": "@@ -1034,7 +1034,7 @@ template <typename _Tp, typename _Alloc = allocator<_Tp> >\n    *  of a %deque this operation can be done in constant time.  You should\n    *  consider using push_front(value_type()) instead.\n    *\n-   *  @note This was deprecated in 3.2 and will be removed in 3.3.  You must\n+   *  @note This was deprecated in 3.2 and will be removed in 3.4.  You must\n    *        define @c _GLIBCPP_DEPRECATED to make this visible in 3.2; see\n    *        c++config.h.\n   */\n@@ -1078,7 +1078,7 @@ template <typename _Tp, typename _Alloc = allocator<_Tp> >\n    *  of a %deque this operation can be done in constant time.  You should\n    *  consider using push_back(value_type()) instead.\n    *\n-   *  @note This was deprecated in 3.2 and will be removed in 3.3.  You must\n+   *  @note This was deprecated in 3.2 and will be removed in 3.4.  You must\n    *        define @c _GLIBCPP_DEPRECATED to make this visible in 3.2; see\n    *        c++config.h.\n   */\n@@ -1154,7 +1154,7 @@ template <typename _Tp, typename _Alloc = allocator<_Tp> >\n    *  specified location.  You should consider using\n    *  insert(position,value_type()) instead.\n    *\n-   *  @note This was deprecated in 3.2 and will be removed in 3.3.  You must\n+   *  @note This was deprecated in 3.2 and will be removed in 3.4.  You must\n    *        define @c _GLIBCPP_DEPRECATED to make this visible in 3.2; see\n    *        c++config.h.\n   */"}, {"sha": "fd066cc7e1ffd39f6b793068b662a382928cf037", "filename": "libstdc++-v3/include/bits/stl_iterator.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa2d5ba2c737dbc5e0913804d38eb1d0547be33d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa2d5ba2c737dbc5e0913804d38eb1d0547be33d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h?ref=aa2d5ba2c737dbc5e0913804d38eb1d0547be33d", "patch": "@@ -317,6 +317,8 @@ namespace std\n \n   // 24.4.2.2.1 back_insert_iterator\n   /**\n+   *  @brief  Turns assignment into insertion.\n+   *\n    *  These are output iterators, constructed from a container-of-T.\n    *  Assigning a T to the iterator appends it to the container using\n    *  push_back.\n@@ -387,6 +389,8 @@ namespace std\n     { return back_insert_iterator<_Container>(__x); }\n \n   /**\n+   *  @brief  Turns assignment into insertion.\n+   *\n    *  These are output iterators, constructed from a container-of-T.\n    *  Assigning a T to the iterator prepends it to the container using\n    *  push_front.\n@@ -456,6 +460,8 @@ namespace std\n     { return front_insert_iterator<_Container>(__x); }\n \n   /**\n+   *  @brief  Turns assignment into insertion.\n+   *\n    *  These are output iterators, constructed from a container-of-T.\n    *  Assigning a T to the iterator inserts it in the container at the\n    *  %iterator's position, rather than overwriting the value at that"}, {"sha": "e7f131280c3ad5d25d2a8dc49d768dbb533e33fb", "filename": "libstdc++-v3/include/bits/stl_iterator_base_types.h", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa2d5ba2c737dbc5e0913804d38eb1d0547be33d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa2d5ba2c737dbc5e0913804d38eb1d0547be33d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_types.h?ref=aa2d5ba2c737dbc5e0913804d38eb1d0547be33d", "patch": "@@ -68,13 +68,12 @@\n \n namespace std\n {\n-  /**\n+  /** @{\n    *  @defgroup iterator_tags Iterator Tags\n    *  These are empty types, used to distinguish different iterators.  The\n    *  distinction is not made by what they contain, but simply by what they\n    *  are.  Different underlying algorithms can then be used based on the\n    *  different operations supporetd by different iterator types.\n-   *  @{\n   */\n   ///  Marking input iterators.\n   struct input_iterator_tag {};\n@@ -90,6 +89,8 @@ namespace std\n \n \n   /**\n+   *  @brief  Common %iterator class.\n+   *\n    *  This class does nothing but define nested typedefs.  %Iterator classes\n    *  can inherit from this class to save some work.  The typedefs are then\n    *  used in specializations and overloading.\n@@ -98,8 +99,9 @@ namespace std\n    *  such as @c operator++ and the like.  (How could there be?)\n   */\n   template<typename _Category, typename _Tp, typename _Distance = ptrdiff_t,\n-\t   typename _Pointer = _Tp*, typename _Reference = _Tp&>\n-    struct iterator {\n+           typename _Pointer = _Tp*, typename _Reference = _Tp&>\n+    struct iterator\n+    {\n       /// One of the @link iterator_tags tag types@endlink.\n       typedef _Category  iterator_category;\n       /// The type \"pointed to\" by the iterator."}, {"sha": "e55c337c7f142f6ddabbd2a1a3e73a97d1c4d782", "filename": "libstdc++-v3/include/bits/stl_list.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa2d5ba2c737dbc5e0913804d38eb1d0547be33d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa2d5ba2c737dbc5e0913804d38eb1d0547be33d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h?ref=aa2d5ba2c737dbc5e0913804d38eb1d0547be33d", "patch": "@@ -715,7 +715,7 @@ template<typename _Tp, typename _Alloc = allocator<_Tp> >\n    *  of a %list this operation can be done in constant time.  You should\n    *  consider using push_front(value_type()) instead.\n    *\n-   *  @note This was deprecated in 3.2 and will be removed in 3.3.  You must\n+   *  @note This was deprecated in 3.2 and will be removed in 3.4.  You must\n    *        define @c _GLIBCPP_DEPRECATED to make this visible in 3.2; see\n    *        c++config.h.\n   */\n@@ -758,7 +758,7 @@ template<typename _Tp, typename _Alloc = allocator<_Tp> >\n    *  of a %list this operation can be done in constant time.  You should\n    *  consider using push_back(value_type()) instead.\n    *\n-   *  @note This was deprecated in 3.2 and will be removed in 3.3.  You must\n+   *  @note This was deprecated in 3.2 and will be removed in 3.4.  You must\n    *        define @c _GLIBCPP_DEPRECATED to make this visible in 3.2; see\n    *        c++config.h.\n   */\n@@ -810,7 +810,7 @@ template<typename _Tp, typename _Alloc = allocator<_Tp> >\n    *  Due to the nature of a %list this operation can be done in constant\n    *  time, and does not invalidate iterators and references.\n    *\n-   *  @note This was deprecated in 3.2 and will be removed in 3.3.  You must\n+   *  @note This was deprecated in 3.2 and will be removed in 3.4.  You must\n    *        define @c _GLIBCPP_DEPRECATED to make this visible in 3.2; see\n    *        c++config.h.\n   */"}, {"sha": "5f82d5d60953d32213f0ddc6d59266081a762c00", "filename": "libstdc++-v3/include/bits/stl_vector.h", "status": "modified", "additions": 19, "deletions": 27, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa2d5ba2c737dbc5e0913804d38eb1d0547be33d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa2d5ba2c737dbc5e0913804d38eb1d0547be33d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h?ref=aa2d5ba2c737dbc5e0913804d38eb1d0547be33d", "patch": "@@ -253,7 +253,7 @@ template <typename _Tp, typename _Alloc = allocator<_Tp> >\n   explicit\n   vector(size_type __n)\n     : _Base(__n, allocator_type())\n-    { _M_finish = uninitialized_fill_n(_M_start, __n, _Tp()); }\n+    { _M_finish = uninitialized_fill_n(_M_start, __n, value_type()); }\n \n   /**\n    *  @brief  %Vector copy constructor.\n@@ -489,7 +489,6 @@ template <typename _Tp, typename _Alloc = allocator<_Tp> >\n   */\n   reference\n   operator[](size_type __n) { return *(begin() + __n); }\n-  // XXX do we need to convert to normal_iterator first?\n \n   /**\n    *  @brief  Subscript access to the data contained in the %vector.\n@@ -545,7 +544,6 @@ template <typename _Tp, typename _Alloc = allocator<_Tp> >\n   */\n   reference\n   front() { return *begin(); }\n-  // XXX do we need to convert to normal_iterator first?\n \n   /**\n    *  Returns a read-only (constant) reference to the data at the first\n@@ -631,7 +629,7 @@ template <typename _Tp, typename _Alloc = allocator<_Tp> >\n    *  Note that this kind of operation could be expensive for a vector and if\n    *  it is frequently used the user should consider using std::list.\n    *\n-   *  @note This was deprecated in 3.2 and will be removed in 3.3.  You must\n+   *  @note This was deprecated in 3.2 and will be removed in 3.4.  You must\n    *        define @c _GLIBCPP_DEPRECATED to make this visible in 3.2; see\n    *        c++config.h.\n   */\n@@ -914,7 +912,7 @@ template <typename _Tp, typename _Alloc = allocator<_Tp> >\n */\n template <typename _Tp, typename _Alloc>\n   inline bool\n-  operator==(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)\n+  operator==(const vector<_Tp,_Alloc>& __x, const vector<_Tp,_Alloc>& __y)\n   {\n     return __x.size() == __y.size() &&\n            equal(__x.begin(), __x.end(), __y.begin());\n@@ -933,48 +931,42 @@ template <typename _Tp, typename _Alloc>\n */\n template <typename _Tp, typename _Alloc>\n   inline bool\n-  operator<(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)\n+  operator<(const vector<_Tp,_Alloc>& __x, const vector<_Tp,_Alloc>& __y)\n   {\n     return lexicographical_compare(__x.begin(), __x.end(),\n                                    __y.begin(), __y.end());\n   }\n \n /// Based on operator==\n template <typename _Tp, typename _Alloc>\n-inline bool\n-operator!=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y) {\n-  return !(__x == __y);\n-}\n+  inline bool\n+  operator!=(const vector<_Tp,_Alloc>& __x, const vector<_Tp,_Alloc>& __y)\n+  { return !(__x == __y); }\n \n /// Based on operator<\n template <typename _Tp, typename _Alloc>\n-inline bool\n-operator>(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y) {\n-  return __y < __x;\n-}\n+  inline bool\n+  operator>(const vector<_Tp,_Alloc>& __x, const vector<_Tp,_Alloc>& __y)\n+  { return __y < __x; }\n \n /// Based on operator<\n template <typename _Tp, typename _Alloc>\n-inline bool\n-operator<=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y) {\n-  return !(__y < __x);\n-}\n+  inline bool\n+  operator<=(const vector<_Tp,_Alloc>& __x, const vector<_Tp,_Alloc>& __y)\n+  { return !(__y < __x); }\n \n /// Based on operator<\n template <typename _Tp, typename _Alloc>\n-inline bool\n-operator>=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y) {\n-  return !(__x < __y);\n-}\n+  inline bool\n+  operator>=(const vector<_Tp,_Alloc>& __x, const vector<_Tp,_Alloc>& __y)\n+  { return !(__x < __y); }\n \n /// See std::vector::swap().\n template <typename _Tp, typename _Alloc>\n-inline void swap(vector<_Tp, _Alloc>& __x, vector<_Tp, _Alloc>& __y)\n-{\n-  __x.swap(__y);\n-}\n+  inline void\n+  swap(vector<_Tp,_Alloc>& __x, vector<_Tp,_Alloc>& __y)\n+  { __x.swap(__y); }\n \n } // namespace std\n \n #endif /* __GLIBCPP_INTERNAL_VECTOR_H */\n-"}, {"sha": "d76a947f7c92bca19c725a276fcff3fb9883b1ac", "filename": "libstdc++-v3/libsupc++/exception", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa2d5ba2c737dbc5e0913804d38eb1d0547be33d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa2d5ba2c737dbc5e0913804d38eb1d0547be33d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception?ref=aa2d5ba2c737dbc5e0913804d38eb1d0547be33d", "patch": "@@ -41,11 +41,13 @@ extern \"C++\" {\n \n namespace std \n {\n-  /** This is the base class for all exceptions thrown by the standard\n+  /**\n+   *  @brief Base class for all library exceptions.\n+   *\n+   *  This is the base class for all exceptions thrown by the standard\n    *  library, and by certain language expressions.  You are free to derive\n    *  your own %exception classes, or use a different hierarchy, or to\n    *  throw non-class data (e.g., fundamental types).\n-   *  @brief Base class for all library exceptions.\n    */\n   class exception \n   {"}, {"sha": "a47f4c68742123a38062488b341fdda152db2292", "filename": "libstdc++-v3/libsupc++/new", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa2d5ba2c737dbc5e0913804d38eb1d0547be33d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa2d5ba2c737dbc5e0913804d38eb1d0547be33d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew?ref=aa2d5ba2c737dbc5e0913804d38eb1d0547be33d", "patch": "@@ -45,7 +45,10 @@ extern \"C++\" {\n \n namespace std \n {\n-  /** @c bad_alloc (or classes derived from it) is used to report allocation\n+  /**\n+   *  @brief  Exception possibly thrown by @c new.\n+   *\n+   *  @c bad_alloc (or classes derived from it) is used to report allocation\n    *  errors from the throwing forms of @c new.  */\n   class bad_alloc : public exception \n   {"}, {"sha": "88a2639b8982287b73a06ac90a20779f87090ee0", "filename": "libstdc++-v3/libsupc++/typeinfo", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa2d5ba2c737dbc5e0913804d38eb1d0547be33d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftypeinfo", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa2d5ba2c737dbc5e0913804d38eb1d0547be33d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftypeinfo", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftypeinfo?ref=aa2d5ba2c737dbc5e0913804d38eb1d0547be33d", "patch": "@@ -54,9 +54,12 @@ namespace __cxxabiv1\n \n namespace std \n {\n-  /** The @c type_info class describes type information generated by\n+  /**\n+   *  @brief  Part of RTTI.\n+   *\n+   *  The @c type_info class describes type information generated by\n    *  an implementation.\n-   *  @brief Used in RTTI.  */\n+  */\n   class type_info \n   {\n   public:\n@@ -124,7 +127,10 @@ namespace std\n \t\t\t     void **__obj_ptr) const;\n   };\n \n-  /** If you attempt an invalid @c dynamic_cast expression, an instance of\n+  /**\n+   *  @brief  Thrown during incorrect typecasting.\n+   *\n+   *  If you attempt an invalid @c dynamic_cast expression, an instance of\n    *  this class (or something derived from this class) is thrown.  */\n   class bad_cast : public exception \n   {"}]}