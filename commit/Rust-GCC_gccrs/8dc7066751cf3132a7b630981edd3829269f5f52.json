{"sha": "8dc7066751cf3132a7b630981edd3829269f5f52", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGRjNzA2Njc1MWNmMzEzMmE3YjYzMDk4MWVkZDM4MjkyNjlmNWY1Mg==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2013-08-26T09:15:22Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2013-08-26T09:15:22Z"}, "message": "Really commit all changes\n\nFrom-SVN: r201989", "tree": {"sha": "71b86325dd9a382ce91469a1fede3ede8ac127c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/71b86325dd9a382ce91469a1fede3ede8ac127c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8dc7066751cf3132a7b630981edd3829269f5f52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8dc7066751cf3132a7b630981edd3829269f5f52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8dc7066751cf3132a7b630981edd3829269f5f52", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8dc7066751cf3132a7b630981edd3829269f5f52/comments", "author": null, "committer": null, "parents": [{"sha": "5339fc0c3809039e333c42269bdc6436b8f980df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5339fc0c3809039e333c42269bdc6436b8f980df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5339fc0c3809039e333c42269bdc6436b8f980df"}], "stats": {"total": 260, "additions": 128, "deletions": 132}, "files": [{"sha": "6d0c4066100e01cbcf101c9e469e0249f10c0f0e", "filename": "gcc/c-family/c-pretty-print.c", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dc7066751cf3132a7b630981edd3829269f5f52/gcc%2Fc-family%2Fc-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dc7066751cf3132a7b630981edd3829269f5f52/gcc%2Fc-family%2Fc-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pretty-print.c?ref=8dc7066751cf3132a7b630981edd3829269f5f52", "patch": "@@ -837,7 +837,7 @@ pp_c_function_definition (c_pretty_printer *pp, tree t)\n   pp_declaration_specifiers (pp, t);\n   pp_declarator (pp, t);\n   pp_needs_newline (pp) = true;\n-  pp_statement (pp, DECL_SAVED_TREE (t));\n+  pp->statement (DECL_SAVED_TREE (t));\n   pp_newline_and_flush (pp);\n }\n \n@@ -2306,15 +2306,15 @@ c_pretty_printer::expression (tree e)\n /* Statements.  */\n \n void\n-pp_c_statement (c_pretty_printer *pp, tree stmt)\n+c_pretty_printer::statement (tree stmt)\n {\n   if (stmt == NULL)\n     return;\n \n-  if (pp_needs_newline (pp))\n-    pp_newline_and_indent (pp, 0);\n+  if (pp_needs_newline (this))\n+    pp_newline_and_indent (this, 0);\n \n-  dump_generic_node (pp, stmt, pp_indentation (pp), 0, true);\n+  dump_generic_node (this, stmt, pp_indentation (this), 0, true);\n }\n \n \f\n@@ -2339,8 +2339,6 @@ c_pretty_printer::c_pretty_printer ()\n   function_specifier        = pp_c_function_specifier;\n   storage_class_specifier   = pp_c_storage_class_specifier;\n \n-  statement                 = pp_c_statement;\n-\n   initializer               = pp_c_initializer;\n }\n \n@@ -2354,7 +2352,7 @@ print_c_tree (FILE *file, tree t)\n \n   pp_needs_newline (&pp) = true;\n   pp.buffer->stream = file;\n-  pp_statement (&pp, t);\n+  pp.statement (t);\n   pp_newline_and_flush (&pp);\n }\n "}, {"sha": "62492c3bede3945448c30693b88c0b13d13516f4", "filename": "gcc/c-family/c-pretty-print.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dc7066751cf3132a7b630981edd3829269f5f52/gcc%2Fc-family%2Fc-pretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dc7066751cf3132a7b630981edd3829269f5f52/gcc%2Fc-family%2Fc-pretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pretty-print.h?ref=8dc7066751cf3132a7b630981edd3829269f5f52", "patch": "@@ -63,6 +63,9 @@ struct c_pretty_printer : pretty_printer\n   virtual void conditional_expression (tree);\n   virtual void assignment_expression (tree);\n   virtual void expression (tree);\n+\n+  virtual void statement (tree);\n+\n   /* Points to the first element of an array of offset-list.\n      Not used yet.  */\n   int *offset_list;\n@@ -86,8 +89,6 @@ struct c_pretty_printer : pretty_printer\n   c_pretty_print_fn storage_class_specifier;\n   c_pretty_print_fn initializer;\n \n-  c_pretty_print_fn statement;\n-\n };\n \n #define pp_c_tree_identifier(PPI, ID)              \\\n@@ -159,8 +160,6 @@ void pp_c_type_id (c_pretty_printer *, tree);\n void pp_c_direct_abstract_declarator (c_pretty_printer *, tree);\n void pp_c_type_specifier (c_pretty_printer *, tree);\n void pp_c_storage_class_specifier (c_pretty_printer *, tree);\n-/* Statements.  */\n-void pp_c_statement (c_pretty_printer *, tree);\n /* Expressions.  */\n void pp_c_logical_or_expression (c_pretty_printer *, tree);\n void pp_c_expression_list (c_pretty_printer *, tree);"}, {"sha": "95eb75d12cd1f3df6f556cdc050f769e0050bc88", "filename": "gcc/c/c-objc-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dc7066751cf3132a7b630981edd3829269f5f52/gcc%2Fc%2Fc-objc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dc7066751cf3132a7b630981edd3829269f5f52/gcc%2Fc%2Fc-objc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-objc-common.c?ref=8dc7066751cf3132a7b630981edd3829269f5f52", "patch": "@@ -120,7 +120,7 @@ c_tree_printer (pretty_printer *pp, text_info *text, const char *spec,\n \t  t = DECL_DEBUG_EXPR (t);\n \t  if (!DECL_P (t))\n \t    {\n-\t      pp_c_expression (cpp, t);\n+\t      pp_expression (cpp, t);\n \t      return true;\n \t    }\n \t}"}, {"sha": "38745abf079f3677c5cfdc06a273fdda9a4b4fef", "filename": "gcc/cp/cxx-pretty-print.c", "status": "modified", "additions": 116, "deletions": 119, "changes": 235, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dc7066751cf3132a7b630981edd3829269f5f52/gcc%2Fcp%2Fcxx-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dc7066751cf3132a7b630981edd3829269f5f52/gcc%2Fcp%2Fcxx-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcxx-pretty-print.c?ref=8dc7066751cf3132a7b630981edd3829269f5f52", "patch": "@@ -38,7 +38,6 @@ static void pp_cxx_direct_abstract_declarator (cxx_pretty_printer *, tree);\n static void pp_cxx_declarator (cxx_pretty_printer *, tree);\n static void pp_cxx_parameter_declaration_clause (cxx_pretty_printer *, tree);\n static void pp_cxx_abstract_declarator (cxx_pretty_printer *, tree);\n-static void pp_cxx_statement (cxx_pretty_printer *, tree);\n static void pp_cxx_template_parameter (cxx_pretty_printer *, tree);\n static void pp_cxx_cast_expression (cxx_pretty_printer *, tree);\n static void pp_cxx_typeid_expression (cxx_pretty_printer *, tree);\n@@ -442,7 +441,7 @@ cxx_pretty_printer::primary_expression (tree t)\n \n     case STMT_EXPR:\n       pp_cxx_left_paren (this);\n-      pp_cxx_statement (this, STMT_EXPR_STMT (t));\n+      statement (STMT_EXPR_STMT (t));\n       pp_cxx_right_paren (this);\n       break;\n \n@@ -1630,7 +1629,7 @@ pp_cxx_function_definition (cxx_pretty_printer *pp, tree t)\n   pp_needs_newline (pp) = true;\n   pp->enclosing_scope = DECL_CONTEXT (t);\n   if (DECL_SAVED_TREE (t))\n-    pp_cxx_statement (pp, DECL_SAVED_TREE (t));\n+    pp->statement (DECL_SAVED_TREE (t));\n   else\n     pp_cxx_semicolon (pp);\n   pp_newline_and_flush (pp);\n@@ -1805,27 +1804,27 @@ pp_cxx_exception_declaration (cxx_pretty_printer *pp, tree t)\n \n /* Statements.  */\n \n-static void\n-pp_cxx_statement (cxx_pretty_printer *pp, tree t)\n+void\n+cxx_pretty_printer::statement (tree t)\n {\n   switch (TREE_CODE (t))\n     {\n     case CTOR_INITIALIZER:\n-      pp_cxx_ctor_initializer (pp, t);\n+      pp_cxx_ctor_initializer (this, t);\n       break;\n \n     case USING_STMT:\n-      pp_cxx_ws_string (pp, \"using\");\n-      pp_cxx_ws_string (pp, \"namespace\");\n+      pp_cxx_ws_string (this, \"using\");\n+      pp_cxx_ws_string (this, \"namespace\");\n       if (DECL_CONTEXT (t))\n-\tpp_cxx_nested_name_specifier (pp, DECL_CONTEXT (t));\n-      pp_cxx_qualified_id (pp, USING_STMT_NAMESPACE (t));\n+\tpp_cxx_nested_name_specifier (this, DECL_CONTEXT (t));\n+      pp_cxx_qualified_id (this, USING_STMT_NAMESPACE (t));\n       break;\n \n     case USING_DECL:\n-      pp_cxx_ws_string (pp, \"using\");\n-      pp_cxx_nested_name_specifier (pp, USING_DECL_SCOPE (t));\n-      pp_cxx_unqualified_id (pp, DECL_NAME (t));\n+      pp_cxx_ws_string (this, \"using\");\n+      pp_cxx_nested_name_specifier (this, USING_DECL_SCOPE (t));\n+      pp_cxx_unqualified_id (this, DECL_NAME (t));\n       break;\n \n     case EH_SPEC_BLOCK:\n@@ -1834,15 +1833,15 @@ pp_cxx_statement (cxx_pretty_printer *pp, tree t)\n       /* try-block:\n \t    try compound-statement handler-seq  */\n     case TRY_BLOCK:\n-      pp_maybe_newline_and_indent (pp, 0);\n-      pp_cxx_ws_string (pp, \"try\");\n-      pp_newline_and_indent (pp, 3);\n-      pp_cxx_statement (pp, TRY_STMTS (t));\n-      pp_newline_and_indent (pp, -3);\n+      pp_maybe_newline_and_indent (this, 0);\n+      pp_cxx_ws_string (this, \"try\");\n+      pp_newline_and_indent (this, 3);\n+      statement (TRY_STMTS (t));\n+      pp_newline_and_indent (this, -3);\n       if (CLEANUP_P (t))\n \t;\n       else\n-\tpp_cxx_statement (pp, TRY_HANDLERS (t));\n+\tstatement (TRY_HANDLERS (t));\n       break;\n \n       /*\n@@ -1857,53 +1856,53 @@ pp_cxx_statement (cxx_pretty_printer *pp, tree t)\n \t    type-specifier-seq abstract-declarator\n \t    ...   */\n     case HANDLER:\n-      pp_cxx_ws_string (pp, \"catch\");\n-      pp_cxx_left_paren (pp);\n-      pp_cxx_exception_declaration (pp, HANDLER_PARMS (t));\n-      pp_cxx_right_paren (pp);\n-      pp_indentation (pp) += 3;\n-      pp_needs_newline (pp) = true;\n-      pp_cxx_statement (pp, HANDLER_BODY (t));\n-      pp_indentation (pp) -= 3;\n-      pp_needs_newline (pp) = true;\n+      pp_cxx_ws_string (this, \"catch\");\n+      pp_cxx_left_paren (this);\n+      pp_cxx_exception_declaration (this, HANDLER_PARMS (t));\n+      pp_cxx_right_paren (this);\n+      pp_indentation (this) += 3;\n+      pp_needs_newline (this) = true;\n+      statement (HANDLER_BODY (t));\n+      pp_indentation (this) -= 3;\n+      pp_needs_newline (this) = true;\n       break;\n \n       /* selection-statement:\n \t    if ( expression ) statement\n \t    if ( expression ) statement else statement  */\n     case IF_STMT:\n-      pp_cxx_ws_string (pp, \"if\");\n-      pp_cxx_whitespace (pp);\n-      pp_cxx_left_paren (pp);\n-      pp_expression (pp, IF_COND (t));\n-      pp_cxx_right_paren (pp);\n-      pp_newline_and_indent (pp, 2);\n-      pp_cxx_statement (pp, THEN_CLAUSE (t));\n-      pp_newline_and_indent (pp, -2);\n+      pp_cxx_ws_string (this, \"if\");\n+      pp_cxx_whitespace (this);\n+      pp_cxx_left_paren (this);\n+      pp_expression (this, IF_COND (t));\n+      pp_cxx_right_paren (this);\n+      pp_newline_and_indent (this, 2);\n+      statement (THEN_CLAUSE (t));\n+      pp_newline_and_indent (this, -2);\n       if (ELSE_CLAUSE (t))\n \t{\n \t  tree else_clause = ELSE_CLAUSE (t);\n-\t  pp_cxx_ws_string (pp, \"else\");\n+\t  pp_cxx_ws_string (this, \"else\");\n \t  if (TREE_CODE (else_clause) == IF_STMT)\n-\t    pp_cxx_whitespace (pp);\n+\t    pp_cxx_whitespace (this);\n \t  else\n-\t    pp_newline_and_indent (pp, 2);\n-\t  pp_cxx_statement (pp, else_clause);\n+\t    pp_newline_and_indent (this, 2);\n+\t  statement (else_clause);\n \t  if (TREE_CODE (else_clause) != IF_STMT)\n-\t    pp_newline_and_indent (pp, -2);\n+\t    pp_newline_and_indent (this, -2);\n \t}\n       break;\n \n     case SWITCH_STMT:\n-      pp_cxx_ws_string (pp, \"switch\");\n-      pp_space (pp);\n-      pp_cxx_left_paren (pp);\n-      pp_expression (pp, SWITCH_STMT_COND (t));\n-      pp_cxx_right_paren (pp);\n-      pp_indentation (pp) += 3;\n-      pp_needs_newline (pp) = true;\n-      pp_cxx_statement (pp, SWITCH_STMT_BODY (t));\n-      pp_newline_and_indent (pp, -3);\n+      pp_cxx_ws_string (this, \"switch\");\n+      pp_space (this);\n+      pp_cxx_left_paren (this);\n+      pp_expression (this, SWITCH_STMT_COND (t));\n+      pp_cxx_right_paren (this);\n+      pp_indentation (this) += 3;\n+      pp_needs_newline (this) = true;\n+      statement (SWITCH_STMT_BODY (t));\n+      pp_newline_and_indent (this, -3);\n       break;\n \n       /* iteration-statement:\n@@ -1912,70 +1911,70 @@ pp_cxx_statement (cxx_pretty_printer *pp, tree t)\n \t    for ( expression(opt) ; expression(opt) ; expression(opt) ) statement\n \t    for ( declaration expression(opt) ; expression(opt) ) statement  */\n     case WHILE_STMT:\n-      pp_cxx_ws_string (pp, \"while\");\n-      pp_space (pp);\n-      pp_cxx_left_paren (pp);\n-      pp_expression (pp, WHILE_COND (t));\n-      pp_cxx_right_paren (pp);\n-      pp_newline_and_indent (pp, 3);\n-      pp_cxx_statement (pp, WHILE_BODY (t));\n-      pp_indentation (pp) -= 3;\n-      pp_needs_newline (pp) = true;\n+      pp_cxx_ws_string (this, \"while\");\n+      pp_space (this);\n+      pp_cxx_left_paren (this);\n+      pp_expression (this, WHILE_COND (t));\n+      pp_cxx_right_paren (this);\n+      pp_newline_and_indent (this, 3);\n+      statement (WHILE_BODY (t));\n+      pp_indentation (this) -= 3;\n+      pp_needs_newline (this) = true;\n       break;\n \n     case DO_STMT:\n-      pp_cxx_ws_string (pp, \"do\");\n-      pp_newline_and_indent (pp, 3);\n-      pp_cxx_statement (pp, DO_BODY (t));\n-      pp_newline_and_indent (pp, -3);\n-      pp_cxx_ws_string (pp, \"while\");\n-      pp_space (pp);\n-      pp_cxx_left_paren (pp);\n-      pp_expression (pp, DO_COND (t));\n-      pp_cxx_right_paren (pp);\n-      pp_cxx_semicolon (pp);\n-      pp_needs_newline (pp) = true;\n+      pp_cxx_ws_string (this, \"do\");\n+      pp_newline_and_indent (this, 3);\n+      statement (DO_BODY (t));\n+      pp_newline_and_indent (this, -3);\n+      pp_cxx_ws_string (this, \"while\");\n+      pp_space (this);\n+      pp_cxx_left_paren (this);\n+      pp_expression (this, DO_COND (t));\n+      pp_cxx_right_paren (this);\n+      pp_cxx_semicolon (this);\n+      pp_needs_newline (this) = true;\n       break;\n \n     case FOR_STMT:\n-      pp_cxx_ws_string (pp, \"for\");\n-      pp_space (pp);\n-      pp_cxx_left_paren (pp);\n+      pp_cxx_ws_string (this, \"for\");\n+      pp_space (this);\n+      pp_cxx_left_paren (this);\n       if (FOR_INIT_STMT (t))\n-\tpp_cxx_statement (pp, FOR_INIT_STMT (t));\n+\tstatement (FOR_INIT_STMT (t));\n       else\n-\tpp_cxx_semicolon (pp);\n-      pp_needs_newline (pp) = false;\n-      pp_cxx_whitespace (pp);\n+\tpp_cxx_semicolon (this);\n+      pp_needs_newline (this) = false;\n+      pp_cxx_whitespace (this);\n       if (FOR_COND (t))\n-\tpp_expression (pp, FOR_COND (t));\n-      pp_cxx_semicolon (pp);\n-      pp_needs_newline (pp) = false;\n-      pp_cxx_whitespace (pp);\n+\tpp_expression (this, FOR_COND (t));\n+      pp_cxx_semicolon (this);\n+      pp_needs_newline (this) = false;\n+      pp_cxx_whitespace (this);\n       if (FOR_EXPR (t))\n-\tpp_expression (pp, FOR_EXPR (t));\n-      pp_cxx_right_paren (pp);\n-      pp_newline_and_indent (pp, 3);\n-      pp_cxx_statement (pp, FOR_BODY (t));\n-      pp_indentation (pp) -= 3;\n-      pp_needs_newline (pp) = true;\n+\tpp_expression (this, FOR_EXPR (t));\n+      pp_cxx_right_paren (this);\n+      pp_newline_and_indent (this, 3);\n+      statement (FOR_BODY (t));\n+      pp_indentation (this) -= 3;\n+      pp_needs_newline (this) = true;\n       break;\n \n     case RANGE_FOR_STMT:\n-      pp_cxx_ws_string (pp, \"for\");\n-      pp_space (pp);\n-      pp_cxx_left_paren (pp);\n-      pp_cxx_statement (pp, RANGE_FOR_DECL (t));\n-      pp_space (pp);\n-      pp_needs_newline (pp) = false;\n-      pp_colon (pp);\n-      pp_space (pp);\n-      pp_cxx_statement (pp, RANGE_FOR_EXPR (t));\n-      pp_cxx_right_paren (pp);\n-      pp_newline_and_indent (pp, 3);\n-      pp_cxx_statement (pp, FOR_BODY (t));\n-      pp_indentation (pp) -= 3;\n-      pp_needs_newline (pp) = true;\n+      pp_cxx_ws_string (this, \"for\");\n+      pp_space (this);\n+      pp_cxx_left_paren (this);\n+      statement (RANGE_FOR_DECL (t));\n+      pp_space (this);\n+      pp_needs_newline (this) = false;\n+      pp_colon (this);\n+      pp_space (this);\n+      statement (RANGE_FOR_EXPR (t));\n+      pp_cxx_right_paren (this);\n+      pp_newline_and_indent (this, 3);\n+      statement (FOR_BODY (t));\n+      pp_indentation (this) -= 3;\n+      pp_needs_newline (this) = true;\n       break;\n \n       /* jump-statement:\n@@ -1984,36 +1983,36 @@ pp_cxx_statement (cxx_pretty_printer *pp, tree t)\n \t    return expression(opt) ;  */\n     case BREAK_STMT:\n     case CONTINUE_STMT:\n-      pp_string (pp, TREE_CODE (t) == BREAK_STMT ? \"break\" : \"continue\");\n-      pp_cxx_semicolon (pp);\n-      pp_needs_newline (pp) = true;\n+      pp_string (this, TREE_CODE (t) == BREAK_STMT ? \"break\" : \"continue\");\n+      pp_cxx_semicolon (this);\n+      pp_needs_newline (this) = true;\n       break;\n \n       /* expression-statement:\n \t    expression(opt) ;  */\n     case EXPR_STMT:\n-      pp_expression (pp, EXPR_STMT_EXPR (t));\n-      pp_cxx_semicolon (pp);\n-      pp_needs_newline (pp) = true;\n+      pp_expression (this, EXPR_STMT_EXPR (t));\n+      pp_cxx_semicolon (this);\n+      pp_needs_newline (this) = true;\n       break;\n \n     case CLEANUP_STMT:\n-      pp_cxx_ws_string (pp, \"try\");\n-      pp_newline_and_indent (pp, 2);\n-      pp_cxx_statement (pp, CLEANUP_BODY (t));\n-      pp_newline_and_indent (pp, -2);\n-      pp_cxx_ws_string (pp, CLEANUP_EH_ONLY (t) ? \"catch\" : \"finally\");\n-      pp_newline_and_indent (pp, 2);\n-      pp_cxx_statement (pp, CLEANUP_EXPR (t));\n-      pp_newline_and_indent (pp, -2);\n+      pp_cxx_ws_string (this, \"try\");\n+      pp_newline_and_indent (this, 2);\n+      statement (CLEANUP_BODY (t));\n+      pp_newline_and_indent (this, -2);\n+      pp_cxx_ws_string (this, CLEANUP_EH_ONLY (t) ? \"catch\" : \"finally\");\n+      pp_newline_and_indent (this, 2);\n+      statement (CLEANUP_EXPR (t));\n+      pp_newline_and_indent (this, -2);\n       break;\n \n     case STATIC_ASSERT:\n-      pp_cxx_declaration (pp, t);\n+      pp_cxx_declaration (this, t);\n       break;\n \n     default:\n-      pp_c_statement (pp, t);\n+      c_pretty_printer::statement (t);\n       break;\n     }\n }\n@@ -2443,6 +2442,4 @@ cxx_pretty_printer::cxx_pretty_printer ()\n   abstract_declarator = (pp_fun) pp_cxx_abstract_declarator;\n   direct_abstract_declarator = (pp_fun) pp_cxx_direct_abstract_declarator;\n   simple_type_specifier = (pp_fun) pp_cxx_simple_type_specifier;\n-\n-  /* pp->statement = (pp_fun) pp_cxx_statement;  */\n }"}, {"sha": "c3bb9c8bc54b487259aab24c074478ca4f803ecb", "filename": "gcc/cp/cxx-pretty-print.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dc7066751cf3132a7b630981edd3829269f5f52/gcc%2Fcp%2Fcxx-pretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dc7066751cf3132a7b630981edd3829269f5f52/gcc%2Fcp%2Fcxx-pretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcxx-pretty-print.h?ref=8dc7066751cf3132a7b630981edd3829269f5f52", "patch": "@@ -42,6 +42,8 @@ struct cxx_pretty_printer : c_pretty_printer\n   void conditional_expression (tree);\n   void assignment_expression (tree);\n   void expression (tree);\n+  void statement (tree);\n+\n   /* This is the enclosing scope of the entity being pretty-printed.  */\n   tree enclosing_scope;\n };"}]}