{"sha": "21c43754a62409319cb9b16d11aadab4f17cff26", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjFjNDM3NTRhNjI0MDkzMTljYjliMTZkMTFhYWRhYjRmMTdjZmYyNg==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2003-06-16T12:42:48Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2003-06-16T12:42:48Z"}, "message": "fold-const.c (operand_equal_p): Consider two calls to \"const\" functions with identical non-volatile arguments...\n\n\n\t* fold-const.c (operand_equal_p): Consider two calls to \"const\"\n\tfunctions with identical non-volatile arguments to be equal.\n\tConsider the FUNCTION_DECL for the \"__builtin_foo\" form of a\n\tbuilt-in function to be equal to the \"foo\" form.\n\nCo-Authored-By: Jeff Law <law@redhat.com>\n\nFrom-SVN: r68011", "tree": {"sha": "00431f65cd8405f42fb7fe5ccfc898c415cd19e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/00431f65cd8405f42fb7fe5ccfc898c415cd19e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/21c43754a62409319cb9b16d11aadab4f17cff26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21c43754a62409319cb9b16d11aadab4f17cff26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21c43754a62409319cb9b16d11aadab4f17cff26", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21c43754a62409319cb9b16d11aadab4f17cff26/comments", "author": null, "committer": null, "parents": [{"sha": "1a9962c230aa7f24b44f3925dfc3dfba70d0880e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a9962c230aa7f24b44f3925dfc3dfba70d0880e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a9962c230aa7f24b44f3925dfc3dfba70d0880e"}], "stats": {"total": 54, "additions": 52, "deletions": 2}, "files": [{"sha": "2501744a7380743138faf4db481ca60d0a908742", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21c43754a62409319cb9b16d11aadab4f17cff26/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21c43754a62409319cb9b16d11aadab4f17cff26/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=21c43754a62409319cb9b16d11aadab4f17cff26", "patch": "@@ -1,3 +1,11 @@\n+2003-06-16  Roger Sayle  <roger@eyesopen.com>\n+\t    Jeff Law  <law@redhat.com>\n+\n+\t* fold-const.c (operand_equal_p): Consider two calls to \"const\"\n+\tfunctions with identical non-volatile arguments to be equal.\n+\tConsider the FUNCTION_DECL for the \"__builtin_foo\" form of a\n+\tbuilt-in function to be equal to the \"foo\" form.\n+\n 2003-06-16  Nathanael Nerode  <neroden@gcc.gnu.org>\n \n \t* config/rs6000/sysv4le.h: Remove target-independent comment."}, {"sha": "0e53f4152baa0067ffa752ab73a7440f67e704bc", "filename": "gcc/fold-const.c", "status": "modified", "additions": 44, "deletions": 2, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21c43754a62409319cb9b16d11aadab4f17cff26/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21c43754a62409319cb9b16d11aadab4f17cff26/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=21c43754a62409319cb9b16d11aadab4f17cff26", "patch": "@@ -1968,8 +1968,8 @@ operand_equal_p (arg0, arg1, only_const)\n \t\t\t\t  TREE_OPERAND (arg1, 0), 0));\n \n     case 'r':\n-      /* If either of the pointer (or reference) expressions we are dereferencing\n-\t contain a side effect, these cannot be equal.  */\n+      /* If either of the pointer (or reference) expressions we are\n+\t dereferencing contain a side effect, these cannot be equal.  */\n       if (TREE_SIDE_EFFECTS (arg0)\n \t  || TREE_SIDE_EFFECTS (arg1))\n \treturn 0;\n@@ -2010,10 +2010,52 @@ operand_equal_p (arg0, arg1, only_const)\n \tcase RTL_EXPR:\n \t  return rtx_equal_p (RTL_EXPR_RTL (arg0), RTL_EXPR_RTL (arg1));\n \n+\tcase CALL_EXPR:\n+\t  /* If the CALL_EXPRs call different functions, then they\n+\t     clearly can not be equal.  */\n+\t  if (! operand_equal_p (TREE_OPERAND (arg0, 0),\n+\t\t\t\t TREE_OPERAND (arg1, 0), 0))\n+\t    return 0;\n+\n+\t  /* Only consider const functions equivalent.  */\n+\t  if (TREE_CODE (TREE_OPERAND (arg0, 0)) == ADDR_EXPR)\n+\t    {\n+\t      tree fndecl = TREE_OPERAND (TREE_OPERAND (arg0, 0), 0);\n+\t      if (! (flags_from_decl_or_type (fndecl) & ECF_CONST))\n+\t\treturn 0;\n+\t    }\n+\t  else\n+\t    return 0;\n+\n+\t  /* Now see if all the arguments are the same.  operand_equal_p\n+\t     does not handle TREE_LIST, so we walk the operands here\n+\t     feeding them to operand_equal_p.  */\n+\t  arg0 = TREE_OPERAND (arg0, 1);\n+\t  arg1 = TREE_OPERAND (arg1, 1);\n+\t  while (arg0 && arg1)\n+\t    {\n+\t      if (! operand_equal_p (TREE_VALUE (arg0), TREE_VALUE (arg1), 0))\n+\t\treturn 0;\n+\n+\t      arg0 = TREE_CHAIN (arg0);\n+\t      arg1 = TREE_CHAIN (arg1);\n+\t    }\n+\n+\t  /* If we get here and both argument lists are exhausted\n+\t     then the CALL_EXPRs are equal.  */\n+\t  return ! (arg0 || arg1);\n+\n \tdefault:\n \t  return 0;\n \t}\n \n+    case 'd':\n+\t/* Consider __builtin_sqrt equal to sqrt.  */\n+\treturn TREE_CODE (arg0) == FUNCTION_DECL\n+\t       && DECL_BUILT_IN (arg0) && DECL_BUILT_IN (arg1)\n+\t       && DECL_BUILT_IN_CLASS (arg0) == DECL_BUILT_IN_CLASS (arg1)\n+\t       && DECL_FUNCTION_CODE (arg0) == DECL_FUNCTION_CODE (arg1);\n+\n     default:\n       return 0;\n     }"}]}