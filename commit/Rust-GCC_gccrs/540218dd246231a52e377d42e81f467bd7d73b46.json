{"sha": "540218dd246231a52e377d42e81f467bd7d73b46", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTQwMjE4ZGQyNDYyMzFhNTJlMzc3ZDQyZTgxZjQ2N2JkN2Q3M2I0Ng==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-10-29T20:16:57Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-10-29T20:16:57Z"}, "message": "Fix compilation errors with Clang\n\n\t* include/bits/alloc_traits.h (__cpp_lib_constexpr_dynamic_alloc):\n\tDefine.\n\t(allocator_traits::_S_construct, allocator_traits::_S_destroy)\n\t(__alloc_on_copy, __alloc_on_move, __alloc_on_swap): Use\n\t_GLIBCXX14_CONSTEXPR instead of constexpr.\n\t* include/bits/stl_construct.h (_Destroy): Likewise.\n\nFrom-SVN: r277588", "tree": {"sha": "ae4db19af38f71b34db40b668069ceac82d8f5ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae4db19af38f71b34db40b668069ceac82d8f5ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/540218dd246231a52e377d42e81f467bd7d73b46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/540218dd246231a52e377d42e81f467bd7d73b46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/540218dd246231a52e377d42e81f467bd7d73b46", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/540218dd246231a52e377d42e81f467bd7d73b46/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d0dff49ca1539e14647c04cc1bb035ef4c2780b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d0dff49ca1539e14647c04cc1bb035ef4c2780b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d0dff49ca1539e14647c04cc1bb035ef4c2780b"}], "stats": {"total": 35, "additions": 24, "deletions": 11}, "files": [{"sha": "e9908841420b90f5cb8c61a1e2ea073ec52ea270", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/540218dd246231a52e377d42e81f467bd7d73b46/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/540218dd246231a52e377d42e81f467bd7d73b46/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=540218dd246231a52e377d42e81f467bd7d73b46", "patch": "@@ -1,5 +1,12 @@\n 2019-10-29  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/bits/alloc_traits.h (__cpp_lib_constexpr_dynamic_alloc):\n+\tDefine.\n+\t(allocator_traits::_S_construct, allocator_traits::_S_destroy)\n+\t(__alloc_on_copy, __alloc_on_move, __alloc_on_swap): Use\n+\t_GLIBCXX14_CONSTEXPR instead of constexpr.\n+\t* include/bits/stl_construct.h (_Destroy): Likewise.\n+\n \t* include/Makefile.am: Add new header.\n \t* include/Makefile.in: Regenerate.\n \t* include/bits/iterator_concepts.h: New header."}, {"sha": "55211ac1d7264bd9a93c28b4f3ebc358710aea79", "filename": "libstdc++-v3/include/bits/alloc_traits.h", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/540218dd246231a52e377d42e81f467bd7d73b46/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falloc_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/540218dd246231a52e377d42e81f467bd7d73b46/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falloc_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falloc_traits.h?ref=540218dd246231a52e377d42e81f467bd7d73b46", "patch": "@@ -241,13 +241,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  = typename __construct_helper<_Tp, _Args...>::type;\n \n       template<typename _Tp, typename... _Args>\n-\tstatic constexpr _Require<__has_construct<_Tp, _Args...>>\n+\tstatic _GLIBCXX14_CONSTEXPR _Require<__has_construct<_Tp, _Args...>>\n \t_S_construct(_Alloc& __a, _Tp* __p, _Args&&... __args)\n \tnoexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))\n \t{ __a.construct(__p, std::forward<_Args>(__args)...); }\n \n       template<typename _Tp, typename... _Args>\n-\tstatic constexpr\n+\tstatic _GLIBCXX14_CONSTEXPR\n \t_Require<__and_<__not_<__has_construct<_Tp, _Args...>>,\n \t\t\t       is_constructible<_Tp, _Args...>>>\n \t_S_construct(_Alloc&, _Tp* __p, _Args&&... __args)\n@@ -256,14 +256,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t{ std::_Construct(__p, std::forward<_Args>(__args)...); }\n \n       template<typename _Alloc2, typename _Tp>\n-\tstatic constexpr auto\n+\tstatic _GLIBCXX14_CONSTEXPR auto\n \t_S_destroy(_Alloc2& __a, _Tp* __p, int)\n \tnoexcept(noexcept(__a.destroy(__p)))\n \t-> decltype(__a.destroy(__p))\n \t{ __a.destroy(__p); }\n \n       template<typename _Alloc2, typename _Tp>\n-\tstatic constexpr void\n+\tstatic _GLIBCXX14_CONSTEXPR void\n \t_S_destroy(_Alloc2&, _Tp* __p, ...)\n \tnoexcept(noexcept(__p->~_Tp()))\n \t{ std::_Destroy(__p); }\n@@ -393,6 +393,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { return _S_select(__rhs, 0); }\n     };\n \n+#if __cplusplus > 201703L\n+# define __cpp_lib_constexpr_dynamic_alloc 201907L\n+#endif\n+\n   /// Partial specialization for std::allocator.\n   template<typename _Tp>\n     struct allocator_traits<allocator<_Tp>>\n@@ -562,7 +566,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n \n   template<typename _Alloc>\n-    constexpr void\n+    _GLIBCXX14_CONSTEXPR void\n     __alloc_on_copy(_Alloc& __one, const _Alloc& __two)\n     {\n       typedef allocator_traits<_Alloc> __traits;\n@@ -594,7 +598,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n \n   template<typename _Alloc>\n-    constexpr void\n+    _GLIBCXX14_CONSTEXPR void\n     __alloc_on_move(_Alloc& __one, _Alloc& __two)\n     {\n       typedef allocator_traits<_Alloc> __traits;\n@@ -621,7 +625,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n \n   template<typename _Alloc>\n-    constexpr void\n+    _GLIBCXX14_CONSTEXPR void\n     __alloc_on_swap(_Alloc& __one, _Alloc& __two)\n     {\n       typedef allocator_traits<_Alloc> __traits;"}, {"sha": "c714148e03752edb73a69f25c8cd131327b51c9e", "filename": "libstdc++-v3/include/bits/stl_construct.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/540218dd246231a52e377d42e81f467bd7d73b46/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_construct.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/540218dd246231a52e377d42e81f467bd7d73b46/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_construct.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_construct.h?ref=540218dd246231a52e377d42e81f467bd7d73b46", "patch": "@@ -137,7 +137,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    * Destroy the object pointed to by a pointer type.\n    */\n   template<typename _Tp>\n-    _GLIBCXX_CONSTEXPR inline void\n+    _GLIBCXX14_CONSTEXPR inline void\n     _Destroy(_Tp* __pointer)\n     {\n #if __cplusplus > 201703L"}, {"sha": "c7b8e5d4ba30dc20da69b0fd451082e8a631393d", "filename": "libstdc++-v3/include/ext/alloc_traits.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/540218dd246231a52e377d42e81f467bd7d73b46/libstdc%2B%2B-v3%2Finclude%2Fext%2Falloc_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/540218dd246231a52e377d42e81f467bd7d73b46/libstdc%2B%2B-v3%2Finclude%2Fext%2Falloc_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Falloc_traits.h?ref=540218dd246231a52e377d42e81f467bd7d73b46", "patch": "@@ -76,7 +76,8 @@ template<typename _Alloc, typename = typename _Alloc::value_type>\n   public:\n     // overload construct for non-standard pointer types\n     template<typename _Ptr, typename... _Args>\n-      static constexpr std::__enable_if_t<__is_custom_pointer<_Ptr>::value>\n+      static _GLIBCXX14_CONSTEXPR\n+      std::__enable_if_t<__is_custom_pointer<_Ptr>::value>\n       construct(_Alloc& __a, _Ptr __p, _Args&&... __args)\n       noexcept(noexcept(_Base_type::construct(__a, std::__to_address(__p),\n \t\t\t\t\t      std::forward<_Args>(__args)...)))\n@@ -87,15 +88,16 @@ template<typename _Alloc, typename = typename _Alloc::value_type>\n \n     // overload destroy for non-standard pointer types\n     template<typename _Ptr>\n-      static constexpr std::__enable_if_t<__is_custom_pointer<_Ptr>::value>\n+      static _GLIBCXX14_CONSTEXPR\n+      std::__enable_if_t<__is_custom_pointer<_Ptr>::value>\n       destroy(_Alloc& __a, _Ptr __p)\n       noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p))))\n       { _Base_type::destroy(__a, std::__to_address(__p)); }\n \n     static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)\n     { return _Base_type::select_on_container_copy_construction(__a); }\n \n-    static constexpr void _S_on_swap(_Alloc& __a, _Alloc& __b)\n+    static _GLIBCXX14_CONSTEXPR void _S_on_swap(_Alloc& __a, _Alloc& __b)\n     { std::__alloc_on_swap(__a, __b); }\n \n     static constexpr bool _S_propagate_on_copy_assign()"}]}