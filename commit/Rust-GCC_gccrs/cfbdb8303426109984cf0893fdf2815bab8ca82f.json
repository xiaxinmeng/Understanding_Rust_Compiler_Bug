{"sha": "cfbdb8303426109984cf0893fdf2815bab8ca82f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2ZiZGI4MzAzNDI2MTA5OTg0Y2YwODkzZmRmMjgxNWJhYjhjYTgyZg==", "commit": {"author": {"name": "Jason Eckhardt", "email": "jle@rice.edu", "date": "2003-08-23T02:11:38Z"}, "committer": {"name": "Jason Eckhardt", "email": "jle@gcc.gnu.org", "date": "2003-08-23T02:11:38Z"}, "message": "i860-protos.h (i860_va_start): Remove 'stdarg_p' argument.\n\n2003-08-22  Jason Eckhardt  <jle@rice.edu>\n\n\t* config/i860/i860-protos.h (i860_va_start): Remove 'stdarg_p'\n\targument.\n\t(tdesc_section): Add prototype.\n\tUpdate copyright dates.\n\t* config/i860/i860.c: Include coretypes.h, tm.h, and toplev.h.\n\t(TARGET_ASM_FUNCTION_PROLOGUE): Move definition to end of file.\n\t(TARGET_ASM_FUNCTION_EPILOGUE): Likewise.\n\t(targetm): Likewise.\n\t(i860_output_function_prologue): Substitute HOST_WIDE_INT_PRINT_DEC\n\tfor '%d' where necessary.\n\t(i860_va_start): Remove 'stdarg_p' argument.  Make conditional checks\n\ton 'stdarg_p' unconditional.  Divide current_function_args_info.ints\n\tby UNITS_PER_WORD when referencing (likewise for .floats).\n\t(I860_SVR4_VARARGS): Rename...\n\t(I860_SVR4_VA_LIST): ...to this.\n\tCall build() with 't' rather than 'field'.\n\t(i860_rtx_costs): New function.\n\t(TARGET_RTX_COSTS): Define.\n\t(i860_internal_label): New function.\n\t(TARGET_ASM_INTERNAL_LABEL): Define.\n\t(i860_file_start): New function.\n\tUpdate copyright dates.\n\t* config/i860/i860.h (CPP_PREDEFINES): Remove.\n\t(TARGET_CPU_CPP_BUILTINS): Define.\n\t(EXPAND_BUILTIN_VA_START): Remove 'stdarg' argument.\n\t(CONST_COSTS): Remove (and move code to i860_rtx_costs).\n\t(ASM_FILE_START): Remove.\n\t(ASM_FILE_START_1): Remove.\n\t(ASM_GLOBALIZE_LABEL): Remove.\n\t(ASM_OUTPUT_INTERNAL_LABEL): Remove.\n\t(ASM_OUTPUT_CASE_LABEL): Replace call of ASM_OUTPUT_INTERNAL_LABEL\n\twith targetm.asm_out.internal_label.\n\tUpdate copyright dates.\n\t* config/i860/sysv4.h (USER_LABEL_PREFIX): Define.\n\t(CPP_PREDEFINES): Remove.\n\t(TARGET_OS_CPP_BUILTINS): Define.\n\t(GLOBAL_ASM_OP): Define.\n\t(ASM_FILE_START): Remove.\n\t(TARGET_ASM_FILE_START_FILE_DIRECTIVE): Define.\n\t(TARGET_ASM_FILE_START): Define.\n\tUpdate copyright dates.\n\nFrom-SVN: r70722", "tree": {"sha": "a0f26d09d7351c23cec6b3732970daf4d9d71df4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a0f26d09d7351c23cec6b3732970daf4d9d71df4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cfbdb8303426109984cf0893fdf2815bab8ca82f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfbdb8303426109984cf0893fdf2815bab8ca82f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cfbdb8303426109984cf0893fdf2815bab8ca82f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfbdb8303426109984cf0893fdf2815bab8ca82f/comments", "author": null, "committer": null, "parents": [{"sha": "35f73a73cc11da55ba1f4201a814291fbd7833b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35f73a73cc11da55ba1f4201a814291fbd7833b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35f73a73cc11da55ba1f4201a814291fbd7833b5"}], "stats": {"total": 243, "additions": 156, "deletions": 87}, "files": [{"sha": "2f14480c978a2dae1a5e79eedbfab05d5ee6a959", "filename": "gcc/ChangeLog", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfbdb8303426109984cf0893fdf2815bab8ca82f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfbdb8303426109984cf0893fdf2815bab8ca82f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cfbdb8303426109984cf0893fdf2815bab8ca82f", "patch": "@@ -1,3 +1,47 @@\n+2003-08-22  Jason Eckhardt  <jle@rice.edu>\n+\n+\t* config/i860/i860-protos.h (i860_va_start): Remove 'stdarg_p'\n+\targument.\n+\t(tdesc_section): Add prototype.\n+\tUpdate copyright dates.\n+\t* config/i860/i860.c: Include coretypes.h, tm.h, and toplev.h.\n+\t(TARGET_ASM_FUNCTION_PROLOGUE): Move definition to end of file.\n+\t(TARGET_ASM_FUNCTION_EPILOGUE): Likewise.\n+\t(targetm): Likewise.\n+\t(i860_output_function_prologue): Substitute HOST_WIDE_INT_PRINT_DEC\n+\tfor '%d' where necessary.\n+\t(i860_va_start): Remove 'stdarg_p' argument.  Make conditional checks\n+\ton 'stdarg_p' unconditional.  Divide current_function_args_info.ints\n+\tby UNITS_PER_WORD when referencing (likewise for .floats).\n+\t(I860_SVR4_VARARGS): Rename...\n+\t(I860_SVR4_VA_LIST): ...to this.\n+\tCall build() with 't' rather than 'field'.\n+\t(i860_rtx_costs): New function.\n+\t(TARGET_RTX_COSTS): Define.\n+\t(i860_internal_label): New function.\n+\t(TARGET_ASM_INTERNAL_LABEL): Define.\n+\t(i860_file_start): New function.\n+\tUpdate copyright dates.\n+\t* config/i860/i860.h (CPP_PREDEFINES): Remove.\n+\t(TARGET_CPU_CPP_BUILTINS): Define.\n+\t(EXPAND_BUILTIN_VA_START): Remove 'stdarg' argument.\n+\t(CONST_COSTS): Remove (and move code to i860_rtx_costs).\n+\t(ASM_FILE_START): Remove.\n+\t(ASM_FILE_START_1): Remove.\n+\t(ASM_GLOBALIZE_LABEL): Remove.\n+\t(ASM_OUTPUT_INTERNAL_LABEL): Remove.\n+\t(ASM_OUTPUT_CASE_LABEL): Replace call of ASM_OUTPUT_INTERNAL_LABEL\n+\twith targetm.asm_out.internal_label.\n+\tUpdate copyright dates.\n+\t* config/i860/sysv4.h (USER_LABEL_PREFIX): Define.\n+\t(CPP_PREDEFINES): Remove.\n+\t(TARGET_OS_CPP_BUILTINS): Define.\n+\t(GLOBAL_ASM_OP): Define.\n+\t(ASM_FILE_START): Remove.\n+\t(TARGET_ASM_FILE_START_FILE_DIRECTIVE): Define.\n+\t(TARGET_ASM_FILE_START): Define.\n+\tUpdate copyright dates.\n+\n 2003-08-22  Jason Eckhardt  <jle@rice.edu>\n \n \t* config.gcc (i860-*-sysv4*): Add target."}, {"sha": "484f97acf43dc45da409f73b55900d4a8a2ccdcc", "filename": "gcc/config/i860/i860-protos.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfbdb8303426109984cf0893fdf2815bab8ca82f/gcc%2Fconfig%2Fi860%2Fi860-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfbdb8303426109984cf0893fdf2815bab8ca82f/gcc%2Fconfig%2Fi860%2Fi860-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fi860-protos.h?ref=cfbdb8303426109984cf0893fdf2815bab8ca82f", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler, for Intel 860.\n-   Copyright (C) 2000 Free Software Foundation, Inc.\n+   Copyright (C) 2000, 2003 Free Software Foundation, Inc.\n    Hacked substantially by Ron Guilmette (rfg@monkeys.com) to cater to\n    the whims of the System V Release 4 assembler.\n \n@@ -51,11 +51,14 @@ extern int logic_int PARAMS ((rtx, enum machine_mode));\n extern int call_insn_operand PARAMS ((rtx, enum machine_mode));\n extern rtx i860_saveregs PARAMS ((void));\n #ifdef TREE_CODE\n-extern void i860_va_start PARAMS ((int, tree, rtx));\n+extern void i860_va_start PARAMS ((tree, rtx));\n extern rtx i860_va_arg PARAMS ((tree, tree));\n #endif /* TREE_CODE */\n #endif /* RTX_CODE */\n \n #ifdef TREE_CODE\n extern tree i860_build_va_list PARAMS ((void));\n #endif /* TREE_CODE */\n+\n+extern void tdesc_section (void);\n+"}, {"sha": "ebef1fcd3dbbba50adcdf9fde75eb93b87583b76", "filename": "gcc/config/i860/i860.c", "status": "modified", "additions": 76, "deletions": 25, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfbdb8303426109984cf0893fdf2815bab8ca82f/gcc%2Fconfig%2Fi860%2Fi860.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfbdb8303426109984cf0893fdf2815bab8ca82f/gcc%2Fconfig%2Fi860%2Fi860.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fi860.c?ref=cfbdb8303426109984cf0893fdf2815bab8ca82f", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines for insn-output.c for Intel 860\n-   Copyright (C) 1989, 1991, 1997, 1998, 1999, 2000, 2001, 2002\n+   Copyright (C) 1989, 1991, 1997, 1998, 1999, 2000, 2001, 2002, 2003\n    Free Software Foundation, Inc.\n    Derived from sparc.c.\n \n@@ -28,6 +28,8 @@ Boston, MA 02111-1307, USA.  */\n \n #include \"config.h\"\n #include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n #include \"flags.h\"\n #include \"rtl.h\"\n #include \"tree.h\"\n@@ -41,6 +43,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"insn-attr.h\"\n #include \"function.h\"\n #include \"expr.h\"\n+#include \"toplev.h\"\n #include \"tm_p.h\"\n #include \"target.h\"\n #include \"target-def.h\"\n@@ -64,14 +67,6 @@ const char *i860_reg_prefix = I860_REG_PREFIX;\n \n rtx i860_compare_op0, i860_compare_op1;\n \f\n-/* Initialize the GCC target structure.  */\n-#undef TARGET_ASM_FUNCTION_PROLOGUE\n-#define TARGET_ASM_FUNCTION_PROLOGUE i860_output_function_prologue\n-#undef TARGET_ASM_FUNCTION_EPILOGUE\n-#define TARGET_ASM_FUNCTION_EPILOGUE i860_output_function_epilogue\n-\n-struct gcc_target targetm = TARGET_INITIALIZER;\n-\f\n /* Return non-zero if this pattern, can be evaluated safely, even if it\n    was not asked for.  */\n int\n@@ -1717,7 +1712,7 @@ i860_output_function_prologue (asm_file, local_bytes)\n       /* Adjust the stack pointer.  The ABI sez to do this using `adds',\n \t but the native C compiler on svr4 uses `addu'.  */\n \n-      fprintf (asm_file, \"\\taddu -%d,%ssp,%ssp\\n\",\n+      fprintf (asm_file, \"\\taddu -\" HOST_WIDE_INT_PRINT_DEC \",%ssp,%ssp\\n\",\n \tframe_upper_bytes, i860_reg_prefix, i860_reg_prefix);\n \n       /* Save the old frame pointer.  */\n@@ -1734,9 +1729,9 @@ i860_output_function_prologue (asm_file, local_bytes)\n \n       /* Get the value of frame_lower_bytes into r31.  */\n \n-      fprintf (asm_file, \"\\torh %d,%sr0,%sr31\\n\",\n+      fprintf (asm_file, \"\\torh \" HOST_WIDE_INT_PRINT_DEC \",%sr0,%sr31\\n\",\n \tframe_lower_bytes >> 16, i860_reg_prefix, i860_reg_prefix);\n-      fprintf (asm_file, \"\\tor %d,%sr31,%sr31\\n\",\n+      fprintf (asm_file, \"\\tor \" HOST_WIDE_INT_PRINT_DEC \",%sr31,%sr31\\n\",\n \tframe_lower_bytes & 0xffff, i860_reg_prefix, i860_reg_prefix);\n \n       /* Now re-adjust the stack pointer using the value in r31.\n@@ -1774,20 +1769,20 @@ i860_output_function_prologue (asm_file, local_bytes)\n       /* Adjust the stack pointer.  The ABI sez to do this using `adds',\n \t but the native C compiler on svr4 uses `addu'.  */\n \n-      fprintf (asm_file, \"\\taddu -%d,%ssp,%ssp\\n\",\n+      fprintf (asm_file, \"\\taddu -\" HOST_WIDE_INT_PRINT_DEC \",%ssp,%ssp\\n\",\n \ttotal_fsize, i860_reg_prefix, i860_reg_prefix);\n \n       /* Save the old frame pointer.  */\n \n-      fprintf (asm_file, \"\\tst.l %sfp,%d(%ssp)\\n\",\n+      fprintf (asm_file, \"\\tst.l %sfp,\" HOST_WIDE_INT_PRINT_DEC \"(%ssp)\\n\",\n \ti860_reg_prefix, frame_lower_bytes, i860_reg_prefix);\n \n       /* Setup the new frame pointer.  The ABI sez to do this after\n \t preserving registers and after saving the return address,\n \t(and its saz to do this using adds), but that's not what the\n \t native C compiler on svr4 does.  */\n \n-      fprintf (asm_file, \"\\taddu %d,%ssp,%sfp\\n\",\n+      fprintf (asm_file, \"\\taddu \" HOST_WIDE_INT_PRINT_DEC \",%ssp,%sfp\\n\",\n \tframe_lower_bytes, i860_reg_prefix, i860_reg_prefix);\n \n       /* Preserve registers.  The ABI sez to do this before setting\n@@ -2060,7 +2055,7 @@ i860_output_function_epilogue (asm_file, local_bytes)\n \n   /* Get the value we plan to use to restore the stack pointer into r31.  */\n \n-  fprintf (asm_file, \"\\tadds %d,%sfp,%sr31\\n\",\n+  fprintf (asm_file, \"\\tadds \" HOST_WIDE_INT_PRINT_DEC \",%sfp,%sr31\\n\",\n     frame_upper_bytes, i860_reg_prefix, i860_reg_prefix);\n \n   /* Restore the return address and the old frame pointer.  */\n@@ -2173,18 +2168,15 @@ i860_build_va_list ()\n }\n \n void\n-i860_va_start (stdarg_p, valist, nextarg)\n-     int stdarg_p;\n-     tree valist;\n-     rtx nextarg;\n+i860_va_start (tree valist, rtx nextarg)\n {\n   tree saveregs, t;\n \n   saveregs = make_tree (build_pointer_type (va_list_type_node),\n \t\t\texpand_builtin_saveregs ());\n   saveregs = build1 (INDIRECT_REF, va_list_type_node, saveregs);\n \n-  if (stdarg_p)\n+  if (1 /* stdarg_p */)\n     {\n       tree field_ireg_used, field_freg_used, field_reg_base, field_mem_ptr;\n       tree ireg_used, freg_used, reg_base, mem_ptr;\n@@ -2210,12 +2202,12 @@ i860_va_start (stdarg_p, valist, nextarg)\n       mem_ptr = build (COMPONENT_REF, TREE_TYPE (field_mem_ptr),\n \t\t       valist, field_mem_ptr);\n \n-      t = build_int_2 (current_function_args_info.ints, 0);\n+      t = build_int_2 (current_function_args_info.ints / UNITS_PER_WORD, 0);\n       t = build (MODIFY_EXPR, TREE_TYPE (ireg_used), ireg_used, t);\n       TREE_SIDE_EFFECTS (t) = 1;\n       expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n       \n-      t = build_int_2 (ROUNDUP (current_function_args_info.floats, 8), 0);\n+      t = build_int_2 (ROUNDUP ((current_function_args_info.floats / UNITS_PER_WORD), 8), 0);\n       t = build (MODIFY_EXPR, TREE_TYPE (freg_used), freg_used, t);\n       TREE_SIDE_EFFECTS (t) = 1;\n       expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n@@ -2241,7 +2233,7 @@ i860_va_start (stdarg_p, valist, nextarg)\n \n #define NUM_PARM_FREGS\t8\n #define NUM_PARM_IREGS\t12\n-#ifdef I860_SVR4_VARARGS\n+#ifdef I860_SVR4_VA_LIST\n #define FREG_OFFSET 0\n #define IREG_OFFSET (NUM_PARM_FREGS * UNITS_PER_WORD)\n #else\n@@ -2316,7 +2308,7 @@ i860_va_arg (valist, type)\n \t\t       build_int_2 (incr, 0)));\n       TREE_SIDE_EFFECTS (t) = 1;\n \n-      t = fold (build (MULT_EXPR, TREE_TYPE (field), field,\n+      t = fold (build (MULT_EXPR, TREE_TYPE (field), t /* field */,\n \t\t       build_int_2 (UNITS_PER_WORD, 0)));\n       TREE_SIDE_EFFECTS (t) = 1;\n       \n@@ -2359,3 +2351,62 @@ i860_va_arg (valist, type)\n \n   return ret;\n }\n+\n+\n+/* Compute a (partial) cost for rtx X.  Return true if the complete\n+   cost has been computed, and false if subexpressions should be\n+   scanned.  In either case, *TOTAL contains the cost result.  */\n+\n+static bool\n+i860_rtx_costs (rtx x, int code, int outer_code ATTRIBUTE_UNUSED, int *total)\n+{\n+  switch (code)\n+    {\n+    case CONST_INT:\n+      if (INTVAL (x) == 0)\n+        *total = 0;\n+      else if (INTVAL (x) < 0x2000 && INTVAL (x) >= -0x2000)\n+        *total = 1;\n+      return true;\n+    case CONST:\n+    case LABEL_REF:\n+    case SYMBOL_REF:\n+      *total = 4;\n+      return true;\n+    case CONST_DOUBLE:\n+      *total = 6;\n+      return true;\n+    default:\n+      return false;\n+    }\n+}\n+\n+static void\n+i860_internal_label (FILE *stream, const char *prefix, unsigned long labelno)\n+{\n+  fprintf (stream, \".%s%ld:\\n\", prefix, labelno);\n+}\n+\n+static void\n+i860_file_start (void)\n+{\n+  output_file_directive (asm_out_file, main_input_filename);\n+  fprintf (asm_out_file, \"\\t.version\\t\\\"01.01\\\"\\n\");\n+}\n+\n+\n+/* Initialize the GCC target structure.  */\n+#undef TARGET_RTX_COSTS\n+#define TARGET_RTX_COSTS i860_rtx_costs\n+\n+#undef  TARGET_ASM_INTERNAL_LABEL\n+#define TARGET_ASM_INTERNAL_LABEL i860_internal_label\n+\n+#undef TARGET_ASM_FUNCTION_PROLOGUE\n+#define TARGET_ASM_FUNCTION_PROLOGUE i860_output_function_prologue\n+\n+#undef TARGET_ASM_FUNCTION_EPILOGUE\n+#define TARGET_ASM_FUNCTION_EPILOGUE i860_output_function_epilogue\n+\n+struct gcc_target targetm = TARGET_INITIALIZER;\n+"}, {"sha": "83f2186aeb1bb984966e6716174885b9c7a1350e", "filename": "gcc/config/i860/i860.h", "status": "modified", "additions": 11, "deletions": 52, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfbdb8303426109984cf0893fdf2815bab8ca82f/gcc%2Fconfig%2Fi860%2Fi860.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfbdb8303426109984cf0893fdf2815bab8ca82f/gcc%2Fconfig%2Fi860%2Fi860.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fi860.h?ref=cfbdb8303426109984cf0893fdf2815bab8ca82f", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler, for Intel 860.\n    Copyright (C) 1989, 1991, 1993, 1995, 1996, 1997, 1998, 1999, 2000,\n-   2001, 2002 Free Software Foundation, Inc.\n+   2001, 2002, 2003 Free Software Foundation, Inc.\n    Hacked substantially by Ron Guilmette (rfg@monkeys.com) to cater to\n    the whims of the System V Release 4 assembler.\n \n@@ -27,8 +27,12 @@ Boston, MA 02111-1307, USA.  */\n \n \n /* Names to predefine in the preprocessor for this target machine.  */\n-\n-#define CPP_PREDEFINES \"-Di860 -Dunix -Asystem=unix -Asystem=svr4 -Acpu=i860 -Amachine=i860\"\n+#define TARGET_CPU_CPP_BUILTINS()               \\\n+do {                                            \\\n+        builtin_define (\"i860\");                \\\n+        builtin_assert (\"cpu=i860\");            \\\n+        builtin_assert (\"machine=i860\");        \\\n+} while (0)\n \n /* Print subsidiary information on the compiler version in use.  */\n #define TARGET_VERSION fprintf (stderr, \" (i860)\");\n@@ -572,8 +576,8 @@ struct cumulative_args { int ints, floats; };\n   (VALIST) = i860_build_va_list ()\n \n /* Implement `va_start' for varargs and stdarg.  */\n-#define EXPAND_BUILTIN_VA_START(stdarg, valist, nextarg) \\\n-  i860_va_start (stdarg, valist, nextarg)\n+#define EXPAND_BUILTIN_VA_START(valist, nextarg) \\\n+  i860_va_start (valist, nextarg)\n \n /* Implement `va_arg'.  */\n #define EXPAND_BUILTIN_VA_ARG(valist, type) \\\n@@ -885,23 +889,6 @@ struct cumulative_args { int ints, floats; };\n    but a CALL with constant address is cheap.  */\n #define NO_FUNCTION_CSE\n \n-/* Compute the cost of computing a constant rtl expression RTX\n-   whose rtx-code is CODE.  The body of this macro is a portion\n-   of a switch statement.  If the code is computed here,\n-   return it with a return statement.  Otherwise, break from the switch.  */\n-\n-#define CONST_COSTS(RTX,CODE, OUTER_CODE)\t\t\t\\\n-  case CONST_INT:\t\t\t\t\t\t\\\n-    if (INTVAL (RTX) == 0)\t\t\t\t\t\\\n-      return 0;\t\t\t\t\t\t\t\\\n-    if (INTVAL (RTX) < 0x2000 && INTVAL (RTX) >= -0x2000) return 1; \\\n-  case CONST:\t\t\t\t\t\t\t\\\n-  case LABEL_REF:\t\t\t\t\t\t\\\n-  case SYMBOL_REF:\t\t\t\t\t\t\\\n-    return 4;\t\t\t\t\t\t\t\\\n-  case CONST_DOUBLE:\t\t\t\t\t\t\\\n-    return 6;\n-\n /* Specify the cost of a branch insn; roughly the number of extra insns that\n    should be added to avoid a branch.\n \n@@ -958,19 +945,6 @@ struct cumulative_args { int ints, floats; };\n \n #define ASM_DOUBLE \"\\t.double\"\n \n-/* Output at beginning of assembler file.  */\n-/* The .file command should always begin the output.  */\n-\n-#define ASM_FILE_START(FILE)\n-#if 0\n-#define ASM_FILE_START(FILE)\t\t\t\t\t\\\n-  do { output_file_directive ((FILE), main_input_filename);\t\\\n-       if (optimize) ASM_FILE_START_1 (FILE);\t\t\t\\\n-     } while (0)\n-#endif\n-\n-#define ASM_FILE_START_1(FILE)\n-\n /* Output to assembler file text saying following lines\n    may contain character constants, extra white space, comments, etc.  */\n \n@@ -1008,36 +982,21 @@ struct cumulative_args { int ints, floats; };\n #define ASM_OUTPUT_LABEL(FILE,NAME)\t\\\n   do { assemble_name (FILE, NAME); fputs (\":\\n\", FILE); } while (0)\n \n-/* This is how to output a command to make the user-level label named NAME\n-   defined for reference from other files.  */\n-\n-#define ASM_GLOBALIZE_LABEL(FILE,NAME)\t\t\t\t\t\\\n-  do { fputs (\".globl \", FILE);\t\t\t\t\t\\\n-\tassemble_name (FILE, NAME);\t\t\t\t\t\\\n-\tfputs (\"\\n\", FILE);\t\t\t\t\t\t\\\n-  } while (0)\n-\n /* The prefix to add to user-visible assembler symbols.\n \n-   This definition is overridden in i860v4.h because under System V\n+   This definition is overridden in i860/sysv4.h because under System V\n    Release 4, user-level symbols are *not* prefixed with underscores in\n    the generated assembly code.  */\n \n #define USER_LABEL_PREFIX \"_\"\n \n-/* This is how to output an internal numbered label where\n-   PREFIX is the class of label and NUM is the number within the class.  */\n-\n-#define ASM_OUTPUT_INTERNAL_LABEL(FILE,PREFIX,NUM)\t\\\n-  fprintf (FILE, \".%s%d:\\n\", PREFIX, NUM)\n-\n /* This is how to output an internal numbered label which\n    labels a jump table.  */\n \n #undef ASM_OUTPUT_CASE_LABEL\n #define ASM_OUTPUT_CASE_LABEL(FILE, PREFIX, NUM, JUMPTABLE)\t\t\\\n do { ASM_OUTPUT_ALIGN ((FILE), 2);\t\t\t\t\t\\\n-     ASM_OUTPUT_INTERNAL_LABEL ((FILE), PREFIX, NUM);\t\t\t\\\n+     (*targetm.asm_out.internal_label) ((FILE), PREFIX, NUM);\t\t\\\n    } while (0)\n \n /* Output at the end of a jump table.  */"}, {"sha": "9de3c89780906dc3c701196df9ce551d42005cc1", "filename": "gcc/config/i860/sysv4.h", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfbdb8303426109984cf0893fdf2815bab8ca82f/gcc%2Fconfig%2Fi860%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfbdb8303426109984cf0893fdf2815bab8ca82f/gcc%2Fconfig%2Fi860%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fsysv4.h?ref=cfbdb8303426109984cf0893fdf2815bab8ca82f", "patch": "@@ -1,5 +1,5 @@\n /* Target definitions for GNU compiler for Intel 80860 running System V.4\n-   Copyright (C) 1991, 1996, 2000, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 1991, 1996, 2000, 2002, 2003 Free Software Foundation, Inc.\n    Contributed by Ron Guilmette (rfg@monkeys.com).\n \n This file is part of GNU CC.\n@@ -22,6 +22,9 @@ Boston, MA 02111-1307, USA.  */\n #undef TARGET_VERSION\n #define TARGET_VERSION fprintf (stderr, \" (i860 System V Release 4)\");\n \n+#undef USER_LABEL_PREFIX\n+#define USER_LABEL_PREFIX \"\"\n+\n /* Provide a set of pre-definitions and pre-assertions appropriate for\n    the i860 running svr4.  Note that the symbol `__svr4__' MUST BE\n    DEFINED!  It is needed so that the va_list struct in va-i860.h\n@@ -31,8 +34,16 @@ Boston, MA 02111-1307, USA.  */\n    will be selected when we are building gnulib2.c.\n    __svr4__ is our extension.  */\n \n-#define CPP_PREDEFINES \\\n-  \"-Di860 -Dunix -DSVR4 -D__svr4__ -Asystem=unix -Asystem=svr4 -Acpu=i860 -Amachine=i860\"\n+#define TARGET_OS_CPP_BUILTINS()                \\\n+  do                                            \\\n+    {                                           \\\n+        builtin_define_std (\"unix\");            \\\n+        builtin_define (\"SVR4\");                \\\n+        builtin_define (\"__svr4__\");            \\\n+        builtin_assert (\"system=unix\");         \\\n+        builtin_assert (\"system=svr4\");         \\\n+    }                                           \\\n+  while (0)\n \n /* For the benefit of i860_va_arg, flag it this way too.  */\n \n@@ -48,6 +59,8 @@ Boston, MA 02111-1307, USA.  */\n #undef TYPE_OPERAND_FMT\n #define TYPE_OPERAND_FMT      \"\\\"%s\\\"\"\n \n+#define GLOBAL_ASM_OP \".globl \"\n+\n /* The following macro definition overrides the one in i860.h\n    because the svr4 i860 assembler requires a different syntax\n    for getting parts of constant/relocatable values.  */\n@@ -59,11 +72,10 @@ Boston, MA 02111-1307, USA.  */\n \tfprintf (FILE, \"]@%s\", PART_CODE);\t\t\t\t\\\n   } while (0)\n \n-#undef ASM_FILE_START\n-#define ASM_FILE_START(FILE)\t\t\t\t\t\t\\\n-  do {\toutput_file_directive (FILE, main_input_filename);\t\t\\\n-\tfprintf (FILE, \"\\t.version\\t\\\"01.01\\\"\\n\");\t\t\t\\\n-  } while (0)\n+#undef TARGET_ASM_FILE_START_FILE_DIRECTIVE\n+#define TARGET_ASM_FILE_START_FILE_DIRECTIVE true\n+#undef TARGET_ASM_FILE_START\n+#define TARGET_ASM_FILE_START i860_file_start\n \n /* Output the special word the svr4 SDB wants to see just before\n    the first word of each function's prologue code.  */"}]}