{"sha": "9315dff064f2ddbbc159d5afcee176cab06bfcba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTMxNWRmZjA2NGYyZGRiYmMxNTlkNWFmY2VlMTc2Y2FiMDZiZmNiYQ==", "commit": {"author": {"name": "Alessandro Fanfarillo", "email": "fanfarillo.gcc@gmail.com", "date": "2015-03-10T17:58:01Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2015-03-10T17:58:01Z"}, "message": "trans.h (caf_sync_memory): New function decl tree.\n\n2015-03-10  Alessandro Fanfarillo  <fanfarillo.gcc@gmail.com>\n            Tobias Burnus  <burnus@net-b.de>\n\n        * trans.h (caf_sync_memory): New function decl tree.\n        * trans-decl.c (gfc_build_builtin_function_decls): Define it.\n        (create_main_function): Don't call sync_synchronize and leave\n        it to the CAF library.\n        * trans-stmt.c (gfc_trans_stop): Ditto.\n        (gfc_trans_sync): Ditto; add call library call for sync memory.\n\n        * gfortran.dg/coarray_sync_memory.f90: New.\n\n        * caf/libcaf.h (_gfortran_caf_sync_memory): New prototype.\n        * caf/single.c (_gfortran_caf_sync_memory): Implement.\n        (_gfortran_caf_sync_all, _gfortran_caf_sync_image): Add\n        __asm__ __volatile___ (\"\":::\"memory\").\n\n\nCo-Authored-By: Tobias Burnus <burnus@net-b.de>\n\nFrom-SVN: r221329", "tree": {"sha": "3b81e10f4b9ef07bf487371bb8be9be05d418397", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b81e10f4b9ef07bf487371bb8be9be05d418397"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9315dff064f2ddbbc159d5afcee176cab06bfcba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9315dff064f2ddbbc159d5afcee176cab06bfcba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9315dff064f2ddbbc159d5afcee176cab06bfcba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9315dff064f2ddbbc159d5afcee176cab06bfcba/comments", "author": null, "committer": null, "parents": [{"sha": "a4d66d7dc7a140adf8d2bfb87d4d6354abc7b340", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4d66d7dc7a140adf8d2bfb87d4d6354abc7b340", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4d66d7dc7a140adf8d2bfb87d4d6354abc7b340"}], "stats": {"total": 106, "additions": 73, "deletions": 33}, "files": [{"sha": "ae6865eff416e507744ffb0efbf92db070a596f7", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9315dff064f2ddbbc159d5afcee176cab06bfcba/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9315dff064f2ddbbc159d5afcee176cab06bfcba/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=9315dff064f2ddbbc159d5afcee176cab06bfcba", "patch": "@@ -1,3 +1,13 @@\n+2015-03-10  Alessandro Fanfarillo  <fanfarillo.gcc@gmail.com>\n+\t    Tobias Burnus  <burnus@net-b.de>\n+\n+\t* trans.h (caf_sync_memory): New function decl tree.\n+\t* trans-decl.c (gfc_build_builtin_function_decls): Define it.\n+\t(create_main_function): Don't call sync_synchronize and leave\n+\tit to the CAF library.\n+\t* trans-stmt.c (gfc_trans_stop): Ditto.\n+\t(gfc_trans_sync): Ditto; add call library call for sync memory.\n+\n 2015-03-08  Mikael Morin  <mikael@gcc.gnu.org>\n \n \tPR fortran/60898"}, {"sha": "769d487c7d9ea1a6d9dea2877f67cc507d539474", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9315dff064f2ddbbc159d5afcee176cab06bfcba/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9315dff064f2ddbbc159d5afcee176cab06bfcba/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=9315dff064f2ddbbc159d5afcee176cab06bfcba", "patch": "@@ -153,6 +153,7 @@ tree gfor_fndecl_caf_get;\n tree gfor_fndecl_caf_send;\n tree gfor_fndecl_caf_sendget;\n tree gfor_fndecl_caf_sync_all;\n+tree gfor_fndecl_caf_sync_memory;\n tree gfor_fndecl_caf_sync_images;\n tree gfor_fndecl_caf_error_stop;\n tree gfor_fndecl_caf_error_stop_str;\n@@ -3451,6 +3452,10 @@ gfc_build_builtin_function_decls (void)\n \tget_identifier (PREFIX(\"caf_sync_all\")), \".WW\", void_type_node,\n \t3, pint_type, pchar_type_node, integer_type_node);\n \n+      gfor_fndecl_caf_sync_memory = gfc_build_library_function_decl_with_spec (\n+\tget_identifier (PREFIX(\"caf_sync_memory\")), \".WW\", void_type_node,\n+\t3, pint_type, pchar_type_node, integer_type_node);\n+\n       gfor_fndecl_caf_sync_images = gfc_build_library_function_decl_with_spec (\n \tget_identifier (PREFIX(\"caf_sync_images\")), \".RRWW\", void_type_node,\n \t5, integer_type_node, pint_type, pint_type,\n@@ -5583,12 +5588,6 @@ create_main_function (tree fndecl)\n   /* Coarray: Call _gfortran_caf_finalize(void).  */\n   if (flag_coarray == GFC_FCOARRAY_LIB)\n     {\n-      /* Per F2008, 8.5.1 END of the main program implies a\n-\t SYNC MEMORY.  */\n-      tmp = builtin_decl_explicit (BUILT_IN_SYNC_SYNCHRONIZE);\n-      tmp = build_call_expr_loc (input_location, tmp, 0);\n-      gfc_add_expr_to_block (&body, tmp);\n-\n       tmp = build_call_expr_loc (input_location, gfor_fndecl_caf_finalize, 0);\n       gfc_add_expr_to_block (&body, tmp);\n     }"}, {"sha": "6450a0ecec2df541821d2a7f69092ac10956765e", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 11, "deletions": 27, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9315dff064f2ddbbc159d5afcee176cab06bfcba/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9315dff064f2ddbbc159d5afcee176cab06bfcba/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=9315dff064f2ddbbc159d5afcee176cab06bfcba", "patch": "@@ -639,17 +639,6 @@ gfc_trans_stop (gfc_code *code, bool error_stop)\n   gfc_init_se (&se, NULL);\n   gfc_start_block (&se.pre);\n \n-  if (flag_coarray == GFC_FCOARRAY_LIB && !error_stop)\n-    {\n-      /* Per F2008, 8.5.1 STOP implies a SYNC MEMORY.  */\n-      tmp = builtin_decl_explicit (BUILT_IN_SYNC_SYNCHRONIZE);\n-      tmp = build_call_expr_loc (input_location, tmp, 0);\n-      gfc_add_expr_to_block (&se.pre, tmp);\n-\n-      tmp = build_call_expr_loc (input_location, gfor_fndecl_caf_finalize, 0);\n-      gfc_add_expr_to_block (&se.pre, tmp);\n-    }\n-\n   if (code->expr1 == NULL)\n     {\n       tmp = build_int_cst (gfc_int4_type_node, 0);\n@@ -768,8 +757,7 @@ gfc_trans_sync (gfc_code *code, gfc_exec_op type)\n   else\n     stat = null_pointer_node;\n \n-  if (code->expr3 && flag_coarray == GFC_FCOARRAY_LIB\n-      && type != EXEC_SYNC_MEMORY)\n+  if (code->expr3 && flag_coarray == GFC_FCOARRAY_LIB)\n     {\n       gcc_assert (code->expr3->expr_type == EXPR_VARIABLE);\n       gfc_init_se (&argse, NULL);\n@@ -778,7 +766,7 @@ gfc_trans_sync (gfc_code *code, gfc_exec_op type)\n       errmsg = gfc_build_addr_expr (NULL, argse.expr);\n       errmsglen = argse.string_length;\n     }\n-  else if (flag_coarray == GFC_FCOARRAY_LIB && type != EXEC_SYNC_MEMORY)\n+  else if (flag_coarray == GFC_FCOARRAY_LIB)\n     {\n       errmsg = null_pointer_node;\n       errmsglen = build_int_cst (integer_type_node, 0);\n@@ -813,22 +801,13 @@ gfc_trans_sync (gfc_code *code, gfc_exec_op type)\n \t\t\t       fold_convert (integer_type_node, images));\n     }\n \n-   /* Per F2008, 8.5.1, a SYNC MEMORY is implied by calling the\n-      image control statements SYNC IMAGES and SYNC ALL.  */\n-   if (flag_coarray == GFC_FCOARRAY_LIB)\n-     {\n-       tmp = builtin_decl_explicit (BUILT_IN_SYNC_SYNCHRONIZE);\n-       tmp = build_call_expr_loc (input_location, tmp, 0);\n-       gfc_add_expr_to_block (&se.pre, tmp);\n-     }\n-\n-  if (flag_coarray != GFC_FCOARRAY_LIB || type == EXEC_SYNC_MEMORY)\n+  if (flag_coarray != GFC_FCOARRAY_LIB)\n     {\n       /* Set STAT to zero.  */\n       if (code->expr2)\n \tgfc_add_modify (&se.pre, stat, build_int_cst (TREE_TYPE (stat), 0));\n     }\n-  else if (type == EXEC_SYNC_ALL)\n+  else if (type == EXEC_SYNC_ALL || type == EXEC_SYNC_MEMORY)\n     {\n       /* SYNC ALL           =>   stat == null_pointer_node\n \t SYNC ALL(stat=s)   =>   stat has an integer type\n@@ -840,8 +819,13 @@ gfc_trans_sync (gfc_code *code, gfc_exec_op type)\n \t  if (TREE_TYPE (stat) == integer_type_node)\n \t    stat = gfc_build_addr_expr (NULL, stat);\n \n-\t  tmp = build_call_expr_loc (input_location, gfor_fndecl_caf_sync_all,\n-\t\t\t\t     3, stat, errmsg, errmsglen);\n+\t  if(type == EXEC_SYNC_MEMORY)\n+\t    tmp = build_call_expr_loc (input_location, gfor_fndecl_caf_sync_memory,\n+\t\t\t\t       3, stat, errmsg, errmsglen);\n+\t  else\n+\t    tmp = build_call_expr_loc (input_location, gfor_fndecl_caf_sync_all,\n+\t\t\t\t       3, stat, errmsg, errmsglen);\n+\n \t  gfc_add_expr_to_block (&se.pre, tmp);\n \t}\n       else"}, {"sha": "3ba2f88f0fddd4c8b9e98b33e5245cd5288f87f3", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9315dff064f2ddbbc159d5afcee176cab06bfcba/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9315dff064f2ddbbc159d5afcee176cab06bfcba/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=9315dff064f2ddbbc159d5afcee176cab06bfcba", "patch": "@@ -731,6 +731,7 @@ extern GTY(()) tree gfor_fndecl_caf_get;\n extern GTY(()) tree gfor_fndecl_caf_send;\n extern GTY(()) tree gfor_fndecl_caf_sendget;\n extern GTY(()) tree gfor_fndecl_caf_sync_all;\n+extern GTY(()) tree gfor_fndecl_caf_sync_memory;\n extern GTY(()) tree gfor_fndecl_caf_sync_images;\n extern GTY(()) tree gfor_fndecl_caf_error_stop;\n extern GTY(()) tree gfor_fndecl_caf_error_stop_str;"}, {"sha": "b85edda7464a19f8f54353d87c6a40a7df2c497d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9315dff064f2ddbbc159d5afcee176cab06bfcba/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9315dff064f2ddbbc159d5afcee176cab06bfcba/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9315dff064f2ddbbc159d5afcee176cab06bfcba", "patch": "@@ -1,3 +1,8 @@\n+2015-03-10  Alessandro Fanfarillo  <fanfarillo.gcc@gmail.com>\n+\t    Tobias Burnus  <burnus@net-b.de>\n+\n+\t* gfortran.dg/coarray_sync_memory.f90: New.\n+\n 2015-03-10  Marek Polacek  <polacek@redhat.com>\n \n \tPR sanitizer/65367"}, {"sha": "6e1aee32e3ce72cba65244779213bac3ae14f49e", "filename": "gcc/testsuite/gfortran.dg/coarray_sync_memory.f90", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9315dff064f2ddbbc159d5afcee176cab06bfcba/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_sync_memory.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9315dff064f2ddbbc159d5afcee176cab06bfcba/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_sync_memory.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_sync_memory.f90?ref=9315dff064f2ddbbc159d5afcee176cab06bfcba", "patch": "@@ -0,0 +1,19 @@\n+! { dg-do compile }\n+! { dg-options \"-fdump-tree-original -fcoarray=lib\" }\n+!\n+! Coarray sync memory managed by the external library\n+!\n+implicit none\n+integer :: stat\n+character(len=42) :: msg\n+sync memory\n+sync memory(stat=stat)\n+sync memory(errmsg=msg)\n+sync memory(errmsg=msg, stat=stat)\n+end\n+\n+! { dg-final { scan-tree-dump-times \"_gfortran_caf_sync_memory \\\\(0B, 0B, 0\\\\);\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"_gfortran_caf_sync_memory \\\\(&stat, 0B, 0\\\\);\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"_gfortran_caf_sync_memory \\\\(0B, &&msg, 42\\\\);\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"_gfortran_caf_sync_memory \\\\(&stat, &&msg, 42\\\\);\" 1 \"original\" } }\n+! { dg-final { cleanup-tree-dump \"original\" } }"}, {"sha": "184338aaede17def35542af022d6f1814685e384", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9315dff064f2ddbbc159d5afcee176cab06bfcba/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9315dff064f2ddbbc159d5afcee176cab06bfcba/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=9315dff064f2ddbbc159d5afcee176cab06bfcba", "patch": "@@ -1,3 +1,11 @@\n+2015-03-10  Alessandro Fanfarillo  <fanfarillo.gcc@gmail.com>\n+\t    Tobias Burnus  <burnus@net-b.de>\n+\n+\t* caf/libcaf.h (_gfortran_caf_sync_memory): New prototype.\n+\t* caf/single.c (_gfortran_caf_sync_memory): Implement.\n+\t(_gfortran_caf_sync_all, _gfortran_caf_sync_image): Add\n+\t__asm__ __volatile___ (\"\":::\"memory\").\n+\n 2015-02-10 Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libgfortran/57822"}, {"sha": "660bd7c094543a0c23174af4648841b3926e81af", "filename": "libgfortran/caf/libcaf.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9315dff064f2ddbbc159d5afcee176cab06bfcba/libgfortran%2Fcaf%2Flibcaf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9315dff064f2ddbbc159d5afcee176cab06bfcba/libgfortran%2Fcaf%2Flibcaf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fcaf%2Flibcaf.h?ref=9315dff064f2ddbbc159d5afcee176cab06bfcba", "patch": "@@ -100,6 +100,7 @@ void *_gfortran_caf_register (size_t, caf_register_t, caf_token_t *, int *,\n void _gfortran_caf_deregister (caf_token_t *, int *, char *, int);\n \n void _gfortran_caf_sync_all (int *, char *, int);\n+void _gfortran_caf_sync_memory (int *, char *, int);\n void _gfortran_caf_sync_images (int, int[], int *, char *, int);\n \n void _gfortran_caf_error_stop_str (const char *, int32_t)"}, {"sha": "daef281ef2ed19d68d9cfd70ee96869a064ef675", "filename": "libgfortran/caf/single.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9315dff064f2ddbbc159d5afcee176cab06bfcba/libgfortran%2Fcaf%2Fsingle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9315dff064f2ddbbc159d5afcee176cab06bfcba/libgfortran%2Fcaf%2Fsingle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fcaf%2Fsingle.c?ref=9315dff064f2ddbbc159d5afcee176cab06bfcba", "patch": "@@ -162,6 +162,18 @@ _gfortran_caf_sync_all (int *stat,\n \t\t\tchar *errmsg __attribute__ ((unused)),\n \t\t\tint errmsg_len __attribute__ ((unused)))\n {\n+  __asm__ __volatile__ (\"\":::\"memory\");\n+  if (stat)\n+    *stat = 0;\n+}\n+\n+\n+void\n+_gfortran_caf_sync_memory (int *stat,\n+\t\t\t   char *errmsg __attribute__ ((unused)),\n+\t\t\t   int errmsg_len __attribute__ ((unused)))\n+{\n+  __asm__ __volatile__ (\"\":::\"memory\");\n   if (stat)\n     *stat = 0;\n }\n@@ -186,6 +198,7 @@ _gfortran_caf_sync_images (int count __attribute__ ((unused)),\n       }\n #endif\n \n+  __asm__ __volatile__ (\"\":::\"memory\");\n   if (stat)\n     *stat = 0;\n }"}]}