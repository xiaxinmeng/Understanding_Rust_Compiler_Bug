{"sha": "274b2532360e1615cdbde890c32c928c69ac45cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjc0YjI1MzIzNjBlMTYxNWNkYmRlODkwYzMyYzkyOGM2OWFjNDVjYw==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2013-09-09T13:32:50Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2013-09-09T13:32:50Z"}, "message": "aarch64.c (aarch64_select_cc_mode): Return CC_SWP for comparison with negated operand.\n\n[gcc/]\n2013-09-09  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n\n\t* config/aarch64/aarch64.c (aarch64_select_cc_mode): Return CC_SWP for\n\tcomparison with negated operand.\n\t* config/aarch64/aarch64.md (compare_neg<mode>): Match canonical RTL form.\n\n[gcc/testsuite/]\t\n2013-09-09  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n\n\t* gcc.target/aarch64/cmn-neg.c: New test.\n\nFrom-SVN: r202400", "tree": {"sha": "bad4ff0c666dd569aee31c3a25352152de9952f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bad4ff0c666dd569aee31c3a25352152de9952f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/274b2532360e1615cdbde890c32c928c69ac45cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/274b2532360e1615cdbde890c32c928c69ac45cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/274b2532360e1615cdbde890c32c928c69ac45cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/274b2532360e1615cdbde890c32c928c69ac45cc/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "467a3558efb2d9ac55f643ad41d82c70477ea1de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/467a3558efb2d9ac55f643ad41d82c70477ea1de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/467a3558efb2d9ac55f643ad41d82c70477ea1de"}], "stats": {"total": 58, "additions": 51, "deletions": 7}, "files": [{"sha": "9a94ff4b8614a2dbc425e704070d7e6823926a1e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/274b2532360e1615cdbde890c32c928c69ac45cc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/274b2532360e1615cdbde890c32c928c69ac45cc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=274b2532360e1615cdbde890c32c928c69ac45cc", "patch": "@@ -1,3 +1,9 @@\n+2013-09-09  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_select_cc_mode): Return CC_SWP for\n+\tcomparison with negated operand.\n+\t* config/aarch64/aarch64.md (compare_neg<mode>): Match canonical RTL form.\n+\n 2013-09-09  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/58326"}, {"sha": "d0bd38eaef02273c1bf1c637b675f5ccc1a1ca99", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/274b2532360e1615cdbde890c32c928c69ac45cc/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/274b2532360e1615cdbde890c32c928c69ac45cc/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=274b2532360e1615cdbde890c32c928c69ac45cc", "patch": "@@ -3313,14 +3313,15 @@ aarch64_select_cc_mode (RTX_CODE code, rtx x, rtx y)\n \t  || GET_CODE (x) == NEG))\n     return CC_NZmode;\n \n-  /* A compare with a shifted operand.  Because of canonicalization,\n+  /* A compare with a shifted or negated operand.  Because of canonicalization,\n      the comparison will have to be swapped when we emit the assembly\n      code.  */\n   if ((GET_MODE (x) == SImode || GET_MODE (x) == DImode)\n       && (GET_CODE (y) == REG || GET_CODE (y) == SUBREG)\n       && (GET_CODE (x) == ASHIFT || GET_CODE (x) == ASHIFTRT\n \t  || GET_CODE (x) == LSHIFTRT\n-\t  || GET_CODE (x) == ZERO_EXTEND || GET_CODE (x) == SIGN_EXTEND))\n+\t  || GET_CODE (x) == ZERO_EXTEND || GET_CODE (x) == SIGN_EXTEND\n+\t  || GET_CODE (x) == NEG))\n     return CC_SWPmode;\n \n   /* A compare of a mode narrower than SI mode against zero can be done"}, {"sha": "0cd7da7a3991dc1b1ffd72b06ad38f4f6898e328", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/274b2532360e1615cdbde890c32c928c69ac45cc/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/274b2532360e1615cdbde890c32c928c69ac45cc/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=274b2532360e1615cdbde890c32c928c69ac45cc", "patch": "@@ -1480,12 +1480,12 @@\n )\n \n (define_insn \"*compare_neg<mode>\"\n-  [(set (reg:CC CC_REGNUM)\n-\t(compare:CC\n-\t (match_operand:GPI 0 \"register_operand\" \"r\")\n-\t (neg:GPI (match_operand:GPI 1 \"register_operand\" \"r\"))))]\n+  [(set (reg:CC_SWP CC_REGNUM)\n+\t(compare:CC_SWP\n+\t (neg:GPI (match_operand:GPI 0 \"register_operand\" \"r\"))\n+\t (match_operand:GPI 1 \"register_operand\" \"r\")))]\n   \"\"\n-  \"cmn\\\\t%<w>0, %<w>1\"\n+  \"cmn\\\\t%<w>1, %<w>0\"\n   [(set_attr \"v8type\" \"alus\")\n    (set_attr \"type\" \"alus_reg\")\n    (set_attr \"mode\" \"<MODE>\")]"}, {"sha": "ffe4acb19852a8bdb503e526e7523a863a4353db", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/274b2532360e1615cdbde890c32c928c69ac45cc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/274b2532360e1615cdbde890c32c928c69ac45cc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=274b2532360e1615cdbde890c32c928c69ac45cc", "patch": "@@ -1,3 +1,7 @@\n+2013-09-09  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* gcc.target/aarch64/cmn-neg.c: New test.\n+\n 2013-09-09  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/58326"}, {"sha": "05c8bbff5be97c008c63963945f5847df052a2d2", "filename": "gcc/testsuite/gcc.target/aarch64/cmn-neg.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/274b2532360e1615cdbde890c32c928c69ac45cc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcmn-neg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/274b2532360e1615cdbde890c32c928c69ac45cc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcmn-neg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcmn-neg.c?ref=274b2532360e1615cdbde890c32c928c69ac45cc", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 --save-temps\" } */\n+\n+extern void abort (void);\n+\n+void __attribute__ ((noinline))\n+foo_s32 (int a, int b)\n+{\n+  if (a < -b)\n+    abort ();\n+}\n+/* { dg-final { scan-assembler \"cmn\\tw\\[0-9\\]\" } } */\n+\n+void __attribute__ ((noinline))\n+foo_s64 (long long a, long long b)\n+{\n+  if (a < -b)\n+    abort ();\n+}\n+/* { dg-final { scan-assembler \"cmn\\tx\\[0-9\\]\" } } */\n+\n+\n+int\n+main (void)\n+{\n+  int a = 30;\n+  int b = 42;\n+  foo_s32 (a, b);\n+  foo_s64 (a, b);\n+  return 0;\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}]}