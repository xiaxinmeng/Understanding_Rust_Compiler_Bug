{"sha": "c25a21f58196ce9746f137ad7e95858e5836f01a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzI1YTIxZjU4MTk2Y2U5NzQ2ZjEzN2FkN2U5NTg1OGU1ODM2ZjAxYQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2011-01-19T17:20:26Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2011-01-19T17:20:26Z"}, "message": "mn10300: Expose the MDR register to register allocation.\n\nNote that nothing uses the \"z\" constraint yet except the one\nmove pattern; this merely defines the register class properly.\n\nFrom-SVN: r169007", "tree": {"sha": "8b9cb1eaac9aab8109ba4fa93d67bce380d4992b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b9cb1eaac9aab8109ba4fa93d67bce380d4992b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c25a21f58196ce9746f137ad7e95858e5836f01a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c25a21f58196ce9746f137ad7e95858e5836f01a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c25a21f58196ce9746f137ad7e95858e5836f01a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c25a21f58196ce9746f137ad7e95858e5836f01a/comments", "author": null, "committer": null, "parents": [{"sha": "36846b26721512effe580079a9ef6b982c651cb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36846b26721512effe580079a9ef6b982c651cb8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36846b26721512effe580079a9ef6b982c651cb8"}], "stats": {"total": 88, "additions": 69, "deletions": 19}, "files": [{"sha": "6e5dc0e1c8e1a51b92d34d880b43061f41c04dd8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25a21f58196ce9746f137ad7e95858e5836f01a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25a21f58196ce9746f137ad7e95858e5836f01a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c25a21f58196ce9746f137ad7e95858e5836f01a", "patch": "@@ -1,5 +1,19 @@\n 2011-01-19  Richard Henderson  <rth@redhat.com>\n \n+\t* config/mn10300/constraints.md (\"z\"): New constraint.\n+\t* config/mn10300/mn10300.h (MDR_REGNUM): Remove.\n+\t(FIXED_REGISTERS): Don't fix MDR.\n+\t(CALL_USED_REGSITERS): Reformat nicely.\n+\t(REG_ALLOC_ORDER): Add MDR.\n+\t(enum regclass): Add MDR_REGS.\n+\t(REG_CLASS_NAMES, REG_CLASS_CONTENTS): Update to match.\n+\t(IRA_COVER_CLASSES): Add MDR_REGS.\n+\t(REGNO_REG_CLASS): Handle MDR_REG.\n+\t* config/mn10300/mn10300.c (mn10300_secondary_reload): Handle MDR_REGS.\n+\t(mn10300_register_move_cost): Likewise.\n+\t* config/mn10300/mn10300.md (MDR_REG): New.\n+\t(*movsi_internal): Handle moves to/from MDR_REGS.\n+\n \t* config/mn10300/mn10300.c (mn10300_print_operand_address): Handle\n \tPOST_MODIFY.\n \t(mn10300_secondary_reload): Tidy combination reload classes."}, {"sha": "a4816c1e20cb926681dffbdbcc11f2c5e1d54912", "filename": "gcc/config/mn10300/constraints.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25a21f58196ce9746f137ad7e95858e5836f01a/gcc%2Fconfig%2Fmn10300%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25a21f58196ce9746f137ad7e95858e5836f01a/gcc%2Fconfig%2Fmn10300%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fconstraints.md?ref=c25a21f58196ce9746f137ad7e95858e5836f01a", "patch": "@@ -35,6 +35,9 @@\n (define_register_constraint \"y\" \"SP_REGS\"\n   \"An SP register (if available).\")\n \n+(define_register_constraint \"z\" \"MDR_REGS\"\n+  \"The MDR register.\")\n+\n (define_register_constraint \"x\" \"TARGET_AM33 ? EXTENDED_REGS : NO_REGS\"\n   \"An extended register.\")\n "}, {"sha": "023c69c1557be30baa70e78e97d0fb7cb72463e6", "filename": "gcc/config/mn10300/mn10300.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25a21f58196ce9746f137ad7e95858e5836f01a/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25a21f58196ce9746f137ad7e95858e5836f01a/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.c?ref=c25a21f58196ce9746f137ad7e95858e5836f01a", "patch": "@@ -1416,6 +1416,12 @@ mn10300_secondary_reload (bool in_p, rtx x, reg_class_t rclass_i,\n       return NO_REGS;\n     }\n \n+  /* We can only move MDR to/from a data register.  */\n+  if (rclass == MDR_REGS && xclass != DATA_REGS)\n+    return DATA_REGS;\n+  if (xclass == MDR_REGS && rclass != DATA_REGS)\n+    return DATA_REGS;\n+\n   /* We can't load/store an FP register from a constant address.  */\n   if (TARGET_AM33_2\n       && (rclass == FP_REGS || xclass == FP_REGS)\n@@ -2256,13 +2262,17 @@ mn10300_register_move_cost (enum machine_mode mode ATTRIBUTE_UNUSED,\n   test = from;\n   if (to == SP_REGS)\n     scratch = (TARGET_AM33 ? GENERAL_REGS : ADDRESS_REGS);\n+  else if (to == MDR_REGS)\n+    scratch = DATA_REGS;\n   else if (to == FP_REGS && to != from)\n     scratch = GENERAL_REGS;\n   else\n     {\n       test = to;\n       if (from == SP_REGS)\n \tscratch = (TARGET_AM33 ? GENERAL_REGS : ADDRESS_REGS);\n+      else if (from == MDR_REGS)\n+\tscratch = DATA_REGS;\n       else if (from == FP_REGS && to != from)\n \tscratch = GENERAL_REGS;\n     }"}, {"sha": "05c78266a67eb16bc3e3054202840efd7ab22ed6", "filename": "gcc/config/mn10300/mn10300.h", "status": "modified", "additions": 31, "deletions": 13, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25a21f58196ce9746f137ad7e95858e5836f01a/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25a21f58196ce9746f137ad7e95858e5836f01a/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.h?ref=c25a21f58196ce9746f137ad7e95858e5836f01a", "patch": "@@ -157,7 +157,7 @@ extern enum processor_type mn10300_tune_cpu;\n #define LAST_EXTENDED_REGNUM  17\n #define FIRST_FP_REGNUM       18\n #define LAST_FP_REGNUM        49\n-#define MDR_REGNUM            50\n+/* #define MDR_REG            50 */\n /* #define CC_REG             51 */\n #define FIRST_ARGUMENT_REGNUM  0\n \n@@ -182,9 +182,17 @@ extern enum processor_type mn10300_tune_cpu;\n    and are not available for the register allocator.  */\n \n #define FIXED_REGISTERS \\\n-  { 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0 \\\n-  , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\t \\\n-  , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1 \\\n+  { 0, 0, 0, 0,\t\t\t\t/* data regs */\t\t\\\n+    0, 0, 0, 0,\t\t\t\t/* addr regs */\t\t\\\n+    1,\t\t\t\t\t/* arg reg */\t\t\\\n+    1,\t\t\t\t\t/* sp reg */\t\t\\\n+    0, 0, 0, 0, 0, 0, 0, 0,\t\t/* extended regs */\t\\\n+    0, 0,\t\t\t\t/* fp regs (18-19) */\t\\\n+    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\t/* fp regs (20-29) */\t\\\n+    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\t/* fp regs (30-39) */\t\\\n+    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\t/* fp regs (40-49) */\t\\\n+    0,\t\t\t\t\t/* mdr reg */\t\t\\\n+    1\t\t\t\t\t/* cc reg */\t\t\\\n   }\n \n /* 1 for registers not available across function calls.\n@@ -196,9 +204,17 @@ extern enum processor_type mn10300_tune_cpu;\n    like.  */\n \n #define CALL_USED_REGISTERS \\\n-  { 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0 \\\n-  , 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\t \\\n-  , 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 \\\n+  { 1, 1, 0, 0,\t\t\t\t/* data regs */\t\t\\\n+    1, 1, 0, 0,\t\t\t\t/* addr regs */\t\t\\\n+    1,\t\t\t\t\t/* arg reg */\t\t\\\n+    1,\t\t\t\t\t/* sp reg */\t\t\\\n+    1, 1, 1, 1, 0, 0, 0, 0,\t\t/* extended regs */\t\\\n+    1, 1,\t\t\t\t/* fp regs (18-19) */\t\\\n+    1, 1, 0, 0, 0, 0, 0, 0, 0, 0,\t/* fp regs (20-29) */\t\\\n+    0, 0, 0, 0, 0, 0, 0, 0, 1, 1,\t/* fp regs (30-39) */\t\\\n+    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\t/* fp regs (40-49) */\t\\\n+    1,\t\t\t\t\t/* mdr reg */\t\t\\\n+    1\t\t\t\t\t/* cc reg */\t\t\\\n   }\n \n /* Note: The definition of CALL_REALLY_USED_REGISTERS is not\n@@ -211,7 +227,7 @@ extern enum processor_type mn10300_tune_cpu;\n #define REG_ALLOC_ORDER \\\n   { 0, 1, 4, 5, 2, 3, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 8, 9 \\\n   , 42, 43, 44, 45, 46, 47, 48, 49, 34, 35, 36, 37, 38, 39, 40, 41 \\\n-  , 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 51 \\\n+  , 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 50, 51 \\\n   }\n \n /* Return number of consecutive hard regs needed starting at reg REGNO\n@@ -262,18 +278,18 @@ extern enum processor_type mn10300_tune_cpu;\n enum reg_class\n {\n   NO_REGS, DATA_REGS, ADDRESS_REGS, SP_REGS, SP_OR_ADDRESS_REGS,\n-  EXTENDED_REGS, FP_REGS, FP_ACC_REGS, CC_REGS,\n+  EXTENDED_REGS, FP_REGS, FP_ACC_REGS, CC_REGS, MDR_REGS,\n   GENERAL_REGS, SP_OR_GENERAL_REGS, ALL_REGS, LIM_REG_CLASSES\n };\n \n #define N_REG_CLASSES (int) LIM_REG_CLASSES\n \n /* Give names of register classes as strings for dump file.  */\n \n-#define REG_CLASS_NAMES\t\t\t\t\t   \t\\\n+#define REG_CLASS_NAMES\t\t\t\t\t   \t\t\\\n { \"NO_REGS\", \"DATA_REGS\", \"ADDRESS_REGS\", \"SP_REGS\", \"SP_OR_ADDRESS_REGS\", \\\n-  \"EXTENDED_REGS\", \"FP_REGS\", \"FP_ACC_REGS\", \"CC_REGS\",\t\t\\\n-  \"GENERAL_REGS\", \"SP_OR_GENERAL_REGS\", \"ALL_REGS\", \"LIM_REGS\"\t\\\n+  \"EXTENDED_REGS\", \"FP_REGS\", \"FP_ACC_REGS\", \"CC_REGS\", \"MDR_REGS\",\t\\\n+  \"GENERAL_REGS\", \"SP_OR_GENERAL_REGS\", \"ALL_REGS\", \"LIM_REGS\"\t\t\\\n }\n \n /* Define which registers fit in which classes.\n@@ -290,6 +306,7 @@ enum reg_class\n   { 0xfffc0000, 0x3ffff },/* FP_REGS */\t\t\t\t\\\n   { 0x03fc0000, 0 },\t  /* FP_ACC_REGS */\t\t\t\\\n   { 0x00000000, 0x80000 },/* CC_REGS */\t\t\t\t\\\n+  { 0x00000000, 0x40000 },/* MDR_REGS */\t\t\t\\\n   { 0x0003fdff, 0 }, \t  /* GENERAL_REGS */\t\t\t\\\n   { 0x0003ffff, 0 },      /* SP_OR_GENERAL_REGS */\t\t\\\n   { 0xffffffff, 0xfffff } /* ALL_REGS */\t\t\t\\\n@@ -305,7 +322,7 @@ enum reg_class\n \n #define IRA_COVER_CLASSES\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\\\n-  GENERAL_REGS, FP_REGS, LIM_REG_CLASSES\t\t\t\\\n+  GENERAL_REGS, FP_REGS, MDR_REGS, LIM_REG_CLASSES\t\t\\\n }\n \n /* The same information, inverted:\n@@ -319,6 +336,7 @@ enum reg_class\n    (REGNO) == STACK_POINTER_REGNUM ? SP_REGS :\t     \\\n    (REGNO) <= LAST_EXTENDED_REGNUM ? EXTENDED_REGS : \\\n    (REGNO) <= LAST_FP_REGNUM ? FP_REGS :\t     \\\n+   (REGNO) == MDR_REG ? MDR_REGS :\t\t     \\\n    (REGNO) == CC_REG ? CC_REGS :\t\t     \\\n    NO_REGS)\n "}, {"sha": "5f4f17a4e958286abb82fde431cf53ed9f455481", "filename": "gcc/config/mn10300/mn10300.md", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25a21f58196ce9746f137ad7e95858e5836f01a/gcc%2Fconfig%2Fmn10300%2Fmn10300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25a21f58196ce9746f137ad7e95858e5836f01a/gcc%2Fconfig%2Fmn10300%2Fmn10300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.md?ref=c25a21f58196ce9746f137ad7e95858e5836f01a", "patch": "@@ -26,9 +26,10 @@\n ;; See file \"rtl.def\" for documentation on define_insn, match_*, et. al.\n \n (define_constants [\n-  (PIC_REG 6)\n-  (SP_REG  9)\n-  (CC_REG 51)\n+  (PIC_REG   6)\n+  (SP_REG    9)\n+  (MDR_REG  50)\n+  (CC_REG   51)\n \n   (UNSPEC_INT_LABEL\t0)\n   (UNSPEC_PIC\t\t1)\n@@ -386,9 +387,9 @@\n \n (define_insn \"*movsi_internal\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\"\n-\t\t\t  \"=r,r,r,m,r, A,*y,*y\")\n+\t\t\t  \"=r,r,r,m,r, A,*y,*y,*z,*d\")\n \t(match_operand:SI 1 \"general_operand\"\n-\t\t\t  \" 0,i,r,r,m,*y, A, i\"))]\n+\t\t\t  \" 0,i,r,r,m,*y, A, i,*d,*z\"))]\n   \"register_operand (operands[0], SImode)\n    || register_operand (operands[1], SImode)\"\n {\n@@ -416,12 +417,14 @@\n     case 5:  /* sp-reg */\n     case 6:  /* reg-sp */\n     case 7:  /* imm-sp */\n+    case 8:  /* reg-mdr */\n+    case 9:  /* mdr-reg */\n       return \"mov %1,%0\";\n     default:\n       gcc_unreachable ();\n     }\n }\n-  [(set_attr \"isa\" \"*,*,*,*,*,*,*,am33\")\n+  [(set_attr \"isa\" \"*,*,*,*,*,*,*,am33,*,*\")\n    (set_attr_alternative \"timings\"\n \t [(const_int 11)\n \t  (const_int 22)\n@@ -435,6 +438,8 @@\n \t  (if_then_else (eq_attr \"cpu\" \"am34\")\n \t\t\t(const_int 13) (const_int 24))\n \t  (const_int 11)\n+\t  (const_int 11)\n+\t  (const_int 11)\n \t ])]\n )\n "}]}