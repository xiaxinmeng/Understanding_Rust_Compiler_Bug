{"sha": "744b12b65f6923a713593f404f97384c6093dd94", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQ0YjEyYjY1ZjY5MjNhNzEzNTkzZjQwNGY5NzM4NGM2MDkzZGQ5NA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2005-02-23T05:30:48Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2005-02-23T05:30:48Z"}, "message": "re PR c++/19991 (Enum not accepted in array-size)\n\n\tPR c++/19991\n\t* init.c (integral_constant_value): Iterate if the value of a decl\n\tis itself a constant.\n\n\tPR c++/20152\n\t* parser.c (cp_parser_class_head): Check for redefintions here.\n\t* semantics.c (begin_class_definition): Not here.\n\n\tPR c++/20153\n\t* decl2.c (build_anon_union_vars): Add type parameter.\n\t(finish_anon_union): Pass it.\n\n\tPR c++/20148\n\t* error.c (dump_expr): Do not print the body of a BIND_EXPR.\n\tHandle STATEMENT_LIST.\n\n\tPR c++/19991\n\t* g++.dg/parse/constant7.C: New test.\n\n\tPR c++/20152\n\t* g++.dg/parse/error27.C: New test.\n\t* g++.dg/template/qualttp15.C: Adjust error markers.\n\t* g++.old-deja/g++.other/struct1.C: Likewise.\n\n\tPR c++/20153\n\t* g++.dg/template/error17.C: New test.\n\n\tPR c++/20148\n\t* g++.dg/parser/error26.C: New test.\n\nFrom-SVN: r95438", "tree": {"sha": "b003a007ec3edf4d8323134ca4e5d3a88c20f95d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b003a007ec3edf4d8323134ca4e5d3a88c20f95d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/744b12b65f6923a713593f404f97384c6093dd94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/744b12b65f6923a713593f404f97384c6093dd94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/744b12b65f6923a713593f404f97384c6093dd94", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/744b12b65f6923a713593f404f97384c6093dd94/comments", "author": null, "committer": null, "parents": [{"sha": "90c1d75a9bb8e25aa963da02f9c91f5f40143be1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90c1d75a9bb8e25aa963da02f9c91f5f40143be1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90c1d75a9bb8e25aa963da02f9c91f5f40143be1"}], "stats": {"total": 157, "additions": 109, "deletions": 48}, "files": [{"sha": "611100cf2741f2cb7c98c391649c5ac1731f15e9", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/744b12b65f6923a713593f404f97384c6093dd94/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/744b12b65f6923a713593f404f97384c6093dd94/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=744b12b65f6923a713593f404f97384c6093dd94", "patch": "@@ -1,5 +1,21 @@\n 2005-02-22  Mark Mitchell  <mark@codesourcery.com>\n \n+\tPR c++/19991\n+\t* init.c (integral_constant_value): Iterate if the value of a decl\n+\tis itself a constant.\n+\n+\tPR c++/20152\n+\t* parser.c (cp_parser_class_head): Check for redefintions here.\n+\t* semantics.c (begin_class_definition): Not here.\n+\t\n+\tPR c++/20153\n+\t* decl2.c (build_anon_union_vars): Add type parameter.\n+\t(finish_anon_union): Pass it.\n+\n+\tPR c++/20148\n+\t* error.c (dump_expr): Do not print the body of a BIND_EXPR.\n+\tHandle STATEMENT_LIST.\n+\n \tPR c++/19883\n \t* parser.c (cp_parser_direct_declarator): Always complain about\n \tnon-constant array bounds when in a function scope."}, {"sha": "7ed490e8071ceb40c2c3db8f229d29633a2721b6", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/744b12b65f6923a713593f404f97384c6093dd94/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/744b12b65f6923a713593f404f97384c6093dd94/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=744b12b65f6923a713593f404f97384c6093dd94", "patch": "@@ -65,7 +65,6 @@ typedef struct priority_info_s {\n \n static void mark_vtable_entries (tree);\n static bool maybe_emit_vtables (tree);\n-static tree build_anon_union_vars (tree);\n static bool acceptable_java_type (tree);\n static tree start_objects (int, int);\n static void finish_objects (int, int, tree);\n@@ -1072,14 +1071,13 @@ cplus_decl_attributes (tree *decl, tree attributes, int flags)\n     SET_IDENTIFIER_TYPE_VALUE (DECL_NAME (*decl), TREE_TYPE (*decl));\n }\n \f\n-/* Walks through the namespace- or function-scope anonymous union OBJECT,\n-   building appropriate ALIAS_DECLs.  Returns one of the fields for use in\n-   the mangled name.  */\n+/* Walks through the namespace- or function-scope anonymous union\n+   OBJECT, with the indicated TYPE, building appropriate ALIAS_DECLs.\n+   Returns one of the fields for use in the mangled name.  */\n \n static tree\n-build_anon_union_vars (tree object)\n+build_anon_union_vars (tree type, tree object)\n {\n-  tree type = TREE_TYPE (object);\n   tree main_decl = NULL_TREE;\n   tree field;\n \n@@ -1127,7 +1125,7 @@ build_anon_union_vars (tree object)\n \t  decl = pushdecl (decl);\n \t}\n       else if (ANON_AGGR_TYPE_P (TREE_TYPE (field)))\n-\tdecl = build_anon_union_vars (ref);\n+\tdecl = build_anon_union_vars (TREE_TYPE (field), ref);\n       else\n \tdecl = 0;\n \n@@ -1167,7 +1165,7 @@ finish_anon_union (tree anon_union_decl)\n       return;\n     }\n \n-  main_decl = build_anon_union_vars (anon_union_decl);\n+  main_decl = build_anon_union_vars (type, anon_union_decl);\n   if (main_decl == NULL_TREE)\n     {\n       warning (\"anonymous union with no members\");"}, {"sha": "888a4e8e0f4f5198db6a6e596b9b226ffb9fbfc0", "filename": "gcc/cp/error.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/744b12b65f6923a713593f404f97384c6093dd94/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/744b12b65f6923a713593f404f97384c6093dd94/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=744b12b65f6923a713593f404f97384c6093dd94", "patch": "@@ -1815,18 +1815,14 @@ dump_expr (tree t, int flags)\n       dump_decl (t, flags);\n       break;\n \n+    case BIND_EXPR:\n     case STMT_EXPR:\n+    case STATEMENT_LIST:\n       /* We don't yet have a way of dumping statements in a\n \t human-readable format.  */\n       pp_string (cxx_pp, \"({...})\");\n       break;\n \n-    case BIND_EXPR:\n-      pp_cxx_left_brace (cxx_pp);\n-      dump_expr (TREE_OPERAND (t, 1), flags & ~TFF_EXPR_IN_PARENS);\n-      pp_cxx_right_brace (cxx_pp);\n-      break;\n-\n     case LOOP_EXPR:\n       pp_string (cxx_pp, \"while (1) { \");\n       dump_expr (TREE_OPERAND (t, 0), flags & ~TFF_EXPR_IN_PARENS);"}, {"sha": "1a8196129845522745b47e7d6d81d886af3e0b27", "filename": "gcc/cp/init.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/744b12b65f6923a713593f404f97384c6093dd94/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/744b12b65f6923a713593f404f97384c6093dd94/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=744b12b65f6923a713593f404f97384c6093dd94", "patch": "@@ -1570,17 +1570,17 @@ build_offset_ref (tree type, tree name, bool address_p)\n tree\n integral_constant_value (tree decl)\n {\n-  if ((TREE_CODE (decl) == CONST_DECL\n-      || (TREE_CODE (decl) == VAR_DECL\n-\t  /* And so are variables with a 'const' type -- unless they\n-\t     are also 'volatile'.  */\n-\t  && CP_TYPE_CONST_NON_VOLATILE_P (TREE_TYPE (decl))\n-\t  && DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P (decl)))\n-      && DECL_INITIAL (decl)\n-      && DECL_INITIAL (decl) != error_mark_node\n-      && TREE_TYPE (DECL_INITIAL (decl))\n-      && INTEGRAL_OR_ENUMERATION_TYPE_P (TREE_TYPE (decl)))\n-    return DECL_INITIAL (decl);\n+  while ((TREE_CODE (decl) == CONST_DECL\n+\t  || (TREE_CODE (decl) == VAR_DECL\n+\t      /* And so are variables with a 'const' type -- unless they\n+\t\t are also 'volatile'.  */\n+\t      && CP_TYPE_CONST_NON_VOLATILE_P (TREE_TYPE (decl))\n+\t      && DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P (decl)))\n+\t && DECL_INITIAL (decl)\n+\t && DECL_INITIAL (decl) != error_mark_node\n+\t && TREE_TYPE (DECL_INITIAL (decl))\n+\t && INTEGRAL_OR_ENUMERATION_TYPE_P (TREE_TYPE (decl)))\n+    decl = DECL_INITIAL (decl);\n   return decl;\n }\n "}, {"sha": "765991fb482148d767fbfd515f7027283507c2b0", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/744b12b65f6923a713593f404f97384c6093dd94/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/744b12b65f6923a713593f404f97384c6093dd94/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=744b12b65f6923a713593f404f97384c6093dd94", "patch": "@@ -12842,9 +12842,17 @@ cp_parser_class_head (cp_parser* parser,\n     CLASSTYPE_DECLARED_CLASS (type) = (class_key == class_type);\n   cp_parser_check_class_key (class_key, type);\n \n+  /* If this type was already complete, and we see another definition,\n+     that's an error.  */\n+  if (type != error_mark_node && COMPLETE_TYPE_P (type))\n+    {\n+      error (\"redefinition of %q#T\", type);\n+      cp_error_at (\"previous definition of %q#T\", type);\n+      type = error_mark_node;\n+    }\n+\n   /* We will have entered the scope containing the class; the names of\n-     base classes should be looked up in that context.  For example,\n-     given:\n+     base classes should be looked up in that context.  For example:\n \n        struct A { struct B {}; struct C; };\n        struct A::C : B {};"}, {"sha": "2daff6f02e0e863d04378ad42660f3b153aba427", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/744b12b65f6923a713593f404f97384c6093dd94/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/744b12b65f6923a713593f404f97384c6093dd94/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=744b12b65f6923a713593f404f97384c6093dd94", "patch": "@@ -2125,15 +2125,6 @@ begin_class_definition (tree t)\n       pushtag (make_anon_name (), t, 0);\n     }\n \n-  /* If this type was already complete, and we see another definition,\n-     that's an error.  */\n-  if (COMPLETE_TYPE_P (t))\n-    {\n-      error (\"redefinition of %q#T\", t);\n-      cp_error_at (\"previous definition of %q#T\", t);\n-      return error_mark_node;\n-    }\n-\n   /* Update the location of the decl.  */\n   DECL_SOURCE_LOCATION (TYPE_NAME (t)) = input_location;\n   "}, {"sha": "c72149c86711801eb1b7c6f8cc70cded441af7f0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/744b12b65f6923a713593f404f97384c6093dd94/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/744b12b65f6923a713593f404f97384c6093dd94/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=744b12b65f6923a713593f404f97384c6093dd94", "patch": "@@ -1,3 +1,19 @@\n+2005-02-22  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/19991\n+\t* g++.dg/parse/constant7.C: New test.\n+\n+\tPR c++/20152\n+\t* g++.dg/parse/error27.C: New test.\n+\t* g++.dg/template/qualttp15.C: Adjust error markers.\n+\t* g++.old-deja/g++.other/struct1.C: Likewise.\n+\t\n+\tPR c++/20153\n+\t* g++.dg/template/error17.C: New test.\n+\n+\tPR c++/20148\n+\t* g++.dg/parser/error26.C: New test.\n+\n 2005-02-22  Diego Novillo  <dnovillo@redhat.com>\n \n \tPR tree-optimization/20100"}, {"sha": "c54ad55c1f058de1b5fc1f67ec4f4268ec3d98b9", "filename": "gcc/testsuite/g++.dg/parse/constant7.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/744b12b65f6923a713593f404f97384c6093dd94/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fconstant7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/744b12b65f6923a713593f404f97384c6093dd94/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fconstant7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fconstant7.C?ref=744b12b65f6923a713593f404f97384c6093dd94", "patch": "@@ -0,0 +1,9 @@\n+// PR c++/19991\n+ \n+enum { e = 1 };\n+\n+template<typename> struct A\n+{\n+  static const int i = e;\n+  char a[i];\n+};"}, {"sha": "6e2b897d92b5cce43c84c4f1cdcfe5a0e7b2e91c", "filename": "gcc/testsuite/g++.dg/parse/error26.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/744b12b65f6923a713593f404f97384c6093dd94/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror26.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/744b12b65f6923a713593f404f97384c6093dd94/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror26.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror26.C?ref=744b12b65f6923a713593f404f97384c6093dd94", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/20148\n+// { dg-options \"\" }\n+\n+void foo()\n+{\n+  if (({int c[2];})) ; // { dg-error \"\\{\\.\\.\\.\\}\" }\n+}\n+\n+void bar()\n+{\n+  if (({})); // { dg-error \"\\{\\.\\.\\.\\}\" }\n+}"}, {"sha": "f52d3cecce67b62105d0c4e466eb5ba66132b4bb", "filename": "gcc/testsuite/g++.dg/parse/error27.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/744b12b65f6923a713593f404f97384c6093dd94/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror27.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/744b12b65f6923a713593f404f97384c6093dd94/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror27.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror27.C?ref=744b12b65f6923a713593f404f97384c6093dd94", "patch": "@@ -0,0 +1,7 @@\n+// PR c++/20152\n+\n+struct KrSelectionMode {  virtual void init() = 0; }; // { dg-error \"previous definition\" }\n+struct KrKDESelectionMode : public KrSelectionMode { void init() { } }; // { dg-error \"previous definition\" }\n+struct KrSelectionMode {  virtual void init() = 0; }; // { dg-error \"\" }\n+struct KrKDESelectionMode : public KrSelectionMode { void init() { } }; // { dg-error \"\" }\n+KrKDESelectionMode krKDESelectionMode;"}, {"sha": "24b364455fda742d64d06254221a3e31a185c767", "filename": "gcc/testsuite/g++.dg/template/error17.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/744b12b65f6923a713593f404f97384c6093dd94/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/744b12b65f6923a713593f404f97384c6093dd94/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror17.C?ref=744b12b65f6923a713593f404f97384c6093dd94", "patch": "@@ -0,0 +1,8 @@\n+// PR c++/20153\n+\n+template <typename T>\n+void\n+foo()\n+{\n+  union { struct { }; }; // { dg-error \"\" }\n+}"}, {"sha": "0f97c32fcb87df725cbc7b97a87c4fbf2a557114", "filename": "gcc/testsuite/g++.dg/template/qualttp15.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/744b12b65f6923a713593f404f97384c6093dd94/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/744b12b65f6923a713593f404f97384c6093dd94/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp15.C?ref=744b12b65f6923a713593f404f97384c6093dd94", "patch": "@@ -17,8 +17,8 @@ template <class T> struct X<T::template B>\n \tT z;\n };\n \n-template <class T> struct X<T::template B>\n-{\t// { dg-error \"redefinition\" }\n+template <class T> struct X<T::template B> // { dg-error \"redefinition\" }\n+{\t\n \tT z;\n };\n "}, {"sha": "b1f943f604fc41baf6a5f4e5b0b1cd39b5858e67", "filename": "gcc/testsuite/g++.old-deja/g++.other/struct1.C", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/744b12b65f6923a713593f404f97384c6093dd94/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fstruct1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/744b12b65f6923a713593f404f97384c6093dd94/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fstruct1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fstruct1.C?ref=744b12b65f6923a713593f404f97384c6093dd94", "patch": "@@ -9,34 +9,34 @@\n class Y\n {   // { dg-error \"\" } previous definition\n };\n-class Y\n-{   // { dg-error \"\" } redefinition\n+class Y // { dg-error \"\" } redefinition\n+{   \n };\n \n template<class T> class X\n {   // { dg-error \"\" } previous definition\n };\n-template<class T> class X\n-{   // { dg-error \"\" } redefinition\n+template<class T> class X // { dg-error \"\" } redefinition\n+{   \n };\n \n template<class T> class X<T *>\n {   // { dg-error \"\" } previous definition\n };\n-template<class T> class X<T *>\n-{   // { dg-error \"\" } redefinition\n+template<class T> class X<T *> // { dg-error \"\" } redefinition\n+{   \n };\n \n template<> class X<int>\n {   // { dg-error \"\" } previous definition\n };\n-template<> class X<int>\n-{   // { dg-error \"\" } redefinition\n+template<> class X<int> // { dg-error \"\" } redefinition\n+{   \n };\n \n template<> class X<int *>\n {   // { dg-error \"\" } previous definition\n };\n-template<> class X<int *>\n-{   // { dg-error \"\" } redefinition\n+template<> class X<int *> // { dg-error \"\" } redefinition\n+{   \n };"}]}