{"sha": "8b50d7a47624030d87645237c60bd8f7ac78b2ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGI1MGQ3YTQ3NjI0MDMwZDg3NjQ1MjM3YzYwYmQ4ZjdhYzc4YjJlYw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-04-14T20:04:03Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-04-17T15:09:38Z"}, "message": "aarch64: Tweak SVE load/store costs\n\nWe were seeing performance regressions on 256-bit SVE with code like:\n\n  for (int i = 0; i < count; ++i)\n  #pragma GCC unroll 128\n    for (int j = 0; j < 128; ++j)\n      *dst++ = 1;\n\n(derived from lmbench).\n\nFor 128-bit SVE, it's clearly better to use Advanced SIMD STPs here,\nsince they can store 256 bits at a time.  We already do this for\n-msve-vector-bits=128 because in that case Advanced SIMD comes first\nin autovectorize_vector_modes.\n\nIf we handled full-loop predication well for this kind of loop,\nthe choice between Advanced SIMD and 256-bit SVE would be mostly\na wash, since both of them could store 256 bits at a time.  However,\nSVE would still have the extra prologue overhead of setting up the\npredicate, so Advanced SIMD would still be the natural choice.\n\nAs things stand though, we don't handle full-loop predication well\nfor this kind of loop, so the 256-bit SVE code is significantly worse.\nSomething to fix for GCC 11 (hopefully).  However, even though we\naccount for the overhead of predication in the cost model, the SVE\nversion (wrongly) appeared to need half the number of stores.\nThat was enough to drown out the predication overhead and meant\nthat we'd pick the SVE code over the Advanced SIMD code.\n\n512-bit SVE has a clear advantage over Advanced SIMD, so we should\ncontinue using SVE there.\n\nThis patch tries to account for this in the cost model.  It's a bit\nof a compromise; see the comment in the patch for more details.\n\n2020-04-17  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* config/aarch64/aarch64.c (aarch64_advsimd_ldp_stp_p): New function.\n\t(aarch64_sve_adjust_stmt_cost): Add a vectype parameter.  Double the\n\tcost of load and store insns if one loop iteration has enough scalar\n\telements to use an Advanced SIMD LDP or STP.\n\t(aarch64_add_stmt_cost): Update call accordingly.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/cost_model_2.c: New test.\n\t* gcc.target/aarch64/sve/cost_model_3.c: Likewise.\n\t* gcc.target/aarch64/sve/cost_model_4.c: Likewise.\n\t* gcc.target/aarch64/sve/cost_model_5.c: Likewise.\n\t* gcc.target/aarch64/sve/cost_model_6.c: Likewise.\n\t* gcc.target/aarch64/sve/cost_model_7.c: Likewise.", "tree": {"sha": "00f4b13286baea1366f15755050f0a7f8e6f7913", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/00f4b13286baea1366f15755050f0a7f8e6f7913"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b50d7a47624030d87645237c60bd8f7ac78b2ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b50d7a47624030d87645237c60bd8f7ac78b2ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b50d7a47624030d87645237c60bd8f7ac78b2ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b50d7a47624030d87645237c60bd8f7ac78b2ec/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e3897490e0f99b22a2813cfb34d59a1ea71ff68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e3897490e0f99b22a2813cfb34d59a1ea71ff68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e3897490e0f99b22a2813cfb34d59a1ea71ff68"}], "stats": {"total": 168, "additions": 164, "deletions": 4}, "files": [{"sha": "75540e89b69e8e4538ef5ee8fc932816e734dc34", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b50d7a47624030d87645237c60bd8f7ac78b2ec/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b50d7a47624030d87645237c60bd8f7ac78b2ec/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8b50d7a47624030d87645237c60bd8f7ac78b2ec", "patch": "@@ -1,3 +1,11 @@\n+2020-04-17  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_advsimd_ldp_stp_p): New function.\n+\t(aarch64_sve_adjust_stmt_cost): Add a vectype parameter.  Double the\n+\tcost of load and store insns if one loop iteration has enough scalar\n+\telements to use an Advanced SIMD LDP or STP.\n+\t(aarch64_add_stmt_cost): Update call accordingly.\n+\n 2020-04-17  Jakub Jelinek  <jakub@redhat.com>\n \t    Jeff Law  <law@redhat.com>\n "}, {"sha": "24c055df0dcb25a30cbc79b32c24bd73351d9179", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 73, "deletions": 4, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b50d7a47624030d87645237c60bd8f7ac78b2ec/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b50d7a47624030d87645237c60bd8f7ac78b2ec/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=8b50d7a47624030d87645237c60bd8f7ac78b2ec", "patch": "@@ -13518,6 +13518,32 @@ aarch64_builtin_vectorization_cost (enum vect_cost_for_stmt type_of_cost,\n     }\n }\n \n+/* Return true if creating multiple copies of STMT_INFO for Advanced SIMD\n+   vectors would produce a series of LDP or STP operations.  KIND is the\n+   kind of statement that STMT_INFO represents.  */\n+static bool\n+aarch64_advsimd_ldp_stp_p (enum vect_cost_for_stmt kind,\n+\t\t\t   stmt_vec_info stmt_info)\n+{\n+  switch (kind)\n+    {\n+    case vector_load:\n+    case vector_store:\n+    case unaligned_load:\n+    case unaligned_store:\n+      break;\n+\n+    default:\n+      return false;\n+    }\n+\n+  if (aarch64_tune_params.extra_tuning_flags\n+      & AARCH64_EXTRA_TUNE_NO_LDP_STP_QREGS)\n+    return false;\n+\n+  return is_gimple_assign (stmt_info->stmt);\n+}\n+\n /* Return true if STMT_INFO extends the result of a load.  */\n static bool\n aarch64_extending_load_p (stmt_vec_info stmt_info)\n@@ -13556,10 +13582,12 @@ aarch64_integer_truncation_p (stmt_vec_info stmt_info)\n }\n \n /* STMT_COST is the cost calculated by aarch64_builtin_vectorization_cost\n-   for STMT_INFO, which has cost kind KIND.  Adjust the cost as necessary\n-   for SVE targets.  */\n+   for STMT_INFO, which has cost kind KIND and which when vectorized would\n+   operate on vector type VECTYPE.  Adjust the cost as necessary for SVE\n+   targets.  */\n static unsigned int\n-aarch64_sve_adjust_stmt_cost (vect_cost_for_stmt kind, stmt_vec_info stmt_info,\n+aarch64_sve_adjust_stmt_cost (vect_cost_for_stmt kind,\n+\t\t\t      stmt_vec_info stmt_info, tree vectype,\n \t\t\t      unsigned int stmt_cost)\n {\n   /* Unlike vec_promote_demote, vector_stmt conversions do not change the\n@@ -13578,6 +13606,46 @@ aarch64_sve_adjust_stmt_cost (vect_cost_for_stmt kind, stmt_vec_info stmt_info,\n   if (kind == vector_stmt && aarch64_integer_truncation_p (stmt_info))\n     stmt_cost = 0;\n \n+  /* Advanced SIMD can load and store pairs of registers using LDP and STP,\n+     but there are no equivalent instructions for SVE.  This means that\n+     (all other things being equal) 128-bit SVE needs twice as many load\n+     and store instructions as Advanced SIMD in order to process vector pairs.\n+\n+     Also, scalar code can often use LDP and STP to access pairs of values,\n+     so it is too simplistic to say that one SVE load or store replaces\n+     VF scalar loads and stores.\n+\n+     Ideally we would account for this in the scalar and Advanced SIMD\n+     costs by making suitable load/store pairs as cheap as a single\n+     load/store.  However, that would be a very invasive change and in\n+     practice it tends to stress other parts of the cost model too much.\n+     E.g. stores of scalar constants currently count just a store,\n+     whereas stores of vector constants count a store and a vec_init.\n+     This is an artificial distinction for AArch64, where stores of\n+     nonzero scalar constants need the same kind of register invariant\n+     as vector stores.\n+\n+     An alternative would be to double the cost of any SVE loads and stores\n+     that could be paired in Advanced SIMD (and possibly also paired in\n+     scalar code).  But this tends to stress other parts of the cost model\n+     in the same way.  It also means that we can fall back to Advanced SIMD\n+     even if full-loop predication would have been useful.\n+\n+     Here we go for a more conservative version: double the costs of SVE\n+     loads and stores if one iteration of the scalar loop processes enough\n+     elements for it to use a whole number of Advanced SIMD LDP or STP\n+     instructions.  This makes it very likely that the VF would be 1 for\n+     Advanced SIMD, and so no epilogue should be needed.  */\n+  if (STMT_VINFO_GROUPED_ACCESS (stmt_info))\n+    {\n+      stmt_vec_info first = DR_GROUP_FIRST_ELEMENT (stmt_info);\n+      unsigned int count = DR_GROUP_SIZE (first) - DR_GROUP_GAP (first);\n+      unsigned int elt_bits = GET_MODE_UNIT_BITSIZE (TYPE_MODE (vectype));\n+      if (multiple_p (count * elt_bits, 256)\n+\t  && aarch64_advsimd_ldp_stp_p (kind, stmt_info))\n+\tstmt_cost *= 2;\n+    }\n+\n   return stmt_cost;\n }\n \n@@ -13597,7 +13665,8 @@ aarch64_add_stmt_cost (void *data, int count, enum vect_cost_for_stmt kind,\n \t    aarch64_builtin_vectorization_cost (kind, vectype, misalign);\n \n       if (stmt_info && vectype && aarch64_sve_mode_p (TYPE_MODE (vectype)))\n-\tstmt_cost = aarch64_sve_adjust_stmt_cost (kind, stmt_info, stmt_cost);\n+\tstmt_cost = aarch64_sve_adjust_stmt_cost (kind, stmt_info, vectype,\n+\t\t\t\t\t\t  stmt_cost);\n \n       /* Statements in an inner loop relative to the loop being\n \t vectorized are weighted more heavily.  The value here is"}, {"sha": "6c96253c1d190a76f63524fa0cb45c985e559422", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b50d7a47624030d87645237c60bd8f7ac78b2ec/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b50d7a47624030d87645237c60bd8f7ac78b2ec/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8b50d7a47624030d87645237c60bd8f7ac78b2ec", "patch": "@@ -1,3 +1,12 @@\n+2020-04-17  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/sve/cost_model_2.c: New test.\n+\t* gcc.target/aarch64/sve/cost_model_3.c: Likewise.\n+\t* gcc.target/aarch64/sve/cost_model_4.c: Likewise.\n+\t* gcc.target/aarch64/sve/cost_model_5.c: Likewise.\n+\t* gcc.target/aarch64/sve/cost_model_6.c: Likewise.\n+\t* gcc.target/aarch64/sve/cost_model_7.c: Likewise.\n+\n 2020-04-17  Jakub Jelinek  <jakub@redhat.com>\n \t    Jeff Law  <law@redhat.com>\n "}, {"sha": "d9d707893d88205bb47029b5ba26106b3756cfd2", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cost_model_2.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b50d7a47624030d87645237c60bd8f7ac78b2ec/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcost_model_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b50d7a47624030d87645237c60bd8f7ac78b2ec/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcost_model_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcost_model_2.c?ref=8b50d7a47624030d87645237c60bd8f7ac78b2ec", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-options \"-O3 -msve-vector-bits=128\" } */\n+\n+void\n+vset (int *restrict dst, int *restrict src, int count)\n+{\n+  for (int i = 0; i < count; ++i)\n+#pragma GCC unroll 4\n+    for (int j = 0; j < 4; ++j)\n+      *dst++ = 1;\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tst1w\\tz} 1 } } */"}, {"sha": "dd7d1cf3f678ce52ad2292ab4f7524205095f57e", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cost_model_3.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b50d7a47624030d87645237c60bd8f7ac78b2ec/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcost_model_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b50d7a47624030d87645237c60bd8f7ac78b2ec/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcost_model_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcost_model_3.c?ref=8b50d7a47624030d87645237c60bd8f7ac78b2ec", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-options \"-O3 -msve-vector-bits=128\" } */\n+\n+void\n+vset (int *restrict dst, int *restrict src, int count)\n+{\n+  for (int i = 0; i < count; ++i)\n+#pragma GCC unroll 8\n+    for (int j = 0; j < 8; ++j)\n+      *dst++ = 1;\n+}\n+\n+/* { dg-final { scan-assembler-not {\\tst1w\\tz} } } */\n+/* { dg-final { scan-assembler-times {\\tstp\\tq} 1 } } */"}, {"sha": "a7ecfe3a0de63fb116759c9ba2502dd400d3ca7d", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cost_model_4.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b50d7a47624030d87645237c60bd8f7ac78b2ec/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcost_model_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b50d7a47624030d87645237c60bd8f7ac78b2ec/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcost_model_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcost_model_4.c?ref=8b50d7a47624030d87645237c60bd8f7ac78b2ec", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-options \"-O3 -msve-vector-bits=256\" } */\n+\n+void\n+vset (int *restrict dst, int *restrict src, int count)\n+{\n+  for (int i = 0; i < count; ++i)\n+#pragma GCC unroll 8\n+    for (int j = 0; j < 8; ++j)\n+      *dst++ = 1;\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tst1w\\tz} 1 } } */"}, {"sha": "250ca837324995ca308728512a6aee92c7736d9b", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cost_model_5.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b50d7a47624030d87645237c60bd8f7ac78b2ec/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcost_model_5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b50d7a47624030d87645237c60bd8f7ac78b2ec/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcost_model_5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcost_model_5.c?ref=8b50d7a47624030d87645237c60bd8f7ac78b2ec", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-options \"-O3 -msve-vector-bits=256\" } */\n+\n+void\n+vset (int *restrict dst, int *restrict src, int count)\n+{\n+  for (int i = 0; i < count; ++i)\n+#pragma GCC unroll 16\n+    for (int j = 0; j < 16; ++j)\n+      *dst++ = 1;\n+}\n+\n+/* { dg-final { scan-assembler-not {\\tst1w\\tz} } } */\n+/* { dg-final { scan-assembler-times {\\tstp\\tq} 2 } } */"}, {"sha": "565e1e3ed3951afc7bb8d523a6fd6218f8f2304e", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cost_model_6.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b50d7a47624030d87645237c60bd8f7ac78b2ec/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcost_model_6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b50d7a47624030d87645237c60bd8f7ac78b2ec/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcost_model_6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcost_model_6.c?ref=8b50d7a47624030d87645237c60bd8f7ac78b2ec", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-options \"-O3 -msve-vector-bits=512\" } */\n+\n+void\n+vset (int *restrict dst, int *restrict src, int count)\n+{\n+  for (int i = 0; i < count; ++i)\n+#pragma GCC unroll 16\n+    for (int j = 0; j < 16; ++j)\n+      *dst++ = 1;\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tst1w\\tz} 1 } } */"}, {"sha": "31057c0cdc7435d4447dd6ca3d2cbca03d891816", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cost_model_7.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b50d7a47624030d87645237c60bd8f7ac78b2ec/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcost_model_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b50d7a47624030d87645237c60bd8f7ac78b2ec/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcost_model_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcost_model_7.c?ref=8b50d7a47624030d87645237c60bd8f7ac78b2ec", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-options \"-O3 -msve-vector-bits=512\" } */\n+\n+void\n+vset (int *restrict dst, int *restrict src, int count)\n+{\n+  for (int i = 0; i < count; ++i)\n+#pragma GCC unroll 32\n+    for (int j = 0; j < 32; ++j)\n+      *dst++ = 1;\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tst1w\\tz} 2 } } */"}]}