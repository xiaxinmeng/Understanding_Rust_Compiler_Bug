{"sha": "1ec0c6076c33fa776614e7efb44f0d0cafa85d51", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWVjMGM2MDc2YzMzZmE3NzY2MTRlN2VmYjQ0ZjBkMGNhZmE4NWQ1MQ==", "commit": {"author": {"name": "Waldek Hebisch", "email": "hebisch@math.uni.wroc.pl", "date": "2003-11-10T08:11:47Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2003-11-10T08:11:47Z"}, "message": "re PR target/12865 (`mprotect' call to make trampoline executable may fail)\n\n\tPR target/12865\n\t* config/sparc/sparc.c (sparc_initialize_trampoline): Call\n\t__enable_execute_stack only after writing onto the stack.\n\t(sparc64_initialize_trampoline): Likewise.\n\nFrom-SVN: r73402", "tree": {"sha": "330f8625ffee6edd1608675f088c55cb673ef0d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/330f8625ffee6edd1608675f088c55cb673ef0d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ec0c6076c33fa776614e7efb44f0d0cafa85d51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ec0c6076c33fa776614e7efb44f0d0cafa85d51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ec0c6076c33fa776614e7efb44f0d0cafa85d51", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ec0c6076c33fa776614e7efb44f0d0cafa85d51/comments", "author": {"login": "hebisch", "id": 423725, "node_id": "MDQ6VXNlcjQyMzcyNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/423725?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hebisch", "html_url": "https://github.com/hebisch", "followers_url": "https://api.github.com/users/hebisch/followers", "following_url": "https://api.github.com/users/hebisch/following{/other_user}", "gists_url": "https://api.github.com/users/hebisch/gists{/gist_id}", "starred_url": "https://api.github.com/users/hebisch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hebisch/subscriptions", "organizations_url": "https://api.github.com/users/hebisch/orgs", "repos_url": "https://api.github.com/users/hebisch/repos", "events_url": "https://api.github.com/users/hebisch/events{/privacy}", "received_events_url": "https://api.github.com/users/hebisch/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9883226bc5ab8572dd3960acbbbb8506ff20f24f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9883226bc5ab8572dd3960acbbbb8506ff20f24f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9883226bc5ab8572dd3960acbbbb8506ff20f24f"}], "stats": {"total": 90, "additions": 79, "deletions": 11}, "files": [{"sha": "268e61f826d56f783af11acc11fc2fcb8ec646bf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec0c6076c33fa776614e7efb44f0d0cafa85d51/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec0c6076c33fa776614e7efb44f0d0cafa85d51/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1ec0c6076c33fa776614e7efb44f0d0cafa85d51", "patch": "@@ -1,3 +1,10 @@\n+2003-11-10  Waldek Hebisch  <hebisch@math.uni.wroc.pl>\n+\n+\tPR target/12865\n+\t* config/sparc/sparc.c (sparc_initialize_trampoline): Call\n+\t__enable_execute_stack only after writing onto the stack.\n+\t(sparc64_initialize_trampoline): Likewise.\n+\n 2003-11-09  Roger Sayle  <roger@eyesopen.com>\n \n \t* loop.c (check_dbra_loop): Try swapping the comparison operands"}, {"sha": "f821a5a76825fc6d25d88c6bd2a74138f2e81a76", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec0c6076c33fa776614e7efb44f0d0cafa85d51/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec0c6076c33fa776614e7efb44f0d0cafa85d51/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=1ec0c6076c33fa776614e7efb44f0d0cafa85d51", "patch": "@@ -7087,7 +7087,7 @@ sparc_type_code (register tree type)\n void\n sparc_initialize_trampoline (rtx tramp, rtx fnaddr, rtx cxt)\n {\n-  /* SPARC 32 bit trampoline:\n+  /* SPARC 32-bit trampoline:\n \n  \tsethi\t%hi(fn), %g1\n  \tsethi\t%hi(static), %g2\n@@ -7097,10 +7097,6 @@ sparc_initialize_trampoline (rtx tramp, rtx fnaddr, rtx cxt)\n     SETHI i,r  = 00rr rrr1 00ii iiii iiii iiii iiii iiii\n     JMPL r+i,d = 10dd ddd1 1100 0rrr rr1i iiii iiii iiii\n    */\n-#ifdef TRANSFER_FROM_TRAMPOLINE\n-  emit_library_call (gen_rtx (SYMBOL_REF, Pmode, \"__enable_execute_stack\"),\n-                     LCT_NORMAL, VOIDmode, 1, tramp, Pmode);\n-#endif\n \n   emit_move_insn\n     (gen_rtx_MEM (SImode, plus_constant (tramp, 0)),\n@@ -7139,21 +7135,25 @@ sparc_initialize_trampoline (rtx tramp, rtx fnaddr, rtx cxt)\n       && sparc_cpu != PROCESSOR_ULTRASPARC3)\n     emit_insn (gen_flush (validize_mem (gen_rtx_MEM (SImode,\n \t\t\t\t\t\t     plus_constant (tramp, 8)))));\n+\n+  /* Call __enable_execute_stack after writing onto the stack to make sure\n+     the stack address is accessible.  */\n+#ifdef TRANSFER_FROM_TRAMPOLINE\n+  emit_library_call (gen_rtx (SYMBOL_REF, Pmode, \"__enable_execute_stack\"),\n+                     LCT_NORMAL, VOIDmode, 1, tramp, Pmode);\n+#endif\n+\n }\n \n-/* The 64 bit version is simpler because it makes more sense to load the\n+/* The 64-bit version is simpler because it makes more sense to load the\n    values as \"immediate\" data out of the trampoline.  It's also easier since\n    we can read the PC without clobbering a register.  */\n \n void\n sparc64_initialize_trampoline (rtx tramp, rtx fnaddr, rtx cxt)\n {\n-#ifdef TRANSFER_FROM_TRAMPOLINE\n-  emit_library_call (gen_rtx (SYMBOL_REF, Pmode, \"__enable_execute_stack\"),\n-                     LCT_NORMAL, VOIDmode, 1, tramp, Pmode);\n-#endif\n+  /* SPARC 64-bit trampoline:\n \n-  /*\n \trd\t%pc, %g1\n \tldx\t[%g1+24], %g5\n \tjmp\t%g5\n@@ -7176,6 +7176,13 @@ sparc64_initialize_trampoline (rtx tramp, rtx fnaddr, rtx cxt)\n   if (sparc_cpu != PROCESSOR_ULTRASPARC\n       && sparc_cpu != PROCESSOR_ULTRASPARC3)\n     emit_insn (gen_flushdi (validize_mem (gen_rtx_MEM (DImode, plus_constant (tramp, 8)))));\n+\n+  /* Call __enable_execute_stack after writing onto the stack to make sure\n+     the stack address is accessible.  */\n+#ifdef TRANSFER_FROM_TRAMPOLINE\n+  emit_library_call (gen_rtx (SYMBOL_REF, Pmode, \"__enable_execute_stack\"),\n+                     LCT_NORMAL, VOIDmode, 1, tramp, Pmode);\n+#endif\n }\n \f\n /* Subroutines to support a flat (single) register window calling"}, {"sha": "f69b0d67f7298228d5b143265086ec626ceaf698", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec0c6076c33fa776614e7efb44f0d0cafa85d51/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec0c6076c33fa776614e7efb44f0d0cafa85d51/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1ec0c6076c33fa776614e7efb44f0d0cafa85d51", "patch": "@@ -1,3 +1,7 @@\n+2003-11-10  Waldek Hebisch  <hebisch@math.uni.wroc.pl>\n+\n+\t* gcc.dg/trampoline-1.c: New test.\n+\n 2003-11-09  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \t* gcc.c-torture/compile/200031109-1.c: New test."}, {"sha": "dbbd8509bff002de636ed823103af0764d1ed686", "filename": "gcc/testsuite/gcc.dg/trampoline-1.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec0c6076c33fa776614e7efb44f0d0cafa85d51/gcc%2Ftestsuite%2Fgcc.dg%2Ftrampoline-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec0c6076c33fa776614e7efb44f0d0cafa85d51/gcc%2Ftestsuite%2Fgcc.dg%2Ftrampoline-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftrampoline-1.c?ref=1ec0c6076c33fa776614e7efb44f0d0cafa85d51", "patch": "@@ -0,0 +1,50 @@\n+/* PR target/12865 */\n+/* Origin: Waldek Hebisch <hebisch@math.uni.wroc.pl> */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+\n+/* This used to fail on various versions of Solaris 2 because the\n+   trampoline couldn't be made executable.  */\n+\n+extern void abort(void);\n+\n+void foo (void)\n+{\n+  const int correct[1100] = {1, 0, -2, 0, 1, 0, 1, -1, -10, -30, -67};\n+  int i;\n+\n+  double x1 (void) {return 1; }\n+  double x2 (void) {return -1;}\n+  double x3 (void) {return -1;}\n+  double x4 (void) {return 1; }\n+  double x5 (void) {return 0; }\n+\n+  typedef double pfun(void);\n+\n+  double a (int k, pfun x1, pfun x2, pfun x3, pfun x4, pfun x5)\n+  {\n+    double b (void)\n+    {\n+      k = k - 1;\n+      return a (k, b, x1, x2, x3, x4 );\n+    }\n+\n+    if (k <= 0)\n+      return x4 () + x5 ();\n+    else\n+      return b ();\n+  }\n+\n+  for (i=0; i<=10; i++)\n+  {\n+    if (fabs(a( i, x1, x2, x3, x4, x5 ) - correct [i]) > 0.1)\n+      abort();\n+  }\n+}\n+\n+int main (void)\n+{\n+  foo ();\n+  return 0;\n+}"}]}