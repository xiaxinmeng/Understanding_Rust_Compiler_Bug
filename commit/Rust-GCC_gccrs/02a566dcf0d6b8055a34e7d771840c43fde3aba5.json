{"sha": "02a566dcf0d6b8055a34e7d771840c43fde3aba5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDJhNTY2ZGNmMGQ2YjgwNTVhMzRlN2Q3NzE4NDBjNDNmZGUzYWJhNQ==", "commit": {"author": {"name": "Dale Johannesen", "email": "dalej@apple.com", "date": "2002-03-29T22:36:56Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-03-29T22:36:56Z"}, "message": "* loop.c (combine_movables): Do allow combination of pseudos.\n\nFrom-SVN: r51581", "tree": {"sha": "0f6e17e6827fb1922e8bc963f507e8a266753a48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f6e17e6827fb1922e8bc963f507e8a266753a48"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/02a566dcf0d6b8055a34e7d771840c43fde3aba5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02a566dcf0d6b8055a34e7d771840c43fde3aba5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02a566dcf0d6b8055a34e7d771840c43fde3aba5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02a566dcf0d6b8055a34e7d771840c43fde3aba5/comments", "author": null, "committer": null, "parents": [{"sha": "5bebbee7338bb2f91e0348a9d963ee85ecabfb9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bebbee7338bb2f91e0348a9d963ee85ecabfb9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bebbee7338bb2f91e0348a9d963ee85ecabfb9a"}], "stats": {"total": 13, "additions": 9, "deletions": 4}, "files": [{"sha": "3d0da3609b3142aea8ab620d2b1a70f47d3c53c2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02a566dcf0d6b8055a34e7d771840c43fde3aba5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02a566dcf0d6b8055a34e7d771840c43fde3aba5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=02a566dcf0d6b8055a34e7d771840c43fde3aba5", "patch": "@@ -1,3 +1,7 @@\n+2002-03-29  Dale Johannesen <dalej@apple.com>\n+\n+\t* loop.c (combine_movables): Do allow combination of pseudos.\n+\n 2002-03-29  Loren J. Rittle  <ljrittle@acm.org>\n \n \t* config.gcc (*-*-freebsd*): Enable creation of libgcc_s.so."}, {"sha": "99281d0dba408e56702ede56edbf1b90a4fc34b0", "filename": "gcc/loop.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02a566dcf0d6b8055a34e7d771840c43fde3aba5/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02a566dcf0d6b8055a34e7d771840c43fde3aba5/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=02a566dcf0d6b8055a34e7d771840c43fde3aba5", "patch": "@@ -1446,10 +1446,13 @@ combine_movables (movables, regs)\n \n   /* Regs that are set more than once are not allowed to match\n      or be matched.  I'm no longer sure why not.  */\n+  /* Only pseudo registers are allowed to match or be matched,\n+     since move_movables does not validate the change.  */\n   /* Perhaps testing m->consec_sets would be more appropriate here?  */\n \n   for (m = movables->head; m; m = m->next)\n     if (m->match == 0 && regs->array[m->regno].n_times_set == 1\n+\t&& m->regno >= FIRST_PSEUDO_REGISTER\n \t&& !m->partial)\n       {\n \tstruct movable *m1;\n@@ -1461,11 +1464,9 @@ combine_movables (movables, regs)\n \t/* We want later insns to match the first one.  Don't make the first\n \t   one match any later ones.  So start this loop at m->next.  */\n \tfor (m1 = m->next; m1; m1 = m1->next)\n-\t  /* ??? HACK!  move_movables does not verify that the replacement\n-\t     is valid, which can have disasterous effects with hard regs\n-\t     and match_dup.  Turn combination off for now.  */\n-\t  if (0 && m != m1 && m1->match == 0\n+\t  if (m != m1 && m1->match == 0\n \t      && regs->array[m1->regno].n_times_set == 1\n+\t      && m1->regno >= FIRST_PSEUDO_REGISTER\n \t      /* A reg used outside the loop mustn't be eliminated.  */\n \t      && !m1->global\n \t      /* A reg used for zero-extending mustn't be eliminated.  */"}]}