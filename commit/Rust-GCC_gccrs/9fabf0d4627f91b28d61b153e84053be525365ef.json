{"sha": "9fabf0d4627f91b28d61b153e84053be525365ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWZhYmYwZDQ2MjdmOTFiMjhkNjFiMTUzZTg0MDUzYmU1MjUzNjVlZg==", "commit": {"author": {"name": "Diego Novillo", "email": "dnovillo@redhat.com", "date": "2005-04-11T15:05:50Z"}, "committer": {"name": "Diego Novillo", "email": "dnovillo@gcc.gnu.org", "date": "2005-04-11T15:05:50Z"}, "message": "re PR tree-optimization/20920 (ICE with eh and VRP)\n\n\n\tPR tree-optimization/20920\n\t* tree-pretty-print.c (dump_generic_node): Show '(ab)' if an\n\tSSA_NAME flows through an abnormal edge.\n\t* tree-vrp.c (infer_value_range): Ignore SSA names that flow\n\tthrough abnormal edges.\n\t(maybe_add_assert_expr): Likewise.\n\n\tPR tree-optimization/20920\n\t* g++.dg/tree-ssa/pr20920.C: New test.\n\nFrom-SVN: r97971", "tree": {"sha": "3ef2ff01848d34cb99c543d718a73a3aaf91f9ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ef2ff01848d34cb99c543d718a73a3aaf91f9ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9fabf0d4627f91b28d61b153e84053be525365ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fabf0d4627f91b28d61b153e84053be525365ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fabf0d4627f91b28d61b153e84053be525365ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fabf0d4627f91b28d61b153e84053be525365ef/comments", "author": null, "committer": null, "parents": [{"sha": "f5db779b2b87248590386d588a1f8c662169d081", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5db779b2b87248590386d588a1f8c662169d081", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5db779b2b87248590386d588a1f8c662169d081"}], "stats": {"total": 59, "additions": 56, "deletions": 3}, "files": [{"sha": "0b840d32060aad6d555b6bd285da416ca1014a2a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fabf0d4627f91b28d61b153e84053be525365ef/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fabf0d4627f91b28d61b153e84053be525365ef/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9fabf0d4627f91b28d61b153e84053be525365ef", "patch": "@@ -1,3 +1,12 @@\n+2005-04-11  Diego Novillo  <dnovillo@redhat.com>\n+\n+\tPR tree-optimization/20920\n+\t* tree-pretty-print.c (dump_generic_node): Show '(ab)' if an\n+\tSSA_NAME flows through an abnormal edge.\n+\t* tree-vrp.c (infer_value_range): Ignore SSA names that flow\n+\tthrough abnormal edges.\n+\t(maybe_add_assert_expr): Likewise.\n+\n 2005-04-11  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* config/s390/s390.h (s390_tune_string, s390_arch_string)"}, {"sha": "50d11b6abb423caa99851eff91c342f085457907", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fabf0d4627f91b28d61b153e84053be525365ef/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fabf0d4627f91b28d61b153e84053be525365ef/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9fabf0d4627f91b28d61b153e84053be525365ef", "patch": "@@ -1,3 +1,8 @@\n+2005-04-11  Diego Novillo  <dnovillo@redhat.com>\n+\n+\tPR tree-optimization/20920\n+\t* g++.dg/tree-ssa/pr20920.C: New test.\n+\n 2005-04-11  Uros Bizjak  <uros@kss-loka.si>\n \n \t* gcc.dg/builtins-53.c: Also check (int)ceil* and"}, {"sha": "02edd282773c9ab74737057c5829f5284aaca1f5", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr20920.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fabf0d4627f91b28d61b153e84053be525365ef/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr20920.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fabf0d4627f91b28d61b153e84053be525365ef/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr20920.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr20920.C?ref=9fabf0d4627f91b28d61b153e84053be525365ef", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+/* This was causing a failure in the out of SSA pass because VRP was\n+   trying to insert assertions for SSA names that flow through\n+   abnormal edges.  */\n+void f(int) __attribute__((__noreturn__));\n+int d(const char *);\n+char * j ();\n+\n+char *\n+foo (int x)\n+{\n+  char *path = __null;\n+  try\n+    {\n+      path = j ();\n+      if (path != __null)\n+        if (d (path) != 0)\n+          f (127);\n+      f (127);\n+    }\n+  catch (...) { }\n+\n+  return path;\n+}"}, {"sha": "5d230822a92ff279a588d9ea2a1e25d7425a62b7", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fabf0d4627f91b28d61b153e84053be525365ef/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fabf0d4627f91b28d61b153e84053be525365ef/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=9fabf0d4627f91b28d61b153e84053be525365ef", "patch": "@@ -1416,6 +1416,8 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n       dump_generic_node (buffer, SSA_NAME_VAR (node), spc, flags, false);\n       pp_string (buffer, \"_\");\n       pp_decimal_int (buffer, SSA_NAME_VERSION (node));\n+      if (SSA_NAME_OCCURS_IN_ABNORMAL_PHI (node))\n+\tpp_string (buffer, \"(ab)\");\n       break;\n \n     case WITH_SIZE_EXPR:"}, {"sha": "3e366d2dc0f3e07921b7de2c01cfcf5724fc675f", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fabf0d4627f91b28d61b153e84053be525365ef/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fabf0d4627f91b28d61b153e84053be525365ef/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=9fabf0d4627f91b28d61b153e84053be525365ef", "patch": "@@ -1280,6 +1280,11 @@ fp_predicate (tree expr)\n static tree\n infer_value_range (tree stmt, tree op)\n {\n+  /* Do not attempt to infer anything in names that flow through\n+     abnormal edges.  */\n+  if (SSA_NAME_OCCURS_IN_ABNORMAL_PHI (op))\n+    return NULL_TREE;\n+\n   if (POINTER_TYPE_P (TREE_TYPE (op)))\n     {\n       bool is_store;\n@@ -1385,7 +1390,7 @@ has_assert_expr (tree op, tree cond)\n \n       d) Mark X and Y in FOUND.\n \n-   3- If BB does not end in a conditional expression, then we recurse\n+   4- If BB does not end in a conditional expression, then we recurse\n       into BB's dominator children.\n    \n    At the end of the recursive traversal, ASSERT_EXPRs will have been\n@@ -1441,7 +1446,7 @@ maybe_add_assert_expr (basic_block bb)\n \t  if (!cond)\n \t    continue;\n \n-\t  /* Step 3.  If OP is used in such a way that we can infer a\n+\t  /* Step 2.  If OP is used in such a way that we can infer a\n \t     value range for it, create a new ASSERT_EXPR for OP\n \t     (unless OP already has an ASSERT_EXPR).  */\n \t  gcc_assert (!is_ctrl_stmt (stmt));\n@@ -1504,6 +1509,12 @@ maybe_add_assert_expr (basic_block bb)\n \t sub-graphs or if they had been found in a block upstream from\n \t BB.  */\n       op = USE_OP (uses, 0);\n+\n+      /* Do not attempt to infer anything in names that flow through\n+\t abnormal edges.  */\n+      if (SSA_NAME_OCCURS_IN_ABNORMAL_PHI (op))\n+\treturn false;\n+\n       RESET_BIT (found, SSA_NAME_VERSION (op));\n \n       /* Look for uses of the operands in each of the sub-graphs\n@@ -1546,7 +1557,7 @@ maybe_add_assert_expr (basic_block bb)\n     }\n   else\n     {\n-      /* Step 3.  Recurse into the dominator children of BB.  */\n+      /* Step 4.  Recurse into the dominator children of BB.  */\n       basic_block son;\n \n       for (son = first_dom_son (CDI_DOMINATORS, bb);"}]}