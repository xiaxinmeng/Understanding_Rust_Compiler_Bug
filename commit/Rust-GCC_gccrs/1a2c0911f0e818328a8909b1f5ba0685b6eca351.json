{"sha": "1a2c0911f0e818328a8909b1f5ba0685b6eca351", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWEyYzA5MTFmMGU4MTgzMjhhODkwOWIxZjViYTA2ODViNmVjYTM1MQ==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-02-09T17:50:39Z"}, "committer": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2021-02-10T18:10:57Z"}, "message": "Support Simple LoopExpr\n\nThis is the building block for the rest of loops where we have a basic\ninfinite loop. Break/Continue reliest on the resolution of labels and\nbreaks can also make a loop into a BlockExpr\n\nFixes #106", "tree": {"sha": "db3d500a783d5794a1a190f7172d6b8205b0db4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db3d500a783d5794a1a190f7172d6b8205b0db4e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a2c0911f0e818328a8909b1f5ba0685b6eca351", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a2c0911f0e818328a8909b1f5ba0685b6eca351", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a2c0911f0e818328a8909b1f5ba0685b6eca351", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a2c0911f0e818328a8909b1f5ba0685b6eca351/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb9998216d76ccc62b45fcf01b3a0928a026f7ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb9998216d76ccc62b45fcf01b3a0928a026f7ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb9998216d76ccc62b45fcf01b3a0928a026f7ed"}], "stats": {"total": 65, "additions": 65, "deletions": 0}, "files": [{"sha": "77b888876f1bd333ce0795066494d3e22fb1e9a7", "filename": "gcc/rust/backend/rust-compile-expr.h", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a2c0911f0e818328a8909b1f5ba0685b6eca351/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a2c0911f0e818328a8909b1f5ba0685b6eca351/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.h?ref=1a2c0911f0e818328a8909b1f5ba0685b6eca351", "patch": "@@ -580,6 +580,25 @@ class CompileExpr : public HIRCompileBase\n     translated = ResolvePathRef::Compile (&expr, ctx);\n   }\n \n+  void visit (HIR::LoopExpr &expr)\n+  {\n+    // loop_start:\n+    //      <loop_body>\n+    //   goto loop_start;\n+    fncontext fnctx = ctx->peek_fn ();\n+    Blabel *loop_start\n+      = ctx->get_backend ()->label (fnctx.fndecl, \"\", expr.get_locus ());\n+    Bstatement *label_decl_stmt\n+      = ctx->get_backend ()->label_definition_statement (loop_start);\n+    ctx->add_statement (label_decl_stmt);\n+\n+    translated = CompileExpr::Compile (expr.get_loop_block ().get (), ctx);\n+\n+    Bstatement *goto_loop_start_stmt\n+      = ctx->get_backend ()->goto_statement (loop_start, Location ());\n+    ctx->add_statement (goto_loop_start_stmt);\n+  }\n+\n private:\n   CompileExpr (Context *ctx) : HIRCompileBase (ctx), translated (nullptr) {}\n "}, {"sha": "d3c61df406f520ad9be7c7d881711189868565be", "filename": "gcc/rust/hir/rust-ast-lower-block.h", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a2c0911f0e818328a8909b1f5ba0685b6eca351/gcc%2Frust%2Fhir%2Frust-ast-lower-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a2c0911f0e818328a8909b1f5ba0685b6eca351/gcc%2Frust%2Fhir%2Frust-ast-lower-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-block.h?ref=1a2c0911f0e818328a8909b1f5ba0685b6eca351", "patch": "@@ -134,6 +134,25 @@ class ASTLoweringExprWithBlock : public ASTLoweringBase\n     translated = ASTLoweringBlock::translate (&expr, &terminated);\n   }\n \n+  void visit (AST::LoopExpr &expr)\n+  {\n+    std::vector<HIR::Attribute> outer_attribs;\n+    HIR::BlockExpr *loop_block\n+      = ASTLoweringBlock::translate (expr.get_loop_block ().get (),\n+\t\t\t\t     &terminated);\n+\n+    auto crate_num = mappings->get_current_crate ();\n+    Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t   mappings->get_next_hir_id (crate_num),\n+\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n+\n+    translated\n+      = new HIR::LoopExpr (mapping,\n+\t\t\t   std::unique_ptr<HIR::BlockExpr> (loop_block),\n+\t\t\t   expr.get_locus (), HIR::LoopLabel::error (),\n+\t\t\t   std::move (outer_attribs));\n+  }\n+\n private:\n   ASTLoweringExprWithBlock ()\n     : ASTLoweringBase (), translated (nullptr), terminated (false)"}, {"sha": "49ac7f19c51f20a7214a06b42b486c542e6f7722", "filename": "gcc/rust/hir/rust-ast-lower-expr.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a2c0911f0e818328a8909b1f5ba0685b6eca351/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a2c0911f0e818328a8909b1f5ba0685b6eca351/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h?ref=1a2c0911f0e818328a8909b1f5ba0685b6eca351", "patch": "@@ -697,6 +697,11 @@ class ASTLoweringExpr : public ASTLoweringBase\n \t\t\t\t  std::move (outer_attribs), expr.get_locus ());\n   }\n \n+  void visit (AST::LoopExpr &expr)\n+  {\n+    translated = ASTLoweringExprWithBlock::translate (&expr, &terminated);\n+  }\n+\n private:\n   ASTLoweringExpr ()\n     : translated (nullptr), translated_array_elems (nullptr), terminated (false)"}, {"sha": "14b223a05d766343bf446b1f90522def3b8808c3", "filename": "gcc/rust/hir/tree/rust-hir-expr.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a2c0911f0e818328a8909b1f5ba0685b6eca351/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a2c0911f0e818328a8909b1f5ba0685b6eca351/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h?ref=1a2c0911f0e818328a8909b1f5ba0685b6eca351", "patch": "@@ -3334,6 +3334,8 @@ class BaseLoopExpr : public ExprWithBlock\n \n   Location get_locus () const { return locus; }\n   Location get_locus_slow () const override { return get_locus (); }\n+\n+  std::unique_ptr<HIR::BlockExpr> &get_loop_block () { return loop_block; };\n };\n \n // 'Loop' expression (i.e. the infinite loop) HIR node"}, {"sha": "e8ee8b379fa134ef39d98fc6efba3d771abecd0d", "filename": "gcc/rust/resolve/rust-ast-resolve-expr.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a2c0911f0e818328a8909b1f5ba0685b6eca351/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a2c0911f0e818328a8909b1f5ba0685b6eca351/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h?ref=1a2c0911f0e818328a8909b1f5ba0685b6eca351", "patch": "@@ -241,6 +241,11 @@ class ResolveExpr : public ResolverBase\n     ResolveExpr::go (expr.get_receiver_expr ().get (), expr.get_node_id ());\n   }\n \n+  void visit (AST::LoopExpr &expr)\n+  {\n+    ResolveExpr::go (expr.get_loop_block ().get (), expr.get_node_id ());\n+  }\n+\n private:\n   ResolveExpr (NodeId parent) : ResolverBase (parent) {}\n };"}, {"sha": "17e79d41ddea8476bdc8ef537df05202990ef6f1", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a2c0911f0e818328a8909b1f5ba0685b6eca351/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a2c0911f0e818328a8909b1f5ba0685b6eca351/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=1a2c0911f0e818328a8909b1f5ba0685b6eca351", "patch": "@@ -741,6 +741,11 @@ class TypeCheckExpr : public TypeCheckBase\n       }\n   }\n \n+  void visit (HIR::LoopExpr &expr)\n+  {\n+    infered = TypeCheckExpr::Resolve (expr.get_loop_block ().get ());\n+  }\n+\n private:\n   TypeCheckExpr ()\n     : TypeCheckBase (), infered (nullptr), infered_array_elems (nullptr)"}, {"sha": "a8ee2f59bb85facfbf0f9f4254c10c3971957f62", "filename": "gcc/testsuite/rust.test/compilable/loop1.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a2c0911f0e818328a8909b1f5ba0685b6eca351/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Floop1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a2c0911f0e818328a8909b1f5ba0685b6eca351/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Floop1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Floop1.rs?ref=1a2c0911f0e818328a8909b1f5ba0685b6eca351", "patch": "@@ -0,0 +1,10 @@\n+fn main() {\n+    let mut a = 1;\n+    let mut b = 1;\n+\n+    loop {\n+        let c = a + b;\n+        a = b;\n+        b = c;\n+    }\n+}"}]}