{"sha": "669ed2b1497b173a8476ff8cd43d9b0ef740130f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjY5ZWQyYjE0OTdiMTczYTg0NzZmZjhjZDQzZDliMGVmNzQwMTMwZg==", "commit": {"author": {"name": "Ulrich Drepper", "email": "drepper@redhat.com", "date": "2000-09-11T16:50:05Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2000-09-11T16:50:05Z"}, "message": "install.texi (LANGUAGES): Update to include new languages.\n\n        * install.texi (LANGUAGES): Update to include new languages.\n        * INSTALL: Rebuilt.\n\nFrom-SVN: r36321", "tree": {"sha": "bb9f64105a133fa74725330d620935dc1f2e1e0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb9f64105a133fa74725330d620935dc1f2e1e0e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/669ed2b1497b173a8476ff8cd43d9b0ef740130f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/669ed2b1497b173a8476ff8cd43d9b0ef740130f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/669ed2b1497b173a8476ff8cd43d9b0ef740130f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/669ed2b1497b173a8476ff8cd43d9b0ef740130f/comments", "author": null, "committer": null, "parents": [{"sha": "50936d273460ba239da3c79d251e076db60e71bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50936d273460ba239da3c79d251e076db60e71bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50936d273460ba239da3c79d251e076db60e71bd"}], "stats": {"total": 105, "additions": 56, "deletions": 49}, "files": [{"sha": "48d8074ea442d6c12ddb18a3a2d2c3ce15c7a769", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/669ed2b1497b173a8476ff8cd43d9b0ef740130f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/669ed2b1497b173a8476ff8cd43d9b0ef740130f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=669ed2b1497b173a8476ff8cd43d9b0ef740130f", "patch": "@@ -1,3 +1,8 @@\n+Mon Sep 11 10:48:41 2000  Ulrich Drepper <drepper@redhat.com>\n+\n+\t* install.texi (LANGUAGES): Update to include new languages.\n+\t* INSTALL: Rebuilt.\n+\n 2000-09-11  DJ Delorie  <dj@redhat.com>\n \n \t* gcc.c (main): Don't warn about unused -B prefixes"}, {"sha": "b3b91f1269cd5f4feda268a429404c63262f865c", "filename": "gcc/INSTALL", "status": "modified", "additions": 43, "deletions": 42, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/669ed2b1497b173a8476ff8cd43d9b0ef740130f/gcc%2FINSTALL", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/669ed2b1497b173a8476ff8cd43d9b0ef740130f/gcc%2FINSTALL", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FINSTALL?ref=669ed2b1497b173a8476ff8cd43d9b0ef740130f", "patch": "@@ -246,19 +246,16 @@ and includes all the necessary compilation tools and libraries.\n     `--disable-nls'\n           The `--enable-nls' option enables Native Language Support\n           (NLS), which lets GCC output diagnostics in languages other\n-          than American English.  No translations are available yet, so\n-          the main users of this option now are those translating GCC's\n-          diagnostics who want to test their work.  Once translations\n-          become available, Native Language Support will become enabled\n-          by default.  The `--disable-nls' option disables NLS.\n+          than American English. Native Language Support is enabled by\n+          default if not doing a canadian cross build. The\n+          `--disable-nls' option disables NLS.\n \n     `--with-included-gettext'\n-          If NLS is enabled, the GCC build procedure normally attempts\n-          to use the host's `gettext' libraries, and falls back on\n-          GCC's copy of the GNU `gettext' library only if the host\n-          libraries do not suffice.  The `--with-included-gettext'\n-          option causes the build procedure to prefer its copy of GNU\n-          `gettext'.\n+          If NLS is enbled, the `--with-included-gettext' option causes\n+          the build procedure to prefer its copy of GNU `gettext'. This\n+          is the default. If you want the GCC build procedure to prefer\n+          the host's `gettext' libraries, use\n+          `--without-included-gettext'.\n \n     `--with-catgets'\n           If NLS is enabled, and if the host lacks `gettext' but has the\n@@ -267,6 +264,15 @@ and includes all the necessary compilation tools and libraries.\n           `gettext' library.  The `--with-catgets' option causes the\n           build procedure to use the host's `catgets' in this situation.\n \n+    `--enable-maintainer-mode'\n+          The build rules that regenerate the GCC master message catalog\n+          `gcc.pot' are normally disabled. This is because it can only\n+          be rebuilt if the complete source tree is present. If you\n+          have changed the sources and want to rebuild the catalog,\n+          configuring with `--enable-maintainer-mode' will enable this.\n+          Note that you need a special version of the `gettext' tools\n+          to do so.\n+\n     `--enable-win32-registry'\n     `--enable-win32-registry=KEY'\n     `--disable-win32-registry'\n@@ -338,16 +344,17 @@ and includes all the necessary compilation tools and libraries.\n \n      `LANGUAGES=c' specifies that only the C compiler should be\n      compiled.  The makefile normally builds compilers for all the\n-     supported languages; currently, C, C++ and Objective C.  However,\n-     C is the only language that is sure to work when you build with\n-     other non-GNU C compilers.  In addition, building anything but C\n-     at this stage is a waste of time.\n+     supported languages; currently, C, C++, Objective C, Java,\n+     FORTRAN, and CHILL.  However, C is the only language that is sure\n+     to work when you build with other non-GNU C compilers.  In\n+     addition, building anything but C at this stage is a waste of time.\n \n      In general, you can specify the languages to build by typing the\n      argument `LANGUAGES=\"LIST\"', where LIST is one or more words from\n-     the list `c', `c++', and `objective-c'.  If you have any\n-     additional GNU compilers as subdirectories of the GNU CC source\n-     directory, you may also specify their names in this list.\n+     the list `c', `c++', `objective-c', `java', `f77', and `CHILL'.\n+     If you have any additional GNU compilers as subdirectories of the\n+     GNU CC source directory, you may also specify their names in this\n+     list.\n \n      Ignore any warnings you may see about \"statement not reached\" in\n      `insn-emit.c'; they are normal.  Also, warnings about \"unknown\n@@ -654,11 +661,11 @@ is equivalent to `vax-dec-ultrix4.2'.\n \n      386bsd, aix, acis, amigaos, aos, aout, aux, bosx, bsd, clix, coff,\n      ctix, cxux, dgux, dynix, ebmon, ecoff, elf, esix, freebsd, hms,\n-     genix, gnu, linux-gnu, hiux, hpux, iris, irix, isc, luna, lynxos,\n-     mach, minix, msdos, mvs, netbsd, newsos, nindy, ns, osf, osfrose,\n-     ptx, riscix, riscos, rtu, sco, sim, solaris, sunos, sym, sysv,\n-     udi, ultrix, unicos, uniplus, unos, vms, vsta, vxworks, winnt,\n-     xenix.\n+     genix, gnu, linux, linux-gnu, hiux, hpux, iris, irix, isc, luna,\n+     lynxos, mach, minix, msdos, mvs, netbsd, newsos, nindy, ns, osf,\n+     osfrose, ptx, riscix, riscos, rtu, sco, sim, solaris, sunos, sym,\n+     sysv, udi, ultrix, unicos, uniplus, unos, vms, vsta, vxworks,\n+     winnt, xenix.\n \n You can omit the system type; then `configure' guesses the operating\n system from the CPU and company.\n@@ -668,6 +675,12 @@ make a difference.  For example, you can write `bsd4.3' or `bsd4.4' to\n distinguish versions of BSD.  In practice, the version number is most\n needed for `sysv3' and `sysv4', which are often treated differently.\n \n+   `linux-gnu' is the canonical name for the GNU/Linux target; however\n+GNU CC will also accept `linux'.  The version of the kernel in use is\n+not relevant on these systems.  A suffix such as `libc1' or `aout'\n+distinguishes major versions of the C library; all of the suffixed\n+versions are obsolete.\n+\n    If you specify an impossible combination such as `i860-dg-vms', then\n you may get an error message from `configure', or it may ignore part of\n the information and do the best it can with the rest.  `configure'\n@@ -804,13 +817,14 @@ special things you must know:\n `arm-*-elf'\n      This configuration is intended for embedded systems.\n \n-`arm-*-linux-gnuaout'\n+`arm-*-linux*aout'\n      Any of the ARM-family processors running the Linux-based GNU\n      system with the `a.out' binary format.  This is an obsolete\n      configuration.\n \n+`arm-*-linux'\n `arm-*-linux-gnu'\n-`arm-*-linux-gnuoldld'\n+`arm-*-linux*oldld'\n      Any of the ARM-family processors running the Linux-based GNU\n      system with the `ELF' binary format.  You must use version\n      2.9.1.0.22 or later of the GNU/Linux binutils, which you can\n@@ -922,16 +936,17 @@ special things you must know:\n      This port is very preliminary and has many known bugs.  We hope to\n      have a higher-quality port for this machine soon.\n \n-`i386-*-linux-gnuoldld'\n+`i386-*-linux*oldld'\n      Use this configuration to generate `a.out' binaries on Linux-based\n      GNU systems if you do not have gas/binutils version 2.5.2 or later\n      installed. This is an obsolete configuration.\n \n-`i386-*-linux-gnuaout'\n+`i386-*-linux*aout'\n      Use this configuration to generate `a.out' binaries on Linux-based\n      GNU systems. This configuration is being superseded. You must use\n      gas/binutils version 2.5.2 or later.\n \n+`i386-*-linux'\n `i386-*-linux-gnu'\n      Use this configuration to generate ELF binaries on Linux-based GNU\n      systems.  You must use gas/binutils version 2.5.2 or later.\n@@ -1296,21 +1311,6 @@ special things you must know:\n      and use the `--with-gnu-as' configure option when configuring gcc.\n      GNU as is distributed as part of the binutils package.\n \n-     Under Irix 6, if you are using Irix `cc' as your bootstrap\n-     compiler, you must ensure that the N32 ABI is in use.  To test\n-     this, compile a simple C file with `cc' and then run `file'\n-     on the resulting object file.  The output should look like:\n-\n- \t\ttest.o:\t\tELF N32 MSB ...\n-\n-     If you see:\n-\n-\t        test.o:\t\tELF 32-bit MSB\n-\n-     then your version of `cc' uses the O32 ABI default.  You should\n-     set the environment variable `CC' to `cc -n32' before configuring\n-     GCC.\n-\n `mips-sony-sysv'\n      Sony MIPS NEWS.  This works in NEWSOS 5.0.1, but not in 5.0.2\n      (which uses ELF instead of COFF).  Support for 5.0.2 will probably\n@@ -1401,6 +1401,7 @@ special things you must know:\n      You can specify a default version for the `-mcpu='CPU_TYPE switch\n      by using the configure option `--with-cpu-'CPU_TYPE.\n \n+`powerpc-*-linux'\n `powerpc-*-linux-gnu'\n      PowerPC system in big endian mode, running the Linux-based GNU\n      system."}, {"sha": "bd365fef4cd8f3ae71579b20158af9764c965f86", "filename": "gcc/install.texi", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/669ed2b1497b173a8476ff8cd43d9b0ef740130f/gcc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/669ed2b1497b173a8476ff8cd43d9b0ef740130f/gcc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finstall.texi?ref=669ed2b1497b173a8476ff8cd43d9b0ef740130f", "patch": "@@ -384,16 +384,17 @@ directory.\n \n @samp{LANGUAGES=c} specifies that only the C compiler should be\n compiled.  The makefile normally builds compilers for all the supported\n-languages; currently, C, C++ and Objective C.  However, C is the only\n-language that is sure to work when you build with other non-GNU C\n-compilers.  In addition, building anything but C at this stage is a\n-waste of time.\n+languages; currently, C, C++, Objective C, Java, FORTRAN, and CHILL.\n+However, C is the only language that is sure to work when you build with\n+other non-GNU C compilers.  In addition, building anything but C at this\n+stage is a waste of time.\n \n In general, you can specify the languages to build by typing the\n argument @samp{LANGUAGES=\"@var{list}\"}, where @var{list} is one or more\n-words from the list @samp{c}, @samp{c++}, and @samp{objective-c}.  If\n-you have any additional GNU compilers as subdirectories of the GNU CC\n-source directory, you may also specify their names in this list.\n+words from the list @samp{c}, @samp{c++}, @samp{objective-c},\n+@samp{java}, @samp{f77}, and @samp{CHILL}.  If you have any additional\n+GNU compilers as subdirectories of the GNU CC source directory, you may\n+also specify their names in this list.\n \n Ignore any warnings you may see about ``statement not reached'' in\n @file{insn-emit.c}; they are normal.  Also, warnings about ``unknown"}]}