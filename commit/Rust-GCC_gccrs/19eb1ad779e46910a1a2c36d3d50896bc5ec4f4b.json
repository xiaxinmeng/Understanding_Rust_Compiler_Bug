{"sha": "19eb1ad779e46910a1a2c36d3d50896bc5ec4f4b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTllYjFhZDc3OWU0NjkxMGExYTJjMzZkM2Q1MDg5NmJjNWVjNGY0Yg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@hxi.com", "date": "2001-10-09T22:40:12Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2001-10-09T22:40:12Z"}, "message": "acconfig.h: Fix comment formatting.\n\n\t* acconfig.h: Fix comment formatting.\n\t* c-dump.h: Likewise.\n\t* c-tree.h: Likewise.\n\t* conditions.h: Likewise.\n\t* expr.h: Likewise.\n\t* function.h: Likewise.\n\t* gthr.h: Likewise.\n\t* hwint.h: Likewise.\n\t* integrate.h: Likewise.\n\t* intl.h: Likewise.\n\t* loop.h: Likewise.\n\t* optabs.h: Likewise.\n\nFrom-SVN: r46131", "tree": {"sha": "5d34fd4f27e2d3af28cbb64f97d7ac6eb8ccb0fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d34fd4f27e2d3af28cbb64f97d7ac6eb8ccb0fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/19eb1ad779e46910a1a2c36d3d50896bc5ec4f4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19eb1ad779e46910a1a2c36d3d50896bc5ec4f4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19eb1ad779e46910a1a2c36d3d50896bc5ec4f4b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19eb1ad779e46910a1a2c36d3d50896bc5ec4f4b/comments", "author": null, "committer": null, "parents": [{"sha": "60741f92b64bde43514e8a89f67045d347f7194c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60741f92b64bde43514e8a89f67045d347f7194c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60741f92b64bde43514e8a89f67045d347f7194c"}], "stats": {"total": 59, "additions": 37, "deletions": 22}, "files": [{"sha": "5e2d889497c259576b6ca8d7e6808a42aa55ea05", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19eb1ad779e46910a1a2c36d3d50896bc5ec4f4b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19eb1ad779e46910a1a2c36d3d50896bc5ec4f4b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=19eb1ad779e46910a1a2c36d3d50896bc5ec4f4b", "patch": "@@ -1,3 +1,18 @@\n+2001-10-09  Kazu Hirata  <kazu@hxi.com>\n+\n+\t* acconfig.h: Fix comment formatting.\n+\t* c-dump.h: Likewise.\n+\t* c-tree.h: Likewise.\n+\t* conditions.h: Likewise.\n+\t* expr.h: Likewise.\n+\t* function.h: Likewise.\n+\t* gthr.h: Likewise.\n+\t* hwint.h: Likewise.\n+\t* integrate.h: Likewise.\n+\t* intl.h: Likewise.\n+\t* loop.h: Likewise.\n+\t* optabs.h: Likewise.\n+\n 2001-10-09  Kazu Hirata  <kazu@hxi.com>\n \n \t* c-common.h: Fix comment formatting."}, {"sha": "6367cf1f28ddf2eb1920826a73bd8a6dd6b2d668", "filename": "gcc/acconfig.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19eb1ad779e46910a1a2c36d3d50896bc5ec4f4b/gcc%2Facconfig.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19eb1ad779e46910a1a2c36d3d50896bc5ec4f4b/gcc%2Facconfig.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Facconfig.h?ref=19eb1ad779e46910a1a2c36d3d50896bc5ec4f4b", "patch": "@@ -14,7 +14,7 @@\n #undef HAVE_STPCPY\n \n /* Define if your assembler supports specifying the maximum number\n-   of bytes to skip when using the GAS .p2align command. */\n+   of bytes to skip when using the GAS .p2align command.  */\n #undef HAVE_GAS_MAX_SKIP_P2ALIGN\n \n /* Define if your assembler supports .balign and .p2align.  */\n@@ -26,7 +26,7 @@\n /* Define to `int' if <sys/types.h> doesn't define.  */\n #undef ssize_t\n \n-/* Define if cpp should also search $prefix/include. */\n+/* Define if cpp should also search $prefix/include.  */\n #undef PREFIX_INCLUDE_DIR\n \n @BOTTOM@"}, {"sha": "4c4962c9a5c7237257702cf239d0dc2db09f3d95", "filename": "gcc/c-dump.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19eb1ad779e46910a1a2c36d3d50896bc5ec4f4b/gcc%2Fc-dump.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19eb1ad779e46910a1a2c36d3d50896bc5ec4f4b/gcc%2Fc-dump.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-dump.h?ref=19eb1ad779e46910a1a2c36d3d50896bc5ec4f4b", "patch": "@@ -53,9 +53,9 @@ struct dump_info\n {\n   /* The stream on which to dump the information.  */\n   FILE *stream;\n-  /* The original node. */\n+  /* The original node.  */\n   tree node;\n-  /* User flags. */\n+  /* User flags.  */\n   int flags;\n   /* The next unused node index.  */\n   unsigned int index;"}, {"sha": "c25cb112101cbfe110f62b0b17dc478c0cb05ed1", "filename": "gcc/c-tree.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19eb1ad779e46910a1a2c36d3d50896bc5ec4f4b/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19eb1ad779e46910a1a2c36d3d50896bc5ec4f4b/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=19eb1ad779e46910a1a2c36d3d50896bc5ec4f4b", "patch": "@@ -325,12 +325,12 @@ extern int warn_traditional;\n \n extern int warn_char_subscripts;\n \n-/* Warn if main is suspicious. */\n+/* Warn if main is suspicious.  */\n \n extern int warn_main;\n \n /* Nonzero means to allow single precision math even if we're generally\n-   being traditional. */\n+   being traditional.  */\n extern int flag_allow_single_precision;\n \n /* Warn if initializer is not completely bracketed.  */\n@@ -341,7 +341,7 @@ extern int warn_missing_braces;\n \n extern int warn_sign_compare;\n \n-/* Warn about testing equality of floating point numbers. */\n+/* Warn about testing equality of floating point numbers.  */\n \n extern int warn_float_equal;\n "}, {"sha": "155c50edf47e13fd72cdbdafd145237962a9cb43", "filename": "gcc/conditions.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19eb1ad779e46910a1a2c36d3d50896bc5ec4f4b/gcc%2Fconditions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19eb1ad779e46910a1a2c36d3d50896bc5ec4f4b/gcc%2Fconditions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconditions.h?ref=19eb1ad779e46910a1a2c36d3d50896bc5ec4f4b", "patch": "@@ -105,7 +105,7 @@ extern CC_STATUS cc_status;\n #define CC_INVERTED 0100\n \n /* Nonzero if we must convert signed condition operators to unsigned.\n-   This is only used by machine description files. */\n+   This is only used by machine description files.  */\n #define CC_NOT_SIGNED 0200\n \n /* This is how to initialize the variable cc_status."}, {"sha": "a518cf085fcf76e3dd60356f27ffae6325c186d9", "filename": "gcc/expr.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19eb1ad779e46910a1a2c36d3d50896bc5ec4f4b/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19eb1ad779e46910a1a2c36d3d50896bc5ec4f4b/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=19eb1ad779e46910a1a2c36d3d50896bc5ec4f4b", "patch": "@@ -284,7 +284,7 @@ extern rtx expand_simple_unop PARAMS ((enum machine_mode, enum rtx_code,\n    perform the operation described by CODE and MODE.  */\n extern int have_insn_for PARAMS ((enum rtx_code, enum machine_mode));\n \n-/* Emit code to make a call to a constant function or a library call. */\n+/* Emit code to make a call to a constant function or a library call.  */\n extern void emit_libcall_block PARAMS ((rtx, rtx, rtx, rtx));\n \n /* Create but don't emit one rtl instruction to perform certain operations.\n@@ -429,7 +429,7 @@ extern void emit_group_load PARAMS ((rtx, rtx, int, unsigned int));\n extern void emit_group_store PARAMS ((rtx, rtx, int, unsigned int));\n \n #ifdef TREE_CODE\n-/* Copy BLKmode object from a set of registers. */\n+/* Copy BLKmode object from a set of registers.  */\n extern rtx copy_blkmode_from_reg PARAMS ((rtx,rtx,tree));\n #endif\n \n@@ -483,7 +483,7 @@ extern void emit_push_insn PARAMS ((rtx, enum machine_mode, tree, rtx,\n \t\t\t\t    unsigned int, int, rtx, int, rtx, rtx,\n \t\t\t\t    int, rtx));\n \n-/* Expand an assignment that stores the value of FROM into TO. */\n+/* Expand an assignment that stores the value of FROM into TO.  */\n extern rtx expand_assignment PARAMS ((tree, tree, int, int));\n \n /* Generate code for computing expression EXP,"}, {"sha": "e339911062b92fc8b2727acd78016d6a622790e0", "filename": "gcc/function.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19eb1ad779e46910a1a2c36d3d50896bc5ec4f4b/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19eb1ad779e46910a1a2c36d3d50896bc5ec4f4b/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=19eb1ad779e46910a1a2c36d3d50896bc5ec4f4b", "patch": "@@ -189,7 +189,7 @@ struct function\n   /* Name of this function.  */\n   const char *name;\n \n-  /* Points to the FUNCTION_DECL of this function. */\n+  /* Points to the FUNCTION_DECL of this function.  */\n   tree decl;\n \n   /* Function containing this function, if any.  */\n@@ -236,7 +236,7 @@ struct function\n   const char *cannot_inline;\n \n   /* Opaque pointer used by get_hard_reg_initial_val and\n-     has_hard_reg_initial_val (see integrate.[hc]). */\n+     has_hard_reg_initial_val (see integrate.[hc]).  */\n   struct initial_value_struct *hard_reg_initial_vals;\n \n   /* Number of function calls seen so far in current function.  */\n@@ -329,7 +329,7 @@ struct function\n   rtx x_last_parm_insn;\n \n   /* 1 + last pseudo register number possibly used for loading a copy\n-     of a parameter of this function. */\n+     of a parameter of this function.  */\n   unsigned int x_max_parm_reg;\n \n   /* Vector indexed by REGNO, containing location on stack in which"}, {"sha": "1ec7d86bd72e35b250deb7ea16cf13355d8ee358", "filename": "gcc/gthr.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19eb1ad779e46910a1a2c36d3d50896bc5ec4f4b/gcc%2Fgthr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19eb1ad779e46910a1a2c36d3d50896bc5ec4f4b/gcc%2Fgthr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgthr.h?ref=19eb1ad779e46910a1a2c36d3d50896bc5ec4f4b", "patch": "@@ -80,15 +80,15 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n      Solaris/UI threads with -D_SOLARIS_THREADS\n */\n \n-/* Check first for thread specific defines. */\n+/* Check first for thread specific defines.  */\n #if _PTHREADS\n #include \"gthr-posix.h\"\n #elif _DCE_THREADS\n #include \"gthr-dce.h\"\n #elif _SOLARIS_THREADS\n #include \"gthr-solaris.h\"\n \n-/* Include GTHREAD_FILE if one is defined. */\n+/* Include GTHREAD_FILE if one is defined.  */\n #elif defined(HAVE_GTHR_DEFAULT)\n #if SUPPORTS_WEAK\n #ifndef GTHREAD_USE_WEAK\n@@ -97,7 +97,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #endif\n #include \"gthr-default.h\"\n \n-/* Fallback to single thread definitions. */\n+/* Fallback to single thread definitions.  */\n #else\n #include \"gthr-single.h\"\n #endif"}, {"sha": "b4f3d8a53324e02c26ba3fab93096b87e2cb1088", "filename": "gcc/hwint.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19eb1ad779e46910a1a2c36d3d50896bc5ec4f4b/gcc%2Fhwint.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19eb1ad779e46910a1a2c36d3d50896bc5ec4f4b/gcc%2Fhwint.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhwint.h?ref=19eb1ad779e46910a1a2c36d3d50896bc5ec4f4b", "patch": "@@ -4,7 +4,7 @@\n    This file is part of GCC.\n \n    Provide definitions for macros which depend on HOST_BITS_PER_INT\n-   and HOST_BITS_PER_LONG. */\n+   and HOST_BITS_PER_LONG.  */\n \n #ifndef GCC_HWINT_H\n #define GCC_HWINT_H"}, {"sha": "c96d0112af4380c8f07e26a76b93617ef9caef7c", "filename": "gcc/integrate.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19eb1ad779e46910a1a2c36d3d50896bc5ec4f4b/gcc%2Fintegrate.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19eb1ad779e46910a1a2c36d3d50896bc5ec4f4b/gcc%2Fintegrate.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.h?ref=19eb1ad779e46910a1a2c36d3d50896bc5ec4f4b", "patch": "@@ -36,7 +36,7 @@ struct inline_remap\n {\n   /* True if we are doing function integration, false otherwise.\n      Used to control whether RTX_UNCHANGING bits are copied by\n-     copy_rtx_and_substitute. */\n+     copy_rtx_and_substitute.  */\n   int integrating;\n   /* Definition of function be inlined.  */\n   union tree_node *fndecl;"}, {"sha": "07b72b59bb1b1ccb9b0ad8038f7b1fcc4960b586", "filename": "gcc/intl.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19eb1ad779e46910a1a2c36d3d50896bc5ec4f4b/gcc%2Fintl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19eb1ad779e46910a1a2c36d3d50896bc5ec4f4b/gcc%2Fintl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintl.h?ref=19eb1ad779e46910a1a2c36d3d50896bc5ec4f4b", "patch": "@@ -14,7 +14,7 @@\n    You should have received a copy of the GNU General Public License\n    along with GCC; see the file COPYING.  If not, write to the Free\n    Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n-   02111-1307, USA. */\n+   02111-1307, USA.  */\n \n #ifdef HAVE_LOCALE_H\n # include <locale.h>"}, {"sha": "60b8def3d44304d5fe562abc1a8ef2a83569c74d", "filename": "gcc/loop.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19eb1ad779e46910a1a2c36d3d50896bc5ec4f4b/gcc%2Floop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19eb1ad779e46910a1a2c36d3d50896bc5ec4f4b/gcc%2Floop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.h?ref=19eb1ad779e46910a1a2c36d3d50896bc5ec4f4b", "patch": "@@ -184,7 +184,7 @@ struct iv_class\n   unsigned reversed : 1;\t/* 1 if we reversed the loop that this\n \t\t\t\t   biv controls.  */\n   unsigned all_reduced : 1;\t/* 1 if all givs using this biv have\n-                                   been reduced. */\n+                                   been reduced.  */\n };\n \n "}, {"sha": "afedbf72bcc1b4e9b03aa084bfa70a1d65546bac", "filename": "gcc/optabs.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19eb1ad779e46910a1a2c36d3d50896bc5ec4f4b/gcc%2Foptabs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19eb1ad779e46910a1a2c36d3d50896bc5ec4f4b/gcc%2Foptabs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.h?ref=19eb1ad779e46910a1a2c36d3d50896bc5ec4f4b", "patch": "@@ -212,7 +212,7 @@ extern optab optab_table[OTI_MAX];\n /* Tables of patterns for extending one integer mode to another.  */\n extern enum insn_code extendtab[MAX_MACHINE_MODE][MAX_MACHINE_MODE][2];\n \n-/* Tables of patterns for converting between fixed and floating point. */\n+/* Tables of patterns for converting between fixed and floating point.  */\n extern enum insn_code fixtab[NUM_MACHINE_MODES][NUM_MACHINE_MODES][2];\n extern enum insn_code fixtrunctab[NUM_MACHINE_MODES][NUM_MACHINE_MODES][2];\n extern enum insn_code floattab[NUM_MACHINE_MODES][NUM_MACHINE_MODES][2];"}]}