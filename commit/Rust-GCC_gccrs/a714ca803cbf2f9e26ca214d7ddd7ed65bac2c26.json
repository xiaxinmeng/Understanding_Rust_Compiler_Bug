{"sha": "a714ca803cbf2f9e26ca214d7ddd7ed65bac2c26", "node_id": "C_kwDOANBUbNoAKGE3MTRjYTgwM2NiZjJmOWUyNmNhMjE0ZDdkZGQ3ZWQ2NWJhYzJjMjY", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2022-07-06T07:37:15Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-07-13T10:01:17Z"}, "message": "[Ada] Handle bodies-to-inline just like generic templates\n\nOriginally bodies-to-inline created for the frontend inlining were\nanalyzed with expansion disabled. Then, to facilitate inlining in\nGNATprove mode, the analysis was changed to preanalysis.\n\nHowever, preanalysis in this context works badly for calls in prefix\nnotation, because preanalysis assigns entities and types to nodes but\ndoesn't convert calls from prefix to ordinary notation. When the\nbody-to-inline is actually inlined, the (re)analysis of calls in prefix\nnotation fails.\n\nThe proper solution is rather to handle bodies-to-inline just like\ngeneric templates.\n\nFrom the user point of view, this patch fixes spurious errors both in\nGNATprove (which uses frontend inlining by default) and in GNAT (where\nfrontend inlining is typically explicitly requested with -gnatN and\npragma Inline_Always).\n\ngcc/ada/\n\n\t* inline.adb (Build_Body_To_Inline): Instead of manipulating the\n\tFull_Analysis flag, use the Inside_A_Generic flag (which is\n\tconveniently manipulated by Start_Generic/End_Generic, together\n\twith Expander_Active).\n\t* sem_attr.adb (Analyze_Attribute_Old_Result): Adapt comment and\n\tassertion to different flag that is set while building\n\tbody-to-inline.", "tree": {"sha": "feb9d383d4a3b7c08be4a420149701bac68c41c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/feb9d383d4a3b7c08be4a420149701bac68c41c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a714ca803cbf2f9e26ca214d7ddd7ed65bac2c26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a714ca803cbf2f9e26ca214d7ddd7ed65bac2c26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a714ca803cbf2f9e26ca214d7ddd7ed65bac2c26", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a714ca803cbf2f9e26ca214d7ddd7ed65bac2c26/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4621bae835be11ae4ec81d5842166e819826459c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4621bae835be11ae4ec81d5842166e819826459c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4621bae835be11ae4ec81d5842166e819826459c"}], "stats": {"total": 16, "additions": 4, "deletions": 12}, "files": [{"sha": "e32df68152ba8abfdf0fcc7c7fd12f11803851d1", "filename": "gcc/ada/inline.adb", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a714ca803cbf2f9e26ca214d7ddd7ed65bac2c26/gcc%2Fada%2Finline.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a714ca803cbf2f9e26ca214d7ddd7ed65bac2c26/gcc%2Fada%2Finline.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.adb?ref=a714ca803cbf2f9e26ca214d7ddd7ed65bac2c26", "patch": "@@ -32,7 +32,6 @@ with Einfo.Entities; use Einfo.Entities;\n with Einfo.Utils;    use Einfo.Utils;\n with Elists;         use Elists;\n with Errout;         use Errout;\n-with Expander;       use Expander;\n with Exp_Ch6;        use Exp_Ch6;\n with Exp_Ch7;        use Exp_Ch7;\n with Exp_Tss;        use Exp_Tss;\n@@ -1107,7 +1106,6 @@ package body Inline is\n \n    procedure Build_Body_To_Inline (N : Node_Id; Spec_Id : Entity_Id) is\n       Decl            : constant Node_Id := Unit_Declaration_Node (Spec_Id);\n-      Analysis_Status : constant Boolean := Full_Analysis;\n       Original_Body   : Node_Id;\n       Body_To_Analyze : Node_Id;\n       Max_Size        : constant := 10;\n@@ -1419,21 +1417,15 @@ package body Inline is\n          Append (Body_To_Analyze, Declarations (N));\n       end if;\n \n-      --  The body to inline is preanalyzed. In GNATprove mode we must disable\n-      --  full analysis as well so that light expansion does not take place\n-      --  either, and name resolution is unaffected.\n-\n-      Expander_Mode_Save_And_Set (False);\n-      Full_Analysis := False;\n+      Start_Generic;\n \n       Analyze (Body_To_Analyze);\n       Push_Scope (Defining_Entity (Body_To_Analyze));\n       Save_Global_References (Original_Body);\n       End_Scope;\n       Remove (Body_To_Analyze);\n \n-      Expander_Mode_Restore;\n-      Full_Analysis := Analysis_Status;\n+      End_Generic;\n \n       --  Restore environment if previously saved\n "}, {"sha": "93bb6f42b6be81bdc2318f3fae939e28dc942c22", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a714ca803cbf2f9e26ca214d7ddd7ed65bac2c26/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a714ca803cbf2f9e26ca214d7ddd7ed65bac2c26/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=a714ca803cbf2f9e26ca214d7ddd7ed65bac2c26", "patch": "@@ -1508,9 +1508,9 @@ package body Sem_Attr is\n            and then Chars (Spec_Id) = Name_uParent\n            and then Chars (Scope (Spec_Id)) = Name_uPostconditions\n          then\n-            --  This situation occurs only when preanalyzing the inlined body\n+            --  This situation occurs only when analyzing the body-to-inline\n \n-            pragma Assert (not Full_Analysis);\n+            pragma Assert (Inside_A_Generic);\n \n             Spec_Id := Scope (Spec_Id);\n             pragma Assert (Is_Inlined (Spec_Id));"}]}