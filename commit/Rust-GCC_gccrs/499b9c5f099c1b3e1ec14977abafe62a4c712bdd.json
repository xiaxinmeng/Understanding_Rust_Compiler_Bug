{"sha": "499b9c5f099c1b3e1ec14977abafe62a4c712bdd", "node_id": "C_kwDOANBUbNoAKDQ5OWI5YzVmMDk5YzFiM2UxZWMxNDk3N2FiYWZlNjJhNGM3MTJiZGQ", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-06-16T00:16:44Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-06-16T00:16:44Z"}, "message": "Daily bump.", "tree": {"sha": "c54ade5b593c450c3da5367b2a605f93f024a983", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c54ade5b593c450c3da5367b2a605f93f024a983"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/499b9c5f099c1b3e1ec14977abafe62a4c712bdd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/499b9c5f099c1b3e1ec14977abafe62a4c712bdd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/499b9c5f099c1b3e1ec14977abafe62a4c712bdd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/499b9c5f099c1b3e1ec14977abafe62a4c712bdd/comments", "author": null, "committer": null, "parents": [{"sha": "ce3867d414bd7d9e5b6fb2a51b1fb3d9e9e1eae9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce3867d414bd7d9e5b6fb2a51b1fb3d9e9e1eae9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce3867d414bd7d9e5b6fb2a51b1fb3d9e9e1eae9"}], "stats": {"total": 389, "additions": 388, "deletions": 1}, "files": [{"sha": "2d8c237df6059a953e23a1ce9a23a33654d9242a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/499b9c5f099c1b3e1ec14977abafe62a4c712bdd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/499b9c5f099c1b3e1ec14977abafe62a4c712bdd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=499b9c5f099c1b3e1ec14977abafe62a4c712bdd", "patch": "@@ -1,3 +1,163 @@\n+2022-06-15  Takayuki 'January June' Suwa  <jjsuwa_sys3175@yahoo.co.jp>\n+\n+\t* config/xtensa/xtensa.md (DSC): New split pattern and mode iterator.\n+\n+2022-06-15  Takayuki 'January June' Suwa  <jjsuwa_sys3175@yahoo.co.jp>\n+\n+\t* config/xtensa/predicates.md (reload_operand):\n+\tNew predicate.\n+\t* config/xtensa/xtensa.md: New peephole2 pattern.\n+\n+2022-06-15  Takayuki 'January June' Suwa  <jjsuwa_sys3175@yahoo.co.jp>\n+\n+\t* config/xtensa/xtensa.md (*round_up_to_even):\n+\tNew insn-and-split pattern.\n+\t(*signed_ge_zero): Ditto.\n+\n+2022-06-15  Takayuki 'January June' Suwa  <jjsuwa_sys3175@yahoo.co.jp>\n+\n+\t* config/xtensa/xtensa-protos.h (xtensa_prepare_expand_call,\n+\txtensa_emit_sibcall): New prototypes.\n+\t(xtensa_expand_epilogue): Add new argument that specifies whether\n+\tor not sibling call.\n+\t* config/xtensa/xtensa.cc (TARGET_FUNCTION_OK_FOR_SIBCALL):\n+\tNew macro definition.\n+\t(xtensa_prepare_expand_call): New function in order to share\n+\tthe common code.\n+\t(xtensa_emit_sibcall, xtensa_function_ok_for_sibcall):\n+\tNew functions.\n+\t(xtensa_expand_epilogue): Add new argument sibcall_p and use it\n+\tfor sibling call handling.\n+\t* config/xtensa/xtensa.md (call, call_value):\n+\tUse xtensa_prepare_expand_call.\n+\t(call_internal, call_value_internal):\n+\tAdd the condition in order to be disabled if sibling call.\n+\t(sibcall, sibcall_value, sibcall_epilogue): New expansions.\n+\t(sibcall_internal, sibcall_value_internal): New insn patterns,\n+\tand split ones in order to take care of the indirect sibcalls.\n+\n+2022-06-15  Takayuki 'January June' Suwa  <jjsuwa_sys3175@yahoo.co.jp>\n+\n+\t* doc/invoke.texi: Document -mextra-l32r-costs= option.\n+\n+2022-06-15  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/105962\n+\t* doc/invoke.texi: Add -fno-analyzer-undo-inlining.\n+\t* tree-diagnostic-path.cc (default_tree_diagnostic_path_printer):\n+\tExtend -fdiagnostics-path-format=separate-events so that with\n+\t-fdiagnostics-show-path-depths it prints fndecls as well as stack\n+\tdepths.\n+\n+2022-06-15  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* value-relation.h: Add \"final\" and \"override\" to relation_oracle\n+\tvfunc implementations as appropriate.\n+\n+2022-06-15  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR middle-end/105975\n+\tRevert everything apart from the expand_fn_using_insn and\n+\texpand_direct_optab_fn changes from:\n+\t* internal-fn.def (DEF_INTERNAL_INSN_FN): New macro.\n+\t(GOMP_SIMT_ENTER_ALLOC, GOMP_SIMT_EXIT, GOMP_SIMT_LANE)\n+\t(GOMP_SIMT_LAST_LANE, GOMP_SIMT_ORDERED_PRED, GOMP_SIMT_VOTE_ANY)\n+\t(GOMP_SIMT_XCHG_BFLY, GOMP_SIMT_XCHG_IDX): Use it.\n+\t* internal-fn.h (direct_internal_fn_info::directly_mapped): New\n+\tmember variable.\n+\t(direct_internal_fn_info::vectorizable): Reduce to 1 bit.\n+\t(direct_internal_fn_p): Also return true for internal functions\n+\tthat map directly to instructions defined target-insns.def.\n+\t(direct_internal_fn): Adjust comment accordingly.\n+\t* internal-fn.cc (direct_insn, optab1, optab2, vectorizable_optab1)\n+\t(vectorizable_optab2): New local macros.\n+\t(not_direct): Initialize directly_mapped.\n+\t(mask_load_direct, load_lanes_direct, mask_load_lanes_direct)\n+\t(gather_load_direct, len_load_direct, mask_store_direct)\n+\t(store_lanes_direct, mask_store_lanes_direct, vec_cond_mask_direct)\n+\t(vec_cond_direct, scatter_store_direct, len_store_direct)\n+\t(vec_set_direct, unary_direct, binary_direct, ternary_direct)\n+\t(cond_unary_direct, cond_binary_direct, cond_ternary_direct)\n+\t(while_direct, fold_extract_direct, fold_left_direct)\n+\t(mask_fold_left_direct, check_ptrs_direct): Use the macros above.\n+\t(expand_GOMP_SIMT_ENTER_ALLOC, expand_GOMP_SIMT_EXIT): Delete\n+\t(expand_GOMP_SIMT_LANE, expand_GOMP_SIMT_LAST_LANE): Likewise;\n+\t(expand_GOMP_SIMT_ORDERED_PRED, expand_GOMP_SIMT_VOTE_ANY): Likewise.\n+\t(expand_GOMP_SIMT_XCHG_BFLY, expand_GOMP_SIMT_XCHG_IDX): Likewise.\n+\t(direct_internal_fn_types): Handle functions that map to instructions\n+\tdefined in target-insns.def.\n+\t(direct_internal_fn_types): Likewise.\n+\t(direct_internal_fn_supported_p): Likewise.\n+\t(internal_fn_expanders): Likewise.\n+\t(expand_fn_using_insn): New function,\n+\tsplit out and adapted from...\n+\t(expand_direct_optab_fn): ...here.\n+\t(expand_GOMP_SIMT_ENTER_ALLOC): Use it.\n+\t(expand_GOMP_SIMT_EXIT): Likewise.\n+\t(expand_GOMP_SIMT_LANE): Likewise.\n+\t(expand_GOMP_SIMT_LAST_LANE): Likewise.\n+\t(expand_GOMP_SIMT_ORDERED_PRED): Likewise.\n+\t(expand_GOMP_SIMT_VOTE_ANY): Likewise.\n+\t(expand_GOMP_SIMT_XCHG_BFLY): Likewise.\n+\t(expand_GOMP_SIMT_XCHG_IDX): Likewise.\n+\n+2022-06-15  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\tPR target/105981\n+\t* config/arm/arm.cc (gen_cpymem_ldrd_strd): Rename low_reg and hi_reg\n+\tto first_reg and second_reg respectively.  Initialize them correctly\n+\twhen generating big-endian code.\n+\n+2022-06-15  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\tPR target/105974\n+\t* config/arm/arm.cc (arm_bfi_1_p): Use UINTVAL instead of XUINT.\n+\n+2022-06-15  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/105971\n+\t* tree-ssa-alias.cc (refs_may_alias_p_2): Put bail-out for\n+\tFUNCTION_DECL and LABEL_DECL refs after decl-decl disambiguation\n+\tto leak less surprising alias results.\n+\n+2022-06-15  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/105969\n+\t* gimple-ssa-sprintf.cc (get_origin_and_offset_r): Avoid division\n+\tby zero in overflow check.\n+\n+2022-06-15  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR tree-optimization/105254\n+\tPR tree-optimization/105940\n+\tRevert:\n+\t* config/aarch64/aarch64.cc\n+\t(aarch64_vector_costs::determine_suggested_unroll_factor): Take a\n+\tloop_vec_info as argument.  Restrict the unroll factor to values\n+\tthat divide the VF.\n+\t(aarch64_vector_costs::finish_cost): Update call accordingly.\n+\n+2022-06-15  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* read-rtl.cc (find_int): Substitute symbolic constants\n+\tbefore converting the string to an integer.\n+\n+2022-06-15  Roger Sayle  <roger@nextmovesoftware.com>\n+\t    Richard Biener  <rguenther@suse.de>\n+\n+\t* match.pd (convert (lshift @1 INTEGER_CST@2)): Narrow integer\n+\tleft shifts by a constant when the result is truncated, and the\n+\tshift constant is well-defined.\n+\t* tree-vect-patterns.cc (vect_recog_rotate_pattern): Add\n+\tsupport for rotations of signed integer types, by lowering\n+\tusing unsigned vector shifts.\n+\n+2022-06-15  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/105953\n+\t* config/i386/sse.md (*avx_cmp<mode>3_ltint_not): Force_reg\n+\toperands[3].\n+\n 2022-06-14  Surya Kumari Jangala  <jskumari@linux.ibm.com>\n \n \tPR rtl-optimization/105041"}, {"sha": "3d5679990258cda01fdcbadae87bc5b1454f265d", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/499b9c5f099c1b3e1ec14977abafe62a4c712bdd/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/499b9c5f099c1b3e1ec14977abafe62a4c712bdd/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=499b9c5f099c1b3e1ec14977abafe62a4c712bdd", "patch": "@@ -1 +1 @@\n-20220615\n+20220616"}, {"sha": "eca4b9468945f5ef84d59f3844c4cd9a02115987", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/499b9c5f099c1b3e1ec14977abafe62a4c712bdd/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/499b9c5f099c1b3e1ec14977abafe62a4c712bdd/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=499b9c5f099c1b3e1ec14977abafe62a4c712bdd", "patch": "@@ -1,3 +1,53 @@\n+2022-06-15  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/105962\n+\t* analyzer.opt (fanalyzer-undo-inlining): New option.\n+\t* checker-path.cc: Include \"diagnostic-core.h\" and\n+\t\"inlining-iterator.h\".\n+\t(event_kind_to_string): Handle EK_INLINED_CALL.\n+\t(class inlining_info): New class.\n+\t(checker_event::checker_event): Move here from checker-path.h.\n+\tStore original fndecl and depth, and calculate effective fndecl\n+\tand depth based on inlining information.\n+\t(checker_event::dump): Emit original depth as well as effective\n+\tdepth when they differ; likewise for fndecl.\n+\t(region_creation_event::get_desc): Use m_effective_fndecl.\n+\t(inlined_call_event::get_desc): New.\n+\t(inlined_call_event::get_meaning): New.\n+\t(checker_path::inject_any_inlined_call_events): New.\n+\t* checker-path.h (enum event_kind): Add EK_INLINED_CALL.\n+\t(checker_event::checker_event): Make protected, and move\n+\tdefinition to checker-path.cc.\n+\t(checker_event::get_fndecl): Use effective fndecl.\n+\t(checker_event::get_stack_depth): Use effective stack depth.\n+\t(checker_event::get_logical_location): Use effective stack depth.\n+\t(checker_event::get_original_stack_depth): New.\n+\t(checker_event::m_fndecl): Rename to...\n+\t(checker_event::m_original_fndecl): ...this.\n+\t(checker_event::m_depth): Rename to...\n+\t(checker_event::m_original_depth): ...this.\n+\t(checker_event::m_effective_fndecl): New field.\n+\t(checker_event::m_effective_depth): New field.\n+\t(class inlined_call_event): New checker_event subclass.\n+\t(checker_path::inject_any_inlined_call_events): New decl.\n+\t* diagnostic-manager.cc: Include \"inlining-iterator.h\".\n+\t(diagnostic_manager::emit_saved_diagnostic): Call\n+\tchecker_path::inject_any_inlined_call_events.\n+\t(diagnostic_manager::prune_for_sm_diagnostic): Handle\n+\tEK_INLINED_CALL.\n+\t* engine.cc (tainted_args_function_custom_event::get_desc): Use\n+\teffective fndecl.\n+\t* inlining-iterator.h: New file.\n+\n+2022-06-15  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* diagnostic-manager.cc (saved_diagnostic::dump_dot_id): New.\n+\t(saved_diagnostic::dump_as_dot_node): New.\n+\t* diagnostic-manager.h (saved_diagnostic::dump_dot_id): New decl.\n+\t(saved_diagnostic::dump_as_dot_node): New decl.\n+\t* engine.cc (exploded_node::dump_dot): Add nodes for saved\n+\tdiagnostics.\n+\n 2022-06-02  David Malcolm  <dmalcolm@redhat.com>\n \n \t* checker-path.cc (checker_event::get_meaning): New."}, {"sha": "6223cc224ac740eeffb4330b2cb34e09a7f70938", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/499b9c5f099c1b3e1ec14977abafe62a4c712bdd/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/499b9c5f099c1b3e1ec14977abafe62a4c712bdd/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=499b9c5f099c1b3e1ec14977abafe62a4c712bdd", "patch": "@@ -1,3 +1,8 @@\n+2022-06-15  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* module.cc (module_state::write_readme): Use less confusing\n+\timportable unit names.\n+\n 2022-06-14  Nathan Sidwell  <nathan@acm.org>\n \n \t* cp-tree.h (fini_modules): Add has_inits parm."}, {"sha": "537ae39cc9c250dac351af99641c7075191f3f75", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/499b9c5f099c1b3e1ec14977abafe62a4c712bdd/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/499b9c5f099c1b3e1ec14977abafe62a4c712bdd/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=499b9c5f099c1b3e1ec14977abafe62a4c712bdd", "patch": "@@ -1,3 +1,61 @@\n+2022-06-15  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* d-attribs.cc (d_langhook_attribute_table): Add no_sanitize.\n+\t(d_handle_no_sanitize_attribute): New function.\n+\n+2022-06-15  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* d-attribs.cc (d_langhook_attribute_table): Add visibility.\n+\t(insert_type_attribute): Use decl_attributes instead of\n+\tmerge_attributes.\n+\t(insert_decl_attribute): Likewise.\n+\t(apply_user_attributes): Do nothing when no UDAs applied.\n+\t(d_handle_visibility_attribute): New function.\n+\t* d-gimplify.cc (d_gimplify_binary_expr): Adjust.\n+\t* d-tree.h (set_visibility_for_decl): Declare.\n+\t* decl.cc (get_symbol_decl): Move setting of visibility flags to...\n+\t(set_visibility_for_decl): ... here.  New function.\n+\t* types.cc (TypeVisitor::visit (TypeStruct *)): Call\n+\tset_visibility_for_decl().\n+\t(TypeVisitor::visit (TypeClass *)): Likewise.\n+\n+2022-06-15  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* typeinfo.cc (make_internal_typeinfo): Set TYPE_ARTIFICIAL.\n+\n+2022-06-15  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* d-attribs.cc (apply_user_attributes): Set ATTR_FLAG_TYPE_IN_PLACE\n+\tonly on incomplete types.\n+\t* d-codegen.cc (copy_aggregate_type): Set TYPE_STUB_DECL after copy.\n+\t* d-compiler.cc (Compiler::onParseModule): Adjust.\n+\t* d-tree.h (AGGREGATE_OR_ENUM_TYPE_CHECK): Define.\n+\t(TYPE_FORWARD_REFERENCES): Define.\n+\t* decl.cc (gcc_attribute_p): Update documentation.\n+\t(DeclVisitor::visit (StructDeclaration *)): Exit before building type\n+\tnode if gcc.attributes symbol.\n+\t(DeclVisitor::visit (ClassDeclaration *)): Build type node and add\n+\tTYPE_NAME to current binding level before emitting anything else.\n+\t(DeclVisitor::visit (InterfaceDeclaration *)): Likewise.\n+\t(DeclVisitor::visit (EnumDeclaration *)): Likewise.\n+\t(build_type_decl): Move rest_of_decl_compilation() call to\n+\tfinish_aggregate_type().\n+\t* types.cc (insert_aggregate_field): Move layout_decl() call to\n+\tfinish_aggregate_type().\n+\t(insert_aggregate_bitfield): Likewise.\n+\t(layout_aggregate_members): Adjust.\n+\t(finish_incomplete_fields): New function.\n+\t(finish_aggregate_type): Handle forward referenced field types.  Call\n+\trest_of_type_compilation() after completing the aggregate.\n+\t(TypeVisitor::visit (TypeEnum *)): Don't set size and alignment until\n+\tafter apply_user_attributes().  Call rest_of_type_compilation() after\n+\tcompleting the enumeral.\n+\t(TypeVisitor::visit (TypeStruct *)): Call build_type_decl() before\n+\tapply_user_attributes().  Don't set size, alignment, and mode until\n+\tafter apply_user_attributes().\n+\t(TypeVisitor::visit (TypeClass *)): Call build_type_decl() before\n+\tapplly_user_attributes().\n+\n 2022-06-13  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* d-builtins.cc: Include builtins.h."}, {"sha": "c8664b314450012399b41df600c089274f3193ea", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/499b9c5f099c1b3e1ec14977abafe62a4c712bdd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/499b9c5f099c1b3e1ec14977abafe62a4c712bdd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=499b9c5f099c1b3e1ec14977abafe62a4c712bdd", "patch": "@@ -1,3 +1,82 @@\n+2022-06-15  Takayuki 'January June' Suwa  <jjsuwa_sys3175@yahoo.co.jp>\n+\n+\t* gcc.target/xtensa/sibcalls.c: New.\n+\n+2022-06-15  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/105962\n+\t* gcc.dg/analyzer/inlining-1-multiline.c: New test.\n+\t* gcc.dg/analyzer/inlining-1-no-undo.c: New test.\n+\t* gcc.dg/analyzer/inlining-1.c: New test.\n+\t* gcc.dg/analyzer/inlining-2-multiline.c: New test.\n+\t* gcc.dg/analyzer/inlining-2.c: New test.\n+\t* gcc.dg/analyzer/inlining-3-multiline.c: New test.\n+\t* gcc.dg/analyzer/inlining-3.c: New test.\n+\t* gcc.dg/analyzer/inlining-4-multiline.c: New test.\n+\t* gcc.dg/analyzer/inlining-4.c: New test.\n+\t* gcc.dg/analyzer/inlining-5-multiline.c: New test.\n+\t* gcc.dg/analyzer/inlining-5.c: New test.\n+\t* gcc.dg/analyzer/inlining-6-multiline.c: New test.\n+\t* gcc.dg/analyzer/inlining-6.c: New test.\n+\t* gcc.dg/analyzer/inlining-7-multiline.c: New test.\n+\t* gcc.dg/analyzer/inlining-7.c: New test.\n+\n+2022-06-15  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/analyzer/uninit-1.c: Add test coverage of attempts\n+\tto jump through an uninitialized function pointer, and of attempts\n+\tto pass an uninitialized value to a function call.\n+\n+2022-06-15  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* gdc.dg/asan/attr_no_sanitize1.d: New test.\n+\t* gdc.dg/ubsan/attr_no_sanitize2.d: New test.\n+\n+2022-06-15  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* gdc.dg/attr_visibility1.d: New test.\n+\t* gdc.dg/attr_visibility2.d: New test.\n+\t* gdc.dg/attr_visibility3.d: New test.\n+\n+2022-06-15  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* g++.dg/cpp1z/aligned-new9.C: Skip on AIX.\n+\n+2022-06-15  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* gdc.dg/Wpadded.d: New test.\n+\n+2022-06-15  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/105971\n+\t* gcc.dg/torture/pr106971.c: New testcase.\n+\n+2022-06-15  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/105969\n+\t* gcc.dg/pr105969.c: New testcase.\n+\n+2022-06-15  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/sve/cost_model_14.c: New test.\n+\n+2022-06-15  Roger Sayle  <roger@nextmovesoftware.com>\n+\t    Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/fold-convlshift-4.c: New test case.\n+\t* gcc.dg/optimize-bswaphi-1.c: Update found bswap count.\n+\t* gcc.dg/tree-ssa/pr61839_3.c: Shift is now optimized before VRP.\n+\t* gcc.dg/vect/vect-over-widen-1-big-array.c: Remove obsolete tests.\n+\t* gcc.dg/vect/vect-over-widen-1.c: Likewise.\n+\t* gcc.dg/vect/vect-over-widen-3-big-array.c: Likewise.\n+\t* gcc.dg/vect/vect-over-widen-3.c: Likewise.\n+\t* gcc.dg/vect/vect-over-widen-4-big-array.c: Likewise.\n+\t* gcc.dg/vect/vect-over-widen-4.c: Likewise.\n+\n+2022-06-15  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* g++.target/i386/pr105953.C: New test.\n+\n 2022-06-14  Surya Kumari Jangala  <jskumari@linux.ibm.com>\n \n \tPR rtl-optimization/105041"}, {"sha": "893d20d8cc8d659e9d6f363d3272cb4a302f352a", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/499b9c5f099c1b3e1ec14977abafe62a4c712bdd/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/499b9c5f099c1b3e1ec14977abafe62a4c712bdd/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=499b9c5f099c1b3e1ec14977abafe62a4c712bdd", "patch": "@@ -1,3 +1,12 @@\n+2022-06-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* testsuite/libgomp.c-c++-common/get-mapped-ptr-1.c (main): Initialize\n+\tq to ddress of an automatic variable.  Use -5 instead of -1 in\n+\tomp_get_mapped_ptr call.  Add test with omp_initial_device.\n+\t* testsuite/libgomp.fortran/get-mapped-ptr-1.f90 (main): Use -5 instead\n+\tof -1 in omp_get_mapped_ptr call.  Add test with omp_initial_device.\n+\tRenumber stop arguments afterwards.\n+\n 2022-06-13  Jakub Jelinek  <jakub@redhat.com>\n \n \t* omp.h.in (omp_initial_device, omp_invalid_device): New enumerators."}, {"sha": "2450d4905eba15c17bc271f9912d088c28e67de2", "filename": "libphobos/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/499b9c5f099c1b3e1ec14977abafe62a4c712bdd/libphobos%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/499b9c5f099c1b3e1ec14977abafe62a4c712bdd/libphobos%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2FChangeLog?ref=499b9c5f099c1b3e1ec14977abafe62a4c712bdd", "patch": "@@ -1,3 +1,13 @@\n+2022-06-15  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* libdruntime/gcc/attributes.d (no_sanitize): Define.\n+\t(noSanitize): Define.\n+\n+2022-06-15  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* libdruntime/gcc/attributes.d (visibility): Define.\n+\t(hidden): Define.\n+\n 2022-06-13  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* libdruntime/MERGE: Merge upstream druntime 454471d8."}, {"sha": "80ca871a5587233fd8b06ec9cc4929bc2cd67106", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/499b9c5f099c1b3e1ec14977abafe62a4c712bdd/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/499b9c5f099c1b3e1ec14977abafe62a4c712bdd/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=499b9c5f099c1b3e1ec14977abafe62a4c712bdd", "patch": "@@ -1,3 +1,19 @@\n+2022-06-15  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\tPR libstdc++/105717\n+\t* include/bits/hashtable_policy.h (_ConvertToValueType): New.\n+\t* include/bits/hashtable.h (_Hashtable<>::_M_insert_unique_aux): New.\n+\t(_Hashtable<>::_M_insert(_Arg&&, const _NodeGenerator&, true_type)): Use latters.\n+\t(_Hashtable<>::_M_insert(_Arg&&, const _NodeGenerator&, false_type)): Likewise.\n+\t(_Hashtable(_InputIterator, _InputIterator, size_type, const _Hash&, const _Equal&,\n+\tconst allocator_type&, true_type)): Use this.insert range.\n+\t(_Hashtable(_InputIterator, _InputIterator, size_type, const _Hash&, const _Equal&,\n+\tconst allocator_type&, false_type)): Use _M_insert.\n+\t* testsuite/23_containers/unordered_map/cons/56112.cc: Check how many times conversion\n+\tis done.\n+\t* testsuite/23_containers/unordered_map/insert/105717.cc: New test.\n+\t* testsuite/23_containers/unordered_set/insert/105717.cc: New test.\n+\n 2022-06-14  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/62187"}]}