{"sha": "835f9b4dad11d84e385ea8fe8bba1b0e403f23f5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODM1ZjliNGRhZDExZDg0ZTM4NWVhOGZlOGJiYTFiMGU0MDNmMjNmNQ==", "commit": {"author": {"name": "Gavin Romig-Koch", "email": "gavin@cygnus.com", "date": "1999-07-02T10:30:01Z"}, "committer": {"name": "Gavin Romig-Koch", "email": "gavin@gcc.gnu.org", "date": "1999-07-02T10:30:01Z"}, "message": "For gcc:\n\n\t* c-decl.c (widest_integer_literal_type_node,\n\twidest_unsigned_literal_type) : New.\n\t(init_decl_processing): Handle/use the two new types.\n\t* c-common.c (type_for_size,type_for_mode) : Same.\n\t* c-lex.c (yylex) : Same.\n\t* c-typeck.c (unsigned_type,signed_type,signed_or_unsigned_type) :\n\tSame.\n\t* c-tree.h (widest_integer_literal_type_node,\n\twidest_unsigned_literal_type) : New.\nFor gcc/cp:\n\t* cp-tree.h (widest_integer_literal_type_node,\n\twidest_unsigned_literal_type) : New.\n\t* decl.c (widest_integer_literal_type_node,\n\twidest_unsigned_literal_type) : New.\n\t(init_decl_processing): Handle/use the two new types.\n\t* lex.c (real_yylex): Same.\n\t* typeck.c (unsigned_type,signed_type,signed_or_unsigned_type) :\n\tSame.\n\nFrom-SVN: r27923", "tree": {"sha": "5114691738cec02b4b8107a5fd681336bc2439d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5114691738cec02b4b8107a5fd681336bc2439d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/835f9b4dad11d84e385ea8fe8bba1b0e403f23f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/835f9b4dad11d84e385ea8fe8bba1b0e403f23f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/835f9b4dad11d84e385ea8fe8bba1b0e403f23f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/835f9b4dad11d84e385ea8fe8bba1b0e403f23f5/comments", "author": null, "committer": null, "parents": [{"sha": "e75a9d77196ec059245f3baaff6cf249102ea5e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e75a9d77196ec059245f3baaff6cf249102ea5e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e75a9d77196ec059245f3baaff6cf249102ea5e5"}], "stats": {"total": 112, "additions": 108, "deletions": 4}, "files": [{"sha": "bc5da1745d1b7af31b554d5f91ca0517d2b1cd58", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/835f9b4dad11d84e385ea8fe8bba1b0e403f23f5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/835f9b4dad11d84e385ea8fe8bba1b0e403f23f5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=835f9b4dad11d84e385ea8fe8bba1b0e403f23f5", "patch": "@@ -1,3 +1,15 @@\n+Fri Jul  2 13:23:39 1999  Gavin Romig-Koch  <gavin@cygnus.com>\n+\n+\t* c-decl.c (widest_integer_literal_type_node,\n+\twidest_unsigned_literal_type) : New.\n+\t(init_decl_processing): Handle/use the two new types.\n+\t* c-common.c (type_for_size,type_for_mode) : Same.\n+\t* c-lex.c (yylex) : Same.\n+\t* c-typeck.c (unsigned_type,signed_type,signed_or_unsigned_type) :\n+\tSame.\n+\t* c-tree.h (widest_integer_literal_type_node,\n+\twidest_unsigned_literal_type) : New.\n+\n Fri Jul  2 03:05:44 1999  Jeffrey A Law  (law@cygnus.com)\n \n \t* dwarfout.c (field_byte_offset): Correctly compute the object's"}, {"sha": "f1a61cdcc8f431fedd2939e861e6a95fedbdedc8", "filename": "gcc/c-common.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/835f9b4dad11d84e385ea8fe8bba1b0e403f23f5/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/835f9b4dad11d84e385ea8fe8bba1b0e403f23f5/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=835f9b4dad11d84e385ea8fe8bba1b0e403f23f5", "patch": "@@ -2081,6 +2081,10 @@ type_for_size (bits, unsignedp)\n     return (unsignedp ? long_long_unsigned_type_node\n \t    : long_long_integer_type_node);\n \n+  if (bits == TYPE_PRECISION (widest_integer_literal_type_node))\n+    return (unsignedp ? widest_unsigned_literal_type_node\n+\t    : widest_integer_literal_type_node);\n+\n   if (bits <= TYPE_PRECISION (intQI_type_node))\n     return unsignedp ? unsigned_intQI_type_node : intQI_type_node;\n \n@@ -2120,6 +2124,10 @@ type_for_mode (mode, unsignedp)\n   if (mode == TYPE_MODE (long_long_integer_type_node))\n     return unsignedp ? long_long_unsigned_type_node : long_long_integer_type_node;\n \n+  if (mode == TYPE_MODE (widest_integer_literal_type_node))\n+    return unsignedp ? widest_unsigned_literal_type_node \n+                     : widest_integer_literal_type_node;\n+\n   if (mode == TYPE_MODE (intQI_type_node))\n     return unsignedp ? unsigned_intQI_type_node : intQI_type_node;\n "}, {"sha": "97db33f32a38dda1c0c37ef465a63746462de80c", "filename": "gcc/c-decl.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/835f9b4dad11d84e385ea8fe8bba1b0e403f23f5/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/835f9b4dad11d84e385ea8fe8bba1b0e403f23f5/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=835f9b4dad11d84e385ea8fe8bba1b0e403f23f5", "patch": "@@ -123,6 +123,14 @@ tree unsigned_type_node;\n tree long_unsigned_type_node;\n tree long_long_unsigned_type_node;\n \n+/* These are used for integer literals that are larger than \n+   a long long.  The largest integer literals we can handle\n+   are the width of two HOST_WIDE_INTs.  If two HOST_WIDE_INTs\n+   are not larger than the target's long long, then these\n+   will never be used. */\n+tree widest_integer_literal_type_node;\n+tree widest_unsigned_literal_type_node;\n+\n tree boolean_type_node;\n tree boolean_false_node;\n tree boolean_true_node;\n@@ -3103,6 +3111,16 @@ init_decl_processing ()\n   pushdecl (build_decl (TYPE_DECL, get_identifier (\"unsigned char\"),\n \t\t\tunsigned_char_type_node));\n \n+  /* Create the widest literal types. */\n+  widest_integer_literal_type_node = make_signed_type (HOST_BITS_PER_WIDE_INT * 2);\n+  pushdecl (build_decl (TYPE_DECL, NULL_TREE, \n+\t\t\twidest_integer_literal_type_node));\n+\n+  widest_unsigned_literal_type_node = make_unsigned_type (HOST_BITS_PER_WIDE_INT * 2);\n+  pushdecl (build_decl (TYPE_DECL, NULL_TREE, \n+\t\t\twidest_unsigned_literal_type_node));\n+\n+  /* Now all the integer mode types. */\n   intQI_type_node = make_signed_type (GET_MODE_BITSIZE (QImode));\n   pushdecl (build_decl (TYPE_DECL, NULL_TREE, intQI_type_node));\n "}, {"sha": "ed825ee42fcb93a7df66857ada07d1daa18fbdaa", "filename": "gcc/c-lex.c", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/835f9b4dad11d84e385ea8fe8bba1b0e403f23f5/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/835f9b4dad11d84e385ea8fe8bba1b0e403f23f5/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=835f9b4dad11d84e385ea8fe8bba1b0e403f23f5", "patch": "@@ -1818,10 +1818,17 @@ yylex ()\n \t\telse if (! spec_long_long)\n \t\t  traditional_type = (spec_unsigned ? long_unsigned_type_node\n \t\t\t\t      : long_integer_type_node);\n-\t\telse\n+\t\telse if (int_fits_type_p (yylval.ttype,\n+\t\t\t\t\t  spec_unsigned \n+\t\t\t\t\t  ? long_long_unsigned_type_node\n+\t\t\t\t\t  : long_long_integer_type_node)) \n \t\t  traditional_type = (spec_unsigned\n \t\t\t\t      ? long_long_unsigned_type_node\n \t\t\t\t      : long_long_integer_type_node);\n+\t\telse\n+\t\t  traditional_type = (spec_unsigned\n+\t\t\t\t      ? widest_unsigned_literal_type_node\n+\t\t\t\t      : widest_integer_literal_type_node);\n \t      }\n \t    if (warn_traditional || ! flag_traditional)\n \t      {\n@@ -1843,8 +1850,15 @@ yylex ()\n \t\t\t && int_fits_type_p (yylval.ttype,\n \t\t\t\t\t     long_long_integer_type_node))\n \t\t  ansi_type = long_long_integer_type_node;\n-\t\telse\n+\t\telse if (int_fits_type_p (yylval.ttype,\n+\t\t\t\t\t  long_long_unsigned_type_node))\n \t\t  ansi_type = long_long_unsigned_type_node;\n+\t\telse if (! spec_unsigned\n+\t\t\t && int_fits_type_p (yylval.ttype,\n+\t\t\t\t\t     widest_integer_literal_type_node))\n+\t\t  ansi_type = widest_integer_literal_type_node;\n+\t\telse\n+\t\t  ansi_type = widest_unsigned_literal_type_node;\n \t      }\n \n \t    type = flag_traditional ? traditional_type : ansi_type;"}, {"sha": "7e01356f94ba2b53edfbe6a33aba5433cf89c8ab", "filename": "gcc/c-tree.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/835f9b4dad11d84e385ea8fe8bba1b0e403f23f5/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/835f9b4dad11d84e385ea8fe8bba1b0e403f23f5/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=835f9b4dad11d84e385ea8fe8bba1b0e403f23f5", "patch": "@@ -246,9 +246,11 @@ extern tree integer_type_node;\n extern tree long_double_type_node;\n extern tree long_ftype_long;\n extern tree long_integer_type_node;\n+extern tree long_unsigned_type_node;\n extern tree long_long_integer_type_node;\n extern tree long_long_unsigned_type_node;\n-extern tree long_unsigned_type_node;\n+extern tree widest_integer_literal_type_node;\n+extern tree widest_unsigned_literal_type_node;\n extern tree complex_integer_type_node;\n extern tree complex_float_type_node;\n extern tree complex_double_type_node;"}, {"sha": "ca986550a555147d9cd4ff38ac87d3aff0fb3c6d", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/835f9b4dad11d84e385ea8fe8bba1b0e403f23f5/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/835f9b4dad11d84e385ea8fe8bba1b0e403f23f5/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=835f9b4dad11d84e385ea8fe8bba1b0e403f23f5", "patch": "@@ -739,6 +739,8 @@ unsigned_type (type)\n     return long_unsigned_type_node;\n   if (type1 == long_long_integer_type_node)\n     return long_long_unsigned_type_node;\n+  if (type1 == widest_integer_literal_type_node)\n+    return widest_unsigned_literal_type_node;\n   if (type1 == intDI_type_node)\n     return unsigned_intDI_type_node;\n   if (type1 == intSI_type_node)\n@@ -768,6 +770,8 @@ signed_type (type)\n     return long_integer_type_node;\n   if (type1 == long_long_unsigned_type_node)\n     return long_long_integer_type_node;\n+  if (type1 == widest_unsigned_literal_type_node)\n+    return widest_integer_literal_type_node;\n   if (type1 == unsigned_intDI_type_node)\n     return intDI_type_node;\n   if (type1 == unsigned_intSI_type_node)\n@@ -802,6 +806,9 @@ signed_or_unsigned_type (unsignedp, type)\n   if (TYPE_PRECISION (type) == TYPE_PRECISION (long_long_integer_type_node)) \n     return (unsignedp ? long_long_unsigned_type_node\n \t    : long_long_integer_type_node);\n+  if (TYPE_PRECISION (type) == TYPE_PRECISION (widest_integer_literal_type_node)) \n+    return (unsignedp ? widest_unsigned_literal_type_node\n+\t    : widest_integer_literal_type_node);\n   return type;\n }\n "}, {"sha": "40d5aac7d8840b0bdd4ddcdda60e1c693bb5dd1f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/835f9b4dad11d84e385ea8fe8bba1b0e403f23f5/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/835f9b4dad11d84e385ea8fe8bba1b0e403f23f5/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=835f9b4dad11d84e385ea8fe8bba1b0e403f23f5", "patch": "@@ -1,3 +1,14 @@\n+1999-07-02  Gavin Romig-Koch  <gavin@cygnus.com>\n+\n+\t* cp-tree.h (widest_integer_literal_type_node,\n+\twidest_unsigned_literal_type) : New.\n+\t* decl.c (widest_integer_literal_type_node,\n+\twidest_unsigned_literal_type) : New.\n+\t(init_decl_processing): Handle/use the two new types.\n+\t* lex.c (real_yylex): Same.\n+\t* typeck.c (unsigned_type,signed_type,signed_or_unsigned_type) :\n+\tSame. \n+\n 1999-07-01  Mark Mitchell  <mark@codesourcery.com>\n \n \t* decl.c (grokdeclarator): Don't give names \"for linkage purposes\""}, {"sha": "28c7e3fe6f9e09531a387fd066ee7d5e1455d107", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/835f9b4dad11d84e385ea8fe8bba1b0e403f23f5/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/835f9b4dad11d84e385ea8fe8bba1b0e403f23f5/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=835f9b4dad11d84e385ea8fe8bba1b0e403f23f5", "patch": "@@ -336,6 +336,7 @@ extern tree ptrdiff_type_node;\n extern tree short_integer_type_node, short_unsigned_type_node;\n extern tree long_integer_type_node, long_unsigned_type_node;\n extern tree long_long_integer_type_node, long_long_unsigned_type_node;\n+extern tree widest_integer_literal_type_node, widest_unsigned_literal_type_node;\n extern tree unsigned_type_node;\n extern tree string_type_node, char_array_type_node, int_array_type_node;\n extern tree wchar_array_type_node;"}, {"sha": "1b6b268b5b74894b0c3f99e9e28841edd8efb3eb", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/835f9b4dad11d84e385ea8fe8bba1b0e403f23f5/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/835f9b4dad11d84e385ea8fe8bba1b0e403f23f5/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=835f9b4dad11d84e385ea8fe8bba1b0e403f23f5", "patch": "@@ -220,6 +220,14 @@ tree unsigned_type_node;\n tree long_unsigned_type_node;\n tree long_long_unsigned_type_node;\n \n+/* These are used for integer literals that are larger than \n+   a long long.  The largest integer literals we can handle\n+   are the width of two HOST_WIDE_INTs.  If two HOST_WIDE_INTs\n+   are not larger than the target's long long, then these\n+   will never be used. */\n+tree widest_integer_literal_type_node;\n+tree widest_unsigned_literal_type_node;\n+\n tree ptrdiff_type_node;\n \n tree unsigned_char_type_node;\n@@ -6356,6 +6364,15 @@ init_decl_processing ()\n   unsigned_char_type_node = make_unsigned_type (CHAR_TYPE_SIZE);\n   record_builtin_type (RID_MAX, \"unsigned char\", unsigned_char_type_node);\n \n+  /* Create the widest literal types. */\n+  widest_integer_literal_type_node = make_signed_type (HOST_BITS_PER_WIDE_INT * 2);\n+  pushdecl (build_decl (TYPE_DECL, NULL_TREE, \n+\t\t\twidest_integer_literal_type_node));\n+\n+  widest_unsigned_literal_type_node = make_unsigned_type (HOST_BITS_PER_WIDE_INT * 2);\n+  pushdecl (build_decl (TYPE_DECL, NULL_TREE, \n+\t\t\twidest_unsigned_literal_type_node));\n+\n   /* These are types that type_for_size and type_for_mode use.  */\n   intQI_type_node = make_signed_type (GET_MODE_BITSIZE (QImode));\n   pushdecl (build_decl (TYPE_DECL, NULL_TREE, intQI_type_node));"}, {"sha": "303306a7967d8886d1e46b5109890089acfed8ff", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/835f9b4dad11d84e385ea8fe8bba1b0e403f23f5/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/835f9b4dad11d84e385ea8fe8bba1b0e403f23f5/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=835f9b4dad11d84e385ea8fe8bba1b0e403f23f5", "patch": "@@ -3937,8 +3937,15 @@ real_yylex ()\n \t\t     && int_fits_type_p (yylval.ttype,\n \t\t\t\t\t long_long_integer_type_node))\n \t      type = long_long_integer_type_node;\n-\t    else\n+\t    else if (int_fits_type_p (yylval.ttype,\n+\t\t\t\t      long_long_unsigned_type_node))\n \t      type = long_long_unsigned_type_node;\n+\t    else if (! spec_unsigned\n+\t\t     && int_fits_type_p (yylval.ttype,\n+\t\t\t\t\t widest_integer_literal_type_node))\n+\t      type = widest_integer_literal_type_node;\n+\t    else\n+\t      type = widest_unsigned_literal_type_node;\n \n \t    if (!int_fits_type_p (yylval.ttype, type) && !warn)\n \t      pedwarn (\"integer constant is larger than the maximum value for its type\");"}, {"sha": "81fa2963f0b2d224eba5cfef838565626af7c1e2", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/835f9b4dad11d84e385ea8fe8bba1b0e403f23f5/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/835f9b4dad11d84e385ea8fe8bba1b0e403f23f5/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=835f9b4dad11d84e385ea8fe8bba1b0e403f23f5", "patch": "@@ -1475,6 +1475,8 @@ unsigned_type (type)\n     return long_unsigned_type_node;\n   if (type1 == long_long_integer_type_node)\n     return long_long_unsigned_type_node;\n+  if (type1 == widest_integer_literal_type_node)\n+    return widest_unsigned_literal_type_node;\n #if HOST_BITS_PER_WIDE_INT >= 64\n   if (type1 == intTI_type_node)\n     return unsigned_intTI_type_node;\n@@ -1508,6 +1510,8 @@ signed_type (type)\n     return long_integer_type_node;\n   if (type1 == long_long_unsigned_type_node)\n     return long_long_integer_type_node;\n+  if (type1 == widest_unsigned_literal_type_node)\n+    return widest_integer_literal_type_node;\n #if HOST_BITS_PER_WIDE_INT >= 64\n   if (type1 == unsigned_intTI_type_node)\n     return intTI_type_node;\n@@ -1547,6 +1551,9 @@ signed_or_unsigned_type (unsignedp, type)\n   if (TYPE_PRECISION (type) == TYPE_PRECISION (long_long_integer_type_node)) \n     return (unsignedp ? long_long_unsigned_type_node\n \t    : long_long_integer_type_node);\n+  if (TYPE_PRECISION (type) == TYPE_PRECISION (widest_integer_literal_type_node)) \n+    return (unsignedp ? widest_unsigned_literal_type_node\n+\t    : widest_integer_literal_type_node);\n   return type;\n }\n "}]}