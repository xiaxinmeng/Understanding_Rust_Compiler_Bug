{"sha": "0e901c6787c1d9673f260adda35f1e758a867532", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGU5MDFjNjc4N2MxZDk2NzNmMjYwYWRkYTM1ZjFlNzU4YTg2NzUzMg==", "commit": {"author": {"name": "Cary Coutant", "email": "ccoutant@google.com", "date": "2013-08-13T23:39:54Z"}, "committer": {"name": "Cary Coutant", "email": "ccoutant@gcc.gnu.org", "date": "2013-08-13T23:39:54Z"}, "message": "dwarf2out.c (CHECKSUM_BLOCK): New macro.\n\ngcc/\n\t* dwarf2out.c (CHECKSUM_BLOCK): New macro.\n\t(attr_checksum): Hash vector contents instead of pointer.\n\t(attr_checksum_ordered): Likewise.\n\nFrom-SVN: r201712", "tree": {"sha": "5143e52aaabf0074e6ac9f26587c2ca192104944", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5143e52aaabf0074e6ac9f26587c2ca192104944"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e901c6787c1d9673f260adda35f1e758a867532", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e901c6787c1d9673f260adda35f1e758a867532", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e901c6787c1d9673f260adda35f1e758a867532", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e901c6787c1d9673f260adda35f1e758a867532/comments", "author": null, "committer": null, "parents": [{"sha": "53781c0df3a5b054dda09bff165091befc56b1b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53781c0df3a5b054dda09bff165091befc56b1b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53781c0df3a5b054dda09bff165091befc56b1b8"}], "stats": {"total": 20, "additions": 17, "deletions": 3}, "files": [{"sha": "45d4971fa7180a1b61e10f08e96f4e05b88d6160", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e901c6787c1d9673f260adda35f1e758a867532/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e901c6787c1d9673f260adda35f1e758a867532/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0e901c6787c1d9673f260adda35f1e758a867532", "patch": "@@ -1,3 +1,9 @@\n+2013-08-13  Cary Coutant  <ccoutant@google.com>\n+\n+\t* dwarf2out.c (CHECKSUM_BLOCK): New macro.\n+\t(attr_checksum): Hash vector contents instead of pointer.\n+\t(attr_checksum_ordered): Likewise.\n+\n 2013-08-13  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/sse.md (*sse2_maskmovdqu): Emit addr32 prefix"}, {"sha": "fc1c3f215657bd07d35c092860023400e609d838", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e901c6787c1d9673f260adda35f1e758a867532/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e901c6787c1d9673f260adda35f1e758a867532/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=0e901c6787c1d9673f260adda35f1e758a867532", "patch": "@@ -5432,6 +5432,7 @@ pop_compile_unit (dw_die_ref old_unit)\n }\n \n #define CHECKSUM(FOO) md5_process_bytes (&(FOO), sizeof (FOO), ctx)\n+#define CHECKSUM_BLOCK(FOO, SIZE) md5_process_bytes ((FOO), (SIZE), ctx)\n #define CHECKSUM_STRING(FOO) md5_process_bytes ((FOO), strlen (FOO), ctx)\n \n /* Calculate the checksum of a location expression.  */\n@@ -5475,7 +5476,9 @@ attr_checksum (dw_attr_ref at, struct md5_ctx *ctx, int *mark)\n       CHECKSUM (at->dw_attr_val.v.val_double);\n       break;\n     case dw_val_class_vec:\n-      CHECKSUM (at->dw_attr_val.v.val_vec);\n+      CHECKSUM_BLOCK (at->dw_attr_val.v.val_vec.array,\n+\t\t      (at->dw_attr_val.v.val_vec.length\n+\t\t       * at->dw_attr_val.v.val_vec.elt_size));\n       break;\n     case dw_val_class_flag:\n       CHECKSUM (at->dw_attr_val.v.val_flag);\n@@ -5550,10 +5553,12 @@ die_checksum (dw_die_ref die, struct md5_ctx *ctx, int *mark)\n }\n \n #undef CHECKSUM\n+#undef CHECKSUM_BLOCK\n #undef CHECKSUM_STRING\n \n /* For DWARF-4 types, include the trailing NULL when checksumming strings.  */\n #define CHECKSUM(FOO) md5_process_bytes (&(FOO), sizeof (FOO), ctx)\n+#define CHECKSUM_BLOCK(FOO, SIZE) md5_process_bytes ((FOO), (SIZE), ctx)\n #define CHECKSUM_STRING(FOO) md5_process_bytes ((FOO), strlen (FOO) + 1, ctx)\n #define CHECKSUM_SLEB128(FOO) checksum_sleb128 ((FOO), ctx)\n #define CHECKSUM_ULEB128(FOO) checksum_uleb128 ((FOO), ctx)\n@@ -5749,8 +5754,11 @@ attr_checksum_ordered (enum dwarf_tag tag, dw_attr_ref at,\n \n     case dw_val_class_vec:\n       CHECKSUM_ULEB128 (DW_FORM_block);\n-      CHECKSUM_ULEB128 (sizeof (at->dw_attr_val.v.val_vec));\n-      CHECKSUM (at->dw_attr_val.v.val_vec);\n+      CHECKSUM_ULEB128 (at->dw_attr_val.v.val_vec.length\n+\t\t\t* at->dw_attr_val.v.val_vec.elt_size);\n+      CHECKSUM_BLOCK (at->dw_attr_val.v.val_vec.array,\n+\t\t      (at->dw_attr_val.v.val_vec.length\n+\t\t       * at->dw_attr_val.v.val_vec.elt_size));\n       break;\n \n     case dw_val_class_flag:"}]}