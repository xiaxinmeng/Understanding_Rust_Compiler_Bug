{"sha": "a8db7887dfbf502b7e60d64bfeebd0de592d2d45", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YThkYjc4ODdkZmJmNTAyYjdlNjBkNjRiZmVlYmQwZGU1OTJkMmQ0NQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-02-10T18:31:15Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-02-10T18:31:15Z"}, "message": "c++: Consider addresses of heap artificial vars always non-NULL [PR98988, PR99031]\n\nWith -fno-delete-null-pointer-checks which is e.g. implied by\n-fsanitize=undefined or default on some embedded targets, the middle-end\nfolder doesn't consider addresses of global VAR_DECLs to be non-NULL, as one\nof them could have address 0.  Still, I think malloc/operator new (at least\nthe nonthrowing) relies on NULL returns meaning allocation failure rather\nthan success.  Furthermore, the artificial VAR_DECLs we create for\nconstexpr new never actually live in the address space of the program,\nso we can pretend they will never be NULL too.\n\n> I'm surprised that nonzero_address has such a limited set of things it will\n> actually believe have non-zero addresses with\n> -fno-delete-null-pointer-checks.  But it seems that we should be able to\n> arrange to satisfy\n>\n> >   if (definition && !DECL_EXTERNAL (decl)\n>\n> since these \"variables\" are indeed defined within the current translation\n> unit.\n\nDoing that seems to work and as added benefit it fixes another PR that has\nbeen filed recently.  I need to create the varpool node explicitly and call\na method that sets the definition member in there, but I can also unregister\nthose varpool nodes at the end of constexpr processing, as the processing\nensured they don't leak outside of the processing.\n\n2021-02-10  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/98988\n\tPR c++/99031\n\t* constexpr.c: Include cgraph.h.\n\t(cxx_eval_call_expression): Call varpool_node::finalize_decl on\n\theap artificial vars.\n\t(cxx_eval_outermost_constant_expr): Remove varpool nodes for\n\theap artificial vars.\n\n\t* g++.dg/cpp2a/constexpr-new16.C: New test.\n\t* g++.dg/cpp2a/constexpr-new17.C: New test.", "tree": {"sha": "c2f2d0e20196d0df355f4e28f11e3876ed1c74fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c2f2d0e20196d0df355f4e28f11e3876ed1c74fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a8db7887dfbf502b7e60d64bfeebd0de592d2d45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8db7887dfbf502b7e60d64bfeebd0de592d2d45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8db7887dfbf502b7e60d64bfeebd0de592d2d45", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8db7887dfbf502b7e60d64bfeebd0de592d2d45/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5874d156669058ffb2c0578987ba6ba3b08f2be3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5874d156669058ffb2c0578987ba6ba3b08f2be3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5874d156669058ffb2c0578987ba6ba3b08f2be3"}], "stats": {"total": 57, "additions": 48, "deletions": 9}, "files": [{"sha": "377fe322ee8d822e0c04fa3613a9ca083aad9cf8", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8db7887dfbf502b7e60d64bfeebd0de592d2d45/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8db7887dfbf502b7e60d64bfeebd0de592d2d45/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=a8db7887dfbf502b7e60d64bfeebd0de592d2d45", "patch": "@@ -35,6 +35,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"timevar.h\"\n #include \"fold-const-call.h\"\n #include \"stor-layout.h\"\n+#include \"cgraph.h\"\n \n static bool verify_constant (tree, bool, bool *, bool *);\n #define VERIFY_CONSTANT(X)\t\t\t\t\t\t\\\n@@ -2340,6 +2341,13 @@ cxx_eval_call_expression (const constexpr_ctx *ctx, tree t,\n \t\t\t\t     type);\n \t      DECL_ARTIFICIAL (var) = 1;\n \t      TREE_STATIC (var) = 1;\n+\t      // Temporarily register the artificial var in varpool,\n+\t      // so that comparisons of its address against NULL are folded\n+\t      // through nonzero_address even with\n+\t      // -fno-delete-null-pointer-checks or that comparison of\n+\t      // addresses of different heap artificial vars is folded too.\n+\t      // See PR98988 and PR99031.\n+\t      varpool_node::finalize_decl (var);\n \t      ctx->global->heap_vars.safe_push (var);\n \t      ctx->global->values.put (var, NULL_TREE);\n \t      return fold_convert (ptr_type_node, build_address (var));\n@@ -7199,15 +7207,18 @@ cxx_eval_outermost_constant_expr (tree t, bool allow_non_constant,\n \t  non_constant_p = true;\n \t}\n       FOR_EACH_VEC_ELT (global_ctx.heap_vars, i, heap_var)\n-\tif (DECL_NAME (heap_var) != heap_deleted_identifier)\n-\t  {\n-\t    if (!allow_non_constant && !non_constant_p)\n-\t      error_at (DECL_SOURCE_LOCATION (heap_var),\n-\t\t\t\"%qE is not a constant expression because allocated \"\n-\t\t\t\"storage has not been deallocated\", t);\n-\t    r = t;\n-\t    non_constant_p = true;\n-\t  }\n+\t{\n+\t  if (DECL_NAME (heap_var) != heap_deleted_identifier)\n+\t    {\n+\t      if (!allow_non_constant && !non_constant_p)\n+\t\terror_at (DECL_SOURCE_LOCATION (heap_var),\n+\t\t\t  \"%qE is not a constant expression because allocated \"\n+\t\t\t  \"storage has not been deallocated\", t);\n+\t      r = t;\n+\t      non_constant_p = true;\n+\t    }\n+\t  varpool_node::get (heap_var)->remove ();\n+\t}\n     }\n \n   /* Check that immediate invocation does not return an expression referencing"}, {"sha": "d3e4905db46c895a7a316f58a5611e5142d113b9", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-new16.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8db7887dfbf502b7e60d64bfeebd0de592d2d45/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-new16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8db7887dfbf502b7e60d64bfeebd0de592d2d45/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-new16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-new16.C?ref=a8db7887dfbf502b7e60d64bfeebd0de592d2d45", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/98988\n+// { dg-do compile { target c++20 } }\n+// { dg-options \"-fno-delete-null-pointer-checks\" }\n+\n+constexpr bool\n+foo ()\n+{\n+  auto ptr = new int();\n+  delete ptr;\n+  return true;\n+}\n+\n+static_assert (foo ());"}, {"sha": "4f6e8193a52abea9c793f1fc216ab5412007c2b6", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-new17.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8db7887dfbf502b7e60d64bfeebd0de592d2d45/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-new17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8db7887dfbf502b7e60d64bfeebd0de592d2d45/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-new17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-new17.C?ref=a8db7887dfbf502b7e60d64bfeebd0de592d2d45", "patch": "@@ -0,0 +1,15 @@\n+// PR c++/99031\n+// { dg-do compile { target c++20 } }\n+\n+constexpr bool\n+foo ()\n+{\n+  auto a = new int;\n+  auto b = new int;\n+  bool r = a == b;\n+  delete b;\n+  delete a;\n+  return r;\n+}\n+\n+static_assert (!foo ());"}]}