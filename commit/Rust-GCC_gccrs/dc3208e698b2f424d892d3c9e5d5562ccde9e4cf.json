{"sha": "dc3208e698b2f424d892d3c9e5d5562ccde9e4cf", "node_id": "C_kwDOANBUbNoAKGRjMzIwOGU2OThiMmY0MjRkODkyZDNjOWU1ZDU1NjJjY2RlOWU0Y2Y", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2022-10-17T20:08:37Z"}, "committer": {"name": "Marc Poulhi\u00e8s", "email": "poulhies@adacore.com", "date": "2022-11-07T08:36:35Z"}, "message": "ada: Fix performance regression related to references in Refined_State\n\nRecently added call to In_Pragma_Expression caused a performance\nregression. It might require climbing syntax trees of arbitrarily deep\nexpressions, while previously references within pragmas were detected in\nbounded time.\n\nThis patch restores the previous efficiency. However, while the original\ncode only detected references directly within pragma argument\nassociations, now we also detect references inside aggregates, e.g.\nlike those in pragma Refined_State.\n\ngcc/ada/\n\n\t* sem_prag.adb (Non_Significant_Pragma_Reference): Detect\n\treferences with aggregates; only assign local variables Id and C\n\twhen necessary.", "tree": {"sha": "0eb9b46113774e074e28f4d0d29f64844926f8cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0eb9b46113774e074e28f4d0d29f64844926f8cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc3208e698b2f424d892d3c9e5d5562ccde9e4cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc3208e698b2f424d892d3c9e5d5562ccde9e4cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc3208e698b2f424d892d3c9e5d5562ccde9e4cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc3208e698b2f424d892d3c9e5d5562ccde9e4cf/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d24f279c023051c95b88b8405ac8aa4ebb44b107", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d24f279c023051c95b88b8405ac8aa4ebb44b107", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d24f279c023051c95b88b8405ac8aa4ebb44b107"}], "stats": {"total": 56, "additions": 29, "deletions": 27}, "files": [{"sha": "2a3aca85a796872b73672caca55db83dfe34bc73", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 29, "deletions": 27, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc3208e698b2f424d892d3c9e5d5562ccde9e4cf/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc3208e698b2f424d892d3c9e5d5562ccde9e4cf/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=dc3208e698b2f424d892d3c9e5d5562ccde9e4cf", "patch": "@@ -31719,43 +31719,45 @@ package body Sem_Prag is\n    --  Start of processing for Non_Significant_Pragma_Reference\n \n    begin\n-      P := Parent (N);\n-\n-      if Nkind (P) /= N_Pragma_Argument_Association then\n+      --  Reference might appear either directly as expression of a pragma\n+      --  argument association, e.g. pragma Export (...), or within an\n+      --  aggregate with component associations, e.g. pragma Refined_State\n+      --  ((... => ...)).\n \n-         --  References within pragma Refined_State are not significant. They\n-         --  can't be recognized using pragma argument number, because they\n-         --  appear inside refinement clauses that rely on aggregate syntax.\n+      P := Parent (N);\n+      loop\n+         case Nkind (P) is\n+            when N_Pragma_Argument_Association =>\n+               exit;\n+            when N_Aggregate | N_Component_Association =>\n+               P := Parent (P);\n+            when others =>\n+               return False;\n+         end case;\n+      end loop;\n \n-         if In_Pragma_Expression (N, Name_Refined_State) then\n-            return True;\n-         end if;\n+      AN := Arg_No;\n \n+      if AN = 0 then\n          return False;\n+      end if;\n \n-      else\n-         Id := Get_Pragma_Id (Parent (P));\n-         C := Sig_Flags (Id);\n-         AN := Arg_No;\n+      Id := Get_Pragma_Id (Parent (P));\n+      C := Sig_Flags (Id);\n \n-         if AN = 0 then\n+      case C is\n+         when -1 =>\n             return False;\n-         end if;\n-\n-         case C is\n-            when -1 =>\n-               return False;\n \n-            when 0 =>\n-               return True;\n+         when 0 =>\n+            return True;\n \n-            when 92 .. 99 =>\n-               return AN < (C - 90);\n+         when 92 .. 99 =>\n+            return AN < (C - 90);\n \n-            when others =>\n-               return AN /= C;\n-         end case;\n-      end if;\n+         when others =>\n+            return AN /= C;\n+      end case;\n    end Is_Non_Significant_Pragma_Reference;\n \n    ------------------------------"}]}