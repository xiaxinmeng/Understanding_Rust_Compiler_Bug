{"sha": "ecd11acacd6be57af930fa617d7c31ecb40e7f74", "node_id": "C_kwDOANBUbNoAKGVjZDExYWNhY2Q2YmU1N2FmOTMwZmE2MTdkN2MzMWVjYjQwZTdmNzQ", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-05-25T22:11:31Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-07-01T16:07:34Z"}, "message": "c++: fix broken copy elision with nested TARGET_EXPRs [PR105550]\n\nIn this problem, we are failing to properly perform copy elision with\na conditional operator, so this:\n\n  constexpr A a = true ? A{} : A{};\n\nfails with:\n\n  error: 'A{((const A*)(&<anonymous>))}' is not a constant expression\n\nThe whole initializer is\n\n  TARGET_EXPR <D.2395, 1 ? TARGET_EXPR <D.2393, {.p=(const struct A *) &<PLACEHOLDER_EXPR struct A>}> : TARGET_EXPR <D.2394, {.p=(const struct A *) &<PLACEHOLDER_EXPR struct A>}>>\n\nwhere the outermost TARGET_EXPR is elided, but not the nested ones.\nThen we end up replacing the PLACEHOLDER_EXPRs with the temporaries the\nTARGET_EXPRs represent, which is precisely what should *not* happen with\ncopy elision.\n\nI've tried the approach of tweaking ctx->object, but I ran into gazillion\nproblems with that.  I thought that I would let cxx_eval_constant_expression\n/TARGET_EXPR create a new object only when ctx->object was null, then\nadjust setting of ctx->object in places like cxx_bind_parameters_in_call\nand cxx_eval_component_reference but that failed completely.  Sometimes\nctx->object has to be reset, sometimes it cannot be reset, 'this' needed\nspecial handling, etc.  I gave up.\n\nInstead, this patch strips TARGET_EXPRs from the operands of ?: like\nwe do in various other places in constexpr.c.\n\n\tPR c++/105550\n\ngcc/cp/ChangeLog:\n\n\t* constexpr.cc (cxx_eval_conditional_expression): Strip TARGET_EXPRs.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp1y/nsdmi-aggr16.C: Remove FIXME.\n\t* g++.dg/cpp1y/nsdmi-aggr17.C: Remove FIXME.\n\t* g++.dg/cpp0x/constexpr-elision1.C: New test.\n\t* g++.dg/cpp1y/constexpr-elision1.C: New test.", "tree": {"sha": "78da6f3fa4cbeec13ab2abf2b93d7a8c98015863", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/78da6f3fa4cbeec13ab2abf2b93d7a8c98015863"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ecd11acacd6be57af930fa617d7c31ecb40e7f74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecd11acacd6be57af930fa617d7c31ecb40e7f74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ecd11acacd6be57af930fa617d7c31ecb40e7f74", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecd11acacd6be57af930fa617d7c31ecb40e7f74/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a668532fb19e7c57aa595a26ce3f0d95f9cbb1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a668532fb19e7c57aa595a26ce3f0d95f9cbb1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a668532fb19e7c57aa595a26ce3f0d95f9cbb1b"}], "stats": {"total": 86, "additions": 80, "deletions": 6}, "files": [{"sha": "5f7fc6f8f0c1b787ee23f6630f2e2bbfd5802753", "filename": "gcc/cp/constexpr.cc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecd11acacd6be57af930fa617d7c31ecb40e7f74/gcc%2Fcp%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecd11acacd6be57af930fa617d7c31ecb40e7f74/gcc%2Fcp%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.cc?ref=ecd11acacd6be57af930fa617d7c31ecb40e7f74", "patch": "@@ -3507,6 +3507,13 @@ cxx_eval_conditional_expression (const constexpr_ctx *ctx, tree t,\n     val = TREE_OPERAND (t, 1);\n   if (TREE_CODE (t) == IF_STMT && !val)\n     val = void_node;\n+  /* A TARGET_EXPR may be nested inside another TARGET_EXPR, but still\n+     serve as the initializer for the same object as the outer TARGET_EXPR,\n+     as in\n+       A a = true ? A{} : A{};\n+     so strip the inner TARGET_EXPR so we don't materialize a temporary.  */\n+  if (TREE_CODE (val) == TARGET_EXPR)\n+    val = TARGET_EXPR_INITIAL (val);\n   return cxx_eval_constant_expression (ctx, val, lval, non_constant_p,\n \t\t\t\t       overflow_p, jump_target);\n }"}, {"sha": "9e7b9ec3405b7718001034b6f8cdd9875ebc6e27", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-elision1.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecd11acacd6be57af930fa617d7c31ecb40e7f74/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-elision1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecd11acacd6be57af930fa617d7c31ecb40e7f74/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-elision1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-elision1.C?ref=ecd11acacd6be57af930fa617d7c31ecb40e7f74", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/105550\n+// { dg-do compile { target c++11 } }\n+\n+template <typename, typename> struct pair {\n+  constexpr pair(int, int) {}\n+};\n+template <typename _Tp, typename _Compare>\n+pair<const _Tp &, const _Tp &> minmax(const _Tp &__a, const _Tp &__b,\n+                                      _Compare) {\n+  return 0 ? pair<const _Tp &, const _Tp &>(__b, __a)\n+           : pair<const _Tp &, const _Tp &>(__a, __b);\n+}\n+typedef int value_type;\n+typedef int compare_type;\n+template pair<const value_type &, const value_type &>\n+minmax(const value_type &, const value_type &, compare_type);"}, {"sha": "b225ae29cdef287222b84d30697061986bb36cc1", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-elision1.C", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecd11acacd6be57af930fa617d7c31ecb40e7f74/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-elision1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecd11acacd6be57af930fa617d7c31ecb40e7f74/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-elision1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-elision1.C?ref=ecd11acacd6be57af930fa617d7c31ecb40e7f74", "patch": "@@ -0,0 +1,53 @@\n+// PR c++/105550\n+// { dg-do compile { target c++14 } }\n+\n+struct A {\n+  const A *p = this;\n+};\n+\n+struct B {\n+  const B *p = this;\n+  constexpr operator A() const { return {}; }\n+};\n+\n+constexpr A\n+bar (A)\n+{\n+  return {};\n+}\n+\n+constexpr A baz() { return {}; }\n+\n+struct E {\n+  A a1 = true ? A{} : A{};\n+  A a2 = true ? A{} : B{};\n+  A a3 = false ? A{} : B{};\n+  A a4 = false ? B{} : B{};\n+  A a5 = A{};\n+  A a6 = B{};\n+  A a7 = false ? B{} : (true ? A{} : A{});\n+  A a8 = false ? (true ? A{} : B{}) : (true ? A{} : A{});\n+  A a9 = (A{});\n+  A a10 = (true, A{});\n+  A a11 = bar (A{});\n+  A a12 = baz ();\n+  A a13 = (A{}, A{});\n+};\n+\n+constexpr E e{};\n+\n+constexpr A a1 = true ? A{} : A{};\n+constexpr A a2 = true ? A{} : B{};\n+constexpr A a3 = false ? A{} : B{};\n+constexpr A a4 = false ? B{} : B{};\n+constexpr A a5 = A{};\n+constexpr A a6 = B{};\n+constexpr A a7 = false ? B{} : (true ? A{} : A{});\n+constexpr A a8 = false ? (true ? A{} : B{}) : (true ? A{} : A{});\n+constexpr A a9 = (A{});\n+constexpr A a10 = (true, A{});\n+constexpr A a11 = bar (A{});\n+//static_assert(a10.p == &a10, \"\"); // bug, 105619\n+constexpr A a12 = baz ();\n+//static_assert(a11.p == &a11, \"\"); // bug, 105619\n+constexpr A a13 = (A{}, A{});"}, {"sha": "5e66bdd2370a9ffb4492427fcd669a414fd1abbf", "filename": "gcc/testsuite/g++.dg/cpp1y/nsdmi-aggr16.C", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecd11acacd6be57af930fa617d7c31ecb40e7f74/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fnsdmi-aggr16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecd11acacd6be57af930fa617d7c31ecb40e7f74/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fnsdmi-aggr16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fnsdmi-aggr16.C?ref=ecd11acacd6be57af930fa617d7c31ecb40e7f74", "patch": "@@ -40,9 +40,8 @@ struct E {\n   A d = true ? (false ? A{} : A{}) : (false ? A{} : A{});\n };\n \n-// FIXME: When fixing this, also fix nsdmi-aggr17.C.\n-constexpr E e;\t    // { dg-bogus \"\" \"PR105550\" { xfail *-*-* } }\n-SA (e.a.p == &e.a); // { dg-bogus \"\" \"PR105550\" { xfail *-*-* } }\n+constexpr E e;\n+SA (e.a.p == &e.a);\n \n E e1 = { };\n "}, {"sha": "ca9637b37eb4b6d857ff0a72545a17c4d91c84e0", "filename": "gcc/testsuite/g++.dg/cpp1y/nsdmi-aggr17.C", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecd11acacd6be57af930fa617d7c31ecb40e7f74/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fnsdmi-aggr17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecd11acacd6be57af930fa617d7c31ecb40e7f74/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fnsdmi-aggr17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fnsdmi-aggr17.C?ref=ecd11acacd6be57af930fa617d7c31ecb40e7f74", "patch": "@@ -56,9 +56,8 @@ struct F {\n   A a = true ? A{x} : A{x};\n };\n \n-// FIXME: Doesn't work due to PR105550.\n-//constexpr F f;\n-//SA (f.a.p == &f.a);\n+constexpr F f;\n+SA (f.a.p == &f.a);\n SA (e.x == 42);\n F f2 = { };\n F f3 = { 42 };"}]}