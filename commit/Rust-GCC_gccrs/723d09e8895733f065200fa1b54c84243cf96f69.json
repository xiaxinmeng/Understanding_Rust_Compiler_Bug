{"sha": "723d09e8895733f065200fa1b54c84243cf96f69", "node_id": "C_kwDOANBUbNoAKDcyM2QwOWU4ODk1NzMzZjA2NTIwMGZhMWI1NGM4NDI0M2NmOTZmNjk", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-10-14T13:44:48Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-10-20T10:17:05Z"}, "message": "[Ada] Fix problematic conversion of real literal in static context\n\ngcc/ada/\n\n\t* sem_eval.adb (Eval_Type_Conversion): If the target subtype is\n\ta static floating-point subtype and the result is a real literal,\n\tconsider its machine-rounded value to raise Constraint_Error.\n\t(Test_In_Range): Turn local variables into constants.", "tree": {"sha": "518185b118d6a67786c1a7b369ae3653b5647e54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/518185b118d6a67786c1a7b369ae3653b5647e54"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/723d09e8895733f065200fa1b54c84243cf96f69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/723d09e8895733f065200fa1b54c84243cf96f69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/723d09e8895733f065200fa1b54c84243cf96f69", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/723d09e8895733f065200fa1b54c84243cf96f69/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6f8b3f95e55084b59ecc8fbe0f0cfd485d58c39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6f8b3f95e55084b59ecc8fbe0f0cfd485d58c39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6f8b3f95e55084b59ecc8fbe0f0cfd485d58c39"}], "stats": {"total": 35, "additions": 23, "deletions": 12}, "files": [{"sha": "7270172dce96316e0bbbc88c98ea0e361503ebef", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 23, "deletions": 12, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/723d09e8895733f065200fa1b54c84243cf96f69/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/723d09e8895733f065200fa1b54c84243cf96f69/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=723d09e8895733f065200fa1b54c84243cf96f69", "patch": "@@ -4352,7 +4352,25 @@ package body Sem_Eval is\n          Fold_Uint (N, Expr_Value (Operand), Stat);\n       end if;\n \n-      if Is_Out_Of_Range (N, Etype (N), Assume_Valid => True) then\n+      --  If the target is a static floating-point subtype, then its bounds\n+      --  are machine numbers so we must consider the machine-rounded value.\n+\n+      if Is_Floating_Point_Type (Target_Type)\n+        and then Nkind (N) = N_Real_Literal\n+        and then not Is_Machine_Number (N)\n+      then\n+         declare\n+            Lo   : constant Node_Id := Type_Low_Bound (Target_Type);\n+            Hi   : constant Node_Id := Type_High_Bound (Target_Type);\n+            Valr : constant Ureal   :=\n+                     Machine_Number (Target_Type, Expr_Value_R (N), N);\n+         begin\n+            if Valr < Expr_Value_R (Lo) or else Valr > Expr_Value_R (Hi) then\n+               Out_Of_Range (N);\n+            end if;\n+         end;\n+\n+      elsif Is_Out_Of_Range (N, Etype (N), Assume_Valid => True) then\n          Out_Of_Range (N);\n       end if;\n    end Eval_Type_Conversion;\n@@ -7342,19 +7360,12 @@ package body Sem_Eval is\n \n       elsif Compile_Time_Known_Value (N) then\n          declare\n-            Lo       : Node_Id;\n-            Hi       : Node_Id;\n-\n-            LB_Known : Boolean;\n-            HB_Known : Boolean;\n+            Lo       : constant Node_Id := Type_Low_Bound (Typ);\n+            Hi       : constant Node_Id := Type_High_Bound (Typ);\n+            LB_Known : constant Boolean := Compile_Time_Known_Value (Lo);\n+            HB_Known : constant Boolean := Compile_Time_Known_Value (Hi);\n \n          begin\n-            Lo := Type_Low_Bound  (Typ);\n-            Hi := Type_High_Bound (Typ);\n-\n-            LB_Known := Compile_Time_Known_Value (Lo);\n-            HB_Known := Compile_Time_Known_Value (Hi);\n-\n             --  Fixed point types should be considered as such only if flag\n             --  Fixed_Int is set to False.\n "}]}