{"sha": "a0c623f58198d3c8f767a181574537720386b468", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTBjNjIzZjU4MTk4ZDNjOGY3NjdhMTgxNTc0NTM3NzIwMzg2YjQ2OA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-05-25T07:44:50Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-05-25T10:41:36Z"}, "message": "tree-optimization/95308 - really avoid forward propagating of &TMR\n\nThis fixes a hole that still allowed forwarding of TARGET_MEM_REF\naddresses.\n\n2020-05-25  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/95308\n\t* tree-ssa-forwprop.c (pass_forwprop::execute): Generalize\n\ttest for TARGET_MEM_REFs.\n\n\t* g++.dg/torture/pr95308.C: New testcase.", "tree": {"sha": "df8d9dac1ba5d74492ac76537322efaa7839e513", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df8d9dac1ba5d74492ac76537322efaa7839e513"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a0c623f58198d3c8f767a181574537720386b468", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0c623f58198d3c8f767a181574537720386b468", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0c623f58198d3c8f767a181574537720386b468", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0c623f58198d3c8f767a181574537720386b468/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f73f8bab9f2474f175cc5ca5ba8ebb32808a4cae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f73f8bab9f2474f175cc5ca5ba8ebb32808a4cae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f73f8bab9f2474f175cc5ca5ba8ebb32808a4cae"}], "stats": {"total": 35, "additions": 28, "deletions": 7}, "files": [{"sha": "01aa8ad17a65940ff16361bb9e866ff8fea7ddcc", "filename": "gcc/testsuite/g++.dg/torture/pr95308.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0c623f58198d3c8f767a181574537720386b468/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr95308.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0c623f58198d3c8f767a181574537720386b468/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr95308.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr95308.C?ref=a0c623f58198d3c8f767a181574537720386b468", "patch": "@@ -0,0 +1,21 @@\n+// { dg-do compile }\n+// { dg-additional-options \"-march=skylake-avx512\" { target x86_64-*-* i?86-*-* } }\n+\n+extern int a[][18];\n+extern short b[], c[];\n+extern char d[][18];\n+int e;\n+void i(char f, long g[][100][100][100])\n+{\n+  for (int h = 0;; h += 2)\n+    for (char j = 0; j < 17; j++) {\n+\tif (e ? f : 0) {\n+\t    a[h][j] = 5;\n+\t    for (int k = 0; k < 12; k += 4)\n+\t      for (short l = 0; l < 015; l += 2)\n+\t\tb[k * 3 + l] = bool(g[2][j][k][l]);\n+\t} else\n+\t  d[h][j] = 0;\n+\tc[j] = 3;\n+    }\n+}"}, {"sha": "759baf568978b3201ef1f744fa4d446d3daf12fb", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0c623f58198d3c8f767a181574537720386b468/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0c623f58198d3c8f767a181574537720386b468/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=a0c623f58198d3c8f767a181574537720386b468", "patch": "@@ -2763,18 +2763,18 @@ pass_forwprop::execute (function *fun)\n \n \t  /* If this statement sets an SSA_NAME to an address,\n \t     try to propagate the address into the uses of the SSA_NAME.  */\n-\t  if (code == ADDR_EXPR\n-\t      /* Handle pointer conversions on invariant addresses\n-\t\t as well, as this is valid gimple.  */\n-\t      || (CONVERT_EXPR_CODE_P (code)\n-\t\t  && TREE_CODE (rhs) == ADDR_EXPR\n-\t\t  && POINTER_TYPE_P (TREE_TYPE (lhs))))\n+\t  if ((code == ADDR_EXPR\n+\t       /* Handle pointer conversions on invariant addresses\n+\t\t  as well, as this is valid gimple.  */\n+\t       || (CONVERT_EXPR_CODE_P (code)\n+\t\t   && TREE_CODE (rhs) == ADDR_EXPR\n+\t\t   && POINTER_TYPE_P (TREE_TYPE (lhs))))\n+\t      && TREE_CODE (TREE_OPERAND (rhs, 0)) != TARGET_MEM_REF)\n \t    {\n \t      tree base = get_base_address (TREE_OPERAND (rhs, 0));\n \t      if ((!base\n \t\t   || !DECL_P (base)\n \t\t   || decl_address_invariant_p (base))\n-\t\t  && TREE_CODE (base) != TARGET_MEM_REF\n \t\t  && !stmt_references_abnormal_ssa_name (stmt)\n \t\t  && forward_propagate_addr_expr (lhs, rhs, true))\n \t\t{"}]}