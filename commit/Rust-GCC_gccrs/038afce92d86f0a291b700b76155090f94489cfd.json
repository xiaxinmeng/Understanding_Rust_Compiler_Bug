{"sha": "038afce92d86f0a291b700b76155090f94489cfd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDM4YWZjZTkyZDg2ZjBhMjkxYjcwMGI3NjE1NTA5MGY5NDQ4OWNmZA==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2020-03-02T09:14:10Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-09-16T05:09:30Z"}, "message": "AVX512FP16: Add testcase for vcvtph2w/vcvtph2uw/vcvtph2dq/vcvtph2udq/vcvtph2qq/vcvtph2uqq.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/avx512fp16-helper.h (V512): Add QI\n\tcomponents.\n\t* gcc.target/i386/avx512fp16-vcvtph2dq-1a.c: New test.\n\t* gcc.target/i386/avx512fp16-vcvtph2dq-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vcvtph2qq-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vcvtph2qq-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vcvtph2udq-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vcvtph2udq-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vcvtph2uqq-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vcvtph2uqq-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vcvtph2uw-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vcvtph2uw-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vcvtph2w-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vcvtph2w-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-vcvtph2dq-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-vcvtph2dq-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-vcvtph2qq-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-vcvtph2qq-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-vcvtph2udq-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-vcvtph2udq-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-vcvtph2uqq-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-vcvtph2uqq-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-vcvtph2uw-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-vcvtph2uw-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-vcvtph2w-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-vcvtph2w-1b.c: Ditto.", "tree": {"sha": "8cf5277d6a532b45ed336dbff975b256b4500473", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8cf5277d6a532b45ed336dbff975b256b4500473"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/038afce92d86f0a291b700b76155090f94489cfd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/038afce92d86f0a291b700b76155090f94489cfd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/038afce92d86f0a291b700b76155090f94489cfd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/038afce92d86f0a291b700b76155090f94489cfd/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd610db0d52cd1e4d972ff140c091d42ef486be4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd610db0d52cd1e4d972ff140c091d42ef486be4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd610db0d52cd1e4d972ff140c091d42ef486be4"}], "stats": {"total": 906, "additions": 903, "deletions": 3}, "files": [{"sha": "aa83b66998ccbe04b7195f76a7d72ddacd5b40db", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-helper.h", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/038afce92d86f0a291b700b76155090f94489cfd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-helper.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/038afce92d86f0a291b700b76155090f94489cfd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-helper.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-helper.h?ref=038afce92d86f0a291b700b76155090f94489cfd", "patch": "@@ -25,13 +25,17 @@ typedef union\n {\n   __m512          zmm;\n   __m512h         zmmh;\n+  __m512i         zmmi;\n   __m256          ymm[2];\n   __m256h         ymmh[2];\n   __m256i         ymmi[2];\n   __m128h         xmmh[4];\n   __m128\t  xmm[4];\n+  __m128i\t  xmmi[4];\n   unsigned short  u16[32];\n   unsigned int    u32[16];\n+  long long\t  s64[8];\n+  unsigned long long u64[8];\n   float           f32[16];\n   _Float16        f16[32];\n } V512;\n@@ -162,9 +166,9 @@ init_src()\n     int i;\n \n     for (i = 0; i < AVX512F_MAX_ELEM; i++) {\n-        v1.f32[i] = -i + 1;\n+        v1.f32[i] = i + 1;\n         v2.f32[i] = i * 0.5f;\n-        v3.f32[i] = i * 2.5f;\n+        v3.f32[i] = i * 1.5f;\n         v4.f32[i] = i - 0.5f;\n \n         src3.u32[i] = (i + 1) * 10;\n@@ -217,30 +221,45 @@ init_dest(V512 * res, V512 * exp)\n #if AVX512F_LEN == 256\n #undef HF\n #undef SF\n+#undef SI\n+#undef H_HF\n #undef NET_MASK \n-#undef MASK_VALUE \n+#undef MASK_VALUE\n+#undef HALF_MASK\n #undef ZMASK_VALUE \n #define NET_MASK 0xffff\n #define MASK_VALUE 0xcccc\n #define ZMASK_VALUE 0xfcc1\n+#define HALF_MASK 0xcc\n #define HF(x) x.ymmh[0]\n+#define H_HF(x) x.xmmh[0]\n #define SF(x) x.ymm[0]\n+#define SI(x) x.ymmi[0]\n #elif AVX512F_LEN == 128\n #undef HF\n #undef SF\n+#undef SI\n+#undef H_HF\n #undef NET_MASK \n #undef MASK_VALUE \n #undef ZMASK_VALUE \n+#undef HALF_MASK\n #define NET_MASK 0xff\n #define MASK_VALUE 0xcc\n+#define HALF_MASK MASK_VALUE\n #define ZMASK_VALUE 0xc1\n #define HF(x) x.xmmh[0]\n #define SF(x) x.xmm[0]\n+#define SI(x) x.xmmi[0]\n+#define H_HF(x) x.xmmh[0]\n #else\n #define NET_MASK 0xffffffff\n #define MASK_VALUE 0xcccccccc\n #define ZMASK_VALUE 0xfcc1fcc1\n+#define HALF_MASK 0xcccc\n #define HF(x) x.zmmh\n #define SF(x) x.zmm\n+#define SI(x) x.zmmi\n+#define H_HF(x) x.ymmh[0]\n #endif\n "}, {"sha": "31a56393f0e970a76660270f1876abf1e431da8e", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcvtph2dq-1a.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/038afce92d86f0a291b700b76155090f94489cfd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtph2dq-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/038afce92d86f0a291b700b76155090f94489cfd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtph2dq-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtph2dq-1a.c?ref=038afce92d86f0a291b700b76155090f94489cfd", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvtph2dq\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2dq\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\{\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2dq\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2dq\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2dq\\[ \\\\t\\]+\\{rz-sae\\}\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i res, res1, res2;\n+volatile __m256h x1, x2, x3;\n+volatile __mmask16 m16;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res = _mm512_cvtph_epi32 (x1);\n+  res1 = _mm512_mask_cvtph_epi32 (res, m16, x2);\n+  res2 = _mm512_maskz_cvtph_epi32 (m16, x3);\n+  res = _mm512_cvt_roundph_epi32 (x1, 4);\n+  res1 = _mm512_mask_cvt_roundph_epi32 (res, m16, x2, 8);\n+  res2 = _mm512_maskz_cvt_roundph_epi32 (m16, x3, 11);\n+}"}, {"sha": "80a8582827105ea4473c86889c7942abc1be17b8", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcvtph2dq-1b.c", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/038afce92d86f0a291b700b76155090f94489cfd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtph2dq-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/038afce92d86f0a291b700b76155090f94489cfd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtph2dq-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtph2dq-1b.c?ref=038afce92d86f0a291b700b76155090f94489cfd", "patch": "@@ -0,0 +1,79 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512dq\" } */\n+\n+\n+#define AVX512FP16\n+#include \"avx512fp16-helper.h\"\n+\n+#define N_ELEMS (AVX512F_LEN / 16)\n+\n+void NOINLINE\n+EMULATE(cvtph2_d) (V512 * dest, V512 op1,\n+\t\t __mmask32 k, int zero_mask)\n+{\n+  V512 v1, v2, v3, v4, v5, v6, v7, v8;\n+  int i;\n+  __mmask16 m1, m2;\n+\n+  m1 = k & 0xffff;\n+\n+  unpack_ph_2twops(op1, &v1, &v2);\n+\n+  for (i = 0; i < 16; i++) {\n+    if (((1 << i) & m1) == 0) {\n+      if (zero_mask) {\n+\tv5.u32[i] = 0;\n+      }\n+      else {\n+\tv5.u32[i] = dest->u32[i];\n+      }\n+    }\n+    else {\n+      v5.u32[i] = v1.f32[i];\n+\n+    }\n+  }\n+  *dest = v5;\n+}\n+\n+void\n+TEST (void)\n+{\n+  V512 res;\n+  V512 exp;\n+\n+  init_src();\n+\n+  EMULATE(cvtph2_d)(&exp, src1,  NET_MASK, 0);\n+  SI(res) = INTRINSIC (_cvtph_epi32) (H_HF(src1));\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _cvtph_epi32);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(cvtph2_d)(&exp, src1, HALF_MASK, 0);\n+  SI(res) = INTRINSIC (_mask_cvtph_epi32) (SI(res), HALF_MASK, H_HF(src1));\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mask_cvtph_epi32);\n+\n+  EMULATE(cvtph2_d)(&exp, src1,  HALF_MASK, 1);\n+  SI(res) = INTRINSIC (_maskz_cvtph_epi32) (HALF_MASK, H_HF(src1));\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _maskz_cvtph_epi32);\n+\n+#if AVX512F_LEN == 512\n+  EMULATE(cvtph2_d)(&exp, src1,  NET_MASK, 0);\n+  SI(res) = INTRINSIC (_cvt_roundph_epi32) (H_HF(src1), _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _cvt_roundph_epi32);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(cvtph2_d)(&exp, src1, HALF_MASK, 0);\n+  SI(res) = INTRINSIC (_mask_cvt_roundph_epi32) (SI(res), HALF_MASK, H_HF(src1), _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mask_cvt_roundph_epi32);\n+\n+  EMULATE(cvtph2_d)(&exp, src1,  HALF_MASK, 1);\n+  SI(res) = INTRINSIC (_maskz_cvt_roundph_epi32) (HALF_MASK, H_HF(src1), _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _maskz_cvt_roundph_epi32);\n+#endif\n+\n+  if (n_errs != 0)\n+    abort ();\n+}\n+\n+"}, {"sha": "d80ee611f3c7b94bc0895141a98bb774a7c7a4e5", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcvtph2qq-1a.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/038afce92d86f0a291b700b76155090f94489cfd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtph2qq-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/038afce92d86f0a291b700b76155090f94489cfd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtph2qq-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtph2qq-1a.c?ref=038afce92d86f0a291b700b76155090f94489cfd", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvtph2qq\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2qq\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\{\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2qq\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2qq\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2qq\\[ \\\\t\\]+\\{rz-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i res, res1, res2;\n+volatile __m128h x1, x2, x3;\n+volatile __mmask8 m8;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res = _mm512_cvtph_epi64 (x1);\n+  res1 = _mm512_mask_cvtph_epi64 (res, m8, x2);\n+  res2 = _mm512_maskz_cvtph_epi64 (m8, x3);\n+  res = _mm512_cvt_roundph_epi64 (x1, 4);\n+  res1 = _mm512_mask_cvt_roundph_epi64 (res, m8, x2, 8);\n+  res2 = _mm512_maskz_cvt_roundph_epi64 (m8, x3, 11);\n+}"}, {"sha": "42b21cf2e4dbb3778e92320c18b5bd4353cdbf2d", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcvtph2qq-1b.c", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/038afce92d86f0a291b700b76155090f94489cfd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtph2qq-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/038afce92d86f0a291b700b76155090f94489cfd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtph2qq-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtph2qq-1b.c?ref=038afce92d86f0a291b700b76155090f94489cfd", "patch": "@@ -0,0 +1,78 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512dq\" } */\n+\n+\n+#define AVX512FP16\n+#include \"avx512fp16-helper.h\"\n+\n+#define N_ELEMS (AVX512F_LEN / 16)\n+\n+void NOINLINE\n+EMULATE(cvtph2_q) (V512 * dest, V512 op1,\n+\t\t __mmask32 k, int zero_mask)\n+{\n+  V512 v1, v2, v3, v4, v5, v6, v7, v8;\n+  int i;\n+  __mmask16 m1, m2;\n+\n+  m1 = k & 0xffff;\n+\n+  unpack_ph_2twops(op1, &v1, &v2);\n+\n+  for (i = 0; i < 8; i++) {\n+    if (((1 << i) & m1) == 0) {\n+      if (zero_mask) {\n+\tv5.u64[i] = 0;\n+      }\n+      else {\n+\tv5.u64[i] = dest->u64[i];\n+      }\n+    }\n+    else {\n+      v5.u64[i] = v1.f32[i];\n+    }\n+  }\n+  *dest = v5;\n+}\n+\n+void\n+TEST (void)\n+{\n+  V512 res;\n+  V512 exp;\n+\n+  init_src();\n+\n+  EMULATE(cvtph2_q)(&exp, src1,  NET_MASK, 0);\n+  SI(res) = INTRINSIC (_cvtph_epi64) (src1.xmmh[0]);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _cvtph_epi64);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(cvtph2_q)(&exp, src1, 0xcc, 0);\n+  SI(res) = INTRINSIC (_mask_cvtph_epi64) (SI(res), 0xcc, src1.xmmh[0]);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mask_cvtph_epi64);\n+\n+  EMULATE(cvtph2_q)(&exp, src1,  0xfa, 1);\n+  SI(res) = INTRINSIC (_maskz_cvtph_epi64) (0xfa, src1.xmmh[0]);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _maskz_cvtph_epi64);\n+\n+#if AVX512F_LEN == 512\n+  EMULATE(cvtph2_q)(&exp, src1,  NET_MASK, 0);\n+  SI(res) = INTRINSIC (_cvt_roundph_epi64) (src1.xmmh[0], _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _cvt_roundph_epi64);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(cvtph2_q)(&exp, src1, 0xcc, 0);\n+  SI(res) = INTRINSIC (_mask_cvt_roundph_epi64) (SI(res), 0xcc, src1.xmmh[0], _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mask_cvt_roundph_epi64);\n+\n+  EMULATE(cvtph2_q)(&exp, src1,  0xfa, 1);\n+  SI(res) = INTRINSIC (_maskz_cvt_roundph_epi64) (0xfa, src1.xmmh[0], _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _maskz_cvt_roundph_epi64);\n+#endif\n+\n+  if (n_errs != 0) {\n+      abort ();\n+  }\n+}\n+"}, {"sha": "b4a833afdab5f5391add5a04e8d03d9abb1750f0", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcvtph2udq-1a.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/038afce92d86f0a291b700b76155090f94489cfd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtph2udq-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/038afce92d86f0a291b700b76155090f94489cfd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtph2udq-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtph2udq-1a.c?ref=038afce92d86f0a291b700b76155090f94489cfd", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvtph2udq\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2udq\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\{\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2udq\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2udq\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2udq\\[ \\\\t\\]+\\{rz-sae\\}\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i res, res1, res2;\n+volatile __m256h x1, x2, x3;\n+volatile __mmask16 m16;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res = _mm512_cvtph_epu32 (x1);\n+  res1 = _mm512_mask_cvtph_epu32 (res, m16, x2);\n+  res2 = _mm512_maskz_cvtph_epu32 (m16, x3);\n+  res = _mm512_cvt_roundph_epu32 (x1, 4);\n+  res1 = _mm512_mask_cvt_roundph_epu32 (res, m16, x2, 8);\n+  res2 = _mm512_maskz_cvt_roundph_epu32 (m16, x3, 11);\n+}"}, {"sha": "15fa0ba2b4f613f4c3322e9c699e38b1b151fe0c", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcvtph2udq-1b.c", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/038afce92d86f0a291b700b76155090f94489cfd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtph2udq-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/038afce92d86f0a291b700b76155090f94489cfd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtph2udq-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtph2udq-1b.c?ref=038afce92d86f0a291b700b76155090f94489cfd", "patch": "@@ -0,0 +1,79 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512dq\" } */\n+\n+\n+#define AVX512FP16\n+#include \"avx512fp16-helper.h\"\n+\n+#define N_ELEMS (AVX512F_LEN / 16)\n+\n+void NOINLINE\n+EMULATE(cvtph2_d) (V512 * dest, V512 op1,\n+\t\t __mmask32 k, int zero_mask)\n+{\n+  V512 v1, v2, v3, v4, v5, v6, v7, v8;\n+  int i;\n+  __mmask16 m1, m2;\n+\n+  m1 = k & 0xffff;\n+\n+  unpack_ph_2twops(op1, &v1, &v2);\n+\n+  for (i = 0; i < 16; i++) {\n+    if (((1 << i) & m1) == 0) {\n+      if (zero_mask) {\n+\tv5.u32[i] = 0;\n+      }\n+      else {\n+\tv5.u32[i] = dest->u32[i];\n+      }\n+    }\n+    else {\n+      v5.u32[i] = v1.f32[i];\n+\n+    }\n+  }\n+  *dest = v5;\n+}\n+\n+void\n+TEST (void)\n+{\n+  V512 res;\n+  V512 exp;\n+\n+  init_src();\n+\n+  EMULATE(cvtph2_d)(&exp, src1,  NET_MASK, 0);\n+  SI(res) = INTRINSIC (_cvtph_epu32) (H_HF(src1));\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _cvtph_epu32);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(cvtph2_d)(&exp, src1, HALF_MASK, 0);\n+  SI(res) = INTRINSIC (_mask_cvtph_epu32) (SI(res), HALF_MASK, H_HF(src1));\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mask_cvtph_epu32);\n+\n+  EMULATE(cvtph2_d)(&exp, src1,  HALF_MASK, 1);\n+  SI(res) = INTRINSIC (_maskz_cvtph_epu32) (HALF_MASK, H_HF(src1));\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _maskz_cvtph_epu32);\n+\n+#if AVX512F_LEN == 512\n+  EMULATE(cvtph2_d)(&exp, src1,  NET_MASK, 0);\n+  SI(res) = INTRINSIC (_cvt_roundph_epu32) (H_HF(src1), _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _cvt_roundph_epu32);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(cvtph2_d)(&exp, src1, HALF_MASK, 0);\n+  SI(res) = INTRINSIC (_mask_cvt_roundph_epu32) (SI(res), HALF_MASK, H_HF(src1), _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mask_cvt_roundph_epu32);\n+\n+  EMULATE(cvtph2_d)(&exp, src1,  HALF_MASK, 1);\n+  SI(res) = INTRINSIC (_maskz_cvt_roundph_epu32) (HALF_MASK, H_HF(src1), _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _maskz_cvt_roundph_epu32);\n+#endif\n+\n+  if (n_errs != 0) {\n+      abort ();\n+  }\n+}\n+"}, {"sha": "b4087798be975265ca6b344a27fd69573d7a7818", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcvtph2uqq-1a.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/038afce92d86f0a291b700b76155090f94489cfd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtph2uqq-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/038afce92d86f0a291b700b76155090f94489cfd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtph2uqq-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtph2uqq-1a.c?ref=038afce92d86f0a291b700b76155090f94489cfd", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvtph2uqq\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2uqq\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\{\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2uqq\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2uqq\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2uqq\\[ \\\\t\\]+\\{rz-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i res, res1, res2;\n+volatile __m128h x1, x2, x3;\n+volatile __mmask8 m8;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res = _mm512_cvtph_epu64 (x1);\n+  res1 = _mm512_mask_cvtph_epu64 (res, m8, x2);\n+  res2 = _mm512_maskz_cvtph_epu64 (m8, x3);\n+  res = _mm512_cvt_roundph_epu64 (x1, 4);\n+  res1 = _mm512_mask_cvt_roundph_epu64 (res, m8, x2, 8);\n+  res2 = _mm512_maskz_cvt_roundph_epu64 (m8, x3, 11);\n+}"}, {"sha": "7f34772aca69abb1c2c439f73c08888d91a27c76", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcvtph2uqq-1b.c", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/038afce92d86f0a291b700b76155090f94489cfd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtph2uqq-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/038afce92d86f0a291b700b76155090f94489cfd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtph2uqq-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtph2uqq-1b.c?ref=038afce92d86f0a291b700b76155090f94489cfd", "patch": "@@ -0,0 +1,78 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512dq\" } */\n+\n+\n+#define AVX512FP16\n+#include \"avx512fp16-helper.h\"\n+\n+#define N_ELEMS (AVX512F_LEN / 16)\n+\n+void NOINLINE\n+EMULATE(cvtph2_q) (V512 * dest, V512 op1,\n+\t\t __mmask32 k, int zero_mask)\n+{\n+  V512 v1, v2, v3, v4, v5, v6, v7, v8;\n+  int i;\n+  __mmask16 m1, m2;\n+\n+  m1 = k & 0xffff;\n+\n+  unpack_ph_2twops(op1, &v1, &v2);\n+\n+  for (i = 0; i < 8; i++) {\n+    if (((1 << i) & m1) == 0) {\n+      if (zero_mask) {\n+\tv5.u64[i] = 0;\n+      }\n+      else {\n+\tv5.u64[i] = dest->u64[i];\n+      }\n+    }\n+    else {\n+      v5.u64[i] = v1.f32[i];\n+    }\n+  }\n+  *dest = v5;\n+}\n+\n+void\n+TEST (void)\n+{\n+  V512 res;\n+  V512 exp;\n+\n+  init_src();\n+\n+  EMULATE(cvtph2_q)(&exp, src1,  NET_MASK, 0);\n+  SI(res) = INTRINSIC (_cvtph_epu64) (src1.xmmh[0]);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _cvtph_epu64);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(cvtph2_q)(&exp, src1, 0xcc, 0);\n+  SI(res) = INTRINSIC (_mask_cvtph_epu64) (SI(res), 0xcc, src1.xmmh[0]);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mask_cvtph_epu64);\n+\n+  EMULATE(cvtph2_q)(&exp, src1,  0xfc, 1);\n+  SI(res) = INTRINSIC (_maskz_cvtph_epu64) (0xfc, src1.xmmh[0]);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _maskz_cvtph_epu64);\n+\n+#if AVX512F_LEN == 512\n+  EMULATE(cvtph2_q)(&exp, src1,  NET_MASK, 0);\n+  SI(res) = INTRINSIC (_cvt_roundph_epu64) (src1.xmmh[0], _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _cvt_roundph_epu64);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(cvtph2_q)(&exp, src1, 0xcc, 0);\n+  SI(res) = INTRINSIC (_mask_cvt_roundph_epu64) (SI(res), 0xcc, src1.xmmh[0], _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mask_cvt_roundph_epu64);\n+\n+  EMULATE(cvtph2_q)(&exp, src1,  0xfc, 1);\n+  SI(res) = INTRINSIC (_maskz_cvt_roundph_epu64) (0xfc, src1.xmmh[0], _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _maskz_cvt_roundph_epu64);\n+#endif\n+\n+  if (n_errs != 0) {\n+      abort ();\n+  }\n+}\n+"}, {"sha": "262274526b161942174cc669b8ea43af1bdf446b", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcvtph2uw-1a.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/038afce92d86f0a291b700b76155090f94489cfd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtph2uw-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/038afce92d86f0a291b700b76155090f94489cfd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtph2uw-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtph2uw-1a.c?ref=038afce92d86f0a291b700b76155090f94489cfd", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvtph2uw\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2uw\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\{\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2uw\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2uw\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2uw\\[ \\\\t\\]+\\{rz-sae\\}\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i res, res1, res2;\n+volatile __m512h x1, x2, x3;\n+volatile __mmask32 m32;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res = _mm512_cvtph_epu16 (x1);\n+  res1 = _mm512_mask_cvtph_epu16 (res, m32, x2);\n+  res2 = _mm512_maskz_cvtph_epu16 (m32, x3);\n+  res = _mm512_cvt_roundph_epu16 (x1, 4);\n+  res1 = _mm512_mask_cvt_roundph_epu16 (res, m32, x2, 8);\n+  res2 = _mm512_maskz_cvt_roundph_epu16 (m32, x3, 11);\n+}"}, {"sha": "437a1f0eeae98bfe48b0571b49e3800ecc225cef", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcvtph2uw-1b.c", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/038afce92d86f0a291b700b76155090f94489cfd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtph2uw-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/038afce92d86f0a291b700b76155090f94489cfd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtph2uw-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtph2uw-1b.c?ref=038afce92d86f0a291b700b76155090f94489cfd", "patch": "@@ -0,0 +1,84 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512dq\" } */\n+\n+\n+#define AVX512FP16\n+#include \"avx512fp16-helper.h\"\n+\n+#define N_ELEMS (AVX512F_LEN / 16)\n+\n+void NOINLINE\n+EMULATE(cvtph2_w) (V512 * dest, V512 op1,\n+\t\t __mmask32 k, int zero_mask)\n+{\n+  V512 v1, v2, v3, v4, v5, v6, v7, v8;\n+  int i;\n+  __mmask16 m1, m2;\n+\n+  m1 = k & 0xffff;\n+  m2 = (k >> 16) & 0xffff;\n+\n+  unpack_ph_2twops(op1, &v1, &v2);\n+\n+  for (i = 0; i < 16; i++) {\n+    if (((1 << i) & m1) == 0) {\n+      if (zero_mask) {\n+\tdest->u16[i] = 0;\n+      }\n+    }\n+    else {\n+      dest->u16[i] = v1.f32[i];\n+\n+    }\n+\n+    if (((1 << i) & m2) == 0) {\n+      if (zero_mask) {\n+\tdest->u16[i+16] = 0;\n+      }\n+    }\n+    else {\n+      dest->u16[i+16] = v2.f32[i];\n+    }\n+  }\n+}\n+\n+void\n+TEST (void)\n+{\n+  V512 res;\n+  V512 exp;\n+\n+  init_src();\n+\n+  EMULATE(cvtph2_w)(&exp, src1,  NET_MASK, 0);\n+  SI(res) = INTRINSIC (_cvtph_epu16) (HF(src1));\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _cvtph_epu16);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(cvtph2_w)(&exp, src1, MASK_VALUE, 0);\n+  SI(res) = INTRINSIC (_mask_cvtph_epu16) (SI(res), MASK_VALUE, HF(src1));\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mask_cvtph_epu16);\n+\n+  EMULATE(cvtph2_w)(&exp, src1, ZMASK_VALUE, 1);\n+  SI(res) = INTRINSIC (_maskz_cvtph_epu16) (ZMASK_VALUE, HF(src1));\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _maskz_cvtph_epu16);\n+\n+#if AVX512F_LEN == 512\n+  EMULATE(cvtph2_w)(&exp, src1,  NET_MASK, 0);\n+  SI(res) = INTRINSIC (_cvt_roundph_epu16) (HF(src1), _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _cvt_roundph_epu16);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(cvtph2_w)(&exp, src1, MASK_VALUE, 0);\n+  SI(res) = INTRINSIC (_mask_cvt_roundph_epu16) (SI(res), MASK_VALUE, HF(src1), _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mask_cvt_roundph_epu16);\n+\n+  EMULATE(cvtph2_w)(&exp, src1, ZMASK_VALUE, 1);\n+  SI(res) = INTRINSIC (_maskz_cvt_roundph_epu16) (ZMASK_VALUE, HF(src1), _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _maskz_cvt_roundph_epu16);\n+#endif\n+\n+  if (n_errs != 0)\n+    abort ();\n+}\n+"}, {"sha": "bcaa7446d345df281502d3eafc7429d7670aaa52", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcvtph2w-1a.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/038afce92d86f0a291b700b76155090f94489cfd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtph2w-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/038afce92d86f0a291b700b76155090f94489cfd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtph2w-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtph2w-1a.c?ref=038afce92d86f0a291b700b76155090f94489cfd", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvtph2w\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2w\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\{\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2w\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2w\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2w\\[ \\\\t\\]+\\{rz-sae\\}\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i res, res1, res2;\n+volatile __m512h x1, x2, x3;\n+volatile __mmask32 m32;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res = _mm512_cvtph_epi16 (x1);\n+  res1 = _mm512_mask_cvtph_epi16 (res, m32, x2);\n+  res2 = _mm512_maskz_cvtph_epi16 (m32, x3);\n+  res = _mm512_cvt_roundph_epi16 (x1, 4);\n+  res1 = _mm512_mask_cvt_roundph_epi16 (res, m32, x2, 8);\n+  res2 = _mm512_maskz_cvt_roundph_epi16 (m32, x3, 11);\n+}"}, {"sha": "dfa20523932483ece45a3b80aa0d4609ae4782b9", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcvtph2w-1b.c", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/038afce92d86f0a291b700b76155090f94489cfd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtph2w-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/038afce92d86f0a291b700b76155090f94489cfd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtph2w-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtph2w-1b.c?ref=038afce92d86f0a291b700b76155090f94489cfd", "patch": "@@ -0,0 +1,83 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512dq\" } */\n+\n+#define AVX512FP16\n+#include \"avx512fp16-helper.h\"\n+\n+#define N_ELEMS (AVX512F_LEN / 16)\n+\n+void NOINLINE\n+EMULATE(cvtph2_w) (V512 * dest, V512 op1,\n+\t\t __mmask32 k, int zero_mask)\n+{\n+  V512 v1, v2, v3, v4, v5, v6, v7, v8;\n+  int i;\n+  __mmask16 m1, m2;\n+\n+  m1 = k & 0xffff;\n+  m2 = (k >> 16) & 0xffff;\n+\n+  unpack_ph_2twops(op1, &v1, &v2);\n+\n+  for (i = 0; i < 16; i++) {\n+    if (((1 << i) & m1) == 0) {\n+      if (zero_mask) {\n+\tdest->u16[i] = 0;\n+      }\n+    }\n+    else {\n+      dest->u16[i] = v1.f32[i];\n+\n+    }\n+\n+    if (((1 << i) & m2) == 0) {\n+      if (zero_mask) {\n+\tdest->u16[i+16] = 0;\n+      }\n+    }\n+    else {\n+      dest->u16[i+16] = v2.f32[i];\n+    }\n+  }\n+}\n+\n+void\n+TEST (void)\n+{\n+  V512 res, exp;\n+\n+  init_src();\n+\n+  EMULATE(cvtph2_w)(&exp, src1,  NET_MASK, 0);\n+  SI(res) = INTRINSIC (_cvtph_epi16) (HF(src1));\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _cvtph_epi16);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(cvtph2_w)(&exp, src1, MASK_VALUE, 0);\n+  SI(res) = INTRINSIC (_mask_cvtph_epi16) (SI(res), MASK_VALUE, HF(src1));\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mask_cvtph_epi16);\n+\n+  EMULATE(cvtph2_w)(&exp, src1,  ZMASK_VALUE, 1);\n+  SI(res) = INTRINSIC (_maskz_cvtph_epi16) (ZMASK_VALUE, HF(src1));\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _maskz_cvtph_epi16);\n+\n+#if AVX512F_LEN == 512\n+  EMULATE(cvtph2_w)(&exp, src1,  NET_MASK, 0);\n+  SI(res) = INTRINSIC (_cvt_roundph_epi16) (HF(src1), _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _cvt_roundph_epi16);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(cvtph2_w)(&exp, src1, MASK_VALUE, 0);\n+  SI(res) = INTRINSIC (_mask_cvt_roundph_epi16) (SI(res), MASK_VALUE, HF(src1), _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mask_cvt_roundph_epi16);\n+\n+  EMULATE(cvtph2_w)(&exp, src1,  ZMASK_VALUE, 1);\n+  SI(res) = INTRINSIC (_maskz_cvt_roundph_epi16) (ZMASK_VALUE, HF(src1), _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _maskz_cvt_roundph_epi16);\n+#endif\n+\n+  if (n_errs != 0) {\n+      abort ();\n+  }\n+}\n+"}, {"sha": "df653b0b2c7d4dc6b0f91e77fab8907a8421c666", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-vcvtph2dq-1a.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/038afce92d86f0a291b700b76155090f94489cfd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtph2dq-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/038afce92d86f0a291b700b76155090f94489cfd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtph2dq-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtph2dq-1a.c?ref=038afce92d86f0a291b700b76155090f94489cfd", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvtph2dq\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2dq\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2dq\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2dq\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2dq\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2dq\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i res1;\n+volatile __m128i res2;\n+volatile __m128h x3;\n+volatile __mmask8 m8;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res1 = _mm256_cvtph_epi32 (x3);\n+  res1 = _mm256_mask_cvtph_epi32 (res1, m8, x3);\n+  res1 = _mm256_maskz_cvtph_epi32 (m8, x3);\n+\n+  res2 = _mm_cvtph_epi32 (x3);\n+  res2 = _mm_mask_cvtph_epi32 (res2, m8, x3);\n+  res2 = _mm_maskz_cvtph_epi32 (m8, x3);\n+}"}, {"sha": "93a3e903da45a5f3ccd83face416da9ce28885a6", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-vcvtph2dq-1b.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/038afce92d86f0a291b700b76155090f94489cfd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtph2dq-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/038afce92d86f0a291b700b76155090f94489cfd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtph2dq-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtph2dq-1b.c?ref=038afce92d86f0a291b700b76155090f94489cfd", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512vl -mavx512dq\" } */\n+\n+#define AVX512VL\n+#define AVX512F_LEN 256      \n+#define AVX512F_LEN_HALF 128 \n+#include \"avx512fp16-vcvtph2dq-1b.c\"\n+                             \n+#undef AVX512F_LEN           \n+#undef AVX512F_LEN_HALF      \n+                             \n+#define AVX512F_LEN 128      \n+#define AVX512F_LEN_HALF 128 \n+#include \"avx512fp16-vcvtph2dq-1b.c\"\n+"}, {"sha": "ddc6f2a702e00eb946e88b903c01304aaaf6e927", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-vcvtph2qq-1a.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/038afce92d86f0a291b700b76155090f94489cfd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtph2qq-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/038afce92d86f0a291b700b76155090f94489cfd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtph2qq-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtph2qq-1a.c?ref=038afce92d86f0a291b700b76155090f94489cfd", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvtph2qq\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2qq\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2qq\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2qq\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2qq\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2qq\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i res1;\n+volatile __m128i res2;\n+volatile __m128h x3;\n+volatile __mmask8 m8;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res1 = _mm256_cvtph_epi64 (x3);\n+  res1 = _mm256_mask_cvtph_epi64 (res1, m8, x3);\n+  res1 = _mm256_maskz_cvtph_epi64 (m8, x3);\n+\n+  res2 = _mm_cvtph_epi64 (x3);\n+  res2 = _mm_mask_cvtph_epi64 (res2, m8, x3);\n+  res2 = _mm_maskz_cvtph_epi64 (m8, x3);\n+}"}, {"sha": "5afc5a1836b6e037d4546f1745c50fa19d3e25cc", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-vcvtph2qq-1b.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/038afce92d86f0a291b700b76155090f94489cfd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtph2qq-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/038afce92d86f0a291b700b76155090f94489cfd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtph2qq-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtph2qq-1b.c?ref=038afce92d86f0a291b700b76155090f94489cfd", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512vl -mavx512dq\" } */\n+\n+#define AVX512VL\n+#define AVX512F_LEN 256      \n+#define AVX512F_LEN_HALF 128 \n+#include \"avx512fp16-vcvtph2qq-1b.c\"\n+                             \n+#undef AVX512F_LEN           \n+#undef AVX512F_LEN_HALF      \n+                             \n+#define AVX512F_LEN 128      \n+#define AVX512F_LEN_HALF 128 \n+#include \"avx512fp16-vcvtph2qq-1b.c\"\n+"}, {"sha": "d07d76647a76a95245409f2daf75c79e611cf7ae", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-vcvtph2udq-1a.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/038afce92d86f0a291b700b76155090f94489cfd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtph2udq-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/038afce92d86f0a291b700b76155090f94489cfd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtph2udq-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtph2udq-1a.c?ref=038afce92d86f0a291b700b76155090f94489cfd", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvtph2udq\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2udq\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2udq\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2udq\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2udq\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2udq\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i res1;\n+volatile __m128i res2;\n+volatile __m128h x3;\n+volatile __mmask8 m8;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res1 = _mm256_cvtph_epu32 (x3);\n+  res1 = _mm256_mask_cvtph_epu32 (res1, m8, x3);\n+  res1 = _mm256_maskz_cvtph_epu32 (m8, x3);\n+\n+  res2 = _mm_cvtph_epu32 (x3);\n+  res2 = _mm_mask_cvtph_epu32 (res2, m8, x3);\n+  res2 = _mm_maskz_cvtph_epu32 (m8, x3);\n+}"}, {"sha": "d869a0ca259e5a2d0adb150e3704177b5496945a", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-vcvtph2udq-1b.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/038afce92d86f0a291b700b76155090f94489cfd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtph2udq-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/038afce92d86f0a291b700b76155090f94489cfd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtph2udq-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtph2udq-1b.c?ref=038afce92d86f0a291b700b76155090f94489cfd", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512vl -mavx512dq\" } */\n+\n+#define AVX512VL\n+#define AVX512F_LEN 256      \n+#define AVX512F_LEN_HALF 128 \n+#include \"avx512fp16-vcvtph2udq-1b.c\"\n+                             \n+#undef AVX512F_LEN           \n+#undef AVX512F_LEN_HALF      \n+                             \n+#define AVX512F_LEN 128      \n+#define AVX512F_LEN_HALF 128 \n+#include \"avx512fp16-vcvtph2udq-1b.c\"\n+"}, {"sha": "26dbf227d814d76149d3dbf60eb9496153aa0483", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-vcvtph2uqq-1a.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/038afce92d86f0a291b700b76155090f94489cfd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtph2uqq-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/038afce92d86f0a291b700b76155090f94489cfd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtph2uqq-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtph2uqq-1a.c?ref=038afce92d86f0a291b700b76155090f94489cfd", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvtph2uqq\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2uqq\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2uqq\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2uqq\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2uqq\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2uqq\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i res1;\n+volatile __m128i res2;\n+volatile __m128h x3;\n+volatile __mmask8 m8;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res1 = _mm256_cvtph_epu64 (x3);\n+  res1 = _mm256_mask_cvtph_epu64 (res1, m8, x3);\n+  res1 = _mm256_maskz_cvtph_epu64 (m8, x3);\n+\n+  res2 = _mm_cvtph_epu64 (x3);\n+  res2 = _mm_mask_cvtph_epu64 (res2, m8, x3);\n+  res2 = _mm_maskz_cvtph_epu64 (m8, x3);\n+}"}, {"sha": "d9b10a82f8e45882338caf9b93e9e15500bbc8c0", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-vcvtph2uqq-1b.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/038afce92d86f0a291b700b76155090f94489cfd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtph2uqq-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/038afce92d86f0a291b700b76155090f94489cfd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtph2uqq-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtph2uqq-1b.c?ref=038afce92d86f0a291b700b76155090f94489cfd", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512vl -mavx512dq\" } */\n+\n+#define AVX512VL\n+#define AVX512F_LEN 256      \n+#define AVX512F_LEN_HALF 128 \n+#include \"avx512fp16-vcvtph2uqq-1b.c\"\n+                             \n+#undef AVX512F_LEN           \n+#undef AVX512F_LEN_HALF      \n+                             \n+#define AVX512F_LEN 128      \n+#define AVX512F_LEN_HALF 128 \n+#include \"avx512fp16-vcvtph2uqq-1b.c\"\n+"}, {"sha": "0f9fd27881c16be662ade8cfeba564a1d465fcad", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-vcvtph2uw-1a.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/038afce92d86f0a291b700b76155090f94489cfd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtph2uw-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/038afce92d86f0a291b700b76155090f94489cfd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtph2uw-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtph2uw-1a.c?ref=038afce92d86f0a291b700b76155090f94489cfd", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvtph2uw\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2uw\\[ \\\\t\\]+%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2uw\\[ \\\\t\\]+%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2uw\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2uw\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2uw\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i res1;\n+volatile __m128i res2;\n+volatile __m256h x3;\n+volatile __m128h x4;\n+volatile __mmask16 m16;\n+volatile __mmask8 m8;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res1 = _mm256_cvtph_epu16 (x3);\n+  res1 = _mm256_mask_cvtph_epu16 (res1, m16, x3);\n+  res1 = _mm256_maskz_cvtph_epu16 (m16, x3);\n+\n+  res2 = _mm_cvtph_epu16 (x4);\n+  res2 = _mm_mask_cvtph_epu16 (res2, m8, x4);\n+  res2 = _mm_maskz_cvtph_epu16 (m8, x4);\n+}"}, {"sha": "280dcd753208518893212430c2a4085668d6a43b", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-vcvtph2uw-1b.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/038afce92d86f0a291b700b76155090f94489cfd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtph2uw-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/038afce92d86f0a291b700b76155090f94489cfd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtph2uw-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtph2uw-1b.c?ref=038afce92d86f0a291b700b76155090f94489cfd", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512vl -mavx512dq\" } */\n+\n+#define AVX512VL\n+#define AVX512F_LEN 256      \n+#define AVX512F_LEN_HALF 128 \n+#include \"avx512fp16-vcvtph2uw-1b.c\"\n+                             \n+#undef AVX512F_LEN           \n+#undef AVX512F_LEN_HALF      \n+                             \n+#define AVX512F_LEN 128      \n+#define AVX512F_LEN_HALF 128 \n+#include \"avx512fp16-vcvtph2uw-1b.c\"\n+"}, {"sha": "8dee4ee25d0c2d5c4a6a6b524917d3ac02daf12d", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-vcvtph2w-1a.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/038afce92d86f0a291b700b76155090f94489cfd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtph2w-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/038afce92d86f0a291b700b76155090f94489cfd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtph2w-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtph2w-1a.c?ref=038afce92d86f0a291b700b76155090f94489cfd", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvtph2w\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2w\\[ \\\\t\\]+%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2w\\[ \\\\t\\]+%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2w\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2w\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2w\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i res1;\n+volatile __m128i res2;\n+volatile __m256h x3;\n+volatile __m128h x4;\n+volatile __mmask16 m16;\n+volatile __mmask8 m8;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res1 = _mm256_cvtph_epi16 (x3);\n+  res1 = _mm256_mask_cvtph_epi16 (res1, m16, x3);\n+  res1 = _mm256_maskz_cvtph_epi16 (m16, x3);\n+\n+  res2 = _mm_cvtph_epi16 (x4);\n+  res2 = _mm_mask_cvtph_epi16 (res2, m8, x4);\n+  res2 = _mm_maskz_cvtph_epi16 (m8, x4);\n+}"}, {"sha": "739ba6478ae1be10b9545e15aa67d8389352b562", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-vcvtph2w-1b.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/038afce92d86f0a291b700b76155090f94489cfd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtph2w-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/038afce92d86f0a291b700b76155090f94489cfd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtph2w-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtph2w-1b.c?ref=038afce92d86f0a291b700b76155090f94489cfd", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512vl -mavx512dq\" } */\n+\n+#define AVX512VL\n+#define AVX512F_LEN 256      \n+#define AVX512F_LEN_HALF 128 \n+#include \"avx512fp16-vcvtph2w-1b.c\"\n+                             \n+#undef AVX512F_LEN           \n+#undef AVX512F_LEN_HALF      \n+                             \n+#define AVX512F_LEN 128      \n+#define AVX512F_LEN_HALF 128 \n+#include \"avx512fp16-vcvtph2w-1b.c\"\n+"}]}