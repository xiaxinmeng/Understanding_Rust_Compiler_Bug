{"sha": "2b33460a0c7e8eca848ed6af9b48e89240f25534", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmIzMzQ2MGEwYzdlOGVjYTg0OGVkNmFmOWI0OGU4OTI0MGYyNTUzNA==", "commit": {"author": {"name": "Kelvin Nilsen", "email": "kelvin@gcc.gnu.org", "date": "2017-03-22T00:01:19Z"}, "committer": {"name": "Kelvin Nilsen", "email": "kelvin@gcc.gnu.org", "date": "2017-03-22T00:01:19Z"}, "message": "rs6000-c.c (rs6000_target_modify_macros): Add comments.\n\ngcc/ChangeLog:\n\n2017-03-21  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n\n\t* config/rs6000/rs6000-c.c (rs6000_target_modify_macros): Add\n\tcomments.\n\t* config/rs6000/rs6000.c (rs6000_option_override_internal): Add\n\tcomments.\n\nFrom-SVN: r246339", "tree": {"sha": "e6cd39b281d7683b0a0735584336350eb2ecd141", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e6cd39b281d7683b0a0735584336350eb2ecd141"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b33460a0c7e8eca848ed6af9b48e89240f25534", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b33460a0c7e8eca848ed6af9b48e89240f25534", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b33460a0c7e8eca848ed6af9b48e89240f25534", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b33460a0c7e8eca848ed6af9b48e89240f25534/comments", "author": null, "committer": null, "parents": [{"sha": "3f01b620a7a84f67233185d8f8b1f46f2ae680bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f01b620a7a84f67233185d8f8b1f46f2ae680bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f01b620a7a84f67233185d8f8b1f46f2ae680bd"}], "stats": {"total": 265, "additions": 262, "deletions": 3}, "files": [{"sha": "25059f608c913e7d3dff5d7e7ee8b685885746fb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b33460a0c7e8eca848ed6af9b48e89240f25534/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b33460a0c7e8eca848ed6af9b48e89240f25534/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2b33460a0c7e8eca848ed6af9b48e89240f25534", "patch": "@@ -1,3 +1,10 @@\n+2017-03-21  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n+\n+\t* config/rs6000/rs6000-c.c (rs6000_target_modify_macros): Add\n+\tcomments.\n+\t* config/rs6000/rs6000.c (rs6000_option_override_internal): Add\n+\tcomments.\n+\n 2017-03-21  Martin Sebor  <msebor@redhat.com>\n \n \t* doc/extend.texi: Use \"cannot\" instead of \"can't.\""}, {"sha": "c13b62b1a6bc8bb297a85e90139307402de29d16", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 186, "deletions": 0, "changes": 186, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b33460a0c7e8eca848ed6af9b48e89240f25534/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b33460a0c7e8eca848ed6af9b48e89240f25534/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=2b33460a0c7e8eca848ed6af9b48e89240f25534", "patch": "@@ -343,6 +343,71 @@ rs6000_target_modify_macros (bool define_p, HOST_WIDE_INT flags,\n \t     (define_p) ? \"define\" : \"undef\",\n \t     flags, bu_mask);\n \n+  /* Each of the flags mentioned below controls whether certain\n+     preprocessor macros will be automatically defined when\n+     preprocessing source files for compilation by this compiler.\n+     While most of these flags can be enabled or disabled\n+     explicitly by specifying certain command-line options when\n+     invoking the compiler, there are also many ways in which these\n+     flags are enabled or disabled implicitly, based on compiler\n+     defaults, configuration choices, and on the presence of certain\n+     related command-line options.  Many, but not all, of these\n+     implicit behaviors can be found in file \"rs6000.c\", the\n+     rs6000_option_override_internal() function.\n+\n+     In general, each of the flags may be automatically enabled in\n+     any of the following conditions:\n+\n+     1. If no -mcpu target is specified on the command line and no\n+\t--with-cpu target is specified to the configure command line\n+\tand the TARGET_DEFAULT macro for this default cpu host\n+\tincludes the flag, and the flag has not been explicitly disabled\n+\tby command-line options.\n+\n+     2. If the target specified with -mcpu=target on the command line, or\n+\tin the absence of a -mcpu=target command-line option, if the\n+\ttarget specified using --with-cpu=target on the configure\n+\tcommand line, is disqualified because the associated binary\n+\ttools (e.g. the assembler) lack support for the requested cpu,\n+\tand the TARGET_DEFAULT macro for this default cpu host\n+\tincludes the flag, and the flag has not been explicitly disabled\n+\tby command-line options.\n+\n+     3. If either of the above two conditions apply except that the\n+\tTARGET_DEFAULT macro is defined to equal zero, and\n+\tTARGET_POWERPC64 and\n+\ta) BYTES_BIG_ENDIAN and the flag to be enabled is either\n+\t   MASK_PPC_GFXOPT or MASK_POWERPC64 (flags for \"powerpc64\"\n+\t   target), or\n+\tb) !BYTES_BIG_ENDIAN and the flag to be enabled is either\n+\t   MASK_POWERPC64 or it is one of the flags included in\n+\t   ISA_2_7_MASKS_SERVER (flags for \"powerpc64le\" target).\n+\n+     4. If a cpu has been requested with a -mcpu=target command-line option\n+\tand this cpu has not been disqualified due to shortcomings of the\n+\tbinary tools, and the set of flags associated with the requested cpu\n+\tinclude the flag to be enabled.  See rs6000-cpus.def for macro\n+\tdefinitions that represent various ABI standards\n+\t(e.g. ISA_2_1_MASKS, ISA_3_0_MASKS_SERVER) and for a list of\n+\tthe specific flags that are associated with each of the cpu\n+\tchoices that can be specified as the target of a -mcpu=target\n+\tcompile option, or as the the target of a --with-cpu=target\n+\tconfigure option.  Target flags that are specified in either\n+\tof these two ways are considered \"implicit\" since the flags\n+\tare not mentioned specifically by name.\n+\n+\tAdditional documentation describing behavior specific to\n+\tparticular flags is provided below, immediately preceding the\n+\tuse of each relevant flag.\n+\n+     5. If there is no -mcpu=target command-line option, and the cpu\n+\trequested by a --with-cpu=target command-line option has not\n+\tbeen disqualified due to shortcomings of the binary tools, and\n+\tthe set of flags associated with the specified target include\n+\tthe flag to be enabled.  See the notes immediately above for a\n+\tsummary of the flags associated with particular cpu\n+\tdefinitions.  */\n+\n   /* rs6000_isa_flags based options.  */\n   rs6000_define_or_undefine_macro (define_p, \"_ARCH_PPC\");\n   if ((flags & OPTION_MASK_PPC_GPOPT) != 0)\n@@ -363,6 +428,12 @@ rs6000_target_modify_macros (bool define_p, HOST_WIDE_INT flags,\n     rs6000_define_or_undefine_macro (define_p, \"_ARCH_PWR6X\");\n   if ((flags & OPTION_MASK_POPCNTD) != 0)\n     rs6000_define_or_undefine_macro (define_p, \"_ARCH_PWR7\");\n+  /* Note that the OPTION_MASK_DIRECT_MOVE flag is automatically\n+     turned off in any of the following conditions:\n+     1. TARGET_HARD_FLOAT, TARGET_ALTIVEC, or TARGET_VSX is explicitly\n+\tdisabled and OPTION_MASK_DIRECT_MOVE was not explicitly\n+\tenabled.\n+     2. TARGET_VSX is off.  */\n   if ((flags & OPTION_MASK_DIRECT_MOVE) != 0)\n     rs6000_define_or_undefine_macro (define_p, \"_ARCH_PWR8\");\n   if ((flags & OPTION_MASK_MODULO) != 0)\n@@ -371,6 +442,27 @@ rs6000_target_modify_macros (bool define_p, HOST_WIDE_INT flags,\n     rs6000_define_or_undefine_macro (define_p, \"_SOFT_FLOAT\");\n   if ((flags & OPTION_MASK_RECIP_PRECISION) != 0)\n     rs6000_define_or_undefine_macro (define_p, \"__RECIP_PRECISION__\");\n+  /* Note that the OPTION_MASK_ALTIVEC flag is automatically turned on\n+     in any of the following conditions:\n+     1. The command line specifies either -maltivec=le or -maltivec=be.\n+     2. The operating system is Darwin and it is configured for 64\n+\tbit.  (See darwin_rs6000_override_options.)\n+     3. The operating system is Darwin and the operating system\n+\tversion is 10.5 or higher and the user has not explicitly\n+\tdisabled ALTIVEC by specifying -mcpu=G3 or -mno-altivec and\n+\tthe compiler is not producing code for integration within the\n+\tkernel.  (See darwin_rs6000_override_options.)\n+     Note that the OPTION_MASK_ALTIVEC flag is automatically turned\n+     off in any of the following conditions:\n+     1. The operating system does not support saving of AltiVec\n+\tregisters (OS_MISSING_ALTIVEC).\n+     2. If an inner context (as introduced by\n+\t__attribute__((__target__())) or #pragma GCC target()\n+\trequests a target that normally enables the\n+\tOPTION_MASK_ALTIVEC flag but the outer-most \"main target\"\n+\tdoes not support the rs6000_altivec_abi, this flag is\n+\tturned off for the inner context unless OPTION_MASK_ALTIVEC\n+\twas explicitly enabled for the inner context.  */\n   if ((flags & OPTION_MASK_ALTIVEC) != 0)\n     {\n       const char *vec_str = (define_p) ? \"__VEC__=10206\" : \"__VEC__\";\n@@ -381,6 +473,31 @@ rs6000_target_modify_macros (bool define_p, HOST_WIDE_INT flags,\n       if (!flag_iso)\n \trs6000_define_or_undefine_macro (define_p, \"__APPLE_ALTIVEC__\");\n     }\n+  /* Note that the OPTION_MASK_VSX flag is automatically turned off in\n+     the following conditions:\n+     1. The operating system does not support saving of AltiVec\n+\tregisters (OS_MISSING_ALTIVEC).\n+     2. If any of the options TARGET_HARD_FLOAT, TARGET_FPRS,\n+\tTARGET_SINGLE_FLOAT, or TARGET_DOUBLE_FLOAT are turned off.\n+\tHereafter, the OPTION_MASK_VSX flag is considered to have been\n+\tturned off explicitly.\n+     3. If TARGET_PAIRED_FLOAT was enabled.  Hereafter, the\n+\tOPTION_MASK_VSX flag is considered to have been turned off\n+\texplicitly.\n+     4. If TARGET_AVOID_XFORM is turned on explicitly at the outermost\n+\tcompilation context, or if it is turned on by any means in an\n+\tinner compilation context.  Hereafter, the OPTION_MASK_VSX\n+\tflag is considered to have been turned off explicitly.\n+     5. If TARGET_ALTIVEC was explicitly disabled.  Hereafter, the\n+\tOPTION_MASK_VSX flag is considered to have been turned off\n+\texplicitly.\n+     6. If an inner context (as introduced by\n+\t__attribute__((__target__())) or #pragma GCC target()\n+\trequests a target that normally enables the\n+\tOPTION_MASK_VSX flag but the outer-most \"main target\"\n+\tdoes not support the rs6000_altivec_abi, this flag is\n+\tturned off for the inner context unless OPTION_MASK_VSX\n+\twas explicitly enabled for the inner context.  */\n   if ((flags & OPTION_MASK_VSX) != 0)\n     rs6000_define_or_undefine_macro (define_p, \"__VSX__\");\n   if ((flags & OPTION_MASK_HTM) != 0)\n@@ -389,26 +506,95 @@ rs6000_target_modify_macros (bool define_p, HOST_WIDE_INT flags,\n       /* Tell the user that our HTM insn patterns act as memory barriers.  */\n       rs6000_define_or_undefine_macro (define_p, \"__TM_FENCE__\");\n     }\n+  /* Note that the OPTION_MASK_P8_VECTOR flag is automatically turned\n+     off in the following conditions:\n+     1. If any of TARGET_HARD_FLOAT, TARGET_ALTIVEC, or TARGET_VSX\n+\twere turned off explicitly and OPTION_MASK_P8_VECTOR flag was\n+\tnot turned on explicitly.\n+     2. If TARGET_ALTIVEC is turned off.  Hereafter, the\n+\tOPTION_MASK_P8_VECTOR flag is considered to have been turned off\n+\texplicitly.\n+     3. If TARGET_VSX is turned off.  Hereafter, the OPTION_MASK_P8_VECTOR\n+\tflag is considered to have been turned off explicitly.  */\n   if ((flags & OPTION_MASK_P8_VECTOR) != 0)\n     rs6000_define_or_undefine_macro (define_p, \"__POWER8_VECTOR__\");\n+  /* Note that the OPTION_MASK_P9_VECTOR flag is automatically turned\n+     off in the following conditions:\n+     1. If TARGET_P8_VECTOR is turned off. Hereafter, the\n+\tOPTION_MASK_P9_VECTOR flag is considered to have been turned off\n+\texplicitly.  */\n   if ((flags & OPTION_MASK_P9_VECTOR) != 0)\n     rs6000_define_or_undefine_macro (define_p, \"__POWER9_VECTOR__\");\n+  /* Note that the OPTION_MASK_QUAD_MEMORY flag is automatically\n+     turned off in the following conditions:\n+     1. If TARGET_POWERPC64 is turned off.\n+     2. If WORDS_BIG_ENDIAN is false (non-atomic quad memory\n+\tload/store are disabled on little endian).  */\n   if ((flags & OPTION_MASK_QUAD_MEMORY) != 0)\n     rs6000_define_or_undefine_macro (define_p, \"__QUAD_MEMORY__\");\n+  /* Note that the OPTION_MASK_QUAD_MEMORY_ATOMIC flag is automatically\n+     turned off in the following conditions:\n+     1. If TARGET_POWERPC64 is turned off.\n+     Note that the OPTION_MASK_QUAD_MEMORY_ATOMIC flag is\n+     automatically turned on in the following conditions:\n+     1. If TARGET_QUAD_MEMORY and this flag was not explicitly\n+\tdisabled.  */\n   if ((flags & OPTION_MASK_QUAD_MEMORY_ATOMIC) != 0)\n     rs6000_define_or_undefine_macro (define_p, \"__QUAD_MEMORY_ATOMIC__\");\n+  /* Note that the OPTION_MASK_CRYPTO flag is automatically turned off\n+     in the following conditions:\n+     1. If any of TARGET_HARD_FLOAT or TARGET_ALTIVEC or TARGET_VSX\n+\tare turned off explicitly and OPTION_MASK_CRYPTO is not turned\n+\ton explicitly.\n+     2. If TARGET_ALTIVEC is turned off.  */\n   if ((flags & OPTION_MASK_CRYPTO) != 0)\n     rs6000_define_or_undefine_macro (define_p, \"__CRYPTO__\");\n+  /* Note that the OPTION_MASK_UPPER_REGS_DF flag is automatically\n+     turned on in the following conditions:\n+     1. If TARGET_UPPER_REGS is explicitly turned on and\n+\tTARGET_VSX is turned on and OPTION_MASK_UPPER_REGS_DF is not\n+\texplicitly turned off.  Hereafter, the\n+\tOPTION_MASK_UPPER_REGS_DF flag is considered to have been\n+\texplicitly set.\n+     Note that the OPTION_MASK_UPPER_REGS_DF flag is automatically\n+     turned off in the following conditions:\n+     1. If TARGET_UPPER_REGS is explicitly turned off and TARGET_VSX\n+\tis turned on and OPTION_MASK_UPPER_REGS_DF is not explicitly\n+\tturned on.  Hereafter, the OPTION_MASK_UPPER_REGS_DF flag is\n+\tconsidered to have been explicitly cleared.\n+     2. If TARGET_UPPER_REGS_DF is turned on but TARGET_VSX is turned\n+\toff.  */\n   if ((flags & OPTION_MASK_UPPER_REGS_DF) != 0)\n     rs6000_define_or_undefine_macro (define_p, \"__UPPER_REGS_DF__\");\n+  /* Note that the OPTION_MASK_UPPER_REGS_SF flag is automatically\n+     turned on in the following conditions:\n+     1. If TARGET_UPPER_REGS is explicitly turned on and\n+\tTARGET_P8_VECTOR is on and OPTION_MASK_UPPER_REGS_SF is not\n+\tturned off explicitly.  Hereafter, the\n+\tOPTION_MASK_UPPER_REGS_SF flag is considered to have been\n+\texplicitly set.\n+     Note that the OPTION_MASK_UPPER_REGS_SF flag is automatically\n+     turned off in the following conditions:\n+     1. If TARGET_UPPER_REGS is explicitly turned off and\n+\tTARGET_P8_VECTOR is on and OPTION_MASK_UPPER_REGS_SF is not\n+\tturned off explicitly.  Hereafter, the\n+\tOPTION_MASK_UPPER_REGS_SF flag is considered to have been\n+\texplicitly cleared.\n+     2. If TARGET_P8_VECTOR is off.  */\n   if ((flags & OPTION_MASK_UPPER_REGS_SF) != 0)\n     rs6000_define_or_undefine_macro (define_p, \"__UPPER_REGS_SF__\");\n \n   /* options from the builtin masks.  */\n+  /* Note that RS6000_BTM_SPE is enabled only if TARGET_SPE\n+     (e.g. -mspe).  */\n   if ((bu_mask & RS6000_BTM_SPE) != 0)\n     rs6000_define_or_undefine_macro (define_p, \"__SPE__\");\n+  /* Note that RS6000_BTM_PAIRED is enabled only if\n+     TARGET_PAIRED_FLOAT is enabled (e.g. -mpaired).  */\n   if ((bu_mask & RS6000_BTM_PAIRED) != 0)\n     rs6000_define_or_undefine_macro (define_p, \"__PAIRED__\");\n+  /* Note that RS6000_BTM_CELL is enabled only if (rs6000_cpu ==\n+     PROCESSOR_CELL) (e.g. -mcpu=cell).  */\n   if ((bu_mask & RS6000_BTM_CELL) != 0)\n     rs6000_define_or_undefine_macro (define_p, \"__PPU__\");\n }"}, {"sha": "63bc9017b15053a42ebf37c24dcf4906da570614", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 69, "deletions": 3, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b33460a0c7e8eca848ed6af9b48e89240f25534/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b33460a0c7e8eca848ed6af9b48e89240f25534/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=2b33460a0c7e8eca848ed6af9b48e89240f25534", "patch": "@@ -3820,8 +3820,72 @@ rs6000_md_asm_adjust (vec<rtx> &/*outputs*/, vec<rtx> &/*inputs*/,\n   return NULL;\n }\n \n-/* Override command line options.  Mostly we process the processor type and\n-   sometimes adjust other TARGET_ options.  */\n+/* Override command line options.\n+\n+   Combine build-specific configuration information with options\n+   specified on the command line to set various state variables which\n+   influence code generation, optimization, and expansion of built-in\n+   functions.  Assure that command-line configuration preferences are\n+   compatible with each other and with the build configuration; issue\n+   warnings while adjusting configuration or error messages while\n+   rejecting configuration.\n+\n+   Upon entry to this function:\n+\n+     This function is called once at the beginning of\n+     compilation, and then again at the start and end of compiling\n+     each section of code that has a different configuration, as\n+     indicated, for example, by adding the\n+\n+       __attribute__((__target__(\"cpu=power9\")))\n+\n+     qualifier to a function definition or, for example, by bracketing\n+     code between\n+\n+       #pragma GCC target(\"altivec\")\n+\n+     and\n+\n+       #pragma GCC reset_options\n+\n+     directives.  Parameter global_init_p is true for the initial\n+     invocation, which initializes global variables, and false for all\n+     subsequent invocations.\n+\n+\n+     Various global state information is assumed to be valid.  This\n+     includes OPTION_TARGET_CPU_DEFAULT, representing the name of the\n+     default CPU specified at build configure time, TARGET_DEFAULT,\n+     representing the default set of option flags for the default\n+     target, and global_options_set.x_rs6000_isa_flags, representing\n+     which options were requested on the command line.\n+\n+   Upon return from this function:\n+\n+     rs6000_isa_flags_explicit has a non-zero bit for each flag that\n+     was set by name on the command line.  Additionally, if certain\n+     attributes are automatically enabled or disabled by this function\n+     in order to assure compatibility between options and\n+     configuration, the flags associated with those attributes are\n+     also set.  By setting these \"explicit bits\", we avoid the risk\n+     that other code might accidentally overwrite these particular\n+     attributes with \"default values\".\n+\n+     The various bits of rs6000_isa_flags are set to indicate the\n+     target options that have been selected for the most current\n+     compilation efforts.  This has the effect of also turning on the\n+     associated TARGET_XXX values since these are macros which are\n+     generally defined to test the corresponding bit of the\n+     rs6000_isa_flags variable.\n+\n+     The variable rs6000_builtin_mask is set to represent the target\n+     options for the most current compilation efforts, consistent with\n+     the current contents of rs6000_isa_flags.  This variable controls\n+     expansion of built-in functions.\n+\n+     Various other global variables and fields of global structures\n+     (over 50 in all) are initialized to reflect the desired options\n+     for the most current compilation efforts.  */\n \n static bool\n rs6000_option_override_internal (bool global_init_p)\n@@ -5253,7 +5317,9 @@ rs6000_option_override_internal (bool global_init_p)\n     rs6000_single_float = rs6000_double_float = 1;\n \n   /* If not explicitly specified via option, decide whether to generate indexed\n-     load/store instructions.  */\n+     load/store instructions.  A value of -1 indicates that the\n+     initial value of this variable has not been overwritten. During\n+     compilation, TARGET_AVOID_XFORM is either 0 or 1. */\n   if (TARGET_AVOID_XFORM == -1)\n     /* Avoid indexed addressing when targeting Power6 in order to avoid the\n      DERAT mispredict penalty.  However the LVE and STVE altivec instructions"}]}