{"sha": "66526c6a1c01b6110eaeda94ecc885177c636605", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjY1MjZjNmExYzAxYjYxMTBlYWVkYTk0ZWNjODg1MTc3YzYzNjYwNQ==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-08-29T21:05:30Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2021-08-27T16:02:12Z"}, "message": "Darwin : Mark the mod init/term section starts with a linker-visible sym.\n\nSome newer assemblers emit section start temp symbols for mod init and term\nsections if there is no suitable symbol present already.\nThe temp symbols are linker visible and therefore appear in the symbol tables.\nSince the temp symbol number can vary when debug is enabled, that causes\ncompare-debug fails.  The solution is to provide a stable linker-visible\nsymbol.\n\nSigned-off-by: Iain Sandoe <iain@sandoe.co.uk>\n\ngcc/ChangeLog:\n\n\t* config/darwin.c (finalize_ctors): Add a section-start linker-\n\tvisible symbol.\n\t(finalize_dtors): Likewise.\n\t* config/darwin.h (MIN_LD64_INIT_TERM_START_LABELS): New.", "tree": {"sha": "a1685b98cfb4d36008239837d549c476939f6dc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a1685b98cfb4d36008239837d549c476939f6dc1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/66526c6a1c01b6110eaeda94ecc885177c636605", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66526c6a1c01b6110eaeda94ecc885177c636605", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66526c6a1c01b6110eaeda94ecc885177c636605", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66526c6a1c01b6110eaeda94ecc885177c636605/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff6bb9dde10ab665a35bb75527313cd9f7d52f8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff6bb9dde10ab665a35bb75527313cd9f7d52f8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff6bb9dde10ab665a35bb75527313cd9f7d52f8e"}], "stats": {"total": 40, "additions": 35, "deletions": 5}, "files": [{"sha": "667fda79a60083cdc2190d68e42a6eacab19ef02", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 32, "deletions": 5, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66526c6a1c01b6110eaeda94ecc885177c636605/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66526c6a1c01b6110eaeda94ecc885177c636605/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=66526c6a1c01b6110eaeda94ecc885177c636605", "patch": "@@ -109,6 +109,9 @@ static bool ld_uses_coal_sects = false;\n    each FDE.  */\n static bool ld_needs_eh_markers = false;\n \n+/* Emit a section-start symbol for mod init and term sections.  */\n+static bool ld_init_term_start_labels = false;\n+\n /* Section names.  */\n section * darwin_sections[NUM_DARWIN_SECTIONS];\n \n@@ -1838,6 +1841,11 @@ finalize_ctors ()\n   else\n     switch_to_section (darwin_sections[constructor_section]);\n \n+  /* Where needed, provide a linker-visible section-start symbol so that we\n+     have stable output between debug and non-debug.  */\n+  if (ld_init_term_start_labels)\n+    fputs (MACHOPIC_INDIRECT ? \"_Mod.init:\\n\" : \"_CTOR.sect:\\n\", asm_out_file);\n+\n   if (vec_safe_length (ctors) > 1)\n     ctors->qsort (sort_cdtor_records);\n   FOR_EACH_VEC_SAFE_ELT (ctors, i, elt)\n@@ -1858,6 +1866,11 @@ finalize_dtors ()\n   else\n     switch_to_section (darwin_sections[destructor_section]);\n \n+  /* Where needed, provide a linker-visible section-start symbol so that we\n+     have stable output between debug and non-debug.  */\n+  if (ld_init_term_start_labels)\n+    fputs (MACHOPIC_INDIRECT ? \"_Mod.term:\\n\" : \"_DTOR.sect:\\n\", asm_out_file);\n+\n   if (vec_safe_length (dtors) > 1)\n     dtors->qsort (sort_cdtor_records);\n   FOR_EACH_VEC_SAFE_ELT (dtors, i, elt)\n@@ -3228,11 +3241,25 @@ darwin_override_options (void)\n       /* Earlier versions are not specifically accounted, until required.  */\n     }\n \n-  /* Older Darwin ld could not coalesce weak entities without them being\n-     placed in special sections.  */\n-  if (darwin_target_linker\n-      && (strverscmp (darwin_target_linker, MIN_LD64_NO_COAL_SECTS) < 0))\n-    ld_uses_coal_sects = true;\n+  /* Some codegen needs to account for the capabilities of the target\n+     linker.  */\n+  if (darwin_target_linker)\n+    {\n+      /* Older Darwin ld could not coalesce weak entities without them being\n+\t placed in special sections.  */\n+      if (strverscmp (darwin_target_linker, MIN_LD64_NO_COAL_SECTS) < 0)\n+\tld_uses_coal_sects = true;\n+\n+      /* Some newer assemblers emit section start temp symbols for mod init\n+\t and term sections if there is no suitable symbol present already.\n+\t The temp symbols are linker visible and therefore appear in the\n+\t symbol tables.  Since the temp symbol number can vary when debug is\n+\t enabled, that causes compare-debug fails.  The solution is to provide\n+\t a stable linker-visible symbol.  */\n+      if (strverscmp (darwin_target_linker,\n+\t\t      MIN_LD64_INIT_TERM_START_LABELS) >= 0)\n+\tld_init_term_start_labels = true;\n+    }\n \n   /* In principle, this should be c-family only.  However, we really need to\n      set sensible defaults for LTO as well, since the section selection stuff"}, {"sha": "f1d92f87e9a705e0343aaec0d49711069f86bb94", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66526c6a1c01b6110eaeda94ecc885177c636605/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66526c6a1c01b6110eaeda94ecc885177c636605/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=66526c6a1c01b6110eaeda94ecc885177c636605", "patch": "@@ -1104,6 +1104,9 @@ extern void darwin_driver_init (unsigned int *,struct cl_decoded_option **);\n    needed, and there is no need for the compiler to emit them.  */\n #define MIN_LD64_OMIT_STUBS \"62.1\"\n \n+/* Emit start labels for init and term sections from this version.  */\n+#define MIN_LD64_INIT_TERM_START_LABELS \"136.0\"\n+\n /* If we have no definition for the linker version, pick the minimum version\n    that will bootstrap the compiler.  */\n #ifndef LD64_VERSION"}]}