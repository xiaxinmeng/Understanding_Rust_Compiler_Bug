{"sha": "0a9d711df36b42b6494b73a90c7ebf050e904493", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGE5ZDcxMWRmMzZiNDJiNjQ5NGI3M2E5MGM3ZWJmMDUwZTkwNDQ5Mw==", "commit": {"author": {"name": "Sunil K Pandey", "email": "skpgkp2@gmail.com", "date": "2020-07-18T02:42:09Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-07-21T23:25:43Z"}, "message": "Add TARGET_LOWER_LOCAL_DECL_ALIGNMENT [PR95237]\n\nDefault for this hook is NOP. For x86, in 32 bit mode, this hook\nsets alignment of long long on stack to 32 bits if preferred stack\nboundary is 32 bits.\n\n  - This patch prevents lowering of alignment from following macros.\n\tLOCAL_ALIGNMENT\n\tSTACK_SLOT_ALIGNMENT\n\tLOCAL_DECL_ALIGNMENT\n  - This patch fixes\n\tgcc.target/i386/pr69454-2.c\n\tgcc.target/i386/stackalign/longlong-1.c\n  - Regression test on x86-64, no new fail introduced.\n\nTested on x86-64.\n\ngcc/c/ChangeLog:\n\n\tPR target/95237\n\t* c-decl.c (finish_decl): Call target hook\n\tlower_local_decl_alignment to lower local decl alignment.\n\ngcc/ChangeLog:\n\n\tPR target/95237\n\t* config/i386/i386-protos.h (ix86_local_alignment): Add\n\tanother function parameter may_lower alignment. Default is\n\tfalse.\n\t* config/i386/i386.c (ix86_lower_local_decl_alignment): New\n\tfunction.\n\t(ix86_local_alignment): Amend ix86_local_alignment to accept\n\tanother parameter may_lower. If may_lower is true, new align\n\tmay be lower than incoming alignment. If may_lower is false,\n\tnew align will be greater or equal to incoming alignment.\n\t(TARGET_LOWER_LOCAL_DECL_ALIGNMENT): Define.\n\t* doc/tm.texi: Regenerate.\n\t* doc/tm.texi.in (TARGET_LOWER_LOCAL_DECL_ALIGNMENT): New\n\thook.\n\t* target.def (lower_local_decl_alignment): New hook.\n\ngcc/cp/ChangeLog:\n\n\tPR target/95237\n\t* decl.c (cp_finish_decl): Call target hook\n\tlower_local_decl_alignment to lower local decl alignment.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/95237\n\t* c-c++-common/pr95237-1.c: New test.\n\t* c-c++-common/pr95237-2.c: New test.\n\t* c-c++-common/pr95237-3.c: New test.\n\t* c-c++-common/pr95237-4.c: New test.\n\t* c-c++-common/pr95237-5.c: New test.\n\t* c-c++-common/pr95237-6.c: New test.\n\t* c-c++-common/pr95237-7.c: New test.\n\t* c-c++-common/pr95237-8.c: New test.\n\t* c-c++-common/pr95237-9.c: New test.", "tree": {"sha": "e6b4dc17bd474f0c42f2d8b9d85a8f6dbdb00dce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e6b4dc17bd474f0c42f2d8b9d85a8f6dbdb00dce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a9d711df36b42b6494b73a90c7ebf050e904493", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a9d711df36b42b6494b73a90c7ebf050e904493", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a9d711df36b42b6494b73a90c7ebf050e904493", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a9d711df36b42b6494b73a90c7ebf050e904493/comments", "author": {"login": "skpgkp1", "id": 33876910, "node_id": "MDQ6VXNlcjMzODc2OTEw", "avatar_url": "https://avatars.githubusercontent.com/u/33876910?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skpgkp1", "html_url": "https://github.com/skpgkp1", "followers_url": "https://api.github.com/users/skpgkp1/followers", "following_url": "https://api.github.com/users/skpgkp1/following{/other_user}", "gists_url": "https://api.github.com/users/skpgkp1/gists{/gist_id}", "starred_url": "https://api.github.com/users/skpgkp1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skpgkp1/subscriptions", "organizations_url": "https://api.github.com/users/skpgkp1/orgs", "repos_url": "https://api.github.com/users/skpgkp1/repos", "events_url": "https://api.github.com/users/skpgkp1/events{/privacy}", "received_events_url": "https://api.github.com/users/skpgkp1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "699f9c0cc1bcc8acfd78c02315c963bf790c874d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/699f9c0cc1bcc8acfd78c02315c963bf790c874d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/699f9c0cc1bcc8acfd78c02315c963bf790c874d"}], "stats": {"total": 173, "additions": 170, "deletions": 3}, "files": [{"sha": "5d6b504fe783b46aa67db11d1de70b3dc5089701", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a9d711df36b42b6494b73a90c7ebf050e904493/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a9d711df36b42b6494b73a90c7ebf050e904493/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=0a9d711df36b42b6494b73a90c7ebf050e904493", "patch": "@@ -5600,6 +5600,13 @@ finish_decl (tree decl, location_t init_loc, tree init,\n \t\t       NULL_TREE, DECL_ATTRIBUTES (decl));\n     }\n \n+  /* This is the last point we can lower alignment so give the target the\n+     chance to do so.  */\n+  if (VAR_P (decl)\n+      && !is_global_var (decl)\n+      && !DECL_HARD_REGISTER (decl))\n+    targetm.lower_local_decl_alignment (decl);\n+\n   invoke_plugin_callbacks (PLUGIN_FINISH_DECL, decl);\n }\n "}, {"sha": "0b95c57b1a0f3133de1aa2c50b85b614c26e20b2", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a9d711df36b42b6494b73a90c7ebf050e904493/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a9d711df36b42b6494b73a90c7ebf050e904493/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=0a9d711df36b42b6494b73a90c7ebf050e904493", "patch": "@@ -223,7 +223,7 @@ extern void init_cumulative_args (CUMULATIVE_ARGS *, tree, rtx, tree, int);\n #ifdef TREE_CODE\n extern int ix86_data_alignment (tree, unsigned int, bool);\n extern unsigned int ix86_local_alignment (tree, machine_mode,\n-\t\t\t\t\t  unsigned int);\n+\t\t\t\t\t  unsigned int, bool = false);\n extern unsigned int ix86_minimum_alignment (tree, machine_mode,\n \t\t\t\t\t    unsigned int);\n extern tree ix86_handle_shared_attribute (tree *, tree, tree, int, bool *);"}, {"sha": "8ea6a4d7ea7ad184942283da3036b274a793ab04", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a9d711df36b42b6494b73a90c7ebf050e904493/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a9d711df36b42b6494b73a90c7ebf050e904493/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=0a9d711df36b42b6494b73a90c7ebf050e904493", "patch": "@@ -16633,6 +16633,16 @@ ix86_data_alignment (tree type, unsigned int align, bool opt)\n   return align;\n }\n \n+/* Implememnt TARGET_LOWER_LOCAL_DECL_ALIGNMENT.  */\n+static void\n+ix86_lower_local_decl_alignment (tree decl)\n+{\n+  unsigned int new_align = ix86_local_alignment (decl, VOIDmode,\n+\t\t\t\t\t\t DECL_ALIGN (decl), true);\n+  if (new_align < DECL_ALIGN (decl))\n+    SET_DECL_ALIGN (decl, new_align);\n+}\n+\n /* Compute the alignment for a local variable or a stack slot.  EXP is\n    the data type or decl itself, MODE is the widest mode available and\n    ALIGN is the alignment that the object would ordinarily have.  The\n@@ -16641,7 +16651,7 @@ ix86_data_alignment (tree type, unsigned int align, bool opt)\n \n unsigned int\n ix86_local_alignment (tree exp, machine_mode mode,\n-\t\t      unsigned int align)\n+\t\t      unsigned int align, bool may_lower)\n {\n   tree type, decl;\n \n@@ -16658,7 +16668,8 @@ ix86_local_alignment (tree exp, machine_mode mode,\n \n   /* Don't do dynamic stack realignment for long long objects with\n      -mpreferred-stack-boundary=2.  */\n-  if (!TARGET_64BIT\n+  if (may_lower\n+      && !TARGET_64BIT\n       && align == 64\n       && ix86_preferred_stack_boundary < 64\n       && (mode == DImode || (type && TYPE_MODE (type) == DImode))\n@@ -23386,6 +23397,9 @@ ix86_run_selftests (void)\n #undef TARGET_CAN_CHANGE_MODE_CLASS\n #define TARGET_CAN_CHANGE_MODE_CLASS ix86_can_change_mode_class\n \n+#undef TARGET_LOWER_LOCAL_DECL_ALIGNMENT\n+#define TARGET_LOWER_LOCAL_DECL_ALIGNMENT ix86_lower_local_decl_alignment\n+\n #undef TARGET_STATIC_RTX_ALIGNMENT\n #define TARGET_STATIC_RTX_ALIGNMENT ix86_static_rtx_alignment\n #undef TARGET_CONSTANT_ALIGNMENT"}, {"sha": "7d717451dc9b0ebe3ceb1fc5df8e7eaf6a4bbc6b", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a9d711df36b42b6494b73a90c7ebf050e904493/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a9d711df36b42b6494b73a90c7ebf050e904493/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=0a9d711df36b42b6494b73a90c7ebf050e904493", "patch": "@@ -8012,6 +8012,13 @@ cp_finish_decl (tree decl, tree init, bool init_const_expr_p,\n \t\t       NULL_TREE, DECL_ATTRIBUTES (decl));\n     }\n \n+  /* This is the last point we can lower alignment so give the target the\n+     chance to do so.  */\n+  if (VAR_P (decl)\n+      && !is_global_var (decl)\n+      && !DECL_HARD_REGISTER (decl))\n+    targetm.lower_local_decl_alignment (decl);\n+\n   invoke_plugin_callbacks (PLUGIN_FINISH_DECL, decl);\n }\n "}, {"sha": "437187694b67e8016aaaa310adf6d2aa32cbc0a8", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a9d711df36b42b6494b73a90c7ebf050e904493/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a9d711df36b42b6494b73a90c7ebf050e904493/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=0a9d711df36b42b6494b73a90c7ebf050e904493", "patch": "@@ -1086,6 +1086,11 @@ On 32-bit ELF the largest supported section alignment in bits is\n @samp{(0x80000000 * 8)}, but this is not representable on 32-bit hosts.\n @end defmac\n \n+@deftypefn {Target Hook} void TARGET_LOWER_LOCAL_DECL_ALIGNMENT (tree @var{decl})\n+Define this hook to lower alignment of local, parm or result\n+decl @samp{(@var{decl})}.\n+@end deftypefn\n+\n @deftypefn {Target Hook} HOST_WIDE_INT TARGET_STATIC_RTX_ALIGNMENT (machine_mode @var{mode})\n This hook returns the preferred alignment in bits for a\n statically-allocated rtx, such as a constant pool entry.  @var{mode}"}, {"sha": "d76c85d580096866d47836de75cd8437080ddfbb", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a9d711df36b42b6494b73a90c7ebf050e904493/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a9d711df36b42b6494b73a90c7ebf050e904493/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=0a9d711df36b42b6494b73a90c7ebf050e904493", "patch": "@@ -1036,6 +1036,8 @@ On 32-bit ELF the largest supported section alignment in bits is\n @samp{(0x80000000 * 8)}, but this is not representable on 32-bit hosts.\n @end defmac\n \n+@hook TARGET_LOWER_LOCAL_DECL_ALIGNMENT\n+\n @hook TARGET_STATIC_RTX_ALIGNMENT\n \n @defmac DATA_ALIGNMENT (@var{type}, @var{basic-align})"}, {"sha": "c11cab8891f9bf3c4c9b4357d7b4b0442560bb41", "filename": "gcc/target.def", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a9d711df36b42b6494b73a90c7ebf050e904493/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a9d711df36b42b6494b73a90c7ebf050e904493/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=0a9d711df36b42b6494b73a90c7ebf050e904493", "patch": "@@ -3350,6 +3350,13 @@ HOOK_VECTOR_END (addr_space)\n #undef HOOK_PREFIX\n #define HOOK_PREFIX \"TARGET_\"\n \n+DEFHOOK\n+(lower_local_decl_alignment,\n+ \"Define this hook to lower alignment of local, parm or result\\n\\\n+decl @samp{(@var{decl})}.\",\n+ void, (tree decl),\n+ hook_void_tree)\n+\n DEFHOOK\n (static_rtx_alignment,\n  \"This hook returns the preferred alignment in bits for a\\n\\"}, {"sha": "8947a9fed26636dad83958c616ac99eedd55673a", "filename": "gcc/testsuite/c-c++-common/pr95237-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a9d711df36b42b6494b73a90c7ebf050e904493/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr95237-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a9d711df36b42b6494b73a90c7ebf050e904493/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr95237-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr95237-1.c?ref=0a9d711df36b42b6494b73a90c7ebf050e904493", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target ia32 } */\n+/* { dg-options \"-mpreferred-stack-boundary=2\" { target { i?86-*-* x86_64-*-* } } } */\n+typedef __UINTPTR_TYPE__ uintptr_t;\n+void __attribute__((noipa)) foo (long long *p, uintptr_t a)\n+{\n+  if ((uintptr_t)p & (a-1))\n+      __builtin_abort ();\n+}\n+int main()\n+{\n+\tlong long x;\n+\tuintptr_t a = __alignof__(x);\n+\tfoo(&x, a);\n+\treturn 0;\n+}"}, {"sha": "87949a9e1220f2ad32347e549dc3ca66fd678030", "filename": "gcc/testsuite/c-c++-common/pr95237-2.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a9d711df36b42b6494b73a90c7ebf050e904493/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr95237-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a9d711df36b42b6494b73a90c7ebf050e904493/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr95237-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr95237-2.c?ref=0a9d711df36b42b6494b73a90c7ebf050e904493", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target ia32 } */\n+/* { dg-options \"-mpreferred-stack-boundary=2\" { target { i?86-*-* x86_64-*-* } } } */\n+long long x;\n+int main()\n+{\n+\tif (__alignof__(x) != 8)\n+\t  __builtin_abort();\n+\treturn 0;\n+}"}, {"sha": "6941b6f154b509c38afb812c71b2ce4b2b357c5d", "filename": "gcc/testsuite/c-c++-common/pr95237-3.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a9d711df36b42b6494b73a90c7ebf050e904493/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr95237-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a9d711df36b42b6494b73a90c7ebf050e904493/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr95237-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr95237-3.c?ref=0a9d711df36b42b6494b73a90c7ebf050e904493", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target ia32 } */\n+/* { dg-options \"-mpreferred-stack-boundary=2\" { target { i?86-*-* x86_64-*-* } } } */\n+int main()\n+{\n+\tlong long x;\n+\tif (__alignof__(x) != 4)\n+\t  __builtin_abort();\n+\treturn 0;\n+}"}, {"sha": "deace53cc26e81ffd447820e74b0b87862e3263c", "filename": "gcc/testsuite/c-c++-common/pr95237-4.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a9d711df36b42b6494b73a90c7ebf050e904493/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr95237-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a9d711df36b42b6494b73a90c7ebf050e904493/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr95237-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr95237-4.c?ref=0a9d711df36b42b6494b73a90c7ebf050e904493", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target ia32 } */\n+/* { dg-options \"-mpreferred-stack-boundary=4\" { target { i?86-*-* x86_64-*-* } } } */\n+int main()\n+{\n+\tlong long x;\n+\tif (__alignof__(x) != 8)\n+\t  __builtin_abort();\n+\treturn 0;\n+}"}, {"sha": "9dc5cfcd73925e46f7e604b7497807c9967a572c", "filename": "gcc/testsuite/c-c++-common/pr95237-5.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a9d711df36b42b6494b73a90c7ebf050e904493/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr95237-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a9d711df36b42b6494b73a90c7ebf050e904493/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr95237-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr95237-5.c?ref=0a9d711df36b42b6494b73a90c7ebf050e904493", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile { target ia32 } } */\n+/* { dg-options \"-mpreferred-stack-boundary=2 -Os -w\" { target { i?86-*-* x86_64-*-* } } } */\n+\n+int a;\n+\n+long long __attribute__((noinline))\n+b (void)\n+{\n+}\n+\n+void\n+c (void)\n+{\n+  if (b())\n+    a = 1;\n+}"}, {"sha": "ce1568fa28219cf75378f3709d09587f46f89960", "filename": "gcc/testsuite/c-c++-common/pr95237-6.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a9d711df36b42b6494b73a90c7ebf050e904493/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr95237-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a9d711df36b42b6494b73a90c7ebf050e904493/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr95237-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr95237-6.c?ref=0a9d711df36b42b6494b73a90c7ebf050e904493", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" { target { i?86-*-* x86_64-*-* } } } */\n+#include <stddef.h>\n+#ifdef  __x86_64__\n+# define EXP_ALIGN 8\n+#else\n+# define EXP_ALIGN 4\n+#endif\n+\n+struct test\n+{\n+  char a;\n+  long long b;\n+};\n+struct test global_var;\n+int main()\n+{\n+  \tstruct test local_var;\n+\tif (__alignof__(global_var) != EXP_ALIGN\n+\t    || __alignof__(local_var) != EXP_ALIGN\n+\t    || offsetof(struct test, b) != EXP_ALIGN)\n+\t  __builtin_abort();\n+\treturn 0;\n+}"}, {"sha": "8410009d00ec55175a2c8ec2ed869cbfb6177ad1", "filename": "gcc/testsuite/c-c++-common/pr95237-7.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a9d711df36b42b6494b73a90c7ebf050e904493/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr95237-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a9d711df36b42b6494b73a90c7ebf050e904493/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr95237-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr95237-7.c?ref=0a9d711df36b42b6494b73a90c7ebf050e904493", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target ia32 } */\n+/* { dg-options \"-mpreferred-stack-boundary=2\" { target { i?86-*-* x86_64-*-* } } } */\n+#include <stddef.h>\n+struct test\n+{\n+  char a;\n+  long long b;\n+};\n+struct test global_var;\n+int main()\n+{\n+  \tstruct test local_var;\n+\tif (__alignof__(global_var) != 4\n+\t    || __alignof__(local_var) != 4\n+\t    || offsetof(struct test, b) != 4)\n+\t  __builtin_abort();\n+\treturn 0;\n+}"}, {"sha": "8ba98abafc92a447f8661c73af44add9217f1522", "filename": "gcc/testsuite/c-c++-common/pr95237-8.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a9d711df36b42b6494b73a90c7ebf050e904493/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr95237-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a9d711df36b42b6494b73a90c7ebf050e904493/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr95237-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr95237-8.c?ref=0a9d711df36b42b6494b73a90c7ebf050e904493", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target ia32 } */\n+/* { dg-options \"-mpreferred-stack-boundary=2\" { target { i?86-*-* x86_64-*-* } } } */\n+int main()\n+{\n+  \textern long long x;\n+\tif (__alignof__(x) != 8)\n+\t  __builtin_abort();\n+\treturn 0;\n+}"}, {"sha": "687517cbc0a4f4a9c65136a0deacc0a6a4c6ea2b", "filename": "gcc/testsuite/c-c++-common/pr95237-9.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a9d711df36b42b6494b73a90c7ebf050e904493/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr95237-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a9d711df36b42b6494b73a90c7ebf050e904493/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr95237-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr95237-9.c?ref=0a9d711df36b42b6494b73a90c7ebf050e904493", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target ia32 } */\n+/* { dg-options \"-mpreferred-stack-boundary=2\" { target { i?86-*-* x86_64-*-* } } } */\n+int main()\n+{\n+\tstatic long long x;\n+\tif (__alignof__(x) != 8)\n+\t  __builtin_abort();\n+\treturn 0;\n+}"}]}