{"sha": "129ef157d4c0f369de9a5966b9f64bf9634e7d83", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTI5ZWYxNTdkNGMwZjM2OWRlOWE1OTY2YjlmNjRiZjk2MzRlN2Q4Mw==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2019-03-13T17:19:43Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2019-03-13T17:19:43Z"}, "message": "PR tree-optimization/89662 - -Warray-bounds ICE on void* arithmetic\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/89662\n\t* tree-vrp.c (vrp_prop::check_mem_ref): Avoid assuming every type\n\thas a size.\n\ngcc/testsuite/ChangeLog:\n\n\tPR tree-optimization/89662\n\t* gcc.dg/Warray-bounds-41.c: New test.\n\nFrom-SVN: r269655", "tree": {"sha": "c07351ab0f320ecab251ed32f87f57451c977354", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c07351ab0f320ecab251ed32f87f57451c977354"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/129ef157d4c0f369de9a5966b9f64bf9634e7d83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/129ef157d4c0f369de9a5966b9f64bf9634e7d83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/129ef157d4c0f369de9a5966b9f64bf9634e7d83", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/129ef157d4c0f369de9a5966b9f64bf9634e7d83/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bd8ea483131f0f92f10703d9ca00e5e8708d1d3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd8ea483131f0f92f10703d9ca00e5e8708d1d3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd8ea483131f0f92f10703d9ca00e5e8708d1d3c"}], "stats": {"total": 55, "additions": 51, "deletions": 4}, "files": [{"sha": "cda44b8e0ffaaed7220a7069bef5651b869b6b3f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/129ef157d4c0f369de9a5966b9f64bf9634e7d83/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/129ef157d4c0f369de9a5966b9f64bf9634e7d83/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=129ef157d4c0f369de9a5966b9f64bf9634e7d83", "patch": "@@ -1,3 +1,9 @@\n+2019-03-13  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/89662\n+\t* tree-vrp.c (vrp_prop::check_mem_ref): Avoid assuming every type\n+\thas a size.\n+\n 2019-03-13  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/89677"}, {"sha": "f4dc0a009d9ba8fd198b9a28773db5fba3b3333e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/129ef157d4c0f369de9a5966b9f64bf9634e7d83/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/129ef157d4c0f369de9a5966b9f64bf9634e7d83/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=129ef157d4c0f369de9a5966b9f64bf9634e7d83", "patch": "@@ -1,3 +1,8 @@\n+2019-03-13  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/89662\n+\t* gcc.dg/Warray-bounds-41.c: New test.\n+\n 2019-03-13  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/63508"}, {"sha": "fd79590282548c5abbb5a894e0aa6184b5170aae", "filename": "gcc/testsuite/gcc.dg/Warray-bounds-41.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/129ef157d4c0f369de9a5966b9f64bf9634e7d83/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-41.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/129ef157d4c0f369de9a5966b9f64bf9634e7d83/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-41.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-41.c?ref=129ef157d4c0f369de9a5966b9f64bf9634e7d83", "patch": "@@ -0,0 +1,33 @@\n+/* PR tree-optimization/89662- -Warray-bounds ICE on void* arithmetic\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall\" } */\n+\n+void* vptr (void *c)\n+{\n+  return c;\n+}\n+\n+void sink (void*);\n+\n+void test_vptr_arith_vla_cst (void)\n+{\n+  int n = 1;\n+  char c[n];\n+  sink (vptr (c) - 1);    /* { dg-warning \"\\\\\\[-Warray-bounds\" } */\n+}\n+\n+void test_vptr_arith_vla_range (int n)\n+{\n+  if (n < 1 || 4 < n)\n+    return;\n+\n+  char c[n];\n+  sink (vptr (c) - 1);    /* { dg-warning \"\\\\\\[-Warray-bounds\" \"pr82608\" { xfail *-*-* } } */\n+}\n+\n+void test_vptr_arith_vla_var (int n)\n+{\n+  char c[n];\n+  sink (vptr (c) - 1);    /* { dg-warning \"\\\\\\[-Warray-bounds\" \"pr82608\" { xfail *-*-* } } */\n+}\n+"}, {"sha": "1092fe045e2a37e9fe321cdd280077b2a94fc398", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/129ef157d4c0f369de9a5966b9f64bf9634e7d83/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/129ef157d4c0f369de9a5966b9f64bf9634e7d83/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=129ef157d4c0f369de9a5966b9f64bf9634e7d83", "patch": "@@ -4718,13 +4718,16 @@ vrp_prop::check_mem_ref (location_t location, tree ref,\n \t{\n \t  /* Extract the element type out of MEM_REF and use its size\n \t     to compute the index to print in the diagnostic; arrays\n-\t     in MEM_REF don't mean anything.   */\n+\t     in MEM_REF don't mean anything.  A type with no size like\n+\t     void is as good as having a size of 1.  */\n \t  tree type = TREE_TYPE (ref);\n \t  while (TREE_CODE (type) == ARRAY_TYPE)\n \t    type = TREE_TYPE (type);\n-\t  tree size = TYPE_SIZE_UNIT (type);\n-\t  offrange[0] = offrange[0] / wi::to_offset (size);\n-\t  offrange[1] = offrange[1] / wi::to_offset (size);\n+\t  if (tree size = TYPE_SIZE_UNIT (type))\n+\t    {\n+\t      offrange[0] = offrange[0] / wi::to_offset (size);\n+\t      offrange[1] = offrange[1] / wi::to_offset (size);\n+\t    }\n \t}\n       else\n \t{"}]}