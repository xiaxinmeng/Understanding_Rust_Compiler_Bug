{"sha": "7e24ffc9244a0ebd7184714782987b6f7628393d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2UyNGZmYzkyNDRhMGViZDcxODQ3MTQ3ODI5ODdiNmY3NjI4MzkzZA==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.se", "date": "1998-09-08T22:48:00Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-09-08T22:48:00Z"}, "message": "expr.c: Corrected comment about what MOVE_RATIO does.\n\n        * expr.c: Corrected comment about what MOVE_RATIO does.\n        * config/alpha/alpha.h: Ditto.\n        * config/1750a/1750a.h: Ditto.\n        * config/clipper/clipper.h: Ditto.\n        * config/i386/i386.h: Ditto.\n\nFrom-SVN: r22339", "tree": {"sha": "a7930603f421fd116223d1d3ca3b7b4b17fd34d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a7930603f421fd116223d1d3ca3b7b4b17fd34d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e24ffc9244a0ebd7184714782987b6f7628393d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e24ffc9244a0ebd7184714782987b6f7628393d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e24ffc9244a0ebd7184714782987b6f7628393d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e24ffc9244a0ebd7184714782987b6f7628393d/comments", "author": null, "committer": null, "parents": [{"sha": "4746e092cc59e722474ff6e87db5172276717660", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4746e092cc59e722474ff6e87db5172276717660", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4746e092cc59e722474ff6e87db5172276717660"}], "stats": {"total": 38, "additions": 25, "deletions": 13}, "files": [{"sha": "8586b042527aefacba3f92642a9d19cb7c5c9dac", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e24ffc9244a0ebd7184714782987b6f7628393d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e24ffc9244a0ebd7184714782987b6f7628393d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7e24ffc9244a0ebd7184714782987b6f7628393d", "patch": "@@ -1,3 +1,11 @@\n+Tue Sep  8 23:46:04 1998  Hans-Peter Nilsson  <hp@axis.se>\n+\n+\t* expr.c: Corrected comment about what MOVE_RATIO does.\n+\t* config/alpha/alpha.h: Ditto.\n+\t* config/1750a/1750a.h: Ditto.\n+\t* config/clipper/clipper.h: Ditto.\n+\t* config/i386/i386.h: Ditto.\n+\n Tue Sep  8 22:56:12 1998  Jeffrey A Law  (law@cygnus.com)\n \n \t* configure.in (m68k-next-nextstep3*): Use collect2."}, {"sha": "0a3aa8e3c98701f34e68e62efa5416f90f760a43", "filename": "gcc/config/1750a/1750a.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e24ffc9244a0ebd7184714782987b6f7628393d/gcc%2Fconfig%2F1750a%2F1750a.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e24ffc9244a0ebd7184714782987b6f7628393d/gcc%2Fconfig%2F1750a%2F1750a.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2F1750a%2F1750a.h?ref=7e24ffc9244a0ebd7184714782987b6f7628393d", "patch": "@@ -854,8 +854,8 @@ enum reg_class { NO_REGS, R2, R0_1, INDEX_REGS, BASE_REGS, ALL_REGS, LIM_REG_CLA\n    in one reasonably fast instruction.  */\n #define MOVE_MAX 65536\n \n-/* MOVE_RATIO is the number of move instructions that is better than a\n-   block move.  */\n+/* If a memory-to-memory move would take MOVE_RATIO or more simple\n+   move-instruction pairs, we will do a movstr or libcall instead.  */\n #define MOVE_RATIO 4\n \n /* Define this if zero-extension is slow (more than one real instruction).  */"}, {"sha": "2021e677895282a68f234789a28d44d9dd416829", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e24ffc9244a0ebd7184714782987b6f7628393d/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e24ffc9244a0ebd7184714782987b6f7628393d/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=7e24ffc9244a0ebd7184714782987b6f7628393d", "patch": "@@ -1586,9 +1586,11 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n #define MOVE_MAX 8\n \n-/* Controls how many units are moved by expr.c before resorting to movstr.\n-   Without byte/word accesses, we want no more than one; with, several single\n-   byte accesses are better.   */\n+/* If a memory-to-memory move would take MOVE_RATIO or more simple\n+   move-instruction pairs, we will do a movstr or libcall instead.\n+\n+   Without byte/word accesses, we want no more than four instructions;\n+   with, several single byte accesses are better.   */\n \n #define MOVE_RATIO  (TARGET_BWX ? 7 : 2)\n "}, {"sha": "8ce8c473f59368ca58fe54ee79c29db3fa12205b", "filename": "gcc/config/clipper/clipper.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e24ffc9244a0ebd7184714782987b6f7628393d/gcc%2Fconfig%2Fclipper%2Fclipper.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e24ffc9244a0ebd7184714782987b6f7628393d/gcc%2Fconfig%2Fclipper%2Fclipper.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fclipper%2Fclipper.h?ref=7e24ffc9244a0ebd7184714782987b6f7628393d", "patch": "@@ -815,8 +815,10 @@ do\t\t\t\t\t\t\t\t\t      \\\n    in one reasonably fast instruction.  */\n #define MOVE_MAX 4\n \n-/* MOVE_RATIO is the number of move instructions that is better than a\n-   block move.  Make this large on clipper, since the block move is very\n+/* If a memory-to-memory move would take MOVE_RATIO or more simple\n+   move-instruction pairs, we will do a movstr or libcall instead.\n+\n+   Make this large on clipper, since the block move is very\n    inefficient with small blocks, and the hard register needs of the\n    block move require much reload work. */\n "}, {"sha": "2cd77544df31d049a3b779027bd2f48926d34eff", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e24ffc9244a0ebd7184714782987b6f7628393d/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e24ffc9244a0ebd7184714782987b6f7628393d/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=7e24ffc9244a0ebd7184714782987b6f7628393d", "patch": "@@ -1890,10 +1890,10 @@ while (0)\n    in one reasonably fast instruction.  */\n #define MOVE_MAX 4\n \n-/* The number of scalar move insns which should be generated instead\n-   of a string move insn or a library call.  Increasing the value\n-   will always make code faster, but eventually incurs high cost in\n-   increased code size.\n+/* If a memory-to-memory move would take MOVE_RATIO or more simple\n+   move-instruction pairs, we will do a movstr or libcall instead.\n+   Increasing the value will always make code faster, but eventually\n+   incurs high cost in increased code size.\n \n    If you don't define this, a reasonable default is used.\n "}, {"sha": "dbf19ff102d158f22ffc9f4acc0cc03890b82854", "filename": "gcc/expr.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e24ffc9244a0ebd7184714782987b6f7628393d/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e24ffc9244a0ebd7184714782987b6f7628393d/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=7e24ffc9244a0ebd7184714782987b6f7628393d", "patch": "@@ -203,8 +203,8 @@ static rtx do_store_flag\tPROTO((tree, rtx, enum machine_mode, int));\n static char direct_load[NUM_MACHINE_MODES];\n static char direct_store[NUM_MACHINE_MODES];\n \n-/* MOVE_RATIO is the number of move instructions that is better than\n-   a block move.  */\n+/* If a memory-to-memory move would take MOVE_RATIO or more simple\n+   move-instruction sequences, we will do a movstr or libcall instead.  */\n \n #ifndef MOVE_RATIO\n #if defined (HAVE_movstrqi) || defined (HAVE_movstrhi) || defined (HAVE_movstrsi) || defined (HAVE_movstrdi) || defined (HAVE_movstrti)"}]}