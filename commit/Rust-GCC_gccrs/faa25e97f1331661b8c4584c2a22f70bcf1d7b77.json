{"sha": "faa25e97f1331661b8c4584c2a22f70bcf1d7b77", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmFhMjVlOTdmMTMzMTY2MWI4YzQ1ODRjMmEyMmY3MGJjZjFkN2I3Nw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1998-05-06T11:41:58Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1998-05-06T11:41:58Z"}, "message": "error.c: Convert to using ctype macros defined in system.h.\n\n        * error.c: Convert to using ctype macros defined in system.h.\n        * method.c: Likewise.\n        * xref.c: Likewise.\n        * lex.c: Likewise.  Also remove redundant system header stuff.\n\nFrom-SVN: r19577", "tree": {"sha": "d3d8da24373c5be0d9dc6b2af4d46fbfbceff37e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d3d8da24373c5be0d9dc6b2af4d46fbfbceff37e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/faa25e97f1331661b8c4584c2a22f70bcf1d7b77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/faa25e97f1331661b8c4584c2a22f70bcf1d7b77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/faa25e97f1331661b8c4584c2a22f70bcf1d7b77", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/faa25e97f1331661b8c4584c2a22f70bcf1d7b77/comments", "author": null, "committer": null, "parents": [{"sha": "f8676b5db3879f6a4302ac559806bdfe40fe129e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8676b5db3879f6a4302ac559806bdfe40fe129e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8676b5db3879f6a4302ac559806bdfe40fe129e"}], "stats": {"total": 57, "additions": 24, "deletions": 33}, "files": [{"sha": "46a83b8e98af7b563b6e53fb5dfa5152d5dd2c40", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faa25e97f1331661b8c4584c2a22f70bcf1d7b77/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faa25e97f1331661b8c4584c2a22f70bcf1d7b77/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=faa25e97f1331661b8c4584c2a22f70bcf1d7b77", "patch": "@@ -1,3 +1,10 @@\n+Wed May  6 14:28:18 1998  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* error.c: Convert to using ctype macros defined in system.h.\n+\t* method.c: Likewise.\n+\t* xref.c: Likewise.\n+\t* lex.c: Likewise.  Also remove redundant system header stuff.\n+\n Wed May  6 06:36:41 1998  Robert Lipe  <robertl@dgii.com>\n \n \t* call.c, class.c, decl.c, decl2.c, errfn.c, error.c, except.c, "}, {"sha": "39f7dd9a748348eef5a6ebc318429a506da03235", "filename": "gcc/cp/error.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faa25e97f1331661b8c4584c2a22f70bcf1d7b77/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faa25e97f1331661b8c4584c2a22f70bcf1d7b77/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=faa25e97f1331661b8c4584c2a22f70bcf1d7b77", "patch": "@@ -1,6 +1,6 @@\n /* Call-backs for C++ error reporting.\n    This code is non-reentrant.\n-   Copyright (C) 1993, 1994, 1995, 1996 Free Software Foundation, Inc.\n+   Copyright (C) 1993, 94-97, 1998 Free Software Foundation, Inc.\n \n    This file is part of GNU CC.\n \n@@ -1143,7 +1143,7 @@ dump_char (c)\n       OB_PUTS (\"\\\\\\\"\");\n       break;\n     default:\n-      if (isprint (c))\n+      if (ISPRINT (c))\n \tOB_PUTC (c);\n       else\n \t{"}, {"sha": "97200fec71648a87b99e52dd72f940da3a980bd8", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 12, "deletions": 28, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faa25e97f1331661b8c4584c2a22f70bcf1d7b77/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faa25e97f1331661b8c4584c2a22f70bcf1d7b77/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=faa25e97f1331661b8c4584c2a22f70bcf1d7b77", "patch": "@@ -1,5 +1,5 @@\n /* Separate lexical analyzer for GNU C++.\n-   Copyright (C) 1987, 89, 92-96, 1997 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 89, 92-97, 1998 Free Software Foundation, Inc.\n    Hacked by Michael Tiemann (tiemann@cygnus.com)\n \n This file is part of GNU CC.\n@@ -46,18 +46,9 @@ Boston, MA 02111-1307, USA.  */\n #endif\n \n #ifdef MULTIBYTE_CHARS\n-#include <stdlib.h>\n #include <locale.h>\n #endif\n \n-#ifdef HAVE_STDLIB_H\n-#ifndef MULTIBYTE_CHARS\n-#include <stdlib.h>\n-#endif\n-#else\n-extern double atof ();\n-#endif\n-\n #define obstack_chunk_alloc xmalloc\n #define obstack_chunk_free free\n \n@@ -2604,13 +2595,6 @@ do_pending_lang_change ()\n     pop_lang_context ();\n }\n \f\n-#if 0\n-#define isalnum(char) (char >= 'a' ? char <= 'z' : char >= '0' ? char <= '9' || (char >= 'A' && char <= 'Z') : 0)\n-#define isdigit(char) (char >= '0' && char <= '9')\n-#else\n-#include <ctype.h>\n-#endif\n-\n #define ENDFILE -1  /* token that represents end-of-file */\n \n /* Read an escape sequence, returning its equivalent as a character,\n@@ -2635,7 +2619,7 @@ readescape (ignore_ptr)\n       while (1)\n \t{\n \t  c = getch ();\n-\t  if (! isxdigit (c))\n+\t  if (! ISXDIGIT (c))\n \t    {\n \t      put_back (c);\n \t      break;\n@@ -3176,7 +3160,7 @@ real_yylex ()\n \t    /* Make this run fast.  We know that we are reading straight\n \t       from FINPUT in this case (since identifiers cannot straddle\n \t       input sources.  */\n-\t    while (isalnum (c) || (c == '_') || c == '$')\n+\t    while (ISALNUM (c) || (c == '_') || c == '$')\n \t      {\n \t\tif (c == '$')\n \t\t  {\n@@ -3206,7 +3190,7 @@ real_yylex ()\n \t    *p++ = c;\n \t    c = getch ();\n \n-\t    while (isalnum (c) || (c == '_') || c == '$')\n+\t    while (ISALNUM (c) || (c == '_') || c == '$')\n \t      {\n \t\tif (c == '$')\n \t\t  {\n@@ -3399,7 +3383,7 @@ real_yylex ()\n \t      }\n \t    error (\"parse error at `..'\");\n \t  }\n-\tif (isdigit (c1))\n+\tif (ISDIGIT (c1))\n \t  {\n \t    put_back (c1);\n \t    goto resume_numerical_scan;\n@@ -3413,7 +3397,7 @@ real_yylex ()\n \t/* Optimize for most frequent case.  */\n       {\n \tregister int c1 = getch ();\n-\tif (! isalnum (c1) && c1 != '.')\n+\tif (! ISALNUM (c1) && c1 != '.')\n \t  {\n \t    /* Terminate string.  */\n \t    token_buffer[0] = c;\n@@ -3478,7 +3462,7 @@ real_yylex ()\n \t/* Read all the digits-and-decimal-points.  */\n \n \twhile (c == '.'\n-\t       || (isalnum (c) && (c != 'l') && (c != 'L')\n+\t       || (ISALNUM (c) && (c != 'l') && (c != 'L')\n \t\t   && (c != 'u') && (c != 'U')\n \t\t   && c != 'i' && c != 'I' && c != 'j' && c != 'J'\n \t\t   && (floatflag == NOT_FLOAT || ((c != 'f') && (c != 'F')))))\n@@ -3507,7 +3491,7 @@ real_yylex ()\n \t\t   only when it is followed by a digit.\n \t\t   Otherwise, unread the following non-digit\n \t\t   and use the '.' as a structural token.  */\n-\t\tif (p == token_buffer + 2 && !isdigit (c))\n+\t\tif (p == token_buffer + 2 && !ISDIGIT (c))\n \t\t  {\n \t\t    if (c == '.')\n \t\t      {\n@@ -3532,7 +3516,7 @@ real_yylex ()\n \t\t/* It is not a decimal point.\n \t\t   It should be a digit (perhaps a hex digit).  */\n \n-\t\tif (isdigit (c))\n+\t\tif (ISDIGIT (c))\n \t\t  {\n \t\t    c = c - '0';\n \t\t  }\n@@ -3614,9 +3598,9 @@ real_yylex ()\n \t\t    *p++ = c;\n \t\t    c = getch ();\n \t\t  }\n-\t\tif (! isdigit (c))\n+\t\tif (! ISDIGIT (c))\n \t\t  error (\"floating constant exponent has no digits\");\n-\t        while (isdigit (c))\n+\t        while (ISDIGIT (c))\n \t\t  {\n \t\t    if (p >= token_buffer + maxtoken - 3)\n \t\t      p = extend_token_buffer (p);\n@@ -3920,7 +3904,7 @@ real_yylex ()\n \t\t    && (unsigned) c >= (1 << width))\n \t\t  warning (\"escape sequence out of range for character\");\n #ifdef MAP_CHARACTER\n-\t\tif (isprint (c))\n+\t\tif (ISPRINT (c))\n \t\t  c = MAP_CHARACTER (c);\n #endif\n \t      }"}, {"sha": "02b1b65a4261adf377377e65298d3f0e7155d4c5", "filename": "gcc/cp/method.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faa25e97f1331661b8c4584c2a22f70bcf1d7b77/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faa25e97f1331661b8c4584c2a22f70bcf1d7b77/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=faa25e97f1331661b8c4584c2a22f70bcf1d7b77", "patch": "@@ -937,7 +937,7 @@ build_qualified_name (decl)\n     {\n       tree id = DECL_ASSEMBLER_NAME (decl);\n       OB_PUTID (id);\n-      if (isdigit (IDENTIFIER_POINTER (id) [IDENTIFIER_LENGTH (id) - 1]))\n+      if (ISDIGIT (IDENTIFIER_POINTER (id) [IDENTIFIER_LENGTH (id) - 1]))\n \tnumeric_output_need_bar = 1;\n       return;\n     }"}, {"sha": "9c530d0132f3f3bd16abc6d01a5df2ecf433198f", "filename": "gcc/cp/xref.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faa25e97f1331661b8c4584c2a22f70bcf1d7b77/gcc%2Fcp%2Fxref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faa25e97f1331661b8c4584c2a22f70bcf1d7b77/gcc%2Fcp%2Fxref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fxref.c?ref=faa25e97f1331661b8c4584c2a22f70bcf1d7b77", "patch": "@@ -1,5 +1,5 @@\n /* Code for handling XREF output from GNU C++.\n-   Copyright (C) 1992, 1993, 1994, 1995, 1997 Free Software Foundation, Inc.\n+   Copyright (C) 1992, 93-97, 1998 Free Software Foundation, Inc.\n    Contributed by Michael Tiemann (tiemann@cygnus.com)\n \n This file is part of GNU CC.\n@@ -715,7 +715,7 @@ simplify_type(typ)\n   int lvl, i;\n \n   i = strlen(typ);\n-  while (i > 0 && isspace(typ[i-1])) typ[--i] = 0;\n+  while (i > 0 && ISSPACE(typ[i-1])) typ[--i] = 0;\n \n   if (i > 7 && STREQL(&typ[i-5], \"const\"))\n     {"}]}