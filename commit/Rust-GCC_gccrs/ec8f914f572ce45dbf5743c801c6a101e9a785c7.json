{"sha": "ec8f914f572ce45dbf5743c801c6a101e9a785c7", "node_id": "C_kwDOANBUbNoAKGVjOGY5MTRmNTcyY2U0NWRiZjU3NDNjODAxYzZhMTAxZTlhNzg1Yzc", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-12-22T00:19:45Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-12-22T10:14:52Z"}, "message": "libstdc++: Add [[nodiscard]] in <chrono>\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/chrono: Use nodiscard attribute.", "tree": {"sha": "816809bda76d782cf11004e2d49582735b963896", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/816809bda76d782cf11004e2d49582735b963896"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec8f914f572ce45dbf5743c801c6a101e9a785c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec8f914f572ce45dbf5743c801c6a101e9a785c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec8f914f572ce45dbf5743c801c6a101e9a785c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec8f914f572ce45dbf5743c801c6a101e9a785c7/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eef81eefcdc2a58111e50eb2162ea1f5becc8004", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eef81eefcdc2a58111e50eb2162ea1f5becc8004", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eef81eefcdc2a58111e50eb2162ea1f5becc8004"}], "stats": {"total": 46, "additions": 29, "deletions": 17}, "files": [{"sha": "33653f8efb1709408aeabe8d3f4708e1614f0fb6", "filename": "libstdc++-v3/include/std/chrono", "status": "modified", "additions": 29, "deletions": 17, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec8f914f572ce45dbf5743c801c6a101e9a785c7/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec8f914f572ce45dbf5743c801c6a101e9a785c7/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono?ref=ec8f914f572ce45dbf5743c801c6a101e9a785c7", "patch": "@@ -128,11 +128,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       using time_point                = chrono::time_point<utc_clock>;\n       static constexpr bool is_steady = false;\n \n+      [[nodiscard]]\n       static time_point\n       now()\n       { return from_sys(system_clock::now()); }\n \n       template<typename _Duration>\n+\t[[nodiscard]]\n \tstatic sys_time<common_type_t<_Duration, seconds>>\n \tto_sys(const utc_time<_Duration>& __t)\n \t{\n@@ -145,6 +147,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n \n       template<typename _Duration>\n+\t[[nodiscard]]\n \tstatic utc_time<common_type_t<_Duration, seconds>>\n \tfrom_sys(const sys_time<_Duration>& __t)\n \t{\n@@ -171,11 +174,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static constexpr bool is_steady = false; // XXX true for CLOCK_TAI?\n \n       // TODO move into lib, use CLOCK_TAI on linux, add extension point.\n+      [[nodiscard]]\n       static time_point\n       now()\n       { return from_utc(utc_clock::now()); }\n \n       template<typename _Duration>\n+\t[[nodiscard]]\n \tstatic utc_time<common_type_t<_Duration, seconds>>\n \tto_utc(const tai_time<_Duration>& __t)\n \t{\n@@ -184,6 +189,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n \n       template<typename _Duration>\n+\t[[nodiscard]]\n \tstatic tai_time<common_type_t<_Duration, seconds>>\n \tfrom_utc(const utc_time<_Duration>& __t)\n \t{\n@@ -208,11 +214,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static constexpr bool is_steady = false; // XXX\n \n       // TODO move into lib, add extension point.\n+      [[nodiscard]]\n       static time_point\n       now()\n       { return from_utc(utc_clock::now()); }\n \n       template<typename _Duration>\n+\t[[nodiscard]]\n \tstatic utc_time<common_type_t<_Duration, seconds>>\n \tto_utc(const gps_time<_Duration>& __t)\n \t{\n@@ -221,6 +229,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n \n       template<typename _Duration>\n+\t[[nodiscard]]\n \tstatic gps_time<common_type_t<_Duration, seconds>>\n \tfrom_utc(const utc_time<_Duration>& __t)\n \t{\n@@ -394,6 +403,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     /// Convert a time point to a different clock.\n     template<typename _DestClock, typename _SourceClock, typename _Duration>\n+      [[nodiscard]]\n       inline auto\n       clock_cast(const time_point<_SourceClock, _Duration>& __t)\n       requires __detail::__clock_convs<_DestClock, _SourceClock, _Duration>\n@@ -2620,6 +2630,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       leap_second(const leap_second&) = default;\n       leap_second& operator=(const leap_second&) = default;\n \n+      [[nodiscard]]\n       constexpr sys_seconds\n       date() const noexcept\n       {\n@@ -2628,6 +2639,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn sys_seconds(-_M_s);\n       }\n \n+      [[nodiscard]]\n       constexpr seconds\n       value() const noexcept\n       {\n@@ -2638,71 +2650,71 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       // This can be defaulted because the database will never contain two\n       // leap_second objects with the same date but different signs.\n-      friend constexpr bool\n+      [[nodiscard]] friend constexpr bool\n       operator==(const leap_second&, const leap_second&) noexcept = default;\n \n-      friend constexpr strong_ordering\n+      [[nodiscard]] friend constexpr strong_ordering\n       operator<=>(const leap_second& __x, const leap_second& __y) noexcept\n       { return __x.date() <=> __y.date(); }\n \n       template<typename _Duration>\n-\tfriend constexpr bool\n+\t[[nodiscard]] friend constexpr bool\n \toperator==(const leap_second& __x,\n \t\t   const sys_time<_Duration>& __y) noexcept\n \t{ return __x.date() == __y; }\n \n       template<typename _Duration>\n-\tfriend constexpr bool\n+\t[[nodiscard]] friend constexpr bool\n \toperator<(const leap_second& __x,\n \t\t  const sys_time<_Duration>& __y) noexcept\n \t{ return __x.date() < __y; }\n \n       template<typename _Duration>\n-\tfriend constexpr bool\n+\t[[nodiscard]] friend constexpr bool\n \toperator<(const sys_time<_Duration>& __x,\n \t\t  const leap_second& __y) noexcept\n \t{ return __x < __y.date(); }\n \n       template<typename _Duration>\n-\tfriend constexpr bool\n+\t[[nodiscard]] friend constexpr bool\n \toperator>(const leap_second& __x,\n \t\t  const sys_time<_Duration>& __y) noexcept\n \t{ return __y < __x.date(); }\n \n       template<typename _Duration>\n-\tfriend constexpr bool\n+\t[[nodiscard]] friend constexpr bool\n \toperator>(const sys_time<_Duration>& __x,\n \t\t  const leap_second& __y) noexcept\n \t{ return __y.date() < __x; }\n \n       template<typename _Duration>\n-\tfriend constexpr bool\n+\t[[nodiscard]] friend constexpr bool\n \toperator<=(const leap_second& __x,\n-\t\t  const sys_time<_Duration>& __y) noexcept\n+\t\t   const sys_time<_Duration>& __y) noexcept\n \t{ return !(__y < __x.date()); }\n \n       template<typename _Duration>\n-\tfriend constexpr bool\n+\t[[nodiscard]] friend constexpr bool\n \toperator<=(const sys_time<_Duration>& __x,\n-\t\t  const leap_second& __y) noexcept\n+\t\t   const leap_second& __y) noexcept\n \t{ return !(__y.date() < __x); }\n \n       template<typename _Duration>\n-\tfriend constexpr bool\n+\t[[nodiscard]] friend constexpr bool\n \toperator>=(const leap_second& __x,\n-\t\t  const sys_time<_Duration>& __y) noexcept\n+\t\t   const sys_time<_Duration>& __y) noexcept\n \t{ return !(__x.date() < __y); }\n \n       template<typename _Duration>\n-\tfriend constexpr bool\n+\t[[nodiscard]] friend constexpr bool\n \toperator>=(const sys_time<_Duration>& __x,\n-\t\t  const leap_second& __y) noexcept\n+\t\t   const leap_second& __y) noexcept\n \t{ return !(__x < __y.date()); }\n \n       template<three_way_comparable_with<seconds> _Duration>\n-\tfriend constexpr auto\n+\t[[nodiscard]] friend constexpr auto\n \toperator<=>(const leap_second& __x,\n-\t\t   const sys_time<_Duration>& __y) noexcept\n+\t\t    const sys_time<_Duration>& __y) noexcept\n \t{ return __x.date() <=> __y; }\n \n     private:"}]}