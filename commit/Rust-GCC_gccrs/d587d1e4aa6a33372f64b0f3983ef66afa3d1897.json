{"sha": "d587d1e4aa6a33372f64b0f3983ef66afa3d1897", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDU4N2QxZTRhYTZhMzMzNzJmNjRiMGYzOTgzZWY2NmFmYTNkMTg5Nw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-11-25T10:48:55Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2019-11-25T10:48:55Z"}, "message": "re PR ada/92362 (double elaboration of expression in Address aspect)\n\n\tPR ada/92362\n\t* gcc-interface/trans.c (gnat_to_gnu) <N_Attribute_Definition_Clause>:\n\tUse a temporary instead of clobbering the result with a freeze node.\n\nFrom-SVN: r278675", "tree": {"sha": "5be921b4dc8697403ff531e31f135ddf88ee3922", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5be921b4dc8697403ff531e31f135ddf88ee3922"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d587d1e4aa6a33372f64b0f3983ef66afa3d1897", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d587d1e4aa6a33372f64b0f3983ef66afa3d1897", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d587d1e4aa6a33372f64b0f3983ef66afa3d1897", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d587d1e4aa6a33372f64b0f3983ef66afa3d1897/comments", "author": null, "committer": null, "parents": [{"sha": "32bef8ff8090a0d108fa14fc4088e55e57a5e6d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32bef8ff8090a0d108fa14fc4088e55e57a5e6d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32bef8ff8090a0d108fa14fc4088e55e57a5e6d5"}], "stats": {"total": 42, "additions": 38, "deletions": 4}, "files": [{"sha": "dc00791e10a263833fa82bd33d76cdcb541a7253", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d587d1e4aa6a33372f64b0f3983ef66afa3d1897/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d587d1e4aa6a33372f64b0f3983ef66afa3d1897/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d587d1e4aa6a33372f64b0f3983ef66afa3d1897", "patch": "@@ -1,3 +1,9 @@\n+2019-11-25  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR ada/92362\n+\t* gcc-interface/trans.c (gnat_to_gnu) <N_Attribute_Definition_Clause>:\n+\tUse a temporary instead of clobbering the result with a freeze node.\n+\n 2019-11-25  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR ada/92575"}, {"sha": "3d6f381492abdd4da62d876b266275b7ab0fb122", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d587d1e4aa6a33372f64b0f3983ef66afa3d1897/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d587d1e4aa6a33372f64b0f3983ef66afa3d1897/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=d587d1e4aa6a33372f64b0f3983ef66afa3d1897", "patch": "@@ -8421,7 +8421,7 @@ gnat_to_gnu (Node_Id gnat_node)\n       gnat_temp = Entity (Name (gnat_node));\n       if (Freeze_Node (gnat_temp))\n \t{\n-\t  tree gnu_address = gnat_to_gnu (Expression (gnat_node));\n+\t  tree gnu_address = gnat_to_gnu (Expression (gnat_node)), gnu_temp;\n \n \t  /* Get the value to use as the address and save it as the equivalent\n \t     for the object; when it is frozen, gnat_to_gnu_entity will do the\n@@ -8431,7 +8431,7 @@ gnat_to_gnu (Node_Id gnat_node)\n \t     of the object is limited and it is initialized with the result of\n \t     a function call.  */\n \t  if (Is_Subprogram (gnat_temp))\n-\t    gnu_result = gnu_address;\n+\t    gnu_temp = gnu_address;\n \t  else\n \t    {\n \t      tree gnu_type = gnat_to_gnu_type (Etype (gnat_temp));\n@@ -8440,11 +8440,11 @@ gnat_to_gnu (Node_Id gnat_node)\n \t      gnu_type\n \t\t= build_reference_type_for_mode (gnu_type, ptr_mode, true);\n \t      gnu_address = convert (gnu_type, gnu_address);\n-\t      gnu_result\n+\t      gnu_temp\n \t\t= build_unary_op (INDIRECT_REF, NULL_TREE, gnu_address);\n \t    }\n \n-\t  save_gnu_tree (gnat_temp, gnu_result, true);\n+\t  save_gnu_tree (gnat_temp, gnu_temp, true);\n \t}\n       break;\n "}, {"sha": "4c0553f0ce823c1d63c8b57b9f7cada25ea5cb17", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d587d1e4aa6a33372f64b0f3983ef66afa3d1897/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d587d1e4aa6a33372f64b0f3983ef66afa3d1897/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d587d1e4aa6a33372f64b0f3983ef66afa3d1897", "patch": "@@ -1,3 +1,7 @@\n+2019-11-25  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/addr14.adb: New test.\n+\n 2019-11-25  Mark Eggleston <mark.eggleston@codethink.com>\n \t    Jim MacArthur <jim.macarthur@codethink.co.uk>\n "}, {"sha": "e92c902f038791ec915561308020718314af5928", "filename": "gcc/testsuite/gnat.dg/addr14.adb", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d587d1e4aa6a33372f64b0f3983ef66afa3d1897/gcc%2Ftestsuite%2Fgnat.dg%2Faddr14.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d587d1e4aa6a33372f64b0f3983ef66afa3d1897/gcc%2Ftestsuite%2Fgnat.dg%2Faddr14.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Faddr14.adb?ref=d587d1e4aa6a33372f64b0f3983ef66afa3d1897", "patch": "@@ -0,0 +1,24 @@\n+--  { dg-do run }\n+\n+with System;\n+\n+procedure Addr14 is\n+\n+  type Arr is array (1 .. 4) of aliased Integer;\n+\n+  A : Arr := (1, 2, 3, 4);\n+  I : Natural := 0;\n+\n+  function Get_Address return System.Address is\n+  begin\n+    I := I + 1;\n+    return A(I)'Address;\n+  end;\n+\n+  Foo : Integer with Address => Get_Address;\n+\n+begin\n+  if Foo /= 1 then\n+    raise Program_Error;\n+  end if;\n+end;"}]}