{"sha": "2f8058688a1a5bd6545e5249c013c10759b15758", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmY4MDU4Njg4YTFhNWJkNjU0NWU1MjQ5YzAxM2MxMDc1OWIxNTc1OA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@unitus.it", "date": "2003-07-04T18:14:27Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2003-07-04T18:14:27Z"}, "message": "valarray_array.h: Fully qualify standard functions with std::, thus avoiding Koenig lookup.\n\n2003-07-04  Paolo Carlini  <pcarlini@unitus.it>\n\n\t* include/bits/valarray_array.h: Fully qualify standard\n\tfunctions with std::, thus avoiding Koenig lookup.\n\t* include/bits/vector.tcc: Likewise.\n\nFrom-SVN: r68927", "tree": {"sha": "8da743e43ce194d8e20e10bb0152e9067c966e73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8da743e43ce194d8e20e10bb0152e9067c966e73"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f8058688a1a5bd6545e5249c013c10759b15758", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f8058688a1a5bd6545e5249c013c10759b15758", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f8058688a1a5bd6545e5249c013c10759b15758", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f8058688a1a5bd6545e5249c013c10759b15758/comments", "author": null, "committer": null, "parents": [{"sha": "a30335e9c43eec42e43dff556d99d5772f183d51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a30335e9c43eec42e43dff556d99d5772f183d51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a30335e9c43eec42e43dff556d99d5772f183d51"}], "stats": {"total": 184, "additions": 95, "deletions": 89}, "files": [{"sha": "c5c12f6c735a680b543f62ca007955dcd44864c1", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f8058688a1a5bd6545e5249c013c10759b15758/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f8058688a1a5bd6545e5249c013c10759b15758/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2f8058688a1a5bd6545e5249c013c10759b15758", "patch": "@@ -1,3 +1,9 @@\n+2003-07-04  Paolo Carlini  <pcarlini@unitus.it>\n+\n+\t* include/bits/valarray_array.h: Fully qualify standard\n+\tfunctions with std::, thus avoiding Koenig lookup.\n+\t* include/bits/vector.tcc: Likewise.\n+\n 2003-07-04  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* include/Makefile.am: Update target_ to host_."}, {"sha": "68aec240b451604c310a0d113c65c3111da75ca9", "filename": "libstdc++-v3/include/bits/valarray_array.h", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f8058688a1a5bd6545e5249c013c10759b15758/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f8058688a1a5bd6545e5249c013c10759b15758/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_array.h?ref=2f8058688a1a5bd6545e5249c013c10759b15758", "patch": "@@ -61,7 +61,7 @@ namespace std\n      __valarray_get_storage(size_t __n)\n      {\n        return static_cast<_Tp*__restrict__>\n-         (__valarray_get_memory(__n * sizeof(_Tp)));\n+         (std::__valarray_get_memory(__n * sizeof(_Tp)));\n      }\n \n   // Return memory to the system\n@@ -87,7 +87,7 @@ namespace std\n        // For fundamental types, it suffices to say 'memset()'\n        inline static void\n        _S_do_it(_Tp* __restrict__ __b, _Tp* __restrict__ __e)\n-       { memset(__b, 0, (__e - __b)*sizeof(_Tp)); }\n+       { std::memset(__b, 0, (__e - __b)*sizeof(_Tp)); }\n      };\n \n   template<typename _Tp>\n@@ -149,7 +149,7 @@ namespace std\n        inline static void\n        _S_do_it(const _Tp* __restrict__ __b, const _Tp* __restrict__ __e,\n                 _Tp* __restrict__ __o)\n-       { memcpy(__o, __b, (__e - __b)*sizeof(_Tp)); }\n+       { std::memcpy(__o, __b, (__e - __b)*sizeof(_Tp)); }\n      };\n \n   template<typename _Tp>\n@@ -231,7 +231,7 @@ namespace std\n      {\n        inline static void\n        _S_do_it(const _Tp* __restrict__ __a, size_t __n, _Tp* __restrict__ __b)\n-       { memcpy (__b, __a, __n * sizeof (_Tp)); }\n+       { std::memcpy (__b, __a, __n * sizeof (_Tp)); }\n      };\n \n   // Copy a plain array __a[<__n>] into a play array __b[<>]\n@@ -379,30 +379,30 @@ namespace std\n   template<typename _Tp>\n      inline void\n      __valarray_fill (_Array<_Tp> __a, size_t __n, const _Tp& __t)\n-     { __valarray_fill (__a._M_data, __n, __t); }\n+     { std::__valarray_fill (__a._M_data, __n, __t); }\n   \n   template<typename _Tp>\n      inline void\n      __valarray_fill (_Array<_Tp> __a, size_t __n, size_t __s, const _Tp& __t)\n-     { __valarray_fill (__a._M_data, __n, __s, __t); }\n+     { std::__valarray_fill (__a._M_data, __n, __s, __t); }\n   \n   template<typename _Tp>\n      inline void\n      __valarray_fill (_Array<_Tp> __a, _Array<size_t> __i, \n                       size_t __n, const _Tp& __t)\n-     { __valarray_fill (__a._M_data, __i._M_data, __n, __t); }\n+     { std::__valarray_fill (__a._M_data, __i._M_data, __n, __t); }\n \n   // Copy a plain array __a[<__n>] into a play array __b[<>]\n   template<typename _Tp>\n      inline void\n      __valarray_copy(_Array<_Tp> __a, size_t __n, _Array<_Tp> __b)\n-     { __valarray_copy(__a._M_data, __n, __b._M_data); }\n+     { std::__valarray_copy(__a._M_data, __n, __b._M_data); }\n   \n   // Copy strided array __a[<__n : __s>] in plain __b[<__n>]\n   template<typename _Tp>\n      inline void\n      __valarray_copy(_Array<_Tp> __a, size_t __n, size_t __s, _Array<_Tp> __b)\n-     { __valarray_copy(__a._M_data, __n, __s, __b._M_data); }\n+     { std::__valarray_copy(__a._M_data, __n, __s, __b._M_data); }\n \n   // Copy a plain array  __a[<__n>] into a strided array __b[<__n : __s>]\n   template<typename _Tp>\n@@ -416,22 +416,22 @@ namespace std\n      inline void\n      __valarray_copy(_Array<_Tp> __a, size_t __n, size_t __s1,\n                      _Array<_Tp> __b, size_t __s2)\n-     { __valarray_copy(__a._M_data, __n, __s1, __b._M_data, __s2); }\n+     { std::__valarray_copy(__a._M_data, __n, __s1, __b._M_data, __s2); }\n \n   \n   // Copy an indexed array __a[__i[<__n>]] in plain array __b[<__n>]\n   template<typename _Tp>\n      inline void\n      __valarray_copy(_Array<_Tp> __a, _Array<size_t> __i, \n                       _Array<_Tp> __b, size_t __n)\n-     { __valarray_copy(__a._M_data, __i._M_data, __b._M_data, __n); }\n+     { std::__valarray_copy(__a._M_data, __i._M_data, __b._M_data, __n); }\n   \n   // Copy a plain array __a[<__n>] in an indexed array __b[__i[<__n>]]\n   template<typename _Tp>\n      inline void\n      __valarray_copy(_Array<_Tp> __a, size_t __n, _Array<_Tp> __b, \n                       _Array<size_t> __i)\n-     { __valarray_copy(__a._M_data, __n, __b._M_data, __i._M_data); }\n+     { std::__valarray_copy(__a._M_data, __n, __b._M_data, __i._M_data); }\n \n   // Copy the __n first elements of an indexed array __src[<__i>] into\n   // another indexed array __dst[<__j>].\n@@ -440,15 +440,15 @@ namespace std\n      __valarray_copy(_Array<_Tp> __src, size_t __n, _Array<size_t> __i,\n                      _Array<_Tp> __dst, _Array<size_t> __j)\n      {\n-       __valarray_copy(__src._M_data, __n, __i._M_data,\n-                       __dst._M_data, __j._M_data);\n+       std::__valarray_copy(__src._M_data, __n, __i._M_data,\n+\t\t\t    __dst._M_data, __j._M_data);\n      }\n \n   template<typename _Tp>\n      inline\n      _Array<_Tp>::_Array (size_t __n)\n        : _M_data(__valarray_get_storage<_Tp>(__n))\n-     { __valarray_default_construct(_M_data, _M_data + __n); }\n+     { std::__valarray_default_construct(_M_data, _M_data + __n); }\n \n   template<typename _Tp>\n      inline\n@@ -462,7 +462,7 @@ namespace std\n      inline\n      _Array<_Tp>::_Array (const _Tp* __restrict__ __b, size_t __s) \n        : _M_data(__valarray_get_storage<_Tp>(__s))\n-     { __valarray_copy_construct(__b, __s, _M_data); }\n+     { std::__valarray_copy_construct(__b, __s, _M_data); }\n \n   template<typename _Tp>\n      inline _Tp*"}, {"sha": "e5fdea82478f3f476bbd55a1db262c0fb6794e7d", "filename": "libstdc++-v3/include/bits/vector.tcc", "status": "modified", "additions": 73, "deletions": 73, "changes": 146, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f8058688a1a5bd6545e5249c013c10759b15758/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f8058688a1a5bd6545e5249c013c10759b15758/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc?ref=2f8058688a1a5bd6545e5249c013c10759b15758", "patch": "@@ -76,7 +76,7 @@ namespace std\n \t  pointer __tmp = _M_allocate_and_copy(__n,\n \t\t\t\t\t       this->_M_start,\n \t\t\t\t\t       this->_M_finish);\n-\t  _Destroy(this->_M_start, this->_M_finish);\n+\t  std::_Destroy(this->_M_start, this->_M_finish);\n \t  _M_deallocate(this->_M_start,\n \t\t\tthis->_M_end_of_storage - this->_M_start);\n \t  this->_M_start = __tmp;\n@@ -93,7 +93,7 @@ namespace std\n       size_type __n = __position - begin();\n       if (this->_M_finish != this->_M_end_of_storage && __position == end())\n       {\n-        _Construct(this->_M_finish, __x);\n+        std::_Construct(this->_M_finish, __x);\n         ++this->_M_finish;\n       }\n       else\n@@ -107,9 +107,9 @@ namespace std\n     erase(iterator __position)\n     {\n       if (__position + 1 != end())\n-        copy(__position + 1, end(), __position);\n+        std::copy(__position + 1, end(), __position);\n       --this->_M_finish;\n-      _Destroy(this->_M_finish);\n+      std::_Destroy(this->_M_finish);\n       return __position;\n     }\n   \n@@ -119,7 +119,7 @@ namespace std\n     erase(iterator __first, iterator __last)\n     {\n       iterator __i(copy(__last, end(), __first));\n-      _Destroy(__i, end());\n+      std::_Destroy(__i, end());\n       this->_M_finish = this->_M_finish - (__last - __first);\n       return __first;\n     }\n@@ -135,7 +135,7 @@ namespace std\n         if (__xlen > capacity())\n         {\n           pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(), __x.end());\n-          _Destroy(this->_M_start, this->_M_finish);\n+          std::_Destroy(this->_M_start, this->_M_finish);\n           _M_deallocate(this->_M_start,\n \t\t\tthis->_M_end_of_storage - this->_M_start);\n           this->_M_start = __tmp;\n@@ -144,12 +144,12 @@ namespace std\n         else if (size() >= __xlen)\n         {\n           iterator __i(copy(__x.begin(), __x.end(), begin()));\n-          _Destroy(__i, end());\n+          std::_Destroy(__i, end());\n         }\n         else\n         {\n-          copy(__x.begin(), __x.begin() + size(), this->_M_start);\n-          uninitialized_copy(__x.begin() + size(), __x.end(), this->_M_finish);\n+          std::copy(__x.begin(), __x.begin() + size(), this->_M_start);\n+          std::uninitialized_copy(__x.begin() + size(), __x.end(), this->_M_finish);\n         }\n         this->_M_finish = this->_M_start + __xlen;\n       }\n@@ -168,9 +168,9 @@ namespace std\n       }\n       else if (__n > size())\n       {\n-        fill(begin(), end(), __val);\n+        std::fill(begin(), end(), __val);\n         this->_M_finish\n-\t  = uninitialized_fill_n(this->_M_finish, __n - size(), __val);\n+\t  = std::uninitialized_fill_n(this->_M_finish, __n - size(), __val);\n       }\n       else\n         erase(fill_n(begin(), __n, __val), end());\n@@ -201,7 +201,7 @@ namespace std\n       if (__len > capacity())\n       {\n         pointer __tmp(_M_allocate_and_copy(__len, __first, __last));\n-        _Destroy(this->_M_start, this->_M_finish);\n+        std::_Destroy(this->_M_start, this->_M_finish);\n         _M_deallocate(this->_M_start,\n \t\t      this->_M_end_of_storage - this->_M_start);\n         this->_M_start = __tmp;\n@@ -210,15 +210,15 @@ namespace std\n       else if (size() >= __len)\n       {\n         iterator __new_finish(copy(__first, __last, this->_M_start));\n-        _Destroy(__new_finish, end());\n+        std::_Destroy(__new_finish, end());\n         this->_M_finish = __new_finish.base();\n       }\n       else\n       {\n         _ForwardIterator __mid = __first;\n-        advance(__mid, size());\n-        copy(__first, __mid, this->_M_start);\n-        this->_M_finish = uninitialized_copy(__mid, __last, this->_M_finish);\n+        std::advance(__mid, size());\n+        std::copy(__first, __mid, this->_M_start);\n+        this->_M_finish = std::uninitialized_copy(__mid, __last, this->_M_finish);\n       }\n     }\n   \n@@ -229,12 +229,12 @@ namespace std\n     {\n       if (this->_M_finish != this->_M_end_of_storage)\n       {\n-        _Construct(this->_M_finish, *(this->_M_finish - 1));\n+        std::_Construct(this->_M_finish, *(this->_M_finish - 1));\n         ++this->_M_finish;\n         _Tp __x_copy = __x;\n-        copy_backward(__position,\n-\t\t      iterator(this->_M_finish-2),\n-\t\t      iterator(this->_M_finish-1));\n+        std::copy_backward(__position,\n+\t\t\t   iterator(this->_M_finish-2),\n+\t\t\t   iterator(this->_M_finish-1));\n         *__position = __x_copy;\n       }\n       else\n@@ -245,22 +245,22 @@ namespace std\n         iterator __new_finish(__new_start);\n         try\n           {\n-            __new_finish = uninitialized_copy(iterator(this->_M_start),\n-\t\t\t\t\t      __position,\n-                                              __new_start);\n-            _Construct(__new_finish.base(), __x);\n+            __new_finish = std::uninitialized_copy(iterator(this->_M_start),\n+\t\t\t\t\t\t   __position,\n+\t\t\t\t\t\t   __new_start);\n+            std::_Construct(__new_finish.base(), __x);\n             ++__new_finish;\n-            __new_finish = uninitialized_copy(__position,\n-\t\t\t\t\t      iterator(this->_M_finish),\n-                                              __new_finish);\n+            __new_finish = std::uninitialized_copy(__position,\n+\t\t\t\t\t\t   iterator(this->_M_finish),\n+\t\t\t\t\t\t   __new_finish);\n           }\n         catch(...)\n           {\n-            _Destroy(__new_start,__new_finish);\n+            std::_Destroy(__new_start,__new_finish);\n             _M_deallocate(__new_start.base(),__len);\n             __throw_exception_again;\n           }\n-        _Destroy(begin(), end());\n+        std::_Destroy(begin(), end());\n         _M_deallocate(this->_M_start,\n \t\t      this->_M_end_of_storage - this->_M_start);\n         this->_M_start = __new_start.base();\n@@ -277,10 +277,10 @@ namespace std\n     {\n       if (_M_finish != _M_end_of_storage)\n       {\n-        _Construct(_M_finish, *(_M_finish - 1));\n+        std::_Construct(_M_finish, *(_M_finish - 1));\n         ++_M_finish;\n-        copy_backward(__position, iterator(_M_finish - 2),\n-                      iterator(_M_finish - 1));\n+        std::copy_backward(__position, iterator(_M_finish - 2),\n+\t\t\t   iterator(_M_finish - 1));\n         *__position = value_type();\n       }\n       else\n@@ -291,20 +291,20 @@ namespace std\n         pointer __new_finish = __new_start;\n         try\n           {\n-            __new_finish = uninitialized_copy(iterator(_M_start), __position,\n-                                              __new_start);\n-            _Construct(__new_finish);\n+            __new_finish = std::uninitialized_copy(iterator(_M_start), __position,\n+\t\t\t\t\t\t   __new_start);\n+            std::_Construct(__new_finish);\n             ++__new_finish;\n-            __new_finish = uninitialized_copy(__position, iterator(_M_finish),\n-                                              __new_finish);\n+            __new_finish = std::uninitialized_copy(__position, iterator(_M_finish),\n+\t\t\t\t\t\t   __new_finish);\n           }\n         catch(...)\n           {\n-            _Destroy(__new_start,__new_finish);\n+            std::_Destroy(__new_start,__new_finish);\n             _M_deallocate(__new_start,__len);\n             __throw_exception_again;\n           }\n-        _Destroy(begin(), end());\n+        std::_Destroy(begin(), end());\n         _M_deallocate(_M_start, _M_end_of_storage - _M_start);\n         _M_start = __new_start;\n         _M_finish = __new_finish;\n@@ -327,22 +327,22 @@ namespace std\n \t   iterator __old_finish(this->_M_finish);\n \t   if (__elems_after > __n)\n \t     {\n-\t       uninitialized_copy(this->_M_finish - __n,\n-\t\t\t\t  this->_M_finish,\n-\t\t\t\t  this->_M_finish);\n+\t       std::uninitialized_copy(this->_M_finish - __n,\n+\t\t\t\t       this->_M_finish,\n+\t\t\t\t       this->_M_finish);\n \t       this->_M_finish += __n;\n-\t       copy_backward(__position, __old_finish - __n, __old_finish);\n-\t       fill(__position, __position + __n, __x_copy);\n+\t       std::copy_backward(__position, __old_finish - __n, __old_finish);\n+\t       std::fill(__position, __position + __n, __x_copy);\n \t     }\n \t   else\n \t     {\n-\t       uninitialized_fill_n(this->_M_finish,\n-\t\t\t\t    __n - __elems_after,\n-\t\t\t\t    __x_copy);\n+\t       std::uninitialized_fill_n(this->_M_finish,\n+\t\t\t\t\t __n - __elems_after,\n+\t\t\t\t\t __x_copy);\n \t       this->_M_finish += __n - __elems_after;\n-\t       uninitialized_copy(__position, __old_finish, this->_M_finish);\n+\t       std::uninitialized_copy(__position, __old_finish, this->_M_finish);\n \t       this->_M_finish += __elems_after;\n-\t       fill(__position, __old_finish, __x_copy);\n+\t       std::fill(__position, __old_finish, __x_copy);\n \t     }\n \t  }\n         else\n@@ -353,19 +353,19 @@ namespace std\n \t    iterator __new_finish(__new_start);\n \t    try\n \t      {\n-\t\t__new_finish = uninitialized_copy(begin(), __position,\n-\t\t\t\t\t\t  __new_start);\n-\t\t__new_finish = uninitialized_fill_n(__new_finish, __n, __x);\n-\t\t__new_finish = uninitialized_copy(__position, end(), \n-\t\t\t\t\t\t  __new_finish);\n+\t\t__new_finish = std::uninitialized_copy(begin(), __position,\n+\t\t\t\t\t\t       __new_start);\n+\t\t__new_finish = std::uninitialized_fill_n(__new_finish, __n, __x);\n+\t\t__new_finish = std::uninitialized_copy(__position, end(), \n+\t\t\t\t\t\t       __new_finish);\n \t      }\n \t    catch(...)\n \t      {\n-\t\t_Destroy(__new_start,__new_finish);\n+\t\tstd::_Destroy(__new_start,__new_finish);\n \t\t_M_deallocate(__new_start.base(),__len);\n \t\t__throw_exception_again;\n \t      }\n-\t    _Destroy(this->_M_start, this->_M_finish);\n+\t    std::_Destroy(this->_M_start, this->_M_finish);\n \t    _M_deallocate(this->_M_start,\n \t\t\t  this->_M_end_of_storage - this->_M_start);\n \t    this->_M_start = __new_start.base();\n@@ -404,22 +404,22 @@ namespace std\n           iterator __old_finish(this->_M_finish);\n           if (__elems_after > __n)\n           {\n-            uninitialized_copy(this->_M_finish - __n,\n-\t\t\t       this->_M_finish,\n-\t\t\t       this->_M_finish);\n+            std::uninitialized_copy(this->_M_finish - __n,\n+\t\t\t\t    this->_M_finish,\n+\t\t\t\t    this->_M_finish);\n             this->_M_finish += __n;\n-            copy_backward(__position, __old_finish - __n, __old_finish);\n-            copy(__first, __last, __position);\n+            std::copy_backward(__position, __old_finish - __n, __old_finish);\n+            std::copy(__first, __last, __position);\n           }\n           else\n           {\n             _ForwardIterator __mid = __first;\n-            advance(__mid, __elems_after);\n-            uninitialized_copy(__mid, __last, this->_M_finish);\n+            std::advance(__mid, __elems_after);\n+            std::uninitialized_copy(__mid, __last, this->_M_finish);\n             this->_M_finish += __n - __elems_after;\n-            uninitialized_copy(__position, __old_finish, this->_M_finish);\n+            std::uninitialized_copy(__position, __old_finish, this->_M_finish);\n             this->_M_finish += __elems_after;\n-            copy(__first, __mid, __position);\n+            std::copy(__first, __mid, __position);\n           }\n         }\n         else\n@@ -430,20 +430,20 @@ namespace std\n           iterator __new_finish(__new_start);\n           try\n             {\n-              __new_finish = uninitialized_copy(iterator(this->_M_start),\n-                                                __position, __new_start);\n-              __new_finish = uninitialized_copy(__first, __last, __new_finish);\n-              __new_finish = uninitialized_copy(__position,\n-\t\t\t\t\t\titerator(this->_M_finish),\n-                                                __new_finish);\n+              __new_finish = std::uninitialized_copy(iterator(this->_M_start),\n+\t\t\t\t\t\t     __position, __new_start);\n+              __new_finish = std::uninitialized_copy(__first, __last, __new_finish);\n+              __new_finish = std::uninitialized_copy(__position,\n+\t\t\t\t\t\t     iterator(this->_M_finish),\n+\t\t\t\t\t\t     __new_finish);\n             }\n           catch(...)\n             {\n-              _Destroy(__new_start,__new_finish);\n+              std::_Destroy(__new_start,__new_finish);\n               _M_deallocate(__new_start.base(), __len);\n               __throw_exception_again;\n             }\n-          _Destroy(this->_M_start, this->_M_finish);\n+          std::_Destroy(this->_M_start, this->_M_finish);\n           _M_deallocate(this->_M_start,\n \t\t\tthis->_M_end_of_storage - this->_M_start);\n           this->_M_start = __new_start.base();"}]}