{"sha": "cef4b65070a67ba1afa3359f21c48e4529ac154b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2VmNGI2NTA3MGE2N2JhMWFmYTMzNTlmMjFjNDhlNDUyOWFjMTU0Yg==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2016-07-08T14:49:37Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2016-07-08T14:49:37Z"}, "message": "re PR target/71806 (PowerPC -mcpu=power9 enables __float128 without an explicit -mfloat128)\n\n[gcc]\n2016-07-08  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\tPR target/71806\n\t* config/rs6000/rs6000-cpus.def (ISA_3_0_MASKS_SERVER): Do not\n\tenable -mfloat128-hardware by default.\n\t(ISA_3_0_MASKS_IEEE): New macro to give all of the VSX options\n\tthat IEEE 128-bit hardware support needs.\n\t* config/rs6000/rs6000.c (rs6000_option_override_internal): If\n\t-mcpu=power9 -mfloat128, enable -mfloat128-hardware by default.\n\tUse ISA_3_0_MASKS_IEEE as the set of options that IEEE 128-bit\n\tfloating point requires.\n\t* doc/invoke.texi (RS/6000 and PowerPC Options): Document\n\t-mfloat128 and -mfloat128-hardware changes.\n\n[gcc/testsuite]\n2016-07-08  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\tPR target/71806\n\t* gcc.target/powerpc/p9-lxvx-stxvx-3.c: Add -mfloat128 option.\n\nFrom-SVN: r238164", "tree": {"sha": "96eebe6ef0657e6a060a3cd1606157920acef1a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/96eebe6ef0657e6a060a3cd1606157920acef1a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cef4b65070a67ba1afa3359f21c48e4529ac154b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cef4b65070a67ba1afa3359f21c48e4529ac154b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cef4b65070a67ba1afa3359f21c48e4529ac154b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cef4b65070a67ba1afa3359f21c48e4529ac154b/comments", "author": null, "committer": null, "parents": [{"sha": "3c3ecf52a6394009877a6771c871603c13fd035f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c3ecf52a6394009877a6771c871603c13fd035f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c3ecf52a6394009877a6771c871603c13fd035f"}], "stats": {"total": 70, "additions": 57, "deletions": 13}, "files": [{"sha": "e2711cc5029e2780d0b1d945c8df40a08da5828f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cef4b65070a67ba1afa3359f21c48e4529ac154b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cef4b65070a67ba1afa3359f21c48e4529ac154b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cef4b65070a67ba1afa3359f21c48e4529ac154b", "patch": "@@ -1,3 +1,17 @@\n+2016-07-08  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\tPR target/71806\n+\t* config/rs6000/rs6000-cpus.def (ISA_3_0_MASKS_SERVER): Do not\n+\tenable -mfloat128-hardware by default.\n+\t(ISA_3_0_MASKS_IEEE): New macro to give all of the VSX options\n+\tthat IEEE 128-bit hardware support needs.\n+\t* config/rs6000/rs6000.c (rs6000_option_override_internal): If\n+\t-mcpu=power9 -mfloat128, enable -mfloat128-hardware by default.\n+\tUse ISA_3_0_MASKS_IEEE as the set of options that IEEE 128-bit\n+\tfloating point requires.\n+\t* doc/invoke.texi (RS/6000 and PowerPC Options): Document\n+\t-mfloat128 and -mfloat128-hardware changes.\n+\n 2016-07-08  Alan Hayward  <alan.hayward@arm.com>\n \n \tPR tree-optimization/71667"}, {"sha": "401088f53043b20e3602672b7c103171aba2c863", "filename": "gcc/config/rs6000/rs6000-cpus.def", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cef4b65070a67ba1afa3359f21c48e4529ac154b/gcc%2Fconfig%2Frs6000%2Frs6000-cpus.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cef4b65070a67ba1afa3359f21c48e4529ac154b/gcc%2Fconfig%2Frs6000%2Frs6000-cpus.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-cpus.def?ref=cef4b65070a67ba1afa3359f21c48e4529ac154b", "patch": "@@ -61,9 +61,9 @@\n \t\t\t\t | OPTION_MASK_UPPER_REGS_SF)\n \n /* Add ISEL back into ISA 3.0, since it is supposed to be a win.  Do not add\n-   P9_MINMAX until the hardware that supports it is available.  */\n+   P9_MINMAX until the hardware that supports it is available.  Do not add\n+   FLOAT128_HW here until we are ready to make -mfloat128 on by default.  */\n #define ISA_3_0_MASKS_SERVER\t(ISA_2_7_MASKS_SERVER\t\t\t\\\n-\t\t\t\t | OPTION_MASK_FLOAT128_HW\t\t\\\n \t\t\t\t | OPTION_MASK_ISEL\t\t\t\\\n \t\t\t\t | OPTION_MASK_MODULO\t\t\t\\\n \t\t\t\t | OPTION_MASK_P9_FUSION\t\t\\\n@@ -72,6 +72,16 @@\n \t\t\t\t | OPTION_MASK_P9_MISC\t\t\t\\\n \t\t\t\t | OPTION_MASK_P9_VECTOR)\n \n+/* Support for the IEEE 128-bit floating point hardware requires a lot of the\n+   VSX instructions that are part of ISA 3.0.  */\n+#define ISA_3_0_MASKS_IEEE\t(OPTION_MASK_VSX\t\t\t\\\n+\t\t\t\t | OPTION_MASK_P8_VECTOR\t\t\\\n+\t\t\t\t | OPTION_MASK_P9_VECTOR\t\t\\\n+\t\t\t\t | OPTION_MASK_DIRECT_MOVE\t\t\\\n+\t\t\t\t | OPTION_MASK_UPPER_REGS_DI\t\t\\\n+\t\t\t\t | OPTION_MASK_UPPER_REGS_DF\t\t\\\n+\t\t\t\t | OPTION_MASK_UPPER_REGS_SF)\n+\n #define POWERPC_7400_MASK\t(OPTION_MASK_PPC_GFXOPT | OPTION_MASK_ALTIVEC)\n \n /* Deal with ports that do not have -mstrict-align.  */"}, {"sha": "99a2e36911b8e8b4d6a11523374958de7d93566c", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cef4b65070a67ba1afa3359f21c48e4529ac154b/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cef4b65070a67ba1afa3359f21c48e4529ac154b/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=cef4b65070a67ba1afa3359f21c48e4529ac154b", "patch": "@@ -4381,25 +4381,28 @@ rs6000_option_override_internal (bool global_init_p)\n       rs6000_isa_flags &= ~(OPTION_MASK_FLOAT128 | OPTION_MASK_FLOAT128_HW);\n     }\n \n+  /* If we have -mfloat128 and full ISA 3.0 support, enable -mfloat128-hardware\n+     by default.  */\n+  if (TARGET_FLOAT128 && !TARGET_FLOAT128_HW\n+      && (rs6000_isa_flags & ISA_3_0_MASKS_IEEE) == ISA_3_0_MASKS_IEEE\n+      && !(rs6000_isa_flags_explicit & OPTION_MASK_FLOAT128_HW))\n+    {\n+      rs6000_isa_flags |= OPTION_MASK_FLOAT128_HW;\n+      if ((rs6000_isa_flags & OPTION_MASK_FLOAT128) != 0)\n+\trs6000_isa_flags_explicit |= OPTION_MASK_FLOAT128_HW;\n+    }\n+\n   /* IEEE 128-bit floating point hardware instructions imply enabling\n      __float128.  */\n   if (TARGET_FLOAT128_HW\n-      && (rs6000_isa_flags & (OPTION_MASK_P9_VECTOR\n-\t\t\t      | OPTION_MASK_DIRECT_MOVE\n-\t\t\t      | OPTION_MASK_UPPER_REGS_DI\n-\t\t\t      | OPTION_MASK_UPPER_REGS_DF\n-\t\t\t      | OPTION_MASK_UPPER_REGS_SF)) == 0)\n+      && (rs6000_isa_flags & ISA_3_0_MASKS_IEEE) != ISA_3_0_MASKS_IEEE)\n     {\n       if ((rs6000_isa_flags_explicit & OPTION_MASK_FLOAT128_HW) != 0)\n \terror (\"-mfloat128-hardware requires full ISA 3.0 support\");\n \n       rs6000_isa_flags &= ~OPTION_MASK_FLOAT128_HW;\n     }\n \n-  else if (TARGET_P9_VECTOR && !TARGET_FLOAT128_HW\n-\t   && (rs6000_isa_flags_explicit & OPTION_MASK_FLOAT128_HW) == 0)\n-    rs6000_isa_flags |= OPTION_MASK_FLOAT128_HW;\n-\n   if (TARGET_FLOAT128_HW\n       && (rs6000_isa_flags_explicit & OPTION_MASK_FLOAT128) == 0)\n     rs6000_isa_flags |= OPTION_MASK_FLOAT128;"}, {"sha": "e185178bf557d3b687a5199121a7b2922f02a181", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cef4b65070a67ba1afa3359f21c48e4529ac154b/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cef4b65070a67ba1afa3359f21c48e4529ac154b/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=cef4b65070a67ba1afa3359f21c48e4529ac154b", "patch": "@@ -20355,16 +20355,28 @@ hardware instructions.\n \n The VSX instruction set (@option{-mvsx}, @option{-mcpu=power7}, or\n @option{-mcpu=power8}) must be enabled to use the @option{-mfloat128}\n-option.  The @code{-mfloat128} option only works on PowerPC 64-bit\n+option.  The @option{-mfloat128} option only works on PowerPC 64-bit\n Linux systems.\n \n+If you use the ISA 3.0 instruction set (@option{-mcpu=power9}), the\n+@option{-mfloat128} option will also enable the generation of ISA 3.0\n+IEEE 128-bit floating point instructions.  Otherwise, IEEE 128-bit\n+floating point will be done with software emulation.\n+\n @item -mfloat128-hardware\n @itemx -mno-float128-hardware\n @opindex mfloat128-hardware\n @opindex mno-float128-hardware\n Enable/disable using ISA 3.0 hardware instructions to support the\n @var{__float128} data type.\n \n+If you use @option{-mfloat128-hardware}, it will enable the option\n+@option{-mfloat128} as well.\n+\n+If you select ISA 3.0 instructions with @option{-mcpu=power9}, but do\n+not use either @option{-mfloat128} or @option{-mfloat128-hardware},\n+the IEEE 128-bit floating point support will not be enabled.\n+\n @item -mmodulo\n @itemx -mno-modulo\n @opindex mmodulo"}, {"sha": "ab2537f22fc73724433d2c87d7232c2447c5f324", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cef4b65070a67ba1afa3359f21c48e4529ac154b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cef4b65070a67ba1afa3359f21c48e4529ac154b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cef4b65070a67ba1afa3359f21c48e4529ac154b", "patch": "@@ -1,3 +1,8 @@\n+2016-07-08  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\tPR target/71806\n+\t* gcc.target/powerpc/p9-lxvx-stxvx-3.c: Add -mfloat128 option.\n+\n 2016-07-08  Alan Hayward  <alan.hayward@arm.com>\n \n \tPR tree-optimization/71667"}, {"sha": "b8a03d30f9a3a4981c0b1746c43d4e65cb0100c9", "filename": "gcc/testsuite/gcc.target/powerpc/p9-lxvx-stxvx-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cef4b65070a67ba1afa3359f21c48e4529ac154b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-lxvx-stxvx-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cef4b65070a67ba1afa3359f21c48e4529ac154b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-lxvx-stxvx-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-lxvx-stxvx-3.c?ref=cef4b65070a67ba1afa3359f21c48e4529ac154b", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile { target { powerpc64le-*-* } } } */\n /* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n-/* { dg-options \"-mcpu=power9 -O3\" } */\n+/* { dg-options \"-mcpu=power9 -O3 -mfloat128\" } */\n /* { dg-require-effective-target powerpc_p9vector_ok } */\n /* { dg-final { scan-assembler \"lxvx\" } } */\n /* { dg-final { scan-assembler \"stxvx\" } } */"}]}