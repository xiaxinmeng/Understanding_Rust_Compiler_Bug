{"sha": "bb80db7b6d673e73279e4315a82548c5c2c7d5f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmI4MGRiN2I2ZDY3M2U3MzI3OWU0MzE1YTgyNTQ4YzVjMmM3ZDVmMA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2005-03-05T17:25:33Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-03-05T17:25:33Z"}, "message": "combine.c (simplify_and_const_int): Use gen_int_mode instead of GEN_INT (trunc_int_for_mode (...)).\n\n\t* combine.c (simplify_and_const_int): Use gen_int_mode instead\n\tof GEN_INT (trunc_int_for_mode (...)).\n\t* loop-iv.c (iv_number_of_iterations): Likewise.\n\t* postreload.c (reload_cse_move2add): Likewise.\n\t* simplify-rtx.c (simplify_const_unary_operation,\n\tsimplify_const_binary_operation): Likewise.\n\t* stor-layout.c (get_mode_bounds): Likewise.\n\nFrom-SVN: r95935", "tree": {"sha": "4288bc0ceecc510bdce1588734c95522f1483990", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4288bc0ceecc510bdce1588734c95522f1483990"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb80db7b6d673e73279e4315a82548c5c2c7d5f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb80db7b6d673e73279e4315a82548c5c2c7d5f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb80db7b6d673e73279e4315a82548c5c2c7d5f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb80db7b6d673e73279e4315a82548c5c2c7d5f0/comments", "author": null, "committer": null, "parents": [{"sha": "60b92d702890eae310fddaf1dac424743ce5292b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60b92d702890eae310fddaf1dac424743ce5292b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60b92d702890eae310fddaf1dac424743ce5292b"}], "stats": {"total": 43, "additions": 22, "deletions": 21}, "files": [{"sha": "e4f46793f1b5101a05d58a5afc82df980658de77", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb80db7b6d673e73279e4315a82548c5c2c7d5f0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb80db7b6d673e73279e4315a82548c5c2c7d5f0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bb80db7b6d673e73279e4315a82548c5c2c7d5f0", "patch": "@@ -21,6 +21,14 @@\n \t* tree-ssa-pre.c (remove_dead_inserted_code): Likewise.\n \t* tree-ssa.c (kill_redundant_phi_nodes): Likewise.\n \n+\t* combine.c (simplify_and_const_int): Use gen_int_mode instead\n+\tof GEN_INT (trunc_int_for_mode (...)).\n+\t* loop-iv.c (iv_number_of_iterations): Likewise.\n+\t* postreload.c (reload_cse_move2add): Likewise.\n+\t* simplify-rtx.c (simplify_const_unary_operation,\n+\tsimplify_const_binary_operation): Likewise.\n+\t* stor-layout.c (get_mode_bounds): Likewise.\n+\n 2005-03-05  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* doc/invoke.texi: Document new MIPS -msym32 and -mno-sym32 options."}, {"sha": "48d7020641cc6873c435b4d90bd769cc047920b5", "filename": "gcc/combine.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb80db7b6d673e73279e4315a82548c5c2c7d5f0/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb80db7b6d673e73279e4315a82548c5c2c7d5f0/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=bb80db7b6d673e73279e4315a82548c5c2c7d5f0", "patch": "@@ -8095,7 +8095,7 @@ simplify_and_const_int (rtx x, enum machine_mode mode, rtx varop,\n   /* If VAROP is a CONST_INT, then we need to apply the mask in CONSTOP\n      to VAROP and return the new constant.  */\n   if (GET_CODE (varop) == CONST_INT)\n-    return GEN_INT (trunc_int_for_mode (INTVAL (varop) & constop, mode));\n+    return gen_int_mode (INTVAL (varop) & constop, mode);\n \n   /* See what bits may be nonzero in VAROP.  Unlike the general case of\n      a call to nonzero_bits, here we don't care about bits outside"}, {"sha": "99b43b74213e69ea9e82e832bf13b9a0a620c6bb", "filename": "gcc/loop-iv.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb80db7b6d673e73279e4315a82548c5c2c7d5f0/gcc%2Floop-iv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb80db7b6d673e73279e4315a82548c5c2c7d5f0/gcc%2Floop-iv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-iv.c?ref=bb80db7b6d673e73279e4315a82548c5c2c7d5f0", "patch": "@@ -2369,8 +2369,7 @@ iv_number_of_iterations (struct loop *loop, rtx insn, rtx condition,\n \n       tmp = simplify_gen_binary (UDIV, mode, tmp1, GEN_INT (d));\n       inv = inverse (s, size);\n-      inv = trunc_int_for_mode (inv, mode);\n-      tmp = simplify_gen_binary (MULT, mode, tmp, GEN_INT (inv));\n+      tmp = simplify_gen_binary (MULT, mode, tmp, gen_int_mode (inv, mode));\n       desc->niter_expr = simplify_gen_binary (AND, mode, tmp, bound);\n     }\n   else"}, {"sha": "1b98c287a977081e6ae5b67b5f5045d1ee7ad97a", "filename": "gcc/postreload.c", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb80db7b6d673e73279e4315a82548c5c2c7d5f0/gcc%2Fpostreload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb80db7b6d673e73279e4315a82548c5c2c7d5f0/gcc%2Fpostreload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpostreload.c?ref=bb80db7b6d673e73279e4315a82548c5c2c7d5f0", "patch": "@@ -1244,10 +1244,8 @@ reload_cse_move2add (rtx first)\n \n \t      if (GET_CODE (src) == CONST_INT && reg_base_reg[regno] < 0)\n \t\t{\n-\t\t  rtx new_src =\n-\t\t    GEN_INT (trunc_int_for_mode (INTVAL (src)\n-\t\t\t\t\t\t - reg_offset[regno],\n-\t\t\t\t\t\t GET_MODE (reg)));\n+\t\t  rtx new_src = gen_int_mode (INTVAL (src) - reg_offset[regno],\n+\t\t\t\t\t      GET_MODE (reg));\n \t\t  /* (set (reg) (plus (reg) (const_int 0))) is not canonical;\n \t\t     use (set (reg) (reg)) instead.\n \t\t     We don't delete this insn, nor do we convert it into a\n@@ -1284,9 +1282,8 @@ reload_cse_move2add (rtx first)\n \t\t\t    {\n \t\t\t      rtx narrow_reg = gen_rtx_REG (narrow_mode,\n \t\t\t\t\t\t\t    REGNO (reg));\n-\t\t\t      rtx narrow_src =\n-\t\t\t\tGEN_INT (trunc_int_for_mode (INTVAL (src),\n-\t\t\t\t\t\t\t     narrow_mode));\n+\t\t\t      rtx narrow_src = gen_int_mode (INTVAL (src),\n+\t\t\t\t\t\t\t     narrow_mode);\n \t\t\t      rtx new_set =\n \t\t\t\tgen_rtx_SET (VOIDmode,\n \t\t\t\t\t     gen_rtx_STRICT_LOW_PART (VOIDmode,\n@@ -1335,10 +1332,10 @@ reload_cse_move2add (rtx first)\n \t\t      HOST_WIDE_INT base_offset = reg_offset[REGNO (src)];\n \t\t      HOST_WIDE_INT regno_offset = reg_offset[regno];\n \t\t      rtx new_src =\n-\t\t\tGEN_INT (trunc_int_for_mode (added_offset\n-\t\t\t\t\t\t     + base_offset\n-\t\t\t\t\t\t     - regno_offset,\n-\t\t\t\t\t\t     GET_MODE (reg)));\n+\t\t\tgen_int_mode (added_offset\n+\t\t\t\t      + base_offset\n+\t\t\t\t      - regno_offset,\n+\t\t\t\t      GET_MODE (reg));\n \t\t      int success = 0;\n \n \t\t      if (new_src == const0_rtx)"}, {"sha": "8a1b9bb4805689ea083ec5cd52560a595258cb70", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb80db7b6d673e73279e4315a82548c5c2c7d5f0/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb80db7b6d673e73279e4315a82548c5c2c7d5f0/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=bb80db7b6d673e73279e4315a82548c5c2c7d5f0", "patch": "@@ -829,9 +829,7 @@ simplify_const_unary_operation (enum rtx_code code, enum machine_mode mode,\n \t  gcc_unreachable ();\n \t}\n \n-      val = trunc_int_for_mode (val, mode);\n-\n-      return GEN_INT (val);\n+      return gen_int_mode (val, mode);\n     }\n \n   /* We can do some operations on integer CONST_DOUBLEs.  Also allow\n@@ -2491,8 +2489,7 @@ simplify_const_binary_operation (enum rtx_code code, enum machine_mode mode,\n \t  gcc_unreachable ();\n \t}\n \n-      val = trunc_int_for_mode (val, mode);\n-      return GEN_INT (val);\n+      return gen_int_mode (val, mode);\n     }\n \n   return NULL_RTX;"}, {"sha": "66395a9c86be0c30be4d0b8a7c4d4eaba631adeb", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb80db7b6d673e73279e4315a82548c5c2c7d5f0/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb80db7b6d673e73279e4315a82548c5c2c7d5f0/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=bb80db7b6d673e73279e4315a82548c5c2c7d5f0", "patch": "@@ -2097,8 +2097,8 @@ get_mode_bounds (enum machine_mode mode, int sign,\n       max_val = ((unsigned HOST_WIDE_INT) 1 << (size - 1) << 1) - 1;\n     }\n \n-  *mmin = GEN_INT (trunc_int_for_mode (min_val, target_mode));\n-  *mmax = GEN_INT (trunc_int_for_mode (max_val, target_mode));\n+  *mmin = gen_int_mode (min_val, target_mode);\n+  *mmax = gen_int_mode (max_val, target_mode);\n }\n \n #include \"gt-stor-layout.h\""}]}