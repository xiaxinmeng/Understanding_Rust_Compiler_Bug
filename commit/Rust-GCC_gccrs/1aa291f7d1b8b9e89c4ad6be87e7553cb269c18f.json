{"sha": "1aa291f7d1b8b9e89c4ad6be87e7553cb269c18f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWFhMjkxZjdkMWI4YjllODljNGFkNmJlODdlNzU1M2NiMjY5YzE4Zg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2011-09-26T09:03:52Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2011-09-26T09:03:52Z"}, "message": "utils.c (maybe_unconstrained_array): Declare TYPE local variable and use it throughout.\n\n\t* gcc-interface/utils.c (maybe_unconstrained_array): Declare TYPE local\n\tvariable and use it throughout.\n\t<UNCONSTRAINED_ARRAY_TYPE>: Add 'break' at the end.\n\t<RECORD_TYPE>: Do not unconditionally convert to the unpadded type as a\n\tfirst step.  Also convert to the unpadded type as a last step.\n\nFrom-SVN: r179186", "tree": {"sha": "0e3583e62b69cf2a93adb229aa6787450b4da6f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0e3583e62b69cf2a93adb229aa6787450b4da6f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1aa291f7d1b8b9e89c4ad6be87e7553cb269c18f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1aa291f7d1b8b9e89c4ad6be87e7553cb269c18f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1aa291f7d1b8b9e89c4ad6be87e7553cb269c18f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1aa291f7d1b8b9e89c4ad6be87e7553cb269c18f/comments", "author": null, "committer": null, "parents": [{"sha": "7d76717db858244602657e6db4920115dae77e3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d76717db858244602657e6db4920115dae77e3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d76717db858244602657e6db4920115dae77e3e"}], "stats": {"total": 95, "additions": 63, "deletions": 32}, "files": [{"sha": "4a4b64ea1217d2bf84084b147ee1a1f0cb07cc56", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aa291f7d1b8b9e89c4ad6be87e7553cb269c18f/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aa291f7d1b8b9e89c4ad6be87e7553cb269c18f/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1aa291f7d1b8b9e89c4ad6be87e7553cb269c18f", "patch": "@@ -1,3 +1,11 @@\n+2011-09-26  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/utils.c (maybe_unconstrained_array): Declare TYPE local\n+\tvariable and use it throughout.\n+\t<UNCONSTRAINED_ARRAY_TYPE>: Add 'break' at the end.\n+\t<RECORD_TYPE>: Do not unconditionally convert to the unpadded type as a\n+\tfirst step.  Also convert to the unpadded type as a last step.\n+\n 2011-09-26  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/gigi.h (create_subprog_decl): Replace TREE_CHAIN with"}, {"sha": "feae636dececc12e748c71f9e0c5c295ccaf8d6b", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 31, "deletions": 32, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aa291f7d1b8b9e89c4ad6be87e7553cb269c18f/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aa291f7d1b8b9e89c4ad6be87e7553cb269c18f/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=1aa291f7d1b8b9e89c4ad6be87e7553cb269c18f", "patch": "@@ -4264,8 +4264,9 @@ tree\n maybe_unconstrained_array (tree exp)\n {\n   enum tree_code code = TREE_CODE (exp);\n+  tree type = TREE_TYPE (exp);\n \n-  switch (TREE_CODE (TREE_TYPE (exp)))\n+  switch (TREE_CODE (type))\n     {\n     case UNCONSTRAINED_ARRAY_TYPE:\n       if (code == UNCONSTRAINED_ARRAY_REF)\n@@ -4274,68 +4275,66 @@ maybe_unconstrained_array (tree exp)\n \t  const bool no_trap = TREE_THIS_NOTRAP (exp);\n \n \t  exp = TREE_OPERAND (exp, 0);\n+\t  type = TREE_TYPE (exp);\n+\n \t  if (TREE_CODE (exp) == COND_EXPR)\n \t    {\n \t      tree op1\n \t\t= build_unary_op (INDIRECT_REF, NULL_TREE,\n \t\t\t\t  build_component_ref (TREE_OPERAND (exp, 1),\n \t\t\t\t\t\t       NULL_TREE,\n-\t\t\t\t\t\t       TYPE_FIELDS\n-\t\t\t\t\t\t       (TREE_TYPE (exp)),\n+\t\t\t\t\t\t       TYPE_FIELDS (type),\n \t\t\t\t\t\t       false));\n \t      tree op2\n \t\t= build_unary_op (INDIRECT_REF, NULL_TREE,\n \t\t\t\t  build_component_ref (TREE_OPERAND (exp, 2),\n \t\t\t\t\t\t       NULL_TREE,\n-\t\t\t\t\t\t       TYPE_FIELDS\n-\t\t\t\t\t\t       (TREE_TYPE (exp)),\n+\t\t\t\t\t\t       TYPE_FIELDS (type),\n \t\t\t\t\t\t       false));\n \n \t      exp = build3 (COND_EXPR,\n-\t\t\t    TREE_TYPE (TREE_TYPE (TYPE_FIELDS\n-\t\t\t\t\t          (TREE_TYPE (exp)))),\n+\t\t\t    TREE_TYPE (TREE_TYPE (TYPE_FIELDS (type))),\n \t\t\t    TREE_OPERAND (exp, 0), op1, op2);\n \t    }\n \t  else\n \t    {\n \t      exp = build_unary_op (INDIRECT_REF, NULL_TREE,\n \t\t\t\t    build_component_ref (exp, NULL_TREE,\n-\t\t\t\t\t\t         TYPE_FIELDS\n-\t\t\t\t\t\t         (TREE_TYPE (exp)),\n+\t\t\t\t\t\t         TYPE_FIELDS (type),\n \t\t\t\t\t\t         false));\n \t      TREE_READONLY (exp) = read_only;\n \t      TREE_THIS_NOTRAP (exp) = no_trap;\n \t    }\n-\n-\t  return exp;\n \t}\n \n       else if (code == NULL_EXPR)\n-\treturn build1 (NULL_EXPR,\n-\t\t       TREE_TYPE (TREE_TYPE (TYPE_FIELDS\n-\t\t\t\t\t     (TREE_TYPE (TREE_TYPE (exp))))),\n-\t\t       TREE_OPERAND (exp, 0));\n+\texp = build1 (NULL_EXPR,\n+\t\t      TREE_TYPE (TREE_TYPE (TYPE_FIELDS (TREE_TYPE (type)))),\n+\t\t      TREE_OPERAND (exp, 0));\n+      break;\n \n     case RECORD_TYPE:\n-      /* If this is a padded type, convert to the unpadded type and see if\n-\t it contains a template.  */\n-      if (TYPE_PADDING_P (TREE_TYPE (exp)))\n+      /* If this is a padded type and it contains a template, convert to the\n+\t unpadded type first.  */\n+      if (TYPE_PADDING_P (type)\n+\t  && TREE_CODE (TREE_TYPE (TYPE_FIELDS (type))) == RECORD_TYPE\n+\t  && TYPE_CONTAINS_TEMPLATE_P (TREE_TYPE (TYPE_FIELDS (type))))\n \t{\n-\t  tree new_exp\n-\t    = convert (TREE_TYPE (TYPE_FIELDS (TREE_TYPE (exp))), exp);\n-\t  if (TREE_CODE (TREE_TYPE (new_exp)) == RECORD_TYPE\n-\t      && TYPE_CONTAINS_TEMPLATE_P (TREE_TYPE (new_exp)))\n-\t    return\n-\t      build_component_ref (new_exp, NULL_TREE,\n-\t\t\t\t   DECL_CHAIN\n-\t\t\t\t   (TYPE_FIELDS (TREE_TYPE (new_exp))),\n-\t\t\t\t   false);\n+\t  exp = convert (TREE_TYPE (TYPE_FIELDS (type)), exp);\n+\t  type = TREE_TYPE (exp);\n+\t}\n+\n+      if (TYPE_CONTAINS_TEMPLATE_P (type))\n+\t{\n+\t  exp = build_component_ref (exp, NULL_TREE,\n+\t\t\t\t     DECL_CHAIN (TYPE_FIELDS (type)),\n+\t\t\t\t     false);\n+\t  type = TREE_TYPE (exp);\n+\n+\t  /* If the array type is padded, convert to the unpadded type.  */\n+\t  if (TYPE_IS_PADDING_P (type))\n+\t    exp = convert (TREE_TYPE (TYPE_FIELDS (type)), exp);\n \t}\n-      else if (TYPE_CONTAINS_TEMPLATE_P (TREE_TYPE (exp)))\n-\treturn\n-\t  build_component_ref (exp, NULL_TREE,\n-\t\t\t       DECL_CHAIN (TYPE_FIELDS (TREE_TYPE (exp))),\n-\t\t\t       false);\n       break;\n \n     default:"}, {"sha": "8f11de15e55379c2002ee5bd6b0a3733853f3c6f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aa291f7d1b8b9e89c4ad6be87e7553cb269c18f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aa291f7d1b8b9e89c4ad6be87e7553cb269c18f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1aa291f7d1b8b9e89c4ad6be87e7553cb269c18f", "patch": "@@ -1,3 +1,8 @@\n+2011-09-26  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/array17.adb: New test.\n+\t* gnat.dg/array17_pkg.ads: New helper.\n+\n 2011-09-25  Jason Merrill  <jason@redhat.com>\n \n \t* g++.dg/cpp0x/nsdmi-defer4.C: New."}, {"sha": "8814ee2dd8d99c78cc1bedcb749166a6f218385e", "filename": "gcc/testsuite/gnat.dg/array17.adb", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aa291f7d1b8b9e89c4ad6be87e7553cb269c18f/gcc%2Ftestsuite%2Fgnat.dg%2Farray17.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aa291f7d1b8b9e89c4ad6be87e7553cb269c18f/gcc%2Ftestsuite%2Fgnat.dg%2Farray17.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Farray17.adb?ref=1aa291f7d1b8b9e89c4ad6be87e7553cb269c18f", "patch": "@@ -0,0 +1,11 @@\n+-- { dg-do compile }\n+\n+with Array17_Pkg; use Array17_Pkg;\n+\n+procedure Array17 is\n+   X : aliased Varray := (1 .. 8 => 1.0);\n+   Y : Varray (1 .. 8) := (others => -1.0);\n+   R : Varray (1 .. 8);\n+begin\n+   R (1 .. 4) := Y (1 .. 4) + X (1 .. 4);\n+end;"}, {"sha": "11ad79f7463be8c1adf7a1288507f41b95113398", "filename": "gcc/testsuite/gnat.dg/array17_pkg.ads", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aa291f7d1b8b9e89c4ad6be87e7553cb269c18f/gcc%2Ftestsuite%2Fgnat.dg%2Farray17_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aa291f7d1b8b9e89c4ad6be87e7553cb269c18f/gcc%2Ftestsuite%2Fgnat.dg%2Farray17_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Farray17_pkg.ads?ref=1aa291f7d1b8b9e89c4ad6be87e7553cb269c18f", "patch": "@@ -0,0 +1,8 @@\n+package Array17_Pkg is\n+\n+   type Varray is array (Integer range <>) of Long_Float;\n+   for Varray'Alignment use 16;\n+\n+   function \"+\" (X, Y : Varray) return Varray;\n+\n+end Array17_Pkg;"}]}