{"sha": "0e2ea9b837fb49cf04ac6ed974c717030d39be44", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGUyZWE5YjgzN2ZiNDljZjA0YWM2ZWQ5NzRjNzE3MDMwZDM5YmU0NA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2005-03-29T22:43:48Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2005-03-29T22:43:48Z"}, "message": "re PR tree-optimization/19108 (ICE initializing arrays)\n\n        PR tree-opt/19108\n        * tree-sra.c (generate_element_init_1): Handle RANGE_EXPR.\n\nFrom-SVN: r97211", "tree": {"sha": "c023723b7301b097f64d950e74ce89f27eae66af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c023723b7301b097f64d950e74ce89f27eae66af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e2ea9b837fb49cf04ac6ed974c717030d39be44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e2ea9b837fb49cf04ac6ed974c717030d39be44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e2ea9b837fb49cf04ac6ed974c717030d39be44", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e2ea9b837fb49cf04ac6ed974c717030d39be44/comments", "author": null, "committer": null, "parents": [{"sha": "c5c713192a7a0c84bfad98d235e51594391c49e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5c713192a7a0c84bfad98d235e51594391c49e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5c713192a7a0c84bfad98d235e51594391c49e1"}], "stats": {"total": 53, "additions": 49, "deletions": 4}, "files": [{"sha": "e3e54f8c0a8db33b7e6ac6719e8944b2db0a09e0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e2ea9b837fb49cf04ac6ed974c717030d39be44/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e2ea9b837fb49cf04ac6ed974c717030d39be44/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0e2ea9b837fb49cf04ac6ed974c717030d39be44", "patch": "@@ -1,3 +1,8 @@\n+2005-03-29  Richard Henderson  <rth@redhat.com>\n+\n+\tPR tree-opt/19108\n+\t* tree-sra.c (generate_element_init_1): Handle RANGE_EXPR.\n+\n 2005-03-29  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* builtin-types.def, c-convert.c, c-format.c, ddg.c, debug.c,"}, {"sha": "206a2bc382bf5c0281a1fdf5877f27654a384f6f", "filename": "gcc/testsuite/g++.dg/opt/pr19108.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e2ea9b837fb49cf04ac6ed974c717030d39be44/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr19108.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e2ea9b837fb49cf04ac6ed974c717030d39be44/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr19108.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr19108.C?ref=0e2ea9b837fb49cf04ac6ed974c717030d39be44", "patch": "@@ -0,0 +1,19 @@\n+// PR tree-optimization/19108\n+// This used to abort due to not handing RANGE_EXPR in SRA.\n+\n+// { dg-do compile }\n+// { dg-options \"-O\" }\n+\n+struct A\n+{\n+    int i[6];\n+    A () : i() {}\n+};\n+\n+struct B\n+{\n+    A a;\n+    B(const A& x) : a(x) {}\n+};\n+\n+B b=A();"}, {"sha": "f8aeebe573e71e69a30ec4f1d0ff896b5ee08e11", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e2ea9b837fb49cf04ac6ed974c717030d39be44/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e2ea9b837fb49cf04ac6ed974c717030d39be44/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=0e2ea9b837fb49cf04ac6ed974c717030d39be44", "patch": "@@ -1639,10 +1639,31 @@ generate_element_init_1 (struct sra_elt *elt, tree init, tree *list_p)\n     case CONSTRUCTOR:\n       for (t = CONSTRUCTOR_ELTS (init); t ; t = TREE_CHAIN (t))\n \t{\n-\t  sub = lookup_element (elt, TREE_PURPOSE (t), NULL, NO_INSERT);\n-\t  if (sub == NULL)\n-\t    continue;\n-\t  result &= generate_element_init_1 (sub, TREE_VALUE (t), list_p);\n+\t  tree purpose = TREE_PURPOSE (t);\n+\t  tree value = TREE_VALUE (t);\n+\n+\t  if (TREE_CODE (purpose) == RANGE_EXPR)\n+\t    {\n+\t      tree lower = TREE_OPERAND (purpose, 0);\n+\t      tree upper = TREE_OPERAND (purpose, 1);\n+\n+\t      while (1)\n+\t\t{\n+\t  \t  sub = lookup_element (elt, lower, NULL, NO_INSERT);\n+\t\t  if (sub != NULL)\n+\t\t    result &= generate_element_init_1 (sub, value, list_p);\n+\t\t  if (tree_int_cst_equal (lower, upper))\n+\t\t    break;\n+\t\t  lower = int_const_binop (PLUS_EXPR, lower,\n+\t\t\t\t\t   integer_one_node, true);\n+\t\t}\n+\t    }\n+\t  else\n+\t    {\n+\t      sub = lookup_element (elt, purpose, NULL, NO_INSERT);\n+\t      if (sub != NULL)\n+\t\tresult &= generate_element_init_1 (sub, value, list_p);\n+\t    }\n \t}\n       break;\n "}]}