{"sha": "7c99923f8c544ec07109e8333acb2c2388c38a1b", "node_id": "C_kwDOANBUbNoAKDdjOTk5MjNmOGM1NDRlYzA3MTA5ZTgzMzNhY2IyYzIzODhjMzhhMWI", "commit": {"author": {"name": "qingzhe huang", "email": "nickhuang99@hotmail.com", "date": "2021-10-01T14:46:35Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-10-01T15:44:47Z"}, "message": "c++: cv-qualified ref introduced by typedef [PR101783]\n\nThe root cause of this bug is that it considers reference with\ncv-qualifiers as an error by generating value for variable \"bad_quals\".\nHowever, this is not correct for case of typedef. Here I quote spec\n[dcl.ref]/1 :\n\"Cv-qualified references are ill-formed except when the cv-qualifiers\nare introduced through the use of a typedef-name ([dcl.typedef],\n[temp.param]) or decltype-specifier ([dcl.type.decltype]),\nin which case the cv-qualifiers are ignored.\"\n\n2021-09-30  qingzhe huang  <nickhuang99@hotmail.com>\n\ngcc/cp/ChangeLog:\n\tPR c++/101783\n\t* tree.c (cp_build_qualified_type_real): Exclude typedef from\n\terror.\n\ngcc/testsuite/ChangeLog:\n\tPR c++/101783\n\t* g++.dg/parse/pr101783.C: New test.", "tree": {"sha": "419bf8cdb8be6ccc0bcdca6911e692c2e23c0a7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/419bf8cdb8be6ccc0bcdca6911e692c2e23c0a7f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c99923f8c544ec07109e8333acb2c2388c38a1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c99923f8c544ec07109e8333acb2c2388c38a1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c99923f8c544ec07109e8333acb2c2388c38a1b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c99923f8c544ec07109e8333acb2c2388c38a1b/comments", "author": {"login": "nickhuang99", "id": 3978787, "node_id": "MDQ6VXNlcjM5Nzg3ODc=", "avatar_url": "https://avatars.githubusercontent.com/u/3978787?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickhuang99", "html_url": "https://github.com/nickhuang99", "followers_url": "https://api.github.com/users/nickhuang99/followers", "following_url": "https://api.github.com/users/nickhuang99/following{/other_user}", "gists_url": "https://api.github.com/users/nickhuang99/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickhuang99/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickhuang99/subscriptions", "organizations_url": "https://api.github.com/users/nickhuang99/orgs", "repos_url": "https://api.github.com/users/nickhuang99/repos", "events_url": "https://api.github.com/users/nickhuang99/events{/privacy}", "received_events_url": "https://api.github.com/users/nickhuang99/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17374dab3eefd282977ad90743c9aff97f2e41ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17374dab3eefd282977ad90743c9aff97f2e41ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17374dab3eefd282977ad90743c9aff97f2e41ce"}], "stats": {"total": 14, "additions": 13, "deletions": 1}, "files": [{"sha": "d67d7856e7c28ed684aba637f22a16830e53aaff", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c99923f8c544ec07109e8333acb2c2388c38a1b/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c99923f8c544ec07109e8333acb2c2388c38a1b/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=7c99923f8c544ec07109e8333acb2c2388c38a1b", "patch": "@@ -1403,11 +1403,18 @@ cp_build_qualified_type_real (tree type,\n   /* A reference or method type shall not be cv-qualified.\n      [dcl.ref], [dcl.fct].  This used to be an error, but as of DR 295\n      (in CD1) we always ignore extra cv-quals on functions.  */\n+\n+  /* [dcl.ref/1] Cv-qualified references are ill-formed except when\n+     the cv-qualifiers are introduced through the use of a typedef-name\n+     ([dcl.typedef], [temp.param]) or decltype-specifier\n+     ([dcl.type.decltype]),in which case the cv-qualifiers are\n+     ignored.  */\n   if (type_quals & (TYPE_QUAL_CONST | TYPE_QUAL_VOLATILE)\n       && (TYPE_REF_P (type)\n \t  || FUNC_OR_METHOD_TYPE_P (type)))\n     {\n-      if (TYPE_REF_P (type))\n+      if (TYPE_REF_P (type)\n+\t  && (!typedef_variant_p (type) || FUNC_OR_METHOD_TYPE_P (type)))\n \tbad_quals |= type_quals & (TYPE_QUAL_CONST | TYPE_QUAL_VOLATILE);\n       type_quals &= ~(TYPE_QUAL_CONST | TYPE_QUAL_VOLATILE);\n     }"}, {"sha": "4e0a435dd0b55a706c2a9057c40580528891f97e", "filename": "gcc/testsuite/g++.dg/parse/pr101783.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c99923f8c544ec07109e8333acb2c2388c38a1b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fpr101783.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c99923f8c544ec07109e8333acb2c2388c38a1b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fpr101783.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fpr101783.C?ref=7c99923f8c544ec07109e8333acb2c2388c38a1b", "patch": "@@ -0,0 +1,5 @@\n+template<class T> struct A{\n+        typedef T& Type;\n+};\n+template<class T> void f(const typename A<T>::Type){}\n+template <> void f<int>(const typename A<int>::Type){}"}]}