{"sha": "f0b7bd41383ace6e68c3527ca02cacad1583c63b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjBiN2JkNDEzODNhY2U2ZTY4YzM1MjdjYTAyY2FjYWQxNTgzYzYzYg==", "commit": {"author": {"name": "Yizhe", "email": "yizhe@pku.edu.cn", "date": "2021-02-26T07:42:39Z"}, "committer": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2021-03-01T10:42:27Z"}, "message": "Fix typo", "tree": {"sha": "0de263aaf1f3a15ab6b1c5c27031aa36bd398699", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0de263aaf1f3a15ab6b1c5c27031aa36bd398699"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f0b7bd41383ace6e68c3527ca02cacad1583c63b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0b7bd41383ace6e68c3527ca02cacad1583c63b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0b7bd41383ace6e68c3527ca02cacad1583c63b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0b7bd41383ace6e68c3527ca02cacad1583c63b/comments", "author": {"login": "YizhePKU", "id": 42838469, "node_id": "MDQ6VXNlcjQyODM4NDY5", "avatar_url": "https://avatars.githubusercontent.com/u/42838469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/YizhePKU", "html_url": "https://github.com/YizhePKU", "followers_url": "https://api.github.com/users/YizhePKU/followers", "following_url": "https://api.github.com/users/YizhePKU/following{/other_user}", "gists_url": "https://api.github.com/users/YizhePKU/gists{/gist_id}", "starred_url": "https://api.github.com/users/YizhePKU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/YizhePKU/subscriptions", "organizations_url": "https://api.github.com/users/YizhePKU/orgs", "repos_url": "https://api.github.com/users/YizhePKU/repos", "events_url": "https://api.github.com/users/YizhePKU/events{/privacy}", "received_events_url": "https://api.github.com/users/YizhePKU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8af0988598c9cee1204f8eef111e3e89beae14d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8af0988598c9cee1204f8eef111e3e89beae14d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8af0988598c9cee1204f8eef111e3e89beae14d"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "1c2097952c21ff36818d3a5d4b66a5e263a3e9c8", "filename": "gcc/rust/backend/rust-compile-expr.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b7bd41383ace6e68c3527ca02cacad1583c63b/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b7bd41383ace6e68c3527ca02cacad1583c63b/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.h?ref=f0b7bd41383ace6e68c3527ca02cacad1583c63b", "patch": "@@ -316,7 +316,7 @@ class CompileExpr : public HIRCompileBase\n     auto location = expr.get_locus ();\n \n     translated\n-      = ctx->get_backend ()->comparision_expression (op, lhs, rhs, location);\n+      = ctx->get_backend ()->comparison_expression (op, lhs, rhs, location);\n   }\n \n   void visit (HIR::LazyBooleanExpr &expr)"}, {"sha": "ad4f7bf4ab8bb614a7bf7fb2810845bba086dcf9", "filename": "gcc/rust/hir/tree/rust-hir-expr.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b7bd41383ace6e68c3527ca02cacad1583c63b/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b7bd41383ace6e68c3527ca02cacad1583c63b/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h?ref=f0b7bd41383ace6e68c3527ca02cacad1583c63b", "patch": "@@ -475,7 +475,7 @@ class ArithmeticOrLogicalExpr : public OperatorExpr\n class ComparisonExpr : public OperatorExpr\n {\n private:\n-  using ExprType = ComparisionOperator;\n+  using ExprType = ComparisonOperator;\n \n   // Note: overloading trait specified in comments\n   ExprType expr_type;"}, {"sha": "2072dfb9abf2b404972626e7fb75ee5803a89603", "filename": "gcc/rust/operator.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b7bd41383ace6e68c3527ca02cacad1583c63b/gcc%2Frust%2Foperator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b7bd41383ace6e68c3527ca02cacad1583c63b/gcc%2Frust%2Foperator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Foperator.h?ref=f0b7bd41383ace6e68c3527ca02cacad1583c63b", "patch": "@@ -23,7 +23,7 @@ enum class ArithmeticOrLogicalOperator\n   RIGHT_SHIFT  // std::ops::Shr\n };\n \n-enum class ComparisionOperator\n+enum class ComparisonOperator\n {\n   EQUAL,\t    // std::cmp::PartialEq::eq\n   NOT_EQUAL,\t    // std::cmp::PartialEq::ne"}, {"sha": "cca341dfa81c915da5777a06c680edb66d823a69", "filename": "gcc/rust/rust-backend.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b7bd41383ace6e68c3527ca02cacad1583c63b/gcc%2Frust%2Frust-backend.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b7bd41383ace6e68c3527ca02cacad1583c63b/gcc%2Frust%2Frust-backend.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-backend.h?ref=f0b7bd41383ace6e68c3527ca02cacad1583c63b", "patch": "@@ -377,8 +377,8 @@ class Backend\n     = 0;\n \n   // Return an expression for the operation LEFT OP RIGHT.\n-  // Supported values of OP are enumerated in ComparisionOperator.\n-  virtual Bexpression *comparision_expression (ComparisionOperator op,\n+  // Supported values of OP are enumerated in ComparisonOperator.\n+  virtual Bexpression *comparison_expression (ComparisonOperator op,\n \t\t\t\t\t       Bexpression *left,\n \t\t\t\t\t       Bexpression *right, Location)\n     = 0;"}, {"sha": "a19ddae193db2dda5a7a1fe2791201c5c6251e3f", "filename": "gcc/rust/rust-gcc.cc", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b7bd41383ace6e68c3527ca02cacad1583c63b/gcc%2Frust%2Frust-gcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b7bd41383ace6e68c3527ca02cacad1583c63b/gcc%2Frust%2Frust-gcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-gcc.cc?ref=f0b7bd41383ace6e68c3527ca02cacad1583c63b", "patch": "@@ -300,7 +300,7 @@ class Gcc_backend : public Backend\n \t\t\t\t\t\t Bexpression *left,\n \t\t\t\t\t\t Bexpression *right, Location);\n \n-  Bexpression *comparision_expression (ComparisionOperator op,\n+  Bexpression *comparison_expression (ComparisonOperator op,\n \t\t\t\t       Bexpression *left, Bexpression *right,\n \t\t\t\t       Location);\n \n@@ -1689,21 +1689,21 @@ operator_to_tree_code (ArithmeticOrLogicalOperator op, bool floating_point)\n }\n \n static enum tree_code\n-operator_to_tree_code (ComparisionOperator op)\n+operator_to_tree_code (ComparisonOperator op)\n {\n   switch (op)\n     {\n-    case ComparisionOperator::EQUAL:\n+    case ComparisonOperator::EQUAL:\n       return EQ_EXPR;\n-    case ComparisionOperator::NOT_EQUAL:\n+    case ComparisonOperator::NOT_EQUAL:\n       return NE_EXPR;\n-    case ComparisionOperator::GREATER_THAN:\n+    case ComparisonOperator::GREATER_THAN:\n       return GT_EXPR;\n-    case ComparisionOperator::LESS_THAN:\n+    case ComparisonOperator::LESS_THAN:\n       return LT_EXPR;\n-    case ComparisionOperator::GREATER_OR_EQUAL:\n+    case ComparisonOperator::GREATER_OR_EQUAL:\n       return GE_EXPR;\n-    case ComparisionOperator::LESS_OR_EQUAL:\n+    case ComparisonOperator::LESS_OR_EQUAL:\n       return LE_EXPR;\n     default:\n       gcc_unreachable ();\n@@ -1809,9 +1809,9 @@ Gcc_backend::arithmetic_or_logical_expression (ArithmeticOrLogicalOperator op,\n   return this->make_expression (new_tree);\n }\n \n-// Return an expression for the comparision operation LEFT OP RIGHT.\n+// Return an expression for the comparison operation LEFT OP RIGHT.\n Bexpression *\n-Gcc_backend::comparision_expression (ComparisionOperator op, Bexpression *left,\n+Gcc_backend::comparison_expression (ComparisonOperator op, Bexpression *left,\n \t\t\t\t     Bexpression *right, Location location)\n {\n   /* Check if either expression is an error, in which case we return an error\n@@ -1821,7 +1821,7 @@ Gcc_backend::comparision_expression (ComparisionOperator op, Bexpression *left,\n   if (left_tree == error_mark_node || right_tree == error_mark_node)\n     return this->error_expression ();\n \n-  /* For comparision operators, the resulting type should be boolean. */\n+  /* For comparison operators, the resulting type should be boolean. */\n   auto tree_type = boolean_type_node;\n   auto tree_code = operator_to_tree_code (op);\n "}]}