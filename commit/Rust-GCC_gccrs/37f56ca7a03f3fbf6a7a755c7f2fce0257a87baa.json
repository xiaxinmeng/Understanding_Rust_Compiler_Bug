{"sha": "37f56ca7a03f3fbf6a7a755c7f2fce0257a87baa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzdmNTZjYTdhMDNmM2ZiZjZhN2E3NTVjN2YyZmNlMDI1N2E4N2JhYQ==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@redhat.com", "date": "2016-05-09T09:44:30Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2016-05-09T09:44:30Z"}, "message": "regrename.c (base_reg_class_for_rename): New static function.\n\n\t* regrename.c (base_reg_class_for_rename): New static function.\n\t(scan_rtx_address, scan_rtx): Use it instead of base_reg_class.\n\nFrom-SVN: r236022", "tree": {"sha": "b49e5245d728f9d91d83df521de020141ea6ef07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b49e5245d728f9d91d83df521de020141ea6ef07"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/37f56ca7a03f3fbf6a7a755c7f2fce0257a87baa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37f56ca7a03f3fbf6a7a755c7f2fce0257a87baa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37f56ca7a03f3fbf6a7a755c7f2fce0257a87baa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37f56ca7a03f3fbf6a7a755c7f2fce0257a87baa/comments", "author": null, "committer": null, "parents": [{"sha": "7a27d38f4e63f2bbfebe046be2d7097d11b24e50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a27d38f4e63f2bbfebe046be2d7097d11b24e50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a27d38f4e63f2bbfebe046be2d7097d11b24e50"}], "stats": {"total": 60, "additions": 46, "deletions": 14}, "files": [{"sha": "0d839de5a77c092d20a5d150675bbec5cb86bf8d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37f56ca7a03f3fbf6a7a755c7f2fce0257a87baa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37f56ca7a03f3fbf6a7a755c7f2fce0257a87baa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=37f56ca7a03f3fbf6a7a755c7f2fce0257a87baa", "patch": "@@ -1,3 +1,8 @@\n+2016-05-09  Bernd Schmidt  <bschmidt@redhat.com>\n+\n+\t* regrename.c (base_reg_class_for_rename): New static function.\n+\t(scan_rtx_address, scan_rtx): Use it instead of base_reg_class.\n+\n 2016-05-08  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* cgraph.c (thunk_adjust): Export."}, {"sha": "54c7768efa226139c340868e42b784fb011a19b9", "filename": "gcc/regrename.c", "status": "modified", "additions": 41, "deletions": 14, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37f56ca7a03f3fbf6a7a755c7f2fce0257a87baa/gcc%2Fregrename.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37f56ca7a03f3fbf6a7a755c7f2fce0257a87baa/gcc%2Fregrename.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregrename.c?ref=37f56ca7a03f3fbf6a7a755c7f2fce0257a87baa", "patch": "@@ -61,7 +61,10 @@\n      5. If a renaming register has been found, it is substituted in the chain.\n \n   Targets can parameterize the pass by specifying a preferred class for the\n-  renaming register for a given (super)class of registers to be renamed.  */\n+  renaming register for a given (super)class of registers to be renamed.\n+\n+  DEBUG_INSNs are treated specially, in particular registers occurring inside\n+  them are treated as requiring ALL_REGS as a class.  */\n \n #if HOST_BITS_PER_WIDE_INT <= MAX_RECOG_OPERANDS\n #error \"Use a different bitmap implementation for untracked_operands.\"\n@@ -1238,6 +1241,19 @@ scan_rtx_reg (rtx_insn *insn, rtx *loc, enum reg_class cl, enum scan_actions act\n     }\n }\n \n+/* A wrapper around base_reg_class which returns ALL_REGS if INSN is a\n+   DEBUG_INSN.  The arguments MODE, AS, CODE and INDEX_CODE are as for\n+   base_reg_class.  */\n+\n+static reg_class\n+base_reg_class_for_rename (rtx_insn *insn, machine_mode mode, addr_space_t as,\n+\t\t\t   rtx_code code, rtx_code index_code)\n+{\n+  if (DEBUG_INSN_P (insn))\n+    return ALL_REGS;\n+  return base_reg_class (mode, as, code, index_code);\n+}\n+\n /* Adapted from find_reloads_address_1.  CL is INDEX_REG_CLASS or\n    BASE_REG_CLASS depending on how the register is being considered.  */\n \n@@ -1343,12 +1359,16 @@ scan_rtx_address (rtx_insn *insn, rtx *loc, enum reg_class cl,\n \t  }\n \n \tif (locI)\n-\t  scan_rtx_address (insn, locI, INDEX_REG_CLASS, action, mode, as);\n+\t  {\n+\t    reg_class iclass = DEBUG_INSN_P (insn) ? ALL_REGS : INDEX_REG_CLASS;\n+\t    scan_rtx_address (insn, locI, iclass, action, mode, as);\n+\t  }\n \tif (locB)\n-\t  scan_rtx_address (insn, locB,\n-\t\t\t    base_reg_class (mode, as, PLUS, index_code),\n-\t\t\t    action, mode, as);\n-\n+\t  {\n+\t    reg_class bclass = base_reg_class_for_rename (insn, mode, as, PLUS,\n+\t\t\t\t\t\t\t  index_code);\n+\t    scan_rtx_address (insn, locB, bclass, action, mode, as);\n+\t  }\n \treturn;\n       }\n \n@@ -1366,10 +1386,13 @@ scan_rtx_address (rtx_insn *insn, rtx *loc, enum reg_class cl,\n       break;\n \n     case MEM:\n-      scan_rtx_address (insn, &XEXP (x, 0),\n-\t\t\tbase_reg_class (GET_MODE (x), MEM_ADDR_SPACE (x),\n-\t\t\t\t\tMEM, SCRATCH),\n-\t\t\taction, GET_MODE (x), MEM_ADDR_SPACE (x));\n+      {\n+\treg_class bclass = base_reg_class_for_rename (insn, GET_MODE (x),\n+\t\t\t\t\t\t      MEM_ADDR_SPACE (x),\n+\t\t\t\t\t\t      MEM, SCRATCH);\n+\tscan_rtx_address (insn, &XEXP (x, 0), bclass, action, GET_MODE (x),\n+\t\t\t  MEM_ADDR_SPACE (x));\n+      }\n       return;\n \n     case REG:\n@@ -1416,10 +1439,14 @@ scan_rtx (rtx_insn *insn, rtx *loc, enum reg_class cl, enum scan_actions action,\n       return;\n \n     case MEM:\n-      scan_rtx_address (insn, &XEXP (x, 0),\n-\t\t\tbase_reg_class (GET_MODE (x), MEM_ADDR_SPACE (x),\n-\t\t\t\t\tMEM, SCRATCH),\n-\t\t\taction, GET_MODE (x), MEM_ADDR_SPACE (x));\n+      {\n+\treg_class bclass = base_reg_class_for_rename (insn, GET_MODE (x),\n+\t\t\t\t\t\t      MEM_ADDR_SPACE (x),\n+\t\t\t\t\t\t      MEM, SCRATCH);\n+\n+\tscan_rtx_address (insn, &XEXP (x, 0), bclass, action, GET_MODE (x),\n+\t\t\t  MEM_ADDR_SPACE (x));\n+      }\n       return;\n \n     case SET:"}]}