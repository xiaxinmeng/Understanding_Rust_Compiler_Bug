{"sha": "a96d8d67d0073a7031c0712bc3fb7759417b2125", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTk2ZDhkNjdkMDA3M2E3MDMxYzA3MTJiYzNmYjc3NTk0MTdiMjEyNQ==", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-06-29T14:52:58Z"}, "committer": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-06-29T18:57:01Z"}, "message": "Fix MINUS_EXPR relations.\n\nFlesh out and correct relations for both wrapping and non-wrapping values.\n\n\tgcc/\n\tPR tree-optimization/101254\n\t* range-op.cc (operator_minus::op1_op2_relation_effect): Check for\n\twrapping/non-wrapping when setting the result range.\n\n\tgcc/testsuite\n\t* gcc.dg/pr101254.c: New.", "tree": {"sha": "c97b8101babc4728956d07cc914a8b9863a800ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c97b8101babc4728956d07cc914a8b9863a800ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a96d8d67d0073a7031c0712bc3fb7759417b2125", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a96d8d67d0073a7031c0712bc3fb7759417b2125", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a96d8d67d0073a7031c0712bc3fb7759417b2125", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a96d8d67d0073a7031c0712bc3fb7759417b2125/comments", "author": null, "committer": null, "parents": [{"sha": "604dce2d74d3417970e23e7ad38322d1adbca2e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/604dce2d74d3417970e23e7ad38322d1adbca2e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/604dce2d74d3417970e23e7ad38322d1adbca2e2"}], "stats": {"total": 91, "additions": 74, "deletions": 17}, "files": [{"sha": "97b9843e095035bdb94d9b02a531599ab9e8a5c3", "filename": "gcc/range-op.cc", "status": "modified", "additions": 47, "deletions": 17, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a96d8d67d0073a7031c0712bc3fb7759417b2125/gcc%2Frange-op.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a96d8d67d0073a7031c0712bc3fb7759417b2125/gcc%2Frange-op.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frange-op.cc?ref=a96d8d67d0073a7031c0712bc3fb7759417b2125", "patch": "@@ -1314,24 +1314,54 @@ operator_minus::op1_op2_relation_effect (irange &lhs_range, tree type,\n   unsigned prec = TYPE_PRECISION (type);\n   signop sgn = TYPE_SIGN (type);\n \n-  switch (rel)\n+  // == and != produce [0,0] and ~[0,0] regardless of wrapping.\n+  if (rel == EQ_EXPR)\n+    rel_range = int_range<2> (type, wi::zero (prec), wi::zero (prec));\n+  else if (rel == NE_EXPR)\n+    rel_range = int_range<2> (type, wi::zero (prec), wi::zero (prec),\n+\t\t\t      VR_ANTI_RANGE);\n+  else if (TYPE_OVERFLOW_WRAPS (type))\n     {\n-      // op1 > op2,  op1 - op2 can be restricted to  [1, max]\n-      case GT_EXPR:\n-\trel_range = int_range<2> (type, wi::one (prec),\n-\t\t\t\t  wi::max_value (prec, sgn));\n-\tbreak;\n-      // op1 >= op2,  op1 - op2 can be restricted to  [0, max]\n-      case GE_EXPR:\n-\trel_range = int_range<2> (type, wi::zero (prec),\n-\t\t\t\t  wi::max_value (prec, sgn));\n-\tbreak;\n-      // op1 == op2,  op1 - op2 can be restricted to  [0, 0]\n-      case EQ_EXPR:\n-\trel_range = int_range<2> (type, wi::zero (prec), wi::zero (prec));\n-\tbreak;\n-      default:\n-\treturn false;\n+      switch (rel)\n+\t{\n+\t  // For wrapping signed values and unsigned, if op1 > op2 or\n+\t  // op1 < op2, then op1 - op2 can be restricted to ~[0, 0].\n+\t  case GT_EXPR:\n+\t  case LT_EXPR:\n+\t      rel_range = int_range<2> (type, wi::zero (prec), wi::zero (prec),\n+\t\t\t\t\tVR_ANTI_RANGE);\n+\t    break;\n+\t  default:\n+\t    return false;\n+\t}\n+    }\n+  else\n+    {\n+      switch (rel)\n+\t{\n+\t  // op1 > op2, op1 - op2 can be restricted to [1, +INF]\n+\t  case GT_EXPR:\n+\t    rel_range = int_range<2> (type, wi::one (prec),\n+\t\t\t\t      wi::max_value (prec, sgn));\n+\t    break;\n+\t  // op1 >= op2, op1 - op2 can be restricted to [0, +INF]\n+\t  case GE_EXPR:\n+\t    rel_range = int_range<2> (type, wi::zero (prec),\n+\t\t\t\t      wi::max_value (prec, sgn));\n+\t    break;\n+\t  // op1 < op2, op1 - op2 can be restricted to [-INF, -1]\n+\t  case LT_EXPR:\n+\t    rel_range = int_range<2> (type, wi::min_value (prec, sgn),\n+\t\t\t\t      wi::minus_one (prec));\n+\t    break;\n+\t  // op1 <= op2, op1 - op2 can be restricted to [-INF, 0]\n+\t  case LE_EXPR:\n+\t    rel_range = int_range<2> (type, wi::min_value (prec, sgn),\n+\t\t\t\t      wi::zero (prec));\n+\t    break;\n+\t  default:\n+\t    return false;\n+\t}\n     }\n   lhs_range.intersect (rel_range);\n   return true;"}, {"sha": "b2460ed86f3ddff24a0f4a1c92c62201e5779e1a", "filename": "gcc/testsuite/gcc.dg/pr101254.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a96d8d67d0073a7031c0712bc3fb7759417b2125/gcc%2Ftestsuite%2Fgcc.dg%2Fpr101254.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a96d8d67d0073a7031c0712bc3fb7759417b2125/gcc%2Ftestsuite%2Fgcc.dg%2Fpr101254.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr101254.c?ref=a96d8d67d0073a7031c0712bc3fb7759417b2125", "patch": "@@ -0,0 +1,27 @@\n+/* PR tree-optimization/101254 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fwrapv\" } */\n+\n+int\n+foo (long long imin, long long imax)\n+{\n+  if (imin > imax)\n+    return 0;\n+  else if (imax - imin < 0 || (imax - imin) + 1 < 0)\n+    return 0;\n+  return 1;\n+}\n+\n+int\n+main ()\n+{\n+  long long imax = __LONG_LONG_MAX__;\n+  long long imin = -imax - 1; \n+  if (!foo (-10, 10))\n+    __builtin_abort ();\n+  if (foo (-10, imax))\n+    __builtin_abort ();\n+  if (foo (imin, imax))\n+    __builtin_abort ();\n+  return 0;\n+}"}]}