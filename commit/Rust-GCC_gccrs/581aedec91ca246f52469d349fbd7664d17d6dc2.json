{"sha": "581aedec91ca246f52469d349fbd7664d17d6dc2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTgxYWVkZWM5MWNhMjQ2ZjUyNDY5ZDM0OWZiZDc2NjRkMTdkNmRjMg==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2013-09-10T12:29:58Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2013-09-10T12:29:58Z"}, "message": "re PR tree-optimization/58343 (ICE in dfs_enumerate_from, at cfganal.c:1036)\n\n\tPR tree-optimization/58343\n\t* tree-ssa-threadupdate.c (thread_block): Identify and disable\n\tjump threading requests through loop headers buried in the middle\n\tof a jump threading path.\n\n\t* tree-ssa-threadedge.c (thread_around_empty_blocks): Fix thinko\n\tin return value/type.\n\n\t* gcc.c-torture/compile/pr58343.c: New test.\n\nFrom-SVN: r202441", "tree": {"sha": "a528f05814b7721c32a5846b1aa61eacc0b393d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a528f05814b7721c32a5846b1aa61eacc0b393d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/581aedec91ca246f52469d349fbd7664d17d6dc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/581aedec91ca246f52469d349fbd7664d17d6dc2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/581aedec91ca246f52469d349fbd7664d17d6dc2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/581aedec91ca246f52469d349fbd7664d17d6dc2/comments", "author": null, "committer": null, "parents": [{"sha": "84cf4ab655292038d1371a801cbffb9fc6b6ecd0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84cf4ab655292038d1371a801cbffb9fc6b6ecd0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84cf4ab655292038d1371a801cbffb9fc6b6ecd0"}], "stats": {"total": 65, "additions": 58, "deletions": 7}, "files": [{"sha": "4607dd63a68085bb5ad41c8336af95cafc2d4b61", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/581aedec91ca246f52469d349fbd7664d17d6dc2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/581aedec91ca246f52469d349fbd7664d17d6dc2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=581aedec91ca246f52469d349fbd7664d17d6dc2", "patch": "@@ -1,3 +1,13 @@\n+2013-09-10  Jeff Law  <law@redhat.com>\n+\n+\tPR tree-optimization/58343\n+\t* tree-ssa-threadupdate.c (thread_block): Identify and disable\n+\tjump threading requests through loop headers buried in the middle\n+\tof a jump threading path.\n+\n+\t* tree-ssa-threadedge.c (thread_around_empty_blocks): Fix thinko\n+\tin return value/type.\n+\n 2013-09-10  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/58365"}, {"sha": "1e5f483d20ada3fcb5e2b7a837613d1e84eb673f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/581aedec91ca246f52469d349fbd7664d17d6dc2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/581aedec91ca246f52469d349fbd7664d17d6dc2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=581aedec91ca246f52469d349fbd7664d17d6dc2", "patch": "@@ -1,3 +1,7 @@\n+2013-09-10  Jeff Law  <law@redhat.com>\n+\n+\t* gcc.c-torture/compile/pr58343.c: New test.\n+\n 2013-09-10  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/58365"}, {"sha": "cdd2ce9f4a62c38df53495de1fd0d45eca13a3ce", "filename": "gcc/testsuite/gcc.c-torture/compile/pr58343.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/581aedec91ca246f52469d349fbd7664d17d6dc2/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr58343.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/581aedec91ca246f52469d349fbd7664d17d6dc2/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr58343.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr58343.c?ref=581aedec91ca246f52469d349fbd7664d17d6dc2", "patch": "@@ -0,0 +1,15 @@\n+int a;\n+\n+int main ()\n+{\n+  int b = a; \n+\n+  for (a = 1; a > 0; a--)\n+    ;\n+\n+ lbl:\n+  if (b && a)\n+    goto lbl; \n+\n+  return 0;\n+}"}, {"sha": "14bc4e37329d8af16f1e1ce0e6d909d87354b06e", "filename": "gcc/tree-ssa-threadedge.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/581aedec91ca246f52469d349fbd7664d17d6dc2/gcc%2Ftree-ssa-threadedge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/581aedec91ca246f52469d349fbd7664d17d6dc2/gcc%2Ftree-ssa-threadedge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadedge.c?ref=581aedec91ca246f52469d349fbd7664d17d6dc2", "patch": "@@ -764,7 +764,7 @@ thread_around_empty_blocks (edge taken_edge,\n      when threading.  Thus they can not have visible side effects such\n      as PHI nodes.  */\n   if (!gsi_end_p (gsi_start_phis (bb)))\n-    return NULL;\n+    return false;\n \n   /* Skip over DEBUG statements at the start of the block.  */\n   gsi = gsi_start_nondebug_bb (bb);"}, {"sha": "3c3d3bc80f0aeab7cefcf3e01e1db3bdd771ceb8", "filename": "gcc/tree-ssa-threadupdate.c", "status": "modified", "additions": 28, "deletions": 6, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/581aedec91ca246f52469d349fbd7664d17d6dc2/gcc%2Ftree-ssa-threadupdate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/581aedec91ca246f52469d349fbd7664d17d6dc2/gcc%2Ftree-ssa-threadupdate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadupdate.c?ref=581aedec91ca246f52469d349fbd7664d17d6dc2", "patch": "@@ -640,14 +640,36 @@ thread_block (basic_block bb, bool noloop_only)\n       else\n \te2 = THREAD_TARGET (e);\n \n-      if (!e2\n+      if (!e2 || noloop_only)\n+\t{\n \t  /* If NOLOOP_ONLY is true, we only allow threading through the\n-\t     header of a loop to exit edges.  */\n-\t  || (noloop_only\n-\t      && bb == bb->loop_father->header\n+\t     header of a loop to exit edges. \n+\n+\t     There are two cases to consider.  The first when BB is the\n+\t     loop header.  We will attempt to thread this elsewhere, so\n+\t     we can just continue here.  */\n+\n+\t  if (bb == bb->loop_father->header\n \t      && (!loop_exit_edge_p (bb->loop_father, e2)\n-\t\t  || THREAD_TARGET2 (e))))\n-\tcontinue;\n+\t\t  || THREAD_TARGET2 (e)))\n+\t    continue;\n+\n+\n+\t  /* The second occurs when there was loop header buried in a jump\n+\t     threading path.  We do not try and thread this elsewhere, so\n+\t     just cancel the jump threading request by clearing the AUX\n+\t     field now.  */\n+\t  if (bb->loop_father != e2->src->loop_father\n+\t      && !loop_exit_edge_p (e2->src->loop_father, e2))\n+\t    {\n+\t      /* Since this case is not handled by our special code\n+\t\t to thread through a loop header, we must explicitly\n+\t\t cancel the threading request here.  */\n+\t      free (e->aux);\n+\t      e->aux = NULL;\n+\t      continue;\n+\t    }\n+\t}\n \n       if (e->dest == e2->src)\n \tupdate_bb_profile_for_threading (e->dest, EDGE_FREQUENCY (e),"}]}