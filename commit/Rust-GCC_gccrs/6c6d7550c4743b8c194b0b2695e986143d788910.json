{"sha": "6c6d7550c4743b8c194b0b2695e986143d788910", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmM2ZDc1NTBjNDc0M2I4YzE5NGIwYjI2OTVlOTg2MTQzZDc4ODkxMA==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2015-06-19T13:52:32Z"}, "committer": {"name": "Christophe Lyon", "email": "clyon@gcc.gnu.org", "date": "2015-06-19T13:52:32Z"}, "message": "vrsqrte.c: New file.\n\n2015-06-19  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\t* gcc.target/aarch64/advsimd-intrinsics/vrsqrte.c: New file.\n\nFrom-SVN: r224658", "tree": {"sha": "4f431627bd81cc12447c98d433164f8bb83c5bf9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f431627bd81cc12447c98d433164f8bb83c5bf9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c6d7550c4743b8c194b0b2695e986143d788910", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c6d7550c4743b8c194b0b2695e986143d788910", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c6d7550c4743b8c194b0b2695e986143d788910", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c6d7550c4743b8c194b0b2695e986143d788910/comments", "author": null, "committer": null, "parents": [{"sha": "fc4645f8da92adce3593ac0ce492df2fcba9da67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc4645f8da92adce3593ac0ce492df2fcba9da67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc4645f8da92adce3593ac0ce492df2fcba9da67"}], "stats": {"total": 161, "additions": 161, "deletions": 0}, "files": [{"sha": "6d1776b4a3b5eced846d71c80efcfb0419d74a6a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c6d7550c4743b8c194b0b2695e986143d788910/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c6d7550c4743b8c194b0b2695e986143d788910/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6c6d7550c4743b8c194b0b2695e986143d788910", "patch": "@@ -1,3 +1,7 @@\n+2015-06-19  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/vrsqrte.c: New file.\n+\n 2015-06-19  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* gcc.target/aarch64/advsimd-intrinsics/vrshrn_n.c: New file."}, {"sha": "0291ec00c5e1e505312fa362a72772c452e9ad89", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vrsqrte.c", "status": "added", "additions": 157, "deletions": 0, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c6d7550c4743b8c194b0b2695e986143d788910/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrsqrte.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c6d7550c4743b8c194b0b2695e986143d788910/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrsqrte.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrsqrte.c?ref=6c6d7550c4743b8c194b0b2695e986143d788910", "patch": "@@ -0,0 +1,157 @@\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+#include <math.h>\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected,uint,32,2) [] = { 0xffffffff, 0xffffffff };\n+VECT_VAR_DECL(expected,uint,32,4) [] = { 0x9c800000, 0x9c800000,\n+\t\t\t\t\t 0x9c800000, 0x9c800000 };\n+VECT_VAR_DECL(expected,hfloat,32,2) [] = { 0x3e498000, 0x3e498000 };\n+VECT_VAR_DECL(expected,hfloat,32,4) [] = { 0x3e700000, 0x3e700000,\n+\t\t\t\t\t   0x3e700000, 0x3e700000 };\n+\n+/* Expected results with large uint #1.  */\n+VECT_VAR_DECL(expected_1,uint,32,2) [] = { 0x80000000, 0x80000000 };\n+VECT_VAR_DECL(expected_1,uint,32,4) [] = { 0xae800000, 0xae800000,\n+\t\t\t\t\t   0xae800000, 0xae800000 };\n+\n+/* Expected results with large uint #2.  */\n+VECT_VAR_DECL(expected_2,uint,32,2) [] = { 0xb4800000, 0xb4800000 };\n+VECT_VAR_DECL(expected_2,uint,32,4) [] = { 0xed000000, 0xed000000,\n+\t\t\t\t\t   0xed000000, 0xed000000 };\n+\n+/* Expected results with FP special inputs values (NaNs, ...).  */\n+VECT_VAR_DECL(expected_fp1,hfloat,32,2) [] = { 0x7fc00000, 0x7fc00000 };\n+VECT_VAR_DECL(expected_fp1,hfloat,32,4) [] = { 0x7f800000, 0x7f800000,\n+\t\t\t\t\t       0x7f800000, 0x7f800000 };\n+\n+/* Expected results with FP special inputs values\n+   (negative, infinity).  */\n+VECT_VAR_DECL(expected_fp2,hfloat,32,2) [] = { 0x7fc00000, 0x7fc00000 };\n+VECT_VAR_DECL(expected_fp2,hfloat,32,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+\n+/* Expected results with FP special inputs values\n+   (-0, -infinity).  */\n+VECT_VAR_DECL(expected_fp3,hfloat,32,2) [] = { 0xff800000, 0xff800000 };\n+VECT_VAR_DECL(expected_fp3,hfloat,32,4) [] = { 0x7fc00000, 0x7fc00000,\n+\t\t\t\t\t       0x7fc00000, 0x7fc00000 };\n+\n+#define TEST_MSG \"VRSQRTE/VRSQRTEQ\"\n+void exec_vrsqrte(void)\n+{\n+  int i;\n+\n+  /* Basic test: y=vrsqrte(x), then store the result.  */\n+#define TEST_VRSQRTE(Q, T1, T2, W, N)\t\t\t\\\n+  VECT_VAR(vector_res, T1, W, N) =\t\t\t\\\n+    vrsqrte##Q##_##T2##W(VECT_VAR(vector, T1, W, N));\t\\\n+  vst1##Q##_##T2##W(VECT_VAR(result, T1, W, N),\t\t\\\n+\t\t    VECT_VAR(vector_res, T1, W, N))\n+\n+  DECL_VARIABLE(vector, uint, 32, 2);\n+  DECL_VARIABLE(vector, float, 32, 2);\n+  DECL_VARIABLE(vector, uint, 32, 4);\n+  DECL_VARIABLE(vector, float, 32, 4);\n+\n+  DECL_VARIABLE(vector_res, uint, 32, 2);\n+  DECL_VARIABLE(vector_res, float, 32, 2);\n+  DECL_VARIABLE(vector_res, uint, 32, 4);\n+  DECL_VARIABLE(vector_res, float, 32, 4);\n+\n+  clean_results ();\n+\n+  /* Choose init value arbitrarily.  */\n+  VDUP(vector, , uint, u, 32, 2, 0x12345678);\n+  VDUP(vector, , float, f, 32, 2, 25.799999f);\n+  VDUP(vector, q, uint, u, 32, 4, 0xABCDEF10);\n+  VDUP(vector, q, float, f, 32, 4, 18.2f);\n+\n+  /* Apply the operator.  */\n+  TEST_VRSQRTE(, uint, u, 32, 2);\n+  TEST_VRSQRTE(, float, f, 32, 2);\n+  TEST_VRSQRTE(q, uint, u, 32, 4);\n+  TEST_VRSQRTE(q, float, f, 32, 4);\n+\n+#define CMT \"\"\n+  CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected, CMT);\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected, CMT);\n+  CHECK_FP(TEST_MSG, float, 32, 2, PRIx32, expected, CMT);\n+  CHECK_FP(TEST_MSG, float, 32, 4, PRIx32, expected, CMT);\n+\n+\n+  /* Don't test FP variants with negative inputs.  */\n+  /* Use input with various values of bits 30 and 31.  */\n+  VDUP(vector, , uint, u, 32, 2, 0xFFFFFFFF);\n+  VDUP(vector, q, uint, u, 32, 4, 0x89081234);\n+\n+  /* Apply the operator.  */\n+  TEST_VRSQRTE(, uint, u, 32, 2);\n+  TEST_VRSQRTE(q, uint, u, 32, 4);\n+\n+#undef CMT\n+#define CMT \" (large uint #1)\"\n+  CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected_1, CMT);\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_1, CMT);\n+\n+\n+  /* Choose init value arbitrarily.  */\n+  VDUP(vector, , uint, u, 32, 2, 0x80000000);\n+  VDUP(vector, q, uint, u, 32, 4, 0x4ABCDEF0);\n+\n+  /* Apply the operator.  */\n+  TEST_VRSQRTE(, uint, u, 32, 2);\n+  TEST_VRSQRTE(q, uint, u, 32, 4);\n+\n+#undef CMT\n+#define CMT \" (large uint #2)\"\n+  CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected_2, CMT);\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_2, CMT);\n+\n+\n+  /* Test FP variants with special input values (NaNs, ...).  */\n+  VDUP(vector, , float, f, 32, 2, NAN);\n+  VDUP(vector, q, float, f, 32, 4, 0.0f);\n+\n+  /* Apply the operator.  */\n+  TEST_VRSQRTE(, float, f, 32, 2);\n+  TEST_VRSQRTE(q, float, f, 32, 4);\n+\n+#undef CMT\n+#define CMT \" FP special (NaN, 0)\"\n+  CHECK_FP(TEST_MSG, float, 32, 2, PRIx32, expected_fp1, CMT);\n+  CHECK_FP(TEST_MSG, float, 32, 4, PRIx32, expected_fp1, CMT);\n+\n+\n+  /* Test FP variants with special input values (negative, infinity).  */\n+  VDUP(vector, , float, f, 32, 2, -1.0f);\n+  VDUP(vector, q, float, f, 32, 4, HUGE_VALF);\n+\n+  /* Apply the operator.  */\n+  TEST_VRSQRTE(, float, f, 32, 2);\n+  TEST_VRSQRTE(q, float, f, 32, 4);\n+\n+#undef CMT\n+#define CMT \" FP special (negative, infinity)\"\n+  CHECK_FP(TEST_MSG, float, 32, 2, PRIx32, expected_fp2, CMT);\n+  CHECK_FP(TEST_MSG, float, 32, 4, PRIx32, expected_fp2, CMT);\n+\n+  /* Test FP variants with special input values (-0, -infinity).  */\n+  VDUP(vector, , float, f, 32, 2, -0.0f);\n+  VDUP(vector, q, float, f, 32, 4, -HUGE_VALF);\n+\n+  /* Apply the operator.  */\n+  TEST_VRSQRTE(, float, f, 32, 2);\n+  TEST_VRSQRTE(q, float, f, 32, 4);\n+\n+#undef CMT\n+#define CMT \" FP special (-0, -infinity)\"\n+  CHECK_FP(TEST_MSG, float, 32, 2, PRIx32, expected_fp3, CMT);\n+  CHECK_FP(TEST_MSG, float, 32, 4, PRIx32, expected_fp3, CMT);\n+}\n+\n+int main (void)\n+{\n+  exec_vrsqrte ();\n+  return 0;\n+}"}]}