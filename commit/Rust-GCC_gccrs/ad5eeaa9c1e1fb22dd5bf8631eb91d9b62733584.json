{"sha": "ad5eeaa9c1e1fb22dd5bf8631eb91d9b62733584", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQ1ZWVhYTljMWUxZmIyMmRkNWJmODYzMWViOTFkOWI2MjczMzU4NA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2003-04-02T17:23:01Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2003-04-02T17:23:01Z"}, "message": "dwarf2out.c (output_call_frame_info): Ignore fde->nothrow as an optimization when flag_exceptions not enabled.\n\n        * dwarf2out.c (output_call_frame_info): Ignore fde->nothrow as an\n        optimization when flag_exceptions not enabled.\n\nFrom-SVN: r65169", "tree": {"sha": "dc74dae079809067eed1f30ad0dbc3a4ba058ee3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc74dae079809067eed1f30ad0dbc3a4ba058ee3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad5eeaa9c1e1fb22dd5bf8631eb91d9b62733584", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad5eeaa9c1e1fb22dd5bf8631eb91d9b62733584", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad5eeaa9c1e1fb22dd5bf8631eb91d9b62733584", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad5eeaa9c1e1fb22dd5bf8631eb91d9b62733584/comments", "author": null, "committer": null, "parents": [{"sha": "be12c2b0cc10bf0e7429b842c9e73067c10f8e85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be12c2b0cc10bf0e7429b842c9e73067c10f8e85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be12c2b0cc10bf0e7429b842c9e73067c10f8e85"}], "stats": {"total": 21, "additions": 14, "deletions": 7}, "files": [{"sha": "76631c7f63bc8ae78978cb6a358d5ac026b5fca4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad5eeaa9c1e1fb22dd5bf8631eb91d9b62733584/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad5eeaa9c1e1fb22dd5bf8631eb91d9b62733584/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ad5eeaa9c1e1fb22dd5bf8631eb91d9b62733584", "patch": "@@ -1,3 +1,8 @@\n+2003-04-02  Richard Henderson  <rth@redhat.com>\n+\n+        * dwarf2out.c (output_call_frame_info): Ignore fde->nothrow as an\n+        optimization when flag_exceptions not enabled.\n+\n 2003-04-02  Vladimir Makarov  <vmakarov@redhat.com>\n \n \t* config/rs6000/rs6000.c"}, {"sha": "dbe8fdf7eb0eed8f5ce1791478685271eb65d563", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad5eeaa9c1e1fb22dd5bf8631eb91d9b62733584/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad5eeaa9c1e1fb22dd5bf8631eb91d9b62733584/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=ad5eeaa9c1e1fb22dd5bf8631eb91d9b62733584", "patch": "@@ -1918,7 +1918,7 @@ output_call_frame_info (for_eh)\n   dw_fde_ref fde;\n   dw_cfi_ref cfi;\n   char l1[20], l2[20], section_start_label[20];\n-  int any_lsda_needed = 0;\n+  bool any_lsda_needed = false;\n   char augmentation[6];\n   int augmentation_size;\n   int fde_encoding = DW_EH_PE_absptr;\n@@ -1929,17 +1929,19 @@ output_call_frame_info (for_eh)\n   if (fde_table_in_use == 0)\n     return;\n \n-  /* If we don't have any functions we'll want to unwind out of, don't emit any\n-     EH unwind information.  */\n+  /* If we don't have any functions we'll want to unwind out of, don't\n+     emit any EH unwind information.  Note that if exceptions aren't\n+     enabled, we won't have collected nothrow information, and if we\n+     asked for asynchronous tables, we always want this info.  */\n   if (for_eh)\n     {\n-      int any_eh_needed = flag_asynchronous_unwind_tables;\n+      bool any_eh_needed = !flag_exceptions || flag_asynchronous_unwind_tables;\n \n       for (i = 0; i < fde_table_in_use; i++)\n \tif (fde_table[i].uses_eh_lsda)\n-\t  any_eh_needed = any_lsda_needed = 1;\n+\t  any_eh_needed = any_lsda_needed = true;\n \telse if (! fde_table[i].nothrow)\n-\t  any_eh_needed = 1;\n+\t  any_eh_needed = true;\n \n       if (! any_eh_needed)\n \treturn;\n@@ -2077,7 +2079,7 @@ output_call_frame_info (for_eh)\n       fde = &fde_table[i];\n \n       /* Don't emit EH unwind info for leaf functions that don't need it.  */\n-      if (!flag_asynchronous_unwind_tables && for_eh\n+      if (for_eh && !flag_asynchronous_unwind_tables && flag_exceptions\n \t  && (fde->nothrow || fde->all_throwers_are_sibcalls)\n \t  && !fde->uses_eh_lsda)\n \tcontinue;"}]}