{"sha": "8a14afd0657b21e1de31fd1b2146056b09dbab5b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGExNGFmZDA2NTdiMjFlMWRlMzFmZDFiMjE0NjA1NmIwOWRiYWI1Yg==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@redhat.com", "date": "2016-10-07T12:21:55Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2016-10-07T12:21:55Z"}, "message": "re PR c++/69733 (-Wignored-qualifiers points to wrong const)\n\nc/\n\tPR c++/69733\n\t* c-decl.c (smallest_type_quals_location): New static function.\n\t(grokdeclarator): Try to find the correct location for an ignored\n\tqualifier.\ncp/\n\tPR c++/69733\n\t* decl.c (grokdeclarator): Try to find the correct location for an\n\tignored qualifier.\ntestsuite/\n\tPR c++/69733\n\t* c-c++-common/pr69733.c: New test.\n\t* gcc.dg/pr69733.c: New test.\n\t* gcc.target/i386/pr69733.c: New test.\n\nFrom-SVN: r240863", "tree": {"sha": "789ca4cb57ff3dbdcb638df0d2d1332b46093ad5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/789ca4cb57ff3dbdcb638df0d2d1332b46093ad5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a14afd0657b21e1de31fd1b2146056b09dbab5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a14afd0657b21e1de31fd1b2146056b09dbab5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a14afd0657b21e1de31fd1b2146056b09dbab5b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a14afd0657b21e1de31fd1b2146056b09dbab5b/comments", "author": null, "committer": null, "parents": [{"sha": "1edfde32a81006b564eb290a5989f473ab2d9af9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1edfde32a81006b564eb290a5989f473ab2d9af9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1edfde32a81006b564eb290a5989f473ab2d9af9"}], "stats": {"total": 136, "additions": 131, "deletions": 5}, "files": [{"sha": "c5dd848a3e0a006bd08de4204e7edb0e2f81385a", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a14afd0657b21e1de31fd1b2146056b09dbab5b/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a14afd0657b21e1de31fd1b2146056b09dbab5b/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=8a14afd0657b21e1de31fd1b2146056b09dbab5b", "patch": "@@ -1,3 +1,10 @@\n+2016-10-07  Bernd Schmidt  <bschmidt@redhat.com>\n+\n+\tPR c++/69733\n+\t* c-decl.c (smallest_type_quals_location): New static function.\n+\t(grokdeclarator): Try to find the correct location for an ignored\n+\tqualifier.\n+\n 2016-09-26  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/7652"}, {"sha": "136f304ca309ae202c06b41992e6feed0bd51486", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 37, "deletions": 3, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a14afd0657b21e1de31fd1b2146056b09dbab5b/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a14afd0657b21e1de31fd1b2146056b09dbab5b/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=8a14afd0657b21e1de31fd1b2146056b09dbab5b", "patch": "@@ -5448,6 +5448,27 @@ warn_defaults_to (location_t location, int opt, const char *gmsgid, ...)\n   va_end (ap);\n }\n \n+/* Returns the smallest location != UNKNOWN_LOCATION in LOCATIONS,\n+   considering only those c_declspec_words found in LIST, which\n+   must be terminated by cdw_number_of_elements.  */\n+\n+static location_t\n+smallest_type_quals_location (const location_t *locations,\n+\t\t\t      const c_declspec_word *list)\n+{\n+  location_t loc = UNKNOWN_LOCATION;\n+  while (*list != cdw_number_of_elements)\n+    {\n+      location_t newloc = locations[*list];\n+      if (loc == UNKNOWN_LOCATION\n+\t  || (newloc != UNKNOWN_LOCATION && newloc < loc))\n+\tloc = newloc;\n+      list++;\n+    }\n+\n+  return loc;\n+}\n+\n /* Given declspecs and a declarator,\n    determine the name and type of the object declared\n    and construct a ..._DECL node for it.\n@@ -6262,7 +6283,19 @@ grokdeclarator (const struct c_declarator *declarator,\n \t       qualify the return type, not the function type.  */\n \t    if (type_quals)\n \t      {\n-\t\tint quals_used = type_quals;\n+\t\tconst enum c_declspec_word ignored_quals_list[] =\n+\t\t  {\n+\t\t    cdw_const, cdw_volatile, cdw_restrict, cdw_address_space,\n+\t\t    cdw_atomic, cdw_number_of_elements\n+\t\t  };\n+\t\tlocation_t specs_loc\n+\t\t  = smallest_type_quals_location (declspecs->locations,\n+\t\t\t\t\t\t  ignored_quals_list);\n+\t\tif (specs_loc == UNKNOWN_LOCATION)\n+\t\t  specs_loc = declspecs->locations[cdw_typedef];\n+\t\tif (specs_loc == UNKNOWN_LOCATION)\n+\t\t  specs_loc = loc;\n+\n \t\t/* Type qualifiers on a function return type are\n \t\t   normally permitted by the standard but have no\n \t\t   effect, so give a warning at -Wreturn-type.\n@@ -6272,13 +6305,14 @@ grokdeclarator (const struct c_declarator *declarator,\n \t\t   DR#423 means qualifiers (other than _Atomic) are\n \t\t   actually removed from the return type when\n \t\t   determining the function type.  */\n+\t\tint quals_used = type_quals;\n \t\tif (flag_isoc11)\n \t\t  quals_used &= TYPE_QUAL_ATOMIC;\n \t\tif (quals_used && VOID_TYPE_P (type) && really_funcdef)\n-\t\t  pedwarn (loc, 0,\n+\t\t  pedwarn (specs_loc, 0,\n \t\t\t   \"function definition has qualified void return type\");\n \t\telse\n-\t\t  warning_at (loc, OPT_Wignored_qualifiers,\n+\t\t  warning_at (specs_loc, OPT_Wignored_qualifiers,\n \t\t\t   \"type qualifiers ignored on function return type\");\n \n \t\t/* Ensure an error for restrict on invalid types; the"}, {"sha": "f88e16da05a1267fe0b0feda72461664c5f3432a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a14afd0657b21e1de31fd1b2146056b09dbab5b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a14afd0657b21e1de31fd1b2146056b09dbab5b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8a14afd0657b21e1de31fd1b2146056b09dbab5b", "patch": "@@ -1,3 +1,9 @@\n+2016-10-07  Bernd Schmidt  <bschmidt@redhat.com>\n+\n+\tPR c++/69733\n+\t* decl.c (grokdeclarator): Try to find the correct location for an\n+\tignored qualifier.\n+\n 2016-10-07  Martin Liska  <mliska@suse.cz>\n \n \t* lambda.c (maybe_add_lambda_conv_op): Set default value."}, {"sha": "2d11aefbd692815a301c9f517800b7bf7f1cd4a5", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a14afd0657b21e1de31fd1b2146056b09dbab5b/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a14afd0657b21e1de31fd1b2146056b09dbab5b/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=8a14afd0657b21e1de31fd1b2146056b09dbab5b", "patch": "@@ -10154,8 +10154,15 @@ grokdeclarator (const cp_declarator *declarator,\n \t    if (type_quals != TYPE_UNQUALIFIED)\n \t      {\n \t\tif (SCALAR_TYPE_P (type) || VOID_TYPE_P (type))\n-\t\t  warning (OPT_Wignored_qualifiers,\n-\t\t\t   \"type qualifiers ignored on function return type\");\n+\t\t  {\n+\t\t    location_t loc;\n+\t\t    loc = smallest_type_quals_location (type_quals,\n+\t\t\t\t\t\t\tdeclspecs->locations);\n+\t\t    if (loc == UNKNOWN_LOCATION)\n+\t\t      loc = declspecs->locations[ds_type_spec];\n+\t\t    warning_at (loc, OPT_Wignored_qualifiers, \"type \"\n+\t\t\t\t\"qualifiers ignored on function return type\");\n+\t\t  }\n \t\t/* We now know that the TYPE_QUALS don't apply to the\n \t\t   decl, but to its return type.  */\n \t\ttype_quals = TYPE_UNQUALIFIED;"}, {"sha": "f8769a7421c44bffe21b22070beec450bcd39965", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a14afd0657b21e1de31fd1b2146056b09dbab5b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a14afd0657b21e1de31fd1b2146056b09dbab5b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8a14afd0657b21e1de31fd1b2146056b09dbab5b", "patch": "@@ -1,3 +1,10 @@\n+2016-10-07  Bernd Schmidt  <bschmidt@redhat.com>\n+\n+\tPR c++/69733\n+\t* c-c++-common/pr69733.c: New test.\n+\t* gcc.dg/pr69733.c: New test.\n+\t* gcc.target/i386/pr69733.c: New test.\n+\n 2016-10-07  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/77803"}, {"sha": "57ec1eccb9f5b6c61ae7bfeb775b79c9bded3ef6", "filename": "gcc/testsuite/c-c++-common/pr69733.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a14afd0657b21e1de31fd1b2146056b09dbab5b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr69733.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a14afd0657b21e1de31fd1b2146056b09dbab5b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr69733.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr69733.c?ref=8a14afd0657b21e1de31fd1b2146056b09dbab5b", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-W -fdiagnostics-show-caret\" } */\n+\n+typedef const double cd;\n+double val;\n+\n+const double val0() {return val;} /* { dg-warning \"qualifiers ignored\" } */\n+/* { dg-begin-multiline-output \"\" }\n+ const double val0() {return val;}\n+ ^~~~~\n+{ dg-end-multiline-output \"\" } */\n+\n+volatile double val1() {return val;} /* { dg-warning \"qualifiers ignored\" } */\n+/* { dg-begin-multiline-output \"\" }\n+ volatile double val1() {return val;}\n+ ^~~~~~~~\n+{ dg-end-multiline-output \"\" } */\n+\n+cd val2() {return val;} /* { dg-warning \"qualifiers ignored\" } */\n+/* { dg-begin-multiline-output \"\" }\n+ cd val2() {return val;}\n+ ^~\n+{ dg-end-multiline-output \"\" } */\n+"}, {"sha": "b4f4621a524f3b1b03c2288f142efeef73486e05", "filename": "gcc/testsuite/gcc.dg/pr69733.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a14afd0657b21e1de31fd1b2146056b09dbab5b/gcc%2Ftestsuite%2Fgcc.dg%2Fpr69733.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a14afd0657b21e1de31fd1b2146056b09dbab5b/gcc%2Ftestsuite%2Fgcc.dg%2Fpr69733.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr69733.c?ref=8a14afd0657b21e1de31fd1b2146056b09dbab5b", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-W -fdiagnostics-show-caret\" } */\n+\n+double val;\n+\n+_Atomic double val0() {return val;} /* { dg-warning \"qualifiers ignored\" } */\n+/* { dg-begin-multiline-output \"\" }\n+ _Atomic double val0() {return val;}\n+ ^~~~~~~\n+{ dg-end-multiline-output \"\" } */\n+"}, {"sha": "acaf4008a10e09912b8ab75554c75da3bc11e66c", "filename": "gcc/testsuite/gcc.target/i386/pr69733.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a14afd0657b21e1de31fd1b2146056b09dbab5b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr69733.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a14afd0657b21e1de31fd1b2146056b09dbab5b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr69733.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr69733.c?ref=8a14afd0657b21e1de31fd1b2146056b09dbab5b", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-W -fdiagnostics-show-caret\" } */\n+\n+typedef const double cd;\n+double val;\n+\n+const double val0() {return val;} /* { dg-warning \"qualifiers ignored\" } */\n+/* { dg-begin-multiline-output \"\" }\n+ const double val0() {return val;}\n+ ^~~~~\n+{ dg-end-multiline-output \"\" } */\n+\n+volatile double val1() {return val;} /* { dg-warning \"qualifiers ignored\" } */\n+/* { dg-begin-multiline-output \"\" }\n+ volatile double val1() {return val;}\n+ ^~~~~~~~\n+{ dg-end-multiline-output \"\" } */\n+\n+cd val2() {return val;} /* { dg-warning \"qualifiers ignored\" } */\n+/* { dg-begin-multiline-output \"\" }\n+ cd val2() {return val;}\n+ ^~\n+{ dg-end-multiline-output \"\" } */\n+\n+__seg_fs int val3() {return val;} /* { dg-warning \"qualifiers ignored\" } */\n+/* { dg-begin-multiline-output \"\" }\n+ __seg_fs int val3() {return val;}\n+ ^~~~~~~~\n+{ dg-end-multiline-output \"\" } */\n+"}]}