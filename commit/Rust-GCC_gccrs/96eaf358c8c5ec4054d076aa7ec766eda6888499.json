{"sha": "96eaf358c8c5ec4054d076aa7ec766eda6888499", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTZlYWYzNThjOGM1ZWM0MDU0ZDA3NmFhN2VjNzY2ZWRhNjg4ODQ5OQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@hxi.com", "date": "2001-11-12T15:09:04Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2001-11-12T15:09:04Z"}, "message": "* config/h8300/h8300.c (get_shift_alg): Remove redundant code.\n\nFrom-SVN: r46947", "tree": {"sha": "01ab7867088f718808035b1326b007e48e76e93d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01ab7867088f718808035b1326b007e48e76e93d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/96eaf358c8c5ec4054d076aa7ec766eda6888499", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96eaf358c8c5ec4054d076aa7ec766eda6888499", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96eaf358c8c5ec4054d076aa7ec766eda6888499", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96eaf358c8c5ec4054d076aa7ec766eda6888499/comments", "author": null, "committer": null, "parents": [{"sha": "e9716dc5b3c0cb3e645d939de11130cb67acb3dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9716dc5b3c0cb3e645d939de11130cb67acb3dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9716dc5b3c0cb3e645d939de11130cb67acb3dc"}], "stats": {"total": 133, "additions": 59, "deletions": 74}, "files": [{"sha": "f904c27e4360ed7742d8d2d79586a036acd62413", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96eaf358c8c5ec4054d076aa7ec766eda6888499/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96eaf358c8c5ec4054d076aa7ec766eda6888499/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=96eaf358c8c5ec4054d076aa7ec766eda6888499", "patch": "@@ -1,3 +1,7 @@\n+2001-11-12  Kazu Hirata  <kazu@hxi.com>\n+\n+\t* config/h8300/h8300.c (get_shift_alg): Remove redundant code.\n+\n 2001-11-12  Jakub Jelinek  <jakub@redhat.com>\n \n \t* dbxout.c (dbxout_symbol_location): Avoid emitting invalid register"}, {"sha": "e27b57252834c4dfe5ac4fdec5d687aa54746e0a", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 55, "deletions": 74, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96eaf358c8c5ec4054d076aa7ec766eda6888499/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96eaf358c8c5ec4054d076aa7ec766eda6888499/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=96eaf358c8c5ec4054d076aa7ec766eda6888499", "patch": "@@ -2347,34 +2347,67 @@ get_shift_alg (shift_type, shift_mode, count, info)\n   else\n     cpu = 2;\n \n-  /* In case we end up with SHIFT_SPECIAL, initialize REMAINDER to 0.  */\n-  info->remainder = 0;\n-\n-  /* Assume either SHIFT_LOOP or SHIFT_INLINE.\n-     It is up to the caller to know that looping clobbers cc.  */\n-  info->shift1 = shift_one[cpu_type][shift_type][shift_mode].assembler;\n-  info->shift2 = shift_two[shift_type][shift_mode].assembler;\n-  info->cc_valid_p = shift_one[cpu_type][shift_type][shift_mode].cc_valid;\n-\n-  /* Now look for cases we want to optimize.  */\n+  /* Find the shift algorithm.  */\n   switch (shift_mode)\n     {\n     case QIshift:\n       if (GET_MODE_BITSIZE (QImode) <= count)\n-\tgoto return_shift_loop;\n+\tinfo->alg = SHIFT_LOOP;\n+      else\n+\tinfo->alg = shift_alg_qi[cpu][shift_type][count];\n+      break;\n \n-      switch (shift_alg_qi[cpu][shift_type][count])\n-\t{\n-\tcase SHIFT_INLINE:\n-\t  goto return_shift_inline;\n-\tcase SHIFT_LOOP:\n-\t  goto return_shift_loop;\n-\tcase SHIFT_ROT_AND:\n-\t  goto return_shift_rot_and;\n-\tcase SHIFT_SPECIAL:\n-\t  ;\n-\t}\n+    case HIshift:\n+      if (GET_MODE_BITSIZE (HImode) <= count)\n+\tinfo->alg = SHIFT_LOOP;\n+      else\n+\tinfo->alg = shift_alg_hi[cpu][shift_type][count];\n+      break;\n+\n+    case SIshift:\n+      if (GET_MODE_BITSIZE (SImode) <= count)\n+\tinfo->alg = SHIFT_LOOP;\n+      else\n+\tinfo->alg = shift_alg_si[cpu][shift_type][count];\n+      break;\n+\n+    default:\n+      abort ();\n+    }\n+\n+  /* Fill in INFO.  Return unless we have SHIFT_SPECIAL.  */\n+  switch (info->alg)\n+    {\n+    case SHIFT_INLINE:\n+      info->remainder = count;\n+      /* Fall through.  */\n+\n+    case SHIFT_LOOP:\n+      /* It is up to the caller to know that looping clobbers cc.  */\n+      info->shift1 = shift_one[cpu_type][shift_type][shift_mode].assembler;\n+      info->shift2 = shift_two[shift_type][shift_mode].assembler;\n+      info->cc_valid_p = shift_one[cpu_type][shift_type][shift_mode].cc_valid;\n+      goto end;\n+\n+    case SHIFT_ROT_AND:\n+      info->shift1 = rotate_one[cpu_type][shift_type][shift_mode];\n+      info->shift2 = rotate_two[shift_type][shift_mode];\n+      info->cc_valid_p = 0;\n+      goto end;\n+\n+    case SHIFT_SPECIAL:\n+      /* REMAINDER is 0 for most cases, so initialize it to 0.  */\n+      info->remainder = 0;\n+      info->shift1 = shift_one[cpu_type][shift_type][shift_mode].assembler;\n+      info->shift2 = shift_two[shift_type][shift_mode].assembler;\n+      info->cc_valid_p = 0;\n+      break;\n+    }\n \n+  /* Here we only deal with SHIFT_SPECIAL.  */\n+  switch (shift_mode)\n+    {\n+    case QIshift:\n       /* For ASHIFTRT by 7 bits, the sign bit is simply replicated\n \t through the entire value.  */\n       if (shift_type == SHIFT_ASHIFTRT && count == 7)\n@@ -2385,21 +2418,6 @@ get_shift_alg (shift_type, shift_mode, count, info)\n       abort ();\n \n     case HIshift:\n-      if (GET_MODE_BITSIZE (HImode) <= count)\n-\tgoto return_shift_loop;\n-\n-      switch (shift_alg_hi[cpu][shift_type][count])\n-\t{\n-\tcase SHIFT_INLINE:\n-\t  goto return_shift_inline;\n-\tcase SHIFT_LOOP:\n-\t  goto return_shift_loop;\n-\tcase SHIFT_ROT_AND:\n-\t  goto return_shift_rot_and;\n-\tcase SHIFT_SPECIAL:\n-\t  ;\n-\t}\n-\n       if (count == 7)\n \t{\n \t  if (shift_type == SHIFT_ASHIFT && TARGET_H8300)\n@@ -2466,22 +2484,6 @@ get_shift_alg (shift_type, shift_mode, count, info)\n       abort ();\n \n     case SIshift:\n-      if (GET_MODE_BITSIZE (SImode) <= count)\n-\tgoto return_shift_loop;\n-\n-      info->alg = shift_alg_si[cpu][shift_type][count];\n-      switch (info->alg)\n-\t{\n-\tcase SHIFT_INLINE:\n-\t  goto return_shift_inline;\n-\tcase SHIFT_LOOP:\n-\t  goto return_shift_loop;\n-\tcase SHIFT_ROT_AND:\n-\t  goto return_shift_rot_and;\n-\tcase SHIFT_SPECIAL:\n-\t  ;\n-\t}\n-\n       if (count == 8 && TARGET_H8300)\n \t{\n \t  switch (shift_type)\n@@ -2583,28 +2585,7 @@ get_shift_alg (shift_type, shift_mode, count, info)\n       abort ();\n     }\n \n- return_shift_loop:\n-  /* No fancy method is available.  Just loop.  */\n-  info->alg = SHIFT_LOOP;\n-  goto end;\n-\n- return_shift_inline:\n-  info->remainder = count;\n-  info->alg = SHIFT_INLINE;\n-  goto end;\n-\n  return_shift_special:\n-  info->cc_valid_p = 0;\n-  info->alg = SHIFT_SPECIAL;\n-  goto end;\n-\n- return_shift_rot_and:\n-  info->shift1 = rotate_one[cpu_type][shift_type][shift_mode];\n-  info->shift2 = rotate_two[shift_type][shift_mode];\n-  info->cc_valid_p = 0;\n-  info->alg = SHIFT_ROT_AND;\n-  goto end;\n-\n  end:\n   if (!TARGET_H8300S)\n     info->shift2 = NULL;"}]}