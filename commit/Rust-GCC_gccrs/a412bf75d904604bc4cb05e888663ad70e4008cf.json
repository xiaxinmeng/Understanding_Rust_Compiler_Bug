{"sha": "a412bf75d904604bc4cb05e888663ad70e4008cf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTQxMmJmNzVkOTA0NjA0YmM0Y2IwNWU4ODg2NjNhZDcwZTQwMDhjZg==", "commit": {"author": {"name": "Mike Stump", "email": "mrs@wrs.com", "date": "2001-01-03T01:11:18Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "2001-01-03T01:11:18Z"}, "message": "* decl2.c: (max_tinst_depth): Increase to 50.\n\nFrom-SVN: r38642", "tree": {"sha": "feb356f697d6b8e82dd34425a953c9378ea3d410", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/feb356f697d6b8e82dd34425a953c9378ea3d410"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a412bf75d904604bc4cb05e888663ad70e4008cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a412bf75d904604bc4cb05e888663ad70e4008cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a412bf75d904604bc4cb05e888663ad70e4008cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a412bf75d904604bc4cb05e888663ad70e4008cf/comments", "author": null, "committer": null, "parents": [{"sha": "4890c2f43c55328b560ca99fb4a4058a68290cd9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4890c2f43c55328b560ca99fb4a4058a68290cd9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4890c2f43c55328b560ca99fb4a4058a68290cd9"}], "stats": {"total": 21, "additions": 18, "deletions": 3}, "files": [{"sha": "f17a43b1518d2b0d975eb25e742a604687961eb1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a412bf75d904604bc4cb05e888663ad70e4008cf/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a412bf75d904604bc4cb05e888663ad70e4008cf/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a412bf75d904604bc4cb05e888663ad70e4008cf", "patch": "@@ -1,3 +1,7 @@\n+2000-12-22  Mike Stump  <mrs@wrs.com>\n+\n+\t* decl2.c: (max_tinst_depth): Increase to 50.\n+\n 2001-01-02  Mark Mitchell  <mark@codesourcery.com>\n \n \t* class.c (invalidate_class_lookup_cache): Zero the"}, {"sha": "0b7ec3c9e498a826198f523b4f3e3249597255e3", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a412bf75d904604bc4cb05e888663ad70e4008cf/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a412bf75d904604bc4cb05e888663ad70e4008cf/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=a412bf75d904604bc4cb05e888663ad70e4008cf", "patch": "@@ -288,23 +288,29 @@ int warn_parentheses;\n /* Non-zero means warn in function declared in derived class has the\n    same name as a virtual in the base class, but fails to match the\n    type signature of any virtual function in the base class.  */\n+\n int warn_overloaded_virtual;\n \n /* Non-zero means warn when declaring a class that has a non virtual\n    destructor, when it really ought to have a virtual one.  */\n+\n int warn_nonvdtor;\n \n /* Non-zero means warn when a function is declared extern and later inline.  */\n+\n int warn_extern_inline;\n \n /* Non-zero means warn when the compiler will reorder code.  */\n+\n int warn_reorder;\n \n /* Non-zero means warn when synthesis behavior differs from Cfront's.  */\n+\n int warn_synth;\n \n /* Non-zero means warn when we convert a pointer to member function\n    into a pointer to (void or function).  */\n+\n int warn_pmf2ptr = 1;\n \n /* Nonzero means warn about violation of some Effective C++ style rules.  */\n@@ -370,10 +376,12 @@ int flag_default_inline = 1;\n \n /* Controls whether compiler generates 'type descriptor' that give\n    run-time type information.  */\n+\n int flag_rtti = 1;\n \n /* Nonzero if we wish to output cross-referencing information\n    for the GNU class browser.  */\n+\n extern int flag_gnu_xref;\n \n /* Nonzero if we want to support huge (> 2^(sizeof(short)*8-1) bytes)\n@@ -434,10 +442,11 @@ int flag_honor_std = ENABLE_STD_NAMESPACE;\n \n int flag_inline_trees = 0;\n \n-/* Maximum template instantiation depth. Must be at least 17 for ISO\n-   compliance. */\n+/* Maximum template instantiation depth.  This limit is rather\n+   arbitrary, but it exists to limit the time it takes to notice\n+   infinite template instantiations.  */\n \n-int max_tinst_depth = 17;\n+int max_tinst_depth = 50;\n \n /* The name-mangling scheme to use.  Must be 1 or greater to support\n    template functions with identical types, but different template\n@@ -446,11 +455,13 @@ int name_mangling_version = 2;\n \n /* Nonzero if wchar_t should be `unsigned short' instead of whatever it\n    would normally be, for use with WINE.  */\n+\n int flag_short_wchar;\n \n /* Nonzero if squashed mangling is to be performed. \n    This uses the B and K codes to reference previously seen class types \n    and class qualifiers.       */\n+\n int flag_do_squangling;\n \n /* Nonzero means output .vtable_{entry,inherit} for use in doing vtable gc.  */"}]}