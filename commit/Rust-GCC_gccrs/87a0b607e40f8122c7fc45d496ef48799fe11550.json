{"sha": "87a0b607e40f8122c7fc45d496ef48799fe11550", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODdhMGI2MDdlNDBmODEyMmM3ZmM0NWQ0OTZlZjQ4Nzk5ZmUxMTU1MA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-08-04T09:42:41Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-08-04T10:33:23Z"}, "message": "tree-optimization/101756 - avoid vectorizing boolean MAX reductions\n\nThe following avoids vectorizing MIN/MAX reductions on bools which,\nwhen ending up as vector(2) <signed-boolean:64> would need to be\nadjusted because of the sign change.  The fix instead avoids any\nreduction vectorization where the result isn't compatible\nto the original scalar type since we don't compensate for that\neither.\n\n2021-08-04  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/101756\n\t* tree-vect-slp.c (vectorizable_bb_reduc_epilogue): Make sure\n\tthe result of the reduction epilogue is compatible to the original\n\tscalar result.\n\n\t* gcc.dg/vect/bb-slp-pr101756.c: New testcase.", "tree": {"sha": "66796d9199b39764de9cdad7db7a7e80135b047f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/66796d9199b39764de9cdad7db7a7e80135b047f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/87a0b607e40f8122c7fc45d496ef48799fe11550", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87a0b607e40f8122c7fc45d496ef48799fe11550", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87a0b607e40f8122c7fc45d496ef48799fe11550", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87a0b607e40f8122c7fc45d496ef48799fe11550/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af31cab04770f7a1a1da069415ab62ca2ef54fc4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af31cab04770f7a1a1da069415ab62ca2ef54fc4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af31cab04770f7a1a1da069415ab62ca2ef54fc4"}], "stats": {"total": 23, "additions": 20, "deletions": 3}, "files": [{"sha": "9420e77f64e4b219c886facef0fea35725ed9d7a", "filename": "gcc/testsuite/gcc.dg/vect/bb-slp-pr101756.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87a0b607e40f8122c7fc45d496ef48799fe11550/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-pr101756.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87a0b607e40f8122c7fc45d496ef48799fe11550/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-pr101756.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-pr101756.c?ref=87a0b607e40f8122c7fc45d496ef48799fe11550", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+\n+__attribute__ ((simd)) int\n+tq (long int ea, int of, int kk)\n+{\n+  int bc;\n+\n+  for (bc = 0; bc < 2; ++bc)\n+    {\n+      ++ea;\n+      of |= !!kk < !!ea;\n+    }\n+\n+  return of;\n+}"}, {"sha": "d169bed8e94d9d63e522f97b3136f81335208fda", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87a0b607e40f8122c7fc45d496ef48799fe11550/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87a0b607e40f8122c7fc45d496ef48799fe11550/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=87a0b607e40f8122c7fc45d496ef48799fe11550", "patch": "@@ -4847,15 +4847,17 @@ static bool\n vectorizable_bb_reduc_epilogue (slp_instance instance,\n \t\t\t\tstmt_vector_for_cost *cost_vec)\n {\n-  enum tree_code reduc_code\n-    = gimple_assign_rhs_code (instance->root_stmts[0]->stmt);\n+  gassign *stmt = as_a <gassign *> (instance->root_stmts[0]->stmt);\n+  enum tree_code reduc_code = gimple_assign_rhs_code (stmt);\n   if (reduc_code == MINUS_EXPR)\n     reduc_code = PLUS_EXPR;\n   internal_fn reduc_fn;\n   tree vectype = SLP_TREE_VECTYPE (SLP_INSTANCE_TREE (instance));\n   if (!reduction_fn_for_scalar_code (reduc_code, &reduc_fn)\n       || reduc_fn == IFN_LAST\n-      || !direct_internal_fn_supported_p (reduc_fn, vectype, OPTIMIZE_FOR_BOTH))\n+      || !direct_internal_fn_supported_p (reduc_fn, vectype, OPTIMIZE_FOR_BOTH)\n+      || !useless_type_conversion_p (TREE_TYPE (gimple_assign_lhs (stmt)),\n+\t\t\t\t     TREE_TYPE (vectype)))\n     return false;\n \n   /* There's no way to cost a horizontal vector reduction via REDUC_FN so"}]}