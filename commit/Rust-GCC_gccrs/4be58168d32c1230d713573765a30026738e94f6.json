{"sha": "4be58168d32c1230d713573765a30026738e94f6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGJlNTgxNjhkMzJjMTIzMGQ3MTM1NzM3NjVhMzAwMjY3MzhlOTRmNg==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2003-11-20T19:32:13Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2003-11-20T19:32:13Z"}, "message": "re PR libstdc++/13109 (libstdc++-v3 bootstrap failure on Tru64 UNIX V4.0F: snprintf missing)\n\n\n2003-11-20  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tPR libstdc++/13109\n\t* include/debug/formatter.h (_Error_formatter::_M_format_word): New.\n\t* src/debug.cc (__gnu_debug): Format.\n\t(_Error_formatter::_M_format_word): Define, use, instantiate.\n\nFrom-SVN: r73770", "tree": {"sha": "919ec5c55f0b8b4cd9b0904b9c5a8330dae945e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/919ec5c55f0b8b4cd9b0904b9c5a8330dae945e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4be58168d32c1230d713573765a30026738e94f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4be58168d32c1230d713573765a30026738e94f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4be58168d32c1230d713573765a30026738e94f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4be58168d32c1230d713573765a30026738e94f6/comments", "author": null, "committer": null, "parents": [{"sha": "0fd1870171ae93d025808cd060ea6e9c47a31727", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fd1870171ae93d025808cd060ea6e9c47a31727", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fd1870171ae93d025808cd060ea6e9c47a31727"}], "stats": {"total": 689, "additions": 377, "deletions": 312}, "files": [{"sha": "7263ff84719e425f40abe158c3dca077bdfae521", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4be58168d32c1230d713573765a30026738e94f6/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4be58168d32c1230d713573765a30026738e94f6/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4be58168d32c1230d713573765a30026738e94f6", "patch": "@@ -1,3 +1,10 @@\n+2003-11-20  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\tPR libstdc++/13109\n+\t* include/debug/formatter.h (_Error_formatter::_M_format_word): New.\n+\t* src/debug.cc (__gnu_debug): Format. \n+\t(_Error_formatter::_M_format_word): Define, use, instantiate.\n+\n 2003-11-20  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR libstdc++/11602"}, {"sha": "a6b3c770525b4e91e1e04cb1de2e28f8942b3865", "filename": "libstdc++-v3/include/debug/formatter.h", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4be58168d32c1230d713573765a30026738e94f6/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fformatter.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4be58168d32c1230d713573765a30026738e94f6/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fformatter.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fformatter.h?ref=4be58168d32c1230d713573765a30026738e94f6", "patch": "@@ -191,15 +191,13 @@ namespace __gnu_debug\n \n       _Parameter() : _M_kind(__unused_param) { }\n       \n-      _Parameter(long __value, const char* __name) \n-      : _M_kind(__integer)\n+      _Parameter(long __value, const char* __name) : _M_kind(__integer)\n       { \n \t_M_variant._M_integer._M_name = __name;\n \t_M_variant._M_integer._M_value = __value; \n       }\n \n-      _Parameter(const char* __value, const char* __name)\n-      : _M_kind(__string)\n+      _Parameter(const char* __value, const char* __name) : _M_kind(__string)\n       {\n \t_M_variant._M_string._M_name = __name;\n \t_M_variant._M_string._M_value = __value; \n@@ -276,7 +274,7 @@ namespace __gnu_debug\n \t}\n \n       template<typename _Sequence>\n-        _Parameter(const _Safe_sequence<_Sequence>& __seq,\n+        _Parameter(const _Safe_sequence<_Sequence>& __seq, \n \t\t   const char* __name, _Is_sequence)\n \t: _M_kind(__sequence)\n         {\n@@ -358,6 +356,10 @@ namespace __gnu_debug\n       _M_max_length(78), _M_column(1), _M_first_line(true), _M_wordwrap(false)\n     { }\n \n+    template<typename _T>\n+      void\n+      _M_format_word(char*, int, const char*, _T) const;\n+\n     void \n     _M_print_word(const char* __word) const;\n "}, {"sha": "a00a2508c3eea87b3bf07201fa95d773d19d8979", "filename": "libstdc++-v3/src/debug.cc", "status": "modified", "additions": 363, "deletions": 307, "changes": 670, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4be58168d32c1230d713573765a30026738e94f6/libstdc%2B%2B-v3%2Fsrc%2Fdebug.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4be58168d32c1230d713573765a30026738e94f6/libstdc%2B%2B-v3%2Fsrc%2Fdebug.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fdebug.cc?ref=4be58168d32c1230d713573765a30026738e94f6", "patch": "@@ -46,45 +46,60 @@ namespace __gnu_debug\n   {\n     \"function requires a valid iterator range [%1.name;, %2.name;)\",\n     \"attempt to insert into container with a singular iterator\",\n-    \"attempt to insert into container with an iterator from a different container\",\n+    \"attempt to insert into container with an iterator\"\n+    \" from a different container\",\n     \"attempt to erase from container with a %2.state; iterator\",\n-    \"attempt to erase from container with an iterator from a different container\",\n-    \"attempt to subscript container with out-of-bounds index %2;, but container only holds %3; elements\",\n+    \"attempt to erase from container with an iterator\"\n+    \" from a different container\",\n+    \"attempt to subscript container with out-of-bounds index %2;,\"\n+    \" but container only holds %3; elements\",\n     \"attempt to access an element in an empty container\",\n-    \"elements in iterator range [%1.name;, %2.name;) are not partitioned by the value %3;\",\n-    \"elements in iterator range [%1.name;, %2.name;) are not partitioned by the predicate %3; and value %4;\",\n+    \"elements in iterator range [%1.name;, %2.name;)\"\n+    \" are not partitioned by the value %3;\",\n+    \"elements in iterator range [%1.name;, %2.name;)\"\n+    \" are not partitioned by the predicate %3; and value %4;\",\n     \"elements in iterator range [%1.name;, %2.name;) are not sorted\",\n-    \"elements in iterator range [%1.name;, %2.name;) are not sorted according to the predicate %3;\",\n+    \"elements in iterator range [%1.name;, %2.name;)\"\n+    \" are not sorted according to the predicate %3;\",\n     \"elements in iterator range [%1.name;, %2.name;) do not form a heap\",\n-    \"elements in iterator range [%1.name;, %2.name;) do not form a heap with respect to the predicate %3;\",\n+    \"elements in iterator range [%1.name;, %2.name;)\"\n+    \" do not form a heap with respect to the predicate %3;\",\n     \"attempt to write through a singular bitset reference\",\n     \"attempt to read from a singular bitset reference\",\n     \"attempt to flip a singular bitset reference\",\n     \"attempt to splice a list into itself\",\n     \"attempt to splice lists with inequal allocators\",\n     \"attempt to splice elements referenced by a %1.state; iterator\",\n     \"attempt to splice an iterator from a different container\",\n-    \"splice destination %1.name; occurs within source range [%2.name;, %3.name;)\",\n+    \"splice destination %1.name;\"\n+    \" occurs within source range [%2.name;, %3.name;)\",\n     \"attempt to initialize an iterator that will immediately become singular\",\n     \"attempt to copy-construct an iterator from a singular iterator\",\n-    \"attempt to construct a constant iterator from a singular mutable iterator\",\n+    \"attempt to construct a constant iterator\"\n+    \" from a singular mutable iterator\",\n     \"attempt to copy from a singular iterator\",\n     \"attempt to dereference a %1.state; iterator\",\n     \"attempt to increment a %1.state; iterator\",\n     \"attempt to decrement a %1.state; iterator\",\n-    \"attempt to subscript a %1.state; iterator %2; step from its current position, which falls outside its dereferenceable range\",\n-    \"attempt to advance a %1.state; iterator %2; steps, which falls outside its valid range\",\n-    \"attempt to retreat a %1.state; iterator %2; steps, which falls outside its valid range\",\n+    \"attempt to subscript a %1.state; iterator %2; step from\"\n+    \" its current position, which falls outside its dereferenceable range\",\n+    \"attempt to advance a %1.state; iterator %2; steps,\"\n+    \" which falls outside its valid range\",\n+    \"attempt to retreat a %1.state; iterator %2; steps,\"\n+    \" which falls outside its valid range\",\n     \"attempt to compare a %1.state; iterator to a %2.state; iterator\",\n     \"attempt to compare iterators from different sequences\",\n     \"attempt to order a %1.state; iterator to a %2.state; iterator\",\n     \"attempt to order iterators from different sequences\",\n-    \"attempt to compute the difference between a %1.state; iterator to a %2.state; iterator\",\n-    \"attempt to compute the different between two iterators from different sequences\",\n+    \"attempt to compute the difference between a %1.state;\"\n+    \" iterator to a %2.state; iterator\",\n+    \"attempt to compute the different between two iterators\"\n+    \" from different sequences\",\n     \"attempt to dereference an end-of-stream istream_iterator\",\n     \"attempt to increment an end-of-stream istream_iterator\",\n     \"attempt to output via an ostream_iterator with no associated stream\",\n-    \"attempt to dereference an end-of-stream istreambuf_iterator (this is a GNU extension)\",\n+    \"attempt to dereference an end-of-stream istreambuf_iterator\"\n+    \" (this is a GNU extension)\",\n     \"attempt to increment an end-of-stream istreambuf_iterator\"\n   };\n \n@@ -93,58 +108,57 @@ namespace __gnu_debug\n   _M_detach_all()\n   {\n     for (_Safe_iterator_base* iter = _M_iterators; iter; )\n-    {\n-      _Safe_iterator_base* old = iter;\n-      iter = iter->_M_next;\n-      old->_M_attach(0, false);\n-    }\n+      {\n+\t_Safe_iterator_base* old = iter;\n+\titer = iter->_M_next;\n+\told->_M_attach(0, false);\n+      }\n     \n     for (_Safe_iterator_base* iter = _M_const_iterators; iter; )\n-    {\n-      _Safe_iterator_base* old = iter;\n-      iter = iter->_M_next;\n-      old->_M_attach(0, true);\n-    }\n+      {\n+\t_Safe_iterator_base* old = iter;\n+\titer = iter->_M_next;\n+\told->_M_attach(0, true);\n+      }\n   }\n \n   void \n   _Safe_sequence_base::\n   _M_detach_singular()\n   {\n     for (_Safe_iterator_base* iter = _M_iterators; iter; )\n-    {\n-      _Safe_iterator_base* old = iter;\n-      iter = iter->_M_next;\n-      if (old->_M_singular())\n-\told->_M_attach(0, false);\n-    }\n+      {\n+\t_Safe_iterator_base* old = iter;\n+\titer = iter->_M_next;\n+\tif (old->_M_singular())\n+\t  old->_M_attach(0, false);\n+      }\n \n     for (_Safe_iterator_base* iter = _M_const_iterators; iter; )\n-    {\n-      _Safe_iterator_base* old = iter;\n-      iter = iter->_M_next;\n-      if (old->_M_singular())\n-\told->_M_attach(0, true);\n-    }\n+      {\n+\t_Safe_iterator_base* old = iter;\n+\titer = iter->_M_next;\n+\tif (old->_M_singular())\n+\t  old->_M_attach(0, true);\n+      }\n   }\n-\n+  \n   void \n   _Safe_sequence_base::\n   _M_revalidate_singular()\n   {\n-    for (_Safe_iterator_base* iter = _M_iterators; iter;\n-\t iter = iter->_M_next)\n-    {\n-      iter->_M_version = _M_version;\n-      iter = iter->_M_next;\n-    }\n+    _Safe_iterator_base* iter;\n+    for (iter = _M_iterators; iter; iter = iter->_M_next)\n+      {\n+\titer->_M_version = _M_version;\n+\titer = iter->_M_next;\n+      }\n     \n-    for (_Safe_iterator_base* iter = _M_const_iterators; iter;\n-\t iter = iter->_M_next)\n-    {\n-      iter->_M_version = _M_version;\n-      iter = iter->_M_next;\n-    }\n+    for (iter = _M_const_iterators; iter; iter = iter->_M_next)\n+      {\n+\titer->_M_version = _M_version;\n+\titer = iter->_M_next;\n+      }\n   }\n \n   void \n@@ -154,13 +168,14 @@ namespace __gnu_debug\n     swap(_M_iterators, __x._M_iterators);\n     swap(_M_const_iterators, __x._M_const_iterators);\n     swap(_M_version, __x._M_version);\n-    for (_Safe_iterator_base* iter = _M_iterators; iter; iter = iter->_M_next)\n+    _Safe_iterator_base* iter;\n+    for (iter = _M_iterators; iter; iter = iter->_M_next)\n       iter->_M_sequence = this;\n-    for (_Safe_iterator_base* iter = __x._M_iterators; iter; iter = iter->_M_next)\n+    for (iter = __x._M_iterators; iter; iter = iter->_M_next)\n       iter->_M_sequence = &__x;\n-    for (_Safe_iterator_base* iter = _M_const_iterators; iter; iter = iter->_M_next)\n+    for (iter = _M_const_iterators; iter; iter = iter->_M_next)\n       iter->_M_sequence = this;\n-    for (_Safe_iterator_base* iter = __x._M_const_iterators; iter; iter = iter->_M_next)\n+    for (iter = __x._M_const_iterators; iter; iter = iter->_M_next)\n       iter->_M_sequence = &__x;\n   }\n   \n@@ -172,42 +187,44 @@ namespace __gnu_debug\n     \n     // Attach to the new sequence (if there is one)\n     if (__seq)\n-    {\n-      _M_sequence = __seq;\n-      _M_version = _M_sequence->_M_version;\n-      _M_prior = 0;\n-      if (__constant)\n-      {\n-\t_M_next = _M_sequence->_M_const_iterators;\n-\tif (_M_next)\n-\t  _M_next->_M_prior = this;\n-\t_M_sequence->_M_const_iterators = this;\n-      }\n-      else\n       {\n-\t_M_next = _M_sequence->_M_iterators;\n-\tif (_M_next)\n-\t  _M_next->_M_prior = this;\n-\t_M_sequence->_M_iterators = this;\n+\t_M_sequence = __seq;\n+\t_M_version = _M_sequence->_M_version;\n+\t_M_prior = 0;\n+\tif (__constant)\n+\t  {\n+\t    _M_next = _M_sequence->_M_const_iterators;\n+\t    if (_M_next)\n+\t      _M_next->_M_prior = this;\n+\t    _M_sequence->_M_const_iterators = this;\n+\t  }\n+\telse\n+\t  {\n+\t    _M_next = _M_sequence->_M_iterators;\n+\t    if (_M_next)\n+\t      _M_next->_M_prior = this;\n+\t    _M_sequence->_M_iterators = this;\n+\t  }\n       }\n-    }\n   }\n \n   void \n   _Safe_iterator_base::\n   _M_detach()\n   {\n     if (_M_sequence)\n-    {\n-      // Remove us from this sequence's list\n-      if (_M_prior) _M_prior->_M_next = _M_next;\n-      if (_M_next)  _M_next->_M_prior = _M_prior;\n-      \n-      if (_M_sequence->_M_const_iterators == this)\n-\t_M_sequence->_M_const_iterators = _M_next;\n-      if (_M_sequence->_M_iterators == this)\n-\t_M_sequence->_M_iterators = _M_next;\n-    }\n+      {\n+\t// Remove us from this sequence's list\n+\tif (_M_prior) \n+\t  _M_prior->_M_next = _M_next;\n+\tif (_M_next)  \n+\t  _M_next->_M_prior = _M_prior;\n+\t\n+\tif (_M_sequence->_M_const_iterators == this)\n+\t  _M_sequence->_M_const_iterators = _M_next;\n+\tif (_M_sequence->_M_iterators == this)\n+\t  _M_sequence->_M_iterators = _M_next;\n+      }\n \n     _M_sequence = 0;\n     _M_version = 0;\n@@ -224,122 +241,124 @@ namespace __gnu_debug\n   _Safe_iterator_base::\n   _M_can_compare(const _Safe_iterator_base& __x) const\n   {\n-    return (! _M_singular() && !__x._M_singular()\n+    return (!_M_singular() && !__x._M_singular() \n \t    && _M_sequence == __x._M_sequence);\n   }\n \n   void\n   _Error_formatter::_Parameter::\n-  _M_print_field(const _Error_formatter* __formatter,\n-\t\t const char* __name) const\n+  _M_print_field(const _Error_formatter* __formatter, const char* __name) const\n   {\n     assert(this->_M_kind != _Parameter::__unused_param);\n     const int bufsize = 64;\n     char buf[bufsize];\n     \n     if (_M_kind == __iterator)\n-    {\n-      if (strcmp(__name, \"name\") == 0)\n-      {\n-\tassert(_M_variant._M_iterator._M_name);\n-\t__formatter->_M_print_word(_M_variant._M_iterator._M_name);\n-      }\n-      else if (strcmp(__name, \"address\") == 0)\n-      {\n-\tsnprintf(buf, bufsize, \"%p\", _M_variant._M_iterator._M_address);\n-\t__formatter->_M_print_word(buf);\n-      }\n-      else if (strcmp(__name, \"type\") == 0)\n-      {\n-\tassert(_M_variant._M_iterator._M_type);\n-\t// TBD: demangle!\n-\t__formatter->_M_print_word(_M_variant._M_iterator._M_type->name());\n-      }\n-      else if (strcmp(__name, \"constness\") == 0)\n-      {\n-\tstatic const char* __constness_names[__last_constness] =\n-\t{\n-\t  \"<unknown>\",\n-\t  \"constant\",\n-\t  \"mutable\"\n-\t};\n-\t__formatter->_M_print_word(__constness_names[_M_variant._M_iterator._M_constness]);\n-      }\n-      else if (strcmp(__name, \"state\") == 0)\n-      {\n-\tstatic const char* __state_names[__last_state] = \n-\t{\n-\t  \"<unknown>\",\n-\t  \"singular\",\n-\t  \"dereferenceable (start-of-sequence)\",\n-\t  \"dereferenceable\",\n-\t  \"past-the-end\"\n-\t};\n-\t__formatter->_M_print_word(__state_names[_M_variant._M_iterator._M_state]);\n-      }\n-      else if (strcmp(__name, \"sequence\") == 0)\n       {\n-\tassert(_M_variant._M_iterator._M_sequence);\n-\tsnprintf(buf, bufsize, \"%p\", _M_variant._M_iterator._M_sequence);\n-\t__formatter->_M_print_word(buf);\n-      }\n-      else if (strcmp(__name, \"seq_type\") == 0)\n-      {\n-\t// TBD: demangle!\n-\tassert(_M_variant._M_iterator._M_seq_type);\n-\t__formatter->_M_print_word(_M_variant._M_iterator._M_seq_type->name());\n+\tif (strcmp(__name, \"name\") == 0)\n+\t  {\n+\t    assert(_M_variant._M_iterator._M_name);\n+\t    __formatter->_M_print_word(_M_variant._M_iterator._M_name);\n+\t  }\n+\telse if (strcmp(__name, \"address\") == 0)\n+\t  {\n+\t    __formatter->_M_format_word(buf, bufsize, \"%p\", \n+\t\t\t\t\t_M_variant._M_iterator._M_address);\n+\t    __formatter->_M_print_word(buf);\n+\t  }\n+\telse if (strcmp(__name, \"type\") == 0)\n+\t  {\n+\t    assert(_M_variant._M_iterator._M_type);\n+\t    // TBD: demangle!\n+\t    __formatter->_M_print_word(_M_variant._M_iterator._M_type->name());\n+\t  }\n+\telse if (strcmp(__name, \"constness\") == 0)\n+\t  {\n+\t    static const char* __constness_names[__last_constness] =\n+\t      {\n+\t\t\"<unknown>\",\n+\t\t\"constant\",\n+\t\t\"mutable\"\n+\t      };\n+\t    __formatter->_M_print_word(__constness_names[_M_variant._M_iterator._M_constness]);\n+\t  }\n+\telse if (strcmp(__name, \"state\") == 0)\n+\t  {\n+\t    static const char* __state_names[__last_state] = \n+\t      {\n+\t\t\"<unknown>\",\n+\t\t\"singular\",\n+\t\t\"dereferenceable (start-of-sequence)\",\n+\t\t\"dereferenceable\",\n+\t\t\"past-the-end\"\n+\t      };\n+\t    __formatter->_M_print_word(__state_names[_M_variant._M_iterator._M_state]);\n+\t  }\n+\telse if (strcmp(__name, \"sequence\") == 0)\n+\t  {\n+\t    assert(_M_variant._M_iterator._M_sequence);\n+\t    __formatter->_M_format_word(buf, bufsize, \"%p\", \n+\t\t\t\t\t_M_variant._M_iterator._M_sequence);\n+\t    __formatter->_M_print_word(buf);\n+\t  }\n+\telse if (strcmp(__name, \"seq_type\") == 0)\n+\t  {\n+\t    // TBD: demangle!\n+\t    assert(_M_variant._M_iterator._M_seq_type);\n+\t    __formatter->_M_print_word(_M_variant._M_iterator._M_seq_type->name());\n+\t  }\n+\telse\n+\t  assert(false);\n       }\n-      else\n-\tassert(false);\n-    }\n     else if (_M_kind == __sequence)\n-    {\n-      if (strcmp(__name, \"name\") == 0)\n-      {\n-\tassert(_M_variant._M_sequence._M_name);\n-\t__formatter->_M_print_word(_M_variant._M_sequence._M_name);\n-      }\n-      else if (strcmp(__name, \"address\") == 0)\n-      {\n-\tassert(_M_variant._M_sequence._M_address);\n-\tsnprintf(buf, bufsize, \"%p\", _M_variant._M_sequence._M_address);\n-\t__formatter->_M_print_word(buf);\n-      }\n-      else if (strcmp(__name, \"type\") == 0)\n       {\n-\t// TBD: demangle!\n-\tassert(_M_variant._M_sequence._M_type);\n-\t__formatter->_M_print_word(_M_variant._M_sequence._M_type->name());\n+\tif (strcmp(__name, \"name\") == 0)\n+\t  {\n+\t    assert(_M_variant._M_sequence._M_name);\n+\t    __formatter->_M_print_word(_M_variant._M_sequence._M_name);\n+\t  }\n+\telse if (strcmp(__name, \"address\") == 0)\n+\t  {\n+\t    assert(_M_variant._M_sequence._M_address);\n+\t    __formatter->_M_format_word(buf, bufsize, \"%p\", \n+\t\t\t\t\t_M_variant._M_sequence._M_address);\n+\t    __formatter->_M_print_word(buf);\n+\t  }\n+\telse if (strcmp(__name, \"type\") == 0)\n+\t  {\n+\t    // TBD: demangle!\n+\t    assert(_M_variant._M_sequence._M_type);\n+\t    __formatter->_M_print_word(_M_variant._M_sequence._M_type->name());\n+\t  }\n+\telse\n+\t  assert(false);\n       }\n-      else\n-\tassert(false);\n-    }\n     else if (_M_kind == __integer)\n-    {\n-      if (strcmp(__name, \"name\") == 0)\n       {\n-\tassert(_M_variant._M_integer._M_name);\n-\t__formatter->_M_print_word(_M_variant._M_integer._M_name);\n-      }\n-      else\n+\tif (strcmp(__name, \"name\") == 0)\n+\t  {\n+\t    assert(_M_variant._M_integer._M_name);\n+\t    __formatter->_M_print_word(_M_variant._M_integer._M_name);\n+\t  }\n+\telse\n \tassert(false);\n-    }\n+      }\n     else if (_M_kind == __string)\n-    {\n-      if (strcmp(__name, \"name\") == 0)\n       {\n-\tassert(_M_variant._M_string._M_name);\n-\t__formatter->_M_print_word(_M_variant._M_string._M_name);\n+\tif (strcmp(__name, \"name\") == 0)\n+\t  {\n+\t    assert(_M_variant._M_string._M_name);\n+\t    __formatter->_M_print_word(_M_variant._M_string._M_name);\n+\t  }\n+\telse\n+\t  assert(false);\n       }\n-      else\n-\tassert(false);\n-    }\n     else\n-    {\n-      assert(false);\n-    }\n+      {\n+\tassert(false);\n+      }\n   }\n-\n+  \n   void\n   _Error_formatter::_Parameter::\n   _M_print_description(const _Error_formatter* __formatter) const\n@@ -348,76 +367,77 @@ namespace __gnu_debug\n     char buf[bufsize];\n     \n     if (_M_kind == __iterator)\n-    {\n-      __formatter->_M_print_word(\"iterator \");\n-      if (_M_variant._M_iterator._M_name)\n       {\n-\tsnprintf(buf, bufsize, \"\\\"%s\\\" \", \n-\t\t _M_variant._M_iterator._M_name);\n+\t__formatter->_M_print_word(\"iterator \");\n+\tif (_M_variant._M_iterator._M_name)\n+\t  {\n+\t    __formatter->_M_format_word(buf, bufsize, \"\\\"%s\\\" \", \n+\t\t\t\t\t_M_variant._M_iterator._M_name);\n+\t    __formatter->_M_print_word(buf);\n+\t  }\n+\t\n+\t__formatter->_M_format_word(buf, bufsize, \"@ 0x%p {\\n\", \n+\t\t\t\t    _M_variant._M_iterator._M_address);\n \t__formatter->_M_print_word(buf);\n-      }\n-      \n-      snprintf(buf, bufsize, \"@ 0x%p {\\n\", \n-\t       _M_variant._M_iterator._M_address);\n-      __formatter->_M_print_word(buf);\n-      if (_M_variant._M_iterator._M_type)\n-      {\n-\t__formatter->_M_print_word(\"type = \");\n-\t_M_print_field(__formatter, \"type\");\n+\tif (_M_variant._M_iterator._M_type)\n+\t  {\n+\t    __formatter->_M_print_word(\"type = \");\n+\t    _M_print_field(__formatter, \"type\");\n+\t    \n+\t    if (_M_variant._M_iterator._M_constness != __unknown_constness)\n+\t      {\n+\t\t__formatter->_M_print_word(\" (\");\n+\t\t_M_print_field(__formatter, \"constness\");\n+\t\t__formatter->_M_print_word(\" iterator)\");\n+\t      }\n+\t    __formatter->_M_print_word(\";\\n\");\n+\t  }\n \t\n-\tif (_M_variant._M_iterator._M_constness != __unknown_constness)\n-\t{\n-\t  __formatter->_M_print_word(\" (\");\n-\t  _M_print_field(__formatter, \"constness\");\n-\t  __formatter->_M_print_word(\" iterator)\");\n-\t}\n-\t__formatter->_M_print_word(\";\\n\");\n-      }\n-      \n-      if (_M_variant._M_iterator._M_state != __unknown_state)\n-      {\n-\t__formatter->_M_print_word(\"  state = \");\n-\t_M_print_field(__formatter, \"state\");\n-\t__formatter->_M_print_word(\";\\n\");\n-      }\n-\n-      if (_M_variant._M_iterator._M_sequence)\n-      {\n-\t__formatter->_M_print_word(\"  references sequence \");\n-\tif (_M_variant._M_iterator._M_seq_type)\n-\t{\n-\t  __formatter->_M_print_word(\"with type `\");\n-\t  _M_print_field(__formatter, \"seq_type\");\n-\t  __formatter->_M_print_word(\"' \");\n-\t}\n+\tif (_M_variant._M_iterator._M_state != __unknown_state)\n+\t  {\n+\t    __formatter->_M_print_word(\"  state = \");\n+\t    _M_print_field(__formatter, \"state\");\n+\t    __formatter->_M_print_word(\";\\n\");\n+\t  }\n \t\n-\tsnprintf(buf, bufsize, \"@ 0x%p\\n\", _M_variant._M_sequence._M_address);\n-\t__formatter->_M_print_word(buf);\n+\tif (_M_variant._M_iterator._M_sequence)\n+\t  {\n+\t    __formatter->_M_print_word(\"  references sequence \");\n+\t    if (_M_variant._M_iterator._M_seq_type)\n+\t      {\n+\t\t__formatter->_M_print_word(\"with type `\");\n+\t\t_M_print_field(__formatter, \"seq_type\");\n+\t\t__formatter->_M_print_word(\"' \");\n+\t      }\n+\t    \n+\t    __formatter->_M_format_word(buf, bufsize, \"@ 0x%p\\n\", \n+\t\t\t\t\t_M_variant._M_sequence._M_address);\n+\t    __formatter->_M_print_word(buf);\n+\t  }\n+\t__formatter->_M_print_word(\"}\\n\");\n       }\n-      __formatter->_M_print_word(\"}\\n\");\n-    }\n     else if (_M_kind == __sequence)\n-    {\n-      __formatter->_M_print_word(\"sequence \");\n-      if (_M_variant._M_sequence._M_name)\n       {\n-\tsnprintf(buf, bufsize, \"\\\"%s\\\" \", \n-\t\t _M_variant._M_sequence._M_name);\n+\t__formatter->_M_print_word(\"sequence \");\n+\tif (_M_variant._M_sequence._M_name)\n+\t  {\n+\t    __formatter->_M_format_word(buf, bufsize, \"\\\"%s\\\" \", \n+\t\t\t\t\t_M_variant._M_sequence._M_name);\n+\t    __formatter->_M_print_word(buf);\n+\t  }\n+\t\n+\t__formatter->_M_format_word(buf, bufsize, \"@ 0x%p {\\n\", \n+\t\t\t\t    _M_variant._M_sequence._M_address);\n \t__formatter->_M_print_word(buf);\n+\t\n+\tif (_M_variant._M_sequence._M_type)\n+\t  {\n+\t    __formatter->_M_print_word(\"  type = \");\n+\t    _M_print_field(__formatter, \"type\");\n+\t    __formatter->_M_print_word(\";\\n\");\n+\t  }\t  \n+\t__formatter->_M_print_word(\"}\\n\");\n       }\n-      \n-      snprintf(buf, bufsize, \"@ 0x%p {\\n\", \n-\t       _M_variant._M_sequence._M_address);\n-      __formatter->_M_print_word(buf);\n-      \n-      if (_M_variant._M_sequence._M_type)\n-      {\n-\t__formatter->_M_print_word(\"  type = \");\n-\t_M_print_field(__formatter, \"type\");\n-\t__formatter->_M_print_word(\";\\n\");\n-      }\t  \n-      __formatter->_M_print_word(\"}\\n\");\n-    }\n   }\n \n   const _Error_formatter&\n@@ -434,18 +454,18 @@ namespace __gnu_debug\n     _M_column = 1;\n     _M_wordwrap = false;\n     if (_M_file)\n-    {\n-      snprintf(buf, bufsize, \"%s:\", _M_file);\n-      _M_print_word(buf);\n-      _M_column += strlen(buf);\n-    }\n+      {\n+\t_M_format_word(buf, bufsize, \"%s:\", _M_file);\n+\t_M_print_word(buf);\n+\t_M_column += strlen(buf);\n+      }\n     \n     if (_M_line > 0)\n-    {\n-      snprintf(buf, bufsize, \"%u:\", _M_line);\n-      _M_print_word(buf);\n-      _M_column += strlen(buf);\n-    }\n+      {\n+\t_M_format_word(buf, bufsize, \"%u:\", _M_line);\n+\t_M_print_word(buf);\n+\t_M_column += strlen(buf);\n+      }\n     \n     _M_wordwrap = true;\n     _M_print_word(\"error: \");\n@@ -459,65 +479,79 @@ namespace __gnu_debug\n     _M_wordwrap = false;\n     bool has_noninteger_parameters = false;\n     for (unsigned int i = 0; i < _M_num_parameters; ++i)\n-    {\n-      if (_M_parameters[i]._M_kind == _Parameter::__iterator\n-\t  || _M_parameters[i]._M_kind == _Parameter::__sequence)\n       {\n-\tif (!has_noninteger_parameters)\n-\t{\n-\t  _M_first_line = true;\n-\t  _M_print_word(\"\\nObjects involved in the operation:\\n\");\n-\t  has_noninteger_parameters = true;\n-\t}\n-\t_M_parameters[i]._M_print_description(this);\n+\tif (_M_parameters[i]._M_kind == _Parameter::__iterator\n+\t    || _M_parameters[i]._M_kind == _Parameter::__sequence)\n+\t  {\n+\t    if (!has_noninteger_parameters)\n+\t      {\n+\t\t_M_first_line = true;\n+\t\t_M_print_word(\"\\nObjects involved in the operation:\\n\");\n+\t\thas_noninteger_parameters = true;\n+\t      }\n+\t    _M_parameters[i]._M_print_description(this);\n+\t  }\n       }\n-    }\n     \n     abort();\n   }\n \n+  template<typename _T>\n+    void\n+    _Error_formatter::_M_format_word(char* __buf, \n+\t\t\t\t     int __n __attribute__((__unused__)), \n+\t\t\t\t     const char* __fmt, _T __s) const\n+    {\n+#ifdef _GLIBCXX_USE_C99\n+      std::snprintf(__buf, __n, __fmt, __s);\n+#else\n+      std::sprintf(__buf, __fmt, __s);\n+#endif\n+    }\n+\n+  \n   void \n   _Error_formatter::_M_print_word(const char* __word) const\n   {\n     if (!_M_wordwrap) \n-    {\n-      fprintf(stderr, \"%s\", __word);\n-      return;\n-    }\n+      {\n+\tfprintf(stderr, \"%s\", __word);\n+\treturn;\n+      }\n     \n     size_t __length = strlen(__word);\n     if (__length == 0)\n       return;\n     \n     if ((_M_column + __length < _M_max_length)\n \t|| (__length >= _M_max_length && _M_column == 1)) \n-    {\n-      // If this isn't the first line, indent\n-      if (_M_column == 1 && !_M_first_line)\n       {\n-\tchar spacing[_M_indent + 1];\n-\tfor (int i = 0; i < _M_indent; ++i)\n-\t  spacing[i] = ' ';\n-\tspacing[_M_indent] = '\\0';\n-\tfprintf(stderr, \"%s\", spacing);\n-\t_M_column += _M_indent;\n+\t// If this isn't the first line, indent\n+\tif (_M_column == 1 && !_M_first_line)\n+\t  {\n+\t    char spacing[_M_indent + 1];\n+\t    for (int i = 0; i < _M_indent; ++i)\n+\t      spacing[i] = ' ';\n+\t    spacing[_M_indent] = '\\0';\n+\t    fprintf(stderr, \"%s\", spacing);\n+\t    _M_column += _M_indent;\n+\t  }\n+\t\n+\tfprintf(stderr, \"%s\", __word);\n+\t_M_column += __length;\n+\t\n+\tif (__word[__length - 1] == '\\n') \n+\t  {\n+\t    _M_first_line = false;\n+\t    _M_column = 1;\n+\t  }\n       }\n-      \n-      fprintf(stderr, \"%s\", __word);\n-      _M_column += __length;\n-      \n-      if (__word[__length - 1] == '\\n') \n+    else\n       {\n-\t_M_first_line = false;\n \t_M_column = 1;\n+\t_M_print_word(\"\\n\");\n+\t_M_print_word(__word);\n       }\n-    }\n-    else\n-    {\n-      _M_column = 1;\n-      _M_print_word(\"\\n\");\n-      _M_print_word(__word);\n-    }\n   }\n   \n   void\n@@ -530,34 +564,35 @@ namespace __gnu_debug\n     char buf[bufsize];\n \n     while (*__start)\n-    {\n-      if (*__start != '%')\n       {\n-\t// [__start, __end) denotes the next word\n-\t__end = __start;\n-\twhile (isalnum(*__end)) ++__end;\n-\tif (__start == __end) ++__end;\n-\tif (isspace(*__end)) ++__end;\n-\t\n-\tassert(__end - __start + 1< bufsize);\n-\tsnprintf(buf, __end - __start + 1, \"%s\", __start);\n-\t_M_print_word(buf);\n-\t__start = __end;\n-\t\n-\t// Skip extra whitespace\n-\twhile (*__start == ' ') ++__start;\n-\t\n-\tcontinue;\n-      } \n+\tif (*__start != '%')\n+\t  {\n+\t    // [__start, __end) denotes the next word\n+\t    __end = __start;\n+\t    while (isalnum(*__end)) ++__end;\n+\t    if (__start == __end) ++__end;\n+\t    if (isspace(*__end)) ++__end;\n+\t    \n+\t    assert(__end - __start + 1< bufsize);\n+\t    _M_format_word(buf, __end - __start + 1, \"%s\", __start);\n+\t    _M_print_word(buf);\n+\t    __start = __end;\n+\t    \n+\t    // Skip extra whitespace\n+\t    while (*__start == ' ') \n+\t      ++__start;\n+\t    \n+\t    continue;\n+\t  } \n \t\n       ++__start;\n       assert(*__start);\n       if (*__start == '%')\n-      {\n-\t_M_print_word(\"%\");\n-\t++__start;\n-\tcontinue;\n-      }\n+\t{\n+\t  _M_print_word(\"%\");\n+\t  ++__start;\n+\t  continue;\n+\t}\n       \n       // Get the parameter number\n       assert(*__start >= '1' && *__start <= '9');\n@@ -569,14 +604,14 @@ namespace __gnu_debug\n       // name, if there is one.\n       ++__start;\n       if (*__start != '.')\n-      {\n+\t{\n \tassert(*__start == ';');\n \t++__start;\n \tbuf[0] = '\\0';\n \tif (_M_parameters[param]._M_kind == _Parameter::__integer)\n \t{\n-\t  snprintf(buf, bufsize, \"%ld\", \n-\t\t   _M_parameters[param]._M_variant._M_integer._M_value);\n+\t  _M_format_word(buf, bufsize, \"%ld\", \n+\t\t\t _M_parameters[param]._M_variant._M_integer._M_value);\n \t  _M_print_word(buf);\n \t}\n \telse if (_M_parameters[param]._M_kind == _Parameter::__string)\n@@ -601,4 +636,25 @@ namespace __gnu_debug\n       _M_parameters[param]._M_print_field(this, field);\t\t  \n     }\n   }\n+\n+  // Instantiations.\n+  template\n+    void\n+    _Error_formatter::_M_format_word(char* __buf, int __n, const char* __fmt, \n+\t\t\t\t     const void* __s) const;\n+\n+  template\n+    void\n+    _Error_formatter::_M_format_word(char* __buf, int __n, const char* __fmt, \n+\t\t\t\t     long __s) const;\n+\n+  template\n+    void\n+    _Error_formatter::_M_format_word(char* __buf, int __n, const char* __fmt, \n+\t\t\t\t     unsigned int __s) const;\n+\n+  template\n+    void\n+    _Error_formatter::_M_format_word(char* __buf, int __n, const char* __fmt, \n+\t\t\t\t     const char* __s) const;\n } // namespace __gnu_debug"}]}