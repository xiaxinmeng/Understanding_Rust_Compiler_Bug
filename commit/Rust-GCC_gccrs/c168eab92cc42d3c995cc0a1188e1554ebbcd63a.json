{"sha": "c168eab92cc42d3c995cc0a1188e1554ebbcd63a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzE2OGVhYjkyY2M0MmQzYzk5NWNjMGExMTg4ZTE1NTRlYmJjZDYzYQ==", "commit": {"author": {"name": "Ulrich Drepper", "email": "drepper@gmail.com", "date": "2014-12-11T04:31:52Z"}, "committer": {"name": "Ulrich Drepper", "email": "drepper@gcc.gnu.org", "date": "2014-12-11T04:31:52Z"}, "message": "Minor interface cleanups of libgccjit\n\n        Minor interface cleanups of libgccjit\n        * jit/jit-playback.c (convert_to_dso): Use auto_vec instead\n        of automatic array to build up command line.\n        * jit/jit-recording.c (recording::context::set_str_option):\n        Make copy of the string.\n        (recording::context::~context): Free string options.\n        * jit/jit-recording.h (recording::context): Adjust type\n        of m_str_options member.\n        * jit/libgccjit.h: Adjust comment about\n        gcc_jit_context_set_str_option parameter begin used after\n        the call.\n        Update comment now that all interfaces are copy strings\n        if necessary.\n        * jit/libgccjit++.h (gccjit::context): Add set_str_option\n        member function.\n\nFrom-SVN: r218617", "tree": {"sha": "6a17665d977c9ac21479af8adc84e430135b76f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a17665d977c9ac21479af8adc84e430135b76f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c168eab92cc42d3c995cc0a1188e1554ebbcd63a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c168eab92cc42d3c995cc0a1188e1554ebbcd63a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c168eab92cc42d3c995cc0a1188e1554ebbcd63a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c168eab92cc42d3c995cc0a1188e1554ebbcd63a/comments", "author": {"login": "drepper", "id": 2918631, "node_id": "MDQ6VXNlcjI5MTg2MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/2918631?v=4", "gravatar_id": "", "url": "https://api.github.com/users/drepper", "html_url": "https://github.com/drepper", "followers_url": "https://api.github.com/users/drepper/followers", "following_url": "https://api.github.com/users/drepper/following{/other_user}", "gists_url": "https://api.github.com/users/drepper/gists{/gist_id}", "starred_url": "https://api.github.com/users/drepper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/drepper/subscriptions", "organizations_url": "https://api.github.com/users/drepper/orgs", "repos_url": "https://api.github.com/users/drepper/repos", "events_url": "https://api.github.com/users/drepper/events{/privacy}", "received_events_url": "https://api.github.com/users/drepper/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "67dab5e0a39887550a9d8681998ae7c5c723ccb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67dab5e0a39887550a9d8681998ae7c5c723ccb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67dab5e0a39887550a9d8681998ae7c5c723ccb7"}], "stats": {"total": 124, "additions": 79, "deletions": 45}, "files": [{"sha": "2d0f06e3ff241c12d333ed8a4810f29329ccfff5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c168eab92cc42d3c995cc0a1188e1554ebbcd63a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c168eab92cc42d3c995cc0a1188e1554ebbcd63a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c168eab92cc42d3c995cc0a1188e1554ebbcd63a", "patch": "@@ -1,3 +1,21 @@\n+2014-12-10  Ulrich Drepper  <drepper@gmail.com>\n+\n+\tMinor interface cleanups of libgccjit\n+\t* jit/jit-playback.c (convert_to_dso): Use auto_vec instead\n+\tof automatic array to build up command line.\n+\t* jit/jit-recording.c (recording::context::set_str_option):\n+\tMake copy of the string.\n+\t(recording::context::~context): Free string options.\n+\t* jit/jit-recording.h (recording::context): Adjust type\n+\tof m_str_options member.\n+\t* jit/libgccjit.h: Adjust comment about\n+\tgcc_jit_context_set_str_option parameter begin used after\n+\tthe call.\n+\tUpdate comment now that all interfaces are copy strings\n+\tif necessary.\n+\t* jit/libgccjit++.h (gccjit::context): Add set_str_option\n+\tmember function.\n+\n 2014-12-10  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* gdbhooks.py (class DWDieRefPrinter): New class."}, {"sha": "57ff50efa65edd6033a0156e3e7d01c3e764f3c7", "filename": "gcc/jit/jit-playback.c", "status": "modified", "additions": 22, "deletions": 20, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c168eab92cc42d3c995cc0a1188e1554ebbcd63a/gcc%2Fjit%2Fjit-playback.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c168eab92cc42d3c995cc0a1188e1554ebbcd63a/gcc%2Fjit%2Fjit-playback.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-playback.c?ref=c168eab92cc42d3c995cc0a1188e1554ebbcd63a", "patch": "@@ -454,8 +454,8 @@ new_function (location *loc,\n playback::lvalue *\n playback::context::\n new_global (location *loc,\n-            type *type,\n-            const char *name)\n+\t    type *type,\n+\t    const char *name)\n {\n   gcc_assert (type);\n   gcc_assert (name);\n@@ -943,7 +943,7 @@ new_array_access (location *loc,\n       tree t_result = build4 (ARRAY_REF, t_type_star_ptr, t_ptr, t_index,\n \t\t\t      NULL_TREE, NULL_TREE);\n       if (loc)\n-        set_tree_location (t_result, loc);\n+\tset_tree_location (t_result, loc);\n       return new lvalue (this, t_result);\n     }\n   else\n@@ -958,12 +958,12 @@ new_array_access (location *loc,\n \n       tree t_indirection = build1 (INDIRECT_REF, t_type_star_ptr, t_address);\n       if (loc)\n-        {\n-          set_tree_location (t_sizeof, loc);\n-          set_tree_location (t_offset, loc);\n-          set_tree_location (t_address, loc);\n-          set_tree_location (t_indirection, loc);\n-        }\n+\t{\n+\t  set_tree_location (t_sizeof, loc);\n+\t  set_tree_location (t_offset, loc);\n+\t  set_tree_location (t_address, loc);\n+\t  set_tree_location (t_indirection, loc);\n+\t}\n \n       return new lvalue (this, t_indirection);\n     }\n@@ -1331,8 +1331,8 @@ add_assignment (location *loc,\n   if (TREE_TYPE (t_rvalue) != TREE_TYPE (t_lvalue))\n     {\n       t_rvalue = build1 (CONVERT_EXPR,\n-\t\t         TREE_TYPE (t_lvalue),\n-\t\t         t_rvalue);\n+\t\t\t TREE_TYPE (t_lvalue),\n+\t\t\t t_rvalue);\n       if (loc)\n \tset_tree_location (t_rvalue, loc);\n     }\n@@ -1818,18 +1818,19 @@ convert_to_dso (const char *ctxt_progname)\n      TV_ASSEMBLE.  */\n   auto_timevar assemble_timevar (TV_ASSEMBLE);\n   const char *errmsg;\n-  const char *argv[7];\n+  auto_vec <const char *> argvec;\n+#define ADD_ARG(arg) argvec.safe_push (arg)\n   int exit_status = 0;\n   int err = 0;\n   const char *gcc_driver_name = GCC_DRIVER_NAME;\n \n-  argv[0] = gcc_driver_name;\n-  argv[1] = \"-shared\";\n+  ADD_ARG (gcc_driver_name);\n+  ADD_ARG (\"-shared\");\n   /* The input: assembler.  */\n-  argv[2] = m_tempdir->get_path_s_file ();\n+  ADD_ARG (m_tempdir->get_path_s_file ());\n   /* The output: shared library.  */\n-  argv[3] = \"-o\";\n-  argv[4] = m_tempdir->get_path_so_file ();\n+  ADD_ARG (\"-o\");\n+  ADD_ARG (m_tempdir->get_path_so_file ());\n \n   /* Don't use the linker plugin.\n      If running with just a \"make\" and not a \"make install\", then we'd\n@@ -1838,17 +1839,17 @@ convert_to_dso (const char *ctxt_progname)\n      libto_plugin is a .la at build time, with it becoming installed with\n      \".so\" suffix: i.e. it doesn't exist with a .so suffix until install\n      time.  */\n-  argv[5] = \"-fno-use-linker-plugin\";\n+  ADD_ARG (\"-fno-use-linker-plugin\");\n \n   /* pex argv arrays are NULL-terminated.  */\n-  argv[6] = NULL;\n+  ADD_ARG (NULL);\n \n   /* pex_one's error-handling requires pname to be non-NULL.  */\n   gcc_assert (ctxt_progname);\n \n   errmsg = pex_one (PEX_SEARCH, /* int flags, */\n \t\t    gcc_driver_name,\n-\t\t    const_cast<char * const *> (argv),\n+\t\t    const_cast <char *const *> (argvec.address ()),\n \t\t    ctxt_progname, /* const char *pname */\n \t\t    NULL, /* const char *outname */\n \t\t    NULL, /* const char *errname */\n@@ -1875,6 +1876,7 @@ convert_to_dso (const char *ctxt_progname)\n \t\t getenv (\"PATH\"));\n       return;\n     }\n+#undef ADD_ARG\n }\n \n /* Dynamically-link the built DSO file into this process, using dlopen."}, {"sha": "9d6d26a92a1bfe759808fcff22e01486ef9a2af7", "filename": "gcc/jit/jit-recording.c", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c168eab92cc42d3c995cc0a1188e1554ebbcd63a/gcc%2Fjit%2Fjit-recording.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c168eab92cc42d3c995cc0a1188e1554ebbcd63a/gcc%2Fjit%2Fjit-recording.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-recording.c?ref=c168eab92cc42d3c995cc0a1188e1554ebbcd63a", "patch": "@@ -182,16 +182,16 @@ recording::context::context (context *parent_ctxt)\n   if (parent_ctxt)\n     {\n       /* Inherit options from parent.\n-         Note that the first memcpy means copying pointers to strings.  */\n+\t Note that the first memcpy means copying pointers to strings.  */\n       memcpy (m_str_options,\n-              parent_ctxt->m_str_options,\n-              sizeof (m_str_options));\n+\t      parent_ctxt->m_str_options,\n+\t      sizeof (m_str_options));\n       memcpy (m_int_options,\n-              parent_ctxt->m_int_options,\n-              sizeof (m_int_options));\n+\t      parent_ctxt->m_int_options,\n+\t      sizeof (m_int_options));\n       memcpy (m_bool_options,\n-              parent_ctxt->m_bool_options,\n-              sizeof (m_bool_options));\n+\t      parent_ctxt->m_bool_options,\n+\t      sizeof (m_bool_options));\n     }\n   else\n     {\n@@ -215,6 +215,9 @@ recording::context::~context ()\n       delete m;\n     }\n \n+  for (i = 0; i < GCC_JIT_NUM_STR_OPTIONS; ++i)\n+    free (m_str_options[i]);\n+\n   if (m_builtins_manager)\n     delete m_builtins_manager;\n \n@@ -827,7 +830,8 @@ recording::context::set_str_option (enum gcc_jit_str_option opt,\n \t\t \"unrecognized (enum gcc_jit_str_option) value: %i\", opt);\n       return;\n     }\n-  m_str_options[opt] = value;\n+  free (m_str_options[opt]);\n+  m_str_options[opt] = xstrdup (value);\n }\n \n /* Set the given integer option for this context, or add an error if\n@@ -1950,10 +1954,10 @@ recording::fields::replay_into (replayer *)\n    declaration of this form:\n \n       struct/union NAME {\n-        TYPE_1 NAME_1;\n-        TYPE_2 NAME_2;\n+\tTYPE_1 NAME_1;\n+\tTYPE_2 NAME_2;\n \t....\n-        TYPE_N NAME_N;\n+\tTYPE_N NAME_N;\n       };\n \n     to the dump.  */"}, {"sha": "b3e52dc0f4f498e387bd92430d81bce15f0574fc", "filename": "gcc/jit/jit-recording.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c168eab92cc42d3c995cc0a1188e1554ebbcd63a/gcc%2Fjit%2Fjit-recording.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c168eab92cc42d3c995cc0a1188e1554ebbcd63a/gcc%2Fjit%2Fjit-recording.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-recording.h?ref=c168eab92cc42d3c995cc0a1188e1554ebbcd63a", "patch": "@@ -260,7 +260,7 @@ class context\n   char *m_first_error_str;\n   bool m_owns_first_error_str;\n \n-  const char *m_str_options[GCC_JIT_NUM_STR_OPTIONS];\n+  char *m_str_options[GCC_JIT_NUM_STR_OPTIONS];\n   int m_int_options[GCC_JIT_NUM_INT_OPTIONS];\n   bool m_bool_options[GCC_JIT_NUM_BOOL_OPTIONS];\n \n@@ -1601,4 +1601,3 @@ class return_ : public statement\n } // namespace gcc\n \n #endif /* JIT_RECORDING_H */\n-"}, {"sha": "baed99ef1d1bc3bc98b3f1f3065359918b46561d", "filename": "gcc/jit/libgccjit++.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c168eab92cc42d3c995cc0a1188e1554ebbcd63a/gcc%2Fjit%2Flibgccjit%2B%2B.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c168eab92cc42d3c995cc0a1188e1554ebbcd63a/gcc%2Fjit%2Flibgccjit%2B%2B.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Flibgccjit%2B%2B.h?ref=c168eab92cc42d3c995cc0a1188e1554ebbcd63a", "patch": "@@ -102,6 +102,9 @@ namespace gccjit\n     void dump_to_file (const std::string &path,\n \t\t       bool update_locations);\n \n+    void set_str_option (enum gcc_jit_str_option opt,\n+\t\t\t const char *value);\n+\n     void set_int_option (enum gcc_jit_int_option opt,\n \t\t\t int value);\n \n@@ -537,6 +540,14 @@ context::dump_to_file (const std::string &path,\n \t\t\t\tupdate_locations);\n }\n \n+inline void\n+context::set_str_option (enum gcc_jit_str_option opt,\n+\t\t\t const char *value)\n+{\n+  gcc_jit_context_set_str_option (m_inner_ctxt, opt, value);\n+\n+}\n+\n inline void\n context::set_int_option (enum gcc_jit_int_option opt,\n \t\t\t int value)"}, {"sha": "7fc4928fcfc924850c21a1db7d911912cd2b4591", "filename": "gcc/jit/libgccjit.h", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c168eab92cc42d3c995cc0a1188e1554ebbcd63a/gcc%2Fjit%2Flibgccjit.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c168eab92cc42d3c995cc0a1188e1554ebbcd63a/gcc%2Fjit%2Flibgccjit.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Flibgccjit.h?ref=c168eab92cc42d3c995cc0a1188e1554ebbcd63a", "patch": "@@ -50,15 +50,15 @@ typedef struct gcc_jit_result gcc_jit_result;\n    The class hierarchy looks like this:\n \n      +- gcc_jit_object\n-         +- gcc_jit_location\n-         +- gcc_jit_type\n+\t +- gcc_jit_location\n+\t +- gcc_jit_type\n \t    +- gcc_jit_struct\n-         +- gcc_jit_field\n-         +- gcc_jit_function\n-         +- gcc_jit_block\n-         +- gcc_jit_rvalue\n-             +- gcc_jit_lvalue\n-                 +- gcc_jit_param\n+\t +- gcc_jit_field\n+\t +- gcc_jit_function\n+\t +- gcc_jit_block\n+\t +- gcc_jit_rvalue\n+\t     +- gcc_jit_lvalue\n+\t\t +- gcc_jit_param\n */\n typedef struct gcc_jit_object gcc_jit_object;\n \n@@ -213,8 +213,9 @@ enum gcc_jit_bool_option\n \n /* Set a string option on the given context.\n \n-   The context directly stores the (const char *), so the passed string\n-   must outlive the context.  */\n+   The context takes a copy of the string, so the\n+   (const char *) buffer is not needed anymore after the call\n+   returns.  */\n extern void\n gcc_jit_context_set_str_option (gcc_jit_context *ctxt,\n \t\t\t\tenum gcc_jit_str_option opt,\n@@ -288,8 +289,7 @@ gcc_jit_result_release (gcc_jit_result *result);\n  released their context.\n \n  All (const char *) string arguments passed to these functions are\n- copied, so you don't need to keep them around.  Note that this *isn't*\n- the case for other parts of the API.\n+ copied, so you don't need to keep them around.\n \n  You create code by adding a sequence of statements to blocks.\n **********************************************************************/"}]}