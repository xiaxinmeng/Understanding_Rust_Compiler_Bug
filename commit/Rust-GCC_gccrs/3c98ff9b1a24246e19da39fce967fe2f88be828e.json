{"sha": "3c98ff9b1a24246e19da39fce967fe2f88be828e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2M5OGZmOWIxYTI0MjQ2ZTE5ZGEzOWZjZTk2N2ZlMmY4OGJlODI4ZQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2016-04-27T13:28:44Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2016-04-27T13:28:44Z"}, "message": "constexpr.c (get_fundef_copy): Use the original function for non-recursive evaluations.\n\n\tcp/\n\t* constexpr.c (get_fundef_copy): Use the original function for\n\tnon-recursive evaluations.\n\t(save_fundef_copy): Always expect a slot to be available.\n\n\ttestsuite/\n\t* g++.dg/cpp0x/constexpr-recursion3.C: New.\n\t* g++.dg/ubsan/pr63956.C: Adjust error location.\n\nFrom-SVN: r235506", "tree": {"sha": "a55d8cdb9a0ba79683644f8c44d1fc9099e93d68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a55d8cdb9a0ba79683644f8c44d1fc9099e93d68"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c98ff9b1a24246e19da39fce967fe2f88be828e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c98ff9b1a24246e19da39fce967fe2f88be828e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c98ff9b1a24246e19da39fce967fe2f88be828e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c98ff9b1a24246e19da39fce967fe2f88be828e/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "437244c7737eeb63973e1e285d5dc6844ab13f9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/437244c7737eeb63973e1e285d5dc6844ab13f9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/437244c7737eeb63973e1e285d5dc6844ab13f9f"}], "stats": {"total": 55, "additions": 47, "deletions": 8}, "files": [{"sha": "b21666b8e84b000ee0515ca3b030b14566d80de5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c98ff9b1a24246e19da39fce967fe2f88be828e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c98ff9b1a24246e19da39fce967fe2f88be828e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3c98ff9b1a24246e19da39fce967fe2f88be828e", "patch": "@@ -1,3 +1,9 @@\n+2016-04-27  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* constexpr.c (get_fundef_copy): Use the original function for\n+\tnon-recursive evaluations.\n+\t(save_fundef_copy): Always expect a slot to be available.\n+\n 2016-04-27  Bernd Schmidt  <bschmidt@redhat.com>\n \n \t* parser.c (cp_parser_postfix_expression): Call"}, {"sha": "f0307a3df134876677ac145ba0186260723f04ae", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c98ff9b1a24246e19da39fce967fe2f88be828e/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c98ff9b1a24246e19da39fce967fe2f88be828e/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=3c98ff9b1a24246e19da39fce967fe2f88be828e", "patch": "@@ -989,36 +989,50 @@ maybe_initialize_fundef_copies_table ()\n }\n \n /* Reuse a copy or create a new unshared copy of the function FUN.\n-   Return this copy.  */\n+   Return this copy.  We use a TREE_LIST whose PURPOSE is body, VALUE\n+   is parms, TYPE is result.  */\n \n static tree\n get_fundef_copy (tree fun)\n {\n   maybe_initialize_fundef_copies_table ();\n \n   tree copy;\n-  tree *slot = fundef_copies_table->get (fun);\n-  if (slot == NULL || *slot == NULL_TREE)\n+  bool existed;\n+  tree *slot = &fundef_copies_table->get_or_insert (fun, &existed);\n+\n+  if (!existed)\n     {\n+      /* There is no cached function available, or in use.  We can use\n+\t the function directly.  That the slot is now created records\n+\t that this function is now in use.  */\n+      copy = build_tree_list (DECL_SAVED_TREE (fun), DECL_ARGUMENTS (fun));\n+      TREE_TYPE (copy) = DECL_RESULT (fun);\n+    }\n+  else if (*slot == NULL_TREE)\n+    {\n+      /* We've already used the function itself, so make a copy.  */\n       copy = build_tree_list (NULL, NULL);\n-      /* PURPOSE is body, VALUE is parms, TYPE is result.  */\n       TREE_PURPOSE (copy) = copy_fn (fun, TREE_VALUE (copy), TREE_TYPE (copy));\n     }\n   else\n     {\n+      /* We have a cached function available.  */\n       copy = *slot;\n       *slot = TREE_CHAIN (copy);\n     }\n \n   return copy;\n }\n \n-/* Save the copy COPY of function FUN for later reuse by get_fundef_copy().  */\n+/* Save the copy COPY of function FUN for later reuse by\n+   get_fundef_copy().  By construction, there will always be an entry\n+   to find.  */\n \n static void\n save_fundef_copy (tree fun, tree copy)\n {\n-  tree *slot = &fundef_copies_table->get_or_insert (fun, NULL);\n+  tree *slot = fundef_copies_table->get (fun);\n   TREE_CHAIN (copy) = *slot;\n   *slot = copy;\n }"}, {"sha": "e51f3bf2c8821e1191afe58929cf8dce2e87d14d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c98ff9b1a24246e19da39fce967fe2f88be828e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c98ff9b1a24246e19da39fce967fe2f88be828e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3c98ff9b1a24246e19da39fce967fe2f88be828e", "patch": "@@ -1,3 +1,8 @@\n+2016-04-27  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* g++.dg/cpp0x/constexpr-recursion3.C: New.\n+\t* g++.dg/ubsan/pr63956.C: Adjust error location.\n+\n 2016-04-27  Nick Clifton  <nickc@redhat.com>\n \n \tPR middle-end/49889"}, {"sha": "29230e93e17354b6a13a7595f171b4495ff8e03a", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-recursion3.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c98ff9b1a24246e19da39fce967fe2f88be828e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-recursion3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c98ff9b1a24246e19da39fce967fe2f88be828e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-recursion3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-recursion3.C?ref=3c98ff9b1a24246e19da39fce967fe2f88be828e", "patch": "@@ -0,0 +1,14 @@\n+// { dg-do compile { target c++11 } }\n+\n+constexpr int Foo (int i)\n+{\n+  return (i ? Foo (i - 1): 0) + i;\n+}\n+\n+static int a = Foo (0);\n+static int b = Foo (1);\n+static int d = Foo (3);\n+static int c = Foo (2);\n+static int e = Foo (4);\n+static int g = Foo (6);\n+static int f = Foo (5);"}, {"sha": "25db8a40e520587f506f5aeede92fa370f7c31df", "filename": "gcc/testsuite/g++.dg/ubsan/pr63956.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c98ff9b1a24246e19da39fce967fe2f88be828e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fpr63956.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c98ff9b1a24246e19da39fce967fe2f88be828e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fpr63956.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fpr63956.C?ref=3c98ff9b1a24246e19da39fce967fe2f88be828e", "patch": "@@ -92,7 +92,7 @@ constexpr int\n fn6 (const int &a, int b)\n {\n   if (b != 2)\n-    b = a;\n+    b = a;  // { dg-error \"is not a constant expression\" }\n   return b;\n }\n \n@@ -106,7 +106,7 @@ fn7 (const int *a, int b)\n \n constexpr int n1 = 7;\n constexpr int n2 = fn7 (&n1, 5);\n-constexpr int n3 = fn7 ((const int *) 0, 8); // { dg-error \"is not a constant expression\" }\n+constexpr int n3 = fn7 ((const int *) 0, 8);\n \n constexpr int\n fn8 (int i)"}]}