{"sha": "51ccaeb90434ec16fb5756987b2d7381c1477417", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTFjY2FlYjkwNDM0ZWMxNmZiNTc1Njk4N2IyZDczODFjMTQ3NzQxNw==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2002-04-26T23:44:46Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2002-04-26T23:44:46Z"}, "message": "* gcc.dg/enum1.c: New test.\n\nFrom-SVN: r52815", "tree": {"sha": "08ed3619764587dade3b7838b0a83549acb384fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08ed3619764587dade3b7838b0a83549acb384fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/51ccaeb90434ec16fb5756987b2d7381c1477417", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51ccaeb90434ec16fb5756987b2d7381c1477417", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51ccaeb90434ec16fb5756987b2d7381c1477417", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51ccaeb90434ec16fb5756987b2d7381c1477417/comments", "author": null, "committer": null, "parents": [{"sha": "b446a5f1693fa10ea19c1731ae30e3f8619d2208", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b446a5f1693fa10ea19c1731ae30e3f8619d2208", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b446a5f1693fa10ea19c1731ae30e3f8619d2208"}], "stats": {"total": 29, "additions": 28, "deletions": 1}, "files": [{"sha": "c7a4bed57fb90686f136476543125a530a08ac52", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ccaeb90434ec16fb5756987b2d7381c1477417/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ccaeb90434ec16fb5756987b2d7381c1477417/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=51ccaeb90434ec16fb5756987b2d7381c1477417", "patch": "@@ -1,3 +1,7 @@\n+2002-04-26  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* gcc.dg/enum1.c: New test.\n+\n 2002-04-26  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/6497"}, {"sha": "32e52fe0f5e4affa064c54ac225aad79320a918c", "filename": "gcc/testsuite/g++.dg/abi/enum1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ccaeb90434ec16fb5756987b2d7381c1477417/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fenum1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ccaeb90434ec16fb5756987b2d7381c1477417/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fenum1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fenum1.C?ref=51ccaeb90434ec16fb5756987b2d7381c1477417", "patch": "@@ -9,7 +9,7 @@ enum foo\n   foo3   = 0xf0fffffffffffffeULL\n };\n \n-int main (int i)\n+int main ()\n {\n   if (sizeof (enum foo) != sizeof (unsigned long long))\n     std::abort ();"}, {"sha": "0f4587ff65679073e6231eba7af286057d7665c3", "filename": "gcc/testsuite/gcc.dg/enum1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ccaeb90434ec16fb5756987b2d7381c1477417/gcc%2Ftestsuite%2Fgcc.dg%2Fenum1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ccaeb90434ec16fb5756987b2d7381c1477417/gcc%2Ftestsuite%2Fgcc.dg%2Fenum1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fenum1.c?ref=51ccaeb90434ec16fb5756987b2d7381c1477417", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=gnu89\" } */\n+\n+/* In standard C, enumeration constants always have type int.  If they\n+   are not representables are int, they're ill-formed.  In GNU C, we\n+   give such ill-formed constructs well-defined meaning.  Make sure it\n+   works.  */\n+\n+#include <stdlib.h>\n+\n+enum foo\n+{\n+  foo1   = 0,\n+  foo2   = 0xffffffffffffffffULL,\n+  foo3   = 0xf0fffffffffffffeULL\n+};\n+\n+int main ()\n+{\n+  if (sizeof (enum foo) != sizeof (unsigned long long))\n+    abort ();\n+  exit (0);\n+}"}]}