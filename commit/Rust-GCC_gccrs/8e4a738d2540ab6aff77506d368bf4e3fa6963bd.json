{"sha": "8e4a738d2540ab6aff77506d368bf4e3fa6963bd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGU0YTczOGQyNTQwYWI2YWZmNzc1MDZkMzY4YmY0ZTNmYTY5NjNiZA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2021-02-02T20:39:34Z"}, "committer": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2021-02-02T20:41:01Z"}, "message": "gotools: for \"make check\" run \"go test embed/internal/embedtest\"\n\n\t* Makefile.am (check-embed): New target.\n\t(check): Depend on check-embed.  Examine embed-testlog.\n\t(mostlyclean-local): Add check-embed-dir.\n\t(.PHONY): Add check-embed.\n\t* Makefile.in: Regenerate.", "tree": {"sha": "ba67a346969358fd7cc2b7c12384479de8364cab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba67a346969358fd7cc2b7c12384479de8364cab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8e4a738d2540ab6aff77506d368bf4e3fa6963bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e4a738d2540ab6aff77506d368bf4e3fa6963bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e4a738d2540ab6aff77506d368bf4e3fa6963bd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e4a738d2540ab6aff77506d368bf4e3fa6963bd/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d5130ad5c396bd2dcde766c0c994855b815355b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d5130ad5c396bd2dcde766c0c994855b815355b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d5130ad5c396bd2dcde766c0c994855b815355b"}], "stats": {"total": 54, "additions": 45, "deletions": 9}, "files": [{"sha": "6576fe77b855a4c2f031428c6be32b40e6273ff2", "filename": "gotools/Makefile.am", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e4a738d2540ab6aff77506d368bf4e3fa6963bd/gotools%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e4a738d2540ab6aff77506d368bf4e3fa6963bd/gotools%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gotools%2FMakefile.am?ref=8e4a738d2540ab6aff77506d368bf4e3fa6963bd", "patch": "@@ -102,7 +102,7 @@ MOSTLYCLEANFILES = \\\n mostlyclean-local:\n \tif test -d check-go-dir; then chmod -R u+w check-go-dir; fi\n \trm -rf check-go-dir cgo-test-dir carchive-test-dir \\\n-\tcheck-vet-dir gocache-test\n+\tcheck-vet-dir check-embed-dir gocache-test\n \n if NATIVE\n \n@@ -307,11 +307,28 @@ check-vet: go$(EXEEXT) $(noinst_PROGRAMS) check-head check-gccgo check-gcc\n \t(cd check-vet-dir/src/cmd/vet && $(abs_builddir)/go$(EXEEXT) test -test.short -test.timeout=$(GOTOOLS_TEST_TIMEOUT)s -test.v) >> cmd_vet-testlog 2>&1 || echo \"--- $${fl}: go test cmd/vet (0.00s)\" >> cmd_vet-testlog\n \tgrep '^--- ' cmd_vet-testlog | sed -e 's/^--- \\(.*\\) ([^)]*)$$/\\1/' | sort -k 2\n \n+# check-embed runs `go test embed/internal/embedtest` in our environment.\n+check-embed: go$(EXEEXT) $(noinst_PROGRAMS) check-head check-gccgo check-gcc\n+\trm -rf check-embed-dir embed-testlog\n+\t$(MKDIR_P) check-embed-dir/src/embed/internal\n+\tcp $(libgosrcdir)/go.mod check-embed-dir/src/\n+\t$(MKDIR_P) check-embed-dir/src/vendor\n+\tcp $(libgosrcdir)/vendor/modules.txt check-embed-dir/src/vendor/\n+\tcp -r $(libgosrcdir)/embed/internal/embedtest check-embed-dir/src/embed/internal\n+\t@abs_libgodir=`cd $(libgodir) && $(PWD_COMMAND)`; \\\n+\tabs_checkdir=`cd check-embed-dir && $(PWD_COMMAND)`; \\\n+\techo \"cd check-embed-dir/src/embed/internal/embedtest && $(ECHO_ENV) GOPATH=$${abs_checkdir} $(abs_builddir)/go$(EXEEXT) test -test.short -test.timeout=$(GOTOOLS_TEST_TIMEOUT)s -test.v\" > embed-testlog\n+\t$(CHECK_ENV) \\\n+\tGOPATH=`cd check-embed-dir && $(PWD_COMMAND)`; \\\n+\texport GOPATH; \\\n+\t(cd check-embed-dir/src/embed/internal/embedtest && $(abs_builddir)/go$(EXEEXT) test -test.short -test.timeout=$(GOTOOLS_TEST_TIMEOUT)s -test.v) >> embed-testlog 2>&1 || echo \"--- $${fl}: go test embed/internal/embedtest (0.00s)\" >> embed-testlog\n+\tgrep '^--- ' embed-testlog | sed -e 's/^--- \\(.*\\) ([^)]*)$$/\\1/' | sort -k 2\n+\n # The check targets runs the tests and assembles the output files.\n-check: check-head check-go-tool check-runtime check-cgo-test check-carchive-test check-vet\n+check: check-head check-go-tool check-runtime check-cgo-test check-carchive-test check-vet check-embed\n \t@mv gotools.head gotools.sum\n \t@cp gotools.sum gotools.log\n-\t@for file in cmd_go-testlog runtime-testlog cgo-testlog carchive-testlog cmd_vet-testlog; do \\\n+\t@for file in cmd_go-testlog runtime-testlog cgo-testlog carchive-testlog cmd_vet-testlog embed-testlog; do \\\n \t  testname=`echo $${file} | sed -e 's/-testlog//' -e 's|_|/|'`; \\\n \t  echo \"Running $${testname}\" >> gotools.sum; \\\n \t  echo \"Running $${testname}\" >> gotools.log; \\\n@@ -337,7 +354,8 @@ check: check-head check-go-tool check-runtime check-cgo-test check-carchive-test\n \t@echo \"runtest completed at `date`\" >> gotools.log\n \t@if grep '^FAIL' gotools.sum >/dev/null 2>&1; then exit 1; fi\n \n-.PHONY: check check-head check-go-tool check-runtime check-cgo-test check-carchive-test check-vet\n+.PHONY: check check-head check-go-tool check-runtime check-cgo-test\n+.PHONY: check-carchive-test check-vet check-embed\n \n else\n "}, {"sha": "c442686548de5dcddf9996072602249f5b6f6579", "filename": "gotools/Makefile.in", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e4a738d2540ab6aff77506d368bf4e3fa6963bd/gotools%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e4a738d2540ab6aff77506d368bf4e3fa6963bd/gotools%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gotools%2FMakefile.in?ref=8e4a738d2540ab6aff77506d368bf4e3fa6963bd", "patch": "@@ -703,8 +703,8 @@ distclean-generic:\n maintainer-clean-generic:\n \t@echo \"This command is intended for maintainers to use\"\n \t@echo \"it deletes files that may require special tools to rebuild.\"\n-@NATIVE_FALSE@install-exec-local:\n @NATIVE_FALSE@uninstall-local:\n+@NATIVE_FALSE@install-exec-local:\n clean: clean-am\n \n clean-am: clean-binPROGRAMS clean-generic clean-noinstPROGRAMS \\\n@@ -815,7 +815,7 @@ s-zdefaultcc: Makefile\n mostlyclean-local:\n \tif test -d check-go-dir; then chmod -R u+w check-go-dir; fi\n \trm -rf check-go-dir cgo-test-dir carchive-test-dir \\\n-\tcheck-vet-dir gocache-test\n+\tcheck-vet-dir check-embed-dir gocache-test\n \n @NATIVE_TRUE@go$(EXEEXT): $(go_cmd_go_files) $(LIBGOTOOL) $(LIBGODEP)\n @NATIVE_TRUE@\t$(GOLINK) $(go_cmd_go_files) $(LIBGOTOOL) $(LIBS) $(NET_LIBS)\n@@ -978,11 +978,28 @@ mostlyclean-local:\n @NATIVE_TRUE@\t(cd check-vet-dir/src/cmd/vet && $(abs_builddir)/go$(EXEEXT) test -test.short -test.timeout=$(GOTOOLS_TEST_TIMEOUT)s -test.v) >> cmd_vet-testlog 2>&1 || echo \"--- $${fl}: go test cmd/vet (0.00s)\" >> cmd_vet-testlog\n @NATIVE_TRUE@\tgrep '^--- ' cmd_vet-testlog | sed -e 's/^--- \\(.*\\) ([^)]*)$$/\\1/' | sort -k 2\n \n+# check-embed runs `go test embed/internal/embedtest` in our environment.\n+@NATIVE_TRUE@check-embed: go$(EXEEXT) $(noinst_PROGRAMS) check-head check-gccgo check-gcc\n+@NATIVE_TRUE@\trm -rf check-embed-dir embed-testlog\n+@NATIVE_TRUE@\t$(MKDIR_P) check-embed-dir/src/embed/internal\n+@NATIVE_TRUE@\tcp $(libgosrcdir)/go.mod check-embed-dir/src/\n+@NATIVE_TRUE@\t$(MKDIR_P) check-embed-dir/src/vendor\n+@NATIVE_TRUE@\tcp $(libgosrcdir)/vendor/modules.txt check-embed-dir/src/vendor/\n+@NATIVE_TRUE@\tcp -r $(libgosrcdir)/embed/internal/embedtest check-embed-dir/src/embed/internal\n+@NATIVE_TRUE@\t@abs_libgodir=`cd $(libgodir) && $(PWD_COMMAND)`; \\\n+@NATIVE_TRUE@\tabs_checkdir=`cd check-embed-dir && $(PWD_COMMAND)`; \\\n+@NATIVE_TRUE@\techo \"cd check-embed-dir/src/embed/internal/embedtest && $(ECHO_ENV) GOPATH=$${abs_checkdir} $(abs_builddir)/go$(EXEEXT) test -test.short -test.timeout=$(GOTOOLS_TEST_TIMEOUT)s -test.v\" > embed-testlog\n+@NATIVE_TRUE@\t$(CHECK_ENV) \\\n+@NATIVE_TRUE@\tGOPATH=`cd check-embed-dir && $(PWD_COMMAND)`; \\\n+@NATIVE_TRUE@\texport GOPATH; \\\n+@NATIVE_TRUE@\t(cd check-embed-dir/src/embed/internal/embedtest && $(abs_builddir)/go$(EXEEXT) test -test.short -test.timeout=$(GOTOOLS_TEST_TIMEOUT)s -test.v) >> embed-testlog 2>&1 || echo \"--- $${fl}: go test embed/internal/embedtest (0.00s)\" >> embed-testlog\n+@NATIVE_TRUE@\tgrep '^--- ' embed-testlog | sed -e 's/^--- \\(.*\\) ([^)]*)$$/\\1/' | sort -k 2\n+\n # The check targets runs the tests and assembles the output files.\n-@NATIVE_TRUE@check: check-head check-go-tool check-runtime check-cgo-test check-carchive-test check-vet\n+@NATIVE_TRUE@check: check-head check-go-tool check-runtime check-cgo-test check-carchive-test check-vet check-embed\n @NATIVE_TRUE@\t@mv gotools.head gotools.sum\n @NATIVE_TRUE@\t@cp gotools.sum gotools.log\n-@NATIVE_TRUE@\t@for file in cmd_go-testlog runtime-testlog cgo-testlog carchive-testlog cmd_vet-testlog; do \\\n+@NATIVE_TRUE@\t@for file in cmd_go-testlog runtime-testlog cgo-testlog carchive-testlog cmd_vet-testlog embed-testlog; do \\\n @NATIVE_TRUE@\t  testname=`echo $${file} | sed -e 's/-testlog//' -e 's|_|/|'`; \\\n @NATIVE_TRUE@\t  echo \"Running $${testname}\" >> gotools.sum; \\\n @NATIVE_TRUE@\t  echo \"Running $${testname}\" >> gotools.log; \\\n@@ -1008,7 +1025,8 @@ mostlyclean-local:\n @NATIVE_TRUE@\t@echo \"runtest completed at `date`\" >> gotools.log\n @NATIVE_TRUE@\t@if grep '^FAIL' gotools.sum >/dev/null 2>&1; then exit 1; fi\n \n-@NATIVE_TRUE@.PHONY: check check-head check-go-tool check-runtime check-cgo-test check-carchive-test check-vet\n+@NATIVE_TRUE@.PHONY: check check-head check-go-tool check-runtime check-cgo-test\n+@NATIVE_TRUE@.PHONY: check-carchive-test check-vet check-embed\n \n # For a non-native build we have to build the programs using a\n # previously built host (or build -> host) Go compiler.  We should"}]}