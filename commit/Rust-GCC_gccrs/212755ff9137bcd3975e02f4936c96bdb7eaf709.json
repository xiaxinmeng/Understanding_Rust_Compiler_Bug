{"sha": "212755ff9137bcd3975e02f4936c96bdb7eaf709", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjEyNzU1ZmY5MTM3YmNkMzk3NWUwMmY0OTM2Yzk2YmRiN2VhZjcwOQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2018-11-08T14:55:54Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2018-11-08T14:55:54Z"}, "message": "cgraph: add selftest::symbol_table_test\n\nThis patch adds a selftest fixture for overriding the \"symtab\" global,\nso that selftests involving symtab nodes can be isolated from each\nother: each selftest can have its own symbol_table instance.\n\nIn particular, this ensures that nodes can have a predictable \"order\"\nand thus predictable dump names within selftests.\n\ngcc/ChangeLog:\n\t* cgraph.c: Include \"selftest.h\".\n\t(saved_symtab): New variable.\n\t(selftest::symbol_table_test::symbol_table_test): New ctor.\n\t(selftest::symbol_table_test::~symbol_table_test): New dtor.\n\t(selftest::test_symbol_table_test): New test.\n\t(selftest::cgraph_c_tests): New.\n\t* cgraph.h (saved_symtab): New decl.\n\t(selftest::symbol_table_test): New class.\n\t* selftest-run-tests.c (selftest::run_tests): Call\n\tselftest::cgraph_c_tests.\n\t* selftest.h (selftest::cgraph_c_tests): New decl.\n\nFrom-SVN: r265915", "tree": {"sha": "3c5fb53164804c22395d16b8ad4db4ae78afe627", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c5fb53164804c22395d16b8ad4db4ae78afe627"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/212755ff9137bcd3975e02f4936c96bdb7eaf709", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/212755ff9137bcd3975e02f4936c96bdb7eaf709", "html_url": "https://github.com/Rust-GCC/gccrs/commit/212755ff9137bcd3975e02f4936c96bdb7eaf709", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/212755ff9137bcd3975e02f4936c96bdb7eaf709/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1c8badf66bec4e0ff73ae24bf4f8cabbef8c137a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c8badf66bec4e0ff73ae24bf4f8cabbef8c137a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c8badf66bec4e0ff73ae24bf4f8cabbef8c137a"}], "stats": {"total": 106, "additions": 106, "deletions": 0}, "files": [{"sha": "46efe5d1ef03b5a3b83ab1a3dbcfaadaf378a018", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/212755ff9137bcd3975e02f4936c96bdb7eaf709/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/212755ff9137bcd3975e02f4936c96bdb7eaf709/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=212755ff9137bcd3975e02f4936c96bdb7eaf709", "patch": "@@ -1,3 +1,17 @@\n+2018-11-08  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* cgraph.c: Include \"selftest.h\".\n+\t(saved_symtab): New variable.\n+\t(selftest::symbol_table_test::symbol_table_test): New ctor.\n+\t(selftest::symbol_table_test::~symbol_table_test): New dtor.\n+\t(selftest::test_symbol_table_test): New test.\n+\t(selftest::cgraph_c_tests): New.\n+\t* cgraph.h (saved_symtab): New decl.\n+\t(selftest::symbol_table_test): New class.\n+\t* selftest-run-tests.c (selftest::run_tests): Call\n+\tselftest::cgraph_c_tests.\n+\t* selftest.h (selftest::cgraph_c_tests): New decl.\n+\n 2018-11-08  Richard Biener  <rguenther@suse.de>\n \n \t* tree-data-ref.h (lambda_int): New typedef."}, {"sha": "b3dd4296ea0b54c4836c13e634cda2eb8faa2e90", "filename": "gcc/cgraph.c", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/212755ff9137bcd3975e02f4936c96bdb7eaf709/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/212755ff9137bcd3975e02f4936c96bdb7eaf709/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=212755ff9137bcd3975e02f4936c96bdb7eaf709", "patch": "@@ -62,6 +62,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimplify.h\"\n #include \"stringpool.h\"\n #include \"attribs.h\"\n+#include \"selftest.h\"\n \n /* FIXME: Only for PROP_loops, but cgraph shouldn't have to know about this.  */\n #include \"tree-pass.h\"\n@@ -3765,4 +3766,70 @@ cgraph_edge::sreal_frequency ()\n \t\t\t       : caller->count);\n }\n \n+/* A stashed copy of \"symtab\" for use by selftest::symbol_table_test.\n+   This needs to be a global so that it can be a GC root, and thus\n+   prevent the stashed copy from being garbage-collected if the GC runs\n+   during a symbol_table_test.  */\n+\n+symbol_table *saved_symtab;\n+\n+#if CHECKING_P\n+\n+namespace selftest {\n+\n+/* class selftest::symbol_table_test.  */\n+\n+/* Constructor.  Store the old value of symtab, and create a new one.  */\n+\n+symbol_table_test::symbol_table_test ()\n+{\n+  gcc_assert (saved_symtab == NULL);\n+  saved_symtab = symtab;\n+  symtab = new (ggc_cleared_alloc <symbol_table> ()) symbol_table ();\n+}\n+\n+/* Destructor.  Restore the old value of symtab.  */\n+\n+symbol_table_test::~symbol_table_test ()\n+{\n+  gcc_assert (saved_symtab != NULL);\n+  symtab = saved_symtab;\n+  saved_symtab = NULL;\n+}\n+\n+/* Verify that symbol_table_test works.  */\n+\n+static void\n+test_symbol_table_test ()\n+{\n+  /* Simulate running two selftests involving symbol tables.  */\n+  for (int i = 0; i < 2; i++)\n+    {\n+      symbol_table_test stt;\n+      tree test_decl = build_decl (UNKNOWN_LOCATION, FUNCTION_DECL,\n+\t\t\t\t   get_identifier (\"test_decl\"),\n+\t\t\t\t   build_function_type_list (void_type_node,\n+\t\t\t\t\t\t\t     NULL_TREE));\n+      cgraph_node *node = cgraph_node::get_create (test_decl);\n+      gcc_assert (node);\n+\n+      /* Verify that the node has order 0 on both iterations,\n+\t and thus that nodes have predictable dump names in selftests.  */\n+      ASSERT_EQ (node->order, 0);\n+      ASSERT_STREQ (node->dump_name (), \"test_decl/0\");\n+    }\n+}\n+\n+/* Run all of the selftests within this file.  */\n+\n+void\n+cgraph_c_tests ()\n+{\n+  test_symbol_table_test ();\n+}\n+\n+} // namespace selftest\n+\n+#endif /* CHECKING_P */\n+\n #include \"gt-cgraph.h\""}, {"sha": "021552251c4fe0de87c674a2f50beba5dc79f672", "filename": "gcc/cgraph.h", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/212755ff9137bcd3975e02f4936c96bdb7eaf709/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/212755ff9137bcd3975e02f4936c96bdb7eaf709/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=212755ff9137bcd3975e02f4936c96bdb7eaf709", "patch": "@@ -3353,4 +3353,27 @@ xstrdup_for_dump (const char *transient_str)\n   return ggc_strdup (transient_str);\n }\n \n+extern GTY(()) symbol_table *saved_symtab;\n+\n+#if CHECKING_P\n+\n+namespace selftest {\n+\n+/* An RAII-style class for use in selftests for temporarily using a different\n+   symbol_table, so that such tests can be isolated from each other.  */\n+\n+class symbol_table_test\n+{\n+ public:\n+  /* Constructor.  Override \"symtab\".  */\n+  symbol_table_test ();\n+\n+  /* Destructor.  Restore the saved_symtab.  */\n+  ~symbol_table_test ();\n+};\n+\n+} // namespace selftest\n+\n+#endif /* CHECKING_P */\n+\n #endif  /* GCC_CGRAPH_H  */"}, {"sha": "6d65d2491d352ec01643e0791faecc4535f5d473", "filename": "gcc/selftest-run-tests.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/212755ff9137bcd3975e02f4936c96bdb7eaf709/gcc%2Fselftest-run-tests.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/212755ff9137bcd3975e02f4936c96bdb7eaf709/gcc%2Fselftest-run-tests.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fselftest-run-tests.c?ref=212755ff9137bcd3975e02f4936c96bdb7eaf709", "patch": "@@ -73,6 +73,7 @@ selftest::run_tests ()\n   unique_ptr_tests_cc_tests ();\n   opt_proposer_c_tests ();\n   json_cc_tests ();\n+  cgraph_c_tests ();\n   optinfo_emit_json_cc_tests ();\n   opt_problem_cc_tests ();\n "}, {"sha": "4e4c755f9b092c073acc4a17c9f186759a1cd6ef", "filename": "gcc/selftest.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/212755ff9137bcd3975e02f4936c96bdb7eaf709/gcc%2Fselftest.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/212755ff9137bcd3975e02f4936c96bdb7eaf709/gcc%2Fselftest.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fselftest.h?ref=212755ff9137bcd3975e02f4936c96bdb7eaf709", "patch": "@@ -215,6 +215,7 @@ class test_runner\n    alphabetical order.  */\n extern void attribute_c_tests ();\n extern void bitmap_c_tests ();\n+extern void cgraph_c_tests ();\n extern void diagnostic_c_tests ();\n extern void diagnostic_show_locus_c_tests ();\n extern void dumpfile_c_tests ();"}]}