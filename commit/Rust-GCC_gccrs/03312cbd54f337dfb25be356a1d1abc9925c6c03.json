{"sha": "03312cbd54f337dfb25be356a1d1abc9925c6c03", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDMzMTJjYmQ1NGYzMzdkZmIyNWJlMzU2YTFkMWFiYzk5MjVjNmMwMw==", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2021-09-02T07:08:22Z"}, "committer": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2021-09-13T15:19:05Z"}, "message": "[aarch64] Fix target/95969: __builtin_aarch64_im_lane_boundsi interferes with gimple\n\nThis patch adds simple folding of __builtin_aarch64_im_lane_boundsi where\nwe are not going to error out. It fixes the problem by the removal\nof the function from the IR.\n\nOK? Bootstrapped and tested on aarch64-linux-gnu with no regressions.\n\ngcc/ChangeLog:\n\n\tPR target/95969\n\t* config/aarch64/aarch64-builtins.c (aarch64_fold_builtin_lane_check):\n\tNew function.\n\t(aarch64_general_fold_builtin): Handle AARCH64_SIMD_BUILTIN_LANE_CHECK.\n\t(aarch64_general_gimple_fold_builtin): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/95969\n\t* gcc.target/aarch64/lane-bound-1.c: New test.\n\t* gcc.target/aarch64/lane-bound-2.c: New test.", "tree": {"sha": "88711fbf822c544cb5629a2d343e6a672bd89e28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/88711fbf822c544cb5629a2d343e6a672bd89e28"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/03312cbd54f337dfb25be356a1d1abc9925c6c03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03312cbd54f337dfb25be356a1d1abc9925c6c03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03312cbd54f337dfb25be356a1d1abc9925c6c03", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03312cbd54f337dfb25be356a1d1abc9925c6c03/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20f3c168205cc7b0a97ecd54ffc54bed7637be74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20f3c168205cc7b0a97ecd54ffc54bed7637be74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20f3c168205cc7b0a97ecd54ffc54bed7637be74"}], "stats": {"total": 59, "additions": 59, "deletions": 0}, "files": [{"sha": "119f67d4e4c9e70e9ab1de773b42a171fbdf423e", "filename": "gcc/config/aarch64/aarch64-builtins.c", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03312cbd54f337dfb25be356a1d1abc9925c6c03/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03312cbd54f337dfb25be356a1d1abc9925c6c03/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c?ref=03312cbd54f337dfb25be356a1d1abc9925c6c03", "patch": "@@ -29,6 +29,7 @@\n #include \"rtl.h\"\n #include \"tree.h\"\n #include \"gimple.h\"\n+#include \"ssa.h\"\n #include \"memmodel.h\"\n #include \"tm_p.h\"\n #include \"expmed.h\"\n@@ -2333,6 +2334,27 @@ aarch64_general_builtin_rsqrt (unsigned int fn)\n   return NULL_TREE;\n }\n \n+/* Return true if the lane check can be removed as there is no\n+   error going to be emitted.  */\n+static bool\n+aarch64_fold_builtin_lane_check (tree arg0, tree arg1, tree arg2)\n+{\n+  if (TREE_CODE (arg0) != INTEGER_CST)\n+    return false;\n+  if (TREE_CODE (arg1) != INTEGER_CST)\n+    return false;\n+  if (TREE_CODE (arg2) != INTEGER_CST)\n+    return false;\n+\n+  auto totalsize = wi::to_widest (arg0);\n+  auto elementsize = wi::to_widest (arg1);\n+  if (totalsize == 0 || elementsize == 0)\n+    return false;\n+  auto lane = wi::to_widest (arg2);\n+  auto high = wi::udiv_trunc (totalsize, elementsize);\n+  return wi::ltu_p (lane, high);\n+}\n+\n #undef VAR1\n #define VAR1(T, N, MAP, FLAG, A) \\\n   case AARCH64_SIMD_BUILTIN_##T##_##N##A:\n@@ -2353,6 +2375,11 @@ aarch64_general_fold_builtin (unsigned int fcode, tree type,\n       VAR1 (UNOP, floatv4si, 2, ALL, v4sf)\n       VAR1 (UNOP, floatv2di, 2, ALL, v2df)\n \treturn fold_build1 (FLOAT_EXPR, type, args[0]);\n+      case AARCH64_SIMD_BUILTIN_LANE_CHECK:\n+\tgcc_assert (n_args == 3);\n+\tif (aarch64_fold_builtin_lane_check (args[0], args[1], args[2]))\n+\t  return void_node;\n+\tbreak;\n       default:\n \tbreak;\n     }\n@@ -2440,6 +2467,14 @@ aarch64_general_gimple_fold_builtin (unsigned int fcode, gcall *stmt)\n \t    }\n \t  break;\n \t}\n+    case AARCH64_SIMD_BUILTIN_LANE_CHECK:\n+      if (aarch64_fold_builtin_lane_check (args[0], args[1], args[2]))\n+\t{\n+\t  unlink_stmt_vdef (stmt);\n+\t  release_defs (stmt);\n+\t  new_stmt = gimple_build_nop ();\n+\t}\n+      break;\n     default:\n       break;\n     }"}, {"sha": "bbbe679fd80aee762bad85e5e1f8863333ed0e9a", "filename": "gcc/testsuite/gcc.target/aarch64/lane-bound-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03312cbd54f337dfb25be356a1d1abc9925c6c03/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Flane-bound-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03312cbd54f337dfb25be356a1d1abc9925c6c03/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Flane-bound-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Flane-bound-1.c?ref=03312cbd54f337dfb25be356a1d1abc9925c6c03", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+#include <arm_neon.h>\n+\n+void\n+f (float32x4_t **ptr)\n+{\n+  float32x4_t res = vsetq_lane_f32 (0.0f, **ptr, 0);\n+  **ptr = res;\n+}\n+/* GCC should be able to remove the call to \"__builtin_aarch64_im_lane_boundsi\"\n+   and optimize out the second load from *ptr.  */\n+/* { dg-final { scan-tree-dump-times \"__builtin_aarch64_im_lane_boundsi\" 0 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \" = \\\\\\*ptr_\" 1 \"optimized\" } } */"}, {"sha": "923c94687c6a4086ea4654b8cedf7a72ed1f9f9f", "filename": "gcc/testsuite/gcc.target/aarch64/lane-bound-2.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03312cbd54f337dfb25be356a1d1abc9925c6c03/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Flane-bound-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03312cbd54f337dfb25be356a1d1abc9925c6c03/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Flane-bound-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Flane-bound-2.c?ref=03312cbd54f337dfb25be356a1d1abc9925c6c03", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-original\" } */\n+void\n+f (void)\n+{\n+  __builtin_aarch64_im_lane_boundsi (16, 4, 0);\n+  __builtin_aarch64_im_lane_boundsi (8, 8, 0);\n+}\n+/* GCC should be able to optimize these out before gimplification. */\n+/* { dg-final { scan-tree-dump-times \"__builtin_aarch64_im_lane_boundsi\" 0 \"original\" } } */"}]}