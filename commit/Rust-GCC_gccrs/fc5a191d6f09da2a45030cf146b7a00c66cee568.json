{"sha": "fc5a191d6f09da2a45030cf146b7a00c66cee568", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmM1YTE5MWQ2ZjA5ZGEyYTQ1MDMwY2YxNDZiN2EwMGM2NmNlZTU2OA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-02-10T14:00:09Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-02-10T14:00:09Z"}, "message": "Resync.\n\nFrom-SVN: r94827", "tree": {"sha": "1ba30738b4eda4a2e7b1517e2acb509493988e16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ba30738b4eda4a2e7b1517e2acb509493988e16"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc5a191d6f09da2a45030cf146b7a00c66cee568", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc5a191d6f09da2a45030cf146b7a00c66cee568", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc5a191d6f09da2a45030cf146b7a00c66cee568", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc5a191d6f09da2a45030cf146b7a00c66cee568/comments", "author": null, "committer": null, "parents": [{"sha": "984a64bcf34d7a17b497700058ce553773b7d583", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/984a64bcf34d7a17b497700058ce553773b7d583", "html_url": "https://github.com/Rust-GCC/gccrs/commit/984a64bcf34d7a17b497700058ce553773b7d583"}], "stats": {"total": 728, "additions": 728, "deletions": 0}, "files": [{"sha": "75b198e3470b53df345f947cbfc063b6cc98571d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 728, "deletions": 0, "changes": 728, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc5a191d6f09da2a45030cf146b7a00c66cee568/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc5a191d6f09da2a45030cf146b7a00c66cee568/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=fc5a191d6f09da2a45030cf146b7a00c66cee568", "patch": "@@ -1,3 +1,731 @@\n+2005-02-09  Doug Rupp  <rupp@adacore.com>\n+\n+\t* g-expect-vms.adb (Non_Blocking_Spawn): Separate out.\n+\t* g-enblsp-vms-alpha.adb g-enblsp-vms-ia64.adb: New subunits.\n+\n+2005-02-09  Doug Rupp  <rupp@adacore.com>\n+\n+\t* gnatchop.adb (dup, dup2),\n+\tg-dirope.adb (closedir, opendir, rmdir): Reference via System.CRTL.\n+\n+\t* gnatlbr.adb (mkdir),\n+\tmlib-tgt-vms-ia64.adb (popen, plose):  Import with decc$ prefix.\n+\n+\t* s-crtl.ads (closdir, dup, dup2, opendir, rmdir): Import.\n+\n+2005-02-09  Doug Rupp  <rupp@adacore.com>\n+\n+\t* s-tpopde-vms.adb: Add pragma Warnings (Off) for Task_Id conversions.\n+\n+2005-02-09  Robert Dewar  <dewar@adacore.com>\n+\t    Thomas Quinot  <quinot@adacore.com>\n+\t    Javier Miranda  <miranda@adacore.com>\n+\t    Pascal Obry  <obry@adacore.com>\n+\t    Ed Schonberg  <schonberg@adacore.com>\n+\t    Doug Rupp  <rupp@adacore.com>\n+\t    Gary Dismukes  <dismukes@adacore.com>\n+\t    Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* g-zstspl.ads: New file.\n+\n+\t* a-chahan.ads, a-chahan.adb: Add declarations from AI-285\n+\n+\t* a-string.ads: Add pragma Ada_05 for wide_wide_space to get warning in\n+\tAda 95 mode\n+\tAdd definition of Wide_Wide_Space for AI-285\n+\n+\t* impunit.ads, impunit.adb, sem_ch10.adb: Complete rewrite and new\n+\tinterface (to support Ada 95 and Ada 2005 units).\n+\tAdd Unbounded_IO files\n+\tAdd entries for Wide_Wide packages for AI-285\n+\tAdd list of containers packages to Ada 2005 unit list\n+\n+\t* a-swuwti.ads, a-swuwti.adb, a-suteio.ads, a-suteio.adb: Updates to\n+\tsupport new Unbounded_IO package cleanly.\n+\n+\t* g-utf_32.ads, g-utf_32.adb: New files.\n+\n+\t* Makefile.rtl: Add entry for g-utf_32\n+\tAdd new files for Unbounded_IO\n+\tAdjust make file for new AI-285 wide wide packages\n+\tAdd AI-302 containers to the run time.\n+\n+\t* a-stwibo.adb, a-stwibo.ads, a-stwisu.adb, a-stwisu.ads,\n+\ta-strbou.ads, a-strbou.adb, a-strsup.ads, a-strsup.adb: New\n+\tsubprograms for AI-301.\n+\n+\t* a-stwiun.adb, a-stwiun.ads: Minor reformatting.\n+\n+\t* a-stunau.ads: Minor comment correction\n+\n+\t* rtsfind.ads, rtsfind.adb: Add definitions for Wide_Wide attributes\n+\tetc.\n+\tAlso extend Text_IO_Kludge to support Wide_Wide_Text_IO\n+\t(Check_RPC): Update to match changes in expanded code.\n+\tClean up unused entity.\n+\n+\t* exp_ch3.ads, exp_ch3.adb: Fix various places where Wide_Wide_String\n+\twas not taken into account.\n+\tThis includes proper initialization with Normalize_Scalars.\n+\t(Get_Simple_Init_Val): Major rewrite for initialize scalars and\n+\tnormalize scalars cases (particularly the latter) to do a better job\n+\tof finding invalid representations.\n+\n+\t* s-scaval.ads, s-scaval.adb: Add values for zero invalid values\n+\n+\t* s-strops.ads, s-strops.adb: Remove string normalize routines, never\n+\tused\n+\n+\t* exp_dist.adb: Add support for wide wide character type\n+\t(Expand_Receiving_Stubs_Bodies): For a package declaration that has a\n+\tprivate part, generate stub bodies at the end of the private part,\n+\tnot the visible part.\n+\t(Add_RACW_Primitive_Operations_And_Bodies): Add last missing code for\n+\tPolyORB support.\n+\t(Add_Obj_RPC_Receiver_Completion): Add PCS-specific subprograms and\n+\tgeneric wrapper to execute final processing after completing the\n+\texpansion of the RPC receiver for an RACW.\n+\n+\t* snames.h, snames.ads, snames.adb: Add definitions for wide_wide\n+\tpackages and attributes.\n+\t(Preset_Names): Addition of the new reserved words of Ada 2005,\n+\tthat is interface, overriding and synchronized.\n+\t(Get_Pragma_Id): Give support to the use of the new reserved word\n+\t\"interface\" as a pragma name.\n+\t(Is_Pragma_Name): Give support to the use of the new reserved word\n+\t\"interface\" as a pragma name.\n+\t(Preset_Names): Add stream_size string for the Stream_Size Ada2005\n+\tattribute implementation.\n+\n+\t* exp_attr.adb (Expand_Attribute_Reference): Do not apply validity\n+\tchecks to entities that are output parameters of Asm operations.\n+\tHandle the Stream_Size attribute.\n+\tAdd implementation of Wide_Wide_Value, Wide_Wide_Image, Wide_Wide_Width\n+\n+\t* exp_imgv.ads, exp_imgv.adb: Add support for wide wide character type\n+\n+\t* sem_attr.adb (Eval_Attribute): Raise compile-time constraint error\n+\tfor second parameter being 0.0.\n+\tAdd support for wide wide character type.\n+\t(Analyze_Attribute, Eval_Attribute): Handle the Stream_Size attribute.\n+\n+\t* s-valwch.adb, s-valwch.ads, s-imgwch.ads, s-imgwch.adb,\n+\ts-wchstw.ads, s-wchstw.adb, s-wchwts.adb, s-wchwts.ads,\n+\ts-widwch.adb, s-widwch.ads, s-wwdcha.adb, s-wwdcha.ads,\n+\ts-wwdenu.adb, s-wwdenu.ads, s-wwdwch.adb, s-wwdwch.ads: Add support\n+\tfor wide wide character cases.\n+\n+\t* cstand.adb: Create entities for Wide_Wide_Character and\n+\tWide_Wide_String.\n+\n+\t* i-c.ads, i-c.adb: Fix not raising CE for null wide strings in\n+\taccordance with AI-258.\n+\tAdd new declarations for 16/32 bit C character types (Part of AI285)\n+\n+\t* einfo.ads, einfo.adb (Is_Obsolescent, Is_Ada_2005): New flag\n+\t(Obsolescent_Warning): New field\n+\t(Rep_Clause): New local subprogram used to share code. Returns the rep\n+\tclause for which the name is given in parameter.\n+\t(Has_Stream_Size_Clause): New routine.\n+\t(Stream_Size_Clause): Idem. Implementation is based on Rep_Clause.\n+\t(Address_Clause): Implementation is now using Rep_Clause.\n+\t(Alignment_Clause): Idem.\n+\t(Size_Clause): Idem.\n+\n+\t* lib-xref.adb (Generate_Reference): Test for reference to Ada 2005\n+\tentity in non-Ada 2005 mode and generate warning.\n+\n+\t* par-prag.adb: Add handling of one argument form for pragma Ada_05.\n+\t(Prag): Code cleanup. Remove old gnat pragma \"overriding\"\n+\n+\t* sem_prag.adb: Add handling of one argument form for pragma Ada_05\n+\t(Analyze_Pragma, case Elaborate, Elaborate_All): Do not disable warnings\n+\ton the named unit if the pragma is not in the current compilation unit,\n+\tso that elaboration calls in the current unit can set up an elaboration\n+\tdependency on the named unit, as needed.\n+\t(Analyze_Pragma, case Obsolescent): Allow pragma to be used for library\n+\tsubprogram as well as for subprograms declared within a package.\n+\t(Analyze_Pragma, Sig_Flags): Code cleanup. Remove support for the GNAT\n+\tpragma overriding.\n+\n+\t* krunch.ads, krunch.adb: Add special handling of Wide_Wide (krunched\n+\tto z) to avoid some instances of duplication for Wide_Wide packages.\n+\n+\t* namet.ads, namet.adb: Implement encoding (WWhhhhhhhh) for wide wide\n+\tcharacters.\n+\n+\t* scn.adb: Char_Literal_Value field is now a Uint\n+\n+\t* scng.adb: Significant rewrite to handle new Ada 2005 features\n+\tallowing wide and wide wide characters in program text, e.g. for\n+\tidentifiers, as described in AI-285.\n+\t(Set_Reserved): New procedure, makes setting up keywords cleaner.\n+\t(Initialize_Scanner): Register the new reserved words of Ada 2005.\n+\t(Scan): Give support to the new reserved words.\n+\n+\t* par-ch2.adb (P_Identifier): Compiling in Ada95 mode, generate a\n+\twarning notifying that interface, overriding, and synchronized are\n+\tnew reserved words.\n+\t(P_Pragma): Allow the use of the new reserved word \"interface\" as\n+\ta pragma name.\n+\n+\t* gnatls.adb, gnatbind.adb,\n+\tali-util.adb, binde.adb, ali.ads, ali.adb: Code cleanup. Rename\n+\tidentifiers named \"interface\" to \"SAL_Interface\".\n+\n+\t* bindgen.adb (Gen_Main_Ada): Add support for the new SEH\n+\t(Structured Exception handling).\n+\t(Gen_Main_C): Idem.\n+\n+\t* bindgen.adb: \n+\t(Gen_Main_Ada): Set the default exit code if specified.\n+\t(Gen_Main_C): Likewise.\n+\tPart of *DC20-006.\n+\t(Gen_Output_File_C): Remove redundant output of gnat_exit_status.\n+\tCode cleanup. Rename identifiers named \"interface\" to \"SAL_Interface\"\n+\n+\t* switch-b.adb, bindusg.adb, opt.ads, vms_data.ads: Add handling of\n+\tnew -Xnnn switch.\n+\n+\t* mlib-prj.adb, mlib.adb: Code cleanup. Rename one identifier that\n+\thas a collision with the new Ada 2005 \"interface\" reserved word.\n+\n+\t* par-ch3.adb (P_Defining_Identifier): Compiling in Ada95 mode,\n+\tgenerate a warning notifying that interface, overriding, and\n+\tsynchronized are new reserved words.\n+\n+\t* scans.ads (Token_Type): Addition of the tokens corresponding to the\n+\tnew reserved words of Ada 2005: Tok_Interface, Tok_Overriding\n+\tand Tok_Synchronized.\n+\n+\t* sem_res.adb (Resolve_Actuals): Change error messages to refer to\n+\t\"dispatching\" rather than \"primitive\" operations, since dispatching\n+\tcalls are now allowed to abstract formal subprograms (which are not\n+\tprimitive).\n+\tChar_Literal_Value field is now a Uint\n+\t(Resolve_Slice): If the prefix is an access to an unconstrained array,\n+\tcompute the actual subtype of the designated object to impose the proper\n+\tindex constraints.\n+\t(Resolve_Selected_Component): Do not insert an access check if the\n+\tprefix is an access type: such a node is expanded into an explicit\n+\tdereference, on which the access check is performed anyway. Removes\n+\texpensive duplicate checks.\n+\t(Resolve_Call): Use new flag Is_Obsolescent and field\n+\tObsolescent_Warning so that pragma Obsolescent works on library\n+\tsubprograms.\n+\tAdd support for wide wide character type\n+\t(Resolve_Allocator): Replace the error message on wrong null-exclusion\n+\tvalue by a warning message.\n+\t(Resolve_Type_Conversion): If the mixed-mode expression is interpreted\n+\tas fixed-point, and one of the operands is non-static and universal, it\n+\tcan only be an illegal exponentiation operation, in which case there is\n+\tno real value to retrieve.\n+\n+\t* exp_strm.adb: Add support for wide wide character type\n+\t(Build_Elementary_Input_Call): Compute the size of the stream element by\n+\tquerying the rep chain to find the Stream_Attribute attribute value.\n+\t(Build_Elementary_Write_Call): Ditto.\n+\n+\t* sem_aggr.adb: Char_Literal_Value field is now a Uint\n+\tAdd support for wide wide character type\n+\tReplace the error messages on wrong null-exclusion value by warnings\n+\tas described in Ada 2005.\n+\t(Resolve_Extension_Aggregate): Document the fact that the error\n+\tmessage on class-wide expressions in extensions aggregates.\n+\n+\t* sem_case.adb: Add support for wide wide character type\n+\n+\t* sem_ch13.adb: Add support for wide wide character type\n+\t(Analyze_Attribute_Definition_Clause): Handle the Stream_Size attribute.\n+\n+\t* sem_ch3.adb: Add support for wide wide character type\n+\t(Process_Subtype): If constraint is illegal for the type, set Ekind of\n+\tnow-useless Itype, to prevent cascaded errors on a compiler built\n+\twithout -gnatp.\n+\n+\t* sem_ch8.adb: Add with and use of Sem_Disp.\n+\t(Analyze_Subprogram_Renaming): Replace unclean uses of\n+\tCorresponding_Spec with Corresponding_Formal_Spec (and delete setting\n+\tof Corresponding_Spec to Empty).\n+\t(Attribute_Renaming): Replace use of Corresponding_Spec with\n+\tCorresponding_ Formal_Spec and simplify condition.\n+\t(Use_One_Package): Check that scope of homonym of identifier is defined,\n+\tbefore checking whether it is a wrapper package.\n+\tAdd support for wide wide character type\n+\n+\t* sem_eval.adb: Add support for wide wide character type.\n+\t(Eval_Arithmetic_Op): Check for compile time known signed integer\n+\toverflow in the non-static case.\n+\t(Subtypes_Statically_Match): A formal scalar type and its base type do\n+\tnot statically match.\n+\n+\t* sem_util.adb (Collect_Primitive_Operations): Minor change of \"/=\" to\n+\t\"not in\" for test of N_Formal_Subprogram_Declaration (which is now a\n+\tsubtype).\n+\t(Unit_Declaration_Node): Ditto.\n+\t(Is_Variable_Prefix):  For the case of an indexed component whose prefix\n+\thas a packed array type, the prefix has been rewritten into a type\n+\tconversion. Determine variable-ness from the converted expression.\n+\tHandle wide wide character cases.\n+\n+\t* stand.ads: Add types Wide_Wide_Character and Wide_Wide_String\n+\n+\t* stringt.ads, stringt.adb: Handle full UTF-32 range.\n+\tRemove [\"0A\"] from comment, since it can look like a line terminator.\n+\tCurrently we don't permit this, but this is under discussion by the\n+\tARG, and it is easy enough to use a different example.\n+\n+\t* s-wchcon.ads, s-wchcnv.ads, s-wchcnv.adb: Add new subprograms for\n+\thandling UTF-32 encoding for wide wide character.\n+\tImplement new brackets coding [\"hhhhhhhh\"]\n+\tAdd UTF-8 encodings for full UTF-32 range\n+\n+\t* ttypes.ads: Add definition of Standard_Wide_Wide_Character_Size\n+\n+\t* types.h, types.ads, types.adb: Wide_Wide_Character now has full 31\n+\tbit range Add full UTF-32 support.\n+\t(RT_Exception_Code): Addition of CE_Null_Not_Allowed; used to\n+\tnotify that constraint error will be raised at run-time\n+\tbecause a null value is assigned to a null-excluding object.\n+\tRemove some obsolete declarations and make Char_Code\n+\tunsigned.\n+\n+\t* a-except.adb (Rcheck_30): New subprogram. Addition of the message\n+\tcorresponding to CE_Null_Not_Allowed, and adjust the output of all the\n+\tRcheck subprograms.\n+\n+\t* checks.adb (Check_Null_Not_Allowed): Replace the error message on\n+\twrong null-exclusion value by a warning message.\n+\t(Enable_Range_Check): Do range check if the prefix is an\n+\texplicit dereference whose designated object is an unconstrained array.\n+\tCurrent algorithm for removing duplicate checks is over-eager in this\n+\tcase.\n+\n+\t* sem_ch5.adb (Analyze_Assignment): Replace the error messages on wrong\n+\tnull-exclusion value by a warning message\n+\n+\t* atree.h, atree.ads, atree.adb: Remove Char_Code field support\n+\tcompletely. Add support for Uint2 field\n+\n+\tsem_ch2.adb, exp_ch11.adb, exp_dbug.adb,\n+\texp_prag.adb: Char_Literal_Value field is now a Uint.\n+\n+\t* exp_util.adb (Insert_Actions): Replace\n+\tN_Formal_Subprogram_Declaration by\n+\tN_Formal_{Abstract|Concrete}_Subprogram_Declaration.\n+\tChar_Literal_Value field is now a Uint.\n+\n+\t* sinfo.ads, sinfo.adb (Corresponding_Formal_Spec): New function\n+\tdefined for subprogram renaming declarations. When set, the field\n+\tindicates the defining entity of a corresponding formal subprogram\n+\twhen the renaming corresponds to a formal subprogram association in an\n+\tinstantiation.\n+\t(Set_Corresponding_Formal_Spec): New procedure to return\n+\tCorresponding_Formal_Spec field.\n+\tMinor changes of \"=\" to \"in\" in tests of N_Formal_Subprogram_Declaration\n+\t(which is now a subtype).\n+\tChar_Literal_Value field is now a Uint\n+\n+\t* exp_disp.ads, exp_disp.adb (Make_DT): Generate code that moves the\n+\tpointer to the base of the dispatch table.\n+\tMinor changes to comments.\n+\t(Controlling_Type): New function for determining the tagged type\n+\tassociated with a tagged primitive subprogram.\n+\t(Expand_Dispatching_Call): Add support for a controlling actual that is\n+\tdirectly a value of type Ada.Tag rather than a tagged object.\n+\n+\t* i-cpp.ads, i-cpp.adb, a-tags.ads, a-tags.adb: Update documentation\n+\tdescribing the new layout.\n+\t(Dispatch_Table): The expander computes the actual array size, allocates\n+\tthe Dispatch_Table record accordingly, and generates code that displaces\n+\tthe base of the record after the Typeinfo_Ptr component. The access to\n+\tthese components is done by means of local functions.\n+\t(Offset_To_Top): New function.\n+\t(Typeinfo_Ptr): New function.\n+\t(Get_TSD): Modified to access the new position of the TSD.\n+\t(Set_TSD): Modified to save the TSD in its new position.\n+\n+\t* par-ch12.adb (P_Formal_Subprogram_Declaration): Add parsing for the\n+\tcase of formal abstract subprograms. Add check and message for -gnat05.\n+\tUpdate comments.\n+\n+\t* sem_ch12.adb: Add with and use for Sem_Disp.\n+\t(Analyze_Associations): Minor change from \"=\" to \"in\" for use of\n+\tN_Formal_Subtype_Declaration (which is now a subtype).\n+\t(Set_Analyzed_Formal): Minor changes from \"=\" to \"in\" for uses of\n+\tN_Formal_Subtype_Declaration (which is now a subtype).\n+\t(Analyze_Formal_Subprogram): Add handling for\n+\tN_Formal_Abstract_Subprogram, marking the formal as abstract and\n+\tdispatching, setting the controlling status of the formal parameters\n+\tand result, and issuing an error if there is no controlling type for\n+\tthe formal subprogram.\n+\t(Instantiate_Formal_Subprogram): Rather than setting Corresponding_Spec,\n+\twhich is an unclean use of that field, we set the new field\n+\tCorresponding_Formal_Spec to make the formal subprogram available to\n+\tprocessing in Analyze_Subprogram_Declaration.\n+\t(Analyze_Formal_{Discrete, Decimal_Fixed_Point, Fixed_Point,\n+\tFloating_Point, Modular_Integer, Signed_Integer}_Type: Make formal type\n+\tConstrained, so that it is is does not statically match its anonymous\n+\tbase type.\n+\n+\t* sem_ch6.adb (Analyze_Subprogram_Specification): Include test for\n+\tabstract formal subprograms in error check for functions returning\n+\tabstract types. Set scope of new designator for\n+\ta parameterless subprogram, so that it is available when checking the\n+\tbody for nested subprograms, before full analysis of said body.\n+\t(Analyze_Subprogram_Body): Warn on inlining bodies with nested\n+\tsubprogram only if inner one comes from source.\n+\t(Analyze_Function_Call): If the call is given in object notation, the\n+\tanalysis of the name rewrites the node and analyzes it with the proper\n+\targument list. After analyzing the name, if the call has been rewritten\n+\tand the result type is set, no further analysis is needed.\n+\t(Analyze_Return_Type): Subsidiary to Process_Formals: analyze subtype\n+\tmark in function specification, in a context where the formals are\n+\tvisible and hide outer homographs.\n+\n+\t* sem_disp.adb (Check_Controlling_Type): Relax the check for same scope\n+\tas the tagged type for the cases of abstract formal subprograms and\n+\trenamings of those.  Clean up spec comments.\n+\t(Check_Dispatching_Context): Add error message to indicate \"abstract\n+\tprocedure\", covering the case of a call to a formal abstract procedure\n+\tthat has statically tagged operands.\n+\t(Check_Dispatching_Call): Check for the case of an actual given by\n+\ta tag-indeterminate function call whose type is an ancestor of the\n+\tcontaining call's associated tagged type. This situation can occur\n+\tfor inherited primitives with function defaults. In this case we\n+\tuse the tagged type's tag directly as the controlling argument for\n+\tthe calls.\n+\t(Expand_Call): Name change on call to Expand_Dispatch_Call.\n+\n+\t* sprint.adb (Sprint_Node_Actual): Split\n+\tN_Formal_Subprogram_Declaration into two alternatives for the new\n+\tcases N_Formal_Abstract_Subprogram_Declaration and\n+\tN_Formal_Concrete_Subprogram_Declaration.\n+\tChar_Literal_Value field is now a Uint.\n+\n+\t* trans.c: Get rid of junk Uint2 reference.\n+\tChar_Literal_Value field is now a Uint.\n+\t(gnat_to_gnu, case N_Aggregate): Check TYPE_UNCHECKED_UNION_P.\n+\t(gigi): Correct third arg to gimplify_body.\n+\n+\t* ada-tree.h: (TYPE_UNCHECKED_UNION_P): New flag.\n+\t(TYPE_LANG_FLAG_0): Check for record or union.\n+\n+\t* treepr.adb: Char_Literal_Value field is now a Uint\n+\n+\t* uintp.h, uintp.ads, uintp.adb: Add new routines UI_To_CC and\n+\tUI_From_CC.\n+\n+\t* widechar.ads, widechar.adb (Is_UTF_32_Non_Graphic): New function\n+\tAdd full UTF-32 support\n+\tChar_Code is now 32 bits\n+\n+\t* sinput.ads, sinput.adb (Skip_Line_Terminators): Extend to deal with\n+\twide character UTF_32 line terminators.\n+\tInitialize Main_Source_File to avoid error when no main\n+\tsource is loaded.\n+\n+\t* errout.adb (Finalize): Do not check Num_SRef_Pragmas\n+\t(Main_Source_File) when no main source has been loaded, to avoid\n+\tpotential crash.\n+\n+2005-02-09  Robert Dewar  <dewar@adacore.com>\n+\n+        * a-strunb.ads, a-strunb.adb: Add missing pragma Ada_05 statements\n+        Fix name of Set routine\n+\n+\t* a-strfix.ads, a-strfix.adb: Add new index functions from AI-301 to\n+\tfixed packages.\n+\n+\t* a-stwise.ads, a-stwise.adb, a-stwifi.ads, a-stwifi.adb,\n+\ta-strsea.ads, a-strsea.adb: Add new index functions from AI-301 to\n+\tfixed packages\n+\n+\t* a-witeio.ads, a-witeio.adb, a-textio.ads, a-textio.adb: New function\n+\tforms of Get_Line subprograms for AI-301.\n+\n+\t* a-wtcoau.adb, a-wtcoau.ads, a-wtcoio.adb, a-wtcoio.ads,\n+\ta-wtedit.adb, a-wtedit.adb, a-wtedit.ads, a-wttest.adb,\n+\ta-wttest.ads, a-strmap.ads, a-strmap.adb, a-stwima.adb,\n+\ta-stwima.ads: Minor reformatting.\n+\n+2005-02-09  Doug Rupp  <rupp@adacore.com>\n+\t    Thomas Quinot  <quinot@adacore.com>\n+\n+\t* adaint.c, adaint.h\n+\t[VMS] (to_ptr32): New function.\n+\t(MAYBE_TO_PTR32): New macro.\n+\t(__gnat_portable_spawn,__gnat_portable_no_block_spawn): Adjust argv\n+\tfor pointer size.\n+\t[VMS] (descriptor_s, ile_s): Use __char_ptr32 for adr field.\n+\t[VMS] (#define fork()): Remove since unneccessary.\n+\t(__gnat_set_close_on_exec): New routine to support\n+\tGNAT.OS_Lib.Set_Close_On_Exec.\n+\n+\t* g-expect.adb (Set_Up_Communications): Mark the pipe descriptors for\n+\tthe parent side as close-on-exec so that they are not inherited by the\n+\tchild.\n+\n+\t* g-os_lib.ads, g-os_lib.adb (Set_Close_On_Exec): New subprogram to\n+\tset or clear the FD_CLOEXEC flag on a file descriptor.\n+\n+2005-02-09  Eric Botcazou  <ebotcazou@adacore.com>\n+\t    Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\tFix for c330001 - PR ada/19386\n+\n+\t* decl.c: \n+\t(gnat_to_gnu_field): Do not necessarily invoke make_packable_type\n+\ton the field if Pragma Component_Alignment (Storage_Unit).\n+\t(gnat_to_gnu_entity, case object): Do not treat a renaming that has\n+\tside-effects as if it were a constant; also make SAVE_EXPR to protect\n+\tside-effects.\n+\t(gnat_to_gnu_entity, case E_Record_Subtype): If have _Parent, make a\n+\tUNION_TYPE.\n+\t(make_dummy_type): Set TYPE_UNCHECKED_UNION_P.\n+\t(components_to_record): Test it.\n+\tFix improper usage of REFERENCE_CLASS_P.\n+\n+\t* utils2.c (build_binary_op, case MODIFY_EXPRP): Treat UNION_TYPE as\n+\tRECORD_TYPE.\n+\n+\t* utils2.c: Minor reformatting.\n+\n+\t* utils.c (convert, case UNION_TYPE): Check TYPE_UNCHECKED_UNION;\n+\thandle other cases like RECORD_TYPE.\n+\n+\t* utils.c (gnat_pushdecl): Set TREE_NO_WARNING.\n+\n+2005-02-09  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_aggr.adb (Gen_Assign): If the expression is an aggregate for a\n+\tcomponent of an array of arrays in an assignment context, and the\n+\taggregate has component associations that require sliding on\n+\tassignment, force reanalysis of the aggregate to generate a temporary\n+\tbefore the assignment.\n+\t(Must_Slide): Make global to the package, for use in Gen_Assign.\n+\n+2005-02-09  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_Composite_Equality): If a component is an\n+\tunchecked union with no inferable discriminants, return a\n+\tRaise_Program_Error node, rather than inserting it at the point the\n+\ttype is frozen.\n+\t(Expand_Record_Equality, Component_Equality): Handle properly the case\n+\twhere some subcomponent is an unchecked union whose generated equality\n+\tcode raises program error.\n+\n+2005-02-09  Doug Rupp  <rupp@adacore.com>\n+\n+\t* gnatbl.c: [VMS] (_POSIX_EXIT): Define.\n+\t[VMS] (#define exit hack): Remove.\n+\n+2005-02-09  Pascal Obry  <obry@adacore.com>\n+\t    Arnaud Charlet <charlet@adacore.com>\n+\n+\t* init.c (__gnat_initialize): Add a new parameter eh which contains the\n+\taddress of the exception registration. The Win32 version of this\n+\troutine calls __gnat_install_SEH_handler() to initialize the SEH\n+\t(Structured Exception Handling) handler.\n+\t(__gnat_error_handler) [Win32]: Removed. Not needed as we use\n+\tSEH (Structured Exception Handling) now.\n+\t(__gnat_install_handler) [Win32]: Nothing to do now as we use SEH.\n+\t(__gnat_initialize for ppc-vxworks): Adjust comments and the\n+\tpreprocessor condition protecting the call to the extra eh setup\n+\tsubprogram, which is only available for the ppc target.\n+\t(__gnat_clear_exception_count): replaced reference to\n+\tvariable taskIdCurrent by call to taskIdSelf(), cleaner.\n+\n+\t* seh_init.c: New file.\n+\n+\t* Make-lang.in: (GNAT_ADA_OBJS): Add seh_init.o.\n+\t(GNATBIND_OBJS): Idem.\n+\n+\t* misc.c (gnat_parse_file): Update call to __gnat_initialize. This\n+\troutine takes a new parameter (a pointer to the exception registration\n+\tfor the SEH (Structured Exception Handling) support.\n+\n+\t* raise.h: (__gnat_install_SEH_handler): New prototype.\n+\tUpdate copyright notice.\n+\n+\t* s-tassta.adb (Task_Wrapper): Declare the exception registration\n+\trecord and initialize it by calling __gnat_install_SEH_handler.\n+\n+2005-02-09  Vincent Celier  <celier@adacore.com>\n+\n+\t* make.adb (Gnatmake): Do not fail when the main project has no object\n+\tdirectory.\n+\n+2005-02-09  Doug Rupp  <rupp@adacore.com>\n+\n+\t* Makefile.in [VMS] (LN,LN_S): Define as cp -p\n+\tRename s-asthan-vms.adb to s-asthan-vms-alpha.adb.\n+\t[VMS]: Add translations for g-enblsp.adb.\n+\n+\t* s-asthan-vms.adb: Removed.\n+\t* s-asthan-vms-alpha.adb: Added.\n+\n+2005-02-09  Pascal Obry  <obry@adacore.com>\n+\n+\t* Makefile.in (LIBGNAT_SRCS): Add seh_init.c.\n+\t(LIBGNAT_OBJS): Add seh_init.o.\n+\n+2005-02-09  Arnaud Charlet  <charlet@adacore.com>\n+\n+\tPR ada/16592\n+\n+\t* Makefile.in: Link all gnat tools with -static-libgcc, since\n+\t-shared-libgcc is now used by default on some systems (e.g. linux with\n+\trecent binutils).\n+\tRemove references to Makefile.prolog/generic, no longer used.\n+\n+2005-02-09  Vincent Celier  <celier@adacore.com>\n+\n+\t* prj-makr.adb (Process_Directory): Put file name in canonical case\n+\tbefore matching against the patterns.\n+\tIf gnatname has been invoked as <prefix>-gnatname\n+\tthen invoke the compiler as <prefix>-gcc, not just \"gcc\".\n+\n+2005-02-09  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch4.adb (Analyze_Selected_Component): Create Actual_Subtype even\n+\twith expansion disabled. The actual subtype is needed among other\n+\tplaces when the selected component appears in the context of a loop\n+\tbound, and denotes a packed array.\n+\t(Operator_Check): Always use the first subtype in the\n+\terror message, to avoid the appearance of internal base types.\n+\t(Transform_Object_Operation): Copy each actual in full\n+\tto the parameter associations of the constructed call, rather than\n+\tusing the shallow copy mechanism of New_Copy_List. This ensures that\n+\tthe chaining of named associations is done properly.\n+\t(Complete_Object_Operation): Rewrite node, rather than\n+\treplacing it, so that we can trace back to the original selected\n+\tcomponent.\n+\n+\t* sem_elab.adb (Set_Elaboration_Constraint): For initialization calls,\n+\tand calls that use object notation, if the called function is not\n+\tdeclared  in a withed unit, place the elaboration constraint on the\n+\tunit in the context that makes the function accessible.\n+\t(Check_Elab_Subtype_Declaration): Check whether a subtype declaration\n+\timposes an elaboration constraint between two packages.\n+\n+2005-02-09  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch7.adb (Uninstall_Declarations): Exchange full and private\n+\tviews of a private type after handling its private dependents, to\n+\tmaintain proper stack discipline between entry and exit from the\n+\tpackage.\n+\n+2005-02-09  Cyrille Comar  <comar@adacore.com>\n+\n+\t* s-finimp.adb: (Finalize_List): Optimize in the no-abort case.\n+\tMinor reformatting.\n+\n+2005-02-09  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* s-tporft.adb (Register_Foreign_Thread): Initialize Task_Image[_Len]\n+\tfields for foreign threads.\n+\n+2005-02-09  Doug Rupp  <rupp@adacore.com>\n+\n+\t* s-vaflop.adb: Add pragma Warnings (Off) to eliminate infinite\n+\trecursion warnings when compiled with -gnatdm.\n+\n+2005-02-09  Robert Dewar  <dewar@adacore.com>\n+\n+\t* usage.adb: Add line for switch -gnat05 (allow Ada 2005 extensions)\n+\tSlight fix to documentation of -gnaty with no parameters\n+\n+\t* xr_tabls.ads: Add ??? comment for missing overall comment\n+\n+\t* xsinfo.adb: Make default file name be sinfo.h, since this is what\n+\twe now use by default.\n+\n+\t* xsnames.adb: Adjust end of file test to look for five space followed\n+\tby '#' instead of six spaces. The format of xsnames.adb was modified\n+\tin the last update.\n+\n+\t* a-numeri.ads: Add reference to AI-388 for greek letter pi\n+\tidentifier.\n+\n+\t* clean.adb: Minor reformatting.\n+\n+\t* gnat1drv.adb, gnatfind.adb, gnatlink.adb, gnatmem.adb,\n+\tgnatname.adb: Minor reformatting\n+\tAdd 2005 to copyright output when utility is run\n+\n+\t* csets.adb: Eliminate obsolete comment\n+\n+\t* debug.adb, g-socket.ads, i-cobol.adb: Minor reformatting throughout\n+\tUpdate comments.\n+\n+\t* sem_eval.ads (Eval_Integer_Literal): Do not inline this, not useful.\n+\n+2005-02-09  Sergey Rybin  <rybin@adacore.com>\n+\n+\t* gnat_ugn.texi: Add to the gnatpp section the paragraph describing\n+\tthe difference between compact and incompact layout and add the record\n+\trepresentation clause to the example illustrating different layouts.\n+\tAdd the description of '-A5' gnatpp option (\"align 'AT' keywords in\n+\tcomponent clauses\").\n+\n+2005-02-09  Florian Villoing  <villoing@adacore.com>\n+\n+\t* gnat_ugn.texi: Fix typos.\n+\tUse @command to display 'gcc', 'gnatbind', etc. insted of @code or\n+\t@file.\n+\tMake proper use of @ref, @xref and @pxref to avoid duplication of \"see\"\n+\tin the generated documentation.\n+\n+2005-02-09  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* gnat_ugn.texi: Remove all mentions of FSU threads, which are no\n+\tlonger supported.\n+\tUpdate linker wrapper when linking with non GNU C++.\n+\n+2005-02-09  Pascal Obry  <obry@adacore.com>\n+\n+\t* gnat_ugn.texi: \n+\tDocument the procedure to debug the DllMain routine on Windows.\n+\tAdd note about -funwind-tables and mixed Ada and C/C++ programming in\n+\tZCX mode.\n+\tDocument new BIND qualifer /RETURN_CODES=VMS.\n+\n+2005-02-09  Ben Brosgol  <brosgol@adacore.com>\n+\n+\t* gnat_ugn.texi: Wordsmithing of \"GNAT and Libraries\" chapter\n+\tEdited gnatmetric chapter\n+\n+2005-02-09  Robert Dewar  <dewar@adacore.com>\n+\n+\t* gnat_rm.texi: \n+\tChanges to document new wide wide character support\n+\tFor AI-285\n+\tUpdate documentation on Normalize_Scalars and Initialize_Scalars\n+\n+2005-02-09  Pascal Obry  <obry@adacore.com>\n+\n+\t* s-taprop-mingw.adb, s-soflin.ads: Minor reformatting.\n+\n+2005-02-09  Jose Ruiz  <ruiz@adacore.com>\n+\n+\t* s-osinte-vxworks.ads (taskPriorityGet): Add this function (imported\n+\tfrom the VxWorks kernel) that is needed for getting the active\n+\tpriority of the different tasks.\n+\n+\t* s-atacco.ads, s-atacco.adb (Nothing): Remove this dummy procedure.\n+\tUse a pragma Elaborate_Body in the spec file instead.\n+\tNoticed by code reading.\n+\n+2005-02-09  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* exp_util.ads: Minor correction in comment.\n+\n+2005-02-09  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* s-taprop.ads (Initialize): Update comments. Remove pragma Inline,\n+\tsince this procedure is now too complex to be worth inlining.\n+\n 2005-02-09  Richard Henderson  <rth@redhat.com>\n \n \t* utils.c (gnat_define_builtin): Remove."}]}