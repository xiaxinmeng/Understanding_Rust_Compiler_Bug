{"sha": "092e08c0694373ed29ffd54e275ca9ecc5961db4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDkyZTA4YzA2OTQzNzNlZDI5ZmZkNTRlMjc1Y2E5ZWNjNTk2MWRiNA==", "commit": {"author": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2013-03-26T22:08:17Z"}, "committer": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2013-03-26T22:08:17Z"}, "message": "PR 25708 Use a temporary buffer when parsing module files.\n\n2013-03-27  Janne Blomqvist  <jb@gcc.gnu.org>\n\n\tPR fortran/25708\n        * module.c (module_locus): Use long for position.\n        (module_content): New variable.\n        (module_pos): Likewise.\n        (prev_character): Remove.\n        (bad_module): Free data instead of closing mod file.\n        (set_module_locus): Use module_pos.\n        (get_module_locus): Likewise.\n        (module_char): use buffer rather than stdio file.\n        (module_unget_char): Likewise.\n        (read_module_to_tmpbuf): New function.\n        (gfc_use_module): Call read_module_to_tmpbuf.\n\nFrom-SVN: r197124", "tree": {"sha": "6fd7d0ebac05446d2e787dabb25a9f1ebb19de60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6fd7d0ebac05446d2e787dabb25a9f1ebb19de60"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/092e08c0694373ed29ffd54e275ca9ecc5961db4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/092e08c0694373ed29ffd54e275ca9ecc5961db4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/092e08c0694373ed29ffd54e275ca9ecc5961db4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/092e08c0694373ed29ffd54e275ca9ecc5961db4/comments", "author": null, "committer": null, "parents": [{"sha": "4fc7b1459e873804e353a7aa15a2653e977137f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fc7b1459e873804e353a7aa15a2653e977137f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fc7b1459e873804e353a7aa15a2653e977137f2"}], "stats": {"total": 67, "additions": 54, "deletions": 13}, "files": [{"sha": "0426dfff9c62c4a940849e6986ba6d599570fdd1", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/092e08c0694373ed29ffd54e275ca9ecc5961db4/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/092e08c0694373ed29ffd54e275ca9ecc5961db4/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=092e08c0694373ed29ffd54e275ca9ecc5961db4", "patch": "@@ -1,3 +1,18 @@\n+2013-03-27  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\tPR fortran/25708\n+        * module.c (module_locus): Use long for position.\n+        (module_content): New variable.\n+        (module_pos): Likewise.\n+        (prev_character): Remove.\n+        (bad_module): Free data instead of closing mod file.\n+        (set_module_locus): Use module_pos.\n+        (get_module_locus): Likewise.\n+        (module_char): use buffer rather than stdio file.\n+        (module_unget_char): Likewise.\n+        (read_module_to_tmpbuf): New function.\n+        (gfc_use_module): Call read_module_to_tmpbuf.\n+\n 2013-03-26  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/56649"}, {"sha": "814a40ded2f777d5b181379e8b0d92191801e568", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 39, "deletions": 13, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/092e08c0694373ed29ffd54e275ca9ecc5961db4/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/092e08c0694373ed29ffd54e275ca9ecc5961db4/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=092e08c0694373ed29ffd54e275ca9ecc5961db4", "patch": "@@ -88,7 +88,7 @@ along with GCC; see the file COPYING3.  If not see\n typedef struct\n {\n   int column, line;\n-  fpos_t pos;\n+  long pos;\n }\n module_locus;\n \n@@ -190,8 +190,12 @@ static struct md5_ctx ctx;\n static const char *module_name;\n static gfc_use_list *module_list;\n \n+/* Content of module.  */\n+static char* module_content;\n+\n+static long module_pos;\n static int module_line, module_column, only_flag;\n-static int prev_module_line, prev_module_column, prev_character;\n+static int prev_module_line, prev_module_column;\n \n static enum\n { IO_INPUT, IO_OUTPUT }\n@@ -1004,7 +1008,8 @@ static void bad_module (const char *) ATTRIBUTE_NORETURN;\n static void\n bad_module (const char *msgid)\n {\n-  fclose (module_fp);\n+  XDELETEVEC (module_content);\n+  module_content = NULL;\n \n   switch (iomode)\n     {\n@@ -1031,7 +1036,7 @@ set_module_locus (module_locus *m)\n {\n   module_column = m->column;\n   module_line = m->line;\n-  fsetpos (module_fp, &m->pos);\n+  module_pos = m->pos;\n }\n \n \n@@ -1042,7 +1047,7 @@ get_module_locus (module_locus *m)\n {\n   m->column = module_column;\n   m->line = module_line;\n-  fgetpos (module_fp, &m->pos);\n+  m->pos = module_pos;\n }\n \n \n@@ -1052,16 +1057,12 @@ get_module_locus (module_locus *m)\n static int\n module_char (void)\n {\n-  int c;\n-\n-  c = getc (module_fp);\n-\n-  if (c == EOF)\n+  const char c = module_content[module_pos++];\n+  if (c == '\\0')\n     bad_module (\"Unexpected EOF\");\n \n   prev_module_line = module_line;\n   prev_module_column = module_column;\n-  prev_character = c;\n \n   if (c == '\\n')\n     {\n@@ -1081,7 +1082,7 @@ module_unget_char (void)\n {\n   module_line = prev_module_line;\n   module_column = prev_module_column;\n-  ungetc (prev_character, module_fp);\n+  module_pos--;\n }\n \n /* Parse a string constant.  The delimiter is guaranteed to be a\n@@ -6019,6 +6020,27 @@ create_derived_type (const char *name, const char *modname,\n }\n \n \n+/* Read the contents of the module file into a temporary buffer.  */\n+\n+static void\n+read_module_to_tmpbuf ()\n+{\n+  /* Find out the size of the file and reserve space.  Assume we're at\n+     the beginning.  */\n+  fseek (module_fp, 0, SEEK_END);\n+  long file_size = ftell (module_fp);\n+  fseek (module_fp, 0, SEEK_SET);\n+\n+  /* An extra byte for the terminating NULL.  */\n+  module_content = XNEWVEC (char, file_size + 1);\n+\n+  fread (module_content, 1, file_size, module_fp);\n+  module_content[file_size] = '\\0';\n+\n+  module_pos = 0;\n+}\n+\n+\n /* USE the ISO_FORTRAN_ENV intrinsic module.  */\n \n static void\n@@ -6289,6 +6311,9 @@ gfc_use_module (gfc_use_list *module)\n   module_column = 1;\n   start = 0;\n \n+  read_module_to_tmpbuf ();\n+  fclose (module_fp);\n+\n   /* Skip the first two lines of the module, after checking that this is\n      a gfortran module file.  */\n   line = 0;\n@@ -6336,7 +6361,8 @@ gfc_use_module (gfc_use_list *module)\n   free_pi_tree (pi_root);\n   pi_root = NULL;\n \n-  fclose (module_fp);\n+  XDELETEVEC (module_content);\n+  module_content = NULL;\n \n   use_stmt = gfc_get_use_list ();\n   *use_stmt = *module;"}]}