{"sha": "1aafbf99427843b553de817302453bf126592553", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWFhZmJmOTk0Mjc4NDNiNTUzZGU4MTczMDI0NTNiZjEyNjU5MjU1Mw==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2009-07-09T16:48:50Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2009-07-09T16:48:50Z"}, "message": "re PR fortran/40629 (Host association problem)\n\n2008-07-09  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/40629\n\t* resolve.c (check_host_association):  Use the existing\n\taccessible symtree and treat function expressions with\n\tsymbols that have procedure flavor.\n\n2008-07-09  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/40629\n\t* gfortran.dg/host_assoc_function_9.f90: New test.\n\nFrom-SVN: r149422", "tree": {"sha": "bd61b3a419fdbfb15b0bffd0366af71a7b3f9266", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd61b3a419fdbfb15b0bffd0366af71a7b3f9266"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1aafbf99427843b553de817302453bf126592553", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1aafbf99427843b553de817302453bf126592553", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1aafbf99427843b553de817302453bf126592553", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1aafbf99427843b553de817302453bf126592553/comments", "author": null, "committer": null, "parents": [{"sha": "6eba227cb539b391ee9c8798284b885e09289914", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6eba227cb539b391ee9c8798284b885e09289914", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6eba227cb539b391ee9c8798284b885e09289914"}], "stats": {"total": 56, "additions": 51, "deletions": 5}, "files": [{"sha": "5b1ed7728295da3e0ccbd8dee6e1907bb9a22c0d", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aafbf99427843b553de817302453bf126592553/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aafbf99427843b553de817302453bf126592553/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=1aafbf99427843b553de817302453bf126592553", "patch": "@@ -1,3 +1,10 @@\n+2008-07-09  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/40629\n+\t* resolve.c (check_host_association):  Use the existing\n+\taccessible symtree and treat function expressions with\n+\tsymbols that have procedure flavor.\n+\n 2009-07-09  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/40646"}, {"sha": "9b091ad01625195d1d3d1fbb38a5739d7f650434", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aafbf99427843b553de817302453bf126592553/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aafbf99427843b553de817302453bf126592553/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=1aafbf99427843b553de817302453bf126592553", "patch": "@@ -4402,12 +4402,13 @@ check_host_association (gfc_expr *e)\n \t      gfc_free (e->shape);\n \t    }\n \n-\t  /* Give the symbol a symtree in the right place!  */\n-\t  gfc_get_sym_tree (sym->name, gfc_current_ns, &st, false);\n-\t  st->n.sym = sym;\n+\t  /* Give the expression the right symtree!  */\n+\t  gfc_find_sym_tree (e->symtree->name, NULL, 1, &st);\n+\t  gcc_assert (st != NULL);\n \n-\t  if (old_sym->attr.flavor == FL_PROCEDURE)\n-\t    {\n+\t  if (old_sym->attr.flavor == FL_PROCEDURE\n+\t\t|| e->expr_type == EXPR_FUNCTION)\n+  \t    {\n \t      /* Original was function so point to the new symbol, since\n \t\t the actual argument list is already attached to the\n \t\t expression. */"}, {"sha": "e04e25e87536e05798c36bafa6d0130040c4906e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aafbf99427843b553de817302453bf126592553/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aafbf99427843b553de817302453bf126592553/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1aafbf99427843b553de817302453bf126592553", "patch": "@@ -1,3 +1,8 @@\n+2008-07-09  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/40629\n+\t* gfortran.dg/host_assoc_function_9.f90: New test.\n+\n 2009-07-09  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/40646"}, {"sha": "58cae435fb6be317756341bb9b638a986f7e564e", "filename": "gcc/testsuite/gfortran.dg/host_assoc_function_9.f90", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aafbf99427843b553de817302453bf126592553/gcc%2Ftestsuite%2Fgfortran.dg%2Fhost_assoc_function_9.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aafbf99427843b553de817302453bf126592553/gcc%2Ftestsuite%2Fgfortran.dg%2Fhost_assoc_function_9.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fhost_assoc_function_9.f90?ref=1aafbf99427843b553de817302453bf126592553", "patch": "@@ -0,0 +1,33 @@\n+! { dg-do run }\n+! Tests the fix for the bug PR40629, in which the reference to 'x'\n+! in 'upper' wrongly host-associated with the symbol 'x' at module\n+! leve rather than the function.\n+!\n+! Contributed by Philippe Marguinaud  <philippe.marguinaud@meteo.fr>\n+!\n+MODULE m\n+  REAL :: x = 0\n+CONTAINS\n+  subroutine s\n+    call upper\n+    call lower\n+  CONTAINS\n+    SUBROUTINE upper\n+     y = x(3,1)\n+     if (int(y) .ne. 3) call abort\n+    END SUBROUTINE\n+    FUNCTION x(n, m)\n+       x = m*n\n+    END FUNCTION\n+    SUBROUTINE lower\n+     y = x(2,1)\n+     if (int(y) .ne. 2) call abort\n+    END SUBROUTINE\n+  END SUBROUTINE\n+END MODULE\n+\n+  use m\n+  call s\n+end\n+! { dg-final { cleanup-modules \"m\" } }\n+"}]}