{"sha": "2a9fb7125e0b0e73cc36ebbff607aa03d6e02ea4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmE5ZmI3MTI1ZTBiMGU3M2NjMzZlYmJmZjYwN2FhMDNkNmUwMmVhNA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2015-10-20T02:48:51Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2015-10-20T02:48:51Z"}, "message": "Implement N4268, Do constant evaluation of all non-type template args.\n\ngcc/c-family/\n\t* c-cppbuiltin.c (c_cpp_builtins): Define\n\t__cpp_nontype_template_args.\ngcc/cp/\n\t* parser.c (cp_parser_template_argument): For C++1z just parse a\n\tconstant-expression.\n\t* pt.c (convert_nontype_argument): For C++1z always call\n\tmaybe_constant_value.\n\nFrom-SVN: r229019", "tree": {"sha": "ce34d7922020e02b9e9d7346c70ded9a6f9f13c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce34d7922020e02b9e9d7346c70ded9a6f9f13c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a9fb7125e0b0e73cc36ebbff607aa03d6e02ea4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a9fb7125e0b0e73cc36ebbff607aa03d6e02ea4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a9fb7125e0b0e73cc36ebbff607aa03d6e02ea4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a9fb7125e0b0e73cc36ebbff607aa03d6e02ea4/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dcdbc004d531b43e0583f8ac18def1474d64dc05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcdbc004d531b43e0583f8ac18def1474d64dc05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcdbc004d531b43e0583f8ac18def1474d64dc05"}], "stats": {"total": 89, "additions": 87, "deletions": 2}, "files": [{"sha": "46a6d749ed6789b7a9714ffbb59c79208c77c851", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a9fb7125e0b0e73cc36ebbff607aa03d6e02ea4/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a9fb7125e0b0e73cc36ebbff607aa03d6e02ea4/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=2a9fb7125e0b0e73cc36ebbff607aa03d6e02ea4", "patch": "@@ -1,3 +1,8 @@\n+2015-10-19  Jason Merrill  <jason@redhat.com>\n+\n+\t* c-cppbuiltin.c (c_cpp_builtins): Define\n+\t__cpp_nontype_template_args.\n+\n 2015-10-19  Jason Merrill  <jason@redhat.com>\n \n \t* c-cppbuiltin.c (c_cpp_builtins): Define"}, {"sha": "c6c3d6b0116c3bb8ca7b4b546c4f34a18693f12d", "filename": "gcc/c-family/c-cppbuiltin.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a9fb7125e0b0e73cc36ebbff607aa03d6e02ea4/gcc%2Fc-family%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a9fb7125e0b0e73cc36ebbff607aa03d6e02ea4/gcc%2Fc-family%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-cppbuiltin.c?ref=2a9fb7125e0b0e73cc36ebbff607aa03d6e02ea4", "patch": "@@ -876,6 +876,7 @@ c_cpp_builtins (cpp_reader *pfile)\n \t  cpp_define (pfile, \"__cpp_enumerator_attributes=201411\");\n \t  cpp_define (pfile, \"__cpp_nested_namespace_definitions=201411\");\n \t  cpp_define (pfile, \"__cpp_fold_expressions=201411\");\n+\t  cpp_define (pfile, \"__cpp_nontype_template_args=201411\");\n \t}\n       if (flag_concepts)\n \t/* Use a value smaller than the 201507 specified in"}, {"sha": "842426b5f2d46f01ea4ebe4e478551695554542a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a9fb7125e0b0e73cc36ebbff607aa03d6e02ea4/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a9fb7125e0b0e73cc36ebbff607aa03d6e02ea4/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2a9fb7125e0b0e73cc36ebbff607aa03d6e02ea4", "patch": "@@ -1,5 +1,11 @@\n 2015-10-19  Jason Merrill  <jason@redhat.com>\n \n+\tImplement N4268, Do constant evaluation of all non-type template args.\n+\t* parser.c (cp_parser_template_argument): For C++1z just parse a\n+\tconstant-expression.\n+\t* pt.c (convert_nontype_argument): For C++1z always call\n+\tmaybe_constant_value.\n+\n \t* constexpr.c (cxx_eval_constant_expression): Expand PTRMEM_CST\n \tonly when necessary.\n \t(cxx_eval_component_reference): Like here."}, {"sha": "f07a5e49532d62a000e53ba63fbd3024600b792a", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a9fb7125e0b0e73cc36ebbff607aa03d6e02ea4/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a9fb7125e0b0e73cc36ebbff607aa03d6e02ea4/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=2a9fb7125e0b0e73cc36ebbff607aa03d6e02ea4", "patch": "@@ -14977,8 +14977,12 @@ cp_parser_template_argument (cp_parser* parser)\n \twarn_deprecated_use (argument, NULL_TREE);\n       return argument;\n     }\n-  /* It must be a non-type argument.  There permitted cases are given\n-     in [temp.arg.nontype]:\n+  /* It must be a non-type argument.  In C++17 any constant-expression is\n+     allowed.  */\n+  if (cxx_dialect > cxx14)\n+    goto general_expr;\n+\n+  /* Otherwise, the permitted cases are given in [temp.arg.nontype]:\n \n      -- an integral constant-expression of integral or enumeration\n \ttype; or\n@@ -15090,6 +15094,7 @@ cp_parser_template_argument (cp_parser* parser)\n       return error_mark_node;\n     }\n \n+ general_expr:\n   /* If the argument wasn't successfully parsed as a type-id followed\n      by '>>', the argument can only be a constant expression now.\n      Otherwise, we try parsing the constant-expression tentatively,"}, {"sha": "142245ad8e0c8a2d377a3d28622b239f9850e81d", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a9fb7125e0b0e73cc36ebbff607aa03d6e02ea4/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a9fb7125e0b0e73cc36ebbff607aa03d6e02ea4/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=2a9fb7125e0b0e73cc36ebbff607aa03d6e02ea4", "patch": "@@ -6233,6 +6233,17 @@ convert_nontype_argument (tree type, tree expr, tsubst_flags_t complain)\n \t   CONSTRUCTOR.  */;\n       else if (INTEGRAL_OR_ENUMERATION_TYPE_P (type))\n \texpr = maybe_constant_value (expr);\n+      else if (cxx_dialect >= cxx1z)\n+\t{\n+\t  if (TREE_CODE (type) != REFERENCE_TYPE)\n+\t    expr = maybe_constant_value (expr);\n+\t  else if (REFERENCE_REF_P (expr))\n+\t    {\n+\t      expr = TREE_OPERAND (expr, 0);\n+\t      expr = maybe_constant_value (expr);\n+\t      expr = convert_from_reference (expr);\n+\t    }\n+\t}\n       else if (TYPE_PTR_OR_PTRMEM_P (type))\n \t{\n \t  tree folded = maybe_constant_value (expr);"}, {"sha": "bb46a997e2e2e18d2df62205df144bc8550d758a", "filename": "gcc/testsuite/g++.dg/cpp1z/nontype1.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a9fb7125e0b0e73cc36ebbff607aa03d6e02ea4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fnontype1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a9fb7125e0b0e73cc36ebbff607aa03d6e02ea4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fnontype1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fnontype1.C?ref=2a9fb7125e0b0e73cc36ebbff607aa03d6e02ea4", "patch": "@@ -0,0 +1,25 @@\n+// { dg-options -std=c++1z }\n+\n+struct S { int m; static int s; } s;\n+\n+struct T: S { };\n+\n+template<int* p> class X { };\n+template<const int S::*> class M {};\n+template<const S&> class SP {};\n+\n+constexpr int *p = &S::s;\n+constexpr int S::*sp = &T::m;\n+constexpr S& sr = s;\n+constexpr S& sf() { return s; }\n+\n+// { dg-final { scan-assembler \"_Z1g1XIXadL_ZN1S1sEEEE\" } }\n+void g (X<&s.s>) { }\n+// { dg-final { scan-assembler \"_Z1f1XIXadL_ZN1S1sEEEE\" } }\n+void f (X<p>) { }\n+// { dg-final { scan-assembler \"_Z1f1MIXadL_ZN1S1mEEEE\" } }\n+void f (M<sp>) {}\n+// { dg-final { scan-assembler \"_Z1f2SPIL_Z1sEE\" } }\n+void f (SP<sr>) {}\n+// { dg-final { scan-assembler \"_Z1g2SPIL_Z1sEE\" } }\n+void g (SP<sf()>) {}"}, {"sha": "e489476f463d9d4ed998fb9acaa168a16e6c38c8", "filename": "gcc/testsuite/g++.dg/cpp1z/nontype2.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a9fb7125e0b0e73cc36ebbff607aa03d6e02ea4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fnontype2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a9fb7125e0b0e73cc36ebbff607aa03d6e02ea4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fnontype2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fnontype2.C?ref=2a9fb7125e0b0e73cc36ebbff607aa03d6e02ea4", "patch": "@@ -0,0 +1,18 @@\n+// { dg-options -std=c++1z }\n+\n+#include <typeinfo>\n+\n+struct S { int m; static int s; } s;\n+\n+template<int* p> class X { };\n+template<const char *s> class Y {};\n+template<const std::type_info &> class Z {};\n+\n+X<&s.m> x7;\t\t\t// { dg-error \"\" }\n+Y<\"foo\"> y1;\t\t\t// { dg-error \"string literal\" }\n+Z<typeid(p)> z1;\t\t// { dg-error \"\" }\n+\n+void f()\n+{\n+  Y<__func__> y;\t\t// { dg-error \"\" }\n+}"}, {"sha": "886d7a5788ba4b1a32bbf9ef40d83091ae4b9faa", "filename": "gcc/testsuite/g++.dg/cpp1z/nontype3.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a9fb7125e0b0e73cc36ebbff607aa03d6e02ea4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fnontype3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a9fb7125e0b0e73cc36ebbff607aa03d6e02ea4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fnontype3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fnontype3.C?ref=2a9fb7125e0b0e73cc36ebbff607aa03d6e02ea4", "patch": "@@ -0,0 +1,9 @@\n+// { dg-options \"-std=c++1z\" }\n+\n+#ifndef __cpp_nontype_template_args\n+#error __cpp_nontype_template_args not defined\n+#endif\n+\n+#if __cpp_nontype_template_args != 201411\n+#error Wrong value for __cpp_nontype_template_args\n+#endif"}, {"sha": "a253d6bdbc0105ac62823d8b20cd428101574746", "filename": "gcc/testsuite/g++.dg/cpp1z/nontype3a.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a9fb7125e0b0e73cc36ebbff607aa03d6e02ea4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fnontype3a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a9fb7125e0b0e73cc36ebbff607aa03d6e02ea4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fnontype3a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fnontype3a.C?ref=2a9fb7125e0b0e73cc36ebbff607aa03d6e02ea4", "patch": "@@ -0,0 +1,5 @@\n+// This macro should not be defined without -std=c++1z.\n+\n+#ifdef __cpp_nontype_template_args\n+#error __cpp_nontype_template_args defined\n+#endif"}]}