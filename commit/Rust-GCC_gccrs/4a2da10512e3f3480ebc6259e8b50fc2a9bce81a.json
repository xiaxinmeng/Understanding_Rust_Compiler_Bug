{"sha": "4a2da10512e3f3480ebc6259e8b50fc2a9bce81a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGEyZGExMDUxMmUzZjM0ODBlYmM2MjU5ZThiNTBmYzJhOWJjZTgxYQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2010-10-04T11:11:57Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2010-10-04T11:11:57Z"}, "message": "re PR middle-end/45871 (lto bootstrap miscompiles expmed.c)\n\n\n\tPR middle-end/45871\n\t* tree-ssa-ccp.c (get_base_constructor): Take HOST_WIDE_INT offset;\n\tuse get_ref_base_and_offset to handle references.\n\t(fold_const_aggregate_ref): Update.\n\nFrom-SVN: r164931", "tree": {"sha": "ee1042aaa88b2af8a06329aa39cb06310e9445c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee1042aaa88b2af8a06329aa39cb06310e9445c9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a2da10512e3f3480ebc6259e8b50fc2a9bce81a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a2da10512e3f3480ebc6259e8b50fc2a9bce81a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a2da10512e3f3480ebc6259e8b50fc2a9bce81a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a2da10512e3f3480ebc6259e8b50fc2a9bce81a/comments", "author": null, "committer": null, "parents": [{"sha": "1dbee8c9f90c562d20928c489412d4eca2e4b21a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dbee8c9f90c562d20928c489412d4eca2e4b21a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1dbee8c9f90c562d20928c489412d4eca2e4b21a"}], "stats": {"total": 44, "additions": 25, "deletions": 19}, "files": [{"sha": "b53f88c11e3f0886bc29c1b7ee12822c3f5eccea", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a2da10512e3f3480ebc6259e8b50fc2a9bce81a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a2da10512e3f3480ebc6259e8b50fc2a9bce81a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4a2da10512e3f3480ebc6259e8b50fc2a9bce81a", "patch": "@@ -1,3 +1,10 @@\n+2010-10-04  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR middle-end/45871\n+\t* tree-ssa-ccp.c (get_base_constructor): Take HOST_WIDE_INT offset;\n+\tuse get_ref_base_and_offset to handle references.\n+\t(fold_const_aggregate_ref): Update.\n+\n 2010-10-04  Martin Jambor  <mjambor@suse.cz>\n \n \tPR tree-optimization/45572"}, {"sha": "2fa4726e1ea560fc10819a04c3fddd22d56ecd3b", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 18, "deletions": 19, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a2da10512e3f3480ebc6259e8b50fc2a9bce81a/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a2da10512e3f3480ebc6259e8b50fc2a9bce81a/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=4a2da10512e3f3480ebc6259e8b50fc2a9bce81a", "patch": "@@ -1319,18 +1319,26 @@ ccp_fold (gimple stmt)\n }\n \n /* See if we can find constructor defining value of BASE.\n+   When we know the consructor with constant offset (such as\n+   base is array[40] and we do know constructor of array), then\n+   BIT_OFFSET is adjusted accordingly.\n \n    As a special case, return error_mark_node when constructor\n    is not explicitly available, but it is known to be zero\n    such as 'static const int a;'.  */\n static tree\n-get_base_constructor (tree base, tree *offset)\n+get_base_constructor (tree base, HOST_WIDE_INT *bit_offset)\n {\n-  *offset = NULL;\n+  HOST_WIDE_INT bit_offset2, size, max_size;\n   if (TREE_CODE (base) == MEM_REF)\n     {\n       if (!integer_zerop (TREE_OPERAND (base, 1)))\n-        *offset = TREE_OPERAND (base, 1);\n+\t{\n+\t  if (!host_integerp (TREE_OPERAND (base, 1), 0))\n+\t    return NULL_TREE;\n+\t  *bit_offset += (mem_ref_offset (base).low\n+\t\t\t  * BITS_PER_UNIT);\n+\t}\n \n       base = get_constant_value (TREE_OPERAND (base, 0));\n       if (!base || TREE_CODE (base) != ADDR_EXPR)\n@@ -1359,7 +1367,11 @@ get_base_constructor (tree base, tree *offset)\n \n     case ARRAY_REF:\n     case COMPONENT_REF:\n-      return fold_const_aggregate_ref (base);\n+      base = get_ref_base_and_extent (base, &bit_offset2, &size, &max_size);\n+      if (max_size == -1 || size != max_size)\n+\treturn NULL_TREE;\n+      *bit_offset +=  bit_offset2;\n+      return get_base_constructor (base, bit_offset);\n       break;\n \n     case STRING_CST:\n@@ -1597,7 +1609,6 @@ fold_const_aggregate_ref (tree t)\n   tree ctor, idx, base;\n   HOST_WIDE_INT offset, size, max_size;\n   tree tem;\n-  tree ctr_offset;\n \n   if (TREE_CODE_CLASS (TREE_CODE (t)) == tcc_declaration)\n     return get_symbol_constant_value (t);\n@@ -1633,13 +1644,7 @@ fold_const_aggregate_ref (tree t)\n \t      offset *= BITS_PER_UNIT;\n \n \t      base = TREE_OPERAND (t, 0);\n-\t      ctor = get_base_constructor (base, &ctr_offset);\n-\t      if (ctr_offset)\n-\t\t{\n-\t\t  if (!host_integerp (ctr_offset, 1))\n-\t\t    return NULL_TREE;\n-\t\t  offset += TREE_INT_CST_LOW (ctr_offset) * BITS_PER_UNIT;\n-\t\t}\n+\t      ctor = get_base_constructor (base, &offset);\n \t      /* Empty constructor.  Always fold to 0. */\n \t      if (ctor == error_mark_node)\n \t\treturn build_zero_cst (TREE_TYPE (t));\n@@ -1661,7 +1666,7 @@ fold_const_aggregate_ref (tree t)\n     case TARGET_MEM_REF:\n     case MEM_REF:\n       base = get_ref_base_and_extent (t, &offset, &size, &max_size);\n-      ctor = get_base_constructor (base, &ctr_offset);\n+      ctor = get_base_constructor (base, &offset);\n \n       /* Empty constructor.  Always fold to 0. */\n       if (ctor == error_mark_node)\n@@ -1673,12 +1678,6 @@ fold_const_aggregate_ref (tree t)\n       if (!ctor)\n \treturn NULL_TREE;\n \n-      if (ctr_offset)\n-\t{\n-\t  if (!host_integerp (ctr_offset, 1))\n-\t    return NULL_TREE;\n-\t  offset += TREE_INT_CST_LOW (ctr_offset) * BITS_PER_UNIT;\n-\t}\n       /* Out of bound array access.  Value is undefined, but don't fold. */\n       if (offset < 0)\n \treturn NULL_TREE;"}]}