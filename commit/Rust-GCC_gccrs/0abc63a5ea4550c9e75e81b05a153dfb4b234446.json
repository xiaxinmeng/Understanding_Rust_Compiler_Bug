{"sha": "0abc63a5ea4550c9e75e81b05a153dfb4b234446", "node_id": "C_kwDOANBUbNoAKDBhYmM2M2E1ZWE0NTUwYzllNzVlODFiMDVhMTUzZGZiNGIyMzQ0NDY", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-09-14T18:11:22Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-09-14T18:17:37Z"}, "message": "libstdc++: Add TSan annotations to std::atomic<shared_ptr<T>>\n\nThis adds annotations to std::atomic<shared_ptr<T>> to enable TSan to\nunderstand the custom locking. Without this, TSan reports data races for\naccesses to the _M_ptr member, even though those are correctly\nsynchronized using atomic operations on the tagged pointer.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/shared_ptr_atomic.h (_GLIBCXX_TSAN_MUTEX_DESTROY)\n\t(_GLIBCXX_TSAN_MUTEX_PRE_LOCK, _GLIBCXX_TSAN_MUTEX_POST_LOCK)\n\t(_GLIBCXX_TSAN_MUTEX_PRE_UNLOCK, _GLIBCXX_TSAN_MUTEX_POST_UNLOCK)\n\t(_GLIBCXX_TSAN_MUTEX_PRE_SIGNAL, _GLIBCXX_TSAN_MUTEX_POST_SIGNAL):\n\tDefine macros for TSan annotation functions.\n\t(_Sp_atomic::_Atomic_count): Add annotations.", "tree": {"sha": "4aaf3f1e1f289b3b6dc67a80d4ef3de46d4b061f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4aaf3f1e1f289b3b6dc67a80d4ef3de46d4b061f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0abc63a5ea4550c9e75e81b05a153dfb4b234446", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0abc63a5ea4550c9e75e81b05a153dfb4b234446", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0abc63a5ea4550c9e75e81b05a153dfb4b234446", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0abc63a5ea4550c9e75e81b05a153dfb4b234446/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f1e3d06bb9a39fb42afd4d0ea1a103fe239b1cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f1e3d06bb9a39fb42afd4d0ea1a103fe239b1cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f1e3d06bb9a39fb42afd4d0ea1a103fe239b1cb"}], "stats": {"total": 38, "additions": 38, "deletions": 0}, "files": [{"sha": "4580807f42ca05d2b50120ccf4347abc3d3f2f95", "filename": "libstdc++-v3/include/bits/shared_ptr_atomic.h", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0abc63a5ea4550c9e75e81b05a153dfb4b234446/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_atomic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0abc63a5ea4550c9e75e81b05a153dfb4b234446/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_atomic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_atomic.h?ref=0abc63a5ea4550c9e75e81b05a153dfb4b234446", "patch": "@@ -32,6 +32,30 @@\n \n #include <bits/atomic_base.h>\n \n+#if defined _GLIBCXX_TSAN && __has_include(<sanitizer/tsan_interface.h>)\n+#include <sanitizer/tsan_interface.h>\n+#define _GLIBCXX_TSAN_MUTEX_DESTROY(X) \\\n+  __tsan_mutex_destroy(X, __tsan_mutex_not_static)\n+#define _GLIBCXX_TSAN_MUTEX_PRE_LOCK(X) \\\n+  __tsan_mutex_pre_lock(X, __tsan_mutex_not_static)\n+#define _GLIBCXX_TSAN_MUTEX_POST_LOCK(X) \\\n+  __tsan_mutex_post_lock(X, __tsan_mutex_not_static, 0)\n+#define _GLIBCXX_TSAN_MUTEX_PRE_UNLOCK(X) \\\n+  __tsan_mutex_pre_unlock(X, __tsan_mutex_not_static)\n+#define _GLIBCXX_TSAN_MUTEX_POST_UNLOCK(X) \\\n+  __tsan_mutex_post_unlock(X, __tsan_mutex_not_static)\n+#define _GLIBCXX_TSAN_MUTEX_PRE_SIGNAL(X) __tsan_mutex_pre_signal(X, 0)\n+#define _GLIBCXX_TSAN_MUTEX_POST_SIGNAL(X) __tsan_mutex_post_signal(X, 0)\n+#else\n+#define _GLIBCXX_TSAN_MUTEX_DESTROY(X)\n+#define _GLIBCXX_TSAN_MUTEX_PRE_LOCK(X)\n+#define _GLIBCXX_TSAN_MUTEX_POST_LOCK(X)\n+#define _GLIBCXX_TSAN_MUTEX_PRE_UNLOCK(X)\n+#define _GLIBCXX_TSAN_MUTEX_POST_UNLOCK(X)\n+#define _GLIBCXX_TSAN_MUTEX_PRE_SIGNAL(X)\n+#define _GLIBCXX_TSAN_MUTEX_POST_SIGNAL(X)\n+#endif\n+\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n@@ -377,6 +401,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t~_Atomic_count()\n \t{\n \t  auto __val = _M_val.load(memory_order_relaxed);\n+\t  _GLIBCXX_TSAN_MUTEX_DESTROY(&_M_val);\n \t  __glibcxx_assert(!(__val & _S_lock_bit));\n \t  if (auto __pi = reinterpret_cast<pointer>(__val))\n \t    {\n@@ -406,6 +431,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t      __current = _M_val.load(memory_order_relaxed);\n \t    }\n \n+\t  _GLIBCXX_TSAN_MUTEX_PRE_LOCK(&_M_val);\n+\n \t  while (!_M_val.compare_exchange_strong(__current,\n \t\t\t\t\t\t __current | _S_lock_bit,\n \t\t\t\t\t\t __o,\n@@ -416,14 +443,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n \t      __current = __current & ~_S_lock_bit;\n \t    }\n+\t  _GLIBCXX_TSAN_MUTEX_POST_LOCK(&_M_val);\n \t  return reinterpret_cast<pointer>(__current);\n \t}\n \n \t// Precondition: caller holds lock!\n \tvoid\n \tunlock(memory_order __o) const noexcept\n \t{\n+\t  _GLIBCXX_TSAN_MUTEX_PRE_UNLOCK(&_M_val);\n \t  _M_val.fetch_sub(1, __o);\n+\t  _GLIBCXX_TSAN_MUTEX_POST_UNLOCK(&_M_val);\n \t}\n \n \t// Swaps the values of *this and __c, and unlocks *this.\n@@ -434,7 +464,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  if (__o != memory_order_seq_cst)\n \t    __o = memory_order_release;\n \t  auto __x = reinterpret_cast<uintptr_t>(__c._M_pi);\n+\t  _GLIBCXX_TSAN_MUTEX_PRE_UNLOCK(&_M_val);\n \t  __x = _M_val.exchange(__x, __o);\n+\t  _GLIBCXX_TSAN_MUTEX_POST_UNLOCK(&_M_val);\n \t  __c._M_pi = reinterpret_cast<pointer>(__x & ~_S_lock_bit);\n \t}\n \n@@ -443,20 +475,26 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tvoid\n \t_M_wait_unlock(memory_order __o) const noexcept\n \t{\n+\t  _GLIBCXX_TSAN_MUTEX_PRE_UNLOCK(&_M_val);\n \t  auto __v = _M_val.fetch_sub(1, memory_order_relaxed);\n+\t  _GLIBCXX_TSAN_MUTEX_POST_UNLOCK(&_M_val);\n \t  _M_val.wait(__v & ~_S_lock_bit, __o);\n \t}\n \n \tvoid\n \tnotify_one() noexcept\n \t{\n+\t  _GLIBCXX_TSAN_MUTEX_PRE_SIGNAL(&_M_val);\n \t  _M_val.notify_one();\n+\t  _GLIBCXX_TSAN_MUTEX_POST_SIGNAL(&_M_val);\n \t}\n \n \tvoid\n \tnotify_all() noexcept\n \t{\n+\t  _GLIBCXX_TSAN_MUTEX_PRE_SIGNAL(&_M_val);\n \t  _M_val.notify_all();\n+\t  _GLIBCXX_TSAN_MUTEX_POST_SIGNAL(&_M_val);\n \t}\n #endif\n "}]}