{"sha": "5f6eeeb3625bd5121465d8a50c89f47b25af0a69", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWY2ZWVlYjM2MjViZDUxMjE0NjVkOGE1MGM4OWY0N2IyNWFmMGE2OQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2001-04-27T10:47:36Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2001-04-27T10:47:36Z"}, "message": "cp-tree.h (adjust_clone_args): Prototype new function.\n\ncp:\n\t* cp-tree.h (adjust_clone_args): Prototype new function.\n\t* class.c (adjust_clone_args): New function.\n\t* decl.c (start_function): Call it for in charge ctors.\ntestsuite:\n\t* g++.old-deja/g++.other/defarg9.C: New test.\n\nFrom-SVN: r41625", "tree": {"sha": "0db5d6c3a3f6dcb5dd8296b756654750fccb07fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0db5d6c3a3f6dcb5dd8296b756654750fccb07fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f6eeeb3625bd5121465d8a50c89f47b25af0a69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f6eeeb3625bd5121465d8a50c89f47b25af0a69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f6eeeb3625bd5121465d8a50c89f47b25af0a69", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f6eeeb3625bd5121465d8a50c89f47b25af0a69/comments", "author": null, "committer": null, "parents": [{"sha": "6e0263244cee6c6158deb4ca00b7ca1d0e4cc193", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e0263244cee6c6158deb4ca00b7ca1d0e4cc193", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e0263244cee6c6158deb4ca00b7ca1d0e4cc193"}], "stats": {"total": 143, "additions": 143, "deletions": 0}, "files": [{"sha": "7dc59bfe54034981db1a8d514e6a318c5f9b1e72", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f6eeeb3625bd5121465d8a50c89f47b25af0a69/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f6eeeb3625bd5121465d8a50c89f47b25af0a69/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5f6eeeb3625bd5121465d8a50c89f47b25af0a69", "patch": "@@ -1,3 +1,9 @@\n+2001-04-27  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* cp-tree.h (adjust_clone_args): Prototype new function.\n+\t* class.c (adjust_clone_args): New function.\n+\t* decl.c (start_function): Call it for in charge ctors.\n+\n 2001-04-26  Mark Mitchell  <mark@codesourcery.com>\n \n \t* method.c (use_thunk): Make sure that thunks really are emitted"}, {"sha": "6db4f782c43718d5523a97d22038e51079a6844b", "filename": "gcc/cp/class.c", "status": "modified", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f6eeeb3625bd5121465d8a50c89f47b25af0a69/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f6eeeb3625bd5121465d8a50c89f47b25af0a69/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=5f6eeeb3625bd5121465d8a50c89f47b25af0a69", "patch": "@@ -4407,6 +4407,80 @@ clone_function_decl (fn, update_method_vec_p)\n   DECL_ABSTRACT (fn) = 1;\n }\n \n+/* DECL is an in charge constructor, which is being defined. This will\n+   have had an in class declaration, from whence clones were\n+   declared. An out-of-class definition can specify additional default\n+   arguments. As it is the clones that are involved in overload\n+   resolution, we must propagate the information from the DECL to its\n+   clones. */\n+\n+void\n+adjust_clone_args (decl)\n+     tree decl;\n+{\n+  tree clone;\n+  \n+  for (clone = TREE_CHAIN (decl); clone && DECL_CLONED_FUNCTION (clone);\n+       clone = TREE_CHAIN (clone))\n+    {\n+      tree orig_clone_parms = TYPE_ARG_TYPES (TREE_TYPE (clone));\n+      tree orig_decl_parms = TYPE_ARG_TYPES (TREE_TYPE (decl));\n+      tree decl_parms, clone_parms;\n+\n+      clone_parms = orig_clone_parms;\n+      \n+      /* Skip the 'this' parameter. */\n+      orig_clone_parms = TREE_CHAIN (orig_clone_parms);\n+      orig_decl_parms = TREE_CHAIN (orig_decl_parms);\n+\n+      if (DECL_HAS_IN_CHARGE_PARM_P (decl))\n+\torig_decl_parms = TREE_CHAIN (orig_decl_parms);\n+      if (DECL_HAS_VTT_PARM_P (decl))\n+\torig_decl_parms = TREE_CHAIN (orig_decl_parms);\n+      \n+      clone_parms = orig_clone_parms;\n+      if (DECL_HAS_VTT_PARM_P (clone))\n+\tclone_parms = TREE_CHAIN (clone_parms);\n+      \n+      for (decl_parms = orig_decl_parms; decl_parms;\n+\t   decl_parms = TREE_CHAIN (decl_parms),\n+\t     clone_parms = TREE_CHAIN (clone_parms))\n+\t{\n+\t  my_friendly_assert (same_type_p (TREE_TYPE (decl_parms),\n+\t\t\t\t\t   TREE_TYPE (clone_parms)), 20010424);\n+\t  \n+\t  if (TREE_PURPOSE (decl_parms) && !TREE_PURPOSE (clone_parms))\n+\t    {\n+\t      /* A default parameter has been added. Adjust the\n+\t\t clone's parameters. */\n+\t      tree exceptions = TYPE_RAISES_EXCEPTIONS (TREE_TYPE (clone));\n+\t      tree basetype = TYPE_METHOD_BASETYPE (TREE_TYPE (clone));\n+\t      tree type;\n+\n+\t      clone_parms = orig_decl_parms;\n+\n+\t      if (DECL_HAS_VTT_PARM_P (clone))\n+\t\t{\n+\t\t  clone_parms = tree_cons (TREE_PURPOSE (orig_clone_parms),\n+\t\t\t\t\t   TREE_VALUE (orig_clone_parms),\n+\t\t\t\t\t   clone_parms);\n+\t\t  TREE_TYPE (clone_parms) = TREE_TYPE (orig_clone_parms);\n+\t\t}\n+\t      type = build_cplus_method_type (basetype,\n+\t\t\t\t\t      TREE_TYPE (TREE_TYPE (clone)),\n+\t\t\t\t\t      clone_parms);\n+\t      if (exceptions)\n+\t\ttype = build_exception_variant (type, exceptions);\n+\t      TREE_TYPE (clone) = type;\n+\t      \n+\t      clone_parms = NULL_TREE;\n+\t      break;\n+\t    }\n+\t}\n+      my_friendly_assert (!clone_parms, 20010424);\n+    }\n+}\n+\n /* For each of the constructors and destructors in T, create an\n    in-charge and not-in-charge variant.  */\n "}, {"sha": "a8b22a4ea5a40e4e19dca20d2f8499f1ff870810", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f6eeeb3625bd5121465d8a50c89f47b25af0a69/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f6eeeb3625bd5121465d8a50c89f47b25af0a69/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=5f6eeeb3625bd5121465d8a50c89f47b25af0a69", "patch": "@@ -3759,6 +3759,7 @@ extern tree build_expr_type_conversion\t\tPARAMS ((int, tree, int));\n extern tree type_promotes_to\t\t\tPARAMS ((tree));\n extern tree perform_qualification_conversions   PARAMS ((tree, tree));\n extern void clone_function_decl                 PARAMS ((tree, int));\n+extern void adjust_clone_args\t\t\tPARAMS ((tree));\n \n /* decl.c */\n /* resume_binding_level */"}, {"sha": "246cbd7f4b3559268018d2098c5cd6a5a655d3c8", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f6eeeb3625bd5121465d8a50c89f47b25af0a69/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f6eeeb3625bd5121465d8a50c89f47b25af0a69/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=5f6eeeb3625bd5121465d8a50c89f47b25af0a69", "patch": "@@ -13345,6 +13345,12 @@ start_function (declspecs, declarator, attrs, flags)\n \t}\n     }\n \n+  if (DECL_MAYBE_IN_CHARGE_CONSTRUCTOR_P (decl1))\n+    /* This is a constructor, we must ensure that any default args\n+       introduced by this definition are propagated to the clones\n+       now. The clones are used directly in overload resolution.  */\n+    adjust_clone_args (decl1);\n+\n   /* Sometimes we don't notice that a function is a static member, and\n      build a METHOD_TYPE for it.  Fix that up now.  */\n   if (ctype != NULL_TREE && DECL_STATIC_FUNCTION_P (decl1)"}, {"sha": "1f7bb78b116ce474d0494a7198b99d1ac4621da7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f6eeeb3625bd5121465d8a50c89f47b25af0a69/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f6eeeb3625bd5121465d8a50c89f47b25af0a69/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5f6eeeb3625bd5121465d8a50c89f47b25af0a69", "patch": "@@ -1,3 +1,7 @@\n+2001-04-27  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* g++.old-deja/g++.other/defarg9.C: New test.\n+\n 2001-04-26  Toon Moene  <toon@moene.indiv.nluug.nl>\n \n \t* g77.f-torture/compile/20010426.f: New test."}, {"sha": "f3b0a48c361832a655f1c0ad01b324e85c503bfd", "filename": "gcc/testsuite/g++.old-deja/g++.other/defarg9.C", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f6eeeb3625bd5121465d8a50c89f47b25af0a69/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fdefarg9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f6eeeb3625bd5121465d8a50c89f47b25af0a69/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fdefarg9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fdefarg9.C?ref=5f6eeeb3625bd5121465d8a50c89f47b25af0a69", "patch": "@@ -0,0 +1,52 @@\n+// Build don't link:\n+// \n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 24 April 2001 <nathan@codesourcery.com>\n+\n+// Bug 2608. A default parameter introduced in the definition of a\n+// ctor never made it into the clones, leading to later overload\n+// resolution failures. This is related to bug 2356.\n+\n+struct A\n+{\n+  A (int, int);\n+};\n+\n+A::A (int d, int = 0)\n+{\n+  if (d)\n+    {\n+      A a (0);\n+    }\n+}\n+\n+void get_width ()\n+{\n+  A a (1);\n+}\n+\n+struct B : A\n+{\n+  B ();\n+};\n+B::B ()\n+  :A (1)\n+{\n+}\n+\n+struct C : virtual A\n+{\n+  C (int, int);\n+};\n+C::C (int, int = 0)\n+  :A (1)\n+{\n+}\n+struct D: C\n+{\n+  D ();\n+};\n+D::D ()\n+  :A (0), C (0)\n+{\n+}"}]}