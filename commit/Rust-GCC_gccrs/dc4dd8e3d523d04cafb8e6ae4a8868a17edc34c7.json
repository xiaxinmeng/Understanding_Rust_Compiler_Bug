{"sha": "dc4dd8e3d523d04cafb8e6ae4a8868a17edc34c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGM0ZGQ4ZTNkNTIzZDA0Y2FmYjhlNmFlNGE4ODY4YTE3ZWRjMzRjNw==", "commit": {"author": {"name": "Will Schmidt", "email": "will_schmidt@vnet.ibm.com", "date": "2018-06-12T16:04:52Z"}, "committer": {"name": "Will Schmidt", "email": "willschm@gcc.gnu.org", "date": "2018-06-12T16:04:52Z"}, "message": "fold-vec-store-vec_vsx_st-char.c: New.\n\n\n[testsuite]\n\n2018-05-31  Will Schmidt  <will_schmidt@vnet.ibm.com>\n\n\t* gcc.target/powerpc/fold-vec-store-vec_vsx_st-char.c: New.\n\t* gcc.target/powerpc/fold-vec-store-vec_vsx_st-double.c: New.\n\t* gcc.target/powerpc/fold-vec-store-vec_vsx_st-float.c: New.\n\t* gcc.target/powerpc/fold-vec-store-vec_vsx_st-int.c: New.\n\t* gcc.target/powerpc/fold-vec-store-vec_vsx_st-longlong.c: New.\n\t* gcc.target/powerpc/fold-vec-store-vec_vsx_st-short.c: New.\n\nFrom-SVN: r261508", "tree": {"sha": "8c504dcb080dea643c98a7cd1ac6a534ebfeca1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c504dcb080dea643c98a7cd1ac6a534ebfeca1c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc4dd8e3d523d04cafb8e6ae4a8868a17edc34c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc4dd8e3d523d04cafb8e6ae4a8868a17edc34c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc4dd8e3d523d04cafb8e6ae4a8868a17edc34c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc4dd8e3d523d04cafb8e6ae4a8868a17edc34c7/comments", "author": {"login": "willschm", "id": 44359, "node_id": "MDQ6VXNlcjQ0MzU5", "avatar_url": "https://avatars.githubusercontent.com/u/44359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willschm", "html_url": "https://github.com/willschm", "followers_url": "https://api.github.com/users/willschm/followers", "following_url": "https://api.github.com/users/willschm/following{/other_user}", "gists_url": "https://api.github.com/users/willschm/gists{/gist_id}", "starred_url": "https://api.github.com/users/willschm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willschm/subscriptions", "organizations_url": "https://api.github.com/users/willschm/orgs", "repos_url": "https://api.github.com/users/willschm/repos", "events_url": "https://api.github.com/users/willschm/events{/privacy}", "received_events_url": "https://api.github.com/users/willschm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0c382cfa8b103372b78f5a5533c2bd5c3f3fc318", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c382cfa8b103372b78f5a5533c2bd5c3f3fc318", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c382cfa8b103372b78f5a5533c2bd5c3f3fc318"}], "stats": {"total": 227, "additions": 227, "deletions": 0}, "files": [{"sha": "5b1fd2d8e5a70223878aa1fa24c8b6a4b1cff77e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc4dd8e3d523d04cafb8e6ae4a8868a17edc34c7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc4dd8e3d523d04cafb8e6ae4a8868a17edc34c7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=dc4dd8e3d523d04cafb8e6ae4a8868a17edc34c7", "patch": "@@ -1,3 +1,12 @@\n+2018-06-12  Will Schmidt  <will_schmidt@vnet.ibm.com>\n+\n+\t* gcc.target/powerpc/fold-vec-store-vec_vsx_st-char.c: New.\n+\t* gcc.target/powerpc/fold-vec-store-vec_vsx_st-double.c: New.\n+\t* gcc.target/powerpc/fold-vec-store-vec_vsx_st-float.c: New.\n+\t* gcc.target/powerpc/fold-vec-store-vec_vsx_st-int.c: New.\n+\t* gcc.target/powerpc/fold-vec-store-vec_vsx_st-longlong.c: New.\n+\t* gcc.target/powerpc/fold-vec-store-vec_vsx_st-short.c: New.\n+\n 2018-06-12  Will Schmidt  <will_schmidt@vnet.ibm.com>\n \n \t* gcc.target/powerpc/fold-vec-store-builtin_vec_xst-char.c: New."}, {"sha": "82bb891a9c90ede440dfe54145a4072010751f8a", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-store-vec_vsx_st-char.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc4dd8e3d523d04cafb8e6ae4a8868a17edc34c7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-store-vec_vsx_st-char.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc4dd8e3d523d04cafb8e6ae4a8868a17edc34c7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-store-vec_vsx_st-char.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-store-vec_vsx_st-char.c?ref=dc4dd8e3d523d04cafb8e6ae4a8868a17edc34c7", "patch": "@@ -0,0 +1,39 @@\n+/* Verify that overloaded built-ins for vec_vsx_st with char\n+   inputs produce the right code.  */\n+\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-mvsx -O2\" } */\n+\n+#include <altivec.h>\n+\n+#define BUILD_VAR_TEST(TESTNAME1, VALUE, VAR_OFFSET, SAVETO)\t\t\\\n+void\t\t\t\t\t\t\t\t\t\\\n+TESTNAME1 ## _var (VALUE value, VAR_OFFSET offset, SAVETO * saveto) \t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+\tvec_vsx_st (value, offset, saveto);\t\t\\\n+}\n+\n+#define BUILD_CST_TEST(TESTNAME1, VALUE, CST_OFFSET, SAVETO)\t\t\\\n+void\t\t\t\t\t\t\t\t\t\\\n+TESTNAME1 ## _cst (VALUE value, SAVETO * saveto) \t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+\tvec_vsx_st (value, CST_OFFSET, saveto);\t\t\\\n+}\n+\n+BUILD_VAR_TEST( test1,  vector signed char, signed long long, signed char );\n+BUILD_VAR_TEST( test2,  vector signed char, signed int, signed char );\n+BUILD_CST_TEST( test3,  vector signed char, 12, signed char );\n+\n+BUILD_VAR_TEST( test4,  vector unsigned char, signed long long, unsigned char );\n+BUILD_VAR_TEST( test5,  vector unsigned char, signed int, unsigned char );\n+BUILD_CST_TEST( test6,  vector unsigned char, 12, unsigned char );\n+\n+BUILD_VAR_TEST( test7,  vector signed char, signed long long, vector signed char );\n+BUILD_VAR_TEST( test8,  vector signed char, signed int, vector signed char );\n+BUILD_CST_TEST( test9,  vector signed char, 12, vector signed char );\n+\n+BUILD_VAR_TEST( test10, vector unsigned char, signed long long, vector unsigned char );\n+BUILD_VAR_TEST( test11, vector unsigned char, signed int, vector unsigned char );\n+BUILD_CST_TEST( test12, vector unsigned char, 12, vector unsigned char );\n+\n+/* { dg-final { scan-assembler-times {\\mstxvw4x\\M|\\mstxvd2x\\M|\\mstxvx\\M|\\mstvx\\M} 12 } } */"}, {"sha": "34772cfe135fa9f2c4154b44b59d74b6dc2045cb", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-store-vec_vsx_st-double.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc4dd8e3d523d04cafb8e6ae4a8868a17edc34c7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-store-vec_vsx_st-double.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc4dd8e3d523d04cafb8e6ae4a8868a17edc34c7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-store-vec_vsx_st-double.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-store-vec_vsx_st-double.c?ref=dc4dd8e3d523d04cafb8e6ae4a8868a17edc34c7", "patch": "@@ -0,0 +1,31 @@\n+/* Verify that overloaded built-ins for vec_vsx_st with double\n+   inputs produce the right code.  */\n+\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-mvsx -O2\" } */\n+\n+#include <altivec.h>\n+\n+#define BUILD_VAR_TEST(TESTNAME1, VALUE, VAR_OFFSET, SAVETO)\t\t\\\n+void\t\t\t\t\t\t\t\t\t\\\n+TESTNAME1 ## _var (VALUE value, VAR_OFFSET offset, SAVETO * saveto) \t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+\tvec_vsx_st (value, offset, saveto);\t\t\\\n+}\n+\n+#define BUILD_CST_TEST(TESTNAME1, VALUE, CST_OFFSET, SAVETO)\t\t\\\n+void\t\t\t\t\t\t\t\t\t\\\n+TESTNAME1 ## _cst (VALUE value, SAVETO * saveto) \t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+\tvec_vsx_st (value, CST_OFFSET, saveto);\t\t\\\n+}\n+\n+BUILD_VAR_TEST( test1,  vector double, signed long long, double );\n+BUILD_VAR_TEST( test2,  vector double, signed int, double );\n+BUILD_CST_TEST( test3,  vector double, 12, double );\n+\n+BUILD_VAR_TEST( test7,  vector double, signed long long, vector double );\n+BUILD_VAR_TEST( test8,  vector double, signed int, vector double );\n+BUILD_CST_TEST( test9,  vector double, 12, vector double );\n+\n+/* { dg-final { scan-assembler-times {\\mstxvd2x\\M|\\mstxvx\\M|\\mstvx\\M} 6 } } */"}, {"sha": "cf13f2a7ec123d14afca19096b0abd085a6b0521", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-store-vec_vsx_st-float.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc4dd8e3d523d04cafb8e6ae4a8868a17edc34c7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-store-vec_vsx_st-float.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc4dd8e3d523d04cafb8e6ae4a8868a17edc34c7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-store-vec_vsx_st-float.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-store-vec_vsx_st-float.c?ref=dc4dd8e3d523d04cafb8e6ae4a8868a17edc34c7", "patch": "@@ -0,0 +1,31 @@\n+/* Verify that overloaded built-ins for vec_vsx_st with float\n+   inputs produce the right code.  */\n+\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-mvsx -O2\" } */\n+\n+#include <altivec.h>\n+\n+#define BUILD_VAR_TEST(TESTNAME1, VALUE, VAR_OFFSET, SAVETO)\t\t\\\n+void\t\t\t\t\t\t\t\t\t\\\n+TESTNAME1 ## _var (VALUE value, VAR_OFFSET offset, SAVETO * saveto) \t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+\tvec_vsx_st (value, offset, saveto);\t\t\\\n+}\n+\n+#define BUILD_CST_TEST(TESTNAME1, VALUE, CST_OFFSET, SAVETO)\t\t\\\n+void\t\t\t\t\t\t\t\t\t\\\n+TESTNAME1 ## _cst (VALUE value, SAVETO * saveto) \t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+\tvec_vsx_st (value, CST_OFFSET, saveto);\t\t\\\n+}\n+\n+BUILD_VAR_TEST( test1,  vector float, signed long long, float );\n+BUILD_VAR_TEST( test2,  vector float, signed int, float );\n+BUILD_CST_TEST( test3,  vector float, 12, float );\n+\n+BUILD_VAR_TEST( test7,  vector float, signed long long, vector float );\n+BUILD_VAR_TEST( test8,  vector float, signed int, vector float );\n+BUILD_CST_TEST( test9,  vector float, 12, vector float );\n+\n+/* { dg-final { scan-assembler-times {\\mstxvd2x\\M|\\mstxvx\\M|\\mstvx\\M} 6 } } */"}, {"sha": "a9e189ddaddda25284c0e970549dfcf8226e1944", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-store-vec_vsx_st-int.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc4dd8e3d523d04cafb8e6ae4a8868a17edc34c7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-store-vec_vsx_st-int.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc4dd8e3d523d04cafb8e6ae4a8868a17edc34c7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-store-vec_vsx_st-int.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-store-vec_vsx_st-int.c?ref=dc4dd8e3d523d04cafb8e6ae4a8868a17edc34c7", "patch": "@@ -0,0 +1,39 @@\n+/* Verify that overloaded built-ins for vec_vsx_st with int\n+   inputs produce the right code.  */\n+\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-mvsx -O2\" } */\n+\n+#include <altivec.h>\n+\n+#define BUILD_VAR_TEST(TESTNAME1, VALUE, VAR_OFFSET, SAVETO)\t\t\\\n+void\t\t\t\t\t\t\t\t\t\\\n+TESTNAME1 ## _var (VALUE value, VAR_OFFSET offset, SAVETO * saveto) \t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+\tvec_vsx_st (value, offset, saveto);\t\t\\\n+}\n+\n+#define BUILD_CST_TEST(TESTNAME1, VALUE, CST_OFFSET, SAVETO)\t\t\\\n+void\t\t\t\t\t\t\t\t\t\\\n+TESTNAME1 ## _cst (VALUE value, SAVETO * saveto) \t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+\tvec_vsx_st (value, CST_OFFSET, saveto);\t\t\\\n+}\n+\n+BUILD_VAR_TEST( test1,  vector signed int, signed long long, signed int );\n+BUILD_VAR_TEST( test2,  vector signed int, signed int, signed int );\n+BUILD_CST_TEST( test3,  vector signed int, 12, signed int );\n+\n+BUILD_VAR_TEST( test4,  vector unsigned int, signed long long, unsigned int );\n+BUILD_VAR_TEST( test5,  vector unsigned int, signed int, unsigned int );\n+BUILD_CST_TEST( test6,  vector unsigned int, 12, unsigned int );\n+\n+BUILD_VAR_TEST( test7,  vector signed int, signed long long, vector signed int );\n+BUILD_VAR_TEST( test8,  vector signed int, signed int, vector signed int );\n+BUILD_CST_TEST( test9,  vector signed int, 12, vector signed int );\n+\n+BUILD_VAR_TEST( test10, vector unsigned int, signed long long, vector unsigned int );\n+BUILD_VAR_TEST( test11, vector unsigned int, signed int, vector unsigned int );\n+BUILD_CST_TEST( test12, vector unsigned int, 12, vector unsigned int );\n+\n+/* { dg-final { scan-assembler-times {\\mstxvw4x\\M|\\mstxvd2x\\M|\\mstxvx\\M|\\mstvx\\M} 12 } } */"}, {"sha": "f50e2b93da198adf36f87e6a82833f4618e52228", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-store-vec_vsx_st-longlong.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc4dd8e3d523d04cafb8e6ae4a8868a17edc34c7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-store-vec_vsx_st-longlong.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc4dd8e3d523d04cafb8e6ae4a8868a17edc34c7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-store-vec_vsx_st-longlong.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-store-vec_vsx_st-longlong.c?ref=dc4dd8e3d523d04cafb8e6ae4a8868a17edc34c7", "patch": "@@ -0,0 +1,39 @@\n+/* Verify that overloaded built-ins for vec_vsx_st with long long\n+   inputs produce the right code.  */\n+\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-mvsx -O2\" } */\n+\n+#include <altivec.h>\n+\n+#define BUILD_VAR_TEST(TESTNAME1, VALUE, VAR_OFFSET, SAVETO)\t\t\\\n+void\t\t\t\t\t\t\t\t\t\\\n+TESTNAME1 ## _var (VALUE value, VAR_OFFSET offset, SAVETO * saveto) \t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+\tvec_vsx_st (value, offset, saveto);\t\t\\\n+}\n+\n+#define BUILD_CST_TEST(TESTNAME1, VALUE, CST_OFFSET, SAVETO)\t\t\\\n+void\t\t\t\t\t\t\t\t\t\\\n+TESTNAME1 ## _cst (VALUE value, SAVETO * saveto) \t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+\tvec_vsx_st (value, CST_OFFSET, saveto);\t\t\\\n+}\n+\n+BUILD_VAR_TEST( test1,  vector signed long long, signed long long, signed long long );\n+BUILD_VAR_TEST( test2,  vector signed long long, signed int, signed long long );\n+BUILD_CST_TEST( test3,  vector signed long long, 12, signed long long );\n+\n+BUILD_VAR_TEST( test4,  vector unsigned long long, signed long long, unsigned long long );\n+BUILD_VAR_TEST( test5,  vector unsigned long long, signed int, unsigned long long );\n+BUILD_CST_TEST( test6,  vector unsigned long long, 12, unsigned long long );\n+\n+BUILD_VAR_TEST( test7,  vector signed long long, signed long long, vector signed long long );\n+BUILD_VAR_TEST( test8,  vector signed long long, signed int, vector signed long long );\n+BUILD_CST_TEST( test9,  vector signed long long, 12, vector signed long long );\n+\n+BUILD_VAR_TEST( test10, vector unsigned long long, signed long long, vector unsigned long long );\n+BUILD_VAR_TEST( test11, vector unsigned long long, signed int, vector unsigned long long );\n+BUILD_CST_TEST( test12, vector unsigned long long, 12, vector unsigned long long );\n+\n+/* { dg-final { scan-assembler-times {\\mstxvd2x\\M|\\mstxvx\\M|\\mstvx\\M} 12 } } */"}, {"sha": "0f8a93ad371e92a010c1f4666d95d4f2069ea7d4", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-store-vec_vsx_st-short.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc4dd8e3d523d04cafb8e6ae4a8868a17edc34c7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-store-vec_vsx_st-short.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc4dd8e3d523d04cafb8e6ae4a8868a17edc34c7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-store-vec_vsx_st-short.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-store-vec_vsx_st-short.c?ref=dc4dd8e3d523d04cafb8e6ae4a8868a17edc34c7", "patch": "@@ -0,0 +1,39 @@\n+/* Verify that overloaded built-ins for vec_vsx_st with short\n+   inputs produce the right code.  */\n+\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-mvsx -O2\" } */\n+\n+#include <altivec.h>\n+\n+#define BUILD_VAR_TEST(TESTNAME1, VALUE, VAR_OFFSET, SAVETO)\t\t\\\n+void\t\t\t\t\t\t\t\t\t\\\n+TESTNAME1 ## _var (VALUE value, VAR_OFFSET offset, SAVETO * saveto) \t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+\tvec_vsx_st (value, offset, saveto);\t\t\\\n+}\n+\n+#define BUILD_CST_TEST(TESTNAME1, VALUE, CST_OFFSET, SAVETO)\t\t\\\n+void\t\t\t\t\t\t\t\t\t\\\n+TESTNAME1 ## _cst (VALUE value, SAVETO * saveto) \t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+\tvec_vsx_st (value, CST_OFFSET, saveto);\t\t\\\n+}\n+\n+BUILD_VAR_TEST( test1,  vector signed short, signed long long, signed short );\n+BUILD_VAR_TEST( test2,  vector signed short, signed int, signed short );\n+BUILD_CST_TEST( test3,  vector signed short, 12, signed short );\n+\n+BUILD_VAR_TEST( test4,  vector unsigned short, signed long long, unsigned short );\n+BUILD_VAR_TEST( test5,  vector unsigned short, signed int, unsigned short );\n+BUILD_CST_TEST( test6,  vector unsigned short, 12, unsigned short );\n+\n+BUILD_VAR_TEST( test7,  vector signed short, signed long long, vector signed short );\n+BUILD_VAR_TEST( test8,  vector signed short, signed int, vector signed short );\n+BUILD_CST_TEST( test9,  vector signed short, 12, vector signed short );\n+\n+BUILD_VAR_TEST( test10, vector unsigned short, signed long long, vector unsigned short );\n+BUILD_VAR_TEST( test11, vector unsigned short, signed int, vector unsigned short );\n+BUILD_CST_TEST( test12, vector unsigned short, 12, vector unsigned short );\n+\n+/* { dg-final { scan-assembler-times {\\mstxvw4x\\M|\\mstxvd2x\\M|\\mstxvx\\M|\\mstvx\\M} 12 } } */"}]}