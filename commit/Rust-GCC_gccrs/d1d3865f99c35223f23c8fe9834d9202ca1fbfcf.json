{"sha": "d1d3865f99c35223f23c8fe9834d9202ca1fbfcf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDFkMzg2NWY5OWMzNTIyM2YyM2M4ZmU5ODM0ZDkyMDJjYTFmYmZjZg==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2003-10-20T18:28:27Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2003-10-20T18:28:27Z"}, "message": "c-common.c (registered_builtin_types): New static.\n\n\t* c-common.c (registered_builtin_types): New static.\n\t(c_common_type_for_mode): Consult registered_builtin_types.\n\t(c_register_builtin_type): Add type to registered_builtin_types.\n\t* optabs.c (init_floating_libfuncs): Initialize libfuncs for\n\tall MODE_FLOAT modes, not just the ones corresponding to\n\tfloat_type_node, double_type_node, and long_double_type_node.\n\nFrom-SVN: r72711", "tree": {"sha": "93e6e2df27043a189891932a5e31bb953211185f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/93e6e2df27043a189891932a5e31bb953211185f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d1d3865f99c35223f23c8fe9834d9202ca1fbfcf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1d3865f99c35223f23c8fe9834d9202ca1fbfcf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1d3865f99c35223f23c8fe9834d9202ca1fbfcf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1d3865f99c35223f23c8fe9834d9202ca1fbfcf/comments", "author": null, "committer": null, "parents": [{"sha": "65fc9769d5aae02bd4a32c1756cea36b2be51f82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65fc9769d5aae02bd4a32c1756cea36b2be51f82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65fc9769d5aae02bd4a32c1756cea36b2be51f82"}], "stats": {"total": 68, "additions": 39, "deletions": 29}, "files": [{"sha": "ab034ae1195a72627167896890d4e6a96f3b96f8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 17, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1d3865f99c35223f23c8fe9834d9202ca1fbfcf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1d3865f99c35223f23c8fe9834d9202ca1fbfcf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d1d3865f99c35223f23c8fe9834d9202ca1fbfcf", "patch": "@@ -1,19 +1,28 @@\n+2003-10-20  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* c-common.c (registered_builtin_types): New static.\n+\t(c_common_type_for_mode): Consult registered_builtin_types.\n+\t(c_register_builtin_type): Add type to registered_builtin_types.\n+\t* optabs.c (init_floating_libfuncs): Initialize libfuncs for\n+\tall MODE_FLOAT modes, not just the ones corresponding to\n+\tfloat_type_node, double_type_node, and long_double_type_node.\n+\n 2003-10-20  Richard Henderson  <rth@redhat.com>\n \n \t* config/alpha/alpha.h (PREDICATE_CODES): Add normal_memory_operand.\n \t* config/alpha/alpha-protos.h: Remove PREDICATE_CODES prototypes.\n \n 2003-10-20  Dorit Naishlos  <dorit@il.ibm.com>\n \n-\t* config/rs6000/rs6000.h: (rs6000_sched_insert_nops): \t\n+\t* config/rs6000/rs6000.h: (rs6000_sched_insert_nops):\n \tsupport new flag -minsert-sched-nops.\n \t(DEFAULT_SCHED_FINISH_NOP_INSERTION_SCHEME): Define.\n-\t* config/rs6000/rs6000.c: (rs6000_sched_insert_nops): \t\n-\tsupport new flag -minsert-sched-nops.\t\n+\t* config/rs6000/rs6000.c: (rs6000_sched_insert_nops):\n+\tsupport new flag -minsert-sched-nops.\n \t(is_cracked_insn, is_microcoded_insn): New functions.\n \t(rs6000_sched_finish): New function.\n \t(rs6000_issue_rate): Return 5 for power4.\n-\t(get_next_active_insn, insn_terminates_group_p): New \t\n+\t(get_next_active_insn, insn_terminates_group_p): New\n \tfunctions.\n \t(is_costly_group, force_new_group): New functions.\n \t(redefine_groups, pad_groups): New functions.\n@@ -53,7 +62,7 @@\n \t(TARGET_CPU_arm1136jf_s): Likewise.\n \t* doc/invoke.texi: Document new ARM cores and architecture\n \tvariants.\n-\t\n+\n 2003-10-19  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>\n \n \t* Makefile.in (toplev.o): Add value-prof.h dependency.\n@@ -97,7 +106,7 @@\n \tconventions when profiling.\n \n 2003-10-19  Eric Botcazou  <ebotcazou@libertysurf.fr>\n-            Richard Henderson  <rth@redhat.com>\n+\t    Richard Henderson  <rth@redhat.com>\n \n \tPR optimization/8178\n \t* config/i386/i386.md (*movsi_zero): Delete.\n@@ -145,12 +154,12 @@\n \t(print_operand): Use it to implement '%Y'.\n \t* config/s390/s390.h (EXTRA_ADDRESS_CONSTRAINT): Add 'Y' constraint.\n \t(PREDICATE_CODES): Add shift_count_operand.\n-\t* config/s390/s390.md (\"rotldi3\"): Merge alternatives, \n+\t* config/s390/s390.md (\"rotldi3\"): Merge alternatives,\n \tusing \"shift_count_operand\" predicate and \"Y\" constraint,\n \tand \"%Y\" to output the combined shift count.\n \t(\"rotlsi3\"): Likewise.\n \t(\"ashldi3\", \"*ashldi3_31\", \"*ashldi3_64\"): Likewise.\n-\t(\"ashrdi3\", \"*ashrdi3_31\", \"*ashrdi3_64\", \"*ashrdi3_cc_31\", \n+\t(\"ashrdi3\", \"*ashrdi3_31\", \"*ashrdi3_64\", \"*ashrdi3_cc_31\",\n \t\"*ashrdi3_cc_64\", \"*ashrdi3_cconly_31\", \"*ashrdi3_cconly_64\"): Likewise.\n \t(\"ashlsi3\", \"ashrsi3\", \"*ashrsi3_cc\", \"*ashrsi3_cconly\"): Likewise.\n \t(\"lshrdi3\", \"*lshrdi3_31\", \"*lshrdi3_64\"): Likewise.\n@@ -163,9 +172,9 @@\n \n 2003-10-18  Fariborz Jahanian  <fjahanian@apple.com>\n \n-        * rs6000.md: Separate TARGET_POWERPC64 patterns for TARGET_64BIT or TARGET_32BIT.\n-        (ashrdisi3_noppc64) Generate more efficient code for 32-bit right-shift of\n-        a \"long long\" argument.\n+\t* rs6000.md: Separate TARGET_POWERPC64 patterns for TARGET_64BIT or TARGET_32BIT.\n+\t(ashrdisi3_noppc64) Generate more efficient code for 32-bit right-shift of\n+\ta \"long long\" argument.\n \n 2003-10-18  Alexandre Oliva  <aoliva@redhat.com>\n \n@@ -262,7 +271,7 @@\n \tzsh not working.  Change gcc to GCC.\n \n \tPR bootstrap/12546\n-\t* doc/install.texi: Document that zsh does not work when \n+\t* doc/install.texi: Document that zsh does not work when\n \tconfiguring gcc.\n \n 2003-10-17  Nathanael Nerode  <neroden@gcc.gnu.org>\n@@ -373,7 +382,7 @@\n \tDefine as 0.\n \n \t* config/mips/iris6.h (FUNCTION_NAME_ALREADY_DECLARED): Define\n-\tdepending on mips_abi. \n+\tdepending on mips_abi.\n \t* config/mips/linux.h (FUNCTION_NAME_ALREADY_DECLARED): Define as 1.\n \t* config/mips/mips.c (mips_output_function_prologue): Test\n \tFUNCTION_NAME_ALREADY_DECLARED at runtime.\n@@ -382,7 +391,7 @@\n \t(build_mips16_call_stub): Likewise.\n \t* config/mips/mips.h (FUNCTION_NAME_ALREADY_DECLARED): Provide\n \tdefault.\n-\t\n+\n \t* config/mips/iris6.h (DWARF2_UNWIND_INFO): Don't define for native\n \tIRIX 6 O32 assembler.\n \t(SUBTARGET_CC1_SPEC): Enforce mips2 ISA with O32 ABI.\n@@ -405,7 +414,7 @@\n \t(MUST_USE_SJLJ_EXCEPTIONS): Define.\n \t[_MIPS_SIM == _ABIO32 && !GAS] (CTORS_SECTION_ASM_OP,\n \tDTORS_SECTION_ASM_OP): Dummy definitions.\n-\t(TARGET_ASM_NAMED_SECTION): Undef statically. \n+\t(TARGET_ASM_NAMED_SECTION): Undef statically.\n \t(EH_FRAME_SECTION_NAME): Likewise.\n \t(ASM_OUTPUT_FILENAME): Integrate mips.h version.\n \t(LINK_SPEC): Only use default options -call_shared -no_unresolved\n@@ -468,7 +477,7 @@\n \t* arm-modes.def (CC_Nmode): New condition code mode.\n \t* arm.c (thumb_condition_code): Delete.\n \t(arm_select_cc_mode): Handle single-bit test for Thumb.\n-\t(arm_print_operand, cases 'd' and 'D'): Don't special case the \n+\t(arm_print_operand, cases 'd' and 'D'): Don't special case the\n \tcondition code logic for Thumb.\n \t(get_arm_condition_code): Handle CC_Nmode.\n \t(thumb_cbrch_target_operand): New function.\n@@ -482,7 +491,7 @@\n \t(subsi3_cbranch, subsi3_cbranch_scratch): New Thumb patterns.\n \t(cbranchne_decr1): Re-work to use CC_Nmode.\n \n-\t* arm.c (thumb_expand_epilogue): Add clobbers of registers restored \n+\t* arm.c (thumb_expand_epilogue): Add clobbers of registers restored\n \tby the return instruction.  Add a use of the link register if it\n \twasn't stored.\n "}, {"sha": "96186d8e86b07c544904034c07f754ea145985e9", "filename": "gcc/c-common.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1d3865f99c35223f23c8fe9834d9202ca1fbfcf/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1d3865f99c35223f23c8fe9834d9202ca1fbfcf/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=d1d3865f99c35223f23c8fe9834d9202ca1fbfcf", "patch": "@@ -1828,13 +1828,19 @@ c_common_type_for_size (unsigned int bits, int unsignedp)\n   return 0;\n }\n \n+/* Used for communication between c_common_type_for_mode and\n+   c_register_builtin_type.  */\n+static GTY(()) tree registered_builtin_types;\n+\n /* Return a data type that has machine mode MODE.\n    If the mode is an integer,\n    then UNSIGNEDP selects between signed and unsigned types.  */\n \n tree\n c_common_type_for_mode (enum machine_mode mode, int unsignedp)\n {\n+  tree t;\n+\n   if (mode == TYPE_MODE (integer_type_node))\n     return unsignedp ? unsigned_type_node : integer_type_node;\n \n@@ -1923,6 +1929,10 @@ c_common_type_for_mode (enum machine_mode mode, int unsignedp)\n       break;\n     }\n \n+  for (t = registered_builtin_types; t; t = TREE_CHAIN (t))\n+    if (TYPE_MODE (TREE_VALUE (t)) == mode)\n+      return TREE_VALUE (t);\n+\n   return 0;\n }\n \n@@ -2051,6 +2061,8 @@ c_register_builtin_type (tree type, const char* name)\n   if (!TYPE_NAME (type))\n     TYPE_NAME (type) = decl;\n   pushdecl (decl);\n+\n+  registered_builtin_types = tree_cons (0, type, registered_builtin_types);\n }\n \n \f"}, {"sha": "a56c89fc516bb8196937c8b903980ab56b8ca3ad", "filename": "gcc/optabs.c", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1d3865f99c35223f23c8fe9834d9202ca1fbfcf/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1d3865f99c35223f23c8fe9834d9202ca1fbfcf/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=d1d3865f99c35223f23c8fe9834d9202ca1fbfcf", "patch": "@@ -5019,18 +5019,7 @@ init_integral_libfuncs (optab optable, const char *opname, int suffix)\n static void\n init_floating_libfuncs (optab optable, const char *opname, int suffix)\n {\n-  enum machine_mode fmode, dmode, lmode;\n-\n-  fmode = float_type_node ? TYPE_MODE (float_type_node) : VOIDmode;\n-  dmode = double_type_node ? TYPE_MODE (double_type_node) : VOIDmode;\n-  lmode = long_double_type_node ? TYPE_MODE (long_double_type_node) : VOIDmode;\n-\n-  if (fmode != VOIDmode)\n-    init_libfuncs (optable, fmode, fmode, opname, suffix);\n-  if (dmode != fmode && dmode != VOIDmode)\n-    init_libfuncs (optable, dmode, dmode, opname, suffix);\n-  if (lmode != dmode && lmode != VOIDmode)\n-    init_libfuncs (optable, lmode, lmode, opname, suffix);\n+  init_libfuncs (optable, MIN_MODE_FLOAT, MAX_MODE_FLOAT, opname, suffix);\n }\n \n /* Initialize the libfunc fields of an entire group of entries of an"}]}