{"sha": "b43836914bdc2a37563cf31359b2c4803bfe4374", "node_id": "C_kwDOANBUbNoAKGI0MzgzNjkxNGJkYzJhMzc1NjNjZjMxMzU5YjJjNDgwM2JmZTQzNzQ", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-05-24T07:12:44Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-05-24T07:12:44Z"}, "message": "openmp: Add taskwait nowait depend support [PR105378]\n\nThis patch adds support for (so far C/C++)\n  #pragma omp taskwait nowait depend(...)\ndirective, which is like\n  #pragma omp task depend(...)\n  ;\nbut slightly optimized on the library side, so that it creates\nthe task only for the purpose of dependency tracking and doesn't actually\nschedule it and wait for it when the dependencies are satisfied, instead\nmakes its dependencies satisfied right away.\n\n2022-05-24  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c/105378\ngcc/\n\t* omp-builtins.def (BUILT_IN_GOMP_TASKWAIT_DEPEND_NOWAIT): New\n\tbuiltin.\n\t* gimplify.cc (gimplify_omp_task): Diagnose taskwait with nowait\n\tclause but no depend clauses.\n\t* omp-expand.cc (expand_taskwait_call): Use\n\tBUILT_IN_GOMP_TASKWAIT_DEPEND_NOWAIT rather than\n\tBUILT_IN_GOMP_TASKWAIT_DEPEND if nowait clause is present.\ngcc/c/\n\t* c-parser.cc (OMP_TASKWAIT_CLAUSE_MASK): Add nowait clause.\ngcc/cp/\n\t* parser.cc (OMP_TASKWAIT_CLAUSE_MASK): Add nowait clause.\ngcc/testsuite/\n\t* c-c++-common/gomp/taskwait-depend-nowait-1.c: New test.\nlibgomp/\n\t* libgomp_g.h (GOMP_taskwait_depend_nowait): Declare.\n\t* libgomp.map (GOMP_taskwait_depend_nowait): Export at GOMP_5.1.1.\n\t* task.c (empty_task): New function.\n\t(gomp_task_run_post_handle_depend_hash): Declare earlier.\n\t(gomp_task_run_post_handle_depend): Declare.\n\t(GOMP_task): Optimize fn == empty_task if there is nothing to wait\n\tfor.\n\t(gomp_task_run_post_handle_dependers): Optimize task->fn == empty_task.\n\t(GOMP_taskwait_depend_nowait): New function.\n\t* testsuite/libgomp.c-c++-common/taskwait-depend-nowait-1.c: New test.", "tree": {"sha": "b46c9fd3a7988e119e9dc60919b0866efdd6c52e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b46c9fd3a7988e119e9dc60919b0866efdd6c52e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b43836914bdc2a37563cf31359b2c4803bfe4374", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b43836914bdc2a37563cf31359b2c4803bfe4374", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b43836914bdc2a37563cf31359b2c4803bfe4374", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b43836914bdc2a37563cf31359b2c4803bfe4374/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1adf11822bd48f4d65156b7642514630c08c4d00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1adf11822bd48f4d65156b7642514630c08c4d00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1adf11822bd48f4d65156b7642514630c08c4d00"}], "stats": {"total": 157, "additions": 143, "deletions": 14}, "files": [{"sha": "492d995a281a358d0a6d1a1d73487e2dbd385a97", "filename": "gcc/c/c-parser.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b43836914bdc2a37563cf31359b2c4803bfe4374/gcc%2Fc%2Fc-parser.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b43836914bdc2a37563cf31359b2c4803bfe4374/gcc%2Fc%2Fc-parser.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.cc?ref=b43836914bdc2a37563cf31359b2c4803bfe4374", "patch": "@@ -20453,7 +20453,8 @@ c_parser_omp_task (location_t loc, c_parser *parser, bool *if_p)\n */\n \n #define OMP_TASKWAIT_CLAUSE_MASK\t\t\t\t\t\\\n-\t(OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_DEPEND)\n+\t( (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_DEPEND)\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_NOWAIT))\n \n static void\n c_parser_omp_taskwait (c_parser *parser)"}, {"sha": "868b8610d6031aa567eae01b0aef7fff4a2aadc0", "filename": "gcc/cp/parser.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b43836914bdc2a37563cf31359b2c4803bfe4374/gcc%2Fcp%2Fparser.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b43836914bdc2a37563cf31359b2c4803bfe4374/gcc%2Fcp%2Fparser.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.cc?ref=b43836914bdc2a37563cf31359b2c4803bfe4374", "patch": "@@ -43793,7 +43793,8 @@ cp_parser_omp_task (cp_parser *parser, cp_token *pragma_tok, bool *if_p)\n    # pragma omp taskwait taskwait-clause[opt] new-line  */\n \n #define OMP_TASKWAIT_CLAUSE_MASK\t\t\t\t\\\n-\t(OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_DEPEND)\n+\t( (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_DEPEND)\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_NOWAIT))\n \n static void\n cp_parser_omp_taskwait (cp_parser *parser, cp_token *pragma_tok)"}, {"sha": "cd1796643d71a62b0344bb1bcb78c98e4a6eb60a", "filename": "gcc/gimplify.cc", "status": "modified", "additions": 24, "deletions": 7, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b43836914bdc2a37563cf31359b2c4803bfe4374/gcc%2Fgimplify.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b43836914bdc2a37563cf31359b2c4803bfe4374/gcc%2Fgimplify.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.cc?ref=b43836914bdc2a37563cf31359b2c4803bfe4374", "patch": "@@ -12319,17 +12319,34 @@ gimplify_omp_task (tree *expr_p, gimple_seq *pre_p)\n   tree expr = *expr_p;\n   gimple *g;\n   gimple_seq body = NULL;\n+  bool nowait = false;\n+  bool has_depend = false;\n \n   if (OMP_TASK_BODY (expr) == NULL_TREE)\n-    for (tree c = OMP_TASK_CLAUSES (expr); c; c = OMP_CLAUSE_CHAIN (c))\n-      if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_DEPEND\n-\t  && OMP_CLAUSE_DEPEND_KIND (c) == OMP_CLAUSE_DEPEND_MUTEXINOUTSET)\n+    {\n+      for (tree c = OMP_TASK_CLAUSES (expr); c; c = OMP_CLAUSE_CHAIN (c))\n+\tif (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_DEPEND)\n+\t  {\n+\t    has_depend = true;\n+\t    if (OMP_CLAUSE_DEPEND_KIND (c) == OMP_CLAUSE_DEPEND_MUTEXINOUTSET)\n+\t      {\n+\t\terror_at (OMP_CLAUSE_LOCATION (c),\n+\t\t\t  \"%<mutexinoutset%> kind in %<depend%> clause on a \"\n+\t\t\t  \"%<taskwait%> construct\");\n+\t\tbreak;\n+\t      }\n+\t  }\n+\telse if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_NOWAIT)\n+\t  nowait = true;\n+      if (nowait && !has_depend)\n \t{\n-\t  error_at (OMP_CLAUSE_LOCATION (c),\n-\t\t    \"%<mutexinoutset%> kind in %<depend%> clause on a \"\n-\t\t    \"%<taskwait%> construct\");\n-\t  break;\n+\t  error_at (EXPR_LOCATION (expr),\n+\t\t    \"%<taskwait%> construct with %<nowait%> clause but no \"\n+\t\t    \"%<depend%> clauses\");\n+\t  *expr_p = NULL_TREE;\n+\t  return;\n \t}\n+    }\n \n   gimplify_scan_omp_clauses (&OMP_TASK_CLAUSES (expr), pre_p,\n \t\t\t     omp_find_clause (OMP_TASK_CLAUSES (expr),"}, {"sha": "ee5213eedcf78001261f92476e63320abd737ef5", "filename": "gcc/omp-builtins.def", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b43836914bdc2a37563cf31359b2c4803bfe4374/gcc%2Fomp-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b43836914bdc2a37563cf31359b2c4803bfe4374/gcc%2Fomp-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-builtins.def?ref=b43836914bdc2a37563cf31359b2c4803bfe4374", "patch": "@@ -89,6 +89,9 @@ DEF_GOMP_BUILTIN (BUILT_IN_GOMP_TASKWAIT, \"GOMP_taskwait\",\n \t\t  BT_FN_VOID, ATTR_NOTHROW_LEAF_LIST)\n DEF_GOMP_BUILTIN (BUILT_IN_GOMP_TASKWAIT_DEPEND, \"GOMP_taskwait_depend\",\n \t\t  BT_FN_VOID_PTR, ATTR_NOTHROW_LEAF_LIST)\n+DEF_GOMP_BUILTIN (BUILT_IN_GOMP_TASKWAIT_DEPEND_NOWAIT,\n+\t\t  \"GOMP_taskwait_depend_nowait\",\n+\t\t  BT_FN_VOID_PTR, ATTR_NOTHROW_LEAF_LIST)\n DEF_GOMP_BUILTIN (BUILT_IN_GOMP_TASKYIELD, \"GOMP_taskyield\",\n \t\t  BT_FN_VOID, ATTR_NOTHROW_LEAF_LIST)\n DEF_GOMP_BUILTIN (BUILT_IN_GOMP_TASKGROUP_START, \"GOMP_taskgroup_start\","}, {"sha": "0821b8d06882b5ad3750046833b90b54d5091e27", "filename": "gcc/omp-expand.cc", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b43836914bdc2a37563cf31359b2c4803bfe4374/gcc%2Fomp-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b43836914bdc2a37563cf31359b2c4803bfe4374/gcc%2Fomp-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-expand.cc?ref=b43836914bdc2a37563cf31359b2c4803bfe4374", "patch": "@@ -916,10 +916,12 @@ expand_taskwait_call (basic_block bb, gomp_task *entry_stmt)\n \n   depend = OMP_CLAUSE_DECL (depend);\n \n+  bool nowait = omp_find_clause (clauses, OMP_CLAUSE_NOWAIT) != NULL_TREE;\n   gimple_stmt_iterator gsi = gsi_last_nondebug_bb (bb);\n-  tree t\n-    = build_call_expr (builtin_decl_explicit (BUILT_IN_GOMP_TASKWAIT_DEPEND),\n-\t\t       1, depend);\n+  enum built_in_function f = (nowait\n+\t\t\t      ? BUILT_IN_GOMP_TASKWAIT_DEPEND_NOWAIT\n+\t\t\t      : BUILT_IN_GOMP_TASKWAIT_DEPEND);\n+  tree t = build_call_expr (builtin_decl_explicit (f), 1, depend);\n \n   force_gimple_operand_gsi (&gsi, t, true, NULL_TREE,\n \t\t\t    false, GSI_CONTINUE_LINKING);"}, {"sha": "54df0235bdeb2101315a1104c54b81e83e1154c0", "filename": "gcc/testsuite/c-c++-common/gomp/taskwait-depend-nowait-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b43836914bdc2a37563cf31359b2c4803bfe4374/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Ftaskwait-depend-nowait-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b43836914bdc2a37563cf31359b2c4803bfe4374/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Ftaskwait-depend-nowait-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Ftaskwait-depend-nowait-1.c?ref=b43836914bdc2a37563cf31359b2c4803bfe4374", "patch": "@@ -0,0 +1,17 @@\n+void\n+foo (int *p)\n+{\n+  #pragma omp taskwait depend(iterator(i = 0:16) , in : p[i]) nowait depend(out : p[32])\n+}\n+\n+void\n+bar (int *p)\n+{\n+  #pragma omp taskwait depend(mutexinoutset : p[0]) nowait\t/* { dg-error \"'mutexinoutset' kind in 'depend' clause on a 'taskwait' construct\" } */\n+}\n+\n+void\n+baz (void)\n+{\n+  #pragma omp taskwait nowait\t/* { dg-error \"'taskwait' construct with 'nowait' clause but no 'depend' clauses\" } */\n+}"}, {"sha": "46d5f10f3e1d2da18442b88d52c6bfabd3fef192", "filename": "libgomp/libgomp.map", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b43836914bdc2a37563cf31359b2c4803bfe4374/libgomp%2Flibgomp.map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b43836914bdc2a37563cf31359b2c4803bfe4374/libgomp%2Flibgomp.map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Flibgomp.map?ref=b43836914bdc2a37563cf31359b2c4803bfe4374", "patch": "@@ -410,6 +410,11 @@ GOMP_5.1 {\n \tGOMP_teams4;\n } GOMP_5.0.1;\n \n+GOMP_5.1.1 {\n+  global:\n+\tGOMP_taskwait_depend_nowait;\n+} GOMP_5.1;\n+\n OACC_2.0 {\n   global:\n \tacc_get_num_devices;"}, {"sha": "84b9f2cfed601b8158ff4e3447050abcc4f5d244", "filename": "libgomp/libgomp_g.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b43836914bdc2a37563cf31359b2c4803bfe4374/libgomp%2Flibgomp_g.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b43836914bdc2a37563cf31359b2c4803bfe4374/libgomp%2Flibgomp_g.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Flibgomp_g.h?ref=b43836914bdc2a37563cf31359b2c4803bfe4374", "patch": "@@ -305,6 +305,7 @@ extern void GOMP_taskloop_ull (void (*) (void *), void *,\n \t\t\t       unsigned long long);\n extern void GOMP_taskwait (void);\n extern void GOMP_taskwait_depend (void **);\n+extern void GOMP_taskwait_depend_nowait (void **);\n extern void GOMP_taskyield (void);\n extern void GOMP_taskgroup_start (void);\n extern void GOMP_taskgroup_end (void);"}, {"sha": "7925e5873c416acda7ea96be1b3440c02c797d25", "filename": "libgomp/task.c", "status": "modified", "additions": 45, "deletions": 2, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b43836914bdc2a37563cf31359b2c4803bfe4374/libgomp%2Ftask.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b43836914bdc2a37563cf31359b2c4803bfe4374/libgomp%2Ftask.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftask.c?ref=b43836914bdc2a37563cf31359b2c4803bfe4374", "patch": "@@ -460,6 +460,17 @@ gomp_task_handle_depend (struct gomp_task *task, struct gomp_task *parent,\n     }\n }\n \n+/* Body of empty task like taskwait nowait depend.  */\n+\n+static void\n+empty_task (void *data __attribute__((unused)))\n+{\n+}\n+\n+static void gomp_task_run_post_handle_depend_hash (struct gomp_task *);\n+static inline size_t gomp_task_run_post_handle_depend (struct gomp_task *,\n+\t\t\t\t\t\t       struct gomp_team *);\n+\n /* Called when encountering an explicit task directive.  If IF_CLAUSE is\n    false, then we must not delay in executing the task.  If UNTIED is true,\n    then the task may be executed by any member of the team.\n@@ -681,6 +692,18 @@ GOMP_task (void (*fn) (void *), void *data, void (*cpyfn) (void *, void *),\n \t      gomp_mutex_unlock (&team->task_lock);\n \t      return;\n \t    }\n+\t  /* Check for taskwait nowait depend which doesn't need to wait for\n+\t     anything.  */\n+\t  if (__builtin_expect (fn == empty_task, 0))\n+\t    {\n+\t      if (taskgroup)\n+\t\ttaskgroup->num_children--;\n+\t      gomp_task_run_post_handle_depend_hash (task);\n+\t      gomp_mutex_unlock (&team->task_lock);\n+\t      gomp_finish_task (task);\n+\t      free (task);\n+\t      return;\n+\t    }\n \t}\n \n       priority_queue_insert (PQ_CHILDREN, &parent->children_queue,\n@@ -839,8 +862,6 @@ GOMP_PLUGIN_target_task_completion (void *data)\n   gomp_mutex_unlock (&team->task_lock);\n }\n \n-static void gomp_task_run_post_handle_depend_hash (struct gomp_task *);\n-\n /* Called for nowait target tasks.  */\n \n bool\n@@ -1357,6 +1378,18 @@ gomp_task_run_post_handle_dependers (struct gomp_task *child_task,\n \tcontinue;\n \n       struct gomp_taskgroup *taskgroup = task->taskgroup;\n+      if (__builtin_expect (task->fn == empty_task, 0))\n+\t{\n+\t  if (!parent)\n+\t    task->parent = NULL;\n+\t  if (gomp_task_run_post_handle_depend (task, team))\n+\t    ++ret;\n+\t  if (taskgroup)\n+\t    taskgroup->num_children--;\n+\t  gomp_finish_task (task);\n+\t  free (task);\n+\t  continue;\n+\t}\n       if (parent)\n \t{\n \t  priority_queue_insert (PQ_CHILDREN, &parent->children_queue,\n@@ -1832,6 +1865,16 @@ GOMP_taskwait_depend (void **depend)\n     gomp_task_maybe_wait_for_dependencies (depend);\n }\n \n+/* Called when encountering a taskwait directive with nowait and depend\n+   clause(s).  Create a possibly deferred task construct with empty body.  */\n+\n+void\n+GOMP_taskwait_depend_nowait (void **depend)\n+{\n+  ialias_call (GOMP_task) (empty_task, \"\", NULL, 0, 1, true,\n+\t\t\t   GOMP_TASK_FLAG_DEPEND, depend, 0, NULL);\n+}\n+\n /* An undeferred task is about to run.  Wait for all tasks that this\n    undeferred task depends on.\n "}, {"sha": "3d1519ee70a559efe78d59d597f86be02b77c712", "filename": "libgomp/testsuite/libgomp.c-c++-common/taskwait-depend-nowait-1.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b43836914bdc2a37563cf31359b2c4803bfe4374/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ftaskwait-depend-nowait-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b43836914bdc2a37563cf31359b2c4803bfe4374/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ftaskwait-depend-nowait-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ftaskwait-depend-nowait-1.c?ref=b43836914bdc2a37563cf31359b2c4803bfe4374", "patch": "@@ -0,0 +1,39 @@\n+#ifdef __cplusplus\n+extern \"C\"\n+#endif\n+void abort (void);\n+\n+int\n+main ()\n+{\n+  int a[64], b = 1;\n+  #pragma omp parallel num_threads (4)\n+  #pragma omp single\n+  {\n+    int i;\n+    #pragma omp taskwait depend(in: a) nowait\n+    #pragma omp taskwait depend(in: a) nowait\n+    #pragma omp taskwait\n+    #pragma omp taskgroup\n+    {\n+      #pragma omp taskwait depend(in: a) nowait\n+      #pragma omp taskwait depend(in: a) nowait\n+    }\n+    for (i = 0; i < 64; ++i)\n+      #pragma omp task depend(in: a) shared(a)\n+      a[i] = i;\n+    #pragma omp taskwait depend(inout: a) nowait\n+    for (i = 0; i < 64; ++i)\n+      #pragma omp task depend(inoutset: a) shared(a)\n+      if (a[i] != i)\n+\tabort ();\n+      else\n+\ta[i] = 2 * i + 1;\n+    #pragma omp taskwait nowait depend(out: a) depend(in: b)\n+    #pragma omp taskwait depend(inout: b)\n+    for (i = 0; i < 64; ++i)\n+      if (a[i] != 2 * i + 1)\n+\tabort ();\n+  }\n+  return 0;\n+}"}]}