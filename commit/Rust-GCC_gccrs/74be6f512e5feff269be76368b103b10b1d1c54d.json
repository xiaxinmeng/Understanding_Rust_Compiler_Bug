{"sha": "74be6f512e5feff269be76368b103b10b1d1c54d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzRiZTZmNTEyZTVmZWZmMjY5YmU3NjM2OGIxMDNiMTBiMWQxYzU0ZA==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2018-09-05T02:08:19Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2018-09-05T02:08:19Z"}, "message": "cp-tree.h (treat_lvalue_as_rvalue_p): Declare.\n\n\t* cp-tree.h (treat_lvalue_as_rvalue_p): Declare.\n\t* except.c (build_throw): Use it.  Use CP_TYPE_VOLATILE_P.\n\t* typeck.c (treat_lvalue_as_rvalue_p): No longer static.  Add PARM_OK\n\tparameter.\n\t(maybe_warn_pessimizing_move): Adjust treat_lvalue_as_rvalue_p call.\n\t(check_return_expr): Likewise.\n\nFrom-SVN: r264101", "tree": {"sha": "743dd774da6b65c853fa72b24d1d8821eae145f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/743dd774da6b65c853fa72b24d1d8821eae145f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74be6f512e5feff269be76368b103b10b1d1c54d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74be6f512e5feff269be76368b103b10b1d1c54d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74be6f512e5feff269be76368b103b10b1d1c54d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74be6f512e5feff269be76368b103b10b1d1c54d/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fd64b29375be483365a4e9620d95e123e73c6fef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd64b29375be483365a4e9620d95e123e73c6fef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd64b29375be483365a4e9620d95e123e73c6fef"}], "stats": {"total": 30, "additions": 19, "deletions": 11}, "files": [{"sha": "3fbfe18bd438bdd7404adc926175d62f07ae1663", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74be6f512e5feff269be76368b103b10b1d1c54d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74be6f512e5feff269be76368b103b10b1d1c54d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=74be6f512e5feff269be76368b103b10b1d1c54d", "patch": "@@ -1,3 +1,12 @@\n+2018-09-04  Marek Polacek  <polacek@redhat.com>\n+\n+\t* cp-tree.h (treat_lvalue_as_rvalue_p): Declare.\n+\t* except.c (build_throw): Use it.  Use CP_TYPE_VOLATILE_P.\n+\t* typeck.c (treat_lvalue_as_rvalue_p): No longer static.  Add PARM_OK\n+\tparameter.\n+\t(maybe_warn_pessimizing_move): Adjust treat_lvalue_as_rvalue_p call.\n+\t(check_return_expr): Likewise.\n+\n 2018-09-03  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/84980"}, {"sha": "df441fca30429abba62b4450649d6ee362a2b8fd", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74be6f512e5feff269be76368b103b10b1d1c54d/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74be6f512e5feff269be76368b103b10b1d1c54d/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=74be6f512e5feff269be76368b103b10b1d1c54d", "patch": "@@ -7354,6 +7354,7 @@ extern tree cp_perform_integral_promotions      (tree, tsubst_flags_t);\n extern tree finish_left_unary_fold_expr      (tree, int);\n extern tree finish_right_unary_fold_expr     (tree, int);\n extern tree finish_binary_fold_expr          (tree, tree, int);\n+extern bool treat_lvalue_as_rvalue_p\t     (tree, bool);\n \n /* in typeck2.c */\n extern void require_complete_eh_spec_types\t(tree, tree);"}, {"sha": "2db90eedcf78026d90483354df9044f84f54f08e", "filename": "gcc/cp/except.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74be6f512e5feff269be76368b103b10b1d1c54d/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74be6f512e5feff269be76368b103b10b1d1c54d/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=74be6f512e5feff269be76368b103b10b1d1c54d", "patch": "@@ -676,12 +676,9 @@ build_throw (tree exp)\n \t  /* Under C++0x [12.8/16 class.copy], a thrown lvalue is sometimes\n \t     treated as an rvalue for the purposes of overload resolution\n \t     to favor move constructors over copy constructors.  */\n-\t  if (/* Must be a local, automatic variable.  */\n-\t      VAR_P (exp)\n-\t      && DECL_CONTEXT (exp) == current_function_decl\n-\t      && ! TREE_STATIC (exp)\n+\t  if (treat_lvalue_as_rvalue_p (exp, /*parm_ok*/false)\n \t      /* The variable must not have the `volatile' qualifier.  */\n-\t      && !(cp_type_quals (TREE_TYPE (exp)) & TYPE_QUAL_VOLATILE))\n+\t      && !CP_TYPE_VOLATILE_P (TREE_TYPE (exp)))\n \t    {\n \t      tree moved = move (exp);\n \t      exp_vec = make_tree_vector_single (moved);"}, {"sha": "84cf4c478aab3f85de11cd0701606bc9506e215d", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74be6f512e5feff269be76368b103b10b1d1c54d/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74be6f512e5feff269be76368b103b10b1d1c54d/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=74be6f512e5feff269be76368b103b10b1d1c54d", "patch": "@@ -9180,14 +9180,15 @@ can_do_nrvo_p (tree retval, tree functype)\n }\n \n /* Returns true if we should treat RETVAL, an expression being returned,\n-   as if it were designated by an rvalue.  See [class.copy.elision].  */\n+   as if it were designated by an rvalue.  See [class.copy.elision].\n+   PARM_P is true if a function parameter is OK in this context.  */\n \n-static bool\n-treat_lvalue_as_rvalue_p (tree retval)\n+bool\n+treat_lvalue_as_rvalue_p (tree retval, bool parm_ok)\n {\n   return ((cxx_dialect != cxx98)\n \t  && ((VAR_P (retval) && !DECL_HAS_VALUE_EXPR_P (retval))\n-\t      || TREE_CODE (retval) == PARM_DECL)\n+\t      || (parm_ok && TREE_CODE (retval) == PARM_DECL))\n \t  && DECL_CONTEXT (retval) == current_function_decl\n \t  && !TREE_STATIC (retval));\n }\n@@ -9240,7 +9241,7 @@ maybe_warn_pessimizing_move (tree retval, tree functype)\n \t    }\n \t  /* Warn if the move is redundant.  It is redundant when we would\n \t     do maybe-rvalue overload resolution even without std::move.  */\n-\t  else if (treat_lvalue_as_rvalue_p (arg))\n+\t  else if (treat_lvalue_as_rvalue_p (arg, /*parm_ok*/true))\n \t    {\n \t      auto_diagnostic_group d;\n \t      if (warning_at (loc, OPT_Wredundant_move,\n@@ -9525,7 +9526,7 @@ check_return_expr (tree retval, bool *no_warning)\n          Note that these conditions are similar to, but not as strict as,\n \t the conditions for the named return value optimization.  */\n       bool converted = false;\n-      if (treat_lvalue_as_rvalue_p (retval)\n+      if (treat_lvalue_as_rvalue_p (retval, /*parm_ok*/true)\n \t  /* This is only interesting for class type.  */\n \t  && CLASS_TYPE_P (functype))\n \t{"}]}