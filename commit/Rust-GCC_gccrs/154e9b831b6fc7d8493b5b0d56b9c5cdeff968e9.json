{"sha": "154e9b831b6fc7d8493b5b0d56b9c5cdeff968e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTU0ZTliODMxYjZmYzdkODQ5M2I1YjBkNTZiOWM1Y2RlZmY5NjhlOQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-12-10T09:34:32Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-12-10T09:39:53Z"}, "message": "Allow scalar fallback for pattern root stmt\n\nThis adjusts the SLP build to allow a pattern root stmt to be\nbuilt from scalars.  I've noticed this in PR98211 where we fail\nto promote a SLP subtree to a simple splat operation and instead\nemit a series of uniform vector operations.  The bb-slp-div-1.c\ntestcase is now vectorized on x86_64 but only the store so I\nadjusted it to expect the load to be vectorized.\n\n2020-12-10  Richard Biener  <rguenther@suse.de>\n\n\t* tree-vect-slp.c (vect_get_and_check_slp_defs): Do\n\tnot mark the defs to occur in a pattern if it is the\n\tpattern root and record the original stmt defs in that\n\tcase.\n\n\t* gcc.dg/vect/bb-slp-div-1.c: Expect the load to be\n\tvectorized.", "tree": {"sha": "48b6335383e0cabebcee8d89ff3414cc7f7c1d5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/48b6335383e0cabebcee8d89ff3414cc7f7c1d5e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/154e9b831b6fc7d8493b5b0d56b9c5cdeff968e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/154e9b831b6fc7d8493b5b0d56b9c5cdeff968e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/154e9b831b6fc7d8493b5b0d56b9c5cdeff968e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/154e9b831b6fc7d8493b5b0d56b9c5cdeff968e9/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d63e3c229f32d441e6ead0cb62923095b54c5f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d63e3c229f32d441e6ead0cb62923095b54c5f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d63e3c229f32d441e6ead0cb62923095b54c5f9"}], "stats": {"total": 20, "additions": 16, "deletions": 4}, "files": [{"sha": "1eea9233b701fa775bd3e986c409aca333eae179", "filename": "gcc/testsuite/gcc.dg/vect/bb-slp-div-1.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/154e9b831b6fc7d8493b5b0d56b9c5cdeff968e9/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-div-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/154e9b831b6fc7d8493b5b0d56b9c5cdeff968e9/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-div-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-div-1.c?ref=154e9b831b6fc7d8493b5b0d56b9c5cdeff968e9", "patch": "@@ -16,4 +16,7 @@ f (void)\n   x[7] /= 9;\n }\n \n-/* { dg-final { scan-tree-dump \"optimized: basic block\" \"slp2\" { xfail *-*-* } } } */\n+/* We can vectorize the store from a CTOR built from scalar division\n+   results but ideally we'd like to see vectorizing the load and the\n+   division as well.  */\n+/* { dg-final { scan-tree-dump \"transform load\" \"slp2\" { xfail *-*-* } } } */"}, {"sha": "e93e9c7a2d3d9810147299831d5634feaab8ed7e", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/154e9b831b6fc7d8493b5b0d56b9c5cdeff968e9/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/154e9b831b6fc7d8493b5b0d56b9c5cdeff968e9/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=154e9b831b6fc7d8493b5b0d56b9c5cdeff968e9", "patch": "@@ -544,12 +544,21 @@ vect_get_and_check_slp_defs (vec_info *vinfo, unsigned char swap,\n \t  continue;\n \t}\n \n-      if (def_stmt_info && is_pattern_stmt_p (def_stmt_info))\n-\toprnd_info->any_pattern = true;\n-\n       oprnd_info->def_stmts.quick_push (def_stmt_info);\n       oprnd_info->ops.quick_push (oprnd);\n \n+      if (def_stmt_info\n+\t  && is_pattern_stmt_p (def_stmt_info))\n+\t{\n+\t  if (STMT_VINFO_RELATED_STMT (vect_orig_stmt (def_stmt_info))\n+\t      != def_stmt_info)\n+\t    oprnd_info->any_pattern = true;\n+\t  else\n+\t    /* If we promote this to external use the original stmt def.  */\n+\t    oprnd_info->ops.last ()\n+\t      = gimple_get_lhs (vect_orig_stmt (def_stmt_info)->stmt);\n+\t}\n+\n       /* If there's a extern def on a backedge make sure we can\n \t code-generate at the region start.\n \t ???  This is another case that could be fixed by adjusting"}]}