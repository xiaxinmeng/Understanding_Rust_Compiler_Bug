{"sha": "3ebcc053a4bd32973762b671b444730baf558805", "node_id": "C_kwDOANBUbNoAKDNlYmNjMDUzYTRiZDMyOTczNzYyYjY3MWI0NDQ3MzBiYWY1NTg4MDU", "commit": {"author": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2022-03-07T13:23:03Z"}, "committer": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2022-03-10T11:19:47Z"}, "message": "[nvptx] Use bit-bucket operand for atom insns\n\nFor an atomic fetch operation that doesn't use the result:\n...\n  __atomic_fetch_add (p64, v64, MEMMODEL_RELAXED);\n...\nwe currently emit:\n...\n  atom.add.u64 %r26, [%r25], %r27;\n...\n\nDetect the REG_UNUSED reg-note for %r26, and emit instead:\n...\n  atom.add.u64 _, [%r25], %r27;\n...\n\nLikewise for all atom insns.\n\nTested on nvptx.\n\ngcc/ChangeLog:\n\n2022-03-07  Tom de Vries  <tdevries@suse.de>\n\n\tPR target/104815\n\t* config/nvptx/nvptx.cc (nvptx_print_operand): Handle 'x' operand\n\tmodifier.\n\t* config/nvptx/nvptx.md: Use %x0 destination operand in atom insns.\n\ngcc/testsuite/ChangeLog:\n\n2022-03-07  Tom de Vries  <tdevries@suse.de>\n\n\tPR target/104815\n\t* gcc.target/nvptx/atomic-bit-bucket-dest.c: New test.", "tree": {"sha": "1705486c2f180351e33c058f0e8f7730fc24decd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1705486c2f180351e33c058f0e8f7730fc24decd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ebcc053a4bd32973762b671b444730baf558805", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ebcc053a4bd32973762b671b444730baf558805", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ebcc053a4bd32973762b671b444730baf558805", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ebcc053a4bd32973762b671b444730baf558805/comments", "author": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "248bbcb2c3212bcb9f2a485b591dd37371133402", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/248bbcb2c3212bcb9f2a485b591dd37371133402", "html_url": "https://github.com/Rust-GCC/gccrs/commit/248bbcb2c3212bcb9f2a485b591dd37371133402"}], "stats": {"total": 56, "additions": 50, "deletions": 6}, "files": [{"sha": "14911bd15f182f61dbf74e25955e50a9d9e95803", "filename": "gcc/config/nvptx/nvptx.cc", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ebcc053a4bd32973762b671b444730baf558805/gcc%2Fconfig%2Fnvptx%2Fnvptx.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ebcc053a4bd32973762b671b444730baf558805/gcc%2Fconfig%2Fnvptx%2Fnvptx.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.cc?ref=3ebcc053a4bd32973762b671b444730baf558805", "patch": "@@ -2835,7 +2835,8 @@ nvptx_mem_maybe_shared_p (const_rtx x)\n    S -- print a shuffle kind specified by CONST_INT\n    t -- print a type opcode suffix, promoting QImode to 32 bits\n    T -- print a type size in bits\n-   u -- print a type opcode suffix without promotions.  */\n+   u -- print a type opcode suffix without promotions.\n+   x -- print a destination operand that may also be a bit bucket.  */\n \n static void\n nvptx_print_operand (FILE *file, rtx x, int code)\n@@ -2863,6 +2864,14 @@ nvptx_print_operand (FILE *file, rtx x, int code)\n \n   switch (code)\n     {\n+    case 'x':\n+      if (current_output_insn != NULL\n+\t  && find_reg_note (current_output_insn, REG_UNUSED, x) != NULL_RTX)\n+\t{\n+\t  fputs (\"_\", file);\n+\t  return;\n+\t}\n+      goto common;\n     case 'B':\n       if (SYMBOL_REF_P (XEXP (x, 0)))\n \tswitch (SYMBOL_DATA_AREA (XEXP (x, 0)))"}, {"sha": "1cbf197065fac7ec1dd1ef05ca1aad784eaf3c50", "filename": "gcc/config/nvptx/nvptx.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ebcc053a4bd32973762b671b444730baf558805/gcc%2Fconfig%2Fnvptx%2Fnvptx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ebcc053a4bd32973762b671b444730baf558805/gcc%2Fconfig%2Fnvptx%2Fnvptx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.md?ref=3ebcc053a4bd32973762b671b444730baf558805", "patch": "@@ -2050,7 +2050,7 @@\n   \"\"\n   {\n     const char *t\n-      = \"%.\\\\tatom%A1.cas.b%T0\\\\t%0, %1, %2, %3;\";\n+      = \"%.\\\\tatom%A1.cas.b%T0\\\\t%x0, %1, %2, %3;\";\n     return nvptx_output_atomic_insn (t, operands, 1, 4);\n   }\n   [(set_attr \"atomic\" \"true\")])\n@@ -2076,7 +2076,7 @@\n \treturn \"\";\n       }\n     const char *t\n-      = \"%.\\tatom%A1.exch.b%T0\\t%0, %1, %2;\";\n+      = \"%.\\tatom%A1.exch.b%T0\\t%x0, %1, %2;\";\n     return nvptx_output_atomic_insn (t, operands, 1, 3);\n   }\n   [(set_attr \"atomic\" \"true\")])\n@@ -2166,7 +2166,7 @@\n \treturn \"\";\n       }\n     const char *t\n-      = \"%.\\\\tatom%A1.add%t0\\\\t%0, %1, %2;\";\n+      = \"%.\\\\tatom%A1.add%t0\\\\t%x0, %1, %2;\";\n     return nvptx_output_atomic_insn (t, operands, 1, 3);\n   }\n   [(set_attr \"atomic\" \"true\")])\n@@ -2196,7 +2196,7 @@\n \treturn \"\";\n       }\n     const char *t\n-      = \"%.\\\\tatom%A1.add%t0\\\\t%0, %1, %2;\";\n+      = \"%.\\\\tatom%A1.add%t0\\\\t%x0, %1, %2;\";\n     return nvptx_output_atomic_insn (t, operands, 1, 3);\n   }\n   [(set_attr \"atomic\" \"true\")])\n@@ -2226,7 +2226,7 @@\n \treturn \"\";\n       }\n     const char *t\n-      = \"%.\\\\tatom%A1.<logic>.b%T0\\\\t%0, %1, %2;\";\n+      = \"%.\\\\tatom%A1.<logic>.b%T0\\\\t%x0, %1, %2;\";\n     return nvptx_output_atomic_insn (t, operands, 1, 3);\n   }\n "}, {"sha": "7e3ffcece0690ab2702714e1b818176a59f36200", "filename": "gcc/testsuite/gcc.target/nvptx/atomic-bit-bucket-dest.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ebcc053a4bd32973762b671b444730baf558805/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fatomic-bit-bucket-dest.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ebcc053a4bd32973762b671b444730baf558805/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fatomic-bit-bucket-dest.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fatomic-bit-bucket-dest.c?ref=3ebcc053a4bd32973762b671b444730baf558805", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -misa=sm_35\" } */\n+\n+enum memmodel\n+{\n+  MEMMODEL_RELAXED = 0\n+};\n+\n+unsigned long long int *p64;\n+unsigned long long int v64;\n+\n+int\n+main()\n+{\n+  __atomic_fetch_add (p64, v64, MEMMODEL_RELAXED);\n+  __atomic_fetch_and (p64, v64, MEMMODEL_RELAXED);\n+  __atomic_fetch_or (p64, v64, MEMMODEL_RELAXED);\n+  __atomic_fetch_xor (p64, v64, MEMMODEL_RELAXED);\n+  __atomic_exchange_n (p64, v64, MEMMODEL_RELAXED);\n+\n+  {\n+    unsigned long long expected = v64;\n+    __atomic_compare_exchange_n (p64, &expected, 0, 0, MEMMODEL_RELAXED,\n+\t\t\t\t MEMMODEL_RELAXED);\n+  }\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler-times \"atom.add.u64\\[\\t \\]+_,\" 1 } } */\n+/* { dg-final { scan-assembler-times \"atom.and.b64\\[\\t \\]+_,\" 1 } } */\n+/* { dg-final { scan-assembler-times \"atom.or.b64\\[\\t \\]+_,\" 1 } } */\n+/* { dg-final { scan-assembler-times \"atom.xor.b64\\[\\t \\]+_,\" 1 } } */\n+/* { dg-final { scan-assembler-times \"atom.exch.b64\\[\\t \\]+_,\" 1 } } */\n+/* { dg-final { scan-assembler-times \"atom.cas.b64\\[\\t \\]+_,\" 1 } } */"}]}