{"sha": "4d663acdb6e685c07818aa4229c7b1f2224d678b", "node_id": "C_kwDOANBUbNoAKDRkNjYzYWNkYjZlNjg1YzA3ODE4YWE0MjI5YzdiMWYyMjI0ZDY3OGI", "commit": {"author": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2023-04-04T15:13:18Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2023-04-05T09:24:55Z"}, "message": "gccrs: never re-setup trait item bound with a dyn object\n\nIt results in a recursive generic Param cycle.\n\ngcc/rust/ChangeLog:\n\n\t* typecheck/rust-hir-path-probe.cc: dont subst with a dynamic object\n\nSigned-off-by: Philip Herron <herron.philip@googlemail.com>", "tree": {"sha": "c2f3edac4a0cd56cdf42df4b50938184abead03c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c2f3edac4a0cd56cdf42df4b50938184abead03c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d663acdb6e685c07818aa4229c7b1f2224d678b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d663acdb6e685c07818aa4229c7b1f2224d678b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d663acdb6e685c07818aa4229c7b1f2224d678b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d663acdb6e685c07818aa4229c7b1f2224d678b/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f83e63a89a030fce62c8de56b3c1e61cec77ef52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f83e63a89a030fce62c8de56b3c1e61cec77ef52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f83e63a89a030fce62c8de56b3c1e61cec77ef52"}], "stats": {"total": 35, "additions": 9, "deletions": 26}, "files": [{"sha": "be3daa1cad8fd2df83938123f327275ff7864d61", "filename": "gcc/rust/typecheck/rust-hir-path-probe.cc", "status": "modified", "additions": 9, "deletions": 26, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d663acdb6e685c07818aa4229c7b1f2224d678b/gcc%2Frust%2Ftypecheck%2Frust-hir-path-probe.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d663acdb6e685c07818aa4229c7b1f2224d678b/gcc%2Frust%2Ftypecheck%2Frust-hir-path-probe.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-path-probe.cc?ref=4d663acdb6e685c07818aa4229c7b1f2224d678b", "patch": "@@ -341,36 +341,16 @@ PathProbeType::process_associated_trait_for_candidates (\n       break;\n     }\n \n-  TyTy::BaseType *trait_item_tyty = trait_item_ref->get_tyty ();\n+  const TyTy::TypeBoundPredicate p (*trait_ref, Location ());\n+  TyTy::TypeBoundPredicateItem item (&p, trait_item_ref);\n \n-  // we can substitute the Self with the receiver here\n-  if (trait_item_tyty->get_kind () == TyTy::TypeKind::FNDEF)\n-    {\n-      TyTy::FnType *fn = static_cast<TyTy::FnType *> (trait_item_tyty);\n-      TyTy::SubstitutionParamMapping *param = nullptr;\n-      for (auto &param_mapping : fn->get_substs ())\n-\t{\n-\t  const HIR::TypeParam &type_param = param_mapping.get_generic_param ();\n-\t  if (type_param.get_type_representation ().compare (\"Self\") == 0)\n-\t    {\n-\t      param = &param_mapping;\n-\t      break;\n-\t    }\n-\t}\n-      rust_assert (param != nullptr);\n-\n-      std::vector<TyTy::SubstitutionArg> mappings;\n-      mappings.push_back (TyTy::SubstitutionArg (param, receiver->clone ()));\n-\n-      Location locus; // FIXME\n-      TyTy::SubstitutionArgumentMappings args (std::move (mappings), {}, locus);\n-      trait_item_tyty = SubstMapperInternal::Resolve (trait_item_tyty, args);\n-    }\n+  TyTy::BaseType *trait_item_tyty = item.get_raw_item ()->get_tyty ();\n+  if (receiver->get_kind () != TyTy::DYNAMIC)\n+    trait_item_tyty = item.get_tyty_for_receiver (receiver);\n \n   PathProbeCandidate::TraitItemCandidate trait_item_candidate{trait_ref,\n \t\t\t\t\t\t\t      trait_item_ref,\n \t\t\t\t\t\t\t      impl};\n-\n   PathProbeCandidate candidate{candidate_type, trait_item_tyty,\n \t\t\t       trait_item_ref->get_locus (),\n \t\t\t       trait_item_candidate};\n@@ -411,7 +391,10 @@ PathProbeType::process_predicate_for_candidates (\n       break;\n     }\n \n-  TyTy::BaseType *trait_item_tyty = item.get_tyty_for_receiver (receiver);\n+  TyTy::BaseType *trait_item_tyty = item.get_raw_item ()->get_tyty ();\n+  if (receiver->get_kind () != TyTy::DYNAMIC)\n+    trait_item_tyty = item.get_tyty_for_receiver (receiver);\n+\n   PathProbeCandidate::TraitItemCandidate trait_item_candidate{trait_ref,\n \t\t\t\t\t\t\t      trait_item_ref,\n \t\t\t\t\t\t\t      nullptr};"}]}