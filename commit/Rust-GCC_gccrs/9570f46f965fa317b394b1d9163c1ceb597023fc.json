{"sha": "9570f46f965fa317b394b1d9163c1ceb597023fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTU3MGY0NmY5NjVmYTMxN2IzOTRiMWQ5MTYzYzFjZWI1OTcwMjNmYw==", "commit": {"author": {"name": "Faraz Shahbazker", "email": "fshahbazker@wavecomp.com", "date": "2019-06-11T20:09:57Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2019-06-11T20:09:57Z"}, "message": "mips.c (mips_final_postscan_insn): Modify call to `mips_set_text_contents_type' to indicate whether a non-debug...\n\n\t* config/mips/mips.c (mips_final_postscan_insn): Modify call\n\tto `mips_set_text_contents_type' to indicate whether a\n\tnon-debug insn follows.\n\n\t* gcc.target/mips/data-sym-pool.c: Update expected output.\n\t* gcc.target/mips/data-sym-multi-pool.c: New test.\n\nFrom-SVN: r272169", "tree": {"sha": "1d2724594536f5e694bff5929506f9e71ffd5ddc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d2724594536f5e694bff5929506f9e71ffd5ddc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9570f46f965fa317b394b1d9163c1ceb597023fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9570f46f965fa317b394b1d9163c1ceb597023fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9570f46f965fa317b394b1d9163c1ceb597023fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9570f46f965fa317b394b1d9163c1ceb597023fc/comments", "author": null, "committer": null, "parents": [{"sha": "536b4592a148f505114db8ee6ba1e8809686ab1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/536b4592a148f505114db8ee6ba1e8809686ab1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/536b4592a148f505114db8ee6ba1e8809686ab1f"}], "stats": {"total": 77, "additions": 71, "deletions": 6}, "files": [{"sha": "ba257665673f1b553a209f24d4275616a7f7d2fe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9570f46f965fa317b394b1d9163c1ceb597023fc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9570f46f965fa317b394b1d9163c1ceb597023fc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9570f46f965fa317b394b1d9163c1ceb597023fc", "patch": "@@ -1,3 +1,9 @@\n+2019-06-11  Faraz Shahbazker  <fshahbazker@wavecomp.com>\n+\n+\t* config/mips/mips.c (mips_final_postscan_insn): Modify call\n+\tto `mips_set_text_contents_type' to indicate whether a\n+\tnon-debug insn follows.\n+\n 2019-06-11  Michael Meissner  <meissner@linux.ibm.com>\n \n \t* config/rs6000/rs6000-cpus.def (ISA_FUTURE_MASKS_SERVER): Delete"}, {"sha": "0e1a68a9c469a4e04ee252486c56c731d1883a1b", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9570f46f965fa317b394b1d9163c1ceb597023fc/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9570f46f965fa317b394b1d9163c1ceb597023fc/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=9570f46f965fa317b394b1d9163c1ceb597023fc", "patch": "@@ -20636,9 +20636,19 @@ mips_final_postscan_insn (FILE *file ATTRIBUTE_UNUSED, rtx_insn *insn,\n   if (INSN_P (insn)\n       && GET_CODE (PATTERN (insn)) == UNSPEC_VOLATILE\n       && XINT (PATTERN (insn), 1) == UNSPEC_CONSTTABLE_END)\n-    mips_set_text_contents_type (asm_out_file, \"__pend_\",\n-\t\t\t\t INTVAL (XVECEXP (PATTERN (insn), 0, 0)),\n-\t\t\t\t TRUE);\n+    {\n+      rtx_insn *next_insn = next_real_nondebug_insn (insn);\n+      bool code_p = (next_insn != NULL\n+\t\t     && INSN_P (next_insn)\n+\t\t     && (GET_CODE (PATTERN (next_insn)) != UNSPEC_VOLATILE\n+\t\t\t || XINT (PATTERN (next_insn), 1) != UNSPEC_CONSTTABLE));\n+\n+      /* Switch content type depending on whether there is code beyond\n+\t the constant pool.  */\n+      mips_set_text_contents_type (asm_out_file, \"__pend_\",\n+\t\t\t\t   INTVAL (XVECEXP (PATTERN (insn), 0, 0)),\n+\t\t\t\t   code_p);\n+    }\n }\n \n /* Return the function that is used to expand the <u>mulsidi3 pattern."}, {"sha": "302ac15bbe969879cfbfb1717ccef75367a49fd3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9570f46f965fa317b394b1d9163c1ceb597023fc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9570f46f965fa317b394b1d9163c1ceb597023fc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9570f46f965fa317b394b1d9163c1ceb597023fc", "patch": "@@ -1,3 +1,8 @@\n+2019-06-11  Faraz Shahbazker  <fshahbazker@wavecomp.com>\n+\n+\t* gcc.target/mips/data-sym-pool.c: Update expected output.\n+\t* gcc.target/mips/data-sym-multi-pool.c: New test.\n+\n 2019-06-11  Iain Sandoe  <iain@sandoe.co.uk>\n \n \tPR testsuite/65364"}, {"sha": "1936f5bf27e5c22074539f28d223af27aec25a4b", "filename": "gcc/testsuite/gcc.target/mips/data-sym-multi-pool.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9570f46f965fa317b394b1d9163c1ceb597023fc/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdata-sym-multi-pool.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9570f46f965fa317b394b1d9163c1ceb597023fc/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdata-sym-multi-pool.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdata-sym-multi-pool.c?ref=9570f46f965fa317b394b1d9163c1ceb597023fc", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mips16 -mcode-readable=yes\" } */\n+/* { dg-skip-if \"per-function expected output\" { *-*-* } { \"-flto\" } { \"\" } } */\n+\n+/* This testcase generates multiple constant pools within a function body.  */\n+\n+#define C(a,b) \\\n+  if (a > b)  goto gt; \\\n+  if (a < b)  goto lt;\n+\n+#define C4(x,b) C((x)[0], b) C((x)[1],b) C((x)[2],b) C((x)[3],b)\n+#define C16(x,y) C4(x, (y)[0]) C4(x, (y)[1]) C4(x, (y)[2]) C4(x, (y)[3])\n+\n+#define C64(x,y) C16(x,y) C16(x+4,y) C16(x+8,y)\n+#define C256(x,y) C64(x,y) C64(x,y+4) C64(x,y+8)\n+\n+unsigned foo(int x[64], int y[64])\n+{\n+  C256(x,y);\n+\n+  return 0x01234567;\n+ gt:\n+  return 0x12345678;\n+ lt:\n+  return 0xF0123456;\n+}\n+\n+/*  Check that:\n+1. The __pend symbol is emitted as STT_FUNCTION followed by instructions:\n+\t.type\t__pend_frob_<X>, @function\t# Symbol # must match label.\n+__pend_foo_<X>: \t\t\t\t# The symbol must match.\n+\t.insn\n+.L<Y>:\n+\n+2. __pend symbol at end of function has type STT_OBJECT\n+\n+\t.type\t__pend_foo_<X>, @object\n+__pend_foo_<X>:\n+\t.insn\n+\t.end\tfoo\n+\n+  */\n+\n+/* { dg-final { scan-assembler \"\\t\\\\.type\\t(__pend_foo_\\[0-9\\]+), @function\\n\\\\1:\\n\\t\\\\.insn\\n.L\\[0-9\\]+:\\n\" } }  */\n+/* { dg-final { scan-assembler \"\\t\\\\.type\\t(__pend_foo_\\[0-9\\]+), @object\\n\\\\1:\\n\\t\\\\.end\\tfoo\\n\" } }  */"}, {"sha": "f093511179b4732e0d09622496bfb986a973ac7e", "filename": "gcc/testsuite/gcc.target/mips/data-sym-pool.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9570f46f965fa317b394b1d9163c1ceb597023fc/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdata-sym-pool.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9570f46f965fa317b394b1d9163c1ceb597023fc/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdata-sym-pool.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdata-sym-pool.c?ref=9570f46f965fa317b394b1d9163c1ceb597023fc", "patch": "@@ -16,14 +16,13 @@ __pool_frob_3:\t\t\t\t\t# The symbol must match.\n \t.align\t2\n $L3:\t\t\t\t\t\t# The label must match.\n \t.word\t305419896\n-\t.type\t__pend_frob_3, @function\t# Symbol # must match label.\n+\t.type\t__pend_frob_3, @object\t\t# Symbol # must match label.\n __pend_frob_3:\t\t\t\t\t# The symbol must match.\n-\t.insn\n \n    that is `__pool_*'/`__pend_*' symbols inserted around a constant pool.\n \n    This code is built with `-mplt' to prevent the special `__gnu_local_gp'\n    symbol from being placed in the constant pool at `-O0' for SVR4 code\n    and consequently interfering with test expectations.  */\n \n-/* { dg-final { scan-assembler \"\\tl\\[wd\\]\\t\\\\\\$\\[0-9\\]+,(.L(\\[0-9\\]+))\\n.*\\t\\\\.type\\t(__pool_frob_\\\\2), @object\\n\\\\3:\\n\\t\\\\.align\\t2\\n\\\\1:\\n\\t\\\\.d?word\\t305419896\\n\\t\\\\.type\\t(__pend_frob_\\\\2), @function\\n\\\\4:\\n\\t\\\\.insn\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tl\\[wd\\]\\t\\\\\\$\\[0-9\\]+,(.L(\\[0-9\\]+))\\n.*\\t\\\\.type\\t(__pool_frob_\\\\2), @object\\n\\\\3:\\n\\t\\\\.align\\t2\\n\\\\1:\\n\\t\\\\.d?word\\t305419896\\n\\t\\\\.type\\t(__pend_frob_\\\\2), @object\\n\\\\4:\\n\" } } */"}]}