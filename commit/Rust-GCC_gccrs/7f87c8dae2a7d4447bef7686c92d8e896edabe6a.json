{"sha": "7f87c8dae2a7d4447bef7686c92d8e896edabe6a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Y4N2M4ZGFlMmE3ZDQ0NDdiZWY3Njg2YzkyZDhlODk2ZWRhYmU2YQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2018-08-01T10:50:48Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2018-08-01T10:50:48Z"}, "message": "Improve dumping of value profiling transformations.\n\n2018-08-01  Martin Liska  <mliska@suse.cz>\n\n\t* value-prof.c (gimple_divmod_fixed_value_transform): Unify\n        format how successful transformation is dumped.\n\t(gimple_mod_pow2_value_transform): Likewise.\n\t(gimple_mod_subtract_transform): Likewise.\n\t(gimple_stringops_transform): Likewise.\n2018-08-01  Martin Liska  <mliska@suse.cz>\n\n\t* gcc.dg/tree-prof/stringop-1.c: Adjust scanned pattern.\n\t* gcc.dg/tree-prof/stringop-2.c: Likewise.\n\t* gcc.dg/tree-prof/val-prof-1.c: Likewise.\n\t* gcc.dg/tree-prof/val-prof-2.c: Likewise.\n\t* gcc.dg/tree-prof/val-prof-3.c: Likewise.\n\t* gcc.dg/tree-prof/val-prof-4.c: Likewise.\n\t* gcc.dg/tree-prof/val-prof-5.c: Likewise.\n\t* gcc.dg/tree-prof/val-prof-7.c: Likewise.\n\nFrom-SVN: r263203", "tree": {"sha": "cc5fb4141889a6ceb5fa7b8af4eaaec20479e536", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc5fb4141889a6ceb5fa7b8af4eaaec20479e536"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f87c8dae2a7d4447bef7686c92d8e896edabe6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f87c8dae2a7d4447bef7686c92d8e896edabe6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f87c8dae2a7d4447bef7686c92d8e896edabe6a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f87c8dae2a7d4447bef7686c92d8e896edabe6a/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fd2e1dcd253d34aeca751518970c20cc3e9a8716", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd2e1dcd253d34aeca751518970c20cc3e9a8716", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd2e1dcd253d34aeca751518970c20cc3e9a8716"}], "stats": {"total": 86, "additions": 47, "deletions": 39}, "files": [{"sha": "477b245f146b918ed1baae432f9adcada0c657f4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f87c8dae2a7d4447bef7686c92d8e896edabe6a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f87c8dae2a7d4447bef7686c92d8e896edabe6a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7f87c8dae2a7d4447bef7686c92d8e896edabe6a", "patch": "@@ -1,3 +1,11 @@\n+2018-08-01  Martin Liska  <mliska@suse.cz>\n+\n+\t* value-prof.c (gimple_divmod_fixed_value_transform): Unify\n+        format how successful transformation is dumped.\n+\t(gimple_mod_pow2_value_transform): Likewise.\n+\t(gimple_mod_subtract_transform): Likewise.\n+\t(gimple_stringops_transform): Likewise.\n+\n 2018-08-01  Martin Liska  <mliska@suse.cz>\n \n         PR value-prof/35543"}, {"sha": "a6c2a7fbcbd188fc1ad98c3e2a77330deb2ac5be", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f87c8dae2a7d4447bef7686c92d8e896edabe6a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f87c8dae2a7d4447bef7686c92d8e896edabe6a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7f87c8dae2a7d4447bef7686c92d8e896edabe6a", "patch": "@@ -1,3 +1,14 @@\n+2018-08-01  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc.dg/tree-prof/stringop-1.c: Adjust scanned pattern.\n+\t* gcc.dg/tree-prof/stringop-2.c: Likewise.\n+\t* gcc.dg/tree-prof/val-prof-1.c: Likewise.\n+\t* gcc.dg/tree-prof/val-prof-2.c: Likewise.\n+\t* gcc.dg/tree-prof/val-prof-3.c: Likewise.\n+\t* gcc.dg/tree-prof/val-prof-4.c: Likewise.\n+\t* gcc.dg/tree-prof/val-prof-5.c: Likewise.\n+\t* gcc.dg/tree-prof/val-prof-7.c: Likewise.\n+\n 2018-08-01  Martin Liska  <mliska@suse.cz>\n \n         PR value-prof/35543"}, {"sha": "d75b2548dbc42b57330ed96e5213256f87b1996b", "filename": "gcc/testsuite/gcc.dg/tree-prof/stringop-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f87c8dae2a7d4447bef7686c92d8e896edabe6a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fstringop-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f87c8dae2a7d4447bef7686c92d8e896edabe6a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fstringop-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fstringop-1.c?ref=7f87c8dae2a7d4447bef7686c92d8e896edabe6a", "patch": "@@ -15,7 +15,7 @@ main()\n    return 0;\n }\n /* autofdo doesn't support value profiling for now: */\n-/* { dg-final-use-not-autofdo { scan-ipa-dump \"Single value 4 stringop\" \"profile\"} } */\n+/* { dg-final-use-not-autofdo { scan-ipa-dump \"Transformation done: single value 4 stringop\" \"profile\"} } */\n /* Really this ought to simplify into assignment, but we are not there yet.  */\n /* a[0] = b[0] is what we fold the resulting memcpy into.  */\n /* { dg-final-use-not-autofdo { scan-tree-dump \" = MEM.*&b\" \"optimized\"} } */"}, {"sha": "3242cf5b8a21c01811f619835e1b9bbc2fb2e494", "filename": "gcc/testsuite/gcc.dg/tree-prof/stringop-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f87c8dae2a7d4447bef7686c92d8e896edabe6a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fstringop-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f87c8dae2a7d4447bef7686c92d8e896edabe6a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fstringop-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fstringop-2.c?ref=7f87c8dae2a7d4447bef7686c92d8e896edabe6a", "patch": "@@ -20,6 +20,6 @@ main()\n    return 0;\n }\n /* autofdo doesn't support value profiling for now: */\n-/* { dg-final-use-not-autofdo { scan-ipa-dump \"Single value 4 stringop\" \"profile\"} } */\n+/* { dg-final-use-not-autofdo { scan-ipa-dump \"Transformation done: single value 4 stringop\" \"profile\"} } */\n /* The versioned memset of size 4 should be optimized to an assignment.  */\n /* { dg-final-use-not-autofdo { scan-tree-dump \"MEM\\\\\\[\\\\(void .\\\\)&a\\\\\\] = 168430090\" \"optimized\"} } */"}, {"sha": "492c4c1c4b2d10dc0186c2061e17a3043f02ffc4", "filename": "gcc/testsuite/gcc.dg/tree-prof/val-prof-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f87c8dae2a7d4447bef7686c92d8e896edabe6a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fval-prof-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f87c8dae2a7d4447bef7686c92d8e896edabe6a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fval-prof-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fval-prof-1.c?ref=7f87c8dae2a7d4447bef7686c92d8e896edabe6a", "patch": "@@ -17,6 +17,6 @@ main ()\n   return 0;\n }\n /* autofdo does not do value profiling so far */\n-/* { dg-final-use-not-autofdo { scan-ipa-dump \"Div.mod by constant n_\\[0-9\\]*=257 transformation on insn\" \"profile\"} } */\n+/* { dg-final-use-not-autofdo { scan-ipa-dump \"Transformation done: div.mod by constant 257\" \"profile\"} } */\n /* { dg-final-use-not-autofdo { scan-tree-dump \"if \\\\(n_\\[0-9\\]* != 257\\\\)\" \"optimized\"} } */\n /* { dg-final-use { scan-tree-dump-not \"Invalid sum\" \"optimized\"} } */"}, {"sha": "8cb3c64fd175a400c0841a3ee8a4fb0a41441691", "filename": "gcc/testsuite/gcc.dg/tree-prof/val-prof-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f87c8dae2a7d4447bef7686c92d8e896edabe6a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fval-prof-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f87c8dae2a7d4447bef7686c92d8e896edabe6a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fval-prof-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fval-prof-2.c?ref=7f87c8dae2a7d4447bef7686c92d8e896edabe6a", "patch": "@@ -25,7 +25,7 @@ main ()\n   return 0;\n }\n /* autofdo does not do value profiling so far */\n-/* { dg-final-use-not-autofdo { scan-ipa-dump \"Mod power of 2 transformation on insn\" \"profile\" } } */\n+/* { dg-final-use-not-autofdo { scan-ipa-dump \"Transformation done: mod power of 2\" \"profile\" } } */\n /* This is part of code checking that n is power of 2, so we are sure that the transformation\n    didn't get optimized out.  */\n /* { dg-final-use-not-autofdo { scan-tree-dump \"n_\\[0-9\\]* \\\\+ (4294967295|0x0*ffffffff)\" \"optimized\"} } */"}, {"sha": "60953d09b15900cf53656f40034876e86f829b1d", "filename": "gcc/testsuite/gcc.dg/tree-prof/val-prof-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f87c8dae2a7d4447bef7686c92d8e896edabe6a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fval-prof-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f87c8dae2a7d4447bef7686c92d8e896edabe6a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fval-prof-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fval-prof-3.c?ref=7f87c8dae2a7d4447bef7686c92d8e896edabe6a", "patch": "@@ -25,7 +25,7 @@ main ()\n   return 0;\n }\n /* autofdo does not do value profiling so far */\n-/* { dg-final-use-not-autofdo { scan-ipa-dump \"Mod subtract transformation on insn\" \"profile\" } } */\n+/* { dg-final-use-not-autofdo { scan-ipa-dump \"Transformation done: mod subtract\" \"profile\" } } */\n /* This is part of code checking that n is greater than the divisor so we are sure that it\n    didn't get optimized out.  */\n /* { dg-final-use-not-autofdo { scan-tree-dump \"if \\\\(_\\[0-9\\]* \\\\< n_\\[0-9\\]*\" \"optimized\"} } */"}, {"sha": "50ae2de792ac8e61f484e01e328873d1b9ed7475", "filename": "gcc/testsuite/gcc.dg/tree-prof/val-prof-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f87c8dae2a7d4447bef7686c92d8e896edabe6a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fval-prof-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f87c8dae2a7d4447bef7686c92d8e896edabe6a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fval-prof-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fval-prof-4.c?ref=7f87c8dae2a7d4447bef7686c92d8e896edabe6a", "patch": "@@ -25,7 +25,7 @@ main ()\n   return 0;\n }\n /* autofdo does not do value profiling so far */\n-/* { dg-final-use-not-autofdo { scan-ipa-dump \"Mod subtract transformation on insn\" \"profile\" } } */\n+/* { dg-final-use-not-autofdo { scan-ipa-dump \"Transformation done: mod subtract\" \"profile\" } } */\n /* This is part of code checking that n is greater than the divisor so we are sure that it\n    didn't get optimized out.  */\n /* { dg-final-use-not-autofdo { scan-tree-dump \"if \\\\(n_\\[0-9\\]* \\\\>\" \"optimized\"} } */"}, {"sha": "80eb3205a4f7c1b9422c2c8af67bd45cde5e97a2", "filename": "gcc/testsuite/gcc.dg/tree-prof/val-prof-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f87c8dae2a7d4447bef7686c92d8e896edabe6a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fval-prof-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f87c8dae2a7d4447bef7686c92d8e896edabe6a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fval-prof-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fval-prof-5.c?ref=7f87c8dae2a7d4447bef7686c92d8e896edabe6a", "patch": "@@ -13,5 +13,5 @@ main()\n \treturn 0;\n }\n /* autofdo does not do value profiling so far */\n-/* { dg-final-use-not-autofdo { scan-ipa-dump \"Div.mod by constant b.*=997 transformation on insn\" \"profile\" } } */\n+/* { dg-final-use-not-autofdo { scan-ipa-dump \"Transformation done: div.mod by constant 997\" \"profile\" } } */\n /* { dg-final-use { scan-tree-dump-not \"Invalid sum\" \"optimized\"} } */"}, {"sha": "18b2b2590acf47a7e139639cbab905ac2fee66b3", "filename": "gcc/testsuite/gcc.dg/tree-prof/val-prof-7.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f87c8dae2a7d4447bef7686c92d8e896edabe6a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fval-prof-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f87c8dae2a7d4447bef7686c92d8e896edabe6a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fval-prof-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fval-prof-7.c?ref=7f87c8dae2a7d4447bef7686c92d8e896edabe6a", "patch": "@@ -65,18 +65,18 @@ int main() {\n   return 0;\n }\n \n-/* { dg-final-use-not-autofdo { scan-ipa-dump \"Single value 8 stringop transformation on __builtin_memcpy\" \"profile\" } } */\n-/* { dg-final-use-not-autofdo { scan-ipa-dump \"Single value 55 stringop transformation on __builtin_memcpy\" \"profile\" } } */\n-/* { dg-final-use-not-autofdo { scan-ipa-dump-times \"Single value 32 stringop transformation on __builtin_memcpy\" 0 \"profile\" } } */\n+/* { dg-final-use-not-autofdo { scan-ipa-dump \"Transformation done: single value 8 stringop for BUILT_IN_MEMCPY\" \"profile\" } } */\n+/* { dg-final-use-not-autofdo { scan-ipa-dump \"Transformation done: single value 55 stringop for BUILT_IN_MEMCPY\" \"profile\" } } */\n+/* { dg-final-use-not-autofdo { scan-ipa-dump-times \"Transformation done: single value 32 stringop for BUILT_IN_MEMCPY\" 0 \"profile\" } } */\n \n-/* { dg-final-use-not-autofdo { scan-ipa-dump \"Single value 8 stringop transformation on __builtin_mempcpy\" \"profile\" } } */\n-/* { dg-final-use-not-autofdo { scan-ipa-dump \"Single value 55 stringop transformation on __builtin_mempcpy\" \"profile\" } } */\n-/* { dg-final-use-not-autofdo { scan-ipa-dump-times \"Single value 32 stringop transformation on __builtin_mempcpy\" 0 \"profile\" } } */\n+/* { dg-final-use-not-autofdo { scan-ipa-dump \"Transformation done: single value 8 stringop for BUILT_IN_MEMPCPY\" \"profile\" } } */\n+/* { dg-final-use-not-autofdo { scan-ipa-dump \"Transformation done: single value 55 stringop for BUILT_IN_MEMPCPY\" \"profile\" } } */\n+/* { dg-final-use-not-autofdo { scan-ipa-dump-times \"Transformation done: single value 32 stringop for BUILT_IN_MEMPCPY\" 0 \"profile\" } } */\n \n-/* { dg-final-use-not-autofdo { scan-ipa-dump \"Single value 8 stringop transformation on __builtin_memset\" \"profile\" } } */\n-/* { dg-final-use-not-autofdo { scan-ipa-dump \"Single value 55 stringop transformation on __builtin_memset\" \"profile\" } } */\n-/* { dg-final-use-not-autofdo { scan-ipa-dump-times \"Single value 32 stringop transformation on __builtin_memset\" 0 \"profile\" } } */\n+/* { dg-final-use-not-autofdo { scan-ipa-dump \"Transformation done: single value 8 stringop for BUILT_IN_MEMSET\" \"profile\" } } */\n+/* { dg-final-use-not-autofdo { scan-ipa-dump \"Transformation done: single value 55 stringop for BUILT_IN_MEMSET\" \"profile\" } } */\n+/* { dg-final-use-not-autofdo { scan-ipa-dump-times \"Transformation done: single value 32 stringop for BUILT_IN_MEMSET\" 0 \"profile\" } } */\n \n-/* { dg-final-use-not-autofdo { scan-ipa-dump \"Single value 8 stringop transformation on __builtin_memmove\" \"profile\" } } */\n-/* { dg-final-use-not-autofdo { scan-ipa-dump \"Single value 55 stringop transformation on __builtin_memmove\" \"profile\" } } */\n-/* { dg-final-use-not-autofdo { scan-ipa-dump-times \"Single value 32 stringop transformation on __builtin_memmove\" 0 \"profile\" } } */\n+/* { dg-final-use-not-autofdo { scan-ipa-dump \"Transformation done: single value 8 stringop for BUILT_IN_MEMMOVE\" \"profile\" } } */\n+/* { dg-final-use-not-autofdo { scan-ipa-dump \"Transformation done: single value 55 stringop for BUILT_IN_MEMMOVE\" \"profile\" } } */\n+/* { dg-final-use-not-autofdo { scan-ipa-dump-times \"Transformation done: single value 32 stringop for BUILT_IN_MEMMOVE\" 0 \"profile\" } } */"}, {"sha": "29489e0f85f7ffd3f514a1d8e6d5c42c22286947", "filename": "gcc/value-prof.c", "status": "modified", "additions": 9, "deletions": 20, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f87c8dae2a7d4447bef7686c92d8e896edabe6a/gcc%2Fvalue-prof.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f87c8dae2a7d4447bef7686c92d8e896edabe6a/gcc%2Fvalue-prof.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-prof.c?ref=7f87c8dae2a7d4447bef7686c92d8e896edabe6a", "patch": "@@ -821,12 +821,9 @@ gimple_divmod_fixed_value_transform (gimple_stmt_iterator *si)\n \n   if (dump_file)\n     {\n-      fprintf (dump_file, \"Div/mod by constant \");\n-      print_generic_expr (dump_file, value, TDF_SLIM);\n-      fprintf (dump_file, \"=\");\n+      fprintf (dump_file, \"Transformation done: div/mod by constant \");\n       print_generic_expr (dump_file, tree_val, TDF_SLIM);\n-      fprintf (dump_file, \" transformation on insn \");\n-      print_gimple_stmt (dump_file, stmt, 0, TDF_SLIM);\n+      fprintf (dump_file, \"\\n\");\n     }\n \n   gimple_assign_set_rhs_from_tree (si, result);\n@@ -956,18 +953,15 @@ gimple_mod_pow2_value_transform (gimple_stmt_iterator *si)\n       || optimize_bb_for_size_p (gimple_bb (stmt)))\n     return false;\n \n-  if (dump_file)\n-    {\n-      fprintf (dump_file, \"Mod power of 2 transformation on insn \");\n-      print_gimple_stmt (dump_file, stmt, 0, TDF_SLIM);\n-    }\n-\n   /* Compute probability of taking the optimal path.  */\n   all = count + wrong_values;\n \n   if (check_counter (stmt, \"pow2\", &count, &all, gimple_bb (stmt)->count))\n     return false;\n \n+  if (dump_file)\n+    fprintf (dump_file, \"Transformation done: mod power of 2\\n\");\n+\n   if (all > 0)\n     prob = profile_probability::probability_in_gcov_type (count, all);\n   else\n@@ -1151,10 +1145,7 @@ gimple_mod_subtract_transform (gimple_stmt_iterator *si)\n \n   gimple_remove_histogram_value (cfun, stmt, histogram);\n   if (dump_file)\n-    {\n-      fprintf (dump_file, \"Mod subtract transformation on insn \");\n-      print_gimple_stmt (dump_file, stmt, 0, TDF_SLIM);\n-    }\n+    fprintf (dump_file, \"Transformation done: mod subtract\\n\");\n \n   /* Compute probability of taking the optimal path(s).  */\n   if (all > 0)\n@@ -1742,11 +1733,9 @@ gimple_stringops_transform (gimple_stmt_iterator *gsi)\n     }\n \n   if (dump_file)\n-    {\n-      fprintf (dump_file, \"Single value %i stringop transformation on \",\n-\t       (int)val);\n-      print_gimple_stmt (dump_file, stmt, 0, TDF_SLIM);\n-    }\n+    fprintf (dump_file,\n+\t     \"Transformation done: single value %i stringop for %s\\n\",\n+\t     (int)val, built_in_names[(int)fcode]);\n \n   gimple_stringop_fixed_value (stmt, tree_val, prob, count, all);\n "}]}