{"sha": "d5a10cf069a2f84e5b24a22e1eecc91918ea8875", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDVhMTBjZjA2OWEyZjg0ZTViMjRhMjJlMWVlY2M5MTkxOGVhODg3NQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2004-06-07T15:54:15Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2004-06-07T15:54:15Z"}, "message": "re PR c++/15337 (sizeof on incomplete type diagnostic)\n\n\tPR c++/15337\n\t* error.c (c_sizeof_or_alignof_type): Use more detailed error\n\tmessage.\n\n\tPR c++/15766\n\t* parser.c (cp_parser_iteration_statement): Fix typo in error\n\tmessage.\n\n\tPR c++/14777\n\t* pt.c (tsubst_default_argument): Do not defer access checks\n\twhile substituting into the default argument.\n\n\tPR c++/15554\n\t* pt.c (tsubst_copy): Do not try to substitute for an enumeration\n\tconstant in a non-dependent context.\n\n\tPR c++/15057\n\t* except.c (build_throw): Ensure that temp_expr has been\n\tinitialized.\n\n\tPR c++/15337\n\t* g++.dg/expr/sizeof3.C: New test.\n\n\tPR c++/14777\n\t* g++.dg/template/access14.C: New test.\n\n\tPR c++/15554\n\t* g++.dg/template/enum1.C: New test.\n\n\tPR c++/15057\n\t* g++.dg/eh/throw1.C: New test.\n\nFrom-SVN: r82693", "tree": {"sha": "576e0ec637de9afd595c03b47bb46c01da79d012", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/576e0ec637de9afd595c03b47bb46c01da79d012"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d5a10cf069a2f84e5b24a22e1eecc91918ea8875", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5a10cf069a2f84e5b24a22e1eecc91918ea8875", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5a10cf069a2f84e5b24a22e1eecc91918ea8875", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5a10cf069a2f84e5b24a22e1eecc91918ea8875/comments", "author": null, "committer": null, "parents": [{"sha": "0ab80019b6aadd0fb427920d38428db7ed1ccbf1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ab80019b6aadd0fb427920d38428db7ed1ccbf1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ab80019b6aadd0fb427920d38428db7ed1ccbf1"}], "stats": {"total": 95, "additions": 84, "deletions": 11}, "files": [{"sha": "200b595cdef6ea24320fd807fca967295aa2e54a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5a10cf069a2f84e5b24a22e1eecc91918ea8875/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5a10cf069a2f84e5b24a22e1eecc91918ea8875/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d5a10cf069a2f84e5b24a22e1eecc91918ea8875", "patch": "@@ -1,3 +1,9 @@\n+2004-06-07  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/15337\n+\t* error.c (c_sizeof_or_alignof_type): Use more detailed error\n+\tmessage.\n+\n 2004-06-06  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* config.in: Regenerate."}, {"sha": "89bc80e93536a3d5ce3aec7bb0f71d7eee6b3f09", "filename": "gcc/c-common.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5a10cf069a2f84e5b24a22e1eecc91918ea8875/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5a10cf069a2f84e5b24a22e1eecc91918ea8875/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=d5a10cf069a2f84e5b24a22e1eecc91918ea8875", "patch": "@@ -3060,7 +3060,8 @@ c_sizeof_or_alignof_type (tree type, enum tree_code op, int complain)\n   else if (!COMPLETE_TYPE_P (type))\n     {\n       if (complain)\n-\terror (\"invalid application of `%s' to an incomplete type\", op_name);\n+\terror (\"invalid application of `%s' to incomplete type `%T' \", \n+\t       op_name, type);\n       value = size_zero_node;\n     }\n   else"}, {"sha": "6dfe64a1fdee3932e5a3fed86fc4006e26fb1e4f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5a10cf069a2f84e5b24a22e1eecc91918ea8875/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5a10cf069a2f84e5b24a22e1eecc91918ea8875/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d5a10cf069a2f84e5b24a22e1eecc91918ea8875", "patch": "@@ -1,3 +1,21 @@\n+2004-06-07  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/15766\n+\t* parser.c (cp_parser_iteration_statement): Fix typo in error\n+\tmessage.\n+\n+\tPR c++/14777\n+\t* pt.c (tsubst_default_argument): Do not defer access checks\n+\twhile substituting into the default argument.\n+\n+\tPR c++/15554\n+\t* pt.c (tsubst_copy): Do not try to substitute for an enumeration\n+\tconstant in a non-dependent context. \n+\t\n+\tPR c++/15057\n+\t* except.c (build_throw): Ensure that temp_expr has been\n+\tinitialized.\n+\n 2004-06-06  Roger Sayle  <roger@eyesopen.com>\n \n \t* cp/cp-tree.h (lvalue_or_else): Add function prototype."}, {"sha": "69813d3ac7bf84b4bea14eced4629371669f3043", "filename": "gcc/cp/except.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5a10cf069a2f84e5b24a22e1eecc91918ea8875/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5a10cf069a2f84e5b24a22e1eecc91918ea8875/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=d5a10cf069a2f84e5b24a22e1eecc91918ea8875", "patch": "@@ -684,6 +684,7 @@ build_throw (tree exp)\n          because it will only return false in cases where elided is true,\n          and therefore we don't need to work around the failure to\n          preevaluate.  */\n+      temp_expr = NULL_TREE;\n       stabilize_init (exp, &temp_expr);\n \n       if (elided)"}, {"sha": "d094d306ee8c7267e634415e563eb0d1bad0b190", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5a10cf069a2f84e5b24a22e1eecc91918ea8875/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5a10cf069a2f84e5b24a22e1eecc91918ea8875/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=d5a10cf069a2f84e5b24a22e1eecc91918ea8875", "patch": "@@ -6138,8 +6138,8 @@ cp_parser_iteration_statement (cp_parser* parser)\n \t  expression = cp_parser_expression (parser);\n \tfinish_for_expr (expression, statement);\n \t/* Look for the `)'.  */\n-\tcp_parser_require (parser, CPP_CLOSE_PAREN, \"`;'\");\n-\n+\tcp_parser_require (parser, CPP_CLOSE_PAREN, \"`)'\");\n+\t\n \t/* Parse the body of the for-statement.  */\n \tparser->in_iteration_statement_p = true;\n \tcp_parser_already_scoped_statement (parser);"}, {"sha": "8e29e244f71afdc10a69562ed40d40e5ebe78193", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5a10cf069a2f84e5b24a22e1eecc91918ea8875/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5a10cf069a2f84e5b24a22e1eecc91918ea8875/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=d5a10cf069a2f84e5b24a22e1eecc91918ea8875", "patch": "@@ -5895,22 +5895,18 @@ tsubst_default_argument (tree fn, tree type, tree arg)\n        };\n      \n      we must be careful to do name lookup in the scope of S<T>,\n-     rather than in the current class.\n-\n-     ??? current_class_type affects a lot more than name lookup.  This is\n-     very fragile.  Fortunately, it will go away when we do 2-phase name\n-     binding properly.  */\n-\n-  /* FN is already the desired FUNCTION_DECL.  */\n+     rather than in the current class.  */\n   push_access_scope (fn);\n   /* The default argument expression should not be considered to be\n      within the scope of FN.  Since push_access_scope sets\n      current_function_decl, we must explicitly clear it here.  */\n   current_function_decl = NULL_TREE;\n \n+  push_deferring_access_checks(dk_no_deferred);\n   arg = tsubst_expr (arg, DECL_TI_ARGS (fn),\n \t\t     tf_error | tf_warning, NULL_TREE);\n-  \n+  pop_deferring_access_checks();\n+\n   pop_access_scope (fn);\n \n   /* Make sure the default argument is reasonable.  */\n@@ -7423,6 +7419,9 @@ tsubst_copy (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t   enumerators.  */\n \tif (DECL_NAMESPACE_SCOPE_P (t))\n \t  return t;\n+\t/* If ARGS is NULL, then T is known to be non-dependent.  */\n+\tif (args == NULL_TREE)\n+\t  return t;\n \n \t/* Unfortunately, we cannot just call lookup_name here.\n \t   Consider:"}, {"sha": "3ffd9c264cbfabea9305373af722e8e44a38f9fd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5a10cf069a2f84e5b24a22e1eecc91918ea8875/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5a10cf069a2f84e5b24a22e1eecc91918ea8875/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d5a10cf069a2f84e5b24a22e1eecc91918ea8875", "patch": "@@ -1,3 +1,17 @@\n+2004-06-07  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/15337\n+\t* g++.dg/expr/sizeof3.C: New test.\n+\n+\tPR c++/14777\n+\t* g++.dg/template/access14.C: New test.\n+\n+\tPR c++/15554\n+\t* g++.dg/template/enum1.C: New test.\n+\n+\tPR c++/15057\n+\t* g++.dg/eh/throw1.C: New test.\n+\n 2004-06-07  David Ayers  <d.ayers@inode.at>\n \t    Ziemowit Laski  <zlaski@apple.com>\n "}, {"sha": "6a3cb2c35cae681eadc1114d6e9e50c24d4610f8", "filename": "gcc/testsuite/g++.dg/eh/throw1.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5a10cf069a2f84e5b24a22e1eecc91918ea8875/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fthrow1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5a10cf069a2f84e5b24a22e1eecc91918ea8875/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fthrow1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fthrow1.C?ref=d5a10cf069a2f84e5b24a22e1eecc91918ea8875", "patch": "@@ -0,0 +1,9 @@\n+class S  \n+{ \n+public: \n+  S(){} \n+};  \n+  \n+int foo(char* m1) {  \n+  throw (m1 ? S() : S()); \n+} "}, {"sha": "31338b0b18950070cabeaca9edf953131197493b", "filename": "gcc/testsuite/g++.dg/expr/sizeof3.C", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5a10cf069a2f84e5b24a22e1eecc91918ea8875/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fsizeof3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5a10cf069a2f84e5b24a22e1eecc91918ea8875/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fsizeof3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fsizeof3.C?ref=d5a10cf069a2f84e5b24a22e1eecc91918ea8875", "patch": "@@ -0,0 +1,4 @@\n+// PR c++/15337\n+\n+class CCC; \n+int main() { sizeof(CCC); return 0; } // { dg-error \".*CCC.*\" }"}, {"sha": "047f9258f2f8151dd71251ebde46eb238720023c", "filename": "gcc/testsuite/g++.dg/template/access14.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5a10cf069a2f84e5b24a22e1eecc91918ea8875/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Faccess14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5a10cf069a2f84e5b24a22e1eecc91918ea8875/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Faccess14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Faccess14.C?ref=d5a10cf069a2f84e5b24a22e1eecc91918ea8875", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/14777\n+\n+template <typename T>\n+struct B\n+{\n+protected:\n+  typedef int M;\n+};\n+\n+template <typename T>\n+struct A : B<T> {\n+  typedef typename B<T>::M N;\n+  A (int = N ());\n+};\n+\n+A<int> a = A<int> ();"}, {"sha": "eaeb12c9c4dbc505e970c4c630db7d3faebda59f", "filename": "gcc/testsuite/g++.dg/template/enum1.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5a10cf069a2f84e5b24a22e1eecc91918ea8875/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fenum1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5a10cf069a2f84e5b24a22e1eecc91918ea8875/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fenum1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fenum1.C?ref=d5a10cf069a2f84e5b24a22e1eecc91918ea8875", "patch": "@@ -0,0 +1,5 @@\n+// PR c++/15554\n+\n+template <int n> struct T1 { enum { N = 3 }; };\n+template <int n> struct T2 { enum { N = 3, N1 = T1<N>::N }; };\n+"}]}