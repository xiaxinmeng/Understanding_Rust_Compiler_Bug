{"sha": "66c1f88e8eef0f6e64ecc081ce967b45745662f8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjZjMWY4OGU4ZWVmMGY2ZTY0ZWNjMDgxY2U5NjdiNDU3NDU2NjJmOA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-05-18T05:34:36Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-05-18T05:34:36Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r1007", "tree": {"sha": "dfd6ff33a6556ccdb551983b0c2876947cde4d2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dfd6ff33a6556ccdb551983b0c2876947cde4d2f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/66c1f88e8eef0f6e64ecc081ce967b45745662f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66c1f88e8eef0f6e64ecc081ce967b45745662f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66c1f88e8eef0f6e64ecc081ce967b45745662f8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66c1f88e8eef0f6e64ecc081ce967b45745662f8/comments", "author": null, "committer": null, "parents": [{"sha": "93e3ba4f76f03707689b847c6b96b1b17c14a5f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93e3ba4f76f03707689b847c6b96b1b17c14a5f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93e3ba4f76f03707689b847c6b96b1b17c14a5f5"}], "stats": {"total": 6, "additions": 5, "deletions": 1}, "files": [{"sha": "2a02aa58f6ab6fddf2023cb6e35c6884bdd32e18", "filename": "gcc/expmed.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66c1f88e8eef0f6e64ecc081ce967b45745662f8/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66c1f88e8eef0f6e64ecc081ce967b45745662f8/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=66c1f88e8eef0f6e64ecc081ce967b45745662f8", "patch": "@@ -1961,7 +1961,11 @@ expand_mult (mode, op0, op1, target, unsignedp)\n \tconst_op1 = gen_rtx (CONST_INT, VOIDmode, CONST_DOUBLE_LOW (op1));\n     }\n \n-  if (GET_CODE (const_op1) == CONST_INT && ! mult_is_very_cheap && optimize)\n+  /* We used to test optimize here, on the grounds that it's better to\n+     produce a smaller program when -O is not used.\n+     But this causes such a terrible slowdown sometimes\n+     that it seems better to use synth_mult always.  */\n+  if (GET_CODE (const_op1) == CONST_INT && ! mult_is_very_cheap)\n     {\n       struct algorithm alg;\n       struct algorithm neg_alg;"}]}