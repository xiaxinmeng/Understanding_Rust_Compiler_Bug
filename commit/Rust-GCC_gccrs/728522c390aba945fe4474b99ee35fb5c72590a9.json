{"sha": "728522c390aba945fe4474b99ee35fb5c72590a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzI4NTIyYzM5MGFiYTk0NWZlNDQ3NGI5OWVlMzVmYjVjNzI1OTBhOQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2005-04-09T16:51:48Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-04-09T16:51:48Z"}, "message": "sched-int.h (haifa_insn_data): Remove blockage and units.\n\n\t* sched-int.h (haifa_insn_data): Remove blockage and units.\n\t(INSN_UNIT, INSN_BLOCKAGE, UNIT_BITS, BLOCKAGE_MASK,\n\tENCODE_BLOCKAGE, UNIT_BLOCKED, BLOCKAGE_RANGE,\n\tMIN_BLOCKAGE_COST, MAX_BLOCKAGE_COST): Remove.\n\nFrom-SVN: r97905", "tree": {"sha": "2f5f63585e2071d9a7b2da73307d6ae0810f635d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f5f63585e2071d9a7b2da73307d6ae0810f635d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/728522c390aba945fe4474b99ee35fb5c72590a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/728522c390aba945fe4474b99ee35fb5c72590a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/728522c390aba945fe4474b99ee35fb5c72590a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/728522c390aba945fe4474b99ee35fb5c72590a9/comments", "author": null, "committer": null, "parents": [{"sha": "f3b569ca7e724b2fc9b8393af5ede3ab9e8a46ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3b569ca7e724b2fc9b8393af5ede3ab9e8a46ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3b569ca7e724b2fc9b8393af5ede3ab9e8a46ea"}], "stats": {"total": 30, "additions": 5, "deletions": 25}, "files": [{"sha": "1211bc9f245fd1657ebd87d1ca7127cbdaa93d0b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/728522c390aba945fe4474b99ee35fb5c72590a9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/728522c390aba945fe4474b99ee35fb5c72590a9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=728522c390aba945fe4474b99ee35fb5c72590a9", "patch": "@@ -5,6 +5,11 @@\n \tconfig/alpha/alpha.c, config/arm/arm.c, config/m32r/m32r.h,\n \tconfig/rs6000/predicates.md: Fix comment typos.\n \n+\t* sched-int.h (haifa_insn_data): Remove blockage and units.\n+\t(INSN_UNIT, INSN_BLOCKAGE, UNIT_BITS, BLOCKAGE_MASK,\n+\tENCODE_BLOCKAGE, UNIT_BLOCKED, BLOCKAGE_RANGE,\n+\tMIN_BLOCKAGE_COST, MAX_BLOCKAGE_COST): Remove.\n+\n 2005-04-09  Jan Hubicka  <jh@suse.cz>\n \t    Steven Bosscher  <stevenb@suse.de>\n "}, {"sha": "7f3805ba5a6e81c843d31aa4e4b159a36214953a", "filename": "gcc/sched-int.h", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/728522c390aba945fe4474b99ee35fb5c72590a9/gcc%2Fsched-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/728522c390aba945fe4474b99ee35fb5c72590a9/gcc%2Fsched-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-int.h?ref=728522c390aba945fe4474b99ee35fb5c72590a9", "patch": "@@ -208,10 +208,6 @@ struct haifa_insn_data\n      the ready queue when its counter reaches zero.  */\n   int dep_count;\n \n-  /* An encoding of the blockage range function.  Both unit and range\n-     are coded.  This member is used only for old pipeline interface.  */\n-  unsigned int blockage;\n-\n   /* Number of instructions referring to this insn.  */\n   int ref_count;\n \n@@ -221,10 +217,6 @@ struct haifa_insn_data\n \n   short cost;\n \n-  /* An encoding of the function units used.  This member is used only\n-     for old pipeline interface.  */\n-  short units;\n-\n   /* This weight is an estimation of the insn's contribution to\n      register pressure.  */\n   short reg_weight;\n@@ -252,25 +244,8 @@ extern struct haifa_insn_data *h_i_d;\n #define INSN_PRIORITY(INSN)\t(h_i_d[INSN_UID (INSN)].priority)\n #define INSN_PRIORITY_KNOWN(INSN) (h_i_d[INSN_UID (INSN)].priority_known)\n #define INSN_COST(INSN)\t\t(h_i_d[INSN_UID (INSN)].cost)\n-#define INSN_UNIT(INSN)\t\t(h_i_d[INSN_UID (INSN)].units)\n #define INSN_REG_WEIGHT(INSN)\t(h_i_d[INSN_UID (INSN)].reg_weight)\n \n-#define INSN_BLOCKAGE(INSN)\t(h_i_d[INSN_UID (INSN)].blockage)\n-#define UNIT_BITS\t\t5\n-#define BLOCKAGE_MASK\t\t((1 << BLOCKAGE_BITS) - 1)\n-#define ENCODE_BLOCKAGE(U, R)\t\t\t\\\n-  (((U) << BLOCKAGE_BITS\t\t\t\\\n-    | MIN_BLOCKAGE_COST (R)) << BLOCKAGE_BITS\t\\\n-   | MAX_BLOCKAGE_COST (R))\n-#define UNIT_BLOCKED(B)\t\t((B) >> (2 * BLOCKAGE_BITS))\n-#define BLOCKAGE_RANGE(B)                                                \\\n-  (((((B) >> BLOCKAGE_BITS) & BLOCKAGE_MASK) << (HOST_BITS_PER_INT / 2)) \\\n-   | ((B) & BLOCKAGE_MASK))\n-\n-/* Encodings of the `<name>_unit_blockage_range' function.  */\n-#define MIN_BLOCKAGE_COST(R) ((R) >> (HOST_BITS_PER_INT / 2))\n-#define MAX_BLOCKAGE_COST(R) ((R) & ((1 << (HOST_BITS_PER_INT / 2)) - 1))\n-\n extern FILE *sched_dump;\n extern int sched_verbose;\n "}]}