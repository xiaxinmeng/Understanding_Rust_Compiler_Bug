{"sha": "b92e4dff0a767a4e39dac6a012e381816ee5937a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjkyZTRkZmYwYTc2N2E0ZTM5ZGFjNmEwMTJlMzgxODE2ZWU1OTM3YQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2017-06-22T14:31:16Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2017-06-22T14:31:16Z"}, "message": "runtime: rename _defer struct _panic field to panicStack\n    \n    The gc version of the _defer struct has a _panic field that has a\n    completely different meaning. We are going to want that bring that new\n    meaning into the gofrontend to improve panic reports with nested\n    panic calls. Simplify that by first renaming the existing _panic field.\n    \n    Reviewed-on: https://go-review.googlesource.com/46454\n\nFrom-SVN: r249558", "tree": {"sha": "4d196a18318efdb9dab742f2e751c6afe428ed4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d196a18318efdb9dab742f2e751c6afe428ed4c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b92e4dff0a767a4e39dac6a012e381816ee5937a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b92e4dff0a767a4e39dac6a012e381816ee5937a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b92e4dff0a767a4e39dac6a012e381816ee5937a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b92e4dff0a767a4e39dac6a012e381816ee5937a/comments", "author": null, "committer": null, "parents": [{"sha": "ed99905e1d89e84b74a07a55a46270d1f9f27991", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed99905e1d89e84b74a07a55a46270d1f9f27991", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed99905e1d89e84b74a07a55a46270d1f9f27991"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "8ce40175bb34077cc2f164001d881d4387aaab93", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b92e4dff0a767a4e39dac6a012e381816ee5937a/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b92e4dff0a767a4e39dac6a012e381816ee5937a/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=b92e4dff0a767a4e39dac6a012e381816ee5937a", "patch": "@@ -1,4 +1,4 @@\n-a81079a81b63714221674f07d13bedc768092f27\n+a459f1fdfe0bd365bf2def730e1529052c6487fd\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "bbd34b40131de18e46c8305c5939538ea39e9a93", "filename": "libgo/go/runtime/panic.go", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b92e4dff0a767a4e39dac6a012e381816ee5937a/libgo%2Fgo%2Fruntime%2Fpanic.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b92e4dff0a767a4e39dac6a012e381816ee5937a/libgo%2Fgo%2Fruntime%2Fpanic.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fpanic.go?ref=b92e4dff0a767a4e39dac6a012e381816ee5937a", "patch": "@@ -90,13 +90,13 @@ func throwinit() {\n // pfn is a C function pointer.\n // arg is a value to pass to pfn.\n func deferproc(frame *bool, pfn uintptr, arg unsafe.Pointer) {\n-\tn := newdefer()\n-\tn.frame = frame\n-\tn._panic = getg()._panic\n-\tn.pfn = pfn\n-\tn.arg = arg\n-\tn.retaddr = 0\n-\tn.makefunccanrecover = false\n+\td := newdefer()\n+\td.frame = frame\n+\td.panicStack = getg()._panic\n+\td.pfn = pfn\n+\td.arg = arg\n+\td.retaddr = 0\n+\td.makefunccanrecover = false\n }\n \n // Allocate a Defer, usually using per-P pool.\n@@ -502,7 +502,7 @@ func currentDefer() *_defer {\n \t// the panic stack. We do not want to recover it if that panic\n \t// was on the top of the panic stack when this function was\n \t// deferred.\n-\tif d._panic == gp._panic {\n+\tif d.panicStack == gp._panic {\n \t\treturn nil\n \t}\n \n@@ -731,7 +731,7 @@ func gorecover() interface{} {\n // function like recover.\n func deferredrecover() interface{} {\n \tgp := getg()\n-\tif gp._defer == nil || gp._defer._panic != gp._panic {\n+\tif gp._defer == nil || gp._defer.panicStack != gp._panic {\n \t\treturn nil\n \t}\n \treturn gorecover()"}, {"sha": "f532a3b2ba9d1ee5bf78649cf72c1a916c4846e5", "filename": "libgo/go/runtime/runtime2.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b92e4dff0a767a4e39dac6a012e381816ee5937a/libgo%2Fgo%2Fruntime%2Fruntime2.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b92e4dff0a767a4e39dac6a012e381816ee5937a/libgo%2Fgo%2Fruntime%2Fruntime2.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fruntime2.go?ref=b92e4dff0a767a4e39dac6a012e381816ee5937a", "patch": "@@ -698,7 +698,7 @@ type _defer struct {\n \t// deferred.  This function can not recover this value from\n \t// the panic stack.  This can happen if a deferred function\n \t// has a defer statement itself.\n-\t_panic *_panic\n+\tpanicStack *_panic\n \n \t// The function to call.\n \tpfn uintptr"}]}