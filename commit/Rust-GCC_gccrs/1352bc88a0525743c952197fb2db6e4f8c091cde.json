{"sha": "1352bc88a0525743c952197fb2db6e4f8c091cde", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTM1MmJjODhhMDUyNTc0M2M5NTIxOTdmYjJkYjZlNGY4YzA5MWNkZQ==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-11-18T10:06:03Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-12-05T08:43:20Z"}, "message": "Darwin : Update libtool and dependencies for Darwin20 [PR97865]\n\nThe change in major version (and the increment from Darwin19 to 20)\ncaused libtool tests to fail which resulted in incorrect build settings\nfor shared libraries.\n\nWe take this opportunity to sort out the shared undefined symbols state\nrather than propagating the current unsound behaviour into a new rev.\n\nThis change means that we default to the case that missing symbols are\nconsidered an error, and if one wants to allow this intentionally, the\nconfiuration for that case should be set appropriately.\n\nThree existing cases need undefined dynamic lookup:\n libitm, where there is already a configuration mechanism to add the\n         flags.\n libcc1, where we add simple configuration to add the flags for Darwin.\n libsanitizer, where we can add to the existing extra flags.\n\nlibcc1/ChangeLog:\n\n\tPR target/97865\n\t* Makefile.am: Add dynamic_lookup to LD flags for Darwin.\n\t* configure.ac: Test for Darwin host and set a flag.\n\t* Makefile.in: Regenerate.\n\t* configure: Regenerate.\n\nlibitm/ChangeLog:\n\n\tPR target/97865\n\t* configure.tgt: Add dynamic_lookup to XLDFLAGS for Darwin.\n\t* configure: Regenerate.\n\nlibsanitizer/ChangeLog:\n\n\tPR target/97865\n\t* configure.tgt: Add dynamic_lookup to EXTRA_CXXFLAGS for\n\tDarwin.\n\t* configure: Regenerate.\n\nChangeLog:\n\n\tPR target/97865\n\t* libtool.m4: Update handling of Darwin platform link flags\n\tfor Darwin20.\n\ngcc/ChangeLog:\n\n\tPR target/97865\n\t* configure: Regenerate.\n\nlibatomic/ChangeLog:\n\n\tPR target/97865\n\t* configure: Regenerate.\n\nlibbacktrace/ChangeLog:\n\n\tPR target/97865\n\t* configure: Regenerate.\n\nlibffi/ChangeLog:\n\n\tPR target/97865\n\t* configure: Regenerate.\n\nlibgfortran/ChangeLog:\n\n\tPR target/97865\n\t* configure: Regenerate.\n\nlibgomp/ChangeLog:\n\n\tPR target/97865\n\t* configure: Regenerate.\n\nlibhsail-rt/ChangeLog:\n\n\tPR target/97865\n\t* configure: Regenerate.\n\nlibobjc/ChangeLog:\n\n\tPR target/97865\n\t* configure: Regenerate.\n\nlibphobos/ChangeLog:\n\n\tPR target/97865\n\t* configure: Regenerate.\n\nlibquadmath/ChangeLog:\n\n\tPR target/97865\n\t* configure: Regenerate.\n\nlibssp/ChangeLog:\n\n\tPR target/97865\n\t* configure: Regenerate.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR target/97865\n\t* configure: Regenerate.\n\nlibvtv/ChangeLog:\n\n\tPR target/97865\n\t* configure: Regenerate.\n\nzlib/ChangeLog:\n\n\tPR target/97865\n\t* configure: Regenerate.", "tree": {"sha": "06207e8cc7971e67177cda013cacc9a764abfe3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/06207e8cc7971e67177cda013cacc9a764abfe3c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1352bc88a0525743c952197fb2db6e4f8c091cde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1352bc88a0525743c952197fb2db6e4f8c091cde", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1352bc88a0525743c952197fb2db6e4f8c091cde", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1352bc88a0525743c952197fb2db6e4f8c091cde/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e2ae3ee285a57455d5a23bd352a68c289130186", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e2ae3ee285a57455d5a23bd352a68c289130186", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e2ae3ee285a57455d5a23bd352a68c289130186"}], "stats": {"total": 676, "additions": 376, "deletions": 300}, "files": [{"sha": "9a27e459f14f5a99d5516c778ec8abd557fb59d0", "filename": "gcc/configure", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1352bc88a0525743c952197fb2db6e4f8c091cde/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1352bc88a0525743c952197fb2db6e4f8c091cde/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=1352bc88a0525743c952197fb2db6e4f8c091cde", "patch": "@@ -15654,23 +15654,25 @@ _LT_EOF\n fi\n { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $lt_cv_ld_force_load\" >&5\n $as_echo \"$lt_cv_ld_force_load\" >&6; }\n-    case $host_os in\n-    rhapsody* | darwin1.[012])\n+    # Allow for Darwin 4-7 (macOS 10.0-10.3) although these are not expect to\n+    # build without first building modern cctools / linker.\n+    case $host_cpu-$host_os in\n+    *-rhapsody* | *-darwin1.[012])\n       _lt_dar_allow_undefined='${wl}-undefined ${wl}suppress' ;;\n-    darwin1.*)\n+    *-darwin1.*)\n       _lt_dar_allow_undefined='${wl}-flat_namespace ${wl}-undefined ${wl}suppress' ;;\n-    darwin*) # darwin 5.x on\n-      # if running on 10.5 or later, the deployment target defaults\n-      # to the OS version, if on x86, and 10.4, the deployment\n-      # target defaults to 10.4. Don't you love it?\n-      case ${MACOSX_DEPLOYMENT_TARGET-10.0},$host in\n-\t10.0,*86*-darwin8*|10.0,*-darwin[91]*)\n-\t  _lt_dar_allow_undefined='${wl}-undefined ${wl}dynamic_lookup' ;;\n+    *-darwin*)\n+      # darwin 5.x (macOS 10.1) onwards we only need to adjust when the\n+      # deployment target is forced to an earlier version.\n+      case ${MACOSX_DEPLOYMENT_TARGET-UNSET},$host in\n+\tUNSET,*-darwin[89]*|UNSET,*-darwin[12][0123456789]*)\n+\t  ;;\n \t10.[012][,.]*)\n-\t  _lt_dar_allow_undefined='${wl}-flat_namespace ${wl}-undefined ${wl}suppress' ;;\n-\t10.*)\n-\t  _lt_dar_allow_undefined='${wl}-undefined ${wl}dynamic_lookup' ;;\n-      esac\n+\t  _lt_dar_allow_undefined='${wl}-flat_namespace ${wl}-undefined ${wl}suppress'\n+\t  ;;\n+\t*)\n+\t  ;;\n+     esac\n     ;;\n   esac\n     if test \"$lt_cv_apple_cc_single_mod\" = \"yes\"; then\n@@ -19184,7 +19186,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 19187 \"configure\"\n+#line 19189 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -19290,7 +19292,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 19293 \"configure\"\n+#line 19295 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H"}, {"sha": "50fe5480b78c516531bdb000c748a2f16f3e1115", "filename": "libatomic/configure", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1352bc88a0525743c952197fb2db6e4f8c091cde/libatomic%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1352bc88a0525743c952197fb2db6e4f8c091cde/libatomic%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2Fconfigure?ref=1352bc88a0525743c952197fb2db6e4f8c091cde", "patch": "@@ -7590,23 +7590,25 @@ _LT_EOF\n fi\n { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $lt_cv_ld_force_load\" >&5\n $as_echo \"$lt_cv_ld_force_load\" >&6; }\n-    case $host_os in\n-    rhapsody* | darwin1.[012])\n+    # Allow for Darwin 4-7 (macOS 10.0-10.3) although these are not expect to\n+    # build without first building modern cctools / linker.\n+    case $host_cpu-$host_os in\n+    *-rhapsody* | *-darwin1.[012])\n       _lt_dar_allow_undefined='${wl}-undefined ${wl}suppress' ;;\n-    darwin1.*)\n+    *-darwin1.*)\n       _lt_dar_allow_undefined='${wl}-flat_namespace ${wl}-undefined ${wl}suppress' ;;\n-    darwin*) # darwin 5.x on\n-      # if running on 10.5 or later, the deployment target defaults\n-      # to the OS version, if on x86, and 10.4, the deployment\n-      # target defaults to 10.4. Don't you love it?\n-      case ${MACOSX_DEPLOYMENT_TARGET-10.0},$host in\n-\t10.0,*86*-darwin8*|10.0,*-darwin[91]*)\n-\t  _lt_dar_allow_undefined='${wl}-undefined ${wl}dynamic_lookup' ;;\n+    *-darwin*)\n+      # darwin 5.x (macOS 10.1) onwards we only need to adjust when the\n+      # deployment target is forced to an earlier version.\n+      case ${MACOSX_DEPLOYMENT_TARGET-UNSET},$host in\n+\tUNSET,*-darwin[89]*|UNSET,*-darwin[12][0123456789]*)\n+\t  ;;\n \t10.[012][,.]*)\n-\t  _lt_dar_allow_undefined='${wl}-flat_namespace ${wl}-undefined ${wl}suppress' ;;\n-\t10.*)\n-\t  _lt_dar_allow_undefined='${wl}-undefined ${wl}dynamic_lookup' ;;\n-      esac\n+\t  _lt_dar_allow_undefined='${wl}-flat_namespace ${wl}-undefined ${wl}suppress'\n+\t  ;;\n+\t*)\n+\t  ;;\n+     esac\n     ;;\n   esac\n     if test \"$lt_cv_apple_cc_single_mod\" = \"yes\"; then\n@@ -11388,7 +11390,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11391 \"configure\"\n+#line 11393 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11494,7 +11496,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11497 \"configure\"\n+#line 11499 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H"}, {"sha": "665adef7566f1dc6d785678470abe6a41ba3479d", "filename": "libbacktrace/configure", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1352bc88a0525743c952197fb2db6e4f8c091cde/libbacktrace%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1352bc88a0525743c952197fb2db6e4f8c091cde/libbacktrace%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2Fconfigure?ref=1352bc88a0525743c952197fb2db6e4f8c091cde", "patch": "@@ -7986,23 +7986,25 @@ _LT_EOF\n fi\n { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $lt_cv_ld_force_load\" >&5\n $as_echo \"$lt_cv_ld_force_load\" >&6; }\n-    case $host_os in\n-    rhapsody* | darwin1.[012])\n+    # Allow for Darwin 4-7 (macOS 10.0-10.3) although these are not expect to\n+    # build without first building modern cctools / linker.\n+    case $host_cpu-$host_os in\n+    *-rhapsody* | *-darwin1.[012])\n       _lt_dar_allow_undefined='${wl}-undefined ${wl}suppress' ;;\n-    darwin1.*)\n+    *-darwin1.*)\n       _lt_dar_allow_undefined='${wl}-flat_namespace ${wl}-undefined ${wl}suppress' ;;\n-    darwin*) # darwin 5.x on\n-      # if running on 10.5 or later, the deployment target defaults\n-      # to the OS version, if on x86, and 10.4, the deployment\n-      # target defaults to 10.4. Don't you love it?\n-      case ${MACOSX_DEPLOYMENT_TARGET-10.0},$host in\n-\t10.0,*86*-darwin8*|10.0,*-darwin[91]*)\n-\t  _lt_dar_allow_undefined='${wl}-undefined ${wl}dynamic_lookup' ;;\n+    *-darwin*)\n+      # darwin 5.x (macOS 10.1) onwards we only need to adjust when the\n+      # deployment target is forced to an earlier version.\n+      case ${MACOSX_DEPLOYMENT_TARGET-UNSET},$host in\n+\tUNSET,*-darwin[89]*|UNSET,*-darwin[12][0123456789]*)\n+\t  ;;\n \t10.[012][,.]*)\n-\t  _lt_dar_allow_undefined='${wl}-flat_namespace ${wl}-undefined ${wl}suppress' ;;\n-\t10.*)\n-\t  _lt_dar_allow_undefined='${wl}-undefined ${wl}dynamic_lookup' ;;\n-      esac\n+\t  _lt_dar_allow_undefined='${wl}-flat_namespace ${wl}-undefined ${wl}suppress'\n+\t  ;;\n+\t*)\n+\t  ;;\n+     esac\n     ;;\n   esac\n     if test \"$lt_cv_apple_cc_single_mod\" = \"yes\"; then\n@@ -11517,7 +11519,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11520 \"configure\"\n+#line 11522 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11623,7 +11625,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11626 \"configure\"\n+#line 11628 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H"}, {"sha": "173b84f9cdb4a9a768ce915d1d5175bdcc04ee1e", "filename": "libcc1/Makefile.am", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1352bc88a0525743c952197fb2db6e4f8c091cde/libcc1%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1352bc88a0525743c952197fb2db6e4f8c091cde/libcc1%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2FMakefile.am?ref=1352bc88a0525743c952197fb2db6e4f8c091cde", "patch": "@@ -25,6 +25,9 @@ CPPFLAGS_FOR_C_FAMILY = -I $(srcdir)/../gcc/c-family \\\n CPPFLAGS_FOR_C = $(CPPFLAGS_FOR_C_FAMILY) -I $(srcdir)/../gcc/c\n CPPFLAGS_FOR_CXX = $(CPPFLAGS_FOR_C_FAMILY) -I $(srcdir)/../gcc/cp\n AM_CXXFLAGS = $(WARN_FLAGS) $(WERROR) $(visibility) $(CET_HOST_FLAGS)\n+if DARWIN_DYNAMIC_LOOKUP\n+AM_CXXFLAGS += -Wl,-undefined,dynamic_lookup\n+endif\n override CXXFLAGS := $(filter-out -fsanitize=address,$(CXXFLAGS))\n override LDFLAGS := $(filter-out -fsanitize=address,$(LDFLAGS))\n # Can be simplified when libiberty becomes a normal convenience library."}, {"sha": "753d435c9cbe728e7383ca19fae51d1728996f77", "filename": "libcc1/Makefile.in", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1352bc88a0525743c952197fb2db6e4f8c091cde/libcc1%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1352bc88a0525743c952197fb2db6e4f8c091cde/libcc1%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2FMakefile.in?ref=1352bc88a0525743c952197fb2db6e4f8c091cde", "patch": "@@ -89,10 +89,13 @@ POST_UNINSTALL = :\n build_triplet = @build@\n host_triplet = @host@\n target_triplet = @target@\n+@DARWIN_DYNAMIC_LOOKUP_TRUE@am__append_1 = -Wl,-undefined,dynamic_lookup\n subdir = .\n ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n am__aclocal_m4_deps = $(top_srcdir)/../config/acx.m4 \\\n+\t$(top_srcdir)/../config/cet.m4 \\\n \t$(top_srcdir)/../config/depstand.m4 \\\n+\t$(top_srcdir)/../config/enable.m4 \\\n \t$(top_srcdir)/../config/gcc-plugin.m4 \\\n \t$(top_srcdir)/../config/lead-dot.m4 \\\n \t$(top_srcdir)/../config/override.m4 \\\n@@ -383,7 +386,8 @@ CPPFLAGS_FOR_C_FAMILY = -I $(srcdir)/../gcc/c-family \\\n \n CPPFLAGS_FOR_C = $(CPPFLAGS_FOR_C_FAMILY) -I $(srcdir)/../gcc/c\n CPPFLAGS_FOR_CXX = $(CPPFLAGS_FOR_C_FAMILY) -I $(srcdir)/../gcc/cp\n-AM_CXXFLAGS = $(WARN_FLAGS) $(WERROR) $(visibility) $(CET_HOST_FLAGS)\n+AM_CXXFLAGS = $(WARN_FLAGS) $(WERROR) $(visibility) $(CET_HOST_FLAGS) \\\n+\t$(am__append_1)\n # Can be simplified when libiberty becomes a normal convenience library.\n libiberty_normal = ../libiberty/libiberty.a\n libiberty_noasan = ../libiberty/noasan/libiberty.a"}, {"sha": "d3eedfec9b8f70a8115f97e3289ecfa4d52b9d0e", "filename": "libcc1/configure", "status": "modified", "additions": 37, "deletions": 16, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1352bc88a0525743c952197fb2db6e4f8c091cde/libcc1%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1352bc88a0525743c952197fb2db6e4f8c091cde/libcc1%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2Fconfigure?ref=1352bc88a0525743c952197fb2db6e4f8c091cde", "patch": "@@ -635,6 +635,8 @@ LTLIBOBJS\n LIBOBJS\n ENABLE_PLUGIN_FALSE\n ENABLE_PLUGIN_TRUE\n+DARWIN_DYNAMIC_LOOKUP_FALSE\n+DARWIN_DYNAMIC_LOOKUP_TRUE\n libsuffix\n GMPINC\n WERROR\n@@ -7253,23 +7255,25 @@ _LT_EOF\n fi\n { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $lt_cv_ld_force_load\" >&5\n $as_echo \"$lt_cv_ld_force_load\" >&6; }\n-    case $host_os in\n-    rhapsody* | darwin1.[012])\n+    # Allow for Darwin 4-7 (macOS 10.0-10.3) although these are not expect to\n+    # build without first building modern cctools / linker.\n+    case $host_cpu-$host_os in\n+    *-rhapsody* | *-darwin1.[012])\n       _lt_dar_allow_undefined='${wl}-undefined ${wl}suppress' ;;\n-    darwin1.*)\n+    *-darwin1.*)\n       _lt_dar_allow_undefined='${wl}-flat_namespace ${wl}-undefined ${wl}suppress' ;;\n-    darwin*) # darwin 5.x on\n-      # if running on 10.5 or later, the deployment target defaults\n-      # to the OS version, if on x86, and 10.4, the deployment\n-      # target defaults to 10.4. Don't you love it?\n-      case ${MACOSX_DEPLOYMENT_TARGET-10.0},$host in\n-\t10.0,*86*-darwin8*|10.0,*-darwin[91]*)\n-\t  _lt_dar_allow_undefined='${wl}-undefined ${wl}dynamic_lookup' ;;\n+    *-darwin*)\n+      # darwin 5.x (macOS 10.1) onwards we only need to adjust when the\n+      # deployment target is forced to an earlier version.\n+      case ${MACOSX_DEPLOYMENT_TARGET-UNSET},$host in\n+\tUNSET,*-darwin[89]*|UNSET,*-darwin[12][0123456789]*)\n+\t  ;;\n \t10.[012][,.]*)\n-\t  _lt_dar_allow_undefined='${wl}-flat_namespace ${wl}-undefined ${wl}suppress' ;;\n-\t10.*)\n-\t  _lt_dar_allow_undefined='${wl}-undefined ${wl}dynamic_lookup' ;;\n-      esac\n+\t  _lt_dar_allow_undefined='${wl}-flat_namespace ${wl}-undefined ${wl}suppress'\n+\t  ;;\n+\t*)\n+\t  ;;\n+     esac\n     ;;\n   esac\n     if test \"$lt_cv_apple_cc_single_mod\" = \"yes\"; then\n@@ -10783,7 +10787,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 10786 \"configure\"\n+#line 10790 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -10889,7 +10893,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 10892 \"configure\"\n+#line 10896 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -14970,6 +14974,19 @@ fi\n $as_echo \"$libcc1_cv_lib_sockets\" >&6; }\n LIBS=\"$LIBS $libcc1_cv_lib_sockets\"\n \n+case \"$host\" in\n+  *-*-darwin*) darwin_dynamic_lookup=yes ;;\n+  *) darwin_dynamic_lookup= ;;\n+esac\n+ if test $darwin_dynamic_lookup = yes; then\n+  DARWIN_DYNAMIC_LOOKUP_TRUE=\n+  DARWIN_DYNAMIC_LOOKUP_FALSE='#'\n+else\n+  DARWIN_DYNAMIC_LOOKUP_TRUE='#'\n+  DARWIN_DYNAMIC_LOOKUP_FALSE=\n+fi\n+\n+\n # If any of these functions are missing, simply don't bother building\n # this plugin.\n # Check for plugin support\n@@ -15338,6 +15355,10 @@ if test -z \"${am__fastdepCXX_TRUE}\" && test -z \"${am__fastdepCXX_FALSE}\"; then\n   as_fn_error $? \"conditional \\\"am__fastdepCXX\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n fi\n+if test -z \"${DARWIN_DYNAMIC_LOOKUP_TRUE}\" && test -z \"${DARWIN_DYNAMIC_LOOKUP_FALSE}\"; then\n+  as_fn_error $? \"conditional \\\"DARWIN_DYNAMIC_LOOKUP\\\" was never defined.\n+Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n+fi\n if test -z \"${ENABLE_PLUGIN_TRUE}\" && test -z \"${ENABLE_PLUGIN_FALSE}\"; then\n   as_fn_error $? \"conditional \\\"ENABLE_PLUGIN\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5"}, {"sha": "262e0a61e6f47b814d3c5cf676c060e6a4600d6c", "filename": "libcc1/configure.ac", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1352bc88a0525743c952197fb2db6e4f8c091cde/libcc1%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1352bc88a0525743c952197fb2db6e4f8c091cde/libcc1%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2Fconfigure.ac?ref=1352bc88a0525743c952197fb2db6e4f8c091cde", "patch": "@@ -104,6 +104,12 @@ AC_CACHE_CHECK([for socket libraries], libcc1_cv_lib_sockets,\n ])\n LIBS=\"$LIBS $libcc1_cv_lib_sockets\"\n \n+case \"$host\" in\n+  *-*-darwin*) darwin_dynamic_lookup=yes ;;\n+  *) darwin_dynamic_lookup= ;;\n+esac\n+AM_CONDITIONAL(DARWIN_DYNAMIC_LOOKUP, test $darwin_dynamic_lookup = yes)\n+\n # If any of these functions are missing, simply don't bother building\n # this plugin.\n GCC_ENABLE_PLUGINS"}, {"sha": "2c0ba177d402f5863b4b8ee9f3f3119baa3a1485", "filename": "libffi/configure", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1352bc88a0525743c952197fb2db6e4f8c091cde/libffi%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1352bc88a0525743c952197fb2db6e4f8c091cde/libffi%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fconfigure?ref=1352bc88a0525743c952197fb2db6e4f8c091cde", "patch": "@@ -7762,23 +7762,25 @@ _LT_EOF\n fi\n { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $lt_cv_ld_force_load\" >&5\n $as_echo \"$lt_cv_ld_force_load\" >&6; }\n-    case $host_os in\n-    rhapsody* | darwin1.[012])\n+    # Allow for Darwin 4-7 (macOS 10.0-10.3) although these are not expect to\n+    # build without first building modern cctools / linker.\n+    case $host_cpu-$host_os in\n+    *-rhapsody* | *-darwin1.[012])\n       _lt_dar_allow_undefined='${wl}-undefined ${wl}suppress' ;;\n-    darwin1.*)\n+    *-darwin1.*)\n       _lt_dar_allow_undefined='${wl}-flat_namespace ${wl}-undefined ${wl}suppress' ;;\n-    darwin*) # darwin 5.x on\n-      # if running on 10.5 or later, the deployment target defaults\n-      # to the OS version, if on x86, and 10.4, the deployment\n-      # target defaults to 10.4. Don't you love it?\n-      case ${MACOSX_DEPLOYMENT_TARGET-10.0},$host in\n-\t10.0,*86*-darwin8*|10.0,*-darwin[91]*)\n-\t  _lt_dar_allow_undefined='${wl}-undefined ${wl}dynamic_lookup' ;;\n+    *-darwin*)\n+      # darwin 5.x (macOS 10.1) onwards we only need to adjust when the\n+      # deployment target is forced to an earlier version.\n+      case ${MACOSX_DEPLOYMENT_TARGET-UNSET},$host in\n+\tUNSET,*-darwin[89]*|UNSET,*-darwin[12][0123456789]*)\n+\t  ;;\n \t10.[012][,.]*)\n-\t  _lt_dar_allow_undefined='${wl}-flat_namespace ${wl}-undefined ${wl}suppress' ;;\n-\t10.*)\n-\t  _lt_dar_allow_undefined='${wl}-undefined ${wl}dynamic_lookup' ;;\n-      esac\n+\t  _lt_dar_allow_undefined='${wl}-flat_namespace ${wl}-undefined ${wl}suppress'\n+\t  ;;\n+\t*)\n+\t  ;;\n+     esac\n     ;;\n   esac\n     if test \"$lt_cv_apple_cc_single_mod\" = \"yes\"; then\n@@ -11561,7 +11563,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11564 \"configure\"\n+#line 11566 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11667,7 +11669,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11670 \"configure\"\n+#line 11672 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H"}, {"sha": "b2841d64952263ede1b0aef6732e04b7d72a683e", "filename": "libgfortran/configure", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1352bc88a0525743c952197fb2db6e4f8c091cde/libgfortran%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1352bc88a0525743c952197fb2db6e4f8c091cde/libgfortran%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure?ref=1352bc88a0525743c952197fb2db6e4f8c091cde", "patch": "@@ -9183,23 +9183,25 @@ _LT_EOF\n fi\n { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $lt_cv_ld_force_load\" >&5\n $as_echo \"$lt_cv_ld_force_load\" >&6; }\n-    case $host_os in\n-    rhapsody* | darwin1.[012])\n+    # Allow for Darwin 4-7 (macOS 10.0-10.3) although these are not expect to\n+    # build without first building modern cctools / linker.\n+    case $host_cpu-$host_os in\n+    *-rhapsody* | *-darwin1.[012])\n       _lt_dar_allow_undefined='${wl}-undefined ${wl}suppress' ;;\n-    darwin1.*)\n+    *-darwin1.*)\n       _lt_dar_allow_undefined='${wl}-flat_namespace ${wl}-undefined ${wl}suppress' ;;\n-    darwin*) # darwin 5.x on\n-      # if running on 10.5 or later, the deployment target defaults\n-      # to the OS version, if on x86, and 10.4, the deployment\n-      # target defaults to 10.4. Don't you love it?\n-      case ${MACOSX_DEPLOYMENT_TARGET-10.0},$host in\n-\t10.0,*86*-darwin8*|10.0,*-darwin[91]*)\n-\t  _lt_dar_allow_undefined='${wl}-undefined ${wl}dynamic_lookup' ;;\n+    *-darwin*)\n+      # darwin 5.x (macOS 10.1) onwards we only need to adjust when the\n+      # deployment target is forced to an earlier version.\n+      case ${MACOSX_DEPLOYMENT_TARGET-UNSET},$host in\n+\tUNSET,*-darwin[89]*|UNSET,*-darwin[12][0123456789]*)\n+\t  ;;\n \t10.[012][,.]*)\n-\t  _lt_dar_allow_undefined='${wl}-flat_namespace ${wl}-undefined ${wl}suppress' ;;\n-\t10.*)\n-\t  _lt_dar_allow_undefined='${wl}-undefined ${wl}dynamic_lookup' ;;\n-      esac\n+\t  _lt_dar_allow_undefined='${wl}-flat_namespace ${wl}-undefined ${wl}suppress'\n+\t  ;;\n+\t*)\n+\t  ;;\n+     esac\n     ;;\n   esac\n     if test \"$lt_cv_apple_cc_single_mod\" = \"yes\"; then\n@@ -12739,7 +12741,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 12742 \"configure\"\n+#line 12744 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -12845,7 +12847,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 12848 \"configure\"\n+#line 12850 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H"}, {"sha": "d412596a91559009393a79decd49790e1c6429e3", "filename": "libgomp/configure", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1352bc88a0525743c952197fb2db6e4f8c091cde/libgomp%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1352bc88a0525743c952197fb2db6e4f8c091cde/libgomp%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfigure?ref=1352bc88a0525743c952197fb2db6e4f8c091cde", "patch": "@@ -7631,23 +7631,25 @@ _LT_EOF\n fi\n { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $lt_cv_ld_force_load\" >&5\n $as_echo \"$lt_cv_ld_force_load\" >&6; }\n-    case $host_os in\n-    rhapsody* | darwin1.[012])\n+    # Allow for Darwin 4-7 (macOS 10.0-10.3) although these are not expect to\n+    # build without first building modern cctools / linker.\n+    case $host_cpu-$host_os in\n+    *-rhapsody* | *-darwin1.[012])\n       _lt_dar_allow_undefined='${wl}-undefined ${wl}suppress' ;;\n-    darwin1.*)\n+    *-darwin1.*)\n       _lt_dar_allow_undefined='${wl}-flat_namespace ${wl}-undefined ${wl}suppress' ;;\n-    darwin*) # darwin 5.x on\n-      # if running on 10.5 or later, the deployment target defaults\n-      # to the OS version, if on x86, and 10.4, the deployment\n-      # target defaults to 10.4. Don't you love it?\n-      case ${MACOSX_DEPLOYMENT_TARGET-10.0},$host in\n-\t10.0,*86*-darwin8*|10.0,*-darwin[91]*)\n-\t  _lt_dar_allow_undefined='${wl}-undefined ${wl}dynamic_lookup' ;;\n+    *-darwin*)\n+      # darwin 5.x (macOS 10.1) onwards we only need to adjust when the\n+      # deployment target is forced to an earlier version.\n+      case ${MACOSX_DEPLOYMENT_TARGET-UNSET},$host in\n+\tUNSET,*-darwin[89]*|UNSET,*-darwin[12][0123456789]*)\n+\t  ;;\n \t10.[012][,.]*)\n-\t  _lt_dar_allow_undefined='${wl}-flat_namespace ${wl}-undefined ${wl}suppress' ;;\n-\t10.*)\n-\t  _lt_dar_allow_undefined='${wl}-undefined ${wl}dynamic_lookup' ;;\n-      esac\n+\t  _lt_dar_allow_undefined='${wl}-flat_namespace ${wl}-undefined ${wl}suppress'\n+\t  ;;\n+\t*)\n+\t  ;;\n+     esac\n     ;;\n   esac\n     if test \"$lt_cv_apple_cc_single_mod\" = \"yes\"; then\n@@ -11429,7 +11431,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11432 \"configure\"\n+#line 11434 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11535,7 +11537,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11538 \"configure\"\n+#line 11540 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H"}, {"sha": "f3357d92c1413a3d69e42362192cec53aebc39b6", "filename": "libhsail-rt/configure", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1352bc88a0525743c952197fb2db6e4f8c091cde/libhsail-rt%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1352bc88a0525743c952197fb2db6e4f8c091cde/libhsail-rt%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libhsail-rt%2Fconfigure?ref=1352bc88a0525743c952197fb2db6e4f8c091cde", "patch": "@@ -7442,23 +7442,25 @@ _LT_EOF\n fi\n { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $lt_cv_ld_force_load\" >&5\n $as_echo \"$lt_cv_ld_force_load\" >&6; }\n-    case $host_os in\n-    rhapsody* | darwin1.[012])\n+    # Allow for Darwin 4-7 (macOS 10.0-10.3) although these are not expect to\n+    # build without first building modern cctools / linker.\n+    case $host_cpu-$host_os in\n+    *-rhapsody* | *-darwin1.[012])\n       _lt_dar_allow_undefined='${wl}-undefined ${wl}suppress' ;;\n-    darwin1.*)\n+    *-darwin1.*)\n       _lt_dar_allow_undefined='${wl}-flat_namespace ${wl}-undefined ${wl}suppress' ;;\n-    darwin*) # darwin 5.x on\n-      # if running on 10.5 or later, the deployment target defaults\n-      # to the OS version, if on x86, and 10.4, the deployment\n-      # target defaults to 10.4. Don't you love it?\n-      case ${MACOSX_DEPLOYMENT_TARGET-10.0},$host in\n-\t10.0,*86*-darwin8*|10.0,*-darwin[91]*)\n-\t  _lt_dar_allow_undefined='${wl}-undefined ${wl}dynamic_lookup' ;;\n+    *-darwin*)\n+      # darwin 5.x (macOS 10.1) onwards we only need to adjust when the\n+      # deployment target is forced to an earlier version.\n+      case ${MACOSX_DEPLOYMENT_TARGET-UNSET},$host in\n+\tUNSET,*-darwin[89]*|UNSET,*-darwin[12][0123456789]*)\n+\t  ;;\n \t10.[012][,.]*)\n-\t  _lt_dar_allow_undefined='${wl}-flat_namespace ${wl}-undefined ${wl}suppress' ;;\n-\t10.*)\n-\t  _lt_dar_allow_undefined='${wl}-undefined ${wl}dynamic_lookup' ;;\n-      esac\n+\t  _lt_dar_allow_undefined='${wl}-flat_namespace ${wl}-undefined ${wl}suppress'\n+\t  ;;\n+\t*)\n+\t  ;;\n+     esac\n     ;;\n   esac\n     if test \"$lt_cv_apple_cc_single_mod\" = \"yes\"; then\n@@ -11239,7 +11241,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11242 \"configure\"\n+#line 11244 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11345,7 +11347,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11348 \"configure\"\n+#line 11350 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H"}, {"sha": "d3ba8279e70250006af86cdd05cc1e118c892503", "filename": "libitm/configure", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1352bc88a0525743c952197fb2db6e4f8c091cde/libitm%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1352bc88a0525743c952197fb2db6e4f8c091cde/libitm%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Fconfigure?ref=1352bc88a0525743c952197fb2db6e4f8c091cde", "patch": "@@ -8265,23 +8265,25 @@ _LT_EOF\n fi\n { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $lt_cv_ld_force_load\" >&5\n $as_echo \"$lt_cv_ld_force_load\" >&6; }\n-    case $host_os in\n-    rhapsody* | darwin1.[012])\n+    # Allow for Darwin 4-7 (macOS 10.0-10.3) although these are not expect to\n+    # build without first building modern cctools / linker.\n+    case $host_cpu-$host_os in\n+    *-rhapsody* | *-darwin1.[012])\n       _lt_dar_allow_undefined='${wl}-undefined ${wl}suppress' ;;\n-    darwin1.*)\n+    *-darwin1.*)\n       _lt_dar_allow_undefined='${wl}-flat_namespace ${wl}-undefined ${wl}suppress' ;;\n-    darwin*) # darwin 5.x on\n-      # if running on 10.5 or later, the deployment target defaults\n-      # to the OS version, if on x86, and 10.4, the deployment\n-      # target defaults to 10.4. Don't you love it?\n-      case ${MACOSX_DEPLOYMENT_TARGET-10.0},$host in\n-\t10.0,*86*-darwin8*|10.0,*-darwin[91]*)\n-\t  _lt_dar_allow_undefined='${wl}-undefined ${wl}dynamic_lookup' ;;\n+    *-darwin*)\n+      # darwin 5.x (macOS 10.1) onwards we only need to adjust when the\n+      # deployment target is forced to an earlier version.\n+      case ${MACOSX_DEPLOYMENT_TARGET-UNSET},$host in\n+\tUNSET,*-darwin[89]*|UNSET,*-darwin[12][0123456789]*)\n+\t  ;;\n \t10.[012][,.]*)\n-\t  _lt_dar_allow_undefined='${wl}-flat_namespace ${wl}-undefined ${wl}suppress' ;;\n-\t10.*)\n-\t  _lt_dar_allow_undefined='${wl}-undefined ${wl}dynamic_lookup' ;;\n-      esac\n+\t  _lt_dar_allow_undefined='${wl}-flat_namespace ${wl}-undefined ${wl}suppress'\n+\t  ;;\n+\t*)\n+\t  ;;\n+     esac\n     ;;\n   esac\n     if test \"$lt_cv_apple_cc_single_mod\" = \"yes\"; then\n@@ -12064,7 +12066,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 12067 \"configure\"\n+#line 12069 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -12170,7 +12172,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 12173 \"configure\"\n+#line 12175 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H"}, {"sha": "d1beb5c9ec85a3621b0709394a726065cc89139a", "filename": "libitm/configure.tgt", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1352bc88a0525743c952197fb2db6e4f8c091cde/libitm%2Fconfigure.tgt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1352bc88a0525743c952197fb2db6e4f8c091cde/libitm%2Fconfigure.tgt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Fconfigure.tgt?ref=1352bc88a0525743c952197fb2db6e4f8c091cde", "patch": "@@ -43,6 +43,7 @@ if test \"$gcc_cv_have_tls\" = yes ; then\n     *-*-linux*)\n \tXCFLAGS=\"${XCFLAGS} -ftls-model=initial-exec\"\n \t;;\n+\n   esac\n fi\n \n@@ -144,10 +145,16 @@ case \"${target}\" in\n   *-*-gnu* | *-*-k*bsd*-gnu \\\n   | *-*-netbsd* | *-*-freebsd* | *-*-openbsd* \\\n   | *-*-solaris2* | *-*-sysv4* | *-*-hpux11* \\\n-  | *-*-darwin* | *-*-aix* | *-*-dragonfly*)\n+  | *-*-aix* | *-*-dragonfly*)\n \t# POSIX system.  The OS is supported.\n \t;;\n \n+  *-*-darwin*)\n+\t# The OS is supported, but we need dynamic lookup to support undefined\n+\t# weak symbols at link-time.\n+\tXLDFLAGS=\"${XLDFLAGS} -Wl,-undefined,dynamic_lookup\"\n+\t;;\n+\n   *)\t# Non-POSIX, or embedded system\n \tUNSUPPORTED=1\n \t;;"}, {"sha": "a1782d8c4117c2e3be806db961fb3526be2eb6ed", "filename": "libobjc/configure", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1352bc88a0525743c952197fb2db6e4f8c091cde/libobjc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1352bc88a0525743c952197fb2db6e4f8c091cde/libobjc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fconfigure?ref=1352bc88a0525743c952197fb2db6e4f8c091cde", "patch": "@@ -6956,23 +6956,25 @@ _LT_EOF\n fi\n { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $lt_cv_ld_force_load\" >&5\n $as_echo \"$lt_cv_ld_force_load\" >&6; }\n-    case $host_os in\n-    rhapsody* | darwin1.[012])\n+    # Allow for Darwin 4-7 (macOS 10.0-10.3) although these are not expect to\n+    # build without first building modern cctools / linker.\n+    case $host_cpu-$host_os in\n+    *-rhapsody* | *-darwin1.[012])\n       _lt_dar_allow_undefined='${wl}-undefined ${wl}suppress' ;;\n-    darwin1.*)\n+    *-darwin1.*)\n       _lt_dar_allow_undefined='${wl}-flat_namespace ${wl}-undefined ${wl}suppress' ;;\n-    darwin*) # darwin 5.x on\n-      # if running on 10.5 or later, the deployment target defaults\n-      # to the OS version, if on x86, and 10.4, the deployment\n-      # target defaults to 10.4. Don't you love it?\n-      case ${MACOSX_DEPLOYMENT_TARGET-10.0},$host in\n-\t10.0,*86*-darwin8*|10.0,*-darwin[91]*)\n-\t  _lt_dar_allow_undefined='${wl}-undefined ${wl}dynamic_lookup' ;;\n+    *-darwin*)\n+      # darwin 5.x (macOS 10.1) onwards we only need to adjust when the\n+      # deployment target is forced to an earlier version.\n+      case ${MACOSX_DEPLOYMENT_TARGET-UNSET},$host in\n+\tUNSET,*-darwin[89]*|UNSET,*-darwin[12][0123456789]*)\n+\t  ;;\n \t10.[012][,.]*)\n-\t  _lt_dar_allow_undefined='${wl}-flat_namespace ${wl}-undefined ${wl}suppress' ;;\n-\t10.*)\n-\t  _lt_dar_allow_undefined='${wl}-undefined ${wl}dynamic_lookup' ;;\n-      esac\n+\t  _lt_dar_allow_undefined='${wl}-flat_namespace ${wl}-undefined ${wl}suppress'\n+\t  ;;\n+\t*)\n+\t  ;;\n+     esac\n     ;;\n   esac\n     if test \"$lt_cv_apple_cc_single_mod\" = \"yes\"; then\n@@ -10779,7 +10781,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 10782 \"configure\"\n+#line 10784 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -10885,7 +10887,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 10888 \"configure\"\n+#line 10890 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H"}, {"sha": "a7fb5edb90f3c92d90c4c4fca554130c3902de95", "filename": "libphobos/configure", "status": "modified", "additions": 22, "deletions": 20, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1352bc88a0525743c952197fb2db6e4f8c091cde/libphobos%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1352bc88a0525743c952197fb2db6e4f8c091cde/libphobos%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fconfigure?ref=1352bc88a0525743c952197fb2db6e4f8c091cde", "patch": "@@ -8224,23 +8224,25 @@ _LT_EOF\n fi\n { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $lt_cv_ld_force_load\" >&5\n $as_echo \"$lt_cv_ld_force_load\" >&6; }\n-    case $host_os in\n-    rhapsody* | darwin1.[012])\n+    # Allow for Darwin 4-7 (macOS 10.0-10.3) although these are not expect to\n+    # build without first building modern cctools / linker.\n+    case $host_cpu-$host_os in\n+    *-rhapsody* | *-darwin1.[012])\n       _lt_dar_allow_undefined='${wl}-undefined ${wl}suppress' ;;\n-    darwin1.*)\n+    *-darwin1.*)\n       _lt_dar_allow_undefined='${wl}-flat_namespace ${wl}-undefined ${wl}suppress' ;;\n-    darwin*) # darwin 5.x on\n-      # if running on 10.5 or later, the deployment target defaults\n-      # to the OS version, if on x86, and 10.4, the deployment\n-      # target defaults to 10.4. Don't you love it?\n-      case ${MACOSX_DEPLOYMENT_TARGET-10.0},$host in\n-\t10.0,*86*-darwin8*|10.0,*-darwin[91]*)\n-\t  _lt_dar_allow_undefined='${wl}-undefined ${wl}dynamic_lookup' ;;\n+    *-darwin*)\n+      # darwin 5.x (macOS 10.1) onwards we only need to adjust when the\n+      # deployment target is forced to an earlier version.\n+      case ${MACOSX_DEPLOYMENT_TARGET-UNSET},$host in\n+\tUNSET,*-darwin[89]*|UNSET,*-darwin[12][0123456789]*)\n+\t  ;;\n \t10.[012][,.]*)\n-\t  _lt_dar_allow_undefined='${wl}-flat_namespace ${wl}-undefined ${wl}suppress' ;;\n-\t10.*)\n-\t  _lt_dar_allow_undefined='${wl}-undefined ${wl}dynamic_lookup' ;;\n-      esac\n+\t  _lt_dar_allow_undefined='${wl}-flat_namespace ${wl}-undefined ${wl}suppress'\n+\t  ;;\n+\t*)\n+\t  ;;\n+     esac\n     ;;\n   esac\n     if test \"$lt_cv_apple_cc_single_mod\" = \"yes\"; then\n@@ -10038,7 +10040,7 @@ if test -z \"$aix_libpath\"; then aix_libpath=\"/usr/lib:/lib\"; fi\n       if test \"$GCC\" = yes && test \"$with_gnu_ld\" = no; then\n \tcase $host_cpu in\n \thppa*64*)\n-\t  archive_cmds='$CC -shared ${wl}+h ${wl}$soname -o $lib $libobjs $deplibs $compiler_flags'\n+\t  archive_cmds='$CC -shared ${wl}+h ${wl}$soname ${wl}+nodefaultrpath -o $lib $libobjs $deplibs $compiler_flags'\n \t  ;;\n \tia64*)\n \t  archive_cmds='$CC -shared -fPIC ${wl}+h ${wl}$soname ${wl}+nodefaultrpath -o $lib $libobjs $deplibs $compiler_flags'\n@@ -10050,7 +10052,7 @@ if test -z \"$aix_libpath\"; then aix_libpath=\"/usr/lib:/lib\"; fi\n       else\n \tcase $host_cpu in\n \thppa*64*)\n-\t  archive_cmds='$CC -b ${wl}+h ${wl}$soname -o $lib $libobjs $deplibs $compiler_flags'\n+\t  archive_cmds='$CC -b ${wl}+h ${wl}$soname ${wl}+nodefaultrpath -o $lib $libobjs $deplibs $compiler_flags'\n \t  ;;\n \tia64*)\n \t  archive_cmds='$CC -b ${wl}+h ${wl}$soname ${wl}+nodefaultrpath -o $lib $libobjs $deplibs $compiler_flags'\n@@ -11754,7 +11756,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11757 \"configure\"\n+#line 11759 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11860,7 +11862,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11863 \"configure\"\n+#line 11865 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -13485,7 +13487,7 @@ if test -z \"$aix_libpath\"; then aix_libpath=\"/usr/lib:/lib\"; fi\n       if test \"$GCC\" = yes && test \"$with_gnu_ld\" = no; then\n \tcase $host_cpu in\n \thppa*64*)\n-\t  archive_cmds_D='$CC -shared ${wl}+h ${wl}$soname -o $lib $libobjs $deplibs $compiler_flags'\n+\t  archive_cmds_D='$CC -shared ${wl}+h ${wl}$soname ${wl}+nodefaultrpath -o $lib $libobjs $deplibs $compiler_flags'\n \t  ;;\n \tia64*)\n \t  archive_cmds_D='$CC -shared -fPIC ${wl}+h ${wl}$soname ${wl}+nodefaultrpath -o $lib $libobjs $deplibs $compiler_flags'\n@@ -13497,7 +13499,7 @@ if test -z \"$aix_libpath\"; then aix_libpath=\"/usr/lib:/lib\"; fi\n       else\n \tcase $host_cpu in\n \thppa*64*)\n-\t  archive_cmds_D='$CC -b ${wl}+h ${wl}$soname -o $lib $libobjs $deplibs $compiler_flags'\n+\t  archive_cmds_D='$CC -b ${wl}+h ${wl}$soname ${wl}+nodefaultrpath -o $lib $libobjs $deplibs $compiler_flags'\n \t  ;;\n \tia64*)\n \t  archive_cmds_D='$CC -b ${wl}+h ${wl}$soname ${wl}+nodefaultrpath -o $lib $libobjs $deplibs $compiler_flags'"}, {"sha": "7d4374124065111c504e00a17512d686b75247dc", "filename": "libquadmath/configure", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1352bc88a0525743c952197fb2db6e4f8c091cde/libquadmath%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1352bc88a0525743c952197fb2db6e4f8c091cde/libquadmath%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fconfigure?ref=1352bc88a0525743c952197fb2db6e4f8c091cde", "patch": "@@ -7256,23 +7256,25 @@ _LT_EOF\n fi\n { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $lt_cv_ld_force_load\" >&5\n $as_echo \"$lt_cv_ld_force_load\" >&6; }\n-    case $host_os in\n-    rhapsody* | darwin1.[012])\n+    # Allow for Darwin 4-7 (macOS 10.0-10.3) although these are not expect to\n+    # build without first building modern cctools / linker.\n+    case $host_cpu-$host_os in\n+    *-rhapsody* | *-darwin1.[012])\n       _lt_dar_allow_undefined='${wl}-undefined ${wl}suppress' ;;\n-    darwin1.*)\n+    *-darwin1.*)\n       _lt_dar_allow_undefined='${wl}-flat_namespace ${wl}-undefined ${wl}suppress' ;;\n-    darwin*) # darwin 5.x on\n-      # if running on 10.5 or later, the deployment target defaults\n-      # to the OS version, if on x86, and 10.4, the deployment\n-      # target defaults to 10.4. Don't you love it?\n-      case ${MACOSX_DEPLOYMENT_TARGET-10.0},$host in\n-\t10.0,*86*-darwin8*|10.0,*-darwin[91]*)\n-\t  _lt_dar_allow_undefined='${wl}-undefined ${wl}dynamic_lookup' ;;\n+    *-darwin*)\n+      # darwin 5.x (macOS 10.1) onwards we only need to adjust when the\n+      # deployment target is forced to an earlier version.\n+      case ${MACOSX_DEPLOYMENT_TARGET-UNSET},$host in\n+\tUNSET,*-darwin[89]*|UNSET,*-darwin[12][0123456789]*)\n+\t  ;;\n \t10.[012][,.]*)\n-\t  _lt_dar_allow_undefined='${wl}-flat_namespace ${wl}-undefined ${wl}suppress' ;;\n-\t10.*)\n-\t  _lt_dar_allow_undefined='${wl}-undefined ${wl}dynamic_lookup' ;;\n-      esac\n+\t  _lt_dar_allow_undefined='${wl}-flat_namespace ${wl}-undefined ${wl}suppress'\n+\t  ;;\n+\t*)\n+\t  ;;\n+     esac\n     ;;\n   esac\n     if test \"$lt_cv_apple_cc_single_mod\" = \"yes\"; then\n@@ -10814,7 +10816,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 10817 \"configure\"\n+#line 10819 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -10920,7 +10922,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 10923 \"configure\"\n+#line 10925 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H"}, {"sha": "2b2cb907efae3bbbdfbf8aa656977ba505a38c46", "filename": "libsanitizer/configure", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1352bc88a0525743c952197fb2db6e4f8c091cde/libsanitizer%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1352bc88a0525743c952197fb2db6e4f8c091cde/libsanitizer%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fconfigure?ref=1352bc88a0525743c952197fb2db6e4f8c091cde", "patch": "@@ -8834,23 +8834,25 @@ _LT_EOF\n fi\n { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $lt_cv_ld_force_load\" >&5\n $as_echo \"$lt_cv_ld_force_load\" >&6; }\n-    case $host_os in\n-    rhapsody* | darwin1.[012])\n+    # Allow for Darwin 4-7 (macOS 10.0-10.3) although these are not expect to\n+    # build without first building modern cctools / linker.\n+    case $host_cpu-$host_os in\n+    *-rhapsody* | *-darwin1.[012])\n       _lt_dar_allow_undefined='${wl}-undefined ${wl}suppress' ;;\n-    darwin1.*)\n+    *-darwin1.*)\n       _lt_dar_allow_undefined='${wl}-flat_namespace ${wl}-undefined ${wl}suppress' ;;\n-    darwin*) # darwin 5.x on\n-      # if running on 10.5 or later, the deployment target defaults\n-      # to the OS version, if on x86, and 10.4, the deployment\n-      # target defaults to 10.4. Don't you love it?\n-      case ${MACOSX_DEPLOYMENT_TARGET-10.0},$host in\n-\t10.0,*86*-darwin8*|10.0,*-darwin[91]*)\n-\t  _lt_dar_allow_undefined='${wl}-undefined ${wl}dynamic_lookup' ;;\n+    *-darwin*)\n+      # darwin 5.x (macOS 10.1) onwards we only need to adjust when the\n+      # deployment target is forced to an earlier version.\n+      case ${MACOSX_DEPLOYMENT_TARGET-UNSET},$host in\n+\tUNSET,*-darwin[89]*|UNSET,*-darwin[12][0123456789]*)\n+\t  ;;\n \t10.[012][,.]*)\n-\t  _lt_dar_allow_undefined='${wl}-flat_namespace ${wl}-undefined ${wl}suppress' ;;\n-\t10.*)\n-\t  _lt_dar_allow_undefined='${wl}-undefined ${wl}dynamic_lookup' ;;\n-      esac\n+\t  _lt_dar_allow_undefined='${wl}-flat_namespace ${wl}-undefined ${wl}suppress'\n+\t  ;;\n+\t*)\n+\t  ;;\n+     esac\n     ;;\n   esac\n     if test \"$lt_cv_apple_cc_single_mod\" = \"yes\"; then\n@@ -12364,7 +12366,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 12367 \"configure\"\n+#line 12369 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -12470,7 +12472,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 12473 \"configure\"\n+#line 12475 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H"}, {"sha": "0ca5d9fd92464110d99a5da86b8de4378384e944", "filename": "libsanitizer/configure.tgt", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1352bc88a0525743c952197fb2db6e4f8c091cde/libsanitizer%2Fconfigure.tgt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1352bc88a0525743c952197fb2db6e4f8c091cde/libsanitizer%2Fconfigure.tgt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fconfigure.tgt?ref=1352bc88a0525743c952197fb2db6e4f8c091cde", "patch": "@@ -65,6 +65,7 @@ case \"${target}\" in\n \t;;\n   x86_64-*-darwin2* | x86_64-*-darwin1[2-9]* | i?86-*-darwin1[2-9]*)\n \tTSAN_SUPPORTED=no\n+\tEXTRA_CXXFLAGS+=\"-Wl,-undefined,dynamic_lookup\"\n \t;;\n   x86_64-*-solaris2.11* | i?86-*-solaris2.11*)\n \t;;"}, {"sha": "4873b43e111696fa701e439e1dd27e2741713eb4", "filename": "libssp/configure", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1352bc88a0525743c952197fb2db6e4f8c091cde/libssp%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1352bc88a0525743c952197fb2db6e4f8c091cde/libssp%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libssp%2Fconfigure?ref=1352bc88a0525743c952197fb2db6e4f8c091cde", "patch": "@@ -7442,23 +7442,25 @@ _LT_EOF\n fi\n { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $lt_cv_ld_force_load\" >&5\n $as_echo \"$lt_cv_ld_force_load\" >&6; }\n-    case $host_os in\n-    rhapsody* | darwin1.[012])\n+    # Allow for Darwin 4-7 (macOS 10.0-10.3) although these are not expect to\n+    # build without first building modern cctools / linker.\n+    case $host_cpu-$host_os in\n+    *-rhapsody* | *-darwin1.[012])\n       _lt_dar_allow_undefined='${wl}-undefined ${wl}suppress' ;;\n-    darwin1.*)\n+    *-darwin1.*)\n       _lt_dar_allow_undefined='${wl}-flat_namespace ${wl}-undefined ${wl}suppress' ;;\n-    darwin*) # darwin 5.x on\n-      # if running on 10.5 or later, the deployment target defaults\n-      # to the OS version, if on x86, and 10.4, the deployment\n-      # target defaults to 10.4. Don't you love it?\n-      case ${MACOSX_DEPLOYMENT_TARGET-10.0},$host in\n-\t10.0,*86*-darwin8*|10.0,*-darwin[91]*)\n-\t  _lt_dar_allow_undefined='${wl}-undefined ${wl}dynamic_lookup' ;;\n+    *-darwin*)\n+      # darwin 5.x (macOS 10.1) onwards we only need to adjust when the\n+      # deployment target is forced to an earlier version.\n+      case ${MACOSX_DEPLOYMENT_TARGET-UNSET},$host in\n+\tUNSET,*-darwin[89]*|UNSET,*-darwin[12][0123456789]*)\n+\t  ;;\n \t10.[012][,.]*)\n-\t  _lt_dar_allow_undefined='${wl}-flat_namespace ${wl}-undefined ${wl}suppress' ;;\n-\t10.*)\n-\t  _lt_dar_allow_undefined='${wl}-undefined ${wl}dynamic_lookup' ;;\n-      esac\n+\t  _lt_dar_allow_undefined='${wl}-flat_namespace ${wl}-undefined ${wl}suppress'\n+\t  ;;\n+\t*)\n+\t  ;;\n+     esac\n     ;;\n   esac\n     if test \"$lt_cv_apple_cc_single_mod\" = \"yes\"; then\n@@ -11000,7 +11002,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11003 \"configure\"\n+#line 11005 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11106,7 +11108,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11109 \"configure\"\n+#line 11111 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H"}, {"sha": "d128de2f186b6a8abfbf914e9ae503dad5aac462", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 25, "deletions": 23, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1352bc88a0525743c952197fb2db6e4f8c091cde/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1352bc88a0525743c952197fb2db6e4f8c091cde/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=1352bc88a0525743c952197fb2db6e4f8c091cde", "patch": "@@ -8448,23 +8448,25 @@ _LT_EOF\n fi\n { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $lt_cv_ld_force_load\" >&5\n $as_echo \"$lt_cv_ld_force_load\" >&6; }\n-    case $host_os in\n-    rhapsody* | darwin1.[012])\n+    # Allow for Darwin 4-7 (macOS 10.0-10.3) although these are not expect to\n+    # build without first building modern cctools / linker.\n+    case $host_cpu-$host_os in\n+    *-rhapsody* | *-darwin1.[012])\n       _lt_dar_allow_undefined='${wl}-undefined ${wl}suppress' ;;\n-    darwin1.*)\n+    *-darwin1.*)\n       _lt_dar_allow_undefined='${wl}-flat_namespace ${wl}-undefined ${wl}suppress' ;;\n-    darwin*) # darwin 5.x on\n-      # if running on 10.5 or later, the deployment target defaults\n-      # to the OS version, if on x86, and 10.4, the deployment\n-      # target defaults to 10.4. Don't you love it?\n-      case ${MACOSX_DEPLOYMENT_TARGET-10.0},$host in\n-\t10.0,*86*-darwin8*|10.0,*-darwin[91]*)\n-\t  _lt_dar_allow_undefined='${wl}-undefined ${wl}dynamic_lookup' ;;\n+    *-darwin*)\n+      # darwin 5.x (macOS 10.1) onwards we only need to adjust when the\n+      # deployment target is forced to an earlier version.\n+      case ${MACOSX_DEPLOYMENT_TARGET-UNSET},$host in\n+\tUNSET,*-darwin[89]*|UNSET,*-darwin[12][0123456789]*)\n+\t  ;;\n \t10.[012][,.]*)\n-\t  _lt_dar_allow_undefined='${wl}-flat_namespace ${wl}-undefined ${wl}suppress' ;;\n-\t10.*)\n-\t  _lt_dar_allow_undefined='${wl}-undefined ${wl}dynamic_lookup' ;;\n-      esac\n+\t  _lt_dar_allow_undefined='${wl}-flat_namespace ${wl}-undefined ${wl}suppress'\n+\t  ;;\n+\t*)\n+\t  ;;\n+     esac\n     ;;\n   esac\n     if test \"$lt_cv_apple_cc_single_mod\" = \"yes\"; then\n@@ -12134,7 +12136,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 12137 \"configure\"\n+#line 12139 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -12240,7 +12242,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 12243 \"configure\"\n+#line 12245 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -15932,7 +15934,7 @@ $as_echo \"$glibcxx_cv_atomic_long_long\" >&6; }\n   # Fake what AC_TRY_COMPILE does.\n \n     cat > conftest.$ac_ext << EOF\n-#line 15935 \"configure\"\n+#line 15937 \"configure\"\n int main()\n {\n   typedef bool atomic_type;\n@@ -15967,7 +15969,7 @@ $as_echo \"$glibcxx_cv_atomic_bool\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15970 \"configure\"\n+#line 15972 \"configure\"\n int main()\n {\n   typedef short atomic_type;\n@@ -16002,7 +16004,7 @@ $as_echo \"$glibcxx_cv_atomic_short\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 16005 \"configure\"\n+#line 16007 \"configure\"\n int main()\n {\n   // NB: _Atomic_word not necessarily int.\n@@ -16038,7 +16040,7 @@ $as_echo \"$glibcxx_cv_atomic_int\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 16041 \"configure\"\n+#line 16043 \"configure\"\n int main()\n {\n   typedef long long atomic_type;\n@@ -16191,7 +16193,7 @@ $as_echo \"mutex\" >&6; }\n   # unnecessary for this test.\n \n     cat > conftest.$ac_ext << EOF\n-#line 16194 \"configure\"\n+#line 16196 \"configure\"\n int main()\n {\n   _Decimal32 d1;\n@@ -16233,7 +16235,7 @@ ac_compiler_gnu=$ac_cv_cxx_compiler_gnu\n   # unnecessary for this test.\n \n     cat > conftest.$ac_ext << EOF\n-#line 16236 \"configure\"\n+#line 16238 \"configure\"\n template<typename T1, typename T2>\n   struct same\n   { typedef T2 type; };\n@@ -16267,7 +16269,7 @@ $as_echo \"$enable_int128\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 16270 \"configure\"\n+#line 16272 \"configure\"\n template<typename T1, typename T2>\n   struct same\n   { typedef T2 type; };"}, {"sha": "d88f0792362f4a4c79dc882114a6d0d5e67f01b8", "filename": "libtool.m4", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1352bc88a0525743c952197fb2db6e4f8c091cde/libtool.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1352bc88a0525743c952197fb2db6e4f8c091cde/libtool.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libtool.m4?ref=1352bc88a0525743c952197fb2db6e4f8c091cde", "patch": "@@ -994,23 +994,25 @@ _LT_EOF\n         rm -f conftest.err libconftest.a conftest conftest.c\n         rm -rf conftest.dSYM\n     ])\n-    case $host_os in\n-    rhapsody* | darwin1.[[012]])\n+    # Allow for Darwin 4-7 (macOS 10.0-10.3) although these are not expect to\n+    # build without first building modern cctools / linker.\n+    case $host_cpu-$host_os in\n+    *-rhapsody* | *-darwin1.[[012]])\n       _lt_dar_allow_undefined='${wl}-undefined ${wl}suppress' ;;\n-    darwin1.*)\n+    *-darwin1.*)\n       _lt_dar_allow_undefined='${wl}-flat_namespace ${wl}-undefined ${wl}suppress' ;;\n-    darwin*) # darwin 5.x on\n-      # if running on 10.5 or later, the deployment target defaults\n-      # to the OS version, if on x86, and 10.4, the deployment\n-      # target defaults to 10.4. Don't you love it?\n-      case ${MACOSX_DEPLOYMENT_TARGET-10.0},$host in\n-\t10.0,*86*-darwin8*|10.0,*-darwin[[91]]*)\n-\t  _lt_dar_allow_undefined='${wl}-undefined ${wl}dynamic_lookup' ;;\n+    *-darwin*)\n+      # darwin 5.x (macOS 10.1) onwards we only need to adjust when the\n+      # deployment target is forced to an earlier version.\n+      case ${MACOSX_DEPLOYMENT_TARGET-UNSET},$host in\n+\tUNSET,*-darwin[[89]]*|UNSET,*-darwin[[12]][[0123456789]]*)\n+\t  ;;\n \t10.[[012]][[,.]]*)\n-\t  _lt_dar_allow_undefined='${wl}-flat_namespace ${wl}-undefined ${wl}suppress' ;;\n-\t10.*)\n-\t  _lt_dar_allow_undefined='${wl}-undefined ${wl}dynamic_lookup' ;;\n-      esac\n+\t  _lt_dar_allow_undefined='${wl}-flat_namespace ${wl}-undefined ${wl}suppress'\n+\t  ;;\n+\t*)\n+\t  ;;\n+     esac\n     ;;\n   esac\n     if test \"$lt_cv_apple_cc_single_mod\" = \"yes\"; then\n@@ -1033,7 +1035,7 @@ _LT_EOF\n \n # _LT_DARWIN_LINKER_FEATURES\n # --------------------------\n-# Checks for linker and compiler features on darwin\n+# Checks for linker and compiler features on Darwin / macOS / iOS\n m4_defun([_LT_DARWIN_LINKER_FEATURES],\n [\n   m4_require([_LT_REQUIRED_DARWIN_CHECKS])"}, {"sha": "11b509c11d594aa3d165e5a8fe1ac619733bdf6e", "filename": "libvtv/configure", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1352bc88a0525743c952197fb2db6e4f8c091cde/libvtv%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1352bc88a0525743c952197fb2db6e4f8c091cde/libvtv%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libvtv%2Fconfigure?ref=1352bc88a0525743c952197fb2db6e4f8c091cde", "patch": "@@ -8732,23 +8732,25 @@ _LT_EOF\n fi\n { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $lt_cv_ld_force_load\" >&5\n $as_echo \"$lt_cv_ld_force_load\" >&6; }\n-    case $host_os in\n-    rhapsody* | darwin1.[012])\n+    # Allow for Darwin 4-7 (macOS 10.0-10.3) although these are not expect to\n+    # build without first building modern cctools / linker.\n+    case $host_cpu-$host_os in\n+    *-rhapsody* | *-darwin1.[012])\n       _lt_dar_allow_undefined='${wl}-undefined ${wl}suppress' ;;\n-    darwin1.*)\n+    *-darwin1.*)\n       _lt_dar_allow_undefined='${wl}-flat_namespace ${wl}-undefined ${wl}suppress' ;;\n-    darwin*) # darwin 5.x on\n-      # if running on 10.5 or later, the deployment target defaults\n-      # to the OS version, if on x86, and 10.4, the deployment\n-      # target defaults to 10.4. Don't you love it?\n-      case ${MACOSX_DEPLOYMENT_TARGET-10.0},$host in\n-\t10.0,*86*-darwin8*|10.0,*-darwin[91]*)\n-\t  _lt_dar_allow_undefined='${wl}-undefined ${wl}dynamic_lookup' ;;\n+    *-darwin*)\n+      # darwin 5.x (macOS 10.1) onwards we only need to adjust when the\n+      # deployment target is forced to an earlier version.\n+      case ${MACOSX_DEPLOYMENT_TARGET-UNSET},$host in\n+\tUNSET,*-darwin[89]*|UNSET,*-darwin[12][0123456789]*)\n+\t  ;;\n \t10.[012][,.]*)\n-\t  _lt_dar_allow_undefined='${wl}-flat_namespace ${wl}-undefined ${wl}suppress' ;;\n-\t10.*)\n-\t  _lt_dar_allow_undefined='${wl}-undefined ${wl}dynamic_lookup' ;;\n-      esac\n+\t  _lt_dar_allow_undefined='${wl}-flat_namespace ${wl}-undefined ${wl}suppress'\n+\t  ;;\n+\t*)\n+\t  ;;\n+     esac\n     ;;\n   esac\n     if test \"$lt_cv_apple_cc_single_mod\" = \"yes\"; then\n@@ -12262,7 +12264,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 12265 \"configure\"\n+#line 12267 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -12368,7 +12370,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 12371 \"configure\"\n+#line 12373 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H"}, {"sha": "945a960991ada3f57dc17804f7fde8ec655f3f50", "filename": "zlib/configure", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1352bc88a0525743c952197fb2db6e4f8c091cde/zlib%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1352bc88a0525743c952197fb2db6e4f8c091cde/zlib%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/zlib%2Fconfigure?ref=1352bc88a0525743c952197fb2db6e4f8c091cde", "patch": "@@ -6918,23 +6918,25 @@ _LT_EOF\n fi\n { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $lt_cv_ld_force_load\" >&5\n $as_echo \"$lt_cv_ld_force_load\" >&6; }\n-    case $host_os in\n-    rhapsody* | darwin1.[012])\n+    # Allow for Darwin 4-7 (macOS 10.0-10.3) although these are not expect to\n+    # build without first building modern cctools / linker.\n+    case $host_cpu-$host_os in\n+    *-rhapsody* | *-darwin1.[012])\n       _lt_dar_allow_undefined='${wl}-undefined ${wl}suppress' ;;\n-    darwin1.*)\n+    *-darwin1.*)\n       _lt_dar_allow_undefined='${wl}-flat_namespace ${wl}-undefined ${wl}suppress' ;;\n-    darwin*) # darwin 5.x on\n-      # if running on 10.5 or later, the deployment target defaults\n-      # to the OS version, if on x86, and 10.4, the deployment\n-      # target defaults to 10.4. Don't you love it?\n-      case ${MACOSX_DEPLOYMENT_TARGET-10.0},$host in\n-\t10.0,*86*-darwin8*|10.0,*-darwin[91]*)\n-\t  _lt_dar_allow_undefined='${wl}-undefined ${wl}dynamic_lookup' ;;\n+    *-darwin*)\n+      # darwin 5.x (macOS 10.1) onwards we only need to adjust when the\n+      # deployment target is forced to an earlier version.\n+      case ${MACOSX_DEPLOYMENT_TARGET-UNSET},$host in\n+\tUNSET,*-darwin[89]*|UNSET,*-darwin[12][0123456789]*)\n+\t  ;;\n \t10.[012][,.]*)\n-\t  _lt_dar_allow_undefined='${wl}-flat_namespace ${wl}-undefined ${wl}suppress' ;;\n-\t10.*)\n-\t  _lt_dar_allow_undefined='${wl}-undefined ${wl}dynamic_lookup' ;;\n-      esac\n+\t  _lt_dar_allow_undefined='${wl}-flat_namespace ${wl}-undefined ${wl}suppress'\n+\t  ;;\n+\t*)\n+\t  ;;\n+     esac\n     ;;\n   esac\n     if test \"$lt_cv_apple_cc_single_mod\" = \"yes\"; then\n@@ -10743,7 +10745,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 10746 \"configure\"\n+#line 10748 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -10849,7 +10851,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 10852 \"configure\"\n+#line 10854 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H"}]}