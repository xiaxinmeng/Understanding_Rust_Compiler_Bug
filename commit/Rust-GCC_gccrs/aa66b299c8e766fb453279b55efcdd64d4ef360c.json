{"sha": "aa66b299c8e766fb453279b55efcdd64d4ef360c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWE2NmIyOTljOGU3NjZmYjQ1MzI3OWI1NWVmY2RkNjRkNGVmMzYwYw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2012-11-23T22:11:23Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2012-11-23T22:11:23Z"}, "message": "re PR libstdc++/52680 (std::this_thread::sleep_for #ifdef'd out by _GLIBCXX_USE_NANOSLEEP)\n\n\tPR libstdc++/52680\n\t* acinclude.m4 (GLIBCXX_ENABLE_LIBSTDCXX_TIME): Check for usleep and\n\tsleep if nanosleep is not available. Bump libtool revision.\n\t* config.h.in: Regenerate.\n\t* configure: Likewise.\n\t* config/abi/pre/gnu.ver (GLIBCXX_3.4.18): Add __sleep_for.\n\t* include/std/thread (this_thread::__sleep_for): Add.\n\t(this_thread::yield, this_thread::sleep_until, this_thread::sleep_for):\n\tDeclare unconditionally.\n\t* src/c++11/thread.cc (this_thread::__sleep_for): Define.\n\t* testsuite/lib/libstdc++.exp (check_v3_target_nanosleep): Rename to\n\tcheck_v3_target_sleep.\n\t* testsuite/lib/dg-options.exp (dg-require-nanosleep): Rename to\n\tdg-require-sleep.\n\t* testsuite/30_threads/condition_variable_any/53830.cc: Update.\n\t* testsuite/30_threads/this_thread/2.cc: Likewise.\n\t* testsuite/30_threads/this_thread/3.cc: Likewise.\n\t* testsuite/30_threads/this_thread/4.cc: Likewise.\n\t* testsuite/30_threads/async/54297.cc: Likewise.\n\nFrom-SVN: r193769", "tree": {"sha": "bd11ed625b040c97f7b7dc87865300f4d68dbf00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd11ed625b040c97f7b7dc87865300f4d68dbf00"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa66b299c8e766fb453279b55efcdd64d4ef360c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa66b299c8e766fb453279b55efcdd64d4ef360c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa66b299c8e766fb453279b55efcdd64d4ef360c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa66b299c8e766fb453279b55efcdd64d4ef360c/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9cb5411c1729695a586eaf1d47a42540560387e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cb5411c1729695a586eaf1d47a42540560387e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9cb5411c1729695a586eaf1d47a42540560387e2"}], "stats": {"total": 242, "additions": 196, "deletions": 46}, "files": [{"sha": "19480af04c02280efc8472350662c65b0d72c157", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa66b299c8e766fb453279b55efcdd64d4ef360c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa66b299c8e766fb453279b55efcdd64d4ef360c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=aa66b299c8e766fb453279b55efcdd64d4ef360c", "patch": "@@ -1,3 +1,25 @@\n+2012-11-23  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\tPR libstdc++/52680\n+\t* acinclude.m4 (GLIBCXX_ENABLE_LIBSTDCXX_TIME): Check for usleep and\n+\tsleep if nanosleep is not available. Bump libtool revision.\n+\t* config.h.in: Regenerate.\n+\t* configure: Likewise.\n+\t* config/abi/pre/gnu.ver (GLIBCXX_3.4.18): Add __sleep_for.\n+\t* include/std/thread (this_thread::__sleep_for): Add.\n+\t(this_thread::yield, this_thread::sleep_until, this_thread::sleep_for):\n+\tDeclare unconditionally.\n+\t* src/c++11/thread.cc (this_thread::__sleep_for): Define.\n+\t* testsuite/lib/libstdc++.exp (check_v3_target_nanosleep): Rename to\n+\tcheck_v3_target_sleep.\n+\t* testsuite/lib/dg-options.exp (dg-require-nanosleep): Rename to\n+\tdg-require-sleep.\n+\t* testsuite/30_threads/condition_variable_any/53830.cc: Update.\n+\t* testsuite/30_threads/this_thread/2.cc: Likewise.\n+\t* testsuite/30_threads/this_thread/3.cc: Likewise.\n+\t* testsuite/30_threads/this_thread/4.cc: Likewise.\n+\t* testsuite/30_threads/async/54297.cc: Likewise.\n+\n 2012-11-20  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR libstdc++/55413"}, {"sha": "281ee7ec1ba64ab0e754e928ba2de18a6550232a", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa66b299c8e766fb453279b55efcdd64d4ef360c/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa66b299c8e766fb453279b55efcdd64d4ef360c/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=aa66b299c8e766fb453279b55efcdd64d4ef360c", "patch": "@@ -1281,6 +1281,24 @@ AC_DEFUN([GLIBCXX_ENABLE_LIBSTDCXX_TIME], [\n   if test x\"$ac_has_nanosleep\" = x\"yes\"; then\n     AC_DEFINE(_GLIBCXX_USE_NANOSLEEP, 1,\n       [ Defined if nanosleep is available. ])\n+  else\n+      AC_MSG_CHECKING([for sleep])\n+      AC_TRY_COMPILE([#include <unistd.h>],\n+                     [sleep(1)],\n+                     [ac_has_sleep=yes],[ac_has_sleep=no])\n+      if test x\"$ac_has_sleep\" = x\"yes\"; then\n+        AC_DEFINE(HAVE_SLEEP,1, [Defined if sleep exists.])\n+      fi\n+      AC_MSG_RESULT($ac_has_sleep)\n+      AC_MSG_CHECKING([for usleep])\n+      AC_TRY_COMPILE([#include <unistd.h>],\n+                     [sleep(1);\n+                      usleep(100);],\n+                     [ac_has_usleep=yes],[ac_has_usleep=no])\n+      if test x\"$ac_has_usleep\" = x\"yes\"; then\n+        AC_DEFINE(HAVE_USLEEP,1, [Defined if usleep exists.])\n+      fi\n+      AC_MSG_RESULT($ac_has_usleep)\n   fi\n \n   AC_SUBST(GLIBCXX_LIBS)\n@@ -3201,7 +3219,7 @@ changequote([,])dnl\n fi\n \n # For libtool versioning info, format is CURRENT:REVISION:AGE\n-libtool_VERSION=6:17:0\n+libtool_VERSION=6:18:0\n \n # Everything parsed; figure out what files and settings to use.\n case $enable_symvers in"}, {"sha": "fcb2bb319714261b5ef9925d1e41725b6994562a", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa66b299c8e766fb453279b55efcdd64d4ef360c/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa66b299c8e766fb453279b55efcdd64d4ef360c/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=aa66b299c8e766fb453279b55efcdd64d4ef360c", "patch": "@@ -327,6 +327,9 @@\n /* Define to 1 if you have the `sinl' function. */\n #undef HAVE_SINL\n \n+/* Defined if sleep exists. */\n+#undef HAVE_SLEEP\n+\n /* Define to 1 if you have the `sqrtf' function. */\n #undef HAVE_SQRTF\n \n@@ -436,6 +439,9 @@\n /* Define to 1 if you have the <unistd.h> header file. */\n #undef HAVE_UNISTD_H\n \n+/* Defined if usleep exists. */\n+#undef HAVE_USLEEP\n+\n /* Defined if vfwscanf exists. */\n #undef HAVE_VFWSCANF\n "}, {"sha": "8b1ec0da91731eaafac5fea60a027fdd51e24c2f", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa66b299c8e766fb453279b55efcdd64d4ef360c/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa66b299c8e766fb453279b55efcdd64d4ef360c/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=aa66b299c8e766fb453279b55efcdd64d4ef360c", "patch": "@@ -1339,6 +1339,9 @@ GLIBCXX_3.4.18 {\n     # construction vtable\n     _ZTCSt*;\n \n+    # std::this_thread::__sleep_for\n+    _ZNSt11this_thread11__sleep_for*;\n+\n } GLIBCXX_3.4.17;\n \n # Symbols in the support library (libsupc++) have their own tag."}, {"sha": "1e7c2937524d58ca763ca8226c1956651487e957", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 55, "deletions": 1, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa66b299c8e766fb453279b55efcdd64d4ef360c/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa66b299c8e766fb453279b55efcdd64d4ef360c/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=aa66b299c8e766fb453279b55efcdd64d4ef360c", "patch": "@@ -19844,6 +19844,60 @@ $as_echo \"#define _GLIBCXX_USE_CLOCK_REALTIME 1\" >>confdefs.h\n \n $as_echo \"#define _GLIBCXX_USE_NANOSLEEP 1\" >>confdefs.h\n \n+  else\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for sleep\" >&5\n+$as_echo_n \"checking for sleep... \" >&6; }\n+      cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+#include <unistd.h>\n+int\n+main ()\n+{\n+sleep(1)\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_cxx_try_compile \"$LINENO\"; then :\n+  ac_has_sleep=yes\n+else\n+  ac_has_sleep=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+      if test x\"$ac_has_sleep\" = x\"yes\"; then\n+\n+$as_echo \"#define HAVE_SLEEP 1\" >>confdefs.h\n+\n+      fi\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_has_sleep\" >&5\n+$as_echo \"$ac_has_sleep\" >&6; }\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for usleep\" >&5\n+$as_echo_n \"checking for usleep... \" >&6; }\n+      cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+#include <unistd.h>\n+int\n+main ()\n+{\n+sleep(1);\n+                      usleep(100);\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_cxx_try_compile \"$LINENO\"; then :\n+  ac_has_usleep=yes\n+else\n+  ac_has_usleep=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+      if test x\"$ac_has_usleep\" = x\"yes\"; then\n+\n+$as_echo \"#define HAVE_USLEEP 1\" >>confdefs.h\n+\n+      fi\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_has_usleep\" >&5\n+$as_echo \"$ac_has_usleep\" >&6; }\n   fi\n \n \n@@ -70449,7 +70503,7 @@ $as_echo \"$as_me: WARNING: === Symbol versioning will be disabled.\" >&2;}\n fi\n \n # For libtool versioning info, format is CURRENT:REVISION:AGE\n-libtool_VERSION=6:17:0\n+libtool_VERSION=6:18:0\n \n # Everything parsed; figure out what files and settings to use.\n case $enable_symvers in"}, {"sha": "6ca40cd266a167e3c4aaec09f120f39cc288a650", "filename": "libstdc++-v3/include/std/thread", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa66b299c8e766fb453279b55efcdd64d4ef360c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa66b299c8e766fb453279b55efcdd64d4ef360c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread?ref=aa66b299c8e766fb453279b55efcdd64d4ef360c", "patch": "@@ -251,40 +251,42 @@ _GLIBCXX_END_NAMESPACE_VERSION\n     inline thread::id\n     get_id() noexcept { return thread::id(__gthread_self()); }\n \n-#ifdef _GLIBCXX_USE_SCHED_YIELD\n     /// yield\n     inline void\n     yield() noexcept\n-    { __gthread_yield(); }\n+    {\n+#ifdef _GLIBCXX_USE_SCHED_YIELD\n+      __gthread_yield();\n #endif\n+    }\n+\n+    void\n+    __sleep_for(chrono::seconds, chrono::nanoseconds);\n \n-#ifdef _GLIBCXX_USE_NANOSLEEP\n     /// sleep_for\n     template<typename _Rep, typename _Period>\n       inline void\n       sleep_for(const chrono::duration<_Rep, _Period>& __rtime)\n       {\n-\tchrono::seconds __s =\n-\t  chrono::duration_cast<chrono::seconds>(__rtime);\n-\n-\tchrono::nanoseconds __ns =\n-\t  chrono::duration_cast<chrono::nanoseconds>(__rtime - __s);\n-\n+\tauto __s = chrono::duration_cast<chrono::seconds>(__rtime);\n+\tauto __ns = chrono::duration_cast<chrono::nanoseconds>(__rtime - __s);\n+#ifdef _GLIBCXX_USE_NANOSLEEP\n \t__gthread_time_t __ts =\n \t  {\n \t    static_cast<std::time_t>(__s.count()),\n \t    static_cast<long>(__ns.count())\n \t  };\n-\n \t::nanosleep(&__ts, 0);\n+#else\n+\t__sleep_for(__s, __ns);\n+#endif\n       }\n \n     /// sleep_until\n     template<typename _Clock, typename _Duration>\n       inline void\n       sleep_until(const chrono::time_point<_Clock, _Duration>& __atime)\n       { sleep_for(__atime - _Clock::now()); }\n-#endif\n \n   _GLIBCXX_END_NAMESPACE_VERSION\n   }"}, {"sha": "084be4261182f13d8e05d6252a2d5db70cc555cb", "filename": "libstdc++-v3/src/c++11/thread.cc", "status": "modified", "additions": 46, "deletions": 2, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa66b299c8e766fb453279b55efcdd64d4ef360c/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fthread.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa66b299c8e766fb453279b55efcdd64d4ef360c/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fthread.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fthread.cc?ref=aa66b299c8e766fb453279b55efcdd64d4ef360c", "patch": "@@ -1,6 +1,6 @@\n // thread -*- C++ -*-\n \n-// Copyright (C) 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n+// Copyright (C) 2008-2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -27,6 +27,8 @@\n #include <system_error>\n #include <cerrno>\n \n+#if defined(_GLIBCXX_HAS_GTHREADS) && defined(_GLIBCXX_USE_C99_STDINT_TR1)\n+\n #if defined(_GLIBCXX_USE_GET_NPROCS)\n # include <sys/sysinfo.h>\n # define _GLIBCXX_NPROCS get_nprocs()\n@@ -55,7 +57,13 @@ static inline int get_nprocs()\n # define _GLIBCXX_NPROCS 0\n #endif\n \n-#if defined(_GLIBCXX_HAS_GTHREADS) && defined(_GLIBCXX_USE_C99_STDINT_TR1)\n+#ifndef _GLIBCXX_USE_NANOSLEEP\n+# ifdef _GLIBCXX_HAVE_SLEEP\n+#  include <unistd.h>\n+# else\n+#  error \"No sleep function known for this target\"\n+# endif\n+#endif\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n@@ -142,6 +150,42 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   }\n \n _GLIBCXX_END_NAMESPACE_VERSION\n+\n+namespace this_thread\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+  void\n+  __sleep_for(chrono::seconds __s, chrono::nanoseconds __ns)\n+  {\n+#ifdef _GLIBCXX_USE_NANOSLEEP\n+    __gthread_time_t __ts =\n+      {\n+\tstatic_cast<std::time_t>(__s.count()),\n+\tstatic_cast<long>(__ns.count())\n+      };\n+    ::nanosleep(&__ts, 0);\n+#else\n+# ifdef _GLIBCXX_HAVE_SLEEP\n+#  ifdef _GLIBCXX_HAVE_USLEEP\n+    ::sleep(__s.count());\n+    if (__ns.count() > 0)\n+      {\n+        long __us = __ns.count() / 1000;\n+        if (__us == 0)\n+          __us = 1;\n+        ::usleep(__us);\n+      }\n+#  else\n+    ::sleep(__s.count() + (__ns >= 1000000));\n+#  endif\n+# endif\n+#endif\n+  }\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+}\n+\n } // namespace std\n \n #endif // _GLIBCXX_HAS_GTHREADS && _GLIBCXX_USE_C99_STDINT_TR1"}, {"sha": "0c32160f52fad6102051351b010d487d20047090", "filename": "libstdc++-v3/testsuite/30_threads/async/54297.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa66b299c8e766fb453279b55efcdd64d4ef360c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fasync%2F54297.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa66b299c8e766fb453279b55efcdd64d4ef360c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fasync%2F54297.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fasync%2F54297.cc?ref=aa66b299c8e766fb453279b55efcdd64d4ef360c", "patch": "@@ -5,7 +5,7 @@\n // { dg-require-cstdint \"\" }\n // { dg-require-gthreads \"\" }\n // { dg-require-atomic-builtins \"\" }\n-// { dg-require-nanosleep \"\" }\n+// { dg-require-sleep \"\" }\n \n // Copyright (C) 2012 Free Software Foundation, Inc.\n //"}, {"sha": "a5279f6d768f39c96976c8593d9efa5971e5b083", "filename": "libstdc++-v3/testsuite/30_threads/condition_variable_any/53830.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa66b299c8e766fb453279b55efcdd64d4ef360c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2F53830.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa66b299c8e766fb453279b55efcdd64d4ef360c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2F53830.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2F53830.cc?ref=aa66b299c8e766fb453279b55efcdd64d4ef360c", "patch": "@@ -5,7 +5,7 @@\n // { dg-require-cstdint \"\" }\n // { dg-require-gthreads \"\" }\n // { dg-require-sched-yield \"\" }\n-// { dg-require-nanosleep \"\" }\n+// { dg-require-sleep \"\" }\n \n // Copyright (C) 2012 Free Software Foundation, Inc.\n //"}, {"sha": "6f5dd0f3a17fda8640f1ec3b675c61ef7066d498", "filename": "libstdc++-v3/testsuite/30_threads/this_thread/2.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa66b299c8e766fb453279b55efcdd64d4ef360c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthis_thread%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa66b299c8e766fb453279b55efcdd64d4ef360c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthis_thread%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthis_thread%2F2.cc?ref=aa66b299c8e766fb453279b55efcdd64d4ef360c", "patch": "@@ -4,9 +4,8 @@\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }\n // { dg-require-gthreads \"\" }\n-// { dg-require-sched-yield \"\" }\n \n-// Copyright (C) 2008, 2009, 2010, 2011, 2012 Free Software Foundation, Inc.\n+// Copyright (C) 2008-2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the"}, {"sha": "35f65f48cb19b40303802eab3dba4fe557e13ae4", "filename": "libstdc++-v3/testsuite/30_threads/this_thread/3.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa66b299c8e766fb453279b55efcdd64d4ef360c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthis_thread%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa66b299c8e766fb453279b55efcdd64d4ef360c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthis_thread%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthis_thread%2F3.cc?ref=aa66b299c8e766fb453279b55efcdd64d4ef360c", "patch": "@@ -4,9 +4,9 @@\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }\n // { dg-require-gthreads \"\" }\n-// { dg-require-nanosleep \"\" }\n+// { dg-require-sleep \"\" }\n \n-// Copyright (C) 2008, 2009, 2010, 2011, 2012 Free Software Foundation, Inc.\n+// Copyright (C) 2008-2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the"}, {"sha": "38a2a3ce7f640da1f585089f318475ca0ddbf4e2", "filename": "libstdc++-v3/testsuite/30_threads/this_thread/4.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa66b299c8e766fb453279b55efcdd64d4ef360c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthis_thread%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa66b299c8e766fb453279b55efcdd64d4ef360c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthis_thread%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthis_thread%2F4.cc?ref=aa66b299c8e766fb453279b55efcdd64d4ef360c", "patch": "@@ -4,9 +4,9 @@\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }\n // { dg-require-gthreads \"\" }\n-// { dg-require-nanosleep \"\" }\n+// { dg-require-sleep \"\" }\n \n-// Copyright (C) 2008, 2009, 2010, 2011, 2012 Free Software Foundation, Inc.\n+// Copyright (C) 2008-2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the"}, {"sha": "6836fbce711019986ff3d47fff0b43d7d1ab2852", "filename": "libstdc++-v3/testsuite/lib/dg-options.exp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa66b299c8e766fb453279b55efcdd64d4ef360c/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Fdg-options.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa66b299c8e766fb453279b55efcdd64d4ef360c/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Fdg-options.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Fdg-options.exp?ref=aa66b299c8e766fb453279b55efcdd64d4ef360c", "patch": "@@ -143,8 +143,8 @@ proc dg-require-gthreads-timed { args } {\n     return\n }\n \n-proc dg-require-nanosleep { args } {\n-    if { ![ check_v3_target_nanosleep ] } {\n+proc dg-require-sleep { args } {\n+    if { ![ check_v3_target_sleep ] } {\n         upvar dg-do-what dg-do-what\n         set dg-do-what [list [lindex ${dg-do-what} 0] \"N\" \"P\"]\n         return"}, {"sha": "adb9c157586d17d2bedfe3436924bef24a25f221", "filename": "libstdc++-v3/testsuite/lib/libstdc++.exp", "status": "modified", "additions": 23, "deletions": 21, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa66b299c8e766fb453279b55efcdd64d4ef360c/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa66b299c8e766fb453279b55efcdd64d4ef360c/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp?ref=aa66b299c8e766fb453279b55efcdd64d4ef360c", "patch": "@@ -1352,41 +1352,43 @@ proc check_v3_target_gthreads_timed { } {\n }\n \n \n-proc check_v3_target_nanosleep { } {\n+proc check_v3_target_sleep { } {\n     global cxxflags\n     global DEFAULT_CXXFLAGS\n-    global et_nanosleep\n+    global et_sleep\n \n     global tool\n \n-    if { ![info exists et_nanosleep_target_name] } {\n-        set et_nanosleep_target_name \"\"\n+    if { ![info exists et_sleep_target_name] } {\n+        set et_sleep_target_name \"\"\n     }\n \n     # If the target has changed since we set the cached value, clear it.\n     set current_target [current_target_name]\n-    if { $current_target != $et_nanosleep_target_name } {\n-        verbose \"check_v3_target_nanosleep: `$et_nanosleep_target_name'\" 2\n-        set et_nanosleep_target_name $current_target\n-        if [info exists et_nanosleep] {\n-            verbose \"check_v3_target_nanosleep: removing cached result\" 2\n-            unset et_nanosleep\n+    if { $current_target != $et_sleep_target_name } {\n+        verbose \"check_v3_target_sleep: `$et_sleep_target_name'\" 2\n+        set et_sleep_target_name $current_target\n+        if [info exists et_sleep] {\n+            verbose \"check_v3_target_sleep: removing cached result\" 2\n+            unset et_sleep\n         }\n     }\n \n-    if [info exists et_nanosleep] {\n-        verbose \"check_v3_target_nanosleep: using cached result\" 2\n+    if [info exists et_sleep] {\n+        verbose \"check_v3_target_sleep: using cached result\" 2\n     } else {\n-        set et_nanosleep 0\n+        set et_sleep 0\n \t\n-\t# Set up and preprocess a C++0x test program that depends\n-        # on the nanosleep facilities to be available.\n-        set src nanosleep[pid].cc\n+\t# Set up and preprocess a C++11 test program that depends\n+        # on the sleep facilities to be available.\n+        set src sleep[pid].cc\n \n         set f [open $src \"w\"]\n         puts $f \"#include <bits/c++config.h>\"\n         puts $f \"#ifndef _GLIBCXX_USE_NANOSLEEP\"\n-        puts $f \"#  error No nanosleep\"\n+        puts $f \"# ifndef _GLIBCXX_HAVE_SLEEP\"\n+        puts $f \"#  error No nanosleep or sleep\"\n+        puts $f \"# endif\"\n         puts $f \"#endif\"\n         close $f\n \n@@ -1399,13 +1401,13 @@ proc check_v3_target_nanosleep { } {\n \n         if [string match \"\" $lines] {\n             # No error message, preprocessing succeeded.\n-            set et_nanosleep 1\n+            set et_sleep 1\n         } else {\n-            verbose \"check_v3_target_nanosleep: compilation failed\" 2\n+            verbose \"check_v3_target_sleep: compilation failed\" 2\n         }\n     }\n-    verbose \"check_v3_target_nanosleep: $et_nanosleep\" 2\n-    return $et_nanosleep\n+    verbose \"check_v3_target_sleep: $et_sleep\" 2\n+    return $et_sleep\n }\n \n proc check_v3_target_sched_yield { } {"}]}