{"sha": "e1a4dd13eb1eaebd0f7722839a3fe0ff85659ba1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTFhNGRkMTNlYjFlYWViZDBmNzcyMjgzOWEzZmUwZmY4NTY1OWJhMQ==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@integrable-solutions.net", "date": "2003-08-05T19:23:14Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2003-08-05T19:23:14Z"}, "message": "pretty-print.h (pp_set_line_maximum_length): Make macro.\n\n\t* pretty-print.h (pp_set_line_maximum_length): Make macro.\n\t(pp_set_prefix): Likewise.\n\t(pp_destroy_prefix): Likewise.\n\t(pp_remaining_character_count_for_line): Likewise.\n\t(pp_clear_output_area): Likewise.\n\t(pp_formatted_text): Likewise.\n\t(pp_last_position_in_text): Likewise.\n\t(pp_emit_prefix): Likewise.\n\t(pp_append_text): Likewise.\n\t(pp_flush): Likewise.\n\t(pp_format_text): Likewise.\n\t(pp_format_verbatim): Likewise.\n\t(pp_tree_identifier): Tidy.\n\t* pretty-print.c (pp_base_format_text): Rename from pp_format_text.\n\t(pp_base_format_verbatim): Rename from pp_format_verbatim.\n\t(pp_base_flush): Rename from pp_flush.\n\t(pp_base_set_line_maximum_length): Rename from\n\tpp_set_line_maximum_length.\n\t(pp_base_clear_output_area): Rename from pp_clear_output_area.\n\t(pp_base_set_prefix): Rename from pp_set_prefix.\n\t(pp_base_destroy_prefix): Rename from pp_destroy_prefix.\n\t(pp_base_emit_prefix): Rename from pp_emit_prefix.\n\t(pp_base_append_text): Rename from pp_append_text.\n\t(pp_base_formatted_text): Rename from pp_formatted_text.\n\t(pp_base_last_position_in_text): Rename from pp_last_position_in_text.\n\t(pp_base_remaining_character_count_for_line): Rename from\n\tpp_remaining_character_count_for_line.\n\t* diagnostic.h (diagnostic_format_decoder): Tidy.\n\t(diagnostic_flush_buffer): Likewise.\n\t* c-pretty-print.h: (pp_c_string_literal): Declare.\n\t(pp_c_real_literal): Likewise.\n\t(pp_c_integer_literal): Likewise.\n\t* c-pretty-print.c (pp_c_char): Use pp_string in lieu of\n\tpp_identifier.\n\t(pp_c_character_literal): Tidy.\n\t(pp_c_string_literal): Make public.\n\t(pp_c_bool_literal): Likewise.\n\t(pp_c_integer_literal): Likewise.\n\t(pp_c_real_literal): Likewise.\n\n\t* Makefile.in (C_PRETTY_PRINT_H): New variable.\n\t(c-pretty-print.o): Update dependence.\n\ncp/\n\t* cxx-pretty-print.h: New file.\n\t* cxx-pretty-print.c: Likewise.\n\t* error.c (scratch_pretty_printer): Change type.\n\t(init_error): Tidy.\n\t(dump_aggr_type): Likewise.\n\t(dump_global_iord): Likewise.\n\t(dump_expr): Likewise.\n\t(dump_char): Remove.\n\t* cp-lang.c (LANG_HOOKS_INITIALIZE_DIAGNOSTITCS): Define.\n\t(cxx_initialize_diagnostics): New function.\n\t* Make-lang.in (CXX_OBJS): Add cp/cxx-pretty-print.o\n\t(CXX_PRETTY_PRINT_H): New variable.\n\t(cp/cxx-pretty-print.o): New rule.\n\t(cp/cp-lang.o): Update dependence.\n\t(cp/error.o): Likewise.\n\nFrom-SVN: r70182", "tree": {"sha": "c9868a248f403aa9b1d76b6b3cc12ee64a26d1b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c9868a248f403aa9b1d76b6b3cc12ee64a26d1b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e1a4dd13eb1eaebd0f7722839a3fe0ff85659ba1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1a4dd13eb1eaebd0f7722839a3fe0ff85659ba1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1a4dd13eb1eaebd0f7722839a3fe0ff85659ba1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1a4dd13eb1eaebd0f7722839a3fe0ff85659ba1/comments", "author": {"login": "cxx-undef", "id": 5528103, "node_id": "MDQ6VXNlcjU1MjgxMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5528103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cxx-undef", "html_url": "https://github.com/cxx-undef", "followers_url": "https://api.github.com/users/cxx-undef/followers", "following_url": "https://api.github.com/users/cxx-undef/following{/other_user}", "gists_url": "https://api.github.com/users/cxx-undef/gists{/gist_id}", "starred_url": "https://api.github.com/users/cxx-undef/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cxx-undef/subscriptions", "organizations_url": "https://api.github.com/users/cxx-undef/orgs", "repos_url": "https://api.github.com/users/cxx-undef/repos", "events_url": "https://api.github.com/users/cxx-undef/events{/privacy}", "received_events_url": "https://api.github.com/users/cxx-undef/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "90281aecd9a65d20035a9735adb2e9b7474f6cb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90281aecd9a65d20035a9735adb2e9b7474f6cb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90281aecd9a65d20035a9735adb2e9b7474f6cb3"}], "stats": {"total": 553, "additions": 387, "deletions": 166}, "files": [{"sha": "d7342a85c57daab20a095cf9ce087c98c5355457", "filename": "gcc/ChangeLog", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1a4dd13eb1eaebd0f7722839a3fe0ff85659ba1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1a4dd13eb1eaebd0f7722839a3fe0ff85659ba1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e1a4dd13eb1eaebd0f7722839a3fe0ff85659ba1", "patch": "@@ -1,3 +1,48 @@\n+2003-08-05  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n+\n+\t* pretty-print.h (pp_set_line_maximum_length): Make macro.\n+\t(pp_set_prefix): Likewise.\n+\t(pp_destroy_prefix): Likewise.\n+\t(pp_remaining_character_count_for_line): Likewise.\n+\t(pp_clear_output_area): Likewise.\n+\t(pp_formatted_text): Likewise.\n+\t(pp_last_position_in_text): Likewise.\n+\t(pp_emit_prefix): Likewise.\n+\t(pp_append_text): Likewise.\n+\t(pp_flush): Likewise.\n+\t(pp_format_text): Likewise.\n+\t(pp_format_verbatim): Likewise.\n+\t(pp_tree_identifier): Tidy.\n+\t* pretty-print.c (pp_base_format_text): Rename from pp_format_text.\n+\t(pp_base_format_verbatim): Rename from pp_format_verbatim.\n+\t(pp_base_flush): Rename from pp_flush.\n+\t(pp_base_set_line_maximum_length): Rename from\n+\tpp_set_line_maximum_length.\n+\t(pp_base_clear_output_area): Rename from pp_clear_output_area.\n+\t(pp_base_set_prefix): Rename from pp_set_prefix.\n+\t(pp_base_destroy_prefix): Rename from pp_destroy_prefix.\n+\t(pp_base_emit_prefix): Rename from pp_emit_prefix.\n+\t(pp_base_append_text): Rename from pp_append_text.\n+\t(pp_base_formatted_text): Rename from pp_formatted_text.\n+\t(pp_base_last_position_in_text): Rename from pp_last_position_in_text.\n+\t(pp_base_remaining_character_count_for_line): Rename from\n+\tpp_remaining_character_count_for_line.\n+\t* diagnostic.h (diagnostic_format_decoder): Tidy.\n+\t(diagnostic_flush_buffer): Likewise.\n+\t* c-pretty-print.h: (pp_c_string_literal): Declare.\n+\t(pp_c_real_literal): Likewise.\n+\t(pp_c_integer_literal): Likewise.\n+\t* c-pretty-print.c (pp_c_char): Use pp_string in lieu of\n+\tpp_identifier. \n+\t(pp_c_character_literal): Tidy.\n+\t(pp_c_string_literal): Make public.\n+\t(pp_c_bool_literal): Likewise.\n+\t(pp_c_integer_literal): Likewise.\n+\t(pp_c_real_literal): Likewise.\n+\n+\t* Makefile.in (C_PRETTY_PRINT_H): New variable.\n+\t(c-pretty-print.o): Update dependence.\n+\n 2003-08-05  Chris Demetriou  <cgd@broadcom.com>\n \n \t* config/mips/mips.md (fix_truncdfsi2_macro): Properly restore"}, {"sha": "9308c28ab4f4cf68727a5f567880ac3bfd4b4ba2", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1a4dd13eb1eaebd0f7722839a3fe0ff85659ba1/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1a4dd13eb1eaebd0f7722839a3fe0ff85659ba1/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=e1a4dd13eb1eaebd0f7722839a3fe0ff85659ba1", "patch": "@@ -658,6 +658,7 @@ PREDICT_H = predict.h predict.def\n CPPLIB_H = cpplib.h line-map.h\n PRETTY_PRINT_H = pretty-print.h input.h $(OBSTACK_H)\n DIAGNOSTIC_H = diagnostic.h diagnostic.def $(PRETTY_PRINT_H)\n+C_PRETTY_PRINT_H = $(PRETTY_PRINT_H) $(C_COMMON_H) $(TREE_H)\n \n # sed inserts variable overrides after the following line.\n ####target overrides\n@@ -1326,7 +1327,7 @@ c-common.o : c-common.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n \t$(GGC_H) $(EXPR_H) $(TM_P_H) builtin-types.def builtin-attrs.def \\\n \t$(DIAGNOSTIC_H) gt-c-common.h langhooks.h varray.h $(RTL_H) \\\n \t$(TARGET_H) $(C_TREE_H)\n-c-pretty-print.o : c-pretty-print.c c-pretty-print.h pretty-print.h \\\n+c-pretty-print.o : c-pretty-print.c $(C_PRETTY_PRINT_H) \\\n \t$(C_COMMON_H) $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) real.h\n \n c-opts.o : c-opts.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\"}, {"sha": "58a66e01c998b487bd91be28be2c37533690625e", "filename": "gcc/c-pretty-print.c", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1a4dd13eb1eaebd0f7722839a3fe0ff85659ba1/gcc%2Fc-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1a4dd13eb1eaebd0f7722839a3fe0ff85659ba1/gcc%2Fc-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pretty-print.c?ref=e1a4dd13eb1eaebd0f7722839a3fe0ff85659ba1", "patch": "@@ -39,9 +39,6 @@ static void pp_c_char (c_pretty_printer, int);\n static void pp_c_character_literal (c_pretty_printer, tree);\n static void pp_c_bool_literal (c_pretty_printer, tree);\n static bool pp_c_enumerator (c_pretty_printer, tree);\n-static void pp_c_integer_literal (c_pretty_printer, tree);\n-static void pp_c_real_literal (c_pretty_printer, tree);\n-static void pp_c_string_literal (c_pretty_printer, tree);\n \n static void pp_c_primary_expression (c_pretty_printer, tree);\n \n@@ -306,34 +303,34 @@ pp_c_char (c_pretty_printer ppi, int c)\n   switch (c)\n     {\n     case TARGET_NEWLINE:\n-      pp_identifier (ppi, \"\\\\n\");\n+      pp_string (ppi, \"\\\\n\");\n       break;\n     case TARGET_TAB:\n-      pp_identifier (ppi, \"\\\\t\");\n+      pp_string (ppi, \"\\\\t\");\n       break;\n     case TARGET_VT:\n-      pp_identifier (ppi, \"\\\\v\");\n+      pp_string (ppi, \"\\\\v\");\n       break;\n     case TARGET_BS:\n-      pp_identifier (ppi, \"\\\\b\");\n+      pp_string (ppi, \"\\\\b\");\n       break;\n     case TARGET_CR:\n-      pp_identifier (ppi, \"\\\\r\");\n+      pp_string (ppi, \"\\\\r\");\n       break;\n     case TARGET_FF:\n-      pp_identifier (ppi, \"\\\\f\");\n+      pp_string (ppi, \"\\\\f\");\n       break;\n     case TARGET_BELL:\n-      pp_identifier (ppi, \"\\\\a\");\n+      pp_string (ppi, \"\\\\a\");\n       break;\n     case '\\\\':\n-      pp_identifier (ppi, \"\\\\\\\\\");\n+      pp_string (ppi, \"\\\\\\\\\");\n       break;\n     case '\\'':\n-      pp_identifier (ppi, \"\\\\'\");\n+      pp_string (ppi, \"\\\\'\");\n       break;\n     case '\\\"':\n-      pp_identifier (ppi, \"\\\\\\\"\");\n+      pp_string (ppi, \"\\\\\\\"\");\n       break;\n     default:\n       if (ISPRINT (c))\n@@ -345,7 +342,7 @@ pp_c_char (c_pretty_printer ppi, int c)\n }\n \n /* Print out a STRING literal.  */\n-static inline void\n+void\n pp_c_string_literal (c_pretty_printer ppi, tree s)\n {\n   const char *p = TREE_STRING_POINTER (s);\n@@ -361,13 +358,17 @@ pp_c_string_literal (c_pretty_printer ppi, tree s)\n static inline void\n pp_c_character_literal (c_pretty_printer ppi, tree c)\n {\n+  tree type = TREE_TYPE (c);\n   pp_quote (ppi);\n-  pp_c_char (ppi, tree_low_cst (c, 0));\n+  if (host_integerp (c, TREE_UNSIGNED (type)))\n+    pp_c_char (ppi, tree_low_cst (c, TREE_UNSIGNED (type)));\n+  else\n+    pp_scalar (ppi, \"\\\\x%x\", (unsigned) TREE_INT_CST_LOW (c));\n   pp_quote (ppi);\n }\n \n /* Print out a BOOLEAN literal.  */\n-static inline void\n+void\n pp_c_bool_literal (c_pretty_printer ppi, tree b)\n {\n   if (b == boolean_false_node || integer_zerop (b))\n@@ -423,7 +424,7 @@ pp_c_enumerator (c_pretty_printer ppi, tree e)\n }\n \n /* Print out an INTEGER constant value.  */\n-static void\n+void\n pp_c_integer_literal (c_pretty_printer ppi, tree i)\n {\n   tree type = TREE_TYPE (i);\n@@ -449,20 +450,19 @@ pp_c_integer_literal (c_pretty_printer ppi, tree i)\n \t      sprintf (pp_buffer (ppi)->digit_buffer,\n \t\t       HOST_WIDE_INT_PRINT_DOUBLE_HEX,\n \t\t       TREE_INT_CST_HIGH (i), TREE_INT_CST_LOW (i));\n-\t      pp_identifier (ppi, pp_buffer (ppi)->digit_buffer);\n-\n+\t      pp_string (ppi, pp_buffer (ppi)->digit_buffer);\n \t    }\n \t}\n     }\n }\n \n /* Print out a REAL value.  */\n-static inline void\n+void\n pp_c_real_literal (c_pretty_printer ppi, tree r)\n {\n   real_to_decimal (pp_buffer (ppi)->digit_buffer, &TREE_REAL_CST (r),\n \t\t   sizeof (pp_buffer (ppi)->digit_buffer), 0, 1);\n-  pp_identifier (ppi, pp_buffer(ppi)->digit_buffer);\n+  pp_string (ppi, pp_buffer(ppi)->digit_buffer);\n }\n \n "}, {"sha": "c093300607ceb8e2ebeb7a307f75e729924a5ccf", "filename": "gcc/c-pretty-print.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1a4dd13eb1eaebd0f7722839a3fe0ff85659ba1/gcc%2Fc-pretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1a4dd13eb1eaebd0f7722839a3fe0ff85659ba1/gcc%2Fc-pretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pretty-print.h?ref=e1a4dd13eb1eaebd0f7722839a3fe0ff85659ba1", "patch": "@@ -160,5 +160,8 @@ void pp_c_cast_expression (c_pretty_printer, tree);\n void pp_c_postfix_expression (c_pretty_printer, tree);\n void pp_c_initializer (c_pretty_printer, tree);\n void pp_c_literal (c_pretty_printer, tree);\n+void pp_c_string_literal (c_pretty_printer, tree);\n+void pp_c_real_literal (c_pretty_printer, tree);\n+void pp_c_integer_literal (c_pretty_printer, tree);\n \n #endif /* GCC_C_PRETTY_PRINTER */"}, {"sha": "531d4e88aa2a75e317b4259e107b7a721a6aea70", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1a4dd13eb1eaebd0f7722839a3fe0ff85659ba1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1a4dd13eb1eaebd0f7722839a3fe0ff85659ba1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e1a4dd13eb1eaebd0f7722839a3fe0ff85659ba1", "patch": "@@ -1,3 +1,21 @@\n+2003-08-05  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n+\n+\t* cxx-pretty-print.h: New file.\n+\t* cxx-pretty-print.c: Likewise.\n+\t* error.c (scratch_pretty_printer): Change type.\n+\t(init_error): Tidy.\n+\t(dump_aggr_type): Likewise.\n+\t(dump_global_iord): Likewise.\n+\t(dump_expr): Likewise.\n+\t(dump_char): Remove.\n+\t* cp-lang.c (LANG_HOOKS_INITIALIZE_DIAGNOSTITCS): Define.\n+\t(cxx_initialize_diagnostics): New function.\n+\t* Make-lang.in (CXX_OBJS): Add cp/cxx-pretty-print.o\n+\t(CXX_PRETTY_PRINT_H): New variable.\n+\t(cp/cxx-pretty-print.o): New rule.\n+\t(cp/cp-lang.o): Update dependence.\n+\t(cp/error.o): Likewise.\n+\n 2003-08-05  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* cp-tree.h (struct lang_decl): Don't include c_lang_decl."}, {"sha": "2eeabca735e4c1428c06352652f285876e0d88db", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1a4dd13eb1eaebd0f7722839a3fe0ff85659ba1/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1a4dd13eb1eaebd0f7722839a3fe0ff85659ba1/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=e1a4dd13eb1eaebd0f7722839a3fe0ff85659ba1", "patch": "@@ -86,8 +86,8 @@ CXX_C_OBJS = attribs.o c-common.o c-format.o c-pragma.o c-semantics.o c-lex.o \\\n CXX_OBJS = cp/call.o cp/decl.o cp/expr.o cp/pt.o cp/typeck2.o \\\n  cp/class.o cp/decl2.o cp/error.o cp/lex.o cp/parser.o cp/ptree.o cp/rtti.o \\\n  cp/typeck.o cp/cvt.o cp/except.o cp/friend.o cp/init.o cp/method.o \\\n- cp/search.o cp/semantics.o cp/tree.o cp/repo.o cp/dump.o \\\n- cp/optimize.o cp/mangle.o cp/cp-lang.o cp/name-lookup.o\n+ cp/search.o cp/semantics.o cp/tree.o cp/repo.o cp/dump.o cp/optimize.o \\\n+ cp/mangle.o cp/cp-lang.o cp/name-lookup.o cp/cxx-pretty-print.o\n \n # Use strict warnings for this front end.\n cp-warn = $(STRICT_WARN) $(WERROR)\n@@ -231,10 +231,12 @@ CXX_TREE_H = $(TREE_H) cp/name-lookup.h cp/cp-tree.h c-common.h \\\n \t$(GGC_H) \\\n \t$(srcdir)/../include/hashtab.h $(srcdir)/../include/splay-tree.h\n \n+CXX_PRETTY_PRINT_H = cp/cxx-pretty-print.h $(C_PRETTY_PRINT_H)\n+\n cp/lex.o: cp/lex.c $(CXX_TREE_H) $(TM_H) flags.h cp/lex.h \\\n   c-pragma.h toplev.h output.h input.h cp/operators.def $(TM_P_H)\n cp/cp-lang.o: cp/cp-lang.c $(CXX_TREE_H) $(TM_H) toplev.h langhooks.h \\\n-  $(LANGHOOKS_DEF_H) c-common.h\n+  $(LANGHOOKS_DEF_H) c-common.h $(CXX_PRETTY_PRINT_H) $(DIAGNOSTIC_H)\n cp/decl.o: cp/decl.c $(CXX_TREE_H) $(TM_H) flags.h cp/lex.h cp/decl.h stack.h \\\n   output.h $(EXPR_H) except.h toplev.h $(HASHTAB_H) $(RTL_H) \\\n   cp/operators.def $(TM_P_H) tree-inline.h diagnostic.h c-pragma.h \\\n@@ -266,7 +268,7 @@ cp/expr.o: cp/expr.c $(CXX_TREE_H) $(TM_H) $(RTL_H) flags.h $(EXPR_H) toplev.h \\\n cp/pt.o: cp/pt.c $(CXX_TREE_H) $(TM_H) cp/decl.h cp/lex.h \\\n   toplev.h $(RTL_H) except.h tree-inline.h gt-cp-pt.h\n cp/error.o: cp/error.c $(CXX_TREE_H) $(TM_H) toplev.h $(DIAGNOSTIC_H) \\\n-  flags.h real.h $(LANGHOOKS_DEF_H)\n+  flags.h real.h $(LANGHOOKS_DEF_H) $(CXX_PRETTY_PRINT_H)\n cp/repo.o: cp/repo.c $(CXX_TREE_H) $(TM_H) toplev.h diagnostic.h \\\n   gt-cp-repo.h\n cp/semantics.o: cp/semantics.c $(CXX_TREE_H) $(TM_H) cp/lex.h except.h toplev.h \\\n@@ -281,3 +283,6 @@ cp/parser.o: cp/parser.c $(CXX_TREE_H) $(TM_H) diagnostic.h gt-cp-parser.h outpu\n \n cp/name-lookup.o: cp/name-lookup.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n \t$(TM_H) $(CXX_TREE_H) timevar.h gt-cp-name-lookup.h\n+\n+cp/cxx-pretty-print.o: cp/cxx-pretty-print.c $(CXX_PRETTY_PRINT_H) \\\n+  $(CONFIG_H) $(SYSTEM_H) $(TM_H) coretypes.h $(CXX_TREE_H)"}, {"sha": "364c384cba3a52f3a41f42cf27b971efe28084a7", "filename": "gcc/cp/cp-lang.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1a4dd13eb1eaebd0f7722839a3fe0ff85659ba1/gcc%2Fcp%2Fcp-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1a4dd13eb1eaebd0f7722839a3fe0ff85659ba1/gcc%2Fcp%2Fcp-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-lang.c?ref=e1a4dd13eb1eaebd0f7722839a3fe0ff85659ba1", "patch": "@@ -29,6 +29,8 @@ Boston, MA 02111-1307, USA.  */\n #include \"toplev.h\"\n #include \"langhooks.h\"\n #include \"langhooks-def.h\"\n+#include \"diagnostic.h\"\n+#include \"cxx-pretty-print.h\"\n \n enum c_language_kind c_language = clk_cxx;\n \n@@ -38,6 +40,7 @@ static bool cxx_warn_unused_global_decl (tree);\n static tree cp_expr_size (tree);\n static size_t cp_tree_size (enum tree_code);\n static bool cp_var_mod_type_p (tree);\n+static void cxx_initialize_diagnostics (diagnostic_context *);\n \n #undef LANG_HOOKS_NAME\n #define LANG_HOOKS_NAME \"GNU C++\"\n@@ -51,6 +54,8 @@ static bool cp_var_mod_type_p (tree);\n #define LANG_HOOKS_CLEAR_BINDING_STACK pop_everything\n #undef LANG_HOOKS_INIT_OPTIONS\n #define LANG_HOOKS_INIT_OPTIONS c_common_init_options\n+#undef LANG_HOOKS_INITIALIZE_DIAGNOSTITCS\n+#define LANG_HOOKS_INITIALIZE_DIAGNOSTITCS cxx_initialize_diagnostics\n #undef LANG_HOOKS_HANDLE_OPTION\n #define LANG_HOOKS_HANDLE_OPTION c_common_handle_option\n #undef LANG_HOOKS_HANDLE_FILENAME\n@@ -373,3 +378,18 @@ c_reset_state (void)\n {\n   sorry (\"inter-module optimisations not implemented yet\");\n }\n+\n+/* Construct a C++-aware pretty-printer for CONTEXT.  It is assumed\n+   that CONTEXT->printer is an already constructed basic pretty_printer.  */\n+static void\n+cxx_initialize_diagnostics (diagnostic_context *context)\n+{\n+  pretty_printer *base = context->printer;\n+  cxx_pretty_printer *pp = xmalloc (sizeof (cxx_pretty_printer));\n+  memcpy (pp_base (pp), base, sizeof (pretty_printer));\n+  pp_cxx_pretty_printer_init (pp);\n+  context->printer = (pretty_printer *) pp;\n+\n+  /* It is safe to free this object because it was previously malloc()'d.  */\n+  free (base);\n+}"}, {"sha": "1595ede1a45c44900537f1a7797bcad055c924e9", "filename": "gcc/cp/cxx-pretty-print.c", "status": "added", "additions": 157, "deletions": 0, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1a4dd13eb1eaebd0f7722839a3fe0ff85659ba1/gcc%2Fcp%2Fcxx-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1a4dd13eb1eaebd0f7722839a3fe0ff85659ba1/gcc%2Fcp%2Fcxx-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcxx-pretty-print.c?ref=e1a4dd13eb1eaebd0f7722839a3fe0ff85659ba1", "patch": "@@ -0,0 +1,157 @@\n+/* Implementation of subroutines for the GNU C++ pretty-printer.\n+   Copyright (C) 2003 Free Software Foundation, Inc.\n+   Contributed by Gabriel Dos Reis <gdr@integrable-solutions.net>\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 2, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to the Free\n+Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n+02111-1307, USA.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"real.h\"\n+#include \"cxx-pretty-print.h\"\n+#include \"cp-tree.h\"\n+\f\n+/* Declarations.  */\n+\n+void\n+pp_cxx_declaration (cxx_pretty_printer *pp, tree t)\n+{\n+  pp_unsupported_tree (pp, t);\n+}\n+\n+static void\n+pp_cxx_declaration_specifiers (cxx_pretty_printer *pp, tree t)\n+{\n+  pp_unsupported_tree (pp, t);\n+}\n+\n+static void\n+pp_cxx_type_specifier (cxx_pretty_printer *pp, tree t)\n+{\n+  pp_unsupported_tree (pp, t);\n+}\n+\n+static void\n+pp_cxx_declarator (cxx_pretty_printer *pp, tree t)\n+{\n+  pp_unsupported_tree (pp, t);\n+}\n+\n+static void\n+pp_cxx_direct_declarator (cxx_pretty_printer *pp, tree t)\n+{\n+  pp_unsupported_tree (pp, t);\n+}\n+\n+static void\n+pp_cxx_parameter_declaration (cxx_pretty_printer *pp, tree t)\n+{\n+  pp_unsupported_tree (pp, t);\n+}\n+\n+static void\n+pp_cxx_type_id (cxx_pretty_printer *pp, tree t)\n+{\n+  pp_unsupported_tree (pp, t);\n+}\n+\n+/* Statements.  */\n+\n+void\n+pp_cxx_statement (cxx_pretty_printer *pp, tree t)\n+{\n+  pp_unsupported_tree (pp, t);\n+}\n+\n+/* Expressions. */\n+\n+static void\n+pp_cxx_primary_expression (cxx_pretty_printer *pp, tree t)\n+{\n+  pp_unsupported_tree (pp, t);\n+}\n+\n+static void\n+pp_cxx_postfix_expression (cxx_pretty_printer *pp, tree t)\n+{\n+  pp_unsupported_tree (pp, t);\n+}\n+\n+static void\n+pp_cxx_unary_expression (cxx_pretty_printer *pp, tree t)\n+{\n+  pp_unsupported_tree (pp, t);\n+}\n+\n+static void\n+pp_cxx_initializer (cxx_pretty_printer *pp, tree t)\n+{\n+  pp_unsupported_tree (pp, t);\n+}\n+\n+static void\n+pp_cxx_multiplicatice_expression (cxx_pretty_printer *pp, tree t)\n+{\n+  pp_unsupported_tree (pp, t);\n+}\n+\n+static void\n+pp_cxx_conditional_expression (cxx_pretty_printer *pp, tree t)\n+{\n+  pp_unsupported_tree (pp, t);\n+}\n+\n+static void\n+pp_cxx_assignment_expression (cxx_pretty_printer *pp, tree t)\n+{\n+  pp_unsupported_tree (pp, t);\n+}\n+\n+void\n+pp_cxx_expression (cxx_pretty_printer *pp, tree t)\n+{\n+  pp_unsupported_tree (pp, t);\n+}\n+\n+\n+\f\n+typedef c_pretty_print_fn pp_fun;\n+\n+void\n+pp_cxx_pretty_printer_init (cxx_pretty_printer *pp)\n+{\n+  pp_c_pretty_printer_init (pp_c_base (pp));\n+\n+  pp->c_base.declaration = (pp_fun) pp_cxx_declaration;\n+  pp->c_base.declaration_specifiers = (pp_fun) pp_cxx_declaration_specifiers;\n+  pp->c_base.type_specifier = (pp_fun) pp_cxx_type_specifier;\n+  pp->c_base.declarator = (pp_fun) pp_cxx_declarator;\n+  pp->c_base.direct_declarator = (pp_fun) pp_cxx_direct_declarator;\n+  pp->c_base.parameter_declaration = (pp_fun) pp_cxx_parameter_declaration;\n+  pp->c_base.type_id = (pp_fun) pp_cxx_type_id;\n+  pp->c_base.statement = (pp_fun) pp_cxx_statement;\n+  pp->c_base.primary_expression = (pp_fun) pp_cxx_primary_expression;\n+  pp->c_base.postfix_expression = (pp_fun) pp_cxx_postfix_expression;\n+  pp->c_base.unary_expression = (pp_fun) pp_cxx_unary_expression;\n+  pp->c_base.initializer = (pp_fun) pp_cxx_initializer;\n+  pp->c_base.multiplicative_expression = (pp_fun) pp_cxx_multiplicatice_expression;\n+  pp->c_base.conditional_expression = (pp_fun) pp_cxx_conditional_expression;\n+  pp->c_base.assignment_expression = (pp_fun) pp_cxx_assignment_expression;\n+  pp->enclosing_scope = NULL;\n+}"}, {"sha": "aa93ba4b852ba6c74d1150e3356fed83ef2ed0e3", "filename": "gcc/cp/cxx-pretty-print.h", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1a4dd13eb1eaebd0f7722839a3fe0ff85659ba1/gcc%2Fcp%2Fcxx-pretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1a4dd13eb1eaebd0f7722839a3fe0ff85659ba1/gcc%2Fcp%2Fcxx-pretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcxx-pretty-print.h?ref=e1a4dd13eb1eaebd0f7722839a3fe0ff85659ba1", "patch": "@@ -0,0 +1,44 @@\n+/* Interface for the GNU C++ pretty-printer.\n+   Copyright (C) 2003 Free Software Foundation, Inc.\n+   Contributed by Gabriel Dos Reis <gdr@integrable-solutions.net>\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 2, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to the Free\n+Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n+02111-1307, USA.  */\n+\n+#ifndef GCC_CXX_PRETTY_PRINT_H\n+#define GCC_CXX_PRETTY_PRINT_H\n+\n+#include \"c-pretty-print.h\"\n+\n+#undef pp_c_base\n+#define pp_c_base(PP) (&(PP)->c_base)\n+\n+typedef struct\n+{\n+  struct c_pretty_print_info c_base;\n+  /* This is the enclosing scope of the entity being pretty-printed.  */\n+  tree enclosing_scope;\n+} cxx_pretty_printer;\n+\n+void pp_cxx_pretty_printer_init (cxx_pretty_printer *);\n+\n+void pp_cxx_declaration (cxx_pretty_printer *, tree);\n+void pp_cxx_statement (cxx_pretty_printer *, tree);\n+void pp_cxx_expression (cxx_pretty_printer *, tree);\n+\n+\n+#endif /* GCC_CXX_PRETTY_PRINT_H */"}, {"sha": "cb31703365868c4ae481a46e8a25fbe879a526c0", "filename": "gcc/cp/error.c", "status": "modified", "additions": 21, "deletions": 113, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1a4dd13eb1eaebd0f7722839a3fe0ff85659ba1/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1a4dd13eb1eaebd0f7722839a3fe0ff85659ba1/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=e1a4dd13eb1eaebd0f7722839a3fe0ff85659ba1", "patch": "@@ -30,7 +30,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"flags.h\"\n #include \"diagnostic.h\"\n #include \"langhooks-def.h\"\n-#include \"pretty-print.h\"\n+#include \"cxx-pretty-print.h\"\n \n enum pad { none, before, after };\n \n@@ -43,7 +43,7 @@ enum pad { none, before, after };\n /* The global buffer where we dump everything.  It is there only for\n    transitional purpose.  It is expected, in the near future, to be\n    completely removed.  */\n-static pretty_printer scratch_pretty_printer;\n+static cxx_pretty_printer scratch_pretty_printer;\n #define cxx_pp (&scratch_pretty_printer)\n \n # define NEXT_CODE(T) (TREE_CODE (TREE_TYPE (T)))\n@@ -78,7 +78,6 @@ static void dump_function_name (tree, int);\n static void dump_expr_list (tree, int);\n static void dump_global_iord (tree);\n static enum pad dump_qualifiers (tree, enum pad);\n-static void dump_char (int);\n static void dump_parameters (tree, int);\n static void dump_exception_spec (tree, int);\n static const char *class_key_or_enum (tree);\n@@ -99,7 +98,7 @@ static void cp_diagnostic_finalizer (diagnostic_context *, diagnostic_info *);\n static void cp_print_error_function (diagnostic_context *, diagnostic_info *);\n \n static bool cp_printer (pretty_printer *, text_info *);\n-static void pp_non_consecutive_character (pretty_printer *, int);\n+static void pp_non_consecutive_character (cxx_pretty_printer *, int);\n static tree locate_error (const char *, va_list);\n static location_t location_of (tree);\n \n@@ -110,7 +109,8 @@ init_error (void)\n   diagnostic_finalizer (global_dc) = cp_diagnostic_finalizer;\n   diagnostic_format_decoder (global_dc) = cp_printer;\n \n-  pp_construct (cxx_pp, NULL, 0);\n+  pp_construct (pp_base (cxx_pp), NULL, 0);\n+  pp_cxx_pretty_printer_init (cxx_pp);\n }\n \n /* Dump a scope, if deemed necessary.  */\n@@ -531,7 +531,7 @@ dump_aggr_type (tree t, int flags)\n       if (flags & TFF_CLASS_KEY_OR_ENUM)\n         pp_identifier (cxx_pp, \"<anonymous>\");\n       else\n-        pp_printf (cxx_pp, \"<anonymous %s>\", variety);\n+        pp_printf (pp_base (cxx_pp), \"<anonymous %s>\", variety);\n     }\n   else\n     pp_tree_identifier (cxx_pp, name);\n@@ -758,7 +758,7 @@ dump_global_iord (tree t)\n   else\n     abort ();\n \n-  pp_printf (cxx_pp, \"(static %s for %s)\", p, input_filename);\n+  pp_printf (pp_base (cxx_pp), \"(static %s for %s)\", p, input_filename);\n }\n \n static void\n@@ -1315,50 +1315,6 @@ dump_template_parms (tree info, int primary, int flags)\n   pp_template_argument_list_end (cxx_pp);\n }\n \n-static void\n-dump_char (int c)\n-{\n-  switch (c)\n-    {\n-    case TARGET_NEWLINE:\n-      pp_string (cxx_pp, \"\\\\n\");\n-      break;\n-    case TARGET_TAB:\n-      pp_string (cxx_pp, \"\\\\t\");\n-      break;\n-    case TARGET_VT:\n-      pp_string (cxx_pp, \"\\\\v\");\n-      break;\n-    case TARGET_BS:\n-      pp_string (cxx_pp, \"\\\\b\");\n-      break;\n-    case TARGET_CR:\n-      pp_string (cxx_pp, \"\\\\r\");\n-      break;\n-    case TARGET_FF:\n-      pp_string (cxx_pp, \"\\\\f\");\n-      break;\n-    case TARGET_BELL:\n-      pp_string (cxx_pp, \"\\\\a\");\n-      break;\n-    case '\\\\':\n-      pp_string (cxx_pp, \"\\\\\\\\\");\n-      break;\n-    case '\\'':\n-      pp_string (cxx_pp, \"\\\\'\");\n-      break;\n-    case '\\\"':\n-      pp_string (cxx_pp, \"\\\\\\\"\");\n-      break;\n-    default:\n-      if (ISPRINT (c))\n-\tpp_character (cxx_pp, c);\n-      else\n-        pp_scalar (cxx_pp, \"\\\\%03o\", (unsigned) c);\n-      break;\n-    }\n-}\n-\n /* Print out a list of initializers (subr of dump_expr) */\n \n static void\n@@ -1418,55 +1374,16 @@ dump_expr (tree t, int flags)\n                 pp_left_paren (cxx_pp);\n                 dump_type (type, flags);\n                 pp_right_paren (cxx_pp);\n-                goto do_int;\n-\t      }\n-\t  }\n-\telse if (type == boolean_type_node)\n-\t  {\n-\t    if (t == boolean_false_node || integer_zerop (t))\n-\t      pp_identifier (cxx_pp, \"false\");\n-\t    else if (t == boolean_true_node)\n-\t      pp_identifier (cxx_pp, \"true\");\n-\t  }\n-\telse if (type == char_type_node)\n-\t  {\n-            pp_quote (cxx_pp);\n-\t    if (host_integerp (t, TREE_UNSIGNED (type)))\n-\t      dump_char (tree_low_cst (t, TREE_UNSIGNED (type)));\n-\t    else\n-\t      pp_printf (cxx_pp, \"\\\\x%x\",\n-                         (unsigned int) TREE_INT_CST_LOW (t));\n-            pp_quote (cxx_pp);\n-\t  }\n-\telse\n-\t  {\n-\t    do_int:\n-\t    if (! host_integerp (t, 0))\n-\t      {\n-\t        tree val = t;\n-\n-\t        if (tree_int_cst_sgn (val) < 0)\n-\t          {\n-                    pp_minus (cxx_pp);\n-\t\t    val = build_int_2 (-TREE_INT_CST_LOW (val),\n-\t\t\t\t       ~TREE_INT_CST_HIGH (val)\n-\t                               + !TREE_INT_CST_LOW (val));\n-\t          }\n-\t\tsprintf (cxx_pp->buffer->digit_buffer,\n-                         HOST_WIDE_INT_PRINT_DOUBLE_HEX,\n-\t\t\t TREE_INT_CST_HIGH (val), TREE_INT_CST_LOW (val));\n-\t\tpp_string (cxx_pp, cxx_pp->buffer->digit_buffer);\n+                pp_c_integer_literal (pp_c_base (cxx_pp), t);\n \t      }\n-\t    else\n-\t      pp_wide_integer (cxx_pp, TREE_INT_CST_LOW (t));\n \t  }\n+        else\n+          pp_c_integer_literal (pp_c_base (cxx_pp), t);\n       }\n       break;\n \n     case REAL_CST:\n-      real_to_decimal (cxx_pp->buffer->digit_buffer, &TREE_REAL_CST (t),\n-\t\t       sizeof (cxx_pp->buffer->digit_buffer), 0, 1);\n-      pp_string (cxx_pp, cxx_pp->buffer->digit_buffer);\n+      pp_c_real_literal (pp_c_base (cxx_pp), t);\n       break;\n \n     case PTRMEM_CST:\n@@ -1477,16 +1394,7 @@ dump_expr (tree t, int flags)\n       break;\n \n     case STRING_CST:\n-      {\n-\tconst char *p = TREE_STRING_POINTER (t);\n-\tint len = TREE_STRING_LENGTH (t) - 1;\n-\tint i;\n-\n-\tpp_doublequote (cxx_pp);\n-\tfor (i = 0; i < len; i++)\n-\t  dump_char (p[i]);\n-\tpp_doublequote (cxx_pp);\n-      }\n+      pp_c_string_literal (pp_c_base (cxx_pp), t);\n       break;\n \n     case COMPOUND_EXPR:\n@@ -2268,7 +2176,7 @@ void\n cxx_print_error_function (diagnostic_context *context, const char *file)\n {\n   lhd_print_error_function (context, file);\n-  pp_set_prefix (context->printer, file);\n+  pp_base_set_prefix (context->printer, file);\n   maybe_print_instantiation_context (context);\n }\n \n@@ -2279,14 +2187,14 @@ cp_diagnostic_starter (diagnostic_context *context,\n   diagnostic_report_current_module (context);\n   cp_print_error_function (context, diagnostic);\n   maybe_print_instantiation_context (context);\n-  pp_set_prefix (context->printer, diagnostic_build_prefix (diagnostic));\n+  pp_base_set_prefix (context->printer, diagnostic_build_prefix (diagnostic));\n }\n \n static void\n cp_diagnostic_finalizer (diagnostic_context *context,\n                          diagnostic_info *diagnostic ATTRIBUTE_UNUSED)\n {\n-  pp_destroy_prefix (context->printer);\n+  pp_base_destroy_prefix (context->printer);\n }\n \n /* Print current function onto BUFFER, in the process of reporting\n@@ -2302,18 +2210,18 @@ cp_print_error_function (diagnostic_context *context,\n         ? file_name_as_prefix (diagnostic->location.file)\n         : NULL;\n \n-      pp_set_prefix (context->printer, new_prefix);\n+      pp_base_set_prefix (context->printer, new_prefix);\n \n       if (current_function_decl == NULL)\n-        pp_string (context->printer, \"At global scope:\");\n+        pp_base_string (context->printer, \"At global scope:\");\n       else\n         pp_printf (context->printer, \"In %s `%s':\",\n                    function_category (current_function_decl),\n                    cxx_printable_name (current_function_decl, 2));\n-      pp_newline (context->printer);\n+      pp_base_newline (context->printer);\n \n       diagnostic_set_last_function (context);\n-      pp_destroy_prefix (context->printer);\n+      pp_base_destroy_prefix (context->printer);\n       context->printer->prefix = old_prefix;\n     }\n }\n@@ -2461,7 +2369,7 @@ cp_printer (pretty_printer *pp, text_info *text)\n       return false;\n     }\n \n-  pp_string (pp, result);\n+  pp_base_string (pp, result);\n   return true;\n #undef next_tree\n #undef next_tcode\n@@ -2470,7 +2378,7 @@ cp_printer (pretty_printer *pp, text_info *text)\n }\n \n static void\n-pp_non_consecutive_character (pretty_printer *pp, int c)\n+pp_non_consecutive_character (cxx_pretty_printer *pp, int c)\n {\n   const char *p = pp_last_position_in_text (pp);\n "}, {"sha": "9087617e4d1c04a2ee6a36bce1ff608f2d51c853", "filename": "gcc/diagnostic.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1a4dd13eb1eaebd0f7722839a3fe0ff85659ba1/gcc%2Fdiagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1a4dd13eb1eaebd0f7722839a3fe0ff85659ba1/gcc%2Fdiagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.h?ref=e1a4dd13eb1eaebd0f7722839a3fe0ff85659ba1", "patch": "@@ -110,7 +110,7 @@ struct diagnostic_context\n #define diagnostic_auxiliary_data(DC) (DC)->x_data\n \n /* Same as pp_format_decoder.  Works on 'diagnostic_context *'.  */\n-#define diagnostic_format_decoder(DC) pp_format_decoder ((DC)->printer)\n+#define diagnostic_format_decoder(DC) ((DC)->printer->format_decoder)\n \n /* Same as output_prefixing_rule.  Works on 'diagnostic_context *'.  */\n #define diagnostic_prefixing_rule(DC) ((DC)->printer->prefixing_rule)\n@@ -119,7 +119,7 @@ struct diagnostic_context\n    Zero means don't wrap lines.  */\n #define diagnostic_line_cutoff(DC) ((DC)->printer->ideal_maximum_length)\n \n-#define diagnostic_flush_buffer(DC) pp_flush ((DC)->printer)\n+#define diagnostic_flush_buffer(DC) pp_base_flush ((DC)->printer)\n \n /* True if the last function in which a diagnostic was reported is\n    different from the current one.  */"}, {"sha": "9d0ed01d7cc9b048c1662ec5698d61341b9d9d3d", "filename": "gcc/pretty-print.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1a4dd13eb1eaebd0f7722839a3fe0ff85659ba1/gcc%2Fpretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1a4dd13eb1eaebd0f7722839a3fe0ff85659ba1/gcc%2Fpretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpretty-print.c?ref=e1a4dd13eb1eaebd0f7722839a3fe0ff85659ba1", "patch": "@@ -181,7 +181,7 @@ pp_append_r (pretty_printer *pp, const char *start, int length)\n    %*.s: a substring the length of which is specified by an integer.\n    %H: location_t.  */\n void\n-pp_format_text (pretty_printer *pp, text_info *text)\n+pp_base_format_text (pretty_printer *pp, text_info *text)\n {\n   for (; *text->format_spec; ++text->format_spec)\n     {\n@@ -320,7 +320,7 @@ pp_format_text (pretty_printer *pp, text_info *text)\n /* Helper subroutine of output_verbatim and verbatim. Do the appropriate\n    settings needed by BUFFER for a verbatim formatting.  */\n void\n-pp_format_verbatim (pretty_printer *pp, text_info *text)\n+pp_base_format_verbatim (pretty_printer *pp, text_info *text)\n {\n   diagnostic_prefixing_rule_t rule = pp_prefixing_rule (pp);\n   int line_cutoff = pp_line_cutoff (pp);\n@@ -337,7 +337,7 @@ pp_format_verbatim (pretty_printer *pp, text_info *text)\n \n /* Flush the content of BUFFER onto the attached stream.  */\n void\n-pp_flush (pretty_printer *pp)\n+pp_base_flush (pretty_printer *pp)\n {\n   pp_write_text_to_stream (pp);\n   pp_clear_state (pp);\n@@ -349,23 +349,23 @@ pp_flush (pretty_printer *pp)\n    output in line-wrapping mode.  A LENGTH value 0 suppresses\n    line-wrapping.  */\n void\n-pp_set_line_maximum_length (pretty_printer *pp, int length)\n+pp_base_set_line_maximum_length (pretty_printer *pp, int length)\n {\n   pp_line_cutoff (pp) = length;\n   pp_set_real_maximum_length (pp);\n }\n \n /* Clear PRETTY-PRINTER output area text info.  */\n void\n-pp_clear_output_area (pretty_printer *pp)\n+pp_base_clear_output_area (pretty_printer *pp)\n {\n   obstack_free (&pp->buffer->obstack, obstack_base (&pp->buffer->obstack));\n   pp->buffer->line_length = 0;\n }\n \n /* Set PREFIX for PRETTY-PRINTER.  */\n void\n-pp_set_prefix (pretty_printer *pp, const char *prefix)\n+pp_base_set_prefix (pretty_printer *pp, const char *prefix)\n {\n   pp->prefix = prefix;\n   pp_set_real_maximum_length (pp);\n@@ -375,7 +375,7 @@ pp_set_prefix (pretty_printer *pp, const char *prefix)\n \n /* Free PRETTY-PRINTER's prefix, a previously malloc()'d string.  */\n void\n-pp_destroy_prefix (pretty_printer *pp)\n+pp_base_destroy_prefix (pretty_printer *pp)\n {\n   if (pp->prefix != NULL)\n     {\n@@ -386,7 +386,7 @@ pp_destroy_prefix (pretty_printer *pp)\n \n /* Write out PRETTY-PRINTER's prefix.  */\n void\n-pp_emit_prefix (pretty_printer *pp)\n+pp_base_emit_prefix (pretty_printer *pp)\n {\n   if (pp->prefix != NULL)\n     {\n@@ -436,7 +436,7 @@ pp_construct (pretty_printer *pp, const char *prefix, int maximum_length)\n    whitespace if appropriate.  The caller must ensure that it is\n    safe to do so.  */\n void\n-pp_append_text (pretty_printer *pp, const char *start, const char *end)\n+pp_base_append_text (pretty_printer *pp, const char *start, const char *end)\n {\n   /* Emit prefix and skip whitespace if we're starting a new line.  */\n   if (pp->buffer->line_length == 0)\n@@ -452,7 +452,7 @@ pp_append_text (pretty_printer *pp, const char *start, const char *end)\n /* Finishes constructing a NULL-terminated character string representing\n    the PRETTY-PRINTED text.  */\n const char *\n-pp_formatted_text (pretty_printer *pp)\n+pp_base_formatted_text (pretty_printer *pp)\n {\n   obstack_1grow (&pp->buffer->obstack, '\\0');\n   return pp_formatted_text_data (pp);\n@@ -461,7 +461,7 @@ pp_formatted_text (pretty_printer *pp)\n /*  Return a pointer to the last character emitted in PRETTY-PRINTER's\n     output area.  A NULL pointer means no character available.  */\n const char *\n-pp_last_position_in_text (const pretty_printer *pp)\n+pp_base_last_position_in_text (const pretty_printer *pp)\n {\n   const char *p = NULL;\n   struct obstack *text = &pp->buffer->obstack;\n@@ -474,7 +474,7 @@ pp_last_position_in_text (const pretty_printer *pp)\n /* Return the amount of characters PRETTY-PRINTER can accept to\n    make a full line.  Meaningfull only in line-wrapping mode.  */\n int\n-pp_remaining_character_count_for_line (pretty_printer *pp)\n+pp_base_remaining_character_count_for_line (pretty_printer *pp)\n {\n   return pp->maximum_length - pp->buffer->line_length;\n }"}, {"sha": "484f6913608e45905c1e3eeb5d399e88ca82d399", "filename": "gcc/pretty-print.h", "status": "modified", "additions": 33, "deletions": 13, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1a4dd13eb1eaebd0f7722839a3fe0ff85659ba1/gcc%2Fpretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1a4dd13eb1eaebd0f7722839a3fe0ff85659ba1/gcc%2Fpretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpretty-print.h?ref=e1a4dd13eb1eaebd0f7722839a3fe0ff85659ba1", "patch": "@@ -145,9 +145,29 @@ struct pretty_print_info\n   bool need_newline;\n };\n \n+#define pp_set_line_maximum_length(PP, L) \\\n+   pp_base_set_line_maximum_length (pp_base (PP), L)\n+#define pp_set_prefix(PP, P)    pp_base_set_prefix (pp_base (PP), P)\n+#define pp_destroy_prefix(PP)   pp_base_destroy_prefix (pp_base (PP))\n+#define pp_remaining_character_count_for_line(PP) \\\n+  pp_base_remaining_character_count_for_line (pp_base (PP))\n+#define pp_clear_output_area(PP) \\\n+  pp_base_clear_output_area (pp_base (PP))\n+#define pp_formatted_text(PP)   pp_base_formatted_text (pp_base (PP))\n+#define pp_last_position_in_text(PP) \\\n+  pp_base_last_position_in_text (pp_base (PP))\n+#define pp_emit_prefix(PP)      pp_base_emit_prefix (pp_base (PP))\n+#define pp_append_text(PP, B, E) \\\n+  pp_base_append_text (pp_base (PP), B, E)\n+#define pp_flush(PP)            pp_base_flush (pp_base (PP))\n+#define pp_format_text(PP, TI)  pp_base_format_text (pp_base (PP), TI)\n+#define pp_format_verbatim(PP, TI) \\\n+  pp_base_format_verbatim (pp_base (PP), TI)\n+\n #define pp_character(PP, C)     pp_base_character (pp_base (PP), C)\n #define pp_string(PP, S)        pp_base_string (pp_base (PP), S)\n #define pp_newline(PP)          pp_base_newline (pp_base (PP))\n+\n #define pp_space(PP)            pp_character (PP, ' ')\n #define pp_left_paren(PP)       pp_character (PP, '(')\n #define pp_right_paren(PP)      pp_character (PP, ')')\n@@ -202,7 +222,7 @@ struct pretty_print_info\n \n #define pp_identifier(PP, ID)  pp_string (PP, ID)\n #define pp_tree_identifier(PP, T)                      \\\n-  pp_append_text(pp_base (PP), IDENTIFIER_POINTER (T), \\\n+  pp_append_text(PP, IDENTIFIER_POINTER (T), \\\n                  IDENTIFIER_POINTER (T) + IDENTIFIER_LENGTH (T))\n \n #define pp_unsupported_tree(PP, T)                         \\\n@@ -216,20 +236,20 @@ struct pretty_print_info\n #define pp_base(PP) (PP)\n \n extern void pp_construct (pretty_printer *, const char *, int);\n-extern void pp_set_line_maximum_length (pretty_printer *, int);\n-extern void pp_set_prefix (pretty_printer *, const char *);\n-extern void pp_destroy_prefix (pretty_printer *);\n-extern int pp_remaining_character_count_for_line (pretty_printer *);\n-extern void pp_clear_output_area (pretty_printer *);\n-extern const char *pp_formatted_text (pretty_printer *);\n-extern const char *pp_last_position_in_text (const pretty_printer *);\n-extern void pp_emit_prefix (pretty_printer *);\n-extern void pp_append_text (pretty_printer *, const char *, const char *);\n+extern void pp_base_set_line_maximum_length (pretty_printer *, int);\n+extern void pp_base_set_prefix (pretty_printer *, const char *);\n+extern void pp_base_destroy_prefix (pretty_printer *);\n+extern int pp_base_remaining_character_count_for_line (pretty_printer *);\n+extern void pp_base_clear_output_area (pretty_printer *);\n+extern const char *pp_base_formatted_text (pretty_printer *);\n+extern const char *pp_base_last_position_in_text (const pretty_printer *);\n+extern void pp_base_emit_prefix (pretty_printer *);\n+extern void pp_base_append_text (pretty_printer *, const char *, const char *);\n extern void pp_printf (pretty_printer *, const char *, ...) ATTRIBUTE_PRINTF_2;\n extern void pp_verbatim (pretty_printer *, const char *, ...);\n-extern void pp_flush (pretty_printer *);\n-extern void pp_format_text (pretty_printer *, text_info *);\n-extern void pp_format_verbatim (pretty_printer *, text_info *);\n+extern void pp_base_flush (pretty_printer *);\n+extern void pp_base_format_text (pretty_printer *, text_info *);\n+extern void pp_base_format_verbatim (pretty_printer *, text_info *);\n \n extern void pp_base_newline (pretty_printer *);\n extern void pp_base_character (pretty_printer *, int);"}]}