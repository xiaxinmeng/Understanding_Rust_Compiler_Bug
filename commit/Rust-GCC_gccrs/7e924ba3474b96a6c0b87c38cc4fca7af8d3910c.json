{"sha": "7e924ba3474b96a6c0b87c38cc4fca7af8d3910c", "node_id": "C_kwDOANBUbNoAKDdlOTI0YmEzNDc0Yjk2YTZjMGI4N2MzOGNjNGZjYTdhZjhkMzkxMGM", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2022-10-25T03:22:38Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2022-10-26T09:05:09Z"}, "message": "RISC-V: ADJUST_NUNITS according to -march.\n\nThis patch fixed PR107357: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=107357\n\ngcc/ChangeLog:\n\n\tPR target/107357\n\t* config/riscv/riscv-modes.def (VECTOR_BOOL_MODE): Set to minimum size.\n\t(ADJUST_NUNITS): Adjust according to -march.\n\t(ADJUST_BYTESIZE): Ditto.\n\t* config/riscv/riscv-protos.h (riscv_v_ext_enabled_vector_mode_p):\n\tRemove.\n\t(riscv_v_ext_vector_mode_p): Change function implementation.\n\t* config/riscv/riscv-vector-builtins.cc (rvv_switcher::rvv_switcher):\n\tChange to riscv_v_ext_vector_mode_p.\n\t(register_builtin_type): Ditto.\n\t* config/riscv/riscv.cc (riscv_v_ext_vector_mode_p): Change to enabled\n\tmodes.\n\t(ENTRY): Ditto.\n\t(riscv_v_ext_enabled_vector_mode_p): Remove.\n\t(riscv_v_adjust_nunits): New function.\n\t(riscv_vector_mode_supported_p): Use riscv_v_ext_vector_mode_p instead.\n\t* config/riscv/riscv.h (riscv_v_adjust_nunits): New function.", "tree": {"sha": "d51fea3e62451d2aefb266d0a2614700b5bce70a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d51fea3e62451d2aefb266d0a2614700b5bce70a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e924ba3474b96a6c0b87c38cc4fca7af8d3910c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e924ba3474b96a6c0b87c38cc4fca7af8d3910c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e924ba3474b96a6c0b87c38cc4fca7af8d3910c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e924ba3474b96a6c0b87c38cc4fca7af8d3910c/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f556cd8bd7929be8b73c66d55f98feac8c9ef1ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f556cd8bd7929be8b73c66d55f98feac8c9ef1ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f556cd8bd7929be8b73c66d55f98feac8c9ef1ee"}], "stats": {"total": 103, "additions": 50, "deletions": 53}, "files": [{"sha": "556b5c552537be88dd7ab1cb831bd2123ad60ede", "filename": "gcc/config/riscv/riscv-modes.def", "status": "modified", "additions": 33, "deletions": 30, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e924ba3474b96a6c0b87c38cc4fca7af8d3910c/gcc%2Fconfig%2Friscv%2Friscv-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e924ba3474b96a6c0b87c38cc4fca7af8d3910c/gcc%2Fconfig%2Friscv%2Friscv-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-modes.def?ref=7e924ba3474b96a6c0b87c38cc4fca7af8d3910c", "patch": "@@ -37,21 +37,24 @@ FLOAT_MODE (TF, 16, ieee_quad_format);\n    | VNx32BI  | 1             | 2             |\n    | VNx64BI  | N/A           | 1             |  */\n \n-VECTOR_BOOL_MODE (VNx1BI, 1, BI, 8);\n-VECTOR_BOOL_MODE (VNx2BI, 2, BI, 8);\n-VECTOR_BOOL_MODE (VNx4BI, 4, BI, 8);\n-VECTOR_BOOL_MODE (VNx8BI, 8, BI, 8);\n-VECTOR_BOOL_MODE (VNx16BI, 16, BI, 8);\n-VECTOR_BOOL_MODE (VNx32BI, 32, BI, 8);\n+/* For RVV modes, each boolean value occupies 1-bit.\n+   4th argument is specify the minmial possible size of the vector mode,\n+   and will adjust to the right size by ADJUST_BYTESIZE.  */\n+VECTOR_BOOL_MODE (VNx1BI, 1, BI, 1);\n+VECTOR_BOOL_MODE (VNx2BI, 2, BI, 1);\n+VECTOR_BOOL_MODE (VNx4BI, 4, BI, 1);\n+VECTOR_BOOL_MODE (VNx8BI, 8, BI, 1);\n+VECTOR_BOOL_MODE (VNx16BI, 16, BI, 2);\n+VECTOR_BOOL_MODE (VNx32BI, 32, BI, 4);\n VECTOR_BOOL_MODE (VNx64BI, 64, BI, 8);\n \n-ADJUST_NUNITS (VNx1BI, riscv_vector_chunks * 1);\n-ADJUST_NUNITS (VNx2BI, riscv_vector_chunks * 2);\n-ADJUST_NUNITS (VNx4BI, riscv_vector_chunks * 4);\n-ADJUST_NUNITS (VNx8BI, riscv_vector_chunks * 8);\n-ADJUST_NUNITS (VNx16BI, riscv_vector_chunks * 16);\n-ADJUST_NUNITS (VNx32BI, riscv_vector_chunks * 32);\n-ADJUST_NUNITS (VNx64BI, riscv_vector_chunks * 64);\n+ADJUST_NUNITS (VNx1BI, riscv_v_adjust_nunits (VNx1BImode, 1));\n+ADJUST_NUNITS (VNx2BI, riscv_v_adjust_nunits (VNx2BImode, 2));\n+ADJUST_NUNITS (VNx4BI, riscv_v_adjust_nunits (VNx4BImode, 4));\n+ADJUST_NUNITS (VNx8BI, riscv_v_adjust_nunits (VNx8BImode, 8));\n+ADJUST_NUNITS (VNx16BI, riscv_v_adjust_nunits (VNx16BImode, 16));\n+ADJUST_NUNITS (VNx32BI, riscv_v_adjust_nunits (VNx32BImode, 32));\n+ADJUST_NUNITS (VNx64BI, riscv_v_adjust_nunits (VNx64BImode, 64));\n \n ADJUST_ALIGNMENT (VNx1BI, 1);\n ADJUST_ALIGNMENT (VNx2BI, 1);\n@@ -67,7 +70,7 @@ ADJUST_BYTESIZE (VNx4BI, riscv_vector_chunks * riscv_bytes_per_vector_chunk);\n ADJUST_BYTESIZE (VNx8BI, riscv_vector_chunks * riscv_bytes_per_vector_chunk);\n ADJUST_BYTESIZE (VNx16BI, riscv_vector_chunks * riscv_bytes_per_vector_chunk);\n ADJUST_BYTESIZE (VNx32BI, riscv_vector_chunks * riscv_bytes_per_vector_chunk);\n-ADJUST_BYTESIZE (VNx64BI, riscv_vector_chunks * riscv_bytes_per_vector_chunk);\n+ADJUST_BYTESIZE (VNx64BI, riscv_v_adjust_nunits (VNx64BImode, 8));\n \n /*\n    | Mode        | MIN_VLEN=32 | MIN_VLEN=32 | MIN_VLEN=64 | MIN_VLEN=64 |\n@@ -101,13 +104,13 @@ ADJUST_BYTESIZE (VNx64BI, riscv_vector_chunks * riscv_bytes_per_vector_chunk);\n   VECTOR_MODES_WITH_PREFIX (VNx, INT, 8 * NVECS, 0);                           \\\n   VECTOR_MODES_WITH_PREFIX (VNx, FLOAT, 8 * NVECS, 0);                         \\\n                                                                                \\\n-  ADJUST_NUNITS (VB##QI, riscv_vector_chunks * NVECS * 8);                     \\\n-  ADJUST_NUNITS (VH##HI, riscv_vector_chunks * NVECS * 4);                     \\\n-  ADJUST_NUNITS (VS##SI, riscv_vector_chunks * NVECS * 2);                     \\\n-  ADJUST_NUNITS (VD##DI, riscv_vector_chunks * NVECS);                         \\\n-  ADJUST_NUNITS (VH##HF, riscv_vector_chunks * NVECS * 4);                     \\\n-  ADJUST_NUNITS (VS##SF, riscv_vector_chunks * NVECS * 2);                     \\\n-  ADJUST_NUNITS (VD##DF, riscv_vector_chunks * NVECS);                         \\\n+  ADJUST_NUNITS (VB##QI, riscv_v_adjust_nunits (VB##QI##mode, NVECS * 8));     \\\n+  ADJUST_NUNITS (VH##HI, riscv_v_adjust_nunits (VH##HI##mode, NVECS * 4));     \\\n+  ADJUST_NUNITS (VS##SI, riscv_v_adjust_nunits (VS##SI##mode, NVECS * 2));     \\\n+  ADJUST_NUNITS (VD##DI, riscv_v_adjust_nunits (VD##DI##mode, NVECS));         \\\n+  ADJUST_NUNITS (VH##HF, riscv_v_adjust_nunits (VH##HF##mode, NVECS * 4));     \\\n+  ADJUST_NUNITS (VS##SF, riscv_v_adjust_nunits (VS##SF##mode, NVECS * 2));     \\\n+  ADJUST_NUNITS (VD##DF, riscv_v_adjust_nunits (VD##DF##mode, NVECS));         \\\n                                                                                \\\n   ADJUST_ALIGNMENT (VB##QI, 1);                                                \\\n   ADJUST_ALIGNMENT (VH##HI, 2);                                                \\\n@@ -128,9 +131,9 @@ RVV_MODES (8, VNx64, VNx32, VNx16, VNx8)\n \n VECTOR_MODES_WITH_PREFIX (VNx, INT, 4, 0);\n VECTOR_MODES_WITH_PREFIX (VNx, FLOAT, 4, 0);\n-ADJUST_NUNITS (VNx4QI, riscv_vector_chunks * 4);\n-ADJUST_NUNITS (VNx2HI, riscv_vector_chunks * 2);\n-ADJUST_NUNITS (VNx2HF, riscv_vector_chunks * 2);\n+ADJUST_NUNITS (VNx4QI, riscv_v_adjust_nunits (VNx4QImode, 4));\n+ADJUST_NUNITS (VNx2HI, riscv_v_adjust_nunits (VNx2HImode, 2));\n+ADJUST_NUNITS (VNx2HF, riscv_v_adjust_nunits (VNx2HFmode, 2));\n ADJUST_ALIGNMENT (VNx4QI, 1);\n ADJUST_ALIGNMENT (VNx2HI, 2);\n ADJUST_ALIGNMENT (VNx2HF, 2);\n@@ -139,28 +142,28 @@ ADJUST_ALIGNMENT (VNx2HF, 2);\n    So we use 'VECTOR_MODE_WITH_PREFIX' to define VNx1SImode and VNx1SFmode.  */\n VECTOR_MODE_WITH_PREFIX (VNx, INT, SI, 1, 0);\n VECTOR_MODE_WITH_PREFIX (VNx, FLOAT, SF, 1, 0);\n-ADJUST_NUNITS (VNx1SI, riscv_vector_chunks);\n-ADJUST_NUNITS (VNx1SF, riscv_vector_chunks);\n+ADJUST_NUNITS (VNx1SI, riscv_v_adjust_nunits (VNx1SImode, 1));\n+ADJUST_NUNITS (VNx1SF, riscv_v_adjust_nunits (VNx1SFmode, 1));\n ADJUST_ALIGNMENT (VNx1SI, 4);\n ADJUST_ALIGNMENT (VNx1SF, 4);\n \n VECTOR_MODES_WITH_PREFIX (VNx, INT, 2, 0);\n-ADJUST_NUNITS (VNx2QI, riscv_vector_chunks * 2);\n+ADJUST_NUNITS (VNx2QI, riscv_v_adjust_nunits (VNx2QImode, 2));\n ADJUST_ALIGNMENT (VNx2QI, 1);\n \n /* 'VECTOR_MODES_WITH_PREFIX' does not allow ncomponents < 2.\n    So we use 'VECTOR_MODE_WITH_PREFIX' to define VNx1HImode and VNx1HFmode.  */\n VECTOR_MODE_WITH_PREFIX (VNx, INT, HI, 1, 0);\n VECTOR_MODE_WITH_PREFIX (VNx, FLOAT, HF, 1, 0);\n-ADJUST_NUNITS (VNx1HI, riscv_vector_chunks);\n-ADJUST_NUNITS (VNx1HF, riscv_vector_chunks);\n+ADJUST_NUNITS (VNx1HI, riscv_v_adjust_nunits (VNx1HImode, 1));\n+ADJUST_NUNITS (VNx1HF, riscv_v_adjust_nunits (VNx1HFmode, 1));\n ADJUST_ALIGNMENT (VNx1HI, 2);\n ADJUST_ALIGNMENT (VNx1HF, 2);\n \n /* 'VECTOR_MODES_WITH_PREFIX' does not allow ncomponents < 2.\n    So we use 'VECTOR_MODE_WITH_PREFIX' to define VNx1QImode.  */\n VECTOR_MODE_WITH_PREFIX (VNx, INT, QI, 1, 0);\n-ADJUST_NUNITS (VNx1QI, riscv_vector_chunks);\n+ADJUST_NUNITS (VNx1QI, riscv_v_adjust_nunits (VNx1QImode, 1));\n ADJUST_ALIGNMENT (VNx1QI, 1);\n \n /* TODO: According to RISC-V 'V' ISA spec, the maximun vector length can"}, {"sha": "5a718bb62b45339e95a601db67d02921488c1a49", "filename": "gcc/config/riscv/riscv-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e924ba3474b96a6c0b87c38cc4fca7af8d3910c/gcc%2Fconfig%2Friscv%2Friscv-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e924ba3474b96a6c0b87c38cc4fca7af8d3910c/gcc%2Fconfig%2Friscv%2Friscv-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-protos.h?ref=7e924ba3474b96a6c0b87c38cc4fca7af8d3910c", "patch": "@@ -75,8 +75,8 @@ extern bool riscv_store_data_bypass_p (rtx_insn *, rtx_insn *);\n extern rtx riscv_gen_gpr_save_insn (struct riscv_frame_info *);\n extern bool riscv_gpr_save_operation_p (rtx);\n extern void riscv_reinit (void);\n-extern bool riscv_v_ext_enabled_vector_mode_p (machine_mode);\n extern poly_uint64 riscv_regmode_natural_size (machine_mode);\n+extern bool riscv_v_ext_vector_mode_p (machine_mode);\n \n /* Routines implemented in riscv-c.cc.  */\n void riscv_cpu_cpp_builtins (cpp_reader *);"}, {"sha": "06a4a85087df08920a0daebafe91367eb1339951", "filename": "gcc/config/riscv/riscv-vector-builtins.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e924ba3474b96a6c0b87c38cc4fca7af8d3910c/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e924ba3474b96a6c0b87c38cc4fca7af8d3910c/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc?ref=7e924ba3474b96a6c0b87c38cc4fca7af8d3910c", "patch": "@@ -202,7 +202,7 @@ rvv_switcher::rvv_switcher ()\n   memcpy (m_old_have_regs_of_mode, have_regs_of_mode,\n \t  sizeof (have_regs_of_mode));\n   for (int i = 0; i < NUM_MACHINE_MODES; ++i)\n-    if (riscv_v_ext_enabled_vector_mode_p ((machine_mode) i))\n+    if (riscv_v_ext_vector_mode_p ((machine_mode) i))\n       have_regs_of_mode[i] = true;\n }\n \n@@ -271,7 +271,7 @@ register_builtin_type (vector_type_index type, tree eltype, machine_mode mode)\n   builtin_types[type].scalar = eltype;\n   builtin_types[type].scalar_ptr = build_pointer_type (eltype);\n   builtin_types[type].scalar_const_ptr = build_const_pointer (eltype);\n-  if (!riscv_v_ext_enabled_vector_mode_p (mode))\n+  if (!riscv_v_ext_vector_mode_p (mode))\n     return;\n \n   tree vectype = build_vector_type_for_mode (eltype, mode);"}, {"sha": "fac8def31d85f7d66226d637d64dc93d6ba2195a", "filename": "gcc/config/riscv/riscv.cc", "status": "modified", "additions": 13, "deletions": 20, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e924ba3474b96a6c0b87c38cc4fca7af8d3910c/gcc%2Fconfig%2Friscv%2Friscv.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e924ba3474b96a6c0b87c38cc4fca7af8d3910c/gcc%2Fconfig%2Friscv%2Friscv.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.cc?ref=7e924ba3474b96a6c0b87c38cc4fca7af8d3910c", "patch": "@@ -941,30 +941,12 @@ riscv_valid_lo_sum_p (enum riscv_symbol_type sym_type, machine_mode mode,\n   return true;\n }\n \n-/* Return true if mode is the RVV mode.  */\n-\n-static bool\n-riscv_v_ext_vector_mode_p (machine_mode mode)\n-{\n-#define ENTRY(MODE, REQUIREMENT)                                               \\\n-  case MODE##mode:                                                             \\\n-    return true;\n-  switch (mode)\n-    {\n-#include \"riscv-vector-switch.def\"\n-    default:\n-      return false;\n-    }\n-\n-  return false;\n-}\n-\n /* Return true if mode is the RVV enabled mode.\n    For example: 'VNx1DI' mode is disabled if MIN_VLEN == 32.\n    'VNx1SI' mode is enabled if MIN_VLEN == 32.  */\n \n bool\n-riscv_v_ext_enabled_vector_mode_p (machine_mode mode)\n+riscv_v_ext_vector_mode_p (machine_mode mode)\n {\n #define ENTRY(MODE, REQUIREMENT)                                               \\\n   case MODE##mode:                                                             \\\n@@ -979,6 +961,17 @@ riscv_v_ext_enabled_vector_mode_p (machine_mode mode)\n   return false;\n }\n \n+/* Call from ADJUST_NUNITS in riscv-modes.def. Return the correct\n+   NUNITS size for corresponding machine_mode.  */\n+\n+poly_int64\n+riscv_v_adjust_nunits (machine_mode mode, int scale)\n+{\n+  if (riscv_v_ext_vector_mode_p (mode))\n+    return riscv_vector_chunks * scale;\n+  return scale;\n+}\n+\n /* Return true if X is a valid address for machine mode MODE.  If it is,\n    fill in INFO appropriately.  STRICT_P is true if REG_OK_STRICT is in\n    effect.  */\n@@ -6420,7 +6413,7 @@ static bool\n riscv_vector_mode_supported_p (machine_mode mode)\n {\n   if (TARGET_VECTOR)\n-    return riscv_v_ext_enabled_vector_mode_p (mode);\n+    return riscv_v_ext_vector_mode_p (mode);\n \n   return false;\n }"}, {"sha": "1385f0a16dcb51fc49040939d3fcceafcb00ac06", "filename": "gcc/config/riscv/riscv.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e924ba3474b96a6c0b87c38cc4fca7af8d3910c/gcc%2Fconfig%2Friscv%2Friscv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e924ba3474b96a6c0b87c38cc4fca7af8d3910c/gcc%2Fconfig%2Friscv%2Friscv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.h?ref=7e924ba3474b96a6c0b87c38cc4fca7af8d3910c", "patch": "@@ -1019,6 +1019,7 @@ extern bool riscv_slow_unaligned_access_p;\n extern unsigned riscv_stack_boundary;\n extern unsigned riscv_bytes_per_vector_chunk;\n extern poly_uint16 riscv_vector_chunks;\n+extern poly_int64 riscv_v_adjust_nunits (enum machine_mode, int);\n /* The number of bits and bytes in a RVV vector.  */\n #define BITS_PER_RISCV_VECTOR (poly_uint16 (riscv_vector_chunks * riscv_bytes_per_vector_chunk * 8))\n #define BYTES_PER_RISCV_VECTOR (poly_uint16 (riscv_vector_chunks * riscv_bytes_per_vector_chunk))"}]}