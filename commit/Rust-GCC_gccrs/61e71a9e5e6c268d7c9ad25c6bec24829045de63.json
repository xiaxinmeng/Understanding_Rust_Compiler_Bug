{"sha": "61e71a9e5e6c268d7c9ad25c6bec24829045de63", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjFlNzFhOWU1ZTZjMjY4ZDdjOWFkMjVjNmJlYzI0ODI5MDQ1ZGU2Mw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2005-10-17T17:25:17Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2005-10-17T17:25:17Z"}, "message": "re PR c++/24386 (wrong virtual function called in template member)\n\ncp:\n\tPR c++/24386\n\t* cp-tree.h (BASELINK_QUALIFIED_P): New.\n\t* pt.c (tsubst_copy_and_build): <CALL_EXPR case>: Use it.\n\t* typeck.c (finish_class_member_access_expr): Set it.\ntestsuite:\n\tPR c++/24386\n\t* g++.dg/template/overload7.C: New.\n\nFrom-SVN: r105507", "tree": {"sha": "5055e39b8fa5c9ba880cc4f3b2854285492cc5a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5055e39b8fa5c9ba880cc4f3b2854285492cc5a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61e71a9e5e6c268d7c9ad25c6bec24829045de63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61e71a9e5e6c268d7c9ad25c6bec24829045de63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61e71a9e5e6c268d7c9ad25c6bec24829045de63", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61e71a9e5e6c268d7c9ad25c6bec24829045de63/comments", "author": null, "committer": null, "parents": [{"sha": "7010f39ea6c659080e9aaf7327585a58f4d1a666", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7010f39ea6c659080e9aaf7327585a58f4d1a666", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7010f39ea6c659080e9aaf7327585a58f4d1a666"}], "stats": {"total": 73, "additions": 66, "deletions": 7}, "files": [{"sha": "08344ee960ae4bef99ba53f08cbcd9d52c638228", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61e71a9e5e6c268d7c9ad25c6bec24829045de63/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61e71a9e5e6c268d7c9ad25c6bec24829045de63/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=61e71a9e5e6c268d7c9ad25c6bec24829045de63", "patch": "@@ -1,5 +1,10 @@\n 2005-10-17  Nathan Sidwell  <nathan@codesourcery.com>\n \n+\tPR c++/24386\n+\t* cp-tree.h (BASELINK_QUALIFIED_P): New.\n+\t* pt.c (tsubst_copy_and_build): <CALL_EXPR case>: Use it.\n+\t* typeck.c (finish_class_member_access_expr): Set it.\n+\n \tPR c++/21353\n \t* decl.c (check_default_argument): Don't check\n \tprocessing_template_decl or uses_template_parms here."}, {"sha": "b63d08e5fcce8573561b4b350fc1319cfde8a15f", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61e71a9e5e6c268d7c9ad25c6bec24829045de63/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61e71a9e5e6c268d7c9ad25c6bec24829045de63/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=61e71a9e5e6c268d7c9ad25c6bec24829045de63", "patch": "@@ -52,6 +52,7 @@ struct diagnostic_context;\n       TYPENAME_IS_ENUM_P (in TYPENAME_TYPE)\n       REFERENCE_REF_P (in INDIRECT_EXPR)\n       QUALIFIED_NAME_IS_TEMPLATE (in SCOPE_REF)\n+      BASELINK_QUALIFIED_P (in BASELINK)\n    1: IDENTIFIER_VIRTUAL_P (in IDENTIFIER_NODE)\n       TI_PENDING_TEMPLATE_FLAG.\n       TEMPLATE_PARMS_FOR_INLINE.\n@@ -341,6 +342,9 @@ struct tree_overload GTY(())\n    requested.  */\n #define BASELINK_OPTYPE(NODE) \\\n   (TREE_CHAIN (BASELINK_CHECK (NODE)))\n+/* Non-zero if this baselink was from a qualified lookup.  */\n+#define BASELINK_QUALIFIED_P(NODE) \\\n+  TREE_LANG_FLAG_0 (BASELINK_CHECK (NODE))\n \n struct tree_baselink GTY(())\n {"}, {"sha": "d25130a078d5445e13a6150b1d332064cb803724", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61e71a9e5e6c268d7c9ad25c6bec24829045de63/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61e71a9e5e6c268d7c9ad25c6bec24829045de63/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=61e71a9e5e6c268d7c9ad25c6bec24829045de63", "patch": "@@ -8720,9 +8720,17 @@ tsubst_copy_and_build (tree t,\n \t  }\n \telse\n \t  {\n-\t    qualified_p = (TREE_CODE (function) == COMPONENT_REF\n-\t\t\t   && (TREE_CODE (TREE_OPERAND (function, 1))\n-\t\t\t       == SCOPE_REF));\n+\t    if (TREE_CODE (function) == COMPONENT_REF)\n+\t      {\n+\t\ttree op = TREE_OPERAND (function, 1);\n+\n+\t\tqualified_p = (TREE_CODE (op) == SCOPE_REF\n+\t\t\t       || (BASELINK_P (op)\n+\t\t\t\t   && BASELINK_QUALIFIED_P (op)));\n+\t      }\n+\t    else\n+\t      qualified_p = false;\n+\t    \n \t    function = tsubst_copy_and_build (function, args, complain,\n \t\t\t\t\t      in_decl,\n \t\t\t\t\t      !qualified_p);"}, {"sha": "a7edfc12e7f5155a2762c4a2d51983d67b9a45ca", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61e71a9e5e6c268d7c9ad25c6bec24829045de63/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61e71a9e5e6c268d7c9ad25c6bec24829045de63/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=61e71a9e5e6c268d7c9ad25c6bec24829045de63", "patch": "@@ -2055,10 +2055,18 @@ finish_class_member_access_expr (tree object, tree name, bool template_p)\n   expr = build_class_member_access_expr (object, member, access_path,\n \t\t\t\t\t /*preserve_reference=*/false);\n   if (processing_template_decl && expr != error_mark_node)\n-    return build_min_non_dep (COMPONENT_REF, expr,\n-\t\t\t      orig_object,\n-\t\t\t      BASELINK_P (member) ? member : orig_name,\n-\t\t\t      NULL_TREE);\n+    {\n+      if (BASELINK_P (member))\n+\t{\n+\t  if (TREE_CODE (orig_name) == SCOPE_REF)\n+\t    BASELINK_QUALIFIED_P (member) = 1;\n+\t  orig_name = member;\n+\t}\n+      return build_min_non_dep (COMPONENT_REF, expr,\n+\t\t\t\torig_object, orig_name,\n+\t\t\t\tNULL_TREE);\n+    }\n+  \n   return expr;\n }\n "}, {"sha": "319812ac4297fd64056c4d26f7629d72908c97ac", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61e71a9e5e6c268d7c9ad25c6bec24829045de63/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61e71a9e5e6c268d7c9ad25c6bec24829045de63/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=61e71a9e5e6c268d7c9ad25c6bec24829045de63", "patch": "@@ -1,5 +1,8 @@\n 2005-10-17  Nathan Sidwell  <nathan@codesourcery.com>\n \n+\tPR c++/24386\n+\t* g++.dg/template/overload7.C: New.\n+\n \tPR c++/22551\n \t* g++.dg/other/switch2.C: Remove expected warnings.\n "}, {"sha": "28bd16c4e54022fcd0dc0a40689ff4d5054eb678", "filename": "gcc/testsuite/g++.dg/template/overload7.C", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61e71a9e5e6c268d7c9ad25c6bec24829045de63/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Foverload7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61e71a9e5e6c268d7c9ad25c6bec24829045de63/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Foverload7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Foverload7.C?ref=61e71a9e5e6c268d7c9ad25c6bec24829045de63", "patch": "@@ -0,0 +1,31 @@\n+// { dg-do run }\n+\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 17 Oct 2005 <nathan@codesourcery.com>\n+\n+// PR 24386:Wrong virtual function called\n+// Origin:  Scott Snyder snyder@fnal.gov\n+\n+struct A\n+{\n+  virtual int Foo () { return 1; }\n+};\n+struct B : public A\n+{\n+  virtual int Foo () { return 2; }\n+};\n+\n+template <class T>\n+int Bar (T *a)\n+{\n+  if (static_cast<A*>(a)->A::Foo () != 1)\n+    return 1;\n+  if (static_cast<A*>(a)->Foo () != 2)\n+    return 2;\n+  return 0;\n+}\n+\n+int main ()\n+{\n+  return Bar (new B);\n+}"}]}