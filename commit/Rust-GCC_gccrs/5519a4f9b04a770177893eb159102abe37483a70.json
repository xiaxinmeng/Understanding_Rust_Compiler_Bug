{"sha": "5519a4f9b04a770177893eb159102abe37483a70", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTUxOWE0ZjliMDRhNzcwMTc3ODkzZWIxNTkxMDJhYmUzNzQ4M2E3MA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@hxi.com", "date": "2001-10-31T14:08:11Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2001-10-31T14:08:11Z"}, "message": "builtins.def: Fix comment typos.\n\n2001-10-31  Kazu Hirata  <kazu@hxi.com>\n\n\t* builtins.def: Fix comment typos.\n\t* config/alpha.c: Likewise.\n\t* config/arm/arm.c: Likewise.\n\t* config/avr/avr.h: Likewise.\n\t* config/d30v/d30v.c: Likewise.\n\t* config/d30v/d30v.h: Likewise.\n\t* config/d30v/d30v.md: Likewise.\n\t* config/dsp16xx/dsp16xx.c: Likewise.\n\t* config/fr30/fr30.c: Likewise.\n\t* config/fr30/fr30.md: Likewise.\n\t* config/i386/i386.c: Likewise.\n\t* config/i860/i860.c: Likewise.\n\t* config/i960/i960.c: Likewise.\n\t* config/ia64/ia64.c: Likewise.\n\t* config/mips/mips.c: Likewise.\n\t* config/pa/pa.c: Likewise.\n\t* config/rs6000/rs6000.c: Likewise.\n\t* config/s390/s390.c: Likewise.\n\t* config/sparc/sparc.c: Likewise.\n\nFrom-SVN: r46676", "tree": {"sha": "93c4c65de95841020f86611408200847171a559a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/93c4c65de95841020f86611408200847171a559a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5519a4f9b04a770177893eb159102abe37483a70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5519a4f9b04a770177893eb159102abe37483a70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5519a4f9b04a770177893eb159102abe37483a70", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5519a4f9b04a770177893eb159102abe37483a70/comments", "author": null, "committer": null, "parents": [{"sha": "51ad6d81f4b5380307e5fa7b96e6132ebeac4fd1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51ad6d81f4b5380307e5fa7b96e6132ebeac4fd1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51ad6d81f4b5380307e5fa7b96e6132ebeac4fd1"}], "stats": {"total": 70, "additions": 46, "deletions": 24}, "files": [{"sha": "ce28052d0ef1aab941d3008a19bfe4166531bfa2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5519a4f9b04a770177893eb159102abe37483a70/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5519a4f9b04a770177893eb159102abe37483a70/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5519a4f9b04a770177893eb159102abe37483a70", "patch": "@@ -1,3 +1,25 @@\n+2001-10-31  Kazu Hirata  <kazu@hxi.com>\n+\n+\t* builtins.def: Fix comment typos.\n+\t* config/alpha.c: Likewise.\n+\t* config/arm/arm.c: Likewise.\n+\t* config/avr/avr.h: Likewise.\n+\t* config/d30v/d30v.c: Likewise.\n+\t* config/d30v/d30v.h: Likewise.\n+\t* config/d30v/d30v.md: Likewise.\n+\t* config/dsp16xx/dsp16xx.c: Likewise.\n+\t* config/fr30/fr30.c: Likewise.\n+\t* config/fr30/fr30.md: Likewise.\n+\t* config/i386/i386.c: Likewise.\n+\t* config/i860/i860.c: Likewise.\n+\t* config/i960/i960.c: Likewise.\n+\t* config/ia64/ia64.c: Likewise.\n+\t* config/mips/mips.c: Likewise.\n+\t* config/pa/pa.c: Likewise.\n+\t* config/rs6000/rs6000.c: Likewise.\n+\t* config/s390/s390.c: Likewise.\n+\t* config/sparc/sparc.c: Likewise.\n+\n 2001-10-30  Kazu Hirata  <kazu@hxi.com>\n \n \t* config/mips/elf.h: Fix comment formatting."}, {"sha": "204da8e09b7b6b77d20df9f5c4f44a7d5d5a9787", "filename": "gcc/builtins.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5519a4f9b04a770177893eb159102abe37483a70/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5519a4f9b04a770177893eb159102abe37483a70/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=5519a4f9b04a770177893eb159102abe37483a70", "patch": "@@ -72,7 +72,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \n /* A library builtin (like __builtin_strchr) is a builtin equivalent\n    of an ANSI/ISO standard library function.  In addition to the\n-   `__builtin' version, we will create a an ordinary version (e.g,\n+   `__builtin' version, we will create an ordinary version (e.g,\n    `strchr') as well.  If we cannot compute the answer using the\n    builtin function, we will fall back to the standard library\n    version. */"}, {"sha": "4affac34edc3307c74427d8b63bf5858536b4704", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5519a4f9b04a770177893eb159102abe37483a70/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5519a4f9b04a770177893eb159102abe37483a70/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=5519a4f9b04a770177893eb159102abe37483a70", "patch": "@@ -1305,7 +1305,7 @@ reg_no_subreg_operand (op, mode)\n   return register_operand (op, mode);\n }\n \n-/* Recognize a addition operation that includes a constant.  Used to\n+/* Recognize an addition operation that includes a constant.  Used to\n    convince reload to canonize (plus (plus reg c1) c2) during register\n    elimination.  */\n "}, {"sha": "92baca1a263d79cbc7e8b49961d15dab311dd349", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5519a4f9b04a770177893eb159102abe37483a70/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5519a4f9b04a770177893eb159102abe37483a70/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=5519a4f9b04a770177893eb159102abe37483a70", "patch": "@@ -5219,7 +5219,7 @@ struct minipool_node\n      pushing fixes for forward references, all entries are sorted in order\n      of increasing max_address.  */\n   HOST_WIDE_INT max_address;\n-  /* Similarly for a entry inserted for a backwards ref.  */\n+  /* Similarly for an entry inserted for a backwards ref.  */\n   HOST_WIDE_INT min_address;\n   /* The number of fixes referencing this entry.  This can become zero\n      if we \"unpush\" an entry.  In this case we ignore the entry when we"}, {"sha": "15b2a297c299034cec98d235070f0139b92cfcca", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5519a4f9b04a770177893eb159102abe37483a70/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5519a4f9b04a770177893eb159102abe37483a70/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=5519a4f9b04a770177893eb159102abe37483a70", "patch": "@@ -791,7 +791,7 @@ enum reg_class {\n    class of registers.  In that case, secondary reload registers are\n    not needed and would not be helpful.  Instead, a stack location\n    must be used to perform the copy and the `movM' pattern should use\n-   memory as a intermediate storage.  This case often occurs between\n+   memory as an intermediate storage.  This case often occurs between\n    floating-point and general registers.  */\n \n /* `SECONDARY_MEMORY_NEEDED (CLASS1, CLASS2, M)'"}, {"sha": "5d3d7cb1e16e160465f9875ac71c71dba5e09d7e", "filename": "gcc/config/d30v/d30v.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5519a4f9b04a770177893eb159102abe37483a70/gcc%2Fconfig%2Fd30v%2Fd30v.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5519a4f9b04a770177893eb159102abe37483a70/gcc%2Fconfig%2Fd30v%2Fd30v.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fd30v%2Fd30v.c?ref=5519a4f9b04a770177893eb159102abe37483a70", "patch": "@@ -2461,7 +2461,7 @@ d30v_output_function_epilogue (stream, size)\n \f\n \n /* Called after register allocation to add any instructions needed for\n-   the epilogue.  Using a epilogue insn is favored compared to putting\n+   the epilogue.  Using an epilogue insn is favored compared to putting\n    all of the instructions in output_function_prologue(), since it\n    allows the scheduler to intermix instructions with the saves of the\n    caller saved registers.  In some cases, it might be necessary to"}, {"sha": "783455fe6b9f82972ea4637830580584441e6479", "filename": "gcc/config/d30v/d30v.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5519a4f9b04a770177893eb159102abe37483a70/gcc%2Fconfig%2Fd30v%2Fd30v.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5519a4f9b04a770177893eb159102abe37483a70/gcc%2Fconfig%2Fd30v%2Fd30v.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fd30v%2Fd30v.h?ref=5519a4f9b04a770177893eb159102abe37483a70", "patch": "@@ -1649,7 +1649,7 @@ extern enum reg_class reg_class_from_letter[];\n    registers can only be copied to memory and not to another class of\n    registers.  In that case, secondary reload registers are not needed and\n    would not be helpful.  Instead, a stack location must be used to perform the\n-   copy and the `movM' pattern should use memory as a intermediate storage.\n+   copy and the `movM' pattern should use memory as an intermediate storage.\n    This case often occurs between floating-point and general registers.  */\n \n #define SECONDARY_RELOAD_CLASS(CLASS, MODE, X)\t\t\t\t\\\n@@ -1962,7 +1962,7 @@ typedef struct d30v_stack {\n    value of 4096 is suitable for most systems.  */\n /* #define STACK_CHECK_PROBE_INTERVAL */\n \n-/* A integer which is nonzero if GNU CC should perform the stack probe as a\n+/* An integer which is nonzero if GNU CC should perform the stack probe as a\n    load instruction and zero if GNU CC should use a store instruction.  The\n    default is zero, which is the most efficient choice on most systems.  */\n /* #define STACK_CHECK_PROBE_LOAD */"}, {"sha": "c8832ee5cb238f58f984110e713a13b21344f76b", "filename": "gcc/config/d30v/d30v.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5519a4f9b04a770177893eb159102abe37483a70/gcc%2Fconfig%2Fd30v%2Fd30v.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5519a4f9b04a770177893eb159102abe37483a70/gcc%2Fconfig%2Fd30v%2Fd30v.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fd30v%2Fd30v.md?ref=5519a4f9b04a770177893eb159102abe37483a70", "patch": "@@ -2949,7 +2949,7 @@\n }\")\n \n ;; Called after register allocation to add any instructions needed for the\n-;; epilogue.  Using a epilogue insn is favored compared to putting all of the\n+;; epilogue.  Using an epilogue insn is favored compared to putting all of the\n ;; instructions in output_function_epilogue (), since it allows the scheduler\n ;; to intermix instructions with the saves of the caller saved registers.  In\n ;; some cases, it might be necessary to emit a barrier instruction as the last"}, {"sha": "5604d4d2717cd772e50d1d2190e770c7425172d3", "filename": "gcc/config/dsp16xx/dsp16xx.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5519a4f9b04a770177893eb159102abe37483a70/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5519a4f9b04a770177893eb159102abe37483a70/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.c?ref=5519a4f9b04a770177893eb159102abe37483a70", "patch": "@@ -2392,7 +2392,7 @@ dsp16xx_address_cost (addr)\n \n    On the dsp1610 the first four words of args are normally in registers\n    and the rest are pushed. If we a long or on float mode, the argument\n-   must begin on a even register boundary\n+   must begin on an even register boundary\n \n    Note that FUNCTION_ARG and FUNCTION_INCOMING_ARG were different.\n    For structures that are passed in memory, but could have been"}, {"sha": "275efcd8dcc5f6e196d7c214f284dcac2cb02f55", "filename": "gcc/config/fr30/fr30.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5519a4f9b04a770177893eb159102abe37483a70/gcc%2Fconfig%2Ffr30%2Ffr30.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5519a4f9b04a770177893eb159102abe37483a70/gcc%2Fconfig%2Ffr30%2Ffr30.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.c?ref=5519a4f9b04a770177893eb159102abe37483a70", "patch": "@@ -332,7 +332,7 @@ fr30_expand_prologue ()\n }\n \n /* Called after register allocation to add any instructions needed for the\n-   epilogue.  Using a epilogue insn is favored compared to putting all of the\n+   epilogue.  Using an epilogue insn is favored compared to putting all of the\n    instructions in output_function_epilogue(), since it allows the scheduler\n    to intermix instructions with the restores of the caller saved registers.\n    In some cases, it might be necessary to emit a barrier instruction as the"}, {"sha": "18621e492829bd2a85141561e098caa4ac5016fd", "filename": "gcc/config/fr30/fr30.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5519a4f9b04a770177893eb159102abe37483a70/gcc%2Fconfig%2Ffr30%2Ffr30.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5519a4f9b04a770177893eb159102abe37483a70/gcc%2Fconfig%2Ffr30%2Ffr30.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.md?ref=5519a4f9b04a770177893eb159102abe37483a70", "patch": "@@ -1372,7 +1372,7 @@\n )\n \n ;; Called after register allocation to add any instructions needed for the\n-;; epilogue.  Using a epilogue insn is favored compared to putting all of the\n+;; epilogue.  Using an epilogue insn is favored compared to putting all of the\n ;; instructions in output_function_epilogue(), since it allows the scheduler\n ;; to intermix instructions with the restores of the caller saved registers.\n ;; In some cases, it might be necessary to emit a barrier instruction as the"}, {"sha": "9bd0ed7cba91ec39742599cecdc7e82dd6ef460d", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5519a4f9b04a770177893eb159102abe37483a70/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5519a4f9b04a770177893eb159102abe37483a70/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=5519a4f9b04a770177893eb159102abe37483a70", "patch": "@@ -9008,7 +9008,7 @@ ix86_expand_movstr (dst, src, count_exp, align_exp)\n   if (GET_CODE (align_exp) == CONST_INT)\n     align = INTVAL (align_exp);\n \n-  /* This simple hack avoids all inlining code and simplifies code bellow.  */\n+  /* This simple hack avoids all inlining code and simplifies code below.  */\n   if (!TARGET_ALIGN_STRINGOPS)\n     align = 64;\n \n@@ -9229,7 +9229,7 @@ ix86_expand_clrstr (src, count_exp, align_exp)\n   if (GET_CODE (align_exp) == CONST_INT)\n     align = INTVAL (align_exp);\n \n-  /* This simple hack avoids all inlining code and simplifies code bellow.  */\n+  /* This simple hack avoids all inlining code and simplifies code below.  */\n   if (!TARGET_ALIGN_STRINGOPS)\n     align = 32;\n "}, {"sha": "26a82f19384281f6cf2ce1dda6b611a1d9b0d67e", "filename": "gcc/config/i860/i860.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5519a4f9b04a770177893eb159102abe37483a70/gcc%2Fconfig%2Fi860%2Fi860.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5519a4f9b04a770177893eb159102abe37483a70/gcc%2Fconfig%2Fi860%2Fi860.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fi860.c?ref=5519a4f9b04a770177893eb159102abe37483a70", "patch": "@@ -466,7 +466,7 @@ load_operand (op, mode)\n   return (memory_operand (op, mode) || indexed_operand (op, mode));\n }\n \n-/* Return truth value of whether OP is a integer which fits the\n+/* Return truth value of whether OP is an integer which fits the\n    range constraining immediate operands in add/subtract insns.  */\n \n int\n@@ -477,7 +477,7 @@ small_int (op, mode)\n   return (GET_CODE (op) == CONST_INT && SMALL_INT (op));\n }\n \n-/* Return truth value of whether OP is a integer which fits the\n+/* Return truth value of whether OP is an integer which fits the\n    range constraining immediate operands in logic insns.  */\n \n int"}, {"sha": "bb839e24249f5cd429086c450c7bb83966cdc589", "filename": "gcc/config/i960/i960.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5519a4f9b04a770177893eb159102abe37483a70/gcc%2Fconfig%2Fi960%2Fi960.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5519a4f9b04a770177893eb159102abe37483a70/gcc%2Fconfig%2Fi960%2Fi960.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.c?ref=5519a4f9b04a770177893eb159102abe37483a70", "patch": "@@ -183,7 +183,7 @@ signed_arith_operand (op, mode)\n   return (register_operand (op, mode) || signed_literal (op, mode));\n }\n \n-/* Return truth value of whether OP is a integer which fits the\n+/* Return truth value of whether OP is an integer which fits the\n    range constraining immediate operands in three-address insns.  */\n \n int"}, {"sha": "aef598bbf8ef577fd0876b8894d4caa2bcd201f0", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5519a4f9b04a770177893eb159102abe37483a70/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5519a4f9b04a770177893eb159102abe37483a70/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=5519a4f9b04a770177893eb159102abe37483a70", "patch": "@@ -2275,7 +2275,7 @@ ia64_expand_prologue ()\n }\n \n /* Called after register allocation to add any instructions needed for the\n-   epilogue.  Using a epilogue insn is favored compared to putting all of the\n+   epilogue.  Using an epilogue insn is favored compared to putting all of the\n    instructions in output_function_prologue(), since it allows the scheduler\n    to intermix instructions with the saves of the caller saved registers.  In\n    some cases, it might be necessary to emit a barrier instruction as the last"}, {"sha": "51a445304cd3fe11354140dd3fe2ff1cc16f350e", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5519a4f9b04a770177893eb159102abe37483a70/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5519a4f9b04a770177893eb159102abe37483a70/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=5519a4f9b04a770177893eb159102abe37483a70", "patch": "@@ -509,7 +509,7 @@ arith32_operand (op, mode)\n   return register_operand (op, mode);\n }\n \n-/* Return truth value of whether OP is a integer which fits in 16 bits  */\n+/* Return truth value of whether OP is an integer which fits in 16 bits.  */\n \n int\n small_int (op, mode)"}, {"sha": "3c63a4a082e55c5dae012ed0f1920e4a9d07516a", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5519a4f9b04a770177893eb159102abe37483a70/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5519a4f9b04a770177893eb159102abe37483a70/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=5519a4f9b04a770177893eb159102abe37483a70", "patch": "@@ -497,7 +497,7 @@ arith_double_operand (op, mode)\n \t\t  == ((CONST_DOUBLE_LOW (op) & 0x1000) == 0))));\n }\n \n-/* Return truth value of whether OP is a integer which fits the\n+/* Return truth value of whether OP is an integer which fits the\n    range constraining immediate operands in three-address insns, or\n    is an integer register.  */\n \n@@ -519,7 +519,7 @@ ireg_operand (op, mode)\n   return (GET_CODE (op) == REG && REGNO (op) > 0 && REGNO (op) < 32);\n }\n \n-/* Return truth value of whether OP is a integer which fits the\n+/* Return truth value of whether OP is an integer which fits the\n    range constraining immediate operands in three-address insns.  */\n \n int"}, {"sha": "a87e4ef2c0fee0f50d9e133fc6d7d657f24d8777", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5519a4f9b04a770177893eb159102abe37483a70/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5519a4f9b04a770177893eb159102abe37483a70/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=5519a4f9b04a770177893eb159102abe37483a70", "patch": "@@ -604,7 +604,7 @@ short_cint_operand (op, mode)\n \t  && CONST_OK_FOR_LETTER_P (INTVAL (op), 'I'));\n }\n \n-/* Similar for a unsigned D field.  */\n+/* Similar for an unsigned D field.  */\n \n int\n u_short_cint_operand (op, mode)"}, {"sha": "334abbe149455336093d7ec25d244959c4b882e6", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5519a4f9b04a770177893eb159102abe37483a70/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5519a4f9b04a770177893eb159102abe37483a70/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=5519a4f9b04a770177893eb159102abe37483a70", "patch": "@@ -1559,8 +1559,8 @@ print_operand_address (file, addr)\n     'N': print the second word of a DImode operand.\n     'M': print the second word of a TImode operand.\n \n-    'b': print integer X as if it's a unsigned byte.\n-    'x': print integer X as if it's a unsigned word.\n+    'b': print integer X as if it's an unsigned byte.\n+    'x': print integer X as if it's an unsigned word.\n     'h': print integer X as if it's a signed word.  */\n \n void"}, {"sha": "876e3586ee8695b837fc9f01f230af8a0967d7e7", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5519a4f9b04a770177893eb159102abe37483a70/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5519a4f9b04a770177893eb159102abe37483a70/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=5519a4f9b04a770177893eb159102abe37483a70", "patch": "@@ -1119,7 +1119,7 @@ arith10_double_operand (op, mode)\n \t      && (unsigned HOST_WIDE_INT) (INTVAL (op) + 0x200) < 0x400));\n }\n \n-/* Return truth value of whether OP is a integer which fits the\n+/* Return truth value of whether OP is an integer which fits the\n    range constraining immediate operands in most three-address insns,\n    which have a 13 bit immediate field.  */\n "}]}