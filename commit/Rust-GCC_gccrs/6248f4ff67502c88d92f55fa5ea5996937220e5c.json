{"sha": "6248f4ff67502c88d92f55fa5ea5996937220e5c", "node_id": "C_kwDOANBUbNoAKDYyNDhmNGZmNjc1MDJjODhkOTJmNTVmYTVlYTU5OTY5MzcyMjBlNWM", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2022-09-15T20:10:42Z"}, "committer": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2022-09-15T20:10:42Z"}, "message": "float.h: Do not define INFINITY for C2x when infinities not supported\n\nC2x has changed the rules for defining INFINITY in <float.h> so it is\nno longer defined when float does not support infinities, instead of\nbeing defined to an expression that overflows at translation time.\nThus, make the definition conditional on __FLT_HAS_INFINITY__ (this is\nalready inside a C2x-conditional part of <float.h>, because previous C\nstandard versions only had this macro in <math.h>).\n\nBootstrapped with no regressions for x86_64-pc-linux-gnu.  Also did a\nspot test of the case of no infinities supported by building cc1 for\nvax-netbsdelf and testing compiling the new c2x-float-11.c test with\nit.\n\ngcc/\n\t* ginclude/float.h (INFINITY): Define only if\n\t[__FLT_HAS_INFINITY__].\n\ngcc/testsuite/\n\t* gcc.dg/c2x-float-2.c: Require inff effective-target.\n\t* gcc.dg/c2x-float-11.c: New test.", "tree": {"sha": "a8eb0e45a5b071b13ec6e6c41ec8f2fa74e95358", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a8eb0e45a5b071b13ec6e6c41ec8f2fa74e95358"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6248f4ff67502c88d92f55fa5ea5996937220e5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6248f4ff67502c88d92f55fa5ea5996937220e5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6248f4ff67502c88d92f55fa5ea5996937220e5c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6248f4ff67502c88d92f55fa5ea5996937220e5c/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ecbdfa8b314e2c17da17511b86371f552bffd441", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecbdfa8b314e2c17da17511b86371f552bffd441", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ecbdfa8b314e2c17da17511b86371f552bffd441"}], "stats": {"total": 17, "additions": 14, "deletions": 3}, "files": [{"sha": "afe4a712878cfbe661f41e6e855e7af45af2bb75", "filename": "gcc/ginclude/float.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6248f4ff67502c88d92f55fa5ea5996937220e5c/gcc%2Fginclude%2Ffloat.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6248f4ff67502c88d92f55fa5ea5996937220e5c/gcc%2Fginclude%2Ffloat.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Ffloat.h?ref=6248f4ff67502c88d92f55fa5ea5996937220e5c", "patch": "@@ -257,9 +257,11 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define DBL_IS_IEC_60559\t__DBL_IS_IEC_60559__\n #define LDBL_IS_IEC_60559\t__LDBL_IS_IEC_60559__\n \n-/* Infinity in type float, or overflow if infinity not supported.  */\n+/* Infinity in type float; not defined if infinity not supported.  */\n+#if __FLT_HAS_INFINITY__\n #undef INFINITY\n #define INFINITY\t(__builtin_inff ())\n+#endif\n \n /* Quiet NaN, if supported for float.  */\n #if __FLT_HAS_QUIET_NAN__"}, {"sha": "0e2f3c0c97a0ee8809aaa92fa8b6183c8cc31578", "filename": "gcc/testsuite/gcc.dg/c2x-float-11.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6248f4ff67502c88d92f55fa5ea5996937220e5c/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-float-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6248f4ff67502c88d92f55fa5ea5996937220e5c/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-float-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-float-11.c?ref=6248f4ff67502c88d92f55fa5ea5996937220e5c", "patch": "@@ -0,0 +1,9 @@\n+/* Test INFINITY macro.  Test when infinities not supported.  */\n+/* { dg-do compile { target { ! inff } } } */\n+/* { dg-options \"-std=c2x\" } */\n+\n+#include <float.h>\n+\n+#ifdef INFINITY\n+#error \"INFINITY defined\"\n+#endif"}, {"sha": "61a77f6f2db71cbe6b0fd806e1e7e55b49045207", "filename": "gcc/testsuite/gcc.dg/c2x-float-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6248f4ff67502c88d92f55fa5ea5996937220e5c/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-float-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6248f4ff67502c88d92f55fa5ea5996937220e5c/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-float-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-float-2.c?ref=6248f4ff67502c88d92f55fa5ea5996937220e5c", "patch": "@@ -1,8 +1,8 @@\n-/* Test INFINITY macro.  Generic test even if infinities not\n-   supported.  */\n+/* Test INFINITY macro.  Generic test.  */\n /* { dg-do run } */\n /* { dg-options \"-std=c2x -w\" } */\n /* { dg-add-options ieee } */\n+/* { dg-require-effective-target inff } */\n \n #include <float.h>\n "}]}