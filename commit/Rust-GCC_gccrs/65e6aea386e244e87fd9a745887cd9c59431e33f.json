{"sha": "65e6aea386e244e87fd9a745887cd9c59431e33f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjVlNmFlYTM4NmUyNDRlODdmZDlhNzQ1ODg3Y2Q5YzU5NDMxZTMzZg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-01-03T09:17:54Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-01-03T09:17:54Z"}, "message": "gcc.c (process_command): Update copyright notice dates.\n\ngcc/\n\t* gcc.c (process_command): Update copyright notice dates.\n\t* gcov-dump.c (print_version): Ditto.\n\t* gcov.c (print_version): Ditto.\n\t* gcov-tool.c (print_version): Ditto.\n\t* gengtype.c (create_file): Ditto.\n\t* doc/cpp.texi: Bump @copying's copyright year.\n\t* doc/cppinternals.texi: Ditto.\n\t* doc/gcc.texi: Ditto.\n\t* doc/gccint.texi: Ditto.\n\t* doc/gcov.texi: Ditto.\n\t* doc/install.texi: Ditto.\n\t* doc/invoke.texi: Ditto.\ngcc/fortran/\n\t* gfortranspec.c (lang_specific_driver): Update copyright notice\n\tdates.\n\t* gfc-internals.texi: Bump @copying's copyright year.\n\t* gfortran.texi: Ditto.\n\t* intrinsic.texi: Ditto.\n\t* invoke.texi: Ditto.\ngcc/ada/\n \t* gnat_ugn.texi: Bump @copying's copyright year.\n \t* gnat_rm.texi: Likewise.\ngcc/go/\n\t* gccgo.texi: Bump @copyrights-go year.\nlibitm/\n\t* libitm.texi: Bump @copying's copyright year.\nlibgomp/\n\t* libgomp.texi: Bump @copying's copyright year.\nlibquadmath/\n\t* libquadmath.texi: Bump @copying's copyright year.\n\nFrom-SVN: r256166", "tree": {"sha": "ac07240dce7c49740acb54510daa026c568d1850", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ac07240dce7c49740acb54510daa026c568d1850"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/65e6aea386e244e87fd9a745887cd9c59431e33f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65e6aea386e244e87fd9a745887cd9c59431e33f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65e6aea386e244e87fd9a745887cd9c59431e33f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65e6aea386e244e87fd9a745887cd9c59431e33f/comments", "author": null, "committer": null, "parents": [{"sha": "0ecc2b7db7480fa33d31d95a114b024809cb6883", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ecc2b7db7480fa33d31d95a114b024809cb6883", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ecc2b7db7480fa33d31d95a114b024809cb6883"}], "stats": {"total": 113786, "additions": 56923, "deletions": 56863}, "files": [{"sha": "5e86e97b7558ed4a26071f5ca59140b08fb4d443", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 41779, "changes": 41795, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e6aea386e244e87fd9a745887cd9c59431e33f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e6aea386e244e87fd9a745887cd9c59431e33f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=65e6aea386e244e87fd9a745887cd9c59431e33f"}, {"sha": "122911df18051992a4e831af8d3d09430dde553a", "filename": "gcc/ChangeLog-2017", "status": "added", "additions": 41783, "deletions": 0, "changes": 41783, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e6aea386e244e87fd9a745887cd9c59431e33f/gcc%2FChangeLog-2017", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e6aea386e244e87fd9a745887cd9c59431e33f/gcc%2FChangeLog-2017", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog-2017?ref=65e6aea386e244e87fd9a745887cd9c59431e33f"}, {"sha": "cc8c0c57a7be437ae793e9e3859eaabbf8f3af28", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 4, "deletions": 12767, "changes": 12771, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e6aea386e244e87fd9a745887cd9c59431e33f/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e6aea386e244e87fd9a745887cd9c59431e33f/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=65e6aea386e244e87fd9a745887cd9c59431e33f"}, {"sha": "e724844c73e25873ac4b1ce0db32aadbec089470", "filename": "gcc/ada/ChangeLog-2017", "status": "added", "additions": 12773, "deletions": 0, "changes": 12773, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e6aea386e244e87fd9a745887cd9c59431e33f/gcc%2Fada%2FChangeLog-2017", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e6aea386e244e87fd9a745887cd9c59431e33f/gcc%2Fada%2FChangeLog-2017", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog-2017?ref=65e6aea386e244e87fd9a745887cd9c59431e33f"}, {"sha": "12b2f42c8a0cd3dadd56cf05b09cf6bac2f53c45", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e6aea386e244e87fd9a745887cd9c59431e33f/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e6aea386e244e87fd9a745887cd9c59431e33f/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=65e6aea386e244e87fd9a745887cd9c59431e33f", "patch": "@@ -25,7 +25,7 @@ GNAT Reference Manual , Dec 15, 2017\n \n AdaCore\n \n-Copyright @copyright{} 2008-2017, Free Software Foundation\n+Copyright @copyright{} 2008-2018, Free Software Foundation\n @end quotation\n \n @end copying"}, {"sha": "63361fce1579b2ac7e3e65e6b188e5337cd51538", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e6aea386e244e87fd9a745887cd9c59431e33f/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e6aea386e244e87fd9a745887cd9c59431e33f/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=65e6aea386e244e87fd9a745887cd9c59431e33f", "patch": "@@ -25,7 +25,7 @@ GNAT User's Guide for Native Platforms , Dec 15, 2017\n \n AdaCore\n \n-Copyright @copyright{} 2008-2017, Free Software Foundation\n+Copyright @copyright{} 2008-2018, Free Software Foundation\n @end quotation\n \n @end copying"}, {"sha": "ced3e465e731a984f482d6550bc64f6186258d7b", "filename": "gcc/doc/cpp.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e6aea386e244e87fd9a745887cd9c59431e33f/gcc%2Fdoc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e6aea386e244e87fd9a745887cd9c59431e33f/gcc%2Fdoc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp.texi?ref=65e6aea386e244e87fd9a745887cd9c59431e33f", "patch": "@@ -10,7 +10,7 @@\n \n @copying\n @c man begin COPYRIGHT\n-Copyright @copyright{} 1987-2017 Free Software Foundation, Inc.\n+Copyright @copyright{} 1987-2018 Free Software Foundation, Inc.\n \n Permission is granted to copy, distribute and/or modify this document\n under the terms of the GNU Free Documentation License, Version 1.3 or"}, {"sha": "e31a5e207ab5b7aa012ad1969f68f63d43ce245a", "filename": "gcc/doc/cppinternals.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e6aea386e244e87fd9a745887cd9c59431e33f/gcc%2Fdoc%2Fcppinternals.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e6aea386e244e87fd9a745887cd9c59431e33f/gcc%2Fdoc%2Fcppinternals.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppinternals.texi?ref=65e6aea386e244e87fd9a745887cd9c59431e33f", "patch": "@@ -18,7 +18,7 @@\n @ifinfo\n This file documents the internals of the GNU C Preprocessor.\n \n-Copyright (C) 2000-2017 Free Software Foundation, Inc.\n+Copyright (C) 2000-2018 Free Software Foundation, Inc.\n \n Permission is granted to make and distribute verbatim copies of\n this manual provided the copyright notice and this permission notice\n@@ -47,7 +47,7 @@ into another language, under the above conditions for modified versions.\n @page\n @vskip 0pt plus 1filll\n @c man begin COPYRIGHT\n-Copyright @copyright{} 2000-2017 Free Software Foundation, Inc.\n+Copyright @copyright{} 2000-2018 Free Software Foundation, Inc.\n \n Permission is granted to make and distribute verbatim copies of\n this manual provided the copyright notice and this permission notice"}, {"sha": "2572eb0ab90b38605dfc87d0f92acb6f313539f6", "filename": "gcc/doc/gcc.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e6aea386e244e87fd9a745887cd9c59431e33f/gcc%2Fdoc%2Fgcc.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e6aea386e244e87fd9a745887cd9c59431e33f/gcc%2Fdoc%2Fgcc.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc.texi?ref=65e6aea386e244e87fd9a745887cd9c59431e33f", "patch": "@@ -40,7 +40,7 @@\n @c %**end of header\n \n @copying\n-Copyright @copyright{} 1988-2017 Free Software Foundation, Inc.\n+Copyright @copyright{} 1988-2018 Free Software Foundation, Inc.\n \n Permission is granted to copy, distribute and/or modify this document\n under the terms of the GNU Free Documentation License, Version 1.3 or"}, {"sha": "1a1af418eb6e0e0c331fda7e6b1de6d8164b5f01", "filename": "gcc/doc/gccint.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e6aea386e244e87fd9a745887cd9c59431e33f/gcc%2Fdoc%2Fgccint.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e6aea386e244e87fd9a745887cd9c59431e33f/gcc%2Fdoc%2Fgccint.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgccint.texi?ref=65e6aea386e244e87fd9a745887cd9c59431e33f", "patch": "@@ -26,7 +26,7 @@\n @c %**end of header\n \n @copying\n-Copyright @copyright{} 1988-2017 Free Software Foundation, Inc.\n+Copyright @copyright{} 1988-2018 Free Software Foundation, Inc.\n \n Permission is granted to copy, distribute and/or modify this document\n under the terms of the GNU Free Documentation License, Version 1.3 or"}, {"sha": "8f68b0f90e2d0c35788d9a87ae99793e0c310294", "filename": "gcc/doc/gcov.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e6aea386e244e87fd9a745887cd9c59431e33f/gcc%2Fdoc%2Fgcov.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e6aea386e244e87fd9a745887cd9c59431e33f/gcc%2Fdoc%2Fgcov.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcov.texi?ref=65e6aea386e244e87fd9a745887cd9c59431e33f", "patch": "@@ -4,7 +4,7 @@\n \n @ignore\n @c man begin COPYRIGHT\n-Copyright @copyright{} 1996-2017 Free Software Foundation, Inc.\n+Copyright @copyright{} 1996-2018 Free Software Foundation, Inc.\n \n Permission is granted to copy, distribute and/or modify this document\n under the terms of the GNU Free Documentation License, Version 1.3 or"}, {"sha": "943556528f6a1aeb6d6b052b4fcd1579d24324af", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e6aea386e244e87fd9a745887cd9c59431e33f/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e6aea386e244e87fd9a745887cd9c59431e33f/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=65e6aea386e244e87fd9a745887cd9c59431e33f", "patch": "@@ -44,7 +44,7 @@\n @settitle Installing GCC: GNU Free Documentation License\n @end ifset\n \n-@c Copyright (C) 1988-2017 Free Software Foundation, Inc.\n+@c Copyright (C) 1988-2018 Free Software Foundation, Inc.\n @c *** Converted to texinfo by Dean Wakerley, dean@wakerley.com\n \n @c IMPORTANT: whenever you modify this file, run `install.texi2html' to\n@@ -69,7 +69,7 @@\n \n @c Part 2 Summary Description and Copyright\n @copying\n-Copyright @copyright{} 1988-2017 Free Software Foundation, Inc.\n+Copyright @copyright{} 1988-2018 Free Software Foundation, Inc.\n @sp 1\n Permission is granted to copy, distribute and/or modify this document\n under the terms of the GNU Free Documentation License, Version 1.3 or"}, {"sha": "620e774e05693a7196999c23d83ea76b6aad2b09", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e6aea386e244e87fd9a745887cd9c59431e33f/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e6aea386e244e87fd9a745887cd9c59431e33f/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=65e6aea386e244e87fd9a745887cd9c59431e33f", "patch": "@@ -8,7 +8,7 @@\n @c man end\n \n @c man begin COPYRIGHT\n-Copyright @copyright{} 1988-2017 Free Software Foundation, Inc.\n+Copyright @copyright{} 1988-2018 Free Software Foundation, Inc.\n \n Permission is granted to copy, distribute and/or modify this document\n under the terms of the GNU Free Documentation License, Version 1.3 or"}, {"sha": "bb2083aa66e459de6f204d85e779d92ea0aaffe2", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 2291, "changes": 2301, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e6aea386e244e87fd9a745887cd9c59431e33f/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e6aea386e244e87fd9a745887cd9c59431e33f/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=65e6aea386e244e87fd9a745887cd9c59431e33f", "patch": "@@ -1,3 +1,12 @@\n+2018-01-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gfortranspec.c (lang_specific_driver): Update copyright notice\n+\tdates.\n+\t* gfc-internals.texi: Bump @copying's copyright year.\n+\t* gfortran.texi: Ditto.\n+\t* intrinsic.texi: Ditto.\n+\t* invoke.texi: Ditto.\n+\n 2017-01-02  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/45689\n@@ -39,2298 +48,8 @@\n \tPR fortran/83319\n \t*trans-types.c (gfc_get_array_descriptor_base): Add the token\n \tfield to the descriptor even when codimen not set.\n-\n-2017-12-28  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\tPR Fortran/83548\n-\t* match.c (gfc_match_type_spec): Check for LOGICAL conflict in\n-\ttype-spec versus LOGICAL intrinsic subprogram.\n-\n-2017-12-28  Janne Blomqvist  <jb@gcc.gnu.org>\n-\n-\tPR fortran/83344\n-\t* resolve.c (resolve_assoc_var): Don't set the constant value\n-\tunless the target is a constant expression.\n-\n-2017-12-28  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/83567\n-\t* trans-expr.c (gfc_trans_assignment_1): Free parameterized\n-\tcomponents of the lhs if dealloc is set.\n-\t*trans-decl.c (gfc_trans_deferred_vars): Do not free the\n-\tparameterized components of function results on leaving scope.\n-\n-2017_12_27  Louis Krupp  <louis.krupp@zoho.com>\n-\n-\tPR fortran/83092\n-\t* expr.c (gfc_apply_init): Check that typespec has character type\n-\tbefore using character length field.\n-\n-2017-12-26  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/83540\n-\t* frontend-passes.c (create_var): If an array to be created\n-\thas unknown size and -fno-realloc-lhs is in effect,\n-\treturn NULL.\n-\n-2017-12-22  Bernhard Reutner-Fischer  <aldot@gcc.gnu.org>\n-            Eric Botcazou  <ebotcazou@adacore.com>\n-\n-\t* array.c (gfc_copy_iterator): Copy unroll field.\n-\t* decl.c (directive_unroll): New global variable.\n-\t(gfc_match_gcc_unroll): New function.\n-\t* gfortran.h (gfc_iterator]): Add unroll field.\n-\t(directive_unroll): Declare:\n-\t* match.c (gfc_match_do): Use memset to initialize the iterator.\n-\t* match.h (gfc_match_gcc_unroll): New prototype.\n-\t* parse.c (decode_gcc_attribute): Match \"unroll\".\n-\t(parse_do_block): Set iterator's unroll.\n-\t(parse_executable): Diagnose misplaced unroll directive.\n-\t* trans-stmt.c (gfc_trans_simple_do) Annotate loop condition with\n-\tannot_expr_unroll_kind.\n-\t(gfc_trans_do): Likewise.\n-\t* gfortran.texi (GNU Fortran Compiler Directives): Split section into\n-\tsubections 'ATTRIBUTES directive' and 'UNROLL directive'.\n-\n-2017-12-19  Jakub Jelinek  <jakub@redhat.com>\n-\n-\t* scanner.c (preprocessor_line): Replace Yoda conditions with typical\n-\torder conditions.\n-\t* dependency.c (check_section_vs_section): Likewise.\n-\t* trans-array.c (gfc_conv_expr_descriptor): Likewise.\n-\n-2017-12-17  Janne Blomqvist  <jb@gcc.gnu.org>\n-\n-\t* decl.c (gfc_match_implicit_none): Use GFC_STD_F2018 instead of\n-\tGFC_STD_F2015.\n-\t* error.c (gfc_notify_std): Add GFC_STD_F2018{_DEL,_OBS} to\n-\tswitch.\n-\t* gfortran.texi: Document -std=f2018.\n-\t* interface.c (compare_parameter): Fix comment.\n-\t* invoke.texi: Document -std=f2018.\n-\t* lang.opt: Add -std=f2018 argumnet.\n-\t* libgfortran.h (GFC_STD_F2015): Rename to GFC_STD_F0218, use\n-\tseparate flag bit.\n-\t(GFC_STD_F2018_DEL): New macro.\n-\t(GFC_STD_F2018_OBS): Likewise.\n-\t* match.c (gfc_match_stopcode): Use GFC_STD_F2018.\n-\t* options.c (set_default_std_flags): Add F2018 flags to defaults.\n-\t(gfc_handle_option): Set options for -std=f2018.\n-\n-2017-12-15  Jakub Jelinek  <jakub@redhat.com>\n-\n-\t* f95-lang.c (gfc_attribute_table): Swap affects_type_identity\n-\tand handler fields, adjust comments.\n-\n-2017-12-14  Qing Zhao  <qing.zhao@oracle.com>\n-\n-\tPR middle_end/79538\n-\t* class.c (gfc_build_class_symbol): Replace call to\n-\tsprintf with xasprintf to avoid format-overflow warning.\n-\t(generate_finalization_wrapper): Likewise.\n-\t(gfc_find_derived_vtab): Likewise.\n-\t(find_intrinsic_vtab): Likewise.\n-\n-2017-12-12  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\t* intrinsic.texi (MAXLOC): Remove double description\n-\tof return value.\n-\t(MINLOC): Likewise.\n-\n-2017-12-11  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\t* intrinsic.texi (MAXLOC): Update documentation for\n-\tcharacter arrays and KIND argument.\n-\t(MINLOC): Likewise.\n-\n-2017-12-11  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/45689\n-\t* simplify.c (min_max_choose): Add prototype.\n-\t(gfc_count): Format correctly.\n-\t(simplify_transformation): Pass array argument to init_result_expr.\n-\t(gfc_simplify_minval_maxval): Remove.\n-\t(gfc_min): New function.\n-\t(gfc_simplify_minval): Call simplify_transformation.\n-\t(gfc_max): New function.\n-\t(gfc_simplify_maxval): Call simplify_transformation.\n-\n-2017-12-10  Dominique d'Humieres  <dominiq@lps.ens.fr>\n-\n-\tPR fortran/53478\n-\t* gfortran.h (gfc_find_case_gsymbol): New prototype.\n-\t* symbol.c (gfc_find_case_gsymbol): New procedure, case\n-\tinsensistive version of gfc_find_gsymbol.\n-\t* resolve.c (resolve_common_blocks): Use it.\n-\tReplace %s with %qs where needed.\n-\n-2017-12-09  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\tPR fortran/82934\n-\tPR fortran/83318\n-\t* match.c (gfc_match_allocate): Enforce F2008:C631.\n-\n-2017-12-09  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/83316\n-\t* arith.c (gfc_character2character): New function.\n-\t* arith.h: Add prototype.\n-\t* simplify.c (gfc_convert_constant): Handle character type.\n-\n-2017-12-07  Martin Sebor  <msebor@redhat.com>\n-\n-\tPR c/81544\n-\t* f95-lang.c (gfc_attribute_table): Initialize new member of struct\n-\tattribute_spec.\n-\n-2017-12-03  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/36313\n-\t* check.c (gfc_check_minval_maxval): Use\n-\tint_orLreal_or_char_check_f2003 for array argument.\n-\t* iresolve.c (gfc_resolve_maxval): Insert number in\n-\tfunction name for character arguments.\n-\t(gfc_resolve_minval): Likewise.\n-\t* trans-intrinsic.c (gfc_conv_intrinsic_minmaxloc):\n-\tFix comment.\n-\t(gfc_conv_intrinsic_minmaxval): Resort arguments and call library\n-\tfunction if dealing with a character function.\n-\n-2017-12-01  Qing Zhao  <qing.zhao@oracle.com>\n-\n-\t* decl.c (gfc_get_pdt_instance): Adjust the call to sprintf\n-\tto avoid the same buffer being both source and destination.\n-\n-2017-12-01  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/83224\n-\t* frontend-passes.c (create_var): Also handle\n-\tcharacter arrays, handling deferred lenghts.\n-\n-2017-12-01  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/82605\n-\t* resolve.c (get_pdt_constructor): Initialize 'cons' to NULL.\n-\t(resolve_pdt): Correct typo in prior comment. Emit an error if\n-\tany parameters are deferred and the object is neither pointer\n-\tnor allocatable.\n-\n-\tPR fortran/82606\n-\t* decl.c (gfc_get_pdt_instance): Continue if the parameter sym\n-\tis not present or has no name. Select the parameter by name\n-\tof component, rather than component order. Remove all the other\n-\tmanipulations of 'tail' when building the pdt instance.\n-\t(gfc_match_formal_arglist): Emit and error if a star is picked\n-\tup in a PDT decl parameter list.\n-\n-\tPR fortran/82622\n-\t* trans-array.c (set_loop_bounds): If a GFC_SS_COMPONENT has an\n-\tinfo->end, use it rather than falling through to\n-\tgcc_unreachable.\n-\t(structure_alloc_comps): Check that param->name is non-null\n-\tbefore comparing with the component name.\n-\t* trans-decl.c (gfc_get_symbol_decl): Do not use the static\n-\tinitializer for PDT symbols.\n-\t(gfc_init_default_dt): Do nothing for PDT symbols.\n-\t* trans-io.c (transfer_array_component): Parameterized array\n-\tcomponents use the descriptor ubound since the shape is not\n-\tavailable.\n-\n-\tPR fortran/82719\n-\tPR fortran/82720\n-\t* trans-expr.c (gfc_conv_component_ref): Do not use the charlen\n-\tbackend_decl of pdt strings. Use the hidden component instead.\n-\t* trans-io.c (transfer_expr): Do not do IO on \"hidden\" string\n-\tlengths. Use the hidden string length for pdt string transfers\n-\tby adding it to the se structure. When finished nullify the\n-\tse string length.\n-\n-\tPR fortran/82866\n-\t* decl.c (gfc_match_formal_arglist): If a name is not found or\n-\tstar is found, while reading a type parameter list, emit an\n-\timmediate error.\n-\t(gfc_match_derived_decl): On reading a PDT parameter list, on\n-\tfailure to match call gfc_error_recovery.\n-\n-\tPR fortran/82978\n-\t* decl.c (build_struct): Character kind defaults to 1, so use\n-\tkind_expr whatever is the set value.\n-\t(gfc_get_pdt_instance): Ditto.\n-\t* trans-array.c (structure_alloc_comps): Copy the expression\n-\tfor the PDT string length before parameter substitution. Use\n-\tthis expression for evaluation and free it after use.\n-\n-2017-12-01  Jakub Jelinek  <jakub@redhat.com>\n-\n-\tPR c/79153\n-\t* match.c (gfc_match): Add FALLTHRU comment to avoid\n-\t-Wimplicit-fallthrough warning.\n-\n-2017-12-01  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/83224\n-\t* frontend-passes.c (realloc_string_callback): Handle\n-\tcase for which the RHS is an array expression.\n-\n-2017-11-28  Janne Blomqvist  <jb@gcc.gnu.org>\n-\n-\tPR fortran/53796\n-\t* gfortran.texi: Remove mentions of GFORTRAN_DEFAULT_RECL.\n-\n-2017-11-28  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/83021\n-\t* resolve.c (resolve_component): Only escape for use assciated\n-\tvtypes if the current namespace has no proc_name and is most\n-\tparticularly block data.\n-\n-2017-11-28  Jakub Jelinek  <jakub@redhat.com>\n-\n-\t* trans-decl.c (gfc_trans_entry_master_switch): Build SWITCH_EXPR\n-\tusing fold_build2_loc instead of fold_build3_loc.\n-\t* trans-io.c (io_result): Likewise.\n-\t* trans-stmt.c (gfc_trans_integer_select, gfc_trans_character_select):\n-\tLikewise.\n-\n-2017-11-24  Jakub Jelinek  <jakub@redhat.com>\n-\n-\tPR fortran/81304\n-\t* trans-openmp.c (gfc_trans_omp_array_reduction_or_udr): Set\n-\tattr.implicit_type in intrinsic_sym to avoid undesirable warning.\n-\n-2017-11-23  Dirk Broemmel  <d.broemmel@fz-juelich.de>\n-\t    Jakub Jelinek  <jakub@redhat.com>\n-\n-\tPR fortran/81841\n-\t* parse.c (parse_spec): Allow ST_OMP_THREADPRIVATE inside of\n-\tBLOCK DATA.\n-\n-2017-11-23  Mike Stump  <mikestump@comcast.net>\n-\t    Eric Botcazou  <ebotcazou@adacore.com>\n-\n-\t* trans-stmt.c (gfc_trans_forall_loop): Pass 3rd operand to\n-\tANNOTATE_EXPR.\n-\n-2017-11-23  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/82814\n-\t* trans-types.c (gfc_sym_type): If a character function result\n-\tis missing the charlen backend_decl, use the one from the name-\n-\tspace procedure symbol, if present.\n-\n-2017-11-22  David Malcolm  <dmalcolm@redhat.com>\n-\n-\tPR c++/62170\n-\t* error.c (gfc_notify_std): Convert \"quoted\" param from bool to\n-\tbool *.\n-\n-2017-11-22  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/36313\n-\t* check.c (int_or_real_or_char_check_f2003): New function.\n-\t* iresolve.c (gfc_resolve_maxloc): Add number \"2\" for\n-\tcharacter arguments and rank-zero return value.\n-\t(gfc_resolve_minloc): Likewise.\n-\t* trans-intrinsic.c (gfc_conv_intrinsic_minmaxloc): Handle case of\n-\tcharacter arguments and rank-zero return value by removing\n-\tunneeded arguments and calling the library function.\n-\n-2017-11-22  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/79072\n-\t* trans-stmt.c (trans_associate_var): Weaken the over strong\n-\tcondition for using the fake result decl.\n-\n-2017-11-20  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/79072\n-\t* trans-expr.c (trans_class_vptr_len_assignment): Set from_len\n-\tif the temporary is unlimited polymorphic.\n-\t* trans-stmt.c (trans_associate_var): Use the fake result decl\n-\tto obtain the 'len' field from an explicit function result when\n-\tin that function scope.\n-\n-2017-11-19  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/78990\n-\t* expr.c (gfc_is_class_array_function): Renamed from\n-\t'gfc_is_alloc_class_array_function' and modified to return true\n-\tfor pointers as well as allocatable results.\n-\t* gfortran.h : Change of name for prototype of above function.\n-\t* trans-array.c (gfc_add_loop_ss_code): Force finalization of\n-\tclass array results.\n-\t(build_class_array_ref): Change assertion into a condition.\n-\t(build_class_array_ref): Set the se class_vptr for class array\n-\tfunction results.\n-\t(gfc_walk_function_expr): Reference gfc_is_class_array_function\n-\tas above.\n-\t* trans-decl.c (get_proc_result): Move it up before\n-\tgfc_trans_deferred_vars.\n-\t(gfc_trans_deferred_vars): Nullify explicit return class arrays\n-\ton entry.\n-\t* trans-expr.c (gfc_conv_class_to_class): Allow conversion of\n-\tclass array functions that have an se class_vptr and use it\n-\tfor the result vptr.\n-\t(gfc_conv_subref_array_arg): Rename reference to the above\n-\tfunction.\n-\t(gfc_conv_procedure_call): Ditto. Add the se pre block to the\n-\tloop pre block before the function is evaluated. Do not\n-\tfinalize class pointer results.\n-\t(arrayfunc_assign_needs_temporary, gfc_trans_assignment_1) More\n-\trenamed references.\n-\t* trans-intrinsic.c (gfc_conv_intrinsic_size): Ditto.\n-\n-2017-11-18  Janne Blomqvist  <jb@gcc.gnu.org>\n-\n-\tPR fortran/83036\n-\t* ioparm.def (IOPARM): Make nextrec a pintio.\n-\n-2017-11-18  Janne Blomqvist  <jb@gcc.gnu.org>\n-\n-\tPR fortran/44292\n-\t* ioparm.def (IOPARM): Make recl_in intio, and recl_out pintio.\n-\n-2017-11-18  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/83012\n-\t* expr.c (gfc_is_simply_contiguous): If a function call through a\n-\tclass variable is done through a reference, check the function's\n-\tinterface.\n-\n-2017-11-17  Richard Biener  <rguenther@suse.de>\n-\n-\tPR fortran/83017\n-\t* trans-stmt.c (gfc_trans_forall_loop): Annotate DO CONCURRENT\n-\tloops with annot_expr_parallel_kind instead of just\n-\tannot_expr_ivdep_kind.\n-\n-2017-11-15  Martin Liska  <mliska@suse.cz>\n-\n-\t* options.c (gfc_post_options):\n-\tDo not set default value of warn_return_type.\n-\t* trans-decl.c (gfc_trans_deferred_vars):\n-\tCompare warn_return_type for greater than zero.\n-\t(generate_local_decl): Likewise\n-\t(gfc_generate_function_code): Likewise.\n-\n-2017-11-13  Fritz Reese <fritzoreese@gmail.com>\n-\n-\tPR fortran/78240\n-\t* decl.c (match_clist_expr): Replace gcc_assert with proper\n-\thandling of bad result from spec_size().\n-\t* resolve.c (check_data_variable): Avoid NULL dereference when passing\n-\tlocus to gfc_error.\n-\n-2017-11-11  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/82932\n-\t* resolve.c (update_compcall_arglist): Improve error recovery,\n-\tremove a gcc_assert.\n-\n-2017-11-10  Fritz Reese <fritzoreese@gmail.com>\n-\n-\tPR fortran/82886\n-\t* gfortran.h (gfc_build_init_expr): New prototype.\n-\t* invoke.texi (finit-derived): Update documentation.\n-\t* expr.c (gfc_build_init_expr): New, from gfc_build_default_init_expr.\n-\t(gfc_build_default_init_expr): Redirect to gfc_build_init_expr(,,false)\n-\t(component_initializer): Force building initializers using\n-\tgfc_build_init_expr(,,true).\n-\n-2017-11-10  Martin Sebor  <msebor@redhat.com>\n-\n-\tPR c/81117\n-\t* gcc/fortran/decl.c (build_sym): Use strcpy instead of strncpy.\n-\n-2017-11-10  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/82934\n-\t* trans-stmt.c (gfc_trans_allocate): Remove the gcc_assert on\n-\tnull string length for assumed length typespec and set\n-\texpr3_esize to NULL_TREE;\n-\n-2017-11-09  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/78619\n-\t* check.c (same_type_check): Introduce a new argument 'assoc'\n-\twith default value false. If this is true, use the symbol type\n-\tspec of BT_PROCEDURE expressions.\n-\t(gfc_check_associated): Set 'assoc' true in the call to\n-\t'same_type_check'.\n-\n-2017-11-09  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\tPR fortran/78814\n-\t* interface.c (symbol_rank): Check for NULL pointer.\n-\n-2017-11-08  Steven G. Kargl  <kargl@kgcc.gnu.org>\n-\n-\tPR Fortran/82841\n-\t* simplify.c(gfc_simplify_transfer): Do not dereference a NULL pointer.\n-\tUnwrap a short line.\n-\n-2017-11-08  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\tPR fortran/82884\n-\t* arith.c (gfc_hollerith2character): Clear pad.\n-\n-2017-11-08  Janne Blomqvist  <jb@gcc.gnu.org>\n-\n-\tPR 82869\n-\t* convert.c (truthvalue_conversion): Use logical_type_node.\n-\t* trans-array.c (gfc_trans_allocate_array_storage): Likewise.\n-\t(gfc_trans_create_temp_array): Likewise.\n-\t(gfc_trans_array_ctor_element): Likewise.\n-\t(gfc_trans_array_constructor_value): Likewise.\n-\t(trans_array_constructor): Likewise.\n-\t(trans_array_bound_check): Likewise.\n-\t(gfc_conv_array_ref): Likewise.\n-\t(gfc_trans_scalarized_loop_end): Likewise.\n-\t(gfc_conv_array_extent_dim): Likewise.\n-\t(gfc_array_init_size): Likewise.\n-\t(gfc_array_allocate): Likewise.\n-\t(gfc_trans_array_bounds): Likewise.\n-\t(gfc_trans_dummy_array_bias): Likewise.\n-\t(gfc_conv_array_parameter): Likewise.\n-\t(duplicate_allocatable): Likewise.\n-\t(duplicate_allocatable_coarray): Likewise.\n-\t(structure_alloc_comps): Likewise\n-\t(get_std_lbound): Likewise\n-\t(gfc_alloc_allocatable_for_assignment): Likewise\n-\t* trans-decl.c (add_argument_checking): Likewise\n-\t(gfc_generate_function_code): Likewise\n-\t* trans-expr.c (gfc_copy_class_to_class): Likewise\n-\t(gfc_trans_class_array_init_assign): Likewise\n-\t(gfc_trans_class_init_assign): Likewise\n-\t(gfc_conv_expr_present): Likewise\n-\t(gfc_conv_substring): Likewise\n-\t(gfc_conv_cst_int_power): Likewise\n-\t(gfc_conv_expr_op): Likewise\n-\t(gfc_conv_procedure_call): Likewise\n-\t(fill_with_spaces): Likewise\n-\t(gfc_trans_string_copy): Likewise\n-\t(gfc_trans_alloc_subarray_assign): Likewise\n-\t(gfc_trans_pointer_assignment): Likewise\n-\t(gfc_trans_scalar_assign): Likewise\n-\t(fcncall_realloc_result): Likewise\n-\t(alloc_scalar_allocatable_for_assignment): Likewise\n-\t(trans_class_assignment): Likewise\n-\t(gfc_trans_assignment_1): Likewise\n-\t* trans-intrinsic.c (build_fixbound_expr): Likewise\n-\t(gfc_conv_intrinsic_aint): Likewise\n-\t(gfc_trans_same_strlen_check): Likewise\n-\t(conv_caf_send): Likewise\n-\t(trans_this_image): Likewise\n-\t(conv_intrinsic_image_status): Likewise\n-\t(trans_image_index): Likewise\n-\t(gfc_conv_intrinsic_bound): Likewise\n-\t(conv_intrinsic_cobound): Likewise\n-\t(gfc_conv_intrinsic_mod): Likewise\n-\t(gfc_conv_intrinsic_dshift): Likewise\n-\t(gfc_conv_intrinsic_dim): Likewise\n-\t(gfc_conv_intrinsic_sign): Likewise\n-\t(gfc_conv_intrinsic_ctime): Likewise\n-\t(gfc_conv_intrinsic_fdate): Likewise\n-\t(gfc_conv_intrinsic_ttynam): Likewise\n-\t(gfc_conv_intrinsic_minmax): Likewise\n-\t(gfc_conv_intrinsic_minmax_char): Likewise\n-\t(gfc_conv_intrinsic_anyall): Likewise\n-\t(gfc_conv_intrinsic_arith): Likewise\n-\t(gfc_conv_intrinsic_minmaxloc): Likewise\n-\t(gfc_conv_intrinsic_minmaxval): Likewise\n-\t(gfc_conv_intrinsic_btest): Likewise\n-\t(gfc_conv_intrinsic_bitcomp): Likewise\n-\t(gfc_conv_intrinsic_shift): Likewise\n-\t(gfc_conv_intrinsic_ishft): Likewise\n-\t(gfc_conv_intrinsic_ishftc): Likewise\n-\t(gfc_conv_intrinsic_leadz): Likewise\n-\t(gfc_conv_intrinsic_trailz): Likewise\n-\t(gfc_conv_intrinsic_mask): Likewise\n-\t(gfc_conv_intrinsic_spacing): Likewise\n-\t(gfc_conv_intrinsic_rrspacing): Likewise\n-\t(gfc_conv_intrinsic_size): Likewise\n-\t(gfc_conv_intrinsic_sizeof): Likewise\n-\t(gfc_conv_intrinsic_transfer): Likewise\n-\t(gfc_conv_allocated): Likewise\n-\t(gfc_conv_associated): Likewise\n-\t(gfc_conv_same_type_as): Likewise\n-\t(gfc_conv_intrinsic_trim): Likewise\n-\t(gfc_conv_intrinsic_repeat): Likewise\n-\t(conv_isocbinding_function): Likewise\n-\t(conv_intrinsic_ieee_is_normal): Likewise\n-\t(conv_intrinsic_ieee_is_negative): Likewise\n-\t(conv_intrinsic_ieee_copy_sign): Likewise\n-\t(conv_intrinsic_move_alloc): Likewise\n-\t* trans-io.c (set_parameter_value_chk): Likewise\n-\t(set_parameter_value_inquire): Likewise\n-\t(set_string): Likewise\n-\t* trans-openmp.c (gfc_walk_alloc_comps): Likewise\n-\t(gfc_omp_clause_default_ctor): Likewise\n-\t(gfc_omp_clause_copy_ctor): Likewise\n-\t(gfc_omp_clause_assign_op): Likewise\n-\t(gfc_omp_clause_dtor): Likewise\n-\t(gfc_omp_finish_clause): Likewise\n-\t(gfc_trans_omp_clauses): Likewise\n-\t(gfc_trans_omp_do): Likewise\n-\t* trans-stmt.c (gfc_trans_goto): Likewise\n-\t(gfc_trans_sync): Likewise\n-\t(gfc_trans_arithmetic_if): Likewise\n-\t(gfc_trans_simple_do): Likewise\n-\t(gfc_trans_do): Likewise\n-\t(gfc_trans_forall_loop): Likewise\n-\t(gfc_trans_where_2): Likewise\n-\t(gfc_trans_allocate): Likewise\n-\t(gfc_trans_deallocate): Likewise\n-\t* trans-types.c (gfc_init_types): Initialize logical_type_node and\n-\ttheir true/false trees.\n-\t(gfc_get_array_descr_info): Use logical_type_node.\n-\t* trans-types.h (logical_type_node): New tree.\n-\t(logical_true_node): Likewise.\n-\t(logical_false_node): Likewise.\n-\t* trans.c (gfc_trans_runtime_check): Use logical_type_node.\n-\t(gfc_call_malloc): Likewise\n-\t(gfc_allocate_using_malloc): Likewise\n-\t(gfc_allocate_allocatable): Likewise\n-\t(gfc_add_comp_finalizer_call): Likewise\n-\t(gfc_add_finalizer_call): Likewise\n-\t(gfc_deallocate_with_status): Likewise\n-\t(gfc_deallocate_scalar_with_status): Likewise\n-\t(gfc_call_realloc): Likewise\n-\n-2017-11-06  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/69739\n-\t* trans-expr.c (gfc_map_intrinsic_function): Return false for\n-\tbounds without the DIM argument instead of ICEing.\n-\n-2017-11-06  Martin Liska  <mliska@suse.cz>\n-\n-\tPR middle-end/82404\n-\t* options.c (gfc_post_options): Set default value of\n-\t-Wreturn-type to false.\n-\n-2017-11-05  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/82471\n-\t* lang.opt (ffrontend-loop-interchange): New option.\n-\t(Wfrontend-loop-interchange): New option.\n-\t* options.c (gfc_post_options): Handle ffrontend-loop-interchange.\n-\t* frontend-passes.c (gfc_run_passes): Run\n-\toptimize_namespace if flag_frontend_optimize or\n-\tflag_frontend_loop_interchange are set.\n-\t(optimize_namespace): Run functions according to flags set;\n-\talso call index_interchange.\n-\t(ind_type): New function.\n-\t(has_var): New function.\n-\t(index_cost): New function.\n-\t(loop_comp): New function.\n-\n-2017-11-05  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/78641\n-\t* resolve.c (resolve_ordinary_assign): Do not add the _data\n-\tcomponent for class valued array constructors being assigned\n-\tto derived type arrays.\n-\t* trans-array.c (gfc_trans_array_ctor_element): Take the _data\n-\tof class valued elements for assignment to derived type arrays.\n-\n-2017-11-05  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/81447\n-\tPR fortran/82783\n-\t* resolve.c (resolve_component): There is no need to resolve\n-\tthe components of a use associated vtype.\n-\t(resolve_fl_derived): Unconditionally generate a vtable for any\n-\tmodule derived type, as long as the standard is F2003 or later\n-\tand it is not a vtype or a PDT template.\n-\n-2017-11-05  Tom de Vries  <tom@codesourcery.com>\n-\n-\tPR other/82784\n-\t* parse.c (match, matcha, matchs, matcho, matchds, matchdo): Remove\n-\tsemicolon after \"do {} while (0)\".\n-\n-2017-11-04  Andre Vehreschild  <vehre@gcc.gnu.org>\n-\n-\t* trans-expr.c (gfc_trans_assignment_1): Character kind conversion may\n-\tcreate a loop variant temporary, too.\n-\t* trans-intrinsic.c (conv_caf_send): Treat char arrays as arrays and\n-\tnot as scalars.\n-\t* trans.c (get_array_span): Take the character kind into account when\n-\tdoing pointer arithmetic.\n-\n-2017-11-04  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/29600\n-\t* gfortran.h (gfc_check_f): Replace fm3l with fm4l.\n-\t* intrinsic.h (gfc_resolve_maxloc): Add gfc_expr * to argument\n-\tlist in protoytpe.\n-\t(gfc_resolve_minloc): Likewise.\n-\t* check.c (gfc_check_minloc_maxloc): Handle kind argument.\n-\t* intrinsic.c (add_sym_3_ml): Rename to\n-\t(add_sym_4_ml): and handle kind argument.\n-\t(add_function): Replace add_sym_3ml with add_sym_4ml and add\n-\textra arguments for maxloc and minloc.\n-\t(check_specific): Change use of check.f3ml with check.f4ml.\n-\t* iresolve.c (gfc_resolve_maxloc): Handle kind argument. If\n-\tthe kind is smaller than the smallest library version available,\n-\tuse gfc_default_integer_kind and convert afterwards.\n-\t(gfc_resolve_minloc): Likewise.\n-\n-2017-11-04  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/81735\n-\t* trans-decl.c (gfc_trans_deferred_vars): Do a better job of a\n-\tcase where 'tmp' was used unititialized and remove TODO.\n-\n-2017-11-03  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\tPR fortran/82796\n-\t* resolve.c (resolve_equivalence): An entity in a common block within\n- \ta module cannot appear in an equivalence statement if the entity is\n-\twith a pure procedure.\n-\n-2017-10-31  Jim Wilson  <wilson@tuliptree.org>\n-\n-\t* parse.c (unexpected_eof): Call gcc_unreachable before return.\n-\n-2017-10-30  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/80850\n-\t* trans_expr.c (gfc_conv_procedure_call): When passing a class\n-\targument to an unlimited polymorphic dummy, it is wrong to cast\n-\tthe passed expression as unlimited, unless it is unlimited. The\n-\tcorrect way is to assign to each of the fields and set the _len\n-\tfield to zero.\n-\n-2017-10-30  Steven G. Kargl   <kargl@gcc.gnu.org>\n-\n-\t* resolve.c (resolve_transfer): Set derived to correct symbol for\n-\tBT_CLASS.\n-\n-2017-10-29  Jim Wilson  <wilson@tuliptree.org>\n-\n-\t* invoke.texi: Delete adb and sdb references.\n-\n-2017-10-28  Andre Vehreschild  <vehre@gcc.gnu.org>\n-\n-\t* check.c (gfc_check_co_reduce): Clarify error message.\n-\n-2017-10-28  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/81758\n-\t* trans-expr.c (trans_class_vptr_len_assignment): 'vptr_expr'\n-\tmust only be set if the right hand side expression is of type\n-\tclass.\n-\n-2017-10-27  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\tPR fortran/82620\n-\t* match.c (gfc_match_allocate): Exit early on syntax error.\n-\n-2017-10-27  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/56342\n-\t* simplify.c (is_constant_array_expr): If the expression is\n-\ta parameter array, call gfc_simplify_expr.\n-\n-2017-10-25  Bernhard Reutner-Fischer  <aldot@gcc.gnu.org>\n-\n-\t* match.c (gfc_match_type_is): Fix typo in error message.\n-\n-2017-10-21  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/82586\n-\t* decl.c (gfc_get_pdt_instance): Remove the error message that\n-\tthe parameter does not have a corresponding component since\n-\tthis is now taken care of when the derived type is resolved. Go\n-\tstraight to error return instead.\n-\t(gfc_match_formal_arglist): Make the PDT relevant errors\n-\timmediate so that parsing of the derived type can continue.\n-\t(gfc_match_derived_decl): Do not check the match status on\n-\treturn from gfc_match_formal_arglist for the same reason.\n-\t* resolve.c (resolve_fl_derived0): Check that each type\n-\tparameter has a corresponding component.\n-\n-\tPR fortran/82587\n-\t* resolve.c (resolve_generic_f): Check that the derived type\n-\tcan be used before resolving the struture constructor.\n-\n-\tPR fortran/82589\n-\t* symbol.c (check_conflict): Add the conflicts involving PDT\n-\tKIND and LEN attributes.\n-\n-2017-10-19  Bernhard Reutner-Fischer  <aldot@gcc.gnu.org>\n-\n-\t* interface.c (check_sym_interfaces, check_uop_interfaces,\n-\tgfc_check_interfaces): Base interface_name buffer off\n-\tGFC_MAX_SYMBOL_LEN.\n-\n-2017-10-19  Jakub Jelinek  <jakub@redhat.com>\n-\n-\tPR fortran/82568\n-\t* gfortran.h (gfc_resolve_do_iterator): Add a bool arg.\n-\t(gfc_resolve_omp_local_vars): New declaration.\n-\t* openmp.c (omp_current_ctx): Make static.\n-\t(gfc_resolve_omp_parallel_blocks): Handle EXEC_OMP_TASKLOOP\n-\tand EXEC_OMP_TASKLOOP_SIMD.\n-\t(gfc_resolve_do_iterator): Add ADD_CLAUSE argument, if false,\n-\tdon't actually add any clause.  Move omp_current_ctx test\n-\tearlier.\n-\t(handle_local_var, gfc_resolve_omp_local_vars): New functions.\n-\t* resolve.c (gfc_resolve_code): Call gfc_resolve_omp_parallel_blocks\n-\tinstead of just gfc_resolve_omp_do_blocks for EXEC_OMP_TASKLOOP\n-\tand EXEC_OMP_TASKLOOP_SIMD.\n-\t(gfc_resolve_code): Adjust gfc_resolve_do_iterator caller.\n-\t(resolve_codes): Call gfc_resolve_omp_local_vars.\n-\n-2017-10-19  Bernhard Reutner-Fischer  <aldot@gcc.gnu.org>\n-\n-\t* gfortran.h (gfc_lookup_function_fuzzy): New declaration.\n-\t(gfc_closest_fuzzy_match): New declaration.\n-\t(vec_push): New definition.\n-\t* misc.c (gfc_closest_fuzzy_match): New definition.\n-\t* resolve.c: Include spellcheck.h.\n-\t(lookup_function_fuzzy_find_candidates): New static function.\n-\t(lookup_uop_fuzzy_find_candidates): Likewise.\n-\t(lookup_uop_fuzzy): Likewise.\n-\t(resolve_operator) <INTRINSIC_USER>: Call lookup_uop_fuzzy.\n-\t(gfc_lookup_function_fuzzy): New definition.\n-\t(resolve_unknown_f): Call gfc_lookup_function_fuzzy.\n-\t* interface.c (check_interface0): Likewise.\n-\t(lookup_arg_fuzzy_find_candidates): New static function.\n-\t(lookup_arg_fuzzy ): Likewise.\n-\t(compare_actual_formal): Call lookup_arg_fuzzy.\n-\t* symbol.c: Include spellcheck.h.\n-\t(lookup_symbol_fuzzy_find_candidates): New static function.\n-\t(lookup_symbol_fuzzy): Likewise.\n-\t(gfc_set_default_type): Call lookup_symbol_fuzzy.\n-\t(lookup_component_fuzzy_find_candidates): New static function.\n-\t(lookup_component_fuzzy): Likewise.\n-\t(gfc_find_component): Call lookup_component_fuzzy.\n-\n-2017-10-18  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/82567\n-\t* frontend-passes.c (combine_array_constructor): If an array\n-\tconstructor is all constants and has more elements than a small\n-\tconstant, don't convert a*[b,c] to [a*b,a*c] to reduce compilation\n-\ttimes.\n-\n-2017-10-18  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/79795\n-\t* resolve.c (resovle_symbol): Change gcc_assert to\n-\tsensible error message.\n-\n-2017-10-18  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/82550\n-\t* trans_decl.c (gfc_get_symbol_decl): Procedure symbols that\n-\thave the 'used_in_submodule' attribute should be processed by\n-\t'gfc_get_extern_function_decl'.\n-\n-2017-10-16  Fritz Reese <fritzoreese@gmail.com>\n-\n-\tPR fortran/82511\n-\t* trans-io.c (transfer_expr): Treat BT_UNION as BT_DERIVED.\n-\n-2017-10-15  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/82372\n-\t* fortran/scanner.c (last_error_char):  New global variable.\n-\t(gfc_scanner_init_1): Set last_error_char to NULL.\n-\t(gfc_gobble_whitespace): If a character not printable or\n-\tnot newline, issue an error.\n-\n-2017-10-13  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/81048\n-\t* resolve.c (resolve_symbol): Ensure that derived type array\n-\tresults get default initialization.\n-\n-2017-10-11  Nathan Sidwell  <nathan@acm.org>\n-\n-\t* cpp.c (gfc_cpp_add_include_path): Update incpath_e names.\n-\t(gfc_cpp_add_include_path_after): Likewise.\n-\n-2017-10-10  Richard Sandiford  <richard.sandiford@linaro.org>\n-\n-\t* target-memory.c (gfc_interpret_logical): Use wi::to_wide when\n-\toperating on trees as wide_ints.\n-\t* trans-const.c (gfc_conv_tree_to_mpz): Likewise.\n-\t* trans-expr.c (gfc_conv_cst_int_power): Likewise.\n-\t* trans-intrinsic.c (trans_this_image): Likewise.\n-\t(gfc_conv_intrinsic_bound): Likewise.\n-\t(conv_intrinsic_cobound): Likewise.\n-\n-2017-10-08  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\t* check.c (gfc_check_x): Remove function.\n-\t* intrinsic.c (add_functions): Use gfc_check_fn_r.\n-\n-2017-10-08  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/82375\n-\t* module.c : Bump up MOD_VERSION to 15.\n-\t(mio_component): Edit comment about PDT specification list.\n-\t(mio_expr, mio_symbol): Include the expression and symbol PDT\n-\tspecification lists in the same way as in mio_component.\n-\n-2017-10-08  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\t* dump_prase_tree (show_symbol): Output list of variables in\n-\tNAMELIST.\n-\t(show_code_node): Add new line for ELSE and END DO for DO\n-\tCONCURRENT.\n-\t* invoke.texi: Document that the output of\n-\t-fdump-fortran-original, -fdump-fortran-optimized and\n-\t-fdump-parse-tree is unsable and may lead to ICEs.\n-\n-2017-10-07  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/82375\n-\t* class.c (gfc_find_derived_vtab): Return NULL for a passed\n-\tpdt template to prevent bad procedures from being written.\n-\t* decl.c (gfc_get_pdt_instance): Do not use the default\n-\tinitializer for pointer and allocatable pdt type components. If\n-\tthe component is allocatbale, set the 'alloc_comp' attribute of\n-\t'instance'.\n-\t* module.c : Add a prototype for 'mio_actual_arglist'. Add a\n-\tboolean argument 'pdt'.\n-\t(mio_component): Call it for the parameter list of pdt type\n-\tcomponents with 'pdt' set to true.\n-\t(mio_actual_arg): Add the boolean 'pdt' and, if it is set, call\n-\tmio_integer for the 'spec_type'.\n-\t(mio_actual_arglist): Add the boolean 'pdt' and use it in the\n-\tcall to mio_actual_arg.\n-\t(mio_expr, mio_omp_udr_expr): Call mio_actual_arglist with\n-\t'pdt' set false.\n-\t* resolve.c (get_pdt_spec_expr): Add the parameter name to the\n-\tKIND parameter error.\n-\t(get_pdt_constructor): Check that cons->expr is non-null.\n-\t* trans-array.c (structure_alloc_comps): For deallocation of\n-\tallocatable components, ensure that parameterized components\n-\tare deallocated first. Likewise, when parameterized components\n-\tare allocated, nullify allocatable components first. Do not\n-\trecurse into pointer or allocatable pdt components while\n-\tallocating or deallocating parameterized components. Test that\n-\tparameterized arrays or strings are allocated before freeing\n-\tthem.\n-\t(gfc_trans_pointer_assignment): Call the new function. Tidy up\n-\ta minor whitespace issue.\n-\ttrans-decl.c (gfc_trans_deferred_vars): Set 'tmp' to NULL_TREE\n-\tto prevent the expression from being used a second time.\n-\n-2017-10-07  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/49232\n-\t* expr.c (gfc_check_pointer_assign): Error\n-\tfor non-contiguous rhs.\n-\n-2017-10-07  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\t* gfortran.h (async_io_dt): Add external reference.\n-\t* io.c (async_io_dt): Add variable.\n-\t(compare_to_allowed_values): Add prototyte. Add optional argument\n-\tnum. If present, set it to the number of the entry that was\n-\tmatched.\n-\t(check_io_constraints): If this is for an asynchronous I/O\n-\tstatement, set async_io_dt and set the asynchronous flag for\n-\ta SIZE tag.\n-\t* resolve.c (resolve_transfer): If async_io_dt is set, set\n-\tthe asynchronous flag on the variable.\n-\t(resolve_fl_namelist): If async_io_dt is set, set the asynchronous\n-\tflag on all elements of the namelist.\n-\n-2017-10-04  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/60458\n-\tPR fortran/77296\n-\t* resolve.c (resolve_assoc_var): Deferred character type\n-\tassociate names must not receive an integer conatant length.\n-\t* symbol.c (gfc_is_associate_pointer): Deferred character\n-\tlength functions also require an associate pointer.\n-\t* trans-decl.c (gfc_get_symbol_decl): Deferred character\n-\tlength functions or derived type components require the assoc\n-\tname to have variable string length.\n-\t* trans-stmt.c (trans_associate_var): Set the string length of\n-\tdeferred string length associate names. The address expression\n-\tis not needed for allocatable, pointer or dummy targets. Change\n-\tthe comment about defered string length targets.\n-\n-2017-10-03  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\t* io.c (match_wait_element): Correctly match END and EOR tags.\n-\t* dump-parse-tree.c (show_code_node): Handle EXEC_WAIT.\n-\n-2017-10-02  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/82312\n-\t* resolve.c (gfc_resolve_code): Simplify condition for class\n-\tpointer assignments becoming regular assignments by asserting\n-\tthat only class valued targets are permitted.\n-\t* trans-expr.c (trans_class_pointer_fcn): New function using a\n-\tblock of code from gfc_trans_pointer_assignment.\n-\t(gfc_trans_pointer_assignment): Call the new function. Tidy up\n-\ta minor whitespace issue.\n-\n-2017-10-01  Dominique d'Humieres  <dominiq@lps.ens.fr>\n-\n-\tPR fortran/61450\n-\t* parse.c (gfc_global_used): Replace the gfc_internal_error\n-\twith an error.\n-\n-2017-09-29  Dominique d'Humieres  <dominiq@lps.ens.fr>\n-\n-\tPR fortran/25071\n-\t* interface.c (compare_actual_formal): Change warnings to errors\n-\twhen \"Actual argument contains too few elements for dummy\n-\targument\", unless -std=legacy is used.\n-\n-2017-09-27  Thomas Schwinge  <thomas@codesourcery.com>\n-\n-\t* lang.opt <Wdo-subscript>: End help text with a period.\n-\n-2017-09-26  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\t* frontend-passes.c (do_subscript): Don't do anything\n-\tif inside an associate list.\n-\n-2017-09-25  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\t* lang.opt:  Add -Wdo-subscript.\n-\t* frontend-passes.c (do_t): New type.\n-\t(doloop_list): Use variable of do_type.\n-\t(if_level): Variable to track if levels.\n-\t(select_level): Variable to track select levels.\n-\t(gfc_run_passes): Initialize i_level and select_level.\n-\t(doloop_code): Record current level of if + select\n-\tlevel in doloop_list.  Add seen_goto if there could\n-\tbe a branch outside the loop. Use different type for\n-\tdoloop_list.\n-\t(doloop_function): Call do_intent and do_subscript; move\n-\tfunctionality of checking INTENT to do_intent.\n-\t(insert_index_t): New type, for callback_insert_index.\n-\t(callback_insert_index): New function.\n-\t(insert_index): New function.\n-\t(do_subscript): New function.\n-\t(do_intent): New function.\n-\t(gfc_code_walker): Keep track of if_level and select_level.\n-\t* invoke.texi: Document -Wdo-subscript.\n-\n-2017-09-25  Janne Blomqvist  <jb@gcc.gnu.org>\n-\n-\t* trans.c (gfc_unlikely): Remove unnecessary fold_convert.\n-\t(gfc_likely): Likewise.\n-\n-2017-09-24  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\t    Steven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\tPR fortran/80118\n-\t* expr.c (gfc_get_full_arrayspec_from_expr): If there is\n-\tno symtree, set array spec to NULL.\n-\n-2017-09-23  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/82143\n-\t* lang.opt: Add the options -fdefault-real-10 and -fdefault-real-16.\n-\tRename flag_default_real to flag_default_real_8.\n-\t* invoke.texi: Add documentation.\n-\t* module.c (use_iso_fortran_env_module): flag_default_real is renamed.\n-\t* trans-types.c (gfc_init_kinds): Implement the flags\n-\t-fdefault-real-10 and -fdefault-real-16. Make -fdefault-double-8 work\n-\twithout -fdefault-real-8.\n-\n-2017-09-21  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/52832\n-\t* match.c (gfc_match_associate): Before failing the association\n-\ttry again, allowing a proc pointer selector.\n-\n-\tPR fortran/80120\n-\tPR fortran/81903\n-\tPR fortran/82121\n-\t* primary.c (gfc_match_varspec): Introduce 'tgt_expr', which\n-\tpoints to the associate selector, if any. Go through selector\n-\treferences, after resolution for variables, to catch any full\n-\tor section array references. If a class associate name does\n-\tnot have the same declared type as the selector, resolve the\n-\tselector and copy the declared type to the associate name.\n-\tBefore throwing a no implicit type error, resolve all allowed\n-\tselector expressions, and copy the resulting typespec.\n-\n-\tPR fortran/67543\n-\t* resolve.c (resolve_assoc_var): Selector must cannot be the\n-\tNULL expression and it must have a type.\n-\n-\tPR fortran/78152\n-\t* resolve.c (resolve_symbol): Allow associate names to be\n-\tcoarrays.\n-\n-2017-09-21  Cesar Philippidis  <cesar@codesourcery.com>\n-\n-\t* openmp.c (gfc_match_oacc_wait): Don't restrict wait directive\n-\targuments to constant integers.\n-\n-2017-09-17  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/82173\n-\t* decl.c (gfc_get_pdt_instance): Use the component initializer\n-\texpression for the default, rather than the parameter value.\n-\t* resolve.c (resolve_pdt): New function.\n-\t(resolve_symbol): Call it. Remove false error, prohibiting\n-\tdeferred type parameters for dummy arguments.\n-\n-\tPR fortran/60483\n-\t* primary.c (gfc_match_varspec): If the type of an associate\n-\tname is unknown and yet there is a match, try resolving the\n-\ttarget expression and using its type.\n-\n-2017-09-15  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/82184\n-\ttrans-decl.c (gfc_trans_deferred_vars): Do not null the 'span'\n-\tfield if the symbol is either implicitly or explicitly saved.\n-\n-2017-09-13  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/82173\n-\t* decl.c (match_char_kind): If the kind expression is\n-\tparameterized, save it in saved_kind_expr and set kind = 0.\n-\t(gfc_get_pdt_instance): Resolve and simplify before emitting\n-\terror on expression kind. Insert a missing simplification after\n-\tinsertion of kind expressions.\n-\n-2017-09-12  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/82173\n-\tPR fortran/82168\n-\t* decl.c (variable_decl): Check pdt template components for\n-\tappearance of KIND/LEN components in the type parameter name\n-\tlist, that components corresponding to type parameters have\n-\teither KIND or LEN attributes and that KIND or LEN components\n-\tare scalar. Copy the initializer to the parameter value.\n-\t(gfc_get_pdt_instance): Add a label 'error_return' and follow\n-\tit with repeated code, while replacing this code with a jump.\n-\tCheck if a parameter appears as a component in the template.\n-\tMake sure that the parameter expressions are integer. Validate\n-\tKIND expressions.\n-\t(gfc_match_decl_type_spec): Search for pdt_types in the parent\n-\tnamespace since they are instantiated in the template ns.\n-\t* expr.c (gfc_extract_int): Use a KIND parameter if it\n-\tappears as a component expression.\n-\t(gfc_check_init_expr): Allow expressions with the pdt_kind\n-\tattribute.\n-\t*primary.c (gfc_match_actual_arglist): Make sure that the first\n-\tkeyword argument is recognised when 'pdt' is set.\n-\n-2017-09-10  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/34640\n-\tPR fortran/40737\n-\tPR fortran/55763\n-\tPR fortran/57019\n-\tPR fortran/57116\n-\n-\t* expr.c (is_subref_array): Add class pointer array dummies\n-\tto the list of expressions that return true.\n-\t* trans-array.c: Add SPAN_FIELD and update indices for\n-\tsubsequent fields.\n-\t(gfc_conv_descriptor_span, gfc_conv_descriptor_span_get,\n-\tgfc_conv_descriptor_span_set, is_pointer_array,\n-\tget_array_span): New functions.\n-\t(gfc_get_descriptor_offsets_for_info): New function to preserve\n-\tAPI for access to descriptor fields for trans-types.c.\n-\t(gfc_conv_scalarized_array_ref): If the expression is a subref\n-\tarray, make sure that info->descriptor is a descriptor type.\n-\tOtherwise, if info->descriptor is a pointer array, set 'decl'\n-\tand fix it if it is a component reference.\n-\t(build_array_ref): Simplify handling of class array refs by\n-\tpassing the vptr to gfc_build_array_ref rather than generating\n-\tthe pointer arithmetic in this function.\n-\t(gfc_conv_array_ref): As in gfc_conv_scalarized_array_ref, set\n-\t'decl'.\n-\t(gfc_array_allocate): Set the span field if this is a pointer\n-\tarray. Use the expr3 element size if it is available, so that\n-\tthe dynamic type element size is used.\n-\t(gfc_conv_expr_descriptor): Set the span field for pointer\n-\tassignments.\n-\t* trans-array.h: Prototypes for gfc_conv_descriptor_span_get\n-\tgfc_conv_descriptor_span_set and\n-\tgfc_get_descriptor_offsets_for_info added.\n-\ttrans-decl.c (gfc_get_symbol_decl): If a non-class pointer\n-\tarray, mark the declaration as a GFC_DECL_PTR_ARRAY_P. Remove\n-\tthe setting of GFC_DECL_SPAN.\n-\t(gfc_trans_deferred_vars): Set the span field to zero in thge\n-\toriginating scope.\n-\t* trans-expr.c (gfc_conv_procedure_call): Do not use copy-in/\n-\tcopy-out to pass subref expressions to a pointer dummy.\n-\t(gfc_trans_pointer_assignment): Remove code for setting of\n-\tGFC_DECL_SPAN. Set the 'span' field for non-class pointers to\n-\tclass function results. Likewise for rank remap. In the case\n-\tthat the target is not a whole array, use the target array ref\n-\tfor remap and, since the 'start' indices are missing, set the\n-\tlbounds to one, as required by the standard.\n-\t* trans-intrinsic.c (conv_expr_ref_to_caf_ref): Pick up the\n-\t'token' offset from the field decl in the descriptor.\n-\t(conv_isocbinding_subroutine): Set the 'span' field.\n-\t* trans-io.c (gfc_trans_transfer): Always scalarize pointer\n-\tarray io.\n-\t* trans-stmt.c (trans_associate_var): Set the 'span' field.\n-\t* trans-types.c (gfc_get_array_descriptor_base): Add the 'span'\n-\tfield to the array descriptor.\n-\t(gfc_get_derived_type): Pointer array components are marked as\n-\tGFC_DECL_PTR_ARRAY_P.\n-\t(gfc_get_array_descr_info): Replaced API breaking code for\n-\tdescriptor offset calling gfc_get_descriptor_offsets_for_info.\n-\t* trans.c (get_array_span): New function.\n-\t(gfc_build_array_ref): Simplify by calling get_array_span and\n-\tobtain 'span' if 'decl' or 'vptr' present.\n-\t* trans.h : Rename DECL_LANG_FLAG_6, GFC_DECL_SUBREF_ARRAY_P,\n-\tas GFC_DECL_PTR_ARRAY_P.\n-\n-2017-09-09  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\t* decl.c : Add decl_type_param_list, type_param_spec_list as\n-\tstatic variables to hold PDT spec lists.\n-\t(build_sym): Copy 'type_param_spec_list' to symbol spec_list.\n-\t(build_struct): Copy the 'saved_kind_expr' to the component\n-\t'kind_expr'. Check that KIND or LEN components appear in the\n-\tdecl_type_param_list. These should appear as symbols in the\n-\tf2k_derived namespace. If the component is itself a PDT type,\n-\tcopy the decl_type_param_list to the component param_list.\n-\t(gfc_match_kind_spec): If the KIND expression is parameterized\n-\tset KIND to zero and store the expression in 'saved_kind_expr'.\n-\t(insert_parameter_exprs): New function.\n-\t(gfc_insert_kind_parameter_exprs): New function.\n-\t(gfc_insert_parameter_exprs): New function.\n-\t(gfc_get_pdt_instance): New function.\n-\t(gfc_match_decl_type_spec): Match the decl_type_spec_list if it\n-\tis present. If it is, call 'gfc_get_pdt_instance' to obtain the\n-\tspecific instance of the PDT.\n-\t(match_attr_spec): Match KIND and LEN attributes. Check for the\n-\tstandard and for type/kind of the parameter. They are also not\n-\tallowed outside a derived type definition.\n-\t(gfc_match_data_decl): Null the decl_type_param_list and the\n-\ttype_param_spec_list on entry and free them on exit.\n-\t(gfc_match_formal_arglist): If 'typeparam' is true, add the\n-\tformal symbol to the f2k_derived namespace.\n-\t(gfc_match_derived_decl): Register the decl_type_param_list\n-\tif this is a PDT. If this is a type extension, gather up all\n-\tthe type parameters and put them in the right order.\n-\t*dump-parse-tree.c (show_attr): Signal PDT templates and the\n-\tparameter attributes.\n-\t(show_components): Output parameter atrributes and component\n-\tparameter list.\n-\t(show_symbol): Show variable parameter lists.\n-\t* expr.c (expr.c): Copy the expression parameter list.\n-\t(gfc_is_constant_expr): Pass on symbols representing PDT\n-\tparameters.\n-\t(gfc_check_init_expr): Break on PDT KIND parameters and\n-\tPDT parameter expressions.\n-\t(gfc_check_assign): Assigning to KIND or LEN components is an\n-\terror.\n-\t(derived_parameter_expr): New function.\n-\t(gfc_derived_parameter_expr): New function.\n-\t(gfc_spec_list_type): New function.\n-\t* gfortran.h : Add enum gfc_param_spec_type. Add the PDT attrs\n-\tto the structure symbol_attr. Add the 'kind_expr' and\n-\t'param_list' field to the gfc_component structure. Comment on\n-\tthe reuse of the gfc_actual_arglist structure as storage for\n-\ttype parameter spec lists. Add the new field 'spec_type' to\n-\tthis structure. Add 'param_list' fields to gfc_symbol and\n-\tgfc_expr. Add prototypes for gfc_insert_kind_parameter_exprs,\n-\tgfc_insert_parameter_exprs, gfc_add_kind, gfc_add_len,\n-\tgfc_derived_parameter_expr and gfc_spec_list_type.\n-\t* interface.c (gfc_compare_derived_types): Treat PDTs in the\n-\tsame way as sequence types.\n-\t* match.c : Add variable 'type_param_spec_list'.\n-\t(gfc_op2string, gfc_match_member_sep, gfc_match_label): Remove\n-\ttrailing whitespace.\n-\t(match_derived_type_spec): Match PDTs and find specific\n-\tinstance.\n-\t(gfc_match_type_spec): Remove more trailing whitespace.\n-\t(gfc_match_allocate): Assumed or deferred parameters cannot\n-\tappear here. Copy the type parameter spec list to the expr for\n-\tthe allocatable entity. Free 'type_param_spec_list'.\n-\t(gfc_match_common, gfc_match_namelist, gfc_match_module): Still\n-\tmore trailing whitespace to remove.\n-\t(gfc_match_type_is): Allow PDT typespecs.\n-\t* match.h : Modify prototypes for gfc_match_formal_arglist and\n-\tgfc_match_actual_arglist.\n-\t* module.c (ab_attribute, mstring attr_bits): PDT attributes\n-\tadded.\n-\t(mio_symbol_attribute): PDT attributes handled.\n-\t(mio_component): Deal with 'kind_expr' field.\n-\t(mio_full_f2k_derived): For PDT templates, transfer the formal\n-\tnamespace symroot to the f2k_derived namespace.\n-\t*primary.c (match_keyword_arg, gfc_match_actual_arglist): Add\n-\tmodifications to handle PDT spec lists. These are flagged in\n-\tboth cases by new boolean arguments, whose prototype defaults\n-\tare false.\n-\t(gfc_match_structure_constructor, match_variable): Remove yet\n-\tmore trailing whitespace.\n-\t* resolve.c (get_pdt_spec_expr, get_pdt_constructor): New\n-\tfunctions.\n-\t(resolve_structure_cons): If the constructor is a PDT template,\n-\tcall get_pdt_constructor to build it using the parameter lists\n-\tand then get the specific instance of the PDT.\n-\t(resolve_component): PDT strings need a hidden string length\n-\tcomponent like deferred characters.\n-\t(resolve_symbol): Dummy PDTs cannot have deferred parameters.\n-\t* symbol.c (gfc_add_kind, gfc_add_len): New functions.\n-\t(free_components): Free 'kind_expr' and 'param_list' fields.\n-\t(gfc_free_symbol): Free the 'param_list' field.\n-\t(gfc_find_sym_tree): If the current state is a PDT template,\n-\tlook for the symtree in the f2k_derived namspaces.\n-\ttrans-array.c (structure_alloc_comps): Allocate and deallocate\n-\tPDTs. Check dummy arguments for compliance of LEN parameters.\n-\tAdd the new functions to the preceeding enum.\n-\t(gfc_allocate_pdt_comp, gfc_deallocate_pdt_comp and\n-\tgfc_check_pdt_dummy): New functions calling above.\n-\t* trans-array.h : Add prototypes for these functions.\n-\ttrans-decl.c (gfc_get_symbol_decl): Call gfc_defer_symbol_init\n-\tas appropriate for PDT symbols.\n-\t(gfc_trans_deferred_vars): Allocate/deallocate PDT entities as\n-\tthey come into and out of scope. Exclude pdt_types from being\n-\t'gcc_unreachable'.\n-\t(gfc_trans_subcomponent_assign): PDT array components must be\n-\thandles as if they are allocatable.\n-\t* trans-stmt.c (gfc_trans_allocate): Handle initialization of\n-\tPDT entities.\n-\t(gfc_trans_deallocate): Likewise.\n-\t* trans-types.c (gfc_get_derived_type): PDT templates must not\n-\tarrive here. PDT string components are handles as if deferred.\n-\tSimilarly, PDT arrays are treated as if allocatable. PDT\n-\tstrings are pointer types.\n-\t* trans.c (gfc_deferred_strlen): Handle PDT strings in the same\n-\tway as deferred characters.\n-\n-2017-09-01  Jakub Jelinek  <jakub@redhat.com>\n-\n-\tPR c/81887\n-\t* parse.c (decode_omp_directive): Use matchs instead of matcho for\n-\tend ordered and ordered directives, except for ordered depend.  For\n-\t-fopenmp-simd and ordered depend, reject the stmt.\n-\t* trans-openmp.c (gfc_trans_omp_ordered): For -fopenmp-simd ignore\n-\tthreads clause and if simd clause isn't present, just translate the\n-\tbody.\n-\n-2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n-\t    Alan Hayward  <alan.hayward@arm.com>\n-\t    David Sherwood  <david.sherwood@arm.com>\n-\n-\t* trans-types.c (gfc_init_kinds): Use opt_scalar_int_mode for\n-\tthe mode iterator.\n-\n-2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n-\t    Alan Hayward  <alan.hayward@arm.com>\n-\t    David Sherwood  <david.sherwood@arm.com>\n-\n-\t* target-memory.c (size_integer): Use SCALAR_INT_TYPE_MODE.\n-\t(size_logical): Likewise.\n-\n-2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n-\t    Alan Hayward  <alan.hayward@arm.com>\n-\t    David Sherwood  <david.sherwood@arm.com>\n-\n-\t* trans-types.c (gfc_type_for_mode): Use is_a <scalar_int_mode>.\n-\n-2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n-\t    Alan Hayward  <alan.hayward@arm.com>\n-\t    David Sherwood  <david.sherwood@arm.com>\n-\n-\t* trans-types.c (gfc_init_kinds): Use opt_scalar_float_mode\n-\tand FOR_EACH_MODE_IN_CLASS.\n-\n-2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n-\t    Alan Hayward  <alan.hayward@arm.com>\n-\t    David Sherwood  <david.sherwood@arm.com>\n-\n-\t* target-memory.c (size_float): Use SCALAR_FLOAT_TYPE_MODE\n-\tinstead of TYPE_MODE.\n-\n-2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n-\t    Alan Hayward  <alan.hayward@arm.com>\n-\t    David Sherwood  <david.sherwood@arm.com>\n-\n-\t* trans-types.c (gfc_init_kinds): Use machine_mode instead of int\n-\tfor \"mode\".\n-\n-2017-08-28  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/81770\n-\t* expr.c (gfc_check_pointer_assign): Improve the check whether pointer\n-\tmay outlive pointer target.\n-\n-2017-08-27  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/81974\n-\t* frontend-passes (inline_matumul_assign):  Explicity\n-\tset typespec for call to CONJG.\n-\n-2017-08-21  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n-\n-\tPR fortran/81296\n-\t* trans-io.c (get_dtio_proc): Add check for format label and set\n-\tformatted flag accordingly. Reorganize the code a little.\n-\n-2017-08-16  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/81116\n-\t* frontend-passes.c (realloc_string_callback): If expression is a\n-\tconcatenation, also check for dependency.\n-\t(constant_string_length): Check for presence of symtree.\n-\n-2017-08-13  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\t* gfortran.texi: Document format of unformatted sequential files.\n-\n-2017-08-11  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\t* invoke.texi:  Actually commit change about -Ofast.\n-\n-2017-08-11  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/60355\n-\t* resolve.c (resolve_symbol): Adjust (and reformat)\n-\tcomment.  Perform check if a BIND(C) is declared\n-\tat module level regardless of whether it is typed\n-\timplicitly or not.\n-\n-2017-08-10  Fritz Reese <fritzoreese@gmail.com>\n-\n-\t* options.c (set_dec_flags): Only set legacy standards when value\n-\tis not zero.\n-\n-2017-08-10  Fritz Reese <fritzoreese@gmail.com>\n-\n-\t* options.c (set_dec_flags, gfc_post_options): Only set flag_d_lines\n-\twith -fdec when not set by user.\n-\n-2017-08-10  Fritz Reese <fritzoreese@gmail.com>\n-\n-\t* decl.c (attr_seen): New static variable.\n-\t* decl.c (variable_decl): Match %FILL in STRUCTURE body.\n-\t* gfortran.texi: Update documentation.\n-\n-2017-08-08  Martin Liska  <mliska@suse.cz>\n-\n-\t* trans-types.c: Include header files.\n-\n-2017-08-07  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/68829\n-\tPR fortran/81701\n-\t* options.c: Make -Ofast honor -fmax-stack-var-size.\n-\t* invoke.texi: Document change.\n-\n-2017-08-01  Thomas K\u00f6nig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/79312\n-\t* intrisic.c (gfc_convert_type_warn):  Only set typespec for\n-\tempty array constructors which don't have it already.\n-\n-2017-08-01  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/45435\n-\t* lang.opt (fc-prototypes): Add option.\n-\t* gfortran.h (gfc_typespec): Add interop_kind to struct.\n-\t(gfc_dump_c_prototypes): Add prototype.\n-\t* decl.c (gfc_match_kind_spec): Copy symbol used for kind to typespec.\n-\t* parse.c (gfc_parse_file): Call gfc_dump_prototypes.\n-\t* dump-parse-tree.c (gfc_dump_c_prototypes): New function.\n-\t(type_return): New enum.\n-\t(get_c_type_name): New function.\n-\t(write_decl): New function.\n-\t(write_type): New function.\n-\t(write_variable): New function.\n-\t(write_proc): New function.\n-\t(write_interop_decl): New function.\n-\t* invoke.texi: Document -fc-prototypes.\n-\n-2017-08-01  Dominique d'Humieres  <dominiq@lps.ens.fr>\n-\n-\tPR fortran/53542\n-\t* expr.c (gfc_check_init_expr): Use the renamed name.\n-\n-2017-07-31  Jakub Jelinek  <jakub@redhat.com>\n-\n-\t* check.c (gfc_check_num_images): Fix a pasto.\n-\n-2017-07-29  Jakub Jelinek  <jakub@redhat.com>\n-\n-\t* trans-decl.c (gfc_trans_use_stmts): Pass false as new argument to\n-\tthe imported_module_or_decl debug hook.\n-\n-2017-07-28  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n-\n-\t* resolve.c (find_reachable_labels): Adjust.\n-\n-2017-07-25  Jakub Jelinek  <jakub@redhat.com>\n-\n-\t* ioparm.def: Use 1U << 31 instead of 1 << 31 as flags2 mask.\n-\n-2017-07-24  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\t* dump-parse-tree.c (show_symbol):  Show binding label if present.\n-\n-2017-07-24  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\t    Mikael Morin  <mikael@gcc.gnu.org>\n-\n-\tPR fortran/66102\n-\t* fortran/trans-array.c (gfc_conv_resolve_dependencies):\n-\tBreak if dependency has been found.\n-\n-2017-07-23  Alexander Monakov  <amonakov@ispras.ru>\n-\n-\t* interface.c (pair_cmp): Fix gfc_symbol comparison.  Adjust comment.\n-\n-2017-07-18  Nathan Sidwell  <nathan@acm.org>\n-\n-\t* trans.c (gfc_build_array_ref): Use TYPE_MAX_VALUE.\n-\n-2017-07-09  Dominique d'Humieres  <dominiq@lps.ens.fr>\n-\n-\tPR fortran/81341\n-\t* class.c (class_array_ref_detected): Remove a redundant\n-\tcondition.\n-\n-2017-07-06  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/70071\n-\t* array.c (gfc_ref_dimen_size): Handle bad subscript triplets.\n-\n-2017-07-03  Dominique d'Humieres  <dominiq@lps.ens.fr>\n-\n-\tPR fortran/79866\n-\t* resolve.c (resolve_symbol): Fix typo.\n-\n-2017-07-03  Dominique d'Humieres  <dominiq@lps.ens.fr>\n-\n-\tPR fortran/79843\n-\t* symbol.c (check_conflict): Add missing \"conflicts\".\n-\n-2017-06-29  Cesar Philippidis  <cesar@codesourcery.com>\n-\n-\tPR fortran/77765\n-\t* openmp.c (gfc_match_oacc_routine): Check if proc_name exist before\n-\tcomparing the routine name against it.\n-\n-2017-06-27  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n-\n-\tPR fortran/80164\n-\t* trans-stmt.c (gfc_trans_call): If no code expr, use code->loc\n-\tas warning/error locus.\n-\n-2017-06-24  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n-\n-\tPR fortran/81160\n-\t* arith.c (wprecision_int_real): Set return value before\n-\tmpz_clear and then return after it.\n-\n-2017-06-15  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/80983\n-\t* trans-expr.c (gfc_conv_procedure_call): Deallocate the result of\n-\tscalar allocatable procedure-pointer components.\n-\n-2017-06-10  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/80988\n-\t* frontend-passes.c (traverse_io_block):  Also\n-\tcheck for variables occurring as indices multiple\n-\ttime in a single implied DO loop.\n-\n-2017-06-05  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/70601\n-\t* trans-expr.c (gfc_conv_procedure_call): Fix detection of allocatable\n-\tfunction results.\n-\n-2017-06-05  Nicolas Koenig  <koenigni@student.ethz.ch>\n-\n-\tPR fortran/35339\n-\t* frontend-passes.c (traverse_io_block): New function.\n-\t(simplify_io_impl_do): New function.\n-\t(optimize_namespace): Invoke gfc_code_walker with\n-\tsimplify_io_impl_do.\n-\n-2017-06-02  Jakub Jelinek  <jakub@redhat.com>\n-\n-\tPR fortran/80918\n-\t* openmp.c (resolve_omp_clauses): Fix a typo.\n-\n-2017-05-30  David Malcolm  <dmalcolm@redhat.com>\n-\n-\t* error.c (gfc_format_decoder): Update for new bool and\n-\tconst char ** params.\n-\n-2017-05-29  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/37131\n-\t* frontend-passes.c (check_conjg_transpose_variable):\n-\tAdd prototype.\n-\t(has_dimen_vector_ref):  Likewise\n-\t(matmul_temp_args):  New function. Add prototype.\n-\t(optimize_namespace):  Call matmul_temp_args.\n-\n-2017-05-28  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\t* frontend-passes.c (matmul_lhs_realloc):  Correct\n-\tallocation size for case A1B2.\n-\n-2017-05-25  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\t* dump-parse-tree.c (show_expr):  Also replace\n-\twith dumpfile for showing values for forgotten\n-\tcase.\n-\n-2017-05-24  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\t* dump-parse-tree.c (show_expr):  Replace stdout\n-\twith dumpfile for showing values.\n-\n-2017-05-24  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/66094\n-\t* frontend-passes.c (matrix_case):  Add A2TB2.\n-\t(inline_limit_check):  Handle MATMUL(TRANSPOSE(A),B)\n-\t(inline_matmul_assign):  Likewise.\n-\n-2017-05-23  Thomas Schwinge  <thomas@codesourcery.com>\n-\n-\t* openmp.c (OACC_KERNELS_CLAUSES): Add \"OMP_CLAUSE_NUM_GANGS\",\n-\t\"OMP_CLAUSE_NUM_WORKERS\", \"OMP_CLAUSE_VECTOR_LENGTH\".\n-\n-2017-05-22  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/80766\n-\t* resolve.c (resolve_fl_derived): Make sure that vtype symbols are\n-\tproperly resolved.\n-\n-2017-05-19  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/80333\n-\t* trans-io.c (nml_get_addr_expr): If we are dealing with class\n-\ttype data set tmp tree to get that address.\n-\t(transfer_namelist_element): Set the array spec to point to the\n-\tthe class data.\n-\n-2017-05-19  David Malcolm  <dmalcolm@redhat.com>\n-\n-\tPR fortran/79852\n-\t* bbt.c (insert): Remove trailing exclamation mark from message.\n-\t* decl.c (gfc_match_final_decl): Likewise.\n-\t* dump-parse-tree.c (show_expr): Likewise.\n-\t* module.c (gfc_use_module): Likewise.\n-\t* primary.c (build_actual_constructor): Likewise.\n-\t(gfc_convert_to_structure_constructor): Likewise.\n-\n-2017-05-19  Thomas Schwinge  <thomas@codesourcery.com>\n-\n-\t* gfortran.h (enum gfc_omp_default_sharing): Add\n-\t\"OMP_DEFAULT_PRESENT\".\n-\t* dump-parse-tree.c (show_omp_clauses): Handle it.\n-\t* openmp.c (gfc_match_omp_clauses): Likewise.\n-\t* trans-openmp.c (gfc_trans_omp_clauses): Likewise.\n-\n-2017-05-18  Fritz Reese <fritzoreese@gmail.com>\n-\n-\tPR fortran/79968\n-\t* decl.c (match_attr_spec, gfc_match_automatic,\n-\tgfc_match_static, gfc_match_structure_decl): Unify diagnostic\n-\terrors regarding -fdec options.\n-\t* io.c (match_dec_etag, match_dec_vtag, match_dec_ftag): Ditto.\n-\n-2017-05-17  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n-\n-\tPR fortran/80741\n-\t* trans-io.c (transfer_namelist_element): Change check from\n-\tNULL_TREE to null_pointer_node.\n-\n-2017-05-17  Fritz Reese <fritzoreese@gmail.com>\n-\n-\tPR fortran/80668\n-\t* expr.c (component_initializer): Don't generate initializers for\n-\tpointer components.\n-\t* invoke.texi (-finit-derived): Document.\n-\n-2017-05-16  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/80554\n-\t* decl.c (build_sym): In a submodule allow overriding of host\n-\tassociated symbols from the ancestor module with a new\n-\tdeclaration.\n-\n-2017-05-15  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\tPR fortran/80674\n-\t* trans-stmt.c (gfc_trans_integer_select): Remove redundant condition.\n-\n-2017-05-15  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\tPR fortran/80752\n-\t* expr.c (gfc_generate_initializer):  If type conversion fails,\n-\tcheck for error and return NULL.\n-\n-2017-05-14  Nicolas Koenig  <koenigni@student.ethz.ch>\n-\n-\tPR fortran/80442\n-\t* array.c (gfc_ref_dimen_size): Simplify stride\n-\texpression\n-\t* data.c (gfc_advance_section): Simplify start,\n-\tend and stride expressions\n-\t(gfc_advance_section): Simplify start and end\n-\texpressions\n-\t(gfc_get_section_index): Simplify start expression\n-\n-2017-05-13  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n-\n-\t* io.c (gfc_resolve_dt): Fix returns to bool type.\n-\n-2017-05-11  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n-\n-\tPR fortran/78659\n-\t* io.c (dtio_procs_present): Add new function to check for DTIO\n-\tprocedures relative to I/O statement READ or WRITE.\n-\t(gfc_resolve_dt): Add namelist checks using the new function.\n-\t* resolve.c (dtio_procs_present): Remove function and related\n-\tnamelist checks. (resolve_fl_namelist): Add check specific to\n-\tFortran 95 restriction on namelist objects.\n-\n-2017-05-11  Nathan Sidwell  <nathan@acm.org>\n-\n-\t* trans-decl.c: Include dumpfile.h not tree-dump.h,\n-\n-2017-05-09  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/79311\n-\t* resolve.c (gfc_resolve_finalizers): Ensure that derived-type\n-\tcomponents have a their finalizers resolved, also if the superordinate\n-\ttype itself has a finalizer.\n-\n-2017-05-08  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/79930\n-\t* frontend-passes.c (matmul_to_var_expr): New function,\n-\tadd prototype.\n-\t(matmul_to_var_code):  Likewise.\n-\t(optimize_namespace):  Use them from gfc_code_walker.\n-\n-2017-05-05  David Malcolm  <dmalcolm@redhat.com>\n-\n-\t* cpp.c (cb_cpp_error): Replace report_diagnostic\n-\twith diagnostic_report_diagnostic.\n-\t* error.c (gfc_warning): Likewise.\n-\t(gfc_warning_now_at): Likewise.\n-\t(gfc_warning_now): Likewise.\n-\t(gfc_warning_internal): Likewise.\n-\t(gfc_error_now): Likewise.\n-\t(gfc_fatal_error): Likewise.\n-\t(gfc_error_opt): Likewise.\n-\t(gfc_internal_error): Likewise.\n-\n-2017-05-01  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/37131\n-\t* frontend-passes.c (inline_matmul_assign): Also check bounds\n-\tfor allocatable lhs and matrix-vector-multiplication.\n-\n-2017-04-23  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n-\n-\tPR fortran/80484\n-\t* io.c (format_lex): Check for '/' and set token to FMT_SLASH.\n-\t(check_format): Move FMT_DT checking code to data_desc section.\n-\t* module.c (gfc_match_use): Include the case of INTERFACE_DTIO.\n-\n-2017-04-22  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/80121\n-\t* trans-types.c (gfc_conv_procedure_call): Deallocate the components\n-\tof allocatable intent(out) arguments.\n-\n-2017-04-21  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/80392\n-\t* trans-types.c (gfc_get_derived_type): Prevent an infinite loop when\n-\tbuilding a derived type that includes a procedure pointer component\n-\twith a polymorphic result.\n-\n-2017-04-17  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/80440\n-\t* module.c (find_symtree_for_symbol): Delete.\n-\t(read_module): Remove the call to the above.\n-\n-2017-04-14  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/80361\n-\t* class.c (generate_finalization_wrapper): Give the finalization wrapper\n-\tthe recursive attribute.\n-\n-2017-04-10  Nicolas Koenig  <koenigni@student.ethz.ch>\n-\t    Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/69498\n-\t* module.c (gfc_match_submodule): Add error\n-\tif function is called in the wrong state.\n-\n-2017-04-10  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/80046\n-\t* expr.c (gfc_check_pointer_assign): Check if procedure pointer\n-\tcomponents in a pointer assignment need an explicit interface.\n-\n-2017-03-18  Nicolas Koenig  <koenigni@student.ethz.ch>\n-\n-\tPR fortran/69498\n-\t* symbol.c (gfc_delete_symtree): If there is a period in the name, ignore\n-\teverything before it.\n-\n-2017-03-28  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/78661\n-\t* trans-io.c (transfer_namelist_element): Perform a polymorphic call\n-\tto a DTIO procedure if necessary.\n-\n-2017-03-25  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/80156\n-\tPR fortran/79382\n-\t* decl.c (access_attr_decl): Remove the error for an absent\n-\tgeneric DTIO interface and ensure that symbol has the flavor\n-\tFL_PROCEDURE.\n-\n-2017-03-22  Dominique d'Humieres  <dominiq@lps.ens.fr>\n-\n-\tPR fortran/79838\n-\t* module.c: Remove trailing period.\n-\n-2017-03-22  Dominique d'Humieres  <dominiq@lps.ens.fr>\n-\n-\tPR fortran/79602\n-\t* decl.c: Replace '%s' with %qs.\n-\t* expr.c: Likewise.\n-\t* interface.c: Likewise.\n-\t* match.c: Likewise.\n-\t* primary.c: Likewise.\n-\t* resolve.c: Likewise.\n-\n-\tPR fortran/79844\n-\tPR fortran/80011\n-\t* io.c: Remove trailing spaces.\n-\t* match.c: Likewise.\n-\t* openmp.c: Likewise.\n-\t* resolve.c: Likewise.\n-\t* trans-intrinsic.c: Likewise.\n-\n-\tPR fortran/79853\n-\t* expr.c: Remove a double spaces.\n-\n-\tPR fortran/79859\n-\t* primary.c: Remove spurious quotes around %qs.\n-\n-2017-03-22  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/80142\n-\t* frontend-passes.c (combine_array_constructor): Take\n-\tlocation of new expression from constructor expression instead\n-\tof constructor.\n-\n-2017-03-20  Nicolas Koenig  <koenigni@student.ethz.ch>\n-\n-\tPR fortran/39239\n-\t* symbol.c (check_conflict): Report an error if an EQUIVALENCE\n-\tobject is BIND(C)\n-\n-2017-03-18  Nicolas Koenig  <koenigni@student.ethz.ch>\n-\n-\tPR fortran/69498\n-\t* decl.c (add_hidden_procptr_result): Fixed Refs count of the\n-\tcreated \"ppr@\" symbol.\n-\n-2017-03-18  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/79676\n-\t* module.c (mio_symbol_attribute): Remove reset of the flag\n-\t'no_module_procedures'.\n-\t(check_for_module_procedures): New function. Move declaration\n-\tof 'no_module_procedures' to above it.\n-\t(gfc_dump_module): Traverse namespace calling new function.\n-\n-2017-03-18  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/71838\n-\t* symbol.c (check_conflict): A dummy procedure in a submodule,\n-\tmodule procedure is not an error.\n-\t(gfc_add_flavor): Ditto.\n-\n-2017-03-17  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n-\n-\tPR fortran/79841\n-\t* openmp.c (check_symbol_not_pointer): Adjust diagnostics.\n-\n-2017-03-16  Jakub Jelinek  <jakub@redhat.com>\n-\n-\tPR fortran/80010\n-\t* parse.c (gfc_ascii_statement): Use !$ACC for ST_OACC_ATOMIC\n-\tand ST_OACC_END_ATOMIC, instead of !ACC.\n-\t* trans-decl.c (finish_oacc_declare): Use !$ACC instead of $!ACC.\n-\t* openmp.c (gfc_match_oacc_declare, gfc_match_oacc_wait,\n-\tgfc_resolve_oacc_declare): Likewise.\n-\n-\tPR fortran/79886\n-\t* error.c (gfc_format_decoder): Rename plus argument to set_locus,\n-\tremove ATTRIBUTE_UNUSED from all arguments, call default_tree_printer\n-\tif not a Fortran specific spec.\n-\t* trans-io.c: Include options.h.\n-\t(gfc_build_st_parameter): Temporarily disable -Wpadded around layout\n-\tof artificial IO data structures.\n-\n-2017-03-15  David Malcolm  <dmalcolm@redhat.com>\n-\n-\tPR fortran/79860\n-\t* resolve.c (resolve_contained_fntype): Make error messages more\n-\tamenable to translation.\n-\n-2017-03-06  Richard Biener  <rguenther@suse.de>\n-\n-\tPR fortran/79894\n-\t* trans.c (gfc_add_modify_loc): Weaken assert.\n-\n-2017-03-05  Andre Vehreschild  <vehre@gcc.gnu.org>,\n-\t    Alessandro Fanfarillo  <fanfarillo.gcc@gmail.com>\n-\n-\t* check.c (positive_check): Add new function checking constant for\n-\tbeing greater then zero.\n-\t(gfc_check_image_status): Add checking of image_status arguments.\n-\t(gfc_check_failed_or_stopped_images): Same but for failed_- and\n-\tstopped_images function.\n-\t* dump-parse-tree.c (show_code_node): Added output of FAIL IMAGE.\n-\t* gfortran.h (enum gfc_statement): Added FAIL_IMAGE_ST.\n-\t(enum gfc_isym_id): Added new intrinsic symbols.\n-\t(enum gfc_exec_op): Added EXEC_FAIL_IMAGE.\n-\t* gfortran.texi: Added description for the new API functions. Updated\n-\tcoverage of gfortran of TS18508.\n-\t* intrinsic.c (add_functions): Added symbols to resolve new intrinsic\n-\tfunctions.\n-\t* intrinsic.h: Added prototypes.\n-\t* iresolve.c (gfc_resolve_failed_images): Resolve the failed_images\n-\tintrinsic.\n-\t(gfc_resolve_image_status): Same for image_status.\n-\t(gfc_resolve_stopped_images): Same for stopped_images.\n-\t* libgfortran.h: Added prototypes.\n-\t* match.c (gfc_match_if): Added matching of FAIL IMAGE statement.\n-\t(gfc_match_fail_image): Match a FAIL IMAGE statement.\n-\t* match.h: Added prototype.\n-\t* parse.c (decode_statement): Added matching for FAIL IMAGE.\n-\t(next_statement): Same.\n-\t(gfc_ascii_statement): Same.\n-\t* resolve.c: Same.\n-\t* simplify.c (gfc_simplify_failed_or_stopped_images): For COARRAY=\n-\tsingle a constant result can be returne.d\n-\t(gfc_simplify_image_status): For COARRAY=single the result is constant.\n-\t* st.c (gfc_free_statement): Added FAIL_IMAGE handling.\n-\t* trans-decl.c (gfc_build_builtin_function_decls): Added decls of the\n-\tnew intrinsics.\n-\t* trans-expr.c (gfc_conv_procedure_call): This is first time all\n-\targuments of a function are optional, which is now handled here\n-\tcorrectly.\n-\t* trans-intrinsic.c (conv_intrinsic_image_status): Translate\n-\timage_status.\n-\t(gfc_conv_intrinsic_function): Add support for image_status.\n-\t(gfc_is_intrinsic_libcall): Add support for the remaining new\n-\tintrinsics.\n-\t* trans-stmt.c (gfc_trans_fail_image): Trans a fail image.\n-\t* trans-stmt.h: Add the prototype for the above.\n-\t* trans.c (trans_code): Dispatch for fail_image.\n-\t* trans.h: Add the trees for the new intrinsics.\n-\n-2017-03-03  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n-\n-\tPR fortran/79841\n-\t* openmp.c (check_symbol_not_pointer): Adjust diagnostic.\n-\n-2017-02-28  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/79739\n-\t* resolve.c (resolve_fl_procedure): Deal with the case where\n-\t'submodule_name' is NULL so that gfc_error does not ICE.\n-\tReformat the error message to make it more consistent.\n-\n-2017-02-28  Jakub Jelinek  <jakub@redhat.com>\n-\n-\t* parse.c (parse_critical_block): Use cond ? G_(\"...\") : G_(\"...\")\n-\tinstead of just cond ? \"...\" : \"...\".\n-\t* scanner.c (gfc_next_char_literal): Likewise.\n-\t* match.c (match_exit_cycle): Likewise.\n-\n-2017-02-26  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/51119\n-\t* options.c (gfc_post_options): Set default limit for matmul\n-\tinlining to 30.\n-\t* invoke.texi: Document change.\n-\n-2017-02-25  Dominique d'Humieres  <dominiq@lps.ens.fr>\n-\n-\tPR fortran/79601\n-\t* interface.c (check_dtio_arg_TKR_intent): Change 'intent'\n-\tto 'INTENT'.\n-\n-2017-02-25  Dominique d'Humieres  <dominiq@lps.ens.fr>\n-\n-\tPR fortran/79597\n-\t* interface.c (gfc_match_end_interface): Remove spurious comma\n-\tand space, replace 'got %s' with 'got %qs'.\n-\n-2017-02-20  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/79599\n-\t* interface.c (check_dtio_arg_TKR_intent): Supply 'must'\n-\tmissing from error message.\n-\n-2017-02-20  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/79523\n-\t* interface.c (gfc_find_typebound_dtio_proc): Guard test for\n-\tflavor attribute by checking that symbol is resolved.\n-\n-2017-02-16  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/79382\n-\t* decl.c (access_attr_decl): Test for presence of generic DTIO\n-\tinterface and emit error if not present.\n-\n-2017-02-20  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/79434\n-\t* parse.c (check_component, parse_union): Whitespace.\n-\t(set_syms_host_assoc): For a derived type, check if the module\n-\tin which it was declared is one of the submodule ancestors. If\n-\tit is, make the components public. Otherwise, reset attribute\n-\t'host_assoc' and set 'use-assoc' so that encapsulation is\n-\tpreserved.\n-\n-2017-02-19  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/79447\n-\t* decl.c (gfc_set_constant_character_len): Whitespace.\n-\t(gfc_match_end): Catch case where a procedure is contained in\n-\ta module procedure and ensure that 'end procedure' is the\n-\tcorrect termination.\n-\n-2017-02-19  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/79402\n-\t* resolve.c (fixup_unique_dummy): New function.\n-\t(gfc_resolve_expr): Call it for dummy variables with a unique\n-\tsymtree name.\n-\n-2017-02-19  Andre Vehreschild  <vehre@gcc.gnu.org>\n-\n-\tPR fortran/79229\n-\t* trans-expr.c (gfc_trans_assignment_1): Deref indirect refs when\n-\tcompiling with -fcheck=mem to check the pointer and not the data.\n-\n-2017-02-19  Andre Vehreschild  <vehre@gcc.gnu.org>\n-\n-\tPR fortran/79335\n-\t* trans-array.c (duplicate_allocatable_coarray): Ensure attributes\n-\tpassed are properly initialized.\n-\t(structure_alloc_comps): Same.\n-\t* trans-expr.c (gfc_trans_structure_assign): Same.\n-\n-2017-02-13  Jakub Jelinek  <jakub@redhat.com>\n-\n-\t* trans-expr.c (gfc_conv_substring): Add missing space in diagnostics.\n-\n-2017-02-12  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/65542\n-\t* intrinsic.c (gfc_intrinsic_func_interface):  Return an error\n-\tfor -std=f95 for disallowed transformational functions in\n-\tinitialization expressions.\n-\n-2017-02-09  Cesar Philippidis  <cesar@codesourcery.com>\n-\t    Joseph Myers  <joseph@codesourcery.com>\n-\n-\t* openmp.c (resolve_omp_clauses): Error on directives\n-\tcontaining both tile and collapse clauses.\n-\t(resolve_oacc_loop_blocks): Represent '*' tile arguments as zero.\n-\t* trans-openmp.c (gfc_trans_omp_do): Lower tiled loops like\n-\tcollapsed loops.\n-\n-2017-02-07  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\t* trans-types.c\t(gfc_get_int_kind_from_width_isofortranen):  Choose\n-\tREAL type with the widest precision if two (or more) have the same\n-\tstorage size.\n-\n-2017-02-05  Andre Vehreschild  <vehre@gcc.gnu.org>\n-\n-\tPR fortran/79344\n-\t* trans-stmt.c (gfc_trans_allocate): Only deallocate the components of\n-\tthe temporary, when a new object was created for the temporary.  Not\n-\twhen it is just an alias to an existing object.\n-\n-2017-02-05  Andre Vehreschild  <vehre@gcc.gnu.org>\n-\n-\tPR fortran/79335\n-\t* trans-decl.c (generate_coarray_sym_init): Retrieve the symbol's\n-\tattributes before using them.\n-\n-2017-02-05  Andre Vehreschild  <vehre@gcc.gnu.org>\n-\n-\tPR fortran/78958\n-\t* trans-stmt.c (gfc_trans_allocate): Add the multiplying the _len\n-\tcomponent of unlimited polymorphic objects when source-allocating.\n-\n-2017-02-05  Andre Vehreschild  <vehre@gcc.gnu.org>\n-\n-\tPR fortran/79230\n-\t* trans-array.c (structure_alloc_comps): Ignore pointer components when\n-\tfreeing structures.\n-\n-2017-01-25  Maxim Ostapenko  <m.ostapenko@samsung.com>\n-\n-\tPR lto/79061\n-\t* f95-lang.c (gfc_create_decls): Include stringpool.h.\n-\tPass main_input_filename to build_translation_unit_decl.\n-\n-2017-01-23  Thomas Koenig  <tkoenig@netcologne.de>\n-\n-\t* arith.c (arith_power):  If simplifying integer power expression\n-\tto zero, warn if -Winteger-division is given.\n-\n-2017-01-22  Jakub Jelinek  <jakub@redhat.com>\n-\n-\tPR fortran/79154\n-\t* parse.c (matchs, matcho, matchds, matchdo): Replace return st;\n-\twith { ret = st; goto finish; }.\n-\t(decode_omp_directive): Allow declare simd, declare target and\n-\tsimd directives in PURE/ELEMENTAL procedures.  Only call\n-\tgfc_unset_implicit_pure on successful match of other procedures.\n-\n-2017-01-21  Gerald Pfeifer  <gerald@pfeifer.com>\n-\n-\t* gfc-internals.texi (Symbol Versioning): Change references\n-\tto www.akkadia.org to https.\n-\n-2017-01-21  Jakub Jelinek  <jakub@redhat.com>\n-\n-\t* gfortran.h (gfc_extract_int): Change return type to bool.  Add\n-\tint argument with = 0.\n-\t* decl.c (gfc_match_kind_spec): Adjust gfc_extract_int caller, pass\n-\t1 as new last argument to it, don't emit gfc_error.\n-\t(match_char_kind): Likewise.\n-\t(gfc_match_decl_type_spec): Use gfc_get_string (\"%s\", x) instead of\n-\tgfc_get_string (x).\n-\t(gfc_match_derived_decl, match_binding_attributes): Likewise.\n-\t(gfc_match_structure_decl): Don't sprintf back to name, call\n-\tget_struct_decl directly with gfc_dt_upper_string (name) result.\n-\t* trans-stmt.c (gfc_trans_allocate): Use gfc_get_string (\"%s\", x)\n-\tinstead of gfc_get_string (x).\n-\t* module.c (gfc_dt_lower_string, gfc_dt_upper_string,\n-\tgfc_match_use, gfc_match_submodule, find_true_name, mio_pool_string,\n-\tmio_symtree_ref, mio_expr, mio_omp_udr_expr, load_generic_interfaces,\n-\tload_omp_udrs, load_needed, read_module, dump_module,\n-\tcreate_intrinsic_function, import_iso_c_binding_module,\n-\tcreate_int_parameter, create_int_parameter_array, create_derived_type,\n-\tuse_iso_fortran_env_module): Likewise.\n-\t* error.c (gfc_diagnostic_starter, gfc_diagnostic_start_span): Use\n-\tpp_verbatim (context->printer, \"%s\", x) instead of\n-\tpp_verbatim (context->printer, x).\n-\t* match.c (gfc_match_small_int): Adjust gfc_extract_int caller, pass\n-\t1 as new last argument to it, don't emit gfc_error.\n-\t(gfc_match_small_int_expr): Likewise.\n-\t* iresolve.c (gfc_get_string): Optimize format \"%s\" case.\n-\t(resolve_bound): Use gfc_get_string (\"%s\", x) instead of\n-\tgfc_get_string (x).\n-\t(resolve_transformational): Formatting fix.\n-\t(gfc_resolve_char_achar): Change name argument to bool is_achar,\n-\tuse a single format string and if is_achar add \"a\" before \"char\".\n-\t(gfc_resolve_achar, gfc_resolve_char): Adjust callers.\n-\t* expr.c (gfc_extract_int): Change return type to bool, return true\n-\tif some error occurred.  Add REPORT_ERROR argument, if non-zero\n-\tcall either gfc_error or gfc_error_now depending on its sign.\n-\t* arith.c (arith_power): Adjust gfc_extract_int caller.\n-\t* symbol.c (gfc_add_component): Use gfc_get_string (\"%s\", x) instead\n-\tof gfc_get_string (x).\n-\t(gfc_new_symtree, gfc_delete_symtree, gfc_get_uop, gfc_new_symbol,\n-\tgfc_get_gsymbol, generate_isocbinding_symbol): Likewise.\n-\t* openmp.c (gfc_match_omp_clauses): Adjust gfc_extract_int caller, pass\n-\t-1 as new last argument to it, don't emit gfc_error_now.\n-\t(gfc_match_omp_declare_reduction): Use gfc_get_string (\"%s\", x)\n-\tinstead of gfc_get_string (x).\n-\t* check.c (kind_check): Adjust gfc_extract_int caller.\n-\t* intrinsic.c (add_sym, find_sym, make_alias): Use\n-\tgfc_get_string (\"%s\", x) instead of gfc_get_string (x).\n-\t* simplify.c (get_kind, gfc_simplify_btest, gfc_simplify_maskr,\n-\tgfc_simplify_maskl, gfc_simplify_poppar, gfc_simplify_repeat,\n-\tgfc_simplify_selected_int_kind, gfc_simplify_selected_real_kind):\n-\tAdjust gfc_extract_int callers.\n-\t* trans-decl.c (gfc_find_module): Use gfc_get_string (\"%s\", x)\n-\tinstead of gfc_get_string (x).\n-\t* matchexp.c (expression_syntax): Add const.\n-\t* primary.c (match_kind_param, match_hollerith_constant,\n-\tmatch_string_constant): Adjust gfc_extract_int callers.\n-\t(match_keyword_arg): Use gfc_get_string (\"%s\", x) instead of\n-\tgfc_get_string (x).\n-\t* frontend-passes.c (optimize_minmaxloc): Likewise.\n-\n-2017-01-19  Andre Vehreschild  <vehre@gcc.gnu.org>\n-\n-\tPR fortran/70696\n-\t* trans-decl.c (gfc_build_qualified_array): Add static decl to parent\n-\tfunction only, when the decl-context is not the translation unit.\n-\n-2017-01-18  Louis Krupp  <louis.krupp@zoho.com>\n-\n-\tPR fortran/50069\n-\tPR fortran/55086\n-\t* trans-expr.c (gfc_conv_variable): Don't treat temporary variables\n-\tas function arguments.\n-\t* trans-stmt.c (forall_make_variable_temp,\n-\tgenerate_loop_for_temp_to_lhs, gfc_trans_assign_need_temp,\n-\tgfc_trans_forall_1): Don't adjust offset of forall temporary\n-\tfor array sections, make forall temporaries work for substring\n-\texpressions, improve test coverage by adding -ftest-forall-temp\n-\toption to request usage of temporary array in forall code.\n-\t* lang.opt: Add -ftest-forall-temp option.\n-\t* invoke.texi: Add -ftest-forall-temp option.\n-\n-2017-01-18  Andre Vehreschild  <vehre@gcc.gnu.org>\n-\n-\t* primary.c (caf_variable_attr): Improve figuring whether the current\n-\tcomponent is the last one refed.\n-\t* trans-stmt.c (gfc_trans_allocate): Do not generate sync_all calls\n-\twhen allocating pointer or allocatable components.\n-\n-2017-01-18  Andre Vehreschild  <vehre@gcc.gnu.org>\n-\n-\t* gfortran.texi: Add missing parameters to caf-API functions.  Correct\n-\ttypos and clarify some descriptions.\n-\n-2017-01-18  Andre Vehreschild  <vehre@gcc.gnu.org>\n-\n-\tPR fortran/70696\n-\tMissed some cases, here they are:\n-\t* trans-decl.c (gfc_build_qualified_array): Add static tokens to the\n-\tparent function's scope.\n-\t* trans-expr.c (gfc_get_tree_for_caf_expr): Shorten code.  Remove\n-\tunnecessary assert.\n-\n-2017-01-13  Andre Vehreschild  <vehre@gcc.gnu.org>\n-\n-\tPR fortran/70697\n-\t* resolve.c (resolve_lock_unlock_event): Resolve the expression for\n-\tevent's until_count.\n-\n-2017-01-13  Andre Vehreschild  <vehre@gcc.gnu.org>\n-\n-\tPR fortran/70696\n-\t* trans-expr.c (gfc_get_tree_for_caf_expr): Ensure the backend_decl\n-\tis valid before accessing it.\n-\n-2017-01-09  Jakub Jelinek  <jakub@redhat.com>\n-\n-\tPR translation/79019\n-\tPR translation/79020\n-\t* decl.c (attr_decl1): Fix spelling in translatable string.\n-\t* intrinsic.texi: Fix spelling - invokation -> invocation.\n-\t* lang.opt (faggressive-function-elimination, gfc_convert): Fix\n-\ttypos in descriptions.\n-\t* openmp.c (resolve_omp_clauses): Add missing whitespace to\n-\ttranslatable strings.\n-\n-2017-01-08  Martin Sebor  <msebor@redhat.com>\n-\n-\tPR tree-optimization/78913\n-\tPR middle-end/77708\n-\t* trans-common.c (build_equiv_decl): Increase buffer size to avoid\n-\ttruncation for any argument.\n-\t* trans-types.c (gfc_build_logical_type): Same.\n-\n-2017-01-07  Andre Vehreschild  <vehre@gcc.gnu.org>\n-\n-\tPR fortran/78781\n-\tPR fortran/78935\n-\t* expr.c (gfc_check_pointer_assign): Return the same error message for\n-\trewritten coarray pointer assignments like for plain ones.\n-\t* gfortran.h: Change prototype.\n-\t* primary.c (caf_variable_attr): Set attributes used ones only only\n-\tones.  Add setting of pointer_comp attribute.\n-\t(gfc_caf_attr): Add setting of pointer_comp attribute.\n-\t* trans-array.c (gfc_array_allocate): Add flag that the component to\n-\tallocate is not an ultimate coarray component.  Add allocation of\n-\tpointer arrays.\n-\t(structure_alloc_comps): Extend nullify to treat pointer components in\n-\tcoarrays correctly.  Restructure nullify to remove redundant code.\n-\t(gfc_nullify_alloc_comp): Allow setting caf_mode flags.\n-\t* trans-array.h: Change prototype of gfc_nullify_alloc_comp ().\n-\t* trans-decl.c (generate_coarray_sym_init): Call nullify_alloc_comp for\n-\tderived type coarrays with pointer components.\n-\t* trans-expr.c (gfc_trans_structure_assign): Also treat pointer\n-\tcomponents.\n-\t(trans_caf_token_assign): Handle assignment of token of scalar pointer\n-\tcomponents.\n-\t(gfc_trans_pointer_assignment): Call above routine.\n-\t* trans-intrinsic.c (conv_expr_ref_to_caf_ref): Add treating pointer\n-\tcomponents.\n-\t(gfc_conv_intrinsic_caf_get): Likewise.\n-\t(conv_caf_send): Likewise.\n-\t* trans-stmt.c (gfc_trans_allocate): After allocating a derived type in\n-\ta coarray pre-register the tokens.\n-\t(gfc_trans_deallocate): Simply determining the coarray type (scalar or\n-\tarray) and deregistering it correctly.\n-\t* trans-types.c (gfc_typenode_for_spec): Replace in_coarray flag by the\n-\tactual codim to allow lookup of array types in the cache.\n-\t(gfc_build_array_type): Likewise.\n-\t(gfc_get_array_descriptor_base): Likewise.\n-\t(gfc_get_array_type_bounds): Likewise.\n-\t(gfc_get_derived_type): Likewise.\n-\t* trans-types.h: Likewise.\n-\t* trans.c (gfc_deallocate_with_status): Enable deregistering of all kind\n-\tof coarray components.\n-\t(gfc_deallocate_scalar_with_status): Use free() in fcoarray_single mode\n-\tinstead of caf_deregister.\n-\n-2017-01-06  Jakub Jelinek  <jakub@redhat.com>\n-\n-\t* simplify.c (simplify_transformation_to_array): Use\n-\tGCC_DIAGNOSTIC_PUSH_IGNORED and GCC_DIAGNOSTIC_POP instead of\n-\t#pragma GCC diagnostic {push,ignored,pop}.\n-\n-2017-01-06  Alexandre Oliva <aoliva@redhat.com>\n-\n-\t* simplify.c (simplify_transformation_to_array): Silence\n-\tarray bounds warning.  Fix whitespace.\n-\n-2017-01-04  Alexandre Oliva <aoliva@redhat.com>\n-\n-\t* module.c (load_omp_udrs): Initialize name.\n-\n-2017-01-02  Janne Blomqvist  <jb@gcc.gnu.org>\n-\n-\tPR fortran/78534\n-\t* trans-expr.c (gfc_trans_string_copy): Rework string copy\n-\talgorithm to avoid -Wstringop-overflow warning.\n-\n-2017-01-01  Jakub Jelinek  <jakub@redhat.com>\n-\n-\tUpdate copyright years.\n-\n-\t* gfortranspec.c (lang_specific_driver): Update copyright notice\n-\tdates.\n-\t* gfc-internals.texi: Bump @copying's copyright year.\n-\t* gfortran.texi: Ditto.\n-\t* intrinsic.texi: Ditto.\n-\t* invoke.texi: Ditto.\n \f\n-Copyright (C) 2017 Free Software Foundation, Inc.\n+Copyright (C) 2018 Free Software Foundation, Inc.\n \n Copying and distribution of this file, with or without modification,\n are permitted in any medium without royalty provided the copyright"}, {"sha": "678ffc684694560ce485e43f9954ea5b3a6a120a", "filename": "gcc/fortran/ChangeLog-2017", "status": "added", "additions": 2295, "deletions": 0, "changes": 2295, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e6aea386e244e87fd9a745887cd9c59431e33f/gcc%2Ffortran%2FChangeLog-2017", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e6aea386e244e87fd9a745887cd9c59431e33f/gcc%2Ffortran%2FChangeLog-2017", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog-2017?ref=65e6aea386e244e87fd9a745887cd9c59431e33f", "patch": "@@ -0,0 +1,2295 @@\n+2017-12-28  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR Fortran/83548\n+\t* match.c (gfc_match_type_spec): Check for LOGICAL conflict in\n+\ttype-spec versus LOGICAL intrinsic subprogram.\n+\n+2017-12-28  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\tPR fortran/83344\n+\t* resolve.c (resolve_assoc_var): Don't set the constant value\n+\tunless the target is a constant expression.\n+\n+2017-12-28  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/83567\n+\t* trans-expr.c (gfc_trans_assignment_1): Free parameterized\n+\tcomponents of the lhs if dealloc is set.\n+\t*trans-decl.c (gfc_trans_deferred_vars): Do not free the\n+\tparameterized components of function results on leaving scope.\n+\n+2017_12_27  Louis Krupp  <louis.krupp@zoho.com>\n+\n+\tPR fortran/83092\n+\t* expr.c (gfc_apply_init): Check that typespec has character type\n+\tbefore using character length field.\n+\n+2017-12-26  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/83540\n+\t* frontend-passes.c (create_var): If an array to be created\n+\thas unknown size and -fno-realloc-lhs is in effect,\n+\treturn NULL.\n+\n+2017-12-22  Bernhard Reutner-Fischer  <aldot@gcc.gnu.org>\n+            Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* array.c (gfc_copy_iterator): Copy unroll field.\n+\t* decl.c (directive_unroll): New global variable.\n+\t(gfc_match_gcc_unroll): New function.\n+\t* gfortran.h (gfc_iterator]): Add unroll field.\n+\t(directive_unroll): Declare:\n+\t* match.c (gfc_match_do): Use memset to initialize the iterator.\n+\t* match.h (gfc_match_gcc_unroll): New prototype.\n+\t* parse.c (decode_gcc_attribute): Match \"unroll\".\n+\t(parse_do_block): Set iterator's unroll.\n+\t(parse_executable): Diagnose misplaced unroll directive.\n+\t* trans-stmt.c (gfc_trans_simple_do) Annotate loop condition with\n+\tannot_expr_unroll_kind.\n+\t(gfc_trans_do): Likewise.\n+\t* gfortran.texi (GNU Fortran Compiler Directives): Split section into\n+\tsubections 'ATTRIBUTES directive' and 'UNROLL directive'.\n+\n+2017-12-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* scanner.c (preprocessor_line): Replace Yoda conditions with typical\n+\torder conditions.\n+\t* dependency.c (check_section_vs_section): Likewise.\n+\t* trans-array.c (gfc_conv_expr_descriptor): Likewise.\n+\n+2017-12-17  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\t* decl.c (gfc_match_implicit_none): Use GFC_STD_F2018 instead of\n+\tGFC_STD_F2015.\n+\t* error.c (gfc_notify_std): Add GFC_STD_F2018{_DEL,_OBS} to\n+\tswitch.\n+\t* gfortran.texi: Document -std=f2018.\n+\t* interface.c (compare_parameter): Fix comment.\n+\t* invoke.texi: Document -std=f2018.\n+\t* lang.opt: Add -std=f2018 argumnet.\n+\t* libgfortran.h (GFC_STD_F2015): Rename to GFC_STD_F0218, use\n+\tseparate flag bit.\n+\t(GFC_STD_F2018_DEL): New macro.\n+\t(GFC_STD_F2018_OBS): Likewise.\n+\t* match.c (gfc_match_stopcode): Use GFC_STD_F2018.\n+\t* options.c (set_default_std_flags): Add F2018 flags to defaults.\n+\t(gfc_handle_option): Set options for -std=f2018.\n+\n+2017-12-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* f95-lang.c (gfc_attribute_table): Swap affects_type_identity\n+\tand handler fields, adjust comments.\n+\n+2017-12-14  Qing Zhao  <qing.zhao@oracle.com>\n+\n+\tPR middle_end/79538\n+\t* class.c (gfc_build_class_symbol): Replace call to\n+\tsprintf with xasprintf to avoid format-overflow warning.\n+\t(generate_finalization_wrapper): Likewise.\n+\t(gfc_find_derived_vtab): Likewise.\n+\t(find_intrinsic_vtab): Likewise.\n+\n+2017-12-12  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\t* intrinsic.texi (MAXLOC): Remove double description\n+\tof return value.\n+\t(MINLOC): Likewise.\n+\n+2017-12-11  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\t* intrinsic.texi (MAXLOC): Update documentation for\n+\tcharacter arrays and KIND argument.\n+\t(MINLOC): Likewise.\n+\n+2017-12-11  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/45689\n+\t* simplify.c (min_max_choose): Add prototype.\n+\t(gfc_count): Format correctly.\n+\t(simplify_transformation): Pass array argument to init_result_expr.\n+\t(gfc_simplify_minval_maxval): Remove.\n+\t(gfc_min): New function.\n+\t(gfc_simplify_minval): Call simplify_transformation.\n+\t(gfc_max): New function.\n+\t(gfc_simplify_maxval): Call simplify_transformation.\n+\n+2017-12-10  Dominique d'Humieres  <dominiq@lps.ens.fr>\n+\n+\tPR fortran/53478\n+\t* gfortran.h (gfc_find_case_gsymbol): New prototype.\n+\t* symbol.c (gfc_find_case_gsymbol): New procedure, case\n+\tinsensistive version of gfc_find_gsymbol.\n+\t* resolve.c (resolve_common_blocks): Use it.\n+\tReplace %s with %qs where needed.\n+\n+2017-12-09  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/82934\n+\tPR fortran/83318\n+\t* match.c (gfc_match_allocate): Enforce F2008:C631.\n+\n+2017-12-09  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/83316\n+\t* arith.c (gfc_character2character): New function.\n+\t* arith.h: Add prototype.\n+\t* simplify.c (gfc_convert_constant): Handle character type.\n+\n+2017-12-07  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/81544\n+\t* f95-lang.c (gfc_attribute_table): Initialize new member of struct\n+\tattribute_spec.\n+\n+2017-12-03  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/36313\n+\t* check.c (gfc_check_minval_maxval): Use\n+\tint_orLreal_or_char_check_f2003 for array argument.\n+\t* iresolve.c (gfc_resolve_maxval): Insert number in\n+\tfunction name for character arguments.\n+\t(gfc_resolve_minval): Likewise.\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_minmaxloc):\n+\tFix comment.\n+\t(gfc_conv_intrinsic_minmaxval): Resort arguments and call library\n+\tfunction if dealing with a character function.\n+\n+2017-12-01  Qing Zhao  <qing.zhao@oracle.com>\n+\n+\t* decl.c (gfc_get_pdt_instance): Adjust the call to sprintf\n+\tto avoid the same buffer being both source and destination.\n+\n+2017-12-01  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/83224\n+\t* frontend-passes.c (create_var): Also handle\n+\tcharacter arrays, handling deferred lenghts.\n+\n+2017-12-01  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/82605\n+\t* resolve.c (get_pdt_constructor): Initialize 'cons' to NULL.\n+\t(resolve_pdt): Correct typo in prior comment. Emit an error if\n+\tany parameters are deferred and the object is neither pointer\n+\tnor allocatable.\n+\n+\tPR fortran/82606\n+\t* decl.c (gfc_get_pdt_instance): Continue if the parameter sym\n+\tis not present or has no name. Select the parameter by name\n+\tof component, rather than component order. Remove all the other\n+\tmanipulations of 'tail' when building the pdt instance.\n+\t(gfc_match_formal_arglist): Emit and error if a star is picked\n+\tup in a PDT decl parameter list.\n+\n+\tPR fortran/82622\n+\t* trans-array.c (set_loop_bounds): If a GFC_SS_COMPONENT has an\n+\tinfo->end, use it rather than falling through to\n+\tgcc_unreachable.\n+\t(structure_alloc_comps): Check that param->name is non-null\n+\tbefore comparing with the component name.\n+\t* trans-decl.c (gfc_get_symbol_decl): Do not use the static\n+\tinitializer for PDT symbols.\n+\t(gfc_init_default_dt): Do nothing for PDT symbols.\n+\t* trans-io.c (transfer_array_component): Parameterized array\n+\tcomponents use the descriptor ubound since the shape is not\n+\tavailable.\n+\n+\tPR fortran/82719\n+\tPR fortran/82720\n+\t* trans-expr.c (gfc_conv_component_ref): Do not use the charlen\n+\tbackend_decl of pdt strings. Use the hidden component instead.\n+\t* trans-io.c (transfer_expr): Do not do IO on \"hidden\" string\n+\tlengths. Use the hidden string length for pdt string transfers\n+\tby adding it to the se structure. When finished nullify the\n+\tse string length.\n+\n+\tPR fortran/82866\n+\t* decl.c (gfc_match_formal_arglist): If a name is not found or\n+\tstar is found, while reading a type parameter list, emit an\n+\timmediate error.\n+\t(gfc_match_derived_decl): On reading a PDT parameter list, on\n+\tfailure to match call gfc_error_recovery.\n+\n+\tPR fortran/82978\n+\t* decl.c (build_struct): Character kind defaults to 1, so use\n+\tkind_expr whatever is the set value.\n+\t(gfc_get_pdt_instance): Ditto.\n+\t* trans-array.c (structure_alloc_comps): Copy the expression\n+\tfor the PDT string length before parameter substitution. Use\n+\tthis expression for evaluation and free it after use.\n+\n+2017-12-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/79153\n+\t* match.c (gfc_match): Add FALLTHRU comment to avoid\n+\t-Wimplicit-fallthrough warning.\n+\n+2017-12-01  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/83224\n+\t* frontend-passes.c (realloc_string_callback): Handle\n+\tcase for which the RHS is an array expression.\n+\n+2017-11-28  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\tPR fortran/53796\n+\t* gfortran.texi: Remove mentions of GFORTRAN_DEFAULT_RECL.\n+\n+2017-11-28  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/83021\n+\t* resolve.c (resolve_component): Only escape for use assciated\n+\tvtypes if the current namespace has no proc_name and is most\n+\tparticularly block data.\n+\n+2017-11-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* trans-decl.c (gfc_trans_entry_master_switch): Build SWITCH_EXPR\n+\tusing fold_build2_loc instead of fold_build3_loc.\n+\t* trans-io.c (io_result): Likewise.\n+\t* trans-stmt.c (gfc_trans_integer_select, gfc_trans_character_select):\n+\tLikewise.\n+\n+2017-11-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR fortran/81304\n+\t* trans-openmp.c (gfc_trans_omp_array_reduction_or_udr): Set\n+\tattr.implicit_type in intrinsic_sym to avoid undesirable warning.\n+\n+2017-11-23  Dirk Broemmel  <d.broemmel@fz-juelich.de>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR fortran/81841\n+\t* parse.c (parse_spec): Allow ST_OMP_THREADPRIVATE inside of\n+\tBLOCK DATA.\n+\n+2017-11-23  Mike Stump  <mikestump@comcast.net>\n+\t    Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* trans-stmt.c (gfc_trans_forall_loop): Pass 3rd operand to\n+\tANNOTATE_EXPR.\n+\n+2017-11-23  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/82814\n+\t* trans-types.c (gfc_sym_type): If a character function result\n+\tis missing the charlen backend_decl, use the one from the name-\n+\tspace procedure symbol, if present.\n+\n+2017-11-22  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c++/62170\n+\t* error.c (gfc_notify_std): Convert \"quoted\" param from bool to\n+\tbool *.\n+\n+2017-11-22  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/36313\n+\t* check.c (int_or_real_or_char_check_f2003): New function.\n+\t* iresolve.c (gfc_resolve_maxloc): Add number \"2\" for\n+\tcharacter arguments and rank-zero return value.\n+\t(gfc_resolve_minloc): Likewise.\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_minmaxloc): Handle case of\n+\tcharacter arguments and rank-zero return value by removing\n+\tunneeded arguments and calling the library function.\n+\n+2017-11-22  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/79072\n+\t* trans-stmt.c (trans_associate_var): Weaken the over strong\n+\tcondition for using the fake result decl.\n+\n+2017-11-20  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/79072\n+\t* trans-expr.c (trans_class_vptr_len_assignment): Set from_len\n+\tif the temporary is unlimited polymorphic.\n+\t* trans-stmt.c (trans_associate_var): Use the fake result decl\n+\tto obtain the 'len' field from an explicit function result when\n+\tin that function scope.\n+\n+2017-11-19  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/78990\n+\t* expr.c (gfc_is_class_array_function): Renamed from\n+\t'gfc_is_alloc_class_array_function' and modified to return true\n+\tfor pointers as well as allocatable results.\n+\t* gfortran.h : Change of name for prototype of above function.\n+\t* trans-array.c (gfc_add_loop_ss_code): Force finalization of\n+\tclass array results.\n+\t(build_class_array_ref): Change assertion into a condition.\n+\t(build_class_array_ref): Set the se class_vptr for class array\n+\tfunction results.\n+\t(gfc_walk_function_expr): Reference gfc_is_class_array_function\n+\tas above.\n+\t* trans-decl.c (get_proc_result): Move it up before\n+\tgfc_trans_deferred_vars.\n+\t(gfc_trans_deferred_vars): Nullify explicit return class arrays\n+\ton entry.\n+\t* trans-expr.c (gfc_conv_class_to_class): Allow conversion of\n+\tclass array functions that have an se class_vptr and use it\n+\tfor the result vptr.\n+\t(gfc_conv_subref_array_arg): Rename reference to the above\n+\tfunction.\n+\t(gfc_conv_procedure_call): Ditto. Add the se pre block to the\n+\tloop pre block before the function is evaluated. Do not\n+\tfinalize class pointer results.\n+\t(arrayfunc_assign_needs_temporary, gfc_trans_assignment_1) More\n+\trenamed references.\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_size): Ditto.\n+\n+2017-11-18  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\tPR fortran/83036\n+\t* ioparm.def (IOPARM): Make nextrec a pintio.\n+\n+2017-11-18  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\tPR fortran/44292\n+\t* ioparm.def (IOPARM): Make recl_in intio, and recl_out pintio.\n+\n+2017-11-18  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/83012\n+\t* expr.c (gfc_is_simply_contiguous): If a function call through a\n+\tclass variable is done through a reference, check the function's\n+\tinterface.\n+\n+2017-11-17  Richard Biener  <rguenther@suse.de>\n+\n+\tPR fortran/83017\n+\t* trans-stmt.c (gfc_trans_forall_loop): Annotate DO CONCURRENT\n+\tloops with annot_expr_parallel_kind instead of just\n+\tannot_expr_ivdep_kind.\n+\n+2017-11-15  Martin Liska  <mliska@suse.cz>\n+\n+\t* options.c (gfc_post_options):\n+\tDo not set default value of warn_return_type.\n+\t* trans-decl.c (gfc_trans_deferred_vars):\n+\tCompare warn_return_type for greater than zero.\n+\t(generate_local_decl): Likewise\n+\t(gfc_generate_function_code): Likewise.\n+\n+2017-11-13  Fritz Reese <fritzoreese@gmail.com>\n+\n+\tPR fortran/78240\n+\t* decl.c (match_clist_expr): Replace gcc_assert with proper\n+\thandling of bad result from spec_size().\n+\t* resolve.c (check_data_variable): Avoid NULL dereference when passing\n+\tlocus to gfc_error.\n+\n+2017-11-11  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/82932\n+\t* resolve.c (update_compcall_arglist): Improve error recovery,\n+\tremove a gcc_assert.\n+\n+2017-11-10  Fritz Reese <fritzoreese@gmail.com>\n+\n+\tPR fortran/82886\n+\t* gfortran.h (gfc_build_init_expr): New prototype.\n+\t* invoke.texi (finit-derived): Update documentation.\n+\t* expr.c (gfc_build_init_expr): New, from gfc_build_default_init_expr.\n+\t(gfc_build_default_init_expr): Redirect to gfc_build_init_expr(,,false)\n+\t(component_initializer): Force building initializers using\n+\tgfc_build_init_expr(,,true).\n+\n+2017-11-10  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/81117\n+\t* gcc/fortran/decl.c (build_sym): Use strcpy instead of strncpy.\n+\n+2017-11-10  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/82934\n+\t* trans-stmt.c (gfc_trans_allocate): Remove the gcc_assert on\n+\tnull string length for assumed length typespec and set\n+\texpr3_esize to NULL_TREE;\n+\n+2017-11-09  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/78619\n+\t* check.c (same_type_check): Introduce a new argument 'assoc'\n+\twith default value false. If this is true, use the symbol type\n+\tspec of BT_PROCEDURE expressions.\n+\t(gfc_check_associated): Set 'assoc' true in the call to\n+\t'same_type_check'.\n+\n+2017-11-09  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/78814\n+\t* interface.c (symbol_rank): Check for NULL pointer.\n+\n+2017-11-08  Steven G. Kargl  <kargl@kgcc.gnu.org>\n+\n+\tPR Fortran/82841\n+\t* simplify.c(gfc_simplify_transfer): Do not dereference a NULL pointer.\n+\tUnwrap a short line.\n+\n+2017-11-08  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/82884\n+\t* arith.c (gfc_hollerith2character): Clear pad.\n+\n+2017-11-08  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\tPR 82869\n+\t* convert.c (truthvalue_conversion): Use logical_type_node.\n+\t* trans-array.c (gfc_trans_allocate_array_storage): Likewise.\n+\t(gfc_trans_create_temp_array): Likewise.\n+\t(gfc_trans_array_ctor_element): Likewise.\n+\t(gfc_trans_array_constructor_value): Likewise.\n+\t(trans_array_constructor): Likewise.\n+\t(trans_array_bound_check): Likewise.\n+\t(gfc_conv_array_ref): Likewise.\n+\t(gfc_trans_scalarized_loop_end): Likewise.\n+\t(gfc_conv_array_extent_dim): Likewise.\n+\t(gfc_array_init_size): Likewise.\n+\t(gfc_array_allocate): Likewise.\n+\t(gfc_trans_array_bounds): Likewise.\n+\t(gfc_trans_dummy_array_bias): Likewise.\n+\t(gfc_conv_array_parameter): Likewise.\n+\t(duplicate_allocatable): Likewise.\n+\t(duplicate_allocatable_coarray): Likewise.\n+\t(structure_alloc_comps): Likewise\n+\t(get_std_lbound): Likewise\n+\t(gfc_alloc_allocatable_for_assignment): Likewise\n+\t* trans-decl.c (add_argument_checking): Likewise\n+\t(gfc_generate_function_code): Likewise\n+\t* trans-expr.c (gfc_copy_class_to_class): Likewise\n+\t(gfc_trans_class_array_init_assign): Likewise\n+\t(gfc_trans_class_init_assign): Likewise\n+\t(gfc_conv_expr_present): Likewise\n+\t(gfc_conv_substring): Likewise\n+\t(gfc_conv_cst_int_power): Likewise\n+\t(gfc_conv_expr_op): Likewise\n+\t(gfc_conv_procedure_call): Likewise\n+\t(fill_with_spaces): Likewise\n+\t(gfc_trans_string_copy): Likewise\n+\t(gfc_trans_alloc_subarray_assign): Likewise\n+\t(gfc_trans_pointer_assignment): Likewise\n+\t(gfc_trans_scalar_assign): Likewise\n+\t(fcncall_realloc_result): Likewise\n+\t(alloc_scalar_allocatable_for_assignment): Likewise\n+\t(trans_class_assignment): Likewise\n+\t(gfc_trans_assignment_1): Likewise\n+\t* trans-intrinsic.c (build_fixbound_expr): Likewise\n+\t(gfc_conv_intrinsic_aint): Likewise\n+\t(gfc_trans_same_strlen_check): Likewise\n+\t(conv_caf_send): Likewise\n+\t(trans_this_image): Likewise\n+\t(conv_intrinsic_image_status): Likewise\n+\t(trans_image_index): Likewise\n+\t(gfc_conv_intrinsic_bound): Likewise\n+\t(conv_intrinsic_cobound): Likewise\n+\t(gfc_conv_intrinsic_mod): Likewise\n+\t(gfc_conv_intrinsic_dshift): Likewise\n+\t(gfc_conv_intrinsic_dim): Likewise\n+\t(gfc_conv_intrinsic_sign): Likewise\n+\t(gfc_conv_intrinsic_ctime): Likewise\n+\t(gfc_conv_intrinsic_fdate): Likewise\n+\t(gfc_conv_intrinsic_ttynam): Likewise\n+\t(gfc_conv_intrinsic_minmax): Likewise\n+\t(gfc_conv_intrinsic_minmax_char): Likewise\n+\t(gfc_conv_intrinsic_anyall): Likewise\n+\t(gfc_conv_intrinsic_arith): Likewise\n+\t(gfc_conv_intrinsic_minmaxloc): Likewise\n+\t(gfc_conv_intrinsic_minmaxval): Likewise\n+\t(gfc_conv_intrinsic_btest): Likewise\n+\t(gfc_conv_intrinsic_bitcomp): Likewise\n+\t(gfc_conv_intrinsic_shift): Likewise\n+\t(gfc_conv_intrinsic_ishft): Likewise\n+\t(gfc_conv_intrinsic_ishftc): Likewise\n+\t(gfc_conv_intrinsic_leadz): Likewise\n+\t(gfc_conv_intrinsic_trailz): Likewise\n+\t(gfc_conv_intrinsic_mask): Likewise\n+\t(gfc_conv_intrinsic_spacing): Likewise\n+\t(gfc_conv_intrinsic_rrspacing): Likewise\n+\t(gfc_conv_intrinsic_size): Likewise\n+\t(gfc_conv_intrinsic_sizeof): Likewise\n+\t(gfc_conv_intrinsic_transfer): Likewise\n+\t(gfc_conv_allocated): Likewise\n+\t(gfc_conv_associated): Likewise\n+\t(gfc_conv_same_type_as): Likewise\n+\t(gfc_conv_intrinsic_trim): Likewise\n+\t(gfc_conv_intrinsic_repeat): Likewise\n+\t(conv_isocbinding_function): Likewise\n+\t(conv_intrinsic_ieee_is_normal): Likewise\n+\t(conv_intrinsic_ieee_is_negative): Likewise\n+\t(conv_intrinsic_ieee_copy_sign): Likewise\n+\t(conv_intrinsic_move_alloc): Likewise\n+\t* trans-io.c (set_parameter_value_chk): Likewise\n+\t(set_parameter_value_inquire): Likewise\n+\t(set_string): Likewise\n+\t* trans-openmp.c (gfc_walk_alloc_comps): Likewise\n+\t(gfc_omp_clause_default_ctor): Likewise\n+\t(gfc_omp_clause_copy_ctor): Likewise\n+\t(gfc_omp_clause_assign_op): Likewise\n+\t(gfc_omp_clause_dtor): Likewise\n+\t(gfc_omp_finish_clause): Likewise\n+\t(gfc_trans_omp_clauses): Likewise\n+\t(gfc_trans_omp_do): Likewise\n+\t* trans-stmt.c (gfc_trans_goto): Likewise\n+\t(gfc_trans_sync): Likewise\n+\t(gfc_trans_arithmetic_if): Likewise\n+\t(gfc_trans_simple_do): Likewise\n+\t(gfc_trans_do): Likewise\n+\t(gfc_trans_forall_loop): Likewise\n+\t(gfc_trans_where_2): Likewise\n+\t(gfc_trans_allocate): Likewise\n+\t(gfc_trans_deallocate): Likewise\n+\t* trans-types.c (gfc_init_types): Initialize logical_type_node and\n+\ttheir true/false trees.\n+\t(gfc_get_array_descr_info): Use logical_type_node.\n+\t* trans-types.h (logical_type_node): New tree.\n+\t(logical_true_node): Likewise.\n+\t(logical_false_node): Likewise.\n+\t* trans.c (gfc_trans_runtime_check): Use logical_type_node.\n+\t(gfc_call_malloc): Likewise\n+\t(gfc_allocate_using_malloc): Likewise\n+\t(gfc_allocate_allocatable): Likewise\n+\t(gfc_add_comp_finalizer_call): Likewise\n+\t(gfc_add_finalizer_call): Likewise\n+\t(gfc_deallocate_with_status): Likewise\n+\t(gfc_deallocate_scalar_with_status): Likewise\n+\t(gfc_call_realloc): Likewise\n+\n+2017-11-06  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/69739\n+\t* trans-expr.c (gfc_map_intrinsic_function): Return false for\n+\tbounds without the DIM argument instead of ICEing.\n+\n+2017-11-06  Martin Liska  <mliska@suse.cz>\n+\n+\tPR middle-end/82404\n+\t* options.c (gfc_post_options): Set default value of\n+\t-Wreturn-type to false.\n+\n+2017-11-05  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/82471\n+\t* lang.opt (ffrontend-loop-interchange): New option.\n+\t(Wfrontend-loop-interchange): New option.\n+\t* options.c (gfc_post_options): Handle ffrontend-loop-interchange.\n+\t* frontend-passes.c (gfc_run_passes): Run\n+\toptimize_namespace if flag_frontend_optimize or\n+\tflag_frontend_loop_interchange are set.\n+\t(optimize_namespace): Run functions according to flags set;\n+\talso call index_interchange.\n+\t(ind_type): New function.\n+\t(has_var): New function.\n+\t(index_cost): New function.\n+\t(loop_comp): New function.\n+\n+2017-11-05  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/78641\n+\t* resolve.c (resolve_ordinary_assign): Do not add the _data\n+\tcomponent for class valued array constructors being assigned\n+\tto derived type arrays.\n+\t* trans-array.c (gfc_trans_array_ctor_element): Take the _data\n+\tof class valued elements for assignment to derived type arrays.\n+\n+2017-11-05  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/81447\n+\tPR fortran/82783\n+\t* resolve.c (resolve_component): There is no need to resolve\n+\tthe components of a use associated vtype.\n+\t(resolve_fl_derived): Unconditionally generate a vtable for any\n+\tmodule derived type, as long as the standard is F2003 or later\n+\tand it is not a vtype or a PDT template.\n+\n+2017-11-05  Tom de Vries  <tom@codesourcery.com>\n+\n+\tPR other/82784\n+\t* parse.c (match, matcha, matchs, matcho, matchds, matchdo): Remove\n+\tsemicolon after \"do {} while (0)\".\n+\n+2017-11-04  Andre Vehreschild  <vehre@gcc.gnu.org>\n+\n+\t* trans-expr.c (gfc_trans_assignment_1): Character kind conversion may\n+\tcreate a loop variant temporary, too.\n+\t* trans-intrinsic.c (conv_caf_send): Treat char arrays as arrays and\n+\tnot as scalars.\n+\t* trans.c (get_array_span): Take the character kind into account when\n+\tdoing pointer arithmetic.\n+\n+2017-11-04  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/29600\n+\t* gfortran.h (gfc_check_f): Replace fm3l with fm4l.\n+\t* intrinsic.h (gfc_resolve_maxloc): Add gfc_expr * to argument\n+\tlist in protoytpe.\n+\t(gfc_resolve_minloc): Likewise.\n+\t* check.c (gfc_check_minloc_maxloc): Handle kind argument.\n+\t* intrinsic.c (add_sym_3_ml): Rename to\n+\t(add_sym_4_ml): and handle kind argument.\n+\t(add_function): Replace add_sym_3ml with add_sym_4ml and add\n+\textra arguments for maxloc and minloc.\n+\t(check_specific): Change use of check.f3ml with check.f4ml.\n+\t* iresolve.c (gfc_resolve_maxloc): Handle kind argument. If\n+\tthe kind is smaller than the smallest library version available,\n+\tuse gfc_default_integer_kind and convert afterwards.\n+\t(gfc_resolve_minloc): Likewise.\n+\n+2017-11-04  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/81735\n+\t* trans-decl.c (gfc_trans_deferred_vars): Do a better job of a\n+\tcase where 'tmp' was used unititialized and remove TODO.\n+\n+2017-11-03  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/82796\n+\t* resolve.c (resolve_equivalence): An entity in a common block within\n+ \ta module cannot appear in an equivalence statement if the entity is\n+\twith a pure procedure.\n+\n+2017-10-31  Jim Wilson  <wilson@tuliptree.org>\n+\n+\t* parse.c (unexpected_eof): Call gcc_unreachable before return.\n+\n+2017-10-30  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/80850\n+\t* trans_expr.c (gfc_conv_procedure_call): When passing a class\n+\targument to an unlimited polymorphic dummy, it is wrong to cast\n+\tthe passed expression as unlimited, unless it is unlimited. The\n+\tcorrect way is to assign to each of the fields and set the _len\n+\tfield to zero.\n+\n+2017-10-30  Steven G. Kargl   <kargl@gcc.gnu.org>\n+\n+\t* resolve.c (resolve_transfer): Set derived to correct symbol for\n+\tBT_CLASS.\n+\n+2017-10-29  Jim Wilson  <wilson@tuliptree.org>\n+\n+\t* invoke.texi: Delete adb and sdb references.\n+\n+2017-10-28  Andre Vehreschild  <vehre@gcc.gnu.org>\n+\n+\t* check.c (gfc_check_co_reduce): Clarify error message.\n+\n+2017-10-28  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/81758\n+\t* trans-expr.c (trans_class_vptr_len_assignment): 'vptr_expr'\n+\tmust only be set if the right hand side expression is of type\n+\tclass.\n+\n+2017-10-27  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/82620\n+\t* match.c (gfc_match_allocate): Exit early on syntax error.\n+\n+2017-10-27  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/56342\n+\t* simplify.c (is_constant_array_expr): If the expression is\n+\ta parameter array, call gfc_simplify_expr.\n+\n+2017-10-25  Bernhard Reutner-Fischer  <aldot@gcc.gnu.org>\n+\n+\t* match.c (gfc_match_type_is): Fix typo in error message.\n+\n+2017-10-21  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/82586\n+\t* decl.c (gfc_get_pdt_instance): Remove the error message that\n+\tthe parameter does not have a corresponding component since\n+\tthis is now taken care of when the derived type is resolved. Go\n+\tstraight to error return instead.\n+\t(gfc_match_formal_arglist): Make the PDT relevant errors\n+\timmediate so that parsing of the derived type can continue.\n+\t(gfc_match_derived_decl): Do not check the match status on\n+\treturn from gfc_match_formal_arglist for the same reason.\n+\t* resolve.c (resolve_fl_derived0): Check that each type\n+\tparameter has a corresponding component.\n+\n+\tPR fortran/82587\n+\t* resolve.c (resolve_generic_f): Check that the derived type\n+\tcan be used before resolving the struture constructor.\n+\n+\tPR fortran/82589\n+\t* symbol.c (check_conflict): Add the conflicts involving PDT\n+\tKIND and LEN attributes.\n+\n+2017-10-19  Bernhard Reutner-Fischer  <aldot@gcc.gnu.org>\n+\n+\t* interface.c (check_sym_interfaces, check_uop_interfaces,\n+\tgfc_check_interfaces): Base interface_name buffer off\n+\tGFC_MAX_SYMBOL_LEN.\n+\n+2017-10-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR fortran/82568\n+\t* gfortran.h (gfc_resolve_do_iterator): Add a bool arg.\n+\t(gfc_resolve_omp_local_vars): New declaration.\n+\t* openmp.c (omp_current_ctx): Make static.\n+\t(gfc_resolve_omp_parallel_blocks): Handle EXEC_OMP_TASKLOOP\n+\tand EXEC_OMP_TASKLOOP_SIMD.\n+\t(gfc_resolve_do_iterator): Add ADD_CLAUSE argument, if false,\n+\tdon't actually add any clause.  Move omp_current_ctx test\n+\tearlier.\n+\t(handle_local_var, gfc_resolve_omp_local_vars): New functions.\n+\t* resolve.c (gfc_resolve_code): Call gfc_resolve_omp_parallel_blocks\n+\tinstead of just gfc_resolve_omp_do_blocks for EXEC_OMP_TASKLOOP\n+\tand EXEC_OMP_TASKLOOP_SIMD.\n+\t(gfc_resolve_code): Adjust gfc_resolve_do_iterator caller.\n+\t(resolve_codes): Call gfc_resolve_omp_local_vars.\n+\n+2017-10-19  Bernhard Reutner-Fischer  <aldot@gcc.gnu.org>\n+\n+\t* gfortran.h (gfc_lookup_function_fuzzy): New declaration.\n+\t(gfc_closest_fuzzy_match): New declaration.\n+\t(vec_push): New definition.\n+\t* misc.c (gfc_closest_fuzzy_match): New definition.\n+\t* resolve.c: Include spellcheck.h.\n+\t(lookup_function_fuzzy_find_candidates): New static function.\n+\t(lookup_uop_fuzzy_find_candidates): Likewise.\n+\t(lookup_uop_fuzzy): Likewise.\n+\t(resolve_operator) <INTRINSIC_USER>: Call lookup_uop_fuzzy.\n+\t(gfc_lookup_function_fuzzy): New definition.\n+\t(resolve_unknown_f): Call gfc_lookup_function_fuzzy.\n+\t* interface.c (check_interface0): Likewise.\n+\t(lookup_arg_fuzzy_find_candidates): New static function.\n+\t(lookup_arg_fuzzy ): Likewise.\n+\t(compare_actual_formal): Call lookup_arg_fuzzy.\n+\t* symbol.c: Include spellcheck.h.\n+\t(lookup_symbol_fuzzy_find_candidates): New static function.\n+\t(lookup_symbol_fuzzy): Likewise.\n+\t(gfc_set_default_type): Call lookup_symbol_fuzzy.\n+\t(lookup_component_fuzzy_find_candidates): New static function.\n+\t(lookup_component_fuzzy): Likewise.\n+\t(gfc_find_component): Call lookup_component_fuzzy.\n+\n+2017-10-18  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/82567\n+\t* frontend-passes.c (combine_array_constructor): If an array\n+\tconstructor is all constants and has more elements than a small\n+\tconstant, don't convert a*[b,c] to [a*b,a*c] to reduce compilation\n+\ttimes.\n+\n+2017-10-18  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/79795\n+\t* resolve.c (resovle_symbol): Change gcc_assert to\n+\tsensible error message.\n+\n+2017-10-18  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/82550\n+\t* trans_decl.c (gfc_get_symbol_decl): Procedure symbols that\n+\thave the 'used_in_submodule' attribute should be processed by\n+\t'gfc_get_extern_function_decl'.\n+\n+2017-10-16  Fritz Reese <fritzoreese@gmail.com>\n+\n+\tPR fortran/82511\n+\t* trans-io.c (transfer_expr): Treat BT_UNION as BT_DERIVED.\n+\n+2017-10-15  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/82372\n+\t* fortran/scanner.c (last_error_char):  New global variable.\n+\t(gfc_scanner_init_1): Set last_error_char to NULL.\n+\t(gfc_gobble_whitespace): If a character not printable or\n+\tnot newline, issue an error.\n+\n+2017-10-13  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/81048\n+\t* resolve.c (resolve_symbol): Ensure that derived type array\n+\tresults get default initialization.\n+\n+2017-10-11  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* cpp.c (gfc_cpp_add_include_path): Update incpath_e names.\n+\t(gfc_cpp_add_include_path_after): Likewise.\n+\n+2017-10-10  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\t* target-memory.c (gfc_interpret_logical): Use wi::to_wide when\n+\toperating on trees as wide_ints.\n+\t* trans-const.c (gfc_conv_tree_to_mpz): Likewise.\n+\t* trans-expr.c (gfc_conv_cst_int_power): Likewise.\n+\t* trans-intrinsic.c (trans_this_image): Likewise.\n+\t(gfc_conv_intrinsic_bound): Likewise.\n+\t(conv_intrinsic_cobound): Likewise.\n+\n+2017-10-08  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\t* check.c (gfc_check_x): Remove function.\n+\t* intrinsic.c (add_functions): Use gfc_check_fn_r.\n+\n+2017-10-08  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/82375\n+\t* module.c : Bump up MOD_VERSION to 15.\n+\t(mio_component): Edit comment about PDT specification list.\n+\t(mio_expr, mio_symbol): Include the expression and symbol PDT\n+\tspecification lists in the same way as in mio_component.\n+\n+2017-10-08  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\t* dump_prase_tree (show_symbol): Output list of variables in\n+\tNAMELIST.\n+\t(show_code_node): Add new line for ELSE and END DO for DO\n+\tCONCURRENT.\n+\t* invoke.texi: Document that the output of\n+\t-fdump-fortran-original, -fdump-fortran-optimized and\n+\t-fdump-parse-tree is unsable and may lead to ICEs.\n+\n+2017-10-07  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/82375\n+\t* class.c (gfc_find_derived_vtab): Return NULL for a passed\n+\tpdt template to prevent bad procedures from being written.\n+\t* decl.c (gfc_get_pdt_instance): Do not use the default\n+\tinitializer for pointer and allocatable pdt type components. If\n+\tthe component is allocatbale, set the 'alloc_comp' attribute of\n+\t'instance'.\n+\t* module.c : Add a prototype for 'mio_actual_arglist'. Add a\n+\tboolean argument 'pdt'.\n+\t(mio_component): Call it for the parameter list of pdt type\n+\tcomponents with 'pdt' set to true.\n+\t(mio_actual_arg): Add the boolean 'pdt' and, if it is set, call\n+\tmio_integer for the 'spec_type'.\n+\t(mio_actual_arglist): Add the boolean 'pdt' and use it in the\n+\tcall to mio_actual_arg.\n+\t(mio_expr, mio_omp_udr_expr): Call mio_actual_arglist with\n+\t'pdt' set false.\n+\t* resolve.c (get_pdt_spec_expr): Add the parameter name to the\n+\tKIND parameter error.\n+\t(get_pdt_constructor): Check that cons->expr is non-null.\n+\t* trans-array.c (structure_alloc_comps): For deallocation of\n+\tallocatable components, ensure that parameterized components\n+\tare deallocated first. Likewise, when parameterized components\n+\tare allocated, nullify allocatable components first. Do not\n+\trecurse into pointer or allocatable pdt components while\n+\tallocating or deallocating parameterized components. Test that\n+\tparameterized arrays or strings are allocated before freeing\n+\tthem.\n+\t(gfc_trans_pointer_assignment): Call the new function. Tidy up\n+\ta minor whitespace issue.\n+\ttrans-decl.c (gfc_trans_deferred_vars): Set 'tmp' to NULL_TREE\n+\tto prevent the expression from being used a second time.\n+\n+2017-10-07  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/49232\n+\t* expr.c (gfc_check_pointer_assign): Error\n+\tfor non-contiguous rhs.\n+\n+2017-10-07  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\t* gfortran.h (async_io_dt): Add external reference.\n+\t* io.c (async_io_dt): Add variable.\n+\t(compare_to_allowed_values): Add prototyte. Add optional argument\n+\tnum. If present, set it to the number of the entry that was\n+\tmatched.\n+\t(check_io_constraints): If this is for an asynchronous I/O\n+\tstatement, set async_io_dt and set the asynchronous flag for\n+\ta SIZE tag.\n+\t* resolve.c (resolve_transfer): If async_io_dt is set, set\n+\tthe asynchronous flag on the variable.\n+\t(resolve_fl_namelist): If async_io_dt is set, set the asynchronous\n+\tflag on all elements of the namelist.\n+\n+2017-10-04  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/60458\n+\tPR fortran/77296\n+\t* resolve.c (resolve_assoc_var): Deferred character type\n+\tassociate names must not receive an integer conatant length.\n+\t* symbol.c (gfc_is_associate_pointer): Deferred character\n+\tlength functions also require an associate pointer.\n+\t* trans-decl.c (gfc_get_symbol_decl): Deferred character\n+\tlength functions or derived type components require the assoc\n+\tname to have variable string length.\n+\t* trans-stmt.c (trans_associate_var): Set the string length of\n+\tdeferred string length associate names. The address expression\n+\tis not needed for allocatable, pointer or dummy targets. Change\n+\tthe comment about defered string length targets.\n+\n+2017-10-03  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\t* io.c (match_wait_element): Correctly match END and EOR tags.\n+\t* dump-parse-tree.c (show_code_node): Handle EXEC_WAIT.\n+\n+2017-10-02  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/82312\n+\t* resolve.c (gfc_resolve_code): Simplify condition for class\n+\tpointer assignments becoming regular assignments by asserting\n+\tthat only class valued targets are permitted.\n+\t* trans-expr.c (trans_class_pointer_fcn): New function using a\n+\tblock of code from gfc_trans_pointer_assignment.\n+\t(gfc_trans_pointer_assignment): Call the new function. Tidy up\n+\ta minor whitespace issue.\n+\n+2017-10-01  Dominique d'Humieres  <dominiq@lps.ens.fr>\n+\n+\tPR fortran/61450\n+\t* parse.c (gfc_global_used): Replace the gfc_internal_error\n+\twith an error.\n+\n+2017-09-29  Dominique d'Humieres  <dominiq@lps.ens.fr>\n+\n+\tPR fortran/25071\n+\t* interface.c (compare_actual_formal): Change warnings to errors\n+\twhen \"Actual argument contains too few elements for dummy\n+\targument\", unless -std=legacy is used.\n+\n+2017-09-27  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* lang.opt <Wdo-subscript>: End help text with a period.\n+\n+2017-09-26  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\t* frontend-passes.c (do_subscript): Don't do anything\n+\tif inside an associate list.\n+\n+2017-09-25  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\t* lang.opt:  Add -Wdo-subscript.\n+\t* frontend-passes.c (do_t): New type.\n+\t(doloop_list): Use variable of do_type.\n+\t(if_level): Variable to track if levels.\n+\t(select_level): Variable to track select levels.\n+\t(gfc_run_passes): Initialize i_level and select_level.\n+\t(doloop_code): Record current level of if + select\n+\tlevel in doloop_list.  Add seen_goto if there could\n+\tbe a branch outside the loop. Use different type for\n+\tdoloop_list.\n+\t(doloop_function): Call do_intent and do_subscript; move\n+\tfunctionality of checking INTENT to do_intent.\n+\t(insert_index_t): New type, for callback_insert_index.\n+\t(callback_insert_index): New function.\n+\t(insert_index): New function.\n+\t(do_subscript): New function.\n+\t(do_intent): New function.\n+\t(gfc_code_walker): Keep track of if_level and select_level.\n+\t* invoke.texi: Document -Wdo-subscript.\n+\n+2017-09-25  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\t* trans.c (gfc_unlikely): Remove unnecessary fold_convert.\n+\t(gfc_likely): Likewise.\n+\n+2017-09-24  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\t    Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/80118\n+\t* expr.c (gfc_get_full_arrayspec_from_expr): If there is\n+\tno symtree, set array spec to NULL.\n+\n+2017-09-23  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/82143\n+\t* lang.opt: Add the options -fdefault-real-10 and -fdefault-real-16.\n+\tRename flag_default_real to flag_default_real_8.\n+\t* invoke.texi: Add documentation.\n+\t* module.c (use_iso_fortran_env_module): flag_default_real is renamed.\n+\t* trans-types.c (gfc_init_kinds): Implement the flags\n+\t-fdefault-real-10 and -fdefault-real-16. Make -fdefault-double-8 work\n+\twithout -fdefault-real-8.\n+\n+2017-09-21  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/52832\n+\t* match.c (gfc_match_associate): Before failing the association\n+\ttry again, allowing a proc pointer selector.\n+\n+\tPR fortran/80120\n+\tPR fortran/81903\n+\tPR fortran/82121\n+\t* primary.c (gfc_match_varspec): Introduce 'tgt_expr', which\n+\tpoints to the associate selector, if any. Go through selector\n+\treferences, after resolution for variables, to catch any full\n+\tor section array references. If a class associate name does\n+\tnot have the same declared type as the selector, resolve the\n+\tselector and copy the declared type to the associate name.\n+\tBefore throwing a no implicit type error, resolve all allowed\n+\tselector expressions, and copy the resulting typespec.\n+\n+\tPR fortran/67543\n+\t* resolve.c (resolve_assoc_var): Selector must cannot be the\n+\tNULL expression and it must have a type.\n+\n+\tPR fortran/78152\n+\t* resolve.c (resolve_symbol): Allow associate names to be\n+\tcoarrays.\n+\n+2017-09-21  Cesar Philippidis  <cesar@codesourcery.com>\n+\n+\t* openmp.c (gfc_match_oacc_wait): Don't restrict wait directive\n+\targuments to constant integers.\n+\n+2017-09-17  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/82173\n+\t* decl.c (gfc_get_pdt_instance): Use the component initializer\n+\texpression for the default, rather than the parameter value.\n+\t* resolve.c (resolve_pdt): New function.\n+\t(resolve_symbol): Call it. Remove false error, prohibiting\n+\tdeferred type parameters for dummy arguments.\n+\n+\tPR fortran/60483\n+\t* primary.c (gfc_match_varspec): If the type of an associate\n+\tname is unknown and yet there is a match, try resolving the\n+\ttarget expression and using its type.\n+\n+2017-09-15  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/82184\n+\ttrans-decl.c (gfc_trans_deferred_vars): Do not null the 'span'\n+\tfield if the symbol is either implicitly or explicitly saved.\n+\n+2017-09-13  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/82173\n+\t* decl.c (match_char_kind): If the kind expression is\n+\tparameterized, save it in saved_kind_expr and set kind = 0.\n+\t(gfc_get_pdt_instance): Resolve and simplify before emitting\n+\terror on expression kind. Insert a missing simplification after\n+\tinsertion of kind expressions.\n+\n+2017-09-12  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/82173\n+\tPR fortran/82168\n+\t* decl.c (variable_decl): Check pdt template components for\n+\tappearance of KIND/LEN components in the type parameter name\n+\tlist, that components corresponding to type parameters have\n+\teither KIND or LEN attributes and that KIND or LEN components\n+\tare scalar. Copy the initializer to the parameter value.\n+\t(gfc_get_pdt_instance): Add a label 'error_return' and follow\n+\tit with repeated code, while replacing this code with a jump.\n+\tCheck if a parameter appears as a component in the template.\n+\tMake sure that the parameter expressions are integer. Validate\n+\tKIND expressions.\n+\t(gfc_match_decl_type_spec): Search for pdt_types in the parent\n+\tnamespace since they are instantiated in the template ns.\n+\t* expr.c (gfc_extract_int): Use a KIND parameter if it\n+\tappears as a component expression.\n+\t(gfc_check_init_expr): Allow expressions with the pdt_kind\n+\tattribute.\n+\t*primary.c (gfc_match_actual_arglist): Make sure that the first\n+\tkeyword argument is recognised when 'pdt' is set.\n+\n+2017-09-10  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/34640\n+\tPR fortran/40737\n+\tPR fortran/55763\n+\tPR fortran/57019\n+\tPR fortran/57116\n+\n+\t* expr.c (is_subref_array): Add class pointer array dummies\n+\tto the list of expressions that return true.\n+\t* trans-array.c: Add SPAN_FIELD and update indices for\n+\tsubsequent fields.\n+\t(gfc_conv_descriptor_span, gfc_conv_descriptor_span_get,\n+\tgfc_conv_descriptor_span_set, is_pointer_array,\n+\tget_array_span): New functions.\n+\t(gfc_get_descriptor_offsets_for_info): New function to preserve\n+\tAPI for access to descriptor fields for trans-types.c.\n+\t(gfc_conv_scalarized_array_ref): If the expression is a subref\n+\tarray, make sure that info->descriptor is a descriptor type.\n+\tOtherwise, if info->descriptor is a pointer array, set 'decl'\n+\tand fix it if it is a component reference.\n+\t(build_array_ref): Simplify handling of class array refs by\n+\tpassing the vptr to gfc_build_array_ref rather than generating\n+\tthe pointer arithmetic in this function.\n+\t(gfc_conv_array_ref): As in gfc_conv_scalarized_array_ref, set\n+\t'decl'.\n+\t(gfc_array_allocate): Set the span field if this is a pointer\n+\tarray. Use the expr3 element size if it is available, so that\n+\tthe dynamic type element size is used.\n+\t(gfc_conv_expr_descriptor): Set the span field for pointer\n+\tassignments.\n+\t* trans-array.h: Prototypes for gfc_conv_descriptor_span_get\n+\tgfc_conv_descriptor_span_set and\n+\tgfc_get_descriptor_offsets_for_info added.\n+\ttrans-decl.c (gfc_get_symbol_decl): If a non-class pointer\n+\tarray, mark the declaration as a GFC_DECL_PTR_ARRAY_P. Remove\n+\tthe setting of GFC_DECL_SPAN.\n+\t(gfc_trans_deferred_vars): Set the span field to zero in thge\n+\toriginating scope.\n+\t* trans-expr.c (gfc_conv_procedure_call): Do not use copy-in/\n+\tcopy-out to pass subref expressions to a pointer dummy.\n+\t(gfc_trans_pointer_assignment): Remove code for setting of\n+\tGFC_DECL_SPAN. Set the 'span' field for non-class pointers to\n+\tclass function results. Likewise for rank remap. In the case\n+\tthat the target is not a whole array, use the target array ref\n+\tfor remap and, since the 'start' indices are missing, set the\n+\tlbounds to one, as required by the standard.\n+\t* trans-intrinsic.c (conv_expr_ref_to_caf_ref): Pick up the\n+\t'token' offset from the field decl in the descriptor.\n+\t(conv_isocbinding_subroutine): Set the 'span' field.\n+\t* trans-io.c (gfc_trans_transfer): Always scalarize pointer\n+\tarray io.\n+\t* trans-stmt.c (trans_associate_var): Set the 'span' field.\n+\t* trans-types.c (gfc_get_array_descriptor_base): Add the 'span'\n+\tfield to the array descriptor.\n+\t(gfc_get_derived_type): Pointer array components are marked as\n+\tGFC_DECL_PTR_ARRAY_P.\n+\t(gfc_get_array_descr_info): Replaced API breaking code for\n+\tdescriptor offset calling gfc_get_descriptor_offsets_for_info.\n+\t* trans.c (get_array_span): New function.\n+\t(gfc_build_array_ref): Simplify by calling get_array_span and\n+\tobtain 'span' if 'decl' or 'vptr' present.\n+\t* trans.h : Rename DECL_LANG_FLAG_6, GFC_DECL_SUBREF_ARRAY_P,\n+\tas GFC_DECL_PTR_ARRAY_P.\n+\n+2017-09-09  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\t* decl.c : Add decl_type_param_list, type_param_spec_list as\n+\tstatic variables to hold PDT spec lists.\n+\t(build_sym): Copy 'type_param_spec_list' to symbol spec_list.\n+\t(build_struct): Copy the 'saved_kind_expr' to the component\n+\t'kind_expr'. Check that KIND or LEN components appear in the\n+\tdecl_type_param_list. These should appear as symbols in the\n+\tf2k_derived namespace. If the component is itself a PDT type,\n+\tcopy the decl_type_param_list to the component param_list.\n+\t(gfc_match_kind_spec): If the KIND expression is parameterized\n+\tset KIND to zero and store the expression in 'saved_kind_expr'.\n+\t(insert_parameter_exprs): New function.\n+\t(gfc_insert_kind_parameter_exprs): New function.\n+\t(gfc_insert_parameter_exprs): New function.\n+\t(gfc_get_pdt_instance): New function.\n+\t(gfc_match_decl_type_spec): Match the decl_type_spec_list if it\n+\tis present. If it is, call 'gfc_get_pdt_instance' to obtain the\n+\tspecific instance of the PDT.\n+\t(match_attr_spec): Match KIND and LEN attributes. Check for the\n+\tstandard and for type/kind of the parameter. They are also not\n+\tallowed outside a derived type definition.\n+\t(gfc_match_data_decl): Null the decl_type_param_list and the\n+\ttype_param_spec_list on entry and free them on exit.\n+\t(gfc_match_formal_arglist): If 'typeparam' is true, add the\n+\tformal symbol to the f2k_derived namespace.\n+\t(gfc_match_derived_decl): Register the decl_type_param_list\n+\tif this is a PDT. If this is a type extension, gather up all\n+\tthe type parameters and put them in the right order.\n+\t*dump-parse-tree.c (show_attr): Signal PDT templates and the\n+\tparameter attributes.\n+\t(show_components): Output parameter atrributes and component\n+\tparameter list.\n+\t(show_symbol): Show variable parameter lists.\n+\t* expr.c (expr.c): Copy the expression parameter list.\n+\t(gfc_is_constant_expr): Pass on symbols representing PDT\n+\tparameters.\n+\t(gfc_check_init_expr): Break on PDT KIND parameters and\n+\tPDT parameter expressions.\n+\t(gfc_check_assign): Assigning to KIND or LEN components is an\n+\terror.\n+\t(derived_parameter_expr): New function.\n+\t(gfc_derived_parameter_expr): New function.\n+\t(gfc_spec_list_type): New function.\n+\t* gfortran.h : Add enum gfc_param_spec_type. Add the PDT attrs\n+\tto the structure symbol_attr. Add the 'kind_expr' and\n+\t'param_list' field to the gfc_component structure. Comment on\n+\tthe reuse of the gfc_actual_arglist structure as storage for\n+\ttype parameter spec lists. Add the new field 'spec_type' to\n+\tthis structure. Add 'param_list' fields to gfc_symbol and\n+\tgfc_expr. Add prototypes for gfc_insert_kind_parameter_exprs,\n+\tgfc_insert_parameter_exprs, gfc_add_kind, gfc_add_len,\n+\tgfc_derived_parameter_expr and gfc_spec_list_type.\n+\t* interface.c (gfc_compare_derived_types): Treat PDTs in the\n+\tsame way as sequence types.\n+\t* match.c : Add variable 'type_param_spec_list'.\n+\t(gfc_op2string, gfc_match_member_sep, gfc_match_label): Remove\n+\ttrailing whitespace.\n+\t(match_derived_type_spec): Match PDTs and find specific\n+\tinstance.\n+\t(gfc_match_type_spec): Remove more trailing whitespace.\n+\t(gfc_match_allocate): Assumed or deferred parameters cannot\n+\tappear here. Copy the type parameter spec list to the expr for\n+\tthe allocatable entity. Free 'type_param_spec_list'.\n+\t(gfc_match_common, gfc_match_namelist, gfc_match_module): Still\n+\tmore trailing whitespace to remove.\n+\t(gfc_match_type_is): Allow PDT typespecs.\n+\t* match.h : Modify prototypes for gfc_match_formal_arglist and\n+\tgfc_match_actual_arglist.\n+\t* module.c (ab_attribute, mstring attr_bits): PDT attributes\n+\tadded.\n+\t(mio_symbol_attribute): PDT attributes handled.\n+\t(mio_component): Deal with 'kind_expr' field.\n+\t(mio_full_f2k_derived): For PDT templates, transfer the formal\n+\tnamespace symroot to the f2k_derived namespace.\n+\t*primary.c (match_keyword_arg, gfc_match_actual_arglist): Add\n+\tmodifications to handle PDT spec lists. These are flagged in\n+\tboth cases by new boolean arguments, whose prototype defaults\n+\tare false.\n+\t(gfc_match_structure_constructor, match_variable): Remove yet\n+\tmore trailing whitespace.\n+\t* resolve.c (get_pdt_spec_expr, get_pdt_constructor): New\n+\tfunctions.\n+\t(resolve_structure_cons): If the constructor is a PDT template,\n+\tcall get_pdt_constructor to build it using the parameter lists\n+\tand then get the specific instance of the PDT.\n+\t(resolve_component): PDT strings need a hidden string length\n+\tcomponent like deferred characters.\n+\t(resolve_symbol): Dummy PDTs cannot have deferred parameters.\n+\t* symbol.c (gfc_add_kind, gfc_add_len): New functions.\n+\t(free_components): Free 'kind_expr' and 'param_list' fields.\n+\t(gfc_free_symbol): Free the 'param_list' field.\n+\t(gfc_find_sym_tree): If the current state is a PDT template,\n+\tlook for the symtree in the f2k_derived namspaces.\n+\ttrans-array.c (structure_alloc_comps): Allocate and deallocate\n+\tPDTs. Check dummy arguments for compliance of LEN parameters.\n+\tAdd the new functions to the preceeding enum.\n+\t(gfc_allocate_pdt_comp, gfc_deallocate_pdt_comp and\n+\tgfc_check_pdt_dummy): New functions calling above.\n+\t* trans-array.h : Add prototypes for these functions.\n+\ttrans-decl.c (gfc_get_symbol_decl): Call gfc_defer_symbol_init\n+\tas appropriate for PDT symbols.\n+\t(gfc_trans_deferred_vars): Allocate/deallocate PDT entities as\n+\tthey come into and out of scope. Exclude pdt_types from being\n+\t'gcc_unreachable'.\n+\t(gfc_trans_subcomponent_assign): PDT array components must be\n+\thandles as if they are allocatable.\n+\t* trans-stmt.c (gfc_trans_allocate): Handle initialization of\n+\tPDT entities.\n+\t(gfc_trans_deallocate): Likewise.\n+\t* trans-types.c (gfc_get_derived_type): PDT templates must not\n+\tarrive here. PDT string components are handles as if deferred.\n+\tSimilarly, PDT arrays are treated as if allocatable. PDT\n+\tstrings are pointer types.\n+\t* trans.c (gfc_deferred_strlen): Handle PDT strings in the same\n+\tway as deferred characters.\n+\n+2017-09-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/81887\n+\t* parse.c (decode_omp_directive): Use matchs instead of matcho for\n+\tend ordered and ordered directives, except for ordered depend.  For\n+\t-fopenmp-simd and ordered depend, reject the stmt.\n+\t* trans-openmp.c (gfc_trans_omp_ordered): For -fopenmp-simd ignore\n+\tthreads clause and if simd clause isn't present, just translate the\n+\tbody.\n+\n+2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* trans-types.c (gfc_init_kinds): Use opt_scalar_int_mode for\n+\tthe mode iterator.\n+\n+2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* target-memory.c (size_integer): Use SCALAR_INT_TYPE_MODE.\n+\t(size_logical): Likewise.\n+\n+2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* trans-types.c (gfc_type_for_mode): Use is_a <scalar_int_mode>.\n+\n+2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* trans-types.c (gfc_init_kinds): Use opt_scalar_float_mode\n+\tand FOR_EACH_MODE_IN_CLASS.\n+\n+2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* target-memory.c (size_float): Use SCALAR_FLOAT_TYPE_MODE\n+\tinstead of TYPE_MODE.\n+\n+2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* trans-types.c (gfc_init_kinds): Use machine_mode instead of int\n+\tfor \"mode\".\n+\n+2017-08-28  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/81770\n+\t* expr.c (gfc_check_pointer_assign): Improve the check whether pointer\n+\tmay outlive pointer target.\n+\n+2017-08-27  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/81974\n+\t* frontend-passes (inline_matumul_assign):  Explicity\n+\tset typespec for call to CONJG.\n+\n+2017-08-21  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\tPR fortran/81296\n+\t* trans-io.c (get_dtio_proc): Add check for format label and set\n+\tformatted flag accordingly. Reorganize the code a little.\n+\n+2017-08-16  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/81116\n+\t* frontend-passes.c (realloc_string_callback): If expression is a\n+\tconcatenation, also check for dependency.\n+\t(constant_string_length): Check for presence of symtree.\n+\n+2017-08-13  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\t* gfortran.texi: Document format of unformatted sequential files.\n+\n+2017-08-11  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\t* invoke.texi:  Actually commit change about -Ofast.\n+\n+2017-08-11  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/60355\n+\t* resolve.c (resolve_symbol): Adjust (and reformat)\n+\tcomment.  Perform check if a BIND(C) is declared\n+\tat module level regardless of whether it is typed\n+\timplicitly or not.\n+\n+2017-08-10  Fritz Reese <fritzoreese@gmail.com>\n+\n+\t* options.c (set_dec_flags): Only set legacy standards when value\n+\tis not zero.\n+\n+2017-08-10  Fritz Reese <fritzoreese@gmail.com>\n+\n+\t* options.c (set_dec_flags, gfc_post_options): Only set flag_d_lines\n+\twith -fdec when not set by user.\n+\n+2017-08-10  Fritz Reese <fritzoreese@gmail.com>\n+\n+\t* decl.c (attr_seen): New static variable.\n+\t* decl.c (variable_decl): Match %FILL in STRUCTURE body.\n+\t* gfortran.texi: Update documentation.\n+\n+2017-08-08  Martin Liska  <mliska@suse.cz>\n+\n+\t* trans-types.c: Include header files.\n+\n+2017-08-07  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/68829\n+\tPR fortran/81701\n+\t* options.c: Make -Ofast honor -fmax-stack-var-size.\n+\t* invoke.texi: Document change.\n+\n+2017-08-01  Thomas K\u00f6nig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/79312\n+\t* intrisic.c (gfc_convert_type_warn):  Only set typespec for\n+\tempty array constructors which don't have it already.\n+\n+2017-08-01  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/45435\n+\t* lang.opt (fc-prototypes): Add option.\n+\t* gfortran.h (gfc_typespec): Add interop_kind to struct.\n+\t(gfc_dump_c_prototypes): Add prototype.\n+\t* decl.c (gfc_match_kind_spec): Copy symbol used for kind to typespec.\n+\t* parse.c (gfc_parse_file): Call gfc_dump_prototypes.\n+\t* dump-parse-tree.c (gfc_dump_c_prototypes): New function.\n+\t(type_return): New enum.\n+\t(get_c_type_name): New function.\n+\t(write_decl): New function.\n+\t(write_type): New function.\n+\t(write_variable): New function.\n+\t(write_proc): New function.\n+\t(write_interop_decl): New function.\n+\t* invoke.texi: Document -fc-prototypes.\n+\n+2017-08-01  Dominique d'Humieres  <dominiq@lps.ens.fr>\n+\n+\tPR fortran/53542\n+\t* expr.c (gfc_check_init_expr): Use the renamed name.\n+\n+2017-07-31  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* check.c (gfc_check_num_images): Fix a pasto.\n+\n+2017-07-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* trans-decl.c (gfc_trans_use_stmts): Pass false as new argument to\n+\tthe imported_module_or_decl debug hook.\n+\n+2017-07-28  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n+\n+\t* resolve.c (find_reachable_labels): Adjust.\n+\n+2017-07-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* ioparm.def: Use 1U << 31 instead of 1 << 31 as flags2 mask.\n+\n+2017-07-24  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\t* dump-parse-tree.c (show_symbol):  Show binding label if present.\n+\n+2017-07-24  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\t    Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\tPR fortran/66102\n+\t* fortran/trans-array.c (gfc_conv_resolve_dependencies):\n+\tBreak if dependency has been found.\n+\n+2017-07-23  Alexander Monakov  <amonakov@ispras.ru>\n+\n+\t* interface.c (pair_cmp): Fix gfc_symbol comparison.  Adjust comment.\n+\n+2017-07-18  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* trans.c (gfc_build_array_ref): Use TYPE_MAX_VALUE.\n+\n+2017-07-09  Dominique d'Humieres  <dominiq@lps.ens.fr>\n+\n+\tPR fortran/81341\n+\t* class.c (class_array_ref_detected): Remove a redundant\n+\tcondition.\n+\n+2017-07-06  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/70071\n+\t* array.c (gfc_ref_dimen_size): Handle bad subscript triplets.\n+\n+2017-07-03  Dominique d'Humieres  <dominiq@lps.ens.fr>\n+\n+\tPR fortran/79866\n+\t* resolve.c (resolve_symbol): Fix typo.\n+\n+2017-07-03  Dominique d'Humieres  <dominiq@lps.ens.fr>\n+\n+\tPR fortran/79843\n+\t* symbol.c (check_conflict): Add missing \"conflicts\".\n+\n+2017-06-29  Cesar Philippidis  <cesar@codesourcery.com>\n+\n+\tPR fortran/77765\n+\t* openmp.c (gfc_match_oacc_routine): Check if proc_name exist before\n+\tcomparing the routine name against it.\n+\n+2017-06-27  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\tPR fortran/80164\n+\t* trans-stmt.c (gfc_trans_call): If no code expr, use code->loc\n+\tas warning/error locus.\n+\n+2017-06-24  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\tPR fortran/81160\n+\t* arith.c (wprecision_int_real): Set return value before\n+\tmpz_clear and then return after it.\n+\n+2017-06-15  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/80983\n+\t* trans-expr.c (gfc_conv_procedure_call): Deallocate the result of\n+\tscalar allocatable procedure-pointer components.\n+\n+2017-06-10  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/80988\n+\t* frontend-passes.c (traverse_io_block):  Also\n+\tcheck for variables occurring as indices multiple\n+\ttime in a single implied DO loop.\n+\n+2017-06-05  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/70601\n+\t* trans-expr.c (gfc_conv_procedure_call): Fix detection of allocatable\n+\tfunction results.\n+\n+2017-06-05  Nicolas Koenig  <koenigni@student.ethz.ch>\n+\n+\tPR fortran/35339\n+\t* frontend-passes.c (traverse_io_block): New function.\n+\t(simplify_io_impl_do): New function.\n+\t(optimize_namespace): Invoke gfc_code_walker with\n+\tsimplify_io_impl_do.\n+\n+2017-06-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR fortran/80918\n+\t* openmp.c (resolve_omp_clauses): Fix a typo.\n+\n+2017-05-30  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* error.c (gfc_format_decoder): Update for new bool and\n+\tconst char ** params.\n+\n+2017-05-29  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/37131\n+\t* frontend-passes.c (check_conjg_transpose_variable):\n+\tAdd prototype.\n+\t(has_dimen_vector_ref):  Likewise\n+\t(matmul_temp_args):  New function. Add prototype.\n+\t(optimize_namespace):  Call matmul_temp_args.\n+\n+2017-05-28  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\t* frontend-passes.c (matmul_lhs_realloc):  Correct\n+\tallocation size for case A1B2.\n+\n+2017-05-25  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\t* dump-parse-tree.c (show_expr):  Also replace\n+\twith dumpfile for showing values for forgotten\n+\tcase.\n+\n+2017-05-24  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\t* dump-parse-tree.c (show_expr):  Replace stdout\n+\twith dumpfile for showing values.\n+\n+2017-05-24  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/66094\n+\t* frontend-passes.c (matrix_case):  Add A2TB2.\n+\t(inline_limit_check):  Handle MATMUL(TRANSPOSE(A),B)\n+\t(inline_matmul_assign):  Likewise.\n+\n+2017-05-23  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* openmp.c (OACC_KERNELS_CLAUSES): Add \"OMP_CLAUSE_NUM_GANGS\",\n+\t\"OMP_CLAUSE_NUM_WORKERS\", \"OMP_CLAUSE_VECTOR_LENGTH\".\n+\n+2017-05-22  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/80766\n+\t* resolve.c (resolve_fl_derived): Make sure that vtype symbols are\n+\tproperly resolved.\n+\n+2017-05-19  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/80333\n+\t* trans-io.c (nml_get_addr_expr): If we are dealing with class\n+\ttype data set tmp tree to get that address.\n+\t(transfer_namelist_element): Set the array spec to point to the\n+\tthe class data.\n+\n+2017-05-19  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR fortran/79852\n+\t* bbt.c (insert): Remove trailing exclamation mark from message.\n+\t* decl.c (gfc_match_final_decl): Likewise.\n+\t* dump-parse-tree.c (show_expr): Likewise.\n+\t* module.c (gfc_use_module): Likewise.\n+\t* primary.c (build_actual_constructor): Likewise.\n+\t(gfc_convert_to_structure_constructor): Likewise.\n+\n+2017-05-19  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* gfortran.h (enum gfc_omp_default_sharing): Add\n+\t\"OMP_DEFAULT_PRESENT\".\n+\t* dump-parse-tree.c (show_omp_clauses): Handle it.\n+\t* openmp.c (gfc_match_omp_clauses): Likewise.\n+\t* trans-openmp.c (gfc_trans_omp_clauses): Likewise.\n+\n+2017-05-18  Fritz Reese <fritzoreese@gmail.com>\n+\n+\tPR fortran/79968\n+\t* decl.c (match_attr_spec, gfc_match_automatic,\n+\tgfc_match_static, gfc_match_structure_decl): Unify diagnostic\n+\terrors regarding -fdec options.\n+\t* io.c (match_dec_etag, match_dec_vtag, match_dec_ftag): Ditto.\n+\n+2017-05-17  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\tPR fortran/80741\n+\t* trans-io.c (transfer_namelist_element): Change check from\n+\tNULL_TREE to null_pointer_node.\n+\n+2017-05-17  Fritz Reese <fritzoreese@gmail.com>\n+\n+\tPR fortran/80668\n+\t* expr.c (component_initializer): Don't generate initializers for\n+\tpointer components.\n+\t* invoke.texi (-finit-derived): Document.\n+\n+2017-05-16  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/80554\n+\t* decl.c (build_sym): In a submodule allow overriding of host\n+\tassociated symbols from the ancestor module with a new\n+\tdeclaration.\n+\n+2017-05-15  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/80674\n+\t* trans-stmt.c (gfc_trans_integer_select): Remove redundant condition.\n+\n+2017-05-15  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/80752\n+\t* expr.c (gfc_generate_initializer):  If type conversion fails,\n+\tcheck for error and return NULL.\n+\n+2017-05-14  Nicolas Koenig  <koenigni@student.ethz.ch>\n+\n+\tPR fortran/80442\n+\t* array.c (gfc_ref_dimen_size): Simplify stride\n+\texpression\n+\t* data.c (gfc_advance_section): Simplify start,\n+\tend and stride expressions\n+\t(gfc_advance_section): Simplify start and end\n+\texpressions\n+\t(gfc_get_section_index): Simplify start expression\n+\n+2017-05-13  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\t* io.c (gfc_resolve_dt): Fix returns to bool type.\n+\n+2017-05-11  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\tPR fortran/78659\n+\t* io.c (dtio_procs_present): Add new function to check for DTIO\n+\tprocedures relative to I/O statement READ or WRITE.\n+\t(gfc_resolve_dt): Add namelist checks using the new function.\n+\t* resolve.c (dtio_procs_present): Remove function and related\n+\tnamelist checks. (resolve_fl_namelist): Add check specific to\n+\tFortran 95 restriction on namelist objects.\n+\n+2017-05-11  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* trans-decl.c: Include dumpfile.h not tree-dump.h,\n+\n+2017-05-09  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/79311\n+\t* resolve.c (gfc_resolve_finalizers): Ensure that derived-type\n+\tcomponents have a their finalizers resolved, also if the superordinate\n+\ttype itself has a finalizer.\n+\n+2017-05-08  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/79930\n+\t* frontend-passes.c (matmul_to_var_expr): New function,\n+\tadd prototype.\n+\t(matmul_to_var_code):  Likewise.\n+\t(optimize_namespace):  Use them from gfc_code_walker.\n+\n+2017-05-05  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* cpp.c (cb_cpp_error): Replace report_diagnostic\n+\twith diagnostic_report_diagnostic.\n+\t* error.c (gfc_warning): Likewise.\n+\t(gfc_warning_now_at): Likewise.\n+\t(gfc_warning_now): Likewise.\n+\t(gfc_warning_internal): Likewise.\n+\t(gfc_error_now): Likewise.\n+\t(gfc_fatal_error): Likewise.\n+\t(gfc_error_opt): Likewise.\n+\t(gfc_internal_error): Likewise.\n+\n+2017-05-01  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/37131\n+\t* frontend-passes.c (inline_matmul_assign): Also check bounds\n+\tfor allocatable lhs and matrix-vector-multiplication.\n+\n+2017-04-23  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\tPR fortran/80484\n+\t* io.c (format_lex): Check for '/' and set token to FMT_SLASH.\n+\t(check_format): Move FMT_DT checking code to data_desc section.\n+\t* module.c (gfc_match_use): Include the case of INTERFACE_DTIO.\n+\n+2017-04-22  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/80121\n+\t* trans-types.c (gfc_conv_procedure_call): Deallocate the components\n+\tof allocatable intent(out) arguments.\n+\n+2017-04-21  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/80392\n+\t* trans-types.c (gfc_get_derived_type): Prevent an infinite loop when\n+\tbuilding a derived type that includes a procedure pointer component\n+\twith a polymorphic result.\n+\n+2017-04-17  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/80440\n+\t* module.c (find_symtree_for_symbol): Delete.\n+\t(read_module): Remove the call to the above.\n+\n+2017-04-14  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/80361\n+\t* class.c (generate_finalization_wrapper): Give the finalization wrapper\n+\tthe recursive attribute.\n+\n+2017-04-10  Nicolas Koenig  <koenigni@student.ethz.ch>\n+\t    Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/69498\n+\t* module.c (gfc_match_submodule): Add error\n+\tif function is called in the wrong state.\n+\n+2017-04-10  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/80046\n+\t* expr.c (gfc_check_pointer_assign): Check if procedure pointer\n+\tcomponents in a pointer assignment need an explicit interface.\n+\n+2017-03-18  Nicolas Koenig  <koenigni@student.ethz.ch>\n+\n+\tPR fortran/69498\n+\t* symbol.c (gfc_delete_symtree): If there is a period in the name, ignore\n+\teverything before it.\n+\n+2017-03-28  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/78661\n+\t* trans-io.c (transfer_namelist_element): Perform a polymorphic call\n+\tto a DTIO procedure if necessary.\n+\n+2017-03-25  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/80156\n+\tPR fortran/79382\n+\t* decl.c (access_attr_decl): Remove the error for an absent\n+\tgeneric DTIO interface and ensure that symbol has the flavor\n+\tFL_PROCEDURE.\n+\n+2017-03-22  Dominique d'Humieres  <dominiq@lps.ens.fr>\n+\n+\tPR fortran/79838\n+\t* module.c: Remove trailing period.\n+\n+2017-03-22  Dominique d'Humieres  <dominiq@lps.ens.fr>\n+\n+\tPR fortran/79602\n+\t* decl.c: Replace '%s' with %qs.\n+\t* expr.c: Likewise.\n+\t* interface.c: Likewise.\n+\t* match.c: Likewise.\n+\t* primary.c: Likewise.\n+\t* resolve.c: Likewise.\n+\n+\tPR fortran/79844\n+\tPR fortran/80011\n+\t* io.c: Remove trailing spaces.\n+\t* match.c: Likewise.\n+\t* openmp.c: Likewise.\n+\t* resolve.c: Likewise.\n+\t* trans-intrinsic.c: Likewise.\n+\n+\tPR fortran/79853\n+\t* expr.c: Remove a double spaces.\n+\n+\tPR fortran/79859\n+\t* primary.c: Remove spurious quotes around %qs.\n+\n+2017-03-22  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/80142\n+\t* frontend-passes.c (combine_array_constructor): Take\n+\tlocation of new expression from constructor expression instead\n+\tof constructor.\n+\n+2017-03-20  Nicolas Koenig  <koenigni@student.ethz.ch>\n+\n+\tPR fortran/39239\n+\t* symbol.c (check_conflict): Report an error if an EQUIVALENCE\n+\tobject is BIND(C)\n+\n+2017-03-18  Nicolas Koenig  <koenigni@student.ethz.ch>\n+\n+\tPR fortran/69498\n+\t* decl.c (add_hidden_procptr_result): Fixed Refs count of the\n+\tcreated \"ppr@\" symbol.\n+\n+2017-03-18  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/79676\n+\t* module.c (mio_symbol_attribute): Remove reset of the flag\n+\t'no_module_procedures'.\n+\t(check_for_module_procedures): New function. Move declaration\n+\tof 'no_module_procedures' to above it.\n+\t(gfc_dump_module): Traverse namespace calling new function.\n+\n+2017-03-18  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/71838\n+\t* symbol.c (check_conflict): A dummy procedure in a submodule,\n+\tmodule procedure is not an error.\n+\t(gfc_add_flavor): Ditto.\n+\n+2017-03-17  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\tPR fortran/79841\n+\t* openmp.c (check_symbol_not_pointer): Adjust diagnostics.\n+\n+2017-03-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR fortran/80010\n+\t* parse.c (gfc_ascii_statement): Use !$ACC for ST_OACC_ATOMIC\n+\tand ST_OACC_END_ATOMIC, instead of !ACC.\n+\t* trans-decl.c (finish_oacc_declare): Use !$ACC instead of $!ACC.\n+\t* openmp.c (gfc_match_oacc_declare, gfc_match_oacc_wait,\n+\tgfc_resolve_oacc_declare): Likewise.\n+\n+\tPR fortran/79886\n+\t* error.c (gfc_format_decoder): Rename plus argument to set_locus,\n+\tremove ATTRIBUTE_UNUSED from all arguments, call default_tree_printer\n+\tif not a Fortran specific spec.\n+\t* trans-io.c: Include options.h.\n+\t(gfc_build_st_parameter): Temporarily disable -Wpadded around layout\n+\tof artificial IO data structures.\n+\n+2017-03-15  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR fortran/79860\n+\t* resolve.c (resolve_contained_fntype): Make error messages more\n+\tamenable to translation.\n+\n+2017-03-06  Richard Biener  <rguenther@suse.de>\n+\n+\tPR fortran/79894\n+\t* trans.c (gfc_add_modify_loc): Weaken assert.\n+\n+2017-03-05  Andre Vehreschild  <vehre@gcc.gnu.org>,\n+\t    Alessandro Fanfarillo  <fanfarillo.gcc@gmail.com>\n+\n+\t* check.c (positive_check): Add new function checking constant for\n+\tbeing greater then zero.\n+\t(gfc_check_image_status): Add checking of image_status arguments.\n+\t(gfc_check_failed_or_stopped_images): Same but for failed_- and\n+\tstopped_images function.\n+\t* dump-parse-tree.c (show_code_node): Added output of FAIL IMAGE.\n+\t* gfortran.h (enum gfc_statement): Added FAIL_IMAGE_ST.\n+\t(enum gfc_isym_id): Added new intrinsic symbols.\n+\t(enum gfc_exec_op): Added EXEC_FAIL_IMAGE.\n+\t* gfortran.texi: Added description for the new API functions. Updated\n+\tcoverage of gfortran of TS18508.\n+\t* intrinsic.c (add_functions): Added symbols to resolve new intrinsic\n+\tfunctions.\n+\t* intrinsic.h: Added prototypes.\n+\t* iresolve.c (gfc_resolve_failed_images): Resolve the failed_images\n+\tintrinsic.\n+\t(gfc_resolve_image_status): Same for image_status.\n+\t(gfc_resolve_stopped_images): Same for stopped_images.\n+\t* libgfortran.h: Added prototypes.\n+\t* match.c (gfc_match_if): Added matching of FAIL IMAGE statement.\n+\t(gfc_match_fail_image): Match a FAIL IMAGE statement.\n+\t* match.h: Added prototype.\n+\t* parse.c (decode_statement): Added matching for FAIL IMAGE.\n+\t(next_statement): Same.\n+\t(gfc_ascii_statement): Same.\n+\t* resolve.c: Same.\n+\t* simplify.c (gfc_simplify_failed_or_stopped_images): For COARRAY=\n+\tsingle a constant result can be returne.d\n+\t(gfc_simplify_image_status): For COARRAY=single the result is constant.\n+\t* st.c (gfc_free_statement): Added FAIL_IMAGE handling.\n+\t* trans-decl.c (gfc_build_builtin_function_decls): Added decls of the\n+\tnew intrinsics.\n+\t* trans-expr.c (gfc_conv_procedure_call): This is first time all\n+\targuments of a function are optional, which is now handled here\n+\tcorrectly.\n+\t* trans-intrinsic.c (conv_intrinsic_image_status): Translate\n+\timage_status.\n+\t(gfc_conv_intrinsic_function): Add support for image_status.\n+\t(gfc_is_intrinsic_libcall): Add support for the remaining new\n+\tintrinsics.\n+\t* trans-stmt.c (gfc_trans_fail_image): Trans a fail image.\n+\t* trans-stmt.h: Add the prototype for the above.\n+\t* trans.c (trans_code): Dispatch for fail_image.\n+\t* trans.h: Add the trees for the new intrinsics.\n+\n+2017-03-03  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\tPR fortran/79841\n+\t* openmp.c (check_symbol_not_pointer): Adjust diagnostic.\n+\n+2017-02-28  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/79739\n+\t* resolve.c (resolve_fl_procedure): Deal with the case where\n+\t'submodule_name' is NULL so that gfc_error does not ICE.\n+\tReformat the error message to make it more consistent.\n+\n+2017-02-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* parse.c (parse_critical_block): Use cond ? G_(\"...\") : G_(\"...\")\n+\tinstead of just cond ? \"...\" : \"...\".\n+\t* scanner.c (gfc_next_char_literal): Likewise.\n+\t* match.c (match_exit_cycle): Likewise.\n+\n+2017-02-26  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/51119\n+\t* options.c (gfc_post_options): Set default limit for matmul\n+\tinlining to 30.\n+\t* invoke.texi: Document change.\n+\n+2017-02-25  Dominique d'Humieres  <dominiq@lps.ens.fr>\n+\n+\tPR fortran/79601\n+\t* interface.c (check_dtio_arg_TKR_intent): Change 'intent'\n+\tto 'INTENT'.\n+\n+2017-02-25  Dominique d'Humieres  <dominiq@lps.ens.fr>\n+\n+\tPR fortran/79597\n+\t* interface.c (gfc_match_end_interface): Remove spurious comma\n+\tand space, replace 'got %s' with 'got %qs'.\n+\n+2017-02-20  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/79599\n+\t* interface.c (check_dtio_arg_TKR_intent): Supply 'must'\n+\tmissing from error message.\n+\n+2017-02-20  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/79523\n+\t* interface.c (gfc_find_typebound_dtio_proc): Guard test for\n+\tflavor attribute by checking that symbol is resolved.\n+\n+2017-02-16  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/79382\n+\t* decl.c (access_attr_decl): Test for presence of generic DTIO\n+\tinterface and emit error if not present.\n+\n+2017-02-20  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/79434\n+\t* parse.c (check_component, parse_union): Whitespace.\n+\t(set_syms_host_assoc): For a derived type, check if the module\n+\tin which it was declared is one of the submodule ancestors. If\n+\tit is, make the components public. Otherwise, reset attribute\n+\t'host_assoc' and set 'use-assoc' so that encapsulation is\n+\tpreserved.\n+\n+2017-02-19  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/79447\n+\t* decl.c (gfc_set_constant_character_len): Whitespace.\n+\t(gfc_match_end): Catch case where a procedure is contained in\n+\ta module procedure and ensure that 'end procedure' is the\n+\tcorrect termination.\n+\n+2017-02-19  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/79402\n+\t* resolve.c (fixup_unique_dummy): New function.\n+\t(gfc_resolve_expr): Call it for dummy variables with a unique\n+\tsymtree name.\n+\n+2017-02-19  Andre Vehreschild  <vehre@gcc.gnu.org>\n+\n+\tPR fortran/79229\n+\t* trans-expr.c (gfc_trans_assignment_1): Deref indirect refs when\n+\tcompiling with -fcheck=mem to check the pointer and not the data.\n+\n+2017-02-19  Andre Vehreschild  <vehre@gcc.gnu.org>\n+\n+\tPR fortran/79335\n+\t* trans-array.c (duplicate_allocatable_coarray): Ensure attributes\n+\tpassed are properly initialized.\n+\t(structure_alloc_comps): Same.\n+\t* trans-expr.c (gfc_trans_structure_assign): Same.\n+\n+2017-02-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* trans-expr.c (gfc_conv_substring): Add missing space in diagnostics.\n+\n+2017-02-12  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/65542\n+\t* intrinsic.c (gfc_intrinsic_func_interface):  Return an error\n+\tfor -std=f95 for disallowed transformational functions in\n+\tinitialization expressions.\n+\n+2017-02-09  Cesar Philippidis  <cesar@codesourcery.com>\n+\t    Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* openmp.c (resolve_omp_clauses): Error on directives\n+\tcontaining both tile and collapse clauses.\n+\t(resolve_oacc_loop_blocks): Represent '*' tile arguments as zero.\n+\t* trans-openmp.c (gfc_trans_omp_do): Lower tiled loops like\n+\tcollapsed loops.\n+\n+2017-02-07  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\t* trans-types.c\t(gfc_get_int_kind_from_width_isofortranen):  Choose\n+\tREAL type with the widest precision if two (or more) have the same\n+\tstorage size.\n+\n+2017-02-05  Andre Vehreschild  <vehre@gcc.gnu.org>\n+\n+\tPR fortran/79344\n+\t* trans-stmt.c (gfc_trans_allocate): Only deallocate the components of\n+\tthe temporary, when a new object was created for the temporary.  Not\n+\twhen it is just an alias to an existing object.\n+\n+2017-02-05  Andre Vehreschild  <vehre@gcc.gnu.org>\n+\n+\tPR fortran/79335\n+\t* trans-decl.c (generate_coarray_sym_init): Retrieve the symbol's\n+\tattributes before using them.\n+\n+2017-02-05  Andre Vehreschild  <vehre@gcc.gnu.org>\n+\n+\tPR fortran/78958\n+\t* trans-stmt.c (gfc_trans_allocate): Add the multiplying the _len\n+\tcomponent of unlimited polymorphic objects when source-allocating.\n+\n+2017-02-05  Andre Vehreschild  <vehre@gcc.gnu.org>\n+\n+\tPR fortran/79230\n+\t* trans-array.c (structure_alloc_comps): Ignore pointer components when\n+\tfreeing structures.\n+\n+2017-01-25  Maxim Ostapenko  <m.ostapenko@samsung.com>\n+\n+\tPR lto/79061\n+\t* f95-lang.c (gfc_create_decls): Include stringpool.h.\n+\tPass main_input_filename to build_translation_unit_decl.\n+\n+2017-01-23  Thomas Koenig  <tkoenig@netcologne.de>\n+\n+\t* arith.c (arith_power):  If simplifying integer power expression\n+\tto zero, warn if -Winteger-division is given.\n+\n+2017-01-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR fortran/79154\n+\t* parse.c (matchs, matcho, matchds, matchdo): Replace return st;\n+\twith { ret = st; goto finish; }.\n+\t(decode_omp_directive): Allow declare simd, declare target and\n+\tsimd directives in PURE/ELEMENTAL procedures.  Only call\n+\tgfc_unset_implicit_pure on successful match of other procedures.\n+\n+2017-01-21  Gerald Pfeifer  <gerald@pfeifer.com>\n+\n+\t* gfc-internals.texi (Symbol Versioning): Change references\n+\tto www.akkadia.org to https.\n+\n+2017-01-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gfortran.h (gfc_extract_int): Change return type to bool.  Add\n+\tint argument with = 0.\n+\t* decl.c (gfc_match_kind_spec): Adjust gfc_extract_int caller, pass\n+\t1 as new last argument to it, don't emit gfc_error.\n+\t(match_char_kind): Likewise.\n+\t(gfc_match_decl_type_spec): Use gfc_get_string (\"%s\", x) instead of\n+\tgfc_get_string (x).\n+\t(gfc_match_derived_decl, match_binding_attributes): Likewise.\n+\t(gfc_match_structure_decl): Don't sprintf back to name, call\n+\tget_struct_decl directly with gfc_dt_upper_string (name) result.\n+\t* trans-stmt.c (gfc_trans_allocate): Use gfc_get_string (\"%s\", x)\n+\tinstead of gfc_get_string (x).\n+\t* module.c (gfc_dt_lower_string, gfc_dt_upper_string,\n+\tgfc_match_use, gfc_match_submodule, find_true_name, mio_pool_string,\n+\tmio_symtree_ref, mio_expr, mio_omp_udr_expr, load_generic_interfaces,\n+\tload_omp_udrs, load_needed, read_module, dump_module,\n+\tcreate_intrinsic_function, import_iso_c_binding_module,\n+\tcreate_int_parameter, create_int_parameter_array, create_derived_type,\n+\tuse_iso_fortran_env_module): Likewise.\n+\t* error.c (gfc_diagnostic_starter, gfc_diagnostic_start_span): Use\n+\tpp_verbatim (context->printer, \"%s\", x) instead of\n+\tpp_verbatim (context->printer, x).\n+\t* match.c (gfc_match_small_int): Adjust gfc_extract_int caller, pass\n+\t1 as new last argument to it, don't emit gfc_error.\n+\t(gfc_match_small_int_expr): Likewise.\n+\t* iresolve.c (gfc_get_string): Optimize format \"%s\" case.\n+\t(resolve_bound): Use gfc_get_string (\"%s\", x) instead of\n+\tgfc_get_string (x).\n+\t(resolve_transformational): Formatting fix.\n+\t(gfc_resolve_char_achar): Change name argument to bool is_achar,\n+\tuse a single format string and if is_achar add \"a\" before \"char\".\n+\t(gfc_resolve_achar, gfc_resolve_char): Adjust callers.\n+\t* expr.c (gfc_extract_int): Change return type to bool, return true\n+\tif some error occurred.  Add REPORT_ERROR argument, if non-zero\n+\tcall either gfc_error or gfc_error_now depending on its sign.\n+\t* arith.c (arith_power): Adjust gfc_extract_int caller.\n+\t* symbol.c (gfc_add_component): Use gfc_get_string (\"%s\", x) instead\n+\tof gfc_get_string (x).\n+\t(gfc_new_symtree, gfc_delete_symtree, gfc_get_uop, gfc_new_symbol,\n+\tgfc_get_gsymbol, generate_isocbinding_symbol): Likewise.\n+\t* openmp.c (gfc_match_omp_clauses): Adjust gfc_extract_int caller, pass\n+\t-1 as new last argument to it, don't emit gfc_error_now.\n+\t(gfc_match_omp_declare_reduction): Use gfc_get_string (\"%s\", x)\n+\tinstead of gfc_get_string (x).\n+\t* check.c (kind_check): Adjust gfc_extract_int caller.\n+\t* intrinsic.c (add_sym, find_sym, make_alias): Use\n+\tgfc_get_string (\"%s\", x) instead of gfc_get_string (x).\n+\t* simplify.c (get_kind, gfc_simplify_btest, gfc_simplify_maskr,\n+\tgfc_simplify_maskl, gfc_simplify_poppar, gfc_simplify_repeat,\n+\tgfc_simplify_selected_int_kind, gfc_simplify_selected_real_kind):\n+\tAdjust gfc_extract_int callers.\n+\t* trans-decl.c (gfc_find_module): Use gfc_get_string (\"%s\", x)\n+\tinstead of gfc_get_string (x).\n+\t* matchexp.c (expression_syntax): Add const.\n+\t* primary.c (match_kind_param, match_hollerith_constant,\n+\tmatch_string_constant): Adjust gfc_extract_int callers.\n+\t(match_keyword_arg): Use gfc_get_string (\"%s\", x) instead of\n+\tgfc_get_string (x).\n+\t* frontend-passes.c (optimize_minmaxloc): Likewise.\n+\n+2017-01-19  Andre Vehreschild  <vehre@gcc.gnu.org>\n+\n+\tPR fortran/70696\n+\t* trans-decl.c (gfc_build_qualified_array): Add static decl to parent\n+\tfunction only, when the decl-context is not the translation unit.\n+\n+2017-01-18  Louis Krupp  <louis.krupp@zoho.com>\n+\n+\tPR fortran/50069\n+\tPR fortran/55086\n+\t* trans-expr.c (gfc_conv_variable): Don't treat temporary variables\n+\tas function arguments.\n+\t* trans-stmt.c (forall_make_variable_temp,\n+\tgenerate_loop_for_temp_to_lhs, gfc_trans_assign_need_temp,\n+\tgfc_trans_forall_1): Don't adjust offset of forall temporary\n+\tfor array sections, make forall temporaries work for substring\n+\texpressions, improve test coverage by adding -ftest-forall-temp\n+\toption to request usage of temporary array in forall code.\n+\t* lang.opt: Add -ftest-forall-temp option.\n+\t* invoke.texi: Add -ftest-forall-temp option.\n+\n+2017-01-18  Andre Vehreschild  <vehre@gcc.gnu.org>\n+\n+\t* primary.c (caf_variable_attr): Improve figuring whether the current\n+\tcomponent is the last one refed.\n+\t* trans-stmt.c (gfc_trans_allocate): Do not generate sync_all calls\n+\twhen allocating pointer or allocatable components.\n+\n+2017-01-18  Andre Vehreschild  <vehre@gcc.gnu.org>\n+\n+\t* gfortran.texi: Add missing parameters to caf-API functions.  Correct\n+\ttypos and clarify some descriptions.\n+\n+2017-01-18  Andre Vehreschild  <vehre@gcc.gnu.org>\n+\n+\tPR fortran/70696\n+\tMissed some cases, here they are:\n+\t* trans-decl.c (gfc_build_qualified_array): Add static tokens to the\n+\tparent function's scope.\n+\t* trans-expr.c (gfc_get_tree_for_caf_expr): Shorten code.  Remove\n+\tunnecessary assert.\n+\n+2017-01-13  Andre Vehreschild  <vehre@gcc.gnu.org>\n+\n+\tPR fortran/70697\n+\t* resolve.c (resolve_lock_unlock_event): Resolve the expression for\n+\tevent's until_count.\n+\n+2017-01-13  Andre Vehreschild  <vehre@gcc.gnu.org>\n+\n+\tPR fortran/70696\n+\t* trans-expr.c (gfc_get_tree_for_caf_expr): Ensure the backend_decl\n+\tis valid before accessing it.\n+\n+2017-01-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR translation/79019\n+\tPR translation/79020\n+\t* decl.c (attr_decl1): Fix spelling in translatable string.\n+\t* intrinsic.texi: Fix spelling - invokation -> invocation.\n+\t* lang.opt (faggressive-function-elimination, gfc_convert): Fix\n+\ttypos in descriptions.\n+\t* openmp.c (resolve_omp_clauses): Add missing whitespace to\n+\ttranslatable strings.\n+\n+2017-01-08  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/78913\n+\tPR middle-end/77708\n+\t* trans-common.c (build_equiv_decl): Increase buffer size to avoid\n+\ttruncation for any argument.\n+\t* trans-types.c (gfc_build_logical_type): Same.\n+\n+2017-01-07  Andre Vehreschild  <vehre@gcc.gnu.org>\n+\n+\tPR fortran/78781\n+\tPR fortran/78935\n+\t* expr.c (gfc_check_pointer_assign): Return the same error message for\n+\trewritten coarray pointer assignments like for plain ones.\n+\t* gfortran.h: Change prototype.\n+\t* primary.c (caf_variable_attr): Set attributes used ones only only\n+\tones.  Add setting of pointer_comp attribute.\n+\t(gfc_caf_attr): Add setting of pointer_comp attribute.\n+\t* trans-array.c (gfc_array_allocate): Add flag that the component to\n+\tallocate is not an ultimate coarray component.  Add allocation of\n+\tpointer arrays.\n+\t(structure_alloc_comps): Extend nullify to treat pointer components in\n+\tcoarrays correctly.  Restructure nullify to remove redundant code.\n+\t(gfc_nullify_alloc_comp): Allow setting caf_mode flags.\n+\t* trans-array.h: Change prototype of gfc_nullify_alloc_comp ().\n+\t* trans-decl.c (generate_coarray_sym_init): Call nullify_alloc_comp for\n+\tderived type coarrays with pointer components.\n+\t* trans-expr.c (gfc_trans_structure_assign): Also treat pointer\n+\tcomponents.\n+\t(trans_caf_token_assign): Handle assignment of token of scalar pointer\n+\tcomponents.\n+\t(gfc_trans_pointer_assignment): Call above routine.\n+\t* trans-intrinsic.c (conv_expr_ref_to_caf_ref): Add treating pointer\n+\tcomponents.\n+\t(gfc_conv_intrinsic_caf_get): Likewise.\n+\t(conv_caf_send): Likewise.\n+\t* trans-stmt.c (gfc_trans_allocate): After allocating a derived type in\n+\ta coarray pre-register the tokens.\n+\t(gfc_trans_deallocate): Simply determining the coarray type (scalar or\n+\tarray) and deregistering it correctly.\n+\t* trans-types.c (gfc_typenode_for_spec): Replace in_coarray flag by the\n+\tactual codim to allow lookup of array types in the cache.\n+\t(gfc_build_array_type): Likewise.\n+\t(gfc_get_array_descriptor_base): Likewise.\n+\t(gfc_get_array_type_bounds): Likewise.\n+\t(gfc_get_derived_type): Likewise.\n+\t* trans-types.h: Likewise.\n+\t* trans.c (gfc_deallocate_with_status): Enable deregistering of all kind\n+\tof coarray components.\n+\t(gfc_deallocate_scalar_with_status): Use free() in fcoarray_single mode\n+\tinstead of caf_deregister.\n+\n+2017-01-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* simplify.c (simplify_transformation_to_array): Use\n+\tGCC_DIAGNOSTIC_PUSH_IGNORED and GCC_DIAGNOSTIC_POP instead of\n+\t#pragma GCC diagnostic {push,ignored,pop}.\n+\n+2017-01-06  Alexandre Oliva <aoliva@redhat.com>\n+\n+\t* simplify.c (simplify_transformation_to_array): Silence\n+\tarray bounds warning.  Fix whitespace.\n+\n+2017-01-04  Alexandre Oliva <aoliva@redhat.com>\n+\n+\t* module.c (load_omp_udrs): Initialize name.\n+\n+2017-01-02  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\tPR fortran/78534\n+\t* trans-expr.c (gfc_trans_string_copy): Rework string copy\n+\talgorithm to avoid -Wstringop-overflow warning.\n+\n+2017-01-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tUpdate copyright years.\n+\n+\t* gfortranspec.c (lang_specific_driver): Update copyright notice\n+\tdates.\n+\t* gfc-internals.texi: Bump @copying's copyright year.\n+\t* gfortran.texi: Ditto.\n+\t* intrinsic.texi: Ditto.\n+\t* invoke.texi: Ditto.\n+\f\n+Copyright (C) 2017 Free Software Foundation, Inc.\n+\n+Copying and distribution of this file, with or without modification,\n+are permitted in any medium without royalty provided the copyright\n+notice and this notice are preserved."}, {"sha": "7b6718c16a4c17c2db0e2e017e70c622e7509ad7", "filename": "gcc/fortran/gfc-internals.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e6aea386e244e87fd9a745887cd9c59431e33f/gcc%2Ffortran%2Fgfc-internals.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e6aea386e244e87fd9a745887cd9c59431e33f/gcc%2Ffortran%2Fgfc-internals.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfc-internals.texi?ref=65e6aea386e244e87fd9a745887cd9c59431e33f", "patch": "@@ -1,7 +1,7 @@\n \\input texinfo  @c -*-texinfo-*-\n @c %**start of header\n @setfilename gfc-internals.info\n-@set copyrights-gfortran 2007-2017\n+@set copyrights-gfortran 2007-2018\n \n @include gcc-common.texi\n "}, {"sha": "a8fdf92aaa01837e9dfac7c62f84720ed4650e11", "filename": "gcc/fortran/gfortran.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e6aea386e244e87fd9a745887cd9c59431e33f/gcc%2Ffortran%2Fgfortran.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e6aea386e244e87fd9a745887cd9c59431e33f/gcc%2Ffortran%2Fgfortran.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.texi?ref=65e6aea386e244e87fd9a745887cd9c59431e33f", "patch": "@@ -1,7 +1,7 @@\n \\input texinfo  @c -*-texinfo-*-\n @c %**start of header\n @setfilename gfortran.info\n-@set copyrights-gfortran 1999-2017\n+@set copyrights-gfortran 1999-2018\n \n @include gcc-common.texi\n "}, {"sha": "7749bb069e18a22b4f3c86e84932daa46b7d985f", "filename": "gcc/fortran/gfortranspec.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e6aea386e244e87fd9a745887cd9c59431e33f/gcc%2Ffortran%2Fgfortranspec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e6aea386e244e87fd9a745887cd9c59431e33f/gcc%2Ffortran%2Fgfortranspec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortranspec.c?ref=65e6aea386e244e87fd9a745887cd9c59431e33f", "patch": "@@ -276,7 +276,7 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n \n \tcase OPT__version:\n \t  printf (\"GNU Fortran %s%s\\n\", pkgversion_string, version_string);\n-\t  printf (\"Copyright %s 2017 Free Software Foundation, Inc.\\n\",\n+\t  printf (\"Copyright %s 2018 Free Software Foundation, Inc.\\n\",\n \t\t  _(\"(C)\"));\n \t  fputs (_(\"This is free software; see the source for copying conditions.  There is NO\\n\\\n warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\\n\\n\"),"}, {"sha": "fbe9938b0e31654fcac61f183cb5c14598803904", "filename": "gcc/fortran/intrinsic.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e6aea386e244e87fd9a745887cd9c59431e33f/gcc%2Ffortran%2Fintrinsic.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e6aea386e244e87fd9a745887cd9c59431e33f/gcc%2Ffortran%2Fintrinsic.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.texi?ref=65e6aea386e244e87fd9a745887cd9c59431e33f", "patch": "@@ -1,5 +1,5 @@\n @ignore\n-Copyright (C) 2005-2017 Free Software Foundation, Inc.\n+Copyright (C) 2005-2018 Free Software Foundation, Inc.\n This is part of the GNU Fortran manual.   \n For copying conditions, see the file gfortran.texi.\n "}, {"sha": "3d64056591e49003b1f6dba9f892b2ab64e8ccea", "filename": "gcc/fortran/invoke.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e6aea386e244e87fd9a745887cd9c59431e33f/gcc%2Ffortran%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e6aea386e244e87fd9a745887cd9c59431e33f/gcc%2Ffortran%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finvoke.texi?ref=65e6aea386e244e87fd9a745887cd9c59431e33f", "patch": "@@ -1,10 +1,10 @@\n-@c Copyright (C) 2004-2017 Free Software Foundation, Inc.\n+@c Copyright (C) 2004-2018 Free Software Foundation, Inc.\n @c This is part of the GNU Fortran manual.   \n @c For copying conditions, see the file gfortran.texi.\n \n @ignore\n @c man begin COPYRIGHT\n-Copyright @copyright{} 2004-2017 Free Software Foundation, Inc.\n+Copyright @copyright{} 2004-2018 Free Software Foundation, Inc.\n \n Permission is granted to copy, distribute and/or modify this document\n under the terms of the GNU Free Documentation License, Version 1.3 or"}, {"sha": "e03f73ded5b6a3d7174c568bff94c65bde9d4d4a", "filename": "gcc/gcc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e6aea386e244e87fd9a745887cd9c59431e33f/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e6aea386e244e87fd9a745887cd9c59431e33f/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=65e6aea386e244e87fd9a745887cd9c59431e33f", "patch": "@@ -8035,7 +8035,7 @@ driver::maybe_print_and_exit () const\n     {\n       printf (_(\"%s %s%s\\n\"), progname, pkgversion_string,\n \t      version_string);\n-      printf (\"Copyright %s 2017 Free Software Foundation, Inc.\\n\",\n+      printf (\"Copyright %s 2018 Free Software Foundation, Inc.\\n\",\n \t      _(\"(C)\"));\n       fputs (_(\"This is free software; see the source for copying conditions.  There is NO\\n\\\n warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\\n\\n\"),"}, {"sha": "e79e34f9d9f477b726976d661c5e22d77f5da5bc", "filename": "gcc/gcov-dump.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e6aea386e244e87fd9a745887cd9c59431e33f/gcc%2Fgcov-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e6aea386e244e87fd9a745887cd9c59431e33f/gcc%2Fgcov-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov-dump.c?ref=65e6aea386e244e87fd9a745887cd9c59431e33f", "patch": "@@ -148,7 +148,7 @@ static void\n print_version (void)\n {\n   printf (\"gcov-dump %s%s\\n\", pkgversion_string, version_string);\n-  printf (\"Copyright (C) 2017 Free Software Foundation, Inc.\\n\");\n+  printf (\"Copyright (C) 2018 Free Software Foundation, Inc.\\n\");\n   printf (\"This is free software; see the source for copying conditions.\\n\"\n   \t  \"There is NO warranty; not even for MERCHANTABILITY or \\n\"\n \t  \"FITNESS FOR A PARTICULAR PURPOSE.\\n\\n\");"}, {"sha": "18a33e79f0642bac769c3104c7ebaf935b293df3", "filename": "gcc/gcov-tool.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e6aea386e244e87fd9a745887cd9c59431e33f/gcc%2Fgcov-tool.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e6aea386e244e87fd9a745887cd9c59431e33f/gcc%2Fgcov-tool.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov-tool.c?ref=65e6aea386e244e87fd9a745887cd9c59431e33f", "patch": "@@ -526,7 +526,7 @@ static void\n print_version (void)\n {\n   fnotice (stdout, \"%s %s%s\\n\", progname, pkgversion_string, version_string);\n-  fnotice (stdout, \"Copyright %s 2014-2017 Free Software Foundation, Inc.\\n\",\n+  fnotice (stdout, \"Copyright %s 2018 Free Software Foundation, Inc.\\n\",\n            _(\"(C)\"));\n   fnotice (stdout,\n            _(\"This is free software; see the source for copying conditions.\\n\""}, {"sha": "a109d6cd57286436d058e649058f10c3af1b2dea", "filename": "gcc/gcov.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e6aea386e244e87fd9a745887cd9c59431e33f/gcc%2Fgcov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e6aea386e244e87fd9a745887cd9c59431e33f/gcc%2Fgcov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov.c?ref=65e6aea386e244e87fd9a745887cd9c59431e33f", "patch": "@@ -843,7 +843,7 @@ static void\n print_version (void)\n {\n   fnotice (stdout, \"gcov %s%s\\n\", pkgversion_string, version_string);\n-  fprintf (stdout, \"Copyright %s 2017 Free Software Foundation, Inc.\\n\",\n+  fprintf (stdout, \"Copyright %s 2018 Free Software Foundation, Inc.\\n\",\n \t   _(\"(C)\"));\n   fnotice (stdout,\n \t   _(\"This is free software; see the source for copying conditions.\\n\""}, {"sha": "4d78e187a04baf3f58b475d346ac7a69d0be2cdd", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e6aea386e244e87fd9a745887cd9c59431e33f/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e6aea386e244e87fd9a745887cd9c59431e33f/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=65e6aea386e244e87fd9a745887cd9c59431e33f", "patch": "@@ -1,3 +1,7 @@\n+2018-01-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gccgo.texi: Bump @copyrights-go year.\n+\n 2017-12-12  Tony Reix  <tony.reix@atos.net>\n \t    Ian Lance Taylor  <iant@golang.org>\n "}, {"sha": "f54cc1030035464b59a7d038ec9b45a2e9141b7d", "filename": "gcc/go/gccgo.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e6aea386e244e87fd9a745887cd9c59431e33f/gcc%2Fgo%2Fgccgo.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e6aea386e244e87fd9a745887cd9c59431e33f/gcc%2Fgo%2Fgccgo.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgccgo.texi?ref=65e6aea386e244e87fd9a745887cd9c59431e33f", "patch": "@@ -12,7 +12,7 @@\n @include gcc-common.texi\n \n @c Copyright years for this manual.\n-@set copyrights-go 2010-2017\n+@set copyrights-go 2010-2018\n \n @copying\n @c man begin COPYRIGHT"}, {"sha": "37ffd6e17ff63b0d951cbf1bdacc9ff8866e5ed5", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e6aea386e244e87fd9a745887cd9c59431e33f/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e6aea386e244e87fd9a745887cd9c59431e33f/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=65e6aea386e244e87fd9a745887cd9c59431e33f", "patch": "@@ -1,3 +1,7 @@\n+2018-01-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* libgomp.texi: Bump @copying's copyright year.\n+\n 2017-12-30  Tom de Vries  <tom@codesourcery.com>\n \n \tPR libgomp/83046"}, {"sha": "c994a404d06393da5d5096c38ab39c1ee2eadd5d", "filename": "libgomp/libgomp.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e6aea386e244e87fd9a745887cd9c59431e33f/libgomp%2Flibgomp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e6aea386e244e87fd9a745887cd9c59431e33f/libgomp%2Flibgomp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Flibgomp.texi?ref=65e6aea386e244e87fd9a745887cd9c59431e33f", "patch": "@@ -7,7 +7,7 @@\n \n \n @copying\n-Copyright @copyright{} 2006-2017 Free Software Foundation, Inc.\n+Copyright @copyright{} 2006-2018 Free Software Foundation, Inc.\n \n Permission is granted to copy, distribute and/or modify this document\n under the terms of the GNU Free Documentation License, Version 1.3 or"}, {"sha": "39dad15d929ea753c410e12bf9dd019ee7cd3285", "filename": "libitm/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e6aea386e244e87fd9a745887cd9c59431e33f/libitm%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e6aea386e244e87fd9a745887cd9c59431e33f/libitm%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2FChangeLog?ref=65e6aea386e244e87fd9a745887cd9c59431e33f", "patch": "@@ -1,3 +1,7 @@\n+2018-01-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* libitm.texi: Bump @copying's copyright year.\n+\n 2017-11-17  Igor Tsimbalist  <igor.v.tsimbalist@intel.com>\n \n \t* Makefile.in: Regenerate."}, {"sha": "7a91348947f038906afa2074389606b7ef076ad0", "filename": "libitm/libitm.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e6aea386e244e87fd9a745887cd9c59431e33f/libitm%2Flibitm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e6aea386e244e87fd9a745887cd9c59431e33f/libitm%2Flibitm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Flibitm.texi?ref=65e6aea386e244e87fd9a745887cd9c59431e33f", "patch": "@@ -7,7 +7,7 @@\n \n \n @copying\n-Copyright @copyright{} 2011-2017 Free Software Foundation, Inc.\n+Copyright @copyright{} 2011-2018 Free Software Foundation, Inc.\n \n Permission is granted to copy, distribute and/or modify this document\n under the terms of the GNU Free Documentation License, Version 1.2 or"}, {"sha": "5a649e0e06bc563a177cc077914fd93323f16b10", "filename": "libquadmath/ChangeLog", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e6aea386e244e87fd9a745887cd9c59431e33f/libquadmath%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e6aea386e244e87fd9a745887cd9c59431e33f/libquadmath%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2FChangeLog?ref=65e6aea386e244e87fd9a745887cd9c59431e33f", "patch": "@@ -1,4 +1,8 @@\n- 2017-11-17  Igor Tsimbalist  <igor.v.tsimbalist@intel.com>\n+2018-01-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* libquadmath.texi: Bump @copying's copyright year.\n+\n+2017-11-17  Igor Tsimbalist  <igor.v.tsimbalist@intel.com>\n \n \t* Makefile.am: Update AM_CFLAGS.\n \t* Makefile.in: Regenerate:"}, {"sha": "af576334a3e003ec3bfac9e0003d511f62d8f97b", "filename": "libquadmath/libquadmath.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e6aea386e244e87fd9a745887cd9c59431e33f/libquadmath%2Flibquadmath.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e6aea386e244e87fd9a745887cd9c59431e33f/libquadmath%2Flibquadmath.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Flibquadmath.texi?ref=65e6aea386e244e87fd9a745887cd9c59431e33f", "patch": "@@ -6,7 +6,7 @@\n @c %**end of header\n \n @copying\n-Copyright @copyright{} 2010-2017 Free Software Foundation, Inc.\n+Copyright @copyright{} 2010-2018 Free Software Foundation, Inc.\n \n @quotation\n Permission is granted to copy, distribute and/or modify this document"}]}