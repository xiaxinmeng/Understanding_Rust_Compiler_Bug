{"sha": "a638cfb0fc84ce38a029bca0ea64431c9a3fb0fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTYzOGNmYjBmYzg0Y2UzOGEwMjliY2EwZWE2NDQzMWM5YTNmYjBmYw==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2003-08-26T16:31:12Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2003-08-26T16:31:12Z"}, "message": "Reference.java (get): Indentation fix.\n\n\t* java/lang/ref/Reference.java (get): Indentation fix.\n\t(clear): Comment fix.\n\t(enqueue): Likewise.\n\t(lock): Likewise.\n\t(referent): Likewise.\n\nFrom-SVN: r70814", "tree": {"sha": "1ff2aee82e6fb4e57db29d394ba501562ca624cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ff2aee82e6fb4e57db29d394ba501562ca624cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a638cfb0fc84ce38a029bca0ea64431c9a3fb0fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a638cfb0fc84ce38a029bca0ea64431c9a3fb0fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a638cfb0fc84ce38a029bca0ea64431c9a3fb0fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a638cfb0fc84ce38a029bca0ea64431c9a3fb0fc/comments", "author": null, "committer": null, "parents": [{"sha": "0f56e0cc566602aa75928d725245bb1410772840", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f56e0cc566602aa75928d725245bb1410772840", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f56e0cc566602aa75928d725245bb1410772840"}], "stats": {"total": 24, "additions": 16, "deletions": 8}, "files": [{"sha": "2520e701f3b64c17cfdacf032bd1aa21a27068f9", "filename": "libjava/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a638cfb0fc84ce38a029bca0ea64431c9a3fb0fc/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a638cfb0fc84ce38a029bca0ea64431c9a3fb0fc/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=a638cfb0fc84ce38a029bca0ea64431c9a3fb0fc", "patch": "@@ -1,3 +1,11 @@\n+2003-08-26  Tom Tromey  <tromey@redhat.com>\n+\n+\t* java/lang/ref/Reference.java (get): Indentation fix.\n+\t(clear): Comment fix.\n+\t(enqueue): Likewise.\n+\t(lock): Likewise.\n+\t(referent): Likewise.\n+\n 2003-08-26  Tom Tromey  <tromey@redhat.com>\n \n \tPR java/12058:"}, {"sha": "2f6235e3ba851e1333c099a2d4cf6ee9d1b341fe", "filename": "libjava/java/lang/ref/Reference.java", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a638cfb0fc84ce38a029bca0ea64431c9a3fb0fc/libjava%2Fjava%2Flang%2Fref%2FReference.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a638cfb0fc84ce38a029bca0ea64431c9a3fb0fc/libjava%2Fjava%2Flang%2Fref%2FReference.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2Fref%2FReference.java?ref=a638cfb0fc84ce38a029bca0ea64431c9a3fb0fc", "patch": "@@ -40,7 +40,7 @@\n \n /**\n  * This is the base class of all references.  A reference allows\n- * refering to an object without preventing the garbage collection to\n+ * refering to an object without preventing the garbage collector to\n  * collect it.  The only way to get the referred object is via the\n  * <code>get()</code>-method.  This method will return\n  * <code>null</code> if the object was collected. <br>\n@@ -52,11 +52,11 @@\n  * There are currently three types of references:  soft reference,\n  * weak reference and phantom reference. <br>\n  *\n- * Soft references will be cleared if the garbage collection is told\n+ * Soft references will be cleared if the garbage collector is told\n  * to free some memory and there are no unreferenced or weakly referenced\n  * objects.  It is useful for caches. <br>\n  *\n- * Weak references will be cleared as soon as the garbage collection\n+ * Weak references will be cleared as soon as the garbage collector\n  * determines that the refered object is only weakly reachable.  They\n  * are useful as keys in hashtables (see <code>WeakHashtable</code>) as\n  * you get notified when nobody has the key anymore.\n@@ -74,7 +74,7 @@\n {\n   /**\n    * The underlying object.  This field is handled in a special way by\n-   * the garbage collection.\n+   * the garbage collector.\n    * GCJ LOCAL:\n    * This is a RawData because it must be disguised from the GC.\n    * END GCJ LOCAL\n@@ -117,7 +117,7 @@\n   Reference nextOnQueue;\n \n   /**\n-   * This lock should be taken by the garbage collection, before\n+   * This lock should be taken by the garbage collector, before\n    * determining reachability.  It will prevent the get()-method to\n    * return the reference so that reachability doesn't change.\n    */\n@@ -162,7 +162,7 @@\n    */\n   public Object get()\n   {\n-    synchronized(lock)\n+    synchronized (lock)\n       {\n \treturn referent;\n       }\n@@ -171,7 +171,7 @@ public Object get()\n   /**\n    * Clears the reference, so that it doesn't refer to its object\n    * anymore.  For soft and weak references this is called by the\n-   * garbage collection.  For phantom references you should call \n+   * garbage collector.  For phantom references you should call \n    * this when enqueuing the reference.\n    */\n   public void clear()\n@@ -190,7 +190,7 @@ public boolean isEnqueued()\n \n   /**\n    * Enqueue an object on a reference queue.  This is normally executed\n-   * by the garbage collection.\n+   * by the garbage collector.\n    */\n   public boolean enqueue() \n   {"}]}