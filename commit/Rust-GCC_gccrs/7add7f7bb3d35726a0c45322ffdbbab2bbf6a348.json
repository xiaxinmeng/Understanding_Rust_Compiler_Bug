{"sha": "7add7f7bb3d35726a0c45322ffdbbab2bbf6a348", "node_id": "C_kwDOANBUbNoAKDdhZGQ3ZjdiYjNkMzU3MjZhMGM0NTMyMmZmZGJiYWIyYmJmNmEzNDg", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2021-11-21T17:19:24Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2021-12-08T19:53:28Z"}, "message": "libgcc, Darwin: Build a libgcc_s.1 for backwards compatibility.\n\nIn order to reslve a long-standing issue with inter-operation\nwith libSystem, we have bumped the SO name for libgcc_s.\n\nDistributions might wish to install this new version into a\nstructure where exisiting code is already linked with the\ncompiler-local libgcc_s.1 (providing symbols exported by the\nnow-retired libgcc_ext.10.x shims).\n\nThe replacement libgcc_s.1 forwards the symbols from the new SO.\nIn order to support DYLD_LIBRARY_PATH on systems (where it works)\nwe forward the libSystem unwinder symbols from 10.7+ and a\ncompiler-local version of the libgcc unwinder on earlier.\n\nFor macOS 10.4 to 10.6 this is 'bug-compatible' with existing uses.\nFor 10.7+ the behaviour will now actually be correct.\n\nThis should be squashed with the initial libgcc changes for PR80556\nin any backport (r12-5418-gd4943ce939d)\n\nlibgcc/ChangeLog:\n\n\t* config.host (*-*-darwin*): Add logic to build a shared\n\tunwinder library for Darwin8-10.\n\t* config/i386/t-darwin: Build legacy libgcc_s.1.\n\t* config/rs6000/t-darwin: Likewise.\n\t* config/t-darwin: Reorganise the EH fragments to place\n\tthem for inclusion in a shared EH lib.\n\t* config/t-slibgcc-darwin: Build a legacy libgcc_s.1 and\n\tthe supporting pieces (all FAT libs).\n\t* config/t-darwin-noeh: Removed.\n\t* config/darwin-unwind.ver: New file.\n\t* config/rs6000/t-darwin-ehs: New file.\n\t* config/t-darwin-ehs: New file.", "tree": {"sha": "2e2229281da0d7c80fcf9b5ee5ef3ddd88f9550c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e2229281da0d7c80fcf9b5ee5ef3ddd88f9550c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7add7f7bb3d35726a0c45322ffdbbab2bbf6a348", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7add7f7bb3d35726a0c45322ffdbbab2bbf6a348", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7add7f7bb3d35726a0c45322ffdbbab2bbf6a348", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7add7f7bb3d35726a0c45322ffdbbab2bbf6a348/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c1563fb8ff227590eb5ab0fc3d22f3b0a57c241", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c1563fb8ff227590eb5ab0fc3d22f3b0a57c241", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c1563fb8ff227590eb5ab0fc3d22f3b0a57c241"}], "stats": {"total": 211, "additions": 186, "deletions": 25}, "files": [{"sha": "d4c035c718897093670cb658de612cf085e90361", "filename": "libgcc/config.host", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7add7f7bb3d35726a0c45322ffdbbab2bbf6a348/libgcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7add7f7bb3d35726a0c45322ffdbbab2bbf6a348/libgcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.host?ref=7add7f7bb3d35726a0c45322ffdbbab2bbf6a348", "patch": "@@ -215,10 +215,17 @@ case ${host} in\n *-*-darwin*)\n   asm_hidden_op=.private_extern\n   tmake_file=\"$tmake_file t-darwin ${cpu_type}/t-darwin t-libgcc-pic\"\n-  extra_parts=\"crt3.o libd10-uwfef.a crttms.o crttme.o libemutls_w.a\"\n   # The unwinder is provided by the system shared libraries, do not add one\n-  # to the shared libgcc.\n-  tmake_file=\"$tmake_file t-darwin-noeh t-slibgcc-darwin\"\n+  # to the shared libgcc but, for older systems, we build a shared unwinder\n+  # separately so that we can construct a libgcc_s.1 to use for binaries\n+  # linked against the old libgcc_ext.10.x stubs.\n+  case ${host} in\n+    *-*-darwin[89]* | *-*-darwin10*)\n+      tmake_file=\"$tmake_file t-darwin-ehs ${cpu_type}/t-darwin-ehs\"\n+      ;;\n+  esac\n+  tmake_file=\"$tmake_file t-slibgcc-darwin\"\n+  extra_parts=\"crt3.o libd10-uwfef.a crttms.o crttme.o libemutls_w.a\"\n   ;;\n *-*-dragonfly*)\n   tmake_file=\"$tmake_file t-crtstuff-pic t-libgcc-pic t-eh-dw2-dip\""}, {"sha": "fb74cb2c5d211c7c084163f5ba15df10a22e37d7", "filename": "libgcc/config/darwin-unwind.ver", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7add7f7bb3d35726a0c45322ffdbbab2bbf6a348/libgcc%2Fconfig%2Fdarwin-unwind.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7add7f7bb3d35726a0c45322ffdbbab2bbf6a348/libgcc%2Fconfig%2Fdarwin-unwind.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fdarwin-unwind.ver?ref=7add7f7bb3d35726a0c45322ffdbbab2bbf6a348", "patch": "@@ -0,0 +1,30 @@\n+# unwinder\n+__Unwind_DeleteException\n+__Unwind_Find_FDE\n+__Unwind_ForcedUnwind\n+__Unwind_GetGR\n+__Unwind_GetIP\n+__Unwind_GetLanguageSpecificData\n+__Unwind_GetRegionStart\n+__Unwind_GetTextRelBase\n+__Unwind_GetDataRelBase\n+__Unwind_RaiseException\n+__Unwind_Resume\n+__Unwind_SetGR\n+__Unwind_SetIP\n+__Unwind_FindEnclosingFunction\n+__Unwind_GetCFA\n+__Unwind_Backtrace\n+__Unwind_Resume_or_Rethrow\n+__Unwind_GetIPInfo\n+\n+___register_frame\n+___register_frame_table\n+___register_frame_info\n+___register_frame_info_bases\n+___register_frame_info_table\n+___register_frame_info_table_bases\n+\n+___deregister_frame\n+___deregister_frame_info\n+___deregister_frame_info_bases"}, {"sha": "4c18da1efbfd3a00c2dbc0bf60816709c3013bb2", "filename": "libgcc/config/i386/t-darwin", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7add7f7bb3d35726a0c45322ffdbbab2bbf6a348/libgcc%2Fconfig%2Fi386%2Ft-darwin", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7add7f7bb3d35726a0c45322ffdbbab2bbf6a348/libgcc%2Fconfig%2Fi386%2Ft-darwin", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Ft-darwin?ref=7add7f7bb3d35726a0c45322ffdbbab2bbf6a348", "patch": "@@ -4,3 +4,6 @@ LIB2FUNCS_EXCLUDE = _fixtfdi _fixunstfdi _floatditf _floatunditf\n \n #\u00a0Extra symbols for this port.\n SHLIB_MAPFILES += $(srcdir)/config/i386/libgcc-darwin.ver\n+\n+#\u00a0Build a legacy libgcc_s.1\n+BUILD_LIBGCCS1 = YES"}, {"sha": "183d0df92ce9d9a7912b657dae4badcd2d4a1a1f", "filename": "libgcc/config/rs6000/t-darwin", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7add7f7bb3d35726a0c45322ffdbbab2bbf6a348/libgcc%2Fconfig%2Frs6000%2Ft-darwin", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7add7f7bb3d35726a0c45322ffdbbab2bbf6a348/libgcc%2Fconfig%2Frs6000%2Ft-darwin", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Ft-darwin?ref=7add7f7bb3d35726a0c45322ffdbbab2bbf6a348", "patch": "@@ -56,3 +56,6 @@ unwind-dw2_s.o: HOST_LIBGCC2_CFLAGS += -maltivec\n unwind-dw2.o: HOST_LIBGCC2_CFLAGS += -maltivec\n \n LIB2ADDEH += $(srcdir)/config/rs6000/darwin-fallback.c\n+\n+#\u00a0Build a legacy libgcc_s.1\n+BUILD_LIBGCCS1 = YES"}, {"sha": "3047f53cb70070554c3bd6f3c47f3934531f23fc", "filename": "libgcc/config/rs6000/t-darwin-ehs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7add7f7bb3d35726a0c45322ffdbbab2bbf6a348/libgcc%2Fconfig%2Frs6000%2Ft-darwin-ehs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7add7f7bb3d35726a0c45322ffdbbab2bbf6a348/libgcc%2Fconfig%2Frs6000%2Ft-darwin-ehs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Ft-darwin-ehs?ref=7add7f7bb3d35726a0c45322ffdbbab2bbf6a348", "patch": "@@ -0,0 +1,5 @@\n+# We need the save_world code for the EH library.\n+\n+LIBEHSOBJS +=  darwin-world_s.o\n+\n+$(LIBEHSOBJS): libef_ppc.a"}, {"sha": "a855ecfd526190e14a92da57a67faba015ec8197", "filename": "libgcc/config/t-darwin", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7add7f7bb3d35726a0c45322ffdbbab2bbf6a348/libgcc%2Fconfig%2Ft-darwin", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7add7f7bb3d35726a0c45322ffdbbab2bbf6a348/libgcc%2Fconfig%2Ft-darwin", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Ft-darwin?ref=7add7f7bb3d35726a0c45322ffdbbab2bbf6a348", "patch": "@@ -11,10 +11,6 @@ crttms.o: $(srcdir)/config/darwin-crt-tm.c\n crttme.o: $(srcdir)/config/darwin-crt-tm.c\n \t$(crt_compile) -mmacosx-version-min=10.4 -DEND -c $<\n \n-# Use unwind-dw2-fde-darwin\n-LIB2ADDEH = $(srcdir)/unwind-dw2.c $(srcdir)/config/unwind-dw2-fde-darwin.c \\\n-  $(srcdir)/unwind-sjlj.c $(srcdir)/unwind-c.c\n-\n # Make emutls weak so that we can deal with -static-libgcc, override the\n #\u00a0hidden visibility when this is present in libgcc_eh.\n emutls.o: HOST_LIBGCC2_CFLAGS += \\\n@@ -38,5 +34,20 @@ libd10-uwfef.a: d10-uwfef.o\n \t$(AR_CREATE_FOR_TARGET) $@ d10-uwfef.o\n \t$(RANLIB_FOR_TARGET) $@\n \n+######\u00a0Unwinder #######\n+# Most Darwin versions get their unwinder from libSystem; older versions\n+#\u00a0have an installed /usr/lib/libgcc_s.1.dylib.\n+# So do not add the unwinder to the shared libgcc.\n+LIB2ADDEHSHARED =\n+\n+# We still need it in the _eh.a for earlier platform versions.\n+# Use unwind-dw2-fde-darwin\n+LIB2ADDEH = $(srcdir)/unwind-dw2.c \\\n+\t    $(srcdir)/config/unwind-dw2-fde-darwin.c \\\n+\t    $(srcdir)/unwind-c.c\n+\n+# Do not build a shared unwind lib by default.\n+LIBEHSOBJS=\n+\n # Symbols for all the sub-ports.\n SHLIB_MAPFILES = libgcc-std.ver $(srcdir)/config/libgcc-libsystem.ver"}, {"sha": "8481898d98a369b8376e42d41cd2460c13884df2", "filename": "libgcc/config/t-darwin-ehs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7add7f7bb3d35726a0c45322ffdbbab2bbf6a348/libgcc%2Fconfig%2Ft-darwin-ehs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7add7f7bb3d35726a0c45322ffdbbab2bbf6a348/libgcc%2Fconfig%2Ft-darwin-ehs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Ft-darwin-ehs?ref=7add7f7bb3d35726a0c45322ffdbbab2bbf6a348", "patch": "@@ -0,0 +1,4 @@\n+# Build the unwinder separately so that we can construct a replacement for\n+# libgcc_s.1 on systems that used the unwinder in libgcc_s.\n+\n+LIBEHSOBJS = unwind-dw2_s.o unwind-dw2-fde-darwin_s.o unwind-c_s.o"}, {"sha": "08d9c1affd3a7b2f897f59bf0551e6eb869609a3", "filename": "libgcc/config/t-darwin-noeh", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c1563fb8ff227590eb5ab0fc3d22f3b0a57c241/libgcc%2Fconfig%2Ft-darwin-noeh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c1563fb8ff227590eb5ab0fc3d22f3b0a57c241/libgcc%2Fconfig%2Ft-darwin-noeh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Ft-darwin-noeh?ref=1c1563fb8ff227590eb5ab0fc3d22f3b0a57c241", "patch": "@@ -1,4 +0,0 @@\n-# Most Darwin versions get their unwinder from libSystem.\n-# so remove the unwinder from the shared lib.\n-# We still need it in the _eh.a for Darwin8/9.\n-LIB2ADDEHSHARED ="}, {"sha": "7349b87468a16ddc7ae4901b450a2136acf4d3eb", "filename": "libgcc/config/t-slibgcc-darwin", "status": "modified", "additions": 116, "deletions": 14, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7add7f7bb3d35726a0c45322ffdbbab2bbf6a348/libgcc%2Fconfig%2Ft-slibgcc-darwin", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7add7f7bb3d35726a0c45322ffdbbab2bbf6a348/libgcc%2Fconfig%2Ft-slibgcc-darwin", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Ft-slibgcc-darwin?ref=7add7f7bb3d35726a0c45322ffdbbab2bbf6a348", "patch": "@@ -2,11 +2,17 @@\n \n SHLIB_SOVERSION = 1.1\n SHLIB_SO_MINVERSION = 1\n-SHLIB_VERSTRING = -compatibility_version $(SHLIB_SO_MINVERSION) -current_version $(SHLIB_SOVERSION)\n+SHLIB_VERSTRING = -compatibility_version $(SHLIB_SO_MINVERSION) \\\n+\t\t  -current_version $(SHLIB_SOVERSION)\n SHLIB_EXT = .dylib\n SHLIB_LC = -lSystem\n+SHLIB_INSTALL_DIR = $(slibdir)\n \n-# Shorthand expressions for the LINK below.\n+SHLIB_MKMAP = $(srcdir)/mkmap-flat.awk\n+SHLIB_MKMAP_OPTS = -v leading_underscore=1\n+\n+# Shorthand expressions for the LINK below, these are substituted in the\n+# link expression.\n SHLIB_INSTALL_NAME = @shlib_base_name@.$(SHLIB_SOVERSION)$(SHLIB_EXT)\n SHLIB_MAP = @shlib_map_file@\n SHLIB_DIR = @multilib_dir@\n@@ -18,23 +24,64 @@ SHLIB_SONAME = @shlib_base_name@$(SHLIB_EXT)\n # library, that is what we eventually install.\n \n SHLIB_LINK = $(CC) $(LIBGCC2_CFLAGS) $(LDFLAGS) -dynamiclib -nodefaultlibs \\\n-\t-install_name @shlib_slibdir@/$(SHLIB_INSTALL_NAME) \\\n+\t-install_name $(SHLIB_INSTALL_DIR)/$(SHLIB_INSTALL_NAME) \\\n \t-single_module -o $(SHLIB_DIR)/$(SHLIB_SONAME) \\\n \t-Wl,-exported_symbols_list,$(SHLIB_MAP) \\\n \t$(SHLIB_VERSTRING) \\\n \t@multilib_flags@ @shlib_objs@ $(SHLIB_LC)\n \n-SHLIB_MKMAP = $(srcdir)/mkmap-flat.awk\n-SHLIB_MKMAP_OPTS = -v leading_underscore=1\n+# we do our own thing\n+SHLIB_INSTALL =\n \n LGCC_FILES = libgcc_s.$(SHLIB_SOVERSION)$(SHLIB_EXT)\n \n-INSTALL_FILES=$(LGCC_FILES)\n+ifeq ($(BUILD_LIBGCCS1),YES)\n \n-# we do our own thing\n-SHLIB_INSTALL =\n+# We are going to build a libgcc_s.1.dylib so that distributions can\n+# install it for compatibility with binaries linked against the old\n+# libgcc_ext.10.x.dylib stubs.\n+\n+# For systems after macOS 10.7 we can forward the correct unwinder symbols\n+# from libSystem.\n+\n+# For older systems we have to forward an entire library (since they cannot\n+# selectively forward symbols, which means that we cannot forward the unwinder\n+# in /usr/lib/libgcc_s.1.dylib).  We also cannot forward the entire library\n+# since that creates a self-referencing loop when DYLD_LIBRARY_PATH is used.\n+# To provide the unwinder symbols in this case, we build the unwinder into a\n+# separate shared lib (libgcc_ehs) and forward that.\n+\n+# These targets are local to this make fragment, which means that they do not\n+# get the substitutions seen in SHLIB_LINK.\n+\n+ifneq ($(LIBEHSOBJS),)\n+\n+EHS_INSTNAME = libgcc_ehs.$(SHLIB_SOVERSION)$(SHLIB_EXT)\n+\n+# multilib build for a shared EH lib.\n+$(LIBEHSOBJS): libgcc_tm.h\n+\n+libgcc_ehs$(SHLIB_EXT): $(LIBEHSOBJS)\n+\tmkdir -p $(MULTIDIR)\n+\t$(CC) $(LIBGCC2_CFLAGS) $(LDFLAGS) -dynamiclib -nodefaultlibs \\\n+\t-install_name $(SHLIB_INSTALL_DIR)/$(EHS_INSTNAME) \\\n+\t-o $(MULTIDIR)/libgcc_ehs$(SHLIB_EXT) $(SHLIB_VERSTRING) \\\n+\t$(LIBEHSOBJS) $(SHLIB_LC)\n+\n+all: libgcc_ehs$(SHLIB_EXT)\n+\n+LGCC_FILES += libgcc_ehs.$(SHLIB_SOVERSION)$(SHLIB_EXT)\n+\n+endif\n+\n+# Provide libgcc_s.1 for backwards compatibility.\n+LGCC_FILES += libgcc_s.1.dylib\n+\n+endif\n+\n+INSTALL_FILES=$(LGCC_FILES)\n \n-# For the toplevel multilib, build a fat archive including all the multilibs.\n+# For the toplevel multilib, build FAT dylibs including all the multilibs.\n ifeq ($(MULTIBUILDTOP),)\n \n ifeq ($(enable_shared),yes)\n@@ -52,7 +99,62 @@ libgcc_s.$(SHLIB_SOVERSION)$(SHLIB_EXT): all-multi libgcc_s$(SHLIB_EXT)\n \t  -create libgcc_s.$(SHLIB_SOVERSION)$(SHLIB_EXT)_T*\n \trm libgcc_s.$(SHLIB_SOVERSION)$(SHLIB_EXT)_T*\n \n-# Install the shared library.\n+ifeq ($(BUILD_LIBGCCS1),YES)\n+ifneq ($(LIBEHSOBJS),)\n+\n+libgcc_ehs.$(SHLIB_SOVERSION)$(SHLIB_EXT): all-multi libgcc_ehs$(SHLIB_EXT)\n+\tMLIBS=`$(CC) --print-multi-lib | sed -e 's/;.*$$//'` ; \\\n+\tfor mlib in $$MLIBS ; do \\\n+\t  cp ../$${mlib}/libgcc/$${mlib}/libgcc_ehs$(SHLIB_EXT)  \\\n+\t    ./libgcc_ehs.$(SHLIB_SOVERSION)$(SHLIB_EXT)_T_$${mlib} || exit 1 ; \\\n+\tdone\n+\t$(LIPO) -output libgcc_ehs.$(SHLIB_SOVERSION)$(SHLIB_EXT) \\\n+\t  -create libgcc_ehs.$(SHLIB_SOVERSION)$(SHLIB_EXT)_T*\n+\trm libgcc_ehs.$(SHLIB_SOVERSION)$(SHLIB_EXT)_T*\n+\n+\n+libgcc_s.1.dylib: libgcc_s.$(SHLIB_SOVERSION)$(SHLIB_EXT) libgcc_ehs.$(SHLIB_SOVERSION)$(SHLIB_EXT)\n+\tMLIBS=`$(CC) --print-multi-lib | sed -e 's/;.*$$//'` ; \\\n+\tfor mlib in $$MLIBS ; do \\\n+\t  cp ../$${mlib}/libgcc/$${mlib}/libgcc_s$(SHLIB_EXT)  \\\n+\t    ./libgcc_s.$(SHLIB_SOVERSION)$(SHLIB_EXT)_T_$${mlib} || exit 1 ; \\\n+\t  cp ../$${mlib}/libgcc/$${mlib}/libgcc_ehs$(SHLIB_EXT)  \\\n+\t    ./libgcc_ehs.$(SHLIB_SOVERSION)$(SHLIB_EXT)_T_$${mlib} || exit 1 ; \\\n+\t  arch=`$(LIPO) -info libgcc_s.$(SHLIB_SOVERSION)$(SHLIB_EXT)_T_$${mlib} | sed -e 's/.*:\\ //'` ; \\\n+\t  $(CC) -arch $${arch} -nodefaultlibs -dynamiclib \\\n+\t    -o libgcc_s.1$(SHLIB_EXT)_T_$${mlib} \\\n+\t    -Wl,-reexport_library,libgcc_s.$(SHLIB_SOVERSION)$(SHLIB_EXT)_T_$${mlib} \\\n+\t    -Wl,-reexport_library,libgcc_ehs.$(SHLIB_SOVERSION)$(SHLIB_EXT)_T_$${mlib} \\\n+\t    -install_name $(SHLIB_INSTALL_DIR)/libgcc_s.1.dylib \\\n+\t    -compatibility_version 1 -current_version 1 ; \\\n+\tdone\n+\t$(LIPO) -output libgcc_s.1$(SHLIB_EXT) -create libgcc_s.1$(SHLIB_EXT)_T*\n+\trm libgcc_s.$(SHLIB_SOVERSION)$(SHLIB_EXT)_T*\n+\trm libgcc_ehs.$(SHLIB_SOVERSION)$(SHLIB_EXT)_T*\n+\n+else\n+\n+libgcc_s.1.dylib: libgcc_s.$(SHLIB_SOVERSION)$(SHLIB_EXT)\n+\tMLIBS=`$(CC) --print-multi-lib | sed -e 's/;.*$$//'` ; \\\n+\tfor mlib in $$MLIBS ; do \\\n+\t  cp ../$${mlib}/libgcc/$${mlib}/libgcc_s$(SHLIB_EXT)  \\\n+\t    ./libgcc_s.$(SHLIB_SOVERSION)$(SHLIB_EXT)_T_$${mlib} || exit 1 ; \\\n+\t  arch=`$(LIPO) -info libgcc_s.$(SHLIB_SOVERSION)$(SHLIB_EXT)_T_$${mlib} | sed -e 's/.*:\\ //'` ; \\\n+\t  $(CC) -arch $${arch} -nodefaultlibs -dynamiclib \\\n+\t    -o libgcc_s.1$(SHLIB_EXT)_T_$${mlib} \\\n+\t    -Wl,-reexport_library,libgcc_s.$(SHLIB_SOVERSION)$(SHLIB_EXT)_T_$${mlib} \\\n+\t    -lSystem \\\n+\t    -Wl,-reexported_symbols_list,$(srcdir)/config/darwin-unwind.ver \\\n+\t    -install_name $(SHLIB_INSTALL_DIR)/libgcc_s.1.dylib \\\n+\t    -compatibility_version 1 -current_version 1 ; \\\n+\tdone\n+\t$(LIPO) -output libgcc_s.1$(SHLIB_EXT) -create libgcc_s.1$(SHLIB_EXT)_T*\n+\trm libgcc_s.$(SHLIB_SOVERSION)$(SHLIB_EXT)_T*\n+\n+endif\n+endif\n+\n+# Install the shared libraries.\n \n install-darwin-libgcc-stubs :\n \t$(mkinstalldirs) $(DESTDIR)$(slibdir)\n@@ -62,10 +164,10 @@ install-darwin-libgcc-stubs :\n \n else\n \n-# Do not install shared libraries for any other multilibs.  Unless we are\n-# putting them in the gcc directory during a build, for compatibility with\n-# the pre-top-level layout.  In that case we provide symlinks to the FAT lib\n-# from the sub-directories.\n+# Do not install shared libraries for multilibs.  Unless we are putting them\n+# in the gcc directory during a build, for compatibility with the pre-top-\n+# level layout.  In that case we provide symlinks to the FAT lib from the\n+# multilib sub-directories.\n \n ifeq ($(enable_shared),yes)\n all: install-darwin-libgcc-links"}]}