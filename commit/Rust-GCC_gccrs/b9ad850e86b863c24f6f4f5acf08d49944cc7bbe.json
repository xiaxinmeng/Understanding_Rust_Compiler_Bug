{"sha": "b9ad850e86b863c24f6f4f5acf08d49944cc7bbe", "node_id": "C_kwDOANBUbNoAKGI5YWQ4NTBlODZiODYzYzI0ZjZmNGY1YWNmMDhkNDk5NDRjYzdiYmU", "commit": {"author": {"name": "Qing Zhao", "email": "qing.zhao@oracle.com", "date": "2022-10-07T14:59:01Z"}, "committer": {"name": "Qing Zhao", "email": "qing.zhao@oracle.com", "date": "2022-10-07T17:44:14Z"}, "message": "Use array_at_struct_end_p in __builtin_object_size [PR101836]\n\nUse array_at_struct_end_p to determine whether the trailing array\nof a structure is flexible array member in __builtin_object_size.\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/101836\n\t* tree-object-size.cc (addr_object_size): Use array_at_struct_end_p\n\tto determine a flexible array member reference.\n\ngcc/testsuite/ChangeLog:\n\n\tPR tree-optimization/101836\n\t* gcc.dg/pr101836.c: New test.\n\t* gcc.dg/pr101836_1.c: New test.\n\t* gcc.dg/pr101836_2.c: New test.\n\t* gcc.dg/pr101836_3.c: New test.\n\t* gcc.dg/pr101836_4.c: New test.\n\t* gcc.dg/pr101836_5.c: New test.\n\t* gcc.dg/strict-flex-array-2.c: New test.\n\t* gcc.dg/strict-flex-array-3.c: New test.", "tree": {"sha": "75c67c9441b7ee72843604f81d79a1c97b9d254d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/75c67c9441b7ee72843604f81d79a1c97b9d254d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b9ad850e86b863c24f6f4f5acf08d49944cc7bbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9ad850e86b863c24f6f4f5acf08d49944cc7bbe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9ad850e86b863c24f6f4f5acf08d49944cc7bbe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9ad850e86b863c24f6f4f5acf08d49944cc7bbe/comments", "author": {"login": "qingzhao69", "id": 89154636, "node_id": "MDQ6VXNlcjg5MTU0NjM2", "avatar_url": "https://avatars.githubusercontent.com/u/89154636?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qingzhao69", "html_url": "https://github.com/qingzhao69", "followers_url": "https://api.github.com/users/qingzhao69/followers", "following_url": "https://api.github.com/users/qingzhao69/following{/other_user}", "gists_url": "https://api.github.com/users/qingzhao69/gists{/gist_id}", "starred_url": "https://api.github.com/users/qingzhao69/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qingzhao69/subscriptions", "organizations_url": "https://api.github.com/users/qingzhao69/orgs", "repos_url": "https://api.github.com/users/qingzhao69/repos", "events_url": "https://api.github.com/users/qingzhao69/events{/privacy}", "received_events_url": "https://api.github.com/users/qingzhao69/received_events", "type": "User", "site_admin": false}, "committer": {"login": "qingzhao69", "id": 89154636, "node_id": "MDQ6VXNlcjg5MTU0NjM2", "avatar_url": "https://avatars.githubusercontent.com/u/89154636?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qingzhao69", "html_url": "https://github.com/qingzhao69", "followers_url": "https://api.github.com/users/qingzhao69/followers", "following_url": "https://api.github.com/users/qingzhao69/following{/other_user}", "gists_url": "https://api.github.com/users/qingzhao69/gists{/gist_id}", "starred_url": "https://api.github.com/users/qingzhao69/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qingzhao69/subscriptions", "organizations_url": "https://api.github.com/users/qingzhao69/orgs", "repos_url": "https://api.github.com/users/qingzhao69/repos", "events_url": "https://api.github.com/users/qingzhao69/events{/privacy}", "received_events_url": "https://api.github.com/users/qingzhao69/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1879e48f3d8595bc9e7f583bbd12df3c6f5c42dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1879e48f3d8595bc9e7f583bbd12df3c6f5c42dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1879e48f3d8595bc9e7f583bbd12df3c6f5c42dc"}], "stats": {"total": 496, "additions": 487, "deletions": 9}, "files": [{"sha": "efad02cfe89927b07057b17a40e1cd2e3c44f662", "filename": "gcc/testsuite/gcc.dg/pr101836.c", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9ad850e86b863c24f6f4f5acf08d49944cc7bbe/gcc%2Ftestsuite%2Fgcc.dg%2Fpr101836.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9ad850e86b863c24f6f4f5acf08d49944cc7bbe/gcc%2Ftestsuite%2Fgcc.dg%2Fpr101836.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr101836.c?ref=b9ad850e86b863c24f6f4f5acf08d49944cc7bbe", "patch": "@@ -0,0 +1,60 @@\n+/* -fstrict-flex-arrays is aliased with -ftrict-flex-arrays=3, which is the\n+   strictest, only [] is treated as flexible array.  */ \n+/* PR tree-optimization/101836 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fstrict-flex-arrays\" } */\n+\n+#include <stdio.h>\n+\n+#define expect(p, _v) do { \\\n+    size_t v = _v; \\\n+    if (p == v) \\\n+        printf(\"ok:  %s == %zd\\n\", #p, p); \\\n+    else \\\n+\t{  \\\n+          printf(\"WAT: %s == %zd (expected %zd)\\n\", #p, p, v); \\\n+\t  __builtin_abort (); \\\n+\t} \\\n+} while (0);\n+\n+struct trailing_array_1 {\n+    int a;\n+    int b;\n+    int c[4];\n+};\n+\n+struct trailing_array_2 {\n+    int a;\n+    int b;\n+    int c[1];\n+};\n+\n+struct trailing_array_3 {\n+    int a;\n+    int b;\n+    int c[0];\n+};\n+struct trailing_array_4 {\n+    int a;\n+    int b;\n+    int c[];\n+};\n+\n+void __attribute__((__noinline__)) stuff(\n+    struct trailing_array_1 *normal,\n+    struct trailing_array_2 *trailing_1,\n+    struct trailing_array_3 *trailing_0,\n+    struct trailing_array_4 *trailing_flex)\n+{\n+    expect(__builtin_object_size(normal->c, 1), 16);\n+    expect(__builtin_object_size(trailing_1->c, 1), 4);\n+    expect(__builtin_object_size(trailing_0->c, 1), 0);\n+    expect(__builtin_object_size(trailing_flex->c, 1), -1);\n+}\n+\n+int main(int argc, char *argv[])\n+{\n+    stuff((void *)argv[0], (void *)argv[0], (void *)argv[0], (void *)argv[0]);\n+\n+    return 0;\n+}"}, {"sha": "e2931ce1012e9d7f17a587916904bdcfa726951f", "filename": "gcc/testsuite/gcc.dg/pr101836_1.c", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9ad850e86b863c24f6f4f5acf08d49944cc7bbe/gcc%2Ftestsuite%2Fgcc.dg%2Fpr101836_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9ad850e86b863c24f6f4f5acf08d49944cc7bbe/gcc%2Ftestsuite%2Fgcc.dg%2Fpr101836_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr101836_1.c?ref=b9ad850e86b863c24f6f4f5acf08d49944cc7bbe", "patch": "@@ -0,0 +1,60 @@\n+/* -fstrict-flex-arrays=3 is the strictest, only [] is treated as\n+   flexible array.  */ \n+/* PR tree-optimization/101836 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fstrict-flex-arrays=3\" } */\n+\n+#include <stdio.h>\n+\n+#define expect(p, _v) do { \\\n+    size_t v = _v; \\\n+    if (p == v) \\\n+        printf(\"ok:  %s == %zd\\n\", #p, p); \\\n+    else \\\n+\t{  \\\n+          printf(\"WAT: %s == %zd (expected %zd)\\n\", #p, p, v); \\\n+\t  __builtin_abort (); \\\n+\t} \\\n+} while (0);\n+\n+struct trailing_array_1 {\n+    int a;\n+    int b;\n+    int c[4];\n+};\n+\n+struct trailing_array_2 {\n+    int a;\n+    int b;\n+    int c[1];\n+};\n+\n+struct trailing_array_3 {\n+    int a;\n+    int b;\n+    int c[0];\n+};\n+struct trailing_array_4 {\n+    int a;\n+    int b;\n+    int c[];\n+};\n+\n+void __attribute__((__noinline__)) stuff(\n+    struct trailing_array_1 *normal,\n+    struct trailing_array_2 *trailing_1,\n+    struct trailing_array_3 *trailing_0,\n+    struct trailing_array_4 *trailing_flex)\n+{\n+    expect(__builtin_object_size(normal->c, 1), 16);\n+    expect(__builtin_object_size(trailing_1->c, 1), 4);\n+    expect(__builtin_object_size(trailing_0->c, 1), 0);\n+    expect(__builtin_object_size(trailing_flex->c, 1), -1);\n+}\n+\n+int main(int argc, char *argv[])\n+{\n+    stuff((void *)argv[0], (void *)argv[0], (void *)argv[0], (void *)argv[0]);\n+\n+    return 0;\n+}"}, {"sha": "78974187721ff74a3ee6700195bdaabd7a9ec254", "filename": "gcc/testsuite/gcc.dg/pr101836_2.c", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9ad850e86b863c24f6f4f5acf08d49944cc7bbe/gcc%2Ftestsuite%2Fgcc.dg%2Fpr101836_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9ad850e86b863c24f6f4f5acf08d49944cc7bbe/gcc%2Ftestsuite%2Fgcc.dg%2Fpr101836_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr101836_2.c?ref=b9ad850e86b863c24f6f4f5acf08d49944cc7bbe", "patch": "@@ -0,0 +1,60 @@\n+/* When -fstrict-flex-arrays=2, only [] and [0] are treated as flexiable\n+   arrays.  */\n+/* PR tree-optimization/101836 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fstrict-flex-arrays=2\" } */\n+\n+#include <stdio.h>\n+\n+#define expect(p, _v) do { \\\n+    size_t v = _v; \\\n+    if (p == v) \\\n+        printf(\"ok:  %s == %zd\\n\", #p, p); \\\n+    else \\\n+\t{  \\\n+          printf(\"WAT: %s == %zd (expected %zd)\\n\", #p, p, v); \\\n+\t  __builtin_abort (); \\\n+\t} \\\n+} while (0);\n+\n+struct trailing_array_1 {\n+    int a;\n+    int b;\n+    int c[4];\n+};\n+\n+struct trailing_array_2 {\n+    int a;\n+    int b;\n+    int c[1];\n+};\n+\n+struct trailing_array_3 {\n+    int a;\n+    int b;\n+    int c[0];\n+};\n+struct trailing_array_4 {\n+    int a;\n+    int b;\n+    int c[];\n+};\n+\n+void __attribute__((__noinline__)) stuff(\n+    struct trailing_array_1 *normal,\n+    struct trailing_array_2 *trailing_1,\n+    struct trailing_array_3 *trailing_0,\n+    struct trailing_array_4 *trailing_flex)\n+{\n+    expect(__builtin_object_size(normal->c, 1), 16);\n+    expect(__builtin_object_size(trailing_1->c, 1), 4);\n+    expect(__builtin_object_size(trailing_0->c, 1), -1);\n+    expect(__builtin_object_size(trailing_flex->c, 1), -1);\n+}\n+\n+int main(int argc, char *argv[])\n+{\n+    stuff((void *)argv[0], (void *)argv[0], (void *)argv[0], (void *)argv[0]);\n+\n+    return 0;\n+}"}, {"sha": "0e69388e81fb3864f6d8e22f091126446d5a1bee", "filename": "gcc/testsuite/gcc.dg/pr101836_3.c", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9ad850e86b863c24f6f4f5acf08d49944cc7bbe/gcc%2Ftestsuite%2Fgcc.dg%2Fpr101836_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9ad850e86b863c24f6f4f5acf08d49944cc7bbe/gcc%2Ftestsuite%2Fgcc.dg%2Fpr101836_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr101836_3.c?ref=b9ad850e86b863c24f6f4f5acf08d49944cc7bbe", "patch": "@@ -0,0 +1,60 @@\n+/* When -fstrict-flex-arrays=1, [], [0], and [1] are treated as flexible\n+   arrays.  */\n+/* PR tree-optimization/101836 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fstrict-flex-arrays=1\" } */\n+\n+#include <stdio.h>\n+\n+#define expect(p, _v) do { \\\n+    size_t v = _v; \\\n+    if (p == v) \\\n+        printf(\"ok:  %s == %zd\\n\", #p, p); \\\n+    else \\\n+\t{  \\\n+          printf(\"WAT: %s == %zd (expected %zd)\\n\", #p, p, v); \\\n+\t  __builtin_abort (); \\\n+\t} \\\n+} while (0);\n+\n+struct trailing_array_1 {\n+    int a;\n+    int b;\n+    int c[4];\n+};\n+\n+struct trailing_array_2 {\n+    int a;\n+    int b;\n+    int c[1];\n+};\n+\n+struct trailing_array_3 {\n+    int a;\n+    int b;\n+    int c[0];\n+};\n+struct trailing_array_4 {\n+    int a;\n+    int b;\n+    int c[];\n+};\n+\n+void __attribute__((__noinline__)) stuff(\n+    struct trailing_array_1 *normal,\n+    struct trailing_array_2 *trailing_1,\n+    struct trailing_array_3 *trailing_0,\n+    struct trailing_array_4 *trailing_flex)\n+{\n+    expect(__builtin_object_size(normal->c, 1), 16);\n+    expect(__builtin_object_size(trailing_1->c, 1), -1);\n+    expect(__builtin_object_size(trailing_0->c, 1), -1);\n+    expect(__builtin_object_size(trailing_flex->c, 1), -1);\n+}\n+\n+int main(int argc, char *argv[])\n+{\n+    stuff((void *)argv[0], (void *)argv[0], (void *)argv[0], (void *)argv[0]);\n+\n+    return 0;\n+}"}, {"sha": "e0025aa9a7b53755eca6ebcaaa2cf97436e7008d", "filename": "gcc/testsuite/gcc.dg/pr101836_4.c", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9ad850e86b863c24f6f4f5acf08d49944cc7bbe/gcc%2Ftestsuite%2Fgcc.dg%2Fpr101836_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9ad850e86b863c24f6f4f5acf08d49944cc7bbe/gcc%2Ftestsuite%2Fgcc.dg%2Fpr101836_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr101836_4.c?ref=b9ad850e86b863c24f6f4f5acf08d49944cc7bbe", "patch": "@@ -0,0 +1,60 @@\n+/* when -fstrict-flex-arrays=0, all trailing arrays are treated as\n+   flexible arrays.  */\n+/* PR tree-optimization/101836 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fstrict-flex-arrays=0\" } */\n+\n+#include <stdio.h>\n+\n+#define expect(p, _v) do { \\\n+    size_t v = _v; \\\n+    if (p == v) \\\n+        printf(\"ok:  %s == %zd\\n\", #p, p); \\\n+    else \\\n+\t{  \\\n+          printf(\"WAT: %s == %zd (expected %zd)\\n\", #p, p, v); \\\n+\t  __builtin_abort (); \\\n+\t} \\\n+} while (0);\n+\n+struct trailing_array_1 {\n+    int a;\n+    int b;\n+    int c[4];\n+};\n+\n+struct trailing_array_2 {\n+    int a;\n+    int b;\n+    int c[1];\n+};\n+\n+struct trailing_array_3 {\n+    int a;\n+    int b;\n+    int c[0];\n+};\n+struct trailing_array_4 {\n+    int a;\n+    int b;\n+    int c[];\n+};\n+\n+void __attribute__((__noinline__)) stuff(\n+    struct trailing_array_1 *normal,\n+    struct trailing_array_2 *trailing_1,\n+    struct trailing_array_3 *trailing_0,\n+    struct trailing_array_4 *trailing_flex)\n+{\n+    expect(__builtin_object_size(normal->c, 1), -1);\n+    expect(__builtin_object_size(trailing_1->c, 1), -1);\n+    expect(__builtin_object_size(trailing_0->c, 1), -1);\n+    expect(__builtin_object_size(trailing_flex->c, 1), -1);\n+}\n+\n+int main(int argc, char *argv[])\n+{\n+    stuff((void *)argv[0], (void *)argv[0], (void *)argv[0], (void *)argv[0]);\n+\n+    return 0;\n+}"}, {"sha": "0ad8bbf693cefb304983aa0094b1955f4f45e95c", "filename": "gcc/testsuite/gcc.dg/pr101836_5.c", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9ad850e86b863c24f6f4f5acf08d49944cc7bbe/gcc%2Ftestsuite%2Fgcc.dg%2Fpr101836_5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9ad850e86b863c24f6f4f5acf08d49944cc7bbe/gcc%2Ftestsuite%2Fgcc.dg%2Fpr101836_5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr101836_5.c?ref=b9ad850e86b863c24f6f4f5acf08d49944cc7bbe", "patch": "@@ -0,0 +1,60 @@\n+/* -fno-strict-flex-arrays is aliased to -fstrict-flex-arrays=0,\n+   all trailing arrays are treated as flexible array.  */\n+/* PR tree-optimization/101836 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-strict-flex-arrays\" } */\n+\n+#include <stdio.h>\n+\n+#define expect(p, _v) do { \\\n+    size_t v = _v; \\\n+    if (p == v) \\\n+        printf(\"ok:  %s == %zd\\n\", #p, p); \\\n+    else \\\n+\t{  \\\n+          printf(\"WAT: %s == %zd (expected %zd)\\n\", #p, p, v); \\\n+\t  __builtin_abort (); \\\n+\t} \\\n+} while (0);\n+\n+struct trailing_array_1 {\n+    int a;\n+    int b;\n+    int c[4];\n+};\n+\n+struct trailing_array_2 {\n+    int a;\n+    int b;\n+    int c[1];\n+};\n+\n+struct trailing_array_3 {\n+    int a;\n+    int b;\n+    int c[0];\n+};\n+struct trailing_array_4 {\n+    int a;\n+    int b;\n+    int c[];\n+};\n+\n+void __attribute__((__noinline__)) stuff(\n+    struct trailing_array_1 *normal,\n+    struct trailing_array_2 *trailing_1,\n+    struct trailing_array_3 *trailing_0,\n+    struct trailing_array_4 *trailing_flex)\n+{\n+    expect(__builtin_object_size(normal->c, 1), -1);\n+    expect(__builtin_object_size(trailing_1->c, 1), -1);\n+    expect(__builtin_object_size(trailing_0->c, 1), -1);\n+    expect(__builtin_object_size(trailing_flex->c, 1), -1);\n+}\n+\n+int main(int argc, char *argv[])\n+{\n+    stuff((void *)argv[0], (void *)argv[0], (void *)argv[0], (void *)argv[0]);\n+\n+    return 0;\n+}"}, {"sha": "2b80c2365f3e517a4de45e92c4f770ab134eccf7", "filename": "gcc/testsuite/gcc.dg/strict-flex-array-2.c", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9ad850e86b863c24f6f4f5acf08d49944cc7bbe/gcc%2Ftestsuite%2Fgcc.dg%2Fstrict-flex-array-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9ad850e86b863c24f6f4f5acf08d49944cc7bbe/gcc%2Ftestsuite%2Fgcc.dg%2Fstrict-flex-array-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstrict-flex-array-2.c?ref=b9ad850e86b863c24f6f4f5acf08d49944cc7bbe", "patch": "@@ -0,0 +1,60 @@\n+/* test the combination of attribute strict_flex_array and option\n+   -fstrict-flex-arrays: when both attribute and option specified,\n+   attribute will have higher priority.  */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fstrict-flex-arrays=3\" } */\n+\n+#include <stdio.h>\n+\n+#define expect(p, _v) do { \\\n+    size_t v = _v; \\\n+    if (p == v) \\\n+        printf(\"ok:  %s == %zd\\n\", #p, p); \\\n+    else \\\n+\t{  \\\n+          printf(\"WAT: %s == %zd (expected %zd)\\n\", #p, p, v); \\\n+\t  __builtin_abort (); \\\n+\t} \\\n+} while (0);\n+\n+struct trailing_array_1 {\n+    int a;\n+    int b;\n+    int c[4] __attribute__ ((strict_flex_array (0)));\n+};\n+\n+struct trailing_array_2 {\n+    int a;\n+    int b;\n+    int c[1] __attribute__ ((strict_flex_array (1)));\n+};\n+\n+struct trailing_array_3 {\n+    int a;\n+    int b;\n+    int c[0] __attribute__ ((strict_flex_array (2)));\n+};\n+struct trailing_array_4 {\n+    int a;\n+    int b;\n+    int c[];\n+};\n+\n+void __attribute__((__noinline__)) stuff(\n+    struct trailing_array_1 *normal,\n+    struct trailing_array_2 *trailing_1,\n+    struct trailing_array_3 *trailing_0,\n+    struct trailing_array_4 *trailing_flex)\n+{\n+    expect(__builtin_object_size(normal->c, 1), -1);\n+    expect(__builtin_object_size(trailing_1->c, 1), -1);\n+    expect(__builtin_object_size(trailing_0->c, 1), -1);\n+    expect(__builtin_object_size(trailing_flex->c, 1), -1);\n+}\n+\n+int main(int argc, char *argv[])\n+{\n+    stuff((void *)argv[0], (void *)argv[0], (void *)argv[0], (void *)argv[0]);\n+\n+    return 0;\n+}"}, {"sha": "602f99dc79aee674eb03f9db39fce222756a6903", "filename": "gcc/testsuite/gcc.dg/strict-flex-array-3.c", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9ad850e86b863c24f6f4f5acf08d49944cc7bbe/gcc%2Ftestsuite%2Fgcc.dg%2Fstrict-flex-array-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9ad850e86b863c24f6f4f5acf08d49944cc7bbe/gcc%2Ftestsuite%2Fgcc.dg%2Fstrict-flex-array-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstrict-flex-array-3.c?ref=b9ad850e86b863c24f6f4f5acf08d49944cc7bbe", "patch": "@@ -0,0 +1,60 @@\n+/* test the combination of attribute strict_flex_array and option\n+   -fstrict-flex-arrays: when both attribute and option specified,\n+   attribute will have higher priority.  */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fstrict-flex-arrays=0\" } */\n+\n+#include <stdio.h>\n+\n+#define expect(p, _v) do { \\\n+    size_t v = _v; \\\n+    if (p == v) \\\n+        printf(\"ok:  %s == %zd\\n\", #p, p); \\\n+    else \\\n+\t{  \\\n+          printf(\"WAT: %s == %zd (expected %zd)\\n\", #p, p, v); \\\n+\t  __builtin_abort (); \\\n+\t} \\\n+} while (0);\n+\n+struct trailing_array_1 {\n+    int a;\n+    int b;\n+    int c[4] __attribute__ ((strict_flex_array (1)));\n+};\n+\n+struct trailing_array_2 {\n+    int a;\n+    int b;\n+    int c[1] __attribute__ ((strict_flex_array (2)));\n+};\n+\n+struct trailing_array_3 {\n+    int a;\n+    int b;\n+    int c[0] __attribute__ ((strict_flex_array (3)));\n+};\n+struct trailing_array_4 {\n+    int a;\n+    int b;\n+    int c[];\n+};\n+\n+void __attribute__((__noinline__)) stuff(\n+    struct trailing_array_1 *normal,\n+    struct trailing_array_2 *trailing_1,\n+    struct trailing_array_3 *trailing_0,\n+    struct trailing_array_4 *trailing_flex)\n+{\n+    expect(__builtin_object_size(normal->c, 1), 16);\n+    expect(__builtin_object_size(trailing_1->c, 1), 4);\n+    expect(__builtin_object_size(trailing_0->c, 1), 0);\n+    expect(__builtin_object_size(trailing_flex->c, 1), -1);\n+}\n+\n+int main(int argc, char *argv[])\n+{\n+    stuff((void *)argv[0], (void *)argv[0], (void *)argv[0], (void *)argv[0]);\n+\n+    return 0;\n+}"}, {"sha": "1f04cb80fd0a3dfea17687c8e0de1ae892955145", "filename": "gcc/tree-object-size.cc", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9ad850e86b863c24f6f4f5acf08d49944cc7bbe/gcc%2Ftree-object-size.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9ad850e86b863c24f6f4f5acf08d49944cc7bbe/gcc%2Ftree-object-size.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-object-size.cc?ref=b9ad850e86b863c24f6f4f5acf08d49944cc7bbe", "patch": "@@ -604,9 +604,9 @@ addr_object_size (struct object_size_info *osi, const_tree ptr,\n \t  else if (var != pt_var && TREE_CODE (pt_var) == MEM_REF)\n \t    {\n \t      tree v = var;\n-\t      /* For &X->fld, compute object size only if fld isn't the last\n-\t\t field, as struct { int i; char c[1]; } is often used instead\n-\t\t of flexible array member.  */\n+\t      /* For &X->fld, compute object size if fld isn't a flexible array\n+\t\t member.  */\n+\t      bool is_flexible_array_mem_ref = false;\n \t      while (v && v != pt_var)\n \t\tswitch (TREE_CODE (v))\n \t\t  {\n@@ -633,6 +633,7 @@ addr_object_size (struct object_size_info *osi, const_tree ptr,\n \t\t\tv = NULL_TREE;\n \t\t\tbreak;\n \t\t      }\n+\t\t    is_flexible_array_mem_ref = array_at_struct_end_p (v);\n \t\t    while (v != pt_var && TREE_CODE (v) == COMPONENT_REF)\n \t\t      if (TREE_CODE (TREE_TYPE (TREE_OPERAND (v, 0)))\n \t\t\t  != UNION_TYPE\n@@ -645,12 +646,9 @@ addr_object_size (struct object_size_info *osi, const_tree ptr,\n \t\t\t&& TREE_CODE (TREE_TYPE (TREE_OPERAND (v, 0)))\n \t\t\t   == RECORD_TYPE)\n \t\t      {\n-\t\t\ttree fld_chain = DECL_CHAIN (TREE_OPERAND (v, 1));\n-\t\t\tfor (; fld_chain; fld_chain = DECL_CHAIN (fld_chain))\n-\t\t\t  if (TREE_CODE (fld_chain) == FIELD_DECL)\n-\t\t\t    break;\n-\n-\t\t\tif (fld_chain)\n+\t\t\t/* compute object size only if v is not a\n+\t\t\t   flexible array member.  */\n+\t\t\tif (!is_flexible_array_mem_ref)\n \t\t\t  {\n \t\t\t    v = NULL_TREE;\n \t\t\t    break;"}]}