{"sha": "ca4d381662c37733b2a1d49d6c8f5fcfc1348f3d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2E0ZDM4MTY2MmMzNzczM2IyYTFkNDlkNmM4ZjVmY2ZjMTM0OGYzZA==", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-06-22T21:21:32Z"}, "committer": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-06-23T14:24:30Z"}, "message": "Adjust on_entry cache to indicate if the value was set properly.\n\n\t* gimple-range-cache.cc (class ssa_block_ranges): Adjust prototype.\n\t(sbr_vector::set_bb_range): Return true.\n\t(class sbr_sparse_bitmap): Adjust.\n\t(sbr_sparse_bitmap::set_bb_range): Return value.\n\t(block_range_cache::set_bb_range): Return value.\n\t(ranger_cache::propagate_cache): Use return value to print msg.\n\t* gimple-range-cache.h (class block_range_cache): Adjust.", "tree": {"sha": "e3195ffe8265eb1cb184f48da0c1e8627aa2690c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3195ffe8265eb1cb184f48da0c1e8627aa2690c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca4d381662c37733b2a1d49d6c8f5fcfc1348f3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca4d381662c37733b2a1d49d6c8f5fcfc1348f3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca4d381662c37733b2a1d49d6c8f5fcfc1348f3d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca4d381662c37733b2a1d49d6c8f5fcfc1348f3d/comments", "author": null, "committer": null, "parents": [{"sha": "9d674b735f22aa9cf85629851783ce38f25087b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d674b735f22aa9cf85629851783ce38f25087b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d674b735f22aa9cf85629851783ce38f25087b5"}], "stats": {"total": 46, "additions": 26, "deletions": 20}, "files": [{"sha": "bdecd212691053fa53c487861f39201bf4b78b02", "filename": "gcc/gimple-range-cache.cc", "status": "modified", "additions": 25, "deletions": 19, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca4d381662c37733b2a1d49d6c8f5fcfc1348f3d/gcc%2Fgimple-range-cache.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca4d381662c37733b2a1d49d6c8f5fcfc1348f3d/gcc%2Fgimple-range-cache.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-cache.cc?ref=ca4d381662c37733b2a1d49d6c8f5fcfc1348f3d", "patch": "@@ -132,7 +132,7 @@ non_null_ref::process_name (tree name)\n class ssa_block_ranges\n {\n public:\n-  virtual void set_bb_range (const basic_block bb, const irange &r) = 0;\n+  virtual bool set_bb_range (const basic_block bb, const irange &r) = 0;\n   virtual bool get_bb_range (irange &r, const basic_block bb) = 0;\n   virtual bool bb_range_p (const basic_block bb) = 0;\n \n@@ -165,7 +165,7 @@ class sbr_vector : public ssa_block_ranges\n public:\n   sbr_vector (tree t, irange_allocator *allocator);\n \n-  virtual void set_bb_range (const basic_block bb, const irange &r) OVERRIDE;\n+  virtual bool set_bb_range (const basic_block bb, const irange &r) OVERRIDE;\n   virtual bool get_bb_range (irange &r, const basic_block bb) OVERRIDE;\n   virtual bool bb_range_p (const basic_block bb) OVERRIDE;\n protected:\n@@ -196,7 +196,7 @@ sbr_vector::sbr_vector (tree t, irange_allocator *allocator)\n \n // Set the range for block BB to be R.\n \n-void\n+bool\n sbr_vector::set_bb_range (const basic_block bb, const irange &r)\n {\n   irange *m;\n@@ -208,6 +208,7 @@ sbr_vector::set_bb_range (const basic_block bb, const irange &r)\n   else\n     m = m_irange_allocator->allocate (r);\n   m_tab[bb->index] = m;\n+  return true;\n }\n \n // Return the range associated with block BB in R.  Return false if\n@@ -252,7 +253,7 @@ class sbr_sparse_bitmap : public ssa_block_ranges\n {\n public:\n   sbr_sparse_bitmap (tree t, irange_allocator *allocator, bitmap_obstack *bm);\n-  virtual void set_bb_range (const basic_block bb, const irange &r) OVERRIDE;\n+  virtual bool set_bb_range (const basic_block bb, const irange &r) OVERRIDE;\n   virtual bool get_bb_range (irange &r, const basic_block bb) OVERRIDE;\n   virtual bool bb_range_p (const basic_block bb) OVERRIDE;\n private:\n@@ -312,13 +313,13 @@ sbr_sparse_bitmap::bitmap_get_quad (const_bitmap head, int quad)\n \n // Set the range on entry to basic block BB to R.\n \n-void\n+bool\n sbr_sparse_bitmap::set_bb_range (const basic_block bb, const irange &r)\n {\n   if (r.undefined_p ())\n     {\n       bitmap_set_quad (bitvec, bb->index, SBR_UNDEF);\n-      return;\n+      return true;\n     }\n \n   // Loop thru the values to see if R is already present.\n@@ -328,11 +329,11 @@ sbr_sparse_bitmap::set_bb_range (const basic_block bb, const irange &r)\n \tif (!m_range[x])\n \t  m_range[x] = m_irange_allocator->allocate (r);\n \tbitmap_set_quad (bitvec, bb->index, x + 1);\n-\treturn;\n+\treturn true;\n       }\n   // All values are taken, default to VARYING.\n   bitmap_set_quad (bitvec, bb->index, SBR_VARYING);\n-  return;\n+  return false;\n }\n \n // Return the range associated with block BB in R.  Return false if\n@@ -387,7 +388,7 @@ block_range_cache::~block_range_cache ()\n // Set the range for NAME on entry to block BB to R.\n // If it has not been accessed yet, allocate it first.\n \n-void\n+bool\n block_range_cache::set_bb_range (tree name, const basic_block bb,\n \t\t\t\t const irange &r)\n {\n@@ -413,7 +414,7 @@ block_range_cache::set_bb_range (tree name, const basic_block bb,\n \t\t\t\t\t\tm_irange_allocator);\n \t}\n     }\n-  m_ssa_ranges[v]->set_bb_range (bb, r);\n+  return m_ssa_ranges[v]->set_bb_range (bb, r);\n }\n \n \n@@ -1061,13 +1062,18 @@ ranger_cache::propagate_cache (tree name)\n       // If the range on entry has changed, update it.\n       if (new_range != current_range)\n \t{\n+\t  bool ok_p = m_on_entry.set_bb_range (name, bb, new_range);\n \t  if (DEBUG_RANGE_CACHE) \n \t    {\n-\t      fprintf (dump_file, \"      Updating range to \");\n-\t      new_range.dump (dump_file);\n+\t      if (!ok_p)\n+\t\tfprintf (dump_file, \"     Cache failure to store value.\");\n+\t      else\n+\t\t{\n+\t\t  fprintf (dump_file, \"      Updating range to \");\n+\t\t  new_range.dump (dump_file);\n+\t\t}\n \t      fprintf (dump_file, \"\\n      Updating blocks :\");\n \t    }\n-\t  m_on_entry.set_bb_range (name, bb, new_range);\n \t  // Mark each successor that has a range to re-check its range\n \t  FOR_EACH_EDGE (e, ei, bb->succs)\n \t    if (m_on_entry.bb_range_p (name, e->dest))\n@@ -1080,12 +1086,12 @@ ranger_cache::propagate_cache (tree name)\n \t    fprintf (dump_file, \"\\n\");\n \t}\n     }\n-    if (DEBUG_RANGE_CACHE)\n-      {\n-\tfprintf (dump_file, \"DONE visiting blocks for \");\n-\tprint_generic_expr (dump_file, name, TDF_SLIM);\n-\tfprintf (dump_file, \"\\n\");\n-      }\n+  if (DEBUG_RANGE_CACHE)\n+    {\n+      fprintf (dump_file, \"DONE visiting blocks for \");\n+      print_generic_expr (dump_file, name, TDF_SLIM);\n+      fprintf (dump_file, \"\\n\");\n+    }\n }\n \n // Check to see if an update to the value for NAME in BB has any effect"}, {"sha": "1d2e1b9920006dac51d87958fbc783b4105f2d88", "filename": "gcc/gimple-range-cache.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca4d381662c37733b2a1d49d6c8f5fcfc1348f3d/gcc%2Fgimple-range-cache.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca4d381662c37733b2a1d49d6c8f5fcfc1348f3d/gcc%2Fgimple-range-cache.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-cache.h?ref=ca4d381662c37733b2a1d49d6c8f5fcfc1348f3d", "patch": "@@ -50,7 +50,7 @@ class block_range_cache\n   block_range_cache ();\n   ~block_range_cache ();\n \n-  void set_bb_range (tree name, const basic_block bb, const irange &r);\n+  bool set_bb_range (tree name, const basic_block bb, const irange &r);\n   bool get_bb_range (irange &r, tree name, const basic_block bb);\n   bool bb_range_p (tree name, const basic_block bb);\n "}]}