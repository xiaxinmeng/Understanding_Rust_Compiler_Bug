{"sha": "8ca173309f26e82badc456eeeff6fe20a63676c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGNhMTczMzA5ZjI2ZTgyYmFkYzQ1NmVlZWZmNmZlMjBhNjM2NzZjMQ==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@cygnus.com", "date": "2000-04-21T21:14:13Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2000-04-21T21:14:13Z"}, "message": "mn10300.md (movdi, movdf): Do not use `movu' when the operand is not constant.\n\n* config/mn10300/mn10300.md (movdi, movdf): Do not use `movu' when\nthe operand is not constant.\n\nFrom-SVN: r33321", "tree": {"sha": "344cd32d33320e2a693da4c0f71cf4911d78334a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/344cd32d33320e2a693da4c0f71cf4911d78334a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ca173309f26e82badc456eeeff6fe20a63676c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ca173309f26e82badc456eeeff6fe20a63676c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ca173309f26e82badc456eeeff6fe20a63676c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ca173309f26e82badc456eeeff6fe20a63676c1/comments", "author": null, "committer": null, "parents": [{"sha": "aad2919faeeb4582f3b0dd3299f19e40c863950a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aad2919faeeb4582f3b0dd3299f19e40c863950a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aad2919faeeb4582f3b0dd3299f19e40c863950a"}], "stats": {"total": 29, "additions": 21, "deletions": 8}, "files": [{"sha": "46971371f6e78dc8e106356ddf86a3426f3528c0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ca173309f26e82badc456eeeff6fe20a63676c1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ca173309f26e82badc456eeeff6fe20a63676c1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8ca173309f26e82badc456eeeff6fe20a63676c1", "patch": "@@ -1,3 +1,8 @@\n+Fri Apr 21 18:11:56 2000  Alexandre Oliva  <aoliva@cygnus.com>\n+\n+\t* config/mn10300/mn10300.md (movdi, movdf): Do not use `movu' when\n+\tthe operand is not constant.\n+\n Fri Apr 21 14:58:29 2000  Denis Chertykov  <denisc@overta.ru>\n \n \t* reload.c (find_equiv_reg): Checks all valueno and regno regs"}, {"sha": "56064378679fc732984f23006d3be35c64a3941d", "filename": "gcc/config/mn10300/mn10300.md", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ca173309f26e82badc456eeeff6fe20a63676c1/gcc%2Fconfig%2Fmn10300%2Fmn10300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ca173309f26e82badc456eeeff6fe20a63676c1/gcc%2Fconfig%2Fmn10300%2Fmn10300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.md?ref=8ca173309f26e82badc456eeeff6fe20a63676c1", "patch": "@@ -499,8 +499,10 @@\n \t\telse\n \t\t  output_asm_insn (\\\"mov %L1,%L0\\\", operands);\n \t      }\n-\t    else if ((REGNO_REG_CLASS (true_regnum (operands[0]))\n-\t\t      == EXTENDED_REGS)\n+\t    else if ((GET_CODE (operands[1]) == CONST_INT\n+\t\t      || GET_CODE (operands[1]) == CONST_DOUBLE)\n+\t\t     && (REGNO_REG_CLASS (true_regnum (operands[0]))\n+\t\t\t == EXTENDED_REGS)\n \t\t     && (((val[0] & 0x80) && ! (val[0] & 0xffffff00))\n \t\t\t || ((val[0] & 0x800000) && ! (val[0] & 0xff000000))))\n \t      output_asm_insn (\\\"movu %1,%0\\\", operands);\n@@ -520,8 +522,10 @@\n \t\t      || GET_CODE (operands[1]) == CONST_DOUBLE)\n \t\t     && val[0] == val[1])\n \t      output_asm_insn (\\\"mov %L0,%H0\\\", operands);\n-\t    else if ((REGNO_REG_CLASS (true_regnum (operands[0]))\n-\t\t      == EXTENDED_REGS)\n+\t    else if ((GET_CODE (operands[1]) == CONST_INT\n+\t\t      || GET_CODE (operands[1]) == CONST_DOUBLE)\n+\t\t     && (REGNO_REG_CLASS (true_regnum (operands[0]))\n+\t\t\t == EXTENDED_REGS)\n \t\t     && (((val[1] & 0x80) && ! (val[1] & 0xffffff00))\n \t\t\t || ((val[1] & 0x800000) && ! (val[1] & 0xff000000))))\n \t      output_asm_insn (\\\"movu %1,%0\\\", operands);\n@@ -643,8 +647,10 @@\n \t\telse\n \t\t  output_asm_insn (\\\"mov %L1,%L0\\\", operands);\n \t      }\n-\t    else if ((REGNO_REG_CLASS (true_regnum (operands[0]))\n-\t\t      == EXTENDED_REGS)\n+\t    else if ((GET_CODE (operands[1]) == CONST_INT\n+\t\t      || GET_CODE (operands[1]) == CONST_DOUBLE)\n+\t\t     && (REGNO_REG_CLASS (true_regnum (operands[0]))\n+\t\t\t == EXTENDED_REGS)\n \t\t     && (((val[0] & 0x80) && ! (val[0] & 0xffffff00))\n \t\t\t || ((val[0] & 0x800000) && ! (val[0] & 0xff000000))))\n \t      output_asm_insn (\\\"movu %1,%0\\\", operands);\n@@ -664,8 +670,10 @@\n \t\t      || GET_CODE (operands[1]) == CONST_DOUBLE)\n \t\t     && val[0] == val[1])\n \t      output_asm_insn (\\\"mov %L0,%H0\\\", operands);\n-\t    else if ((REGNO_REG_CLASS (true_regnum (operands[0]))\n-\t\t      == EXTENDED_REGS)\n+\t    else if ((GET_CODE (operands[1]) == CONST_INT\n+\t\t      || GET_CODE (operands[1]) == CONST_DOUBLE)\n+\t\t     && (REGNO_REG_CLASS (true_regnum (operands[0]))\n+\t\t\t == EXTENDED_REGS)\n \t\t     && (((val[1] & 0x80) && ! (val[1] & 0xffffff00))\n \t\t\t || ((val[1] & 0x800000) && ! (val[1] & 0xff000000))))\n \t      output_asm_insn (\\\"movu %1,%0\\\", operands);"}]}