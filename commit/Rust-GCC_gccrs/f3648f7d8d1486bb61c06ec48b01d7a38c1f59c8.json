{"sha": "f3648f7d8d1486bb61c06ec48b01d7a38c1f59c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjM2NDhmN2Q4ZDE0ODZiYjYxYzA2ZWM0OGIwMWQ3YTM4YzFmNTljOA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2017-09-04T15:11:42Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2017-09-04T15:11:42Z"}, "message": "* config/i386/i386-protos.h (ix86_tls_address_pattern_p) New prototype.\n\n\t(ix86_rewrite_tls_address): Ditto.\n\t* config/i386/i386.c (ix86_tls_address_pattern_p) New function.\n\t(ix86_rewrite_tls_address_1): Ditto.\n\t(ix86_rewrite_tls_address): Ditto.\n\t* config/i386/predicates.md (tls_address_pattern): New predicate.\n\t* config/i386/i386.md (TLS address splitter): New splitter.\n\nFrom-SVN: r251662", "tree": {"sha": "04d4ec21fbe0210d7905984c5a4efd636ebef503", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/04d4ec21fbe0210d7905984c5a4efd636ebef503"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3648f7d8d1486bb61c06ec48b01d7a38c1f59c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3648f7d8d1486bb61c06ec48b01d7a38c1f59c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3648f7d8d1486bb61c06ec48b01d7a38c1f59c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3648f7d8d1486bb61c06ec48b01d7a38c1f59c8/comments", "author": null, "committer": null, "parents": [{"sha": "11a82e2597c54016345beb99e5339e37851c7d59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11a82e2597c54016345beb99e5339e37851c7d59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11a82e2597c54016345beb99e5339e37851c7d59"}], "stats": {"total": 114, "additions": 110, "deletions": 4}, "files": [{"sha": "2ae4e776d90645ff9272cfab117da79eda7edf40", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3648f7d8d1486bb61c06ec48b01d7a38c1f59c8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3648f7d8d1486bb61c06ec48b01d7a38c1f59c8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f3648f7d8d1486bb61c06ec48b01d7a38c1f59c8", "patch": "@@ -1,3 +1,13 @@\n+2017-09-04  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386-protos.h (ix86_tls_address_pattern_p) New prototype.\n+\t(ix86_rewrite_tls_address): Ditto.\n+\t* config/i386/i386.c (ix86_tls_address_pattern_p) New function.\n+\t(ix86_rewrite_tls_address_1): Ditto.\n+\t(ix86_rewrite_tls_address): Ditto.\n+\t* config/i386/predicates.md (tls_address_pattern): New predicate.\n+\t* config/i386/i386.md (TLS address splitter): New splitter.\n+\n 2017-09-04  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/82084\n@@ -2237,8 +2247,8 @@\n \t* tree-ssa-loop-manip.c (canonicalize_loop_ivs): Likewise.\n \n 2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n-            Alan Hayward  <alan.hayward@arm.com>\n-            David Sherwood  <david.sherwood@arm.com>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n \n \t* machmode.h (opt_mode::else_blk): New function.\n \t(int_mode_for_mode): Declare.\n@@ -2539,8 +2549,8 @@\n \tonce.  Use get_narrowest_mode instead of GET_CLASS_NARROWEST_MODE.\n \n 2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n-            Alan Hayward  <alan.hayward@arm.com>\n-            David Sherwood  <david.sherwood@arm.com>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n \n \t* machmode.h (mode_traits): New structure.\n \t(get_narrowest_mode): New function."}, {"sha": "4c57615093bf284c2efca2e4b0e5a2490ccff18d", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3648f7d8d1486bb61c06ec48b01d7a38c1f59c8/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3648f7d8d1486bb61c06ec48b01d7a38c1f59c8/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=f3648f7d8d1486bb61c06ec48b01d7a38c1f59c8", "patch": "@@ -225,6 +225,8 @@ extern unsigned int ix86_get_callcvt (const_tree);\n #endif\n \n extern rtx ix86_tls_module_base (void);\n+extern bool ix86_tls_address_pattern_p (rtx);\n+extern rtx ix86_rewrite_tls_address (rtx);\n \n extern void ix86_expand_vector_init (bool, rtx, rtx);\n extern void ix86_expand_vector_set (bool, rtx, rtx, int);"}, {"sha": "6fdc9fd54b1d6a9e77e1070887c0b2763acec1f5", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3648f7d8d1486bb61c06ec48b01d7a38c1f59c8/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3648f7d8d1486bb61c06ec48b01d7a38c1f59c8/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=f3648f7d8d1486bb61c06ec48b01d7a38c1f59c8", "patch": "@@ -17649,6 +17649,89 @@ legitimize_tls_address (rtx x, enum tls_model model, bool for_mov)\n   return dest;\n }\n \n+/* Return true if OP refers to a TLS address.  */\n+bool\n+ix86_tls_address_pattern_p (rtx op)\n+{\n+  subrtx_var_iterator::array_type array;\n+  FOR_EACH_SUBRTX_VAR (iter, array, op, ALL)\n+    {\n+      rtx op = *iter;\n+      if (MEM_P (op))\n+\t{\n+\t  rtx *x = &XEXP (op, 0);\n+\t  while (GET_CODE (*x) == PLUS)\n+\t    {\n+\t      int i;\n+\t      for (i = 0; i < 2; i++)\n+\t\t{\n+\t\t  rtx u = XEXP (*x, i);\n+\t\t  if (GET_CODE (u) == ZERO_EXTEND)\n+\t\t    u = XEXP (u, 0);\n+\t\t  if (GET_CODE (u) == UNSPEC\n+\t\t      && XINT (u, 1) == UNSPEC_TP)\n+\t\t    return true;\n+\t\t}\n+\t      x = &XEXP (*x, 0);\n+\t    }\n+\n+\t  iter.skip_subrtxes ();\n+\t}\n+    }\n+\n+  return false;\n+}\n+\n+/* Rewrite *LOC so that it refers to a default TLS address space.  */\n+void\n+ix86_rewrite_tls_address_1 (rtx *loc)\n+{\n+  subrtx_ptr_iterator::array_type array;\n+  FOR_EACH_SUBRTX_PTR (iter, array, loc, ALL)\n+    {\n+      rtx *loc = *iter;\n+      if (MEM_P (*loc))\n+\t{\n+\t  rtx addr = XEXP (*loc, 0);\n+\t  rtx *x = &addr;\n+\t  while (GET_CODE (*x) == PLUS)\n+\t    {\n+\t      int i;\n+\t      for (i = 0; i < 2; i++)\n+\t\t{\n+\t\t  rtx u = XEXP (*x, i);\n+\t\t  if (GET_CODE (u) == ZERO_EXTEND)\n+\t\t    u = XEXP (u, 0);\n+\t\t  if (GET_CODE (u) == UNSPEC\n+\t\t      && XINT (u, 1) == UNSPEC_TP)\n+\t\t    {\n+\t\t      addr_space_t as = DEFAULT_TLS_SEG_REG;\n+\n+\t\t      *x = XEXP (*x, 1 - i);\n+\n+\t\t      *loc = replace_equiv_address_nv (*loc, addr, true);\n+\t\t      set_mem_addr_space (*loc, as);\n+\t\t      return;\n+\t\t    }\n+\t\t}\n+\t      x = &XEXP (*x, 0);\n+\t    }\n+\n+\t  iter.skip_subrtxes ();\n+\t}\n+    }\n+}\n+\n+/* Rewrite instruction pattern involvning TLS address\n+   so that it refers to a default TLS address space.  */\n+rtx\n+ix86_rewrite_tls_address (rtx pattern)\n+{\n+  pattern = copy_insn (pattern);\n+  ix86_rewrite_tls_address_1 (&pattern);\n+  return pattern;\n+}\n+\n /* Create or return the unique __imp_DECL dllimport symbol corresponding\n    to symbol DECL if BEIMPORT is true.  Otherwise create or return the\n    unique refptr-DECL symbol corresponding to symbol DECL.  */"}, {"sha": "bf034795c8b1e71c7a1695a8c35afb6eae59c243", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3648f7d8d1486bb61c06ec48b01d7a38c1f59c8/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3648f7d8d1486bb61c06ec48b01d7a38c1f59c8/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=f3648f7d8d1486bb61c06ec48b01d7a38c1f59c8", "patch": "@@ -14143,6 +14143,13 @@\n   operands[4] = can_create_pseudo_p () ? gen_reg_rtx (Pmode) : operands[0];\n   emit_insn (gen_tls_dynamic_gnu2_64 (operands[4], operands[1]));\n })\n+\n+(define_split\n+  [(match_operand 0 \"tls_address_pattern\")]\n+  \"TARGET_TLS_DIRECT_SEG_REFS\"\n+  [(match_dup 0)]\n+  \"operands[0] = ix86_rewrite_tls_address (operands[0]);\")\n+\n \f\n ;; These patterns match the binary 387 instructions for addM3, subM3,\n ;; mulM3 and divM3.  There are three patterns for each of DFmode and"}, {"sha": "f7854e942e551ea8957d55205528c74675b1fd6b", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3648f7d8d1486bb61c06ec48b01d7a38c1f59c8/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3648f7d8d1486bb61c06ec48b01d7a38c1f59c8/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=f3648f7d8d1486bb61c06ec48b01d7a38c1f59c8", "patch": "@@ -567,6 +567,10 @@\n   (and (match_code \"symbol_ref\")\n        (match_test \"op == ix86_tls_module_base ()\")))\n \n+(define_predicate \"tls_address_pattern\"\n+  (and (match_code \"set,parallel,unspec,unspec_volatile\")\n+       (match_test \"ix86_tls_address_pattern_p (op)\")))\n+\n ;; Test for a pc-relative call operand\n (define_predicate \"constant_call_address_operand\"\n   (match_code \"symbol_ref\")"}]}