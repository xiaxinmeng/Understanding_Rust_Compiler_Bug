{"sha": "688359a27d835bbdab554fdf5eb207f1bd678371", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njg4MzU5YTI3ZDgzNWJiZGFiNTU0ZmRmNWViMjA3ZjFiZDY3ODM3MQ==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-06-18T00:16:58Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-06-18T00:16:58Z"}, "message": "Daily bump.", "tree": {"sha": "9f6824b35c4f170526f5f762a636a3e6cd3ab9dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9f6824b35c4f170526f5f762a636a3e6cd3ab9dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/688359a27d835bbdab554fdf5eb207f1bd678371", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/688359a27d835bbdab554fdf5eb207f1bd678371", "html_url": "https://github.com/Rust-GCC/gccrs/commit/688359a27d835bbdab554fdf5eb207f1bd678371", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/688359a27d835bbdab554fdf5eb207f1bd678371/comments", "author": null, "committer": null, "parents": [{"sha": "b376b1ef38971b84975ad1540bf5d2ae0b924e76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b376b1ef38971b84975ad1540bf5d2ae0b924e76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b376b1ef38971b84975ad1540bf5d2ae0b924e76"}], "stats": {"total": 707, "additions": 706, "deletions": 1}, "files": [{"sha": "fba4c8400f855bcb058fe1d480b9ed2f499bdbc1", "filename": "ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/688359a27d835bbdab554fdf5eb207f1bd678371/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/688359a27d835bbdab554fdf5eb207f1bd678371/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=688359a27d835bbdab554fdf5eb207f1bd678371", "patch": "@@ -1,3 +1,8 @@\n+2021-06-17  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* MAINTAINERS (Various Maintainers): Add Andrew and myself\n+\tas *vrp and ranger maintainers.\n+\n 2021-06-05  Jeff Law  <jeffreyalaw@gmail.com>\n \n \t* MAINTAINERS: Adjust my entry in the DCO section so that it does"}, {"sha": "6d5a2e486ebd51293077cd79dde686fe18ceb06e", "filename": "contrib/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/688359a27d835bbdab554fdf5eb207f1bd678371/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/688359a27d835bbdab554fdf5eb207f1bd678371/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=688359a27d835bbdab554fdf5eb207f1bd678371", "patch": "@@ -1,3 +1,8 @@\n+2021-06-17  Jason Merrill  <jason@redhat.com>\n+\n+\t* mklog.py: Add an initial component: [PRnnnnn] line when\n+\twe have a PR.\n+\n 2021-06-13  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* gcc-changelog/git_commit.py (pr_regex): Add ?P<pr> for group('pr')."}, {"sha": "6cd9445ec04233466a5fc804faac5d59f5d30d55", "filename": "gcc/ChangeLog", "status": "modified", "additions": 173, "deletions": 0, "changes": 173, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/688359a27d835bbdab554fdf5eb207f1bd678371/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/688359a27d835bbdab554fdf5eb207f1bd678371/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=688359a27d835bbdab554fdf5eb207f1bd678371", "patch": "@@ -1,3 +1,176 @@\n+2021-06-17  Aaron Sawdey  <acsawdey@linux.ibm.com>\n+\n+\t* config/rs6000/genfusion.pl (gen_logical_addsubf): Add\n+\tearlyclobber to alts 0/1.\n+\t(gen_addadd): Add earlyclobber to alts 0/1.\n+\t* config/rs6000/fusion.md: Regenerate file.\n+\n+2021-06-17  Trevor Saunders  <tbsaunde@tbsaunde.org>\n+\n+\t* cfgloopanal.c (get_loop_hot_path): Make path an auto_vec.\n+\n+2021-06-17  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gimple-range-cache.cc: Comment cleanups.\n+\t* gimple-range-gori.cc: Comment cleanups.\n+\t* gimple-range.cc: Comment/spacing cleanups\n+\t* value-range.h: Comment cleanups.\n+\n+2021-06-17  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/100704\n+\t* calls.c (expand_call): Replace PUSH_ARGS with\n+\ttargetm.calls.push_argument (0).\n+\t(emit_library_call_value_1): Likewise.\n+\t* defaults.h (PUSH_ARGS): Removed.\n+\t(PUSH_ARGS_REVERSED): Replace PUSH_ARGS with\n+\ttargetm.calls.push_argument (0).\n+\t* expr.c (block_move_libcall_safe_for_call_parm): Likewise.\n+\t(emit_push_insn): Pass the number bytes to push to\n+\ttargetm.calls.push_argument and pass 0 if ARGS_ADDR is 0.\n+\t* hooks.c (hook_bool_uint_true): New.\n+\t* hooks.h (hook_bool_uint_true): Likewise.\n+\t* rtlanal.c (nonzero_bits1): Replace PUSH_ARGS with\n+\ttargetm.calls.push_argument (0).\n+\t* target.def (push_argument): Add a targetm.calls hook.\n+\t* targhooks.c (default_push_argument): New.\n+\t* targhooks.h (default_push_argument): Likewise.\n+\t* config/bpf/bpf.h (PUSH_ARGS): Removed.\n+\t* config/cr16/cr16.c (TARGET_PUSH_ARGUMENT): New.\n+\t* config/cr16/cr16.h (PUSH_ARGS): Removed.\n+\t* config/i386/i386.c (ix86_push_argument): New.\n+\t(TARGET_PUSH_ARGUMENT): Likewise.\n+\t* config/i386/i386.h (PUSH_ARGS): Removed.\n+\t* config/m32c/m32c.c (TARGET_PUSH_ARGUMENT): New.\n+\t* config/m32c/m32c.h (PUSH_ARGS): Removed.\n+\t* config/nios2/nios2.h (PUSH_ARGS): Likewise.\n+\t* config/pru/pru.h (PUSH_ARGS): Likewise.\n+\t* doc/tm.texi.in: Remove PUSH_ARGS documentation.  Add\n+\tTARGET_PUSH_ARGUMENT hook.\n+\t* doc/tm.texi: Regenerated.\n+\n+2021-06-17  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/97194\n+\t* config/i386/i386-expand.c (expand_vector_set_var):\n+\tHandle V2FS mode remapping.  Pass TARGET_MMX_WITH_SSE to\n+\tix86_expand_vector_init_duplicate.\n+\t(ix86_expand_vector_init_duplicate): Emit insv_1 for\n+\tQImode for !TARGET_PARTIAL_REG_STALL.\n+\t* config/i386/predicates.md (vec_setm_mmx_operand): New predicate.\n+\t* config/i386/mmx.md (vec_setv2sf): Use vec_setm_mmx_operand\n+\tas operand 2 predicate.  Call ix86_expand_vector_set_var\n+\tfor non-constant index operand.\n+\t(vec_setv2si): Ditto.\n+\t(vec_setv4hi): Ditto.\n+\t(vec_setv8qi): ditto.\n+\n+2021-06-17  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/100790\n+\t* gimple-range.cc (range_of_builtin_call): Cleanup clz and ctz\n+\tcode.\n+\n+2021-06-17  Martin Liska  <mliska@suse.cz>\n+\n+\t* doc/invoke.texi: Use consistently -O1 instead of -O.\n+\n+2021-06-17  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcov-io.h: Update documentation entry about string format.\n+\n+2021-06-17  Marius Hillenbrand  <mhillen@linux.ibm.com>\n+\n+\tPR target/100871\n+\t* config/s390/vecintrin.h (vec_doublee): Fix to use\n+\t  __builtin_s390_vflls.\n+\t(vec_floate): Fix to use __builtin_s390_vflrd.\n+\n+2021-06-17  Trevor Saunders  <tbsaunde@tbsaunde.org>\n+\n+\t* dominance.c (get_dominated_to_depth): Return auto_vec<basic_block>.\n+\t* dominance.h (get_dominated_to_depth): Likewise.\n+\t(get_all_dominated_blocks): Likewise.\n+\t* cfgcleanup.c (delete_unreachable_blocks): Adjust.\n+\t* gcse.c (hoist_code): Likewise.\n+\t* tree-cfg.c (remove_edge_and_dominated_blocks): Likewise.\n+\t* tree-parloops.c (oacc_entry_exit_ok): Likewise.\n+\t* tree-ssa-dce.c (eliminate_unnecessary_stmts): Likewise.\n+\t* tree-ssa-phiprop.c (pass_phiprop::execute): Likewise.\n+\n+2021-06-17  Trevor Saunders  <tbsaunde@tbsaunde.org>\n+\n+\t* dominance.c (get_dominated_by_region): Return auto_vec<basic_block>.\n+\t* dominance.h (get_dominated_by_region): Likewise.\n+\t* tree-cfg.c (gimple_duplicate_sese_region): Adjust.\n+\t(gimple_duplicate_sese_tail): Likewise.\n+\t(move_sese_region_to_fn): Likewise.\n+\n+2021-06-17  Trevor Saunders  <tbsaunde@tbsaunde.org>\n+\n+\t* dominance.c (get_dominated_by): Return auto_vec<basic_block>.\n+\t* dominance.h (get_dominated_by): Likewise.\n+\t* auto-profile.c (afdo_find_equiv_class): Adjust.\n+\t* cfgloopmanip.c (duplicate_loop_to_header_edge): Likewise.\n+\t* loop-unroll.c (unroll_loop_runtime_iterations): Likewise.\n+\t* tree-cfg.c (test_linear_chain): Likewise.\n+\t(test_diamond): Likewise.\n+\n+2021-06-17  Trevor Saunders  <tbsaunde@tbsaunde.org>\n+\n+\t* cfgloop.h (get_loop_hot_path): Return auto_vec<basic_block>.\n+\t* cfgloopanal.c (get_loop_hot_path): Likewise.\n+\t* tree-ssa-loop-ivcanon.c (tree_estimate_loop_size): Likewise.\n+\n+2021-06-17  Trevor Saunders  <tbsaunde@tbsaunde.org>\n+\n+\t* cgraph.c (cgraph_node::collect_callers): Return\n+\tauto_vec<cgraph_edge *>.\n+\t* cgraph.h (cgraph_node::collect_callers): Likewise.\n+\t* ipa-cp.c (create_specialized_node): Adjust.\n+\t(decide_about_value): Likewise.\n+\t(decide_whether_version_node): Likewise.\n+\t* ipa-sra.c (process_isra_node_results): Likewise.\n+\n+2021-06-17  Trevor Saunders  <tbsaunde@tbsaunde.org>\n+\n+\t* vec.h (vl_ptr>::using_auto_storage): Handle null m_vec.\n+\t(auto_vec<T, 0>::auto_vec): Define move constructor, and delete copy\n+\tconstructor.\n+\t(auto_vec<T, 0>::operator=): Define move assignment and delete copy\n+\tassignment.\n+\n+2021-06-17  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gimple-range.cc (debug_seed_ranger): New.\n+\t(dump_ranger): New.\n+\t(debug_ranger): New.\n+\n+2021-06-17  Richard Biener   <rguenther@suse.de>\n+\n+\tPR tree-optimization/54400\n+\t* tree-vectorizer.h (enum slp_instance_kind): Add\n+\tslp_inst_kind_bb_reduc.\n+\t(reduction_fn_for_scalar_code): Declare.\n+\t* tree-vect-data-refs.c (vect_slp_analyze_instance_dependence):\n+\tCheck SLP_INSTANCE_KIND instead of looking at the\n+\trepresentative.\n+\t(vect_slp_analyze_instance_alignment): Likewise.\n+\t* tree-vect-loop.c (reduction_fn_for_scalar_code): Export.\n+\t* tree-vect-slp.c (vect_slp_linearize_chain): Split out\n+\tchain linearization from vect_build_slp_tree_2 and generalize\n+\tfor the use of BB reduction vectorization.\n+\t(vect_build_slp_tree_2): Adjust accordingly.\n+\t(vect_optimize_slp): Elide permutes at the root of BB reduction\n+\tinstances.\n+\t(vectorizable_bb_reduc_epilogue): New function.\n+\t(vect_slp_prune_covered_roots): Likewise.\n+\t(vect_slp_analyze_operations): Use them.\n+\t(vect_slp_check_for_constructors): Recognize associatable\n+\tchains for BB reduction vectorization.\n+\t(vectorize_slp_instance_root_stmt): Generate code for the\n+\tBB reduction epilogue.\n+\n 2021-06-17  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* gimple-range-gori.cc (gori_compute::has_edge_range_p): Check with"}, {"sha": "1c09ea68c9860607f976ea8661c9fc92221132b0", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/688359a27d835bbdab554fdf5eb207f1bd678371/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/688359a27d835bbdab554fdf5eb207f1bd678371/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=688359a27d835bbdab554fdf5eb207f1bd678371", "patch": "@@ -1 +1 @@\n-20210617\n+20210618"}, {"sha": "1927007b235f3ffe895fc2cf95319f5a43609327", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 346, "deletions": 0, "changes": 346, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/688359a27d835bbdab554fdf5eb207f1bd678371/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/688359a27d835bbdab554fdf5eb207f1bd678371/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=688359a27d835bbdab554fdf5eb207f1bd678371", "patch": "@@ -1,3 +1,349 @@\n+2021-06-17  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_ch3.adb (Check_Ops_From_Incomplete_Type): Protect against\n+\tno Primitive_Operations.\n+\n+2021-06-17  Vadim Godunko  <godunko@adacore.com>\n+\n+\t* libgnat/a-strunb__shared.ads (Allocate): Additional parameter\n+\tto provide additional amount of space to be allocated.\n+\t* libgnat/a-strunb__shared.adb (Aligned_Max_Length): Limit\n+\tlength to Natural'Last when requested length is larger than it.\n+\t(Allocate): Merge two slightly different implementations into\n+\tone.\n+\n+2021-06-17  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* checks.adb (Discrete_Range_Cond): For an index subtype that\n+\thas a fixed lower bound, require that the range's lower bound\n+\tmatch that of the subtype.\n+\t(Selected_Range_Checks): Warn about the case where a static\n+\tlower bound does not equal an index subtype's fixed lower bound.\n+\t* einfo.ads (Is_Fixed_Lower_Bound_Array_Subtype,\n+\tIs_Fixed_Lower_Bound_Index_Subtype): Document new entity flag.\n+\t* exp_ch4.adb (Expand_N_Type_Conversion): If the operand is of\n+\tan unconstrained array subtype with fixed lower bound, then\n+\tExpand_Sliding_Conversion is applied to the operand.\n+\t* exp_ch6.adb (Expand_Simple_Function_Return): If the result\n+\tsubtype is an unconstrained array subtype with fixed lower\n+\tbound, then Expand_Sliding_Conversion is applied to the return\n+\tobject.\n+\t* exp_util.ads (Expand_Sliding_Conversion): New procedure for\n+\tapplying a sliding subtype conversion to an array object of a\n+\tfixed-lower-bound subtype when needed.\n+\t* exp_util.adb: Add with_clause for Freeze.\n+\t(Expand_Sliding_Conversion): New procedure for applying a\n+\tsliding subtype conversion to an array object of a\n+\tfixed-lower-bound subtype when needed.  It traverses the indexes\n+\tof the unconstrained array type/subtype to create a target\n+\tconstrained subtype and rewrites the array object to be a\n+\tconversion to that subtype, when there's at least one index\n+\twhose lower bound does not statically match the fixed-lower\n+\tbound of the target subtype.\n+\t* gen_il-fields.ads (type Opt_Field_Enum): Add literals\n+\tIs_Fixed_Lower_Bound_Array_Subtype and\n+\tIs_Fixed_Lower_Bound_Index_Subtype for new flags on type\n+\tentities.\n+\t* gen_il-gen-gen_entities.adb: Add calls to\n+\tCreate_Semantic_Field for the new fixed-lower-bound flags on\n+\ttype entities.\n+\t* par-ch3.adb (P_Array_Type_Definition): Add handling for\n+\tparsing of fixed-lower-bound index ranges in unconstrained array\n+\ttypes. Report an error if such an index is encountered and GNAT\n+\tlanguage extensions are not enabled.\n+\t(P_Index_Subtype_Def_With_Fixed_Lower_Bound): Support procedure\n+\tfor parsing unconstrained index ranges.\n+\t(P_Index_Or_Discriminant_Constraint): Add handling for parsing\n+\tof index constraints that specify ranges with fixed lower\n+\tbounds. Report an error if such an index is encountered and GNAT\n+\tlanguage extensions are not enabled.\n+\t* sem_ch3.adb (Analyze_Object_Declaration): If the object's\n+\tnominal subtype is an array subtype with fixed lower bound, then\n+\tExpand_Sliding_Conversion is applied to the object.\n+\t(Array_Type_Declaration): Mark the array type and the subtypes\n+\tof any indexes that specify a fixed lower bound as being\n+\tfixed-lower-bound subtypes, and set the High_bound of the range\n+\tof such an index to the upper bound of the named subtype.\n+\t(Constrain_Array): For an array subtype with one or more index\n+\tranges specifying a fixed lower bound, set Is_Constrained to\n+\tFalse and set the array subtype's\n+\tIs_Fixed_Lower_Bound_Array_Subtype flag to True.\n+\t(Constrain_Index): Mark the subtypes of an index that specifies\n+\ta fixed lower bound as being a fixed-lower-bound index subtype,\n+\tand set the High_bound of the range of such an index to the\n+\tupper bound of the base type of the array type's corresponding\n+\tindex.\n+\t* sem_res.adb (Resolve_Actuals): If a formal is of an\n+\tunconstrained array subtype with fixed lower bound, then\n+\tExpand_Sliding_Conversion is applied to the actual.\n+\t* sem_util.adb (Build_Actual_Subtype): If the actual subtype\n+\tcorresponds to an unconstrained array subtype having any indexes\n+\twith fixed lower bounds, then set the lower bounds of any such\n+\tindexes of the actual subtype to the appropriate fixed lower\n+\tbound of the formal subtype (rather than taking it from the\n+\tformal itself).\n+\t* sprint.adb (Sprint_Node_Actual, case N_Range): If a range's\n+\tEtype has a fixed lower bound, then print \"<>\" rather than the\n+\tHigh_Bound of the range.\n+\n+2021-06-17  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_util.adb, sem_util.ads (Has_Access_Values): New formal\n+\tInclude_Internal to indicate whether internal types should be\n+\tincluded.\n+\t* sem_warn.adb (Check_References): Change E_Out_Parameter to\n+\tFormal_Kind, to match the comment about Spec_Entity.  Pass\n+\tInclude_Internal => False to Has_Access_Values, so that we warn\n+\ton types with access values that happen to be in internal types,\n+\tsuch as Unbounded_String.\n+\t* sem_attr.adb (Attribute_Has_Access_Values): Pass\n+\tInclude_Internal => True to Has_Access_Values, to preserve\n+\texisting behavior.\n+\t* libgnat/g-rewdat.adb (Do_Output): Change B from 'in out' to\n+\t'in', to avoid warning enabled by the change to sem_warn.adb.\n+\t* libgnat/s-objrea.adb (Check_Read_Offset): Change S from 'in\n+\tout' to 'in', to avoid warning enabled by the change to\n+\tsem_warn.adb.\n+\n+2021-06-17  Steve Baird  <baird@adacore.com>\n+\n+\t* exp_ch5.adb\n+\t(Expand_N_Case_Statement.Expand_General_Case_Statement): New\n+\tsubprogram.\n+\t(Expand_N_Case_Statement): If extensions are allowed and the\n+\tcase selector is not of a discrete type, then call\n+\tExpand_General_Case_Statement to generate expansion instead of\n+\tflagging the non-discrete selector as an error.\n+\t* sem_case.ads (Is_Case_Choice_Pattern): New Boolean-valued\n+\tfunction for testing whether a given expression occurs as part\n+\tof a case choice pattern.\n+\t* sem_case.adb (Composite_Case_Ops): New package providing\n+\tsupport routines for the new form of case statements. This\n+\tincludes a nested package, Composite_Case_Ops.Value_Sets, which\n+\tencapsulates the \"representative values\" implementation of\n+\tcomposite value sets.\n+\t(Check_Choices.Check_Case_Pattern_Choices): New procedure for\n+\tsemantic checking of non-discrete case choices. This includes\n+\tthe checks pertaining to coverage and overlapping.\n+\t(Check_Choices.Check_Composite_Case_Selector): New procedure for\n+\tsemantic checking of non-discrete case selectors.\n+\t(Check_Choices): If extensions are allowed then a non-discrete\n+\tselector type no longer implies that an error must have been\n+\tflagged earlier.  Instead of simply returning, call\n+\tCheck_Composite_Case_Selector and Check_Case_Pattern_Choices.\n+\t(Is_Case_Choice_Pattern): Body of new function declared in\n+\tsem_case.ads .\n+\t* sem_ch5.adb (Analyze_Case_Statement): If extensions are\n+\tallowed, then we can't use RM 5.4's \"The selecting_expression is\n+\texpected to be of any discrete type\" name resolution rule.\n+\tHandle the case where the type of the selecting expression is\n+\tnot discrete, as well as the new ambiguous-name-resolution error\n+\tcases made possible by this change.\n+\t* sem_res.adb (Resolve_Entity_Name): It is ok to treat the name\n+\tof a type or subtype as an expression if it is part of a case\n+\tchoice pattern, as in \"(Field1 => Positive, Field2 => <>)\".\n+\t* exp_aggr.adb (Expand_Record_Aggregate): Do not expand case\n+\tchoice aggregates.\n+\t* gen_il-fields.ads: Define two new node attributes,\n+\tBinding_Chars and Multidefined_Bindings.\n+\t* gen_il-gen-gen_nodes.adb: The new Multidefined_Bindings\n+\tattribute is Boolean-valued and may be set on\n+\tN_Case_Statement_Alternative nodes. The new Binding_Chars\n+\tattribute is Name_Id-valued and may be set on\n+\tN_Component_Association nodes.\n+\t* par-ch4.adb (P_Record_Or_Array_Component_Association): When\n+\tparsing a component association, check for both new syntax forms\n+\tused to specify a bound value in a case-choice aggregate.  In\n+\tthe case of a box value, an identifier may occur within the box,\n+\tas in \"Foo => <Abc>\" instead of \"Foo => <>\". In the more general\n+\tcase, an expression (or a box) may be followed by \"is\n+\t<identifier>\", as in\n+\t\"Foo => Bar is Abc\" instead of just \"Foo => Bar\".\n+\t* sem_aggr.adb (Resolve_Record_Aggregate): Do not transform box\n+\tcomponent values in a case-choice aggregate.\n+\t* sinfo.ads: Provide comments for the new attributes added in\n+\tgen_il-fields.ads.\n+\t* doc/gnat_rm/implementation_defined_pragmas.rst: Describe this\n+\tnew feature in documentation for pragma Extensions_Allowed.\n+\t* gnat_rm.texi: Regenerate.\n+\n+2021-06-17  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_N_Expression_With_Actions.Process_Action):\n+\tDo not abandon processing on a nested N_Expression_With_Actions\n+\tor N_Loop_Statement, otherwise we may miss some transient\n+\tdeclarations.\n+\n+2021-06-17  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* exp_util.adb (Find_Hook_Context): Do not stop on an aggregate\n+\tnode.\n+\n+2021-06-17  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_util.adb (Is_Valid_Renaming): Check not only indexed\n+\tcomponents, but slices too.\n+\n+2021-06-17  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch3.adb (Analyze_Private_Extension_Declaration): Check\n+\tNo_Wide_Characters restriction after rejecting illegal parent\n+\ttypes.\n+\t(Derived_Type_Declaration): Likewise.\n+\t(Find_Type_Of_Subtype_Indic): Remove check for\n+\tNo_Wide_Characters restriction, which was done too early.\n+\n+2021-06-17  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_util.adb (Is_Valid_Renaming): Body moved from its nested\n+\troutine.\n+\n+2021-06-17  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_ch12.adb (Instantiate_Type): If the actual type for an\n+\tincomplete formal type is also incomplete, but has a Full_View,\n+\tuse the Full_View of the actual type rather than the incomplete\n+\tview.\n+\n+2021-06-17  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* doc/gnat_ugn/building_executable_programs_with_gnat.rst\n+\t(-gnatw.I): Remove double period at the end of sentence.\n+\t* gnat_ugn.texi: Regenerate.\n+\n+2021-06-17  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_util.adb (Denotes_Same_Object): Call Get_Index_Bounds with\n+\tthe range of a slice object, not its type.\n+\n+2021-06-17  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_warn.adb (Warn_On_Overlapping_Actuals): Fix style;\n+\trefactor repeated calls to Nkind; remove early RETURN.\n+\n+2021-06-17  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_warn.adb (Warn_On_Overlapping_Actuals): Ignore formal of\n+\tgeneric types, but keep examining other parameters.\n+\n+2021-06-17  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_warn.adb (Warn_On_Overlapping_Actuals): Remove dead code.\n+\n+2021-06-17  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_warn.adb (Warn_On_Overlapping_Actuals): Remove repeated\n+\tcode.\n+\n+2021-06-17  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* checks.adb (Overlap_Check): Replace Set_Casing with\n+\tAdjust_Name_Case and adapt surrounding code as needed.\n+\n+2021-06-17  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* libgnat/s-putaim.ads, libgnat/s-putaim.adb: Move...\n+\t* libgnarl/s-putaim.ads, libgnarl/s-putaim.adb: ... here.\n+\n+2021-06-17  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* uintp.ads, uintp.adb (UI_To_Unsigned_64): New.\n+\n+2021-06-17  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_prag.adb (Get_Overflow_Mode): Reword error message.\n+\t* switch-c.adb (Get_Overflow_Mode): Likewise.\n+\n+2021-06-17  Richard Kenner  <kenner@adacore.com>\n+\n+\t* exp_util.adb (Expand_Static_Predicates_In_Choices): Handle\n+\tOthers_Discrete_Choices in N_Others_Choice.\n+\n+2021-06-17  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* atree.adb: Remove redundant comment with spec.\n+\t* sem_warn.adb: Fix typo in comment.\n+\n+2021-06-17  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* atree.adb: Do not suppress checks.\n+\n+2021-06-17  Justin Squirek  <squirek@adacore.com>\n+\n+\t* exp_ch3.adb (Check_Missing_Others): Add comment.\n+\t(Build_Initialization_Call): Remove inaccurate accessibility\n+\tcomment.\n+\t* sem_ch12.adb (Analyze_Generic_Subprogram_Declaration): Remove\n+\ttest for Ada2012.\n+\t(Analyze_Package_Instantiation): Remove speculative comment.\n+\t(Inline_Instance_Body): Add comments for loops.\n+\t(Build_Subprogram_Renaming): Remove comment about fix being\n+\tpartial and \"ugly.\"\n+\t(Instantiate_Subprogram_Body): Remove comment referencing DEC\n+\trelated internal issue.\n+\t(Subtypes_Match): Add comment and simplify anonymous access\n+\ttest.\n+\t(Is_Global): Add test for when E is an expanded name, and\n+\tcalculate the scope accordingly.\n+\t* sem_ch6.adb (Analyze_Function_Return): Update comment\n+\tregarding accessibility, and add check for\n+\tWarn_On_Ada_2012_Compatibility.\n+\t(Mask_Type_Refs): Add comments.\n+\t(Analyze_Subprogram_Declaration): Remove mysterious suppression\n+\tof elaboration checks.\n+\t* sem_ch7.adb (Preserve_Full_Attributes): Preserve Is_Atomic\n+\tvalue.\n+\t* sem_ch8.adb (Most_Descendant_Use_Clause): Remove comment.\n+\t(Note_Redundant_Use): Fix calls to Find_First_Use to be\n+\tFind_Most_Prev.\n+\t(Get_Object_Name): Modify error message to be more descriptive.\n+\t(Known_But_Visible): Remove mysterious special case for\n+\tGNAT_Mode.\n+\t(Find_First_Use): Removed.\n+\t(Find_Most_Prev): Renamed from Find_First_Use.\n+\t* sem_prag.adb (Check_Static_Constraint): Add comments to\n+\troutine.\n+\n+2021-06-17  Bob Duff  <duff@adacore.com>\n+\n+\t* treepr.adb (Print_Node): Display the Entity or Associated_Node\n+\tfields if appropriate.\n+\t* sinfo-utils.ads (F_Associated_Node, F_Entity): Remove. These\n+\tare no longer needed.\n+\n+2021-06-17  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* checks.adb (Apply_Parameter_Aliasing_Checks): Replace calls to\n+\tIs_Object_Reference with calls to Is_Name_Reference; remove\n+\tasymmetric condition that only detected an aggregate as the\n+\tfirst actual (aggregate objects were just a special case of an\n+\tobject reference that was not a name).\n+\n+2021-06-17  Bob Duff  <duff@adacore.com>\n+\n+\t* gen_il-gen.adb, gen_il-internals.ads: Generate field\n+\tenumeration literals with \"F_\" prefix.  Update all generated\n+\treferences accordingly.\n+\t* atree.adb, einfo-utils.adb, sem_ch3.adb, sem_ch5.adb,\n+\tsem_ch6.adb, sem_ch8.adb, sinfo-cn.adb, sinfo-utils.adb,\n+\tsinfo-utils.ads, treepr.adb: Add \"F_\" prefix to all uses of the\n+\tfield enumeration literals.\n+\n+2021-06-17  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* libgnat/i-c.ads, libgnat/i-cexten.ads,\n+\tlibgnat/i-cexten__128.ads: bool renamed C_bool.\n+\n+2021-06-17  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch4.adb (Analyze_Allocator): Reject allocators in\n+\trestricted contexts.\n+\n+2021-06-17  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* gcc-interface/Make-lang.in: Use libgnat.so if libgnat.a cannot\n+\tbe found.\n+\n 2021-06-16  Piotr Trojanek  <trojanek@adacore.com>\n \n \t* sem_util.adb (Is_Volatile_Function): Follow the exact wording"}, {"sha": "5142210197a4d7582ddeb401b14eb906db868cfe", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/688359a27d835bbdab554fdf5eb207f1bd678371/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/688359a27d835bbdab554fdf5eb207f1bd678371/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=688359a27d835bbdab554fdf5eb207f1bd678371", "patch": "@@ -1,3 +1,14 @@\n+2021-06-17  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/101106\n+\t* decl.c (duplicate_decls): Make 'deleted after first declaration'\n+\tpedwarn on by default.\n+\n+2021-06-17  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/101029\n+\t* init.c (build_vec_init): Preserve the type of base.\n+\n 2021-06-16  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/101078"}, {"sha": "1c7b730fc309414c0a418173b4e5f3189a7a18bd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/688359a27d835bbdab554fdf5eb207f1bd678371/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/688359a27d835bbdab554fdf5eb207f1bd678371/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=688359a27d835bbdab554fdf5eb207f1bd678371", "patch": "@@ -1,3 +1,35 @@\n+2021-06-17  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/101106\n+\t* g++.dg/cpp0x/deleted15.C: New test.\n+\n+2021-06-17  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/100704\n+\t* gcc.target/i386/pr100704-1.c: New test.\n+\t* gcc.target/i386/pr100704-2.c: Likewise.\n+\t* gcc.target/i386/pr100704-3.c: Likewise.\n+\n+2021-06-17  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/97194\n+\t* gcc.target/i386/sse4_1-vec-set-1.c: New test.\n+\t* gcc.target/i386/sse4_1-vec-set-2.c: ditto.\n+\n+2021-06-17  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gcc.dg/pr100790.c: New test.\n+\n+2021-06-17  Marius Hillenbrand  <mhillen@linux.ibm.com>\n+\n+\t* gcc.target/s390/zvector/vec-doublee.c: New test.\n+\t* gcc.target/s390/zvector/vec-floate.c: New test.\n+\n+2021-06-17  Richard Biener   <rguenther@suse.de>\n+\n+\tPR tree-optimization/54400\n+\t* gcc.dg/vect/bb-slp-pr54400.c: New testcase.\n+\n 2021-06-16  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/101078"}, {"sha": "98b85a09a3e422f7aa8bb401956c9925ab8afba1", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/688359a27d835bbdab554fdf5eb207f1bd678371/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/688359a27d835bbdab554fdf5eb207f1bd678371/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=688359a27d835bbdab554fdf5eb207f1bd678371", "patch": "@@ -1,3 +1,92 @@\n+2021-06-17  Chung-Lin Tang  <cltang@codesourcery.com>\n+\n+\t* hashtab.h (htab_clear): New function with initialization code\n+\tfactored out from...\n+\t(htab_create): ...here, adjust to use htab_clear function.\n+\t* libgomp.h (REFCOUNT_SPECIAL): New symbol to denote range of\n+\tspecial refcount values, add comments.\n+\t(REFCOUNT_INFINITY): Adjust definition to use REFCOUNT_SPECIAL.\n+\t(REFCOUNT_LINK): Likewise.\n+\t(REFCOUNT_STRUCTELEM): New special refcount range for structure\n+\telement siblings.\n+\t(REFCOUNT_STRUCTELEM_P): Macro for testing for structure element\n+\tsibling maps.\n+\t(REFCOUNT_STRUCTELEM_FLAG_FIRST): Flag to indicate first sibling.\n+\t(REFCOUNT_STRUCTELEM_FLAG_LAST):  Flag to indicate last sibling.\n+\t(REFCOUNT_STRUCTELEM_FIRST_P): Macro to test _FIRST flag.\n+\t(REFCOUNT_STRUCTELEM_LAST_P): Macro to test _LAST flag.\n+\t(struct splay_tree_key_s): Add structelem_refcount and\n+\tstructelem_refcount_ptr fields into a union with dynamic_refcount.\n+\tAdd comments.\n+\t(gomp_map_vars): Delete declaration.\n+\t(gomp_map_vars_async): Likewise.\n+\t(gomp_unmap_vars): Likewise.\n+\t(gomp_unmap_vars_async): Likewise.\n+\t(goacc_map_vars): New declaration.\n+\t(goacc_unmap_vars): Likewise.\n+\t* oacc-mem.c (acc_map_data): Adjust to use goacc_map_vars.\n+\t(goacc_enter_datum): Likewise.\n+\t(goacc_enter_data_internal): Likewise.\n+\t* oacc-parallel.c (GOACC_parallel_keyed): Adjust to use goacc_map_vars\n+\tand goacc_unmap_vars.\n+\t(GOACC_data_start): Adjust to use goacc_map_vars.\n+\t(GOACC_data_end): Adjust to use goacc_unmap_vars.\n+\t* target.c (hash_entry_type): New typedef.\n+\t(htab_alloc): New function hook for hashtab.h.\n+\t(htab_free): Likewise.\n+\t(htab_hash): Likewise.\n+\t(htab_eq): Likewise.\n+\t(hashtab.h): Add file include.\n+\t(gomp_increment_refcount): New function.\n+\t(gomp_decrement_refcount): Likewise.\n+\t(gomp_map_vars_existing): Add refcount_set parameter, adjust to use\n+\tgomp_increment_refcount.\n+\t(gomp_map_fields_existing): Add refcount_set parameter, adjust calls\n+\tto gomp_map_vars_existing.\n+\t(gomp_map_vars_internal): Add refcount_set parameter, add local openmp_p\n+\tvariable to guard OpenMP specific paths, adjust calls to\n+\tgomp_map_vars_existing, add structure element sibling splay_tree_key\n+\tsequence creation code, adjust Fortran map case to avoid increment\n+\tunder OpenMP.\n+\t(gomp_map_vars): Adjust to static, add refcount_set parameter, manage\n+\tlocal refcount_set if caller passed in NULL, adjust call to\n+\tgomp_map_vars_internal.\n+\t(gomp_map_vars_async): Adjust and rename into...\n+\t(goacc_map_vars): ...this new function, adjust call to\n+\tgomp_map_vars_internal.\n+\t(gomp_remove_splay_tree_key): New function with code factored out from\n+\tgomp_remove_var_internal.\n+\t(gomp_remove_var_internal): Add code to handle removing multiple\n+\tsplay_tree_key sequence for structure elements, adjust code to use\n+\tgomp_remove_splay_tree_key for splay-tree key removal.\n+\t(gomp_unmap_vars_internal): Add refcount_set parameter, adjust to use\n+\tgomp_decrement_refcount.\n+\t(gomp_unmap_vars): Adjust to static, add refcount_set parameter, manage\n+\tlocal refcount_set if caller passed in NULL, adjust call to\n+\tgomp_unmap_vars_internal.\n+\t(gomp_unmap_vars_async): Adjust and rename into...\n+\t(goacc_unmap_vars): ...this new function, adjust call to\n+\tgomp_unmap_vars_internal.\n+\t(GOMP_target): Manage refcount_set and adjust calls to gomp_map_vars and\n+\tgomp_unmap_vars.\n+\t(GOMP_target_ext): Likewise.\n+\t(gomp_target_data_fallback): Adjust call to gomp_map_vars.\n+\t(GOMP_target_data): Likewise.\n+\t(GOMP_target_data_ext): Likewise.\n+\t(GOMP_target_end_data): Adjust call to gomp_unmap_vars.\n+\t(gomp_exit_data): Add refcount_set parameter, adjust to use\n+\tgomp_decrement_refcount, adjust to queue splay-tree keys for removal\n+\tafter main loop.\n+\t(GOMP_target_enter_exit_data): Manage refcount_set and adjust calls to\n+\tgomp_map_vars and gomp_exit_data.\n+\t(gomp_target_task_fn): Likewise.\n+\t* testsuite/libgomp.c-c++-common/refcount-1.c: New testcase.\n+\t* testsuite/libgomp.c-c++-common/struct-elem-1.c: New testcase.\n+\t* testsuite/libgomp.c-c++-common/struct-elem-2.c: New testcase.\n+\t* testsuite/libgomp.c-c++-common/struct-elem-3.c: New testcase.\n+\t* testsuite/libgomp.c-c++-common/struct-elem-4.c: New testcase.\n+\t* testsuite/libgomp.c-c++-common/struct-elem-5.c: New testcase.\n+\n 2021-06-15  Tobias Burnus  <tobias@codesourcery.com>\n \n \tPR fortran/92568"}, {"sha": "cffd7e1afa9e3c62cc7a6857c369156cc7aac180", "filename": "libitm/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/688359a27d835bbdab554fdf5eb207f1bd678371/libitm%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/688359a27d835bbdab554fdf5eb207f1bd678371/libitm%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2FChangeLog?ref=688359a27d835bbdab554fdf5eb207f1bd678371", "patch": "@@ -1,3 +1,8 @@\n+2021-06-17  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/91488\n+\t* testsuite/libitm.c++/libstdc++-pr91488.C: New test.\n+\n 2021-01-15  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/70454"}, {"sha": "0223a74f8b07362bfc720cb08ca8b9d009a3ada2", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/688359a27d835bbdab554fdf5eb207f1bd678371/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/688359a27d835bbdab554fdf5eb207f1bd678371/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=688359a27d835bbdab554fdf5eb207f1bd678371", "patch": "@@ -1,3 +1,42 @@\n+2021-06-17  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/91488\n+\t* include/bits/basic_string.h (__cpp_lib_constexpr_string): Only\n+\tdefine when is_constant_evaluated is available.\n+\t* include/bits/char_traits.h (__cpp_lib_constexpr_char_traits):\n+\tLikewise.\n+\t(__constant_string_p, __constant_array_p): Remove.\n+\t(char_traits): Use is_constant_evaluated directly.\n+\t* include/std/version (__cpp_lib_constexpr_char_traits)\n+\t(__cpp_lib_constexpr_string): Only define when\n+\tis_constant_evaluated is available.\n+\n+2021-06-17  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR libstdc++/100940\n+\t* include/std/ranges (__adaptor::_Partial): For the \"simple\"\n+\tforwarding partial specializations, also require that\n+\tthe extra arguments are trivially copyable.\n+\t* testsuite/std/ranges/adaptors/100577.cc (test04): New test.\n+\n+2021-06-17  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR libstdc++/100940\n+\t* include/std/ranges (__adaptor::_RangeAdaptor): Document the\n+\ttemplate form of _S_has_simple_extra_args.\n+\t(__adaptor::__adaptor_has_simple_extra_args): Add _Args template\n+\tparameter pack.  Try to treat _S_has_simple_extra_args as a\n+\tvariable template parameterized by _Args.\n+\t(__adaptor::_Partial): Pass _Arg/_Args to the constraint\n+\t__adaptor_has_simple_extra_args.\n+\t(views::_Take::_S_has_simple_extra_args): Templatize according\n+\tto the type of the extra argument.\n+\t(views::_Drop::_S_has_simple_extra_args): Likewise.\n+\t(views::_Split::_S_has_simple_extra_args): Define.\n+\t* testsuite/std/ranges/adaptors/100577.cc (test01, test02):\n+\tAdjust after changes to _S_has_simple_extra_args mechanism.\n+\t(test03): Define.\n+\n 2021-06-16  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/iterator_concepts.h (__decay_copy): Name type."}]}