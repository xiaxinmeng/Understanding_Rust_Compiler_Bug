{"sha": "f364cdffa47af574f90f671b2dcf5afa91442741", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjM2NGNkZmZhNDdhZjU3NGY5MGY2NzFiMmRjZjVhZmE5MTQ0Mjc0MQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2021-07-15T20:34:25Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2021-07-15T20:40:30Z"}, "message": "i386: Fix ix86_hard_regno_mode_ok for TDmode on 32bit targets [PR101346]\n\nGeneral regs on 32bit targets do not support 128bit modes,\nincluding TDmode.\n\ngcc/\n\n2021-07-15  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\n\tPR target/101346\n\t* config/i386/i386.h (VALID_SSE_REG_MODE): Add TDmode.\n\t(VALID_INT_MODE_P): Add SDmode and DDmode.\n\tAdd TDmode for TARGET_64BIT.\n\t(VALID_DFP_MODE_P): Remove.\n\t* config/i386/i386.c (ix86_hard_regno_mode_ok):\n\tDo not use VALID_DFP_MODE_P.\n\ngcc/testsuite/\n\n2021-07-15  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\n\tPR target/101346\n\t* gcc.target/i386/pr101346.c: New test.", "tree": {"sha": "3b721531d4c564e51e18dd8476b20f26fb67a1be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b721531d4c564e51e18dd8476b20f26fb67a1be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f364cdffa47af574f90f671b2dcf5afa91442741", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f364cdffa47af574f90f671b2dcf5afa91442741", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f364cdffa47af574f90f671b2dcf5afa91442741", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f364cdffa47af574f90f671b2dcf5afa91442741/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "478cc962ad174bfc64c573152a0658935651fce3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/478cc962ad174bfc64c573152a0658935651fce3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/478cc962ad174bfc64c573152a0658935651fce3"}], "stats": {"total": 25, "additions": 15, "deletions": 10}, "files": [{"sha": "9d74b7a191be6f2972dc904a0b7bbfa37255b0ed", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f364cdffa47af574f90f671b2dcf5afa91442741/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f364cdffa47af574f90f671b2dcf5afa91442741/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=f364cdffa47af574f90f671b2dcf5afa91442741", "patch": "@@ -19535,11 +19535,8 @@ ix86_hard_regno_mode_ok (unsigned int regno, machine_mode mode)\n       return !can_create_pseudo_p ();\n     }\n   /* We handle both integer and floats in the general purpose registers.  */\n-  else if (VALID_INT_MODE_P (mode))\n-    return true;\n-  else if (VALID_FP_MODE_P (mode))\n-    return true;\n-  else if (VALID_DFP_MODE_P (mode))\n+  else if (VALID_INT_MODE_P (mode)\n+\t   || VALID_FP_MODE_P (mode))\n     return true;\n   /* Lots of MMX code casts 8 byte vector modes to DImode.  If we then go\n      on to use that value in smaller contexts, this can easily force a"}, {"sha": "0c2c93daf32b222003605654abd49ed2186e3829", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f364cdffa47af574f90f671b2dcf5afa91442741/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f364cdffa47af574f90f671b2dcf5afa91442741/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=f364cdffa47af574f90f671b2dcf5afa91442741", "patch": "@@ -1023,7 +1023,7 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n #define VALID_SSE_REG_MODE(MODE)\t\t\t\t\t\\\n   ((MODE) == V1TImode || (MODE) == TImode\t\t\t\t\\\n    || (MODE) == V4SFmode || (MODE) == V4SImode\t\t\t\t\\\n-   || (MODE) == SFmode || (MODE) == TFmode)\n+   || (MODE) == SFmode || (MODE) == TFmode || (MODE) == TDmode)\n \n #define VALID_MMX_REG_MODE_3DNOW(MODE) \\\n   ((MODE) == V2SFmode || (MODE) == SFmode)\n@@ -1037,9 +1037,6 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n \n #define VALID_MASK_AVX512BW_MODE(MODE) ((MODE) == SImode || (MODE) == DImode)\n \n-#define VALID_DFP_MODE_P(MODE) \\\n-  ((MODE) == SDmode || (MODE) == DDmode || (MODE) == TDmode)\n-\n #define VALID_FP_MODE_P(MODE)\t\t\t\t\t\t\\\n   ((MODE) == SFmode || (MODE) == DFmode || (MODE) == XFmode\t\t\\\n    || (MODE) == SCmode || (MODE) == DCmode || (MODE) == XCmode)\t\t\\\n@@ -1049,12 +1046,13 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n    || (MODE) == SImode || (MODE) == DImode\t\t\t\t\\\n    || (MODE) == CQImode || (MODE) == CHImode\t\t\t\t\\\n    || (MODE) == CSImode || (MODE) == CDImode\t\t\t\t\\\n+   || (MODE) == SDmode || (MODE) == DDmode\t\t\t\t\\\n    || (MODE) == V4QImode || (MODE) == V2HImode || (MODE) == V1SImode\t\\\n    || (TARGET_64BIT\t\t\t\t\t\t\t\\\n        && ((MODE) == TImode || (MODE) == CTImode\t\t\t\\\n \t   || (MODE) == TFmode || (MODE) == TCmode\t\t\t\\\n \t   || (MODE) == V8QImode || (MODE) == V4HImode\t\t\t\\\n-\t   || (MODE) == V2SImode)))\n+\t   || (MODE) == V2SImode || (MODE) == TDmode)))\n \n /* Return true for modes passed in SSE registers.  */\n #define SSE_REG_MODE_P(MODE)\t\t\t\t\t\t\\"}, {"sha": "fefabaf0e5671f074b408874e0b34a6ffa3a1a01", "filename": "gcc/testsuite/gcc.target/i386/pr101346.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f364cdffa47af574f90f671b2dcf5afa91442741/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr101346.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f364cdffa47af574f90f671b2dcf5afa91442741/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr101346.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr101346.c?ref=f364cdffa47af574f90f671b2dcf5afa91442741", "patch": "@@ -0,0 +1,10 @@\n+/* PR target/101346 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O0 -fprofile-generate -msse\" } */\n+/* { dg-require-profiling \"-fprofile-generate\" } */\n+\n+_Decimal128\n+foo (_Decimal128 x)\n+{\n+  return - __builtin_fabsd128 (x);\n+}"}]}