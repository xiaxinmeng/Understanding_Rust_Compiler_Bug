{"sha": "ca1906ff9add634551e681cdd94259401542e814", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2ExOTA2ZmY5YWRkNjM0NTUxZTY4MWNkZDk0MjU5NDAxNTQyZTgxNA==", "commit": {"author": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2001-05-18T06:29:11Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2001-05-18T06:29:11Z"}, "message": "[multiple changes]\n\n2001-05-18  Bryce McKinlay  <bryce@waitaki.otago.ac.nz>\n\n\t* include/jvm.h: Move \"#pragma GCC java_exceptions\" to ...\n\t* gcj/javaprims.h: ... here.\n\t* gnu/gcj/io/shs.cc: Add \"#pragma GCC java_exceptions\".\n\n2001-05-17  Martin Kahlert  <martin.kahlert@infineon.com>\n\n\t* java/lang/natClass.cc (_Jv_FindIIndex): Fix an off by one error\n\twith length of ioffset table.\n\t(_Jv_IsAssignableFrom): Likewise.\n\nFrom-SVN: r42248", "tree": {"sha": "0ced9189dbcd2b7509625083e75951dca7a938c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0ced9189dbcd2b7509625083e75951dca7a938c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca1906ff9add634551e681cdd94259401542e814", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca1906ff9add634551e681cdd94259401542e814", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca1906ff9add634551e681cdd94259401542e814", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca1906ff9add634551e681cdd94259401542e814/comments", "author": null, "committer": null, "parents": [{"sha": "6fd72f814a8d33fdf72485f2fefcb793ce4e60c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fd72f814a8d33fdf72485f2fefcb793ce4e60c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6fd72f814a8d33fdf72485f2fefcb793ce4e60c5"}], "stats": {"total": 29, "additions": 22, "deletions": 7}, "files": [{"sha": "024955368ff67170aca374306cf9f0a8290bbf8e", "filename": "libjava/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca1906ff9add634551e681cdd94259401542e814/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca1906ff9add634551e681cdd94259401542e814/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=ca1906ff9add634551e681cdd94259401542e814", "patch": "@@ -1,3 +1,15 @@\n+2001-05-18  Bryce McKinlay  <bryce@waitaki.otago.ac.nz>\n+\n+\t* include/jvm.h: Move \"#pragma GCC java_exceptions\" to ...\n+\t* gcj/javaprims.h: ... here.\n+\t* gnu/gcj/io/shs.cc: Add \"#pragma GCC java_exceptions\".\n+\n+2001-05-17  Martin Kahlert  <martin.kahlert@infineon.com>\n+\n+\t* java/lang/natClass.cc (_Jv_FindIIndex): Fix an off by one error \n+\twith length of ioffset table.\n+\t(_Jv_IsAssignableFrom): Likewise.\n+\n 2001-05-17  Per Bothner  <per@bothner.com>\n \n \t* Makefile.am (ZIP):  The \"fastjar\" binary is now plain \"jar\"."}, {"sha": "e13195c7e77ec4b75406dae0677759000499b4e3", "filename": "libjava/gcj/javaprims.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca1906ff9add634551e681cdd94259401542e814/libjava%2Fgcj%2Fjavaprims.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca1906ff9add634551e681cdd94259401542e814/libjava%2Fgcj%2Fjavaprims.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgcj%2Fjavaprims.h?ref=ca1906ff9add634551e681cdd94259401542e814", "patch": "@@ -11,6 +11,9 @@ details.  */\n #ifndef __JAVAPRIMS_H__\n #define __JAVAPRIMS_H__\n \n+// Force C++ compiler to use Java-style exceptions.\n+#pragma GCC java_exceptions\n+\n // FIXME: this is a hack until we get a proper gcjh.\n // It is needed to work around system header files that define TRUE\n // and FALSE."}, {"sha": "b9a563c544c8385d2ced56a73af5588fa8c84c94", "filename": "libjava/gnu/gcj/io/shs.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca1906ff9add634551e681cdd94259401542e814/libjava%2Fgnu%2Fgcj%2Fio%2Fshs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca1906ff9add634551e681cdd94259401542e814/libjava%2Fgnu%2Fgcj%2Fio%2Fshs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fio%2Fshs.cc?ref=ca1906ff9add634551e681cdd94259401542e814", "patch": "@@ -10,6 +10,10 @@\n  * Comments to pgut1@cs.aukuni.ac.nz\n  */\n \n+// Force C++ compiler to use Java-style EH, so we don't have to link with\n+// libstdc++.\n+#pragma GCC java_exceptions\n+\n #include <string.h>\n #include \"shs.h\"\n "}, {"sha": "50af7569fb293db5198fade66a72b09028430011", "filename": "libjava/include/jvm.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca1906ff9add634551e681cdd94259401542e814/libjava%2Finclude%2Fjvm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca1906ff9add634551e681cdd94259401542e814/libjava%2Finclude%2Fjvm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fjvm.h?ref=ca1906ff9add634551e681cdd94259401542e814", "patch": "@@ -11,9 +11,6 @@ details.  */\n #ifndef __JAVA_JVM_H__\n #define __JAVA_JVM_H__\n \n-// Force C++ compiler to use Java-style exceptions.\n-#pragma GCC java_exceptions\n-\n #include <gcj/javaprims.h>\n \n #include <java-assert.h>"}, {"sha": "e88bd8309676f2c8640ea9e291aecf30a2be2946", "filename": "libjava/java/lang/natClass.cc", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca1906ff9add634551e681cdd94259401542e814/libjava%2Fjava%2Flang%2FnatClass.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca1906ff9add634551e681cdd94259401542e814/libjava%2Fjava%2Flang%2FnatClass.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatClass.cc?ref=ca1906ff9add634551e681cdd94259401542e814", "patch": "@@ -936,7 +936,7 @@ _Jv_IsAssignableFrom (jclass target, jclass source)\n       if (__builtin_expect ((if_idt == NULL), false))\n \treturn false; // No class implementing TARGET has been loaded.    \n       jshort cl_iindex = cl_idt->cls.iindex;\n-      if (cl_iindex <= if_idt->iface.ioffsets[0])\n+      if (cl_iindex < if_idt->iface.ioffsets[0])\n         {\n \t  jshort offset = if_idt->iface.ioffsets[cl_iindex];\n \t  if (offset < cl_idt->cls.itable_length\n@@ -1181,8 +1181,7 @@ _Jv_GenerateITable (jclass klass, _Jv_ifaces *ifaces, jshort *itable_offsets)\n     { \n       jclass iface = ifaces->list[i];\n       itable_offsets[i] = itable_pos;\n-      itable_pos = _Jv_AppendPartialITable (klass, iface, itable,\n-                   itable_pos);\n+      itable_pos = _Jv_AppendPartialITable (klass, iface, itable, itable_pos);\n       \n       /* Create interface dispatch table for iface */\n       if (iface->idt == NULL)\n@@ -1325,7 +1324,7 @@ _Jv_FindIIndex (jclass *ifaces, jshort *offsets, jshort num)\n         {\n \t  if (j >= num)\n \t    goto found;\n-\t  if (i > ifaces[j]->idt->iface.ioffsets[0])\n+\t  if (i >= ifaces[j]->idt->iface.ioffsets[0])\n \t    continue;\n \t  int ioffset = ifaces[j]->idt->iface.ioffsets[i];\n \t  /* We can potentially share this position with another class. */"}]}