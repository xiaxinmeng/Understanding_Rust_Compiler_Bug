{"sha": "2cc94aa8d817bab3af6ff5b41135ad30ee50f09b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmNjOTRhYThkODE3YmFiM2FmNmZmNWI0MTEzNWFkMzBlZTUwZjA5Yg==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2019-11-15T00:06:30Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2019-11-15T00:06:30Z"}, "message": "Support C2x [[deprecated]] attribute.\n\nThis patch adds support for the C2x [[deprecated]] attribute.  All the\nactual logic for generating warnings can be identical to the GNU\n__attribute__ ((deprecated)), as can the attribute handler, so this is\njust a matter of wiring things up appropriately and adding the checks\nspecified in the standard.  Unlike for C++, this patch gives\n\"deprecated\" an entry in a table of standard attributes rather than\nremapping it internally to the GNU attribute, as that seems a cleaner\napproach to me.\n\nSpecifically, the only form of arguments to the attribute permitted in\nthe standard is (string-literal); empty parentheses are not permitted\nin the case of no arguments, and a string literal (which includes\nconcatenated adjacent string literals, because concatenation is an\nearlier phase of translation) cannot have further redundant\nparentheses around it.  For the case of empty parentheses, this patch\nmakes the C parser disallow them for all known attributes using the\n[[]] syntax, as done for C++.  For string literals (where the C++\nfront end is missing the check to avoid redundant parentheses, 92521\nfiled for that issue), a special case is inserted in the C parser.\n\nA known issue that I think can be addressed later as a bug fix is that\nthe warnings for the attribute being ignored in certain cases\n(attribute declarations, statements, most uses on types) ought to be\npedwarns, as those usages are constraint violations.\n\nBad handling of wide string literals with this attribute is also a\npre-existing bug (91182 - although that's filed as a C++ bug, the code\nin question is language-independent, in tree.c).\n\nBootstrapped with no regressions on x86_64-pc-linux-gnu.\n\ngcc/c:\n\t* c-decl.c (std_attribute_table): New.\n\t(c_init_decl_processing): Register attributes from\n\tstd_attribute_table.\n\t* c-parser.c (c_parser_attribute_arguments): Add arguments\n\trequire_string and allow_empty_args.  All callers changed.\n\t(c_parser_std_attribute): Set require_string argument for\n\t\"deprecated\" attribute.\n\ngcc/c-family:\n\t* c-attribs.c (handle_deprecated_attribute): Remove static.\n\t* c-common.h (handle_deprecated_attribute): Declare.\n\ngcc/testsuite:\n\t* gcc.dg/c2x-attr-deprecated-1.c, gcc.dg/c2x-attr-deprecated-2.c,\n\tgcc.dg/c2x-attr-deprecated-3.c: New tests.\n\nFrom-SVN: r278268", "tree": {"sha": "b815f47b6482a5df0d39aa4b4e98970218369860", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b815f47b6482a5df0d39aa4b4e98970218369860"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2cc94aa8d817bab3af6ff5b41135ad30ee50f09b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cc94aa8d817bab3af6ff5b41135ad30ee50f09b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2cc94aa8d817bab3af6ff5b41135ad30ee50f09b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cc94aa8d817bab3af6ff5b41135ad30ee50f09b/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a4ec3250596b03e1b2edcfbc9d903c1f189f077", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a4ec3250596b03e1b2edcfbc9d903c1f189f077", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a4ec3250596b03e1b2edcfbc9d903c1f189f077"}], "stats": {"total": 192, "additions": 185, "deletions": 7}, "files": [{"sha": "571cf2bc1b7523293ca208cbb2b0d99eac51fdea", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc94aa8d817bab3af6ff5b41135ad30ee50f09b/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc94aa8d817bab3af6ff5b41135ad30ee50f09b/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=2cc94aa8d817bab3af6ff5b41135ad30ee50f09b", "patch": "@@ -1,3 +1,8 @@\n+2019-11-15  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-attribs.c (handle_deprecated_attribute): Remove static.\n+\t* c-common.h (handle_deprecated_attribute): Declare.\n+\n 2019-11-14  Joseph Myers  <joseph@codesourcery.com>\n \n \t* c-lex.c (lex_charconst): Make CPP_UTF8CHAR constants unsigned"}, {"sha": "18b829f47fe594e5d84dfd5a5e10e90c9af9441f", "filename": "gcc/c-family/c-attribs.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc94aa8d817bab3af6ff5b41135ad30ee50f09b/gcc%2Fc-family%2Fc-attribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc94aa8d817bab3af6ff5b41135ad30ee50f09b/gcc%2Fc-family%2Fc-attribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-attribs.c?ref=2cc94aa8d817bab3af6ff5b41135ad30ee50f09b", "patch": "@@ -115,8 +115,6 @@ static tree handle_pure_attribute (tree *, tree, tree, int, bool *);\n static tree handle_tm_attribute (tree *, tree, tree, int, bool *);\n static tree handle_tm_wrap_attribute (tree *, tree, tree, int, bool *);\n static tree handle_novops_attribute (tree *, tree, tree, int, bool *);\n-static tree handle_deprecated_attribute (tree *, tree, tree, int,\n-\t\t\t\t\t bool *);\n static tree handle_vector_size_attribute (tree *, tree, tree, int,\n \t\t\t\t\t  bool *);\n static tree handle_nonnull_attribute (tree *, tree, tree, int, bool *);\n@@ -3468,7 +3466,7 @@ handle_novops_attribute (tree *node, tree ARG_UNUSED (name),\n /* Handle a \"deprecated\" attribute; arguments as in\n    struct attribute_spec.handler.  */\n \n-static tree\n+tree\n handle_deprecated_attribute (tree *node, tree name,\n \t\t\t     tree args, int flags,\n \t\t\t     bool *no_add_attrs)"}, {"sha": "ad40c15d92fdfa238a17b308fcc1b2690ff24ad6", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc94aa8d817bab3af6ff5b41135ad30ee50f09b/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc94aa8d817bab3af6ff5b41135ad30ee50f09b/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=2cc94aa8d817bab3af6ff5b41135ad30ee50f09b", "patch": "@@ -1357,6 +1357,7 @@ extern void warn_for_multistatement_macros (location_t, location_t,\n \n /* In c-attribs.c.  */\n extern bool attribute_takes_identifier_p (const_tree);\n+extern tree handle_deprecated_attribute (tree *, tree, tree, int, bool *);\n extern tree handle_unused_attribute (tree *, tree, tree, int, bool *);\n extern int parse_tm_stmt_attr (tree, int);\n extern int tm_attr_to_mask (tree);"}, {"sha": "fdc915329c83c1e6adebaa3d572eaa35f905ea58", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc94aa8d817bab3af6ff5b41135ad30ee50f09b/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc94aa8d817bab3af6ff5b41135ad30ee50f09b/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=2cc94aa8d817bab3af6ff5b41135ad30ee50f09b", "patch": "@@ -1,3 +1,13 @@\n+2019-11-15  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-decl.c (std_attribute_table): New.\n+\t(c_init_decl_processing): Register attributes from\n+\tstd_attribute_table.\n+\t* c-parser.c (c_parser_attribute_arguments): Add arguments\n+\trequire_string and allow_empty_args.  All callers changed.\n+\t(c_parser_std_attribute): Set require_string argument for\n+\t\"deprecated\" attribute.\n+\n 2019-11-14  Joseph Myers  <joseph@codesourcery.com>\n \n \t* c-parser.c (c_parser_postfix_expression)"}, {"sha": "a7f7c69678850d79ae7edd241d572fc291a543c2", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc94aa8d817bab3af6ff5b41135ad30ee50f09b/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc94aa8d817bab3af6ff5b41135ad30ee50f09b/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=2cc94aa8d817bab3af6ff5b41135ad30ee50f09b", "patch": "@@ -4336,6 +4336,16 @@ lookup_name_fuzzy (tree name, enum lookup_name_fuzzy_kind kind, location_t loc)\n }\n \n \f\n+/* Table of supported standard (C2x) attributes.  */\n+const struct attribute_spec std_attribute_table[] =\n+{\n+  /* { name, min_len, max_len, decl_req, type_req, fn_type_req,\n+       affects_type_identity, handler, exclude } */\n+  { \"deprecated\", 0, 1, false, false, false, false,\n+    handle_deprecated_attribute, NULL },\n+  { NULL, 0, 0, false, false, false, false, NULL, NULL }\n+};\n+\n /* Create the predefined scalar types of C,\n    and some nodes representing standard constants (0, 1, (void *) 0).\n    Initialize the global scope.\n@@ -4349,6 +4359,8 @@ c_init_decl_processing (void)\n   /* Initialize reserved words for parser.  */\n   c_parse_init ();\n \n+  register_scoped_attributes (std_attribute_table, NULL);\n+\n   current_function_decl = NULL_TREE;\n \n   gcc_obstack_init (&parser_obstack);"}, {"sha": "721158a2c3e979113faf735dbdb39c7703a0f90a", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc94aa8d817bab3af6ff5b41135ad30ee50f09b/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc94aa8d817bab3af6ff5b41135ad30ee50f09b/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=2cc94aa8d817bab3af6ff5b41135ad30ee50f09b", "patch": "@@ -4478,7 +4478,8 @@ c_parser_gnu_attribute_any_word (c_parser *parser)\n    allow identifiers declared as types to start the arguments?  */\n \n static tree\n-c_parser_attribute_arguments (c_parser *parser, bool takes_identifier)\n+c_parser_attribute_arguments (c_parser *parser, bool takes_identifier,\n+\t\t\t      bool require_string, bool allow_empty_args)\n {\n   vec<tree, va_gc> *expr_list;\n   tree attr_args;\n@@ -4518,7 +4519,21 @@ c_parser_attribute_arguments (c_parser *parser, bool takes_identifier)\n   else\n     {\n       if (c_parser_next_token_is (parser, CPP_CLOSE_PAREN))\n-\tattr_args = NULL_TREE;\n+\t{\n+\t  if (!allow_empty_args)\n+\t    error_at (c_parser_peek_token (parser)->location,\n+\t\t      \"parentheses must be omitted if \"\n+\t\t      \"attribute argument list is empty\");\n+\t  attr_args = NULL_TREE;\n+\t}\n+      else if (require_string)\n+\t{\n+\t  /* The only valid argument for this attribute is a string\n+\t     literal.  Handle this specially here to avoid accepting\n+\t     string literals with excess parentheses.  */\n+\t  tree string = c_parser_string_literal (parser, false, true).value;\n+\t  attr_args = build_tree_list (NULL_TREE, string);\n+\t}\n       else\n \t{\n \t  expr_list = c_parser_expr_list (parser, false, true,\n@@ -4601,7 +4616,8 @@ c_parser_gnu_attribute (c_parser *parser, tree attrs,\n \n   tree attr_args\n     = c_parser_attribute_arguments (parser,\n-\t\t\t\t    attribute_takes_identifier_p (attr_name));\n+\t\t\t\t    attribute_takes_identifier_p (attr_name),\n+\t\t\t\t    false, true);\n \n   attr = build_tree_list (attr_name, attr_args);\n   if (c_parser_next_token_is (parser, CPP_CLOSE_PAREN))\n@@ -4835,8 +4851,12 @@ c_parser_std_attribute (c_parser *parser)\n \t= (ns != NULL_TREE\n \t   && strcmp (IDENTIFIER_POINTER (ns), \"gnu\") == 0\n \t   && attribute_takes_identifier_p (name));\n+      bool require_string\n+\t= (ns == NULL_TREE\n+\t   && strcmp (IDENTIFIER_POINTER (name), \"deprecated\") == 0);\n       TREE_VALUE (attribute)\n-\t= c_parser_attribute_arguments (parser, takes_identifier);\n+\t= c_parser_attribute_arguments (parser, takes_identifier,\n+\t\t\t\t\trequire_string, false);\n     }\n   else\n     c_parser_balanced_token_sequence (parser);"}, {"sha": "17494d02032f4fba61300e2d27a3f5d82acdfeaf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc94aa8d817bab3af6ff5b41135ad30ee50f09b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc94aa8d817bab3af6ff5b41135ad30ee50f09b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2cc94aa8d817bab3af6ff5b41135ad30ee50f09b", "patch": "@@ -1,3 +1,8 @@\n+2019-11-15  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/c2x-attr-deprecated-1.c, gcc.dg/c2x-attr-deprecated-2.c,\n+\tgcc.dg/c2x-attr-deprecated-3.c: New tests.\n+\n 2019-11-14  Joseph Myers  <joseph@codesourcery.com>\n \n \t* gcc.dg/c11-utf8char-1.c, gcc.dg/c2x-utf8char-1.c,"}, {"sha": "de0ae51c1443269cdf3152c6b441d3eb64fc1ef4", "filename": "gcc/testsuite/gcc.dg/c2x-attr-deprecated-1.c", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc94aa8d817bab3af6ff5b41135ad30ee50f09b/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-deprecated-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc94aa8d817bab3af6ff5b41135ad30ee50f09b/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-deprecated-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-deprecated-1.c?ref=2cc94aa8d817bab3af6ff5b41135ad30ee50f09b", "patch": "@@ -0,0 +1,91 @@\n+/* Test C2x deprecated attribute: valid uses.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c2x -pedantic-errors\" } */\n+\n+/* Similar to tests from gnu2x-attrs-1.c, but using the standard\n+   attribute instead of gnu::deprecated, and sometimes using\n+   __deprecated__ or a string-literal argument.  */\n+\n+[[deprecated]] void f1 (void);\n+\n+[[deprecated]] typedef int dep_int;\n+\n+dep_int dv; /* { dg-warning \"deprecated\" } */\n+\n+void\n+g (void)\n+{\n+  f1 (); /* { dg-warning \"deprecated\" } */\n+}\n+\n+int\n+f2 (void)\n+{\n+  [[deprecated (\"for this reason\")]] int a = 1;\n+  return a; /* { dg-warning \"for this reason\" } */\n+}\n+\n+int\n+f3 (void)\n+{\n+  int a [[__deprecated__]] = 1;\n+  return a; /* { dg-warning \"deprecated\" } */\n+}\n+\n+struct s2 { [[__deprecated__(\"some other message\")]] int a; int b [[deprecated]]; } x;\n+\n+int\n+f4 (void)\n+{\n+  return x.a; /* { dg-warning \"some other message\" } */\n+}\n+\n+int\n+f5 (void)\n+{\n+  return x.b; /* { dg-warning \"deprecated\" } */\n+}\n+\n+enum e { E1 [[deprecated(\"third message\")]] };\n+\n+enum e\n+f6 (void)\n+{\n+  return E1; /* { dg-warning \"third message\" } */\n+}\n+\n+int\n+f7 ([[deprecated]] int y)\n+{\n+  return y; /* { dg-warning \"deprecated\" } */\n+}\n+\n+union [[__deprecated__]] u { int x; };\n+\n+void\n+f8 (void)\n+{\n+  union u var; /* { dg-warning \"deprecated\" } */\n+}\n+\n+enum [[deprecated(\"edep reason\")]] edep { E2 };\n+\n+void\n+f9 (void)\n+{\n+  enum edep var; /* { dg-warning \"edep reason\" } */\n+}\n+\n+union u2 { [[__deprecated__]] int a; int b [[deprecated]]; } y;\n+\n+int\n+f10 (void)\n+{\n+  return y.a; /* { dg-warning \"deprecated\" } */\n+}\n+\n+int\n+f11 (void)\n+{\n+  return y.b; /* { dg-warning \"deprecated\" } */\n+}"}, {"sha": "2d47606cce8127a13ad4d2ba68a9be35e514305f", "filename": "gcc/testsuite/gcc.dg/c2x-attr-deprecated-2.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc94aa8d817bab3af6ff5b41135ad30ee50f09b/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-deprecated-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc94aa8d817bab3af6ff5b41135ad30ee50f09b/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-deprecated-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-deprecated-2.c?ref=2cc94aa8d817bab3af6ff5b41135ad30ee50f09b", "patch": "@@ -0,0 +1,25 @@\n+/* Test C2x deprecated attribute: invalid contexts.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c2x -pedantic-errors\" } */\n+\n+/* This attribute is not valid in most cases on types other than their\n+   definitions, or on statements, or as an attribute-declaration.  */\n+\n+[[deprecated]]; /* { dg-warning \"ignored\" } */\n+\n+int [[deprecated]] var; /* { dg-warning \"ignored\" } */\n+/* { dg-message \"that appertains to a type-specifier\" \"appertains\" { target *-*-* } .-1 } */\n+\n+int array_with_dep_type[2] [[deprecated]]; /* { dg-warning \"ignored\" } */\n+/* { dg-message \"that appertains to a type-specifier\" \"appertains\" { target *-*-* } .-1 } */\n+\n+void fn_with_dep_type () [[deprecated]]; /* { dg-warning \"ignored\" } */\n+/* { dg-message \"that appertains to a type-specifier\" \"appertains\" { target *-*-* } .-1 } */\n+\n+void\n+f (void)\n+{\n+  int a;\n+  [[deprecated]]; /* { dg-warning \"ignored\" } */\n+  [[deprecated]] a = 1; /* { dg-warning \"ignored\" } */\n+}"}, {"sha": "044725e5123fd0570da78f4a5cf92bbc7b59bd12", "filename": "gcc/testsuite/gcc.dg/c2x-attr-deprecated-3.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc94aa8d817bab3af6ff5b41135ad30ee50f09b/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-deprecated-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc94aa8d817bab3af6ff5b41135ad30ee50f09b/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-deprecated-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-deprecated-3.c?ref=2cc94aa8d817bab3af6ff5b41135ad30ee50f09b", "patch": "@@ -0,0 +1,11 @@\n+/* Test C2x deprecated attribute: invalid syntax.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c2x -pedantic-errors\" } */\n+\n+[[deprecated()]] int a; /* { dg-error \"parentheses must be omitted if attribute argument list is empty\" } */\n+\n+[[deprecated(0)]] int b; /* { dg-error \"expected\" } */\n+\n+[[deprecated(\"\", 123)]] int c; /* { dg-error \"expected\" } */\n+\n+[[deprecated((\"\"))]] int d; /* { dg-error \"expected\" } */"}]}