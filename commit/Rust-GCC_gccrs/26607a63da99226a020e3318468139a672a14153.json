{"sha": "26607a63da99226a020e3318468139a672a14153", "node_id": "C_kwDOANBUbNoAKDI2NjA3YTYzZGE5OTIyNmEwMjBlMzMxODQ2ODEzOWE2NzJhMTQxNTM", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-09-22T11:04:57Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-09-22T12:39:32Z"}, "message": "remove -gz=zlib-gnu option value\n\nThe option value is legacy and probably not used at all,\nthus ignore it.\n\ngcc/ChangeLog:\n\n\t* configure: Regenerate.\n\t* configure.ac: Simplify to gcc_cv_ld_compress_debug={0,1}\n\tand gcc_cv_as_compress_debug={0,1}.\n\t* doc/invoke.texi: Document the removal.\n\t* gcc.cc (LINK_COMPRESS_DEBUG_SPEC): Simplify and ignore\n\t  zlib-gnu.\n\t(ASM_COMPRESS_DEBUG_SPEC): Likewise.\n\nCo-Authored-By: Fangrui Song <i@maskray.me>", "tree": {"sha": "a7f51046bc206eaa6d6bfcbf23d2acb0d76fd3dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a7f51046bc206eaa6d6bfcbf23d2acb0d76fd3dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26607a63da99226a020e3318468139a672a14153", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26607a63da99226a020e3318468139a672a14153", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26607a63da99226a020e3318468139a672a14153", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26607a63da99226a020e3318468139a672a14153/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86254629b636db579616befde49022f098af8148", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86254629b636db579616befde49022f098af8148", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86254629b636db579616befde49022f098af8148"}], "stats": {"total": 135, "additions": 20, "deletions": 115}, "files": [{"sha": "70a013e9a304d387cb491f2529ba66cf995ce7e6", "filename": "gcc/configure", "status": "modified", "additions": 5, "deletions": 44, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26607a63da99226a020e3318468139a672a14153/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26607a63da99226a020e3318468139a672a14153/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=26607a63da99226a020e3318468139a672a14153", "patch": "@@ -29727,16 +29727,9 @@ else\n    if $gcc_cv_as --compress-debug-sections -o conftest.o conftest.s 2>&1 | grep -i warning > /dev/null\n    then\n      gcc_cv_as_compress_debug=0\n-   # Since binutils 2.26, gas supports --compress-debug-sections=type,\n+   # Since binutils 2.26, gas supports --compress-debug-sections=zlib,\n    # defaulting to the ELF gABI format.\n-   elif $gcc_cv_as --compress-debug-sections=zlib-gnu -o conftest.o conftest.s > /dev/null 2>&1\n-   then\n-     gcc_cv_as_compress_debug=2\n-     gcc_cv_as_compress_debug_option=\"--compress-debug-sections\"\n-     gcc_cv_as_no_compress_debug_option=\"--nocompress-debug-sections\"\n-   # Before binutils 2.26, gas only supported --compress-debug-options and\n-   # emitted the traditional GNU format.\n-   elif $gcc_cv_as --compress-debug-sections -o conftest.o conftest.s > /dev/null 2>&1\n+   elif $gcc_cv_as --compress-debug-sections=zlib -o conftest.o conftest.s > /dev/null 2>&1\n    then\n      gcc_cv_as_compress_debug=1\n      gcc_cv_as_compress_debug_option=\"--compress-debug-sections\"\n@@ -30254,48 +30247,16 @@ $as_echo \"$gcc_cv_ld_eh_gc_sections_bug\" >&6; }\n \n { $as_echo \"$as_me:${as_lineno-$LINENO}: checking linker for compressed debug sections\" >&5\n $as_echo_n \"checking linker for compressed debug sections... \" >&6; }\n-# gold/gld support compressed debug sections since binutils 2.19/2.21\n-# In binutils 2.26, gld gained support for the ELF gABI format.\n-if test $in_tree_ld = yes ; then\n-  gcc_cv_ld_compress_debug=0\n-  if test $ld_is_mold = yes; then\n-    gcc_cv_ld_compress_debug=3\n-    gcc_cv_ld_compress_debug_option=\"--compress-debug-sections\"\n-  elif test \"$gcc_cv_gld_major_version\" -eq 2 -a \"$gcc_cv_gld_minor_version\" -ge 19 -o \"$gcc_cv_gld_major_version\" -gt 2 \\\n-     && test $in_tree_ld_is_elf = yes && test $ld_is_gold = yes; then\n-    gcc_cv_ld_compress_debug=2\n-    gcc_cv_ld_compress_debug_option=\"--compress-debug-sections\"\n-  elif test \"$gcc_cv_gld_major_version\" -eq 2 -a \"$gcc_cv_gld_minor_version\" -ge 26 -o \"$gcc_cv_gld_major_version\" -gt 2 \\\n-     && test $in_tree_ld_is_elf = yes && test $ld_is_gold = no; then\n-    gcc_cv_ld_compress_debug=3\n-    gcc_cv_ld_compress_debug_option=\"--compress-debug-sections\"\n-  elif test \"$gcc_cv_gld_major_version\" -eq 2 -a \"$gcc_cv_gld_minor_version\" -ge 21 -o \"$gcc_cv_gld_major_version\" -gt 2 \\\n-     && test $in_tree_ld_is_elf = yes; then\n+# GNU ld/gold support --compressed-debug-sections=zlib since binutils 2.26.\n+if $gcc_cv_ld --help 2>&1 | grep -- '--compress-debug-sections.*\\<zlib-gabi\\>' > /dev/null; then\n     gcc_cv_ld_compress_debug=1\n-  fi\n-elif echo \"$ld_ver\" | grep GNU > /dev/null; then\n-  if test $ld_is_mold = yes; then\n-    gcc_cv_ld_compress_debug=3\n-    gcc_cv_ld_compress_debug_option=\"--compress-debug-sections\"\n-  elif test \"$ld_vers_major\" -lt 2 \\\n-     || test \"$ld_vers_major\" -eq 2 -a \"$ld_vers_minor\" -lt 21; then\n-    gcc_cv_ld_compress_debug=0\n-  elif test \"$ld_vers_major\" -eq 2 -a \"$ld_vers_minor\" -lt 26; then\n-    gcc_cv_ld_compress_debug=1\n-  else\n-    gcc_cv_ld_compress_debug=3\n-    gcc_cv_ld_compress_debug_option=\"--compress-debug-sections\"\n-  fi\n-  if test $ld_is_gold = yes; then\n-    gcc_cv_ld_compress_debug=2\n     gcc_cv_ld_compress_debug_option=\"--compress-debug-sections\"\n-  fi\n else\n   case \"${target}\" in\n     *-*-solaris2*)\n       # Introduced in Solaris 11.2.\n       if $gcc_cv_ld --help 2>&1 | grep -- '-z compress-sections' > /dev/null; then\n-        gcc_cv_ld_compress_debug=3\n+        gcc_cv_ld_compress_debug=1\n         gcc_cv_ld_compress_debug_option=\"-z compress-sections\"\n       else\n         gcc_cv_ld_compress_debug=0"}, {"sha": "96e10d7c19420c67070e75d87cca2bd31741bc4b", "filename": "gcc/configure.ac", "status": "modified", "additions": 5, "deletions": 44, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26607a63da99226a020e3318468139a672a14153/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26607a63da99226a020e3318468139a672a14153/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=26607a63da99226a020e3318468139a672a14153", "patch": "@@ -5732,16 +5732,9 @@ gcc_GAS_CHECK_FEATURE([compressed debug sections],\n    if $gcc_cv_as --compress-debug-sections -o conftest.o conftest.s 2>&1 | grep -i warning > /dev/null\n    then\n      gcc_cv_as_compress_debug=0\n-   # Since binutils 2.26, gas supports --compress-debug-sections=type,\n+   # Since binutils 2.26, gas supports --compress-debug-sections=zlib,\n    # defaulting to the ELF gABI format.\n-   elif $gcc_cv_as --compress-debug-sections=zlib-gnu -o conftest.o conftest.s > /dev/null 2>&1\n-   then\n-     gcc_cv_as_compress_debug=2\n-     gcc_cv_as_compress_debug_option=\"--compress-debug-sections\"\n-     gcc_cv_as_no_compress_debug_option=\"--nocompress-debug-sections\"\n-   # Before binutils 2.26, gas only supported --compress-debug-options and\n-   # emitted the traditional GNU format.\n-   elif $gcc_cv_as --compress-debug-sections -o conftest.o conftest.s > /dev/null 2>&1\n+   elif $gcc_cv_as --compress-debug-sections=zlib -o conftest.o conftest.s > /dev/null 2>&1\n    then\n      gcc_cv_as_compress_debug=1\n      gcc_cv_as_compress_debug_option=\"--compress-debug-sections\"\n@@ -6130,49 +6123,17 @@ fi\n AC_MSG_RESULT($gcc_cv_ld_eh_gc_sections_bug)\n \n AC_MSG_CHECKING(linker for compressed debug sections)\n-# gold/gld support compressed debug sections since binutils 2.19/2.21\n-# In binutils 2.26, gld gained support for the ELF gABI format.\n-if test $in_tree_ld = yes ; then\n-  gcc_cv_ld_compress_debug=0\n-  if test $ld_is_mold = yes; then\n-    gcc_cv_ld_compress_debug=3\n-    gcc_cv_ld_compress_debug_option=\"--compress-debug-sections\"\n-  elif test \"$gcc_cv_gld_major_version\" -eq 2 -a \"$gcc_cv_gld_minor_version\" -ge 19 -o \"$gcc_cv_gld_major_version\" -gt 2 \\\n-     && test $in_tree_ld_is_elf = yes && test $ld_is_gold = yes; then\n-    gcc_cv_ld_compress_debug=2\n-    gcc_cv_ld_compress_debug_option=\"--compress-debug-sections\"\n-  elif test \"$gcc_cv_gld_major_version\" -eq 2 -a \"$gcc_cv_gld_minor_version\" -ge 26 -o \"$gcc_cv_gld_major_version\" -gt 2 \\\n-     && test $in_tree_ld_is_elf = yes && test $ld_is_gold = no; then\n-    gcc_cv_ld_compress_debug=3\n-    gcc_cv_ld_compress_debug_option=\"--compress-debug-sections\"\n-  elif test \"$gcc_cv_gld_major_version\" -eq 2 -a \"$gcc_cv_gld_minor_version\" -ge 21 -o \"$gcc_cv_gld_major_version\" -gt 2 \\\n-     && test $in_tree_ld_is_elf = yes; then\n+# GNU ld/gold support --compressed-debug-sections=zlib since binutils 2.26.\n+if $gcc_cv_ld --help 2>&1 | grep -- '--compress-debug-sections.*\\<zlib-gabi\\>' > /dev/null; then\n     gcc_cv_ld_compress_debug=1\n-  fi\n-elif echo \"$ld_ver\" | grep GNU > /dev/null; then\n-  if test $ld_is_mold = yes; then\n-    gcc_cv_ld_compress_debug=3\n-    gcc_cv_ld_compress_debug_option=\"--compress-debug-sections\"\n-  elif test \"$ld_vers_major\" -lt 2 \\\n-     || test \"$ld_vers_major\" -eq 2 -a \"$ld_vers_minor\" -lt 21; then\n-    gcc_cv_ld_compress_debug=0\n-  elif test \"$ld_vers_major\" -eq 2 -a \"$ld_vers_minor\" -lt 26; then\n-    gcc_cv_ld_compress_debug=1\n-  else\n-    gcc_cv_ld_compress_debug=3\n-    gcc_cv_ld_compress_debug_option=\"--compress-debug-sections\"\n-  fi\n-  if test $ld_is_gold = yes; then\n-    gcc_cv_ld_compress_debug=2\n     gcc_cv_ld_compress_debug_option=\"--compress-debug-sections\"\n-  fi\n else\n changequote(,)dnl\n   case \"${target}\" in\n     *-*-solaris2*)\n       # Introduced in Solaris 11.2.\n       if $gcc_cv_ld --help 2>&1 | grep -- '-z compress-sections' > /dev/null; then\n-        gcc_cv_ld_compress_debug=3\n+        gcc_cv_ld_compress_debug=1\n         gcc_cv_ld_compress_debug_option=\"-z compress-sections\"\n       else\n         gcc_cv_ld_compress_debug=0"}, {"sha": "9fdcb5f60d969f44ce1affafbabbfd3890530108", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26607a63da99226a020e3318468139a672a14153/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26607a63da99226a020e3318468139a672a14153/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=26607a63da99226a020e3318468139a672a14153", "patch": "@@ -11077,12 +11077,11 @@ location views are enabled.\n Produce compressed debug sections in DWARF format, if that is supported.\n If @var{type} is not given, the default type depends on the capabilities\n of the assembler and linker used.  @var{type} may be one of\n-@samp{none} (don't compress debug sections), @samp{zlib} (use zlib\n-compression in ELF gABI format), or @samp{zlib-gnu} (use zlib\n-compression in traditional GNU format).  If the linker doesn't support\n-writing compressed debug sections, the option is rejected.  Otherwise,\n-if the assembler does not support them, @option{-gz} is silently ignored\n-when producing object files.\n+@samp{none} (don't compress debug sections), or @samp{zlib} (use zlib\n+compression in ELF gABI format).  If the linker doesn't support writing\n+compressed debug sections, the option is rejected.  Otherwise, if the\n+assembler does not support them, @option{-gz} is silently ignored when\n+producing object files.\n \n @item -femit-struct-debug-baseonly\n @opindex femit-struct-debug-baseonly"}, {"sha": "7578988efa9cbbc943c42b6aba3f165aba76fd1e", "filename": "gcc/gcc.cc", "status": "modified", "additions": 5, "deletions": 21, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26607a63da99226a020e3318468139a672a14153/gcc%2Fgcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26607a63da99226a020e3318468139a672a14153/gcc%2Fgcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.cc?ref=26607a63da99226a020e3318468139a672a14153", "patch": "@@ -831,21 +831,11 @@ proper position among the other output files.  */\n #define LINK_COMPRESS_DEBUG_SPEC \\\n \t\" %{gz*:%e-gz is not supported in this configuration} \"\n #elif HAVE_LD_COMPRESS_DEBUG == 1\n-/* GNU style on input, GNU ld options.  Reject, not useful.  */\n-#define LINK_COMPRESS_DEBUG_SPEC \\\n-\t\" %{gz*:%e-gz is not supported in this configuration} \"\n-#elif HAVE_LD_COMPRESS_DEBUG == 2\n-/* GNU style, GNU gold options.  */\n-#define LINK_COMPRESS_DEBUG_SPEC \\\n-\t\" %{gz|gz=zlib-gnu:\" LD_COMPRESS_DEBUG_OPTION \"=zlib}\" \\\n-\t\" %{gz=none:\"        LD_COMPRESS_DEBUG_OPTION \"=none}\" \\\n-\t\" %{gz=zlib:%e-gz=zlib is not supported in this configuration} \"\n-#elif HAVE_LD_COMPRESS_DEBUG == 3\n /* ELF gABI style.  */\n #define LINK_COMPRESS_DEBUG_SPEC \\\n \t\" %{gz|gz=zlib:\"  LD_COMPRESS_DEBUG_OPTION \"=zlib}\" \\\n \t\" %{gz=none:\"\t  LD_COMPRESS_DEBUG_OPTION \"=none}\" \\\n-\t\" %{gz=zlib-gnu:\" LD_COMPRESS_DEBUG_OPTION \"=zlib-gnu} \"\n+\t\" %{gz=zlib-gnu:}\" /* Ignore silently zlib-gnu option value.  */\n #else\n #error Unknown value for HAVE_LD_COMPRESS_DEBUG.\n #endif\n@@ -885,31 +875,25 @@ proper position among the other output files.  */\n #endif\n \n /* Assembler options for compressed debug sections.  */\n-#if HAVE_LD_COMPRESS_DEBUG < 2\n+#if HAVE_LD_COMPRESS_DEBUG == 0\n /* Reject if the linker cannot write compressed debug sections.  */\n #define ASM_COMPRESS_DEBUG_SPEC \\\n \t\" %{gz*:%e-gz is not supported in this configuration} \"\n-#else /* HAVE_LD_COMPRESS_DEBUG >= 2 */\n+#else /* HAVE_LD_COMPRESS_DEBUG >= 1 */\n #if HAVE_AS_COMPRESS_DEBUG == 0\n /* No assembler support.  Ignore silently.  */\n #define ASM_COMPRESS_DEBUG_SPEC \\\n \t\" %{gz*:} \"\n #elif HAVE_AS_COMPRESS_DEBUG == 1\n-/* GNU style, GNU as options.  */\n-#define ASM_COMPRESS_DEBUG_SPEC \\\n-\t\" %{gz|gz=zlib-gnu:\" AS_COMPRESS_DEBUG_OPTION \"}\" \\\n-\t\" %{gz=none:\"        AS_NO_COMPRESS_DEBUG_OPTION \"}\" \\\n-\t\" %{gz=zlib:%e-gz=zlib is not supported in this configuration} \"\n-#elif HAVE_AS_COMPRESS_DEBUG == 2\n /* ELF gABI style.  */\n #define ASM_COMPRESS_DEBUG_SPEC \\\n \t\" %{gz|gz=zlib:\"  AS_COMPRESS_DEBUG_OPTION \"=zlib}\" \\\n \t\" %{gz=none:\"\t  AS_COMPRESS_DEBUG_OPTION \"=none}\" \\\n-\t\" %{gz=zlib-gnu:\" AS_COMPRESS_DEBUG_OPTION \"=zlib-gnu} \"\n+\t\" %{gz=zlib-gnu:}\" /* Ignore silently zlib-gnu option value.  */\n #else\n #error Unknown value for HAVE_AS_COMPRESS_DEBUG.\n #endif\n-#endif /* HAVE_LD_COMPRESS_DEBUG >= 2 */\n+#endif /* HAVE_LD_COMPRESS_DEBUG >= 1 */\n \n /* Define ASM_DEBUG_SPEC to be a spec suitable for translating '-g'\n    to the assembler, when compiling assembly sources only.  */"}]}