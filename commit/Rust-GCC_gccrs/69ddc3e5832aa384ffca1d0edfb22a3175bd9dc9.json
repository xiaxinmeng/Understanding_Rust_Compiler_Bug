{"sha": "69ddc3e5832aa384ffca1d0edfb22a3175bd9dc9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjlkZGMzZTU4MzJhYTM4NGZmY2ExZDBlZGZiMjJhMzE3NWJkOWRjOQ==", "commit": {"author": {"name": "Julia Koval", "email": "julia.koval@intel.com", "date": "2017-12-07T06:28:55Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2017-12-07T06:28:55Z"}, "message": "Enable VAES support [2/5]\n\ngcc/\n\t* config.gcc: Add vaesintrin.h.\n\t* config/i386/i386-builtin-types.def (V64QI_FTYPE_V64QI_V64QI): New type.\n\t* config/i386/i386-builtin.def (__builtin_ia32_vaesdec_v16qi,\n\t__builtin_ia32_vaesdec_v32qi, __builtin_ia32_vaesdec_v64qi): New builtins.\n\t* config/i386/i386.c (ix86_expand_args_builtin): Handle new type.\n\t* config/i386/immintrin.h: Include vaesintrin.h.\n\t* config/i386/sse.md (vaesdec_<mode>): New pattern.\n\t* config/i386/vaesintrin.h (_mm256_aesdec_epi128, _mm512_aesdec_epi128,\n\t_mm_aesdec_epi128): New intrinsics.\n\ngcc/testsuite/\n\t* gcc.target/i386/avx512-check.h: Handle bit_VAES.\n\t* gcc.target/i386/avx512f-aesdec-2.c: New test.\n\t* gcc.target/i386/avx512fvl-vaes-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-aesdec-2.c: Ditto.\n\t* gcc.target/i386/i386.exp (check_effective_target_avx512vaes): New.\n\nFrom-SVN: r255461", "tree": {"sha": "3113c79cb8d9f05cf7489d725dfe7fac8133f852", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3113c79cb8d9f05cf7489d725dfe7fac8133f852"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/69ddc3e5832aa384ffca1d0edfb22a3175bd9dc9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69ddc3e5832aa384ffca1d0edfb22a3175bd9dc9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69ddc3e5832aa384ffca1d0edfb22a3175bd9dc9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69ddc3e5832aa384ffca1d0edfb22a3175bd9dc9/comments", "author": {"login": "vaalfreja", "id": 5216345, "node_id": "MDQ6VXNlcjUyMTYzNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/5216345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vaalfreja", "html_url": "https://github.com/vaalfreja", "followers_url": "https://api.github.com/users/vaalfreja/followers", "following_url": "https://api.github.com/users/vaalfreja/following{/other_user}", "gists_url": "https://api.github.com/users/vaalfreja/gists{/gist_id}", "starred_url": "https://api.github.com/users/vaalfreja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vaalfreja/subscriptions", "organizations_url": "https://api.github.com/users/vaalfreja/orgs", "repos_url": "https://api.github.com/users/vaalfreja/repos", "events_url": "https://api.github.com/users/vaalfreja/events{/privacy}", "received_events_url": "https://api.github.com/users/vaalfreja/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "38fed05af6a991405af02319a95a036df2bbaa07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38fed05af6a991405af02319a95a036df2bbaa07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38fed05af6a991405af02319a95a036df2bbaa07"}], "stats": {"total": 599, "additions": 597, "deletions": 2}, "files": [{"sha": "b408465fa04c4086b69639aa53e6590667933880", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69ddc3e5832aa384ffca1d0edfb22a3175bd9dc9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69ddc3e5832aa384ffca1d0edfb22a3175bd9dc9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=69ddc3e5832aa384ffca1d0edfb22a3175bd9dc9", "patch": "@@ -1,3 +1,15 @@\n+2017-12-07  Julia Koval  <julia.koval@intel.com>\n+\n+\t* config.gcc: Add vaesintrin.h.\n+\t* config/i386/i386-builtin-types.def (V64QI_FTYPE_V64QI_V64QI): New type.\n+\t* config/i386/i386-builtin.def (__builtin_ia32_vaesdec_v16qi,\n+\t__builtin_ia32_vaesdec_v32qi, __builtin_ia32_vaesdec_v64qi): New builtins.\n+\t* config/i386/i386.c (ix86_expand_args_builtin): Handle new type.\n+\t* config/i386/immintrin.h: Include vaesintrin.h.\n+\t* config/i386/sse.md (vaesdec_<mode>): New pattern.\n+\t* config/i386/vaesintrin.h (_mm256_aesdec_epi128, _mm512_aesdec_epi128,\n+\t_mm_aesdec_epi128): New intrinsics.\n+\n 2017-12-06  David Malcolm  <dmalcolm@redhat.com>\n \n \t* Makefile.in (C_COMMON_OBJS): Add c-family/c-spellcheck.o."}, {"sha": "870e35afaec6b53288f7d17879bfcb32a26fc1d2", "filename": "gcc/config.gcc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69ddc3e5832aa384ffca1d0edfb22a3175bd9dc9/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69ddc3e5832aa384ffca1d0edfb22a3175bd9dc9/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=69ddc3e5832aa384ffca1d0edfb22a3175bd9dc9", "patch": "@@ -380,7 +380,8 @@ i[34567]86-*-*)\n \t\t       avx512vpopcntdqintrin.h clwbintrin.h mwaitxintrin.h\n \t\t       clzerointrin.h pkuintrin.h sgxintrin.h cetintrin.h\n \t\t       gfniintrin.h cet.h avx512vbmi2intrin.h\n-\t\t       avx512vbmi2vlintrin.h\"\n+\t\t       avx512vbmi2vlintrin.h avx512vnniintrin.h\n+\t\t       avx512vnnivlintrin.h\"\n \t;;\n x86_64-*-*)\n \tcpu_type=i386\n@@ -406,7 +407,8 @@ x86_64-*-*)\n \t\t       avx512vpopcntdqintrin.h clwbintrin.h mwaitxintrin.h\n \t\t       clzerointrin.h pkuintrin.h sgxintrin.h cetintrin.h\n \t\t       gfniintrin.h cet.h avx512vbmi2intrin.h\n-\t\t       avx512vbmi2vlintrin.h\"\n+\t\t       avx512vbmi2vlintrin.h avx512vnniintrin.h\n+\t\t       avx512vnnivlintrin.h\"\n \t;;\n ia64-*-*)\n \textra_headers=ia64intrin.h"}, {"sha": "9a48e28b732f6f81fcc25dbebf9e5553af561ab5", "filename": "gcc/config/i386/avx512vnniintrin.h", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69ddc3e5832aa384ffca1d0edfb22a3175bd9dc9/gcc%2Fconfig%2Fi386%2Favx512vnniintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69ddc3e5832aa384ffca1d0edfb22a3175bd9dc9/gcc%2Fconfig%2Fi386%2Favx512vnniintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512vnniintrin.h?ref=69ddc3e5832aa384ffca1d0edfb22a3175bd9dc9", "patch": "@@ -0,0 +1,66 @@\n+/* Copyright (C) 2013-2017 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef _IMMINTRIN_H_INCLUDED\n+#error \"Never use <avx512vnniintrin.h> directly; include <immintrin.h> instead.\"\n+#endif\n+\n+#ifndef __AVX512VNNIINTRIN_H_INCLUDED\n+#define __AVX512VNNIINTRIN_H_INCLUDED\n+\n+#if !defined(__AVX512VNNI__) || !defined(__AVX512F__)\n+#pragma GCC push_options\n+#pragma GCC target(\"avx512vnni,avx512f\")\n+#define __DISABLE_AVX512VNNI__\n+#endif /* __AVX512VNNI__ */\n+\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_dpbusd_epi32 (__m512i __A, __m512i __B, __m512i __C)\n+{\n+  return (__m512i) __builtin_ia32_vpdpbusd_v16si ((__v16si)__A, (__v16si) __B,\n+\t\t\t\t\t\t\t\t(__v16si) __C);\n+}\n+\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_dpbusd_epi32 (__m512i __A, __mmask16 __B, __m512i __C, __m512i __D)\n+{\n+  return (__m512i)__builtin_ia32_vpdpbusd_v16si_mask ((__v16si)__A,\n+\t\t\t\t(__v16si) __C, (__v16si) __D, (__mmask16)__B);\n+}\n+\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_dpbusd_epi32 (__mmask16 __A, __m512i __B, __m512i __C,\n+\t\t\t\t\t\t\t__m512i __D)\n+{\n+  return (__m512i)__builtin_ia32_vpdpbusd_v16si_maskz ((__v16si)__B,\n+\t\t\t\t(__v16si) __C, (__v16si) __D, (__mmask16)__A);\n+}\n+#ifdef __DISABLE_AVX512VNNI__\n+#undef __DISABLE_AVX512VNNI__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_AVX512VNNI__ */\n+\n+#endif /* __AVX512VNNIINTRIN_H_INCLUDED */"}, {"sha": "b5fea902ad253e49859821ca1e4f181a32d5f6ff", "filename": "gcc/config/i386/avx512vnnivlintrin.h", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69ddc3e5832aa384ffca1d0edfb22a3175bd9dc9/gcc%2Fconfig%2Fi386%2Favx512vnnivlintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69ddc3e5832aa384ffca1d0edfb22a3175bd9dc9/gcc%2Fconfig%2Fi386%2Favx512vnnivlintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512vnnivlintrin.h?ref=69ddc3e5832aa384ffca1d0edfb22a3175bd9dc9", "patch": "@@ -0,0 +1,89 @@\n+/* Copyright (C) 2013-2017 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef _IMMINTRIN_H_INCLUDED\n+#error \"Never use <avx512vnnivlintrin.h> directly; include <immintrin.h> instead.\"\n+#endif\n+\n+#ifndef _AVX512VNNIVLINTRIN_H_INCLUDED\n+#define _AVX512VNNIVLINTRIN_H_INCLUDED\n+\n+#if !defined(__AVX512VL__) || !defined(__AVX512VNNI__)\n+#pragma GCC push_options\n+#pragma GCC target(\"avx512vnni,avx512vl\")\n+#define __DISABLE_AVX512VNNIVL__\n+#endif /* __AVX512VNNIVL__ */\n+\n+extern __inline __m256i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_dpbusd_epi32 (__m256i __A, __m256i __B, __m256i __C)\n+{\n+  return (__m256i) __builtin_ia32_vpdpbusd_v8si ((__v8si)__A, (__v8si) __B,\n+\t\t\t\t\t\t\t\t(__v8si) __C);\n+}\n+\n+extern __inline __m256i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_dpbusd_epi32 (__m256i __A, __mmask8 __B, __m256i __C, __m256i __D)\n+{\n+  return (__m256i)__builtin_ia32_vpdpbusd_v8si_mask ((__v8si)__A, (__v8si) __C,\n+\t\t\t\t\t\t(__v8si) __D, (__mmask8)__B);\n+}\n+\n+extern __inline __m256i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_maskz_dpbusd_epi32 (__mmask8 __A, __m256i __B, __m256i __C, __m256i __D)\n+{\n+  return (__m256i)__builtin_ia32_vpdpbusd_v8si_maskz ((__v8si)__B,\n+\t\t\t\t(__v8si) __C, (__v8si) __D, (__mmask8)__A);\n+}\n+\n+extern __inline __m128i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_dpbusd_epi32 (__m128i __A, __m128i __B, __m128i __C)\n+{\n+  return (__m128i) __builtin_ia32_vpdpbusd_v4si ((__v4si)__A, (__v4si) __B,\n+\t\t\t\t\t\t\t\t(__v4si) __C);\n+}\n+\n+extern __inline __m128i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_dpbusd_epi32 (__m128i __A, __mmask8 __B, __m128i __C, __m128i __D)\n+{\n+  return (__m128i)__builtin_ia32_vpdpbusd_v4si_mask ((__v4si)__A, (__v4si) __C,\n+\t\t\t\t\t\t(__v4si) __D, (__mmask8)__B);\n+}\n+\n+extern __inline __m128i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_dpbusd_epi32 (__mmask8 __A, __m128i __B, __m128i __C, __m128i __D)\n+{\n+  return (__m128i)__builtin_ia32_vpdpbusd_v4si_maskz ((__v4si)__B,\n+\t\t\t\t(__v4si) __C, (__v4si) __D, (__mmask8)__A);\n+}\n+\n+#ifdef __DISABLE_AVX512VNNIVL__\n+#undef __DISABLE_AVX512VNNIVL__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_AVX512VNNIVL__ */\n+#endif /* __DISABLE_AVX512VNNIVL__ */"}, {"sha": "02a2b7a287c3a871e34ce67236452760a22bfd18", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69ddc3e5832aa384ffca1d0edfb22a3175bd9dc9/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69ddc3e5832aa384ffca1d0edfb22a3175bd9dc9/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=69ddc3e5832aa384ffca1d0edfb22a3175bd9dc9", "patch": "@@ -2721,6 +2721,48 @@ BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshldv_v2di, \"__builtin_ia32_vpshl\n BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshldv_v2di_mask, \"__builtin_ia32_vpshldv_v2di_mask\", IX86_BUILTIN_VPSHLDVV2DI_MASK, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI_V2DI_INT)\n BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshldv_v2di_maskz, \"__builtin_ia32_vpshldv_v2di_maskz\", IX86_BUILTIN_VPSHLDVV2DI_MASKZ, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI_V2DI_INT)\n \n+/* VNNI */\n+\n+BDESC (OPTION_MASK_ISA_AVX512VNNI, CODE_FOR_vpdpbusd_v16si, \"__builtin_ia32_vpdpbusd_v16si\", IX86_BUILTIN_VPDPBUSDV16SI, UNKNOWN, (int) V16SI_FTYPE_V16SI_V16SI_V16SI)\n+BDESC (OPTION_MASK_ISA_AVX512VNNI, CODE_FOR_vpdpbusd_v16si_mask, \"__builtin_ia32_vpdpbusd_v16si_mask\", IX86_BUILTIN_VPDPBUSDV16SI_MASK, UNKNOWN, (int) V16SI_FTYPE_V16SI_V16SI_V16SI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VNNI, CODE_FOR_vpdpbusd_v16si_maskz, \"__builtin_ia32_vpdpbusd_v16si_maskz\", IX86_BUILTIN_VPDPBUSDV16SI_MASKZ, UNKNOWN, (int) V16SI_FTYPE_V16SI_V16SI_V16SI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VNNI, CODE_FOR_vpdpbusd_v8si, \"__builtin_ia32_vpdpbusd_v8si\", IX86_BUILTIN_VPDPBUSDV8SI, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI_V8SI)\n+BDESC (OPTION_MASK_ISA_AVX512VNNI, CODE_FOR_vpdpbusd_v8si_mask, \"__builtin_ia32_vpdpbusd_v8si_mask\", IX86_BUILTIN_VPDPBUSDV8SI_MASK, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI_V8SI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VNNI, CODE_FOR_vpdpbusd_v8si_maskz, \"__builtin_ia32_vpdpbusd_v8si_maskz\", IX86_BUILTIN_VPDPBUSDV8SI_MASKZ, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI_V8SI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VNNI, CODE_FOR_vpdpbusd_v4si, \"__builtin_ia32_vpdpbusd_v4si\", IX86_BUILTIN_VPDPBUSDV4SI, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI_V4SI)\n+BDESC (OPTION_MASK_ISA_AVX512VNNI, CODE_FOR_vpdpbusd_v4si_mask, \"__builtin_ia32_vpdpbusd_v4si_mask\", IX86_BUILTIN_VPDPBUSDV4SI_MASK, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI_V4SI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VNNI, CODE_FOR_vpdpbusd_v4si_maskz, \"__builtin_ia32_vpdpbusd_v4si_maskz\", IX86_BUILTIN_VPDPBUSDV4SI_MASKZ, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI_V4SI_INT)\n+\n+BDESC (OPTION_MASK_ISA_AVX512VNNI, CODE_FOR_vpdpbusds_v16si, \"__builtin_ia32_vpdpbusds_v16si\", IX86_BUILTIN_VPDPBUSDSV16SI, UNKNOWN, (int) V16SI_FTYPE_V16SI_V16SI_V16SI)\n+BDESC (OPTION_MASK_ISA_AVX512VNNI, CODE_FOR_vpdpbusds_v16si_mask, \"__builtin_ia32_vpdpbusds_v16si_mask\", IX86_BUILTIN_VPDPBUSDSV16SI_MASK, UNKNOWN, (int) V16SI_FTYPE_V16SI_V16SI_V16SI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VNNI, CODE_FOR_vpdpbusds_v16si_maskz, \"__builtin_ia32_vpdpbusds_v16si_maskz\", IX86_BUILTIN_VPDPBUSDSV16SI_MASKZ, UNKNOWN, (int) V16SI_FTYPE_V16SI_V16SI_V16SI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VNNI, CODE_FOR_vpdpbusds_v8si, \"__builtin_ia32_vpdpbusds_v8si\", IX86_BUILTIN_VPDPBUSDSV8SI, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI_V8SI)\n+BDESC (OPTION_MASK_ISA_AVX512VNNI, CODE_FOR_vpdpbusds_v8si_mask, \"__builtin_ia32_vpdpbusds_v8si_mask\", IX86_BUILTIN_VPDPBUSDSV8SI_MASK, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI_V8SI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VNNI, CODE_FOR_vpdpbusds_v8si_maskz, \"__builtin_ia32_vpdpbusds_v8si_maskz\", IX86_BUILTIN_VPDPBUSDSV8SI_MASKZ, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI_V8SI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VNNI, CODE_FOR_vpdpbusds_v4si, \"__builtin_ia32_vpdpbusds_v4si\", IX86_BUILTIN_VPDPBUSDSV4SI, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI_V4SI)\n+BDESC (OPTION_MASK_ISA_AVX512VNNI, CODE_FOR_vpdpbusds_v4si_mask, \"__builtin_ia32_vpdpbusds_v4si_mask\", IX86_BUILTIN_VPDPBUSDSV4SI_MASK, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI_V4SI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VNNI, CODE_FOR_vpdpbusds_v4si_maskz, \"__builtin_ia32_vpdpbusds_v4si_maskz\", IX86_BUILTIN_VPDPBUSDSV4SI_MASKZ, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI_V4SI_INT)\n+\n+BDESC (OPTION_MASK_ISA_AVX512VNNI, CODE_FOR_vpdpwssd_v16si, \"__builtin_ia32_vpdpwssd_v16si\", IX86_BUILTIN_VPDPWSSDV16SI, UNKNOWN, (int) V16SI_FTYPE_V16SI_V16SI_V16SI)\n+BDESC (OPTION_MASK_ISA_AVX512VNNI, CODE_FOR_vpdpwssd_v16si_mask, \"__builtin_ia32_vpdpwssd_v16si_mask\", IX86_BUILTIN_VPDPWSSDV16SI_MASK, UNKNOWN, (int) V16SI_FTYPE_V16SI_V16SI_V16SI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VNNI, CODE_FOR_vpdpwssd_v16si_maskz, \"__builtin_ia32_vpdpwssd_v16si_maskz\", IX86_BUILTIN_VPDPWSSDV16SI_MASKZ, UNKNOWN, (int) V16SI_FTYPE_V16SI_V16SI_V16SI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VNNI, CODE_FOR_vpdpwssd_v8si, \"__builtin_ia32_vpdpwssd_v8si\", IX86_BUILTIN_VPDPWSSDV8SI, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI_V8SI)\n+BDESC (OPTION_MASK_ISA_AVX512VNNI, CODE_FOR_vpdpwssd_v8si_mask, \"__builtin_ia32_vpdpwssd_v8si_mask\", IX86_BUILTIN_VPDPWSSDV8SI_MASK, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI_V8SI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VNNI, CODE_FOR_vpdpwssd_v8si_maskz, \"__builtin_ia32_vpdpwssd_v8si_maskz\", IX86_BUILTIN_VPDPWSSDV8SI_MASKZ, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI_V8SI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VNNI, CODE_FOR_vpdpwssd_v4si, \"__builtin_ia32_vpdpwssd_v4si\", IX86_BUILTIN_VPDPWSSDV4SI, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI_V4SI)\n+BDESC (OPTION_MASK_ISA_AVX512VNNI, CODE_FOR_vpdpwssd_v4si_mask, \"__builtin_ia32_vpdpwssd_v4si_mask\", IX86_BUILTIN_VPDPWSSDV4SI_MASK, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI_V4SI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VNNI, CODE_FOR_vpdpwssd_v4si_maskz, \"__builtin_ia32_vpdpwssd_v4si_maskz\", IX86_BUILTIN_VPDPWSSDV4SI_MASKZ, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI_V4SI_INT)\n+\n+BDESC (OPTION_MASK_ISA_AVX512VNNI, CODE_FOR_vpdpwssds_v16si, \"__builtin_ia32_vpdpwssds_v16si\", IX86_BUILTIN_VPDPWSSDSV16SI, UNKNOWN, (int) V16SI_FTYPE_V16SI_V16SI_V16SI)\n+BDESC (OPTION_MASK_ISA_AVX512VNNI, CODE_FOR_vpdpwssds_v16si_mask, \"__builtin_ia32_vpdpwssds_v16si_mask\", IX86_BUILTIN_VPDPWSSDSV16SI_MASK, UNKNOWN, (int) V16SI_FTYPE_V16SI_V16SI_V16SI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VNNI, CODE_FOR_vpdpwssds_v16si_maskz, \"__builtin_ia32_vpdpwssds_v16si_maskz\", IX86_BUILTIN_VPDPWSSDSV16SI_MASKZ, UNKNOWN, (int) V16SI_FTYPE_V16SI_V16SI_V16SI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VNNI, CODE_FOR_vpdpwssds_v8si, \"__builtin_ia32_vpdpwssds_v8si\", IX86_BUILTIN_VPDPWSSDSV8SI, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI_V8SI)\n+BDESC (OPTION_MASK_ISA_AVX512VNNI, CODE_FOR_vpdpwssds_v8si_mask, \"__builtin_ia32_vpdpwssds_v8si_mask\", IX86_BUILTIN_VPDPWSSDSV8SI_MASK, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI_V8SI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VNNI, CODE_FOR_vpdpwssds_v8si_maskz, \"__builtin_ia32_vpdpwssds_v8si_maskz\", IX86_BUILTIN_VPDPWSSDSV8SI_MASKZ, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI_V8SI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VNNI, CODE_FOR_vpdpwssds_v4si, \"__builtin_ia32_vpdpwssds_v4si\", IX86_BUILTIN_VPDPWSSDSV4SI, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI_V4SI)\n+BDESC (OPTION_MASK_ISA_AVX512VNNI, CODE_FOR_vpdpwssds_v4si_mask, \"__builtin_ia32_vpdpwssds_v4si_mask\", IX86_BUILTIN_VPDPWSSDSV4SI_MASK, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI_V4SI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VNNI, CODE_FOR_vpdpwssds_v4si_maskz, \"__builtin_ia32_vpdpwssds_v4si_maskz\", IX86_BUILTIN_VPDPWSSDSV4SI_MASKZ, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI_V4SI_INT)\n+\n BDESC_END (ARGS2, SPECIAL_ARGS2)\n \n BDESC_FIRST (special_args2, SPECIAL_ARGS2, OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_compressstorev64qi_mask, \"__builtin_ia32_compressstoreuqi512_mask\", IX86_BUILTIN_PCOMPRESSBSTORE512, UNKNOWN, (int) VOID_FTYPE_PV64QI_V64QI_UDI)"}, {"sha": "abc1d31080405dbd8e1b1259b09107e6e04b3798", "filename": "gcc/config/i386/immintrin.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69ddc3e5832aa384ffca1d0edfb22a3175bd9dc9/gcc%2Fconfig%2Fi386%2Fimmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69ddc3e5832aa384ffca1d0edfb22a3175bd9dc9/gcc%2Fconfig%2Fi386%2Fimmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fimmintrin.h?ref=69ddc3e5832aa384ffca1d0edfb22a3175bd9dc9", "patch": "@@ -78,6 +78,10 @@\n \n #include <avx512vbmi2vlintrin.h>\n \n+#include <avx512vnniintrin.h>\n+\n+#include <avx512vnnivlintrin.h>\n+\n #include <shaintrin.h>\n \n #include <lzcntintrin.h>"}, {"sha": "6ec97e17e5c656e4399a533b647b13dc9580750c", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 221, "deletions": 0, "changes": 221, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69ddc3e5832aa384ffca1d0edfb22a3175bd9dc9/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69ddc3e5832aa384ffca1d0edfb22a3175bd9dc9/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=69ddc3e5832aa384ffca1d0edfb22a3175bd9dc9", "patch": "@@ -166,6 +166,12 @@\n   UNSPEC_VPSHRD\n   UNSPEC_VPSHRDV\n   UNSPEC_VPSHLDV\n+\n+  ;; For AVX512VNNI support\n+  UNSPEC_VPMADDUBSWACCD\n+  UNSPEC_VPMADDUBSWACCSSD\n+  UNSPEC_VPMADDWDACCD\n+  UNSPEC_VPMADDWDACCSSD\n ])\n \n (define_c_enum \"unspecv\" [\n@@ -20228,3 +20234,218 @@\n   \"vpshldv<ssemodesuffix>\\t{%3, %2, %0%{%5%}%{z%}|%0%{%5%}%{z%}, %2, %3 }\"\n    [(set_attr (\"prefix\") (\"evex\"))\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n+(define_insn \"vpdpbusd_<mode>\"\n+  [(set (match_operand:VI4_AVX512VL 0 \"register_operand\" \"=v\")\n+\t(unspec:VI4_AVX512VL\n+\t  [(match_operand:VI4_AVX512VL 1 \"register_operand\" \"0\")\n+\t   (match_operand:VI4_AVX512VL 2 \"register_operand\" \"v\")\n+\t   (match_operand:VI4_AVX512VL 3 \"nonimmediate_operand\" \"vm\")\n+] UNSPEC_VPMADDUBSWACCD))]\n+  \"TARGET_AVX512VNNI\"\n+  \"vpdpbusd\\t{%3, %2, %0|%0, %2, %3 }\"\n+   [(set_attr (\"prefix\") (\"evex\"))])\n+\n+(define_insn \"vpdpbusd_<mode>_mask\"\n+  [(set (match_operand:VI4_AVX512VL 0 \"register_operand\" \"=v\")\n+\t(vec_merge:VI4_AVX512VL (unspec:VI4_AVX512VL\n+\t  [(match_operand:VI4_AVX512VL 1 \"register_operand\" \"0\")\n+\t   (match_operand:VI4_AVX512VL 2 \"register_operand\" \"v\")\n+\t   (match_operand:VI4_AVX512VL 3 \"nonimmediate_operand\" \"vm\")\n+\t] UNSPEC_VPMADDUBSWACCD)\n+           (match_dup 1)\n+           (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"Yk\"))\n+)]\n+  \"TARGET_AVX512VNNI\"\n+  \"vpdpbusd\\t{%3, %2, %0%{%4%}|%0%{%4%}, %2, %3 }\"\n+   [(set_attr (\"prefix\") (\"evex\"))])\n+\n+(define_expand \"vpdpbusd_<mode>_maskz\"\n+  [(match_operand:VI4_AVX512VL 0 \"register_operand\")\n+   (match_operand:VI4_AVX512VL 1 \"register_operand\")\n+   (match_operand:VI4_AVX512VL 2 \"register_operand\")\n+   (match_operand:VI4_AVX512VL 3 \"nonimmediate_operand\")\n+   (match_operand:<avx512fmaskmode> 4 \"register_operand\")]\n+  \"TARGET_AVX512VNNI\"\n+{\n+  emit_insn (gen_vpdpbusd_<mode>_maskz_1 (\n+    operands[0], operands[1], operands[2], operands[3],\n+    CONST0_RTX (<MODE>mode), operands[4]));\n+  DONE;\n+})\n+\n+(define_insn \"vpdpbusd_<mode>_maskz_1\"\n+  [(set (match_operand:VI4_AVX512VL 0 \"register_operand\" \"=v\")\n+\t(vec_merge:VI4_AVX512VL (unspec:VI4_AVX512VL\n+\t  [(match_operand:VI4_AVX512VL 1 \"register_operand\" \"0\")\n+\t   (match_operand:VI4_AVX512VL 2 \"register_operand\" \"v\")\n+\t   (match_operand:VI4_AVX512VL 3 \"nonimmediate_operand\" \"vm\")\n+\t] UNSPEC_VPMADDUBSWACCD)\n+\t  (match_operand:VI4_AVX512VL 4 \"const0_operand\" \"C\")\n+          (match_operand:<avx512fmaskmode> 5 \"register_operand\" \"Yk\"))\n+)]\n+  \"TARGET_AVX512VNNI\"\n+  \"vpdpbusd\\t{%3, %2, %0%{%5%}%{z%}|%0%{%5%}%{z%}, %2, %3 }\"\n+   [(set_attr (\"prefix\") (\"evex\"))])\n+\n+\n+(define_insn \"vpdpbusds_<mode>\"\n+  [(set (match_operand:VI4_AVX512VL 0 \"register_operand\" \"=v\")\n+\t(unspec:VI4_AVX512VL\n+\t  [(match_operand:VI4_AVX512VL 1 \"register_operand\" \"0\")\n+\t   (match_operand:VI4_AVX512VL 2 \"register_operand\" \"v\")\n+\t   (match_operand:VI4_AVX512VL 3 \"nonimmediate_operand\" \"vm\")\n+] UNSPEC_VPMADDUBSWACCSSD))]\n+  \"TARGET_AVX512VNNI\"\n+  \"vpdpbusds\\t{%3, %2, %0|%0, %2, %3 }\"\n+   [(set_attr (\"prefix\") (\"evex\"))])\n+\n+(define_insn \"vpdpbusds_<mode>_mask\"\n+  [(set (match_operand:VI4_AVX512VL 0 \"register_operand\" \"=v\")\n+\t(vec_merge:VI4_AVX512VL (unspec:VI4_AVX512VL\n+\t  [(match_operand:VI4_AVX512VL 1 \"register_operand\" \"0\")\n+\t   (match_operand:VI4_AVX512VL 2 \"register_operand\" \"v\")\n+\t   (match_operand:VI4_AVX512VL 3 \"nonimmediate_operand\" \"vm\")\n+\t] UNSPEC_VPMADDUBSWACCSSD)\n+           (match_dup 1)\n+           (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"Yk\"))\n+)]\n+  \"TARGET_AVX512VNNI\"\n+  \"vpdpbusds\\t{%3, %2, %0%{%4%}|%0%{%4%}, %2, %3 }\"\n+   [(set_attr (\"prefix\") (\"evex\"))])\n+\n+(define_expand \"vpdpbusds_<mode>_maskz\"\n+  [(match_operand:VI4_AVX512VL 0 \"register_operand\")\n+   (match_operand:VI4_AVX512VL 1 \"register_operand\")\n+   (match_operand:VI4_AVX512VL 2 \"register_operand\")\n+   (match_operand:VI4_AVX512VL 3 \"nonimmediate_operand\")\n+   (match_operand:<avx512fmaskmode> 4 \"register_operand\")]\n+  \"TARGET_AVX512VNNI\"\n+{\n+  emit_insn (gen_vpdpbusds_<mode>_maskz_1 (\n+    operands[0], operands[1], operands[2], operands[3],\n+    CONST0_RTX (<MODE>mode), operands[4]));\n+  DONE;\n+})\n+\n+(define_insn \"vpdpbusds_<mode>_maskz_1\"\n+  [(set (match_operand:VI4_AVX512VL 0 \"register_operand\" \"=v\")\n+\t(vec_merge:VI4_AVX512VL (unspec:VI4_AVX512VL\n+\t  [(match_operand:VI4_AVX512VL 1 \"register_operand\" \"0\")\n+\t   (match_operand:VI4_AVX512VL 2 \"register_operand\" \"v\")\n+\t   (match_operand:VI4_AVX512VL 3 \"nonimmediate_operand\" \"vm\")\n+\t] UNSPEC_VPMADDUBSWACCSSD)\n+\t  (match_operand:VI4_AVX512VL 4 \"const0_operand\" \"C\")\n+          (match_operand:<avx512fmaskmode> 5 \"register_operand\" \"Yk\"))\n+)]\n+  \"TARGET_AVX512VNNI\"\n+  \"vpdpbusds\\t{%3, %2, %0%{%5%}%{z%}|%0%{%5%}%{z%}, %2, %3 }\"\n+   [(set_attr (\"prefix\") (\"evex\"))])\n+\n+\n+(define_insn \"vpdpwssd_<mode>\"\n+  [(set (match_operand:VI4_AVX512VL 0 \"register_operand\" \"=v\")\n+\t(unspec:VI4_AVX512VL\n+\t  [(match_operand:VI4_AVX512VL 1 \"register_operand\" \"0\")\n+\t   (match_operand:VI4_AVX512VL 2 \"register_operand\" \"v\")\n+\t   (match_operand:VI4_AVX512VL 3 \"nonimmediate_operand\" \"vm\")\n+] UNSPEC_VPMADDWDACCD))]\n+  \"TARGET_AVX512VNNI\"\n+  \"vpdpwssd\\t{%3, %2, %0|%0, %2, %3 }\"\n+   [(set_attr (\"prefix\") (\"evex\"))])\n+\n+(define_insn \"vpdpwssd_<mode>_mask\"\n+  [(set (match_operand:VI4_AVX512VL 0 \"register_operand\" \"=v\")\n+\t(vec_merge:VI4_AVX512VL (unspec:VI4_AVX512VL\n+\t  [(match_operand:VI4_AVX512VL 1 \"register_operand\" \"0\")\n+\t   (match_operand:VI4_AVX512VL 2 \"register_operand\" \"v\")\n+\t   (match_operand:VI4_AVX512VL 3 \"nonimmediate_operand\" \"vm\")\n+\t] UNSPEC_VPMADDWDACCD)\n+           (match_dup 1)\n+           (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"Yk\"))\n+)]\n+  \"TARGET_AVX512VNNI\"\n+  \"vpdpwssd\\t{%3, %2, %0%{%4%}|%0%{%4%}, %2, %3 }\"\n+   [(set_attr (\"prefix\") (\"evex\"))])\n+\n+(define_expand \"vpdpwssd_<mode>_maskz\"\n+  [(match_operand:VI4_AVX512VL 0 \"register_operand\")\n+   (match_operand:VI4_AVX512VL 1 \"register_operand\")\n+   (match_operand:VI4_AVX512VL 2 \"register_operand\")\n+   (match_operand:VI4_AVX512VL 3 \"nonimmediate_operand\")\n+   (match_operand:<avx512fmaskmode> 4 \"register_operand\")]\n+  \"TARGET_AVX512VNNI\"\n+{\n+  emit_insn (gen_vpdpwssd_<mode>_maskz_1 (\n+    operands[0], operands[1], operands[2], operands[3],\n+    CONST0_RTX (<MODE>mode), operands[4]));\n+  DONE;\n+})\n+\n+(define_insn \"vpdpwssd_<mode>_maskz_1\"\n+  [(set (match_operand:VI4_AVX512VL 0 \"register_operand\" \"=v\")\n+\t(vec_merge:VI4_AVX512VL (unspec:VI4_AVX512VL\n+\t  [(match_operand:VI4_AVX512VL 1 \"register_operand\" \"0\")\n+\t   (match_operand:VI4_AVX512VL 2 \"register_operand\" \"v\")\n+\t   (match_operand:VI4_AVX512VL 3 \"nonimmediate_operand\" \"vm\")\n+\t] UNSPEC_VPMADDWDACCD)\n+\t  (match_operand:VI4_AVX512VL 4 \"const0_operand\" \"C\")\n+          (match_operand:<avx512fmaskmode> 5 \"register_operand\" \"Yk\"))\n+)]\n+  \"TARGET_AVX512VNNI\"\n+  \"vpdpwssd\\t{%3, %2, %0%{%5%}%{z%}|%0%{%5%}%{z%}, %2, %3 }\"\n+   [(set_attr (\"prefix\") (\"evex\"))])\n+\n+\n+(define_insn \"vpdpwssds_<mode>\"\n+  [(set (match_operand:VI4_AVX512VL 0 \"register_operand\" \"=v\")\n+\t(unspec:VI4_AVX512VL\n+\t  [(match_operand:VI4_AVX512VL 1 \"register_operand\" \"0\")\n+\t   (match_operand:VI4_AVX512VL 2 \"register_operand\" \"v\")\n+\t   (match_operand:VI4_AVX512VL 3 \"nonimmediate_operand\" \"vm\")\n+] UNSPEC_VPMADDWDACCSSD))]\n+  \"TARGET_AVX512VNNI\"\n+  \"vpdpwssds\\t{%3, %2, %0|%0, %2, %3 }\"\n+   [(set_attr (\"prefix\") (\"evex\"))])\n+\n+(define_insn \"vpdpwssds_<mode>_mask\"\n+  [(set (match_operand:VI4_AVX512VL 0 \"register_operand\" \"=v\")\n+\t(vec_merge:VI4_AVX512VL (unspec:VI4_AVX512VL\n+\t  [(match_operand:VI4_AVX512VL 1 \"register_operand\" \"0\")\n+\t   (match_operand:VI4_AVX512VL 2 \"register_operand\" \"v\")\n+\t   (match_operand:VI4_AVX512VL 3 \"nonimmediate_operand\" \"vm\")\n+\t] UNSPEC_VPMADDWDACCSSD)\n+           (match_dup 1)\n+           (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"Yk\"))\n+)]\n+  \"TARGET_AVX512VNNI\"\n+  \"vpdpwssds\\t{%3, %2, %0%{%4%}|%0%{%4%}, %2, %3 }\"\n+   [(set_attr (\"prefix\") (\"evex\"))])\n+\n+(define_expand \"vpdpwssds_<mode>_maskz\"\n+  [(match_operand:VI4_AVX512VL 0 \"register_operand\")\n+   (match_operand:VI4_AVX512VL 1 \"register_operand\")\n+   (match_operand:VI4_AVX512VL 2 \"register_operand\")\n+   (match_operand:VI4_AVX512VL 3 \"nonimmediate_operand\")\n+   (match_operand:<avx512fmaskmode> 4 \"register_operand\")]\n+  \"TARGET_AVX512VNNI\"\n+{\n+  emit_insn (gen_vpdpwssds_<mode>_maskz_1 (\n+    operands[0], operands[1], operands[2], operands[3],\n+    CONST0_RTX (<MODE>mode), operands[4]));\n+  DONE;\n+})\n+\n+(define_insn \"vpdpwssds_<mode>_maskz_1\"\n+  [(set (match_operand:VI4_AVX512VL 0 \"register_operand\" \"=v\")\n+\t(vec_merge:VI4_AVX512VL (unspec:VI4_AVX512VL\n+\t  [(match_operand:VI4_AVX512VL 1 \"register_operand\" \"0\")\n+\t   (match_operand:VI4_AVX512VL 2 \"register_operand\" \"v\")\n+\t   (match_operand:VI4_AVX512VL 3 \"nonimmediate_operand\" \"vm\")\n+\t] UNSPEC_VPMADDWDACCSSD)\n+\t  (match_operand:VI4_AVX512VL 4 \"const0_operand\" \"C\")\n+          (match_operand:<avx512fmaskmode> 5 \"register_operand\" \"Yk\"))\n+)]\n+  \"TARGET_AVX512VNNI\"\n+  \"vpdpwssds\\t{%3, %2, %0%{%5%}%{z%}|%0%{%5%}%{z%}, %2, %3 }\"\n+   [(set_attr (\"prefix\") (\"evex\"))])"}, {"sha": "d85142f1bfc29c9a98beacf4bd36b9b5c37caef7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69ddc3e5832aa384ffca1d0edfb22a3175bd9dc9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69ddc3e5832aa384ffca1d0edfb22a3175bd9dc9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=69ddc3e5832aa384ffca1d0edfb22a3175bd9dc9", "patch": "@@ -1,3 +1,11 @@\n+2017-12-07  Julia Koval  <julia.koval@intel.com>\n+\n+\t* gcc.target/i386/avx512-check.h: Handle bit_VAES.\n+\t* gcc.target/i386/avx512f-aesdec-2.c: New test.\n+\t* gcc.target/i386/avx512fvl-vaes-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-aesdec-2.c: Ditto.\n+\t* gcc.target/i386/i386.exp (check_effective_target_avx512vaes): New.\n+\n 2017-12-04  Jeff Law  <law@redhat.com>\n \n \tPR tree-optimization/69224"}, {"sha": "222992baf4568b8f8ccf17a8961ce371a331687a", "filename": "gcc/testsuite/gcc.target/i386/avx512-check.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69ddc3e5832aa384ffca1d0edfb22a3175bd9dc9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69ddc3e5832aa384ffca1d0edfb22a3175bd9dc9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512-check.h?ref=69ddc3e5832aa384ffca1d0edfb22a3175bd9dc9", "patch": "@@ -80,6 +80,9 @@ main ()\n #endif\n #ifdef AVX512VBMI2\n       && (ecx & bit_AVX512VBMI2)\n+#endif\n+#ifdef AVX512VNNI\n+      && (ecx & bit_AVX512VNNI)\n #endif\n       && avx512f_os_support ())\n     {"}, {"sha": "32fc8a4794d13fd1a4dfe12bd9b3225cda66c35e", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vnni-1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69ddc3e5832aa384ffca1d0edfb22a3175bd9dc9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vnni-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69ddc3e5832aa384ffca1d0edfb22a3175bd9dc9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vnni-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vnni-1.c?ref=69ddc3e5832aa384ffca1d0edfb22a3175bd9dc9", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -mavx512vnni -mavx512bw -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpdpbusd\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpdpbusd\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpdpbusd\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x,y,z,z1;\n+volatile __mmask32 m32;\n+volatile __mmask16 m16;\n+volatile __mmask8 m8;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x = _mm512_dpbusd_epi32 (x, y, z);\n+  x = _mm512_mask_dpbusd_epi32 (x, m16, y, z);\n+  x = _mm512_maskz_dpbusd_epi32 (m16, x, y, z);\n+\n+}"}, {"sha": "fb1635822db66dd410168375271fbae5e7fd528e", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpdpbusd-2.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69ddc3e5832aa384ffca1d0edfb22a3175bd9dc9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpdpbusd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69ddc3e5832aa384ffca1d0edfb22a3175bd9dc9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpdpbusd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpdpbusd-2.c?ref=69ddc3e5832aa384ffca1d0edfb22a3175bd9dc9", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f -mavx512vnni\" } */\n+/* { dg-require-effective-target avx512f } */\n+/* { dg-require-effective-target avx512vnni } */\n+\n+#define AVX512F\n+\n+#define AVX512VNNI\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 8)\n+#define SIZE_RES (AVX512F_LEN / 32)\n+\n+#include \"avx512f-mask-type.h\"\n+\n+static void\n+CALC (int *r, int *dst, unsigned char *s1, char *s2)\n+{\n+  short tempres[SIZE];\n+  for (int i = 0; i < SIZE; i++) {\n+    tempres[i] = ((unsigned short)(s1[i]) * (short)(s2[i]));\n+  }\n+  for (int i = 0; i < SIZE_RES; i++) {\n+    long long test = (long long)dst[i] + tempres[i*4] + tempres[i*4 + 1] + tempres[i*4 + 2] + tempres[i*4 + 3];\n+    r[i] = test;\n+  }\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i;\n+  UNION_TYPE (AVX512F_LEN, i_d) res1, res2, res3;\n+  UNION_TYPE (AVX512F_LEN, i_ub) src1;\n+  UNION_TYPE (AVX512F_LEN, i_b) src2;\n+  MASK_TYPE mask = MASK_VALUE;\n+  int res_ref[SIZE_RES], res_ref2[SIZE_RES];\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      int sign = i % 2 ? 1 : -1;\n+      src1.a[i] = 10 +  3*i*i + sign;\n+      src2.a[i] = sign*10*i*i;\n+   }\n+\n+  for (i = 0; i < SIZE_RES; i++)\n+    {\n+      res1.a[i] = 0x7FFFFFFF;\n+      res2.a[i] = DEFAULT_VALUE;\n+      res3.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  CALC (res_ref, res1.a, src1.a, src2.a);\n+  CALC (res_ref2, res2.a, src1.a, src2.a);\n+\n+  res1.x = INTRINSIC (_dpbusd_epi32) (res1.x, src1.x, src2.x);\n+  res2.x = INTRINSIC (_mask_dpbusd_epi32) (res2.x, mask, src1.x, src2.x);\n+  res3.x = INTRINSIC (_maskz_dpbusd_epi32) (mask, res3.x, src1.x, src2.x);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_d) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_d) (res_ref2, mask, SIZE_RES);\n+  if (UNION_CHECK (AVX512F_LEN, i_d) (res2, res_ref2))\n+    abort ();\n+\n+  MASK_ZERO (i_d) (res_ref2, mask, SIZE_RES);\n+  if (UNION_CHECK (AVX512F_LEN, i_d) (res3, res_ref2))\n+    abort ();\n+}"}, {"sha": "bc18c632d4be5e77b8743f6ec45272783f2f17fb", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vnni-1.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69ddc3e5832aa384ffca1d0edfb22a3175bd9dc9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vnni-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69ddc3e5832aa384ffca1d0edfb22a3175bd9dc9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vnni-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vnni-1.c?ref=69ddc3e5832aa384ffca1d0edfb22a3175bd9dc9", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512vl -mavx512vnni -mavx512bw -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpdpbusd\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpdpbusd\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\\\n\\\\r]*%ymm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpdpbusd\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\\\n\\\\r]*%ymm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpdpbusd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpdpbusd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpdpbusd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x,y,z;\n+volatile __m128i x_,y_,z_;\n+volatile __mmask32 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x = _mm256_dpbusd_epi32 (x, y, z);\n+  x = _mm256_mask_dpbusd_epi32 (x, m, y, z);\n+  x = _mm256_maskz_dpbusd_epi32 (m, x, y, z);\n+\n+  x_ = _mm_dpbusd_epi32 (x_, y_, z_);\n+  x_ = _mm_mask_dpbusd_epi32 (x_, m, y_, z_);\n+  x_ = _mm_maskz_dpbusd_epi32 (m, x_, y_, z_);\n+\n+}"}, {"sha": "81be2339d80738d262215644a221ebd868f8ce24", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vpdpbusd-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69ddc3e5832aa384ffca1d0edfb22a3175bd9dc9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpdpbusd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69ddc3e5832aa384ffca1d0edfb22a3175bd9dc9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpdpbusd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpdpbusd-2.c?ref=69ddc3e5832aa384ffca1d0edfb22a3175bd9dc9", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512vnni -mavx512vl\" } */\n+/* { dg-require-effective-target avx512vl } */\n+/* { dg-require-effective-target avx512vnni } */\n+\n+#define AVX512VL\n+#define AVX512F_LEN 256\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512f-vpdpbusd-2.c\"\n+\n+#undef AVX512F_LEN\n+#undef AVX512F_LEN_HALF\n+\n+#define AVX512F_LEN 128\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512f-vpdpbusd-2.c\""}, {"sha": "b4468131d0d3782d5aa4a29820c20bad84f0f4bb", "filename": "gcc/testsuite/gcc.target/i386/i386.exp", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69ddc3e5832aa384ffca1d0edfb22a3175bd9dc9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fi386.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69ddc3e5832aa384ffca1d0edfb22a3175bd9dc9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fi386.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fi386.exp?ref=69ddc3e5832aa384ffca1d0edfb22a3175bd9dc9", "patch": "@@ -452,6 +452,20 @@ proc check_effective_target_avx512vbmi2 { } {\n     } \"-mavx512vbmi2 -mavx512vl\" ]\n }\n \n+# Return 1 if avx512vbmi2 instructions can be compiled.\n+proc check_effective_target_avx512vnni { } {\n+    return [check_no_compiler_messages avx512vnni object {\n+        typedef int __v16si __attribute__ ((__vector_size__ (64)));\n+\n+\t__v16si\n+\t_mm_mask_compress_epi8 (__v16si __A, __v16si __B, __v16si __C)\n+\t{\n+  \t\treturn (__v16si) __builtin_ia32_vpdpbusd_v16si ((__v16si)__A,\n+\t\t\t\t\t\t\t\t(__v16si)__B,\n+\t\t\t\t\t\t\t\t(__v16si)__C);\n+\t}\n+    } \"-mavx512vnni -mavx512f\" ]\n+}\n \n # If a testcase doesn't have special options, use these.\n global DEFAULT_CFLAGS"}]}