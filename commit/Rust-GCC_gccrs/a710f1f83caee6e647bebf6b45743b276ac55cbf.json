{"sha": "a710f1f83caee6e647bebf6b45743b276ac55cbf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTcxMGYxZjgzY2FlZTZlNjQ3YmViZjZiNDU3NDNiMjc2YWM1NWNiZg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2014-10-01T17:21:01Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2014-10-01T17:21:01Z"}, "message": "re PR c++/63362 (The c++11 triviality-traits need front-end help)\n\n\tPR c++/63362\n\t* class.c (type_has_non_user_provided_default_constructor): Rename\n\tfrom type_has_user_provided_default_constructor, reverse sense.\n\t(default_init_uninitialized_part, explain_non_literal_class): Adjust.\n\t(check_bases_and_members): Set TYPE_HAS_COMPLEX_DFLT.\n\t* call.c (build_new_method_call_1): Adjust.\n\t* cp-tree.h: Adjust.\n\t* decl.c (grok_special_member_properties): Don't set\n\tTYPE_HAS_COMPLEX_DFLT.\n\t* init.c (build_value_init_noctor): Don't use\n\ttype_has_user_provided_default_constructor.\n\nFrom-SVN: r215771", "tree": {"sha": "618fa3a64a0ba515790e83375deeafc63a304d52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/618fa3a64a0ba515790e83375deeafc63a304d52"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a710f1f83caee6e647bebf6b45743b276ac55cbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a710f1f83caee6e647bebf6b45743b276ac55cbf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a710f1f83caee6e647bebf6b45743b276ac55cbf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a710f1f83caee6e647bebf6b45743b276ac55cbf/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c790b7febcb60ce4b12292783be3b76566ad76e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c790b7febcb60ce4b12292783be3b76566ad76e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c790b7febcb60ce4b12292783be3b76566ad76e3"}], "stats": {"total": 79, "additions": 59, "deletions": 20}, "files": [{"sha": "9a9fc34256945f775f4ff46fc0ad48cdfd5b8b25", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a710f1f83caee6e647bebf6b45743b276ac55cbf/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a710f1f83caee6e647bebf6b45743b276ac55cbf/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a710f1f83caee6e647bebf6b45743b276ac55cbf", "patch": "@@ -1,3 +1,17 @@\n+2014-10-01  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/63362\n+\t* class.c (type_has_non_user_provided_default_constructor): Rename\n+\tfrom type_has_user_provided_default_constructor, reverse sense.\n+\t(default_init_uninitialized_part, explain_non_literal_class): Adjust.\n+\t(check_bases_and_members): Set TYPE_HAS_COMPLEX_DFLT.\n+\t* call.c (build_new_method_call_1): Adjust.\n+\t* cp-tree.h: Adjust.\n+\t* decl.c (grok_special_member_properties): Don't set\n+\tTYPE_HAS_COMPLEX_DFLT.\n+\t* init.c (build_value_init_noctor): Don't use\n+\ttype_has_user_provided_default_constructor.\n+\n 2014-09-30  Jason Merrill  <jason@redhat.com>\n \n \t* cp-tree.h (cp_trait_kind): Add CPTK_IS_TRIVIALLY_ASSIGNABLE and"}, {"sha": "3c8b338382abdfc7bfcd3ed05be060fb7961150d", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a710f1f83caee6e647bebf6b45743b276ac55cbf/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a710f1f83caee6e647bebf6b45743b276ac55cbf/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=a710f1f83caee6e647bebf6b45743b276ac55cbf", "patch": "@@ -7941,7 +7941,7 @@ build_new_method_call_1 (tree instance, tree fns, vec<tree, va_gc> **args,\n \t  && TYPE_HAS_DEFAULT_CONSTRUCTOR (basetype)\n \t  /* For a user-provided default constructor, use the normal\n \t     mechanisms so that protected access works.  */\n-\t  && !type_has_user_provided_default_constructor (basetype)\n+\t  && type_has_non_user_provided_default_constructor (basetype)\n \t  && !processing_template_decl)\n \tinit = build_value_init (basetype, complain);\n "}, {"sha": "12ac30a84a84ac09bf75acd6612097e22b839025", "filename": "gcc/cp/class.c", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a710f1f83caee6e647bebf6b45743b276ac55cbf/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a710f1f83caee6e647bebf6b45743b276ac55cbf/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=a710f1f83caee6e647bebf6b45743b276ac55cbf", "patch": "@@ -4937,21 +4937,25 @@ type_has_user_provided_constructor (tree t)\n   return false;\n }\n \n-/* Returns true iff class T has a user-provided default constructor.  */\n+/* Returns true iff class T has a non-user-provided (i.e. implicitly\n+   declared or explicitly defaulted in the class body) default\n+   constructor.  */\n \n bool\n-type_has_user_provided_default_constructor (tree t)\n+type_has_non_user_provided_default_constructor (tree t)\n {\n   tree fns;\n \n-  if (!TYPE_HAS_USER_CONSTRUCTOR (t))\n+  if (!TYPE_HAS_DEFAULT_CONSTRUCTOR (t))\n     return false;\n+  if (CLASSTYPE_LAZY_DEFAULT_CTOR (t))\n+    return true;\n \n   for (fns = CLASSTYPE_CONSTRUCTORS (t); fns; fns = OVL_NEXT (fns))\n     {\n       tree fn = OVL_CURRENT (fns);\n       if (TREE_CODE (fn) == FUNCTION_DECL\n-\t  && user_provided_p (fn)\n+\t  && !user_provided_p (fn)\n \t  && sufficient_parms_p (FUNCTION_FIRST_USER_PARMTYPE (fn)))\n \treturn true;\n     }\n@@ -5009,7 +5013,7 @@ default_init_uninitialized_part (tree type)\n   type = strip_array_types (type);\n   if (!CLASS_TYPE_P (type))\n     return type;\n-  if (type_has_user_provided_default_constructor (type))\n+  if (!type_has_non_user_provided_default_constructor (type))\n     return NULL_TREE;\n   for (binfo = TYPE_BINFO (type), i = 0;\n        BINFO_BASE_ITERATE (binfo, i, t); ++i)\n@@ -5383,8 +5387,7 @@ explain_non_literal_class (tree t)\n       inform (0, \"  %q+T is not an aggregate, does not have a trivial \"\n \t      \"default constructor, and has no constexpr constructor that \"\n \t      \"is not a copy or move constructor\", t);\n-      if (TYPE_HAS_DEFAULT_CONSTRUCTOR (t)\n-\t  && !type_has_user_provided_default_constructor (t))\n+      if (type_has_non_user_provided_default_constructor (t))\n \t{\n \t  /* Note that we can't simply call locate_ctor because when the\n \t     constructor is deleted it just returns NULL_TREE.  */\n@@ -5528,6 +5531,13 @@ check_bases_and_members (tree t)\n   TYPE_HAS_COMPLEX_MOVE_ASSIGN (t) |= TYPE_CONTAINS_VPTR_P (t);\n   TYPE_HAS_COMPLEX_DFLT (t) |= TYPE_CONTAINS_VPTR_P (t);\n \n+  /* If the only explicitly declared default constructor is user-provided,\n+     set TYPE_HAS_COMPLEX_DFLT.  */\n+  if (!TYPE_HAS_COMPLEX_DFLT (t)\n+      && TYPE_HAS_DEFAULT_CONSTRUCTOR (t)\n+      && !type_has_non_user_provided_default_constructor (t))\n+    TYPE_HAS_COMPLEX_DFLT (t) = true;\n+\n   /* Warn if a public base of a polymorphic type has an accessible\n      non-virtual destructor.  It is only now that we know the class is\n      polymorphic.  Although a polymorphic base will have a already"}, {"sha": "14ec837dc9c267122ae13fd6c0c9dce55ec402d0", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a710f1f83caee6e647bebf6b45743b276ac55cbf/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a710f1f83caee6e647bebf6b45743b276ac55cbf/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=a710f1f83caee6e647bebf6b45743b276ac55cbf", "patch": "@@ -3484,7 +3484,7 @@ more_aggr_init_expr_args_p (const aggr_init_expr_arg_iterator *iter)\n /* Nonzero if there is a non-trivial X::X(X&&) for this class.  */\n #define TYPE_HAS_COMPLEX_MOVE_CTOR(NODE) (LANG_TYPE_CLASS_CHECK (NODE)->has_complex_move_ctor)\n \n-/* Nonzero if there is a non-trivial default constructor for this class.  */\n+/* Nonzero if there is no trivial default constructor for this class.  */\n #define TYPE_HAS_COMPLEX_DFLT(NODE) (LANG_TYPE_CLASS_CHECK (NODE)->has_complex_dflt)\n \n /* Nonzero if TYPE has a trivial destructor.  From [class.dtor]:\n@@ -5195,7 +5195,7 @@ extern bool type_has_user_nondefault_constructor (tree);\n extern tree in_class_defaulted_default_constructor (tree);\n extern bool user_provided_p\t\t\t(tree);\n extern bool type_has_user_provided_constructor  (tree);\n-extern bool type_has_user_provided_default_constructor (tree);\n+extern bool type_has_non_user_provided_default_constructor (tree);\n extern bool vbase_has_user_provided_move_assign (tree);\n extern tree default_init_uninitialized_part (tree);\n extern bool trivial_default_constructor_is_constexpr (tree);"}, {"sha": "7856dd836edb88ffc62bc1ccf83d75dcf70927ec", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a710f1f83caee6e647bebf6b45743b276ac55cbf/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a710f1f83caee6e647bebf6b45743b276ac55cbf/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=a710f1f83caee6e647bebf6b45743b276ac55cbf", "patch": "@@ -11476,11 +11476,7 @@ grok_special_member_properties (tree decl)\n \t    TYPE_HAS_CONST_COPY_CTOR (class_type) = 1;\n \t}\n       else if (sufficient_parms_p (FUNCTION_FIRST_USER_PARMTYPE (decl)))\n-\t{\n-\t  TYPE_HAS_DEFAULT_CONSTRUCTOR (class_type) = 1;\n-\t  if (user_provided_p (decl))\n-\t    TYPE_HAS_COMPLEX_DFLT (class_type) = 1;\n-\t}\n+\tTYPE_HAS_DEFAULT_CONSTRUCTOR (class_type) = 1;\n       else if (move_fn_p (decl) && user_provided_p (decl))\n \tTYPE_HAS_COMPLEX_MOVE_CTOR (class_type) = 1;\n       else if (is_list_ctor (decl))"}, {"sha": "6851fe9dc7e7d1da79b05c68bfe16e9a6eb2e0ad", "filename": "gcc/cp/init.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a710f1f83caee6e647bebf6b45743b276ac55cbf/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a710f1f83caee6e647bebf6b45743b276ac55cbf/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=a710f1f83caee6e647bebf6b45743b276ac55cbf", "patch": "@@ -343,13 +343,17 @@ build_value_init (tree type, tsubst_flags_t complain)\n   if (CLASS_TYPE_P (type)\n       && type_build_ctor_call (type))\n     {\n-      tree ctor = build_aggr_init_expr\n-\t(type,\n+      tree ctor =\n \t build_special_member_call (NULL_TREE, complete_ctor_identifier,\n \t\t\t\t    NULL, type, LOOKUP_NORMAL,\n-\t\t\t\t    complain));\n-      if (ctor == error_mark_node\n-\t  || type_has_user_provided_default_constructor (type))\n+\t\t\t\t    complain);\n+      if (ctor == error_mark_node)\n+\treturn ctor;\n+      tree fn = NULL_TREE;\n+      if (TREE_CODE (ctor) == CALL_EXPR)\n+\tfn = get_callee_fndecl (ctor);\n+      ctor = build_aggr_init_expr (type, ctor);\n+      if (fn && user_provided_p (fn))\n \treturn ctor;\n       else if (TYPE_HAS_COMPLEX_DFLT (type))\n \t{"}, {"sha": "4e0a657eaff00ea8abbe899acd26a62fa7473ffb", "filename": "gcc/testsuite/g++.dg/ext/is_trivially_constructible2.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a710f1f83caee6e647bebf6b45743b276ac55cbf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_trivially_constructible2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a710f1f83caee6e647bebf6b45743b276ac55cbf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_trivially_constructible2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_trivially_constructible2.C?ref=a710f1f83caee6e647bebf6b45743b276ac55cbf", "patch": "@@ -0,0 +1,15 @@\n+// { dg-do compile { target c++11 } }\n+\n+struct X {\n+  X() = default;\n+  template<class... U> X(U...);\n+};\n+\n+struct Y {\n+  template<class... U> Y(U...);\n+};\n+\n+#define SA(X) static_assert((X),#X)\n+\n+SA(__is_trivially_constructible(X));\n+SA(!__is_trivially_constructible(Y));"}]}