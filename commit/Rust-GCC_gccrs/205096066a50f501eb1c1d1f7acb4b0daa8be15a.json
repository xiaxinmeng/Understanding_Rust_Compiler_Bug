{"sha": "205096066a50f501eb1c1d1f7acb4b0daa8be15a", "node_id": "C_kwDOANBUbNoAKDIwNTA5NjA2NmE1MGY1MDFlYjFjMWQxZjdhY2I0YjBkYWE4YmUxNWE", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-07-27T20:19:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-27T20:19:02Z"}, "message": "Merge #1417\n\n1417: unsafe: check uses of static variables r=CohenArthur a=CohenArthur\n\nAddresses #1411 \r\n\r\nAccessing an extern static or a mut static is unsafe and requires an unsafe function or block\n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>", "tree": {"sha": "ed31caffc41652a60751bd3c0fe202ed306d1291", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed31caffc41652a60751bd3c0fe202ed306d1291"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/205096066a50f501eb1c1d1f7acb4b0daa8be15a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi4Z22CRBK7hj4Ov3rIwAAQVUIACzzyY1AWyC7+wP073v+FtAx\nmqtWpPYOatG9loGG4mpdzBgNs+diqytqdUTB68kOWKSESsAQEPu63cvTVTJr74FI\nZLGcMDD1YjvXBuSLjHJ1kOqsWSm9hZ+2sttlJNvdCY/34Bne6AD8YBL2wBRndy0n\nE5365/l08zZd36mif05J5B0c3crfiZitApAzs8it0s2yvtsE7U2s7RE8t8pDUEMN\noZA7kimq5wh7sSXfwD/JAvmOAtyLMfBx7kx3dSfRiUEgxpKPKZd5nlUrFCLCCO2q\nox/oTf3nlzrEzkYa+5BmRdNOo2E2sjLhk2dYfeMdnuilhA52Vc9r4xc2CiuqrPU=\n=pGXZ\n-----END PGP SIGNATURE-----\n", "payload": "tree ed31caffc41652a60751bd3c0fe202ed306d1291\nparent 50ca4b2ba0028945fd1a0aefec739ea99f77e908\nparent f4e4c2444fc10f7952fc4dffceb9e3a7e85ed973\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1658953142 +0000\ncommitter GitHub <noreply@github.com> 1658953142 +0000\n\nMerge #1417\n\n1417: unsafe: check uses of static variables r=CohenArthur a=CohenArthur\n\nAddresses #1411 \r\n\r\nAccessing an extern static or a mut static is unsafe and requires an unsafe function or block\n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/205096066a50f501eb1c1d1f7acb4b0daa8be15a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/205096066a50f501eb1c1d1f7acb4b0daa8be15a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/205096066a50f501eb1c1d1f7acb4b0daa8be15a/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50ca4b2ba0028945fd1a0aefec739ea99f77e908", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50ca4b2ba0028945fd1a0aefec739ea99f77e908", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50ca4b2ba0028945fd1a0aefec739ea99f77e908"}, {"sha": "f4e4c2444fc10f7952fc4dffceb9e3a7e85ed973", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4e4c2444fc10f7952fc4dffceb9e3a7e85ed973", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4e4c2444fc10f7952fc4dffceb9e3a7e85ed973"}], "stats": {"total": 184, "additions": 180, "deletions": 4}, "files": [{"sha": "d234179f2fa9258756f6a2fc0a8e245044e5509d", "filename": "gcc/rust/checks/errors/rust-unsafe-checker.cc", "status": "modified", "additions": 74, "deletions": 4, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/205096066a50f501eb1c1d1f7acb4b0daa8be15a/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/205096066a50f501eb1c1d1f7acb4b0daa8be15a/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.cc?ref=205096066a50f501eb1c1d1f7acb4b0daa8be15a", "patch": "@@ -25,7 +25,10 @@\n namespace Rust {\n namespace HIR {\n \n-UnsafeChecker::UnsafeChecker () : context (*Resolver::TypeCheckContext::get ())\n+UnsafeChecker::UnsafeChecker ()\n+  : context (*Resolver::TypeCheckContext::get ()),\n+    resolver (*Resolver::Resolver::get ()),\n+    mappings (*Analysis::Mappings::get ())\n {}\n \n void\n@@ -35,6 +38,47 @@ UnsafeChecker::go (HIR::Crate &crate)\n     item->accept_vis (*this);\n }\n \n+static void\n+check_static_mut (HIR::Item *maybe_static, Location locus)\n+{\n+  if (maybe_static->get_hir_kind () == Node::BaseKind::VIS_ITEM)\n+    {\n+      auto item = static_cast<Item *> (maybe_static);\n+      if (item->get_item_kind () == Item::ItemKind::Static)\n+\t{\n+\t  auto static_item = static_cast<StaticItem *> (item);\n+\t  if (static_item->is_mut ())\n+\t    rust_error_at (\n+\t      locus, \"use of mutable static requires unsafe function or block\");\n+\t}\n+    }\n+}\n+\n+static void\n+check_extern_static (HIR::ExternalItem *maybe_static, Location locus)\n+{\n+  if (maybe_static->get_extern_kind () == ExternalItem::ExternKind::Static)\n+    rust_error_at (locus,\n+\t\t   \"use of extern static requires unsafe function or block\");\n+}\n+\n+void\n+UnsafeChecker::check_use_of_static (HirId node_id, Location locus)\n+{\n+  if (is_unsafe_context ())\n+    return;\n+\n+  auto maybe_static_mut = mappings.lookup_hir_item (node_id);\n+  auto maybe_extern_static = mappings.lookup_hir_extern_item (node_id);\n+\n+  if (maybe_static_mut)\n+    check_static_mut (maybe_static_mut, locus);\n+\n+  if (maybe_extern_static)\n+    check_extern_static (static_cast<ExternalItem *> (maybe_extern_static),\n+\t\t\t locus);\n+}\n+\n void\n UnsafeChecker::push_unsafe (HirId id)\n {\n@@ -60,7 +104,18 @@ UnsafeChecker::is_unsafe_context ()\n \n void\n UnsafeChecker::visit (IdentifierExpr &ident_expr)\n-{}\n+{\n+  NodeId ast_node_id = ident_expr.get_mappings ().get_nodeid ();\n+  NodeId ref_node_id;\n+  HirId definition_id;\n+\n+  if (!resolver.lookup_resolved_name (ast_node_id, &ref_node_id))\n+    return;\n+\n+  rust_assert (mappings.lookup_node_to_hir (ref_node_id, &definition_id));\n+\n+  check_use_of_static (definition_id, ident_expr.get_locus ());\n+}\n \n void\n UnsafeChecker::visit (Lifetime &lifetime)\n@@ -72,7 +127,18 @@ UnsafeChecker::visit (LifetimeParam &lifetime_param)\n \n void\n UnsafeChecker::visit (PathInExpression &path)\n-{}\n+{\n+  NodeId ast_node_id = path.get_mappings ().get_nodeid ();\n+  NodeId ref_node_id;\n+  HirId definition_id;\n+\n+  if (!resolver.lookup_resolved_name (ast_node_id, &ref_node_id))\n+    return;\n+\n+  rust_assert (mappings.lookup_node_to_hir (ref_node_id, &definition_id));\n+\n+  check_use_of_static (definition_id, path.get_locus ());\n+}\n \n void\n UnsafeChecker::visit (TypePathSegment &segment)\n@@ -253,7 +319,11 @@ UnsafeChecker::visit (StructExprStructBase &expr)\n \n void\n UnsafeChecker::visit (CallExpr &expr)\n-{}\n+{\n+  if (expr.has_params ())\n+    for (auto &arg : expr.get_arguments ())\n+      arg->accept_vis (*this);\n+}\n \n void\n UnsafeChecker::visit (MethodCallExpr &expr)"}, {"sha": "38b9019e3b7ceefad466c678b4a9ac35d284e916", "filename": "gcc/rust/checks/errors/rust-unsafe-checker.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/205096066a50f501eb1c1d1f7acb4b0daa8be15a/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/205096066a50f501eb1c1d1f7acb4b0daa8be15a/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.h?ref=205096066a50f501eb1c1d1f7acb4b0daa8be15a", "patch": "@@ -20,6 +20,7 @@\n #define RUST_UNSAFE_CHECKER_H\n \n #include \"rust-hir-visitor.h\"\n+#include \"rust-name-resolver.h\"\n #include \"rust-hir-type-check.h\"\n \n namespace Rust {\n@@ -51,7 +52,15 @@ class UnsafeChecker : public HIRFullVisitor\n    */\n   bool is_unsafe_context ();\n \n+  /**\n+   * Check if a mutable static or external static item is used outside of an\n+   * unsafe context\n+   */\n+  void check_use_of_static (HirId node_id, Location locus);\n+\n   Resolver::TypeCheckContext &context;\n+  Resolver::Resolver resolver;\n+  Analysis::Mappings mappings;\n \n   virtual void visit (IdentifierExpr &ident_expr) override;\n   virtual void visit (Lifetime &lifetime) override;"}, {"sha": "394b04f6c7fa53ddfcf22ac11e20000892857c5e", "filename": "gcc/rust/hir/tree/rust-hir-item.h", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/205096066a50f501eb1c1d1f7acb4b0daa8be15a/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/205096066a50f501eb1c1d1f7acb4b0daa8be15a/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h?ref=205096066a50f501eb1c1d1f7acb4b0daa8be15a", "patch": "@@ -723,6 +723,8 @@ class Module : public VisItem\n \n   Location get_locus () const override final { return locus; }\n \n+  ItemKind get_item_kind () const override { return ItemKind::Module; }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object\n    * rather than base */\n@@ -773,6 +775,8 @@ class ExternCrate : public VisItem\n \n   Location get_locus () const override final { return locus; }\n \n+  ItemKind get_item_kind () const override { return ItemKind::ExternCrate; }\n+\n   void accept_vis (HIRFullVisitor &vis) override;\n   void accept_vis (HIRStmtVisitor &vis) override;\n   void accept_vis (HIRVisItemVisitor &vis) override;\n@@ -1039,6 +1043,7 @@ class UseDeclaration : public VisItem\n   UseDeclaration &operator= (UseDeclaration &&other) = default;\n \n   Location get_locus () const override final { return locus; }\n+  ItemKind get_item_kind () const override { return ItemKind::UseDeclaration; }\n \n   void accept_vis (HIRFullVisitor &vis) override;\n   void accept_vis (HIRStmtVisitor &vis) override;\n@@ -1094,6 +1099,8 @@ class Function : public VisItem, public ImplItem\n     return ImplItem::ImplItemType::FUNCTION;\n   }\n \n+  ItemKind get_item_kind () const override { return ItemKind::Function; }\n+\n   // Mega-constructor with all possible fields\n   Function (Analysis::NodeMapping mappings, Identifier function_name,\n \t    FunctionQualifiers qualifiers,\n@@ -1329,6 +1336,8 @@ class TypeAlias : public VisItem, public ImplItem\n \n   Identifier get_new_type_name () const { return new_type_name; }\n \n+  ItemKind get_item_kind () const override { return ItemKind::TypeAlias; }\n+\n   Analysis::NodeMapping get_impl_mappings () const override\n   {\n     return get_mappings ();\n@@ -1373,6 +1382,7 @@ class Struct : public VisItem\n   bool has_where_clause () const { return !where_clause.is_empty (); }\n \n   Location get_locus () const override final { return locus; }\n+  ItemKind get_item_kind () const override { return ItemKind::Struct; }\n \n   std::vector<std::unique_ptr<GenericParam>> &get_generic_params ()\n   {\n@@ -1709,6 +1719,8 @@ class EnumItem : public Item\n \n   Identifier get_identifier () const { return variant_name; }\n \n+  ItemKind get_item_kind () const override { return ItemKind::EnumItem; }\n+\n protected:\n   EnumItem *clone_item_impl () const override { return new EnumItem (*this); }\n };\n@@ -1930,6 +1942,7 @@ class Enum : public VisItem\n   void accept_vis (HIRVisItemVisitor &vis) override;\n \n   Identifier get_identifier () const { return enum_name; }\n+  ItemKind get_item_kind () const override { return ItemKind::Enum; }\n \n   std::vector<std::unique_ptr<GenericParam>> &get_generic_params ()\n   {\n@@ -2037,6 +2050,8 @@ class Union : public VisItem\n \n   WhereClause &get_where_clause () { return where_clause; }\n \n+  ItemKind get_item_kind () const override { return ItemKind::Union; }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object\n    * rather than base */\n@@ -2111,6 +2126,8 @@ class ConstantItem : public VisItem, public ImplItem\n     return ImplItem::ImplItemType::CONSTANT;\n   }\n \n+  ItemKind get_item_kind () const override { return ItemKind::Constant; }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object\n    * rather than base */\n@@ -2188,6 +2205,8 @@ class StaticItem : public VisItem\n \n   Type *get_type () { return type.get (); }\n \n+  ItemKind get_item_kind () const override { return ItemKind::Static; }\n+\n protected:\n   StaticItem *clone_item_impl () const override\n   {\n@@ -2677,6 +2696,8 @@ class Trait : public VisItem\n     return type_param_bounds;\n   }\n \n+  ItemKind get_item_kind () const override { return ItemKind::Trait; }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object\n    * rather than base */\n@@ -2797,6 +2818,8 @@ class ImplBlock : public VisItem\n \n   WhereClause &get_where_clause () { return where_clause; }\n \n+  ItemKind get_item_kind () const override { return ItemKind::Impl; }\n+\n protected:\n   ImplBlock *clone_item_impl () const override { return new ImplBlock (*this); }\n };\n@@ -2811,10 +2834,18 @@ class ExternalItem : public Node\n   Location locus;\n \n public:\n+  enum class ExternKind\n+  {\n+    Static,\n+    Function,\n+  };\n+\n   virtual ~ExternalItem () {}\n \n   BaseKind get_hir_kind () override final { return EXTERNAL; }\n \n+  virtual ExternKind get_extern_kind () = 0;\n+\n   // Returns whether item has outer attributes.\n   bool has_outer_attrs () const { return !outer_attrs.empty (); }\n \n@@ -2921,6 +2952,8 @@ class ExternalStaticItem : public ExternalItem\n \n   std::unique_ptr<Type> &get_item_type () { return item_type; }\n \n+  ExternKind get_extern_kind () override { return ExternKind::Static; }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object\n    * rather than base */\n@@ -3072,6 +3105,8 @@ class ExternalFunctionItem : public ExternalItem\n \n   bool is_variadic () const { return has_variadics; }\n \n+  ExternKind get_extern_kind () override { return ExternKind::Function; }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object\n    * rather than base */\n@@ -3149,6 +3184,8 @@ class ExternBlock : public VisItem\n     return extern_items;\n   }\n \n+  ItemKind get_item_kind () const override { return ItemKind::ExternBlock; }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object\n    * rather than base */"}, {"sha": "c2f6fef1383a577cc3a86d17e952e08bac891eec", "filename": "gcc/rust/hir/tree/rust-hir.h", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/205096066a50f501eb1c1d1f7acb4b0daa8be15a/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/205096066a50f501eb1c1d1f7acb4b0daa8be15a/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h?ref=205096066a50f501eb1c1d1f7acb4b0daa8be15a", "patch": "@@ -175,6 +175,26 @@ class Item : public Stmt\n   // TODO: should outer attrs be defined here or in each derived class?\n \n public:\n+  enum class ItemKind\n+  {\n+    Static,\n+    Constant,\n+    TypeAlias,\n+    Function,\n+    UseDeclaration,\n+    ExternBlock,\n+    ExternCrate,\n+    Struct,\n+    Union,\n+    Enum,\n+    EnumItem, // FIXME: ARTHUR: Do we need that?\n+    Trait,\n+    Impl,\n+    Module,\n+  };\n+\n+  virtual ItemKind get_item_kind () const = 0;\n+\n   // Unique pointer custom clone function\n   std::unique_ptr<Item> clone_item () const\n   {"}, {"sha": "9cd3f6b4bf29756eb444b3b4e9c6ece66751905c", "filename": "gcc/testsuite/rust/compile/unsafe1.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/205096066a50f501eb1c1d1f7acb4b0daa8be15a/gcc%2Ftestsuite%2Frust%2Fcompile%2Funsafe1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/205096066a50f501eb1c1d1f7acb4b0daa8be15a/gcc%2Ftestsuite%2Frust%2Fcompile%2Funsafe1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Funsafe1.rs?ref=205096066a50f501eb1c1d1f7acb4b0daa8be15a", "patch": "@@ -0,0 +1,14 @@\n+fn foo(_a: &i32) {}\n+fn bar(_a: i32) {}\n+\n+static mut a: i32 = 15;\n+\n+fn main() {\n+    foo(&a); // { dg-error \"use of mutable static\" }\n+    bar(a); // { dg-error \"use of mutable static\" }\n+\n+    unsafe {\n+        foo(&a);\n+        bar(a);\n+    }\n+}"}, {"sha": "e03e4bc59f425dd644dfce2e99fe1caa35d552c5", "filename": "gcc/testsuite/rust/compile/unsafe2.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/205096066a50f501eb1c1d1f7acb4b0daa8be15a/gcc%2Ftestsuite%2Frust%2Fcompile%2Funsafe2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/205096066a50f501eb1c1d1f7acb4b0daa8be15a/gcc%2Ftestsuite%2Frust%2Fcompile%2Funsafe2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Funsafe2.rs?ref=205096066a50f501eb1c1d1f7acb4b0daa8be15a", "patch": "@@ -0,0 +1,16 @@\n+fn foo(_a: &i32) {}\n+fn bar(_a: i32) {}\n+\n+mod inner {\n+    pub static mut a: i32 = 15;\n+}\n+\n+fn main() {\n+    foo(&inner::a); // { dg-error \"use of mutable static\" }\n+    bar(inner::a); // { dg-error \"use of mutable static\" }\n+\n+    unsafe {\n+        foo(&inner::a);\n+        bar(inner::a);\n+    }\n+}"}, {"sha": "56aec76008a50769f2a9cd4cdca3ab4dc2efb515", "filename": "gcc/testsuite/rust/compile/unsafe3.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/205096066a50f501eb1c1d1f7acb4b0daa8be15a/gcc%2Ftestsuite%2Frust%2Fcompile%2Funsafe3.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/205096066a50f501eb1c1d1f7acb4b0daa8be15a/gcc%2Ftestsuite%2Frust%2Fcompile%2Funsafe3.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Funsafe3.rs?ref=205096066a50f501eb1c1d1f7acb4b0daa8be15a", "patch": "@@ -0,0 +1,10 @@\n+extern \"C\" {\n+    static VALUE: char;\n+}\n+\n+fn main() {\n+    let _ = VALUE; // { dg-error \"use of extern static\" }\n+    unsafe {\n+        let _ = VALUE;\n+    }\n+}"}]}