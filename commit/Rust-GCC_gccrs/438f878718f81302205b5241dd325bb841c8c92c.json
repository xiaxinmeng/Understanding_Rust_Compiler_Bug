{"sha": "438f878718f81302205b5241dd325bb841c8c92c", "node_id": "C_kwDOANBUbNoAKDQzOGY4Nzg3MThmODEzMDIyMDViNTI0MWRkMzI1YmI4NDFjOGM5MmM", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2022-11-07T14:25:31Z"}, "committer": {"name": "Marc Poulhi\u00e8s", "email": "poulhies@adacore.com", "date": "2022-11-14T13:46:51Z"}, "message": "ada: Remove incorrect comments about initialization\n\nCleanup only; no change in behavior.\n\nThis patch removes and rewrites some comments regarding initialization.\nThese initializions are needed, so there's no need to apologize for\ninitializing these variables.\n\nNote that -gnatVa is not relevant; reads of uninitialized variables\nare wrong, whether or not we get caught.\n\ngcc/ada/\n\n\t* atree.ads: Remove some comments.\n\t* err_vars.ads: Likewise.\n\t* scans.ads: Likewise.\n\t* sinput.ads: Likewise.\n\t* checks.ads: Likewise. Also add a \"???\" comment indicating an\n\tobsolete comment that is too difficult to correct at this time.\n\t* sem_attr.adb: Minor comment rewrite.", "tree": {"sha": "257239eb0a0285effb6af91c9e650d8275619a73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/257239eb0a0285effb6af91c9e650d8275619a73"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/438f878718f81302205b5241dd325bb841c8c92c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/438f878718f81302205b5241dd325bb841c8c92c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/438f878718f81302205b5241dd325bb841c8c92c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/438f878718f81302205b5241dd325bb841c8c92c/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e194d289d4d1c9aa16d14c4b94caf11c2506da3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e194d289d4d1c9aa16d14c4b94caf11c2506da3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e194d289d4d1c9aa16d14c4b94caf11c2506da3"}], "stats": {"total": 69, "additions": 25, "deletions": 44}, "files": [{"sha": "cc66ab3777c5927e335915502245b0fffb6e474e", "filename": "gcc/ada/atree.ads", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/438f878718f81302205b5241dd325bb841c8c92c/gcc%2Fada%2Fatree.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/438f878718f81302205b5241dd325bb841c8c92c/gcc%2Fada%2Fatree.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.ads?ref=438f878718f81302205b5241dd325bb841c8c92c", "patch": "@@ -148,20 +148,18 @@ package Atree is\n    --  This is a count of errors that are serious enough to stop expansion,\n    --  and hence to prevent generation of an object file even if the\n    --  switch -gnatQ is set. Initialized to zero at the start of compilation.\n-   --  Initialized for -gnatVa use, see comment above.\n \n    --  WARNING: There is a matching C declaration of this variable in fe.h\n \n    Total_Errors_Detected : Nat := 0;\n    --  Number of errors detected so far. Includes count of serious errors and\n    --  non-serious errors, so this value is always greater than or equal to the\n    --  Serious_Errors_Detected value. Initialized to zero at the start of\n-   --  compilation. Initialized for -gnatVa use, see comment above.\n+   --  compilation.\n \n    Warnings_Detected : Nat := 0;\n    --  Number of warnings detected. Initialized to zero at the start of\n-   --  compilation. Initialized for -gnatVa use, see comment above. This\n-   --  count includes the count of style and info messages.\n+   --  compilation. This count includes the count of style and info messages.\n \n    Warning_Info_Messages : Nat := 0;\n    --  Number of info messages generated as warnings. Info messages are never"}, {"sha": "a7d05a3fa398b4358c523ec28968daf5d5b2fdf3", "filename": "gcc/ada/checks.ads", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/438f878718f81302205b5241dd325bb841c8c92c/gcc%2Fada%2Fchecks.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/438f878718f81302205b5241dd325bb841c8c92c/gcc%2Fada%2Fchecks.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.ads?ref=438f878718f81302205b5241dd325bb841c8c92c", "patch": "@@ -776,12 +776,14 @@ package Checks is\n    --           itself lead to erroneous or unpredictable execution, or to\n    --           other objects becoming abnormal.\n \n-   --  We quote the rules in full here since they are quite delicate. Most\n-   --  of the time, we can just compute away with wrong values, and get a\n-   --  possibly wrong result, which is well within the range of allowed\n-   --  implementation defined behavior. The two tricky cases are subscripted\n-   --  array assignments, where we don't want to do wild stores, and case\n-   --  statements where we don't want to do wild jumps.\n+   --  We quote the rules in full here since they are quite delicate.\n+   --  (???The rules quoted here are obsolete; see the GNAT User's Guide for a\n+   --  description of all the -gnatV switches.) Most of the time, we can just\n+   --  compute away with wrong values, and get a possibly wrong result, which\n+   --  is well within the range of allowed implementation defined behavior. The\n+   --  two tricky cases are subscripted array assignments, where we don't want\n+   --  to do wild stores, and case statements where we don't want to do wild\n+   --  jumps.\n \n    --  In GNAT, we control validity checking with a switch -gnatV that can take\n    --  three parameters, n/d/f for None/Default/Full. These modes have the\n@@ -799,15 +801,8 @@ package Checks is\n    --        alternatives will be executed. Wild jumps cannot result even\n    --        in this mode, since we always do a range check\n \n-   --        For subscripted array assignments, wild stores will result in\n-   --        the expected manner when addresses are calculated using values\n-   --        of subscripts that are out of range.\n-\n-   --      It could perhaps be argued that this mode is still conformant with\n-   --      the letter of the RM, since implementation defined is a rather\n-   --      broad category, but certainly it is not in the spirit of the\n-   --      RM requirement, since wild stores certainly seem to be a case of\n-   --      erroneous behavior.\n+   --        For subscripted array assignments, wild stores can result in\n+   --        overwriting arbitrary memory locations.\n \n    --    Default (default standard RM-compatible validity checking)\n "}, {"sha": "66c4bb09b4c3ae748ead69a23cda3f59b0e3eeb5", "filename": "gcc/ada/err_vars.ads", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/438f878718f81302205b5241dd325bb841c8c92c/gcc%2Fada%2Ferr_vars.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/438f878718f81302205b5241dd325bb841c8c92c/gcc%2Fada%2Ferr_vars.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferr_vars.ads?ref=438f878718f81302205b5241dd325bb841c8c92c", "patch": "@@ -32,12 +32,6 @@ with Uintp; use Uintp;\n \n package Err_Vars is\n \n-   --  All of these variables are set when needed, so they do not need to be\n-   --  initialized. However, there is code that saves and restores existing\n-   --  values, which may malfunction in -gnatVa mode if the variable has never\n-   --  been initialized, so we initialize some variables to avoid exceptions\n-   --  from invalid values in such cases.\n-\n    --  Note on error counts (Serious_Errors_Detected, Total_Errors_Detected,\n    --  Warnings_Detected, Warning_Info_Messages, Report_Info_Messages). These\n    --  counts might more logically appear in this unit, but we place them\n@@ -68,7 +62,6 @@ package Err_Vars is\n    --  resulting from illegalities, and also for substitution of more\n    --  appropriate error messages from higher semantic levels. It is\n    --  a counter so that the increment/decrement protocol nests neatly.\n-   --  Initialized for -gnatVa use, see comment above.\n \n    Error_Msg_Exception : exception;\n    --  Exception raised if Raise_Exception_On_Error is true"}, {"sha": "ddb4c3efb7231eeaf8a5a98226885c1a3b51a71a", "filename": "gcc/ada/scans.ads", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/438f878718f81302205b5241dd325bb841c8c92c/gcc%2Fada%2Fscans.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/438f878718f81302205b5241dd325bb841c8c92c/gcc%2Fada%2Fscans.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fscans.ads?ref=438f878718f81302205b5241dd325bb841c8c92c", "patch": "@@ -358,38 +358,35 @@ package Scans is\n    --  Note: these variables can only be referenced during the parsing of a\n    --  file. Reference to any of them from Sem or the expander is wrong.\n \n-   --  These variables are initialized as required by Scn.Initialize_Scanner,\n-   --  and should not be referenced before such a call. However, there are\n-   --  situations in which these variables are saved and restored, and this\n-   --  may happen before the first Initialize_Scanner call, resulting in the\n-   --  assignment of invalid values. To avoid this, and allow building with\n-   --  the -gnatVa switch, we initialize some variables to known valid values.\n-\n-   Scan_Ptr : Source_Ptr := No_Location; -- init for -gnatVa\n+   --  These variables are initialized by Scn.Initialize_Scanner, and should\n+   --  not be referenced before such a call, except for saving and restoring\n+   --  them.\n+\n+   Scan_Ptr : Source_Ptr := No_Location;\n    --  Current scan pointer location. After a call to Scan, this points\n    --  just past the end of the token just scanned.\n \n-   Token : Token_Type := No_Token; -- init for -gnatVa\n+   Token : Token_Type := No_Token;\n    --  Type of current token\n \n-   Token_Ptr : Source_Ptr := No_Location; -- init for -gnatVa\n+   Token_Ptr : Source_Ptr := No_Location;\n    --  Pointer to first character of current token\n \n-   Current_Line_Start : Source_Ptr := No_Location; -- init for -gnatVa\n+   Current_Line_Start : Source_Ptr := No_Location;\n    --  Pointer to first character of line containing current token\n \n-   Start_Column : Column_Number := No_Column_Number; -- init for -gnatVa\n+   Start_Column : Column_Number := No_Column_Number;\n    --  Starting column number (zero origin) of the first non-blank character\n    --  on the line containing the current token. This is used for error\n    --  recovery circuits which depend on looking at the column line up.\n \n-   Type_Token_Location : Source_Ptr := No_Location; -- init for -gnatVa\n+   Type_Token_Location : Source_Ptr := No_Location;\n    --  Within a type declaration, gives the location of the TYPE keyword that\n    --  opened the type declaration. Used in checking the end column of a record\n    --  declaration, which can line up either with the TYPE keyword, or with the\n    --  start of the line containing the RECORD keyword.\n \n-   Checksum : Word := 0; -- init for -gnatVa\n+   Checksum : Word := 0;\n    --  Used to accumulate a CRC representing the tokens in the source\n    --  file being compiled. This CRC includes only program tokens, and\n    --  excludes comments.\n@@ -399,7 +396,7 @@ package Scans is\n    --  limited view of a package, i.e. visible type names and related\n    --  tagged indicators.\n \n-   First_Non_Blank_Location : Source_Ptr := No_Location; -- init for -gnatVa\n+   First_Non_Blank_Location : Source_Ptr := No_Location;\n    --  Location of first non-blank character on the line containing the\n    --  current token (i.e. the location of the character whose column number\n    --  is stored in Start_Column)."}, {"sha": "f7c03abe49a89b0bd37d1a64c0aced3fb6681b09", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/438f878718f81302205b5241dd325bb841c8c92c/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/438f878718f81302205b5241dd325bb841c8c92c/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=438f878718f81302205b5241dd325bb841c8c92c", "patch": "@@ -1138,7 +1138,7 @@ package body Sem_Attr is\n                   --  pointer can be used to modify the variable, and we might\n                   --  not detect this, leading to some junk warnings.\n \n-                  --  We only do this for source references, since otherwise\n+                  --  We do this only for source references, since otherwise\n                   --  we can suppress warnings, e.g. from the unrestricted\n                   --  access generated for validity checks in -gnatVa mode.\n "}, {"sha": "febb2ef781bad221eb3f5f49bbfb9b7f48774b1b", "filename": "gcc/ada/sinput.ads", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/438f878718f81302205b5241dd325bb841c8c92c/gcc%2Fada%2Fsinput.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/438f878718f81302205b5241dd325bb841c8c92c/gcc%2Fada%2Fsinput.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinput.ads?ref=438f878718f81302205b5241dd325bb841c8c92c", "patch": "@@ -409,8 +409,6 @@ package Sinput is\n \n    Current_Source_File : Source_File_Index := No_Source_File;\n    --  Source_File table index of source file currently being scanned.\n-   --  Initialized so that some tools (such as gprbuild) can be built with\n-   --  -gnatVa and pragma Initialize_Scalars without problems.\n \n    Current_Source_Unit : Unit_Number_Type := No_Unit;\n    --  Unit number of source file currently being scanned. Initialized to"}]}