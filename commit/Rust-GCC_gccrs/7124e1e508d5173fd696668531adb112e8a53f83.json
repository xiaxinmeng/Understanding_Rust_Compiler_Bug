{"sha": "7124e1e508d5173fd696668531adb112e8a53f83", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzEyNGUxZTUwOGQ1MTczZmQ2OTY2Njg1MzFhZGIxMTJlOGE1M2Y4Mw==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-10-14T04:21:51Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-10-14T04:21:51Z"}, "message": "(jump_optimize): Don't optimize jumps to store-flag insns\nwhen BLKmode values are being compared.\n\nFrom-SVN: r2450", "tree": {"sha": "2e434b9cdb8b1eb462a20e28d5553c7f730754e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e434b9cdb8b1eb462a20e28d5553c7f730754e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7124e1e508d5173fd696668531adb112e8a53f83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7124e1e508d5173fd696668531adb112e8a53f83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7124e1e508d5173fd696668531adb112e8a53f83", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7124e1e508d5173fd696668531adb112e8a53f83/comments", "author": null, "committer": null, "parents": [{"sha": "fb3ef382a4ef27dcac9fe78c04cee144767c491a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb3ef382a4ef27dcac9fe78c04cee144767c491a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb3ef382a4ef27dcac9fe78c04cee144767c491a"}], "stats": {"total": 8, "additions": 8, "deletions": 0}, "files": [{"sha": "3d66fcf99b49681e29cdf3cdd1015b53b1219d8d", "filename": "gcc/jump.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7124e1e508d5173fd696668531adb112e8a53f83/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7124e1e508d5173fd696668531adb112e8a53f83/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=7124e1e508d5173fd696668531adb112e8a53f83", "patch": "@@ -1019,6 +1019,10 @@ jump_optimize (f, cross_jump, noop_moves, after_regscan)\n \t\t      && simplejump_p (temp4)\n \t\t      && JUMP_LABEL (temp4) == JUMP_LABEL (insn)))\n \t      && (temp4 = get_condition (insn, &temp5)) != 0\n+\t      /* We must be comparing objects whose modes imply the size.\n+\t\t We could handle BLKmode if (1) emit_store_flag could\n+\t\t and (2) we could find the size reliably.  */\n+\t      && GET_MODE (XEXP (temp4, 0)) != BLKmode\n \n \t      /* If B is zero, OK; if A is zero, can only do (1) if we\n \t\t can reverse the condition.  See if (3) applies possibly\n@@ -1200,6 +1204,10 @@ jump_optimize (f, cross_jump, noop_moves, after_regscan)\n \t\t      && simplejump_p (temp3)\n \t\t      && JUMP_LABEL (temp3) == JUMP_LABEL (insn)))\n \t      && (temp3 = get_condition (insn, &temp4)) != 0\n+\t      /* We must be comparing objects whose modes imply the size.\n+\t\t We could handle BLKmode if (1) emit_store_flag could\n+\t\t and (2) we could find the size reliably.  */\n+\t      && GET_MODE (XEXP (temp3, 0)) != BLKmode\n \t      && can_reverse_comparison_p (temp3, insn))\n \t    {\n \t      rtx temp6, target = 0, seq, init_insn = 0, init = temp2;"}]}