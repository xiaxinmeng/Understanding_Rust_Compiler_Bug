{"sha": "15a47f437d2ba320aa9cb72986812f115498dbf9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTVhNDdmNDM3ZDJiYTMyMGFhOWNiNzI5ODY4MTJmMTE1NDk4ZGJmOQ==", "commit": {"author": {"name": "Vladimir N. Makarov", "email": "vmakarov@redhat.com", "date": "2021-01-06T19:48:53Z"}, "committer": {"name": "Vladimir N. Makarov", "email": "vmakarov@redhat.com", "date": "2021-01-06T21:13:30Z"}, "message": "[PR97978] LRA: Permit temporary allocation incorrectness after hard reg split.\n\nLRA can crash when a hard register was split and the same hard register\nwas assigned on the previous assignment sub-pass.  The following\npatch fixes this problem.\n\ngcc/ChangeLog:\n\n\tPR rtl-optimization/97978\n\t* lra-int.h (lra_hard_reg_split_p): New external.\n\t* lra.c (lra_hard_reg_split_p): New global.\n\t(lra): Set up lra_hard_reg_split_p after splitting a hard reg.\n\t* lra-assigns.c (lra_assign): Don't check allocation correctness\n\tafter hard reg splitting.\n\ngcc/testsuite/ChangeLog:\n\n\tPR rtl-optimization/97978\n\t* gcc.target/i386/pr97978.c: New.", "tree": {"sha": "07efc4b7b1aaef24877b44d0ec6d48533cec9d98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/07efc4b7b1aaef24877b44d0ec6d48533cec9d98"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/15a47f437d2ba320aa9cb72986812f115498dbf9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15a47f437d2ba320aa9cb72986812f115498dbf9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15a47f437d2ba320aa9cb72986812f115498dbf9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15a47f437d2ba320aa9cb72986812f115498dbf9/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "abb1b6058c09a7c0430d9bf019466ada07ca7b40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abb1b6058c09a7c0430d9bf019466ada07ca7b40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abb1b6058c09a7c0430d9bf019466ada07ca7b40"}], "stats": {"total": 37, "additions": 33, "deletions": 4}, "files": [{"sha": "c6a941fe66381ba733a0eda3f527a6c11383ed37", "filename": "gcc/lra-assigns.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15a47f437d2ba320aa9cb72986812f115498dbf9/gcc%2Flra-assigns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15a47f437d2ba320aa9cb72986812f115498dbf9/gcc%2Flra-assigns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-assigns.c?ref=15a47f437d2ba320aa9cb72986812f115498dbf9", "patch": "@@ -1636,10 +1636,11 @@ lra_assign (bool &fails_p)\n   bitmap_initialize (&all_spilled_pseudos, &reg_obstack);\n   create_live_range_start_chains ();\n   setup_live_pseudos_and_spill_after_risky_transforms (&all_spilled_pseudos);\n-  if (! lra_asm_error_p && flag_checking)\n-    /* Check correctness of allocation for call-crossed pseudos but\n-       only when there are no asm errors as in the case of errors the\n-       asm is removed and it can result in incorrect allocation.  */\n+  if (! lra_hard_reg_split_p && ! lra_asm_error_p && flag_checking)\n+    /* Check correctness of allocation but only when there are no hard reg\n+       splits and asm errors as in the case of errors explicit insns involving\n+       hard regs are added or the asm is removed and this can result in\n+       incorrect allocation.  */\n     for (i = FIRST_PSEUDO_REGISTER; i < max_regno; i++)\n       if (lra_reg_info[i].nrefs != 0\n \t  && reg_renumber[i] >= 0"}, {"sha": "1b8f7b6ae6188379af4740c9a18ea647d4cff3b8", "filename": "gcc/lra-int.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15a47f437d2ba320aa9cb72986812f115498dbf9/gcc%2Flra-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15a47f437d2ba320aa9cb72986812f115498dbf9/gcc%2Flra-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-int.h?ref=15a47f437d2ba320aa9cb72986812f115498dbf9", "patch": "@@ -273,6 +273,7 @@ typedef class lra_insn_recog_data *lra_insn_recog_data_t;\n \n extern FILE *lra_dump_file;\n \n+extern bool lra_hard_reg_split_p;\n extern bool lra_asm_error_p;\n extern bool lra_reg_spill_p;\n "}, {"sha": "aa49de6f154f1ff90bb311b31950c69efad05ec8", "filename": "gcc/lra.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15a47f437d2ba320aa9cb72986812f115498dbf9/gcc%2Flra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15a47f437d2ba320aa9cb72986812f115498dbf9/gcc%2Flra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra.c?ref=15a47f437d2ba320aa9cb72986812f115498dbf9", "patch": "@@ -2211,6 +2211,9 @@ bitmap_head lra_subreg_reload_pseudos;\n /* File used for output of LRA debug information.  */\n FILE *lra_dump_file;\n \n+/* True if we split hard reg after the last constraint sub-pass.  */\n+bool lra_hard_reg_split_p;\n+\n /* True if we found an asm error.  */\n bool lra_asm_error_p;\n \n@@ -2359,6 +2362,7 @@ lra (FILE *f)\n \t  if (live_p)\n \t    lra_clear_live_ranges ();\n \t  bool fails_p;\n+\t  lra_hard_reg_split_p = false;\n \t  do\n \t    {\n \t      /* We need live ranges for lra_assign -- so build them.\n@@ -2403,6 +2407,7 @@ lra (FILE *f)\n \t\t  live_p = false;\n \t\t  if (! lra_split_hard_reg_for ())\n \t\t    break;\n+\t\t  lra_hard_reg_split_p = true;\n \t\t}\n \t    }\n \t  while (fails_p);"}, {"sha": "263bca8708d273d14fb0c01e2b07f061bcf37228", "filename": "gcc/testsuite/gcc.target/i386/pr97978.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15a47f437d2ba320aa9cb72986812f115498dbf9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr97978.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15a47f437d2ba320aa9cb72986812f115498dbf9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr97978.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr97978.c?ref=15a47f437d2ba320aa9cb72986812f115498dbf9", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Os -fno-PIC\" } */\n+int sg;\n+long int kk;\n+\n+void\n+bp (int jz, int tj, long int li)\n+{\n+  if (jz == 0 || tj == 0)\n+    __builtin_unreachable ();\n+\n+  kk = li;\n+}\n+\n+void\n+qp (void)\n+{\n+  ++kk;\n+\n+  for (;;)\n+    bp (1l / sg, 0, ~0u);\n+}"}]}