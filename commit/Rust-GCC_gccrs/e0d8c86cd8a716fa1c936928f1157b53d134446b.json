{"sha": "e0d8c86cd8a716fa1c936928f1157b53d134446b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTBkOGM4NmNkOGE3MTZmYTFjOTM2OTI4ZjExNTdiNTNkMTM0NDQ2Yg==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2014-04-23T15:20:25Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2014-04-23T15:20:25Z"}, "message": "[ARM] Cortex-A8 rtx cost table\n\n       * config/arm/arm.c (cortexa8_extra_costs): New table.\n       (arm_cortex_a8_tune): New tuning struct.\n       * config/arm/arm-cores.def (cortex-a8): Use cortex_a8 tuning struct.\n\nFrom-SVN: r209702", "tree": {"sha": "24dfa384de4ebf40bc126f30cf67f05ee631d670", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/24dfa384de4ebf40bc126f30cf67f05ee631d670"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0d8c86cd8a716fa1c936928f1157b53d134446b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0d8c86cd8a716fa1c936928f1157b53d134446b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0d8c86cd8a716fa1c936928f1157b53d134446b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0d8c86cd8a716fa1c936928f1157b53d134446b/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ba9b1a639fb8dfcf7d54700905fd1ba58d20f739", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba9b1a639fb8dfcf7d54700905fd1ba58d20f739", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba9b1a639fb8dfcf7d54700905fd1ba58d20f739"}], "stats": {"total": 125, "additions": 124, "deletions": 1}, "files": [{"sha": "f36108d748fa49666db78d76ba2bd34cde2d5072", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0d8c86cd8a716fa1c936928f1157b53d134446b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0d8c86cd8a716fa1c936928f1157b53d134446b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e0d8c86cd8a716fa1c936928f1157b53d134446b", "patch": "@@ -1,3 +1,9 @@\n+2013-04-23  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+       * config/arm/arm.c (cortexa8_extra_costs): New table.\n+       (arm_cortex_a8_tune): New tuning struct.\n+       * config/arm/arm-cores.def (cortex-a8): Use cortex_a8 tuning struct.\n+\n 2014-04-23  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n        * config/arm/arm.c (arm_new_rtx_costs): Handle FMA."}, {"sha": "5bbc76ac269fe375030a62eb13326ac2a17dbc66", "filename": "gcc/config/arm/arm-cores.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0d8c86cd8a716fa1c936928f1157b53d134446b/gcc%2Fconfig%2Farm%2Farm-cores.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0d8c86cd8a716fa1c936928f1157b53d134446b/gcc%2Fconfig%2Farm%2Farm-cores.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-cores.def?ref=e0d8c86cd8a716fa1c936928f1157b53d134446b", "patch": "@@ -136,7 +136,7 @@ ARM_CORE(\"cortex-m0plus\",\tcortexm0plus, cortexm0plus,\t6M, FL_LDSCHED, v6m)\n ARM_CORE(\"generic-armv7-a\",\tgenericv7a, genericv7a,\t\t7A,  FL_LDSCHED, cortex)\n ARM_CORE(\"cortex-a5\",\t\tcortexa5, cortexa5,\t\t7A,  FL_LDSCHED, cortex_a5)\n ARM_CORE(\"cortex-a7\",\t\tcortexa7, cortexa7,\t\t7A,  FL_LDSCHED | FL_THUMB_DIV | FL_ARM_DIV, cortex_a7)\n-ARM_CORE(\"cortex-a8\",\t\tcortexa8, cortexa8,\t\t7A,  FL_LDSCHED, cortex)\n+ARM_CORE(\"cortex-a8\",\t\tcortexa8, cortexa8,\t\t7A,  FL_LDSCHED, cortex_a8)\n ARM_CORE(\"cortex-a9\",\t\tcortexa9, cortexa9,\t\t7A,  FL_LDSCHED, cortex_a9)\n ARM_CORE(\"cortex-a12\",\t  \tcortexa12, cortexa15,\t\t7A,  FL_LDSCHED | FL_THUMB_DIV | FL_ARM_DIV, cortex_a12)\n ARM_CORE(\"cortex-a15\",\t\tcortexa15, cortexa15,\t\t7A,  FL_LDSCHED | FL_THUMB_DIV | FL_ARM_DIV, cortex_a15)"}, {"sha": "12c8730cbbfc80e4656e396282a1a037189face9", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0d8c86cd8a716fa1c936928f1157b53d134446b/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0d8c86cd8a716fa1c936928f1157b53d134446b/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=e0d8c86cd8a716fa1c936928f1157b53d134446b", "patch": "@@ -1069,6 +1069,107 @@ const struct cpu_cost_table cortexa9_extra_costs =\n   }\n };\n \n+const struct cpu_cost_table cortexa8_extra_costs =\n+{\n+  /* ALU */\n+  {\n+    0,\t\t\t/* arith.  */\n+    0,\t\t\t/* logical.  */\n+    COSTS_N_INSNS (1),\t/* shift.  */\n+    0,\t\t\t/* shift_reg.  */\n+    COSTS_N_INSNS (1),\t/* arith_shift.  */\n+    0,\t\t\t/* arith_shift_reg.  */\n+    COSTS_N_INSNS (1),\t/* log_shift.  */\n+    0,\t\t\t/* log_shift_reg.  */\n+    0,\t\t\t/* extend.  */\n+    0,\t\t\t/* extend_arith.  */\n+    0,\t\t\t/* bfi.  */\n+    0,\t\t\t/* bfx.  */\n+    0,\t\t\t/* clz.  */\n+    0,\t\t\t/* non_exec.  */\n+    true\t\t/* non_exec_costs_exec.  */\n+  },\n+  {\n+    /* MULT SImode */\n+    {\n+      COSTS_N_INSNS (1),\t/* simple.  */\n+      COSTS_N_INSNS (1),\t/* flag_setting.  */\n+      COSTS_N_INSNS (1),\t/* extend.  */\n+      COSTS_N_INSNS (1),\t/* add.  */\n+      COSTS_N_INSNS (1),\t/* extend_add.  */\n+      COSTS_N_INSNS (30)\t/* idiv.  No HW div on Cortex A8.  */\n+    },\n+    /* MULT DImode */\n+    {\n+      0,\t\t\t/* simple (N/A).  */\n+      0,\t\t\t/* flag_setting (N/A).  */\n+      COSTS_N_INSNS (2),\t/* extend.  */\n+      0,\t\t\t/* add (N/A).  */\n+      COSTS_N_INSNS (2),\t/* extend_add.  */\n+      0\t\t\t\t/* idiv (N/A).  */\n+    }\n+  },\n+  /* LD/ST */\n+  {\n+    COSTS_N_INSNS (1),\t/* load.  */\n+    COSTS_N_INSNS (1),\t/* load_sign_extend.  */\n+    COSTS_N_INSNS (1),\t/* ldrd.  */\n+    COSTS_N_INSNS (1),\t/* ldm_1st.  */\n+    1,\t\t\t/* ldm_regs_per_insn_1st.  */\n+    2,\t\t\t/* ldm_regs_per_insn_subsequent.  */\n+    COSTS_N_INSNS (1),\t/* loadf.  */\n+    COSTS_N_INSNS (1),\t/* loadd.  */\n+    COSTS_N_INSNS (1),  /* load_unaligned.  */\n+    COSTS_N_INSNS (1),\t/* store.  */\n+    COSTS_N_INSNS (1),\t/* strd.  */\n+    COSTS_N_INSNS (1),\t/* stm_1st.  */\n+    1,\t\t\t/* stm_regs_per_insn_1st.  */\n+    2,\t\t\t/* stm_regs_per_insn_subsequent.  */\n+    COSTS_N_INSNS (1),\t/* storef.  */\n+    COSTS_N_INSNS (1),\t/* stored.  */\n+    COSTS_N_INSNS (1)\t/* store_unaligned.  */\n+  },\n+  {\n+    /* FP SFmode */\n+    {\n+      COSTS_N_INSNS (36),\t/* div.  */\n+      COSTS_N_INSNS (11),\t/* mult.  */\n+      COSTS_N_INSNS (20),\t/* mult_addsub. */\n+      COSTS_N_INSNS (30),\t/* fma.  */\n+      COSTS_N_INSNS (9),\t/* addsub.  */\n+      COSTS_N_INSNS (3),\t/* fpconst.  */\n+      COSTS_N_INSNS (3),\t/* neg.  */\n+      COSTS_N_INSNS (6),\t/* compare.  */\n+      COSTS_N_INSNS (4),\t/* widen.  */\n+      COSTS_N_INSNS (4),\t/* narrow.  */\n+      COSTS_N_INSNS (8),\t/* toint.  */\n+      COSTS_N_INSNS (8),\t/* fromint.  */\n+      COSTS_N_INSNS (8)\t\t/* roundint.  */\n+    },\n+    /* FP DFmode */\n+    {\n+      COSTS_N_INSNS (64),\t/* div.  */\n+      COSTS_N_INSNS (16),\t/* mult.  */\n+      COSTS_N_INSNS (25),\t/* mult_addsub.  */\n+      COSTS_N_INSNS (30),\t/* fma.  */\n+      COSTS_N_INSNS (9),\t/* addsub.  */\n+      COSTS_N_INSNS (3),\t/* fpconst.  */\n+      COSTS_N_INSNS (3),\t/* neg.  */\n+      COSTS_N_INSNS (6),\t/* compare.  */\n+      COSTS_N_INSNS (6),\t/* widen.  */\n+      COSTS_N_INSNS (6),\t/* narrow.  */\n+      COSTS_N_INSNS (8),\t/* toint.  */\n+      COSTS_N_INSNS (8),\t/* fromint.  */\n+      COSTS_N_INSNS (8)\t\t/* roundint.  */\n+    }\n+  },\n+  /* Vector */\n+  {\n+    COSTS_N_INSNS (1)\t/* alu.  */\n+  }\n+};\n+\n+\n \n const struct cpu_cost_table cortexa7_extra_costs =\n {\n@@ -1594,6 +1695,22 @@ const struct tune_params arm_cortex_tune =\n   false, false                                  /* Prefer 32-bit encodings.  */\n };\n \n+const struct tune_params arm_cortex_a8_tune =\n+{\n+  arm_9e_rtx_costs,\n+  &cortexa8_extra_costs,\n+  NULL,\t\t\t\t\t\t/* Sched adj cost.  */\n+  1,\t\t\t\t\t\t/* Constant limit.  */\n+  5,\t\t\t\t\t\t/* Max cond insns.  */\n+  ARM_PREFETCH_NOT_BENEFICIAL,\n+  false,\t\t\t\t\t/* Prefer constant pool.  */\n+  arm_default_branch_cost,\n+  false,\t\t\t\t\t/* Prefer LDRD/STRD.  */\n+  {true, true},\t\t\t\t\t/* Prefer non short circuit.  */\n+  &arm_default_vec_cost,                        /* Vectorizer costs.  */\n+  false                                         /* Prefer Neon for 64-bits bitops.  */\n+};\n+\n const struct tune_params arm_cortex_a7_tune =\n {\n   arm_9e_rtx_costs,"}]}