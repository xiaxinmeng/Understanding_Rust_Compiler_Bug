{"sha": "6ce2002b031c923f028fc53cc1ba802483417113", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmNlMjAwMmIwMzFjOTIzZjAyOGZjNTNjYzFiYTgwMjQ4MzQxNzExMw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2009-06-08T17:17:52Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2009-06-08T17:17:52Z"}, "message": "re PR middle-end/40102 (Revision 147294 caused ICE: verify_cgraph_node)\n\n\tPR middle-end/40102\n\t* cgraph.c (cgraph_create_edge_including_clones): Also asume that the\n\toriginal node might've been modified.\n\t* tree-inline.c (copy_bb): Do not assume that all clones are the same.\n\n\tPR middle-end/40102\n\t* g++.dg/torture/pr40102.C: New testcase.\n\nFrom-SVN: r148287", "tree": {"sha": "7dfa5d5d22a7a192d98aea40e41add3c292cc255", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7dfa5d5d22a7a192d98aea40e41add3c292cc255"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ce2002b031c923f028fc53cc1ba802483417113", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ce2002b031c923f028fc53cc1ba802483417113", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ce2002b031c923f028fc53cc1ba802483417113", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ce2002b031c923f028fc53cc1ba802483417113/comments", "author": null, "committer": null, "parents": [{"sha": "491e6ad11cf6f4e3d52de07bd9892924f8dd6b51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/491e6ad11cf6f4e3d52de07bd9892924f8dd6b51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/491e6ad11cf6f4e3d52de07bd9892924f8dd6b51"}], "stats": {"total": 67, "additions": 62, "deletions": 5}, "files": [{"sha": "f6bf148c76e2e39e4dedc58fd8f2188da8367806", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ce2002b031c923f028fc53cc1ba802483417113/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ce2002b031c923f028fc53cc1ba802483417113/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6ce2002b031c923f028fc53cc1ba802483417113", "patch": "@@ -1,3 +1,10 @@\n+2009-06-08  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR middle-end/40102\n+\t* cgraph.c (cgraph_create_edge_including_clones): Also asume that the\n+\toriginal node might've been modified.\n+\t* tree-inline.c (copy_bb): Do not assume that all clones are the same.\n+\n 2009-06-08  Jakub Jelinek  <jakub@redhat.com>\n \n \t* tree-object-size.c (addr_object_size): Add OSI argument."}, {"sha": "53475d112fc61e85af536cce7722643102e70e20", "filename": "gcc/cgraph.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ce2002b031c923f028fc53cc1ba802483417113/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ce2002b031c923f028fc53cc1ba802483417113/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=6ce2002b031c923f028fc53cc1ba802483417113", "patch": "@@ -701,8 +701,9 @@ cgraph_create_edge_including_clones (struct cgraph_node *orig, struct cgraph_nod\n {\n   struct cgraph_node *node;\n \n-  cgraph_create_edge (orig, callee, stmt, count, freq, loop_depth)->inline_failed =\n-    reason;\n+  if (!cgraph_edge (orig, stmt))\n+     cgraph_create_edge (orig, callee, stmt,\n+     \t\t\t count, freq, loop_depth)->inline_failed = reason;\n \n   if (orig->clones)\n     for (node = orig->clones; node != orig;)"}, {"sha": "56dc2bc1189650961ac3dedf8796480e5c5a1f52", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ce2002b031c923f028fc53cc1ba802483417113/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ce2002b031c923f028fc53cc1ba802483417113/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6ce2002b031c923f028fc53cc1ba802483417113", "patch": "@@ -1,3 +1,8 @@\n+2009-06-08  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR middle-end/40102\n+\t* g++.dg/torture/pr40102.C: New testcase.\n+\n 2009-06-08  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.dg/builtin-object-size-2.c (test1): Adjust expected results."}, {"sha": "49f56b5bc5a319bce974e947355a6d3704013f21", "filename": "gcc/testsuite/g++.dg/torture/pr40102.C", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ce2002b031c923f028fc53cc1ba802483417113/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr40102.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ce2002b031c923f028fc53cc1ba802483417113/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr40102.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr40102.C?ref=6ce2002b031c923f028fc53cc1ba802483417113", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do compile } */\n+bool foo0(int) { return true; }\n+\n+bool foo1();\n+\n+struct A\n+{\n+  A();\n+  ~A();\n+\n+  template<typename T> void bar1(T f)\n+  {\n+    if (f(0))\n+      foo1();\n+  }\n+\n+  template<typename T> void bar2(T);\n+};\n+\n+template<typename T> void A::bar2(T f)\n+{\n+  A a, b[1], *p;\n+\n+  while (foo1())\n+  {\n+    if (p)\n+      ++p;\n+    if (p && foo1())\n+      bar1(f);\n+    if (p)\n+      ++p;\n+  }\n+\n+  if (foo1())\n+    bar1(f);\n+}\n+\n+void baz()\n+{\n+  A().bar2(foo0);\n+}"}, {"sha": "18c2c0307dec9c50f7a47a75eb23b715de863fd3", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ce2002b031c923f028fc53cc1ba802483417113/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ce2002b031c923f028fc53cc1ba802483417113/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=6ce2002b031c923f028fc53cc1ba802483417113", "patch": "@@ -1508,11 +1508,14 @@ copy_bb (copy_body_data *id, basic_block bb, int frequency_scale,\n \t\tgcc_unreachable ();\n \t\t}\n \n+\t    edge = cgraph_edge (id->src_node, orig_stmt);\n \t    /* Constant propagation on argument done during inlining\n \t       may create new direct call.  Produce an edge for it.  */\n-\t    if (!edge && is_gimple_call (stmt)\n-\t\t&& (fn = gimple_call_fndecl (stmt)) != NULL\n-\t\t&& !cgraph_edge (id->dst_node, stmt))\n+\t    if ((!edge \n+\t\t || (edge->indirect_call\n+\t\t     && id->transform_call_graph_edges == CB_CGE_MOVE_CLONES))\n+\t\t&& is_gimple_call (stmt)\n+\t\t&& (fn = gimple_call_fndecl (stmt)) != NULL)\n \t      {\n \t\tstruct cgraph_node *dest = cgraph_node (fn);\n "}]}