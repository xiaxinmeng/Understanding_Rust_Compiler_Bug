{"sha": "8a8ee37a3325f1009034245676ef4e482c0444a2", "node_id": "C_kwDOANBUbNoAKDhhOGVlMzdhMzMyNWYxMDA5MDM0MjQ1Njc2ZWY0ZTQ4MmMwNDQ0YTI", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2022-06-30T16:41:40Z"}, "committer": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2022-06-30T16:41:40Z"}, "message": "lto: Fix option merging [PR106129]\n\nThe LTO merging of options from different input files was broken by:\n\ncommit 227a2ecf663d69972b851f51f1934d18927b62cd\nAuthor: Martin Liska <mliska@suse.cz>\nDate:   Fri Mar 12 11:53:47 2021 +0100\n\n    lto-wrapper: Use vec<cl_decoded_option> data type.\n\nPreviously, find_and_merge_options would merge options it read into\nthose in *opts. After this commit, options in *opts on entry to\nfind_and_merge_options are ignored; the only merging that takes place\nis between multiple sets of options in the same input file that are\nread in the same call to this function (not sure how that case can\noccur at all). The effects include, for example, that if some objects\nare built with PIC enabled and others with it disabled, and the last\nLTO object processed has PIC enabled, the choice of PIC for the last\nobject will result in the whole program being built as PIC, when the\nmerging logic is intended to ensure that a mixture of PIC and non-PIC\nobjects results in the whole program being built as non-PIC.\n\nFix this with an extra argument to find_and_merge_options to determine\nwhether merging should take place.  This shows up a second issue with\nthat commit (which I think wasn't actually intended to change code\nsemantics at all): once merging is enabled again, the check for\n-Xassembler options became an infinite loop in the case where both\ninputs had -Xassembler options, with the same first option, so fix\nthat loop to restore the previous semantics.\n\nNote that I'm not sure how LTO option merging might be tested in the\ntestsuite (clearly there wasn't sufficient, if any, coverage to detect\nthese bugs).\n\nBootstrapped with no regressions for x86_64-pc-linux-gnu.\n\n\tPR lto/106129\n\t* lto-wrapper.cc (find_option): Add argument start.\n\t(merge_and_complain): Loop over existing_opt_index and\n\texisting_opt2_index for Xassembler check.  Update calls to\n\tfind_option.\n\t(find_and_merge_options): Add argument first to determine whether\n\tto merge options with those passed in *opts.\n\t(run_gcc): Update calls to find_and_merge_options.", "tree": {"sha": "85d1731a2af648eac963a7994201edaad664e4af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/85d1731a2af648eac963a7994201edaad664e4af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a8ee37a3325f1009034245676ef4e482c0444a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a8ee37a3325f1009034245676ef4e482c0444a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a8ee37a3325f1009034245676ef4e482c0444a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a8ee37a3325f1009034245676ef4e482c0444a2/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1fe8ddf6847a14152668064f163a2585e9dc894", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1fe8ddf6847a14152668064f163a2585e9dc894", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1fe8ddf6847a14152668064f163a2585e9dc894"}], "stats": {"total": 39, "additions": 26, "deletions": 13}, "files": [{"sha": "795ab74555c80475323fa6f5d0a510fb18953a7d", "filename": "gcc/lto-wrapper.cc", "status": "modified", "additions": 26, "deletions": 13, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a8ee37a3325f1009034245676ef4e482c0444a2/gcc%2Flto-wrapper.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a8ee37a3325f1009034245676ef4e482c0444a2/gcc%2Flto-wrapper.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-wrapper.cc?ref=8a8ee37a3325f1009034245676ef4e482c0444a2", "patch": "@@ -170,13 +170,14 @@ get_options_from_collect_gcc_options (const char *collect_gcc,\n   return decoded;\n }\n \n-/* Find option in OPTIONS based on OPT_INDEX.  -1 value is returned\n-   if the option is not present.  */\n+/* Find option in OPTIONS based on OPT_INDEX, starting at START.  -1\n+   value is returned if the option is not present.  */\n \n static int\n-find_option (vec<cl_decoded_option> &options, size_t opt_index)\n+find_option (vec<cl_decoded_option> &options, size_t opt_index,\n+\t     unsigned start = 0)\n {\n-  for (unsigned i = 0; i < options.length (); ++i)\n+  for (unsigned i = start; i < options.length (); ++i)\n     if (options[i].opt_index == opt_index)\n       return i;\n \n@@ -575,13 +576,16 @@ merge_and_complain (vec<cl_decoded_option> &decoded_options,\n    else\n      j++;\n \n+  int existing_opt_index, existing_opt2_index;\n   if (!xassembler_options_error)\n-    for (i = j = 0; ; i++, j++)\n+    for (existing_opt_index = existing_opt2_index = 0; ;\n+\t existing_opt_index++, existing_opt2_index++)\n       {\n-\tint existing_opt_index\n-\t  = find_option (decoded_options, OPT_Xassembler);\n-\tint existing_opt2_index\n-\t  = find_option (fdecoded_options, OPT_Xassembler);\n+\texisting_opt_index\n+\t  = find_option (decoded_options, OPT_Xassembler, existing_opt_index);\n+\texisting_opt2_index\n+\t  = find_option (fdecoded_options, OPT_Xassembler,\n+\t\t\t existing_opt2_index);\n \n \tcl_decoded_option *existing_opt = NULL;\n \tcl_decoded_option *existing_opt2 = NULL;\n@@ -1100,7 +1104,7 @@ find_crtoffloadtable (int save_temps, const char *dumppfx)\n \n static bool\n find_and_merge_options (int fd, off_t file_offset, const char *prefix,\n-\t\t\tvec<cl_decoded_option> decoded_cl_options,\n+\t\t\tvec<cl_decoded_option> decoded_cl_options, bool first,\n \t\t\tvec<cl_decoded_option> *opts, const char *collect_gcc)\n {\n   off_t offset, length;\n@@ -1110,6 +1114,9 @@ find_and_merge_options (int fd, off_t file_offset, const char *prefix,\n   int err;\n   vec<cl_decoded_option> fdecoded_options;\n \n+  if (!first)\n+    fdecoded_options = *opts;\n+\n   simple_object_read *sobj;\n   sobj = simple_object_start_read (fd, file_offset, \"__GNU_LTO\",\n \t\t\t\t   &errmsg, &err);\n@@ -1130,7 +1137,6 @@ find_and_merge_options (int fd, off_t file_offset, const char *prefix,\n   data = (char *)xmalloc (length);\n   read (fd, data, length);\n   fopts = data;\n-  bool first = true;\n   do\n     {\n       vec<cl_decoded_option> f2decoded_options\n@@ -1417,8 +1423,10 @@ run_gcc (unsigned argc, char *argv[])\n   int auto_parallel = 0;\n   bool no_partition = false;\n   const char *jobserver_error = NULL;\n+  bool fdecoded_options_first = true;\n   vec<cl_decoded_option> fdecoded_options;\n   fdecoded_options.create (16);\n+  bool offload_fdecoded_options_first = true;\n   vec<cl_decoded_option> offload_fdecoded_options = vNULL;\n   struct obstack argv_obstack;\n   int new_head_argc;\n@@ -1510,11 +1518,13 @@ run_gcc (unsigned argc, char *argv[])\n \t}\n \n       if (find_and_merge_options (fd, file_offset, LTO_SECTION_NAME_PREFIX,\n-\t\t\t\t  decoded_options, &fdecoded_options,\n+\t\t\t\t  decoded_options, fdecoded_options_first,\n+\t\t\t\t  &fdecoded_options,\n \t\t\t\t  collect_gcc))\n \t{\n \t  have_lto = true;\n \t  ltoobj_argv[ltoobj_argc++] = argv[i];\n+\t  fdecoded_options_first = false;\n \t}\n       close (fd);\n     }\n@@ -1773,9 +1783,12 @@ run_gcc (unsigned argc, char *argv[])\n \t    fatal_error (input_location, \"cannot open %s: %m\", filename);\n \t  if (!find_and_merge_options (fd, file_offset,\n \t\t\t\t       OFFLOAD_SECTION_NAME_PREFIX,\n-\t\t\t\t       decoded_options, &offload_fdecoded_options,\n+\t\t\t\t       decoded_options,\n+\t\t\t\t       offload_fdecoded_options_first,\n+\t\t\t\t       &offload_fdecoded_options,\n \t\t\t\t       collect_gcc))\n \t    fatal_error (input_location, \"cannot read %s: %m\", filename);\n+\t  offload_fdecoded_options_first = false;\n \t  close (fd);\n \t  if (filename != offload_argv[i])\n \t    XDELETEVEC (filename);"}]}