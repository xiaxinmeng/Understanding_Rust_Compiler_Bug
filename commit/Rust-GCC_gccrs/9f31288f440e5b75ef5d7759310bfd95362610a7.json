{"sha": "9f31288f440e5b75ef5d7759310bfd95362610a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWYzMTI4OGY0NDBlNWI3NWVmNWQ3NzU5MzEwYmZkOTUzNjI2MTBhNw==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2014-09-21T18:01:59Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2014-09-21T18:01:59Z"}, "message": "rs6000.md (strlensi): Don't use subsi3 with a constant, use addsi3 directly.\n\n2014-09-21  Segher Boessenkool  <segher@kernel.crashing.org>\n\n\t* config/rs6000/rs6000.md (strlensi): Don't use subsi3 with a\n\tconstant, use addsi3 directly.\n\t(three anonymous define_insn, two define_split): Delete.\n\t(sub<mode>3): Move.  Do not allow constant second operand.\n\tGenerate different insn for constant first operand.\n\t(*subf<mode>3, *subf<mode>3_dot, *subf<mode>3_dot2): New.\n\t(subf<mode>3_imm): New.\n\t(ctz<mode>2, ffs<mode>2): Clobber CA_REGNO where required.\n\t(*plus_ltu<mode>): Only handle registers.\n\t(*plus_ltu<mode>_1): New.  Handle integer third operand.\n\t(*plus_gtu<mode>): Only handle registers.\n\t(*plus_gtu<mode>_1): New.  Handle integer third operand.\n\nFrom-SVN: r215434", "tree": {"sha": "d612891d64412ce8d718e903fc294c62cccd5b3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d612891d64412ce8d718e903fc294c62cccd5b3a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f31288f440e5b75ef5d7759310bfd95362610a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f31288f440e5b75ef5d7759310bfd95362610a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f31288f440e5b75ef5d7759310bfd95362610a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f31288f440e5b75ef5d7759310bfd95362610a7/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b4e2da9e22fc9eb0a585951fe6a02d4b1ad0f4fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4e2da9e22fc9eb0a585951fe6a02d4b1ad0f4fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4e2da9e22fc9eb0a585951fe6a02d4b1ad0f4fe"}], "stats": {"total": 183, "additions": 108, "deletions": 75}, "files": [{"sha": "08e66b7ee5ff013efbca785c60874a76a32cb957", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f31288f440e5b75ef5d7759310bfd95362610a7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f31288f440e5b75ef5d7759310bfd95362610a7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9f31288f440e5b75ef5d7759310bfd95362610a7", "patch": "@@ -1,3 +1,18 @@\n+2014-09-21  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* config/rs6000/rs6000.md (strlensi): Don't use subsi3 with a\n+\tconstant, use addsi3 directly.\n+\t(three anonymous define_insn, two define_split): Delete.\n+\t(sub<mode>3): Move.  Do not allow constant second operand.\n+\tGenerate different insn for constant first operand.\n+\t(*subf<mode>3, *subf<mode>3_dot, *subf<mode>3_dot2): New.\n+\t(subf<mode>3_imm): New.\n+\t(ctz<mode>2, ffs<mode>2): Clobber CA_REGNO where required.\n+\t(*plus_ltu<mode>): Only handle registers.\n+\t(*plus_ltu<mode>_1): New.  Handle integer third operand.\n+\t(*plus_gtu<mode>): Only handle registers.\n+\t(*plus_gtu<mode>_1): New.  Handle integer third operand.\n+\n 2014-09-21  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* config/rs6000/rs6000.md (iorxor): New code_iterator."}, {"sha": "dfebf5ab87c16f1ce23c8635132a5f604b0a6a4b", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 93, "deletions": 75, "changes": 168, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f31288f440e5b75ef5d7759310bfd95362610a7/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f31288f440e5b75ef5d7759310bfd95362610a7/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=9f31288f440e5b75ef5d7759310bfd95362610a7", "patch": "@@ -1427,7 +1427,7 @@\n   emit_label (end_label);\n   emit_insn (gen_addsi3 (scratch_string, scratch_string, scratch_dlmzb));\n   emit_insn (gen_subsi3 (result, scratch_string, addr));\n-  emit_insn (gen_subsi3 (result, result, const1_rtx));\n+  emit_insn (gen_addsi3 (result, result, constm1_rtx));\n   DONE;\n })\n \f\n@@ -1644,92 +1644,82 @@\n    (set_attr \"length\" \"4,8\")])\n \n \n-(define_insn \"\"\n-  [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"=r,r\")\n-\t(minus:GPR (match_operand:GPR 1 \"reg_or_short_operand\" \"r,I\")\n-\t\t   (match_operand:GPR 2 \"gpc_reg_operand\" \"r,r\")))]\n+(define_expand \"sub<mode>3\"\n+  [(set (match_operand:SDI 0 \"gpc_reg_operand\" \"\")\n+\t(minus:SDI (match_operand:SDI 1 \"reg_or_short_operand\" \"\")\n+\t\t   (match_operand:SDI 2 \"gpc_reg_operand\" \"\")))]\n   \"\"\n-  \"@\n-   subf %0,%2,%1\n-   subfic %0,%2,%1\"\n+{\n+  if (short_cint_operand (operands[1], <MODE>mode)\n+      && !(<MODE>mode == DImode && !TARGET_POWERPC64))\n+    {\n+      emit_insn (gen_subf<mode>3_imm (operands[0], operands[2], operands[1]));\n+      DONE;\n+    }\n+})\n+\n+(define_insn \"*subf<mode>3\"\n+  [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"=r\")\n+\t(minus:GPR (match_operand:GPR 2 \"gpc_reg_operand\" \"r\")\n+\t\t   (match_operand:GPR 1 \"gpc_reg_operand\" \"r\")))]\n+  \"\"\n+  \"subf %0,%1,%2\"\n   [(set_attr \"type\" \"add\")])\n \n-(define_insn \"\"\n-  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC (minus:P (match_operand:P 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t     (match_operand:P 2 \"gpc_reg_operand\" \"r,r\"))\n+(define_insn_and_split \"*subf<mode>3_dot\"\n+  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,?y\")\n+\t(compare:CC (minus:GPR (match_operand:GPR 2 \"gpc_reg_operand\" \"r,r\")\n+\t\t\t       (match_operand:GPR 1 \"gpc_reg_operand\" \"r,r\"))\n \t\t    (const_int 0)))\n-   (clobber (match_scratch:P 3 \"=r,r\"))]\n-  \"\"\n+   (clobber (match_scratch:GPR 0 \"=r,r\"))]\n+  \"<MODE>mode == Pmode\"\n   \"@\n-   subf. %3,%2,%1\n+   subf. %0,%1,%2\n    #\"\n+  \"&& reload_completed && cc_reg_not_cr0_operand (operands[3], CCmode)\"\n+  [(set (match_dup 0)\n+\t(minus:GPR (match_dup 2)\n+\t\t   (match_dup 1)))\n+   (set (match_dup 3)\n+\t(compare:CC (match_dup 0)\n+\t\t    (const_int 0)))]\n+  \"\"\n   [(set_attr \"type\" \"add\")\n    (set_attr \"dot\" \"yes\")\n    (set_attr \"length\" \"4,8\")])\n \n-(define_split\n-  [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n-\t(compare:CC (minus:P (match_operand:P 1 \"gpc_reg_operand\" \"\")\n-\t\t\t     (match_operand:P 2 \"gpc_reg_operand\" \"\"))\n-\t\t    (const_int 0)))\n-   (clobber (match_scratch:P 3 \"\"))]\n-  \"reload_completed\"\n-  [(set (match_dup 3)\n-\t(minus:P (match_dup 1)\n-\t\t  (match_dup 2)))\n-   (set (match_dup 0)\n-\t(compare:CC (match_dup 3)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n-(define_insn \"\"\n+(define_insn_and_split \"*subf<mode>3_dot2\"\n   [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC (minus:P (match_operand:P 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t     (match_operand:P 2 \"gpc_reg_operand\" \"r,r\"))\n+\t(compare:CC (minus:GPR (match_operand:GPR 2 \"gpc_reg_operand\" \"r,r\")\n+\t\t\t       (match_operand:GPR 1 \"gpc_reg_operand\" \"r,r\"))\n \t\t    (const_int 0)))\n-   (set (match_operand:P 0 \"gpc_reg_operand\" \"=r,r\")\n-\t(minus:P (match_dup 1)\n-\t\t  (match_dup 2)))]\n-  \"\"\n+   (set (match_operand:GPR 0 \"gpc_reg_operand\" \"=r,r\")\n+\t(minus:GPR (match_dup 2)\n+\t\t   (match_dup 1)))]\n+  \"<MODE>mode == Pmode\"\n   \"@\n-   subf. %0,%2,%1\n+   subf. %0,%1,%2\n    #\"\n-  [(set_attr \"type\" \"add\")\n-   (set_attr \"dot\" \"yes\")\n-   (set_attr \"length\" \"4,8\")])\n-\n-(define_split\n-  [(set (match_operand:CC 3 \"cc_reg_not_cr0_operand\" \"\")\n-\t(compare:CC (minus:P (match_operand:P 1 \"gpc_reg_operand\" \"\")\n-\t\t\t     (match_operand:P 2 \"gpc_reg_operand\" \"\"))\n-\t\t    (const_int 0)))\n-   (set (match_operand:P 0 \"gpc_reg_operand\" \"\")\n-\t(minus:P (match_dup 1)\n-\t\t  (match_dup 2)))]\n-  \"reload_completed\"\n+  \"&& reload_completed && cc_reg_not_cr0_operand (operands[3], CCmode)\"\n   [(set (match_dup 0)\n-\t(minus:P (match_dup 1)\n-\t\t  (match_dup 2)))\n+\t(minus:GPR (match_dup 2)\n+\t\t   (match_dup 1)))\n    (set (match_dup 3)\n \t(compare:CC (match_dup 0)\n \t\t    (const_int 0)))]\n-  \"\")\n+  \"\"\n+  [(set_attr \"type\" \"add\")\n+   (set_attr \"dot\" \"yes\")\n+   (set_attr \"length\" \"4,8\")])\n \n-(define_expand \"sub<mode>3\"\n-  [(set (match_operand:SDI 0 \"gpc_reg_operand\" \"\")\n-\t(minus:SDI (match_operand:SDI 1 \"reg_or_short_operand\" \"\")\n-\t\t   (match_operand:SDI 2 \"reg_or_sub_cint_operand\" \"\")))]\n+(define_insn \"subf<mode>3_imm\"\n+  [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"=r\")\n+\t(minus:GPR (match_operand:GPR 2 \"short_cint_operand\" \"I\")\n+\t\t   (match_operand:GPR 1 \"gpc_reg_operand\" \"r\")))\n+   (clobber (reg:GPR CA_REGNO))]\n   \"\"\n-  \"\n-{\n-  if (GET_CODE (operands[2]) == CONST_INT)\n-    {\n-      emit_insn (gen_add<mode>3 (operands[0], operands[1],\n-\t\t\t\t negate_rtx (<MODE>mode, operands[2])));\n-      DONE;\n-    }\n-}\")\n+  \"subfic %0,%1,%2\"\n+  [(set_attr \"type\" \"add\")])\n \n \n (define_expand \"neg<mode>2\"\n@@ -1802,9 +1792,10 @@\n \t\t (match_dup 2)))\n    (set (match_dup 4)\n \t(clz:GPR (match_dup 3)))\n-   (set (match_operand:GPR 0 \"gpc_reg_operand\" \"\")\n-\t(minus:GPR (match_dup 5)\n-\t\t   (match_dup 4)))]\n+   (parallel [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"\")\n+\t\t   (minus:GPR (match_dup 5)\n+\t\t\t      (match_dup 4)))\n+\t      (clobber (reg:GPR CA_REGNO))])]\n   \"\"\n   {\n      operands[2] = gen_reg_rtx (<MODE>mode);\n@@ -1821,9 +1812,10 @@\n \t\t (match_dup 2)))\n    (set (match_dup 4)\n \t(clz:GPR (match_dup 3)))\n-   (set (match_operand:GPR 0 \"gpc_reg_operand\" \"\")\n-\t(minus:GPR (match_dup 5)\n-\t\t   (match_dup 4)))]\n+   (parallel [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"\")\n+\t\t   (minus:GPR (match_dup 5)\n+\t\t\t      (match_dup 4)))\n+\t      (clobber (reg:GPR CA_REGNO))])]\n   \"\"\n   {\n      operands[2] = gen_reg_rtx (<MODE>mode);\n@@ -12582,14 +12574,27 @@\n   [(set (match_operand:P 0 \"gpc_reg_operand\" \"=&r,r\")\n \t(plus:P (ltu:P (match_operand:P 1 \"gpc_reg_operand\" \"r,r\")\n \t\t       (match_operand:P 2 \"reg_or_neg_short_operand\" \"r,P\"))\n-\t\t(match_operand:P 3 \"reg_or_short_operand\" \"rI,rI\")))]\n+\t\t(match_operand:P 3 \"gpc_reg_operand\" \"r,r\")))]\n   \"\"\n   \"#\"\n   \"&& !reg_overlap_mentioned_p (operands[0], operands[3])\"\n   [(set (match_dup 0) (neg:P (ltu:P (match_dup 1) (match_dup 2))))\n    (set (match_dup 0) (minus:P (match_dup 3) (match_dup 0)))]\n   \"\")\n \n+(define_insn_and_split \"*plus_ltu<mode>_1\"\n+  [(set (match_operand:P 0 \"gpc_reg_operand\" \"=&r,r\")\n+\t(plus:P (ltu:P (match_operand:P 1 \"gpc_reg_operand\" \"r,r\")\n+\t\t       (match_operand:P 2 \"reg_or_neg_short_operand\" \"r,P\"))\n+\t\t(match_operand:P 3 \"short_cint_operand\" \"I,I\")))]\n+  \"\"\n+  \"#\"\n+  \"&& !reg_overlap_mentioned_p (operands[0], operands[3])\"\n+  [(set (match_dup 0) (neg:P (ltu:P (match_dup 1) (match_dup 2))))\n+   (parallel [(set (match_dup 0) (minus:P (match_dup 3) (match_dup 0)))\n+\t      (clobber (reg:P CA_REGNO))])]\n+  \"\")\n+\n (define_insn_and_split \"*plus_ltu<mode>_compare\"\n   [(set (match_operand:CC 4 \"cc_reg_operand\" \"=x,x,?y,?y\")\n \t(compare:CC\n@@ -13014,14 +13019,27 @@\n   [(set (match_operand:P 0 \"gpc_reg_operand\" \"=&r\")\n         (plus:P (gtu:P (match_operand:P 1 \"gpc_reg_operand\" \"r\")\n \t\t       (match_operand:P 2 \"reg_or_short_operand\" \"rI\"))\n-\t\t(match_operand:P 3 \"reg_or_short_operand\" \"rI\")))]\n+\t\t(match_operand:P 3 \"gpc_reg_operand\" \"r\")))]\n   \"\"\n   \"#\"\n   \"&& !reg_overlap_mentioned_p (operands[0], operands[3])\"\n   [(set (match_dup 0) (neg:P (gtu:P (match_dup 1) (match_dup 2))))\n    (set (match_dup 0) (minus:P (match_dup 3) (match_dup 0)))]\n   \"\")\n \n+(define_insn_and_split \"*plus_gtu<mode>_1\"\n+  [(set (match_operand:P 0 \"gpc_reg_operand\" \"=&r\")\n+        (plus:P (gtu:P (match_operand:P 1 \"gpc_reg_operand\" \"r\")\n+\t\t       (match_operand:P 2 \"reg_or_short_operand\" \"rI\"))\n+\t\t(match_operand:P 3 \"short_cint_operand\" \"I\")))]\n+  \"\"\n+  \"#\"\n+  \"&& !reg_overlap_mentioned_p (operands[0], operands[3])\"\n+  [(set (match_dup 0) (neg:P (gtu:P (match_dup 1) (match_dup 2))))\n+   (parallel [(set (match_dup 0) (minus:P (match_dup 3) (match_dup 0)))\n+\t      (clobber (reg:P CA_REGNO))])]\n+  \"\")\n+\n (define_insn_and_split \"*plus_gtu<mode>_compare\"\n   [(set (match_operand:CC 4 \"cc_reg_operand\" \"=x,x,?y,?y\")\n \t(compare:CC"}]}