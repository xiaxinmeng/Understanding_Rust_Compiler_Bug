{"sha": "8150f05c20bd3a41b337f37ce3badecf36abb259", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODE1MGYwNWMyMGJkM2E0MWIzMzdmMzdjZTNiYWRlY2YzNmFiYjI1OQ==", "commit": {"author": {"name": "Jie Zhang", "email": "jie@codesourcery.com", "date": "2010-10-25T09:37:19Z"}, "committer": {"name": "Jie Zhang", "email": "jiez@gcc.gnu.org", "date": "2010-10-25T09:37:19Z"}, "message": "combine.c (try_combine): If insns need to be kept around...\n\n\t* combine.c (try_combine): If insns need to be kept around,\n\tcheck that they can be copied in the merged instruction.\n\n\ttestsuite/\n\tg++.dg/opt/combine.c: New test.\n\nFrom-SVN: r165911", "tree": {"sha": "404145dc1174835483c3d92b3ac2df597b7b970a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/404145dc1174835483c3d92b3ac2df597b7b970a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8150f05c20bd3a41b337f37ce3badecf36abb259", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8150f05c20bd3a41b337f37ce3badecf36abb259", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8150f05c20bd3a41b337f37ce3badecf36abb259", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8150f05c20bd3a41b337f37ce3badecf36abb259/comments", "author": null, "committer": null, "parents": [{"sha": "0ebd05fea230df81b2903f713ba1bd2ae6e99000", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ebd05fea230df81b2903f713ba1bd2ae6e99000", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ebd05fea230df81b2903f713ba1bd2ae6e99000"}], "stats": {"total": 93, "additions": 93, "deletions": 0}, "files": [{"sha": "f51500c499129bf64909f96829f6e7fa6aa4fade", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8150f05c20bd3a41b337f37ce3badecf36abb259/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8150f05c20bd3a41b337f37ce3badecf36abb259/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8150f05c20bd3a41b337f37ce3badecf36abb259", "patch": "@@ -1,3 +1,8 @@\n+2010-10-25  Jie Zhang  <jie@codesourcery.com>\n+\n+\t* combine.c (try_combine): If insns need to be kept around,\n+\tcheck that they can be copied in the merged instruction.\n+\n 2010-10-24  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* reg-stack.c (convert_regs_1): Return boolean value, true if the CFG"}, {"sha": "5ec7ee3afce4b697f9c2cf130b91b070a4e0f673", "filename": "gcc/combine.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8150f05c20bd3a41b337f37ce3badecf36abb259/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8150f05c20bd3a41b337f37ce3badecf36abb259/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=8150f05c20bd3a41b337f37ce3badecf36abb259", "patch": "@@ -2917,6 +2917,18 @@ try_combine (rtx i3, rtx i2, rtx i1, rtx i0, int *new_direct_jump_p)\n   else\n     added_sets_0 = 0;\n \n+  /* We are about to copy insns for the case where they need to be kept\n+     around.  Check that they can be copied in the merged instruction.  */\n+\n+  if (targetm.cannot_copy_insn_p\n+      && ((added_sets_2 && targetm.cannot_copy_insn_p (i2))\n+\t  || (i1 && added_sets_1 && targetm.cannot_copy_insn_p (i1))\n+\t  || (i0 && added_sets_0 && targetm.cannot_copy_insn_p (i0))))\n+    {\n+      undo_all ();\n+      return 0;\n+    }\n+\n   /* If the set in I2 needs to be kept around, we must make a copy of\n      PATTERN (I2), so that when we substitute I1SRC for I1DEST in\n      PATTERN (I2), we are only substituting for the original I1DEST, not into"}, {"sha": "76bd610acdd2de8f48c0535526cd264d6129a1f5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8150f05c20bd3a41b337f37ce3badecf36abb259/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8150f05c20bd3a41b337f37ce3badecf36abb259/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8150f05c20bd3a41b337f37ce3badecf36abb259", "patch": "@@ -1,3 +1,7 @@\n+2010-10-25  Jie Zhang  <jie@codesourcery.com>\n+\n+\tg++.dg/opt/combine.c: New test.\n+\n 2010-10-24  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/opt7.ad[sb]: New test."}, {"sha": "a9a4bb70010bc0902c42434b17c234c56b9d6a18", "filename": "gcc/testsuite/g++.dg/opt/combine.C", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8150f05c20bd3a41b337f37ce3badecf36abb259/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fcombine.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8150f05c20bd3a41b337f37ce3badecf36abb259/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fcombine.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fcombine.C?ref=8150f05c20bd3a41b337f37ce3badecf36abb259", "patch": "@@ -0,0 +1,72 @@\n+// { dg-do assemble { target fpic } }\n+// { dg-options \"-O2 -fweb -fPIC -fvisibility=hidden\" }\n+\n+class QBasicAtomicInt\n+{\n+public:\n+  volatile int _q_value;\n+  inline operator int () const {return _q_value;}\n+};\n+class QVariant;\n+class QScriptContext;\n+class QScriptEngine;\n+class QScriptValue\n+{\n+public:\n+  QVariant toVariant () const;\n+};\n+class QScriptDebuggerBackendPrivate\n+{\n+  static QScriptValue trace (QScriptContext *context);\n+};\n+template <typename T> struct QMetaTypeId { };\n+template <typename T> struct QMetaTypeId2\n+{\n+  static inline int qt_metatype_id ()\n+  {\n+    return QMetaTypeId<T>::qt_metatype_id () ;\n+  }\n+};\n+template <typename T> inline int qMetaTypeId (T * = 0)\n+{\n+  return QMetaTypeId2<T>::qt_metatype_id () ;\n+}\n+class QVariant { };\n+template<typename T> inline T qvariant_cast (const QVariant &v)\n+{\n+  const int vid = qMetaTypeId<T> ((0)) ;\n+};\n+class QScriptContext\n+{\n+public: \n+  QScriptValue callee () const;\n+};\n+class QScriptEngine  \n+{\n+public:\n+  static bool convertV2 (const QScriptValue &value , int type , void *ptr) ;\n+};\n+inline bool qscriptvalue_cast_helper (const QScriptValue &value , int type , void *ptr)\n+{\n+  return QScriptEngine::convertV2 (value, type, ptr) ;\n+}\n+template<typename T> T qscriptvalue_cast (const QScriptValue &value)\n+{\n+  T t;\n+  const int id = qMetaTypeId<T> () ;\n+  if ( qscriptvalue_cast_helper (value, id, &t))\n+    return qvariant_cast<T> (value.toVariant ()) ;\n+}\n+template <> struct QMetaTypeId< QScriptDebuggerBackendPrivate* >\n+{\n+  static int qt_metatype_id ()\n+  {\n+    static QBasicAtomicInt metatype_id = { (0) };\n+    return metatype_id;\n+  }\n+};\n+QScriptValue QScriptDebuggerBackendPrivate::trace (QScriptContext *context)\n+{\n+  QScriptValue data = context->callee () ;\n+  QScriptDebuggerBackendPrivate *self = qscriptvalue_cast<QScriptDebuggerBackendPrivate*> (data) ;\n+}"}]}