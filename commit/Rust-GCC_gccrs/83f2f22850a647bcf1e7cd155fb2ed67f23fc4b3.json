{"sha": "83f2f22850a647bcf1e7cd155fb2ed67f23fc4b3", "node_id": "C_kwDOANBUbNoAKDgzZjJmMjI4NTBhNjQ3YmNmMWU3Y2QxNTVmYjJlZDY3ZjIzZmM0YjM", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-09-04T00:16:49Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-09-04T00:16:49Z"}, "message": "Daily bump.", "tree": {"sha": "eec91b7b7c74a88e23e4b590dfb40a767d0d6f46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eec91b7b7c74a88e23e4b590dfb40a767d0d6f46"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/83f2f22850a647bcf1e7cd155fb2ed67f23fc4b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83f2f22850a647bcf1e7cd155fb2ed67f23fc4b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83f2f22850a647bcf1e7cd155fb2ed67f23fc4b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83f2f22850a647bcf1e7cd155fb2ed67f23fc4b3/comments", "author": null, "committer": null, "parents": [{"sha": "504424f33771be0405454e7845219d5df1bb88bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/504424f33771be0405454e7845219d5df1bb88bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/504424f33771be0405454e7845219d5df1bb88bb"}], "stats": {"total": 174, "additions": 173, "deletions": 1}, "files": [{"sha": "4213860a856b75c2f11cca84646f511a2742a0de", "filename": "gcc/ChangeLog", "status": "modified", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83f2f22850a647bcf1e7cd155fb2ed67f23fc4b3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83f2f22850a647bcf1e7cd155fb2ed67f23fc4b3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=83f2f22850a647bcf1e7cd155fb2ed67f23fc4b3", "patch": "@@ -1,3 +1,73 @@\n+2022-09-03  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* value-range.cc (frange::singleton_p): Move NAN check to the top.\n+\n+2022-09-03  Jan-Benedict Glaw  <jbglaw@lug-owl.de>\n+\n+\t* config/nvptx/nvptx.h (ASM_OUTPUT_DEF): Reference macro arguments.\n+\n+2022-09-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* tree-core.h (enum omp_clause_code): Add OMP_CLAUSE_DOACROSS.\n+\t(enum omp_clause_depend_kind): Remove OMP_CLAUSE_DEPEND_SOURCE\n+\tand OMP_CLAUSE_DEPEND_SINK, add OMP_CLAUSE_DEPEND_INVALID.\n+\t(enum omp_clause_doacross_kind): New type.\n+\t(struct tree_omp_clause): Add subcode.doacross_kind member.\n+\t* tree.h (OMP_CLAUSE_DEPEND_SINK_NEGATIVE): Remove.\n+\t(OMP_CLAUSE_DOACROSS_KIND): Define.\n+\t(OMP_CLAUSE_DOACROSS_SINK_NEGATIVE): Define.\n+\t(OMP_CLAUSE_DOACROSS_DEPEND): Define.\n+\t(OMP_CLAUSE_ORDERED_DOACROSS): Define.\n+\t* tree.cc (omp_clause_num_ops, omp_clause_code_name): Add\n+\tOMP_CLAUSE_DOACROSS entries.\n+\t* tree-nested.cc (convert_nonlocal_omp_clauses,\n+\tconvert_local_omp_clauses): Handle OMP_CLAUSE_DOACROSS.\n+\t* tree-pretty-print.cc (dump_omp_clause): Don't handle\n+\tOMP_CLAUSE_DEPEND_SOURCE and OMP_CLAUSE_DEPEND_SINK.  Handle\n+\tOMP_CLAUSE_DOACROSS.\n+\t* gimplify.cc (gimplify_omp_depend): Don't handle\n+\tOMP_CLAUSE_DEPEND_SOURCE and OMP_CLAUSE_DEPEND_SINK.\n+\t(gimplify_scan_omp_clauses): Likewise.  Handle OMP_CLAUSE_DOACROSS.\n+\t(gimplify_adjust_omp_clauses): Handle OMP_CLAUSE_DOACROSS.\n+\t(find_standalone_omp_ordered): New function.\n+\t(gimplify_omp_for): When OMP_CLAUSE_ORDERED is present, search\n+\tbody for OMP_ORDERED with OMP_CLAUSE_DOACROSS and if found,\n+\tset OMP_CLAUSE_ORDERED_DOACROSS.\n+\t(gimplify_omp_ordered): Don't handle OMP_CLAUSE_DEPEND_SINK or\n+\tOMP_CLAUSE_DEPEND_SOURCE, instead check OMP_CLAUSE_DOACROSS, adjust\n+\tdiagnostics that presence or absence of ordered clause parameter\n+\tis irrelevant.  Handle doacross(sink:omp_cur_iteration-1).  Use\n+\tactual user name of the clause - doacross or depend - in diagnostics.\n+\t* omp-general.cc (omp_extract_for_data): Don't set fd->ordered\n+\tif !OMP_CLAUSE_ORDERED_DOACROSS (t).  If\n+\tOMP_CLAUSE_ORDERED_DOACROSS (t) but !OMP_CLAUSE_ORDERED_EXPR (t),\n+\tset fd->ordered to -1 and set it after the loop in that case to\n+\tfd->collapse.\n+\t* omp-low.cc (check_omp_nesting_restrictions): Don't handle\n+\tOMP_CLAUSE_DEPEND_SOURCE nor OMP_CLAUSE_DEPEND_SINK, instead check\n+\tOMP_CLAUSE_DOACROSS.  Use actual user name of the clause - doacross\n+\tor depend - in diagnostics.  Diagnose mixing of stand-alone and\n+\tblock associated ordered constructs binding to the same loop.\n+\t(lower_omp_ordered_clauses): Don't handle OMP_CLAUSE_DEPEND_SINK,\n+\tinstead handle OMP_CLAUSE_DOACROSS.\n+\t(lower_omp_ordered): Look for OMP_CLAUSE_DOACROSS instead of\n+\tOMP_CLAUSE_DEPEND.\n+\t(lower_depend_clauses): Don't handle OMP_CLAUSE_DEPEND_SOURCE and\n+\tOMP_CLAUSE_DEPEND_SINK.\n+\t* omp-expand.cc (expand_omp_ordered_sink): Emit a sorry for\n+\tdoacross(sink:omp_cur_iteration-1).\n+\t(expand_omp_ordered_source_sink): Use\n+\tOMP_CLAUSE_DOACROSS_SINK_NEGATIVE instead of\n+\tOMP_CLAUSE_DEPEND_SINK_NEGATIVE.  Use actual user name of the clause\n+\t- doacross or depend - in diagnostics.\n+\t(expand_omp): Look for OMP_CLAUSE_DOACROSS clause instead of\n+\tOMP_CLAUSE_DEPEND.\n+\t(build_omp_regions_1): Likewise.\n+\t(omp_make_gimple_edges): Likewise.\n+\t* lto-streamer-out.cc (hash_tree): Handle OMP_CLAUSE_DOACROSS.\n+\t* tree-streamer-in.cc (unpack_ts_omp_clause_value_fields): Likewise.\n+\t* tree-streamer-out.cc (pack_ts_omp_clause_value_fields): Likewise.\n+\n 2022-09-02  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c/90885"}, {"sha": "999da9a9e8dbb0e89c2368405a6d82ca223d93ed", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83f2f22850a647bcf1e7cd155fb2ed67f23fc4b3/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83f2f22850a647bcf1e7cd155fb2ed67f23fc4b3/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=83f2f22850a647bcf1e7cd155fb2ed67f23fc4b3", "patch": "@@ -1 +1 @@\n-20220903\n+20220904"}, {"sha": "3fcf73ba2c485e1ea0d42d7d24cdd02bbb5568bc", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83f2f22850a647bcf1e7cd155fb2ed67f23fc4b3/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83f2f22850a647bcf1e7cd155fb2ed67f23fc4b3/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=83f2f22850a647bcf1e7cd155fb2ed67f23fc4b3", "patch": "@@ -1,3 +1,10 @@\n+2022-09-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-pragma.h (enum pragma_omp_clause): Add PRAGMA_OMP_CLAUSE_DOACROSS.\n+\t* c-omp.cc (c_finish_omp_depobj): Check also for OMP_CLAUSE_DOACROSS\n+\tclause and diagnose it.  Don't handle OMP_CLAUSE_DEPEND_SOURCE and\n+\tOMP_CLAUSE_DEPEND_SINK.  Assert kind is not OMP_CLAUSE_DEPEND_INVALID.\n+\n 2022-09-02  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c/90885"}, {"sha": "a97faa68a777be8a05a2408c7d87ee87d4b37e11", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83f2f22850a647bcf1e7cd155fb2ed67f23fc4b3/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83f2f22850a647bcf1e7cd155fb2ed67f23fc4b3/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=83f2f22850a647bcf1e7cd155fb2ed67f23fc4b3", "patch": "@@ -1,3 +1,30 @@\n+2022-09-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-parser.cc (c_parser_omp_clause_name): Handle doacross.\n+\t(c_parser_omp_clause_depend_sink): Renamed to ...\n+\t(c_parser_omp_clause_doacross_sink): ... this.  Add depend_p argument.\n+\tHandle parsing of doacross(sink:omp_cur_iteration-1).  Use\n+\tOMP_CLAUSE_DOACROSS_SINK_NEGATIVE instead of\n+\tOMP_CLAUSE_DEPEND_SINK_NEGATIVE, build OMP_CLAUSE_DOACROSS instead\n+\tof OMP_CLAUSE_DEPEND and set OMP_CLAUSE_DOACROSS_DEPEND flag on it.\n+\t(c_parser_omp_clause_depend): Use OMP_CLAUSE_DOACROSS_SINK and\n+\tOMP_CLAUSE_DOACROSS_SOURCE instead of OMP_CLAUSE_DEPEND_SINK and\n+\tOMP_CLAUSE_DEPEND_SOURCE, build OMP_CLAUSE_DOACROSS for depend(source)\n+\tand set OMP_CLAUSE_DOACROSS_DEPEND on it.\n+\t(c_parser_omp_clause_doacross): New function.\n+\t(c_parser_omp_all_clauses): Handle PRAGMA_OMP_CLAUSE_DOACROSS.\n+\t(c_parser_omp_depobj): Use OMP_CLAUSE_DEPEND_INVALID instead of\n+\tOMP_CLAUSE_DEPEND_SOURCE.\n+\t(c_parser_omp_for_loop): Don't diagnose here linear clause together\n+\twith ordered with argument.\n+\t(c_parser_omp_simd): Don't diagnose ordered clause with argument on\n+\tfor simd.\n+\t(OMP_ORDERED_DEPEND_CLAUSE_MASK): Add PRAGMA_OMP_CLAUSE_DOACROSS.\n+\t(c_parser_omp_ordered): Handle also doacross and adjust for it\n+\tdiagnostic wording.\n+\t* c-typeck.cc (c_finish_omp_clauses): Handle OMP_CLAUSE_DOACROSS.\n+\tDon't handle OMP_CLAUSE_DEPEND_SOURCE and OMP_CLAUSE_DEPEND_SINK.\n+\n 2022-09-02  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c/90885"}, {"sha": "a11675ee50f76ca64c2235050a4ca1eb009eadc5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83f2f22850a647bcf1e7cd155fb2ed67f23fc4b3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83f2f22850a647bcf1e7cd155fb2ed67f23fc4b3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=83f2f22850a647bcf1e7cd155fb2ed67f23fc4b3", "patch": "@@ -1,3 +1,38 @@\n+2022-09-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* parser.cc (cp_parser_omp_clause_name): Handle doacross.\n+\t(cp_parser_omp_clause_depend_sink): Renamed to ...\n+\t(cp_parser_omp_clause_doacross_sink): ... this.  Add depend_p\n+\targument.  Handle parsing of doacross(sink:omp_cur_iteration-1).  Use\n+\tOMP_CLAUSE_DOACROSS_SINK_NEGATIVE instead of\n+\tOMP_CLAUSE_DEPEND_SINK_NEGATIVE, build OMP_CLAUSE_DOACROSS instead\n+\tof OMP_CLAUSE_DEPEND and set OMP_CLAUSE_DOACROSS_DEPEND flag on it.\n+\t(cp_parser_omp_clause_depend): Use OMP_CLAUSE_DOACROSS_SINK and\n+\tOMP_CLAUSE_DOACROSS_SOURCE instead of OMP_CLAUSE_DEPEND_SINK and\n+\tOMP_CLAUSE_DEPEND_SOURCE, build OMP_CLAUSE_DOACROSS for depend(source)\n+\tand set OMP_CLAUSE_DOACROSS_DEPEND on it.\n+\t(cp_parser_omp_clause_doacross): New function.\n+\t(cp_parser_omp_all_clauses): Handle PRAGMA_OMP_CLAUSE_DOACROSS.\n+\t(cp_parser_omp_depobj): Use OMP_CLAUSE_DEPEND_INVALID instead of\n+\tOMP_CLAUSE_DEPEND_SOURCE.\n+\t(cp_parser_omp_for_loop): Don't diagnose here linear clause together\n+\twith ordered with argument.\n+\t(cp_parser_omp_simd): Don't diagnose ordered clause with argument on\n+\tfor simd.\n+\t(OMP_ORDERED_DEPEND_CLAUSE_MASK): Add PRAGMA_OMP_CLAUSE_DOACROSS.\n+\t(cp_parser_omp_ordered): Handle also doacross and adjust for it\n+\tdiagnostic wording.\n+\t* pt.cc (tsubst_omp_clause_decl): Use\n+\tOMP_CLAUSE_DOACROSS_SINK_NEGATIVE instead of\n+\tOMP_CLAUSE_DEPEND_SINK_NEGATIVE.\n+\t(tsubst_omp_clauses): Handle OMP_CLAUSE_DOACROSS.\n+\t(tsubst_expr): Use OMP_CLAUSE_DEPEND_INVALID instead of\n+\tOMP_CLAUSE_DEPEND_SOURCE.\n+\t* semantics.cc (cp_finish_omp_clause_depend_sink): Rename to ...\n+\t(cp_finish_omp_clause_doacross_sink): ... this.\n+\t(finish_omp_clauses): Handle OMP_CLAUSE_DOACROSS.  Don't handle\n+\tOMP_CLAUSE_DEPEND_SOURCE and OMP_CLAUSE_DEPEND_SINK.\n+\n 2022-09-02  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c/90885"}, {"sha": "14d5a671b2bd43f9569f42ce3cd45f25bf41e28c", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83f2f22850a647bcf1e7cd155fb2ed67f23fc4b3/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83f2f22850a647bcf1e7cd155fb2ed67f23fc4b3/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=83f2f22850a647bcf1e7cd155fb2ed67f23fc4b3", "patch": "@@ -1,3 +1,17 @@\n+2022-09-03  Jos\u00e9 Rui Faustino de Sousa  <jrfsousa@gmail.com>\n+\n+\tPR fortran/100245\n+\t* trans-expr.cc (trans_class_assignment): Add if clause to handle\n+\tderived type in the LHS.\n+\n+2022-09-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* trans-openmp.cc (gfc_trans_omp_clauses): Use\n+\tOMP_CLAUSE_DOACROSS_SINK_NEGATIVE instead of\n+\tOMP_CLAUSE_DEPEND_SINK_NEGATIVE, build OMP_CLAUSE_DOACROSS\n+\tclause instead of OMP_CLAUSE_DEPEND and set OMP_CLAUSE_DOACROSS_DEPEND\n+\ton it.\n+\n 2022-09-02  Harald Anlauf  <anlauf@gmx.de>\n \t    Steven G. Kargl  <kargl@gcc.gnu.org>\n "}, {"sha": "209b507099e060e92d93bdbcd1005ee2116c2e71", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83f2f22850a647bcf1e7cd155fb2ed67f23fc4b3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83f2f22850a647bcf1e7cd155fb2ed67f23fc4b3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=83f2f22850a647bcf1e7cd155fb2ed67f23fc4b3", "patch": "@@ -1,3 +1,22 @@\n+2022-09-03  Jos\u00e9 Rui Faustino de Sousa  <jrfsousa@gmail.com>\n+\n+\tPR fortran/100245\n+\t* gfortran.dg/PR100245.f90: New test.\n+\n+2022-09-03  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gcc.dg/tree-ssa/pr106819.c: New test.\n+\n+2022-09-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-c++-common/gomp/doacross-2.c: Adjust expected diagnostics.\n+\t* c-c++-common/gomp/doacross-5.c: New test.\n+\t* c-c++-common/gomp/doacross-6.c: New test.\n+\t* c-c++-common/gomp/nesting-2.c: Adjust expected diagnostics.\n+\t* c-c++-common/gomp/ordered-3.c: Likewise.\n+\t* c-c++-common/gomp/sink-3.c: Likewise.\n+\t* gfortran.dg/gomp/nesting-2.f90: Likewise.\n+\n 2022-09-02  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c/90885"}]}