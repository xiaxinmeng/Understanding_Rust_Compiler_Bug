{"sha": "0bb4423d43b70344c2811ebec37f3b6a9e678c80", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGJiNDQyM2Q0M2I3MDM0NGMyODExZWJlYzM3ZjNiNmE5ZTY3OGM4MA==", "commit": {"author": {"name": "Monk Chiang", "email": "sh.chiang04@gmail.com", "date": "2018-04-07T05:40:07Z"}, "committer": {"name": "Chung-Ju Wu", "email": "jasonwucj@gcc.gnu.org", "date": "2018-04-07T05:40:07Z"}, "message": "[NDS32] Add intrinsic functions for FPU.\n\ngcc/\n\t* config/nds32/constants.md (unspec_volatile_element): Add\n\tUNSPEC_VOLATILE_FMFCSR, UNSPEC_VOLATILE_FMTCSR and\n\tUNSPEC_VOLATILE_FMFCFG.\n\t* config/nds32/nds32-intrinsic.c (bdesc_noarg): New builtin\n\tdescription for fmfcfg and fmfcsr.\n\t(bdesc_1arg): Add fmtcsr.\n\t(bdesc_2arg): Add fcpynss, fcpyss, fcpynsd and fcpysd.\n\t(nds32_expand_builtin_impl): Deal with FPU intrinsic functions.\n\t* config/nds32/nds32-intrinsic.md (unspec_fcpynsd, unspec_fcpysd,\n\tunspec_fcpynss, unspec_fcpysd, unspec_fcpyss, unspec_fmfcsr,\n\tunspec_fmfcfg): New patterns.\n\t* config/nds32/nds32.h (nds32_builtins): Add NDS32_BUILTIN_FMFCFG,\n\tNDS32_BUILTIN_FMFCSR, NDS32_BUILTIN_FMTCSR, NDS32_BUILTIN_FCPYNSS,\n\tNDS32_BUILTIN_FCPYSS,NDS32_BUILTIN_FCPYNSD and NDS32_BUILTIN_FCPYSD.\n\t* config/nds32/nds32_intrinsic.h (__nds32__fcpynsd, __nds32__fcpynss,\n\t__nds32__fcpysd, __nds32__fcpyss, __nds32__fmfcsr, __nds32__fmtcsr,\n\t__nds32__fmfcfg): Define.\n\nFrom-SVN: r259203", "tree": {"sha": "0b4d609e05eb71a8b2d5f95a17e3a8644d2fde49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b4d609e05eb71a8b2d5f95a17e3a8644d2fde49"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0bb4423d43b70344c2811ebec37f3b6a9e678c80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bb4423d43b70344c2811ebec37f3b6a9e678c80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bb4423d43b70344c2811ebec37f3b6a9e678c80", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bb4423d43b70344c2811ebec37f3b6a9e678c80/comments", "author": {"login": "monkchiang", "id": 62004175, "node_id": "MDQ6VXNlcjYyMDA0MTc1", "avatar_url": "https://avatars.githubusercontent.com/u/62004175?v=4", "gravatar_id": "", "url": "https://api.github.com/users/monkchiang", "html_url": "https://github.com/monkchiang", "followers_url": "https://api.github.com/users/monkchiang/followers", "following_url": "https://api.github.com/users/monkchiang/following{/other_user}", "gists_url": "https://api.github.com/users/monkchiang/gists{/gist_id}", "starred_url": "https://api.github.com/users/monkchiang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/monkchiang/subscriptions", "organizations_url": "https://api.github.com/users/monkchiang/orgs", "repos_url": "https://api.github.com/users/monkchiang/repos", "events_url": "https://api.github.com/users/monkchiang/events{/privacy}", "received_events_url": "https://api.github.com/users/monkchiang/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2095a9d538e0ea00f684fea4e55deaff21bd4a1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2095a9d538e0ea00f684fea4e55deaff21bd4a1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2095a9d538e0ea00f684fea4e55deaff21bd4a1b"}], "stats": {"total": 164, "additions": 164, "deletions": 0}, "files": [{"sha": "bb30f3d4e0b04119cd7bc18bb71995354d486251", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bb4423d43b70344c2811ebec37f3b6a9e678c80/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bb4423d43b70344c2811ebec37f3b6a9e678c80/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0bb4423d43b70344c2811ebec37f3b6a9e678c80", "patch": "@@ -1,3 +1,23 @@\n+2018-04-07  Monk Chiang  <sh.chiang04@gmail.com>\n+\n+\t* config/nds32/constants.md (unspec_volatile_element): Add\n+\tUNSPEC_VOLATILE_FMFCSR, UNSPEC_VOLATILE_FMTCSR and\n+\tUNSPEC_VOLATILE_FMFCFG.\n+\t* config/nds32/nds32-intrinsic.c (bdesc_noarg): New builtin\n+\tdescription for fmfcfg and fmfcsr.\n+\t(bdesc_1arg): Add fmtcsr.\n+\t(bdesc_2arg): Add fcpynss, fcpyss, fcpynsd and fcpysd.\n+\t(nds32_expand_builtin_impl): Deal with FPU intrinsic functions.\n+\t* config/nds32/nds32-intrinsic.md (unspec_fcpynsd, unspec_fcpysd,\n+\tunspec_fcpynss, unspec_fcpysd, unspec_fcpyss, unspec_fmfcsr,\n+\tunspec_fmfcfg): New patterns.\n+\t* config/nds32/nds32.h (nds32_builtins): Add NDS32_BUILTIN_FMFCFG,\n+\tNDS32_BUILTIN_FMFCSR, NDS32_BUILTIN_FMTCSR, NDS32_BUILTIN_FCPYNSS,\n+\tNDS32_BUILTIN_FCPYSS,NDS32_BUILTIN_FCPYNSD and NDS32_BUILTIN_FCPYSD.\n+\t* config/nds32/nds32_intrinsic.h (__nds32__fcpynsd, __nds32__fcpynss,\n+\t__nds32__fcpysd, __nds32__fcpyss, __nds32__fmfcsr, __nds32__fmtcsr,\n+\t__nds32__fmfcfg): Define.\n+\n 2018-04-07  Monk Chiang  <sh.chiang04@gmail.com>\n \n \t* config/nds32/nds32.c (nds32_intrinsic_register_names): Add more"}, {"sha": "1a0e880dc43c2c59530259b6bf7c25f12b630dd5", "filename": "gcc/config/nds32/constants.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bb4423d43b70344c2811ebec37f3b6a9e678c80/gcc%2Fconfig%2Fnds32%2Fconstants.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bb4423d43b70344c2811ebec37f3b6a9e678c80/gcc%2Fconfig%2Fnds32%2Fconstants.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fconstants.md?ref=0bb4423d43b70344c2811ebec37f3b6a9e678c80", "patch": "@@ -58,6 +58,9 @@\n   UNSPEC_VOLATILE_MTUSR\n   UNSPEC_VOLATILE_SETGIE_EN\n   UNSPEC_VOLATILE_SETGIE_DIS\n+  UNSPEC_VOLATILE_FMFCSR\n+  UNSPEC_VOLATILE_FMTCSR\n+  UNSPEC_VOLATILE_FMFCFG\n \n   UNSPEC_VOLATILE_RELAX_GROUP\n   UNSPEC_VOLATILE_POP25_RETURN"}, {"sha": "c5435bb9dd41bee9af2eaa73504168333bfb0b12", "filename": "gcc/config/nds32/nds32-intrinsic.c", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bb4423d43b70344c2811ebec37f3b6a9e678c80/gcc%2Fconfig%2Fnds32%2Fnds32-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bb4423d43b70344c2811ebec37f3b6a9e678c80/gcc%2Fconfig%2Fnds32%2Fnds32-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32-intrinsic.c?ref=0bb4423d43b70344c2811ebec37f3b6a9e678c80", "patch": "@@ -238,13 +238,21 @@ struct builtin_description\n   { CODE_FOR_##code, \"__nds32__\" string, \\\n     NDS32_BUILTIN_##builtin, false },\n \n+/* Intrinsics that no argument, and that return value.  */\n+static struct builtin_description bdesc_noarg[] =\n+{\n+  NDS32_BUILTIN(unspec_fmfcfg, \"fmfcfg\", FMFCFG)\n+  NDS32_BUILTIN(unspec_fmfcsr, \"fmfcsr\", FMFCSR)\n+};\n+\n /* Intrinsics that take just one argument.  */\n static struct builtin_description bdesc_1arg[] =\n {\n   NDS32_BUILTIN(unaligned_load_hw, \"unaligned_load_hw\", UALOAD_HW)\n   NDS32_BUILTIN(unaligned_loadsi, \"unaligned_load_w\", UALOAD_W)\n   NDS32_BUILTIN(unaligned_loaddi, \"unaligned_load_dw\", UALOAD_DW)\n   NDS32_NO_TARGET_BUILTIN(unspec_volatile_isync, \"isync\", ISYNC)\n+  NDS32_NO_TARGET_BUILTIN(unspec_fmtcsr, \"fmtcsr\", FMTCSR)\n };\n \n /* Intrinsics that take just one argument. and the argument is immediate.  */\n@@ -257,6 +265,10 @@ static struct builtin_description bdesc_1argimm[] =\n /* Intrinsics that take two arguments.  */\n static struct builtin_description bdesc_2arg[] =\n {\n+  NDS32_BUILTIN(unspec_fcpynss, \"fcpynss\", FCPYNSS)\n+  NDS32_BUILTIN(unspec_fcpyss, \"fcpyss\", FCPYSS)\n+  NDS32_BUILTIN(unspec_fcpynsd, \"fcpynsd\", FCPYNSD)\n+  NDS32_BUILTIN(unspec_fcpysd, \"fcpysd\", FCPYSD)\n   NDS32_BUILTIN(unspec_ffb, \"ffb\", FFB)\n   NDS32_BUILTIN(unspec_ffmism, \"ffmsim\", FFMISM)\n   NDS32_BUILTIN(unspec_flmism, \"flmism\", FLMISM)\n@@ -282,6 +294,32 @@ nds32_expand_builtin_impl (tree exp,\n \n   switch (fcode)\n     {\n+    /* FPU Register Transfer.  */\n+    case NDS32_BUILTIN_FMFCFG:\n+    case NDS32_BUILTIN_FMFCSR:\n+    case NDS32_BUILTIN_FMTCSR:\n+    case NDS32_BUILTIN_FCPYNSS:\n+    case NDS32_BUILTIN_FCPYSS:\n+      /* Both v3s and v3f toolchains define TARGET_FPU_SINGLE.  */\n+      if (!TARGET_FPU_SINGLE)\n+\t{\n+\t  error (\"this builtin function is only available \"\n+\t\t \"on the v3s or v3f toolchain\");\n+\t  return NULL_RTX;\n+\t}\n+      break;\n+\n+    /* FPU Register Transfer.  */\n+    case NDS32_BUILTIN_FCPYNSD:\n+    case NDS32_BUILTIN_FCPYSD:\n+      /* Only v3f toolchain defines TARGET_FPU_DOUBLE.  */\n+      if (!TARGET_FPU_DOUBLE)\n+\t{\n+\t  error (\"this builtin function is only available \"\n+\t\t \"on the v3f toolchain\");\n+\t  return NULL_RTX;\n+\t}\n+      break;\n     /* String Extension  */\n     case NDS32_BUILTIN_FFB:\n     case NDS32_BUILTIN_FFMISM:\n@@ -314,6 +352,10 @@ nds32_expand_builtin_impl (tree exp,\n     }\n \n   /* Expand groups of builtins.  */\n+  for (i = 0, d = bdesc_noarg; i < ARRAY_SIZE (bdesc_noarg); i++, d++)\n+    if (d->code == fcode)\n+      return nds32_expand_noarg_builtin (d->icode, target);\n+\n   for (i = 0, d = bdesc_1arg; i < ARRAY_SIZE (bdesc_1arg); i++, d++)\n     if (d->code == fcode)\n       return nds32_expand_unop_builtin (d->icode, exp, target, d->return_p);\n@@ -396,6 +438,15 @@ nds32_init_builtins_impl (void)\n   ADD_NDS32_BUILTIN2 (\"mtsr\", void, unsigned, integer, MTSR);\n   ADD_NDS32_BUILTIN2 (\"mtusr\", void, unsigned, integer, MTUSR);\n \n+  /* FPU Register Transfer.  */\n+  ADD_NDS32_BUILTIN0 (\"fmfcsr\", unsigned, FMFCSR);\n+  ADD_NDS32_BUILTIN1 (\"fmtcsr\", void, unsigned, FMTCSR);\n+  ADD_NDS32_BUILTIN0 (\"fmfcfg\", unsigned, FMFCFG);\n+  ADD_NDS32_BUILTIN2 (\"fcpyss\", float, float, float, FCPYSS);\n+  ADD_NDS32_BUILTIN2 (\"fcpynss\", float, float, float, FCPYNSS);\n+  ADD_NDS32_BUILTIN2 (\"fcpysd\", double, double, double, FCPYSD);\n+  ADD_NDS32_BUILTIN2 (\"fcpynsd\", double, double, double, FCPYNSD);\n+\n   /* Interrupt.  */\n   ADD_NDS32_BUILTIN0 (\"setgie_en\", void, SETGIE_EN);\n   ADD_NDS32_BUILTIN0 (\"setgie_dis\", void, SETGIE_DIS);"}, {"sha": "59aad349dc386712d9851c2b0b4e572f03db66ed", "filename": "gcc/config/nds32/nds32-intrinsic.md", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bb4423d43b70344c2811ebec37f3b6a9e678c80/gcc%2Fconfig%2Fnds32%2Fnds32-intrinsic.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bb4423d43b70344c2811ebec37f3b6a9e678c80/gcc%2Fconfig%2Fnds32%2Fnds32-intrinsic.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32-intrinsic.md?ref=0bb4423d43b70344c2811ebec37f3b6a9e678c80", "patch": "@@ -58,6 +58,74 @@\n    (set_attr \"length\"    \"4\")]\n )\n \n+;; FPU Register Transfer.\n+\n+(define_insn \"unspec_fcpynsd\"\n+   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n+\t (unspec:DF [(match_operand:DF 1 \"register_operand\" \"f\")\n+\t\t     (match_operand:DF 2 \"register_operand\" \"f\")] UNSPEC_FCPYNSD))]\n+  \"\"\n+  \"fcpynsd\\t%0, %1, %2\"\n+  [(set_attr \"type\"   \"misc\")\n+   (set_attr \"length\"    \"4\")]\n+)\n+\n+(define_insn \"unspec_fcpynss\"\n+   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n+\t (unspec:SF [(match_operand:SF 1 \"register_operand\" \"f\")\n+\t\t     (match_operand:SF 2 \"register_operand\" \"f\")] UNSPEC_FCPYNSS))]\n+  \"\"\n+  \"fcpynss\\t%0, %1, %2\"\n+  [(set_attr \"type\"   \"misc\")\n+   (set_attr \"length\"    \"4\")]\n+)\n+\n+(define_insn \"unspec_fcpysd\"\n+   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n+\t (unspec:DF [(match_operand:DF 1 \"register_operand\" \"f\")\n+\t\t     (match_operand:DF 2 \"register_operand\" \"f\")] UNSPEC_FCPYSD))]\n+  \"\"\n+  \"fcpysd\\t%0, %1, %2\"\n+  [(set_attr \"type\"   \"misc\")\n+   (set_attr \"length\"    \"4\")]\n+)\n+\n+(define_insn \"unspec_fcpyss\"\n+   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n+\t (unspec:SF [(match_operand:SF 1 \"register_operand\" \"f\")\n+\t\t     (match_operand:SF 2 \"register_operand\" \"f\")] UNSPEC_FCPYSS))]\n+  \"\"\n+  \"fcpyss\\t%0, %1, %2\"\n+  [(set_attr \"type\"   \"misc\")\n+   (set_attr \"length\"    \"4\")]\n+)\n+\n+(define_insn \"unspec_fmfcsr\"\n+   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t (unspec_volatile:SI [(const_int 0)] UNSPEC_VOLATILE_FMFCSR))]\n+  \"\"\n+  \"fmfcsr\\t%0\"\n+  [(set_attr \"type\"   \"misc\")\n+   (set_attr \"length\"    \"4\")]\n+)\n+\n+(define_insn \"unspec_fmtcsr\"\n+  [(unspec_volatile:SI [(match_operand:SI 0 \"register_operand\" \"r\")] UNSPEC_VOLATILE_FMTCSR)]\n+  \"\"\n+  \"fmtcsr\\t%0\"\n+  [(set_attr \"type\"   \"misc\")\n+   (set_attr \"length\"    \"4\")]\n+)\n+\n+(define_insn \"unspec_fmfcfg\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(unspec_volatile:SI [(const_int 0)] UNSPEC_VOLATILE_FMFCFG))]\n+  \"\"\n+  \"fmfcfg\\t%0\"\n+  [(set_attr \"type\"   \"misc\")\n+   (set_attr \"length\"    \"4\")]\n+)\n+\n ;; ------------------------------------------------------------------------\n \n ;; Interrupt Instructions."}, {"sha": "7ec0f7c2ba148a5aec201f2adfaf96c8134c65c6", "filename": "gcc/config/nds32/nds32.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bb4423d43b70344c2811ebec37f3b6a9e678c80/gcc%2Fconfig%2Fnds32%2Fnds32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bb4423d43b70344c2811ebec37f3b6a9e678c80/gcc%2Fconfig%2Fnds32%2Fnds32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.h?ref=0bb4423d43b70344c2811ebec37f3b6a9e678c80", "patch": "@@ -442,6 +442,13 @@ enum nds32_builtins\n   NDS32_BUILTIN_MTUSR,\n   NDS32_BUILTIN_SETGIE_EN,\n   NDS32_BUILTIN_SETGIE_DIS,\n+  NDS32_BUILTIN_FMFCFG,\n+  NDS32_BUILTIN_FMFCSR,\n+  NDS32_BUILTIN_FMTCSR,\n+  NDS32_BUILTIN_FCPYNSS,\n+  NDS32_BUILTIN_FCPYSS,\n+  NDS32_BUILTIN_FCPYNSD,\n+  NDS32_BUILTIN_FCPYSD,\n   NDS32_BUILTIN_FFB,\n   NDS32_BUILTIN_FFMISM,\n   NDS32_BUILTIN_FLMISM,"}, {"sha": "523e7f571edf72e8f0a7f5bcc9c35b5e1e8ceca1", "filename": "gcc/config/nds32/nds32_intrinsic.h", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bb4423d43b70344c2811ebec37f3b6a9e678c80/gcc%2Fconfig%2Fnds32%2Fnds32_intrinsic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bb4423d43b70344c2811ebec37f3b6a9e678c80/gcc%2Fconfig%2Fnds32%2Fnds32_intrinsic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32_intrinsic.h?ref=0bb4423d43b70344c2811ebec37f3b6a9e678c80", "patch": "@@ -345,4 +345,19 @@ enum nds32_intrinsic_registers\n #define NDS32_USR_IFC_LP                __NDS32_REG_IFC_LP__\n #define NDS32_USR_ITB                   __NDS32_REG_ITB__\n \n+#define __nds32__fcpynsd(a, b) \\\n+  (__builtin_nds32_fcpynsd ((a), (b)))\n+#define __nds32__fcpynss(a, b) \\\n+  (__builtin_nds32_fcpynss ((a), (b)))\n+#define __nds32__fcpysd(a, b) \\\n+  (__builtin_nds32_fcpysd ((a), (b)))\n+#define __nds32__fcpyss(a, b) \\\n+  (__builtin_nds32_fcpyss ((a), (b)))\n+#define __nds32__fmfcsr() \\\n+  (__builtin_nds32_fmfcsr())\n+#define __nds32__fmtcsr(fpcsr) \\\n+  (__builtin_nds32_fmtcsr ((fpcsr)))\n+#define __nds32__fmfcfg() \\\n+  (__builtin_nds32_fmfcfg())\n+\n #endif /* nds32_intrinsic.h */"}]}