{"sha": "2f9834e8055d89ec753d6bea65cb734dcd8f0dc0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmY5ODM0ZTgwNTVkODllYzc1M2Q2YmVhNjVjYjczNGRjZDhmMGRjMA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2002-03-13T01:42:43Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2002-03-13T01:42:43Z"}, "message": "c-common.c (c_tree_code_type, [...]): Delete.\n\n\t* c-common.c (c_tree_code_type, c_tree_code_length,\n\tc_tree_code_name, add_c_tree_codes): Delete.\n\t* c-common.h (add_c_tree_codes): Delete.\n\t* c-lang.c (tree_code_type, tree_code_length, tree_code_name):\n\tDefine.\n\t* c-objc-common.c (c_objc_common_init): Don't call\n\tadd_c_tree_codes, instead set lang_unsafe_for_reeval.\n\t* objc/objc-act.c (objc_tree_code_type, objc_tree_code_length,\n\tobjc_tree_code_name, add_objc_tree_codes): Delete.\n\t(objc_init): Don't call add_objc_tree_codes.\n\t* objc/objc-lang.c (tree_code_type, tree_code_length,\n\ttree_code_name): Define.\n\t* toplev.c (lang_independent_init): Don't set\n\ttree_code_length[IDENTIFIER_NODE].\n\t* tree.c (tree_code_type, tree_code_length, tree_code_name):\n\tDelete definitions, moved to language front-ends.\n\t* tree.def (IDENTIFIER_NODE): Hardwire the length.\n\t* tree.h (tree_code_type, tree_code_length, tree_code_name):\n\tConst-ify.\n\t(tree_code_length): Change type to unsigned char.\n\nada:\n\t* misc.c (gnat_tree_code_type, gnat_tree_code_length,\n\tgnat_tree_code_name): Delete.\n\t(tree_code_type, tree_code_length, tree_code_name): Define.\n\t(gnat_init): Don't try to copy into the various tree_code\n\tarrays.\n\nch:\n\t* decl.c (chill_tree_code_type, chill_tree_code_length,\n\tchill_tree_code_name): Delete.\n\t(tree_code_type, tree_code_length, tree_code_name): Define.\n\t(init_decl_processing): Don't try to copy into the various\n\ttree_code arrays.\n\ncp:\n\t* cp-lang.c (tree_code_type, tree_code_length, tree_code_name):\n\tDefine.\n\t* decl.c (duplicate_decls): Use TREE_CODE_LENGTH, not\n\ttree_code_length.\n\t* lex.c (cplus_tree_code_type, cplus_tree_code_length,\n\tcplus_tree_code_name): Delete.\n\t(cxx_init): Don't call add_c_tree_codes, instead set\n\tlang_unsafe_for_reeval.  Don't try to copy into the various\n\ttree_code arrays.\n\nf:\n\t* com.c (tree_code_type, tree_code_length, tree_code_name):\n\tDefine.\n\njava:\n\t* lang.c (java_tree_code_type, java_tree_code_length,\n\ttree_code_name): Delete.\n\t(tree_code_type, tree_code_length, tree_code_name): Define.\n\t(java_init): Don't try to copy into the various tree_code\n\tarrays.\n\nFrom-SVN: r50705", "tree": {"sha": "2e0cc6a8c103f156968a4851003a3fc1f9435589", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e0cc6a8c103f156968a4851003a3fc1f9435589"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f9834e8055d89ec753d6bea65cb734dcd8f0dc0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f9834e8055d89ec753d6bea65cb734dcd8f0dc0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f9834e8055d89ec753d6bea65cb734dcd8f0dc0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f9834e8055d89ec753d6bea65cb734dcd8f0dc0/comments", "author": null, "committer": null, "parents": [{"sha": "36ad2436427c37bac46dc216589ed936f8106f2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36ad2436427c37bac46dc216589ed936f8106f2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36ad2436427c37bac46dc216589ed936f8106f2d"}], "stats": {"total": 544, "additions": 274, "deletions": 270}, "files": [{"sha": "48d9949287c766672823b082b7ad8c3d4bda0083", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f9834e8055d89ec753d6bea65cb734dcd8f0dc0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f9834e8055d89ec753d6bea65cb734dcd8f0dc0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2f9834e8055d89ec753d6bea65cb734dcd8f0dc0", "patch": "@@ -1,3 +1,26 @@\n+2002-03-12  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* c-common.c (c_tree_code_type, c_tree_code_length,\n+\tc_tree_code_name, add_c_tree_codes): Delete.\n+\t* c-common.h (add_c_tree_codes): Delete.\n+\t* c-lang.c (tree_code_type, tree_code_length, tree_code_name):\n+\tDefine.\n+\t* c-objc-common.c (c_objc_common_init): Don't call\n+\tadd_c_tree_codes, instead set lang_unsafe_for_reeval.\n+\t* objc/objc-act.c (objc_tree_code_type, objc_tree_code_length,\n+\tobjc_tree_code_name, add_objc_tree_codes): Delete.\n+\t(objc_init): Don't call add_objc_tree_codes.\n+\t* objc/objc-lang.c (tree_code_type, tree_code_length,\n+\ttree_code_name): Define.\n+\t* toplev.c (lang_independent_init): Don't set\n+\ttree_code_length[IDENTIFIER_NODE].\n+\t* tree.c (tree_code_type, tree_code_length, tree_code_name):\n+\tDelete definitions, moved to language front-ends.\n+\t* tree.def (IDENTIFIER_NODE): Hardwire the length.\n+\t* tree.h (tree_code_type, tree_code_length, tree_code_name):\n+\tConst-ify.\n+\t(tree_code_length): Change type to unsigned char.\n+\n 2002-03-12  Richard Henderson  <rth@redhat.com>\n \n \t* config/i386/i386.c (ix86_expand_prologue): Revert 2002-03-03"}, {"sha": "c1495885c51d34cbe6a7fe3f28b4f0dfa4e8b82c", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f9834e8055d89ec753d6bea65cb734dcd8f0dc0/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f9834e8055d89ec753d6bea65cb734dcd8f0dc0/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=2f9834e8055d89ec753d6bea65cb734dcd8f0dc0", "patch": "@@ -1,3 +1,11 @@\n+2002-03-12  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* misc.c (gnat_tree_code_type, gnat_tree_code_length,\n+\tgnat_tree_code_name): Delete.\n+\t(tree_code_type, tree_code_length, tree_code_name): Define.\n+\t(gnat_init): Don't try to copy into the various tree_code\n+\tarrays.\n+\n 2002-03-11  Richard Henderson  <rth@redhat.com>\n \n \t* Makefile.in (.NOTPARALLEL): Add fake tag."}, {"sha": "bd4ec734904fdce5eb1ddb66a767d4ba95c2337d", "filename": "gcc/ada/misc.c", "status": "modified", "additions": 40, "deletions": 52, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f9834e8055d89ec753d6bea65cb734dcd8f0dc0/gcc%2Fada%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f9834e8055d89ec753d6bea65cb734dcd8f0dc0/gcc%2Fada%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmisc.c?ref=2f9834e8055d89ec753d6bea65cb734dcd8f0dc0", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                           C Implementation File                          *\n  *                                                                          *\n- *                             $Revision$\n+ *                             $Revision: 1.20 $\n  *                                                                          *\n  *          Copyright (C) 1992-2002 Free Software Foundation, Inc.          *\n  *                                                                          *\n@@ -77,42 +77,6 @@ extern FILE *asm_out_file;\n extern int save_argc;\n extern char **save_argv;\n \n-/* Tables describing GCC tree codes used only by GNAT.  \n-\n-   Table indexed by tree code giving a string containing a character\n-   classifying the tree code.  Possibilities are\n-   t, d, s, c, r, <, 1 and 2.  See cp-tree.def for details.  */\n-\n-#define DEFTREECODE(SYM, NAME, TYPE, LENGTH) TYPE,\n-\n-static const char gnat_tree_code_type[] = {\n-  'x',\n-#include \"ada-tree.def\"\n-};\n-#undef DEFTREECODE\n-\n-/* Table indexed by tree code giving number of expression\n-   operands beyond the fixed part of the node structure.\n-   Not used for types or decls.  */\n-\n-#define DEFTREECODE(SYM, NAME, TYPE, LENGTH) LENGTH,\n-\n-static const int gnat_tree_code_length[] = {\n-  0,\n-#include \"ada-tree.def\"\n-};\n-#undef DEFTREECODE\n-\n-/* Names of tree components.\n-   Used for printing out the tree and error messages.  */\n-#define DEFTREECODE(SYM, NAME, TYPE, LEN) NAME,\n-\n-const char * const gnat_tree_code_name[] = {\n-  \"@@dummy\",\n-#include \"ada-tree.def\"\n-};\n-#undef DEFTREECODE\n-\n static const char *gnat_init\t\tPARAMS ((const char *));\n static void gnat_init_options\t\tPARAMS ((void));\n static int gnat_decode_option\t\tPARAMS ((int, char **));\n@@ -146,6 +110,45 @@ static int gnat_eh_type_covers\t\tPARAMS ((tree, tree));\n \n const struct lang_hooks lang_hooks = LANG_HOOKS_INITIALIZER;\n \n+/* Tables describing GCC tree codes used only by GNAT.  \n+\n+   Table indexed by tree code giving a string containing a character\n+   classifying the tree code.  Possibilities are\n+   t, d, s, c, r, <, 1 and 2.  See cp-tree.def for details.  */\n+\n+#define DEFTREECODE(SYM, NAME, TYPE, LENGTH) TYPE,\n+\n+const char tree_code_type[] = {\n+#include \"tree.def\"\n+  'x',\n+#include \"ada-tree.def\"\n+};\n+#undef DEFTREECODE\n+\n+/* Table indexed by tree code giving number of expression\n+   operands beyond the fixed part of the node structure.\n+   Not used for types or decls.  */\n+\n+#define DEFTREECODE(SYM, NAME, TYPE, LENGTH) LENGTH,\n+\n+const unsigned char tree_code_length[] = {\n+#include \"tree.def\"\n+  0,\n+#include \"ada-tree.def\"\n+};\n+#undef DEFTREECODE\n+\n+/* Names of tree components.\n+   Used for printing out the tree and error messages.  */\n+#define DEFTREECODE(SYM, NAME, TYPE, LEN) NAME,\n+\n+const char *const tree_code_name[] = {\n+#include \"tree.def\"\n+  \"@@dummy\",\n+#include \"ada-tree.def\"\n+};\n+#undef DEFTREECODE\n+\n /* gnat standard argc argv */\n \n extern int gnat_argc;\n@@ -358,21 +361,6 @@ gnat_init (filename)\n   lang_expand_expr = gnat_expand_expr;\n   decl_printable_name = gnat_printable_name;\n \n-  memcpy ((char *) (tree_code_type + (int) LAST_AND_UNUSED_TREE_CODE),\n-\t  (char *) gnat_tree_code_type,\n-\t  ((LAST_GNAT_TREE_CODE - (int) LAST_AND_UNUSED_TREE_CODE)\n-\t   * sizeof (char *)));\n-\n-  memcpy ((char *) (tree_code_length + (int) LAST_AND_UNUSED_TREE_CODE),\n-\t  (char *) gnat_tree_code_length,\n-\t  ((LAST_GNAT_TREE_CODE - (int) LAST_AND_UNUSED_TREE_CODE)\n-\t   * sizeof (int)));\n-\n-  memcpy ((char *) (tree_code_name + (int) LAST_AND_UNUSED_TREE_CODE),\n-\t  (char *) gnat_tree_code_name,\n-\t  ((LAST_GNAT_TREE_CODE - (int) LAST_AND_UNUSED_TREE_CODE)\n-\t   * sizeof (char *)));\n-\n   gnat_init_decl_processing ();\n \n   /* Add the input filename as the last argument.  */"}, {"sha": "0352eb6bbc985d5dcf27586c7e04a00e89f75080", "filename": "gcc/c-common.c", "status": "modified", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f9834e8055d89ec753d6bea65cb734dcd8f0dc0/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f9834e8055d89ec753d6bea65cb734dcd8f0dc0/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=2f9834e8055d89ec753d6bea65cb734dcd8f0dc0", "patch": "@@ -3696,56 +3696,6 @@ c_staticp (exp)\n   return 0;\n }\n \n-/* Tree code classes.  */\n-\n-#define DEFTREECODE(SYM, NAME, TYPE, LENGTH) TYPE,\n-\n-static const char c_tree_code_type[] = {\n-  'x',\n-#include \"c-common.def\"\n-};\n-#undef DEFTREECODE\n-\n-/* Table indexed by tree code giving number of expression\n-   operands beyond the fixed part of the node structure.\n-   Not used for types or decls.  */\n-\n-#define DEFTREECODE(SYM, NAME, TYPE, LENGTH) LENGTH,\n-\n-static const int c_tree_code_length[] = {\n-  0,\n-#include \"c-common.def\"\n-};\n-#undef DEFTREECODE\n-\n-/* Names of tree components.\n-   Used for printing out the tree and error messages.  */\n-#define DEFTREECODE(SYM, NAME, TYPE, LEN) NAME,\n-\n-static const char *const c_tree_code_name[] = {\n-  \"@@dummy\",\n-#include \"c-common.def\"\n-};\n-#undef DEFTREECODE\n-\n-/* Adds the tree codes specific to the C front end to the list of all\n-   tree codes.  */\n-\n-void\n-add_c_tree_codes ()\n-{\n-  memcpy (tree_code_type + (int) LAST_AND_UNUSED_TREE_CODE,\n-\t  c_tree_code_type,\n-\t  (int) LAST_C_TREE_CODE - (int) LAST_AND_UNUSED_TREE_CODE);\n-  memcpy (tree_code_length + (int) LAST_AND_UNUSED_TREE_CODE,\n-\t  c_tree_code_length,\n-\t  (LAST_C_TREE_CODE - (int) LAST_AND_UNUSED_TREE_CODE) * sizeof (int));\n-  memcpy (tree_code_name + (int) LAST_AND_UNUSED_TREE_CODE,\n-\t  c_tree_code_name,\n-\t  (LAST_C_TREE_CODE - (int) LAST_AND_UNUSED_TREE_CODE) * sizeof (char *));\n-  lang_unsafe_for_reeval = c_unsafe_for_reeval;\n-}\n-\n #define CALLED_AS_BUILT_IN(NODE) \\\n    (!strncmp (IDENTIFIER_POINTER (DECL_NAME (NODE)), \"__builtin_\", 10))\n "}, {"sha": "314a6ba3a15d4b1e305b0d227477a01c1a3d08a0", "filename": "gcc/c-common.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f9834e8055d89ec753d6bea65cb734dcd8f0dc0/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f9834e8055d89ec753d6bea65cb734dcd8f0dc0/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=2f9834e8055d89ec753d6bea65cb734dcd8f0dc0", "patch": "@@ -728,7 +728,6 @@ enum c_tree_code {\n \n #undef DEFTREECODE\n \n-extern void add_c_tree_codes\t\t        PARAMS ((void));\n extern void genrtl_do_pushlevel                 PARAMS ((void));\n extern void genrtl_goto_stmt                    PARAMS ((tree));\n extern void genrtl_expr_stmt                    PARAMS ((tree));"}, {"sha": "c01d256abb76477eb94c5f1d149a594ec08260a9", "filename": "gcc/c-lang.c", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f9834e8055d89ec753d6bea65cb734dcd8f0dc0/gcc%2Fc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f9834e8055d89ec753d6bea65cb734dcd8f0dc0/gcc%2Fc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lang.c?ref=2f9834e8055d89ec753d6bea65cb734dcd8f0dc0", "patch": "@@ -73,6 +73,41 @@ static void c_post_options PARAMS ((void));\n /* Each front end provides its own.  */\n const struct lang_hooks lang_hooks = LANG_HOOKS_INITIALIZER;\n \n+/* Tree code classes.  */\n+\n+#define DEFTREECODE(SYM, NAME, TYPE, LENGTH) TYPE,\n+\n+const char tree_code_type[] = {\n+#include \"tree.def\"\n+  'x',\n+#include \"c-common.def\"\n+};\n+#undef DEFTREECODE\n+\n+/* Table indexed by tree code giving number of expression\n+   operands beyond the fixed part of the node structure.\n+   Not used for types or decls.  */\n+\n+#define DEFTREECODE(SYM, NAME, TYPE, LENGTH) LENGTH,\n+\n+const unsigned char tree_code_length[] = {\n+#include \"tree.def\"\n+  0,\n+#include \"c-common.def\"\n+};\n+#undef DEFTREECODE\n+\n+/* Names of tree components.\n+   Used for printing out the tree and error messages.  */\n+#define DEFTREECODE(SYM, NAME, TYPE, LEN) NAME,\n+\n+const char *const tree_code_name[] = {\n+#include \"tree.def\"\n+  \"@@dummy\",\n+#include \"c-common.def\"\n+};\n+#undef DEFTREECODE\n+\n /* Post-switch processing.  */\n static void\n c_post_options ()"}, {"sha": "3baa0835e2343c6dfd1b1c2fd194ed9f2c64e535", "filename": "gcc/c-objc-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f9834e8055d89ec753d6bea65cb734dcd8f0dc0/gcc%2Fc-objc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f9834e8055d89ec753d6bea65cb734dcd8f0dc0/gcc%2Fc-objc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-objc-common.c?ref=2f9834e8055d89ec753d6bea65cb734dcd8f0dc0", "patch": "@@ -217,7 +217,7 @@ c_objc_common_init (filename)\n \n   filename = c_common_init (filename);\n \n-  add_c_tree_codes ();\n+  lang_unsafe_for_reeval = c_unsafe_for_reeval;\n \n   save_lang_status = &push_c_function_context;\n   restore_lang_status = &pop_c_function_context;"}, {"sha": "df0d0f580aebbb0a9017884eb08157fc37634349", "filename": "gcc/ch/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f9834e8055d89ec753d6bea65cb734dcd8f0dc0/gcc%2Fch%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f9834e8055d89ec753d6bea65cb734dcd8f0dc0/gcc%2Fch%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2FChangeLog?ref=2f9834e8055d89ec753d6bea65cb734dcd8f0dc0", "patch": "@@ -1,3 +1,11 @@\n+2002-03-12  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* decl.c (chill_tree_code_type, chill_tree_code_length,\n+\tchill_tree_code_name): Delete.\n+\t(tree_code_type, tree_code_length, tree_code_name): Define.\n+\t(init_decl_processing): Don't try to copy into the various\n+\ttree_code arrays.\n+\n 2002-02-27  Zack Weinberg  <zack@codesourcery.com>\n \n \t* ch-tree.h, decl.c: Delete traditional-mode-related code"}, {"sha": "01ca9e6c6bd97dd771f4c9c8776820d69875896c", "filename": "gcc/ch/decl.c", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f9834e8055d89ec753d6bea65cb734dcd8f0dc0/gcc%2Fch%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f9834e8055d89ec753d6bea65cb734dcd8f0dc0/gcc%2Fch%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Fdecl.c?ref=2f9834e8055d89ec753d6bea65cb734dcd8f0dc0", "patch": "@@ -534,7 +534,8 @@ int warn_missing_braces;\n \n #define DEFTREECODE(SYM, NAME, TYPE, LENGTH) TYPE,\n   \n-  const char chill_tree_code_type[] = {\n+const char tree_code_type[] = {\n+#include \"tree.def\"\n     'x',\n #include \"ch-tree.def\"\n   };\n@@ -546,7 +547,8 @@ int warn_missing_braces;\n \n #define DEFTREECODE(SYM, NAME, TYPE, LENGTH) LENGTH,\n   \n-int chill_tree_code_length[] = {\n+const unsigned char tree_code_length[] = {\n+#include \"tree.def\"\n     0,\n #include \"ch-tree.def\"\n   };\n@@ -557,7 +559,8 @@ int chill_tree_code_length[] = {\n    Used for printing out the tree and error messages.  */\n #define DEFTREECODE(SYM, NAME, TYPE, LEN) NAME,\n   \n-const char *chill_tree_code_name[] = {\n+const char *const tree_code_name[] = {\n+#include \"tree.def\"\n     \"@@dummy\",\n #include \"ch-tree.def\"\n   };\n@@ -3482,18 +3485,6 @@ init_decl_processing ()\n   DECL_SOURCE_LINE (temp) = 0;\n   initializer_type = TREE_TYPE (temp);\n \n-  memcpy (tree_code_type + (int) LAST_AND_UNUSED_TREE_CODE,\n-\t  chill_tree_code_type,\n-\t  (((int) LAST_CHILL_TREE_CODE - (int) LAST_AND_UNUSED_TREE_CODE)\n-\t   * sizeof (char)));\n-  memcpy (tree_code_length + (int) LAST_AND_UNUSED_TREE_CODE,\n-\t  chill_tree_code_length,\n-\t  (((int) LAST_CHILL_TREE_CODE - (int) LAST_AND_UNUSED_TREE_CODE)\n-\t   * sizeof (int)));\n-  memcpy (tree_code_name + (int) LAST_AND_UNUSED_TREE_CODE,\n-\t  chill_tree_code_name,\n-\t  (((int) LAST_CHILL_TREE_CODE - (int) LAST_AND_UNUSED_TREE_CODE)\n-\t   * sizeof (char *)));\n   boolean_code_name = (const char **) xcalloc (sizeof (char *),\n \t\t\t\t\t       (int) LAST_CHILL_TREE_CODE);\n "}, {"sha": "7ff6499fef302e5a68eda6a53057bb47a8d64b46", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f9834e8055d89ec753d6bea65cb734dcd8f0dc0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f9834e8055d89ec753d6bea65cb734dcd8f0dc0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2f9834e8055d89ec753d6bea65cb734dcd8f0dc0", "patch": "@@ -1,3 +1,15 @@\n+2002-03-12  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* cp-lang.c (tree_code_type, tree_code_length, tree_code_name):\n+\tDefine.\n+\t* decl.c (duplicate_decls): Use TREE_CODE_LENGTH, not\n+\ttree_code_length.\n+\t* lex.c (cplus_tree_code_type, cplus_tree_code_length,\n+\tcplus_tree_code_name): Delete.\n+\t(cxx_init): Don't call add_c_tree_codes, instead set\n+\tlang_unsafe_for_reeval.  Don't try to copy into the various\n+\ttree_code arrays.\n+\n 2002-03-12  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR c++/5659"}, {"sha": "1a2713601b4006786b44547bc6c51622325443be", "filename": "gcc/cp/cp-lang.c", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f9834e8055d89ec753d6bea65cb734dcd8f0dc0/gcc%2Fcp%2Fcp-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f9834e8055d89ec753d6bea65cb734dcd8f0dc0/gcc%2Fcp%2Fcp-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-lang.c?ref=2f9834e8055d89ec753d6bea65cb734dcd8f0dc0", "patch": "@@ -152,6 +152,47 @@ ok_to_generate_alias_set_for_type (t)\n     return true;\n }\n \n+/* Tree code classes. */\n+\n+#define DEFTREECODE(SYM, NAME, TYPE, LENGTH) TYPE,\n+\n+const char tree_code_type[] = {\n+#include \"tree.def\"\n+  'x',\n+#include \"c-common.def\"\n+  'x',\n+#include \"cp-tree.def\"\n+};\n+#undef DEFTREECODE\n+\n+/* Table indexed by tree code giving number of expression\n+   operands beyond the fixed part of the node structure.\n+   Not used for types or decls.  */\n+\n+#define DEFTREECODE(SYM, NAME, TYPE, LENGTH) LENGTH,\n+\n+const unsigned char tree_code_length[] = {\n+#include \"tree.def\"\n+  0,\n+#include \"c-common.def\"\n+  0,\n+#include \"cp-tree.def\"\n+};\n+#undef DEFTREECODE\n+\n+/* Names of tree components.\n+   Used for printing out the tree and error messages.  */\n+#define DEFTREECODE(SYM, NAME, TYPE, LEN) NAME,\n+\n+const char *const tree_code_name[] = {\n+#include \"tree.def\"\n+  \"@@dummy\",\n+#include \"c-common.def\"\n+  \"@@dummy\",\n+#include \"cp-tree.def\"\n+};\n+#undef DEFTREECODE\n+\n /* Special routine to get the alias set for C++.  */\n \n static HOST_WIDE_INT"}, {"sha": "2417202f4efe3a50bb224feebcd6bfba83339488", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f9834e8055d89ec753d6bea65cb734dcd8f0dc0/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f9834e8055d89ec753d6bea65cb734dcd8f0dc0/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=2f9834e8055d89ec753d6bea65cb734dcd8f0dc0", "patch": "@@ -3781,7 +3781,7 @@ duplicate_decls (newdecl, olddecl)\n       memcpy ((char *) olddecl + sizeof (struct tree_common),\n \t      (char *) newdecl + sizeof (struct tree_common),\n \t      sizeof (struct tree_decl) - sizeof (struct tree_common)\n-\t      + tree_code_length [(int)TREE_CODE (newdecl)] * sizeof (char *));\n+\t      + TREE_CODE_LENGTH (TREE_CODE (newdecl)) * sizeof (char *));\n     }\n \n   DECL_UID (olddecl) = olddecl_uid;"}, {"sha": "5990df946e1bb18d6a5f02592df572f9dfd1cd16", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 1, "deletions": 42, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f9834e8055d89ec753d6bea65cb734dcd8f0dc0/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f9834e8055d89ec753d6bea65cb734dcd8f0dc0/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=2f9834e8055d89ec753d6bea65cb734dcd8f0dc0", "patch": "@@ -205,37 +205,6 @@ int interface_only;\t\t/* whether or not current file is only for\n int interface_unknown;\t\t/* whether or not we know this class\n \t\t\t\t   to behave according to #pragma interface.  */\n \n-/* Tree code classes. */\n-\n-#define DEFTREECODE(SYM, NAME, TYPE, LENGTH) TYPE,\n-\n-static const char cplus_tree_code_type[] = {\n-  'x',\n-#include \"cp-tree.def\"\n-};\n-#undef DEFTREECODE\n-\n-/* Table indexed by tree code giving number of expression\n-   operands beyond the fixed part of the node structure.\n-   Not used for types or decls.  */\n-\n-#define DEFTREECODE(SYM, NAME, TYPE, LENGTH) LENGTH,\n-\n-static const int cplus_tree_code_length[] = {\n-  0,\n-#include \"cp-tree.def\"\n-};\n-#undef DEFTREECODE\n-\n-/* Names of tree components.\n-   Used for printing out the tree and error messages.  */\n-#define DEFTREECODE(SYM, NAME, TYPE, LEN) NAME,\n-\n-static const char *const cplus_tree_code_name[] = {\n-  \"@@dummy\",\n-#include \"cp-tree.def\"\n-};\n-#undef DEFTREECODE\n \f\n /* Post-switch processing.  */\n void\n@@ -682,17 +651,7 @@ cxx_init (filename)\n   init_cplus_expand ();\n   init_cp_semantics ();\n \n-  add_c_tree_codes ();\n-\n-  memcpy (tree_code_type + (int) LAST_C_TREE_CODE,\n-\t  cplus_tree_code_type,\n-\t  (int)LAST_CPLUS_TREE_CODE - (int)LAST_C_TREE_CODE);\n-  memcpy (tree_code_length + (int) LAST_C_TREE_CODE,\n-\t  cplus_tree_code_length,\n-\t  (LAST_CPLUS_TREE_CODE - (int)LAST_C_TREE_CODE) * sizeof (int));\n-  memcpy (tree_code_name + (int) LAST_C_TREE_CODE,\n-\t  cplus_tree_code_name,\n-\t  (LAST_CPLUS_TREE_CODE - (int)LAST_C_TREE_CODE) * sizeof (char *));\n+  lang_unsafe_for_reeval = c_unsafe_for_reeval;\n \n   init_operators ();\n   init_method ();"}, {"sha": "0f3ec2c3a16efc1cc39020a19da75ff3db57828f", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f9834e8055d89ec753d6bea65cb734dcd8f0dc0/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f9834e8055d89ec753d6bea65cb734dcd8f0dc0/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=2f9834e8055d89ec753d6bea65cb734dcd8f0dc0", "patch": "@@ -1,3 +1,8 @@\n+Tue Mar 12 20:23:18 2002  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* com.c (tree_code_type, tree_code_length, tree_code_name):\n+\tDefine.\n+\n Sun Mar 10 12:37:42 2002  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* target.c (ffetarget_print_hex): Const-ify."}, {"sha": "f895db4cb9f449dd1e064c588f3a90f26b423d19", "filename": "gcc/f/com.c", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f9834e8055d89ec753d6bea65cb734dcd8f0dc0/gcc%2Ff%2Fcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f9834e8055d89ec753d6bea65cb734dcd8f0dc0/gcc%2Ff%2Fcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.c?ref=2f9834e8055d89ec753d6bea65cb734dcd8f0dc0", "patch": "@@ -14224,6 +14224,37 @@ static void ffe_print_identifier PARAMS ((FILE *, tree, int));\n \n const struct lang_hooks lang_hooks = LANG_HOOKS_INITIALIZER;\n \n+/* Table indexed by tree code giving a string containing a character\n+   classifying the tree code.  Possibilities are\n+   t, d, s, c, r, <, 1, 2 and e.  See tree.def for details.  */\n+\n+#define DEFTREECODE(SYM, NAME, TYPE, LENGTH) TYPE,\n+\n+const char tree_code_type[] = {\n+#include \"tree.def\"\n+};\n+#undef DEFTREECODE\n+\n+/* Table indexed by tree code giving number of expression\n+   operands beyond the fixed part of the node structure.\n+   Not used for types or decls.  */\n+\n+#define DEFTREECODE(SYM, NAME, TYPE, LENGTH) LENGTH,\n+\n+const unsigned char tree_code_length[] = {\n+#include \"tree.def\"\n+};\n+#undef DEFTREECODE\n+\n+/* Names of tree components.\n+   Used for printing out the tree and error messages.  */\n+#define DEFTREECODE(SYM, NAME, TYPE, LEN) NAME,\n+\n+const char *const tree_code_name[] = {\n+#include \"tree.def\"\n+};\n+#undef DEFTREECODE\n+\n static const char *\n ffe_init (filename)\n      const char *filename;"}, {"sha": "be360b45873a12fe8e58b14fc707aaa08143e9fc", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f9834e8055d89ec753d6bea65cb734dcd8f0dc0/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f9834e8055d89ec753d6bea65cb734dcd8f0dc0/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=2f9834e8055d89ec753d6bea65cb734dcd8f0dc0", "patch": "@@ -1,3 +1,11 @@\n+2002-03-12  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* lang.c (java_tree_code_type, java_tree_code_length,\n+\ttree_code_name): Delete.\n+\t(tree_code_type, tree_code_length, tree_code_name): Define.\n+\t(java_init): Don't try to copy into the various tree_code\n+\tarrays.\n+\n 2002-03-12  Tom Tromey  <tromey@redhat.com>\n \n \t* jcf-parse.c (get_constant) [CONSTANT_String]: String values are"}, {"sha": "24e0375e27585eca840d66088240183cc59ff424", "filename": "gcc/java/lang.c", "status": "modified", "additions": 6, "deletions": 16, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f9834e8055d89ec753d6bea65cb734dcd8f0dc0/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f9834e8055d89ec753d6bea65cb734dcd8f0dc0/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=2f9834e8055d89ec753d6bea65cb734dcd8f0dc0", "patch": "@@ -70,7 +70,8 @@ static int process_option_with_no PARAMS ((const char *,\n \n #define DEFTREECODE(SYM, NAME, TYPE, LENGTH) TYPE,\n \n-static const char java_tree_code_type[] = {\n+const char tree_code_type[] = {\n+#include \"tree.def\"\n   'x',\n #include \"java-tree.def\"\n };\n@@ -82,7 +83,8 @@ static const char java_tree_code_type[] = {\n \n #define DEFTREECODE(SYM, NAME, TYPE, LENGTH) LENGTH,\n \n-static const int java_tree_code_length[] = {\n+const unsigned char tree_code_length[] = {\n+#include \"tree.def\"\n   0,\n #include \"java-tree.def\"\n };\n@@ -92,7 +94,8 @@ static const int java_tree_code_length[] = {\n    Used for printing out the tree and error messages.  */\n #define DEFTREECODE(SYM, NAME, TYPE, LEN) NAME,\n \n-static const char *const java_tree_code_name[] = {\n+const char *const tree_code_name[] = {\n+#include \"tree.def\"\n   \"@@dummy\",\n #include \"java-tree.def\"\n };\n@@ -505,19 +508,6 @@ java_init (filename)\n   print_error_function = lang_print_error;\n   lang_expand_expr = java_lang_expand_expr;\n \n-  /* Append to Gcc tree node definition arrays */\n-\n-  memcpy (tree_code_type + (int) LAST_AND_UNUSED_TREE_CODE,\n-\t  java_tree_code_type,\n-\t  (int)LAST_JAVA_TREE_CODE - (int)LAST_AND_UNUSED_TREE_CODE);\n-  memcpy (tree_code_length + (int) LAST_AND_UNUSED_TREE_CODE,\n-\t  java_tree_code_length,\n-\t  (LAST_JAVA_TREE_CODE - \n-\t   (int)LAST_AND_UNUSED_TREE_CODE) * sizeof (int));\n-  memcpy (tree_code_name + (int) LAST_AND_UNUSED_TREE_CODE,\n-\t  java_tree_code_name,\n-\t  (LAST_JAVA_TREE_CODE - \n-\t   (int)LAST_AND_UNUSED_TREE_CODE) * sizeof (char *));\n   java_init_decl_processing ();\n \n   using_eh_for_cleanups ();"}, {"sha": "0c9e9fd27f808fc90e4f43655b69d298e8c386e2", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 0, "deletions": 52, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f9834e8055d89ec753d6bea65cb734dcd8f0dc0/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f9834e8055d89ec753d6bea65cb734dcd8f0dc0/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=2f9834e8055d89ec753d6bea65cb734dcd8f0dc0", "patch": "@@ -86,40 +86,6 @@ Boston, MA 02111-1307, USA.  */\n #define OBJC_FORWARDING_MIN_OFFSET 0\n #endif\n \f\n-/* Define the special tree codes that we use.  */\n-\n-/* Table indexed by tree code giving a string containing a character\n-   classifying the tree code.  */\n-\n-#define DEFTREECODE(SYM, NAME, TYPE, LENGTH) TYPE,\n-\n-static const char objc_tree_code_type[] = {\n-  'x',\n-#include \"objc-tree.def\"\n-};\n-#undef DEFTREECODE\n-\n-/* Table indexed by tree code giving number of expression\n-   operands beyond the fixed part of the node structure.\n-   Not used for types or decls.  */\n-\n-#define DEFTREECODE(SYM, NAME, TYPE, LENGTH) LENGTH,\n-\n-static const int objc_tree_code_length[] = {\n-  0,\n-#include \"objc-tree.def\"\n-};\n-#undef DEFTREECODE\n-\n-/* Names of tree components.\n-   Used for printing out the tree and error messages.  */\n-#define DEFTREECODE(SYM, NAME, TYPE, LEN) NAME,\n-\n-static const char * const objc_tree_code_name[] = {\n-  \"@@dummy\",\n-#include \"objc-tree.def\"\n-};\n-#undef DEFTREECODE\n \f\n /* Set up for use of obstacks.  */\n \n@@ -270,7 +236,6 @@ static void dump_interface\t\t\tPARAMS ((FILE *, tree));\n \n /* Everything else.  */\n \n-static void add_objc_tree_codes\t\t\tPARAMS ((void));\n static tree define_decl\t\t\t\tPARAMS ((tree, tree));\n static tree lookup_method_in_protocol_list\tPARAMS ((tree, tree, int));\n static tree lookup_protocol_in_reflist\t\tPARAMS ((tree, tree));\n@@ -511,7 +476,6 @@ objc_init (filename)\n      const char *filename;\n {\n   filename = c_objc_common_init (filename);\n-  add_objc_tree_codes ();\n \n   decl_printable_name = objc_printable_name;\n \n@@ -8072,22 +8036,6 @@ objc_printable_name (decl, kind)\n   return objc_demangle (IDENTIFIER_POINTER (DECL_NAME (decl)));\n }\n \n-/* Adds the tree codes specific to the ObjC/ObjC++ front end to the\n-   list of all tree codes.  */\n-\n-static void\n-add_objc_tree_codes ()\n-{\n-  int add = (int) LAST_OBJC_TREE_CODE - (int) LAST_BASE_TREE_CODE;\n-\n-  memcpy (tree_code_type + (int) LAST_BASE_TREE_CODE,\n-\t  objc_tree_code_type, add);\n-  memcpy (tree_code_length + (int) LAST_BASE_TREE_CODE,\n-\t  objc_tree_code_length, add * sizeof (int));\n-  memcpy (tree_code_name + (int) LAST_BASE_TREE_CODE,\n-\t  objc_tree_code_name, add * sizeof (char *));\n-}\n-\n static void\n init_objc ()\n {"}, {"sha": "2577f655fc999a5629bfaff5c818e40e587d8776", "filename": "gcc/objc/objc-lang.c", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f9834e8055d89ec753d6bea65cb734dcd8f0dc0/gcc%2Fobjc%2Fobjc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f9834e8055d89ec753d6bea65cb734dcd8f0dc0/gcc%2Fobjc%2Fobjc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-lang.c?ref=2f9834e8055d89ec753d6bea65cb734dcd8f0dc0", "patch": "@@ -66,6 +66,50 @@ static void objc_post_options                   PARAMS ((void));\n /* Each front end provides its own hooks, for toplev.c.  */\n const struct lang_hooks lang_hooks = LANG_HOOKS_INITIALIZER;\n \n+/* Define the special tree codes that we use.  */\n+\n+/* Table indexed by tree code giving a string containing a character\n+   classifying the tree code.  */\n+\n+#define DEFTREECODE(SYM, NAME, TYPE, LENGTH) TYPE,\n+\n+const char tree_code_type[] = {\n+#include \"tree.def\"\n+  'x',\n+#include \"c-common.def\"\n+  'x',\n+#include \"objc-tree.def\"\n+};\n+#undef DEFTREECODE\n+\n+/* Table indexed by tree code giving number of expression\n+   operands beyond the fixed part of the node structure.\n+   Not used for types or decls.  */\n+\n+#define DEFTREECODE(SYM, NAME, TYPE, LENGTH) LENGTH,\n+\n+const unsigned char tree_code_length[] = {\n+#include \"tree.def\"\n+  0,\n+#include \"c-common.def\"\n+  0,\n+#include \"objc-tree.def\"\n+};\n+#undef DEFTREECODE\n+\n+/* Names of tree components.\n+   Used for printing out the tree and error messages.  */\n+#define DEFTREECODE(SYM, NAME, TYPE, LEN) NAME,\n+\n+const char * const tree_code_name[] = {\n+#include \"tree.def\"\n+  \"@@dummy\",\n+#include \"c-common.def\"\n+  \"@@dummy\",\n+#include \"objc-tree.def\"\n+};\n+#undef DEFTREECODE\n+\n static void \n objc_init_options ()\n {"}, {"sha": "fbf6e6ba395be1c7d37a6677381e68f43dd96311", "filename": "gcc/toplev.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f9834e8055d89ec753d6bea65cb734dcd8f0dc0/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f9834e8055d89ec753d6bea65cb734dcd8f0dc0/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=2f9834e8055d89ec753d6bea65cb734dcd8f0dc0", "patch": "@@ -4998,11 +4998,6 @@ lang_independent_init ()\n   decl_printable_name = decl_name;\n   lang_expand_expr = (lang_expand_expr_t) do_abort;\n \n-  /* Set the language-dependent identifier size.  */\n-  tree_code_length[(int) IDENTIFIER_NODE]\n-    = ((lang_hooks.identifier_size - sizeof (struct tree_common)\n-\t+ sizeof (tree) - 1) / sizeof (tree));\n-\n   /* Initialize the garbage-collector, and string pools.  */\n   init_ggc ();\n   ggc_add_rtx_root (&stack_limit_rtx, 1);"}, {"sha": "eda2fd63aeb985f986aa28c894a5dffde45fd83e", "filename": "gcc/tree.c", "status": "modified", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f9834e8055d89ec753d6bea65cb734dcd8f0dc0/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f9834e8055d89ec753d6bea65cb734dcd8f0dc0/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=2f9834e8055d89ec753d6bea65cb734dcd8f0dc0", "patch": "@@ -56,37 +56,6 @@ extern int _obstack_allocated_p PARAMS ((struct obstack *h, PTR obj));\n \n struct obstack permanent_obstack;\n \n-/* Table indexed by tree code giving a string containing a character\n-   classifying the tree code.  Possibilities are\n-   t, d, s, c, r, <, 1, 2 and e.  See tree.def for details.  */\n-\n-#define DEFTREECODE(SYM, NAME, TYPE, LENGTH) TYPE,\n-\n-char tree_code_type[MAX_TREE_CODES] = {\n-#include \"tree.def\"\n-};\n-#undef DEFTREECODE\n-\n-/* Table indexed by tree code giving number of expression\n-   operands beyond the fixed part of the node structure.\n-   Not used for types or decls.  */\n-\n-#define DEFTREECODE(SYM, NAME, TYPE, LENGTH) LENGTH,\n-\n-int tree_code_length[MAX_TREE_CODES] = {\n-#include \"tree.def\"\n-};\n-#undef DEFTREECODE\n-\n-/* Names of tree components.\n-   Used for printing out the tree and error messages.  */\n-#define DEFTREECODE(SYM, NAME, TYPE, LEN) NAME,\n-\n-const char *tree_code_name[MAX_TREE_CODES] = {\n-#include \"tree.def\"\n-};\n-#undef DEFTREECODE\n-\n /* Statistics-gathering stuff.  */\n typedef enum\n {"}, {"sha": "cd0f1c298c3988c1e7916524b4c9c189d60234ab", "filename": "gcc/tree.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f9834e8055d89ec753d6bea65cb734dcd8f0dc0/gcc%2Ftree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f9834e8055d89ec753d6bea65cb734dcd8f0dc0/gcc%2Ftree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.def?ref=2f9834e8055d89ec753d6bea65cb734dcd8f0dc0", "patch": "@@ -49,7 +49,7 @@ DEFTREECODE (ERROR_MARK, \"error_mark\", 'x', 0)\n    Internally it looks like a STRING_CST node.\n    There is only one IDENTIFIER_NODE ever made for any particular name.\n    Use `get_identifier' to get it (or create it, the first time).  */\n-DEFTREECODE (IDENTIFIER_NODE, \"identifier_node\", 'x', -1)\n+DEFTREECODE (IDENTIFIER_NODE, \"identifier_node\", 'x', ((LANG_HOOKS_IDENTIFIER_SIZE - sizeof (struct tree_common) + sizeof (tree) - 1) / sizeof (tree)))\n \n /* Has the TREE_VALUE and TREE_PURPOSE fields.  */\n /* These nodes are made into lists by chaining through the"}, {"sha": "06b7dd556f2db822ba04cdafb33c0ab59d3bf997", "filename": "gcc/tree.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f9834e8055d89ec753d6bea65cb734dcd8f0dc0/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f9834e8055d89ec753d6bea65cb734dcd8f0dc0/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=2f9834e8055d89ec753d6bea65cb734dcd8f0dc0", "patch": "@@ -46,7 +46,7 @@ enum tree_code {\n    and `x' for anything else (TREE_LIST, IDENTIFIER, etc).  */\n \n #define MAX_TREE_CODES 256\n-extern char tree_code_type[MAX_TREE_CODES];\n+extern const char tree_code_type[];\n #define TREE_CODE_CLASS(CODE)\ttree_code_type[(int) (CODE)]\n \n /* Returns non-zero iff CLASS is the tree-code class of an\n@@ -57,12 +57,12 @@ extern char tree_code_type[MAX_TREE_CODES];\n \n /* Number of argument-words in each kind of tree-node.  */\n \n-extern int tree_code_length[MAX_TREE_CODES];\n+extern const unsigned char tree_code_length[];\n #define TREE_CODE_LENGTH(CODE)\ttree_code_length[(int) (CODE)]\n \n /* Names of tree components.  */\n \n-extern const char *tree_code_name[MAX_TREE_CODES];\n+extern const char *const tree_code_name[];\n \f\n /* Classify which part of the compiler has defined a given builtin function.\n    Note that we assume below that this is no more than two bits.  */"}]}