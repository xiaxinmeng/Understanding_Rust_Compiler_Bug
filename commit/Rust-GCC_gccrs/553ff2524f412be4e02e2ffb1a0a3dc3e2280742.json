{"sha": "553ff2524f412be4e02e2ffb1a0a3dc3e2280742", "node_id": "C_kwDOANBUbNoAKDU1M2ZmMjUyNGY0MTJiZTRlMDJlMmZmYjFhMGEzZGMzZTIyODA3NDI", "commit": {"author": {"name": "Paul-Antoine Arras", "email": "pa@codesourcery.com", "date": "2023-03-01T16:20:21Z"}, "committer": {"name": "Paul-Antoine Arras", "email": "pa@codesourcery.com", "date": "2023-03-06T14:26:27Z"}, "message": "amdgcn: Add instruction patterns for conditional min/max operations\n\ngcc/ChangeLog:\n\n\t* config/gcn/gcn-valu.md (<expander><mode>3_exec): Add patterns for\n\t{s|u}{max|min} in QI, HI and DI modes.\n\t(<expander><mode>3): Add pattern for {s|u}{max|min} in DI mode.\n\t(cond_<fexpander><mode>): Add pattern for cond_f{max|min}.\n\t(cond_<expander><mode>): Add pattern for cond_{s|u}{max|min}.\n\t* config/gcn/gcn.cc (gcn_spill_class): Allow the exec register to be\n\tsaved in SGPRs.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/gcn/cond_fmaxnm_1.c: New test.\n\t* gcc.target/gcn/cond_fmaxnm_1_run.c: New test.\n\t* gcc.target/gcn/cond_fmaxnm_2.c: New test.\n\t* gcc.target/gcn/cond_fmaxnm_2_run.c: New test.\n\t* gcc.target/gcn/cond_fmaxnm_3.c: New test.\n\t* gcc.target/gcn/cond_fmaxnm_3_run.c: New test.\n\t* gcc.target/gcn/cond_fmaxnm_4.c: New test.\n\t* gcc.target/gcn/cond_fmaxnm_4_run.c: New test.\n\t* gcc.target/gcn/cond_fmaxnm_5.c: New test.\n\t* gcc.target/gcn/cond_fmaxnm_5_run.c: New test.\n\t* gcc.target/gcn/cond_fmaxnm_6.c: New test.\n\t* gcc.target/gcn/cond_fmaxnm_6_run.c: New test.\n\t* gcc.target/gcn/cond_fmaxnm_7.c: New test.\n\t* gcc.target/gcn/cond_fmaxnm_7_run.c: New test.\n\t* gcc.target/gcn/cond_fmaxnm_8.c: New test.\n\t* gcc.target/gcn/cond_fmaxnm_8_run.c: New test.\n\t* gcc.target/gcn/cond_fminnm_1.c: New test.\n\t* gcc.target/gcn/cond_fminnm_1_run.c: New test.\n\t* gcc.target/gcn/cond_fminnm_2.c: New test.\n\t* gcc.target/gcn/cond_fminnm_2_run.c: New test.\n\t* gcc.target/gcn/cond_fminnm_3.c: New test.\n\t* gcc.target/gcn/cond_fminnm_3_run.c: New test.\n\t* gcc.target/gcn/cond_fminnm_4.c: New test.\n\t* gcc.target/gcn/cond_fminnm_4_run.c: New test.\n\t* gcc.target/gcn/cond_fminnm_5.c: New test.\n\t* gcc.target/gcn/cond_fminnm_5_run.c: New test.\n\t* gcc.target/gcn/cond_fminnm_6.c: New test.\n\t* gcc.target/gcn/cond_fminnm_6_run.c: New test.\n\t* gcc.target/gcn/cond_fminnm_7.c: New test.\n\t* gcc.target/gcn/cond_fminnm_7_run.c: New test.\n\t* gcc.target/gcn/cond_fminnm_8.c: New test.\n\t* gcc.target/gcn/cond_fminnm_8_run.c: New test.\n\t* gcc.target/gcn/cond_smax_1.c: New test.\n\t* gcc.target/gcn/cond_smax_1_run.c: New test.\n\t* gcc.target/gcn/cond_smin_1.c: New test.\n\t* gcc.target/gcn/cond_smin_1_run.c: New test.\n\t* gcc.target/gcn/cond_umax_1.c: New test.\n\t* gcc.target/gcn/cond_umax_1_run.c: New test.\n\t* gcc.target/gcn/cond_umin_1.c: New test.\n\t* gcc.target/gcn/cond_umin_1_run.c: New test.\n\t* gcc.target/gcn/smax_1.c: New test.\n\t* gcc.target/gcn/smax_1_run.c: New test.\n\t* gcc.target/gcn/smin_1.c: New test.\n\t* gcc.target/gcn/smin_1_run.c: New test.\n\t* gcc.target/gcn/umax_1.c: New test.\n\t* gcc.target/gcn/umax_1_run.c: New test.\n\t* gcc.target/gcn/umin_1.c: New test.\n\t* gcc.target/gcn/umin_1_run.c: New test.", "tree": {"sha": "7d36be30eed8d24bcda03ed9f0445f64cd892933", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d36be30eed8d24bcda03ed9f0445f64cd892933"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/553ff2524f412be4e02e2ffb1a0a3dc3e2280742", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/553ff2524f412be4e02e2ffb1a0a3dc3e2280742", "html_url": "https://github.com/Rust-GCC/gccrs/commit/553ff2524f412be4e02e2ffb1a0a3dc3e2280742", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/comments", "author": null, "committer": null, "parents": [{"sha": "14e5b65fd9bb6a848adda8ec939840c8f3ea6b40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14e5b65fd9bb6a848adda8ec939840c8f3ea6b40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14e5b65fd9bb6a848adda8ec939840c8f3ea6b40"}], "stats": {"total": 1383, "additions": 1381, "deletions": 2}, "files": [{"sha": "75e9a59600b98846b9182c8470e30983ad0fc1af", "filename": "gcc/config/gcn/gcn-valu.md", "status": "modified", "additions": 136, "deletions": 1, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Fconfig%2Fgcn%2Fgcn-valu.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Fconfig%2Fgcn%2Fgcn-valu.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn-valu.md?ref=553ff2524f412be4e02e2ffb1a0a3dc3e2280742", "patch": "@@ -2358,6 +2358,34 @@\n     DONE;\n   })\n \n+(define_expand \"<expander><mode>3_exec\"\n+  [(set (match_operand:V_QIHI 0 \"gcn_valu_dst_operand\")\n+\t(vec_merge:V_QIHI\n+\t  (minmaxop:V_QIHI\n+\t    (match_operand:V_QIHI 1 \"gcn_valu_src0_operand\")\n+\t    (match_operand:V_QIHI 2 \"gcn_valu_src1com_operand\"))\n+\t  (match_operand:V_QIHI 3 \"gcn_register_or_unspec_operand\" \"U0\")\n+\t  (match_operand:DI 4 \"gcn_exec_reg_operand\" \"e\")))]\n+  \"\"\n+  {\n+    enum {smin, umin, smax, umax};\n+    bool unsignedp = (<code> == umax || <code> == umin);\n+    rtx insi1 = gen_reg_rtx (<VnSI>mode);\n+    rtx insi2 = gen_reg_rtx (<VnSI>mode);\n+    rtx outsi = gen_reg_rtx (<VnSI>mode);\n+    rtx out = operands[0];\n+    rtx exec = operands[4];\n+    rtx tmp = gen_reg_rtx (<MODE>mode);\n+\n+    convert_move (insi1, operands[1], unsignedp);\n+    convert_move (insi2, operands[2], unsignedp);\n+    emit_insn (gen_<code><vnsi>3_exec (outsi, insi1, insi2,\n+                                       gcn_gen_undef(<VnSI>mode), exec));\n+    convert_move (tmp, outsi, unsignedp);\n+    emit_insn (gen_mov<mode>_exec (out, tmp, operands[3], exec));\n+    DONE;\n+  })\n+\n (define_insn \"<expander><vnsi>3<exec>\"\n   [(set (match_operand:V_SI 0 \"gcn_valu_dst_operand\"\t   \"=  v,RD\")\n \t(minmaxop:V_SI\n@@ -2370,6 +2398,71 @@\n   [(set_attr \"type\" \"vop2,ds\")\n    (set_attr \"length\" \"8,8\")])\n \n+(define_insn_and_split \"<expander><mode>3\"\n+  [(set (match_operand:V_DI 0 \"register_operand\"      \"=v\")\n+\t(minmaxop:V_DI\n+\t  (match_operand:V_DI 1 \"gcn_alu_operand\"     \" v\")\n+\t  (match_operand:V_DI 2 \"gcn_alu_operand\"     \" v\")))\n+    (clobber (reg:DI VCC_REG))]\n+  \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(const_int 0)]\n+  {\n+    rtx out = operands[0];\n+    rtx vcc = gen_rtx_REG (DImode, VCC_REG);\n+\n+    enum {smin, smax, umin, umax};\n+    bool minp = (<code> == smin || <code> == umin);\n+    if (<code> == smin || <code> == smax)\n+      emit_insn (gen_vec_cmp<mode>di (vcc, minp ? gen_rtx_LT (VOIDmode, 0, 0) :\n+                                      gen_rtx_GT (VOIDmode, 0, 0), operands[1],\n+                                      operands[2]));\n+    else\n+      emit_insn (gen_vec_cmp<mode>di (vcc, minp ? gen_rtx_LTU (VOIDmode, 0, 0) :\n+                                      gen_rtx_GTU (VOIDmode, 0, 0), operands[1],\n+                                      operands[2]));\n+    emit_insn (gen_vcond_mask_<mode>di (out, operands[1], operands[2], vcc));\n+  }\n+  [(set_attr \"type\" \"mult\")])\n+\n+(define_insn_and_split \"<expander><mode>3_exec\"\n+  [(set (match_operand:V_DI 0 \"register_operand\"                 \"= v\")\n+\t(vec_merge:V_DI\n+          (minmaxop:V_DI\n+            (match_operand:V_DI 1 \"gcn_alu_operand\"              \"  v\")\n+            (match_operand:V_DI 2 \"gcn_alu_operand\"              \"  v\"))\n+          (match_operand:V_DI 3 \"gcn_register_or_unspec_operand\" \" U0\")\n+          (match_operand:DI 4 \"gcn_exec_reg_operand\"  \"+e\")))\n+    (clobber (match_scratch:<VnDI> 5\t\t      \"= &v\"))\n+    (clobber (reg:DI VCC_REG))]\n+  \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(const_int 0)]\n+  {\n+    rtx out = operands[0];\n+    rtx vcc = gen_rtx_REG (DImode, VCC_REG);\n+    rtx exec = operands[4];\n+    rtx tmp = operands[5];\n+\n+    enum {smin, smax, umin, umax};\n+    bool minp = (<code> == smin || <code> == umin);\n+    if (<code> == smin || <code> == smax)\n+      emit_insn (gen_vec_cmp<mode>di_exec (vcc,\n+                                           minp ? gen_rtx_LT (VOIDmode, 0, 0) :\n+                                           gen_rtx_GT (VOIDmode, 0, 0),\n+                                           operands[1], operands[2], exec));\n+    else\n+      emit_insn (gen_vec_cmp<mode>di_exec (vcc,\n+                                           minp ? gen_rtx_LTU (VOIDmode, 0, 0) :\n+                                           gen_rtx_GTU (VOIDmode, 0, 0),\n+                                           operands[1], operands[2], exec));\n+    emit_insn (gen_vcond_mask_<mode>di (tmp, operands[1], operands[2], vcc));\n+    emit_insn (gen_mov<mode>_exec (out, tmp, operands[3], exec));\n+  }\n+  [(set_attr \"type\" \"mult\")])\n+\n ;; }}}\n ;; {{{ Int unops\n \n@@ -3468,7 +3561,49 @@\n     DONE;\n   })\n \n-;; TODO smin umin smax umax\n+(define_code_iterator cond_fminmaxop [smin smax])\n+\n+(define_expand \"cond_<fexpander><mode>\"\n+  [(match_operand:V_FP 0 \"register_operand\")\n+   (match_operand:DI 1 \"register_operand\")\n+   (cond_fminmaxop:V_FP\n+     (match_operand:V_FP 2 \"gcn_alu_operand\")\n+     (match_operand:V_FP 3 \"gcn_alu_operand\"))\n+   (match_operand:V_FP 4 \"register_operand\")]\n+  \"\"\n+  {\n+    operands[1] = force_reg (DImode, operands[1]);\n+    operands[2] = force_reg (<MODE>mode, operands[2]);\n+\n+    emit_insn (gen_<fexpander><mode>3_exec (operands[0], operands[2],\n+\t\t\t\t\t    operands[3], operands[4],\n+\t\t\t\t\t    operands[1]));\n+    DONE;\n+  })\n+\n+(define_code_iterator cond_minmaxop [smin smax umin umax])\n+\n+(define_expand \"cond_<expander><mode>\"\n+  [(match_operand:V_INT 0 \"register_operand\")\n+   (match_operand:DI 1 \"register_operand\")\n+   (cond_minmaxop:V_INT\n+     (match_operand:V_INT 2 \"gcn_alu_operand\")\n+     (match_operand:V_INT 3 \"gcn_alu_operand\"))\n+   (match_operand:V_INT 4 \"register_operand\")]\n+  \"\"\n+  {\n+    operands[1] = force_reg (DImode, operands[1]);\n+    operands[2] = force_reg (<MODE>mode, operands[2]);\n+    rtx tmp = gen_reg_rtx (<MODE>mode);\n+\n+    emit_insn (gen_<expander><mode>3_exec (tmp, operands[2], operands[3],\n+                                           gcn_gen_undef(<MODE>mode),\n+                                           operands[1]));\n+    emit_insn (gen_vcond_mask_<mode>di (operands[0], tmp, operands[4],\n+                                        operands[1]));\n+    DONE;\n+  })\n+\n (define_code_iterator cond_bitop [and ior xor])\n \n (define_expand \"cond_<expander><mode>\""}, {"sha": "3d71c2f652652cec49a8e879b5c067a158a6cdae", "filename": "gcc/config/gcn/gcn.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Fconfig%2Fgcn%2Fgcn.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Fconfig%2Fgcn%2Fgcn.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn.cc?ref=553ff2524f412be4e02e2ffb1a0a3dc3e2280742", "patch": "@@ -798,7 +798,7 @@ static reg_class_t\n gcn_spill_class (reg_class_t c, machine_mode /*mode */ )\n {\n   if (reg_classes_intersect_p (ALL_CONDITIONAL_REGS, c)\n-      || c == VCC_CONDITIONAL_REG)\n+      || c == VCC_CONDITIONAL_REG || c == EXEC_MASK_REG)\n     return SGPR_REGS;\n   else\n     return NO_REGS;"}, {"sha": "17c49bdc5189bfabcf87829d814e762f2b436492", "filename": "gcc/testsuite/gcc.target/gcn/cond_fmaxnm_1.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fmaxnm_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fmaxnm_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fmaxnm_1.c?ref=553ff2524f412be4e02e2ffb1a0a3dc3e2280742", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -ffast-math -dp\" } */\n+\n+#include <stdint.h>\n+\n+#ifndef FN\n+#define FN(X) __builtin_fmax##X\n+#endif\n+\n+#define DEF_LOOP(FN, TYPE, PRED_TYPE, NAME, CONST)                             \\\n+  void __attribute__ ((noipa))                                                 \\\n+  test_##TYPE##_##NAME (TYPE *__restrict x, TYPE *__restrict y,                \\\n+\t\t\tPRED_TYPE *__restrict pred, int n)                     \\\n+  {                                                                            \\\n+    for (int i = 0; i < n; ++i)                                                \\\n+      x[i] = pred[i] != 1 ? FN (y[i], CONST) : y[i];                           \\\n+  }\n+\n+#define TEST_TYPE(T, FN, TYPE, PRED_TYPE)                                      \\\n+  T (FN, TYPE, PRED_TYPE, zero, 0)                                             \\\n+  T (FN, TYPE, PRED_TYPE, one, 1)                                              \\\n+  T (FN, TYPE, PRED_TYPE, two, 2)\n+\n+#define TEST_ALL(T)                                                            \\\n+  TEST_TYPE (T, FN (f32), float, int32_t)                                      \\\n+  TEST_TYPE (T, FN (f64), double, int64_t)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {smaxv64sf3_exec} 3 } } */\n+/* { dg-final { scan-assembler-times {smaxv64df3_exec} 3 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tv_writelane_b32\\tv[0-9]+, vcc_..} } } */\n\\ No newline at end of file"}, {"sha": "1e4c81c17a9478352bf151b322cf6a4429b74b84", "filename": "gcc/testsuite/gcc.target/gcn/cond_fmaxnm_1_run.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fmaxnm_1_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fmaxnm_1_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fmaxnm_1_run.c?ref=553ff2524f412be4e02e2ffb1a0a3dc3e2280742", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ftree-vectorize -ffast-math\" } */\n+\n+#include \"cond_fmaxnm_1.c\"\n+\n+#define N 99\n+\n+#define TEST_LOOP(FN, TYPE, PRED_TYPE, NAME, CONST)                            \\\n+  {                                                                            \\\n+    TYPE x[N], y[N];                                                           \\\n+    PRED_TYPE pred[N];                                                         \\\n+    for (int i = 0; i < N; ++i)                                                \\\n+      {                                                                        \\\n+\ty[i] = i * i;                                                          \\\n+\tpred[i] = i % 3;                                                       \\\n+      }                                                                        \\\n+    test_##TYPE##_##NAME (x, y, pred, N);                                      \\\n+    for (int i = 0; i < N; ++i)                                                \\\n+      {                                                                        \\\n+\tTYPE expected = i % 3 != 1 ? FN (y[i], CONST) : y[i];                  \\\n+\tif (x[i] != expected)                                                  \\\n+\t  __builtin_abort ();                                                  \\\n+\tasm volatile (\"\" ::: \"memory\");                                        \\\n+      }                                                                        \\\n+  }\n+\n+int\n+main (void)\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}, {"sha": "406df48962a3f987b00ccb89b600e744a89ab416", "filename": "gcc/testsuite/gcc.target/gcn/cond_fmaxnm_2.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fmaxnm_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fmaxnm_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fmaxnm_2.c?ref=553ff2524f412be4e02e2ffb1a0a3dc3e2280742", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -ffast-math -dp\" } */\n+\n+#include <stdint.h>\n+\n+#ifndef FN\n+#define FN(X) __builtin_fmax##X\n+#endif\n+\n+#define DEF_LOOP(FN, TYPE, NAME, CONST)                                        \\\n+  void __attribute__ ((noipa))                                                 \\\n+  test_##TYPE##_##NAME (TYPE *__restrict x, TYPE *__restrict y,                \\\n+\t\t\tTYPE *__restrict z, int n)                             \\\n+  {                                                                            \\\n+    for (int i = 0; i < n; ++i)                                                \\\n+      x[i] = y[i] < 8 ? FN (z[i], CONST) : y[i];                               \\\n+  }\n+\n+#define TEST_TYPE(T, FN, TYPE)                                                 \\\n+  T (FN, TYPE, zero, 0)                                                        \\\n+  T (FN, TYPE, one, 1)                                                         \\\n+  T (FN, TYPE, two, 2)\n+\n+#define TEST_ALL(T)                                                            \\\n+  TEST_TYPE (T, FN (f32), float)                                               \\\n+  TEST_TYPE (T, FN (f64), double)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {smaxv64sf3_exec} 3 } } */\n+/* { dg-final { scan-assembler-times {smaxv64df3_exec} 3 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tv_writelane_b32\\tv[0-9]+, vcc_..} } } */"}, {"sha": "05d18f41f067e64199bc788c26f5ffc3d78a5334", "filename": "gcc/testsuite/gcc.target/gcn/cond_fmaxnm_2_run.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fmaxnm_2_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fmaxnm_2_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fmaxnm_2_run.c?ref=553ff2524f412be4e02e2ffb1a0a3dc3e2280742", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ftree-vectorize -ffast-math\" } */\n+\n+#include \"cond_fmaxnm_2.c\"\n+\n+#define N 99\n+\n+#define TEST_LOOP(FN, TYPE, NAME, CONST)                                       \\\n+  {                                                                            \\\n+    TYPE x[N], y[N], z[N];                                                     \\\n+    for (int i = 0; i < N; ++i)                                                \\\n+      {                                                                        \\\n+\ty[i] = i % 13;                                                         \\\n+\tz[i] = i * i;                                                          \\\n+      }                                                                        \\\n+    test_##TYPE##_##NAME (x, y, z, N);                                         \\\n+    for (int i = 0; i < N; ++i)                                                \\\n+      {                                                                        \\\n+\tTYPE expected = y[i] < 8 ? FN (z[i], CONST) : y[i];                    \\\n+\tif (x[i] != expected)                                                  \\\n+\t  __builtin_abort ();                                                  \\\n+\tasm volatile (\"\" ::: \"memory\");                                        \\\n+      }                                                                        \\\n+  }\n+\n+int\n+main (void)\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}, {"sha": "45b8b7883ba5d6d9394ea539b2d30118fd56fe4b", "filename": "gcc/testsuite/gcc.target/gcn/cond_fmaxnm_3.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fmaxnm_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fmaxnm_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fmaxnm_3.c?ref=553ff2524f412be4e02e2ffb1a0a3dc3e2280742", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -ffast-math -dp\" } */\n+\n+#include <stdint.h>\n+\n+#ifndef FN\n+#define FN(X) __builtin_fmax##X\n+#endif\n+\n+#define DEF_LOOP(FN, TYPE, PRED_TYPE, NAME, CONST)                             \\\n+  void __attribute__ ((noipa))                                                 \\\n+  test_##TYPE##_##NAME (TYPE *__restrict x, TYPE *__restrict y,                \\\n+\t\t\tPRED_TYPE *__restrict pred, int n)                     \\\n+  {                                                                            \\\n+    for (int i = 0; i < n; ++i)                                                \\\n+      x[i] = pred[i] != 1 ? FN (y[i], CONST) : 4;                              \\\n+  }\n+\n+#define TEST_TYPE(T, FN, TYPE, PRED_TYPE)                                      \\\n+  T (FN, TYPE, PRED_TYPE, zero, 0)                                             \\\n+  T (FN, TYPE, PRED_TYPE, one, 1)                                              \\\n+  T (FN, TYPE, PRED_TYPE, two, 2)\n+\n+#define TEST_ALL(T)                                                            \\\n+  TEST_TYPE (T, FN (f32), float, int32_t)                                      \\\n+  TEST_TYPE (T, FN (f64), double, int64_t)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {smaxv64sf3} 3 } } */\n+/* { dg-final { scan-assembler-times {movv64sf_exec} 3 } } */\n+/* { dg-final { scan-assembler-times {smaxv64sf3} 3 } } */\n+/* { dg-final { scan-assembler-times {movv64df_exec} 3 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tv_writelane_b32\\tv[0-9]+, vcc_..} } } */\n\\ No newline at end of file"}, {"sha": "23dd00b0b13011377e7e9954e77582234595b8f6", "filename": "gcc/testsuite/gcc.target/gcn/cond_fmaxnm_3_run.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fmaxnm_3_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fmaxnm_3_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fmaxnm_3_run.c?ref=553ff2524f412be4e02e2ffb1a0a3dc3e2280742", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ftree-vectorize -ffast-math\" } */\n+\n+#include \"cond_fmaxnm_3.c\"\n+\n+#define N 99\n+\n+#define TEST_LOOP(FN, TYPE, PRED_TYPE, NAME, CONST)                            \\\n+  {                                                                            \\\n+    TYPE x[N], y[N];                                                           \\\n+    PRED_TYPE pred[N];                                                         \\\n+    for (int i = 0; i < N; ++i)                                                \\\n+      {                                                                        \\\n+\ty[i] = i * i;                                                          \\\n+\tpred[i] = i % 3;                                                       \\\n+      }                                                                        \\\n+    test_##TYPE##_##NAME (x, y, pred, N);                                      \\\n+    for (int i = 0; i < N; ++i)                                                \\\n+      {                                                                        \\\n+\tTYPE expected = i % 3 != 1 ? FN (y[i], CONST) : 4;                     \\\n+\tif (x[i] != expected)                                                  \\\n+\t  __builtin_abort ();                                                  \\\n+\tasm volatile (\"\" ::: \"memory\");                                        \\\n+      }                                                                        \\\n+  }\n+\n+int\n+main (void)\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}, {"sha": "416aea89e6e2aee07ac9bfe008bf3260ef2c3270", "filename": "gcc/testsuite/gcc.target/gcn/cond_fmaxnm_4.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fmaxnm_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fmaxnm_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fmaxnm_4.c?ref=553ff2524f412be4e02e2ffb1a0a3dc3e2280742", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -ffast-math -dp\" } */\n+\n+#include <stdint.h>\n+\n+#ifndef FN\n+#define FN(X) __builtin_fmax##X\n+#endif\n+\n+#define DEF_LOOP(FN, TYPE, PRED_TYPE, NAME, CONST)                             \\\n+  void __attribute__ ((noipa))                                                 \\\n+  test_##TYPE##_##NAME (TYPE *__restrict x, TYPE *__restrict y,                \\\n+\t\t\tPRED_TYPE *__restrict pred, int n)                     \\\n+  {                                                                            \\\n+    for (int i = 0; i < n; ++i)                                                \\\n+      x[i] = pred[i] != 1 ? FN (y[i], CONST) : 0;                              \\\n+  }\n+\n+#define TEST_TYPE(T, FN, TYPE, PRED_TYPE)                                      \\\n+  T (FN, TYPE, PRED_TYPE, zero, 0)                                             \\\n+  T (FN, TYPE, PRED_TYPE, one, 1)                                              \\\n+  T (FN, TYPE, PRED_TYPE, two, 2)\n+\n+#define TEST_ALL(T)                                                            \\\n+  TEST_TYPE (T, FN (f32), float, int32_t)                                      \\\n+  TEST_TYPE (T, FN (f64), double, int64_t)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {smaxv64sf3} 3 } } */\n+/* { dg-final { scan-assembler-times {movv64sf_exec} 3 } } */\n+/* { dg-final { scan-assembler-times {smaxv64sf3} 3 } } */\n+/* { dg-final { scan-assembler-times {movv64df_exec} 3 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tv_writelane_b32\\tv[0-9]+, vcc_..} } } */\n\\ No newline at end of file"}, {"sha": "1db583242baed4e001c7d138e2cc6232eafaacfb", "filename": "gcc/testsuite/gcc.target/gcn/cond_fmaxnm_4_run.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fmaxnm_4_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fmaxnm_4_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fmaxnm_4_run.c?ref=553ff2524f412be4e02e2ffb1a0a3dc3e2280742", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ftree-vectorize -ffast-math\" } */\n+\n+#include \"cond_fmaxnm_4.c\"\n+\n+#define N 99\n+\n+#define TEST_LOOP(FN, TYPE, PRED_TYPE, NAME, CONST)                            \\\n+  {                                                                            \\\n+    TYPE x[N], y[N];                                                           \\\n+    PRED_TYPE pred[N];                                                         \\\n+    for (int i = 0; i < N; ++i)                                                \\\n+      {                                                                        \\\n+\ty[i] = i * i;                                                          \\\n+\tpred[i] = i % 3;                                                       \\\n+      }                                                                        \\\n+    test_##TYPE##_##NAME (x, y, pred, N);                                      \\\n+    for (int i = 0; i < N; ++i)                                                \\\n+      {                                                                        \\\n+\tTYPE expected = i % 3 != 1 ? FN (y[i], CONST) : 0;                     \\\n+\tif (x[i] != expected)                                                  \\\n+\t  __builtin_abort ();                                                  \\\n+\tasm volatile (\"\" ::: \"memory\");                                        \\\n+      }                                                                        \\\n+  }\n+\n+int\n+main (void)\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}, {"sha": "a4d7ab991de90e13632d738f4235b26cfa224436", "filename": "gcc/testsuite/gcc.target/gcn/cond_fmaxnm_5.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fmaxnm_5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fmaxnm_5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fmaxnm_5.c?ref=553ff2524f412be4e02e2ffb1a0a3dc3e2280742", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -dp\" } */\n+\n+#include \"cond_fmaxnm_1.c\"\n+\n+/* { dg-final { scan-assembler-times {smaxv64sf3_exec} 3 } } */\n+/* { dg-final { scan-assembler-times {smaxv64df3_exec} 3 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tv_writelane_b32\\tv[0-9]+, vcc_..} } } */\n\\ No newline at end of file"}, {"sha": "8c0bc2ae876e29546aa8ef195b3ce2d7608b387f", "filename": "gcc/testsuite/gcc.target/gcn/cond_fmaxnm_5_run.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fmaxnm_5_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fmaxnm_5_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fmaxnm_5_run.c?ref=553ff2524f412be4e02e2ffb1a0a3dc3e2280742", "patch": "@@ -0,0 +1,4 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_fmaxnm_1_run.c\""}, {"sha": "6c64a01bcbb963f87cc8f51b1ec935f49169982e", "filename": "gcc/testsuite/gcc.target/gcn/cond_fmaxnm_6.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fmaxnm_6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fmaxnm_6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fmaxnm_6.c?ref=553ff2524f412be4e02e2ffb1a0a3dc3e2280742", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -dp\" } */\n+\n+#include \"cond_fmaxnm_2.c\"\n+\n+/* { dg-final { scan-assembler-times {smaxv64sf3_exec} 3 } } */\n+/* { dg-final { scan-assembler-times {smaxv64df3_exec} 3 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tv_writelane_b32\\tv[0-9]+, vcc_..} } } */"}, {"sha": "5c5db46b39083b177d9a1a11f2340d2b13b33d67", "filename": "gcc/testsuite/gcc.target/gcn/cond_fmaxnm_6_run.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fmaxnm_6_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fmaxnm_6_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fmaxnm_6_run.c?ref=553ff2524f412be4e02e2ffb1a0a3dc3e2280742", "patch": "@@ -0,0 +1,4 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_fmaxnm_2_run.c\""}, {"sha": "bdb3f2f99ef51b33eff553d3f1137d842d54b5e6", "filename": "gcc/testsuite/gcc.target/gcn/cond_fmaxnm_7.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fmaxnm_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fmaxnm_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fmaxnm_7.c?ref=553ff2524f412be4e02e2ffb1a0a3dc3e2280742", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -dp\" } */\n+\n+#include \"cond_fmaxnm_3.c\"\n+\n+/* { dg-final { scan-assembler-times {smaxv64sf3_exec} 3 } } */\n+/* { dg-final { scan-assembler-times {smaxv64df3_exec} 3 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tv_writelane_b32\\tv[0-9]+, vcc_..} } } */\n\\ No newline at end of file"}, {"sha": "0abe626fdfb07ab7825cba398ffc963ae29ff68e", "filename": "gcc/testsuite/gcc.target/gcn/cond_fmaxnm_7_run.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fmaxnm_7_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fmaxnm_7_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fmaxnm_7_run.c?ref=553ff2524f412be4e02e2ffb1a0a3dc3e2280742", "patch": "@@ -0,0 +1,4 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_fmaxnm_3_run.c\""}, {"sha": "c11633b5236c9332e31eea09fd53e26e1a26187b", "filename": "gcc/testsuite/gcc.target/gcn/cond_fmaxnm_8.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fmaxnm_8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fmaxnm_8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fmaxnm_8.c?ref=553ff2524f412be4e02e2ffb1a0a3dc3e2280742", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -dp\" } */\n+\n+#include \"cond_fmaxnm_4.c\"\n+\n+/* { dg-final { scan-assembler-times {smaxv64sf3_exec} 3 } } */\n+/* { dg-final { scan-assembler-times {smaxv64df3_exec} 3 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tv_writelane_b32\\tv[0-9]+, vcc_..} } } */\n\\ No newline at end of file"}, {"sha": "43b892f922e06965757d007330728ddef6606ef8", "filename": "gcc/testsuite/gcc.target/gcn/cond_fmaxnm_8_run.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fmaxnm_8_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fmaxnm_8_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fmaxnm_8_run.c?ref=553ff2524f412be4e02e2ffb1a0a3dc3e2280742", "patch": "@@ -0,0 +1,4 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_fmaxnm_4_run.c\""}, {"sha": "bb4568875685d6ed39ca7d60be4c5268dd0f2088", "filename": "gcc/testsuite/gcc.target/gcn/cond_fminnm_1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fminnm_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fminnm_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fminnm_1.c?ref=553ff2524f412be4e02e2ffb1a0a3dc3e2280742", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -ffast-math -dp\" } */\n+\n+#define FN(X) __builtin_fmin##X\n+#include \"cond_fmaxnm_1.c\"\n+\n+/* { dg-final { scan-assembler-times {sminv64sf3_exec} 3 } } */\n+/* { dg-final { scan-assembler-times {sminv64df3_exec} 3 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tv_writelane_b32\\tv[0-9]+, vcc_..} } } */"}, {"sha": "6dd9d499b35bab75046379b4807b4c3d9dc11c49", "filename": "gcc/testsuite/gcc.target/gcn/cond_fminnm_1_run.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fminnm_1_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fminnm_1_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fminnm_1_run.c?ref=553ff2524f412be4e02e2ffb1a0a3dc3e2280742", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ftree-vectorize -ffast-math\" } */\n+\n+#define FN(X) __builtin_fmin##X\n+#include \"cond_fmaxnm_1_run.c\""}, {"sha": "502f8987494b120e8c6f86914a1102ee63c42f23", "filename": "gcc/testsuite/gcc.target/gcn/cond_fminnm_2.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fminnm_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fminnm_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fminnm_2.c?ref=553ff2524f412be4e02e2ffb1a0a3dc3e2280742", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -ffast-math -dp\" } */\n+\n+#define FN(X) __builtin_fmin##X\n+#include \"cond_fmaxnm_2.c\"\n+\n+/* { dg-final { scan-assembler-times {sminv64sf3_exec} 3 } } */\n+/* { dg-final { scan-assembler-times {sminv64df3_exec} 3 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tv_writelane_b32\\tv[0-9]+, vcc_..} } } */\n\\ No newline at end of file"}, {"sha": "727842901131a773a363003ecbb81da84c57ffe1", "filename": "gcc/testsuite/gcc.target/gcn/cond_fminnm_2_run.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fminnm_2_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fminnm_2_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fminnm_2_run.c?ref=553ff2524f412be4e02e2ffb1a0a3dc3e2280742", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ftree-vectorize -ffast-math\" } */\n+\n+#define FN(X) __builtin_fmin##X\n+#include \"cond_fmaxnm_2_run.c\""}, {"sha": "2ea1eb2ec2ccba00bd43b7b8e9866e6c69608f8f", "filename": "gcc/testsuite/gcc.target/gcn/cond_fminnm_3.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fminnm_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fminnm_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fminnm_3.c?ref=553ff2524f412be4e02e2ffb1a0a3dc3e2280742", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -ffast-math -dp\" } */\n+\n+#define FN(X) __builtin_fmin##X\n+#include \"cond_fmaxnm_3.c\"\n+\n+/* { dg-final { scan-assembler-times {sminv64sf3} 3 } } */\n+/* { dg-final { scan-assembler-times {movv64sf_exec} 3 } } */\n+/* { dg-final { scan-assembler-times {sminv64sf3} 3 } } */\n+/* { dg-final { scan-assembler-times {movv64df_exec} 3 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tv_writelane_b32\\tv[0-9]+, vcc_..} } } */\n\\ No newline at end of file"}, {"sha": "8c994cae20291927a70d2fbee8059ea93ef90f72", "filename": "gcc/testsuite/gcc.target/gcn/cond_fminnm_3_run.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fminnm_3_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fminnm_3_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fminnm_3_run.c?ref=553ff2524f412be4e02e2ffb1a0a3dc3e2280742", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ftree-vectorize -ffast-math\" } */\n+\n+#define FN(X) __builtin_fmin##X\n+#include \"cond_fmaxnm_3_run.c\""}, {"sha": "3673ecafc2d136f129eddca54b1d7d17826731c6", "filename": "gcc/testsuite/gcc.target/gcn/cond_fminnm_4.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fminnm_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fminnm_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fminnm_4.c?ref=553ff2524f412be4e02e2ffb1a0a3dc3e2280742", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -ffast-math -dp\" } */\n+\n+#define FN(X) __builtin_fmin##X\n+#include \"cond_fmaxnm_4.c\"\n+\n+/* { dg-final { scan-assembler-times {sminv64sf3} 3 } } */\n+/* { dg-final { scan-assembler-times {movv64sf_exec} 3 } } */\n+/* { dg-final { scan-assembler-times {sminv64sf3} 3 } } */\n+/* { dg-final { scan-assembler-times {movv64df_exec} 3 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tv_writelane_b32\\tv[0-9]+, vcc_..} } } */\n\\ No newline at end of file"}, {"sha": "728f4136015e7124fe8cae2d7778d242275665d8", "filename": "gcc/testsuite/gcc.target/gcn/cond_fminnm_4_run.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fminnm_4_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fminnm_4_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fminnm_4_run.c?ref=553ff2524f412be4e02e2ffb1a0a3dc3e2280742", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ftree-vectorize -ffast-math\" } */\n+\n+#define FN(X) __builtin_fmin##X\n+#include \"cond_fmaxnm_4_run.c\""}, {"sha": "ac98941a3735bbf5326cd2c0524145ca1c53d804", "filename": "gcc/testsuite/gcc.target/gcn/cond_fminnm_5.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fminnm_5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fminnm_5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fminnm_5.c?ref=553ff2524f412be4e02e2ffb1a0a3dc3e2280742", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -dp\" } */\n+\n+#define FN(X) __builtin_fmin##X\n+#include \"cond_fmaxnm_1.c\"\n+\n+/* { dg-final { scan-assembler-times {sminv64sf3_exec} 3 } } */\n+/* { dg-final { scan-assembler-times {sminv64df3_exec} 3 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tv_writelane_b32\\tv[0-9]+, vcc_..} } } */\n\\ No newline at end of file"}, {"sha": "9236ab5b211b0afb1295482be5053589cdaa64f6", "filename": "gcc/testsuite/gcc.target/gcn/cond_fminnm_5_run.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fminnm_5_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fminnm_5_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fminnm_5_run.c?ref=553ff2524f412be4e02e2ffb1a0a3dc3e2280742", "patch": "@@ -0,0 +1,4 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_fminnm_1_run.c\""}, {"sha": "7f4dba0d314bde04ed12b8919bc5c5457855c53b", "filename": "gcc/testsuite/gcc.target/gcn/cond_fminnm_6.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fminnm_6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fminnm_6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fminnm_6.c?ref=553ff2524f412be4e02e2ffb1a0a3dc3e2280742", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -dp\" } */\n+\n+#define FN(X) __builtin_fmin##X\n+#include \"cond_fmaxnm_2.c\"\n+\n+/* { dg-final { scan-assembler-times {sminv64sf3_exec} 3 } } */\n+/* { dg-final { scan-assembler-times {sminv64df3_exec} 3 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tv_writelane_b32\\tv[0-9]+, vcc_..} } } */\n\\ No newline at end of file"}, {"sha": "a5f90d9e76af0ec482287e1495563bdc294d7968", "filename": "gcc/testsuite/gcc.target/gcn/cond_fminnm_6_run.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fminnm_6_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fminnm_6_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fminnm_6_run.c?ref=553ff2524f412be4e02e2ffb1a0a3dc3e2280742", "patch": "@@ -0,0 +1,4 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_fminnm_2_run.c\""}, {"sha": "5faf0c5cc59ea970870c28c8704afa4b9dfbbd5a", "filename": "gcc/testsuite/gcc.target/gcn/cond_fminnm_7.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fminnm_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fminnm_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fminnm_7.c?ref=553ff2524f412be4e02e2ffb1a0a3dc3e2280742", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -dp\" } */\n+\n+#define FN(X) __builtin_fmin##X\n+#include \"cond_fmaxnm_3.c\"\n+\n+/* { dg-final { scan-assembler-times {sminv64sf3_exec} 3 } } */\n+/* { dg-final { scan-assembler-times {sminv64df3_exec} 3 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tv_writelane_b32\\tv[0-9]+, vcc_..} } } */\n\\ No newline at end of file"}, {"sha": "d7ad738db5ceb4c2fdb3b5752945c2b70c4809c9", "filename": "gcc/testsuite/gcc.target/gcn/cond_fminnm_7_run.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fminnm_7_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fminnm_7_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fminnm_7_run.c?ref=553ff2524f412be4e02e2ffb1a0a3dc3e2280742", "patch": "@@ -0,0 +1,4 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_fminnm_3_run.c\""}, {"sha": "89d93ac596ab79a29e1df17859a0f90f17275f22", "filename": "gcc/testsuite/gcc.target/gcn/cond_fminnm_8.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fminnm_8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fminnm_8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fminnm_8.c?ref=553ff2524f412be4e02e2ffb1a0a3dc3e2280742", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -dp\" } */\n+\n+#define FN(X) __builtin_fmin##X\n+#include \"cond_fmaxnm_4.c\"\n+\n+/* { dg-final { scan-assembler-times {sminv64sf3_exec} 3 } } */\n+/* { dg-final { scan-assembler-times {sminv64df3_exec} 3 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tv_writelane_b32\\tv[0-9]+, vcc_..} } } */\n\\ No newline at end of file"}, {"sha": "3d92353ac5542bbd89f26ae0fb411af17d13d459", "filename": "gcc/testsuite/gcc.target/gcn/cond_fminnm_8_run.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fminnm_8_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fminnm_8_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_fminnm_8_run.c?ref=553ff2524f412be4e02e2ffb1a0a3dc3e2280742", "patch": "@@ -0,0 +1,4 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_fminnm_4_run.c\""}, {"sha": "342b5e827d2ed9f53424690b19eb7c0cc9cb2d4a", "filename": "gcc/testsuite/gcc.target/gcn/cond_smax_1.c", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_smax_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_smax_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_smax_1.c?ref=553ff2524f412be4e02e2ffb1a0a3dc3e2280742", "patch": "@@ -0,0 +1,57 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -dp\" } */\n+\n+#include <stdint.h>\n+\n+#define DO_REGREG_OPS(TYPE)                                                    \\\n+  void __attribute__ ((noclone))                                               \\\n+  varith_##TYPE##_reg (TYPE *__restrict x, TYPE *__restrict y,                 \\\n+\t\t       TYPE *__restrict pred, int count)                       \\\n+  {                                                                            \\\n+    for (int i = 0; i < count; ++i)                                            \\\n+      x[i] = (pred[i] != -1) ? (x[i] > y[i] ? x[i] : y[i]) : -4;               \\\n+  }\n+\n+#define DO_IMMEDIATE_OPS(VALUE, TYPE, NAME)                                    \\\n+  void __attribute__ ((noclone))                                               \\\n+  varithimm_##NAME##_##TYPE (TYPE *__restrict x, TYPE *__restrict pred,        \\\n+\t\t\t     int count)                                        \\\n+  {                                                                            \\\n+    for (int i = 0; i < count; ++i)                                            \\\n+      x[i]                                                                     \\\n+\t= (pred[i] != -1) ? (x[i] > (TYPE) VALUE ? x[i] : (TYPE) VALUE) : -4;  \\\n+  }\n+\n+#define DO_ARITH_OPS(REG, IMM, TYPE)                                           \\\n+  REG (TYPE);                                                                  \\\n+  IMM (0, TYPE, 0);                                                            \\\n+  IMM (86, TYPE, 86);                                                          \\\n+  IMM (109, TYPE, 109);                                                        \\\n+  IMM (141, TYPE, 141);                                                        \\\n+  IMM (92137445376, TYPE, 92137445376);                                        \\\n+  IMM (-1, TYPE, minus1);                                                      \\\n+  IMM (-110, TYPE, minus110);                                                  \\\n+  IMM (-141, TYPE, minus141);                                                  \\\n+  IMM (-92137445376, TYPE, minus92137445376);\n+\n+#define TEST_ALL(REG, IMM)                                                     \\\n+  DO_ARITH_OPS (REG, IMM, int8_t)                                              \\\n+  DO_ARITH_OPS (REG, IMM, int16_t)                                             \\\n+  DO_ARITH_OPS (REG, IMM, int32_t)                                             \\\n+  DO_ARITH_OPS (REG, IMM, int64_t)\n+\n+TEST_ALL (DO_REGREG_OPS, DO_IMMEDIATE_OPS)\n+\n+/* One per test case < 64 bits */\n+/* { dg-final { scan-assembler-times {smaxv64si3_exec} 30 } } */\n+/* { dg-final { scan-assembler-not {smaxv64si3/0} } } */\n+/* { dg-final { scan-assembler-not {\\tv_writelane_b32\\tv[0-9]+, vcc_??, 0} } } */\n+\n+/* Two per test case: */\n+/* { dg-final { scan-assembler-times {\\tv_cmp_gt_i32\\tvcc, s[0-9]+, v[0-9]+} 80 } } */\n+/* { dg-final { scan-assembler-not {\\tv_cmpx_gt_i32\\tvcc, s[0-9]+, v[0-9]+} } } */\n+/* { dg-final { scan-assembler-not {\\ts_cmpk_lg_u32\\tvcc_lo, 0} } } */\n+\n+/* One per 64-bit test case: */\n+/* { dg-final { scan-assembler-times {\\tv_cmp_ne_u64\\ts\\[[0-9]+:[0-9]+\\], v\\[[0-9]+:[0-9]+\\], -1} 10 } } */\n+/* { dg-final { scan-assembler-times {\\tv_cmp_gt_i64\\tvcc, v[[0-9]+:[0-9]+], v[[0-9]+:[0-9]+]} 10 } } */"}, {"sha": "c951e6145791086aafc0fb9d3b6ac49f6ea793d7", "filename": "gcc/testsuite/gcc.target/gcn/cond_smax_1_run.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_smax_1_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_smax_1_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_smax_1_run.c?ref=553ff2524f412be4e02e2ffb1a0a3dc3e2280742", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_smax_1.c\"\n+\n+#define N 99\n+\n+#define TEST_REGREG_OPS(TYPE)                                                  \\\n+  {                                                                            \\\n+    TYPE x[N], y[N];                                                           \\\n+    TYPE pred[N];                                                              \\\n+    for (int i = 0; i < N; ++i)                                                \\\n+      {                                                                        \\\n+\tx[i] = i % 13;                                                         \\\n+\ty[i] = i * i;                                                          \\\n+\tpred[i] = i % 3;                                                       \\\n+      }                                                                        \\\n+    varith_##TYPE##_reg (x, y, pred, N);                                       \\\n+    for (int i = 0; i < N; ++i)                                                \\\n+      {                                                                        \\\n+\tTYPE expected = i % 3 != -1 ? (x[i] > y[i] ? x[i] : y[i]) : -4;        \\\n+\tif (x[i] != expected)                                                  \\\n+\t  __builtin_abort ();                                                  \\\n+\tasm volatile (\"\" ::: \"memory\");                                        \\\n+      }                                                                        \\\n+  }\n+\n+#define TEST_IMMEDIATE_OPS(VALUE, TYPE, NAME)                                  \\\n+  {                                                                            \\\n+    TYPE x[N], y[N];                                                           \\\n+    TYPE pred[N];                                                              \\\n+    for (int i = 0; i < N; ++i)                                                \\\n+      {                                                                        \\\n+\tx[i] = i * i;                                                          \\\n+\tpred[i] = i % 3;                                                       \\\n+      }                                                                        \\\n+    varithimm_##NAME##_##TYPE (x, pred, N);                                    \\\n+    for (int i = 0; i < N; ++i)                                                \\\n+      {                                                                        \\\n+\tTYPE expected                                                          \\\n+\t  = i % 3 != -1 ? (x[i] > (TYPE) VALUE ? x[i] : (TYPE) VALUE) : -4;    \\\n+\tif (x[i] != expected)                                                  \\\n+\t  __builtin_abort ();                                                  \\\n+\tasm volatile (\"\" ::: \"memory\");                                        \\\n+      }                                                                        \\\n+  }\n+\n+int\n+main (void)\n+{\n+  TEST_ALL (TEST_REGREG_OPS, TEST_IMMEDIATE_OPS)\n+  return 0;\n+}\n\\ No newline at end of file"}, {"sha": "ad8b583448b07dd10e9c3fc85a6f7a82a4a8e5bb", "filename": "gcc/testsuite/gcc.target/gcn/cond_smin_1.c", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_smin_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_smin_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_smin_1.c?ref=553ff2524f412be4e02e2ffb1a0a3dc3e2280742", "patch": "@@ -0,0 +1,57 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -dp\" } */\n+\n+#include <stdint.h>\n+\n+#define DO_REGREG_OPS(TYPE)                                                    \\\n+  void __attribute__ ((noclone))                                               \\\n+  varith_##TYPE##_reg (TYPE *__restrict x, TYPE *__restrict y,                 \\\n+\t\t       TYPE *__restrict pred, int count)                       \\\n+  {                                                                            \\\n+    for (int i = 0; i < count; ++i)                                            \\\n+      x[i] = (pred[i] != -1) ? (x[i] < y[i] ? x[i] : y[i]) : -4;               \\\n+  }\n+\n+#define DO_IMMEDIATE_OPS(VALUE, TYPE, NAME)                                    \\\n+  void __attribute__ ((noclone))                                               \\\n+  varithimm_##NAME##_##TYPE (TYPE *__restrict x, TYPE *__restrict pred,        \\\n+\t\t\t     int count)                                        \\\n+  {                                                                            \\\n+    for (int i = 0; i < count; ++i)                                            \\\n+      x[i]                                                                     \\\n+\t= (pred[i] != -1) ? (x[i] < (TYPE) VALUE ? x[i] : (TYPE) VALUE) : -4;  \\\n+  }\n+\n+#define DO_ARITH_OPS(REG, IMM, TYPE)                                           \\\n+  REG (TYPE);                                                                  \\\n+  IMM (0, TYPE, 0);                                                            \\\n+  IMM (86, TYPE, 86);                                                          \\\n+  IMM (109, TYPE, 109);                                                        \\\n+  IMM (141, TYPE, 141);                                                        \\\n+  IMM (92137445376, TYPE, 92137445376);                                        \\\n+  IMM (-1, TYPE, minus1);                                                      \\\n+  IMM (-110, TYPE, minus110);                                                  \\\n+  IMM (-141, TYPE, minus141);                                                  \\\n+  IMM (-92137445376, TYPE, minus92137445376);\n+\n+#define TEST_ALL(REG, IMM)                                                     \\\n+  DO_ARITH_OPS (REG, IMM, int8_t)                                              \\\n+  DO_ARITH_OPS (REG, IMM, int16_t)                                             \\\n+  DO_ARITH_OPS (REG, IMM, int32_t)                                             \\\n+  DO_ARITH_OPS (REG, IMM, int64_t)\n+\n+TEST_ALL (DO_REGREG_OPS, DO_IMMEDIATE_OPS)\n+\n+/* One per test case < 64 bits */\n+/* { dg-final { scan-assembler-times {sminv64si3_exec} 30 } } */\n+/* { dg-final { scan-assembler-not {sminv64si3/0} } } */\n+/* { dg-final { scan-assembler-not {\\tv_writelane_b32\\tv[0-9]+, vcc_??, 0} } } */\n+\n+/* Two per test case: */\n+/* { dg-final { scan-assembler-times {\\tv_cmp_gt_i32\\tvcc, s[0-9]+, v[0-9]+} 80 } } */\n+/* { dg-final { scan-assembler-not {\\tv_cmpx_gt_i32\\tvcc, s[0-9]+, v[0-9]+} } } */\n+/* { dg-final { scan-assembler-not {\\ts_cmpk_lg_u32\\tvcc_lo, 0} } } */\n+\n+/* One per 64-bit test case: */\n+/* { dg-final { scan-assembler-times {\\tv_cmp_ne_u64\\ts\\[[0-9]+:[0-9]+\\], v\\[[0-9]+:[0-9]+\\], -1} 10 } } */\n+/* { dg-final { scan-assembler-times {\\tv_cmp_lt_i64\\tvcc, v[[0-9]+:[0-9]+], v[[0-9]+:[0-9]+]} 10 } } */"}, {"sha": "bfdb7d1b9e89bd4405c943386903831c53f1afd4", "filename": "gcc/testsuite/gcc.target/gcn/cond_smin_1_run.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_smin_1_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_smin_1_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_smin_1_run.c?ref=553ff2524f412be4e02e2ffb1a0a3dc3e2280742", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_smin_1.c\"\n+\n+#define N 99\n+\n+#define TEST_REGREG_OPS(TYPE)                                                  \\\n+  {                                                                            \\\n+    TYPE x[N], y[N];                                                           \\\n+    TYPE pred[N];                                                              \\\n+    for (int i = 0; i < N; ++i)                                                \\\n+      {                                                                        \\\n+\tx[i] = i % 13;                                                         \\\n+\ty[i] = i * i;                                                          \\\n+\tpred[i] = i % 3;                                                       \\\n+      }                                                                        \\\n+    varith_##TYPE##_reg (x, y, pred, N);                                       \\\n+    for (int i = 0; i < N; ++i)                                                \\\n+      {                                                                        \\\n+\tTYPE expected = i % 3 != -1 ? (x[i] < y[i] ? x[i] : y[i]) : -4;        \\\n+\tif (x[i] != expected)                                                  \\\n+\t  __builtin_abort ();                                                  \\\n+\tasm volatile (\"\" ::: \"memory\");                                        \\\n+      }                                                                        \\\n+  }\n+\n+#define TEST_IMMEDIATE_OPS(VALUE, TYPE, NAME)                                  \\\n+  {                                                                            \\\n+    TYPE x[N], y[N];                                                           \\\n+    TYPE pred[N];                                                              \\\n+    for (int i = 0; i < N; ++i)                                                \\\n+      {                                                                        \\\n+\tx[i] = i * i;                                                          \\\n+\tpred[i] = i % 3;                                                       \\\n+      }                                                                        \\\n+    varithimm_##NAME##_##TYPE (x, pred, N);                                    \\\n+    for (int i = 0; i < N; ++i)                                                \\\n+      {                                                                        \\\n+\tTYPE expected                                                          \\\n+\t  = i % 3 != -1 ? (x[i] < (TYPE) VALUE ? x[i] : (TYPE) VALUE) : -4;    \\\n+\tif (x[i] != expected)                                                  \\\n+\t  __builtin_abort ();                                                  \\\n+\tasm volatile (\"\" ::: \"memory\");                                        \\\n+      }                                                                        \\\n+  }\n+\n+int\n+main (void)\n+{\n+  TEST_ALL (TEST_REGREG_OPS, TEST_IMMEDIATE_OPS)\n+  return 0;\n+}\n\\ No newline at end of file"}, {"sha": "389228f9e4afac616475706b133c0fde6a7a4de7", "filename": "gcc/testsuite/gcc.target/gcn/cond_umax_1.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_umax_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_umax_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_umax_1.c?ref=553ff2524f412be4e02e2ffb1a0a3dc3e2280742", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -dp\" } */\n+\n+#include <stdint.h>\n+\n+#define DO_REGREG_OPS(TYPE)                                                    \\\n+  void __attribute__ ((noclone))                                               \\\n+  varith_##TYPE##_reg (TYPE *__restrict x, TYPE *__restrict y,                 \\\n+\t\t       TYPE *__restrict pred, int count)                       \\\n+  {                                                                            \\\n+    for (int i = 0; i < count; ++i)                                            \\\n+      x[i] = (pred[i] != 1) ? (x[i] > y[i] ? x[i] : y[i]) : 4;                 \\\n+  }\n+\n+#define DO_IMMEDIATE_OPS(VALUE, TYPE)                                          \\\n+  void __attribute__ ((noclone))                                               \\\n+  varithimm_##VALUE##_##TYPE (TYPE *__restrict x, TYPE *__restrict pred,       \\\n+\t\t\t      int count)                                       \\\n+  {                                                                            \\\n+    for (int i = 0; i < count; ++i)                                            \\\n+      x[i] = (pred[i] != 1) ? (x[i] > (TYPE) VALUE ? x[i] : (TYPE) VALUE) : 4; \\\n+  }\n+\n+#define DO_ARITH_OPS(REG, IMM, TYPE)                                           \\\n+  REG (TYPE);                                                                  \\\n+  IMM (2, TYPE);                                                               \\\n+  IMM (86, TYPE);                                                              \\\n+  IMM (109, TYPE);                                                             \\\n+  IMM (141, TYPE);                                                             \\\n+  IMM (229, TYPE);                                                             \\\n+  IMM (255, TYPE);                                                             \\\n+  IMM (992137445376, TYPE);\n+\n+#define TEST_ALL(REG, IMM)                                                     \\\n+  DO_ARITH_OPS (REG, IMM, uint8_t)                                             \\\n+  DO_ARITH_OPS (REG, IMM, uint16_t)                                            \\\n+  DO_ARITH_OPS (REG, IMM, uint32_t)                                            \\\n+  DO_ARITH_OPS (REG, IMM, uint64_t)\n+\n+TEST_ALL (DO_REGREG_OPS, DO_IMMEDIATE_OPS)\n+\n+/* Two per test case < 64 bits with wide-enough type:*/\n+/* { dg-final { scan-assembler-times {umaxv64si3_exec} 20 } } */\n+/* { dg-final { scan-assembler-not {umaxv64si3/0} } } */\n+/* { dg-final { scan-assembler-not {\\tv_writelane_b32\\tv[0-9]+, vcc_??, 0} } } */\n+\n+/* Two per test case with wide-enough type:*/\n+/* { dg-final { scan-assembler-times {\\tv_cmp_gt_i32\\tvcc, s[0-9]+, v[0-9]+} 56 } } */\n+/* { dg-final { scan-assembler-not {\\ts_cmpk_lg_u32\\tvcc_lo, 0} } } */\n+\n+/* One per 64-bit test case: */\n+/* { dg-final { scan-assembler-times {\\tv_cmp_ne_u64\\ts\\[[0-9]+:[0-9]+\\], v\\[[0-9]+:[0-9]+\\], 1} 8 } } */\n+/* { dg-final { scan-assembler-times {\\tv_cmp_gt_u64\\tvcc, v[[0-9]+:[0-9]+], v[[0-9]+:[0-9]+]} 8 } } */\n+"}, {"sha": "2396c2452d714fc687e54b2df60cffd6ba4fa464", "filename": "gcc/testsuite/gcc.target/gcn/cond_umax_1_run.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_umax_1_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_umax_1_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_umax_1_run.c?ref=553ff2524f412be4e02e2ffb1a0a3dc3e2280742", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_umax_1.c\"\n+\n+#define N 99\n+\n+#define TEST_REGREG_OPS(TYPE)                                                  \\\n+  {                                                                            \\\n+    TYPE x[N], y[N];                                                           \\\n+    TYPE pred[N];                                                              \\\n+    for (int i = 0; i < N; ++i)                                                \\\n+      {                                                                        \\\n+\tx[i] = i % 13;                                                         \\\n+\ty[i] = i * i;                                                          \\\n+\tpred[i] = i % 3;                                                       \\\n+      }                                                                        \\\n+    varith_##TYPE##_reg (x, y, pred, N);                                       \\\n+    for (int i = 0; i < N; ++i)                                                \\\n+      {                                                                        \\\n+\tTYPE expected = i % 3 != 1 ? (x[i] > y[i] ? x[i] : y[i]) : 4;          \\\n+\tif (x[i] != expected)                                                  \\\n+\t  __builtin_abort ();                                                  \\\n+\tasm volatile (\"\" ::: \"memory\");                                        \\\n+      }                                                                        \\\n+  }\n+\n+#define TEST_IMMEDIATE_OPS(VALUE, TYPE)                                        \\\n+  {                                                                            \\\n+    TYPE x[N], y[N];                                                           \\\n+    TYPE pred[N];                                                              \\\n+    for (int i = 0; i < N; ++i)                                                \\\n+      {                                                                        \\\n+\tx[i] = i * i;                                                          \\\n+\tpred[i] = i % 3;                                                       \\\n+      }                                                                        \\\n+    varithimm_##VALUE##_##TYPE (x, pred, N);                                   \\\n+    for (int i = 0; i < N; ++i)                                                \\\n+      {                                                                        \\\n+\tTYPE expected                                                          \\\n+\t  = i % 3 != 1 ? (x[i] > (TYPE) VALUE ? x[i] : (TYPE) VALUE) : 4;      \\\n+\tif (x[i] != expected)                                                  \\\n+\t  __builtin_abort ();                                                  \\\n+\tasm volatile (\"\" ::: \"memory\");                                        \\\n+      }                                                                        \\\n+  }\n+\n+int\n+main (void)\n+{\n+  TEST_ALL (TEST_REGREG_OPS, TEST_IMMEDIATE_OPS)\n+  return 0;\n+}\n\\ No newline at end of file"}, {"sha": "65759d695ad8bfd79601bc6583d272461d75dd5a", "filename": "gcc/testsuite/gcc.target/gcn/cond_umin_1.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_umin_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_umin_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_umin_1.c?ref=553ff2524f412be4e02e2ffb1a0a3dc3e2280742", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -dp\" } */\n+\n+#include <stdint.h>\n+\n+#define DO_REGREG_OPS(TYPE)                                                    \\\n+  void __attribute__ ((noclone))                                               \\\n+  varith_##TYPE##_reg (TYPE *__restrict x, TYPE *__restrict y,                 \\\n+\t\t       TYPE *__restrict pred, int count)                       \\\n+  {                                                                            \\\n+    for (int i = 0; i < count; ++i)                                            \\\n+      x[i] = (pred[i] != 1) ? (x[i] < y[i] ? x[i] : y[i]) : 4;                 \\\n+  }\n+\n+#define DO_IMMEDIATE_OPS(VALUE, TYPE)                                          \\\n+  void __attribute__ ((noclone))                                               \\\n+  varithimm_##VALUE##_##TYPE (TYPE *__restrict x, TYPE *__restrict pred,       \\\n+\t\t\t      int count)                                       \\\n+  {                                                                            \\\n+    for (int i = 0; i < count; ++i)                                            \\\n+      x[i] = (pred[i] != 1) ? (x[i] < (TYPE) VALUE ? x[i] : (TYPE) VALUE) : 4; \\\n+  }\n+\n+#define DO_ARITH_OPS(REG, IMM, TYPE)                                           \\\n+  REG (TYPE);                                                                  \\\n+  IMM (2, TYPE);                                                               \\\n+  IMM (86, TYPE);                                                              \\\n+  IMM (109, TYPE);                                                             \\\n+  IMM (141, TYPE);                                                             \\\n+  IMM (229, TYPE);                                                             \\\n+  IMM (255, TYPE);                                                             \\\n+  IMM (992137445376, TYPE);\n+\n+#define TEST_ALL(REG, IMM)                                                     \\\n+  DO_ARITH_OPS (REG, IMM, uint8_t)                                             \\\n+  DO_ARITH_OPS (REG, IMM, uint16_t)                                            \\\n+  DO_ARITH_OPS (REG, IMM, uint32_t)                                            \\\n+  DO_ARITH_OPS (REG, IMM, uint64_t)\n+\n+TEST_ALL (DO_REGREG_OPS, DO_IMMEDIATE_OPS)\n+\n+/* Two per test case < 64 bits with wide-enough type:*/\n+/* { dg-final { scan-assembler-times {uminv64si3_exec} 20 } } */\n+/* { dg-final { scan-assembler-not {uminv64si3/0} } } */\n+/* { dg-final { scan-assembler-not {\\tv_writelane_b32\\tv[0-9]+, vcc_??, 0} } } */\n+\n+/* Two per test case with wide-enough type:*/\n+/* { dg-final { scan-assembler-times {\\tv_cmp_gt_i32\\tvcc, s[0-9]+, v[0-9]+} 56 } } */\n+/* { dg-final { scan-assembler-not {\\ts_cmpk_lg_u32\\tvcc_lo, 0} } } */\n+\n+/* One per 64-bit test case: */\n+/* { dg-final { scan-assembler-times {\\tv_cmp_ne_u64\\ts\\[[0-9]+:[0-9]+\\], v\\[[0-9]+:[0-9]+\\], 1} 8 } } */\n+/* { dg-final { scan-assembler-times {\\tv_cmp_lt_u64\\tvcc, v[[0-9]+:[0-9]+], v[[0-9]+:[0-9]+]} 8 } } */"}, {"sha": "ef6f03948eaf98677c04bb24e36a49f63fe05816", "filename": "gcc/testsuite/gcc.target/gcn/cond_umin_1_run.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_umin_1_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_umin_1_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_umin_1_run.c?ref=553ff2524f412be4e02e2ffb1a0a3dc3e2280742", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_umin_1.c\"\n+\n+#define N 99\n+\n+#define TEST_REGREG_OPS(TYPE)                                                  \\\n+  {                                                                            \\\n+    TYPE x[N], y[N];                                                           \\\n+    TYPE pred[N];                                                              \\\n+    for (int i = 0; i < N; ++i)                                                \\\n+      {                                                                        \\\n+\tx[i] = i % 13;                                                         \\\n+\ty[i] = i * i;                                                          \\\n+\tpred[i] = i % 3;                                                       \\\n+      }                                                                        \\\n+    varith_##TYPE##_reg (x, y, pred, N);                                       \\\n+    for (int i = 0; i < N; ++i)                                                \\\n+      {                                                                        \\\n+\tTYPE expected = i % 3 != 1 ? (x[i] < y[i] ? x[i] : y[i]) : 4;          \\\n+\tif (x[i] != expected)                                                  \\\n+\t  __builtin_abort ();                                                  \\\n+\tasm volatile (\"\" ::: \"memory\");                                        \\\n+      }                                                                        \\\n+  }\n+\n+#define TEST_IMMEDIATE_OPS(VALUE, TYPE)                                        \\\n+  {                                                                            \\\n+    TYPE x[N], y[N];                                                           \\\n+    TYPE pred[N];                                                              \\\n+    for (int i = 0; i < N; ++i)                                                \\\n+      {                                                                        \\\n+\tx[i] = i * i;                                                          \\\n+\tpred[i] = i % 3;                                                       \\\n+      }                                                                        \\\n+    varithimm_##VALUE##_##TYPE (x, pred, N);                                   \\\n+    for (int i = 0; i < N; ++i)                                                \\\n+      {                                                                        \\\n+\tTYPE expected                                                          \\\n+\t  = i % 3 != 1 ? (x[i] < (TYPE) VALUE ? x[i] : (TYPE) VALUE) : 4;      \\\n+\tif (x[i] != expected)                                                  \\\n+\t  __builtin_abort ();                                                  \\\n+\tasm volatile (\"\" ::: \"memory\");                                        \\\n+      }                                                                        \\\n+  }\n+\n+int\n+main (void)\n+{\n+  TEST_ALL (TEST_REGREG_OPS, TEST_IMMEDIATE_OPS)\n+  return 0;\n+}\n\\ No newline at end of file"}, {"sha": "46c21f73132955cc504e67a1575b392d55f1b6c3", "filename": "gcc/testsuite/gcc.target/gcn/smax_1.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fsmax_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fsmax_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fsmax_1.c?ref=553ff2524f412be4e02e2ffb1a0a3dc3e2280742", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -dp\" } */\n+\n+#include <stdint.h>\n+\n+#define DO_REGREG_OPS(TYPE)                                                    \\\n+  void __attribute__ ((noclone))                                               \\\n+  varith_##TYPE##_reg (TYPE *__restrict x, TYPE *__restrict y, int count)      \\\n+  {                                                                            \\\n+    for (int i = 0; i < count; ++i)                                            \\\n+      x[i] = x[i] > y[i] ? x[i] : y[i];                                        \\\n+  }\n+\n+#define DO_IMMEDIATE_OPS(VALUE, TYPE, NAME)                                    \\\n+  void __attribute__ ((noclone))                                               \\\n+  varithimm_##NAME##_##TYPE (TYPE *__restrict x, int count)                    \\\n+  {                                                                            \\\n+    for (int i = 0; i < count; ++i)                                            \\\n+      x[i] = x[i] > (TYPE) VALUE ? x[i] : (TYPE) VALUE;                        \\\n+  }\n+\n+#define DO_ARITH_OPS(REG, IMM, TYPE)                                           \\\n+  REG (TYPE);                                                                  \\\n+  IMM (0, TYPE, 0);                                                            \\\n+  IMM (86, TYPE, 86);                                                          \\\n+  IMM (109, TYPE, 109);                                                        \\\n+  IMM (141, TYPE, 141);                                                        \\\n+  IMM (92137445376, TYPE, 92137445376);                                        \\\n+  IMM (-1, TYPE, minus1);                                                      \\\n+  IMM (-110, TYPE, minus110);                                                  \\\n+  IMM (-141, TYPE, minus141);                                                  \\\n+  IMM (-92137445376, TYPE, minus92137445376);\n+\n+#define TEST_ALL(REG, IMM)                                                     \\\n+  DO_ARITH_OPS (REG, IMM, int8_t)                                              \\\n+  DO_ARITH_OPS (REG, IMM, int16_t)                                             \\\n+  DO_ARITH_OPS (REG, IMM, int32_t)                                             \\\n+  DO_ARITH_OPS (REG, IMM, int64_t)\n+\n+TEST_ALL (DO_REGREG_OPS, DO_IMMEDIATE_OPS)\n+\n+/* One per 64-bit test case: */\n+/* { dg-final { scan-assembler-times {vec_cmpv64didi} 10 } } */\n+\n+/* Two per test case: */\n+/* { dg-final { scan-assembler-times {\\tv_cmp_gt_i64\\tvcc, v[[0-9]+:[0-9]+], v[[0-9]+:[0-9]+]} 10 } } */\n+/* { dg-final { scan-assembler-times {\\tv_cmpx_gt_i32\\tvcc, s[0-9]+, v[0-9]+} 80 } } */\n\\ No newline at end of file"}, {"sha": "4f9759162297aee998693d6bcb13382ff129c907", "filename": "gcc/testsuite/gcc.target/gcn/smax_1_run.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fsmax_1_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fsmax_1_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fsmax_1_run.c?ref=553ff2524f412be4e02e2ffb1a0a3dc3e2280742", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"smax_1.c\"\n+\n+#define N 99\n+\n+#define TEST_REGREG_OPS(TYPE)                                                  \\\n+  {                                                                            \\\n+    TYPE x[N], y[N];                                                           \\\n+    for (int i = 0; i < N; ++i)                                                \\\n+      {                                                                        \\\n+\tx[i] = i % 13;                                                         \\\n+\ty[i] = i * i;                                                          \\\n+      }                                                                        \\\n+    varith_##TYPE##_reg (x, y, N);                                             \\\n+    for (int i = 0; i < N; ++i)                                                \\\n+      {                                                                        \\\n+\tTYPE expected = x[i] > y[i] ? x[i] : y[i];                             \\\n+\tif (x[i] != expected)                                                  \\\n+\t  __builtin_abort ();                                                  \\\n+\tasm volatile (\"\" ::: \"memory\");                                        \\\n+      }                                                                        \\\n+  }\n+\n+#define TEST_IMMEDIATE_OPS(VALUE, TYPE, NAME)                                  \\\n+  {                                                                            \\\n+    TYPE x[N], y[N];                                                           \\\n+    for (int i = 0; i < N; ++i)                                                \\\n+      {                                                                        \\\n+\tx[i] = i * i;                                                          \\\n+      }                                                                        \\\n+    varithimm_##NAME##_##TYPE (x, N);                                          \\\n+    for (int i = 0; i < N; ++i)                                                \\\n+      {                                                                        \\\n+\tTYPE expected = x[i] > (TYPE) VALUE ? x[i] : (TYPE) VALUE;             \\\n+\tif (x[i] != expected)                                                  \\\n+\t  __builtin_abort ();                                                  \\\n+\tasm volatile (\"\" ::: \"memory\");                                        \\\n+      }                                                                        \\\n+  }\n+\n+int\n+main (void)\n+{\n+  TEST_ALL (TEST_REGREG_OPS, TEST_IMMEDIATE_OPS)\n+  return 0;\n+}\n\\ No newline at end of file"}, {"sha": "8d6edfaa3d1484423647f446b43aad80f27c10af", "filename": "gcc/testsuite/gcc.target/gcn/smin_1.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fsmin_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fsmin_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fsmin_1.c?ref=553ff2524f412be4e02e2ffb1a0a3dc3e2280742", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -dp\" } */\n+\n+#include <stdint.h>\n+\n+#define DO_REGREG_OPS(TYPE)                                                    \\\n+  void __attribute__ ((noclone))                                               \\\n+  varith_##TYPE##_reg (TYPE *__restrict x, TYPE *__restrict y, int count)      \\\n+  {                                                                            \\\n+    for (int i = 0; i < count; ++i)                                            \\\n+      x[i] = x[i] < y[i] ? x[i] : y[i];                                        \\\n+  }\n+\n+#define DO_IMMEDIATE_OPS(VALUE, TYPE, NAME)                                    \\\n+  void __attribute__ ((noclone))                                               \\\n+  varithimm_##NAME##_##TYPE (TYPE *__restrict x, int count)                    \\\n+  {                                                                            \\\n+    for (int i = 0; i < count; ++i)                                            \\\n+      x[i] = x[i] < (TYPE) VALUE ? x[i] : (TYPE) VALUE;                        \\\n+  }\n+\n+#define DO_ARITH_OPS(REG, IMM, TYPE)                                           \\\n+  REG (TYPE);                                                                  \\\n+  IMM (0, TYPE, 0);                                                            \\\n+  IMM (86, TYPE, 86);                                                          \\\n+  IMM (109, TYPE, 109);                                                        \\\n+  IMM (141, TYPE, 141);                                                        \\\n+  IMM (92137445376, TYPE, 92137445376);                                        \\\n+  IMM (-1, TYPE, minus1);                                                      \\\n+  IMM (-110, TYPE, minus110);                                                  \\\n+  IMM (-141, TYPE, minus141);                                                  \\\n+  IMM (-92137445376, TYPE, minus92137445376);\n+\n+#define TEST_ALL(REG, IMM)                                                     \\\n+  DO_ARITH_OPS (REG, IMM, int8_t)                                              \\\n+  DO_ARITH_OPS (REG, IMM, int16_t)                                             \\\n+  DO_ARITH_OPS (REG, IMM, int32_t)                                             \\\n+  DO_ARITH_OPS (REG, IMM, int64_t)\n+\n+TEST_ALL (DO_REGREG_OPS, DO_IMMEDIATE_OPS)\n+\n+/* One per 64-bit test case: */\n+/* { dg-final { scan-assembler-times {vec_cmpv64didi} 10 } } */\n+/* { dg-final { scan-assembler-times {\\tv_cmp_lt_i64\\tvcc, v[[0-9]+:[0-9]+], v[[0-9]+:[0-9]+]} 10 } } */\n+\n+/* Two per test case:*/\n+/* { dg-final { scan-assembler-times {\\tv_cmpx_gt_i32\\tvcc, s[0-9]+, v[0-9]+} 80 } } */\n\\ No newline at end of file"}, {"sha": "6758d571fe2eab68c6dbd9ef54233163dc50e113", "filename": "gcc/testsuite/gcc.target/gcn/smin_1_run.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fsmin_1_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fsmin_1_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fsmin_1_run.c?ref=553ff2524f412be4e02e2ffb1a0a3dc3e2280742", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"smin_1.c\"\n+\n+#define N 99\n+\n+#define TEST_REGREG_OPS(TYPE)                                                  \\\n+  {                                                                            \\\n+    TYPE x[N], y[N];                                                           \\\n+    for (int i = 0; i < N; ++i)                                                \\\n+      {                                                                        \\\n+\tx[i] = i % 13;                                                         \\\n+\ty[i] = i * i;                                                          \\\n+      }                                                                        \\\n+    varith_##TYPE##_reg (x, y, N);                                             \\\n+    for (int i = 0; i < N; ++i)                                                \\\n+      {                                                                        \\\n+\tTYPE expected = x[i] < y[i] ? x[i] : y[i];                             \\\n+\tif (x[i] != expected)                                                  \\\n+\t  __builtin_abort ();                                                  \\\n+\tasm volatile (\"\" ::: \"memory\");                                        \\\n+      }                                                                        \\\n+  }\n+\n+#define TEST_IMMEDIATE_OPS(VALUE, TYPE, NAME)                                  \\\n+  {                                                                            \\\n+    TYPE x[N], y[N];                                                           \\\n+    for (int i = 0; i < N; ++i)                                                \\\n+      {                                                                        \\\n+\tx[i] = i * i;                                                          \\\n+      }                                                                        \\\n+    varithimm_##NAME##_##TYPE (x, N);                                          \\\n+    for (int i = 0; i < N; ++i)                                                \\\n+      {                                                                        \\\n+\tTYPE expected = x[i] < (TYPE) VALUE ? x[i] : (TYPE) VALUE;             \\\n+\tif (x[i] != expected)                                                  \\\n+\t  __builtin_abort ();                                                  \\\n+\tasm volatile (\"\" ::: \"memory\");                                        \\\n+      }                                                                        \\\n+  }\n+\n+int\n+main (void)\n+{\n+  TEST_ALL (TEST_REGREG_OPS, TEST_IMMEDIATE_OPS)\n+  return 0;\n+}\n\\ No newline at end of file"}, {"sha": "dc4b9842d9a8b3c2271c2da6e9e8b88b1365c16f", "filename": "gcc/testsuite/gcc.target/gcn/umax_1.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fumax_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fumax_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fumax_1.c?ref=553ff2524f412be4e02e2ffb1a0a3dc3e2280742", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -dp\" } */\n+\n+#include <stdint.h>\n+\n+#define DO_REGREG_OPS(TYPE)                                                    \\\n+  void __attribute__ ((noclone))                                               \\\n+  varith_##TYPE##_reg (TYPE *__restrict x, TYPE *__restrict y, int count)      \\\n+  {                                                                            \\\n+    for (int i = 0; i < count; ++i)                                            \\\n+      x[i] = x[i] > y[i] ? x[i] : y[i];                                        \\\n+  }\n+\n+#define DO_IMMEDIATE_OPS(VALUE, TYPE)                                          \\\n+  void __attribute__ ((noclone))                                               \\\n+  varithimm_##VALUE##_##TYPE (TYPE *__restrict x, int count)                   \\\n+  {                                                                            \\\n+    for (int i = 0; i < count; ++i)                                            \\\n+      x[i] = x[i] > (TYPE) VALUE ? x[i] : (TYPE) VALUE;                        \\\n+  }\n+\n+#define DO_ARITH_OPS(REG, IMM, TYPE)                                           \\\n+  REG (TYPE);                                                                  \\\n+  IMM (2, TYPE);                                                               \\\n+  IMM (86, TYPE);                                                              \\\n+  IMM (109, TYPE);                                                             \\\n+  IMM (141, TYPE);                                                             \\\n+  IMM (229, TYPE);                                                             \\\n+  IMM (255, TYPE);                                                             \\\n+  IMM (992137445376, TYPE);\n+\n+#define TEST_ALL(REG, IMM)                                                     \\\n+  DO_ARITH_OPS (REG, IMM, uint8_t)                                             \\\n+  DO_ARITH_OPS (REG, IMM, uint16_t)                                            \\\n+  DO_ARITH_OPS (REG, IMM, uint32_t)                                            \\\n+  DO_ARITH_OPS (REG, IMM, uint64_t)\n+\n+TEST_ALL (DO_REGREG_OPS, DO_IMMEDIATE_OPS)\n+\n+/* One per 64-bit test case: */\n+/* { dg-final { scan-assembler-times {vec_cmpv64didi} 8 } } */\n+\n+/* Two per test case with wide-enough type:*/\n+/* { dg-final { scan-assembler-times {\\tv_cmp_gt_u64\\tvcc, v[[0-9]+:[0-9]+], v[[0-9]+:[0-9]+]} 8 } } */\n+/* { dg-final { scan-assembler-times {\\tv_cmpx_gt_i32\\tvcc, s[0-9]+, v[0-9]+} 56 } } */"}, {"sha": "b8ff54044fd46ee41195cf1af4ec975c8ecb88e5", "filename": "gcc/testsuite/gcc.target/gcn/umax_1_run.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fumax_1_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fumax_1_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fumax_1_run.c?ref=553ff2524f412be4e02e2ffb1a0a3dc3e2280742", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"umax_1.c\"\n+\n+#define N 99\n+\n+#define TEST_REGREG_OPS(TYPE)                                                  \\\n+  {                                                                            \\\n+    TYPE x[N], y[N];                                                           \\\n+    for (int i = 0; i < N; ++i)                                                \\\n+      {                                                                        \\\n+\tx[i] = i % 13;                                                         \\\n+\ty[i] = i * i;                                                          \\\n+      }                                                                        \\\n+    varith_##TYPE##_reg (x, y, N);                                             \\\n+    for (int i = 0; i < N; ++i)                                                \\\n+      {                                                                        \\\n+\tTYPE expected = x[i] > y[i] ? x[i] : y[i];                             \\\n+\tif (x[i] != expected)                                                  \\\n+\t  __builtin_abort ();                                                  \\\n+\tasm volatile (\"\" ::: \"memory\");                                        \\\n+      }                                                                        \\\n+  }\n+\n+#define TEST_IMMEDIATE_OPS(VALUE, TYPE)                                        \\\n+  {                                                                            \\\n+    TYPE x[N], y[N];                                                           \\\n+    for (int i = 0; i < N; ++i)                                                \\\n+      {                                                                        \\\n+\tx[i] = i * i;                                                          \\\n+      }                                                                        \\\n+    varithimm_##VALUE##_##TYPE (x, N);                                         \\\n+    for (int i = 0; i < N; ++i)                                                \\\n+      {                                                                        \\\n+\tTYPE expected = x[i] > (TYPE) VALUE ? x[i] : (TYPE) VALUE;             \\\n+\tif (x[i] != expected)                                                  \\\n+\t  __builtin_abort ();                                                  \\\n+\tasm volatile (\"\" ::: \"memory\");                                        \\\n+      }                                                                        \\\n+  }\n+\n+int\n+main (void)\n+{\n+  TEST_ALL (TEST_REGREG_OPS, TEST_IMMEDIATE_OPS)\n+  return 0;\n+}\n\\ No newline at end of file"}, {"sha": "d07f7ec083b8a674b620cdba4b6bbcdf58eeee07", "filename": "gcc/testsuite/gcc.target/gcn/umin_1.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fumin_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fumin_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fumin_1.c?ref=553ff2524f412be4e02e2ffb1a0a3dc3e2280742", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -dp\" } */\n+\n+#include <stdint.h>\n+\n+#define DO_REGREG_OPS(TYPE)                                                    \\\n+  void __attribute__ ((noclone))                                               \\\n+  varith_##TYPE##_reg (TYPE *__restrict x, TYPE *__restrict y, int count)      \\\n+  {                                                                            \\\n+    for (int i = 0; i < count; ++i)                                            \\\n+      x[i] = x[i] < y[i] ? x[i] : y[i];                                        \\\n+  }\n+\n+#define DO_IMMEDIATE_OPS(VALUE, TYPE)                                          \\\n+  void __attribute__ ((noclone))                                               \\\n+  varithimm_##VALUE##_##TYPE (TYPE *__restrict x, int count)                   \\\n+  {                                                                            \\\n+    for (int i = 0; i < count; ++i)                                            \\\n+      x[i] = x[i] < (TYPE) VALUE ? x[i] : (TYPE) VALUE;                        \\\n+  }\n+\n+#define DO_ARITH_OPS(REG, IMM, TYPE)                                           \\\n+  REG (TYPE);                                                                  \\\n+  IMM (2, TYPE);                                                               \\\n+  IMM (86, TYPE);                                                              \\\n+  IMM (109, TYPE);                                                             \\\n+  IMM (141, TYPE);                                                             \\\n+  IMM (229, TYPE);                                                             \\\n+  IMM (255, TYPE);                                                             \\\n+  IMM (992137445376, TYPE);\n+\n+#define TEST_ALL(REG, IMM)                                                     \\\n+  DO_ARITH_OPS (REG, IMM, uint8_t)                                             \\\n+  DO_ARITH_OPS (REG, IMM, uint16_t)                                            \\\n+  DO_ARITH_OPS (REG, IMM, uint32_t)                                            \\\n+  DO_ARITH_OPS (REG, IMM, uint64_t)\n+\n+TEST_ALL (DO_REGREG_OPS, DO_IMMEDIATE_OPS)\n+\n+/* One per 64-bit test case: */\n+/* { dg-final { scan-assembler-times {vec_cmpv64didi} 8 } } */\n+/* { dg-final { scan-assembler-times {\\tv_cmp_lt_u64\\tvcc, v[[0-9]+:[0-9]+], v[[0-9]+:[0-9]+]} 8 } } */\n+\n+/* Two per test case with wide-enough type:*/\n+/* { dg-final { scan-assembler-times {\\tv_cmpx_gt_i32\\tvcc, s[0-9]+, v[0-9]+} 56 } } */"}, {"sha": "a15d7b3982ac9061287182160143c11f39dc0516", "filename": "gcc/testsuite/gcc.target/gcn/umin_1_run.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fumin_1_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/553ff2524f412be4e02e2ffb1a0a3dc3e2280742/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fumin_1_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fumin_1_run.c?ref=553ff2524f412be4e02e2ffb1a0a3dc3e2280742", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"umin_1.c\"\n+\n+#define N 99\n+\n+#define TEST_REGREG_OPS(TYPE)                                                  \\\n+  {                                                                            \\\n+    TYPE x[N], y[N];                                                           \\\n+    for (int i = 0; i < N; ++i)                                                \\\n+      {                                                                        \\\n+\tx[i] = i % 13;                                                         \\\n+\ty[i] = i * i;                                                          \\\n+      }                                                                        \\\n+    varith_##TYPE##_reg (x, y, N);                                             \\\n+    for (int i = 0; i < N; ++i)                                                \\\n+      {                                                                        \\\n+\tTYPE expected = x[i] < y[i] ? x[i] : y[i];                             \\\n+\tif (x[i] != expected)                                                  \\\n+\t  __builtin_abort ();                                                  \\\n+\tasm volatile (\"\" ::: \"memory\");                                        \\\n+      }                                                                        \\\n+  }\n+\n+#define TEST_IMMEDIATE_OPS(VALUE, TYPE)                                        \\\n+  {                                                                            \\\n+    TYPE x[N], y[N];                                                           \\\n+    for (int i = 0; i < N; ++i)                                                \\\n+      {                                                                        \\\n+\tx[i] = i * i;                                                          \\\n+      }                                                                        \\\n+    varithimm_##VALUE##_##TYPE (x, N);                                         \\\n+    for (int i = 0; i < N; ++i)                                                \\\n+      {                                                                        \\\n+\tTYPE expected = x[i] < (TYPE) VALUE ? x[i] : (TYPE) VALUE;             \\\n+\tif (x[i] != expected)                                                  \\\n+\t  __builtin_abort ();                                                  \\\n+\tasm volatile (\"\" ::: \"memory\");                                        \\\n+      }                                                                        \\\n+  }\n+\n+int\n+main (void)\n+{\n+  TEST_ALL (TEST_REGREG_OPS, TEST_IMMEDIATE_OPS)\n+  return 0;\n+}\n\\ No newline at end of file"}]}