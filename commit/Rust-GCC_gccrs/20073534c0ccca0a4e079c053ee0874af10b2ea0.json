{"sha": "20073534c0ccca0a4e079c053ee0874af10b2ea0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjAwNzM1MzRjMGNjY2EwYTRlMDc5YzA1M2VlMDg3NGFmMTBiMmVhMA==", "commit": {"author": {"name": "Peter Bergner", "email": "bergner@linux.ibm.com", "date": "2021-06-14T21:55:18Z"}, "committer": {"name": "Peter Bergner", "email": "bergner@linux.ibm.com", "date": "2021-06-14T21:55:18Z"}, "message": "rs6000: MMA builtin usage ICEs when used in a #pragma omp parallel and using -fopenmp [PR100777]\n\nUsing an MMA builtin within an openmp parallel code block, leads to an SSA\nverification ICE on the temporaries we create while expanding the MMA builtins\nat gimple time.  The solution is to use create_tmp_reg_or_ssa_name(), which\nknows when to create either an SSA or register temporary.\n\n2021-06-14  Peter Bergner  <bergner@linux.ibm.com>\n\ngcc/\n\tPR target/100777\n\t* config/rs6000/rs6000-call.c (rs6000_gimple_fold_mma_builtin): Use\n\tcreate_tmp_reg_or_ssa_name().\n\ngcc/testsuite/\n\tPR target/100777\n\t* gcc.target/powerpc/pr100777.c: New test.", "tree": {"sha": "1bf60a85e0c5c119b7b68d467d19b05d3bb3899d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1bf60a85e0c5c119b7b68d467d19b05d3bb3899d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/20073534c0ccca0a4e079c053ee0874af10b2ea0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20073534c0ccca0a4e079c053ee0874af10b2ea0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20073534c0ccca0a4e079c053ee0874af10b2ea0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20073534c0ccca0a4e079c053ee0874af10b2ea0/comments", "author": {"login": "peter-bergner", "id": 17504345, "node_id": "MDQ6VXNlcjE3NTA0MzQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17504345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peter-bergner", "html_url": "https://github.com/peter-bergner", "followers_url": "https://api.github.com/users/peter-bergner/followers", "following_url": "https://api.github.com/users/peter-bergner/following{/other_user}", "gists_url": "https://api.github.com/users/peter-bergner/gists{/gist_id}", "starred_url": "https://api.github.com/users/peter-bergner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peter-bergner/subscriptions", "organizations_url": "https://api.github.com/users/peter-bergner/orgs", "repos_url": "https://api.github.com/users/peter-bergner/repos", "events_url": "https://api.github.com/users/peter-bergner/events{/privacy}", "received_events_url": "https://api.github.com/users/peter-bergner/received_events", "type": "User", "site_admin": false}, "committer": {"login": "peter-bergner", "id": 17504345, "node_id": "MDQ6VXNlcjE3NTA0MzQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17504345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peter-bergner", "html_url": "https://github.com/peter-bergner", "followers_url": "https://api.github.com/users/peter-bergner/followers", "following_url": "https://api.github.com/users/peter-bergner/following{/other_user}", "gists_url": "https://api.github.com/users/peter-bergner/gists{/gist_id}", "starred_url": "https://api.github.com/users/peter-bergner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peter-bergner/subscriptions", "organizations_url": "https://api.github.com/users/peter-bergner/orgs", "repos_url": "https://api.github.com/users/peter-bergner/repos", "events_url": "https://api.github.com/users/peter-bergner/events{/privacy}", "received_events_url": "https://api.github.com/users/peter-bergner/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ecc5644fa3bc7f37eada2a3e9c627cd1918922e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecc5644fa3bc7f37eada2a3e9c627cd1918922e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ecc5644fa3bc7f37eada2a3e9c627cd1918922e0"}], "stats": {"total": 36, "additions": 30, "deletions": 6}, "files": [{"sha": "b67789845a549df27e991cfc50666b6e0f26077d", "filename": "gcc/config/rs6000/rs6000-call.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20073534c0ccca0a4e079c053ee0874af10b2ea0/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20073534c0ccca0a4e079c053ee0874af10b2ea0/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-call.c?ref=20073534c0ccca0a4e079c053ee0874af10b2ea0", "patch": "@@ -11863,7 +11863,7 @@ rs6000_gimple_fold_mma_builtin (gimple_stmt_iterator *gsi)\n       tree dst_ptr = gimple_call_arg (stmt, 0);\n       tree src_ptr = gimple_call_arg (stmt, 1);\n       tree src_type = TREE_TYPE (src_ptr);\n-      tree src = make_ssa_name (TREE_TYPE (src_type));\n+      tree src = create_tmp_reg_or_ssa_name (TREE_TYPE (src_type));\n       gimplify_assign (src, build_simple_mem_ref (src_ptr), &new_seq);\n \n       /* If we are not disassembling an accumulator/pair or our destination is\n@@ -11887,7 +11887,7 @@ rs6000_gimple_fold_mma_builtin (gimple_stmt_iterator *gsi)\n \t{\n \t  new_decl = rs6000_builtin_decls[MMA_BUILTIN_XXMFACC_INTERNAL];\n \t  new_call = gimple_build_call (new_decl, 1, src);\n-\t  src = make_ssa_name (vector_quad_type_node);\n+\t  src = create_tmp_reg_or_ssa_name (vector_quad_type_node);\n \t  gimple_call_set_lhs (new_call, src);\n \t  gimple_seq_add_stmt (&new_seq, new_call);\n \t}\n@@ -11902,7 +11902,7 @@ rs6000_gimple_fold_mma_builtin (gimple_stmt_iterator *gsi)\n \t  unsigned index = WORDS_BIG_ENDIAN ? i : nvec - 1 - i;\n \t  tree dst = build2 (MEM_REF, unsigned_V16QI_type_node, dst_base,\n \t\t\t     build_int_cst (dst_type, index * 16));\n-\t  tree dstssa = make_ssa_name (unsigned_V16QI_type_node);\n+\t  tree dstssa = create_tmp_reg_or_ssa_name (unsigned_V16QI_type_node);\n \t  new_call = gimple_build_call (new_decl, 2, src,\n \t\t\t\t\tbuild_int_cstu (uint16_type_node, i));\n \t  gimple_call_set_lhs (new_call, dstssa);\n@@ -11925,7 +11925,7 @@ rs6000_gimple_fold_mma_builtin (gimple_stmt_iterator *gsi)\n     {\n       /* This built-in has a pass-by-reference accumulator input, so load it\n \t into a temporary accumulator for use as a pass-by-value input.  */\n-      op[0] = make_ssa_name (vector_quad_type_node);\n+      op[0] = create_tmp_reg_or_ssa_name (vector_quad_type_node);\n       for (unsigned i = 1; i < nopnds; i++)\n \top[i] = gimple_call_arg (stmt, i);\n       gimplify_assign (op[0], build_simple_mem_ref (acc), &new_seq);\n@@ -11973,9 +11973,9 @@ rs6000_gimple_fold_mma_builtin (gimple_stmt_iterator *gsi)\n     }\n \n   if (fncode == VSX_BUILTIN_BUILD_PAIR || fncode == VSX_BUILTIN_ASSEMBLE_PAIR)\n-    lhs = make_ssa_name (vector_pair_type_node);\n+    lhs = create_tmp_reg_or_ssa_name (vector_pair_type_node);\n   else\n-    lhs = make_ssa_name (vector_quad_type_node);\n+    lhs = create_tmp_reg_or_ssa_name (vector_quad_type_node);\n   gimple_call_set_lhs (new_call, lhs);\n   gimple_seq_add_stmt (&new_seq, new_call);\n   gimplify_assign (build_simple_mem_ref (acc), lhs, &new_seq);"}, {"sha": "15742f67d8cb7d9e24a12a1418a5ac7e2ed503ad", "filename": "gcc/testsuite/gcc.target/powerpc/pr100777.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20073534c0ccca0a4e079c053ee0874af10b2ea0/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr100777.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20073534c0ccca0a4e079c053ee0874af10b2ea0/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr100777.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr100777.c?ref=20073534c0ccca0a4e079c053ee0874af10b2ea0", "patch": "@@ -0,0 +1,24 @@\n+/* PR target/100777 */\n+/* { dg-require-effective-target power10_ok } */\n+/* { dg-require-effective-target fopenmp } */\n+/* { dg-options \"-O1 -mdejagnu-cpu=power10 -fopenmp\" } */\n+\n+/* Verify we do not ICE on the following.  */\n+\n+void\n+foo (__vector_quad *dst)\n+{\n+#pragma omp parallel\n+  {\n+    __builtin_mma_xxsetaccz (dst);\n+  }\n+}\n+\n+void\n+bar (__vector_quad *dst, __vector_quad *src)\n+{\n+#pragma omp parallel\n+  {\n+    __builtin_mma_disassemble_acc (dst, src);\n+  }\n+}"}]}