{"sha": "24bfafbc9d95153f4ad59d6618eae963a83723a0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjRiZmFmYmM5ZDk1MTUzZjRhZDU5ZDY2MThlYWU5NjNhODM3MjNhMA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2007-03-27T00:30:32Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2007-03-27T00:30:32Z"}, "message": "re PR target/31361 (SSE2 generation bug with shifts)\n\n        PR target/31361\n        * config/i386/i386.c (IX86_BUILTIN_PSLLDQ128, IX86_BUILTIN_PSLLW128,\n        IX86_BUILTIN_PSLLD128, IX86_BUILTIN_PSLLQ128, IX86_BUILTIN_PSRAW128,\n        IX86_BUILTIN_PSRAD128, IX86_BUILTIN_PSRLW128, IX86_BUILTIN_PSRLD128,\n        IX86_BUILTIN_PSRLQ128): New.\n        (ix86_init_mmx_sse_builtins): Add them.\n        (ix86_expand_builtin): Expand them.\n        * config/i386/sse.md (ashr<mode>3, lshr<mode>3, ashl<mode>3): Make\n        operand 2 be TImode.\n        * config/i386/emmintrin.h (_mm_slli_epi64, _mm_srai_epi16,\n        _mm_srai_epi32, _mm_srli_epi16, _mm_srli_epi32,\n        _mm_srli_epi64): Mark __B const.\n        (_mm_srli_si128, _mm_srli_si128): Fix disabled inline versions.\n        (_mm_sll_epi16, _mm_sll_epi32, _mm_sll_epi64, _mm_sra_epi16,\n        _mm_sra_epi32, _mm_srl_epi16, _mm_srl_epi32, _mm_srl_epi64): Use \n        new two-vector shift builtins.\n\nFrom-SVN: r123250", "tree": {"sha": "6a311a473b6819715b29447bec1588f0b5b71df9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a311a473b6819715b29447bec1588f0b5b71df9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/24bfafbc9d95153f4ad59d6618eae963a83723a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24bfafbc9d95153f4ad59d6618eae963a83723a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24bfafbc9d95153f4ad59d6618eae963a83723a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24bfafbc9d95153f4ad59d6618eae963a83723a0/comments", "author": null, "committer": null, "parents": [{"sha": "df12b78f89bbeb779078c5817f62129f9a9e9db6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df12b78f89bbeb779078c5817f62129f9a9e9db6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df12b78f89bbeb779078c5817f62129f9a9e9db6"}], "stats": {"total": 177, "additions": 156, "deletions": 21}, "files": [{"sha": "bba25862459cea6b6e684204f6416b5e3b499d2d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24bfafbc9d95153f4ad59d6618eae963a83723a0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24bfafbc9d95153f4ad59d6618eae963a83723a0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=24bfafbc9d95153f4ad59d6618eae963a83723a0", "patch": "@@ -1,3 +1,22 @@\n+2007-03-26  Richard Henderson  <rth@redhat.com>\n+\n+        PR target/31361\n+        * config/i386/i386.c (IX86_BUILTIN_PSLLDQ128, IX86_BUILTIN_PSLLW128,\n+        IX86_BUILTIN_PSLLD128, IX86_BUILTIN_PSLLQ128, IX86_BUILTIN_PSRAW128,\n+        IX86_BUILTIN_PSRAD128, IX86_BUILTIN_PSRLW128, IX86_BUILTIN_PSRLD128,\n+        IX86_BUILTIN_PSRLQ128): New.\n+        (ix86_init_mmx_sse_builtins): Add them.\n+        (ix86_expand_builtin): Expand them.\n+        * config/i386/sse.md (ashr<mode>3, lshr<mode>3, ashl<mode>3): Make\n+        operand 2 be TImode.\n+        * config/i386/emmintrin.h (_mm_slli_epi64, _mm_srai_epi16,\n+        _mm_srai_epi32, _mm_srli_epi16, _mm_srli_epi32,\n+        _mm_srli_epi64): Mark __B const.\n+        (_mm_srli_si128, _mm_srli_si128): Fix disabled inline versions.\n+        (_mm_sll_epi16, _mm_sll_epi32, _mm_sll_epi64, _mm_sra_epi16,\n+        _mm_sra_epi32, _mm_srl_epi16, _mm_srl_epi32, _mm_srl_epi64): Use \n+        new two-vector shift builtins.\n+\n 2007-03-26  Ian Lance Taylor  <iant@google.com>\n \n \tPR tree-optimization/31345"}, {"sha": "a230a70e331f3e8176aa60793a1161351f8acb82", "filename": "gcc/config/i386/emmintrin.h", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24bfafbc9d95153f4ad59d6618eae963a83723a0/gcc%2Fconfig%2Fi386%2Femmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24bfafbc9d95153f4ad59d6618eae963a83723a0/gcc%2Fconfig%2Fi386%2Femmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Femmintrin.h?ref=24bfafbc9d95153f4ad59d6618eae963a83723a0", "patch": "@@ -1117,19 +1117,19 @@ _mm_slli_epi32 (__m128i __A, int __B)\n }\n \n static __inline __m128i __attribute__((__always_inline__))\n-_mm_slli_epi64 (__m128i __A, int __B)\n+_mm_slli_epi64 (__m128i __A, const int __B)\n {\n   return (__m128i)__builtin_ia32_psllqi128 ((__v2di)__A, __B);\n }\n \n static __inline __m128i __attribute__((__always_inline__))\n-_mm_srai_epi16 (__m128i __A, int __B)\n+_mm_srai_epi16 (__m128i __A, const int __B)\n {\n   return (__m128i)__builtin_ia32_psrawi128 ((__v8hi)__A, __B);\n }\n \n static __inline __m128i __attribute__((__always_inline__))\n-_mm_srai_epi32 (__m128i __A, int __B)\n+_mm_srai_epi32 (__m128i __A, const int __B)\n {\n   return (__m128i)__builtin_ia32_psradi128 ((__v4si)__A, __B);\n }\n@@ -1138,13 +1138,13 @@ _mm_srai_epi32 (__m128i __A, int __B)\n static __m128i __attribute__((__always_inline__))\n _mm_srli_si128 (__m128i __A, const int __B)\n {\n-  return ((__m128i)__builtin_ia32_psrldqi128 (__A, __B))\n+  return ((__m128i)__builtin_ia32_psrldqi128 (__A, __B * 8));\n }\n \n static __m128i __attribute__((__always_inline__))\n _mm_srli_si128 (__m128i __A, const int __B)\n {\n-  return ((__m128i)__builtin_ia32_pslldqi128 (__A, __B))\n+  return ((__m128i)__builtin_ia32_pslldqi128 (__A, __B * 8));\n }\n #else\n #define _mm_srli_si128(__A, __B) \\\n@@ -1154,69 +1154,69 @@ _mm_srli_si128 (__m128i __A, const int __B)\n #endif\n \n static __inline __m128i __attribute__((__always_inline__))\n-_mm_srli_epi16 (__m128i __A, int __B)\n+_mm_srli_epi16 (__m128i __A, const int __B)\n {\n   return (__m128i)__builtin_ia32_psrlwi128 ((__v8hi)__A, __B);\n }\n \n static __inline __m128i __attribute__((__always_inline__))\n-_mm_srli_epi32 (__m128i __A, int __B)\n+_mm_srli_epi32 (__m128i __A, const int __B)\n {\n   return (__m128i)__builtin_ia32_psrldi128 ((__v4si)__A, __B);\n }\n \n static __inline __m128i __attribute__((__always_inline__))\n-_mm_srli_epi64 (__m128i __A, int __B)\n+_mm_srli_epi64 (__m128i __A, const int __B)\n {\n   return (__m128i)__builtin_ia32_psrlqi128 ((__v2di)__A, __B);\n }\n \n static __inline __m128i __attribute__((__always_inline__))\n _mm_sll_epi16 (__m128i __A, __m128i __B)\n {\n-  return _mm_slli_epi16 (__A, _mm_cvtsi128_si32 (__B));\n+  return (__m128i)__builtin_ia32_psllw128((__v8hi)__A, (__v8hi)__B);\n }\n \n static __inline __m128i __attribute__((__always_inline__))\n _mm_sll_epi32 (__m128i __A, __m128i __B)\n {\n-  return _mm_slli_epi32 (__A, _mm_cvtsi128_si32 (__B));\n+  return (__m128i)__builtin_ia32_pslld128((__v4si)__A, (__v4si)__B);\n }\n \n static __inline __m128i __attribute__((__always_inline__))\n _mm_sll_epi64 (__m128i __A, __m128i __B)\n {\n-  return _mm_slli_epi64 (__A, _mm_cvtsi128_si32 (__B));\n+  return (__m128i)__builtin_ia32_psllq128((__v2di)__A, (__v2di)__B);\n }\n \n static __inline __m128i __attribute__((__always_inline__))\n _mm_sra_epi16 (__m128i __A, __m128i __B)\n {\n-  return _mm_srai_epi16 (__A, _mm_cvtsi128_si32 (__B));\n+  return (__m128i)__builtin_ia32_psraw128 ((__v8hi)__A, (__v8hi)__B);\n }\n \n static __inline __m128i __attribute__((__always_inline__))\n _mm_sra_epi32 (__m128i __A, __m128i __B)\n {\n-  return _mm_srai_epi32 (__A, _mm_cvtsi128_si32 (__B));\n+  return (__m128i)__builtin_ia32_psrad128 ((__v4si)__A, (__v4si)__B);\n }\n \n static __inline __m128i __attribute__((__always_inline__))\n _mm_srl_epi16 (__m128i __A, __m128i __B)\n {\n-  return _mm_srli_epi16 (__A, _mm_cvtsi128_si32 (__B));\n+  return (__m128i)__builtin_ia32_psrlw128 ((__v8hi)__A, (__v8hi)__B);\n }\n \n static __inline __m128i __attribute__((__always_inline__))\n _mm_srl_epi32 (__m128i __A, __m128i __B)\n {\n-  return _mm_srli_epi32 (__A, _mm_cvtsi128_si32 (__B));\n+  return (__m128i)__builtin_ia32_psrld128 ((__v4si)__A, (__v4si)__B);\n }\n \n static __inline __m128i __attribute__((__always_inline__))\n _mm_srl_epi64 (__m128i __A, __m128i __B)\n {\n-  return _mm_srli_epi64 (__A, _mm_cvtsi128_si32 (__B));\n+  return (__m128i)__builtin_ia32_psrlq128 ((__v2di)__A, (__v2di)__B);\n }\n \n static __inline __m128i __attribute__((__always_inline__))"}, {"sha": "c5e08dad800d8be410572bf4c43079fbb39c55f7", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 118, "deletions": 2, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24bfafbc9d95153f4ad59d6618eae963a83723a0/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24bfafbc9d95153f4ad59d6618eae963a83723a0/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=24bfafbc9d95153f4ad59d6618eae963a83723a0", "patch": "@@ -15937,6 +15937,16 @@ enum ix86_builtins\n   IX86_BUILTIN_PSRLDI128,\n   IX86_BUILTIN_PSRLQI128,\n \n+  IX86_BUILTIN_PSLLDQ128,\n+  IX86_BUILTIN_PSLLW128,\n+  IX86_BUILTIN_PSLLD128,\n+  IX86_BUILTIN_PSLLQ128,\n+  IX86_BUILTIN_PSRAW128,\n+  IX86_BUILTIN_PSRAD128,\n+  IX86_BUILTIN_PSRLW128,\n+  IX86_BUILTIN_PSRLD128,\n+  IX86_BUILTIN_PSRLQ128,\n+\n   IX86_BUILTIN_PUNPCKHBW128,\n   IX86_BUILTIN_PUNPCKHWD128,\n   IX86_BUILTIN_PUNPCKHDQ128,\n@@ -17055,14 +17065,22 @@ ix86_init_mmx_sse_builtins (void)\n   def_builtin (MASK_SSE2, \"__builtin_ia32_psllwi128\", v8hi_ftype_v8hi_int, IX86_BUILTIN_PSLLWI128);\n   def_builtin (MASK_SSE2, \"__builtin_ia32_pslldi128\", v4si_ftype_v4si_int, IX86_BUILTIN_PSLLDI128);\n   def_builtin (MASK_SSE2, \"__builtin_ia32_psllqi128\", v2di_ftype_v2di_int, IX86_BUILTIN_PSLLQI128);\n+  def_builtin (MASK_SSE2, \"__builtin_ia32_psllw128\", v8hi_ftype_v8hi_v8hi, IX86_BUILTIN_PSLLW128);\n+  def_builtin (MASK_SSE2, \"__builtin_ia32_pslld128\", v4si_ftype_v4si_v4si, IX86_BUILTIN_PSLLD128);\n+  def_builtin (MASK_SSE2, \"__builtin_ia32_psllq128\", v2di_ftype_v2di_v2di, IX86_BUILTIN_PSLLQ128);\n \n   def_builtin (MASK_SSE2, \"__builtin_ia32_psrldqi128\", v2di_ftype_v2di_int, IX86_BUILTIN_PSRLDQI128);\n   def_builtin (MASK_SSE2, \"__builtin_ia32_psrlwi128\", v8hi_ftype_v8hi_int, IX86_BUILTIN_PSRLWI128);\n   def_builtin (MASK_SSE2, \"__builtin_ia32_psrldi128\", v4si_ftype_v4si_int, IX86_BUILTIN_PSRLDI128);\n   def_builtin (MASK_SSE2, \"__builtin_ia32_psrlqi128\", v2di_ftype_v2di_int, IX86_BUILTIN_PSRLQI128);\n+  def_builtin (MASK_SSE2, \"__builtin_ia32_psrlw128\", v8hi_ftype_v8hi_v8hi, IX86_BUILTIN_PSRLW128);\n+  def_builtin (MASK_SSE2, \"__builtin_ia32_psrld128\", v4si_ftype_v4si_v4si, IX86_BUILTIN_PSRLD128);\n+  def_builtin (MASK_SSE2, \"__builtin_ia32_psrlq128\", v2di_ftype_v2di_v2di, IX86_BUILTIN_PSRLQ128);\n \n   def_builtin (MASK_SSE2, \"__builtin_ia32_psrawi128\", v8hi_ftype_v8hi_int, IX86_BUILTIN_PSRAWI128);\n   def_builtin (MASK_SSE2, \"__builtin_ia32_psradi128\", v4si_ftype_v4si_int, IX86_BUILTIN_PSRADI128);\n+  def_builtin (MASK_SSE2, \"__builtin_ia32_psraw128\", v8hi_ftype_v8hi_v8hi, IX86_BUILTIN_PSRAW128);\n+  def_builtin (MASK_SSE2, \"__builtin_ia32_psrad128\", v4si_ftype_v4si_v4si, IX86_BUILTIN_PSRAD128);\n \n   def_builtin (MASK_SSE2, \"__builtin_ia32_pmaddwd128\", v4si_ftype_v8hi_v8hi, IX86_BUILTIN_PMADDWD128);\n \n@@ -17784,9 +17802,106 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n       emit_insn (pat);\n       return target;\n \n+    case IX86_BUILTIN_PSLLWI128:\n+      icode = CODE_FOR_ashlv8hi3;\n+      goto do_pshifti;\n+    case IX86_BUILTIN_PSLLDI128:\n+      icode = CODE_FOR_ashlv4si3;\n+      goto do_pshifti;\n+    case IX86_BUILTIN_PSLLQI128:\n+      icode = CODE_FOR_ashlv2di3;\n+      goto do_pshifti;\n+    case IX86_BUILTIN_PSRAWI128:\n+      icode = CODE_FOR_ashrv8hi3;\n+      goto do_pshifti;\n+    case IX86_BUILTIN_PSRADI128:\n+      icode = CODE_FOR_ashrv4si3;\n+      goto do_pshifti;\n+    case IX86_BUILTIN_PSRLWI128:\n+      icode = CODE_FOR_lshrv8hi3;\n+      goto do_pshifti;\n+    case IX86_BUILTIN_PSRLDI128:\n+      icode = CODE_FOR_lshrv4si3;\n+      goto do_pshifti;\n+    case IX86_BUILTIN_PSRLQI128:\n+      icode = CODE_FOR_lshrv2di3;\n+      goto do_pshifti;\n+    do_pshifti:\n+      arg0 = CALL_EXPR_ARG (exp, 0);\n+      arg1 = CALL_EXPR_ARG (exp, 1);\n+      op0 = expand_normal (arg0);\n+      op1 = expand_normal (arg1);\n+\n+      if (!CONST_INT_P (op1))\n+\t{\n+\t  error (\"shift must be an immediate\");\n+\t  return const0_rtx;\n+\t}\n+      if (INTVAL (op1) < 0 || INTVAL (op1) > 255)\n+\top1 = GEN_INT (255);\n+\n+      tmode = insn_data[icode].operand[0].mode;\n+      mode1 = insn_data[icode].operand[1].mode;\n+      if (! (*insn_data[icode].operand[1].predicate) (op0, mode1))\n+\top0 = copy_to_reg (op0);\n+\n+      target = gen_reg_rtx (tmode);\n+      pat = GEN_FCN (icode) (target, op0, op1);\n+      if (!pat)\n+\treturn 0;\n+      emit_insn (pat);\n+      return target;\n+\n+    case IX86_BUILTIN_PSLLW128:\n+      icode = CODE_FOR_ashlv8hi3;\n+      goto do_pshift;\n+    case IX86_BUILTIN_PSLLD128:\n+      icode = CODE_FOR_ashlv4si3;\n+      goto do_pshift;\n+    case IX86_BUILTIN_PSLLQ128:\n+      icode = CODE_FOR_ashlv2di3;\n+      goto do_pshift;\n+    case IX86_BUILTIN_PSRAW128:\n+      icode = CODE_FOR_ashrv8hi3;\n+      goto do_pshift;\n+    case IX86_BUILTIN_PSRAD128:\n+      icode = CODE_FOR_ashrv4si3;\n+      goto do_pshift;\n+    case IX86_BUILTIN_PSRLW128:\n+      icode = CODE_FOR_lshrv8hi3;\n+      goto do_pshift;\n+    case IX86_BUILTIN_PSRLD128:\n+      icode = CODE_FOR_lshrv4si3;\n+      goto do_pshift;\n+    case IX86_BUILTIN_PSRLQ128:\n+      icode = CODE_FOR_lshrv2di3;\n+      goto do_pshift;\n+    do_pshift:\n+      arg0 = CALL_EXPR_ARG (exp, 0);\n+      arg1 = CALL_EXPR_ARG (exp, 1);\n+      op0 = expand_normal (arg0);\n+      op1 = expand_normal (arg1);\n+\n+      tmode = insn_data[icode].operand[0].mode;\n+      mode1 = insn_data[icode].operand[1].mode;\n+\n+      if (! (*insn_data[icode].operand[1].predicate) (op0, mode1))\n+\top0 = copy_to_reg (op0);\n+\n+      op1 = simplify_gen_subreg (TImode, op1, GET_MODE (op1), 0);\n+      if (! (*insn_data[icode].operand[2].predicate) (op1, TImode))\n+\top1 = copy_to_reg (op1);\n+\n+      target = gen_reg_rtx (tmode);\n+      pat = GEN_FCN (icode) (target, op0, op1);\n+      if (!pat)\n+\treturn 0;\n+      emit_insn (pat);\n+      return target;\n+\n     case IX86_BUILTIN_PSLLDQI128:\n     case IX86_BUILTIN_PSRLDQI128:\n-      icode = (  fcode == IX86_BUILTIN_PSLLDQI128 ? CODE_FOR_sse2_ashlti3\n+      icode = (fcode == IX86_BUILTIN_PSLLDQI128 ? CODE_FOR_sse2_ashlti3\n \t       : CODE_FOR_sse2_lshrti3);\n       arg0 = CALL_EXPR_ARG (exp, 0);\n       arg1 = CALL_EXPR_ARG (exp, 1);\n@@ -17807,7 +17922,8 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n \t  return const0_rtx;\n \t}\n       target = gen_reg_rtx (V2DImode);\n-      pat = GEN_FCN (icode) (simplify_gen_subreg (tmode, target, V2DImode, 0), op0, op1);\n+      pat = GEN_FCN (icode) (simplify_gen_subreg (tmode, target, V2DImode, 0),\n+\t\t\t     op0, op1);\n       if (! pat)\n \treturn 0;\n       emit_insn (pat);"}, {"sha": "3d00df8bd1e2d9e50aae0461b8e9c18b3462ec3f", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24bfafbc9d95153f4ad59d6618eae963a83723a0/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24bfafbc9d95153f4ad59d6618eae963a83723a0/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=24bfafbc9d95153f4ad59d6618eae963a83723a0", "patch": "@@ -3085,7 +3085,7 @@\n   [(set (match_operand:SSEMODE24 0 \"register_operand\" \"=x\")\n \t(ashiftrt:SSEMODE24\n \t  (match_operand:SSEMODE24 1 \"register_operand\" \"0\")\n-\t  (match_operand:SI 2 \"nonmemory_operand\" \"xi\")))]\n+\t  (match_operand:TI 2 \"nonmemory_operand\" \"xn\")))]\n   \"TARGET_SSE2\"\n   \"psra<ssevecsize>\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sseishft\")\n@@ -3095,7 +3095,7 @@\n   [(set (match_operand:SSEMODE248 0 \"register_operand\" \"=x\")\n \t(lshiftrt:SSEMODE248\n \t  (match_operand:SSEMODE248 1 \"register_operand\" \"0\")\n-\t  (match_operand:SI 2 \"nonmemory_operand\" \"xi\")))]\n+\t  (match_operand:TI 2 \"nonmemory_operand\" \"xn\")))]\n   \"TARGET_SSE2\"\n   \"psrl<ssevecsize>\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sseishft\")\n@@ -3105,7 +3105,7 @@\n   [(set (match_operand:SSEMODE248 0 \"register_operand\" \"=x\")\n \t(ashift:SSEMODE248\n \t  (match_operand:SSEMODE248 1 \"register_operand\" \"0\")\n-\t  (match_operand:SI 2 \"nonmemory_operand\" \"xi\")))]\n+\t  (match_operand:TI 2 \"nonmemory_operand\" \"xn\")))]\n   \"TARGET_SSE2\"\n   \"psll<ssevecsize>\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sseishft\")"}]}