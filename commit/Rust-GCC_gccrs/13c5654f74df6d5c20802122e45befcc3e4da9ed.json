{"sha": "13c5654f74df6d5c20802122e45befcc3e4da9ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTNjNTY1NGY3NGRmNmQ1YzIwODAyMTIyZTQ1YmVmY2MzZTRkYTllZA==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2017-05-05T18:03:26Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2017-05-05T18:03:26Z"}, "message": "builtins.c (check_sizes, [...]): Fix typos introduced during merge\tconflict resolution.\n\ngcc/ChangeLog:\n\t* builtins.c (check_sizes, check_strncat_sizes): Fix typos\n\tintroduced during merge\tconflict resolution.\n\t(expand_builtin_strncat): Same.\n\ngcc/testsuite/ChangeLog:\n\t* gcc.dg/pr78138.c: Adjust text of expected diagnostics.\n\t* gcc.dg/pr79214.c: Same.\n\t* gcc.dg/pr79222.c: Same.\n\t* gcc.dg/pr79223.c: Same.\n\t* gcc.dg/tree-ssa/builtins-folding-gimple-ub.c: Expect warnings.\n\nFrom-SVN: r247652", "tree": {"sha": "990df7a91cbd9392335ab72a333c471f8f2600e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/990df7a91cbd9392335ab72a333c471f8f2600e3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/13c5654f74df6d5c20802122e45befcc3e4da9ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13c5654f74df6d5c20802122e45befcc3e4da9ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13c5654f74df6d5c20802122e45befcc3e4da9ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13c5654f74df6d5c20802122e45befcc3e4da9ed/comments", "author": null, "committer": null, "parents": [{"sha": "2d66253dd8845276b8c91eb1624b52ebcf6c554b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d66253dd8845276b8c91eb1624b52ebcf6c554b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d66253dd8845276b8c91eb1624b52ebcf6c554b"}], "stats": {"total": 73, "additions": 40, "deletions": 33}, "files": [{"sha": "936fcee46171efc225f83db7f08a61931779ee80", "filename": "gcc/builtins.c", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13c5654f74df6d5c20802122e45befcc3e4da9ed/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13c5654f74df6d5c20802122e45befcc3e4da9ed/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=13c5654f74df6d5c20802122e45befcc3e4da9ed", "patch": "@@ -3147,12 +3147,12 @@ check_sizes (int opt, tree exp, tree size, tree maxlen, tree src, tree objsize)\n \n       if (range[0] == range[1])\n \twarning_at (loc, opt,\n-\t\t    \"%K%qD: specified size %E \"\n+\t\t    \"%K%qD specified size %E \"\n \t\t    \"exceeds maximum object size %E\",\n \t\t    exp, get_callee_fndecl (exp), range[0], maxobjsize);\n \t  else\n \t    warning_at (loc, opt,\n-\t\t\t\"%K%qD: specified size between %E and %E \"\n+\t\t\t\"%K%qD specified size between %E and %E \"\n \t\t\t\"exceeds maximum object size %E\",\n \t\t\texp, get_callee_fndecl (exp),\n \t\t\trange[0], range[1], maxobjsize);\n@@ -3178,14 +3178,14 @@ check_sizes (int opt, tree exp, tree size, tree maxlen, tree src, tree objsize)\n \t\t and a source of unknown length.  The call will write\n \t\t at least one byte past the end of the destination.  */\n \t      warning_at (loc, opt,\n-\t\t\t  \"%K%qD: writing %E or more bytes into a region \"\n+\t\t\t  \"%K%qD writing %E or more bytes into a region \"\n \t\t\t  \"of size %E overflows the destination\",\n \t\t\t  exp, get_callee_fndecl (exp), range[0], objsize);\n \t    }\n \t  else if (tree_int_cst_equal (range[0], range[1]))\n \t    warning_at (loc, opt,\n \t\t\t(integer_onep (range[0])\n-\t\t\t ? G_(\"%K%qD: writing %E byte into a region \"\n+\t\t\t ? G_(\"%K%qD writing %E byte into a region \"\n \t\t\t      \"of size %E overflows the destination\")\n \t\t\t : G_(\"%K%qD writing %E bytes into a region \"\n \t\t\t      \"of size %E overflows the destination\")),\n@@ -3194,13 +3194,13 @@ check_sizes (int opt, tree exp, tree size, tree maxlen, tree src, tree objsize)\n \t    {\n \t      /* Avoid printing the upper bound if it's invalid.  */\n \t      warning_at (loc, opt,\n-\t\t\t  \"%K%qD: writing %E or more bytes into a region \"\n+\t\t\t  \"%K%qD writing %E or more bytes into a region \"\n \t\t\t  \"of size %E overflows the destination\",\n \t\t\t  exp, get_callee_fndecl (exp), range[0], objsize);\n \t    }\n \t  else\n \t    warning_at (loc, opt,\n-\t\t\t\"%K%qD: writing between %E and %E bytes into \"\n+\t\t\t\"%K%qD writing between %E and %E bytes into \"\n \t\t\t\"a region of size %E overflows the destination\",\n \t\t\texp, get_callee_fndecl (exp), range[0],\trange[1],\n \t\t\tobjsize);\n@@ -3229,13 +3229,13 @@ check_sizes (int opt, tree exp, tree size, tree maxlen, tree src, tree objsize)\n \t\t is greater than the object size if both are big.  */\n \t      if (range[0] == range[1])\n \t\twarning_at (loc, opt,\n-\t\t\t    \"%K%qD: specified bound %E \"\n+\t\t\t    \"%K%qD specified bound %E \"\n \t\t\t    \"exceeds maximum object size %E\",\n \t\t\t    exp, get_callee_fndecl (exp),\n \t\t\t    range[0], maxobjsize);\n \t      else\n \t\twarning_at (loc, opt,\n-\t\t\t    \"%K%qD: specified bound between %E and %E \"\n+\t\t\t    \"%K%qD specified bound between %E and %E \"\n \t\t\t    \"exceeds maximum object size %E\",\n \t\t\t    exp, get_callee_fndecl (exp),\n \t\t\t    range[0], range[1], maxobjsize);\n@@ -3247,13 +3247,13 @@ check_sizes (int opt, tree exp, tree size, tree maxlen, tree src, tree objsize)\n \t    {\n \t      if (tree_int_cst_equal (range[0], range[1]))\n \t\twarning_at (loc, opt,\n-\t\t\t    \"%K%qD: specified bound %E \"\n+\t\t\t    \"%K%qD specified bound %E \"\n \t\t\t    \"exceeds destination size %E\",\n \t\t\t    exp, get_callee_fndecl (exp),\n \t\t\t    range[0], objsize);\n \t      else\n \t\twarning_at (loc, opt,\n-\t\t\t    \"%K%qD: specified bound between %E and %E \"\n+\t\t\t    \"%K%qD specified bound between %E and %E \"\n \t\t\t    \"exceeds destination size %E\",\n \t\t\t    exp, get_callee_fndecl (exp),\n \t\t\t    range[0], range[1], objsize);\n@@ -3272,20 +3272,20 @@ check_sizes (int opt, tree exp, tree size, tree maxlen, tree src, tree objsize)\n       if (tree_int_cst_equal (range[0], range[1]))\n \twarning_at (loc, opt,\n \t\t    (tree_int_cst_equal (range[0], integer_one_node)\n-\t\t     ? G_(\"%K%qD: reading %E byte from a region of size %E\")\n+\t\t     ? G_(\"%K%qD reading %E byte from a region of size %E\")\n \t\t     : G_(\"%K%qD reading %E bytes from a region of size %E\")),\n \t\t    exp, get_callee_fndecl (exp), range[0], slen);\n       else if (tree_int_cst_sign_bit (range[1]))\n \t{\n \t  /* Avoid printing the upper bound if it's invalid.  */\n \t  warning_at (loc, opt,\n-\t\t      \"%K%qD: reading %E or more bytes from a region \"\n+\t\t      \"%K%qD reading %E or more bytes from a region \"\n \t\t      \"of size %E\",\n \t\t      exp, get_callee_fndecl (exp), range[0], slen);\n \t}\n       else\n \twarning_at (loc, opt,\n-\t\t    \"%K%qD: reading between %E and %E bytes from a region \"\n+\t\t    \"%K%qD reading between %E and %E bytes from a region \"\n \t\t    \"of size %E\",\n \t\t    exp, get_callee_fndecl (exp), range[0], range[1], slen);\n       return false;\n@@ -3876,7 +3876,7 @@ check_strncat_sizes (tree exp, tree objsize)\n       loc = expansion_point_location_if_in_system_header (loc);\n \n       warning_at (loc, OPT_Wstringop_overflow_,\n-\t\t  \"%K%qD: specified bound %E equals destination size\",\n+\t\t  \"%K%qD specified bound %E equals destination size\",\n \t\t  exp, get_callee_fndecl (exp), maxlen);\n \n       return false;\n@@ -3942,7 +3942,7 @@ expand_builtin_strncat (tree exp, rtx)\n       loc = expansion_point_location_if_in_system_header (loc);\n \n       warning_at (loc, OPT_Wstringop_overflow_,\n-\t\t  \"%K%qD: specified bound %E equals destination size\",\n+\t\t  \"%K%qD specified bound %E equals destination size\",\n \t\t  exp, get_callee_fndecl (exp), maxlen);\n \n       return NULL_RTX;"}, {"sha": "cda2fb8a6d005787693d855428274c041b00000f", "filename": "gcc/testsuite/gcc.dg/pr78138.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13c5654f74df6d5c20802122e45befcc3e4da9ed/gcc%2Ftestsuite%2Fgcc.dg%2Fpr78138.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13c5654f74df6d5c20802122e45befcc3e4da9ed/gcc%2Ftestsuite%2Fgcc.dg%2Fpr78138.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr78138.c?ref=13c5654f74df6d5c20802122e45befcc3e4da9ed", "patch": "@@ -12,7 +12,7 @@ extern char* strcpy (char*, const char*);\n \n void f (int i, int j)\n {\n-  strcpy (d, j ? \"12345\" : \"123456\");   /* { dg-warning \".strcpy.: writing between 6 and 7 bytes into a region of size 5 \" } */\n+  strcpy (d, j ? \"12345\" : \"123456\");   /* { dg-warning \".strcpy. writing between 6 and 7 bytes into a region of size 5 \" } */\n }\n \n void g (void *p)"}, {"sha": "79d2a2569569fa4145a5b26f2b007de09e7b965f", "filename": "gcc/testsuite/gcc.dg/pr79214.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13c5654f74df6d5c20802122e45befcc3e4da9ed/gcc%2Ftestsuite%2Fgcc.dg%2Fpr79214.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13c5654f74df6d5c20802122e45befcc3e4da9ed/gcc%2Ftestsuite%2Fgcc.dg%2Fpr79214.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr79214.c?ref=13c5654f74df6d5c20802122e45befcc3e4da9ed", "patch": "@@ -22,67 +22,67 @@ size_t range (void)\n \n void test_bzero (void)\n {\n-  bzero (d, range ());   /* { dg-warning \".__builtin_bzero. writing between 4 and \\[0-9\\]+ bytes into a region of size 3 overflows the destination\" } */\n+  bzero (d, range ());   /* { dg-warning \".__builtin_bzero. writing 4 or more bytes into a region of size 3 overflows the destination\" } */\n }\n \n void test_memcpy (void)\n {\n-  memcpy (d, s, range ());   /* { dg-warning \".__builtin_memcpy. writing between 4 and \\[0-9\\]+ bytes into a region of size 3 overflows the destination\" } */\n+  memcpy (d, s, range ());   /* { dg-warning \".__builtin_memcpy. writing 4 or more bytes into a region of size 3 overflows the destination\" } */\n }\n \n void test_memmove (void)\n {\n-  memmove (d, d + 1, range ());   /* { dg-warning \".__builtin_memmove. writing between 4 and \\[0-9\\]+ bytes into a region of size 3 overflows the destination\" } */\n+  memmove (d, d + 1, range ());   /* { dg-warning \".__builtin_memmove. writing 4 or more bytes into a region of size 3 overflows the destination\" } */\n }\n \n void test_mempcpy (void)\n {\n-  mempcpy (d, s, range ());   /* { dg-warning \".__builtin_mempcpy. writing between 4 and \\[0-9\\]+ bytes into a region of size 3 overflows the destination\" } */\n+  mempcpy (d, s, range ());   /* { dg-warning \".__builtin_mempcpy. writing 4 or more bytes into a region of size 3 overflows the destination\" } */\n }\n \n void test_memset (int n)\n {\n-  memset (d, n, range ());   /* { dg-warning \".__builtin_memset. writing between 4 and \\[0-9\\]+ bytes into a region of size 3 overflows the destination\" } */\n+  memset (d, n, range ());   /* { dg-warning \".__builtin_memset. writing 4 or more bytes into a region of size 3 overflows the destination\" } */\n }\n \n void test_strcat (int i)\n {\n   const char *s = i < 0 ? \"123\" : \"4567\";\n \n-  strcat (d, s);   /* { dg-warning \".__builtin_strcat. writing 4 bytes into a region of size 3 overflows the destination\" } */\n+  strcat (d, s);   /* { dg-warning \".__builtin_strcat. writing between 4 and 5 bytes into a region of size 3 overflows the destination\" } */\n }\n \n char* test_stpcpy (int i)\n {\n   const char *s = i < 0 ? \"123\" : \"4567\";\n \n-  return stpcpy (d, s);   /* { dg-warning \".__builtin_stpcpy. writing 4 bytes into a region of size 3 overflows the destination\" } */\n+  return stpcpy (d, s);   /* { dg-warning \".__builtin_stpcpy. writing between 4 and 5 bytes into a region of size 3 overflows the destination\" } */\n }\n \n char* test_stpncpy (int i)\n {\n   const char *s = i < 0 ? \"123\" : \"4567\";\n \n-  return stpncpy (d, s, range ());   /* { dg-warning \".__builtin_stpncpy. writing between 4 and \\[0-9\\]+ bytes into a region of size 3 overflows the destination\" } */\n+  return stpncpy (d, s, range ());   /* { dg-warning \".__builtin_stpncpy. writing 4 or more bytes into a region of size 3 overflows the destination\" } */\n }\n \n char* test_strcpy (int i)\n {\n   const char *s = i < 0 ? \"123\" : \"4567\";\n \n-  return strcpy (d, s);   /* { dg-warning \".__builtin_strcpy. writing 4 bytes into a region of size 3 overflows the destination\" } */\n+  return strcpy (d, s);   /* { dg-warning \".__builtin_strcpy. writing between 4 and 5 bytes into a region of size 3 overflows the destination\" } */\n }\n \n char* test_strncpy (int i)\n {\n   const char *s = i < 0 ? \"123\" : \"4567\";\n \n-  return strncpy (d, s, range ());   /* { dg-warning \".__builtin_strncpy. writing between 4 and \\[0-9\\]+ bytes into a region of size 3 overflows the destination\" } */\n+  return strncpy (d, s, range ());   /* { dg-warning \".__builtin_strncpy. writing 4 or more bytes into a region of size 3 overflows the destination\" } */\n }\n \n char* test_strncat (int i)\n {\n   const char *s = i < 0 ? \"123\" : \"4567\";\n \n-  return strncat (d, s, range ());   /* { dg-warning \".__builtin_strncat.: specified bound between 4 and \\[0-9\\]+\" } */\n+  return strncat (d, s, range ());   /* { dg-warning \".__builtin_strncat. specified bound between 4 and \\[0-9\\]+\" } */\n }"}, {"sha": "87e9fb68b7991888e683842b4232e6c2100a5ceb", "filename": "gcc/testsuite/gcc.dg/pr79222.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13c5654f74df6d5c20802122e45befcc3e4da9ed/gcc%2Ftestsuite%2Fgcc.dg%2Fpr79222.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13c5654f74df6d5c20802122e45befcc3e4da9ed/gcc%2Ftestsuite%2Fgcc.dg%2Fpr79222.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr79222.c?ref=13c5654f74df6d5c20802122e45befcc3e4da9ed", "patch": "@@ -9,5 +9,5 @@ char d[3];\n char* f (int i)\n {\n   const char *s = i < 0 ? \"01234567\" : \"9876543210\";\n-  return stpcpy (d, s);   /* { dg-warning \".stpcpy. writing 9 bytes into a region of size 3 overflows the destination\" } */\n+  return stpcpy (d, s);   /* { dg-warning \".stpcpy. writing between 9 and 11 bytes into a region of size 3 overflows the destination\" } */\n }"}, {"sha": "295d5c1502ea515113c5b8d789bc4adfd3893fb5", "filename": "gcc/testsuite/gcc.dg/pr79223.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13c5654f74df6d5c20802122e45befcc3e4da9ed/gcc%2Ftestsuite%2Fgcc.dg%2Fpr79223.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13c5654f74df6d5c20802122e45befcc3e4da9ed/gcc%2Ftestsuite%2Fgcc.dg%2Fpr79223.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr79223.c?ref=13c5654f74df6d5c20802122e45befcc3e4da9ed", "patch": "@@ -23,15 +23,15 @@ size_t range (void)\n \n void test_memcpy (void)\n {\n-  memcpy (d, s, range ());   /* { dg-warning \".memcpy. writing between 4 and \\[0-9\\]+ bytes into a region of size 3 overflows the destination\" } */\n+  memcpy (d, s, range ());   /* { dg-warning \".memcpy. writing 4 or more bytes into a region of size 3 overflows the destination\" } */\n }\n \n void test_mempcpy (void)\n {\n-  mempcpy (d, s, range ());   /* { dg-warning \".mempcpy. writing between 4 and \\[0-9\\]+ bytes into a region of size 3 overflows the destination\" } */\n+  mempcpy (d, s, range ());   /* { dg-warning \".mempcpy. writing 4 or more bytes into a region of size 3 overflows the destination\" } */\n }\n \n void test_memmove (void)\n {\n-  memmove (d + 1, d, range ());   /* { dg-warning \".memmove. writing between 4 and \\[0-9\\]+ bytes into a region of size 2 overflows the destination\" } */\n+  memmove (d + 1, d, range ());   /* { dg-warning \".memmove. writing 4 or more bytes into a region of size 2 overflows the destination\" } */\n }"}, {"sha": "a313998afc205ea7b0e9c33dcd04626c3e549eba", "filename": "gcc/testsuite/gcc.dg/tree-ssa/builtins-folding-gimple-ub.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13c5654f74df6d5c20802122e45befcc3e4da9ed/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltins-folding-gimple-ub.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13c5654f74df6d5c20802122e45befcc3e4da9ed/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltins-folding-gimple-ub.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltins-folding-gimple-ub.c?ref=13c5654f74df6d5c20802122e45befcc3e4da9ed", "patch": "@@ -13,9 +13,16 @@ main (void)\n \n   /* MEMCHR.  */\n   if (__builtin_memchr (\"\", 'x', 1000)) /* Not folded away.  */\n-    __builtin_abort ();\n+    {\n+      /* { dg-warning \"reading 1000 bytes from a region of size 1\" \"\" { target *-*-* } .-2 } */\n+      __builtin_abort ();\n+    }\n+\n   if (__builtin_memchr (foo1, 'x', 1000)) /* Not folded away.  */\n-    __builtin_abort ();\n+    {\n+      /* { dg-warning \"reading 1000 bytes from a region of size 1\" \"\" { target *-*-* } .-2 } */\n+      __builtin_abort ();\n+    }\n \n   /* STRNCMP.  */\n   if (strncmp (\"a\", \"b\", -1)) /* { dg-warning \"implicit declaration of function\" } */"}]}