{"sha": "604e3ff316fdb7298f3a54912fb6adc2268765f8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjA0ZTNmZjMxNmZkYjcyOThmM2E1NDkxMmZiNmFkYzIyNjg3NjVmOA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2010-11-25T01:16:20Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2010-11-25T01:16:20Z"}, "message": "predicates.md (pmpyshr_operand): New.\n\n        * config/ia64/predicates.md (pmpyshr_operand): New.\n        * config/ia64/ia64.c (ia64_expand_unpack): New.\n        (ia64_expand_widen_mul_v4hi): New.\n        (ia64_expand_widen_sum): Update for pattern renames.\n        (ia64_expand_dot_prod_v8qi): Likewise.\n        * config/ia64/ia64-protos.h: Update.\n        * config/ia64/vect.md (vecwider): New mode attribute.\n        (vec_widen_umult_lo_v8qi, vec_widen_umult_hi_v8qi): New.\n        (vec_widen_smult_lo_v8qi, vec_widen_smult_hi_v8qi): New.\n        (pmpyshr2, pmpyshr2_u): New.\n        (vec_widen_smult_lo_v4hi, vec_widen_smult_hi_v4hi): New.\n        (vec_widen_umult_lo_v4hi, vec_widen_umult_hi_v4hi): New.\n        (mulv2si3): New.\n        (vec_pack_ssat_v4hi): Rename from pack2_sss.\n        (vec_pack_usat_v4hi): Rename from *pack2_uss.\n        (vec_pack_ssat_v2si): Rename from pack4_sss.\n        (vec_interleave_lowv8qi): Rename from unpack1_l, use the correct\n        vec_select operation.\n        (vec_interleave_highv8qi): Similarly.\n        (mux1_alt): Rename from *mux1_alt.\n        (vec_extract_evenv8qi, vec_extract_oddv8qi): New.\n        (vec_interleave_lowv4hi): Rename from unpack2_l.\n        (vec_interleave_highv4hi): Rename from unpack2_h.\n        (mix2_r): Rename from *mix2_r.\n        (mix2_l): Similarly.\n        (vec_extract_evenodd_helper): New.\n        (vec_extract_evenv4hi, vec_extract_oddv4hi): New.\n        (vec_interleave_lowv2si): Rename from *unpack4_l.\n        (vec_interleave_highv2si): Rename from *unpack4_h.\n        (vec_extract_evenv2si, vec_extract_oddv2si): New.\n        (vec_interleave_lowv2sf): Rename from fmix_r.\n        (vec_interleave_highv2sf): Rename from *fmix_l.\n        (vec_extract_evenv2sf, vec_extract_oddv2sf): New.\n        (vec_unpacku_lo_<VECINT12>, vec_unpacku_hi_<VECINT12>): New.\n        (vec_unpacks_lo_<VECINT12>, vec_unpacks_hi_<VECINT12>): New.\n        (vec_pack_trunc_v4hi, vec_pack_trunc_v2si): New.\n\ntestsuite:\n        * lib/target-supports.exp (vect_widen_sum_hi_to_si_pattern,\n        vect_widen_mult_hi_to_si, vect_sdot_qi, vect_udot_qi, vect_sdot_hi,\n        vect_unpack, vect_int_mult, vect_extract_even_odd,\n        vect_extract_even_odd_wide, vect_interleave): Enable for ia64.\n\nFrom-SVN: r167136", "tree": {"sha": "7b5acfbb9e2ff7351394528ef5f9fdcdefe4bc4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b5acfbb9e2ff7351394528ef5f9fdcdefe4bc4e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/604e3ff316fdb7298f3a54912fb6adc2268765f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/604e3ff316fdb7298f3a54912fb6adc2268765f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/604e3ff316fdb7298f3a54912fb6adc2268765f8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/604e3ff316fdb7298f3a54912fb6adc2268765f8/comments", "author": null, "committer": null, "parents": [{"sha": "5eee6908a10c53d5aa4ac063f9559152aeea8067", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5eee6908a10c53d5aa4ac063f9559152aeea8067", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5eee6908a10c53d5aa4ac063f9559152aeea8067"}], "stats": {"total": 546, "additions": 504, "deletions": 42}, "files": [{"sha": "275e141e5143bc229789ea69744c4e17de30cd4c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/604e3ff316fdb7298f3a54912fb6adc2268765f8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/604e3ff316fdb7298f3a54912fb6adc2268765f8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=604e3ff316fdb7298f3a54912fb6adc2268765f8", "patch": "@@ -1,3 +1,42 @@\n+2010-11-24  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/ia64/predicates.md (pmpyshr_operand): New.\n+\t* config/ia64/ia64.c (ia64_expand_unpack): New.\n+\t(ia64_expand_widen_mul_v4hi): New.\n+\t(ia64_expand_widen_sum): Update for pattern renames.\n+\t(ia64_expand_dot_prod_v8qi): Likewise.\n+\t* config/ia64/ia64-protos.h: Update.\n+\t* config/ia64/vect.md (vecwider): New mode attribute.\n+\t(vec_widen_umult_lo_v8qi, vec_widen_umult_hi_v8qi): New.\n+\t(vec_widen_smult_lo_v8qi, vec_widen_smult_hi_v8qi): New.\n+\t(pmpyshr2, pmpyshr2_u): New.\n+\t(vec_widen_smult_lo_v4hi, vec_widen_smult_hi_v4hi): New.\n+\t(vec_widen_umult_lo_v4hi, vec_widen_umult_hi_v4hi): New.\n+\t(mulv2si3): New.\n+\t(vec_pack_ssat_v4hi): Rename from pack2_sss.\n+\t(vec_pack_usat_v4hi): Rename from *pack2_uss.\n+\t(vec_pack_ssat_v2si): Rename from pack4_sss.\n+\t(vec_interleave_lowv8qi): Rename from unpack1_l, use the correct\n+\tvec_select operation.\n+\t(vec_interleave_highv8qi): Similarly.\n+\t(mux1_alt): Rename from *mux1_alt.\n+\t(vec_extract_evenv8qi, vec_extract_oddv8qi): New.\n+\t(vec_interleave_lowv4hi): Rename from unpack2_l.\n+\t(vec_interleave_highv4hi): Rename from unpack2_h.\n+\t(mix2_r): Rename from *mix2_r.\n+\t(mix2_l): Similarly.\n+\t(vec_extract_evenodd_helper): New.\n+\t(vec_extract_evenv4hi, vec_extract_oddv4hi): New.\n+\t(vec_interleave_lowv2si): Rename from *unpack4_l.\n+\t(vec_interleave_highv2si): Rename from *unpack4_h.\n+\t(vec_extract_evenv2si, vec_extract_oddv2si): New.\n+\t(vec_interleave_lowv2sf): Rename from fmix_r.\n+\t(vec_interleave_highv2sf): Rename from *fmix_l.\n+\t(vec_extract_evenv2sf, vec_extract_oddv2sf): New.\n+\t(vec_unpacku_lo_<VECINT12>, vec_unpacku_hi_<VECINT12>): New.\n+\t(vec_unpacks_lo_<VECINT12>, vec_unpacks_hi_<VECINT12>): New.\n+\t(vec_pack_trunc_v4hi, vec_pack_trunc_v2si): New.\n+\n 2010-11-24  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* targhooks.c (default_except_unwind_info): Remove"}, {"sha": "87e04a23d769968cbe359452bd8424ed23de0304", "filename": "gcc/config/ia64/ia64-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/604e3ff316fdb7298f3a54912fb6adc2268765f8/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/604e3ff316fdb7298f3a54912fb6adc2268765f8/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64-protos.h?ref=604e3ff316fdb7298f3a54912fb6adc2268765f8", "patch": "@@ -39,7 +39,9 @@ extern bool ia64_expand_movxf_movrf (enum machine_mode, rtx[]);\n extern void ia64_expand_compare (rtx *, rtx *, rtx *);\n extern void ia64_expand_vecint_cmov (rtx[]);\n extern bool ia64_expand_vecint_minmax (enum rtx_code, enum machine_mode, rtx[]);\n+extern void ia64_expand_unpack (rtx [], bool, bool);\n extern void ia64_expand_widen_sum (rtx[], bool);\n+extern void ia64_expand_widen_mul_v4hi (rtx [], bool, bool);\n extern void ia64_expand_dot_prod_v8qi (rtx[], bool);\n extern void ia64_expand_call (rtx, rtx, rtx, int);\n extern void ia64_split_call (rtx, rtx, rtx, rtx, rtx, int, int);"}, {"sha": "bd42f2b6328d2b22885ec51e2fdf76b3893b3a9c", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 71, "deletions": 8, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/604e3ff316fdb7298f3a54912fb6adc2268765f8/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/604e3ff316fdb7298f3a54912fb6adc2268765f8/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=604e3ff316fdb7298f3a54912fb6adc2268765f8", "patch": "@@ -1972,6 +1972,44 @@ ia64_expand_vecint_minmax (enum rtx_code code, enum machine_mode mode,\n   return true;\n }\n \n+/* Emit an integral vector unpack operation.  */\n+\n+void\n+ia64_expand_unpack (rtx operands[3], bool unsignedp, bool highp)\n+{\n+  enum machine_mode mode = GET_MODE (operands[1]);\n+  rtx (*gen) (rtx, rtx, rtx);\n+  rtx x;\n+\n+  switch (mode)\n+    {\n+    case V8QImode:\n+      gen = highp ? gen_vec_interleave_highv8qi : gen_vec_interleave_lowv8qi;\n+      break;\n+    case V4HImode:\n+      gen = highp ? gen_vec_interleave_highv4hi : gen_vec_interleave_lowv4hi;\n+      break;\n+    default:\n+      gcc_unreachable ();\n+    }\n+\n+  /* Fill in x with the sign extension of each element in op1.  */\n+  if (unsignedp)\n+    x = CONST0_RTX (mode);\n+  else\n+    {\n+      bool neg;\n+\n+      x = gen_reg_rtx (mode);\n+\n+      neg = ia64_expand_vecint_compare (LT, mode, x, operands[1],\n+\t\t\t\t\tCONST0_RTX (mode));\n+      gcc_assert (!neg);\n+    }\n+\n+  emit_insn (gen (gen_lowpart (mode, operands[0]), operands[1], x));\n+}\n+\n /* Emit an integral vector widening sum operations.  */\n \n void\n@@ -1989,13 +2027,13 @@ ia64_expand_widen_sum (rtx operands[3], bool unsignedp)\n   switch (mode)\n     {\n     case V8QImode:\n-      unpack_l = gen_unpack1_l;\n-      unpack_h = gen_unpack1_h;\n+      unpack_l = gen_vec_interleave_lowv8qi;\n+      unpack_h = gen_vec_interleave_highv8qi;\n       plus = gen_addv4hi3;\n       break;\n     case V4HImode:\n-      unpack_l = gen_unpack2_l;\n-      unpack_h = gen_unpack2_h;\n+      unpack_l = gen_vec_interleave_lowv4hi;\n+      unpack_h = gen_vec_interleave_highv4hi;\n       plus = gen_addv2si3;\n       break;\n     default:\n@@ -2026,6 +2064,27 @@ ia64_expand_widen_sum (rtx operands[3], bool unsignedp)\n   emit_insn (plus (operands[0], h, s));\n }\n \n+void\n+ia64_expand_widen_mul_v4hi (rtx operands[3], bool unsignedp, bool highp)\n+{\n+  rtx l = gen_reg_rtx (V4HImode);\n+  rtx h = gen_reg_rtx (V4HImode);\n+  rtx (*mulhigh)(rtx, rtx, rtx, rtx);\n+  rtx (*interl)(rtx, rtx, rtx);\n+\n+  emit_insn (gen_mulv4hi3 (l, operands[1], operands[2]));\n+\n+  /* For signed, pmpy2.r would appear to more closely match this operation.\n+     However, the vectorizer is more likely to use the LO and HI patterns\n+     in pairs. At which point, with this formulation, the first two insns\n+     of each can be CSEd.  */\n+  mulhigh = unsignedp ? gen_pmpyshr2_u : gen_pmpyshr2;\n+  emit_insn (mulhigh (h, operands[1], operands[2], GEN_INT (16)));\n+\n+  interl = highp ? gen_vec_interleave_highv4hi : gen_vec_interleave_lowv4hi;\n+  emit_insn (interl (gen_lowpart (V4HImode, operands[0]), l, h));\n+}\n+\n /* Emit a signed or unsigned V8QI dot product operation.  */\n \n void\n@@ -2056,10 +2115,14 @@ ia64_expand_dot_prod_v8qi (rtx operands[4], bool unsignedp)\n   h1 = gen_reg_rtx (V4HImode);\n   h2 = gen_reg_rtx (V4HImode);\n \n-  emit_insn (gen_unpack1_l (gen_lowpart (V8QImode, l1), operands[1], x1));\n-  emit_insn (gen_unpack1_l (gen_lowpart (V8QImode, l2), operands[2], x2));\n-  emit_insn (gen_unpack1_h (gen_lowpart (V8QImode, h1), operands[1], x1));\n-  emit_insn (gen_unpack1_h (gen_lowpart (V8QImode, h2), operands[2], x2));\n+  emit_insn (gen_vec_interleave_lowv8qi\n+\t     (gen_lowpart (V8QImode, l1), operands[1], x1));\n+  emit_insn (gen_vec_interleave_lowv8qi\n+\t     (gen_lowpart (V8QImode, l2), operands[2], x2));\n+  emit_insn (gen_vec_interleave_highv8qi\n+\t     (gen_lowpart (V8QImode, h1), operands[1], x1));\n+  emit_insn (gen_vec_interleave_highv8qi\n+\t     (gen_lowpart (V8QImode, h2), operands[2], x2));\n \n   p1 = gen_reg_rtx (V2SImode);\n   p2 = gen_reg_rtx (V2SImode);"}, {"sha": "55bb3f58982a3a38a320f274b8dc0b257c67d0a7", "filename": "gcc/config/ia64/predicates.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/604e3ff316fdb7298f3a54912fb6adc2268765f8/gcc%2Fconfig%2Fia64%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/604e3ff316fdb7298f3a54912fb6adc2268765f8/gcc%2Fconfig%2Fia64%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fpredicates.md?ref=604e3ff316fdb7298f3a54912fb6adc2268765f8", "patch": "@@ -526,6 +526,12 @@\n                     INTVAL (op) == 1   || INTVAL (op) == 4  ||\n                     INTVAL (op) == 8   || INTVAL (op) == 16\")))\n \n+;; True if OP is one of the immediate values 0, 7, 15, 16\n+(define_predicate \"pmpyshr_operand\"\n+  (and (match_code \"const_int\")\n+       (match_test \"INTVAL (op) == 0 || INTVAL (op) == 7\n+\t\t    || INTVAL (op) == 15 || INTVAL (op) == 16\")))\n+\n ;; True if OP is 0..3.\n (define_predicate \"const_int_2bit_operand\"\n   (and (match_code \"const_int\")"}, {"sha": "9adff69f3c8bb005cf22fec1d826445a25f7524a", "filename": "gcc/config/ia64/vect.md", "status": "modified", "additions": 365, "deletions": 32, "changes": 397, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/604e3ff316fdb7298f3a54912fb6adc2268765f8/gcc%2Fconfig%2Fia64%2Fvect.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/604e3ff316fdb7298f3a54912fb6adc2268765f8/gcc%2Fconfig%2Fia64%2Fvect.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fvect.md?ref=604e3ff316fdb7298f3a54912fb6adc2268765f8", "patch": "@@ -24,6 +24,7 @@\n (define_mode_iterator VECINT12 [V8QI V4HI])\n (define_mode_iterator VECINT24 [V4HI V2SI])\n (define_mode_attr vecsize [(V8QI \"1\") (V4HI \"2\") (V2SI \"4\")])\n+(define_mode_attr vecwider [(V8QI \"V4HI\") (V4HI \"V2SI\")])\n \n (define_expand \"mov<mode>\"\n   [(set (match_operand:VECINT 0 \"general_operand\" \"\")\n@@ -203,6 +204,62 @@\n   DONE;\n })\n \n+(define_expand \"vec_widen_umult_lo_v8qi\"\n+  [(match_operand:V4HI 0 \"gr_register_operand\" \"\")\n+   (match_operand:V8QI 1 \"gr_register_operand\" \"\")\n+   (match_operand:V8QI 2 \"gr_register_operand\" \"\")]\n+  \"\"\n+{\n+  rtx op1 = gen_reg_rtx (V4HImode);\n+  rtx op2 = gen_reg_rtx (V4HImode);\n+  emit_insn (gen_vec_unpacku_lo_v8qi (op1, operands[1]));\n+  emit_insn (gen_vec_unpacku_lo_v8qi (op2, operands[2]));\n+  emit_insn (gen_mulv4hi3 (operands[0], op1, op2));\n+  DONE;\n+});\n+  \n+(define_expand \"vec_widen_umult_hi_v8qi\"\n+  [(match_operand:V4HI 0 \"gr_register_operand\" \"\")\n+   (match_operand:V8QI 1 \"gr_register_operand\" \"\")\n+   (match_operand:V8QI 2 \"gr_register_operand\" \"\")]\n+  \"\"\n+{\n+  rtx op1 = gen_reg_rtx (V4HImode);\n+  rtx op2 = gen_reg_rtx (V4HImode);\n+  emit_insn (gen_vec_unpacku_hi_v8qi (op1, operands[1]));\n+  emit_insn (gen_vec_unpacku_hi_v8qi (op2, operands[2]));\n+  emit_insn (gen_mulv4hi3 (operands[0], op1, op2));\n+  DONE;\n+});\n+  \n+(define_expand \"vec_widen_smult_lo_v8qi\"\n+  [(match_operand:V4HI 0 \"gr_register_operand\" \"\")\n+   (match_operand:V8QI 1 \"gr_register_operand\" \"\")\n+   (match_operand:V8QI 2 \"gr_register_operand\" \"\")]\n+  \"\"\n+{\n+  rtx op1 = gen_reg_rtx (V4HImode);\n+  rtx op2 = gen_reg_rtx (V4HImode);\n+  emit_insn (gen_vec_unpacks_lo_v8qi (op1, operands[1]));\n+  emit_insn (gen_vec_unpacks_lo_v8qi (op2, operands[2]));\n+  emit_insn (gen_mulv4hi3 (operands[0], op1, op2));\n+  DONE;\n+});\n+  \n+(define_expand \"vec_widen_smult_hi_v8qi\"\n+  [(match_operand:V4HI 0 \"gr_register_operand\" \"\")\n+   (match_operand:V8QI 1 \"gr_register_operand\" \"\")\n+   (match_operand:V8QI 2 \"gr_register_operand\" \"\")]\n+  \"\"\n+{\n+  rtx op1 = gen_reg_rtx (V4HImode);\n+  rtx op2 = gen_reg_rtx (V4HImode);\n+  emit_insn (gen_vec_unpacks_hi_v8qi (op1, operands[1]));\n+  emit_insn (gen_vec_unpacks_hi_v8qi (op2, operands[2]));\n+  emit_insn (gen_mulv4hi3 (operands[0], op1, op2));\n+  DONE;\n+});\n+  \n (define_insn \"mulv4hi3\"\n   [(set (match_operand:V4HI 0 \"gr_register_operand\" \"=r\")\n \t(mult:V4HI (match_operand:V4HI 1 \"gr_register_operand\" \"r\")\n@@ -211,6 +268,34 @@\n   \"pmpyshr2 %0 = %1, %2, 0\"\n   [(set_attr \"itanium_class\" \"mmmul\")])\n \n+(define_insn \"pmpyshr2\"\n+  [(set (match_operand:V4HI 0 \"gr_register_operand\" \"=r\")\n+\t(truncate:V4HI\n+\t  (ashiftrt:V4SI\n+\t    (mult:V4SI\n+\t      (sign_extend:V4SI\n+\t\t(match_operand:V4HI 1 \"gr_register_operand\" \"r\"))\n+\t      (sign_extend:V4SI\n+\t\t(match_operand:V4HI 2 \"gr_register_operand\" \"r\")))\n+\t    (match_operand:SI 3 \"pmpyshr_operand\" \"n\"))))]\n+  \"\"\n+  \"pmpyshr2 %0 = %1, %2, %3\"\n+  [(set_attr \"itanium_class\" \"mmmul\")])\n+\n+(define_insn \"pmpyshr2_u\"\n+  [(set (match_operand:V4HI 0 \"gr_register_operand\" \"=r\")\n+\t(truncate:V4HI\n+\t  (lshiftrt:V4SI\n+\t    (mult:V4SI\n+\t      (zero_extend:V4SI\n+\t\t(match_operand:V4HI 1 \"gr_register_operand\" \"r\"))\n+\t      (zero_extend:V4SI\n+\t\t(match_operand:V4HI 2 \"gr_register_operand\" \"r\")))\n+\t    (match_operand:SI 3 \"pmpyshr_operand\" \"n\"))))]\n+  \"\"\n+  \"pmpyshr2.u %0 = %1, %2, %3\"\n+  [(set_attr \"itanium_class\" \"mmmul\")])\n+\n (define_insn \"pmpy2_r\"\n   [(set (match_operand:V2SI 0 \"gr_register_operand\" \"=r\")\n \t(mult:V2SI\n@@ -241,6 +326,100 @@\n   \"pmpy2.l %0 = %1, %2\"\n   [(set_attr \"itanium_class\" \"mmshf\")])\n \n+(define_expand \"vec_widen_smult_lo_v4hi\"\n+  [(match_operand:V2SI 0 \"gr_register_operand\" \"\")\n+   (match_operand:V4HI 1 \"gr_register_operand\" \"\")\n+   (match_operand:V4HI 2 \"gr_register_operand\" \"\")]\n+  \"\"\n+{\n+  ia64_expand_widen_mul_v4hi (operands, false, false);\n+  DONE;\n+})\n+\n+(define_expand \"vec_widen_smult_hi_v4hi\"\n+  [(match_operand:V2SI 0 \"gr_register_operand\" \"\")\n+   (match_operand:V4HI 1 \"gr_register_operand\" \"\")\n+   (match_operand:V4HI 2 \"gr_register_operand\" \"\")]\n+  \"\"\n+{\n+  ia64_expand_widen_mul_v4hi (operands, false, true);\n+  DONE;\n+})\n+\n+(define_expand \"vec_widen_umult_lo_v4hi\"\n+  [(match_operand:V2SI 0 \"gr_register_operand\" \"\")\n+   (match_operand:V4HI 1 \"gr_register_operand\" \"\")\n+   (match_operand:V4HI 2 \"gr_register_operand\" \"\")]\n+  \"\"\n+{\n+  ia64_expand_widen_mul_v4hi (operands, true, false);\n+  DONE;\n+})\n+\n+(define_expand \"vec_widen_umult_hi_v4hi\"\n+  [(match_operand:V2SI 0 \"gr_register_operand\" \"\")\n+   (match_operand:V4HI 1 \"gr_register_operand\" \"\")\n+   (match_operand:V4HI 2 \"gr_register_operand\" \"\")]\n+  \"\"\n+{\n+  ia64_expand_widen_mul_v4hi (operands, true, true);\n+  DONE;\n+})\n+\n+(define_expand \"mulv2si3\"\n+  [(set (match_operand:V2SI 0 \"gr_register_operand\" \"\")\n+\t(mult:V2SI (match_operand:V2SI 1 \"gr_register_operand\" \"r\")\n+\t\t   (match_operand:V2SI 2 \"gr_register_operand\" \"r\")))]\n+  \"\"\n+{\n+  rtx t0, t1, t2, t3, t4, t5, t6, t7, x;\n+  rtx op1h = gen_lowpart (V4HImode, operands[1]);\n+  rtx op2h = gen_lowpart (V4HImode, operands[2]);\n+\n+  t0 = gen_reg_rtx (V4HImode);\n+  t1 = gen_reg_rtx (V4HImode);\n+  t2 = gen_reg_rtx (V4HImode);\n+  t3 = gen_reg_rtx (V4HImode);\n+  t4 = gen_reg_rtx (V2SImode);\n+  t5 = gen_reg_rtx (V2SImode);\n+  t6 = gen_reg_rtx (V2SImode);\n+  t7 = gen_reg_rtx (V2SImode);\n+\n+  /* Consider the HImode components of op1 = DCBA, op2 = ZYXW.\n+     Consider .l and .h suffixes below the low and high 16 bits\n+     of the full 32-bit product.  */\n+\n+  /* T0 = CDBA.  */\n+  x = gen_rtx_PARALLEL (VOIDmode, gen_rtvec (4, const1_rtx, const0_rtx,\n+\t\t\t\t\t     GEN_INT (3), const2_rtx));\n+  x = gen_rtx_VEC_SELECT (V4HImode, op1h, x);\n+  emit_insn (gen_rtx_SET (VOIDmode, t0, x));\n+\n+  /* T1 = DZ.l, CY.l, BX.l, AW.l.  */\n+  emit_insn (gen_mulv4hi3 (t1, op1h, op2h));\n+\n+  /* T2 = DZ.h, CY.h, BX.h, AW.h.  */\n+  emit_insn (gen_pmpyshr2_u (t2, op1h, op2h, GEN_INT (16)));\n+\n+  /* T3 = CZ.l, DY.l, AX.l, BW.l.  */\n+  emit_insn (gen_mulv4hi3 (t3, t0, op2h));\n+\n+  /* T4 = CY.h, CY.l, AW.h, AW.l = CY, AW.  */\n+  emit_insn (gen_mix2_r (gen_lowpart (V4HImode, t4), t1, t2));\n+\n+  /* T5 = CZ.l, 0, AX.l, 0 = CZ << 16, AX << 16.  */\n+  emit_insn (gen_mix2_l (gen_lowpart (V4HImode, t5),\n+\t\t\t CONST0_RTX (V4HImode), t3));\n+\n+  /* T6 = DY.l, 0, BW.l, 0 = DY << 16, BW << 16.  */\n+  emit_insn (gen_mix2_r (gen_lowpart (V4HImode, t6),\n+\t\t\t CONST0_RTX (V4HImode), t3));\n+\n+  emit_insn (gen_addv2si3 (t7, t4, t5));\n+  emit_insn (gen_addv2si3 (operands[0], t6, t7));\n+  DONE;\n+})\n+\n (define_expand \"umax<mode>3\"\n   [(set (match_operand:VECINT 0 \"gr_register_operand\" \"\")\n \t(umax:VECINT (match_operand:VECINT 1 \"gr_register_operand\" \"\")\n@@ -486,7 +665,7 @@\n   \"pcmp<vecsize>.gt %0 = %r1, %r2\"\n   [(set_attr \"itanium_class\" \"mmalua\")])\n \n-(define_insn \"pack2_sss\"\n+(define_insn \"vec_pack_ssat_v4hi\"\n   [(set (match_operand:V8QI 0 \"gr_register_operand\" \"=r\")\n \t(vec_concat:V8QI\n \t  (ss_truncate:V4QI\n@@ -497,7 +676,7 @@\n   \"pack2.sss %0 = %r1, %r2\"\n   [(set_attr \"itanium_class\" \"mmshf\")])\n \n-(define_insn \"*pack2_uss\"\n+(define_insn \"vec_pack_usat_v4hi\"\n   [(set (match_operand:V8QI 0 \"gr_register_operand\" \"=r\")\n \t(vec_concat:V8QI\n \t  (us_truncate:V4QI\n@@ -508,7 +687,7 @@\n   \"pack2.uss %0 = %r1, %r2\"\n   [(set_attr \"itanium_class\" \"mmshf\")])\n \n-(define_insn \"pack4_sss\"\n+(define_insn \"vec_pack_ssat_v2si\"\n   [(set (match_operand:V4HI 0 \"gr_register_operand\" \"=r\")\n \t(vec_concat:V4HI\n \t  (ss_truncate:V2HI\n@@ -519,38 +698,30 @@\n   \"pack4.sss %0 = %r1, %r2\"\n   [(set_attr \"itanium_class\" \"mmshf\")])\n \n-(define_insn \"unpack1_l\"\n+(define_insn \"vec_interleave_lowv8qi\"\n   [(set (match_operand:V8QI 0 \"gr_register_operand\" \"=r\")\n \t(vec_select:V8QI\n \t  (vec_concat:V16QI\n \t    (match_operand:V8QI 1 \"gr_reg_or_0_operand\" \"rU\")\n \t    (match_operand:V8QI 2 \"gr_reg_or_0_operand\" \"rU\"))\n-\t  (parallel [(const_int 0)\n-\t\t     (const_int 1)\n-\t\t     (const_int 2)\n-\t\t     (const_int 3)\n-\t\t     (const_int 8)\n-\t\t     (const_int 9)\n-\t\t     (const_int 10)\n-\t\t     (const_int 11)])))]\n+\t  (parallel [(const_int 0) (const_int 8)\n+\t\t     (const_int 1) (const_int 9)\n+\t\t     (const_int 2) (const_int 10)\n+\t\t     (const_int 3) (const_int 11)])))]\n   \"\"\n   \"unpack1.l %0 = %r2, %r1\"\n   [(set_attr \"itanium_class\" \"mmshf\")])\n \n-(define_insn \"unpack1_h\"\n+(define_insn \"vec_interleave_highv8qi\"\n   [(set (match_operand:V8QI 0 \"gr_register_operand\" \"=r\")\n \t(vec_select:V8QI\n \t  (vec_concat:V16QI\n \t    (match_operand:V8QI 1 \"gr_reg_or_0_operand\" \"rU\")\n \t    (match_operand:V8QI 2 \"gr_reg_or_0_operand\" \"rU\"))\n-\t  (parallel [(const_int 4)\n-\t\t     (const_int 5)\n-\t\t     (const_int 6)\n-\t\t     (const_int 7)\n-\t\t     (const_int 12)\n-\t\t     (const_int 13)\n-\t\t     (const_int 14)\n-\t\t     (const_int 15)])))]\n+\t  (parallel [(const_int 4) (const_int 12)\n+\t\t     (const_int 5) (const_int 13)\n+\t\t     (const_int 6) (const_int 14)\n+\t\t     (const_int 7) (const_int 15)])))]\n   \"\"\n   \"unpack1.h %0 = %r2, %r1\"\n   [(set_attr \"itanium_class\" \"mmshf\")])\n@@ -639,7 +810,7 @@\n   \"mux1 %0 = %1, @shuf\"\n   [(set_attr \"itanium_class\" \"mmshf\")])\n \n-(define_insn \"*mux1_alt\"\n+(define_insn \"mux1_alt\"\n   [(set (match_operand:V8QI 0 \"gr_register_operand\" \"=r\")\n \t(vec_select:V8QI\n \t  (match_operand:V8QI 1 \"gr_register_operand\" \"r\")\n@@ -679,7 +850,31 @@\n   \"mux1 %0 = %1, @brcst\"\n   [(set_attr \"itanium_class\" \"mmshf\")])\n \n-(define_insn \"unpack2_l\"\n+(define_expand \"vec_extract_evenv8qi\"\n+  [(match_operand:V8QI 0 \"gr_register_operand\" \"\")\n+   (match_operand:V8QI 1 \"gr_register_operand\" \"\")\n+   (match_operand:V8QI 2 \"gr_register_operand\" \"\")]\n+  \"\"\n+{\n+  rtx temp = gen_reg_rtx (V8QImode);\n+  emit_insn (gen_mix1_r (temp, operands[1], operands[2]));\n+  emit_insn (gen_mux1_alt (operands[0], temp));\n+  DONE;\n+})\n+\n+(define_expand \"vec_extract_oddv8qi\"\n+  [(match_operand:V8QI 0 \"gr_register_operand\" \"\")\n+   (match_operand:V8QI 1 \"gr_register_operand\" \"\")\n+   (match_operand:V8QI 2 \"gr_register_operand\" \"\")]\n+  \"\"\n+{\n+  rtx temp = gen_reg_rtx (V8QImode);\n+  emit_insn (gen_mix1_l (temp, operands[1], operands[2]));\n+  emit_insn (gen_mux1_alt (operands[0], temp));\n+  DONE;\n+})\n+\n+(define_insn \"vec_interleave_lowv4hi\"\n   [(set (match_operand:V4HI 0 \"gr_register_operand\" \"=r\")\n \t(vec_select:V4HI\n \t  (vec_concat:V8HI\n@@ -693,7 +888,7 @@\n   \"unpack2.l %0 = %r2, %r1\"\n   [(set_attr \"itanium_class\" \"mmshf\")])\n \n-(define_insn \"unpack2_h\"\n+(define_insn \"vec_interleave_highv4hi\"\n   [(set (match_operand:V4HI 0 \"gr_register_operand\" \"=r\")\n \t(vec_select:V4HI\n \t  (vec_concat:V8HI\n@@ -707,7 +902,7 @@\n   \"unpack2.h %0 = %r2, %r1\"\n   [(set_attr \"itanium_class\" \"mmshf\")])\n \n-(define_insn \"*mix2_r\"\n+(define_insn \"mix2_r\"\n   [(set (match_operand:V4HI 0 \"gr_register_operand\" \"=r\")\n \t(vec_select:V4HI\n \t  (vec_concat:V8HI\n@@ -721,7 +916,7 @@\n   \"mix2.r %0 = %r2, %r1\"\n   [(set_attr \"itanium_class\" \"mmshf\")])\n \n-(define_insn \"*mix2_l\"\n+(define_insn \"mix2_l\"\n   [(set (match_operand:V4HI 0 \"gr_register_operand\" \"=r\")\n \t(vec_select:V4HI\n \t  (vec_concat:V8HI\n@@ -755,6 +950,40 @@\n }\n   [(set_attr \"itanium_class\" \"mmshf\")])\n \n+(define_expand \"vec_extract_evenodd_helper\"\n+  [(set (match_operand:V4HI 0 \"gr_register_operand\" \"\")\n+\t(vec_select:V4HI\n+\t  (match_operand:V4HI 1 \"gr_register_operand\" \"\")\n+\t  (parallel [(const_int 0)\n+\t\t     (const_int 2)\n+\t\t     (const_int 1)\n+\t\t     (const_int 3)])))]\n+  \"\")\n+\n+(define_expand \"vec_extract_evenv4hi\"\n+  [(match_operand:V4HI 0 \"gr_register_operand\")\n+   (match_operand:V4HI 1 \"gr_reg_or_0_operand\")\n+   (match_operand:V4HI 2 \"gr_reg_or_0_operand\")]\n+  \"\"\n+{\n+  rtx temp = gen_reg_rtx (V4HImode);\n+  emit_insn (gen_mix2_r (temp, operands[1], operands[2]));\n+  emit_insn (gen_vec_extract_evenodd_helper (operands[0], temp));\n+  DONE;\n+})\n+\n+(define_expand \"vec_extract_oddv4hi\"\n+  [(match_operand:V4HI 0 \"gr_register_operand\")\n+   (match_operand:V4HI 1 \"gr_reg_or_0_operand\")\n+   (match_operand:V4HI 2 \"gr_reg_or_0_operand\")]\n+  \"\"\n+{\n+  rtx temp = gen_reg_rtx (V4HImode);\n+  emit_insn (gen_mix2_l (temp, operands[1], operands[2]));\n+  emit_insn (gen_vec_extract_evenodd_helper (operands[0], temp));\n+  DONE;\n+})\n+\n (define_insn \"*mux2_brcst_hi\"\n   [(set (match_operand:V4HI 0 \"gr_register_operand\" \"=r\")\n \t(vec_duplicate:V4HI\n@@ -764,7 +993,7 @@\n   [(set_attr \"itanium_class\" \"mmshf\")])\n \n ;; Note that mix4.r performs the exact same operation.\n-(define_insn \"*unpack4_l\"\n+(define_insn \"vec_interleave_lowv2si\"\n   [(set (match_operand:V2SI 0 \"gr_register_operand\" \"=r\")\n \t(vec_select:V2SI\n \t  (vec_concat:V4SI\n@@ -777,7 +1006,7 @@\n   [(set_attr \"itanium_class\" \"mmshf\")])\n \n ;; Note that mix4.l performs the exact same operation.\n-(define_insn \"*unpack4_h\"\n+(define_insn \"vec_interleave_highv2si\"\n   [(set (match_operand:V2SI 0 \"gr_register_operand\" \"=r\")\n \t(vec_select:V2SI\n \t  (vec_concat:V4SI\n@@ -789,6 +1018,28 @@\n   \"unpack4.h %0 = %r2, %r1\"\n   [(set_attr \"itanium_class\" \"mmshf\")])\n \n+(define_expand \"vec_extract_evenv2si\"\n+  [(match_operand:V2SI 0 \"gr_register_operand\" \"\")\n+   (match_operand:V2SI 1 \"gr_register_operand\" \"\")\n+   (match_operand:V2SI 2 \"gr_register_operand\" \"\")]\n+  \"\"\n+{\n+  emit_insn (gen_vec_interleave_lowv2si (operands[0], operands[1],\n+\t\t\t\t\t operands[2]));\n+  DONE;\n+})\n+\n+(define_expand \"vec_extract_oddv2si\"\n+  [(match_operand:V2SI 0 \"gr_register_operand\" \"\")\n+   (match_operand:V2SI 1 \"gr_register_operand\" \"\")\n+   (match_operand:V2SI 2 \"gr_register_operand\" \"\")]\n+  \"\"\n+{\n+  emit_insn (gen_vec_interleave_highv2si (operands[0], operands[1],\n+\t\t\t\t\t  operands[2]));\n+  DONE;\n+})\n+\n (define_expand \"vec_initv2si\"\n   [(match_operand:V2SI 0 \"gr_register_operand\" \"\")\n    (match_operand 1 \"\" \"\")]\n@@ -831,7 +1082,6 @@\n ;; padd.uus\n ;; pavg\n ;; pavgsub\n-;; pmpyshr, general form\n ;; psad\n ;; pshladd\n ;; pshradd\n@@ -1110,7 +1360,7 @@\n   \"fswap %0 = %F1, %F2\"\n   [(set_attr \"itanium_class\" \"fmisc\")])\n \n-(define_insn \"*fmix_l\"\n+(define_insn \"vec_interleave_highv2sf\"\n   [(set (match_operand:V2SF 0 \"fr_register_operand\" \"=f\")\n \t(vec_select:V2SF\n \t  (vec_concat:V4SF\n@@ -1121,7 +1371,7 @@\n   \"fmix.l %0 = %F2, %F1\"\n   [(set_attr \"itanium_class\" \"fmisc\")])\n \n-(define_insn \"fmix_r\"\n+(define_insn \"vec_interleave_lowv2sf\"\n   [(set (match_operand:V2SF 0 \"fr_register_operand\" \"=f\")\n \t(vec_select:V2SF\n \t  (vec_concat:V4SF\n@@ -1143,6 +1393,29 @@\n   \"fmix.lr %0 = %F2, %F1\"\n   [(set_attr \"itanium_class\" \"fmisc\")])\n \n+(define_expand \"vec_extract_evenv2sf\"\n+  [(match_operand:V2SF 0 \"gr_register_operand\" \"\")\n+   (match_operand:V2SF 1 \"gr_register_operand\" \"\")\n+   (match_operand:V2SF 2 \"gr_register_operand\" \"\")]\n+  \"\"\n+{\n+  emit_insn (gen_vec_interleave_lowv2sf (operands[0], operands[1],\n+\t\t\t\t\t operands[2]));\n+  DONE;\n+})\n+\n+(define_expand \"vec_extract_oddv2sf\"\n+  [(match_operand:V2SF 0 \"gr_register_operand\" \"\")\n+   (match_operand:V2SF 1 \"gr_register_operand\" \"\")\n+   (match_operand:V2SF 2 \"gr_register_operand\" \"\")]\n+  \"\"\n+{\n+  emit_insn (gen_vec_interleave_highv2sf (operands[0], operands[1],\n+\t\t\t\t\t  operands[2]));\n+  DONE;\n+})\n+\n+\n (define_expand \"vec_setv2sf\"\n   [(match_operand:V2SF 0 \"fr_register_operand\" \"\")\n    (match_operand:SF 1 \"fr_register_operand\" \"\")\n@@ -1158,7 +1431,7 @@\n       emit_insn (gen_fmix_lr (operands[0], tmp, operands[0]));\n       break;\n     case 1:\n-      emit_insn (gen_fmix_r (operands[0], operands[0], tmp));\n+      emit_insn (gen_vec_interleave_lowv2sf (operands[0], operands[0], tmp));\n       break;\n     default:\n       gcc_unreachable ();\n@@ -1227,6 +1500,66 @@\n   \"\"\n   \"\")\n \n+(define_expand \"vec_unpacku_lo_<mode>\"\n+  [(match_operand:<vecwider> 0 \"register_operand\" \"\")\n+   (match_operand:VECINT12   1 \"register_operand\" \"\")]\n+  \"\"\n+{\n+  ia64_expand_unpack (operands, true, false);\n+  DONE;\n+})\n+\n+(define_expand \"vec_unpacku_hi_<mode>\"\n+  [(match_operand:<vecwider> 0 \"register_operand\" \"\")\n+   (match_operand:VECINT12   1 \"register_operand\" \"\")]\n+  \"\"\n+{\n+  ia64_expand_unpack (operands, true, true);\n+  DONE;\n+})\n+\n+(define_expand \"vec_unpacks_lo_<mode>\"\n+  [(match_operand:<vecwider> 0 \"register_operand\" \"\")\n+   (match_operand:VECINT12   1 \"register_operand\" \"\")]\n+  \"\"\n+{\n+  ia64_expand_unpack (operands, false, false);\n+  DONE;\n+})\n+\n+(define_expand \"vec_unpacks_hi_<mode>\"\n+  [(match_operand:<vecwider> 0 \"register_operand\" \"\")\n+   (match_operand:VECINT12   1 \"register_operand\" \"\")]\n+  \"\"\n+{\n+  ia64_expand_unpack (operands, false, true);\n+  DONE;\n+})\n+\n+(define_expand \"vec_pack_trunc_v4hi\"\n+  [(match_operand:V8QI 0 \"gr_register_operand\" \"\")\n+   (match_operand:V4HI 1 \"gr_register_operand\" \"\")\n+   (match_operand:V4HI 2 \"gr_register_operand\" \"\")]\n+  \"\"\n+{\n+  rtx op1 = gen_lowpart(V8QImode, operands[1]);\n+  rtx op2 = gen_lowpart(V8QImode, operands[2]);\n+  emit_insn (gen_vec_extract_evenv8qi (operands[0], op1, op2));\n+  DONE;\n+})\n+\n+(define_expand \"vec_pack_trunc_v2si\"\n+  [(match_operand:V4HI 0 \"gr_register_operand\" \"\")\n+   (match_operand:V2SI 1 \"gr_register_operand\" \"\")\n+   (match_operand:V2SI 2 \"gr_register_operand\" \"\")]\n+  \"\"\n+{\n+  rtx op1 = gen_lowpart(V4HImode, operands[1]);\n+  rtx op2 = gen_lowpart(V4HImode, operands[2]);\n+  emit_insn (gen_vec_extract_evenv4hi (operands[0], op1, op2));\n+  DONE;\n+})\n+\n ;; Missing operations\n ;; fprcpa\n ;; fpsqrta"}, {"sha": "efe68e98ef7cc82100114754c7183ee02f33a537", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/604e3ff316fdb7298f3a54912fb6adc2268765f8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/604e3ff316fdb7298f3a54912fb6adc2268765f8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=604e3ff316fdb7298f3a54912fb6adc2268765f8", "patch": "@@ -1,3 +1,10 @@\n+2010-11-24  Richard Henderson  <rth@redhat.com>\n+\n+\t* lib/target-supports.exp (vect_widen_sum_hi_to_si_pattern,\n+\tvect_widen_mult_hi_to_si, vect_sdot_qi, vect_udot_qi, vect_sdot_hi,\n+\tvect_unpack, vect_int_mult, vect_extract_even_odd,\n+\tvect_extract_even_odd_wide, vect_interleave): Enable for ia64.\n+\n 2010-11-24  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/46519"}, {"sha": "b2c3d2a9c5b8858420b60d4c49fc1d64b5fe72d6", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/604e3ff316fdb7298f3a54912fb6adc2268765f8/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/604e3ff316fdb7298f3a54912fb6adc2268765f8/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=604e3ff316fdb7298f3a54912fb6adc2268765f8", "patch": "@@ -2518,7 +2518,8 @@ proc check_effective_target_vect_widen_sum_hi_to_si_pattern { } {\n         verbose \"check_effective_target_vect_widen_sum_hi_to_si_pattern: using cached result\" 2\n     } else {\n         set et_vect_widen_sum_hi_to_si_pattern_saved 0\n-        if { [istarget powerpc*-*-*] } {\n+        if { [istarget powerpc*-*-*]\n+             || [istarget ia64-*-*] } {\n             set et_vect_widen_sum_hi_to_si_pattern_saved 1\n         }\n     }\n@@ -2644,6 +2645,7 @@ proc check_effective_target_vect_widen_mult_hi_to_si { } {\n         }\n         if { [istarget powerpc*-*-*]\n \t      || [istarget spu-*-*]\n+\t      || [istarget ia64-*-*]\n \t      || [istarget i?86-*-*]\n \t      || [istarget x86_64-*-*] } {\n             set et_vect_widen_mult_hi_to_si_saved 1\n@@ -2665,6 +2667,9 @@ proc check_effective_target_vect_sdot_qi { } {\n         verbose \"check_effective_target_vect_sdot_qi: using cached result\" 2\n     } else {\n         set et_vect_sdot_qi_saved 0\n+        if { [istarget ia64-*-*] } {\n+            set et_vect_udot_qi_saved 1\n+        }\n     }\n     verbose \"check_effective_target_vect_sdot_qi: returning $et_vect_sdot_qi_saved\" 2\n     return $et_vect_sdot_qi_saved\n@@ -2682,7 +2687,8 @@ proc check_effective_target_vect_udot_qi { } {\n         verbose \"check_effective_target_vect_udot_qi: using cached result\" 2\n     } else {\n         set et_vect_udot_qi_saved 0\n-        if { [istarget powerpc*-*-*] } {\n+        if { [istarget powerpc*-*-*]\n+             || [istarget ia64-*-*] } {\n             set et_vect_udot_qi_saved 1\n         }\n     }\n@@ -2703,6 +2709,7 @@ proc check_effective_target_vect_sdot_hi { } {\n     } else {\n         set et_vect_sdot_hi_saved 0\n         if { ([istarget powerpc*-*-*] && ![istarget powerpc-*-linux*paired*])\n+\t     || [istarget ia64-*-*]\n \t     || [istarget i?86-*-*]\n              || [istarget x86_64-*-*] } {\n             set et_vect_sdot_hi_saved 1\n@@ -2774,6 +2781,7 @@ proc check_effective_target_vect_unpack { } {\n              || [istarget i?86-*-*]\n              || [istarget x86_64-*-*] \n              || [istarget spu-*-*]\n+             || [istarget ia64-*-*]\n              || ([istarget arm*-*-*] && [check_effective_target_arm_neon]) } {\n             set et_vect_unpack_saved 1\n         }\n@@ -3050,6 +3058,7 @@ proc check_effective_target_vect_int_mult { } {\n \t     || [istarget spu-*-*]\n \t     || [istarget i?86-*-*]\n \t     || [istarget x86_64-*-*]\n+\t     || [istarget ia64-*-*]\n \t     || [check_effective_target_arm32] } {\n \t   set et_vect_int_mult_saved 1\n \t}\n@@ -3071,6 +3080,7 @@ proc check_effective_target_vect_extract_even_odd { } {\n         if { [istarget powerpc*-*-*] \n              || [istarget i?86-*-*]\n              || [istarget x86_64-*-*]\n+             || [istarget ia64-*-*]\n              || [istarget spu-*-*] } {\n            set et_vect_extract_even_odd_saved 1\n         }\n@@ -3093,6 +3103,7 @@ proc check_effective_target_vect_extract_even_odd_wide { } {\n         if { [istarget powerpc*-*-*] \n              || [istarget i?86-*-*]\n              || [istarget x86_64-*-*]\n+             || [istarget ia64-*-*]\n              || [istarget spu-*-*] } {\n            set et_vect_extract_even_odd_wide_saved 1\n         }\n@@ -3114,6 +3125,7 @@ proc check_effective_target_vect_interleave { } {\n         if { [istarget powerpc*-*-*]\n              || [istarget i?86-*-*]\n              || [istarget x86_64-*-*]\n+             || [istarget ia64-*-*]\n              || [istarget spu-*-*] } {\n            set et_vect_interleave_saved 1\n         }"}]}