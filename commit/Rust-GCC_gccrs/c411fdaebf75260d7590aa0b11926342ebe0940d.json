{"sha": "c411fdaebf75260d7590aa0b11926342ebe0940d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzQxMWZkYWViZjc1MjYwZDc1OTBhYTBiMTE5MjYzNDJlYmUwOTQwZA==", "commit": {"author": {"name": "Andreas Tobler", "email": "a.tobler@schweiz.ch", "date": "2003-10-12T07:34:30Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2003-10-12T07:34:30Z"}, "message": "PR libstdc++/11844/11740 (cont)\n\n2003-10-12  Andreas Tobler  <a.tobler@schweiz.ch>\n\t    Paolo Carlini  <pcarlini@unitus.it>\n\n\tPR libstdc++/11844/11740 (cont)\n\t* config/os/generic/ctype_inline.h (ctype<char>::is):\n\tGenerically, use a bitmasksize of 15 (instead of 10);\n\tFix the logic to actually return (M & m) != 0 as per\n\t22.2.1.1.2.\n\nCo-Authored-By: Paolo Carlini <pcarlini@unitus.it>\n\nFrom-SVN: r72389", "tree": {"sha": "a094d6d2059ec27871b34a4bb53995ec54c60156", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a094d6d2059ec27871b34a4bb53995ec54c60156"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c411fdaebf75260d7590aa0b11926342ebe0940d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c411fdaebf75260d7590aa0b11926342ebe0940d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c411fdaebf75260d7590aa0b11926342ebe0940d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c411fdaebf75260d7590aa0b11926342ebe0940d/comments", "author": null, "committer": null, "parents": [{"sha": "33dac2abf58c44a47c72ceb76ecd9b4d510bfe99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33dac2abf58c44a47c72ceb76ecd9b4d510bfe99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33dac2abf58c44a47c72ceb76ecd9b4d510bfe99"}], "stats": {"total": 27, "additions": 17, "deletions": 10}, "files": [{"sha": "6f631d2dff7e20f540715ebfa87ec2dd1515dd4d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c411fdaebf75260d7590aa0b11926342ebe0940d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c411fdaebf75260d7590aa0b11926342ebe0940d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c411fdaebf75260d7590aa0b11926342ebe0940d", "patch": "@@ -1,3 +1,12 @@\n+2003-10-12  Andreas Tobler  <a.tobler@schweiz.ch>\n+\t    Paolo Carlini  <pcarlini@unitus.it>\n+\n+\tPR libstdc++/11844/11740 (cont)\n+\t* config/os/generic/ctype_inline.h (ctype<char>::is):\n+\tGenerically, use a bitmasksize of 15 (instead of 10);\n+\tFix the logic to actually return (M & m) != 0 as per\n+\t22.2.1.1.2.\n+\n 2003-10-11  Bernardo Innocenti  <bernie@develer.com>\n \n \t* crossconfig.m4 (*-uclinux*): New target."}, {"sha": "5f24fe69a79772224347cf7308714917b14d0892", "filename": "libstdc++-v3/config/os/generic/ctype_inline.h", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c411fdaebf75260d7590aa0b11926342ebe0940d/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c411fdaebf75260d7590aa0b11926342ebe0940d/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Fctype_inline.h?ref=c411fdaebf75260d7590aa0b11926342ebe0940d", "patch": "@@ -49,16 +49,14 @@\n       return _M_table[static_cast<unsigned char>(__c)] & __m;\n     else\n       {\n-\tbool __ret = true;\n-\tbool __any_match = false;\n-\tconst size_t __bitmasksize = 10; \n+\tbool __ret = false;\n+\tconst size_t __bitmasksize = 15; \n \tsize_t __bitcur = 0; // Lowest bitmask in ctype_base == 0\n-\tfor (;__ret && __bitcur <= __bitmasksize; ++__bitcur)\n+\tfor (; __bitcur <= __bitmasksize; ++__bitcur)\n \t  {\n-\t    mask __bit = static_cast<mask>(1 << __bitcur);\n+\t    const mask __bit = static_cast<mask>(1 << __bitcur);\n \t    if (__m & __bit)\n \t      {\n-\t\t__any_match = true;\n \t\tbool __testis;\n \t\tswitch (__bit)\n \t\t  {\n@@ -99,10 +97,10 @@\n \t\t    __testis = false;\n \t\t    break;\n \t\t  }\n-\t\t__ret &= __testis;\n+\t\t__ret |= __testis;\n \t      }\n \t  }\n-\treturn __ret & __any_match;\n+\treturn __ret;\n       }\n   }\n    \n@@ -116,15 +114,15 @@\n     else\n       {\n \t// Highest bitmask in ctype_base == 10.\n-\tconst size_t __bitmasksize = 10; \n+\tconst size_t __bitmasksize = 15; \n \tfor (;__low < __high; ++__vec, ++__low)\n \t  {\n \t    mask __m = 0;\n \t    // Lowest bitmask in ctype_base == 0\n \t    size_t __i = 0; \n \t    for (;__i <= __bitmasksize; ++__i)\n \t      {\n-\t\tmask __bit = static_cast<mask>(1 << __i);\n+\t\tconst mask __bit = static_cast<mask>(1 << __i);\n \t\tif (this->is(__bit, *__low))\n \t\t  __m |= __bit;\n \t      }"}]}