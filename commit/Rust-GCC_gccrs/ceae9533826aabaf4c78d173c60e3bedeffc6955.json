{"sha": "ceae9533826aabaf4c78d173c60e3bedeffc6955", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2VhZTk1MzM4MjZhYWJhZjRjNzhkMTczYzYwZTNiZWRlZmZjNjk1NQ==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-03-06T00:16:43Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-03-06T00:16:43Z"}, "message": "Daily bump.", "tree": {"sha": "4487c1830cfbaa951e580819a6a0e762719c8676", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4487c1830cfbaa951e580819a6a0e762719c8676"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ceae9533826aabaf4c78d173c60e3bedeffc6955", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ceae9533826aabaf4c78d173c60e3bedeffc6955", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ceae9533826aabaf4c78d173c60e3bedeffc6955", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ceae9533826aabaf4c78d173c60e3bedeffc6955/comments", "author": null, "committer": null, "parents": [{"sha": "02a3554879001e8f1405d17e096ed68fc3f76975", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02a3554879001e8f1405d17e096ed68fc3f76975", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02a3554879001e8f1405d17e096ed68fc3f76975"}], "stats": {"total": 270, "additions": 269, "deletions": 1}, "files": [{"sha": "8501643a7aa4c53c37623d9c362f43a71bef80b6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceae9533826aabaf4c78d173c60e3bedeffc6955/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceae9533826aabaf4c78d173c60e3bedeffc6955/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ceae9533826aabaf4c78d173c60e3bedeffc6955", "patch": "@@ -1,3 +1,43 @@\n+2021-03-05  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/99322\n+\t* tree-cfg.c (bb_to_omp_idx): New variable.\n+\t(execute_build_cfg): Release the bb_to_omp_idx vector after\n+\tcleanup_tree_cfg returns.\n+\t(handle_abnormal_edges): Remove bb_to_omp_idx argument, adjust\n+\tfor bb_to_omp_idx being a vec<int> instead of pointer to array\n+\tof ints.\n+\t(make_edges): Remove bb_to_omp_idx local variable, don't pass\n+\tit to handle_abnormal_edges, adjust for bb_to_omp_idx being a\n+\tvec<int> instead of pointer to array of ints and don't free/release\n+\tit at the end.\n+\t(remove_bb): When removing a bb and placing forced label somewhere\n+\telse, ensure it is put into the same OpenMP region during cfg\n+\tpass if possible or to entry successor as fallback.  Unregister\n+\tbb from bb_to_omp_idx.\n+\n+2021-03-05  Vladimir N. Makarov  <vmakarov@redhat.com>\n+\n+\tPR target/99378\n+\t* lra-constraints.c (process_address_1): Skip decomposing address\n+\tfor asm insn operand with unknown constraint.\n+\n+2021-03-05  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR ipa/98078\n+\t* cgraph.c (cgraph_edge::set_call_stmt): Do not update all\n+\tcorresponding speculative edges if we are about to resolve\n+\tsepculation.  Make edge direct (and so resolve speculations) before\n+\tremoving it from call_site_hash.\n+\t(cgraph_edge::make_direct): Relax the initial assert to allow calling\n+\tthe function on speculative direct edges.\n+\n+2021-03-05  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR rtl-optimization/99376\n+\t* rtlanal.c (nonzero_bits1) <arithmetic operators>: If the number\n+\tof low-order zero bits is too large, set the result to 0 directly.\n+\n 2021-03-04  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/93235"}, {"sha": "e282419d00b41b19ab895d797cc0f3b8cb6b34e1", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceae9533826aabaf4c78d173c60e3bedeffc6955/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceae9533826aabaf4c78d173c60e3bedeffc6955/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=ceae9533826aabaf4c78d173c60e3bedeffc6955", "patch": "@@ -1 +1 @@\n-20210305\n+20210306"}, {"sha": "0884309faed1566cd6a79f52bbec230a2c376c7c", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceae9533826aabaf4c78d173c60e3bedeffc6955/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceae9533826aabaf4c78d173c60e3bedeffc6955/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ceae9533826aabaf4c78d173c60e3bedeffc6955", "patch": "@@ -1,3 +1,10 @@\n+2021-03-05  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR ada/99264\n+\t* init.c (__gnat_alternate_sta) [Linux]: Remove preprocessor test on\n+\tMINSIGSTKSZ and bump size to 32KB.\n+\t* libgnarl/s-osinte__linux.ads (Alternate_Stack_Size): Bump to 32KB.\n+\n 2021-03-02  Mikael Pettersson  <mikpelinux@gmail.com>\n \n \tPR bootstrap/98590"}, {"sha": "d1ce4b47211d1ad0f71abe6a200ec30a62673882", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceae9533826aabaf4c78d173c60e3bedeffc6955/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceae9533826aabaf4c78d173c60e3bedeffc6955/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=ceae9533826aabaf4c78d173c60e3bedeffc6955", "patch": "@@ -1,3 +1,8 @@\n+2021-03-05  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* c-ada-spec.c (dump_ada_declaration) <TYPE_DECL>: Dump nested types\n+\tafter entering the separate class package, if any.\n+\n 2021-03-04  Richard Biener  <rguenther@suse.de>\n \n \t* c-pretty-print.c (c_pretty_printer::direct_abstract_declarator):"}, {"sha": "214e57b9e236fd489c54e1eb360599ec10b100b2", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceae9533826aabaf4c78d173c60e3bedeffc6955/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceae9533826aabaf4c78d173c60e3bedeffc6955/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=ceae9533826aabaf4c78d173c60e3bedeffc6955", "patch": "@@ -1,3 +1,8 @@\n+2021-03-05  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR c/99137\n+\t* c-parser.c (c_parser_oacc_clause_async): Reject comma expressions.\n+\n 2021-02-24  Martin Sebor  <msebor@redhat.com>\n \n \tPR middle-end/97172"}, {"sha": "f8e86e810232a5534a9de90fde027ff901bfa2ec", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceae9533826aabaf4c78d173c60e3bedeffc6955/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceae9533826aabaf4c78d173c60e3bedeffc6955/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ceae9533826aabaf4c78d173c60e3bedeffc6955", "patch": "@@ -1,3 +1,66 @@\n+2021-03-05  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/99374\n+\t* call.c (standard_conversion): When converting pointers to\n+\tmember, don't return NULL when the bases are equivalent but\n+\tincomplete.\n+\n+2021-03-05  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/99120\n+\t* name-lookup.c (check_local_shadow): Check if the type of decl\n+\tis non-null before checking TYPE_PTR*.\n+\n+2021-03-05  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/99245\n+\t* module.cc (module_state::write_cluster): Relax binding assert.\n+\n+2021-03-05  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/99377\n+\t* pt.c (instantiate_decl): Call set_instantiating_module.\n+\n+2021-03-05  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR c++/98118\n+\t* coroutines.cc (build_co_await): Use type_build_ctor_call()\n+\tto determine cases when a CTOR needs to be built.\n+\t(flatten_await_stmt): Likewise.\n+\t(morph_fn_to_coro): Likewise.\n+\n+2021-03-05  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR c++/95616\n+\t* coroutines.cc (coro_diagnose_throwing_fn): New helper.\n+\t(coro_diagnose_throwing_final_aw_expr): New helper.\n+\t(build_co_await): Diagnose throwing final await expression\n+\tcomponents.\n+\t(build_init_or_final_await): Diagnose a throwing promise\n+\tfinal_suspend() call.\n+\n+2021-03-05  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR c++/95615\n+\t* coroutines.cc (struct param_info): Track parameter copies that need\n+\ta DTOR.\n+\t(coro_get_frame_dtor): New helper function factored from build_actor().\n+\t(build_actor_fn): Use coro_get_frame_dtor().\n+\t(morph_fn_to_coro): Track parameters that need DTORs on exception,\n+\tlikewise the frame promise and the return object.  On exception, run the\n+\tDTORs for these, destroy the frame and then rethrow the exception.\n+\n+2021-03-05  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/99389\n+\t* pt.c (instantiate_class_template_1): Set instantiating module\n+\there.\n+\n+2021-03-05  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR c/99137\n+\t* parser.c (cp_parser_oacc_clause_async): Reject comma expressions.\n+\n 2021-03-04  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/88146"}, {"sha": "9e21ed564c3489e425464eb7db4483eb7f60af73", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceae9533826aabaf4c78d173c60e3bedeffc6955/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceae9533826aabaf4c78d173c60e3bedeffc6955/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=ceae9533826aabaf4c78d173c60e3bedeffc6955", "patch": "@@ -1,3 +1,11 @@\n+2021-03-05  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/99355\n+\tPR fortran/57871\n+\t* invoke.texi (-freal{4,8}-real-*): Extend description.\n+\t* primary.c (match_real_constant): Also promote real literals\n+\twith '_kind' number.\n+\n 2021-03-04  Tobias Burnus  <tobias@codesourcery.com>\n \n \tPR fortran/99355"}, {"sha": "ef4926cb1fb8cdf13c1a8587baa89a795efe2046", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceae9533826aabaf4c78d173c60e3bedeffc6955/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceae9533826aabaf4c78d173c60e3bedeffc6955/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ceae9533826aabaf4c78d173c60e3bedeffc6955", "patch": "@@ -1,3 +1,112 @@\n+2021-03-05  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/99374\n+\t* g++.dg/cpp1z/noexcept-type23.C: New test.\n+\n+2021-03-05  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/99120\n+\t* g++.dg/warn/Wshadow-17.C: New test.\n+\n+2021-03-05  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c/99363\n+\t* gcc.dg/attr-flatten-1.c: Adjust.\n+\n+2021-03-05  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/99322\n+\t* c-c++-common/gomp/pr99322.c: New test.\n+\n+2021-03-05  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/99245\n+\t* g++.dg/modules/pr99245_a.H: New.\n+\t* g++.dg/modules/pr99245_b.H: New.\n+\n+2021-03-05  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR libfortran/99218\n+\t* gfortran.dg/matmul_21.f90: New test.\n+\n+2021-03-05  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/99377\n+\t* g++.dg/modules/pr99377_a.H: New.\n+\t* g++.dg/modules/pr99377_b.C: New.\n+\t* g++.dg/modules/pr99377_c.C: New.\n+\n+2021-03-05  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR c++/98118\n+\t* g++.dg/coroutines/pr98118.C: New test.\n+\n+2021-03-05  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR c++/95616\n+\t* g++.dg/coroutines/pr95616-0-no-exceptions.C: New test.\n+\t* g++.dg/coroutines/pr95616-0.C: New test.\n+\t* g++.dg/coroutines/pr95616-1-no-exceptions.C: New test.\n+\t* g++.dg/coroutines/pr95616-1.C: New test.\n+\t* g++.dg/coroutines/pr95616-2.C: New test.\n+\t* g++.dg/coroutines/pr95616-3-no-exceptions.C: New test.\n+\t* g++.dg/coroutines/pr95616-3.C: New test.\n+\t* g++.dg/coroutines/pr95616-4.C: New test.\n+\t* g++.dg/coroutines/pr95616-5.C: New test.\n+\t* g++.dg/coroutines/pr95616-6.C: New test.\n+\n+2021-03-05  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR c++/95615\n+\t* g++.dg/coroutines/torture/pr95615-01.C: New test.\n+\t* g++.dg/coroutines/torture/pr95615-02.C: New test.\n+\t* g++.dg/coroutines/torture/pr95615-03.C: New test.\n+\t* g++.dg/coroutines/torture/pr95615-04.C: New test.\n+\t* g++.dg/coroutines/torture/pr95615-05.C: New test.\n+\t* g++.dg/coroutines/torture/pr95615.inc: New file.\n+\n+2021-03-05  Vladimir N. Makarov  <vmakarov@redhat.com>\n+\n+\tPR target/99378\n+\t* gcc.target/i386/pr99123-2.c: New.\n+\n+2021-03-05  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/99389\n+\t* g++.dg/modules/pr99389_a.H: New.\n+\t* g++.dg/modules/pr99389_b.C: New.\n+\t* g++.dg/modules/pr99389_c.C: New.\n+\n+2021-03-05  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR c/99137\n+\t* c-c++-common/goacc/asyncwait-1.c: Update dg-error; add\n+\tadditional test.\n+\n+2021-03-05  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gfortran.dg/real4-10-real8-10.f90: Add check for real literals\n+\twith '_kind' number.\n+\t* gfortran.dg/real4-10-real8-16.f90: Likewise.\n+\t* gfortran.dg/real4-10-real8-4.f90: Likewise.\n+\t* gfortran.dg/real4-10.f90: Likewise.\n+\t* gfortran.dg/real4-16-real8-10.f90: Likewise.\n+\t* gfortran.dg/real4-16-real8-16.f90: Likewise.\n+\t* gfortran.dg/real4-16-real8-4.f90: Likewise.\n+\t* gfortran.dg/real4-16.f90: Likewise.\n+\t* gfortran.dg/real4-8-real8-10.f90: Likewise.\n+\t* gfortran.dg/real4-8-real8-16.f90: Likewise.\n+\t* gfortran.dg/real4-8-real8-4.f90: Likewise.\n+\t* gfortran.dg/real4-8.f90: Likewise.\n+\t* gfortran.dg/real8-10.f90: Likewise.\n+\t* gfortran.dg/real8-16.f90: Likewise.\n+\t* gfortran.dg/real8-4.f90: Likewise.\n+\n+2021-03-05  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\tPR debug/66668\n+\t* gcc.dg/debug/dwarf2/stacked-qualified-types-3.c: xfail for cris-*-*\n+\n 2021-03-04  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* lib/prune.exp: Prune useless output caused by a linker bug."}, {"sha": "819be3929fa7ed9915a2feff4310c7e43de0096e", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceae9533826aabaf4c78d173c60e3bedeffc6955/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceae9533826aabaf4c78d173c60e3bedeffc6955/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=ceae9533826aabaf4c78d173c60e3bedeffc6955", "patch": "@@ -1,3 +1,34 @@\n+2021-03-05  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR libfortran/99218\n+\t* m4/matmul_internal.m4: Invoke tuned matmul only for rank(b)>1.\n+\t* generated/matmul_c10.c: Regenerated.\n+\t* generated/matmul_c16.c: Likewise.\n+\t* generated/matmul_c4.c: Likewise.\n+\t* generated/matmul_c8.c: Likewise.\n+\t* generated/matmul_i1.c: Likewise.\n+\t* generated/matmul_i16.c: Likewise.\n+\t* generated/matmul_i2.c: Likewise.\n+\t* generated/matmul_i4.c: Likewise.\n+\t* generated/matmul_i8.c: Likewise.\n+\t* generated/matmul_r10.c: Likewise.\n+\t* generated/matmul_r16.c: Likewise.\n+\t* generated/matmul_r4.c: Likewise.\n+\t* generated/matmul_r8.c: Likewise.\n+\t* generated/matmulavx128_c10.c: Likewise.\n+\t* generated/matmulavx128_c16.c: Likewise.\n+\t* generated/matmulavx128_c4.c: Likewise.\n+\t* generated/matmulavx128_c8.c: Likewise.\n+\t* generated/matmulavx128_i1.c: Likewise.\n+\t* generated/matmulavx128_i16.c: Likewise.\n+\t* generated/matmulavx128_i2.c: Likewise.\n+\t* generated/matmulavx128_i4.c: Likewise.\n+\t* generated/matmulavx128_i8.c: Likewise.\n+\t* generated/matmulavx128_r10.c: Likewise.\n+\t* generated/matmulavx128_r16.c: Likewise.\n+\t* generated/matmulavx128_r4.c: Likewise.\n+\t* generated/matmulavx128_r8.c: Likewise.\n+\n 2021-03-03  Vittorio Zecca  <zeccav@gmail.com>\n \t    Tobias Burnus  <tobias@codesourcery.com>\n "}]}