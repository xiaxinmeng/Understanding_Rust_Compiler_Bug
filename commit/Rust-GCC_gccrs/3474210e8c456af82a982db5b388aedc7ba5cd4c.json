{"sha": "3474210e8c456af82a982db5b388aedc7ba5cd4c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQ3NDIxMGU4YzQ1NmFmODJhOTgyZGI1YjM4OGFlZGM3YmE1Y2Q0Yw==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2012-09-04T08:35:19Z"}, "committer": {"name": "Christophe Lyon", "email": "clyon@gcc.gnu.org", "date": "2012-09-04T08:35:19Z"}, "message": "arm.c (arm_expand_builtin): Replace gen_rtx_CONST_INT by GEN_INT.\n\n2012-09-04  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\t* config/arm/arm.c (arm_expand_builtin): Replace gen_rtx_CONST_INT\n\tby GEN_INT.\n\t(arm_emit_coreregs_64bit_shift): Likewise.\n\nFrom-SVN: r190912", "tree": {"sha": "70920b7e33239f770aa88562bf4da64b7b7c47b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/70920b7e33239f770aa88562bf4da64b7b7c47b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3474210e8c456af82a982db5b388aedc7ba5cd4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3474210e8c456af82a982db5b388aedc7ba5cd4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3474210e8c456af82a982db5b388aedc7ba5cd4c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3474210e8c456af82a982db5b388aedc7ba5cd4c/comments", "author": null, "committer": null, "parents": [{"sha": "434641a57b90584bffa4e8def3f900c7d102bfdf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/434641a57b90584bffa4e8def3f900c7d102bfdf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/434641a57b90584bffa4e8def3f900c7d102bfdf"}], "stats": {"total": 23, "additions": 14, "deletions": 9}, "files": [{"sha": "d034c10e4b3f283d055be3aa559863307de9f5fa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3474210e8c456af82a982db5b388aedc7ba5cd4c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3474210e8c456af82a982db5b388aedc7ba5cd4c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3474210e8c456af82a982db5b388aedc7ba5cd4c", "patch": "@@ -1,3 +1,9 @@\n+2012-09-04  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* config/arm/arm.c (arm_expand_builtin): Replace gen_rtx_CONST_INT\n+\tby GEN_INT.\n+\t(arm_emit_coreregs_64bit_shift): Likewise.\n+\n 2012-09-04  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* config/arm/arm.c (arm_evpc_neon_vext): New"}, {"sha": "b49fa466e45c7514029ca1c3e5a37baaa4dc6bc1", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3474210e8c456af82a982db5b388aedc7ba5cd4c/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3474210e8c456af82a982db5b388aedc7ba5cd4c/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=3474210e8c456af82a982db5b388aedc7ba5cd4c", "patch": "@@ -20959,7 +20959,7 @@ arm_expand_builtin (tree exp,\n \t  else if (icode == CODE_FOR_iwmmxt_tinsrw && (selector < 0 ||selector > 1))\n \t    error (\"the range of selector should be in 0 to 1\");\n \t  mask <<= selector;\n-\t  op2 = gen_rtx_CONST_INT (SImode, mask);\n+\t  op2 = GEN_INT (mask);\n \t}\n       if (target == 0\n \t  || GET_MODE (target) != tmode\n@@ -26290,12 +26290,12 @@ arm_emit_coreregs_64bit_shift (enum rtx_code code, rtx out, rtx in,\n \n   /* Macros to make following code more readable.  */\n   #define SUB_32(DEST,SRC) \\\n-\t    gen_addsi3 ((DEST), (SRC), gen_rtx_CONST_INT (VOIDmode, -32))\n+\t    gen_addsi3 ((DEST), (SRC), GEN_INT (-32))\n   #define RSB_32(DEST,SRC) \\\n-\t    gen_subsi3 ((DEST), gen_rtx_CONST_INT (VOIDmode, 32), (SRC))\n+\t    gen_subsi3 ((DEST), GEN_INT (32), (SRC))\n   #define SUB_S_32(DEST,SRC) \\\n \t    gen_addsi3_compare0 ((DEST), (SRC), \\\n-\t\t\t\t gen_rtx_CONST_INT (VOIDmode, -32))\n+\t\t\t\t GEN_INT (-32))\n   #define SET(DEST,SRC) \\\n \t    gen_rtx_SET (SImode, (DEST), (SRC))\n   #define SHIFT(CODE,SRC,AMOUNT) \\\n@@ -26331,7 +26331,7 @@ arm_emit_coreregs_64bit_shift (enum rtx_code code, rtx out, rtx in,\n \t{\n \t  if (code == ASHIFTRT)\n \t    {\n-\t      rtx const31_rtx = gen_rtx_CONST_INT (VOIDmode, 31);\n+\t      rtx const31_rtx = GEN_INT (31);\n \t      emit_insn (SET (out_down, SHIFT (code, in_up, const31_rtx)));\n \t      emit_insn (SET (out_up, SHIFT (code, in_up, const31_rtx)));\n \t    }\n@@ -26343,8 +26343,7 @@ arm_emit_coreregs_64bit_shift (enum rtx_code code, rtx out, rtx in,\n       else if (INTVAL (amount) < 32)\n \t{\n \t  /* Shifts by a constant less than 32.  */\n-\t  rtx reverse_amount = gen_rtx_CONST_INT (VOIDmode,\n-\t\t\t\t\t\t  32 - INTVAL (amount));\n+\t  rtx reverse_amount = GEN_INT (32 - INTVAL (amount));\n \n \t  emit_insn (SET (out_down, LSHIFT (code, in_down, amount)));\n \t  emit_insn (SET (out_down,\n@@ -26355,12 +26354,12 @@ arm_emit_coreregs_64bit_shift (enum rtx_code code, rtx out, rtx in,\n       else\n \t{\n \t  /* Shifts by a constant greater than 31.  */\n-\t  rtx adj_amount = gen_rtx_CONST_INT (VOIDmode, INTVAL (amount) - 32);\n+\t  rtx adj_amount = GEN_INT (INTVAL (amount) - 32);\n \n \t  emit_insn (SET (out_down, SHIFT (code, in_up, adj_amount)));\n \t  if (code == ASHIFTRT)\n \t    emit_insn (gen_ashrsi3 (out_up, in_up,\n-\t\t\t\t    gen_rtx_CONST_INT (VOIDmode, 31)));\n+\t\t\t\t    GEN_INT (31)));\n \t  else\n \t    emit_insn (SET (out_up, const0_rtx));\n \t}"}]}