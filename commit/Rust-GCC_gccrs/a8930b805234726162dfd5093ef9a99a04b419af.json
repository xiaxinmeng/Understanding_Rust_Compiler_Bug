{"sha": "a8930b805234726162dfd5093ef9a99a04b419af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTg5MzBiODA1MjM0NzI2MTYyZGZkNTA5M2VmOWE5OWEwNGI0MTlhZg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-09-09T10:39:19Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-09-09T10:39:19Z"}, "message": "[multiple changes]\n\n2010-09-09  Vincent Celier  <celier@adacore.com>\n\n\t* prj-proc.adb: Minor comment spelling error fix.\n\t* osint.ads (Env_Vars_Case_Sensitive): Use function\n\tGet_Env_Vars_Case_Sensitive, not Get_File_Names_Case_Sensitive to\n\tcompute value.\n\n2010-09-09  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_res.adb (Resolve_Equality_Op): Implement Ada2012 rule for\n\tresolution of conditional expressions whose dependent expressions are\n\tanonymous access types.\n\n2010-09-09  Robert Dewar  <dewar@adacore.com>\n\n\t* a-ststio.adb: Minor code reorganization.\n\t* s-direio.adb, prj.adb, prj-nmsc.adb, sem_type.adb: Remove redundant\n\tconversion.\n\t* types.ads: Minor reformatting.\n\t* binde.adb, vms_conv.adb, gnatls.adb, s-strxdr.adb, uintp.adb: Remove\n\tredundant conversions.\n\t* output.adb: Minor reformatting.\n\t* sem_ch8.adb (Find_Type): Test for redundant base applies to user\n\ttypes.\n\t* opt.ads: Add pragma Ordered for Verbosity_Level.\n\t* prj.ads: Add pragma Ordered for type Verbosity.\n\nFrom-SVN: r164072", "tree": {"sha": "e46a62516e22d1da8b082783f8a39c0932d981ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e46a62516e22d1da8b082783f8a39c0932d981ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a8930b805234726162dfd5093ef9a99a04b419af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8930b805234726162dfd5093ef9a99a04b419af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8930b805234726162dfd5093ef9a99a04b419af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8930b805234726162dfd5093ef9a99a04b419af/comments", "author": null, "committer": null, "parents": [{"sha": "d2795d5831eaa87fe3945a354801d09a40925f56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2795d5831eaa87fe3945a354801d09a40925f56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2795d5831eaa87fe3945a354801d09a40925f56"}], "stats": {"total": 174, "additions": 119, "deletions": 55}, "files": [{"sha": "2c0de6f13b008909412f597d161c3b7b88a95ae9", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8930b805234726162dfd5093ef9a99a04b419af/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8930b805234726162dfd5093ef9a99a04b419af/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a8930b805234726162dfd5093ef9a99a04b419af", "patch": "@@ -1,3 +1,30 @@\n+2010-09-09  Vincent Celier  <celier@adacore.com>\n+\n+\t* prj-proc.adb: Minor comment spelling error fix.\n+\t* osint.ads (Env_Vars_Case_Sensitive): Use function\n+\tGet_Env_Vars_Case_Sensitive, not Get_File_Names_Case_Sensitive to\n+\tcompute value.\n+\n+2010-09-09  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Equality_Op): Implement Ada2012 rule for\n+\tresolution of conditional expressions whose dependent expressions are\n+\tanonymous access types.\n+\n+2010-09-09  Robert Dewar  <dewar@adacore.com>\n+\n+\t* a-ststio.adb: Minor code reorganization.\n+\t* s-direio.adb, prj.adb, prj-nmsc.adb, sem_type.adb: Remove redundant\n+\tconversion.\n+\t* types.ads: Minor reformatting.\n+\t* binde.adb, vms_conv.adb, gnatls.adb, s-strxdr.adb, uintp.adb: Remove\n+\tredundant conversions.\n+\t* output.adb: Minor reformatting.\n+\t* sem_ch8.adb (Find_Type): Test for redundant base applies to user\n+\ttypes.\n+\t* opt.ads: Add pragma Ordered for Verbosity_Level.\n+\t* prj.ads: Add pragma Ordered for type Verbosity.\n+\n 2010-09-09  Vincent Celier  <celier@adacore.com>\n \n \t* osint.adb (Canonical_Case_File_Name): Use procedure To_Lower in"}, {"sha": "c5da571495f26c63c013b8bdb742cc758aee0409", "filename": "gcc/ada/a-ststio.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8930b805234726162dfd5093ef9a99a04b419af/gcc%2Fada%2Fa-ststio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8930b805234726162dfd5093ef9a99a04b419af/gcc%2Fada%2Fa-ststio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-ststio.adb?ref=a8930b805234726162dfd5093ef9a99a04b419af", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -147,7 +147,7 @@ package body Ada.Streams.Stream_IO is\n    function End_Of_File (File : File_Type) return Boolean is\n    begin\n       FIO.Check_Read_Status (AP (File));\n-      return Count (File.Index) > Size (File);\n+      return File.Index > Size (File);\n    end End_Of_File;\n \n    -----------\n@@ -175,7 +175,7 @@ package body Ada.Streams.Stream_IO is\n    function Index (File : File_Type) return Positive_Count is\n    begin\n       FIO.Check_File_Open (AP (File));\n-      return Count (File.Index);\n+      return File.Index;\n    end Index;\n \n    -------------"}, {"sha": "0dc652186449c0fd50b244b836ecf1a2765928fb", "filename": "gcc/ada/binde.adb", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8930b805234726162dfd5093ef9a99a04b419af/gcc%2Fada%2Fbinde.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8930b805234726162dfd5093ef9a99a04b419af/gcc%2Fada%2Fbinde.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbinde.adb?ref=a8930b805234726162dfd5093ef9a99a04b419af", "patch": "@@ -614,7 +614,7 @@ package body Binde is\n             Write_Str (\"  decrementing Num_Pred for unit \");\n             Write_Unit_Name (Units.Table (U).Uname);\n             Write_Str (\" new value = \");\n-            Write_Int (Int (UNR.Table (U).Num_Pred));\n+            Write_Int (UNR.Table (U).Num_Pred);\n             Write_Eol;\n          end if;\n \n@@ -1152,7 +1152,7 @@ package body Binde is\n                   Write_Str\n                     (\"    Elaborate_Body = True, Num_Pred for body = \");\n                   Write_Int\n-                    (Int (UNR.Table (Corresponding_Body (U)).Num_Pred));\n+                    (UNR.Table (Corresponding_Body (U)).Num_Pred);\n                else\n                   Write_Str\n                     (\"    Elaborate_Body = False\");\n@@ -1243,8 +1243,7 @@ package body Binde is\n                      goto Next_With;\n                   end if;\n \n-                  Withed_Unit :=\n-                    Unit_Id (Unit_Id_Of (Withs.Table (W).Uname));\n+                  Withed_Unit := Unit_Id_Of (Withs.Table (W).Uname);\n \n                   --  Pragma Elaborate_All case, for this we use the recursive\n                   --  Elab_All_Links procedure to establish the links."}, {"sha": "b684ebbc8edfa6eedb8360ea3d80d1be334adc41", "filename": "gcc/ada/gnatls.adb", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8930b805234726162dfd5093ef9a99a04b419af/gcc%2Fada%2Fgnatls.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8930b805234726162dfd5093ef9a99a04b419af/gcc%2Fada%2Fgnatls.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatls.adb?ref=a8930b805234726162dfd5093ef9a99a04b419af", "patch": "@@ -1362,13 +1362,11 @@ procedure Gnatls is\n \n                declare\n                   Src_Path_Name : constant String_Ptr :=\n-                                    String_Ptr\n-                                      (Get_RTS_Search_Dir\n-                                        (Argv (7 .. Argv'Last), Include));\n+                                    Get_RTS_Search_Dir\n+                                      (Argv (7 .. Argv'Last), Include);\n                   Lib_Path_Name : constant String_Ptr :=\n-                                    String_Ptr\n-                                      (Get_RTS_Search_Dir\n-                                        (Argv (7 .. Argv'Last), Objects));\n+                                    Get_RTS_Search_Dir\n+                                      (Argv (7 .. Argv'Last), Objects);\n \n                begin\n                   if Src_Path_Name /= null"}, {"sha": "ac893a1403b515dd02cd47a6a6d5f29642142aff", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8930b805234726162dfd5093ef9a99a04b419af/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8930b805234726162dfd5093ef9a99a04b419af/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=a8930b805234726162dfd5093ef9a99a04b419af", "patch": "@@ -1306,6 +1306,7 @@ package Opt is\n    --  information sent to standard output, also header, copyright and summary)\n \n    type Verbosity_Level_Type is (None, Low, Medium, High);\n+   pragma Ordered (Verbosity_Level_Type);\n    Verbosity_Level : Verbosity_Level_Type := High;\n    --  GNATMAKE, GPRMAKE\n    --  Modified by gnatmake or gprmake switches -v, -vl, -vm, -vh. Indicates"}, {"sha": "9ec26bff3b4241d82678644db35b2414a6c455aa", "filename": "gcc/ada/osint.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8930b805234726162dfd5093ef9a99a04b419af/gcc%2Fada%2Fosint.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8930b805234726162dfd5093ef9a99a04b419af/gcc%2Fada%2Fosint.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fosint.ads?ref=a8930b805234726162dfd5093ef9a99a04b419af", "patch": "@@ -98,7 +98,7 @@ package Osint is\n    pragma Import (C, Get_Env_Vars_Case_Sensitive,\n                   \"__gnat_get_env_vars_case_sensitive\");\n    Env_Vars_Case_Sensitive : constant Boolean :=\n-                                 Get_File_Names_Case_Sensitive /= 0;\n+                                 Get_Env_Vars_Case_Sensitive /= 0;\n    --  Set to indicate whether the operating system convention is for\n    --  environment variable names to be case sensitive (e.g., in Unix, set\n    --  True), or non case sensitive (e.g., in Windows, set False)."}, {"sha": "5ac680176b838c3e91efc3a356fa516fd8b16fe0", "filename": "gcc/ada/output.adb", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8930b805234726162dfd5093ef9a99a04b419af/gcc%2Fada%2Foutput.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8930b805234726162dfd5093ef9a99a04b419af/gcc%2Fada%2Foutput.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Foutput.adb?ref=a8930b805234726162dfd5093ef9a99a04b419af", "patch": "@@ -129,18 +129,20 @@ package body Output is\n \n             else\n                declare\n-                  Indented_Buffer : constant String\n-                    := (1 .. Cur_Indentation => ' ') & Buffer (1 .. Len);\n+                  Indented_Buffer : constant String :=\n+                                      (1 .. Cur_Indentation => ' ') &\n+                                                          Buffer (1 .. Len);\n                begin\n                   Write_Buffer (Indented_Buffer);\n                end;\n             end if;\n \n          exception\n             when Write_Error =>\n-               --  If there are errors with standard error, just quit.\n-               --  Otherwise, set the output to standard error before reporting\n-               --  a failure and quitting.\n+\n+               --  If there are errors with standard error just quit. Otherwise\n+               --  set the output to standard error before reporting a failure\n+               --  and quitting.\n \n                if Current_FD /= Standerr then\n                   Current_FD := Standerr;"}, {"sha": "1a7e4c5261e8ff1a1a860ab44290e8741fe63248", "filename": "gcc/ada/prj-nmsc.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8930b805234726162dfd5093ef9a99a04b419af/gcc%2Fada%2Fprj-nmsc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8930b805234726162dfd5093ef9a99a04b419af/gcc%2Fada%2Fprj-nmsc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-nmsc.adb?ref=a8930b805234726162dfd5093ef9a99a04b419af", "patch": "@@ -5505,7 +5505,7 @@ package body Prj.Nmsc is\n             Element := Data.Tree.String_Elements.Table (Current);\n             if Element.Value /= No_Name then\n                Element.Value :=\n-                 Name_Id (Canonical_Case_File_Name (Name_Id (Element.Value)));\n+                 Name_Id (Canonical_Case_File_Name (Element.Value));\n                Data.Tree.String_Elements.Table (Current) := Element;\n             end if;\n \n@@ -6519,7 +6519,7 @@ package body Prj.Nmsc is\n \n                   if not Found then\n                      Error_Msg_Name_1 := Name_Id (Source.Display_File);\n-                     Error_Msg_Name_2 := Name_Id (Source.Unit.Name);\n+                     Error_Msg_Name_2 := Source.Unit.Name;\n                      Error_Or_Warning\n                        (Data.Flags, Data.Flags.Missing_Source_Files,\n                         \"source file %% for unit %% not found\","}, {"sha": "2b94067ed90518657f97123a4a4cd3690061f371", "filename": "gcc/ada/prj-proc.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8930b805234726162dfd5093ef9a99a04b419af/gcc%2Fada%2Fprj-proc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8930b805234726162dfd5093ef9a99a04b419af/gcc%2Fada%2Fprj-proc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-proc.adb?ref=a8930b805234726162dfd5093ef9a99a04b419af", "patch": "@@ -346,7 +346,7 @@ package body Prj.Proc is\n          Var := In_Tree.Variable_Elements.Table (V1);\n          V1  := Var.Next;\n \n-         --  Do not copy the value of attribute inker_Options if Restricted\n+         --  Do not copy the value of attribute Linker_Options if Restricted\n \n          if Restricted and then Var.Name = Snames.Name_Linker_Options then\n             Var.Value.Values := Nil_String;"}, {"sha": "59acced3020611254e6f7b43c72603084ae8b875", "filename": "gcc/ada/prj.adb", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8930b805234726162dfd5093ef9a99a04b419af/gcc%2Fada%2Fprj.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8930b805234726162dfd5093ef9a99a04b419af/gcc%2Fada%2Fprj.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj.adb?ref=a8930b805234726162dfd5093ef9a99a04b419af", "patch": "@@ -247,16 +247,10 @@ package body Prj is\n             return No_File;\n \n          when Makefile =>\n-            return\n-              File_Name_Type\n-                (Extend_Name\n-                   (Source_File_Name, Makefile_Dependency_Suffix));\n+            return Extend_Name (Source_File_Name, Makefile_Dependency_Suffix);\n \n          when ALI_File =>\n-            return\n-              File_Name_Type\n-                (Extend_Name\n-                   (Source_File_Name, ALI_Dependency_Suffix));\n+            return Extend_Name (Source_File_Name, ALI_Dependency_Suffix);\n       end case;\n    end Dependency_Name;\n "}, {"sha": "c353cca6f3688cd1b87c9161ac63c1fb1f9097b6", "filename": "gcc/ada/prj.ads", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8930b805234726162dfd5093ef9a99a04b419af/gcc%2Fada%2Fprj.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8930b805234726162dfd5093ef9a99a04b419af/gcc%2Fada%2Fprj.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj.ads?ref=a8930b805234726162dfd5093ef9a99a04b419af", "patch": "@@ -820,6 +820,7 @@ package Prj is\n       Equal      => \"=\");\n \n    type Verbosity is (Default, Medium, High);\n+   pragma Ordered (Verbosity);\n    --  Verbosity when parsing GNAT Project Files\n    --    Default is default (very quiet, if no errors).\n    --    Medium is more verbose."}, {"sha": "ef4c3ea9cf1d3761e92aa374db948ee1fe4b5c9a", "filename": "gcc/ada/s-direio.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8930b805234726162dfd5093ef9a99a04b419af/gcc%2Fada%2Fs-direio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8930b805234726162dfd5093ef9a99a04b419af/gcc%2Fada%2Fs-direio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-direio.adb?ref=a8930b805234726162dfd5093ef9a99a04b419af", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -127,7 +127,7 @@ package body System.Direct_IO is\n    function End_Of_File (File : File_Type) return Boolean is\n    begin\n       FIO.Check_Read_Status (AP (File));\n-      return Count (File.Index) > Size (File);\n+      return File.Index > Size (File);\n    end End_Of_File;\n \n    -----------\n@@ -137,7 +137,7 @@ package body System.Direct_IO is\n    function Index (File : File_Type) return Positive_Count is\n    begin\n       FIO.Check_File_Open (AP (File));\n-      return Count (File.Index);\n+      return File.Index;\n    end Index;\n \n    ----------"}, {"sha": "86e190a98b5e14c04261e0f571c929c73ffce903", "filename": "gcc/ada/s-strxdr.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8930b805234726162dfd5093ef9a99a04b419af/gcc%2Fada%2Fs-strxdr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8930b805234726162dfd5093ef9a99a04b419af/gcc%2Fada%2Fs-strxdr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-strxdr.adb?ref=a8930b805234726162dfd5093ef9a99a04b419af", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---         Copyright (C) 1996-2009, Free Software Foundation, Inc.          --\n+--         Copyright (C) 1996-2010, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GARLIC is free software;  you can redistribute it and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1466,7 +1466,7 @@ package body System.Stream_Attributes is\n          Exponent   := Long_Unsigned (E + E_Bias);\n          F          := Long_Long_Float'Scaling (F, F_Size - HFS);\n          Fraction_1 := Long_Long_Unsigned (Long_Long_Float'Floor (F));\n-         F          := Long_Long_Float (F - Long_Long_Float (Fraction_1));\n+         F          := F - Long_Long_Float (Fraction_1);\n          F          := Long_Long_Float'Scaling (F, HFS);\n          Fraction_2 := Long_Long_Unsigned (Long_Long_Float'Floor (F));\n       end if;"}, {"sha": "b61eeabc3d6555ea6992032b8e47518816166f68", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8930b805234726162dfd5093ef9a99a04b419af/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8930b805234726162dfd5093ef9a99a04b419af/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=a8930b805234726162dfd5093ef9a99a04b419af", "patch": "@@ -5766,9 +5766,8 @@ package body Sem_Ch8 is\n                     (\"prefix of Base attribute must be scalar type\",\n                       Prefix (N));\n \n-               elsif Sloc (Typ) = Standard_Location\n+               elsif Warn_On_Redundant_Constructs\n                  and then Base_Type (Typ) = Typ\n-                 and then Warn_On_Redundant_Constructs\n                then\n                   Error_Msg_NE -- CODEFIX\n                     (\"?redundant attribute, & is its own base type\", N, Typ);\n@@ -5777,8 +5776,8 @@ package body Sem_Ch8 is\n                T := Base_Type (Typ);\n \n                --  Rewrite attribute reference with type itself (see similar\n-               --  processing in Analyze_Attribute, case Base). Preserve\n-               --  prefix if present, for other legality checks.\n+               --  processing in Analyze_Attribute, case Base). Preserve prefix\n+               --  if present, for other legality checks.\n \n                if Nkind (Prefix (N)) = N_Expanded_Name then\n                   Rewrite (N,"}, {"sha": "fc138f4facfca530a1661daccb863cb6b923285f", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8930b805234726162dfd5093ef9a99a04b419af/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8930b805234726162dfd5093ef9a99a04b419af/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=a8930b805234726162dfd5093ef9a99a04b419af", "patch": "@@ -6391,12 +6391,41 @@ package body Sem_Res is\n       R : constant Node_Id   := Right_Opnd (N);\n       T : Entity_Id := Find_Unique_Type (L, R);\n \n+      procedure Check_Conditional_Expression (Cond : Node_Id);\n+      --  The resolution rule for conditional expressions requires that each\n+      --  such must have a unique type. This means that if several dependent\n+      --  expressions are of a non-null anonymous access type, and the context\n+      --  does not impose an expected type (as can be the case in an equality\n+      --  operation) the expression must be rejected.\n+\n       function Find_Unique_Access_Type return Entity_Id;\n       --  In the case of allocators, make a last-ditch attempt to find a single\n       --  access type with the right designated type. This is semantically\n       --  dubious, and of no interest to any real code, but c48008a makes it\n       --  all worthwhile.\n \n+      ----------------------------------\n+      -- Check_Conditional_Expression --\n+      ----------------------------------\n+\n+      procedure Check_Conditional_Expression (Cond : Node_Id) is\n+         Then_Expr : Node_Id;\n+         Else_Expr : Node_Id;\n+\n+      begin\n+         if Nkind (Cond) = N_Conditional_Expression then\n+            Then_Expr := Next (First (Expressions (Cond)));\n+            Else_Expr := Next (Then_Expr);\n+\n+            if Nkind (Then_Expr) /= N_Null\n+              and then Nkind (Else_Expr) /= N_Null\n+            then\n+               Error_Msg_N\n+                 (\"cannot determine type of conditional expression\", Cond);\n+            end if;\n+         end if;\n+      end Check_Conditional_Expression;\n+\n       -----------------------------\n       -- Find_Unique_Access_Type --\n       -----------------------------\n@@ -6470,6 +6499,22 @@ package body Sem_Res is\n                Set_Etype (N, Any_Type);\n                return;\n             end if;\n+\n+         --  Conditional expressions must have a single type, and if the\n+         --  context does not impose one the dependent expressions cannot\n+         --  be anonymous access types.\n+\n+         elsif Ada_Version >= Ada_2012\n+           and then Ekind_In (Etype (L),\n+             E_Anonymous_Access_Type,\n+               E_Anonymous_Access_Subprogram_Type)\n+\n+           and then Ekind_In (Etype (R),\n+             E_Anonymous_Access_Type,\n+               E_Anonymous_Access_Subprogram_Type)\n+         then\n+            Check_Conditional_Expression (L);\n+            Check_Conditional_Expression (R);\n          end if;\n \n          Resolve (L, T);"}, {"sha": "711421c579a213976d3e0809aec7ebd80a3b67df", "filename": "gcc/ada/sem_type.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8930b805234726162dfd5093ef9a99a04b419af/gcc%2Fada%2Fsem_type.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8930b805234726162dfd5093ef9a99a04b419af/gcc%2Fada%2Fsem_type.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_type.adb?ref=a8930b805234726162dfd5093ef9a99a04b419af", "patch": "@@ -3222,7 +3222,7 @@ package body Sem_Type is\n       Write_Str (\" Index: \");\n       Write_Int (Int (Interp_Map.Table (Map_Ptr).Index));\n       Write_Str (\" Next:  \");\n-      Write_Int (Int (Interp_Map.Table (Map_Ptr).Next));\n+      Write_Int (Interp_Map.Table (Map_Ptr).Next);\n       Write_Eol;\n    end Write_Interp_Ref;\n "}, {"sha": "15682909ef2c069f61c2d1f892aa74c7792e90e4", "filename": "gcc/ada/types.ads", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8930b805234726162dfd5093ef9a99a04b419af/gcc%2Fada%2Ftypes.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8930b805234726162dfd5093ef9a99a04b419af/gcc%2Fada%2Ftypes.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftypes.ads?ref=a8930b805234726162dfd5093ef9a99a04b419af", "patch": "@@ -251,13 +251,13 @@ package Types is\n    --    Universal integers (type Uint)\n    --    Universal reals (type Ureal)\n \n-   --  In most contexts, the strongly typed interface determines which of\n-   --  these types is present. However, there are some situations (involving\n-   --  untyped traversals of the tree), where it is convenient to be easily\n-   --  able to distinguish these values. The underlying representation in all\n-   --  cases is an integer type Union_Id, and we ensure that the range of\n-   --  the various possible values for each of the above types is disjoint\n-   --  so that this distinction is possible.\n+   --  In most contexts, the strongly typed interface determines which of these\n+   --  types is present. However, there are some situations (involving untyped\n+   --  traversals of the tree), where it is convenient to be easily able to\n+   --  distinguish these values. The underlying representation in all cases is\n+   --  an integer type Union_Id, and we ensure that the range of the various\n+   --  possible values for each of the above types is disjoint so that this\n+   --  distinction is possible.\n \n    type Union_Id is new Int;\n    --  The type in the tree for a union of possible ID values"}, {"sha": "713e0b15dd7b02a0815285b56f57236187e978e5", "filename": "gcc/ada/uintp.adb", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8930b805234726162dfd5093ef9a99a04b419af/gcc%2Fada%2Fuintp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8930b805234726162dfd5093ef9a99a04b419af/gcc%2Fada%2Fuintp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fuintp.adb?ref=a8930b805234726162dfd5093ef9a99a04b419af", "patch": "@@ -2204,9 +2204,7 @@ package body Uintp is\n            and then\n          Int (Right) <= Int (Uint_Max_Simple_Mul)\n       then\n-         return\n-           UI_From_Int\n-             (Int (Direct_Val (Left)) * Int (Direct_Val (Right)));\n+         return UI_From_Int (Direct_Val (Left) * Direct_Val (Right));\n       end if;\n \n       --  Otherwise we have the general case (Algorithm M in Knuth)"}, {"sha": "b8060531477d65727948ae58d8156abec095c4c2", "filename": "gcc/ada/vms_conv.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8930b805234726162dfd5093ef9a99a04b419af/gcc%2Fada%2Fvms_conv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8930b805234726162dfd5093ef9a99a04b419af/gcc%2Fada%2Fvms_conv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fvms_conv.adb?ref=a8930b805234726162dfd5093ef9a99a04b419af", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1996-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1996-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -314,16 +314,16 @@ package body VMS_Conv is\n       loop\n          declare\n             Dir : constant String_Access :=\n-                    String_Access (Get_Next_Dir_In_Path (Object_Dir_Name));\n+                    Get_Next_Dir_In_Path (Object_Dir_Name);\n          begin\n             exit when Dir = null;\n             Object_Dirs := Object_Dirs + 1;\n             Object_Dir (Object_Dirs) :=\n               new String'(\"-L\" &\n                           To_Canonical_Dir_Spec\n-                          (To_Host_Dir_Spec\n-                           (Normalize_Directory_Name (Dir.all).all,\n-                            True).all, True).all);\n+                            (To_Host_Dir_Spec\n+                              (Normalize_Directory_Name (Dir.all).all,\n+                               True).all, True).all);\n          end;\n       end loop;\n "}]}