{"sha": "37620334d9357703c406caff5f6255fa59f83421", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzc2MjAzMzRkOTM1NzcwM2M0MDZjYWZmNWY2MjU1ZmE1OWY4MzQyMQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@wolery.cumb.org", "date": "2000-08-02T20:21:27Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-08-02T20:21:27Z"}, "message": "gcc.h (lang_specific_driver): Constify second argument.\n\n\t* gcc.h (lang_specific_driver): Constify second argument.\n\t* gcc.c (translate_options, process_command, main): Likewise.\n\tConstify variables to match.  Cast second argument to\n\tpexecute.\n\n\t* cppspec.c, gccspec.c, g++spec.c, g77spec.c, jvspec.c: Adjust\n\ttype of second argument to lang_specific_driver, and update\n\tcode as necessary.\n\nFrom-SVN: r35433", "tree": {"sha": "fd152d55cc2977cce93eb949677f8ea99866bf67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd152d55cc2977cce93eb949677f8ea99866bf67"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/37620334d9357703c406caff5f6255fa59f83421", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37620334d9357703c406caff5f6255fa59f83421", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37620334d9357703c406caff5f6255fa59f83421", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37620334d9357703c406caff5f6255fa59f83421/comments", "author": null, "committer": null, "parents": [{"sha": "f9427d170488c89fc8f2f4eed47b7feca4b32296", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9427d170488c89fc8f2f4eed47b7feca4b32296", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9427d170488c89fc8f2f4eed47b7feca4b32296"}], "stats": {"total": 96, "additions": 54, "deletions": 42}, "files": [{"sha": "0c3e56d4e94144e69b92300657d576ecb50d011f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37620334d9357703c406caff5f6255fa59f83421/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37620334d9357703c406caff5f6255fa59f83421/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=37620334d9357703c406caff5f6255fa59f83421", "patch": "@@ -1,3 +1,13 @@\n+2000-08-02  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* gcc.h (lang_specific_driver): Constify second argument.\n+\t* gcc.c (translate_options, process_command, main): Likewise.\n+\tConstify variables to match.  Cast second argument to\n+\tpexecute.\n+\n+\t* cppspec.c, gccspec.c: Adjust type of second argument to\n+\tlang_specific_driver, and update code as necessary.\n+\n 2000-08-02  Jakub Jelinek  <jakub@redhat.com>\n \n \t* loop.c (scan_loop): Ensure update_end label does not"}, {"sha": "a7a4cc8d2f7e1b68b3f9c41a36437cdfc54f3808", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37620334d9357703c406caff5f6255fa59f83421/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37620334d9357703c406caff5f6255fa59f83421/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=37620334d9357703c406caff5f6255fa59f83421", "patch": "@@ -1,5 +1,8 @@\n 2000-08-02  Zack Weinberg  <zack@wolery.cumb.org>\n \n+\t* g++spec.c: Adjust type of second argument to\n+\tlang_specific_driver, and update code as necessary.\n+\n \t* cp-tree.h: Don't prototype min_precision here.\n \t(my_friendly_assert): Cast expression to void.\n \t* semantics.c (do_poplevel): Initialize scope_stmts."}, {"sha": "1602ab6b4e05c8ac4ca4624fe571a5d457e2bc65", "filename": "gcc/cp/g++spec.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37620334d9357703c406caff5f6255fa59f83421/gcc%2Fcp%2Fg%2B%2Bspec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37620334d9357703c406caff5f6255fa59f83421/gcc%2Fcp%2Fg%2B%2Bspec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fg%2B%2Bspec.c?ref=37620334d9357703c406caff5f6255fa59f83421", "patch": "@@ -40,7 +40,7 @@ Boston, MA 02111-1307, USA.  */\n void\n lang_specific_driver (in_argc, in_argv, in_added_libraries)\n      int *in_argc;\n-     char ***in_argv;\n+     const char *const **in_argv;\n      int *in_added_libraries;\n {\n   int i, j;\n@@ -62,7 +62,6 @@ lang_specific_driver (in_argc, in_argv, in_added_libraries)\n   const char *quote = NULL;\n \n   /* The new argument list will be contained in this.  */\n-  char **real_arglist;\n   const char **arglist;\n \n   /* Non-zero if we saw a `-xfoo' language specification on the\n@@ -87,7 +86,7 @@ lang_specific_driver (in_argc, in_argv, in_added_libraries)\n   int argc;\n \n   /* The argument list.  */\n-  char **argv;\n+  const char *const *argv;\n \n   /* The number of libraries added in.  */\n   int added_libraries;\n@@ -203,14 +202,13 @@ lang_specific_driver (in_argc, in_argv, in_added_libraries)\n \n   /* Make sure to have room for the trailing NULL argument.  */\n   num_args = argc + added + need_math + 1;\n-  real_arglist = (char **) xmalloc (num_args * sizeof (char *));\n-  arglist = (const char **) real_arglist;\n+  arglist = (const char **) xmalloc (num_args * sizeof (char *));\n \n   i = 0;\n   j = 0;\n   \n   /* Copy the 0th argument, i.e., the name of the program itself.  */\n-  arglist[i++] = arglist[j++];\n+  arglist[i++] = argv[j++];\n \n #if ENABLE_NEW_GXX_ABI\n   /* If we should use the new ABI by default, add the appropriate flag\n@@ -274,7 +272,7 @@ lang_specific_driver (in_argc, in_argv, in_added_libraries)\n   arglist[j] = NULL;\n \n   *in_argc = j;\n-  *in_argv = real_arglist;\n+  *in_argv = arglist;\n   *in_added_libraries = added_libraries;\n }\n "}, {"sha": "3796cdc7f5a39380985467d1848aee059e7c1cda", "filename": "gcc/cppspec.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37620334d9357703c406caff5f6255fa59f83421/gcc%2Fcppspec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37620334d9357703c406caff5f6255fa59f83421/gcc%2Fcppspec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppspec.c?ref=37620334d9357703c406caff5f6255fa59f83421", "patch": "@@ -72,12 +72,12 @@ static const char *const known_suffixes[] =\n void\n lang_specific_driver (in_argc, in_argv, in_added_libraries)\n      int *in_argc;\n-     char ***in_argv;\n+     const char *const **in_argv;\n      int *in_added_libraries ATTRIBUTE_UNUSED;\n {\n   int argc = *in_argc;\n-  char **argv = *in_argv;\n-  \n+  const char *const *argv = *in_argv;\n+\n   /* Do we need to read stdin? */\n   int read_stdin = 1;\n \n@@ -100,7 +100,6 @@ lang_specific_driver (in_argc, in_argv, in_added_libraries)\n   int need_fixups = 1;\n   \n   int i, j, quote = 0;\n-  char **real_new_argv;\n   const char **new_argv;\n   int new_argc;\n \n@@ -196,8 +195,7 @@ lang_specific_driver (in_argc, in_argv, in_added_libraries)\n     return;\n \n   /* One more slot for a terminating null.  */\n-  real_new_argv = (char **) xmalloc ((new_argc + 1) * sizeof(char *));\n-  new_argv = (const char **) real_new_argv;\n+  new_argv = (const char **) xmalloc ((new_argc + 1) * sizeof(char *));\n \n   new_argv[0] = argv[0];\n   j = 1;\n@@ -225,7 +223,7 @@ lang_specific_driver (in_argc, in_argv, in_added_libraries)\n \n   new_argv[j] = NULL;\n   *in_argc = new_argc;\n-  *in_argv = real_new_argv;\n+  *in_argv = new_argv;\n } \n \n /* Called before linking.  Returns 0 on success and -1 on failure. */"}, {"sha": "5d14ea9e3b5ff4734f1f41eb8e5bdcb02a10e5f3", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37620334d9357703c406caff5f6255fa59f83421/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37620334d9357703c406caff5f6255fa59f83421/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=37620334d9357703c406caff5f6255fa59f83421", "patch": "@@ -1,5 +1,8 @@\n 2000-08-02  Zack Weinberg  <zack@wolery.cumb.org>\n \n+\t* g77spec.c: Adjust type of second argument to\n+\tlang_specific_driver, and update code as necessary.\n+\n \t* expr.c (ffeexpr_finished_): Cast signed side of ?:\n \texpression to bool.\n "}, {"sha": "b24eab07b042a2f919ea2f797061bed5bb587eda", "filename": "gcc/f/g77spec.c", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37620334d9357703c406caff5f6255fa59f83421/gcc%2Ff%2Fg77spec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37620334d9357703c406caff5f6255fa59f83421/gcc%2Ff%2Fg77spec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fg77spec.c?ref=37620334d9357703c406caff5f6255fa59f83421", "patch": "@@ -86,14 +86,13 @@ typedef enum\n \n /* The original argument list and related info is copied here.  */\n static int g77_xargc;\n-static const char **g77_xargv;\n+static const char *const *g77_xargv;\n static void lookup_option PARAMS ((Option *, int *, const char **,\n \t\t\t\t   const char *));\n static void append_arg PARAMS ((const char *));\n \n /* The new argument list will be built here.  */\n static int g77_newargc;\n-static char **real_g77_newargv;\n static const char **g77_newargv;\n \n /* --- This comes from gcc.c (2.8.1) verbatim: */\n@@ -240,8 +239,7 @@ append_arg (arg)\n       int i;\n \n       newargsize = (g77_xargc << 2) + 20;\t/* This should handle all. */\n-      real_g77_newargv = (char **) xmalloc (newargsize * sizeof (char *));\n-      g77_newargv = (const char **) real_g77_newargv;\n+      g77_newargv = (const char **) xmalloc (newargsize * sizeof (char *));\n \n       /* Copy what has been done so far.  */\n       for (i = 0; i < g77_newargc; ++i)\n@@ -257,11 +255,11 @@ append_arg (arg)\n void\n lang_specific_driver (in_argc, in_argv, in_added_libraries)\n      int *in_argc;\n-     char ***in_argv;\n+     const char *const **in_argv;\n      int *in_added_libraries ATTRIBUTE_UNUSED;\n {\n   int argc = *in_argc;\n-  const char **argv = (const char **) *in_argv;\n+  const char *const *argv = *in_argv;\n   int i;\n   int verbose = 0;\n   Option opt;\n@@ -302,12 +300,10 @@ lang_specific_driver (in_argc, in_argv, in_added_libraries)\n   fprintf (stderr, \"\\n\");\n #endif\n \n-  real_g77_newargv = *in_argv;\n-\n   g77_xargc = argc;\n   g77_xargv = argv;\n   g77_newargc = 0;\n-  g77_newargv = argv;\n+  g77_newargv = (const char **) argv;\n \n   /* First pass through arglist.\n \n@@ -572,7 +568,7 @@ For bug reporting instructions, please see:\\n\\\n     }\n \n   *in_argc = g77_newargc;\n-  *in_argv = real_g77_newargv;\n+  *in_argv = g77_newargv;\n }\n \n /* Called before linking.  Returns 0 on success and -1 on failure. */"}, {"sha": "57c75da14dfc178f0243bf24b23cc6f7f20f989a", "filename": "gcc/gcc.c", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37620334d9357703c406caff5f6255fa59f83421/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37620334d9357703c406caff5f6255fa59f83421/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=37620334d9357703c406caff5f6255fa59f83421", "patch": "@@ -210,7 +210,7 @@ static int access_check\t\tPARAMS ((const char *, int));\n static char *find_a_file\tPARAMS ((struct path_prefix *, const char *, int));\n static void add_prefix\t\tPARAMS ((struct path_prefix *, const char *,\n \t\t\t\t\t const char *, int, int, int *));\n-static void translate_options\tPARAMS ((int *, const char ***));\n+static void translate_options\tPARAMS ((int *, const char *const **));\n static char *skip_whitespace\tPARAMS ((char *));\n static void record_temp_file\tPARAMS ((const char *, int, int));\n static void delete_if_ordinary\tPARAMS ((const char *));\n@@ -242,7 +242,7 @@ static void display_help \tPARAMS ((void));\n static void add_preprocessor_option\tPARAMS ((const char *, int));\n static void add_assembler_option\tPARAMS ((const char *, int));\n static void add_linker_option\t\tPARAMS ((const char *, int));\n-static void process_command\t\tPARAMS ((int, const char **));\n+static void process_command\t\tPARAMS ((int, const char *const *));\n static int execute\t\t\tPARAMS ((void));\n static void unused_prefix_warnings\tPARAMS ((struct path_prefix *));\n static void clear_args\t\t\tPARAMS ((void));\n@@ -854,11 +854,11 @@ struct option_map option_map[] =\n static void\n translate_options (argcp, argvp)\n      int *argcp;\n-     const char ***argvp;\n+     const char *const **argvp;\n {\n   int i;\n   int argc = *argcp;\n-  const char **argv = *argvp;\n+  const char *const *argv = *argvp;\n   const char **newv =\n     (const char **) xmalloc ((argc + 2) * 2 * sizeof (const char *));\n   int newindex = 0;\n@@ -2492,7 +2492,7 @@ execute ()\n       /* Print each piped command as a separate line.  */\n       for (i = 0; i < n_commands ; i++)\n \t{\n-\t  const char **j;\n+\t  const char *const *j;\n \n \t  for (j = commands[i].argv; *j; j++)\n \t    fprintf (stderr, \" %s\", *j);\n@@ -2523,7 +2523,9 @@ execute ()\n       char *errmsg_fmt, *errmsg_arg;\n       const char *string = commands[i].argv[0];\n \n-      commands[i].pid = pexecute (string, commands[i].argv,\n+      /* For some bizarre reason, the second argument of execvp() is\n+\t char *const *, not const char *const *.  */\n+      commands[i].pid = pexecute (string, (char *const *) commands[i].argv,\n \t\t\t\t  programname, temp_filename,\n \t\t\t\t  &errmsg_fmt, &errmsg_arg,\n \t\t\t\t  ((i == 0 ? PEXECUTE_FIRST : 0)\n@@ -2860,7 +2862,7 @@ add_linker_option (option, len)\n static void\n process_command (argc, argv)\n      int argc;\n-     const char **argv;\n+     const char *const *argv;\n {\n   register int i;\n   const char *temp;\n@@ -5088,12 +5090,12 @@ fatal_error (signum)\n   kill (getpid (), signum);\n }\n \n-extern int main PARAMS ((int, char **));\n+extern int main PARAMS ((int, const char *const *));\n \n int\n main (argc, argv)\n      int argc;\n-     char **argv;\n+     const char *const *argv;\n {\n   size_t i;\n   int value;\n@@ -5213,7 +5215,7 @@ main (argc, argv)\n     first_time = TRUE;\n     for (i = 0; (int)i < n_switches; i++)\n       {\n-\tconst char **args;\n+\tconst char *const *args;\n \tconst char *p, *q;\n \tif (!first_time)\n \t  obstack_grow (&collect_obstack, \" \", 1);"}, {"sha": "9a9beb0e25aa6fa10ca2f825f53e231fa21863f7", "filename": "gcc/gcc.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37620334d9357703c406caff5f6255fa59f83421/gcc%2Fgcc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37620334d9357703c406caff5f6255fa59f83421/gcc%2Fgcc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.h?ref=37620334d9357703c406caff5f6255fa59f83421", "patch": "@@ -34,7 +34,7 @@ extern void fatal PARAMS ((const char *, ...))\n /* Spec files linked with gcc.c must provide definitions for these. */\n \n /* Called before processing to change/add/remove arguments. */\n-extern void lang_specific_driver PARAMS ((int *, char ***, int *));\n+extern void lang_specific_driver PARAMS ((int *, const char *const **, int *));\n \n /* Called before linking.  Returns 0 on success and -1 on failure. */\n extern int lang_specific_pre_link PARAMS ((void));"}, {"sha": "fcad38d9b52bd2a2d9759bc05c9bfb96ad0d7e83", "filename": "gcc/gccspec.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37620334d9357703c406caff5f6255fa59f83421/gcc%2Fgccspec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37620334d9357703c406caff5f6255fa59f83421/gcc%2Fgccspec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgccspec.c?ref=37620334d9357703c406caff5f6255fa59f83421", "patch": "@@ -26,7 +26,7 @@ Boston, MA 02111-1307, USA.  */\n void\n lang_specific_driver (in_argc, in_argv, in_added_libraries)\n      int *in_argc ATTRIBUTE_UNUSED;\n-     char ***in_argv ATTRIBUTE_UNUSED;\n+     const char *const **in_argv ATTRIBUTE_UNUSED;\n      int *in_added_libraries ATTRIBUTE_UNUSED;\n {\n   return;  /* Not used for C. */"}, {"sha": "51662f662816ae18c5791e4e5ecd233ee34f874b", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37620334d9357703c406caff5f6255fa59f83421/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37620334d9357703c406caff5f6255fa59f83421/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=37620334d9357703c406caff5f6255fa59f83421", "patch": "@@ -1,5 +1,8 @@\n 2000-08-02  Zack Weinberg  <zack@wolery.cumb.org>\n \n+\t* jvspec.c: Adjust type of second argument to\n+\tlang_specific_driver, and update code as necessary.\n+\n \t* class.c (build_dtable_decl): Initialize dummy.\n \n 2000-07-27  Tom Tromey  <tromey@cygnus.com>"}, {"sha": "7b1244815f5cbf2b3bb0a5162cc38add65e0d30f", "filename": "gcc/java/jvspec.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37620334d9357703c406caff5f6255fa59f83421/gcc%2Fjava%2Fjvspec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37620334d9357703c406caff5f6255fa59f83421/gcc%2Fjava%2Fjvspec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjvspec.c?ref=37620334d9357703c406caff5f6255fa59f83421", "patch": "@@ -93,7 +93,7 @@ find_spec_file (dir)\n void\n lang_specific_driver (in_argc, in_argv, in_added_libraries)\n      int *in_argc;\n-     char ***in_argv;\n+     const char *const **in_argv;\n      int *in_added_libraries;\n {\n   int i, j;\n@@ -139,7 +139,6 @@ lang_specific_driver (in_argc, in_argv, in_added_libraries)\n   const char *quote = NULL;\n \n   /* The new argument list will be contained in this.  */\n-  char **real_arglist;\n   const char **arglist;\n \n   /* Non-zero if we saw a `-xfoo' language specification on the\n@@ -181,7 +180,7 @@ lang_specific_driver (in_argc, in_argv, in_added_libraries)\n   int argc;\n \n   /* The argument list.  */\n-  char **argv;\n+  const char *const *argv;\n \n   /* The number of libraries added in.  */\n   int added_libraries;\n@@ -392,8 +391,8 @@ lang_specific_driver (in_argc, in_argv, in_added_libraries)\n   if (saw_g + saw_O == 0)\n     num_args++;\n   num_args++;\n-  arglist = (const char **)\n-    (real_arglist = (char **) xmalloc ((num_args + 1) * sizeof (char *)));\n+\n+  arglist = (const char **) xmalloc ((num_args + 1) * sizeof (char *));\n \n   for (i = 0, j = 0; i < argc; i++, j++)\n     {\n@@ -488,7 +487,7 @@ lang_specific_driver (in_argc, in_argv, in_added_libraries)\n   arglist[j] = NULL;\n \n   *in_argc = j;\n-  *in_argv = real_arglist;\n+  *in_argv = arglist;\n   *in_added_libraries = added_libraries;\n }\n "}]}