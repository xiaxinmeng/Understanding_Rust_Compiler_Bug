{"sha": "3ccb523bdd78e6ba3c133064be90cdf19dcbf896", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2NjYjUyM2JkZDc4ZTZiYTNjMTMzMDY0YmU5MGNkZjE5ZGNiZjg5Ng==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2021-09-03T07:41:06Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2021-09-03T15:25:40Z"}, "message": "libgcc, soft-float: Fix strong_alias macro use for Darwin.\n\nDarwin does not support strong symbol aliases and a work-\naround is provided in sfp-machine.h where a second function\nis created that simply calls the original.  However this\nneeds the arguments to the synthesized function to track\nthe mode of the original function.\n\nSo the fix here is to match known floating point modes from\nthe incoming function and apply the one found to the new\nfunction args.\n\nThe matching is highly specific to the current set of modes\nand will need adjusting should more cases be added.\n\nSigned-off-by: Iain Sandoe <iain@sandoe.co.uk>\n\nlibgcc/ChangeLog:\n\n\t* config/i386/sfp-machine.h (alias_HFtype, alias_SFtype\n\talias_DFtype, alias_TFtype): New.\n\t(ALIAS_SELECTOR): New.\n\t(strong_alias): Use __typeof and a _Generic selector to\n\tprovide the type to the synthesized function.", "tree": {"sha": "c6fd642c545faa65c54c5b1205e964024b2d2000", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c6fd642c545faa65c54c5b1205e964024b2d2000"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ccb523bdd78e6ba3c133064be90cdf19dcbf896", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ccb523bdd78e6ba3c133064be90cdf19dcbf896", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ccb523bdd78e6ba3c133064be90cdf19dcbf896", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ccb523bdd78e6ba3c133064be90cdf19dcbf896/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01005550377ff17716e6ad57c62df726877ab79f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01005550377ff17716e6ad57c62df726877ab79f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01005550377ff17716e6ad57c62df726877ab79f"}], "stats": {"total": 20, "additions": 17, "deletions": 3}, "files": [{"sha": "172ebc70c8dd5ae9c0249e70feee9bb9cc6b4f52", "filename": "libgcc/config/i386/sfp-machine.h", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ccb523bdd78e6ba3c133064be90cdf19dcbf896/libgcc%2Fconfig%2Fi386%2Fsfp-machine.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ccb523bdd78e6ba3c133064be90cdf19dcbf896/libgcc%2Fconfig%2Fi386%2Fsfp-machine.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Fsfp-machine.h?ref=3ccb523bdd78e6ba3c133064be90cdf19dcbf896", "patch": "@@ -75,10 +75,24 @@ void __sfp_handle_exceptions (int);\n \n /* Define ALIASNAME as a strong alias for NAME.  */\n #if defined __MACH__\n-/* Mach-O doesn't support aliasing.  If these functions ever return\n-   anything but CMPtype we need to revisit this... */\n+/* Mach-O doesn't support aliasing, so we build a secondary function for\n+   the alias - we need to do a bit of a dance to find out what the type of\n+   the arguments is and then apply that to the secondary function.\n+   If these functions ever return anything but CMPtype we need to revisit\n+   this... */\n+typedef float alias_HFtype __attribute__ ((mode (HF)));\n+typedef float alias_SFtype __attribute__ ((mode (SF)));\n+typedef float alias_DFtype __attribute__ ((mode (DF)));\n+typedef float alias_TFtype __attribute__ ((mode (TF)));\n+#define ALIAS_SELECTOR \\\n+  CMPtype (*) (alias_HFtype, alias_HFtype): (alias_HFtype) 0, \\\n+  CMPtype (*) (alias_SFtype, alias_SFtype): (alias_SFtype) 0, \\\n+  CMPtype (*) (alias_DFtype, alias_DFtype): (alias_DFtype) 0, \\\n+  CMPtype (*) (alias_TFtype, alias_TFtype): (alias_TFtype) 0\n #define strong_alias(name, aliasname) \\\n-  CMPtype aliasname (TFtype a, TFtype b) { return name(a, b); }\n+  CMPtype aliasname (__typeof (_Generic (name, ALIAS_SELECTOR)) a, \\\n+\t\t     __typeof (_Generic (name, ALIAS_SELECTOR)) b) \\\n+\t\t    { return name (a, b); }\n #else\n # define strong_alias(name, aliasname) _strong_alias(name, aliasname)\n # define _strong_alias(name, aliasname) \\"}]}