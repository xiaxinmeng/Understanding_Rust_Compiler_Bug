{"sha": "c7684ffe55c75b893fe40988dbb8fcea9beae3ba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzc2ODRmZmU1NWM3NWI4OTNmZTQwOTg4ZGJiOGZjZWE5YmVhZTNiYQ==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-05-25T11:40:19Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-05-25T11:40:19Z"}, "message": "PushbackInputStream.java, [...]: Merged new versions from classpath.\n\n2003-05-25  Michael Koch  <konqueror@gmx.de>\n\n\t* java/io/PushbackInputStream.java,\n\tjava/net/Authenticator.java,\n\tjava/net/ContentHandler.java,\n\tjava/net/ContentHandlerFactory.java,\n\tjava/net/DatagramSocket.java,\n\tjava/net/DatagramSocketImpl.java,\n\tjava/net/DatagramSocketImplFactory.java,\n\tjava/net/FileNameMap.java,\n\tjava/net/SocketImplFactory.java,\n\tjava/net/SocketOptions.java,\n\tjava/net/URLStreamHandlerFactory.java:\n\tMerged new versions from classpath.\n\nFrom-SVN: r67165", "tree": {"sha": "88ef0760e764ef489e276334b8e20f71e9f96390", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/88ef0760e764ef489e276334b8e20f71e9f96390"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c7684ffe55c75b893fe40988dbb8fcea9beae3ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7684ffe55c75b893fe40988dbb8fcea9beae3ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7684ffe55c75b893fe40988dbb8fcea9beae3ba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7684ffe55c75b893fe40988dbb8fcea9beae3ba/comments", "author": null, "committer": null, "parents": [{"sha": "eceea3010ff9d19a48d650e5dccb7105d66adbd2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eceea3010ff9d19a48d650e5dccb7105d66adbd2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eceea3010ff9d19a48d650e5dccb7105d66adbd2"}], "stats": {"total": 829, "additions": 411, "deletions": 418}, "files": [{"sha": "be9100e20a55179c112de75fd6c3d20761d63992", "filename": "libjava/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7684ffe55c75b893fe40988dbb8fcea9beae3ba/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7684ffe55c75b893fe40988dbb8fcea9beae3ba/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=c7684ffe55c75b893fe40988dbb8fcea9beae3ba", "patch": "@@ -1,3 +1,18 @@\n+2003-05-25  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/io/PushbackInputStream.java,\n+\tjava/net/Authenticator.java,\n+\tjava/net/ContentHandler.java,\n+\tjava/net/ContentHandlerFactory.java,\n+\tjava/net/DatagramSocket.java,\n+\tjava/net/DatagramSocketImpl.java,\n+\tjava/net/DatagramSocketImplFactory.java,\n+\tjava/net/FileNameMap.java,\n+\tjava/net/SocketImplFactory.java,\n+\tjava/net/SocketOptions.java,\n+\tjava/net/URLStreamHandlerFactory.java:\n+\tMerged new versions from classpath.\n+\n 2003-05-25  Michael Koch  <konqueror@gmx.de>\n \n \t* java/awt/Checkbox.java,"}, {"sha": "778babd2c0b0f55dc179fb62db706979fb62f26f", "filename": "libjava/java/io/PushbackInputStream.java", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7684ffe55c75b893fe40988dbb8fcea9beae3ba/libjava%2Fjava%2Fio%2FPushbackInputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7684ffe55c75b893fe40988dbb8fcea9beae3ba/libjava%2Fjava%2Fio%2FPushbackInputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FPushbackInputStream.java?ref=c7684ffe55c75b893fe40988dbb8fcea9beae3ba", "patch": "@@ -74,8 +74,8 @@ public class PushbackInputStream extends FilterInputStream\n \n   /**\n    * This method initializes a <code>PushbackInputStream</code> to\n-   * read from the * specified subordinate <code>InputStream</code>\n-   * with a default pushback buffer * size of 1.\n+   * read from the specified subordinate <code>InputStream</code>\n+   * with a default pushback buffer size of 1.\n    *\n    * @param in The subordinate stream to read from\n    */\n@@ -302,7 +302,7 @@ public synchronized void unread(byte[] b, int off, int len)\n    * <code>skip</code> method on the underlying <code>InputStream</code> to \n    * skip additional bytes if necessary.\n    *\n-   * @param num_bytes The requested number of bytes to skip\n+   * @param numBytes The requested number of bytes to skip\n    *\n    * @return The actual number of bytes skipped.\n    *"}, {"sha": "7592b525a5090e2034e02fc1b673692847dabefa", "filename": "libjava/java/net/Authenticator.java", "status": "modified", "additions": 252, "deletions": 279, "changes": 531, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7684ffe55c75b893fe40988dbb8fcea9beae3ba/libjava%2Fjava%2Fnet%2FAuthenticator.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7684ffe55c75b893fe40988dbb8fcea9beae3ba/libjava%2Fjava%2Fnet%2FAuthenticator.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FAuthenticator.java?ref=c7684ffe55c75b893fe40988dbb8fcea9beae3ba", "patch": "@@ -1,5 +1,5 @@\n /* Authenticator.java -- Abstract class for obtaining authentication info\n-   Copyright (C) 1998,2000 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 2000, 2003 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -43,12 +43,13 @@\n   * some network operations (such as hitting a password protected\n   * web site).\n   * <p>\n-  * To make use of this feature, a programmer must create a subclass of\n-  * Authenticator that knows how to obtain the necessary info.  An example\n+  * To make use of this feature, a programmer must create a subclass \n+  * that knows how to obtain the necessary info.  An example\n   * would be a class that popped up a dialog box to prompt the user.  \n-  * After creating an instance of that subclass, the static setDefault\n-  * method of this class is called to set up that instance as the object\n-  * to use on subsequent calls to obtain authorization.\n+  * After creating an instance of that subclass, the static \n+  * <code>setDefault</code> method of this class is called to set up \n+  * that instance as the object to use on subsequent calls to obtain \n+  * authorization.\n   *\n   * @since 1.2\n   *\n@@ -57,280 +58,252 @@\n   */\n public abstract class Authenticator\n {\n-\n-/*************************************************************************/\n-\n-/*\n- * Class Variables\n- */\n-\n-/**\n-  * This is the default Authenticator object to use for password requests\n-  */\n-private static Authenticator default_authenticator;\n-\n-/*************************************************************************/\n-\n-/*\n- * Instance Variables\n- */\n-\n-/**\n-  * The hostname of the site requesting authentication\n-  */\n-private String host;\n-\n-/**\n-  * InternetAddress of the site requesting authentication\n-  */\n-private InetAddress addr;\n-\n-/**\n-  * The port number of the site requesting authentication\n-  */\n-private int port;\n-\n-/**\n-  * The protocol name of the site requesting authentication\n-  */\n-private String protocol;\n-\n-/**\n-  * The prompt to display to the user when requesting authentication info\n-  */\n-private String prompt;\n-\n-/**\n-  * The authentication scheme in use\n-  */\n-private String scheme;\n-\n-/*************************************************************************/\n-\n-/*\n- * Class Methods\n- */\n-\n-/**\n-  * This method sets the default <code>Authenticator</code> object (an \n-  * instance of a\n-  * subclass of <code>Authenticator</code>) to use when prompting the user for\n-  * information.  Note that this method checks to see if the caller is\n-  * allowed to set this value (the \"setDefaultAuthenticator\" permission)\n-  * and throws a <code>SecurityException</code> if it is not.\n-  *\n-  * @param def_auth The new default <code>Authenticator</code> object to use\n-  *\n-  * @exception SecurityException If the caller does not have permission \n-  * to perform this operation\n-  */ \n-public static void\n-setDefault(Authenticator def_auth)\n-{\n-  SecurityManager sm = System.getSecurityManager();\n-  if (sm != null)\n-    sm.checkPermission(new NetPermission(\"setDefaultAuthenticator\"));\n-\n-  default_authenticator = def_auth;\n-} \n-\n-/*************************************************************************/\n-\n-/**\n-  * This method is called whenever a username and password for a given\n-  * network operation is required.  First, a security check is made to see\n-  * if the caller has the \"requestPasswordAuthentication\"\n-  * permission.  If not, the method thows an exception.  If there is no\n-  * default <code>Authenticator</code> object, the method then returns \n-  * <code>null</code>.  Otherwise, the default authenticators's instance \n-  * variables are initialized and it's <code>getPasswordAuthentication</code>\n-  *  method is called to get the actual authentication information to return.\n-  *\n-  * @param addr The address requesting authentication\n-  * @param port The port requesting authentication\n-  * @param protocol The protocol requesting authentication\n-  * @param prompt The prompt to display to the user when requesting \n-  *        authentication info\n-  * @param scheme The authentication scheme in use\n-  * \n-  * @return A <code>PasswordAuthentication</code> object with the user's \n-  *         authentication info.\n-  *\n-  * @exception SecurityException If the caller does not have permission to \n-  *         perform this operation\n-  */ \n-public static PasswordAuthentication\n-requestPasswordAuthentication(InetAddress addr, int port, String protocol,\n-                              String prompt, String scheme) \n-  throws SecurityException\n-{\n-  return(requestPasswordAuthentication (null, addr, port, protocol,\n-\t\t\t\t\tprompt, scheme));\n-}\n-\n-/**\n-  * This method is called whenever a username and password for a given\n-  * network operation is required.  First, a security check is made to see\n-  * if the caller has the \"requestPasswordAuthentication\"\n-  * permission.  If not, the method thows an exception.  If there is no\n-  * default <code>Authenticator</code> object, the method then returns\n-  * <code>null</code>.  Otherwise, the default authenticators's instance\n-  * variables are initialized and it's <code>getPasswordAuthentication</code>\n-  * method is called to get the actual authentication information to return.\n-  * This method is the preferred one as it can be used with hostname\n-  * when addr is unknown.\n-  *\n-  * @param host The hostname requesting authentication\n-  * @param addr The address requesting authentication\n-  * @param port The port requesting authentication\n-  * @param protocol The protocol requesting authentication\n-  * @param prompt The prompt to display to the user when requesting \n-  *        authentication info\n-  * @param scheme The authentication scheme in use\n-  *\n-  * @return A <code>PasswordAuthentication</code> object with the user's \n-  *         authentication info.\n-  *\n-  * @exception SecurityException If the caller does not have permission to \n-  *         perform this operation\n-  *\n-  * @since 1.4\n-  */\n-public static PasswordAuthentication\n-requestPasswordAuthentication(String host, InetAddress addr, int port,\n-\t\t              String protocol, String prompt, String scheme)\n-  throws SecurityException\n-{\n-  SecurityManager sm = System.getSecurityManager();\n-  if (sm != null)\n-    sm.checkPermission(new NetPermission(\"requestPasswordAuthentication\"));\n-\n-  if (default_authenticator == null)\n+  /*\n+   * Class Variables\n+   */\n+\n+  /**\n+    * This is the default Authenticator object to use for password requests\n+    */\n+  private static Authenticator defaultAuthenticator;\n+\n+  /*\n+   * Instance Variables\n+   */\n+\n+  /**\n+    * The hostname of the site requesting authentication\n+    */\n+  private String host;\n+\n+  /**\n+    * InternetAddress of the site requesting authentication\n+    */\n+  private InetAddress addr;\n+\n+  /**\n+    * The port number of the site requesting authentication\n+    */\n+  private int port;\n+\n+  /**\n+    * The protocol name of the site requesting authentication\n+    */\n+  private String protocol;\n+\n+  /**\n+    * The prompt to display to the user when requesting authentication info\n+    */\n+  private String prompt;\n+\n+  /**\n+    * The authentication scheme in use\n+    */\n+  private String scheme;\n+\n+  /*\n+   * Class Methods\n+   */\n+\n+  /**\n+    * This method sets the default <code>Authenticator</code> object (an \n+    * instance of a subclass of <code>Authenticator</code>) to use when \n+    * prompting the user for\n+    * information.  Note that this method checks to see if the caller is\n+    * allowed to set this value (the \"setDefaultAuthenticator\" permission)\n+    * and throws a <code>SecurityException</code> if it is not.\n+    *\n+    * @param defAuth The new default <code>Authenticator</code> object to use\n+    *\n+    * @exception SecurityException If the caller does not have permission \n+    * to perform this operation\n+    */ \n+  public static void setDefault(Authenticator defAuth)\n+  {\n+    SecurityManager sm = System.getSecurityManager();\n+    if (sm != null)\n+      sm.checkPermission(new NetPermission(\"setDefaultAuthenticator\"));\n+\n+    defaultAuthenticator = defAuth;\n+  } \n+\n+  /**\n+    * This method is called whenever a username and password for a given\n+    * network operation is required.  First, a security check is made to see\n+    * if the caller has the \"requestPasswordAuthentication\"\n+    * permission.  If not, the method thows an exception.  If there is no\n+    * default <code>Authenticator</code> object, the method then returns \n+    * <code>null</code>.  Otherwise, the default authenticators's instance \n+    * variables are initialized and it's <code>getPasswordAuthentication</code>\n+    * method is called to get the actual authentication information to return.\n+    *\n+    * @param addr The address requesting authentication\n+    * @param port The port requesting authentication\n+    * @param protocol The protocol requesting authentication\n+    * @param prompt The prompt to display to the user when requesting \n+    *        authentication info\n+    * @param scheme The authentication scheme in use\n+    * \n+    * @return A <code>PasswordAuthentication</code> object with the user's \n+    *         authentication info.\n+    *\n+    * @exception SecurityException If the caller does not have permission to \n+    *         perform this operation\n+    */ \n+  public static PasswordAuthentication \n+    requestPasswordAuthentication(InetAddress addr, int port, String protocol,\n+      String prompt, String scheme) \n+    throws SecurityException\n+  {\n+    return(requestPasswordAuthentication (null, addr, port, protocol,\n+  \t\t\t\t\tprompt, scheme));\n+  }\n+\n+  /**\n+    * This method is called whenever a username and password for a given\n+    * network operation is required.  First, a security check is made to see\n+    * if the caller has the \"requestPasswordAuthentication\"\n+    * permission.  If not, the method thows an exception.  If there is no\n+    * default <code>Authenticator</code> object, the method then returns\n+    * <code>null</code>.  Otherwise, the default authenticators's instance\n+    * variables are initialized and it's <code>getPasswordAuthentication</code>\n+    * method is called to get the actual authentication information to return.\n+    * This method is the preferred one as it can be used with hostname\n+    * when addr is unknown.\n+    *\n+    * @param host The hostname requesting authentication\n+    * @param addr The address requesting authentication\n+    * @param port The port requesting authentication\n+    * @param protocol The protocol requesting authentication\n+    * @param prompt The prompt to display to the user when requesting \n+    *        authentication info\n+    * @param scheme The authentication scheme in use\n+    *\n+    * @return A <code>PasswordAuthentication</code> object with the user's \n+    *         authentication info.\n+    *\n+    * @exception SecurityException If the caller does not have permission to \n+    *         perform this operation\n+    *\n+    * @since 1.4\n+    */\n+  public static PasswordAuthentication\n+    requestPasswordAuthentication(String host, InetAddress addr, int port,\n+        String protocol, String prompt, String scheme)\n+    throws SecurityException\n+  {\n+    SecurityManager sm = System.getSecurityManager();\n+    if (sm != null)\n+      sm.checkPermission(new NetPermission(\"requestPasswordAuthentication\"));\n+\n+    if (defaultAuthenticator == null)\n+      return(null);\n+\n+    defaultAuthenticator.host = host;\n+    defaultAuthenticator.addr = addr;\n+    defaultAuthenticator.port = port;\n+    defaultAuthenticator.protocol = protocol;\n+    defaultAuthenticator.prompt = prompt;\n+    defaultAuthenticator.scheme = scheme;\n+\n+    return(defaultAuthenticator.getPasswordAuthentication());\n+  }\n+\n+  /*\n+   * Constructors\n+   */\n+\n+  /**\n+    * Default, no-argument constructor for subclasses to call.\n+    */\n+  public Authenticator()\n+  {\n+  }\n+\n+  /*\n+   * Instance Methods\n+   */\n+\n+  /**\n+    * This method returns the address of the site that is requesting\n+    * authentication.\n+    *\n+    * @return The requesting site's address\n+    */\n+  protected final InetAddress getRequestingSite()\n+  {\n+    return(addr);\n+  }\n+\n+  /**\n+   * Returns the hostname of the host or proxy requesting authorization,\n+   * or <code>null</code> if not available.\n+   *\n+   * @return The name of the host requesting authentication, or\n+   * </code>null</code> if it is not available.\n+   *\n+   * @since 1.4\n+   */\n+  protected final String getRequestingHost()\n+  {\n+    return(host);\n+  }\n+\n+  /**\n+    * This method returns the port of the site that is requesting \n+    * authentication.\n+    *\n+    * @return The requesting port\n+    */\n+  protected final int getRequestingPort()\n+  {\n+    return(port);\n+  }\n+\n+  /**\n+    * This method returns the requesting protocol of the operation that is\n+    * requesting authentication\n+    *\n+    * @return The requesting protocol\n+    */\n+  protected final String getRequestingProtocol()\n+  {\n+    return(protocol);\n+  }\n+\n+  /**\n+    * Returns the prompt that should be used when requesting authentication \n+    * information from the user\n+    * \n+    * @return The user prompt\n+    */\n+  protected final String getRequestingPrompt()\n+  {\n+    return(prompt);\n+  }\n+\n+  /**\n+    * This method returns the authentication scheme in use\n+    *\n+    * @return The authentication scheme\n+    */\n+  protected final String getRequestingScheme()\n+  {\n+    return(scheme);\n+  }\n+\n+  /**\n+    * This method is called whenever a request for authentication is made.  It\n+    * can call the other getXXX methods to determine the information relevant\n+    * to this request.  Subclasses should override this method, which returns\n+    * <code>null</code> by default.\n+    *\n+    * @return The <code>PasswordAuthentication</code> information\n+    */\n+  protected PasswordAuthentication getPasswordAuthentication()\n+  {\n     return(null);\n-\n-  default_authenticator.host = host;\n-  default_authenticator.addr = addr;\n-  default_authenticator.port = port;\n-  default_authenticator.protocol = protocol;\n-  default_authenticator.prompt = prompt;\n-  default_authenticator.scheme = scheme;\n-\n-  return(default_authenticator.getPasswordAuthentication());\n-}\n-\n-/**\n- *  Returns the hostname of the host or proxy requesting authorization,\n- *  or null if not available.\n- *\n- *  @since 1.4\n- */\n-protected final String getRequestingHost()\n-{\n-  return(host);\n-}\n-\n-/*************************************************************************/\n-\n-/*\n- * Constructors\n- */\n-\n-/**\n-  * Default, no-argument constructor for subclasses to call.\n-  */\n-public\n-Authenticator()\n-{\n-}\n-\n-/*************************************************************************/\n-\n-/*\n- * Instance Methods\n- */\n-\n-/**\n-  * This method returns the address of the site that is requesting\n-  * authentication.\n-  *\n-  * @return The requesting site\n-  */\n-protected final InetAddress\n-getRequestingSite()\n-{\n-  return(addr);\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns the port of the site that is requesting \n-  * authentication.\n-  *\n-  * @return The requesting port\n-  */\n-protected final int\n-getRequestingPort()\n-{\n-  return(port);\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns the requesting protocol of the operation that is\n-  * requesting authentication\n-  *\n-  * @return The requesting protocol\n-  */\n-protected final String\n-getRequestingProtocol()\n-{\n-  return(protocol);\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * Returns the prompt that should be used when requesting authentication \n-  * information from the user\n-  * \n-  * @return The user prompt\n-  */\n-protected final String\n-getRequestingPrompt()\n-{\n-  return(prompt);\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns the authentication scheme in use\n-  *\n-  * @return The authentication scheme\n-  */\n-protected final String\n-getRequestingScheme()\n-{\n-  return(scheme);\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method is called whenever a request for authentication is made.  It\n-  * can call the other getXXX methods to determine the information relevant\n-  * to this request.  Subclasses should override this method, which returns\n-  * <code>null</code> by default.\n-  *\n-  * @return The PasswordAuthentication information\n-  */\n-protected PasswordAuthentication\n-getPasswordAuthentication()\n-{\n-  return(null);\n-}\n+  }\n \n } // class Authenticator\n "}, {"sha": "ed74698477526893101abfd83e7a52b35fd7ba22", "filename": "libjava/java/net/ContentHandler.java", "status": "modified", "additions": 65, "deletions": 61, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7684ffe55c75b893fe40988dbb8fcea9beae3ba/libjava%2Fjava%2Fnet%2FContentHandler.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7684ffe55c75b893fe40988dbb8fcea9beae3ba/libjava%2Fjava%2Fnet%2FContentHandler.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FContentHandler.java?ref=c7684ffe55c75b893fe40988dbb8fcea9beae3ba", "patch": "@@ -1,5 +1,5 @@\n /* ContentHandler.java -- Abstract class for handling content from URL's\n-   Copyright (C) 1998, 1999 2000, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000, 2001, 2003 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -59,65 +59,69 @@\n   */\n public abstract class ContentHandler\n {\n-\n-/*************************************************************************/\n-\n-/*\n- * Constructors\n- */\n-\n-/**\n-  * Default, no-argument constructor.\n-  */\n-public ContentHandler() { }\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method reads from the <code>InputStream</code> of the passed in URL \n-  * connection and uses the data downloaded to create an <code>Object</code> \n-  * represening the content.  For example, if the URL is pointing to a GIF \n-  * file, this method might return an <code>Image</code> object.  This method \n-  * must be implemented by subclasses.\n-  *\n-  * @param urlc A <code>URLConnection</code> object to read data from.\n-  *\n-  * @return An object representing the data read\n-  *\n-  * @exception IOException If an error occurs\n-  */\n-public abstract Object getContent(URLConnection urlc) throws IOException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method reads from the <code>InputStream</code> of the passed in URL\n-  * connection and uses the data downloaded to create an <code>Object</code>\n-  * represening the content.  For example, if the URL is pointing to a GIF \n-  * file, this method might return an <code>Image</code> object.  This method \n-  * must be implemented by subclasses. If the object doesnt match any type in\n-  * classes it returns null.\n-  *\n-  * @param urlc A <code>URLConnection</code> object to read data from.\n-  *\n-  * @return An object representing the data read\n-  *\n-  * @exception IOException If an error occurs\n-  *\n-  * @since 1.3\n-  */\n-public Object getContent(URLConnection urlc, Class[] classes)\n-  throws IOException\n-{\n-  Object obj = getContent (urlc);\n-\n-  for (int i = 0; i < classes.length; i++)\n-    {\n-      if (classes [i].isInstance (obj))\n-        return obj;\n-    }\n-\n-  return null;\n-}\n+  /*\n+   * Constructors\n+   */\n+\n+  /**\n+    * Default, no-argument constructor.\n+    */\n+  public ContentHandler() \n+  { \n+  }\n+\n+  /*\n+   * Instance Methods\n+   */\n+\n+  /**\n+    * This method reads from the <code>InputStream</code> of the passed in URL \n+    * connection and uses the data downloaded to create an <code>Object</code> \n+    * represening the content.  For example, if the URL is pointing to a GIF \n+    * file, this method might return an <code>Image</code> object.  This method \n+    * must be implemented by subclasses.\n+    *\n+    * @param urlc A <code>URLConnection</code> object to read data from.\n+    *\n+    * @return An object representing the data read\n+    *\n+    * @exception IOException If an error occurs\n+    */\n+  public abstract Object getContent(URLConnection urlc) \n+    throws IOException;\n+\n+  /**\n+    * This method reads from the <code>InputStream</code> of the passed in URL\n+    * connection and uses the data downloaded to create an <code>Object</code>\n+    * represening the content.  For example, if the URL is pointing to a GIF \n+    * file, this method might return an <code>Image</code> object.  This method \n+    * must be implemented by subclasses.  This method uses the list of\n+    * supplied classes as candidate types.  If the data read doesn't match \n+    * any of the supplied type, <code>null</code> is returned.\n+    *\n+    * @param urlc A <code>URLConnection</code> object to read data from.\n+    * @param classes An array of types of objects that are candidate types\n+    * for the data to be read.\n+    *\n+    * @return An object representing the data read, or <code>null</code>\n+    * if the data does not match any of the candidate types.\n+    *\n+    * @exception IOException If an error occurs\n+    *\n+    * @since 1.3\n+    */\n+  public Object getContent(URLConnection urlc, Class[] classes)\n+    throws IOException\n+  {\n+    Object obj = getContent (urlc);\n+\n+    for (int i = 0; i < classes.length; i++)\n+      {\n+        if (classes [i].isInstance (obj))\n+          return obj;\n+      }\n+\n+    return null;\n+  }\n \n } // class ContentHandler"}, {"sha": "04fa3f1194568d5c13189f9b3a8dada061055923", "filename": "libjava/java/net/ContentHandlerFactory.java", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7684ffe55c75b893fe40988dbb8fcea9beae3ba/libjava%2Fjava%2Fnet%2FContentHandlerFactory.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7684ffe55c75b893fe40988dbb8fcea9beae3ba/libjava%2Fjava%2Fnet%2FContentHandlerFactory.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FContentHandlerFactory.java?ref=c7684ffe55c75b893fe40988dbb8fcea9beae3ba", "patch": "@@ -1,5 +1,5 @@\n /* ContentHandlerFactory.java -- Interface for creating content handlers\n-   Copyright (C) 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000, 2001, 2003 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -45,25 +45,24 @@\n  */\n \n /**\n-  * This interface maps MIME types to ContentHandler objects.  It consists\n-  * of one method that, when passed a MIME type, returns a handler for that\n-  * type.\n+  * This interface maps MIME types to <code>ContentHandler</code> objects.  \n+  * It consists of one method that, when passed a MIME type, returns a \n+  * handler for that type.\n   *\n   * @author Aaron M. Renn (arenn@urbanophile.com)\n   * @author Warren Levy <warrenl@cygnus.com>\n   */\n public interface ContentHandlerFactory\n {\n-/**\n-  * This method is passed a MIME type as a string and is responsible for\n-  * returning the appropriate ContentType object.\n-  *\n-  * @param mime_type The MIME type to map to a ContentHandler\n-  *\n-  * @return The ContentHandler for the passed in MIME type\n-  */\n-ContentHandler\n-createContentHandler(String mime_type);\n+  /**\n+    * This method is passed a MIME type as a string and is responsible for\n+    * returning the appropriate <code>ContentHandler</code> object.\n+    *\n+    * @param mimeType The MIME type to map to a <code>ContentHandler</code>\n+    *\n+    * @return The <code>ContentHandler</code> for the passed in MIME type\n+    */\n+  public ContentHandler createContentHandler(String mimeType);\n \n } // interface ContentHandlerFactory\n "}, {"sha": "d300f20df92ae169a35b58c6a29527272187d846", "filename": "libjava/java/net/DatagramSocket.java", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7684ffe55c75b893fe40988dbb8fcea9beae3ba/libjava%2Fjava%2Fnet%2FDatagramSocket.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7684ffe55c75b893fe40988dbb8fcea9beae3ba/libjava%2Fjava%2Fnet%2FDatagramSocket.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FDatagramSocket.java?ref=c7684ffe55c75b893fe40988dbb8fcea9beae3ba", "patch": "@@ -1,5 +1,5 @@\n /* DatagramSocket.java -- A class to model UDP sockets\n-   Copyright (C) 1998, 1999, 2000, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000, 2002, 2003 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -94,9 +94,11 @@\n   private boolean closed = false;\n \n   /**\n-   * Creates a DatagramSocket from a specified DatagramSocketImpl instance\n+   * Creates a <code>DatagramSocket</code> from a specified \n+   * <code>DatagramSocketImpl</code> instance\n    *\n-   * @param impl The DatagramSocketImpl the socket will be created from\n+   * @param impl The <code>DatagramSocketImpl</code> the socket will be \n+   * created from\n    * \n    * @since 1.4\n    */\n@@ -113,7 +115,7 @@ protected DatagramSocket (DatagramSocketImpl impl)\n    *\n    * @exception SocketException If an error occurs.\n    * @exception SecurityException If a security manager exists and\n-   * its checkListen method doesn't allow the operation.\n+   * its <code>checkListen</code> method doesn't allow the operation.\n    */\n   public DatagramSocket() throws SocketException\n   {\n@@ -127,7 +129,7 @@ public DatagramSocket() throws SocketException\n    * @param port The local port number to bind to.\n    *\n    * @exception SecurityException If a security manager exists and its\n-   * checkListen method doesn't allow the operation.\n+   * <code>checkListen</code> method doesn't allow the operation.\n    * @exception SocketException If an error occurs.\n    */\n   public DatagramSocket(int port) throws SocketException\n@@ -190,7 +192,7 @@ public DatagramSocket(int port, InetAddress laddr) throws SocketException\n    * @param laddr The local address to bind to.\n    *\n    * @exception SecurityException If a security manager exists and its\n-   * checkListen method doesn't allow the operation.\n+   * <code>checkListen</code> method doesn't allow the operation.\n    * @exception SocketException If an error occurs.\n    *\n    * @since 1.4"}, {"sha": "d225645a88a5b3db113eb1c1b2ba4e49fabe922e", "filename": "libjava/java/net/DatagramSocketImpl.java", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7684ffe55c75b893fe40988dbb8fcea9beae3ba/libjava%2Fjava%2Fnet%2FDatagramSocketImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7684ffe55c75b893fe40988dbb8fcea9beae3ba/libjava%2Fjava%2Fnet%2FDatagramSocketImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FDatagramSocketImpl.java?ref=c7684ffe55c75b893fe40988dbb8fcea9beae3ba", "patch": "@@ -1,5 +1,6 @@\n /* DatagramSocketImpl.java -- Abstract class for UDP socket implementations\n-   Copyright (C) 1998, 1999 2000, 2001, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999 2000, 2001, \n+                 2002, 2003 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -102,8 +103,8 @@ protected abstract void bind(int lport, InetAddress laddr)\n    * Takes a peek at the next packet received in order to retrieve the\n    * address of the sender\n    *\n-   * @param i The InetAddress to fill in with the information about the\n-   *          sender if the next packet\n+   * @param i The <code>InetAddress</code> to fill in with the information \n+   *          about the sender if the next packet\n    *\n    * @return The port number of the sender of the packet\n    *\n@@ -118,7 +119,7 @@ protected abstract void bind(int lport, InetAddress laddr)\n    * Takes a peek at the next packet received.  This packet is not consumed.\n    * With the next peekData/receive operation this packet will be read again.\n    * \n-   * @param p The DatagramPacket to fill in with the data sent.\n+   * @param p The <code>DatagramPacket</code> to fill in with the data sent.\n    *\n    * @return The port number of the sender of the packet.\n    * \n@@ -147,7 +148,7 @@ protected abstract void bind(int lport, InetAddress laddr)\n   /**\n    * Receives a packet of data from the network  Will block until a packet\n    * arrives.  The packet info in populated into the passed in\n-   * DatagramPacket object.\n+   * <code>DatagramPacket</code> object.\n    *\n    * @param p A place to store the incoming packet.\n    *\n@@ -161,7 +162,7 @@ protected abstract void bind(int lport, InetAddress laddr)\n   /**\n    * Connects the socket to a host specified by address and port.\n    *\n-   * @param address The InetAddress of the host to connect to\n+   * @param address The <code>InetAddress</code> of the host to connect to\n    * @param port The port number of the host to connect to\n    *\n    * @exception SocketException If an error occurs\n@@ -288,26 +289,26 @@ protected int getLocalPort()\n    * Sets the specified option on a socket to the passed in object.  For\n    * options that take an integer argument, the passed in object is an\n    * <code>Integer</code>.  For options that are set to on or off, the\n-   * value passed will be a <code>Boolean</code>.   The <code>option_id</code>\n+   * value passed will be a <code>Boolean</code>.   The <code>optionId</code>\n    * parameter is one of the defined constants in the superinterface.\n    *\n-   * @param option_id The identifier of the option\n+   * @param optionId The identifier of the option\n    * @param val The value to set the option to\n    *\n    * @exception SocketException If an error occurs\n    * @XXX This redeclaration from SocketOptions is a workaround to a gcj bug.\n    */\n-  public abstract void setOption(int option_id, Object val)\n+  public abstract void setOption(int optionId, Object val)\n     throws SocketException;\n \n   /**\n    * Returns the current setting of the specified option.  The\n    * <code>Object</code> returned will be an <code>Integer</code> for options\n    * that have integer values.  For options that are set to on or off, a\n-   * <code>Boolean</code> will be returned.   The <code>option_id</code>\n+   * <code>Boolean</code> will be returned.   The <code>optionId</code>\n    * is one of the defined constants in the superinterface.\n    *\n-   * @param option_id The option identifier\n+   * @param optionId The option identifier\n    *\n    * @return The current value of the option\n    *"}, {"sha": "ab39dd457863b344d8005851ba053078f6dd3531", "filename": "libjava/java/net/DatagramSocketImplFactory.java", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7684ffe55c75b893fe40988dbb8fcea9beae3ba/libjava%2Fjava%2Fnet%2FDatagramSocketImplFactory.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7684ffe55c75b893fe40988dbb8fcea9beae3ba/libjava%2Fjava%2Fnet%2FDatagramSocketImplFactory.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FDatagramSocketImplFactory.java?ref=c7684ffe55c75b893fe40988dbb8fcea9beae3ba", "patch": "@@ -1,5 +1,5 @@\n /* DatagramSocketImplFactory.java\n-   Copyright (C) 2002 Free Software Foundation, Inc.\n+   Copyright (C) 2002, 2003 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -42,7 +42,8 @@\n   */\n \n /**\n-  * This interface defines one method which returns a DatagramSocketImpl object.\n+  * This interface defines one method which returns a \n+  * <code>DatagramSocketImpl</code> object.\n   * This should not be needed by ordinary applications.\n   *\n   * @author Michael Koch <konqueror@gmx.de>\n@@ -55,5 +56,5 @@\n    *\n    * @return A DatagramSocketImpl object\n    */\n-  DatagramSocketImpl createDatagramSocketImpl();\n+  public DatagramSocketImpl createDatagramSocketImpl();\n } // interface DatagramSocketImplFactory"}, {"sha": "b4f9e19160c3eeccd3d613336b2d8b4dd26fe6f8", "filename": "libjava/java/net/FileNameMap.java", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7684ffe55c75b893fe40988dbb8fcea9beae3ba/libjava%2Fjava%2Fnet%2FFileNameMap.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7684ffe55c75b893fe40988dbb8fcea9beae3ba/libjava%2Fjava%2Fnet%2FFileNameMap.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FFileNameMap.java?ref=c7684ffe55c75b893fe40988dbb8fcea9beae3ba", "patch": "@@ -1,5 +1,5 @@\n /* FileNameMap.java -- Maps filenames to MIME types\n-   Copyright (C) 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000, 2001, 2003 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -54,16 +54,15 @@\n   */\n public interface FileNameMap\n {\n-/**\n-  * This method is passed a filename and is responsible for determining\n-  * the appropriate MIME type for that file.\n-  *\n-  * @param filename The name of the file to generate a MIME type for.\n-  *\n-  * @return The MIME type for the filename passed in.\n-  */\n-String\n-getContentTypeFor(String filename);\n+  /**\n+    * This method is passed a filename and is responsible for determining\n+    * the appropriate MIME type for that file.\n+    *\n+    * @param filename The name of the file to generate a MIME type for.\n+    *\n+    * @return The MIME type for the filename passed in.\n+    */\n+  public String getContentTypeFor(String filename);\n \n } // interface FileNameMap\n "}, {"sha": "fc5de7a08516e97af8552a93622963652a08ea87", "filename": "libjava/java/net/SocketImplFactory.java", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7684ffe55c75b893fe40988dbb8fcea9beae3ba/libjava%2Fjava%2Fnet%2FSocketImplFactory.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7684ffe55c75b893fe40988dbb8fcea9beae3ba/libjava%2Fjava%2Fnet%2FSocketImplFactory.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FSocketImplFactory.java?ref=c7684ffe55c75b893fe40988dbb8fcea9beae3ba", "patch": "@@ -1,5 +1,5 @@\n /* SocketImplFactory.java -- Interface to create a SocketImpl object\n-   Copyright (C) 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000, 2001, 2003 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -43,21 +43,20 @@\n   */\n \n /**\n-  * This interface defines one method which returns a SocketImpl object.\n-  * This should not be needed by ordinary applications.\n+  * This interface defines one method which returns a <code>SocketImpl</code>\n+  * object.  This should not be needed by ordinary applications.\n   *\n   * @author Aaron M. Renn (arenn@urbanophile.com)\n   * @author Per Bothner <bothner@cygnus.com>\n   */\n public interface SocketImplFactory\n {\n-/**\n-  * This method returns an instance of the SocketImpl object\n-  *\n-  * @return A SocketImpl object\n-  */\n-SocketImpl\n-createSocketImpl();\n+  /**\n+    * This method returns an instance of the <code>SocketImpl</code> object\n+    *\n+    * @return A <code>SocketImpl</code> object\n+    */\n+  public SocketImpl createSocketImpl();\n \n } // interface SocketImplFactory\n "}, {"sha": "b0404e8409c660977e82e2cd6751c1b6e68e1a3d", "filename": "libjava/java/net/SocketOptions.java", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7684ffe55c75b893fe40988dbb8fcea9beae3ba/libjava%2Fjava%2Fnet%2FSocketOptions.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7684ffe55c75b893fe40988dbb8fcea9beae3ba/libjava%2Fjava%2Fnet%2FSocketOptions.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FSocketOptions.java?ref=c7684ffe55c75b893fe40988dbb8fcea9beae3ba", "patch": "@@ -1,5 +1,6 @@\n /* SocketOptions.java -- Implements options for sockets (duh!)\n-   Copyright (C) 1998, 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000, 2001, \n+                 2002, 2003 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -138,30 +139,30 @@\n    * Sets the specified option on a socket to the passed in object.  For\n    * options that take an integer argument, the passed in object is an\n    * <code>Integer</code>.  For options that are set to on or off, the\n-   * value passed will be a <code>Boolean</code>.   The <code>option_id</code>\n+   * value passed will be a <code>Boolean</code>.   The <code>optionId</code>\n    * parameter is one of the defined constants in this interface.\n    *\n-   * @param option_id The identifier of the option\n+   * @param optionId The identifier of the option\n    * @param val The value to set the option to\n    *\n    * @exception SocketException If an error occurs\n    */\n-  void setOption(int option_id, Object val) throws SocketException;\n+  void setOption(int optionId, Object val) throws SocketException;\n \n   /**\n    * Returns the current setting of the specified option.  The\n    * <code>Object</code> returned will be an <code>Integer</code> for options\n    * that have integer values.  For options that are set to on or off, a\n-   * <code>Boolean</code> will be returned.   The <code>option_id</code>\n-   * is one of the defined constants in this interface.\n+   * <code>Boolean</code> will be returned.   The <code>optionId</code>\n+   * parameter is one of the defined constants in this interface.\n    *\n-   * @param option_id The option identifier\n+   * @param optionId The option identifier\n    *\n    * @return The current value of the option\n    *\n    * @exception SocketException If an error occurs\n    */\n-  Object getOption(int option_id) throws SocketException;\n+  Object getOption(int optionId) throws SocketException;\n \n } // interface SocketOptions\n "}, {"sha": "a9ecbad8f06db1df431eff6a6e591ae3ce44c1b9", "filename": "libjava/java/net/URLStreamHandlerFactory.java", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7684ffe55c75b893fe40988dbb8fcea9beae3ba/libjava%2Fjava%2Fnet%2FURLStreamHandlerFactory.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7684ffe55c75b893fe40988dbb8fcea9beae3ba/libjava%2Fjava%2Fnet%2FURLStreamHandlerFactory.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FURLStreamHandlerFactory.java?ref=c7684ffe55c75b893fe40988dbb8fcea9beae3ba", "patch": "@@ -1,5 +1,5 @@\n /* URLStreamHandlerFactory.java -- Maps protocols to URLStreamHandlers\n-   Copyright (C) 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000, 2001, 2003 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -46,23 +46,22 @@\n /**\n  * This interface contains one method which maps the protocol portion of\n  * a URL (eg, \"http\" in \"http://www.urbanophile.com/arenn/\") to a \n- * URLStreamHandler object.\n+ * <code>URLStreamHandler</code> object.\n  *\n  * @author Aaron M. Renn (arenn@urbanophile.com)\n  * @author Warren Levy <warrenl@cygnus.com>\n  */\n public interface URLStreamHandlerFactory\n {\n-/**\n-  * This method maps the protocol portion of a URL to a URLStreamHandler\n-  * object.\n-  *\n-  * @param protocol The protocol name to map (\"http\", \"ftp\", etc).\n-  *\n-  * @return The URLStreamHandler for the specified protocol\n-  */\n-URLStreamHandler\n-createURLStreamHandler(String protocol);\n+  /**\n+    * This method maps the protocol portion of a URL to a \n+    * <code>URLStreamHandler</code> object.\n+    *\n+    * @param protocol The protocol name to map (\"http\", \"ftp\", etc).\n+    *\n+    * @return The <code>URLStreamHandler</code> for the specified protocol\n+    */\n+  public URLStreamHandler createURLStreamHandler(String protocol);\n \n } // interface URLStreamHandlerFactory\n "}]}