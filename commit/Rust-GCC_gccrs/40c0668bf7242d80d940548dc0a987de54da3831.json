{"sha": "40c0668bf7242d80d940548dc0a987de54da3831", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDBjMDY2OGJmNzI0MmQ4MGQ5NDA1NDhkYzBhOTg3ZGU1NGRhMzgzMQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2001-11-12T10:21:09Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2001-11-12T10:21:09Z"}, "message": "emit-rtl.c (set_mem_attributes): If making object, can set alignment from type.\n\n\t* emit-rtl.c (set_mem_attributes): If making object, can set alignment\n\tfrom type.\n\t(replace_equiv_address): Call update_temp_slot_address.\n\nFrom-SVN: r46940", "tree": {"sha": "76fe196dc449b540f0ebdef99b27c045fe8a8b3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/76fe196dc449b540f0ebdef99b27c045fe8a8b3e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40c0668bf7242d80d940548dc0a987de54da3831", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40c0668bf7242d80d940548dc0a987de54da3831", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40c0668bf7242d80d940548dc0a987de54da3831", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40c0668bf7242d80d940548dc0a987de54da3831/comments", "author": null, "committer": null, "parents": [{"sha": "749552c44bc23a0ac79d9083c6e2f872b3d438c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/749552c44bc23a0ac79d9083c6e2f872b3d438c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/749552c44bc23a0ac79d9083c6e2f872b3d438c1"}], "stats": {"total": 16, "additions": 11, "deletions": 5}, "files": [{"sha": "4702f7e48ea22e457820686386fd6862b5e4e191", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40c0668bf7242d80d940548dc0a987de54da3831/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40c0668bf7242d80d940548dc0a987de54da3831/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=40c0668bf7242d80d940548dc0a987de54da3831", "patch": "@@ -1,5 +1,9 @@\n Mon Nov 12 05:18:42 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n+\t* emit-rtl.c (set_mem_attributes): If making object, can set alignment\n+\tfrom type.\n+\t(replace_equiv_address): Call update_temp_slot_address.\n+\n \t* dwarf2out.c (loc_descriptor_from_tree, case COMPOUND_EXPR): New case.\n \n \t* alias.c (nonoverlapping_memrefs_p): Handle DECL_RTL being a CONCAT."}, {"sha": "73307ecab281a99dbcd6bc5443eb74afe7c2d199", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40c0668bf7242d80d940548dc0a987de54da3831/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40c0668bf7242d80d940548dc0a987de54da3831/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=40c0668bf7242d80d940548dc0a987de54da3831", "patch": "@@ -1699,6 +1699,11 @@ set_mem_attributes (ref, t, objectp)\n   if ((objectp || DECL_P (t)) && ! AGGREGATE_TYPE_P (type))\n     MEM_SCALAR_P (ref) = 1;\n \n+  /* We can set the alignment from the type if we are makign an object or\n+     if this is an INDIRECT_REF.  */\n+  if (objectp || TREE_CODE (t) == INDIRECT_REF)\n+    align = TYPE_ALIGN (type);\n+\n   /* If the size is known, we can set that.  */\n   if (TYPE_SIZE_UNIT (type) && host_integerp (TYPE_SIZE_UNIT (type), 1))\n     size = GEN_INT (tree_low_cst (TYPE_SIZE_UNIT (type), 1));\n@@ -1733,11 +1738,7 @@ set_mem_attributes (ref, t, objectp)\n \t  align =  DECL_ALIGN (t);\n \t}\n \n-      /* If this is an INDIRECT_REF, we know its alignment.  */\n-      else if (TREE_CODE (t) == INDIRECT_REF)\n-\talign = TYPE_ALIGN (type);\n-\n-      /* Likewise for constants.  */\n+      /* If this is a constant, we know the alignment.  */\n       else if (TREE_CODE_CLASS (TREE_CODE (t)) == 'c')\n \t{\n \t  align = TYPE_ALIGN (type);\n@@ -1961,6 +1962,7 @@ replace_equiv_address (memref, addr)\n {\n   /* change_address_1 copies the memory attribute structure without change\n      and that's exactly what we want here.  */\n+  update_temp_slot_address (XEXP (memref, 0), addr);\n   return change_address_1 (memref, VOIDmode, addr, 1);\n }\n "}]}