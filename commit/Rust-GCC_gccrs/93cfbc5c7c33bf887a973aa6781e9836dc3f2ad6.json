{"sha": "93cfbc5c7c33bf887a973aa6781e9836dc3f2ad6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTNjZmJjNWM3YzMzYmY4ODdhOTczYWE2NzgxZTk4MzZkYzNmMmFkNg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@airs.com", "date": "2005-04-24T13:38:19Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2005-04-24T13:38:19Z"}, "message": "cp-tree.def (USING_STMT): Change class to tcc_statement.\n\n\t* cp-tree.def (USING_STMT): Change class to tcc_statement.\n\t(TRY_BLOCK, EH_SPEC_BLOCK, HANDLER, CLEANUP_STMT): Likewise.\n\t(IF_STMT, FOR_STMT, WHILE_STMT, DO_STMT): Likewise.\n\t(BREAK_STMT, CONTINUE_STMT, SWITCH_STMT): Likewise.\n\nFrom-SVN: r98659", "tree": {"sha": "de1f784a74dbf6346a4e198e708dfc11c091562a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de1f784a74dbf6346a4e198e708dfc11c091562a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/93cfbc5c7c33bf887a973aa6781e9836dc3f2ad6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93cfbc5c7c33bf887a973aa6781e9836dc3f2ad6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93cfbc5c7c33bf887a973aa6781e9836dc3f2ad6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93cfbc5c7c33bf887a973aa6781e9836dc3f2ad6/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "374097963cec9c1142faf10b819aa28d1fb6f641", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/374097963cec9c1142faf10b819aa28d1fb6f641", "html_url": "https://github.com/Rust-GCC/gccrs/commit/374097963cec9c1142faf10b819aa28d1fb6f641"}], "stats": {"total": 31, "additions": 19, "deletions": 12}, "files": [{"sha": "0838f9326678d4771190064a9d70baee4f988dd0", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93cfbc5c7c33bf887a973aa6781e9836dc3f2ad6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93cfbc5c7c33bf887a973aa6781e9836dc3f2ad6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=93cfbc5c7c33bf887a973aa6781e9836dc3f2ad6", "patch": "@@ -1,3 +1,10 @@\n+2005-04-24  Ian Lance Taylor  <ian@airs.com>\n+\n+\t* cp-tree.def (USING_STMT): Change class to tcc_statement.\n+\t(TRY_BLOCK, EH_SPEC_BLOCK, HANDLER, CLEANUP_STMT): Likewise.\n+\t(IF_STMT, FOR_STMT, WHILE_STMT, DO_STMT): Likewise.\n+\t(BREAK_STMT, CONTINUE_STMT, SWITCH_STMT): Likewise.\n+\n 2005-04-23  DJ Delorie  <dj@redhat.com>\n \n \t* call.c, class.c, cvt.c, decl.c, decl2.c, except.c, friend.c,"}, {"sha": "2c944de9197be51aba0a74eeb3eb33e088740f75", "filename": "gcc/cp/cp-tree.def", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93cfbc5c7c33bf887a973aa6781e9836dc3f2ad6/gcc%2Fcp%2Fcp-tree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93cfbc5c7c33bf887a973aa6781e9836dc3f2ad6/gcc%2Fcp%2Fcp-tree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.def?ref=93cfbc5c7c33bf887a973aa6781e9836dc3f2ad6", "patch": "@@ -204,7 +204,7 @@ DEFTREECODE (UNBOUND_CLASS_TEMPLATE, \"unbound_class_template\", tcc_type, 0)\n DEFTREECODE (USING_DECL, \"using_decl\", tcc_declaration, 0)\n \n /* A using directive. The operand is USING_STMT_NAMESPACE.  */     \n-DEFTREECODE (USING_STMT, \"using_directive\", tcc_expression, 1)\n+DEFTREECODE (USING_STMT, \"using_directive\", tcc_statement, 1)\n \n /* An un-parsed default argument.  Looks like an IDENTIFIER_NODE.  */\n DEFTREECODE (DEFAULT_ARG, \"default_arg\", tcc_exceptional, 0)\n@@ -258,15 +258,15 @@ DEFTREECODE (NON_DEPENDENT_EXPR, \"non_dependent_expr\", tcc_expression, 1)\n    setup_vtbl_pointer (and appears in all functions, not just ctors).  */\n DEFTREECODE (CTOR_INITIALIZER, \"ctor_initializer\", tcc_expression, 1)\n \n-DEFTREECODE (TRY_BLOCK, \"try_block\", tcc_expression, 2)\n+DEFTREECODE (TRY_BLOCK, \"try_block\", tcc_statement, 2)\n \n-DEFTREECODE (EH_SPEC_BLOCK, \"eh_spec_block\", tcc_expression, 2)\n+DEFTREECODE (EH_SPEC_BLOCK, \"eh_spec_block\", tcc_statement, 2)\n \n /* A HANDLER wraps a catch handler for the HANDLER_TYPE.  If this is\n    CATCH_ALL_TYPE, then the handler catches all types.  The declaration of\n    the catch variable is in HANDLER_PARMS, and the body block in\n    HANDLER_BODY.  */\n-DEFTREECODE (HANDLER, \"handler\", tcc_expression, 2)\n+DEFTREECODE (HANDLER, \"handler\", tcc_statement, 2)\n \n /* A MUST_NOT_THROW_EXPR wraps an expression that may not\n    throw, and must call terminate if it does.  */\n@@ -275,35 +275,35 @@ DEFTREECODE (MUST_NOT_THROW_EXPR, \"must_not_throw_expr\", tcc_expression, 1)\n /* A CLEANUP_STMT marks the point at which a declaration is fully\n    constructed.  The CLEANUP_EXPR is run on behalf of CLEANUP_DECL\n    when CLEANUP_BODY completes.  */\n-DEFTREECODE (CLEANUP_STMT, \"cleanup_stmt\", tcc_expression, 3)\n+DEFTREECODE (CLEANUP_STMT, \"cleanup_stmt\", tcc_statement, 3)\n \n /* Represents an 'if' statement. The operands are IF_COND,\n    THEN_CLAUSE, and ELSE_CLAUSE, respectively.  */\n /* ??? It is currently still necessary to distinguish between IF_STMT \n    and COND_EXPR for the benefit of templates.  */\n-DEFTREECODE (IF_STMT, \"if_stmt\", tcc_expression, 3)\n+DEFTREECODE (IF_STMT, \"if_stmt\", tcc_statement, 3)\n \n /* Used to represent a `for' statement. The operands are\n    FOR_INIT_STMT, FOR_COND, FOR_EXPR, and FOR_BODY, respectively.  */\n-DEFTREECODE (FOR_STMT, \"for_stmt\", tcc_expression, 4)\n+DEFTREECODE (FOR_STMT, \"for_stmt\", tcc_statement, 4)\n \n /* Used to represent a 'while' statement. The operands are WHILE_COND\n    and WHILE_BODY, respectively.  */\n-DEFTREECODE (WHILE_STMT, \"while_stmt\", tcc_expression, 2)\n+DEFTREECODE (WHILE_STMT, \"while_stmt\", tcc_statement, 2)\n \n /* Used to represent a 'do' statement. The operands are DO_BODY and\n    DO_COND, respectively.  */\n-DEFTREECODE (DO_STMT, \"do_stmt\", tcc_expression, 2)\n+DEFTREECODE (DO_STMT, \"do_stmt\", tcc_statement, 2)\n \n /* Used to represent a 'break' statement.  */\n-DEFTREECODE (BREAK_STMT, \"break_stmt\", tcc_expression, 0)\n+DEFTREECODE (BREAK_STMT, \"break_stmt\", tcc_statement, 0)\n \n /* Used to represent a 'continue' statement.  */\n-DEFTREECODE (CONTINUE_STMT, \"continue_stmt\", tcc_expression, 0)\n+DEFTREECODE (CONTINUE_STMT, \"continue_stmt\", tcc_statement, 0)\n \n /* Used to represent a 'switch' statement. The operands are\n    SWITCH_STMT_COND, SWITCH_STMT_BODY and SWITCH_STMT_TYPE, respectively.  */\n-DEFTREECODE (SWITCH_STMT, \"switch_stmt\", tcc_expression, 3)\n+DEFTREECODE (SWITCH_STMT, \"switch_stmt\", tcc_statement, 3)\n \n DEFTREECODE (TAG_DEFN, \"tag_defn\", tcc_expression, 0)\n "}]}