{"sha": "8f80d7345ab357fee866ab4e7891d38bf6da20cf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGY4MGQ3MzQ1YWIzNTdmZWU4NjZhYjRlNzg5MWQzOGJmNmRhMjBjZg==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2017-12-15T16:19:22Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2017-12-15T16:19:22Z"}, "message": "re PR tree-optimization/83410 (libgomp.graphite/force-parallel-4.c etc. FAIL)\n\n\tPR tree-optimization/83410\n\t* tree-ssa-threadupdate.c (thread_block_1): Avoid certain jump\n\tthreads when parallelizing loops.\n\nFrom-SVN: r255700", "tree": {"sha": "4959effaaa4a79ac3ab79c858e14d7a73f45177a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4959effaaa4a79ac3ab79c858e14d7a73f45177a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f80d7345ab357fee866ab4e7891d38bf6da20cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f80d7345ab357fee866ab4e7891d38bf6da20cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f80d7345ab357fee866ab4e7891d38bf6da20cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f80d7345ab357fee866ab4e7891d38bf6da20cf/comments", "author": null, "committer": null, "parents": [{"sha": "4849deb1a30681b31d51da7501c6432b12324593", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4849deb1a30681b31d51da7501c6432b12324593", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4849deb1a30681b31d51da7501c6432b12324593"}], "stats": {"total": 31, "additions": 31, "deletions": 0}, "files": [{"sha": "2d53e24b4c1f7943625c03a8ec8e6d651f694125", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f80d7345ab357fee866ab4e7891d38bf6da20cf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f80d7345ab357fee866ab4e7891d38bf6da20cf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8f80d7345ab357fee866ab4e7891d38bf6da20cf", "patch": "@@ -1,3 +1,9 @@\n+2017-12-12  Jeff Law  <law@redhat.com>\n+\n+\tPR tree-optimization/83410\n+\t* tree-ssa-threadupdate.c (thread_block_1): Avoid certain jump\n+\tthreads when parallelizing loops.\n+\n 2017-12-15  Jakub Jelinek  <jakub@redhat.com>\n \n \t* tree-core.h (struct attribute_spec): Swap affects_type_identity and"}, {"sha": "63ad8f9c95372c81bffd1cb4746e70cc034ae718", "filename": "gcc/tree-ssa-threadupdate.c", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f80d7345ab357fee866ab4e7891d38bf6da20cf/gcc%2Ftree-ssa-threadupdate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f80d7345ab357fee866ab4e7891d38bf6da20cf/gcc%2Ftree-ssa-threadupdate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadupdate.c?ref=8f80d7345ab357fee866ab4e7891d38bf6da20cf", "patch": "@@ -1333,6 +1333,31 @@ thread_block_1 (basic_block bb, bool noloop_only, bool joiners)\n \n \t  if (i != path->length ())\n \t    continue;\n+\n+\t  /* Loop parallelization can be confused by the result of\n+\t     threading through the loop exit test back into the loop.\n+\t     However, theading those jumps seems to help other codes.\n+\n+\t     I have been unable to find anything related to the shape of\n+\t     the CFG, the contents of the affected blocks, etc which would\n+\t     allow a more sensible test than what we're using below which\n+\t     merely avoids the optimization when parallelizing loops.  */\n+\t  if (flag_tree_parallelize_loops > 1)\n+\t    {\n+\t      for (i = 1; i < path->length (); i++)\n+\t        if (bb->loop_father == e2->src->loop_father\n+\t\t    && loop_exits_from_bb_p (bb->loop_father,\n+\t\t\t\t\t     (*path)[i]->e->src)\n+\t\t    && !loop_exit_edge_p (bb->loop_father, e2))\n+\t\t  break;\n+\n+\t      if (i != path->length ())\n+\t\t{\n+\t\t  delete_jump_thread_path (path);\n+\t\t  e->aux = NULL;\n+\t\t  continue;\n+\t\t}\n+\t    }\n \t}\n \n       /* Insert the outgoing edge into the hash table if it is not"}]}