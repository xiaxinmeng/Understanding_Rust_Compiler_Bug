{"sha": "81ac6aa564fc7dc249d9086e4d88020a5a503ee7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODFhYzZhYTU2NGZjN2RjMjQ5ZDkwODZlNGQ4ODAyMGE1YTUwM2VlNw==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-04-18T00:04:05Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-04-18T00:04:05Z"}, "message": "entered into RCS\n\nFrom-SVN: r770", "tree": {"sha": "fbf7cd90463ad01b6c10ad8c8e32c0c0631da07a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fbf7cd90463ad01b6c10ad8c8e32c0c0631da07a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/81ac6aa564fc7dc249d9086e4d88020a5a503ee7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81ac6aa564fc7dc249d9086e4d88020a5a503ee7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81ac6aa564fc7dc249d9086e4d88020a5a503ee7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81ac6aa564fc7dc249d9086e4d88020a5a503ee7/comments", "author": null, "committer": null, "parents": [{"sha": "e2ca2fab50fa8fca01a20affebdc0a400d97d08a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2ca2fab50fa8fca01a20affebdc0a400d97d08a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2ca2fab50fa8fca01a20affebdc0a400d97d08a"}], "stats": {"total": 61, "additions": 4, "deletions": 57}, "files": [{"sha": "d27a418b9a80b203dd5cf7859bafb99b73d30200", "filename": "gcc/config/ns32k/encore.h", "status": "modified", "additions": 4, "deletions": 57, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81ac6aa564fc7dc249d9086e4d88020a5a503ee7/gcc%2Fconfig%2Fns32k%2Fencore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81ac6aa564fc7dc249d9086e4d88020a5a503ee7/gcc%2Fconfig%2Fns32k%2Fencore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fencore.h?ref=81ac6aa564fc7dc249d9086e4d88020a5a503ee7", "patch": "@@ -144,65 +144,12 @@ do {\t\t\t\t\t\t\t\t\t\\\n   fprintf ((file), \"\\\"\\n\");\t\t\t\t\\\n }\n \n-#define NO_ABSOLUTE_PREFIX_IF_SYMBOLIC\n+/* Modify syntax of jsr instructions.  */\n+#define CALL_MEMREF_IMPLICIT\n \n- /*\n-  *  Dollar signs are required before immediate operands, double\n-  *  floating point constants use $0f syntax, and external addresses\n-  *  should be prefixed with a question mark to avoid assembler warnings\n-  *  about undefined symbols.\n-  */\n+#define NO_ABSOLUTE_PREFIX_IF_SYMBOLIC\n \n-#define PRINT_OPERAND(FILE, X, CODE)\t\t\t\t\t\\\n-{ if (CODE == '$') putc ('$', FILE);\t\t\t\t\t\\\n-  else if (CODE == '?') fputc ('?', FILE);\t\t\t\t\\\n-  else if (GET_CODE (X) == REG)\t\t\t\t\t\t\\\n-    fprintf (FILE, \"%s\", reg_names[REGNO (X)]);\t\t\t\t\\\n-  else if (GET_CODE (X) == MEM)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      rtx xfoo;\t\t\t\t\t\t\t\t\\\n-      xfoo = XEXP (X, 0);\t\t\t\t\t\t\\\n-      switch (GET_CODE (xfoo))\t\t\t\t\t\t\\\n-\t{\t\t\t\t\t\t\t\t\\\n-\tcase MEM:\t\t\t\t\t\t\t\\\n-\t  if (GET_CODE (XEXP (xfoo, 0)) == REG)\t\t\t\t\\\n-\t    if (REGNO (XEXP (xfoo, 0)) == STACK_POINTER_REGNUM)\t\t\\\n-\t      fprintf (FILE, \"0(0(sp))\");\t\t\t\t\\\n-\t    else fprintf (FILE, \"0(0(%s))\",\t\t\t\t\\\n-\t\t\t  reg_names[REGNO (XEXP (xfoo, 0))]);\t\t\\\n-\t  else\t\t\t\t\t\t\t\t\\\n-\t    {\t\t\t\t\t\t\t\t\\\n-\t      fprintf (FILE, \"0(\");\t\t\t\t\t\\\n-\t      output_address (xfoo);\t\t\t\t\t\\\n-\t      putc (')', FILE);\t\t\t\t\t\t\\\n-\t    }\t\t\t\t\t\t\t\t\\\n-\t  break;\t\t\t\t\t\t\t\\\n-\tcase REG:\t\t\t\t\t\t\t\\\n-\t  fprintf (FILE, \"0(%s)\", reg_names[REGNO (xfoo)]);\t\t\\\n-\t  break;\t\t\t\t\t\t\t\\\n-\tcase PRE_DEC:\t\t\t\t\t\t\t\\\n-\tcase POST_INC:\t\t\t\t\t\t\t\\\n-\t  fprintf (FILE, \"tos\");\t\t\t\t\t\\\n-\t  break;\t\t\t\t\t\t\t\\\n-\tcase CONST_INT:\t\t\t\t\t\t\t\\\n-\t  fprintf (FILE, \"@%d\", INTVAL (xfoo));\t\t\t\t\\\n-\t  break;\t\t\t\t\t\t\t\\\n-\tdefault:\t\t\t\t\t\t\t\\\n-\t  output_address (xfoo);\t\t\t\t\t\\\n-\t  break;\t\t\t\t\t\t\t\\\n-\t}\t\t\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  else if (GET_CODE (X) == CONST_DOUBLE && GET_MODE (X) != DImode)\t\\\n-    if (GET_MODE (X) == DFmode)\t\t\t\t\t\t\\\n-      { union { double d; int i[2]; } u;\t\t\t\t\\\n-\tu.i[0] = CONST_DOUBLE_LOW (X); u.i[1] = CONST_DOUBLE_HIGH (X);\t\\\n-\tfprintf (FILE, \"$0f%.20e\", u.d); }\t\t\t\t\\\n-    else { union { double d; int i[2]; } u;\t\t\t\t\\\n-\t   u.i[0] = CONST_DOUBLE_LOW (X); u.i[1] = CONST_DOUBLE_HIGH (X); \\\n-\t   fprintf (FILE, \"$0f%.20e\", u.d); }\t\t\t\t\\\n-  else if (GET_CODE (X) == CONST)\t\t\t\t\t\\\n-    output_addr_const (FILE, X);\t\t\t\t\t\\\n-  else { putc ('$', FILE); output_addr_const (FILE, X); }}\n+#define PRINT_OPERAND(FILE, X, CODE) print_operand(FILE, X, CODE)\n \n #define PRINT_OPERAND_ADDRESS(FILE, ADDR)  print_operand_address(FILE, ADDR)\n \f"}]}