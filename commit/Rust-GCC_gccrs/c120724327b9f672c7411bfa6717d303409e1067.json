{"sha": "c120724327b9f672c7411bfa6717d303409e1067", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzEyMDcyNDMyN2I5ZjY3MmM3NDExYmZhNjcxN2QzMDM0MDllMTA2Nw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2003-07-05T00:08:11Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2003-07-05T00:08:11Z"}, "message": "fptr.c: Fix comment typos.\n\n\t* config/pa/fptr.c: Fix comment typos.\n\t* config/pa/pa-64.h: Likewise.\n\t* config/pa/pa.c: Likewise.\n\t* config/pa/pa.h: Likewise.\n\t* config/rs6000/603.md: Likewise.\n\t* config/rs6000/7xx.md: Likewise.\n\t* config/rs6000/darwin.h: Likewise.\n\t* config/rs6000/freebsd.h: Likewise.\n\t* config/rs6000/rs6000.c: Likewise.\n\t* config/rs6000/rs6000.md: Likewise.\n\t* config/rs6000/spe.h: Likewise.\n\nFrom-SVN: r68947", "tree": {"sha": "cd5de58afed9165c3e3dcbf71dcb4cb9920b7829", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd5de58afed9165c3e3dcbf71dcb4cb9920b7829"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c120724327b9f672c7411bfa6717d303409e1067", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c120724327b9f672c7411bfa6717d303409e1067", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c120724327b9f672c7411bfa6717d303409e1067", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c120724327b9f672c7411bfa6717d303409e1067/comments", "author": null, "committer": null, "parents": [{"sha": "21607eb4321f5093db2b3d8636209eeaff3891b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21607eb4321f5093db2b3d8636209eeaff3891b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21607eb4321f5093db2b3d8636209eeaff3891b9"}], "stats": {"total": 46, "additions": 30, "deletions": 16}, "files": [{"sha": "f393bfa544c53cd773ccf2647d447798a4e064fe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c120724327b9f672c7411bfa6717d303409e1067/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c120724327b9f672c7411bfa6717d303409e1067/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c120724327b9f672c7411bfa6717d303409e1067", "patch": "@@ -1,3 +1,17 @@\n+2003-07-04  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/pa/fptr.c: Fix comment typos.\n+\t* config/pa/pa-64.h: Likewise.\n+\t* config/pa/pa.c: Likewise.\n+\t* config/pa/pa.h: Likewise.\n+\t* config/rs6000/603.md: Likewise.\n+\t* config/rs6000/7xx.md: Likewise.\n+\t* config/rs6000/darwin.h: Likewise.\n+\t* config/rs6000/freebsd.h: Likewise.\n+\t* config/rs6000/rs6000.c: Likewise.\n+\t* config/rs6000/rs6000.md: Likewise.\n+\t* config/rs6000/spe.h: Likewise.\n+\n 2003-07-04  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \t* config/s390/2064.md: Change GNU CC to GCC."}, {"sha": "680cb20c3a4e8980237c70b0f8795675be53b08b", "filename": "gcc/config/pa/fptr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c120724327b9f672c7411bfa6717d303409e1067/gcc%2Fconfig%2Fpa%2Ffptr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c120724327b9f672c7411bfa6717d303409e1067/gcc%2Fconfig%2Fpa%2Ffptr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Ffptr.c?ref=c120724327b9f672c7411bfa6717d303409e1067", "patch": "@@ -94,7 +94,7 @@ __canonicalize_funcptr_for_compare (fptr)\n       /* Find the first \"bl\" branch in the offset search list.  This is a\n \t call to fixup or a magic branch to fixup at the beginning of the\n \t trampoline template.  The fixup function does the actual runtime\n-\t resolution of function decriptors.  We only look for \"bl\" branches\n+\t resolution of function descriptors.  We only look for \"bl\" branches\n \t with a 17-bit pc-relative displacement.  */\n       for (i = 0; i < NOFFSETS; i++)\n \t{"}, {"sha": "6cb289e3b41c4699605a569104ff0f2c09e7ad05", "filename": "gcc/config/pa/pa-64.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c120724327b9f672c7411bfa6717d303409e1067/gcc%2Fconfig%2Fpa%2Fpa-64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c120724327b9f672c7411bfa6717d303409e1067/gcc%2Fconfig%2Fpa%2Fpa-64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-64.h?ref=c120724327b9f672c7411bfa6717d303409e1067", "patch": "@@ -93,6 +93,6 @@ Boston, MA 02111-1307, USA.  */\n    next argument, if that argument is smaller than its aligned space as\n    controlled by PARM_BOUNDARY.  If this macro is not defined, all such\n    arguments are padded down when BYTES_BIG_ENDIAN is true.  We don't\n-   want aggregrates padded down.  */\n+   want aggregates padded down.  */\n \n #define PAD_VARARGS_DOWN (!AGGREGATE_TYPE_P (type))"}, {"sha": "9287583bd7dd9fbb44e30c399c8d8d26097a32a1", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c120724327b9f672c7411bfa6717d303409e1067/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c120724327b9f672c7411bfa6717d303409e1067/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=c120724327b9f672c7411bfa6717d303409e1067", "patch": "@@ -1467,7 +1467,7 @@ force_mode (mode, orig)\n    normally.\n \n    Note SCRATCH_REG may not be in the proper mode depending on how it\n-   will be used.  This routine is resposible for creating a new copy\n+   will be used.  This routine is responsible for creating a new copy\n    of SCRATCH_REG in the proper mode.  */\n \n int\n@@ -7585,7 +7585,7 @@ pa_function_ok_for_sibcall (decl, exp)\n     return (decl != NULL_TREE);\n \n   /* Sibcalls are not ok because the arg pointer register is not a fixed\n-     register.  This prevents the sibcall optimization from occuring.  In\n+     register.  This prevents the sibcall optimization from occurring.  In\n      addition, there are problems with stub placement using GNU ld.  This\n      is because a normal sibcall branch uses a 17-bit relocation while\n      a regular call branch uses a 22-bit relocation.  As a result, more\n@@ -8641,7 +8641,7 @@ function_arg (cum, mode, type, named)\n \t     This is magic.  Normally, using a PARALLEL results in left\n \t     justified data on a big-endian target.  However, using a\n \t     single double-word register provides the required right\n-\t     justication for 5 to 8 byte structures.  This has nothing\n+\t     justification for 5 to 8 byte structures.  This has nothing\n \t     to do with the direction of padding specified for the argument.\n \t     It has to do with how the data is widened and shifted into\n \t     and from the register."}, {"sha": "3f61074e632994cdcde33fd9874bcfa0703ab22c", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c120724327b9f672c7411bfa6717d303409e1067/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c120724327b9f672c7411bfa6717d303409e1067/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=c120724327b9f672c7411bfa6717d303409e1067", "patch": "@@ -197,7 +197,7 @@ extern int target_flags;\n    difference calls.  This is a call variant similar to the long pic\n    pc-relative call.  Long pic symbol difference calls are only used with\n    the HP SOM linker.  Currently, only the HP assembler supports these\n-   calls.  GAS doesn't allow an arbritrary difference of two symbols.  */\n+   calls.  GAS doesn't allow an arbitrary difference of two symbols.  */\n #define TARGET_LONG_PIC_SDIFF_CALL (!TARGET_GAS)\n \n /* Define to a C expression evaluating to true to use long pic"}, {"sha": "7ae038e33e08159ecf7a172b6361bb4ddff1481a", "filename": "gcc/config/rs6000/603.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c120724327b9f672c7411bfa6717d303409e1067/gcc%2Fconfig%2Frs6000%2F603.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c120724327b9f672c7411bfa6717d303409e1067/gcc%2Fconfig%2Frs6000%2F603.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2F603.md?ref=c120724327b9f672c7411bfa6717d303409e1067", "patch": "@@ -33,7 +33,7 @@\n ;; the insn that sets CR bits should be separated from the branch insn\n ;; that evaluates them; separation by more than 9 insns ensures that the CR\n ;; bits will be immediately available for execution.\n-;; This could be artificially achieved by exagerating the latency of\n+;; This could be artificially achieved by exaggerating the latency of\n ;; compare insns but at the expense of a poorer schedule.\n \n ;; CR insns get executed in the SRU.  Not modelled."}, {"sha": "de8a7b7552de71fd0abf52467216e610f229dd34", "filename": "gcc/config/rs6000/7xx.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c120724327b9f672c7411bfa6717d303409e1067/gcc%2Fconfig%2Frs6000%2F7xx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c120724327b9f672c7411bfa6717d303409e1067/gcc%2Fconfig%2Frs6000%2F7xx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2F7xx.md?ref=c120724327b9f672c7411bfa6717d303409e1067", "patch": "@@ -38,7 +38,7 @@\n ;; the insn that sets CR bits should be separated from the branch insn\n ;; that evaluates them.  There is no advantage have more than 10 cycles\n ;; of separation.\n-;; This could be artificially achieved by exagerating the latency of\n+;; This could be artificially achieved by exaggerating the latency of\n ;; compare insns but at the expense of a poorer schedule.\n \n ;; Branches go straight to the BPU.  All other insns are handled"}, {"sha": "b28544ade3b9b133a801b93fbf8fc927c1b47aba", "filename": "gcc/config/rs6000/darwin.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c120724327b9f672c7411bfa6717d303409e1067/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c120724327b9f672c7411bfa6717d303409e1067/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin.h?ref=c120724327b9f672c7411bfa6717d303409e1067", "patch": "@@ -208,7 +208,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define PROCESSOR_DEFAULT  PROCESSOR_PPC7400\n \n /* Default target flag settings.  Despite the fact that STMW/LMW\n-   serializes, it's still a big codesize win to use them.  Use FSEL by\n+   serializes, it's still a big code size win to use them.  Use FSEL by\n    default as well.  */\n \n #undef  TARGET_DEFAULT"}, {"sha": "fe6a801bb2cb133533fce52583bb2a2414f2ec34", "filename": "gcc/config/rs6000/freebsd.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c120724327b9f672c7411bfa6717d303409e1067/gcc%2Fconfig%2Frs6000%2Ffreebsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c120724327b9f672c7411bfa6717d303409e1067/gcc%2Fconfig%2Frs6000%2Ffreebsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ffreebsd.h?ref=c120724327b9f672c7411bfa6717d303409e1067", "patch": "@@ -40,7 +40,7 @@\n #define\tLINK_OS_DEFAULT_SPEC \"%(link_os_freebsd)\"\n \n /* XXX: This is wrong for many platforms in sysv4.h.\n-   We should work on getting that defination fixed.  */\n+   We should work on getting that definition fixed.  */\n #undef  LINK_SHLIB_SPEC\n #define LINK_SHLIB_SPEC \"%{shared:-shared} %{!shared: %{static:-static}}\"\n "}, {"sha": "40748c9383fc0c08690318a1cf3e4ca27713aaf1", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c120724327b9f672c7411bfa6717d303409e1067/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c120724327b9f672c7411bfa6717d303409e1067/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=c120724327b9f672c7411bfa6717d303409e1067", "patch": "@@ -1684,7 +1684,7 @@ output_vec_const_move (operands)\n       /* Vector constant 0 is handled as a splitter of V2SI, and in the\n \t pattern of V1DI, V4HI, and V2SF.\n \n-\t FIXME: We should probabl return # and add post reload\n+\t FIXME: We should probably return # and add post reload\n \t splitters for these, but this way is so easy ;-).\n       */\n       operands[1] = GEN_INT (cst);\n@@ -7762,7 +7762,7 @@ includes_rldic_lshift_p (shiftop, andop)\n \n /* Return 1 if ANDOP is a mask suitable for use with an rldicr insn\n    to perform a left shift.  It must have SHIFTOP or more least\n-   signifigant 0's, with the remainder of the word 1's.  */\n+   significant 0's, with the remainder of the word 1's.  */\n \n int\n includes_rldicr_lshift_p (shiftop, andop)\n@@ -7777,7 +7777,7 @@ includes_rldicr_lshift_p (shiftop, andop)\n       shift_mask <<= INTVAL (shiftop);\n       c = INTVAL (andop);\n \n-      /* Find the least signifigant one bit.  */\n+      /* Find the least significant one bit.  */\n       lsb = c & -c;\n \n       /* It must be covered by the shift mask.\n@@ -10663,7 +10663,7 @@ get_TOC_alias_set ()\n     return set;\n }   \n \n-/* This retuns nonzero if the current function uses the TOC.  This is\n+/* This returns nonzero if the current function uses the TOC.  This is\n    determined by the presence of (unspec ... UNSPEC_TOC) or\n    use (unspec ... UNSPEC_TOC), which are generated by the various\n    load_toc_* patterns.  */"}, {"sha": "1d471efbf85423a11ce8f05d6bc200bf81564691", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c120724327b9f672c7411bfa6717d303409e1067/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c120724327b9f672c7411bfa6717d303409e1067/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=c120724327b9f672c7411bfa6717d303409e1067", "patch": "@@ -9869,7 +9869,7 @@\n   \"HAVE_AS_TLS && TARGET_64BIT\"\n   \"addi %0,%1,%2@tprel@l\")\n \n-;; \"b\" output contraint here and on tls_tls input to support linker tls\n+;; \"b\" output constraint here and on tls_tls input to support linker tls\n ;; optimization.  The linker may edit the instructions emitted by a\n ;; tls_got_tprel/tls_tls pair to addis,addi.\n (define_insn \"tls_got_tprel_32\""}, {"sha": "ca90b8068d897ca35f55af6026e089fe9c0d07a6", "filename": "gcc/config/rs6000/spe.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c120724327b9f672c7411bfa6717d303409e1067/gcc%2Fconfig%2Frs6000%2Fspe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c120724327b9f672c7411bfa6717d303409e1067/gcc%2Fconfig%2Frs6000%2Fspe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fspe.h?ref=c120724327b9f672c7411bfa6717d303409e1067", "patch": "@@ -992,7 +992,7 @@ __ev_set_s16_internal (__ev64_opaque__ a, int16_t b, uint32_t pos)\n #define __ev_lower_fs_tst_eq(a, b)\t__builtin_spe_evfststeq (__pred_lower, (a), (b))\n #define __ev_select_fs_tst_eq\t\t__builtin_spe_evsel_fststeq\n \n-/* SPEFSCR accesor functions.  */\n+/* SPEFSCR accessor functions.  */\n \n #define __SPEFSCR_SOVH\t\t0x80000000\n #define __SPEFSCR_OVH\t\t0x40000000"}]}