{"sha": "c0baff9be34ac1db1b42fd5fa0af930dd9b5441f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzBiYWZmOWJlMzRhYzFkYjFiNDJmZDVmYTBhZjkzMGRkOWI1NDQxZg==", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@adacore.com", "date": "2020-10-22T05:32:10Z"}, "committer": {"name": "Alexandre Oliva", "email": "oliva@gnu.org", "date": "2020-10-22T05:32:10Z"}, "message": "vxworks float EFs not precise enough -> use long float\n\nSome acats-4 tests that check the precision of Float elementary\nfunctions fail with vxworks 7.2's implementations of single-precision\nmath functions.\n\nThis patch arranges for us to bypass the single-precision functions,\nand use the Aux_Long_Float implementation, based on the double-typed\ncalls from the C library, for Float and Short_Float.\n\n\nfor  gcc/ada/ChangeLog\n\n\t* Makefile.rtl (LIBGNAT_TARGET_PAIRS): Use Long Float-based\n\tvariant of Aux_Short_Float and Aux_Float on vxworks targets.\n\t* libgnat/a-nashfl__wraplf.ads: New.\n\t* libgnat/a-nuaufl__wraplf.ads: New.", "tree": {"sha": "5a2be2c55aa775419b047223b29a34a708ea0edc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a2be2c55aa775419b047223b29a34a708ea0edc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c0baff9be34ac1db1b42fd5fa0af930dd9b5441f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0baff9be34ac1db1b42fd5fa0af930dd9b5441f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0baff9be34ac1db1b42fd5fa0af930dd9b5441f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0baff9be34ac1db1b42fd5fa0af930dd9b5441f/comments", "author": null, "committer": null, "parents": [{"sha": "9f4e1d10ebe515180dd90b9dd208c71f53911cfd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f4e1d10ebe515180dd90b9dd208c71f53911cfd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f4e1d10ebe515180dd90b9dd208c71f53911cfd"}], "stats": {"total": 182, "additions": 182, "deletions": 0}, "files": [{"sha": "04c7cc8ac7d7bf27401d2946b612f7881558494c", "filename": "gcc/ada/Makefile.rtl", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0baff9be34ac1db1b42fd5fa0af930dd9b5441f/gcc%2Fada%2FMakefile.rtl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0baff9be34ac1db1b42fd5fa0af930dd9b5441f/gcc%2Fada%2FMakefile.rtl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMakefile.rtl?ref=c0baff9be34ac1db1b42fd5fa0af930dd9b5441f", "patch": "@@ -1026,6 +1026,8 @@ ifeq ($(strip $(filter-out powerpc% wrs vxworks vxworksspe vxworks7% vxworks7spe\n   LIBGNAT_TARGET_PAIRS = \\\n   a-intnam.ads<libgnarl/a-intnam__vxworks.ads \\\n   a-naliop.ads<libgnat/a-naliop__nolibm.ads \\\n+  a-nuaufl.ads<libgnat/a-nuaufl__wraplf.ads \\\n+  a-nashfl.ads<libgnat/a-nashfl__wraplf.ads \\\n   s-inmaop.adb<libgnarl/s-inmaop__vxworks.adb \\\n   s-intman.ads<libgnarl/s-intman__vxworks.ads \\\n   s-intman.adb<libgnarl/s-intman__vxworks.adb \\\n@@ -1149,6 +1151,8 @@ ifeq ($(strip $(filter-out powerpc% wrs vxworksae vxworksaespe,$(target_cpu) $(t\n   a-elchha.adb<libgnat/a-elchha__vxworks-ppc-full.adb \\\n   a-intnam.ads<libgnarl/a-intnam__vxworks.ads \\\n   a-naliop.ads<libgnat/a-naliop__nolibm.ads \\\n+  a-nuaufl.ads<libgnat/a-nuaufl__wraplf.ads \\\n+  a-nashfl.ads<libgnat/a-nashfl__wraplf.ads \\\n   g-io.adb<hie/g-io__vxworks-cert.adb \\\n   s-inmaop.adb<libgnarl/s-inmaop__vxworks.adb \\\n   s-interr.adb<libgnarl/s-interr__vxworks.adb \\\n@@ -1205,6 +1209,8 @@ ifeq ($(strip $(filter-out %86 wrs vxworksae,$(target_cpu) $(target_vendor) $(ta\n   a-elchha.adb<libgnat/a-elchha__vxworks-ppc-full.adb \\\n   a-intnam.ads<libgnarl/a-intnam__vxworks.ads \\\n   a-naliop.ads<libgnat/a-naliop__nolibm.ads \\\n+  a-nuaufl.ads<libgnat/a-nuaufl__wraplf.ads \\\n+  a-nashfl.ads<libgnat/a-nashfl__wraplf.ads \\\n   g-io.adb<hie/g-io__vxworks-cert.adb \\\n   s-inmaop.adb<libgnarl/s-inmaop__vxworks.adb \\\n   s-interr.adb<libgnarl/s-interr__vxworks.adb \\\n@@ -1425,6 +1431,8 @@ ifeq ($(strip $(filter-out aarch64 arm% coff wrs vx%,$(target_cpu) $(target_vend\n   LIBGNAT_TARGET_PAIRS = \\\n   a-intnam.ads<libgnarl/a-intnam__vxworks.ads \\\n   a-naliop.ads<libgnat/a-naliop__nolibm.ads \\\n+  a-nuaufl.ads<libgnat/a-nuaufl__wraplf.ads \\\n+  a-nashfl.ads<libgnat/a-nashfl__wraplf.ads \\\n   s-inmaop.adb<libgnarl/s-inmaop__vxworks.adb \\\n   s-interr.adb<libgnarl/s-interr__vxworks.adb \\\n   s-intman.ads<libgnarl/s-intman__vxworks.ads \\"}, {"sha": "ca5b48d5aeff31f93e68355a874592a8cf3b3492", "filename": "gcc/ada/libgnat/a-nashfl__wraplf.ads", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0baff9be34ac1db1b42fd5fa0af930dd9b5441f/gcc%2Fada%2Flibgnat%2Fa-nashfl__wraplf.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0baff9be34ac1db1b42fd5fa0af930dd9b5441f/gcc%2Fada%2Flibgnat%2Fa-nashfl__wraplf.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-nashfl__wraplf.ads?ref=c0baff9be34ac1db1b42fd5fa0af930dd9b5441f", "patch": "@@ -0,0 +1,87 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUN-TIME COMPONENTS                         --\n+--                                                                          --\n+--         A D A . N U M E R I C S . A U X _ S H O R T _ F L O A T          --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                (Short Float Wrapper in terms of Long Float)              --\n+--                                                                          --\n+--          Copyright (C) 1992-2020, Free Software Foundation, Inc.         --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This package provides the basic computational interface for the\n+--  generic elementary functions. The functions in this unit are\n+--  wrappers for those in the Long Float package.\n+\n+with Ada.Numerics.Aux_Long_Float;\n+\n+package Ada.Numerics.Aux_Short_Float is\n+   pragma Pure;\n+\n+   subtype T is Short_Float;\n+   package Aux renames Ada.Numerics.Aux_Long_Float;\n+   subtype W is Aux.T;\n+\n+   --  Use the Aux implementation.\n+\n+   function Sin (X : T) return T\n+   is (T (Aux.Sin (W (X))));\n+\n+   function Cos (X : T) return T\n+   is (T (Aux.Cos (W (X))));\n+\n+   function Tan (X : T) return T\n+   is (T (Aux.Tan (W (X))));\n+\n+   function Exp (X : T) return T\n+   is (T (Aux.Exp (W (X))));\n+\n+   function Sqrt (X : T) return T\n+   is (T (Aux.Sqrt (W (X))));\n+\n+   function Log (X : T) return T\n+   is (T (Aux.Log (W (X))));\n+\n+   function Acos (X : T) return T\n+   is (T (Aux.Acos (W (X))));\n+\n+   function Asin (X : T) return T\n+   is (T (Aux.Asin (W (X))));\n+\n+   function Atan (X : T) return T\n+   is (T (Aux.Atan (W (X))));\n+\n+   function Sinh (X : T) return T\n+   is (T (Aux.Sinh (W (X))));\n+\n+   function Cosh (X : T) return T\n+   is (T (Aux.Cosh (W (X))));\n+\n+   function Tanh (X : T) return T\n+   is (T (Aux.Tanh (W (X))));\n+\n+   function Pow (X, Y : T) return T\n+   is (T (Aux.Pow (W (X), W (Y))));\n+\n+end Ada.Numerics.Aux_Short_Float;"}, {"sha": "b6eb22ca767b5dd2faecfc4cff736d100a6013b1", "filename": "gcc/ada/libgnat/a-nuaufl__wraplf.ads", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0baff9be34ac1db1b42fd5fa0af930dd9b5441f/gcc%2Fada%2Flibgnat%2Fa-nuaufl__wraplf.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0baff9be34ac1db1b42fd5fa0af930dd9b5441f/gcc%2Fada%2Flibgnat%2Fa-nuaufl__wraplf.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-nuaufl__wraplf.ads?ref=c0baff9be34ac1db1b42fd5fa0af930dd9b5441f", "patch": "@@ -0,0 +1,87 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUN-TIME COMPONENTS                         --\n+--                                                                          --\n+--               A D A . N U M E R I C S . A U X _ F L O A T                --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                       (Double-based Version, Float)                      --\n+--                                                                          --\n+--          Copyright (C) 1992-2020, Free Software Foundation, Inc.         --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This package provides the basic computational interface for the\n+--  generic elementary functions. The functions in this unit are\n+--  wrappers for those in the Long_Float package.\n+\n+with Ada.Numerics.Aux_Long_Float;\n+\n+package Ada.Numerics.Aux_Float is\n+   pragma Pure;\n+\n+   subtype T is Float;\n+   package Aux renames Ada.Numerics.Aux_Long_Float;\n+   subtype W is Aux.T;\n+\n+   --  Use the Aux implementation.\n+\n+   function Sin (X : T) return T\n+   is (T (Aux.Sin (W (X))));\n+\n+   function Cos (X : T) return T\n+   is (T (Aux.Cos (W (X))));\n+\n+   function Tan (X : T) return T\n+   is (T (Aux.Tan (W (X))));\n+\n+   function Exp (X : T) return T\n+   is (T (Aux.Exp (W (X))));\n+\n+   function Sqrt (X : T) return T\n+   is (T (Aux.Sqrt (W (X))));\n+\n+   function Log (X : T) return T\n+   is (T (Aux.Log (W (X))));\n+\n+   function Acos (X : T) return T\n+   is (T (Aux.Acos (W (X))));\n+\n+   function Asin (X : T) return T\n+   is (T (Aux.Asin (W (X))));\n+\n+   function Atan (X : T) return T\n+   is (T (Aux.Atan (W (X))));\n+\n+   function Sinh (X : T) return T\n+   is (T (Aux.Sinh (W (X))));\n+\n+   function Cosh (X : T) return T\n+   is (T (Aux.Cosh (W (X))));\n+\n+   function Tanh (X : T) return T\n+   is (T (Aux.Tanh (W (X))));\n+\n+   function Pow (X, Y : T) return T\n+   is (T (Aux.Pow (W (X), W (Y))));\n+\n+end Ada.Numerics.Aux_Float;"}]}