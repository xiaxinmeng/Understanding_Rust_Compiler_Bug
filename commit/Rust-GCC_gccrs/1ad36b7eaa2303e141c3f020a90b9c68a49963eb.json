{"sha": "1ad36b7eaa2303e141c3f020a90b9c68a49963eb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWFkMzZiN2VhYTIzMDNlMTQxYzNmMDIwYTkwYjljNjhhNDk5NjNlYg==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2012-03-27T15:28:41Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2012-03-27T15:28:41Z"}, "message": "Remove MaskNeeded\n\n2012-03-27  H.J. Lu  <hongjiu.lu@intel.com>\n\n\t* opth-gen.awk: Allocated a bit for Mask and InverseMask if it\n\thasn't been allocated.  Define a target macro for Mask and\n\tInverseMask if it hasn't been defined.  Remove MaskExists\n\thandling.\n\n\t* doc/options.texi: Remove MaskNeeded.\n\nFrom-SVN: r185882", "tree": {"sha": "082df1a6e4de30b116ee7f94baaed1cd0c500910", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/082df1a6e4de30b116ee7f94baaed1cd0c500910"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ad36b7eaa2303e141c3f020a90b9c68a49963eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ad36b7eaa2303e141c3f020a90b9c68a49963eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ad36b7eaa2303e141c3f020a90b9c68a49963eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ad36b7eaa2303e141c3f020a90b9c68a49963eb/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4f867aee5d7bc17131fe12774db767942b83a738", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f867aee5d7bc17131fe12774db767942b83a738", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f867aee5d7bc17131fe12774db767942b83a738"}], "stats": {"total": 70, "additions": 43, "deletions": 27}, "files": [{"sha": "b7736fb7983b2d65538de6d275c5617707cd9075", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ad36b7eaa2303e141c3f020a90b9c68a49963eb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ad36b7eaa2303e141c3f020a90b9c68a49963eb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1ad36b7eaa2303e141c3f020a90b9c68a49963eb", "patch": "@@ -1,3 +1,12 @@\n+2012-03-27  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* opth-gen.awk: Allocated a bit for Mask and InverseMask if it\n+\thasn't been allocated.  Define a target macro for Mask and\n+\tInverseMask if it hasn't been defined.  Remove MaskExists\n+\thandling.\n+\n+\t* doc/options.texi: Remove MaskNeeded.\n+\n 2012-03-27  Chung-Lin Tang  <cltang@codesourcery.com>\n \n \tPR target/52667"}, {"sha": "08b8b793a0469867ab768b503f9679432b746a6e", "filename": "gcc/doc/options.texi", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ad36b7eaa2303e141c3f020a90b9c68a49963eb/gcc%2Fdoc%2Foptions.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ad36b7eaa2303e141c3f020a90b9c68a49963eb/gcc%2Fdoc%2Foptions.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Foptions.texi?ref=1ad36b7eaa2303e141c3f020a90b9c68a49963eb", "patch": "@@ -346,24 +346,13 @@ the value 1 when the option is active and 0 otherwise.  If you use @code{Var}\n to attach the option to a different variable, the associated macros are\n called @code{OPTION_MASK_@var{name}} and @code{OPTION_@var{name}} respectively.\n \n-You can disable automatic bit allocation using @code{MaskExists}.\n-\n @item InverseMask(@var{othername})\n @itemx InverseMask(@var{othername}, @var{thisname})\n The option is the inverse of another option that has the\n @code{Mask(@var{othername})} property.  If @var{thisname} is given,\n the options-processing script will declare a @code{TARGET_@var{thisname}}\n macro that is 1 when the option is active and 0 otherwise.\n \n-@item MaskExists\n-The mask specified by the @code{Mask} property already exists.\n-No @code{MASK} or @code{TARGET} definitions should be added to\n-@file{options.h} in response to this option record.\n-\n-The main purpose of this property is to support synonymous options.\n-The first option should use @samp{Mask(@var{name})} and the others\n-should use @samp{Mask(@var{name}) MaskExists}.\n-\n @item Enum(@var{name})\n The option's argument is a string from the set of strings associated\n with the corresponding @samp{Enum} record.  The string is checked and"}, {"sha": "9a7b6c385f80d197d81545912401b6e7380f6f82", "filename": "gcc/opth-gen.awk", "status": "modified", "additions": 34, "deletions": 16, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ad36b7eaa2303e141c3f020a90b9c68a49963eb/gcc%2Fopth-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ad36b7eaa2303e141c3f020a90b9c68a49963eb/gcc%2Fopth-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopth-gen.awk?ref=1ad36b7eaa2303e141c3f020a90b9c68a49963eb", "patch": "@@ -298,16 +298,25 @@ print \"\";\n \n for (i = 0; i < n_opts; i++) {\n \tname = opt_args(\"Mask\", flags[i])\n-\tvname = var_name(flags[i])\n-\tmask = \"MASK_\"\n-\tmask_1 = \"1\"\n-\tif (vname != \"\") {\n-\t\tmask = \"OPTION_MASK_\"\n-\t\tif (host_wide_int[vname] == \"yes\")\n-\t\t\tmask_1 = \"HOST_WIDE_INT_1\"\n+\tif (name == \"\") {\n+\t\topt = opt_args(\"InverseMask\", flags[i])\n+\t\tif (opt ~ \",\")\n+\t\t\tname = nth_arg(0, opt)\n+\t\telse\n+\t\t\tname = opt\n \t}\n-\tif (name != \"\" && !flag_set_p(\"MaskExists\", flags[i]))\n+\tif (name != \"\" && mask_bits[name] == 0) {\n+\t\tmask_bits[name] = 1\n+\t\tvname = var_name(flags[i])\n+\t\tmask = \"MASK_\"\n+\t\tmask_1 = \"1\"\n+\t\tif (vname != \"\") {\n+\t\t\tmask = \"OPTION_MASK_\"\n+\t\t\tif (host_wide_int[vname] == \"yes\")\n+\t\t\t\tmask_1 = \"HOST_WIDE_INT_1\"\n+\t\t}\n \t\tprint \"#define \" mask name \" (\" mask_1 \" << \" masknum[vname]++ \")\"\n+\t}\n }\n for (i = 0; i < n_extra_masks; i++) {\n \tprint \"#define MASK_\" extra_masks[i] \" (1 << \" masknum[\"\"]++ \")\"\n@@ -330,17 +339,26 @@ print \"\"\n \n for (i = 0; i < n_opts; i++) {\n \tname = opt_args(\"Mask\", flags[i])\n-\tvname = var_name(flags[i])\n-\tmacro = \"OPTION_\"\n-\tmask = \"OPTION_MASK_\"\n-\tif (vname == \"\") {\n-\t\tvname = \"target_flags\"\n-\t\tmacro = \"TARGET_\"\n-\t\tmask = \"MASK_\"\n+\tif (name == \"\") {\n+\t\topt = opt_args(\"InverseMask\", flags[i])\n+\t\tif (opt ~ \",\")\n+\t\t\tname = nth_arg(0, opt)\n+\t\telse\n+\t\t\tname = opt\n \t}\n-\tif (name != \"\" && !flag_set_p(\"MaskExists\", flags[i]))\n+\tif (name != \"\" && mask_macros[name] == 0) {\n+\t\tmask_macros[name] = 1\n+\t\tvname = var_name(flags[i])\n+\t\tmacro = \"OPTION_\"\n+\t\tmask = \"OPTION_MASK_\"\n+\t\tif (vname == \"\") {\n+\t\t\tvname = \"target_flags\"\n+\t\t\tmacro = \"TARGET_\"\n+\t\t\tmask = \"MASK_\"\n+\t\t}\n \t\tprint \"#define \" macro name \\\n \t\t      \" ((\" vname \" & \" mask name \") != 0)\"\n+\t}\n }\n for (i = 0; i < n_extra_masks; i++) {\n \tprint \"#define TARGET_\" extra_masks[i] \\"}]}