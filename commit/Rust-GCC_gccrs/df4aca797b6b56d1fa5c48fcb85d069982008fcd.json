{"sha": "df4aca797b6b56d1fa5c48fcb85d069982008fcd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGY0YWNhNzk3YjZiNTZkMWZhNWM0OGZjYjg1ZDA2OTk4MjAwOGZjZA==", "commit": {"author": {"name": "Dodji Seketeli", "email": "dodji@redhat.com", "date": "2009-08-11T18:39:54Z"}, "committer": {"name": "Dodji Seketeli", "email": "dodji@gcc.gnu.org", "date": "2009-08-11T18:39:54Z"}, "message": "re PR debug/40990 (bad .debug_pubnames entry from gcj)\n\nFix PR debug/40990\n\n\tPR debug/40990\n\t* lang.c (put_decl_node): Outputs different level of information\n\tdepending on the verbosity level.\n\nFrom-SVN: r150659", "tree": {"sha": "8a76d563e304f510b61166331f53feef9fb101f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a76d563e304f510b61166331f53feef9fb101f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df4aca797b6b56d1fa5c48fcb85d069982008fcd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df4aca797b6b56d1fa5c48fcb85d069982008fcd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df4aca797b6b56d1fa5c48fcb85d069982008fcd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df4aca797b6b56d1fa5c48fcb85d069982008fcd/comments", "author": null, "committer": null, "parents": [{"sha": "b2c9d70fd7eb8e39aefb7d6d2329ccbd5da15b36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2c9d70fd7eb8e39aefb7d6d2329ccbd5da15b36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2c9d70fd7eb8e39aefb7d6d2329ccbd5da15b36"}], "stats": {"total": 56, "additions": 40, "deletions": 16}, "files": [{"sha": "b8a5d7dd613ae45ff12ac78226533b69f73acc77", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df4aca797b6b56d1fa5c48fcb85d069982008fcd/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df4aca797b6b56d1fa5c48fcb85d069982008fcd/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=df4aca797b6b56d1fa5c48fcb85d069982008fcd", "patch": "@@ -1,3 +1,9 @@\n+2009-08-11  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR debug/40990\n+\t* lang.c (put_decl_node): Outputs different level of information\n+\tdepending on the verbosity level.\n+\n 2009-07-31  Andrew Haley  <aph@redhat.com>\n \n \tPR java/40867"}, {"sha": "4b462705e2bc6bc2729a455022a69a82dea3a57e", "filename": "gcc/java/lang.c", "status": "modified", "additions": 34, "deletions": 16, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df4aca797b6b56d1fa5c48fcb85d069982008fcd/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df4aca797b6b56d1fa5c48fcb85d069982008fcd/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=df4aca797b6b56d1fa5c48fcb85d069982008fcd", "patch": "@@ -53,7 +53,7 @@ static bool java_post_options (const char **);\n \n static int java_handle_option (size_t scode, const char *arg, int value);\n static void put_decl_string (const char *, int);\n-static void put_decl_node (tree);\n+static void put_decl_node (tree, int);\n static void java_print_error_function (diagnostic_context *, const char *,\n \t\t\t\t       diagnostic_info *);\n static int merge_init_test_initialization (void * *, void *);\n@@ -354,10 +354,13 @@ put_decl_string (const char *str, int len)\n   decl_bufpos += len;\n }\n \n-/* Append to decl_buf a printable name for NODE. */\n+/* Append to decl_buf a printable name for NODE.\n+   Depending on VERBOSITY, more information about NODE\n+   is printed. Read the comments of decl_printable_name in\n+   langhooks.h for more.  */\n \n static void\n-put_decl_node (tree node)\n+put_decl_node (tree node, int verbosity)\n {\n   int was_pointer = 0;\n   if (TREE_CODE (node) == POINTER_TYPE)\n@@ -369,17 +372,32 @@ put_decl_node (tree node)\n     {\n       if (TREE_CODE (node) == FUNCTION_DECL)\n \t{\n+\t  if (verbosity == 0 && DECL_NAME (node))\n+\t  /* We have been instructed to just print the bare name\n+\t     of the function.  */\n+\t    {\n+\t      put_decl_node (DECL_NAME (node), 0);\n+\t      return;\n+\t    }\n+\n \t  /* We want to print the type the DECL belongs to. We don't do\n \t     that when we handle constructors. */\n \t  if (! DECL_CONSTRUCTOR_P (node)\n-\t      && ! DECL_ARTIFICIAL (node) && DECL_CONTEXT (node))\n+\t      && ! DECL_ARTIFICIAL (node) && DECL_CONTEXT (node)\n+              /* We want to print qualified DECL names only\n+                 if verbosity is higher than 1.  */\n+              && verbosity >= 1)\n \t    {\n-\t      put_decl_node (TYPE_NAME (DECL_CONTEXT (node)));\n+\t      put_decl_node (TYPE_NAME (DECL_CONTEXT (node)),\n+                               verbosity);\n \t      put_decl_string (\".\", 1);\n \t    }\n \t  if (! DECL_CONSTRUCTOR_P (node))\n-\t    put_decl_node (DECL_NAME (node));\n-\t  if (TREE_TYPE (node) != NULL_TREE)\n+\t    put_decl_node (DECL_NAME (node), verbosity);\n+\t  if (TREE_TYPE (node) != NULL_TREE\n+              /* We want to print function parameters only if verbosity\n+                 is higher than 2.  */\n+              && verbosity >= 2)\n \t    {\n \t      int i = 0;\n \t      tree args = TYPE_ARG_TYPES (TREE_TYPE (node));\n@@ -390,19 +408,22 @@ put_decl_node (tree node)\n \t\t{\n \t\t  if (i > 0)\n \t\t    put_decl_string (\",\", 1);\n-\t\t  put_decl_node (TREE_VALUE (args));\n+\t\t  put_decl_node (TREE_VALUE (args), verbosity);\n \t\t}\n \t      put_decl_string (\")\", 1);\n \t    }\n \t}\n       else\n-\tput_decl_node (DECL_NAME (node));\n+\tput_decl_node (DECL_NAME (node), verbosity);\n     }\n   else if (TYPE_P (node) && TYPE_NAME (node) != NULL_TREE)\n     {\n-      if (TREE_CODE (node) == RECORD_TYPE && TYPE_ARRAY_P (node))\n+      if (TREE_CODE (node) == RECORD_TYPE && TYPE_ARRAY_P (node)\n+          /* Print detailed array information only if verbosity is higher\n+            than 2.  */\n+          && verbosity >= 2)\n \t{\n-\t  put_decl_node (TYPE_ARRAY_ELEMENT (node));\n+\t  put_decl_node (TYPE_ARRAY_ELEMENT (node), verbosity);\n \t  put_decl_string(\"[]\", 2);\n \t}\n       else if (node == promoted_byte_type_node)\n@@ -416,7 +437,7 @@ put_decl_node (tree node)\n       else if (node == void_type_node && was_pointer)\n \tput_decl_string (\"null\", 4);\n       else\n-\tput_decl_node (TYPE_NAME (node));\n+\tput_decl_node (TYPE_NAME (node), verbosity);\n     }\n   else if (TREE_CODE (node) == IDENTIFIER_NODE)\n     put_decl_string (IDENTIFIER_POINTER (node), IDENTIFIER_LENGTH (node));\n@@ -433,10 +454,7 @@ const char *\n lang_printable_name (tree decl, int v)\n {\n   decl_bufpos = 0;\n-  if (v == 0 && TREE_CODE (decl) == FUNCTION_DECL)\n-    put_decl_node (DECL_NAME (decl));\n-  else\n-    put_decl_node (decl);\n+  put_decl_node (decl, v);\n   put_decl_string (\"\", 1);\n   return decl_buf;\n }"}]}