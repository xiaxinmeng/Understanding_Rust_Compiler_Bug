{"sha": "82a1c2fe690f15bfa0b91b54a7f1746acad0a1ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODJhMWMyZmU2OTBmMTViZmEwYjkxYjU0YTdmMTc0NmFjYWQwYTFlZg==", "commit": {"author": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2010-10-03T19:00:55Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2010-10-03T19:00:55Z"}, "message": "cppbuiltin.c: New file.\n\ngcc/\n\t* cppbuiltin.c: New file.\n\t* cppbuiltin.h: New file.\n\t* Makefile.in: Take into account cppbuiltin.{h,c}.\n\ngcc/c-family/\n\t* c-cppbuiltin.c (define__GNUC__, builtin_define_type_precision):\n\tRemove.\n\t(c_cpp_builtins): Call functions from cppbuiltin.c instead\n\tof duplicating code.\n\ngcc/fortran/\n\t* cpp.c (cpp_define_builtins): Call functions from cppbuiltin.c\n\tinstead of duplicating code.\n\t* Make-lang.in: Add dependency on cppbuiltin.h. Don't define\n\tBASEVER.\n\nFrom-SVN: r164917", "tree": {"sha": "e8f69a0b977c29820cbd822a46b41d8556752341", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8f69a0b977c29820cbd822a46b41d8556752341"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/82a1c2fe690f15bfa0b91b54a7f1746acad0a1ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82a1c2fe690f15bfa0b91b54a7f1746acad0a1ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82a1c2fe690f15bfa0b91b54a7f1746acad0a1ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82a1c2fe690f15bfa0b91b54a7f1746acad0a1ef/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1e92a43e9aec2f052cfc5c20b2e793f97fc18da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1e92a43e9aec2f052cfc5c20b2e793f97fc18da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1e92a43e9aec2f052cfc5c20b2e793f97fc18da"}], "stats": {"total": 400, "additions": 242, "deletions": 158}, "files": [{"sha": "049a1db2198edcda2081dc04f46c81fce58e4bb9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82a1c2fe690f15bfa0b91b54a7f1746acad0a1ef/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82a1c2fe690f15bfa0b91b54a7f1746acad0a1ef/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=82a1c2fe690f15bfa0b91b54a7f1746acad0a1ef", "patch": "@@ -1,6 +1,12 @@\n+2010-10-03  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\t* cppbuiltin.c: New file.\n+\t* cppbuiltin.h: New file.\n+\t* Makefile.in: Take into account cppbuiltin.{h,c}.\n+\n 2010-10-03  Andi Kleen <ak@linux.intel.com>\n \n-    \t* lto-cgraph.c (input_cgraph): Check for missing sections.\n+\t* lto-cgraph.c (input_cgraph): Check for missing sections.\n \n 2010-10-03  Uros Bizjak  <ubizjak@gmail.com>\n "}, {"sha": "d4970c33046842947e0fe8742881a62f521ca122", "filename": "gcc/Makefile.in", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82a1c2fe690f15bfa0b91b54a7f1746acad0a1ef/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82a1c2fe690f15bfa0b91b54a7f1746acad0a1ef/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=82a1c2fe690f15bfa0b91b54a7f1746acad0a1ef", "patch": "@@ -1449,6 +1449,7 @@ OBJS-archive = \\\n \tcgraph.o \\\n \tcgraphbuild.o \\\n \tcgraphunit.o \\\n+\tcppbuiltin.o \\\n \tcppdefault.o \\\n \tincpath.o \\\n \tipa-cp.o \\\n@@ -2093,9 +2094,9 @@ c-family/c-common.o : c-family/c-common.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n c-family/c-cppbuiltin.o : c-family/c-cppbuiltin.c $(CONFIG_H) $(SYSTEM_H) \\\n \tcoretypes.h $(TM_H) $(TREE_H) version.h $(C_COMMON_H) $(C_PRAGMA_H) \\\n \t$(FLAGS_H) $(TOPLEV_H) output.h $(TREE_H) $(TARGET_H) \\\n-\t$(TM_P_H) $(BASEVER) debug.h $(CPP_ID_DATA_H)\n+\t$(TM_P_H) debug.h $(CPP_ID_DATA_H) cppbuiltin.h\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) \\\n-\t\t-DBASEVER=$(BASEVER_s) $< $(OUTPUT_OPTION)\n+\t\t$< $(OUTPUT_OPTION)\n \n c-family/c-dump.o : c-family/c-dump.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n \t$(TM_H) $(TREE_H) $(TREE_DUMP_H)\n@@ -3964,6 +3965,12 @@ PREPROCESSOR_DEFINES = \\\n   -DSTANDARD_EXEC_PREFIX=\\\"$(libdir)/gcc/\\\" \\\n   @TARGET_SYSTEM_ROOT_DEFINE@\n \n+cppbuiltin.o: cppbuiltin.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n+\tcppbuiltin.h Makefile\n+\t$(COMPILER) $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) \\\n+\t  $(PREPROCESSOR_DEFINES) -DBASEVER=$(BASEVER_s) \\\n+\t  -c $(srcdir)/cppbuiltin.c $(OUTPUT_OPTION)\n+\n cppdefault.o: cppdefault.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n \tcppdefault.h Makefile\n \t$(COMPILER) $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) \\"}, {"sha": "dc15f63914c32ad7e38a70d65fa7c9e4bd330254", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82a1c2fe690f15bfa0b91b54a7f1746acad0a1ef/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82a1c2fe690f15bfa0b91b54a7f1746acad0a1ef/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=82a1c2fe690f15bfa0b91b54a7f1746acad0a1ef", "patch": "@@ -1,3 +1,10 @@\n+2010-10-03  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\t* c-cppbuiltin.c (define__GNUC__, builtin_define_type_precision):\n+\tRemove.\n+\t(c_cpp_builtins): Call functions from cppbuiltin.c instead\n+\tof duplicating code.\n+\n 2010-09-30  Iain Sandoe  <iains@gcc.gnu.org>\n \n \t* c-common.c: Add two new entries for @optional"}, {"sha": "f946dc243b4399c633d36556717f76c942d7b147", "filename": "gcc/c-family/c-cppbuiltin.c", "status": "modified", "additions": 10, "deletions": 85, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82a1c2fe690f15bfa0b91b54a7f1746acad0a1ef/gcc%2Fc-family%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82a1c2fe690f15bfa0b91b54a7f1746acad0a1ef/gcc%2Fc-family%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-cppbuiltin.c?ref=82a1c2fe690f15bfa0b91b54a7f1746acad0a1ef", "patch": "@@ -33,6 +33,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm_p.h\"\t\t/* For TARGET_CPU_CPP_BUILTINS & friends.  */\n #include \"target.h\"\n #include \"cpp-id-data.h\"\n+#include \"cppbuiltin.h\"\n \n #ifndef TARGET_OS_CPP_BUILTINS\n # define TARGET_OS_CPP_BUILTINS()\n@@ -57,20 +58,11 @@ static void builtin_define_stdint_macros (void);\n static void builtin_define_constants (const char *, tree);\n static void builtin_define_type_max (const char *, tree);\n static void builtin_define_type_minmax (const char *, const char *, tree);\n-static void builtin_define_type_precision (const char *, tree);\n static void builtin_define_type_sizeof (const char *, tree);\n static void builtin_define_float_constants (const char *,\n \t\t\t\t\t    const char *,\n \t\t\t\t\t    const char *,\n \t\t\t\t\t    tree);\n-static void define__GNUC__ (void);\n-\n-/* Define NAME with value TYPE precision.  */\n-static void\n-builtin_define_type_precision (const char *name, tree type)\n-{\n-  builtin_define_with_int_value (name, TYPE_PRECISION (type));\n-}\n \n /* Define NAME with value TYPE size_unit.  */\n static void\n@@ -389,25 +381,6 @@ builtin_define_fixed_point_constants (const char *name_prefix,\n   builtin_define_with_value (name, buf, 0);\n }\n \n-/* Define __GNUC__, __GNUC_MINOR__ and __GNUC_PATCHLEVEL__.  */\n-static void\n-define__GNUC__ (void)\n-{\n-  int major, minor, patchlevel;\n-\n-  if (sscanf (BASEVER, \"%d.%d.%d\", &major, &minor, &patchlevel) != 3)\n-    {\n-      sscanf (BASEVER, \"%d.%d\", &major, &minor);\n-      patchlevel = 0;\n-    }\n-  cpp_define_formatted (parse_in, \"__GNUC__=%d\", major);\n-  cpp_define_formatted (parse_in, \"__GNUC_MINOR__=%d\", minor);\n-  cpp_define_formatted (parse_in, \"__GNUC_PATCHLEVEL__=%d\", patchlevel);\n-\n-  if (c_dialect_cxx ())\n-    cpp_define_formatted (parse_in, \"__GNUG__=%d\", major);\n-}\n-\n /* Define macros used by <stdint.h>.  */\n static void\n builtin_define_stdint_macros (void)\n@@ -557,7 +530,14 @@ c_cpp_builtins (cpp_reader *pfile)\n   if (flag_undef)\n     return;\n \n-  define__GNUC__ ();\n+  define_language_independent_builtin_macros (pfile);\n+\n+  if (c_dialect_cxx ())\n+  {\n+    int major;\n+    parse_basever (&major, NULL, NULL);\n+    cpp_define_formatted (pfile, \"__GNUG__=%d\", major);\n+  }\n \n   /* For stddef.h.  They require macros defined in c-common.c.  */\n   c_stddef_cpp_builtins ();\n@@ -616,13 +596,10 @@ c_cpp_builtins (cpp_reader *pfile)\n   builtin_define_type_max (\"__PTRDIFF_MAX__\", ptrdiff_type_node);\n   builtin_define_type_max (\"__SIZE_MAX__\", size_type_node);\n \n-  builtin_define_type_precision (\"__CHAR_BIT__\", char_type_node);\n-\n   /* stdint.h and the testsuite need to know these.  */\n   builtin_define_stdint_macros ();\n \n-  /* float.h needs to know these.  */\n-\n+  /* float.h needs to know this.  */\n   builtin_define_with_int_value (\"__FLT_EVAL_METHOD__\",\n \t\t\t\t TARGET_FLT_EVAL_METHOD);\n \n@@ -704,49 +681,13 @@ c_cpp_builtins (cpp_reader *pfile)\n   builtin_define_with_value (\"__USER_LABEL_PREFIX__\", user_label_prefix, 0);\n \n   /* Misc.  */\n-  builtin_define_with_value (\"__VERSION__\", version_string, 1);\n-\n   if (flag_gnu89_inline)\n     cpp_define (pfile, \"__GNUC_GNU_INLINE__\");\n   else\n     cpp_define (pfile, \"__GNUC_STDC_INLINE__\");\n \n-  /* Definitions for LP64 model.  */\n-  if (TYPE_PRECISION (long_integer_type_node) == 64\n-      && POINTER_SIZE == 64\n-      && TYPE_PRECISION (integer_type_node) == 32)\n-    {\n-      cpp_define (pfile, \"_LP64\");\n-      cpp_define (pfile, \"__LP64__\");\n-    }\n-\n-  /* Other target-independent built-ins determined by command-line\n-     options.  */\n-  if (optimize_size)\n-    cpp_define (pfile, \"__OPTIMIZE_SIZE__\");\n-  if (optimize)\n-    cpp_define (pfile, \"__OPTIMIZE__\");\n-\n-  if (fast_math_flags_set_p ())\n-    cpp_define (pfile, \"__FAST_MATH__\");\n   if (flag_no_inline)\n     cpp_define (pfile, \"__NO_INLINE__\");\n-  if (flag_signaling_nans)\n-    cpp_define (pfile, \"__SUPPORT_SNAN__\");\n-  if (flag_finite_math_only)\n-    cpp_define (pfile, \"__FINITE_MATH_ONLY__=1\");\n-  else\n-    cpp_define (pfile, \"__FINITE_MATH_ONLY__=0\");\n-  if (flag_pic)\n-    {\n-      builtin_define_with_int_value (\"__pic__\", flag_pic);\n-      builtin_define_with_int_value (\"__PIC__\", flag_pic);\n-    }\n-  if (flag_pie)\n-    {\n-      builtin_define_with_int_value (\"__pie__\", flag_pie);\n-      builtin_define_with_int_value (\"__PIE__\", flag_pie);\n-    }\n \n   if (flag_iso)\n     cpp_define (pfile, \"__STRICT_ANSI__\");\n@@ -810,26 +751,13 @@ c_cpp_builtins (cpp_reader *pfile)\n   if (flag_openmp)\n     cpp_define (pfile, \"_OPENMP=200805\");\n \n-  builtin_define_type_sizeof (\"__SIZEOF_INT__\", integer_type_node);\n-  builtin_define_type_sizeof (\"__SIZEOF_LONG__\", long_integer_type_node);\n-  builtin_define_type_sizeof (\"__SIZEOF_LONG_LONG__\",\n-\t\t\t      long_long_integer_type_node);\n   if (int128_integer_type_node != NULL_TREE)\n     builtin_define_type_sizeof (\"__SIZEOF_INT128__\",\n \t\t\t        int128_integer_type_node);\n-  builtin_define_type_sizeof (\"__SIZEOF_SHORT__\", short_integer_type_node);\n-  builtin_define_type_sizeof (\"__SIZEOF_FLOAT__\", float_type_node);\n-  builtin_define_type_sizeof (\"__SIZEOF_DOUBLE__\", double_type_node);\n-  builtin_define_type_sizeof (\"__SIZEOF_LONG_DOUBLE__\", long_double_type_node);\n-  builtin_define_type_sizeof (\"__SIZEOF_SIZE_T__\", size_type_node);\n   builtin_define_type_sizeof (\"__SIZEOF_WCHAR_T__\", wchar_type_node);\n   builtin_define_type_sizeof (\"__SIZEOF_WINT_T__\", wint_type_node);\n   builtin_define_type_sizeof (\"__SIZEOF_PTRDIFF_T__\",\n \t\t\t      unsigned_ptrdiff_type_node);\n-  /* ptr_type_node can't be used here since ptr_mode is only set when\n-     toplev calls backend_init which is not done with -E switch.  */\n-  builtin_define_with_int_value (\"__SIZEOF_POINTER__\",\n-\t\t\t\t POINTER_SIZE / BITS_PER_UNIT);\n \n   /* A straightforward target hook doesn't work, because of problems\n      linking that hook's body when part of non-C front ends.  */\n@@ -855,9 +783,6 @@ c_cpp_builtins (cpp_reader *pfile)\n      format.  */\n   if (ENABLE_DECIMAL_FLOAT && ENABLE_DECIMAL_BID_FORMAT)\n     cpp_define (pfile, \"__DECIMAL_BID_FORMAT__\");\n-\n-  builtin_define_with_int_value (\"__BIGGEST_ALIGNMENT__\",\n-\t\t\t\t BIGGEST_ALIGNMENT / BITS_PER_UNIT);\n }\n \n /* Pass an object-like macro.  If it doesn't lie in the user's"}, {"sha": "89b0f418be6e6f617e96e28b354f21e12a8d89ae", "filename": "gcc/cppbuiltin.c", "status": "added", "additions": 157, "deletions": 0, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82a1c2fe690f15bfa0b91b54a7f1746acad0a1ef/gcc%2Fcppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82a1c2fe690f15bfa0b91b54a7f1746acad0a1ef/gcc%2Fcppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppbuiltin.c?ref=82a1c2fe690f15bfa0b91b54a7f1746acad0a1ef", "patch": "@@ -0,0 +1,157 @@\n+/* Define builtin-in macros for all front ends that perform preprocessing\n+   Copyright (C) 2010\n+   Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"tree.h\"\n+#include \"version.h\"\n+#include \"flags.h\"\n+#include \"toplev.h\"\n+#include \"cpp-id-data.h\"\n+#include \"cppbuiltin.h\"\n+\n+\n+/* Parse a BASEVER version string of the format \"major.minor.patchlevel\"\n+   or \"major.minor\" to extract its components.  */\n+void\n+parse_basever (int *major, int *minor, int *patchlevel)\n+{\n+  static int s_major = -1, s_minor, s_patchlevel;\n+\n+  if (s_major == -1)\n+    if (sscanf (BASEVER, \"%d.%d.%d\", &s_major, &s_minor, &s_patchlevel) != 3)\n+      {\n+\tsscanf (BASEVER, \"%d.%d\", &s_major, &s_minor);\n+\ts_patchlevel = 0;\n+      }\n+\n+  if (major)\n+    *major = s_major;\n+\n+  if (minor)\n+    *minor = s_minor;\n+\n+  if (patchlevel)\n+    *patchlevel = s_patchlevel;\n+}\n+\n+\n+/* Define __GNUC__, __GNUC_MINOR__, __GNUC_PATCHLEVEL__ and __VERSION__.  */\n+static void\n+define__GNUC__ (cpp_reader *pfile)\n+{\n+  int major, minor, patchlevel;\n+\n+  parse_basever (&major, &minor, &patchlevel);\n+  cpp_define_formatted (pfile, \"__GNUC__=%d\", major);\n+  cpp_define_formatted (pfile, \"__GNUC_MINOR__=%d\", minor);\n+  cpp_define_formatted (pfile, \"__GNUC_PATCHLEVEL__=%d\", patchlevel);\n+  cpp_define_formatted (pfile, \"__VERSION__=\\\"%s\\\"\", version_string);\n+}\n+\n+\n+/* Define various built-in CPP macros that depend on language-independent\n+   compilation flags.  */\n+static void\n+define_builtin_macros_for_compilation_flags (cpp_reader *pfile)\n+{\n+  if (flag_pic)\n+    {\n+      cpp_define_formatted (pfile, \"__pic__=%d\", flag_pic);\n+      cpp_define_formatted (pfile, \"__PIC__=%d\", flag_pic);\n+    }\n+  if (flag_pie)\n+    {\n+      cpp_define_formatted (pfile, \"__pie__=%d\", flag_pie);\n+      cpp_define_formatted (pfile, \"__PIE__=%d\", flag_pie);\n+    }\n+\n+  if (optimize_size)\n+    cpp_define (pfile, \"__OPTIMIZE_SIZE__\");\n+  if (optimize)\n+    cpp_define (pfile, \"__OPTIMIZE__\");\n+\n+  if (fast_math_flags_set_p ())\n+    cpp_define (pfile, \"__FAST_MATH__\");\n+  if (flag_signaling_nans)\n+    cpp_define (pfile, \"__SUPPORT_SNAN__\");\n+\n+  cpp_define_formatted (pfile, \"__FINITE_MATH_ONLY__=%d\",\n+\t\t\tflag_finite_math_only);\n+}\n+\n+\n+/* Define built-in macros for LP64 targets. */\n+static void\n+define_builtin_macros_for_lp64 (cpp_reader *pfile)\n+{\n+  if (TYPE_PRECISION (long_integer_type_node) == 64\n+      && POINTER_SIZE == 64\n+      && TYPE_PRECISION (integer_type_node) == 32)\n+    {\n+      cpp_define (pfile, \"_LP64\");\n+      cpp_define (pfile, \"__LP64__\");\n+    }\n+}\n+\n+\n+/* Define macros for size of basic C types.  */\n+static void\n+define_builtin_macros_for_type_sizes (cpp_reader *pfile)\n+{\n+#define define_type_sizeof(NAME, TYPE)                             \\\n+    cpp_define_formatted (pfile, NAME\"=\"HOST_WIDE_INT_PRINT_DEC,   \\\n+                          tree_low_cst (TYPE_SIZE_UNIT (TYPE), 1))\n+\n+  define_type_sizeof (\"__SIZEOF_INT__\", integer_type_node);\n+  define_type_sizeof (\"__SIZEOF_LONG__\", long_integer_type_node);\n+  define_type_sizeof (\"__SIZEOF_LONG_LONG__\", long_long_integer_type_node);\n+  define_type_sizeof (\"__SIZEOF_SHORT__\", short_integer_type_node);\n+  define_type_sizeof (\"__SIZEOF_FLOAT__\", float_type_node);\n+  define_type_sizeof (\"__SIZEOF_DOUBLE__\", double_type_node);\n+  define_type_sizeof (\"__SIZEOF_LONG_DOUBLE__\", long_double_type_node);\n+  define_type_sizeof (\"__SIZEOF_SIZE_T__\", size_type_node);\n+\n+#undef define_type_sizeof\n+\n+  cpp_define_formatted (pfile, \"__CHAR_BIT__=%u\",\n+\t\t\tTYPE_PRECISION (char_type_node));\n+  cpp_define_formatted (pfile, \"__BIGGEST_ALIGNMENT__=%d\",\n+\t\t\tBIGGEST_ALIGNMENT / BITS_PER_UNIT);\n+\n+  /* ptr_type_node can't be used here since ptr_mode is only set when\n+     toplev calls backend_init which is not done with -E switch.  */\n+  cpp_define_formatted (pfile, \"__SIZEOF_POINTER__=%d\",\n+\t\t\tPOINTER_SIZE / BITS_PER_UNIT);\n+}\n+\n+\n+/* Define macros builtins common to all language performing CPP\n+   preprocessing.  */\n+void\n+define_language_independent_builtin_macros (cpp_reader *pfile)\n+{\n+  define__GNUC__ (pfile);\n+  define_builtin_macros_for_compilation_flags (pfile);\n+  define_builtin_macros_for_lp64 (pfile);\n+  define_builtin_macros_for_type_sizes (pfile);\n+}"}, {"sha": "f88451294922a9b75f67097b97885ada10d3f3ef", "filename": "gcc/cppbuiltin.h", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82a1c2fe690f15bfa0b91b54a7f1746acad0a1ef/gcc%2Fcppbuiltin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82a1c2fe690f15bfa0b91b54a7f1746acad0a1ef/gcc%2Fcppbuiltin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppbuiltin.h?ref=82a1c2fe690f15bfa0b91b54a7f1746acad0a1ef", "patch": "@@ -0,0 +1,37 @@\n+/* Define builtin-in macros for all front ends that perform preprocessing\n+   Copyright (C) 2010\n+   Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef GCC_CPPBUILTIN_H\n+#define GCC_CPPBUILTIN_H\n+\n+#include \"coretypes.h\"\n+\n+\n+/* Parse a BASEVER version string of the format \"major.minor.patchlevel\"\n+   or \"major.minor\" to extract its components.  */\n+extern void parse_basever (int *, int *, int *);\n+\n+/* Define macros builtins common to all language performing CPP\n+   preprocessing.  */\n+extern void define_language_independent_builtin_macros (cpp_reader *);\n+\n+\n+#endif /* ! GCC_CPPBUILTIN_H */\n+"}, {"sha": "fe38d307529cbe560f4a3dd21450a0629d9b8621", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82a1c2fe690f15bfa0b91b54a7f1746acad0a1ef/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82a1c2fe690f15bfa0b91b54a7f1746acad0a1ef/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=82a1c2fe690f15bfa0b91b54a7f1746acad0a1ef", "patch": "@@ -1,3 +1,10 @@\n+2010-10-03  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\t* cpp.c (cpp_define_builtins): Call functions from cppbuiltin.c\n+\tinstead of duplicating code.\n+\t* Make-lang.in: Add dependency on cppbuiltin.h. Don't define\n+\tBASEVER.\n+\n 2010-10-02  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/45748"}, {"sha": "6dd752f5a4a741e7f16c77c76dfa054f757441fa", "filename": "gcc/fortran/Make-lang.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82a1c2fe690f15bfa0b91b54a7f1746acad0a1ef/gcc%2Ffortran%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82a1c2fe690f15bfa0b91b54a7f1746acad0a1ef/gcc%2Ffortran%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FMake-lang.in?ref=82a1c2fe690f15bfa0b91b54a7f1746acad0a1ef", "patch": "@@ -360,6 +360,6 @@ fortran/trans-common.o: $(GFORTRAN_TRANS_DEPS) $(TARGET_H) $(RTL_H)\n fortran/resolve.o: fortran/dependency.h fortran/data.h fortran/target-memory.h\n fortran/data.o: fortran/data.h\n fortran/options.o: $(PARAMS_H) $(TARGET_H) fortran/cpp.h\n-fortran/cpp.o: fortran/cpp.c $(BASEVER) incpath.h incpath.o\n+fortran/cpp.o: fortran/cpp.c incpath.h incpath.o cppbuiltin.h\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) \\\n-\t\t-DBASEVER=$(BASEVER_s) $< $(OUTPUT_OPTION)\n+\t\t$< $(OUTPUT_OPTION)"}, {"sha": "ff4902506f20f6a2d9e2b1a7a32f81254b875268", "filename": "gcc/fortran/cpp.c", "status": "modified", "additions": 6, "deletions": 68, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82a1c2fe690f15bfa0b91b54a7f1746acad0a1ef/gcc%2Ffortran%2Fcpp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82a1c2fe690f15bfa0b91b54a7f1746acad0a1ef/gcc%2Ffortran%2Fcpp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcpp.c?ref=82a1c2fe690f15bfa0b91b54a7f1746acad0a1ef", "patch": "@@ -35,8 +35,13 @@ along with GCC; see the file COPYING3.  If not see\n #include \"../../libcpp/internal.h\"\n #include \"cpp.h\"\n #include \"incpath.h\"\n+#include \"cppbuiltin.h\"\n #include \"mkdeps.h\"\n \n+#ifndef TARGET_CPU_CPP_BUILTINS\n+# define TARGET_CPU_CPP_BUILTINS()\n+#endif\n+\n #ifndef TARGET_OS_CPP_BUILTINS\n # define TARGET_OS_CPP_BUILTINS()\n #endif\n@@ -156,86 +161,19 @@ static void dump_queued_macros (cpp_reader *);\n static void\n cpp_define_builtins (cpp_reader *pfile)\n {\n-  int major, minor, patchlevel;\n-\n   /* Initialize CPP built-ins; '1' corresponds to 'flag_hosted'\n      in C, defines __STDC_HOSTED__?!  */\n   cpp_init_builtins (pfile, 0);\n \n   /* Initialize GFORTRAN specific builtins.\n      These are documented.  */\n-  if (sscanf (BASEVER, \"%d.%d.%d\", &major, &minor, &patchlevel) != 3)\n-    {\n-      sscanf (BASEVER, \"%d.%d\", &major, &minor);\n-      patchlevel = 0;\n-    }\n-  cpp_define_formatted (pfile, \"__GNUC__=%d\", major);\n-  cpp_define_formatted (pfile, \"__GNUC_MINOR__=%d\", minor);\n-  cpp_define_formatted (pfile, \"__GNUC_PATCHLEVEL__=%d\", patchlevel);\n-\n+  define_language_independent_builtin_macros (pfile);\n   cpp_define (pfile, \"__GFORTRAN__=1\");\n   cpp_define (pfile, \"_LANGUAGE_FORTRAN=1\");\n \n   if (gfc_option.gfc_flag_openmp)\n     cpp_define (pfile, \"_OPENMP=200805\");\n \n-\n-  /* More builtins that might be useful, but are not documented\n-     (in no particular order).  */\n-  cpp_define_formatted (pfile, \"__VERSION__=\\\"%s\\\"\", version_string);\n-\n-  if (flag_pic)\n-    {\n-      cpp_define_formatted (pfile, \"__pic__=%d\", flag_pic);\n-      cpp_define_formatted (pfile, \"__PIC__=%d\", flag_pic);\n-    }\n-  if (flag_pie)\n-    {\n-      cpp_define_formatted (pfile, \"__pie__=%d\", flag_pie);\n-      cpp_define_formatted (pfile, \"__PIE__=%d\", flag_pie);\n-    }\n-\n-  if (optimize_size)\n-    cpp_define (pfile, \"__OPTIMIZE_SIZE__\");\n-  if (optimize)\n-    cpp_define (pfile, \"__OPTIMIZE__\");\n-\n-  if (fast_math_flags_set_p ())\n-    cpp_define (pfile, \"__FAST_MATH__\");\n-  if (flag_signaling_nans)\n-    cpp_define (pfile, \"__SUPPORT_SNAN__\");\n-\n-  cpp_define_formatted (pfile, \"__FINITE_MATH_ONLY__=%d\", flag_finite_math_only);\n-\n-  /* Definitions for LP64 model. */\n-  if (TYPE_PRECISION (long_integer_type_node) == 64\n-      && POINTER_SIZE == 64\n-      && TYPE_PRECISION (integer_type_node) == 32)\n-    {\n-      cpp_define (pfile, \"_LP64\");\n-      cpp_define (pfile, \"__LP64__\");\n-    }\n-\n-  /* Define NAME with value TYPE size_unit.\n-     The C-side also defines __SIZEOF_WCHAR_T__, __SIZEOF_WINT_T__\n-     __SIZEOF_PTRDIFF_T__, however, fortran seems to lack the\n-     appropriate type nodes.  */\n-\n-#define define_type_sizeof(NAME, TYPE)                             \\\n-    cpp_define_formatted (pfile, NAME\"=\"HOST_WIDE_INT_PRINT_DEC,   \\\n-                          tree_low_cst (TYPE_SIZE_UNIT (TYPE), 1))\n-\n-  define_type_sizeof (\"__SIZEOF_INT__\", integer_type_node);\n-  define_type_sizeof (\"__SIZEOF_LONG__\", long_integer_type_node);\n-  define_type_sizeof (\"__SIZEOF_LONG_LONG__\", long_long_integer_type_node);\n-  define_type_sizeof (\"__SIZEOF_SHORT__\", short_integer_type_node);\n-  define_type_sizeof (\"__SIZEOF_FLOAT__\", float_type_node);\n-  define_type_sizeof (\"__SIZEOF_DOUBLE__\", double_type_node);\n-  define_type_sizeof (\"__SIZEOF_LONG_DOUBLE__\", long_double_type_node);\n-  define_type_sizeof (\"__SIZEOF_SIZE_T__\", size_type_node);\n-\n-#undef define_type_sizeof\n-\n   /* The defines below are necessary for the TARGET_* macros.\n \n      FIXME:  Note that builtin_define_std() actually is a function"}]}