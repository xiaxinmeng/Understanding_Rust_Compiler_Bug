{"sha": "74c4a88aff99400421d4880f45a33d01458a8cc6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzRjNGE4OGFmZjk5NDAwNDIxZDQ4ODBmNDVhMzNkMDE0NThhOGNjNg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@kss-loka.si", "date": "2005-06-10T21:45:12Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2005-06-10T21:45:12Z"}, "message": "re PR target/21981 ([4.0 only] __m64 return value should  be returned in %mm0)\n\n\tPR target/21981\n\t* config/i386/i386.c (ix86_function_value_regno_p): Return true\n\tfor FIRST_MMX_REG if TARGET_MMX.\n\t(ix86_return_in_memory): Return 1 for MMX/3dNow vectors. Delete\n\twrong comment.\n\t(ix86_struct_value_rtx): Emit warning for MMX ABI violations.\n\t(ix86_value_regno): Return FIRST_MMX_REG for MMX vector modes.\n\nFrom-SVN: r100832", "tree": {"sha": "08909fe3efd3c3f07a386b7815e88f18584bed66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08909fe3efd3c3f07a386b7815e88f18584bed66"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74c4a88aff99400421d4880f45a33d01458a8cc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74c4a88aff99400421d4880f45a33d01458a8cc6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74c4a88aff99400421d4880f45a33d01458a8cc6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74c4a88aff99400421d4880f45a33d01458a8cc6/comments", "author": null, "committer": null, "parents": [{"sha": "c45af542bdbfa069cbc8318373b5c199de168969", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c45af542bdbfa069cbc8318373b5c199de168969", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c45af542bdbfa069cbc8318373b5c199de168969"}], "stats": {"total": 48, "additions": 39, "deletions": 9}, "files": [{"sha": "7d6fc6aa4aa84c4ed0354c7ea21de98528994950", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74c4a88aff99400421d4880f45a33d01458a8cc6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74c4a88aff99400421d4880f45a33d01458a8cc6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=74c4a88aff99400421d4880f45a33d01458a8cc6", "patch": "@@ -1,3 +1,13 @@\n+2005-06-10  Uros Bizjak  <uros@kss-loka.si>\n+\n+\tPR target/21981\n+\t* config/i386/i386.c (ix86_function_value_regno_p): Return true\n+\tfor FIRST_MMX_REG if TARGET_MMX.\n+\t(ix86_return_in_memory): Return 1 for MMX/3dNow vectors. Delete\n+\twrong comment.\n+\t(ix86_struct_value_rtx): Emit warning for MMX ABI violations.\n+\t(ix86_value_regno): Return FIRST_MMX_REG for MMX vector modes.\n+\n 2005-06-10  Daniel Berlin  <dberlin@dberlin.org>\n \n \t* lambda-code.c (replace_uses_equiv_to_x_with_y): Check step"}, {"sha": "dfaac94dff053ee7bbfaf54fec466a2c56eef116", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 29, "deletions": 9, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74c4a88aff99400421d4880f45a33d01458a8cc6/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74c4a88aff99400421d4880f45a33d01458a8cc6/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=74c4a88aff99400421d4880f45a33d01458a8cc6", "patch": "@@ -3104,6 +3104,7 @@ ix86_function_value_regno_p (int regno)\n     {\n       return ((regno) == 0\n \t      || ((regno) == FIRST_FLOAT_REG && TARGET_FLOAT_RETURNS_IN_80387)\n+\t      || ((regno) == FIRST_MMX_REG && TARGET_MMX)\n \t      || ((regno) == FIRST_SSE_REG && TARGET_SSE));\n     }\n   return ((regno) == 0 || (regno) == FIRST_FLOAT_REG\n@@ -3159,10 +3160,10 @@ ix86_return_in_memory (tree type)\n       if (size < 8)\n \treturn 0;\n \n-      /* MMX/3dNow values are returned on the stack, since we've\n-\t got to EMMS/FEMMS before returning.  */\n+      /* MMX/3dNow values are returned in MM0,\n+\t except when it doesn't exits.  */\n       if (size == 8)\n-\treturn 1;\n+\treturn (TARGET_MMX ? 0 : 1);\n \n       /* SSE values are returned in XMM0, except when it doesn't exist.  */\n       if (size == 16)\n@@ -3191,18 +3192,32 @@ ix86_return_in_memory (tree type)\n static rtx\n ix86_struct_value_rtx (tree type, int incoming ATTRIBUTE_UNUSED)\n {\n-  static bool warned;\n+  static bool warnedsse, warnedmmx;\n \n-  if (!TARGET_SSE && type && !warned)\n+  if (type)\n     {\n       /* Look at the return type of the function, not the function type.  */\n       enum machine_mode mode = TYPE_MODE (TREE_TYPE (type));\n \n-      if (mode == TImode\n-\t  || (VECTOR_MODE_P (mode) && GET_MODE_SIZE (mode) == 16))\n+      if (!TARGET_SSE && !warnedsse)\n \t{\n-\t  warned = true;\n-\t  warning (0, \"SSE vector return without SSE enabled changes the ABI\");\n+\t  if (mode == TImode\n+\t      || (VECTOR_MODE_P (mode) && GET_MODE_SIZE (mode) == 16))\n+\t    {\n+\t      warnedsse = true;\n+\t      warning (0, \"SSE vector return without SSE enabled \"\n+\t\t       \"changes the ABI\");\n+\t    }\n+\t}\n+\n+      if (!TARGET_MMX && !warnedmmx)\n+\t{\n+\t  if (VECTOR_MODE_P (mode) && GET_MODE_SIZE (mode) == 8)\n+\t    {\n+\t      warnedmmx = true;\n+\t      warning (0, \"MMX vector return without MMX enabled \"\n+\t\t       \"changes the ABI\");\n+\t    }\n \t}\n     }\n \n@@ -3244,6 +3259,11 @@ ix86_value_regno (enum machine_mode mode, tree func)\n {\n   gcc_assert (!TARGET_64BIT);\n \n+  /* 8-byte vector modes in %mm0. See ix86_return_in_memory for where\n+     we prevent this case when mmx is not available.  */\n+  if ((VECTOR_MODE_P (mode) && GET_MODE_SIZE (mode) == 8))\n+    return FIRST_MMX_REG;\n+\n   /* 16-byte vector modes in %xmm0.  See ix86_return_in_memory for where\n      we prevent this case when sse is not available.  */\n   if (mode == TImode || (VECTOR_MODE_P (mode) && GET_MODE_SIZE (mode) == 16))"}]}