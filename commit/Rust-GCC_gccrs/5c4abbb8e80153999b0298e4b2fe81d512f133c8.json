{"sha": "5c4abbb8e80153999b0298e4b2fe81d512f133c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWM0YWJiYjhlODAxNTM5OTliMDI5OGU0YjJmZTgxZDUxMmYxMzNjOA==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2015-04-23T14:35:12Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2015-04-23T14:35:12Z"}, "message": "re PR c/65345 (ICE with _Generic selection on _Atomic int)\n\n\tPR c/65345\n\t* c-decl.c (set_labels_context_r): New function.\n\t(store_parm_decls): Call it via walk_tree_without_duplicates.\n\t* c-typeck.c (convert_lvalue_to_rvalue): Use create_tmp_var_raw\n\tinstead of create_tmp_var.  Build TARGET_EXPR instead of\n\tCOMPOUND_EXPR.\n\t(build_atomic_assign): Use create_tmp_var_raw instead of\n\tcreate_tmp_var.  Build TARGET_EXPRs instead of MODIFY_EXPR.\n\n\t* gcc.dg/pr65345-1.c: New test.\n\t* gcc.dg/pr65345-2.c: New test.\n\nFrom-SVN: r222370", "tree": {"sha": "9a2630664eeeea06af689180602bbd9e970c8fd2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a2630664eeeea06af689180602bbd9e970c8fd2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c4abbb8e80153999b0298e4b2fe81d512f133c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c4abbb8e80153999b0298e4b2fe81d512f133c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c4abbb8e80153999b0298e4b2fe81d512f133c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c4abbb8e80153999b0298e4b2fe81d512f133c8/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0f9b95dfc735af9e5f63bf0acdd6d6fa7fecefb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f9b95dfc735af9e5f63bf0acdd6d6fa7fecefb6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f9b95dfc735af9e5f63bf0acdd6d6fa7fecefb6"}], "stats": {"total": 168, "additions": 157, "deletions": 11}, "files": [{"sha": "c613e9d5dd88b1be8b68d10f696e1644888e5437", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c4abbb8e80153999b0298e4b2fe81d512f133c8/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c4abbb8e80153999b0298e4b2fe81d512f133c8/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=5c4abbb8e80153999b0298e4b2fe81d512f133c8", "patch": "@@ -1,3 +1,14 @@\n+2015-04-23  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/65345\n+\t* c-decl.c (set_labels_context_r): New function.\n+\t(store_parm_decls): Call it via walk_tree_without_duplicates.\n+\t* c-typeck.c (convert_lvalue_to_rvalue): Use create_tmp_var_raw\n+\tinstead of create_tmp_var.  Build TARGET_EXPR instead of\n+\tCOMPOUND_EXPR.\n+\t(build_atomic_assign): Use create_tmp_var_raw instead of\n+\tcreate_tmp_var.  Build TARGET_EXPRs instead of MODIFY_EXPR.\n+\n 2015-04-20  Ilya Verbin  <ilya.verbin@intel.com>\n \n \t* c-parser.c (c_parser_oacc_enter_exit_data): Remove excess semicolon."}, {"sha": "27ecd8bf513e3fd3741f61509004f4e26e641f84", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c4abbb8e80153999b0298e4b2fe81d512f133c8/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c4abbb8e80153999b0298e4b2fe81d512f133c8/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=5c4abbb8e80153999b0298e4b2fe81d512f133c8", "patch": "@@ -8796,6 +8796,21 @@ store_parm_decls_from (struct c_arg_info *arg_info)\n   store_parm_decls ();\n }\n \n+/* Called by walk_tree to look for and update context-less labels.  */\n+\n+static tree\n+set_labels_context_r (tree *tp, int *walk_subtrees, void *data)\n+{\n+  if (TREE_CODE (*tp) == LABEL_EXPR\n+      && DECL_CONTEXT (LABEL_EXPR_LABEL (*tp)) == NULL_TREE)\n+    {\n+      DECL_CONTEXT (LABEL_EXPR_LABEL (*tp)) = static_cast<tree>(data);\n+      *walk_subtrees = 0;\n+    }\n+\n+  return NULL_TREE;\n+}\n+\n /* Store the parameter declarations into the current function declaration.\n    This is called after parsing the parameter declarations, before\n    digesting the body of the function.\n@@ -8850,7 +8865,21 @@ store_parm_decls (void)\n      thus won't naturally see the SAVE_EXPR containing the increment.  All\n      other pending sizes would be handled by gimplify_parameters.  */\n   if (arg_info->pending_sizes)\n-    add_stmt (arg_info->pending_sizes);\n+    {\n+      /* In very special circumstances, e.g. for code like\n+\t   _Atomic int i = 5;\n+\t   void f (int a[i += 2]) {}\n+\t we need to execute the atomic assignment on function entry.\n+\t But in this case, it is not just a straight store, it has the\n+\t op= form, which means that build_atomic_assign has generated\n+\t gotos, labels, etc.  Because at that time the function decl\n+\t for F has not been created yet, those labels do not have any\n+\t function context.  But we have the fndecl now, so update the\n+\t labels accordingly.  gimplify_expr would crash otherwise.  */\n+      walk_tree_without_duplicates (&arg_info->pending_sizes,\n+\t\t\t\t    set_labels_context_r, fndecl);\n+      add_stmt (arg_info->pending_sizes);\n+    }\n }\n \n /* Store PARM_DECLs in PARMS into scope temporarily.  Used for"}, {"sha": "91735b54deaf720aa167bda5ad7174c8b305204e", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c4abbb8e80153999b0298e4b2fe81d512f133c8/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c4abbb8e80153999b0298e4b2fe81d512f133c8/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=5c4abbb8e80153999b0298e4b2fe81d512f133c8", "patch": "@@ -2039,7 +2039,7 @@ convert_lvalue_to_rvalue (location_t loc, struct c_expr exp,\n       /* Remove the qualifiers for the rest of the expressions and\n \t create the VAL temp variable to hold the RHS.  */\n       nonatomic_type = build_qualified_type (expr_type, TYPE_UNQUALIFIED);\n-      tmp = create_tmp_var (nonatomic_type);\n+      tmp = create_tmp_var_raw (nonatomic_type);\n       tmp_addr = build_unary_op (loc, ADDR_EXPR, tmp, 0);\n       TREE_ADDRESSABLE (tmp) = 1;\n       TREE_NO_WARNING (tmp) = 1;\n@@ -2055,7 +2055,8 @@ convert_lvalue_to_rvalue (location_t loc, struct c_expr exp,\n       mark_exp_read (exp.value);\n \n       /* Return tmp which contains the value loaded.  */\n-      exp.value = build2 (COMPOUND_EXPR, nonatomic_type, func_call, tmp);\n+      exp.value = build4 (TARGET_EXPR, nonatomic_type, tmp, func_call,\n+\t\t\t  NULL_TREE, NULL_TREE);\n     }\n   return exp;\n }\n@@ -3686,10 +3687,11 @@ build_atomic_assign (location_t loc, tree lhs, enum tree_code modifycode,\n      the VAL temp variable to hold the RHS.  */\n   nonatomic_lhs_type = build_qualified_type (lhs_type, TYPE_UNQUALIFIED);\n   nonatomic_rhs_type = build_qualified_type (rhs_type, TYPE_UNQUALIFIED);\n-  val = create_tmp_var (nonatomic_rhs_type);\n+  val = create_tmp_var_raw (nonatomic_rhs_type);\n   TREE_ADDRESSABLE (val) = 1;\n   TREE_NO_WARNING (val) = 1;\n-  rhs = build2 (MODIFY_EXPR, nonatomic_rhs_type, val, rhs);\n+  rhs = build4 (TARGET_EXPR, nonatomic_rhs_type, val, rhs, NULL_TREE,\n+\t\tNULL_TREE);\n   SET_EXPR_LOCATION (rhs, loc);\n   add_stmt (rhs);\n \n@@ -3715,12 +3717,12 @@ build_atomic_assign (location_t loc, tree lhs, enum tree_code modifycode,\n     }\n \n   /* Create the variables and labels required for the op= form.  */\n-  old = create_tmp_var (nonatomic_lhs_type);\n+  old = create_tmp_var_raw (nonatomic_lhs_type);\n   old_addr = build_unary_op (loc, ADDR_EXPR, old, 0);\n   TREE_ADDRESSABLE (old) = 1;\n   TREE_NO_WARNING (old) = 1;\n \n-  newval = create_tmp_var (nonatomic_lhs_type);\n+  newval = create_tmp_var_raw (nonatomic_lhs_type);\n   newval_addr = build_unary_op (loc, ADDR_EXPR, newval, 0);\n   TREE_ADDRESSABLE (newval) = 1;\n \n@@ -3736,7 +3738,9 @@ build_atomic_assign (location_t loc, tree lhs, enum tree_code modifycode,\n   params->quick_push (old_addr);\n   params->quick_push (seq_cst);\n   func_call = c_build_function_call_vec (loc, vNULL, fndecl, params, NULL);\n-  add_stmt (func_call);\n+  old = build4 (TARGET_EXPR, nonatomic_lhs_type, old, func_call, NULL_TREE,\n+\t\tNULL_TREE);\n+  add_stmt (old);\n   params->truncate (0);\n \n   /* Create the expressions for floating-point environment\n@@ -3755,12 +3759,14 @@ build_atomic_assign (location_t loc, tree lhs, enum tree_code modifycode,\n \n   /* newval = old + val;  */\n   rhs = build_binary_op (loc, modifycode, old, val, 1);\n+  rhs = c_fully_fold (rhs, false, NULL);\n   rhs = convert_for_assignment (loc, UNKNOWN_LOCATION, nonatomic_lhs_type,\n \t\t\t\trhs, NULL_TREE, ic_assign, false, NULL_TREE,\n \t\t\t\tNULL_TREE, 0);\n   if (rhs != error_mark_node)\n     {\n-      rhs = build2 (MODIFY_EXPR, nonatomic_lhs_type, newval, rhs);\n+      rhs = build4 (TARGET_EXPR, nonatomic_lhs_type, newval, rhs, NULL_TREE,\n+\t\t    NULL_TREE);\n       SET_EXPR_LOCATION (rhs, loc);\n       add_stmt (rhs);\n     }\n@@ -3782,15 +3788,15 @@ build_atomic_assign (location_t loc, tree lhs, enum tree_code modifycode,\n   stmt = build3 (COND_EXPR, void_type_node, func_call, goto_stmt, NULL_TREE);\n   SET_EXPR_LOCATION (stmt, loc);\n   add_stmt (stmt);\n-  \n+\n   if (clear_call)\n     add_stmt (clear_call);\n \n   /* goto loop;  */\n   goto_stmt  = build1 (GOTO_EXPR, void_type_node, loop_decl);\n   SET_EXPR_LOCATION (goto_stmt, loc);\n   add_stmt (goto_stmt);\n- \n+\n   /* done:  */\n   add_stmt (done_label);\n "}, {"sha": "5f55eb091a8a4b6cfc28a76eee5aea65258b35b9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c4abbb8e80153999b0298e4b2fe81d512f133c8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c4abbb8e80153999b0298e4b2fe81d512f133c8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5c4abbb8e80153999b0298e4b2fe81d512f133c8", "patch": "@@ -1,3 +1,9 @@\n+2015-04-23  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/65345\n+\t* gcc.dg/pr65345-1.c: New test.\n+\t* gcc.dg/pr65345-2.c: New test.\n+\n 2015-04-23  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \t* gcc.target/powerpc/crypto-builtin-2.c: New."}, {"sha": "d11947b459c5a6eabcbc372d463d74e9ecf04b2d", "filename": "gcc/testsuite/gcc.dg/pr65345-1.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c4abbb8e80153999b0298e4b2fe81d512f133c8/gcc%2Ftestsuite%2Fgcc.dg%2Fpr65345-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c4abbb8e80153999b0298e4b2fe81d512f133c8/gcc%2Ftestsuite%2Fgcc.dg%2Fpr65345-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr65345-1.c?ref=5c4abbb8e80153999b0298e4b2fe81d512f133c8", "patch": "@@ -0,0 +1,35 @@\n+/* PR c/65345 */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+_Atomic int i = 3;\n+\n+int a1 = sizeof (i + 1);\n+int a2 = sizeof (i = 0);\n+int a3 = sizeof (i++);\n+int a4 = sizeof (i--);\n+int a5 = sizeof (-i);\n+\n+int b1 = _Alignof (i + 1);\n+int b2 = _Alignof (i = 0);\n+int b3 = _Alignof (i++);\n+int b4 = _Alignof (i--);\n+int b5 = _Alignof (-i);\n+\n+int c1 = i; /* { dg-error \"initializer element is not constant\" } */\n+int c2 = (i ? 1 : 2); /* { dg-error \"initializer element is not constant\" } */\n+int c3[i]; /* { dg-error \"variably modified\" } */\n+int c4 = 0 || i; /* { dg-error \"initializer element is not constant\" } */\n+int c5 = (i += 10); /* { dg-error \"initializer element is not constant\" } */\n+\n+_Static_assert (_Generic (i, int: 1, default: 0) == 1, \"1\");\n+_Static_assert (_Generic (i + 1, int: 1, default: 0) == 1, \"2\");\n+_Static_assert (_Generic (i = 0, int: 1, default: 0) == 1, \"3\");\n+_Static_assert (_Generic (i++, int: 1, default: 0) == 1, \"4\");\n+_Static_assert (_Generic (i--, int: 1, default: 0) == 1, \"5\");\n+\n+void fn1 (int a[i + 1]);\n+void fn2 (int a[i = 0]);\n+void fn3 (int a[i++]);\n+void fn4 (int a[i--]);\n+void fn5 (int a[-i]);"}, {"sha": "438100dcf7df3279d368fe8a2c2568f2ec5a787a", "filename": "gcc/testsuite/gcc.dg/pr65345-2.c", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c4abbb8e80153999b0298e4b2fe81d512f133c8/gcc%2Ftestsuite%2Fgcc.dg%2Fpr65345-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c4abbb8e80153999b0298e4b2fe81d512f133c8/gcc%2Ftestsuite%2Fgcc.dg%2Fpr65345-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr65345-2.c?ref=5c4abbb8e80153999b0298e4b2fe81d512f133c8", "patch": "@@ -0,0 +1,59 @@\n+/* PR c/65345 */\n+/* { dg-do run } */\n+/* { dg-options \"\" } */\n+\n+#define CHECK(X) if (!(X)) __builtin_abort ()\n+\n+_Atomic int i = 5;\n+_Atomic int j = 2;\n+\n+void\n+fn1 (int a[i = 0])\n+{\n+}\n+\n+void\n+fn2 (int a[i += 2])\n+{\n+}\n+\n+void\n+fn3 (int a[++i])\n+{\n+}\n+\n+void\n+fn4 (int a[++i])\n+{\n+}\n+\n+void\n+fn5 (int a[++i][j = 10])\n+{\n+}\n+\n+void\n+fn6 (int a[i = 7][j--])\n+{\n+}\n+\n+int\n+main ()\n+{\n+  int a[10];\n+  int aa[10][10];\n+  fn1 (a);\n+  CHECK (i == 0);\n+  fn2 (a);\n+  CHECK (i == 2);\n+  fn3 (a);\n+  CHECK (i == 3);\n+  fn4 (a);\n+  CHECK (i == 4);\n+  fn5 (aa);\n+  CHECK (i == 5);\n+  CHECK (j == 10);\n+  fn6 (aa);\n+  CHECK (i == 7);\n+  CHECK (j == 9);\n+}"}]}