{"sha": "f2d9f95e9ccac1376aee73345b8b4a00e803d67d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjJkOWY5NWU5Y2NhYzEzNzZhZWU3MzM0NWI4YjRhMDBlODAzZDY3ZA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-09-12T10:59:09Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-09-12T11:01:19Z"}, "message": "Add preliminary support for 128-bit integer types\n\nThis is only the gigi part, in preparation for the bulk of the\nimplementation.\n\ngcc/ada/ChangeLog:\n\t* fe.h: Fix pilot error in previous change.\n\t* gcc-interface/gigi.h (enum standard_datatypes): Add ADT_mulv128_decl.\n\t(mulv128_decl): New macro.\n\t(get_target_long_long_long_size): Declare.\n\t* gcc-interface/decl.c (gnat_to_gnu_entity): Use a maximum size of\n\t128 bits for discrete types if Enable_128bit_Types is true.\n\t* gcc-interface/targtyps.c: Include target.h.\n\t(get_target_long_long_long_size): New function.\n\t* gcc-interface/trans.c (gigi): Initialize mulv128_decl if need be.\n\t(build_binary_op_trapv): Call it for 128-bit multiplication.\n\t* gcc-interface/utils.c (make_type_from_size): Enforce a maximum\n\tsize of 128 bits if Enable_128bit_Types is true.", "tree": {"sha": "641d16d23406a8f3a611ee8f608fdc0cac592264", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/641d16d23406a8f3a611ee8f608fdc0cac592264"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2d9f95e9ccac1376aee73345b8b4a00e803d67d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2d9f95e9ccac1376aee73345b8b4a00e803d67d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2d9f95e9ccac1376aee73345b8b4a00e803d67d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2d9f95e9ccac1376aee73345b8b4a00e803d67d/comments", "author": null, "committer": null, "parents": [{"sha": "fe47e8163928d2cc42ad84634cfd147f948aad4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe47e8163928d2cc42ad84634cfd147f948aad4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe47e8163928d2cc42ad84634cfd147f948aad4a"}], "stats": {"total": 42, "additions": 40, "deletions": 2}, "files": [{"sha": "858a28acb8e05f47fa25d05639498c9b18bf89e6", "filename": "gcc/ada/fe.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2d9f95e9ccac1376aee73345b8b4a00e803d67d/gcc%2Fada%2Ffe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2d9f95e9ccac1376aee73345b8b4a00e803d67d/gcc%2Fada%2Ffe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffe.h?ref=f2d9f95e9ccac1376aee73345b8b4a00e803d67d", "patch": "@@ -213,6 +213,7 @@ typedef enum {\n extern Ada_Version_Type Ada_Version;\n extern Boolean Back_End_Inlining;\n extern Boolean Debug_Generated_Code;\n+extern Boolean Enable_128bit_Types;\n extern Boolean Exception_Extra_Info;\n extern Boolean Exception_Locations_Suppressed;\n extern Exception_Mechanism_Type Exception_Mechanism;"}, {"sha": "c9c2a95170f36c8d1fc0fd00c0b074b8ed02bb89", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2d9f95e9ccac1376aee73345b8b4a00e803d67d/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2d9f95e9ccac1376aee73345b8b4a00e803d67d/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=f2d9f95e9ccac1376aee73345b8b4a00e803d67d", "patch": "@@ -524,7 +524,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \t  else if (IN (kind, Access_Kind))\n \t    max_esize = POINTER_SIZE * 2;\n \t  else\n-\t    max_esize = LONG_LONG_TYPE_SIZE;\n+\t    max_esize = Enable_128bit_Types ? 128 : LONG_LONG_TYPE_SIZE;\n \n \t  if (esize > max_esize)\n \t   esize = max_esize;"}, {"sha": "355178e284f2273f896d48470ccce7e3cf05fa2c", "filename": "gcc/ada/gcc-interface/gigi.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2d9f95e9ccac1376aee73345b8b4a00e803d67d/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2d9f95e9ccac1376aee73345b8b4a00e803d67d/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fgigi.h?ref=f2d9f95e9ccac1376aee73345b8b4a00e803d67d", "patch": "@@ -390,6 +390,9 @@ enum standard_datatypes\n   /* Function decl node for 64-bit multiplication with overflow checking.  */\n   ADT_mulv64_decl,\n \n+  /* Function decl node for 128-bit multiplication with overflow checking.  */\n+  ADT_mulv128_decl,\n+\n   /* Identifier for the name of the _Parent field in tagged record types.  */\n   ADT_parent_name_id,\n \n@@ -462,6 +465,7 @@ extern GTY(()) tree gnat_raise_decls_ext[(int) LAST_REASON_CODE + 1];\n #define free_decl gnat_std_decls[(int) ADT_free_decl]\n #define realloc_decl gnat_std_decls[(int) ADT_realloc_decl]\n #define mulv64_decl gnat_std_decls[(int) ADT_mulv64_decl]\n+#define mulv128_decl gnat_std_decls[(int) ADT_mulv128_decl]\n #define parent_name_id gnat_std_decls[(int) ADT_parent_name_id]\n #define exception_data_name_id gnat_std_decls[(int) ADT_exception_data_name_id]\n #define jmpbuf_type gnat_std_decls[(int) ADT_jmpbuf_type]\n@@ -1035,6 +1039,7 @@ extern Pos get_target_short_size (void);\n extern Pos get_target_int_size (void);\n extern Pos get_target_long_size (void);\n extern Pos get_target_long_long_size (void);\n+extern Pos get_target_long_long_long_size (void);\n extern Pos get_target_pointer_size (void);\n extern Pos get_target_maximum_default_alignment (void);\n extern Pos get_target_system_allocator_alignment (void);"}, {"sha": "60a37e1463b9021bd01c89f1573e6f8616581646", "filename": "gcc/ada/gcc-interface/targtyps.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2d9f95e9ccac1376aee73345b8b4a00e803d67d/gcc%2Fada%2Fgcc-interface%2Ftargtyps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2d9f95e9ccac1376aee73345b8b4a00e803d67d/gcc%2Fada%2Fgcc-interface%2Ftargtyps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftargtyps.c?ref=f2d9f95e9ccac1376aee73345b8b4a00e803d67d", "patch": "@@ -29,6 +29,7 @@\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"tm.h\"\n+#include \"target.h\"\n #include \"tree.h\"\n \n #include \"ada.h\"\n@@ -94,6 +95,15 @@ get_target_long_long_size (void)\n   return LONG_LONG_TYPE_SIZE;\n }\n \n+Pos\n+get_target_long_long_long_size (void)\n+{\n+  if (targetm.scalar_mode_supported_p (TImode))\n+    return GET_MODE_BITSIZE (TImode);\n+  else\n+    return LONG_LONG_TYPE_SIZE;\n+}\n+\n Pos\n get_target_pointer_size (void)\n {"}, {"sha": "9be12952c5bf7ce9c4bae39481493022dd1b0be6", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2d9f95e9ccac1376aee73345b8b4a00e803d67d/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2d9f95e9ccac1376aee73345b8b4a00e803d67d/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=f2d9f95e9ccac1376aee73345b8b4a00e803d67d", "patch": "@@ -439,6 +439,19 @@ gigi (Node_Id gnat_root,\n \t\t\t   NULL_TREE, is_default, true, true, true, false,\n \t\t\t   false, NULL, Empty);\n \n+  if (Enable_128bit_Types)\n+    {\n+      tree int128_type = gnat_type_for_size (128, 0);\n+      mulv128_decl\n+\t= create_subprog_decl (get_identifier (\"__gnat_mulv128\"), NULL_TREE,\n+\t\t\t       build_function_type_list (int128_type,\n+\t\t\t\t\t\t\t int128_type,\n+\t\t\t\t\t\t\t int128_type,\n+\t\t\t\t\t\t\t NULL_TREE),\n+\t\t\t       NULL_TREE, is_default, true, true, true, false,\n+\t\t\t       false, NULL, Empty);\n+    }\n+\n   /* Name of the _Parent field in tagged record types.  */\n   parent_name_id = get_identifier (Get_Name_String (Name_uParent));\n \n@@ -9388,6 +9401,15 @@ build_binary_op_trapv (enum tree_code code, tree gnu_type, tree left,\n \t\t\t\t\t\t       convert (int64, rhs)));\n \t}\n \n+      /* Likewise for a 128-bit mult and a 64-bit target.  */\n+      else if (code == MULT_EXPR && precision == 128 && BITS_PER_WORD < 128)\n+\t{\n+\t  tree int128 = gnat_type_for_size (128, 0);\n+\t  return convert (gnu_type, build_call_n_expr (mulv128_decl, 2,\n+\t\t\t\t\t\t       convert (int128, lhs),\n+\t\t\t\t\t\t       convert (int128, rhs)));\n+\t}\n+\n       enum internal_fn icode;\n \n       switch (code)"}, {"sha": "048a0cf13b44dc13bc81f6302f61a192c50f25b4", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2d9f95e9ccac1376aee73345b8b4a00e803d67d/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2d9f95e9ccac1376aee73345b8b4a00e803d67d/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=f2d9f95e9ccac1376aee73345b8b4a00e803d67d", "patch": "@@ -1343,7 +1343,7 @@ make_type_from_size (tree type, tree size_tree, bool for_biased)\n \t not already have the proper size and the size is not too large.  */\n       if (BIT_PACKED_ARRAY_TYPE_P (type)\n \t  || (TYPE_PRECISION (type) == size && biased_p == for_biased)\n-\t  || size > LONG_LONG_TYPE_SIZE)\n+\t  || size > (Enable_128bit_Types ? 128 : LONG_LONG_TYPE_SIZE))\n \tbreak;\n \n       biased_p |= for_biased;"}]}