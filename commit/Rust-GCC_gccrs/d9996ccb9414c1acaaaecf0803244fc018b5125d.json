{"sha": "d9996ccb9414c1acaaaecf0803244fc018b5125d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDk5OTZjY2I5NDE0YzFhY2FhYWVjZjA4MDMyNDRmYzAxOGI1MTI1ZA==", "commit": {"author": {"name": "David Faust", "email": "david.faust@oracle.com", "date": "2021-08-03T17:33:03Z"}, "committer": {"name": "David Faust", "email": "david.faust@oracle.com", "date": "2021-09-07T20:48:58Z"}, "message": "doc: BPF CO-RE documentation\n\nDocument the new command line options (-mco-re and -mno-co-re), the new\nBPF target builtin (__builtin_preserve_access_index), and the new BPF\ntarget attribute (preserve_access_index) introduced with BPF CO-RE.\n\ngcc/ChangeLog:\n\n\t* doc/extend.texi (BPF Type Attributes) New node.\n\tDocument new preserve_access_index attribute.\n\tDocument new preserve_access_index builtin.\n\t* doc/invoke.texi: Document -mco-re and -mno-co-re options.", "tree": {"sha": "098ead0936e576eae31141a1a74df65f6431fd48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/098ead0936e576eae31141a1a74df65f6431fd48"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9996ccb9414c1acaaaecf0803244fc018b5125d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9996ccb9414c1acaaaecf0803244fc018b5125d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9996ccb9414c1acaaaecf0803244fc018b5125d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9996ccb9414c1acaaaecf0803244fc018b5125d/comments", "author": {"login": "dafaust", "id": 4460334, "node_id": "MDQ6VXNlcjQ0NjAzMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4460334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dafaust", "html_url": "https://github.com/dafaust", "followers_url": "https://api.github.com/users/dafaust/followers", "following_url": "https://api.github.com/users/dafaust/following{/other_user}", "gists_url": "https://api.github.com/users/dafaust/gists{/gist_id}", "starred_url": "https://api.github.com/users/dafaust/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dafaust/subscriptions", "organizations_url": "https://api.github.com/users/dafaust/orgs", "repos_url": "https://api.github.com/users/dafaust/repos", "events_url": "https://api.github.com/users/dafaust/events{/privacy}", "received_events_url": "https://api.github.com/users/dafaust/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dafaust", "id": 4460334, "node_id": "MDQ6VXNlcjQ0NjAzMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4460334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dafaust", "html_url": "https://github.com/dafaust", "followers_url": "https://api.github.com/users/dafaust/followers", "following_url": "https://api.github.com/users/dafaust/following{/other_user}", "gists_url": "https://api.github.com/users/dafaust/gists{/gist_id}", "starred_url": "https://api.github.com/users/dafaust/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dafaust/subscriptions", "organizations_url": "https://api.github.com/users/dafaust/orgs", "repos_url": "https://api.github.com/users/dafaust/repos", "events_url": "https://api.github.com/users/dafaust/events{/privacy}", "received_events_url": "https://api.github.com/users/dafaust/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4cdfd4856f6e90376dbe277912cefda51922488", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4cdfd4856f6e90376dbe277912cefda51922488", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4cdfd4856f6e90376dbe277912cefda51922488"}], "stats": {"total": 29, "additions": 28, "deletions": 1}, "files": [{"sha": "31319f7dd0876cab1e8878b8cc89261323db1683", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9996ccb9414c1acaaaecf0803244fc018b5125d/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9996ccb9414c1acaaaecf0803244fc018b5125d/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=d9996ccb9414c1acaaaecf0803244fc018b5125d", "patch": "@@ -8256,6 +8256,7 @@ attributes.\n * Common Type Attributes::\n * ARC Type Attributes::\n * ARM Type Attributes::\n+* BPF Type Attributes::\n * MeP Type Attributes::\n * PowerPC Type Attributes::\n * x86 Type Attributes::\n@@ -8830,6 +8831,17 @@ virtual table for @code{C} is not exported.  (You can use\n @code{__attribute__} instead of @code{__declspec} if you prefer, but\n most Symbian OS code uses @code{__declspec}.)\n \n+@node BPF Type Attributes\n+@subsection BPF Type Attributes\n+\n+@cindex @code{preserve_access_index} type attribute, BPF\n+BPF Compile Once - Run Everywhere (CO-RE) support. When attached to a\n+@code{struct} or @code{union} type definition, indicates that CO-RE\n+relocation information should be generated for any access to a variable\n+of that type. The behavior is equivalent to the programmer manually\n+wrapping every such access with @code{__builtin_preserve_access_index}.\n+\n+\n @node MeP Type Attributes\n @subsection MeP Type Attributes\n \n@@ -15467,6 +15479,10 @@ Load 16-bits from the @code{struct sk_buff} packet data pointed by the register\n Load 32-bits from the @code{struct sk_buff} packet data pointed by the register @code{%r6} and return it.\n @end deftypefn\n \n+@deftypefn {Built-in Function} void * __builtin_preserve_access_index (@var{expr})\n+BPF Compile Once-Run Everywhere (CO-RE) support. Instruct GCC to generate CO-RE relocation records for any accesses to aggregate data structures (struct, union, array types) in @var{expr}. This builtin is otherwise transparent, the return value is whatever @var{expr} evaluates to. It is also overloaded: @var{expr} may be of any type (not necessarily a pointer), the return type is the same. Has no effect if @code{-mco-re} is not in effect (either specified or implied).\n+@end deftypefn\n+\n @node FR-V Built-in Functions\n @subsection FR-V Built-in Functions\n "}, {"sha": "e39dde009ef5d506473b0d20fa02c1d431e00c57", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9996ccb9414c1acaaaecf0803244fc018b5125d/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9996ccb9414c1acaaaecf0803244fc018b5125d/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=d9996ccb9414c1acaaaecf0803244fc018b5125d", "patch": "@@ -904,7 +904,7 @@ Objective-C and Objective-C++ Dialects}.\n \n @emph{eBPF Options}\n @gccoptlist{-mbig-endian -mlittle-endian -mkernel=@var{version}\n--mframe-limit=@var{bytes} -mxbpf}\n+-mframe-limit=@var{bytes} -mxbpf -mco-re -mno-co-re}\n \n @emph{FR30 Options}\n @gccoptlist{-msmall-model  -mno-lsim}\n@@ -22635,6 +22635,17 @@ Generate code for a big-endian target.\n @opindex mlittle-endian\n Generate code for a little-endian target.  This is the default.\n \n+@item -mco-re\n+@opindex mco-re\n+Enable BPF Compile Once - Run Everywhere (CO-RE) support. Requires and\n+is implied by @option{-gbtf}.\n+\n+@item -mno-co-re\n+@opindex mno-co-re\n+Disable BPF Compile Once - Run Everywhere (CO-RE) support. BPF CO-RE\n+support is enabled by default when generating BTF debug information for\n+the BPF target.\n+\n @item -mxbpf\n Generate code for an expanded version of BPF, which relaxes some of\n the restrictions imposed by the BPF architecture:"}]}