{"sha": "abbc8c7b156d75c1f4baad852af5762482203ee1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWJiYzhjN2IxNTZkNzVjMWY0YmFhZDg1MmFmNTc2MjQ4MjIwM2VlMQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2011-03-24T15:15:44Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2011-03-24T15:15:44Z"}, "message": "trans.c (gnat_to_gnu): Remove obsolete case of non-conversion to the nominal result type at the end.\n\n\t* gcc-interface/trans.c (gnat_to_gnu): Remove obsolete case of\n\tnon-conversion to the nominal result type at the end.\n\nFrom-SVN: r171398", "tree": {"sha": "c1c65e774a237e5997724407c49c3b5a2b70bd41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c1c65e774a237e5997724407c49c3b5a2b70bd41"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/abbc8c7b156d75c1f4baad852af5762482203ee1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abbc8c7b156d75c1f4baad852af5762482203ee1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abbc8c7b156d75c1f4baad852af5762482203ee1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abbc8c7b156d75c1f4baad852af5762482203ee1/comments", "author": null, "committer": null, "parents": [{"sha": "61be2a1ce3ab4b79b7238dcd92af3ec63de9dedb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61be2a1ce3ab4b79b7238dcd92af3ec63de9dedb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61be2a1ce3ab4b79b7238dcd92af3ec63de9dedb"}], "stats": {"total": 71, "additions": 56, "deletions": 15}, "files": [{"sha": "e586919fd0cd1f975e4494dc301b0999c17d5a9e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abbc8c7b156d75c1f4baad852af5762482203ee1/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abbc8c7b156d75c1f4baad852af5762482203ee1/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=abbc8c7b156d75c1f4baad852af5762482203ee1", "patch": "@@ -1,3 +1,8 @@\n+2011-03-24  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.c (gnat_to_gnu): Remove obsolete case of\n+\tnon-conversion to the nominal result type at the end.\n+\n 2011-03-23  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/trans.c (create_temporary): New function taken from..."}, {"sha": "ab0725b75b55f2560ad0ba6569fb32ce32275610", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abbc8c7b156d75c1f4baad852af5762482203ee1/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abbc8c7b156d75c1f4baad852af5762482203ee1/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=abbc8c7b156d75c1f4baad852af5762482203ee1", "patch": "@@ -5879,15 +5879,11 @@ gnat_to_gnu (Node_Id gnat_node)\n \t  since we need to ignore those conversions (for 'Valid).\n \n        2. If we have a label (which doesn't have any well-defined type), a\n-\t  field or an error, return the result almost unmodified.  Also don't\n-\t  do the conversion if the result type involves a PLACEHOLDER_EXPR in\n-\t  its size since those are the cases where the front end may have the\n-\t  type wrong due to \"instantiating\" the unconstrained record with\n-\t  discriminant values.  Similarly, if the two types are record types\n-\t  with the same name don't convert.  This will be the case when we are\n-\t  converting from a packable version of a type to its original type and\n-\t  we need those conversions to be NOPs in order for assignments into\n-\t  these types to work properly.\n+\t  field or an error, return the result almost unmodified.  Similarly,\n+\t  if the two types are record types with the same name, don't convert.\n+\t  This will be the case when we are converting from a packable version\n+\t  of a type to its original type and we need those conversions to be\n+\t  NOPs in order for assignments into these types to work properly.\n \n        3. If the type is void or if we have no result, return error_mark_node\n \t  to show we have no result.\n@@ -5933,12 +5929,8 @@ gnat_to_gnu (Node_Id gnat_node)\n   else if (TREE_CODE (gnu_result) == LABEL_DECL\n \t   || TREE_CODE (gnu_result) == FIELD_DECL\n \t   || TREE_CODE (gnu_result) == ERROR_MARK\n-\t   || (TYPE_SIZE (gnu_result_type)\n-\t       && TREE_CODE (TYPE_SIZE (gnu_result_type)) != INTEGER_CST\n-\t       && TREE_CODE (gnu_result) != INDIRECT_REF\n-\t       && CONTAINS_PLACEHOLDER_P (TYPE_SIZE (gnu_result_type)))\n-\t   || ((TYPE_NAME (gnu_result_type)\n-\t\t== TYPE_NAME (TREE_TYPE (gnu_result)))\n+\t   || (TYPE_NAME (gnu_result_type)\n+\t       == TYPE_NAME (TREE_TYPE (gnu_result))\n \t       && TREE_CODE (gnu_result_type) == RECORD_TYPE\n \t       && TREE_CODE (TREE_TYPE (gnu_result)) == RECORD_TYPE))\n     {"}, {"sha": "14efc3fa1dec8d95261ff2a88a86f33ad0366fb7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abbc8c7b156d75c1f4baad852af5762482203ee1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abbc8c7b156d75c1f4baad852af5762482203ee1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=abbc8c7b156d75c1f4baad852af5762482203ee1", "patch": "@@ -1,3 +1,7 @@\n+2011-03-24  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/derived_type2.adb: New test.\n+\n 2011-03-24  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/48271"}, {"sha": "607eb0b22c4624aed5008e28212f5f81315bfbcd", "filename": "gcc/testsuite/gnat.dg/derived_type2.adb", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abbc8c7b156d75c1f4baad852af5762482203ee1/gcc%2Ftestsuite%2Fgnat.dg%2Fderived_type2.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abbc8c7b156d75c1f4baad852af5762482203ee1/gcc%2Ftestsuite%2Fgnat.dg%2Fderived_type2.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fderived_type2.adb?ref=abbc8c7b156d75c1f4baad852af5762482203ee1", "patch": "@@ -0,0 +1,40 @@\n+-- { dg-do run }\n+-- { dg-options \"-gnatws\" }\n+\n+procedure Derived_Type2 is\n+\n+   package Pkg is\n+\n+      type Parent (B : Boolean := True) is record\n+         case B is\n+            when True => S : String (1 .. 5);\n+            when False => F : Float;\n+         end case;\n+      end record;\n+\n+      function Create (X : Parent) return Parent;\n+\n+   end Pkg;\n+\n+   package body Pkg is\n+\n+      function Create (X : Parent) return Parent is\n+      begin\n+         return (True, \"12345\");\n+      end;\n+\n+   end Pkg;\n+\n+   use Pkg;\n+\n+   type T is new Parent (True);\n+\n+   X : T;\n+\n+begin\n+\n+   if Create (X).B /= True then\n+      raise Program_Error;\n+   end if;\n+\n+end;"}]}