{"sha": "3f04e3782536ad2f9cfbb8cfe6630e9f9dd8af4c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2YwNGUzNzgyNTM2YWQyZjljZmJiOGNmZTY2MzBlOWY5ZGQ4YWY0Yw==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2021-06-11T14:31:29Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2021-06-13T12:15:24Z"}, "message": "x86: Replace ix86_red_zone_size with ix86_red_zone_used\n\nAdd red_zone_used to machine_function to track if red zone is used.\nWhen expanding function prologue, set red_zone_used to true if red\nzone is used.\n\ngcc/\n\n\tPR target/101023\n\t* config/i386/i386.c (ix86_expand_prologue): Set red_zone_used\n\tto true if red zone is used.\n\t(ix86_output_indirect_jmp): Replace ix86_red_zone_size with\n\tix86_red_zone_used.\n\t* config/i386/i386.h (machine_function): Add red_zone_used.\n\t(ix86_red_zone_size): Removed.\n\t(ix86_red_zone_used): New.\n\t* config/i386/i386.md (peephole2 patterns): Replace\n\tix86_red_zone_size with ix86_red_zone_used.\n\ngcc/testsuite/\n\n\tPR target/101023\n\t* g++.target/i386/pr101023a.C: New test.\n\t* g++.target/i386/pr101023b.C: Likewise.", "tree": {"sha": "ad60bbdf7c05083665a4cc64056fe429a330863b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad60bbdf7c05083665a4cc64056fe429a330863b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f04e3782536ad2f9cfbb8cfe6630e9f9dd8af4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f04e3782536ad2f9cfbb8cfe6630e9f9dd8af4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f04e3782536ad2f9cfbb8cfe6630e9f9dd8af4c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f04e3782536ad2f9cfbb8cfe6630e9f9dd8af4c/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d554f43c98eb07f222afef5e90b5582d65519f7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d554f43c98eb07f222afef5e90b5582d65519f7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d554f43c98eb07f222afef5e90b5582d65519f7e"}], "stats": {"total": 87, "additions": 81, "deletions": 6}, "files": [{"sha": "a61255857ff112b9bbd5607a42ef9ed5204f0038", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f04e3782536ad2f9cfbb8cfe6630e9f9dd8af4c/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f04e3782536ad2f9cfbb8cfe6630e9f9dd8af4c/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=3f04e3782536ad2f9cfbb8cfe6630e9f9dd8af4c", "patch": "@@ -8401,10 +8401,14 @@ ix86_expand_prologue (void)\n \t\t   || frame.stack_pointer_offset < CHECK_STACK_LIMIT))\n \t{\n \t  ix86_emit_save_regs_using_mov (frame.reg_save_offset);\n+\t  cfun->machine->red_zone_used = true;\n \t  int_registers_saved = true;\n \t}\n     }\n \n+  if (frame.red_zone_size != 0)\n+    cfun->machine->red_zone_used = true;\n+\n   if (stack_realign_fp)\n     {\n       int align_bytes = crtl->stack_alignment_needed / BITS_PER_UNIT;\n@@ -15915,7 +15919,7 @@ ix86_output_indirect_jmp (rtx call_op)\n     {\n       /* We can't have red-zone since \"call\" in the indirect thunk\n          pushes the return address onto stack, destroying red-zone.  */\n-      if (ix86_red_zone_size != 0)\n+      if (ix86_red_zone_used)\n \tgcc_unreachable ();\n \n       ix86_output_indirect_branch (call_op, \"%0\", true);"}, {"sha": "182b3275991c2dbf638dcee1c2a16b97dddc9b03", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f04e3782536ad2f9cfbb8cfe6630e9f9dd8af4c/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f04e3782536ad2f9cfbb8cfe6630e9f9dd8af4c/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=3f04e3782536ad2f9cfbb8cfe6630e9f9dd8af4c", "patch": "@@ -2663,6 +2663,9 @@ struct GTY(()) machine_function {\n      invalid calls.  */\n   BOOL_BITFIELD silent_p : 1;\n \n+  /* True if red zone is used.  */\n+  BOOL_BITFIELD red_zone_used : 1;\n+\n   /* The largest alignment, in bytes, of stack slot actually used.  */\n   unsigned int max_used_stack_alignment;\n \n@@ -2693,7 +2696,7 @@ extern GTY(()) tree ms_va_list_type_node;\n #define ix86_current_function_calls_tls_descriptor \\\n   (ix86_tls_descriptor_calls_expanded_in_cfun && df_regs_ever_live_p (SP_REG))\n #define ix86_static_chain_on_stack (cfun->machine->static_chain_on_stack)\n-#define ix86_red_zone_size (cfun->machine->frame.red_zone_size)\n+#define ix86_red_zone_used (cfun->machine->red_zone_used)\n \n /* Control behavior of x86_file_start.  */\n #define X86_FILE_START_VERSION_DIRECTIVE false"}, {"sha": "6e4abf32e7cb528f9aaa9b13808c083f80f604ef", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f04e3782536ad2f9cfbb8cfe6630e9f9dd8af4c/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f04e3782536ad2f9cfbb8cfe6630e9f9dd8af4c/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=3f04e3782536ad2f9cfbb8cfe6630e9f9dd8af4c", "patch": "@@ -20491,7 +20491,7 @@\n \t      (clobber (mem:BLK (scratch)))])]\n   \"(TARGET_SINGLE_PUSH || optimize_insn_for_size_p ())\n    && INTVAL (operands[0]) == -GET_MODE_SIZE (word_mode)\n-   && ix86_red_zone_size == 0\"\n+   && !ix86_red_zone_used\"\n   [(clobber (match_dup 1))\n    (parallel [(set (mem:W (pre_dec:P (reg:P SP_REG))) (match_dup 1))\n \t      (clobber (mem:BLK (scratch)))])])\n@@ -20505,7 +20505,7 @@\n \t      (clobber (mem:BLK (scratch)))])]\n   \"(TARGET_DOUBLE_PUSH || optimize_insn_for_size_p ())\n    && INTVAL (operands[0]) == -2*GET_MODE_SIZE (word_mode)\n-   && ix86_red_zone_size == 0\"\n+   && !ix86_red_zone_used\"\n   [(clobber (match_dup 1))\n    (set (mem:W (pre_dec:P (reg:P SP_REG))) (match_dup 1))\n    (parallel [(set (mem:W (pre_dec:P (reg:P SP_REG))) (match_dup 1))\n@@ -20520,7 +20520,7 @@\n \t      (clobber (reg:CC FLAGS_REG))])]\n   \"(TARGET_SINGLE_PUSH || optimize_insn_for_size_p ())\n    && INTVAL (operands[0]) == -GET_MODE_SIZE (word_mode)\n-   && ix86_red_zone_size == 0\"\n+   && !ix86_red_zone_used\"\n   [(clobber (match_dup 1))\n    (set (mem:W (pre_dec:P (reg:P SP_REG))) (match_dup 1))])\n \n@@ -20532,7 +20532,7 @@\n \t      (clobber (reg:CC FLAGS_REG))])]\n   \"(TARGET_DOUBLE_PUSH || optimize_insn_for_size_p ())\n    && INTVAL (operands[0]) == -2*GET_MODE_SIZE (word_mode)\n-   && ix86_red_zone_size == 0\"\n+   && !ix86_red_zone_used\"\n   [(clobber (match_dup 1))\n    (set (mem:W (pre_dec:P (reg:P SP_REG))) (match_dup 1))\n    (set (mem:W (pre_dec:P (reg:P SP_REG))) (match_dup 1))])"}, {"sha": "04fb8b0d0d5d94d440e2ca17e71c7afc663846c5", "filename": "gcc/testsuite/g++.target/i386/pr101023a.C", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f04e3782536ad2f9cfbb8cfe6630e9f9dd8af4c/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr101023a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f04e3782536ad2f9cfbb8cfe6630e9f9dd8af4c/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr101023a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr101023a.C?ref=3f04e3782536ad2f9cfbb8cfe6630e9f9dd8af4c", "patch": "@@ -0,0 +1,63 @@\n+// PR target/101023\n+// { dg-do run { target { ! ia32 } } }\n+// { dg-options \"-O2 -mtune=opteron -mstackrealign --param=hot-bb-frequency-fraction=1\" }\n+\n+struct S {\n+  __attribute__((noipa)) int m1 ();\n+  __attribute__((noipa)) void m2 ();\n+};\n+struct T {\n+  __attribute__((noipa)) virtual S m3 ();\n+};\n+struct U : T {\n+  int u;\n+  __attribute__((noipa)) U (int);\n+};\n+int *a;\n+S *b;\n+int c;\n+\n+int\n+S::m1 ()\n+{\n+  return 0;\n+}\n+\n+void\n+S::m2 ()\n+{\n+}\n+\n+S\n+T::m3 ()\n+{\n+  return S ();\n+}\n+\n+U::U (int) : u (4)\n+{\n+}\n+\n+__attribute__((noipa)) int\n+foo ()\n+{\n+  if (a)\n+    return 0;\n+  U d(c);\n+  S *e = b;\n+  e->m2 ();\n+  return e->m1();\n+}\n+\n+int\n+main ()\n+{\n+  register int r12 __asm (\"r12\") = 1;\n+  register int rax __asm (\"rax\") = 2;\n+  asm volatile (\"\" : \"+r\" (r12), \"+r\" (rax));\n+  foo ();\n+  asm volatile (\"\" : \"+r\" (r12));\n+  if (r12 != 1)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "b19791c8ffb22b9eb8e037bcea6dc821b8955046", "filename": "gcc/testsuite/g++.target/i386/pr101023b.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f04e3782536ad2f9cfbb8cfe6630e9f9dd8af4c/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr101023b.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f04e3782536ad2f9cfbb8cfe6630e9f9dd8af4c/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr101023b.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr101023b.C?ref=3f04e3782536ad2f9cfbb8cfe6630e9f9dd8af4c", "patch": "@@ -0,0 +1,5 @@\n+// PR target/101023\n+// { dg-do run { target { ! ia32 } } }\n+// { dg-options \"-O2 -mno-red-zone -mtune=opteron -mstackrealign --param=hot-bb-frequency-fraction=1\" }\n+\n+#include \"pr101023a.C\""}]}