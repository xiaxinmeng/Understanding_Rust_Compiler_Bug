{"sha": "6b333269be81396c4ed6b700bf8bd3e0adeb50dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmIzMzMyNjliZTgxMzk2YzRlZDZiNzAwYmY4YmQzZTBhZGViNTBkYw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2015-09-22T15:34:49Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2015-09-22T15:34:49Z"}, "message": "c.opt (Wmultiple-inheritance, [...]): New C++ warnings.\n\n\tc-family/\n\t* c.opt (Wmultiple-inheritance, Wvirtual-inheritance, Wtemplates,\n\tWnamespaces): New C++ warnings.\n\n\tcp/\n\t* decl.c (xref_basetypes): Check virtual and/or multiple\n\tinheritance warning.\n\t* parser.c (cp_parser_namespace_definition): Check namespaces\n\twarning.\n\t* pt.c (push_template_decl_real): Check templates warning.\n\n\t* doc/invoke.texi  (-Wmultiple-inheritance, -Wvirtual-inheritance,\n\t-Wtemplates, -Wnamespaces): Document.\n\n\ttestsuite/\n\t* g++.dg/diagostic/disable.C: New.\n\nFrom-SVN: r228019", "tree": {"sha": "bcb65e277ee9e4c184bb3b1253a5dc833a787791", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bcb65e277ee9e4c184bb3b1253a5dc833a787791"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b333269be81396c4ed6b700bf8bd3e0adeb50dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b333269be81396c4ed6b700bf8bd3e0adeb50dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b333269be81396c4ed6b700bf8bd3e0adeb50dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b333269be81396c4ed6b700bf8bd3e0adeb50dc/comments", "author": null, "committer": null, "parents": [{"sha": "a75f15742ab04d48fb599c9b6523ffbe8f5d837c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a75f15742ab04d48fb599c9b6523ffbe8f5d837c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a75f15742ab04d48fb599c9b6523ffbe8f5d837c"}], "stats": {"total": 117, "additions": 113, "deletions": 4}, "files": [{"sha": "cf3152735b73376dea20e100407b5530e7cf887b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b333269be81396c4ed6b700bf8bd3e0adeb50dc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b333269be81396c4ed6b700bf8bd3e0adeb50dc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6b333269be81396c4ed6b700bf8bd3e0adeb50dc", "patch": "@@ -1,3 +1,8 @@\n+2015-09-22  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* doc/invoke.texi  (-Wmultiple-inheritance, -Wvirtual-inheritance,\n+\t-Wtemplates, -Wnamespaces): Document.\n+\n 2015-09-22  Tom de Vries  <tom@codesourcery.com>\n \n \tPR tree-optimization/67671"}, {"sha": "381cb9230fc2c15d9050aaef3c0fddedf505b7b5", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b333269be81396c4ed6b700bf8bd3e0adeb50dc/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b333269be81396c4ed6b700bf8bd3e0adeb50dc/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=6b333269be81396c4ed6b700bf8bd3e0adeb50dc", "patch": "@@ -1,3 +1,8 @@\n+2015-09-22  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* c.opt (Wmultiple-inheritance, Wvirtual-inheritance, Wtemplates,\n+\tWnamespaces): New C++ warnings.\n+\n 2015-09-22  Jason Merrill  <jason@redhat.com>\n \n \t* c-common.h (abi_compat_version_crosses): New."}, {"sha": "3d7d5029c080e2fb82d73d5baa7eb5f5d448e2c9", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b333269be81396c4ed6b700bf8bd3e0adeb50dc/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b333269be81396c4ed6b700bf8bd3e0adeb50dc/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=6b333269be81396c4ed6b700bf8bd3e0adeb50dc", "patch": "@@ -573,6 +573,14 @@ Wmissing-field-initializers\n C ObjC C++ ObjC++ Var(warn_missing_field_initializers) Warning EnabledBy(Wextra)\n Warn about missing fields in struct initializers\n \n+Wmultiple-inheritance\n+C++ ObjC++ Var(warn_multiple_inheritance) Warning\n+Warn on direct multiple inheritance\n+\n+Wnamespaces\n+C++ ObjC++ Var(warn_namespaces) Warning\n+Warn on namespace definition\n+\n Wsized-deallocation\n C++ ObjC++ Var(warn_sized_deallocation) Warning EnabledBy(Wextra)\n Warn about missing sized deallocation functions\n@@ -610,6 +618,10 @@ Wswitch-bool\n C ObjC C++ ObjC++ Var(warn_switch_bool) Warning Init(1)\n Warn about switches with boolean controlling expression\n \n+Wtemplates\n+C++ ObjC++ Var(warn_templates) Warning\n+Warn on primary template declaration\n+\n Wmissing-format-attribute\n C ObjC C++ ObjC++ Alias(Wsuggest-attribute=format)\n ;\n@@ -936,6 +948,10 @@ Wvolatile-register-var\n C ObjC C++ ObjC++ Var(warn_volatile_register_var) Warning LangEnabledBy(C ObjC C++ ObjC++,Wall)\n Warn when a register variable is declared volatile\n \n+Wvirtual-inheritance\n+C++ ObjC++ Var(warn_virtual_inheritance) Warning\n+Warn on direct virtual inheritance\n+\n Wvirtual-move-assign\n C++ ObjC++ Var(warn_virtual_move_assign) Warning Init(1)\n Warn if a virtual base has a non-trivial move assignment operator"}, {"sha": "49f131e42e6631d659368b5df74756e2dd0efa82", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b333269be81396c4ed6b700bf8bd3e0adeb50dc/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b333269be81396c4ed6b700bf8bd3e0adeb50dc/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6b333269be81396c4ed6b700bf8bd3e0adeb50dc", "patch": "@@ -1,3 +1,11 @@\n+2015-09-22  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* decl.c (xref_basetypes): Check virtual and/or multiple\n+\tinheritance warning.\n+\t* parser.c (cp_parser_namespace_definition): Check namespaces\n+\twarning.\n+\t* pt.c (push_template_decl_real): Check templates warning.\n+\n 2015-09-22  Jason Merrill  <jason@redhat.com>\n \n \t* mangle.c (abi_warn_or_compat_version_crosses): New."}, {"sha": "2be7d2f977f169c471d27abb909d20ff7517b56e", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b333269be81396c4ed6b700bf8bd3e0adeb50dc/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b333269be81396c4ed6b700bf8bd3e0adeb50dc/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=6b333269be81396c4ed6b700bf8bd3e0adeb50dc", "patch": "@@ -12729,6 +12729,7 @@ xref_basetypes (tree ref, tree base_list)\n   tree binfo, base_binfo;\n   unsigned max_vbases = 0; /* Maximum direct & indirect virtual bases.  */\n   unsigned max_bases = 0;  /* Maximum direct bases.  */\n+  unsigned max_dvbases = 0; /* Maximum direct virtual bases.  */\n   int i;\n   tree default_access;\n   tree igo_prev; /* Track Inheritance Graph Order.  */\n@@ -12766,12 +12767,13 @@ xref_basetypes (tree ref, tree base_list)\n \t{\n \t  max_bases++;\n \t  if (TREE_TYPE (*basep))\n-\t    max_vbases++;\n+\t    max_dvbases++;\n \t  if (CLASS_TYPE_P (basetype))\n \t    max_vbases += vec_safe_length (CLASSTYPE_VBASECLASSES (basetype));\n \t  basep = &TREE_CHAIN (*basep);\n \t}\n     }\n+  max_vbases += max_dvbases;\n \n   TYPE_MARKED_P (ref) = 1;\n \n@@ -12814,6 +12816,9 @@ xref_basetypes (tree ref, tree base_list)\n \t  error (\"Java class %qT cannot have multiple bases\", ref);\n           return false;\n         }\n+      else\n+\twarning (OPT_Wmultiple_inheritance,\n+\t\t \"%qT defined with multiple direct bases\", ref);\n     }\n \n   if (max_vbases)\n@@ -12825,6 +12830,9 @@ xref_basetypes (tree ref, tree base_list)\n \t  error (\"Java class %qT cannot have virtual bases\", ref);\n           return false;\n         }\n+      else if (max_dvbases)\n+\twarning (OPT_Wvirtual_inheritance,\n+\t\t \"%qT defined with direct virtual base\", ref);\n     }\n \n   for (igo_prev = binfo; base_list; base_list = TREE_CHAIN (base_list))"}, {"sha": "cc920926eaed5b193781ca036737ce3f5c8d22b9", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b333269be81396c4ed6b700bf8bd3e0adeb50dc/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b333269be81396c4ed6b700bf8bd3e0adeb50dc/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=6b333269be81396c4ed6b700bf8bd3e0adeb50dc", "patch": "@@ -17043,6 +17043,8 @@ cp_parser_namespace_definition (cp_parser* parser)\n \n   has_visibility = handle_namespace_attrs (current_namespace, attribs);\n \n+  warning  (OPT_Wnamespaces, \"namepace %qD entered\", current_namespace);\n+\n   /* Parse the body of the namespace.  */\n   cp_parser_namespace_body (parser);\n "}, {"sha": "db947cc632e382424957db96fc7cb966af658440", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b333269be81396c4ed6b700bf8bd3e0adeb50dc/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b333269be81396c4ed6b700bf8bd3e0adeb50dc/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=6b333269be81396c4ed6b700bf8bd3e0adeb50dc", "patch": "@@ -5088,6 +5088,8 @@ push_template_decl_real (tree decl, bool is_friend)\n \n   if (is_primary)\n     {\n+      warning (OPT_Wtemplates, \"template %qD declared\", decl);\n+      \n       if (DECL_CLASS_SCOPE_P (decl))\n \tmember_template_p = true;\n       if (TREE_CODE (decl) == TYPE_DECL"}, {"sha": "09c58ee2bb4b55a7dd58f2efcd0dfe94abb69269", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 35, "deletions": 3, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b333269be81396c4ed6b700bf8bd3e0adeb50dc/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b333269be81396c4ed6b700bf8bd3e0adeb50dc/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=6b333269be81396c4ed6b700bf8bd3e0adeb50dc", "patch": "@@ -198,12 +198,13 @@ in the following sections.\n -fvisibility-ms-compat @gol\n -fext-numeric-literals @gol\n -Wabi=@var{n}  -Wabi-tag  -Wconversion-null  -Wctor-dtor-privacy @gol\n--Wdelete-non-virtual-dtor -Wliteral-suffix -Wnarrowing @gol\n+-Wdelete-non-virtual-dtor -Wliteral-suffix -Wmultiple-inheritance @gol\n+-Wnamespaces -Wnarrowing @gol\n -Wnoexcept -Wnon-virtual-dtor  -Wreorder @gol\n--Weffc++  -Wstrict-null-sentinel @gol\n+-Weffc++  -Wstrict-null-sentinel -Wtemplates @gol\n -Wno-non-template-friend  -Wold-style-cast @gol\n -Woverloaded-virtual  -Wno-pmf-conversions @gol\n--Wsign-promo}\n+-Wsign-promo -Wvirtual-inheritance}\n \n @item Objective-C and Objective-C++ Language Options\n @xref{Objective-C and Objective-C++ Dialect Options,,Options Controlling\n@@ -2934,6 +2935,37 @@ enumerated type to a signed type, over a conversion to an unsigned type of\n the same size.  Previous versions of G++ tried to preserve\n unsignedness, but the standard mandates the current behavior.\n \n+@item -Wtemplates @r{(C++ and Objective-C++ only)}\n+@opindex Wtemplates\n+Warn when a primary template declaration is encountered.  Some coding\n+rules disallow templates, and this may be used to enforce that rule.\n+The warning is inactive inside a system header file, such as the STL, so\n+one can still use the STL.  One may also instantiate or specialize\n+templates.\n+\n+@item -Wmultiple-inheritance @r{(C++ and Objective-C++ only)}\n+@opindex Wmultiple-inheritance\n+Warn when a class is defined with multiple direct base classes.  Some\n+coding rules disallow multiple inheritance, and this may be used to\n+enforce that rule.  The warning is inactive inside a system header file,\n+such as the STL, so one can still use the STL.  One may also define\n+classes that indirectly use multiple inheritance.\n+\n+@item -Wvirtual-inheritance\n+@opindex Wvirtual-inheritance\n+Warn when a class is defined with a virtual direct base classe.  Some\n+coding rules disallow multiple inheritance, and this may be used to\n+enforce that rule.  The warning is inactive inside a system header file,\n+such as the STL, so one can still use the STL.  One may also define\n+classes that indirectly use virtual inheritance.\n+\n+@item -Wnamespaces\n+@opindex Wnamespaces\n+Warn when a namespace definition is opened.  Some coding rules disallow\n+namespaces, and this may be used to enforce that rule.  The warning is\n+inactive inside a system header file, such as the STL, so one can still\n+use the STL.  One may also use using directives and qualified names.\n+\n @item -Wno-terminate @r{(C++ and Objective-C++ only)}\n @opindex Wterminate\n @opindex Wno-terminate"}, {"sha": "68eb33e37da29873310321c5af91a990f4c800cb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b333269be81396c4ed6b700bf8bd3e0adeb50dc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b333269be81396c4ed6b700bf8bd3e0adeb50dc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6b333269be81396c4ed6b700bf8bd3e0adeb50dc", "patch": "@@ -1,3 +1,7 @@\n+2015-09-22  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* g++.dg/diagostic/disable.C: New.\n+\n 2015-09-22  Tom de Vries  <tom@codesourcery.com>\n \n \tPR tree-optimization/67671"}, {"sha": "a69033d98a83f0125dea62cf2cd578763e050b0c", "filename": "gcc/testsuite/g++.dg/diagnostic/disable.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b333269be81396c4ed6b700bf8bd3e0adeb50dc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fdisable.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b333269be81396c4ed6b700bf8bd3e0adeb50dc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fdisable.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fdisable.C?ref=6b333269be81396c4ed6b700bf8bd3e0adeb50dc", "patch": "@@ -0,0 +1,27 @@\n+// { dg-options \"-Wtemplates -Wmultiple-inheritance -Wvirtual-inheritance -Wnamespaces\" }\n+\n+#include <iostream>\n+#include <algorithm>\n+\n+namespace foo { } // { dg-warning \"namepace\" }\n+\n+template <typename X> X Foo (); // { dg-warning \"template\" }\n+\n+struct B1 {};\n+struct B2 {};\n+struct V {};\n+\n+struct D :  B1, B2 {}; //  { dg-warning \"multiple\" }\n+\n+struct E : virtual V {};  // { dg-warning \"virtual\" }\n+\n+struct F1 : E {};\n+\n+struct F2 : D {};\n+\n+void Baz (int a, int b)\n+{\n+  std::swap (a, b);\n+}\n+\n+"}]}