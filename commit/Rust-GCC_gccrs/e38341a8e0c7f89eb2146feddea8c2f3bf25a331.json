{"sha": "e38341a8e0c7f89eb2146feddea8c2f3bf25a331", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTM4MzQxYThlMGM3Zjg5ZWIyMTQ2ZmVkZGVhOGMyZjNiZjI1YTMzMQ==", "commit": {"author": {"name": "Sylvia Taylor", "email": "sylvia.taylor@arm.com", "date": "2019-07-18T15:42:13Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2019-07-18T15:42:13Z"}, "message": "[patch1/2][arm][PR90317]: fix sha1 patterns\n\nThis patch fixes:\n\n1) Ice message thrown when using the crypto_sha1h intrinsic due to\nincompatible mode used for zero_extend. Removed zero extend as it is\nnot a good choice for vector modes and using an equivalent single\nmode like TI (128bits) instead of V4SI produces extra instructions\nmaking it inefficient.\n\nThis affects gcc version 8 and above.\n\n2) Incorrect combine optimizations made due to vec_select usage\nin the sha1 patterns on arm. The patterns should only combine\na vec select within a sha1h<op> instruction when the lane is 0.\n\nThis affects gcc version 5 and above.\n\n- Fixed by explicitly declaring the valid const int for such\noptimizations. For cases when the lane is not 0, the vector\nlane selection now occurs in a e.g. vmov instruction prior\nto sha1h<op>.\n\n- Updated the sha1h testcases on arm to check for additional\ncases with custom vector lane selection.\n\nThe intrinsic functions for the sha1 patterns have also been\nsimplified which seems to eliminate extra vmovs like:\n- vmov.i32 q8, #0.\n\n\n2019-07-18  Sylvia Taylor  <sylvia.taylor@arm.com>\n\n        PR target/90317\n        * config/arm/arm_neon.h\n        (vsha1h_u32): Refactor.\n        (vsha1cq_u32): Likewise.\n        (vsha1pq_u32): Likewise.\n        (vsha1mq_u32): Likewise.\n        * config/arm/crypto.md:\n        (crypto_sha1h): Remove zero extend, correct vec select.\n        (crypto_sha1c): Correct vec select.\n        (crypto_sha1m): Likewise.\n        (crypto_sha1p): Likewise.\n\n        * gcc.target/arm/crypto-vsha1cq_u32.c (foo): Change return type to\n        uint32_t.\n        (GET_LANE, TEST_SHA1C_VEC_SELECT): New.\n        * gcc.target/arm/crypto-vsha1h_u32.c (foo): Change return type to\n        uint32_t.\n        (GET_LANE, TEST_SHA1H_VEC_SELECT): New.\n        * gcc.target/arm/crypto-vsha1mq_u32.c (foo): Change return type to\n        uint32_t.\n        (GET_LANE, TEST_SHA1M_VEC_SELECT): New.\n        * gcc.target/arm/crypto-vsha1pq_u32.c (foo): Change return type to\n        uint32_t.\n        (GET_LANE, TEST_SHA1P_VEC_SELECT): New.\n\nFrom-SVN: r273574", "tree": {"sha": "a586be544218866de4a61d166b629597a7a1c2c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a586be544218866de4a61d166b629597a7a1c2c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e38341a8e0c7f89eb2146feddea8c2f3bf25a331", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e38341a8e0c7f89eb2146feddea8c2f3bf25a331", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e38341a8e0c7f89eb2146feddea8c2f3bf25a331", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e38341a8e0c7f89eb2146feddea8c2f3bf25a331/comments", "author": null, "committer": null, "parents": [{"sha": "979526c9ce7bb79315f0f91fde0668a5ad8536df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/979526c9ce7bb79315f0f91fde0668a5ad8536df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/979526c9ce7bb79315f0f91fde0668a5ad8536df"}], "stats": {"total": 165, "additions": 133, "deletions": 32}, "files": [{"sha": "668dc40b7fab2176f14288ff3271f48b1e14acf3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e38341a8e0c7f89eb2146feddea8c2f3bf25a331/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e38341a8e0c7f89eb2146feddea8c2f3bf25a331/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e38341a8e0c7f89eb2146feddea8c2f3bf25a331", "patch": "@@ -1,3 +1,17 @@\n+2019-07-18  Sylvia Taylor  <sylvia.taylor@arm.com>\n+\n+        PR target/90317\n+        * config/arm/arm_neon.h\n+        (vsha1h_u32): Refactor.\n+        (vsha1cq_u32): Likewise.\n+        (vsha1pq_u32): Likewise.\n+        (vsha1mq_u32): Likewise.\n+        * config/arm/crypto.md:\n+        (crypto_sha1h): Remove zero extend, correct vec select.\n+        (crypto_sha1c): Correct vec select.\n+        (crypto_sha1m): Likewise.\n+        (crypto_sha1p): Likewise.\n+\n 2019-07-18  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* config/arm/predicates.md (arm_borrow_operation): New predicate."}, {"sha": "1f200d491d1de3993bc3a682d586da137958ff6b", "filename": "gcc/config/arm/arm_neon.h", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e38341a8e0c7f89eb2146feddea8c2f3bf25a331/gcc%2Fconfig%2Farm%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e38341a8e0c7f89eb2146feddea8c2f3bf25a331/gcc%2Fconfig%2Farm%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_neon.h?ref=e38341a8e0c7f89eb2146feddea8c2f3bf25a331", "patch": "@@ -16938,37 +16938,32 @@ __extension__ extern __inline uint32_t\n __attribute__  ((__always_inline__, __gnu_inline__, __artificial__))\n vsha1h_u32 (uint32_t __hash_e)\n {\n-  uint32x4_t __t = vdupq_n_u32 (0);\n-  __t = vsetq_lane_u32 (__hash_e, __t, 0);\n-  __t = __builtin_arm_crypto_sha1h (__t);\n-  return vgetq_lane_u32 (__t, 0);\n+  return vgetq_lane_u32 (__builtin_arm_crypto_sha1h (vdupq_n_u32 (__hash_e)),\n+\t\t\t 0);\n }\n \n __extension__ extern __inline uint32x4_t\n __attribute__  ((__always_inline__, __gnu_inline__, __artificial__))\n vsha1cq_u32 (uint32x4_t __hash_abcd, uint32_t __hash_e, uint32x4_t __wk)\n {\n-  uint32x4_t __t = vdupq_n_u32 (0);\n-  __t = vsetq_lane_u32 (__hash_e, __t, 0);\n-  return __builtin_arm_crypto_sha1c (__hash_abcd, __t, __wk);\n+  return __builtin_arm_crypto_sha1c (__hash_abcd, vdupq_n_u32 (__hash_e),\n+\t\t\t\t     __wk);\n }\n \n __extension__ extern __inline uint32x4_t\n __attribute__  ((__always_inline__, __gnu_inline__, __artificial__))\n vsha1pq_u32 (uint32x4_t __hash_abcd, uint32_t __hash_e, uint32x4_t __wk)\n {\n-  uint32x4_t __t = vdupq_n_u32 (0);\n-  __t = vsetq_lane_u32 (__hash_e, __t, 0);\n-  return __builtin_arm_crypto_sha1p (__hash_abcd, __t, __wk);\n+  return __builtin_arm_crypto_sha1p (__hash_abcd, vdupq_n_u32 (__hash_e),\n+\t\t\t\t     __wk);\n }\n \n __extension__ extern __inline uint32x4_t\n __attribute__  ((__always_inline__, __gnu_inline__, __artificial__))\n vsha1mq_u32 (uint32x4_t __hash_abcd, uint32_t __hash_e, uint32x4_t __wk)\n {\n-  uint32x4_t __t = vdupq_n_u32 (0);\n-  __t = vsetq_lane_u32 (__hash_e, __t, 0);\n-  return __builtin_arm_crypto_sha1m (__hash_abcd, __t, __wk);\n+  return __builtin_arm_crypto_sha1m (__hash_abcd,  vdupq_n_u32 (__hash_e),\n+\t\t\t\t     __wk);\n }\n \n __extension__ extern __inline uint32x4_t"}, {"sha": "115c515ac46965892556cce127df56cccf047b2c", "filename": "gcc/config/arm/crypto.md", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e38341a8e0c7f89eb2146feddea8c2f3bf25a331/gcc%2Fconfig%2Farm%2Fcrypto.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e38341a8e0c7f89eb2146feddea8c2f3bf25a331/gcc%2Fconfig%2Farm%2Fcrypto.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fcrypto.md?ref=e38341a8e0c7f89eb2146feddea8c2f3bf25a331", "patch": "@@ -105,14 +105,18 @@\n   [(set_attr \"type\" \"<crypto_type>\")]\n )\n \n+/* The vec_select operation always selects index 0 from the lower V2SI subreg\n+   of the V4SI, adjusted for endianness. Required due to neon_vget_lane and\n+   neon_set_lane that change the element ordering in memory for big-endian.  */\n+\n (define_insn \"crypto_sha1h\"\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=w\")\n-        (zero_extend:V4SI\n-          (unspec:SI [(vec_select:SI\n-                        (match_operand:V4SI 1 \"register_operand\" \"w\")\n-                        (parallel [(match_operand:SI 2 \"immediate_operand\" \"i\")]))]\n-           UNSPEC_SHA1H)))]\n-  \"TARGET_CRYPTO\"\n+\t   (unspec:V4SI\n+\t      [(vec_select:SI\n+\t\t(match_operand:V4SI 1 \"register_operand\" \"w\")\n+\t\t(parallel [(match_operand:SI 2 \"immediate_operand\" \"i\")]))]\n+\t   UNSPEC_SHA1H))]\n+  \"TARGET_CRYPTO && INTVAL (operands[2]) == NEON_ENDIAN_LANE_N (V2SImode, 0)\"\n   \"sha1h.32\\\\t%q0, %q1\"\n   [(set_attr \"type\" \"crypto_sha1_fast\")]\n )\n@@ -127,6 +131,10 @@\n   [(set_attr \"type\" \"crypto_pmull\")]\n )\n \n+/* The vec_select operation always selects index 0 from the lower V2SI subreg\n+   of the V4SI, adjusted for endianness. Required due to neon_vget_lane and\n+   neon_set_lane that change the element ordering in memory for big-endian.  */\n+\n (define_insn \"crypto_<crypto_pattern>\"\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=w\")\n         (unspec:<crypto_mode>\n@@ -136,7 +144,7 @@\n                         (parallel [(match_operand:SI 4 \"immediate_operand\" \"i\")]))\n                       (match_operand:<crypto_mode> 3 \"register_operand\" \"w\")]\n          CRYPTO_SELECTING))]\n-  \"TARGET_CRYPTO\"\n+  \"TARGET_CRYPTO && INTVAL (operands[4]) == NEON_ENDIAN_LANE_N (V2SImode, 0)\"\n   \"<crypto_pattern>.<crypto_size_sfx>\\\\t%q0, %q2, %q3\"\n   [(set_attr \"type\" \"<crypto_type>\")]\n )"}, {"sha": "7bf322fc18220d6ce27398598a6d514f5b7f9201", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e38341a8e0c7f89eb2146feddea8c2f3bf25a331/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e38341a8e0c7f89eb2146feddea8c2f3bf25a331/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e38341a8e0c7f89eb2146feddea8c2f3bf25a331", "patch": "@@ -1,3 +1,19 @@\n+2019-07-18  Sylvia Taylor  <sylvia.taylor@arm.com>\n+\n+        PR target/90317\n+        * gcc.target/arm/crypto-vsha1cq_u32.c (foo): Change return type to\n+        uint32_t.\n+        (GET_LANE, TEST_SHA1C_VEC_SELECT): New.\n+        * gcc.target/arm/crypto-vsha1h_u32.c (foo): Change return type to\n+        uint32_t.\n+        (GET_LANE, TEST_SHA1H_VEC_SELECT): New.\n+        * gcc.target/arm/crypto-vsha1mq_u32.c (foo): Change return type to\n+        uint32_t.\n+        (GET_LANE, TEST_SHA1M_VEC_SELECT): New.\n+        * gcc.target/arm/crypto-vsha1pq_u32.c (foo): Change return type to\n+        uint32_t.\n+        (GET_LANE, TEST_SHA1P_VEC_SELECT): New.\n+\n 2019-07-18  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* g++.dg/lto/alias-5_0.C: New testcase."}, {"sha": "41f97a74d6f8ad59320d002ddad4f56316b4f340", "filename": "gcc/testsuite/gcc.target/arm/crypto-vsha1cq_u32.c", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e38341a8e0c7f89eb2146feddea8c2f3bf25a331/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcrypto-vsha1cq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e38341a8e0c7f89eb2146feddea8c2f3bf25a331/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcrypto-vsha1cq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcrypto-vsha1cq_u32.c?ref=e38341a8e0c7f89eb2146feddea8c2f3bf25a331", "patch": "@@ -1,11 +1,12 @@\n /* { dg-do compile } */\n /* { dg-require-effective-target arm_crypto_ok } */\n /* { dg-add-options arm_crypto } */\n+/* { dg-additional-options \"-O3\" } */\n \n #include \"arm_neon.h\"\n \n-int\n-foo (void)\n+uint32_t foo (void)\n+\n {\n   uint32_t hash = 0xdeadbeef;\n   uint32x4_t a = {0, 1, 2, 3};\n@@ -15,4 +16,20 @@ foo (void)\n   return res[0];\n }\n \n-/* { dg-final { scan-assembler \"sha1c.32\\tq\\[0-9\\]+, q\\[0-9\\]+\" } } */\n+#define GET_LANE(lane)\t\t\t\t\t\t\t     \\\n+\tuint32x4_t foo_lane##lane (uint32x4_t val,uint32x4_t a, uint32x4_t b)\\\n+\t{\t\t\t\t\t\t\t\t     \\\n+\t    return vsha1cq_u32 (a, vgetq_lane_u32 (val, lane), b);\t     \\\n+\t}\n+\n+#define TEST_SHA1C_VEC_SELECT(FUNC)\t\t\t\t\\\n+\tFUNC (0)\t\t\t\t\t\t\\\n+\tFUNC (1)\t\t\t\t\t\t\\\n+\tFUNC (2)\t\t\t\t\t\t\\\n+\tFUNC (3)\t\t\t\t\t\t\\\n+\n+TEST_SHA1C_VEC_SELECT (GET_LANE)\n+\n+/* { dg-final { scan-assembler-times {sha1c.32\\tq[0-9]+, q[0-9]+} 5 } } */\n+/* { dg-final { scan-assembler-times {vdup.32\\tq[0-9]+, r[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vmov.32\\tr[0-9]+, d[0-9]+\\[[0-9]+\\]+} 4 } } */"}, {"sha": "b2846675a27696c23101be12d202c1eb850e8f17", "filename": "gcc/testsuite/gcc.target/arm/crypto-vsha1h_u32.c", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e38341a8e0c7f89eb2146feddea8c2f3bf25a331/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcrypto-vsha1h_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e38341a8e0c7f89eb2146feddea8c2f3bf25a331/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcrypto-vsha1h_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcrypto-vsha1h_u32.c?ref=e38341a8e0c7f89eb2146feddea8c2f3bf25a331", "patch": "@@ -1,14 +1,31 @@\n /* { dg-do compile } */\n /* { dg-require-effective-target arm_crypto_ok } */\n /* { dg-add-options arm_crypto } */\n+/* { dg-additional-options \"-O3\" } */\n \n #include \"arm_neon.h\"\n \n-int\n-foo (void)\n+uint32_t foo (void)\n+\n {\n   uint32_t val = 0xdeadbeef;\n   return vsha1h_u32 (val);\n }\n \n-/* { dg-final { scan-assembler \"sha1h.32\\tq\\[0-9\\]+, q\\[0-9\\]+\" } } */\n+#define GET_LANE(lane)\t\t\t\t\t\t\\\n+\tuint32_t foo_lane##lane (uint32x4_t val)\t\t\\\n+\t{\t\t\t\t\t\t\t\\\n+\t    return vsha1h_u32 (vgetq_lane_u32 (val, lane));\t\\\n+\t}\n+\n+#define TEST_SHA1H_VEC_SELECT(FUNC)\t\t\t\t\\\n+\tFUNC (0)\t\t\t\t\t\t\\\n+\tFUNC (1)\t\t\t\t\t\t\\\n+\tFUNC (2)\t\t\t\t\t\t\\\n+\tFUNC (3)\t\t\t\t\t\t\\\n+\n+TEST_SHA1H_VEC_SELECT (GET_LANE)\n+\n+/* { dg-final { scan-assembler-times {sha1h.32\\tq[0-9]+, q[0-9]+} 5 } } */\n+/* { dg-final { scan-assembler-times {vdup.32\\tq[0-9]+, r[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vmov.32\\tr[0-9]+, d[0-9]+\\[[0-9]+\\]+} 8 } } */"}, {"sha": "676e64ce779cea34f4744e09a697bcfc64b4e3ba", "filename": "gcc/testsuite/gcc.target/arm/crypto-vsha1mq_u32.c", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e38341a8e0c7f89eb2146feddea8c2f3bf25a331/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcrypto-vsha1mq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e38341a8e0c7f89eb2146feddea8c2f3bf25a331/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcrypto-vsha1mq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcrypto-vsha1mq_u32.c?ref=e38341a8e0c7f89eb2146feddea8c2f3bf25a331", "patch": "@@ -1,11 +1,12 @@\n /* { dg-do compile } */\n /* { dg-require-effective-target arm_crypto_ok } */\n /* { dg-add-options arm_crypto } */\n+/* { dg-additional-options \"-O3\" } */\n \n #include \"arm_neon.h\"\n \n-int\n-foo (void)\n+uint32_t foo (void)\n+\n {\n   uint32_t hash = 0xdeadbeef;\n   uint32x4_t a = {0, 1, 2, 3};\n@@ -15,4 +16,20 @@ foo (void)\n   return res[0];\n }\n \n-/* { dg-final { scan-assembler \"sha1m.32\\tq\\[0-9\\]+, q\\[0-9\\]+\" } } */\n+#define GET_LANE(lane)\t\t\t\t\t\t\t     \\\n+\tuint32x4_t foo_lane##lane (uint32x4_t val,uint32x4_t a, uint32x4_t b)\\\n+\t{\t\t\t\t\t\t\t\t     \\\n+\t    return vsha1mq_u32 (a, vgetq_lane_u32 (val, lane), b);\t     \\\n+\t}\n+\n+#define TEST_SHA1M_VEC_SELECT(FUNC)\t\t\t\t\\\n+\tFUNC (0)\t\t\t\t\t\t\\\n+\tFUNC (1)\t\t\t\t\t\t\\\n+\tFUNC (2)\t\t\t\t\t\t\\\n+\tFUNC (3)\t\t\t\t\t\t\\\n+\n+TEST_SHA1M_VEC_SELECT (GET_LANE)\n+\n+/* { dg-final { scan-assembler-times {sha1m.32\\tq[0-9]+, q[0-9]+} 5 } } */\n+/* { dg-final { scan-assembler-times {vdup.32\\tq[0-9]+, r[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vmov.32\\tr[0-9]+, d[0-9]+\\[[0-9]+\\]+} 4 } } */"}, {"sha": "ed10fe265ba74ae9c6ae86aca63d802b25887a21", "filename": "gcc/testsuite/gcc.target/arm/crypto-vsha1pq_u32.c", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e38341a8e0c7f89eb2146feddea8c2f3bf25a331/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcrypto-vsha1pq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e38341a8e0c7f89eb2146feddea8c2f3bf25a331/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcrypto-vsha1pq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcrypto-vsha1pq_u32.c?ref=e38341a8e0c7f89eb2146feddea8c2f3bf25a331", "patch": "@@ -1,11 +1,12 @@\n /* { dg-do compile } */\n /* { dg-require-effective-target arm_crypto_ok } */\n /* { dg-add-options arm_crypto } */\n+/* { dg-additional-options \"-O3\" } */\n \n #include \"arm_neon.h\"\n \n-int\n-foo (void)\n+uint32_t foo (void)\n+\n {\n   uint32_t hash = 0xdeadbeef;\n   uint32x4_t a = {0, 1, 2, 3};\n@@ -15,4 +16,20 @@ foo (void)\n   return res[0];\n }\n \n-/* { dg-final { scan-assembler \"sha1p.32\\tq\\[0-9\\]+, q\\[0-9\\]+\" } } */\n+#define GET_LANE(lane)\t\t\t\t\t\t\t     \\\n+\tuint32x4_t foo_lane##lane (uint32x4_t val,uint32x4_t a, uint32x4_t b)\\\n+\t{\t\t\t\t\t\t\t\t     \\\n+\t    return vsha1pq_u32 (a, vgetq_lane_u32 (val, lane), b);\t     \\\n+\t}\n+\n+#define TEST_SHA1P_VEC_SELECT(FUNC)\t\t\t\t\\\n+\tFUNC (0)\t\t\t\t\t\t\\\n+\tFUNC (1)\t\t\t\t\t\t\\\n+\tFUNC (2)\t\t\t\t\t\t\\\n+\tFUNC (3)\t\t\t\t\t\t\\\n+\n+TEST_SHA1P_VEC_SELECT (GET_LANE)\n+\n+/* { dg-final { scan-assembler-times {sha1p.32\\tq[0-9]+, q[0-9]+} 5 } } */\n+/* { dg-final { scan-assembler-times {vdup.32\\tq[0-9]+, r[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vmov.32\\tr[0-9]+, d[0-9]+\\[[0-9]+\\]+} 4 } } */"}]}