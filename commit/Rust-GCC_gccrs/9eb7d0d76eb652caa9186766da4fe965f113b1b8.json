{"sha": "9eb7d0d76eb652caa9186766da4fe965f113b1b8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWViN2QwZDc2ZWI2NTJjYWE5MTg2NzY2ZGE0ZmU5NjVmMTEzYjFiOA==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-07-08T18:17:47Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-07-08T18:17:47Z"}, "message": "c++: ICE in is_really_empty_class [PR95497]\n\nWe are ICEing in the testcase below because we pass the\nyet-uninstantiated class type A<int> of the PARM_DECL b to\nis_really_empty_class from is_rvalue_constant_expression when parsing\nthe requirement t += b.\n\nThis patch fixes the ICE by guarding the problematic call to\nis_really_empty_class with a COMPLETE_TYPE_P check, which should also\nsubsume the existing dependent_type_p check.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/95497\n\t* constexpr.c (potential_constant_expression_1) <case PARM_DECL>:\n\tWhen processing_template_decl, check COMPLETE_TYPE_P before\n\tcalling is_really_empty_class.  Don't check dependent_type_p.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/95497\n\t* g++.dg/cpp2a/concepts-pr95497.C: New test.", "tree": {"sha": "062d37e5edfaf868b953d4f906f8cb913a047573", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/062d37e5edfaf868b953d4f906f8cb913a047573"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9eb7d0d76eb652caa9186766da4fe965f113b1b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9eb7d0d76eb652caa9186766da4fe965f113b1b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9eb7d0d76eb652caa9186766da4fe965f113b1b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9eb7d0d76eb652caa9186766da4fe965f113b1b8/comments", "author": null, "committer": null, "parents": [{"sha": "c1a57681a64150d2fc336ba8e055c5f82e3737e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1a57681a64150d2fc336ba8e055c5f82e3737e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1a57681a64150d2fc336ba8e055c5f82e3737e8"}], "stats": {"total": 14, "additions": 13, "deletions": 1}, "files": [{"sha": "ff78ebda2dc9fb83e9ff36d62aa8621d3aa32c67", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eb7d0d76eb652caa9186766da4fe965f113b1b8/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eb7d0d76eb652caa9186766da4fe965f113b1b8/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=9eb7d0d76eb652caa9186766da4fe965f113b1b8", "patch": "@@ -7443,7 +7443,7 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict, bool now,\n       if (now && want_rval)\n \t{\n \t  tree type = TREE_TYPE (t);\n-\t  if (dependent_type_p (type)\n+\t  if ((processing_template_decl && !COMPLETE_TYPE_P (type))\n \t      || is_really_empty_class (type, /*ignore_vptr*/false))\n \t    /* An empty class has no data to read.  */\n \t    return true;"}, {"sha": "4d7718ad5e8eaaf5e2c8a708dd87f539a238ea92", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-pr95497.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eb7d0d76eb652caa9186766da4fe965f113b1b8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr95497.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eb7d0d76eb652caa9186766da4fe965f113b1b8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr95497.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr95497.C?ref=9eb7d0d76eb652caa9186766da4fe965f113b1b8", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/95497\n+// { dg-do compile { target c++20 } }\n+\n+template <typename T>\n+struct A{};\n+\n+template <typename T>\n+concept c =\n+    requires(T t, A<int> b) // note that A<int> is independent of T\n+    {\n+        { t += b };\n+    };"}]}