{"sha": "076701b69d3a1f02e46df451ab9cb092863e5baa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDc2NzAxYjY5ZDNhMWYwMmU0NmRmNDUxYWI5Y2IwOTI4NjNlNWJhYQ==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2015-03-18T12:01:24Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2015-03-18T12:01:24Z"}, "message": "[expmed][cleanup] Use std::swap instead of manual swapping\n\n\t* expmed.c (synth_mult): Use std::swap instead of manually\n\tswapping algorithms.\n\nFrom-SVN: r221486", "tree": {"sha": "3ec2433a8c1092dee7246adf698e27396ebf5658", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ec2433a8c1092dee7246adf698e27396ebf5658"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/076701b69d3a1f02e46df451ab9cb092863e5baa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/076701b69d3a1f02e46df451ab9cb092863e5baa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/076701b69d3a1f02e46df451ab9cb092863e5baa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/076701b69d3a1f02e46df451ab9cb092863e5baa/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fbf524de7b7f81d26b43a49c766ca6d1ac41457c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbf524de7b7f81d26b43a49c766ca6d1ac41457c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbf524de7b7f81d26b43a49c766ca6d1ac41457c"}], "stats": {"total": 32, "additions": 14, "deletions": 18}, "files": [{"sha": "d2ff5c0a5f708bf98c5d27aaebe1dc0e42b84ddf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/076701b69d3a1f02e46df451ab9cb092863e5baa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/076701b69d3a1f02e46df451ab9cb092863e5baa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=076701b69d3a1f02e46df451ab9cb092863e5baa", "patch": "@@ -1,3 +1,8 @@\n+2015-03-18  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* expmed.c (synth_mult): Use std::swap instead of manually\n+\tswapping algorithms.\n+\n 2015-03-18  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/65078"}, {"sha": "8d4f9640934be3ea492390dfe692356d78d46bbb", "filename": "gcc/expmed.c", "status": "modified", "additions": 9, "deletions": 18, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/076701b69d3a1f02e46df451ab9cb092863e5baa/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/076701b69d3a1f02e46df451ab9cb092863e5baa/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=076701b69d3a1f02e46df451ab9cb092863e5baa", "patch": "@@ -2551,9 +2551,8 @@ synth_mult (struct algorithm *alg_out, unsigned HOST_WIDE_INT t,\n \t  alg_in->cost.latency += op_cost;\n \t  if (CHEAPER_MULT_COST (&alg_in->cost, &best_cost))\n \t    {\n-\t      struct algorithm *x;\n \t      best_cost = alg_in->cost;\n-\t      x = alg_in, alg_in = best_alg, best_alg = x;\n+\t      std::swap (alg_in, best_alg);\n \t      best_alg->log[best_alg->ops] = m;\n \t      best_alg->op[best_alg->ops] = alg_shift;\n \t    }\n@@ -2582,9 +2581,8 @@ synth_mult (struct algorithm *alg_out, unsigned HOST_WIDE_INT t,\n \t      alg_in->cost.latency += op_cost;\n \t      if (CHEAPER_MULT_COST (&alg_in->cost, &best_cost))\n \t\t{\n-\t\t  struct algorithm *x;\n \t\t  best_cost = alg_in->cost;\n-\t\t  x = alg_in, alg_in = best_alg, best_alg = x;\n+\t\t  std::swap (alg_in, best_alg);\n \t\t  best_alg->log[best_alg->ops] = m;\n \t\t  best_alg->op[best_alg->ops] = alg_shift;\n \t\t}\n@@ -2624,9 +2622,8 @@ synth_mult (struct algorithm *alg_out, unsigned HOST_WIDE_INT t,\n \t  alg_in->cost.latency += op_cost;\n \t  if (CHEAPER_MULT_COST (&alg_in->cost, &best_cost))\n \t    {\n-\t      struct algorithm *x;\n \t      best_cost = alg_in->cost;\n-\t      x = alg_in, alg_in = best_alg, best_alg = x;\n+\t      std::swap (alg_in, best_alg);\n \t      best_alg->log[best_alg->ops] = 0;\n \t      best_alg->op[best_alg->ops] = alg_sub_t_m2;\n \t    }\n@@ -2644,9 +2641,8 @@ synth_mult (struct algorithm *alg_out, unsigned HOST_WIDE_INT t,\n \t  alg_in->cost.latency += op_cost;\n \t  if (CHEAPER_MULT_COST (&alg_in->cost, &best_cost))\n \t    {\n-\t      struct algorithm *x;\n \t      best_cost = alg_in->cost;\n-\t      x = alg_in, alg_in = best_alg, best_alg = x;\n+\t      std::swap (alg_in, best_alg);\n \t      best_alg->log[best_alg->ops] = 0;\n \t      best_alg->op[best_alg->ops] = alg_add_t_m2;\n \t    }\n@@ -2667,9 +2663,8 @@ synth_mult (struct algorithm *alg_out, unsigned HOST_WIDE_INT t,\n \t  alg_in->cost.latency += op_cost;\n \t  if (CHEAPER_MULT_COST (&alg_in->cost, &best_cost))\n \t    {\n-\t      struct algorithm *x;\n \t      best_cost = alg_in->cost;\n-\t      x = alg_in, alg_in = best_alg, best_alg = x;\n+\t      std::swap (alg_in, best_alg);\n \t      best_alg->log[best_alg->ops] = m;\n \t      best_alg->op[best_alg->ops] = alg_sub_t_m2;\n \t    }\n@@ -2723,9 +2718,8 @@ synth_mult (struct algorithm *alg_out, unsigned HOST_WIDE_INT t,\n \t    alg_in->cost.latency = op_cost;\n \t  if (CHEAPER_MULT_COST (&alg_in->cost, &best_cost))\n \t    {\n-\t      struct algorithm *x;\n \t      best_cost = alg_in->cost;\n-\t      x = alg_in, alg_in = best_alg, best_alg = x;\n+\t      std::swap (alg_in, best_alg);\n \t      best_alg->log[best_alg->ops] = m;\n \t      best_alg->op[best_alg->ops] = alg_add_factor;\n \t    }\n@@ -2762,9 +2756,8 @@ synth_mult (struct algorithm *alg_out, unsigned HOST_WIDE_INT t,\n \t    alg_in->cost.latency = op_cost;\n \t  if (CHEAPER_MULT_COST (&alg_in->cost, &best_cost))\n \t    {\n-\t      struct algorithm *x;\n \t      best_cost = alg_in->cost;\n-\t      x = alg_in, alg_in = best_alg, best_alg = x;\n+\t      std::swap (alg_in, best_alg);\n \t      best_alg->log[best_alg->ops] = m;\n \t      best_alg->op[best_alg->ops] = alg_sub_factor;\n \t    }\n@@ -2793,9 +2786,8 @@ synth_mult (struct algorithm *alg_out, unsigned HOST_WIDE_INT t,\n \t  alg_in->cost.latency += op_cost;\n \t  if (CHEAPER_MULT_COST (&alg_in->cost, &best_cost))\n \t    {\n-\t      struct algorithm *x;\n \t      best_cost = alg_in->cost;\n-\t      x = alg_in, alg_in = best_alg, best_alg = x;\n+\t      std::swap (alg_in, best_alg);\n \t      best_alg->log[best_alg->ops] = m;\n \t      best_alg->op[best_alg->ops] = alg_add_t2_m;\n \t    }\n@@ -2818,9 +2810,8 @@ synth_mult (struct algorithm *alg_out, unsigned HOST_WIDE_INT t,\n \t  alg_in->cost.latency += op_cost;\n \t  if (CHEAPER_MULT_COST (&alg_in->cost, &best_cost))\n \t    {\n-\t      struct algorithm *x;\n \t      best_cost = alg_in->cost;\n-\t      x = alg_in, alg_in = best_alg, best_alg = x;\n+\t      std::swap (alg_in, best_alg);\n \t      best_alg->log[best_alg->ops] = m;\n \t      best_alg->op[best_alg->ops] = alg_sub_t2_m;\n \t    }"}]}