{"sha": "838ff415aed1282e62247bac07e80955d8c85aeb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODM4ZmY0MTVhZWQxMjgyZTYyMjQ3YmFjMDdlODA5NTVkOGM4NWFlYg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2012-04-25T14:54:21Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2012-04-25T14:54:21Z"}, "message": "re PR middle-end/53089 (gfortran.dg/coarray/atomic_1.f90 and gfortran.dg/coarray/registering_1.f90)\n\n\tPR middle-end/53089 \n\t* cgraphunit.c (referred_to_p): Move ahead in file to avoid forward declaration.\n\t(cgraph_finalize_function): Finalize them here.\n\t* symtab.c (dump_symtab): Dump ctors and dtors.\n\nFrom-SVN: r186820", "tree": {"sha": "9d3f2a88445e1af7a691390a56d3f28b6e0b952e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d3f2a88445e1af7a691390a56d3f28b6e0b952e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/838ff415aed1282e62247bac07e80955d8c85aeb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/838ff415aed1282e62247bac07e80955d8c85aeb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/838ff415aed1282e62247bac07e80955d8c85aeb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/838ff415aed1282e62247bac07e80955d8c85aeb/comments", "author": null, "committer": null, "parents": [{"sha": "f1cc958978c4b3a76ccf96571972f95963c9f0ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1cc958978c4b3a76ccf96571972f95963c9f0ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1cc958978c4b3a76ccf96571972f95963c9f0ea"}], "stats": {"total": 51, "additions": 35, "deletions": 16}, "files": [{"sha": "99203ffb398e4b318085bb216b5d6595239b4288", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/838ff415aed1282e62247bac07e80955d8c85aeb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/838ff415aed1282e62247bac07e80955d8c85aeb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=838ff415aed1282e62247bac07e80955d8c85aeb", "patch": "@@ -1,3 +1,10 @@\n+2012-04-25  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR middle-end/53089 \n+\t* cgraphunit.c (referred_to_p): Move ahead in file to avoid forward declaration.\n+\t(cgraph_finalize_function): Finalize them here.\n+\t* symtab.c (dump_symtab): Dump ctors and dtors.\n+\n 2012-04-25  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/52979"}, {"sha": "a58cd08c0d9aa29622455de5fd32618c506ba98c", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 21, "deletions": 16, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/838ff415aed1282e62247bac07e80955d8c85aeb/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/838ff415aed1282e62247bac07e80955d8c85aeb/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=838ff415aed1282e62247bac07e80955d8c85aeb", "patch": "@@ -320,6 +320,22 @@ cgraph_reset_node (struct cgraph_node *node)\n   cgraph_node_remove_callees (node);\n }\n \n+/* Return true when there are references to NODE.  */\n+\n+static bool\n+referred_to_p (symtab_node node)\n+{\n+  int i;\n+  struct ipa_ref *ref;\n+\n+  for (i = 0; ipa_ref_list_referring_iterate (&node->symbol.ref_list, i, ref);\n+       i++)\n+    return true;\n+  if (symtab_function_p (node) && cgraph (node)->callers)\n+    return true;\n+  return false;\n+}\n+\n /* DECL has been parsed.  Take it, queue it, compile it at the whim of the\n    logic in effect.  If NESTED is true, then our caller cannot stand to have\n    the garbage collector run at the moment.  We would need to either create\n@@ -372,6 +388,11 @@ cgraph_finalize_function (tree decl, bool nested)\n \n   if (!nested)\n     ggc_collect ();\n+\n+  if (cgraph_state == CGRAPH_STATE_CONSTRUCTION\n+      && (cgraph_decide_is_function_needed (node, decl)\n+\t  || referred_to_p ((symtab_node)node)))\n+    enqueue_node ((symtab_node)node);\n }\n \n /* Add the function FNDECL to the call graph.\n@@ -1114,22 +1135,6 @@ process_function_and_variable_attributes (struct cgraph_node *first,\n     }\n }\n \n-/* Return true when there are references to NODE.  */\n-\n-static bool\n-referred_to_p (symtab_node node)\n-{\n-  int i;\n-  struct ipa_ref *ref;\n-\n-  for (i = 0; ipa_ref_list_referring_iterate (&node->symbol.ref_list, i, ref);\n-       i++)\n-    return true;\n-  if (symtab_function_p (node) && cgraph (node)->callers)\n-    return true;\n-  return false;\n-}\n-\n /* Mark DECL as finalized.  By finalizing the declaration, frontend instruct the\n    middle end to output the variable to asm file, if needed or externally\n    visible.  */"}, {"sha": "f39376303ec333f69435a29c410f52c05444e981", "filename": "gcc/symtab.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/838ff415aed1282e62247bac07e80955d8c85aeb/gcc%2Fsymtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/838ff415aed1282e62247bac07e80955d8c85aeb/gcc%2Fsymtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsymtab.c?ref=838ff415aed1282e62247bac07e80955d8c85aeb", "patch": "@@ -414,6 +414,13 @@ dump_symtab_base (FILE *f, symtab_node node)\n     fprintf (f, \" virtual\");\n   if (DECL_ARTIFICIAL (node->symbol.decl))\n     fprintf (f, \" artificial\");\n+  if (TREE_CODE (node->symbol.decl) == FUNCTION_DECL)\n+    {\n+      if (DECL_STATIC_CONSTRUCTOR (node->symbol.decl))\n+\tfprintf (f, \" constructor\");\n+      if (DECL_STATIC_DESTRUCTOR (node->symbol.decl))\n+\tfprintf (f, \" destructor\");\n+    }\n   fprintf (f, \"\\n\");\n   \n   if (node->symbol.same_comdat_group)"}]}