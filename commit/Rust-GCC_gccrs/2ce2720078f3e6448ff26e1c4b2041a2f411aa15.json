{"sha": "2ce2720078f3e6448ff26e1c4b2041a2f411aa15", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmNlMjcyMDA3OGYzZTY0NDhmZjI2ZTFjNGIyMDQxYTJmNDExYWExNQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-11-27T08:31:44Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-11-27T08:31:44Z"}, "message": "re PR tree-optimization/68553 (gcc.dg/vect/pr68445.c FAILs)\n\n2015-11-27  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/68553\n\t* tree-vect-slp.c (vect_get_mask_element): Remove.\n\t(vect_transform_slp_perm_load): Implement in a simpler way.\n\n\t* gcc.dg/vect/pr45752.c: Adjust.\n\t* gcc.dg/vect/slp-perm-4.c: Likewise.\n\nFrom-SVN: r230993", "tree": {"sha": "42bcde843c7b11c7827b6e3ffae9eb471871d972", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/42bcde843c7b11c7827b6e3ffae9eb471871d972"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ce2720078f3e6448ff26e1c4b2041a2f411aa15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ce2720078f3e6448ff26e1c4b2041a2f411aa15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ce2720078f3e6448ff26e1c4b2041a2f411aa15", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ce2720078f3e6448ff26e1c4b2041a2f411aa15/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f0a813f2ad101cd0795d35399182361e68750bae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0a813f2ad101cd0795d35399182361e68750bae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0a813f2ad101cd0795d35399182361e68750bae"}], "stats": {"total": 298, "additions": 108, "deletions": 190}, "files": [{"sha": "41ef7446e611df3fc6e48c461babfb4003dd6dc5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ce2720078f3e6448ff26e1c4b2041a2f411aa15/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ce2720078f3e6448ff26e1c4b2041a2f411aa15/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2ce2720078f3e6448ff26e1c4b2041a2f411aa15", "patch": "@@ -1,3 +1,9 @@\n+2015-11-27  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/68553\n+\t* tree-vect-slp.c (vect_get_mask_element): Remove.\n+\t(vect_transform_slp_perm_load): Implement in a simpler way.\n+\n 2015-11-26  Alexandre Oliva <aoliva@redhat.com>\n \n \tPR rtl-optimization/67753"}, {"sha": "57222900c71b4637a52d6e60b4cdb472bc03d8b9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ce2720078f3e6448ff26e1c4b2041a2f411aa15/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ce2720078f3e6448ff26e1c4b2041a2f411aa15/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2ce2720078f3e6448ff26e1c4b2041a2f411aa15", "patch": "@@ -1,3 +1,9 @@\n+2015-11-27  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/68553\n+\t* gcc.dg/vect/pr45752.c: Adjust.\n+\t* gcc.dg/vect/slp-perm-4.c: Likewise.\n+\n 2015-11-26  Martin Sebor  <msebor@redhat.com>\n \n \t* g++.dg/init/new45.C (cookie_size): New constant set to a value"}, {"sha": "ab95ad64a5bea077bfd37decc385fc46b258d4d0", "filename": "gcc/testsuite/gcc.dg/vect/pr45752.c", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ce2720078f3e6448ff26e1c4b2041a2f411aa15/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr45752.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ce2720078f3e6448ff26e1c4b2041a2f411aa15/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr45752.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr45752.c?ref=2ce2720078f3e6448ff26e1c4b2041a2f411aa15", "patch": "@@ -33,7 +33,7 @@\n #define M34 7716\n #define M44 16\n \n-#define N 16\n+#define N 40\n \n void foo (unsigned int *__restrict__ pInput,\n           unsigned int *__restrict__ pOutput,\n@@ -75,10 +75,16 @@ void foo (unsigned int *__restrict__ pInput,\n int main (int argc, const char* argv[])\n {\n   unsigned int input[N], output[N], i, input2[N], output2[N];\n-  unsigned int check_results[N] = {3208, 1334, 28764, 35679, 2789, 13028,\n-    4754, 168364, 91254, 12399, 22848, 8174, 307964, 146829, 22009, 0};\n-  unsigned int check_results2[N] = {7136, 2702, 84604, 57909, 6633, 16956,\n-    6122, 224204, 113484, 16243, 26776, 9542, 363804, 169059, 25853, 0};\n+  unsigned int check_results[N]\n+    = {3208, 1334, 28764, 35679, 2789, 13028, 4754, 168364, 91254, 12399, \n+    22848, 8174, 307964, 146829, 22009, 32668, 11594, 447564, 202404, 31619, \n+    42488, 15014, 587164, 257979, 41229, 52308, 18434, 726764, 313554, 50839, \n+    62128, 21854, 866364, 369129, 60449, 71948, 25274, 1005964, 424704, 70059};\n+  unsigned int check_results2[N]\n+    = {7136, 2702, 84604, 57909, 6633, 16956, 6122, 224204, 113484, 16243, \n+    26776, 9542, 363804, 169059, 25853, 36596, 12962, 503404, 224634, 35463, \n+    46416, 16382, 643004, 280209, 45073, 56236, 19802, 782604, 335784, 54683, \n+    66056, 23222, 922204, 391359, 64293, 75876, 26642, 1061804, 446934, 73903};\n \n   check_vect ();\n \n@@ -101,7 +107,5 @@ int main (int argc, const char* argv[])\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 0 \"vect\"  } } */\n-/* { dg-final { scan-tree-dump \"permutation requires at least three vectors\" \"vect\" { target vect_perm } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 0 \"vect\"  } } */\n-\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\"  } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 2 \"vect\" { target vect_perm } } } */"}, {"sha": "8e1b5d41c0d7d63558b1f9c033a9e07b79cb19d3", "filename": "gcc/testsuite/gcc.dg/vect/slp-perm-4.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ce2720078f3e6448ff26e1c4b2041a2f411aa15/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ce2720078f3e6448ff26e1c4b2041a2f411aa15/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-4.c?ref=2ce2720078f3e6448ff26e1c4b2041a2f411aa15", "patch": "@@ -33,7 +33,7 @@\n #define M34 7716\n #define M44 16\n \n-#define N 16\n+#define N 40\n \n void foo (unsigned int *__restrict__ pInput, unsigned int *__restrict__ pOutput)\n {\n@@ -58,7 +58,11 @@ void foo (unsigned int *__restrict__ pInput, unsigned int *__restrict__ pOutput)\n int main (int argc, const char* argv[])\n {\n   unsigned int input[N], output[N], i;\n-  unsigned int check_results[N] = {3208, 1334, 28764, 35679, 2789, 13028, 4754, 168364, 91254, 12399, 22848, 8174, 307964, 146829, 22009, 0};\n+  unsigned int check_results[N]\n+    = {3208, 1334, 28764, 35679, 2789, 13028, 4754, 168364, 91254, 12399, \n+    22848, 8174, 307964, 146829, 22009, 32668, 11594, 447564, 202404, 31619, \n+    42488, 15014, 587164, 257979, 41229, 52308, 18434, 726764, 313554, 50839, \n+    62128, 21854, 866364, 369129, 60449, 71948, 25274, 1005964, 424704, 70059};\n \n   check_vect ();\n \n@@ -80,7 +84,6 @@ int main (int argc, const char* argv[])\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 0 \"vect\"  } } */\n-/* { dg-final { scan-tree-dump \"permutation requires at least three vectors\" \"vect\" { target vect_perm} } } */\n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 0 \"vect\"  } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\" { target vect_perm } } } */\n "}, {"sha": "ded361a60e7944ffbfd3635e4600beda3a054fbd", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 75, "deletions": 176, "changes": 251, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ce2720078f3e6448ff26e1c4b2041a2f411aa15/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ce2720078f3e6448ff26e1c4b2041a2f411aa15/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=2ce2720078f3e6448ff26e1c4b2041a2f411aa15", "patch": "@@ -3241,102 +3241,6 @@ vect_create_mask_and_perm (gimple *stmt,\n }\n \n \n-/* Given FIRST_MASK_ELEMENT - the mask element in element representation,\n-   return in CURRENT_MASK_ELEMENT its equivalent in target specific\n-   representation.  Check that the mask is valid and return FALSE if not.\n-   Return TRUE in NEED_NEXT_VECTOR if the permutation requires to move to\n-   the next vector, i.e., the current first vector is not needed.  */\n-\n-static bool\n-vect_get_mask_element (gimple *stmt, int first_mask_element, int m,\n-                       int mask_nunits, bool only_one_vec, int index,\n-\t\t       unsigned char *mask, int *current_mask_element,\n-                       bool *need_next_vector, int *number_of_mask_fixes,\n-                       bool *mask_fixed, bool *needs_first_vector)\n-{\n-  int i;\n-\n-  /* Convert to target specific representation.  */\n-  *current_mask_element = first_mask_element + m;\n-  /* Adjust the value in case it's a mask for second and third vectors.  */\n-  *current_mask_element -= mask_nunits * (*number_of_mask_fixes - 1);\n-\n-  if (*current_mask_element < 0)\n-    {\n-      if (dump_enabled_p ())\n-\t{\n-\t  dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n-\t\t\t   \"permutation requires past vector \");\n-\t  dump_gimple_stmt (MSG_MISSED_OPTIMIZATION, TDF_SLIM, stmt, 0);\n-\t  dump_printf (MSG_MISSED_OPTIMIZATION, \"\\n\");\n-\t}\n-      return false;\n-    }\n-\n-  if (*current_mask_element < mask_nunits)\n-    *needs_first_vector = true;\n-\n-  /* We have only one input vector to permute but the mask accesses values in\n-     the next vector as well.  */\n-  if (only_one_vec && *current_mask_element >= mask_nunits)\n-    {\n-      if (dump_enabled_p ())\n-        {\n-          dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n-\t\t\t   \"permutation requires at least two vectors \");\n-          dump_gimple_stmt (MSG_MISSED_OPTIMIZATION, TDF_SLIM, stmt, 0);\n-          dump_printf (MSG_MISSED_OPTIMIZATION, \"\\n\");\n-        }\n-\n-      return false;\n-    }\n-\n-  /* The mask requires the next vector.  */\n-  while (*current_mask_element >= mask_nunits * 2)\n-    {\n-      if (*needs_first_vector || *mask_fixed)\n-        {\n-          /* We either need the first vector too or have already moved to the\n-             next vector. In both cases, this permutation needs three\n-             vectors.  */\n-          if (dump_enabled_p ())\n-            {\n-              dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n-\t\t\t       \"permutation requires at \"\n-\t\t\t       \"least three vectors \");\n-              dump_gimple_stmt (MSG_MISSED_OPTIMIZATION, TDF_SLIM, stmt, 0);\n-              dump_printf (MSG_MISSED_OPTIMIZATION, \"\\n\");\n-            }\n-\n-          return false;\n-        }\n-\n-      /* We move to the next vector, dropping the first one and working with\n-         the second and the third - we need to adjust the values of the mask\n-         accordingly.  */\n-      *current_mask_element -= mask_nunits * *number_of_mask_fixes;\n-\n-      for (i = 0; i < index; i++)\n-        mask[i] -= mask_nunits * *number_of_mask_fixes;\n-\n-      (*number_of_mask_fixes)++;\n-      *mask_fixed = true;\n-    }\n-\n-  *need_next_vector = *mask_fixed;\n-\n-  /* This was the last element of this mask. Start a new one.  */\n-  if (index == mask_nunits - 1)\n-    {\n-      *number_of_mask_fixes = 1;\n-      *mask_fixed = false;\n-      *needs_first_vector = false;\n-    }\n-\n-  return true;\n-}\n-\n-\n /* Generate vector permute statements from a list of loads in DR_CHAIN.\n    If ANALYZE_ONLY is TRUE, only check that it is possible to create valid\n    permute statements for the SLP node NODE of the SLP instance\n@@ -3350,17 +3254,11 @@ vect_transform_slp_perm_load (slp_tree node, vec<tree> dr_chain,\n   gimple *stmt = SLP_TREE_SCALAR_STMTS (node)[0];\n   stmt_vec_info stmt_info = vinfo_for_stmt (stmt);\n   tree mask_element_type = NULL_TREE, mask_type;\n-  int i, j, k, nunits, vec_index = 0;\n+  int nunits, vec_index = 0;\n   tree vectype = STMT_VINFO_VECTYPE (stmt_info);\n   int group_size = SLP_INSTANCE_GROUP_SIZE (slp_node_instance);\n-  int first_mask_element;\n-  int index, unroll_factor, current_mask_element, ncopies;\n+  int unroll_factor, mask_element, ncopies;\n   unsigned char *mask;\n-  bool only_one_vec = false, need_next_vector = false;\n-  int first_vec_index, second_vec_index, orig_vec_stmts_num, vect_stmts_counter;\n-  int number_of_mask_fixes = 1;\n-  bool mask_fixed = false;\n-  bool needs_first_vector = false;\n   machine_mode mode;\n \n   if (!STMT_VINFO_GROUPED_ACCESS (stmt_info))\n@@ -3391,15 +3289,6 @@ vect_transform_slp_perm_load (slp_tree node, vec<tree> dr_chain,\n   mask = XALLOCAVEC (unsigned char, nunits);\n   unroll_factor = SLP_INSTANCE_UNROLLING_FACTOR (slp_node_instance);\n \n-  /* The number of vector stmts to generate based only on SLP_NODE_INSTANCE\n-     unrolling factor.  */\n-  orig_vec_stmts_num\n-    = (STMT_VINFO_GROUP_SIZE (stmt_info)\n-       * SLP_INSTANCE_UNROLLING_FACTOR (slp_node_instance)\n-       + nunits - 1) / nunits;\n-  if (orig_vec_stmts_num == 1)\n-    only_one_vec = true;\n-\n   /* Number of copies is determined by the final vectorization factor\n      relatively to SLP_NODE_INSTANCE unrolling factor.  */\n   ncopies = vf / SLP_INSTANCE_UNROLLING_FACTOR (slp_node_instance);\n@@ -3422,75 +3311,85 @@ vect_transform_slp_perm_load (slp_tree node, vec<tree> dr_chain,\n      we need the second and the third vectors: {b1,c1,a2,b2} and\n      {c2,a3,b3,c3}.  */\n \n-  {\n-      index = 0;\n-      vect_stmts_counter = 0;\n-      vec_index = 0;\n-      first_vec_index = vec_index++;\n-      if (only_one_vec)\n-        second_vec_index = first_vec_index;\n-      else\n-        second_vec_index =  vec_index++;\n+  int vect_stmts_counter = 0;\n+  int index = 0;\n+  int first_vec_index = -1;\n+  int second_vec_index = -1;\n \n-      for (j = 0; j < unroll_factor; j++)\n-        {\n-          for (k = 0; k < group_size; k++)\n-            {\n-\t      i = SLP_TREE_LOAD_PERMUTATION (node)[k];\n-              first_mask_element = i + j * STMT_VINFO_GROUP_SIZE (stmt_info);\n-              if (!vect_get_mask_element (stmt, first_mask_element, 0,\n-\t\t\t\t\t  nunits, only_one_vec, index,\n-\t\t\t\t\t  mask, &current_mask_element,\n-\t\t\t\t\t  &need_next_vector,\n-\t\t\t\t\t  &number_of_mask_fixes, &mask_fixed,\n-\t\t\t\t\t  &needs_first_vector))\n-\t\treturn false;\n-\t      gcc_assert (current_mask_element >= 0\n-\t\t\t  && current_mask_element < 2 * nunits);\n-\t      mask[index++] = current_mask_element;\n+  for (int j = 0; j < unroll_factor; j++)\n+    {\n+      for (int k = 0; k < group_size; k++)\n+\t{\n+\t  int i = (SLP_TREE_LOAD_PERMUTATION (node)[k]\n+\t\t   + j * STMT_VINFO_GROUP_SIZE (stmt_info));\n+\t  vec_index = i / nunits;\n+\t  mask_element = i % nunits;\n+\t  if (vec_index == first_vec_index\n+\t      || first_vec_index == -1)\n+\t    {\n+\t      first_vec_index = vec_index;\n+\t    }\n+\t  else if (vec_index == second_vec_index\n+\t\t   || second_vec_index == -1)\n+\t    {\n+\t      second_vec_index = vec_index;\n+\t      mask_element += nunits;\n+\t    }\n+\t  else\n+\t    {\n+\t      if (dump_enabled_p ())\n+\t\t{\n+\t\t  dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n+\t\t\t\t   \"permutation requires at \"\n+\t\t\t\t   \"least three vectors \");\n+\t\t  dump_gimple_stmt (MSG_MISSED_OPTIMIZATION, TDF_SLIM,\n+\t\t\t\t    stmt, 0);\n+\t\t  dump_printf (MSG_MISSED_OPTIMIZATION, \"\\n\");\n+\t\t}\n+\t      return false;\n+\t    }\n \n-              if (index == nunits)\n-                {\n-\t\t  index = 0;\n-\t\t  if (!can_vec_perm_p (mode, false, mask))\n+\t  gcc_assert (mask_element >= 0\n+\t\t      && mask_element < 2 * nunits);\n+\t  mask[index++] = mask_element;\n+\n+\t  if (index == nunits)\n+\t    {\n+\t      if (!can_vec_perm_p (mode, false, mask))\n+\t\t{\n+\t\t  if (dump_enabled_p ())\n \t\t    {\n-\t\t      if (dump_enabled_p ())\n-\t\t\t{\n-\t\t\t  dump_printf_loc (MSG_MISSED_OPTIMIZATION,\n-\t\t\t\t\t   vect_location, \n-\t\t\t\t\t   \"unsupported vect permute { \");\n-\t\t\t  for (i = 0; i < nunits; ++i)\n-\t\t\t    dump_printf (MSG_MISSED_OPTIMIZATION, \"%d \",\n-\t\t\t\t\t mask[i]);\n-\t\t\t  dump_printf (MSG_MISSED_OPTIMIZATION, \"}\\n\");\n-\t\t\t}\n-\t\t      return false;\n+\t\t      dump_printf_loc (MSG_MISSED_OPTIMIZATION,\n+\t\t\t\t       vect_location, \n+\t\t\t\t       \"unsupported vect permute { \");\n+\t\t      for (i = 0; i < nunits; ++i)\n+\t\t\tdump_printf (MSG_MISSED_OPTIMIZATION, \"%d \", mask[i]);\n+\t\t      dump_printf (MSG_MISSED_OPTIMIZATION, \"}\\n\");\n \t\t    }\n+\t\t  return false;\n+\t\t}\n \n-                  if (!analyze_only)\n-                    {\n-\t\t      int l;\n-\t\t      tree mask_vec, *mask_elts;\n-\t\t      mask_elts = XALLOCAVEC (tree, nunits);\n-\t\t      for (l = 0; l < nunits; ++l)\n-\t\t\tmask_elts[l] = build_int_cst (mask_element_type,\n-\t\t\t\t\t\t      mask[l]);\n-\t\t      mask_vec = build_vector (mask_type, mask_elts);\n-\n-\t\t      if (need_next_vector)\n-                        {\n-                          first_vec_index = second_vec_index;\n-                          second_vec_index = vec_index;\n-                        }\n+\t      if (!analyze_only)\n+\t\t{\n+\t\t  tree mask_vec, *mask_elts;\n+\t\t  mask_elts = XALLOCAVEC (tree, nunits);\n+\t\t  for (int l = 0; l < nunits; ++l)\n+\t\t    mask_elts[l] = build_int_cst (mask_element_type, mask[l]);\n+\t\t  mask_vec = build_vector (mask_type, mask_elts);\n+\n+\t\t  if (second_vec_index == -1)\n+\t\t    second_vec_index = first_vec_index;\n+\t\t  vect_create_mask_and_perm (stmt, mask_vec, first_vec_index,\n+\t\t\t\t\t     second_vec_index,\n+\t\t\t\t\t     gsi, node, vectype, dr_chain,\n+\t\t\t\t\t     ncopies, vect_stmts_counter++);\n+\t\t}\n \n-                      vect_create_mask_and_perm (stmt,\n-                               mask_vec, first_vec_index, second_vec_index,\n-\t\t\t       gsi, node, vectype, dr_chain,\n-\t\t\t       ncopies, vect_stmts_counter++);\n-                    }\n-                }\n-            }\n-        }\n+\t      index = 0;\n+\t      first_vec_index = -1;\n+\t      second_vec_index = -1;\n+\t    }\n+\t}\n     }\n \n   return true;"}]}