{"sha": "69197e7e5ead2bebae71ed62532a9d422222684a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjkxOTdlN2U1ZWFkMmJlYmFlNzFlZDYyNTMyYTlkNDIyMjIyNjg0YQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2000-06-07T21:13:14Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2000-06-07T21:13:14Z"}, "message": "configure.in (ac_libiberty_warn_cflags): Add -pedantic.\n\nlibiberty:\n\t* configure.in (ac_libiberty_warn_cflags): Add -pedantic.\n\n\t* choose-temp.c (try, choose_temp_base, make_temp_file): Constify.\n\n\t* cp-demangle.c (demangle_char): Change parameter from char to int.\n\t(demangle_expression, demangle_expr_primary): Remove extra\n\tsemi-colon in prototype.\n\n\t* dyn-string.c (dyn_string_append_char): Change parameter from\n\tchar to int.\n\n\t* memcmp.c (memcmp): Constify.\n\n\t* mkstemps.c (gcc_uint64_t): Mark GNUC `long long' case with\n\t__extension__.\n\n\t* partition.c (elem_compare): Prototype.  Don't cast away\n\tconst-ness.\n\n\t* setenv.c (setenv): Use braces to avoid ambiguous `else'.\n\ninclude:\n\t* demangle.h (demangling_styles): Remove trailing comma in enum.\n\n\t* dyn-string.h (dyn_string_append_char): Change parameter from\n\tchar to int.\n\nFrom-SVN: r34447", "tree": {"sha": "b85046f86e463a4f12518452c722b1a0c944bb2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b85046f86e463a4f12518452c722b1a0c944bb2b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/69197e7e5ead2bebae71ed62532a9d422222684a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69197e7e5ead2bebae71ed62532a9d422222684a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69197e7e5ead2bebae71ed62532a9d422222684a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69197e7e5ead2bebae71ed62532a9d422222684a/comments", "author": null, "committer": null, "parents": [{"sha": "7eb23b1f31ad41140c1a733e55a7982af23f4767", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7eb23b1f31ad41140c1a733e55a7982af23f4767", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7eb23b1f31ad41140c1a733e55a7982af23f4767"}], "stats": {"total": 82, "additions": 59, "deletions": 23}, "files": [{"sha": "9e5617dc429debae1252ac3fba360ebb1a7352f5", "filename": "include/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69197e7e5ead2bebae71ed62532a9d422222684a/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69197e7e5ead2bebae71ed62532a9d422222684a/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=69197e7e5ead2bebae71ed62532a9d422222684a", "patch": "@@ -1,3 +1,10 @@\n+2000-06-07  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* demangle.h (demangling_styles): Remove trailing comma in enum.\n+\n+\t* dyn-string.h (dyn_string_append_char): Change parameter from\n+\tchar to int.\n+\n 2000-06-04  Alex Samuel  <samuel@codesourcery.com>\n \n \t* dyn-string.h: Move here from gcc/dyn-string.h.  Add new functions."}, {"sha": "61dd23071a451e8b27766f3ce5042cb0a3ad5552", "filename": "include/demangle.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69197e7e5ead2bebae71ed62532a9d422222684a/include%2Fdemangle.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69197e7e5ead2bebae71ed62532a9d422222684a/include%2Fdemangle.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fdemangle.h?ref=69197e7e5ead2bebae71ed62532a9d422222684a", "patch": "@@ -59,7 +59,7 @@ extern enum demangling_styles\n   arm_demangling = DMGL_ARM,\n   hp_demangling = DMGL_HP,\n   edg_demangling = DMGL_EDG,\n-  gnu_new_abi_demangling = DMGL_GNU_NEW_ABI,\n+  gnu_new_abi_demangling = DMGL_GNU_NEW_ABI\n } current_demangling_style;\n \n /* Define string names for the various demangling styles. */"}, {"sha": "3e2213e5bc6fc1e0e5e223f6b2e2cbc33157b373", "filename": "include/dyn-string.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69197e7e5ead2bebae71ed62532a9d422222684a/include%2Fdyn-string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69197e7e5ead2bebae71ed62532a9d422222684a/include%2Fdyn-string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fdyn-string.h?ref=69197e7e5ead2bebae71ed62532a9d422222684a", "patch": "@@ -58,7 +58,7 @@ extern dyn_string_t dyn_string_append   PARAMS ((dyn_string_t, dyn_string_t));\n extern dyn_string_t dyn_string_append_cstr   \n                                         PARAMS ((dyn_string_t, const char *));\n extern dyn_string_t dyn_string_append_char\n-                                        PARAMS ((dyn_string_t, char));\n+                                        PARAMS ((dyn_string_t, int));\n extern void dyn_string_substring        PARAMS ((dyn_string_t, \n \t\t\t\t\t\t dyn_string_t, int, int));\n extern int dyn_string_eq                PARAMS ((dyn_string_t, dyn_string_t));"}, {"sha": "a9a15f116f320a0e995e1a43d51c84ce8f8b3c7b", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69197e7e5ead2bebae71ed62532a9d422222684a/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69197e7e5ead2bebae71ed62532a9d422222684a/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=69197e7e5ead2bebae71ed62532a9d422222684a", "patch": "@@ -1,3 +1,26 @@\n+2000-06-07  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* configure.in (ac_libiberty_warn_cflags): Add -pedantic.\n+\t\n+\t* choose-temp.c (try, choose_temp_base, make_temp_file): Constify.\n+\n+\t* cp-demangle.c (demangle_char): Change parameter from char to int.\n+\t(demangle_expression, demangle_expr_primary): Remove extra\n+\tsemi-colon in prototype.\n+\n+\t* dyn-string.c (dyn_string_append_char): Change parameter from\n+\tchar to int.\n+\n+\t* memcmp.c (memcmp): Constify.\n+\n+\t* mkstemps.c (gcc_uint64_t): Mark GNUC `long long' case with\n+\t__extension__.\n+\n+\t* partition.c (elem_compare): Prototype.  Don't cast away\n+\tconst-ness.\n+\n+\t* setenv.c (setenv): Use braces to avoid ambiguous `else'.\n+\t\n 2000-06-07  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* Makefile.in (cp-demangle.o): Depend on $(INCDIR)/demangle.h."}, {"sha": "1a475dd6fb93b91cd2cb2d26416a7d779cec13ac", "filename": "libiberty/choose-temp.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69197e7e5ead2bebae71ed62532a9d422222684a/libiberty%2Fchoose-temp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69197e7e5ead2bebae71ed62532a9d422222684a/libiberty%2Fchoose-temp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fchoose-temp.c?ref=69197e7e5ead2bebae71ed62532a9d422222684a", "patch": "@@ -79,9 +79,11 @@ extern int mkstemps ();\n    If success, DIR is returned.\n    Otherwise NULL is returned.  */\n \n-static char *\n+static const char *try PARAMS ((const char *, const char *));\n+\n+static const char *\n try (dir, base)\n-     char *dir, *base;\n+     const char *dir, *base;\n {\n   if (base != 0)\n     return base;\n@@ -102,7 +104,7 @@ try (dir, base)\n char *\n choose_temp_base ()\n {\n-  char *base = 0;\n+  const char *base = 0;\n   char *temp_filename;\n   int len;\n   static char tmp[] = { DIR_SEPARATOR, 't', 'm', 'p', 0 };\n@@ -147,7 +149,7 @@ char *\n make_temp_file (suffix)\n      const char *suffix;\n {\n-  char *base = 0;\n+  const char *base = 0;\n   char *temp_filename;\n   int base_len, suffix_len;\n   int fd;"}, {"sha": "ef375bbcccd37e1e8891cc0e703292230ea1850f", "filename": "libiberty/configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69197e7e5ead2bebae71ed62532a9d422222684a/libiberty%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69197e7e5ead2bebae71ed62532a9d422222684a/libiberty%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfigure?ref=69197e7e5ead2bebae71ed62532a9d422222684a", "patch": "@@ -845,7 +845,7 @@ echo \"$ac_t\"\"$ac_cv_prog_gcc\" 1>&6\n \n if test $ac_cv_prog_gcc = yes; then\n   GCC=yes\n-  ac_libiberty_warn_cflags='-W -Wall -Wtraditional'\n+  ac_libiberty_warn_cflags='-W -Wall -Wtraditional -pedantic'\n   ac_test_CFLAGS=\"${CFLAGS+set}\"\n   ac_save_CFLAGS=\"$CFLAGS\"\n   CFLAGS="}, {"sha": "6ad054a6448c0aaecf8e3d730ba840e1077ef6c9", "filename": "libiberty/configure.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69197e7e5ead2bebae71ed62532a9d422222684a/libiberty%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69197e7e5ead2bebae71ed62532a9d422222684a/libiberty%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfigure.in?ref=69197e7e5ead2bebae71ed62532a9d422222684a", "patch": "@@ -55,7 +55,7 @@ AC_PROG_CC_GNU\n \n if test $ac_cv_prog_gcc = yes; then\n   GCC=yes\n-  ac_libiberty_warn_cflags='-W -Wall -Wtraditional'\n+  ac_libiberty_warn_cflags='-W -Wall -Wtraditional -pedantic'\n dnl Check whether -g works, even if CFLAGS is set, in case the package\n dnl plays around with CFLAGS (such as to build both debugging and\n dnl normal versions of a library), tasteless as that idea is."}, {"sha": "2feac6c30efed0f45ba450ac44dfe1520e89a14a", "filename": "libiberty/cp-demangle.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69197e7e5ead2bebae71ed62532a9d422222684a/libiberty%2Fcp-demangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69197e7e5ead2bebae71ed62532a9d422222684a/libiberty%2Fcp-demangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcp-demangle.c?ref=69197e7e5ead2bebae71ed62532a9d422222684a", "patch": "@@ -713,7 +713,7 @@ demangling_delete (dm)\n    structure.  */\n \n static status_t demangle_char\n-  PARAMS ((demangling_t, char));\n+  PARAMS ((demangling_t, int));\n static status_t demangle_mangled_name \n   PARAMS ((demangling_t));\n static status_t demangle_encoding\n@@ -765,11 +765,11 @@ static status_t demangle_literal\n static status_t demangle_template_arg\n   PARAMS ((demangling_t));\n static status_t demangle_expression\n-  PARAMS ((demangling_t));;\n+  PARAMS ((demangling_t));\n static status_t demangle_scope_expression\n   PARAMS ((demangling_t));\n static status_t demangle_expr_primary\n-  PARAMS ((demangling_t));;\n+  PARAMS ((demangling_t));\n static status_t demangle_substitution\n   PARAMS ((demangling_t, int *, int *));\n static status_t demangle_local_name\n@@ -789,7 +789,7 @@ static status_t cp_demangle\n static status_t\n demangle_char (dm, c)\n      demangling_t dm;\n-     char c;\n+     int c;\n {\n   static char *error_message = NULL;\n "}, {"sha": "2ae64ebb6c210087f5c0a1b92784e06a57455791", "filename": "libiberty/dyn-string.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69197e7e5ead2bebae71ed62532a9d422222684a/libiberty%2Fdyn-string.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69197e7e5ead2bebae71ed62532a9d422222684a/libiberty%2Fdyn-string.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fdyn-string.c?ref=69197e7e5ead2bebae71ed62532a9d422222684a", "patch": "@@ -275,7 +275,7 @@ dyn_string_append_cstr (ds, s)\n dyn_string_t \n dyn_string_append_char (ds, c)\n      dyn_string_t ds;\n-     char c;\n+     int c;\n {\n   /* Make room for the extra character.  */\n   dyn_string_resize (ds, ds->length + 1);"}, {"sha": "0fd21cad11edcee49c403dbac179ed7efccd56cf", "filename": "libiberty/memcmp.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69197e7e5ead2bebae71ed62532a9d422222684a/libiberty%2Fmemcmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69197e7e5ead2bebae71ed62532a9d422222684a/libiberty%2Fmemcmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fmemcmp.c?ref=69197e7e5ead2bebae71ed62532a9d422222684a", "patch": "@@ -25,8 +25,8 @@ int\n DEFUN(memcmp, (str1, str2, count),\n       const PTR str1 AND const PTR str2 AND size_t count)\n {\n-  register unsigned char *s1 = (unsigned char*)str1;\n-  register unsigned char *s2 = (unsigned char*)str2;\n+  register const unsigned char *s1 = (const unsigned char*)str1;\n+  register const unsigned char *s2 = (const unsigned char*)str2;\n \n   while (count-- > 0)\n     {"}, {"sha": "6ef526ece3dbcf30f8617dbd608f9948fd06762e", "filename": "libiberty/mkstemps.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69197e7e5ead2bebae71ed62532a9d422222684a/libiberty%2Fmkstemps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69197e7e5ead2bebae71ed62532a9d422222684a/libiberty%2Fmkstemps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fmkstemps.c?ref=69197e7e5ead2bebae71ed62532a9d422222684a", "patch": "@@ -39,7 +39,7 @@\n \n /* We need to provide a type for gcc_uint64_t.  */\n #ifdef __GNUC__\n-typedef unsigned long long gcc_uint64_t;\n+__extension__ typedef unsigned long long gcc_uint64_t;\n #else\n typedef unsigned long gcc_uint64_t;\n #endif"}, {"sha": "6975af49594042a3bd33cdc03f32595ad97fe8fc", "filename": "libiberty/partition.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69197e7e5ead2bebae71ed62532a9d422222684a/libiberty%2Fpartition.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69197e7e5ead2bebae71ed62532a9d422222684a/libiberty%2Fpartition.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fpartition.c?ref=69197e7e5ead2bebae71ed62532a9d422222684a", "patch": "@@ -34,6 +34,8 @@\n #include \"libiberty.h\"\n #include \"partition.h\"\n \n+static int elem_compare PARAMS ((const void *, const void *));\n+\n /* Creates a partition of NUM_ELEMENTS elements.  Initially each\n    element is in a class by itself.  */\n \n@@ -128,8 +130,8 @@ elem_compare (elem1, elem2)\n      const void *elem1;\n      const void *elem2;\n {\n-  int e1 = * (int *) elem1;\n-  int e2 = * (int *) elem2;\n+  int e1 = * (const int *) elem1;\n+  int e2 = * (const int *) elem2;\n   if (e1 < e2)\n     return -1;\n   else if (e1 > e2)"}, {"sha": "a90c83ad78eea7465bd3a4f33e68aee51a0eab68", "filename": "libiberty/setenv.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69197e7e5ead2bebae71ed62532a9d422222684a/libiberty%2Fsetenv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69197e7e5ead2bebae71ed62532a9d422222684a/libiberty%2Fsetenv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fsetenv.c?ref=69197e7e5ead2bebae71ed62532a9d422222684a", "patch": "@@ -72,11 +72,13 @@ setenv (name, value, replace)\n \n   size = 0;\n   if (__environ != NULL)\n-    for (ep = __environ; *ep != NULL; ++ep)\n-      if (!strncmp (*ep, name, namelen) && (*ep)[namelen] == '=')\n-\tbreak;\n-      else\n-\t++size;\n+    {\n+      for (ep = __environ; *ep != NULL; ++ep)\n+\tif (!strncmp (*ep, name, namelen) && (*ep)[namelen] == '=')\n+\t  break;\n+\telse\n+\t  ++size;\n+    }\n \n   if (__environ == NULL || *ep == NULL)\n     {"}]}