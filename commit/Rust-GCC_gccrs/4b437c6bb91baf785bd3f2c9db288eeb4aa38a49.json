{"sha": "4b437c6bb91baf785bd3f2c9db288eeb4aa38a49", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGI0MzdjNmJiOTFiYWY3ODViZDNmMmM5ZGIyODhlZWI0YWEzOGE0OQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-04-06T09:36:45Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-04-06T09:36:45Z"}, "message": "Resync\n\nFrom-SVN: r123607", "tree": {"sha": "a718059a25162dd062f3d7629430097792527f1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a718059a25162dd062f3d7629430097792527f1f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b437c6bb91baf785bd3f2c9db288eeb4aa38a49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b437c6bb91baf785bd3f2c9db288eeb4aa38a49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b437c6bb91baf785bd3f2c9db288eeb4aa38a49", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b437c6bb91baf785bd3f2c9db288eeb4aa38a49/comments", "author": null, "committer": null, "parents": [{"sha": "87ace7279eb8af4417a5853ca4717f9d86857c77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87ace7279eb8af4417a5853ca4717f9d86857c77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87ace7279eb8af4417a5853ca4717f9d86857c77"}], "stats": {"total": 1776, "additions": 1776, "deletions": 0}, "files": [{"sha": "7a3a09628a26d955ccf2f896e1bc620bda7da28a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 1776, "deletions": 0, "changes": 1776, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b437c6bb91baf785bd3f2c9db288eeb4aa38a49/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b437c6bb91baf785bd3f2c9db288eeb4aa38a49/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=4b437c6bb91baf785bd3f2c9db288eeb4aa38a49", "patch": "@@ -1,3 +1,1779 @@\n+2007-04-06  Javier Miranda  <miranda@adacore.com>\n+\t    Matt Heaney  <heaney@adacore.com>\n+\t    Robert Dewar  <dewar@adacore.com>\n+\n+\ta-coprnu.ads, a-cohata.ads, a-chtgop.ads, a-chtgop.adb, a-cgcaso.ads,\n+\ta-cgarso.ads, a-secain.ads, a-slcain.ads, a-shcain.ads, a-chtgke.ads,\n+\ta-chtgke.ads, a-coprnu.ads, a-contai.ads, a-chtgke.ads, a-chtgke.adb,\n+\ta-stwiha.ads, a-strhas.ads, a-lfztio.ads, a-liztio.ads, a-llfzti.ads,\n+\ta-llizti.ads, a-sfztio.ads, a-siztio.ads, a-ssizti.ads, a-stzfix.ads,\n+\ta-stzhas.ads, a-szuzha.ads, a-tiunio.ads, a-wwunio.ads, a-ztcoio.ads,\n+\ta-ztinio.ads, a-zttest.ads, a-zzunio.ads, a-astaco.ads, a-charac.ads,\n+\ta-chlat1.ads, ada.ads, a-dynpri.ads, a-flteio.ads, a-fwteio.ads,\n+\ta-inteio.ads, a-intnam.ads, a-ioexce.ads, a-iwteio.ads, a-lfteio.ads,\n+\ta-lfwtio.ads, a-liteio.ads, a-liwtio.ads, a-llftio.ads, a-llfwti.ads,\n+\ta-llitio.ads, a-lliwti.ads, a-ncelfu.ads, a-ngcefu.ads, a-ngelfu.ads,\n+\ta-nlcefu.ads, a-nlcoty.ads, a-nlelfu.ads, a-nllcef.ads, a-nllcty.ads,\n+\ta-nllefu.ads, a-nscefu.ads, a-nscoty.ads, a-nselfu.ads, a-nucoty.ads,\n+\ta-nuelfu.ads, a-numeri.ads, a-sfteio.ads, a-sfwtio.ads, a-siteio.ads,\n+\ta-siwtio.ads, a-ssitio.ads, a-ssiwti.ads, a-storio.ads, a-strfix.ads,\n+\ta-string.ads, a-stwifi.ads, a-titest.ads, a-unccon.ads, a-uncdea.ads,\n+\ta-wtcoio.ads, a-wtinio.ads, a-wttest.ads, calendar.ads, directio.ads,\n+\ti-c.ads, ioexcept.ads, machcode.ads, sequenio.ads, text_io.ads,\n+\tunchconv.ads, unchdeal.ads, a-widcha.ads, a-zchara.ads, a-stboha.ads,\n+\ta-stfiha.ads, a-coteio.ads, a-envvar.ads, a-lcteio.ads, a-llctio.ads,\n+\ta-scteio.ads, a-swbwha.ads, a-swfwha.ads, a-szbzha.ads, a-szfzha.ads,\n+\ta-tiboio.ads, a-wwboio.ads, a-zzboio.ads, a-dispat.ads, a-tgdico.ads,\n+\texpander.adb, g-socket.ads, par-labl.adb, sinput-c.adb, s-tarest.ads,\n+\ts-stchop.ads, g-expect-vms.adb, s-taprop-lynxos.adb,\n+\ts-taprop-tru64.adb, s-taprop-irix.adb,\n+\ts-taprop-hpux-dce.adb, s-traceb-hpux.adb,\n+\ts-taprop-linux.adb, s-taprop-dummy.adb, s-osprim-unix.adb,\n+\ts-osprim-solaris.adb, s-taprop-solaris.adb, s-taprop-vms.adb,\n+\ts-osprim-mingw.adb, s-taprop-mingw.adb, s-osprim-posix.adb, \n+\ts-taprop-posix.adb, a-exexpr-gcc.adb, a-ststio.adb, a-ststio.ads, \n+\ta-textio.adb, a-textio.ads, a-tideau.adb, a-tideau.ads, a-witeio.adb, \n+\ta-witeio.ads, a-wtdeau.adb, a-wtdeau.ads, g-calend.adb, g-calend.ads, \n+\tg-dirope.adb, g-expect.ads, gnatchop.adb, g-spipat.adb, g-spipat.ads, \n+\ts-direio.adb, s-direio.ads, s-fatgen.adb, s-fatgen.ads, s-parint.adb, \n+\ts-sequio.adb, s-sequio.ads, s-taprop.ads, s-valdec.adb, s-valdec.ads, \n+\ts-valint.adb, s-valint.ads, s-vallld.adb, s-vallld.ads, s-vallli.adb, \n+\ts-vallli.ads, s-valllu.adb, s-valllu.ads, s-valrea.adb, s-valrea.ads, \n+\ts-valuns.adb, s-valuns.ads, s-valuti.adb, s-valuti.ads, xref_lib.adb, \n+\ts-stchop.adb, i-vxwork-x86.ads, a-crbtgo.ads, a-crbtgo.adb, \n+\ta-coorse.ads, a-coorse.adb, a-cohama.ads, a-cohama.adb, a-ciorse.ads, \n+\ta-ciorse.adb, a-cihama.ads, a-cihama.adb, a-chtgop.ads, a-chtgop.ads, \n+\ta-coormu.adb, a-ciormu.adb, a-cihase.adb, a-cihase.ads, a-cohase.adb, \n+\ta-cohase.ads, a-swuwha.ads, a-ciormu.ads, a-coormu.ads, a-rbtgso.ads,\n+\ta-stunha.ads, a-ciorma.adb, a-coorma.adb, a-ztdeau.adb, a-ztdeau.ads, \n+\ta-ztexio.adb, a-ztexio.ads: Addition of null-exclusion to anonymous\n+\taccess types.\n+\tUpdate documentation.\n+\tMinor rewording.\n+\n+2007-04-06  Robert Dewar  <dewar@adacore.com>\n+\n+\t* system-linux-ia64.ads, system-freebsd-x86.ads, system-lynxos-ppc.ads,\n+\tsystem-lynxos-x86.ads, system-linux-x86_64.ads, system-tru64.ads,\n+\tsystem-vxworks-sparcv9.ads, system-solaris-x86.ads, system-irix-o32.ads,\n+\tsystem-irix-n32.ads, system-hpux.ads, system-vxworks-m68k.ads,\n+\tsystem-linux-x86.ads, system-vxworks-mips.ads, system-interix.ads,\n+\tsystem-solaris-sparc.ads, system-solaris-sparcv9.ads, system-vms.ads,\n+\tsystem-mingw.ads, system-vms-zcx.ads, system-vxworks-ppc.ads,\n+\tsystem-vxworks-alpha.ads, system-vms_64.ads, system-darwin-ppc.ads,\n+\tsystem-vxworks-x86.ads, system-linux-ppc.ads, system-linux-hppa.ads,\n+        system-hpux-ia64.ads, targparm.adb,\n+\ttargparm.ads (Functions_Return_By_DSP_On_Target): Removed\n+\n+\t* system.ads: Move Functions_Return_By_DSP to obsolete section,\n+\tkept for bootstrap purposes only.\n+\n+2007-04-06  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* s-osinte-lynxos-3.ads, s-osinte-hpux.ads, s-osinte-solaris-posix.ads,\n+\ts-osinte-freebsd.ads, s-osinte-aix.ads, s-osinte-darwin.ads,\n+\ts-taprop-posix.adb (Create_Task): Fix handling of Task_Info.\n+\t(PTHREAD_SCOPE_PROCESS, PTHREAD_SCOPE_SYSTEM): New constants.\n+\n+2007-04-06  Robert Dewar  <dewar@adacore.com>\n+\n+\t* a-except.adb, a-except.ads, a-except-2005.ads, a-except-2005.adb\n+\t(Local_Raise): New dummy procedure called when a raise is converted\n+\tto a local goto. Used for debugger to detect that the exception\n+\tis raised.\n+\n+\t* debug.adb: Document new d.g flag (expand local raise statements to\n+\tgotos even if pragma Restriction (No_Exception_Propagation) is not set)\n+\n+\t* exp_sel.adb: Use Make_Implicit_Exception_Handler\n+\n+\t* exp_ch11.adb (Expand_Exception_Handlers): Use new flag -gnatw.x to\n+\tsuppress warnings for unused handlers.\n+\t(Warn_If_No_Propagation):  Use new flag -gnatw.x to suppress\n+\twarnings for raise statements not handled locally.\n+\t(Get_RT_Exception_Entity): New function\n+\t(Get_Local_Call_Entity): New function\n+\t(Find_Local_Handler): New function\n+\t(Warn_If_No_Propagation): New procedure\n+\t(Expand_At_End_Handler): Call Make_Implicit_Handler\n+\t(Expand_Exception_Handlers): Major additions to deal with local handlers\n+\t(Expand_N_Raise_Constraint_Error, Expand_N_Raise_Program_Error,\n+\tExpand_N_Raise_Storage_Error, (Expand_N_Raise_Statement): Add handling\n+\tfor local raise\n+\n+\t* exp_ch11.ads (Get_RT_Exception_Entity): New function\n+\t(Get_Local_Call_Entity): New function\n+\n+\t* gnatbind.adb (Restriction_List): Add No_Exception_Propagation to list\n+\tof restrictions that the binder will never suggest adding.\n+\n+\t* par-ch11.adb (P_Exception_Handler): Set Local_Raise_Statements field\n+\tto No_Elist.\n+\n+\t* restrict.adb (Check_Restricted_Unit): GNAT.Current_Exception may not\n+\tbe with'ed in the presence of pragma Restriction\n+\t(No_Exception_Propagation).\n+\n+\t* sem.adb (Analyze): Add entries for N_Push and N_Pop nodes\n+\n+\t* sem_ch11.adb (Analyze_Exception_Handler): If there is a choice\n+\tparameter, then the handler is not a suitable target for a local raise,\n+\tand this is a violation of restriction No_Exception_Propagation.\n+\t(Analyze_Handled_Statements): Analyze choice parameters in exception\n+\thandlers before analyzing statement sequence (needed for proper\n+\tdetection of local raise statements).\n+\t(Analyze_Raise_Statement): Reraise statement is a violation of the\n+\tNo_Exception_Propagation restriction.\n+\n+\t* s-rident.ads: Add new restriction No_Exception_Propagation\n+\n+\t* tbuild.ads, tbuild.adb (Make_Implicit_Exception_Handler): New\n+\tfunction, like Make_Exception_Handler but sets Local_Raise_Statements\n+\tto No_List.\n+\t(Add_Unique_Serial_Number): Deal with case where this is called during\n+\tprocessing of configuration pragmas.\n+\n+2007-04-06  Thomas Quinot  <quinot@adacore.com>\n+\t    Pat Rogers  <rogers@adacore.com>\n+\t    Pascal Obry  <obry@adacore.com>\n+\n+\t* g-stsifd-sockets.adb: New file.\n+\n+\t* g-socthi.ads, g-socket.adb, g-socthi-vxworks.adb,\n+\tg-socthi-vxworks.ads, g-socthi-mingw.ads, g-socthi-vms.ads,\n+\tg-socthi-vms.adb: Move signalling\n+\tfd management to a nested package, so that they can conveniently be\n+\tmoved to a subunit that is shared across Windows, VMS, and VxWorks\n+\t(Ada implementation) or completed with imported bodies from socket.c\n+\t(UNIX case).\n+\t(Read_Signalling_Fd, Write_Signalling_Fd, Create_Signalling_Fds): New\n+\tsubprograms.\n+\t(Check_Selector): Use Read_Signalling_Fd to read and discard data from\n+\tthe signalling file descriptor.\n+\t(Abort_Selector): Use Write_Signalling_Fd to write dummy data to the\n+\tsignalling file descriptor.\n+\t(Create_Selector): Use new C-imported subprogram Create_Signalling_Fds\n+\tinstead of creating a pair of sockets for signalling here.\n+\n+\t* g-socthi.adb: Ditto.\n+\tSet the runtime process to ignore SIGPIPEs on platforms that support\n+\tneither SO_NOSIGPIPE nor MSG_NOSIGNAL functionality.\n+\n+\t* g-socthi-mingw.adb: Ditto.\n+\t(WS_Version): Use Windows 2.2.\n+\tUse Winsock 2.2 (instead of 1.1) for the GNAT.Socket API.\n+\n+\t* g-soliop-mingw.ads: Link with ws2_32 for Windows 2.x support.\n+\tUse Winsock 2.2 (instead of 1.1) for the GNAT.Socket API.\n+\n+\t* Makefile.in: New libgnat pair g-stsifd.adb<g-stsifd-sockets.adb.\n+\tadded GNAT byte swapping facility\n+\tUpdate FreeBSD THREADSLIB from -lc_r to -lpthread, for FreeBSD 6.\n+\n+\t* g-bytswa.adb, g-bytswa-x86.adb, g-bytswa.ads: New files.\n+\n+\t* socket.c (__gnat_read_signalling_fd, __gnat_write_controlling_fd):\n+\tNew subprograms.\n+\t(__gnat_create_signalling_fds): New subprogram.\n+\tSet the runtime process to ignore SIGPIPEs on platforms that support\n+\tneither SO_NOSIGPIPE nor MSG_NOSIGNAL functionality.\n+\n+2007-04-06  Hristian Kirtchev  <kirtchev@adacore.com>\n+\t    Vincent Celier  <celier@adacore.com>\n+\n+\t* a-calend-vms.ads, a-calend.ads, a-calend.adb, a-calend-vms.adb:\n+\tNew version of Ada.Calendar which supports the new upper bound of Ada\n+\ttime (2399-12-31 86_399.999999999).\n+\tThe following modifications have been made to the package:\n+\t - New representation of time as count of nanoseconds since the start of\n+\t   Ada time (1901-1-1 0.0).\n+\t - Target independent Split and Time_Of routines which service both\n+\t   Ada 95 and Ada 2005 code.\n+\t - Target independent interface to the Ada 2005 children of Calendar.\n+\t - Integrated leap seconds into Ada 95 and Ada 2005 mode.\n+\t - Handling of non-leap centenial years.\n+\t - Updated clock function.\n+\t - Updated arithmetic and comparison operators.\n+\n+\t* a-caldel.adb (To_Duration): Add call to target independent routine in\n+\tAda.Calendar to handle the conversion of time to duration.\n+\n+\t* sysdep.c (__gnat_localtime_tzoff): Test timezone before setting off\n+\t(UTC Offset).\n+\tIf timezone is obviously incorrect (outside of -14 hours .. 14 hours),\n+\tset off to 0.\n+\t(__gnat_localtime_tzoff for Lynx and VxWorks): Even though these\n+\ttargets do not have a natural time zone, GMT is used as a default.\n+\t(__gnat_get_task_options): New.\n+\n+\t* a-direct.adb (Modification_Time): Add with and use clauses for\n+\tAda.Calendar and Ada.\n+\tCalendar.Formatting. Remove with clause for Ada.Unchecked_Conversion\n+\tsince it is no longer needed.\n+\t(Duration_To_Time): Removed.\n+\t(OS_Time_To_Long_Integer): Removed.\n+\t(Modification_Time): Rewritten to use Ada.Calendar and Ada.Calendar.\n+\tFormatting Time_Of routines which automatically handle time zones,\n+\tbuffer periods and leap seconds.\n+\n+\t* a-calari.ads, a-calari.adb (\"+\", \"-\", Difference): Add calls to\n+\ttarget independent routines in Ada.Calendar.\n+\n+\t* a-calfor.ads, a-calfor.adb: \n+\tCode cleanup and addition of validity checks in various routines.\n+\t(Day_Of_Week, Split, Time_Of): Add call to target independent routine in\n+\tAda.Calendar.\n+\n+\t* a-catizo.ads, a-catizo.adb (UTC_Time_Offset): Add call to target\n+\tindependent routine in Ada.Calendar.\n+\n+2007-04-06  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* adaint.c: \n+\t(convert_addresses): Adjust prototype and dummy definition to expect an\n+\t extra file_name argument.\n+\n+\t* gmem.c (__gnat_convert_addresses): Wrapper to convert_addresses,\n+\tfilling the now expected file_name argument with the appropriate\n+\targv[0] expansion.\n+\t(__gnat_gmem_a2l_initialize, __gnat_gmem_read_next_frame): Use it.\n+\t(tracebk): Array of void * instead of char *, corresponding to what\n+\t convert_addresses expects.\n+\t(exename): New static global, to hold the executable file name to be\n+\tused in all convert_addresses invocations.\n+\t(gmem_read_backtrace, __gnat_gmem_symbolic): Account for tracebk type\n+\tchange.\n+\t(__gnat_gmem_a2l_initialize): Resolve exename.\n+\t(__gnat_convert_addresses): Use exename as the convert_addresses\n+\tfile_name argument.\n+\n+\t* g-trasym.adb (Symbolic_Traceback): Adjust signature of imported\n+\t\"convert_addresses\", now expecting a filename argument. Import the\n+\tnecessary entities to compute the filename to use and pass it to\n+\tconvert_addresses.\n+\n+2007-04-06  Matt Gingell  <gingell@adacore.com>\n+\n+\t* system-aix.ads: Back out previous change.\n+\t(Functions_Return_By_DSP): Removed\n+\n+2007-04-06  Pascal Obry  <obry@adacore.com>\n+\n+\t* s-osprim-mingw.adb (Timed_Delay): Use the right clock (standard one\n+\tor the monotonic used by Ada.Real_Time) to compute the sleep duration\n+\ton Windows.\n+\n+2007-04-06  Jose Ruiz  <ruiz@adacore.com>\n+\n+\t* s-osinte-vxworks.ads, s-osinte-vxworks.adb (VX_FP_TASK): Remove this\n+\tfunction. Its value changes in different VxWorks versions, and it is\n+\tnow handled by the function __gnat_get_task_options.\n+\n+\t* s-taprop-vxworks.adb (Create_Task): Call the function\n+\t__gnat_get_task_options to get the required options for creating a task.\n+\n+2007-04-06  Pascal Obry  <obry@adacore.com>\n+\t    Thomas Quinot  <quinot@adacore.com>\n+\n+\t* adaint.c: Replace all occurences of S2WS to S2WSU (Unicode) when\n+\tdealing with filename.\n+\t(__gnat_fopen): Call the proper macro (8bits or UTF8) to convert the\n+\tfilename from a standard string to a wide-string depending on the\n+\tencoding value.\n+\t(__gnat_freopen): Idem.\n+\t(__gnat_current_time): New function (wrapper for time(3) standard C\n+\tfunction).\n+\n+\t* g-os_lib.ads (Current_Time): New function. Returns the current\n+\tsystem time as an OS_Time value.\n+\n+\t* s-osprim.ads (Clock): Add more precise definition of UNIX epoch.\n+\t(Monotonic_Clock): Same.\n+\n+2007-04-06  Quentin Ochem  <ochem@adacore.com>\n+\n+\t* ali.ads, ali.adb (Get_Nat): Raise an exception if the file cursor is\n+\tnot on a natural.\n+\t(Scan_ALI): Cancel the xref line if there has been a reading ALI error.\n+\n+2007-04-06  Jose Ruiz  <ruiz@adacore.com>\n+\n+\t* a-retide.adb: Add elaboration code to ensure that the tasking run\n+\ttime is initialized when using delay operations even when no task is\n+\tcreated.\n+\n+2007-04-06  Javier Miranda  <miranda@adacore.com>\n+\n+\t* a-tags.ads, a-tags.adb (Object_Specific_Data): Remove\n+\tcomponent Num_Prim_Ops.\n+\t(Set_Num_Prim_Ops): Removed.\n+\tRemove all the assertions because all the routines of this\n+\tpackage are inline always.\n+\t(Get_Offset_Index): Add support to primary dispatch tables.\n+\tMove the documentation about the dispatch table to a-tags.ads\n+\t(Set_External_Tag): Removed\n+\t(Inherit_TSD): Removed.\n+\t(Interface_Data_Element, Interfaces_Array, Interface_Data): Declarations\n+\tmoved to a-tags.ads\n+\t(Displace, IW_Membership, Inherit_TSD, Interface_Ancestor_Tags,\n+\tRegister_Interface_Tag, Set_Offset_To_Top): Update all the occurrences\n+\tof the TSD field \"Table\" because this field has been renamed to\n+\t\"Ifaces_Table\".\n+\t(Inherit_CPP_DT): Removed.\n+\t(K_Typeinfo, K_Offset_To_Top, K_Tagged_Kind, K_Signature,\n+\tCstring, Tag_Table, Type_Specific_Data, Dispatch_Table): These\n+\tdeclarations have been moved to a-tags.ads\n+\t(Check_Size): Removed.\n+\t(Expanded_Name): Updated to get access to the new field of TSD\n+\tcontaining the address of the expanded name.\n+\t(Get_Access_Level/Set_Access_Level): Removed.\n+\t(Get_Predefined_Prim_Op_Address): Removed.\n+\t(Set_Predefined_Prim_Op_Address): Removed.\n+\t(Get_Prim_Op_Address/Set_Prim_Op_Address): Removed.\n+\t(Get_Remotely_Callable/Set_Remotely_Callable): Removed.\n+\t(Set_Expanded_Name): Removed.\n+\t(Inherit_DT): Removed.\n+\t(Inherit_CPP_DT): Removed.\n+\t(Set_RC_Offset): Removed.\n+\t(Set_TSD): Removed.\n+\t(Base_Address): New function that displaces \"this\" to point to the base\n+\tof the object (that is, to point to the primary tag of the object).\n+\n+2007-04-06  Ed Schonberg  <schonberg@adacore.com>\n+\t    Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_ch3.ads, exp_ch3.adb (Analyze_N_Full_Type_Declaration): For an\n+\tanonymous access component, do not create a master_id if type already\n+\thas one, as may happen if the type is a subcomponent of a packed array\n+\ttype.\n+\t(Build_Init_Procedure, Component_Needs_Simple_Initialization,\n+\tInitialize_Tag): Remove code associated with the old CPP pragmas.\n+\tCPP_Virtual and CPP_Vtable are no longer supported.\n+\t(Build_Offset_To_Top_Internal): Add support for concurrent record types\n+\t(Build_Offset_To_Top_Functions): Add support for concurrent record types\n+\t(Freeze_Record_Type): Remove call to\n+\tInit_Predefined_Interface_Primitives.\n+\t(Init_Secondary_Tags.Initialize_Tag): New subprogram containing all the\n+\tcode required to initialize the tags of the secondary dispatch tables.\n+\tThis leaves the algoritm more clear.\n+\t(Init_Secondary_Tags): Add support for concurrent record types\n+\t(Make_Predefined_Primitive_Specs): Code cleanup.\n+\t(Predefined_Primitive_Bodies): Code cleanup.\n+\t(Build_Master_Renaming): New local subprogram.\n+\t(Expand_N_Full_Type_Declaration): Build the master_id associated with\n+\tanonymous access to task type components.\n+\t(Expand_N_Subtype_Indication): The bounds of a range constraint in a\n+\tsubtype indication are resolved during analysis, and must not be done\n+\there.\n+\t(Stream_Operation_OK): Check Restriction_Active before RTE_Available.\n+\n+2007-04-06  Geert Bosch  <bosch@adacore.com>\n+\t    Ed Schonberg  <schonberg@adacore.com>\n+\t    Javier Miranda  <miranda@adacore.com>\n+\t    Bob Duff  <duff@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_N_Type_Conversion): Remove special processing\n+\tfor conversion of a Float_Type'Truncation to integer.\n+\n+\t* exp_attr.adb (Is_Inline_Floating_Point_Attribute): New function to\n+\tcheck if a node is an attribute that can be handled directly by the\n+\tback end.\n+\t(Expand_N_Attribute_Reference): Suppress expansion of floating-point\n+\tattributes that can be handled directly by the back end.\n+\t(Expand_N_Attribute_Reference, case 'Access and 'Unchecked_Access):\n+\tuse new predicate Is_Access_Protected_Subprogram_Type.\n+\t(Expand_N_Attribute_Reference, case 'Write): The reference is legal for\n+\tand Unchecked_Union if it is generated as part of the default  Output\n+\tprocedure for a type with default discriminants.\n+\t(Expand_N_Attribute_Reference): Avoid the expansion of dispatching calls\n+\tif we are compiling under restriction No_Dispatching_Calls.\n+\t(Constrained): Use Underlying_Type, in case the type is private without\n+\tdiscriminants, but the full type has discriminants.\n+\t(Expand_N_Attribute_Reference): Replace call to Get_Access_Level by\n+\tcall to Build_Get_Access_Level.\n+\t(Expand_N_Attribute_Reference): The use of 'Address with class-wide\n+\tinterface objects requires a call to the run-time subprogram that\n+\treturns the base address of the object.\n+\t(Valid_Conversion): Improve error message on illegal attempt to store\n+\tan anonymous access to subprogram value into a record component.\n+\n+\t* sem_res.adb (Resolve_Equality_Op): Detect ambiguity for \"X'Access =\n+\tnull\".\n+\t(Simplify_Type_Conversion): New procedure that performs simplification\n+\tof Int_Type (Float_Type'Truncation (X)).\n+\t(Resolve_Type_Conversion): Call above procedure after resolving operand\n+\tand before performing checks. This replaces the existing ineffective\n+\tcode in Exp_Ch4.\n+\t(Set_String_Literal_Subtype): When creating the internal static lower\n+\tbound subtype for a string literal, use a newly created copy of the\n+\tsubtree representing the lower bound.\n+\t(Resolve_Call): Exclude build-in-place function calls from transient\n+\tscope treatment. Update comments to describe this exception.\n+\t(Resolve_Equality_Op): In case of dispatching call check violation of\n+\trestriction No_Dispatching_Calls.\n+\t(Resolve_Call): If the call returns an array, the context imposes the\n+\tcomponent type of the array, and the function has one non-defaulted\n+\tparameter, rewrite the call as the indexing of a call with a single\n+\tparameter, to handle an Ada 2005 syntactic ambiguity for calls written\n+\tin prefix form.\n+\t(Resolve_Actuals): If an actual is an allocator for an access parameter,\n+\tthe master of the created object is the innermost enclosing statement.\n+\t(Remove_Conversions): For a binary operator, check if type of second\n+\tformal is numeric, to check if an abstract interpretation is present\n+\tin the case of exponentiation as well.\n+\n+2007-04-06  Ed Schonberg  <schonberg@adacore.com>\n+\t    Bob Duff  <duff@adacore.com>\n+\n+\t* atree.h, atree.ads, atree.adb (Copy_Node_With_Replacement): When\n+\tcopying a parameter list in a call, set properly the First_Named_Formal\n+\tand Next_Named_Formal fields in the new list and in the enclosing call.\n+\t(Watch_Node,New_Node_Breakpoint,New_Node_Debugging_Output): Shorten\n+\tnames, to ease typing in the debugger. Improve comments.\n+\t(Watch_Node): New variable, intended to be set in the debugger.\n+\t(New_Node_Breakpoint): New do-nothing procedure to set a breakpoint on,\n+\tcalled when the watched node is created.\n+\t(New_Node_Debugging_Output): Combined version of local procedures\n+\tNew_Node_Debugging_Output and New_Entity_Debugging_Output, now global,\n+\twith a parameter so that conditional breakpoints like \"if Node = 12345\"\n+\twork.\n+\t(New_Node, New_Entity): Call the global New_Node_Debugging_Output.\n+\tAdd Elist1 function\n+\n+2007-04-06  Thomas Quinot  <quinot@adacore.com>\n+\t    Ed Schonberg  <schonberg@adacore.com>\n+\t    Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* checks.ads, checks.adb (Selected_Range_Checks): No range check is\n+\trequired for a conversion between two access-to-unconstrained-array\n+\ttypes.\n+\t(Expr_Known_Valid): Validity checks do not apply to discriminants, but\n+\tto discriminant constraints on discriminant objects. This rule must\n+\tapply as well to discriminants of protected types in private components.\n+\t(Null_Exclusion_Static_Checks): If No_Initialization is set on an\n+\tobject of a null-excluding access type then don't require the\n+\tthe object declaration to have an expression and don't emit a\n+\trun-time check.\n+\n+2007-04-06  Arnaud Charlet  <charlet@adacore.com>\n+\t    Eric Botcazou <botcazou@adacore.com>\n+\n+\t* gnatvsn.ads, comperr.adb (Get_Gnat_build_Type): Renamed Build_Type\n+\tand made constant.\n+\n+\t* comperr.ads, comperr.adb (Compiler_Abort): Add third parameter\n+\tFallback_Loc. Use it as the sloc info when Current_Error_Node doesn't\n+\tcarry any.\n+\n+\t* fe.h (Compiler_Abort): Add third parameter.\n+\n+\t* misc.c (internal_error_function): Build third argument from current\n+\tinput location and pass it to Compiler_Abort.\n+\n+2007-04-06  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* cstand.adb (Create_Standard): When the target's storage unit size is\n+\tgreater than a byte, set Has_Non_Standard_Rep and Has_Pragma_Pack on\n+\tStandard_String.\n+\n+2007-04-06  Nicolas Roche  <roche@adacore.com>\n+\n+\t* cstreams.c (__gnat_full_name): Fix issues on VxWorks 6.x for which\n+\tabsolute path can have the following form: device:/a/b. In this case\n+\t'/' should be inserted between the path and the filename.\n+\n+2007-04-06  Olivier Hainque  <hainque@adacore.com>\n+\t    Eric Botcazou <botcazou@adacore.com>\n+\n+\t* decl.c (gnat_to_gnu_entity) <E_Constant>: Associate an external\n+\tVAR_DECL to a CONST_DECL we make for a public constant when we know the\n+\tcorresponding definition has created the so made visible variable.\n+\tHandle anonymous access to protected subprogram.\n+\t(gnat_to_gnu_entity) <E_Variable>: Do not make the underlying type of an\n+\tobject with an address clause volatile.  Re-enable original fix.\n+\t<E_Subprogram_Type>: Set TYPE_REF_CAN_ALIAS_ALL on the reference type\n+\ttoo.\n+\t(gnat_to_gnu_entity) <E_Class_Wide_Type>: Retrieve the TYPE_DECL\n+\tassociated with either the Equivalent or Root type, instead of the\n+\tnaked type node.\n+\t(gnat_to_gnu_entity): Manually mark the top of the DECL_FIELD_OFFSET\n+\tsubtree for every field of a global record type.\n+\t(gnat_to_gnu_entity) <E_Record_Subtype>: If the subtype has\n+\tdiscriminants, invoke again variable_size on its newly computed sizes.\n+\n+2007-04-06  Robert Dewar  <dewar@adacore.com>\n+\t    Thomas Quinot  <quinot@adacore.com>\n+\t    Ed Schonberg  <schonberg@adacore.com>\n+\t    Bob Duff  <duff@adacore.com>\n+\n+\t* einfo.ads, einfo.adb: (First_Component_Or_Discriminant): New function\n+\t(Next_Component_Or_Discriminant): New function and procedure\n+\t(First_Index, First_Literal, Master_Id,\n+\tSet_First_Index, Set_First_Literal, Set_Master_Id):\n+\tAdd missing Ekind assertions.\n+\t(Is_Access_Protected_Subprogram_Type): New predicate.\n+\t(Has_RACW): New entity flag, set on package entities to indicate that\n+\tthe package contains the declaration of a remote accecss-to-classwide\n+\ttype.\n+\t(E_Return_Statement): This node type has the Finalization_Chain_Entity\n+\tattribute, in case the result type has controlled parts.\n+\t(Requires_Overriding): Add this new flag, because \"requires\n+\toverriding\" is subtly different from \"is abstract\" (see AI-228).\n+\t(Is_Abstract): Split Is_Abstract flag into Is_Abstract_Subprogram and\n+\tIs_Abstract_Type. Make sure these are called only when appropriate.\n+\t(Has_Pragma_Unreferenced_Objects): New flag\n+\n+\t* exp_ch5.adb (Expand_N_Assignment_Statement): If the left-hand side is\n+\tclass-wide, the tag of the right-hand side must be an exact match, not\n+\tan ancestor of that of the object on left-hand side.\n+\t(Move_Activation_Chain): New procedure to create the call to\n+\tSystem.Tasking.Stages.Move_Activation_Chain.\n+\t(Expand_N_Extended_Return_Statement): Generate code to call\n+\tSystem.Finalization_Implementation.Move_Final_List at the end of a\n+\treturn statement if the function's result type has controlled parts.\n+\tMove asserts to Build_In_Place_Formal.\n+\t(Move_Final_List): New function to create the call statement.\n+\t(Expand_N_Assignment_Statement): In case of assignment to a class-wide\n+\ttagged type, replace generation of call to the run-time subprogram\n+\tCW_Membership by call to Build_CW_Membership.\n+\t(Expand_N_Return_Statement): Replace generation of call to the run-time\n+\tsubprogram Get_Access_Level by call to Build_Get_Access_Level.\n+\t(Expand_N_Simple_Function_Return): Replace generation of call to the\n+\trun-time subprogram Get_Access_Level by call to Build_Get_Access_Level.\n+\n+\t* exp_ch6.ads, exp_ch6.adb (Expand_Call): Use new predicate\n+\tIs_Access_Protected_Subprogram_Type, to handle both named and anonymous\n+\taccess to protected operations.\n+\t(Add_Task_Actuals_To_Build_In_Place_Call): New procedure to add the\n+\tmaster and chain actual parameters to a build-in-place function call\n+\tinvolving tasks.\n+\t(BIP_Formal_Suffix): Add new enumeration literals to complete the case\n+\tstatement.\n+\t(Make_Build_In_Place_Call_In_Allocator,\n+\tMake_Build_In_Place_Call_In_Anonymous_Context,\n+\tMake_Build_In_Place_Call_In_Assignment,\n+\tMake_Build_In_Place_Call_In_Object_Declaration): Call\n+\tAdd_Task_Actuals_To_Build_In_Place_Call with the appropriate master.\n+\t(Expand_Inlined_Call): If the subprogram is a null procedure, or a\n+\tstubbed procedure with a null body, replace the call with a null\n+\tstatement without using the full inlining machinery, for efficiency\n+\tand to avoid invalid values in source file table entries.\n+\n+\t* exp_ch8.adb (Expand_N_Object_Renaming_Declaration): Add support for\n+\trenamings of calls to build-in-place functions.\n+\n+\t* rtsfind.adb (RTE_Record_Component_Available): New subprogram that\n+\tprovides the functionality of RTE_Available to record components.\n+\t(RTU_Entity): The function Entity has been renamed to RTU_Entity\n+\tto avoid undesired overloading.\n+\t(Entity): New subprogram that returns the entity for the referened\n+\tunit. If this unit has not been loaded, it returns Empty.\n+\t(RE_Activation_Chain_Access, RE_Move_Activation_Chain): New entities.\n+\tRemove no longer used entities.\n+\t(RE_Finalizable_Ptr_Ptr, RE_Move_Final_List): New entities.\n+\t(RE_Type_Specific_Data): New entity.\n+\t(RE_Move_Any_Value): New entity.\n+\t(RE_TA_A, RE_Get_Any_Type): New entities.\n+\t(RE_Access_Level, RE_Dispatch_Table, E_Default_Prim_Op_Count,\n+\t RE_Prims_Ptr, RE_RC_Offset, RE_Remotely_Callable,\n+\t RE_DT_Typeinfo_Ptr_Size, RE_Cstring_Ptr, RE_DT_Expanded_Name): Added.\n+\t(Entity): New subprogram that returns the entity for the referened\n+\tunit. If this unit has not been loaded, it returns Empty.\n+\t(RTE): Addition of a new formal that extends the search to the scopes\n+\tof the record types found in the chain of the package.\n+\n+\t* sem_ch6.ads, sem_ch6.adb (Check_Overriding_Indicator): Print\n+\t\"abstract subprograms must be visible\" message, whether or not the type\n+\tis an interface; that is, remove the special case for interface types.\n+\t(Analyze_Function_Return): Remove error message \"return of task objects\n+\tis not yet implemented\" because this is now implemented.\n+\t(Create_Extra_Formals): Add the extra master and activation chain\n+\tformals in case the result type has tasks.\n+\tRemove error message \"return of limited controlled objects is not yet\n+\timplemented\".\n+\t(Create_Extra_Formals): Add the extra caller's finalization list formal\n+\tin case the result type has controlled parts.\n+\t(Process_Formals): In case of access formal types there is no need\n+\tto continue with the analysis of the formals if we already notified\n+\terrors.\n+\t(Check_Overriding_Indicator): Add code to check overriding of predefined\n+\toperators.\n+\t(Create_Extra_Formals): Prevent creation of useless Extra_Constrained\n+\tflags for formals that do not require them,.\n+\t(Enter_Overloaded_Entity): Do not give -gnatwh warning message unless\n+\thidden entity is use visible or directly visible.\n+\t(Analyze_Abstract_Subprogram_Declaration,Analyze_Subprogram_Body,\n+\tAnalyze_Subprogram_Declaration,Analyze_Subprogram_Specification,\n+\tCheck_Conventions,Check_Delayed_Subprogram,Make_Inequality_Operator,\n+\tNew_Overloaded_Entity): Split Is_Abstract flag into\n+\tIs_Abstract_Subprogram and Is_Abstract_Type.\n+\n+\t* s-finimp.ads, s-finimp.adb (Move_Final_List): New procedure to move\n+\ta return statement's finalization list to the caller's list, used for\n+\tbuild-in-place functions with result type with controlled parts.\n+\tRemove no longer used entities.\n+\n+\t* s-taskin.ads (Activation_Chain): Remove pragma Volatile. It is no\n+\tlonger needed, because the full type is now limited, and therefore a\n+\tpass-by-reference type.\n+\t(Foreign_Task_Level): New constant.\n+\n+\t* s-tassta.ads, s-tassta.adb (Move_Activation_Chain): New procedure to\n+\tmove tasks from the activation chain belonging to a return statement to\n+\tthe one passed in by the caller, and update the master to the one\n+\tpassed in by the caller.\n+\t(Vulnerable_Complete_Master, Check_Unactivated_Tasks): Check the master\n+\tof unactivated tasks, so we don't kill the ones that are being returned\n+\tby a build-in-place function.\n+\t(Create_Task): Ignore AI-280 for foreign threads.\n+\n+2007-04-06  Ed Schonberg  <schonberg@adacore.com>\n+\t    Robert Dewar  <dewar@adacore.com>\n+\t    Bob Duff  <duff@adacore.com>\n+\t    Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* errout.adb (Unwind_Internal_Type): Use predicate\n+\tIs_Access__Protected_Subprogram_Type.\n+\n+\t* freeze.adb (Size_Known): Use First/Next_Component_Or_Discriminant\n+\t(Freeze_Entity, packed array case): Do not override explicitly set\n+\talignment and size clauses.\n+\t(Freeze_Entity):  An entity declared in an outer scope can be frozen if\n+\tthe enclosing subprogram is a child unit body that acts as a spec.\n+\t(Freeze_Entity): Use new predicate Is_Access_Protected_Subprogram_Type.\n+\t(Freeze_Record_Type): New Ada 2005 processing for reverse bit order\n+\tRemove all code for DSP option\n+\n+\t* layout.adb (Layout_Record_Type): Use First/\n+\tNext_Component_Or_Discriminant\n+\t(Layout_Type): Use new predicate Is_Access_Protected_Subprogram_Type,\n+\tto handle properly the anonymous access case.\n+\n+\t* sem_attr.adb (Build_Access_Object_Type): Use E_Access_Attribute_Type\n+\tfor all access attributes, because overload resolution should work the\n+\tsame for 'Access, 'Unchecked_Access, and 'Unrestricted_Access. This\n+\tcauses the error message for the ambiguous \"X'Access = Y'Access\" and\n+\t\"X'Unrestricted_Access = Y'Access\" and so forth to match.\n+\t(Resolve_Attribute, case 'Access): Remove use of Original_Access_Type,\n+\tnow that anonymous access to protected operations have their own kind.\n+\t(Resolve_Attribute): In case of dispatching call check the violation of\n+\trestriction No_Dispatching_Calls.\n+\t(Check_Array_Type): Check new -gnatyA array index style option\n+\n+\t* sem_ch3.ads, sem_ch3.adb (Derived_Type_Declaration): Reject an\n+\tattempt to derive from a synchronized tagged type.\n+\t(Analyze_Type_Declaration): If there is a incomplete tagged view of the\n+\ttype, inherit the class-wide type already created, because it may\n+\talready have been used in a self-referential anonymous access component.\n+\t(Mentions_T): Recognize self-referential anonymous access components\n+\tthat use (a subtype of) the class-wide type of the enclosing type.\n+\t(Build_Derived_Record_Type): Add earlier setting of Is_Tagged_Type. Pass\n+\tDerived_Type for Prev formal on call to\n+\tCheck_Anonymous_Access_Components rather than Empty.\n+\t(Make_Incomplete_Type_Declaration): Add test for case where the type has\n+\ta record extension in deciding whether to create a class-wide type,\n+\trather than just checking Tagged_Present.\n+\t(Replace_Anonymous_Access_To_Protected_Subprogram): Procedure applies\n+\tto stand-alone object declarations as well as component declarations.\n+\t(Array_Type_Declaration): Initialize Packed_Array_Type to Empty, to\n+\tprevent accidental overwriting when enclosing package appears in\n+\ta limited_with_clause.\n+\t(Array_Type_Declaration): If the component type is an anonymous access,\n+\tthe associated_node for the itype is the type declaration itself.\n+\t(Add_Interface_Tag_Components): Modified to support concurrent\n+\ttypes with abstract interfaces.\n+\t(Check_Abstract_Interfaces): New subprogram that verifies the ARM\n+\trules 3.9.4 (15/2), 9.1 (9.d/2) and 9.4 (11.d/2).\n+\t(Build_Derived_Record_Type): Add call to Analyze_Interface_Declaration\n+\tto complete the decoration of synchronized interface types. Add also\n+\ta call to Check_Abstract_Interfaces to verify the ARM rules.\n+\t(Derive_Interface_Subprograms): Modified to support concurrent types\n+\twith abstract interfaces.\n+\t(Analyze_Subtype_Indication): Resolve the range with the given subtype\n+\tmark, rather than delaying the full resolution depending on context.\n+\t(Analyze_Component_Declaration,Analyze_Interface_Declaration,\n+\tAnalyze_Object_Declaration,Analyze_Subtype_Declaration,\n+\tArray_Type_Declaration,Build_Derived_Record_Type,\n+\tBuild_Discriminated_Subtype,Check_Abstract_Overriding,Check_Completion,\n+\tDerive_Interface_Subprograms,Derive_Subprogram,Make_Class_Wide_Type,\n+\tProcess_Full_View,Record_Type_Declaration): Split Is_Abstract flag into\n+\tIs_Abstract_Subprogram and Is_Abstract_Type. Make sure these are\n+\tcalled only when appropriate.\n+\t(Copy_And_Swap): Copy Has_Unreferenced_Objects flag from full type\n+\tto private type.\n+\t(Analyze_Subtype_Declaration): For an access subtype declaration, create\n+\tan itype reference for the anonymous designated subtype, to prevent\n+\tscope anonmalies in gigi.\n+\t(Build_Itype_Reference): New utility, to simplify construction of such\n+\treferences.\n+\n+2007-04-06  Vincent Celier  <celier@adacore.com>\n+\n+\t* errutil.adb (Initialize): Initialize warnings table, if all warnings\n+\tare suppressed, supply an initial dummy entry covering all possible\n+\tsource locations.\n+\n+\t* make.adb (Scan_Make_Arg): Reject options that should start with \"--\"\n+\tand start with only one, such as \"-RTS=none\".\n+\t(Collect_Arguments): Do not check for sources outside of projects.\n+\tDo not collect arguments if project is externally built.\n+\t(Compile_Sources): Do nothing, not even check if the source is up to\n+\tdate, if its project is externally built.\n+\t(Compile): When compiling a predefined source, add -gnatpg\n+\tas the second switch, after -c.\n+\t(Compile_Sources): Allow compilation of Annex J renames without -a\n+\t(Is_In_Object_Directory): Check if the ALI file is in the object\n+\teven if there is no project extension.\n+\t(Create_Binder_Mapping_File): Only put a unit in the mapping file for\n+\tgnatbind if the ALI file effectively exists.\n+\t(Initialize): Add the directory where gnatmake is invoked in front of\n+\tthe path if it is invoked from a bin directory, even without directory\n+\tinformation, so that the correct GNAT tools will be used when spawned\n+\twithout directory information.\n+\n+\t* makeusg.adb: Change switch -S to -eS\n+\tAdd lines for new switches -we, -wn and -ws\n+\tAdd line for new switch -p\n+\n+\t* prj-proc.adb (Process): Set Success to False when Warning_Mode is\n+\tTreat_As_Error and there are warnings.\n+\n+\t* switch-m.ads, switch-m.adb (Normalize_Compiler_Switches): Do not skip\n+\t-gnatww Change gnatmake switch -S to -eS\n+\t(Scan_Make_Switches): Code reorganisation. Process separately multi\n+\tcharacter switches and single character switches.\n+\t(Scan_Make_Switches): New Boolean out parameter Success. Set Success to\n+\tFalse when switch is not recognized by gnatmake.\n+\t(Scan_Make_Switches): Set Setup_Projects True when -p or\n+\t--create-missing-dirs is specified.\n+\n+\t* fname.adb (Is_Predefined_File_Name): Return True for annex J\n+\trenamings Calendar, Machine_Code, Unchecked_Conversion and\n+\tUnchecked_Deallocation only when Renamings_Included is True.\n+\n+\t* par.adb: Allow library units Calendar, Machine_Code,\n+\tUnchecked_Conversion and Unchecked_Deallocation to be recompiled even\n+\twhen -gnatg is not specified.\n+\t(P_Interface_Type_Definition): Remove the formal Is_Synchronized because\n+\tthere is no need to generate always a record_definition_node in case\n+\tof synchronized interface types.\n+\t(SIS_Entry_Active): Initialize global variable to False\n+\t(P_Null_Exclusion): For AI-447: Add parameter Allow_Anonymous_In_95 to\n+\tindicate cases where AI-447 says \"not null\" is legal.\n+\n+\t* makeutl.ads, makeutil.adb (Executable_Prefix_Path): New function\n+\n+\t* makegpr.adb (Check_Compilation_Needed): Take into account dependency\n+\tfiles with with several lines starting with the object fileb name.\n+\t(Scan_Arg): Set Setup_Projects True when -p or --create-missing-dirs\n+\tis specified.\n+\t(Initialize): Add the directory where gprmake is invoked in front of the\n+\tpath, if it is invoked from a bin directory or with directory\n+\tinformation, so that the correct GNAT tools will be used when invoked\n+\tdirectly.\n+\t(Check_Compilation_Needed): Process correctly backslashes on Windows.\n+\n+\t* vms_data.ads: Update switches/qualifiers\n+\n+2007-04-06  Ed Schonberg  <schonberg@adacore.com>\n+\t    Thomas Quinot  <quinot@adacore.com>\n+\n+\t* exp_aggr.adb:\n+\tIf the array component is a discriminated record, the array aggregate\n+\tis non-static even if the component is given by an aggregate with\n+\tstatic components.\n+\t(Expand_Record_Aggregate): Use First/Next_Component_Or_Discriminant\n+\t(Convert_Aggr_In_Allocator): If the allocator is for an access\n+\tdiscriminant and the type is controlled. do not place on a finalization\n+\tlist at this point. The proper list will be determined from the\n+\tenclosing object.\n+\t(Build_Record_Aggr_Code): If aggregate has box-initialized components,\n+\tinitialize record controller if needed, before the components, to ensure\n+\tthat they are properly finalized.\n+\t(Build_Record_Aggr_Code): For the case of an array component that has a\n+\tcorresponding array aggregate in the record aggregate, perform sliding\n+\tif required.\n+\n+2007-04-06  Javier Miranda  <miranda@adacore.com>\n+\t    Gary Dismukes  <dismukes@adacore.com>\n+\t    Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch13.adb (Expand_External_Tag_Definition): Replace call to the\n+\trun-time subprogram Set_External_Tag by call to Build_Set_External_Tag.\n+\n+\t* exp_ch4.adb (Expand_Allocator_Expression): Don't perform a run-time\n+\taccessibility on class-wide allocators if the allocator occurs at the\n+\tsame scope level as the allocator's type. The check is guaranteed to\n+\tsucceed in that case, even when the expression originates from a\n+\tparameter of the containing subprogram.\n+\t(Expand_N_Op_Eq): Do nothing in case of dispatching call if compiling\n+\tunder No_Dispatching_Calls restriction. During the semantic analysis\n+\twe already notified such violation.\n+\t(Tagged_Membership): Constant folding. There is no need to check\n+\tthe tag at run-time if the type of the right operand is non\n+\tclass-wide abstract.\n+\tReplace call to Is_Ancestor by call to Is_Parent\n+\tto support concurrent types with interface types.\n+\t(Expand_N_Allocator): Add an assertion associated with the generation\n+\tof the master_id.\n+\t(Expand_N_Slice): Do not enable range check to nodes associated\n+\twith the frontend expansion of the dispatch table.\n+\t(Is_Local_Access_Discriminant): Subsidiary function to\n+\tExpand_N_Allocator.\n+\t(Tagged_Membership): Replace generation of call to the run-time\n+\tsubprogram CW_Membership by call to Build_CW_Membership.\n+\t(Expand_Allocator_Expression): Replace generation of call to the\n+\trun-time subprogram Get_Access_Level by call to Build_Get_Access_Level.\n+\n+\t* exp_disp.ads, exp_disp.adb (Make_DT): Code reorganization to\n+\tinitialize most the TSD components by means of an aggregate.\n+\tModify the declaration of the object containing the TSD\n+\tbecause we now expand code that has a higher level of abstraction.\n+\tThe TSD has a discriminant containing the Inheritance Depth Level,\n+\tvalue that is used in the membership test but also to fix the size\n+\tof the table of ancestors.\n+\t(Expand_Interface_Conversion): Insert function body at the closest place\n+\tto the conversion expression, to prevent access-before-elaboration\n+\terrors in the backend.\n+\tCode improved to reduce the size of the dispatch table if\n+\tcompiling under restriction No_Dispatching_Calls plus code cleanup.\n+\tCode reorganization plus removal of calls to Set_Num_Prim_Ops\n+\t(Make_Secondary_DT): Remove call to Set_Num_Prim_Ops.\n+\t(Expand_Dispatching_Call): Minor code reorganization plus addition of\n+\tcode to return immediately if compiling under No_Dispatching_Calls\n+\trestriction.\n+\t(Set_All_DT_Position): Remove code associated with the old CPP pragmas.\n+\tCPP_Virtual and CPP_Vtable are no longer supported.\n+\t(Expand_Interface_Conversion): Add missing support for interface type\n+\tderivations.\n+\t(Expand_Interface_Actuals): Replace calls to Is_Ancestor by calls to\n+\tIs_Parent to support concurrent types with interfaces.\n+\t(Init_Predefined_Interface_Primitives): Removed.\n+\t(Make_Secondary_DT): Modified to support concurrent record types.\n+\t(Set_All_DT_Position): Modified to support concurrent record types.\n+\t(Ada_Actions, Action_Is_Proc, Action_Nb_Arg): Remove entries associated\n+\twith Get_External_Tag, Inherit_TSD, Set_External_Tag.\n+\t(Ada_Actions, Action_Is_Proc, Action_Nb_Arg): Remove entry associated\n+\twith CW_Membership.\n+\t(Ada_Actions, Action_Is_Proc, Action_Nb_Arg): Remove entries associated\n+\twith Get_Access_Level, Get_Predefined_Prim_Op_Address,\n+\tGet_Prim_Op_Address Get_RC_Offset, Get_Remotely_Callable, Inherit_DT,\n+\tSet_Access_Level, Set_Expanded_Name, Set_Predefined_Prim_Op_Address,\n+\tSet_Prim_Op_Address, Set_RC_Offset, Set_Remotely_Callable, Set_TSD.\n+\t(Expand_Dispatching_Call): Replace generation of call to the run-time\n+\tsubprograms Get_Predefined_Prim_Op_Address and Get_Prim_Op_Address by\n+\tcalls to Build_Get_Predefined_Prim_Op_Address, and Build_Get_Prim_Op_\n+\tAddress.\n+\t(Fill_DT_Entry, Fill_Secondary_DT_Entry): Replace generation of call to\n+\tthe run-time subprograms Set_Predefined_Prim_Op_Address and Set_Prim_\n+\tOp_Address by calls to Build_Set_Predefined_Prim_Op_Address, and\n+\tBuild_Set_Prim_Op_Address.\n+\t(Get_Remotely_Callable): Subprogram removed.\n+\t(Init_Predefined_Interface_Primitives): Replace generation of call to\n+\tthe run-time subprograms Inherit_DT by call to Build_Inherit_Predefined_\n+\tPrims.\n+\n+\t* sem_elab.adb (Set_Elaboration_Constraint): Replace the call to\n+\tFirst (Parameter_Associations ()) with the call to First_Actual that\n+\treturns an actual parameter expression for both named and positional\n+\tassociations.\n+\n+\t* sem_disp.adb (Check_Dispatching_Call): In case of dispatching call\n+\tcheck violation of restriction No_Dispatching_Calls.\n+\t(Check_Controlling_Type): A formal of a tagged incomplete type is a\n+\tcontrolling argument.\n+\n+\t* exp_util.ads, exp_util.adb (Type_May_Have_Bit_Aligned_Components): Use\n+\tFirst/Next_Component_Or_Discriminant\n+\t(Insert_Actions): Add entries for new N_Push and N_Pop nodes\n+\t(Find_Implemented_Interface): Removed. All the calls to this subprogram\n+\tspecify Any_Limited_Interface, and this functionality is already\n+\tprovided by the function Has_Abstract_Interfaces.\n+\t(Find_Interface, Find_Interface_Tag, Find_Interface_ADT): Modified to\n+\tsupport concurrent types implementing interfaces.\n+\t(Find_Implemented_Interface): Removed. All the calls to this subprogram\n+\tspecify kind Any_Limited_Interface, and this functionality is already\n+\tprovided by the function Has_Abstract_Interfaces.\n+\t(Remove_Side_Effects): replace Controlled_Type by\n+\tCW_Or_Controlled_Type whenever the issue is related to\n+\tusing or not the secondary stack.\n+\n+\t* par-ch12.adb (P_Formal_Type_Definition): Update calls to\n+\tP_Interface_Type_Definition to fulfill the new interface (the formal\n+\tIs_Synchronized is no longer required).\n+\n+\t* Make-lang.in (GNAT_ADA_OBJS): Addition of exp_atag.o\n+\tUpdate dependencies.\n+\n+\t* exp_atag.ads, exp_atag.adb: New file\n+\n+2007-04-06  Ed Schonberg  <schonberg@adacore.com>\n+\t    Bob Duff  <duff@adacore.com>\n+\t    Cyrille Comar  <comar@adacore.com>\n+\n+\t* exp_ch7.ads, exp_ch7.adb (Find_Final_List): If the access type is\n+\tanonymous, use finalization list of enclosing dynamic scope.\n+\t(Expand_N_Package_Declaration): For a library package declaration\n+\twithout a corresponding body, generate RACW subprogram bodies in the\n+\tspec (just as we do for the task activation call).\n+\t(Convert_View): Split Is_Abstract flag into Is_Abstract_Subprogram and\n+\tIs_Abstract_Type. Make sure these are called only when appropriate.\n+\tRemove all code for DSP option\n+\t(CW_Or_Controlled_Type): new subprogram.\n+\n+2007-04-06  Eric Botcazou <botcazou@adacore.com>\n+\t    Ed Schonberg  <schonberg@adacore.com>\n+\t    Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* exp_ch9.ads, exp_ch9.adb (Family_Offset): Add new 'Cap' boolean\n+\tparameter. If it is set to true, return a result capped according to\n+\tthe global upper bound for the index of an entry family.\n+\t(Family_Size): Add new 'Cap' boolean parameter. Pass it to Family_Offset\n+\t(Build_Find_Body_Index): Adjust for above change.\n+\t(Entry_Index_Expression): Likewise.\n+\t(Is_Potentially_Large_Family): New function extracted from...\n+\t(Collect_Entry_Families): ...here. Call it to detect whether the family\n+\tis potentially large.\n+\t(Build_Entry_Count_Expression): If the family is potentially large, call\n+\tFamily_Size with 'Cap' set to true.\n+\t(Expand_N_Protected_Type_Declaration, Expand_N_Protected_Body): Generate\n+\ta protected version of an operation declared in the private part of\n+\ta protected object, because they may be invoked through a callback.\n+\t(Set_Privals): If the type of a private component is an anonymous access\n+\ttype, do not create a new itype for each protected body.\n+\tIf the body of a protected operation creates\n+\tcontrolled types (including allocators for class-widetypes), the\n+\tbody of the corresponding protected subprogram must include a\n+\tfinalization list.\n+\t(Build_Activation_Chain_Entity): Build the chain entity for extended\n+\treturn statements.\n+\t(Type_Conformant_Parameters): Use common predicate Conforming_Types\n+\tto determine whether operation overrides an inherited primitive.\n+\t(Build_Wrapper_Spec): Add code to examine the parents while looking\n+\tfor a possible overriding candidate.\n+\t(Build_Simple_Entry_Call): Set No_Initialization on the object used to\n+\thold an actual parameter value since its initialization is separated\n+\tfrom the the declaration. Prevents errors on null-excluding access\n+\tformals.\n+\n+2007-04-06  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* exp_dist.ads, exp_dist.adb (Build_To_Any_Call, Build_From_Any_Call):\n+\tDo an Unchecked_Conversion to handle the passage from the Underlying\n+\tType to the Base Type when calling Build_To_Any_Call and\n+\tBuild_From_Any_Call.\n+\t(Build_Actual_Object_Declaration): Set Object's Ekind to E_Variable or\n+\tE_Constant, depending upon Variable formal.\n+\t(GARLIC_Support.Build_Subprogram_Receiving_Stubs,\n+\tPolyORB_Support.Build_Subprogram_Receiving_Stubs): For a formal\n+\tparameter that requires an extra constrained parameter, declare\n+\ttemporary for actual as a variable, not a constant.\n+\t(Add_RACW_Primitive_Declarations_And_Bodies): Generate bodies only when\n+\tthe unit being compiled is the one that contains the stub type.\n+\tChange primitive operation name for the RACW associated with a RAS\n+\tfrom Call to _Call so it cannot clash with any legal identifier.\n+\t(PolyORB_Support.Add_RACW_Write_Attribute): Remove unused constant\n+\tIs_RAS.\n+\t(Append_RACW_Bodies): New subprogram.\n+\t(Expand_Receiving_Stubs_Bodies): Pass a 'Stmts' list to\n+\tAdd_Receiving_Stubs_To_Declarations functions.\n+\tWhen expanding a package body, this list correspond to the\n+\tstatements in the HSS at the end of the pacakge.\n+\tWhen expanding a package spec, this list correspond to the\n+\tspec declarations.\n+\t(Add_Receiving_Stubs_To_Declarations): Append the function\n+\tregistering the receiving stubs at the end of the 'Stmts' list.\n+\t(RCI_Package_Locator): Pass the new Version generic formal when\n+\tinstantiating a RCI_Locator package.\n+\t(Build_From_Any_Function): To compute the High bound for an\n+\tunconstrained array actual, we add the Low bound with the length.\n+\tThus we must convert the low bound and the length to an appropriate\n+\ttype before doing the sum.\n+\t(Build_Subprogram_Receiving_Stubs, PolyORB):\n+\t * Retrieve the extra formals parameters at the\n+\t   end of the parameter stream.\n+\t * Use Move_Any_Value to write back out parameters\n+\t   after executing the request as it is more efficient\n+\t   than Copy_Any_Value.\n+\t * Build the any containing Extra Formals with the\n+\t   appropriate typecode.\n+\t(PolyORB_Support.Helpers.Append_Record_Traversal): Nothing to do for an\n+\tempty Component_List.\n+\t(Build_Actual_Object_Declaration): New subprogram. Build and insert into\n+\tthe tree the declaration for an object that serves as actual parameter\n+\tin server-side stubs.\n+\t(GARLIC_Support.Build_Subprogram_Receiving_Stubs,\n+\tPolyORB_Support.Build_Subprogram_Receiving_Stubs):\n+\tUse Build_Actual_Object_Declaration to prepare the actuals.\n+\t(Add_Parameter_To_NVList): Set the parameter mode to In for\n+\tExtra Constrained Parameters.\n+\t(Build_General_Calling_Stubs): Set the parameter type to boolean for\n+\tExtra Constrained parameters.\n+\t(Build_To_Any_Function, Build_From_Any_Function,\n+\tBuilt_TypeCode_Function): When Typ is implicit, call the correct\n+\tfunction with the first not implicit parent type.\n+\t(TC_Rec_Add_Process_Element, FA_Rec_Add_Process_Element,\n+\t(FA_Ary_Add_Process_Element): When Datum is an Any, we cannot infer the\n+\ttypecode from the Etype. Therefore we retrieve the correct typecode\n+\twith a call to Get_Any_Type.\n+\t(Copy_Specification): Do controlling formal type substitution based on\n+\tIs_Controlling_Formal flag, instead of caller-provided object type.\n+\t(Build_Subprogram_Calling_Stubs): When retrieveing the original spec for\n+\ta RACW primitive operation, we might get a subprogram declaration for an\n+\tancestor of the RACW designated type (not for the designated type\n+\titself), in the case where this operation is inherited. In this case we\n+\thave no easy means of determining the original tagged type for which\n+\tthe primitive was declared, so instead we now rely on\n+\tCopy_Specification to use the Is_Controlling_Formal flag to determine\n+\twhich formals require type substitution.\n+\n+2007-04-06  Robert Dewar  <dewar@adacore.com>\n+\t    Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_intr.adb (Expand_Exception_Call): Calls to subprograms in\n+\tGNAT.Current_Exception are not allowed if pragma Restrictions\n+\t(No_Exception_Propagation) is set and in any case make the associated\n+\thandler unsuitable as a target for a local raise statement.\n+\t(Expand_Dispatching_Constructor_Call): Replace generation of call to the\n+\trun-time subprogram CW_Membership by call to Build_CW_Membership.\n+\t(Expand_Dispatching_Constructor_Call): If the dispatching tag is given\n+\tby a function call, a temporary must be created before expanding the\n+\tConstructor_Call itself, to prevent out-of-order elaboration in the\n+\tback-end when stack checking is enabled..\n+\n+2007-04-06  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_pakd.adb (Expand_Packed_Boolean_Operator): The bounds of the\n+\tresult are the bounds of the left operand, not the right.\n+\n+2007-04-06  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_strm.adb\n+\t(Build_Mutable_Record_Write_Procedure): For an Unchecked_Union type, use\n+\t discriminant defaults.\n+\t(Build_Record_Or_Elementary_Output_Procedure): Ditto.\n+\t(Make_Component_List_Attributes): Ditto.\n+\n+2007-04-06  Ed Schonberg  <schonberg@adacore.com>\n+\t    Bob Duff  <duff@adacore.com>\n+\n+\t* sem_aggr.adb (Resolve_Record_Aggregate): In semantics-only mode treat\n+\tan association with a box as providing a value even though the\n+\tinitialization procedure for the type is not available.\n+\t(Resolve_Record_Aggregate): Check that a choice of an association with a\n+\tbox corresponds to a component of the type.\n+\t(Resolve_Record_Aggregate): Split Is_Abstract flag into\n+\tIs_Abstract_Subprogram and Is_Abstract_Type.\n+\n+\t* exp_tss.adb (Base_Init_Proc): Use Is_Type instead of Type_Kind for\n+\tassert.\n+\n+\t* inline.adb (Add_Inlined_Body): Split Is_Abstract flag into\n+\tIs_Abstract_Subprogram and Is_Abstract_Type. Make sure these are\n+\tcalled only when appropriate.\n+\n+2007-04-06  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* g-alleve.ads (Low Level Vector type definitions): Map each to the\n+\tassociated vector view instead of all to the unsigned char view.\n+\n+\t* g-altcon.adb (Generic_Conversions): New internal generic package,\n+\toffering facilities for all the Vector/View conversion routines\n+\timplemented by this unit.\n+\t(To_View/To_Vector - all versions): Reimplemented in a systematic\n+\tmanner, using the internal Generic_Conversions facilities.\n+\n+2007-04-06  Pascal Obry  <obry@adacore.com>\n+\n+\t* g-arrspl.adb (Free) [Element_Access]: New routine to free the source\n+\tstring.\n+\t(Create): Free the source string before storing the new one.\n+\n+2007-04-06  Vincent Celier  <celier@adacore.com>\n+\n+\t* g-debpoo.adb (Validity): New package with a complete new\n+\timplementation of subprograms Is_Valid and Set_Valid.\n+\t(Is_Valid): Move to local package Validity\n+\t(Set_Valid): Move to local package Validity\n+\n+2007-04-06  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* g-expect.adb (Get_Command_Output): When expanding the output buffer\n+\twe must ensure that there is enough place for the new data we are going\n+\tto copy in.\n+\n+2007-04-06  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* g-md5.ads, g-md5.adb (Digest): Fix off-by-one error in padding\n+\tcomputation.\n+\n+2007-04-06  Jose Ruiz  <ruiz@adacore.com>\n+\t    Vincent Celier  <celier@adacore.com>\n+\n+\t* gnatcmd.adb (B_Start): Add prefix of binder generated file.\n+\t(Stack_String): Add this String that contains the name of the Stack\n+\tpackage in the project file.\n+\t(Packages_To_Check_By_Stack): Add this list that contains the packages\n+\tto be checked by gnatstack, which are the naming and the stack packages.\n+\t(Check_Files): If no .ci files were specified for gnatstack we add all\n+\tthe .ci files belonging to the projects, including binder generated\n+\tfiles.\n+\t(Non_VMS_Usage): Document that gnatstack accept project file switches.\n+\t(GNATCmd): Update the B_Start variable if we are in a VMS environment.\n+\tAdd gnatstack to the list of commands that use project file related\n+\tswitches, and get the single attribute Switches from the stack package\n+\tin a project file when calling gnatstack. Parse the -U flag for\n+\tprocessing files belonging to all projects in the project tree.\n+\tRemove all processing for command Setup\n+\n+\t* prj-attr.adb: Add new package Stack with single attribute Switches\n+\n+\t* vms_conv.ads (Command_Type): Add command Stack.\n+\tMove to body declarations that are only used in the body: types Item_Id,\n+\tTranslation_Type, Item_Ptr, Item and its subtypes.\n+\n+\t* vms_conv.adb: (Initialize): Add data for new command Stack.\n+\tAdd declarations moved from the spec: types Item_Id, Translation_Type,\n+\tItem_Ptr, Item and its subtypes.\n+\t(Cargs_Buffer): New table\n+\t(Cargs): New Boolean global variable\n+\t(Process_Buffer): New procedure to create arguments\n+\t(Place): Put character in table Buffer or Cargs_Buffer depending on the\n+\t value of Cargs.\n+\t(Process_Argument): Set Cargs when processing qualifiers for GNAT\n+\tCOMPILE\n+\t(VMS_Conversion): Call Process_Buffer for table Buffer and, if it is not\n+\tempty, for table Cargs_Buffer.\n+\t(Initialize): Remove component Setup in Command_List\n+\n+2007-04-06  Vincent Celier  <celier@adacore.com>\n+\n+\t* gprep.adb (Process_Files.Process_One_File): Use full file name when\n+\tissuing pragma Source_Reference.\n+\n+2007-04-06  Emmanuel Briot  <briot@adacore.com>\n+\n+\t* g-regpat.adb (Parse_Posix_Character_Class): Fix handling of\n+\t[[:xdigit:]] character class.\n+\tAlso raise an exception when an invalid character class is used.\n+\n+2007-04-06  Pascal Obry  <obry@adacore.com>\n+\n+\t* i-cstrea.ads: (fopen): Add encoding parameter.\n+\t(freopen): Idem.\n+\tChange reference from a-sysdep.c to sysdep.c in comment.\n+\tUpdate copyright notice.\n+\tThis set of patch add support for the encoding form parameter.\n+\n+\t* mingw32.h (S2WSU): New macro to convert from a string to a\n+\twide-string using the UTF-8 encoding. The S2WS macro supports now only\n+\tstandard 8bits encoding.\n+\t(WS2SU): As above but converting from wide-sring to string.\n+\tThis is needed as it is necessary to have access to both versions in the\n+\truntime for the form parameter encoding support.\n+\tThis set of patch add support for the encoding form parameter.\n+\t(S2WS): Improve implementation to handle cases where the filename is not\n+\tUTF-8 encoded. In this case we default to using the current code page\n+\tfor the conversion.\n+\n+\t* s-crtl-vms64.ads, s-crtl.ads (Filename_Encoding): New enumeration\n+\ttype (UTF8, ASCII_8bits). This enumeration has a rep clause to match\n+\tthe constants defined in adaint.h.\n+\t(fopen): Add encoding parameter.\n+\t(freopen): Idem.\n+\n+\t* s-ficobl.ads (AFCB): Add Encoding field to record the filename\n+\tencoding. This is needed for the Reset routine (freopen low level-call).\n+\n+\t* s-fileio.adb (Open): Decode encoding form parameter and set the\n+\tcorresponding encoding value into AFCB structure.\n+\t(Reset): Pass the encoding value to freopen.\n+\t(Close): Move the call to Lock_Task to the beginning of the procedure.\n+\n+2007-04-06  Geert Bosch  <bosch@adacore.com>\n+\t    Robert Dewar  <dewar@adacore.com>\n+\n+\t* i-fortra.ads: Add Double_Complex type.\n+\n+\t* impunit.adb: (Is_Known_Unit): New function\n+\tAdd Gnat.Byte_Swapping\n+\tAdd GNAT.SHA1\n+\tAdd new Ada 2005 units\n+\tAda.Numerics.Generic_Complex_Arrays, Ada.Numerics.Generic_Real_Arrays,\n+\tAda.Numerics.Complex_Arrays, Ada.Numerics.Real_Arrays,\n+\tAda.Numerics.Long_Complex_Arrays, Ada.Numerics.Long_Long_Complex_Arrays,\n+\tAda.Numerics.Long_Long_Real_Arrays and Ada.Numerics.Long_Real_Arrays\n+\n+\t* impunit.ads (Is_Known_Unit): New function\n+\n+\t* a-ngcoar.adb, a-ngcoar.ads, a-ngrear.adb,\n+\ta-ngrear.ads, a-nlcoar.ads, a-nllcar.ads, a-nllrar.ads, a-nlrear.ads,\n+\ta-nucoar.ads, a-nurear.ads, g-bytswa.adb, g-bytswa-x86.adb,\n+\tg-bytswa.ads, g-sha1.adb, g-sha1.ads, i-forbla.ads, i-forlap.ads,\n+\ts-gearop.adb, s-gearop.ads, s-gecobl.adb, s-gecobl.ads, s-gecola.adb,\n+\ts-gecola.ads, s-gerebl.adb, s-gerebl.ads, s-gerela.adb, s-gerela.ads:\n+\tNew files.\n+\n+\t* Makefile.rtl: Add g-bytswa, g-sha1, a-fzteio and a-izteio\n+\n+\t* a-fzteio.ads, a-izteio.ads: New Ada 2005 run-time units.\n+\n+2007-04-06  Eric Botcazou <botcazou@adacore.com>\n+\t    Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* init.c: Reuse PA/HP-UX code for IA-64/HP-UX, except\n+\t__gnat_adjust_context_for_raise.\n+\t(__gnat_init_float): on x86 vxworks 5.x and 6.x, we use the same\n+\timplementation of floating point operations as native x86 targets.\n+\tSo the FPU should be initialized in the same way using finit. Fix\n+\tfloating point operations accuracy issues.\n+\t(__gnat_install_handler, case FreeBSD): Use proper type for sa_sigaction\n+\tmember in struct sigaction, so as to avoid warning for incompatible\n+\tpointer types.\n+\n+2007-04-06 Serguei Rybin <rybin@adacore.com>\n+\n+\t* lib.ads, lib.adb (Tree_Read): Release the memory occupied by the\n+\tswitches from previously loaded tree\n+\n+2007-04-06  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* lib-writ.adb (Write_With_Lines): Factor duplicated code between the\n+\tcases where a given dependency has a body or not.\n+\t(Write_With_File_Names): New subprogram, common code for the two cases\n+\tabove.\n+\n+2007-04-06  Ed Schonberg  <schonberg@adacore.com>\n+\t    Javier Miranda  <miranda@adacore.com>\n+\n+\t* lib-xref.ads, lib-xref.adb: \n+\tModify the loop that collects type references, to include interface\n+\ttypes that the type implements. List each of these interfaces when\n+\tbuilding the entry for the type.\n+\t(Generate_Definition): Initialize component Def and Typ of new entry\n+\tin table Xrefs, to avoid to have these components unitialized.\n+\t(Output_References): Split Is_Abstract flag into\n+\tIs_Abstract_Subprogram and Is_Abstract_Type.\n+\t(Generate_Reference): Add barrier to do not generate the warning\n+\tassociated with Ada 2005 entities with entities generated by the\n+\texpander.\n+\n+2007-04-06  Robert Dewar  <dewar@adacore.com>\n+\t    Arnaud Charlet  <charlet@adacore.com>\n+\t    Vincent Celier  <celier@adacore.com>\n+\n+\t* gnat_rm.texi, gnat_ugn.texi: Add -gnatyl documentation\n+\tUpdate 'Exception Handling Control' chapter which was outdated.\n+\tMinor fix to documentation of -gnatwq\n+\tRemove section \"Adapting the Run Time to a New C++ Compiler\" because\n+\tit is now obsolete.\n+\tAdd passage on need of -nostart-files in some non-ada-main cases.\n+\tDocument new switch -eS (/STANDARD_OUTPUT_FOR_COMMANDS) for gnatmake\n+\tUpdate documentation about Interfacing with C++\n+\tAdd documentation for new gnatmake switch -p\n+\tAdd missing protocol part in URLs.\n+\tDocument -gnatyA\n+\tDocument pragma Compile_Time_Error\n+\tAdd documentation for Object_Size indicating that stand alone\n+\tobjects can have a larger size in some cases.\n+\tAdd node for GNAT.Byte_Swapping, GNAT.SHA1\n+\tUpdate reference to the Ravenscar profile.\n+\tDocument pragma Unreferenced_Objects\n+\n+\t* gnat-style.texi: Fix typo\n+\n+2007-04-06  Vincent Celier  <celier@adacore.com>\n+\n+\t* mlib.adb (Building_Library): Only output \"building a library...\" in\n+\tverbose mode\n+\n+\t* mlib-prj.adb (Build_Library): Only output lists of object and ALI\n+\tfiles in verbose mode.\n+\n+\t* mlib-utl.adb (Ar): Only output the first object files when not in\n+\tverbose mode.\n+\t(Gcc): Do not display all the object files if not in verbose mode, only\n+\tthe first one.\n+\n+2007-04-06  Robert Dewar  <dewar@adacore.com>\n+\n+\t* namet.ads, namet.adb (wn): Improve this debugging routine. Calling\n+\tit no longer destroys the contents of Name_Buffer or Name_Len and\n+\tnon-standard and invalid names are handled better.\n+\t(Get_Decoded_Name_String): Improve performance by using\n+\tName_Has_No_Encodings flag in the name table.\n+\t(Is_Valid_Name): New function to determine whether a Name_Id is valid.\n+\tUsed for debugging printouts.\n+\n+2007-04-06  Robert Dewar  <dewar@adacore.com>\n+\t    Javier Miranda  <miranda@adacore.com>\n+\t    Bob Duff  <duff@adacore.com>\n+\n+\t* par-ch3.adb: (P_Type_Declaration): Set Type_Token_Location\n+\t(P_Interface_Type_Definition): Remove the formal Is_Synchronized because\n+\tthere is no need to generate always a record_definition_node in case\n+\tof synchronized interface types.\n+\t(P_Type_Declaration): Update calls to P_Interface_Type_Definition.\n+\t(P_Null_Exclusion): For AI-447: Remove warnings about \"not null\" being\n+\tillegal in Ada 95, in cases where it is legal. Change the warnings to\n+\terrors in other cases. Don't give the error unless the \"not null\"\n+\tparses properly. Correct the source position at which the error occurs.\n+\t(P_Known_Discriminant_Part_Opt): Pass Allow_Anonymous_In_95 => True to\n+\tP_Null_Exclusion, to suppress \"not null\" warnings.\n+\t(P_Identifier_Declarations): Code cleanup. Removed unrequired label and\n+\tassociated goto statements.\n+\n+\t* par-endh.adb (Pop_End_Context): Allow more flexibility in placement\n+\tof END RECORD\n+\n+\t* scans.ads (Type_Token_Location): New flag\n+\n+\t* par-ch6.adb (P_Mode): Check specifically for case of IN ACCESS\n+\t(P_Formal_Part): Pass Allow_Anonymous_In_95 => True to\n+\tP_Null_Exclusion, to suppress \"not null\" warnings.\n+\n+2007-04-06  Robert Dewar  <dewar@adacore.com>\n+\t    Javier Miranda  <miranda@adacore.com>\n+\t    Bob Duff  <duff@adacore.com>\n+\t    Vincent Celier  <celier@adacore.com>\n+\n+\t* par-prag.adb (Prag): Add dummy entry for pragma Compile_Time_Error\n+\t(Extensions_Allowed): No longer sets Ada_Version\n+\tEntry for pragma Unreferenced_Objects\n+\n+\t* sem_prag.adb (Analyze_Pragma, case Priority): Force with of\n+\tsystem.tasking if pragma priority used in a procedure\n+\t(Analyze_Pragma, case Warning): Handle dot warning switches\n+\t(Process_Compile_Time_Warning_Or_Error): New procedure\n+\t(Analyze_Pragma): Add processing for Compile_Time_Error\n+\tAdd support for extra arguments External_Name and Link_Name.\n+\tRemove code associated with pragmas CPP_Virtual and CPP_Vtable.\n+\t(Process_Import_Or_Interface): Add support for the use of pragma Import\n+\twith tagged types.\n+\t(Extensions_Allowed): No longer affects Ada_Version\n+\t(Analyze_Pragma): Split Is_Abstract flag into Is_Abstract_Subprogram and\n+\tIs_Abstract_Type. Make sure these are called only when appropriate.\n+\tAdd processing for pragma Unreferenced_Objects\n+\n+\t* snames.h, snames.ads, snames.adb: Add entry for pragma\n+\tCompile_Time_Error\n+\tAdd new standard name Minimum_Binder_Options for new gprmake\n+\tAdd new standard names for gprmake: Archive_Suffix,\n+\tLibrary_Auto_Init_Supported, Library_Major_Minor_Id_Supported,\n+\tLibrary_Support, Library_Version_Options,\n+\tShared_Library_Minimum_Options,\n+\tShared_Library_Prefix, Shared_Library_Suffix, Symbolic_Link_Supported.\n+\tChange Name_Call to Name_uCall so that it cannot clash with a legal\n+\tsubprogram name.\n+\tAdd new standard names Mapping_Spec_Suffix and Mapping_Body_Suffix\n+\tAppend C_Plus_Plus to convention identifiers as synonym for CPP\n+\tAdd new standard names Stack and Builder_Switches\n+\tAdd new standard names: Compiler_Minimum_Options, Global_Config_File,\n+\tLibrary_Builder, Local_Config_File, Objects_Path, Objects_Path_File,\n+\tRun_Path_Option, Toolchain_Version.\n+\tEntry for pragma Unreferenced_Objects\n+\n+\t* switch-c.adb (Scan_Front_End_Switches): Store correct -gnateD\n+\tswitches, without repetition of \"eD\". Make sure that last character of\n+\t-gnatep= switch is not taken as -gnat switch character.\n+\tComplete rewrite of circuit for handling saving compilation options\n+\tOccasioned by need to support dot switchs for -gnatw, but cleans up\n+\tthings in general.\n+\t-gnatX does not affect Ada_Version\n+\tInclude -gnatyA in -gnatg style switches\n+\n+\t* sem_warn.ads, sem_warn.adb (Output_Unreferenced_Messages): Exclude\n+\twarnings on return objects.\n+\t(Warn_On_Useless_Assignment): Exclude warnings on return objects\n+\t(Set_Dot_Warning_Switch): New procedure\n+\t(Check_References): Add missing case of test for\n+\tHas_Pragma_Unreferenced_Objects\n+\t(Output_Unreferenced_Messages): Implement effect of new pragma\n+\tUnreferenced_Objects, remove special casing of limited controlled\n+\tvariables.\n+\n+2007-04-06  Vincent Celier  <celier@adacore.com>\n+\n+\t* prj-ext.adb (Initialize_Project_Path): New procedure that initialize\n+\tthe default project path, initially done during elaboration of the\n+\tpackage.\n+\tIf the prefix returned by Sdefault is null, get the prefix from a call\n+\tto Executable_Prefix_Path.\n+\t(Project_Path): Call Initialize_Project_Path if Current_Project_Path is\n+\tnull.\n+\n+\t* prj-nmsc.adb (Get_Path_Names_And_Record_Sources): Use the non\n+\tcanonical directory name to open the directory from which files are\n+\tretrieved.\n+\t(Record_Other_Sources): Idem.\n+\t(Locate_Directory): Add the possibility to create automatically missing\n+\tdirectories when Setup_Projects is True.\n+\tCall Locate_Directory so that the directory will be created when\n+\tSetup_Projects is True, for object dir, library dir, library ALI dir,\n+\tlibrary source copy dir and exec dir.\n+\n+\t* prj-pp.adb (Max_Line_Length): Set to 255 for compatibility with older\n+\tversions of GNAT.\n+\n+2007-04-06  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch13.ads, sem_ch13.adb (Adjust_Record_For_Reverse_Bit_Order):\n+\tUse First/Next_Component_Or_Discriminant\n+\t(Analyze_Record_Representation_Clause):\n+\tUse First/Next_Component_Or_Discriminant\n+\t(Check_Component_Overlap): Use First/Next_Component_Or_Discriminant\n+\t(Analyze_Attribute_Definition_Clause, case Value_Size): Reject\n+\tdefinition if type is unconstrained.\n+\t(Adjust_Record_For_Reverse_Bit_Order): New procedure\n+\t(Analyze_Attribute_Definition_Clause): Split Is_Abstract flag into\n+\tIs_Abstract_Subprogram and Is_Abstract_Type.\n+\t(Adjust_Record_For_Reverse_Bit_Order): New procedure\n+\n+\t* repinfo.adb (List_Record_Info): Use First/\n+\tNext_Component_Or_Discriminant.\n+\n+\t* style.ads, styleg-c.adb, styleg-c.ads (Check_Array_Attribute_Index):\n+\tNew procedure.\n+\n+\t* stylesw.ads, stylesw.adb: Recognize new -gnatyA style switch\n+\tInclude -gnatyA in default switches\n+\n+\t* opt.ads: (Warn_On_Non_Local_Exception): New flag\n+\t(Warn_On_Reverse_Bit_Order): New flag\n+\t(Extensions_Allowed): Update the documentation.\n+\t(Warn_On_Questionable_Missing_Parens): Now on by default\n+\n+\t* usage.adb: Add documentation of -gnatw.x/X switches\n+\tDocument new -gnatyA style switch\n+\t-gnatq warnings are on by default\n+\n+2007-04-06  Ed Falis  <falis@adacore.com>\n+\n+\t* s-carun8.adb, s-carsi8.adb (Compare_Array_?8): modify so that last\n+\tfull word is no longer compared twice.\n+\n+2007-04-06  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch10.adb (Install_Limited_Context_Clauses.\n+\tExpand_Limited_With_Clause): Use a new copy of selector name in the\n+\tcall to Make_With_Clause. This fixes the tree structure for ASIS\n+\tpurposes. Nothing is changed in the compiler behaviour.\n+\t(Process_Body_Clauses): Handle properly use clauses whose prefix is\n+\ta package renaming.\n+\t(Install_Limited_With_Clauses): Do not install non-limited view when it\n+\tis still incomplete.\n+\n+2007-04-06  Ed Schonberg  <schonberg@adacore.com>\n+\t    Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_ch12.adb (Check_Generic_Actuals): Use first subtype of actual\n+\twhen capturing size information, instead of base type, which for a\n+\tformal array type will be the unconstrained type.\n+\t(Analyze_Formal_Object_Declaration): Add check for illegal default\n+\texpressions for a formal in object of a limited type.\n+\t(Instantiate_Object): Ditto.\n+\t(Check_Formal_Package_Instance): Skip entities that are formal objects,\n+\tbecause they were defaulted in the formal package and no check applies\n+\tto them.\n+\t(Check_Formal_Package_Instance): Extend conformance check to other\n+\tdiscrete types beyond Integer.\n+\t(Process_Default): Copy directly the unmatched formal. A generic copy\n+\thas already been performed in Analyze_Formal_Package.\n+\t(Analyze_Associations): If a formal subprogram has no match, check for\n+\tpartial parametrization before looking for a default, to prevent\n+\tspurious errors.\n+\t(Analyze_Package_Instantiation, Analyze_Subprogram_Instantiation): Do\n+\tnot set the instantiation environment before analyzing the actuals.\n+\tFixes regression on 8515-003 with implementation of AI-133.\n+\tSet_Instance_Env checks whether the generic unit is a predefined\n+\tunit, in which case the instance must be analyzed with the latest Ada\n+\tmode. This setting must take place after analysis of the actuals,\n+\tbecause the actuals must be analyzed and frozen in the Ada mode extant\n+\toutside of the current instantiation.\n+\t(Save_Env, Restore_Env): Preserve and restore the configuration\n+\tparameters so that predefined units can be compiled in the proper Ada\n+\tmode.\n+\t(Analyze_Formal_Object_Declaration,Analyze_Formal_Subprogram,\n+\tInstantiate_Type): Split Is_Abstract flag into Is_Abstract_Subprogram\n+\tand Is_Abstract_Type.\n+\t(Analyze_Formal_Package): For better error recovery, Add exception\n+\thandler to catch Instantion_Error, which can be raised in\n+\tAnalyze_Associations\n+\n+2007-04-06  Ed Schonberg  <schonberg@adacore.com>\n+\t    Bob Duff  <duff@adacore.com>\n+\t    Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_ch4.adb (Try_Primitive_Operation): The call is legal if the\n+\tprefix type is a discriminated subtype of the type of the formal.\n+\t(Analyze_Allocator): Collect all coextensions regardless of the context.\n+\tWhether they can be allocated statically is determined in exp_ch4.\n+\t(Analyze_Selected_Component): If the prefix is a limited view and the\n+\tnon-limited view is available, use the non-limited one.\n+\t(Operator_Check): For \"X'Access = Y'Access\" (which is ambiguous, and\n+\ttherefore illegal), suggest a qualified expression rather than a type\n+\tconversion, because a type conversion would be illegal in this context.\n+\t(Anayze_Allocator): Trace recursively all nested allocators so that all\n+\tcoextensions are on the corresponding list for the root. Do no mark\n+\tcoextensions if the root allocator is within a declaration for a stack-\n+\tallocated object, because the access discriminants will be allocated on\n+\tthe stack as well.\n+\t(Analyze_Call): Remove restriction on calls to limited functions for the\n+\tcases of generic actuals for formal objects, defaults for formal objects\n+\tand defaults for record components.\n+\t(Analyze_Allocator): Before analysis, chain coextensions on the proper\n+\telement list. Their expansion is delayed until the enclosing allocator\n+\tis processed and its finalization list constructed.\n+\t(Try_Primitive_Operation): If the prefix is a concurrent type, looks\n+\tfor an operation with the given name among the primitive operations of\n+\tthe corresponding record type.\n+\t(Analyze_Selected_Component): If the prefix is a task type that\n+\timplements an interface, and there is no entry with the given name,\n+\tcheck whether there is another primitive operation (e.g. a function)\n+\twith that name.\n+\t(Try_Object_Operation, Analyze_One_Call, Try_Indexed_Call): Handle\n+\tproperly the indexing of a function call written in prefix form, where\n+\tthe function returns an array type, and all parameters of the function\n+\texcept the first have defaults.\n+\t(Analyze_Equality_Op): If this is a call to an implicit inequality, keep\n+\tthe original operands, rather than relocating them, for efficiency and\n+\tto work properly when an operand is overloaded.\n+\t(Analyze_Allocator,Operator_Check,Remove_Abstract_Operations): Split\n+\tIs_Abstract flag into Is_Abstract_Subprogram and Is_Abstract_Type.\n+\t(Analyze_Selected_Component): If the prefix is a private extension, only\n+\tscan the visible components, not those of the full view.\n+\t(Try_Primitive_Operation): If the operation is a procedure, collect all\n+\tpossible interpretations, as for a function, because in the presence of\n+\tclasswide parameters several primitive operations of the type can match\n+\tthe given arguments.\n+\n+2007-04-06  Ed Schonberg  <schonberg@adacore.com>\n+\t    Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch5.adb (Analyze_Assignment): Reject a right-hand side that is a\n+\ttag-indeterminate call to an abstract function, when the left-hand side\n+\tis not classwide.\n+\t(Analyze_Loop_Statement): Improve detection of infinite loops\n+\n+2007-04-06  Ed Schonberg  <schonberg@adacore.com>\n+\t    Thomas Quinot  <quinot@adacore.com>\n+\n+\t* sem_ch7.ads, sem_ch7.adb (Inspect_Deferred_Constant_Completion): Move\n+\tout of Analyze_Package_Declaration, because processing must be applied\n+\tto package bodies as well, for deferred constants completed by pragmas.\n+\t(Analyze_Package_Declaration): When the package declaration being\n+\tanalyzed does not require an explicit body, call Check_Completion.\n+\t(May_Need_Implicit_Body): An implicit body is required when a package\n+\tspec contains the declaration of a remote access-to-classwide type.\n+\t(Analyze_Package_Body): If the package contains RACWs, append the\n+\tpending subprogram bodies generated by exp_dist at the end of the body.\n+\t(New_Private_Type,Unit_Requires_Body): Split Is_Abstract flag into\n+\tIs_Abstract_Subprogram and Is_Abstract_Type.\n+\t(Preserve_Full_Attributes): The full entity list is not an attribute\n+\tthat must be preserved from full to partial view.\n+\n+        * sem_dist.adb (Add_RAS_Dereference_TSS):\n+        Change primitive name to _Call so it cannot clash with any legal\n+        identifier, and be special-cased in Check_Completion.\n+        Mark the full view of the designated type for the RACW associated with\n+        a RAS as Comes_From_Source to get proper view switching when installing\n+        private declarations.\n+        Provite a placeholder nested package body along with the nested spec\n+        to have a place for Append_RACW_Bodies to generate the calling stubs\n+        and stream attributes.\n+\n+2007-04-06  Ed Schonberg  <schonberg@adacore.com>\n+\t    Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch8.adb (Has_Components): If the argument is an incomplete type\n+\tthat is a limited view, check the non-limited view if available.\n+\t(Undefined): Refine error message for missing with of Text_IO\n+\t(Find_Expanded_Name): Use Is_Known_Unit for more accurate error message\n+\tto distinguish real missing with cases.\n+\tFix format of all missing with messages\n+\t(Analyze_Subprogram_Renaming): Emit proper error message on illegal\n+\trenaming as body when renamed entity is abstract.\n+\n+2007-04-06  Ed Schonberg  <schonberg@adacore.com>\n+\t    Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_type.ads, sem_type.adb (Has_Abstract_Interpretation): Make\n+\tpredicate recursive, to handle complex expressions on literals whose\n+\tspurious ambiguity comes from the abstract interpretation of some\n+\tsubexpression.\n+\t(Interface_Present_In_Ancestor): Add support to concurrent record\n+\ttypes.\n+\t(Add_One_Interp,Disambiguate): Split Is_Abstract flag into\n+\tIs_Abstract_Subprogram and Is_Abstract_Type.\n+\n+2007-04-06  Ed Schonberg  <schonberg@adacore.com>\n+\t    Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_util.ads, sem_util.adb (Object_Access_Level): If the object is a\n+\tdereference of a local object R created as a reference to another\n+\tobject O, use the access level of O.\n+\t(Matches_Prefixed_View_Profile): Use common predicate Conforming_Types,\n+\trather than local Same_Formal_Type, to check whether protected operation\n+\toverrides an inherited one.\n+\t(Same_Formal_Type): New predicate, used when matching signatures of\n+\toverriding synchronized operations, to handle the case when a formal\n+\thas a type that is a generic actual.\n+\t(Is_Aliased_View): Replace check on E_Task_Type and E_Protected_Type by\n+\tpredicate Is_Concurrent_Type. This ensures supportin case of subtypes.\n+\t(Needs_One_Actual): New predicate, for Ada 2005 use, to resolve\n+\tsyntactic ambiguities involving indexing of function calls that return\n+\tarrays.\n+\t(Abstract_Interface_List): New subprogram that returns the list of\n+\tabstract interfaces associated with a concurrent type or a\n+\tconcurrent record type.\n+\t(Interface_Present_In_Parent): New subprogram used to check if a\n+\tgiven type or some of its parents implement a given interface.\n+\t(Collect_Abstract_Interfaces): Add support for concurrent types\n+\twith interface types.\n+\t(Has_Abstract_Interfaces): Add support for concurrent types with\n+\tinterface types.\n+\t(Is_Parent): New subprogram that determines whether E1 is a parent\n+\tof E2. For a concurrent type its parent is the first element of its\n+\tlist of interface types; for other types this function provides the\n+\tsame result than Is_Ancestor.\n+\t(Enclosing_Subprogram): Add test for N_Extended_Return_Statement.\n+\t(Collect_Synchronized_Interfaces): Removed because the subprogram\n+\tCollect_Abstract_Interfaces provides this functionality.\n+\t(Collect_Abstract_Interfaces): Minor update to give support to\n+\tconcurrent types and thus avoid undesired code duplication.\n+\t(Get_Subprogram_Entity): Handle entry calls.\n+\t(May_Be_Lvalue): Include actuals that appear as in-out parameters in\n+\tentry calls.\n+\t(Enter_Name): Do not give -gnatwh hiding warning for record component\n+\tentities, they never result in hiding.\n+\n+2007-04-06  Ed Schonberg  <schonberg@adacore.com>\n+\t    Robert Dewar  <dewar@adacore.com>\n+\n+\t* sinfo.ads, sinfo.adb (Coextensions): New element list for allocators,\n+\tto chain nested components that are allocators for access discriminants\n+\tof the enclosing object.\n+\tAdd N_Push and N_Pop nodes\n+\tNew field Exception_Label added\n+\t(Local_Raise_Statements): New field in N_Exception_Handler_Node\n+\t(Local_Raise_Not_OK): New flag in N_Exception_Handler_Node\n+\t(Is_Coextension): New flag for allocators, to mark allocators that\n+\tcorrespond to access discriminants of dynamically allocated objects.\n+\t(N_Block_Statement): Document the fact that the corresponding entity\n+\tcan be an E_Return_Statement.\n+\t(Is_Coextension): New flag for allocators.\n+\tRemove all code for DSP option\n+\n+\t* sprint.ads, sprint.adb: Display basic information for class_wide\n+\tsubtypes. Add handling of N_Push and N_Pop nodes\n+\n+2007-04-06  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* s-tpobop.adb (Exceptional_Complete_Entry_Body): Undefer abortion\n+\tbefore propagating exception.\n+\n+2007-04-06  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* tracebak.c (PC_ADJUST - ia64): -4 instead of -16, expected to yield\n+\tan address always within the call instruction from a return address.\n+\n+2007-04-06  Olivier Hainque  <hainque@adacore.com>\n+\t    Eric Botcazou <botcazou@adacore.com>\n+\n+\t* trans.c (call_to_gnu) <TYPE_RETURNS_BY_TARGET_PTR_P>: Return an\n+\texpression with a COMPOUND_EXPR including the call instead of emitting\n+\tthe call directly here.\n+\t(gnat_to_gnu) <N_Slice>: Do not return a non-constant low bound if the\n+\thigh bound is constant and the slice is empty.  Tidy.\n+\t(tree_transform, case N_Op_Not): Handle properly the case where the\n+\toperation applies to a private type whose full view is a modular type.\n+\t(Case_Statement_To_gnu): If an alternative is an E_Constant with an\n+\tAddress_Clause, use the associated Expression as the GNAT tree\n+\trepresenting the choice value to ensure the corresponding GCC tree is\n+\tof the proper kind.\n+\t(maybe_stabilize_reference): Stabilize COMPOUND_EXPRs as a whole\n+\tinstead of just the operands, as the base GCC stabilize_reference does.\n+\t<CALL_EXPR>: New case. Directly stabilize the call if an lvalue is not\n+\trequested; otherwise fail.\n+\t(addressable_p) <COMPONENT_REF>: Do not test DECL_NONADDRESSABLE_P.\n+\n+2007-04-06  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* uintp.ads, uintp.adb (UI_Div_Rem): New subprogram, extending previous\n+\timplementation of UI_Div.\n+\t(UI_Div): Reimplement as a call to UI_Div_Rem.\n+\t(UI_Rem): Take advantage of the fact that UI_Div_Rem provides the\n+\tremainder, avoiding the cost of a multiplication and a subtraction.\n+\t(UI_Modular_Inverse): Take advantage of the fact that UI_Div_Rem\n+\tprovides both quotient and remainder in a single computation.\n+\t(UI_Modular_Exponentiation, UI_Modular_Inverse): New modular arithmetic\n+\tfunctions for uint.\n+\t(UI_Modular_Inverse): Add a note that the behaviour of this subprogram\n+\tis undefined if the given n is not inversible.\n+\n+2007-04-06  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* utils2.c (known_alignment): Handle COMPOUND_EXPR, COND_EXPR and\n+\tBIT_AND_EXPR. Handle also VIEW_CONVERT_EXPR, as the other conversion\n+\topcodes.\n+\n+2007-04-06  Eric Botcazou <botcazou@adacore.com>\n+\t    Olivier Hainque  <hainque@adacore.com>\n+\n+\t* utils.c (update_pointer_to): Make a copy of the couple of FIELD_DECLs\n+\twhen updating the contents of the old pointer to an unconstrained array.\n+\t(end_subprog_body): Set error_gnat_node to Empty.\n+\t(write_record_type_debug_info): Do not be unduly sparing with our bytes.\n+\t(unchecked_convert): For subtype to base type conversions, require that\n+\tthe source be a subtype if it is an integer type.\n+\t(builtin_decls): New global, vector of available builtin functions.\n+\t(gnat_pushdecl): Add global builtin function declaration nodes to the\n+\tbuiltin_decls list.\n+\t(gnat_install_builtins): Adjust comments.\n+\t(builtin_function): Set DECL_BUILTIN_CLASS and DECL_FUNCTION_CODE before\n+\tcalling gnat_pushdecl, so that it knows when it handed a builtin\n+\tfunction declaration node.\n+\t(builtin_decl_for): Search the builtin_decls list.\n+\n+2007-04-06  Eric Botcazou <botcazou@adacore.com>\n+\n+\t* s-stchop-vxworks.adb: \n+\t(Stack_Check): Raise Storage_Error if the argument has wrapped around.\n+\n+2007-04-06  Robert Dewar  <dewar@adacore.com>\n+\t    Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* a-diroro.ads: Inserted the pragma Unimplemented_Unit\n+\n+\t* bindgen.adb (Gen_Output_File_Ada): Generate pragma Ada_95 at start\n+\tof files\n+\tAdd mention of -Sev (set initialize_scalars option from environment\n+\tvariable at run time) in gnatbind usage message.\n+\n+\t* elists.ads, elists.adb: (Append_Unique_Elmt): New procedure\n+\n+\t* fname-uf.ads: Minor comment fix\n+\n+\t* osint.ads: Change pragma Elaborate to Elaborate_All\n+\n+\t* par-load.adb: Add documentation.\n+\n+\t* sem_cat.ads, sem_cat.adb: Minor code reorganization\n+\n+\t* s-parint.ads (RCI_Locator) : Add 'Version' generic formal\n+\n+\t* s-secsta.ads: Extra comments\n+\n+\t* s-soflin.ads: Minor comment fixes\n+\n+\t* s-stratt.ads (Block_Stream_Ops_OK): Removed.\n+\n+\t* s-wchcon.ads: Minor comment addition\n+\n+\t* treepr.adb: Minor change in message\n+\t(Print_Name,Print_Node): Make these debug printouts more robust: print\n+\t\"no such...\" instead of crashing on bad input.\n+\n 2007-03-30  Rafael Avila de Espindola  <espindola@google.com>\n \n \t* trans.c (Attribute_to_gnu): Use get_signed_or_unsigned_type"}]}