{"sha": "da3cd1136113a13ae25b7deaf4bc02e250af054c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGEzY2QxMTM2MTEzYTEzYWUyNWI3ZGVhZjRiYzAyZTI1MGFmMDU0Yw==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2014-05-13T10:39:16Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2014-05-13T10:39:16Z"}, "message": "rtl.def (SYMBOL_REF): Remove middle \"0\" field.\n\ngcc/\n\t* rtl.def (SYMBOL_REF): Remove middle \"0\" field.\n\t* rtl.h (block_symbol): Reduce number of fields to 2.\n\t(rtx_def): Add u2.symbol_ref_flags.\n\t(SYMBOL_REF_FLAGS): Use it.\n\t(SYMBOL_REF_DATA, SET_SYMBOL_REF_DECL, SYMBOL_REF_DECL)\n\t(SET_SYMBOL_REF_CONSTANT, SYMBOL_REF_CONSTANT): Lower index.\n\t* gengtype.c (adjust_field_rtx_def): Remove SYMBOL_REF_FLAGS handling.\n\tLower index of SYMBOL_REF_DATA.\n\t* print-rtl.c (print_rtx): Lower index for SYMBOL_REF_DATA.\n\tPrint SYMBOL_REF_FLAGS at the same time.\n\t* genattrtab.c (attr_rtx_1): Only initialize 1 \"0\" SYMBOL_REF field.\n\nFrom-SVN: r210363", "tree": {"sha": "bc60a87a8aa3c9a5fb0a854d48dfb065714a3899", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc60a87a8aa3c9a5fb0a854d48dfb065714a3899"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da3cd1136113a13ae25b7deaf4bc02e250af054c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da3cd1136113a13ae25b7deaf4bc02e250af054c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da3cd1136113a13ae25b7deaf4bc02e250af054c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da3cd1136113a13ae25b7deaf4bc02e250af054c/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fcc74520d0d99921af1d22971465d07225b488f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcc74520d0d99921af1d22971465d07225b488f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fcc74520d0d99921af1d22971465d07225b488f9"}], "stats": {"total": 48, "additions": 29, "deletions": 19}, "files": [{"sha": "210eeb4cc12525006178d1edb1de54a5493af411", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da3cd1136113a13ae25b7deaf4bc02e250af054c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da3cd1136113a13ae25b7deaf4bc02e250af054c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=da3cd1136113a13ae25b7deaf4bc02e250af054c", "patch": "@@ -1,3 +1,17 @@\n+2014-05-13  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* rtl.def (SYMBOL_REF): Remove middle \"0\" field.\n+\t* rtl.h (block_symbol): Reduce number of fields to 2.\n+\t(rtx_def): Add u2.symbol_ref_flags.\n+\t(SYMBOL_REF_FLAGS): Use it.\n+\t(SYMBOL_REF_DATA, SET_SYMBOL_REF_DECL, SYMBOL_REF_DECL)\n+\t(SET_SYMBOL_REF_CONSTANT, SYMBOL_REF_CONSTANT): Lower index.\n+\t* gengtype.c (adjust_field_rtx_def): Remove SYMBOL_REF_FLAGS handling.\n+\tLower index of SYMBOL_REF_DATA.\n+\t* print-rtl.c (print_rtx): Lower index for SYMBOL_REF_DATA.\n+\tPrint SYMBOL_REF_FLAGS at the same time.\n+\t* genattrtab.c (attr_rtx_1): Only initialize 1 \"0\" SYMBOL_REF field.\n+\n 2014-05-13  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* rtl.def (VAR_LOCATION): Remove \"i\" field."}, {"sha": "c5ce51c12f23d4ada742ed4fe325537c108bc4dc", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da3cd1136113a13ae25b7deaf4bc02e250af054c/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da3cd1136113a13ae25b7deaf4bc02e250af054c/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=da3cd1136113a13ae25b7deaf4bc02e250af054c", "patch": "@@ -473,10 +473,7 @@ attr_rtx_1 (enum rtx_code code, va_list p)\n \t  rt_val = rtx_alloc (code);\n \t  XSTR (rt_val, 0) = arg0;\n \t  if (code == SYMBOL_REF)\n-\t    {\n-\t      X0EXP (rt_val, 1) = NULL_RTX;\n-\t      X0EXP (rt_val, 2) = NULL_RTX;\n-\t    }\n+\t    X0EXP (rt_val, 1) = NULL_RTX;\n \t}\n     }\n   else if (GET_RTX_LENGTH (code) == 2"}, {"sha": "b6e171822c8623cdb967fe4eaa3c0b968dd8a8ca", "filename": "gcc/gengtype.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da3cd1136113a13ae25b7deaf4bc02e250af054c/gcc%2Fgengtype.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da3cd1136113a13ae25b7deaf4bc02e250af054c/gcc%2Fgengtype.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype.c?ref=da3cd1136113a13ae25b7deaf4bc02e250af054c", "patch": "@@ -1250,8 +1250,6 @@ adjust_field_rtx_def (type_p t, options_p ARG_UNUSED (opt))\n \t      else if (i == REG && aindex == 1)\n \t\tt = reg_attrs_tp, subname = \"rt_reg\";\n \t      else if (i == SYMBOL_REF && aindex == 1)\n-\t\tt = scalar_tp, subname = \"rt_int\";\n-\t      else if (i == SYMBOL_REF && aindex == 2)\n \t\tt = symbol_union_tp, subname = \"\";\n \t      else if (i == JUMP_TABLE_DATA && aindex >= 4)\n \t\tt = scalar_tp, subname = \"rt_int\";"}, {"sha": "66d98b10caf12e2ba955cc8ddff13eeb80bda304", "filename": "gcc/print-rtl.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da3cd1136113a13ae25b7deaf4bc02e250af054c/gcc%2Fprint-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da3cd1136113a13ae25b7deaf4bc02e250af054c/gcc%2Fprint-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-rtl.c?ref=da3cd1136113a13ae25b7deaf4bc02e250af054c", "patch": "@@ -224,9 +224,6 @@ print_rtx (const_rtx in_rtx)\n \t    int flags = SYMBOL_REF_FLAGS (in_rtx);\n \t    if (flags)\n \t      fprintf (outfile, \" [flags %#x]\", flags);\n-\t  }\n-\telse if (i == 2 && GET_CODE (in_rtx) == SYMBOL_REF)\n-\t  {\n \t    tree decl = SYMBOL_REF_DECL (in_rtx);\n \t    if (decl)\n \t      print_node_brief (outfile, \"\", decl, dump_flags);"}, {"sha": "d157b177391aab2cdf48059f6bcf5987e9e31c67", "filename": "gcc/rtl.def", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da3cd1136113a13ae25b7deaf4bc02e250af054c/gcc%2Frtl.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da3cd1136113a13ae25b7deaf4bc02e250af054c/gcc%2Frtl.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.def?ref=da3cd1136113a13ae25b7deaf4bc02e250af054c", "patch": "@@ -429,10 +429,9 @@ DEF_RTL_EXPR(LABEL_REF, \"label_ref\", \"u\", RTX_CONST_OBJ)\n \n /* Reference to a named label:\n    Operand 0: label name\n-   Operand 1: flags (see SYMBOL_FLAG_* in rtl.h)\n-   Operand 2: tree from which this symbol is derived, or null.\n+   Operand 1: tree from which this symbol is derived, or null.\n    This is either a DECL node, or some kind of constant.  */\n-DEF_RTL_EXPR(SYMBOL_REF, \"symbol_ref\", \"s00\", RTX_CONST_OBJ)\n+DEF_RTL_EXPR(SYMBOL_REF, \"symbol_ref\", \"s0\", RTX_CONST_OBJ)\n \n /* The condition code register is represented, in our imagination,\n    as a register holding a value that can be compared to zero."}, {"sha": "aad1853c036fce3e50ef48597770210dc1b19eee", "filename": "gcc/rtl.h", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da3cd1136113a13ae25b7deaf4bc02e250af054c/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da3cd1136113a13ae25b7deaf4bc02e250af054c/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=da3cd1136113a13ae25b7deaf4bc02e250af054c", "patch": "@@ -211,7 +211,7 @@ union rtunion\n    if SYMBOL_REF_HAS_BLOCK_INFO_P is true.  */\n struct GTY(()) block_symbol {\n   /* The usual SYMBOL_REF fields.  */\n-  rtunion GTY ((skip)) fld[3];\n+  rtunion GTY ((skip)) fld[2];\n \n   /* The block that contains this object.  */\n   struct object_block *block;\n@@ -362,6 +362,9 @@ struct GTY((chain_next (\"RTX_NEXT (&%h)\"),\n     /* The INSN_UID of an RTX_INSN-class code.  */\n     int insn_uid;\n \n+    /* The SYMBOL_REF_FLAGS of a SYMBOL_REF.  */\n+    unsigned int symbol_ref_flags;\n+\n     /* The PAT_VAR_LOCATION_STATUS of a VAR_LOCATION.  */\n     enum var_init_status var_location_status;\n \n@@ -1765,24 +1768,24 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n /* A pointer attached to the SYMBOL_REF; either SYMBOL_REF_DECL or\n    SYMBOL_REF_CONSTANT.  */\n-#define SYMBOL_REF_DATA(RTX) X0ANY ((RTX), 2)\n+#define SYMBOL_REF_DATA(RTX) X0ANY ((RTX), 1)\n \n /* Set RTX's SYMBOL_REF_DECL to DECL.  RTX must not be a constant\n    pool symbol.  */\n #define SET_SYMBOL_REF_DECL(RTX, DECL) \\\n-  (gcc_assert (!CONSTANT_POOL_ADDRESS_P (RTX)), X0TREE ((RTX), 2) = (DECL))\n+  (gcc_assert (!CONSTANT_POOL_ADDRESS_P (RTX)), X0TREE ((RTX), 1) = (DECL))\n \n /* The tree (decl or constant) associated with the symbol, or null.  */\n #define SYMBOL_REF_DECL(RTX) \\\n-  (CONSTANT_POOL_ADDRESS_P (RTX) ? NULL : X0TREE ((RTX), 2))\n+  (CONSTANT_POOL_ADDRESS_P (RTX) ? NULL : X0TREE ((RTX), 1))\n \n /* Set RTX's SYMBOL_REF_CONSTANT to C.  RTX must be a constant pool symbol.  */\n #define SET_SYMBOL_REF_CONSTANT(RTX, C) \\\n-  (gcc_assert (CONSTANT_POOL_ADDRESS_P (RTX)), X0CONSTANT ((RTX), 2) = (C))\n+  (gcc_assert (CONSTANT_POOL_ADDRESS_P (RTX)), X0CONSTANT ((RTX), 1) = (C))\n \n /* The rtx constant pool entry for a symbol, or null.  */\n #define SYMBOL_REF_CONSTANT(RTX) \\\n-  (CONSTANT_POOL_ADDRESS_P (RTX) ? X0CONSTANT ((RTX), 2) : NULL)\n+  (CONSTANT_POOL_ADDRESS_P (RTX) ? X0CONSTANT ((RTX), 1) : NULL)\n \n /* A set of flags on a symbol_ref that are, in some respects, redundant with\n    information derivable from the tree decl associated with this symbol.\n@@ -1791,7 +1794,9 @@ do {\t\t\t\t\t\t\t\t\t\\\n    this information to avoid recomputing it.  Finally, this allows space for\n    the target to store more than one bit of information, as with\n    SYMBOL_REF_FLAG.  */\n-#define SYMBOL_REF_FLAGS(RTX)\tX0INT ((RTX), 1)\n+#define SYMBOL_REF_FLAGS(RTX) \\\n+  (RTL_FLAG_CHECK1 (\"SYMBOL_REF_FLAGS\", (RTX), SYMBOL_REF) \\\n+   ->u2.symbol_ref_flags)\n \n /* These flags are common enough to be defined for all targets.  They\n    are computed by the default version of targetm.encode_section_info.  */"}]}