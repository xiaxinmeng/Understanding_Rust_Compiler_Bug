{"sha": "1e2881031c89fdc48ccebeb00b0b29473576534d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWUyODgxMDMxYzg5ZmRjNDhjY2ViZWIwMGIwYjI5NDczNTc2NTM0ZA==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2014-12-03T10:28:25Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2014-12-03T10:28:25Z"}, "message": "Rename fuse-caller-save\n\n2014-12-03  Tom de Vries  <tom@codesourcery.com>\n\n\tPR rtl-optimization/63957\n\t* doc/invoke.texi: Replace -fuse-caller-save with -fipa-ra.\n\t* final.c (rest_of_handle_final): Replace flag_use_caller_save with\n\tflag_ipa_ra.\n\t(get_call_reg_set_usage): Same.\n\t* lra-assigns.c (lra_assign): Same.\n\t* lra-constraints.c (need_for_call_save_p): Same.\n\t* lra-lives.c (process_bb_lives): Same.\n\t* lra.c (lra): Same.\n\t* calls.c (expand_call): Same.\n\t(emit_library_call_value_1): Same.\n\t* config/arm/arm.c (arm_option_override): Same.\n\t* opts.c (default_options_table): Replace OPT_fuse_caller_save with\n\tOPT_fipa_ra.\n\t* target.def (call_fusage_contains_non_callee_clobbers): Replace\n\tfuse-caller-save with fipa-ra.\n\t* doc/tm.texi (TARGET_CALL_FUSAGE_CONTAINS_NON_CALLEE_CLOBBERS): Same.\n\t* common.opt: Same.\n\n\t* gcc.dg/ira-shrinkwrap-prep-1.c: Replace -fno-use-caller-save with\n\t-fno-ipa-ra.\n\t* gcc.dg/ira-shrinkwrap-prep-2.c: Same.\n\t* gcc.target/aarch64/aapcs64/aapcs64.exp: Same.\n\t* gcc.dg/fuse-caller-save.c: Replace -fuse-caller-save with -fipa-ra.\n\t* gcc.target/aarch64/fuse-caller-save.c: Same.\n\t* gcc.target/arm/fuse-caller-save.c: Same.\n\t* gcc.target/i386/fuse-caller-save-rec.c: Same.\n\t* gcc.target/i386/fuse-caller-save-xmm-run.c: Same.\n\t* gcc.target/i386/fuse-caller-save-xmm.c: Same.\n\t* gcc.target/i386/fuse-caller-save.c: Same.\n\t* gcc.target/mips/fuse-caller-save-micromips.c: Same.\n\t* gcc.target/mips/fuse-caller-save-mips16.c: Same.\n\t* gcc.target/mips/fuse-caller-save.c: Same.\n\t* gcc.target/mips/mips.exp: Replace use-caller-save with ipa-ra in\n\t-ffoo/-fno-foo options.\n\nFrom-SVN: r218305", "tree": {"sha": "dbd290a6ff4e33916c060605b775898d61aa187d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dbd290a6ff4e33916c060605b775898d61aa187d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e2881031c89fdc48ccebeb00b0b29473576534d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e2881031c89fdc48ccebeb00b0b29473576534d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e2881031c89fdc48ccebeb00b0b29473576534d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e2881031c89fdc48ccebeb00b0b29473576534d/comments", "author": null, "committer": null, "parents": [{"sha": "e28f2090dbbb50728e9c0933df59e1788307f59b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e28f2090dbbb50728e9c0933df59e1788307f59b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e28f2090dbbb50728e9c0933df59e1788307f59b"}], "stats": {"total": 138, "additions": 89, "deletions": 49}, "files": [{"sha": "ee5fb2087a1cdcceb7bfb38aa9e882b96985c7ad", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2881031c89fdc48ccebeb00b0b29473576534d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2881031c89fdc48ccebeb00b0b29473576534d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1e2881031c89fdc48ccebeb00b0b29473576534d", "patch": "@@ -1,3 +1,24 @@\n+2014-12-03  Tom de Vries  <tom@codesourcery.com>\n+\n+\tPR rtl-optimization/63957\n+\t* doc/invoke.texi: Replace -fuse-caller-save with -fipa-ra.\n+\t* final.c (rest_of_handle_final): Replace flag_use_caller_save with\n+\tflag_ipa_ra.\n+\t(get_call_reg_set_usage): Same.\n+\t* lra-assigns.c (lra_assign): Same.\n+\t* lra-constraints.c (need_for_call_save_p): Same.\n+\t* lra-lives.c (process_bb_lives): Same.\n+\t* lra.c (lra): Same.\n+\t* calls.c (expand_call): Same.\n+\t(emit_library_call_value_1): Same.\n+\t* config/arm/arm.c (arm_option_override): Same.\n+\t* opts.c (default_options_table): Replace OPT_fuse_caller_save with\n+\tOPT_fipa_ra.\n+\t* target.def (call_fusage_contains_non_callee_clobbers): Replace\n+\tfuse-caller-save with fipa-ra.\n+\t* doc/tm.texi (TARGET_CALL_FUSAGE_CONTAINS_NON_CALLEE_CLOBBERS): Same.\n+\t* common.opt: Same.\n+\n 2014-12-03  Yury Gribov  <y.gribov@samsung.com>\n \n \t* sanopt.c (maybe_get_single_definition): New function."}, {"sha": "d6bfa0a6d9fffac1781474bae353ceb317c9c50a", "filename": "gcc/calls.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2881031c89fdc48ccebeb00b0b29473576534d/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2881031c89fdc48ccebeb00b0b29473576534d/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=1e2881031c89fdc48ccebeb00b0b29473576534d", "patch": "@@ -3330,7 +3330,7 @@ expand_call (tree exp, rtx target, int ignore)\n \t\t   next_arg_reg, valreg, old_inhibit_defer_pop, call_fusage,\n \t\t   flags, args_so_far);\n \n-      if (flag_use_caller_save)\n+      if (flag_ipa_ra)\n \t{\n \t  rtx_call_insn *last;\n \t  rtx datum = NULL_RTX;\n@@ -4370,7 +4370,7 @@ emit_library_call_value_1 (int retval, rtx orgfun, rtx value,\n \t       valreg,\n \t       old_inhibit_defer_pop + 1, call_fusage, flags, args_so_far);\n \n-  if (flag_use_caller_save)\n+  if (flag_ipa_ra)\n     {\n       rtx last, datum = orgfun;\n       gcc_assert (GET_CODE (datum) == SYMBOL_REF);"}, {"sha": "a4dd3b326b12a2676387740fe7a19785511f9ae2", "filename": "gcc/common.opt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2881031c89fdc48ccebeb00b0b29473576534d/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2881031c89fdc48ccebeb00b0b29473576534d/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=1e2881031c89fdc48ccebeb00b0b29473576534d", "patch": "@@ -2826,8 +2826,8 @@ Create a position independent executable\n z\n Driver Joined Separate\n \n-fuse-caller-save\n-Common Report Var(flag_use_caller_save) Optimization\n+fipa-ra\n+Common Report Var(flag_ipa_ra) Optimization\n Use caller save register across calls if possible\n \n ; This comment is to ensure we retain the blank line above."}, {"sha": "ceaef8da8175a8c99705e6136fa44477f2625942", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2881031c89fdc48ccebeb00b0b29473576534d/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2881031c89fdc48ccebeb00b0b29473576534d/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=1e2881031c89fdc48ccebeb00b0b29473576534d", "patch": "@@ -3109,13 +3109,12 @@ arm_option_override (void)\n      - epilogue_insns - does not accurately model the corresponding insns\n      emitted in the asm file.  In particular, see the comment in thumb_exit\n      'Find out how many of the (return) argument registers we can corrupt'.\n-     As a consequence, the epilogue may clobber registers without\n-     fuse-caller-save finding out about it.  Therefore, disable fuse-caller-save\n-     in Thumb1 mode.\n+     As a consequence, the epilogue may clobber registers without fipa-ra\n+     finding out about it.  Therefore, disable fipa-ra in Thumb1 mode.\n      TODO: Accurately model clobbers for epilogue_insns and reenable\n-     fuse-caller-save.  */\n+     fipa-ra.  */\n   if (TARGET_THUMB1)\n-    flag_use_caller_save = 0;\n+    flag_ipa_ra = 0;\n \n   /* Register global variables with the garbage collector.  */\n   arm_add_gc_roots ();"}, {"sha": "9ad3216c34b6047025aa4fa3a0ed599bc5e3575a", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2881031c89fdc48ccebeb00b0b29473576534d/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2881031c89fdc48ccebeb00b0b29473576534d/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=1e2881031c89fdc48ccebeb00b0b29473576534d", "patch": "@@ -438,7 +438,7 @@ Objective-C and Objective-C++ Dialects}.\n -ftree-vectorize -ftree-vrp @gol\n -funit-at-a-time -funroll-all-loops -funroll-loops @gol\n -funsafe-loop-optimizations -funsafe-math-optimizations -funswitch-loops @gol\n--fuse-caller-save -fvariable-expansion-in-unroller -fvect-cost-model -fvpt @gol\n+-fipa-ra -fvariable-expansion-in-unroller -fvect-cost-model -fvpt @gol\n -fweb -fwhole-program -fwpa -fuse-ld=@var{linker} -fuse-linker-plugin @gol\n --param @var{name}=@var{value}\n -O  -O0  -O1  -O2  -O3  -Os -Ofast -Og}\n@@ -7202,7 +7202,7 @@ also turns on the following optimization flags:\n -ftree-switch-conversion -ftree-tail-merge @gol\n -ftree-pre @gol\n -ftree-vrp @gol\n--fuse-caller-save}\n+-fipa-ra}\n \n Please note the warning under @option{-fgcse} about\n invoking @option{-O2} on programs that use computed gotos.\n@@ -8034,7 +8034,7 @@ and then tries to find ways to combine them.\n \n Enabled by default at @option{-O1} and higher.\n \n-@item -fuse-caller-save\n+@item -fipa-ra\n Use caller save registers for allocation if those registers are not used by\n any called function.  In that case it is not necessary to save and restore\n them around calls.  This is only possible if called functions are part of"}, {"sha": "ee741a97fc3ea077aae1056c7fe6637678354057", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2881031c89fdc48ccebeb00b0b29473576534d/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2881031c89fdc48ccebeb00b0b29473576534d/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=1e2881031c89fdc48ccebeb00b0b29473576534d", "patch": "@@ -4844,7 +4844,7 @@ linker (e.g. stubs, veneers, branch islands), but not including those\n modifiable by the callee.  The affected registers may be mentioned explicitly\n in the call pattern, or included as clobbers in CALL_INSN_FUNCTION_USAGE.\n The default version of this hook is set to false.  The purpose of this hook\n-is to enable the fuse-caller-save optimization.\n+is to enable the fipa-ra optimization.\n @end deftypevr\n \n @node Varargs"}, {"sha": "4c894c3014b56938193f6d5cb4a3cc47029f46b9", "filename": "gcc/final.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2881031c89fdc48ccebeb00b0b29473576534d/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2881031c89fdc48ccebeb00b0b29473576534d/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=1e2881031c89fdc48ccebeb00b0b29473576534d", "patch": "@@ -4473,7 +4473,7 @@ rest_of_handle_final (void)\n   assemble_start_function (current_function_decl, fnname);\n   final_start_function (get_insns (), asm_out_file, optimize);\n   final (get_insns (), asm_out_file, optimize);\n-  if (flag_use_caller_save)\n+  if (flag_ipa_ra)\n     collect_fn_hard_reg_usage ();\n   final_end_function ();\n \n@@ -4887,7 +4887,7 @@ bool\n get_call_reg_set_usage (rtx_insn *insn, HARD_REG_SET *reg_set,\n \t\t\tHARD_REG_SET default_set)\n {\n-  if (flag_use_caller_save)\n+  if (flag_ipa_ra)\n     {\n       struct cgraph_rtl_info *node = get_call_cgraph_rtl_info (insn);\n       if (node != NULL"}, {"sha": "707dbd0b4e6353f718567c7aa81c914f7a3f6b46", "filename": "gcc/lra-assigns.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2881031c89fdc48ccebeb00b0b29473576534d/gcc%2Flra-assigns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2881031c89fdc48ccebeb00b0b29473576534d/gcc%2Flra-assigns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-assigns.c?ref=1e2881031c89fdc48ccebeb00b0b29473576534d", "patch": "@@ -1527,7 +1527,7 @@ lra_assign (void)\n   create_live_range_start_chains ();\n   setup_live_pseudos_and_spill_after_risky_transforms (&all_spilled_pseudos);\n #ifdef ENABLE_CHECKING\n-  if (!flag_use_caller_save)\n+  if (!flag_ipa_ra)\n     for (i = FIRST_PSEUDO_REGISTER; i < max_regno; i++)\n       if (lra_reg_info[i].nrefs != 0 && reg_renumber[i] >= 0\n \t  && lra_reg_info[i].call_p"}, {"sha": "e9d8bf607656c018e2d412c96a1a27fc4b35d186", "filename": "gcc/lra-constraints.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2881031c89fdc48ccebeb00b0b29473576534d/gcc%2Flra-constraints.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2881031c89fdc48ccebeb00b0b29473576534d/gcc%2Flra-constraints.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.c?ref=1e2881031c89fdc48ccebeb00b0b29473576534d", "patch": "@@ -4644,7 +4644,7 @@ need_for_call_save_p (int regno)\n   lra_assert (regno >= FIRST_PSEUDO_REGISTER && reg_renumber[regno] >= 0);\n   return (usage_insns[regno].calls_num < calls_num\n \t  && (overlaps_hard_reg_set_p\n-\t      ((flag_use_caller_save &&\n+\t      ((flag_ipa_ra &&\n \t\t! hard_reg_set_empty_p (lra_reg_info[regno].actual_call_used_reg_set))\n \t       ? lra_reg_info[regno].actual_call_used_reg_set\n \t       : call_used_reg_set,"}, {"sha": "6f64be300071bbd3499489a480d59b6db591c70f", "filename": "gcc/lra-lives.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2881031c89fdc48ccebeb00b0b29473576534d/gcc%2Flra-lives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2881031c89fdc48ccebeb00b0b29473576534d/gcc%2Flra-lives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-lives.c?ref=1e2881031c89fdc48ccebeb00b0b29473576534d", "patch": "@@ -835,7 +835,7 @@ process_bb_lives (basic_block bb, int &curr_point, bool dead_insn_p)\n \n       if (call_p)\n \t{\n-\t  if (flag_use_caller_save)\n+\t  if (flag_ipa_ra)\n \t    {\n \t      HARD_REG_SET this_call_used_reg_set;\n \t      get_call_reg_set_usage (curr_insn, &this_call_used_reg_set,"}, {"sha": "05901c8baf71bd742f2ba0771363f5c7974eaf65", "filename": "gcc/lra.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2881031c89fdc48ccebeb00b0b29473576534d/gcc%2Flra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2881031c89fdc48ccebeb00b0b29473576534d/gcc%2Flra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra.c?ref=1e2881031c89fdc48ccebeb00b0b29473576534d", "patch": "@@ -2290,7 +2290,7 @@ lra (FILE *f)\n \t  /* Do inheritance only for regular algorithms.  */\n \t  if (! lra_simple_p)\n \t    {\n-\t      if (flag_use_caller_save)\n+\t      if (flag_ipa_ra)\n \t\t{\n \t\t  if (live_p)\n \t\t    lra_clear_live_ranges ();"}, {"sha": "564b8dc65c2065180109df25f2b20f84596bc136", "filename": "gcc/opts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2881031c89fdc48ccebeb00b0b29473576534d/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2881031c89fdc48ccebeb00b0b29473576534d/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=1e2881031c89fdc48ccebeb00b0b29473576534d", "patch": "@@ -507,7 +507,7 @@ static const struct default_options default_options_table[] =\n     { OPT_LEVELS_2_PLUS, OPT_fhoist_adjacent_loads, NULL, 1 },\n     { OPT_LEVELS_2_PLUS, OPT_fipa_icf, NULL, 1 },\n     { OPT_LEVELS_2_PLUS, OPT_fisolate_erroneous_paths_dereference, NULL, 1 },\n-    { OPT_LEVELS_2_PLUS, OPT_fuse_caller_save, NULL, 1 },\n+    { OPT_LEVELS_2_PLUS, OPT_fipa_ra, NULL, 1 },\n     { OPT_LEVELS_2_PLUS, OPT_flra_remat, NULL, 1 },\n \n     /* -O3 optimizations.  */"}, {"sha": "e7cec462e020709ed73876d3406df61930aeacec", "filename": "gcc/target.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2881031c89fdc48ccebeb00b0b29473576534d/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2881031c89fdc48ccebeb00b0b29473576534d/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=1e2881031c89fdc48ccebeb00b0b29473576534d", "patch": "@@ -5553,7 +5553,7 @@ linker (e.g. stubs, veneers, branch islands), but not including those\\n\\\n modifiable by the callee.  The affected registers may be mentioned explicitly\\n\\\n in the call pattern, or included as clobbers in CALL_INSN_FUNCTION_USAGE.\\n\\\n The default version of this hook is set to false.  The purpose of this hook\\n\\\n-is to enable the fuse-caller-save optimization.\",\n+is to enable the fipa-ra optimization.\",\n  bool, \n  false)\n "}, {"sha": "61427fc8ef870f09db15ce1a1fb80a6dc83eb51f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2881031c89fdc48ccebeb00b0b29473576534d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2881031c89fdc48ccebeb00b0b29473576534d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1e2881031c89fdc48ccebeb00b0b29473576534d", "patch": "@@ -1,3 +1,23 @@\n+2014-12-03  Tom de Vries  <tom@codesourcery.com>\n+\n+\tPR rtl-optimization/63957\n+\t* gcc.dg/ira-shrinkwrap-prep-1.c: Replace -fno-use-caller-save with\n+\t-fno-ipa-ra.\n+\t* gcc.dg/ira-shrinkwrap-prep-2.c: Same.\n+\t* gcc.target/aarch64/aapcs64/aapcs64.exp: Same.\n+\t* gcc.dg/fuse-caller-save.c: Replace -fuse-caller-save with -fipa-ra.\n+\t* gcc.target/aarch64/fuse-caller-save.c: Same.\n+\t* gcc.target/arm/fuse-caller-save.c: Same.\n+\t* gcc.target/i386/fuse-caller-save-rec.c: Same.\n+\t* gcc.target/i386/fuse-caller-save-xmm-run.c: Same.\n+\t* gcc.target/i386/fuse-caller-save-xmm.c: Same.\n+\t* gcc.target/i386/fuse-caller-save.c: Same.\n+\t* gcc.target/mips/fuse-caller-save-micromips.c: Same.\n+\t* gcc.target/mips/fuse-caller-save-mips16.c: Same.\n+\t* gcc.target/mips/fuse-caller-save.c: Same.\n+\t* gcc.target/mips/mips.exp: Replace use-caller-save with ipa-ra in\n+\t-ffoo/-fno-foo options.\n+\n 2014-12-03  Ilya Enkovich  <ilya.enkovich@intel.com>\n \n \t* gcc.target/i386/sse2-init-v2di-2.c: Adjust to changed"}, {"sha": "2854b946543f73885d2a861e3e0c8a53b2163f9f", "filename": "gcc/testsuite/gcc.dg/fuse-caller-save.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2881031c89fdc48ccebeb00b0b29473576534d/gcc%2Ftestsuite%2Fgcc.dg%2Ffuse-caller-save.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2881031c89fdc48ccebeb00b0b29473576534d/gcc%2Ftestsuite%2Fgcc.dg%2Ffuse-caller-save.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffuse-caller-save.c?ref=1e2881031c89fdc48ccebeb00b0b29473576534d", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do run } */\n-/* { dg-options \"-fuse-caller-save\" } */\n-/* Testing -fuse-caller-save optimization option.  */\n+/* { dg-options \"-fipa-ra\" } */\n+/* Testing -fipa-ra optimization option.  */\n \n static int __attribute__((noinline))\n bar (int x)"}, {"sha": "3cc96ab87f3bf28ac8b3f2eb8b74fe46296a121a", "filename": "gcc/testsuite/gcc.dg/ira-shrinkwrap-prep-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2881031c89fdc48ccebeb00b0b29473576534d/gcc%2Ftestsuite%2Fgcc.dg%2Fira-shrinkwrap-prep-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2881031c89fdc48ccebeb00b0b29473576534d/gcc%2Ftestsuite%2Fgcc.dg%2Fira-shrinkwrap-prep-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fira-shrinkwrap-prep-1.c?ref=1e2881031c89fdc48ccebeb00b0b29473576534d", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target { { { i?86-*-* x86_64-*-* } && lp64 } || { { powerpc*-*-* && lp64 } || { arm_nothumb || { aarch64*-*-* && lp64 } } } } } } */\n-/* { dg-options \"-O3 -fdump-rtl-ira -fdump-rtl-pro_and_epilogue -fno-use-caller-save\"  } */\n+/* { dg-options \"-O3 -fdump-rtl-ira -fdump-rtl-pro_and_epilogue -fno-ipa-ra\"  } */\n \n long __attribute__((noinline, noclone))\n foo (long a)"}, {"sha": "253f47700ae24ef859961956930d2ccfa54a3879", "filename": "gcc/testsuite/gcc.dg/ira-shrinkwrap-prep-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2881031c89fdc48ccebeb00b0b29473576534d/gcc%2Ftestsuite%2Fgcc.dg%2Fira-shrinkwrap-prep-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2881031c89fdc48ccebeb00b0b29473576534d/gcc%2Ftestsuite%2Fgcc.dg%2Fira-shrinkwrap-prep-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fira-shrinkwrap-prep-2.c?ref=1e2881031c89fdc48ccebeb00b0b29473576534d", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target { { { i?86-*-* x86_64-*-* } && lp64 } || { { powerpc*-*-* && lp64 } || { arm_nothumb || { aarch64*-*-* && lp64 } } } } } } */\n-/* { dg-options \"-O3 -fdump-rtl-ira -fdump-rtl-pro_and_epilogue -fno-use-caller-save\"  } */\n+/* { dg-options \"-O3 -fdump-rtl-ira -fdump-rtl-pro_and_epilogue -fno-ipa-ra\"  } */\n \n long __attribute__((noinline, noclone))\n foo (long a)"}, {"sha": "92a741a59db43fb38623f695cc5df6ae4301505b", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/aapcs64.exp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2881031c89fdc48ccebeb00b0b29473576534d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Faapcs64.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2881031c89fdc48ccebeb00b0b29473576534d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Faapcs64.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Faapcs64.exp?ref=1e2881031c89fdc48ccebeb00b0b29473576534d", "patch": "@@ -48,10 +48,10 @@ foreach src [lsort [glob -nocomplain $srcdir/$subdir/va_arg-*.c]] {\n }\n \n # Test function return value.\n-#   Disable -fuse-caller-save to prevent the compiler from generating\n+#   Disable -fipa-ra to prevent the compiler from generating\n #   conflicting code.\n set additional_flags_for_func_ret $additional_flags\n-append additional_flags_for_func_ret \" -fno-use-caller-save\"\n+append additional_flags_for_func_ret \" -fno-ipa-ra\"\n foreach src [lsort [glob -nocomplain $srcdir/$subdir/func-ret-*.c]] {\n     if {[runtest_file_p $runtests $src]} {\n \t    c-torture-execute [list $src \\"}, {"sha": "bfedc94c33ac31e2ae5570ded59a107fec7cd12b", "filename": "gcc/testsuite/gcc.target/aarch64/fuse-caller-save.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2881031c89fdc48ccebeb00b0b29473576534d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffuse-caller-save.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2881031c89fdc48ccebeb00b0b29473576534d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffuse-caller-save.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffuse-caller-save.c?ref=1e2881031c89fdc48ccebeb00b0b29473576534d", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fuse-caller-save\" } */\n-/* Testing -fuse-caller-save optimization option.  */\n+/* { dg-options \"-O2 -fipa-ra\" } */\n+/* Testing -fipa-ra optimization option.  */\n \n static int __attribute__((noinline))\n bar (int x)"}, {"sha": "ef9256dced95a8f1ba976f7500846eaa3418ede1", "filename": "gcc/testsuite/gcc.target/arm/fuse-caller-save.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2881031c89fdc48ccebeb00b0b29473576534d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffuse-caller-save.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2881031c89fdc48ccebeb00b0b29473576534d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffuse-caller-save.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffuse-caller-save.c?ref=1e2881031c89fdc48ccebeb00b0b29473576534d", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fuse-caller-save\" } */\n-/* Testing -fuse-caller-save optimization option.  */\n+/* { dg-options \"-O2 -fipa-ra\" } */\n+/* Testing -fipa-ra optimization option.  */\n \n static int __attribute__((noinline))\n bar (int x)\n@@ -21,5 +21,5 @@ main (void)\n }\n \n /* For thumb1, r3 is considered likely spilled, and treated differently in\n-   ira_build_conflicts, which inhibits the fuse-caller-save optimization.  */\n+   ira_build_conflicts, which inhibits the fipa-ra optimization.  */\n /* { dg-final { scan-assembler-times \"mov\\tr3, r0\" 1 { target { ! arm_thumb1 } } } } */"}, {"sha": "c660e014386097ba096989000de73a0bfad5c3c8", "filename": "gcc/testsuite/gcc.target/i386/fuse-caller-save-rec.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2881031c89fdc48ccebeb00b0b29473576534d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuse-caller-save-rec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2881031c89fdc48ccebeb00b0b29473576534d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuse-caller-save-rec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuse-caller-save-rec.c?ref=1e2881031c89fdc48ccebeb00b0b29473576534d", "patch": "@@ -1,8 +1,8 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fuse-caller-save -fomit-frame-pointer -fno-optimize-sibling-calls\" } */\n+/* { dg-options \"-O2 -fipa-ra -fomit-frame-pointer -fno-optimize-sibling-calls\" } */\n /* { dg-additional-options \"-mregparm=1\" { target ia32 } } */\n \n-/* Test -fuse-caller-save optimization on self-recursive function.  */\n+/* Test -fipa-ra optimization on self-recursive function.  */\n \n static int __attribute__((noinline))\n bar (int x)"}, {"sha": "80578849a7ba08a886e44a61c9e0a4efa6666f77", "filename": "gcc/testsuite/gcc.target/i386/fuse-caller-save-xmm-run.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2881031c89fdc48ccebeb00b0b29473576534d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuse-caller-save-xmm-run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2881031c89fdc48ccebeb00b0b29473576534d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuse-caller-save-xmm-run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuse-caller-save-xmm-run.c?ref=1e2881031c89fdc48ccebeb00b0b29473576534d", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-O2 -msse -fuse-caller-save\" } */\n+/* { dg-options \"-O2 -msse -fipa-ra\" } */\n \n typedef double v2df __attribute__((vector_size (16)));\n "}, {"sha": "1d02844a9cbf47bf9751adee4f52cb3e4ded587c", "filename": "gcc/testsuite/gcc.target/i386/fuse-caller-save-xmm.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2881031c89fdc48ccebeb00b0b29473576534d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuse-caller-save-xmm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2881031c89fdc48ccebeb00b0b29473576534d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuse-caller-save-xmm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuse-caller-save-xmm.c?ref=1e2881031c89fdc48ccebeb00b0b29473576534d", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -msse2 -mno-avx -fuse-caller-save -fomit-frame-pointer\" } */\n+/* { dg-options \"-O2 -msse2 -mno-avx -fipa-ra -fomit-frame-pointer\" } */\n \n typedef double v2df __attribute__((vector_size (16)));\n \n@@ -16,7 +16,7 @@ foo (v2df y)\n }\n \n /* Check presence of all insns on xmm registers.  These checks are expected to\n-   pass with both -fuse-caller-save and -fno-use-caller-save.  */\n+   pass with both -fipa-ra and -fno-ipa-ra.  */\n /* { dg-final { scan-assembler-times \"addpd\\t\\\\.?LC0.*, %xmm0\" 1 } } */\n /* { dg-final { scan-assembler-times \"addpd\\t%xmm1, %xmm0\" 1 } } */\n /* { dg-final { scan-assembler-times \"movapd\\t%xmm0, %xmm1\" 1 } } */"}, {"sha": "7cfd22afeb2600e063ad804fd355ae692244a6c4", "filename": "gcc/testsuite/gcc.target/i386/fuse-caller-save.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2881031c89fdc48ccebeb00b0b29473576534d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuse-caller-save.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2881031c89fdc48ccebeb00b0b29473576534d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuse-caller-save.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuse-caller-save.c?ref=1e2881031c89fdc48ccebeb00b0b29473576534d", "patch": "@@ -1,8 +1,8 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fuse-caller-save -fomit-frame-pointer\" } */\n+/* { dg-options \"-O2 -fipa-ra -fomit-frame-pointer\" } */\n /* { dg-additional-options \"-mregparm=1\" { target ia32 } } */\n \n-/* Testing -fuse-caller-save optimization option.  */\n+/* Testing -fipa-ra optimization option.  */\n \n static int __attribute__((noinline))\n bar (int x)"}, {"sha": "88642ad317ab92429b6bc18eb831fbbfd6bd3063", "filename": "gcc/testsuite/gcc.target/mips/fuse-caller-save-micromips.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2881031c89fdc48ccebeb00b0b29473576534d/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffuse-caller-save-micromips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2881031c89fdc48ccebeb00b0b29473576534d/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffuse-caller-save-micromips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffuse-caller-save-micromips.c?ref=1e2881031c89fdc48ccebeb00b0b29473576534d", "patch": "@@ -1,9 +1,9 @@\n /* { dg-do compile } */\n-/* { dg-options \"-fuse-caller-save (-mmicromips) addressing=absolute\" } */\n+/* { dg-options \"-fipa-ra (-mmicromips) addressing=absolute\" } */\n /* At -O0 and -O1, the register allocator behaves more conservatively, and\n-   the fuse-caller-save optimization doesnt' trigger.  */\n+   the fipa-ra optimization doesnt' trigger.  */\n /* { dg-skip-if \"\" { *-*-* }  { \"-O0\" \"-O1\" } } */\n-/* Testing -fuse-caller-save optimization option.  */\n+/* Testing -fipa-ra optimization option.  */\n \n #define ATTRIBUTE MICROMIPS\n #include \"fuse-caller-save.h\""}, {"sha": "9071fcc8ace057e163a46c4fad826cc828011253", "filename": "gcc/testsuite/gcc.target/mips/fuse-caller-save-mips16.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2881031c89fdc48ccebeb00b0b29473576534d/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffuse-caller-save-mips16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2881031c89fdc48ccebeb00b0b29473576534d/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffuse-caller-save-mips16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffuse-caller-save-mips16.c?ref=1e2881031c89fdc48ccebeb00b0b29473576534d", "patch": "@@ -1,9 +1,9 @@\n /* { dg-do compile } */\n-/* { dg-options \"-fuse-caller-save (-mips16) addressing=absolute isa_rev=0\" } */\n+/* { dg-options \"-fipa-ra (-mips16) addressing=absolute isa_rev=0\" } */\n /* At -O0 and -O1, the register allocator behaves more conservatively, and\n-   the fuse-caller-save optimization doesnt' trigger.  */\n+   the fipa-ra optimization doesnt' trigger.  */\n /* { dg-skip-if \"\" { *-*-* }  { \"-O0\" \"-O1\" } } */\n-/* Testing -fuse-caller-save optimization option.  */\n+/* Testing -fipa-ra optimization option.  */\n \n #define ATTRIBUTE MIPS16\n #include \"fuse-caller-save.h\""}, {"sha": "4a76744edfe3a19963515643557013d62c004b7b", "filename": "gcc/testsuite/gcc.target/mips/fuse-caller-save.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2881031c89fdc48ccebeb00b0b29473576534d/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffuse-caller-save.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2881031c89fdc48ccebeb00b0b29473576534d/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffuse-caller-save.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffuse-caller-save.c?ref=1e2881031c89fdc48ccebeb00b0b29473576534d", "patch": "@@ -1,9 +1,9 @@\n /* { dg-do compile } */\n-/* { dg-options \"-fuse-caller-save addressing=absolute\" } */\n+/* { dg-options \"-fipa-ra addressing=absolute\" } */\n /* At -O0 and -O1, the register allocator behaves more conservatively, and\n-   the fuse-caller-save optimization doesnt' trigger.  */\n+   the fipa-ra optimization doesnt' trigger.  */\n /* { dg-skip-if \"\" { *-*-* }  { \"-O0\" \"-O1\" } } */\n-/* Testing -fuse-caller-save optimization option.  */\n+/* Testing -fipa-ra optimization option.  */\n \n #define ATTRIBUTE NOCOMPRESSION\n #include \"fuse-caller-save.h\""}, {"sha": "e117a805f87bbeea6bb8623a9be092710ce8bd70", "filename": "gcc/testsuite/gcc.target/mips/mips.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2881031c89fdc48ccebeb00b0b29473576534d/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2881031c89fdc48ccebeb00b0b29473576534d/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips.exp?ref=1e2881031c89fdc48ccebeb00b0b29473576534d", "patch": "@@ -311,7 +311,7 @@ foreach option {\n     tree-vectorize\n     unroll-all-loops\n     unroll-loops\n-    use-caller-save\n+    ipa-ra\n } {\n     lappend mips_option_groups $option \"-f(no-|)$option\"\n }"}]}