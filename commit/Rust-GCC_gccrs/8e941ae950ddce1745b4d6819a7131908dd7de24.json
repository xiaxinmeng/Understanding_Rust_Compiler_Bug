{"sha": "8e941ae950ddce1745b4d6819a7131908dd7de24", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGU5NDFhZTk1MGRkY2UxNzQ1YjRkNjgxOWE3MTMxOTA4ZGQ3ZGUyNA==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2017-08-10T15:29:05Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2017-08-10T15:29:05Z"}, "message": "i386: Don't use frame pointer without stack access\n\nWhen there is no stack access, there is no need to use frame pointer\neven if -fno-omit-frame-pointer is used and caller's frame pointer is\nunchanged.\n\ngcc/\n\n\tPR target/81736\n\t* config/i386/i386.c (ix86_finalize_stack_realign_flags): Renamed\n\tto ...\n\t(ix86_finalize_stack_frame_flags): This.  Also clear\n\tframe_pointer_needed if -fno-omit-frame-pointer is used without\n\tstack access.\n\t(ix86_expand_prologue): Replace ix86_finalize_stack_realign_flags\n\twith ix86_finalize_stack_frame_flags.\n\t(ix86_expand_epilogue): Likewise.\n\t(ix86_expand_split_stack_prologue): Likewise.\n\t* doc/invoke.texi: Add a note for -fno-omit-frame-pointer.\n\ngcc/testsuite/\n\n\tPR target/81736\n\t* gcc.target/i386/pr81736-1.c: New test.\n\t* gcc.target/i386/pr81736-2.c: Likewise.\n\t* gcc.target/i386/pr81736-3.c: Likewise.\n\t* gcc.target/i386/pr81736-4.c: Likewise.\n\t* gcc.target/i386/pr81736-5.c: Likewise.\n\t* gcc.target/i386/pr81736-6.c: Likewise.\n\t* gcc.target/i386/pr81736-7.c: Likewise.\n\nFrom-SVN: r251028", "tree": {"sha": "2676fe73d98e3af6afa9d71fb86c96914dda7181", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2676fe73d98e3af6afa9d71fb86c96914dda7181"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8e941ae950ddce1745b4d6819a7131908dd7de24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e941ae950ddce1745b4d6819a7131908dd7de24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e941ae950ddce1745b4d6819a7131908dd7de24", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e941ae950ddce1745b4d6819a7131908dd7de24/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "798f86281b19395a9f64bfd5def1c12952c4ba05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/798f86281b19395a9f64bfd5def1c12952c4ba05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/798f86281b19395a9f64bfd5def1c12952c4ba05"}], "stats": {"total": 150, "additions": 139, "deletions": 11}, "files": [{"sha": "95d07f6de140bfa211564ff0f860b26e2fe8f4cf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e941ae950ddce1745b4d6819a7131908dd7de24/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e941ae950ddce1745b4d6819a7131908dd7de24/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8e941ae950ddce1745b4d6819a7131908dd7de24", "patch": "@@ -1,3 +1,17 @@\n+2017-08-10  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/81736\n+\t* config/i386/i386.c (ix86_finalize_stack_realign_flags): Renamed\n+\tto ...\n+\t(ix86_finalize_stack_frame_flags): This.  Also clear\n+\tframe_pointer_needed if -fno-omit-frame-pointer is used without\n+\tstack access.\n+\t(ix86_expand_prologue): Replace ix86_finalize_stack_realign_flags\n+\twith ix86_finalize_stack_frame_flags.\n+\t(ix86_expand_epilogue): Likewise.\n+\t(ix86_expand_split_stack_prologue): Likewise.\n+\t* doc/invoke.texi: Add a note for -fno-omit-frame-pointer.\n+\n 2017-08-10  Martin Liska  <mliska@suse.cz>\n \n \tPR c++/81355"}, {"sha": "85aa4d4fbf5b622223d4b8af6e593f321327291a", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e941ae950ddce1745b4d6819a7131908dd7de24/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e941ae950ddce1745b4d6819a7131908dd7de24/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=8e941ae950ddce1745b4d6819a7131908dd7de24", "patch": "@@ -14179,10 +14179,11 @@ output_probe_stack_range (rtx reg, rtx end)\n   return \"\";\n }\n \n-/* Finalize stack_realign_needed flag, which will guide prologue/epilogue\n-   to be generated in correct form.  */\n+/* Finalize stack_realign_needed and frame_pointer_needed flags, which\n+   will guide prologue/epilogue to be generated in correct form.  */\n+\n static void\n-ix86_finalize_stack_realign_flags (void)\n+ix86_finalize_stack_frame_flags (void)\n {\n   /* Check if stack realign is really needed after reload, and\n      stores result in cfun */\n@@ -14205,13 +14206,13 @@ ix86_finalize_stack_realign_flags (void)\n     }\n \n   /* If the only reason for frame_pointer_needed is that we conservatively\n-     assumed stack realignment might be needed, but in the end nothing that\n-     needed the stack alignment had been spilled, clear frame_pointer_needed\n-     and say we don't need stack realignment.  */\n-  if (stack_realign\n+     assumed stack realignment might be needed or -fno-omit-frame-pointer\n+     is used, but in the end nothing that needed the stack alignment had\n+     been spilled nor stack access, clear frame_pointer_needed and say we\n+     don't need stack realignment.  */\n+  if ((stack_realign || !flag_omit_frame_pointer)\n       && frame_pointer_needed\n       && crtl->is_leaf\n-      && flag_omit_frame_pointer\n       && crtl->sp_is_unchanging\n       && !ix86_current_function_calls_tls_descriptor\n       && !crtl->accesses_prior_frames\n@@ -14402,7 +14403,7 @@ ix86_expand_prologue (void)\n   if (ix86_function_naked (current_function_decl))\n     return;\n \n-  ix86_finalize_stack_realign_flags ();\n+  ix86_finalize_stack_frame_flags ();\n \n   /* DRAP should not coexist with stack_realign_fp */\n   gcc_assert (!(crtl->drap_reg && stack_realign_fp));\n@@ -15266,7 +15267,7 @@ ix86_expand_epilogue (int style)\n       return;\n     }\n \n-  ix86_finalize_stack_realign_flags ();\n+  ix86_finalize_stack_frame_flags ();\n   frame = m->frame;\n \n   m->fs.sp_realigned = stack_realign_fp;\n@@ -15801,7 +15802,7 @@ ix86_expand_split_stack_prologue (void)\n \n   gcc_assert (flag_split_stack && reload_completed);\n \n-  ix86_finalize_stack_realign_flags ();\n+  ix86_finalize_stack_frame_flags ();\n   frame = cfun->machine->frame;\n   allocate = frame.stack_pointer_offset - INCOMING_FRAME_SP_OFFSET;\n "}, {"sha": "3753d8a992b3290b4a0884defe21858f94d0ba79", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e941ae950ddce1745b4d6819a7131908dd7de24/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e941ae950ddce1745b4d6819a7131908dd7de24/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=8e941ae950ddce1745b4d6819a7131908dd7de24", "patch": "@@ -7366,6 +7366,10 @@ size) for 32-bit GNU/Linux x86 and 32-bit Darwin x86 targets is\n @option{-fomit-frame-pointer}.  You can configure GCC with the\n @option{--enable-frame-pointer} configure option to change the default.\n \n+Note that @option{-fno-omit-frame-pointer} doesn't force a new stack\n+frame for all functions if it isn't otherwise needed, and hence doesn't\n+guarantee a new frame pointer for all functions.\n+\n Enabled at levels @option{-O}, @option{-O2}, @option{-O3}, @option{-Os}.\n \n @item -foptimize-sibling-calls"}, {"sha": "0c5ac58bdc9a32645d17ca40ca9f9020592562f9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e941ae950ddce1745b4d6819a7131908dd7de24/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e941ae950ddce1745b4d6819a7131908dd7de24/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8e941ae950ddce1745b4d6819a7131908dd7de24", "patch": "@@ -1,3 +1,14 @@\n+2017-08-10  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/81736\n+\t* gcc.target/i386/pr81736-1.c: New test.\n+\t* gcc.target/i386/pr81736-2.c: Likewise.\n+\t* gcc.target/i386/pr81736-3.c: Likewise.\n+\t* gcc.target/i386/pr81736-4.c: Likewise.\n+\t* gcc.target/i386/pr81736-5.c: Likewise.\n+\t* gcc.target/i386/pr81736-6.c: Likewise.\n+\t* gcc.target/i386/pr81736-7.c: Likewise.\n+\n 2017-08-10  Will Schmidt  <will_schmidt@vnet.ibm.com>\n \n \t* gcc.target/powerpc/fold-vec-msum-short.c: Fix typo."}, {"sha": "92c7bc97a0d092577a8278a1ed5df38bba5c5982", "filename": "gcc/testsuite/gcc.target/i386/pr81736-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e941ae950ddce1745b4d6819a7131908dd7de24/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr81736-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e941ae950ddce1745b4d6819a7131908dd7de24/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr81736-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr81736-1.c?ref=8e941ae950ddce1745b4d6819a7131908dd7de24", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fno-omit-frame-pointer\" } */\n+\n+extern int i;\n+\n+int\n+foo (void)\n+{\n+  return i;\n+}\n+\n+/* No need to use a frame pointer.  */\n+/* { dg-final { scan-assembler-not \"%\\[re\\]bp\" } } */"}, {"sha": "a3720879937eedaf36a75e6bc6d80454b18faa55", "filename": "gcc/testsuite/gcc.target/i386/pr81736-2.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e941ae950ddce1745b4d6819a7131908dd7de24/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr81736-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e941ae950ddce1745b4d6819a7131908dd7de24/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr81736-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr81736-2.c?ref=8e941ae950ddce1745b4d6819a7131908dd7de24", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fno-omit-frame-pointer\" } */\n+\n+int\n+#ifndef __x86_64__\n+__attribute__((regparm(3)))\n+#endif\n+foo (int i)\n+{\n+  return i;\n+}\n+\n+/* No need to use a frame pointer.  */\n+/* { dg-final { scan-assembler-not \"%\\[re\\]bp\" } } */"}, {"sha": "c3bde7dd9334e604b3a1e920a85d016437a5656b", "filename": "gcc/testsuite/gcc.target/i386/pr81736-3.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e941ae950ddce1745b4d6819a7131908dd7de24/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr81736-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e941ae950ddce1745b4d6819a7131908dd7de24/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr81736-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr81736-3.c?ref=8e941ae950ddce1745b4d6819a7131908dd7de24", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fno-omit-frame-pointer\" } */\n+\n+void\n+foo (void)\n+{\n+  asm (\"# \" : : : \"ebx\");\n+}\n+\n+/* Need to use a frame pointer.  */\n+/* { dg-final { scan-assembler \"%\\[re\\]bp\" } } */"}, {"sha": "25f50016a645d91e7dbddcf3a45ba98486a5771b", "filename": "gcc/testsuite/gcc.target/i386/pr81736-4.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e941ae950ddce1745b4d6819a7131908dd7de24/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr81736-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e941ae950ddce1745b4d6819a7131908dd7de24/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr81736-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr81736-4.c?ref=8e941ae950ddce1745b4d6819a7131908dd7de24", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fno-omit-frame-pointer\" } */\n+\n+int\n+foo (int i1, int i2, int i3, int i4, int i5, int i6, int i7)\n+{\n+  return i7;\n+}\n+\n+/* Need to use a frame pointer.  */\n+/* { dg-final { scan-assembler \"%\\[re\\]bp\" } } */"}, {"sha": "e1602cf25ba9fddc096d6045f2f8588e8723560a", "filename": "gcc/testsuite/gcc.target/i386/pr81736-5.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e941ae950ddce1745b4d6819a7131908dd7de24/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr81736-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e941ae950ddce1745b4d6819a7131908dd7de24/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr81736-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr81736-5.c?ref=8e941ae950ddce1745b4d6819a7131908dd7de24", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fno-omit-frame-pointer -mavx\" } */\n+\n+typedef int v8si __attribute__ ((vector_size (32)));\n+\n+void\n+#ifndef __x86_64__\n+__attribute__((regparm(3)))\n+#endif\n+foo (v8si *out_start, v8si *out_end, v8si *regions)\n+{\n+  v8si base = regions[3];\n+  *out_start = base;\n+  *out_end = base;\n+}\n+\n+/* No need to use a frame pointer.  */\n+/* { dg-final { scan-assembler-not \"%\\[re\\]bp\" } } */\n+/* Verify no dynamic realignment is performed.  */\n+/* { dg-final { scan-assembler-not \"and\\[^\\n\\r]*sp\" } } */"}, {"sha": "6198574c8cc622e40be9bcce5d6347e77ab5db78", "filename": "gcc/testsuite/gcc.target/i386/pr81736-6.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e941ae950ddce1745b4d6819a7131908dd7de24/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr81736-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e941ae950ddce1745b4d6819a7131908dd7de24/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr81736-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr81736-6.c?ref=8e941ae950ddce1745b4d6819a7131908dd7de24", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fno-omit-frame-pointer\" } */\n+\n+struct foo\n+{\n+  int head;\n+} a;\n+\n+int\n+bar (void)\n+{\n+  return a.head != 0;\n+}\n+\n+/* No need to use a frame pointer.  */\n+/* { dg-final { scan-assembler-not \"%\\[re\\]bp\" } } */"}, {"sha": "f947886e64273091a06c22a957529c7cebf376c6", "filename": "gcc/testsuite/gcc.target/i386/pr81736-7.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e941ae950ddce1745b4d6819a7131908dd7de24/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr81736-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e941ae950ddce1745b4d6819a7131908dd7de24/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr81736-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr81736-7.c?ref=8e941ae950ddce1745b4d6819a7131908dd7de24", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fno-omit-frame-pointer\" } */\n+\n+extern int foo (void);\n+\n+int\n+bar (void)\n+{\n+  return foo ();\n+}\n+\n+/* No need to use a frame pointer.  */\n+/* { dg-final { scan-assembler-not \"%\\[re\\]bp\" } } */"}]}