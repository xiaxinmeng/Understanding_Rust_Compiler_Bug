{"sha": "ba9b12d1d29019dc0f200cbfaea484e7a3762481", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmE5YjEyZDFkMjkwMTlkYzBmMjAwY2JmYWVhNDg0ZTdhMzc2MjQ4MQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@unitus.it", "date": "2003-10-06T22:32:59Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2003-10-06T22:32:59Z"}, "message": "re PR libstdc++/11740 (ctype<wchar_t>::do_is(mask, wchar_t) doesn't handle multiple bits in mask.)\n\n2003-10-06  Paolo Carlini  <pcarlini@unitus.it>\n\n\tPR libstdc++/11740\n\t* config/locale/gnu/ctype_members.cc (ctype<wchar_t>::do_is):\n\tFix to actually return (M & m) != 0 as per 22.2.1.1.2.\n\t* config/locale/generic/ctype_members.cc: Same.\n\t* testsuite/22_locale/ctype/is/wchar_t/11740.cc: New.\n\nFrom-SVN: r72167", "tree": {"sha": "0baf01d8d334ff1f434283654e7531bbc5597dcd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0baf01d8d334ff1f434283654e7531bbc5597dcd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba9b12d1d29019dc0f200cbfaea484e7a3762481", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba9b12d1d29019dc0f200cbfaea484e7a3762481", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba9b12d1d29019dc0f200cbfaea484e7a3762481", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba9b12d1d29019dc0f200cbfaea484e7a3762481/comments", "author": null, "committer": null, "parents": [{"sha": "8a7a6f4ded855d2fc07bc9c331b1058594bbe479", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a7a6f4ded855d2fc07bc9c331b1058594bbe479", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a7a6f4ded855d2fc07bc9c331b1058594bbe479"}], "stats": {"total": 127, "additions": 108, "deletions": 19}, "files": [{"sha": "6814671cc9f49bcd78b739e2b4f09b55998d65a8", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba9b12d1d29019dc0f200cbfaea484e7a3762481/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba9b12d1d29019dc0f200cbfaea484e7a3762481/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ba9b12d1d29019dc0f200cbfaea484e7a3762481", "patch": "@@ -1,3 +1,11 @@\n+2003-10-06  Paolo Carlini  <pcarlini@unitus.it>\n+\n+\tPR libstdc++/11740\n+\t* config/locale/gnu/ctype_members.cc (ctype<wchar_t>::do_is):\n+\tFix to actually return (M & m) != 0 as per 22.2.1.1.2.\n+\t* config/locale/generic/ctype_members.cc: Same.\n+\t* testsuite/22_locale/ctype/is/wchar_t/11740.cc: New.\n+\n 2003-10-06  Paolo Carlini  <pcarlini@unitus.it>\n \n \t* include/bits/locale_facets.tcc (__pad<>::_S_pad):"}, {"sha": "61880e7635a4eabd0e58d82068b59cc9a0ad72f2", "filename": "libstdc++-v3/config/locale/generic/ctype_members.cc", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba9b12d1d29019dc0f200cbfaea484e7a3762481/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fctype_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba9b12d1d29019dc0f200cbfaea484e7a3762481/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fctype_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fctype_members.cc?ref=ba9b12d1d29019dc0f200cbfaea484e7a3762481", "patch": "@@ -127,19 +127,15 @@ namespace std\n   ctype<wchar_t>::\n   do_is(mask __m, char_type __c) const\n   { \n-    bool __ret = true;\n-    bool __match_any = false;\n+    bool __ret = false;\n     const size_t __bitmasksize = 10; \n     for (size_t __bitcur = 0; __bitcur <= __bitmasksize; ++__bitcur)\n       {\n-\tmask __bit = static_cast<mask>(1 << __bitcur);\n+\tconst mask __bit = static_cast<mask>(1 << __bitcur);\n \tif (__m & __bit)\n-\t  {\n-\t    __match_any = true;\n-\t    __ret &= iswctype(__c, _M_convert_to_wmask(__bit));\n-\t  }\n+\t  __ret |= iswctype(__c, _M_convert_to_wmask(__bit));\n       }\n-    return __ret & __match_any;    \n+    return __ret;    \n   }\n   \n   const wchar_t* \n@@ -152,7 +148,7 @@ namespace std\n \tmask __m = 0;\n \tfor (size_t __bitcur = 0; __bitcur <= __bitmasksize; ++__bitcur)\n \t  { \n-\t    mask __bit = static_cast<mask>(1 << __bitcur);\n+\t    const mask __bit = static_cast<mask>(1 << __bitcur);\n \t    if (iswctype(*__lo, _M_convert_to_wmask(__bit)))\n \t      __m |= __bit;\n \t  }"}, {"sha": "79a14f57a4829e6919fb2472975c890b2102ab55", "filename": "libstdc++-v3/config/locale/gnu/ctype_members.cc", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba9b12d1d29019dc0f200cbfaea484e7a3762481/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fctype_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba9b12d1d29019dc0f200cbfaea484e7a3762481/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fctype_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fctype_members.cc?ref=ba9b12d1d29019dc0f200cbfaea484e7a3762481", "patch": "@@ -133,20 +133,16 @@ namespace std\n   { \n     // Highest bitmask in ctype_base == 10, but extra in \"C\"\n     // library for blank.\n-    bool __ret = true;\n-    bool __match_any = false;\n+    bool __ret = false;\n     const size_t __bitmasksize = 11; \n     for (size_t __bitcur = 0; __bitcur <= __bitmasksize; ++__bitcur)\n       {\n-\tmask __bit = static_cast<mask>(_ISbit(__bitcur));\n+\tconst mask __bit = static_cast<mask>(_ISbit(__bitcur));\n \tif (__m & __bit)\n-\t  {\n-\t    __match_any = true;\n-\t    __ret &= __iswctype_l(__c, _M_convert_to_wmask(__bit), \n-\t\t\t\t  _M_c_locale_ctype); \n-\t  }\n+\t  __ret |= __iswctype_l(__c, _M_convert_to_wmask(__bit), \n+\t\t\t\t_M_c_locale_ctype); \n       }\n-    return __ret & __match_any;    \n+    return __ret;    \n   }\n   \n   const wchar_t* \n@@ -161,7 +157,7 @@ namespace std\n \tmask __m = 0;\n \tfor (size_t __bitcur = 0; __bitcur <= __bitmasksize; ++__bitcur)\n \t  { \n-\t    mask __bit = static_cast<mask>(_ISbit(__bitcur));\n+\t    const mask __bit = static_cast<mask>(_ISbit(__bitcur));\n \t    if (__iswctype_l(*__lo, _M_convert_to_wmask(__bit), \n \t\t\t     _M_c_locale_ctype))\n \t      __m |= __bit;"}, {"sha": "074d830991933c2077cafad17dcbde851147f98e", "filename": "libstdc++-v3/testsuite/22_locale/ctype/is/wchar_t/11740.cc", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba9b12d1d29019dc0f200cbfaea484e7a3762481/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fis%2Fwchar_t%2F11740.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba9b12d1d29019dc0f200cbfaea484e7a3762481/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fis%2Fwchar_t%2F11740.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fis%2Fwchar_t%2F11740.cc?ref=ba9b12d1d29019dc0f200cbfaea484e7a3762481", "patch": "@@ -0,0 +1,89 @@\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <locale>\n+#include <algorithm>\n+#include <cstddef>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/11740\n+void test01()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+  \n+  const wchar_t str[] =\n+    L\"Is this the real life?\\n\"\n+    L\"Is this just fantasy?\\n\"\n+    L\"Caught in a landslide\\n\"\n+    L\"No escape from reality\\n\"\n+    L\"Open your eyes\\n\"\n+    L\"Look up to the skies and see\\n\"\n+    L\"I'm just a poor boy\\n\"\n+    L\"I need no sympathy\\n\"\n+    L\"Because I'm easy come, easy go\\n\"\n+    L\"Little high, little low\"\n+    L\"Anyway the wind blows\\n\"\n+    L\"Doesn't really matter to me\\n\"\n+    L\"To me\\n\"\n+    L\"                      -- Queen\\n\";\n+\n+  const size_t len = sizeof(str) / sizeof(str[0]) - 1;\n+  \n+  const ctype_base::mask masks[] = {\t\n+    ctype_base::space, ctype_base::print, ctype_base::cntrl,\n+    ctype_base::upper, ctype_base::lower, ctype_base::alpha,\n+    ctype_base::digit, ctype_base::punct, ctype_base::xdigit,\n+    ctype_base::alnum, ctype_base::graph\n+  };\n+\n+  const size_t num_masks = sizeof(masks) / sizeof(masks[0]);\n+  \n+  locale loc;\n+  const ctype<wchar_t>& ct = use_facet<ctype<wchar_t> >(loc);\n+  \n+  for (size_t i = 0; i < len; ++i)\n+    {\n+      for (size_t j = 0; j < num_masks; ++j)\n+\t{\n+\t  for (size_t k = 0; k < num_masks; ++k)\n+\t    {\n+\t      bool r1 = ct.is(masks[j] | masks[k], str[i]);\n+\t      bool r2 = ct.is(masks[j], str[i]);\n+\t      bool r3 = ct.is(masks[k], str[i]);\n+\t      \n+\t      VERIFY( r1 == (r2 || r3) );\n+\t    }\n+\t}\n+    }\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}