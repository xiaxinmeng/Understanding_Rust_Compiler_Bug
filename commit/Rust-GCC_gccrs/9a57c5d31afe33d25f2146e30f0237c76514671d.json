{"sha": "9a57c5d31afe33d25f2146e30f0237c76514671d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWE1N2M1ZDMxYWZlMzNkMjVmMjE0NmUzMGYwMjM3Yzc2NTE0NjcxZA==", "commit": {"author": {"name": "Ovidiu Predescu", "email": "ovidiu@gcc.gnu.org", "date": "2001-06-09T17:54:21Z"}, "committer": {"name": "Ovidiu Predescu", "email": "ovidiu@gcc.gnu.org", "date": "2001-06-09T17:54:21Z"}, "message": "Added. Check sending +load to categories, in addition to classes.\n\nFrom-SVN: r43080", "tree": {"sha": "cebc5a5ab720ac40cb526966900883a5e4482da8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cebc5a5ab720ac40cb526966900883a5e4482da8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a57c5d31afe33d25f2146e30f0237c76514671d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a57c5d31afe33d25f2146e30f0237c76514671d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a57c5d31afe33d25f2146e30f0237c76514671d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a57c5d31afe33d25f2146e30f0237c76514671d/comments", "author": null, "committer": null, "parents": [{"sha": "cd7894a5107cf60fddb047ae29b571d32c9182bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd7894a5107cf60fddb047ae29b571d32c9182bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd7894a5107cf60fddb047ae29b571d32c9182bc"}], "stats": {"total": 108, "additions": 108, "deletions": 0}, "files": [{"sha": "e7543930a73ac5a043638c20d06889110947c67f", "filename": "gcc/testsuite/objc/execute/load-3.m", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a57c5d31afe33d25f2146e30f0237c76514671d/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fload-3.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a57c5d31afe33d25f2146e30f0237c76514671d/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fload-3.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fload-3.m?ref=9a57c5d31afe33d25f2146e30f0237c76514671d", "patch": "@@ -0,0 +1,108 @@\n+/*\n+    load-3.m\n+\n+    Author: Ovidiu Predescu <ovidiu@cup.hp.com>\n+    Date: June  3, 2001\n+\n+    Test if the +load methods are invoked, and are invoked in the\n+    proper order.\n+ */\n+\n+#include <objc/objc.h>\n+#include <objc/Object.h>\n+\n+@interface A : Object\n+@end\n+\n+@interface B : A\n+@end\n+\n+static a_load = 0;\n+static b_load = 0;\n+static a_category_load = 0;\n+static b_category_load = 0;\n+\n+@implementation A (Category)\n++ (void)load\n+{\n+  a_category_load = 1;\n+  printf(\"+[A(Category) load]\\n\");\n+\n+  if (a_load != 1)\n+    {\n+      printf(\"+load for A(Category) invoked before A's!\\n\");\n+      abort();\n+    }\n+}\n+@end\n+\n+@implementation B(Category)\n++ (void)load\n+{\n+  b_category_load = 1;\n+  printf(\"+[B(Category) load]\\n\");\n+\n+  if (b_load != 1)\n+    {\n+      printf (\"+load for B(Category) invoked before B!\\n\");\n+      abort();\n+    }\n+}\n+@end\n+\n+@implementation B\n++ (void)load\n+{\n+  b_load = 1;\n+  printf(\"+[B load]\\n\");\n+\n+  if (a_load != 1)\n+    {\n+      printf(\"+load for B invoked before A's!\\n\");\n+      abort();\n+    }\n+\n+  if (b_category_load != 0)\n+    {\n+      printf(\"+load for B invoked after B(Category)!\\n\");\n+      abort();\n+    }\n+}\n+@end\n+\n+@implementation A\n++ (void)load\n+{\n+  a_load = 1;\n+  printf(\"+[A load]\\n\");\n+\n+  if (a_category_load != 0)\n+    {\n+      printf(\"+load for A(Category) invoked before A!\\n\");\n+      abort();\n+    }\n+\n+  if (b_load != 0)\n+    {\n+      printf(\"+load for A invoked after B!\\n\");\n+      abort();\n+    }\n+\n+  if (b_category_load != 0)\n+    {\n+      printf(\"+load for B(Category) invoked before A and B!\\n\");\n+      abort();\n+    }\n+}\n+@end\n+\n+int main (void)\n+{\n+  if (a_load + b_load + a_category_load + b_category_load != 4)\n+    {\n+      printf(\"Not all +load methods invoked!\\n\");\n+      abort();\n+    }\n+\n+  return 0;\n+}"}]}