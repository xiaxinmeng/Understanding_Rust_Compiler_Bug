{"sha": "00cf2913f841cf835b44febec958831e74d42dea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDBjZjI5MTNmODQxY2Y4MzViNDRmZWJlYzk1ODgzMWU3NGQ0MmRlYQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2004-07-29T08:58:59Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2004-07-29T08:58:59Z"}, "message": "gcov-io.h: Allow zero tag as EOF indicator.\n\n\t* gcov-io.h: Allow zero tag as EOF indicator.\n\t(gcov_is_eof): Remove.\n\t(gcov_truncate): Remove.\n\t* gcov-io.c (gcov_seek): Always SEEK_SET.\n\t* libgcov.c (gcov_exit): Don't use gcov_truncate.  Write explicit\n\tEOF tag.\n\t* coverage.c (read_counts_file): Don't use gcov_is_eof.\n\t* gcov-dump.c (dump_file): Likewise.\n\t* gcov.c (read_graph_file, read_count_file): Likewise.\n\nFrom-SVN: r85291", "tree": {"sha": "16726bd91201d3686e4da590f47456b9a7153c9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/16726bd91201d3686e4da590f47456b9a7153c9d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00cf2913f841cf835b44febec958831e74d42dea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00cf2913f841cf835b44febec958831e74d42dea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00cf2913f841cf835b44febec958831e74d42dea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00cf2913f841cf835b44febec958831e74d42dea/comments", "author": null, "committer": null, "parents": [{"sha": "d815ea49f655071a199c1dae851f0849bdf9d711", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d815ea49f655071a199c1dae851f0849bdf9d711", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d815ea49f655071a199c1dae851f0849bdf9d711"}], "stats": {"total": 139, "additions": 60, "deletions": 79}, "files": [{"sha": "a71b8a2c992406f44f44d27d6b749577c9e58db5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00cf2913f841cf835b44febec958831e74d42dea/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00cf2913f841cf835b44febec958831e74d42dea/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=00cf2913f841cf835b44febec958831e74d42dea", "patch": "@@ -1,5 +1,15 @@\n 2004-07-29  Nathan Sidwell  <nathan@codesourcery.com>\n \n+\t* gcov-io.h: Allow zero tag as EOF indicator.\n+\t(gcov_is_eof): Remove.\n+\t(gcov_truncate): Remove.\n+\t* gcov-io.c (gcov_seek): Always SEEK_SET.\n+\t* libgcov.c (gcov_exit): Don't use gcov_truncate.  Write explicit\n+\tEOF tag.\n+\t* coverage.c (read_counts_file): Don't use gcov_is_eof.\n+\t* gcov-dump.c (dump_file): Likewise.\n+\t* gcov.c (read_graph_file, read_count_file): Likewise.\n+\n \t* c-decl.c (complete_array_type): Don't gratuitously copy\n \tmaxindex.  Check it always has a type.\n "}, {"sha": "abaad02d11d8e20c464bf0de1d89094fd6543c29", "filename": "gcc/coverage.c", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00cf2913f841cf835b44febec958831e74d42dea/gcc%2Fcoverage.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00cf2913f841cf835b44febec958831e74d42dea/gcc%2Fcoverage.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoverage.c?ref=00cf2913f841cf835b44febec958831e74d42dea", "patch": "@@ -292,14 +292,12 @@ read_counts_file (void)\n \t}\n       gcov_sync (offset, length);\n       if ((is_error = gcov_is_error ()))\n-\tbreak;\n-    }\n-\n-  if (!gcov_is_eof ())\n-    {\n-      error (is_error < 0 ? \"`%s' has overflowed\" : \"`%s' is corrupted\",\n-\t     da_file_name);\n-      htab_delete (counts_hash);\n+\t{\n+\t  error (is_error < 0 ? \"`%s' has overflowed\" : \"`%s' is corrupted\",\n+\t\t da_file_name);\n+\t  htab_delete (counts_hash);\n+\t  break;\n+\t}\n     }\n \n   gcov_close ();"}, {"sha": "994f7fbd0b806ab28fc665528c28d739141da198", "filename": "gcc/gcov-dump.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00cf2913f841cf835b44febec958831e74d42dea/gcc%2Fgcov-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00cf2913f841cf835b44febec958831e74d42dea/gcc%2Fgcov-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov-dump.c?ref=00cf2913f841cf835b44febec958831e74d42dea", "patch": "@@ -254,8 +254,6 @@ dump_file (const char *filename)\n \t  break;\n \t}\n     }\n-  if (!gcov_is_eof ())\n-    printf (\"%s:early end of file\\n\", filename);\n   gcov_close ();\n }\n "}, {"sha": "3b4dcd6026515cb13afccb93b681341e476321e6", "filename": "gcc/gcov-io.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00cf2913f841cf835b44febec958831e74d42dea/gcc%2Fgcov-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00cf2913f841cf835b44febec958831e74d42dea/gcc%2Fgcov-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov-io.c?ref=00cf2913f841cf835b44febec958831e74d42dea", "patch": "@@ -514,16 +514,15 @@ gcov_sync (gcov_position_t base, gcov_unsigned_t length)\n #endif\n \n #if IN_LIBGCOV\n-/* Move to the a set position in a gcov file.  BASE is zero to move to\n-   the end, and nonzero to move to that position.  */\n+/* Move to the a set position in a gcov file.  */\n \n GCOV_LINKAGE void\n gcov_seek (gcov_position_t base)\n {\n   GCOV_CHECK_WRITING ();\n   if (gcov_var.offset)\n     gcov_write_block (gcov_var.offset);\n-  fseek (gcov_var.file, base << 2, base ? SEEK_SET : SEEK_END);\n+  fseek (gcov_var.file, base << 2, SEEK_SET);\n   gcov_var.start = ftell (gcov_var.file) >> 2;\n }\n #endif"}, {"sha": "50eacccdc468947ecad71f253024a906cda18daf", "filename": "gcc/gcov-io.h", "status": "modified", "additions": 11, "deletions": 31, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00cf2913f841cf835b44febec958831e74d42dea/gcc%2Fgcov-io.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00cf2913f841cf835b44febec958831e74d42dea/gcc%2Fgcov-io.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov-io.h?ref=00cf2913f841cf835b44febec958831e74d42dea", "patch": "@@ -29,22 +29,21 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n    the executable file might be covered by the GNU General Public License.  */\n \n /* Coverage information is held in two files.  A notes file, which is\n-   generated by the compiler, and a data file, which is generated\n-   by the program under test.  Both files use a similar structure.  We\n-   do not attempt to make these files backwards compatible with\n-   previous versions, as you only need coverage information when\n-   developing a program.  We do hold version information, so that\n-   mismatches can be detected, and we use a format that allows tools\n-   to skip information they do not understand or are not interested\n-   in.\n+   generated by the compiler, and a data file, which is generated by\n+   the program under test.  Both files use a similar structure.  We do\n+   not attempt to make these files backwards compatible with previous\n+   versions, as you only need coverage information when developing a\n+   program.  We do hold version information, so that mismatches can be\n+   detected, and we use a format that allows tools to skip information\n+   they do not understand or are not interested in.\n \n    Numbers are recorded in the 32 bit unsigned binary form of the\n    endianness of the machine generating the file. 64 bit numbers are\n    stored as two 32 bit numbers, the low part first.  Strings are\n    padded with 1 to 4 NUL bytes, to bring the length up to a multiple\n    of 4. The number of 4 bytes is stored, followed by the padded\n-   string. Zero length and NULL strings are simply stored as\n-   a length of zero (they have no trailing NUL or padding).\n+   string. Zero length and NULL strings are simply stored as a length\n+   of zero (they have no trailing NUL or padding).\n \n    \tint32:  byte3 byte2 byte1 byte0 | byte0 byte1 byte2 byte3\n \tint64:  int32:low int32:high\n@@ -243,7 +242,6 @@ typedef HOST_WIDEST_INT gcov_type;\n #define gcov_seek __gcov_seek\n #define gcov_rewrite __gcov_rewrite\n #define gcov_is_error __gcov_is_error\n-#define gcov_is_eof __gcov_is_eof\n #define gcov_write_unsigned __gcov_write_unsigned\n #define gcov_write_counter __gcov_write_counter\n #define gcov_write_summary __gcov_write_summary\n@@ -284,7 +282,8 @@ typedef HOST_WIDEST_INT gcov_type;\n \n /* The record tags.  Values [1..3f] are for tags which may be in either\n    file.  Values [41..9f] for those in the note file and [a1..ff] for\n-   the data file.  */\n+   the data file.  The tag value zero is used as an explicit end of\n+   file marker -- it is not required to be present.  */\n \n #define GCOV_TAG_FUNCTION\t ((gcov_unsigned_t)0x01000000)\n #define GCOV_TAG_FUNCTION_LENGTH (2)\n@@ -510,7 +509,6 @@ GCOV_LINKAGE int gcov_close (void);\n /* Available everywhere.  */\n static gcov_position_t gcov_position (void);\n static int gcov_is_error (void);\n-static int gcov_is_eof (void);\n \n GCOV_LINKAGE gcov_unsigned_t gcov_read_unsigned (void);\n GCOV_LINKAGE gcov_type gcov_read_counter (void);\n@@ -522,7 +520,6 @@ GCOV_LINKAGE void gcov_write_counter (gcov_type);\n GCOV_LINKAGE void gcov_write_tag_length (gcov_unsigned_t, gcov_unsigned_t);\n GCOV_LINKAGE void gcov_write_summary (gcov_unsigned_t /*tag*/,\n \t\t\t\t      const struct gcov_summary *);\n-static void gcov_truncate (void);\n static void gcov_rewrite (void);\n GCOV_LINKAGE void gcov_seek (gcov_position_t /*position*/);\n #else\n@@ -567,14 +564,6 @@ gcov_position (void)\n   return gcov_var.start + gcov_var.offset;\n }\n \n-/* Return nonzero if we read to end of file.  */\n-\n-static inline int\n-gcov_is_eof (void)\n-{\n-  return !gcov_var.overread;\n-}\n-\n /* Return nonzero if the error flag is set.  */\n \n static inline int\n@@ -595,15 +584,6 @@ gcov_rewrite (void)\n   gcov_var.offset = 0;\n   fseek (gcov_var.file, 0L, SEEK_SET);\n }\n-\n-#ifdef __MINGW32__\n-#define ftruncate _chsize\n-#endif\n-static inline void\n-gcov_truncate (void)\n-{\n-  ftruncate (fileno (gcov_var.file), 0L);\n-}\n #endif\n \n #endif /* IN_LIBGCOV >= 0 */"}, {"sha": "c988730e38a74763b454632a8206944e434268ca", "filename": "gcc/gcov.c", "status": "modified", "additions": 11, "deletions": 16, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00cf2913f841cf835b44febec958831e74d42dea/gcc%2Fgcov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00cf2913f841cf835b44febec958831e74d42dea/gcc%2Fgcov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov.c?ref=00cf2913f841cf835b44febec958831e74d42dea", "patch": "@@ -896,14 +896,12 @@ read_graph_file (void)\n \t}\n       gcov_sync (base, length);\n       if (gcov_is_error ())\n-\tbreak;\n-    }\n-  if (!gcov_is_eof ())\n-    {\n-    corrupt:;\n-      fnotice (stderr, \"%s:corrupted\\n\", bbg_file_name);\n-      gcov_close ();\n-      return 1;\n+\t{\n+\tcorrupt:;\n+\t  fnotice (stderr, \"%s:corrupted\\n\", bbg_file_name);\n+\t  gcov_close ();\n+\t  return 1;\n+\t}\n     }\n   gcov_close ();\n \n@@ -1055,14 +1053,11 @@ read_count_file (void)\n \t}\n       gcov_sync (base, length);\n       if ((error = gcov_is_error ()))\n-\tbreak;\n-    }\n-\n-  if (!gcov_is_eof ())\n-    {\n-      fnotice (stderr, error < 0 ? \"%s:overflowed\\n\" : \"%s:corrupted\\n\",\n-\t       da_file_name);\n-      goto cleanup;\n+\t{\n+\t  fnotice (stderr, error < 0 ? \"%s:overflowed\\n\" : \"%s:corrupted\\n\",\n+\t\t   da_file_name);\n+\t  goto cleanup;\n+\t}\n     }\n \n   gcov_close ();"}, {"sha": "49cf3c7004ceb86348ff104d6c13041293dfbcc6", "filename": "gcc/libgcov.c", "status": "modified", "additions": 20, "deletions": 19, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00cf2913f841cf835b44febec958831e74d42dea/gcc%2Flibgcov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00cf2913f841cf835b44febec958831e74d42dea/gcc%2Flibgcov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcov.c?ref=00cf2913f841cf835b44febec958831e74d42dea", "patch": "@@ -164,6 +164,7 @@ gcov_exit (void)\n       int error = 0;\n       gcov_unsigned_t tag, length;\n       gcov_position_t summary_pos = 0;\n+      gcov_position_t eof_pos = 0;\n \n       memset (&this_object, 0, sizeof (this_object));\n       memset (&object, 0, sizeof (object));\n@@ -218,22 +219,16 @@ gcov_exit (void)\n \t    {\n \t      fprintf (stderr, \"profiling:%s:Not a gcov data file\\n\",\n \t\t       gi_ptr->filename);\n-\t    read_fatal:;\n-\t      gcov_close ();\n-\t      continue;\n+\t      goto read_fatal;\n \t    }\n \t  length = gcov_read_unsigned ();\n \t  if (!gcov_version (gi_ptr, length))\n \t    goto read_fatal;\n \n \t  length = gcov_read_unsigned ();\n \t  if (length != gi_ptr->stamp)\n-\t    {\n-\t      /* Read from a different compilation. Overwrite the\n-\t\t file.  */\n-\t      gcov_truncate ();\n-\t      goto rewrite;\n-\t    }\n+\t    /* Read from a different compilation. Overwrite the file.  */\n+\t    goto rewrite;\n \t  \n \t  /* Merge execution counts for each function.  */\n \t  for (f_ix = 0; f_ix < gi_ptr->n_functions; f_ix++)\n@@ -284,12 +279,13 @@ gcov_exit (void)\n \t  /* Check program & object summary */\n \t  while (1)\n \t    {\n-\t      gcov_position_t base = gcov_position ();\n \t      int is_program;\n \t      \n+\t      eof_pos = gcov_position ();\n \t      tag = gcov_read_unsigned ();\n \t      if (!tag)\n \t\tbreak;\n+\n \t      length = gcov_read_unsigned ();\n \t      is_program = tag == GCOV_TAG_PROGRAM_SUMMARY;\n \t      if (length != GCOV_TAG_SUMMARY_LENGTH\n@@ -300,19 +296,21 @@ gcov_exit (void)\n \t\tgoto read_error;\n \t      if (is_program && program.checksum == gcov_crc32)\n \t\t{\n-\t\t  summary_pos = base;\n+\t\t  summary_pos = eof_pos;\n \t\t  goto rewrite;\n \t\t}\n \t    }\n \t}\n+      goto rewrite;\n       \n-      if (!gcov_is_eof ())\n- \t{\n- \tread_error:;\n- \t  fprintf (stderr, error < 0 ? \"profiling:%s:Overflow merging\\n\"\n- \t\t   : \"profiling:%s:Error merging\\n\", gi_ptr->filename);\n- \t  goto read_fatal;\n- \t}\n+    read_error:;\n+      fprintf (stderr, error < 0 ? \"profiling:%s:Overflow merging\\n\"\n+\t       : \"profiling:%s:Error merging\\n\", gi_ptr->filename);\n+\t      \n+    read_fatal:;\n+      gcov_close ();\n+      continue;\n+\n     rewrite:;\n       gcov_rewrite ();\n       if (!summary_pos)\n@@ -414,8 +412,11 @@ gcov_exit (void)\n       gcov_write_summary (GCOV_TAG_OBJECT_SUMMARY, &object);\n \n       /* Generate whole program statistics.  */\n-      gcov_seek (summary_pos);\n+      if (eof_pos)\n+\tgcov_seek (eof_pos);\n       gcov_write_summary (GCOV_TAG_PROGRAM_SUMMARY, &program);\n+      if (!summary_pos)\n+\tgcov_write_unsigned (0);\n       if ((error = gcov_close ()))\n \t  fprintf (stderr, error  < 0 ?\n \t\t   \"profiling:%s:Overflow writing\\n\" :"}]}