{"sha": "eebbe2c70e1dc028b3d8a858397e923073a0abb7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWViYmUyYzcwZTFkYzAyOGIzZDhhODU4Mzk3ZTkyMzA3M2EwYWJiNw==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2006-11-11T17:32:12Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2006-11-11T17:32:12Z"}, "message": "re PR libstdc++/29496 (_M_invalidate function is not thread-safe in GLIBCXX_DEBUG mode)\n\n2006-11-11  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/29496\n\t* include/debug/safe_base.h (_Safe_sequence_base::_M_get_mutex,\n\t_Safe_iterator_base::_M_get_mutex, _M_attach_single, _M_detach_single):\n\tNew.\n\t* src/debug.cc: Define the latter.\n\t(_Safe_sequence_base::_M_detach_all, _M_detach_singular,\n\t_M_revalidate_singular, _M_swap): Use the mutex.\n\t(_Safe_iterator_base::_M_attach, _M_detach): Adjust, forward to the\n\t*_single version.\n\t* include/debug/safe_iterator.h (_Safe_iterator<>::_M_attach_single,\n\t_M_invalidate_single): New.\n \t* include/debug/safe_iterator.tcc: Define.\n\t(_Safe_iterator<>::_M_invalidate): Adjust, forward to\n\t_M_invalidate_single.\n\t* include/debug/safe_sequence.h (_Safe_sequence<>::_M_invalidate_if,\n\t_M_transfer_iter): Use the mutex, adjust, forward to the *_single\n\tversions of _M_invalidate and _M_attach.\n\t* config/abi/pre/gnu.ver (_Safe_sequence_base::_M_get_mutex,\n\t_Safe_iterator_base::_M_get_mutex, _M_attach_single, _M_detach_single):\n\tAdd @GLIBCXX_3.4.10; adjust.\n\t* configure.ac (libtool_VERSION): To 6:10:0.\n\t* testsuite/util/testsuite_abi.cc (check_version): Add GLIBCXX_3.4.10.\n\t* configure: Regenerate.\n\nFrom-SVN: r118701", "tree": {"sha": "d2e8480331466efe424bf65b11128513e9df650a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d2e8480331466efe424bf65b11128513e9df650a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eebbe2c70e1dc028b3d8a858397e923073a0abb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eebbe2c70e1dc028b3d8a858397e923073a0abb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eebbe2c70e1dc028b3d8a858397e923073a0abb7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eebbe2c70e1dc028b3d8a858397e923073a0abb7/comments", "author": null, "committer": null, "parents": [{"sha": "bc0a33d315e597f6d5c07a8a0b071de91d6aa20b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc0a33d315e597f6d5c07a8a0b071de91d6aa20b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc0a33d315e597f6d5c07a8a0b071de91d6aa20b"}], "stats": {"total": 238, "additions": 173, "deletions": 65}, "files": [{"sha": "c581a496e889f703f569cc072fef4d720649d26a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eebbe2c70e1dc028b3d8a858397e923073a0abb7/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eebbe2c70e1dc028b3d8a858397e923073a0abb7/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=eebbe2c70e1dc028b3d8a858397e923073a0abb7", "patch": "@@ -1,3 +1,29 @@\n+2006-11-11  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR libstdc++/29496\n+\t* include/debug/safe_base.h (_Safe_sequence_base::_M_get_mutex,\n+\t_Safe_iterator_base::_M_get_mutex, _M_attach_single, _M_detach_single):\n+\tNew.\n+\t* src/debug.cc: Define the latter.\n+\t(_Safe_sequence_base::_M_detach_all, _M_detach_singular,\n+\t_M_revalidate_singular, _M_swap): Use the mutex.\n+\t(_Safe_iterator_base::_M_attach, _M_detach): Adjust, forward to the\n+\t*_single version.\n+\t* include/debug/safe_iterator.h (_Safe_iterator<>::_M_attach_single,\n+\t_M_invalidate_single): New.\n+ \t* include/debug/safe_iterator.tcc: Define.\n+\t(_Safe_iterator<>::_M_invalidate): Adjust, forward to\n+\t_M_invalidate_single.\n+\t* include/debug/safe_sequence.h (_Safe_sequence<>::_M_invalidate_if,\n+\t_M_transfer_iter): Use the mutex, adjust, forward to the *_single\n+\tversions of _M_invalidate and _M_attach.\n+\t* config/abi/pre/gnu.ver (_Safe_sequence_base::_M_get_mutex,\n+\t_Safe_iterator_base::_M_get_mutex, _M_attach_single, _M_detach_single):\n+\tAdd @GLIBCXX_3.4.10; adjust.\n+\t* configure.ac (libtool_VERSION): To 6:10:0.\n+\t* testsuite/util/testsuite_abi.cc (check_version): Add GLIBCXX_3.4.10.\n+\t* configure: Regenerate.\n+\n 2006-11-10  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/locale/gnu/c_locale.cc (__convert_to_v): Prefer"}, {"sha": "327222d1e7d66152fba3e05f6cd10c1a81fac210", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eebbe2c70e1dc028b3d8a858397e923073a0abb7/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eebbe2c70e1dc028b3d8a858397e923073a0abb7/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=eebbe2c70e1dc028b3d8a858397e923073a0abb7", "patch": "@@ -120,13 +120,21 @@ GLIBCXX_3.4 {\n       std::__moneypunct_cache*;\n       std::__numpunct_cache*;\n       std::__timepunct_cache*;\n-      __gnu_debug::_Safe_iterator_base*;\n-      __gnu_debug::_Safe_sequence_base*;\n       __gnu_debug::_Error_formatter*\n     };\n \n     # Names not in an 'extern' block are mangled names.\n \n+    # __gnu_debug::_Safe_sequence_base and _Safe_iterator_base\n+    _ZN11__gnu_debug19_Safe_sequence_base13_M_detach_allEv;\n+    _ZN11__gnu_debug19_Safe_sequence_base18_M_detach_singularEv;\n+    _ZN11__gnu_debug19_Safe_sequence_base22_M_revalidate_singularEv;\n+    _ZN11__gnu_debug19_Safe_sequence_base7_M_swapERS0_;\n+    _ZN11__gnu_debug19_Safe_iterator_base9_M_attachEPNS_19_Safe_sequence_baseEb;\n+    _ZN11__gnu_debug19_Safe_iterator_base9_M_detachEv;\n+    _ZNK11__gnu_debug19_Safe_iterator_base11_M_singularEv;\n+    _ZNK11__gnu_debug19_Safe_iterator_base14_M_can_compareERKS0_;\n+\n     # std::string\n     _ZNSsC*;\n     _ZNSsD*;\n@@ -662,8 +670,17 @@ GLIBCXX_3.4.9 {\n \n     _ZNSo9_M_insertEPKc[il];\n     _ZNSt13basic_ostreamIwSt11char_traitsIwEE9_M_insertEPKw[il];\n+\n } GLIBCXX_3.4.8;\n \n+GLIBCXX_3.4.10 {\n+\n+    _ZN11__gnu_debug19_Safe_sequence_base12_M_get_mutexEv;\n+    _ZN11__gnu_debug19_Safe_iterator_base16_M_attach_singleEPNS_19_Safe_sequence_baseEb;\n+    _ZN11__gnu_debug19_Safe_iterator_base16_M_detach_singleEv;\n+    _ZN11__gnu_debug19_Safe_iterator_base12_M_get_mutexEv;\n+\n+} GLIBCXX_3.4.9;\n \n # Symbols in the support library (libsupc++) have their own tag.\n CXXABI_1.3 {"}, {"sha": "ae9283da1512884cf5fd46da99e1907106591b2b", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eebbe2c70e1dc028b3d8a858397e923073a0abb7/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eebbe2c70e1dc028b3d8a858397e923073a0abb7/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=eebbe2c70e1dc028b3d8a858397e923073a0abb7", "patch": "@@ -1378,7 +1378,7 @@ ac_compiler_gnu=$ac_cv_c_compiler_gnu\n ### am handles this now?  ORIGINAL_LD_FOR_MULTILIBS=$LD\n \n # For libtool versioning info, format is CURRENT:REVISION:AGE\n-libtool_VERSION=6:9:0\n+libtool_VERSION=6:10:0\n \n \n # Find the rest of the source tree framework."}, {"sha": "b3f17dd5d4e593b493ea3ec50fd73b7be89f0313", "filename": "libstdc++-v3/configure.ac", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eebbe2c70e1dc028b3d8a858397e923073a0abb7/libstdc%2B%2B-v3%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eebbe2c70e1dc028b3d8a858397e923073a0abb7/libstdc%2B%2B-v3%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.ac?ref=eebbe2c70e1dc028b3d8a858397e923073a0abb7", "patch": "@@ -12,7 +12,7 @@ AC_CONFIG_HEADER(config.h)\n ### am handles this now?  ORIGINAL_LD_FOR_MULTILIBS=$LD\n \n # For libtool versioning info, format is CURRENT:REVISION:AGE\n-libtool_VERSION=6:9:0\n+libtool_VERSION=6:10:0\n AC_SUBST(libtool_VERSION)\n \n # Find the rest of the source tree framework."}, {"sha": "2851fc3fa9c08c60f97fc696ea803e365d400f08", "filename": "libstdc++-v3/include/debug/safe_base.h", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eebbe2c70e1dc028b3d8a858397e923073a0abb7/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eebbe2c70e1dc028b3d8a858397e923073a0abb7/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_base.h?ref=eebbe2c70e1dc028b3d8a858397e923073a0abb7", "patch": "@@ -31,6 +31,8 @@\n #ifndef _GLIBCXX_DEBUG_SAFE_BASE_H\n #define _GLIBCXX_DEBUG_SAFE_BASE_H 1\n \n+#include <ext/concurrence.h>\n+\n namespace __gnu_debug\n {\n   class _Safe_sequence_base;\n@@ -103,6 +105,9 @@ namespace __gnu_debug\n \n     ~_Safe_iterator_base() { this->_M_detach(); }\n \n+    /** For use in _Safe_iterator. */\n+    __gnu_cxx::__mutex& _M_get_mutex();\n+\n   public:\n     /** Attaches this iterator to the given sequence, detaching it\n      *\tfrom whatever sequence it was attached to originally. If the\n@@ -111,11 +116,17 @@ namespace __gnu_debug\n      */\n     void _M_attach(_Safe_sequence_base* __seq, bool __constant);\n \n+    /** Likewise, but not thread-safe. */\n+    void _M_attach_single(_Safe_sequence_base* __seq, bool __constant);\n+\n     /** Detach the iterator for whatever sequence it is attached to,\n      *\tif any.\n     */\n     void _M_detach();\n \n+    /** Likewise, but not thread-safe. */\n+    void _M_detach_single();\n+\n     /** Determines if we are attached to the given sequence. */\n     bool _M_attached_to(const _Safe_sequence_base* __seq) const\n     { return _M_sequence == __seq; }\n@@ -196,6 +207,9 @@ namespace __gnu_debug\n     void\n     _M_swap(_Safe_sequence_base& __x);\n \n+    /** For use in _Safe_sequence. */\n+    __gnu_cxx::__mutex& _M_get_mutex();\n+\n   public:\n     /** Invalidates all iterators. */\n     void"}, {"sha": "0d61a75eec91f9078802545d06b1103ae35d9c10", "filename": "libstdc++-v3/include/debug/safe_iterator.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eebbe2c70e1dc028b3d8a858397e923073a0abb7/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eebbe2c70e1dc028b3d8a858397e923073a0abb7/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h?ref=eebbe2c70e1dc028b3d8a858397e923073a0abb7", "patch": "@@ -321,10 +321,22 @@ namespace __gnu_debug\n \t\t\t\t       _M_constant());\n       }\n \n+      /** Likewise, but not thread-safe. */\n+      void\n+      _M_attach_single(const _Sequence* __seq)\n+      {\n+\t_Safe_iterator_base::_M_attach_single(const_cast<_Sequence*>(__seq),\n+\t\t\t\t\t      _M_constant());\n+      }\n+\n       /** Invalidate the iterator, making it singular. */\n       void\n       _M_invalidate();\n \n+      /** Likewise, but not thread-safe. */\n+      void\n+      _M_invalidate_single();\n+\n       /// Is the iterator dereferenceable?\n       bool\n       _M_dereferenceable() const"}, {"sha": "08b629e8916f2e243b746f8d613db7d570f76bad", "filename": "libstdc++-v3/include/debug/safe_iterator.tcc", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eebbe2c70e1dc028b3d8a858397e923073a0abb7/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eebbe2c70e1dc028b3d8a858397e923073a0abb7/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.tcc?ref=eebbe2c70e1dc028b3d8a858397e923073a0abb7", "patch": "@@ -110,24 +110,33 @@ namespace __gnu_debug\n     void\n     _Safe_iterator<_Iterator, _Sequence>::\n     _M_invalidate()\n+    {\n+      __gnu_cxx::__scoped_lock sentry(this->_M_get_mutex());\n+      _M_invalidate_single();\n+    }\n+\n+  template<typename _Iterator, typename _Sequence>\n+    void\n+    _Safe_iterator<_Iterator, _Sequence>::\n+    _M_invalidate_single()\n     {\n       typedef typename _Sequence::iterator iterator;\n       typedef typename _Sequence::const_iterator const_iterator;\n \n       if (!this->_M_singular())\n \t{\n-\t  for (_Safe_iterator_base* iter = _M_sequence->_M_iterators; iter;)\n+\t  for (_Safe_iterator_base* __iter = _M_sequence->_M_iterators;\n+\t       __iter; __iter = __iter->_M_next)\n \t    {\n-\t      iterator* __victim = static_cast<iterator*>(iter);\n-\t      iter = iter->_M_next;\n+\t      iterator* __victim = static_cast<iterator*>(__iter);\n \t      if (this->base() == __victim->base())\n \t\t__victim->_M_version = 0;\n \t    }\n-\t  for (_Safe_iterator_base* iter = _M_sequence->_M_const_iterators;\n-\t       iter;)\n+\n+\t  for (_Safe_iterator_base* __iter2 = _M_sequence->_M_const_iterators;\n+\t       __iter2; __iter2 = __iter2->_M_next)\n \t    {\n-\t      const_iterator* __victim = static_cast<const_iterator*>(iter);\n-\t      iter = iter->_M_next;\n+\t      const_iterator* __victim = static_cast<const_iterator*>(__iter2);\n \t      if (__victim->base() == this->base())\n \t\t__victim->_M_version = 0;\n \t    }"}, {"sha": "fe356aa53eadccdb8a5302c15b0e51bcf2ccde68", "filename": "libstdc++-v3/include/debug/safe_sequence.h", "status": "modified", "additions": 36, "deletions": 34, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eebbe2c70e1dc028b3d8a858397e923073a0abb7/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_sequence.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eebbe2c70e1dc028b3d8a858397e923073a0abb7/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_sequence.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_sequence.h?ref=eebbe2c70e1dc028b3d8a858397e923073a0abb7", "patch": "@@ -124,27 +124,28 @@ namespace __gnu_debug\n         typedef typename _Sequence::iterator iterator;\n         typedef typename _Sequence::const_iterator const_iterator;\n \n-        for (_Safe_iterator_base* __iter = _M_iterators; __iter; )\n-        {\n-          iterator* __victim = static_cast<iterator*>(__iter);\n-          __iter = __iter->_M_next;\n-          if (!__victim->_M_singular())\n-          {\n-\t    if (__pred(__victim->base()))\n-\t      __victim->_M_invalidate();\n-          }\n-        }\n-\n-        for (_Safe_iterator_base* __iter2 = _M_const_iterators; __iter2; )\n-        {\n-          const_iterator* __victim = static_cast<const_iterator*>(__iter2);\n-          __iter2 = __iter2->_M_next;\n-          if (!__victim->_M_singular())\n-          {\n-\t    if (__pred(__victim->base()))\n-\t      __victim->_M_invalidate();\n-          }\n-        }\n+\t__gnu_cxx::__scoped_lock sentry(this->_M_get_mutex());\n+        for (_Safe_iterator_base* __iter = _M_iterators; __iter;)\n+\t  {\n+\t    iterator* __victim = static_cast<iterator*>(__iter);\n+\t    __iter = __iter->_M_next;\n+\t    if (!__victim->_M_singular())\n+\t      {\n+\t\tif (__pred(__victim->base()))\n+\t\t  __victim->_M_invalidate_single();\n+\t      }\n+\t  }\n+\n+        for (_Safe_iterator_base* __iter2 = _M_const_iterators; __iter2;)\n+\t  {\n+\t    const_iterator* __victim = static_cast<const_iterator*>(__iter2);\n+\t    __iter2 = __iter2->_M_next;\n+\t    if (!__victim->_M_singular())\n+\t      {\n+\t\tif (__pred(__victim->base()))\n+\t\t  __victim->_M_invalidate_single();\n+\t      }\n+\t  }\n       }\n \n   template<typename _Sequence>\n@@ -160,22 +161,23 @@ namespace __gnu_debug\n         typedef typename _Sequence::iterator iterator;\n         typedef typename _Sequence::const_iterator const_iterator;\n \n-        for (_Safe_iterator_base* __iter = __from->_M_iterators; __iter; )\n-        {\n-          iterator* __victim = static_cast<iterator*>(__iter);\n-          __iter = __iter->_M_next;\n-          if (!__victim->_M_singular() && __victim->base() == __x.base())\n-\t    __victim->_M_attach(static_cast<_Sequence*>(this));\n-        }\n+\t__gnu_cxx::__scoped_lock sentry(this->_M_get_mutex());\n+        for (_Safe_iterator_base* __iter = __from->_M_iterators; __iter;)\n+\t  {\n+\t    iterator* __victim = static_cast<iterator*>(__iter);\n+\t    __iter = __iter->_M_next;\n+\t    if (!__victim->_M_singular() && __victim->base() == __x.base())\n+\t      __victim->_M_attach_single(static_cast<_Sequence*>(this));\n+\t  }\n \n         for (_Safe_iterator_base* __iter2 = __from->_M_const_iterators; \n \t     __iter2;)\n-        {\n-          const_iterator* __victim = static_cast<const_iterator*>(__iter2);\n-          __iter2 = __iter2->_M_next;\n-          if (!__victim->_M_singular() && __victim->base() == __x.base())\n-\t    __victim->_M_attach(static_cast<_Sequence*>(this));\n-        }\n+\t  {\n+\t    const_iterator* __victim = static_cast<const_iterator*>(__iter2);\n+\t    __iter2 = __iter2->_M_next;\n+\t    if (!__victim->_M_singular() && __victim->base() == __x.base())\n+\t      __victim->_M_attach_single(static_cast<_Sequence*>(this));\n+\t  }\n       }\n } // namespace __gnu_debug\n "}, {"sha": "d3935842be9e6acec39ce6afeea1c9788b39cae4", "filename": "libstdc++-v3/src/debug.cc", "status": "modified", "additions": 47, "deletions": 20, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eebbe2c70e1dc028b3d8a858397e923073a0abb7/libstdc%2B%2B-v3%2Fsrc%2Fdebug.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eebbe2c70e1dc028b3d8a858397e923073a0abb7/libstdc%2B%2B-v3%2Fsrc%2Fdebug.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fdebug.cc?ref=eebbe2c70e1dc028b3d8a858397e923073a0abb7", "patch": "@@ -35,13 +35,12 @@\n #include <cassert>\n #include <cstring>\n #include <cctype>\n-#include <ext/concurrence.h>\n \n using namespace std;\n \n namespace\n {\n-  __gnu_cxx::__mutex iterator_base_mutex;\n+  __gnu_cxx::__mutex safe_base_mutex;\n } // anonymous namespace\n \n namespace __gnu_debug\n@@ -107,50 +106,53 @@ namespace __gnu_debug\n     \"attempt to increment an end-of-stream istreambuf_iterator\"\n   };\n \n-  void \n+  void\n   _Safe_sequence_base::\n   _M_detach_all()\n   {\n-    for (_Safe_iterator_base* __iter = _M_iterators; __iter; )\n+    __gnu_cxx::__scoped_lock sentry(safe_base_mutex);\n+    for (_Safe_iterator_base* __iter = _M_iterators; __iter;)\n       {\n \t_Safe_iterator_base* __old = __iter;\n \t__iter = __iter->_M_next;\n-\t__old->_M_attach(0, false);\n+\t__old->_M_detach_single();\n       }\n     \n-    for (_Safe_iterator_base* __iter2 = _M_const_iterators; __iter2; )\n+    for (_Safe_iterator_base* __iter2 = _M_const_iterators; __iter2;)\n       {\n \t_Safe_iterator_base* __old = __iter2;\n \t__iter2 = __iter2->_M_next;\n-\t__old->_M_attach(0, true);\n+\t__old->_M_detach_single();\n       }\n   }\n \n-  void \n+  void\n   _Safe_sequence_base::\n   _M_detach_singular()\n   {\n-    for (_Safe_iterator_base* __iter = _M_iterators; __iter; )\n+    __gnu_cxx::__scoped_lock sentry(safe_base_mutex);\n+    for (_Safe_iterator_base* __iter = _M_iterators; __iter;)\n       {\n \t_Safe_iterator_base* __old = __iter;\n \t__iter = __iter->_M_next;\n \tif (__old->_M_singular())\n-\t  __old->_M_attach(0, false);\n+\t  __old->_M_detach_single();\n       }\n \n-    for (_Safe_iterator_base* __iter2 = _M_const_iterators; __iter2; )\n+    for (_Safe_iterator_base* __iter2 = _M_const_iterators; __iter2;)\n       {\n \t_Safe_iterator_base* __old = __iter2;\n \t__iter2 = __iter2->_M_next;\n \tif (__old->_M_singular())\n-\t  __old->_M_attach(0, true);\n+\t  __old->_M_detach_single();\n       }\n   }\n \n   void\n   _Safe_sequence_base::\n   _M_revalidate_singular()\n   {\n+    __gnu_cxx::__scoped_lock sentry(safe_base_mutex);\n     for (_Safe_iterator_base* __iter = _M_iterators; __iter;\n \t __iter = __iter->_M_next)\n       __iter->_M_version = _M_version;\n@@ -160,10 +162,11 @@ namespace __gnu_debug\n       __iter2->_M_version = _M_version;\n   }\n \n-  void \n+  void\n   _Safe_sequence_base::\n   _M_swap(_Safe_sequence_base& __x)\n   {\n+    __gnu_cxx::__scoped_lock sentry(safe_base_mutex);\n     swap(_M_iterators, __x._M_iterators);\n     swap(_M_const_iterators, __x._M_const_iterators);\n     swap(_M_version, __x._M_version);\n@@ -177,17 +180,29 @@ namespace __gnu_debug\n     for (__iter = __x._M_const_iterators; __iter; __iter = __iter->_M_next)\n       __iter->_M_sequence = &__x;\n   }\n-  \n-  void \n+\n+  __gnu_cxx::__mutex&\n+  _Safe_sequence_base::\n+  _M_get_mutex()\n+  { return safe_base_mutex; }\n+\n+  void\n   _Safe_iterator_base::\n   _M_attach(_Safe_sequence_base* __seq, bool __constant)\n   {\n-    _M_detach();\n+    __gnu_cxx::__scoped_lock sentry(safe_base_mutex);\n+    _M_attach_single(__seq, __constant);\n+  }\n+  \n+  void\n+  _Safe_iterator_base::\n+  _M_attach_single(_Safe_sequence_base* __seq, bool __constant)\n+  {\n+    _M_detach_single();\n     \n     // Attach to the new sequence (if there is one)\n     if (__seq)\n       {\n-\t__gnu_cxx::__scoped_lock sentry(iterator_base_mutex);\n \t_M_sequence = __seq;\n \t_M_version = _M_sequence->_M_version;\n \t_M_prior = 0;\n@@ -208,11 +223,18 @@ namespace __gnu_debug\n       }\n   }\n \n-  void \n+  void\n   _Safe_iterator_base::\n   _M_detach()\n   {\n-    __gnu_cxx::__scoped_lock sentry(iterator_base_mutex);\n+    __gnu_cxx::__scoped_lock sentry(safe_base_mutex);\n+    _M_detach_single();\n+  }\n+\n+  void\n+  _Safe_iterator_base::\n+  _M_detach_single()\n+  {\n     if (_M_sequence)\n       {\n \t// Remove us from this sequence's list\n@@ -232,7 +254,7 @@ namespace __gnu_debug\n     _M_prior = 0;\n     _M_next = 0;\n   }\n-  \n+\n   bool\n   _Safe_iterator_base::\n   _M_singular() const\n@@ -246,6 +268,11 @@ namespace __gnu_debug\n \t    && !__x._M_singular() && _M_sequence == __x._M_sequence);\n   }\n \n+  __gnu_cxx::__mutex&\n+  _Safe_iterator_base::\n+  _M_get_mutex()\n+  { return safe_base_mutex; }\n+\n   void\n   _Error_formatter::_Parameter::\n   _M_print_field(const _Error_formatter* __formatter, const char* __name) const"}, {"sha": "e26f009519df4f29ccbab9d3f80e9320d7f1c4d4", "filename": "libstdc++-v3/testsuite/util/testsuite_abi.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eebbe2c70e1dc028b3d8a858397e923073a0abb7/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_abi.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eebbe2c70e1dc028b3d8a858397e923073a0abb7/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_abi.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_abi.cc?ref=eebbe2c70e1dc028b3d8a858397e923073a0abb7", "patch": "@@ -188,6 +188,7 @@ check_version(symbol& test, bool added)\n       known_versions.push_back(\"GLIBCXX_3.4.7\");\n       known_versions.push_back(\"GLIBCXX_3.4.8\");\n       known_versions.push_back(\"GLIBCXX_3.4.9\");\n+      known_versions.push_back(\"GLIBCXX_3.4.10\");\n       known_versions.push_back(\"GLIBCXX_LDBL_3.4\");\n       known_versions.push_back(\"GLIBCXX_LDBL_3.4.7\");\n       known_versions.push_back(\"CXXABI_1.3\");"}]}