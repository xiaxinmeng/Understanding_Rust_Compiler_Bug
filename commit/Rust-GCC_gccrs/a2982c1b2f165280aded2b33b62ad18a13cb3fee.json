{"sha": "a2982c1b2f165280aded2b33b62ad18a13cb3fee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTI5ODJjMWIyZjE2NTI4MGFkZWQyYjMzYjYyYWQxOGExM2NiM2ZlZQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2004-03-18T22:44:42Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2004-03-18T22:44:42Z"}, "message": "cp-tree.def (TEMPLATE_TYPE_PARM, [...]): Update comments.\n\n\t* cp-tree.def (TEMPLATE_TYPE_PARM, TYPEOF_TYPE): Update comments.\n\t* cp-tree.h (NEW_EXPR_USE_GLOBAL, DELETE_EXPR_USE_GLOBAL): Add check.\n\t(DELETE_EXPR_USE_VEC, COMPOUND_EXPR_OVERLOADED): Likewise.\n\t(KOENIG_LOOKUP_P, PTRMEM_OK_P, TEMPLATE_TYPE_PARM_INDEX): Likewise.\n\t(TYPENAME_TYPE_FULLNAME): Add check and use type.values.\n\t(TYPEOF_TYPE_EXPR): New macro.\n\nFrom-SVN: r79645", "tree": {"sha": "aa8404b6acf8956c4d37b44844acb98a16568bf6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa8404b6acf8956c4d37b44844acb98a16568bf6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a2982c1b2f165280aded2b33b62ad18a13cb3fee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2982c1b2f165280aded2b33b62ad18a13cb3fee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2982c1b2f165280aded2b33b62ad18a13cb3fee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2982c1b2f165280aded2b33b62ad18a13cb3fee/comments", "author": null, "committer": null, "parents": [{"sha": "d3b6a5fb669a3b71839e69e4bfbe0c414829c834", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3b6a5fb669a3b71839e69e4bfbe0c414829c834", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3b6a5fb669a3b71839e69e4bfbe0c414829c834"}], "stats": {"total": 38, "additions": 27, "deletions": 11}, "files": [{"sha": "00e506659b5f9eda9857337ddf2189cad253f4e0", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2982c1b2f165280aded2b33b62ad18a13cb3fee/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2982c1b2f165280aded2b33b62ad18a13cb3fee/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a2982c1b2f165280aded2b33b62ad18a13cb3fee", "patch": "@@ -1,5 +1,11 @@\n 2004-03-18  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n+\t* cp-tree.def (TEMPLATE_TYPE_PARM, TYPEOF_TYPE): Update comments.\n+\t* cp-tree.h (NEW_EXPR_USE_GLOBAL, DELETE_EXPR_USE_GLOBAL): Add check.\n+\t(DELETE_EXPR_USE_VEC, COMPOUND_EXPR_OVERLOADED): Likewise.\n+\t(KOENIG_LOOKUP_P, PTRMEM_OK_P, TEMPLATE_TYPE_PARM_INDEX): Likewise.\n+\t(TYPENAME_TYPE_FULLNAME): Add check and use type.values.\n+\t(TYPEOF_TYPE_EXPR): New macro.\n \t* class.c (finish_struct_bits): Use TYPE_VFIELD and TYPE_METHODS.\n \t* error.c (dump_type): Use TYPEOF_TYPE_EXPR.\n \t* pt.c (tsubst): Likewise."}, {"sha": "d64752068a3cbd2efb9c7fa9d1414bd0f498d4d1", "filename": "gcc/cp/cp-tree.def", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2982c1b2f165280aded2b33b62ad18a13cb3fee/gcc%2Fcp%2Fcp-tree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2982c1b2f165280aded2b33b62ad18a13cb3fee/gcc%2Fcp%2Fcp-tree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.def?ref=a2982c1b2f165280aded2b33b62ad18a13cb3fee", "patch": "@@ -159,7 +159,7 @@ DEFTREECODE (TEMPLATE_DECL, \"template_decl\", 'd', 0)\n DEFTREECODE (TEMPLATE_PARM_INDEX, \"template_parm_index\", 'x', 0)\n \n /* Index into a template parameter list.  This parameter must be a type.\n-   The TYPE_FIELDS value will be a TEMPLATE_PARM_INDEX.  */\n+   The type.value field will be a TEMPLATE_PARM_INDEX.  */\n DEFTREECODE (TEMPLATE_TYPE_PARM, \"template_type_parm\", 't', 0)\n \n /* Index into a template parameter list for template template parameters.\n@@ -190,7 +190,7 @@ DEFTREECODE (TYPENAME_TYPE, \"typename_type\", 't', 0)\n    TYPE_NAME is an IDENTIFIER_NODE for `C', the member class template.  */\n DEFTREECODE (UNBOUND_CLASS_TEMPLATE, \"unbound_class_template\", 't', 0)\n \n-/* A type designated by `__typeof (expr)'.  TYPE_FIELDS is the\n+/* A type designated by `__typeof (expr)'.  TYPEOF_TYPE_EXPR is the\n    expression in question.  */\n DEFTREECODE (TYPEOF_TYPE, \"typeof_type\", 't', 0)\n "}, {"sha": "59cd2d594b907b035963d8b50952adb268bbdd6a", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2982c1b2f165280aded2b33b62ad18a13cb3fee/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2982c1b2f165280aded2b33b62ad18a13cb3fee/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=a2982c1b2f165280aded2b33b62ad18a13cb3fee", "patch": "@@ -1462,7 +1462,7 @@ struct lang_type GTY(())\n \n /* Nonzero if this binfo is for a dependent base - one that should not\n    be searched.  */\n-#define BINFO_DEPENDENT_BASE_P(NODE) TREE_LANG_FLAG_1(NODE)\n+#define BINFO_DEPENDENT_BASE_P(NODE) TREE_LANG_FLAG_1 (NODE)\n \n /* Nonzero if this binfo has lost its primary base binfo (because that\n    is a nearly-empty virtual base that has been taken by some other\n@@ -2256,17 +2256,21 @@ struct lang_decl GTY(())\n   (DECL_LANG_SPECIFIC (FUNCTION_DECL_CHECK (NODE))\t\\\n    ->u.f.u.saved_language_function)\n \n-#define NEW_EXPR_USE_GLOBAL(NODE)\tTREE_LANG_FLAG_0 (NODE)\n-#define DELETE_EXPR_USE_GLOBAL(NODE)\tTREE_LANG_FLAG_0 (NODE)\n-#define DELETE_EXPR_USE_VEC(NODE)\tTREE_LANG_FLAG_1 (NODE)\n+#define NEW_EXPR_USE_GLOBAL(NODE) \\\n+  TREE_LANG_FLAG_0 (NEW_EXPR_CHECK (NODE))\n+#define DELETE_EXPR_USE_GLOBAL(NODE) \\\n+  TREE_LANG_FLAG_0 (DELETE_EXPR_CHECK (NODE))\n+#define DELETE_EXPR_USE_VEC(NODE) \\\n+  TREE_LANG_FLAG_1 (DELETE_EXPR_CHECK (NODE))\n \n /* Indicates that this is a non-dependent COMPOUND_EXPR which will\n    resolve to a function call.  */\n-#define COMPOUND_EXPR_OVERLOADED(NODE)\tTREE_LANG_FLAG_0 (NODE)\n+#define COMPOUND_EXPR_OVERLOADED(NODE) \\\n+  TREE_LANG_FLAG_0 (COMPOUND_EXPR_CHECK (NODE))\n \n /* In a CALL_EXPR appearing in a template, true if Koenig lookup\n    should be performed at instantiation time.  */\n-#define KOENIG_LOOKUP_P(NODE) TREE_LANG_FLAG_0(NODE)\n+#define KOENIG_LOOKUP_P(NODE) TREE_LANG_FLAG_0 (CALL_EXPR_CHECK (NODE))\n \n /* Nonzero if this AGGR_INIT_EXPR provides for initialization via a\n    constructor call, rather than an ordinary function call.  */\n@@ -2286,7 +2290,7 @@ struct lang_decl GTY(())\n    this is an IDENTIFIER_NODE, and the same as the DECL_NAME on the\n    corresponding TYPE_DECL.  However, this may also be a\n    TEMPLATE_ID_EXPR if we had something like `typename X::Y<T>'.  */\n-#define TYPENAME_TYPE_FULLNAME(NODE) (TYPE_FIELDS (NODE))\n+#define TYPENAME_TYPE_FULLNAME(NODE) (TYPENAME_TYPE_CHECK (NODE))->type.values\n \n /* Nonzero in INTEGER_CST means that this int is negative by dint of\n    using a twos-complement negated operand.  */\n@@ -2490,7 +2494,8 @@ struct lang_decl GTY(())\n \n /* Indicates when overload resolution may resolve to a pointer to\n    member function. [expr.unary.op]/3 */\n-#define PTRMEM_OK_P(NODE) TREE_LANG_FLAG_0 (NODE)\n+#define PTRMEM_OK_P(NODE) \\\n+  TREE_LANG_FLAG_0 (TREE_CHECK2 ((NODE), ADDR_EXPR, OFFSET_REF))\n \n /* Get the POINTER_TYPE to the METHOD_TYPE associated with this\n    pointer to member function.  TYPE_PTRMEMFUNC_P _must_ be true,\n@@ -2544,6 +2549,9 @@ struct lang_decl GTY(())\n    `Y'.  */\n #define PTRMEM_CST_MEMBER(NODE) (((ptrmem_cst_t)PTRMEM_CST_CHECK (NODE))->member)\n \n+/* The expression in question for a TYPEOF_TYPE.  */\n+#define TYPEOF_TYPE_EXPR(NODE) (TYPEOF_TYPE_CHECK (NODE))->type.values\n+\n /* Nonzero for VAR_DECL and FUNCTION_DECL node means that `extern' was\n    specified in its declaration.  This can also be set for an\n    erroneously declared PARM_DECL.  */\n@@ -3401,7 +3409,9 @@ enum overload_flags { NO_SPECIAL = 0, DTOR_FLAG, OP_FLAG, TYPENAME_FLAG };\n \n /* These macros are for accessing the fields of TEMPLATE_TYPE_PARM,\n    TEMPLATE_TEMPLATE_PARM and BOUND_TEMPLATE_TEMPLATE_PARM nodes.  */\n-#define TEMPLATE_TYPE_PARM_INDEX(NODE) (TYPE_FIELDS (NODE))\n+#define TEMPLATE_TYPE_PARM_INDEX(NODE)\t\t\t\t\t \\\n+  (TREE_CHECK3 ((NODE), TEMPLATE_TYPE_PARM, TEMPLATE_TEMPLATE_PARM,\t\\\n+\t\tBOUND_TEMPLATE_TEMPLATE_PARM))->type.values\n #define TEMPLATE_TYPE_IDX(NODE) \\\n   (TEMPLATE_PARM_IDX (TEMPLATE_TYPE_PARM_INDEX (NODE)))\n #define TEMPLATE_TYPE_LEVEL(NODE) \\"}]}