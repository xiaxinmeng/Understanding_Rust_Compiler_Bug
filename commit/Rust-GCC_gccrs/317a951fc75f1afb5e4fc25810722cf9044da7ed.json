{"sha": "317a951fc75f1afb5e4fc25810722cf9044da7ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzE3YTk1MWZjNzVmMWFmYjVlNGZjMjU4MTA3MjJjZjkwNDRkYTdlZA==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2014-01-25T20:16:14Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2014-01-25T20:16:14Z"}, "message": "constraints.md (kl): Delete.\n\ngcc/\n\t* config/mips/constraints.md (kl): Delete.\n\t* config/mips/mips.md (divmod<mode>4, udivmod<mode>4): Turn into\n\tdefine expands, using...\n\t(divmod<mode>4_mips16, udivmod<mode>4_mips16): ...these new\n\tinstructions for MIPS16.\n\t(*divmod<mode>4, *udivmod<mode>4): New patterns, taken from the\n\tnon-MIPS16 version of the old divmod<mode>4 and udivmod<mode>4.\n\nFrom-SVN: r207079", "tree": {"sha": "61e1e082d8cd475a243a3d27fe8660aefe81dfd5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/61e1e082d8cd475a243a3d27fe8660aefe81dfd5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/317a951fc75f1afb5e4fc25810722cf9044da7ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/317a951fc75f1afb5e4fc25810722cf9044da7ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/317a951fc75f1afb5e4fc25810722cf9044da7ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/317a951fc75f1afb5e4fc25810722cf9044da7ed/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3abe9053ba83798e124f9efe9996e42a7d07a4e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3abe9053ba83798e124f9efe9996e42a7d07a4e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3abe9053ba83798e124f9efe9996e42a7d07a4e8"}], "stats": {"total": 123, "additions": 100, "deletions": 23}, "files": [{"sha": "921b0ce64194dc903e63e1e577cfc1eb2ca51807", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/317a951fc75f1afb5e4fc25810722cf9044da7ed/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/317a951fc75f1afb5e4fc25810722cf9044da7ed/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=317a951fc75f1afb5e4fc25810722cf9044da7ed", "patch": "@@ -1,3 +1,13 @@\n+2014-01-25  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* config/mips/constraints.md (kl): Delete.\n+\t* config/mips/mips.md (divmod<mode>4, udivmod<mode>4): Turn into\n+\tdefine expands, using...\n+\t(divmod<mode>4_mips16, udivmod<mode>4_mips16): ...these new\n+\tinstructions for MIPS16.\n+\t(*divmod<mode>4, *udivmod<mode>4): New patterns, taken from the\n+\tnon-MIPS16 version of the old divmod<mode>4 and udivmod<mode>4.\n+\n 2014-01-25  Walter Lee  <walt@tilera.com>\n \n \t* config/tilepro/tilepro.md (ctzdi2): Use register_operand"}, {"sha": "49e48954f515f3575a0370ff359a78e71f1d7bcf", "filename": "gcc/config/mips/constraints.md", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/317a951fc75f1afb5e4fc25810722cf9044da7ed/gcc%2Fconfig%2Fmips%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/317a951fc75f1afb5e4fc25810722cf9044da7ed/gcc%2Fconfig%2Fmips%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fconstraints.md?ref=317a951fc75f1afb5e4fc25810722cf9044da7ed", "patch": "@@ -92,12 +92,6 @@\n ;; but the DSP version allows any accumulator target.\n (define_register_constraint \"ka\" \"ISA_HAS_DSP_MULT ? ACC_REGS : MD_REGS\")\n \n-;; The register class to use for an allocatable division result.\n-;; MIPS16 uses M16_REGS because LO is fixed.\n-(define_register_constraint \"kl\"\n-  \"TARGET_MIPS16 ? M16_REGS : TARGET_BIG_ENDIAN ? MD1_REG : MD0_REG\"\n-  \"@internal\")\n-\n (define_constraint \"kf\"\n   \"@internal\"\n   (match_operand 0 \"force_to_mem_operand\"))"}, {"sha": "4f643604008a996a556da04156dde28a9cc344cf", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 90, "deletions": 17, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/317a951fc75f1afb5e4fc25810722cf9044da7ed/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/317a951fc75f1afb5e4fc25810722cf9044da7ed/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=317a951fc75f1afb5e4fc25810722cf9044da7ed", "patch": "@@ -2559,56 +2559,129 @@\n \n ;; VR4120 errata MD(A1): signed division instructions do not work correctly\n ;; with negative operands.  We use special libgcc functions instead.\n-;;\n+(define_expand \"divmod<mode>4\"\n+  [(parallel\n+     [(set (match_operand:GPR 0 \"register_operand\")\n+\t   (div:GPR (match_operand:GPR 1 \"register_operand\")\n+\t\t    (match_operand:GPR 2 \"register_operand\")))\n+      (set (match_operand:GPR 3 \"register_operand\")\n+\t   (mod:GPR (match_dup 1)\n+\t\t    (match_dup 2)))])]\n+  \"ISA_HAS_<D>DIV && !TARGET_FIX_VR4120\"\n+{\n+  if (TARGET_MIPS16)\n+    {\n+      rtx lo = gen_rtx_REG (<MODE>mode, LO_REGNUM);\n+      emit_insn (gen_divmod<mode>4_mips16 (operands[0], operands[1],\n+\t\t\t\t\t   operands[2], operands[3], lo));\n+      DONE;\n+    }\n+})\n+\n+(define_insn_and_split \"*divmod<mode>4\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=l\")\n+\t(div:GPR (match_operand:GPR 1 \"register_operand\" \"d\")\n+\t\t (match_operand:GPR 2 \"register_operand\" \"d\")))\n+   (set (match_operand:GPR 3 \"register_operand\" \"=d\")\n+\t(mod:GPR (match_dup 1)\n+\t\t (match_dup 2)))]\n+  \"ISA_HAS_<D>DIV && !TARGET_FIX_VR4120 && !TARGET_MIPS16\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(const_int 0)]\n+{\n+  emit_insn (gen_divmod<mode>4_split (operands[3], operands[1], operands[2]));\n+  DONE;\n+}\n+ [(set_attr \"type\" \"idiv\")\n+  (set_attr \"mode\" \"<MODE>\")\n+  (set_attr \"insn_count\" \"2\")])\n+\n ;; Expand generates divmod instructions for individual division and modulus\n ;; operations.  We then rely on CSE to reuse earlier divmods where possible.\n ;; This means that, when generating MIPS16 code, it is better not to expose\n ;; the fixed LO register until after CSE has finished.  However, it's still\n ;; better to split before register allocation, so that we don't allocate\n ;; one of the scarce MIPS16 registers to an unused result.\n-(define_insn_and_split \"divmod<mode>4\"\n-  [(set (match_operand:GPR 0 \"register_operand\" \"=kl\")\n+(define_insn_and_split \"divmod<mode>4_mips16\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n \t(div:GPR (match_operand:GPR 1 \"register_operand\" \"d\")\n \t\t (match_operand:GPR 2 \"register_operand\" \"d\")))\n    (set (match_operand:GPR 3 \"register_operand\" \"=d\")\n \t(mod:GPR (match_dup 1)\n-\t\t (match_dup 2)))]\n-  \"ISA_HAS_<D>DIV && !TARGET_FIX_VR4120\"\n+\t\t (match_dup 2)))\n+   (clobber (match_operand:GPR 4 \"lo_operand\" \"=l\"))]\n+  \"ISA_HAS_<D>DIV && !TARGET_FIX_VR4120 && TARGET_MIPS16\"\n   \"#\"\n-  \"&& ((TARGET_MIPS16 && cse_not_expected) || reload_completed)\"\n+  \"&& cse_not_expected\"\n   [(const_int 0)]\n {\n   emit_insn (gen_divmod<mode>4_split (operands[3], operands[1], operands[2]));\n-  if (TARGET_MIPS16)\n-    emit_move_insn (operands[0], gen_rtx_REG (<MODE>mode, LO_REGNUM));\n+  emit_move_insn (operands[0], operands[4]);\n   DONE;\n }\n  [(set_attr \"type\" \"idiv\")\n   (set_attr \"mode\" \"<MODE>\")\n-  ;; Worst case for MIPS16.\n   (set_attr \"insn_count\" \"3\")])\n \n-;; See the comment above \"divmod<mode>4\" for the MIPS16 handling.\n-(define_insn_and_split \"udivmod<mode>4\"\n-  [(set (match_operand:GPR 0 \"register_operand\" \"=kl\")\n+(define_expand \"udivmod<mode>4\"\n+  [(parallel\n+     [(set (match_operand:GPR 0 \"register_operand\")\n+\t   (udiv:GPR (match_operand:GPR 1 \"register_operand\")\n+\t\t     (match_operand:GPR 2 \"register_operand\")))\n+      (set (match_operand:GPR 3 \"register_operand\")\n+\t   (umod:GPR (match_dup 1)\n+\t\t     (match_dup 2)))])]\n+  \"ISA_HAS_<D>DIV && !TARGET_FIX_VR4120\"\n+{\n+  if (TARGET_MIPS16)\n+    {\n+      rtx lo = gen_rtx_REG (<MODE>mode, LO_REGNUM);\n+      emit_insn (gen_udivmod<mode>4_mips16 (operands[0], operands[1],\n+\t\t\t\t\t    operands[2], operands[3], lo));\n+      DONE;\n+    }\n+})\n+\n+(define_insn_and_split \"*udivmod<mode>4\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=l\")\n \t(udiv:GPR (match_operand:GPR 1 \"register_operand\" \"d\")\n \t\t  (match_operand:GPR 2 \"register_operand\" \"d\")))\n    (set (match_operand:GPR 3 \"register_operand\" \"=d\")\n \t(umod:GPR (match_dup 1)\n \t\t  (match_dup 2)))]\n-  \"ISA_HAS_<D>DIV\"\n+  \"ISA_HAS_<D>DIV && !TARGET_MIPS16\"\n   \"#\"\n-  \"(TARGET_MIPS16 && cse_not_expected) || reload_completed\"\n+  \"reload_completed\"\n   [(const_int 0)]\n {\n   emit_insn (gen_udivmod<mode>4_split (operands[3], operands[1], operands[2]));\n-  if (TARGET_MIPS16)\n-    emit_move_insn (operands[0], gen_rtx_REG (<MODE>mode, LO_REGNUM));\n   DONE;\n }\n   [(set_attr \"type\" \"idiv\")\n    (set_attr \"mode\" \"<MODE>\")\n-   ;; Worst case for MIPS16.\n+   (set_attr \"insn_count\" \"2\")])\n+\n+;; See the comment above \"divmod<mode>4_mips16\" for the split timing.\n+(define_insn_and_split \"udivmod<mode>4_mips16\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n+\t(udiv:GPR (match_operand:GPR 1 \"register_operand\" \"d\")\n+\t\t  (match_operand:GPR 2 \"register_operand\" \"d\")))\n+   (set (match_operand:GPR 3 \"register_operand\" \"=d\")\n+\t(umod:GPR (match_dup 1)\n+\t\t  (match_dup 2)))\n+   (clobber (match_operand:GPR 4 \"lo_operand\" \"=l\"))]\n+  \"ISA_HAS_<D>DIV && TARGET_MIPS16\"\n+  \"#\"\n+  \"cse_not_expected\"\n+  [(const_int 0)]\n+{\n+  emit_insn (gen_udivmod<mode>4_split (operands[3], operands[1], operands[2]));\n+  emit_move_insn (operands[0], operands[4]);\n+  DONE;\n+}\n+  [(set_attr \"type\" \"idiv\")\n+   (set_attr \"mode\" \"<MODE>\")\n    (set_attr \"insn_count\" \"3\")])\n \n (define_expand \"<u>divmod<mode>4_split\""}]}