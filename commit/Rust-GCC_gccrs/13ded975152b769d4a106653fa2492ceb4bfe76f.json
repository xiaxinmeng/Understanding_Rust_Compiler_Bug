{"sha": "13ded975152b769d4a106653fa2492ceb4bfe76f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTNkZWQ5NzUxNTJiNzY5ZDRhMTA2NjUzZmEyNDkyY2ViNGJmZTc2Zg==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@mhpcc.edu", "date": "1998-08-19T19:43:19Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "1998-08-19T19:43:19Z"}, "message": "rs6000.c (rs6000_output_load_toc_table): Use ld for 64-bit.\n\n        * rs6000.c (rs6000_output_load_toc_table): Use ld for 64-bit.\n        (output_toc): Use single TOC slot or llong minimal-toc for DFmode\n        and DImode 64-bit.  Use llong for minimal-toc SFmode and\n        SYMBOL_REF / LABEL_REF 64-bit.\n        (output_function_profiler): Use llong for profiler label and ld to\n        load 64-bit label address.\n\nFrom-SVN: r21864", "tree": {"sha": "e849c6894892df97cb4a163d32ed1548d77ec433", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e849c6894892df97cb4a163d32ed1548d77ec433"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/13ded975152b769d4a106653fa2492ceb4bfe76f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13ded975152b769d4a106653fa2492ceb4bfe76f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13ded975152b769d4a106653fa2492ceb4bfe76f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13ded975152b769d4a106653fa2492ceb4bfe76f/comments", "author": null, "committer": null, "parents": [{"sha": "e0f9a8bc5052bfceb3e52ccae774024c3d071f20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0f9a8bc5052bfceb3e52ccae774024c3d071f20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0f9a8bc5052bfceb3e52ccae774024c3d071f20"}], "stats": {"total": 66, "additions": 51, "deletions": 15}, "files": [{"sha": "4c159968997849065dfbdf1f3614c8b3b042b0ff", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13ded975152b769d4a106653fa2492ceb4bfe76f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13ded975152b769d4a106653fa2492ceb4bfe76f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=13ded975152b769d4a106653fa2492ceb4bfe76f", "patch": "@@ -1,3 +1,12 @@\n+Wed Aug 19 21:33:19 1998  David Edelsohn  <edelsohn@mhpcc.edu>\n+\n+\t* rs6000.c (rs6000_output_load_toc_table): Use ld for 64-bit.\n+\t(output_toc): Use single TOC slot or llong minimal-toc for DFmode\n+\tand DImode 64-bit.  Use llong for minimal-toc SFmode and\n+\tSYMBOL_REF / LABEL_REF 64-bit.\n+\t(output_function_profiler): Use llong for profiler label and ld to\n+\tload 64-bit label address.\n+\n Wed Aug 19 17:52:27 1998  Nick Clifton  (nickc@cygnus.com)\n \n         * config/arm/thumb.md (extendqisi2_insn): Cope with REG +"}, {"sha": "5d85bac1a54e0ea6372eac94962ce116b83afdfb", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 42, "deletions": 15, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13ded975152b769d4a106653fa2492ceb4bfe76f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13ded975152b769d4a106653fa2492ceb4bfe76f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=13ded975152b769d4a106653fa2492ceb4bfe76f", "patch": "@@ -3757,7 +3757,8 @@ rs6000_output_load_toc_table (file, reg)\n \n #else\t/* !USING_SVR4_H */\n   ASM_GENERATE_INTERNAL_LABEL (buf, \"LCTOC\", 0);\n-  asm_fprintf (file, \"\\t{l|lwz} %s,\", reg_names[reg]);\n+  asm_fprintf (file, TARGET_32BIT ? \"\\t{l|lwz} %s,\" : \"\\tld %s,\",\n+\t       reg_names[reg]);\n   assemble_name (file, buf);\n   asm_fprintf (file, \"(%s)\\n\", reg_names[2]);\n #endif /* USING_SVR4_H */\n@@ -4428,12 +4429,24 @@ output_toc (file, x, labelno)\n \n       REAL_VALUE_FROM_CONST_DOUBLE (rv, x);\n       REAL_VALUE_TO_TARGET_DOUBLE (rv, k);\n-      if (TARGET_MINIMAL_TOC)\n-\tfprintf (file, \"\\t.long %ld\\n\\t.long %ld\\n\", k[0], k[1]);\n+      if (TARGET_64BIT)\n+\t{\n+\t  if (TARGET_MINIMAL_TOC)\n+\t    fprintf (file, \"\\t.llong 0x%lx%08lx\\n\", k[0], k[1]);\n+\t  else\n+\t    fprintf (file, \"\\t.tc FD_%lx_%lx[TC],0x%lx%08lx\\n\",\n+\t\t     k[0], k[1], k[0] & 0xffffffff, k[1] & 0xffffffff);\n+\t  return;\n+\t}\n       else\n-\tfprintf (file, \"\\t.tc FD_%lx_%lx[TC],%ld,%ld\\n\",\n-\t\t k[0], k[1], k[0], k[1]);\n-      return;\n+\t{\n+\t  if (TARGET_MINIMAL_TOC)\n+\t    fprintf (file, \"\\t.long %ld\\n\\t.long %ld\\n\", k[0], k[1]);\n+\t  else\n+\t    fprintf (file, \"\\t.tc FD_%lx_%lx[TC],%ld,%ld\\n\",\n+\t\t     k[0], k[1], k[0], k[1]);\n+\t  return;\n+\t}\n     }\n   else if (GET_CODE (x) == CONST_DOUBLE && GET_MODE (x) == SFmode\n \t   && ! (TARGET_NO_FP_IN_TOC && ! TARGET_MINIMAL_TOC))\n@@ -4445,7 +4458,7 @@ output_toc (file, x, labelno)\n       REAL_VALUE_TO_TARGET_SINGLE (rv, l);\n \n       if (TARGET_MINIMAL_TOC)\n-\tfprintf (file, \"\\t.long %ld\\n\", l);\n+\tfprintf (file, TARGET_32BIT ? \"\\t.long %ld\\n\" : \"\\t.llong %ld\\n\", l);\n       else\n \tfprintf (file, \"\\t.tc FS_%lx[TC],%ld\\n\", l, l);\n       return;\n@@ -4475,12 +4488,25 @@ output_toc (file, x, labelno)\n \t}\n #endif\n \n-      if (TARGET_MINIMAL_TOC)\n-\tfprintf (file, \"\\t.long %ld\\n\\t.long %ld\\n\", (long)high, (long)low);\n+      if (TARGET_64BIT)\n+\t{\n+\t  if (TARGET_MINIMAL_TOC)\n+\t    fprintf (file, \"\\t.llong 0x%lx%08lx\\n\", (long)high, (long)low);\n+\t  else\n+\t    fprintf (file, \"\\t.tc ID_%lx_%lx[TC],0x%lx%08lx\\n\",\n+\t\t     (long)high, (long)low, (long)high, (long)low);\n+\t  return;\n+\t}\n       else\n-\tfprintf (file, \"\\t.tc ID_%lx_%lx[TC],%ld,%ld\\n\",\n-\t\t (long)high, (long)low, (long)high, (long)low);\n-      return;\n+\t{\n+\t  if (TARGET_MINIMAL_TOC)\n+\t    fprintf (file, \"\\t.long %ld\\n\\t.long %ld\\n\",\n+\t\t     (long)high, (long)low);\n+\t  else\n+\t    fprintf (file, \"\\t.tc ID_%lx_%lx[TC],%ld,%ld\\n\",\n+\t\t     (long)high, (long)low, (long)high, (long)low);\n+\t  return;\n+\t}\n     }\n \n   if (GET_CODE (x) == CONST)\n@@ -4500,7 +4526,7 @@ output_toc (file, x, labelno)\n \n   STRIP_NAME_ENCODING (real_name, name);\n   if (TARGET_MINIMAL_TOC)\n-    fputs (\"\\t.long \", file);\n+    fputs (TARGET_32BIT ? \"\\t.long \" : \"\\t.llong \", file);\n   else\n     {\n       fprintf (file, \"\\t.tc %s\", real_name);\n@@ -4727,7 +4753,7 @@ output_function_profiler (file, labelno)\n       ASM_OUTPUT_INTERNAL_LABEL (file, \"LPC\", labelno);\n       if (TARGET_MINIMAL_TOC)\n \t{\n-\t  fputs (\"\\t.long \", file);\n+\t  fputs (TARGET_32BIT ? \"\\t.long \" : \"\\t.llong \", file);\n \t  assemble_name (file, buf);\n \t  putc ('\\n', file);\n \t}\n@@ -4759,7 +4785,8 @@ output_function_profiler (file, labelno)\n   /* Load location address into r3, and call mcount.  */\n \n       ASM_GENERATE_INTERNAL_LABEL (buf, \"LPC\", labelno);\n-      asm_fprintf (file, \"\\t{l|lwz} %s,\", reg_names[3]);\n+      asm_fprintf (file, TARGET_32BIT ? \"\\t{l|lwz} %s,\" : \"\\tld %s,\",\n+\t\t   reg_names[3]);\n       assemble_name (file, buf);\n       asm_fprintf (file, \"(%s)\\n\\tbl %s\\n\\t%s\\n\",\n \t\t   reg_names[2], RS6000_MCOUNT, RS6000_CALL_GLUE);"}]}