{"sha": "d7bf0bd696eaa7611ca97285347f8e3e604feefd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDdiZjBiZDY5NmVhYTc2MTFjYTk3Mjg1MzQ3ZjhlM2U2MDRmZWVmZA==", "commit": {"author": {"name": "Andi Kleen", "email": "ak@linux.intel.com", "date": "2018-11-29T23:11:53Z"}, "committer": {"name": "Andi Kleen", "email": "ak@gcc.gnu.org", "date": "2018-11-29T23:11:53Z"}, "message": "Support changing fentry name per function\n\nIt can be useful to have some classes of functions that use a different\n__fentry__ instrumentation than others.  Currently it is only\npossible to disable instrumentation on the command line or with\nno_instrument_function, but not to change the instrumentation function\non a case by case base.\n\nAdd some flexibility to allow to change the instrumentation function\nname per file with an option or per function with a new attribute.\nThis also allows switching to nops for individual functions.\n\ngcc/:\n\n2018-11-29  Andi Kleen  <ak@linux.intel.com>\n\n\t* config/i386/i386.c (x86_print_call_or_nop): Handle nop name.\n\t(current_fentry_name): Add.\n\t(x86_function_profiler): Handle fentry_name attribute.\n\t(ix86_handle_fentry_name): Add.\n\t(ix86_attribute_table): Add fentry_name.\n\t* config/i386/i386.opt: Add -mfentry-name\n\t* doc/extend.texi: Document fentry_name.\n\t* doc/invoke.texi: Document minstrument-return.\n\ngcc/testsuite/:\n\n2018-11-29  Andi Kleen  <ak@linux.intel.com>\n\n\t* gcc.target/i386/fentryname1.c: New test.\n\nFrom-SVN: r266653", "tree": {"sha": "27bcf2cfea64f7e88559ae5c0d5f6748a793857e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27bcf2cfea64f7e88559ae5c0d5f6748a793857e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d7bf0bd696eaa7611ca97285347f8e3e604feefd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7bf0bd696eaa7611ca97285347f8e3e604feefd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7bf0bd696eaa7611ca97285347f8e3e604feefd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7bf0bd696eaa7611ca97285347f8e3e604feefd/comments", "author": null, "committer": null, "parents": [{"sha": "3b31afe1a56cfb7b92f563b53686b378bdbead54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b31afe1a56cfb7b92f563b53686b378bdbead54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b31afe1a56cfb7b92f563b53686b378bdbead54"}], "stats": {"total": 95, "additions": 89, "deletions": 6}, "files": [{"sha": "73a98523b968eb6faa082bae9b4dd49f7d478ecc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7bf0bd696eaa7611ca97285347f8e3e604feefd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7bf0bd696eaa7611ca97285347f8e3e604feefd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d7bf0bd696eaa7611ca97285347f8e3e604feefd", "patch": "@@ -1,3 +1,14 @@\n+2018-11-29  Andi Kleen  <ak@linux.intel.com>\n+\n+\t* config/i386/i386.c (x86_print_call_or_nop): Handle nop name.\n+\t(current_fentry_name): Add.\n+\t(x86_function_profiler): Handle fentry_name attribute.\n+\t(ix86_handle_fentry_name): Add.\n+\t(ix86_attribute_table): Add fentry_name.\n+\t* config/i386/i386.opt: Add -mfentry-name\n+\t* doc/extend.texi: Document fentry_name.\n+\t* doc/invoke.texi: Document minstrument-return.\n+\n 2018-11-29  Andi Kleen  <ak@linux.intel.com>\n \n \t* config/i386/i386-opts.h (enum instrument_return): Add."}, {"sha": "ae6aa8d422c83561c8bc06c64c2d7df8596a2401", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 43, "deletions": 5, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7bf0bd696eaa7611ca97285347f8e3e604feefd/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7bf0bd696eaa7611ca97285347f8e3e604feefd/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=d7bf0bd696eaa7611ca97285347f8e3e604feefd", "patch": "@@ -41273,24 +41273,41 @@ x86_field_alignment (tree type, int computed)\n static void\n x86_print_call_or_nop (FILE *file, const char *target)\n {\n-  if (flag_nop_mcount)\n+  if (flag_nop_mcount || !strcmp (target, \"nop\"))\n     /* 5 byte nop: nopl 0(%[re]ax,%[re]ax,1) */\n     fprintf (file, \"1:\" ASM_BYTE \"0x0f, 0x1f, 0x44, 0x00, 0x00\\n\");\n   else\n     fprintf (file, \"1:\\tcall\\t%s\\n\", target);\n }\n \n+static bool\n+current_fentry_name (const char **name)\n+{\n+  tree attr = lookup_attribute (\"fentry_name\",\n+\t\t\t\tDECL_ATTRIBUTES (current_function_decl));\n+  if (!attr)\n+    return false;\n+  *name = TREE_STRING_POINTER (TREE_VALUE (TREE_VALUE (attr)));\n+  return true;\n+}\n+\n /* Output assembler code to FILE to increment profiler label # LABELNO\n    for profiling a function entry.  */\n void\n x86_function_profiler (FILE *file, int labelno ATTRIBUTE_UNUSED)\n {\n-  const char *mcount_name = (flag_fentry ? MCOUNT_NAME_BEFORE_PROLOGUE\n-\t\t\t\t\t : MCOUNT_NAME);\n-\n   if (cfun->machine->endbr_queued_at_entrance)\n     fprintf (file, \"\\t%s\\n\", TARGET_64BIT ? \"endbr64\" : \"endbr32\");\n \n+  const char *mcount_name = MCOUNT_NAME;\n+\n+  if (current_fentry_name (&mcount_name))\n+    ;\n+  else if (fentry_name)\n+    mcount_name = fentry_name;\n+  else if (flag_fentry)\n+    mcount_name = MCOUNT_NAME_BEFORE_PROLOGUE;\n+\n   if (TARGET_64BIT)\n     {\n #ifndef NO_PROFILE_COUNTERS\n@@ -45111,6 +45128,26 @@ ix86_expand_round_sse4 (rtx op0, rtx op1)\n \n   emit_move_insn (op0, res);\n }\n+\n+/* Handle fentry_name attribute.  */\n+\n+static tree\n+ix86_handle_fentry_name (tree *node, tree name, tree args,\n+\t\t\t int, bool *no_add_attrs)\n+{\n+  if (TREE_CODE (*node) == FUNCTION_DECL\n+      && TREE_CODE (TREE_VALUE (args)) == STRING_CST)\n+    /* Do nothing else, just set the attribute.  We'll get at\n+       it later with lookup_attribute.  */\n+    ;\n+  else\n+    {\n+      warning (OPT_Wattributes, \"%qE attribute ignored\", name);\n+      *no_add_attrs = true;\n+    }\n+\n+  return NULL_TREE;\n+}\n \f\n \n /* Table of valid machine attributes.  */\n@@ -45187,7 +45224,8 @@ static const struct attribute_spec ix86_attribute_table[] =\n     ix86_handle_fndecl_attribute, NULL },\n   { \"indirect_return\", 0, 0, false, true, true, false,\n     NULL, NULL },\n-\n+  { \"fentry_name\", 1, 1, true, false, false, false,\n+    ix86_handle_fentry_name, NULL },\n   /* End element.  */\n   { NULL, 0, 0, false, false, false, false, NULL, NULL }\n };"}, {"sha": "20798644451c8ef498ce45c3ae62010128194f8d", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7bf0bd696eaa7611ca97285347f8e3e604feefd/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7bf0bd696eaa7611ca97285347f8e3e604feefd/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=d7bf0bd696eaa7611ca97285347f8e3e604feefd", "patch": "@@ -934,6 +934,10 @@ Target Report Var(flag_nop_mcount)\n Generate mcount/__fentry__ calls as nops. To activate they need to be\n patched in.\n \n+mfentry-name=\n+Target RejectNegative Joined Var(fentry_name)\n+Set name of __fentry__ symbol called at function entry.\n+\n mskip-rax-setup\n Target Report Var(flag_skip_rax_setup)\n Skip setting up RAX register when passing variable arguments."}, {"sha": "937e8fcc4ff9da40d27fe3dc8d364dbe480b5a4e", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7bf0bd696eaa7611ca97285347f8e3e604feefd/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7bf0bd696eaa7611ca97285347f8e3e604feefd/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=d7bf0bd696eaa7611ca97285347f8e3e604feefd", "patch": "@@ -6026,6 +6026,13 @@ The @code{indirect_return} attribute can be applied to a function,\n as well as variable or type of function pointer to inform the\n compiler that the function may return via indirect branch.\n \n+@item fentry_name(\"@var{name}\")\n+@cindex @code{fentry_name} function attribute, x86\n+On x86 targets, the @code{fentry_name} attribute sets the function to\n+call on function entry when function instrumentation is enabled\n+with @option{-pg -mfentry}. When @var{name} is nop then a 5 byte\n+nop sequence is generated.\n+\n @end table\n \n On the x86, the inliner does not inline a"}, {"sha": "7ff5597a12530840f05d5dab9aae089c4e263d66", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7bf0bd696eaa7611ca97285347f8e3e604feefd/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7bf0bd696eaa7611ca97285347f8e3e604feefd/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=d7bf0bd696eaa7611ca97285347f8e3e604feefd", "patch": "@@ -1316,7 +1316,7 @@ See RS/6000 and PowerPC Options.\n -mcmodel=@var{code-model}  -mabi=@var{name}  -maddress-mode=@var{mode} @gol\n -m32  -m64  -mx32  -m16  -miamcu  -mlarge-data-threshold=@var{num} @gol\n -msse2avx  -mfentry  -mrecord-mcount  -mnop-mcount  -m8bit-idiv @gol\n--minstrument-return=@var{type} @gol\n+-minstrument-return=@var{type} -mfentry-name=@var{name} @gol\n -mavx256-split-unaligned-load  -mavx256-split-unaligned-store @gol\n -malign-data=@var{type}  -mstack-protector-guard=@var{guard} @gol\n -mstack-protector-guard-reg=@var{reg} @gol\n@@ -29091,6 +29091,10 @@ or @var{nop5} to generate a 5 byte nop.\n @opindex mrecord-return\n Generate a __return_loc section pointing to all return instrumentation code.\n \n+@item -mfentry-name=@var{name}\n+@opindex mfentry-name\n+Set name of __fentry__ symbol called at function entry for -pg -mfentry functions.\n+\n @item -mskip-rax-setup\n @itemx -mno-skip-rax-setup\n @opindex mskip-rax-setup"}, {"sha": "f45128ebe0e14a6e51af93d4768402a51d25f676", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7bf0bd696eaa7611ca97285347f8e3e604feefd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7bf0bd696eaa7611ca97285347f8e3e604feefd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d7bf0bd696eaa7611ca97285347f8e3e604feefd", "patch": "@@ -1,3 +1,7 @@\n+2018-11-29  Andi Kleen  <ak@linux.intel.com>\n+\n+\t* gcc.target/i386/fentryname1.c: New test.\n+\n 2018-11-29  Andi Kleen  <ak@linux.intel.com>\n \n \t* gcc.target/i386/returninst1.c: New test."}, {"sha": "6d2e76d223a6f8ff61ad1f66145ac32ffcc3fc44", "filename": "gcc/testsuite/gcc.target/i386/fentryname1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7bf0bd696eaa7611ca97285347f8e3e604feefd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffentryname1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7bf0bd696eaa7611ca97285347f8e3e604feefd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffentryname1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffentryname1.c?ref=d7bf0bd696eaa7611ca97285347f8e3e604feefd", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-pg -mfentry -mfentry-name=foo\" } */\n+/* { dg-final { scan-assembler \"call.*foo\" } } */\n+/* { dg-final { scan-assembler \"call.*bar\" } } */\n+\n+int func(int a)\n+{\n+  return a+1;\n+}\n+\n+__attribute__((fentry_name(\"bar\")))\n+int func2(int a)\n+{\n+  return a+1;\n+}"}]}