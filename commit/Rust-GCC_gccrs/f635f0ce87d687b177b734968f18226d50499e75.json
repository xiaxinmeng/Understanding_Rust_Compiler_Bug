{"sha": "f635f0ce87d687b177b734968f18226d50499e75", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjYzNWYwY2U4N2Q2ODdiMTc3YjczNDk2OGYxODIyNmQ1MDQ5OWU3NQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-10-29T00:11:41Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-10-29T00:11:41Z"}, "message": "analyzer: more non-determinism fixes\n\ngcc/analyzer/ChangeLog:\n\t* program-state.cc (sm_state_map::on_liveness_change): Sort the\n\tleaking svalues before calling on_state_leak.\n\t(program_state::detect_leaks): Likewise when calling\n\ton_svalue_leak.\n\t* region-model-reachability.cc\n\t(reachable_regions::mark_escaped_clusters): Likewise when\n\tcalling on_escaped_function.", "tree": {"sha": "e2a8c0ac9ef26b31b88ae552953704a1e66cd3d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e2a8c0ac9ef26b31b88ae552953704a1e66cd3d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f635f0ce87d687b177b734968f18226d50499e75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f635f0ce87d687b177b734968f18226d50499e75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f635f0ce87d687b177b734968f18226d50499e75", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f635f0ce87d687b177b734968f18226d50499e75/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a9af271275f4893e28c789c8f1964025694eda1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a9af271275f4893e28c789c8f1964025694eda1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a9af271275f4893e28c789c8f1964025694eda1"}], "stats": {"total": 36, "additions": 32, "deletions": 4}, "files": [{"sha": "b39e55a1a1e7c8a69fd20ee70929557ad9662ca4", "filename": "gcc/analyzer/program-state.cc", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f635f0ce87d687b177b734968f18226d50499e75/gcc%2Fanalyzer%2Fprogram-state.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f635f0ce87d687b177b734968f18226d50499e75/gcc%2Fanalyzer%2Fprogram-state.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fprogram-state.cc?ref=f635f0ce87d687b177b734968f18226d50499e75", "patch": "@@ -517,6 +517,7 @@ sm_state_map::on_liveness_change (const svalue_set &live_svalues,\n {\n   svalue_set svals_to_unset;\n \n+  auto_vec<const svalue *> leaked_svals (m_map.elements ());\n   for (map_t::iterator iter = m_map.begin ();\n        iter != m_map.end ();\n        ++iter)\n@@ -527,10 +528,20 @@ sm_state_map::on_liveness_change (const svalue_set &live_svalues,\n \t  svals_to_unset.add (iter_sval);\n \t  entry_t e = (*iter).second;\n \t  if (!m_sm.can_purge_p (e.m_state))\n-\t    ctxt->on_state_leak (m_sm, iter_sval, e.m_state);\n+\t    leaked_svals.quick_push (iter_sval);\n \t}\n     }\n \n+  leaked_svals.qsort (svalue::cmp_ptr_ptr);\n+\n+  unsigned i;\n+  const svalue *sval;\n+  FOR_EACH_VEC_ELT (leaked_svals, i, sval)\n+    {\n+      entry_t e = *m_map.get (sval);\n+      ctxt->on_state_leak (m_sm, sval, e.m_state);\n+    }\n+\n   for (svalue_set::iterator iter = svals_to_unset.begin ();\n        iter != svals_to_unset.end (); ++iter)\n     m_map.remove (*iter);\n@@ -1181,18 +1192,27 @@ program_state::detect_leaks (const program_state &src_state,\n \t\t\t  dest_svalues);\n     }\n \n+  auto_vec <const svalue *> dead_svals (src_svalues.elements ());\n   for (svalue_set::iterator iter = src_svalues.begin ();\n        iter != src_svalues.end (); ++iter)\n     {\n       const svalue *sval = (*iter);\n       /* For each sval reachable from SRC_STATE, determine if it is\n \t live in DEST_STATE: either explicitly reachable, or implicitly\n \t live based on the set of explicitly reachable svalues.\n-\t Call CTXT->on_svalue_leak on those that have ceased to be live.  */\n+\t Record those that have ceased to be live.  */\n       if (!sval->live_p (dest_svalues, dest_state.m_region_model))\n-\tctxt->on_svalue_leak (sval);\n+\tdead_svals.quick_push (sval);\n     }\n \n+  /* Call CTXT->on_svalue_leak on all svals in SRC_STATE  that have ceased\n+     to be live, sorting them first to ensure deterministic behavior.  */\n+  dead_svals.qsort (svalue::cmp_ptr_ptr);\n+  unsigned i;\n+  const svalue *sval;\n+  FOR_EACH_VEC_ELT (dead_svals, i, sval)\n+    ctxt->on_svalue_leak (sval);\n+\n   /* Purge dead svals from sm-state.  */\n   ctxt->on_liveness_change (dest_svalues, dest_state.m_region_model);\n "}, {"sha": "7fd89052737dcce5c365f40ae4fc7bc9bd9fc910", "filename": "gcc/analyzer/region-model-reachability.cc", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f635f0ce87d687b177b734968f18226d50499e75/gcc%2Fanalyzer%2Fregion-model-reachability.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f635f0ce87d687b177b734968f18226d50499e75/gcc%2Fanalyzer%2Fregion-model-reachability.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model-reachability.cc?ref=f635f0ce87d687b177b734968f18226d50499e75", "patch": "@@ -248,6 +248,8 @@ void\n reachable_regions::mark_escaped_clusters (region_model_context *ctxt)\n {\n   gcc_assert (ctxt);\n+  auto_vec<const function_region *> escaped_fn_regs\n+    (m_mutable_base_regs.elements ());\n   for (hash_set<const region *>::iterator iter = m_mutable_base_regs.begin ();\n        iter != m_mutable_base_regs.end (); ++iter)\n     {\n@@ -257,8 +259,14 @@ reachable_regions::mark_escaped_clusters (region_model_context *ctxt)\n       /* If we have a function that's escaped, potentially add\n \t it to the worklist.  */\n       if (const function_region *fn_reg = base_reg->dyn_cast_function_region ())\n-\tctxt->on_escaped_function (fn_reg->get_fndecl ());\n+\tescaped_fn_regs.quick_push (fn_reg);\n     }\n+  /* Sort to ensure deterministic results.  */\n+  escaped_fn_regs.qsort (region::cmp_ptr_ptr);\n+  unsigned i;\n+  const function_region *fn_reg;\n+  FOR_EACH_VEC_ELT (escaped_fn_regs, i, fn_reg)\n+    ctxt->on_escaped_function (fn_reg->get_fndecl ());\n }\n \n /* Dump SET to PP, sorting it to avoid churn when comparing dumps.  */"}]}