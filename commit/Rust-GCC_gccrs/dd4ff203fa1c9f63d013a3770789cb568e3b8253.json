{"sha": "dd4ff203fa1c9f63d013a3770789cb568e3b8253", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGQ0ZmYyMDNmYTFjOWY2M2QwMTNhMzc3MDc4OWNiNTY4ZTNiODI1Mw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2003-04-18T22:34:20Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2003-04-18T22:34:20Z"}, "message": "* cfgcleanup.c (flow_find_cross_jump): Use INSN_P,not active_insn_p.\n\nFrom-SVN: r65797", "tree": {"sha": "bd2c0ac5b9f3bfcfe1cd139e817fd1bdd37b3dc2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd2c0ac5b9f3bfcfe1cd139e817fd1bdd37b3dc2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd4ff203fa1c9f63d013a3770789cb568e3b8253", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd4ff203fa1c9f63d013a3770789cb568e3b8253", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd4ff203fa1c9f63d013a3770789cb568e3b8253", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd4ff203fa1c9f63d013a3770789cb568e3b8253/comments", "author": null, "committer": null, "parents": [{"sha": "21102f257e4fc2ddf71eaa26806b4adb133ff5ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21102f257e4fc2ddf71eaa26806b4adb133ff5ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21102f257e4fc2ddf71eaa26806b4adb133ff5ad"}], "stats": {"total": 14, "additions": 8, "deletions": 6}, "files": [{"sha": "894ea5658f00a6e9b44e929b870d6603408e9056", "filename": "gcc/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd4ff203fa1c9f63d013a3770789cb568e3b8253/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd4ff203fa1c9f63d013a3770789cb568e3b8253/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dd4ff203fa1c9f63d013a3770789cb568e3b8253", "patch": "@@ -1,5 +1,7 @@\n 2003-04-18  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n+\t* cfgcleanup.c (flow_find_cross_jump): Use INSN_P,not active_insn_p.\n+\n \t* expmed.c (mask_rtx): Avoid undefined shifts for BITSIZE of 0.\n \n 2003-04-18  Olivier Hainque <hainque@act-europe.fr>"}, {"sha": "c9e64ed1b485dc13e35ad4720e014c0452b1ab91", "filename": "gcc/cfgcleanup.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd4ff203fa1c9f63d013a3770789cb568e3b8253/gcc%2Fcfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd4ff203fa1c9f63d013a3770789cb568e3b8253/gcc%2Fcfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgcleanup.c?ref=dd4ff203fa1c9f63d013a3770789cb568e3b8253", "patch": "@@ -1044,10 +1044,10 @@ flow_find_cross_jump (mode, bb1, bb2, f1, f2)\n   while (true)\n     {\n       /* Ignore notes.  */\n-      while (!active_insn_p (i1) && i1 != bb1->head)\n+      while (!INSN_P (i1) && i1 != bb1->head)\n \ti1 = PREV_INSN (i1);\n \n-      while (!active_insn_p (i2) && i2 != bb2->head)\n+      while (!INSN_P (i2) && i2 != bb2->head)\n \ti2 = PREV_INSN (i2);\n \n       if (i1 == bb1->head || i2 == bb2->head)\n@@ -1056,8 +1056,8 @@ flow_find_cross_jump (mode, bb1, bb2, f1, f2)\n       if (!insns_match_p (mode, i1, i2))\n \tbreak;\n \n-      /* Don't begin a cross-jump with a USE or CLOBBER insn.  */\n-      if (active_insn_p (i1))\n+      /* Don't begin a cross-jump with a NOTE insn.  */\n+      if (INSN_P (i1))\n \t{\n \t  /* If the merged insns have different REG_EQUAL notes, then\n \t     remove them.  */\n@@ -1096,13 +1096,13 @@ flow_find_cross_jump (mode, bb1, bb2, f1, f2)\n      Two, it keeps line number notes as matched as may be.  */\n   if (ninsns)\n     {\n-      while (last1 != bb1->head && !active_insn_p (PREV_INSN (last1)))\n+      while (last1 != bb1->head && !INSN_P (PREV_INSN (last1)))\n \tlast1 = PREV_INSN (last1);\n \n       if (last1 != bb1->head && GET_CODE (PREV_INSN (last1)) == CODE_LABEL)\n \tlast1 = PREV_INSN (last1);\n \n-      while (last2 != bb2->head && !active_insn_p (PREV_INSN (last2)))\n+      while (last2 != bb2->head && !INSN_P (PREV_INSN (last2)))\n \tlast2 = PREV_INSN (last2);\n \n       if (last2 != bb2->head && GET_CODE (PREV_INSN (last2)) == CODE_LABEL)"}]}