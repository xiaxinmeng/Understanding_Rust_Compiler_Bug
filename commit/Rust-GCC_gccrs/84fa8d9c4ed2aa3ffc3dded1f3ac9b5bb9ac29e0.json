{"sha": "84fa8d9c4ed2aa3ffc3dded1f3ac9b5bb9ac29e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODRmYThkOWM0ZWQyYWEzZmZjM2RkZWQxZjNhYzliNWJiOWFjMjllMA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-08-27T19:56:45Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-08-27T19:56:45Z"}, "message": "Introduce rtx_sequence subclass of rtx_def\n\ngcc/\n2014-08-27  David Malcolm  <dmalcolm@redhat.com>\n\n\t* coretypes.h (class rtx_sequence): Add forward declaration.\n\t* rtl.h (class rtx_sequence): New subclass of rtx_def, adding\n\tinvariant: GET_CODE (X) == SEQUENCE.\n\t(is_a_helper <rtx_sequence *>::test): New.\n\t(is_a_helper <const rtx_sequence *>::test): New.\n\t(rtx_sequence::len): New.\n\t(rtx_sequence::element): New.\n\t(rtx_sequence::insn): New.\n\nFrom-SVN: r214591", "tree": {"sha": "57d0d3617696d35854f93f5402c37f095a9381ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/57d0d3617696d35854f93f5402c37f095a9381ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/84fa8d9c4ed2aa3ffc3dded1f3ac9b5bb9ac29e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84fa8d9c4ed2aa3ffc3dded1f3ac9b5bb9ac29e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84fa8d9c4ed2aa3ffc3dded1f3ac9b5bb9ac29e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84fa8d9c4ed2aa3ffc3dded1f3ac9b5bb9ac29e0/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3dc99c19a5203597ca0bf8f39aea7028f17e80ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dc99c19a5203597ca0bf8f39aea7028f17e80ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3dc99c19a5203597ca0bf8f39aea7028f17e80ba"}], "stats": {"total": 64, "additions": 64, "deletions": 0}, "files": [{"sha": "dce1cb407dfce4e4b4059c2e7442b2d8e97776ae", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84fa8d9c4ed2aa3ffc3dded1f3ac9b5bb9ac29e0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84fa8d9c4ed2aa3ffc3dded1f3ac9b5bb9ac29e0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=84fa8d9c4ed2aa3ffc3dded1f3ac9b5bb9ac29e0", "patch": "@@ -1,3 +1,14 @@\n+2014-08-27  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* coretypes.h (class rtx_sequence): Add forward declaration.\n+\t* rtl.h (class rtx_sequence): New subclass of rtx_def, adding\n+\tinvariant: GET_CODE (X) == SEQUENCE.\n+\t(is_a_helper <rtx_sequence *>::test): New.\n+\t(is_a_helper <const rtx_sequence *>::test): New.\n+\t(rtx_sequence::len): New.\n+\t(rtx_sequence::element): New.\n+\t(rtx_sequence::insn): New.\n+\n 2014-08-27  David Malcolm  <dmalcolm@redhat.com>\n \n \t* rtl.h (free_INSN_LIST_list): Strengthen param from rtx * to"}, {"sha": "d5d4885a0ec32ba47d6b6c61ca1cc5508bb20f97", "filename": "gcc/coretypes.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84fa8d9c4ed2aa3ffc3dded1f3ac9b5bb9ac29e0/gcc%2Fcoretypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84fa8d9c4ed2aa3ffc3dded1f3ac9b5bb9ac29e0/gcc%2Fcoretypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoretypes.h?ref=84fa8d9c4ed2aa3ffc3dded1f3ac9b5bb9ac29e0", "patch": "@@ -61,6 +61,7 @@ typedef const struct rtx_def *const_rtx;\n    Where possible, keep this list in the same order as in rtl.def.  */\n class rtx_def;\n   class rtx_insn_list;           /* GET_CODE (X) == INSN_LIST */\n+  class rtx_sequence;            /* GET_CODE (X) == SEQUENCE */\n   class rtx_insn;\n     class rtx_debug_insn;      /* DEBUG_INSN_P (X) */\n     class rtx_nonjump_insn;    /* NONJUMP_INSN_P (X) */"}, {"sha": "fe8201dca7287cd673937dbe718674bf637ef4b9", "filename": "gcc/rtl.h", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84fa8d9c4ed2aa3ffc3dded1f3ac9b5bb9ac29e0/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84fa8d9c4ed2aa3ffc3dded1f3ac9b5bb9ac29e0/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=84fa8d9c4ed2aa3ffc3dded1f3ac9b5bb9ac29e0", "patch": "@@ -431,6 +431,41 @@ is_a_helper <rtx_insn_list *>::test (rtx rt)\n   return rt->code == INSN_LIST;\n }\n \n+/* A node with invariant GET_CODE (X) == SEQUENCE i.e. a vector of rtx,\n+   typically (but not always) of rtx_insn *, used in the late passes.  */\n+\n+class GTY(()) rtx_sequence : public rtx_def\n+{\n+  /* No extra fields, but adds invariant: (GET_CODE (X) == SEQUENCE).  */\n+\n+public:\n+  /* Get number of elements in sequence.  */\n+  int len () const;\n+\n+  /* Get i-th element of the sequence.  */\n+  rtx element (int index) const;\n+\n+  /* Get i-th element of the sequence, with a checked cast to\n+     rtx_insn *.  */\n+  rtx_insn *insn (int index) const;\n+};\n+\n+template <>\n+template <>\n+inline bool\n+is_a_helper <rtx_sequence *>::test (rtx rt)\n+{\n+  return rt->code == SEQUENCE;\n+}\n+\n+template <>\n+template <>\n+inline bool\n+is_a_helper <const rtx_sequence *>::test (const_rtx rt)\n+{\n+  return rt->code == SEQUENCE;\n+}\n+\n class GTY(()) rtx_insn : public rtx_def\n {\n   /* No extra fields, but adds the invariant:\n@@ -1212,6 +1247,23 @@ inline rtx_insn *rtx_insn_list::insn () const\n   return safe_as_a <rtx_insn *> (tmp);\n }\n \n+/* Methods of rtx_sequence.  */\n+\n+inline int rtx_sequence::len () const\n+{\n+  return XVECLEN (this, 0);\n+}\n+\n+inline rtx rtx_sequence::element (int index) const\n+{\n+  return XVECEXP (this, 0, index);\n+}\n+\n+inline rtx_insn *rtx_sequence::insn (int index) const\n+{\n+  return as_a <rtx_insn *> (XVECEXP (this, 0, index));\n+}\n+\n /* ACCESS MACROS for particular fields of insns.  */\n \n /* Holds a unique number for each insn."}]}