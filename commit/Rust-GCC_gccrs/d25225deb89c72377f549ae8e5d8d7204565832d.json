{"sha": "d25225deb89c72377f549ae8e5d8d7204565832d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDI1MjI1ZGViODljNzIzNzdmNTQ5YWU4ZTVkOGQ3MjA0NTY1ODMyZA==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2003-08-06T00:11:55Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2003-08-06T00:11:55Z"}, "message": "builtins.c (expand_builtin): When not optimizing...\n\n\n\t* builtins.c (expand_builtin): When not optimizing, call the library\n\tfunction for all builtins that have library functions (except alloca).\n\nFrom-SVN: r70195", "tree": {"sha": "f2a0c3a6f8253b835d87460118d6ffd18853af31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f2a0c3a6f8253b835d87460118d6ffd18853af31"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d25225deb89c72377f549ae8e5d8d7204565832d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d25225deb89c72377f549ae8e5d8d7204565832d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d25225deb89c72377f549ae8e5d8d7204565832d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d25225deb89c72377f549ae8e5d8d7204565832d/comments", "author": null, "committer": null, "parents": [{"sha": "8b171e5587df1b4584ae445f7b7cbed86b868975", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b171e5587df1b4584ae445f7b7cbed86b868975", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b171e5587df1b4584ae445f7b7cbed86b868975"}], "stats": {"total": 102, "additions": 11, "deletions": 91}, "files": [{"sha": "ac596b0089f7eaee8597c96714825be7ee292663", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d25225deb89c72377f549ae8e5d8d7204565832d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d25225deb89c72377f549ae8e5d8d7204565832d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d25225deb89c72377f549ae8e5d8d7204565832d", "patch": "@@ -1,3 +1,8 @@\n+2003-08-05  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* builtins.c (expand_builtin): When not optimizing, call the library\n+\tfunction for all builtins that have library functions (except alloca).\n+\n 2003-08-05  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* c.opt: Introduce -fworking-directory."}, {"sha": "f9d953cc7d1b8254db1ac98609396e0239dfec12", "filename": "gcc/builtins.c", "status": "modified", "additions": 6, "deletions": 91, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d25225deb89c72377f549ae8e5d8d7204565832d/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d25225deb89c72377f549ae8e5d8d7204565832d/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=d25225deb89c72377f549ae8e5d8d7204565832d", "patch": "@@ -4879,104 +4879,19 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n   enum built_in_function fcode = DECL_FUNCTION_CODE (fndecl);\n   enum machine_mode target_mode = TYPE_MODE (TREE_TYPE (exp));\n \n-  /* Perform postincrements before expanding builtin functions. \ufffd*/\n+  /* Perform postincrements before expanding builtin functions.  */\n   emit_queue ();\n \n   if (DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_MD)\n     return (*targetm.expand_builtin) (exp, target, subtarget, mode, ignore);\n \n   /* When not optimizing, generate calls to library functions for a certain\n      set of builtins.  */\n-  if (!optimize && !CALLED_AS_BUILT_IN (fndecl))\n-    switch (fcode)\n-      {\n-      case BUILT_IN_SQRT:\n-      case BUILT_IN_SQRTF:\n-      case BUILT_IN_SQRTL:\n-      case BUILT_IN_SIN:\n-      case BUILT_IN_SINF:\n-      case BUILT_IN_SINL:\n-      case BUILT_IN_COS:\n-      case BUILT_IN_COSF:\n-      case BUILT_IN_COSL:\n-      case BUILT_IN_EXP:\n-      case BUILT_IN_EXPF:\n-      case BUILT_IN_EXPL:\n-      case BUILT_IN_LOG:\n-      case BUILT_IN_LOGF:\n-      case BUILT_IN_LOGL:\n-      case BUILT_IN_TAN:\n-      case BUILT_IN_TANF:\n-      case BUILT_IN_TANL:\n-      case BUILT_IN_ATAN:\n-      case BUILT_IN_ATANF:\n-      case BUILT_IN_ATANL:\n-      case BUILT_IN_POW:\n-      case BUILT_IN_POWF:\n-      case BUILT_IN_POWL:\n-      case BUILT_IN_ATAN2:\n-      case BUILT_IN_ATAN2F:\n-      case BUILT_IN_ATAN2L:\n-      case BUILT_IN_MEMSET:\n-      case BUILT_IN_MEMCPY:\n-      case BUILT_IN_MEMCMP:\n-      case BUILT_IN_MEMPCPY:\n-      case BUILT_IN_MEMMOVE:\n-      case BUILT_IN_BCMP:\n-      case BUILT_IN_BZERO:\n-      case BUILT_IN_BCOPY:\n-      case BUILT_IN_INDEX:\n-      case BUILT_IN_RINDEX:\n-      case BUILT_IN_SPRINTF:\n-      case BUILT_IN_STPCPY:\n-      case BUILT_IN_STRCHR:\n-      case BUILT_IN_STRRCHR:\n-      case BUILT_IN_STRLEN:\n-      case BUILT_IN_STRCPY:\n-      case BUILT_IN_STRNCPY:\n-      case BUILT_IN_STRNCMP:\n-      case BUILT_IN_STRSTR:\n-      case BUILT_IN_STRPBRK:\n-      case BUILT_IN_STRCAT:\n-      case BUILT_IN_STRNCAT:\n-      case BUILT_IN_STRSPN:\n-      case BUILT_IN_STRCSPN:\n-      case BUILT_IN_STRCMP:\n-      case BUILT_IN_FFS:\n-      case BUILT_IN_PUTCHAR:\n-      case BUILT_IN_PUTS:\n-      case BUILT_IN_PRINTF:\n-      case BUILT_IN_FPUTC:\n-      case BUILT_IN_FPUTS:\n-      case BUILT_IN_FWRITE:\n-      case BUILT_IN_FPRINTF:\n-      case BUILT_IN_PUTCHAR_UNLOCKED:\n-      case BUILT_IN_PUTS_UNLOCKED:\n-      case BUILT_IN_PRINTF_UNLOCKED:\n-      case BUILT_IN_FPUTC_UNLOCKED:\n-      case BUILT_IN_FPUTS_UNLOCKED:\n-      case BUILT_IN_FWRITE_UNLOCKED:\n-      case BUILT_IN_FPRINTF_UNLOCKED:\n-      case BUILT_IN_FLOOR:\n-      case BUILT_IN_FLOORF:\n-      case BUILT_IN_FLOORL:\n-      case BUILT_IN_CEIL:\n-      case BUILT_IN_CEILF:\n-      case BUILT_IN_CEILL:\n-      case BUILT_IN_TRUNC:\n-      case BUILT_IN_TRUNCF:\n-      case BUILT_IN_TRUNCL:\n-      case BUILT_IN_ROUND:\n-      case BUILT_IN_ROUNDF:\n-      case BUILT_IN_ROUNDL:\n-      case BUILT_IN_NEARBYINT:\n-      case BUILT_IN_NEARBYINTF:\n-      case BUILT_IN_NEARBYINTL:\n-\treturn expand_call (exp, target, ignore);\n-\n-      default:\n-\tbreak;\n-      }\n+  if (!optimize\n+      && !CALLED_AS_BUILT_IN (fndecl)\n+      && DECL_ASSEMBLER_NAME_SET_P (fndecl)\n+      && fcode != BUILT_IN_ALLOCA)\n+    return expand_call (exp, target, ignore);\n \n   /* The built-in function expanders test for target == const0_rtx\n      to determine whether the function's result will be ignored.  */"}]}