{"sha": "6d7971b832cbd7046e04184bbf140d9e6c30ff18", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQ3OTcxYjgzMmNiZDcwNDZlMDQxODRiYmYxNDBkOWU2YzMwZmYxOA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-03-22T12:39:04Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-03-22T12:39:04Z"}, "message": "re PR middle-end/43390 (ICE: integral result type precision does  not match field size of BIT_FIELD_REF)\n\n2010-03-22  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/43390\n\t* tree-vect-stmts.c (get_vectype_for_scalar_type): Make\n\tsure vector extracts are type correct.\n\n\t* gfortran.fortran-torture/execute/pr43390.f90: New testcase.\n\nFrom-SVN: r157624", "tree": {"sha": "7615d605a2a8dda90f867bb37bdebf022984f960", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7615d605a2a8dda90f867bb37bdebf022984f960"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d7971b832cbd7046e04184bbf140d9e6c30ff18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d7971b832cbd7046e04184bbf140d9e6c30ff18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d7971b832cbd7046e04184bbf140d9e6c30ff18", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d7971b832cbd7046e04184bbf140d9e6c30ff18/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6af84c851dbd4c53711ac9f5ed2147bdb29354f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6af84c851dbd4c53711ac9f5ed2147bdb29354f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6af84c851dbd4c53711ac9f5ed2147bdb29354f6"}], "stats": {"total": 28, "additions": 28, "deletions": 0}, "files": [{"sha": "5cff766695d5bcd858c84bb8ed5e536a55991e08", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d7971b832cbd7046e04184bbf140d9e6c30ff18/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d7971b832cbd7046e04184bbf140d9e6c30ff18/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6d7971b832cbd7046e04184bbf140d9e6c30ff18", "patch": "@@ -1,3 +1,9 @@\n+2010-03-22  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/43390\n+\t* tree-vect-stmts.c (get_vectype_for_scalar_type): Make\n+\tsure vector extracts are type correct.\n+\n 2010-03-22  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/40106"}, {"sha": "a036f25080682624051a0a0786fa69b60b3fc3e9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d7971b832cbd7046e04184bbf140d9e6c30ff18/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d7971b832cbd7046e04184bbf140d9e6c30ff18/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6d7971b832cbd7046e04184bbf140d9e6c30ff18", "patch": "@@ -1,3 +1,8 @@\n+2010-03-22  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/43390\n+\t* gfortran.fortran-torture/execute/pr43390.f90: New testcase.\n+\n 2010-03-21  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* gcc.target/powerpc/ppc-sdata-1.c: Require nonpic."}, {"sha": "b54eef99f243f6702754fa60c281736f957f3515", "filename": "gcc/testsuite/gfortran.fortran-torture/execute/pr43390.f90", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d7971b832cbd7046e04184bbf140d9e6c30ff18/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fpr43390.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d7971b832cbd7046e04184bbf140d9e6c30ff18/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fpr43390.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fpr43390.f90?ref=6d7971b832cbd7046e04184bbf140d9e6c30ff18", "patch": "@@ -0,0 +1,9 @@\n+   logical :: l1(4)\n+   logical :: l2(4)\n+   l1 = (/.TRUE.,.FALSE.,.TRUE.,.FALSE./)\n+   l2 = (/.FALSE.,.TRUE.,.FALSE.,.TRUE./)\n+   if (dot_product (l1, l2)) call abort ()\n+   l2 = .TRUE.\n+   if (.not.dot_product (l1, l2)) call abort ()\n+end\n+"}, {"sha": "4bce61afd9786ad04088ade5fd7f0a35e88435a4", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d7971b832cbd7046e04184bbf140d9e6c30ff18/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d7971b832cbd7046e04184bbf140d9e6c30ff18/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=6d7971b832cbd7046e04184bbf140d9e6c30ff18", "patch": "@@ -4417,6 +4417,14 @@ get_vectype_for_scalar_type (tree scalar_type)\n   if (nbytes < TYPE_ALIGN_UNIT (scalar_type))\n     return NULL_TREE;\n \n+  /* If we'd build a vector type of elements whose mode precision doesn't\n+     match their types precision we'll get mismatched types on vector\n+     extracts via BIT_FIELD_REFs.  This effectively means we disable\n+     vectorization of bool and/or enum types in some languages.  */\n+  if (INTEGRAL_TYPE_P (scalar_type)\n+      && GET_MODE_BITSIZE (inner_mode) != TYPE_PRECISION (scalar_type))\n+    return NULL_TREE;\n+\n   /* FORNOW: Only a single vector size per mode (UNITS_PER_SIMD_WORD)\n      is expected.  */\n   nunits = UNITS_PER_SIMD_WORD (inner_mode) / nbytes;"}]}