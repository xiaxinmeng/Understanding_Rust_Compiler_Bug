{"sha": "a6607774860fae67f0913d98e30f3158aa0e77a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTY2MDc3NzQ4NjBmYWU2N2YwOTEzZDk4ZTMwZjMxNThhYTBlNzdhNQ==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.vnet.ibm.com", "date": "2017-01-17T19:14:09Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2017-01-17T19:14:09Z"}, "message": "altivec.h (vec_rlmi): New #define.\n\n[gcc]\n\n2017-01-17  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\t* config/rs6000/altivec.h (vec_rlmi): New #define.\n\t(vec_vrlnm): Likewise.\n\t(vec_rlnm): Likewise.\n\t* config/rs6000/altivec.md (UNSPEC_VRLMI): New UNSPEC enum value.\n\t(UNSPEC_VRLNM): Likewise.\n\t(VIlong): New mode iterator.\n\t(altivec_vrl<VI_char>mi): New define_insn.\n\t(altivec_vrl<VI_char>nm): Likewise.\n\t* config/rs6000/rs6000-builtin.def (VRLWNM): New monomorphic\n\tfunction entry.\n\t(VRLDNM): Likewise.\n\t(RLNM): New polymorphic function entry.\n\t(VRLWMI): New monomorphic function entry.\n\t(VRLDMI): Likewise.\n\t(RLMI): New polymorphic function entry.\n\t* config/rs6000/r6000-c.c (altivec_overloaded_builtin_table): Add\n\tnew entries for P9V_BUILTIN_VEC_RLMI and P9V_BUILTIN_VEC_RLNM.\n\t* doc/extend.texi: Add description of vec_rlmi, vec_rlnm, and\n\tvec_vrlnm.\n\n[gcc/testsuite]\n\n2017-01-17  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\t* vec-rlmi-rlnm.c: New file.\n\nFrom-SVN: r244546", "tree": {"sha": "f912a73d0f017a31d568bb36ea15fe6cb487d328", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f912a73d0f017a31d568bb36ea15fe6cb487d328"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a6607774860fae67f0913d98e30f3158aa0e77a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6607774860fae67f0913d98e30f3158aa0e77a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6607774860fae67f0913d98e30f3158aa0e77a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6607774860fae67f0913d98e30f3158aa0e77a5/comments", "author": {"login": "wschmidt-ibm", "id": 5520937, "node_id": "MDQ6VXNlcjU1MjA5Mzc=", "avatar_url": "https://avatars.githubusercontent.com/u/5520937?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wschmidt-ibm", "html_url": "https://github.com/wschmidt-ibm", "followers_url": "https://api.github.com/users/wschmidt-ibm/followers", "following_url": "https://api.github.com/users/wschmidt-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/wschmidt-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/wschmidt-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wschmidt-ibm/subscriptions", "organizations_url": "https://api.github.com/users/wschmidt-ibm/orgs", "repos_url": "https://api.github.com/users/wschmidt-ibm/repos", "events_url": "https://api.github.com/users/wschmidt-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/wschmidt-ibm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1e0424d998298dc3f290309c4c72108c4271de3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e0424d998298dc3f290309c4c72108c4271de3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e0424d998298dc3f290309c4c72108c4271de3c"}], "stats": {"total": 182, "additions": 181, "deletions": 1}, "files": [{"sha": "049fdb07fc365b14775e7213218ccc33ba1b0edd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6607774860fae67f0913d98e30f3158aa0e77a5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6607774860fae67f0913d98e30f3158aa0e77a5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a6607774860fae67f0913d98e30f3158aa0e77a5", "patch": "@@ -1,3 +1,25 @@\n+2017-01-17  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\t* config/rs6000/altivec.h (vec_rlmi): New #define.\n+\t(vec_vrlnm): Likewise.\n+\t(vec_rlnm): Likewise.\n+\t* config/rs6000/altivec.md (UNSPEC_VRLMI): New UNSPEC enum value.\n+\t(UNSPEC_VRLNM): Likewise.\n+\t(VIlong): New mode iterator.\n+\t(altivec_vrl<VI_char>mi): New define_insn.\n+\t(altivec_vrl<VI_char>nm): Likewise.\n+\t* config/rs6000/rs6000-builtin.def (VRLWNM): New monomorphic\n+\tfunction entry.\n+\t(VRLDNM): Likewise.\n+\t(RLNM): New polymorphic function entry.\n+\t(VRLWMI): New monomorphic function entry.\n+\t(VRLDMI): Likewise.\n+\t(RLMI): New polymorphic function entry.\n+\t* config/rs6000/r6000-c.c (altivec_overloaded_builtin_table): Add\n+\tnew entries for P9V_BUILTIN_VEC_RLMI and P9V_BUILTIN_VEC_RLNM.\n+\t* doc/extend.texi: Add description of vec_rlmi, vec_rlnm, and\n+\tvec_vrlnm.\n+\n 2017-01-17  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/78839"}, {"sha": "790298dc41566a0ace6417be738eb424ad21f888", "filename": "gcc/config/rs6000/altivec.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6607774860fae67f0913d98e30f3158aa0e77a5/gcc%2Fconfig%2Frs6000%2Faltivec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6607774860fae67f0913d98e30f3158aa0e77a5/gcc%2Fconfig%2Frs6000%2Faltivec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.h?ref=a6607774860fae67f0913d98e30f3158aa0e77a5", "patch": "@@ -168,6 +168,9 @@\n #define vec_re __builtin_vec_re\n #define vec_round __builtin_vec_round\n #define vec_recipdiv __builtin_vec_recipdiv\n+#define vec_rlmi __builtin_vec_rlmi\n+#define vec_vrlnm __builtin_vec_rlnm\n+#define vec_rlnm(a,b,c) (__builtin_vec_rlnm((a),((b)<<8)|(c)))\n #define vec_rsqrt __builtin_vec_rsqrt\n #define vec_rsqrte __builtin_vec_rsqrte\n #define vec_vsubfp __builtin_vec_vsubfp"}, {"sha": "746cddeedcc548b8f2aa803a7bd2c27f869dfe33", "filename": "gcc/config/rs6000/altivec.md", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6607774860fae67f0913d98e30f3158aa0e77a5/gcc%2Fconfig%2Frs6000%2Faltivec.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6607774860fae67f0913d98e30f3158aa0e77a5/gcc%2Fconfig%2Frs6000%2Faltivec.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.md?ref=a6607774860fae67f0913d98e30f3158aa0e77a5", "patch": "@@ -156,6 +156,8 @@\n    UNSPEC_CMPRB\n    UNSPEC_CMPRB2\n    UNSPEC_CMPEQB\n+   UNSPEC_VRLMI\n+   UNSPEC_VRLNM\n ])\n \n (define_c_enum \"unspecv\"\n@@ -168,8 +170,10 @@\n \n ;; Like VI, defined in vector.md, but add ISA 2.07 integer vector ops\n (define_mode_iterator VI2 [V4SI V8HI V16QI V2DI])\n-;; Short vec in modes\n+;; Short vec int modes\n (define_mode_iterator VIshort [V8HI V16QI])\n+;; Longer vec int modes for rotate/mask ops\n+(define_mode_iterator VIlong [V2DI V4SI])\n ;; Vec float modes\n (define_mode_iterator VF [V4SF])\n ;; Vec modes, pity mode iterators are not composable\n@@ -1627,6 +1631,25 @@\n   \"vrl<VI_char> %0,%1,%2\"\n   [(set_attr \"type\" \"vecsimple\")])\n \n+(define_insn \"altivec_vrl<VI_char>mi\"\n+  [(set (match_operand:VIlong 0 \"register_operand\" \"=v\")\n+        (unspec:VIlong [(match_operand:VIlong 1 \"register_operand\" \"0\")\n+\t                (match_operand:VIlong 2 \"register_operand\" \"v\")\n+\t\t        (match_operand:VIlong 3 \"register_operand\" \"v\")]\n+\t\t       UNSPEC_VRLMI))]\n+  \"TARGET_P9_VECTOR\"\n+  \"vrl<VI_char>mi %0,%2,%3\"\n+  [(set_attr \"type\" \"veclogical\")])\n+\n+(define_insn \"altivec_vrl<VI_char>nm\"\n+  [(set (match_operand:VIlong 0 \"register_operand\" \"=v\")\n+        (unspec:VIlong [(match_operand:VIlong 1 \"register_operand\" \"v\")\n+\t\t        (match_operand:VIlong 2 \"register_operand\" \"v\")]\n+\t\t       UNSPEC_VRLNM))]\n+  \"TARGET_P9_VECTOR\"\n+  \"vrl<VI_char>nm %0,%1,%2\"\n+  [(set_attr \"type\" \"veclogical\")])\n+\n (define_insn \"altivec_vsl\"\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n         (unspec:V4SI [(match_operand:V4SI 1 \"register_operand\" \"v\")"}, {"sha": "f7085f87c85b21320d8a810d75fd72bb79e24b5a", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6607774860fae67f0913d98e30f3158aa0e77a5/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6607774860fae67f0913d98e30f3158aa0e77a5/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=a6607774860fae67f0913d98e30f3158aa0e77a5", "patch": "@@ -1927,12 +1927,22 @@ BU_P9V_OVERLOAD_2 (VSRV,\t\"vsrv\")\n BU_P9V_AV_2 (VADUB,\t\t\"vadub\",\t\tCONST,  vaduv16qi3)\n BU_P9V_AV_2 (VADUH,\t\t\"vaduh\",\t\tCONST,  vaduv8hi3)\n BU_P9V_AV_2 (VADUW,\t\t\"vaduw\",\t\tCONST,  vaduv4si3)\n+BU_P9V_AV_2 (VRLWNM,\t\t\"vrlwnm\",\t\tCONST,\taltivec_vrlwnm)\n+BU_P9V_AV_2 (VRLDNM,\t\t\"vrldnm\",\t\tCONST,\taltivec_vrldnm)\n \n /* ISA 3.0 vector overloaded 2 argument functions. */\n BU_P9V_OVERLOAD_2 (VADU,\t\"vadu\")\n BU_P9V_OVERLOAD_2 (VADUB,\t\"vadub\")\n BU_P9V_OVERLOAD_2 (VADUH,\t\"vaduh\")\n BU_P9V_OVERLOAD_2 (VADUW,\t\"vaduw\")\n+BU_P9V_OVERLOAD_2 (RLNM,\t\"rlnm\")\n+\n+/* ISA 3.0 3-argument vector functions.  */\n+BU_P9V_AV_3 (VRLWMI,\t\t\"vrlwmi\",\t\tCONST,\taltivec_vrlwmi)\n+BU_P9V_AV_3 (VRLDMI,\t\t\"vrldmi\",\t\tCONST,\taltivec_vrldmi)\n+\n+/* ISA 3.0 vector overloaded 3-argument functions.  */\n+BU_P9V_OVERLOAD_3 (RLMI,\t\"rlmi\")\n \n /* 1 argument vsx scalar functions added in ISA 3.0 (power9).  */\n BU_P9V_64BIT_VSX_1 (VSEEDP,\t\"scalar_extract_exp\",\tCONST,\txsxexpdp)"}, {"sha": "a1da94e95ad92b5a0743cc990b1f4eebc7ef18d8", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6607774860fae67f0913d98e30f3158aa0e77a5/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6607774860fae67f0913d98e30f3158aa0e77a5/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=a6607774860fae67f0913d98e30f3158aa0e77a5", "patch": "@@ -2214,6 +2214,18 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_V16QI, RS6000_BTI_V16QI, RS6000_BTI_unsigned_V16QI, 0 },\n   { ALTIVEC_BUILTIN_VEC_VRLB, ALTIVEC_BUILTIN_VRLB,\n     RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI, 0 },\n+  { P9V_BUILTIN_VEC_RLMI, P9V_BUILTIN_VRLWMI,\n+    RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI,\n+    RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI },\n+  { P9V_BUILTIN_VEC_RLMI, P9V_BUILTIN_VRLDMI,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI },\n+  { P9V_BUILTIN_VEC_RLNM, P9V_BUILTIN_VRLWNM,\n+    RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI,\n+    RS6000_BTI_unsigned_V4SI, 0 },\n+  { P9V_BUILTIN_VEC_RLNM, P9V_BUILTIN_VRLDNM,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI,\n+    RS6000_BTI_unsigned_V2DI, 0 },\n   { ALTIVEC_BUILTIN_VEC_SL, ALTIVEC_BUILTIN_VSLB,\n     RS6000_BTI_V16QI, RS6000_BTI_V16QI, RS6000_BTI_unsigned_V16QI, 0 },\n   { ALTIVEC_BUILTIN_VEC_SL, ALTIVEC_BUILTIN_VSLB,"}, {"sha": "7e98397b344237986a52705a78a67334077c9b01", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6607774860fae67f0913d98e30f3158aa0e77a5/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6607774860fae67f0913d98e30f3158aa0e77a5/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=a6607774860fae67f0913d98e30f3158aa0e77a5", "patch": "@@ -18187,6 +18187,43 @@ If any of the enabled test conditions is true, the corresponding entry\n in the result vector is -1.  Otherwise (all of the enabled test\n conditions are false), the corresponding entry of the result vector is 0.\n \n+The following built-in functions are available for the PowerPC family\n+of processors, starting with ISA 3.0 or later (@option{-mcpu=power9}):\n+@smallexample\n+vector unsigned int vec_rlmi (vector unsigned int, vector unsigned int,\n+                              vector unsigned int);\n+vector unsigned long long vec_rlmi (vector unsigned long long,\n+                                    vector unsigned long long,\n+                                    vector unsigned long long);\n+vector unsigned int vec_rlnm (vector unsigned int, vector unsigned int,\n+                              vector unsigned int);\n+vector unsigned long long vec_rlnm (vector unsigned long long,\n+                                    vector unsigned long long,\n+                                    vector unsigned long long);\n+vector unsigned int vec_vrlnm (vector unsigned int, vector unsigned int);\n+vector unsigned long long vec_vrlnm (vector unsigned long long,\n+                                     vector unsigned long long);\n+@end smallexample\n+\n+The result of @code{vec_rlmi} is obtained by rotating each element of\n+the first argument vector left and inserting it under mask into the\n+second argument vector.  The third argument vector contains the mask\n+beginning in bits 11:15, the mask end in bits 19:23, and the shift\n+count in bits 27:31, of each element.\n+\n+The result of @code{vec_rlnm} is obtained by rotating each element of\n+the first argument vector left and ANDing it with a mask specified by\n+the second and third argument vectors.  The second argument vector\n+contains the shift count for each element in the low-order byte.  The\n+third argument vector contains the mask end for each element in the\n+low-order byte, with the mask begin in the next higher byte.\n+\n+The result of @code{vec_vrlnm} is obtained by rotating each element\n+of the first argument vector left and ANDing it with a mask.  The\n+second argument vector contains the mask  beginning in bits 11:15,\n+the mask end in bits 19:23, and the shift count in bits 27:31,\n+of each element.\n+\n If the cryptographic instructions are enabled (@option{-mcrypto} or\n @option{-mcpu=power8}), the following builtins are enabled.\n "}, {"sha": "7cdf31c73d39303ded560ac5c4b1fb014c9f2a85", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6607774860fae67f0913d98e30f3158aa0e77a5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6607774860fae67f0913d98e30f3158aa0e77a5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a6607774860fae67f0913d98e30f3158aa0e77a5", "patch": "@@ -1,3 +1,7 @@\n+2017-01-17  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\t* vec-rlmi-rlnm.c: New file.\n+\n 2017-01-17  Nathan Sidwell  <nathan@acm.org>\n \n \tPR c++/61636"}, {"sha": "c4f791dbba6f81ab2a86a20aa1877b3209549167", "filename": "gcc/testsuite/gcc.target/powerpc/vec-rlmi-rlnm.c", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6607774860fae67f0913d98e30f3158aa0e77a5/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-rlmi-rlnm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6607774860fae67f0913d98e30f3158aa0e77a5/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-rlmi-rlnm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-rlmi-rlnm.c?ref=a6607774860fae67f0913d98e30f3158aa0e77a5", "patch": "@@ -0,0 +1,69 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-O2 -mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+vector unsigned int\n+rlmi_test_1 (vector unsigned int x, vector unsigned int y,\n+\t     vector unsigned int z)\n+{\n+  return vec_rlmi (x, y, z);\n+}\n+\n+vector unsigned long long\n+rlmi_test_2 (vector unsigned long long x, vector unsigned long long y,\n+\t     vector unsigned long long z)\n+{\n+  return vec_rlmi (x, y, z);\n+}\n+\n+vector unsigned int\n+vrlnm_test_1 (vector unsigned int x, vector unsigned int y)\n+{\n+  return vec_vrlnm (x, y);\n+}\n+\n+vector unsigned long long\n+vrlnm_test_2 (vector unsigned long long x, vector unsigned long long y)\n+{\n+  return vec_vrlnm (x, y);\n+}\n+\n+vector unsigned int\n+rlnm_test_1 (vector unsigned int x, vector unsigned int y,\n+\t     vector unsigned int z)\n+{\n+  return vec_rlnm (x, y, z);\n+}\n+\n+vector unsigned long long\n+rlnm_test_2 (vector unsigned long long x, vector unsigned long long y,\n+\t     vector unsigned long long z)\n+{\n+  return vec_rlnm (x, y, z);\n+}\n+\n+/* Expected code generation for rlmi_test_1 is vrlwmi.\n+   Expected code generation for rlmi_test_2 is vrldmi.\n+   Expected code generation for vrlnm_test_1 is vrlwnm.\n+   Expected code generation for vrlnm_test_2 is vrldnm.\n+   Expected code generation for the others is more complex, because\n+   the second and third arguments are combined by a shift and OR,\n+   and because there is no splat-immediate doubleword.\n+    - For rlnm_test_1: vspltisw, vslw, xxlor, vrlwnm.\n+    - For rlnm_test_2: xxspltib, vextsb2d, vsld, xxlor, vrldnm.\n+   There is a choice of splat instructions in both cases, so we\n+   just check for \"splt\".  */\n+\n+/* { dg-final { scan-assembler-times \"vrlwmi\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrldmi\" 1 } } */\n+/* { dg-final { scan-assembler-times \"splt\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vextsb2d\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vslw\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vsld\" 1 } } */\n+/* { dg-final { scan-assembler-times \"xxlor\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vrlwnm\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vrldnm\" 2 } } */"}]}