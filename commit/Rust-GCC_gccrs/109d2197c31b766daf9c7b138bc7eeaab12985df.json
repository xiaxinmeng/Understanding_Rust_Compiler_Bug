{"sha": "109d2197c31b766daf9c7b138bc7eeaab12985df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTA5ZDIxOTdjMzFiNzY2ZGFmOWM3YjEzOGJjN2VlYWFiMTI5ODVkZg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-07-20T14:00:02Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-07-20T14:00:02Z"}, "message": "re PR middle-end/50060 (intrinsics not folded by the middle-end)\n\n\tPR c++/50060\n\t* constexpr.c (cxx_eval_builtin_function_call): Pass false as lval\n\twhen evaluating call arguments.  Use fold_builtin_call_array instead\n\tof fold_build_call_array_loc, return t if it returns NULL.  Otherwise\n\tcheck the result with potential_constant_expression and call\n\tcxx_eval_constant_expression on it.\n\n\t* g++.dg/cpp0x/constexpr-50060.C: New test.\n\t* g++.dg/cpp1y/constexpr-50060.C: New test.\n\nFrom-SVN: r238520", "tree": {"sha": "b4130392d26901052d9c0f2e7c70f90f8177f8c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b4130392d26901052d9c0f2e7c70f90f8177f8c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/109d2197c31b766daf9c7b138bc7eeaab12985df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/109d2197c31b766daf9c7b138bc7eeaab12985df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/109d2197c31b766daf9c7b138bc7eeaab12985df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/109d2197c31b766daf9c7b138bc7eeaab12985df/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2d06ca74a23cc87d2edc983f24a196a815af1c01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d06ca74a23cc87d2edc983f24a196a815af1c01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d06ca74a23cc87d2edc983f24a196a815af1c01"}], "stats": {"total": 168, "additions": 161, "deletions": 7}, "files": [{"sha": "7b9032022e0a347f0e8bb1ac982cb4d0b02b7fc1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/109d2197c31b766daf9c7b138bc7eeaab12985df/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/109d2197c31b766daf9c7b138bc7eeaab12985df/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=109d2197c31b766daf9c7b138bc7eeaab12985df", "patch": "@@ -1,3 +1,12 @@\n+2016-07-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/50060\n+\t* constexpr.c (cxx_eval_builtin_function_call): Pass false as lval\n+\twhen evaluating call arguments.  Use fold_builtin_call_array instead\n+\tof fold_build_call_array_loc, return t if it returns NULL.  Otherwise\n+\tcheck the result with potential_constant_expression and call\n+\tcxx_eval_constant_expression on it.\n+\n 2016-07-19  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/67164"}, {"sha": "346fdfad90868234c3e8a5a6086dac44cb18b305", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/109d2197c31b766daf9c7b138bc7eeaab12985df/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/109d2197c31b766daf9c7b138bc7eeaab12985df/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=109d2197c31b766daf9c7b138bc7eeaab12985df", "patch": "@@ -1105,7 +1105,7 @@ cxx_eval_builtin_function_call (const constexpr_ctx *ctx, tree t, tree fun,\n   for (i = 0; i < nargs; ++i)\n     {\n       args[i] = cxx_eval_constant_expression (&new_ctx, CALL_EXPR_ARG (t, i),\n-\t\t\t\t\t      lval, &dummy1, &dummy2);\n+\t\t\t\t\t      false, &dummy1, &dummy2);\n       if (bi_const_p)\n \t/* For __built_in_constant_p, fold all expressions with constant values\n \t   even if they aren't C++ constant-expressions.  */\n@@ -1114,13 +1114,31 @@ cxx_eval_builtin_function_call (const constexpr_ctx *ctx, tree t, tree fun,\n \n   bool save_ffbcp = force_folding_builtin_constant_p;\n   force_folding_builtin_constant_p = true;\n-  new_call = fold_build_call_array_loc (EXPR_LOCATION (t), TREE_TYPE (t),\n-\t\t\t\t\tCALL_EXPR_FN (t), nargs, args);\n-  /* Fold away the NOP_EXPR from fold_builtin_n.  */\n-  new_call = fold (new_call);\n+  new_call = fold_builtin_call_array (EXPR_LOCATION (t), TREE_TYPE (t),\n+\t\t\t\t      CALL_EXPR_FN (t), nargs, args);\n   force_folding_builtin_constant_p = save_ffbcp;\n-  VERIFY_CONSTANT (new_call);\n-  return new_call;\n+  if (new_call == NULL)\n+    {\n+      if (!*non_constant_p && !ctx->quiet)\n+\t{\n+\t  new_call = build_call_array_loc (EXPR_LOCATION (t), TREE_TYPE (t),\n+\t\t\t\t\t   CALL_EXPR_FN (t), nargs, args);\n+\t  error (\"%q+E is not a constant expression\", new_call);\n+\t}\n+      *non_constant_p = true;\n+      return t;\n+    }\n+\n+  if (!potential_constant_expression (new_call))\n+    {\n+      if (!*non_constant_p && !ctx->quiet)\n+\terror (\"%q+E is not a constant expression\", new_call);\n+      *non_constant_p = true;\n+      return t;\n+    }\n+\n+  return cxx_eval_constant_expression (&new_ctx, new_call, lval,\n+\t\t\t\t       non_constant_p, overflow_p);\n }\n \n /* TEMP is the constant value of a temporary object of type TYPE.  Adjust"}, {"sha": "41042eb2aa89f1fbe62067a40ecd1721151e00d1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/109d2197c31b766daf9c7b138bc7eeaab12985df/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/109d2197c31b766daf9c7b138bc7eeaab12985df/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=109d2197c31b766daf9c7b138bc7eeaab12985df", "patch": "@@ -1,3 +1,9 @@\n+2016-07-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/50060\n+\t* g++.dg/cpp0x/constexpr-50060.C: New test.\n+\t* g++.dg/cpp1y/constexpr-50060.C: New test.\n+\n 2016-07-20  Martin Liska  <mliska@suse.cz>\n \n \t* gfortran.dg/graphite/pr71898.f90: New test."}, {"sha": "ee1c221b6a65481ec33dfb63b30047cd277f3ff8", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-50060.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/109d2197c31b766daf9c7b138bc7eeaab12985df/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-50060.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/109d2197c31b766daf9c7b138bc7eeaab12985df/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-50060.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-50060.C?ref=109d2197c31b766daf9c7b138bc7eeaab12985df", "patch": "@@ -0,0 +1,21 @@\n+// PR c++/50060\n+// { dg-do compile { target c++11 } }\n+\n+extern \"C\" double frexp (double, int *);\n+\n+struct S\n+{\n+  constexpr S (double a) : y {}, x (frexp (a, &y)) {}\t// { dg-error \"is not a constant expression\" \"S\" { target { ! c++14 } } }\n+  double x;\n+  int y;\n+};\n+\n+struct T\n+{\n+  constexpr T (double a) : y {}, x ((y = 1, 0.8125)) {}\t// { dg-error \"is not a constant-expression\" \"T\" { target { ! c++14 } } }\n+  double x;\n+  int y;\n+};\n+\n+static_assert (S (6.5).x == 0.8125, \"\");\t// { dg-error \"non-constant condition for static assertion|in constexpr expansion\" \"\" { target { ! c++14 } } }\n+static_assert (T (6.5).x == 0.8125, \"\");\t// { dg-error \"non-constant condition for static assertion|called in a constant expression\" \"\" { target { ! c++14 } } }"}, {"sha": "4ac27a349a0168b11f3adcad39e79cb8cbcb13ea", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-50060.C", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/109d2197c31b766daf9c7b138bc7eeaab12985df/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-50060.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/109d2197c31b766daf9c7b138bc7eeaab12985df/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-50060.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-50060.C?ref=109d2197c31b766daf9c7b138bc7eeaab12985df", "patch": "@@ -0,0 +1,100 @@\n+// PR c++/50060\n+// { dg-do compile { target c++14 } }\n+\n+// sincos and lgamma_r aren't available in -std=c++14,\n+// only in -std=gnu++14.  Use __builtin_* in that case.\n+extern \"C\" void sincos (double, double *, double *);\n+extern \"C\" double frexp (double, int *);\n+extern \"C\" double modf (double, double *);\n+extern \"C\" double remquo (double, double, int *);\n+extern \"C\" double lgamma_r (double, int *);\n+\n+constexpr double\n+f0 (double x)\n+{\n+  double y {};\n+  double z {};\n+  __builtin_sincos (x, &y, &z);\n+  return y;\n+}\n+\n+constexpr double\n+f1 (double x)\n+{\n+  double y {};\n+  double z {};\n+  __builtin_sincos (x, &y, &z);\n+  return z;\n+}\n+\n+constexpr double\n+f2 (double x)\n+{\n+  int y {};\n+  return frexp (x, &y);\n+}\n+\n+constexpr int\n+f3 (double x)\n+{\n+  int y {};\n+  frexp (x, &y);\n+  return y;\n+}\n+\n+constexpr double\n+f4 (double x)\n+{\n+  double y {};\n+  return modf (x, &y);\n+}\n+\n+constexpr double\n+f5 (double x)\n+{\n+  double y {};\n+  modf (x, &y);\n+  return y;\n+}\n+\n+constexpr double\n+f6 (double x, double y)\n+{\n+  int z {};\n+  return remquo (x, y, &z);\n+}\n+\n+constexpr int\n+f7 (double x, double y)\n+{\n+  int z {};\n+  remquo (x, y, &z);\n+  return z;\n+}\n+\n+constexpr double\n+f8 (double x)\n+{\n+  int y {};\n+  return __builtin_lgamma_r (x, &y);\n+}\n+\n+constexpr int\n+f9 (double x)\n+{\n+  int y {};\n+  __builtin_lgamma_r (x, &y);\n+  return y;\n+}\n+\n+static_assert (f0 (0.0) == 0.0, \"\");\n+static_assert (f1 (0.0) == 1.0, \"\");\n+static_assert (f2 (6.5) == 0.8125, \"\");\n+static_assert (f3 (6.5) == 3, \"\");\n+static_assert (f4 (-7.25) == -0.25, \"\");\n+static_assert (f5 (-7.25) == -7.0, \"\");\n+static_assert (f6 (3.0, 2.0) == -1.0, \"\");\n+static_assert (f7 (3.0, 2.0) == 2, \"\");\n+static_assert (f8 (0.75) >= 0.20 && f8 (0.75) <= 0.21, \"\");\n+static_assert (f8 (0.75) >= 0.20 && f8 (0.75) <= 0.21, \"\");\n+static_assert (f9 (0.75) == 1, \"\");"}]}