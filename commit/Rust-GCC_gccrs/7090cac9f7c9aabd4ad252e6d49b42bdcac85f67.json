{"sha": "7090cac9f7c9aabd4ad252e6d49b42bdcac85f67", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzA5MGNhYzlmN2M5YWFiZDRhZDI1MmU2ZDQ5YjQyYmRjYWM4NWY2Nw==", "commit": {"author": {"name": "Andre Vehreschild", "email": "vehre@gcc.gnu.org", "date": "2016-08-08T09:58:21Z"}, "committer": {"name": "Andre Vehreschild", "email": "vehre@gcc.gnu.org", "date": "2016-08-08T09:58:21Z"}, "message": "re PR fortran/71936 (ICE in wide_int_to_tree, at tree.c:1487)\n\ngcc/fortran/ChangeLog:\n\n2016-08-08  Andre Vehreschild  <vehre@gcc.gnu.org>\n\n\tPR fortran/71936\n\t* trans-array.c (gfc_array_allocate): When SOURCE= is a function\n\tstick with the ref of the object to allocate.\n\ngcc/testsuite/ChangeLog:\n\n2016-08-08  Andre Vehreschild  <vehre@gcc.gnu.org>\n\n\tPR fortran/71936\n\t* gfortran.dg/allocate_with_source_21.f03: New test.\n\nFrom-SVN: r239237", "tree": {"sha": "2aecfc38f65dabcc6205d34a288024cf1c120249", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2aecfc38f65dabcc6205d34a288024cf1c120249"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7090cac9f7c9aabd4ad252e6d49b42bdcac85f67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7090cac9f7c9aabd4ad252e6d49b42bdcac85f67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7090cac9f7c9aabd4ad252e6d49b42bdcac85f67", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7090cac9f7c9aabd4ad252e6d49b42bdcac85f67/comments", "author": null, "committer": null, "parents": [{"sha": "64e56ab026b20babdf4ac0b07c20ab5b9c3e0b1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64e56ab026b20babdf4ac0b07c20ab5b9c3e0b1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64e56ab026b20babdf4ac0b07c20ab5b9c3e0b1e"}], "stats": {"total": 72, "additions": 71, "deletions": 1}, "files": [{"sha": "6a56ed047a8cd6ff530d91747156700553e00a4b", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7090cac9f7c9aabd4ad252e6d49b42bdcac85f67/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7090cac9f7c9aabd4ad252e6d49b42bdcac85f67/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=7090cac9f7c9aabd4ad252e6d49b42bdcac85f67", "patch": "@@ -1,3 +1,9 @@\n+2016-08-08  Andre Vehreschild  <vehre@gcc.gnu.org>\n+\n+\tPR fortran/71936\n+\t* trans-array.c (gfc_array_allocate): When SOURCE= is a function\n+\tstick with the ref of the object to allocate.\n+\n 2016-08-08  Andre Vehreschild  <vehre@gcc.gnu.org>\n \n \tPR fortran/72698"}, {"sha": "450d7db2076a64b4fabd1e198dfb441bca834536", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7090cac9f7c9aabd4ad252e6d49b42bdcac85f67/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7090cac9f7c9aabd4ad252e6d49b42bdcac85f67/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=7090cac9f7c9aabd4ad252e6d49b42bdcac85f67", "patch": "@@ -5431,12 +5431,19 @@ gfc_array_allocate (gfc_se * se, gfc_expr * expr, tree status, tree errmsg,\n \n   if (ref->u.ar.type == AR_FULL && expr3 != NULL)\n     {\n+      gfc_ref *old_ref = ref;\n       /* F08:C633: Array shape from expr3.  */\n       ref = expr3->ref;\n \n       /* Find the last reference in the chain.  */\n       if (!retrieve_last_ref (&ref, &prev_ref))\n-\treturn false;\n+\t{\n+\t  if (expr3->expr_type == EXPR_FUNCTION\n+\t      && gfc_expr_attr (expr3).dimension)\n+\t    ref = old_ref;\n+\t  else\n+\t    return false;\n+\t}\n       alloc_w_e3_arr_spec = true;\n     }\n "}, {"sha": "18f6e46e7bfffaa3e80dd12965199f5f8528ac9a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7090cac9f7c9aabd4ad252e6d49b42bdcac85f67/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7090cac9f7c9aabd4ad252e6d49b42bdcac85f67/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7090cac9f7c9aabd4ad252e6d49b42bdcac85f67", "patch": "@@ -1,3 +1,8 @@\n+2016-08-08  Andre Vehreschild  <vehre@gcc.gnu.org>\n+\n+\tPR fortran/71936\n+\t* gfortran.dg/allocate_with_source_21.f03: New test.\n+\n 2016-08-08  Andre Vehreschild  <vehre@gcc.gnu.org>\n \n \tPR fortran/72698"}, {"sha": "fbf31593157724b9c1c0da66864a40a233f3bd3d", "filename": "gcc/testsuite/gfortran.dg/allocate_with_source_21.f03", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7090cac9f7c9aabd4ad252e6d49b42bdcac85f67/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_21.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7090cac9f7c9aabd4ad252e6d49b42bdcac85f67/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_21.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_21.f03?ref=7090cac9f7c9aabd4ad252e6d49b42bdcac85f67", "patch": "@@ -0,0 +1,52 @@\n+! { dg-do compile }\n+\n+! Check fix for pr71936.\n+! Contributed by Gerhard Steinmetz\n+\n+program p\n+  type t\n+  end type\n+\n+  call test2()\n+  call test4()\n+  call test1()\n+  call test3()\n+contains\n+  function f_p()\n+    class(t), pointer :: f_p(:)\n+    nullify(f_p)\n+  end\n+\n+  function f_a()\n+    class(t), allocatable :: f_a(:)\n+  end\n+\n+  subroutine test1()\n+    class(t), allocatable :: x(:)\n+    allocate (x, mold=f_a())\n+    deallocate (x)\n+    allocate (x, source=f_a())\n+  end subroutine\n+\n+  subroutine test2()\n+    class(t), pointer :: x(:)\n+    allocate (x, mold=f_p())\n+    deallocate (x)\n+    allocate (x, source=f_p())\n+  end\n+\n+  subroutine test3()\n+    class(t), pointer :: x(:)\n+    allocate (x, mold=f_a())\n+    deallocate (x)\n+    allocate (x, source=f_a())\n+  end\n+\n+  subroutine test4()\n+    class(t), allocatable :: x(:)\n+    allocate (x, mold=f_p())\n+    deallocate (x)\n+    allocate (x, source=f_p())\n+  end subroutine\n+end\n+"}]}