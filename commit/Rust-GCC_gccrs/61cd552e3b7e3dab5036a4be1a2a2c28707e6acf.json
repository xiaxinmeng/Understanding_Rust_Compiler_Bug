{"sha": "61cd552e3b7e3dab5036a4be1a2a2c28707e6acf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjFjZDU1MmUzYjdlM2RhYjUwMzZhNGJlMWEyYTJjMjg3MDdlNmFjZg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@markmitchell.com", "date": "1999-01-20T13:11:59Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-01-20T13:11:59Z"}, "message": "error.c (dump_function_decl): Don't print the argument types for a function when the verbosity level is negative.\n\n\t* error.c (dump_function_decl): Don't print the argument types for\n\ta function when the verbosity level is negative.\n\t* call.c (build_over_call): Check format attributes at call-time.\n\t* pt.c (tsubst_copy): Fix comment.\n\t(unify): Don't allow unification with variable-sized arrays.\n\t* semantics.c (finish_stmt_expr): When processing a template make\n\tthe BIND_EXPR long-lived.\n\nFrom-SVN: r24788", "tree": {"sha": "3ac0bc7867ca45fa2c558c4486cf8cdfdc93020d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ac0bc7867ca45fa2c558c4486cf8cdfdc93020d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61cd552e3b7e3dab5036a4be1a2a2c28707e6acf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61cd552e3b7e3dab5036a4be1a2a2c28707e6acf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61cd552e3b7e3dab5036a4be1a2a2c28707e6acf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61cd552e3b7e3dab5036a4be1a2a2c28707e6acf/comments", "author": null, "committer": null, "parents": [{"sha": "876d1fa3baa7094a5d2690c0d8d8580e9ea35aac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/876d1fa3baa7094a5d2690c0d8d8580e9ea35aac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/876d1fa3baa7094a5d2690c0d8d8580e9ea35aac"}], "stats": {"total": 95, "additions": 86, "deletions": 9}, "files": [{"sha": "9b14cda2d53f38993bdec221f784ccc1267497c5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61cd552e3b7e3dab5036a4be1a2a2c28707e6acf/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61cd552e3b7e3dab5036a4be1a2a2c28707e6acf/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=61cd552e3b7e3dab5036a4be1a2a2c28707e6acf", "patch": "@@ -1,3 +1,16 @@\n+1999-01-20  Mark Mitchell  <mark@markmitchell.com>\n+\n+\t* error.c (dump_function_decl): Don't print the argument types for\n+\ta function when the verbosity level is negative.\n+\t\n+\t* call.c (build_over_call): Check format attributes at call-time.\n+\n+\t* pt.c (tsubst_copy): Fix comment.\n+\t(unify): Don't allow unification with variable-sized arrays.\n+\n+\t* semantics.c (finish_stmt_expr): When processing a template make\n+\tthe BIND_EXPR long-lived.\n+\n 1999-01-19  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* decl2.c (finish_vtable_vardecl): Make vtables comdat here."}, {"sha": "356a57d76ae2cd5da2f6fab313065acb9523f9c3", "filename": "gcc/cp/call.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61cd552e3b7e3dab5036a4be1a2a2c28707e6acf/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61cd552e3b7e3dab5036a4be1a2a2c28707e6acf/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=61cd552e3b7e3dab5036a4be1a2a2c28707e6acf", "patch": "@@ -3364,6 +3364,10 @@ build_over_call (cand, args, flags)\n \n   converted_args = nreverse (converted_args);\n \n+  if (warn_format && (DECL_NAME (fn) || DECL_ASSEMBLER_NAME (fn)))\n+    check_function_format (DECL_NAME (fn), DECL_ASSEMBLER_NAME (fn),\n+\t\t\t   converted_args); \n+\n   /* Avoid actually calling copy constructors and copy assignment operators,\n      if possible.  */\n "}, {"sha": "fd3f5f50e4c7ddb0900c58fba78134a02270e976", "filename": "gcc/cp/error.c", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61cd552e3b7e3dab5036a4be1a2a2c28707e6acf/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61cd552e3b7e3dab5036a4be1a2a2c28707e6acf/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=61cd552e3b7e3dab5036a4be1a2a2c28707e6acf", "patch": "@@ -958,8 +958,9 @@ dump_decl (t, v)\n }\n \n /* Pretty printing for announce_function.  T is the declaration of the\n-   function we are interested in seeing.  V is non-zero if we should print\n-   the type that this function returns.  */\n+   function we are interested in seeing.  If V is zero, we print the\n+   argument types.  If V is positive, we also print the return types.\n+   If V is negative, we do not even print the argument types.  */\n \n static void\n dump_function_decl (t, v)\n@@ -985,9 +986,8 @@ dump_function_decl (t, v)\n   else if (TREE_CODE (fntype) == METHOD_TYPE)\n     cname = TREE_TYPE (TREE_VALUE (parmtypes));\n \n-  v = (v > 0);\n-  \n-  if (v)\n+  /* Print the return type.  */\n+  if (v > 0)\n     {\n       if (DECL_STATIC_FUNCTION_P (t))\n \tOB_PUTS (\"static \");\n@@ -1001,6 +1001,7 @@ dump_function_decl (t, v)\n \t}\n     }\n \n+  /* Print the function name.  */\n   if (cname)\n     {\n       dump_type (cname, 0);\n@@ -1021,7 +1022,11 @@ dump_function_decl (t, v)\n     parmtypes = TREE_CHAIN (parmtypes);\n   \n   dump_function_name (t);\n-  \n+\n+  /* If V is negative, we don't print the argument types.  */\n+  if (v < 0)\n+    return;\n+\n   OB_PUTC ('(');\n \n   if (parmtypes)"}, {"sha": "0a675359d025f313c8cfd44f8174da2579d84e8d", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61cd552e3b7e3dab5036a4be1a2a2c28707e6acf/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61cd552e3b7e3dab5036a4be1a2a2c28707e6acf/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=61cd552e3b7e3dab5036a4be1a2a2c28707e6acf", "patch": "@@ -6329,7 +6329,7 @@ tsubst_copy (t, args, in_decl)\n \n \tif (code == BIND_EXPR && !processing_template_decl)\n \t  {\n-\t    /* This processing  should really occur in tsubst_expr,\n+\t    /* This processing should really occur in tsubst_expr,\n \t       However, tsubst_expr does not recurse into expressions,\n \t       since it assumes that there aren't any statements\n \t       inside them.  Instead, it simply calls\n@@ -7504,6 +7504,20 @@ unify (tparms, targs, parm, arg, strict, explicit_mask)\n \treturn 0;\n       else if (targ)\n \treturn 1;\n+\n+      /* Make sure that ARG is not a variable-sized array.  (Note that\n+\t were talking about variable-sized arrays (like `int[n]'),\n+\t rather than arrays of unknown size (like `int[]').)  We'll\n+\t get very confused by such a type since the bound of the array\n+\t will not be computable in an instantiation.  Besides, such\n+\t types are not allowed in ISO C++, so we can do as we please\n+\t here.  */\n+      if (TREE_CODE (arg) == ARRAY_TYPE \n+\t  && !uses_template_parms (arg)\n+\t  && (TREE_CODE (TYPE_MAX_VALUE (TYPE_DOMAIN (arg)))\n+\t      != INTEGER_CST))\n+\treturn 1;\n+\n       TREE_VEC_ELT (targs, idx) = arg;\n       return 0;\n "}, {"sha": "fd6f3d0d49028af40d3db8369ba826a09470e9f9", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61cd552e3b7e3dab5036a4be1a2a2c28707e6acf/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61cd552e3b7e3dab5036a4be1a2a2c28707e6acf/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=61cd552e3b7e3dab5036a4be1a2a2c28707e6acf", "patch": "@@ -809,8 +809,8 @@ finish_stmt_expr (rtl_expr, expr)\n     {\n       /* Make a BIND_EXPR for the BLOCK already made.  */\n       if (processing_template_decl)\n-\tresult = build (BIND_EXPR, NULL_TREE,\n-\t\t\tNULL_TREE, last_tree, expr);\n+\tresult = build_min_nt (BIND_EXPR, NULL_TREE, last_tree,\n+\t\t\t       NULL_TREE);\n       else\n \tresult = build (BIND_EXPR, TREE_TYPE (rtl_expr),\n \t\t\tNULL_TREE, rtl_expr, expr);"}, {"sha": "04c4d9f8de51da147000a615b47bc0e86e1b1996", "filename": "gcc/testsuite/g++.old-deja/g++.other/printf1.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61cd552e3b7e3dab5036a4be1a2a2c28707e6acf/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fprintf1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61cd552e3b7e3dab5036a4be1a2a2c28707e6acf/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fprintf1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fprintf1.C?ref=61cd552e3b7e3dab5036a4be1a2a2c28707e6acf", "patch": "@@ -0,0 +1,14 @@\n+// Build don't link:\n+// Special g++ Options: -Wall\n+\n+struct a\n+{\n+  void x(char *f,...) __attribute__((format(printf,2,3)));\n+};\n+\n+int main()\n+{\n+  a A;\n+  A.x(\"%d\"); // WARNING - too few arguments for format\n+  return 0;\n+}"}, {"sha": "f52f1ba9e0271f9fce5efc7f0b26c32704340751", "filename": "gcc/testsuite/g++.old-deja/g++.pt/crash27.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61cd552e3b7e3dab5036a4be1a2a2c28707e6acf/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash27.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61cd552e3b7e3dab5036a4be1a2a2c28707e6acf/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash27.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash27.C?ref=61cd552e3b7e3dab5036a4be1a2a2c28707e6acf", "patch": "@@ -0,0 +1,13 @@\n+// Build don't link:\n+\n+template<int i> int f (void)\n+{\n+        if (__extension__ ({ 1; }))\n+                return 0;\n+        return 1;\n+}\n+\n+void g (void)\n+{\n+        f<1> ();\n+}"}, {"sha": "752c9706990dc08f9da66853b2a67e10ea098cd1", "filename": "gcc/testsuite/g++.old-deja/g++.pt/crash28.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61cd552e3b7e3dab5036a4be1a2a2c28707e6acf/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash28.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61cd552e3b7e3dab5036a4be1a2a2c28707e6acf/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash28.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash28.C?ref=61cd552e3b7e3dab5036a4be1a2a2c28707e6acf", "patch": "@@ -0,0 +1,14 @@\n+// Build don't link:\n+// Special g++ Options:\n+\n+template <class ARRY>\n+inline unsigned int asize(ARRY &a)\n+{\n+  return sizeof(a) / sizeof(a[0]);\n+}\n+\n+int f(unsigned int n) {\n+  int x[n];\n+\n+  asize(x); // ERROR - no matching function\n+};"}]}