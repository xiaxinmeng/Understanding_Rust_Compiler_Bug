{"sha": "dccbf1e2a6e544f71b4a5795f0c79015db019fc3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGNjYmYxZTJhNmU1NDRmNzFiNGE1Nzk1ZjBjNzkwMTVkYjAxOWZjMw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-07-06T14:26:50Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-07-06T14:30:18Z"}, "message": "tree-optimization/96075 - fix bogus misalignment calculation\n\nThis fixes bogus misalignment calculation for negative steps\nsince an assertion a previous comment indicated no longer holds:\n\n      /* DR_STEP(dr) is the same as -TYPE_SIZE of the scalar type,\n         otherwise we wouldn't be here.  */\n\nThus the following replaces DR_STEP by -TYPE_SIZE.\n\n2020-07-06  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/96075\n\t* tree-vect-data-refs.c (vect_compute_data_ref_alignment): Use\n\tTYPE_SIZE_UNIT of the vector component type instead of DR_STEP\n\tfor the misalignment calculation for negative step.\n\n\t* gcc.dg/vect/slp-46.c: New testcase.", "tree": {"sha": "2cfd3cde5c4d1f6dc40a8db09e7925919ca18185", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2cfd3cde5c4d1f6dc40a8db09e7925919ca18185"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dccbf1e2a6e544f71b4a5795f0c79015db019fc3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dccbf1e2a6e544f71b4a5795f0c79015db019fc3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dccbf1e2a6e544f71b4a5795f0c79015db019fc3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dccbf1e2a6e544f71b4a5795f0c79015db019fc3/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9e48b0d475407bbc79be88c6d086a9d837d4ca3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9e48b0d475407bbc79be88c6d086a9d837d4ca3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9e48b0d475407bbc79be88c6d086a9d837d4ca3"}], "stats": {"total": 98, "additions": 97, "deletions": 1}, "files": [{"sha": "17dfa285ec1cc399096e5cf2319d4dafd7d15440", "filename": "gcc/testsuite/gcc.dg/vect/slp-46.c", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dccbf1e2a6e544f71b4a5795f0c79015db019fc3/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-46.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dccbf1e2a6e544f71b4a5795f0c79015db019fc3/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-46.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-46.c?ref=dccbf1e2a6e544f71b4a5795f0c79015db019fc3", "patch": "@@ -0,0 +1,96 @@\n+/* { dg-require-effective-target vect_double } */\n+\n+#include \"tree-vect.h\"\n+\n+double x[1024], y[1024];\n+\n+void __attribute__((noipa)) foo()\n+{\n+  for (int i = 0; i < 512; ++i)\n+    {\n+      x[2*i] = y[i];\n+      x[2*i+1] = y[i];\n+    }\n+}\n+\n+void __attribute__((noipa)) bar()\n+{\n+  for (int i = 0; i < 512; ++i)\n+    {\n+      x[2*i] = y[2*i];\n+      x[2*i+1] = y[2*i];\n+    }\n+}\n+\n+void __attribute__((noipa)) baz()\n+{\n+  for (int i = 0; i < 512; ++i)\n+    {\n+      x[2*i] = y[511-i];\n+      x[2*i+1] = y[511-i];\n+    }\n+}\n+\n+void __attribute__((noipa)) boo()\n+{\n+  for (int i = 0; i < 512; ++i)\n+    {\n+      x[2*i] = y[2*(511-i)];\n+      x[2*i+1] = y[2*(511-i)];\n+    }\n+}\n+\n+int \n+main ()\n+{\n+  check_vect ();\n+\n+  for (int i = 0; i < 1024; ++i)\n+    {\n+      x[i] = 0;\n+      y[i] = i;\n+      __asm__ volatile (\"\");\n+    }\n+\n+  foo ();\n+  for (int i = 0; i < 1024; ++i)\n+    if (x[i] != y[i/2])\n+      abort ();\n+\n+  for (int i = 0; i < 1024; ++i)\n+    {\n+      x[i] = 0;\n+      __asm__ volatile (\"\");\n+    }\n+\n+  bar ();\n+  for (int i = 0; i < 1024; ++i)\n+    if (x[i] != y[2*(i/2)])\n+      abort ();\n+\n+  for (int i = 0; i < 1024; ++i)\n+    {\n+      x[i] = 0;\n+      __asm__ volatile (\"\");\n+    }\n+\n+  baz ();\n+  for (int i = 0; i < 1024; ++i)\n+    if (x[i] != y[511 - i/2])\n+      abort ();\n+\n+  for (int i = 0; i < 1024; ++i)\n+    {\n+      x[i] = 0;\n+      __asm__ volatile (\"\");\n+    }\n+\n+  boo ();\n+  for (int i = 0; i < 1024; ++i)\n+    if (x[i] != y[2*(511 - i/2)])\n+      abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 2 \"vect\" } } */"}, {"sha": "959c2d3378f4372ee29c0347eaf4b64d577dad96", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dccbf1e2a6e544f71b4a5795f0c79015db019fc3/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dccbf1e2a6e544f71b4a5795f0c79015db019fc3/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=dccbf1e2a6e544f71b4a5795f0c79015db019fc3", "patch": "@@ -1109,7 +1109,7 @@ vect_compute_data_ref_alignment (vec_info *vinfo, dr_vec_info *dr_info)\n   if (tree_int_cst_sgn (drb->step) < 0)\n     /* PLUS because STEP is negative.  */\n     misalignment += ((TYPE_VECTOR_SUBPARTS (vectype) - 1)\n-\t\t     * TREE_INT_CST_LOW (drb->step));\n+\t\t     * -TREE_INT_CST_LOW (TYPE_SIZE_UNIT (TREE_TYPE (vectype))));\n \n   unsigned int const_misalignment;\n   if (!known_misalignment (misalignment, vect_align_c, &const_misalignment))"}]}