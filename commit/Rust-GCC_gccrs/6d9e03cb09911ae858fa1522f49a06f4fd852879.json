{"sha": "6d9e03cb09911ae858fa1522f49a06f4fd852879", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQ5ZTAzY2IwOTkxMWFlODU4ZmExNTIyZjQ5YTA2ZjRmZDg1Mjg3OQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-01-30T11:37:42Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-01-30T11:37:42Z"}, "message": "[multiple changes]\n\n2012-01-30  Yannick Moy  <moy@adacore.com>\n\n\t* gnat_ugn.texi: Minor correction of GNAT UG, to take into\n\taccount changes to -gnatwa and more recent warnings.\n\n2012-01-30  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_ch7.adb (Build_Finalizer_Call): Do not provide a source\n\tlocation when creating a call to a finalizer.\n\t* exp_ch11.adb (Expand_Exception_Handlers): Do not provide\n\ta source location for the first actual of Save_Occurrence for\n\tconsistency sake.\n\n2012-01-30  Ed Schonberg  <schonberg@adacore.com>\n\n\t* einfo.ads, einfo,adb: New attribute on scalar types:\n\tDefault_Aspect_Value New attribute on  array types:\n\tDefault_Aspect_Component_Value Move attribute Related_Array_Object\n\tto a different position to accomodate new aspect attributes.\n\t* freeze.adb (Freeze_Entity): Use new attributes to retrieve value\n\tof defaults set with an aspect specification, rather than using\n\tthe list of aspects attached to the type, to prevent issues with\n\tpartial views.\n\t* sem_ch13.adb (Analyze_Aspect_Specifications): For aspects\n\tDefault_Value and Default_Component _Value, store corresponding\n\texpression in type entity.\n\t(Check_Aspect_At_End_Of_Declaration): If the default aspects\n\tare declared on the full view, use the full view to resolve the\n\tcorreseponding expression.\n\t* exp_ch3.adb (Init_Component): Use attribute\n\tDefault_Aspect_Component_Value to perform default initialization,\n\trather than relying on the rep item list for the type.\n\t(Get_Simple_Init_Val): Ditto.\n\nFrom-SVN: r183707", "tree": {"sha": "475185cc44f66bd003af193b46819ca464719057", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/475185cc44f66bd003af193b46819ca464719057"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d9e03cb09911ae858fa1522f49a06f4fd852879", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d9e03cb09911ae858fa1522f49a06f4fd852879", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d9e03cb09911ae858fa1522f49a06f4fd852879", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d9e03cb09911ae858fa1522f49a06f4fd852879/comments", "author": null, "committer": null, "parents": [{"sha": "b688e030537ddec071ff506e1faf04ffab47f4dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b688e030537ddec071ff506e1faf04ffab47f4dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b688e030537ddec071ff506e1faf04ffab47f4dd"}], "stats": {"total": 245, "additions": 185, "deletions": 60}, "files": [{"sha": "b4253e6a44815d0a1ac0be46045968c577345df7", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d9e03cb09911ae858fa1522f49a06f4fd852879/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d9e03cb09911ae858fa1522f49a06f4fd852879/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=6d9e03cb09911ae858fa1522f49a06f4fd852879", "patch": "@@ -1,3 +1,37 @@\n+2012-01-30  Yannick Moy  <moy@adacore.com>\n+\n+\t* gnat_ugn.texi: Minor correction of GNAT UG, to take into\n+\taccount changes to -gnatwa and more recent warnings.\n+\n+2012-01-30  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_ch7.adb (Build_Finalizer_Call): Do not provide a source\n+\tlocation when creating a call to a finalizer.\n+\t* exp_ch11.adb (Expand_Exception_Handlers): Do not provide\n+\ta source location for the first actual of Save_Occurrence for\n+\tconsistency sake.\n+\n+2012-01-30  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* einfo.ads, einfo,adb: New attribute on scalar types:\n+\tDefault_Aspect_Value New attribute on  array types:\n+\tDefault_Aspect_Component_Value Move attribute Related_Array_Object\n+\tto a different position to accomodate new aspect attributes.\n+\t* freeze.adb (Freeze_Entity): Use new attributes to retrieve value\n+\tof defaults set with an aspect specification, rather than using\n+\tthe list of aspects attached to the type, to prevent issues with\n+\tpartial views.\n+\t* sem_ch13.adb (Analyze_Aspect_Specifications): For aspects\n+\tDefault_Value and Default_Component _Value, store corresponding\n+\texpression in type entity.\n+\t(Check_Aspect_At_End_Of_Declaration): If the default aspects\n+\tare declared on the full view, use the full view to resolve the\n+\tcorreseponding expression.\n+\t* exp_ch3.adb (Init_Component): Use attribute\n+\tDefault_Aspect_Component_Value to perform default initialization,\n+\trather than relying on the rep item list for the type.\n+\t(Get_Simple_Init_Val): Ditto.\n+\n 2012-01-30  Thomas Quinot  <quinot@adacore.com>\n \n \t* a-strhas.ads: Document risk of collision attack."}, {"sha": "255a2b6d403602206fbe51d77d63e7a701c31c0e", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 40, "deletions": 8, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d9e03cb09911ae858fa1522f49a06f4fd852879/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d9e03cb09911ae858fa1522f49a06f4fd852879/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=6d9e03cb09911ae858fa1522f49a06f4fd852879", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -161,9 +161,10 @@ package body Einfo is\n \n    --    Body_Entity                     Node19\n    --    Corresponding_Discriminant      Node19\n+   --    Default_Aspect_Value            Node19\n+   --    Default_Aspect_Component_Value  Node19\n    --    Extra_Accessibility_Of_Result   Node19\n    --    Parent_Subtype                  Node19\n-   --    Related_Array_Object            Node19\n    --    Size_Check_Code                 Node19\n    --    Spec_Entity                     Node19\n    --    Underlying_Full_View            Node19\n@@ -217,6 +218,7 @@ package body Einfo is\n    --    Debug_Renaming_Link             Node25\n    --    DT_Offset_To_Top_Func           Node25\n    --    PPC_Wrapper                     Node25\n+   --    Related_Array_Object            Node25\n    --    Static_Predicate                List25\n    --    Task_Body_Procedure             Node25\n \n@@ -773,6 +775,18 @@ package body Einfo is\n       return Node25 (Id);\n    end Debug_Renaming_Link;\n \n+   function Default_Aspect_Value (Id : E) return N is\n+   begin\n+      pragma Assert (Is_Scalar_Type (Id));\n+      return Node19 (Id);\n+   end Default_Aspect_Value;\n+\n+   function Default_Aspect_Component_Value (Id : E) return N is\n+   begin\n+      pragma Assert (Is_Array_Type (Id));\n+      return Node19 (Id);\n+   end Default_Aspect_Component_Value;\n+\n    function Default_Expr_Function (Id : E) return E is\n    begin\n       pragma Assert (Is_Formal (Id));\n@@ -2528,7 +2542,7 @@ package body Einfo is\n    function Related_Array_Object (Id : E) return E is\n    begin\n       pragma Assert (Is_Array_Type (Id));\n-      return Node19 (Id);\n+      return Node25 (Id);\n    end Related_Array_Object;\n \n    function Related_Expression (Id : E) return N is\n@@ -3262,6 +3276,18 @@ package body Einfo is\n       Set_Node25 (Id, V);\n    end Set_Debug_Renaming_Link;\n \n+   procedure Set_Default_Aspect_Value (Id : E; V : E) is\n+   begin\n+      pragma Assert (Is_Scalar_Type (Id));\n+      Set_Node19 (Id, V);\n+   end Set_Default_Aspect_Value;\n+\n+   procedure Set_Default_Aspect_Component_Value (Id : E; V : E) is\n+   begin\n+      pragma Assert (Is_Array_Type (Id));\n+      Set_Node19 (Id, V);\n+   end Set_Default_Aspect_Component_Value;\n+\n    procedure Set_Default_Expr_Function (Id : E; V : E) is\n    begin\n       pragma Assert (Is_Formal (Id));\n@@ -5083,7 +5109,7 @@ package body Einfo is\n    procedure Set_Related_Array_Object (Id : E; V : E) is\n    begin\n       pragma Assert (Is_Array_Type (Id));\n-      Set_Node19 (Id, V);\n+      Set_Node25 (Id, V);\n    end Set_Related_Array_Object;\n \n    procedure Set_Related_Expression (Id : E; V : N) is\n@@ -8317,13 +8343,15 @@ package body Einfo is\n          when E_Discriminant                               =>\n             Write_Str (\"Corresponding_Discriminant\");\n \n+         when Scalar_Kind                                  =>\n+            Write_Str (\"Default_Value\");\n+\n+         when E_Array_Type                                 =>\n+            Write_Str (\"Default_Component_Value\");\n+\n          when E_Record_Type                                =>\n             Write_Str (\"Parent_Subtype\");\n \n-         when E_Array_Type                                 |\n-              E_Array_Subtype                              =>\n-            Write_Str (\"Related_Array_Object\");\n-\n          when E_Constant                                   |\n               E_Variable                                   =>\n             Write_Str (\"Size_Check_Code\");\n@@ -8619,6 +8647,10 @@ package body Einfo is\n               E_Record_Subtype_With_Private                =>\n             Write_Str (\"Interfaces\");\n \n+         when E_Array_Type                                 |\n+              E_Array_Subtype                              =>\n+            Write_Str (\"Related_Array_Object\");\n+\n          when Task_Kind                                    =>\n             Write_Str (\"Task_Body_Procedure\");\n "}, {"sha": "0dd6bdd702722e48b888e5dc644a866636b3fc50", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d9e03cb09911ae858fa1522f49a06f4fd852879/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d9e03cb09911ae858fa1522f49a06f4fd852879/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=6d9e03cb09911ae858fa1522f49a06f4fd852879", "patch": "@@ -748,6 +748,14 @@ package Einfo is\n --       default expressions (see Freeze.Process_Default_Expressions), which\n --       would not only waste time, but also generate false error messages.\n \n+--    Default_Aspect_Value (Node19)\n+--       Present in scalar types. Holds the static value specified in a\n+--       default_value aspect specification for the type.\n+\n+--    Default_Aspect_Component_Value (Node19)\n+--       Present in array types. Holds the static value specified in a\n+--       default_component_value aspect specification for the array type.\n+\n --    Default_Value (Node20)\n --       Present in formal parameters. Points to the node representing the\n --       expression for the default value for the parameter. Empty if the\n@@ -3449,7 +3457,7 @@ package Einfo is\n --       register call to make appropriate entries in the special tables\n --       used for handling these pragmas at runtime.\n \n---    Related_Array_Object (Node19)\n+--    Related_Array_Object (Node25)\n --       Present in array types and subtypes. Used only for the base type\n --       and subtype created for an anonymous array object. Set to point\n --       to the entity of the corresponding array object. Currently used\n@@ -5016,11 +5024,12 @@ package Einfo is\n    --  E_Array_Type\n    --  E_Array_Subtype\n    --    First_Index                         (Node17)\n-   --    Related_Array_Object                (Node19)\n+   --    Default_Aspect_Component_Value      (Node19)\n    --    Component_Type                      (Node20)   (base type only)\n    --    Original_Array_Type                 (Node21)\n    --    Component_Size                      (Uint22)   (base type only)\n    --    Packed_Array_Type                   (Node23)\n+   --    Related_Array_Object                (Node25)\n    --    Component_Alignment                 (special)  (base type only)\n    --    Has_Component_Size_Clause           (Flag68)   (base type only)\n    --    Has_Pragma_Pack                     (Flag121)  (impl base type only)\n@@ -5195,6 +5204,7 @@ package Einfo is\n    --    Lit_Indexes                         (Node15)   (root type only)\n    --    Lit_Strings                         (Node16)   (root type only)\n    --    First_Literal                       (Node17)\n+   --    Default_Aspect_Value                (Node19)\n    --    Scalar_Range                        (Node20)\n    --    Enum_Pos_To_Rep                     (Node23)   (type only)\n    --    Static_Predicate                    (List25)\n@@ -5226,6 +5236,7 @@ package Einfo is\n    --  E_Floating_Point_Subtype\n    --    Digits_Value                        (Uint17)\n    --    Float_Rep                           (Uint10)   (Float_Rep_Kind)\n+   --    Default_Aspect_Value                (Node19)\n    --    Scalar_Range                        (Node20)\n    --    Machine_Emax_Value                  (synth)\n    --    Machine_Emin_Value                  (synth)\n@@ -5397,6 +5408,7 @@ package Einfo is\n    --  E_Modular_Integer_Type\n    --  E_Modular_Integer_Subtype\n    --    Modulus                             (Uint17)   (base type only)\n+   --    Default_Aspect_Value                (Node19)\n    --    Original_Array_Type                 (Node21)\n    --    Scalar_Range                        (Node20)\n    --    Static_Predicate                    (List25)\n@@ -5431,6 +5443,7 @@ package Einfo is\n    --  E_Ordinary_Fixed_Point_Type\n    --  E_Ordinary_Fixed_Point_Subtype\n    --    Delta_Value                         (Ureal18)\n+   --    Default_Aspect_Value                (Node19)\n    --    Scalar_Range                        (Node20)\n    --    Small_Value                         (Ureal21)\n    --    Has_Small_Clause                    (Flag67)\n@@ -5672,6 +5685,7 @@ package Einfo is\n \n    --  E_Signed_Integer_Type\n    --  E_Signed_Integer_Subtype\n+   --    Default_Aspect_Value                (Node19)\n    --    Scalar_Range                        (Node20)\n    --    Static_Predicate                    (List25)\n    --    Has_Biased_Representation           (Flag139)\n@@ -6058,6 +6072,8 @@ package Einfo is\n    function DT_Position                         (Id : E) return U;\n    function Default_Expr_Function               (Id : E) return E;\n    function Default_Expressions_Processed       (Id : E) return B;\n+   function Default_Aspect_Value                (Id : E) return N;\n+   function Default_Aspect_Component_Value      (Id : E) return N;\n    function Default_Value                       (Id : E) return N;\n    function Delay_Cleanups                      (Id : E) return B;\n    function Delay_Subprogram_Descriptors        (Id : E) return B;\n@@ -6649,6 +6665,8 @@ package Einfo is\n    procedure Set_DT_Position                     (Id : E; V : U);\n    procedure Set_Default_Expr_Function           (Id : E; V : E);\n    procedure Set_Default_Expressions_Processed   (Id : E; V : B := True);\n+   procedure Set_Default_Aspect_Value            (Id : E; V : N);\n+   procedure Set_Default_Aspect_Component_Value  (Id : E; V : N);\n    procedure Set_Default_Value                   (Id : E; V : N);\n    procedure Set_Delay_Cleanups                  (Id : E; V : B := True);\n    procedure Set_Delay_Subprogram_Descriptors    (Id : E; V : B := True);\n@@ -7354,6 +7372,8 @@ package Einfo is\n    pragma Inline (Default_Expr_Function);\n    pragma Inline (Default_Expressions_Processed);\n    pragma Inline (Default_Value);\n+   pragma Inline (Default_Aspect_Value);\n+   pragma Inline (Default_Aspect_Component_Value);\n    pragma Inline (Delay_Cleanups);\n    pragma Inline (Delay_Subprogram_Descriptors);\n    pragma Inline (Delta_Value);"}, {"sha": "7a8f89c0607b9f3a4ac3fb9327169fceefccc60a", "filename": "gcc/ada/exp_ch11.adb", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d9e03cb09911ae858fa1522f49a06f4fd852879/gcc%2Fada%2Fexp_ch11.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d9e03cb09911ae858fa1522f49a06f4fd852879/gcc%2Fada%2Fexp_ch11.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch11.adb?ref=6d9e03cb09911ae858fa1522f49a06f4fd852879", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1033,16 +1033,17 @@ package body Exp_Ch11 is\n                      Save :=\n                        Make_Procedure_Call_Statement (No_Location,\n                          Name =>\n-                           New_Occurrence_Of (RTE (RE_Save_Occurrence),\n-                                              No_Location),\n+                           New_Occurrence_Of\n+                             (RTE (RE_Save_Occurrence), No_Location),\n                          Parameter_Associations => New_List (\n-                           New_Occurrence_Of (Cparm, Cloc),\n+                           New_Occurrence_Of (Cparm, No_Location),\n                            Make_Explicit_Dereference (No_Location,\n                              Make_Function_Call (No_Location,\n-                               Name => Make_Explicit_Dereference (No_Location,\n-                                 New_Occurrence_Of\n-                                   (RTE (RE_Get_Current_Excep),\n-                                    No_Location))))));\n+                               Name =>\n+                                 Make_Explicit_Dereference (No_Location,\n+                                   New_Occurrence_Of\n+                                     (RTE (RE_Get_Current_Excep),\n+                                      No_Location))))));\n \n                      Mark_Rewrite_Insertion (Save);\n                      Prepend (Save, Statements (Handler));"}, {"sha": "d1865038361db79f849997214227030c0e61de30", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d9e03cb09911ae858fa1522f49a06f4fd852879/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d9e03cb09911ae858fa1522f49a06f4fd852879/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=6d9e03cb09911ae858fa1522f49a06f4fd852879", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -549,10 +549,7 @@ package body Exp_Ch3 is\n                 Name       => Comp,\n                 Expression =>\n                   Convert_To (Comp_Type,\n-                    Expression\n-                      (Get_Rep_Item_For_Entity\n-                        (First_Subtype (A_Type),\n-                         Name_Default_Component_Value)))));\n+                    Default_Aspect_Component_Value (First_Subtype (A_Type)))));\n \n          elsif Needs_Simple_Initialization (Comp_Type) then\n             Set_Assignment_OK (Comp);\n@@ -6853,14 +6850,17 @@ package body Exp_Ch3 is\n \n          return Result;\n \n-      --  Scalars with Default_Value aspect\n+      --  Scalars with Default_Value aspect. The first subtype may now be\n+      --   private, so retrieve value from underlying type.\n \n       elsif Is_Scalar_Type (T) and then Has_Default_Aspect (T) then\n-         return\n-           Convert_To (T,\n-             Expression\n-               (Get_Rep_Item_For_Entity\n-                 (First_Subtype (T), Name_Default_Value)));\n+         if Is_Private_Type (First_Subtype (T)) then\n+            return Unchecked_Convert_To (T,\n+              Default_Aspect_Value (Full_View (First_Subtype (T))));\n+         else\n+            return\n+              Convert_To (T, Default_Aspect_Value (First_Subtype (T)));\n+         end if;\n \n       --  Otherwise, for scalars, we must have normalize/initialize scalars\n       --  case, or if the node N is an 'Invalid_Value attribute node."}, {"sha": "f2062e577d9ea34fb69af49e1eefc4cf434282cd", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d9e03cb09911ae858fa1522f49a06f4fd852879/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d9e03cb09911ae858fa1522f49a06f4fd852879/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=6d9e03cb09911ae858fa1522f49a06f4fd852879", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -2837,15 +2837,15 @@ package body Exp_Ch7 is\n    --------------------------\n \n    procedure Build_Finalizer_Call (N : Node_Id; Fin_Id : Entity_Id) is\n-      Loc : constant Source_Ptr := Sloc (N);\n-      HSS : Node_Id := Handled_Statement_Sequence (N);\n-\n       Is_Prot_Body : constant Boolean :=\n                        Nkind (N) = N_Subprogram_Body\n                          and then Is_Protected_Subprogram_Body (N);\n       --  Determine whether N denotes the protected version of a subprogram\n       --  which belongs to a protected type.\n \n+      Loc : constant Source_Ptr := No_Location;\n+      HSS : Node_Id := Handled_Statement_Sequence (N);\n+\n    begin\n       --  Do not perform this expansion in Alfa mode because we do not create\n       --  finalizers in the first place."}, {"sha": "7b78c4985090a8ae5835b6849ee6157cdb3f9ceb", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d9e03cb09911ae858fa1522f49a06f4fd852879/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d9e03cb09911ae858fa1522f49a06f4fd852879/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=6d9e03cb09911ae858fa1522f49a06f4fd852879", "patch": "@@ -4166,21 +4166,20 @@ package body Freeze is\n          if Is_First_Subtype (E) and then Has_Default_Aspect (E) then\n             declare\n                Nam    : Name_Id;\n-               Aspect : Node_Id;\n                Exp    : Node_Id;\n                Typ    : Entity_Id;\n \n             begin\n                if Is_Scalar_Type (E) then\n                   Nam := Name_Default_Value;\n                   Typ := E;\n+                  Exp := Default_Aspect_Value (Typ);\n                else\n                   Nam := Name_Default_Component_Value;\n+                  Exp := Default_Aspect_Component_Value (E);\n                   Typ := Component_Type (E);\n                end if;\n \n-               Aspect := Get_Rep_Item_For_Entity (E, Nam);\n-               Exp := Expression (Aspect);\n                Analyze_And_Resolve (Exp, Typ);\n \n                if Etype (Exp) /= Any_Type then"}, {"sha": "913fa44b37b9cb8621192e284ac6518e11a0fa97", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 46, "deletions": 24, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d9e03cb09911ae858fa1522f49a06f4fd852879/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d9e03cb09911ae858fa1522f49a06f4fd852879/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=6d9e03cb09911ae858fa1522f49a06f4fd852879", "patch": "@@ -5681,7 +5681,8 @@ pragma @code{Postcondition} or a @code{Post} aspect in Ada 2012). A\n function postcondition is suspicious when it does not mention the result\n of the function. A procedure postcondition is suspicious when it only\n refers to the pre-state of the procedure, because in that case it should\n-rather be expressed as a precondition.\n+rather be expressed as a precondition. The default is that such warnings\n+are not generated. This warning can also be turned on using @option{-gnatwa}.\n \n @item -gnatw.T\n @emph{Suppress warnings on suspicious contracts.}\n@@ -5728,6 +5729,8 @@ ordered. (A @emph{client} is defined as a unit that is other than the unit in\n which the type is declared, or its body or subunits.) Please refer to\n the description of pragma @code{Ordered} in the\n @cite{@value{EDITION} Reference Manual} for further details.\n+The default is that such warnings are not generated.\n+This warning is not automatically turned on by the use of @option{-gnatwa}.\n \n @item -gnatw.U\n @emph{Deactivate warnings on unordered enumeration types.}\n@@ -5918,35 +5921,53 @@ The use of this switch also sets the default front end warning mode to\n A string of warning parameters can be used in the same parameter. For example:\n \n @smallexample\n--gnatwaLe\n+-gnatwaGe\n @end smallexample\n \n @noindent\n-will turn on all optional warnings except for elaboration pragma warnings,\n+will turn on all optional warnings except for unrecognized pragma warnings,\n and also specify that warnings should be treated as errors.\n @end ifclear\n+\n When no switch @option{^-gnatw^/WARNINGS^} is used, this is equivalent to:\n \n @table @option\n @c !sort!\n+@item -gnatwB\n+@item -gnatw.b\n @item -gnatwC\n+@item -gnatw.C\n @item -gnatwD\n @item -gnatwF\n @item -gnatwg\n @item -gnatwH\n @item -gnatwi\n+@item -gnatw.I\n @item -gnatwJ\n @item -gnatwK\n @item -gnatwL\n+@item -gnatw.L\n @item -gnatwM\n+@item -gnatw.m\n @item -gnatwn\n @item -gnatwo\n+@item -gnatw.O\n @item -gnatwP\n+@item -gnatw.P\n+@item -gnatwq\n @item -gnatwR\n+@item -gnatw.R\n+@item -gnatw.S\n+@item -gnatwT\n+@item -gnatw.T\n @item -gnatwU\n @item -gnatwv\n-@item -gnatwz\n+@item -gnatww\n+@item -gnatw.W\n @item -gnatwx\n+@item -gnatw.X\n+@item -gnatwy\n+@item -gnatwz\n \n @end table\n \n@@ -6316,9 +6337,10 @@ for the use of blanks to separate source tokens.\n @emph{Check Boolean operators.}\n The use of AND/OR operators is not permitted except in the cases of modular\n operands, array operands, and simple stand-alone boolean variables or\n-boolean constants. In all other cases AND THEN/OR ELSE are required.\n+boolean constants. In all other cases @code{and then}/@code{or else} are\n+required.\n \n-@item ^c^COMMENTS^ (double space)\n+@item ^c^COMMENTS^\n @emph{Check comments, double space.}\n Comments must meet the following set of rules:\n \n@@ -6370,7 +6392,7 @@ example:\n @end smallexample\n @end itemize\n \n-@item ^C^COMMENTS1^ (single space)\n+@item ^C^COMMENTS1^\n @emph{Check comments, single space.}\n This is identical to @code{^c^COMMENTS^} except that only one space\n is required following the @code{--} of a comment instead of two.\n@@ -6392,7 +6414,7 @@ Neither form feeds nor vertical tab characters are permitted\n in the source text.\n \n @item ^g^GNAT^\n-@emph{GNAT style mode}\n+@emph{GNAT style mode.}\n The set of style check switches is set to match that used by the GNAT sources.\n This may be useful when developing code that is eventually intended to be\n incorporated into GNAT. For further details, see GNAT sources.\n@@ -6412,7 +6434,7 @@ up under the @code{if} with at least one non-blank line in between\n containing all or part of the condition to be tested.\n \n @item ^I^IN_MODE^\n-@emph{check mode IN keywords}\n+@emph{check mode IN keywords.}\n Mode @code{in} (the default mode) is not\n allowed to be given explicitly. @code{in out} is fine,\n but not @code{in} on its own.\n@@ -6501,7 +6523,7 @@ Clear :\n @end smallexample\n \n @item ^Lnnn^MAX_NESTING=nnn^\n-@emph{Set maximum nesting level}\n+@emph{Set maximum nesting level.}\n The maximum level of nesting of constructs (including subprograms, loops,\n blocks, packages, and conditionals) may not exceed the given value\n @option{nnn}. A value of zero disconnects this style check.\n@@ -6528,7 +6550,7 @@ to match the presentation in the Ada Reference Manual (for example,\n @code{Integer} and @code{ASCII.NUL}).\n \n @item ^N^NONE^\n-@emph{Turn off all style checks}\n+@emph{Turn off all style checks.}\n All style check options are turned off.\n \n @item ^o^ORDERED_SUBPROGRAMS^\n@@ -6558,13 +6580,6 @@ corresponding declaration. No specific casing style is imposed on\n identifiers. The only requirement is for consistency of references\n with declarations.\n \n-@item ^S^STATEMENTS_AFTER_THEN_ELSE^\n-@emph{Check no statements after THEN/ELSE.}\n-No statements are allowed\n-on the same line as a THEN or ELSE keyword following the\n-keyword in an IF statement. OR ELSE and AND THEN are not affected,\n-and a special exception allows a pragma to appear after ELSE.\n-\n @item ^s^SPECS^\n @emph{Check separate specs.}\n Separate declarations (``specs'') are required for subprograms (a\n@@ -6573,14 +6588,21 @@ exception is that parameterless library level procedures are\n not required to have a separate declaration. This exception covers\n the most frequent form of main program procedures.\n \n+@item ^S^STATEMENTS_AFTER_THEN_ELSE^\n+@emph{Check no statements after @code{then}/@code{else}.}\n+No statements are allowed\n+on the same line as a @code{then} or @code{else} keyword following the\n+keyword in an @code{if} statement. @code{or else} and @code{and then} are not\n+affected, and a special exception allows a pragma to appear after @code{else}.\n+\n @item ^t^TOKEN^\n @emph{Check token spacing.}\n The following token spacing rules are enforced:\n \n @itemize @bullet\n \n @item\n-The keywords @code{@b{abs}} and @code{@b{not}} must be followed by a space.\n+The keywords @code{abs} and @code{not} must be followed by a space.\n \n @item\n The token @code{=>} must be surrounded by spaces.\n@@ -6641,9 +6663,9 @@ around conditions in @code{if} statements, @code{while} statements and\n @item ^y^ALL_BUILTIN^\n @emph{Set all standard style check options}\n This is equivalent to @code{gnaty3aAbcefhiklmnprst}, that is all checking\n-options enabled with the exception of @option{-gnatyo}, @option{-gnatyI},\n-@option{-gnatyS}, @option{-gnatyLnnn},\n-@option{-gnatyd}, @option{-gnatyu}, and @option{-gnatyx}.\n+options enabled with the exception of @option{-gnatyB}, @option{-gnatyd},\n+@option{-gnatyI}, @option{-gnatyLnnn}, @option{-gnatyo}, @option{-gnatyO},\n+@option{-gnatyS}, @option{-gnatyu}, and @option{-gnatyx}.\n \n @ifclear vms\n @item -\n@@ -6691,8 +6713,8 @@ including style messages, as fatal errors.\n The switch\n @ifclear vms\n @option{-gnaty} on its own (that is not\n-followed by any letters or digits), then the effect is equivalent\n-to the use of @option{-gnatyy}, as described above, that is all\n+followed by any letters or digits) is equivalent\n+to the use of @option{-gnatyy} as described above, that is all\n built-in standard style check options are enabled.\n \n @end ifclear"}, {"sha": "1770b806736985e464dd9e95a6bc4382df106246", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d9e03cb09911ae858fa1522f49a06f4fd852879/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d9e03cb09911ae858fa1522f49a06f4fd852879/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=6d9e03cb09911ae858fa1522f49a06f4fd852879", "patch": "@@ -1201,6 +1201,12 @@ package body Sem_Ch13 is\n                   Set_Is_Delayed_Aspect (Aspect);\n                   Set_Has_Default_Aspect (Base_Type (Entity (Ent)));\n \n+                  if Is_Scalar_Type (E) then\n+                     Set_Default_Aspect_Value (Entity (Ent), Expr);\n+                  else\n+                     Set_Default_Aspect_Component_Value (Entity (Ent), Expr);\n+                  end if;\n+\n                when Aspect_Attach_Handler =>\n                   Aitem :=\n                     Make_Pragma (Loc,\n@@ -6024,6 +6030,17 @@ package body Sem_Ch13 is\n          if No (T) then\n             Check_Aspect_At_Freeze_Point (ASN);\n             return;\n+\n+         --  The default values attributes may be defined in the private part,\n+         --  and the analysis of the expression may take place when only the\n+         --  partial view is visible. The expression must be scalar, so use\n+         --  the full view to resolve.\n+\n+         elsif (A_Id = Aspect_Default_Value or else\n+                A_Id = Aspect_Default_Component_Value)\n+            and then Is_Private_Type (T)\n+         then\n+            Preanalyze_Spec_Expression (End_Decl_Expr, Full_View (T));\n          else\n             Preanalyze_Spec_Expression (End_Decl_Expr, T);\n          end if;"}]}