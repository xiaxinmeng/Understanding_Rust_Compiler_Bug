{"sha": "9ec469f504f4bc4c3cdfa4a3f9e164c26e4881af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWVjNDY5ZjUwNGY0YmM0YzNjZGZhNGEzZjllMTY0YzI2ZTQ4ODFhZg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-04-29T12:03:09Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-04-29T14:02:17Z"}, "message": "Add parallelism support to gcov for MinGW platforms\n\nIf you attempt a profiled bootstrap on the MinGW platforms with -jN, N > 1,\nit miserably fails because of profile mismatches all over the place, the\nreason being that gcov has no support for parallelism on these platforms.\n\nlibgcc/\n\t* libgcov.h: For the target, define GCOV_LOCKED_WITH_LOCKING\n\tif __MSVCRT__ and, for the host, define it if HOST_HAS_LK_LOCK.\n\t* libgcov-driver.c: Add directives if GCOV_LOCKED_WITH_LOCKING.\ngcc/\n\t* configure.ac: Check for the presence of sys/locking.h header and\n\tfor whether _LK_LOCK is supported by _locking.\n\t* configure: Regenerate.\n\t* config.in: Likewise.\n\t* gcov-io.h: Define GCOV_LOCKED_WITH_LOCKING if HOST_HAS_LK_LOCK.\n\t* gcov-io.c (gcov_open): Add support for GCOV_LOCKED_WITH_LOCKING.\n\t* system.h: Include <sys/locking.h> if HAVE_SYS_LOCKING_H.", "tree": {"sha": "97e4d0e08706a85c153da52ec785c7c1fb7523e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97e4d0e08706a85c153da52ec785c7c1fb7523e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ec469f504f4bc4c3cdfa4a3f9e164c26e4881af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ec469f504f4bc4c3cdfa4a3f9e164c26e4881af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ec469f504f4bc4c3cdfa4a3f9e164c26e4881af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ec469f504f4bc4c3cdfa4a3f9e164c26e4881af/comments", "author": null, "committer": null, "parents": [{"sha": "d03ca8a6148f55e119b8220a9c65147173b32065", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d03ca8a6148f55e119b8220a9c65147173b32065", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d03ca8a6148f55e119b8220a9c65147173b32065"}], "stats": {"total": 128, "additions": 124, "deletions": 4}, "files": [{"sha": "e54f59ce0c35d4e208b653a0390df1aded8e5464", "filename": "gcc/config.in", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ec469f504f4bc4c3cdfa4a3f9e164c26e4881af/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ec469f504f4bc4c3cdfa4a3f9e164c26e4881af/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=9ec469f504f4bc4c3cdfa4a3f9e164c26e4881af", "patch": "@@ -1919,6 +1919,12 @@\n #endif\n \n \n+/* Define to 1 if you have the <sys/locking.h> header file. */\n+#ifndef USED_FOR_TARGET\n+#undef HAVE_SYS_LOCKING_H\n+#endif\n+\n+\n /* Define to 1 if you have the <sys/mman.h> header file. */\n #ifndef USED_FOR_TARGET\n #undef HAVE_SYS_MMAN_H\n@@ -2092,6 +2098,12 @@\n #endif\n \n \n+/* Define if _LK_LOC supported by _locking. */\n+#ifndef USED_FOR_TARGET\n+#undef HOST_HAS_LK_LOCK\n+#endif\n+\n+\n /* Define if O_CLOEXEC supported by fcntl. */\n #ifndef USED_FOR_TARGET\n #undef HOST_HAS_O_CLOEXEC"}, {"sha": "d9c9cca9ebb23c05b8542eb1809e137e26abefc6", "filename": "gcc/configure", "status": "modified", "additions": 40, "deletions": 3, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ec469f504f4bc4c3cdfa4a3f9e164c26e4881af/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ec469f504f4bc4c3cdfa4a3f9e164c26e4881af/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=9ec469f504f4bc4c3cdfa4a3f9e164c26e4881af", "patch": "@@ -9075,7 +9075,7 @@ fi\n \n for ac_header in limits.h stddef.h string.h strings.h stdlib.h time.h iconv.h \\\n \t\t fcntl.h ftw.h unistd.h sys/file.h sys/time.h sys/mman.h \\\n-\t\t sys/resource.h sys/param.h sys/times.h sys/stat.h \\\n+\t\t sys/resource.h sys/param.h sys/times.h sys/stat.h sys/locking.h \\\n \t\t direct.h malloc.h langinfo.h ldfcn.h locale.h wchar.h\n do :\n   as_ac_Header=`$as_echo \"ac_cv_header_$ac_header\" | $as_tr_sh`\n@@ -12308,6 +12308,43 @@ $as_echo \"#define HAVE_AF_INET6 1\" >>confdefs.h\n \n fi\n \n+# Check if _LK_LOCK is supported by _locking\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for _LK_LOCK\" >&5\n+$as_echo_n \"checking for _LK_LOCK... \" >&6; }\n+if ${ac_cv_lk_lock+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+#include <io.h>\n+#include <sys/locking.h>\n+int\n+main ()\n+{\n+\n+  int fd;\n+  return _locking (fd, _LK_LOCK, 0);\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_cxx_try_compile \"$LINENO\"; then :\n+  ac_cv_lk_lock=yes\n+else\n+  ac_cv_lk_lock=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_lk_lock\" >&5\n+$as_echo \"$ac_cv_lk_lock\" >&6; }\n+if test $ac_cv_lk_lock = yes; then\n+\n+$as_echo \"#define HOST_HAS_LK_LOCK 1\" >>confdefs.h\n+\n+fi\n+\n # Restore CFLAGS, CXXFLAGS from before the gcc_AC_NEED_DECLARATIONS tests.\n CFLAGS=\"$saved_CFLAGS\"\n CXXFLAGS=\"$saved_CXXFLAGS\"\n@@ -19398,7 +19435,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 19401 \"configure\"\n+#line 19438 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -19504,7 +19541,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 19507 \"configure\"\n+#line 19544 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H"}, {"sha": "e9ba2af548a5c0891475ff851c79a8fa8ebf373f", "filename": "gcc/configure.ac", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ec469f504f4bc4c3cdfa4a3f9e164c26e4881af/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ec469f504f4bc4c3cdfa4a3f9e164c26e4881af/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=9ec469f504f4bc4c3cdfa4a3f9e164c26e4881af", "patch": "@@ -1257,7 +1257,7 @@ AC_HEADER_SYS_WAIT\n AC_HEADER_TIOCGWINSZ\n AC_CHECK_HEADERS(limits.h stddef.h string.h strings.h stdlib.h time.h iconv.h \\\n \t\t fcntl.h ftw.h unistd.h sys/file.h sys/time.h sys/mman.h \\\n-\t\t sys/resource.h sys/param.h sys/times.h sys/stat.h \\\n+\t\t sys/resource.h sys/param.h sys/times.h sys/stat.h sys/locking.h \\\n \t\t direct.h malloc.h langinfo.h ldfcn.h locale.h wchar.h)\n \n # Check for thread headers.\n@@ -1711,6 +1711,19 @@ if test $ac_cv_af_inet6 = yes; then\n   [Define if AF_INET6 supported.])\n fi\n \n+# Check if _LK_LOCK is supported by _locking\n+AC_CACHE_CHECK(for _LK_LOCK, ac_cv_lk_lock, [\n+AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n+#include <io.h>\n+#include <sys/locking.h>]], [[\n+  int fd;\n+  return _locking (fd, _LK_LOCK, 0);]])],\n+[ac_cv_lk_lock=yes],[ac_cv_lk_lock=no])])\n+if test $ac_cv_lk_lock = yes; then\n+  AC_DEFINE(HOST_HAS_LK_LOCK, 1,\n+  [Define if _LK_LOC supported by _locking.])\n+fi\n+\n # Restore CFLAGS, CXXFLAGS from before the gcc_AC_NEED_DECLARATIONS tests.\n CFLAGS=\"$saved_CFLAGS\"\n CXXFLAGS=\"$saved_CXXFLAGS\""}, {"sha": "21ca3949c41f714e48b8c07e6f4b858794236fe7", "filename": "gcc/gcov-io.c", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ec469f504f4bc4c3cdfa4a3f9e164c26e4881af/gcc%2Fgcov-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ec469f504f4bc4c3cdfa4a3f9e164c26e4881af/gcc%2Fgcov-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov-io.c?ref=9ec469f504f4bc4c3cdfa4a3f9e164c26e4881af", "patch": "@@ -137,6 +137,8 @@ gcov_open (const char *name, int mode)\n   s_flock.l_start = 0;\n   s_flock.l_len = 0; /* Until EOF.  */\n   s_flock.l_pid = getpid ();\n+#elif GCOV_LOCKED_WITH_LOCKING\n+  int fd;\n #endif\n \n   gcov_nonruntime_assert (!gcov_var.file);\n@@ -170,6 +172,34 @@ gcov_open (const char *name, int mode)\n \n   gcov_var.file = fdopen (fd, (mode > 0) ? \"rb\" : \"r+b\");\n \n+  if (!gcov_var.file)\n+    {\n+      close (fd);\n+      return 0;\n+    }\n+#elif GCOV_LOCKED_WITH_LOCKING\n+  if (mode > 0)\n+    {\n+      /* pass mode (ignored) for compatibility */\n+      fd = open (name, O_RDONLY | O_BINARY, S_IRUSR | S_IWUSR);\n+    }\n+  else\n+     {\n+       /* Truncate if force new mode.  */\n+       fd = open (name, O_RDWR | O_BINARY | O_CREAT | (mode < 0 ? O_TRUNC : 0),\n+\t\t  0666);\n+    }\n+  if (fd < 0)\n+    return 0;\n+\n+  if (_locking (fd, _LK_LOCK, LONG_MAX) < 0)\n+    {\n+      close (fd);\n+      return 0;\n+    }\n+\n+  gcov_var.file = fdopen (fd, (mode > 0) ? \"rb\" : \"r+b\");\n+\n   if (!gcov_var.file)\n     {\n       close (fd);"}, {"sha": "c9958f450d33b9be9c2f5ae426e27c5311d9ebb2", "filename": "gcc/gcov-io.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ec469f504f4bc4c3cdfa4a3f9e164c26e4881af/gcc%2Fgcov-io.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ec469f504f4bc4c3cdfa4a3f9e164c26e4881af/gcc%2Fgcov-io.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov-io.h?ref=9ec469f504f4bc4c3cdfa4a3f9e164c26e4881af", "patch": "@@ -202,6 +202,12 @@ typedef uint64_t gcov_type_unsigned;\n #define GCOV_LOCKED 0\n #endif\n \n+#if defined (HOST_HAS_LK_LOCK)\n+#define GCOV_LOCKED_WITH_LOCKING 1\n+#else\n+#define GCOV_LOCKED_WITH_LOCKING 0\n+#endif\n+\n #define ATTRIBUTE_HIDDEN\n \n #endif /* !IN_LIBGCOV */"}, {"sha": "6416c4e033e927fb64a742516914d3aa70372390", "filename": "gcc/system.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ec469f504f4bc4c3cdfa4a3f9e164c26e4881af/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ec469f504f4bc4c3cdfa4a3f9e164c26e4881af/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=9ec469f504f4bc4c3cdfa4a3f9e164c26e4881af", "patch": "@@ -360,6 +360,10 @@ extern int errno;\n # endif\n #endif\n \n+#ifdef HAVE_SYS_LOCKING_H\n+# include <sys/locking.h>\n+#endif\n+\n #ifndef SEEK_SET\n # define SEEK_SET 0\n # define SEEK_CUR 1"}, {"sha": "faa2df447152917511af35768fe438b6a2185ff3", "filename": "libgcc/libgcov-driver.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ec469f504f4bc4c3cdfa4a3f9e164c26e4881af/libgcc%2Flibgcov-driver.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ec469f504f4bc4c3cdfa4a3f9e164c26e4881af/libgcc%2Flibgcov-driver.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Flibgcov-driver.c?ref=9ec469f504f4bc4c3cdfa4a3f9e164c26e4881af", "patch": "@@ -36,10 +36,15 @@ void __gcov_init (struct gcov_info *p __attribute__ ((unused))) {}\n #else /* inhibit_libc */\n \n #include <string.h>\n+\n #if GCOV_LOCKED\n #include <fcntl.h>\n #include <errno.h>\n #include <sys/stat.h>\n+#elif GCOV_LOCKED_WITH_LOCKING\n+#include <fcntl.h>\n+#include <sys/locking.h>\n+#include <sys/stat.h>\n #endif\n \n #if HAVE_SYS_MMAN_H"}, {"sha": "8d323db05386681b15cb75b3eaf610e161dc8659", "filename": "libgcc/libgcov.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ec469f504f4bc4c3cdfa4a3f9e164c26e4881af/libgcc%2Flibgcov.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ec469f504f4bc4c3cdfa4a3f9e164c26e4881af/libgcc%2Flibgcov.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Flibgcov.h?ref=9ec469f504f4bc4c3cdfa4a3f9e164c26e4881af", "patch": "@@ -89,6 +89,12 @@ typedef unsigned gcov_type_unsigned __attribute__ ((mode (QI)));\n #define GCOV_LOCKED 0\n #endif\n \n+#if defined (__MSVCRT__)\n+#define GCOV_LOCKED_WITH_LOCKING 1\n+#else\n+#define GCOV_LOCKED_WITH_LOCKING 0\n+#endif\n+\n #ifndef GCOV_SUPPORTS_ATOMIC\n /* Detect whether target can support atomic update of profilers.  */\n #if __SIZEOF_LONG_LONG__ == 4 && __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4\n@@ -133,12 +139,19 @@ typedef unsigned gcov_type_unsigned __attribute__ ((mode (QI)));\n typedef unsigned gcov_unsigned_t;\n typedef unsigned gcov_position_t;\n /* gcov_type is typedef'd elsewhere for the compiler */\n+\n #if defined (HOST_HAS_F_SETLKW)\n #define GCOV_LOCKED 1\n #else\n #define GCOV_LOCKED 0\n #endif\n \n+#if defined (HOST_HAS_LK_LOCK)\n+#define GCOV_LOCKED_WITH_LOCKING 1\n+#else\n+#define GCOV_LOCKED_WITH_LOCKING 0\n+#endif\n+\n /* Some Macros specific to gcov-tool.  */\n \n #define L_gcov 1"}]}