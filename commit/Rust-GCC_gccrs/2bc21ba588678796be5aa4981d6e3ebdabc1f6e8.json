{"sha": "2bc21ba588678796be5aa4981d6e3ebdabc1f6e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmJjMjFiYTU4ODY3ODc5NmJlNWFhNDk4MWQ2ZTNlYmRhYmMxZjZlOA==", "commit": {"author": {"name": "George Helffrich", "email": "george@geo.titech.ac.jp", "date": "2001-09-22T10:35:05Z"}, "committer": {"name": "Toon Moene", "email": "toon@gcc.gnu.org", "date": "2001-09-22T10:35:05Z"}, "message": "com.c (ffecom_subscript_check_): Loosen subscript checking rules for character strings...\n\nThu Sep 20 15:05:20 JST 2001  George Helffrich  <george@geo.titech.ac.jp>\n\n\t* com.c (ffecom_subscript_check_): Loosen subscript checking rules\n\tfor character strings, to permit substring expressions like\n\tstring(1:0).\n\t* news.texi: Document this as a new feature.\n\nFrom-SVN: r45747", "tree": {"sha": "39422eeb1b04b089046a32b7a9973d93db9c2432", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/39422eeb1b04b089046a32b7a9973d93db9c2432"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2bc21ba588678796be5aa4981d6e3ebdabc1f6e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bc21ba588678796be5aa4981d6e3ebdabc1f6e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bc21ba588678796be5aa4981d6e3ebdabc1f6e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bc21ba588678796be5aa4981d6e3ebdabc1f6e8/comments", "author": null, "committer": null, "parents": [{"sha": "b8d323b1a00b6658c4f31ebed3788aff7329aae3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8d323b1a00b6658c4f31ebed3788aff7329aae3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8d323b1a00b6658c4f31ebed3788aff7329aae3"}], "stats": {"total": 65, "additions": 55, "deletions": 10}, "files": [{"sha": "df0595c84401d23b5e34dcb14d81f29994e4bbd2", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bc21ba588678796be5aa4981d6e3ebdabc1f6e8/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bc21ba588678796be5aa4981d6e3ebdabc1f6e8/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=2bc21ba588678796be5aa4981d6e3ebdabc1f6e8", "patch": "@@ -1,3 +1,10 @@\n+Thu Sep 20 15:05:20 JST 2001  George Helffrich  <george@geo.titech.ac.jp>\n+\n+\t* com.c (ffecom_subscript_check_): Loosen subscript checking rules\n+\tfor character strings, to permit substring expressions like\n+\tstring(1:0).\n+\t* news.texi: Document this as a new feature.\n+ \n Thu Sep 13 10:33:27 2001  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* bad.c (ffebad_finish): Const-ification and/or static-ization."}, {"sha": "8d9ad8c217a2c79e1e6ce5ce02014f5f05ddcddf", "filename": "gcc/f/com.c", "status": "modified", "additions": 39, "deletions": 9, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bc21ba588678796be5aa4981d6e3ebdabc1f6e8/gcc%2Ff%2Fcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bc21ba588678796be5aa4981d6e3ebdabc1f6e8/gcc%2Ff%2Fcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.c?ref=2bc21ba588678796be5aa4981d6e3ebdabc1f6e8", "patch": "@@ -671,16 +671,46 @@ ffecom_subscript_check_ (tree array, tree element, int dim, int total_dims,\n     }\n \n   element = ffecom_save_tree (element);\n-  cond = ffecom_2 (LE_EXPR, integer_type_node,\n-\t\t   low,\n-\t\t   element);\n-  if (high)\n+  if (total_dims == 0)\n     {\n-      cond = ffecom_2 (TRUTH_ANDIF_EXPR, integer_type_node,\n-\t\t       cond,\n-\t\t       ffecom_2 (LE_EXPR, integer_type_node,\n-\t\t\t\t element,\n-\t\t\t\t high));\n+      /* Special handling for substring range checks.  Fortran allows the\n+         end subscript < begin subscript, which means that expressions like\n+       string(1:0) are valid (and yield a null string).  In view of this,\n+       enforce two simpler conditions:\n+          1) element<=high for end-substring;\n+          2) element>=low for start-substring.\n+       Run-time character movement will enforce remaining conditions.\n+\n+       More complicated checks would be better, but present structure only\n+       provides one index element at a time, so it is not possible to\n+       enforce a check of both i and j in string(i:j).  If it were, the\n+       complete set of rules would read,\n+         if ( ((j<i) && ((low<=i<=high) || (low<=j<=high))) ||\n+              ((low<=i<=high) && (low<=j<=high)) )\n+           ok ;\n+         else\n+           range error ;\n+      */\n+      if (dim)\n+        cond = ffecom_2 (LE_EXPR, integer_type_node, element, high);\n+      else\n+        cond = ffecom_2 (LE_EXPR, integer_type_node, low, element);\n+    }\n+  else\n+    {\n+      /* Array reference substring range checking.  */\n+        \n+      cond = ffecom_2 (LE_EXPR, integer_type_node,\n+                     low,\n+                     element);\n+      if (high)\n+        {\n+          cond = ffecom_2 (TRUTH_ANDIF_EXPR, integer_type_node,\n+                         cond,\n+                         ffecom_2 (LE_EXPR, integer_type_node,\n+                                   element,\n+                                   high));\n+        }\n     }\n \n   {"}, {"sha": "82a94b3a9946300f3ca2021130ff02e3eae475b2", "filename": "gcc/f/news.texi", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bc21ba588678796be5aa4981d6e3ebdabc1f6e8/gcc%2Ff%2Fnews.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bc21ba588678796be5aa4981d6e3ebdabc1f6e8/gcc%2Ff%2Fnews.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fnews.texi?ref=2bc21ba588678796be5aa4981d6e3ebdabc1f6e8", "patch": "@@ -156,7 +156,15 @@ The following information was last updated on @value{last-update-news}:\n @itemize @bullet\n @ifclear USERVISONLY\n @item\n-[ Nothing yet ]\n+George Helffrich (@email{george@@geo.titech.ac.jp}) implemented a change\n+in substring index checking (when specifying @code{-fbounds-check})\n+that permits the use of zero length substrings of the form\n+@code{string(1:0)}.\n+\n+@item\n+Based on code developed by Pedro Vazquez (@email{vazquez@@penelope.iqm.unicamp.br}),\n+the @code{libf2c} library is now able to read and write files larger than\n+2 Gbyte on 32-bit target machines, if the operating system supports this.\n @end ifclear\n @end itemize\n "}]}