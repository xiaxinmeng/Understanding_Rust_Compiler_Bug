{"sha": "74d1f65102a4bfaf9df7b2f1c9145869c7c8cce4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzRkMWY2NTEwMmE0YmZhZjlkZjdiMmYxYzkxNDU4NjljN2M4Y2NlNA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-03-07T21:32:21Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-03-07T21:32:21Z"}, "message": "re PR target/80003 (i386.c: %s placeholder is no semantic grammar unit)\n\n\tPR target/80003\n\t* config/i386/i386.c (ix86_set_func_type): Make sure diagnostics\n\tdoesn't start with a capital letter and doesn't end with a dot.\n\t(ix86_function_arg_boundary): Make sure diagnostics doesn't start\n\twith a capital letter.\n\t(ix86_mangle_function_version_assembler_name): Likewise.\n\t(ix86_generate_version_dispatcher_body): Likewise.\n\t(fold_builtin_cpu): Likewise.\n\t(get_builtin_code_for_version): Likewise.  Remove extraneous space.\n\t(ix86_handle_interrupt_attribute): Make the diagnostics easier for\n\ttranslators, wrap full type name in %qs.\n\n\t* gcc.target/i386/pr68657.c: Adjust expected diagnostics wording.\n\t* gcc.target/i386/interrupt-6.c: Likewise.\n\t* g++.target/i386/pr57362.C: Adjust capitalization in dg-prune-output.\n\nFrom-SVN: r269471", "tree": {"sha": "69b79e6d399c103c8d95d1fc4c152d72ee04f01d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/69b79e6d399c103c8d95d1fc4c152d72ee04f01d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74d1f65102a4bfaf9df7b2f1c9145869c7c8cce4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74d1f65102a4bfaf9df7b2f1c9145869c7c8cce4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74d1f65102a4bfaf9df7b2f1c9145869c7c8cce4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74d1f65102a4bfaf9df7b2f1c9145869c7c8cce4/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c04d666671b91e34d708df69e1202c190f6a5640", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c04d666671b91e34d708df69e1202c190f6a5640", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c04d666671b91e34d708df69e1202c190f6a5640"}], "stats": {"total": 58, "additions": 39, "deletions": 19}, "files": [{"sha": "e7a7d58a34b923c83eb8afedd8e1ac91351d5155", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d1f65102a4bfaf9df7b2f1c9145869c7c8cce4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d1f65102a4bfaf9df7b2f1c9145869c7c8cce4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=74d1f65102a4bfaf9df7b2f1c9145869c7c8cce4", "patch": "@@ -1,5 +1,17 @@\n 2019-03-07  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/80003\n+\t* config/i386/i386.c (ix86_set_func_type): Make sure diagnostics\n+\tdoesn't start with a capital letter and doesn't end with a dot.\n+\t(ix86_function_arg_boundary): Make sure diagnostics doesn't start\n+\twith a capital letter.\n+\t(ix86_mangle_function_version_assembler_name): Likewise.\n+\t(ix86_generate_version_dispatcher_body): Likewise.\n+\t(fold_builtin_cpu): Likewise.\n+\t(get_builtin_code_for_version): Likewise.  Remove extraneous space.\n+\t(ix86_handle_interrupt_attribute): Make the diagnostics easier for\n+\ttranslators, wrap full type name in %qs.\n+\n \tPR translation/79999\n \t* gimplify.c (gimplify_omp_ordered): Reword diagnostics to talk about\n \tdepend clause with source (or sink) modifier."}, {"sha": "2d6a993238b56352badf7f58b985509817a1adb8", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d1f65102a4bfaf9df7b2f1c9145869c7c8cce4/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d1f65102a4bfaf9df7b2f1c9145869c7c8cce4/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=74d1f65102a4bfaf9df7b2f1c9145869c7c8cce4", "patch": "@@ -5800,8 +5800,8 @@ ix86_set_func_type (tree fndecl)\n \n \t  /* Only dwarf2out.c can handle -WORD(AP) as a pointer argument.  */\n \t  if (write_symbols != NO_DEBUG && write_symbols != DWARF2_DEBUG)\n-\t    sorry (\"Only DWARF debug format is supported for interrupt \"\n-\t\t   \"service routine.\");\n+\t    sorry (\"only DWARF debug format is supported for interrupt \"\n+\t\t   \"service routine\");\n \t}\n       else\n \t{\n@@ -9069,7 +9069,7 @@ ix86_function_arg_boundary (machine_mode mode, const_tree type)\n \t{\n \t  warned = true;\n \t  inform (input_location,\n-\t\t  \"The ABI for passing parameters with %d-byte\"\n+\t\t  \"the ABI for passing parameters with %d-byte\"\n \t\t  \" alignment has changed in GCC 4.6\",\n \t\t  align / BITS_PER_UNIT);\n \t}\n@@ -32116,7 +32116,7 @@ get_builtin_code_for_version (tree decl, tree *predicate_list)\n       if (predicate_list && arg_str == NULL)\n \t{\n \t  error_at (DECL_SOURCE_LOCATION (decl),\n-\t    \t\"No dispatcher found for the versioning attributes\");\n+\t\t    \"no dispatcher found for the versioning attributes\");\n \t  return 0;\n \t}\n     \n@@ -32166,7 +32166,7 @@ get_builtin_code_for_version (tree decl, tree *predicate_list)\n       if (predicate_list && i == NUM_FEATURES)\n \t{\n \t  error_at (DECL_SOURCE_LOCATION (decl),\n-\t\t    \"No dispatcher found for %s\", token);\n+\t\t    \"no dispatcher found for %s\", token);\n \t  return 0;\n \t}\n       token = strtok (NULL, \",\");\n@@ -32176,7 +32176,7 @@ get_builtin_code_for_version (tree decl, tree *predicate_list)\n   if (predicate_list && predicate_chain == NULL_TREE)\n     {\n       error_at (DECL_SOURCE_LOCATION (decl),\n-\t        \"No dispatcher found for the versioning attributes : %s\",\n+\t        \"no dispatcher found for the versioning attributes: %s\",\n \t        attrs_str);\n       return 0;\n     }\n@@ -32338,12 +32338,12 @@ ix86_mangle_function_version_assembler_name (tree decl, tree id)\n       && lookup_attribute (\"gnu_inline\",\n \t\t\t   DECL_ATTRIBUTES (decl)))\n     error_at (DECL_SOURCE_LOCATION (decl),\n-\t      \"Function versions cannot be marked as gnu_inline,\"\n+\t      \"function versions cannot be marked as gnu_inline,\"\n \t      \" bodies have to be generated\");\n \n   if (DECL_VIRTUAL_P (decl)\n       || DECL_VINDEX (decl))\n-    sorry (\"Virtual function multiversioning not supported\");\n+    sorry (\"virtual function multiversioning not supported\");\n \n   version_attr = lookup_attribute (\"target\", DECL_ATTRIBUTES (decl));\n \n@@ -32619,7 +32619,7 @@ ix86_generate_version_dispatcher_body (void *node_p)\n \t virtual methods in base classes but are not explicitly marked as\n \t virtual.  */\n       if (DECL_VINDEX (versn->decl))\n-\tsorry (\"Virtual function multiversioning not supported\");\n+\tsorry (\"virtual function multiversioning not supported\");\n \n       fn_ver_vec.safe_push (versn->decl);\n     }\n@@ -32898,7 +32898,7 @@ fold_builtin_cpu (tree fndecl, tree *args)\n \t STRING_CST.   */\n       if (!EXPR_P (param_string_cst))\n  \t{\n-\t  error (\"Parameter to builtin must be a string constant or literal\");\n+\t  error (\"parameter to builtin must be a string constant or literal\");\n \t  return integer_zero_node;\n \t}\n       param_string_cst = TREE_OPERAND (EXPR_CHECK (param_string_cst), 0);\n@@ -32923,7 +32923,7 @@ fold_builtin_cpu (tree fndecl, tree *args)\n \n       if (i == NUM_ARCH_NAMES)\n \t{\n-\t  error (\"Parameter to builtin not valid: %s\",\n+\t  error (\"parameter to builtin not valid: %s\",\n \t         TREE_STRING_POINTER (param_string_cst));\n \t  return integer_zero_node;\n \t}\n@@ -32973,7 +32973,7 @@ fold_builtin_cpu (tree fndecl, tree *args)\n \n       if (i == NUM_ISA_NAMES)\n \t{\n-\t  error (\"Parameter to builtin not valid: %s\",\n+\t  error (\"parameter to builtin not valid: %s\",\n \t       \t TREE_STRING_POINTER (param_string_cst));\n \t  return integer_zero_node;\n \t}\n@@ -41417,11 +41417,12 @@ ix86_handle_interrupt_attribute (tree *node, tree, tree, int, bool *)\n \t{\n \t  if (TREE_CODE (TREE_VALUE (current_arg_type)) != INTEGER_TYPE\n \t      || TYPE_MODE (TREE_VALUE (current_arg_type)) != word_mode)\n-\t    error (\"interrupt service routine should have unsigned %s\"\n-\t\t   \"int as the second argument\",\n+\t    error (\"interrupt service routine should have %qs \"\n+\t\t   \"as the second argument\",\n \t\t   TARGET_64BIT\n-\t\t   ? (TARGET_X32 ? \"long long \" : \"long \")\n-\t\t   : \"\");\n+\t\t   ? (TARGET_X32 ? \"unsigned long long int\"\n+\t\t\t\t : \"unsigned long int\")\n+\t\t   : \"unsigned int\");\n \t}\n       nargs++;\n       current_arg_type = TREE_CHAIN (current_arg_type);"}, {"sha": "46920d65169431c05e524d3d4e32f8bb0c4d5dc4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d1f65102a4bfaf9df7b2f1c9145869c7c8cce4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d1f65102a4bfaf9df7b2f1c9145869c7c8cce4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=74d1f65102a4bfaf9df7b2f1c9145869c7c8cce4", "patch": "@@ -1,3 +1,10 @@\n+2019-03-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/80003\n+\t* gcc.target/i386/pr68657.c: Adjust expected diagnostics wording.\n+\t* gcc.target/i386/interrupt-6.c: Likewise.\n+\t* g++.target/i386/pr57362.C: Adjust capitalization in dg-prune-output.\n+\n 2019-03-07  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/84518"}, {"sha": "5e612130357aa2c874f7b68f7c75db88bda3b662", "filename": "gcc/testsuite/g++.target/i386/pr57362.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d1f65102a4bfaf9df7b2f1c9145869c7c8cce4/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr57362.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d1f65102a4bfaf9df7b2f1c9145869c7c8cce4/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr57362.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr57362.C?ref=74d1f65102a4bfaf9df7b2f1c9145869c7c8cce4", "patch": "@@ -199,4 +199,4 @@ int foo(void) { return 1; }\n /* { dg-prune-output \"attribute.* is unknown\" } */\n /* { dg-prune-output \"missing 'target' attribute*\" } */\n /* { dg-prune-output \"redefinition of 'int foo\" } */\n-/* { dg-prune-output \"No dispatcher found for\" } */\n+/* { dg-prune-output \"no dispatcher found for\" } */"}, {"sha": "bcbcc97c641366f84fa2a3fadf0ed0b5d0ecd5cd", "filename": "gcc/testsuite/gcc.target/i386/interrupt-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d1f65102a4bfaf9df7b2f1c9145869c7c8cce4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Finterrupt-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d1f65102a4bfaf9df7b2f1c9145869c7c8cce4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Finterrupt-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Finterrupt-6.c?ref=74d1f65102a4bfaf9df7b2f1c9145869c7c8cce4", "patch": "@@ -8,7 +8,7 @@ extern int error;\n __attribute__((interrupt))\n void\n fn1 (void *p, short error_code)\n-{ /* { dg-error \"interrupt service routine should have unsigned \\(long long |long |\\)int as the second argument\" } */\n+{ /* { dg-error \"interrupt service routine should have 'unsigned \\(long long |long |\\)int' as the second argument\" } */\n }\n \n __attribute__((interrupt))"}, {"sha": "3480242760f0fe0d56f9b83758b555322fa44fb3", "filename": "gcc/testsuite/gcc.target/i386/pr68657.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d1f65102a4bfaf9df7b2f1c9145869c7c8cce4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr68657.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d1f65102a4bfaf9df7b2f1c9145869c7c8cce4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr68657.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr68657.c?ref=74d1f65102a4bfaf9df7b2f1c9145869c7c8cce4", "patch": "@@ -4,7 +4,7 @@\n typedef int V __attribute__((vector_size (64)));\n \n void foo (V x, V *y) {\t/* { dg-error \"AVX512F vector argument without AVX512F enabled\" } */\n-  /* { dg-message \"The ABI for passing parameters with 64-byte alignment has changed\" \"\" { target *-*-* } .-1 } */\n+  /* { dg-message \"the ABI for passing parameters with 64-byte alignment has changed\" \"\" { target *-*-* } .-1 } */\n   *y = x;\n }\n "}]}