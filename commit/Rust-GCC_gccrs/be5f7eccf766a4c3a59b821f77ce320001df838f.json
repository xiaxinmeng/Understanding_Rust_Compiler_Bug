{"sha": "be5f7eccf766a4c3a59b821f77ce320001df838f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmU1ZjdlY2NmNzY2YTRjM2E1OWI4MjFmNzdjZTMyMDAwMWRmODM4Zg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-11-08T09:06:50Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-11-08T09:06:50Z"}, "message": "Handle POLY_INT_CSTs in declare_return_value\n\nSVE allows variable-length vectors to be returned by value,\nwhich tripped the assert in declare_return_variable.\n\n2019-11-08  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* tree-inline.c (declare_return_variable): Check for poly_int_tree_p\n\tinstead of INTEGER_CST.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/acle/general/inline_1.c: New test.\n\nFrom-SVN: r277956", "tree": {"sha": "ee509b6f5eec1502b7562e6c72ec021a316b84fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee509b6f5eec1502b7562e6c72ec021a316b84fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be5f7eccf766a4c3a59b821f77ce320001df838f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be5f7eccf766a4c3a59b821f77ce320001df838f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be5f7eccf766a4c3a59b821f77ce320001df838f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be5f7eccf766a4c3a59b821f77ce320001df838f/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f1e1ed3314b7c6308f64cbbcf6d1916e239c8e35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1e1ed3314b7c6308f64cbbcf6d1916e239c8e35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1e1ed3314b7c6308f64cbbcf6d1916e239c8e35"}], "stats": {"total": 19, "additions": 17, "deletions": 2}, "files": [{"sha": "b50456e74fc2da3032381fc7a75f64dee6127189", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be5f7eccf766a4c3a59b821f77ce320001df838f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be5f7eccf766a4c3a59b821f77ce320001df838f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=be5f7eccf766a4c3a59b821f77ce320001df838f", "patch": "@@ -1,3 +1,8 @@\n+2019-11-08  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-inline.c (declare_return_variable): Check for poly_int_tree_p\n+\tinstead of INTEGER_CST.\n+\n 2019-11-08  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/92324"}, {"sha": "9d5702b1c27fc0aa0d0ada50bece85e79d18d5d7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be5f7eccf766a4c3a59b821f77ce320001df838f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be5f7eccf766a4c3a59b821f77ce320001df838f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=be5f7eccf766a4c3a59b821f77ce320001df838f", "patch": "@@ -1,3 +1,7 @@\n+2019-11-08  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/sve/acle/general/inline_1.c: New test.\n+\n 2019-11-08  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/92324"}, {"sha": "f736ac3f0821aed96ad03d5e6d13e4762fc5937b", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general/inline_1.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be5f7eccf766a4c3a59b821f77ce320001df838f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral%2Finline_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be5f7eccf766a4c3a59b821f77ce320001df838f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral%2Finline_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral%2Finline_1.c?ref=be5f7eccf766a4c3a59b821f77ce320001df838f", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-options \"-O2\" } */\n+\n+#pragma GCC aarch64 \"arm_sve.h\"\n+\n+static inline svint32_t foo () { return svdup_s32 (32); }\n+svint32_t bar () { return svadd_x (svptrue_b8 (), foo (), 1); }"}, {"sha": "9d0acd97f7729c68adbbbfeb6cced8a7a0d19866", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be5f7eccf766a4c3a59b821f77ce320001df838f/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be5f7eccf766a4c3a59b821f77ce320001df838f/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=be5f7eccf766a4c3a59b821f77ce320001df838f", "patch": "@@ -3654,7 +3654,7 @@ declare_return_variable (copy_body_data *id, tree return_slot, tree modify_dest,\n       /* ??? If we're assigning to a variable sized type, then we must\n \t reuse the destination variable, because we've no good way to\n \t create variable sized temporaries at this point.  */\n-      else if (TREE_CODE (TYPE_SIZE_UNIT (caller_type)) != INTEGER_CST)\n+      else if (!poly_int_tree_p (TYPE_SIZE_UNIT (caller_type)))\n \tuse_it = true;\n \n       /* If the callee cannot possibly modify MODIFY_DEST, then we can\n@@ -3689,7 +3689,7 @@ declare_return_variable (copy_body_data *id, tree return_slot, tree modify_dest,\n \t}\n     }\n \n-  gcc_assert (TREE_CODE (TYPE_SIZE_UNIT (callee_type)) == INTEGER_CST);\n+  gcc_assert (poly_int_tree_p (TYPE_SIZE_UNIT (callee_type)));\n \n   var = copy_result_decl_to_var (result, id);\n   DECL_SEEN_IN_BIND_EXPR_P (var) = 1;"}]}