{"sha": "7ffbc74c8c202a16a5e987134f03c2359c531f0e", "node_id": "C_kwDOANBUbNoAKDdmZmJjNzRjOGMyMDJhMTZhNWU5ODcxMzRmMDNjMjM1OWM1MzFmMGU", "commit": {"author": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2023-03-16T21:07:18Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2023-03-17T03:49:34Z"}, "message": "Docs: Fix formatting issues in BPF built-ins documentation.\n\ngcc/ChangeLog:\n\t* doc/extend.texi (BPF Built-in Functions): Fix numerous markup\n\tissues.  Add more line breaks to example so it doesn't overflow\n\tthe margins.", "tree": {"sha": "0d7cb8179cab9c67b7b235bdf3eb3419db89f0ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0d7cb8179cab9c67b7b235bdf3eb3419db89f0ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ffbc74c8c202a16a5e987134f03c2359c531f0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ffbc74c8c202a16a5e987134f03c2359c531f0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ffbc74c8c202a16a5e987134f03c2359c531f0e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ffbc74c8c202a16a5e987134f03c2359c531f0e/comments", "author": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ace81b61183b055a7951e8599512ef04a51768e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ace81b61183b055a7951e8599512ef04a51768e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ace81b61183b055a7951e8599512ef04a51768e"}], "stats": {"total": 60, "additions": 32, "deletions": 28}, "files": [{"sha": "8ecd9611201a2f1c1de3ad04acc3f9c9f323282b", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 32, "deletions": 28, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ffbc74c8c202a16a5e987134f03c2359c531f0e/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ffbc74c8c202a16a5e987134f03c2359c531f0e/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=7ffbc74c8c202a16a5e987134f03c2359c531f0e", "patch": "@@ -15715,39 +15715,39 @@ void __builtin_bfin_ssync (void);\n \n The following built-in functions are available for eBPF targets.\n \n-@deftypefn {Built-in Function} unsigned long long __builtin_bpf_load_byte (unsigned long long @var{offset})\n+@deftypefn {Built-in Function} {unsigned long long} __builtin_bpf_load_byte (unsigned long long @var{offset})\n Load a byte from the @code{struct sk_buff} packet data pointed by the register @code{%r6} and return it.\n @end deftypefn\n \n-@deftypefn {Built-in Function} unsigned long long __builtin_bpf_load_half (unsigned long long @var{offset})\n-Load 16-bits from the @code{struct sk_buff} packet data pointed by the register @code{%r6} and return it.\n+@deftypefn {Built-in Function} {unsigned long long} __builtin_bpf_load_half (unsigned long long @var{offset})\n+Load 16 bits from the @code{struct sk_buff} packet data pointed by the register @code{%r6} and return it.\n @end deftypefn\n \n-@deftypefn {Built-in Function} unsigned long long __builtin_bpf_load_word (unsigned long long @var{offset})\n-Load 32-bits from the @code{struct sk_buff} packet data pointed by the register @code{%r6} and return it.\n+@deftypefn {Built-in Function} {unsigned long long} __builtin_bpf_load_word (unsigned long long @var{offset})\n+Load 32 bits from the @code{struct sk_buff} packet data pointed by the register @code{%r6} and return it.\n @end deftypefn\n \n-@deftypefn {Built-in Function} void * __builtin_preserve_access_index (@var{expr})\n+@deftypefn {Built-in Function} {void *} __builtin_preserve_access_index (@var{expr})\n BPF Compile Once-Run Everywhere (CO-RE) support. Instruct GCC to generate CO-RE relocation records for any accesses to aggregate data structures (struct, union, array types) in @var{expr}. This builtin is otherwise transparent, the return value is whatever @var{expr} evaluates to. It is also overloaded: @var{expr} may be of any type (not necessarily a pointer), the return type is the same. Has no effect if @code{-mco-re} is not in effect (either specified or implied).\n @end deftypefn\n \n-@deftypefn {Built-in Function} unsigned int __builtin_preserve_field_info (@var{expr}, unsigned int @var{kind})\n+@deftypefn {Built-in Function} {unsigned int} __builtin_preserve_field_info (@var{expr}, unsigned int @var{kind})\n BPF Compile Once-Run Everywhere (CO-RE) support. This builtin is used to\n extract information to aid in struct/union relocations.  @var{expr} is\n an access to a field of a struct or union. Depending on @var{kind}, different\n information is returned to the program. A CO-RE relocation for the access in\n @var{expr} with kind @var{kind} is recorded if @code{-mco-re} is in effect.\n \n The following values are supported for @var{kind}:\n-@table @var\n+@table @code\n @item FIELD_BYTE_OFFSET = 0\n The returned value is the offset, in bytes, of the field from the\n-beginning of the containing structure. For bitfields, the byte offset\n+beginning of the containing structure. For bit-fields, this is the byte offset\n of the containing word.\n \n @item FIELD_BYTE_SIZE = 1\n-The returned value is the size, in bytes, of the field. For bitfields,\n-the size in bytes of the containing word.\n+The returned value is the size, in bytes, of the field. For bit-fields,\n+this is the size in bytes of the containing word.\n \n @item FIELD_EXISTENCE = 2\n The returned value is 1 if the field exists, 0 otherwise. Always 1 at\n@@ -15759,25 +15759,26 @@ The returned value is 1 if the field is signed, 0 otherwise.\n @item FIELD_LSHIFT_U64 = 4\n @itemx FIELD_RSHIFT_U64 = 5\n The returned value is the number of bits of left- or right-shifting\n-respectively needed in order to recover the original value of the field,\n-after it has been loaded by a read of FIELD_BYTE_SIZE bytes into an\n-unsigned 64-bit value. Primarily useful for reading bitfield values\n-from structures which may change between kernel versions.\n+(respectively) needed in order to recover the original value of the field,\n+after it has been loaded by a read of @code{FIELD_BYTE_SIZE} bytes into an\n+unsigned 64-bit value. Primarily useful for reading bit-field values\n+from structures that may change between kernel versions.\n \n @end table\n \n Note that the return value is a constant which is known at\n-compile-time. If the field has a variable offset then\n-FIELD_BYTE_OFFSET, FIELD_LSHIFT_U64 and FIELD_RSHIFT_U64 are not\n-supported. Similarly, if the field has a variable size then\n-FIELD_BYTE_SIZE, FIELD_LSHIFT_U64 and FIELD_RSHIFT_U64 are not\n-supported.\n-\n-For example, __builtin_preserve_field_info can be used to reliably\n-extract bitfield values from a structure which may change between\n+compile time. If the field has a variable offset then\n+@code{FIELD_BYTE_OFFSET}, @code{FIELD_LSHIFT_U64},\n+and @code{FIELD_RSHIFT_U64} are not supported.\n+Similarly, if the field has a variable size then\n+@code{FIELD_BYTE_SIZE}, @code{FIELD_LSHIFT_U64},\n+and @code{FIELD_RSHIFT_U64} are not supported.\n+\n+For example, @code{__builtin_preserve_field_info} can be used to reliably\n+extract bit-field values from a structure that may change between\n kernel versions:\n \n-@example\n+@smallexample\n struct S\n @{\n   short a;\n@@ -15789,23 +15790,26 @@ int\n read_y (struct S *arg)\n @{\n   unsigned long long val;\n-  unsigned int offset = __builtin_preserve_field_info (arg->y, FIELD_BYTE_OFFSET);\n-  unsigned int size = __builtin_presrve_field_info (arg->y, FIELD_BYTE_SIZE);\n+  unsigned int offset\n+    = __builtin_preserve_field_info (arg->y, FIELD_BYTE_OFFSET);\n+  unsigned int size\n+    = __builtin_preserve_field_info (arg->y, FIELD_BYTE_SIZE);\n \n   /* Read size bytes from arg + offset into val.  */\n   bpf_probe_read (&val, size, arg + offset);\n \n   val <<= __builtin_preserve_field_info (arg->y, FIELD_LSHIFT_U64);\n \n   if (__builtin_preserve_field_info (arg->y, FIELD_SIGNEDNESS))\n-    val = ((long long) val >> __builtin_preserve_field_info (arg->y, FIELD_RSHIFT_U64));\n+    val = ((long long) val\n+           >> __builtin_preserve_field_info (arg->y, FIELD_RSHIFT_U64));\n   else\n     val >>= __builtin_preserve_field_info (arg->y, FIELD_RSHIFT_U64);\n \n   return val;\n @}\n \n-@end example\n+@end smallexample\n @end deftypefn\n \n @node FR-V Built-in Functions"}]}