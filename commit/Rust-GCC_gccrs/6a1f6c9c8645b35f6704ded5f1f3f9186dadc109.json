{"sha": "6a1f6c9c8645b35f6704ded5f1f3f9186dadc109", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmExZjZjOWM4NjQ1YjM1ZjY3MDRkZWQ1ZjFmM2Y5MTg2ZGFkYzEwOQ==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2010-11-19T13:27:18Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2010-11-19T13:27:18Z"}, "message": "common.opt (flag_instrument_functions_exclude_functions, [...]): New Variable definitions.\n\n\t* common.opt (flag_instrument_functions_exclude_functions,\n\tflag_instrument_functions_exclude_files): New Variable\n\tdefinitions.\n\t* flags.h (flag_instrument_functions_exclude_p): Don't declare.\n\t* gimplify.c (char_p): Declare type and vectors.\n\t(flag_instrument_functions_exclude_p): Moved from opts.c.  Make\n\tstatic.\n\t* opts.c (flag_instrument_functions_exclude_functions,\n\tflag_instrument_functions_exclude_files): Remove.\n\t(add_comma_separated_to_vector): Take void **.\n\t(flag_instrument_functions_exclude_p): Move to gimplify.c.\n\t(common_handle_option): Use options structure for\n\t-finstrument-functions-exclude- options.\n\nFrom-SVN: r166943", "tree": {"sha": "a35d25dbb6e404b8f7a02dc82c52069bfefb83ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a35d25dbb6e404b8f7a02dc82c52069bfefb83ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a1f6c9c8645b35f6704ded5f1f3f9186dadc109", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a1f6c9c8645b35f6704ded5f1f3f9186dadc109", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a1f6c9c8645b35f6704ded5f1f3f9186dadc109", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a1f6c9c8645b35f6704ded5f1f3f9186dadc109/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21bf1558203226d4191d93a0b110b46611782f72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21bf1558203226d4191d93a0b110b46611782f72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21bf1558203226d4191d93a0b110b46611782f72"}], "stats": {"total": 118, "additions": 71, "deletions": 47}, "files": [{"sha": "b065ee3960b12370ca1400f4ee0903c7bf6e396b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a1f6c9c8645b35f6704ded5f1f3f9186dadc109/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a1f6c9c8645b35f6704ded5f1f3f9186dadc109/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6a1f6c9c8645b35f6704ded5f1f3f9186dadc109", "patch": "@@ -1,3 +1,19 @@\n+2010-11-19  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* common.opt (flag_instrument_functions_exclude_functions,\n+\tflag_instrument_functions_exclude_files): New Variable\n+\tdefinitions.\n+\t* flags.h (flag_instrument_functions_exclude_p): Don't declare.\n+\t* gimplify.c (char_p): Declare type and vectors.\n+\t(flag_instrument_functions_exclude_p): Moved from opts.c.  Make\n+\tstatic.\n+\t* opts.c (flag_instrument_functions_exclude_functions,\n+\tflag_instrument_functions_exclude_files): Remove.\n+\t(add_comma_separated_to_vector): Take void **.\n+\t(flag_instrument_functions_exclude_p): Move to gimplify.c.\n+\t(common_handle_option): Use options structure for\n+\t-finstrument-functions-exclude- options.\n+\n 2010-11-19  Joseph Myers  <joseph@codesourcery.com>\n \n \t* doc/options.texi (Var): Document effects of Defer."}, {"sha": "9a1f905eec6bc7814fa426a9395ce7d3e311e812", "filename": "gcc/common.opt", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a1f6c9c8645b35f6704ded5f1f3f9186dadc109/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a1f6c9c8645b35f6704ded5f1f3f9186dadc109/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=6a1f6c9c8645b35f6704ded5f1f3f9186dadc109", "patch": "@@ -105,6 +105,14 @@ enum symbol_visibility default_visibility = VISIBILITY_DEFAULT\n Variable\n enum tls_model flag_tls_default = TLS_MODEL_GLOBAL_DYNAMIC\n \n+; These two are really VEC(char_p,heap) *.\n+\n+Variable\n+void *flag_instrument_functions_exclude_functions\n+\n+Variable\n+void *flag_instrument_functions_exclude_files\n+\n ###\n Driver\n "}, {"sha": "3cc65a4556d92cc5bcb803b7341ee55fbbbd80c2", "filename": "gcc/flags.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a1f6c9c8645b35f6704ded5f1f3f9186dadc109/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a1f6c9c8645b35f6704ded5f1f3f9186dadc109/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=6a1f6c9c8645b35f6704ded5f1f3f9186dadc109", "patch": "@@ -159,10 +159,6 @@ extern enum stack_check_type flag_stack_check;\n #define abi_version_at_least(N) \\\n   (flag_abi_version == 0 || flag_abi_version >= (N))\n \n-/* Return whether the function should be excluded from\n-   instrumentation.  */\n-extern bool flag_instrument_functions_exclude_p (tree fndecl);\n-\n /* True if overflow wraps around for the given integral type.  That\n    is, TYPE_MAX + 1 == TYPE_MIN.  */\n #define TYPE_OVERFLOW_WRAPS(TYPE) \\"}, {"sha": "5cf84745625aa9547897d969630bf46be5f711d5", "filename": "gcc/gimplify.c", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a1f6c9c8645b35f6704ded5f1f3f9186dadc109/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a1f6c9c8645b35f6704ded5f1f3f9186dadc109/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=6a1f6c9c8645b35f6704ded5f1f3f9186dadc109", "patch": "@@ -7762,6 +7762,46 @@ gimplify_body (tree *body_p, tree fndecl, bool do_parms)\n   return outer_bind;\n }\n \n+typedef char *char_p; /* For DEF_VEC_P.  */\n+DEF_VEC_P(char_p);\n+DEF_VEC_ALLOC_P(char_p,heap);\n+\n+/* Return whether we should exclude FNDECL from instrumentation.  */\n+\n+static bool\n+flag_instrument_functions_exclude_p (tree fndecl)\n+{\n+  VEC(char_p,heap) *vec;\n+\n+  vec = (VEC(char_p,heap) *) flag_instrument_functions_exclude_functions;\n+  if (VEC_length (char_p, vec) > 0)\n+    {\n+      const char *name;\n+      int i;\n+      char *s;\n+\n+      name = lang_hooks.decl_printable_name (fndecl, 0);\n+      FOR_EACH_VEC_ELT (char_p, vec, i, s)\n+\tif (strstr (name, s) != NULL)\n+\t  return true;\n+    }\n+\n+  vec = (VEC(char_p,heap) *) flag_instrument_functions_exclude_files;\n+  if (VEC_length (char_p, vec) > 0)\n+    {\n+      const char *name;\n+      int i;\n+      char *s;\n+\n+      name = DECL_SOURCE_FILE (fndecl);\n+      FOR_EACH_VEC_ELT (char_p, vec, i, s)\n+\tif (strstr (name, s) != NULL)\n+\t  return true;\n+    }\n+\n+  return false;\n+}\n+\n /* Entry point to the gimplification pass.  FNDECL is the FUNCTION_DECL\n    node for the function we want to gimplify.\n "}, {"sha": "b2787ce96602e4598224338443d127ff70cd8633", "filename": "gcc/opts.c", "status": "modified", "additions": 7, "deletions": 43, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a1f6c9c8645b35f6704ded5f1f3f9186dadc109/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a1f6c9c8645b35f6704ded5f1f3f9186dadc109/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=6a1f6c9c8645b35f6704ded5f1f3f9186dadc109", "patch": "@@ -319,15 +319,10 @@ struct visibility_flags visibility_options;\n /* What to print when a switch has no documentation.  */\n static const char undocumented_msg[] = N_(\"This switch lacks documentation\");\n \n-/* Functions excluded from profiling.  */\n-\n typedef char *char_p; /* For DEF_VEC_P.  */\n DEF_VEC_P(char_p);\n DEF_VEC_ALLOC_P(char_p,heap);\n \n-static VEC(char_p,heap) *flag_instrument_functions_exclude_functions;\n-static VEC(char_p,heap) *flag_instrument_functions_exclude_files;\n-\n typedef const char *const_char_p; /* For DEF_VEC_P.  */\n DEF_VEC_P(const_char_p);\n DEF_VEC_ALLOC_P(const_char_p,heap);\n@@ -545,12 +540,13 @@ add_input_filename (const char *filename)\n /* Add comma-separated strings to a char_p vector.  */\n \n static void\n-add_comma_separated_to_vector (VEC(char_p,heap) **pvec, const char* arg)\n+add_comma_separated_to_vector (void **pvec, const char *arg)\n {\n   char *tmp;\n   char *r;\n   char *w;\n   char *token_start;\n+  VEC(char_p,heap) *vec = (VEC(char_p,heap) *) *pvec;\n \n   /* We never free this string.  */\n   tmp = xstrdup (arg);\n@@ -565,7 +561,7 @@ add_comma_separated_to_vector (VEC(char_p,heap) **pvec, const char* arg)\n \t{\n \t  *w++ = '\\0';\n \t  ++r;\n-\t  VEC_safe_push (char_p, heap, *pvec, token_start);\n+\t  VEC_safe_push (char_p, heap, vec, token_start);\n \t  token_start = w;\n \t}\n       if (*r == '\\\\' && r[1] == ',')\n@@ -577,43 +573,11 @@ add_comma_separated_to_vector (VEC(char_p,heap) **pvec, const char* arg)\n \t*w++ = *r++;\n     }\n   if (*token_start != '\\0')\n-    VEC_safe_push (char_p, heap, *pvec, token_start);\n-}\n-\n-/* Return whether we should exclude FNDECL from instrumentation.  */\n+    VEC_safe_push (char_p, heap, vec, token_start);\n \n-bool\n-flag_instrument_functions_exclude_p (tree fndecl)\n-{\n-  if (VEC_length (char_p, flag_instrument_functions_exclude_functions) > 0)\n-    {\n-      const char *name;\n-      int i;\n-      char *s;\n-\n-      name = lang_hooks.decl_printable_name (fndecl, 0);\n-      FOR_EACH_VEC_ELT (char_p, flag_instrument_functions_exclude_functions,\n-\t\t\ti, s)\n-\tif (strstr (name, s) != NULL)\n-\t  return true;\n-    }\n-\n-  if (VEC_length (char_p, flag_instrument_functions_exclude_files) > 0)\n-    {\n-      const char *name;\n-      int i;\n-      char *s;\n-\n-      name = DECL_SOURCE_FILE (fndecl);\n-      FOR_EACH_VEC_ELT (char_p, flag_instrument_functions_exclude_files, i, s)\n-\tif (strstr (name, s) != NULL)\n-\t  return true;\n-    }\n-\n-  return false;\n+  *pvec = vec;\n }\n \n-\n /* Handle the vector of command line options (located at LOC), storing\n    the results of processing DECODED_OPTIONS and DECODED_OPTIONS_COUNT\n    in OPTS and OPTS_SET and using DC for diagnostic state.  LANG_MASK\n@@ -1918,12 +1882,12 @@ common_handle_option (struct gcc_options *opts,\n \n     case OPT_finstrument_functions_exclude_function_list_:\n       add_comma_separated_to_vector\n-\t(&flag_instrument_functions_exclude_functions, arg);\n+\t(&opts->x_flag_instrument_functions_exclude_functions, arg);\n       break;\n \n     case OPT_finstrument_functions_exclude_file_list_:\n       add_comma_separated_to_vector\n-\t(&flag_instrument_functions_exclude_files, arg);\n+\t(&opts->x_flag_instrument_functions_exclude_files, arg);\n       break;\n \n     case OPT_fmessage_length_:"}]}