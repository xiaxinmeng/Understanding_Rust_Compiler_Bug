{"sha": "9856132b5b8a5e75a81763fe06e4b8c06011d870", "node_id": "C_kwDOANBUbNoAKDk4NTYxMzJiNWI4YTVlNzVhODE3NjNmZTA2ZTRiOGMwNjAxMWQ4NzA", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-10-05T10:35:57Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-10-05T11:34:43Z"}, "message": "Make flow of option processing more readily visible\n\nThis moves calls to various option processing stages to one place,\ntoplev::main.\n\n2021-10-05  Richard Biener  <rguenther@suse.de>\n\n\t* toplev.c (no_backend): Remove global var.\n\t(process_options): Pass in no_backend, move post_options\n\tlanghook call to toplev::main.\n\t(do_compile): Pass in no_backend, move process_options call\n\tto toplev::main.\n\t(toplev::run_self_tests): Check no_backend at the caller.\n\t(toplev::main): Call post_options and process_options\n\tsplit out from do_compile, do self-tests only if\n\tno_backend is initialized.", "tree": {"sha": "095fc13b73ea781a3b32712dfd93920633197d7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/095fc13b73ea781a3b32712dfd93920633197d7f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9856132b5b8a5e75a81763fe06e4b8c06011d870", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9856132b5b8a5e75a81763fe06e4b8c06011d870", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9856132b5b8a5e75a81763fe06e4b8c06011d870", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9856132b5b8a5e75a81763fe06e4b8c06011d870/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eded91050982dc4d7968fecf65469f1ef68854f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eded91050982dc4d7968fecf65469f1ef68854f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eded91050982dc4d7968fecf65469f1ef68854f9"}], "stats": {"total": 43, "additions": 19, "deletions": 24}, "files": [{"sha": "70769087c13821119e1b2d1692a7e55a19d1734e", "filename": "gcc/toplev.c", "status": "modified", "additions": 19, "deletions": 24, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9856132b5b8a5e75a81763fe06e4b8c06011d870/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9856132b5b8a5e75a81763fe06e4b8c06011d870/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=9856132b5b8a5e75a81763fe06e4b8c06011d870", "patch": "@@ -104,8 +104,6 @@ along with GCC; see the file COPYING3.  If not see\n #endif\n \n static void general_init (const char *, bool);\n-static void do_compile ();\n-static void process_options (void);\n static void backend_init (void);\n static int lang_dependent_init (const char *);\n static void init_asm_output (const char *);\n@@ -114,9 +112,6 @@ static void finalize (bool);\n static void crash_signal (int) ATTRIBUTE_NORETURN;\n static void compile_file (void);\n \n-/* True if we don't need a backend (e.g. preprocessing only).  */\n-static bool no_backend;\n-\n /* Decoded options, and number of such options.  */\n struct cl_decoded_option *save_decoded_options;\n unsigned int save_decoded_options_count;\n@@ -1233,7 +1228,7 @@ parse_alignment_opts (void)\n \n /* Process the options that have been parsed.  */\n static void\n-process_options (void)\n+process_options (bool no_backend)\n {\n   const char *language_string = lang_hooks.name;\n   /* Just in case lang_hooks.post_options ends up calling a debug_hook.\n@@ -1242,12 +1237,6 @@ process_options (void)\n \n   maximum_field_alignment = initial_max_fld_align * BITS_PER_UNIT;\n \n-  /* Allow the front end to perform consistency checks and do further\n-     initialization based on the command line options.  This hook also\n-     sets the original filename if appropriate (e.g. foo.i -> foo.c)\n-     so we can correctly initialize debug output.  */\n-  no_backend = lang_hooks.post_options (&main_input_filename);\n-\n   /* Some machines may reject certain combinations of options.  */\n   location_t saved_location = input_location;\n   input_location = UNKNOWN_LOCATION;\n@@ -2145,10 +2134,8 @@ standard_type_bitsize (int bitsize)\n \n /* Initialize the compiler, and compile the input file.  */\n static void\n-do_compile ()\n+do_compile (bool no_backend)\n {\n-  process_options ();\n-\n   /* Don't do any more if an error has already occurred.  */\n   if (!seen_error ())\n     {\n@@ -2277,11 +2264,6 @@ toplev::start_timevars ()\n void\n toplev::run_self_tests ()\n {\n-  if (no_backend)\n-    {\n-      error_at (UNKNOWN_LOCATION, \"self-tests incompatible with %<-E%>\");\n-      return;\n-    }\n #if CHECKING_P\n   /* Reset some state.  */\n   input_location = UNKNOWN_LOCATION;\n@@ -2368,17 +2350,30 @@ toplev::main (int argc, char **argv)\n   /* Exit early if we can (e.g. -help).  */\n   if (!exit_after_options)\n     {\n+      /* Allow the front end to perform consistency checks and do further\n+\t initialization based on the command line options.  This hook also\n+\t sets the original filename if appropriate (e.g. foo.i -> foo.c)\n+\t so we can correctly initialize debug output.  */\n+      bool no_backend = lang_hooks.post_options (&main_input_filename);\n+\n+      process_options (no_backend);\n+\n       if (m_use_TV_TOTAL)\n \tstart_timevars ();\n-      do_compile ();\n+      do_compile (no_backend);\n+\n+      if (flag_self_test)\n+\t{\n+\t  if (no_backend)\n+\t    error_at (UNKNOWN_LOCATION, \"self-tests incompatible with %<-E%>\");\n+\t  else\n+\t    run_self_tests ();\n+\t}\n     }\n \n   if (warningcount || errorcount || werrorcount)\n     print_ignored_options ();\n \n-  if (flag_self_test)\n-    run_self_tests ();\n-\n   /* Invoke registered plugin callbacks if any.  Some plugins could\n      emit some diagnostics here.  */\n   invoke_plugin_callbacks (PLUGIN_FINISH, NULL);"}]}