{"sha": "6e4150e1d402f8d1c8f23dfbdb5157978133c42f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmU0MTUwZTFkNDAyZjhkMWM4ZjIzZGZiZGI1MTU3OTc4MTMzYzQyZg==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2013-09-05T15:49:15Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2013-09-05T15:49:15Z"}, "message": "[AARCH64][Insn classification unification 3/N] ALU/shift types\n\n2013-09-05  James Greenhalgh  <james.greenhalgh@arm.com>\n\t    Sofiane Naci  <sofiane.naci@arm.com>\n\n\t* config/arm/types.md (define_attr \"type\"):\n\tExpand \"arlo_imm\"\n\tinto \"adr\", \"alu_imm\", \"alus_imm\", \"logic_imm\", \"logics_imm\".\n\tExpand \"arlo_reg\"\n\tinto \"adc_reg\", \"adc_imm\", \"adcs_reg\", \"adcs_imm\", \"alu_ext\",\n\t\"alu_reg\", \"alus_ext\", \"alus_reg\", \"bfm\", \"csel\", \"logic_reg\",\n\t\"logics_reg\", \"rev\".\n\tExpand \"arlo_shift\"\n\tinto \"alu_shift_imm\", \"alus_shift_imm\", \"logic_shift_imm\",\n\t\"logics_shift_imm\".\n\tExpand \"arlo_shift_reg\"\n\tinto \"alu_shift_reg\", \"alus_shift_reg\", \"logic_shift_reg\",\n\t\"logics_shift_reg\".\n\tExpand \"clz\" into \"clz, \"rbit\".\n\tRename \"shift\" to \"shift_imm\".\n\t* config/arm/arm.md (define_attr \"core_cycles\"): Update for attribute\n\tchanges.\n\tUpdate for attribute changes all occurrences of arlo_* and\n\tshift* types.\n\t* config/arm/arm-fixed.md: Update for attribute changes\n\tall occurrences of arlo_* types.\n\t* config/arm/thumb2.md: Update for attribute changes all occurrences\n\tof arlo_* types.\n\t* config/arm/arm.c (xscale_sched_adjust_cost):  (rtx insn, rtx\n\t(cortexa7_older_only): Likewise.\n\t(cortexa7_younger):  Likewise.\n\t* config/arm/arm1020e.md (1020alu_op): Update for attribute changes.\n\t(1020alu_shift_op): Likewise.\n\t(1020alu_shift_reg_op): Likewise.\n\t* config/arm/arm1026ejs.md (alu_op): Update for attribute changes.\n\t(alu_shift_op): Likewise.\n\t(alu_shift_reg_op): Likewise.\n\t* config/arm/arm1136jfs.md (11_alu_op): Update for\n\tattribute changes.\n\t(11_alu_shift_op): Likewise.\n\t(11_alu_shift_reg_op): Likewise.\n\t* config/arm/arm926ejs.md (9_alu_op): Update for attribute changes.\n\t(9_alu_shift_reg_op): Likewise.\n\t* config/arm/cortex-a15.md (cortex_a15_alu): Update for\n\tattribute changes.\n\t(cortex_a15_alu_shift): Likewise.\n\t(cortex_a15_alu_shift_reg): Likewise.\n\t* config/arm/cortex-a5.md (cortex_a5_alu): Update for\n\tattribute changes.\n\t(cortex_a5_alu_shift): Likewise.\n\t* config/arm/cortex-a53.md\n\t(cortex_a53_alu): Update for attribute changes.\n\t(cortex_a53_alu_shift): Likewise.\n\t* config/arm/cortex-a7.md\n\t(cortex_a7_alu_imm): Update for attribute changes.\n\t(cortex_a7_alu_reg): Likewise.\n\t(cortex_a7_alu_shift): Likewise.\n\t* config/arm/cortex-a8.md\n\t(cortex_a8_alu): Update for attribute changes.\n\t(cortex_a8_alu_shift): Likewise.\n\t(cortex_a8_alu_shift_reg): Likewise.\n\t* config/arm/cortex-a9.md\n\t(cortex_a9_dp): Update for attribute changes.\n\t(cortex_a9_dp_shift): Likewise.\n\t* config/arm/cortex-m4.md\n\t(cortex_m4_alu): Update for attribute changes.\n\t* config/arm/cortex-r4.md\n\t(cortex_r4_alu): Update for attribute changes.\n\t(cortex_r4_mov): Likewise.\n\t(cortex_r4_alu_shift_reg): Likewise.\n\t* config/arm/fa526.md\n\t(526_alu_op): Update for attribute changes.\n\t(526_alu_shift_op): Likewise.\n\t* config/arm/fa606te.md\n\t(606te_alu_op): Update for attribute changes.\n\t* config/arm/fa626te.md\n\t(626te_alu_op): Update for attribute changes.\n\t(626te_alu_shift_op): Likewise.\n\t* config/arm/fa726te.md\n\t(726te_alu_op): Update for attribute changes.\n\t(726te_alu_shift_op): Likewise.\n\t(726te_alu_shift_reg_op): Likewise.\n\t* config/arm/fmp626.md (mp626_alu_op): Update for attribute changes.\n\t(mp626_alu_shift_op): Likewise.\n\t* config/arm/marvell-pj4.md (pj4_alu): Update for attribute changes.\n\t(pj4_alu_conds): Likewise.\n\t(pj4_shift): Likewise.\n\t(pj4_shift_conds): Likewise.\n\t(pj4_alu_shift): Likewise.\n\t(pj4_alu_shift_conds): Likewise.\n\t* config/aarch64/aarch64.md: Update for attribute change\n\tall occurrences of arlo_* and shift* types.\n\n\n\nCo-Authored-By: Sofiane Naci <sofiane.naci@arm.com>\n\nFrom-SVN: r202291", "tree": {"sha": "cb2cdbd4d01b960eb8b6656b69ab331de46964b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb2cdbd4d01b960eb8b6656b69ab331de46964b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e4150e1d402f8d1c8f23dfbdb5157978133c42f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e4150e1d402f8d1c8f23dfbdb5157978133c42f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e4150e1d402f8d1c8f23dfbdb5157978133c42f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e4150e1d402f8d1c8f23dfbdb5157978133c42f/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7c812a2a57e58218eea234b80386197d1fe7672a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c812a2a57e58218eea234b80386197d1fe7672a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c812a2a57e58218eea234b80386197d1fe7672a"}], "stats": {"total": 918, "additions": 619, "deletions": 299}, "files": [{"sha": "f6c6b3bb49621d89a86b3adc43e312594139883f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4150e1d402f8d1c8f23dfbdb5157978133c42f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4150e1d402f8d1c8f23dfbdb5157978133c42f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6e4150e1d402f8d1c8f23dfbdb5157978133c42f", "patch": "@@ -1,3 +1,94 @@\n+2013-09-05  James Greenhalgh  <james.greenhalgh@arm.com>\n+\t    Sofiane Naci  <sofiane.naci@arm.com>\n+\n+\t* config/arm/types.md (define_attr \"type\"):\n+\tExpand \"arlo_imm\"\n+\tinto \"adr\", \"alu_imm\", \"alus_imm\", \"logic_imm\", \"logics_imm\".\n+\tExpand \"arlo_reg\"\n+\tinto \"adc_reg\", \"adc_imm\", \"adcs_reg\", \"adcs_imm\", \"alu_ext\",\n+\t\"alu_reg\", \"alus_ext\", \"alus_reg\", \"bfm\", \"csel\", \"logic_reg\",\n+\t\"logics_reg\", \"rev\".\n+\tExpand \"arlo_shift\"\n+\tinto \"alu_shift_imm\", \"alus_shift_imm\", \"logic_shift_imm\",\n+\t\"logics_shift_imm\".\n+\tExpand \"arlo_shift_reg\"\n+\tinto \"alu_shift_reg\", \"alus_shift_reg\", \"logic_shift_reg\",\n+\t\"logics_shift_reg\".\n+\tExpand \"clz\" into \"clz, \"rbit\".\n+\tRename \"shift\" to \"shift_imm\".\n+\t* config/arm/arm.md (define_attr \"core_cycles\"): Update for attribute\n+\tchanges.\n+\tUpdate for attribute changes all occurrences of arlo_* and\n+\tshift* types.\n+\t* config/arm/arm-fixed.md: Update for attribute changes\n+\tall occurrences of arlo_* types.\n+\t* config/arm/thumb2.md: Update for attribute changes all occurrences\n+\tof arlo_* types.\n+\t* config/arm/arm.c (xscale_sched_adjust_cost):  (rtx insn, rtx\n+\t(cortexa7_older_only): Likewise.\n+\t(cortexa7_younger):  Likewise.\n+\t* config/arm/arm1020e.md (1020alu_op): Update for attribute changes.\n+\t(1020alu_shift_op): Likewise.\n+\t(1020alu_shift_reg_op): Likewise.\n+\t* config/arm/arm1026ejs.md (alu_op): Update for attribute changes.\n+\t(alu_shift_op): Likewise.\n+\t(alu_shift_reg_op): Likewise.\n+\t* config/arm/arm1136jfs.md (11_alu_op): Update for\n+\tattribute changes.\n+\t(11_alu_shift_op): Likewise.\n+\t(11_alu_shift_reg_op): Likewise.\n+\t* config/arm/arm926ejs.md (9_alu_op): Update for attribute changes.\n+\t(9_alu_shift_reg_op): Likewise.\n+\t* config/arm/cortex-a15.md (cortex_a15_alu): Update for\n+\tattribute changes.\n+\t(cortex_a15_alu_shift): Likewise.\n+\t(cortex_a15_alu_shift_reg): Likewise.\n+\t* config/arm/cortex-a5.md (cortex_a5_alu): Update for\n+\tattribute changes.\n+\t(cortex_a5_alu_shift): Likewise.\n+\t* config/arm/cortex-a53.md\n+\t(cortex_a53_alu): Update for attribute changes.\n+\t(cortex_a53_alu_shift): Likewise.\n+\t* config/arm/cortex-a7.md\n+\t(cortex_a7_alu_imm): Update for attribute changes.\n+\t(cortex_a7_alu_reg): Likewise.\n+\t(cortex_a7_alu_shift): Likewise.\n+\t* config/arm/cortex-a8.md\n+\t(cortex_a8_alu): Update for attribute changes.\n+\t(cortex_a8_alu_shift): Likewise.\n+\t(cortex_a8_alu_shift_reg): Likewise.\n+\t* config/arm/cortex-a9.md\n+\t(cortex_a9_dp): Update for attribute changes.\n+\t(cortex_a9_dp_shift): Likewise.\n+\t* config/arm/cortex-m4.md\n+\t(cortex_m4_alu): Update for attribute changes.\n+\t* config/arm/cortex-r4.md\n+\t(cortex_r4_alu): Update for attribute changes.\n+\t(cortex_r4_mov): Likewise.\n+\t(cortex_r4_alu_shift_reg): Likewise.\n+\t* config/arm/fa526.md\n+\t(526_alu_op): Update for attribute changes.\n+\t(526_alu_shift_op): Likewise.\n+\t* config/arm/fa606te.md\n+\t(606te_alu_op): Update for attribute changes.\n+\t* config/arm/fa626te.md\n+\t(626te_alu_op): Update for attribute changes.\n+\t(626te_alu_shift_op): Likewise.\n+\t* config/arm/fa726te.md\n+\t(726te_alu_op): Update for attribute changes.\n+\t(726te_alu_shift_op): Likewise.\n+\t(726te_alu_shift_reg_op): Likewise.\n+\t* config/arm/fmp626.md (mp626_alu_op): Update for attribute changes.\n+\t(mp626_alu_shift_op): Likewise.\n+\t* config/arm/marvell-pj4.md (pj4_alu): Update for attribute changes.\n+\t(pj4_alu_conds): Likewise.\n+\t(pj4_shift): Likewise.\n+\t(pj4_shift_conds): Likewise.\n+\t(pj4_alu_shift): Likewise.\n+\t(pj4_alu_shift_conds): Likewise.\n+\t* config/aarch64/aarch64.md: Update for attribute change\n+\tall occurrences of arlo_* and shift* types.\n+\n 2013-09-05  Mike Stump  <mikestump@comcast.net>\n \n \t* tree.h: Move documentation for tree_function_decl to tree-core.h"}, {"sha": "6cdff8735e041e7e07a955cae7bee4ad86e354cc", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 127, "deletions": 127, "changes": 254, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4150e1d402f8d1c8f23dfbdb5157978133c42f/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4150e1d402f8d1c8f23dfbdb5157978133c42f/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=6e4150e1d402f8d1c8f23dfbdb5157978133c42f", "patch": "@@ -833,8 +833,8 @@\n    fmov\\\\t%w0, %s1\n    fmov\\\\t%s0, %s1\"\n   [(set_attr \"v8type\" \"move,move,move,alu,load1,load1,store1,store1,adr,adr,fmov,fmov,fmov\")\n-   (set_attr \"type\" \"mov_reg,mov_reg,mov_reg,arlo_reg,load1,load1,store1,store1,\\\n-                     mov_reg,mov_reg,mov_reg,mov_reg,mov_reg\")\n+   (set_attr \"type\" \"mov_reg,mov_reg,mov_reg,mov_imm,load1,load1,store1,store1,\\\n+                     adr,adr,mov_reg,mov_reg,mov_reg\")\n    (set_attr \"mode\" \"SI\")\n    (set_attr \"fp\" \"*,*,*,*,*,yes,*,yes,*,*,yes,yes,yes\")]\n )\n@@ -861,7 +861,7 @@\n    movi\\\\t%d0, %1\"\n   [(set_attr \"v8type\" \"move,move,move,alu,load1,load1,store1,store1,adr,adr,fmov,fmov,fmov,fmov\")\n    (set_attr \"type\" \"mov_reg,mov_reg,mov_reg,mov_imm,load1,load1,store1,store1,\\\n-                     mov_reg,mov_reg,mov_reg,mov_reg,mov_reg,mov_reg\")\n+                     adr,adr,mov_reg,mov_reg,mov_reg,mov_reg\")\n    (set_attr \"mode\" \"DI\")\n    (set_attr \"fp\" \"*,*,*,*,*,yes,*,yes,*,*,yes,yes,yes,*\")\n    (set_attr \"simd\" \"*,*,*,*,*,*,*,*,*,*,*,*,*,yes\")]\n@@ -1027,7 +1027,7 @@\n    ldp\\\\t%0, %H0, %1\n    stp\\\\t%1, %H1, %0\"\n   [(set_attr \"v8type\" \"logic,move2,fmovi2f,fmovf2i,fconst,fconst,fpsimd_load,fpsimd_store,fpsimd_load2,fpsimd_store2\")\n-   (set_attr \"type\" \"arlo_reg,mov_reg,f_mcr,f_mrc,fconstd,fconstd,\\\n+   (set_attr \"type\" \"logic_reg,mov_reg,f_mcr,f_mrc,fconstd,fconstd,\\\n                      f_loadd,f_stored,f_loadd,f_stored\")\n    (set_attr \"mode\" \"DF,DF,DF,DF,DF,DF,TF,TF,DF,DF\")\n    (set_attr \"length\" \"4,8,8,8,4,4,4,4,4,4\")\n@@ -1278,7 +1278,7 @@\n   add\\\\t%w0, %w1, %w2\n   sub\\\\t%w0, %w1, #%n2\"\n   [(set_attr \"v8type\" \"alu\")\n-   (set_attr \"type\" \"arlo_imm,arlo_reg,arlo_imm\")\n+   (set_attr \"type\" \"alu_imm,alu_reg,alu_imm\")\n    (set_attr \"mode\" \"SI\")]\n )\n \n@@ -1295,7 +1295,7 @@\n   add\\\\t%w0, %w1, %w2\n   sub\\\\t%w0, %w1, #%n2\"\n   [(set_attr \"v8type\" \"alu\")\n-   (set_attr \"type\" \"arlo_imm,arlo_reg,arlo_imm\")\n+   (set_attr \"type\" \"alu_imm,alu_reg,alu_imm\")\n    (set_attr \"mode\" \"SI\")]\n )\n \n@@ -1312,7 +1312,7 @@\n   sub\\\\t%x0, %x1, #%n2\n   add\\\\t%d0, %d1, %d2\"\n   [(set_attr \"v8type\" \"alu\")\n-   (set_attr \"type\" \"arlo_imm,arlo_reg,arlo_imm,arlo_reg\")\n+   (set_attr \"type\" \"alu_imm,alu_reg,alu_imm,alu_reg\")\n    (set_attr \"mode\" \"DI\")\n    (set_attr \"simd\" \"*,*,*,yes\")]\n )\n@@ -1331,7 +1331,7 @@\n   adds\\\\t%<w>0, %<w>1, %<w>2\n   subs\\\\t%<w>0, %<w>1, #%n2\"\n   [(set_attr \"v8type\" \"alus\")\n-   (set_attr \"type\" \"arlo_reg,arlo_imm,arlo_imm\")\n+   (set_attr \"type\" \"alus_reg,alus_imm,alus_imm\")\n    (set_attr \"mode\" \"<MODE>\")]\n )\n \n@@ -1350,7 +1350,7 @@\n   adds\\\\t%w0, %w1, %w2\n   subs\\\\t%w0, %w1, #%n2\"\n   [(set_attr \"v8type\" \"alus\")\n-   (set_attr \"type\" \"arlo_reg,arlo_imm,arlo_imm\")\n+   (set_attr \"type\" \"alus_reg,alus_imm,alus_imm\")\n    (set_attr \"mode\" \"SI\")]\n )\n \n@@ -1368,7 +1368,7 @@\n   \"\"\n   \"adds\\\\t%<w>0, %<w>3, %<w>1, lsl %p2\"\n   [(set_attr \"v8type\" \"alus_shift\")\n-   (set_attr \"type\" \"arlo_shift\")\n+   (set_attr \"type\" \"alus_shift_imm\")\n    (set_attr \"mode\" \"<MODE>\")]\n )\n \n@@ -1386,7 +1386,7 @@\n   \"\"\n   \"subs\\\\t%<w>0, %<w>1, %<w>2, lsl %p3\"\n   [(set_attr \"v8type\" \"alus_shift\")\n-   (set_attr \"type\" \"arlo_shift\")\n+   (set_attr \"type\" \"alus_shift_imm\")\n    (set_attr \"mode\" \"<MODE>\")]\n )\n \n@@ -1402,7 +1402,7 @@\n   \"\"\n   \"adds\\\\t%<GPI:w>0, %<GPI:w>2, %<GPI:w>1, <su>xt<ALLX:size>\"\n   [(set_attr \"v8type\" \"alus_ext\")\n-   (set_attr \"type\" \"arlo_reg\")\n+   (set_attr \"type\" \"alus_ext\")\n    (set_attr \"mode\" \"<GPI:MODE>\")]\n )\n \n@@ -1418,7 +1418,7 @@\n   \"\"\n   \"subs\\\\t%<GPI:w>0, %<GPI:w>1, %<GPI:w>2, <su>xt<ALLX:size>\"\n   [(set_attr \"v8type\" \"alus_ext\")\n-   (set_attr \"type\" \"arlo_reg\")\n+   (set_attr \"type\" \"alus_ext\")\n    (set_attr \"mode\" \"<GPI:MODE>\")]\n )\n \n@@ -1440,7 +1440,7 @@\n   \"aarch64_is_extend_from_extract (<MODE>mode, operands[2], operands[3])\"\n   \"adds\\\\t%<w>0, %<w>4, %<w>1, <su>xt%e3 %p2\"\n   [(set_attr \"v8type\" \"alus_ext\")\n-   (set_attr \"type\" \"arlo_reg\")\n+   (set_attr \"type\" \"alus_ext\")\n    (set_attr \"mode\" \"<MODE>\")]\n )\n \n@@ -1462,7 +1462,7 @@\n   \"aarch64_is_extend_from_extract (<MODE>mode, operands[2], operands[3])\"\n   \"subs\\\\t%<w>0, %<w>4, %<w>1, <su>xt%e3 %p2\"\n   [(set_attr \"v8type\" \"alus_ext\")\n-   (set_attr \"type\" \"arlo_reg\")\n+   (set_attr \"type\" \"alus_ext\")\n    (set_attr \"mode\" \"<MODE>\")]\n )\n \n@@ -1478,7 +1478,7 @@\n   cmn\\\\t%<w>0, %<w>1\n   cmp\\\\t%<w>0, #%n1\"\n   [(set_attr \"v8type\" \"alus\")\n-   (set_attr \"type\" \"arlo_reg,arlo_imm,arlo_imm\")\n+   (set_attr \"type\" \"alus_reg,alus_imm,alus_imm\")\n    (set_attr \"mode\" \"<MODE>\")]\n )\n \n@@ -1490,7 +1490,7 @@\n   \"\"\n   \"cmn\\\\t%<w>0, %<w>1\"\n   [(set_attr \"v8type\" \"alus\")\n-   (set_attr \"type\" \"arlo_reg\")\n+   (set_attr \"type\" \"alus_reg\")\n    (set_attr \"mode\" \"<MODE>\")]\n )\n \n@@ -1502,7 +1502,7 @@\n   \"\"\n   \"add\\\\t%<w>0, %<w>3, %<w>1, <shift> %2\"\n   [(set_attr \"v8type\" \"alu_shift\")\n-   (set_attr \"type\" \"arlo_shift\")\n+   (set_attr \"type\" \"alu_shift_imm\")\n    (set_attr \"mode\" \"<MODE>\")]\n )\n \n@@ -1516,7 +1516,7 @@\n   \"\"\n   \"add\\\\t%w0, %w3, %w1, <shift> %2\"\n   [(set_attr \"v8type\" \"alu_shift\")\n-   (set_attr \"type\" \"arlo_shift\")\n+   (set_attr \"type\" \"alu_shift_imm\")\n    (set_attr \"mode\" \"SI\")]\n )\n \n@@ -1528,7 +1528,7 @@\n   \"\"\n   \"add\\\\t%<w>0, %<w>3, %<w>1, lsl %p2\"\n   [(set_attr \"v8type\" \"alu_shift\")\n-   (set_attr \"type\" \"arlo_shift\")\n+   (set_attr \"type\" \"alu_shift_imm\")\n    (set_attr \"mode\" \"<MODE>\")]\n )\n \n@@ -1539,7 +1539,7 @@\n   \"\"\n   \"add\\\\t%<GPI:w>0, %<GPI:w>2, %<GPI:w>1, <su>xt<ALLX:size>\"\n   [(set_attr \"v8type\" \"alu_ext\")\n-   (set_attr \"type\" \"arlo_reg\")\n+   (set_attr \"type\" \"alu_ext\")\n    (set_attr \"mode\" \"<GPI:MODE>\")]\n )\n \n@@ -1552,7 +1552,7 @@\n   \"\"\n   \"add\\\\t%w0, %w2, %w1, <su>xt<SHORT:size>\"\n   [(set_attr \"v8type\" \"alu_ext\")\n-   (set_attr \"type\" \"arlo_reg\")\n+   (set_attr \"type\" \"alu_ext\")\n    (set_attr \"mode\" \"SI\")]\n )\n \n@@ -1565,7 +1565,7 @@\n   \"\"\n   \"add\\\\t%<GPI:w>0, %<GPI:w>3, %<GPI:w>1, <su>xt<ALLX:size> %2\"\n   [(set_attr \"v8type\" \"alu_ext\")\n-   (set_attr \"type\" \"arlo_reg\")\n+   (set_attr \"type\" \"alu_ext\")\n    (set_attr \"mode\" \"<GPI:MODE>\")]\n )\n \n@@ -1580,7 +1580,7 @@\n   \"\"\n   \"add\\\\t%w0, %w3, %w1, <su>xt<SHORT:size> %2\"\n   [(set_attr \"v8type\" \"alu_ext\")\n-   (set_attr \"type\" \"arlo_reg\")\n+   (set_attr \"type\" \"alu_ext\")\n    (set_attr \"mode\" \"SI\")]\n )\n \n@@ -1593,7 +1593,7 @@\n   \"\"\n   \"add\\\\t%<GPI:w>0, %<GPI:w>3, %<GPI:w>1, <su>xt<ALLX:size> %p2\"\n   [(set_attr \"v8type\" \"alu_ext\")\n-   (set_attr \"type\" \"arlo_reg\")\n+   (set_attr \"type\" \"alu_ext\")\n    (set_attr \"mode\" \"<GPI:MODE>\")]\n )\n \n@@ -1607,7 +1607,7 @@\n   \"\"\n   \"add\\\\t%w0, %w3, %w1, <su>xt<SHORT:size> %p2\"\n   [(set_attr \"v8type\" \"alu_ext\")\n-   (set_attr \"type\" \"arlo_reg\")\n+   (set_attr \"type\" \"alu_ext\")\n    (set_attr \"mode\" \"SI\")]\n )\n \n@@ -1622,7 +1622,7 @@\n   \"aarch64_is_extend_from_extract (<MODE>mode, operands[2], operands[3])\"\n   \"add\\\\t%<w>0, %<w>4, %<w>1, <su>xt%e3 %p2\"\n   [(set_attr \"v8type\" \"alu_ext\")\n-   (set_attr \"type\" \"arlo_reg\")\n+   (set_attr \"type\" \"alu_ext\")\n    (set_attr \"mode\" \"<MODE>\")]\n )\n \n@@ -1639,7 +1639,7 @@\n   \"aarch64_is_extend_from_extract (SImode, operands[2], operands[3])\"\n   \"add\\\\t%w0, %w4, %w1, <su>xt%e3 %p2\"\n   [(set_attr \"v8type\" \"alu_ext\")\n-   (set_attr \"type\" \"arlo_reg\")\n+   (set_attr \"type\" \"alu_ext\")\n    (set_attr \"mode\" \"SI\")]\n )\n \n@@ -1653,7 +1653,7 @@\n    \"\"\n    \"adc\\\\t%<w>0, %<w>1, %<w>2\"\n   [(set_attr \"v8type\" \"adc\")\n-   (set_attr \"type\" \"arlo_reg\")\n+   (set_attr \"type\" \"adc_reg\")\n    (set_attr \"mode\" \"<MODE>\")]\n )\n \n@@ -1669,7 +1669,7 @@\n    \"\"\n    \"adc\\\\t%w0, %w1, %w2\"\n   [(set_attr \"v8type\" \"adc\")\n-   (set_attr \"type\" \"arlo_reg\")\n+   (set_attr \"type\" \"adc_reg\")\n    (set_attr \"mode\" \"SI\")]\n )\n \n@@ -1683,7 +1683,7 @@\n    \"\"\n    \"adc\\\\t%<w>0, %<w>1, %<w>2\"\n   [(set_attr \"v8type\" \"adc\")\n-   (set_attr \"type\" \"arlo_reg\")\n+   (set_attr \"type\" \"adc_reg\")\n    (set_attr \"mode\" \"<MODE>\")]\n )\n \n@@ -1699,7 +1699,7 @@\n    \"\"\n    \"adc\\\\t%w0, %w1, %w2\"\n   [(set_attr \"v8type\" \"adc\")\n-   (set_attr \"type\" \"arlo_reg\")\n+   (set_attr \"type\" \"adc_reg\")\n    (set_attr \"mode\" \"SI\")]\n )\n \n@@ -1713,7 +1713,7 @@\n    \"\"\n    \"adc\\\\t%<w>0, %<w>1, %<w>2\"\n   [(set_attr \"v8type\" \"adc\")\n-   (set_attr \"type\" \"arlo_reg\")\n+   (set_attr \"type\" \"adc_reg\")\n    (set_attr \"mode\" \"<MODE>\")]\n )\n \n@@ -1729,7 +1729,7 @@\n    \"\"\n    \"adc\\\\t%w0, %w1, %w2\"\n   [(set_attr \"v8type\" \"adc\")\n-   (set_attr \"type\" \"arlo_reg\")\n+   (set_attr \"type\" \"adc_reg\")\n    (set_attr \"mode\" \"SI\")]\n )\n \n@@ -1743,7 +1743,7 @@\n    \"\"\n    \"adc\\\\t%<w>0, %<w>1, %<w>2\"\n   [(set_attr \"v8type\" \"adc\")\n-   (set_attr \"type\" \"arlo_reg\")\n+   (set_attr \"type\" \"adc_reg\")\n    (set_attr \"mode\" \"<MODE>\")]\n )\n \n@@ -1759,7 +1759,7 @@\n    \"\"\n    \"adc\\\\t%w0, %w1, %w2\"\n   [(set_attr \"v8type\" \"adc\")\n-   (set_attr \"type\" \"arlo_reg\")\n+   (set_attr \"type\" \"adc_reg\")\n    (set_attr \"mode\" \"SI\")]\n )\n \n@@ -1776,7 +1776,7 @@\n \t\t\t\t\t   INTVAL (operands[3])));\n   return \\\"add\\t%<w>0, %<w>4, %<w>1, uxt%e3 %p2\\\";\"\n   [(set_attr \"v8type\" \"alu_ext\")\n-   (set_attr \"type\" \"arlo_reg\")\n+   (set_attr \"type\" \"alu_ext\")\n    (set_attr \"mode\" \"<MODE>\")]\n )\n \n@@ -1795,7 +1795,7 @@\n \t\t\t\t\t   INTVAL (operands[3])));\n   return \\\"add\\t%w0, %w4, %w1, uxt%e3 %p2\\\";\"\n   [(set_attr \"v8type\" \"alu_ext\")\n-   (set_attr \"type\" \"arlo_reg\")\n+   (set_attr \"type\" \"alu_ext\")\n    (set_attr \"mode\" \"SI\")]\n )\n \n@@ -1806,7 +1806,7 @@\n   \"\"\n   \"sub\\\\t%w0, %w1, %w2\"\n   [(set_attr \"v8type\" \"alu\")\n-   (set_attr \"type\" \"arlo_reg\")\n+   (set_attr \"type\" \"alu_reg\")\n    (set_attr \"mode\" \"SI\")]\n )\n \n@@ -1819,7 +1819,7 @@\n   \"\"\n   \"sub\\\\t%w0, %w1, %w2\"\n   [(set_attr \"v8type\" \"alu\")\n-   (set_attr \"type\" \"arlo_reg\")\n+   (set_attr \"type\" \"alu_reg\")\n    (set_attr \"mode\" \"SI\")]\n )\n \n@@ -1832,7 +1832,7 @@\n    sub\\\\t%x0, %x1, %x2\n    sub\\\\t%d0, %d1, %d2\"\n   [(set_attr \"v8type\" \"alu\")\n-   (set_attr \"type\" \"arlo_reg\")\n+   (set_attr \"type\" \"alu_reg\")\n    (set_attr \"mode\" \"DI\")\n    (set_attr \"simd\" \"*,yes\")]\n )\n@@ -1848,7 +1848,7 @@\n   \"\"\n   \"subs\\\\t%<w>0, %<w>1, %<w>2\"\n   [(set_attr \"v8type\" \"alus\")\n-   (set_attr \"type\" \"arlo_reg\")\n+   (set_attr \"type\" \"alus_reg\")\n    (set_attr \"mode\" \"<MODE>\")]\n )\n \n@@ -1863,7 +1863,7 @@\n   \"\"\n   \"subs\\\\t%w0, %w1, %w2\"\n   [(set_attr \"v8type\" \"alus\")\n-   (set_attr \"type\" \"arlo_reg\")\n+   (set_attr \"type\" \"alus_reg\")\n    (set_attr \"mode\" \"SI\")]\n )\n \n@@ -1876,7 +1876,7 @@\n   \"\"\n   \"sub\\\\t%<w>0, %<w>3, %<w>1, <shift> %2\"\n   [(set_attr \"v8type\" \"alu_shift\")\n-   (set_attr \"type\" \"arlo_shift\")\n+   (set_attr \"type\" \"alu_shift_imm\")\n    (set_attr \"mode\" \"<MODE>\")]\n )\n \n@@ -1891,7 +1891,7 @@\n   \"\"\n   \"sub\\\\t%w0, %w3, %w1, <shift> %2\"\n   [(set_attr \"v8type\" \"alu_shift\")\n-   (set_attr \"type\" \"arlo_shift\")\n+   (set_attr \"type\" \"alu_shift_imm\")\n    (set_attr \"mode\" \"SI\")]\n )\n \n@@ -1904,7 +1904,7 @@\n   \"\"\n   \"sub\\\\t%<w>0, %<w>3, %<w>1, lsl %p2\"\n   [(set_attr \"v8type\" \"alu_shift\")\n-   (set_attr \"type\" \"arlo_shift\")\n+   (set_attr \"type\" \"alu_shift_imm\")\n    (set_attr \"mode\" \"<MODE>\")]\n )\n \n@@ -1919,7 +1919,7 @@\n   \"\"\n   \"sub\\\\t%w0, %w3, %w1, lsl %p2\"\n   [(set_attr \"v8type\" \"alu_shift\")\n-   (set_attr \"type\" \"arlo_shift\")\n+   (set_attr \"type\" \"alu_shift_imm\")\n    (set_attr \"mode\" \"SI\")]\n )\n \n@@ -1931,7 +1931,7 @@\n   \"\"\n   \"sub\\\\t%<GPI:w>0, %<GPI:w>1, %<GPI:w>2, <su>xt<ALLX:size>\"\n   [(set_attr \"v8type\" \"alu_ext\")\n-   (set_attr \"type\" \"arlo_reg\")\n+   (set_attr \"type\" \"alu_ext\")\n    (set_attr \"mode\" \"<GPI:MODE>\")]\n )\n \n@@ -1945,7 +1945,7 @@\n   \"\"\n   \"sub\\\\t%w0, %w1, %w2, <su>xt<SHORT:size>\"\n   [(set_attr \"v8type\" \"alu_ext\")\n-   (set_attr \"type\" \"arlo_reg\")\n+   (set_attr \"type\" \"alu_ext\")\n    (set_attr \"mode\" \"SI\")]\n )\n \n@@ -1958,7 +1958,7 @@\n   \"\"\n   \"sub\\\\t%<GPI:w>0, %<GPI:w>1, %<GPI:w>2, <su>xt<ALLX:size> %3\"\n   [(set_attr \"v8type\" \"alu_ext\")\n-   (set_attr \"type\" \"arlo_reg\")\n+   (set_attr \"type\" \"alu_ext\")\n    (set_attr \"mode\" \"<GPI:MODE>\")]\n )\n \n@@ -1973,7 +1973,7 @@\n   \"\"\n   \"sub\\\\t%w0, %w1, %w2, <su>xt<SHORT:size> %3\"\n   [(set_attr \"v8type\" \"alu_ext\")\n-   (set_attr \"type\" \"arlo_reg\")\n+   (set_attr \"type\" \"alu_ext\")\n    (set_attr \"mode\" \"SI\")]\n )\n \n@@ -1988,7 +1988,7 @@\n   \"aarch64_is_extend_from_extract (<MODE>mode, operands[2], operands[3])\"\n   \"sub\\\\t%<w>0, %<w>4, %<w>1, <su>xt%e3 %p2\"\n   [(set_attr \"v8type\" \"alu_ext\")\n-   (set_attr \"type\" \"arlo_reg\")\n+   (set_attr \"type\" \"alu_ext\")\n    (set_attr \"mode\" \"<MODE>\")]\n )\n \n@@ -2005,7 +2005,7 @@\n   \"aarch64_is_extend_from_extract (SImode, operands[2], operands[3])\"\n   \"sub\\\\t%w0, %w4, %w1, <su>xt%e3 %p2\"\n   [(set_attr \"v8type\" \"alu_ext\")\n-   (set_attr \"type\" \"arlo_reg\")\n+   (set_attr \"type\" \"alu_ext\")\n    (set_attr \"mode\" \"SI\")]\n )\n \n@@ -2019,7 +2019,7 @@\n    \"\"\n    \"sbc\\\\t%<w>0, %<w>1, %<w>2\"\n   [(set_attr \"v8type\" \"adc\")\n-   (set_attr \"type\" \"arlo_reg\")\n+   (set_attr \"type\" \"adc_reg\")\n    (set_attr \"mode\" \"<MODE>\")]\n )\n \n@@ -2035,7 +2035,7 @@\n    \"\"\n    \"sbc\\\\t%w0, %w1, %w2\"\n   [(set_attr \"v8type\" \"adc\")\n-   (set_attr \"type\" \"arlo_reg\")\n+   (set_attr \"type\" \"adc_reg\")\n    (set_attr \"mode\" \"SI\")]\n )\n \n@@ -2052,7 +2052,7 @@\n \t\t\t\t\t   INTVAL (operands[3])));\n   return \\\"sub\\t%<w>0, %<w>4, %<w>1, uxt%e3 %p2\\\";\"\n   [(set_attr \"v8type\" \"alu_ext\")\n-   (set_attr \"type\" \"arlo_reg\")\n+   (set_attr \"type\" \"alu_ext\")\n    (set_attr \"mode\" \"<MODE>\")]\n )\n \n@@ -2071,7 +2071,7 @@\n \t\t\t\t\t   INTVAL (operands[3])));\n   return \\\"sub\\t%w0, %w4, %w1, uxt%e3 %p2\\\";\"\n   [(set_attr \"v8type\" \"alu_ext\")\n-   (set_attr \"type\" \"arlo_reg\")\n+   (set_attr \"type\" \"alu_ext\")\n    (set_attr \"mode\" \"SI\")]\n )\n \n@@ -2104,7 +2104,7 @@\n     DONE;\n   }\n   [(set_attr \"v8type\" \"alu\")\n-   (set_attr \"type\" \"arlo_reg\")\n+   (set_attr \"type\" \"alu_reg\")\n    (set_attr \"mode\" \"DI\")]\n )\n \n@@ -2116,7 +2116,7 @@\n    neg\\\\t%<w>0, %<w>1\n    neg\\\\t%<rtn>0<vas>, %<rtn>1<vas>\"\n   [(set_attr \"v8type\" \"alu\")\n-   (set_attr \"type\" \"arlo_reg\")\n+   (set_attr \"type\" \"alu_reg\")\n    (set_attr \"simd_type\" \"*,simd_negabs\")\n    (set_attr \"simd\" \"*,yes\")\n    (set_attr \"mode\" \"<MODE>\")\n@@ -2130,7 +2130,7 @@\n   \"\"\n   \"neg\\\\t%w0, %w1\"\n   [(set_attr \"v8type\" \"alu\")\n-   (set_attr \"type\" \"arlo_reg\")\n+   (set_attr \"type\" \"alu_reg\")\n    (set_attr \"mode\" \"SI\")]\n )\n \n@@ -2141,7 +2141,7 @@\n   \"\"\n   \"ngc\\\\t%<w>0, %<w>1\"\n   [(set_attr \"v8type\" \"adc\")\n-   (set_attr \"type\" \"arlo_reg\")\n+   (set_attr \"type\" \"adc_reg\")\n    (set_attr \"mode\" \"<MODE>\")]\n )\n \n@@ -2153,7 +2153,7 @@\n   \"\"\n   \"ngc\\\\t%w0, %w1\"\n   [(set_attr \"v8type\" \"adc\")\n-   (set_attr \"type\" \"arlo_reg\")\n+   (set_attr \"type\" \"adc_reg\")\n    (set_attr \"mode\" \"SI\")]\n )\n \n@@ -2166,7 +2166,7 @@\n   \"\"\n   \"negs\\\\t%<w>0, %<w>1\"\n   [(set_attr \"v8type\" \"alus\")\n-   (set_attr \"type\" \"arlo_reg\")\n+   (set_attr \"type\" \"alus_reg\")\n    (set_attr \"mode\" \"<MODE>\")]\n )\n \n@@ -2180,7 +2180,7 @@\n   \"\"\n   \"negs\\\\t%w0, %w1\"\n   [(set_attr \"v8type\" \"alus\")\n-   (set_attr \"type\" \"arlo_reg\")\n+   (set_attr \"type\" \"alus_reg\")\n    (set_attr \"mode\" \"SI\")]\n )\n \n@@ -2196,7 +2196,7 @@\n   \"\"\n   \"negs\\\\t%<w>0, %<w>1, <shift> %2\"\n   [(set_attr \"v8type\" \"alus_shift\")\n-   (set_attr \"type\" \"arlo_shift\")\n+   (set_attr \"type\" \"alus_shift_imm\")\n    (set_attr \"mode\" \"<MODE>\")]\n )\n \n@@ -2208,7 +2208,7 @@\n   \"\"\n   \"neg\\\\t%<w>0, %<w>1, <shift> %2\"\n   [(set_attr \"v8type\" \"alu_shift\")\n-   (set_attr \"type\" \"arlo_shift\")\n+   (set_attr \"type\" \"alu_shift_imm\")\n    (set_attr \"mode\" \"<MODE>\")]\n )\n \n@@ -2222,7 +2222,7 @@\n   \"\"\n   \"neg\\\\t%w0, %w1, <shift> %2\"\n   [(set_attr \"v8type\" \"alu_shift\")\n-   (set_attr \"type\" \"arlo_shift\")\n+   (set_attr \"type\" \"alu_shift_imm\")\n    (set_attr \"mode\" \"SI\")]\n )\n \n@@ -2234,7 +2234,7 @@\n   \"\"\n   \"neg\\\\t%<w>0, %<w>1, lsl %p2\"\n   [(set_attr \"v8type\" \"alu_shift\")\n-   (set_attr \"type\" \"arlo_shift\")\n+   (set_attr \"type\" \"alu_shift_imm\")\n    (set_attr \"mode\" \"<MODE>\")]\n )\n \n@@ -2248,7 +2248,7 @@\n   \"\"\n   \"neg\\\\t%w0, %w1, lsl %p2\"\n   [(set_attr \"v8type\" \"alu_shift\")\n-   (set_attr \"type\" \"arlo_shift\")\n+   (set_attr \"type\" \"alu_shift_imm\")\n    (set_attr \"mode\" \"SI\")]\n )\n \n@@ -2459,7 +2459,7 @@\n    cmp\\\\t%<w>0, %<w>1\n    cmn\\\\t%<w>0, #%n1\"\n   [(set_attr \"v8type\" \"alus\")\n-   (set_attr \"type\" \"arlo_reg,arlo_imm,arlo_imm\")\n+   (set_attr \"type\" \"alus_reg,alus_imm,alus_imm\")\n    (set_attr \"mode\" \"<MODE>\")]\n )\n \n@@ -2498,7 +2498,7 @@\n   \"\"\n   \"cmp\\\\t%<w>2, %<w>0, <shift> %1\"\n   [(set_attr \"v8type\" \"alus_shift\")\n-   (set_attr \"type\" \"arlo_shift\")\n+   (set_attr \"type\" \"alus_shift_imm\")\n    (set_attr \"mode\" \"<MODE>\")]\n )\n \n@@ -2510,7 +2510,7 @@\n   \"\"\n   \"cmp\\\\t%<GPI:w>1, %<GPI:w>0, <su>xt<ALLX:size>\"\n   [(set_attr \"v8type\" \"alus_ext\")\n-   (set_attr \"type\" \"arlo_reg\")\n+   (set_attr \"type\" \"alus_ext\")\n    (set_attr \"mode\" \"<GPI:MODE>\")]\n )\n \n@@ -2524,7 +2524,7 @@\n   \"\"\n   \"cmp\\\\t%<GPI:w>2, %<GPI:w>0, <su>xt<ALLX:size> %1\"\n   [(set_attr \"v8type\" \"alus_ext\")\n-   (set_attr \"type\" \"arlo_reg\")\n+   (set_attr \"type\" \"alus_ext\")\n    (set_attr \"mode\" \"<GPI:MODE>\")]\n )\n \n@@ -2565,7 +2565,7 @@\n   \"\"\n   \"cset\\\\t%<w>0, %m1\"\n   [(set_attr \"v8type\" \"csel\")\n-   (set_attr \"type\" \"arlo_reg\")\n+   (set_attr \"type\" \"csel\")\n    (set_attr \"mode\" \"<MODE>\")]\n )\n \n@@ -2578,7 +2578,7 @@\n   \"\"\n   \"cset\\\\t%w0, %m1\"\n   [(set_attr \"v8type\" \"csel\")\n-   (set_attr \"type\" \"arlo_reg\")\n+   (set_attr \"type\" \"csel\")\n    (set_attr \"mode\" \"SI\")]\n )\n \n@@ -2589,7 +2589,7 @@\n   \"\"\n   \"csetm\\\\t%<w>0, %m1\"\n   [(set_attr \"v8type\" \"csel\")\n-   (set_attr \"type\" \"arlo_reg\")\n+   (set_attr \"type\" \"csel\")\n    (set_attr \"mode\" \"<MODE>\")]\n )\n \n@@ -2602,7 +2602,7 @@\n   \"\"\n   \"csetm\\\\t%w0, %m1\"\n   [(set_attr \"v8type\" \"csel\")\n-   (set_attr \"type\" \"arlo_reg\")\n+   (set_attr \"type\" \"csel\")\n    (set_attr \"mode\" \"SI\")]\n )\n \n@@ -2657,7 +2657,7 @@\n    mov\\\\t%<w>0, -1\n    mov\\\\t%<w>0, 1\"\n   [(set_attr \"v8type\" \"csel\")\n-   (set_attr \"type\" \"arlo_reg\")\n+   (set_attr \"type\" \"csel\")\n    (set_attr \"mode\" \"<MODE>\")]\n )\n \n@@ -2682,7 +2682,7 @@\n    mov\\\\t%w0, -1\n    mov\\\\t%w0, 1\"\n   [(set_attr \"v8type\" \"csel\")\n-   (set_attr \"type\" \"arlo_reg\")\n+   (set_attr \"type\" \"csel\")\n    (set_attr \"mode\" \"SI\")]\n )\n \n@@ -2696,7 +2696,7 @@\n   \"TARGET_FLOAT\"\n   \"fcsel\\\\t%<s>0, %<s>3, %<s>4, %m1\"\n   [(set_attr \"v8type\" \"fcsel\")\n-   (set_attr \"type\" \"arlo_reg\")\n+   (set_attr \"type\" \"fcsel\")\n    (set_attr \"mode\" \"<MODE>\")]\n )\n \n@@ -2746,7 +2746,7 @@\n   \"\"\n   \"csinc\\\\t%<w>0, %<w>1, %<w>1, %M2\"\n   [(set_attr \"v8type\" \"csel\")\n-   (set_attr \"type\" \"arlo_reg\")\n+   (set_attr \"type\" \"csel\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"csinc3<mode>_insn\"\n@@ -2760,7 +2760,7 @@\n   \"\"\n   \"csinc\\\\t%<w>0, %<w>4, %<w>3, %M1\"\n   [(set_attr \"v8type\" \"csel\")\n-   (set_attr \"type\" \"arlo_reg\")\n+   (set_attr \"type\" \"csel\")\n    (set_attr \"mode\" \"<MODE>\")]\n )\n \n@@ -2774,7 +2774,7 @@\n   \"\"\n   \"csinv\\\\t%<w>0, %<w>4, %<w>3, %M1\"\n   [(set_attr \"v8type\" \"csel\")\n-   (set_attr \"type\" \"arlo_reg\")\n+   (set_attr \"type\" \"csel\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"*csneg3<mode>_insn\"\n@@ -2787,7 +2787,7 @@\n   \"\"\n   \"csneg\\\\t%<w>0, %<w>4, %<w>3, %M1\"\n   [(set_attr \"v8type\" \"csel\")\n-   (set_attr \"type\" \"arlo_reg\")\n+   (set_attr \"type\" \"csel\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n ;; -------------------------------------------------------------------\n@@ -2801,7 +2801,7 @@\n   \"\"\n   \"<logical>\\\\t%<w>0, %<w>1, %<w>2\"\n   [(set_attr \"v8type\" \"logic,logic_imm\")\n-   (set_attr \"type\" \"arlo_reg,arlo_imm\")\n+   (set_attr \"type\" \"logic_reg,logic_imm\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n ;; zero_extend version of above\n@@ -2813,7 +2813,7 @@\n   \"\"\n   \"<logical>\\\\t%w0, %w1, %w2\"\n   [(set_attr \"v8type\" \"logic,logic_imm\")\n-   (set_attr \"type\" \"arlo_reg,arlo_imm\")\n+   (set_attr \"type\" \"logic_reg,logic_imm\")\n    (set_attr \"mode\" \"SI\")])\n \n (define_insn \"*and<mode>3_compare0\"\n@@ -2827,7 +2827,7 @@\n   \"\"\n   \"ands\\\\t%<w>0, %<w>1, %<w>2\"\n   [(set_attr \"v8type\" \"logics,logics_imm\")\n-   (set_attr \"type\" \"arlo_reg,arlo_imm\")\n+   (set_attr \"type\" \"logics_reg,logics_imm\")\n    (set_attr \"mode\" \"<MODE>\")]\n )\n \n@@ -2843,7 +2843,7 @@\n   \"\"\n   \"ands\\\\t%w0, %w1, %w2\"\n   [(set_attr \"v8type\" \"logics,logics_imm\")\n-   (set_attr \"type\" \"arlo_reg,arlo_imm\")\n+   (set_attr \"type\" \"logics_reg,logics_imm\")\n    (set_attr \"mode\" \"SI\")]\n )\n \n@@ -2860,7 +2860,7 @@\n   \"\"\n   \"ands\\\\t%<w>0, %<w>3, %<w>1, <SHIFT:shift> %2\"\n   [(set_attr \"v8type\" \"logics_shift\")\n-   (set_attr \"type\" \"arlo_shift\")\n+   (set_attr \"type\" \"logics_shift_imm\")\n    (set_attr \"mode\" \"<MODE>\")]\n )\n \n@@ -2879,7 +2879,7 @@\n   \"\"\n   \"ands\\\\t%w0, %w3, %w1, <SHIFT:shift> %2\"\n   [(set_attr \"v8type\" \"logics_shift\")\n-   (set_attr \"type\" \"arlo_shift\")\n+   (set_attr \"type\" \"logics_shift_imm\")\n    (set_attr \"mode\" \"SI\")]\n )\n \n@@ -2892,7 +2892,7 @@\n   \"\"\n   \"<LOGICAL:logical>\\\\t%<w>0, %<w>3, %<w>1, <SHIFT:shift> %2\"\n   [(set_attr \"v8type\" \"logic_shift\")\n-   (set_attr \"type\" \"arlo_shift\")\n+   (set_attr \"type\" \"logic_shift_imm\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n ;; zero_extend version of above\n@@ -2906,7 +2906,7 @@\n   \"\"\n   \"<LOGICAL:logical>\\\\t%w0, %w3, %w1, <SHIFT:shift> %2\"\n   [(set_attr \"v8type\" \"logic_shift\")\n-   (set_attr \"type\" \"arlo_shift\")\n+   (set_attr \"type\" \"logic_shift_imm\")\n    (set_attr \"mode\" \"SI\")])\n \n (define_insn \"one_cmpl<mode>2\"\n@@ -2915,7 +2915,7 @@\n   \"\"\n   \"mvn\\\\t%<w>0, %<w>1\"\n   [(set_attr \"v8type\" \"logic\")\n-   (set_attr \"type\" \"arlo_reg\")\n+   (set_attr \"type\" \"logic_reg\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"*one_cmpl_<optab><mode>2\"\n@@ -2925,7 +2925,7 @@\n   \"\"\n   \"mvn\\\\t%<w>0, %<w>1, <shift> %2\"\n   [(set_attr \"v8type\" \"logic_shift\")\n-   (set_attr \"type\" \"arlo_shift\")\n+   (set_attr \"type\" \"logic_shift_imm\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"*<LOGICAL:optab>_one_cmpl<mode>3\"\n@@ -2936,7 +2936,7 @@\n   \"\"\n   \"<LOGICAL:nlogical>\\\\t%<w>0, %<w>2, %<w>1\"\n   [(set_attr \"v8type\" \"logic\")\n-   (set_attr \"type\" \"arlo_reg\")\n+   (set_attr \"type\" \"logic_reg\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"*and_one_cmpl<mode>3_compare0\"\n@@ -2951,7 +2951,7 @@\n   \"\"\n   \"bics\\\\t%<w>0, %<w>2, %<w>1\"\n   [(set_attr \"v8type\" \"logics\")\n-   (set_attr \"type\" \"arlo_reg\")\n+   (set_attr \"type\" \"logics_reg\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n ;; zero_extend version of above\n@@ -2967,7 +2967,7 @@\n   \"\"\n   \"bics\\\\t%w0, %w2, %w1\"\n   [(set_attr \"v8type\" \"logics\")\n-   (set_attr \"type\" \"arlo_reg\")\n+   (set_attr \"type\" \"logics_reg\")\n    (set_attr \"mode\" \"SI\")])\n \n (define_insn \"*<LOGICAL:optab>_one_cmpl_<SHIFT:optab><mode>3\"\n@@ -2980,7 +2980,7 @@\n   \"\"\n   \"<LOGICAL:nlogical>\\\\t%<w>0, %<w>3, %<w>1, <SHIFT:shift> %2\"\n   [(set_attr \"v8type\" \"logic_shift\")\n-   (set_attr \"type\" \"arlo_shift\")\n+   (set_attr \"type\" \"logics_shift_imm\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"*and_one_cmpl_<SHIFT:optab><mode>3_compare0\"\n@@ -2999,7 +2999,7 @@\n   \"\"\n   \"bics\\\\t%<w>0, %<w>3, %<w>1, <SHIFT:shift> %2\"\n   [(set_attr \"v8type\" \"logics_shift\")\n-   (set_attr \"type\" \"arlo_shift\")\n+   (set_attr \"type\" \"logics_shift_imm\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n ;; zero_extend version of above\n@@ -3019,7 +3019,7 @@\n   \"\"\n   \"bics\\\\t%w0, %w3, %w1, <SHIFT:shift> %2\"\n   [(set_attr \"v8type\" \"logics_shift\")\n-   (set_attr \"type\" \"arlo_shift\")\n+   (set_attr \"type\" \"logics_shift_imm\")\n    (set_attr \"mode\" \"SI\")])\n \n (define_insn \"clz<mode>2\"\n@@ -3061,7 +3061,7 @@\n   \"\"\n   \"rbit\\\\t%<w>0, %<w>1\"\n   [(set_attr \"v8type\" \"rbit\")\n-   (set_attr \"type\" \"clz\")\n+   (set_attr \"type\" \"rbit\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_expand \"ctz<mode>2\"\n@@ -3084,7 +3084,7 @@\n   \"\"\n   \"tst\\\\t%<w>0, %<w>1\"\n   [(set_attr \"v8type\" \"logics\")\n-   (set_attr \"type\" \"arlo_reg\")\n+   (set_attr \"type\" \"logics_reg\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"*and_<SHIFT:optab><mode>3nr_compare0\"\n@@ -3098,7 +3098,7 @@\n   \"\"\n   \"tst\\\\t%<w>2, %<w>0, <SHIFT:shift> %1\"\n   [(set_attr \"v8type\" \"logics_shift\")\n-   (set_attr \"type\" \"arlo_shift\")\n+   (set_attr \"type\" \"logics_shift_imm\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n ;; -------------------------------------------------------------------\n@@ -3203,7 +3203,7 @@\n    (set_attr \"simd_type\" \"simd_shift_imm,simd_shift,*\")\n    (set_attr \"simd_mode\" \"<MODE>,<MODE>,*\")\n    (set_attr \"v8type\" \"*,*,shift\")\n-   (set_attr \"type\" \"*,*,shift\")\n+   (set_attr \"type\" \"*,*,shift_reg\")\n    (set_attr \"mode\" \"*,*,<MODE>\")]\n )\n \n@@ -3222,7 +3222,7 @@\n    (set_attr \"simd_type\" \"simd_shift_imm,simd_shift,*\")\n    (set_attr \"simd_mode\" \"<MODE>,<MODE>,*\")\n    (set_attr \"v8type\" \"*,*,shift\")\n-   (set_attr \"type\" \"*,*,shift\")\n+   (set_attr \"type\" \"*,*,shift_reg\")\n    (set_attr \"mode\" \"*,*,<MODE>\")]\n )\n \n@@ -3267,7 +3267,7 @@\n    (set_attr \"simd_type\" \"simd_shift_imm,simd_shift,*\")\n    (set_attr \"simd_mode\" \"<MODE>,<MODE>,*\")\n    (set_attr \"v8type\" \"*,*,shift\")\n-   (set_attr \"type\" \"*,*,shift\")\n+   (set_attr \"type\" \"*,*,shift_reg\")\n    (set_attr \"mode\" \"*,*,<MODE>\")]\n )\n \n@@ -3365,7 +3365,7 @@\n   \"\"\n   \"ror\\\\t%<w>0, %<w>1, %<w>2\"\n   [(set_attr \"v8type\" \"shift\")\n-   (set_attr \"type\" \"shift\")\n+   (set_attr \"type\" \"shift_reg\")\n    (set_attr \"mode\" \"<MODE>\")]\n )\n \n@@ -3378,7 +3378,7 @@\n   \"\"\n   \"<shift>\\\\t%w0, %w1, %w2\"\n   [(set_attr \"v8type\" \"shift\")\n-   (set_attr \"type\" \"shift\")\n+   (set_attr \"type\" \"shift_reg\")\n    (set_attr \"mode\" \"SI\")]\n )\n \n@@ -3389,7 +3389,7 @@\n   \"\"\n   \"lsl\\\\t%<w>0, %<w>1, %<w>2\"\n   [(set_attr \"v8type\" \"shift\")\n-   (set_attr \"type\" \"shift\")\n+   (set_attr \"type\" \"shift_reg\")\n    (set_attr \"mode\" \"<MODE>\")]\n )\n \n@@ -3403,7 +3403,7 @@\n   return \"<bfshift>\\t%w0, %w1, %2, %3\";\n }\n   [(set_attr \"v8type\" \"bfm\")\n-   (set_attr \"type\" \"arlo_reg\")\n+   (set_attr \"type\" \"bfm\")\n    (set_attr \"mode\" \"<MODE>\")]\n )\n \n@@ -3417,7 +3417,7 @@\n    (UINTVAL (operands[3]) + UINTVAL (operands[4]) == GET_MODE_BITSIZE (<MODE>mode))\"\n   \"extr\\\\t%<w>0, %<w>1, %<w>2, %4\"\n   [(set_attr \"v8type\" \"shift\")\n-   (set_attr \"type\" \"shift\")\n+   (set_attr \"type\" \"shift_imm\")\n    (set_attr \"mode\" \"<MODE>\")]\n )\n \n@@ -3433,7 +3433,7 @@\n    (UINTVAL (operands[3]) + UINTVAL (operands[4]) == 32)\"\n   \"extr\\\\t%w0, %w1, %w2, %4\"\n   [(set_attr \"v8type\" \"shift\")\n-   (set_attr \"type\" \"shift\")\n+   (set_attr \"type\" \"shift_imm\")\n    (set_attr \"mode\" \"SI\")]\n )\n \n@@ -3447,7 +3447,7 @@\n   return \"ror\\\\t%<w>0, %<w>1, %3\";\n }\n   [(set_attr \"v8type\" \"shift\")\n-   (set_attr \"type\" \"shift\")\n+   (set_attr \"type\" \"shift_imm\")\n    (set_attr \"mode\" \"<MODE>\")]\n )\n \n@@ -3463,7 +3463,7 @@\n   return \"ror\\\\t%w0, %w1, %3\";\n }\n   [(set_attr \"v8type\" \"shift\")\n-   (set_attr \"type\" \"shift\")\n+   (set_attr \"type\" \"shift_imm\")\n    (set_attr \"mode\" \"SI\")]\n )\n \n@@ -3478,7 +3478,7 @@\n   return \"<su>bfiz\\t%<GPI:w>0, %<GPI:w>1, %2, %3\";\n }\n   [(set_attr \"v8type\" \"bfm\")\n-   (set_attr \"type\" \"arlo_reg\")\n+   (set_attr \"type\" \"bfm\")\n    (set_attr \"mode\" \"<GPI:MODE>\")]\n )\n \n@@ -3493,7 +3493,7 @@\n   return \"ubfx\\t%<GPI:w>0, %<GPI:w>1, %2, %3\";\n }\n   [(set_attr \"v8type\" \"bfm\")\n-   (set_attr \"type\" \"arlo_reg\")\n+   (set_attr \"type\" \"bfm\")\n    (set_attr \"mode\" \"<GPI:MODE>\")]\n )\n \n@@ -3508,7 +3508,7 @@\n   return \"sbfx\\\\t%<GPI:w>0, %<GPI:w>1, %2, %3\";\n }\n   [(set_attr \"v8type\" \"bfm\")\n-   (set_attr \"type\" \"arlo_reg\")\n+   (set_attr \"type\" \"bfm\")\n    (set_attr \"mode\" \"<GPI:MODE>\")]\n )\n \n@@ -3533,7 +3533,7 @@\n   \"\"\n   \"<su>bfx\\\\t%<w>0, %<w>1, %3, %2\"\n   [(set_attr \"v8type\" \"bfm\")\n-   (set_attr \"type\" \"arlo_reg\")\n+   (set_attr \"type\" \"bfm\")\n    (set_attr \"mode\" \"<MODE>\")]\n )\n \n@@ -3578,7 +3578,7 @@\n \t > GET_MODE_BITSIZE (<MODE>mode)))\"\n   \"bfi\\\\t%<w>0, %<w>3, %2, %1\"\n   [(set_attr \"v8type\" \"bfm\")\n-   (set_attr \"type\" \"arlo_reg\")\n+   (set_attr \"type\" \"bfm\")\n    (set_attr \"mode\" \"<MODE>\")]\n )\n \n@@ -3594,7 +3594,7 @@\n \t > GET_MODE_BITSIZE (<MODE>mode)))\"\n   \"bfxil\\\\t%<w>0, %<w>2, %3, %1\"\n   [(set_attr \"v8type\" \"bfm\")\n-   (set_attr \"type\" \"arlo_reg\")\n+   (set_attr \"type\" \"bfm\")\n    (set_attr \"mode\" \"<MODE>\")]\n )\n \n@@ -3611,7 +3611,7 @@\n   return \"<su>bfiz\\t%<GPI:w>0, %<GPI:w>1, %2, %3\";\n }\n   [(set_attr \"v8type\" \"bfm\")\n-   (set_attr \"type\" \"arlo_reg\")\n+   (set_attr \"type\" \"bfm\")\n    (set_attr \"mode\" \"<GPI:MODE>\")]\n )\n \n@@ -3626,7 +3626,7 @@\n    && (INTVAL (operands[3]) & ((1 << INTVAL (operands[2])) - 1)) == 0\"\n   \"ubfiz\\\\t%<w>0, %<w>1, %2, %P3\"\n   [(set_attr \"v8type\" \"bfm\")\n-   (set_attr \"type\" \"arlo_reg\")\n+   (set_attr \"type\" \"bfm\")\n    (set_attr \"mode\" \"<MODE>\")]\n )\n \n@@ -3636,7 +3636,7 @@\n   \"\"\n   \"rev\\\\t%<w>0, %<w>1\"\n   [(set_attr \"v8type\" \"rev\")\n-   (set_attr \"type\" \"arlo_reg\")\n+   (set_attr \"type\" \"rev\")\n    (set_attr \"mode\" \"<MODE>\")]\n )\n \n@@ -3646,7 +3646,7 @@\n   \"\"\n   \"rev16\\\\t%w0, %w1\"\n   [(set_attr \"v8type\" \"rev\")\n-   (set_attr \"type\" \"arlo_reg\")\n+   (set_attr \"type\" \"rev\")\n    (set_attr \"mode\" \"HI\")]\n )\n \n@@ -3657,7 +3657,7 @@\n   \"\"\n   \"rev\\\\t%w0, %w1\"\n   [(set_attr \"v8type\" \"rev\")\n-   (set_attr \"type\" \"arlo_reg\")\n+   (set_attr \"type\" \"rev\")\n    (set_attr \"mode\" \"SI\")]\n )\n \n@@ -4112,7 +4112,7 @@\n   \"\"\n   \"add\\\\t%<w>0, %<w>1, :lo12:%a2\"\n   [(set_attr \"v8type\" \"alu\")\n-   (set_attr \"type\" \"arlo_reg\")\n+   (set_attr \"type\" \"alu_reg\")\n    (set_attr \"mode\" \"<MODE>\")]\n )\n \n@@ -4209,7 +4209,7 @@\n   \"\"\n   \"add\\\\t%0, %1, #%G2\\;add\\\\t%0, %0, #%L2\"\n   [(set_attr \"v8type\" \"alu\")\n-   (set_attr \"type\" \"arlo_reg\")\n+   (set_attr \"type\" \"alu_reg\")\n    (set_attr \"mode\" \"DI\")\n    (set_attr \"length\" \"8\")]\n )"}, {"sha": "f17fa884e31b05a95f174ba7af7aa5092eaf8d98", "filename": "gcc/config/arm/arm-fixed.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4150e1d402f8d1c8f23dfbdb5157978133c42f/gcc%2Fconfig%2Farm%2Farm-fixed.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4150e1d402f8d1c8f23dfbdb5157978133c42f/gcc%2Fconfig%2Farm%2Farm-fixed.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-fixed.md?ref=6e4150e1d402f8d1c8f23dfbdb5157978133c42f", "patch": "@@ -406,7 +406,7 @@\n   [(set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"no\")\n    (set_attr \"shift\" \"1\")\n-   (set_attr \"type\" \"arlo_shift\")])\n+   (set_attr \"type\" \"alu_shift_imm\")])\n \n (define_insn \"arm_usatsihi\"\n   [(set (match_operand:HI 0 \"s_register_operand\" \"=r\")"}, {"sha": "cac98cc97aa90de2d8ad37b426d3c121eccb6138", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4150e1d402f8d1c8f23dfbdb5157978133c42f/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4150e1d402f8d1c8f23dfbdb5157978133c42f/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=6e4150e1d402f8d1c8f23dfbdb5157978133c42f", "patch": "@@ -8664,8 +8664,14 @@ xscale_sched_adjust_cost (rtx insn, rtx link, rtx dep, int * cost)\n \t instruction we depend on is another ALU instruction, then we may\n \t have to account for an additional stall.  */\n       if (shift_opnum != 0\n-\t  && (attr_type == TYPE_ARLO_SHIFT\n-\t      || attr_type == TYPE_ARLO_SHIFT_REG\n+\t  && (attr_type == TYPE_ALU_SHIFT_IMM\n+\t      || attr_type == TYPE_ALUS_SHIFT_IMM\n+\t      || attr_type == TYPE_LOGIC_SHIFT_IMM\n+\t      || attr_type == TYPE_LOGICS_SHIFT_IMM\n+\t      || attr_type == TYPE_ALU_SHIFT_REG\n+\t      || attr_type == TYPE_ALUS_SHIFT_REG\n+\t      || attr_type == TYPE_LOGIC_SHIFT_REG\n+\t      || attr_type == TYPE_LOGICS_SHIFT_REG\n \t      || attr_type == TYPE_MOV_SHIFT\n \t      || attr_type == TYPE_MVN_SHIFT\n \t      || attr_type == TYPE_MOV_SHIFT_REG\n@@ -8952,9 +8958,17 @@ cortexa7_older_only (rtx insn)\n \n   switch (get_attr_type (insn))\n     {\n-    case TYPE_ARLO_REG:\n+    case TYPE_ALU_REG:\n+    case TYPE_ALUS_REG:\n+    case TYPE_LOGIC_REG:\n+    case TYPE_LOGICS_REG:\n+    case TYPE_ADC_REG:\n+    case TYPE_ADCS_REG:\n+    case TYPE_ADR:\n+    case TYPE_BFM:\n+    case TYPE_REV:\n     case TYPE_MVN_REG:\n-    case TYPE_SHIFT:\n+    case TYPE_SHIFT_IMM:\n     case TYPE_SHIFT_REG:\n     case TYPE_LOAD_BYTE:\n     case TYPE_LOAD1:\n@@ -8999,7 +9013,10 @@ cortexa7_younger (FILE *file, int verbose, rtx insn)\n \n   switch (get_attr_type (insn))\n     {\n-    case TYPE_ARLO_IMM:\n+    case TYPE_ALU_IMM:\n+    case TYPE_ALUS_IMM:\n+    case TYPE_LOGIC_IMM:\n+    case TYPE_LOGICS_IMM:\n     case TYPE_EXTEND:\n     case TYPE_MVN_IMM:\n     case TYPE_MOV_IMM:"}, {"sha": "4fb12aac35bb150038b44b97275b2c028c2e482b", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 100, "deletions": 92, "changes": 192, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4150e1d402f8d1c8f23dfbdb5157978133c42f/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4150e1d402f8d1c8f23dfbdb5157978133c42f/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=6e4150e1d402f8d1c8f23dfbdb5157978133c42f", "patch": "@@ -330,8 +330,12 @@\n ; than one on the main cpu execution unit.\n (define_attr \"core_cycles\" \"single,multi\"\n   (if_then_else (eq_attr \"type\"\n-    \"arlo_imm, arlo_reg,\\\n-    extend, shift, arlo_shift, float, fdivd, fdivs,\\\n+    \"adc_imm, adc_reg, adcs_imm, adcs_reg, adr, alu_ext, alu_imm, alu_reg,\\\n+    alu_shift_imm, alu_shift_reg, alus_ext, alus_imm, alus_reg,\\\n+    alus_shift_imm, alus_shift_reg, bfm, csel, rev, logic_imm, logic_reg,\\\n+    logic_shift_imm, logic_shift_reg, logics_imm, logics_reg,\\\n+    logics_shift_imm, logics_shift_reg, extend, shift_imm, float, fcsel,\\\n+    fdivd, fdivs,\\\n     wmmx_wor, wmmx_wxor, wmmx_wand, wmmx_wandn, wmmx_wmov, wmmx_tmcrr,\\\n     wmmx_tmrrc, wmmx_wldr, wmmx_wstr, wmmx_tmcr, wmmx_tmrc, wmmx_wadd,\\\n     wmmx_wsub, wmmx_wmul, wmmx_wmac, wmmx_wavg2, wmmx_tinsr, wmmx_textrm,\\\n@@ -616,8 +620,8 @@\n    (set_attr \"predicable_short_it\" \"yes,yes,yes,yes,no,no,no,no,no,no,no,no,no,no,no\")\n    (set_attr \"arch\" \"t2,t2,t2,t2,*,*,*,t2,t2,*,*,a,t2,t2,*\")\n    (set (attr \"type\") (if_then_else (match_operand 2 \"const_int_operand\" \"\")\n-\t\t      (const_string \"arlo_imm\")\n-\t\t      (const_string \"arlo_reg\")))\n+\t\t      (const_string \"alu_imm\")\n+\t\t      (const_string \"alu_reg\")))\n  ]\n )\n \n@@ -698,7 +702,7 @@\n    sub%.\\\\t%0, %1, #%n2\n    add%.\\\\t%0, %1, %2\"\n   [(set_attr \"conds\" \"set\")\n-   (set_attr \"type\" \"arlo_imm,arlo_imm,*\")]\n+   (set_attr \"type\" \"alus_imm,alus_imm,*\")]\n )\n \n (define_insn \"*addsi3_compare0_scratch\"\n@@ -714,7 +718,7 @@\n    cmn%?\\\\t%0, %1\"\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"predicable\" \"yes\")\n-   (set_attr \"type\" \"arlo_imm,arlo_imm,*\")\n+   (set_attr \"type\" \"alus_imm,alus_imm,*\")\n    ]\n )\n \n@@ -804,7 +808,7 @@\n    sub%.\\\\t%0, %1, #%n2\n    add%.\\\\t%0, %1, %2\"\n   [(set_attr \"conds\" \"set\")\n-   (set_attr \"type\"  \"arlo_imm,arlo_imm,*\")]\n+   (set_attr \"type\"  \"alus_imm,alus_imm,alus_reg\")]\n )\n \n (define_insn \"*addsi3_compare_op2\"\n@@ -821,7 +825,7 @@\n    add%.\\\\t%0, %1, %2\n    sub%.\\\\t%0, %1, #%n2\"\n   [(set_attr \"conds\" \"set\")\n-   (set_attr \"type\" \"arlo_imm,arlo_imm,*\")]\n+   (set_attr \"type\" \"alus_imm,alus_imm,alus_reg\")]\n )\n \n (define_insn \"*compare_addsi2_op0\"\n@@ -842,7 +846,7 @@\n    (set_attr \"arch\" \"t2,t2,*,*,*\")\n    (set_attr \"predicable_short_it\" \"yes,yes,no,no,no\")\n    (set_attr \"length\" \"2,2,4,4,4\")\n-   (set_attr \"type\" \"arlo_imm,*,arlo_imm,arlo_imm,*\")]\n+   (set_attr \"type\" \"alus_imm,alus_reg,alus_imm,alus_imm,alus_reg\")]\n )\n \n (define_insn \"*compare_addsi2_op1\"\n@@ -863,8 +867,7 @@\n    (set_attr \"arch\" \"t2,t2,*,*,*\")\n    (set_attr \"predicable_short_it\" \"yes,yes,no,no,no\")\n    (set_attr \"length\" \"2,2,4,4,4\")\n-   (set_attr \"type\"\n-      \"arlo_imm,*,arlo_imm,arlo_imm,*\")]\n+   (set_attr \"type\" \"alus_imm,alus_reg,alus_imm,alus_imm,alus_reg\")]\n  )\n \n (define_insn \"*addsi3_carryin_<optab>\"\n@@ -915,8 +918,8 @@\n    (set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"no\")\n    (set (attr \"type\") (if_then_else (match_operand 4 \"const_int_operand\" \"\")\n-\t\t      (const_string \"arlo_shift\")\n-\t\t      (const_string \"arlo_shift_reg\")))]\n+\t\t      (const_string \"alu_shift_imm\")\n+\t\t      (const_string \"alu_shift_reg\")))]\n )\n \n (define_insn \"*addsi3_carryin_clobercc_<optab>\"\n@@ -994,8 +997,8 @@\n   [(set_attr \"conds\" \"use\")\n    (set_attr \"predicable\" \"yes\")\n    (set (attr \"type\") (if_then_else (match_operand 4 \"const_int_operand\" \"\")\n-\t\t      (const_string \"arlo_shift\")\n-                     (const_string \"arlo_shift_reg\")))]\n+\t\t      (const_string \"alu_shift_imm\")\n+                     (const_string \"alu_shift_reg\")))]\n )\n \n (define_insn \"*rsbsi3_carryin_shift\"\n@@ -1011,8 +1014,8 @@\n   [(set_attr \"conds\" \"use\")\n    (set_attr \"predicable\" \"yes\")\n    (set (attr \"type\") (if_then_else (match_operand 4 \"const_int_operand\" \"\")\n-\t\t      (const_string \"arlo_shift\")\n-\t\t      (const_string \"arlo_shift_reg\")))]\n+\t\t      (const_string \"alu_shift_imm\")\n+\t\t      (const_string \"alu_shift_reg\")))]\n )\n \n ; transform ((x << y) - 1) to ~(~(x-1) << y)  Where X is a constant.\n@@ -1285,7 +1288,7 @@\n    (set_attr \"arch\" \"t2,t2,t2,t2,*,*,*,*,*\")\n    (set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"yes,yes,yes,yes,no,no,no,no,no\")\n-   (set_attr \"type\"  \"*,*,*,*,arlo_imm,arlo_imm,*,*,arlo_imm\")]\n+   (set_attr \"type\"  \"*,*,*,*,alu_imm,alu_imm,*,*,alu_imm\")]\n )\n \n (define_peephole2\n@@ -1315,7 +1318,7 @@\n    sub%.\\\\t%0, %1, %2\n    rsb%.\\\\t%0, %2, %1\"\n   [(set_attr \"conds\" \"set\")\n-   (set_attr \"type\"  \"arlo_imm,*,*\")]\n+   (set_attr \"type\"  \"alus_imm,alus_reg,alus_reg\")]\n )\n \n (define_insn \"subsi3_compare\"\n@@ -1330,7 +1333,7 @@\n    sub%.\\\\t%0, %1, %2\n    rsb%.\\\\t%0, %2, %1\"\n   [(set_attr \"conds\" \"set\")\n-   (set_attr \"type\" \"arlo_imm,*,*\")]\n+   (set_attr \"type\" \"alus_imm,alus_reg,alus_reg\")]\n )\n \n (define_expand \"subsf3\"\n@@ -2279,8 +2282,7 @@\n   [(set_attr \"length\" \"4,4,4,4,16\")\n    (set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"no,yes,no,no,no\")\n-   (set_attr \"type\"\n-     \"arlo_imm,arlo_imm,*,*,arlo_imm\")]\n+   (set_attr \"type\" \"logic_imm,logic_imm,logic_reg,logic_reg,logic_imm\")]\n )\n \n (define_insn \"*thumb1_andsi3_insn\"\n@@ -2290,7 +2292,7 @@\n   \"TARGET_THUMB1\"\n   \"and\\\\t%0, %2\"\n   [(set_attr \"length\" \"2\")\n-   (set_attr \"type\"  \"arlo_imm\")\n+   (set_attr \"type\"  \"logic_imm\")\n    (set_attr \"conds\" \"set\")])\n \n (define_insn \"*andsi3_compare0\"\n@@ -2307,7 +2309,7 @@\n    bic%.\\\\t%0, %1, #%B2\n    and%.\\\\t%0, %1, %2\"\n   [(set_attr \"conds\" \"set\")\n-   (set_attr \"type\" \"arlo_imm,arlo_imm,*\")]\n+   (set_attr \"type\" \"logics_imm,logics_imm,logics_reg\")]\n )\n \n (define_insn \"*andsi3_compare0_scratch\"\n@@ -2323,7 +2325,7 @@\n    bic%.\\\\t%2, %0, #%B1\n    tst%?\\\\t%0, %1\"\n   [(set_attr \"conds\" \"set\")\n-   (set_attr \"type\"  \"arlo_imm,arlo_imm,*\")]\n+   (set_attr \"type\"  \"logics_imm,logics_imm,logics_reg\")]\n )\n \n (define_insn \"*zeroextractsi_compare0_scratch\"\n@@ -2347,7 +2349,7 @@\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"no\")\n-   (set_attr \"type\" \"arlo_imm\")]\n+   (set_attr \"type\" \"logics_imm\")]\n )\n \n (define_insn_and_split \"*ne_zeroextractsi\"\n@@ -2775,7 +2777,8 @@\n   \"bfc%?\\t%0, %2, %1\"\n   [(set_attr \"length\" \"4\")\n    (set_attr \"predicable\" \"yes\")\n-   (set_attr \"predicable_short_it\" \"no\")]\n+   (set_attr \"predicable_short_it\" \"no\")\n+   (set_attr \"type\" \"bfm\")]\n )\n \n (define_insn \"insv_t2\"\n@@ -2787,7 +2790,8 @@\n   \"bfi%?\\t%0, %3, %2, %1\"\n   [(set_attr \"length\" \"4\")\n    (set_attr \"predicable\" \"yes\")\n-   (set_attr \"predicable_short_it\" \"no\")]\n+   (set_attr \"predicable_short_it\" \"no\")\n+   (set_attr \"type\" \"bfm\")]\n )\n \n ; constants for op 2 will never be given to these patterns.\n@@ -2897,8 +2901,8 @@\n   [(set_attr \"predicable\" \"yes\")\n    (set_attr \"shift\" \"2\")\n    (set (attr \"type\") (if_then_else (match_operand 3 \"const_int_operand\" \"\")\n-\t\t      (const_string \"arlo_shift\")\n-\t\t      (const_string \"arlo_shift_reg\")))]\n+\t\t      (const_string \"logic_shift_imm\")\n+\t\t      (const_string \"logic_shift_reg\")))]\n )\n \n (define_insn \"*andsi_notsi_si_compare0\"\n@@ -2911,7 +2915,8 @@\n \t(and:SI (not:SI (match_dup 2)) (match_dup 1)))]\n   \"TARGET_32BIT\"\n   \"bic%.\\\\t%0, %1, %2\"\n-  [(set_attr \"conds\" \"set\")]\n+  [(set_attr \"conds\" \"set\")\n+   (set_attr \"type\" \"logics_shift_reg\")]\n )\n \n (define_insn \"*andsi_notsi_si_compare0_scratch\"\n@@ -2923,7 +2928,8 @@\n    (clobber (match_scratch:SI 0 \"=r\"))]\n   \"TARGET_32BIT\"\n   \"bic%.\\\\t%0, %1, %2\"\n-  [(set_attr \"conds\" \"set\")]\n+  [(set_attr \"conds\" \"set\")\n+   (set_attr \"type\" \"logics_shift_reg\")]\n )\n \n (define_expand \"iordi3\"\n@@ -3057,7 +3063,7 @@\n    (set_attr \"arch\" \"32,t2,t2,32,32\")\n    (set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"no,yes,no,no,no\")\n-   (set_attr \"type\" \"arlo_imm,*,arlo_imm,*,*\")]\n+   (set_attr \"type\" \"logic_imm,logic_reg,logic_imm,logic_reg,logic_reg\")]\n )\n \n (define_insn \"*thumb1_iorsi3_insn\"\n@@ -3092,7 +3098,7 @@\n   \"TARGET_32BIT\"\n   \"orr%.\\\\t%0, %1, %2\"\n   [(set_attr \"conds\" \"set\")\n-   (set_attr \"type\" \"arlo_imm,*\")]\n+   (set_attr \"type\" \"logics_imm,logics_reg\")]\n )\n \n (define_insn \"*iorsi3_compare0_scratch\"\n@@ -3104,7 +3110,7 @@\n   \"TARGET_32BIT\"\n   \"orr%.\\\\t%0, %1, %2\"\n   [(set_attr \"conds\" \"set\")\n-   (set_attr \"type\" \"arlo_imm,*\")]\n+   (set_attr \"type\" \"logics_imm,logics_reg\")]\n )\n \n (define_expand \"xordi3\"\n@@ -3230,7 +3236,7 @@\n   [(set_attr \"length\" \"4,4,4,16\")\n    (set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"no,yes,no,no\")\n-   (set_attr \"type\"  \"arlo_imm,*,*,*\")]\n+   (set_attr \"type\"  \"logic_imm,logic_reg,logic_reg,logic_reg\")]\n )\n \n (define_insn \"*thumb1_xorsi3_insn\"\n@@ -3241,7 +3247,7 @@\n   \"eor\\\\t%0, %2\"\n   [(set_attr \"length\" \"2\")\n    (set_attr \"conds\" \"set\")\n-   (set_attr \"type\" \"arlo_imm\")]\n+   (set_attr \"type\" \"logics_reg\")]\n )\n \n (define_insn \"*xorsi3_compare0\"\n@@ -3254,7 +3260,7 @@\n   \"TARGET_32BIT\"\n   \"eor%.\\\\t%0, %1, %2\"\n   [(set_attr \"conds\" \"set\")\n-   (set_attr \"type\" \"arlo_imm,*\")]\n+   (set_attr \"type\" \"logics_imm,logics_reg\")]\n )\n \n (define_insn \"*xorsi3_compare0_scratch\"\n@@ -3265,7 +3271,7 @@\n   \"TARGET_32BIT\"\n   \"teq%?\\\\t%0, %1\"\n   [(set_attr \"conds\" \"set\")\n-   (set_attr \"type\" \"arlo_imm,*\")]\n+   (set_attr \"type\" \"logics_imm,logics_reg\")]\n )\n \n ; By splitting (IOR (AND (NOT A) (NOT B)) C) as D = AND (IOR A B) (NOT C), \n@@ -3754,7 +3760,7 @@\n   [(set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"no\")\n    (set_attr \"shift\" \"3\")\n-   (set_attr \"type\" \"arlo_shift\")])\n+   (set_attr \"type\" \"logic_shift_reg\")])\n \f\n ;; Shift and rotation insns\n \n@@ -3857,7 +3863,7 @@\n   \"TARGET_THUMB1\"\n   \"lsl\\\\t%0, %1, %2\"\n   [(set_attr \"length\" \"2\")\n-   (set_attr \"type\" \"shift,shift_reg\")\n+   (set_attr \"type\" \"shift_imm,shift_reg\")\n    (set_attr \"conds\" \"set\")])\n \n (define_expand \"ashrdi3\"\n@@ -3962,7 +3968,7 @@\n   \"TARGET_THUMB1\"\n   \"asr\\\\t%0, %1, %2\"\n   [(set_attr \"length\" \"2\")\n-   (set_attr \"type\" \"shift,shift_reg\")\n+   (set_attr \"type\" \"shift_imm,shift_reg\")\n    (set_attr \"conds\" \"set\")])\n \n (define_expand \"lshrdi3\"\n@@ -4059,7 +4065,7 @@\n   \"TARGET_THUMB1\"\n   \"lsr\\\\t%0, %1, %2\"\n   [(set_attr \"length\" \"2\")\n-   (set_attr \"type\" \"shift,shift_reg\")\n+   (set_attr \"type\" \"shift_imm,shift_reg\")\n    (set_attr \"conds\" \"set\")])\n \n (define_expand \"rotlsi3\"\n@@ -4121,7 +4127,7 @@\n    (set_attr \"predicable_short_it\" \"yes,no,no\")\n    (set_attr \"length\" \"4\")\n    (set_attr \"shift\" \"1\")\n-   (set_attr \"type\" \"arlo_shift_reg,arlo_shift,arlo_shift_reg\")]\n+   (set_attr \"type\" \"alu_shift_reg,alu_shift_imm,alu_shift_reg\")]\n )\n \n (define_insn \"*shiftsi3_compare\"\n@@ -4136,7 +4142,7 @@\n   \"* return arm_output_shift(operands, 1);\"\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"shift\" \"1\")\n-   (set_attr \"type\"  \"arlo_shift,arlo_shift_reg\")]\n+   (set_attr \"type\"  \"alus_shift_imm,alus_shift_reg\")]\n )\n \n (define_insn \"*shiftsi3_compare0\"\n@@ -4151,7 +4157,7 @@\n   \"* return arm_output_shift(operands, 1);\"\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"shift\" \"1\")\n-   (set_attr \"type\" \"arlo_shift,arlo_shift_reg\")]\n+   (set_attr \"type\" \"alus_shift_imm,alus_shift_reg\")]\n )\n \n (define_insn \"*shiftsi3_compare0_scratch\"\n@@ -4165,7 +4171,7 @@\n   \"* return arm_output_shift(operands, 1);\"\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"shift\" \"1\")\n-   (set_attr \"type\" \"shift,shift_reg\")]\n+   (set_attr \"type\" \"shift_imm,shift_reg\")]\n )\n \n (define_insn \"*not_shiftsi\"\n@@ -4507,7 +4513,8 @@\n   \"sbfx%?\\t%0, %1, %3, %2\"\n   [(set_attr \"length\" \"4\")\n    (set_attr \"predicable\" \"yes\")\n-   (set_attr \"predicable_short_it\" \"no\")]\n+   (set_attr \"predicable_short_it\" \"no\")\n+   (set_attr \"type\" \"bfm\")]\n )\n \n (define_insn \"extzv_t2\"\n@@ -4519,7 +4526,8 @@\n   \"ubfx%?\\t%0, %1, %3, %2\"\n   [(set_attr \"length\" \"4\")\n    (set_attr \"predicable\" \"yes\")\n-   (set_attr \"predicable_short_it\" \"no\")]\n+   (set_attr \"predicable_short_it\" \"no\")\n+   (set_attr \"type\" \"bfm\")]\n )\n \n \n@@ -5241,7 +5249,7 @@\n   \"@\n    #\n    ldr%(h%)\\\\t%0, %1\"\n-  [(set_attr \"type\" \"arlo_shift,load_byte\")\n+  [(set_attr \"type\" \"alu_shift_reg,load_byte\")\n    (set_attr \"predicable\" \"yes\")]\n )\n \n@@ -5262,7 +5270,7 @@\n \t\t (match_operand:SI 2 \"s_register_operand\" \"r\")))]\n   \"TARGET_INT_SIMD\"\n   \"uxtah%?\\\\t%0, %2, %1\"\n-  [(set_attr \"type\" \"arlo_shift\")\n+  [(set_attr \"type\" \"alu_shift_reg\")\n    (set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"no\")]\n )\n@@ -5312,7 +5320,7 @@\n    #\n    ldrb\\\\t%0, %1\"\n   [(set_attr \"length\" \"4,2\")\n-   (set_attr \"type\" \"arlo_shift,load_byte\")\n+   (set_attr \"type\" \"alu_shift_reg,load_byte\")\n    (set_attr \"pool_range\" \"*,32\")]\n )\n \n@@ -5335,7 +5343,7 @@\n    #\n    ldr%(b%)\\\\t%0, %1\\\\t%@ zero_extendqisi2\"\n   [(set_attr \"length\" \"8,4\")\n-   (set_attr \"type\" \"arlo_shift,load_byte\")\n+   (set_attr \"type\" \"alu_shift_reg,load_byte\")\n    (set_attr \"predicable\" \"yes\")]\n )\n \n@@ -5358,7 +5366,7 @@\n   \"uxtab%?\\\\t%0, %2, %1\"\n   [(set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"no\")\n-   (set_attr \"type\" \"arlo_shift\")]\n+   (set_attr \"type\" \"alu_shift_reg\")]\n )\n \n (define_split\n@@ -5580,7 +5588,7 @@\n    #\n    ldr%(sh%)\\\\t%0, %1\"\n   [(set_attr \"length\" \"8,4\")\n-   (set_attr \"type\" \"arlo_shift,load_byte\")\n+   (set_attr \"type\" \"alu_shift_reg,load_byte\")\n    (set_attr \"predicable\" \"yes\")\n    (set_attr \"pool_range\" \"*,256\")\n    (set_attr \"neg_pool_range\" \"*,244\")]\n@@ -5681,7 +5689,7 @@\n    #\n    ldr%(sb%)\\\\t%0, %1\"\n   [(set_attr \"length\" \"8,4\")\n-   (set_attr \"type\" \"arlo_shift,load_byte\")\n+   (set_attr \"type\" \"alu_shift_reg,load_byte\")\n    (set_attr \"predicable\" \"yes\")\n    (set_attr \"pool_range\" \"*,256\")\n    (set_attr \"neg_pool_range\" \"*,244\")]\n@@ -5707,7 +5715,7 @@\n \t\t (match_operand:SI 2 \"s_register_operand\" \"r\")))]\n   \"TARGET_INT_SIMD\"\n   \"sxtab%?\\\\t%0, %2, %1\"\n-  [(set_attr \"type\" \"arlo_shift\")\n+  [(set_attr \"type\" \"alu_shift_reg\")\n    (set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"no\")]\n )\n@@ -6484,7 +6492,7 @@\n    cmp%?\\\\t%0, #0\n    sub%.\\\\t%0, %1, #0\"\n   [(set_attr \"conds\" \"set\")\n-   (set_attr \"type\" \"arlo_imm,arlo_imm\")]\n+   (set_attr \"type\" \"alus_imm,alus_imm\")]\n )\n \n ;; Subroutine to store a half word from a register into memory.\n@@ -7078,7 +7086,7 @@\n    mov\\\\t%0, %1\n    mov\\\\t%0, %1\"\n   [(set_attr \"length\" \"2\")\n-   (set_attr \"type\" \"arlo_imm,load1,store1,mov_reg,mov_imm,mov_imm\")\n+   (set_attr \"type\" \"alu_imm,load1,store1,mov_reg,mov_imm,mov_imm\")\n    (set_attr \"pool_range\" \"*,32,*,*,*,*\")\n    (set_attr \"conds\" \"clob,nocond,nocond,nocond,nocond,clob\")])\n \n@@ -8164,34 +8172,34 @@\n    (set_attr \"arch\" \"t2,t2,any,any\")\n    (set_attr \"length\" \"2,2,4,4\")\n    (set_attr \"predicable\" \"yes\")\n-   (set_attr \"type\" \"*,*,*,arlo_imm\")]\n+   (set_attr \"type\" \"alus_reg,alus_reg,alus_reg,alus_imm\")]\n )\n \n (define_insn \"*cmpsi_shiftsi\"\n   [(set (reg:CC CC_REGNUM)\n-\t(compare:CC (match_operand:SI   0 \"s_register_operand\" \"r,r\")\n+\t(compare:CC (match_operand:SI   0 \"s_register_operand\" \"r,r,r\")\n \t\t    (match_operator:SI  3 \"shift_operator\"\n-\t\t     [(match_operand:SI 1 \"s_register_operand\" \"r,r\")\n-\t\t      (match_operand:SI 2 \"shift_amount_operand\" \"M,rM\")])))]\n+\t\t     [(match_operand:SI 1 \"s_register_operand\" \"r,r,r\")\n+\t\t      (match_operand:SI 2 \"shift_amount_operand\" \"M,r,M\")])))]\n   \"TARGET_32BIT\"\n   \"cmp%?\\\\t%0, %1%S3\"\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"shift\" \"1\")\n-   (set_attr \"arch\" \"32,a\")\n-   (set_attr \"type\" \"arlo_shift,arlo_shift_reg\")])\n+   (set_attr \"arch\" \"32,a,a\")\n+   (set_attr \"type\" \"alus_shift_imm,alu_shift_reg,alus_shift_imm\")])\n \n (define_insn \"*cmpsi_shiftsi_swp\"\n   [(set (reg:CC_SWP CC_REGNUM)\n \t(compare:CC_SWP (match_operator:SI 3 \"shift_operator\"\n-\t\t\t [(match_operand:SI 1 \"s_register_operand\" \"r,r\")\n-\t\t\t  (match_operand:SI 2 \"shift_amount_operand\" \"M,rM\")])\n-\t\t\t(match_operand:SI 0 \"s_register_operand\" \"r,r\")))]\n+\t\t\t [(match_operand:SI 1 \"s_register_operand\" \"r,r,r\")\n+\t\t\t  (match_operand:SI 2 \"shift_amount_operand\" \"M,r,M\")])\n+\t\t\t(match_operand:SI 0 \"s_register_operand\" \"r,r,r\")))]\n   \"TARGET_32BIT\"\n   \"cmp%?\\\\t%0, %1%S3\"\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"shift\" \"1\")\n-   (set_attr \"arch\" \"32,a\")\n-   (set_attr \"type\" \"arlo_shift,arlo_shift_reg\")])\n+   (set_attr \"arch\" \"32,a,a\")\n+   (set_attr \"type\" \"alus_shift_imm,alu_shift_reg,alus_shift_imm\")])\n \n (define_insn \"*arm_cmpsi_negshiftsi_si\"\n   [(set (reg:CC_Z CC_REGNUM)\n@@ -8204,8 +8212,8 @@\n   \"cmn%?\\\\t%0, %2%S1\"\n   [(set_attr \"conds\" \"set\")\n    (set (attr \"type\") (if_then_else (match_operand 3 \"const_int_operand\" \"\")\n-\t\t\t\t    (const_string \"arlo_shift\")\n-\t\t\t\t    (const_string \"arlo_shift_reg\")))\n+\t\t\t\t    (const_string \"alus_shift_imm\")\n+\t\t\t\t    (const_string \"alus_shift_reg\")))\n    (set_attr \"predicable\" \"yes\")]\n )\n \n@@ -9747,7 +9755,7 @@\n \t\t\t  (if_then_else\n \t\t\t   (match_operand:SI 3 \"mult_operator\" \"\")\n \t\t\t   (const_string \"no\") (const_string \"yes\"))])\n-   (set_attr \"type\" \"arlo_shift,arlo_shift,arlo_shift,arlo_shift_reg\")])\n+   (set_attr \"type\" \"alu_shift_imm,alu_shift_imm,alu_shift_imm,alu_shift_reg\")])\n \n (define_split\n   [(set (match_operand:SI 0 \"s_register_operand\" \"\")\n@@ -9784,7 +9792,7 @@\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"shift\" \"4\")\n    (set_attr \"arch\" \"32,a\")\n-   (set_attr \"type\" \"arlo_shift,arlo_shift_reg\")])\n+   (set_attr \"type\" \"alus_shift_imm,alus_shift_reg\")])\n \n (define_insn \"*arith_shiftsi_compare0_scratch\"\n   [(set (reg:CC_NOOV CC_REGNUM)\n@@ -9801,7 +9809,7 @@\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"shift\" \"4\")\n    (set_attr \"arch\" \"32,a\")\n-   (set_attr \"type\" \"arlo_shift,arlo_shift_reg\")])\n+   (set_attr \"type\" \"alus_shift_imm,alus_shift_reg\")])\n \n (define_insn \"*sub_shiftsi\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n@@ -9814,41 +9822,41 @@\n   [(set_attr \"predicable\" \"yes\")\n    (set_attr \"shift\" \"3\")\n    (set_attr \"arch\" \"32,a\")\n-   (set_attr \"type\" \"arlo_shift,arlo_shift_reg\")])\n+   (set_attr \"type\" \"alus_shift_imm,alus_shift_reg\")])\n \n (define_insn \"*sub_shiftsi_compare0\"\n   [(set (reg:CC_NOOV CC_REGNUM)\n \t(compare:CC_NOOV\n-\t (minus:SI (match_operand:SI 1 \"s_register_operand\" \"r,r\")\n+\t (minus:SI (match_operand:SI 1 \"s_register_operand\" \"r,r,r\")\n \t\t   (match_operator:SI 2 \"shift_operator\"\n-\t\t    [(match_operand:SI 3 \"s_register_operand\" \"r,r\")\n-\t\t     (match_operand:SI 4 \"shift_amount_operand\" \"M,rM\")]))\n+\t\t    [(match_operand:SI 3 \"s_register_operand\" \"r,r,r\")\n+\t\t     (match_operand:SI 4 \"shift_amount_operand\" \"M,r,M\")]))\n \t (const_int 0)))\n-   (set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n+   (set (match_operand:SI 0 \"s_register_operand\" \"=r,r,r\")\n \t(minus:SI (match_dup 1)\n \t\t  (match_op_dup 2 [(match_dup 3) (match_dup 4)])))]\n   \"TARGET_32BIT\"\n   \"sub%.\\\\t%0, %1, %3%S2\"\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"shift\" \"3\")\n-   (set_attr \"arch\" \"32,a\")\n-   (set_attr \"type\" \"arlo_shift,arlo_shift_reg\")])\n+   (set_attr \"arch\" \"32,a,a\")\n+   (set_attr \"type\" \"alus_shift_imm,alus_shift_reg,alus_shift_imm\")])\n \n (define_insn \"*sub_shiftsi_compare0_scratch\"\n   [(set (reg:CC_NOOV CC_REGNUM)\n \t(compare:CC_NOOV\n-\t (minus:SI (match_operand:SI 1 \"s_register_operand\" \"r,r\")\n+\t (minus:SI (match_operand:SI 1 \"s_register_operand\" \"r,r,r\")\n \t\t   (match_operator:SI 2 \"shift_operator\"\n-\t\t    [(match_operand:SI 3 \"s_register_operand\" \"r,r\")\n-\t\t     (match_operand:SI 4 \"shift_amount_operand\" \"M,rM\")]))\n+\t\t    [(match_operand:SI 3 \"s_register_operand\" \"r,r,r\")\n+\t\t     (match_operand:SI 4 \"shift_amount_operand\" \"M,r,M\")]))\n \t (const_int 0)))\n-   (clobber (match_scratch:SI 0 \"=r,r\"))]\n+   (clobber (match_scratch:SI 0 \"=r,r,r\"))]\n   \"TARGET_32BIT\"\n   \"sub%.\\\\t%0, %1, %3%S2\"\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"shift\" \"3\")\n-   (set_attr \"arch\" \"32,a\")\n-   (set_attr \"type\" \"arlo_shift,arlo_shift_reg\")])\n+   (set_attr \"arch\" \"32,a,a\")\n+   (set_attr \"type\" \"alus_shift_imm,alus_shift_reg,alus_shift_imm\")])\n \f\n \n (define_insn_and_split \"*and_scc\"\n@@ -10900,9 +10908,9 @@\n    (set_attr \"length\" \"4,4,8,8\")\n    (set_attr_alternative \"type\"\n                          [(if_then_else (match_operand 3 \"const_int_operand\" \"\")\n-                                        (const_string \"arlo_imm\" )\n+                                        (const_string \"alu_imm\" )\n                                         (const_string \"*\"))\n-                          (const_string \"arlo_imm\")\n+                          (const_string \"alu_imm\")\n                           (const_string \"*\")\n                           (const_string \"*\")])]\n )\n@@ -10942,9 +10950,9 @@\n    (set_attr \"length\" \"4,4,8,8\")\n    (set_attr_alternative \"type\"\n                          [(if_then_else (match_operand 3 \"const_int_operand\" \"\")\n-                                        (const_string \"arlo_imm\" )\n+                                        (const_string \"alu_imm\" )\n                                         (const_string \"*\"))\n-                          (const_string \"arlo_imm\")\n+                          (const_string \"alu_imm\")\n                           (const_string \"*\")\n                           (const_string \"*\")])]\n )"}, {"sha": "ce89f1db02acf1cc36a097423f3c7e9f2be3e898", "filename": "gcc/config/arm/arm1020e.md", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4150e1d402f8d1c8f23dfbdb5157978133c42f/gcc%2Fconfig%2Farm%2Farm1020e.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4150e1d402f8d1c8f23dfbdb5157978133c42f/gcc%2Fconfig%2Farm%2Farm1020e.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm1020e.md?ref=6e4150e1d402f8d1c8f23dfbdb5157978133c42f", "patch": "@@ -66,14 +66,20 @@\n ;; ALU operations with no shifted operand\n (define_insn_reservation \"1020alu_op\" 1 \n  (and (eq_attr \"tune\" \"arm1020e,arm1022e\")\n-      (eq_attr \"type\" \"arlo_imm,arlo_reg,shift,shift_reg,\\\n+      (eq_attr \"type\" \"alu_imm,alus_imm,logic_imm,logics_imm,\\\n+                       alu_reg,alus_reg,logic_reg,logics_reg,\\\n+                       adc_imm,adcs_imm,adc_reg,adcs_reg,\\\n+                       adr,bfm,rev,\\\n+                       shift_imm,shift_reg,\\\n                        mov_imm,mov_reg,mvn_imm,mvn_reg\"))\n  \"1020a_e,1020a_m,1020a_w\")\n \n ;; ALU operations with a shift-by-constant operand\n (define_insn_reservation \"1020alu_shift_op\" 1 \n  (and (eq_attr \"tune\" \"arm1020e,arm1022e\")\n-      (eq_attr \"type\" \"extend,arlo_shift,mov_shift,mvn_shift\"))\n+      (eq_attr \"type\" \"alu_shift_imm,alus_shift_imm,\\\n+                       logic_shift_imm,logics_shift_imm,\\\n+                       extend,mov_shift,mvn_shift\"))\n  \"1020a_e,1020a_m,1020a_w\")\n \n ;; ALU operations with a shift-by-register operand\n@@ -82,7 +88,9 @@\n ;; the execute stage.\n (define_insn_reservation \"1020alu_shift_reg_op\" 2 \n  (and (eq_attr \"tune\" \"arm1020e,arm1022e\")\n-      (eq_attr \"type\" \"arlo_shift_reg,mov_shift_reg,mvn_shift_reg\"))\n+      (eq_attr \"type\" \"alu_shift_reg,alus_shift_reg,\\\n+                       logic_shift_reg,logics_shift_reg,\\\n+                       mov_shift_reg,mvn_shift_reg\"))\n  \"1020a_e*2,1020a_m,1020a_w\")\n \n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}, {"sha": "6f4a8fa76e1d26f6d6e61ba2c6963dd8aa46194f", "filename": "gcc/config/arm/arm1026ejs.md", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4150e1d402f8d1c8f23dfbdb5157978133c42f/gcc%2Fconfig%2Farm%2Farm1026ejs.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4150e1d402f8d1c8f23dfbdb5157978133c42f/gcc%2Fconfig%2Farm%2Farm1026ejs.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm1026ejs.md?ref=6e4150e1d402f8d1c8f23dfbdb5157978133c42f", "patch": "@@ -66,14 +66,20 @@\n ;; ALU operations with no shifted operand\n (define_insn_reservation \"alu_op\" 1 \n  (and (eq_attr \"tune\" \"arm1026ejs\")\n-      (eq_attr \"type\" \"arlo_imm,arlo_reg,shift,shift_reg,\\\n+      (eq_attr \"type\" \"alu_imm,alus_imm,logic_imm,logics_imm,\\\n+                       alu_reg,alus_reg,logic_reg,logics_reg,\\\n+                       adc_imm,adcs_imm,adc_reg,adcs_reg,\\\n+                       adr,bfm,rev,\\\n+                       shift_imm,shift_reg,\\\n                        mov_imm,mov_reg,mvn_imm,mvn_reg\"))\n  \"a_e,a_m,a_w\")\n \n ;; ALU operations with a shift-by-constant operand\n (define_insn_reservation \"alu_shift_op\" 1 \n  (and (eq_attr \"tune\" \"arm1026ejs\")\n-      (eq_attr \"type\" \"extend,arlo_shift,mov_shift,mvn_shift\"))\n+      (eq_attr \"type\" \"alu_shift_imm,alus_shift_imm,\\\n+                       logic_shift_imm,logics_shift_imm,\\\n+                       extend,mov_shift,mvn_shift\"))\n  \"a_e,a_m,a_w\")\n \n ;; ALU operations with a shift-by-register operand\n@@ -82,7 +88,9 @@\n ;; the execute stage.\n (define_insn_reservation \"alu_shift_reg_op\" 2 \n  (and (eq_attr \"tune\" \"arm1026ejs\")\n-      (eq_attr \"type\" \"arlo_shift_reg,mov_shift_reg,mvn_shift_reg\"))\n+      (eq_attr \"type\" \"alu_shift_reg,alus_shift_reg,\\\n+                       logic_shift_reg,logics_shift_reg,\\\n+                       mov_shift_reg,mvn_shift_reg\"))\n  \"a_e*2,a_m,a_w\")\n \n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}, {"sha": "7d39f12d08a7d5f558e0bcaf0dca5d5effe07946", "filename": "gcc/config/arm/arm1136jfs.md", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4150e1d402f8d1c8f23dfbdb5157978133c42f/gcc%2Fconfig%2Farm%2Farm1136jfs.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4150e1d402f8d1c8f23dfbdb5157978133c42f/gcc%2Fconfig%2Farm%2Farm1136jfs.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm1136jfs.md?ref=6e4150e1d402f8d1c8f23dfbdb5157978133c42f", "patch": "@@ -75,14 +75,20 @@\n ;; ALU operations with no shifted operand\n (define_insn_reservation \"11_alu_op\" 2\n  (and (eq_attr \"tune\" \"arm1136js,arm1136jfs\")\n-      (eq_attr \"type\" \"arlo_imm,arlo_reg,shift,shift_reg,\\\n+      (eq_attr \"type\" \"alu_imm,alus_imm,logic_imm,logics_imm,\\\n+                       alu_reg,alus_reg,logic_reg,logics_reg,\\\n+                       adc_imm,adcs_imm,adc_reg,adcs_reg,\\\n+                       adr,bfm,rev,\\\n+                       shift_imm,shift_reg,\\\n                        mov_imm,mov_reg,mvn_imm,mvn_reg\"))\n  \"e_1,e_2,e_3,e_wb\")\n \n ;; ALU operations with a shift-by-constant operand\n (define_insn_reservation \"11_alu_shift_op\" 2\n  (and (eq_attr \"tune\" \"arm1136js,arm1136jfs\")\n-      (eq_attr \"type\" \"extend,arlo_shift,mov_shift,mvn_shift\"))\n+      (eq_attr \"type\" \"alu_shift_imm,alus_shift_imm,\\\n+                       logic_shift_imm,logics_shift_imm,\\\n+                       extend,mov_shift,mvn_shift\"))\n  \"e_1,e_2,e_3,e_wb\")\n \n ;; ALU operations with a shift-by-register operand\n@@ -91,7 +97,9 @@\n ;; the shift stage.\n (define_insn_reservation \"11_alu_shift_reg_op\" 3\n  (and (eq_attr \"tune\" \"arm1136js,arm1136jfs\")\n-      (eq_attr \"type\" \"arlo_shift_reg,mov_shift_reg,mvn_shift_reg\"))\n+      (eq_attr \"type\" \"alu_shift_reg,alus_shift_reg,\\\n+                       logic_shift_reg,logics_shift_reg,\\\n+                       mov_shift_reg,mvn_shift_reg\"))\n  \"e_1*2,e_2,e_3,e_wb\")\n \n ;; alu_ops can start sooner, if there is no shifter dependency"}, {"sha": "7c2d52e80739d2bcbceb0cb1ce65444162c23b12", "filename": "gcc/config/arm/arm926ejs.md", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4150e1d402f8d1c8f23dfbdb5157978133c42f/gcc%2Fconfig%2Farm%2Farm926ejs.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4150e1d402f8d1c8f23dfbdb5157978133c42f/gcc%2Fconfig%2Farm%2Farm926ejs.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm926ejs.md?ref=6e4150e1d402f8d1c8f23dfbdb5157978133c42f", "patch": "@@ -58,7 +58,13 @@\n ;; ALU operations with no shifted operand\n (define_insn_reservation \"9_alu_op\" 1 \n  (and (eq_attr \"tune\" \"arm926ejs\")\n-      (eq_attr \"type\" \"arlo_imm,arlo_reg,shift,shift_reg,extend,arlo_shift,\\\n+      (eq_attr \"type\" \"alu_imm,alus_imm,logic_imm,logics_imm,\\\n+                       alu_reg,alus_reg,logic_reg,logics_reg,\\\n+                       adc_imm,adcs_imm,adc_reg,adcs_reg,\\\n+                       adr,bfm,rev,\\\n+                       alu_shift_imm,alus_shift_imm,\\\n+                       logic_shift_imm,logics_shift_imm,\\\n+                       shift_imm,shift_reg,extend,\\\n                        mov_imm,mov_reg,mov_shift,\\\n                        mvn_imm,mvn_reg,mvn_shift\"))\n  \"e,m,w\")\n@@ -69,7 +75,9 @@\n ;; the execute stage.\n (define_insn_reservation \"9_alu_shift_reg_op\" 2 \n  (and (eq_attr \"tune\" \"arm926ejs\")\n-      (eq_attr \"type\" \"arlo_shift_reg,mov_shift_reg,mvn_shift_reg\"))\n+      (eq_attr \"type\" \"alu_shift_reg,alus_shift_reg,\\\n+                       logic_shift_reg,logics_shift_reg,\\\n+                       mov_shift_reg,mvn_shift_reg\"))\n  \"e*2,m,w\")\n \n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}, {"sha": "382a3dc73d48b003edec15e6b14e2c1690b41314", "filename": "gcc/config/arm/cortex-a15.md", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4150e1d402f8d1c8f23dfbdb5157978133c42f/gcc%2Fconfig%2Farm%2Fcortex-a15.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4150e1d402f8d1c8f23dfbdb5157978133c42f/gcc%2Fconfig%2Farm%2Fcortex-a15.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fcortex-a15.md?ref=6e4150e1d402f8d1c8f23dfbdb5157978133c42f", "patch": "@@ -61,22 +61,31 @@\n ;; Simple ALU without shift\n (define_insn_reservation \"cortex_a15_alu\" 2\n   (and (eq_attr \"tune\" \"cortexa15\")\n-       (eq_attr \"type\" \"arlo_imm,arlo_reg,shift,shift_reg,\\\n-                             mov_imm,mov_reg,\\\n-                             mvn_imm,mvn_reg\"))\n+       (eq_attr \"type\" \"alu_imm,alus_imm,logic_imm,logics_imm,\\\n+                        alu_reg,alus_reg,logic_reg,logics_reg,\\\n+                        adc_imm,adcs_imm,adc_reg,adcs_reg,\\\n+                        adr,bfm,rev,\\\n+                        shift_imm,shift_reg,\\\n+                        mov_imm,mov_reg,\\\n+                        mvn_imm,mvn_reg\"))\n   \"ca15_issue1,(ca15_sx1,ca15_sx1_alu)|(ca15_sx2,ca15_sx2_alu)\")\n \n ;; ALU ops with immediate shift\n (define_insn_reservation \"cortex_a15_alu_shift\" 3\n   (and (eq_attr \"tune\" \"cortexa15\")\n-       (eq_attr \"type\" \"extend,arlo_shift,,mov_shift,mvn_shift\"))\n+       (eq_attr \"type\" \"extend,\\\n+                        alu_shift_imm,alus_shift_imm,\\\n+                        logic_shift_imm,logics_shift_imm,\\\n+                        mov_shift,mvn_shift\"))\n   \"ca15_issue1,(ca15_sx1,ca15_sx1+ca15_sx1_shf,ca15_sx1_alu)\\\n \t       |(ca15_sx2,ca15_sx2+ca15_sx2_shf,ca15_sx2_alu)\")\n \n ;; ALU ops with register controlled shift\n (define_insn_reservation \"cortex_a15_alu_shift_reg\" 3\n   (and (eq_attr \"tune\" \"cortexa15\")\n-       (eq_attr \"type\" \"arlo_shift_reg,mov_shift_reg,mvn_shift_reg\"))\n+       (eq_attr \"type\" \"alu_shift_reg,alus_shift_reg,\\\n+                        logic_shift_reg,logics_shift_reg,\\\n+                        mov_shift_reg,mvn_shift_reg\"))\n   \"(ca15_issue2,ca15_sx1+ca15_sx2,ca15_sx1_shf,ca15_sx2_alu)\\\n    |(ca15_issue1,(ca15_issue1+ca15_sx2,ca15_sx1+ca15_sx2_shf)\\\n    |(ca15_issue1+ca15_sx1,ca15_sx1+ca15_sx1_shf),ca15_sx1_alu)\")"}, {"sha": "19738e6d56f58f4516490244f2d6b9ea202f67a3", "filename": "gcc/config/arm/cortex-a5.md", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4150e1d402f8d1c8f23dfbdb5157978133c42f/gcc%2Fconfig%2Farm%2Fcortex-a5.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4150e1d402f8d1c8f23dfbdb5157978133c42f/gcc%2Fconfig%2Farm%2Fcortex-a5.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fcortex-a5.md?ref=6e4150e1d402f8d1c8f23dfbdb5157978133c42f", "patch": "@@ -58,13 +58,21 @@\n \n (define_insn_reservation \"cortex_a5_alu\" 2\n   (and (eq_attr \"tune\" \"cortexa5\")\n-       (eq_attr \"type\" \"arlo_imm,arlo_reg,shift,shift_reg,\\\n+       (eq_attr \"type\" \"alu_imm,alus_imm,logic_imm,logics_imm,\\\n+                        alu_reg,alus_reg,logic_reg,logics_reg,\\\n+                        adc_imm,adcs_imm,adc_reg,adcs_reg,\\\n+                        adr,bfm,rev,\\\n+                        shift_imm,shift_reg,\\\n                         mov_imm,mov_reg,mvn_imm,mvn_reg\"))\n   \"cortex_a5_ex1\")\n \n (define_insn_reservation \"cortex_a5_alu_shift\" 2\n   (and (eq_attr \"tune\" \"cortexa5\")\n-       (eq_attr \"type\" \"extend,arlo_shift,arlo_shift_reg,\\\n+       (eq_attr \"type\" \"extend,\\\n+                        alu_shift_imm,alus_shift_imm,\\\n+                        logic_shift_imm,logics_shift_imm,\\\n+                        alu_shift_reg,alus_shift_reg,\\\n+                        logic_shift_reg,logics_shift_reg,\\\n                         mov_shift,mov_shift_reg,\\\n                         mvn_shift,mvn_shift_reg\"))\n   \"cortex_a5_ex1\")"}, {"sha": "9331eceb2ed7e2094f7ec1ba04ba6396fbd8e912", "filename": "gcc/config/arm/cortex-a53.md", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4150e1d402f8d1c8f23dfbdb5157978133c42f/gcc%2Fconfig%2Farm%2Fcortex-a53.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4150e1d402f8d1c8f23dfbdb5157978133c42f/gcc%2Fconfig%2Farm%2Fcortex-a53.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fcortex-a53.md?ref=6e4150e1d402f8d1c8f23dfbdb5157978133c42f", "patch": "@@ -67,13 +67,20 @@\n \n (define_insn_reservation \"cortex_a53_alu\" 2\n   (and (eq_attr \"tune\" \"cortexa53\")\n-       (eq_attr \"type\" \"arlo_imm,arlo_reg,shift,shift_reg,\\\n+       (eq_attr \"type\" \"alu_imm,alus_imm,logic_imm,logics_imm,\\\n+                        alu_reg,alus_reg,logic_reg,logics_reg,\\\n+                        adc_imm,adcs_imm,adc_reg,adcs_reg,\\\n+                        adr,bfm,csel,rev,\\\n+                        shift_imm,shift_reg,\\\n                         mov_imm,mov_reg,mvn_imm,mvn_reg\"))\n   \"cortex_a53_slot_any\")\n \n (define_insn_reservation \"cortex_a53_alu_shift\" 2\n   (and (eq_attr \"tune\" \"cortexa53\")\n-       (eq_attr \"type\" \"arlo_shift,arlo_shift_reg,\\\n+       (eq_attr \"type\" \"alu_shift_imm,alus_shift_imm,\\\n+                        logic_shift_imm,logics_shift_imm,\\\n+                        alu_shift_reg,alus_shift_reg,\\\n+                        logic_shift_reg,logics_shift_reg,\\\n                         mov_shift,mov_shift_reg,\\\n                         mvn_shift,mvn_shift_reg\"))\n   \"cortex_a53_slot_any\")\n@@ -202,7 +209,7 @@\n (define_insn_reservation \"cortex_a53_fpalu\" 4\n   (and (eq_attr \"tune\" \"cortexa53\")\n        (eq_attr \"type\" \"ffariths, fadds, ffarithd, faddd, fcpys, fmuls, f_cvt,\\\n-\t\t\tfcmps, fcmpd\"))\n+\t\t\tfcmps, fcmpd, fcsel\"))\n   \"cortex_a53_slot0+cortex_a53_fpadd_pipe\")\n \n (define_insn_reservation \"cortex_a53_fconst\" 2"}, {"sha": "9373077b754eaca1aacf0c468b9295e6d183164f", "filename": "gcc/config/arm/cortex-a7.md", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4150e1d402f8d1c8f23dfbdb5157978133c42f/gcc%2Fconfig%2Farm%2Fcortex-a7.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4150e1d402f8d1c8f23dfbdb5157978133c42f/gcc%2Fconfig%2Farm%2Fcortex-a7.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fcortex-a7.md?ref=6e4150e1d402f8d1c8f23dfbdb5157978133c42f", "patch": "@@ -86,7 +86,8 @@\n ;; ALU instruction with an immediate operand can dual-issue.\n (define_insn_reservation \"cortex_a7_alu_imm\" 2\n   (and (eq_attr \"tune\" \"cortexa7\")\n-       (ior (eq_attr \"type\" \"arlo_imm,mov_imm,mvn_imm,extend\")\n+       (ior (eq_attr \"type\" \"adr,alu_imm,alus_imm,logic_imm,logics_imm,\\\n+                             mov_imm,mvn_imm,extend\")\n             (and (eq_attr \"type\" \"mov_reg,mov_shift,mov_shift_reg\")\n                  (not (eq_attr \"length\" \"8\")))))\n   \"cortex_a7_ex2|cortex_a7_ex1\")\n@@ -95,12 +96,18 @@\n ;; with a younger immediate-based instruction.\n (define_insn_reservation \"cortex_a7_alu_reg\" 2\n   (and (eq_attr \"tune\" \"cortexa7\")\n-       (eq_attr \"type\" \"arlo_reg,shift,shift_reg,mov_reg,mvn_reg\"))\n+       (eq_attr \"type\" \"alu_reg,alus_reg,logic_reg,logics_reg,\\\n+                        adc_imm,adcs_imm,adc_reg,adcs_reg,\\\n+                        bfm,rev,\\\n+                        shift_imm,shift_reg,mov_reg,mvn_reg\"))\n   \"cortex_a7_ex1\")\n \n (define_insn_reservation \"cortex_a7_alu_shift\" 2\n   (and (eq_attr \"tune\" \"cortexa7\")\n-       (eq_attr \"type\" \"arlo_shift,arlo_shift_reg,\\\n+       (eq_attr \"type\" \"alu_shift_imm,alus_shift_imm,\\\n+                        logic_shift_imm,logics_shift_imm,\\\n+                        alu_shift_reg,alus_shift_reg,\\\n+                        logic_shift_reg,logics_shift_reg,\\\n                         mov_shift,mov_shift_reg,\\\n                         mvn_shift,mvn_shift_reg\"))\n   \"cortex_a7_ex1\")"}, {"sha": "22f9ee92bdecc006bf74beec8d06ef8424dcb14d", "filename": "gcc/config/arm/cortex-a8.md", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4150e1d402f8d1c8f23dfbdb5157978133c42f/gcc%2Fconfig%2Farm%2Fcortex-a8.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4150e1d402f8d1c8f23dfbdb5157978133c42f/gcc%2Fconfig%2Farm%2Fcortex-a8.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fcortex-a8.md?ref=6e4150e1d402f8d1c8f23dfbdb5157978133c42f", "patch": "@@ -85,17 +85,24 @@\n ;; (source read in E2 and destination available at the end of that cycle).\n (define_insn_reservation \"cortex_a8_alu\" 2\n   (and (eq_attr \"tune\" \"cortexa8\")\n-       (eq_attr \"type\" \"arlo_imm,arlo_reg,shift,shift_reg,clz\"))\n+       (eq_attr \"type\" \"alu_imm,alus_imm,logic_imm,logics_imm,\\\n+                        alu_reg,alus_reg,logic_reg,logics_reg,\\\n+                        adc_imm,adcs_imm,adc_reg,adcs_reg,\\\n+                        adr,bfm,clz,rbit,rev,\\\n+                        shift_imm,shift_reg\"))\n   \"cortex_a8_default\")\n \n (define_insn_reservation \"cortex_a8_alu_shift\" 2\n   (and (eq_attr \"tune\" \"cortexa8\")\n-       (eq_attr \"type\" \"extend,arlo_shift\"))\n+       (eq_attr \"type\" \"alu_shift_imm,alus_shift_imm,\\\n+                        logic_shift_imm,logics_shift_imm,\\\n+                        extend\"))\n   \"cortex_a8_default\")\n \n (define_insn_reservation \"cortex_a8_alu_shift_reg\" 2\n   (and (eq_attr \"tune\" \"cortexa8\")\n-       (eq_attr \"type\" \"arlo_shift_reg\"))\n+       (eq_attr \"type\" \"alu_shift_reg,alus_shift_reg,\\\n+                        logic_shift_reg,logics_shift_reg\"))\n   \"cortex_a8_default\")\n \n ;; Move instructions."}, {"sha": "e5788b6b872020a651d06fcd28e834b44e500e64", "filename": "gcc/config/arm/cortex-a9.md", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4150e1d402f8d1c8f23dfbdb5157978133c42f/gcc%2Fconfig%2Farm%2Fcortex-a9.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4150e1d402f8d1c8f23dfbdb5157978133c42f/gcc%2Fconfig%2Farm%2Fcortex-a9.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fcortex-a9.md?ref=6e4150e1d402f8d1c8f23dfbdb5157978133c42f", "patch": "@@ -80,16 +80,23 @@ cortex_a9_p1_e2 + cortex_a9_p0_e1 + cortex_a9_p1_e1\")\n ;; which can go down E2 without any problem.\n (define_insn_reservation \"cortex_a9_dp\" 2\n   (and (eq_attr \"tune\" \"cortexa9\")\n-       (eq_attr \"type\" \"arlo_imm,arlo_reg,shift,shift_reg,\\\n+       (eq_attr \"type\" \"alu_imm,alus_imm,logic_imm,logics_imm,\\\n+                        alu_reg,alus_reg,logic_reg,logics_reg,\\\n+                        adc_imm,adcs_imm,adc_reg,adcs_reg,\\\n+                        adr,bfm,rev,\\\n+                        shift_imm,shift_reg,\\\n                         mov_imm,mov_reg,mvn_imm,mvn_reg,\\\n                         mov_shift_reg,mov_shift\"))\n   \"cortex_a9_p0_default|cortex_a9_p1_default\")\n \n ;; An instruction using the shifter will go down E1.\n (define_insn_reservation \"cortex_a9_dp_shift\" 3\n    (and (eq_attr \"tune\" \"cortexa9\")\n-        (eq_attr \"type\" \"arlo_shift_reg,extend,arlo_shift,\\\n-                         mvn_shift,mvn_shift_reg\"))\n+        (eq_attr \"type\" \"alu_shift_imm,alus_shift_imm,\\\n+                         logic_shift_imm,logics_shift_imm,\\\n+                         alu_shift_reg,alus_shift_reg,\\\n+                         logic_shift_reg,logics_shift_reg,\\\n+                         extend,mvn_shift,mvn_shift_reg\"))\n    \"cortex_a9_p0_shift | cortex_a9_p1_shift\")\n \n ;; Loads have a latency of 4 cycles."}, {"sha": "0c628f08b5f6dcbe326b0caeb650ae2464fa4cb9", "filename": "gcc/config/arm/cortex-m4.md", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4150e1d402f8d1c8f23dfbdb5157978133c42f/gcc%2Fconfig%2Farm%2Fcortex-m4.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4150e1d402f8d1c8f23dfbdb5157978133c42f/gcc%2Fconfig%2Farm%2Fcortex-m4.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fcortex-m4.md?ref=6e4150e1d402f8d1c8f23dfbdb5157978133c42f", "patch": "@@ -31,8 +31,15 @@\n ;; ALU and multiply is one cycle.\n (define_insn_reservation \"cortex_m4_alu\" 1\n   (and (eq_attr \"tune\" \"cortexm4\")\n-       (ior (eq_attr \"type\" \"arlo_imm,arlo_reg,shift,shift_reg,extend,\\\n-                             arlo_shift,arlo_shift_reg,\\\n+       (ior (eq_attr \"type\" \"alu_imm,alus_imm,logic_imm,logics_imm,\\\n+                             alu_reg,alus_reg,logic_reg,logics_reg,\\\n+                             adc_imm,adcs_imm,adc_reg,adcs_reg,\\\n+                             adr,bfm,rev,\\\n+                             shift_imm,shift_reg,extend,\\\n+                             alu_shift_imm,alus_shift_imm,\\\n+                             logic_shift_imm,logics_shift_imm,\\\n+                             alu_shift_reg,alus_shift_reg,\\\n+                             logic_shift_reg,logics_shift_reg,\\\n                              mov_imm,mov_reg,mov_shift,mov_shift_reg,\\\n                              mvn_imm,mvn_reg,mvn_shift,mvn_shift_reg\")\n \t    (ior (eq_attr \"mul32\" \"yes\")"}, {"sha": "83745c1b4c7beaed1f9e8e200f696d7c6f67512e", "filename": "gcc/config/arm/cortex-r4.md", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4150e1d402f8d1c8f23dfbdb5157978133c42f/gcc%2Fconfig%2Farm%2Fcortex-r4.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4150e1d402f8d1c8f23dfbdb5157978133c42f/gcc%2Fconfig%2Farm%2Fcortex-r4.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fcortex-r4.md?ref=6e4150e1d402f8d1c8f23dfbdb5157978133c42f", "patch": "@@ -78,7 +78,11 @@\n ;; for the purposes of the dual-issue constraints above.\n (define_insn_reservation \"cortex_r4_alu\" 2\n   (and (eq_attr \"tune_cortexr4\" \"yes\")\n-       (eq_attr \"type\" \"arlo_imm,arlo_reg,shift,shift_reg,mvn_imm,mvn_reg\"))\n+       (eq_attr \"type\" \"alu_imm,alus_imm,logic_imm,logics_imm,\\\n+                        alu_reg,alus_reg,logic_reg,logics_reg,\\\n+                        adc_imm,adcs_imm,adc_reg,adcs_reg,\\\n+                        adr,bfm,rev,\\\n+                        shift_imm,shift_reg,mvn_imm,mvn_reg\"))\n   \"cortex_r4_alu\")\n \n (define_insn_reservation \"cortex_r4_mov\" 2\n@@ -88,12 +92,16 @@\n \n (define_insn_reservation \"cortex_r4_alu_shift\" 2\n   (and (eq_attr \"tune_cortexr4\" \"yes\")\n-       (eq_attr \"type\" \"extend,arlo_shift,mov_shift,mvn_shift\"))\n+       (eq_attr \"type\" \"alu_shift_imm,alus_shift_imm,\\\n+                        logic_shift_imm,logics_shift_imm,\\\n+                        extend,mov_shift,mvn_shift\"))\n   \"cortex_r4_alu\")\n \n (define_insn_reservation \"cortex_r4_alu_shift_reg\" 2\n   (and (eq_attr \"tune_cortexr4\" \"yes\")\n-       (eq_attr \"type\" \"arlo_shift_reg,mov_shift_reg,mvn_shift_reg\"))\n+       (eq_attr \"type\" \"alu_shift_reg,alus_shift_reg,\\\n+                       logic_shift_reg,logics_shift_reg,\\\n+                       mov_shift_reg,mvn_shift_reg\"))\n   \"cortex_r4_alu_shift_reg\")\n \n ;; An ALU instruction followed by an ALU instruction with no early dep."}, {"sha": "90abf6cb85917008901fdc261aaea89d5f2940e1", "filename": "gcc/config/arm/fa526.md", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4150e1d402f8d1c8f23dfbdb5157978133c42f/gcc%2Fconfig%2Farm%2Ffa526.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4150e1d402f8d1c8f23dfbdb5157978133c42f/gcc%2Fconfig%2Farm%2Ffa526.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ffa526.md?ref=6e4150e1d402f8d1c8f23dfbdb5157978133c42f", "patch": "@@ -62,13 +62,21 @@\n ;; ALU operations\n (define_insn_reservation \"526_alu_op\" 1\n  (and (eq_attr \"tune\" \"fa526\")\n-      (eq_attr \"type\" \"arlo_imm,arlo_reg,shift,shift_reg,\\\n+      (eq_attr \"type\" \"alu_imm,alus_imm,logic_imm,logics_imm,\\\n+                       alu_reg,alus_reg,logic_reg,logics_reg,\\\n+                       adc_imm,adcs_imm,adc_reg,adcs_reg,\\\n+                       adr,bfm,rev,\\\n+                       shift_imm,shift_reg,\\\n                        mov_imm,mov_reg,mvn_imm,mvn_reg\"))\n  \"fa526_core\")\n \n (define_insn_reservation \"526_alu_shift_op\" 2\n  (and (eq_attr \"tune\" \"fa526\")\n-      (eq_attr \"type\" \"extend,arlo_shift,arlo_shift_reg,\\\n+      (eq_attr \"type\" \"extend,\\\n+                       alu_shift_imm,alus_shift_imm,\\\n+                       logic_shift_imm,logics_shift_imm,\\\n+                       alu_shift_reg,alus_shift_reg,\\\n+                       logic_shift_reg,logics_shift_reg,\\\n                        mov_shift,mov_shift_reg,\\\n                        mvn_shift,mvn_shift_reg\"))\n  \"fa526_core\")"}, {"sha": "20f66e6ae19cbac1de610de59d5e73a9f7f39cec", "filename": "gcc/config/arm/fa606te.md", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4150e1d402f8d1c8f23dfbdb5157978133c42f/gcc%2Fconfig%2Farm%2Ffa606te.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4150e1d402f8d1c8f23dfbdb5157978133c42f/gcc%2Fconfig%2Farm%2Ffa606te.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ffa606te.md?ref=6e4150e1d402f8d1c8f23dfbdb5157978133c42f", "patch": "@@ -62,8 +62,15 @@\n ;; ALU operations\n (define_insn_reservation \"606te_alu_op\" 1\n  (and (eq_attr \"tune\" \"fa606te\")\n-      (eq_attr \"type\" \"arlo_imm,arlo_reg,shift,shift_reg,\n-                       extend,arlo_shift,arlo_shift_reg,\\\n+      (eq_attr \"type\" \"alu_imm,alus_imm,logic_imm,logics_imm,\\\n+                       alu_reg,alus_reg,logic_reg,logics_reg,\\\n+                       adc_imm,adcs_imm,adc_reg,adcs_reg,\\\n+                       adr,bfm,rev,\\\n+                       shift_imm,shift_reg,extend,\\\n+                       alu_shift_imm,alus_shift_imm,\\\n+                       logic_shift_imm,logics_shift_imm,\\\n+                       alu_shift_reg,alus_shift_reg,\\\n+                       logic_shift_reg,logics_shift_reg,\\\n                        mov_imm,mov_reg,mov_shift,mov_shift_reg,\\\n                        mvn_imm,mvn_reg,mvn_shift,mvn_shift_reg\"))\n  \"fa606te_core\")"}, {"sha": "c5b841c3630072c086f277628acd5c8e9d22e83d", "filename": "gcc/config/arm/fa626te.md", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4150e1d402f8d1c8f23dfbdb5157978133c42f/gcc%2Fconfig%2Farm%2Ffa626te.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4150e1d402f8d1c8f23dfbdb5157978133c42f/gcc%2Fconfig%2Farm%2Ffa626te.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ffa626te.md?ref=6e4150e1d402f8d1c8f23dfbdb5157978133c42f", "patch": "@@ -68,13 +68,21 @@\n ;; ALU operations\n (define_insn_reservation \"626te_alu_op\" 1\n  (and (eq_attr \"tune\" \"fa626,fa626te\")\n-      (eq_attr \"type\" \"arlo_imm,arlo_reg,shift,shift_reg,\\\n+      (eq_attr \"type\" \"alu_imm,alus_imm,logic_imm,logics_imm,\\\n+                       alu_reg,alus_reg,logic_reg,logics_reg,\\\n+                       adc_imm,adcs_imm,adc_reg,adcs_reg,\\\n+                       adr,bfm,rev,\\\n+                       shift_imm,shift_reg,\\\n                        mov_imm,mov_reg,mvn_imm,mvn_reg\"))\n  \"fa626te_core\")\n \n (define_insn_reservation \"626te_alu_shift_op\" 2\n  (and (eq_attr \"tune\" \"fa626,fa626te\")\n-      (eq_attr \"type\" \"extend,arlo_shift,arlo_shift_reg,\\\n+      (eq_attr \"type\" \"extend,\\\n+                       alu_shift_imm,alus_shift_imm,\\\n+                       logic_shift_imm,logics_shift_imm,\\\n+                       alu_shift_reg,alus_shift_reg,\\\n+                       logic_shift_reg,logics_shift_reg,\\\n                        mov_shift,mov_shift_reg,\\\n                        mvn_shift,mvn_shift_reg\"))\n  \"fa626te_core\")"}, {"sha": "1947d36ec09a86ae5f629271bf395bd0be59eb97", "filename": "gcc/config/arm/fa726te.md", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4150e1d402f8d1c8f23dfbdb5157978133c42f/gcc%2Fconfig%2Farm%2Ffa726te.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4150e1d402f8d1c8f23dfbdb5157978133c42f/gcc%2Fconfig%2Farm%2Ffa726te.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ffa726te.md?ref=6e4150e1d402f8d1c8f23dfbdb5157978133c42f", "patch": "@@ -86,7 +86,11 @@\n ;; Other ALU instructions 2 cycles.\n (define_insn_reservation \"726te_alu_op\" 1\n  (and (eq_attr \"tune\" \"fa726te\")\n-      (eq_attr \"type\" \"arlo_imm,arlo_reg,shift,shift_reg\"))\n+      (eq_attr \"type\" \"alu_imm,alus_imm,logic_imm,logics_imm,\\\n+                       alu_reg,alus_reg,logic_reg,logics_reg,\\\n+                       adc_imm,adcs_imm,adc_reg,adcs_reg,\\\n+                       adr,bfm,rev,\\\n+                       shift_imm,shift_reg\"))\n   \"fa726te_issue+(fa726te_alu0_pipe|fa726te_alu1_pipe)\")\n \n ;; ALU operations with a shift-by-register operand.\n@@ -95,12 +99,14 @@\n ;; it takes 3 cycles.\n (define_insn_reservation \"726te_alu_shift_op\" 3\n  (and (eq_attr \"tune\" \"fa726te\")\n-      (eq_attr \"type\" \"extend,arlo_shift\"))\n+      (eq_attr \"type\" \"extend,alu_shift_imm,alus_shift_imm,\\\n+                       logic_shift_imm,logics_shift_imm\"))\n   \"fa726te_issue+(fa726te_alu0_pipe|fa726te_alu1_pipe)\")\n \n (define_insn_reservation \"726te_alu_shift_reg_op\" 3\n  (and (eq_attr \"tune\" \"fa726te\")\n-      (eq_attr \"type\" \"arlo_shift_reg\"))\n+      (eq_attr \"type\" \"alu_shift_reg,alus_shift_reg,\\\n+                       logic_shift_reg,logics_shift_reg\"))\n   \"fa726te_issue+(fa726te_alu0_pipe|fa726te_alu1_pipe)\")\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n ;; Multiplication Instructions"}, {"sha": "ffb68570e3786cedd4c1cd976ee90e5b2fe714e0", "filename": "gcc/config/arm/fmp626.md", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4150e1d402f8d1c8f23dfbdb5157978133c42f/gcc%2Fconfig%2Farm%2Ffmp626.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4150e1d402f8d1c8f23dfbdb5157978133c42f/gcc%2Fconfig%2Farm%2Ffmp626.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ffmp626.md?ref=6e4150e1d402f8d1c8f23dfbdb5157978133c42f", "patch": "@@ -63,13 +63,19 @@\n ;; ALU operations\n (define_insn_reservation \"mp626_alu_op\" 1\n  (and (eq_attr \"tune\" \"fmp626\")\n-      (eq_attr \"type\" \"arlo_imm,arlo_reg,shift,shift_reg,\\\n+      (eq_attr \"type\" \"alu_imm,alus_imm,alu_reg,alus_reg,\\\n+                       logic_imm,logics_imm,logic_reg,logics_reg,\\\n+                       adc_imm,adcs_imm,adc_reg,adcs_reg,\\\n+                       adr,bfm,rev,\\\n+                       shift_imm,shift_reg,\\\n                        mov_imm,mov_reg,mvn_imm,mvn_reg\"))\n  \"fmp626_core\")\n \n (define_insn_reservation \"mp626_alu_shift_op\" 2\n  (and (eq_attr \"tune\" \"fmp626\")\n-      (eq_attr \"type\" \"extend,arlo_shift,arlo_shift_reg,\\\n+      (eq_attr \"type\" \"alu_shift_imm,logic_shift_imm,alus_shift_imm,logics_shift_imm,\\\n+                       alu_shift_reg,logic_shift_reg,alus_shift_reg,logics_shift_reg,\\\n+                       extend,\\\n                        mov_shift,mov_shift_reg,\\\n                        mvn_shift,mvn_shift_reg\"))\n  \"fmp626_core\")"}, {"sha": "f6e4e011c338a898ed7b0b4706966755f24bd6ac", "filename": "gcc/config/arm/marvell-pj4.md", "status": "modified", "additions": 28, "deletions": 6, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4150e1d402f8d1c8f23dfbdb5157978133c42f/gcc%2Fconfig%2Farm%2Fmarvell-pj4.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4150e1d402f8d1c8f23dfbdb5157978133c42f/gcc%2Fconfig%2Farm%2Fmarvell-pj4.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fmarvell-pj4.md?ref=6e4150e1d402f8d1c8f23dfbdb5157978133c42f", "patch": "@@ -53,41 +53,63 @@\n \n (define_insn_reservation \"pj4_alu\" 1\n   (and (eq_attr \"tune\" \"marvell_pj4\")\n-       (eq_attr \"type\" \"arlo_imm,arlo_reg,shift,shift_reg\")\n+       (eq_attr \"type\" \"alu_imm,alus_imm,alu_reg,alus_reg,\\\n+                        logic_imm,logics_imm,logic_reg,logics_reg,\\\n+                        adc_imm,adcs_imm,adc_reg,adcs_reg,\\\n+                        adr,bfm,rev,\\\n+                        shift_imm,shift_reg\")\n        (not (eq_attr \"conds\" \"set\")))\n                                \"pj4_is,(pj4_alu1,pj4_w1+pj4_cp)|(pj4_alu2,pj4_w2+pj4_cp)\")\n \n (define_insn_reservation \"pj4_alu_conds\" 4\n   (and (eq_attr \"tune\" \"marvell_pj4\")\n-       (eq_attr \"type\" \"arlo_imm,arlo_reg,shift,shift_reg\")\n+       (eq_attr \"type\" \"alu_imm,alus_imm,alu_reg,alus_reg,\\\n+                        logic_imm,logics_imm,logic_reg,logics_reg,\\\n+                        adc_imm,adcs_imm,adc_reg,adcs_reg,\\\n+                        adr,bfm,rev,\\\n+                        shift_imm,shift_reg\")\n        (eq_attr \"conds\" \"set\"))\n                                \"pj4_is,(pj4_alu1,pj4_w1+pj4_cp)|(pj4_alu2,pj4_w2+pj4_cp)\")\n \n (define_insn_reservation \"pj4_shift\" 1\n   (and (eq_attr \"tune\" \"marvell_pj4\")\n-       (eq_attr \"type\" \"arlo_shift,arlo_shift_reg,extend,\\\n+       (eq_attr \"type\" \"alu_shift_imm,logic_shift_imm,\\\n+                        alus_shift_imm,logics_shift_imm,\\\n+                        alu_shift_reg,logic_shift_reg,\\\n+                        alus_shift_reg,logics_shift_reg,\\\n+                        extend,\\\n                         mov_shift,mvn_shift,mov_shift_reg,mvn_shift_reg\")\n        (not (eq_attr \"conds\" \"set\"))\n        (eq_attr \"shift\" \"1\"))  \"pj4_is,(pj4_alu1,pj4_w1+pj4_cp)|(pj4_alu2,pj4_w2+pj4_cp)\")\n \n (define_insn_reservation \"pj4_shift_conds\" 4\n   (and (eq_attr \"tune\" \"marvell_pj4\")\n-       (eq_attr \"type\" \"arlo_shift,arlo_shift_reg,extend,\\\n+       (eq_attr \"type\" \"alu_shift_imm,logic_shift_imm,\\\n+                        alus_shift_imm,logics_shift_imm,\\\n+                        alu_shift_reg,logic_shift_reg,\\\n+                        alus_shift_reg,logics_shift_reg,\\\n+                        extend,\\\n                         mov_shift,mvn_shift,mov_shift_reg,mvn_shift_reg\")\n        (eq_attr \"conds\" \"set\")\n        (eq_attr \"shift\" \"1\"))  \"pj4_is,(pj4_alu1,pj4_w1+pj4_cp)|(pj4_alu2,pj4_w2+pj4_cp)\")\n \n (define_insn_reservation \"pj4_alu_shift\" 1\n   (and (eq_attr \"tune\" \"marvell_pj4\")\n        (not (eq_attr \"conds\" \"set\"))\n-       (eq_attr \"type\" \"arlo_shift,arlo_shift_reg,extend,\\\n+       (eq_attr \"type\" \"alu_shift_imm,logic_shift_imm,\\\n+                        alus_shift_imm,logics_shift_imm,\\\n+                        alu_shift_reg,logic_shift_reg,\\\n+                        alus_shift_reg,logics_shift_reg,\\\n+                        extend,\\\n                         mov_shift,mvn_shift,mov_shift_reg,mvn_shift_reg\"))\n                                \"pj4_is,(pj4_alu1,nothing,pj4_w1+pj4_cp)|(pj4_alu2,nothing,pj4_w2+pj4_cp)\")\n \n (define_insn_reservation \"pj4_alu_shift_conds\" 4\n   (and (eq_attr \"tune\" \"marvell_pj4\")\n        (eq_attr \"conds\" \"set\")\n-       (eq_attr \"type\" \"arlo_shift,arlo_shift_reg,extend,\\\n+       (eq_attr \"type\" \"alu_shift_imm,logic_shift_imm,alus_shift_imm,logics_shift_imm,\\\n+                        alu_shift_reg,logic_shift_reg,alus_shift_reg,logics_shift_reg,\\\n+                        extend,\\\n                         mov_shift,mvn_shift,mov_shift_reg,mvn_shift_reg\"))\n                                \"pj4_is,(pj4_alu1,nothing,pj4_w1+pj4_cp)|(pj4_alu2,nothing,pj4_w2+pj4_cp)\")\n "}, {"sha": "613d0a10a69b62dc50b65649c4f71316a2fc9855", "filename": "gcc/config/arm/thumb2.md", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4150e1d402f8d1c8f23dfbdb5157978133c42f/gcc%2Fconfig%2Farm%2Fthumb2.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4150e1d402f8d1c8f23dfbdb5157978133c42f/gcc%2Fconfig%2Farm%2Fthumb2.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fthumb2.md?ref=6e4150e1d402f8d1c8f23dfbdb5157978133c42f", "patch": "@@ -36,7 +36,7 @@\n   [(set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"no\")\n    (set_attr \"shift\" \"2\")\n-   (set_attr \"type\" \"arlo_shift\")]\n+   (set_attr \"type\" \"alu_shift_imm\")]\n )\n \n ;; We use the '0' constraint for operand 1 because reload should\n@@ -282,7 +282,7 @@\n    ldr%?\\\\t%0, %1\n    str%?\\\\t%1, %0\n    str%?\\\\t%1, %0\"\n-  [(set_attr \"type\" \"*,arlo_imm,arlo_imm,arlo_imm,*,load1,load1,store1,store1\")\n+  [(set_attr \"type\" \"*,alu_imm,alu_imm,alu_imm,*,load1,load1,store1,store1\")\n    (set_attr \"length\" \"2,4,2,4,4,4,4,4,4\")\n    (set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"yes,no,yes,no,no,no,no,no,no\")\n@@ -350,7 +350,7 @@\n   \"cmn%?\\\\t%0, %1%S3\"\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"shift\" \"1\")\n-   (set_attr \"type\" \"arlo_shift\")]\n+   (set_attr \"type\" \"alus_shift_imm\")]\n )\n \n (define_insn_and_split \"*thumb2_mov_scc\"\n@@ -1102,8 +1102,8 @@\n    (set_attr \"shift\" \"1\")\n    (set_attr \"length\" \"2\")\n    (set (attr \"type\") (if_then_else (match_operand 2 \"const_int_operand\" \"\")\n-\t\t      (const_string \"arlo_shift\")\n-\t\t      (const_string \"arlo_shift_reg\")))]\n+\t\t      (const_string \"alu_shift_imm\")\n+\t\t      (const_string \"alu_shift_reg\")))]\n )\n \n (define_insn \"*thumb2_mov<mode>_shortim\"\n@@ -1225,7 +1225,7 @@\n   \"\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"length\" \"2,2,4,4\")\n-   (set_attr \"type\"   \"arlo_imm,*,arlo_imm,*\")]\n+   (set_attr \"type\" \"alus_imm,alus_reg,alus_imm,alus_reg\")]\n )\n \n (define_insn \"*thumb2_mulsi_short\"\n@@ -1351,7 +1351,7 @@\n   [(set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"no\")\n    (set_attr \"shift\" \"2\")\n-   (set_attr \"type\" \"arlo_shift\")]\n+   (set_attr \"type\" \"alu_shift_imm\")]\n )\n \n (define_peephole2"}, {"sha": "14d2bee82ca37221338be7a2f59a490db0fbaf25", "filename": "gcc/config/arm/types.md", "status": "modified", "additions": 70, "deletions": 15, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4150e1d402f8d1c8f23dfbdb5157978133c42f/gcc%2Fconfig%2Farm%2Ftypes.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4150e1d402f8d1c8f23dfbdb5157978133c42f/gcc%2Fconfig%2Farm%2Ftypes.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ftypes.md?ref=6e4150e1d402f8d1c8f23dfbdb5157978133c42f", "patch": "@@ -23,21 +23,37 @@\n ;\n ; Instruction classification:\n ;\n-; arlo_imm           any arithmetic or logical instruction that doesn't have\n-;                    a shifted operand and has an immediate operand.  This\n+; adc_imm            add/subtract with carry and with an immediate operand.\n+; adc_reg            add/subtract with carry and no immediate operand.\n+; adcs_imm           as adc_imm, setting condition flags.\n+; adcs_reg           as adc_reg, setting condition flags.\n+; adr                calculate address.\n+; alu_ext            From ARMv8-A: any arithmetic instruction that has a\n+;                    sign/zero-extended.\n+;                    AArch64 Only.\n+;                    source operand\n+; alu_imm            any arithmetic instruction that doesn't have a shifted\n+;                    operand and has an immediate operand.  This\n ;                    excludes MOV, MVN and RSB(S) immediate.\n-; arlo_reg           any arithmetic or logical instruction that doesn't have\n-;                    a shifted or an immediate operand.  This excludes\n+; alu_reg            any arithmetic instruction that doesn't have a shifted\n+;                    or an immediate operand.  This excludes\n ;                    MOV and MVN but includes MOVT.  This is also the default.\n-; arlo_shift         any arithmetic or logical instruction that has a source\n-;                    operand shifted by a constant.  This excludes\n-;                    simple shifts.\n-; arlo_shift_reg     as arlo_shift, with the shift amount specified in a\n+; alu_shift_imm      any arithmetic instruction that has a source operand\n+;                    shifted by a constant.  This excludes simple shifts.\n+; alu_shift_reg      as alu_shift_imm, with the shift amount specified in a\n ;                    register.\n+; alus_ext           From ARMv8-A: as alu_ext, setting condition flags.\n+;                    AArch64 Only.\n+; alus_imm           as alu_imm, setting condition flags.\n+; alus_reg           as alu_reg, setting condition flags.\n+; alus_shift_imm     as alu_shift_imm, setting condition flags.\n+; alus_shift_reg     as alu_shift_reg, setting condition flags.\n+; bfm                bitfield move operation.\n ; block              blockage insn, this blocks all functional units.\n ; branch             branch.\n ; call               subroutine call.\n ; clz                count leading zeros (CLZ).\n+; csel               From ARMv8-A: conditional select.\n ; extend             extend instruction (SXTB, SXTH, UXTB, UXTH).\n ; f_cvt              conversion between float and integral.\n ; f_flag             transfer of co-processor flags to the CPSR.\n@@ -54,6 +70,7 @@\n ; fcmp[d,s]          double/single floating-point compare.\n ; fconst[d,s]        double/single load immediate.\n ; fcpys              single precision floating point cpy.\n+; fcsel              From ARMv8-A: Floating-point conditional select.\n ; fdiv[d,s]          double/single precision floating point division.\n ; ffarith[d,s]       double/single floating point abs/neg/cpy.\n ; ffma[d,s]          double/single floating point fused multiply-accumulate.\n@@ -66,6 +83,18 @@\n ; load2              load 2 words from memory to arm registers.\n ; load3              load 3 words from memory to arm registers.\n ; load4              load 4 words from memory to arm registers.\n+; logic_imm          any logical instruction that doesn't have a shifted\n+;                    operand and has an immediate operand.\n+; logic_reg          any logical instruction that doesn't have a shifted\n+;                    operand or an immediate operand.\n+; logic_shift_imm    any logical instruction that has a source operand\n+;                    shifted by a constant.  This excludes simple shifts.\n+; logic_shift_reg    as logic_shift_imm, with the shift amount specified in a\n+;                    register.\n+; logics_imm         as logic_imm, setting condition flags.\n+; logics_reg         as logic_reg, setting condition flags.\n+; logics_shift_imm   as logic_shift_imm, setting condition flags.\n+; logics_shift_reg   as logic_shift_reg, setting condition flags.\n ; mla                integer multiply accumulate.\n ; mlas               integer multiply accumulate, flag setting.\n ; mov_imm            simple MOV instruction that moves an immediate to\n@@ -80,8 +109,10 @@\n ; mvn_reg            inverting move instruction, register.\n ; mvn_shift          inverting move instruction, shifted operand by a constant.\n ; mvn_shift_reg      inverting move instruction, shifted operand by a register.\n+; rbit               reverse bits.\n+; rev                reverse bytes.\n ; sdiv               signed division.\n-; shift              simple shift operation (LSL, LSR, ASR, ROR) with an\n+; shift_imm          simple shift operation (LSL, LSR, ASR, ROR) with an\n ;                    immediate.\n ; shift_reg          simple shift by a register.\n ; smlad              signed multiply accumulate dual.\n@@ -250,14 +281,27 @@\n ; neon_vst3_vst4\n \n (define_attr \"type\"\n- \"arlo_imm,\\\n-  arlo_reg,\\\n-  arlo_shift,\\\n-  arlo_shift_reg,\\\n+ \"adc_imm,\\\n+  adc_reg,\\\n+  adcs_imm,\\\n+  adcs_reg,\\\n+  adr,\\\n+  alu_ext,\\\n+  alu_imm,\\\n+  alu_reg,\\\n+  alu_shift_imm,\\\n+  alu_shift_reg,\\\n+  alus_ext,\\\n+  alus_imm,\\\n+  alus_reg,\\\n+  alus_shift_imm,\\\n+  alus_shift_reg,\\\n+  bfm,\\\n   block,\\\n   branch,\\\n   call,\\\n   clz,\\\n+  csel,\\\n   extend,\\\n   f_cvt,\\\n   f_flag,\\\n@@ -282,6 +326,7 @@\n   fconstd,\\\n   fconsts,\\\n   fcpys,\\\n+  fcsel,\\\n   fdivd,\\\n   fdivs,\\\n   ffarithd,\\\n@@ -299,6 +344,14 @@\n   load2,\\\n   load3,\\\n   load4,\\\n+  logic_imm,\\\n+  logic_reg,\\\n+  logic_shift_imm,\\\n+  logic_shift_reg,\\\n+  logics_imm,\\\n+  logics_reg,\\\n+  logics_shift_imm,\\\n+  logics_shift_reg,\\\n   mla,\\\n   mlas,\\\n   mov_imm,\\\n@@ -311,8 +364,10 @@\n   mvn_reg,\\\n   mvn_shift,\\\n   mvn_shift_reg,\\\n+  rbit,\\\n+  rev,\\\n   sdiv,\\\n-  shift,\\\n+  shift_imm,\\\n   shift_reg,\\\n   smlad,\\\n   smladx,\\\n@@ -469,7 +524,7 @@\n   neon_vst2_4_regs_vst3_vst4,\\\n   neon_vst3_vst4_lane,\\\n   neon_vst3_vst4\"\n-    (const_string \"arlo_reg\"))\n+    (const_string \"alu_imm\"))\n \n ; Is this an (integer side) multiply with a 32-bit (or smaller) result?\n (define_attr \"mul32\" \"no,yes\""}]}