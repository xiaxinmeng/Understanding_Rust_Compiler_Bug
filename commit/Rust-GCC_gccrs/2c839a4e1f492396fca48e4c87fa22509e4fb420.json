{"sha": "2c839a4e1f492396fca48e4c87fa22509e4fb420", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmM4MzlhNGUxZjQ5MjM5NmZjYTQ4ZTRjODdmYTIyNTA5ZTRmYjQyMA==", "commit": {"author": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2002-06-18T19:07:12Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2002-06-18T19:07:12Z"}, "message": "configure.host: Delete file.\n\n2002-06-18  Phil Edwards  <pme@gcc.gnu.org>\n\n\t* configure.host:  Delete file.\n\t* configure.target:  More documentation.  Factor out common parts of\n\tscript into \"intelligent\" settings about defaults.  Remove redundancy.\n\n\t* acinclude.m4:  Update comments.  Do not call configure.host.\n\t(GLIBCPP_ENABLE_SYMVERS):  If disabled, do not bother checking for\n\tlibgcc_s.\n\t* configure.in:  Slight reformatting, more comments.  Factor out\n\t\"config/\" from all the directories.\n\t* docs/html/17_intro/porting.texi:  Update and expand.\n\t* testsuite/Makefile.am (AM_RUNTESTFLAGS):  Move empty setting\n\tfrom configure.host.\n\n\t* aclocal.m4, configure, docs/html/17_intro/porting.html,\n\ttestsuite/Makefile.in:  Regenerate.\n\nFrom-SVN: r54757", "tree": {"sha": "d66d09fcba471da53d225f2067c0fbd51e78339f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d66d09fcba471da53d225f2067c0fbd51e78339f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2c839a4e1f492396fca48e4c87fa22509e4fb420", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c839a4e1f492396fca48e4c87fa22509e4fb420", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c839a4e1f492396fca48e4c87fa22509e4fb420", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c839a4e1f492396fca48e4c87fa22509e4fb420/comments", "author": null, "committer": null, "parents": [{"sha": "e3ba8d11f88f79ce3bd07c5e9a98c85b6d394c45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3ba8d11f88f79ce3bd07c5e9a98c85b6d394c45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3ba8d11f88f79ce3bd07c5e9a98c85b6d394c45"}], "stats": {"total": 2632, "additions": 1359, "deletions": 1273}, "files": [{"sha": "888f7485f741269a8e053f5ddc756568f8ecd35a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c839a4e1f492396fca48e4c87fa22509e4fb420/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c839a4e1f492396fca48e4c87fa22509e4fb420/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2c839a4e1f492396fca48e4c87fa22509e4fb420", "patch": "@@ -1,3 +1,21 @@\n+2002-06-18  Phil Edwards  <pme@gcc.gnu.org>\n+\n+\t* configure.host:  Delete file.\n+\t* configure.target:  More documentation.  Factor out common parts of\n+\tscript into \"intelligent\" settings about defaults.  Remove redundancy.\n+\n+\t* acinclude.m4:  Update comments.  Do not call configure.host.\n+\t(GLIBCPP_ENABLE_SYMVERS):  If disabled, do not bother checking for\n+\tlibgcc_s.\n+\t* configure.in:  Slight reformatting, more comments.  Factor out\n+\t\"config/\" from all the directories.\n+\t* docs/html/17_intro/porting.texi:  Update and expand.\n+\t* testsuite/Makefile.am (AM_RUNTESTFLAGS):  Move empty setting\n+\tfrom configure.host.\n+\n+\t* aclocal.m4, configure, docs/html/17_intro/porting.html,\n+\ttestsuite/Makefile.in:  Regenerate.\n+\n 2002-06-16  Phil Edwards  <pme@gcc.gnu.org>\n \n \t* docs/doxygen/TODO:  Update."}, {"sha": "cd4b98dc72dae93dbdb8618290f08d470401ff31", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c839a4e1f492396fca48e4c87fa22509e4fb420/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c839a4e1f492396fca48e4c87fa22509e4fb420/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=2c839a4e1f492396fca48e4c87fa22509e4fb420", "patch": "@@ -3,7 +3,8 @@ dnl Initialize configure bits.\n dnl\n dnl GLIBCPP_CONFIGURE\n AC_DEFUN(GLIBCPP_CONFIGURE, [\n-  dnl Default to --enable-multilib\n+  dnl Default to --enable-multilib (this is also passed by default\n+  dnl from the ubercommon-top-level configure)\n   AC_ARG_ENABLE(multilib,\n   [  --enable-multilib       build hella library versions (default)],\n   [case \"${enableval}\" in\n@@ -34,6 +35,8 @@ AC_DEFUN(GLIBCPP_CONFIGURE, [\n   toplevel_srcdir=\\${top_srcdir}/$toprel\n   AC_SUBST(toplevel_srcdir)\n \n+#possibly test for the presence of the compiler sources here?\n+\n   # Export build and source directories.\n   # These need to be absolute paths, yet at the same time need to\n   # canonicalize only relative paths, because then amd will not unmount\n@@ -51,7 +54,8 @@ AC_DEFUN(GLIBCPP_CONFIGURE, [\n \n   AC_PROG_AWK\n   # Will set LN_S to either 'ln -s' or 'ln'.  With autoconf 2.5x, can also\n-  # be 'cp -p' if linking isn't available.\n+  # be 'cp -p' if linking isn't available.  Uncomment the next line to\n+  # force a particular method.\n   #ac_cv_prog_LN_S='cp -p'\n   AC_PROG_LN_S\n \n@@ -181,14 +185,12 @@ AC_DEFUN(GLIBCPP_CONFIGURE, [\n     AC_EXEEXT\n   fi\n \n-  . [$]{glibcpp_basedir}/configure.host\n-\n   case [$]{glibcpp_basedir} in\n     /* | [A-Za-z]:[\\\\/]*) libgcj_flagbasedir=[$]{glibcpp_basedir} ;;\n     *) glibcpp_flagbasedir='[$](top_builddir)/'[$]{glibcpp_basedir} ;;\n   esac\n \n-  # This does for the target what configure.host does for the host.  In\n+  # Find platform-specific directories containing configuration info.  In\n   # addition to possibly modifying the same flags, it also sets up symlinks.\n   GLIBCPP_CHECK_TARGET\n \n@@ -2127,12 +2129,14 @@ if test x$enable_shared = xno ||\n fi\n \n # Check to see if libgcc_s exists, indicating that shared libgcc is possible.\n-AC_MSG_CHECKING([for shared libgcc])\n-ac_save_CFLAGS=\"$CFLAGS\"\n-CFLAGS=' -lgcc_s'\n-AC_TRY_LINK( , [return 0], glibcpp_shared_libgcc=yes, glibcpp_shared_libgcc=no)\n-CFLAGS=\"$ac_save_CFLAGS\"\n-AC_MSG_RESULT($glibcpp_shared_libgcc)\n+if test $enable_symvers != no; then\n+  AC_MSG_CHECKING([for shared libgcc])\n+  ac_save_CFLAGS=\"$CFLAGS\"\n+  CFLAGS=' -lgcc_s'\n+  AC_TRY_LINK(, [return 0], glibcpp_shared_libgcc=yes, glibcpp_shared_libgcc=no)\n+  CFLAGS=\"$ac_save_CFLAGS\"\n+  AC_MSG_RESULT($glibcpp_shared_libgcc)\n+fi\n \n # For GNU ld, we need at least this version.  It's 2.12 in the same format\n # as the tested-for version.  See GLIBCPP_CHECK_LINKER_FEATURES for more."}, {"sha": "2d9e90c26def9a24ddfbfcf4d7f683f41594f384", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 23, "deletions": 37, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c839a4e1f492396fca48e4c87fa22509e4fb420/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c839a4e1f492396fca48e4c87fa22509e4fb420/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=2c839a4e1f492396fca48e4c87fa22509e4fb420", "patch": "@@ -1,6 +1,6 @@\n-dnl aclocal.m4 generated automatically by aclocal 1.4-p5\n+dnl aclocal.m4 generated automatically by aclocal 1.4\n \n-dnl Copyright (C) 1994, 1995-8, 1999, 2001 Free Software Foundation, Inc.\n+dnl Copyright (C) 1994, 1995-8, 1999 Free Software Foundation, Inc.\n dnl This file is free software; the Free Software Foundation\n dnl gives unlimited permission to copy and/or distribute it,\n dnl with or without modifications, as long as this notice is preserved.\n@@ -15,7 +15,8 @@ dnl Initialize configure bits.\n dnl\n dnl GLIBCPP_CONFIGURE\n AC_DEFUN(GLIBCPP_CONFIGURE, [\n-  dnl Default to --enable-multilib\n+  dnl Default to --enable-multilib (this is also passed by default\n+  dnl from the ubercommon-top-level configure)\n   AC_ARG_ENABLE(multilib,\n   [  --enable-multilib       build hella library versions (default)],\n   [case \"${enableval}\" in\n@@ -46,6 +47,8 @@ AC_DEFUN(GLIBCPP_CONFIGURE, [\n   toplevel_srcdir=\\${top_srcdir}/$toprel\n   AC_SUBST(toplevel_srcdir)\n \n+#possibly test for the presence of the compiler sources here?\n+\n   # Export build and source directories.\n   # These need to be absolute paths, yet at the same time need to\n   # canonicalize only relative paths, because then amd will not unmount\n@@ -63,7 +66,8 @@ AC_DEFUN(GLIBCPP_CONFIGURE, [\n \n   AC_PROG_AWK\n   # Will set LN_S to either 'ln -s' or 'ln'.  With autoconf 2.5x, can also\n-  # be 'cp -p' if linking isn't available.\n+  # be 'cp -p' if linking isn't available.  Uncomment the next line to\n+  # force a particular method.\n   #ac_cv_prog_LN_S='cp -p'\n   AC_PROG_LN_S\n \n@@ -193,14 +197,12 @@ AC_DEFUN(GLIBCPP_CONFIGURE, [\n     AC_EXEEXT\n   fi\n \n-  . [$]{glibcpp_basedir}/configure.host\n-\n   case [$]{glibcpp_basedir} in\n     /* | [A-Za-z]:[\\\\/]*) libgcj_flagbasedir=[$]{glibcpp_basedir} ;;\n     *) glibcpp_flagbasedir='[$](top_builddir)/'[$]{glibcpp_basedir} ;;\n   esac\n \n-  # This does for the target what configure.host does for the host.  In\n+  # Find platform-specific directories containing configuration info.  In\n   # addition to possibly modifying the same flags, it also sets up symlinks.\n   GLIBCPP_CHECK_TARGET\n \n@@ -2139,12 +2141,14 @@ if test x$enable_shared = xno ||\n fi\n \n # Check to see if libgcc_s exists, indicating that shared libgcc is possible.\n-AC_MSG_CHECKING([for shared libgcc])\n-ac_save_CFLAGS=\"$CFLAGS\"\n-CFLAGS=' -lgcc_s'\n-AC_TRY_LINK( , [return 0], glibcpp_shared_libgcc=yes, glibcpp_shared_libgcc=no)\n-CFLAGS=\"$ac_save_CFLAGS\"\n-AC_MSG_RESULT($glibcpp_shared_libgcc)\n+if test $enable_symvers != no; then\n+  AC_MSG_CHECKING([for shared libgcc])\n+  ac_save_CFLAGS=\"$CFLAGS\"\n+  CFLAGS=' -lgcc_s'\n+  AC_TRY_LINK(, [return 0], glibcpp_shared_libgcc=yes, glibcpp_shared_libgcc=no)\n+  CFLAGS=\"$ac_save_CFLAGS\"\n+  AC_MSG_RESULT($glibcpp_shared_libgcc)\n+fi\n \n # For GNU ld, we need at least this version.  It's 2.12 in the same format\n # as the tested-for version.  See GLIBCPP_CHECK_LINKER_FEATURES for more.\n@@ -2198,30 +2202,12 @@ AC_MSG_RESULT($enable_symvers)\n ])\n \n \n-#serial 1\n-# This test replaces the one in autoconf.\n-# Currently this macro should have the same name as the autoconf macro\n-# because gettext's gettext.m4 (distributed in the automake package)\n-# still uses it.  Otherwise, the use in gettext.m4 makes autoheader\n-# give these diagnostics:\n-#   configure.in:556: AC_TRY_COMPILE was called before AC_ISC_POSIX\n-#   configure.in:556: AC_TRY_RUN was called before AC_ISC_POSIX\n-\n-undefine([AC_ISC_POSIX])\n-\n-AC_DEFUN([AC_ISC_POSIX],\n-  [\n-    dnl This test replaces the obsolescent AC_ISC_POSIX kludge.\n-    AC_CHECK_LIB(cposix, strerror, [LIBS=\"$LIBS -lcposix\"])\n-  ]\n-)\n-\n # Add --enable-maintainer-mode option to configure.\n # From Jim Meyering\n \n # serial 1\n \n-AC_DEFUN([AM_MAINTAINER_MODE],\n+AC_DEFUN(AM_MAINTAINER_MODE,\n [AC_MSG_CHECKING([whether to enable maintainer-specific portions of Makefiles])\n   dnl maintainer-mode is disabled by default\n   AC_ARG_ENABLE(maintainer-mode,\n@@ -2238,7 +2224,7 @@ AC_DEFUN([AM_MAINTAINER_MODE],\n \n # Define a conditional.\n \n-AC_DEFUN([AM_CONDITIONAL],\n+AC_DEFUN(AM_CONDITIONAL,\n [AC_SUBST($1_TRUE)\n AC_SUBST($1_FALSE)\n if $2; then\n@@ -2258,7 +2244,7 @@ fi])\n dnl Usage:\n dnl AM_INIT_AUTOMAKE(package,version, [no-define])\n \n-AC_DEFUN([AM_INIT_AUTOMAKE],\n+AC_DEFUN(AM_INIT_AUTOMAKE,\n [AC_REQUIRE([AC_PROG_INSTALL])\n PACKAGE=[$1]\n AC_SUBST(PACKAGE)\n@@ -2286,7 +2272,7 @@ AC_REQUIRE([AC_PROG_MAKE_SET])])\n # Check to make sure that the build environment is sane.\n #\n \n-AC_DEFUN([AM_SANITY_CHECK],\n+AC_DEFUN(AM_SANITY_CHECK,\n [AC_MSG_CHECKING([whether build environment is sane])\n # Just in case\n sleep 1\n@@ -2327,7 +2313,7 @@ AC_MSG_RESULT(yes)])\n \n dnl AM_MISSING_PROG(NAME, PROGRAM, DIRECTORY)\n dnl The program must properly implement --version.\n-AC_DEFUN([AM_MISSING_PROG],\n+AC_DEFUN(AM_MISSING_PROG,\n [AC_MSG_CHECKING(for working $2)\n # Run test in a subshell; some versions of sh will print an error if\n # an executable is not found, even if stderr is redirected.\n@@ -2343,7 +2329,7 @@ AC_SUBST($1)])\n \n # Like AC_CONFIG_HEADER, but automatically create stamp file.\n \n-AC_DEFUN([AM_CONFIG_HEADER],\n+AC_DEFUN(AM_CONFIG_HEADER,\n [AC_PREREQ([2.12])\n AC_CONFIG_HEADER([$1])\n dnl When config.status generates a header, we must update the stamp-h file."}, {"sha": "1ac39033f79285990b6dd8cd03de6d92636bbff0", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 944, "deletions": 953, "changes": 1897, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c839a4e1f492396fca48e4c87fa22509e4fb420/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c839a4e1f492396fca48e4c87fa22509e4fb420/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=2c839a4e1f492396fca48e4c87fa22509e4fb420"}, {"sha": "db3c57a06f823e303ea7efa53159b3d8d7492dc9", "filename": "libstdc++-v3/configure.host", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3ba8d11f88f79ce3bd07c5e9a98c85b6d394c45/libstdc%2B%2B-v3%2Fconfigure.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3ba8d11f88f79ce3bd07c5e9a98c85b6d394c45/libstdc%2B%2B-v3%2Fconfigure.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.host?ref=e3ba8d11f88f79ce3bd07c5e9a98c85b6d394c45", "patch": "@@ -1,31 +0,0 @@\n-# configure.host\n-\n-# This shell script handles all host based configuration for libstdc++.\n-# It sets various shell variables based on the the host and the\n-# configuration options.  You can modify this shell script without\n-# needing to rerun autoconf.\n-\n-# This shell script should be invoked as\n-#   . configure.host\n-# If it encounters an error, it will exit with a message.\n-\n-# It uses the following shell variables:\n-#   host                  The configuration host\n-#   host_cpu              The configuration host CPU\n-#   target_optspace       --enable-target-optspace (\"yes\", \"no\", \"\")\n-\n-# It sets the following shell variables:\n-\n-\n-AM_RUNTESTFLAGS= \n-\n-# Set any host dependent compiler flags.\n-# THIS TABLE IS SORTED.  KEEP IT THAT WAY.\n-\n-\n-case \"${host}\" in\n-  *)\n-    ;;\n-esac\n-\n-"}, {"sha": "9851bbadc305edc913f853d46ab2c1d52f022c2d", "filename": "libstdc++-v3/configure.in", "status": "modified", "additions": 51, "deletions": 38, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c839a4e1f492396fca48e4c87fa22509e4fb420/libstdc%2B%2B-v3%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c839a4e1f492396fca48e4c87fa22509e4fb420/libstdc%2B%2B-v3%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.in?ref=2c839a4e1f492396fca48e4c87fa22509e4fb420", "patch": "@@ -7,7 +7,7 @@ AC_INIT(src/ios.cc)\n # This works around the fact that libtool configuration may change LD\n # for this particular configuration, but some shells, instead of\n # keeping the changes in LD private, export them just because LD is\n-# exported.\n+# exported.  Only used at the end of this file.\n ORIGINAL_LD_FOR_MULTILIBS=$LD\n \n PACKAGE=libstdc++\n@@ -20,6 +20,17 @@ libtool_VERSION=4:1:0\n AC_SUBST(libtool_VERSION)\n \n # Gets build, host, target, *_vendor, *_cpu, *_os, etc.\n+#\n+# You will slowly go insane if you do not grok the following fact:  when\n+# building v3 as part of the compiler, the top-level /target/ becomes the\n+# library's /host/.  `configure' then causes --target to default to --host,\n+# exactly like any other package using autoconf.  Therefore, 'target' and\n+# 'host' will always be the same.  This makes sense both for native and\n+# cross compilers, just think about it for a little while.  :-)\n+#\n+# Also, if v3 is being configured as part of a cross compiler, the top-level\n+# configure script will pass the \"real\" host as $with_cross_host.\n+#\n # AC 2.5x sets target_alias iff the user specified --target, but we use it\n # everywhere, so we set it here just to be sure.  In AC 2.13\n # AC_CANONICAL_TARGET was known as AC_CANONICAL_SYSTEM.\n@@ -30,9 +41,8 @@ AC_SUBST(target_alias)\n AM_INIT_AUTOMAKE($PACKAGE, $release_VERSION)\n AM_CONFIG_HEADER(config.h)\n \n-# Runs configure.host and configure.target, as well as finds CC, CXX\n-# and assorted other critical bits.  Have to run this before the\n-# GLIBCPP_ENABLE_* macros below.\n+# Runs configure.target, finds CC, CXX and assorted other critical bits.\n+# Must run this before the GLIBCPP_ENABLE_* macros below.\n GLIBCPP_CONFIGURE(.)\n \n AC_LIBTOOL_DLOPEN\n@@ -63,24 +73,25 @@ AC_CHECK_HEADERS(string.h stdlib.h)\n \n if test -n \"$with_cross_host\" || test x\"$build\" != x\"$host\"; then\n \n-  # This lets us hard-code the functionality we know\n-  # we'll have in the cross target environment. \"Let\" is a\n-  # sugar-coated word placed on an especially dull and tedious hack, actually.\n-  # Here's why GLIBCPP_CHECK_MATH_SUPPORT, and other autoconf macros\n-  # that involve linking can't be used:\n-  # \"cannot open sim-crt0.o\"\n-  # \"cannot open crt0.o\"\n-  # etc. All this is because there currently exists no unified,\n-  # consistent way for top level CC information to be passed down\n-  # to target directories: newlib includes, newlib linking info,\n-  # libgloss versus newlib crt0.o, etc. When all of this is done, all\n-  # of this hokey, excessive AC_DEFINE junk for crosses can be removed.\n-\n   # We are being configured with some form of cross compiler.\n   GLIBCPP_IS_CROSS_COMPILING=1\n \n-  # If Canadian cross, then don't pick up tools from the build\n-  # directory.\n+  # This lets us hard-code the functionality we know we'll have in the cross\n+  # target environment.  \"Let\" is a sugar-coated word placed on an especially\n+  # dull and tedious hack, actually.\n+  #\n+  # Here's why GLIBCPP_CHECK_MATH_SUPPORT, and other autoconf macros\n+  # that involve linking, can't be used:\n+  #    \"cannot open sim-crt0.o\"\n+  #    \"cannot open crt0.o\"\n+  # etc.  All this is because there currently exists no unified, consistent\n+  # way for top level CC information to be passed down to target directories:\n+  # newlib includes, newlib linking info, libgloss versus newlib crt0.o, etc.\n+  # When all of that is done, all of this hokey, excessive AC_DEFINE junk for\n+  # crosses can be removed.\n+\n+  # If Canadian cross, then don't pick up tools from the build directory.\n+  # Used in GLIBCPP_EXPORT_INCLUDES (and nowhere else?).\n   if test -n \"$with_cross_host\" && test x\"$build\" != x\"$with_cross_host\"; then\n     CANADIAN=yes\n   else\n@@ -94,16 +105,15 @@ if test -n \"$with_cross_host\" || test x\"$build\" != x\"$host\"; then\n \n   case \"$target_alias\" in\n     *-linux*)\n-      # Check for available headers.\n+      os_include_dir=\"os/gnu-linux\"\n       AC_CHECK_HEADERS([nan.h ieeefp.h endian.h sys/isa_defs.h \\\n-\tmachine/endian.h machine/param.h sys/machine.h sys/types.h \\\n-\tfp.h locale.h float.h inttypes.h])\n+        machine/endian.h machine/param.h sys/machine.h sys/types.h \\\n+        fp.h locale.h float.h inttypes.h])\n       SECTION_FLAGS='-ffunction-sections -fdata-sections'\n       AC_SUBST(SECTION_FLAGS)\n       GLIBCPP_CHECK_LINKER_FEATURES\n       GLIBCPP_CHECK_COMPLEX_MATH_SUPPORT\n       GLIBCPP_CHECK_WCHAR_T_SUPPORT\n-      os_include_dir=\"config/os/gnu-linux\"\n       AC_DEFINE(HAVE_COPYSIGN)\n       AC_DEFINE(HAVE_COPYSIGNF)\n       AC_DEFINE(HAVE_FINITEF)\n@@ -112,20 +122,20 @@ if test -n \"$with_cross_host\" || test x\"$build\" != x\"$host\"; then\n       AC_DEFINE(HAVE_SINCOS)\n       AC_DEFINE(HAVE_SINCOSF)\n       if test x\"long_double_math_on_this_cpu\" = x\"yes\"; then\n-\tAC_DEFINE(HAVE_HYPOTL)\n+        AC_DEFINE(HAVE_HYPOTL)\n       fi\n       ;;\n     *-hpux*)\n       # Check for available headers.\n       AC_CHECK_HEADERS([nan.h ieeefp.h endian.h sys/isa_defs.h \\\n-\tmachine/endian.h machine/param.h sys/machine.h sys/types.h \\\n-\tfp.h locale.h float.h inttypes.h])\n+        machine/endian.h machine/param.h sys/machine.h sys/types.h \\\n+        fp.h locale.h float.h inttypes.h])\n       SECTION_FLAGS='-ffunction-sections -fdata-sections'\n       AC_SUBST(SECTION_FLAGS)\n       GLIBCPP_CHECK_LINKER_FEATURES\n       GLIBCPP_CHECK_COMPLEX_MATH_SUPPORT\n       GLIBCPP_CHECK_WCHAR_T_SUPPORT\n-      os_include_dir=\"config/os/hpux\"\n+      os_include_dir=\"os/hpux\"\n       AC_DEFINE(HAVE_COPYSIGN)\n       AC_DEFINE(HAVE_COPYSIGNF)\n       AC_DEFINE(HAVE_FINITEF)\n@@ -137,14 +147,14 @@ if test -n \"$with_cross_host\" || test x\"$build\" != x\"$host\"; then\n     *-netbsd*)\n       # Check for available headers.\n       AC_CHECK_HEADERS([nan.h ieeefp.h endian.h sys/isa_defs.h \\\n-\tmachine/endian.h machine/param.h sys/machine.h sys/types.h \\\n-\tfp.h locale.h float.h inttypes.h])\n+        machine/endian.h machine/param.h sys/machine.h sys/types.h \\\n+        fp.h locale.h float.h inttypes.h])\n       SECTION_FLAGS='-ffunction-sections -fdata-sections'\n       AC_SUBST(SECTION_FLAGS) \n       GLIBCPP_CHECK_LINKER_FEATURES\n       GLIBCPP_CHECK_COMPLEX_MATH_SUPPORT\n       GLIBCPP_CHECK_WCHAR_T_SUPPORT\n-      os_include_dir=\"config/os/bsd/netbsd\"\n+      os_include_dir=\"os/bsd/netbsd\"\n       AC_DEFINE(HAVE_COPYSIGN)\n       AC_DEFINE(HAVE_COPYSIGNF)\n       AC_DEFINE(HAVE_FINITEF)\n@@ -156,10 +166,10 @@ if test -n \"$with_cross_host\" || test x\"$build\" != x\"$host\"; then\n       GLIBCPP_CHECK_LINKER_FEATURES\n       GLIBCPP_CHECK_COMPLEX_MATH_SUPPORT\n       GLIBCPP_CHECK_WCHAR_T_SUPPORT\n-      os_include_dir=\"config/os/mingw32\"\n+      os_include_dir=\"os/mingw32\"\n       ;;\n     *-windiss*)\n-      os_include_dir=\"config/os/windiss\"\n+      os_include_dir=\"os/windiss\"\n       ;;\n changequote(,)dnl\n     *-qnx6.[12]*)\n@@ -169,7 +179,7 @@ changequote([,])dnl\n       GLIBCPP_CHECK_LINKER_FEATURES\n       GLIBCPP_CHECK_COMPLEX_MATH_SUPPORT\n       GLIBCPP_CHECK_WCHAR_T_SUPPORT\n-      os_include_dir=\"config/os/qnx/qnx6.1\"\n+      os_include_dir=\"os/qnx/qnx6.1\"\n       AC_DEFINE(HAVE_COSF)\n       AC_DEFINE(HAVE_COSL)\n       AC_DEFINE(HAVE_COSHF)\n@@ -184,7 +194,7 @@ changequote([,])dnl\n       AC_DEFINE(HAVE_SINHL)\n       ;;\n     *)\n-      os_include_dir=\"config/os/newlib\"\n+      os_include_dir=\"os/newlib\"\n       AC_DEFINE(HAVE_HYPOT)\n       ;;\n   esac\n@@ -290,6 +300,7 @@ changequote([,])dnl\n     AC_DEFINE(HAVE_TANL)\n     AC_DEFINE(HAVE_TANHL)\n   fi\n+\n else\n \n   # We are being configured natively. We can do more elaborate tests\n@@ -327,15 +338,17 @@ fi\n GLIBCPP_ENABLE_SYMVERS([yes])\n \n # Propagate the target-specific source directories through the build chain.\n-OS_INC_SRCDIR=$os_include_dir/bits\n-ATOMICITY_INC_SRCDIR=$ATOMICITYH/bits\n-CPU_LIMITS_INC_SRCDIR=$CPULIMITSH/bits\n+# (Nothing currently uses cpu_include_dir directly; only ATOMICITYH and\n+# CPULIMITSH [might] use it, and they only get used here.)\n+OS_INC_SRCDIR=config/${os_include_dir}/bits\n+ATOMICITY_INC_SRCDIR=config/${ATOMICITYH}/bits\n+CPU_LIMITS_INC_SRCDIR=config/${CPULIMITSH}/bits\n AC_SUBST(OS_INC_SRCDIR)\n AC_SUBST(ATOMICITY_INC_SRCDIR)\n AC_SUBST(CPU_LIMITS_INC_SRCDIR)\n \n # Set up cross-compile flags\n-AC_SUBST(GLIBCPP_IS_CROSS_COMPILING)\n+AC_SUBST(GLIBCPP_IS_CROSS_COMPILING)  dnl Unused so far.\n AM_CONDITIONAL(CANADIAN, test \"$CANADIAN\" = yes)\n  \n AC_CACHE_SAVE"}, {"sha": "863af91419f2e4bacb758b9c9d995cd659baa41f", "filename": "libstdc++-v3/configure.target", "status": "modified", "additions": 122, "deletions": 116, "changes": 238, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c839a4e1f492396fca48e4c87fa22509e4fb420/libstdc%2B%2B-v3%2Fconfigure.target", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c839a4e1f492396fca48e4c87fa22509e4fb420/libstdc%2B%2B-v3%2Fconfigure.target", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.target?ref=2c839a4e1f492396fca48e4c87fa22509e4fb420", "patch": "@@ -1,184 +1,190 @@\n # configure.target\n-\n+#\n # This shell script handles all target based configuration for libstdc++.\n # It sets various shell variables based on the the target and the\n-# configuration options.  You can modify this shell script without\n-# needing to rerun autoconf.\n-\n-# This shell script should be invoked as\n-#   . configure.target\n-# If it encounters an error, it will exit with a message.\n-\n-# It uses the following shell variables:\n-#   target                The configuration target\n+# configuration options.  You can modify this shell script without needing\n+# to rerun autoconf/aclocal/etc.  This file is \"sourced\" not executed.\n+#\n+# You should read docs/html/17_intro/porting.* to make sense of this file.\n+#\n+#\n+# It uses the following shell variables as set by config.guess:\n+#   target                The configuration target (full CPU-vendor-OS triplet)\n #   target_cpu            The configuration target CPU\n #   target_os             The configuration target OS\n+#\n+#\n+# It sets the following shell variables:\n+#\n+#   cpu_include_dir        CPU-specific directory, defaults to cpu/generic\n+#                              if cpu/target_cpu doesn't exist.  This is\n+#                              used to set the next two:\n+#   ATOMICITYH             location of bits/atomicity.h,\n+#                              defaults to cpu_include_dir\n+#   CPULIMITSH             location of bits/cpu_limits.h,\n+#                              defaults to cpu_include_dir\n+#\n+#   os_include_dir         OS-specific directory, defaults to os/generic.\n+#\n+#\n+# It possibly modifies the following variables:\n+#\n+#   OPT_LDFLAGS            extra flags to pass when linking the library, of\n+#                              the form '-Wl,blah'\n+#                              (defaults to empty in acinclude.m4)\n+#\n+#\n+# If the defaults will not work for your platform, you need only change the\n+# variables that won't work, i.e., you do not need to explicitly set a\n+# working variable to its default.  Most targets only need to change the two\n+# *_include_dir variables.\n \n-# It possibly modifies the following shell variables:\n-#   cpu_include_dir        CPU-specific include directory, relative to srcdir\n-#   os_include_dir         OS-specific include directory, relative to srcdir\n \n+# Try to guess a default cpu_include_dir based on the name of the CPU.  We\n+# cannot do this for os_include_dir; there are too many portable operating\n+# systems out there.  :-)\n+if test -d ${glibcpp_srcdir}/config/cpu/${target_cpu}; then\n+    cpu_include_dir=\"cpu/${target_cpu}\"\n+else\n+    cpu_include_dir=\"cpu/generic\"\n+fi\n \n-# Set any CPU dependent compiler flags.\n+\n+# Here we override defaults and catch more general cases due to naming\n+# conventions (e.g., chip_name* to catch all variants).  Also set any\n+# CPU-dependent compiler flags.\n # THIS TABLE IS SORTED.  KEEP IT THAT WAY.\n case \"${target_cpu}\" in\n   alpha*)\n-    cpu_include_dir=\"config/cpu/alpha\"\n+    cpu_include_dir=\"cpu/alpha\"\n     ;;\n   arm*)\n-    cpu_include_dir=\"config/cpu/arm\"\n-    ;;\n-  cris)\n-    cpu_include_dir=\"config/cpu/cris\"\n-    ;;\n-  ia64)\n-    cpu_include_dir=\"config/cpu/ia64\"\n-    ;;\n-  i386)\n-    cpu_include_dir=\"config/cpu/i386\"\n+    cpu_include_dir=\"cpu/arm\"\n     ;;\n   i486 | i586 | i686 | i786)\n-    cpu_include_dir=\"config/cpu/i486\"\n+    cpu_include_dir=\"cpu/i486\"\n+    CPULIMITSH=\"cpu/i386\"\n     ;;\n   m68k | m680[246]0)\n-    cpu_include_dir=\"config/cpu/m68k\"\n+    cpu_include_dir=\"cpu/m68k\"\n+    ;;\n+  mmix)\n+    ATOMICITYH=\"cpu/generic\"\n     ;;\n   powerpc | rs6000)\n-    cpu_include_dir=\"config/cpu/powerpc\"\n+    cpu_include_dir=\"cpu/powerpc\"\n     ;;\n   s390 | s390x)\n-    cpu_include_dir=\"config/cpu/s390\"\n+    cpu_include_dir=\"cpu/s390\"\n     ;;\n   sparc64 | ultrasparc)\n-    cpu_include_dir=\"config/cpu/sparc/sparc64\"\n+    cpu_include_dir=\"cpu/sparc/sparc64\"\n     ;;\n   sparc*)\n-    cpu_include_dir=\"config/cpu/sparc/sparc32\"\n+    cpu_include_dir=\"cpu/sparc/sparc32\"\n     ;;\n   x86_64*)\n-    cpu_include_dir=\"config/cpu/x86-64\"\n-    ;;\n-  *)\n-    cpu_include_dir=\"config/cpu/generic\"\n+    cpu_include_dir=\"cpu/x86-64\"\n     ;;\n esac\n \n \n-# Set any OS dependent compiler flags.\n+# Now look for the two files usually tied to a CPU model, and make default\n+# choices for those if they haven't been explicitly set already.\n+_cpu_incdir_fullpath=${glibcpp_srcdir}/config/${cpu_include_dir}\n+if test x${ATOMICITYH+set} != xset; then\n+  if test -f ${_cpu_incdir_fullpath}/bits/atomicity.h; then\n+    ATOMICITYH=$cpu_include_dir\n+  else\n+    ATOMICITYH=\"cpu/generic\"\n+  fi\n+fi\n+if test x${CPULIMITSH+set} != xset; then\n+  if test -f ${_cpu_incdir_fullpath}/bits/cpu_limits.h; then\n+    CPULIMITSH=$cpu_include_dir\n+  else\n+    CPULIMITSH=\"cpu/generic\"\n+  fi\n+fi\n+unset _cpu_incdir_fullpath\n+\n+\n+# Set the os_include_dir.  If atomic ops and/or numeric limits are OS-specific\n+# rather than CPU-specifc, set those here too.  Also set any OS-dependent\n+# compiler flags.\n # THIS TABLE IS SORTED.  KEEP IT THAT WAY.\n case \"${target_os}\" in\n   aix4.[3456789]* | aix[56789]*)\n-    os_include_dir=\"config/os/aix\"\n+    # We set os_include_dir to os/aix only on AIX 4.3 and newer, but\n+    # os/aix/bits/atomicity.h works on earlier versions of AIX 4.*, so we\n+    # explicitly duplicate the directory for 4.[<3].\n+    os_include_dir=\"os/aix\"\n+    ATOMICITYH=\"os/aix\"\n     OPT_LDFLAGS=\"-Wl,-G\"\n     ;;\n+  aix4.*)\n+    ATOMICITYH=\"os/aix\"\n+    ;;\n+  aix*)\n+    ATOMICITYH=\"cpu/generic\"\n+    ;;\n   bsd* | freebsd* )\n-    os_include_dir=\"config/os/bsd/freebsd\"\n+    os_include_dir=\"os/bsd/freebsd\"\n     ;;\n   cygwin*)\n-    os_include_dir=\"config/os/newlib\"\n+    os_include_dir=\"os/newlib\"\n+    ;;\n+  *djgpp*)      # leading * picks up \"msdosdjgpp\"\n+    os_include_dir=\"os/djgpp\"\n     ;;\n-  *djgpp*)\n-    os_include_dir=\"config/os/djgpp\"\n+  gnu* | linux*)\n+    os_include_dir=\"os/gnu-linux\"\n     ;;\n-  linux* | gnu*)\n-    os_include_dir=\"config/os/gnu-linux\"\n+  hpux*)\n+    os_include_dir=\"os/hpux\"\n+    CPULIMITSH=\"os/hpux\"\n     ;;\n   irix[1-6] | irix[1-5].* | irix6.[0-4])\n-   # This is known to work on at least IRIX 5.2 and 6.3.\n-   os_include_dir=\"config/os/irix/irix5.2\"\n-   ;;\n+    # This is known to work on at least IRIX 5.2 and 6.3.\n+    os_include_dir=\"os/irix/irix5.2\"\n+    ATOMICITYH=$os_include_dir\n+    ;;\n   irix6.5)\n-    os_include_dir=\"config/os/irix/irix6.5\"\n+    os_include_dir=\"os/irix/irix6.5\"\n+    ATOMICITYH=$os_include_dir\n     ;;\n   mingw32*)\n-    os_include_dir=\"config/os/mingw32\"\n+    os_include_dir=\"os/mingw32\"\n     ;;\n   netbsd*)\n-    os_include_dir=\"config/os/bsd/netbsd\"\n+    os_include_dir=\"os/bsd/netbsd\"\n     ;;\n   solaris2.5*)\n-    os_include_dir=\"config/os/solaris/solaris2.5\"\n+    os_include_dir=\"os/solaris/solaris2.5\"\n     ;;\n   solaris2.6*)\n-    os_include_dir=\"config/os/solaris/solaris2.6\"\n+    os_include_dir=\"os/solaris/solaris2.6\"\n     ;;\n-  solaris2.7* | solaris2.8*)\n-    os_include_dir=\"config/os/solaris/solaris2.7\"\n-    ;;\n-  hpux*)\n-    os_include_dir=\"config/os/hpux\"\n+  solaris2.[78]*)\n+    os_include_dir=\"os/solaris/solaris2.7\"\n     ;;\n   windiss*)\n-    os_include_dir=\"config/os/windiss\"\n+    os_include_dir=\"os/windiss\"\n     ;;\n   qnx6.[12]*)\n-    os_include_dir=\"config/os/qnx/qnx6.1\"\n+    os_include_dir=\"os/qnx/qnx6.1\"\n     ;;\n   *)\n-    os_include_dir=\"config/os/generic\"\n+    os_include_dir=\"os/generic\"\n     ;;\n esac\n \n \n # Set any flags dependent on the full target triplet.\n # THIS TABLE IS SORTED.  KEEP IT THAT WAY.\n case \"${target}\" in\n-   *-*-aix[456789]*)\n-     # We set os_include_dir to config/os/aix only on AIX 4.3 and\n-     # newer, but config/os/aix/bits/atomicity.h works on earlier\n-     # versions of AIX 4.*, so we explicitly duplicate the directory\n-     # here, because os_include_dir.\n-     ATOMICITYH=config/os/aix\n-     ;;\n-   *-*-aix*)\n-     ATOMICITYH=config/cpu/generic\n-     ;;\n-   *-*-irix*)\n-     ATOMICITYH=$os_include_dir\n-     ;;\n-   *)\n-     ATOMICITYH=$cpu_include_dir\n-     ;;\n+  alpha*-*-*osf5*)\n+    CPULIMITSH=\"os/osf/osf5.0\"\n+    ;;\n esac\n \n-# Set CPULIMITSH to the directory where the configuration-dependent\n-# cpu_limits.h can be found.\n-# THIS TABLE IS SORTED.  KEEP IT THAT WAY.\n-case \"${target}\" in\n-   *-*-hpux*)\n-     CPULIMITSH=config/os/hpux\n-     ;;\n-   alpha*-*-*osf5*)\n-     CPULIMITSH=config/os/osf/osf5.0\n-     ;;\n-   alpha*-*-*)\n-     CPULIMITSH=config/cpu/alpha\n-     ;;\n-   cris-*-*)\n-     CPULIMITSH=config/cpu/cris\n-     ;;\n-   ia64-*-*)\n-     CPULIMITSH=config/cpu/ia64\n-     ;;\n-   i?86-*-*)\n-     CPULIMITSH=config/cpu/i386\n-     ;;\n-   m68k-*-* | m680[246]0-*-*)\n-     CPULIMITSH=config/cpu/m68k\n-     ;;\n-   mmix-*-*)\n-     CPULIMITSH=config/cpu/mmix\n-     ;;\n-   powerpc-*-*)\n-     CPULIMITSH=config/cpu/powerpc\n-     ;;\n-   s390-*-* | s390x-*-*)\n-     CPULIMITSH=config/cpu/s390\n-     ;;\n-   x86_64-*-*)\n-     CPULIMITSH=config/cpu/x86-64\n-     ;;\n-   *)\n-     CPULIMITSH=config/cpu/generic\n-     ;;\n-esac"}, {"sha": "347c73f891e013ece736def0cc4a77b0f5c362ab", "filename": "libstdc++-v3/docs/html/17_intro/porting.html", "status": "modified", "additions": 111, "deletions": 59, "changes": 170, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c839a4e1f492396fca48e4c87fa22509e4fb420/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fporting.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c839a4e1f492396fca48e4c87fa22509e4fb420/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fporting.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fporting.html?ref=2c839a4e1f492396fca48e4c87fa22509e4fb420", "patch": "@@ -1,25 +1,29 @@\n-<html lang=\"en\"><head>\n+<html lang=\"en\">\n+<head>\n <title>Porting libstdc++-v3</title>\n <meta http-equiv=\"Content-Type\" content=\"text/html\">\n <meta name=description content=\"Porting libstdc++-v3\">\n-<meta name=generator content=\"makeinfo 4.0\">\n+<meta name=generator content=\"makeinfo 4.1\">\n <link href=\"http://texinfo.org/\" rel=generator-home>\n-</head><body>\n-\n+</head>\n+<body>\n+<h1>Porting libstdc++-v3</h1>\n <p><hr>\n Node:<a name=\"Top\">Top</a>,\n Next:<a rel=next href=\"#Operating%20system\">Operating system</a>,\n-Up:<a rel=up href=\"#(dir)\">(dir)</a>\n+Up:<a rel=up href=\"#dir\">(dir)</a>\n <br>\n \n-<h1>Porting libstdc++-v3</h1>\n+<h2>Porting libstdc++-v3</h2>\n \n <p>This document explains how to port libstdc++-v3 (the GNU C++ library) to\n a new target.\n \n <p>In order to make the GNU C++ library (libstdc++-v3) work with a new\n target, you must edit some configuration files and provide some new\n-header files.\n+header files.  Unless this is done, libstdc++-v3 will use generic\n+settings which may not be correct for your target; even if they are\n+correct, they will likely be inefficient.\n \n <p>Before you get started, make sure that you have a working C library on\n your target.  The C library need not precisely comply with any\n@@ -34,6 +38,7 @@ <h1>Porting libstdc++-v3</h1>\n \n <ul>\n <li><a href=\"#Operating%20system\">Operating system</a>:     Configuring for your operating system. \n+<li><a href=\"#CPU\">CPU</a>:                  Configuring for your processor chip. \n <li><a href=\"#Character%20types\">Character types</a>:      Implementing character classification. \n <li><a href=\"#Thread%20safety\">Thread safety</a>:        Implementing atomic operations. \n <li><a href=\"#Numeric%20limits\">Numeric limits</a>: \tImplementing numeric limits. \n@@ -43,14 +48,14 @@ <h1>Porting libstdc++-v3</h1>\n \n <p><hr>\n Node:<a name=\"Operating%20system\">Operating system</a>,\n-Next:<a rel=next href=\"#Character%20types\">Character types</a>,\n+Next:<a rel=next href=\"#CPU\">CPU</a>,\n Previous:<a rel=previous href=\"#Top\">Top</a>,\n Up:<a rel=up href=\"#Top\">Top</a>\n <br>\n \n-<h1>Operating system</h1>\n+<h2>Operating system</h2>\n \n-<p>If you are porting to a new operating-system (as opposed to a new chip\n+<p>If you are porting to a new operating system (as opposed to a new chip\n using an existing operating system), you will need to create a new\n directory in the <code>config/os</code> hierarchy.  For example, the IRIX\n configuration files are all in <code>config/os/irix</code>.  There is no set\n@@ -77,7 +82,7 @@ <h1>Operating system</h1>\n <code>__off64_t</code>, and <code>__ssize_t</code>.  Typically, this just looks\n like:\n \n-<pre>#define __off_t off_t\n+<br><pre>#define __off_t off_t\n #define __off64_t off64_t\n #define __ssize_t ssize_t\n </pre>\n@@ -113,7 +118,7 @@ <h1>Operating system</h1>\n <p>Finally, you should bracket the entire file in an include-guard, like\n this:\n \n-<pre>#ifndef _GLIBCPP_OS_DEFINES\n+<br><pre>#ifndef _GLIBCPP_OS_DEFINES\n #define _GLIBCPP_OS_DEFINES\n ...\n #endif\n@@ -122,14 +127,45 @@ <h1>Operating system</h1>\n <p>We recommend copying an existing <code>bits/os_defines.h</code> to use as a\n starting point.\n \n+<p><hr>\n+Node:<a name=\"CPU\">CPU</a>,\n+Next:<a rel=next href=\"#Character%20types\">Character types</a>,\n+Previous:<a rel=previous href=\"#Operating%20system\">Operating system</a>,\n+Up:<a rel=up href=\"#Top\">Top</a>\n+<br>\n+\n+<h2>CPU</h2>\n+\n+<p>If you are porting to a new chip (as opposed to a new operating system\n+running on an existing chip), you will need to create a new directory in the\n+<code>config/cpu</code> hierarchy.  Much like the <a href=\"#Operating%20system\">Operating system</a> setup,\n+there are no strict rules on how to organize the CPU configuration\n+directory, but careful naming choices will allow the configury to find your\n+setup files without explicit help.\n+\n+<p>We recommend that for a target triplet <code>&lt;CPU&gt;-&lt;vendor&gt;-&lt;OS&gt;</code>, you\n+name your configuration directory <code>config/cpu/&lt;CPU&gt;</code>.  If you do this,\n+the configury will find the directory itself.  Otherwise you will need to\n+edit the <code>configure.target</code> file and, in the switch statement that sets\n+<code>cpu_include_dir</code>, add a pattern to handle your chip.\n+\n+<p>Note that some chip families share a single configuration directory, for\n+example, <code>alpha</code>, <code>alphaev5</code>, and <code>alphaev6</code> all use the\n+<code>config/cpu/alpha</code> directory, and there is an entry in the\n+<code>configure.target</code> switch statement to handle this.\n+\n+<p>The <code>cpu_include_dir</code> sets default locations for the files controlling\n+<a href=\"#Thread%20safety\">Thread safety</a> and <a href=\"#Numeric%20limits\">Numeric limits</a>, if the defaults are not\n+appropriate for your chip.\n+\n <p><hr>\n Node:<a name=\"Character%20types\">Character types</a>,\n Next:<a rel=next href=\"#Thread%20safety\">Thread safety</a>,\n-Previous:<a rel=previous href=\"#Operating%20system\">Operating system</a>,\n+Previous:<a rel=previous href=\"#CPU\">CPU</a>,\n Up:<a rel=up href=\"#Top\">Top</a>\n <br>\n \n-<h1>Character types</h1>\n+<h2>Character types</h2>\n \n <p>The library requires that you provide three header files to implement\n character classification, analogous to that provided by the C libraries\n@@ -153,7 +189,7 @@ <h1>Character types</h1>\n declarations, and one enumeration declaration, like this example, taken\n from the IRIX configuration:\n \n-<pre>struct ctype_base\n+<br><pre>struct ctype_base\n {\n   typedef unsigned int \tmask;\n   typedef int* \t\t__to_type;\n@@ -195,7 +231,7 @@ <h1>Character types</h1>\n function that must be written is the <code>ctype&lt;char&gt;::ctype</code>\n constructor.  Here is the IRIX example:\n \n-<pre>ctype&lt;char&gt;::ctype(const mask* __table = 0, bool __del = false,\n+<br><pre>ctype&lt;char&gt;::ctype(const mask* __table = 0, bool __del = false,\n       size_t __refs = 0)\n   : _Ctype_nois&lt;char&gt;(__refs), _M_del(__table != 0 &amp;&amp; __del),\n     _M_toupper(NULL),\n@@ -219,7 +255,7 @@ <h1>Character types</h1>\n <p>Now, you have to write two functions to convert from upper-case to\n lower-case, and vice versa.  Here are the IRIX versions:\n \n-<pre>char\n+<br><pre>char\n ctype&lt;char&gt;::do_toupper(char __c) const\n { return _toupper(__c); }\n \n@@ -237,7 +273,7 @@ <h1>Character types</h1>\n could use specialized routines for greater performance if you have\n machinery to do that on your system:\n \n-<pre>const char*\n+<br><pre>const char*\n ctype&lt;char&gt;::do_toupper(char* __low, const char* __high) const\n {\n   while (__low &lt; __high)\n@@ -270,7 +306,7 @@ <h1>Character types</h1>\n \n <p>The first function is implemented like this on IRIX:\n \n-<pre>bool\n+<br><pre>bool\n ctype&lt;char&gt;::\n is(mask __m, char __c) const throw()\n { return (_M_table)[(unsigned char)(__c)] &amp; __m; }\n@@ -282,7 +318,7 @@ <h1>Character types</h1>\n \n <p>The next function is:\n \n-<pre>const char*\n+<br><pre>const char*\n ctype&lt;char&gt;::\n is(const char* __low, const char* __high, mask* __vec) const throw()\n {\n@@ -298,7 +334,7 @@ <h1>Character types</h1>\n \n <p>The last two functions again are entirely generic:\n \n-<pre>const char*\n+<br><pre>const char*\n ctype&lt;char&gt;::\n scan_is(mask __m, const char* __low, const char* __high) const throw()\n {\n@@ -324,7 +360,7 @@ <h1>Character types</h1>\n Up:<a rel=up href=\"#Top\">Top</a>\n <br>\n \n-<h1>Thread safety</h1>\n+<h2>Thread safety</h2>\n \n <p>The C++ library string functionality requires a couple of atomic\n operations to provide thread-safety.  If you don't take any special\n@@ -336,14 +372,26 @@ <h1>Thread safety</h1>\n are two distinct approaches.  One is to provide a version for your CPU,\n using assembly language constructs.  The other is to use the\n thread-safety primitives in your operating system.  In either case, you\n-make a file called <code>bits/atomicity.h</code>.\n+make a file called <code>bits/atomicity.h</code>, and the variable\n+<code>ATOMICITYH</code> must point to this file.\n \n <p>If you are using the assembly-language approach, put this code in\n <code>config/cpu/&lt;chip&gt;/bits/atomicity.h</code>, where chip is the name of\n-your processor.  In that case, edit the switch statement in\n-<code>configure.target</code> to set the <code>cpu_include_dir</code>.  In either\n-case, set the switch statement that sets <code>ATOMICITYH</code> to be the\n-directory containing <code>bits/atomicity.h</code>.\n+your processor (see <a href=\"#CPU\">CPU</a>).  No additional changes are necessary to\n+locate the file in this case; <code>ATOMICITYH</code> will be set by default.\n+\n+<p>If you are using the operating system thread-safety primitives approach,\n+you can also put this code in the same CPU directory, in which case no more\n+work is needed to locate the file.  For examples of this approach,\n+see the <code>atomicity.h</code> file for IRIX or IA64.\n+\n+<p>Alternatively, if the primitives are more closely related to the OS\n+than they are to the CPU, you can put the <code>atomicity.h</code> file in\n+the <a href=\"#Operating%20system\">Operating system</a> directory instead.  In this case, you must\n+edit <code>configure.target</code>, and in the switch statement that handles\n+operating systems, override the <code>ATOMICITYH</code> variable to point to\n+the appropriate <code>os_include_dir</code>.  For examples of this approach,\n+see the <code>atomicity.h</code> file for AIX.\n \n <p>With those bits out of the way, you have to actually write\n <code>bits/atomicity.h</code> itself.  This file should be wrapped in an\n@@ -352,7 +400,7 @@ <h1>Thread safety</h1>\n \n <p>The type is <code>_Atomic_word</code>.  Here is the version used on IRIX:\n \n-<pre>typedef long _Atomic_word;\n+<br><pre>typedef long _Atomic_word;\n </pre>\n \n <p>This type must be a signed integral type supporting atomic operations. \n@@ -363,7 +411,7 @@ <h1>Thread safety</h1>\n <p>Then, you must provide two functions.  The bodies of these functions\n must be equivalent to those provided here, but using atomic operations:\n \n-<pre>static inline _Atomic_word\n+<br><pre>static inline _Atomic_word\n __attribute__ ((__unused__))\n __exchange_and_add (_Atomic_word* __mem, int __val)\n {\n@@ -387,7 +435,7 @@ <h1>Thread safety</h1>\n Up:<a rel=up href=\"#Top\">Top</a>\n <br>\n \n-<h1>Numeric limits</h1>\n+<h2>Numeric limits</h2>\n \n <p>The C++ library requires information about the fundamental data types,\n such as the minimum and maximum representable values of each type. \n@@ -396,16 +444,12 @@ <h1>Numeric limits</h1>\n types and let the library do the rest.  For information about the\n macros to define, see the top of <code>include/bits/std_limits.h</code>.\n \n-<p>If you need to define any macros, you can do so in\n-<code>os_defines.h</code>.  However, if all operating systems for your CPU\n-are likely to use the same values, you can provide a CPU-specific file\n-instead so that you do not have to provide the same definitions for\n-each operating system.  To take that approach, create a new file\n-called <code>limits.h</code> in your CPU configuration directory (e.g.,\n-<code>config/cpu/i386/bits</code>) and then modify <code>configure.target</code>\n-so that <code>LIMITSH</code> is set to the CPU directory (e.g.,\n-<code>config/cpu/i386</code>).  Note that <code>LIMITSH</code> should not include\n-the <code>bits</code> part of the directory name.\n+<p>If you need to define any macros, you can do so in <code>os_defines.h</code>. \n+However, if all operating systems for your CPU are likely to use the\n+same values, you can provide a CPU-specific file instead so that you\n+do not have to provide the same definitions for each operating system. \n+To take that approach, create a new file called <code>cpu_limits.h</code> in\n+your CPU configuration directory (see <a href=\"#CPU\">CPU</a>).\n \n <p><hr>\n Node:<a name=\"Libtool\">Libtool</a>,\n@@ -414,7 +458,7 @@ <h1>Numeric limits</h1>\n Up:<a rel=up href=\"#Top\">Top</a>\n <br>\n \n-<h1>Libtool</h1>\n+<h2>Libtool</h2>\n \n <p>The C++ library is compiled, archived and linked with libtool. \n Explaining the full workings of libtool is beyond the scope of this\n@@ -433,10 +477,10 @@ <h1>Libtool</h1>\n object files when the C++ library is built as a shared library, or\n taking other system-specific actions.\n \n-<p>The libstdc++-v3 library is linked with the C version of libtool, even though it\n-is a C++ library.  Therefore, the C version of libtool needs to ensure\n-that the run-time library initializers are run.  The usual way to do\n-this is to build the library using <code>gcc -shared</code>.\n+<p>The libstdc++-v3 library is linked with the C version of libtool, even\n+though it is a C++ library.  Therefore, the C version of libtool needs to\n+ensure that the run-time library initializers are run.  The usual way to\n+do this is to build the library using <code>gcc -shared</code>.\n \n <p>If you need to change how the library is linked, look at\n <code>ltcf-c.sh</code> in the top-level directory.  Find the switch statement\n@@ -449,11 +493,10 @@ <h1>Libtool</h1>\n Up:<a rel=up href=\"#Top\">Top</a>\n <br>\n \n-<h1>GNU Free Documentation License</h1>\n-\n-<p align=\"center\">Version 1.1, March 2000</p>\n+<h2>GNU Free Documentation License</h2>\n \n-<pre>Copyright &copy; 2000 Free Software Foundation, Inc.\n+<div align=\"center\">Version 1.1, March 2000</div>\n+<br><pre>Copyright &copy; 2000 Free Software Foundation, Inc.\n 59 Temple Place, Suite 330, Boston, MA  02111-1307, USA\n \n Everyone is permitted to copy and distribute verbatim copies\n@@ -789,13 +832,13 @@ <h1>GNU Free Documentation License</h1>\n as a draft) by the Free Software Foundation.\n </ol>\n \n-<h2>ADDENDUM: How to use this License for your documents</h2>\n+<h3>ADDENDUM: How to use this License for your documents</h3>\n \n <p>To use this License in a document you have written, include a copy of\n the License in the document and put the following copyright and\n license notices just after the title page:\n \n-<pre>  Copyright (C)  <var>year</var>  <var>your name</var>.\n+<br><pre>  Copyright (C)  <var>year</var>  <var>your name</var>.\n   Permission is granted to copy, distribute and/or modify this document\n   under the terms of the GNU Free Documentation License, Version 1.1\n   or any later version published by the Free Software Foundation;\n@@ -816,15 +859,24 @@ <h2>ADDENDUM: How to use this License for your documents</h2>\n to permit their use in free software.\n \n \n-<h1>Table of Contents</h1>\n+<h2>Table of Contents</h2>\n <ul>\n-<li><a href=\"#Top\">Porting libstdc++-v3</a>\n-<li><a href=\"#Operating%20system\">Operating system</a>\n-<li><a href=\"#Character%20types\">Character types</a>\n-<li><a href=\"#Thread%20safety\">Thread safety</a>\n-<li><a href=\"#Numeric%20limits\">Numeric limits</a>\n-<li><a href=\"#Libtool\">Libtool</a>\n-<li><a href=\"#GNU%20Free%20Documentation%20License\">GNU Free Documentation License</a>\n+<li><a name=\"toc_Top\"></a>\n+    <a href=\"#Top\">Porting libstdc++-v3</a>\n+<li><a name=\"toc_Operating%20system\"></a>\n+    <a href=\"#Operating%20system\">Operating system</a>\n+<li><a name=\"toc_CPU\"></a>\n+    <a href=\"#CPU\">CPU</a>\n+<li><a name=\"toc_Character%20types\"></a>\n+    <a href=\"#Character%20types\">Character types</a>\n+<li><a name=\"toc_Thread%20safety\"></a>\n+    <a href=\"#Thread%20safety\">Thread safety</a>\n+<li><a name=\"toc_Numeric%20limits\"></a>\n+    <a href=\"#Numeric%20limits\">Numeric limits</a>\n+<li><a name=\"toc_Libtool\"></a>\n+    <a href=\"#Libtool\">Libtool</a>\n+<li><a name=\"toc_GNU%20Free%20Documentation%20License\"></a>\n+    <a href=\"#GNU%20Free%20Documentation%20License\">GNU Free Documentation License</a>\n <ul>\n <li><a href=\"#GNU%20Free%20Documentation%20License\">ADDENDUM: How to use this License for your documents</a>\n </ul>"}, {"sha": "6027ab1dda5e8494fa1fe66e08cfef3941ebf463", "filename": "libstdc++-v3/docs/html/17_intro/porting.texi", "status": "modified", "additions": 64, "deletions": 23, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c839a4e1f492396fca48e4c87fa22509e4fb420/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fporting.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c839a4e1f492396fca48e4c87fa22509e4fb420/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fporting.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fporting.texi?ref=2c839a4e1f492396fca48e4c87fa22509e4fb420", "patch": "@@ -12,7 +12,7 @@\n This file explains how to port libstdc++-v3 (the GNU C++ library) to \n a new target.\n \n-Copyright (c) 2000, 2001 Free Software Foundation, Inc.\n+Copyright (c) 2000, 2001, 2002 Free Software Foundation, Inc.\n @end ifinfo\n \n @c ---------------------------------------------------------------------\n@@ -24,7 +24,7 @@ Copyright (c) 2000, 2001 Free Software Foundation, Inc.\n @author Mark Mitchell\n @page\n @vskip 0pt plus 1filll\n-Copyright @copyright{} 2000, 2001 Free Software Foundation, Inc.\n+Copyright @copyright{} 2000, 2001, 2002 Free Software Foundation, Inc.\n \n Permission is granted to copy, distribute and/or modify this document\n under the terms of the GNU Free Documentation License, Version 1.1 or\n@@ -57,7 +57,9 @@ a new target.\n \n In order to make the GNU C++ library (libstdc++-v3) work with a new\n target, you must edit some configuration files and provide some new\n-header files.  \n+header files.  Unless this is done, libstdc++-v3 will use generic\n+settings which may not be correct for your target; even if they are\n+correct, they will likely be inefficient.\n \n Before you get started, make sure that you have a working C library on\n your target.  The C library need not precisely comply with any\n@@ -72,6 +74,7 @@ Here are the primary steps required to port the library:\n \n @menu\n * Operating system::    Configuring for your operating system.\n+* CPU::                 Configuring for your processor chip.\n * Character types::     Implementing character classification.\n * Thread safety::       Implementing atomic operations.\n * Numeric limits::\tImplementing numeric limits.\n@@ -86,7 +89,7 @@ Here are the primary steps required to port the library:\n @node Operating system\n @chapter Operating system\n \n-If you are porting to a new operating-system (as opposed to a new chip\n+If you are porting to a new operating system (as opposed to a new chip\n using an existing operating system), you will need to create a new\n directory in the @file{config/os} hierarchy.  For example, the IRIX\n configuration files are all in @file{config/os/irix}.  There is no set\n@@ -161,6 +164,36 @@ this:\n We recommend copying an existing @file{bits/os_defines.h} to use as a\n starting point.\n \n+@c ---------------------------------------------------------------------\n+@c CPU\n+@c ---------------------------------------------------------------------\n+\n+@node CPU\n+@chapter CPU\n+\n+If you are porting to a new chip (as opposed to a new operating system\n+running on an existing chip), you will need to create a new directory in the\n+@file{config/cpu} hierarchy.  Much like the @ref{Operating system} setup,\n+there are no strict rules on how to organize the CPU configuration\n+directory, but careful naming choices will allow the configury to find your\n+setup files without explicit help.\n+\n+We recommend that for a target triplet @code{<CPU>-<vendor>-<OS>}, you\n+name your configuration directory @file{config/cpu/<CPU>}.  If you do this,\n+the configury will find the directory itself.  Otherwise you will need to\n+edit the @file{configure.target} file and, in the switch statement that sets\n+@code{cpu_include_dir}, add a pattern to handle your chip.\n+\n+Note that some chip families share a single configuration directory, for\n+example, @code{alpha}, @code{alphaev5}, and @code{alphaev6} all use the\n+@file{config/cpu/alpha} directory, and there is an entry in the\n+@file{configure.target} switch statement to handle this.\n+\n+The @code{cpu_include_dir} sets default locations for the files controlling\n+@ref{Thread safety} and @ref{Numeric limits}, if the defaults are not\n+appropriate for your chip.\n+\n+\n @c ---------------------------------------------------------------------\n @c Character types\n @c ---------------------------------------------------------------------\n@@ -383,14 +416,26 @@ If you want to provide custom, safe, versions of these functions, there\n are two distinct approaches.  One is to provide a version for your CPU,\n using assembly language constructs.  The other is to use the\n thread-safety primitives in your operating system.  In either case, you\n-make a file called @file{bits/atomicity.h}.  \n+make a file called @file{bits/atomicity.h}, and the variable\n+@code{ATOMICITYH} must point to this file.\n \n If you are using the assembly-language approach, put this code in\n @file{config/cpu/<chip>/bits/atomicity.h}, where chip is the name of\n-your processor.  In that case, edit the switch statement in\n-@file{configure.target} to set the @code{cpu_include_dir}.  In either\n-case, set the switch statement that sets @code{ATOMICITYH} to be the\n-directory containing @file{bits/atomicity.h}.\n+your processor (@pxref{CPU}).  No additional changes are necessary to\n+locate the file in this case; @code{ATOMICITYH} will be set by default.\n+\n+If you are using the operating system thread-safety primitives approach,\n+you can also put this code in the same CPU directory, in which case no more\n+work is needed to locate the file.  For examples of this approach,\n+see the @file{atomicity.h} file for IRIX or IA64.\n+\n+Alternatively, if the primitives are more closely related to the OS\n+than they are to the CPU, you can put the @file{atomicity.h} file in\n+the @ref{Operating system} directory instead.  In this case, you must\n+edit @file{configure.target}, and in the switch statement that handles\n+operating systems, override the @code{ATOMICITYH} variable to point to\n+the appropriate @code{os_include_dir}.  For examples of this approach,\n+see the @file{atomicity.h} file for AIX.\n \n With those bits out of the way, you have to actually write\n @file{bits/atomicity.h} itself.  This file should be wrapped in an\n@@ -444,16 +489,12 @@ easiest just to indicate how many bits are used in each of the data\n types and let the library do the rest.  For information about the\n macros to define, see the top of @file{include/bits/std_limits.h}.\n \n-If you need to define any macros, you can do so in\n-@file{os_defines.h}.  However, if all operating systems for your CPU\n-are likely to use the same values, you can provide a CPU-specific file\n-instead so that you do not have to provide the same definitions for\n-each operating system.  To take that approach, create a new file\n-called @file{limits.h} in your CPU configuration directory (e.g.,\n-@file{config/cpu/i386/bits}) and then modify @file{configure.target}\n-so that @code{LIMITSH} is set to the CPU directory (e.g.,\n-@file{config/cpu/i386}).  Note that @code{LIMITSH} should not include\n-the @samp{bits} part of the directory name.\n+If you need to define any macros, you can do so in @file{os_defines.h}.\n+However, if all operating systems for your CPU are likely to use the\n+same values, you can provide a CPU-specific file instead so that you\n+do not have to provide the same definitions for each operating system.\n+To take that approach, create a new file called @file{cpu_limits.h} in\n+your CPU configuration directory (@pxref{CPU}).\n \n @c ---------------------------------------------------------------------\n @c Libtool\n@@ -479,10 +520,10 @@ run as the library is loaded.  Often, that requires linking in special\n object files when the C++ library is built as a shared library, or\n taking other system-specific actions.\n \n-The libstdc++-v3 library is linked with the C version of libtool, even though it\n-is a C++ library.  Therefore, the C version of libtool needs to ensure\n-that the run-time library initializers are run.  The usual way to do\n-this is to build the library using @code{gcc -shared}.\n+The libstdc++-v3 library is linked with the C version of libtool, even\n+though it is a C++ library.  Therefore, the C version of libtool needs to\n+ensure that the run-time library initializers are run.  The usual way to\n+do this is to build the library using @code{gcc -shared}.\n \n If you need to change how the library is linked, look at\n @file{ltcf-c.sh} in the top-level directory.  Find the switch statement"}, {"sha": "7733010d63a9e25d9312adb1176bb144c8bb4604", "filename": "libstdc++-v3/testsuite/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c839a4e1f492396fca48e4c87fa22509e4fb420/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c839a4e1f492396fca48e4c87fa22509e4fb420/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.am?ref=2c839a4e1f492396fca48e4c87fa22509e4fb420", "patch": "@@ -33,6 +33,7 @@ RUNTEST = `if [ -f @glibcpp_srcdir@/../dejagnu/runtest ] ; then \\\n \t       echo @glibcpp_srcdir@/../dejagnu/runtest ; \\\n \t    else echo runtest; fi`\n \n+AM_RUNTESTFLAGS =\n RUNTESTFLAGS =\n \n CXX = @glibcpp_CXX@ @GLIBCPP_INCLUDES@"}, {"sha": "7706849c2882ba2ae6388aa990ac946a90a3a863", "filename": "libstdc++-v3/testsuite/Makefile.in", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c839a4e1f492396fca48e4c87fa22509e4fb420/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c839a4e1f492396fca48e4c87fa22509e4fb420/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in?ref=2c839a4e1f492396fca48e4c87fa22509e4fb420", "patch": "@@ -1,6 +1,6 @@\n-# Makefile.in generated automatically by automake 1.4-p5 from Makefile.am\n+# Makefile.in generated automatically by automake 1.4 from Makefile.am\n \n-# Copyright (C) 1994, 1995-8, 1999, 2001 Free Software Foundation, Inc.\n+# Copyright (C) 1994, 1995-8, 1999 Free Software Foundation, Inc.\n # This Makefile.in is free software; the Free Software Foundation\n # gives unlimited permission to copy and/or distribute it,\n # with or without modifications, as long as this notice is preserved.\n@@ -137,12 +137,17 @@ AUTOMAKE_OPTIONS = cygnus dejagnu\n \n DEJATOOL = libstdc++-v3\n \n-EXPECT = `if [ -f @glibcpp_builddir@/../../expect/expect ] ; then             echo @glibcpp_builddir@/../../expect/expect ;           else echo expect ; fi`\n+EXPECT = `if [ -f @glibcpp_builddir@/../../expect/expect ] ; then \\\n+            echo @glibcpp_builddir@/../../expect/expect ; \\\n+          else echo expect ; fi`\n \n \n-RUNTEST = `if [ -f @glibcpp_srcdir@/../dejagnu/runtest ] ; then \t       echo @glibcpp_srcdir@/../dejagnu/runtest ; \t    else echo runtest; fi`\n+RUNTEST = `if [ -f @glibcpp_srcdir@/../dejagnu/runtest ] ; then \\\n+\t       echo @glibcpp_srcdir@/../dejagnu/runtest ; \\\n+\t    else echo runtest; fi`\n \n \n+AM_RUNTESTFLAGS = \n RUNTESTFLAGS = \n \n CXX = @glibcpp_CXX@ @GLIBCPP_INCLUDES@\n@@ -174,7 +179,7 @@ DIST_COMMON =  README Makefile.am Makefile.in\n \n DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) $(TEXINFOS) $(EXTRA_DIST)\n \n-TAR = tar\n+TAR = gtar\n GZIP_ENV = --best\n SOURCES = $(libv3test_a_SOURCES)\n OBJECTS = $(libv3test_a_OBJECTS)"}]}