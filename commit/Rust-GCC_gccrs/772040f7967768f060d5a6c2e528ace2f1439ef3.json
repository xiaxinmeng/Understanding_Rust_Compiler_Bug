{"sha": "772040f7967768f060d5a6c2e528ace2f1439ef3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzcyMDQwZjc5Njc3NjhmMDYwZDVhNmMyZTUyOGFjZTJmMTQzOWVmMw==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.vnet.ibm.com", "date": "2016-03-01T09:19:14Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2016-03-01T09:19:14Z"}, "message": "gensupport: Fix define_subst operand renumbering.\n\nWhen processing substitutions the operands are renumbered.  To find a\nfree operand number the array used_operands_numbers is used.\nCurrently this array is used to assign new numbers before all the\nRTXes in the vector have been processed.  I did run into problems with\nthis for insns where a match_dup occurred in a later (use ...) operand\nreferring to an earlier operand (e.g. s390.md \"setmem_long\").\n\nThe patch splits the loop doing the processing into two in order to\nhave all the operand numbers collected already when assigning new\nnumbers.\n\ngcc/ChangeLog:\n\n2016-03-01  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n\n\t* gensupport.c (process_substs_on_one_elem): Split loop to\n\tcomplete mark_operands_used_in_match_dup on all expressions in the\n\tvector first.\n\t(adjust_operands_numbers): Inline into process_substs_on_one_elem\n\tand remove function.\n\nFrom-SVN: r233841", "tree": {"sha": "40fa4d5a3c60cf562ed26ab6cf2d20746bff3dbb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/40fa4d5a3c60cf562ed26ab6cf2d20746bff3dbb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/772040f7967768f060d5a6c2e528ace2f1439ef3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/772040f7967768f060d5a6c2e528ace2f1439ef3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/772040f7967768f060d5a6c2e528ace2f1439ef3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/772040f7967768f060d5a6c2e528ace2f1439ef3/comments", "author": null, "committer": null, "parents": [{"sha": "0f09ab882507915df439054da380d5d646181f7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f09ab882507915df439054da380d5d646181f7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f09ab882507915df439054da380d5d646181f7a"}], "stats": {"total": 53, "additions": 28, "deletions": 25}, "files": [{"sha": "b1bdd0dedc7da0edb4aec743fd585aa80ead4c76", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/772040f7967768f060d5a6c2e528ace2f1439ef3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/772040f7967768f060d5a6c2e528ace2f1439ef3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=772040f7967768f060d5a6c2e528ace2f1439ef3", "patch": "@@ -1,3 +1,11 @@\n+2016-03-01  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n+\n+\t* gensupport.c (process_substs_on_one_elem): Split loop to\n+\tcomplete mark_operands_used_in_match_dup on all expressions in the\n+\tvector first.\n+\t(adjust_operands_numbers): Inline into process_substs_on_one_elem\n+\tand remove function.\n+\n 2016-02-29  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR target/69706"}, {"sha": "de295795a9619dac93f5bcc8884accf5d6e012ab", "filename": "gcc/gensupport.c", "status": "modified", "additions": 20, "deletions": 25, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/772040f7967768f060d5a6c2e528ace2f1439ef3/gcc%2Fgensupport.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/772040f7967768f060d5a6c2e528ace2f1439ef3/gcc%2Fgensupport.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgensupport.c?ref=772040f7967768f060d5a6c2e528ace2f1439ef3", "patch": "@@ -126,7 +126,10 @@ static const char * duplicate_each_alternative (const char * str, int n_dup);\n \n typedef const char * (*constraints_handler_t) (const char *, int);\n static rtx alter_constraints (rtx, int, constraints_handler_t);\n-static rtx adjust_operands_numbers (rtx);\n+\n+static void mark_operands_used_in_match_dup (rtx);\n+static void renumerate_operands_in_pattern (rtx);\n+\n static rtx replace_duplicating_operands_in_pattern (rtx);\n \f\n /* Make a version of gen_rtx_CONST_INT so that GEN_INT can be used in\n@@ -1844,7 +1847,18 @@ process_substs_on_one_elem (struct queue_elem *elem,\n \t  subst_pattern = alter_constraints (subst_pattern, alternatives,\n \t\t\t\t\t     duplicate_each_alternative);\n \n-\t  subst_pattern = adjust_operands_numbers (subst_pattern);\n+\t  mark_operands_used_in_match_dup (subst_pattern);\n+\t  RTVEC_ELT (subst_pattern_vec, j) = subst_pattern;\n+\t}\n+\n+      for (j = 0; j < XVECLEN (subst_elem->data, 3); j++)\n+\t{\n+\t  subst_pattern = RTVEC_ELT (subst_pattern_vec, j);\n+\n+\t  /* The number of MATCH_OPERANDs in the output pattern might\n+\t     change.  This routine assigns new numbers to the\n+\t     MATCH_OPERAND expressions to avoid collisions.  */\n+\t  renumerate_operands_in_pattern (subst_pattern);\n \n \t  /* Substitute match_dup and match_op_dup in the new pattern and\n \t     duplicate constraints.  */\n@@ -1857,7 +1871,6 @@ process_substs_on_one_elem (struct queue_elem *elem,\n \t  if (GET_CODE (elem->data) == DEFINE_EXPAND)\n \t    remove_constraints (subst_pattern);\n \n-\t  RTVEC_ELT (subst_pattern_vec, j) = subst_pattern;\n \t}\n       XVEC (elem->data, 1) = subst_pattern_vec;\n \n@@ -1927,7 +1940,7 @@ mark_operands_from_match_dup (rtx pattern)\n     }\n }\n \n-/* This is a subroutine of adjust_operands_numbers.\n+/* This is a subroutine of process_substs_on_one_elem.\n    It goes through all expressions in PATTERN and when MATCH_DUP is\n    met, all MATCH_OPERANDs inside it is marked as occupied.  The\n    process of marking is done by routin mark_operands_from_match_dup.  */\n@@ -1973,10 +1986,9 @@ find_first_unused_number_of_operand ()\n   return MAX_OPERANDS;\n }\n \n-/* This is subroutine of adjust_operands_numbers.\n-   It visits all expressions in PATTERN and assigns not-occupied\n-   operand indexes to MATCH_OPERANDs and MATCH_OPERATORs of this\n-   PATTERN.  */\n+/* This is a subroutine of process_substs_on_one_elem.  It visits all\n+   expressions in PATTERN and assigns not-occupied operand indexes to\n+   MATCH_OPERANDs and MATCH_OPERATORs of this PATTERN.  */\n static void\n renumerate_operands_in_pattern (rtx pattern)\n {\n@@ -2011,23 +2023,6 @@ renumerate_operands_in_pattern (rtx pattern)\n     }\n }\n \n-/* If output pattern of define_subst contains MATCH_DUP, then this\n-   expression would be replaced with the pattern, matched with\n-   MATCH_OPERAND from input pattern.  This pattern could contain any\n-   number of MATCH_OPERANDs, MATCH_OPERATORs etc., so it's possible\n-   that a MATCH_OPERAND from output_pattern (if any) would have the\n-   same number, as MATCH_OPERAND from copied pattern.  To avoid such\n-   indexes overlapping, we assign new indexes to MATCH_OPERANDs,\n-   laying in the output pattern outside of MATCH_DUPs.  */\n-static rtx\n-adjust_operands_numbers (rtx pattern)\n-{\n-  mark_operands_used_in_match_dup (pattern);\n-\n-  renumerate_operands_in_pattern (pattern);\n-\n-  return pattern;\n-}\n \n /* Generate RTL expression\n    (match_dup OPNO)"}]}