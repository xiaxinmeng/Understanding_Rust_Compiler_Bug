{"sha": "763b865a17d32ff1d19720e333999de25132d3d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzYzYjg2NWExN2QzMmZmMWQxOTcyMGUzMzM5OTlkZTI1MTMyZDNkNA==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2021-01-19T15:36:55Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2021-01-19T17:25:42Z"}, "message": "aarch64: Remove testing of saturation cumulative QC bit\n\nSince we don't guarantee the ordering of the QC flag in FPSR in the\nsaturation intrinsics, we shouldn't be testing for it.\nI want to relax the flags for some of the builtins to enable more\noptimisation but that triggers the QC flag tests in\nadvsimd-intrinsics.exp.\nWe don't implement the saturation flag access intrinsics in aarch64\nanyway and we don't want to.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/aarch64/advsimd-intrinsics/arm-neon-ref.h\n\t(CHECK_CUMULATIVE_SAT): Delete.\n\t(CHECK_CUMULATIVE_SAT_NAMED): Likewise.  Deleted related\n\tvariables.\n\t* gcc.target/aarch64/advsimd-intrinsics/binary_sat_op.inc:\n\tRemove uses of the above.\n\t* gcc.target/aarch64/advsimd-intrinsics/unary_sat_op.inc:\n\tLikewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vqabs.c: Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vqadd.c: Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vqdmlXl.inc: Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vqdmlXl_lane.inc:\n\tLikewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vqdmlXl_n.inc: Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vqdmlal.c: Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vqdmlal_lane.c:\n\tLikewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vqdmlal_n.c: Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vqdmlsl.c: Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vqdmlsl_lane.c:\n\tLikewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vqdmlsl_n.c: Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vqdmulh.c: Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vqdmulh_lane.c:\n\tLikewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vqdmulh_n.c: Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vqdmull.c: Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vqdmull_lane.c:\n\tLikewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vqdmull_n.c: Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vqmovn.c: Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vqmovun.c: Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vqneg.c: Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vqrdmlXh.inc: Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vqrdmlXh_lane.inc:\n\tLikewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vqrdmlah.c: Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vqrdmlah_lane.c:\n\tLikewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vqrdmlsh.c: Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vqrdmlsh_lane.c:\n\tLikewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vqrdmulh.c: Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vqrdmulh_lane.c:\n\tLikewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vqrdmulh_n.c: Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vqrshl.c: Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vqrshrn_n.c: Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vqrshrun_n.c: Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vqshl.c: Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vqshl_n.c: Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vqshlu_n.c: Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vqshrn_n.c: Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vqshrun_n.c: Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vqsub.c: Likewise.", "tree": {"sha": "bd87505e1687b9d8bfcf8892f1c65d9bfc33911b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd87505e1687b9d8bfcf8892f1c65d9bfc33911b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/763b865a17d32ff1d19720e333999de25132d3d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/763b865a17d32ff1d19720e333999de25132d3d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/763b865a17d32ff1d19720e333999de25132d3d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/763b865a17d32ff1d19720e333999de25132d3d4/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8227106f5668c8fb1f0c5d2026e44cc0b84ee991", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8227106f5668c8fb1f0c5d2026e44cc0b84ee991", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8227106f5668c8fb1f0c5d2026e44cc0b84ee991"}], "stats": {"total": 2539, "additions": 753, "deletions": 1786}, "files": [{"sha": "6f4d62bde84417fbdf199a757f4b52ab34d961ae", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/arm-neon-ref.h", "status": "modified", "additions": 0, "deletions": 67, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/763b865a17d32ff1d19720e333999de25132d3d4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Farm-neon-ref.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/763b865a17d32ff1d19720e333999de25132d3d4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Farm-neon-ref.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Farm-neon-ref.h?ref=763b865a17d32ff1d19720e333999de25132d3d4", "patch": "@@ -356,73 +356,6 @@ static volatile int __read_neon_cumulative_sat (void) {\n   }\n #endif\n \n-/* Declare expected cumulative saturation results, one for each\n-   size. They are defined and initialized in relevant test files.  */\n-extern int VECT_VAR(expected_cumulative_sat, int, 8, 8);\n-extern int VECT_VAR(expected_cumulative_sat, int, 16, 4);\n-extern int VECT_VAR(expected_cumulative_sat, int, 32, 2);\n-extern int VECT_VAR(expected_cumulative_sat, int, 64, 1);\n-extern int VECT_VAR(expected_cumulative_sat, uint, 8, 8);\n-extern int VECT_VAR(expected_cumulative_sat, uint, 16, 4);\n-extern int VECT_VAR(expected_cumulative_sat, uint, 32, 2);\n-extern int VECT_VAR(expected_cumulative_sat, uint, 64, 1);\n-extern int VECT_VAR(expected_cumulative_sat, int, 8, 16);\n-extern int VECT_VAR(expected_cumulative_sat, int, 16, 8);\n-extern int VECT_VAR(expected_cumulative_sat, int, 32, 4);\n-extern int VECT_VAR(expected_cumulative_sat, int, 64, 2);\n-extern int VECT_VAR(expected_cumulative_sat, uint, 8, 16);\n-extern int VECT_VAR(expected_cumulative_sat, uint, 16, 8);\n-extern int VECT_VAR(expected_cumulative_sat, uint, 32, 4);\n-extern int VECT_VAR(expected_cumulative_sat, uint, 64, 2);\n-\n-/* Check cumulative saturation flag vs expected value.  */\n-#define CHECK_CUMULATIVE_SAT(MSG,T,W,N,EXPECTED,COMMENT)\t\t\\\n-  {\t\t\t\t\t\t\t\t\t\\\n-    if (Neon_Cumulative_Sat !=\t\t\t\t\t\t\\\n-\tVECT_VAR(EXPECTED, T, W, N)) {\t\t\t\t\t\\\n-      fprintf(stderr,\t\t\t\t\t\t\t\\\n-\t      \"ERROR in %s (%s line %d in cumulative_sat '%s') at type %s: \" \\\n-\t      \"got %d expected %d%s\\n\",\t\t\t\t\t\\\n-\t      MSG, __FILE__, __LINE__,\t\t\t\t\t\\\n-\t      STR(EXPECTED),\t\t\t\t\t\t\\\n-\t      STR(VECT_NAME(T, W, N)),\t\t\t\t\t\\\n-\t      Neon_Cumulative_Sat,\t\t\t\t\t\\\n-\t      VECT_VAR(EXPECTED, T, W, N),\t\t\t\t\\\n-\t      strlen(COMMENT) > 0 ? \" \" COMMENT : \"\");\t\t\t\\\n-      abort();\t\t\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-    fprintf(stderr, \"CHECKED CUMULATIVE SAT %s %s\\n\",\t\t\t\\\n-\t    STR(VECT_TYPE(T, W, N)), MSG);\t\t\t\t\\\n-  }\n-\n-#define CHECK_CUMULATIVE_SAT_NAMED(test_name,EXPECTED,comment)\t\t\\\n-  {\t\t\t\t\t\t\t\t\t\\\n-    CHECK_CUMULATIVE_SAT(test_name, int, 8, 8, PRIx8, EXPECTED, comment); \\\n-    CHECK_CUMULATIVE_SAT(test_name, int, 16, 4, PRIx16, EXPECTED, comment); \\\n-    CHECK_CUMULATIVE_SAT(test_name, int, 32, 2, PRIx32, EXPECTED, comment); \\\n-    CHECK_CUMULATIVE_SAT(test_name, int, 64, 1, PRIx64, EXPECTED, comment); \\\n-    CHECK_CUMULATIVE_SAT(test_name, uint, 8, 8, PRIx8, EXPECTED, comment); \\\n-    CHECK_CUMULATIVE_SAT(test_name, uint, 16, 4, PRIx16, EXPECTED, comment); \\\n-    CHECK_CUMULATIVE_SAT(test_name, uint, 32, 2, PRIx32, EXPECTED, comment); \\\n-    CHECK_CUMULATIVE_SAT(test_name, uint, 64, 1, PRIx64, EXPECTED, comment); \\\n-    CHECK_CUMULATIVE_SAT(test_name, poly, 8, 8, PRIx8, EXPECTED, comment); \\\n-    CHECK_CUMULATIVE_SAT(test_name, poly, 16, 4, PRIx16, EXPECTED, comment); \\\n-    CHECK_CUMULATIVE_SAT_FP(test_name, float, 32, 2, PRIx32, EXPECTED, comment); \\\n-\t\t\t\t\t\t\t\t\t\\\n-    CHECK_CUMULATIVE_SAT(test_name, int, 8, 16, PRIx8, EXPECTED, comment); \\\n-    CHECK_CUMULATIVE_SAT(test_name, int, 16, 8, PRIx16, EXPECTED, comment); \\\n-    CHECK_CUMULATIVE_SAT(test_name, int, 32, 4, PRIx32, EXPECTED, comment); \\\n-    CHECK_CUMULATIVE_SAT(test_name, int, 64, 2, PRIx64, EXPECTED, comment); \\\n-    CHECK_CUMULATIVE_SAT(test_name, uint, 8, 16, PRIx8, EXPECTED, comment); \\\n-    CHECK_CUMULATIVE_SAT(test_name, uint, 16, 8, PRIx16, EXPECTED, comment); \\\n-    CHECK_CUMULATIVE_SAT(test_name, uint, 32, 4, PRIx32, EXPECTED, comment); \\\n-    CHECK_CUMULATIVE_SAT(test_name, uint, 64, 2, PRIx64, EXPECTED, comment); \\\n-    CHECK_CUMULATIVE_SAT(test_name, poly, 8, 16, PRIx8, EXPECTED, comment); \\\n-    CHECK_CUMULATIVE_SAT(test_name, poly, 16, 8, PRIx16, EXPECTED, comment); \\\n-    CHECK_CUMULATIVE_SAT_FP(test_name, float, 32, 4, PRIx32, EXPECTED, comment); \\\n-  }\t\t\t\t\t\t\t\t\t\\\n-\n-\n /* Clean output buffers before execution.  */\n static void clean_results (void)\n {"}, {"sha": "58bd9df08d88fa3f820c8644008de6c86969a8a8", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/binary_sat_op.inc", "status": "modified", "additions": 21, "deletions": 22, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/763b865a17d32ff1d19720e333999de25132d3d4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fbinary_sat_op.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/763b865a17d32ff1d19720e333999de25132d3d4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fbinary_sat_op.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fbinary_sat_op.inc?ref=763b865a17d32ff1d19720e333999de25132d3d4", "patch": "@@ -17,17 +17,16 @@ void FNNAME (INSN_NAME) (void)\n {\n   /* vector_res = OP(vector1,vector2), then store the result.  */\n \n-#define TEST_BINARY_SAT_OP1(INSN, Q, T1, T2, W, N, EXPECTED_CUMULATIVE_SAT, CMT) \\\n+#define TEST_BINARY_SAT_OP1(INSN, Q, T1, T2, W, N, CMT) \\\n   Set_Neon_Cumulative_Sat(0, VECT_VAR(vector_res, T1, W, N));\t\t\\\n   VECT_VAR(vector_res, T1, W, N) =\t\t\t\t\t\\\n     INSN##Q##_##T2##W(VECT_VAR(vector1, T1, W, N),\t\t\t\\\n \t\t      VECT_VAR(vector2, T1, W, N));\t\t\t\\\n     vst1##Q##_##T2##W(VECT_VAR(result, T1, W, N),\t\t\t\\\n-\t\t      VECT_VAR(vector_res, T1, W, N));\t\t\t\\\n-      CHECK_CUMULATIVE_SAT(TEST_MSG, T1, W, N, EXPECTED_CUMULATIVE_SAT, CMT)\n+\t\t      VECT_VAR(vector_res, T1, W, N))\n \n-#define TEST_BINARY_SAT_OP(INSN, Q, T1, T2, W, N, EXPECTED_CUMULATIVE_SAT, CMT) \\\n-  TEST_BINARY_SAT_OP1(INSN, Q, T1, T2, W, N, EXPECTED_CUMULATIVE_SAT, CMT)\n+#define TEST_BINARY_SAT_OP(INSN, Q, T1, T2, W, N, CMT) \\\n+  TEST_BINARY_SAT_OP1(INSN, Q, T1, T2, W, N, CMT)\n \n   DECL_VARIABLE_ALL_VARIANTS(vector1);\n   DECL_VARIABLE_ALL_VARIANTS(vector2);\n@@ -58,23 +57,23 @@ void FNNAME (INSN_NAME) (void)\n   VDUP(vector2, q, uint, u, 64, 2, 0x88);\n \n   /* Apply a saturating binary operator named INSN_NAME.  */\n-  TEST_BINARY_SAT_OP(INSN_NAME, , int, s, 8, 8, expected_cumulative_sat, \"\");\n-  TEST_BINARY_SAT_OP(INSN_NAME, , int, s, 16, 4, expected_cumulative_sat, \"\");\n-  TEST_BINARY_SAT_OP(INSN_NAME, , int, s, 32, 2, expected_cumulative_sat, \"\");\n-  TEST_BINARY_SAT_OP(INSN_NAME, , int, s, 64, 1, expected_cumulative_sat, \"\");\n-  TEST_BINARY_SAT_OP(INSN_NAME, , uint, u, 8, 8, expected_cumulative_sat, \"\");\n-  TEST_BINARY_SAT_OP(INSN_NAME, , uint, u, 16, 4, expected_cumulative_sat, \"\");\n-  TEST_BINARY_SAT_OP(INSN_NAME, , uint, u, 32, 2, expected_cumulative_sat, \"\");\n-  TEST_BINARY_SAT_OP(INSN_NAME, , uint, u, 64, 1, expected_cumulative_sat, \"\");\n-\n-  TEST_BINARY_SAT_OP(INSN_NAME, q, int, s, 8, 16, expected_cumulative_sat, \"\");\n-  TEST_BINARY_SAT_OP(INSN_NAME, q, int, s, 16, 8, expected_cumulative_sat, \"\");\n-  TEST_BINARY_SAT_OP(INSN_NAME, q, int, s, 32, 4, expected_cumulative_sat, \"\");\n-  TEST_BINARY_SAT_OP(INSN_NAME, q, int, s, 64, 2, expected_cumulative_sat, \"\");\n-  TEST_BINARY_SAT_OP(INSN_NAME, q, uint, u, 8, 16, expected_cumulative_sat, \"\");\n-  TEST_BINARY_SAT_OP(INSN_NAME, q, uint, u, 16, 8, expected_cumulative_sat, \"\");\n-  TEST_BINARY_SAT_OP(INSN_NAME, q, uint, u, 32, 4, expected_cumulative_sat, \"\");\n-  TEST_BINARY_SAT_OP(INSN_NAME, q, uint, u, 64, 2, expected_cumulative_sat, \"\");\n+  TEST_BINARY_SAT_OP(INSN_NAME, , int, s, 8, 8, \"\");\n+  TEST_BINARY_SAT_OP(INSN_NAME, , int, s, 16, 4, \"\");\n+  TEST_BINARY_SAT_OP(INSN_NAME, , int, s, 32, 2, \"\");\n+  TEST_BINARY_SAT_OP(INSN_NAME, , int, s, 64, 1, \"\");\n+  TEST_BINARY_SAT_OP(INSN_NAME, , uint, u, 8, 8, \"\");\n+  TEST_BINARY_SAT_OP(INSN_NAME, , uint, u, 16, 4, \"\");\n+  TEST_BINARY_SAT_OP(INSN_NAME, , uint, u, 32, 2, \"\");\n+  TEST_BINARY_SAT_OP(INSN_NAME, , uint, u, 64, 1, \"\");\n+\n+  TEST_BINARY_SAT_OP(INSN_NAME, q, int, s, 8, 16, \"\");\n+  TEST_BINARY_SAT_OP(INSN_NAME, q, int, s, 16, 8, \"\");\n+  TEST_BINARY_SAT_OP(INSN_NAME, q, int, s, 32, 4, \"\");\n+  TEST_BINARY_SAT_OP(INSN_NAME, q, int, s, 64, 2, \"\");\n+  TEST_BINARY_SAT_OP(INSN_NAME, q, uint, u, 8, 16, \"\");\n+  TEST_BINARY_SAT_OP(INSN_NAME, q, uint, u, 16, 8, \"\");\n+  TEST_BINARY_SAT_OP(INSN_NAME, q, uint, u, 32, 4, \"\");\n+  TEST_BINARY_SAT_OP(INSN_NAME, q, uint, u, 64, 2, \"\");\n \n   CHECK(TEST_MSG, int, 8, 8, PRIx8, expected, \"\");\n   CHECK(TEST_MSG, int, 16, 4, PRIx16, expected, \"\");"}, {"sha": "e9f6809deb768d4753fcb936008430bc137e33d6", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/unary_sat_op.inc", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/763b865a17d32ff1d19720e333999de25132d3d4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Funary_sat_op.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/763b865a17d32ff1d19720e333999de25132d3d4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Funary_sat_op.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Funary_sat_op.inc?ref=763b865a17d32ff1d19720e333999de25132d3d4", "patch": "@@ -16,16 +16,15 @@\n void FNNAME (INSN_NAME) (void)\n {\n   /* y=OP(x), then store the result.  */\n-#define TEST_UNARY_SAT_OP1(INSN, Q, T1, T2, W, N, EXPECTED_CUMULATIVE_SAT, CMT) \\\n+#define TEST_UNARY_SAT_OP1(INSN, Q, T1, T2, W, N, CMT) \\\n   Set_Neon_Cumulative_Sat(0, VECT_VAR(vector_res, T1, W, N));\t\t\\\n   VECT_VAR(vector_res, T1, W, N) =\t\t\t\t\t\\\n     INSN##Q##_##T2##W(VECT_VAR(vector, T1, W, N));\t\t\t\\\n     vst1##Q##_##T2##W(VECT_VAR(result, T1, W, N),\t\t\t\\\n-\t\t      VECT_VAR(vector_res, T1, W, N));\t\t\t\\\n-      CHECK_CUMULATIVE_SAT(TEST_MSG, T1, W, N, EXPECTED_CUMULATIVE_SAT, CMT)\n+\t\t      VECT_VAR(vector_res, T1, W, N))\n \n-#define TEST_UNARY_SAT_OP(INSN, Q, T1, T2, W, N, EXPECTED_CUMULATIVE_SAT, CMT) \\\n-  TEST_UNARY_SAT_OP1(INSN, Q, T1, T2, W, N, EXPECTED_CUMULATIVE_SAT, CMT)\n+#define TEST_UNARY_SAT_OP(INSN, Q, T1, T2, W, N, CMT) \\\n+  TEST_UNARY_SAT_OP1(INSN, Q, T1, T2, W, N, CMT)\n \n   /* No need for 64 bits variants.  */\n   DECL_VARIABLE(vector, int, 8, 8);\n@@ -53,12 +52,12 @@ void FNNAME (INSN_NAME) (void)\n   VLOAD(vector, buffer, q, int, s, 32, 4);\n \n   /* Apply a saturating unary operator named INSN_NAME.  */\n-  TEST_UNARY_SAT_OP(INSN_NAME, , int, s, 8, 8, expected_cumulative_sat, \"\");\n-  TEST_UNARY_SAT_OP(INSN_NAME, , int, s, 16, 4, expected_cumulative_sat, \"\");\n-  TEST_UNARY_SAT_OP(INSN_NAME, , int, s, 32, 2, expected_cumulative_sat, \"\");\n-  TEST_UNARY_SAT_OP(INSN_NAME, q, int, s, 8, 16, expected_cumulative_sat, \"\");\n-  TEST_UNARY_SAT_OP(INSN_NAME, q, int, s, 16, 8, expected_cumulative_sat, \"\");\n-  TEST_UNARY_SAT_OP(INSN_NAME, q, int, s, 32, 4, expected_cumulative_sat, \"\");\n+  TEST_UNARY_SAT_OP(INSN_NAME, , int, s, 8, 8, \"\");\n+  TEST_UNARY_SAT_OP(INSN_NAME, , int, s, 16, 4, \"\");\n+  TEST_UNARY_SAT_OP(INSN_NAME, , int, s, 32, 2, \"\");\n+  TEST_UNARY_SAT_OP(INSN_NAME, q, int, s, 8, 16, \"\");\n+  TEST_UNARY_SAT_OP(INSN_NAME, q, int, s, 16, 8, \"\");\n+  TEST_UNARY_SAT_OP(INSN_NAME, q, int, s, 32, 4, \"\");\n \n   CHECK(TEST_MSG, int, 8, 8, PRIx8, expected, \"\");\n   CHECK(TEST_MSG, int, 16, 4, PRIx16, expected, \"\");"}, {"sha": "5b86cf17b2753ffac5eb0eed0a5a7adf1fa3d125", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vqabs.c", "status": "modified", "additions": 6, "deletions": 23, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/763b865a17d32ff1d19720e333999de25132d3d4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/763b865a17d32ff1d19720e333999de25132d3d4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqabs.c?ref=763b865a17d32ff1d19720e333999de25132d3d4", "patch": "@@ -19,14 +19,6 @@ VECT_VAR_DECL(expected,int,16,8) [] = { 0x10, 0xf, 0xe, 0xd,\n \t\t\t\t\t0xc, 0xb, 0xa, 0x9 };\n VECT_VAR_DECL(expected,int,32,4) [] = { 0x10, 0xf, 0xe, 0xd };\n \n-/* Expected values of cumulative_saturation flag.  */\n-int VECT_VAR(expected_cumulative_sat,int,8,8) = 0;\n-int VECT_VAR(expected_cumulative_sat,int,16,4) = 0;\n-int VECT_VAR(expected_cumulative_sat,int,32,2) = 0;\n-int VECT_VAR(expected_cumulative_sat,int,8,16) = 0;\n-int VECT_VAR(expected_cumulative_sat,int,16,8) = 0;\n-int VECT_VAR(expected_cumulative_sat,int,32,4) = 0;\n-\n /* Expected results when input is the min negative value of the type.  */\n VECT_VAR_DECL(expected_min_neg,int,8,8) [] = { 0x7f, 0x7f, 0x7f, 0x7f,\n \t\t\t\t\t       0x7f, 0x7f, 0x7f, 0x7f };\n@@ -44,15 +36,6 @@ VECT_VAR_DECL(expected_min_neg,int,16,8) [] = { 0x7fff, 0x7fff,\n VECT_VAR_DECL(expected_min_neg,int,32,4) [] = { 0x7fffffff, 0x7fffffff,\n \t\t\t\t\t\t0x7fffffff, 0x7fffffff };\n \n-/* Expected values of cumulative_saturation flag when input is the min\n-   negative value of the type.  */\n-int VECT_VAR(expected_cumulative_sat_min_neg,int,8,8) = 1;\n-int VECT_VAR(expected_cumulative_sat_min_neg,int,16,4) = 1;\n-int VECT_VAR(expected_cumulative_sat_min_neg,int,32,2) = 1;\n-int VECT_VAR(expected_cumulative_sat_min_neg,int,8,16) = 1;\n-int VECT_VAR(expected_cumulative_sat_min_neg,int,16,8) = 1;\n-int VECT_VAR(expected_cumulative_sat_min_neg,int,32,4) = 1;\n-\n void vqabs_extra()\n {\n   /* No need for 64 bits variants.  */\n@@ -82,12 +65,12 @@ void vqabs_extra()\n   VDUP(vector, q, int, s, 32, 4, 0x80000000);\n \n #define MSG \"min negative input\"\n-  TEST_UNARY_SAT_OP(INSN_NAME, , int, s, 8, 8, expected_cumulative_sat_min_neg, MSG);\n-  TEST_UNARY_SAT_OP(INSN_NAME, , int, s, 16, 4, expected_cumulative_sat_min_neg, MSG);\n-  TEST_UNARY_SAT_OP(INSN_NAME, , int, s, 32, 2, expected_cumulative_sat_min_neg, MSG);\n-  TEST_UNARY_SAT_OP(INSN_NAME, q, int, s, 8, 16, expected_cumulative_sat_min_neg, MSG);\n-  TEST_UNARY_SAT_OP(INSN_NAME, q, int, s, 16, 8, expected_cumulative_sat_min_neg, MSG);\n-  TEST_UNARY_SAT_OP(INSN_NAME, q, int, s, 32, 4, expected_cumulative_sat_min_neg, MSG);\n+  TEST_UNARY_SAT_OP(INSN_NAME, , int, s, 8, 8, MSG);\n+  TEST_UNARY_SAT_OP(INSN_NAME, , int, s, 16, 4, MSG);\n+  TEST_UNARY_SAT_OP(INSN_NAME, , int, s, 32, 2, MSG);\n+  TEST_UNARY_SAT_OP(INSN_NAME, q, int, s, 8, 16, MSG);\n+  TEST_UNARY_SAT_OP(INSN_NAME, q, int, s, 16, 8, MSG);\n+  TEST_UNARY_SAT_OP(INSN_NAME, q, int, s, 32, 4, MSG);\n \n   CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_min_neg, MSG);\n   CHECK(TEST_MSG, int, 16, 4, PRIx16, expected_min_neg, MSG);"}, {"sha": "31f98d66ed5d0e4395f0e2381ce4e37d0d00e59f", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vqadd.c", "status": "modified", "additions": 24, "deletions": 67, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/763b865a17d32ff1d19720e333999de25132d3d4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqadd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/763b865a17d32ff1d19720e333999de25132d3d4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqadd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqadd.c?ref=763b865a17d32ff1d19720e333999de25132d3d4", "patch": "@@ -11,23 +11,6 @@ void vqadd_extras(void);\n \n #include \"binary_sat_op.inc\"\n \n-/* Expected values of cumulative_saturation flag.  */\n-int VECT_VAR(expected_cumulative_sat,int,8,8) = 0;\n-int VECT_VAR(expected_cumulative_sat,int,16,4) = 0;\n-int VECT_VAR(expected_cumulative_sat,int,32,2) = 0;\n-int VECT_VAR(expected_cumulative_sat,int,64,1) = 0;\n-int VECT_VAR(expected_cumulative_sat,uint,8,8) = 1;\n-int VECT_VAR(expected_cumulative_sat,uint,16,4) = 1;\n-int VECT_VAR(expected_cumulative_sat,uint,32,2) = 1;\n-int VECT_VAR(expected_cumulative_sat,uint,64,1) = 1;\n-int VECT_VAR(expected_cumulative_sat,int,8,16) = 0;\n-int VECT_VAR(expected_cumulative_sat,int,16,8) = 0;\n-int VECT_VAR(expected_cumulative_sat,int,32,4) = 0;\n-int VECT_VAR(expected_cumulative_sat,int,64,2) = 0;\n-int VECT_VAR(expected_cumulative_sat,uint,8,16) = 1;\n-int VECT_VAR(expected_cumulative_sat,uint,16,8) = 1;\n-int VECT_VAR(expected_cumulative_sat,uint,32,4) = 1;\n-int VECT_VAR(expected_cumulative_sat,uint,64,2) = 1;\n /* Expected results.  */\n VECT_VAR_DECL(expected,int,8,8) [] = { 0x1, 0x2, 0x3, 0x4,\n \t\t\t\t       0x5, 0x6, 0x7, 0x8 };\n@@ -60,10 +43,6 @@ VECT_VAR_DECL(expected,uint,64,2) [] = { 0xffffffffffffffff,\n \n \n /* 64-bits types, with 0 as second input.  */\n-int VECT_VAR(expected_cumulative_sat_64,int,64,1) = 0;\n-int VECT_VAR(expected_cumulative_sat_64,uint,64,1) = 0;\n-int VECT_VAR(expected_cumulative_sat_64,int,64,2) = 0;\n-int VECT_VAR(expected_cumulative_sat_64,uint,64,2) = 0;\n VECT_VAR_DECL(expected_64,int,64,1) [] = { 0xfffffffffffffff0 };\n VECT_VAR_DECL(expected_64,uint,64,1) [] = { 0xfffffffffffffff0 };\n VECT_VAR_DECL(expected_64,int,64,2) [] = { 0xfffffffffffffff0,\n@@ -72,35 +51,20 @@ VECT_VAR_DECL(expected_64,uint,64,2) [] = { 0xfffffffffffffff0,\n \t\t\t\t\t    0xfffffffffffffff1 };\n \n /* 64-bits types, some cases causing cumulative saturation.  */\n-int VECT_VAR(expected_cumulative_sat_64_2,int,64,1) = 0;\n-int VECT_VAR(expected_cumulative_sat_64_2,uint,64,1) = 1;\n-int VECT_VAR(expected_cumulative_sat_64_2,int,64,2) = 0;\n-int VECT_VAR(expected_cumulative_sat_64_2,uint,64,2) = 1;\n VECT_VAR_DECL(expected_64_2,int,64,1) [] = { 0x34 };\n VECT_VAR_DECL(expected_64_2,uint,64,1) [] = { 0xffffffffffffffff };\n VECT_VAR_DECL(expected_64_2,int,64,2) [] = { 0x34, 0x35 };\n VECT_VAR_DECL(expected_64_2,uint,64,2) [] = { 0xffffffffffffffff,\n \t\t\t\t\t      0xffffffffffffffff };\n \n /* 64-bits types, all causing cumulative saturation.  */\n-int VECT_VAR(expected_cumulative_sat_64_3,int,64,1) = 1;\n-int VECT_VAR(expected_cumulative_sat_64_3,uint,64,1) = 1;\n-int VECT_VAR(expected_cumulative_sat_64_3,int,64,2) = 1;\n-int VECT_VAR(expected_cumulative_sat_64_3,uint,64,2) = 1;\n VECT_VAR_DECL(expected_64_3,int,64,1) [] = { 0x8000000000000000 };\n VECT_VAR_DECL(expected_64_3,uint,64,1) [] = { 0xffffffffffffffff };\n VECT_VAR_DECL(expected_64_3,int,64,2) [] = { 0x7fffffffffffffff,\n \t\t\t\t\t     0x7fffffffffffffff };\n VECT_VAR_DECL(expected_64_3,uint,64,2) [] = { 0xffffffffffffffff,\n \t\t\t\t\t      0xffffffffffffffff };\n \n-/* smaller types, corner cases causing cumulative saturation. (1)  */\n-int VECT_VAR(expected_csat_lt_64_1,int,8,8) = 1;\n-int VECT_VAR(expected_csat_lt_64_1,int,16,4) = 1;\n-int VECT_VAR(expected_csat_lt_64_1,int,32,2) = 1;\n-int VECT_VAR(expected_csat_lt_64_1,int,8,16) = 1;\n-int VECT_VAR(expected_csat_lt_64_1,int,16,8) = 1;\n-int VECT_VAR(expected_csat_lt_64_1,int,32,4) = 1;\n VECT_VAR_DECL(expected_lt_64_1,int,8,8) [] = { 0x80, 0x80, 0x80, 0x80,\n \t\t\t\t\t       0x80, 0x80, 0x80, 0x80 };\n VECT_VAR_DECL(expected_lt_64_1,int,16,4) [] = { 0x8000, 0x8000,\n@@ -117,13 +81,6 @@ VECT_VAR_DECL(expected_lt_64_1,int,16,8) [] = { 0x8000, 0x8000,\n VECT_VAR_DECL(expected_lt_64_1,int,32,4) [] = { 0x80000000, 0x80000000,\n \t\t\t\t\t\t0x80000000, 0x80000000 };\n \n-/* smaller types, corner cases causing cumulative saturation. (2)  */\n-int VECT_VAR(expected_csat_lt_64_2,uint,8,8) = 1;\n-int VECT_VAR(expected_csat_lt_64_2,uint,16,4) = 1;\n-int VECT_VAR(expected_csat_lt_64_2,uint,32,2) = 1;\n-int VECT_VAR(expected_csat_lt_64_2,uint,8,16) = 1;\n-int VECT_VAR(expected_csat_lt_64_2,uint,16,8) = 1;\n-int VECT_VAR(expected_csat_lt_64_2,uint,32,4) = 1;\n VECT_VAR_DECL(expected_lt_64_2,uint,8,8) [] = { 0xff, 0xff, 0xff, 0xff,\n \t\t\t\t\t\t0xff, 0xff, 0xff, 0xff };\n VECT_VAR_DECL(expected_lt_64_2,uint,16,4) [] = { 0xffff, 0xffff,\n@@ -157,10 +114,10 @@ void vqadd_extras(void)\n   VDUP(vector2, q, uint, u, 64, 2, 0);\n \n #define MSG \"64 bits saturation adding zero\"\n-  TEST_BINARY_SAT_OP(INSN_NAME, , int, s, 64, 1, expected_cumulative_sat_64, MSG);\n-  TEST_BINARY_SAT_OP(INSN_NAME, , uint, u, 64, 1, expected_cumulative_sat_64, MSG);\n-  TEST_BINARY_SAT_OP(INSN_NAME, q, int, s, 64, 2, expected_cumulative_sat_64, MSG);\n-  TEST_BINARY_SAT_OP(INSN_NAME, q, uint, u, 64, 2, expected_cumulative_sat_64, MSG);\n+  TEST_BINARY_SAT_OP(INSN_NAME, , int, s, 64, 1, MSG);\n+  TEST_BINARY_SAT_OP(INSN_NAME, , uint, u, 64, 1,MSG);\n+  TEST_BINARY_SAT_OP(INSN_NAME, q, int, s, 64, 2, MSG);\n+  TEST_BINARY_SAT_OP(INSN_NAME, q, uint, u, 64, 2, MSG);\n \n   CHECK(TEST_MSG, int, 64, 1, PRIx64, expected_64, MSG);\n   CHECK(TEST_MSG, uint, 64, 1, PRIx64, expected_64, MSG);\n@@ -176,10 +133,10 @@ void vqadd_extras(void)\n \n #undef MSG\n #define MSG \"64 bits saturation cumulative_sat (2)\"\n-  TEST_BINARY_SAT_OP(INSN_NAME, , int, s, 64, 1, expected_cumulative_sat_64_2, MSG);\n-  TEST_BINARY_SAT_OP(INSN_NAME, , uint, u, 64, 1, expected_cumulative_sat_64_2, MSG);\n-  TEST_BINARY_SAT_OP(INSN_NAME, q, int, s, 64, 2, expected_cumulative_sat_64_2, MSG);\n-  TEST_BINARY_SAT_OP(INSN_NAME, q, uint, u, 64, 2, expected_cumulative_sat_64_2, MSG);\n+  TEST_BINARY_SAT_OP(INSN_NAME, , int, s, 64, 1, MSG);\n+  TEST_BINARY_SAT_OP(INSN_NAME, , uint, u, 64, 1, MSG);\n+  TEST_BINARY_SAT_OP(INSN_NAME, q, int, s, 64, 2, MSG);\n+  TEST_BINARY_SAT_OP(INSN_NAME, q, uint, u, 64, 2, MSG);\n \n   CHECK(TEST_MSG, int, 64, 1, PRIx64, expected_64_2, MSG);\n   CHECK(TEST_MSG, uint, 64, 1, PRIx64, expected_64_2, MSG);\n@@ -198,10 +155,10 @@ void vqadd_extras(void)\n \n #undef MSG\n #define MSG \"64 bits saturation cumulative_sat (3)\"\n-  TEST_BINARY_SAT_OP(INSN_NAME, , int, s, 64, 1, expected_cumulative_sat_64_3, MSG);\n-  TEST_BINARY_SAT_OP(INSN_NAME, , uint, u, 64, 1, expected_cumulative_sat_64_3, MSG);\n-  TEST_BINARY_SAT_OP(INSN_NAME, q, int, s, 64, 2, expected_cumulative_sat_64_3, MSG);\n-  TEST_BINARY_SAT_OP(INSN_NAME, q, uint, u, 64, 2, expected_cumulative_sat_64_3, MSG);\n+  TEST_BINARY_SAT_OP(INSN_NAME, , int, s, 64, 1, MSG);\n+  TEST_BINARY_SAT_OP(INSN_NAME, , uint, u, 64, 1, MSG);\n+  TEST_BINARY_SAT_OP(INSN_NAME, q, int, s, 64, 2, MSG);\n+  TEST_BINARY_SAT_OP(INSN_NAME, q, uint, u, 64, 2, MSG);\n \n   CHECK(TEST_MSG, int, 64, 1, PRIx64, expected_64_3, MSG);\n   CHECK(TEST_MSG, uint, 64, 1, PRIx64, expected_64_3, MSG);\n@@ -219,12 +176,12 @@ void vqadd_extras(void)\n \n #undef MSG\n #define MSG \"less than 64 bits saturation cumulative_sat (1)\"\n-  TEST_BINARY_SAT_OP(INSN_NAME, , int, s, 8, 8, expected_csat_lt_64_1, MSG);\n-  TEST_BINARY_SAT_OP(INSN_NAME, , int, s, 16, 4, expected_csat_lt_64_1, MSG);\n-  TEST_BINARY_SAT_OP(INSN_NAME, , int, s, 32, 2, expected_csat_lt_64_1, MSG);\n-  TEST_BINARY_SAT_OP(INSN_NAME, q, int, s, 8, 16, expected_csat_lt_64_1, MSG);\n-  TEST_BINARY_SAT_OP(INSN_NAME, q, int, s, 16, 8, expected_csat_lt_64_1, MSG);\n-  TEST_BINARY_SAT_OP(INSN_NAME, q, int, s, 32, 4, expected_csat_lt_64_1, MSG);\n+  TEST_BINARY_SAT_OP(INSN_NAME, , int, s, 8, 8, MSG);\n+  TEST_BINARY_SAT_OP(INSN_NAME, , int, s, 16, 4, MSG);\n+  TEST_BINARY_SAT_OP(INSN_NAME, , int, s, 32, 2, MSG);\n+  TEST_BINARY_SAT_OP(INSN_NAME, q, int, s, 8, 16, MSG);\n+  TEST_BINARY_SAT_OP(INSN_NAME, q, int, s, 16, 8, MSG);\n+  TEST_BINARY_SAT_OP(INSN_NAME, q, int, s, 32, 4, MSG);\n \n   CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_lt_64_1, MSG);\n   CHECK(TEST_MSG, int, 16, 4, PRIx16, expected_lt_64_1, MSG);\n@@ -250,12 +207,12 @@ void vqadd_extras(void)\n \n #undef MSG\n #define MSG \"less than 64 bits saturation cumulative_sat (2)\"\n-  TEST_BINARY_SAT_OP(INSN_NAME, , uint, u, 8, 8, expected_csat_lt_64_2, MSG);\n-  TEST_BINARY_SAT_OP(INSN_NAME, , uint, u, 16, 4, expected_csat_lt_64_2, MSG);\n-  TEST_BINARY_SAT_OP(INSN_NAME, , uint, u, 32, 2, expected_csat_lt_64_2, MSG);\n-  TEST_BINARY_SAT_OP(INSN_NAME, q, uint, u, 8, 16, expected_csat_lt_64_2, MSG);\n-  TEST_BINARY_SAT_OP(INSN_NAME, q, uint, u, 16, 8, expected_csat_lt_64_2, MSG);\n-  TEST_BINARY_SAT_OP(INSN_NAME, q, uint, u, 32, 4, expected_csat_lt_64_2, MSG);\n+  TEST_BINARY_SAT_OP(INSN_NAME, , uint, u, 8, 8, MSG);\n+  TEST_BINARY_SAT_OP(INSN_NAME, , uint, u, 16, 4, MSG);\n+  TEST_BINARY_SAT_OP(INSN_NAME, , uint, u, 32, 2, MSG);\n+  TEST_BINARY_SAT_OP(INSN_NAME, q, uint, u, 8, 16, MSG);\n+  TEST_BINARY_SAT_OP(INSN_NAME, q, uint, u, 16, 8, MSG);\n+  TEST_BINARY_SAT_OP(INSN_NAME, q, uint, u, 32, 4, MSG);\n \n   CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_lt_64_2, MSG);\n   CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected_lt_64_2, MSG);"}, {"sha": "9724101c614f3a51223bc0952b1a66dcf8127b69", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vqdmlXl.inc", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/763b865a17d32ff1d19720e333999de25132d3d4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvqdmlXl.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/763b865a17d32ff1d19720e333999de25132d3d4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvqdmlXl.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvqdmlXl.inc?ref=763b865a17d32ff1d19720e333999de25132d3d4", "patch": "@@ -5,18 +5,17 @@ void FNNAME (INSN_NAME) (void)\n {\n   /* vector_res = OP(vector, vector3, vector4),\n      then store the result.  */\n-#define TEST_VQDMLXL1(INSN, T1, T2, W, W2, N, EXPECTED_CUMULATIVE_SAT, CMT) \\\n+#define TEST_VQDMLXL1(INSN, T1, T2, W, W2, N, CMT) \\\n   Set_Neon_Cumulative_Sat(0, VECT_VAR(vector_res, T1, W, N));\t\t\\\n   VECT_VAR(vector_res, T1, W, N) =\t\t\t\t\t\\\n     INSN##_##T2##W2(VECT_VAR(vector, T1, W, N),\t\t\t\t\\\n \t\t    VECT_VAR(vector3, T1, W2, N),\t\t\t\\\n \t\t    VECT_VAR(vector4, T1, W2, N));\t\t\t\\\n     vst1q_##T2##W(VECT_VAR(result, T1, W, N),\t\t\t\t\\\n-\t\t  VECT_VAR(vector_res, T1, W, N));\t\t\t\\\n-    CHECK_CUMULATIVE_SAT(TEST_MSG, T1, W, N, EXPECTED_CUMULATIVE_SAT, CMT)\n+\t\t  VECT_VAR(vector_res, T1, W, N))\n \n-#define TEST_VQDMLXL(INSN, T1, T2, W, W2, N, EXPECTED_CUMULATIVE_SAT, CMT) \\\n-  TEST_VQDMLXL1(INSN, T1, T2, W, W2, N, EXPECTED_CUMULATIVE_SAT, CMT)\n+#define TEST_VQDMLXL(INSN, T1, T2, W, W2, N, CMT) \\\n+  TEST_VQDMLXL1(INSN, T1, T2, W, W2, N, CMT)\n \n   DECL_VARIABLE(vector, int, 32, 4);\n   DECL_VARIABLE(vector3, int, 16, 4);\n@@ -37,8 +36,8 @@ void FNNAME (INSN_NAME) (void)\n   VDUP(vector3, , int, s, 32, 2, 0x55);\n   VDUP(vector4, , int, s, 32, 2, 0xBB);\n \n-  TEST_VQDMLXL(INSN_NAME, int, s, 32, 16, 4, expected_cumulative_sat, \"\");\n-  TEST_VQDMLXL(INSN_NAME, int, s, 64, 32, 2, expected_cumulative_sat, \"\");\n+  TEST_VQDMLXL(INSN_NAME, int, s, 32, 16, 4, \"\");\n+  TEST_VQDMLXL(INSN_NAME, int, s, 64, 32, 2, \"\");\n \n   CHECK(TEST_MSG, int, 32, 4, PRIx32, expected, \"\");\n   CHECK(TEST_MSG, int, 64, 2, PRIx64, expected, \"\");\n@@ -49,8 +48,8 @@ void FNNAME (INSN_NAME) (void)\n   VDUP(vector4, , int, s, 32, 2, 0x80000000);\n \n #define TEST_MSG2 \"with saturation\"\n-  TEST_VQDMLXL(INSN_NAME, int, s, 32, 16, 4, expected_cumulative_sat2, TEST_MSG2);\n-  TEST_VQDMLXL(INSN_NAME, int, s, 64, 32, 2, expected_cumulative_sat2, TEST_MSG2);\n+  TEST_VQDMLXL(INSN_NAME, int, s, 32, 16, 4, TEST_MSG2);\n+  TEST_VQDMLXL(INSN_NAME, int, s, 64, 32, 2, TEST_MSG2);\n \n   CHECK(TEST_MSG, int, 32, 4, PRIx32, expected2, TEST_MSG2);\n   CHECK(TEST_MSG, int, 64, 2, PRIx64, expected2, TEST_MSG2);"}, {"sha": "8596acf1f64dcb5a7319a6c9f670f4489dac260c", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vqdmlXl_lane.inc", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/763b865a17d32ff1d19720e333999de25132d3d4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvqdmlXl_lane.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/763b865a17d32ff1d19720e333999de25132d3d4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvqdmlXl_lane.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvqdmlXl_lane.inc?ref=763b865a17d32ff1d19720e333999de25132d3d4", "patch": "@@ -5,19 +5,18 @@ void FNNAME (INSN_NAME) (void)\n {\n   /* vector_res = vqdmlXl_lane(vector, vector3, vector4, lane),\n      then store the result.  */\n-#define TEST_VQDMLXL_LANE1(INSN, T1, T2, W, W2, N, V, EXPECTED_CUMULATIVE_SAT, CMT) \\\n+#define TEST_VQDMLXL_LANE1(INSN, T1, T2, W, W2, N, V, CMT) \\\n   Set_Neon_Cumulative_Sat(0, VECT_VAR(vector_res, T1, W, N));\t\t\\\n   VECT_VAR(vector_res, T1, W, N) =\t\t\t\t\t\\\n     INSN##_##T2##W2(VECT_VAR(vector, T1, W, N),\t\t\t\t\\\n \t\t    VECT_VAR(vector3, T1, W2, N),\t\t\t\\\n \t\t    VECT_VAR(vector4, T1, W2, N),\t\t\t\\\n \t\t    V);\t\t\t\t\t\t\t\\\n   vst1q_##T2##W(VECT_VAR(result, T1, W, N),\t\t\t\t\\\n-\t\tVECT_VAR(vector_res, T1, W, N));\t\t\t\\\n-  CHECK_CUMULATIVE_SAT(TEST_MSG, T1, W, N, EXPECTED_CUMULATIVE_SAT, CMT)\n+\t\tVECT_VAR(vector_res, T1, W, N))\n \n-#define TEST_VQDMLXL_LANE(INSN, T1, T2, W, W2, N, V, EXPECTED_CUMULATIVE_SAT, CMT) \\\n-  TEST_VQDMLXL_LANE1(INSN, T1, T2, W, W2, N, V, EXPECTED_CUMULATIVE_SAT, CMT)\n+#define TEST_VQDMLXL_LANE(INSN, T1, T2, W, W2, N, V, CMT) \\\n+  TEST_VQDMLXL_LANE1(INSN, T1, T2, W, W2, N, V, CMT)\n \n   DECL_VARIABLE(vector, int, 32, 4);\n   DECL_VARIABLE(vector3, int, 16, 4);\n@@ -39,17 +38,17 @@ void FNNAME (INSN_NAME) (void)\n   VDUP(vector3, , int, s, 32, 2, 0x55);\n   VDUP(vector4, , int, s, 32, 2, 0xBB);\n \n-  TEST_VQDMLXL_LANE(INSN_NAME, int, s, 32, 16, 4, 0, expected_cumulative_sat, \"\");\n-  TEST_VQDMLXL_LANE(INSN_NAME, int, s, 64, 32, 2, 0, expected_cumulative_sat, \"\");\n+  TEST_VQDMLXL_LANE(INSN_NAME, int, s, 32, 16, 4, 0, \"\");\n+  TEST_VQDMLXL_LANE(INSN_NAME, int, s, 64, 32, 2, 0, \"\");\n \n   CHECK(TEST_MSG, int, 32, 4, PRIx32, expected, \"\");\n   CHECK(TEST_MSG, int, 64, 2, PRIx64, expected, \"\");\n \n #define TEST_MSG2 \"(mul with input=0)\"\n   VDUP(vector3, , int, s, 16, 4, 0);\n   VDUP(vector3, , int, s, 32, 2, 0);\n-  TEST_VQDMLXL_LANE(INSN_NAME, int, s, 32, 16, 4, 0, expected_cumulative_sat2, TEST_MSG2);\n-  TEST_VQDMLXL_LANE(INSN_NAME, int, s, 64, 32, 2, 0, expected_cumulative_sat2, TEST_MSG2);\n+  TEST_VQDMLXL_LANE(INSN_NAME, int, s, 32, 16, 4, 0, TEST_MSG2);\n+  TEST_VQDMLXL_LANE(INSN_NAME, int, s, 64, 32, 2, 0, TEST_MSG2);\n \n   CHECK(TEST_MSG, int, 32, 4, PRIx32, expected2, TEST_MSG2);\n   CHECK(TEST_MSG, int, 64, 2, PRIx64, expected2, TEST_MSG2);\n@@ -59,8 +58,8 @@ void FNNAME (INSN_NAME) (void)\n   VDUP(vector3, , int, s, 32, 2, 0x80000000);\n   VDUP(vector4, , int, s, 16, 4, 0x8000);\n   VDUP(vector4, , int, s, 32, 2, 0x80000000);\n-  TEST_VQDMLXL_LANE(INSN_NAME, int, s, 32, 16, 4, 0, expected_cumulative_sat3, TEST_MSG3);\n-  TEST_VQDMLXL_LANE(INSN_NAME, int, s, 64, 32, 2, 0, expected_cumulative_sat3, TEST_MSG3);\n+  TEST_VQDMLXL_LANE(INSN_NAME, int, s, 32, 16, 4, 0, TEST_MSG3);\n+  TEST_VQDMLXL_LANE(INSN_NAME, int, s, 64, 32, 2, 0, TEST_MSG3);\n \n   CHECK(TEST_MSG, int, 32, 4, PRIx32, expected3, TEST_MSG3);\n   CHECK(TEST_MSG, int, 64, 2, PRIx64, expected3, TEST_MSG3);"}, {"sha": "5f89aa877846af5166d333d7731c6d6af8b38707", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vqdmlXl_n.inc", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/763b865a17d32ff1d19720e333999de25132d3d4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvqdmlXl_n.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/763b865a17d32ff1d19720e333999de25132d3d4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvqdmlXl_n.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvqdmlXl_n.inc?ref=763b865a17d32ff1d19720e333999de25132d3d4", "patch": "@@ -5,18 +5,17 @@ void FNNAME (INSN_NAME) (void)\n {\n   /* vector_res = vqdmlxl_n(vector, vector3, val),\n      then store the result.  */\n-#define TEST_VQDMLXL_N1(INSN, T1, T2, W, W2, N, V, EXPECTED_CUMULATIVE_SAT, CMT) \\\n+#define TEST_VQDMLXL_N1(INSN, T1, T2, W, W2, N, V, CMT) \\\n   Set_Neon_Cumulative_Sat(0, VECT_VAR(vector_res, T1, W, N));\t\t\\\n   VECT_VAR(vector_res, T1, W, N) =\t\t\t\t\t\\\n     INSN##_##T2##W2(VECT_VAR(vector, T1, W, N),\t\t\t\t\\\n \t\t    VECT_VAR(vector3, T1, W2, N),\t\t\t\\\n \t\t    V);\t\t\t\t\t\t\t\\\n   vst1q_##T2##W(VECT_VAR(result, T1, W, N),\t\t\t\t\\\n-\t\tVECT_VAR(vector_res, T1, W, N));\t\t\t\\\n-  CHECK_CUMULATIVE_SAT(TEST_MSG, T1, W, N, EXPECTED_CUMULATIVE_SAT, CMT)\n+\t\tVECT_VAR(vector_res, T1, W, N))\n \n-#define TEST_VQDMLXL_N(INSN, T1, T2, W, W2, N, V, EXPECTED_CUMULATIVE_SAT, CMT) \\\n-  TEST_VQDMLXL_N1(INSN, T1, T2, W, W2, N, V, EXPECTED_CUMULATIVE_SAT, CMT)\n+#define TEST_VQDMLXL_N(INSN, T1, T2, W, W2, N, V, CMT) \\\n+  TEST_VQDMLXL_N1(INSN, T1, T2, W, W2, N, V, CMT)\n \n   DECL_VARIABLE(vector, int, 32, 4);\n   DECL_VARIABLE(vector3, int, 16, 4);\n@@ -35,8 +34,8 @@ void FNNAME (INSN_NAME) (void)\n   VDUP(vector3, , int, s, 32, 2, 0x55);\n \n   /* Choose val arbitrarily.  */\n-  TEST_VQDMLXL_N(INSN_NAME, int, s, 32, 16, 4, 0x22, expected_cumulative_sat, \"\");\n-  TEST_VQDMLXL_N(INSN_NAME, int, s, 64, 32, 2, 0x33, expected_cumulative_sat, \"\");\n+  TEST_VQDMLXL_N(INSN_NAME, int, s, 32, 16, 4, 0x22, \"\");\n+  TEST_VQDMLXL_N(INSN_NAME, int, s, 64, 32, 2, 0x33, \"\");\n \n   CHECK(TEST_MSG, int, 32, 4, PRIx32, expected, \"\");\n   CHECK(TEST_MSG, int, 64, 2, PRIx64, expected, \"\");\n@@ -45,8 +44,8 @@ void FNNAME (INSN_NAME) (void)\n   VDUP(vector3, , int, s, 16, 4, 0x8000);\n   VDUP(vector3, , int, s, 32, 2, 0x80000000);\n \n-  TEST_VQDMLXL_N(INSN_NAME, int, s, 32, 16, 4, 0x8000, expected_cumulative_sat2, TEST_MSG2);\n-  TEST_VQDMLXL_N(INSN_NAME, int, s, 64, 32, 2, 0x80000000, expected_cumulative_sat2, TEST_MSG2);\n+  TEST_VQDMLXL_N(INSN_NAME, int, s, 32, 16, 4, 0x8000, TEST_MSG2);\n+  TEST_VQDMLXL_N(INSN_NAME, int, s, 64, 32, 2, 0x80000000, TEST_MSG2);\n \n   CHECK(TEST_MSG, int, 32, 4, PRIx32, expected2, TEST_MSG2);\n   CHECK(TEST_MSG, int, 64, 2, PRIx64, expected2, TEST_MSG2);"}, {"sha": "784047ed78e02cfa810f6c9b9f6bdaa0bfed0547", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vqdmlal.c", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/763b865a17d32ff1d19720e333999de25132d3d4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqdmlal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/763b865a17d32ff1d19720e333999de25132d3d4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqdmlal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqdmlal.c?ref=763b865a17d32ff1d19720e333999de25132d3d4", "patch": "@@ -5,19 +5,10 @@\n #define INSN_NAME vqdmlal\n #define TEST_MSG \"VQDMLAL\"\n \n-/* Expected values of cumulative_saturation flag.  */\n-int VECT_VAR(expected_cumulative_sat,int,32,4) = 0;\n-int VECT_VAR(expected_cumulative_sat,int,64,2) = 0;\n-\n /* Expected results.  */\n VECT_VAR_DECL(expected,int,32,4) [] = { 0x7c1e, 0x7c1f, 0x7c20, 0x7c21 };\n VECT_VAR_DECL(expected,int,64,2) [] = { 0x7c1e, 0x7c1f };\n \n-/* Expected values of cumulative_saturation flag when saturation\n-   occurs.  */\n-int VECT_VAR(expected_cumulative_sat2,int,32,4) = 1;\n-int VECT_VAR(expected_cumulative_sat2,int,64,2) = 1;\n-\n /* Expected results when saturation occurs.  */\n VECT_VAR_DECL(expected2,int,32,4) [] = { 0x7fffffef, 0x7ffffff0,\n \t\t\t\t\t 0x7ffffff1, 0x7ffffff2 };"}, {"sha": "2e641fd553a373e79aeef7ec481329f07a359e3c", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vqdmlal_lane.c", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/763b865a17d32ff1d19720e333999de25132d3d4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqdmlal_lane.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/763b865a17d32ff1d19720e333999de25132d3d4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqdmlal_lane.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqdmlal_lane.c?ref=763b865a17d32ff1d19720e333999de25132d3d4", "patch": "@@ -5,30 +5,16 @@\n #define INSN_NAME vqdmlal_lane\n #define TEST_MSG \"VQDMLAL_LANE\"\n \n-/* Expected values of cumulative_saturation flag.  */\n-int VECT_VAR(expected_cumulative_sat,int,32,4) = 0;\n-int VECT_VAR(expected_cumulative_sat,int,64,2) = 0;\n-\n /* Expected results.  */\n VECT_VAR_DECL(expected,int,32,4) [] = { 0x7c1e, 0x7c1f, 0x7c20, 0x7c21 };\n VECT_VAR_DECL(expected,int,64,2) [] = { 0x7c1e, 0x7c1f };\n \n-/* Expected values of cumulative_saturation flag when multiplying with\n-   0.  */\n-int VECT_VAR(expected_cumulative_sat2,int,32,4) = 0;\n-int VECT_VAR(expected_cumulative_sat2,int,64,2) = 0;\n-\n /* Expected values when multiplying with 0.  */\n VECT_VAR_DECL(expected2,int,32,4) [] = { 0xfffffff0, 0xfffffff1,\n \t\t\t\t\t 0xfffffff2, 0xfffffff3 };\n VECT_VAR_DECL(expected2,int,64,2) [] = { 0xfffffffffffffff0,\n \t\t\t\t\t 0xfffffffffffffff1 };\n \n-/* Expected values of cumulative_saturation flag when multiplication\n-   saturates.  */\n-int VECT_VAR(expected_cumulative_sat3,int,32,4) = 1;\n-int VECT_VAR(expected_cumulative_sat3,int,64,2) = 1;\n-\n /* Expected values when multiplication saturates.  */\n VECT_VAR_DECL(expected3,int,32,4) [] = { 0x7fffffef, 0x7ffffff0,\n \t\t\t\t\t 0x7ffffff1, 0x7ffffff2 };"}, {"sha": "33561120bd2bbd42b3df92c34e1805a7b32712be", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vqdmlal_n.c", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/763b865a17d32ff1d19720e333999de25132d3d4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqdmlal_n.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/763b865a17d32ff1d19720e333999de25132d3d4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqdmlal_n.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqdmlal_n.c?ref=763b865a17d32ff1d19720e333999de25132d3d4", "patch": "@@ -5,19 +5,10 @@\n #define INSN_NAME vqdmlal_n\n #define TEST_MSG \"VQDMLAL_N\"\n \n-/* Expected values of cumulative_saturation flag.  */\n-int VECT_VAR(expected_cumulative_sat,int,32,4) = 0;\n-int VECT_VAR(expected_cumulative_sat,int,64,2) = 0;\n-\n /* Expected results.  */\n VECT_VAR_DECL(expected,int,32,4) [] = { 0x1684, 0x1685, 0x1686, 0x1687 };\n VECT_VAR_DECL(expected,int,64,2) [] = { 0x21ce, 0x21cf };\n \n-/* Expected values of cumulative_saturation flag when saturation\n-   occurs.  */\n-int VECT_VAR(expected_cumulative_sat2,int,32,4) = 1;\n-int VECT_VAR(expected_cumulative_sat2,int,64,2) = 1;\n-\n /* Expected results when saturation occurs.  */\n VECT_VAR_DECL(expected2,int,32,4) [] = { 0x7fffffef, 0x7ffffff0,\n \t\t\t\t\t 0x7ffffff1, 0x7ffffff2 };"}, {"sha": "d65713c049844da81c4f5683069999548e33c8ae", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vqdmlsl.c", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/763b865a17d32ff1d19720e333999de25132d3d4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqdmlsl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/763b865a17d32ff1d19720e333999de25132d3d4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqdmlsl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqdmlsl.c?ref=763b865a17d32ff1d19720e333999de25132d3d4", "patch": "@@ -5,21 +5,12 @@\n #define INSN_NAME vqdmlsl\n #define TEST_MSG \"VQDMLSL\"\n \n-/* Expected values of cumulative_saturation flag.  */\n-int VECT_VAR(expected_cumulative_sat,int,32,4) = 0;\n-int VECT_VAR(expected_cumulative_sat,int,64,2) = 0;\n-\n /* Expected results.  */\n VECT_VAR_DECL(expected,int,32,4) [] = { 0xffff83c2, 0xffff83c3,\n \t\t\t\t\t0xffff83c4, 0xffff83c5 };\n VECT_VAR_DECL(expected,int,64,2) [] = { 0xffffffffffff83c2,\n \t\t\t\t\t0xffffffffffff83c3 };\n \n-/* Expected values of cumulative_saturation flag when saturation\n-   occurs.  */\n-int VECT_VAR(expected_cumulative_sat2,int,32,4) = 1;\n-int VECT_VAR(expected_cumulative_sat2,int,64,2) = 1;\n-\n /* Expected results when saturation occurs.  */\n VECT_VAR_DECL(expected2,int,32,4) [] = { 0x80000000, 0x80000000,\n \t\t\t\t\t 0x80000000, 0x80000000 };"}, {"sha": "2180314802a046327fa20e5bb9628fa9f0be7214", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vqdmlsl_lane.c", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/763b865a17d32ff1d19720e333999de25132d3d4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqdmlsl_lane.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/763b865a17d32ff1d19720e333999de25132d3d4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqdmlsl_lane.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqdmlsl_lane.c?ref=763b865a17d32ff1d19720e333999de25132d3d4", "patch": "@@ -5,32 +5,18 @@\n #define INSN_NAME vqdmlsl_lane\n #define TEST_MSG \"VQDMLSL_LANE\"\n \n-/* Expected values of cumulative_saturation flag.  */\n-int VECT_VAR(expected_cumulative_sat,int,32,4) = 0;\n-int VECT_VAR(expected_cumulative_sat,int,64,2) = 0;\n-\n /* Expected results.  */\n VECT_VAR_DECL(expected,int,32,4) [] = { 0xffff83c2, 0xffff83c3,\n \t\t\t\t\t0xffff83c4, 0xffff83c5 };\n VECT_VAR_DECL(expected,int,64,2) [] = { 0xffffffffffff83c2,\n \t\t\t\t\t0xffffffffffff83c3 };\n \n-/* Expected values of cumulative_saturation flag when multiplying with\n-   0.  */\n-int VECT_VAR(expected_cumulative_sat2,int,32,4) = 0;\n-int VECT_VAR(expected_cumulative_sat2,int,64,2) = 0;\n-\n /* Expected values when multiplying with 0.  */\n VECT_VAR_DECL(expected2,int,32,4) [] = { 0xfffffff0, 0xfffffff1,\n \t\t\t\t\t 0xfffffff2, 0xfffffff3 };\n VECT_VAR_DECL(expected2,int,64,2) [] = { 0xfffffffffffffff0,\n \t\t\t\t\t 0xfffffffffffffff1 };\n \n-/* Expected values of cumulative_saturation flag when multiplication\n-   saturates.  */\n-int VECT_VAR(expected_cumulative_sat3,int,32,4) = 1;\n-int VECT_VAR(expected_cumulative_sat3,int,64,2) = 1;\n-\n /* Expected values when multiplication saturates.  */\n VECT_VAR_DECL(expected3,int,32,4) [] = { 0x80000000, 0x80000000,\n \t\t\t\t\t 0x80000000, 0x80000000 };"}, {"sha": "40a19299e393c2772fda285f1e545dfd9f80a3ff", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vqdmlsl_n.c", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/763b865a17d32ff1d19720e333999de25132d3d4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqdmlsl_n.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/763b865a17d32ff1d19720e333999de25132d3d4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqdmlsl_n.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqdmlsl_n.c?ref=763b865a17d32ff1d19720e333999de25132d3d4", "patch": "@@ -5,21 +5,12 @@\n #define INSN_NAME vqdmlsl_n\n #define TEST_MSG \"VQDMLSL_N\"\n \n-/* Expected values of cumulative_saturation flag.  */\n-int VECT_VAR(expected_cumulative_sat,int,32,4) = 0;\n-int VECT_VAR(expected_cumulative_sat,int,64,2) = 0;\n-\n /* Expected results.  */\n VECT_VAR_DECL(expected,int,32,4) [] = { 0xffffe95c, 0xffffe95d,\n \t\t\t\t\t0xffffe95e, 0xffffe95f };\n VECT_VAR_DECL(expected,int,64,2) [] = { 0xffffffffffffde12,\n \t\t\t\t\t0xffffffffffffde13 };\n \n-/* Expected values of cumulative_saturation flag when saturation\n-   occurs.  */\n-int VECT_VAR(expected_cumulative_sat2,int,32,4) = 1;\n-int VECT_VAR(expected_cumulative_sat2,int,64,2) = 1;\n-\n /* Expected results when saturation occurs.  */\n VECT_VAR_DECL(expected2,int,32,4) [] = { 0x80000000, 0x80000000,\n \t\t\t\t\t 0x80000000, 0x80000000 };"}, {"sha": "e78590ff78c1860e5e199b2ce8e55c627b670d7b", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vqdmulh.c", "status": "modified", "additions": 14, "deletions": 28, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/763b865a17d32ff1d19720e333999de25132d3d4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqdmulh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/763b865a17d32ff1d19720e333999de25132d3d4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqdmulh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqdmulh.c?ref=763b865a17d32ff1d19720e333999de25132d3d4", "patch": "@@ -2,12 +2,6 @@\n #include \"arm-neon-ref.h\"\n #include \"compute-ref-data.h\"\n \n-/* Expected values of cumulative_saturation flag.  */\n-int VECT_VAR(expected_cumulative_sat,int,16,4) = 0;\n-int VECT_VAR(expected_cumulative_sat,int,32,2) = 0;\n-int VECT_VAR(expected_cumulative_sat,int,16,8) = 0;\n-int VECT_VAR(expected_cumulative_sat,int,32,4) = 0;\n-\n /* Expected results.  */\n VECT_VAR_DECL(expected,int,16,4) [] = { 0xffff, 0xffff, 0xffff, 0xffff };\n VECT_VAR_DECL(expected,int,32,2) [] = { 0xffffffff, 0xffffffff };\n@@ -16,13 +10,6 @@ VECT_VAR_DECL(expected,int,16,8) [] = { 0xffff, 0xffff, 0xffff, 0xffff,\n VECT_VAR_DECL(expected,int,32,4) [] = { 0xffffffff, 0xffffffff,\n \t\t\t\t\t0xffffffff, 0xffffffff };\n \n-/* Expected values of cumulative_saturation flag when saturation\n-   occurs.  */\n-int VECT_VAR(expected_cumulative_sat2,int,16,4) = 1;\n-int VECT_VAR(expected_cumulative_sat2,int,32,2) = 1;\n-int VECT_VAR(expected_cumulative_sat2,int,16,8) = 1;\n-int VECT_VAR(expected_cumulative_sat2,int,32,4) = 1;\n-\n /* Expected results when saturation occurs.  */\n VECT_VAR_DECL(expected2,int,16,4) [] = { 0x7fff, 0x7fff, 0x7fff, 0x7fff };\n VECT_VAR_DECL(expected2,int,32,2) [] = { 0x7fffffff, 0x7fffffff };\n@@ -40,21 +27,20 @@ VECT_VAR_DECL(expected2,int,32,4) [] = { 0x7fffffff, 0x7fffffff,\n void FNNAME (INSN_NAME) (void)\n {\n   /* vector_res = vqdmulh(vector,vector2,lane), then store the result.  */\n-#define TEST_VQDMULH2(INSN, Q, T1, T2, W, N, EXPECTED_CUMULATIVE_SAT, CMT) \\\n+#define TEST_VQDMULH2(INSN, Q, T1, T2, W, N, CMT) \\\n   Set_Neon_Cumulative_Sat(0, VECT_VAR(vector_res, T1, W, N));\t\t\\\n   VECT_VAR(vector_res, T1, W, N) =\t\t\t\t\t\\\n     INSN##Q##_##T2##W(VECT_VAR(vector, T1, W, N),\t\t\t\\\n \t\t      VECT_VAR(vector2, T1, W, N));\t\t\t\\\n   vst1##Q##_##T2##W(VECT_VAR(result, T1, W, N),\t\t\t\t\\\n-\t\t    VECT_VAR(vector_res, T1, W, N));\t\t\t\\\n-  CHECK_CUMULATIVE_SAT(TEST_MSG, T1, W, N, EXPECTED_CUMULATIVE_SAT, CMT)\n+\t\t    VECT_VAR(vector_res, T1, W, N))\n \n   /* Two auxliary macros are necessary to expand INSN.  */\n-#define TEST_VQDMULH1(INSN, Q, T1, T2, W, N, EXPECTED_CUMULATIVE_SAT, CMT) \\\n-  TEST_VQDMULH2(INSN, Q, T1, T2, W, N, EXPECTED_CUMULATIVE_SAT, CMT)\n+#define TEST_VQDMULH1(INSN, Q, T1, T2, W, N, CMT) \\\n+  TEST_VQDMULH2(INSN, Q, T1, T2, W, N, CMT)\n \n-#define TEST_VQDMULH(Q, T1, T2, W, N, EXPECTED_CUMULATIVE_SAT, CMT)\t\\\n-  TEST_VQDMULH1(INSN_NAME, Q, T1, T2, W, N, EXPECTED_CUMULATIVE_SAT, CMT)\n+#define TEST_VQDMULH(Q, T1, T2, W, N, CMT)\t\\\n+  TEST_VQDMULH1(INSN_NAME, Q, T1, T2, W, N, CMT)\n \n   DECL_VARIABLE(vector, int, 16, 4);\n   DECL_VARIABLE(vector, int, 32, 2);\n@@ -84,10 +70,10 @@ void FNNAME (INSN_NAME) (void)\n   VDUP(vector2, q, int, s, 16, 8, 0x33);\n   VDUP(vector2, q, int, s, 32, 4, 0x22);\n \n-  TEST_VQDMULH(, int, s, 16, 4, expected_cumulative_sat, \"\");\n-  TEST_VQDMULH(, int, s, 32, 2, expected_cumulative_sat, \"\");\n-  TEST_VQDMULH(q, int, s, 16, 8, expected_cumulative_sat, \"\");\n-  TEST_VQDMULH(q, int, s, 32, 4, expected_cumulative_sat, \"\");\n+  TEST_VQDMULH(, int, s, 16, 4, \"\");\n+  TEST_VQDMULH(, int, s, 32, 2, \"\");\n+  TEST_VQDMULH(q, int, s, 16, 8, \"\");\n+  TEST_VQDMULH(q, int, s, 32, 4, \"\");\n \n   CHECK (TEST_MSG, int, 16, 4, PRIx16, expected, \"\");\n   CHECK (TEST_MSG, int, 32, 2, PRIx32, expected, \"\");\n@@ -104,10 +90,10 @@ void FNNAME (INSN_NAME) (void)\n   VDUP(vector2, q, int, s, 32, 4, 0x80000000);\n \n #define TEST_MSG2 \"with saturation\"\n-  TEST_VQDMULH(, int, s, 16, 4, expected_cumulative_sat2, TEST_MSG2);\n-  TEST_VQDMULH(, int, s, 32, 2, expected_cumulative_sat2, TEST_MSG2);\n-  TEST_VQDMULH(q, int, s, 16, 8, expected_cumulative_sat2, TEST_MSG2);\n-  TEST_VQDMULH(q, int, s, 32, 4, expected_cumulative_sat2, TEST_MSG2);\n+  TEST_VQDMULH(, int, s, 16, 4, TEST_MSG2);\n+  TEST_VQDMULH(, int, s, 32, 2, TEST_MSG2);\n+  TEST_VQDMULH(q, int, s, 16, 8, TEST_MSG2);\n+  TEST_VQDMULH(q, int, s, 32, 4, TEST_MSG2);\n \n   CHECK (TEST_MSG, int, 16, 4, PRIx16, expected2, TEST_MSG2);\n   CHECK (TEST_MSG, int, 32, 2, PRIx32, expected2, TEST_MSG2);"}, {"sha": "d11c764b8b275eeb328b9620b83e4df5a8f0ea5f", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vqdmulh_lane.c", "status": "modified", "additions": 14, "deletions": 28, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/763b865a17d32ff1d19720e333999de25132d3d4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqdmulh_lane.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/763b865a17d32ff1d19720e333999de25132d3d4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqdmulh_lane.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqdmulh_lane.c?ref=763b865a17d32ff1d19720e333999de25132d3d4", "patch": "@@ -2,12 +2,6 @@\n #include \"arm-neon-ref.h\"\n #include \"compute-ref-data.h\"\n \n-/* Expected values of cumulative_saturation flag.  */\n-int VECT_VAR(expected_cumulative_sat,int,16,4) = 0;\n-int VECT_VAR(expected_cumulative_sat,int,32,2) = 0;\n-int VECT_VAR(expected_cumulative_sat,int,16,8) = 0;\n-int VECT_VAR(expected_cumulative_sat,int,32,4) = 0;\n-\n /* Expected results.  */\n VECT_VAR_DECL(expected,int,16,4) [] = { 0xffff, 0xffff, 0xffff, 0xffff };\n VECT_VAR_DECL(expected,int,32,2) [] = { 0xffffffff, 0xffffffff };\n@@ -16,13 +10,6 @@ VECT_VAR_DECL(expected,int,16,8) [] = { 0xffff, 0xffff, 0xffff, 0xffff,\n VECT_VAR_DECL(expected,int,32,4) [] = { 0xffffffff, 0xffffffff,\n \t\t\t\t\t0xffffffff, 0xffffffff };\n \n-/* Expected values of cumulative_saturation flag when saturation\n-   occurs.  */\n-int VECT_VAR(expected_cumulative_sat2,int,16,4) = 1;\n-int VECT_VAR(expected_cumulative_sat2,int,32,2) = 1;\n-int VECT_VAR(expected_cumulative_sat2,int,16,8) = 1;\n-int VECT_VAR(expected_cumulative_sat2,int,32,4) = 1;\n-\n /* Expected results when saturation occurs.  */\n VECT_VAR_DECL(expected2,int,16,4) [] = { 0x7fff, 0x7fff, 0x7fff, 0x7fff };\n VECT_VAR_DECL(expected2,int,32,2) [] = { 0x7fffffff, 0x7fffffff };\n@@ -39,22 +26,21 @@ VECT_VAR_DECL(expected2,int,32,4) [] = { 0x7fffffff, 0x7fffffff,\n void FNNAME (INSN_NAME) (void)\n {\n   /* vector_res = vqdmulh_lane(vector,vector2,lane), then store the result.  */\n-#define TEST_VQDMULH_LANE2(INSN, Q, T1, T2, W, N, N2, L, EXPECTED_CUMULATIVE_SAT, CMT) \\\n+#define TEST_VQDMULH_LANE2(INSN, Q, T1, T2, W, N, N2, L, CMT) \\\n   Set_Neon_Cumulative_Sat(0, VECT_VAR(vector_res, T1, W, N));\t\t\\\n   VECT_VAR(vector_res, T1, W, N) =\t\t\t\t\t\\\n     INSN##Q##_lane_##T2##W(VECT_VAR(vector, T1, W, N),\t\t\t\\\n \t\t\t   VECT_VAR(vector2, T1, W, N2),\t\t\\\n \t\t\t   L);\t\t\t\t\t\t\\\n   vst1##Q##_##T2##W(VECT_VAR(result, T1, W, N),\t\t\t\t\\\n-\t\t    VECT_VAR(vector_res, T1, W, N));\t\t\t\\\n-  CHECK_CUMULATIVE_SAT(TEST_MSG, T1, W, N, EXPECTED_CUMULATIVE_SAT, CMT)\n+\t\t    VECT_VAR(vector_res, T1, W, N))\n \n   /* Two auxliary macros are necessary to expand INSN.  */\n-#define TEST_VQDMULH_LANE1(INSN, Q, T1, T2, W, N, N2, L, EXPECTED_CUMULATIVE_SAT, CMT) \\\n-  TEST_VQDMULH_LANE2(INSN, Q, T1, T2, W, N, N2, L, EXPECTED_CUMULATIVE_SAT, CMT)\n+#define TEST_VQDMULH_LANE1(INSN, Q, T1, T2, W, N, N2, L, CMT) \\\n+  TEST_VQDMULH_LANE2(INSN, Q, T1, T2, W, N, N2, L, CMT)\n \n-#define TEST_VQDMULH_LANE(Q, T1, T2, W, N, N2, L, EXPECTED_CUMULATIVE_SAT, CMT) \\\n-  TEST_VQDMULH_LANE1(INSN_NAME, Q, T1, T2, W, N, N2, L, EXPECTED_CUMULATIVE_SAT, CMT)\n+#define TEST_VQDMULH_LANE(Q, T1, T2, W, N, N2, L, CMT) \\\n+  TEST_VQDMULH_LANE1(INSN_NAME, Q, T1, T2, W, N, N2, L, CMT)\n \n   DECL_VARIABLE(vector, int, 16, 4);\n   DECL_VARIABLE(vector, int, 32, 2);\n@@ -84,10 +70,10 @@ void FNNAME (INSN_NAME) (void)\n   VDUP(vector2, , int, s, 32, 2, 0xBB);\n \n   /* Choose lane arbitrarily.  */\n-  TEST_VQDMULH_LANE(, int, s, 16, 4, 4, 2, expected_cumulative_sat, \"\");\n-  TEST_VQDMULH_LANE(, int, s, 32, 2, 2, 1, expected_cumulative_sat, \"\");\n-  TEST_VQDMULH_LANE(q, int, s, 16, 8, 4, 3, expected_cumulative_sat, \"\");\n-  TEST_VQDMULH_LANE(q, int, s, 32, 4, 2, 0, expected_cumulative_sat, \"\");\n+  TEST_VQDMULH_LANE(, int, s, 16, 4, 4, 2, \"\");\n+  TEST_VQDMULH_LANE(, int, s, 32, 2, 2, 1, \"\");\n+  TEST_VQDMULH_LANE(q, int, s, 16, 8, 4, 3, \"\");\n+  TEST_VQDMULH_LANE(q, int, s, 32, 4, 2, 0, \"\");\n \n   CHECK (TEST_MSG, int, 16, 4, PRIx16, expected, \"\");\n   CHECK (TEST_MSG, int, 32, 2, PRIx32, expected, \"\");\n@@ -103,10 +89,10 @@ void FNNAME (INSN_NAME) (void)\n   VDUP(vector2, , int, s, 32, 2, 0x80000000);\n \n #define TEST_MSG2 \" (check mul cumulative saturation)\"\n-  TEST_VQDMULH_LANE(, int, s, 16, 4, 4, 3, expected_cumulative_sat2, TEST_MSG2);\n-  TEST_VQDMULH_LANE(, int, s, 32, 2, 2, 1, expected_cumulative_sat2, TEST_MSG2);\n-  TEST_VQDMULH_LANE(q, int, s, 16, 8, 4, 2, expected_cumulative_sat2, TEST_MSG2);\n-  TEST_VQDMULH_LANE(q, int, s, 32, 4, 2, 1, expected_cumulative_sat2, TEST_MSG2);\n+  TEST_VQDMULH_LANE(, int, s, 16, 4, 4, 3, TEST_MSG2);\n+  TEST_VQDMULH_LANE(, int, s, 32, 2, 2, 1, TEST_MSG2);\n+  TEST_VQDMULH_LANE(q, int, s, 16, 8, 4, 2, TEST_MSG2);\n+  TEST_VQDMULH_LANE(q, int, s, 32, 4, 2, 1, TEST_MSG2);\n \n   CHECK (TEST_MSG, int, 16, 4, PRIx16, expected2, TEST_MSG2);\n   CHECK (TEST_MSG, int, 32, 2, PRIx32, expected2, TEST_MSG2);"}, {"sha": "7819a8554ea06269e48e8e34066bad7d2b778602", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vqdmulh_n.c", "status": "modified", "additions": 14, "deletions": 28, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/763b865a17d32ff1d19720e333999de25132d3d4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqdmulh_n.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/763b865a17d32ff1d19720e333999de25132d3d4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqdmulh_n.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqdmulh_n.c?ref=763b865a17d32ff1d19720e333999de25132d3d4", "patch": "@@ -2,26 +2,13 @@\n #include \"arm-neon-ref.h\"\n #include \"compute-ref-data.h\"\n \n-/* Expected values of cumulative_saturation flag.  */\n-int VECT_VAR(expected_cumulative_sat,int,16,4) = 0;\n-int VECT_VAR(expected_cumulative_sat,int,32,2) = 0;\n-int VECT_VAR(expected_cumulative_sat,int,16,8) = 0;\n-int VECT_VAR(expected_cumulative_sat,int,32,4) = 0;\n-\n /* Expected results.  */\n VECT_VAR_DECL(expected,int,16,4) [] = { 0x19, 0x19, 0x19, 0x19 };\n VECT_VAR_DECL(expected,int,32,2) [] = { 0x4, 0x4 };\n VECT_VAR_DECL(expected,int,16,8) [] = { 0x10, 0x10, 0x10, 0x10,\n \t\t\t\t\t0x10, 0x10, 0x10, 0x10 };\n VECT_VAR_DECL(expected,int,32,4) [] = { 0xa, 0xa, 0xa, 0xa };\n \n-/* Expected values of cumulative_saturation flag when saturation\n-   occurs.  */\n-int VECT_VAR(expected_cumulative_sat2,int,16,4) = 1;\n-int VECT_VAR(expected_cumulative_sat2,int,32,2) = 1;\n-int VECT_VAR(expected_cumulative_sat2,int,16,8) = 1;\n-int VECT_VAR(expected_cumulative_sat2,int,32,4) = 1;\n-\n /* Expected results when saturation occurs.  */\n VECT_VAR_DECL(expected2,int,16,4) [] = { 0x7fff, 0x7fff, 0x7fff, 0x7fff };\n VECT_VAR_DECL(expected2,int,32,2) [] = { 0x7fffffff, 0x7fffffff };\n@@ -40,21 +27,20 @@ void FNNAME (INSN_NAME) (void)\n   int i;\n \n   /* vector_res = vqdmulh_n(vector,val), then store the result.  */\n-#define TEST_VQDMULH_N2(INSN, Q, T1, T2, W, N, L, EXPECTED_CUMULATIVE_SAT, CMT) \\\n+#define TEST_VQDMULH_N2(INSN, Q, T1, T2, W, N, L, CMT) \\\n   Set_Neon_Cumulative_Sat(0, VECT_VAR(vector_res, T1, W, N));\t\\\n   VECT_VAR(vector_res, T1, W, N) =\t\t\t\t\\\n     INSN##Q##_n_##T2##W(VECT_VAR(vector, T1, W, N),\t\t\\\n \t\t\tL);\t\t\t\t\t\\\n   vst1##Q##_##T2##W(VECT_VAR(result, T1, W, N),\t\t\t\\\n-\t\t    VECT_VAR(vector_res, T1, W, N));\t\t\\\n-  CHECK_CUMULATIVE_SAT(TEST_MSG, T1, W, N, EXPECTED_CUMULATIVE_SAT, CMT)\n+\t\t    VECT_VAR(vector_res, T1, W, N))\n \n   /* Two auxliary macros are necessary to expand INSN.  */\n-#define TEST_VQDMULH_N1(INSN, Q, T1, T2, W, N, L, EXPECTED_CUMULATIVE_SAT, CMT) \\\n-  TEST_VQDMULH_N2(INSN, Q, T1, T2, W, N, L, EXPECTED_CUMULATIVE_SAT, CMT)\n+#define TEST_VQDMULH_N1(INSN, Q, T1, T2, W, N, L, CMT) \\\n+  TEST_VQDMULH_N2(INSN, Q, T1, T2, W, N, L, CMT)\n \n-#define TEST_VQDMULH_N(Q, T1, T2, W, N, L, EXPECTED_CUMULATIVE_SAT, CMT)\t\\\n-  TEST_VQDMULH_N1(INSN_NAME, Q, T1, T2, W, N, L, EXPECTED_CUMULATIVE_SAT, CMT)\n+#define TEST_VQDMULH_N(Q, T1, T2, W, N, L, CMT)\t\\\n+  TEST_VQDMULH_N1(INSN_NAME, Q, T1, T2, W, N, L, CMT)\n \n   DECL_VARIABLE(vector, int, 16, 4);\n   DECL_VARIABLE(vector, int, 32, 2);\n@@ -75,10 +61,10 @@ void FNNAME (INSN_NAME) (void)\n   VDUP(vector, q, int, s, 32, 4, 0x100045);\n \n   /* Choose multiplier arbitrarily.  */\n-  TEST_VQDMULH_N(, int, s, 16, 4, 0xCF, expected_cumulative_sat, \"\");\n-  TEST_VQDMULH_N(, int, s, 32, 2, 0x2344, expected_cumulative_sat, \"\");\n-  TEST_VQDMULH_N(q, int, s, 16, 8, 0x80, expected_cumulative_sat, \"\");\n-  TEST_VQDMULH_N(q, int, s, 32, 4, 0x5422, expected_cumulative_sat, \"\");\n+  TEST_VQDMULH_N(, int, s, 16, 4, 0xCF, \"\");\n+  TEST_VQDMULH_N(, int, s, 32, 2, 0x2344, \"\");\n+  TEST_VQDMULH_N(q, int, s, 16, 8, 0x80, \"\");\n+  TEST_VQDMULH_N(q, int, s, 32, 4, 0x5422, \"\");\n \n   CHECK (TEST_MSG, int, 16, 4, PRIx16, expected, \"\");\n   CHECK (TEST_MSG, int, 32, 2, PRIx32, expected, \"\");\n@@ -92,10 +78,10 @@ void FNNAME (INSN_NAME) (void)\n   VDUP(vector, q, int, s, 32, 4, 0x80000000);\n \n #define TEST_MSG2 \" (check mul cumulative saturation)\"\n-  TEST_VQDMULH_N(, int, s, 16, 4, 0x8000, expected_cumulative_sat2, TEST_MSG2);\n-  TEST_VQDMULH_N(, int, s, 32, 2, 0x80000000, expected_cumulative_sat2, TEST_MSG2);\n-  TEST_VQDMULH_N(q, int, s, 16, 8, 0x8000, expected_cumulative_sat2, TEST_MSG2);\n-  TEST_VQDMULH_N(q, int, s, 32, 4, 0x80000000, expected_cumulative_sat2, TEST_MSG2);\n+  TEST_VQDMULH_N(, int, s, 16, 4, 0x8000, TEST_MSG2);\n+  TEST_VQDMULH_N(, int, s, 32, 2, 0x80000000, TEST_MSG2);\n+  TEST_VQDMULH_N(q, int, s, 16, 8, 0x8000, TEST_MSG2);\n+  TEST_VQDMULH_N(q, int, s, 32, 4, 0x80000000, TEST_MSG2);\n \n   CHECK (TEST_MSG, int, 16, 4, PRIx16, expected2, TEST_MSG2);\n   CHECK (TEST_MSG, int, 32, 2, PRIx32, expected2, TEST_MSG2);"}, {"sha": "0845c1d7a3c30567921d74338307f55a7bc8e24b", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vqdmull.c", "status": "modified", "additions": 10, "deletions": 20, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/763b865a17d32ff1d19720e333999de25132d3d4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqdmull.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/763b865a17d32ff1d19720e333999de25132d3d4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqdmull.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqdmull.c?ref=763b865a17d32ff1d19720e333999de25132d3d4", "patch": "@@ -2,19 +2,10 @@\n #include \"arm-neon-ref.h\"\n #include \"compute-ref-data.h\"\n \n-/* Expected values of cumulative_saturation flag.  */\n-int VECT_VAR(expected_cumulative_sat,int,16,4) = 0;\n-int VECT_VAR(expected_cumulative_sat,int,32,2) = 0;\n-\n /* Expected results.  */\n VECT_VAR_DECL(expected,int,32,4) [] = { 0x200, 0x1c2, 0x188, 0x152 };\n VECT_VAR_DECL(expected,int,64,2) [] = { 0x200, 0x1c2 };\n \n-/* Expected values of cumulative_saturation flag when saturation\n-   occurs.  */\n-int VECT_VAR(expected_cumulative_sat2,int,16,4) = 1;\n-int VECT_VAR(expected_cumulative_sat2,int,32,2) = 1;\n-\n /* Expected results when saturation occurs.  */\n VECT_VAR_DECL(expected2,int,32,4) [] = { 0x7fffffff, 0x7fffffff,\n \t\t\t\t\t 0x7fffffff, 0x7fffffff };\n@@ -30,21 +21,20 @@ VECT_VAR_DECL(expected2,int,64,2) [] = { 0x7fffffffffffffff,\n void FNNAME (INSN_NAME) (void)\n {\n   /* Basic test: y=vqdmull(x,x), then store the result.  */\n-#define TEST_VQDMULL2(INSN, T1, T2, W, W2, N, EXPECTED_CUMULATIVE_SAT, CMT)\t\\\n+#define TEST_VQDMULL2(INSN, T1, T2, W, W2, N, CMT)\t\\\n   Set_Neon_Cumulative_Sat(0, VECT_VAR(vector_res, T1, W2, N));\t\\\n   VECT_VAR(vector_res, T1, W2, N) =\t\t\t\t\\\n     INSN##_##T2##W(VECT_VAR(vector, T1, W, N),\t\t\t\\\n \t\t   VECT_VAR(vector2, T1, W, N));\t\t\\\n   vst1q_##T2##W2(VECT_VAR(result, T1, W2, N),\t\t\t\\\n-\t\t VECT_VAR(vector_res, T1, W2, N));\t\t\\\n-  CHECK_CUMULATIVE_SAT(TEST_MSG, T1, W, N, EXPECTED_CUMULATIVE_SAT, CMT)\n+\t\t VECT_VAR(vector_res, T1, W2, N))\n \n   /* Two auxliary macros are necessary to expand INSN.  */\n-#define TEST_VQDMULL1(INSN, T1, T2, W, W2, N, EXPECTED_CUMULATIVE_SAT, CMT)\t\\\n-  TEST_VQDMULL2(INSN, T1, T2, W, W2, N, EXPECTED_CUMULATIVE_SAT, CMT)\n+#define TEST_VQDMULL1(INSN, T1, T2, W, W2, N, CMT)\t\\\n+  TEST_VQDMULL2(INSN, T1, T2, W, W2, N, CMT)\n \n-#define TEST_VQDMULL(T1, T2, W, W2, N, EXPECTED_CUMULATIVE_SAT, CMT)\t\\\n-  TEST_VQDMULL1(INSN_NAME, T1, T2, W, W2, N, EXPECTED_CUMULATIVE_SAT, CMT)\n+#define TEST_VQDMULL(T1, T2, W, W2, N, CMT)\t\\\n+  TEST_VQDMULL1(INSN_NAME, T1, T2, W, W2, N, CMT)\n \n   DECL_VARIABLE(vector, int, 16, 4);\n   DECL_VARIABLE(vector, int, 32, 2);\n@@ -60,8 +50,8 @@ void FNNAME (INSN_NAME) (void)\n   VLOAD(vector2, buffer, , int, s, 16, 4);\n   VLOAD(vector2, buffer, , int, s, 32, 2);\n \n-  TEST_VQDMULL(int, s, 16, 32, 4, expected_cumulative_sat, \"\");\n-  TEST_VQDMULL(int, s, 32, 64, 2, expected_cumulative_sat, \"\");\n+  TEST_VQDMULL(int, s, 16, 32, 4, \"\");\n+  TEST_VQDMULL(int, s, 32, 64, 2, \"\");\n \n   CHECK (TEST_MSG, int, 32, 4, PRIx32, expected, \"\");\n   CHECK (TEST_MSG, int, 64, 2, PRIx64, expected, \"\");\n@@ -72,8 +62,8 @@ void FNNAME (INSN_NAME) (void)\n   VDUP(vector2, , int, s, 32, 2, 0x80000000);\n \n #define TEST_MSG2 \"with saturation\"\n-  TEST_VQDMULL(int, s, 16, 32, 4, expected_cumulative_sat2, TEST_MSG2);\n-  TEST_VQDMULL(int, s, 32, 64, 2, expected_cumulative_sat2, TEST_MSG2);\n+  TEST_VQDMULL(int, s, 16, 32, 4, TEST_MSG2);\n+  TEST_VQDMULL(int, s, 32, 64, 2, TEST_MSG2);\n \n   CHECK (TEST_MSG, int, 32, 4, PRIx32, expected2, TEST_MSG2);\n   CHECK (TEST_MSG, int, 64, 2, PRIx64, expected2, TEST_MSG2);"}, {"sha": "1f860118f80cc23792a5c26d99cdb5c69ccca4ca", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vqdmull_lane.c", "status": "modified", "additions": 10, "deletions": 20, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/763b865a17d32ff1d19720e333999de25132d3d4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqdmull_lane.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/763b865a17d32ff1d19720e333999de25132d3d4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqdmull_lane.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqdmull_lane.c?ref=763b865a17d32ff1d19720e333999de25132d3d4", "patch": "@@ -2,19 +2,10 @@\n #include \"arm-neon-ref.h\"\n #include \"compute-ref-data.h\"\n \n-/* Expected values of cumulative_saturation flag.  */\n-int VECT_VAR(expected_cumulative_sat,int,16,4) = 0;\n-int VECT_VAR(expected_cumulative_sat,int,32,2) = 0;\n-\n /* Expected results.  */\n VECT_VAR_DECL(expected,int,32,4) [] = { 0x8000, 0x8000, 0x8000, 0x8000 };\n VECT_VAR_DECL(expected,int,64,2) [] = { 0x4000, 0x4000 };\n \n-/* Expected values of cumulative_saturation flag when saturation\n-   occurs.  */\n-int VECT_VAR(expected_cumulative_sat2,int,16,4) = 1;\n-int VECT_VAR(expected_cumulative_sat2,int,32,2) = 1;\n-\n /* Expected results when saturation occurs.  */\n VECT_VAR_DECL(expected2,int,32,4) [] = { 0x7fffffff, 0x7fffffff,\n \t\t\t\t\t 0x7fffffff, 0x7fffffff };\n@@ -32,22 +23,21 @@ void FNNAME (INSN_NAME) (void)\n   int i;\n \n   /* vector_res = vqdmull_lane(vector,vector2,lane), then store the result.  */\n-#define TEST_VQDMULL_LANE2(INSN, T1, T2, W, W2, N, L, EXPECTED_CUMULATIVE_SAT, CMT) \\\n+#define TEST_VQDMULL_LANE2(INSN, T1, T2, W, W2, N, L, CMT) \\\n   Set_Neon_Cumulative_Sat(0, VECT_VAR(vector_res, T1, W2, N));\t\t\\\n   VECT_VAR(vector_res, T1, W2, N) =\t\t\t\t\t\\\n     INSN##_lane_##T2##W(VECT_VAR(vector, T1, W, N),\t\t\t\\\n \t\t\tVECT_VAR(vector2, T1, W, N),\t\t\t\\\n \t\t\tL);\t\t\t\t\t\t\\\n   vst1q_##T2##W2(VECT_VAR(result, T1, W2, N),\t\t\t\t\\\n-\t\t VECT_VAR(vector_res, T1, W2, N));\t\t\t\\\n-  CHECK_CUMULATIVE_SAT(TEST_MSG, T1, W, N, EXPECTED_CUMULATIVE_SAT, CMT)\n+\t\t VECT_VAR(vector_res, T1, W2, N))\n \n   /* Two auxliary macros are necessary to expand INSN.  */\n-#define TEST_VQDMULL_LANE1(INSN, T1, T2, W, W2, N, L, EXPECTED_CUMULATIVE_SAT, CMT) \\\n-  TEST_VQDMULL_LANE2(INSN, T1, T2, W, W2, N, L, EXPECTED_CUMULATIVE_SAT, CMT)\n+#define TEST_VQDMULL_LANE1(INSN, T1, T2, W, W2, N, L, CMT) \\\n+  TEST_VQDMULL_LANE2(INSN, T1, T2, W, W2, N, L, CMT)\n \n-#define TEST_VQDMULL_LANE(T1, T2, W, W2, N, L, EXPECTED_CUMULATIVE_SAT, CMT) \\\n-  TEST_VQDMULL_LANE1(INSN_NAME, T1, T2, W, W2, N, L, EXPECTED_CUMULATIVE_SAT, CMT)\n+#define TEST_VQDMULL_LANE(T1, T2, W, W2, N, L, CMT) \\\n+  TEST_VQDMULL_LANE1(INSN_NAME, T1, T2, W, W2, N, L, CMT)\n \n   DECL_VARIABLE(vector, int, 16, 4);\n   DECL_VARIABLE(vector, int, 32, 2);\n@@ -68,8 +58,8 @@ void FNNAME (INSN_NAME) (void)\n   VDUP(vector2, , int, s, 32, 2, 0x2);\n \n   /* Choose lane arbitrarily.  */\n-  TEST_VQDMULL_LANE(int, s, 16, 32, 4, 2, expected_cumulative_sat, \"\");\n-  TEST_VQDMULL_LANE(int, s, 32, 64, 2, 1, expected_cumulative_sat, \"\");\n+  TEST_VQDMULL_LANE(int, s, 16, 32, 4, 2, \"\");\n+  TEST_VQDMULL_LANE(int, s, 32, 64, 2, 1, \"\");\n \n   CHECK(TEST_MSG, int, 32, 4, PRIx32, expected, \"\");\n   CHECK(TEST_MSG, int, 64, 2, PRIx64, expected, \"\");\n@@ -80,8 +70,8 @@ void FNNAME (INSN_NAME) (void)\n   VDUP(vector2, , int, s, 32, 2, 0x80000000);\n \n #define TEST_MSG2 \"with saturation\"\n-  TEST_VQDMULL_LANE(int, s, 16, 32, 4, 2, expected_cumulative_sat2, TEST_MSG2);\n-  TEST_VQDMULL_LANE(int, s, 32, 64, 2, 1, expected_cumulative_sat2, TEST_MSG2);\n+  TEST_VQDMULL_LANE(int, s, 16, 32, 4, 2, TEST_MSG2);\n+  TEST_VQDMULL_LANE(int, s, 32, 64, 2, 1, TEST_MSG2);\n \n   CHECK(TEST_MSG, int, 32, 4, PRIx32, expected2, TEST_MSG2);\n   CHECK(TEST_MSG, int, 64, 2, PRIx64, expected2, TEST_MSG2);"}, {"sha": "e618a361480610918dbda24e2254705414977fd2", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vqdmull_n.c", "status": "modified", "additions": 10, "deletions": 19, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/763b865a17d32ff1d19720e333999de25132d3d4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqdmull_n.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/763b865a17d32ff1d19720e333999de25132d3d4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqdmull_n.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqdmull_n.c?ref=763b865a17d32ff1d19720e333999de25132d3d4", "patch": "@@ -2,20 +2,12 @@\n #include \"arm-neon-ref.h\"\n #include \"compute-ref-data.h\"\n \n-/* Expected values of cumulative_saturation flag.  */\n-int VECT_VAR(expected_cumulative_sat,int,16,4) = 0;\n-int VECT_VAR(expected_cumulative_sat,int,32,2) = 0;\n \n /* Expected results.  */\n VECT_VAR_DECL(expected,int,32,4) [] = { 0x44000, 0x44000,\n \t\t\t\t\t0x44000, 0x44000 };\n VECT_VAR_DECL(expected,int,64,2) [] = { 0xaa000, 0xaa000 };\n \n-/* Expected values of cumulative_saturation flag when saturation\n-   occurs.  */\n-int VECT_VAR(expected_cumulative_sat2,int,16,4) = 1;\n-int VECT_VAR(expected_cumulative_sat2,int,32,2) = 1;\n-\n /* Expected results when saturation occurs.  */\n VECT_VAR_DECL(expected2,int,32,4) [] = { 0x7fffffff, 0x7fffffff,\n \t\t\t\t\t 0x7fffffff, 0x7fffffff };\n@@ -33,21 +25,20 @@ void FNNAME (INSN_NAME) (void)\n   int i;\n \n   /* vector_res = vqdmull_n(vector,val), then store the result.  */\n-#define TEST_VQDMULL_N2(INSN, T1, T2, W, W2, N, L, EXPECTED_CUMULATIVE_SAT, CMT) \\\n+#define TEST_VQDMULL_N2(INSN, T1, T2, W, W2, N, L, CMT) \\\n   Set_Neon_Cumulative_Sat(0, VECT_VAR(vector_res, T1, W2, N));\t\\\n   VECT_VAR(vector_res, T1, W2, N) =\t\t\t\t\\\n     INSN##_n_##T2##W(VECT_VAR(vector, T1, W, N),\t\t\\\n \t\t     L);\t\t\t\t\t\\\n   vst1q_##T2##W2(VECT_VAR(result, T1, W2, N),\t\t\t\\\n-\t\t VECT_VAR(vector_res, T1, W2, N));\t\t\\\n-  CHECK_CUMULATIVE_SAT(TEST_MSG, T1, W, N, EXPECTED_CUMULATIVE_SAT, CMT)\n+\t\t VECT_VAR(vector_res, T1, W2, N))\n \n   /* Two auxliary macros are necessary to expand INSN.  */\n-#define TEST_VQDMULL_N1(INSN, T1, T2, W, W2, N, L, EXPECTED_CUMULATIVE_SAT, CMT) \\\n-  TEST_VQDMULL_N2(INSN, T1, T2, W, W2, N, L, EXPECTED_CUMULATIVE_SAT, CMT)\n+#define TEST_VQDMULL_N1(INSN, T1, T2, W, W2, N, L, CMT) \\\n+  TEST_VQDMULL_N2(INSN, T1, T2, W, W2, N, L, CMT)\n \n-#define TEST_VQDMULL_N(T1, T2, W, W2, N, L, EXPECTED_CUMULATIVE_SAT, CMT) \\\n-  TEST_VQDMULL_N1(INSN_NAME, T1, T2, W, W2, N, L, EXPECTED_CUMULATIVE_SAT, CMT)\n+#define TEST_VQDMULL_N(T1, T2, W, W2, N, L, CMT) \\\n+  TEST_VQDMULL_N1(INSN_NAME, T1, T2, W, W2, N, L, CMT)\n \n   DECL_VARIABLE(vector, int, 16, 4);\n   DECL_VARIABLE(vector, int, 32, 2);\n@@ -68,8 +59,8 @@ void FNNAME (INSN_NAME) (void)\n   VDUP(vector2, , int, s, 32, 2, 0x2);\n \n   /* Choose multiplier arbitrarily.  */\n-  TEST_VQDMULL_N(int, s, 16, 32, 4, 0x22, expected_cumulative_sat, \"\");\n-  TEST_VQDMULL_N(int, s, 32, 64, 2, 0x55, expected_cumulative_sat, \"\");\n+  TEST_VQDMULL_N(int, s, 16, 32, 4, 0x22, \"\");\n+  TEST_VQDMULL_N(int, s, 32, 64, 2, 0x55, \"\");\n \n   CHECK(TEST_MSG, int, 32, 4, PRIx32, expected, \"\");\n   CHECK(TEST_MSG, int, 64, 2, PRIx64, expected, \"\");\n@@ -78,8 +69,8 @@ void FNNAME (INSN_NAME) (void)\n   VDUP(vector, , int, s, 32, 2, 0x80000000);\n \n #define TEST_MSG2 \"with saturation\"\n-  TEST_VQDMULL_N(int, s, 16, 32, 4, 0x8000, expected_cumulative_sat2, TEST_MSG2);\n-  TEST_VQDMULL_N(int, s, 32, 64, 2, 0x80000000, expected_cumulative_sat2, TEST_MSG2);\n+  TEST_VQDMULL_N(int, s, 16, 32, 4, 0x8000, TEST_MSG2);\n+  TEST_VQDMULL_N(int, s, 32, 64, 2, 0x80000000, TEST_MSG2);\n \n   CHECK(TEST_MSG, int, 32, 4, PRIx32, expected2, TEST_MSG2);\n   CHECK(TEST_MSG, int, 64, 2, PRIx64, expected2, TEST_MSG2);"}, {"sha": "3cb874c7cc79b4f5111f0a4261c880fa276de958", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vqmovn.c", "status": "modified", "additions": 16, "deletions": 33, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/763b865a17d32ff1d19720e333999de25132d3d4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqmovn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/763b865a17d32ff1d19720e333999de25132d3d4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqmovn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqmovn.c?ref=763b865a17d32ff1d19720e333999de25132d3d4", "patch": "@@ -2,14 +2,6 @@\n #include \"arm-neon-ref.h\"\n #include \"compute-ref-data.h\"\n \n-/* Expected values of cumulative_saturation flag.  */\n-int VECT_VAR(expected_cumulative_sat,int,8,8) = 0;\n-int VECT_VAR(expected_cumulative_sat,int,16,4) = 0;\n-int VECT_VAR(expected_cumulative_sat,int,32,2) = 0;\n-int VECT_VAR(expected_cumulative_sat,uint,8,8) = 0;\n-int VECT_VAR(expected_cumulative_sat,uint,16,4) = 0;\n-int VECT_VAR(expected_cumulative_sat,uint,32,2) = 0;\n-\n /* Expected results.  */\n VECT_VAR_DECL(expected,int,8,8) [] = { 0x12, 0x12, 0x12, 0x12,\n \t\t\t\t       0x12, 0x12, 0x12, 0x12 };\n@@ -20,14 +12,6 @@ VECT_VAR_DECL(expected,uint,8,8) [] = { 0x82, 0x82, 0x82, 0x82,\n VECT_VAR_DECL(expected,uint,16,4) [] = { 0x8765, 0x8765, 0x8765, 0x8765 };\n VECT_VAR_DECL(expected,uint,32,2) [] = { 0x87654321, 0x87654321 };\n \n-/* Expected values of cumulative_saturation flag when saturation occurs.  */\n-int VECT_VAR(expected_cumulative_sat1,int,8,8) = 1;\n-int VECT_VAR(expected_cumulative_sat1,int,16,4) = 1;\n-int VECT_VAR(expected_cumulative_sat1,int,32,2) = 1;\n-int VECT_VAR(expected_cumulative_sat1,uint,8,8) = 1;\n-int VECT_VAR(expected_cumulative_sat1,uint,16,4) = 1;\n-int VECT_VAR(expected_cumulative_sat1,uint,32,2) = 1;\n-\n /* Expected results when saturation occurs.  */\n VECT_VAR_DECL(expected1,int,8,8) [] = { 0x7f, 0x7f, 0x7f, 0x7f,\n \t\t\t\t\t0x7f, 0x7f, 0x7f, 0x7f };\n@@ -47,16 +31,15 @@ VECT_VAR_DECL(expected1,uint,32,2) [] = { 0xffffffff, 0xffffffff };\n FNNAME (INSN_NAME)\n {\n   /* Basic test: y=OP(x), then store the result.  */\n-#define TEST_UNARY_OP1(INSN, T1, T2, W, W2, N, EXPECTED_CUMULATIVE_SAT, CMT) \\\n+#define TEST_UNARY_OP1(INSN, T1, T2, W, W2, N, CMT) \\\n   Set_Neon_Cumulative_Sat(0, VECT_VAR(vector_res, T1, W, N));\t\t\\\n   VECT_VAR(vector_res, T1, W, N) =\t\t\t\t\t\\\n     INSN##_##T2##W2(VECT_VAR(vector, T1, W2, N));\t\t\t\\\n   vst1##_##T2##W(VECT_VAR(result, T1, W, N),\t\t\t\t\\\n-\t\t VECT_VAR(vector_res, T1, W, N));\t\t\t\\\n-  CHECK_CUMULATIVE_SAT(TEST_MSG, T1, W, N, EXPECTED_CUMULATIVE_SAT, CMT)\n+\t\t VECT_VAR(vector_res, T1, W, N))\n \n-#define TEST_UNARY_OP(INSN, T1, T2, W, W2, N, EXPECTED_CUMULATIVE_SAT, CMT) \\\n-  TEST_UNARY_OP1(INSN, T1, T2, W, W2, N, EXPECTED_CUMULATIVE_SAT, CMT)\n+#define TEST_UNARY_OP(INSN, T1, T2, W, W2, N, CMT) \\\n+  TEST_UNARY_OP1(INSN, T1, T2, W, W2, N, CMT)\n \n   /* No need for 64 bits variants.  */\n   DECL_VARIABLE(vector, int, 16, 8);\n@@ -85,12 +68,12 @@ FNNAME (INSN_NAME)\n \n   /* Apply a unary operator named INSN_NAME.  */\n #define CMT \"\"\n-  TEST_UNARY_OP(INSN_NAME, int, s, 8, 16, 8, expected_cumulative_sat, CMT);\n-  TEST_UNARY_OP(INSN_NAME, int, s, 16, 32, 4, expected_cumulative_sat, CMT);\n-  TEST_UNARY_OP(INSN_NAME, int, s, 32, 64, 2, expected_cumulative_sat, CMT);\n-  TEST_UNARY_OP(INSN_NAME, uint, u, 8, 16, 8, expected_cumulative_sat, CMT);\n-  TEST_UNARY_OP(INSN_NAME, uint, u, 16, 32, 4, expected_cumulative_sat, CMT);\n-  TEST_UNARY_OP(INSN_NAME, uint, u, 32, 64, 2, expected_cumulative_sat, CMT);\n+  TEST_UNARY_OP(INSN_NAME, int, s, 8, 16, 8, CMT);\n+  TEST_UNARY_OP(INSN_NAME, int, s, 16, 32, 4, CMT);\n+  TEST_UNARY_OP(INSN_NAME, int, s, 32, 64, 2, CMT);\n+  TEST_UNARY_OP(INSN_NAME, uint, u, 8, 16, 8, CMT);\n+  TEST_UNARY_OP(INSN_NAME, uint, u, 16, 32, 4, CMT);\n+  TEST_UNARY_OP(INSN_NAME, uint, u, 32, 64, 2, CMT);\n \n   CHECK(TEST_MSG, int, 8, 8, PRIx8, expected, CMT);\n   CHECK(TEST_MSG, int, 16, 4, PRIx16, expected, CMT);\n@@ -112,12 +95,12 @@ FNNAME (INSN_NAME)\n   /* Apply a unary operator named INSN_NAME.  */\n #undef CMT\n #define CMT \" (with saturation)\"\n-  TEST_UNARY_OP(INSN_NAME, int, s, 8, 16, 8, expected_cumulative_sat1, CMT);\n-  TEST_UNARY_OP(INSN_NAME, int, s, 16, 32, 4, expected_cumulative_sat1, CMT);\n-  TEST_UNARY_OP(INSN_NAME, int, s, 32, 64, 2, expected_cumulative_sat1, CMT);\n-  TEST_UNARY_OP(INSN_NAME, uint, u, 8, 16, 8, expected_cumulative_sat1, CMT);\n-  TEST_UNARY_OP(INSN_NAME, uint, u, 16, 32, 4, expected_cumulative_sat1, CMT);\n-  TEST_UNARY_OP(INSN_NAME, uint, u, 32, 64, 2, expected_cumulative_sat1, CMT);\n+  TEST_UNARY_OP(INSN_NAME, int, s, 8, 16, 8, CMT);\n+  TEST_UNARY_OP(INSN_NAME, int, s, 16, 32, 4, CMT);\n+  TEST_UNARY_OP(INSN_NAME, int, s, 32, 64, 2, CMT);\n+  TEST_UNARY_OP(INSN_NAME, uint, u, 8, 16, 8, CMT);\n+  TEST_UNARY_OP(INSN_NAME, uint, u, 16, 32, 4, CMT);\n+  TEST_UNARY_OP(INSN_NAME, uint, u, 32, 64, 2, CMT);\n \n   CHECK(TEST_MSG, int, 8, 8, PRIx8, expected1, CMT);\n   CHECK(TEST_MSG, int, 16, 4, PRIx16, expected1, CMT);"}, {"sha": "f4c4e31728d1f3a45e8f80ac9ca6735b3afb5b25", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vqmovun.c", "status": "modified", "additions": 10, "deletions": 21, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/763b865a17d32ff1d19720e333999de25132d3d4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqmovun.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/763b865a17d32ff1d19720e333999de25132d3d4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqmovun.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqmovun.c?ref=763b865a17d32ff1d19720e333999de25132d3d4", "patch": "@@ -2,22 +2,12 @@\n #include \"arm-neon-ref.h\"\n #include \"compute-ref-data.h\"\n \n-/* Expected values of cumulative_saturation flag.  */\n-int VECT_VAR(expected_cumulative_sat,uint,8,8) = 0;\n-int VECT_VAR(expected_cumulative_sat,uint,16,4) = 0;\n-int VECT_VAR(expected_cumulative_sat,uint,32,2) = 0;\n-\n /* Expected results.  */\n VECT_VAR_DECL(expected,uint,8,8) [] = { 0x34, 0x34, 0x34, 0x34,\n \t\t\t\t\t0x34, 0x34, 0x34, 0x34 };\n VECT_VAR_DECL(expected,uint,16,4) [] = { 0x5678, 0x5678, 0x5678, 0x5678 };\n VECT_VAR_DECL(expected,uint,32,2) [] = { 0x12345678, 0x12345678 };\n \n-/* Expected values of cumulative_saturation flag with negative input.  */\n-int VECT_VAR(expected_cumulative_sat_neg,uint,8,8) = 1;\n-int VECT_VAR(expected_cumulative_sat_neg,uint,16,4) = 1;\n-int VECT_VAR(expected_cumulative_sat_neg,uint,32,2) = 1;\n-\n /* Expected results with negative input.  */\n VECT_VAR_DECL(expected_neg,uint,8,8) [] = { 0x0, 0x0, 0x0, 0x0,\n \t\t\t\t\t    0x0, 0x0, 0x0, 0x0 };\n@@ -33,16 +23,15 @@ VECT_VAR_DECL(expected_neg,uint,32,2) [] = { 0x0, 0x0 };\n FNNAME (INSN_NAME)\n {\n   /* Basic test: y=OP(x), then store the result.  */\n-#define TEST_UNARY_OP1(INSN, T1, T2, W, W2, N, EXPECTED_CUMULATIVE_SAT, CMT) \\\n+#define TEST_UNARY_OP1(INSN, T1, T2, W, W2, N, CMT) \\\n   Set_Neon_Cumulative_Sat(0, VECT_VAR(vector_res, T1, W, N));\t\t\\\n   VECT_VAR(vector_res, T1, W, N) =\t\t\t\t\t\\\n     INSN##_s##W2(VECT_VAR(vector, int, W2, N));\t\t\t\t\\\n   vst1##_##T2##W(VECT_VAR(result, T1, W, N),\t\t\t\t\\\n-\t\t VECT_VAR(vector_res, T1, W, N));\t\t\t\\\n-  CHECK_CUMULATIVE_SAT(TEST_MSG, T1, W, N, EXPECTED_CUMULATIVE_SAT, CMT)\n+\t\t VECT_VAR(vector_res, T1, W, N))\n \n-#define TEST_UNARY_OP(INSN, T1, T2, W, W2, N, EXPECTED_CUMULATIVE_SAT, CMT) \\\n-  TEST_UNARY_OP1(INSN, T1, T2, W, W2, N, EXPECTED_CUMULATIVE_SAT, CMT)\n+#define TEST_UNARY_OP(INSN, T1, T2, W, W2, N, CMT) \\\n+  TEST_UNARY_OP1(INSN, T1, T2, W, W2, N, CMT)\n \n   DECL_VARIABLE(vector, int, 16, 8);\n   DECL_VARIABLE(vector, int, 32, 4);\n@@ -61,9 +50,9 @@ FNNAME (INSN_NAME)\n \n   /* Apply a unary operator named INSN_NAME.  */\n #define CMT \"\"\n-  TEST_UNARY_OP(INSN_NAME, uint, u, 8, 16, 8, expected_cumulative_sat, CMT);\n-  TEST_UNARY_OP(INSN_NAME, uint, u, 16, 32, 4, expected_cumulative_sat, CMT);\n-  TEST_UNARY_OP(INSN_NAME, uint, u, 32, 64, 2, expected_cumulative_sat, CMT);\n+  TEST_UNARY_OP(INSN_NAME, uint, u, 8, 16, 8, CMT);\n+  TEST_UNARY_OP(INSN_NAME, uint, u, 16, 32, 4, CMT);\n+  TEST_UNARY_OP(INSN_NAME, uint, u, 32, 64, 2, CMT);\n \n   CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected, CMT);\n   CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected, CMT);\n@@ -77,9 +66,9 @@ FNNAME (INSN_NAME)\n   /* Apply a unary operator named INSN_NAME.  */\n #undef CMT\n #define CMT \" (negative input)\"\n-  TEST_UNARY_OP(INSN_NAME, uint, u, 8, 16, 8, expected_cumulative_sat_neg, CMT);\n-  TEST_UNARY_OP(INSN_NAME, uint, u, 16, 32, 4, expected_cumulative_sat_neg, CMT);\n-  TEST_UNARY_OP(INSN_NAME, uint, u, 32, 64, 2, expected_cumulative_sat_neg, CMT);\n+  TEST_UNARY_OP(INSN_NAME, uint, u, 8, 16, 8, CMT);\n+  TEST_UNARY_OP(INSN_NAME, uint, u, 16, 32, 4, CMT);\n+  TEST_UNARY_OP(INSN_NAME, uint, u, 32, 64, 2, CMT);\n \n   CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_neg, CMT);\n   CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected_neg, CMT);"}, {"sha": "f700f2831addaaecfcd70ebc7f306438b18d161e", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vqneg.c", "status": "modified", "additions": 6, "deletions": 23, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/763b865a17d32ff1d19720e333999de25132d3d4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqneg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/763b865a17d32ff1d19720e333999de25132d3d4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqneg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqneg.c?ref=763b865a17d32ff1d19720e333999de25132d3d4", "patch": "@@ -19,14 +19,6 @@ VECT_VAR_DECL(expected,int,16,8) [] = { 0x10, 0xf, 0xe, 0xd,\n \t\t\t\t\t0xc, 0xb, 0xa, 0x9 };\n VECT_VAR_DECL(expected,int,32,4) [] = { 0x10, 0xf, 0xe, 0xd };\n \n-/* Expected values of cumulative_saturation flag.  */\n-int VECT_VAR(expected_cumulative_sat,int,8,8) = 0;\n-int VECT_VAR(expected_cumulative_sat,int,16,4) = 0;\n-int VECT_VAR(expected_cumulative_sat,int,32,2) = 0;\n-int VECT_VAR(expected_cumulative_sat,int,8,16) = 0;\n-int VECT_VAR(expected_cumulative_sat,int,16,8) = 0;\n-int VECT_VAR(expected_cumulative_sat,int,32,4) = 0;\n-\n /* Expected results when input is the min negative value of the type.  */\n VECT_VAR_DECL(expected_min_neg,int,8,8) [] = { 0x7f, 0x7f, 0x7f, 0x7f,\n \t\t\t\t\t       0x7f, 0x7f, 0x7f, 0x7f };\n@@ -44,15 +36,6 @@ VECT_VAR_DECL(expected_min_neg,int,16,8) [] = { 0x7fff, 0x7fff,\n VECT_VAR_DECL(expected_min_neg,int,32,4) [] = { 0x7fffffff, 0x7fffffff,\n \t\t\t\t\t\t0x7fffffff, 0x7fffffff };\n \n-/* Expected values of cumulative_saturation flag when input is the min\n-   negative value of the type.  */\n-int VECT_VAR(expected_cumulative_sat_min_neg,int,8,8) = 1;\n-int VECT_VAR(expected_cumulative_sat_min_neg,int,16,4) = 1;\n-int VECT_VAR(expected_cumulative_sat_min_neg,int,32,2) = 1;\n-int VECT_VAR(expected_cumulative_sat_min_neg,int,8,16) = 1;\n-int VECT_VAR(expected_cumulative_sat_min_neg,int,16,8) = 1;\n-int VECT_VAR(expected_cumulative_sat_min_neg,int,32,4) = 1;\n-\n void vqneg_extra()\n {\n   /* No need for 64 bits variants.  */\n@@ -82,12 +65,12 @@ void vqneg_extra()\n   VDUP(vector, q, int, s, 32, 4, 0x80000000);\n \n #define MSG \"min negative input\"\n-  TEST_UNARY_SAT_OP(INSN_NAME, , int, s, 8, 8, expected_cumulative_sat_min_neg, MSG);\n-  TEST_UNARY_SAT_OP(INSN_NAME, , int, s, 16, 4, expected_cumulative_sat_min_neg, MSG);\n-  TEST_UNARY_SAT_OP(INSN_NAME, , int, s, 32, 2, expected_cumulative_sat_min_neg, MSG);\n-  TEST_UNARY_SAT_OP(INSN_NAME, q, int, s, 8, 16, expected_cumulative_sat_min_neg, MSG);\n-  TEST_UNARY_SAT_OP(INSN_NAME, q, int, s, 16, 8, expected_cumulative_sat_min_neg, MSG);\n-  TEST_UNARY_SAT_OP(INSN_NAME, q, int, s, 32, 4, expected_cumulative_sat_min_neg, MSG);\n+  TEST_UNARY_SAT_OP(INSN_NAME, , int, s, 8, 8, MSG);\n+  TEST_UNARY_SAT_OP(INSN_NAME, , int, s, 16, 4, MSG);\n+  TEST_UNARY_SAT_OP(INSN_NAME, , int, s, 32, 2, MSG);\n+  TEST_UNARY_SAT_OP(INSN_NAME, q, int, s, 8, 16, MSG);\n+  TEST_UNARY_SAT_OP(INSN_NAME, q, int, s, 16, 8, MSG);\n+  TEST_UNARY_SAT_OP(INSN_NAME, q, int, s, 32, 4, MSG);\n \n   CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_min_neg, MSG);\n   CHECK(TEST_MSG, int, 16, 4, PRIx16, expected_min_neg, MSG);"}, {"sha": "4b2b7124922b660c6c669bd533cc44432c5d5fa2", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vqrdmlXh.inc", "status": "modified", "additions": 18, "deletions": 24, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/763b865a17d32ff1d19720e333999de25132d3d4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvqrdmlXh.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/763b865a17d32ff1d19720e333999de25132d3d4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvqrdmlXh.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvqrdmlXh.inc?ref=763b865a17d32ff1d19720e333999de25132d3d4", "patch": "@@ -5,23 +5,21 @@ void FNNAME (INSN) (void)\n {\n   /* vector_res = vqrdmlah (vector, vector2, vector3, vector4),\n      then store the result.  */\n-#define TEST_VQRDMLAH2(INSN, Q, T1, T2, W, N, EXPECTED_CUMULATIVE_SAT, CMT) \\\n+#define TEST_VQRDMLAH2(INSN, Q, T1, T2, W, N, CMT) \\\n   Set_Neon_Cumulative_Sat (0, VECT_VAR (vector_res, T1, W, N));\t\t\\\n   VECT_VAR (vector_res, T1, W, N) =\t\t\t\t\t\\\n     INSN##Q##_##T2##W (VECT_VAR (vector, T1, W, N),\t\t\t\\\n \t\t       VECT_VAR (vector2, T1, W, N),\t\t\t\\\n \t\t       VECT_VAR (vector3, T1, W, N));\t\t\t\\\n   vst1##Q##_##T2##W (VECT_VAR (result, T1, W, N),\t\t\t\\\n-\t\t     VECT_VAR (vector_res, T1, W, N));\t\t\t\\\n-  CHECK_CUMULATIVE_SAT (TEST_MSG, T1, W, N,\t\t\t\t\\\n-\t\t\tEXPECTED_CUMULATIVE_SAT, CMT)\n+\t\t     VECT_VAR (vector_res, T1, W, N))\n \n   /* Two auxliary macros are necessary to expand INSN.  */\n-#define TEST_VQRDMLAH1(INSN, Q, T1, T2, W, N, EXPECTED_CUMULATIVE_SAT, CMT) \\\n-  TEST_VQRDMLAH2 (INSN, Q, T1, T2, W, N, EXPECTED_CUMULATIVE_SAT, CMT)\n+#define TEST_VQRDMLAH1(INSN, Q, T1, T2, W, N, CMT) \\\n+  TEST_VQRDMLAH2 (INSN, Q, T1, T2, W, N, CMT)\n \n-#define TEST_VQRDMLAH(Q, T1, T2, W, N, EXPECTED_CUMULATIVE_SAT, CMT)\t\\\n-  TEST_VQRDMLAH1 (INSN, Q, T1, T2, W, N, EXPECTED_CUMULATIVE_SAT, CMT)\n+#define TEST_VQRDMLAH(Q, T1, T2, W, N, CMT)\t\\\n+  TEST_VQRDMLAH1 (INSN, Q, T1, T2, W, N, CMT)\n \n   DECL_VARIABLE (vector, int, 16, 4);\n   DECL_VARIABLE (vector, int, 32, 2);\n@@ -63,10 +61,10 @@ void FNNAME (INSN) (void)\n   VDUP (vector3, q, int, s, 32, 4, 0x22);\n \n #define CMT \"\"\n-  TEST_VQRDMLAH ( , int, s, 16, 4, expected_cumulative_sat, CMT);\n-  TEST_VQRDMLAH ( , int, s, 32, 2, expected_cumulative_sat, CMT);\n-  TEST_VQRDMLAH (q, int, s, 16, 8, expected_cumulative_sat, CMT);\n-  TEST_VQRDMLAH (q, int, s, 32, 4, expected_cumulative_sat, CMT);\n+  TEST_VQRDMLAH ( , int, s, 16, 4, CMT);\n+  TEST_VQRDMLAH ( , int, s, 32, 2, CMT);\n+  TEST_VQRDMLAH (q, int, s, 16, 8, CMT);\n+  TEST_VQRDMLAH (q, int, s, 32, 4, CMT);\n \n   CHECK (TEST_MSG, int, 16, 4, PRIx16, expected, CMT);\n   CHECK (TEST_MSG, int, 32, 2, PRIx32, expected, CMT);\n@@ -89,10 +87,10 @@ void FNNAME (INSN) (void)\n   VDUP (vector3, q, int, s, 16, 8, 0x8000);\n   VDUP (vector3, q, int, s, 32, 4, 0x80000000);\n \n-  TEST_VQRDMLAH ( , int, s, 16, 4, expected_cumulative_sat_mul, TEST_MSG_MUL);\n-  TEST_VQRDMLAH ( , int, s, 32, 2, expected_cumulative_sat_mul, TEST_MSG_MUL);\n-  TEST_VQRDMLAH (q, int, s, 16, 8, expected_cumulative_sat_mul, TEST_MSG_MUL);\n-  TEST_VQRDMLAH (q, int, s, 32, 4, expected_cumulative_sat_mul, TEST_MSG_MUL);\n+  TEST_VQRDMLAH ( , int, s, 16, 4, TEST_MSG_MUL);\n+  TEST_VQRDMLAH ( , int, s, 32, 2, TEST_MSG_MUL);\n+  TEST_VQRDMLAH (q, int, s, 16, 8, TEST_MSG_MUL);\n+  TEST_VQRDMLAH (q, int, s, 32, 4, TEST_MSG_MUL);\n \n   CHECK (TEST_MSG, int, 16, 4, PRIx16, expected_mul, TEST_MSG_MUL);\n   CHECK (TEST_MSG, int, 32, 2, PRIx32, expected_mul, TEST_MSG_MUL);\n@@ -115,14 +113,10 @@ void FNNAME (INSN) (void)\n   VDUP (vector3, q, int, s, 16, 8, 0x8001);\n   VDUP (vector3, q, int, s, 32, 4, 0x80000001);\n \n-  TEST_VQRDMLAH ( , int, s, 16, 4, expected_cumulative_sat_round, \\\n-\t\t TEST_MSG_ROUND);\n-  TEST_VQRDMLAH ( , int, s, 32, 2, expected_cumulative_sat_round, \\\n-\t\t TEST_MSG_ROUND);\n-  TEST_VQRDMLAH (q, int, s, 16, 8, expected_cumulative_sat_round, \\\n-\t\t TEST_MSG_ROUND);\n-  TEST_VQRDMLAH (q, int, s, 32, 4, expected_cumulative_sat_round, \\\n-\t\t TEST_MSG_ROUND);\n+  TEST_VQRDMLAH ( , int, s, 16, 4, TEST_MSG_ROUND);\n+  TEST_VQRDMLAH ( , int, s, 32, 2, TEST_MSG_ROUND);\n+  TEST_VQRDMLAH (q, int, s, 16, 8, TEST_MSG_ROUND);\n+  TEST_VQRDMLAH (q, int, s, 32, 4, TEST_MSG_ROUND);\n \n   CHECK (TEST_MSG, int, 16, 4, PRIx16, expected_round, TEST_MSG_ROUND);\n   CHECK (TEST_MSG, int, 32, 2, PRIx32, expected_round, TEST_MSG_ROUND);"}, {"sha": "204a2e6c2b696b7da34229d09ff7a3481ed742f5", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vqrdmlXh_lane.inc", "status": "modified", "additions": 18, "deletions": 27, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/763b865a17d32ff1d19720e333999de25132d3d4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvqrdmlXh_lane.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/763b865a17d32ff1d19720e333999de25132d3d4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvqrdmlXh_lane.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvqrdmlXh_lane.inc?ref=763b865a17d32ff1d19720e333999de25132d3d4", "patch": "@@ -6,27 +6,26 @@ void FNNAME (INSN) (void)\n   /* vector_res = vqrdmlXh_lane (vector, vector2, vector3, lane),\n      then store the result.  */\n #define TEST_VQRDMLXH_LANE2(INSN, Q, T1, T2, W, N, N2, L,\t\t\\\n-\t\t\t    EXPECTED_CUMULATIVE_SAT, CMT)\t\t\\\n+\t\t\t    CMT)\t\t\\\n   Set_Neon_Cumulative_Sat (0, VECT_VAR (vector_res, T1, W, N));\t\t\\\n   VECT_VAR (vector_res, T1, W, N) =\t\t\t\t\t\\\n     INSN##Q##_lane_##T2##W (VECT_VAR (vector, T1, W, N),\t\t\\\n \t\t\t    VECT_VAR (vector2, T1, W, N),\t\t\\\n \t\t\t    VECT_VAR (vector3, T1, W, N2),\t\t\\\n \t\t\t    L);\t\t\t\t\t\t\\\n   vst1##Q##_##T2##W (VECT_VAR (result, T1, W, N),\t\t\t\\\n-\t\t     VECT_VAR (vector_res, T1, W, N));\t\t\t\\\n-  CHECK_CUMULATIVE_SAT (TEST_MSG, T1, W, N, EXPECTED_CUMULATIVE_SAT, CMT)\n+\t\t     VECT_VAR (vector_res, T1, W, N))\n \n   /* Two auxliary macros are necessary to expand INSN.  */\n #define TEST_VQRDMLXH_LANE1(INSN, Q, T1, T2, W, N, N2, L,\t\\\n-\t\t\t    EXPECTED_CUMULATIVE_SAT, CMT)\t\\\n+\t\t\t    CMT)\t\\\n   TEST_VQRDMLXH_LANE2 (INSN, Q, T1, T2, W, N, N2, L,\t\t\\\n-\t\t       EXPECTED_CUMULATIVE_SAT, CMT)\n+\t\t       CMT)\n \n #define TEST_VQRDMLXH_LANE(Q, T1, T2, W, N, N2, L,\t\t\\\n-\t\t\t   EXPECTED_CUMULATIVE_SAT, CMT)\t\\\n+\t\t\t   CMT)\t\\\n   TEST_VQRDMLXH_LANE1 (INSN, Q, T1, T2, W, N, N2, L,\t\t\\\n-\t\t       EXPECTED_CUMULATIVE_SAT, CMT)\n+\t\t       CMT)\n \n \n   DECL_VARIABLE (vector, int, 16, 4);\n@@ -71,10 +70,10 @@ void FNNAME (INSN) (void)\n \n   /* Choose lane arbitrarily.  */\n #define CMT \"\"\n-  TEST_VQRDMLXH_LANE (, int, s, 16, 4, 4, 2, expected_cumulative_sat, CMT);\n-  TEST_VQRDMLXH_LANE (, int, s, 32, 2, 2, 1, expected_cumulative_sat, CMT);\n-  TEST_VQRDMLXH_LANE (q, int, s, 16, 8, 4, 3, expected_cumulative_sat, CMT);\n-  TEST_VQRDMLXH_LANE (q, int, s, 32, 4, 2, 0, expected_cumulative_sat, CMT);\n+  TEST_VQRDMLXH_LANE (, int, s, 16, 4, 4, 2, CMT);\n+  TEST_VQRDMLXH_LANE (, int, s, 32, 2, 2, 1, CMT);\n+  TEST_VQRDMLXH_LANE (q, int, s, 16, 8, 4, 3, CMT);\n+  TEST_VQRDMLXH_LANE (q, int, s, 32, 4, 2, 0, CMT);\n \n   CHECK (TEST_MSG, int, 16, 4, PRIx16, expected, CMT);\n   CHECK (TEST_MSG, int, 32, 2, PRIx32, expected, CMT);\n@@ -99,14 +98,10 @@ void FNNAME (INSN) (void)\n   VDUP (vector3, q, int, s, 16, 8, 0x8000);\n   VDUP (vector3, q, int, s, 32, 4, 0x80000000);\n \n-  TEST_VQRDMLXH_LANE (, int, s, 16, 4, 4, 2, expected_cumulative_sat_mul,\n-\t\t      TEST_MSG_MUL);\n-  TEST_VQRDMLXH_LANE (, int, s, 32, 2, 2, 1, expected_cumulative_sat_mul,\n-\t\t      TEST_MSG_MUL);\n-  TEST_VQRDMLXH_LANE (q, int, s, 16, 8, 4, 3, expected_cumulative_sat_mul,\n-\t\t      TEST_MSG_MUL);\n-  TEST_VQRDMLXH_LANE (q, int, s, 32, 4, 2, 0, expected_cumulative_sat_mul,\n-\t\t      TEST_MSG_MUL);\n+  TEST_VQRDMLXH_LANE (, int, s, 16, 4, 4, 2, TEST_MSG_MUL);\n+  TEST_VQRDMLXH_LANE (, int, s, 32, 2, 2, 1, TEST_MSG_MUL);\n+  TEST_VQRDMLXH_LANE (q, int, s, 16, 8, 4, 3, TEST_MSG_MUL);\n+  TEST_VQRDMLXH_LANE (q, int, s, 32, 4, 2, 0, TEST_MSG_MUL);\n \n   CHECK (TEST_MSG, int, 16, 4, PRIx16, expected_mul, TEST_MSG_MUL);\n   CHECK (TEST_MSG, int, 32, 2, PRIx32, expected_mul, TEST_MSG_MUL);\n@@ -131,14 +126,10 @@ void FNNAME (INSN) (void)\n   /* Use input values where rounding produces a result equal to the\n      saturation value, but does not set the saturation flag.  */\n #define TEST_MSG_ROUND \" (check rounding)\"\n-  TEST_VQRDMLXH_LANE (, int, s, 16, 4, 4, 2, expected_cumulative_sat_round,\n-\t\t      TEST_MSG_ROUND);\n-  TEST_VQRDMLXH_LANE (, int, s, 32, 2, 2, 1, expected_cumulative_sat_round,\n-\t\t      TEST_MSG_ROUND);\n-  TEST_VQRDMLXH_LANE (q, int, s, 16, 8, 4, 3, expected_cumulative_sat_round,\n-\t\t      TEST_MSG_ROUND);\n-  TEST_VQRDMLXH_LANE (q, int, s, 32, 4, 2, 0, expected_cumulative_sat_round,\n-\t\t      TEST_MSG_ROUND);\n+  TEST_VQRDMLXH_LANE (, int, s, 16, 4, 4, 2, TEST_MSG_ROUND);\n+  TEST_VQRDMLXH_LANE (, int, s, 32, 2, 2, 1, TEST_MSG_ROUND);\n+  TEST_VQRDMLXH_LANE (q, int, s, 16, 8, 4, 3, TEST_MSG_ROUND);\n+  TEST_VQRDMLXH_LANE (q, int, s, 32, 4, 2, 0, TEST_MSG_ROUND);\n \n   CHECK (TEST_MSG, int, 16, 4, PRIx16, expected_round, TEST_MSG_ROUND);\n   CHECK (TEST_MSG, int, 32, 2, PRIx32, expected_round, TEST_MSG_ROUND);"}, {"sha": "71f20b72ea56ee851a97fe28423b4f3be5cba780", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vqrdmlah.c", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/763b865a17d32ff1d19720e333999de25132d3d4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqrdmlah.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/763b865a17d32ff1d19720e333999de25132d3d4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqrdmlah.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqrdmlah.c?ref=763b865a17d32ff1d19720e333999de25132d3d4", "patch": "@@ -5,12 +5,6 @@\n #include \"arm-neon-ref.h\"\n #include \"compute-ref-data.h\"\n \n-/* Expected values of cumulative_saturation flag.  */\n-int VECT_VAR (expected_cumulative_sat, int, 16, 4) = 0;\n-int VECT_VAR (expected_cumulative_sat, int, 32, 2) = 0;\n-int VECT_VAR (expected_cumulative_sat, int, 16, 8) = 0;\n-int VECT_VAR (expected_cumulative_sat, int, 32, 4) = 0;\n-\n /* Expected results.  */\n VECT_VAR_DECL (expected, int, 16, 4) [] = { 0x38d3, 0x38d4, 0x38d5, 0x38d6 };\n VECT_VAR_DECL (expected, int, 32, 2) [] = { 0xfffffff0, 0xfffffff1 };\n@@ -19,27 +13,13 @@ VECT_VAR_DECL (expected, int, 16, 8) [] = { 0xfff0,  0xfff1, 0xfff2,  0xfff3,\n VECT_VAR_DECL (expected, int, 32, 4) [] = { 0xfffffff0, 0xfffffff1,\n \t\t\t\t\t    0xfffffff2, 0xfffffff3 };\n \n-/* Expected values of cumulative_saturation flag when multiplication\n-   saturates.  */\n-int VECT_VAR (expected_cumulative_sat_mul, int, 16, 4) = 0;\n-int VECT_VAR (expected_cumulative_sat_mul, int, 32, 2) = 0;\n-int VECT_VAR (expected_cumulative_sat_mul, int, 16, 8) = 0;\n-int VECT_VAR (expected_cumulative_sat_mul, int, 32, 4) = 0;\n-\n /* Expected results when multiplication saturates.  */\n VECT_VAR_DECL (expected_mul, int, 16, 4) [] = { 0x0, 0x0, 0x0, 0x0 };\n VECT_VAR_DECL (expected_mul, int, 32, 2) [] = { 0x0, 0x0 };\n VECT_VAR_DECL (expected_mul, int, 16, 8) [] = { 0x0, 0x0, 0x0, 0x0,\n \t\t\t\t\t\t0x0, 0x0, 0x0, 0x0 };\n VECT_VAR_DECL (expected_mul, int, 32, 4) [] = { 0x0, 0x0, 0x0, 0x0 };\n \n-/* Expected values of cumulative_saturation flag when rounding\n-   should not cause saturation.  */\n-int VECT_VAR (expected_cumulative_sat_round, int, 16, 4) = 0;\n-int VECT_VAR (expected_cumulative_sat_round, int, 32, 2) = 0;\n-int VECT_VAR (expected_cumulative_sat_round, int, 16, 8) = 0;\n-int VECT_VAR (expected_cumulative_sat_round, int, 32, 4) = 0;\n-\n /* Expected results when rounding should not cause saturation.  */\n VECT_VAR_DECL (expected_round, int, 16, 4) [] = { 0xfffe, 0xfffe,\n \t\t\t\t\t\t  0xfffe, 0xfffe };"}, {"sha": "158fb33181c4ed7f3ee61e9732406fb29301480a", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vqrdmlah_lane.c", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/763b865a17d32ff1d19720e333999de25132d3d4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqrdmlah_lane.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/763b865a17d32ff1d19720e333999de25132d3d4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqrdmlah_lane.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqrdmlah_lane.c?ref=763b865a17d32ff1d19720e333999de25132d3d4", "patch": "@@ -5,12 +5,6 @@\n #include \"arm-neon-ref.h\"\n #include \"compute-ref-data.h\"\n \n-/* Expected values of cumulative_saturation flag.  */\n-int VECT_VAR (expected_cumulative_sat, int, 16, 4) = 0;\n-int VECT_VAR (expected_cumulative_sat, int, 32, 2) = 0;\n-int VECT_VAR (expected_cumulative_sat, int, 16, 8) = 0;\n-int VECT_VAR (expected_cumulative_sat, int, 32, 4) = 0;\n-\n /* Expected results.  */\n VECT_VAR_DECL (expected, int, 16, 4) [] = { 0x38d3, 0x38d4, 0x38d5, 0x38d6 };\n VECT_VAR_DECL (expected, int, 32, 2) [] = { 0xfffffff0, 0xfffffff1 };\n@@ -19,27 +13,13 @@ VECT_VAR_DECL (expected, int, 16, 8) [] = { 0x006d, 0x006e, 0x006f, 0x0070,\n VECT_VAR_DECL (expected, int, 32, 4) [] = { 0xfffffff0, 0xfffffff1,\n \t\t\t\t\t    0xfffffff2, 0xfffffff3 };\n \n-/* Expected values of cumulative_saturation flag when multiplication\n-   saturates.  */\n-int VECT_VAR (expected_cumulative_sat_mul, int, 16, 4) = 0;\n-int VECT_VAR (expected_cumulative_sat_mul, int, 32, 2) = 0;\n-int VECT_VAR (expected_cumulative_sat_mul, int, 16, 8) = 0;\n-int VECT_VAR (expected_cumulative_sat_mul, int, 32, 4) = 0;\n-\n /* Expected results when multiplication saturates.  */\n VECT_VAR_DECL (expected_mul, int, 16, 4) [] = { 0x0, 0x0, 0x0, 0x0 };\n VECT_VAR_DECL (expected_mul, int, 32, 2) [] = { 0x0, 0x0 };\n VECT_VAR_DECL (expected_mul, int, 16, 8) [] = { 0x0, 0x0, 0x0, 0x0,\n \t\t\t\t\t\t0x0, 0x0, 0x0, 0x0 };\n VECT_VAR_DECL (expected_mul, int, 32, 4) [] = { 0x0, 0x0, 0x0, 0x0 };\n \n-/* Expected values of cumulative_saturation flag when rounding\n-   should not cause saturation.  */\n-int VECT_VAR (expected_cumulative_sat_round, int, 16, 4) = 0;\n-int VECT_VAR (expected_cumulative_sat_round, int, 32, 2) = 0;\n-int VECT_VAR (expected_cumulative_sat_round, int, 16, 8) = 0;\n-int VECT_VAR (expected_cumulative_sat_round, int, 32, 4) = 0;\n-\n /* Expected results when rounding should not cause saturation.  */\n VECT_VAR_DECL (expected_round, int, 16, 4) [] = { 0xfffe, 0xfffe,\n \t\t\t\t\t\t  0xfffe, 0xfffe };"}, {"sha": "280ae83966d6b2dcbdf6a91da0069f7d3d2fede4", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vqrdmlsh.c", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/763b865a17d32ff1d19720e333999de25132d3d4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqrdmlsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/763b865a17d32ff1d19720e333999de25132d3d4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqrdmlsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqrdmlsh.c?ref=763b865a17d32ff1d19720e333999de25132d3d4", "patch": "@@ -5,12 +5,6 @@\n #include \"arm-neon-ref.h\"\n #include \"compute-ref-data.h\"\n \n-/* Expected values of cumulative_saturation flag.  */\n-int VECT_VAR (expected_cumulative_sat, int, 16, 4) = 0;\n-int VECT_VAR (expected_cumulative_sat, int, 32, 2) = 0;\n-int VECT_VAR (expected_cumulative_sat, int, 16, 8) = 0;\n-int VECT_VAR (expected_cumulative_sat, int, 32, 4) = 0;\n-\n /* Expected results.  */\n VECT_VAR_DECL (expected, int, 16, 4) [] = { 0xc70d, 0xc70e, 0xc70f, 0xc710 };\n VECT_VAR_DECL (expected, int, 32, 2) [] = { 0xfffffff0, 0xfffffff1 };\n@@ -19,13 +13,6 @@ VECT_VAR_DECL (expected, int, 16, 8) [] = { 0xfff0, 0xfff1, 0xfff2, 0xfff3,\n VECT_VAR_DECL (expected, int, 32, 4) [] = { 0xfffffff0, 0xfffffff1,\n \t\t\t\t\t    0xfffffff2, 0xfffffff3 };\n \n-/* Expected values of cumulative_saturation flag when multiplication\n-   saturates.  */\n-int VECT_VAR (expected_cumulative_sat_mul, int, 16, 4) = 1;\n-int VECT_VAR (expected_cumulative_sat_mul, int, 32, 2) = 1;\n-int VECT_VAR (expected_cumulative_sat_mul, int, 16, 8) = 1;\n-int VECT_VAR (expected_cumulative_sat_mul, int, 32, 4) = 1;\n-\n /* Expected results when multiplication saturates.  */\n VECT_VAR_DECL (expected_mul, int, 16, 4) [] = { 0x8000, 0x8000,\n \t\t\t\t\t\t0x8000, 0x8000 };\n@@ -37,13 +24,6 @@ VECT_VAR_DECL (expected_mul, int, 16, 8) [] = { 0x8000, 0x8000,\n VECT_VAR_DECL (expected_mul, int, 32, 4) [] = { 0x80000000, 0x80000000,\n \t\t\t\t\t\t0x80000000, 0x80000000 };\n \n-/* Expected values of cumulative_saturation flag when rounding\n-   should not cause saturation.  */\n-int VECT_VAR (expected_cumulative_sat_round, int, 16, 4) = 1;\n-int VECT_VAR (expected_cumulative_sat_round, int, 32, 2) = 1;\n-int VECT_VAR (expected_cumulative_sat_round, int, 16, 8) = 1;\n-int VECT_VAR (expected_cumulative_sat_round, int, 32, 4) = 1;\n-\n /* Expected results when rounding should not cause saturation.  */\n VECT_VAR_DECL (expected_round, int, 16, 4) [] = { 0x8000, 0x8000,\n \t\t\t\t\t\t  0x8000, 0x8000 };"}, {"sha": "0207e4d37a0cd58dfd97de2cf8e34e2ff822c374", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vqrdmlsh_lane.c", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/763b865a17d32ff1d19720e333999de25132d3d4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqrdmlsh_lane.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/763b865a17d32ff1d19720e333999de25132d3d4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqrdmlsh_lane.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqrdmlsh_lane.c?ref=763b865a17d32ff1d19720e333999de25132d3d4", "patch": "@@ -5,12 +5,6 @@\n #include \"arm-neon-ref.h\"\n #include \"compute-ref-data.h\"\n \n-/* Expected values of cumulative_saturation flag.  */\n-int VECT_VAR (expected_cumulative_sat, int, 16, 4) = 0;\n-int VECT_VAR (expected_cumulative_sat, int, 32, 2) = 0;\n-int VECT_VAR (expected_cumulative_sat, int, 16, 8) = 0;\n-int VECT_VAR (expected_cumulative_sat, int, 32, 4) = 0;\n-\n /* Expected results.  */\n VECT_VAR_DECL (expected, int, 16, 4) [] = { 0xc70d, 0xc70e, 0xc70f, 0xc710 };\n VECT_VAR_DECL (expected, int, 32, 2) [] = { 0xfffffff0, 0xfffffff1 };\n@@ -19,13 +13,6 @@ VECT_VAR_DECL (expected, int, 16, 8) [] = { 0xff73, 0xff74, 0xff75, 0xff76,\n VECT_VAR_DECL (expected, int, 32, 4) [] = { 0xfffffff0, 0xfffffff1,\n \t\t\t\t\t    0xfffffff2, 0xfffffff3 };\n \n-/* Expected values of cumulative_saturation flag when multiplication\n-   saturates.  */\n-int VECT_VAR (expected_cumulative_sat_mul, int, 16, 4) = 1;\n-int VECT_VAR (expected_cumulative_sat_mul, int, 32, 2) = 1;\n-int VECT_VAR (expected_cumulative_sat_mul, int, 16, 8) = 1;\n-int VECT_VAR (expected_cumulative_sat_mul, int, 32, 4) = 1;\n-\n /* Expected results when multiplication saturates.  */\n VECT_VAR_DECL (expected_mul, int, 16, 4) [] = { 0x8000, 0x8000,\n \t\t\t\t\t\t0x8000, 0x8000 };\n@@ -37,13 +24,6 @@ VECT_VAR_DECL (expected_mul, int, 16, 8) [] = { 0x8000, 0x8000,\n VECT_VAR_DECL (expected_mul, int, 32, 4) [] = { 0x80000000, 0x80000000,\n \t\t\t\t\t\t0x80000000, 0x80000000 };\n \n-/* Expected values of cumulative_saturation flag when rounding\n-   should not cause saturation.  */\n-int VECT_VAR (expected_cumulative_sat_round, int, 16, 4) = 1;\n-int VECT_VAR (expected_cumulative_sat_round, int, 32, 2) = 1;\n-int VECT_VAR (expected_cumulative_sat_round, int, 16, 8) = 1;\n-int VECT_VAR (expected_cumulative_sat_round, int, 32, 4) = 1;\n-\n /* Expected results when rounding should not cause saturation.  */\n VECT_VAR_DECL (expected_round, int, 16, 4) [] = { 0x8000, 0x8000,\n \t\t\t\t\t\t  0x8000, 0x8000 };"}, {"sha": "5f4403b1b75d83fccd08d37416e3c7bf21889052", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vqrdmulh.c", "status": "modified", "additions": 18, "deletions": 39, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/763b865a17d32ff1d19720e333999de25132d3d4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqrdmulh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/763b865a17d32ff1d19720e333999de25132d3d4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqrdmulh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqrdmulh.c?ref=763b865a17d32ff1d19720e333999de25132d3d4", "patch": "@@ -2,25 +2,12 @@\n #include \"arm-neon-ref.h\"\n #include \"compute-ref-data.h\"\n \n-/* Expected values of cumulative_saturation flag.  */\n-int VECT_VAR(expected_cumulative_sat,int,16,4) = 0;\n-int VECT_VAR(expected_cumulative_sat,int,32,2) = 0;\n-int VECT_VAR(expected_cumulative_sat,int,16,8) = 0;\n-int VECT_VAR(expected_cumulative_sat,int,32,4) = 0;\n-\n /* Expected results.  */\n VECT_VAR_DECL(expected,int,16,4) [] = { 0xfff5, 0xfff6, 0xfff7, 0xfff7 };\n VECT_VAR_DECL(expected,int,32,2) [] = { 0x0, 0x0 };\n VECT_VAR_DECL(expected,int,16,8) [] = { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 };\n VECT_VAR_DECL(expected,int,32,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n \n-/* Expected values of cumulative_saturation flag when multiplication\n-   saturates.  */\n-int VECT_VAR(expected_cumulative_sat_mul,int,16,4) = 1;\n-int VECT_VAR(expected_cumulative_sat_mul,int,32,2) = 1;\n-int VECT_VAR(expected_cumulative_sat_mul,int,16,8) = 1;\n-int VECT_VAR(expected_cumulative_sat_mul,int,32,4) = 1;\n-\n /* Expected results when multiplication saturates.  */\n VECT_VAR_DECL(expected_mul,int,16,4) [] = { 0x7fff, 0x7fff, 0x7fff, 0x7fff };\n VECT_VAR_DECL(expected_mul,int,32,2) [] = { 0x7fffffff, 0x7fffffff };\n@@ -29,13 +16,6 @@ VECT_VAR_DECL(expected_mul,int,16,8) [] = { 0x7fff, 0x7fff, 0x7fff, 0x7fff,\n VECT_VAR_DECL(expected_mul,int,32,4) [] = { 0x7fffffff, 0x7fffffff,\n \t\t\t\t\t    0x7fffffff, 0x7fffffff };\n \n-/* Expected values of cumulative_saturation flag when rounding\n-   should not cause saturation.  */\n-int VECT_VAR(expected_cumulative_sat_round,int,16,4) = 0;\n-int VECT_VAR(expected_cumulative_sat_round,int,32,2) = 0;\n-int VECT_VAR(expected_cumulative_sat_round,int,16,8) = 0;\n-int VECT_VAR(expected_cumulative_sat_round,int,32,4) = 0;\n-\n /* Expected results when rounding should not cause saturation.  */\n VECT_VAR_DECL(expected_round,int,16,4) [] = { 0x7fff, 0x7fff, 0x7fff, 0x7fff };\n VECT_VAR_DECL(expected_round,int,32,2) [] = { 0x7fffffff, 0x7fffffff };\n@@ -53,21 +33,20 @@ VECT_VAR_DECL(expected_round,int,32,4) [] = { 0x7fffffff, 0x7fffffff,\n FNNAME (INSN)\n {\n   /* vector_res = vqrdmulh(vector,vector2), then store the result.  */\n-#define TEST_VQRDMULH2(INSN, Q, T1, T2, W, N, EXPECTED_CUMULATIVE_SAT, CMT) \\\n+#define TEST_VQRDMULH2(INSN, Q, T1, T2, W, N, CMT) \\\n   Set_Neon_Cumulative_Sat(0, VECT_VAR(vector_res, T1, W, N));\t\t\\\n   VECT_VAR(vector_res, T1, W, N) =\t\t\t\t\t\\\n     INSN##Q##_##T2##W(VECT_VAR(vector, T1, W, N),\t\t\t\\\n \t\t      VECT_VAR(vector2, T1, W, N));\t\t\t\\\n   vst1##Q##_##T2##W(VECT_VAR(result, T1, W, N),\t\t\t\t\\\n-\t\t    VECT_VAR(vector_res, T1, W, N));\t\t\t\\\n-  CHECK_CUMULATIVE_SAT(TEST_MSG, T1, W, N, EXPECTED_CUMULATIVE_SAT, CMT)\n+\t\t    VECT_VAR(vector_res, T1, W, N))\n \n   /* Two auxliary macros are necessary to expand INSN */\n-#define TEST_VQRDMULH1(INSN, Q, T1, T2, W, N, EXPECTED_CUMULATIVE_SAT, CMT) \\\n-  TEST_VQRDMULH2(INSN, Q, T1, T2, W, N, EXPECTED_CUMULATIVE_SAT, CMT)\n+#define TEST_VQRDMULH1(INSN, Q, T1, T2, W, N, CMT) \\\n+  TEST_VQRDMULH2(INSN, Q, T1, T2, W, N, CMT)\n \n-#define TEST_VQRDMULH(Q, T1, T2, W, N, EXPECTED_CUMULATIVE_SAT, CMT)\t\\\n-  TEST_VQRDMULH1(INSN, Q, T1, T2, W, N, EXPECTED_CUMULATIVE_SAT, CMT)\n+#define TEST_VQRDMULH(Q, T1, T2, W, N, CMT)\t\\\n+  TEST_VQRDMULH1(INSN, Q, T1, T2, W, N, CMT)\n \n \n   DECL_VARIABLE(vector, int, 16, 4);\n@@ -99,10 +78,10 @@ FNNAME (INSN)\n   VDUP(vector2, q, int, s, 32, 4, 0x22);\n \n #define CMT \"\"\n-  TEST_VQRDMULH(, int, s, 16, 4, expected_cumulative_sat, CMT);\n-  TEST_VQRDMULH(, int, s, 32, 2, expected_cumulative_sat, CMT);\n-  TEST_VQRDMULH(q, int, s, 16, 8, expected_cumulative_sat, CMT);\n-  TEST_VQRDMULH(q, int, s, 32, 4, expected_cumulative_sat, CMT);\n+  TEST_VQRDMULH(, int, s, 16, 4, CMT);\n+  TEST_VQRDMULH(, int, s, 32, 2, CMT);\n+  TEST_VQRDMULH(q, int, s, 16, 8, CMT);\n+  TEST_VQRDMULH(q, int, s, 32, 4, CMT);\n \n   CHECK(TEST_MSG, int, 16, 4, PRIx16, expected, CMT);\n   CHECK(TEST_MSG, int, 32, 2, PRIx32, expected, CMT);\n@@ -121,10 +100,10 @@ FNNAME (INSN)\n   VDUP(vector2, q, int, s, 16, 8, 0x8000);\n   VDUP(vector2, q, int, s, 32, 4, 0x80000000);\n \n-  TEST_VQRDMULH(, int, s, 16, 4, expected_cumulative_sat_mul, TEST_MSG_MUL);\n-  TEST_VQRDMULH(, int, s, 32, 2, expected_cumulative_sat_mul, TEST_MSG_MUL);\n-  TEST_VQRDMULH(q, int, s, 16, 8, expected_cumulative_sat_mul, TEST_MSG_MUL);\n-  TEST_VQRDMULH(q, int, s, 32, 4, expected_cumulative_sat_mul, TEST_MSG_MUL);\n+  TEST_VQRDMULH(, int, s, 16, 4, TEST_MSG_MUL);\n+  TEST_VQRDMULH(, int, s, 32, 2, TEST_MSG_MUL);\n+  TEST_VQRDMULH(q, int, s, 16, 8, TEST_MSG_MUL);\n+  TEST_VQRDMULH(q, int, s, 32, 4, TEST_MSG_MUL);\n \n   CHECK(TEST_MSG, int, 16, 4, PRIx16, expected_mul, TEST_MSG_MUL);\n   CHECK(TEST_MSG, int, 32, 2, PRIx32, expected_mul, TEST_MSG_MUL);\n@@ -143,10 +122,10 @@ FNNAME (INSN)\n   VDUP(vector2, q, int, s, 16, 8, 0x8001);\n   VDUP(vector2, q, int, s, 32, 4, 0x80000001);\n \n-  TEST_VQRDMULH(, int, s, 16, 4, expected_cumulative_sat_round, TEST_MSG_ROUND);\n-  TEST_VQRDMULH(, int, s, 32, 2, expected_cumulative_sat_round, TEST_MSG_ROUND);\n-  TEST_VQRDMULH(q, int, s, 16, 8, expected_cumulative_sat_round, TEST_MSG_ROUND);\n-  TEST_VQRDMULH(q, int, s, 32, 4, expected_cumulative_sat_round, TEST_MSG_ROUND);\n+  TEST_VQRDMULH(, int, s, 16, 4, TEST_MSG_ROUND);\n+  TEST_VQRDMULH(, int, s, 32, 2, TEST_MSG_ROUND);\n+  TEST_VQRDMULH(q, int, s, 16, 8, TEST_MSG_ROUND);\n+  TEST_VQRDMULH(q, int, s, 32, 4, TEST_MSG_ROUND);\n \n   CHECK(TEST_MSG, int, 16, 4, PRIx16, expected_round, TEST_MSG_ROUND);\n   CHECK(TEST_MSG, int, 32, 2, PRIx32, expected_round, TEST_MSG_ROUND);"}, {"sha": "02028cf5aa3e160865cab898adff9bf35b9096e0", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vqrdmulh_lane.c", "status": "modified", "additions": 18, "deletions": 47, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/763b865a17d32ff1d19720e333999de25132d3d4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqrdmulh_lane.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/763b865a17d32ff1d19720e333999de25132d3d4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqrdmulh_lane.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqrdmulh_lane.c?ref=763b865a17d32ff1d19720e333999de25132d3d4", "patch": "@@ -2,26 +2,13 @@\n #include \"arm-neon-ref.h\"\n #include \"compute-ref-data.h\"\n \n-/* Expected values of cumulative_saturation flag.  */\n-int VECT_VAR(expected_cumulative_sat,int,16,4) = 0;\n-int VECT_VAR(expected_cumulative_sat,int,32,2) = 0;\n-int VECT_VAR(expected_cumulative_sat,int,16,8) = 0;\n-int VECT_VAR(expected_cumulative_sat,int,32,4) = 0;\n-\n /* Expected results.  */\n VECT_VAR_DECL(expected,int,16,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n VECT_VAR_DECL(expected,int,32,2) [] = { 0x0, 0x0 };\n VECT_VAR_DECL(expected,int,16,8) [] = { 0x0, 0x0, 0x0, 0x0,\n \t\t\t\t\t0x0, 0x0, 0x0, 0x0 };\n VECT_VAR_DECL(expected,int,32,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n \n-/* Expected values of cumulative_saturation flag when multiplication\n-   saturates.  */\n-int VECT_VAR(expected_cumulative_sat_mul,int,16,4) = 1;\n-int VECT_VAR(expected_cumulative_sat_mul,int,32,2) = 1;\n-int VECT_VAR(expected_cumulative_sat_mul,int,16,8) = 1;\n-int VECT_VAR(expected_cumulative_sat_mul,int,32,4) = 1;\n-\n /* Expected results when multiplication saturates.  */\n VECT_VAR_DECL(expected_mul,int,16,4) [] = { 0x7fff, 0x7fff, 0x7fff, 0x7fff };\n VECT_VAR_DECL(expected_mul,int,32,2) [] = { 0x7fffffff, 0x7fffffff };\n@@ -30,13 +17,6 @@ VECT_VAR_DECL(expected_mul,int,16,8) [] = { 0x7fff, 0x7fff, 0x7fff, 0x7fff,\n VECT_VAR_DECL(expected_mul,int,32,4) [] = { 0x7fffffff, 0x7fffffff,\n \t\t\t\t\t    0x7fffffff, 0x7fffffff };\n \n-/* Expected values of cumulative_saturation flag when rounding\n-   should not cause saturation.  */\n-int VECT_VAR(expected_cumulative_sat_round,int,16,4) = 0;\n-int VECT_VAR(expected_cumulative_sat_round,int,32,2) = 0;\n-int VECT_VAR(expected_cumulative_sat_round,int,16,8) = 0;\n-int VECT_VAR(expected_cumulative_sat_round,int,32,4) = 0;\n-\n /* Expected results when rounding should not cause saturation.  */\n VECT_VAR_DECL(expected_round,int,16,4) [] = { 0x7fff, 0x7fff, 0x7fff, 0x7fff };\n VECT_VAR_DECL(expected_round,int,32,2) [] = { 0x7fffffff, 0x7fffffff };\n@@ -54,22 +34,21 @@ VECT_VAR_DECL(expected_round,int,32,4) [] = { 0x7fffffff, 0x7fffffff,\n FNNAME (INSN)\n {\n   /* vector_res = vqrdmulh_lane(vector,vector2,lane), then store the result.  */\n-#define TEST_VQRDMULH_LANE2(INSN, Q, T1, T2, W, N, N2, L, EXPECTED_CUMULATIVE_SAT, CMT) \\\n+#define TEST_VQRDMULH_LANE2(INSN, Q, T1, T2, W, N, N2, L, CMT) \\\n   Set_Neon_Cumulative_Sat(0, VECT_VAR(vector_res, T1, W, N));\t\t\\\n   VECT_VAR(vector_res, T1, W, N) =\t\t\t\t\t\\\n     INSN##Q##_lane_##T2##W(VECT_VAR(vector, T1, W, N),\t\t\t\\\n \t\t\t   VECT_VAR(vector2, T1, W, N2),\t\t\\\n \t\t\t   L);\t\t\t\t\t\t\\\n   vst1##Q##_##T2##W(VECT_VAR(result, T1, W, N),\t\t\t\t\\\n-\t\t    VECT_VAR(vector_res, T1, W, N));\t\t\t\\\n-  CHECK_CUMULATIVE_SAT(TEST_MSG, T1, W, N, EXPECTED_CUMULATIVE_SAT, CMT)\n+\t\t    VECT_VAR(vector_res, T1, W, N))\n \n   /* Two auxliary macros are necessary to expand INSN */\n-#define TEST_VQRDMULH_LANE1(INSN, Q, T1, T2, W, N, N2, L, EXPECTED_CUMULATIVE_SAT, CMT) \\\n-  TEST_VQRDMULH_LANE2(INSN, Q, T1, T2, W, N, N2, L, EXPECTED_CUMULATIVE_SAT, CMT)\n+#define TEST_VQRDMULH_LANE1(INSN, Q, T1, T2, W, N, N2, L, CMT) \\\n+  TEST_VQRDMULH_LANE2(INSN, Q, T1, T2, W, N, N2, L, CMT)\n \n-#define TEST_VQRDMULH_LANE(Q, T1, T2, W, N, N2, L, EXPECTED_CUMULATIVE_SAT, CMT) \\\n-  TEST_VQRDMULH_LANE1(INSN, Q, T1, T2, W, N, N2, L, EXPECTED_CUMULATIVE_SAT, CMT)\n+#define TEST_VQRDMULH_LANE(Q, T1, T2, W, N, N2, L, CMT) \\\n+  TEST_VQRDMULH_LANE1(INSN, Q, T1, T2, W, N, N2, L, CMT)\n \n \n   DECL_VARIABLE(vector, int, 16, 4);\n@@ -102,10 +81,10 @@ FNNAME (INSN)\n \n   /* Choose lane arbitrarily.  */\n #define CMT \"\"\n-  TEST_VQRDMULH_LANE(, int, s, 16, 4, 4, 2, expected_cumulative_sat, CMT);\n-  TEST_VQRDMULH_LANE(, int, s, 32, 2, 2, 1, expected_cumulative_sat, CMT);\n-  TEST_VQRDMULH_LANE(q, int, s, 16, 8, 4, 3, expected_cumulative_sat, CMT);\n-  TEST_VQRDMULH_LANE(q, int, s, 32, 4, 2, 0, expected_cumulative_sat, CMT);\n+  TEST_VQRDMULH_LANE(, int, s, 16, 4, 4, 2, CMT);\n+  TEST_VQRDMULH_LANE(, int, s, 32, 2, 2, 1, CMT);\n+  TEST_VQRDMULH_LANE(q, int, s, 16, 8, 4, 3, CMT);\n+  TEST_VQRDMULH_LANE(q, int, s, 32, 4, 2, 0, CMT);\n \n   CHECK(TEST_MSG, int, 16, 4, PRIx16, expected, CMT);\n   CHECK(TEST_MSG, int, 32, 2, PRIx32, expected, CMT);\n@@ -122,14 +101,10 @@ FNNAME (INSN)\n   VDUP(vector2, , int, s, 16, 4, 0x8000);\n   VDUP(vector2, , int, s, 32, 2, 0x80000000);\n \n-  TEST_VQRDMULH_LANE(, int, s, 16, 4, 4, 2, expected_cumulative_sat_mul,\n-\t\t     TEST_MSG_MUL);\n-  TEST_VQRDMULH_LANE(, int, s, 32, 2, 2, 1, expected_cumulative_sat_mul,\n-\t\t     TEST_MSG_MUL);\n-  TEST_VQRDMULH_LANE(q, int, s, 16, 8, 4, 3, expected_cumulative_sat_mul,\n-\t\t     TEST_MSG_MUL);\n-  TEST_VQRDMULH_LANE(q, int, s, 32, 4, 2, 0, expected_cumulative_sat_mul,\n-\t\t     TEST_MSG_MUL);\n+  TEST_VQRDMULH_LANE(, int, s, 16, 4, 4, 2, TEST_MSG_MUL);\n+  TEST_VQRDMULH_LANE(, int, s, 32, 2, 2, 1, TEST_MSG_MUL);\n+  TEST_VQRDMULH_LANE(q, int, s, 16, 8, 4, 3, TEST_MSG_MUL);\n+  TEST_VQRDMULH_LANE(q, int, s, 32, 4, 2, 0, TEST_MSG_MUL);\n \n   CHECK(TEST_MSG, int, 16, 4, PRIx16, expected_mul, TEST_MSG_MUL);\n   CHECK(TEST_MSG, int, 32, 2, PRIx32, expected_mul, TEST_MSG_MUL);\n@@ -146,14 +121,10 @@ FNNAME (INSN)\n   /* Use input values where rounding produces a result equal to the\n      saturation value, but does not set the saturation flag.  */\n #define TEST_MSG_ROUND \" (check rounding)\"\n-  TEST_VQRDMULH_LANE(, int, s, 16, 4, 4, 2, expected_cumulative_sat_round,\n-\t\t     TEST_MSG_ROUND);\n-  TEST_VQRDMULH_LANE(, int, s, 32, 2, 2, 1, expected_cumulative_sat_round,\n-\t\t     TEST_MSG_ROUND);\n-  TEST_VQRDMULH_LANE(q, int, s, 16, 8, 4, 3, expected_cumulative_sat_round,\n-\t\t     TEST_MSG_ROUND);\n-  TEST_VQRDMULH_LANE(q, int, s, 32, 4, 2, 0, expected_cumulative_sat_round,\n-\t\t     TEST_MSG_ROUND);\n+  TEST_VQRDMULH_LANE(, int, s, 16, 4, 4, 2, TEST_MSG_ROUND);\n+  TEST_VQRDMULH_LANE(, int, s, 32, 2, 2, 1, TEST_MSG_ROUND);\n+  TEST_VQRDMULH_LANE(q, int, s, 16, 8, 4, 3, TEST_MSG_ROUND);\n+  TEST_VQRDMULH_LANE(q, int, s, 32, 4, 2, 0, TEST_MSG_ROUND);\n \n   CHECK(TEST_MSG, int, 16, 4, PRIx16, expected_round, TEST_MSG_ROUND);\n   CHECK(TEST_MSG, int, 32, 2, PRIx32, expected_round, TEST_MSG_ROUND);"}, {"sha": "fdcf7e4464c66ec2475e8922ece9b22d5f6bbfd1", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vqrdmulh_n.c", "status": "modified", "additions": 18, "deletions": 47, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/763b865a17d32ff1d19720e333999de25132d3d4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqrdmulh_n.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/763b865a17d32ff1d19720e333999de25132d3d4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqrdmulh_n.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqrdmulh_n.c?ref=763b865a17d32ff1d19720e333999de25132d3d4", "patch": "@@ -2,12 +2,6 @@\n #include \"arm-neon-ref.h\"\n #include \"compute-ref-data.h\"\n \n-/* Expected values of cumulative_saturation flag.  */\n-int VECT_VAR(expected_cumulative_sat,int,16,4) = 0;\n-int VECT_VAR(expected_cumulative_sat,int,32,2) = 0;\n-int VECT_VAR(expected_cumulative_sat,int,16,8) = 0;\n-int VECT_VAR(expected_cumulative_sat,int,32,4) = 0;\n-\n /* Expected results.  */\n VECT_VAR_DECL(expected,int,16,4) [] = { 0xfffc, 0xfffc, 0xfffc, 0xfffd };\n VECT_VAR_DECL(expected,int,32,2) [] = { 0xfffffffe, 0xfffffffe };\n@@ -16,13 +10,6 @@ VECT_VAR_DECL(expected,int,16,8) [] = { 0x6, 0x6, 0x6, 0x5,\n VECT_VAR_DECL(expected,int,32,4) [] = { 0xfffffffe, 0xfffffffe,\n \t\t\t\t\t0xfffffffe, 0xfffffffe };\n \n-/* Expected values of cumulative_saturation flag when multiplication\n-   saturates.  */\n-int VECT_VAR(expected_cumulative_sat_mul,int,16,4) = 1;\n-int VECT_VAR(expected_cumulative_sat_mul,int,32,2) = 1;\n-int VECT_VAR(expected_cumulative_sat_mul,int,16,8) = 1;\n-int VECT_VAR(expected_cumulative_sat_mul,int,32,4) = 1;\n-\n /* Expected results when multiplication saturates.  */\n VECT_VAR_DECL(expected_mul,int,16,4) [] = { 0x7fff, 0x7fff, 0x7fff, 0x7fff };\n VECT_VAR_DECL(expected_mul,int,32,2) [] = { 0x7fffffff, 0x7fffffff };\n@@ -31,13 +18,6 @@ VECT_VAR_DECL(expected_mul,int,16,8) [] = { 0x7fff, 0x7fff, 0x7fff, 0x7fff,\n VECT_VAR_DECL(expected_mul,int,32,4) [] = { 0x7fffffff, 0x7fffffff,\n \t\t\t\t\t    0x7fffffff, 0x7fffffff };\n \n-/* Expected values of cumulative_saturation flag when rounding\n-   should not cause saturation.  */\n-int VECT_VAR(expected_cumulative_sat_round,int,16,4) = 0;\n-int VECT_VAR(expected_cumulative_sat_round,int,32,2) = 0;\n-int VECT_VAR(expected_cumulative_sat_round,int,16,8) = 0;\n-int VECT_VAR(expected_cumulative_sat_round,int,32,4) = 0;\n-\n /* Expected results when rounding should not cause saturation.  */\n VECT_VAR_DECL(expected_round,int,16,4) [] = { 0x7fff, 0x7fff, 0x7fff, 0x7fff };\n VECT_VAR_DECL(expected_round,int,32,2) [] = { 0x7fffffff, 0x7fffffff };\n@@ -57,21 +37,20 @@ FNNAME (INSN)\n   int i;\n \n   /* vector_res = vqrdmulh_n(vector,val), then store the result.  */\n-#define TEST_VQRDMULH_N2(INSN, Q, T1, T2, W, N, L, EXPECTED_CUMULATIVE_SAT, CMT) \\\n+#define TEST_VQRDMULH_N2(INSN, Q, T1, T2, W, N, L, CMT) \\\n   Set_Neon_Cumulative_Sat(0, VECT_VAR(vector_res, T1, W, N));\t\t\\\n   VECT_VAR(vector_res, T1, W, N) =\t\t\t\t\t\\\n     INSN##Q##_n_##T2##W(VECT_VAR(vector, T1, W, N),\t\t\t\\\n \t\t\tL);\t\t\t\t\t\t\\\n   vst1##Q##_##T2##W(VECT_VAR(result, T1, W, N),\t\t\t\t\\\n-\t\t    VECT_VAR(vector_res, T1, W, N));\t\t\t\\\n-  CHECK_CUMULATIVE_SAT(TEST_MSG, T1, W, N, EXPECTED_CUMULATIVE_SAT, CMT)\n+\t\t    VECT_VAR(vector_res, T1, W, N))\n \n   /* Two auxliary macros are necessary to expand INSN */\n-#define TEST_VQRDMULH_N1(INSN, Q, T1, T2, W, N, L, EXPECTED_CUMULATIVE_SAT, CMT) \\\n-  TEST_VQRDMULH_N2(INSN, Q, T1, T2, W, N, L, EXPECTED_CUMULATIVE_SAT, CMT)\n+#define TEST_VQRDMULH_N1(INSN, Q, T1, T2, W, N, L, CMT) \\\n+  TEST_VQRDMULH_N2(INSN, Q, T1, T2, W, N, L, CMT)\n \n-#define TEST_VQRDMULH_N(Q, T1, T2, W, N, L, EXPECTED_CUMULATIVE_SAT, CMT) \\\n-  TEST_VQRDMULH_N1(INSN, Q, T1, T2, W, N, L, EXPECTED_CUMULATIVE_SAT, CMT)\n+#define TEST_VQRDMULH_N(Q, T1, T2, W, N, L, CMT) \\\n+  TEST_VQRDMULH_N1(INSN, Q, T1, T2, W, N, L, CMT)\n \n \n   DECL_VARIABLE(vector, int, 16, 4);\n@@ -93,10 +72,10 @@ FNNAME (INSN)\n \n   /* Choose multiplier arbitrarily.  */\n #define CMT \"\"\n-  TEST_VQRDMULH_N(, int, s, 16, 4, 0x2233, expected_cumulative_sat, CMT);\n-  TEST_VQRDMULH_N(, int, s, 32, 2, 0x12345678, expected_cumulative_sat, CMT);\n-  TEST_VQRDMULH_N(q, int, s, 16, 8, 0xCD12, expected_cumulative_sat, CMT);\n-  TEST_VQRDMULH_N(q, int, s, 32, 4, 0xFA23456, expected_cumulative_sat, CMT);\n+  TEST_VQRDMULH_N(, int, s, 16, 4, 0x2233, CMT);\n+  TEST_VQRDMULH_N(, int, s, 32, 2, 0x12345678, CMT);\n+  TEST_VQRDMULH_N(q, int, s, 16, 8, 0xCD12, CMT);\n+  TEST_VQRDMULH_N(q, int, s, 32, 4, 0xFA23456, CMT);\n \n   CHECK(TEST_MSG, int, 16, 4, PRIx16, expected, CMT);\n   CHECK(TEST_MSG, int, 32, 2, PRIx32, expected, CMT);\n@@ -111,14 +90,10 @@ FNNAME (INSN)\n   VDUP(vector, q, int, s, 16, 8, 0x8000);\n   VDUP(vector, q, int, s, 32, 4, 0x80000000);\n \n-  TEST_VQRDMULH_N(, int, s, 16, 4, 0x8000, expected_cumulative_sat_mul,\n-\t\t  TEST_MSG_MUL);\n-  TEST_VQRDMULH_N(, int, s, 32, 2, 0x80000000, expected_cumulative_sat_mul,\n-\t\t  TEST_MSG_MUL);\n-  TEST_VQRDMULH_N(q, int, s, 16, 8, 0x8000, expected_cumulative_sat_mul,\n-\t\t  TEST_MSG_MUL);\n-  TEST_VQRDMULH_N(q, int, s, 32, 4, 0x80000000, expected_cumulative_sat_mul,\n-\t\t  TEST_MSG_MUL);\n+  TEST_VQRDMULH_N(, int, s, 16, 4, 0x8000, TEST_MSG_MUL);\n+  TEST_VQRDMULH_N(, int, s, 32, 2, 0x80000000, TEST_MSG_MUL);\n+  TEST_VQRDMULH_N(q, int, s, 16, 8, 0x8000, TEST_MSG_MUL);\n+  TEST_VQRDMULH_N(q, int, s, 32, 4, 0x80000000, TEST_MSG_MUL);\n \n   CHECK(TEST_MSG, int, 16, 4, PRIx16, expected_mul, TEST_MSG_MUL);\n   CHECK(TEST_MSG, int, 32, 2, PRIx32, expected_mul, TEST_MSG_MUL);\n@@ -133,14 +108,10 @@ FNNAME (INSN)\n   VDUP(vector, q, int, s, 16, 8, 0x8000);\n   VDUP(vector, q, int, s, 32, 4, 0x80000000);\n \n-  TEST_VQRDMULH_N(, int, s, 16, 4, 0x8001, expected_cumulative_sat_round,\n-\t\t  TEST_MSG_ROUND);\n-  TEST_VQRDMULH_N(, int, s, 32, 2, 0x80000001, expected_cumulative_sat_round,\n-\t\t  TEST_MSG_ROUND);\n-  TEST_VQRDMULH_N(q, int, s, 16, 8, 0x8001, expected_cumulative_sat_round,\n-\t\t  TEST_MSG_ROUND);\n-  TEST_VQRDMULH_N(q, int, s, 32, 4, 0x80000001, expected_cumulative_sat_round,\n-\t\t  TEST_MSG_ROUND);\n+  TEST_VQRDMULH_N(, int, s, 16, 4, 0x8001, TEST_MSG_ROUND);\n+  TEST_VQRDMULH_N(, int, s, 32, 2, 0x80000001, TEST_MSG_ROUND);\n+  TEST_VQRDMULH_N(q, int, s, 16, 8, 0x8001, TEST_MSG_ROUND);\n+  TEST_VQRDMULH_N(q, int, s, 32, 4, 0x80000001, TEST_MSG_ROUND);\n \n   CHECK(TEST_MSG, int, 16, 4, PRIx16, expected_round, TEST_MSG_ROUND);\n   CHECK(TEST_MSG, int, 32, 2, PRIx32, expected_round, TEST_MSG_ROUND);"}, {"sha": "f88b2fa29db4296de9e6376697831574c8f523a7", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vqrshl.c", "status": "modified", "additions": 166, "deletions": 355, "changes": 521, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/763b865a17d32ff1d19720e333999de25132d3d4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqrshl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/763b865a17d32ff1d19720e333999de25132d3d4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqrshl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqrshl.c?ref=763b865a17d32ff1d19720e333999de25132d3d4", "patch": "@@ -2,24 +2,6 @@\n #include \"arm-neon-ref.h\"\n #include \"compute-ref-data.h\"\n \n-/* Expected values of cumulative_saturation flag with input=0.  */\n-int VECT_VAR(expected_cumulative_sat_0,int,8,8) = 0;\n-int VECT_VAR(expected_cumulative_sat_0,int,16,4) = 0;\n-int VECT_VAR(expected_cumulative_sat_0,int,32,2) = 0;\n-int VECT_VAR(expected_cumulative_sat_0,int,64,1) = 0;\n-int VECT_VAR(expected_cumulative_sat_0,uint,8,8) = 0;\n-int VECT_VAR(expected_cumulative_sat_0,uint,16,4) = 0;\n-int VECT_VAR(expected_cumulative_sat_0,uint,32,2) = 0;\n-int VECT_VAR(expected_cumulative_sat_0,uint,64,1) = 0;\n-int VECT_VAR(expected_cumulative_sat_0,int,8,16) = 0;\n-int VECT_VAR(expected_cumulative_sat_0,int,16,8) = 0;\n-int VECT_VAR(expected_cumulative_sat_0,int,32,4) = 0;\n-int VECT_VAR(expected_cumulative_sat_0,int,64,2) = 0;\n-int VECT_VAR(expected_cumulative_sat_0,uint,8,16) = 0;\n-int VECT_VAR(expected_cumulative_sat_0,uint,16,8) = 0;\n-int VECT_VAR(expected_cumulative_sat_0,uint,32,4) = 0;\n-int VECT_VAR(expected_cumulative_sat_0,uint,64,2) = 0;\n-\n /* Expected results with input=0.  */\n VECT_VAR_DECL(expected_0,int,8,8) [] = { 0x0, 0x0, 0x0, 0x0,\n \t\t\t\t\t 0x0, 0x0, 0x0, 0x0 };\n@@ -48,25 +30,6 @@ VECT_VAR_DECL(expected_0,uint,16,8) [] = { 0x0, 0x0, 0x0, 0x0,\n VECT_VAR_DECL(expected_0,uint,32,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n VECT_VAR_DECL(expected_0,uint,64,2) [] = { 0x0, 0x0 };\n \n-/* Expected values of cumulative_saturation flag with input=0 and\n-   negative shift amount.  */\n-int VECT_VAR(expected_cumulative_sat_0_neg,int,8,8) = 0;\n-int VECT_VAR(expected_cumulative_sat_0_neg,int,16,4) = 0;\n-int VECT_VAR(expected_cumulative_sat_0_neg,int,32,2) = 0;\n-int VECT_VAR(expected_cumulative_sat_0_neg,int,64,1) = 0;\n-int VECT_VAR(expected_cumulative_sat_0_neg,uint,8,8) = 0;\n-int VECT_VAR(expected_cumulative_sat_0_neg,uint,16,4) = 0;\n-int VECT_VAR(expected_cumulative_sat_0_neg,uint,32,2) = 0;\n-int VECT_VAR(expected_cumulative_sat_0_neg,uint,64,1) = 0;\n-int VECT_VAR(expected_cumulative_sat_0_neg,int,8,16) = 0;\n-int VECT_VAR(expected_cumulative_sat_0_neg,int,16,8) = 0;\n-int VECT_VAR(expected_cumulative_sat_0_neg,int,32,4) = 0;\n-int VECT_VAR(expected_cumulative_sat_0_neg,int,64,2) = 0;\n-int VECT_VAR(expected_cumulative_sat_0_neg,uint,8,16) = 0;\n-int VECT_VAR(expected_cumulative_sat_0_neg,uint,16,8) = 0;\n-int VECT_VAR(expected_cumulative_sat_0_neg,uint,32,4) = 0;\n-int VECT_VAR(expected_cumulative_sat_0_neg,uint,64,2) = 0;\n-\n /* Expected results with input=0 and negative shift amount.  */\n VECT_VAR_DECL(expected_0_neg,int,8,8) [] = { 0x0, 0x0, 0x0, 0x0,\n \t\t\t\t\t     0x0, 0x0, 0x0, 0x0 };\n@@ -95,24 +58,6 @@ VECT_VAR_DECL(expected_0_neg,uint,16,8) [] = { 0x0, 0x0, 0x0, 0x0,\n VECT_VAR_DECL(expected_0_neg,uint,32,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n VECT_VAR_DECL(expected_0_neg,uint,64,2) [] = { 0x0, 0x0 };\n \n-/* Expected values of cumulative_saturation flag.  */\n-int VECT_VAR(expected_cumulative_sat,int,8,8) = 0;\n-int VECT_VAR(expected_cumulative_sat,int,16,4) = 0;\n-int VECT_VAR(expected_cumulative_sat,int,32,2) = 0;\n-int VECT_VAR(expected_cumulative_sat,int,64,1) = 0;\n-int VECT_VAR(expected_cumulative_sat,uint,8,8) = 1;\n-int VECT_VAR(expected_cumulative_sat,uint,16,4) = 1;\n-int VECT_VAR(expected_cumulative_sat,uint,32,2) = 1;\n-int VECT_VAR(expected_cumulative_sat,uint,64,1) = 1;\n-int VECT_VAR(expected_cumulative_sat,int,8,16) = 1;\n-int VECT_VAR(expected_cumulative_sat,int,16,8) = 1;\n-int VECT_VAR(expected_cumulative_sat,int,32,4) = 1;\n-int VECT_VAR(expected_cumulative_sat,int,64,2) = 1;\n-int VECT_VAR(expected_cumulative_sat,uint,8,16) = 1;\n-int VECT_VAR(expected_cumulative_sat,uint,16,8) = 1;\n-int VECT_VAR(expected_cumulative_sat,uint,32,4) = 1;\n-int VECT_VAR(expected_cumulative_sat,uint,64,2) = 1;\n-\n /* Expected results.  */\n VECT_VAR_DECL(expected,int,8,8) [] = { 0xe0, 0xe2, 0xe4, 0xe6,\n \t\t\t\t       0xe8, 0xea, 0xec, 0xee };\n@@ -144,25 +89,6 @@ VECT_VAR_DECL(expected,uint,32,4) [] = { 0xffffffff, 0xffffffff,\n VECT_VAR_DECL(expected,uint,64,2) [] = { 0xffffffffffffffff,\n \t\t\t\t\t 0xffffffffffffffff };\n \n-/* Expected values of cumulative_saturation flag with negative shift\n-   amount.  */\n-int VECT_VAR(expected_cumulative_sat_neg,int,8,8) = 0;\n-int VECT_VAR(expected_cumulative_sat_neg,int,16,4) = 0;\n-int VECT_VAR(expected_cumulative_sat_neg,int,32,2) = 0;\n-int VECT_VAR(expected_cumulative_sat_neg,int,64,1) = 0;\n-int VECT_VAR(expected_cumulative_sat_neg,uint,8,8) = 0;\n-int VECT_VAR(expected_cumulative_sat_neg,uint,16,4) = 0;\n-int VECT_VAR(expected_cumulative_sat_neg,uint,32,2) = 0;\n-int VECT_VAR(expected_cumulative_sat_neg,uint,64,1) = 0;\n-int VECT_VAR(expected_cumulative_sat_neg,int,8,16) = 0;\n-int VECT_VAR(expected_cumulative_sat_neg,int,16,8) = 0;\n-int VECT_VAR(expected_cumulative_sat_neg,int,32,4) = 0;\n-int VECT_VAR(expected_cumulative_sat_neg,int,64,2) = 0;\n-int VECT_VAR(expected_cumulative_sat_neg,uint,8,16) = 0;\n-int VECT_VAR(expected_cumulative_sat_neg,uint,16,8) = 0;\n-int VECT_VAR(expected_cumulative_sat_neg,uint,32,4) = 0;\n-int VECT_VAR(expected_cumulative_sat_neg,uint,64,2) = 0;\n-\n /* Expected results with negative shift amount.  */\n VECT_VAR_DECL(expected_neg,int,8,8) [] = { 0xfc, 0xfc, 0xfd, 0xfd,\n \t\t\t\t\t   0xfd, 0xfd, 0xfe, 0xfe };\n@@ -192,25 +118,6 @@ VECT_VAR_DECL(expected_neg,uint,32,4) [] = { 0x80000, 0x80000,\n \t\t\t\t\t     0x80000, 0x80000 };\n VECT_VAR_DECL(expected_neg,uint,64,2) [] = { 0x100000000000, 0x100000000000 };\n \n-/* Expected values of cumulative_saturation flag with input=max and\n-   shift by -1.  */\n-int VECT_VAR(expected_cumulative_sat_minus1,int,8,8) = 0;\n-int VECT_VAR(expected_cumulative_sat_minus1,int,16,4) = 0;\n-int VECT_VAR(expected_cumulative_sat_minus1,int,32,2) = 0;\n-int VECT_VAR(expected_cumulative_sat_minus1,int,64,1) = 0;\n-int VECT_VAR(expected_cumulative_sat_minus1,uint,8,8) = 0;\n-int VECT_VAR(expected_cumulative_sat_minus1,uint,16,4) = 0;\n-int VECT_VAR(expected_cumulative_sat_minus1,uint,32,2) = 0;\n-int VECT_VAR(expected_cumulative_sat_minus1,uint,64,1) = 0;\n-int VECT_VAR(expected_cumulative_sat_minus1,int,8,16) = 0;\n-int VECT_VAR(expected_cumulative_sat_minus1,int,16,8) = 0;\n-int VECT_VAR(expected_cumulative_sat_minus1,int,32,4) = 0;\n-int VECT_VAR(expected_cumulative_sat_minus1,int,64,2) = 0;\n-int VECT_VAR(expected_cumulative_sat_minus1,uint,8,16) = 0;\n-int VECT_VAR(expected_cumulative_sat_minus1,uint,16,8) = 0;\n-int VECT_VAR(expected_cumulative_sat_minus1,uint,32,4) = 0;\n-int VECT_VAR(expected_cumulative_sat_minus1,uint,64,2) = 0;\n-\n /* Expected results with input=max and shift by -1.  */\n VECT_VAR_DECL(expected_minus1,int,8,8) [] = { 0x40, 0x40, 0x40, 0x40,\n \t\t\t\t\t      0x40, 0x40, 0x40, 0x40 };\n@@ -243,25 +150,6 @@ VECT_VAR_DECL(expected_minus1,uint,32,4) [] = { 0x80000000, 0x80000000,\n VECT_VAR_DECL(expected_minus1,uint,64,2) [] = { 0x8000000000000000,\n \t\t\t\t\t\t0x8000000000000000 };\n \n-/* Expected values of cumulative_saturation flag with input=max and\n-   shift by -3.  */\n-int VECT_VAR(expected_cumulative_sat_minus3,int,8,8) = 0;\n-int VECT_VAR(expected_cumulative_sat_minus3,int,16,4) = 0;\n-int VECT_VAR(expected_cumulative_sat_minus3,int,32,2) = 0;\n-int VECT_VAR(expected_cumulative_sat_minus3,int,64,1) = 0;\n-int VECT_VAR(expected_cumulative_sat_minus3,uint,8,8) = 0;\n-int VECT_VAR(expected_cumulative_sat_minus3,uint,16,4) = 0;\n-int VECT_VAR(expected_cumulative_sat_minus3,uint,32,2) = 0;\n-int VECT_VAR(expected_cumulative_sat_minus3,uint,64,1) = 0;\n-int VECT_VAR(expected_cumulative_sat_minus3,int,8,16) = 0;\n-int VECT_VAR(expected_cumulative_sat_minus3,int,16,8) = 0;\n-int VECT_VAR(expected_cumulative_sat_minus3,int,32,4) = 0;\n-int VECT_VAR(expected_cumulative_sat_minus3,int,64,2) = 0;\n-int VECT_VAR(expected_cumulative_sat_minus3,uint,8,16) = 0;\n-int VECT_VAR(expected_cumulative_sat_minus3,uint,16,8) = 0;\n-int VECT_VAR(expected_cumulative_sat_minus3,uint,32,4) = 0;\n-int VECT_VAR(expected_cumulative_sat_minus3,uint,64,2) = 0;\n-\n /* Expected results with input=max and shift by -3.  */\n VECT_VAR_DECL(expected_minus3,int,8,8) [] = { 0x10, 0x10, 0x10, 0x10,\n \t\t\t\t\t      0x10, 0x10, 0x10, 0x10 };\n@@ -294,25 +182,6 @@ VECT_VAR_DECL(expected_minus3,uint,32,4) [] = { 0x20000000, 0x20000000,\n VECT_VAR_DECL(expected_minus3,uint,64,2) [] = { 0x2000000000000000,\n \t\t\t\t\t\t0x2000000000000000 };\n \n-/* Expected values of cumulative_saturation flag with input=max and\n-   large shift amount.  */\n-int VECT_VAR(expected_cumulative_sat_large_sh,int,8,8) = 1;\n-int VECT_VAR(expected_cumulative_sat_large_sh,int,16,4) = 1;\n-int VECT_VAR(expected_cumulative_sat_large_sh,int,32,2) = 1;\n-int VECT_VAR(expected_cumulative_sat_large_sh,int,64,1) = 1;\n-int VECT_VAR(expected_cumulative_sat_large_sh,uint,8,8) = 1;\n-int VECT_VAR(expected_cumulative_sat_large_sh,uint,16,4) = 1;\n-int VECT_VAR(expected_cumulative_sat_large_sh,uint,32,2) = 1;\n-int VECT_VAR(expected_cumulative_sat_large_sh,uint,64,1) = 1;\n-int VECT_VAR(expected_cumulative_sat_large_sh,int,8,16) = 1;\n-int VECT_VAR(expected_cumulative_sat_large_sh,int,16,8) = 1;\n-int VECT_VAR(expected_cumulative_sat_large_sh,int,32,4) = 1;\n-int VECT_VAR(expected_cumulative_sat_large_sh,int,64,2) = 1;\n-int VECT_VAR(expected_cumulative_sat_large_sh,uint,8,16) = 1;\n-int VECT_VAR(expected_cumulative_sat_large_sh,uint,16,8) = 1;\n-int VECT_VAR(expected_cumulative_sat_large_sh,uint,32,4) = 1;\n-int VECT_VAR(expected_cumulative_sat_large_sh,uint,64,2) = 1;\n-\n /* Expected results with input=max and large shift amount.  */\n VECT_VAR_DECL(expected_large_sh,int,8,8) [] = { 0x7f, 0x7f, 0x7f, 0x7f,\n \t\t\t\t\t\t0x7f, 0x7f, 0x7f, 0x7f };\n@@ -351,25 +220,6 @@ VECT_VAR_DECL(expected_large_sh,uint,32,4) [] = { 0xffffffff, 0xffffffff,\n VECT_VAR_DECL(expected_large_sh,uint,64,2) [] = { 0xffffffffffffffff,\n \t\t\t\t\t\t  0xffffffffffffffff };\n \n-/* Expected values of cumulative_saturation flag with negative input and\n-   large shift amount.  */\n-int VECT_VAR(expected_cumulative_sat_neg_large_sh,int,8,8) = 1;\n-int VECT_VAR(expected_cumulative_sat_neg_large_sh,int,16,4) = 1;\n-int VECT_VAR(expected_cumulative_sat_neg_large_sh,int,32,2) = 1;\n-int VECT_VAR(expected_cumulative_sat_neg_large_sh,int,64,1) = 1;\n-int VECT_VAR(expected_cumulative_sat_neg_large_sh,uint,8,8) = 1;\n-int VECT_VAR(expected_cumulative_sat_neg_large_sh,uint,16,4) = 1;\n-int VECT_VAR(expected_cumulative_sat_neg_large_sh,uint,32,2) = 1;\n-int VECT_VAR(expected_cumulative_sat_neg_large_sh,uint,64,1) = 1;\n-int VECT_VAR(expected_cumulative_sat_neg_large_sh,int,8,16) = 1;\n-int VECT_VAR(expected_cumulative_sat_neg_large_sh,int,16,8) = 1;\n-int VECT_VAR(expected_cumulative_sat_neg_large_sh,int,32,4) = 1;\n-int VECT_VAR(expected_cumulative_sat_neg_large_sh,int,64,2) = 1;\n-int VECT_VAR(expected_cumulative_sat_neg_large_sh,uint,8,16) = 1;\n-int VECT_VAR(expected_cumulative_sat_neg_large_sh,uint,16,8) = 1;\n-int VECT_VAR(expected_cumulative_sat_neg_large_sh,uint,32,4) = 1;\n-int VECT_VAR(expected_cumulative_sat_neg_large_sh,uint,64,2) = 1;\n-\n /* Expected results with negative input and large shift amount.  */\n VECT_VAR_DECL(expected_neg_large_sh,int,8,8) [] = { 0x80, 0x80, 0x80, 0x80,\n \t\t\t\t\t\t    0x80, 0x80, 0x80, 0x80 };\n@@ -411,25 +261,6 @@ VECT_VAR_DECL(expected_neg_large_sh,uint,32,4) [] = { 0xffffffff,\n VECT_VAR_DECL(expected_neg_large_sh,uint,64,2) [] = { 0xffffffffffffffff,\n \t\t\t\t\t\t      0xffffffffffffffff };\n \n-/* Expected values of cumulative_saturation flag with max/min input and\n-   large negative shift amount.  */\n-int VECT_VAR(expected_cumulative_sat_large_neg_sh,int,8,8) = 0;\n-int VECT_VAR(expected_cumulative_sat_large_neg_sh,int,16,4) = 0;\n-int VECT_VAR(expected_cumulative_sat_large_neg_sh,int,32,2) = 0;\n-int VECT_VAR(expected_cumulative_sat_large_neg_sh,int,64,1) = 0;\n-int VECT_VAR(expected_cumulative_sat_large_neg_sh,uint,8,8) = 0;\n-int VECT_VAR(expected_cumulative_sat_large_neg_sh,uint,16,4) = 0;\n-int VECT_VAR(expected_cumulative_sat_large_neg_sh,uint,32,2) = 0;\n-int VECT_VAR(expected_cumulative_sat_large_neg_sh,uint,64,1) = 0;\n-int VECT_VAR(expected_cumulative_sat_large_neg_sh,int,8,16) = 0;\n-int VECT_VAR(expected_cumulative_sat_large_neg_sh,int,16,8) = 0;\n-int VECT_VAR(expected_cumulative_sat_large_neg_sh,int,32,4) = 0;\n-int VECT_VAR(expected_cumulative_sat_large_neg_sh,int,64,2) = 0;\n-int VECT_VAR(expected_cumulative_sat_large_neg_sh,uint,8,16) = 0;\n-int VECT_VAR(expected_cumulative_sat_large_neg_sh,uint,16,8) = 0;\n-int VECT_VAR(expected_cumulative_sat_large_neg_sh,uint,32,4) = 0;\n-int VECT_VAR(expected_cumulative_sat_large_neg_sh,uint,64,2) = 0;\n-\n /* Expected results with max/min input and large negative shift amount.  */\n VECT_VAR_DECL(expected_large_neg_sh,int,8,8) [] = { 0x0, 0x0, 0x0, 0x0,\n \t\t\t\t\t\t    0x0, 0x0, 0x0, 0x0 };\n@@ -458,25 +289,6 @@ VECT_VAR_DECL(expected_large_neg_sh,uint,16,8) [] = { 0x0, 0x0, 0x0, 0x0,\n VECT_VAR_DECL(expected_large_neg_sh,uint,32,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n VECT_VAR_DECL(expected_large_neg_sh,uint,64,2) [] = { 0x0, 0x0 };\n \n-/* Expected values of cumulative_saturation flag with input=0 and\n-   large negative shift amount.  */\n-int VECT_VAR(expected_cumulative_sat_0_large_neg_sh,int,8,8) = 0;\n-int VECT_VAR(expected_cumulative_sat_0_large_neg_sh,int,16,4) = 0;\n-int VECT_VAR(expected_cumulative_sat_0_large_neg_sh,int,32,2) = 0;\n-int VECT_VAR(expected_cumulative_sat_0_large_neg_sh,int,64,1) = 0;\n-int VECT_VAR(expected_cumulative_sat_0_large_neg_sh,uint,8,8) = 0;\n-int VECT_VAR(expected_cumulative_sat_0_large_neg_sh,uint,16,4) = 0;\n-int VECT_VAR(expected_cumulative_sat_0_large_neg_sh,uint,32,2) = 0;\n-int VECT_VAR(expected_cumulative_sat_0_large_neg_sh,uint,64,1) = 0;\n-int VECT_VAR(expected_cumulative_sat_0_large_neg_sh,int,8,16) = 0;\n-int VECT_VAR(expected_cumulative_sat_0_large_neg_sh,int,16,8) = 0;\n-int VECT_VAR(expected_cumulative_sat_0_large_neg_sh,int,32,4) = 0;\n-int VECT_VAR(expected_cumulative_sat_0_large_neg_sh,int,64,2) = 0;\n-int VECT_VAR(expected_cumulative_sat_0_large_neg_sh,uint,8,16) = 0;\n-int VECT_VAR(expected_cumulative_sat_0_large_neg_sh,uint,16,8) = 0;\n-int VECT_VAR(expected_cumulative_sat_0_large_neg_sh,uint,32,4) = 0;\n-int VECT_VAR(expected_cumulative_sat_0_large_neg_sh,uint,64,2) = 0;\n-\n /* Expected results with input=0 and large negative shift amount.  */\n VECT_VAR_DECL(expected_0_large_neg_sh,int,8,8) [] = { 0x0, 0x0, 0x0, 0x0,\n \t\t\t\t\t\t      0x0, 0x0, 0x0, 0x0 };\n@@ -514,21 +326,20 @@ VECT_VAR_DECL(expected_0_large_neg_sh,uint,64,2) [] = { 0x0, 0x0 };\n FNNAME (INSN)\n {\n   /* Basic test: v3=vqrshl(v1,v2), then store the result.  */\n-#define TEST_VQRSHL2(INSN, T3, Q, T1, T2, W, N, EXPECTED_CUMULATIVE_SAT, CMT) \\\n+#define TEST_VQRSHL2(INSN, T3, Q, T1, T2, W, N, CMT) \\\n   Set_Neon_Cumulative_Sat(0, VECT_VAR(vector_res, T1, W, N));\t\t\\\n   VECT_VAR(vector_res, T1, W, N) =\t\t\t\t\t\\\n     INSN##Q##_##T2##W(VECT_VAR(vector, T1, W, N),\t\t\t\\\n \t\t      VECT_VAR(vector_shift, T3, W, N));\t\t\\\n   vst1##Q##_##T2##W(VECT_VAR(result, T1, W, N),\t\t\t\t\\\n-\t\t    VECT_VAR(vector_res, T1, W, N));\t\t\t\\\n-  CHECK_CUMULATIVE_SAT(TEST_MSG, T1, W, N, EXPECTED_CUMULATIVE_SAT, CMT)\n+\t\t    VECT_VAR(vector_res, T1, W, N))\n \n   /* Two auxliary macros are necessary to expand INSN */\n-#define TEST_VQRSHL1(INSN, T3, Q, T1, T2, W, N, EXPECTED_CUMULATIVE_SAT, CMT) \\\n-  TEST_VQRSHL2(INSN, T3, Q, T1, T2, W, N, EXPECTED_CUMULATIVE_SAT, CMT)\n+#define TEST_VQRSHL1(INSN, T3, Q, T1, T2, W, N, CMT) \\\n+  TEST_VQRSHL2(INSN, T3, Q, T1, T2, W, N, CMT)\n \n-#define TEST_VQRSHL(T3, Q, T1, T2, W, N, EXPECTED_CUMULATIVE_SAT, CMT)\t\\\n-  TEST_VQRSHL1(INSN, T3, Q, T1, T2, W, N, EXPECTED_CUMULATIVE_SAT, CMT)\n+#define TEST_VQRSHL(T3, Q, T1, T2, W, N, CMT)\t\\\n+  TEST_VQRSHL1(INSN, T3, Q, T1, T2, W, N, CMT)\n \n   DECL_VARIABLE_ALL_VARIANTS(vector);\n   DECL_VARIABLE_ALL_VARIANTS(vector_res);\n@@ -568,22 +379,22 @@ FNNAME (INSN)\n   VDUP(vector_shift, q, int, s, 64, 2, 64);\n \n #define CMT \" (with input = 0)\"\n-  TEST_VQRSHL(int, , int, s, 8, 8, expected_cumulative_sat_0, CMT);\n-  TEST_VQRSHL(int, , int, s, 16, 4, expected_cumulative_sat_0, CMT);\n-  TEST_VQRSHL(int, , int, s, 32, 2, expected_cumulative_sat_0, CMT);\n-  TEST_VQRSHL(int, , int, s, 64, 1, expected_cumulative_sat_0, CMT);\n-  TEST_VQRSHL(int, , uint, u, 8, 8, expected_cumulative_sat_0, CMT);\n-  TEST_VQRSHL(int, , uint, u, 16, 4, expected_cumulative_sat_0, CMT);\n-  TEST_VQRSHL(int, , uint, u, 32, 2, expected_cumulative_sat_0, CMT);\n-  TEST_VQRSHL(int, , uint, u, 64, 1, expected_cumulative_sat_0, CMT);\n-  TEST_VQRSHL(int, q, int, s, 8, 16, expected_cumulative_sat_0, CMT);\n-  TEST_VQRSHL(int, q, int, s, 16, 8, expected_cumulative_sat_0, CMT);\n-  TEST_VQRSHL(int, q, int, s, 32, 4, expected_cumulative_sat_0, CMT);\n-  TEST_VQRSHL(int, q, int, s, 64, 2, expected_cumulative_sat_0, CMT);\n-  TEST_VQRSHL(int, q, uint, u, 8, 16, expected_cumulative_sat_0, CMT);\n-  TEST_VQRSHL(int, q, uint, u, 16, 8, expected_cumulative_sat_0, CMT);\n-  TEST_VQRSHL(int, q, uint, u, 32, 4, expected_cumulative_sat_0, CMT);\n-  TEST_VQRSHL(int, q, uint, u, 64, 2, expected_cumulative_sat_0, CMT);\n+  TEST_VQRSHL(int, , int, s, 8, 8, CMT);\n+  TEST_VQRSHL(int, , int, s, 16, 4, CMT);\n+  TEST_VQRSHL(int, , int, s, 32, 2, CMT);\n+  TEST_VQRSHL(int, , int, s, 64, 1, CMT);\n+  TEST_VQRSHL(int, , uint, u, 8, 8, CMT);\n+  TEST_VQRSHL(int, , uint, u, 16, 4, CMT);\n+  TEST_VQRSHL(int, , uint, u, 32, 2, CMT);\n+  TEST_VQRSHL(int, , uint, u, 64, 1, CMT);\n+  TEST_VQRSHL(int, q, int, s, 8, 16, CMT);\n+  TEST_VQRSHL(int, q, int, s, 16, 8, CMT);\n+  TEST_VQRSHL(int, q, int, s, 32, 4, CMT);\n+  TEST_VQRSHL(int, q, int, s, 64, 2, CMT);\n+  TEST_VQRSHL(int, q, uint, u, 8, 16, CMT);\n+  TEST_VQRSHL(int, q, uint, u, 16, 8, CMT);\n+  TEST_VQRSHL(int, q, uint, u, 32, 4, CMT);\n+  TEST_VQRSHL(int, q, uint, u, 64, 2, CMT);\n \n   CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_0, CMT);\n   CHECK(TEST_MSG, int, 16, 4, PRIx16, expected_0, CMT);\n@@ -615,22 +426,22 @@ FNNAME (INSN)\n \n #undef CMT\n #define CMT \" (input 0 and negative shift amount)\"\n-  TEST_VQRSHL(int, , int, s, 8, 8, expected_cumulative_sat_0_neg, CMT);\n-  TEST_VQRSHL(int, , int, s, 16, 4, expected_cumulative_sat_0_neg, CMT);\n-  TEST_VQRSHL(int, , int, s, 32, 2, expected_cumulative_sat_0_neg, CMT);\n-  TEST_VQRSHL(int, , int, s, 64, 1, expected_cumulative_sat_0_neg, CMT);\n-  TEST_VQRSHL(int, , uint, u, 8, 8, expected_cumulative_sat_0_neg, CMT);\n-  TEST_VQRSHL(int, , uint, u, 16, 4, expected_cumulative_sat_0_neg, CMT);\n-  TEST_VQRSHL(int, , uint, u, 32, 2, expected_cumulative_sat_0_neg, CMT);\n-  TEST_VQRSHL(int, , uint, u, 64, 1, expected_cumulative_sat_0_neg, CMT);\n-  TEST_VQRSHL(int, q, int, s, 8, 16, expected_cumulative_sat_0_neg, CMT);\n-  TEST_VQRSHL(int, q, int, s, 16, 8, expected_cumulative_sat_0_neg, CMT);\n-  TEST_VQRSHL(int, q, int, s, 32, 4, expected_cumulative_sat_0_neg, CMT);\n-  TEST_VQRSHL(int, q, int, s, 64, 2, expected_cumulative_sat_0_neg, CMT);\n-  TEST_VQRSHL(int, q, uint, u, 8, 16, expected_cumulative_sat_0_neg, CMT);\n-  TEST_VQRSHL(int, q, uint, u, 16, 8, expected_cumulative_sat_0_neg, CMT);\n-  TEST_VQRSHL(int, q, uint, u, 32, 4, expected_cumulative_sat_0_neg, CMT);\n-  TEST_VQRSHL(int, q, uint, u, 64, 2, expected_cumulative_sat_0_neg, CMT);\n+  TEST_VQRSHL(int, , int, s, 8, 8, CMT);\n+  TEST_VQRSHL(int, , int, s, 16, 4, CMT);\n+  TEST_VQRSHL(int, , int, s, 32, 2, CMT);\n+  TEST_VQRSHL(int, , int, s, 64, 1, CMT);\n+  TEST_VQRSHL(int, , uint, u, 8, 8, CMT);\n+  TEST_VQRSHL(int, , uint, u, 16, 4, CMT);\n+  TEST_VQRSHL(int, , uint, u, 32, 2, CMT);\n+  TEST_VQRSHL(int, , uint, u, 64, 1, CMT);\n+  TEST_VQRSHL(int, q, int, s, 8, 16, CMT);\n+  TEST_VQRSHL(int, q, int, s, 16, 8, CMT);\n+  TEST_VQRSHL(int, q, int, s, 32, 4, CMT);\n+  TEST_VQRSHL(int, q, int, s, 64, 2, CMT);\n+  TEST_VQRSHL(int, q, uint, u, 8, 16, CMT);\n+  TEST_VQRSHL(int, q, uint, u, 16, 8, CMT);\n+  TEST_VQRSHL(int, q, uint, u, 32, 4, CMT);\n+  TEST_VQRSHL(int, q, uint, u, 64, 2, CMT);\n \n   CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_0_neg, CMT);\n   CHECK(TEST_MSG, int, 16, 4, PRIx16, expected_0_neg, CMT);\n@@ -665,22 +476,22 @@ FNNAME (INSN)\n \n #undef CMT\n #define CMT \"\"\n-  TEST_VQRSHL(int, , int, s, 8, 8, expected_cumulative_sat, CMT);\n-  TEST_VQRSHL(int, , int, s, 16, 4, expected_cumulative_sat, CMT);\n-  TEST_VQRSHL(int, , int, s, 32, 2, expected_cumulative_sat, CMT);\n-  TEST_VQRSHL(int, , int, s, 64, 1, expected_cumulative_sat, CMT);\n-  TEST_VQRSHL(int, , uint, u, 8, 8, expected_cumulative_sat, CMT);\n-  TEST_VQRSHL(int, , uint, u, 16, 4, expected_cumulative_sat, CMT);\n-  TEST_VQRSHL(int, , uint, u, 32, 2, expected_cumulative_sat, CMT);\n-  TEST_VQRSHL(int, , uint, u, 64, 1, expected_cumulative_sat, CMT);\n-  TEST_VQRSHL(int, q, int, s, 8, 16, expected_cumulative_sat, CMT);\n-  TEST_VQRSHL(int, q, int, s, 16, 8, expected_cumulative_sat, CMT);\n-  TEST_VQRSHL(int, q, int, s, 32, 4, expected_cumulative_sat, CMT);\n-  TEST_VQRSHL(int, q, int, s, 64, 2, expected_cumulative_sat, CMT);\n-  TEST_VQRSHL(int, q, uint, u, 8, 16, expected_cumulative_sat, CMT);\n-  TEST_VQRSHL(int, q, uint, u, 16, 8, expected_cumulative_sat, CMT);\n-  TEST_VQRSHL(int, q, uint, u, 32, 4, expected_cumulative_sat, CMT);\n-  TEST_VQRSHL(int, q, uint, u, 64, 2, expected_cumulative_sat, CMT);\n+  TEST_VQRSHL(int, , int, s, 8, 8, CMT);\n+  TEST_VQRSHL(int, , int, s, 16, 4, CMT);\n+  TEST_VQRSHL(int, , int, s, 32, 2, CMT);\n+  TEST_VQRSHL(int, , int, s, 64, 1, CMT);\n+  TEST_VQRSHL(int, , uint, u, 8, 8, CMT);\n+  TEST_VQRSHL(int, , uint, u, 16, 4, CMT);\n+  TEST_VQRSHL(int, , uint, u, 32, 2, CMT);\n+  TEST_VQRSHL(int, , uint, u, 64, 1, CMT);\n+  TEST_VQRSHL(int, q, int, s, 8, 16, CMT);\n+  TEST_VQRSHL(int, q, int, s, 16, 8, CMT);\n+  TEST_VQRSHL(int, q, int, s, 32, 4, CMT);\n+  TEST_VQRSHL(int, q, int, s, 64, 2, CMT);\n+  TEST_VQRSHL(int, q, uint, u, 8, 16, CMT);\n+  TEST_VQRSHL(int, q, uint, u, 16, 8, CMT);\n+  TEST_VQRSHL(int, q, uint, u, 32, 4, CMT);\n+  TEST_VQRSHL(int, q, uint, u, 64, 2, CMT);\n \n   CHECK(TEST_MSG, int, 8, 8, PRIx8, expected, CMT);\n   CHECK(TEST_MSG, int, 16, 4, PRIx16, expected, CMT);\n@@ -712,22 +523,22 @@ FNNAME (INSN)\n \n #undef CMT\n #define CMT \" (negative shift amount)\"\n-  TEST_VQRSHL(int, , int, s, 8, 8, expected_cumulative_sat_neg, CMT);\n-  TEST_VQRSHL(int, , int, s, 16, 4, expected_cumulative_sat_neg, CMT);\n-  TEST_VQRSHL(int, , int, s, 32, 2, expected_cumulative_sat_neg, CMT);\n-  TEST_VQRSHL(int, , int, s, 64, 1, expected_cumulative_sat_neg, CMT);\n-  TEST_VQRSHL(int, , uint, u, 8, 8, expected_cumulative_sat_neg, CMT);\n-  TEST_VQRSHL(int, , uint, u, 16, 4, expected_cumulative_sat_neg, CMT);\n-  TEST_VQRSHL(int, , uint, u, 32, 2, expected_cumulative_sat_neg, CMT);\n-  TEST_VQRSHL(int, , uint, u, 64, 1, expected_cumulative_sat_neg, CMT);\n-  TEST_VQRSHL(int, q, int, s, 8, 16, expected_cumulative_sat_neg, CMT);\n-  TEST_VQRSHL(int, q, int, s, 16, 8, expected_cumulative_sat_neg, CMT);\n-  TEST_VQRSHL(int, q, int, s, 32, 4, expected_cumulative_sat_neg, CMT);\n-  TEST_VQRSHL(int, q, int, s, 64, 2, expected_cumulative_sat_neg, CMT);\n-  TEST_VQRSHL(int, q, uint, u, 8, 16, expected_cumulative_sat_neg, CMT);\n-  TEST_VQRSHL(int, q, uint, u, 16, 8, expected_cumulative_sat_neg, CMT);\n-  TEST_VQRSHL(int, q, uint, u, 32, 4, expected_cumulative_sat_neg, CMT);\n-  TEST_VQRSHL(int, q, uint, u, 64, 2, expected_cumulative_sat_neg, CMT);\n+  TEST_VQRSHL(int, , int, s, 8, 8, CMT);\n+  TEST_VQRSHL(int, , int, s, 16, 4, CMT);\n+  TEST_VQRSHL(int, , int, s, 32, 2, CMT);\n+  TEST_VQRSHL(int, , int, s, 64, 1, CMT);\n+  TEST_VQRSHL(int, , uint, u, 8, 8, CMT);\n+  TEST_VQRSHL(int, , uint, u, 16, 4, CMT);\n+  TEST_VQRSHL(int, , uint, u, 32, 2, CMT);\n+  TEST_VQRSHL(int, , uint, u, 64, 1, CMT);\n+  TEST_VQRSHL(int, q, int, s, 8, 16, CMT);\n+  TEST_VQRSHL(int, q, int, s, 16, 8, CMT);\n+  TEST_VQRSHL(int, q, int, s, 32, 4, CMT);\n+  TEST_VQRSHL(int, q, int, s, 64, 2, CMT);\n+  TEST_VQRSHL(int, q, uint, u, 8, 16, CMT);\n+  TEST_VQRSHL(int, q, uint, u, 16, 8, CMT);\n+  TEST_VQRSHL(int, q, uint, u, 32, 4, CMT);\n+  TEST_VQRSHL(int, q, uint, u, 64, 2, CMT);\n \n   CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_neg, CMT);\n   CHECK(TEST_MSG, int, 16, 4, PRIx16, expected_neg, CMT);\n@@ -779,22 +590,22 @@ FNNAME (INSN)\n \n #undef CMT\n #define CMT \" (checking cumulative saturation: shift by -1)\"\n-  TEST_VQRSHL(int, , int, s, 8, 8, expected_cumulative_sat_minus1, CMT);\n-  TEST_VQRSHL(int, , int, s, 16, 4, expected_cumulative_sat_minus1, CMT);\n-  TEST_VQRSHL(int, , int, s, 32, 2, expected_cumulative_sat_minus1, CMT);\n-  TEST_VQRSHL(int, , int, s, 64, 1, expected_cumulative_sat_minus1, CMT);\n-  TEST_VQRSHL(int, , uint, u, 8, 8, expected_cumulative_sat_minus1, CMT);\n-  TEST_VQRSHL(int, , uint, u, 16, 4, expected_cumulative_sat_minus1, CMT);\n-  TEST_VQRSHL(int, , uint, u, 32, 2, expected_cumulative_sat_minus1, CMT);\n-  TEST_VQRSHL(int, , uint, u, 64, 1, expected_cumulative_sat_minus1, CMT);\n-  TEST_VQRSHL(int, q, int, s, 8, 16, expected_cumulative_sat_minus1, CMT);\n-  TEST_VQRSHL(int, q, int, s, 16, 8, expected_cumulative_sat_minus1, CMT);\n-  TEST_VQRSHL(int, q, int, s, 32, 4, expected_cumulative_sat_minus1, CMT);\n-  TEST_VQRSHL(int, q, int, s, 64, 2, expected_cumulative_sat_minus1, CMT);\n-  TEST_VQRSHL(int, q, uint, u, 8, 16, expected_cumulative_sat_minus1, CMT);\n-  TEST_VQRSHL(int, q, uint, u, 16, 8, expected_cumulative_sat_minus1, CMT);\n-  TEST_VQRSHL(int, q, uint, u, 32, 4, expected_cumulative_sat_minus1, CMT);\n-  TEST_VQRSHL(int, q, uint, u, 64, 2, expected_cumulative_sat_minus1, CMT);\n+  TEST_VQRSHL(int, , int, s, 8, 8, CMT);\n+  TEST_VQRSHL(int, , int, s, 16, 4, CMT);\n+  TEST_VQRSHL(int, , int, s, 32, 2, CMT);\n+  TEST_VQRSHL(int, , int, s, 64, 1, CMT);\n+  TEST_VQRSHL(int, , uint, u, 8, 8, CMT);\n+  TEST_VQRSHL(int, , uint, u, 16, 4, CMT);\n+  TEST_VQRSHL(int, , uint, u, 32, 2, CMT);\n+  TEST_VQRSHL(int, , uint, u, 64, 1, CMT);\n+  TEST_VQRSHL(int, q, int, s, 8, 16, CMT);\n+  TEST_VQRSHL(int, q, int, s, 16, 8, CMT);\n+  TEST_VQRSHL(int, q, int, s, 32, 4, CMT);\n+  TEST_VQRSHL(int, q, int, s, 64, 2, CMT);\n+  TEST_VQRSHL(int, q, uint, u, 8, 16, CMT);\n+  TEST_VQRSHL(int, q, uint, u, 16, 8, CMT);\n+  TEST_VQRSHL(int, q, uint, u, 32, 4, CMT);\n+  TEST_VQRSHL(int, q, uint, u, 64, 2, CMT);\n \n   CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_minus1, CMT);\n   CHECK(TEST_MSG, int, 16, 4, PRIx16, expected_minus1, CMT);\n@@ -827,22 +638,22 @@ FNNAME (INSN)\n \n #undef CMT\n #define CMT \" (checking cumulative saturation: shift by -3)\"\n-  TEST_VQRSHL(int, , int, s, 8, 8, expected_cumulative_sat_minus3, CMT);\n-  TEST_VQRSHL(int, , int, s, 16, 4, expected_cumulative_sat_minus3, CMT);\n-  TEST_VQRSHL(int, , int, s, 32, 2, expected_cumulative_sat_minus3, CMT);\n-  TEST_VQRSHL(int, , int, s, 64, 1, expected_cumulative_sat_minus3, CMT);\n-  TEST_VQRSHL(int, , uint, u, 8, 8, expected_cumulative_sat_minus3, CMT);\n-  TEST_VQRSHL(int, , uint, u, 16, 4, expected_cumulative_sat_minus3, CMT);\n-  TEST_VQRSHL(int, , uint, u, 32, 2, expected_cumulative_sat_minus3, CMT);\n-  TEST_VQRSHL(int, , uint, u, 64, 1, expected_cumulative_sat_minus3, CMT);\n-  TEST_VQRSHL(int, q, int, s, 8, 16, expected_cumulative_sat_minus3, CMT);\n-  TEST_VQRSHL(int, q, int, s, 16, 8, expected_cumulative_sat_minus3, CMT);\n-  TEST_VQRSHL(int, q, int, s, 32, 4, expected_cumulative_sat_minus3, CMT);\n-  TEST_VQRSHL(int, q, int, s, 64, 2, expected_cumulative_sat_minus3, CMT);\n-  TEST_VQRSHL(int, q, uint, u, 8, 16, expected_cumulative_sat_minus3, CMT);\n-  TEST_VQRSHL(int, q, uint, u, 16, 8, expected_cumulative_sat_minus3, CMT);\n-  TEST_VQRSHL(int, q, uint, u, 32, 4, expected_cumulative_sat_minus3, CMT);\n-  TEST_VQRSHL(int, q, uint, u, 64, 2, expected_cumulative_sat_minus3, CMT);\n+  TEST_VQRSHL(int, , int, s, 8, 8, CMT);\n+  TEST_VQRSHL(int, , int, s, 16, 4, CMT);\n+  TEST_VQRSHL(int, , int, s, 32, 2, CMT);\n+  TEST_VQRSHL(int, , int, s, 64, 1, CMT);\n+  TEST_VQRSHL(int, , uint, u, 8, 8, CMT);\n+  TEST_VQRSHL(int, , uint, u, 16, 4, CMT);\n+  TEST_VQRSHL(int, , uint, u, 32, 2, CMT);\n+  TEST_VQRSHL(int, , uint, u, 64, 1, CMT);\n+  TEST_VQRSHL(int, q, int, s, 8, 16, CMT);\n+  TEST_VQRSHL(int, q, int, s, 16, 8, CMT);\n+  TEST_VQRSHL(int, q, int, s, 32, 4, CMT);\n+  TEST_VQRSHL(int, q, int, s, 64, 2, CMT);\n+  TEST_VQRSHL(int, q, uint, u, 8, 16, CMT);\n+  TEST_VQRSHL(int, q, uint, u, 16, 8, CMT);\n+  TEST_VQRSHL(int, q, uint, u, 32, 4, CMT);\n+  TEST_VQRSHL(int, q, uint, u, 64, 2, CMT);\n \n   CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_minus3, CMT);\n   CHECK(TEST_MSG, int, 16, 4, PRIx16, expected_minus3, CMT);\n@@ -874,22 +685,22 @@ FNNAME (INSN)\n \n #undef CMT\n #define CMT \" (checking cumulative saturation: large shift amount)\"\n-  TEST_VQRSHL(int, , int, s, 8, 8, expected_cumulative_sat_large_sh, CMT);\n-  TEST_VQRSHL(int, , int, s, 16, 4, expected_cumulative_sat_large_sh, CMT);\n-  TEST_VQRSHL(int, , int, s, 32, 2, expected_cumulative_sat_large_sh, CMT);\n-  TEST_VQRSHL(int, , int, s, 64, 1, expected_cumulative_sat_large_sh, CMT);\n-  TEST_VQRSHL(int, , uint, u, 8, 8, expected_cumulative_sat_large_sh, CMT);\n-  TEST_VQRSHL(int, , uint, u, 16, 4, expected_cumulative_sat_large_sh, CMT);\n-  TEST_VQRSHL(int, , uint, u, 32, 2, expected_cumulative_sat_large_sh, CMT);\n-  TEST_VQRSHL(int, , uint, u, 64, 1, expected_cumulative_sat_large_sh, CMT);\n-  TEST_VQRSHL(int, q, int, s, 8, 16, expected_cumulative_sat_large_sh, CMT);\n-  TEST_VQRSHL(int, q, int, s, 16, 8, expected_cumulative_sat_large_sh, CMT);\n-  TEST_VQRSHL(int, q, int, s, 32, 4, expected_cumulative_sat_large_sh, CMT);\n-  TEST_VQRSHL(int, q, int, s, 64, 2, expected_cumulative_sat_large_sh, CMT);\n-  TEST_VQRSHL(int, q, uint, u, 8, 16, expected_cumulative_sat_large_sh, CMT);\n-  TEST_VQRSHL(int, q, uint, u, 16, 8, expected_cumulative_sat_large_sh, CMT);\n-  TEST_VQRSHL(int, q, uint, u, 32, 4, expected_cumulative_sat_large_sh, CMT);\n-  TEST_VQRSHL(int, q, uint, u, 64, 2, expected_cumulative_sat_large_sh, CMT);\n+  TEST_VQRSHL(int, , int, s, 8, 8, CMT);\n+  TEST_VQRSHL(int, , int, s, 16, 4, CMT);\n+  TEST_VQRSHL(int, , int, s, 32, 2, CMT);\n+  TEST_VQRSHL(int, , int, s, 64, 1, CMT);\n+  TEST_VQRSHL(int, , uint, u, 8, 8, CMT);\n+  TEST_VQRSHL(int, , uint, u, 16, 4, CMT);\n+  TEST_VQRSHL(int, , uint, u, 32, 2, CMT);\n+  TEST_VQRSHL(int, , uint, u, 64, 1, CMT);\n+  TEST_VQRSHL(int, q, int, s, 8, 16, CMT);\n+  TEST_VQRSHL(int, q, int, s, 16, 8, CMT);\n+  TEST_VQRSHL(int, q, int, s, 32, 4, CMT);\n+  TEST_VQRSHL(int, q, int, s, 64, 2, CMT);\n+  TEST_VQRSHL(int, q, uint, u, 8, 16, CMT);\n+  TEST_VQRSHL(int, q, uint, u, 16, 8, CMT);\n+  TEST_VQRSHL(int, q, uint, u, 32, 4, CMT);\n+  TEST_VQRSHL(int, q, uint, u, 64, 2, CMT);\n \n   CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_large_sh, CMT);\n   CHECK(TEST_MSG, int, 16, 4, PRIx16, expected_large_sh, CMT);\n@@ -932,22 +743,22 @@ FNNAME (INSN)\n \n #undef CMT\n #define CMT \" (checking cumulative saturation: large shift amount with negative input)\"\n-  TEST_VQRSHL(int, , int, s, 8, 8, expected_cumulative_sat_neg_large_sh, CMT);\n-  TEST_VQRSHL(int, , int, s, 16, 4, expected_cumulative_sat_neg_large_sh, CMT);\n-  TEST_VQRSHL(int, , int, s, 32, 2, expected_cumulative_sat_neg_large_sh, CMT);\n-  TEST_VQRSHL(int, , int, s, 64, 1, expected_cumulative_sat_neg_large_sh, CMT);\n-  TEST_VQRSHL(int, , uint, u, 8, 8, expected_cumulative_sat_neg_large_sh, CMT);\n-  TEST_VQRSHL(int, , uint, u, 16, 4, expected_cumulative_sat_neg_large_sh, CMT);\n-  TEST_VQRSHL(int, , uint, u, 32, 2, expected_cumulative_sat_neg_large_sh, CMT);\n-  TEST_VQRSHL(int, , uint, u, 64, 1, expected_cumulative_sat_neg_large_sh, CMT);\n-  TEST_VQRSHL(int, q, int, s, 8, 16, expected_cumulative_sat_neg_large_sh, CMT);\n-  TEST_VQRSHL(int, q, int, s, 16, 8, expected_cumulative_sat_neg_large_sh, CMT);\n-  TEST_VQRSHL(int, q, int, s, 32, 4, expected_cumulative_sat_neg_large_sh, CMT);\n-  TEST_VQRSHL(int, q, int, s, 64, 2, expected_cumulative_sat_neg_large_sh, CMT);\n-  TEST_VQRSHL(int, q, uint, u, 8, 16, expected_cumulative_sat_neg_large_sh, CMT);\n-  TEST_VQRSHL(int, q, uint, u, 16, 8, expected_cumulative_sat_neg_large_sh, CMT);\n-  TEST_VQRSHL(int, q, uint, u, 32, 4, expected_cumulative_sat_neg_large_sh, CMT);\n-  TEST_VQRSHL(int, q, uint, u, 64, 2, expected_cumulative_sat_neg_large_sh, CMT);\n+  TEST_VQRSHL(int, , int, s, 8, 8, CMT);\n+  TEST_VQRSHL(int, , int, s, 16, 4, CMT);\n+  TEST_VQRSHL(int, , int, s, 32, 2, CMT);\n+  TEST_VQRSHL(int, , int, s, 64, 1, CMT);\n+  TEST_VQRSHL(int, , uint, u, 8, 8, CMT);\n+  TEST_VQRSHL(int, , uint, u, 16, 4, CMT);\n+  TEST_VQRSHL(int, , uint, u, 32, 2, CMT);\n+  TEST_VQRSHL(int, , uint, u, 64, 1, CMT);\n+  TEST_VQRSHL(int, q, int, s, 8, 16, CMT);\n+  TEST_VQRSHL(int, q, int, s, 16, 8, CMT);\n+  TEST_VQRSHL(int, q, int, s, 32, 4, CMT);\n+  TEST_VQRSHL(int, q, int, s, 64, 2, CMT);\n+  TEST_VQRSHL(int, q, uint, u, 8, 16, CMT);\n+  TEST_VQRSHL(int, q, uint, u, 16, 8, CMT);\n+  TEST_VQRSHL(int, q, uint, u, 32, 4, CMT);\n+  TEST_VQRSHL(int, q, uint, u, 64, 2, CMT);\n \n   CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_neg_large_sh, CMT);\n   CHECK(TEST_MSG, int, 16, 4, PRIx16, expected_neg_large_sh, CMT);\n@@ -990,22 +801,22 @@ FNNAME (INSN)\n \n #undef CMT\n #define CMT \" (checking cumulative saturation: large negative shift amount)\"\n-  TEST_VQRSHL(int, , int, s, 8, 8, expected_cumulative_sat_large_neg_sh, CMT);\n-  TEST_VQRSHL(int, , int, s, 16, 4, expected_cumulative_sat_large_neg_sh, CMT);\n-  TEST_VQRSHL(int, , int, s, 32, 2, expected_cumulative_sat_large_neg_sh, CMT);\n-  TEST_VQRSHL(int, , int, s, 64, 1, expected_cumulative_sat_large_neg_sh, CMT);\n-  TEST_VQRSHL(int, , uint, u, 8, 8, expected_cumulative_sat_large_neg_sh, CMT);\n-  TEST_VQRSHL(int, , uint, u, 16, 4, expected_cumulative_sat_large_neg_sh, CMT);\n-  TEST_VQRSHL(int, , uint, u, 32, 2, expected_cumulative_sat_large_neg_sh, CMT);\n-  TEST_VQRSHL(int, , uint, u, 64, 1, expected_cumulative_sat_large_neg_sh, CMT);\n-  TEST_VQRSHL(int, q, int, s, 8, 16, expected_cumulative_sat_large_neg_sh, CMT);\n-  TEST_VQRSHL(int, q, int, s, 16, 8, expected_cumulative_sat_large_neg_sh, CMT);\n-  TEST_VQRSHL(int, q, int, s, 32, 4, expected_cumulative_sat_large_neg_sh, CMT);\n-  TEST_VQRSHL(int, q, int, s, 64, 2, expected_cumulative_sat_large_neg_sh, CMT);\n-  TEST_VQRSHL(int, q, uint, u, 8, 16, expected_cumulative_sat_large_neg_sh, CMT);\n-  TEST_VQRSHL(int, q, uint, u, 16, 8, expected_cumulative_sat_large_neg_sh, CMT);\n-  TEST_VQRSHL(int, q, uint, u, 32, 4, expected_cumulative_sat_large_neg_sh, CMT);\n-  TEST_VQRSHL(int, q, uint, u, 64, 2, expected_cumulative_sat_large_neg_sh, CMT);\n+  TEST_VQRSHL(int, , int, s, 8, 8, CMT);\n+  TEST_VQRSHL(int, , int, s, 16, 4, CMT);\n+  TEST_VQRSHL(int, , int, s, 32, 2, CMT);\n+  TEST_VQRSHL(int, , int, s, 64, 1, CMT);\n+  TEST_VQRSHL(int, , uint, u, 8, 8, CMT);\n+  TEST_VQRSHL(int, , uint, u, 16, 4, CMT);\n+  TEST_VQRSHL(int, , uint, u, 32, 2, CMT);\n+  TEST_VQRSHL(int, , uint, u, 64, 1, CMT);\n+  TEST_VQRSHL(int, q, int, s, 8, 16, CMT);\n+  TEST_VQRSHL(int, q, int, s, 16, 8, CMT);\n+  TEST_VQRSHL(int, q, int, s, 32, 4, CMT);\n+  TEST_VQRSHL(int, q, int, s, 64, 2, CMT);\n+  TEST_VQRSHL(int, q, uint, u, 8, 16, CMT);\n+  TEST_VQRSHL(int, q, uint, u, 16, 8, CMT);\n+  TEST_VQRSHL(int, q, uint, u, 32, 4, CMT);\n+  TEST_VQRSHL(int, q, uint, u, 64, 2, CMT);\n \n   CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_large_neg_sh, CMT);\n   CHECK(TEST_MSG, int, 16, 4, PRIx16, expected_large_neg_sh, CMT);\n@@ -1048,22 +859,22 @@ FNNAME (INSN)\n \n #undef CMT\n #define CMT \" (checking cumulative saturation: large negative shift amount with 0 input)\"\n-  TEST_VQRSHL(int, , int, s, 8, 8, expected_cumulative_sat_large_neg_sh, CMT);\n-  TEST_VQRSHL(int, , int, s, 16, 4, expected_cumulative_sat_large_neg_sh, CMT);\n-  TEST_VQRSHL(int, , int, s, 32, 2, expected_cumulative_sat_large_neg_sh, CMT);\n-  TEST_VQRSHL(int, , int, s, 64, 1, expected_cumulative_sat_large_neg_sh, CMT);\n-  TEST_VQRSHL(int, , uint, u, 8, 8, expected_cumulative_sat_large_neg_sh, CMT);\n-  TEST_VQRSHL(int, , uint, u, 16, 4, expected_cumulative_sat_large_neg_sh, CMT);\n-  TEST_VQRSHL(int, , uint, u, 32, 2, expected_cumulative_sat_large_neg_sh, CMT);\n-  TEST_VQRSHL(int, , uint, u, 64, 1, expected_cumulative_sat_large_neg_sh, CMT);\n-  TEST_VQRSHL(int, q, int, s, 8, 16, expected_cumulative_sat_large_neg_sh, CMT);\n-  TEST_VQRSHL(int, q, int, s, 16, 8, expected_cumulative_sat_large_neg_sh, CMT);\n-  TEST_VQRSHL(int, q, int, s, 32, 4, expected_cumulative_sat_large_neg_sh, CMT);\n-  TEST_VQRSHL(int, q, int, s, 64, 2, expected_cumulative_sat_large_neg_sh, CMT);\n-  TEST_VQRSHL(int, q, uint, u, 8, 16, expected_cumulative_sat_large_neg_sh, CMT);\n-  TEST_VQRSHL(int, q, uint, u, 16, 8, expected_cumulative_sat_large_neg_sh, CMT);\n-  TEST_VQRSHL(int, q, uint, u, 32, 4, expected_cumulative_sat_large_neg_sh, CMT);\n-  TEST_VQRSHL(int, q, uint, u, 64, 2, expected_cumulative_sat_large_neg_sh, CMT);\n+  TEST_VQRSHL(int, , int, s, 8, 8, CMT);\n+  TEST_VQRSHL(int, , int, s, 16, 4, CMT);\n+  TEST_VQRSHL(int, , int, s, 32, 2, CMT);\n+  TEST_VQRSHL(int, , int, s, 64, 1, CMT);\n+  TEST_VQRSHL(int, , uint, u, 8, 8, CMT);\n+  TEST_VQRSHL(int, , uint, u, 16, 4, CMT);\n+  TEST_VQRSHL(int, , uint, u, 32, 2, CMT);\n+  TEST_VQRSHL(int, , uint, u, 64, 1, CMT);\n+  TEST_VQRSHL(int, q, int, s, 8, 16, CMT);\n+  TEST_VQRSHL(int, q, int, s, 16, 8, CMT);\n+  TEST_VQRSHL(int, q, int, s, 32, 4, CMT);\n+  TEST_VQRSHL(int, q, int, s, 64, 2, CMT);\n+  TEST_VQRSHL(int, q, uint, u, 8, 16, CMT);\n+  TEST_VQRSHL(int, q, uint, u, 16, 8, CMT);\n+  TEST_VQRSHL(int, q, uint, u, 32, 4, CMT);\n+  TEST_VQRSHL(int, q, uint, u, 64, 2, CMT);\n \n   CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_large_neg_sh, CMT);\n   CHECK(TEST_MSG, int, 16, 4, PRIx16, expected_large_neg_sh, CMT);"}, {"sha": "6cf23d439bafc402dd1c7208d7b1bf5d165a9710", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vqrshrn_n.c", "status": "modified", "additions": 24, "deletions": 50, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/763b865a17d32ff1d19720e333999de25132d3d4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqrshrn_n.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/763b865a17d32ff1d19720e333999de25132d3d4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqrshrn_n.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqrshrn_n.c?ref=763b865a17d32ff1d19720e333999de25132d3d4", "patch": "@@ -2,14 +2,6 @@\n #include \"arm-neon-ref.h\"\n #include \"compute-ref-data.h\"\n \n-/* Expected values of cumulative_saturation flag.  */\n-int VECT_VAR(expected_cumulative_sat,int,16,8) = 0;\n-int VECT_VAR(expected_cumulative_sat,int,32,4) = 0;\n-int VECT_VAR(expected_cumulative_sat,int,64,2) = 0;\n-int VECT_VAR(expected_cumulative_sat,uint,16,8) = 1;\n-int VECT_VAR(expected_cumulative_sat,uint,32,4) = 1;\n-int VECT_VAR(expected_cumulative_sat,uint,64,2) = 1;\n-\n /* Expected results.  */\n VECT_VAR_DECL(expected,int,8,8) [] = { 0xf8, 0xf9, 0xf9, 0xfa,\n \t\t\t\t       0xfa, 0xfb, 0xfb, 0xfc };\n@@ -20,14 +12,6 @@ VECT_VAR_DECL(expected,uint,8,8) [] = { 0xff, 0xff, 0xff, 0xff,\n VECT_VAR_DECL(expected,uint,16,4) [] = { 0xffff, 0xffff, 0xffff, 0xffff };\n VECT_VAR_DECL(expected,uint,32,2) [] = { 0xffffffff, 0xffffffff };\n \n-/* Expected values of cumulative_saturation flag with shift by 3.  */\n-int VECT_VAR(expected_cumulative_sat_sh3,int,16,8) = 1;\n-int VECT_VAR(expected_cumulative_sat_sh3,int,32,4) = 1;\n-int VECT_VAR(expected_cumulative_sat_sh3,int,64,2) = 1;\n-int VECT_VAR(expected_cumulative_sat_sh3,uint,16,8) = 1;\n-int VECT_VAR(expected_cumulative_sat_sh3,uint,32,4) = 1;\n-int VECT_VAR(expected_cumulative_sat_sh3,uint,64,2) = 1;\n-\n /* Expected results with shift by 3.  */\n VECT_VAR_DECL(expected_sh3,int,8,8) [] = { 0x7f, 0x7f, 0x7f, 0x7f,\n \t\t\t\t\t   0x7f, 0x7f, 0x7f, 0x7f };\n@@ -38,15 +22,6 @@ VECT_VAR_DECL(expected_sh3,uint,8,8) [] = { 0xff, 0xff, 0xff, 0xff,\n VECT_VAR_DECL(expected_sh3,uint,16,4) [] = { 0xffff, 0xffff, 0xffff, 0xffff };\n VECT_VAR_DECL(expected_sh3,uint,32,2) [] = { 0xffffffff, 0xffffffff };\n \n-/* Expected values of cumulative_saturation flag with shift by max\n-   amount.  */\n-int VECT_VAR(expected_cumulative_sat_shmax,int,16,8) = 1;\n-int VECT_VAR(expected_cumulative_sat_shmax,int,32,4) = 1;\n-int VECT_VAR(expected_cumulative_sat_shmax,int,64,2) = 1;\n-int VECT_VAR(expected_cumulative_sat_shmax,uint,16,8) = 1;\n-int VECT_VAR(expected_cumulative_sat_shmax,uint,32,4) = 1;\n-int VECT_VAR(expected_cumulative_sat_shmax,uint,64,2) = 1;\n-\n /* Expected results with shift by max amount.  */\n VECT_VAR_DECL(expected_shmax,int,8,8) [] = { 0x7f, 0x7f, 0x7f, 0x7f,\n \t\t\t\t\t     0x7f, 0x7f, 0x7f, 0x7f };\n@@ -66,21 +41,20 @@ VECT_VAR_DECL(expected_shmax,uint,32,2) [] = { 0xffffffff, 0xffffffff };\n FNNAME (INSN)\n {\n   /* Basic test: y=vqrshrn_n(x,v), then store the result.  */\n-#define TEST_VQRSHRN_N2(INSN, T1, T2, W, W2, N, V, EXPECTED_CUMULATIVE_SAT, CMT) \\\n+#define TEST_VQRSHRN_N2(INSN, T1, T2, W, W2, N, V, CMT) \\\n   Set_Neon_Cumulative_Sat(0, VECT_VAR(vector_res, T1, W2, N));\t\t\\\n   VECT_VAR(vector_res, T1, W2, N) =\t\t\t\t\t\\\n     INSN##_##T2##W(VECT_VAR(vector, T1, W, N),\t\t\t\t\\\n \t\t   V);\t\t\t\t\t\t\t\\\n   vst1_##T2##W2(VECT_VAR(result, T1, W2, N),\t\t\t\t\\\n-\t\tVECT_VAR(vector_res, T1, W2, N));\t\t\t\\\n-  CHECK_CUMULATIVE_SAT(TEST_MSG, T1, W, N, EXPECTED_CUMULATIVE_SAT, CMT)\n+\t\tVECT_VAR(vector_res, T1, W2, N))\n \n   /* Two auxliary macros are necessary to expand INSN */\n-#define TEST_VQRSHRN_N1(INSN, T1, T2, W, W2, N, V, EXPECTED_CUMULATIVE_SAT, CMT) \\\n-  TEST_VQRSHRN_N2(INSN, T1, T2, W, W2, N, V, EXPECTED_CUMULATIVE_SAT, CMT)\n+#define TEST_VQRSHRN_N1(INSN, T1, T2, W, W2, N, V, CMT) \\\n+  TEST_VQRSHRN_N2(INSN, T1, T2, W, W2, N, V, CMT)\n \n-#define TEST_VQRSHRN_N(T1, T2, W, W2, N, V, EXPECTED_CUMULATIVE_SAT, CMT) \\\n-  TEST_VQRSHRN_N1(INSN, T1, T2, W, W2, N, V, EXPECTED_CUMULATIVE_SAT, CMT)\n+#define TEST_VQRSHRN_N(T1, T2, W, W2, N, V, CMT) \\\n+  TEST_VQRSHRN_N1(INSN, T1, T2, W, W2, N, V, CMT)\n \n \n   /* vector is twice as large as vector_res.  */\n@@ -109,12 +83,12 @@ FNNAME (INSN)\n \n   /* Choose shift amount arbitrarily.  */\n #define CMT \"\"\n-  TEST_VQRSHRN_N(int, s, 16, 8, 8, 1, expected_cumulative_sat, CMT);\n-  TEST_VQRSHRN_N(int, s, 32, 16, 4, 1, expected_cumulative_sat, CMT);\n-  TEST_VQRSHRN_N(int, s, 64, 32, 2, 2, expected_cumulative_sat, CMT);\n-  TEST_VQRSHRN_N(uint, u, 16, 8, 8, 2, expected_cumulative_sat, CMT);\n-  TEST_VQRSHRN_N(uint, u, 32, 16, 4, 3, expected_cumulative_sat, CMT);\n-  TEST_VQRSHRN_N(uint, u, 64, 32, 2, 3, expected_cumulative_sat, CMT);\n+  TEST_VQRSHRN_N(int, s, 16, 8, 8, 1, CMT);\n+  TEST_VQRSHRN_N(int, s, 32, 16, 4, 1, CMT);\n+  TEST_VQRSHRN_N(int, s, 64, 32, 2, 2, CMT);\n+  TEST_VQRSHRN_N(uint, u, 16, 8, 8, 2, CMT);\n+  TEST_VQRSHRN_N(uint, u, 32, 16, 4, 3, CMT);\n+  TEST_VQRSHRN_N(uint, u, 64, 32, 2, 3, CMT);\n \n   CHECK(TEST_MSG, int, 8, 8, PRIx8, expected, CMT);\n   CHECK(TEST_MSG, int, 16, 4, PRIx16, expected, CMT);\n@@ -134,12 +108,12 @@ FNNAME (INSN)\n \n #undef CMT\n #define CMT \" (check saturation: shift by 3)\"\n-  TEST_VQRSHRN_N(int, s, 16, 8, 8, 3, expected_cumulative_sat_sh3, CMT);\n-  TEST_VQRSHRN_N(int, s, 32, 16, 4, 3, expected_cumulative_sat_sh3, CMT);\n-  TEST_VQRSHRN_N(int, s, 64, 32, 2, 3, expected_cumulative_sat_sh3, CMT);\n-  TEST_VQRSHRN_N(uint, u, 16, 8, 8, 3, expected_cumulative_sat_sh3, CMT);\n-  TEST_VQRSHRN_N(uint, u, 32, 16, 4, 3, expected_cumulative_sat_sh3, CMT);\n-  TEST_VQRSHRN_N(uint, u, 64, 32, 2, 3, expected_cumulative_sat_sh3, CMT);\n+  TEST_VQRSHRN_N(int, s, 16, 8, 8, 3, CMT);\n+  TEST_VQRSHRN_N(int, s, 32, 16, 4, 3, CMT);\n+  TEST_VQRSHRN_N(int, s, 64, 32, 2, 3, CMT);\n+  TEST_VQRSHRN_N(uint, u, 16, 8, 8, 3, CMT);\n+  TEST_VQRSHRN_N(uint, u, 32, 16, 4, 3, CMT);\n+  TEST_VQRSHRN_N(uint, u, 64, 32, 2, 3, CMT);\n \n   CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_sh3, CMT);\n   CHECK(TEST_MSG, int, 16, 4, PRIx16, expected_sh3, CMT);\n@@ -152,12 +126,12 @@ FNNAME (INSN)\n   /* Shift by max amount.  */\n #undef CMT\n #define CMT \" (check saturation: shift by max)\"\n-  TEST_VQRSHRN_N(int, s, 16, 8, 8, 8, expected_cumulative_sat_shmax, CMT);\n-  TEST_VQRSHRN_N(int, s, 32, 16, 4, 16, expected_cumulative_sat_shmax, CMT);\n-  TEST_VQRSHRN_N(int, s, 64, 32, 2, 32, expected_cumulative_sat_shmax, CMT);\n-  TEST_VQRSHRN_N(uint, u, 16, 8, 8, 8, expected_cumulative_sat_shmax, CMT);\n-  TEST_VQRSHRN_N(uint, u, 32, 16, 4, 16, expected_cumulative_sat_shmax, CMT);\n-  TEST_VQRSHRN_N(uint, u, 64, 32, 2, 32, expected_cumulative_sat_shmax, CMT);\n+  TEST_VQRSHRN_N(int, s, 16, 8, 8, 8, CMT);\n+  TEST_VQRSHRN_N(int, s, 32, 16, 4, 16, CMT);\n+  TEST_VQRSHRN_N(int, s, 64, 32, 2, 32, CMT);\n+  TEST_VQRSHRN_N(uint, u, 16, 8, 8, 8, CMT);\n+  TEST_VQRSHRN_N(uint, u, 32, 16, 4, 16, CMT);\n+  TEST_VQRSHRN_N(uint, u, 64, 32, 2, 32, CMT);\n \n   CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_shmax, CMT);\n   CHECK(TEST_MSG, int, 16, 4, PRIx16, expected_shmax, CMT);"}, {"sha": "5d4c4939937e5bfe93d08875d03044932fb693a2", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vqrshrun_n.c", "status": "modified", "additions": 21, "deletions": 51, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/763b865a17d32ff1d19720e333999de25132d3d4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqrshrun_n.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/763b865a17d32ff1d19720e333999de25132d3d4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqrshrun_n.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqrshrun_n.c?ref=763b865a17d32ff1d19720e333999de25132d3d4", "patch": "@@ -2,23 +2,12 @@\n #include \"arm-neon-ref.h\"\n #include \"compute-ref-data.h\"\n \n-/* Expected values of cumulative_saturation flag with negative unput.  */\n-int VECT_VAR(expected_cumulative_sat_neg,int,16,8) = 0;\n-int VECT_VAR(expected_cumulative_sat_neg,int,32,4) = 0;\n-int VECT_VAR(expected_cumulative_sat_neg,int,64,2) = 1;\n-\n /* Expected results with negative input.  */\n VECT_VAR_DECL(expected_neg,uint,8,8) [] = { 0x0, 0x0, 0x0, 0x0,\n \t\t\t\t\t    0x0, 0x0, 0x0, 0x0 };\n VECT_VAR_DECL(expected_neg,uint,16,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n VECT_VAR_DECL(expected_neg,uint,32,2) [] = { 0x0, 0x0 };\n \n-/* Expected values of cumulative_saturation flag with max input value\n-   shifted by 1.  */\n-int VECT_VAR(expected_cumulative_sat_max_sh1,int,16,8) = 1;\n-int VECT_VAR(expected_cumulative_sat_max_sh1,int,32,4) = 1;\n-int VECT_VAR(expected_cumulative_sat_max_sh1,int,64,2) = 1;\n-\n /* Expected results with max input value shifted by 1.  */\n VECT_VAR_DECL(expected_max_sh1,uint,8,8) [] = { 0xff, 0xff, 0xff, 0xff,\n \t\t\t\t\t\t0xff, 0xff, 0xff, 0xff };\n@@ -27,37 +16,19 @@ VECT_VAR_DECL(expected_max_sh1,uint,16,4) [] = { 0xffff, 0xffff,\n VECT_VAR_DECL(expected_max_sh1,uint,32,2) [] = { 0xffffffff, 0xffffffff };\n VECT_VAR_DECL(expected_max_sh1,uint,64,1) [] = { 0x3333333333333333 };\n \n-/* Expected values of cumulative_saturation flag with max input value\n-   shifted by max amount.  */\n-int VECT_VAR(expected_cumulative_sat_max_shmax,int,16,8) = 0;\n-int VECT_VAR(expected_cumulative_sat_max_shmax,int,32,4) = 0;\n-int VECT_VAR(expected_cumulative_sat_max_shmax,int,64,2) = 0;\n-\n /* Expected results with max input value shifted by max amount.  */\n VECT_VAR_DECL(expected_max_shmax,uint,8,8) [] = { 0x80, 0x80, 0x80, 0x80,\n \t\t\t\t\t\t  0x80, 0x80, 0x80, 0x80 };\n VECT_VAR_DECL(expected_max_shmax,uint,16,4) [] = { 0x8000, 0x8000,\n \t\t\t\t\t\t   0x8000, 0x8000 };\n VECT_VAR_DECL(expected_max_shmax,uint,32,2) [] = { 0x80000000, 0x80000000 };\n \n-/* Expected values of cumulative_saturation flag with min input value\n-   shifted by max amount.  */\n-int VECT_VAR(expected_cumulative_sat_min_shmax,int,16,8) = 1;\n-int VECT_VAR(expected_cumulative_sat_min_shmax,int,32,4) = 1;\n-int VECT_VAR(expected_cumulative_sat_min_shmax,int,64,2) = 1;\n-\n /* Expected results with min input value shifted by max amount.  */\n VECT_VAR_DECL(expected_min_shmax,uint,8,8) [] = { 0x0, 0x0, 0x0, 0x0,\n \t\t\t\t\t\t  0x0, 0x0, 0x0, 0x0 };\n VECT_VAR_DECL(expected_min_shmax,uint,16,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n VECT_VAR_DECL(expected_min_shmax,uint,32,2) [] = { 0x0, 0x0 };\n \n-/* Expected values of cumulative_saturation flag with inputs in usual\n-   range.  */\n-int VECT_VAR(expected_cumulative_sat,int,16,8) = 0;\n-int VECT_VAR(expected_cumulative_sat,int,32,4) = 1;\n-int VECT_VAR(expected_cumulative_sat,int,64,2) = 0;\n-\n /* Expected results with inputs in usual range.  */\n VECT_VAR_DECL(expected,uint,8,8) [] = { 0x49, 0x49, 0x49, 0x49,\n \t\t\t\t\t0x49, 0x49, 0x49, 0x49 };\n@@ -73,21 +44,20 @@ VECT_VAR_DECL(expected,uint,32,2) [] = { 0xdeadbf, 0xdeadbf };\n FNNAME (INSN)\n {\n   /* Basic test: y=vqrshrun_n(x,v), then store the result.  */\n-#define TEST_VQRSHRUN_N2(INSN, T1, T2, W, W2, N, V, EXPECTED_CUMULATIVE_SAT, CMT) \\\n+#define TEST_VQRSHRUN_N2(INSN, T1, T2, W, W2, N, V, CMT) \\\n   Set_Neon_Cumulative_Sat(0, VECT_VAR(vector_res, uint, W2, N));\t\\\n   VECT_VAR(vector_res, uint, W2, N) =\t\t\t\t\t\\\n     INSN##_##T2##W(VECT_VAR(vector, T1, W, N),\t\t\t\t\\\n \t\t   V);\t\t\t\t\t\t\t\\\n   vst1_u##W2(VECT_VAR(result, uint, W2, N),\t\t\t\t\\\n-\t     VECT_VAR(vector_res, uint, W2, N));\t\t\t\\\n-  CHECK_CUMULATIVE_SAT(TEST_MSG, T1, W, N, EXPECTED_CUMULATIVE_SAT, CMT)\n+\t     VECT_VAR(vector_res, uint, W2, N))\n \n   /* Two auxliary macros are necessary to expand INSN */\n-#define TEST_VQRSHRUN_N1(INSN, T1, T2, W, W2, N, V, EXPECTED_CUMULATIVE_SAT, CMT) \\\n-  TEST_VQRSHRUN_N2(INSN, T1, T2, W, W2, N, V, EXPECTED_CUMULATIVE_SAT, CMT)\n+#define TEST_VQRSHRUN_N1(INSN, T1, T2, W, W2, N, V, CMT) \\\n+  TEST_VQRSHRUN_N2(INSN, T1, T2, W, W2, N, V, CMT)\n \n-#define TEST_VQRSHRUN_N(T1, T2, W, W2, N, V, EXPECTED_CUMULATIVE_SAT, CMT) \\\n-  TEST_VQRSHRUN_N1(INSN, T1, T2, W, W2, N, V, EXPECTED_CUMULATIVE_SAT, CMT)\n+#define TEST_VQRSHRUN_N(T1, T2, W, W2, N, V, CMT) \\\n+  TEST_VQRSHRUN_N1(INSN, T1, T2, W, W2, N, V, CMT)\n \n \n   /* vector is twice as large as vector_res.  */\n@@ -109,9 +79,9 @@ FNNAME (INSN)\n \n   /* Choose shift amount arbitrarily.   */\n #define CMT \" (negative input)\"\n-  TEST_VQRSHRUN_N(int, s, 16, 8, 8, 3, expected_cumulative_sat_neg, CMT);\n-  TEST_VQRSHRUN_N(int, s, 32, 16, 4, 4, expected_cumulative_sat_neg, CMT);\n-  TEST_VQRSHRUN_N(int, s, 64, 32, 2, 2, expected_cumulative_sat_neg, CMT);\n+  TEST_VQRSHRUN_N(int, s, 16, 8, 8, 3, CMT);\n+  TEST_VQRSHRUN_N(int, s, 32, 16, 4, 4, CMT);\n+  TEST_VQRSHRUN_N(int, s, 64, 32, 2, 2, CMT);\n \n   CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_neg, CMT);\n   CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected_neg, CMT);\n@@ -127,9 +97,9 @@ FNNAME (INSN)\n   /* shift by 1.  */\n #undef CMT\n #define CMT \" (check cumulative saturation: shift by 1)\"\n-  TEST_VQRSHRUN_N(int, s, 16, 8, 8, 1, expected_cumulative_sat_max_sh1, CMT);\n-  TEST_VQRSHRUN_N(int, s, 32, 16, 4, 1, expected_cumulative_sat_max_sh1, CMT);\n-  TEST_VQRSHRUN_N(int, s, 64, 32, 2, 1, expected_cumulative_sat_max_sh1, CMT);\n+  TEST_VQRSHRUN_N(int, s, 16, 8, 8, 1, CMT);\n+  TEST_VQRSHRUN_N(int, s, 32, 16, 4, 1, CMT);\n+  TEST_VQRSHRUN_N(int, s, 64, 32, 2, 1, CMT);\n \n   CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_max_sh1, CMT);\n   CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected_max_sh1, CMT);\n@@ -139,9 +109,9 @@ FNNAME (INSN)\n   /* shift by max.  */\n #undef CMT\n #define CMT \" (check cumulative saturation: shift by max, positive input)\"\n-  TEST_VQRSHRUN_N(int, s, 16, 8, 8, 8, expected_cumulative_sat_max_shmax, CMT);\n-  TEST_VQRSHRUN_N(int, s, 32, 16, 4, 16, expected_cumulative_sat_max_shmax, CMT);\n-  TEST_VQRSHRUN_N(int, s, 64, 32, 2, 32, expected_cumulative_sat_max_shmax, CMT);\n+  TEST_VQRSHRUN_N(int, s, 16, 8, 8, 8, CMT);\n+  TEST_VQRSHRUN_N(int, s, 32, 16, 4, 16, CMT);\n+  TEST_VQRSHRUN_N(int, s, 64, 32, 2, 32, CMT);\n \n   CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_max_shmax, CMT);\n   CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected_max_shmax, CMT);\n@@ -156,9 +126,9 @@ FNNAME (INSN)\n   /* shift by max  */\n #undef CMT\n #define CMT \" (check cumulative saturation: shift by max, negative input)\"\n-  TEST_VQRSHRUN_N(int, s, 16, 8, 8, 8, expected_cumulative_sat_min_shmax, CMT);\n-  TEST_VQRSHRUN_N(int, s, 32, 16, 4, 16, expected_cumulative_sat_min_shmax, CMT);\n-  TEST_VQRSHRUN_N(int, s, 64, 32, 2, 32, expected_cumulative_sat_min_shmax, CMT);\n+  TEST_VQRSHRUN_N(int, s, 16, 8, 8, 8, CMT);\n+  TEST_VQRSHRUN_N(int, s, 32, 16, 4, 16, CMT);\n+  TEST_VQRSHRUN_N(int, s, 64, 32, 2, 32, CMT);\n \n   CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_min_shmax, CMT);\n   CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected_min_shmax, CMT);\n@@ -173,9 +143,9 @@ FNNAME (INSN)\n   /* shift arbitrary amount.  */\n #undef CMT\n #define CMT \"\"\n-  TEST_VQRSHRUN_N(int, s, 16, 8, 8, 6, expected_cumulative_sat, CMT);\n-  TEST_VQRSHRUN_N(int, s, 32, 16, 4, 7, expected_cumulative_sat, CMT);\n-  TEST_VQRSHRUN_N(int, s, 64, 32, 2, 8, expected_cumulative_sat, CMT);\n+  TEST_VQRSHRUN_N(int, s, 16, 8, 8, 6, CMT);\n+  TEST_VQRSHRUN_N(int, s, 32, 16, 4, 7, CMT);\n+  TEST_VQRSHRUN_N(int, s, 64, 32, 2, 8, CMT);\n \n   CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected, CMT);\n   CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected, CMT);"}, {"sha": "7bf20d42849f8515756a4a48b0dcade5e2a2beb4", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vqshl.c", "status": "modified", "additions": 120, "deletions": 256, "changes": 376, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/763b865a17d32ff1d19720e333999de25132d3d4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqshl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/763b865a17d32ff1d19720e333999de25132d3d4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqshl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqshl.c?ref=763b865a17d32ff1d19720e333999de25132d3d4", "patch": "@@ -2,23 +2,6 @@\n #include \"arm-neon-ref.h\"\n #include \"compute-ref-data.h\"\n \n-/* Expected values of cumulative_saturation flag with input=0.  */\n-int VECT_VAR(expected_cumulative_sat_0,int,8,8) = 0;\n-int VECT_VAR(expected_cumulative_sat_0,int,16,4) = 0;\n-int VECT_VAR(expected_cumulative_sat_0,int,32,2) = 0;\n-int VECT_VAR(expected_cumulative_sat_0,int,64,1) = 0;\n-int VECT_VAR(expected_cumulative_sat_0,uint,8,8) = 0;\n-int VECT_VAR(expected_cumulative_sat_0,uint,16,4) = 0;\n-int VECT_VAR(expected_cumulative_sat_0,uint,32,2) = 0;\n-int VECT_VAR(expected_cumulative_sat_0,uint,64,1) = 0;\n-int VECT_VAR(expected_cumulative_sat_0,int,8,16) = 0;\n-int VECT_VAR(expected_cumulative_sat_0,int,16,8) = 0;\n-int VECT_VAR(expected_cumulative_sat_0,int,32,4) = 0;\n-int VECT_VAR(expected_cumulative_sat_0,int,64,2) = 0;\n-int VECT_VAR(expected_cumulative_sat_0,uint,8,16) = 0;\n-int VECT_VAR(expected_cumulative_sat_0,uint,16,8) = 0;\n-int VECT_VAR(expected_cumulative_sat_0,uint,32,4) = 0;\n-int VECT_VAR(expected_cumulative_sat_0,uint,64,2) = 0;\n \n /* Expected results with input=0.  */\n VECT_VAR_DECL(expected_0,int,8,8) [] = { 0x0, 0x0, 0x0, 0x0,\n@@ -48,25 +31,6 @@ VECT_VAR_DECL(expected_0,uint,16,8) [] = { 0x0, 0x0, 0x0, 0x0,\n VECT_VAR_DECL(expected_0,uint,32,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n VECT_VAR_DECL(expected_0,uint,64,2) [] = { 0x0, 0x0 };\n \n-/* Expected values of cumulative_saturation flag with input=0 and\n-   negative shift amount.  */\n-int VECT_VAR(expected_cumulative_sat_0_neg,int,8,8) = 0;\n-int VECT_VAR(expected_cumulative_sat_0_neg,int,16,4) = 0;\n-int VECT_VAR(expected_cumulative_sat_0_neg,int,32,2) = 0;\n-int VECT_VAR(expected_cumulative_sat_0_neg,int,64,1) = 0;\n-int VECT_VAR(expected_cumulative_sat_0_neg,uint,8,8) = 0;\n-int VECT_VAR(expected_cumulative_sat_0_neg,uint,16,4) = 0;\n-int VECT_VAR(expected_cumulative_sat_0_neg,uint,32,2) = 0;\n-int VECT_VAR(expected_cumulative_sat_0_neg,uint,64,1) = 0;\n-int VECT_VAR(expected_cumulative_sat_0_neg,int,8,16) = 0;\n-int VECT_VAR(expected_cumulative_sat_0_neg,int,16,8) = 0;\n-int VECT_VAR(expected_cumulative_sat_0_neg,int,32,4) = 0;\n-int VECT_VAR(expected_cumulative_sat_0_neg,int,64,2) = 0;\n-int VECT_VAR(expected_cumulative_sat_0_neg,uint,8,16) = 0;\n-int VECT_VAR(expected_cumulative_sat_0_neg,uint,16,8) = 0;\n-int VECT_VAR(expected_cumulative_sat_0_neg,uint,32,4) = 0;\n-int VECT_VAR(expected_cumulative_sat_0_neg,uint,64,2) = 0;\n-\n /* Expected results with input=0 and negative shift amount.  */\n VECT_VAR_DECL(expected_0_neg,int,8,8) [] = { 0x0, 0x0, 0x0, 0x0,\n \t\t\t\t\t     0x0, 0x0, 0x0, 0x0 };\n@@ -95,24 +59,6 @@ VECT_VAR_DECL(expected_0_neg,uint,16,8) [] = { 0x0, 0x0, 0x0, 0x0,\n VECT_VAR_DECL(expected_0_neg,uint,32,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n VECT_VAR_DECL(expected_0_neg,uint,64,2) [] = { 0x0, 0x0 };\n \n-/* Expected values of cumulative_saturation flag.  */\n-int VECT_VAR(expected_cumulative_sat,int,8,8) = 0;\n-int VECT_VAR(expected_cumulative_sat,int,16,4) = 0;\n-int VECT_VAR(expected_cumulative_sat,int,32,2) = 0;\n-int VECT_VAR(expected_cumulative_sat,int,64,1) = 0;\n-int VECT_VAR(expected_cumulative_sat,uint,8,8) = 1;\n-int VECT_VAR(expected_cumulative_sat,uint,16,4) = 1;\n-int VECT_VAR(expected_cumulative_sat,uint,32,2) = 1;\n-int VECT_VAR(expected_cumulative_sat,uint,64,1) = 0;\n-int VECT_VAR(expected_cumulative_sat,int,8,16) = 1;\n-int VECT_VAR(expected_cumulative_sat,int,16,8) = 1;\n-int VECT_VAR(expected_cumulative_sat,int,32,4) = 1;\n-int VECT_VAR(expected_cumulative_sat,int,64,2) = 1;\n-int VECT_VAR(expected_cumulative_sat,uint,8,16) = 1;\n-int VECT_VAR(expected_cumulative_sat,uint,16,8) = 1;\n-int VECT_VAR(expected_cumulative_sat,uint,32,4) = 1;\n-int VECT_VAR(expected_cumulative_sat,uint,64,2) = 1;\n-\n /* Expected results.  */\n VECT_VAR_DECL(expected,int,8,8) [] = { 0xe0, 0xe2, 0xe4, 0xe6,\n \t\t\t\t       0xe8, 0xea, 0xec, 0xee };\n@@ -145,25 +91,6 @@ VECT_VAR_DECL(expected,uint,32,4) [] = { 0xffffffff, 0xffffffff,\n VECT_VAR_DECL(expected,uint,64,2) [] = { 0xffffffffffffffff,\n \t\t\t\t\t 0xffffffffffffffff };\n \n-/* Expected values of cumulative_sat_saturation flag with negative shift\n-   amount.  */\n-int VECT_VAR(expected_cumulative_sat_neg,int,8,8) = 0;\n-int VECT_VAR(expected_cumulative_sat_neg,int,16,4) = 0;\n-int VECT_VAR(expected_cumulative_sat_neg,int,32,2) = 0;\n-int VECT_VAR(expected_cumulative_sat_neg,int,64,1) = 0;\n-int VECT_VAR(expected_cumulative_sat_neg,uint,8,8) = 0;\n-int VECT_VAR(expected_cumulative_sat_neg,uint,16,4) = 0;\n-int VECT_VAR(expected_cumulative_sat_neg,uint,32,2) = 0;\n-int VECT_VAR(expected_cumulative_sat_neg,uint,64,1) = 0;\n-int VECT_VAR(expected_cumulative_sat_neg,int,8,16) = 0;\n-int VECT_VAR(expected_cumulative_sat_neg,int,16,8) = 0;\n-int VECT_VAR(expected_cumulative_sat_neg,int,32,4) = 0;\n-int VECT_VAR(expected_cumulative_sat_neg,int,64,2) = 0;\n-int VECT_VAR(expected_cumulative_sat_neg,uint,8,16) = 0;\n-int VECT_VAR(expected_cumulative_sat_neg,uint,16,8) = 0;\n-int VECT_VAR(expected_cumulative_sat_neg,uint,32,4) = 0;\n-int VECT_VAR(expected_cumulative_sat_neg,uint,64,2) = 0;\n-\n /* Expected results with negative shift amount.  */\n VECT_VAR_DECL(expected_neg,int,8,8) [] = { 0xf8, 0xf8, 0xf9, 0xf9,\n \t\t\t\t\t   0xfa, 0xfa, 0xfb, 0xfb };\n@@ -195,25 +122,6 @@ VECT_VAR_DECL(expected_neg,uint,32,4) [] = { 0x7ffff, 0x7ffff,\n \t\t\t\t\t     0x7ffff, 0x7ffff };\n VECT_VAR_DECL(expected_neg,uint,64,2) [] = { 0xfffffffffff, 0xfffffffffff };\n \n-/* Expected values of cumulative_sat_saturation flag with negative\n-   input and large shift amount.  */\n-int VECT_VAR(expected_cumulative_sat_neg_large,int,8,8) = 1;\n-int VECT_VAR(expected_cumulative_sat_neg_large,int,16,4) = 1;\n-int VECT_VAR(expected_cumulative_sat_neg_large,int,32,2) = 1;\n-int VECT_VAR(expected_cumulative_sat_neg_large,int,64,1) = 1;\n-int VECT_VAR(expected_cumulative_sat_neg_large,uint,8,8) = 1;\n-int VECT_VAR(expected_cumulative_sat_neg_large,uint,16,4) = 1;\n-int VECT_VAR(expected_cumulative_sat_neg_large,uint,32,2) = 1;\n-int VECT_VAR(expected_cumulative_sat_neg_large,uint,64,1) = 1;\n-int VECT_VAR(expected_cumulative_sat_neg_large,int,8,16) = 1;\n-int VECT_VAR(expected_cumulative_sat_neg_large,int,16,8) = 1;\n-int VECT_VAR(expected_cumulative_sat_neg_large,int,32,4) = 1;\n-int VECT_VAR(expected_cumulative_sat_neg_large,int,64,2) = 1;\n-int VECT_VAR(expected_cumulative_sat_neg_large,uint,8,16) = 1;\n-int VECT_VAR(expected_cumulative_sat_neg_large,uint,16,8) = 1;\n-int VECT_VAR(expected_cumulative_sat_neg_large,uint,32,4) = 1;\n-int VECT_VAR(expected_cumulative_sat_neg_large,uint,64,2) = 1;\n-\n /* Expected results with negative input and large shift amount.  */\n VECT_VAR_DECL(expected_neg_large,int,8,8) [] = { 0x80, 0x80, 0x80, 0x80,\n \t\t\t\t\t\t 0x80, 0x80, 0x80, 0x80 };\n@@ -252,25 +160,6 @@ VECT_VAR_DECL(expected_neg_large,uint,32,4) [] = { 0xffffffff, 0xffffffff,\n VECT_VAR_DECL(expected_neg_large,uint,64,2) [] = { 0xffffffffffffffff,\n \t\t\t\t\t\t   0xffffffffffffffff };\n \n-/* Expected values of cumulative_sat_saturation flag with max input\n-   and shift by -1.  */\n-int VECT_VAR(expected_cumulative_sat_max_minus1,int,8,8) = 0;\n-int VECT_VAR(expected_cumulative_sat_max_minus1,int,16,4) = 0;\n-int VECT_VAR(expected_cumulative_sat_max_minus1,int,32,2) = 0;\n-int VECT_VAR(expected_cumulative_sat_max_minus1,int,64,1) = 0;\n-int VECT_VAR(expected_cumulative_sat_max_minus1,uint,8,8) = 0;\n-int VECT_VAR(expected_cumulative_sat_max_minus1,uint,16,4) = 0;\n-int VECT_VAR(expected_cumulative_sat_max_minus1,uint,32,2) = 0;\n-int VECT_VAR(expected_cumulative_sat_max_minus1,uint,64,1) = 0;\n-int VECT_VAR(expected_cumulative_sat_max_minus1,int,8,16) = 0;\n-int VECT_VAR(expected_cumulative_sat_max_minus1,int,16,8) = 0;\n-int VECT_VAR(expected_cumulative_sat_max_minus1,int,32,4) = 0;\n-int VECT_VAR(expected_cumulative_sat_max_minus1,int,64,2) = 0;\n-int VECT_VAR(expected_cumulative_sat_max_minus1,uint,8,16) = 0;\n-int VECT_VAR(expected_cumulative_sat_max_minus1,uint,16,8) = 0;\n-int VECT_VAR(expected_cumulative_sat_max_minus1,uint,32,4) = 0;\n-int VECT_VAR(expected_cumulative_sat_max_minus1,uint,64,2) = 0;\n-\n /* Expected results with max input and shift by -1.  */\n VECT_VAR_DECL(expected_max_minus1,int,8,8) [] = { 0x3f, 0x3f, 0x3f, 0x3f,\n \t\t\t\t\t\t  0x3f, 0x3f, 0x3f, 0x3f };\n@@ -309,25 +198,6 @@ VECT_VAR_DECL(expected_max_minus1,uint,32,4) [] = { 0x7fffffff, 0x7fffffff,\n VECT_VAR_DECL(expected_max_minus1,uint,64,2) [] = { 0x7fffffffffffffff,\n \t\t\t\t\t\t    0x7fffffffffffffff };\n \n-/* Expected values of cumulative_sat_saturation flag with max input\n-   and large shift amount.  */\n-int VECT_VAR(expected_cumulative_sat_max_large,int,8,8) = 1;\n-int VECT_VAR(expected_cumulative_sat_max_large,int,16,4) = 1;\n-int VECT_VAR(expected_cumulative_sat_max_large,int,32,2) = 1;\n-int VECT_VAR(expected_cumulative_sat_max_large,int,64,1) = 1;\n-int VECT_VAR(expected_cumulative_sat_max_large,uint,8,8) = 1;\n-int VECT_VAR(expected_cumulative_sat_max_large,uint,16,4) = 1;\n-int VECT_VAR(expected_cumulative_sat_max_large,uint,32,2) = 1;\n-int VECT_VAR(expected_cumulative_sat_max_large,uint,64,1) = 1;\n-int VECT_VAR(expected_cumulative_sat_max_large,int,8,16) = 1;\n-int VECT_VAR(expected_cumulative_sat_max_large,int,16,8) = 1;\n-int VECT_VAR(expected_cumulative_sat_max_large,int,32,4) = 1;\n-int VECT_VAR(expected_cumulative_sat_max_large,int,64,2) = 1;\n-int VECT_VAR(expected_cumulative_sat_max_large,uint,8,16) = 1;\n-int VECT_VAR(expected_cumulative_sat_max_large,uint,16,8) = 1;\n-int VECT_VAR(expected_cumulative_sat_max_large,uint,32,4) = 1;\n-int VECT_VAR(expected_cumulative_sat_max_large,uint,64,2) = 1;\n-\n /* Expected results with max input and large shift amount.  */\n VECT_VAR_DECL(expected_max_large,int,8,8) [] = { 0x7f, 0x7f, 0x7f, 0x7f,\n \t\t\t\t\t       0x7f, 0x7f, 0x7f, 0x7f };\n@@ -366,11 +236,6 @@ VECT_VAR_DECL(expected_max_large,uint,32,4) [] = { 0xffffffff, 0xffffffff,\n VECT_VAR_DECL(expected_max_large,uint,64,2) [] = { 0xffffffffffffffff,\n \t\t\t\t\t\t 0xffffffffffffffff };\n \n-/* Expected values of cumulative_sat_saturation flag with saturation\n-   on 64-bits values.  */\n-int VECT_VAR(expected_cumulative_sat_64,int,64,1) = 1;\n-int VECT_VAR(expected_cumulative_sat_64,int,64,2) = 1;\n-\n /* Expected results with saturation on 64-bits values..  */\n VECT_VAR_DECL(expected_64,int,64,1) [] = { 0x8000000000000000 };\n VECT_VAR_DECL(expected_64,int,64,2) [] = { 0x7fffffffffffffff,\n@@ -385,21 +250,20 @@ VECT_VAR_DECL(expected_64,int,64,2) [] = { 0x7fffffffffffffff,\n FNNAME (INSN)\n {\n   /* Basic test: v3=vqshl(v1,v2), then store the result.  */\n-#define TEST_VQSHL2(INSN, T3, Q, T1, T2, W, N, EXPECTED_CUMULATIVE_SAT, CMT) \\\n+#define TEST_VQSHL2(INSN, T3, Q, T1, T2, W, N, CMT) \\\n   Set_Neon_Cumulative_Sat(0, VECT_VAR(vector_res, T1, W, N));\t\t\\\n   VECT_VAR(vector_res, T1, W, N) =\t\t\t\t\t\\\n     INSN##Q##_##T2##W(VECT_VAR(vector, T1, W, N),\t\t\t\\\n \t\t      VECT_VAR(vector_shift, T3, W, N));\t\t\\\n   vst1##Q##_##T2##W(VECT_VAR(result, T1, W, N),\t\t\t\t\\\n-\t\t    VECT_VAR(vector_res, T1, W, N));\t\t\t\\\n-  CHECK_CUMULATIVE_SAT(TEST_MSG, T1, W, N, EXPECTED_CUMULATIVE_SAT, CMT)\n+\t\t    VECT_VAR(vector_res, T1, W, N));\n \n   /* Two auxliary macros are necessary to expand INSN */\n-#define TEST_VQSHL1(INSN, T3, Q, T1, T2, W, N, EXPECTED_CUMULATIVE_SAT, CMT) \\\n-  TEST_VQSHL2(INSN, T3, Q, T1, T2, W, N, EXPECTED_CUMULATIVE_SAT, CMT)\n+#define TEST_VQSHL1(INSN, T3, Q, T1, T2, W, N, CMT) \\\n+  TEST_VQSHL2(INSN, T3, Q, T1, T2, W, N, CMT)\n \n-#define TEST_VQSHL(T3, Q, T1, T2, W, N, EXPECTED_CUMULATIVE_SAT, CMT)\t\\\n-  TEST_VQSHL1(INSN, T3, Q, T1, T2, W, N, EXPECTED_CUMULATIVE_SAT, CMT)\n+#define TEST_VQSHL(T3, Q, T1, T2, W, N, CMT)\t\\\n+  TEST_VQSHL1(INSN, T3, Q, T1, T2, W, N, CMT)\n \n \n   DECL_VARIABLE_ALL_VARIANTS(vector);\n@@ -470,22 +334,22 @@ FNNAME (INSN)\n   VSET_LANE(vector_shift, q, int, s, 64, 2, 1, 62);\n \n #define CMT \" (with input = 0)\"\n-  TEST_VQSHL(int, , int, s, 8, 8, expected_cumulative_sat_0, CMT);\n-  TEST_VQSHL(int, , int, s, 16, 4, expected_cumulative_sat_0, CMT);\n-  TEST_VQSHL(int, , int, s, 32, 2, expected_cumulative_sat_0, CMT);\n-  TEST_VQSHL(int, , int, s, 64, 1, expected_cumulative_sat_0, CMT);\n-  TEST_VQSHL(int, , uint, u, 8, 8, expected_cumulative_sat_0, CMT);\n-  TEST_VQSHL(int, , uint, u, 16, 4, expected_cumulative_sat_0, CMT);\n-  TEST_VQSHL(int, , uint, u, 32, 2, expected_cumulative_sat_0, CMT);\n-  TEST_VQSHL(int, , uint, u, 64, 1, expected_cumulative_sat_0, CMT);\n-  TEST_VQSHL(int, q, int, s, 8, 16, expected_cumulative_sat_0, CMT);\n-  TEST_VQSHL(int, q, int, s, 16, 8, expected_cumulative_sat_0, CMT);\n-  TEST_VQSHL(int, q, int, s, 32, 4, expected_cumulative_sat_0, CMT);\n-  TEST_VQSHL(int, q, int, s, 64, 2, expected_cumulative_sat_0, CMT);\n-  TEST_VQSHL(int, q, uint, u, 8, 16, expected_cumulative_sat_0, CMT);\n-  TEST_VQSHL(int, q, uint, u, 16, 8, expected_cumulative_sat_0, CMT);\n-  TEST_VQSHL(int, q, uint, u, 32, 4, expected_cumulative_sat_0, CMT);\n-  TEST_VQSHL(int, q, uint, u, 64, 2, expected_cumulative_sat_0, CMT);\n+  TEST_VQSHL(int, , int, s, 8, 8, CMT);\n+  TEST_VQSHL(int, , int, s, 16, 4, CMT);\n+  TEST_VQSHL(int, , int, s, 32, 2, CMT);\n+  TEST_VQSHL(int, , int, s, 64, 1, CMT);\n+  TEST_VQSHL(int, , uint, u, 8, 8, CMT);\n+  TEST_VQSHL(int, , uint, u, 16, 4, CMT);\n+  TEST_VQSHL(int, , uint, u, 32, 2, CMT);\n+  TEST_VQSHL(int, , uint, u, 64, 1, CMT);\n+  TEST_VQSHL(int, q, int, s, 8, 16, CMT);\n+  TEST_VQSHL(int, q, int, s, 16, 8, CMT);\n+  TEST_VQSHL(int, q, int, s, 32, 4, CMT);\n+  TEST_VQSHL(int, q, int, s, 64, 2, CMT);\n+  TEST_VQSHL(int, q, uint, u, 8, 16, CMT);\n+  TEST_VQSHL(int, q, uint, u, 16, 8, CMT);\n+  TEST_VQSHL(int, q, uint, u, 32, 4, CMT);\n+  TEST_VQSHL(int, q, uint, u, 64, 2, CMT);\n \n   CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_0, CMT);\n   CHECK(TEST_MSG, int, 16, 4, PRIx16, expected_0, CMT);\n@@ -517,22 +381,22 @@ FNNAME (INSN)\n \n #undef CMT\n #define CMT \" (input 0 and negative shift amount)\"\n-  TEST_VQSHL(int, , int, s, 8, 8, expected_cumulative_sat_0_neg, CMT);\n-  TEST_VQSHL(int, , int, s, 16, 4, expected_cumulative_sat_0_neg, CMT);\n-  TEST_VQSHL(int, , int, s, 32, 2, expected_cumulative_sat_0_neg, CMT);\n-  TEST_VQSHL(int, , int, s, 64, 1, expected_cumulative_sat_0_neg, CMT);\n-  TEST_VQSHL(int, , uint, u, 8, 8, expected_cumulative_sat_0_neg, CMT);\n-  TEST_VQSHL(int, , uint, u, 16, 4, expected_cumulative_sat_0_neg, CMT);\n-  TEST_VQSHL(int, , uint, u, 32, 2, expected_cumulative_sat_0_neg, CMT);\n-  TEST_VQSHL(int, , uint, u, 64, 1, expected_cumulative_sat_0_neg, CMT);\n-  TEST_VQSHL(int, q, int, s, 8, 16, expected_cumulative_sat_0_neg, CMT);\n-  TEST_VQSHL(int, q, int, s, 16, 8, expected_cumulative_sat_0_neg, CMT);\n-  TEST_VQSHL(int, q, int, s, 32, 4, expected_cumulative_sat_0_neg, CMT);\n-  TEST_VQSHL(int, q, int, s, 64, 2, expected_cumulative_sat_0_neg, CMT);\n-  TEST_VQSHL(int, q, uint, u, 8, 16, expected_cumulative_sat_0_neg, CMT);\n-  TEST_VQSHL(int, q, uint, u, 16, 8, expected_cumulative_sat_0_neg, CMT);\n-  TEST_VQSHL(int, q, uint, u, 32, 4, expected_cumulative_sat_0_neg, CMT);\n-  TEST_VQSHL(int, q, uint, u, 64, 2, expected_cumulative_sat_0_neg, CMT);\n+  TEST_VQSHL(int, , int, s, 8, 8, CMT);\n+  TEST_VQSHL(int, , int, s, 16, 4, CMT);\n+  TEST_VQSHL(int, , int, s, 32, 2, CMT);\n+  TEST_VQSHL(int, , int, s, 64, 1, CMT);\n+  TEST_VQSHL(int, , uint, u, 8, 8, CMT);\n+  TEST_VQSHL(int, , uint, u, 16, 4, CMT);\n+  TEST_VQSHL(int, , uint, u, 32, 2, CMT);\n+  TEST_VQSHL(int, , uint, u, 64, 1, CMT);\n+  TEST_VQSHL(int, q, int, s, 8, 16, CMT);\n+  TEST_VQSHL(int, q, int, s, 16, 8, CMT);\n+  TEST_VQSHL(int, q, int, s, 32, 4, CMT);\n+  TEST_VQSHL(int, q, int, s, 64, 2, CMT);\n+  TEST_VQSHL(int, q, uint, u, 8, 16, CMT);\n+  TEST_VQSHL(int, q, uint, u, 16, 8, CMT);\n+  TEST_VQSHL(int, q, uint, u, 32, 4, CMT);\n+  TEST_VQSHL(int, q, uint, u, 64, 2, CMT);\n \n   CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_0_neg, CMT);\n   CHECK(TEST_MSG, int, 16, 4, PRIx16, expected_0_neg, CMT);\n@@ -566,22 +430,22 @@ FNNAME (INSN)\n \n #undef CMT\n #define CMT \"\"\n-  TEST_VQSHL(int, , int, s, 8, 8, expected_cumulative_sat, CMT);\n-  TEST_VQSHL(int, , int, s, 16, 4, expected_cumulative_sat, CMT);\n-  TEST_VQSHL(int, , int, s, 32, 2, expected_cumulative_sat, CMT);\n-  TEST_VQSHL(int, , int, s, 64, 1, expected_cumulative_sat, CMT);\n-  TEST_VQSHL(int, , uint, u, 8, 8, expected_cumulative_sat, CMT);\n-  TEST_VQSHL(int, , uint, u, 16, 4, expected_cumulative_sat, CMT);\n-  TEST_VQSHL(int, , uint, u, 32, 2, expected_cumulative_sat, CMT);\n-  TEST_VQSHL(int, , uint, u, 64, 1, expected_cumulative_sat, CMT);\n-  TEST_VQSHL(int, q, int, s, 8, 16, expected_cumulative_sat, CMT);\n-  TEST_VQSHL(int, q, int, s, 16, 8, expected_cumulative_sat, CMT);\n-  TEST_VQSHL(int, q, int, s, 32, 4, expected_cumulative_sat, CMT);\n-  TEST_VQSHL(int, q, int, s, 64, 2, expected_cumulative_sat, CMT);\n-  TEST_VQSHL(int, q, uint, u, 8, 16, expected_cumulative_sat, CMT);\n-  TEST_VQSHL(int, q, uint, u, 16, 8, expected_cumulative_sat, CMT);\n-  TEST_VQSHL(int, q, uint, u, 32, 4, expected_cumulative_sat, CMT);\n-  TEST_VQSHL(int, q, uint, u, 64, 2, expected_cumulative_sat, CMT);\n+  TEST_VQSHL(int, , int, s, 8, 8, CMT);\n+  TEST_VQSHL(int, , int, s, 16, 4, CMT);\n+  TEST_VQSHL(int, , int, s, 32, 2, CMT);\n+  TEST_VQSHL(int, , int, s, 64, 1, CMT);\n+  TEST_VQSHL(int, , uint, u, 8, 8, CMT);\n+  TEST_VQSHL(int, , uint, u, 16, 4, CMT);\n+  TEST_VQSHL(int, , uint, u, 32, 2, CMT);\n+  TEST_VQSHL(int, , uint, u, 64, 1, CMT);\n+  TEST_VQSHL(int, q, int, s, 8, 16, CMT);\n+  TEST_VQSHL(int, q, int, s, 16, 8, CMT);\n+  TEST_VQSHL(int, q, int, s, 32, 4, CMT);\n+  TEST_VQSHL(int, q, int, s, 64, 2, CMT);\n+  TEST_VQSHL(int, q, uint, u, 8, 16, CMT);\n+  TEST_VQSHL(int, q, uint, u, 16, 8, CMT);\n+  TEST_VQSHL(int, q, uint, u, 32, 4, CMT);\n+  TEST_VQSHL(int, q, uint, u, 64, 2, CMT);\n \n   CHECK(TEST_MSG, int, 8, 8, PRIx8, expected, CMT);\n   CHECK(TEST_MSG, int, 16, 4, PRIx16, expected, CMT);\n@@ -613,22 +477,22 @@ FNNAME (INSN)\n \n #undef CMT\n #define CMT \" (negative shift amount)\"\n-  TEST_VQSHL(int, , int, s, 8, 8, expected_cumulative_sat_neg, CMT);\n-  TEST_VQSHL(int, , int, s, 16, 4, expected_cumulative_sat_neg, CMT);\n-  TEST_VQSHL(int, , int, s, 32, 2, expected_cumulative_sat_neg, CMT);\n-  TEST_VQSHL(int, , int, s, 64, 1, expected_cumulative_sat_neg, CMT);\n-  TEST_VQSHL(int, , uint, u, 8, 8, expected_cumulative_sat_neg, CMT);\n-  TEST_VQSHL(int, , uint, u, 16, 4, expected_cumulative_sat_neg, CMT);\n-  TEST_VQSHL(int, , uint, u, 32, 2, expected_cumulative_sat_neg, CMT);\n-  TEST_VQSHL(int, , uint, u, 64, 1, expected_cumulative_sat_neg, CMT);\n-  TEST_VQSHL(int, q, int, s, 8, 16, expected_cumulative_sat_neg, CMT);\n-  TEST_VQSHL(int, q, int, s, 16, 8, expected_cumulative_sat_neg, CMT);\n-  TEST_VQSHL(int, q, int, s, 32, 4, expected_cumulative_sat_neg, CMT);\n-  TEST_VQSHL(int, q, int, s, 64, 2, expected_cumulative_sat_neg, CMT);\n-  TEST_VQSHL(int, q, uint, u, 8, 16, expected_cumulative_sat_neg, CMT);\n-  TEST_VQSHL(int, q, uint, u, 16, 8, expected_cumulative_sat_neg, CMT);\n-  TEST_VQSHL(int, q, uint, u, 32, 4, expected_cumulative_sat_neg, CMT);\n-  TEST_VQSHL(int, q, uint, u, 64, 2, expected_cumulative_sat_neg, CMT);\n+  TEST_VQSHL(int, , int, s, 8, 8, CMT);\n+  TEST_VQSHL(int, , int, s, 16, 4, CMT);\n+  TEST_VQSHL(int, , int, s, 32, 2, CMT);\n+  TEST_VQSHL(int, , int, s, 64, 1, CMT);\n+  TEST_VQSHL(int, , uint, u, 8, 8, CMT);\n+  TEST_VQSHL(int, , uint, u, 16, 4, CMT);\n+  TEST_VQSHL(int, , uint, u, 32, 2, CMT);\n+  TEST_VQSHL(int, , uint, u, 64, 1, CMT);\n+  TEST_VQSHL(int, q, int, s, 8, 16, CMT);\n+  TEST_VQSHL(int, q, int, s, 16, 8, CMT);\n+  TEST_VQSHL(int, q, int, s, 32, 4, CMT);\n+  TEST_VQSHL(int, q, int, s, 64, 2, CMT);\n+  TEST_VQSHL(int, q, uint, u, 8, 16, CMT);\n+  TEST_VQSHL(int, q, uint, u, 16, 8, CMT);\n+  TEST_VQSHL(int, q, uint, u, 32, 4, CMT);\n+  TEST_VQSHL(int, q, uint, u, 64, 2, CMT);\n \n   CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_neg, CMT);\n   CHECK(TEST_MSG, int, 16, 4, PRIx16, expected_neg, CMT);\n@@ -660,22 +524,22 @@ FNNAME (INSN)\n \n #undef CMT\n #define CMT \" (large shift amount, negative input)\"\n-  TEST_VQSHL(int, , int, s, 8, 8, expected_cumulative_sat_neg_large, CMT);\n-  TEST_VQSHL(int, , int, s, 16, 4, expected_cumulative_sat_neg_large, CMT);\n-  TEST_VQSHL(int, , int, s, 32, 2, expected_cumulative_sat_neg_large, CMT);\n-  TEST_VQSHL(int, , int, s, 64, 1, expected_cumulative_sat_neg_large, CMT);\n-  TEST_VQSHL(int, , uint, u, 8, 8, expected_cumulative_sat_neg_large, CMT);\n-  TEST_VQSHL(int, , uint, u, 16, 4, expected_cumulative_sat_neg_large, CMT);\n-  TEST_VQSHL(int, , uint, u, 32, 2, expected_cumulative_sat_neg_large, CMT);\n-  TEST_VQSHL(int, , uint, u, 64, 1, expected_cumulative_sat_neg_large, CMT);\n-  TEST_VQSHL(int, q, int, s, 8, 16, expected_cumulative_sat_neg_large, CMT);\n-  TEST_VQSHL(int, q, int, s, 16, 8, expected_cumulative_sat_neg_large, CMT);\n-  TEST_VQSHL(int, q, int, s, 32, 4, expected_cumulative_sat_neg_large, CMT);\n-  TEST_VQSHL(int, q, int, s, 64, 2, expected_cumulative_sat_neg_large, CMT);\n-  TEST_VQSHL(int, q, uint, u, 8, 16, expected_cumulative_sat_neg_large, CMT);\n-  TEST_VQSHL(int, q, uint, u, 16, 8, expected_cumulative_sat_neg_large, CMT);\n-  TEST_VQSHL(int, q, uint, u, 32, 4, expected_cumulative_sat_neg_large, CMT);\n-  TEST_VQSHL(int, q, uint, u, 64, 2, expected_cumulative_sat_neg_large, CMT);\n+  TEST_VQSHL(int, , int, s, 8, 8, CMT);\n+  TEST_VQSHL(int, , int, s, 16, 4, CMT);\n+  TEST_VQSHL(int, , int, s, 32, 2, CMT);\n+  TEST_VQSHL(int, , int, s, 64, 1, CMT);\n+  TEST_VQSHL(int, , uint, u, 8, 8, CMT);\n+  TEST_VQSHL(int, , uint, u, 16, 4, CMT);\n+  TEST_VQSHL(int, , uint, u, 32, 2, CMT);\n+  TEST_VQSHL(int, , uint, u, 64, 1, CMT);\n+  TEST_VQSHL(int, q, int, s, 8, 16, CMT);\n+  TEST_VQSHL(int, q, int, s, 16, 8, CMT);\n+  TEST_VQSHL(int, q, int, s, 32, 4, CMT);\n+  TEST_VQSHL(int, q, int, s, 64, 2, CMT);\n+  TEST_VQSHL(int, q, uint, u, 8, 16, CMT);\n+  TEST_VQSHL(int, q, uint, u, 16, 8, CMT);\n+  TEST_VQSHL(int, q, uint, u, 32, 4, CMT);\n+  TEST_VQSHL(int, q, uint, u, 64, 2, CMT);\n \n   CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_neg_large, CMT);\n   CHECK(TEST_MSG, int, 16, 4, PRIx16, expected_neg_large, CMT);\n@@ -725,22 +589,22 @@ FNNAME (INSN)\n \n #undef CMT\n #define CMT \" (max input, shift by -1)\"\n-  TEST_VQSHL(int, , int, s, 8, 8, expected_cumulative_sat_max_minus1, CMT);\n-  TEST_VQSHL(int, , int, s, 16, 4, expected_cumulative_sat_max_minus1, CMT);\n-  TEST_VQSHL(int, , int, s, 32, 2, expected_cumulative_sat_max_minus1, CMT);\n-  TEST_VQSHL(int, , int, s, 64, 1, expected_cumulative_sat_max_minus1, CMT);\n-  TEST_VQSHL(int, , uint, u, 8, 8, expected_cumulative_sat_max_minus1, CMT);\n-  TEST_VQSHL(int, , uint, u, 16, 4, expected_cumulative_sat_max_minus1, CMT);\n-  TEST_VQSHL(int, , uint, u, 32, 2, expected_cumulative_sat_max_minus1, CMT);\n-  TEST_VQSHL(int, , uint, u, 64, 1, expected_cumulative_sat_max_minus1, CMT);\n-  TEST_VQSHL(int, q, int, s, 8, 16, expected_cumulative_sat_max_minus1, CMT);\n-  TEST_VQSHL(int, q, int, s, 16, 8, expected_cumulative_sat_max_minus1, CMT);\n-  TEST_VQSHL(int, q, int, s, 32, 4, expected_cumulative_sat_max_minus1, CMT);\n-  TEST_VQSHL(int, q, int, s, 64, 2, expected_cumulative_sat_max_minus1, CMT);\n-  TEST_VQSHL(int, q, uint, u, 8, 16, expected_cumulative_sat_max_minus1, CMT);\n-  TEST_VQSHL(int, q, uint, u, 16, 8, expected_cumulative_sat_max_minus1, CMT);\n-  TEST_VQSHL(int, q, uint, u, 32, 4, expected_cumulative_sat_max_minus1, CMT);\n-  TEST_VQSHL(int, q, uint, u, 64, 2, expected_cumulative_sat_max_minus1, CMT);\n+  TEST_VQSHL(int, , int, s, 8, 8, CMT);\n+  TEST_VQSHL(int, , int, s, 16, 4, CMT);\n+  TEST_VQSHL(int, , int, s, 32, 2, CMT);\n+  TEST_VQSHL(int, , int, s, 64, 1, CMT);\n+  TEST_VQSHL(int, , uint, u, 8, 8, CMT);\n+  TEST_VQSHL(int, , uint, u, 16, 4, CMT);\n+  TEST_VQSHL(int, , uint, u, 32, 2, CMT);\n+  TEST_VQSHL(int, , uint, u, 64, 1, CMT);\n+  TEST_VQSHL(int, q, int, s, 8, 16, CMT);\n+  TEST_VQSHL(int, q, int, s, 16, 8, CMT);\n+  TEST_VQSHL(int, q, int, s, 32, 4, CMT);\n+  TEST_VQSHL(int, q, int, s, 64, 2, CMT);\n+  TEST_VQSHL(int, q, uint, u, 8, 16, CMT);\n+  TEST_VQSHL(int, q, uint, u, 16, 8, CMT);\n+  TEST_VQSHL(int, q, uint, u, 32, 4, CMT);\n+  TEST_VQSHL(int, q, uint, u, 64, 2, CMT);\n \n   CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_max_minus1, CMT);\n   CHECK(TEST_MSG, int, 16, 4, PRIx16, expected_max_minus1, CMT);\n@@ -772,22 +636,22 @@ FNNAME (INSN)\n \n #undef CMT\n #define CMT \" (max input, large shift amount)\"\n-  TEST_VQSHL(int, , int, s, 8, 8, expected_cumulative_sat_max_large, CMT);\n-  TEST_VQSHL(int, , int, s, 16, 4, expected_cumulative_sat_max_large, CMT);\n-  TEST_VQSHL(int, , int, s, 32, 2, expected_cumulative_sat_max_large, CMT);\n-  TEST_VQSHL(int, , int, s, 64, 1, expected_cumulative_sat_max_large, CMT);\n-  TEST_VQSHL(int, , uint, u, 8, 8, expected_cumulative_sat_max_large, CMT);\n-  TEST_VQSHL(int, , uint, u, 16, 4, expected_cumulative_sat_max_large, CMT);\n-  TEST_VQSHL(int, , uint, u, 32, 2, expected_cumulative_sat_max_large, CMT);\n-  TEST_VQSHL(int, , uint, u, 64, 1, expected_cumulative_sat_max_large, CMT);\n-  TEST_VQSHL(int, q, int, s, 8, 16, expected_cumulative_sat_max_large, CMT);\n-  TEST_VQSHL(int, q, int, s, 16, 8, expected_cumulative_sat_max_large, CMT);\n-  TEST_VQSHL(int, q, int, s, 32, 4, expected_cumulative_sat_max_large, CMT);\n-  TEST_VQSHL(int, q, int, s, 64, 2, expected_cumulative_sat_max_large, CMT);\n-  TEST_VQSHL(int, q, uint, u, 8, 16, expected_cumulative_sat_max_large, CMT);\n-  TEST_VQSHL(int, q, uint, u, 16, 8, expected_cumulative_sat_max_large, CMT);\n-  TEST_VQSHL(int, q, uint, u, 32, 4, expected_cumulative_sat_max_large, CMT);\n-  TEST_VQSHL(int, q, uint, u, 64, 2, expected_cumulative_sat_max_large, CMT);\n+  TEST_VQSHL(int, , int, s, 8, 8, CMT);\n+  TEST_VQSHL(int, , int, s, 16, 4, CMT);\n+  TEST_VQSHL(int, , int, s, 32, 2, CMT);\n+  TEST_VQSHL(int, , int, s, 64, 1, CMT);\n+  TEST_VQSHL(int, , uint, u, 8, 8, CMT);\n+  TEST_VQSHL(int, , uint, u, 16, 4, CMT);\n+  TEST_VQSHL(int, , uint, u, 32, 2, CMT);\n+  TEST_VQSHL(int, , uint, u, 64, 1, CMT);\n+  TEST_VQSHL(int, q, int, s, 8, 16, CMT);\n+  TEST_VQSHL(int, q, int, s, 16, 8, CMT);\n+  TEST_VQSHL(int, q, int, s, 32, 4, CMT);\n+  TEST_VQSHL(int, q, int, s, 64, 2, CMT);\n+  TEST_VQSHL(int, q, uint, u, 8, 16, CMT);\n+  TEST_VQSHL(int, q, uint, u, 16, 8, CMT);\n+  TEST_VQSHL(int, q, uint, u, 32, 4, CMT);\n+  TEST_VQSHL(int, q, uint, u, 64, 2, CMT);\n \n   CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_max_large, CMT);\n   CHECK(TEST_MSG, int, 16, 4, PRIx16, expected_max_large, CMT);\n@@ -815,8 +679,8 @@ FNNAME (INSN)\n \n #undef CMT\n #define CMT \" (check saturation on 64 bits)\"\n-  TEST_VQSHL(int, , int, s, 64, 1, expected_cumulative_sat_64, CMT);\n-  TEST_VQSHL(int, q, int, s, 64, 2, expected_cumulative_sat_64, CMT);\n+  TEST_VQSHL(int, , int, s, 64, 1, CMT);\n+  TEST_VQSHL(int, q, int, s, 64, 2, CMT);\n \n   CHECK(TEST_MSG, int, 64, 1, PRIx64, expected_64, CMT);\n   CHECK(TEST_MSG, int, 64, 2, PRIx64, expected_64, CMT);"}, {"sha": "602bc361bfe5b3a202c951d9ad0423a5c00dbf07", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vqshl_n.c", "status": "modified", "additions": 40, "deletions": 77, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/763b865a17d32ff1d19720e333999de25132d3d4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqshl_n.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/763b865a17d32ff1d19720e333999de25132d3d4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqshl_n.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqshl_n.c?ref=763b865a17d32ff1d19720e333999de25132d3d4", "patch": "@@ -2,24 +2,6 @@\n #include \"arm-neon-ref.h\"\n #include \"compute-ref-data.h\"\n \n-/* Expected values of cumulative_saturation flag.  */\n-int VECT_VAR(expected_cumulative_sat,int,8,8) = 0;\n-int VECT_VAR(expected_cumulative_sat,int,16,4) = 0;\n-int VECT_VAR(expected_cumulative_sat,int,32,2) = 0;\n-int VECT_VAR(expected_cumulative_sat,int,64,1) = 0;\n-int VECT_VAR(expected_cumulative_sat,uint,8,8) = 1;\n-int VECT_VAR(expected_cumulative_sat,uint,16,4) = 1;\n-int VECT_VAR(expected_cumulative_sat,uint,32,2) = 1;\n-int VECT_VAR(expected_cumulative_sat,uint,64,1) = 1;\n-int VECT_VAR(expected_cumulative_sat,int,8,16) = 0;\n-int VECT_VAR(expected_cumulative_sat,int,16,8) = 0;\n-int VECT_VAR(expected_cumulative_sat,int,32,4) = 0;\n-int VECT_VAR(expected_cumulative_sat,int,64,2) = 0;\n-int VECT_VAR(expected_cumulative_sat,uint,8,16) = 1;\n-int VECT_VAR(expected_cumulative_sat,uint,16,8) = 1;\n-int VECT_VAR(expected_cumulative_sat,uint,32,4) = 1;\n-int VECT_VAR(expected_cumulative_sat,uint,64,2) = 1;\n-\n /* Expected results.  */\n VECT_VAR_DECL(expected,int,8,8) [] = { 0xc0, 0xc4, 0xc8, 0xcc,\n \t\t\t\t       0xd0, 0xd4, 0xd8, 0xdc };\n@@ -51,24 +33,6 @@ VECT_VAR_DECL(expected,uint,32,4) [] = { 0xffffffff, 0xffffffff,\n VECT_VAR_DECL(expected,uint,64,2) [] = { 0xffffffffffffffff,\n \t\t\t\t\t 0xffffffffffffffff };\n \n-/* Expected values of cumulative_saturation flag with max positive input.  */\n-int VECT_VAR(expected_cumulative_sat_max,int,8,8) = 1;\n-int VECT_VAR(expected_cumulative_sat_max,int,16,4) = 1;\n-int VECT_VAR(expected_cumulative_sat_max,int,32,2) = 1;\n-int VECT_VAR(expected_cumulative_sat_max,int,64,1) = 1;\n-int VECT_VAR(expected_cumulative_sat_max,uint,8,8) = 1;\n-int VECT_VAR(expected_cumulative_sat_max,uint,16,4) = 1;\n-int VECT_VAR(expected_cumulative_sat_max,uint,32,2) = 1;\n-int VECT_VAR(expected_cumulative_sat_max,uint,64,1) = 1;\n-int VECT_VAR(expected_cumulative_sat_max,int,8,16) = 1;\n-int VECT_VAR(expected_cumulative_sat_max,int,16,8) = 1;\n-int VECT_VAR(expected_cumulative_sat_max,int,32,4) = 1;\n-int VECT_VAR(expected_cumulative_sat_max,int,64,2) = 1;\n-int VECT_VAR(expected_cumulative_sat_max,uint,8,16) = 1;\n-int VECT_VAR(expected_cumulative_sat_max,uint,16,8) = 1;\n-int VECT_VAR(expected_cumulative_sat_max,uint,32,4) = 1;\n-int VECT_VAR(expected_cumulative_sat_max,uint,64,2) = 1;\n-\n /* Expected results with max positive input.  */\n VECT_VAR_DECL(expected_max,int,8,8) [] = { 0x7f, 0x7f, 0x7f, 0x7f,\n \t\t\t\t\t   0x7f, 0x7f, 0x7f, 0x7f };\n@@ -110,21 +74,20 @@ VECT_VAR_DECL(expected_max,uint,64,2) [] = { 0xffffffffffffffff,\n FNNAME (INSN)\n {\n   /* Basic test: v2=vqshl_n(v1,v), then store the result.  */\n-#define TEST_VQSHL_N2(INSN, Q, T1, T2, W, N, V, EXPECTED_CUMULATIVE_SAT, CMT) \\\n+#define TEST_VQSHL_N2(INSN, Q, T1, T2, W, N, V, CMT) \\\n   Set_Neon_Cumulative_Sat(0, VECT_VAR(vector_res, T1, W, N));\t\t\\\n   VECT_VAR(vector_res, T1, W, N) =\t\t\t\t\t\\\n     INSN##Q##_n_##T2##W(VECT_VAR(vector, T1, W, N),\t\t\t\\\n \t\t\tV);\t\t\t\t\t\t\\\n   vst1##Q##_##T2##W(VECT_VAR(result, T1, W, N),\t\t\t\t\\\n-\t\t    VECT_VAR(vector_res, T1, W, N));\t\t\t\\\n-  CHECK_CUMULATIVE_SAT(TEST_MSG, T1, W, N, EXPECTED_CUMULATIVE_SAT, CMT)\n+\t\t    VECT_VAR(vector_res, T1, W, N))\n \n   /* Two auxliary macros are necessary to expand INSN */\n-#define TEST_VQSHL_N1(INSN, T3, Q, T1, T2, W, N, EXPECTED_CUMULATIVE_SAT, CMT) \\\n-  TEST_VQSHL_N2(INSN, T3, Q, T1, T2, W, N, EXPECTED_CUMULATIVE_SAT, CMT)\n+#define TEST_VQSHL_N1(INSN, T3, Q, T1, T2, W, N, CMT) \\\n+  TEST_VQSHL_N2(INSN, T3, Q, T1, T2, W, N, CMT)\n \n-#define TEST_VQSHL_N(T3, Q, T1, T2, W, N, EXPECTED_CUMULATIVE_SAT, CMT)\t\\\n-  TEST_VQSHL_N1(INSN, T3, Q, T1, T2, W, N, EXPECTED_CUMULATIVE_SAT, CMT)\n+#define TEST_VQSHL_N(T3, Q, T1, T2, W, N, CMT)\t\\\n+  TEST_VQSHL_N1(INSN, T3, Q, T1, T2, W, N, CMT)\n \n   DECL_VARIABLE_ALL_VARIANTS(vector);\n   DECL_VARIABLE_ALL_VARIANTS(vector_res);\n@@ -135,23 +98,23 @@ FNNAME (INSN)\n \n   /* Choose shift amount arbitrarily.  */\n #define CMT \"\"\n-  TEST_VQSHL_N(, int, s, 8, 8, 2, expected_cumulative_sat, CMT);\n-  TEST_VQSHL_N(, int, s, 16, 4, 1, expected_cumulative_sat, CMT);\n-  TEST_VQSHL_N(, int, s, 32, 2, 1, expected_cumulative_sat, CMT);\n-  TEST_VQSHL_N(, int, s, 64, 1, 2, expected_cumulative_sat, CMT);\n-  TEST_VQSHL_N(, uint, u, 8, 8, 3, expected_cumulative_sat, CMT);\n-  TEST_VQSHL_N(, uint, u, 16, 4, 2, expected_cumulative_sat, CMT);\n-  TEST_VQSHL_N(, uint, u, 32, 2, 3, expected_cumulative_sat, CMT);\n-  TEST_VQSHL_N(, uint, u, 64, 1, 3, expected_cumulative_sat, CMT);\n-\n-  TEST_VQSHL_N(q, int, s, 8, 16, 2, expected_cumulative_sat, CMT);\n-  TEST_VQSHL_N(q, int, s, 16, 8, 1, expected_cumulative_sat, CMT);\n-  TEST_VQSHL_N(q, int, s, 32, 4, 1, expected_cumulative_sat, CMT);\n-  TEST_VQSHL_N(q, int, s, 64, 2, 2, expected_cumulative_sat, CMT);\n-  TEST_VQSHL_N(q, uint, u, 8, 16, 3, expected_cumulative_sat, CMT);\n-  TEST_VQSHL_N(q, uint, u, 16, 8, 2, expected_cumulative_sat, CMT);\n-  TEST_VQSHL_N(q, uint, u, 32, 4, 3, expected_cumulative_sat, CMT);\n-  TEST_VQSHL_N(q, uint, u, 64, 2, 3, expected_cumulative_sat, CMT);\n+  TEST_VQSHL_N(, int, s, 8, 8, 2, CMT);\n+  TEST_VQSHL_N(, int, s, 16, 4, 1, CMT);\n+  TEST_VQSHL_N(, int, s, 32, 2, 1, CMT);\n+  TEST_VQSHL_N(, int, s, 64, 1, 2, CMT);\n+  TEST_VQSHL_N(, uint, u, 8, 8, 3, CMT);\n+  TEST_VQSHL_N(, uint, u, 16, 4, 2, CMT);\n+  TEST_VQSHL_N(, uint, u, 32, 2, 3, CMT);\n+  TEST_VQSHL_N(, uint, u, 64, 1, 3, CMT);\n+\n+  TEST_VQSHL_N(q, int, s, 8, 16, 2, CMT);\n+  TEST_VQSHL_N(q, int, s, 16, 8, 1, CMT);\n+  TEST_VQSHL_N(q, int, s, 32, 4, 1, CMT);\n+  TEST_VQSHL_N(q, int, s, 64, 2, 2, CMT);\n+  TEST_VQSHL_N(q, uint, u, 8, 16, 3, CMT);\n+  TEST_VQSHL_N(q, uint, u, 16, 8, 2, CMT);\n+  TEST_VQSHL_N(q, uint, u, 32, 4, 3, CMT);\n+  TEST_VQSHL_N(q, uint, u, 64, 2, 3, CMT);\n \n   CHECK(TEST_MSG, int, 8, 8, PRIx8, expected, CMT);\n   CHECK(TEST_MSG, int, 16, 4, PRIx16, expected, CMT);\n@@ -191,23 +154,23 @@ FNNAME (INSN)\n \n #undef CMT\n #define CMT \" (with max input)\"\n-  TEST_VQSHL_N(, int, s, 8, 8, 2, expected_cumulative_sat_max, CMT);\n-  TEST_VQSHL_N(, int, s, 16, 4, 1, expected_cumulative_sat_max, CMT);\n-  TEST_VQSHL_N(, int, s, 32, 2, 1, expected_cumulative_sat_max, CMT);\n-  TEST_VQSHL_N(, int, s, 64, 1, 2, expected_cumulative_sat_max, CMT);\n-  TEST_VQSHL_N(, uint, u, 8, 8, 3, expected_cumulative_sat_max, CMT);\n-  TEST_VQSHL_N(, uint, u, 16, 4, 2, expected_cumulative_sat_max, CMT);\n-  TEST_VQSHL_N(, uint, u, 32, 2, 3, expected_cumulative_sat_max, CMT);\n-  TEST_VQSHL_N(, uint, u, 64, 1, 3, expected_cumulative_sat_max, CMT);\n-\n-  TEST_VQSHL_N(q, int, s, 8, 16, 2, expected_cumulative_sat_max, CMT);\n-  TEST_VQSHL_N(q, int, s, 16, 8, 1, expected_cumulative_sat_max, CMT);\n-  TEST_VQSHL_N(q, int, s, 32, 4, 1, expected_cumulative_sat_max, CMT);\n-  TEST_VQSHL_N(q, int, s, 64, 2, 2, expected_cumulative_sat_max, CMT);\n-  TEST_VQSHL_N(q, uint, u, 8, 16, 3, expected_cumulative_sat_max, CMT);\n-  TEST_VQSHL_N(q, uint, u, 16, 8, 2, expected_cumulative_sat_max, CMT);\n-  TEST_VQSHL_N(q, uint, u, 32, 4, 3, expected_cumulative_sat_max, CMT);\n-  TEST_VQSHL_N(q, uint, u, 64, 2, 3, expected_cumulative_sat_max, CMT);\n+  TEST_VQSHL_N(, int, s, 8, 8, 2, CMT);\n+  TEST_VQSHL_N(, int, s, 16, 4, 1, CMT);\n+  TEST_VQSHL_N(, int, s, 32, 2, 1, CMT);\n+  TEST_VQSHL_N(, int, s, 64, 1, 2, CMT);\n+  TEST_VQSHL_N(, uint, u, 8, 8, 3, CMT);\n+  TEST_VQSHL_N(, uint, u, 16, 4, 2, CMT);\n+  TEST_VQSHL_N(, uint, u, 32, 2, 3, CMT);\n+  TEST_VQSHL_N(, uint, u, 64, 1, 3, CMT);\n+\n+  TEST_VQSHL_N(q, int, s, 8, 16, 2, CMT);\n+  TEST_VQSHL_N(q, int, s, 16, 8, 1, CMT);\n+  TEST_VQSHL_N(q, int, s, 32, 4, 1, CMT);\n+  TEST_VQSHL_N(q, int, s, 64, 2, 2, CMT);\n+  TEST_VQSHL_N(q, uint, u, 8, 16, 3, CMT);\n+  TEST_VQSHL_N(q, uint, u, 16, 8, 2, CMT);\n+  TEST_VQSHL_N(q, uint, u, 32, 4, 3, CMT);\n+  TEST_VQSHL_N(q, uint, u, 64, 2, 3, CMT);\n \n   CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_max, CMT);\n   CHECK(TEST_MSG, int, 16, 4, PRIx16, expected_max, CMT);"}, {"sha": "6ebb70254afc7f0a2c295c195a1bba3e9d7bd800", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vqshlu_n.c", "status": "modified", "additions": 38, "deletions": 80, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/763b865a17d32ff1d19720e333999de25132d3d4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqshlu_n.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/763b865a17d32ff1d19720e333999de25132d3d4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqshlu_n.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqshlu_n.c?ref=763b865a17d32ff1d19720e333999de25132d3d4", "patch": "@@ -2,17 +2,6 @@\n #include \"arm-neon-ref.h\"\n #include \"compute-ref-data.h\"\n \n-/* Expected values of cumulative_saturation flag with negative\n-   input.  */\n-int VECT_VAR(expected_cumulative_sat_neg,int,8,8) = 1;\n-int VECT_VAR(expected_cumulative_sat_neg,int,16,4) = 1;\n-int VECT_VAR(expected_cumulative_sat_neg,int,32,2) = 1;\n-int VECT_VAR(expected_cumulative_sat_neg,int,64,1) = 1;\n-int VECT_VAR(expected_cumulative_sat_neg,int,8,16) = 1;\n-int VECT_VAR(expected_cumulative_sat_neg,int,16,8) = 1;\n-int VECT_VAR(expected_cumulative_sat_neg,int,32,4) = 1;\n-int VECT_VAR(expected_cumulative_sat_neg,int,64,2) = 1;\n-\n /* Expected results with negative input.  */\n VECT_VAR_DECL(expected_neg,uint,8,8) [] = { 0x0, 0x0, 0x0, 0x0,\n \t\t\t\t\t    0x0, 0x0, 0x0, 0x0 };\n@@ -28,16 +17,6 @@ VECT_VAR_DECL(expected_neg,uint,16,8) [] = { 0x0, 0x0, 0x0, 0x0,\n VECT_VAR_DECL(expected_neg,uint,32,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n VECT_VAR_DECL(expected_neg,uint,64,2) [] = { 0x0, 0x0 };\n \n-/* Expected values of cumulative_saturation flag with shift by 1.  */\n-int VECT_VAR(expected_cumulative_sat_sh1,int,8,8) = 0;\n-int VECT_VAR(expected_cumulative_sat_sh1,int,16,4) = 0;\n-int VECT_VAR(expected_cumulative_sat_sh1,int,32,2) = 0;\n-int VECT_VAR(expected_cumulative_sat_sh1,int,64,1) = 0;\n-int VECT_VAR(expected_cumulative_sat_sh1,int,8,16) = 0;\n-int VECT_VAR(expected_cumulative_sat_sh1,int,16,8) = 0;\n-int VECT_VAR(expected_cumulative_sat_sh1,int,32,4) = 0;\n-int VECT_VAR(expected_cumulative_sat_sh1,int,64,2) = 0;\n-\n /* Expected results with shift by 1.  */\n VECT_VAR_DECL(expected_sh1,uint,8,8) [] = { 0xfe, 0xfe, 0xfe, 0xfe,\n \t\t\t\t\t    0xfe, 0xfe, 0xfe, 0xfe };\n@@ -55,16 +34,6 @@ VECT_VAR_DECL(expected_sh1,uint,32,4) [] = { 0xfffffffe, 0xfffffffe,\n VECT_VAR_DECL(expected_sh1,uint,64,2) [] = { 0xfffffffffffffffe,\n \t\t\t\t\t     0xfffffffffffffffe };\n \n-/* Expected values of cumulative_saturation flag with shift by 2.  */\n-int VECT_VAR(expected_cumulative_sat_sh2,int,8,8) = 1;\n-int VECT_VAR(expected_cumulative_sat_sh2,int,16,4) = 1;\n-int VECT_VAR(expected_cumulative_sat_sh2,int,32,2) = 1;\n-int VECT_VAR(expected_cumulative_sat_sh2,int,64,1) = 1;\n-int VECT_VAR(expected_cumulative_sat_sh2,int,8,16) = 1;\n-int VECT_VAR(expected_cumulative_sat_sh2,int,16,8) = 1;\n-int VECT_VAR(expected_cumulative_sat_sh2,int,32,4) = 1;\n-int VECT_VAR(expected_cumulative_sat_sh2,int,64,2) = 1;\n-\n /* Expected results with shift by 2.  */\n VECT_VAR_DECL(expected_sh2,uint,8,8) [] = { 0xff, 0xff, 0xff, 0xff,\n \t\t\t\t\t    0xff, 0xff, 0xff, 0xff };\n@@ -82,16 +51,6 @@ VECT_VAR_DECL(expected_sh2,uint,32,4) [] = { 0xffffffff, 0xffffffff,\n VECT_VAR_DECL(expected_sh2,uint,64,2) [] = { 0xffffffffffffffff,\n \t\t\t\t\t     0xffffffffffffffff };\n \n-/* Expected values of cumulative_saturation flag.  */\n-int VECT_VAR(expected_cumulative_sat,int,8,8) = 0;\n-int VECT_VAR(expected_cumulative_sat,int,16,4) = 0;\n-int VECT_VAR(expected_cumulative_sat,int,32,2) = 0;\n-int VECT_VAR(expected_cumulative_sat,int,64,1) = 0;\n-int VECT_VAR(expected_cumulative_sat,int,8,16) = 0;\n-int VECT_VAR(expected_cumulative_sat,int,16,8) = 0;\n-int VECT_VAR(expected_cumulative_sat,int,32,4) = 0;\n-int VECT_VAR(expected_cumulative_sat,int,64,2) = 0;\n-\n /* Expected results.  */\n VECT_VAR_DECL(expected,uint,8,8) [] = { 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2 };\n VECT_VAR_DECL(expected,uint,16,4) [] = { 0x8, 0x8, 0x8, 0x8 };\n@@ -116,21 +75,20 @@ VECT_VAR_DECL(expected,uint,64,2) [] = { 0x800, 0x800 };\n FNNAME (INSN)\n {\n   /* Basic test: v2=vqshlu_n(v1,v), then store the result.  */\n-#define TEST_VQSHLU_N2(INSN, Q, T1, T2, T3, T4, W, N, V, EXPECTED_CUMULATIVE_SAT, CMT) \\\n+#define TEST_VQSHLU_N2(INSN, Q, T1, T2, T3, T4, W, N, V, CMT) \\\n   Set_Neon_Cumulative_Sat(0, VECT_VAR(vector_res, T3, W, N));\t\t\\\n   VECT_VAR(vector_res, T3, W, N) =\t\t\t\t\t\\\n     INSN##Q##_n_##T2##W(VECT_VAR(vector, T1, W, N),\t\t\t\\\n \t\t\tV);\t\t\t\t\t\t\\\n   vst1##Q##_##T4##W(VECT_VAR(result, T3, W, N),\t\t\t\t\\\n-\t\t    VECT_VAR(vector_res, T3, W, N));\t\t\t\\\n-  CHECK_CUMULATIVE_SAT(TEST_MSG, T1, W, N, EXPECTED_CUMULATIVE_SAT, CMT)\n+\t\t    VECT_VAR(vector_res, T3, W, N))\n \n   /* Two auxliary macros are necessary to expand INSN */\n-#define TEST_VQSHLU_N1(INSN, Q, T1, T2, T3, T4, W, N, V, EXPECTED_CUMULATIVE_SAT, CMT) \\\n-  TEST_VQSHLU_N2(INSN, Q, T1, T2, T3, T4, W, N, V, EXPECTED_CUMULATIVE_SAT, CMT)\n+#define TEST_VQSHLU_N1(INSN, Q, T1, T2, T3, T4, W, N, V, CMT) \\\n+  TEST_VQSHLU_N2(INSN, Q, T1, T2, T3, T4, W, N, V, CMT)\n \n-#define TEST_VQSHLU_N(Q, T1, T2, T3, T4, W, N, V, EXPECTED_CUMULATIVE_SAT, CMT) \\\n-  TEST_VQSHLU_N1(INSN, Q, T1, T2, T3, T4, W, N, V, EXPECTED_CUMULATIVE_SAT, CMT)\n+#define TEST_VQSHLU_N(Q, T1, T2, T3, T4, W, N, V, CMT) \\\n+  TEST_VQSHLU_N1(INSN, Q, T1, T2, T3, T4, W, N, V, CMT)\n \n \n   DECL_VARIABLE_ALL_VARIANTS(vector);\n@@ -151,14 +109,14 @@ FNNAME (INSN)\n \n   /* Choose shift amount arbitrarily.  */\n #define CMT \" (negative input)\"\n-  TEST_VQSHLU_N(, int, s, uint, u, 8, 8, 2, expected_cumulative_sat_neg, CMT);\n-  TEST_VQSHLU_N(, int, s, uint, u, 16, 4, 1, expected_cumulative_sat_neg, CMT);\n-  TEST_VQSHLU_N(, int, s, uint, u, 32, 2, 1, expected_cumulative_sat_neg, CMT);\n-  TEST_VQSHLU_N(, int, s, uint, u, 64, 1, 2, expected_cumulative_sat_neg, CMT);\n-  TEST_VQSHLU_N(q, int, s, uint, u, 8, 16, 2, expected_cumulative_sat_neg, CMT);\n-  TEST_VQSHLU_N(q, int, s, uint, u, 16, 8, 1, expected_cumulative_sat_neg, CMT);\n-  TEST_VQSHLU_N(q, int, s, uint, u, 32, 4, 1, expected_cumulative_sat_neg, CMT);\n-  TEST_VQSHLU_N(q, int, s, uint, u, 64, 2, 2, expected_cumulative_sat_neg, CMT);\n+  TEST_VQSHLU_N(, int, s, uint, u, 8, 8, 2, CMT);\n+  TEST_VQSHLU_N(, int, s, uint, u, 16, 4, 1, CMT);\n+  TEST_VQSHLU_N(, int, s, uint, u, 32, 2, 1, CMT);\n+  TEST_VQSHLU_N(, int, s, uint, u, 64, 1, 2, CMT);\n+  TEST_VQSHLU_N(q, int, s, uint, u, 8, 16, 2, CMT);\n+  TEST_VQSHLU_N(q, int, s, uint, u, 16, 8, 1, CMT);\n+  TEST_VQSHLU_N(q, int, s, uint, u, 32, 4, 1, CMT);\n+  TEST_VQSHLU_N(q, int, s, uint, u, 64, 2, 2, CMT);\n \n   CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_neg, CMT);\n   CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected_neg, CMT);\n@@ -184,14 +142,14 @@ FNNAME (INSN)\n   /* shift by 1.  */\n #undef CMT\n #define CMT \" (shift by 1)\"\n-  TEST_VQSHLU_N(, int, s, uint, u, 8, 8, 1, expected_cumulative_sat_sh1, CMT);\n-  TEST_VQSHLU_N(, int, s, uint, u, 16, 4, 1, expected_cumulative_sat_sh1, CMT);\n-  TEST_VQSHLU_N(, int, s, uint, u, 32, 2, 1, expected_cumulative_sat_sh1, CMT);\n-  TEST_VQSHLU_N(, int, s, uint, u, 64, 1, 1, expected_cumulative_sat_sh1, CMT);\n-  TEST_VQSHLU_N(q, int, s, uint, u, 8, 16, 1, expected_cumulative_sat_sh1, CMT);\n-  TEST_VQSHLU_N(q, int, s, uint, u, 16, 8, 1, expected_cumulative_sat_sh1, CMT);\n-  TEST_VQSHLU_N(q, int, s, uint, u, 32, 4, 1, expected_cumulative_sat_sh1, CMT);\n-  TEST_VQSHLU_N(q, int, s, uint, u, 64, 2, 1, expected_cumulative_sat_sh1, CMT);\n+  TEST_VQSHLU_N(, int, s, uint, u, 8, 8, 1, CMT);\n+  TEST_VQSHLU_N(, int, s, uint, u, 16, 4, 1, CMT);\n+  TEST_VQSHLU_N(, int, s, uint, u, 32, 2, 1, CMT);\n+  TEST_VQSHLU_N(, int, s, uint, u, 64, 1, 1, CMT);\n+  TEST_VQSHLU_N(q, int, s, uint, u, 8, 16, 1, CMT);\n+  TEST_VQSHLU_N(q, int, s, uint, u, 16, 8, 1, CMT);\n+  TEST_VQSHLU_N(q, int, s, uint, u, 32, 4, 1, CMT);\n+  TEST_VQSHLU_N(q, int, s, uint, u, 64, 2, 1, CMT);\n \n   CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_sh1, CMT);\n   CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected_sh1, CMT);\n@@ -205,14 +163,14 @@ FNNAME (INSN)\n   /* shift by 2 to force saturation.  */\n #undef CMT\n #define CMT \" (shift by 2)\"\n-  TEST_VQSHLU_N(, int, s, uint, u, 8, 8, 2, expected_cumulative_sat_sh2, CMT);\n-  TEST_VQSHLU_N(, int, s, uint, u, 16, 4, 2, expected_cumulative_sat_sh2, CMT);\n-  TEST_VQSHLU_N(, int, s, uint, u, 32, 2, 2, expected_cumulative_sat_sh2, CMT);\n-  TEST_VQSHLU_N(, int, s, uint, u, 64, 1, 2, expected_cumulative_sat_sh2, CMT);\n-  TEST_VQSHLU_N(q, int, s, uint, u, 8, 16, 2, expected_cumulative_sat_sh2, CMT);\n-  TEST_VQSHLU_N(q, int, s, uint, u, 16, 8, 2, expected_cumulative_sat_sh2, CMT);\n-  TEST_VQSHLU_N(q, int, s, uint, u, 32, 4, 2, expected_cumulative_sat_sh2, CMT);\n-  TEST_VQSHLU_N(q, int, s, uint, u, 64, 2, 2, expected_cumulative_sat_sh2, CMT);\n+  TEST_VQSHLU_N(, int, s, uint, u, 8, 8, 2, CMT);\n+  TEST_VQSHLU_N(, int, s, uint, u, 16, 4, 2, CMT);\n+  TEST_VQSHLU_N(, int, s, uint, u, 32, 2, 2, CMT);\n+  TEST_VQSHLU_N(, int, s, uint, u, 64, 1, 2, CMT);\n+  TEST_VQSHLU_N(q, int, s, uint, u, 8, 16, 2, CMT);\n+  TEST_VQSHLU_N(q, int, s, uint, u, 16, 8, 2, CMT);\n+  TEST_VQSHLU_N(q, int, s, uint, u, 32, 4, 2, CMT);\n+  TEST_VQSHLU_N(q, int, s, uint, u, 64, 2, 2, CMT);\n \n   CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_sh2, CMT);\n   CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected_sh2, CMT);\n@@ -237,14 +195,14 @@ FNNAME (INSN)\n   /* Arbitrary shift amount.  */\n #undef CMT\n #define CMT \"\"\n-  TEST_VQSHLU_N(, int, s, uint, u, 8, 8, 1, expected_cumulative_sat, CMT);\n-  TEST_VQSHLU_N(, int, s, uint, u, 16, 4, 2, expected_cumulative_sat, CMT);\n-  TEST_VQSHLU_N(, int, s, uint, u, 32, 2, 3, expected_cumulative_sat, CMT);\n-  TEST_VQSHLU_N(, int, s, uint, u, 64, 1, 4, expected_cumulative_sat, CMT);\n-  TEST_VQSHLU_N(q, int, s, uint, u, 8, 16, 5, expected_cumulative_sat, CMT);\n-  TEST_VQSHLU_N(q, int, s, uint, u, 16, 8, 6, expected_cumulative_sat, CMT);\n-  TEST_VQSHLU_N(q, int, s, uint, u, 32, 4, 7, expected_cumulative_sat, CMT);\n-  TEST_VQSHLU_N(q, int, s, uint, u, 64, 2, 8, expected_cumulative_sat, CMT);\n+  TEST_VQSHLU_N(, int, s, uint, u, 8, 8, 1, CMT);\n+  TEST_VQSHLU_N(, int, s, uint, u, 16, 4, 2, CMT);\n+  TEST_VQSHLU_N(, int, s, uint, u, 32, 2, 3, CMT);\n+  TEST_VQSHLU_N(, int, s, uint, u, 64, 1, 4, CMT);\n+  TEST_VQSHLU_N(q, int, s, uint, u, 8, 16, 5, CMT);\n+  TEST_VQSHLU_N(q, int, s, uint, u, 16, 8, 6, CMT);\n+  TEST_VQSHLU_N(q, int, s, uint, u, 32, 4, 7, CMT);\n+  TEST_VQSHLU_N(q, int, s, uint, u, 64, 2, 8, CMT);\n \n   CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected, CMT);\n   CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected, CMT);"}, {"sha": "026a501ef81c78c38361b6073cb97ba847b04ff1", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vqshrn_n.c", "status": "modified", "additions": 24, "deletions": 51, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/763b865a17d32ff1d19720e333999de25132d3d4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqshrn_n.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/763b865a17d32ff1d19720e333999de25132d3d4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqshrn_n.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqshrn_n.c?ref=763b865a17d32ff1d19720e333999de25132d3d4", "patch": "@@ -2,14 +2,6 @@\n #include \"arm-neon-ref.h\"\n #include \"compute-ref-data.h\"\n \n-/* Expected values of cumulative_saturation flag.  */\n-int VECT_VAR(expected_cumulative_sat,int,16,8) = 0;\n-int VECT_VAR(expected_cumulative_sat,int,32,4) = 0;\n-int VECT_VAR(expected_cumulative_sat,int,64,2) = 0;\n-int VECT_VAR(expected_cumulative_sat,uint,16,8) = 1;\n-int VECT_VAR(expected_cumulative_sat,uint,32,4) = 1;\n-int VECT_VAR(expected_cumulative_sat,uint,64,2) = 1;\n-\n /* Expected results.  */\n VECT_VAR_DECL(expected,int,8,8) [] = { 0xf8, 0xf8, 0xf9, 0xf9,\n \t\t\t\t       0xfa, 0xfa, 0xfb, 0xfb };\n@@ -20,15 +12,6 @@ VECT_VAR_DECL(expected,uint,8,8) [] = { 0xff, 0xff, 0xff, 0xff,\n VECT_VAR_DECL(expected,uint,16,4) [] = { 0xffff, 0xffff, 0xffff, 0xffff };\n VECT_VAR_DECL(expected,uint,32,2) [] = { 0xffffffff, 0xffffffff };\n \n-/* Expected values of cumulative_saturation flag with max input value\n-   shifted by 3.  */\n-int VECT_VAR(expected_cumulative_sat_max_sh3,int,16,8) = 1;\n-int VECT_VAR(expected_cumulative_sat_max_sh3,int,32,4) = 1;\n-int VECT_VAR(expected_cumulative_sat_max_sh3,int,64,2) = 1;\n-int VECT_VAR(expected_cumulative_sat_max_sh3,uint,16,8) = 1;\n-int VECT_VAR(expected_cumulative_sat_max_sh3,uint,32,4) = 1;\n-int VECT_VAR(expected_cumulative_sat_max_sh3,uint,64,2) = 1;\n-\n /* Expected results with max input value shifted by 3.  */\n VECT_VAR_DECL(expected_max_sh3,int,8,8) [] = { 0x7f, 0x7f, 0x7f, 0x7f,\n \t\t\t\t\t       0x7f, 0x7f, 0x7f, 0x7f };\n@@ -40,15 +23,6 @@ VECT_VAR_DECL(expected_max_sh3,uint,16,4) [] = { 0xffff, 0xffff,\n \t\t\t\t\t\t 0xffff, 0xffff };\n VECT_VAR_DECL(expected_max_sh3,uint,32,2) [] = { 0xffffffff, 0xffffffff };\n \n-/* Expected values of cumulative_saturation flag with max input value\n-   shifted by type size.  */\n-int VECT_VAR(expected_cumulative_sat_max_shmax,int,16,8) = 0;\n-int VECT_VAR(expected_cumulative_sat_max_shmax,int,32,4) = 0;\n-int VECT_VAR(expected_cumulative_sat_max_shmax,int,64,2) = 0;\n-int VECT_VAR(expected_cumulative_sat_max_shmax,uint,16,8) = 0;\n-int VECT_VAR(expected_cumulative_sat_max_shmax,uint,32,4) = 0;\n-int VECT_VAR(expected_cumulative_sat_max_shmax,uint,64,2) = 0;\n-\n /* Expected results with max input value shifted by type size.  */\n VECT_VAR_DECL(expected_max_shmax,int,8,8) [] = { 0x7f, 0x7f, 0x7f, 0x7f,\n \t\t\t\t\t\t 0x7f, 0x7f, 0x7f, 0x7f };\n@@ -70,21 +44,20 @@ VECT_VAR_DECL(expected_max_shmax,uint,32,2) [] = { 0xffffffff, 0xffffffff };\n FNNAME (INSN)\n {\n   /* Basic test: y=vqshrn_n(x,v), then store the result.  */\n-#define TEST_VQSHRN_N2(INSN, T1, T2, W, W2, N, V, EXPECTED_CUMULATIVE_SAT, CMT) \\\n+#define TEST_VQSHRN_N2(INSN, T1, T2, W, W2, N, V, CMT) \\\n   Set_Neon_Cumulative_Sat(0, VECT_VAR(vector_res, T1, W2, N));\t\t\\\n   VECT_VAR(vector_res, T1, W2, N) =\t\t\t\t\t\\\n     INSN##_##T2##W(VECT_VAR(vector, T1, W, N),\t\t\t\t\\\n \t\t   V);\t\t\t\t\t\t\t\\\n   vst1_##T2##W2(VECT_VAR(result, T1, W2, N),\t\t\t\t\\\n-\t\tVECT_VAR(vector_res, T1, W2, N));\t\t\t\\\n-  CHECK_CUMULATIVE_SAT(TEST_MSG, T1, W, N, EXPECTED_CUMULATIVE_SAT, CMT)\n+\t\tVECT_VAR(vector_res, T1, W2, N))\n \n   /* Two auxliary macros are necessary to expand INSN */\n-#define TEST_VQSHRN_N1(INSN, T1, T2, W, W2, N, V, EXPECTED_CUMULATIVE_SAT, CMT) \\\n-  TEST_VQSHRN_N2(INSN, T1, T2, W, W2, N, V, EXPECTED_CUMULATIVE_SAT, CMT)\n+#define TEST_VQSHRN_N1(INSN, T1, T2, W, W2, N, V, CMT) \\\n+  TEST_VQSHRN_N2(INSN, T1, T2, W, W2, N, V, CMT)\n \n-#define TEST_VQSHRN_N(T1, T2, W, W2, N, V, EXPECTED_CUMULATIVE_SAT, CMT) \\\n-  TEST_VQSHRN_N1(INSN, T1, T2, W, W2, N, V, EXPECTED_CUMULATIVE_SAT, CMT)\n+#define TEST_VQSHRN_N(T1, T2, W, W2, N, V, CMT) \\\n+  TEST_VQSHRN_N1(INSN, T1, T2, W, W2, N, V, CMT)\n \n \n   /* vector is twice as large as vector_res.  */\n@@ -113,12 +86,12 @@ FNNAME (INSN)\n \n   /* Choose shift amount arbitrarily.  */\n #define CMT \"\"\n-  TEST_VQSHRN_N(int, s, 16, 8, 8, 1, expected_cumulative_sat, CMT);\n-  TEST_VQSHRN_N(int, s, 32, 16, 4, 1, expected_cumulative_sat, CMT);\n-  TEST_VQSHRN_N(int, s, 64, 32, 2, 2, expected_cumulative_sat, CMT);\n-  TEST_VQSHRN_N(uint, u, 16, 8, 8, 2, expected_cumulative_sat, CMT);\n-  TEST_VQSHRN_N(uint, u, 32, 16, 4, 3, expected_cumulative_sat, CMT);\n-  TEST_VQSHRN_N(uint, u, 64, 32, 2, 3, expected_cumulative_sat, CMT);\n+  TEST_VQSHRN_N(int, s, 16, 8, 8, 1, CMT);\n+  TEST_VQSHRN_N(int, s, 32, 16, 4, 1, CMT);\n+  TEST_VQSHRN_N(int, s, 64, 32, 2, 2, CMT);\n+  TEST_VQSHRN_N(uint, u, 16, 8, 8, 2, CMT);\n+  TEST_VQSHRN_N(uint, u, 32, 16, 4, 3, CMT);\n+  TEST_VQSHRN_N(uint, u, 64, 32, 2, 3, CMT);\n \n   CHECK(TEST_MSG, int, 8, 8, PRIx8, expected, CMT);\n   CHECK(TEST_MSG, int, 16, 4, PRIx16, expected, CMT);\n@@ -138,12 +111,12 @@ FNNAME (INSN)\n \n #undef CMT\n #define CMT \" (check saturation: shift by 3)\"\n-  TEST_VQSHRN_N(int, s, 16, 8, 8, 3, expected_cumulative_sat_max_sh3, CMT);\n-  TEST_VQSHRN_N(int, s, 32, 16, 4, 3, expected_cumulative_sat_max_sh3, CMT);\n-  TEST_VQSHRN_N(int, s, 64, 32, 2, 3, expected_cumulative_sat_max_sh3, CMT);\n-  TEST_VQSHRN_N(uint, u, 16, 8, 8, 3, expected_cumulative_sat_max_sh3, CMT);\n-  TEST_VQSHRN_N(uint, u, 32, 16, 4, 3, expected_cumulative_sat_max_sh3, CMT);\n-  TEST_VQSHRN_N(uint, u, 64, 32, 2, 3, expected_cumulative_sat_max_sh3, CMT);\n+  TEST_VQSHRN_N(int, s, 16, 8, 8, 3, CMT);\n+  TEST_VQSHRN_N(int, s, 32, 16, 4, 3, CMT);\n+  TEST_VQSHRN_N(int, s, 64, 32, 2, 3, CMT);\n+  TEST_VQSHRN_N(uint, u, 16, 8, 8, 3, CMT);\n+  TEST_VQSHRN_N(uint, u, 32, 16, 4, 3, CMT);\n+  TEST_VQSHRN_N(uint, u, 64, 32, 2, 3, CMT);\n \n   CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_max_sh3, CMT);\n   CHECK(TEST_MSG, int, 16, 4, PRIx16, expected_max_sh3, CMT);\n@@ -155,12 +128,12 @@ FNNAME (INSN)\n \n #undef CMT\n #define CMT \" (check saturation: shift by max)\"\n-  TEST_VQSHRN_N(int, s, 16, 8, 8, 8, expected_cumulative_sat_max_shmax, CMT);\n-  TEST_VQSHRN_N(int, s, 32, 16, 4, 16, expected_cumulative_sat_max_shmax, CMT);\n-  TEST_VQSHRN_N(int, s, 64, 32, 2, 32, expected_cumulative_sat_max_shmax, CMT);\n-  TEST_VQSHRN_N(uint, u, 16, 8, 8, 8, expected_cumulative_sat_max_shmax, CMT);\n-  TEST_VQSHRN_N(uint, u, 32, 16, 4, 16, expected_cumulative_sat_max_shmax, CMT);\n-  TEST_VQSHRN_N(uint, u, 64, 32, 2, 32, expected_cumulative_sat_max_shmax, CMT);\n+  TEST_VQSHRN_N(int, s, 16, 8, 8, 8, CMT);\n+  TEST_VQSHRN_N(int, s, 32, 16, 4, 16, CMT);\n+  TEST_VQSHRN_N(int, s, 64, 32, 2, 32, CMT);\n+  TEST_VQSHRN_N(uint, u, 16, 8, 8, 8, CMT);\n+  TEST_VQSHRN_N(uint, u, 32, 16, 4, 16, CMT);\n+  TEST_VQSHRN_N(uint, u, 64, 32, 2, 32, CMT);\n \n   CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_max_shmax, CMT);\n   CHECK(TEST_MSG, int, 16, 4, PRIx16, expected_max_shmax, CMT);"}, {"sha": "c0d95e9dcc468b91ebb91f2afdb50471c71043b6", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vqshrun_n.c", "status": "modified", "additions": 15, "deletions": 31, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/763b865a17d32ff1d19720e333999de25132d3d4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqshrun_n.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/763b865a17d32ff1d19720e333999de25132d3d4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqshrun_n.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqshrun_n.c?ref=763b865a17d32ff1d19720e333999de25132d3d4", "patch": "@@ -2,23 +2,13 @@\n #include \"arm-neon-ref.h\"\n #include \"compute-ref-data.h\"\n \n-/* Expected values of cumulative_saturation flag with negative input.  */\n-int VECT_VAR(expected_cumulative_sat_neg,int,16,8) = 1;\n-int VECT_VAR(expected_cumulative_sat_neg,int,32,4) = 1;\n-int VECT_VAR(expected_cumulative_sat_neg,int,64,2) = 1;\n \n /* Expected results with negative input.  */\n VECT_VAR_DECL(expected_neg,uint,8,8) [] = { 0x0, 0x0, 0x0, 0x0,\n \t\t\t\t\t    0x0, 0x0, 0x0, 0x0 };\n VECT_VAR_DECL(expected_neg,uint,16,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n VECT_VAR_DECL(expected_neg,uint,32,2) [] = { 0x0, 0x0 };\n \n-/* Expected values of cumulative_saturation flag with max input value\n-   shifted by 1.  */\n-int VECT_VAR(expected_cumulative_sat_max_sh1,int,16,8) = 1;\n-int VECT_VAR(expected_cumulative_sat_max_sh1,int,32,4) = 1;\n-int VECT_VAR(expected_cumulative_sat_max_sh1,int,64,2) = 1;\n-\n /* Expected results with max input value shifted by 1.  */\n VECT_VAR_DECL(expected_max_sh1,uint,8,8) [] = { 0xff, 0xff, 0xff, 0xff,\n \t\t\t\t\t\t0xff, 0xff, 0xff, 0xff };\n@@ -27,11 +17,6 @@ VECT_VAR_DECL(expected_max_sh1,uint,16,4) [] = { 0xffff, 0xffff,\n VECT_VAR_DECL(expected_max_sh1,uint,32,2) [] = { 0xffffffff, 0xffffffff };\n VECT_VAR_DECL(expected_max_sh1,uint,64,1) [] = { 0x3333333333333333 };\n \n-/* Expected values of cumulative_saturation flag.  */\n-int VECT_VAR(expected_cumulative_sat,int,16,8) = 0;\n-int VECT_VAR(expected_cumulative_sat,int,32,4) = 1;\n-int VECT_VAR(expected_cumulative_sat,int,64,2) = 0;\n-\n /* Expected results.  */\n VECT_VAR_DECL(expected,uint,8,8) [] = { 0x48, 0x48, 0x48, 0x48,\n \t\t\t\t\t0x48, 0x48, 0x48, 0x48 };\n@@ -48,21 +33,20 @@ VECT_VAR_DECL(expected,uint,32,2) [] = { 0xdeadbe, 0xdeadbe };\n FNNAME (INSN)\n {\n   /* Basic test: y=vqshrun_n(x,v), then store the result.  */\n-#define TEST_VQSHRUN_N2(INSN, T1, T2, W, W2, N, V, EXPECTED_CUMULATIVE_SAT, CMT) \\\n+#define TEST_VQSHRUN_N2(INSN, T1, T2, W, W2, N, V, CMT) \\\n   Set_Neon_Cumulative_Sat(0, VECT_VAR(vector_res, uint, W2, N));\t\\\n   VECT_VAR(vector_res, uint, W2, N) =\t\t\t\t\t\\\n     INSN##_##T2##W(VECT_VAR(vector, T1, W, N),\t\t\t\t\\\n \t\t   V);\t\t\t\t\t\t\t\\\n   vst1_u##W2(VECT_VAR(result, uint, W2, N),\t\t\t\t\\\n-\t     VECT_VAR(vector_res, uint, W2, N));\t\t\t\\\n-  CHECK_CUMULATIVE_SAT(TEST_MSG, T1, W, N, EXPECTED_CUMULATIVE_SAT, CMT)\n+\t     VECT_VAR(vector_res, uint, W2, N));\n \n   /* Two auxliary macros are necessary to expand INSN */\n-#define TEST_VQSHRUN_N1(INSN, T1, T2, W, W2, N, V, EXPECTED_CUMULATIVE_SAT, CMT) \\\n-  TEST_VQSHRUN_N2(INSN, T1, T2, W, W2, N, V, EXPECTED_CUMULATIVE_SAT, CMT)\n+#define TEST_VQSHRUN_N1(INSN, T1, T2, W, W2, N, V, CMT) \\\n+  TEST_VQSHRUN_N2(INSN, T1, T2, W, W2, N, V, CMT)\n \n-#define TEST_VQSHRUN_N(T1, T2, W, W2, N, V, EXPECTED_CUMULATIVE_SAT, CMT) \\\n-  TEST_VQSHRUN_N1(INSN, T1, T2, W, W2, N, V, EXPECTED_CUMULATIVE_SAT, CMT)\n+#define TEST_VQSHRUN_N(T1, T2, W, W2, N, V, CMT) \\\n+  TEST_VQSHRUN_N1(INSN, T1, T2, W, W2, N, V, CMT)\n \n \n   /* vector is twice as large as vector_res.  */\n@@ -84,9 +68,9 @@ FNNAME (INSN)\n \n   /* Choose shift amount arbitrarily.  */\n #define CMT \" (negative input)\"\n-  TEST_VQSHRUN_N(int, s, 16, 8, 8, 3, expected_cumulative_sat_neg, CMT);\n-  TEST_VQSHRUN_N(int, s, 32, 16, 4, 4, expected_cumulative_sat_neg, CMT);\n-  TEST_VQSHRUN_N(int, s, 64, 32, 2, 2, expected_cumulative_sat_neg, CMT);\n+  TEST_VQSHRUN_N(int, s, 16, 8, 8, 3, CMT);\n+  TEST_VQSHRUN_N(int, s, 32, 16, 4, 4, CMT);\n+  TEST_VQSHRUN_N(int, s, 64, 32, 2, 2, CMT);\n \n   CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_neg, CMT);\n   CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected_neg, CMT);\n@@ -101,9 +85,9 @@ FNNAME (INSN)\n \n #undef CMT\n #define CMT \" (check cumulative saturation)\"\n-  TEST_VQSHRUN_N(int, s, 16, 8, 8, 1, expected_cumulative_sat_max_sh1, CMT);\n-  TEST_VQSHRUN_N(int, s, 32, 16, 4, 1, expected_cumulative_sat_max_sh1, CMT);\n-  TEST_VQSHRUN_N(int, s, 64, 32, 2, 1, expected_cumulative_sat_max_sh1, CMT);\n+  TEST_VQSHRUN_N(int, s, 16, 8, 8, 1, CMT);\n+  TEST_VQSHRUN_N(int, s, 32, 16, 4, 1, CMT);\n+  TEST_VQSHRUN_N(int, s, 64, 32, 2, 1, CMT);\n \n   CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_max_sh1, CMT);\n   CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected_max_sh1, CMT);\n@@ -117,9 +101,9 @@ FNNAME (INSN)\n \n #undef CMT\n #define CMT \"\"\n-  TEST_VQSHRUN_N(int, s, 16, 8, 8, 6, expected_cumulative_sat, CMT);\n-  TEST_VQSHRUN_N(int, s, 32, 16, 4, 7, expected_cumulative_sat, CMT);\n-  TEST_VQSHRUN_N(int, s, 64, 32, 2, 8, expected_cumulative_sat, CMT);\n+  TEST_VQSHRUN_N(int, s, 16, 8, 8, 6, CMT);\n+  TEST_VQSHRUN_N(int, s, 32, 16, 4, 7, CMT);\n+  TEST_VQSHRUN_N(int, s, 64, 32, 2, 8, CMT);\n \n   CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected, CMT);\n   CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected, CMT);"}, {"sha": "0efe8bcd17cf35764a13696ba4c9cc5f64c0bc1e", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vqsub.c", "status": "modified", "additions": 24, "deletions": 68, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/763b865a17d32ff1d19720e333999de25132d3d4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqsub.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/763b865a17d32ff1d19720e333999de25132d3d4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqsub.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqsub.c?ref=763b865a17d32ff1d19720e333999de25132d3d4", "patch": "@@ -46,58 +46,27 @@ VECT_VAR_DECL(expected,uint,32,4) [] = { 0xffffff79, 0xffffff7a,\n VECT_VAR_DECL(expected,uint,64,2) [] = { 0xffffffffffffff68,\n \t\t\t\t\t 0xffffffffffffff69 };\n \n-/* Expected values of cumulative saturation flag.  */\n-int VECT_VAR(expected_cumulative_sat,int,8,8) = 0;\n-int VECT_VAR(expected_cumulative_sat,int,16,4) = 0;\n-int VECT_VAR(expected_cumulative_sat,int,32,2) = 0;\n-int VECT_VAR(expected_cumulative_sat,int,64,1) = 0;\n-int VECT_VAR(expected_cumulative_sat,uint,8,8) = 0;\n-int VECT_VAR(expected_cumulative_sat,uint,16,4) = 0;\n-int VECT_VAR(expected_cumulative_sat,uint,32,2) = 0;\n-int VECT_VAR(expected_cumulative_sat,uint,64,1) = 0;\n-int VECT_VAR(expected_cumulative_sat,int,8,16) = 0;\n-int VECT_VAR(expected_cumulative_sat,int,16,8) = 0;\n-int VECT_VAR(expected_cumulative_sat,int,32,4) = 0;\n-int VECT_VAR(expected_cumulative_sat,int,64,2) = 0;\n-int VECT_VAR(expected_cumulative_sat,uint,8,16) = 0;\n-int VECT_VAR(expected_cumulative_sat,uint,16,8) = 0;\n-int VECT_VAR(expected_cumulative_sat,uint,32,4) = 0;\n-int VECT_VAR(expected_cumulative_sat,uint,64,2) = 0;\n-\n /* 64-bits types, with 0 as second input.  */\n VECT_VAR_DECL(expected_64,int,64,1) [] = { 0xfffffffffffffff0 };\n VECT_VAR_DECL(expected_64,uint,64,1) [] = { 0xfffffffffffffff0 };\n VECT_VAR_DECL(expected_64,int,64,2) [] = { 0xfffffffffffffff0,\n \t\t\t\t\t   0xfffffffffffffff1 };\n VECT_VAR_DECL(expected_64,uint,64,2) [] = { 0xfffffffffffffff0,\n \t\t\t\t\t    0xfffffffffffffff1 };\n-int VECT_VAR(expected_cumulative_sat_64,int,64,1) = 0;\n-int VECT_VAR(expected_cumulative_sat_64,uint,64,1) = 0;\n-int VECT_VAR(expected_cumulative_sat_64,int,64,2) = 0;\n-int VECT_VAR(expected_cumulative_sat_64,uint,64,2) = 0;\n-\n /* 64-bits types, other cases.  */\n VECT_VAR_DECL(expected_64_2,int,64,1) [] = { 0xffffffffffffffac };\n VECT_VAR_DECL(expected_64_2,uint,64,1) [] = { 0xffffffffffffff68 };\n VECT_VAR_DECL(expected_64_2,int,64,2) [] = { 0xffffffffffffffac,\n \t\t\t\t\t     0xffffffffffffffad };\n VECT_VAR_DECL(expected_64_2,uint,64,2) [] = { 0xffffffffffffff68,\n \t\t\t\t\t      0xffffffffffffff69 };\n-int VECT_VAR(expected_cumulative_sat_64_2,int,64,1) = 0;\n-int VECT_VAR(expected_cumulative_sat_64_2,uint,64,1) = 0;\n-int VECT_VAR(expected_cumulative_sat_64_2,int,64,2) = 0;\n-int VECT_VAR(expected_cumulative_sat_64_2,uint,64,2) = 0;\n \n /* 64-bits types, all causing cumulative saturation.  */\n VECT_VAR_DECL(expected_64_3,int,64,1) [] = { 0x8000000000000000 };\n VECT_VAR_DECL(expected_64_3,uint,64,1) [] = { 0x0 };\n VECT_VAR_DECL(expected_64_3,int,64,2) [] = { 0x7fffffffffffffff,\n \t\t\t\t\t     0x7fffffffffffffff };\n VECT_VAR_DECL(expected_64_3,uint,64,2) [] = { 0x0, 0x0 };\n-int VECT_VAR(expected_cumulative_sat_64_3,int,64,1) = 1;\n-int VECT_VAR(expected_cumulative_sat_64_3,uint,64,1) = 1;\n-int VECT_VAR(expected_cumulative_sat_64_3,int,64,2) = 1;\n-int VECT_VAR(expected_cumulative_sat_64_3,uint,64,2) = 1;\n \n /* smaller types, corner cases causing cumulative saturation. (1)  */\n VECT_VAR_DECL(expected_lt_64_1,int,8,8) [] = { 0x80, 0x80, 0x80, 0x80,\n@@ -115,13 +84,6 @@ VECT_VAR_DECL(expected_lt_64_1,int,16,8) [] = { 0x8000, 0x8000,\n \t\t\t\t\t\t0x8000, 0x8000 };\n VECT_VAR_DECL(expected_lt_64_1,int,32,4) [] = { 0x80000000, 0x80000000,\n \t\t\t\t\t\t0x80000000, 0x80000000 };\n-int VECT_VAR(expected_csat_lt_64_1,int,8,8) = 1;\n-int VECT_VAR(expected_csat_lt_64_1,int,16,4) = 1;\n-int VECT_VAR(expected_csat_lt_64_1,int,32,2) = 1;\n-int VECT_VAR(expected_csat_lt_64_1,int,8,16) = 1;\n-int VECT_VAR(expected_csat_lt_64_1,int,16,8) = 1;\n-int VECT_VAR(expected_csat_lt_64_1,int,32,4) = 1;\n-\n /* smaller types, corner cases causing cumulative saturation. (2)  */\n VECT_VAR_DECL(expected_lt_64_2,uint,8,8) [] = { 0x0, 0x0, 0x0, 0x0,\n \t\t\t\t\t\t0x0, 0x0, 0x0, 0x0 };\n@@ -134,12 +96,6 @@ VECT_VAR_DECL(expected_lt_64_2,uint,8,16) [] = { 0x0, 0x0, 0x0, 0x0,\n VECT_VAR_DECL(expected_lt_64_2,uint,16,8) [] = { 0x0, 0x0, 0x0, 0x0,\n \t\t\t\t\t\t 0x0, 0x0, 0x0, 0x0 };\n VECT_VAR_DECL(expected_lt_64_2,uint,32,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n-int VECT_VAR(expected_csat_lt_64_2,uint,8,8) = 1;\n-int VECT_VAR(expected_csat_lt_64_2,uint,16,4) = 1;\n-int VECT_VAR(expected_csat_lt_64_2,uint,32,2) = 1;\n-int VECT_VAR(expected_csat_lt_64_2,uint,8,16) = 1;\n-int VECT_VAR(expected_csat_lt_64_2,uint,16,8) = 1;\n-int VECT_VAR(expected_csat_lt_64_2,uint,32,4) = 1;\n \n void vqsub_extras(void)\n {\n@@ -157,10 +113,10 @@ void vqsub_extras(void)\n   VDUP(vector2, q, uint, u, 64, 2, 0x0);\n \n #define MSG \"64 bits saturation when adding zero\"\n-  TEST_BINARY_SAT_OP(INSN_NAME, , int, s, 64, 1, expected_cumulative_sat_64, MSG);\n-  TEST_BINARY_SAT_OP(INSN_NAME, , uint, u, 64, 1, expected_cumulative_sat_64, MSG);\n-  TEST_BINARY_SAT_OP(INSN_NAME, q, int, s, 64, 2, expected_cumulative_sat_64, MSG);\n-  TEST_BINARY_SAT_OP(INSN_NAME, q, uint, u, 64, 2, expected_cumulative_sat_64, MSG);\n+  TEST_BINARY_SAT_OP(INSN_NAME, , int, s, 64, 1, MSG);\n+  TEST_BINARY_SAT_OP(INSN_NAME, , uint, u, 64, 1, MSG);\n+  TEST_BINARY_SAT_OP(INSN_NAME, q, int, s, 64, 2, MSG);\n+  TEST_BINARY_SAT_OP(INSN_NAME, q, uint, u, 64, 2, MSG);\n \n   CHECK(TEST_MSG, int, 64, 1, PRIx64, expected_64, MSG);\n   CHECK(TEST_MSG, uint, 64, 1, PRIx64, expected_64, MSG);\n@@ -175,10 +131,10 @@ void vqsub_extras(void)\n \n #undef MSG\n #define MSG \"64 bits saturation cumulative_sat (2)\"\n-  TEST_BINARY_SAT_OP(INSN_NAME, , int, s, 64, 1, expected_cumulative_sat_64_2, MSG);\n-  TEST_BINARY_SAT_OP(INSN_NAME, , uint, u, 64, 1, expected_cumulative_sat_64_2, MSG);\n-  TEST_BINARY_SAT_OP(INSN_NAME, q, int, s, 64, 2, expected_cumulative_sat_64_2, MSG);\n-  TEST_BINARY_SAT_OP(INSN_NAME, q, uint, u, 64, 2, expected_cumulative_sat_64_2, MSG);\n+  TEST_BINARY_SAT_OP(INSN_NAME, , int, s, 64, 1, MSG);\n+  TEST_BINARY_SAT_OP(INSN_NAME, , uint, u, 64, 1, MSG);\n+  TEST_BINARY_SAT_OP(INSN_NAME, q, int, s, 64, 2, MSG);\n+  TEST_BINARY_SAT_OP(INSN_NAME, q, uint, u, 64, 2, MSG);\n \n   CHECK(TEST_MSG, int, 64, 1, PRIx64, expected_64_2, MSG);\n   CHECK(TEST_MSG, uint, 64, 1, PRIx64, expected_64_2, MSG);\n@@ -197,10 +153,10 @@ void vqsub_extras(void)\n \n #undef MSG\n #define MSG \"64 bits saturation cumulative_sat (3)\"\n-  TEST_BINARY_SAT_OP(INSN_NAME, , int, s, 64, 1, expected_cumulative_sat_64_3, MSG);\n-  TEST_BINARY_SAT_OP(INSN_NAME, , uint, u, 64, 1, expected_cumulative_sat_64_3, MSG);\n-  TEST_BINARY_SAT_OP(INSN_NAME, q, int, s, 64, 2, expected_cumulative_sat_64_3, MSG);\n-  TEST_BINARY_SAT_OP(INSN_NAME, q, uint, u, 64, 2, expected_cumulative_sat_64_3, MSG);\n+  TEST_BINARY_SAT_OP(INSN_NAME, , int, s, 64, 1, MSG);\n+  TEST_BINARY_SAT_OP(INSN_NAME, , uint, u, 64, 1, MSG);\n+  TEST_BINARY_SAT_OP(INSN_NAME, q, int, s, 64, 2, MSG);\n+  TEST_BINARY_SAT_OP(INSN_NAME, q, uint, u, 64, 2, MSG);\n \n   CHECK(TEST_MSG, int, 64, 1, PRIx64, expected_64_3, MSG);\n   CHECK(TEST_MSG, uint, 64, 1, PRIx64, expected_64_3, MSG);\n@@ -218,12 +174,12 @@ void vqsub_extras(void)\n \n #undef MSG\n #define MSG \"less than 64 bits saturation cumulative_sat (1)\"\n-  TEST_BINARY_SAT_OP(INSN_NAME, , int, s, 8, 8, expected_csat_lt_64_1, MSG);\n-  TEST_BINARY_SAT_OP(INSN_NAME, , int, s, 16, 4, expected_csat_lt_64_1, MSG);\n-  TEST_BINARY_SAT_OP(INSN_NAME, , int, s, 32, 2, expected_csat_lt_64_1, MSG);\n-  TEST_BINARY_SAT_OP(INSN_NAME, q, int, s, 8, 16, expected_csat_lt_64_1, MSG);\n-  TEST_BINARY_SAT_OP(INSN_NAME, q, int, s, 16, 8, expected_csat_lt_64_1, MSG);\n-  TEST_BINARY_SAT_OP(INSN_NAME, q, int, s, 32, 4, expected_csat_lt_64_1, MSG);\n+  TEST_BINARY_SAT_OP(INSN_NAME, , int, s, 8, 8, MSG);\n+  TEST_BINARY_SAT_OP(INSN_NAME, , int, s, 16, 4, MSG);\n+  TEST_BINARY_SAT_OP(INSN_NAME, , int, s, 32, 2, MSG);\n+  TEST_BINARY_SAT_OP(INSN_NAME, q, int, s, 8, 16, MSG);\n+  TEST_BINARY_SAT_OP(INSN_NAME, q, int, s, 16, 8, MSG);\n+  TEST_BINARY_SAT_OP(INSN_NAME, q, int, s, 32, 4, MSG);\n \n   CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_lt_64_1, MSG);\n   CHECK(TEST_MSG, int, 16, 4, PRIx16, expected_lt_64_1, MSG);\n@@ -250,12 +206,12 @@ void vqsub_extras(void)\n \n #undef MSG\n #define MSG \"less than 64 bits saturation cumulative_sat (2)\"\n-  TEST_BINARY_SAT_OP(INSN_NAME, , uint, u, 8, 8, expected_csat_lt_64_2, MSG);\n-  TEST_BINARY_SAT_OP(INSN_NAME, , uint, u, 16, 4, expected_csat_lt_64_2, MSG);\n-  TEST_BINARY_SAT_OP(INSN_NAME, , uint, u, 32, 2, expected_csat_lt_64_2, MSG);\n-  TEST_BINARY_SAT_OP(INSN_NAME, q, uint, u, 8, 16, expected_csat_lt_64_2, MSG);\n-  TEST_BINARY_SAT_OP(INSN_NAME, q, uint, u, 16, 8, expected_csat_lt_64_2, MSG);\n-  TEST_BINARY_SAT_OP(INSN_NAME, q, uint, u, 32, 4, expected_csat_lt_64_2, MSG);\n+  TEST_BINARY_SAT_OP(INSN_NAME, , uint, u, 8, 8, MSG);\n+  TEST_BINARY_SAT_OP(INSN_NAME, , uint, u, 16, 4, MSG);\n+  TEST_BINARY_SAT_OP(INSN_NAME, , uint, u, 32, 2, MSG);\n+  TEST_BINARY_SAT_OP(INSN_NAME, q, uint, u, 8, 16, MSG);\n+  TEST_BINARY_SAT_OP(INSN_NAME, q, uint, u, 16, 8, MSG);\n+  TEST_BINARY_SAT_OP(INSN_NAME, q, uint, u, 32, 4, MSG);\n \n   CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_lt_64_2, MSG);\n   CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected_lt_64_2, MSG);"}]}