{"sha": "0e9cab878b247613564e51cd98c3bac34411b628", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGU5Y2FiODc4YjI0NzYxMzU2NGU1MWNkOThjM2JhYzM0NDExYjYyOA==", "commit": {"author": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2002-09-16T18:58:48Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2002-09-16T18:58:48Z"}, "message": "abi_check.cc: Pull shell fragments out into...\n\n2002-09-16  Phil Edwards  <pme@gcc.gnu.org>\n\n\t* testsuite/abi_check.cc:  Pull shell fragments out into...\n\t* config/abi/extract_symvers:  ...here.  New file.\n\t* Makefile.am (check_abi):  Change to match.\n\t(new-abi-baseline):  New target.\n\t* Makefile.in:  Regenerated.\n\nFrom-SVN: r57208", "tree": {"sha": "ab40768ae74414e153548bd1f80a6b60136d70fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab40768ae74414e153548bd1f80a6b60136d70fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e9cab878b247613564e51cd98c3bac34411b628", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e9cab878b247613564e51cd98c3bac34411b628", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e9cab878b247613564e51cd98c3bac34411b628", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e9cab878b247613564e51cd98c3bac34411b628/comments", "author": null, "committer": null, "parents": [{"sha": "d57551c71bfaa1351fc1d92a2ea5abb4dcbe118c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d57551c71bfaa1351fc1d92a2ea5abb4dcbe118c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d57551c71bfaa1351fc1d92a2ea5abb4dcbe118c"}], "stats": {"total": 215, "additions": 130, "deletions": 85}, "files": [{"sha": "0d8f5c35f3ee667964778a59f774a0a0caed0c6e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e9cab878b247613564e51cd98c3bac34411b628/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e9cab878b247613564e51cd98c3bac34411b628/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0e9cab878b247613564e51cd98c3bac34411b628", "patch": "@@ -1,3 +1,11 @@\n+2002-09-16  Phil Edwards  <pme@gcc.gnu.org>\n+\n+\t* testsuite/abi_check.cc:  Pull shell fragments out into...\n+\t* config/abi/extract_symvers:  ...here.  New file.\n+\t* Makefile.am (check_abi):  Change to match.\n+\t(new-abi-baseline):  New target.\n+\t* Makefile.in:  Regenerated.\n+\n 2002-09-16  Richard Henderson  <rth@redhat.com>\n \n \t* include/std/std_limits.h (__glibcpp_f32_denorm_min_bytes,"}, {"sha": "410aa5549a7c040d66e8e81361e8a12a06a9eb9e", "filename": "libstdc++-v3/Makefile.am", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e9cab878b247613564e51cd98c3bac34411b628/libstdc%2B%2B-v3%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e9cab878b247613564e51cd98c3bac34411b628/libstdc%2B%2B-v3%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.am?ref=0e9cab878b247613564e51cd98c3bac34411b628", "patch": "@@ -46,10 +46,25 @@ check-script-install: $(top_builddir)/mkcheck\n \t  cd testsuite; \\\n \t  @glibcpp_builddir@/mkcheck 1)\n \n+# Use 'new-abi-baseline' to create an initial symbol file.  Then run\n+# 'check-abi' to test for changes against that file.\n baseline_file = @baseline_file@\n check-abi: $(top_builddir)/testsuite/abi_check\n \t-(cd testsuite; \\\n-\t  ./abi_check ${baseline_file})\n+\t  ${top_srcdir}/config/abi/extract_symvers \\\n+\t     ../src/.libs/libstdc++.so \\\n+\t     ./current_symbols.txt && \\\n+\t  ./abi_check --check ./current_symbols.txt ${baseline_file})\n+\n+new-abi-baseline:\n+\t-@(output=${baseline_file}; \\\n+\t  if test -f $${output}; then \\\n+\t    output=$${output}.new; \\\n+\t    t=`echo $${output} | sed 's=.*config/abi/=='`; \\\n+\t    echo \"Baseline file already exists, writing to $${t} instead.\"; \\\n+\t  fi; \\\n+\t  ${top_srcdir}/config/abi/extract_symvers \\\n+\t     src/.libs/libstdc++.so $${output})\n \n # These rules are messy, but are hella worth it.\n doxygen:"}, {"sha": "6eff6c16f3c9bbe186a436ef0a0db26f53fd00c0", "filename": "libstdc++-v3/Makefile.in", "status": "modified", "additions": 19, "deletions": 41, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e9cab878b247613564e51cd98c3bac34411b628/libstdc%2B%2B-v3%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e9cab878b247613564e51cd98c3bac34411b628/libstdc%2B%2B-v3%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.in?ref=0e9cab878b247613564e51cd98c3bac34411b628", "patch": "@@ -1,4 +1,4 @@\n-# Makefile.in generated automatically by automake 1.4-p5 from Makefile.am\n+# Makefile.in generated automatically by automake 1.4-p6 from Makefile.am\n \n # Copyright (C) 1994, 1995-8, 1999, 2001 Free Software Foundation, Inc.\n # This Makefile.in is free software; the Free Software Foundation\n@@ -141,6 +141,8 @@ mkinstalldirs = $(SHELL) $(toplevel_srcdir)/mkinstalldirs\n \n PWD = $${PWDCMD-pwd}\n \n+# Use 'new-abi-baseline' to create an initial symbol file.  Then run\n+# 'check-abi' to test for changes against that file.\n baseline_file = @baseline_file@\n \n # Multilib support.\n@@ -157,44 +159,7 @@ MULTICLEAN = true\n # Work around what appears to be a GNU make bug handling MAKEFLAGS\n # values defined in terms of make variables, as is the case for CC and\n # friends when we are called from the top level Makefile.\n-AM_MAKEFLAGS = \\\n-\t\"AR_FLAGS=$(AR_FLAGS)\" \\\n-\t\"CC_FOR_BUILD=$(CC_FOR_BUILD)\" \\\n-\t\"CC_FOR_TARGET=$(CC_FOR_TARGET)\" \\\n-\t\"CFLAGS=$(CFLAGS)\" \\\n-\t\"CXXFLAGS=$(CXXFLAGS)\" \\\n-\t\"CFLAGS_FOR_BUILD=$(CFLAGS_FOR_BUILD)\" \\\n-\t\"CFLAGS_FOR_TARGET=$(CFLAGS_FOR_TARGET)\" \\\n-\t\"INSTALL=$(INSTALL)\" \\\n-\t\"INSTALL_DATA=$(INSTALL_DATA)\" \\\n-\t\"INSTALL_PROGRAM=$(INSTALL_PROGRAM)\" \\\n-\t\"INSTALL_SCRIPT=$(INSTALL_SCRIPT)\" \\\n-\t\"LDFLAGS=$(LDFLAGS)\" \\\n-\t\"LIBCFLAGS=$(LIBCFLAGS)\" \\\n-\t\"LIBCFLAGS_FOR_TARGET=$(LIBCFLAGS_FOR_TARGET)\" \\\n-\t\"MAKE=$(MAKE)\" \\\n-\t\"MAKEINFO=$(MAKEINFO) $(MAKEINFOFLAGS)\" \\\n-\t\"PICFLAG=$(PICFLAG)\" \\\n-\t\"PICFLAG_FOR_TARGET=$(PICFLAG_FOR_TARGET)\" \\\n-\t\"SHELL=$(SHELL)\" \\\n-\t\"RUNTESTFLAGS=$(RUNTESTFLAGS)\" \\\n-\t\"exec_prefix=$(exec_prefix)\" \\\n-\t\"infodir=$(infodir)\" \\\n-\t\"libdir=$(libdir)\" \\\n-\t\"includedir=$(includedir)\" \\\n-\t\"prefix=$(prefix)\" \\\n-\t\"tooldir=$(tooldir)\" \\\n-\t\"AR=$(AR)\" \\\n-\t\"AS=$(AS)\" \\\n-\t\"LD=$(LD)\" \\\n-\t\"LIBCFLAGS=$(LIBCFLAGS)\" \\\n-\t\"PICFLAG=$(PICFLAG)\" \\\n-\t\"RANLIB=$(RANLIB)\" \\\n-\t\"NM=$(NM)\" \\\n-\t\"NM_FOR_BUILD=$(NM_FOR_BUILD)\" \\\n-\t\"NM_FOR_TARGET=$(NM_FOR_TARGET)\" \\\n-\t\"DESTDIR=$(DESTDIR)\" \\\n-\t\"WERROR=$(WERROR)\" \n+AM_MAKEFLAGS =  \t\"AR_FLAGS=$(AR_FLAGS)\" \t\"CC_FOR_BUILD=$(CC_FOR_BUILD)\" \t\"CC_FOR_TARGET=$(CC_FOR_TARGET)\" \t\"CFLAGS=$(CFLAGS)\" \t\"CXXFLAGS=$(CXXFLAGS)\" \t\"CFLAGS_FOR_BUILD=$(CFLAGS_FOR_BUILD)\" \t\"CFLAGS_FOR_TARGET=$(CFLAGS_FOR_TARGET)\" \t\"INSTALL=$(INSTALL)\" \t\"INSTALL_DATA=$(INSTALL_DATA)\" \t\"INSTALL_PROGRAM=$(INSTALL_PROGRAM)\" \t\"INSTALL_SCRIPT=$(INSTALL_SCRIPT)\" \t\"LDFLAGS=$(LDFLAGS)\" \t\"LIBCFLAGS=$(LIBCFLAGS)\" \t\"LIBCFLAGS_FOR_TARGET=$(LIBCFLAGS_FOR_TARGET)\" \t\"MAKE=$(MAKE)\" \t\"MAKEINFO=$(MAKEINFO) $(MAKEINFOFLAGS)\" \t\"PICFLAG=$(PICFLAG)\" \t\"PICFLAG_FOR_TARGET=$(PICFLAG_FOR_TARGET)\" \t\"SHELL=$(SHELL)\" \t\"RUNTESTFLAGS=$(RUNTESTFLAGS)\" \t\"exec_prefix=$(exec_prefix)\" \t\"infodir=$(infodir)\" \t\"libdir=$(libdir)\" \t\"includedir=$(includedir)\" \t\"prefix=$(prefix)\" \t\"tooldir=$(tooldir)\" \t\"AR=$(AR)\" \t\"AS=$(AS)\" \t\"LD=$(LD)\" \t\"LIBCFLAGS=$(LIBCFLAGS)\" \t\"PICFLAG=$(PICFLAG)\" \t\"RANLIB=$(RANLIB)\" \t\"NM=$(NM)\" \t\"NM_FOR_BUILD=$(NM_FOR_BUILD)\" \t\"NM_FOR_TARGET=$(NM_FOR_TARGET)\" \t\"DESTDIR=$(DESTDIR)\" \t\"WERROR=$(WERROR)\" \n \n \n # Subdir rules rely on $(FLAGS_TO_PASS)\n@@ -209,7 +174,7 @@ mkcheck.in testsuite_flags.in\n \n DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) $(TEXINFOS) $(EXTRA_DIST)\n \n-TAR = gtar\n+TAR = tar\n GZIP_ENV = --best\n all: all-redirect\n .SUFFIXES:\n@@ -486,7 +451,20 @@ check-script-install: $(top_builddir)/mkcheck\n \t  @glibcpp_builddir@/mkcheck 1)\n check-abi: $(top_builddir)/testsuite/abi_check\n \t-(cd testsuite; \\\n-\t  ./abi_check ${baseline_file})\n+\t  ${top_srcdir}/config/abi/extract_symvers \\\n+\t     ../src/.libs/libstdc++.so \\\n+\t     ./current_symbols.txt && \\\n+\t  ./abi_check --check ./current_symbols.txt ${baseline_file})\n+\n+new-abi-baseline:\n+\t-@(output=${baseline_file}; \\\n+\t  if test -f $${output}; then \\\n+\t    output=$${output}.new; \\\n+\t    t=`echo $${output} | sed 's=.*config/abi/=='`; \\\n+\t    echo \"Baseline file already exists, writing to $${t} instead.\"; \\\n+\t  fi; \\\n+\t  ${top_srcdir}/config/abi/extract_symvers \\\n+\t     src/.libs/libstdc++.so $${output})\n \n # These rules are messy, but are hella worth it.\n doxygen:"}, {"sha": "e7b6645900b1aec6c8fd1bef1b4bdc9a7e286e44", "filename": "libstdc++-v3/config/abi/extract_symvers", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e9cab878b247613564e51cd98c3bac34411b628/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fextract_symvers", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e9cab878b247613564e51cd98c3bac34411b628/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fextract_symvers", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fextract_symvers?ref=0e9cab878b247613564e51cd98c3bac34411b628", "patch": "@@ -0,0 +1,64 @@\n+#!/bin/sh\n+\n+# Copyright (C) 2002 Free Software Foundation, Inc.\n+#\n+# This file is part of the GNU ISO C++ Library.  This library is free\n+# software; you can redistribute it and/or modify it under the\n+# terms of the GNU General Public License as published by the\n+# Free Software Foundation; either version 2, or (at your option)\n+# any later version.\n+#\n+# This library is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License along\n+# with this library; see the file COPYING.  If not, write to the Free\n+# Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+# USA.\n+#\n+# As a special exception, you may use this file as part of a free software\n+# library without restriction.  Specifically, if other files instantiate\n+# templates or use macros or inline functions from this file, or you compile\n+# this file and link it with other files to produce an executable, this\n+# file does not by itself cause the resulting executable to be covered by\n+# the GNU General Public License.  This exception does not however\n+# invalidate any other reasons why the executable file might be covered by\n+# the GNU General Public License.\n+\n+\n+if test ${#} -lt 2 || test $1 = '--help'; then\n+  echo \"Usage:  extract_symvers  shared_lib output_file\" 1>&2\n+  exit 1\n+fi\n+\n+lib=$1\n+output=$2\n+\n+# GNU binutils, somewhere after version 2.11.2, requires -W/--wide to avoid\n+# default line truncation.  -W is not supported and truncation did not occur\n+# by default before that point.\n+readelf=\"readelf --symbols\"\n+if readelf --help | grep -- --wide > /dev/null; then\n+    readelf=\"$readelf --wide\"\n+fi\n+\n+# This avoids weird sorting problems later.\n+export LC_ALL=C\n+\n+tmp=extract.$$\n+\n+${readelf} ${lib} | sed '/\\.dynsym/,/^$/p;d' | egrep -v ' (LOCAL|UND) ' |\\\n+awk '{ if ($4 == \"FUNC\" || $4 == \"NOTYPE\")\n+         printf \"%s:%s\\n\", $4, $8;\n+       else if ($4 == \"OBJECT\")\n+         printf \"%s:%s:%s\\n\", $4, $3, $8;\n+     }' | sort | uniq > $tmp 2>&1\n+#       else printf \"Huh?  What is %s?\\n\", $8;\n+\n+\n+# I think we'll be doing some more with this file, but for now, dump.\n+mv $tmp $output\n+\n+exit 0"}, {"sha": "1e407811437a3cf479f2f2e40d0ba046d4b53e53", "filename": "libstdc++-v3/testsuite/abi_check.cc", "status": "modified", "additions": 23, "deletions": 43, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e9cab878b247613564e51cd98c3bac34411b628/libstdc%2B%2B-v3%2Ftestsuite%2Fabi_check.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e9cab878b247613564e51cd98c3bac34411b628/libstdc%2B%2B-v3%2Ftestsuite%2Fabi_check.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fabi_check.cc?ref=0e9cab878b247613564e51cd98c3bac34411b628", "patch": "@@ -28,6 +28,8 @@\n // the GNU General Public License.\n \n // Benjamin Kosnik  <bkoz@redhat.com>\n+// Blame subsequent hacks on Loren J. Rittle <ljrittle@acm.org>, Phil\n+// Edwards <pme@gcc.gnu.org>, and a cast of dozens at libstdc++@gcc.gnu.org.\n \n #include <string>\n #include <ext/hash_map>\n@@ -259,71 +261,49 @@ report_symbol_info(const symbol_info& symbol, std::size_t n)\n   cout << endl;\n }\n \n-int main(int argc, char** argv)\n+\n+int\n+main(int argc, char** argv)\n {\n   using namespace std;\n \n-  // Get arguments.\n-  if (argc != 2)\n+  // Get arguments.  (Heading towards getopt_long, I can feel it.)\n+  string argv1;\n+  if (argc < 4 || (string(\"--help\") == (argv1 = argv[1])))\n     {\n-      cerr << \"Usage:  abi_check baseline_file\" << endl;\n+      cerr << \"Usage:  abi_check --check    cur baseline\\n\"\n+              \"                  --help\\n\\n\"\n+              \"Where CUR is a file containing the current results from\\n\"\n+              \"extract_symvers, and BASELINE is one from config/abi.\\n\"\n+\t   << endl;\n       exit(1);\n     }\n-  const char* baseline_file = argv[1];\n-  const char* test_file = \"current_symbols.txt\";\n-  const char* test_lib = \"../src/.libs/libstdc++.so\";\n+\n+  const char* test_file = argv[2];\n+  const char* baseline_file = argv[3];\n \n   // Quick sanity/setup check\n-  if (access(baseline_file, R_OK) != 0)\n-    {\n-      cerr << \"Cannot read baseline file \" << baseline_file << endl;\n-      exit(1);\n-    }\n-  if (access(test_lib, R_OK) != 0)\n+  if (access(test_file, R_OK) != 0)\n     {\n-      cerr << \"Cannot read library \" << test_lib\n+      cerr << \"Cannot read symbols file \" << test_file\n            << \", did you forget to build first?\" << endl;\n       exit(1);\n     }\n-\n-  // Get list of symbols.\n-  // Assume external symbol list computed \"as if\" by\n-  /*\n-   readelf -s -W libstdc++.so | sed '/\\.dynsym/,/^$/p;d' | egrep -v\n-   ' (LOCAL|UND) ' | awk '{ if ($4 == \"FUNC\" || $4 == \"NOTYPE\") printf\n-   \"%s:%s\\n\", $4, $8; else if ($4 == \"OBJECT\") printf \"%s:%s:%s\\n\", $4,\n-   $3, $8;}' | sort >& current_symbols.txt\n-   */\n-\n-  // GNU binutils, somewhere after version 2.11.2, requires -W/--wide\n-  // to avoid default line truncation.  -W is not supported and\n-  // truncation did not occur by default before that point.\n-  bool readelf_need_wide =\n-    (system(\"readelf --help | grep -- --wide >/dev/null\") == 0);\n-\n-  ostringstream cmd;\n-  cmd << \"readelf -s \" << (readelf_need_wide ? \"-W \" : \"\") << test_lib\n-      << \" | sed '/\\\\.dynsym/,/^$/p;d' | egrep -v ' (LOCAL|UND) ' | \"\n-         \"awk '{ if ($4 == \\\"FUNC\\\" || $4 == \\\"NOTYPE\\\") \"\n-                   \"printf \\\"%s:%s\\\\n\\\", $4, $8; \"\n-                 \"else if ($4 == \\\"OBJECT\\\") \"\n-                   \"printf \\\"%s:%s:%s\\\\n\\\", $4, $3, $8;}' | sort > \"\n-      << test_file << \" 2>&1\";\n-  if (system(cmd.str().c_str()) != 0)\n+  if (access(baseline_file, R_OK) != 0)\n     {\n-      cerr << \"Unable to generate the list of exported symbols.\" << endl;\n-      exit(2);\n+      cerr << \"Cannot read baseline file \" << baseline_file << endl;\n+      exit(1);\n     }\n \n-  // Input both list of symbols into container.\n+  // Input both lists of symbols into container.\n   symbol_infos  baseline_symbols;\n   symbol_names  baseline_names;\n   symbol_infos  test_symbols;\n   symbol_names  test_names;\n   create_symbol_data(baseline_file, baseline_symbols, baseline_names);\n   create_symbol_data(test_file, test_symbols, test_names);\n \n-  // Basic sanity check. (Was: error checking, what's that?)\n+  // More sanity checking.\n   const symbol_names::size_type baseline_size = baseline_names.size();\n   const symbol_names::size_type test_size = test_names.size();\n   if (!baseline_size || !test_size)"}]}