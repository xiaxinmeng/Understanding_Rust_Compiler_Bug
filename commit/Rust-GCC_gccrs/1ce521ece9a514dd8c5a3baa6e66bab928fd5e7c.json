{"sha": "1ce521ece9a514dd8c5a3baa6e66bab928fd5e7c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWNlNTIxZWNlOWE1MTRkZDhjNWEzYmFhNmU2NmJhYjkyOGZkNWU3Yw==", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@adacore.com", "date": "2019-08-16T03:38:36Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2019-08-16T03:38:36Z"}, "message": "use __builtin_alloca, drop non-standard alloca.h\n\nSince alloca.h is not ISO C, most of our alloca-using tests seem to\nrely on __builtin_alloca instead of including the header and calling\nalloca.  This patch extends this practice to some of the exceptions I\nfound in gcc.target, marking them as requiring a functional alloca\nwhile at that.\n\n\nfor  gcc/testsuite/ChangeLog\n\n\t* gcc.target/arc/interrupt-6.c: Use __builtin_alloca, require\n\teffective target support for alloca, drop include of alloca.h.\n\t* gcc.target/i386/pr80969-3.c: Likewise.\n\t* gcc.target/sparc/setjmp-1.c: Likewise.\n\t* gcc.target/x86_64/abi/ms-sysv/gen.cc: Likewise.\n\t* gcc.target/x86_64/abi/ms-sysv/ms-sysv.c: Likewise.\n\nFrom-SVN: r274558", "tree": {"sha": "4a05b24c504c973672c431befa31e0f486475622", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a05b24c504c973672c431befa31e0f486475622"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ce521ece9a514dd8c5a3baa6e66bab928fd5e7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ce521ece9a514dd8c5a3baa6e66bab928fd5e7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ce521ece9a514dd8c5a3baa6e66bab928fd5e7c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ce521ece9a514dd8c5a3baa6e66bab928fd5e7c/comments", "author": null, "committer": null, "parents": [{"sha": "2bfd0045b1a52540315042d0f55798c3679cd5f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bfd0045b1a52540315042d0f55798c3679cd5f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bfd0045b1a52540315042d0f55798c3679cd5f6"}], "stats": {"total": 25, "additions": 15, "deletions": 10}, "files": [{"sha": "055ff045e0fc931d6851e6a040f0a58d35d109ce", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ce521ece9a514dd8c5a3baa6e66bab928fd5e7c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ce521ece9a514dd8c5a3baa6e66bab928fd5e7c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1ce521ece9a514dd8c5a3baa6e66bab928fd5e7c", "patch": "@@ -1,5 +1,12 @@\n 2019-08-16  Alexandre Oliva <oliva@adacore.com>\n \n+\t* gcc.target/arc/interrupt-6.c: Use __builtin_alloca, require\n+\teffective target support for alloca, drop include of alloca.h.\n+\t* gcc.target/i386/pr80969-3.c: Likewise.\n+\t* gcc.target/sparc/setjmp-1.c: Likewise.\n+\t* gcc.target/x86_64/abi/ms-sysv/gen.cc: Likewise.\n+\t* gcc.target/x86_64/abi/ms-sysv/ms-sysv.c: Likewise.\n+\n \t* gcc.misc-tests/options.exp: Match /ld and -ld besides\n \t/collect2.\n "}, {"sha": "9cb0565f55c9abf09c79d6f2bfee7c6038ca811a", "filename": "gcc/testsuite/gcc.target/arc/interrupt-6.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ce521ece9a514dd8c5a3baa6e66bab928fd5e7c/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Finterrupt-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ce521ece9a514dd8c5a3baa6e66bab928fd5e7c/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Finterrupt-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Finterrupt-6.c?ref=1ce521ece9a514dd8c5a3baa6e66bab928fd5e7c", "patch": "@@ -1,8 +1,7 @@\n /* { dg-do compile } */\n /* { dg-skip-if \"Not available for ARCv1\" { arc700 || arc6xx } } */\n /* { dg-options \"-O2 -mirq-ctrl-saved=r0-ilink\" } */\n-\n-#include <alloca.h>\n+/* { dg-require-effective-target alloca } */\n \n /* Check if ilink is recognized. Check how FP and BLINK are saved.\n    BLINK is saved last on the stack because the IRQ autosave will do\n@@ -14,7 +13,7 @@ extern int bar (void *);\n void  __attribute__ ((interrupt(\"ilink\")))\n foo(void)\n {\n-  int *p = alloca (10);\n+  int *p = __builtin_alloca (10);\n   bar (p);\n }\n /* { dg-final { scan-assembler-not \".*fp,\\\\\\[sp\" } } */"}, {"sha": "318e06cd94c6cd14d72dfff57582b74acd271491", "filename": "gcc/testsuite/gcc.target/i386/pr80969-3.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ce521ece9a514dd8c5a3baa6e66bab928fd5e7c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr80969-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ce521ece9a514dd8c5a3baa6e66bab928fd5e7c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr80969-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr80969-3.c?ref=1ce521ece9a514dd8c5a3baa6e66bab928fd5e7c", "patch": "@@ -2,11 +2,10 @@\n /* { dg-do compile { target { { ! x32 } && { ! avx512f_runtime } } } } */\n /* { dg-options \"-Ofast -mabi=ms -mavx512f\" } */\n /* { dg-require-effective-target avx512f } */\n+/* { dg-require-effective-target alloca } */\n \n /* Test with alloca (and DRAP).  */\n \n-#include <alloca.h>\n-\n int a[56];\n volatile int b = -12345;\n volatile const int d = 42;\n@@ -19,7 +18,7 @@ void (*volatile const foo_noinfo)(int *, int, int) = foo;\n \n int main (int argc, char *argv[]) {\n   int c;\n-  int *e = alloca (d);\n+  int *e = __builtin_alloca (d);\n   foo_noinfo (e, d, 0);\n   for (; b; b++) {\n     c = b;"}, {"sha": "699d7f7b8ff458843d5f5f01971b23ec62651c25", "filename": "gcc/testsuite/gcc.target/sparc/setjmp-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ce521ece9a514dd8c5a3baa6e66bab928fd5e7c/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fsetjmp-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ce521ece9a514dd8c5a3baa6e66bab928fd5e7c/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fsetjmp-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fsetjmp-1.c?ref=1ce521ece9a514dd8c5a3baa6e66bab928fd5e7c", "patch": "@@ -4,9 +4,9 @@\n /* { dg-do run { target *-*-solaris2.* *-*-linux* *-*-*bsd* } } */\r\n /* { dg-require-effective-target fpic } */\r\n /* { dg-options \"-fPIC\" } */\r\n+/* { dg-require-effective-target alloca } */\r\n \r\n #include <stdio.h>\r\n-#include <alloca.h>\r\n #include <setjmp.h>\r\n #include <string.h>\r\n #include <stdlib.h>\r\n@@ -26,7 +26,7 @@ int main (void)\n {\r\n   setjmp (jb);\r\n \r\n-  char *p = alloca (256);\r\n+  char *p = __builtin_alloca (256);\r\n   memset (p, 0, 256);\r\n   sprintf (p, \"%d\\n\", foo);\r\n \r"}, {"sha": "818a8875a6dd79d82822f52474a54fdf6baf14fd", "filename": "gcc/testsuite/gcc.target/x86_64/abi/ms-sysv/gen.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ce521ece9a514dd8c5a3baa6e66bab928fd5e7c/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Fms-sysv%2Fgen.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ce521ece9a514dd8c5a3baa6e66bab928fd5e7c/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Fms-sysv%2Fgen.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Fms-sysv%2Fgen.cc?ref=1ce521ece9a514dd8c5a3baa6e66bab928fd5e7c", "patch": "@@ -291,7 +291,7 @@ void fn::print_def (ostream &out) const\n   if (get_msabi () && get_alloca ())\n     {\n       const char *size_str = m_args.empty () ? \"42\" : \"a\";\n-      out << \"  void *alloca_mem = alloca (8 + \" << size_str << \");\" << endl\n+      out << \"  void *alloca_mem = __builtin_alloca (8 + \" << size_str << \");\" << endl\n \t  << \"  *(long*)alloca_mem = FLAG_ALLOCA;\" << endl;\n     }\n   if (get_msabi () && get_varargs ())"}, {"sha": "abfcee6f56a41becc8fb6600a113fda0e8975aab", "filename": "gcc/testsuite/gcc.target/x86_64/abi/ms-sysv/ms-sysv.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ce521ece9a514dd8c5a3baa6e66bab928fd5e7c/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Fms-sysv%2Fms-sysv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ce521ece9a514dd8c5a3baa6e66bab928fd5e7c/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Fms-sysv%2Fms-sysv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Fms-sysv%2Fms-sysv.c?ref=1ce521ece9a514dd8c5a3baa6e66bab928fd5e7c", "patch": "@@ -49,14 +49,14 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n /* { dg-do run } */\n /* { dg-additional-sources \"do-test.S\" } */\n /* { dg-additional-options \"-Wall\" } */\n+/* { dg-require-effective-target alloca } */\n \n #include <stdio.h>\n #include <string.h>\n #include <stdlib.h>\n #include <signal.h>\n #include <unistd.h>\n #include <stdint.h>\n-#include <alloca.h>\n #include <stdarg.h>\n #include <assert.h>\n #include <errno.h>"}]}