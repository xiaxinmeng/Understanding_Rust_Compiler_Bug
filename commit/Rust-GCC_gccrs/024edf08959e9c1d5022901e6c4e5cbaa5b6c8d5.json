{"sha": "024edf08959e9c1d5022901e6c4e5cbaa5b6c8d5", "node_id": "C_kwDOANBUbNoAKDAyNGVkZjA4OTU5ZTljMWQ1MDIyOTAxZTZjNGU1Y2JhYTViNmM4ZDU", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2022-04-07T07:27:53Z"}, "committer": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2022-04-07T07:27:53Z"}, "message": "AArch64: Fix left fold sum reduction RTL patterns [PR104049]\n\nAs the discussion in the PR pointed out the RTL we have for the REDUC_PLUS\npatterns are wrong.  The UNSPECs are modelled as returning a vector and then\nin an expand pattern we emit a vec_select of the 0th element to get the scalar.\n\nThis is incorrect as the instruction itself already only returns a single scalar\nand by declaring it returns a vector it allows combine to push in a subreg into\nthe pattern, which causes reload to make duplicate moves.\n\nThis patch corrects this by removing the weird indirection and making the RTL\npattern model the correct semantics of the instruction immediately.\n\ngcc/ChangeLog:\n\n\tPR target/104049\n\t* config/aarch64/aarch64-simd.md\n\t(aarch64_reduc_plus_internal<mode>): Fix RTL and rename to...\n\t(reduc_plus_scal_<mode>): ... This.\n\t(reduc_plus_scal_v4sf): Moved.\n\t(aarch64_reduc_plus_internalv2si): Fix RTL and rename to...\n\t(reduc_plus_scal_v2si): ... This.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/104049\n\t* gcc.target/aarch64/vadd_reduc-1.c: New test.\n\t* gcc.target/aarch64/vadd_reduc-2.c: New test.", "tree": {"sha": "17513f01d1c11672741ff1243864b6ceacf259f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/17513f01d1c11672741ff1243864b6ceacf259f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/024edf08959e9c1d5022901e6c4e5cbaa5b6c8d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/024edf08959e9c1d5022901e6c4e5cbaa5b6c8d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/024edf08959e9c1d5022901e6c4e5cbaa5b6c8d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/024edf08959e9c1d5022901e6c4e5cbaa5b6c8d5/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fdd81afcf18d1a926d81d63cc4525fc9442aa9a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdd81afcf18d1a926d81d63cc4525fc9442aa9a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdd81afcf18d1a926d81d63cc4525fc9442aa9a5"}], "stats": {"total": 126, "additions": 84, "deletions": 42}, "files": [{"sha": "a00e1c6ef8d6b43d8b1a0fe4701e6b8c1f0f622f", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 28, "deletions": 42, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/024edf08959e9c1d5022901e6c4e5cbaa5b6c8d5/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/024edf08959e9c1d5022901e6c4e5cbaa5b6c8d5/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=024edf08959e9c1d5022901e6c4e5cbaa5b6c8d5", "patch": "@@ -3385,20 +3385,6 @@\n \n ;; 'across lanes' add.\n \n-(define_expand \"reduc_plus_scal_<mode>\"\n-  [(match_operand:<VEL> 0 \"register_operand\")\n-   (unspec:VDQ_I [(match_operand:VDQ_I 1 \"register_operand\")]\n-\t       UNSPEC_ADDV)]\n-  \"TARGET_SIMD\"\n-  {\n-    rtx elt = aarch64_endian_lane_rtx (<MODE>mode, 0);\n-    rtx scratch = gen_reg_rtx (<MODE>mode);\n-    emit_insn (gen_aarch64_reduc_plus_internal<mode> (scratch, operands[1]));\n-    emit_insn (gen_aarch64_get_lane<mode> (operands[0], scratch, elt));\n-    DONE;\n-  }\n-)\n-\n (define_insn \"aarch64_faddp<mode>\"\n  [(set (match_operand:VHSDF 0 \"register_operand\" \"=w\")\n        (unspec:VHSDF [(match_operand:VHSDF 1 \"register_operand\" \"w\")\n@@ -3409,31 +3395,22 @@\n   [(set_attr \"type\" \"neon_fp_reduc_add_<stype><q>\")]\n )\n \n-(define_insn \"aarch64_reduc_plus_internal<mode>\"\n- [(set (match_operand:VDQV 0 \"register_operand\" \"=w\")\n-       (unspec:VDQV [(match_operand:VDQV 1 \"register_operand\" \"w\")]\n+(define_insn \"reduc_plus_scal_<mode>\"\n+ [(set (match_operand:<VEL> 0 \"register_operand\" \"=w\")\n+       (unspec:<VEL> [(match_operand:VDQV 1 \"register_operand\" \"w\")]\n \t\t    UNSPEC_ADDV))]\n  \"TARGET_SIMD\"\n  \"add<VDQV:vp>\\\\t%<Vetype>0, %1.<Vtype>\"\n   [(set_attr \"type\" \"neon_reduc_add<q>\")]\n )\n \n-(define_insn \"aarch64_<su>addlv<mode>\"\n- [(set (match_operand:<VWIDE_S> 0 \"register_operand\" \"=w\")\n-       (unspec:<VWIDE_S> [(match_operand:VDQV_L 1 \"register_operand\" \"w\")]\n-\t\t    USADDLV))]\n- \"TARGET_SIMD\"\n- \"<su>addl<vp>\\\\t%<Vwstype>0<Vwsuf>, %1.<Vtype>\"\n-  [(set_attr \"type\" \"neon_reduc_add<q>\")]\n-)\n-\n-(define_insn \"aarch64_<su>addlp<mode>\"\n- [(set (match_operand:<VDBLW> 0 \"register_operand\" \"=w\")\n-       (unspec:<VDBLW> [(match_operand:VDQV_L 1 \"register_operand\" \"w\")]\n-\t\t    USADDLP))]\n+(define_insn \"reduc_plus_scal_v2si\"\n+ [(set (match_operand:SI 0 \"register_operand\" \"=w\")\n+       (unspec:SI [(match_operand:V2SI 1 \"register_operand\" \"w\")]\n+\t\t    UNSPEC_ADDV))]\n  \"TARGET_SIMD\"\n- \"<su>addlp\\\\t%0.<Vwhalf>, %1.<Vtype>\"\n-  [(set_attr \"type\" \"neon_reduc_add<q>\")]\n+ \"addp\\\\t%0.2s, %1.2s, %1.2s\"\n+  [(set_attr \"type\" \"neon_reduc_add\")]\n )\n \n ;; ADDV with result zero-extended to SI/DImode (for popcount).\n@@ -3447,15 +3424,6 @@\n   [(set_attr \"type\" \"neon_reduc_add<VDQV_E:q>\")]\n )\n \n-(define_insn \"aarch64_reduc_plus_internalv2si\"\n- [(set (match_operand:V2SI 0 \"register_operand\" \"=w\")\n-       (unspec:V2SI [(match_operand:V2SI 1 \"register_operand\" \"w\")]\n-\t\t    UNSPEC_ADDV))]\n- \"TARGET_SIMD\"\n- \"addp\\\\t%0.2s, %1.2s, %1.2s\"\n-  [(set_attr \"type\" \"neon_reduc_add\")]\n-)\n-\n (define_insn \"reduc_plus_scal_<mode>\"\n  [(set (match_operand:<VEL> 0 \"register_operand\" \"=w\")\n        (unspec:<VEL> [(match_operand:V2F 1 \"register_operand\" \"w\")]\n@@ -3467,7 +3435,7 @@\n \n (define_expand \"reduc_plus_scal_v4sf\"\n  [(set (match_operand:SF 0 \"register_operand\")\n-       (unspec:V4SF [(match_operand:V4SF 1 \"register_operand\")]\n+       (unspec:SF [(match_operand:V4SF 1 \"register_operand\")]\n \t\t    UNSPEC_FADDV))]\n  \"TARGET_SIMD\"\n {\n@@ -3479,6 +3447,24 @@\n   DONE;\n })\n \n+(define_insn \"aarch64_<su>addlv<mode>\"\n+ [(set (match_operand:<VWIDE_S> 0 \"register_operand\" \"=w\")\n+       (unspec:<VWIDE_S> [(match_operand:VDQV_L 1 \"register_operand\" \"w\")]\n+\t\t    USADDLV))]\n+ \"TARGET_SIMD\"\n+ \"<su>addl<vp>\\\\t%<Vwstype>0<Vwsuf>, %1.<Vtype>\"\n+  [(set_attr \"type\" \"neon_reduc_add<q>\")]\n+)\n+\n+(define_insn \"aarch64_<su>addlp<mode>\"\n+ [(set (match_operand:<VDBLW> 0 \"register_operand\" \"=w\")\n+       (unspec:<VDBLW> [(match_operand:VDQV_L 1 \"register_operand\" \"w\")]\n+\t\t    USADDLP))]\n+ \"TARGET_SIMD\"\n+ \"<su>addlp\\\\t%0.<Vwhalf>, %1.<Vtype>\"\n+  [(set_attr \"type\" \"neon_reduc_add<q>\")]\n+)\n+\n (define_insn \"clrsb<mode>2\"\n   [(set (match_operand:VDQ_BHSI 0 \"register_operand\" \"=w\")\n         (clrsb:VDQ_BHSI (match_operand:VDQ_BHSI 1 \"register_operand\" \"w\")))]"}, {"sha": "271a1c3e8c319f7bdb8669e4b3199b6f88ef7f5d", "filename": "gcc/testsuite/gcc.target/aarch64/vadd_reduc-1.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/024edf08959e9c1d5022901e6c4e5cbaa5b6c8d5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvadd_reduc-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/024edf08959e9c1d5022901e6c4e5cbaa5b6c8d5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvadd_reduc-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvadd_reduc-1.c?ref=024edf08959e9c1d5022901e6c4e5cbaa5b6c8d5", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"\" } } */\n+\n+#include <arm_neon.h>\n+\n+typedef int v4si __attribute__ ((vector_size (16)));\n+\n+/*\n+**bar:\n+**\t...\n+**\taddv\ts0, v0.4s\n+**\tfmov\tw0, s0\n+**\tlsr\tw1, w0, 16\n+**\tadd\tw0, w1, w0, uxth\n+**\tret\n+*/\n+int bar (v4si x)\n+{\n+  unsigned int sum = vaddvq_s32 (x);\n+  return (((uint16_t)(sum & 0xffff)) + ((uint32_t)sum >> 16));\n+}"}, {"sha": "0ad96954ff7daeb983adaafaec655770d9fe77cd", "filename": "gcc/testsuite/gcc.target/aarch64/vadd_reduc-2.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/024edf08959e9c1d5022901e6c4e5cbaa5b6c8d5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvadd_reduc-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/024edf08959e9c1d5022901e6c4e5cbaa5b6c8d5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvadd_reduc-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvadd_reduc-2.c?ref=024edf08959e9c1d5022901e6c4e5cbaa5b6c8d5", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-O3 -std=c99\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"\" } } */\n+\n+#include <stdint.h>\n+\n+#pragma GCC target \"+nosve\"\n+\n+/*\n+**test:\n+**\t...\n+**\taddv\ts0, v0.4s\n+**\tfmov\tw0, s0\n+**\tand\tw1, w0, 65535\n+**\tadd\tw0, w1, w0, lsr 16\n+**\tlsr\tw0, w0, 1\n+**\tret\n+*/\n+int test (uint8_t *p, uint32_t t[1][1], int n) {\n+\n+  int sum = 0;\n+  uint32_t a0;\n+  for (int i = 0; i < 4; i++, p++)\n+    t[i][0] = p[0];\n+\n+  for (int i = 0; i < 4; i++) {\n+    {\n+      int t0 = t[0][i] + t[0][i];\n+      a0 = t0;\n+    };\n+    sum += a0;\n+  }\n+  return (((uint16_t)sum) + ((uint32_t)sum >> 16)) >> 1;\n+}"}]}