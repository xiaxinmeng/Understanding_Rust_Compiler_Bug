{"sha": "31b0a96096a11b5f91a5bb7bde2c51679f7fc973", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzFiMGE5NjA5NmExMWI1ZjkxYTViYjdiZGUyYzUxNjc5ZjdmYzk3Mw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-03-26T15:20:38Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-03-26T15:20:38Z"}, "message": "alias.c (find_base_term): Avoid redundant and not used recursion.\n\n2013-03-26  Richard Biener  <rguenther@suse.de>\n\n\t* alias.c (find_base_term): Avoid redundant and not used\n\trecursion.\n\t(base_alias_check): Get the initial base term from the\n\tcaller.\n\t(true_dependence_1): Compute and pass base terms to base_alias_check.\n\t(write_dependence_p): Likewise.\n\t(may_alias_p): Likewise.\n\nFrom-SVN: r197110", "tree": {"sha": "8a357cd59f2d3cbcb54e60e1372b16c88457dd86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a357cd59f2d3cbcb54e60e1372b16c88457dd86"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/31b0a96096a11b5f91a5bb7bde2c51679f7fc973", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31b0a96096a11b5f91a5bb7bde2c51679f7fc973", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31b0a96096a11b5f91a5bb7bde2c51679f7fc973", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31b0a96096a11b5f91a5bb7bde2c51679f7fc973/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "03580130330b02a736f579b26db05f8bec204c8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03580130330b02a736f579b26db05f8bec204c8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03580130330b02a736f579b26db05f8bec204c8e"}], "stats": {"total": 82, "additions": 45, "deletions": 37}, "files": [{"sha": "71e263ca998ee35b41be846f39d0e191b2c32142", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31b0a96096a11b5f91a5bb7bde2c51679f7fc973/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31b0a96096a11b5f91a5bb7bde2c51679f7fc973/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=31b0a96096a11b5f91a5bb7bde2c51679f7fc973", "patch": "@@ -1,3 +1,13 @@\n+2013-03-26  Richard Biener  <rguenther@suse.de>\n+\n+\t* alias.c (find_base_term): Avoid redundant and not used\n+\trecursion.\n+\t(base_alias_check): Get the initial base term from the\n+\tcaller.\n+\t(true_dependence_1): Compute and pass base terms to base_alias_check.\n+\t(write_dependence_p): Likewise.\n+\t(may_alias_p): Likewise.\n+\n 2013-03-26  Sofiane Naci  <sofiane.naci@arm.com>\n \n \t* config/aarch64/aarch64.c (aarch64_classify_address): Support"}, {"sha": "c9870ecff3651110ae68f1a8b23ffe221ff7706d", "filename": "gcc/alias.c", "status": "modified", "additions": 35, "deletions": 37, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31b0a96096a11b5f91a5bb7bde2c51679f7fc973/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31b0a96096a11b5f91a5bb7bde2c51679f7fc973/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=31b0a96096a11b5f91a5bb7bde2c51679f7fc973", "patch": "@@ -148,7 +148,7 @@ typedef struct alias_set_entry_d *alias_set_entry;\n static int rtx_equal_for_memref_p (const_rtx, const_rtx);\n static int memrefs_conflict_p (int, rtx, int, rtx, HOST_WIDE_INT);\n static void record_set (rtx, const_rtx, void *);\n-static int base_alias_check (rtx, rtx, enum machine_mode,\n+static int base_alias_check (rtx, rtx, rtx, rtx, enum machine_mode,\n \t\t\t     enum machine_mode);\n static rtx find_base_value (rtx);\n static int mems_in_disjoint_alias_sets_p (const_rtx, const_rtx);\n@@ -1672,34 +1672,30 @@ find_base_term (rtx x)\n \tif (tmp1 == pic_offset_table_rtx && CONSTANT_P (tmp2))\n \t  return find_base_term (tmp2);\n \n-\t/* If either operand is known to be a pointer, then use it\n+\t/* If either operand is known to be a pointer, then prefer it\n \t   to determine the base term.  */\n \tif (REG_P (tmp1) && REG_POINTER (tmp1))\n+\t  ;\n+\telse if (REG_P (tmp2) && REG_POINTER (tmp2))\n \t  {\n-\t    rtx base = find_base_term (tmp1);\n-\t    if (base)\n-\t      return base;\n+\t    rtx tem = tmp1;\n+\t    tmp1 = tmp2;\n+\t    tmp2 = tem;\n \t  }\n \n-\tif (REG_P (tmp2) && REG_POINTER (tmp2))\n-\t  {\n-\t    rtx base = find_base_term (tmp2);\n-\t    if (base)\n-\t      return base;\n-\t  }\n-\n-\t/* Neither operand was known to be a pointer.  Go ahead and find the\n-\t   base term for both operands.  */\n-\ttmp1 = find_base_term (tmp1);\n-\ttmp2 = find_base_term (tmp2);\n-\n-\t/* If either base term is named object or a special address\n+\t/* Go ahead and find the base term for both operands.  If either base\n+\t   term is from a pointer or is a named object or a special address\n \t   (like an argument or stack reference), then use it for the\n \t   base term.  */\n-\tif (tmp1 != 0 && known_base_value_p (tmp1))\n+\ttmp1 = find_base_term (tmp1);\n+\tif (tmp1 != NULL_RTX\n+\t    && ((REG_P (tmp1) && REG_POINTER (tmp1))\n+\t\t || known_base_value_p (tmp1)))\n \t  return tmp1;\n-\n-\tif (tmp2 != 0 && known_base_value_p (tmp2))\n+\ttmp2 = find_base_term (tmp2);\n+\tif (tmp2 != NULL_RTX\n+\t    && ((REG_P (tmp2) && REG_POINTER (tmp2))\n+\t\t || known_base_value_p (tmp2)))\n \t  return tmp2;\n \n \t/* We could not determine which of the two operands was the\n@@ -1736,12 +1732,9 @@ may_be_sp_based_p (rtx x)\n    objects, 1 if they might be pointers to the same object.  */\n \n static int\n-base_alias_check (rtx x, rtx y, enum machine_mode x_mode,\n-\t\t  enum machine_mode y_mode)\n+base_alias_check (rtx x, rtx x_base, rtx y, rtx y_base,\n+\t\t  enum machine_mode x_mode, enum machine_mode y_mode)\n {\n-  rtx x_base = find_base_term (x);\n-  rtx y_base = find_base_term (y);\n-\n   /* If the address itself has no known base see if a known equivalent\n      value has one.  If either address still has no known base, nothing\n      is known about aliasing.  */\n@@ -2511,7 +2504,9 @@ true_dependence_1 (const_rtx mem, enum machine_mode mem_mode, rtx mem_addr,\n \t\t   && CONSTANT_POOL_ADDRESS_P (base))))\n     return 0;\n \n-  if (! base_alias_check (x_addr, mem_addr, GET_MODE (x), mem_mode))\n+  rtx mem_base = find_base_term (mem_addr);\n+  if (! base_alias_check (x_addr, base, mem_addr, mem_base,\n+\t\t\t  GET_MODE (x), mem_mode))\n     return 0;\n \n   x_addr = canon_rtx (x_addr);\n@@ -2603,16 +2598,16 @@ write_dependence_p (const_rtx mem, const_rtx x, int writep)\n       mem_addr = get_addr (mem_addr);\n     }\n \n-  if (! writep)\n-    {\n-      base = find_base_term (mem_addr);\n-      if (base && (GET_CODE (base) == LABEL_REF\n-\t\t   || (GET_CODE (base) == SYMBOL_REF\n-\t\t       && CONSTANT_POOL_ADDRESS_P (base))))\n-\treturn 0;\n-    }\n+  base = find_base_term (mem_addr);\n+  if (! writep\n+      && base\n+      && (GET_CODE (base) == LABEL_REF\n+\t  || (GET_CODE (base) == SYMBOL_REF\n+\t      && CONSTANT_POOL_ADDRESS_P (base))))\n+    return 0;\n \n-  if (! base_alias_check (x_addr, mem_addr, GET_MODE (x),\n+  rtx x_base = find_base_term (x_addr);\n+  if (! base_alias_check (x_addr, x_base, mem_addr, base, GET_MODE (x),\n \t\t\t  GET_MODE (mem)))\n     return 0;\n \n@@ -2692,7 +2687,10 @@ may_alias_p (const_rtx mem, const_rtx x)\n       mem_addr = get_addr (mem_addr);\n     }\n \n-  if (! base_alias_check (x_addr, mem_addr, GET_MODE (x), GET_MODE (mem_addr)))\n+  rtx x_base = find_base_term (x_addr);\n+  rtx mem_base = find_base_term (mem_addr);\n+  if (! base_alias_check (x_addr, x_base, mem_addr, mem_base,\n+\t\t\t  GET_MODE (x), GET_MODE (mem_addr)))\n     return 0;\n \n   x_addr = canon_rtx (x_addr);"}]}