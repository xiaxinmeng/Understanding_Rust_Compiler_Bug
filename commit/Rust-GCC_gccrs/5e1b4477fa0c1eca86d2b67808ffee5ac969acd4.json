{"sha": "5e1b4477fa0c1eca86d2b67808ffee5ac969acd4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWUxYjQ0NzdmYTBjMWVjYTg2ZDJiNjc4MDhmZmVlNWFjOTY5YWNkNA==", "commit": {"author": {"name": "Bernd Edlinger", "email": "bernd.edlinger@hotmail.de", "date": "2018-10-04T17:34:56Z"}, "committer": {"name": "Bernd Edlinger", "email": "edlinger@gcc.gnu.org", "date": "2018-10-04T17:34:56Z"}, "message": "varasm.c (output_constant): Add new parameter merge_strings.\n\n2018-10-04  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n        * varasm.c (output_constant): Add new parameter merge_strings.\n        Make strings properly zero terminated in merge string sections.\n        (mergeable_string_section): Don't fail if the last char is non-zero.\n        (assemble_variable_contents): Handle merge string sections.\n        (assemble_variable): Likewise.\n        (assemble_constant_contents): Likewise.\n        (output_constant_def_contents): Likewise.\n        (output_constructor_array_range,\n        output_constructor_regular_field): Adjust call to output_constant.\n        (output_object_block): Adjust call to assemble_constant_contents\n        and assemble_variable_contents.\n\ntestsuie:\n2018-10-04  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n        * gnat.dg/string_merge1.adb: New test.\n        * gnat.dg/string_merge2.adb: New test.\n        * gcc.dg/merge-all-constants-1.c: Adjust test.\n        * gcc.dg/merge-all-constants-2.c: New test.\n\nFrom-SVN: r264850", "tree": {"sha": "cfd084696110a745fb6564ba51735a456eb0932b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cfd084696110a745fb6564ba51735a456eb0932b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e1b4477fa0c1eca86d2b67808ffee5ac969acd4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e1b4477fa0c1eca86d2b67808ffee5ac969acd4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e1b4477fa0c1eca86d2b67808ffee5ac969acd4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e1b4477fa0c1eca86d2b67808ffee5ac969acd4/comments", "author": {"login": "bernd-edlinger", "id": 17638929, "node_id": "MDQ6VXNlcjE3NjM4OTI5", "avatar_url": "https://avatars.githubusercontent.com/u/17638929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bernd-edlinger", "html_url": "https://github.com/bernd-edlinger", "followers_url": "https://api.github.com/users/bernd-edlinger/followers", "following_url": "https://api.github.com/users/bernd-edlinger/following{/other_user}", "gists_url": "https://api.github.com/users/bernd-edlinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/bernd-edlinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bernd-edlinger/subscriptions", "organizations_url": "https://api.github.com/users/bernd-edlinger/orgs", "repos_url": "https://api.github.com/users/bernd-edlinger/repos", "events_url": "https://api.github.com/users/bernd-edlinger/events{/privacy}", "received_events_url": "https://api.github.com/users/bernd-edlinger/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a81a0bfa4e3ff84538a6e829c72ecfa8651aacd8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a81a0bfa4e3ff84538a6e829c72ecfa8651aacd8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a81a0bfa4e3ff84538a6e829c72ecfa8651aacd8"}], "stats": {"total": 133, "additions": 105, "deletions": 28}, "files": [{"sha": "0f6cbedbf0c91e9850efac81607b0c9b0a7f5ee7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e1b4477fa0c1eca86d2b67808ffee5ac969acd4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e1b4477fa0c1eca86d2b67808ffee5ac969acd4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5e1b4477fa0c1eca86d2b67808ffee5ac969acd4", "patch": "@@ -1,3 +1,17 @@\n+2018-10-04  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\t* varasm.c (output_constant): Add new parameter merge_strings.\n+\tMake strings properly zero terminated in merge string sections.\n+\t(mergeable_string_section): Don't fail if the last char is non-zero.\n+\t(assemble_variable_contents): Handle merge string sections.\n+\t(assemble_variable): Likewise.\n+\t(assemble_constant_contents): Likewise.\n+\t(output_constant_def_contents): Likewise.\n+\t(output_constructor_array_range,\n+\toutput_constructor_regular_field): Adjust call to output_constant.\n+\t(output_object_block): Adjust call to assemble_constant_contents\n+\tand assemble_variable_contents.\n+\n 2018-10-04  Martin Liska  <mliska@suse.cz>\n \n \tPR c/87483"}, {"sha": "f15042f64b0cc407e10aab8b40bf2eab03e883c6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e1b4477fa0c1eca86d2b67808ffee5ac969acd4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e1b4477fa0c1eca86d2b67808ffee5ac969acd4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5e1b4477fa0c1eca86d2b67808ffee5ac969acd4", "patch": "@@ -1,3 +1,10 @@\n+2018-10-04  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\t* gnat.dg/string_merge1.adb: New test.\n+\t* gnat.dg/string_merge2.adb: New test.\n+\t* gcc.dg/merge-all-constants-1.c: Adjust test.\n+\t* gcc.dg/merge-all-constants-2.c: New test.\n+\n 2018-10-04  Bill Seurer  <seurer@linux.vnet.ibm.com>\n \n \tPR target/87486"}, {"sha": "53f6c4d0a0a029535693cf86ae4a1a6a20c0ea80", "filename": "gcc/testsuite/gcc.dg/merge-all-constants-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e1b4477fa0c1eca86d2b67808ffee5ac969acd4/gcc%2Ftestsuite%2Fgcc.dg%2Fmerge-all-constants-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e1b4477fa0c1eca86d2b67808ffee5ac969acd4/gcc%2Ftestsuite%2Fgcc.dg%2Fmerge-all-constants-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fmerge-all-constants-1.c?ref=5e1b4477fa0c1eca86d2b67808ffee5ac969acd4", "patch": "@@ -1,8 +1,8 @@\n /* { dg-do compile } */\n /* { dg-options \"-w -O2 -fmerge-all-constants\" } */\n \n-const char str1[36] = \"0123456789abcdefghijklmnopqrstuvwxyz\";\n+const char str1[36] = \"\\000123456789abcdefghijklmnopqrstuvwxyz\";\n const char str2[38] = \"0123456789abcdefghijklmnopqrstuvwxyz\";\n-const char str3[10] = \"0123456789abcdefghijklmnopqrstuvwxyz\";\n+const char str3[10] = \"\\000123456789abcdefghijklmnopqrstuvwxyz\";\n \n-/* { dg-final { scan-assembler-not \"\\.rodata\\.str\" } } */\n+/* { dg-final { scan-assembler-not \"\\\\.rodata\\\\.str\" } } */"}, {"sha": "fbdb2bb517273e43d26be76759c8a7b65ed68c1b", "filename": "gcc/testsuite/gcc.dg/merge-all-constants-2.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e1b4477fa0c1eca86d2b67808ffee5ac969acd4/gcc%2Ftestsuite%2Fgcc.dg%2Fmerge-all-constants-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e1b4477fa0c1eca86d2b67808ffee5ac969acd4/gcc%2Ftestsuite%2Fgcc.dg%2Fmerge-all-constants-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fmerge-all-constants-2.c?ref=5e1b4477fa0c1eca86d2b67808ffee5ac969acd4", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-w -O2 -fmerge-all-constants\" } */\n+\n+const char str1[36] = \"0123456789abcdefghijklmnopqrstuvwxyz\";\n+const char str2[37] = \"0123456789abcdefghijklmnopqrstuvwxyz\";\n+const char str3[10] = \"0123456789abcdefghijklmnopqrstuvwxyz\";\n+\n+/* { dg-final { scan-assembler-not \"\\\\.rodata\\[\\n\\r\\]\" } } */"}, {"sha": "f67c7c15601f168a0d691c9447a63814b88b83c0", "filename": "gcc/testsuite/gnat.dg/string_merge1.adb", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e1b4477fa0c1eca86d2b67808ffee5ac969acd4/gcc%2Ftestsuite%2Fgnat.dg%2Fstring_merge1.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e1b4477fa0c1eca86d2b67808ffee5ac969acd4/gcc%2Ftestsuite%2Fgnat.dg%2Fstring_merge1.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fstring_merge1.adb?ref=5e1b4477fa0c1eca86d2b67808ffee5ac969acd4", "patch": "@@ -0,0 +1,19 @@\n+-- { dg-do compile }\n+-- { dg-options \"-O1 -fmerge-all-constants\" }\n+\n+procedure String_Merge1 is\n+   procedure Process (X : String);\n+   pragma Import (Ada, Process);\n+begin\n+   Process (\"ABCD\");\n+end;\n+\n+-- We expect something like:\n+\n+-- .section  .rodata.str1.1,\"aMS\",@progbits,1\n+-- .LC1:\n+--     .string \"ABCD\"\n+\n+-- { dg-final { scan-assembler-times \"\\\\.rodata\\\\.str\" 1 } }\n+-- { dg-final { scan-assembler-times \"\\\\.string\" 1 } }\n+-- { dg-final { scan-assembler-times \"\\\"ABCD\\\"\" 1 } }"}, {"sha": "bbec00501c0ffb8d47867b9ddef8d3b86d14711a", "filename": "gcc/testsuite/gnat.dg/string_merge2.adb", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e1b4477fa0c1eca86d2b67808ffee5ac969acd4/gcc%2Ftestsuite%2Fgnat.dg%2Fstring_merge2.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e1b4477fa0c1eca86d2b67808ffee5ac969acd4/gcc%2Ftestsuite%2Fgnat.dg%2Fstring_merge2.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fstring_merge2.adb?ref=5e1b4477fa0c1eca86d2b67808ffee5ac969acd4", "patch": "@@ -0,0 +1,19 @@\n+-- { dg-do compile }\n+-- { dg-options \"-O1 -fmerge-all-constants\" }\n+\n+procedure String_Merge2 is\n+   procedure Process (X : String);\n+   pragma Import (Ada, Process);\n+begin\n+   Process (\"ABCD\" & Ascii.NUL);\n+end;\n+\n+-- We expect something like:\n+\n+-- .section  .rodata.str1.1,\"aMS\",@progbits,1\n+-- .LC1:\n+--     .string \"ABCD\"\n+\n+-- { dg-final { scan-assembler-times \"\\\\.rodata\\\\.str\" 1 } }\n+-- { dg-final { scan-assembler-times \"\\\\.string\" 1 } }\n+-- { dg-final { scan-assembler-times \"\\\"ABCD\\\"\" 1 } }"}, {"sha": "c789a03e1f3403f37f4f00a7d124f3e7e8f5e4ed", "filename": "gcc/varasm.c", "status": "modified", "additions": 35, "deletions": 25, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e1b4477fa0c1eca86d2b67808ffee5ac969acd4/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e1b4477fa0c1eca86d2b67808ffee5ac969acd4/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=5e1b4477fa0c1eca86d2b67808ffee5ac969acd4", "patch": "@@ -111,7 +111,7 @@ static int compare_constant (const tree, const tree);\n static void output_constant_def_contents (rtx);\n static void output_addressed_constants (tree);\n static unsigned HOST_WIDE_INT output_constant (tree, unsigned HOST_WIDE_INT,\n-\t\t\t\t\t       unsigned int, bool);\n+\t\t\t\t\t       unsigned int, bool, bool);\n static void globalize_decl (tree);\n static bool decl_readonly_section_1 (enum section_category);\n #ifdef BSS_SECTION_ASM_OP\n@@ -804,8 +804,8 @@ mergeable_string_section (tree decl ATTRIBUTE_UNUSED,\n       && TREE_CODE (decl) == STRING_CST\n       && TREE_CODE (TREE_TYPE (decl)) == ARRAY_TYPE\n       && align <= 256\n-      && (len = int_size_in_bytes (TREE_TYPE (decl))) > 0\n-      && TREE_STRING_LENGTH (decl) >= len)\n+      && (len = int_size_in_bytes (TREE_TYPE (decl))) >= 0\n+      && TREE_STRING_LENGTH (decl) == len)\n     {\n       scalar_int_mode mode;\n       unsigned int modesize;\n@@ -835,7 +835,7 @@ mergeable_string_section (tree decl ATTRIBUTE_UNUSED,\n \t      if (j == unit)\n \t\tbreak;\n \t    }\n-\t  if (i == len - unit)\n+\t  if (i == len - unit || (unit == 1 && i == len))\n \t    {\n \t      sprintf (name, \"%s.str%d.%d\", prefix,\n \t\t       modesize / 8, (int) (align / 8));\n@@ -2117,7 +2117,7 @@ assemble_noswitch_variable (tree decl, const char *name, section *sect,\n \n static void\n assemble_variable_contents (tree decl, const char *name,\n-\t\t\t    bool dont_output_data)\n+\t\t\t    bool dont_output_data, bool merge_strings)\n {\n   /* Do any machine/system dependent processing of the object.  */\n #ifdef ASM_DECLARE_OBJECT_NAME\n@@ -2140,7 +2140,7 @@ assemble_variable_contents (tree decl, const char *name,\n \toutput_constant (DECL_INITIAL (decl),\n \t\t\t tree_to_uhwi (DECL_SIZE_UNIT (decl)),\n \t\t\t get_variable_align (decl),\n-\t\t\t false);\n+\t\t\t false, merge_strings);\n       else\n \t/* Leave space for it.  */\n \tassemble_zeros (tree_to_uhwi (DECL_SIZE_UNIT (decl)));\n@@ -2316,7 +2316,9 @@ assemble_variable (tree decl, int top_level ATTRIBUTE_UNUSED,\n \tswitch_to_section (sect);\n       if (align > BITS_PER_UNIT)\n \tASM_OUTPUT_ALIGN (asm_out_file, floor_log2 (align / BITS_PER_UNIT));\n-      assemble_variable_contents (decl, name, dont_output_data);\n+      assemble_variable_contents (decl, name, dont_output_data,\n+\t\t\t\t  (sect->common.flags & SECTION_MERGE)\n+\t\t\t\t  && (sect->common.flags & SECTION_STRINGS));\n       if (asan_protected)\n \t{\n \t  unsigned HOST_WIDE_INT int size\n@@ -3471,7 +3473,8 @@ maybe_output_constant_def_contents (struct constant_descriptor_tree *desc,\n    constant's alignment in bits.  */\n \n static void\n-assemble_constant_contents (tree exp, const char *label, unsigned int align)\n+assemble_constant_contents (tree exp, const char *label, unsigned int align,\n+\t\t\t    bool merge_strings)\n {\n   HOST_WIDE_INT size;\n \n@@ -3481,7 +3484,7 @@ assemble_constant_contents (tree exp, const char *label, unsigned int align)\n   targetm.asm_out.declare_constant_name (asm_out_file, label, exp, size);\n \n   /* Output the value of EXP.  */\n-  output_constant (exp, size, align, false);\n+  output_constant (exp, size, align, false, merge_strings);\n \n   targetm.asm_out.decl_end ();\n }\n@@ -3522,10 +3525,13 @@ output_constant_def_contents (rtx symbol)\n \t\t   || (VAR_P (decl) && DECL_IN_CONSTANT_POOL (decl))\n \t\t   ? DECL_ALIGN (decl)\n \t\t   : symtab_node::get (decl)->definition_alignment ());\n-      switch_to_section (get_constant_section (exp, align));\n+      section *sect = get_constant_section (exp, align);\n+      switch_to_section (sect);\n       if (align > BITS_PER_UNIT)\n \tASM_OUTPUT_ALIGN (asm_out_file, floor_log2 (align / BITS_PER_UNIT));\n-      assemble_constant_contents (exp, XSTR (symbol, 0), align);\n+      assemble_constant_contents (exp, XSTR (symbol, 0), align,\n+\t\t\t\t  (sect->common.flags & SECTION_MERGE)\n+\t\t\t\t  && (sect->common.flags & SECTION_STRINGS));\n       if (asan_protected)\n \t{\n \t  HOST_WIDE_INT size = get_constant_size (exp);\n@@ -4838,7 +4844,7 @@ output_constructor (tree, unsigned HOST_WIDE_INT, unsigned int, bool,\n \n static unsigned HOST_WIDE_INT\n output_constant (tree exp, unsigned HOST_WIDE_INT size, unsigned int align,\n-\t\t bool reverse)\n+\t\t bool reverse, bool merge_strings)\n {\n   enum tree_code code;\n   unsigned HOST_WIDE_INT thissize;\n@@ -4953,10 +4959,11 @@ output_constant (tree exp, unsigned HOST_WIDE_INT size, unsigned int align,\n       break;\n \n     case COMPLEX_TYPE:\n-      output_constant (TREE_REALPART (exp), thissize / 2, align, reverse);\n+      output_constant (TREE_REALPART (exp), thissize / 2, align,\n+\t\t       reverse, false);\n       output_constant (TREE_IMAGPART (exp), thissize / 2,\n \t\t       min_align (align, BITS_PER_UNIT * (thissize / 2)),\n-\t\t       reverse);\n+\t\t       reverse, false);\n       break;\n \n     case ARRAY_TYPE:\n@@ -4966,8 +4973,11 @@ output_constant (tree exp, unsigned HOST_WIDE_INT size, unsigned int align,\n \tcase CONSTRUCTOR:\n \t  return output_constructor (exp, size, align, reverse, NULL);\n \tcase STRING_CST:\n-\t  thissize\n-\t    = MIN ((unsigned HOST_WIDE_INT)TREE_STRING_LENGTH (exp), size);\n+\t  thissize = (unsigned HOST_WIDE_INT)TREE_STRING_LENGTH (exp);\n+\t  if (merge_strings\n+\t      && (thissize == 0\n+\t\t  || TREE_STRING_POINTER (exp) [thissize - 1] != '\\0'))\n+\t    thissize++;\n \t  gcc_checking_assert (check_string_literal (exp, size));\n \t  assemble_string (TREE_STRING_POINTER (exp), thissize);\n \t  break;\n@@ -4977,14 +4987,14 @@ output_constant (tree exp, unsigned HOST_WIDE_INT size, unsigned int align,\n \t    unsigned int nalign = MIN (align, GET_MODE_ALIGNMENT (inner));\n \t    int elt_size = GET_MODE_SIZE (inner);\n \t    output_constant (VECTOR_CST_ELT (exp, 0), elt_size, align,\n-\t\t\t     reverse);\n+\t\t\t     reverse, false);\n \t    thissize = elt_size;\n \t    /* Static constants must have a fixed size.  */\n \t    unsigned int nunits = VECTOR_CST_NELTS (exp).to_constant ();\n \t    for (unsigned int i = 1; i < nunits; i++)\n \t      {\n \t\toutput_constant (VECTOR_CST_ELT (exp, i), elt_size, nalign,\n-\t\t\t\t reverse);\n+\t\t\t\t reverse, false);\n \t\tthissize += elt_size;\n \t      }\n \t    break;\n@@ -5105,8 +5115,8 @@ output_constructor_array_range (oc_local_state *local)\n       if (local->val == NULL_TREE)\n \tassemble_zeros (fieldsize);\n       else\n-\tfieldsize\n-\t  = output_constant (local->val, fieldsize, align2, local->reverse);\n+\tfieldsize = output_constant (local->val, fieldsize, align2,\n+\t\t\t\t     local->reverse, false);\n \n       /* Count its size.  */\n       local->total_bytes += fieldsize;\n@@ -5201,8 +5211,8 @@ output_constructor_regular_field (oc_local_state *local)\n   if (local->val == NULL_TREE)\n     assemble_zeros (fieldsize);\n   else\n-    fieldsize\n-      = output_constant (local->val, fieldsize, align2, local->reverse);\n+    fieldsize = output_constant (local->val, fieldsize, align2,\n+\t\t\t\t local->reverse, false);\n \n   /* Count its size.  */\n   local->total_bytes += fieldsize;\n@@ -7618,8 +7628,8 @@ output_object_block (struct object_block *block)\n \t{\n \t  HOST_WIDE_INT size;\n \t  decl = SYMBOL_REF_DECL (symbol);\n-\t  assemble_constant_contents\n-\t       (DECL_INITIAL (decl), XSTR (symbol, 0), DECL_ALIGN (decl));\n+\t  assemble_constant_contents (DECL_INITIAL (decl), XSTR (symbol, 0),\n+\t\t\t\t      DECL_ALIGN (decl), false);\n \n \t  size = get_constant_size (DECL_INITIAL (decl));\n \t  offset += size;\n@@ -7636,7 +7646,7 @@ output_object_block (struct object_block *block)\n \t{\n \t  HOST_WIDE_INT size;\n \t  decl = SYMBOL_REF_DECL (symbol);\n-\t  assemble_variable_contents (decl, XSTR (symbol, 0), false);\n+\t  assemble_variable_contents (decl, XSTR (symbol, 0), false, false);\n \t  size = tree_to_uhwi (DECL_SIZE_UNIT (decl));\n \t  offset += size;\n \t  if ((flag_sanitize & SANITIZE_ADDRESS)"}]}