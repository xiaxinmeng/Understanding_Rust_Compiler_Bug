{"sha": "2dc6ed8700c2928d30be6d5d035095b4977e7dad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmRjNmVkODcwMGMyOTI4ZDMwYmU2ZDVkMDM1MDk1YjQ5NzdlN2RhZA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2013-09-12T13:49:18Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2013-09-12T13:49:18Z"}, "message": "semantics.c (finish_pseudo_destructor_expr): Add location_t parameter.\n\n2013-09-12  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* semantics.c (finish_pseudo_destructor_expr): Add location_t\n\tparameter.\n\t* pt.c (unify_arg_conversion): Use EXPR_LOC_OR_HERE.\n\t(tsubst_copy_and_build): Adjust finish_pseudo_destructor_expr\n\tcalls.\n\t* parser.c (cp_parser_postfix_dot_deref_expression): Likewise.\n\t(cp_parser_postfix_expression): Pass the proper location to\n\tcp_parser_postfix_dot_deref_expression.\n\n/testsuite\n2013-09-12  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* g++.dg/template/pseudodtor2.C: Add column number to dg-error\n\tstrings.\n\t* g++.dg/template/pseudodtor3.C: Likewise.\n\nFrom-SVN: r202528", "tree": {"sha": "aed3e28195574fbdb243323a9226ea49737a80da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aed3e28195574fbdb243323a9226ea49737a80da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2dc6ed8700c2928d30be6d5d035095b4977e7dad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dc6ed8700c2928d30be6d5d035095b4977e7dad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2dc6ed8700c2928d30be6d5d035095b4977e7dad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dc6ed8700c2928d30be6d5d035095b4977e7dad/comments", "author": null, "committer": null, "parents": [{"sha": "b12ebd96ba91490e361a139dca9d0fc17a67312f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b12ebd96ba91490e361a139dca9d0fc17a67312f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b12ebd96ba91490e361a139dca9d0fc17a67312f"}], "stats": {"total": 65, "additions": 44, "deletions": 21}, "files": [{"sha": "a0935dc404fcbc03cdcb3d76a9d99eec7a2a944f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dc6ed8700c2928d30be6d5d035095b4977e7dad/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dc6ed8700c2928d30be6d5d035095b4977e7dad/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2dc6ed8700c2928d30be6d5d035095b4977e7dad", "patch": "@@ -1,3 +1,14 @@\n+2013-09-12  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* semantics.c (finish_pseudo_destructor_expr): Add location_t\n+\tparameter.\n+\t* pt.c (unify_arg_conversion): Use EXPR_LOC_OR_HERE.\n+\t(tsubst_copy_and_build): Adjust finish_pseudo_destructor_expr\n+\tcalls.\n+\t* parser.c (cp_parser_postfix_dot_deref_expression): Likewise.\n+\t(cp_parser_postfix_expression): Pass the proper location to\n+\tcp_parser_postfix_dot_deref_expression.\n+\n 2013-09-10  Jan Hubicka  <jh@suse.cz>\n \t    Paolo Carlini  <paolo.carlini@oracle.com>\n "}, {"sha": "e00e56c6e012a7cf0f9f8e6206f65ab47e56d0ad", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dc6ed8700c2928d30be6d5d035095b4977e7dad/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dc6ed8700c2928d30be6d5d035095b4977e7dad/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=2dc6ed8700c2928d30be6d5d035095b4977e7dad", "patch": "@@ -5533,13 +5533,15 @@ cp_parser_postfix_expression (cp_parser *parser, bool address_p, bool cast_p,\n \t\t\t      cp_id_kind * pidk_return)\n {\n   cp_token *token;\n+  location_t loc;\n   enum rid keyword;\n   cp_id_kind idk = CP_ID_KIND_NONE;\n   tree postfix_expression = NULL_TREE;\n   bool is_member_access = false;\n \n   /* Peek at the next token.  */\n   token = cp_lexer_peek_token (parser->lexer);\n+  loc = token->location;\n   /* Some of the productions are determined by keywords.  */\n   keyword = token->keyword;\n   switch (keyword)\n@@ -5685,7 +5687,6 @@ cp_parser_postfix_expression (cp_parser *parser, bool address_p, bool cast_p,\n \tvec<tree, va_gc> *vec;\n \tunsigned int i;\n \ttree p;\n-\tlocation_t loc = token->location;\n \n \tcp_lexer_consume_token (parser->lexer);\n \tvec = cp_parser_parenthesized_expression_list (parser, non_attr,\n@@ -6018,8 +6019,7 @@ cp_parser_postfix_expression (cp_parser *parser, bool address_p, bool cast_p,\n \t  postfix_expression\n \t    = cp_parser_postfix_dot_deref_expression (parser, token->type,\n \t\t\t\t\t\t      postfix_expression,\n-\t\t\t\t\t\t      false, &idk,\n-\t\t\t\t\t\t      token->location);\n+\t\t\t\t\t\t      false, &idk, loc);\n \n           is_member_access = true;\n \t  break;\n@@ -6338,7 +6338,7 @@ cp_parser_postfix_dot_deref_expression (cp_parser *parser,\n \t  pseudo_destructor_p = true;\n \t  postfix_expression\n \t    = finish_pseudo_destructor_expr (postfix_expression,\n-\t\t\t\t\t     s, type);\n+\t\t\t\t\t     s, type, location);\n \t}\n     }\n "}, {"sha": "e4ae4b763059139f38a390ceec525a1527d9510a", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dc6ed8700c2928d30be6d5d035095b4977e7dad/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dc6ed8700c2928d30be6d5d035095b4977e7dad/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=2dc6ed8700c2928d30be6d5d035095b4977e7dad", "patch": "@@ -5398,7 +5398,8 @@ unify_arg_conversion (bool explain_p, tree to_type,\n \t\t      tree from_type, tree arg)\n {\n   if (explain_p)\n-    inform (input_location, \"  cannot convert %qE (type %qT) to type %qT\",\n+    inform (EXPR_LOC_OR_HERE (arg),\n+\t    \"  cannot convert %qE (type %qT) to type %qT\",\n \t    arg, from_type, to_type);\n   return 1;\n }\n@@ -14292,9 +14293,10 @@ tsubst_copy_and_build (tree t,\n \n     case PSEUDO_DTOR_EXPR:\n       RETURN (finish_pseudo_destructor_expr\n-\t(RECUR (TREE_OPERAND (t, 0)),\n-\t RECUR (TREE_OPERAND (t, 1)),\n-\t tsubst (TREE_OPERAND (t, 2), args, complain, in_decl)));\n+\t      (RECUR (TREE_OPERAND (t, 0)),\n+\t       RECUR (TREE_OPERAND (t, 1)),\n+\t       tsubst (TREE_OPERAND (t, 2), args, complain, in_decl),\n+\t       input_location));\n \n     case TREE_LIST:\n       {\n@@ -14423,7 +14425,8 @@ tsubst_copy_and_build (tree t,\n \t\t  {\n \t\t    dtor = TREE_OPERAND (dtor, 0);\n \t\t    if (TYPE_P (dtor))\n-\t\t      RETURN (finish_pseudo_destructor_expr (object, s, dtor));\n+\t\t      RETURN (finish_pseudo_destructor_expr\n+\t\t\t      (object, s, dtor, input_location));\n \t\t  }\n \t      }\n \t  }"}, {"sha": "6d7f55f73198b9db40a28166aefe0be37f0fbbf2", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dc6ed8700c2928d30be6d5d035095b4977e7dad/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dc6ed8700c2928d30be6d5d035095b4977e7dad/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=2dc6ed8700c2928d30be6d5d035095b4977e7dad", "patch": "@@ -2361,7 +2361,8 @@ finish_this_expr (void)\n    was of the form `OBJECT.SCOPE::~DESTRUCTOR'.  */\n \n tree\n-finish_pseudo_destructor_expr (tree object, tree scope, tree destructor)\n+finish_pseudo_destructor_expr (tree object, tree scope, tree destructor,\n+\t\t\t       location_t loc)\n {\n   if (object == error_mark_node || destructor == error_mark_node)\n     return error_mark_node;\n@@ -2372,15 +2373,16 @@ finish_pseudo_destructor_expr (tree object, tree scope, tree destructor)\n     {\n       if (scope == error_mark_node)\n \t{\n-\t  error (\"invalid qualifying scope in pseudo-destructor name\");\n+\t  error_at (loc, \"invalid qualifying scope in pseudo-destructor name\");\n \t  return error_mark_node;\n \t}\n       if (is_auto (destructor))\n \tdestructor = TREE_TYPE (object);\n       if (scope && TYPE_P (scope) && !check_dtor_name (scope, destructor))\n \t{\n-\t  error (\"qualified type %qT does not match destructor name ~%qT\",\n-\t\t scope, destructor);\n+\t  error_at (loc,\n+\t\t    \"qualified type %qT does not match destructor name ~%qT\",\n+\t\t    scope, destructor);\n \t  return error_mark_node;\n \t}\n \n@@ -2401,12 +2403,13 @@ finish_pseudo_destructor_expr (tree object, tree scope, tree destructor)\n       if (!same_type_ignoring_top_level_qualifiers_p (TREE_TYPE (object),\n \t\t\t\t\t\t      destructor))\n \t{\n-\t  error (\"%qE is not of type %qT\", object, destructor);\n+\t  error_at (loc, \"%qE is not of type %qT\", object, destructor);\n \t  return error_mark_node;\n \t}\n     }\n \n-  return build3 (PSEUDO_DTOR_EXPR, void_type_node, object, scope, destructor);\n+  return build3_loc (loc, PSEUDO_DTOR_EXPR, void_type_node, object,\n+\t\t     scope, destructor);\n }\n \n /* Finish an expression of the form CODE EXPR.  */"}, {"sha": "579c6b88515df3e52359b9a85fe1267d83a58322", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dc6ed8700c2928d30be6d5d035095b4977e7dad/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dc6ed8700c2928d30be6d5d035095b4977e7dad/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2dc6ed8700c2928d30be6d5d035095b4977e7dad", "patch": "@@ -1,3 +1,9 @@\n+2013-09-12  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* g++.dg/template/pseudodtor2.C: Add column number to dg-error\n+\tstrings.\n+\t* g++.dg/template/pseudodtor3.C: Likewise.\n+\n 2013-09-12  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/58404"}, {"sha": "d4a9ac1cbc803510a1c2ca6bce15213c382dc380", "filename": "gcc/testsuite/g++.dg/template/pseudodtor2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dc6ed8700c2928d30be6d5d035095b4977e7dad/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpseudodtor2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dc6ed8700c2928d30be6d5d035095b4977e7dad/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpseudodtor2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpseudodtor2.C?ref=2dc6ed8700c2928d30be6d5d035095b4977e7dad", "patch": "@@ -6,7 +6,7 @@ template<typename S> struct D\n   typedef int T;\n   S foo ();\n \n-  D () { foo ().~T(); }\t\t// { dg-error \"is not of type\" }\n+  D () { foo ().~T(); }\t\t// { dg-error \"10:is not of type\" }\n };\n \n struct Z"}, {"sha": "202182f533707ab7577f652efe9d9ba66b859e71", "filename": "gcc/testsuite/g++.dg/template/pseudodtor3.C", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dc6ed8700c2928d30be6d5d035095b4977e7dad/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpseudodtor3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dc6ed8700c2928d30be6d5d035095b4977e7dad/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpseudodtor3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpseudodtor3.C?ref=2dc6ed8700c2928d30be6d5d035095b4977e7dad", "patch": "@@ -5,21 +5,21 @@ struct A\n {\n   typedef int T;\n   T &foo ();\n-  A () { foo.~T (); }\t// { dg-error \"does not have class type|expected\" }\n+  A () { foo.~T (); }\t// { dg-error \"10:does not have class type|expected\" }\n };\n \n template <typename T> struct B\n {\n   T &foo ();\n-  B () { foo.~T (); }\t// { dg-error \"invalid use of member\" }\n+  B () { foo.~T (); }\t// { dg-error \"10:invalid use of member\" }\n };\n \n B<int> b;\n \n template <typename T, typename S> struct C\n {\n   T t;\n-  C () { t.~S (); }\t// { dg-error \"is not of type\" }\n+  C () { t.~S (); }\t// { dg-error \"10:is not of type\" }\n };\n \n C<int, long int> c;\n@@ -28,7 +28,7 @@ template <typename T> struct D\n {\n   T t;\n   typedef long int U;\n-  D () { t.~U (); }\t// { dg-error \"is not of type\" }\n+  D () { t.~U (); }\t// { dg-error \"10:is not of type\" }\n };\n \n D<int> d;\n@@ -37,7 +37,7 @@ template <typename T> struct E\n {\n   T &foo ();\n   typedef long int U;\n-  E () { foo.~U (); }\t// { dg-error \"is not of type\" }\n+  E () { foo.~U (); }\t// { dg-error \"10:is not of type\" }\n };\n \n E<int> e;"}]}