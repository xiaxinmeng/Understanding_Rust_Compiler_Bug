{"sha": "0f9ca0303ed932c4c2df9b3439aac6b6566a6728", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGY5Y2EwMzAzZWQ5MzJjNGMyZGY5YjM0MzlhYWM2YjY1NjZhNjcyOA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2018-05-29T09:37:43Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-05-29T09:37:43Z"}, "message": "[Ada] Enhance output of discriminants with -gnatR in JSON mode\n\nThis arranges for the Discriminant_Number of discriminants to be output\nby -gnatR in JSON mode.  This number is referenced in symbolic expressions\npresent for offsets and sizes, so its definition is also required for the\nsake of completeness.\n\n2018-05-29  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* repinfo.ads (JSON format): Document new pair for components.\n\t* repinfo.adb (Derived_Discriminant): New function.\n\t(List_Structural_Record_Layout): Add Outer_Ent parameter and pass it\n\tin recursive calls. If the record type is the parent of an extension,\n\tfind and list the derived discriminant from the extension, if any.\n\t(List_Component_Layout): List the Discriminant_Number in JSON mode.\n\t(List_Record_Info): Adjust call to List_Structural_Record_Layout.\n\nFrom-SVN: r260869", "tree": {"sha": "4c1ecbbbb48cfe5d7413446dde0032eee30e788a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c1ecbbbb48cfe5d7413446dde0032eee30e788a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f9ca0303ed932c4c2df9b3439aac6b6566a6728", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f9ca0303ed932c4c2df9b3439aac6b6566a6728", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f9ca0303ed932c4c2df9b3439aac6b6566a6728", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f9ca0303ed932c4c2df9b3439aac6b6566a6728/comments", "author": null, "committer": null, "parents": [{"sha": "1e7629b8a2f2b05194ab8bc3878f6f841666a289", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e7629b8a2f2b05194ab8bc3878f6f841666a289", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e7629b8a2f2b05194ab8bc3878f6f841666a289"}], "stats": {"total": 129, "additions": 108, "deletions": 21}, "files": [{"sha": "21d1324aea30c93d595e727a12c0f9fb76f3c459", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f9ca0303ed932c4c2df9b3439aac6b6566a6728/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f9ca0303ed932c4c2df9b3439aac6b6566a6728/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=0f9ca0303ed932c4c2df9b3439aac6b6566a6728", "patch": "@@ -1,3 +1,13 @@\n+2018-05-29  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* repinfo.ads (JSON format): Document new pair for components.\n+\t* repinfo.adb (Derived_Discriminant): New function.\n+\t(List_Structural_Record_Layout): Add Outer_Ent parameter and pass it\n+\tin recursive calls. If the record type is the parent of an extension,\n+\tfind and list the derived discriminant from the extension, if any.\n+\t(List_Component_Layout): List the Discriminant_Number in JSON mode.\n+\t(List_Record_Info): Adjust call to List_Structural_Record_Layout.\n+\n 2018-05-29  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* doc/gnat_ugn/building_executable_programs_with_gnat.rst (Alphabetical"}, {"sha": "6c3542383726c9707d51531ab3b41d8aedec9da8", "filename": "gcc/ada/repinfo.adb", "status": "modified", "additions": 89, "deletions": 16, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f9ca0303ed932c4c2df9b3439aac6b6566a6728/gcc%2Fada%2Frepinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f9ca0303ed932c4c2df9b3439aac6b6566a6728/gcc%2Fada%2Frepinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frepinfo.adb?ref=0f9ca0303ed932c4c2df9b3439aac6b6566a6728", "patch": "@@ -207,8 +207,8 @@ package body Repinfo is\n \n    function Back_End_Layout return Boolean is\n    begin\n-      --  We have back end layout if the back end has made any entries in the\n-      --  table of GCC expressions, otherwise we have front end layout.\n+      --  We have back-end layout if the back end has made any entries in the\n+      --  table of GCC expressions, otherwise we have front-end layout.\n \n       return Rep_Table.Last > 0;\n    end Back_End_Layout;\n@@ -1069,9 +1069,10 @@ package body Repinfo is\n       --  Internal recursive procedure to display the layout\n \n       procedure List_Structural_Record_Layout\n-        (Ent     : Entity_Id;\n-         Variant : Node_Id := Empty;\n-         Indent  : Natural := 0);\n+        (Ent       : Entity_Id;\n+         Outer_Ent : Entity_Id;\n+         Variant   : Node_Id := Empty;\n+         Indent    : Natural := 0);\n       --  Internal recursive procedure to display the structural layout\n \n       Max_Name_Length : Natural := 0;\n@@ -1205,6 +1206,12 @@ package body Repinfo is\n             Write_Str (Prefix);\n             Write_Str (Name_Buffer (1 .. Name_Len));\n             Write_Line (\"\"\",\");\n+            if Ekind (Ent) = E_Discriminant then\n+               Spaces (Indent);\n+               Write_Str (\"      \"\"discriminant\"\": \");\n+               UI_Write (Discriminant_Number (Ent));\n+               Write_Line (\",\");\n+            end if;\n             Spaces (Indent);\n             Write_Str (\"      \"\"Position\"\": \");\n          else\n@@ -1304,8 +1311,8 @@ package body Repinfo is\n          else\n             Write_Val (Esiz, Paren => not List_Representation_Info_To_JSON);\n \n-            --  If in front end layout mode, then dynamic size is stored\n-            --  in storage units, so renormalize for output\n+            --  If in front-end layout mode, then dynamic size is stored\n+            --  in storage units, so renormalize for output.\n \n             if not Back_End_Layout then\n                Write_Str (\" * \");\n@@ -1416,15 +1423,67 @@ package body Repinfo is\n       -----------------------------------\n \n       procedure List_Structural_Record_Layout\n-        (Ent     : Entity_Id;\n-         Variant : Node_Id := Empty;\n-         Indent  : Natural := 0)\n+        (Ent       : Entity_Id;\n+         Outer_Ent : Entity_Id;\n+         Variant   : Node_Id := Empty;\n+         Indent    : Natural := 0)\n       is\n+\n+         function Derived_Discriminant (Disc : Entity_Id) return Entity_Id;\n+         --  This function assumes that Outer_Ent is an extension of Ent.\n+         --  Disc is a discriminant of Ent that does not itself constrain a\n+         --  discriminant of the parent type of Ent. Return the discriminant\n+         --  of Outer_Ent that ultimately constrains Disc, if any.\n+\n+         ----------------------------\n+         --  Derived_Discriminant  --\n+         ----------------------------\n+\n+         function Derived_Discriminant (Disc : Entity_Id) return Entity_Id is\n+            Corr_Disc, Derived_Disc : Entity_Id;\n+\n+         begin\n+            Derived_Disc := First_Stored_Discriminant (Outer_Ent);\n+\n+            --  Loop over the discriminants of the extension\n+\n+            while Present (Derived_Disc) loop\n+\n+               --  Check if this discriminant constrains another discriminant.\n+               --  If so, find the ultimately constrained discriminant and\n+               --  compare with the original components in the base type.\n+\n+               if Present (Corresponding_Discriminant (Derived_Disc)) then\n+                  Corr_Disc := Corresponding_Discriminant (Derived_Disc);\n+\n+                  while Present (Corresponding_Discriminant (Corr_Disc)) loop\n+                     Corr_Disc := Corresponding_Discriminant (Corr_Disc);\n+                  end loop;\n+\n+                  if Original_Record_Component (Corr_Disc)\n+                                             = Original_Record_Component (Disc)\n+                  then\n+                     return Derived_Disc;\n+                  end if;\n+               end if;\n+\n+               Next_Stored_Discriminant (Derived_Disc);\n+            end loop;\n+\n+            --  Disc is not constrained by a discriminant of Outer_Ent\n+\n+            return Empty;\n+         end Derived_Discriminant;\n+\n+         --  Local declarations\n+\n          Comp       : Node_Id;\n          Comp_List  : Node_Id;\n          Var        : Node_Id;\n          First      : Boolean := True;\n \n+      --  Start of processing for List_Structural_Record_Layout\n+\n       begin\n          --  If we are dealing with a variant, just process the components\n \n@@ -1442,14 +1501,15 @@ package body Repinfo is\n                  Is_Tagged_Type (Ent)\n                    and then\n                  Nkind (Definition) = N_Derived_Type_Definition;\n-               Disc : Entity_Id;\n+               Disc, Listed_Disc : Entity_Id;\n+\n             begin\n                --  If this is an extension, first list the layout of the parent\n                --  and then proceed to the extension part, if any.\n \n                if Is_Extension then\n                   List_Structural_Record_Layout\n-                    (Base_Type (Parent_Subtype (Ent)), Variant, Indent);\n+                    (Base_Type (Parent_Subtype (Ent)), Outer_Ent);\n \n                   if Present (Record_Extension_Part (Definition)) then\n                      Definition := Record_Extension_Part (Definition);\n@@ -1474,7 +1534,20 @@ package body Repinfo is\n                         goto Continue_Disc;\n                      end if;\n \n-                     Get_Decoded_Name_String (Chars (Disc));\n+                     --  If this is the parent type of an extension, retrieve\n+                     --  the derived discriminant from the extension, if any.\n+\n+                     if Ent /= Outer_Ent then\n+                        Listed_Disc := Derived_Discriminant (Disc);\n+\n+                        if No (Listed_Disc) then\n+                           goto Continue_Disc;\n+                        end if;\n+                     else\n+                        Listed_Disc := Disc;\n+                     end if;\n+\n+                     Get_Decoded_Name_String (Chars (Listed_Disc));\n                      Set_Casing (Unit_Casing);\n \n                      if First then\n@@ -1484,7 +1557,7 @@ package body Repinfo is\n                         Write_Line (\",\");\n                      end if;\n \n-                     List_Component_Layout (Disc, Indent => Indent);\n+                     List_Component_Layout (Listed_Disc, Indent => Indent);\n \n                   <<Continue_Disc>>\n                      Next_Stored_Discriminant (Disc);\n@@ -1564,7 +1637,7 @@ package body Repinfo is\n             Spaces (Indent);\n             Write_Str (\"      \"\"record\"\": [\");\n \n-            List_Structural_Record_Layout (Ent, Var, Indent + 4);\n+            List_Structural_Record_Layout (Ent, Outer_Ent, Var, Indent + 4);\n \n             Write_Eol;\n             Spaces (Indent);\n@@ -1597,7 +1670,7 @@ package body Repinfo is\n          Write_Line (\",\");\n          Write_Str (\"  \"\"record\"\": [\");\n \n-         List_Structural_Record_Layout (Ent);\n+         List_Structural_Record_Layout (Ent, Ent);\n \n          Write_Eol;\n          Write_Str (\"  ]\");"}, {"sha": "79f93f9f2e97447690f4c612e1c75338eff8c8e5", "filename": "gcc/ada/repinfo.ads", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f9ca0303ed932c4c2df9b3439aac6b6566a6728/gcc%2Fada%2Frepinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f9ca0303ed932c4c2df9b3439aac6b6566a6728/gcc%2Fada%2Frepinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frepinfo.ads?ref=0f9ca0303ed932c4c2df9b3439aac6b6566a6728", "patch": "@@ -231,15 +231,19 @@ package Repinfo is\n    --  A component is an object whose members are pairs taken from:\n \n    --    \"name\"                 :  string\n+   --    \"discriminant\"         :  number\n    --    \"Position\"             :  numerical expression\n    --    \"First_Bit\"            :  number\n    --    \"Size\"                 :  numerical expression\n \n-   --    The four pairs are present for every component. \"name\" comes from the\n-   --    declaration of the component in the record type and its value is the\n-   --    unqualified Ada name. The other three pairs come from the layout of\n-   --    the type and their value is that of the eponymous attribute set by\n-   --    the language.\n+   --    \"name\" is present for every component and comes from the declaration\n+   --    of the type; its value is the unqualified Ada name. \"discriminant\" is\n+   --    present only if the component is a discriminant, and its value is the\n+   --    ranking of the discriminant in the list of discriminants of the type,\n+   --    i.e. an integer index ranging from 1 to the number of discriminants.\n+   --    The other three pairs are present for every component and come from\n+   --    the layout of the type; their value is the value of the eponymous\n+   --    attribute set by the language.\n \n    --  A variant is an object whose members are pairs taken from:\n "}]}