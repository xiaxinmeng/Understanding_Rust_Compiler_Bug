{"sha": "476c5eb60eb1046af8609079235c2f6db25365f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDc2YzVlYjYwZWIxMDQ2YWY4NjA5MDc5MjM1YzJmNmRiMjUzNjVmNA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2002-11-16T17:52:53Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2002-11-16T17:52:53Z"}, "message": "hard-reg-set.h: Follow spelling conventions.\n\n\t* hard-reg-set.h: Follow spelling conventions.\n\t* real.c: Likewise.\n\t* target.h: Likewise.\n\nFrom-SVN: r59173", "tree": {"sha": "a7291215987853b4d7a4af3680aabe033df4a4df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a7291215987853b4d7a4af3680aabe033df4a4df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/476c5eb60eb1046af8609079235c2f6db25365f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/476c5eb60eb1046af8609079235c2f6db25365f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/476c5eb60eb1046af8609079235c2f6db25365f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/476c5eb60eb1046af8609079235c2f6db25365f4/comments", "author": null, "committer": null, "parents": [{"sha": "af5fb6ab3bd4c53d247340d6dad77471993a168c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af5fb6ab3bd4c53d247340d6dad77471993a168c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af5fb6ab3bd4c53d247340d6dad77471993a168c"}], "stats": {"total": 16, "additions": 11, "deletions": 5}, "files": [{"sha": "2a80b557b5e6f9873fb521977d9db3886f4e7e0d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/476c5eb60eb1046af8609079235c2f6db25365f4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/476c5eb60eb1046af8609079235c2f6db25365f4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=476c5eb60eb1046af8609079235c2f6db25365f4", "patch": "@@ -1,3 +1,9 @@\n+2002-11-16  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* hard-reg-set.h: Follow spelling conventions.\n+\t* real.c: Likewise.\n+\t* target.h: Likewise.\n+\n 2002-11-16  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/i386/x86-64.h (MCOUNT_NAME): Change into string literal."}, {"sha": "0574738fbe5fffc7b94cd0147618aada54d14049", "filename": "gcc/hard-reg-set.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/476c5eb60eb1046af8609079235c2f6db25365f4/gcc%2Fhard-reg-set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/476c5eb60eb1046af8609079235c2f6db25365f4/gcc%2Fhard-reg-set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhard-reg-set.h?ref=476c5eb60eb1046af8609079235c2f6db25365f4", "patch": "@@ -488,7 +488,7 @@ extern int n_non_fixed_regs;\n \n extern const char * reg_names[FIRST_PSEUDO_REGISTER];\n \n-/* Given a hard REGN a FROM mode and a TO mode, return non-zero if\n+/* Given a hard REGN a FROM mode and a TO mode, return nonzero if\n    REGN cannot change modes between the specified modes.  */\n #define REG_CANNOT_CHANGE_MODE_P(REGN, FROM, TO)                          \\\n         (TEST_HARD_REG_BIT                                                \\"}, {"sha": "3bf46370bbbec172857a460486c722f1374add5c", "filename": "gcc/real.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/476c5eb60eb1046af8609079235c2f6db25365f4/gcc%2Freal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/476c5eb60eb1046af8609079235c2f6db25365f4/gcc%2Freal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.c?ref=476c5eb60eb1046af8609079235c2f6db25365f4", "patch": "@@ -410,7 +410,7 @@ cmp_significands (a, b)\n   return 0;\n }\n \n-/* Return true if A is non-zero.  */\n+/* Return true if A is nonzero.  */\n \n static inline int \n cmp_significand_0 (a)\n@@ -1675,8 +1675,8 @@ real_to_decimal (str, r_orig, buf_size, digits, crop_trailing_zeros)\n   /* Round the result.  */\n   if (digit == 5)\n     {\n-      /* Round to nearest.  If R is non-zero there are additional\n-\t non-zero digits to be extracted.  */\n+      /* Round to nearest.  If R is nonzero there are additional\n+\t nonzero digits to be extracted.  */\n       if (cmp_significand_0 (&r))\n \tdigit++;\n       /* Round to even.  */"}, {"sha": "161c3dd02d7355a5e208ee58900670903e468127", "filename": "gcc/target.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/476c5eb60eb1046af8609079235c2f6db25365f4/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/476c5eb60eb1046af8609079235c2f6db25365f4/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=476c5eb60eb1046af8609079235c2f6db25365f4", "patch": "@@ -123,7 +123,7 @@ struct gcc_target\n     /* Output the assembler code for a thunk function.  THUNK_DECL is the\n        declaration for the thunk function itself, FUNCTION is the decl for\n        the target function.  DELTA is an immediate constant offset to be\n-       added to THIS.  If VCALL_OFFSET is non-zero, the word at\n+       added to THIS.  If VCALL_OFFSET is nonzero, the word at\n        *(*this + vcall_offset) should be added to THIS.  */\n     void (* output_mi_thunk) PARAMS ((FILE *file, tree thunk_decl,\n \t\t\t\t      HOST_WIDE_INT delta,"}]}