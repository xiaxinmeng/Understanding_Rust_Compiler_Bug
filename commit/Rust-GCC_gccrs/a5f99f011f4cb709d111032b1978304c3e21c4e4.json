{"sha": "a5f99f011f4cb709d111032b1978304c3e21c4e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTVmOTlmMDExZjRjYjcwOWQxMTEwMzJiMTk3ODMwNGMzZTIxYzRlNA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-12-31T19:18:23Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-12-31T19:18:23Z"}, "message": "Add documentation on uses of common area flags.\n\n(DECL_ERROR_ISSUED): New macro.\n(DECL_NO_STATIC_CHAIN): New macro; currently unused.\n\nFrom-SVN: r10908", "tree": {"sha": "0cbadae5571a656161f38d5039117b3bdabc8c10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0cbadae5571a656161f38d5039117b3bdabc8c10"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a5f99f011f4cb709d111032b1978304c3e21c4e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5f99f011f4cb709d111032b1978304c3e21c4e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5f99f011f4cb709d111032b1978304c3e21c4e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5f99f011f4cb709d111032b1978304c3e21c4e4/comments", "author": null, "committer": null, "parents": [{"sha": "f8b90ffd5c09a2273bca8d3415e0bbf6a926d358", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8b90ffd5c09a2273bca8d3415e0bbf6a926d358", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8b90ffd5c09a2273bca8d3415e0bbf6a926d358"}], "stats": {"total": 115, "additions": 111, "deletions": 4}, "files": [{"sha": "8080288ae52e5c6e9048052259b43d80df1411a4", "filename": "gcc/tree.h", "status": "modified", "additions": 111, "deletions": 4, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5f99f011f4cb709d111032b1978304c3e21c4e4/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5f99f011f4cb709d111032b1978304c3e21c4e4/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=a5f99f011f4cb709d111032b1978304c3e21c4e4", "patch": "@@ -166,9 +166,112 @@ struct tree_common\n   unsigned lang_flag_4 : 1;\n   unsigned lang_flag_5 : 1;\n   unsigned lang_flag_6 : 1;\n-  /* There is room for two more flags.  */\n+  /* There is room for three more flags.  */\n };\n \n+/* The following table lists the uses of each of the above flags and\n+   for which types of nodes they are defined.  Note that expressions\n+   include decls.\n+\n+   addressable_flag:\n+\n+       TREE_ADDRESSABLE in\n+   \t   VAR_DECL, FUNCTION_DECL, CONSTRUCTOR, LABEL_DECL, ..._TYPE\n+\t   IDENTIFIER_NODE\n+\n+   static_flag:\n+\n+       TREE_STATIC in\n+           VAR_DECL, FUNCTION_DECL, CONSTRUCTOR\n+       TREE_NO_UNUSED_WARNING in\n+           CONVERT_EXPR, NOP_EXPR, COMPOUND_EXPR\n+       TREE_VIA_VIRTUAL in\n+           TREE_LIST or TREE_VEC\n+       TREE_CONSTANT_OVERFLOW in\n+           INTEGER_CST, REAL_CST, COMPLEX_CST\n+       TREE_SYMBOL_REFERENCED in\n+           IDENTIFIER_NODE\n+\n+   public_flag:\n+\n+       TREE_OVERFLOW in\n+           INTEGER_CST, REAL_CST, COMPLEX_CST\n+       TREE_PUBLIC in\n+           VAR_DECL or FUNCTION_DECL\n+       TREE_VIA_PUBLIC in\n+           TREE_LIST or TREE_VEC\n+\n+   private_flag:\n+\n+       TREE_VIA_PRIVATE in\n+           TREE_LIST or TREE_VEC\n+       TREE_PRIVATE in\n+           ??? unspecified nodes\n+\n+   protected_flag:\n+\n+       TREE_VIA_PROTECTED in\n+           TREE_LIST\n+       TREE_PROTECTED in\n+           BLOCK\n+\t   ??? unspecified nodes\n+\n+   side_effects_flag:\n+\n+       TREE_SIDE_EFFECTS in\n+           all expressions\n+\n+   volatile_flag:\n+\n+       TREE_THIS_VOLATILE in\n+           all expressions\n+       TYPE_VOLATILE in\n+           ..._TYPE\n+\n+   readonly_flag:\n+\n+       TREE_READONLY in\n+           VAR_DECL, PARM_DECL, FIELD_DECL, ..._REF\n+       ITERATOR_BOUND_P in\n+           VAR_DECL if iterator (C)\n+       TYPE_READONLY in\n+           ..._TYPE\n+\n+   constant_flag:\n+\n+       TREE_CONSTANT in\n+           all expressions\n+\n+   permanent_flag: TREE_PERMANENT in all nodes\n+\n+   unsigned_flag:\n+\n+       TREE_UNSIGNED in\n+           INTEGER_TYPE, ENUMERAL_TYPE, FIELD_DECL\n+       CONSTRUCTOR_TARGET_CLEARED_P in\n+           CONSTRUCTOR\n+       DECL_BUILT_IN_NONANSI in\n+           FUNCTION_DECL\n+       TREE_PARMLIST in\n+           TREE_PARMLIST (C++)\n+\n+   asm_written_flag:\n+\n+       TREE_ASM_WRITTEN in\n+           VAR_DECL, FUNCTION_DECL, RECORD_TYPE, UNION_TYPE, QUAL_UNION_TYPE\n+\t   BLOCK\n+\n+   used_flag:\n+\n+       TREE_USED in\n+           expressions, IDENTIFIER_NODE\n+\n+   raises_flag:\n+\n+       TREE_RAISES in\n+           expressions\n+\n+\t\t\t\t\t\t\t  */\n /* Define accessors for the fields that all tree nodes have\n    (though some fields are not used for all kinds of nodes).  */\n \n@@ -905,12 +1008,16 @@ struct tree_type\n #define TYPE_DECL_SUPPRESS_DEBUG(NODE) ((NODE)->decl.external_flag)\n    \n \n-/* In VAR_DECL and PARM_DECL nodes, nonzero means declared `register'.\n-   In LABEL_DECL nodes, nonzero means that an error message about\n-   jumping into such a binding contour has been printed for this label.  */\n+/* In VAR_DECL and PARM_DECL nodes, nonzero means declared `register'.  */\n #define DECL_REGISTER(NODE) ((NODE)->decl.regdecl_flag)\n+/* In LABEL_DECL nodes, nonzero means that an error message about\n+   jumping into such a binding contour has been printed for this label.  */\n+#define DECL_ERROR_ISSUED(NODE) ((NODE)->decl.regdecl_flag)\n /* In a FIELD_DECL, indicates this field should be bit-packed.  */\n #define DECL_PACKED(NODE) ((NODE)->decl.regdecl_flag)\n+/* In a FUNCTION_DECL with a non-zero DECL_CONTEXT, indicates that a\n+   static chain is not needed.  */\n+#define DECL_NO_STATIC_CHAIN(NODE) ((NODE)->decl.regdecl_flag)\n \n /* Nonzero in a ..._DECL means this variable is ref'd from a nested function.\n    For VAR_DECL nodes, PARM_DECL nodes, and FUNCTION_DECL nodes."}]}