{"sha": "4912a04f8b35fadf65973bffc7037432ff7b7980", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDkxMmEwNGY4YjM1ZmFkZjY1OTczYmZmYzcwMzc0MzJmZjdiNzk4MA==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2020-04-21T12:16:24Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2020-04-29T07:24:07Z"}, "message": "[gcn] Use 'radeon' for the environment variable 'ACC_DEVICE_TYPE'\n\n..., per OpenACC 3.0, A.1.2. \"AMD GPU Targets\".\n\nThis complements commit 6687d13a87c42dddc7d1c7adade38d31ba0d1401 \"Rename\nacc_device_gcn to acc_device_radeon\".\n\n\tlibgomp/\n\t* oacc-init.c (get_openacc_name): Handle 'gcn'.\n\t* testsuite/lib/libgomp.exp\n\t(offload_target_to_openacc_device_type) [amdgcn*]: Return\n\t'radeon'.  Adjust all users.\n\t(check_effective_target_openacc_amdgcn_accel_present): Rename\n\tto...\n\t(check_effective_target_openacc_radeon_accel_present): ... this.\n\tAdjust all users.\n\t(check_effective_target_openacc_amdgcn_accel_selected): Rename to...\n\t(check_effective_target_openacc_radeon_accel_selected): ... this.\n\tAdjust all users.", "tree": {"sha": "15b9899192585644f7db2afe89cbb1d120473292", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/15b9899192585644f7db2afe89cbb1d120473292"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4912a04f8b35fadf65973bffc7037432ff7b7980", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4912a04f8b35fadf65973bffc7037432ff7b7980", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4912a04f8b35fadf65973bffc7037432ff7b7980", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4912a04f8b35fadf65973bffc7037432ff7b7980/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9dc11b6730a8030cfc85f0222cef523c9c5d27c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9dc11b6730a8030cfc85f0222cef523c9c5d27c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9dc11b6730a8030cfc85f0222cef523c9c5d27c"}], "stats": {"total": 108, "additions": 61, "deletions": 47}, "files": [{"sha": "cfe6e0653c92fb0c419662b22ff351458f1e7c19", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4912a04f8b35fadf65973bffc7037432ff7b7980/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4912a04f8b35fadf65973bffc7037432ff7b7980/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=4912a04f8b35fadf65973bffc7037432ff7b7980", "patch": "@@ -1,5 +1,17 @@\n 2020-04-29  Thomas Schwinge  <thomas@codesourcery.com>\n \n+\t* oacc-init.c (get_openacc_name): Handle 'gcn'.\n+\t* testsuite/lib/libgomp.exp\n+\t(offload_target_to_openacc_device_type) [amdgcn*]: Return\n+\t'radeon'.  Adjust all users.\n+\t(check_effective_target_openacc_amdgcn_accel_present): Rename\n+\tto...\n+\t(check_effective_target_openacc_radeon_accel_present): ... this.\n+\tAdjust all users.\n+\t(check_effective_target_openacc_amdgcn_accel_selected): Rename to...\n+\t(check_effective_target_openacc_radeon_accel_selected): ... this.\n+\tAdjust all users.\n+\n \t* testsuite/libgomp.fortran/use_device_ptr-optional-2.f90: Add\n \t'dg-do run'.\n "}, {"sha": "5d786a5a2e7c8ce26cc878c83ba332ca4a3a895e", "filename": "libgomp/oacc-init.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4912a04f8b35fadf65973bffc7037432ff7b7980/libgomp%2Foacc-init.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4912a04f8b35fadf65973bffc7037432ff7b7980/libgomp%2Foacc-init.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Foacc-init.c?ref=4912a04f8b35fadf65973bffc7037432ff7b7980", "patch": "@@ -99,7 +99,9 @@ unknown_device_type_error (acc_device_t invalid_type)\n static const char *\n get_openacc_name (const char *name)\n {\n-  if (strcmp (name, \"nvptx\") == 0)\n+  if (strcmp (name, \"gcn\") == 0)\n+    return \"radeon\";\n+  else if (strcmp (name, \"nvptx\") == 0)\n     return \"nvidia\";\n   else\n     return name;"}, {"sha": "ee5f0e57b19038021f4efdc26ffd24ad9843337a", "filename": "libgomp/testsuite/lib/libgomp.exp", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4912a04f8b35fadf65973bffc7037432ff7b7980/libgomp%2Ftestsuite%2Flib%2Flibgomp.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4912a04f8b35fadf65973bffc7037432ff7b7980/libgomp%2Ftestsuite%2Flib%2Flibgomp.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flib%2Flibgomp.exp?ref=4912a04f8b35fadf65973bffc7037432ff7b7980", "patch": "@@ -319,7 +319,7 @@ proc libgomp_option_proc { option } {\n proc offload_target_to_openacc_device_type { offload_target } {\n     switch -glob $offload_target {\n \tamdgcn* {\n-\t    return \"gcn\"\n+\t    return \"radeon\"\n \t}\n \tdisable {\n \t    return \"host\"\n@@ -483,22 +483,22 @@ proc check_effective_target_hsa_offloading_selected {} {\n     }]\n }\n \n-# Return 1 if at least one AMD GCN board is present.\n+# Return 1 if at least one AMD GPU is accessible.\n \n-proc check_effective_target_openacc_amdgcn_accel_present { } {\n-    return [check_runtime openacc_amdgcn_accel_present {\n+proc check_effective_target_openacc_radeon_accel_present { } {\n+    return [check_runtime openacc_radeon_accel_present {\n \t#include <openacc.h>\n \tint main () {\n \treturn !(acc_get_num_devices (acc_device_radeon) > 0);\n \t}\n     } \"\" ]\n }\n \n-# Return 1 if at least one AMD GCN board is present, and the AMD GCN device\n-# type is selected by default.\n+# Return 1 if at least one AMD GPU is accessible, and the OpenACC 'radeon'\n+# device type is selected.\n \n-proc check_effective_target_openacc_amdgcn_accel_selected { } {\n-    if { ![check_effective_target_openacc_amdgcn_accel_present] } {\n+proc check_effective_target_openacc_radeon_accel_selected { } {\n+    if { ![check_effective_target_openacc_radeon_accel_present] } {\n \treturn 0;\n     }\n     global offload_target"}, {"sha": "7200ec19c476cf5f6a369a34d02fea27bba83202", "filename": "libgomp/testsuite/libgomp.oacc-c++/c++.exp", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4912a04f8b35fadf65973bffc7037432ff7b7980/libgomp%2Ftestsuite%2Flibgomp.oacc-c%2B%2B%2Fc%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4912a04f8b35fadf65973bffc7037432ff7b7980/libgomp%2Ftestsuite%2Flibgomp.oacc-c%2B%2B%2Fc%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c%2B%2B%2Fc%2B%2B.exp?ref=4912a04f8b35fadf65973bffc7037432ff7b7980", "patch": "@@ -88,15 +88,6 @@ if { $lang_test_file_found } {\n \t\tunsupported \"$subdir $offload_target offloading\"\n \t\tcontinue\n \t    }\n-\t    gcn {\n-\t\tif { ![check_effective_target_openacc_amdgcn_accel_present] } {\n-\t\t    # Don't bother; execution testing is going to FAIL.\n-\t\t    untested \"$subdir $offload_target offloading: supported, but hardware not accessible\"\n-\t\t    continue\n-\t\t}\n-\n-\t\tset acc_mem_shared 0\n-\t    }\n \t    host {\n \t\tset acc_mem_shared 1\n \t    }\n@@ -115,6 +106,15 @@ if { $lang_test_file_found } {\n \n \t\tset acc_mem_shared 0\n \t    }\n+\t    radeon {\n+\t\tif { ![check_effective_target_openacc_radeon_accel_present] } {\n+\t\t    # Don't bother; execution testing is going to FAIL.\n+\t\t    untested \"$subdir $offload_target offloading: supported, but hardware not accessible\"\n+\t\t    continue\n+\t\t}\n+\n+\t\tset acc_mem_shared 0\n+\t    }\n \t    default {\n \t\terror \"Unknown OpenACC device type: $openacc_device_type (offload target: $offload_target)\"\n \t    }"}, {"sha": "b046bf2912d6fc881d58fb534dc0bd5ef0affa22", "filename": "libgomp/testsuite/libgomp.oacc-c++/firstprivate-mappings-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4912a04f8b35fadf65973bffc7037432ff7b7980/libgomp%2Ftestsuite%2Flibgomp.oacc-c%2B%2B%2Ffirstprivate-mappings-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4912a04f8b35fadf65973bffc7037432ff7b7980/libgomp%2Ftestsuite%2Flibgomp.oacc-c%2B%2B%2Ffirstprivate-mappings-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c%2B%2B%2Ffirstprivate-mappings-1.C?ref=4912a04f8b35fadf65973bffc7037432ff7b7980", "patch": "@@ -3,7 +3,7 @@\n /* PR middle-end/48591 */\n /* PR other/71064 */\n /* Set to 0 for offloading targets not supporting long double.  */\n-#if defined(ACC_DEVICE_TYPE_nvidia) || defined(ACC_DEVICE_TYPE_gcn)\n+#if defined(ACC_DEVICE_TYPE_nvidia) || defined(ACC_DEVICE_TYPE_radeon)\n # define DO_LONG_DOUBLE 0\n #else\n # define DO_LONG_DOUBLE 1"}, {"sha": "4b1fb5e0e761d32ffbf9da60176fdb2bf3a1084c", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/acc_get_property-gcn.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4912a04f8b35fadf65973bffc7037432ff7b7980/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_get_property-gcn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4912a04f8b35fadf65973bffc7037432ff7b7980/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_get_property-gcn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_get_property-gcn.c?ref=4912a04f8b35fadf65973bffc7037432ff7b7980", "patch": "@@ -3,7 +3,7 @@\n    those obtained through the HSA API. */\n /* { dg-additional-sources acc_get_property-aux.c } */\n /* { dg-additional-options \"-ldl\" } */\n-/* { dg-do run { target openacc_amdgcn_accel_selected } } */\n+/* { dg-do run { target openacc_radeon_accel_selected } } */\n \n #include <dlfcn.h>\n #include <stdint.h>"}, {"sha": "7496426c8fa3c5001b774a870ed0394514e2bbd5", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/asyncwait-nop-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4912a04f8b35fadf65973bffc7037432ff7b7980/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fasyncwait-nop-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4912a04f8b35fadf65973bffc7037432ff7b7980/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fasyncwait-nop-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fasyncwait-nop-1.c?ref=4912a04f8b35fadf65973bffc7037432ff7b7980", "patch": "@@ -26,7 +26,7 @@ main ()\n   acc_device_t d;\n #if defined ACC_DEVICE_TYPE_nvidia\n   d = acc_device_nvidia;\n-#elif defined ACC_DEVICE_TYPE_gcn\n+#elif defined ACC_DEVICE_TYPE_radeon\n   d = acc_device_radeon;\n #elif defined ACC_DEVICE_TYPE_host\n   d = acc_device_host;"}, {"sha": "2cdd2d1525e785ac18498479737212ccab30c762", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/firstprivate-mappings-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4912a04f8b35fadf65973bffc7037432ff7b7980/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Ffirstprivate-mappings-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4912a04f8b35fadf65973bffc7037432ff7b7980/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Ffirstprivate-mappings-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Ffirstprivate-mappings-1.c?ref=4912a04f8b35fadf65973bffc7037432ff7b7980", "patch": "@@ -6,7 +6,7 @@\n /* PR middle-end/48591 */\n /* PR other/71064 */\n /* Set to 0 for offloading targets not supporting long double.  */\n-#if defined(ACC_DEVICE_TYPE_nvidia) || defined(ACC_DEVICE_TYPE_gcn)\n+#if defined(ACC_DEVICE_TYPE_nvidia) || defined(ACC_DEVICE_TYPE_radeon)\n # define DO_LONG_DOUBLE 0\n #else\n # define DO_LONG_DOUBLE 1"}, {"sha": "64f8ab812a63d6e1f70737b9be2e7e1e0f157e01", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/function-not-offloaded.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4912a04f8b35fadf65973bffc7037432ff7b7980/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Ffunction-not-offloaded.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4912a04f8b35fadf65973bffc7037432ff7b7980/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Ffunction-not-offloaded.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Ffunction-not-offloaded.c?ref=4912a04f8b35fadf65973bffc7037432ff7b7980", "patch": "@@ -1,11 +1,11 @@\n /* { dg-do link } */\n-/* { dg-excess-errors \"lto1, mkoffload and lto-wrapper fatal errors\" { target { openacc_nvidia_accel_selected || openacc_amdgcn_accel_selected } } } */\n+/* { dg-excess-errors \"lto1, mkoffload and lto-wrapper fatal errors\" { target { openacc_nvidia_accel_selected || openacc_radeon_accel_selected } } } */\n \n int var;\n #pragma acc declare create (var)\n \n void __attribute__((noinline, noclone))\n-foo () /* { dg-error \"function 'foo' has been referenced in offloaded code but hasn't been marked to be included in the offloaded code\" \"\" { target { openacc_nvidia_accel_selected || openacc_amdgcn_accel_selected } } } */\n+foo () /* { dg-error \"function 'foo' has been referenced in offloaded code but hasn't been marked to be included in the offloaded code\" \"\" { target { openacc_nvidia_accel_selected || openacc_radeon_accel_selected } } } */\n {\n   var++;\n }"}, {"sha": "0273c2bddd74d4b675bd145d176f25d3fe843159", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-auto-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4912a04f8b35fadf65973bffc7037432ff7b7980/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-auto-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4912a04f8b35fadf65973bffc7037432ff7b7980/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-auto-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-auto-1.c?ref=4912a04f8b35fadf65973bffc7037432ff7b7980", "patch": "@@ -1,5 +1,5 @@\n /* AMD GCN does not use 32-lane vectors.\n-   { dg-skip-if \"unsuitable dimensions\" { openacc_amdgcn_accel_selected } { \"*\" } { \"\" } } */\n+   { dg-skip-if \"unsuitable dimensions\" { openacc_radeon_accel_selected } { \"*\" } { \"\" } } */\n \n /* { dg-additional-options \"-fopenacc-dim=32\" } */\n "}, {"sha": "ca7716466558c2eae164aa36adbce08fd2afbc30", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-dim-default.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4912a04f8b35fadf65973bffc7037432ff7b7980/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-dim-default.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4912a04f8b35fadf65973bffc7037432ff7b7980/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-dim-default.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-dim-default.c?ref=4912a04f8b35fadf65973bffc7037432ff7b7980", "patch": "@@ -128,7 +128,7 @@ int test_1 (int gp, int wp, int vp)\n \n int main ()\n {\n-#ifdef ACC_DEVICE_TYPE_gcn\n+#ifdef ACC_DEVICE_TYPE_radeon\n   /* AMD GCN uses the autovectorizer for the vector dimension: the use\n      of a function call in vector-partitioned code in this test is not\n      currently supported.  */"}, {"sha": "9769ee7243085ddbbf82de86c57b71f14935fdd5", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/routine-wv-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4912a04f8b35fadf65973bffc7037432ff7b7980/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Froutine-wv-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4912a04f8b35fadf65973bffc7037432ff7b7980/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Froutine-wv-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Froutine-wv-2.c?ref=4912a04f8b35fadf65973bffc7037432ff7b7980", "patch": "@@ -2,7 +2,7 @@\n #include <openacc.h>\n #include <gomp-constants.h>\n \n-#ifdef ACC_DEVICE_TYPE_gcn\n+#ifdef ACC_DEVICE_TYPE_radeon\n #define NUM_WORKERS 16\n #define NUM_VECTORS 1\n #else"}, {"sha": "5757917126c100aac159c2d7f0d4db5b6af3c9fa", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/tile-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4912a04f8b35fadf65973bffc7037432ff7b7980/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Ftile-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4912a04f8b35fadf65973bffc7037432ff7b7980/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Ftile-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Ftile-1.c?ref=4912a04f8b35fadf65973bffc7037432ff7b7980", "patch": "@@ -1,5 +1,5 @@\n /* AMD GCN does not use 32-lane vectors, so the expected use counts mismatch.\n-   { dg-skip-if \"unsuitable dimensions\" { openacc_amdgcn_accel_selected } { \"*\" } { \"\" } } */\n+   { dg-skip-if \"unsuitable dimensions\" { openacc_radeon_accel_selected } { \"*\" } { \"\" } } */\n \n /* { dg-additional-options \"-fopenacc-dim=32\" } */\n "}, {"sha": "48cbc980731b8bfbcea83e4a8949b159e71d0315", "filename": "libgomp/testsuite/libgomp.oacc-c/c.exp", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4912a04f8b35fadf65973bffc7037432ff7b7980/libgomp%2Ftestsuite%2Flibgomp.oacc-c%2Fc.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4912a04f8b35fadf65973bffc7037432ff7b7980/libgomp%2Ftestsuite%2Flibgomp.oacc-c%2Fc.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c%2Fc.exp?ref=4912a04f8b35fadf65973bffc7037432ff7b7980", "patch": "@@ -51,15 +51,6 @@ foreach offload_target [concat [split $offload_targets \",\"] \"disable\"] {\n \t    unsupported \"$subdir $offload_target offloading\"\n \t    continue\n \t}\n-\tgcn {\n-\t    if { ![check_effective_target_openacc_amdgcn_accel_present] } {\n-\t\t# Don't bother; execution testing is going to FAIL.\n-\t\tuntested \"$subdir $offload_target offloading: supported, but hardware not accessible\"\n-\t\tcontinue\n-\t    }\n-\n-\t    set acc_mem_shared 0\n-\t}\n \thost {\n \t    set acc_mem_shared 1\n \t}\n@@ -78,6 +69,15 @@ foreach offload_target [concat [split $offload_targets \",\"] \"disable\"] {\n \n \t    set acc_mem_shared 0\n \t}\n+\tradeon {\n+\t    if { ![check_effective_target_openacc_radeon_accel_present] } {\n+\t\t# Don't bother; execution testing is going to FAIL.\n+\t\tuntested \"$subdir $offload_target offloading: supported, but hardware not accessible\"\n+\t\tcontinue\n+\t    }\n+\n+\t    set acc_mem_shared 0\n+\t}\n \tdefault {\n \t    error \"Unknown OpenACC device type: $openacc_device_type (offload target: $offload_target)\"\n \t}"}, {"sha": "a3f54d57bc3562263285954b0476500387e82251", "filename": "libgomp/testsuite/libgomp.oacc-fortran/error_stop-1.f", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4912a04f8b35fadf65973bffc7037432ff7b7980/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Ferror_stop-1.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4912a04f8b35fadf65973bffc7037432ff7b7980/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Ferror_stop-1.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Ferror_stop-1.f?ref=4912a04f8b35fadf65973bffc7037432ff7b7980", "patch": "@@ -17,7 +17,7 @@ END PROGRAM MAIN\n ! In gfortran's main program, libfortran's set_options is called - which sets\n ! compiler_options.backtrace = 1 by default.  For an offload libgfortran, this\n ! is never called and, hence, \"Error termination.\" is never printed.  Thus:\n-! { dg-output \"Error termination.*\" { target { ! { openacc_nvidia_accel_selected || openacc_amdgcn_accel_selected } } } }\n+! { dg-output \"Error termination.*\" { target { ! { openacc_nvidia_accel_selected || openacc_radeon_accel_selected } } } }\n !\n ! PR85463:\n ! { dg-output \"libgomp: cuStreamSynchronize error.*\" { target openacc_nvidia_accel_selected } }"}, {"sha": "5d5d20d1bc53df87732e2ae003058cf825da32a7", "filename": "libgomp/testsuite/libgomp.oacc-fortran/error_stop-2.f", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4912a04f8b35fadf65973bffc7037432ff7b7980/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Ferror_stop-2.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4912a04f8b35fadf65973bffc7037432ff7b7980/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Ferror_stop-2.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Ferror_stop-2.f?ref=4912a04f8b35fadf65973bffc7037432ff7b7980", "patch": "@@ -17,7 +17,7 @@ END PROGRAM MAIN\n ! In gfortran's main program, libfortran's set_options is called - which sets\n ! compiler_options.backtrace = 1 by default.  For an offload libgfortran, this\n ! is never called and, hence, \"Error termination.\" is never printed.  Thus:\n-! { dg-output \"Error termination.*\" { target { ! { openacc_nvidia_accel_selected || openacc_amdgcn_accel_selected } } } }\n+! { dg-output \"Error termination.*\" { target { ! { openacc_nvidia_accel_selected || openacc_radeon_accel_selected } } } }\n !\n ! PR85463:\n ! { dg-output \"libgomp: cuStreamSynchronize error.*\" { target openacc_nvidia_accel_selected } }"}, {"sha": "edb063b182bc42127ef84a6357e374c1780bdd7a", "filename": "libgomp/testsuite/libgomp.oacc-fortran/error_stop-3.f", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4912a04f8b35fadf65973bffc7037432ff7b7980/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Ferror_stop-3.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4912a04f8b35fadf65973bffc7037432ff7b7980/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Ferror_stop-3.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Ferror_stop-3.f?ref=4912a04f8b35fadf65973bffc7037432ff7b7980", "patch": "@@ -17,7 +17,7 @@ END PROGRAM MAIN\n ! In gfortran's main program, libfortran's set_options is called - which sets\n ! compiler_options.backtrace = 1 by default.  For an offload libgfortran, this\n ! is never called and, hence, \"Error termination.\" is never printed.  Thus:\n-! { dg-output \"Error termination.*\" { target { ! { openacc_nvidia_accel_selected || openacc_amdgcn_accel_selected } } } }\n+! { dg-output \"Error termination.*\" { target { ! { openacc_nvidia_accel_selected || openacc_radeon_accel_selected } } } }\n !\n ! PR85463:\n ! { dg-output \"libgomp: cuStreamSynchronize error.*\" { target openacc_nvidia_accel_selected } }"}, {"sha": "d60790325053f60277cca560dec9653c8a109c30", "filename": "libgomp/testsuite/libgomp.oacc-fortran/fortran.exp", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4912a04f8b35fadf65973bffc7037432ff7b7980/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Ffortran.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4912a04f8b35fadf65973bffc7037432ff7b7980/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Ffortran.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Ffortran.exp?ref=4912a04f8b35fadf65973bffc7037432ff7b7980", "patch": "@@ -82,20 +82,20 @@ if { $lang_test_file_found } {\n \t\tunsupported \"$subdir $offload_target offloading\"\n \t\tcontinue\n \t    }\n-\t    gcn {\n-\t\tif { ![check_effective_target_openacc_amdgcn_accel_present] } {\n+\t    host {\n+\t\tset acc_mem_shared 1\n+\t    }\n+\t    nvidia {\n+\t\tif { ![check_effective_target_openacc_nvidia_accel_present] } {\n \t\t    # Don't bother; execution testing is going to FAIL.\n \t\t    untested \"$subdir $offload_target offloading: supported, but hardware not accessible\"\n \t\t    continue\n \t\t}\n \n \t\tset acc_mem_shared 0\n \t    }\n-\t    host {\n-\t\tset acc_mem_shared 1\n-\t    }\n-\t    nvidia {\n-\t\tif { ![check_effective_target_openacc_nvidia_accel_present] } {\n+\t    radeon {\n+\t\tif { ![check_effective_target_openacc_radeon_accel_present] } {\n \t\t    # Don't bother; execution testing is going to FAIL.\n \t\t    untested \"$subdir $offload_target offloading: supported, but hardware not accessible\"\n \t\t    continue"}]}