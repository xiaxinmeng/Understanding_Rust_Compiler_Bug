{"sha": "3c75d0f23c01a51a795ffa9c31d1c0b09a38417b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2M3NWQwZjIzYzAxYTUxYTc5NWZmYTljMzFkMWMwYjA5YTM4NDE3Yg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2020-06-02T12:40:26Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-07-15T13:42:43Z"}, "message": "[Ada] Documentation cleanups\n\ngcc/ada/\n\n\t* doc/gnat_ugn/about_this_guide.rst: Remove old section and\n\tupdate for Ada 202x.\n\t* doc/gnat_ugn/getting_started_with_gnat.rst: Add a system\n\trequirements section. Remove obsolete section and minimal\n\trewording on the getting started section.\n\t* gnat_ugn.texi: Regenerate.", "tree": {"sha": "3fa3773bf7089cc346ede2d7da7e0f27ea5e7d2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3fa3773bf7089cc346ede2d7da7e0f27ea5e7d2b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c75d0f23c01a51a795ffa9c31d1c0b09a38417b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c75d0f23c01a51a795ffa9c31d1c0b09a38417b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c75d0f23c01a51a795ffa9c31d1c0b09a38417b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c75d0f23c01a51a795ffa9c31d1c0b09a38417b/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fdf1cebafc95c86c0cf321ce415148366f35225", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fdf1cebafc95c86c0cf321ce415148366f35225", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fdf1cebafc95c86c0cf321ce415148366f35225"}], "stats": {"total": 1439, "additions": 560, "deletions": 879}, "files": [{"sha": "3347626423168471bedf5af6092165a50fbf4a94", "filename": "gcc/ada/doc/gnat_ugn/about_this_guide.rst", "status": "modified", "additions": 2, "deletions": 79, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c75d0f23c01a51a795ffa9c31d1c0b09a38417b/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fabout_this_guide.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c75d0f23c01a51a795ffa9c31d1c0b09a38417b/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fabout_this_guide.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fabout_this_guide.rst?ref=3c75d0f23c01a51a795ffa9c31d1c0b09a38417b", "patch": "@@ -14,13 +14,13 @@ toolset for the full Ada programming language.\n It documents the features of the compiler and tools, and explains\n how to use them to build Ada applications.\n \n-GNAT implements Ada 95, Ada 2005 and Ada 2012, and it may also be\n+GNAT implements Ada 95, Ada 2005, Ada 2012, and Ada 202x, and it may also be\n invoked in Ada 83 compatibility mode.\n By default, GNAT assumes Ada 2012, but you can override with a\n compiler switch (:ref:`Compiling_Different_Versions_of_Ada`)\n to explicitly specify the language version.\n Throughout this manual, references to 'Ada' without a year suffix\n-apply to all Ada 95/2005/2012 versions of the language.\n+apply to all Ada versions of the language, starting with Ada 95.\n \n What This Guide Contains\n ========================\n@@ -71,8 +71,6 @@ What You Should Know before Reading This Guide\n This guide assumes a basic familiarity with the Ada 95 language, as\n described in the International Standard ANSI/ISO/IEC-8652:1995, January\n 1995.\n-It does not require knowledge of the features introduced by Ada 2005\n-or Ada 2012.\n Reference manuals for Ada 95, Ada 2005, and Ada 2012 are included in\n the GNAT documentation package.\n \n@@ -104,81 +102,6 @@ following documents:\n   environment Emacs.\n \n \n-A Note to Readers of Previous Versions of the Manual\n-====================================================\n-\n-In early 2015 the GNAT manuals were transitioned to the\n-reStructuredText (rst) / Sphinx documentation generator technology.\n-During that process the :title:`GNAT User's Guide` was reorganized\n-so that related topics would be described together in the same chapter\n-or appendix.  Here's a summary of the major changes realized in\n-the new document structure.\n-\n-* :ref:`The_GNAT_Compilation_Model` has been extended so that it now covers\n-  the following material:\n-\n-  - The ``gnatname``, ``gnatkr``, and ``gnatchop`` tools\n-  - :ref:`Configuration_Pragmas`\n-  - :ref:`GNAT_and_Libraries`\n-  - :ref:`Conditional_Compilation` including :ref:`Preprocessing_with_gnatprep`\n-    and :ref:`Integrated_Preprocessing`\n-  - :ref:`Generating_Ada_Bindings_for_C_and_C++_headers`\n-  - :ref:`Using_GNAT_Files_with_External_Tools`\n-\n-* :ref:`Building_Executable_Programs_With_GNAT` is a new chapter consolidating\n-  the following content:\n-\n-  - :ref:`The_GNAT_Make_Program_gnatmake`\n-  - :ref:`Compiling_with_GCC`\n-  - :ref:`Binding_with_gnatbind`\n-  - :ref:`Linking_with_gnatlink`\n-  - :ref:`Using_the_GNU_make_Utility`\n-\n-* :ref:`GNAT_Utility_Programs` is a new chapter consolidating the information about several\n-  GNAT tools:\n-\n-  .. only:: PRO or GPL\n-\n-    - :ref:`The_File_Cleanup_Utility_gnatclean`\n-    - :ref:`The_GNAT_Library_Browser_gnatls`\n-    - :ref:`The_Cross-Referencing_Tools_gnatxref_and_gnatfind`\n-    - :ref:`The_Ada_to_HTML_Converter_gnathtml`\n-    - :ref:`The_Ada-to-XML_Converter_gnat2xml`\n-    - :ref:`The_Coding_Standard_Verifier_gnatcheck`\n-    - :ref:`The_GNAT_Metrics_Tool_gnatmetric`\n-    - :ref:`The_GNAT_Pretty_Printer_gnatpp`\n-    - :ref:`The_Body_Stub_Generator_gnatstub`\n-    - :ref:`The_Unit_Test_Generator_gnattest`\n-\n-  .. only:: FSF\n-\n-    - :ref:`The_File_Cleanup_Utility_gnatclean`\n-    - :ref:`The_GNAT_Library_Browser_gnatls`\n-    - :ref:`The_Cross-Referencing_Tools_gnatxref_and_gnatfind`\n-    - :ref:`The_Ada_to_HTML_Converter_gnathtml`\n-\n-* :ref:`GNAT_and_Program_Execution` is a new chapter consolidating the following:\n-\n-  - :ref:`Running_and_Debugging_Ada_Programs`\n-  - :ref:`Profiling`\n-  - :ref:`Improving_Performance`\n-  - :ref:`Overflow Check Handling in GNAT <Overflow_Check_Handling_in_GNAT>`\n-  - :ref:`Performing Dimensionality Analysis in GNAT <Performing_Dimensionality_Analysis_in_GNAT>`\n-  - :ref:`Stack_Related_Facilities`\n-  - :ref:`Memory_Management_Issues`\n-\n-* :ref:`Platform_Specific_Information` is a new appendix consolidating the following:\n-\n-  - :ref:`Run_Time_Libraries`\n-  - :ref:`Microsoft_Windows_Topics`\n-  - :ref:`Mac_OS_Topics`\n-\n-* The *Compatibility and Porting Guide* appendix has been moved to the\n-  :title:`GNAT Reference Manual`. It now includes a section\n-  *Writing Portable Fixed-Point Declarations* which was previously\n-  a separate chapter in the :title:`GNAT User's Guide`.\n-\n-\n Conventions\n ===========\n .. index:: Conventions, typographical"}, {"sha": "9814cb6d57c5cb11d8dec2c8954f681d09ca09b9", "filename": "gcc/ada/doc/gnat_ugn/getting_started_with_gnat.rst", "status": "modified", "additions": 39, "deletions": 89, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c75d0f23c01a51a795ffa9c31d1c0b09a38417b/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgetting_started_with_gnat.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c75d0f23c01a51a795ffa9c31d1c0b09a38417b/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgetting_started_with_gnat.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgetting_started_with_gnat.rst?ref=3c75d0f23c01a51a795ffa9c31d1c0b09a38417b", "patch": "@@ -9,14 +9,43 @@ Getting Started with GNAT\n This chapter describes how to use GNAT's command line interface to build\n executable Ada programs.\n On most platforms a visually oriented Integrated Development Environment\n-is also available, the GNAT Programming Studio (GNAT Studio).\n+is also available: GNAT Studio.\n GNAT Studio offers a graphical \"look and feel\", support for development in\n other programming languages, comprehensive browsing features, and\n many other capabilities.\n-For information on GNAT Studio please refer to\n-:title:`Using the GNAT Programming Studio`.\n+For information on GNAT Studio please refer to the\n+:title:`GNAT Studio documentation`.\n \n \n+.. _System_Requirements:\n+\n+System Requirements\n+===================\n+\n+Even though any machine can run the GNAT toolset and GNAT Studio IDE, in order\n+to get the best experience, we recommend using a machine with as many cores\n+as possible since all individual compilations can run in parallel.\n+A comfortable setup for a compiler server is a machine with 24 physical cores\n+or more, with at least 48 GB of memory (2 GB per core).\n+\n+For a desktop machine, a minimum of 4 cores is recommended (8 preferred),\n+with at least 2GB per core (so 8 to 16GB).\n+\n+In addition, for running and navigating sources in GNAT Studio smoothly, we\n+recommend at least 1.5 GB plus 3 GB of RAM per 1 million source line of code.\n+In other words, we recommend at least 3 GB for for 500K lines of code and\n+7.5 GB for 2 million lines of code.\n+\n+Note that using local and fast drives will also make a difference in terms of\n+build and link time. Network drives such as NFS, SMB, or worse, configuration\n+management filesystems (such as ClearCase dynamic views) should be avoided as\n+much as possible and will produce very degraded performance (typically 2 to 3\n+times slower than on local fast drives). If such slow drives cannot be avoided\n+for accessing the source code, then you should at least configure your project\n+file so that the result of the compilation is stored on a drive local to the\n+machine performing the run. This can be achieved by setting the ``Object_Dir``\n+project file attribute.\n+\n .. _Running_GNAT:\n \n Running GNAT\n@@ -96,24 +125,12 @@ file corresponding to your Ada program. It also generates\n an 'Ada Library Information' file :file:`hello.ali`,\n which contains additional information used to check\n that an Ada program is consistent.\n-To build an executable file,\n-use ``gnatbind`` to bind the program\n-and ``gnatlink`` to link it. The\n-argument to both ``gnatbind`` and ``gnatlink`` is the name of the\n-:file:`ALI` file, but the default extension of :file:`.ali` can\n-be omitted. This means that in the most common case, the argument\n-is simply the name of the main program:\n-\n-.. code-block:: sh\n-\n-  $ gnatbind hello\n-  $ gnatlink hello\n \n-A simpler method of carrying out these steps is to use ``gnatmake``,\n-a master program that invokes all the required\n-compilation, binding and linking tools in the correct order. In particular,\n-``gnatmake`` automatically recompiles any sources that have been\n-modified since they were last compiled, or sources that depend\n+To build an executable file, use either ``gnatmake`` or gprbuild with\n+the name of the main file: these tools are builders that will take care of\n+all the necessary build steps in the correct order.\n+In particular, these builders automatically recompile any sources that have\n+been modified since they were last compiled, or sources that depend\n on such modified sources, so that 'version skew' is avoided.\n \n .. index:: Version skew (avoided by ``gnatmake``)\n@@ -190,17 +207,6 @@ following three separate files:\n *gmain.adb*\n   body of main program\n \n-To build an executable version of\n-this program, we could use four separate steps to compile, bind, and link\n-the program, as follows:\n-\n-.. code-block:: sh\n-\n-  $ gcc -c gmain.adb\n-  $ gcc -c greetings.adb\n-  $ gnatbind gmain\n-  $ gnatlink gmain\n-\n Note that there is no required order of compilation when using GNAT.\n In particular it is perfectly fine to compile the main program first.\n Also, it is not necessary to compile package specs in the case where\n@@ -212,66 +218,10 @@ generation, then use the :switch:`-gnatc` switch:\n \n   $ gcc -c greetings.ads -gnatc\n \n-Although the compilation can be done in separate steps as in the\n-above example, in practice it is almost always more convenient\n-to use the ``gnatmake`` tool. All you need to know in this case\n-is the name of the main program's source file. The effect of the above four\n-commands can be achieved with a single one:\n+Although the compilation can be done in separate steps, in practice it is\n+almost always more convenient to use the ``gnatmake`` or ``gprbuild`` tools:\n \n .. code-block:: sh\n \n   $ gnatmake gmain.adb\n \n-In the next section we discuss the advantages of using ``gnatmake`` in\n-more detail.\n-\n-.. _Using_the_gnatmake_Utility:\n-\n-Using the ``gnatmake`` Utility\n-==============================\n-\n-If you work on a program by compiling single components at a time using\n-``gcc``, you typically keep track of the units you modify. In order to\n-build a consistent system, you compile not only these units, but also any\n-units that depend on the units you have modified.\n-For example, in the preceding case,\n-if you edit :file:`gmain.adb`, you only need to recompile that file. But if\n-you edit :file:`greetings.ads`, you must recompile both\n-:file:`greetings.adb` and :file:`gmain.adb`, because both files contain\n-units that depend on :file:`greetings.ads`.\n-\n-``gnatbind`` will warn you if you forget one of these compilation\n-steps, so that it is impossible to generate an inconsistent program as a\n-result of forgetting to do a compilation. Nevertheless it is tedious and\n-error-prone to keep track of dependencies among units.\n-One approach to handle the dependency-bookkeeping is to use a\n-makefile. However, makefiles present maintenance problems of their own:\n-if the dependencies change as you change the program, you must make\n-sure that the makefile is kept up-to-date manually, which is also an\n-error-prone process.\n-\n-The ``gnatmake`` utility takes care of these details automatically.\n-Invoke it using either one of the following forms:\n-\n-.. code-block:: sh\n-\n-  $ gnatmake gmain.adb\n-  $ gnatmake gmain\n-\n-The argument is the name of the file containing the main program;\n-you may omit the extension. ``gnatmake``\n-examines the environment, automatically recompiles any files that need\n-recompiling, and binds and links the resulting set of object files,\n-generating the executable file, :file:`gmain`.\n-In a large program, it\n-can be extremely helpful to use ``gnatmake``, because working out by hand\n-what needs to be recompiled can be difficult.\n-\n-Note that ``gnatmake`` takes into account all the Ada rules that\n-establish dependencies among units. These include dependencies that result\n-from inlining subprogram bodies, and from\n-generic instantiation. Unlike some other\n-Ada make tools, ``gnatmake`` does not rely on the dependencies that were\n-found by the compiler on a previous compilation, which may possibly\n-be wrong when sources change. ``gnatmake`` determines the exact set of\n-dependencies from scratch each time it is run."}, {"sha": "000d359d17195976ebb60b99bf35e1f72bb560b1", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 519, "deletions": 711, "changes": 1230, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c75d0f23c01a51a795ffa9c31d1c0b09a38417b/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c75d0f23c01a51a795ffa9c31d1c0b09a38417b/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=3c75d0f23c01a51a795ffa9c31d1c0b09a38417b"}]}