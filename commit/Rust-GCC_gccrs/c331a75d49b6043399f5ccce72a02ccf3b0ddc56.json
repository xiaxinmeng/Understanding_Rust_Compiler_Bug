{"sha": "c331a75d49b6043399f5ccce72a02ccf3b0ddc56", "node_id": "C_kwDOANBUbNoAKGMzMzFhNzVkNDliNjA0MzM5OWY1Y2NjZTcyYTAyY2NmM2IwZGRjNTY", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2021-11-18T17:41:43Z"}, "committer": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2021-11-18T17:41:43Z"}, "message": "Fix modref wrt __builtin_assume_aligned\n\n__builtin_assume_aligned has bit contraictionary fnspec description \"1cX \"\nwhich means that parameter 1 is returned but also unused.  PTA code takes\nprecedence to parameter being returned, while modref takes the info that\nparameter is unused.  This patch tweaks modref to follow PTA semantics (as\nsuggested by Richard in the PR log)\n\ngcc/ChangeLog:\n\n2021-11-18  Jan Hubicka  <hubicka@ucw.cz>\n\n\tPR ipa/103266\n\t* ipa-modref.c (modref_eaf_analysis::merge_call_lhs_flags): Unused\n\tparameter may still be returned.\n\t(modref_eaf_analysis::analyze_ssa_name): Call merge_call_lhs_flags\n\teven for unused function args.\n\ngcc/testsuite/ChangeLog:\n\n2021-11-18  Jan Hubicka  <hubicka@ucw.cz>\n\n\tPR ipa/103266\n\t* g++.dg/torture/pr103266.C: New test.", "tree": {"sha": "85a193a5b16480661b27e382ff7b0f54433c177a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/85a193a5b16480661b27e382ff7b0f54433c177a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c331a75d49b6043399f5ccce72a02ccf3b0ddc56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c331a75d49b6043399f5ccce72a02ccf3b0ddc56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c331a75d49b6043399f5ccce72a02ccf3b0ddc56", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c331a75d49b6043399f5ccce72a02ccf3b0ddc56/comments", "author": null, "committer": null, "parents": [{"sha": "4f0a2f5a3ddb1024b885c066a18caae4d733bb6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f0a2f5a3ddb1024b885c066a18caae4d733bb6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f0a2f5a3ddb1024b885c066a18caae4d733bb6c"}], "stats": {"total": 55, "additions": 45, "deletions": 10}, "files": [{"sha": "e5d2b11025ab393a84fcacd04dec00efd1aa5a7b", "filename": "gcc/ipa-modref.c", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c331a75d49b6043399f5ccce72a02ccf3b0ddc56/gcc%2Fipa-modref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c331a75d49b6043399f5ccce72a02ccf3b0ddc56/gcc%2Fipa-modref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-modref.c?ref=c331a75d49b6043399f5ccce72a02ccf3b0ddc56", "patch": "@@ -2033,10 +2033,7 @@ modref_eaf_analysis::merge_call_lhs_flags (gcall *call, int arg,\n \t\t\t\t\t   bool indirect)\n {\n   int index = SSA_NAME_VERSION (name);\n-\n-  /* If value is not returned at all, do nothing.  */\n-  if (!direct && !indirect)\n-    return;\n+  bool returned_directly = false;\n \n   /* If there is no return value, no flags are affected.  */\n   if (!gimple_call_lhs (call))\n@@ -2047,10 +2044,23 @@ modref_eaf_analysis::merge_call_lhs_flags (gcall *call, int arg,\n   if (arg >= 0)\n     {\n       int flags = gimple_call_return_flags (call);\n-      if ((flags & ERF_RETURNS_ARG)\n-\t  && (flags & ERF_RETURN_ARG_MASK) != arg)\n-\treturn;\n+      if (flags & ERF_RETURNS_ARG)\n+\t{\n+\t  if ((flags & ERF_RETURN_ARG_MASK) == arg)\n+\t    returned_directly = true;\n+\t  else\n+\t   return;\n+\t}\n+    }\n+  /* Make ERF_RETURNS_ARG overwrite EAF_UNUSED.  */\n+  if (returned_directly)\n+    {\n+      direct = true;\n+      indirect = false;\n     }\n+  /* If value is not returned at all, do nothing.  */\n+  else if (!direct && !indirect)\n+    return;\n \n   /* If return value is SSA name determine its flags.  */\n   if (TREE_CODE (gimple_call_lhs (call)) == SSA_NAME)\n@@ -2273,11 +2283,13 @@ modref_eaf_analysis::analyze_ssa_name (tree name)\n \t\tif (gimple_call_arg (call, i) == name)\n \t\t  {\n \t\t    int call_flags = gimple_call_arg_flags (call, i);\n-\t\t    if (!ignore_retval && !(call_flags & EAF_UNUSED))\n+\t\t    if (!ignore_retval)\n \t\t      merge_call_lhs_flags\n \t\t\t      (call, i, name,\n-\t\t\t       !(call_flags & EAF_NOT_RETURNED_DIRECTLY),\n-\t\t\t       !(call_flags & EAF_NOT_RETURNED_INDIRECTLY));\n+\t\t\t       !(call_flags & (EAF_NOT_RETURNED_DIRECTLY\n+\t\t\t\t\t       | EAF_UNUSED)),\n+\t\t\t       !(call_flags & (EAF_NOT_RETURNED_INDIRECTLY\n+\t\t\t\t\t       | EAF_UNUSED)));\n \t\t    if (!(ecf_flags & (ECF_CONST | ECF_NOVOPS)))\n \t\t      {\n \t\t\tcall_flags = callee_to_caller_flags"}, {"sha": "d5c13f5097972d3dab1ad6710c0df3f9e457464c", "filename": "gcc/testsuite/g++.dg/torture/pr103266.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c331a75d49b6043399f5ccce72a02ccf3b0ddc56/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr103266.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c331a75d49b6043399f5ccce72a02ccf3b0ddc56/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr103266.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr103266.C?ref=c331a75d49b6043399f5ccce72a02ccf3b0ddc56", "patch": "@@ -0,0 +1,23 @@\n+// { dg-do run }\n+/* { dg-additional-options \"-std=c++14\" } */\n+    typedef unsigned int u32;\n+    typedef unsigned char u8;\n+\n+    static u32 pu8to32(const u8 * p8) __attribute__((noinline));\n+    static u32 pu8to32(const u8 * p8) {\n+      u32 v;\n+    \n+      __builtin_memcpy(&v, __builtin_assume_aligned(p8, 1), sizeof(u32));\n+    \n+      return v;\n+    }\n+    \n+    int main(void) {\n+      // dse1 throws this store away\n+      u8 d[sizeof(u32)] = {\n+          0x07, 0x00, 0x00, 0x07,\n+      };\n+    \n+      if (pu8to32(d) != 0x07000007)\n+        __builtin_trap();\n+    }"}]}