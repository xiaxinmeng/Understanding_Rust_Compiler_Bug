{"sha": "54bddf1d58d0ff4c2625a0310b8ff7853d73b871", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTRiZGRmMWQ1OGQwZmY0YzI2MjVhMDMxMGI4ZmY3ODUzZDczYjg3MQ==", "commit": {"author": {"name": "Ilya Enkovich", "email": "ilya.enkovich@intel.com", "date": "2014-10-03T08:43:21Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2014-10-03T08:43:21Z"}, "message": "lra-constraints.c (inherit_in_ebb): Handle calls with multiple return values.\n\n\ngcc/\n\t* lra-constraints.c (inherit_in_ebb): Handle calls with\n\tmultiple return values.\n\t* caller-save.c (save_call_clobbered_regs): Likewise.\n\nFrom-SVN: r215839", "tree": {"sha": "cb18144264106e9531c4d4df7a79d5ff50b16098", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb18144264106e9531c4d4df7a79d5ff50b16098"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/54bddf1d58d0ff4c2625a0310b8ff7853d73b871", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54bddf1d58d0ff4c2625a0310b8ff7853d73b871", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54bddf1d58d0ff4c2625a0310b8ff7853d73b871", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54bddf1d58d0ff4c2625a0310b8ff7853d73b871/comments", "author": {"login": "ienkovich", "id": 18308708, "node_id": "MDQ6VXNlcjE4MzA4NzA4", "avatar_url": "https://avatars.githubusercontent.com/u/18308708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ienkovich", "html_url": "https://github.com/ienkovich", "followers_url": "https://api.github.com/users/ienkovich/followers", "following_url": "https://api.github.com/users/ienkovich/following{/other_user}", "gists_url": "https://api.github.com/users/ienkovich/gists{/gist_id}", "starred_url": "https://api.github.com/users/ienkovich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ienkovich/subscriptions", "organizations_url": "https://api.github.com/users/ienkovich/orgs", "repos_url": "https://api.github.com/users/ienkovich/repos", "events_url": "https://api.github.com/users/ienkovich/events{/privacy}", "received_events_url": "https://api.github.com/users/ienkovich/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f598c55c56f71b77771190284c852601cf3edd0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f598c55c56f71b77771190284c852601cf3edd0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f598c55c56f71b77771190284c852601cf3edd0d"}], "stats": {"total": 40, "additions": 28, "deletions": 12}, "files": [{"sha": "884495f4ab2cac21c29472771692bef4ca1fd32e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54bddf1d58d0ff4c2625a0310b8ff7853d73b871/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54bddf1d58d0ff4c2625a0310b8ff7853d73b871/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=54bddf1d58d0ff4c2625a0310b8ff7853d73b871", "patch": "@@ -1,3 +1,9 @@\n+2014-10-03  Ilya Enkovich  <ilya.enkovich@intel.com>\n+\n+\t* lra-constraints.c (inherit_in_ebb): Handle calls with\n+\tmultiple return values.\n+\t* caller-save.c (save_call_clobbered_regs): Likewise.\n+\n 2014-10-03  Jakub Jelinek  <jakub@redhat.com>\n \n \t* tree-vect-data-refs.c (vect_permute_load_chain,"}, {"sha": "e28facba7bef07df9233d7b778e25529a6fcab54", "filename": "gcc/caller-save.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54bddf1d58d0ff4c2625a0310b8ff7853d73b871/gcc%2Fcaller-save.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54bddf1d58d0ff4c2625a0310b8ff7853d73b871/gcc%2Fcaller-save.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcaller-save.c?ref=54bddf1d58d0ff4c2625a0310b8ff7853d73b871", "patch": "@@ -879,8 +879,13 @@ save_call_clobbered_regs (void)\n \t\t  if (GET_CODE (pat) == PARALLEL)\n \t\t    pat = XVECEXP (pat, 0, 0);\n \t\t  dest = SET_DEST (pat);\n-\t\t  newpat = gen_rtx_SET (VOIDmode, cheap, copy_rtx (dest));\n-\t\t  chain = insert_one_insn (chain, 0, -1, newpat);\n+\t\t  /* For multiple return values dest is PARALLEL.\n+\t\t     Currently we handle only single return value case.  */\n+\t\t  if (REG_P (dest))\n+\t\t    {\n+\t\t      newpat = gen_rtx_SET (VOIDmode, cheap, copy_rtx (dest));\n+\t\t      chain = insert_one_insn (chain, 0, -1, newpat);\n+\t\t    }\n \t\t}\n \t    }\n           last = chain;"}, {"sha": "f1642f3b390cad715c6f765c9f114fc65a60fb24", "filename": "gcc/lra-constraints.c", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54bddf1d58d0ff4c2625a0310b8ff7853d73b871/gcc%2Flra-constraints.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54bddf1d58d0ff4c2625a0310b8ff7853d73b871/gcc%2Flra-constraints.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.c?ref=54bddf1d58d0ff4c2625a0310b8ff7853d73b871", "patch": "@@ -5348,16 +5348,21 @@ inherit_in_ebb (rtx_insn *head, rtx_insn *tail)\n \t\t  if (GET_CODE (pat) == PARALLEL)\n \t\t    pat = XVECEXP (pat, 0, 0);\n \t\t  dest = SET_DEST (pat);\n-\t\t  start_sequence ();\n-\t\t  emit_move_insn (cheap, copy_rtx (dest));\n-\t\t  restore = get_insns ();\n-\t\t  end_sequence ();\n-\t\t  lra_process_new_insns (curr_insn, NULL, restore,\n-\t\t\t\t\t \"Inserting call parameter restore\");\n-\t\t  /* We don't need to save/restore of the pseudo from\n-\t\t     this call.\t */\n-\t\t  usage_insns[regno].calls_num = calls_num;\n-\t\t  bitmap_set_bit (&check_only_regs, regno);\n+\t\t  /* For multiple return values dest is PARALLEL.\n+\t\t     Currently we handle only single return value case.  */\n+\t\t  if (REG_P (dest))\n+\t\t    {\n+\t\t      start_sequence ();\n+\t\t      emit_move_insn (cheap, copy_rtx (dest));\n+\t\t      restore = get_insns ();\n+\t\t      end_sequence ();\n+\t\t      lra_process_new_insns (curr_insn, NULL, restore,\n+\t\t\t\t\t     \"Inserting call parameter restore\");\n+\t\t      /* We don't need to save/restore of the pseudo from\n+\t\t\t this call.\t */\n+\t\t      usage_insns[regno].calls_num = calls_num;\n+\t\t      bitmap_set_bit (&check_only_regs, regno);\n+\t\t    }\n \t\t}\n \t    }\n \t  to_inherit_num = 0;"}]}