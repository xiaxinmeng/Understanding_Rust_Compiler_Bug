{"sha": "cec0e70b442f27e1eab654061caf454de8e1ea5e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2VjMGU3MGI0NDJmMjdlMWVhYjY1NDA2MWNhZjQ1NGRlOGUxZWE1ZQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2004-02-26T11:35:06Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2004-02-26T11:35:06Z"}, "message": "howto.html, [...]: Fix markup, more <link> tags.\n\n2004-02-25  Jonathan Wakely  <redi@gcc.gnu.org>\n\n\t* docs/html/20_util/howto.html, docs/html/20_util/allocator.html,\n\tdocs/html/ext/howto.html, docs/html/ext/mt_allocator.html:\n\tFix markup, more <link> tags.\n\nFrom-SVN: r78495", "tree": {"sha": "552b5d8a82d84998a1ad86cd473ac16d7a2a0cca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/552b5d8a82d84998a1ad86cd473ac16d7a2a0cca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cec0e70b442f27e1eab654061caf454de8e1ea5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cec0e70b442f27e1eab654061caf454de8e1ea5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cec0e70b442f27e1eab654061caf454de8e1ea5e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cec0e70b442f27e1eab654061caf454de8e1ea5e/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e2a4850db7dcb27d4fed3d486a329650cb0dbd1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e2a4850db7dcb27d4fed3d486a329650cb0dbd1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e2a4850db7dcb27d4fed3d486a329650cb0dbd1"}], "stats": {"total": 49, "additions": 33, "deletions": 16}, "files": [{"sha": "a09a97d4aeebdf802646ebdb08d379dab5e03c50", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cec0e70b442f27e1eab654061caf454de8e1ea5e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cec0e70b442f27e1eab654061caf454de8e1ea5e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=cec0e70b442f27e1eab654061caf454de8e1ea5e", "patch": "@@ -1,3 +1,9 @@\n+2004-02-25  Jonathan Wakely  <redi@gcc.gnu.org>\n+\n+\t* docs/html/20_util/howto.html, docs/html/20_util/allocator.html,\n+\tdocs/html/ext/howto.html, docs/html/ext/mt_allocator.html:\n+\tFix markup, more <link> tags.\n+\n 2004-02-25  Carlo Wood  <carlo@alinoe.com>\n \n \t* bits/demangle.h"}, {"sha": "07e8e2dd909c8bd771dead039c4f60b4e18bdab1", "filename": "libstdc++-v3/docs/html/20_util/allocator.html", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cec0e70b442f27e1eab654061caf454de8e1ea5e/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F20_util%2Fallocator.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cec0e70b442f27e1eab654061caf454de8e1ea5e/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F20_util%2Fallocator.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F20_util%2Fallocator.html?ref=cec0e70b442f27e1eab654061caf454de8e1ea5e", "patch": "@@ -11,6 +11,10 @@\n    <meta name=\"GENERATOR\" content=\"emacs and ten fingers\" />\n    <title>Allocators and allocation</title>\n <link rel=\"StyleSheet\" href=\"../lib3styles.css\" type=\"text/css\" />\n+<link rel=\"Start\" href=\"../documentation.html\" type=\"text/html\"\n+  title=\"GNU C++ Standard Library\" />\n+<link rel=\"Bookmark\" href=\"howto.html\" type=\"text/html\"\n+  title=\"General Utilities\" />\n <link rel=\"Copyright\" href=\"../17_intro/license.html\" type=\"text/html\" />\n </head>\n <body>\n@@ -35,7 +39,7 @@ <h1 class=\"centered\"><a name=\"top\">Allocators and allocation</a></h1>\n </p>\n \n <h3 class=\"left\">\n-  <a name=\"standard requirements\">Standard requirements</a>\n+  <a name=\"standard_requirements\">Standard requirements</a>\n </h3>\n    <p>The C++ standard only gives a few directives in this area:\n    </p>\n@@ -74,7 +78,7 @@ <h3 class=\"left\">\n    </p>\n \n <h3 class=\"left\">\n-  <a name=\"probs possibilities\">Problems and Possibilities</a>\n+  <a name=\"probs_possibilities\">Problems and Possibilities</a>\n </h3>\n    <p>The easiest way of fulfilling the requirements is to call operator new\n       each time a container needs memory, and to call operator delete each\n@@ -256,7 +260,7 @@ <h5 class=\"left\">\n    </p> \n \n <h3 class=\"left\">\n-  <a name=\"ext allocators\">Other allocators</a>\n+  <a name=\"ext_allocators\">Other allocators</a>\n </h3>\n    <p> Several other allocators are provided as part of this\n    implementation.  The location of the extension allocators and their\n@@ -381,7 +385,7 @@ <h3 class=\"left\">\n \n \n <h3 class=\"left\">\n-  <a name=\"using custom allocators\">Using a specific allocator</a>\n+  <a name=\"using_custom_allocators\">Using a specific allocator</a>\n </h3>\n    <p>You can specify different memory management schemes on a\n       per-container basis, by overriding the default\n@@ -397,7 +401,7 @@ <h3 class=\"left\">\n \n \n <h3 class=\"left\">\n-  <a name=\"custom allocators\">Writing custom allocators</a>\n+  <a name=\"custom_allocators\">Writing custom allocators</a>\n </h3>\n    <p> Writing a portable C++ allocator would dictate that the\n    interface would look much like the one specified for <code>"}, {"sha": "4c404595a472f5bca05b6299e7ad460a41b748dc", "filename": "libstdc++-v3/docs/html/20_util/howto.html", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cec0e70b442f27e1eab654061caf454de8e1ea5e/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F20_util%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cec0e70b442f27e1eab654061caf454de8e1ea5e/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F20_util%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F20_util%2Fhowto.html?ref=cec0e70b442f27e1eab654061caf454de8e1ea5e", "patch": "@@ -18,6 +18,8 @@\n   title=\"Diagnostics\" />\n <link rel=\"Next\" href=\"../21_strings/howto.html\" type=\"text/html\"\n   title=\"Strings\" />\n+<link rel=\"Bookmark\" href=\"allocator.html\" type=\"text/html\"\n+  title=\"Allocators and allocation\" />\n <link rel=\"Copyright\" href=\"../17_intro/license.html\" type=\"text/html\" />\n <link rel=\"Help\" href=\"../faq/index.html\" type=\"text/html\" title=\"F.A.Q.\" />\n </head>"}, {"sha": "41fe10b1548d427d9b5ebd1ee725ada5e8797a53", "filename": "libstdc++-v3/docs/html/ext/howto.html", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cec0e70b442f27e1eab654061caf454de8e1ea5e/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cec0e70b442f27e1eab654061caf454de8e1ea5e/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html?ref=cec0e70b442f27e1eab654061caf454de8e1ea5e", "patch": "@@ -18,6 +18,8 @@\n   title=\"Input/Output\" />\n <link rel=\"Bookmark\" href=\"sgiexts.html\" type=\"text/html\"\n   title=\"SGI extensions\" />\n+<link rel=\"Bookmark\" href=\"mt_allocator.html\" type=\"text/html\"\n+  title=\"__mt_alloc\" />\n <link rel=\"Copyright\" href=\"../17_intro/license.html\" type=\"text/html\" />\n </head>\n <body>"}, {"sha": "72727114ac640b50a6af9e9ad1bac732d368b05b", "filename": "libstdc++-v3/docs/html/ext/mt_allocator.html", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cec0e70b442f27e1eab654061caf454de8e1ea5e/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fmt_allocator.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cec0e70b442f27e1eab654061caf454de8e1ea5e/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fmt_allocator.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fmt_allocator.html?ref=cec0e70b442f27e1eab654061caf454de8e1ea5e", "patch": "@@ -5,12 +5,15 @@\n \n <html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n <head>\n-   <meta name=\"AUTHOR\" content=\"Stefan Olsson <stefan@xapa.se>\" />\n+   <meta name=\"AUTHOR\" content=\"Stefan Olsson &lt;stefan@xapa.se&gt;\" />\n    <meta name=\"KEYWORDS\" content=\"c++, libstdc++, g++, allocator, memory\" />\n    <meta name=\"DESCRIPTION\" content=\"Allocators and allocation\" />\n    <meta name=\"GENERATOR\" content=\"emacs and ten fingers\" />\n    <title>A fixed-size, multi-thread optimized allocator</title>\n <link rel=\"StyleSheet\" href=\"../lib3styles.css\" type=\"text/css\" />\n+<link rel=\"Start\" href=\"../documentation.html\" type=\"text/html\"\n+  title=\"GNU C++ Standard Library\" />\n+<link rel=\"Bookmark\" href=\"howto.html\" type=\"text/html\" title=\"Extensions\" />\n <link rel=\"Copyright\" href=\"../17_intro/license.html\" type=\"text/html\" />\n </head>\n <body>\n@@ -61,8 +64,8 @@ <h3 class=\"left\">\n </p>\n \n <pre>\n-  template<typename _Tp> size_t\n-  __mt_alloc<_Tp>::_S_freelist_headroom = 10;\n+  template&lt;typename _Tp&gt; size_t\n+  __mt_alloc&lt;_Tp&gt;::_S_freelist_headroom = 10;\n </pre>\n \n <p>\n@@ -100,7 +103,7 @@ <h3 class=\"left\">\n     as many bin_records in this array as the number of bins that we calculated\n     earlier. I.e., if _S_max_bytes = 128 there will be 8 entries.\n     Each bin_record is then initialized:\n-    - bin_record->first = An array of pointers to block_records. There will be\n+    - bin_record-&gt;first = An array of pointers to block_records. There will be\n       as many block_records pointers as there are maximum number of threads \n       (in a ST application there is only 1 thread, in a MT application there \n       are _S_max_threads).\n@@ -127,7 +130,7 @@ <h3 class=\"left\">\n     created thread and we pop the first entry from this list and saves the\n     pointer to this record in the _S_thread_key variable. The next time \n     we will get the pointer to the thread_record back and we use the \n-    thread_record->thread_id as identification. I.e., the first thread that \n+    thread_record-&gt;thread_id as identification. I.e., the first thread that \n     calls allocate will get the first record in this list and thus be thread\n     number 1 and will then find the pointer to its first free 32 byte block\n     in _S_bin[ 5 ].first[ 1 ]\n@@ -140,12 +143,12 @@ <h3 class=\"left\">\n </p>\n <p>\n   - Initialize the free and used counters of each bin_record:\n-    - bin_record->free = An array of size_t. This keeps track of the number\n+    - bin_record-&gt;free = An array of size_t. This keeps track of the number\n       of blocks on a specific thread's freelist in each bin. I.e., if a thread\n       has 12 32-byte blocks on it's freelists and allocates one of these, this\n       counter would be decreased to 11.\n \n-    - bin_record->used = An array of size_t. This keeps track of the number\n+    - bin_record-&gt;used = An array of size_t. This keeps track of the number\n       of blocks currently in use of this size by this thread. I.e., if a thread\n       has made 678 requests (and no deallocations...) of 32-byte blocks this\n       counter will read 678.\n@@ -155,7 +158,7 @@ <h3 class=\"left\">\n </p>\n <p>\n   - Initialize the mutex of each bin_record:\n-    The bin_record->mutex is used to protect the global freelist. This concept\n+    The bin_record-&gt;mutex is used to protect the global freelist. This concept\n     of a global freelist is explained in more detail in the section\n     \"A multi threaded example\", but basically this mutex is locked whenever \n     a block of memory is retrieved or returned to the global freelist for this\n@@ -194,7 +197,7 @@ <h3 class=\"left\">\n |                |  |\n +----------------+  |\n +----------------+  |\n-| next*          |<-+  (If next == NULL it's the last one on the list)\n+| next*          |&lt;-+  (If next == NULL it's the last one on the list)\n |                |\n |                |\n |                |\n@@ -223,7 +226,7 @@ <h3 class=\"left\">\n </p>\n <p>\n When the application requests memory (calling allocate()) we first look at the\n-requested size and if this is > _S_max_bytes we call new() directly and return.\n+requested size and if this is &gt; _S_max_bytes we call new() directly and return.\n </p>\n <p>\n If the requested size is within limits we start by finding out from which \n@@ -297,7 +300,7 @@ <h3 class=\"left\">\n \n <p>\n When the application requests memory (calling allocate()) we first\n-look at the requested size and if this is > _S_max_bytes we call new()\n+look at the requested size and if this is &gt; _S_max_bytes we call new()\n directly and return.\n </p>\n "}]}