{"sha": "a1b93f8daf8029685f49cd57612d726674b8595c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTFiOTNmOGRhZjgwMjk2ODVmNDljZDU3NjEyZDcyNjY3NGI4NTk1Yw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2015-12-08T17:03:26Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2015-12-08T17:03:26Z"}, "message": "C: fix uninitialized ranges for __alignof__\n\ngcc/c/ChangeLog:\n\t* c-parser.c (c_parser_alignof_expression): Capture location of\n\tclosing parenthesis (if any), or of end of unary expression, and\n\tuse it to build a src_range for the expression.\n\ngcc/testsuite/ChangeLog:\n\t* gcc.dg/plugin/diagnostic-test-expressions-1.c (test_alignof):\n\tNew test function.\n\nFrom-SVN: r231415", "tree": {"sha": "c9a3f87f1a7b95b9736b2d9e05db06d64e2291b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c9a3f87f1a7b95b9736b2d9e05db06d64e2291b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a1b93f8daf8029685f49cd57612d726674b8595c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1b93f8daf8029685f49cd57612d726674b8595c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1b93f8daf8029685f49cd57612d726674b8595c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1b93f8daf8029685f49cd57612d726674b8595c/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "46c6e1e20e58a8e071c163d9f1a8ea179a437fd3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46c6e1e20e58a8e071c163d9f1a8ea179a437fd3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46c6e1e20e58a8e071c163d9f1a8ea179a437fd3"}], "stats": {"total": 54, "additions": 49, "deletions": 5}, "files": [{"sha": "2ba94646e646af97a44c6c97aeb1c1b1bb781c2f", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1b93f8daf8029685f49cd57612d726674b8595c/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1b93f8daf8029685f49cd57612d726674b8595c/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=a1b93f8daf8029685f49cd57612d726674b8595c", "patch": "@@ -1,3 +1,9 @@\n+2015-12-08  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* c-parser.c (c_parser_alignof_expression): Capture location of\n+\tclosing parenthesis (if any), or of end of unary expression, and\n+\tuse it to build a src_range for the expression.\n+\n 2015-12-08  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c/68757"}, {"sha": "4611e5b23582da26e7e065955d379f5006fd890a", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1b93f8daf8029685f49cd57612d726674b8595c/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1b93f8daf8029685f49cd57612d726674b8595c/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=a1b93f8daf8029685f49cd57612d726674b8595c", "patch": "@@ -6853,7 +6853,8 @@ static struct c_expr\n c_parser_alignof_expression (c_parser *parser)\n {\n   struct c_expr expr;\n-  location_t loc = c_parser_peek_token (parser)->location;\n+  location_t start_loc = c_parser_peek_token (parser)->location;\n+  location_t end_loc;\n   tree alignof_spelling = c_parser_peek_token (parser)->value;\n   gcc_assert (c_parser_next_token_is_keyword (parser, RID_ALIGNOF));\n   bool is_c11_alignof = strcmp (IDENTIFIER_POINTER (alignof_spelling),\n@@ -6864,10 +6865,10 @@ c_parser_alignof_expression (c_parser *parser)\n   if (is_c11_alignof)\n     {\n       if (flag_isoc99)\n-\tpedwarn_c99 (loc, OPT_Wpedantic, \"ISO C99 does not support %qE\",\n+\tpedwarn_c99 (start_loc, OPT_Wpedantic, \"ISO C99 does not support %qE\",\n \t\t     alignof_spelling);\n       else\n-\tpedwarn_c99 (loc, OPT_Wpedantic, \"ISO C90 does not support %qE\",\n+\tpedwarn_c99 (start_loc, OPT_Wpedantic, \"ISO C90 does not support %qE\",\n \t\t     alignof_spelling);\n     }\n   c_parser_consume_token (parser);\n@@ -6884,6 +6885,7 @@ c_parser_alignof_expression (c_parser *parser)\n       c_parser_consume_token (parser);\n       loc = c_parser_peek_token (parser)->location;\n       type_name = c_parser_type_name (parser);\n+      end_loc = c_parser_peek_token (parser)->location;\n       c_parser_skip_until_found (parser, CPP_CLOSE_PAREN, \"expected %<)%>\");\n       if (type_name == NULL)\n \t{\n@@ -6910,21 +6912,25 @@ c_parser_alignof_expression (c_parser *parser)\n \t\t\t\t\t    false, is_c11_alignof, 1);\n       ret.original_code = ERROR_MARK;\n       ret.original_type = NULL;\n+      set_c_expr_source_range (&ret, start_loc, end_loc);\n       return ret;\n     }\n   else\n     {\n       struct c_expr ret;\n       expr = c_parser_unary_expression (parser);\n+      end_loc = expr.src_range.m_finish;\n     alignof_expr:\n       mark_exp_read (expr.value);\n       c_inhibit_evaluation_warnings--;\n       in_alignof--;\n-      pedwarn (loc, OPT_Wpedantic, \"ISO C does not allow %<%E (expression)%>\",\n+      pedwarn (start_loc,\n+\t       OPT_Wpedantic, \"ISO C does not allow %<%E (expression)%>\",\n \t       alignof_spelling);\n-      ret.value = c_alignof_expr (loc, expr.value);\n+      ret.value = c_alignof_expr (start_loc, expr.value);\n       ret.original_code = ERROR_MARK;\n       ret.original_type = NULL;\n+      set_c_expr_source_range (&ret, start_loc, end_loc);\n       return ret;\n     }\n }"}, {"sha": "5ff217722c1c196081e7b2145df903daf24475c7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1b93f8daf8029685f49cd57612d726674b8595c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1b93f8daf8029685f49cd57612d726674b8595c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a1b93f8daf8029685f49cd57612d726674b8595c", "patch": "@@ -1,3 +1,8 @@\n+2015-12-08  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/plugin/diagnostic-test-expressions-1.c (test_alignof):\n+\tNew test function.\n+\n 2015-12-08  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c/68757"}, {"sha": "175b2ea017c3ed2b25fe34c913220865cf54d8ec", "filename": "gcc/testsuite/gcc.dg/plugin/diagnostic-test-expressions-1.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1b93f8daf8029685f49cd57612d726674b8595c/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-expressions-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1b93f8daf8029685f49cd57612d726674b8595c/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-expressions-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-expressions-1.c?ref=a1b93f8daf8029685f49cd57612d726674b8595c", "patch": "@@ -568,6 +568,33 @@ void test_builtin_shuffle (v4si a, v4si b, v4si mask)\n    { dg-end-multiline-output \"\" } */\n }\n \n+void test_alignof (int param)\n+{\n+  __emit_expression_range (0, __alignof__ (int) + param );  /* { dg-warning \"range\" } */\n+/* { dg-begin-multiline-output \"\" }\n+   __emit_expression_range (0, __alignof__ (int) + param );\n+                               ~~~~~~~~~~~~~~~~~~^~~~~~~\n+   { dg-end-multiline-output \"\" } */\n+\n+  __emit_expression_range (0,  param + __alignof__ (int) );  /* { dg-warning \"range\" } */\n+/* { dg-begin-multiline-output \"\" }\n+   __emit_expression_range (0,  param + __alignof__ (int) );\n+                                ~~~~~~^~~~~~~~~~~~~~~~~~~\n+   { dg-end-multiline-output \"\" } */\n+\n+  __emit_expression_range (0,  __alignof__ (param) + param );  /* { dg-warning \"range\" } */\n+/* { dg-begin-multiline-output \"\" }\n+   __emit_expression_range (0,  __alignof__ (param) + param );\n+                                ~~~~~~~~~~~~~~~~~~~~^~~~~~~\n+   { dg-end-multiline-output \"\" } */\n+\n+  __emit_expression_range (0,  param + __alignof__ (param) );  /* { dg-warning \"range\" } */\n+/* { dg-begin-multiline-output \"\" }\n+   __emit_expression_range (0,  param + __alignof__ (param) );\n+                                ~~~~~~^~~~~~~~~~~~~~~~~~~~~\n+   { dg-end-multiline-output \"\" } */\n+}\n+\n /* Examples of non-trivial expressions.  ****************************/\n \n extern double sqrt (double x);"}]}