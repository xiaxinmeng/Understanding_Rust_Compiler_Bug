{"sha": "2811f33dcda5d7206dd0443109e17b3981915dbf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjgxMWYzM2RjZGE1ZDcyMDZkZDA0NDMxMDllMTdiMzk4MTkxNWRiZg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2007-11-07T19:27:27Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2007-11-07T19:27:27Z"}, "message": "re PR c++/33501 (Copy constructor assumed to exist for undefined class)\n\n\tPR c++/33501\n\t* call.c (build_over_call): Don't check TREE_ADDRESSABLE\n\ton incomplete type.\n\n\t* g++.dg/warn/incomplete2.C: New test.\n\t* g++.dg/template/incomplete4.C: New test.\n\t* g++.dg/template/incomplete5.C: New test.\n\nFrom-SVN: r129968", "tree": {"sha": "9fdb602cae0616c569c1ffb48632bcdec5790758", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9fdb602cae0616c569c1ffb48632bcdec5790758"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2811f33dcda5d7206dd0443109e17b3981915dbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2811f33dcda5d7206dd0443109e17b3981915dbf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2811f33dcda5d7206dd0443109e17b3981915dbf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2811f33dcda5d7206dd0443109e17b3981915dbf/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5cd537421efdf71458cd1ff72968a9c41eb35b22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cd537421efdf71458cd1ff72968a9c41eb35b22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5cd537421efdf71458cd1ff72968a9c41eb35b22"}], "stats": {"total": 62, "additions": 61, "deletions": 1}, "files": [{"sha": "d62d29df51b349105050cf6813d11831cabc6d91", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2811f33dcda5d7206dd0443109e17b3981915dbf/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2811f33dcda5d7206dd0443109e17b3981915dbf/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2811f33dcda5d7206dd0443109e17b3981915dbf", "patch": "@@ -1,3 +1,9 @@\n+2007-11-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/33501\n+\t* call.c (build_over_call): Don't check TREE_ADDRESSABLE\n+\ton incomplete type.\n+\n 2007-11-06  Douglas Gregor  <doug.gregor@gmail.com>\n \n \tPR c++/33977"}, {"sha": "50ff8b527a77a879191186c2ba9e7441b9ccb642", "filename": "gcc/cp/call.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2811f33dcda5d7206dd0443109e17b3981915dbf/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2811f33dcda5d7206dd0443109e17b3981915dbf/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=2811f33dcda5d7206dd0443109e17b3981915dbf", "patch": "@@ -4993,7 +4993,8 @@ build_over_call (struct z_candidate *cand, int flags)\n \n       /* Don't make a copy here if build_call is going to.  */\n       if (conv->kind == ck_rvalue\n-\t  && !TREE_ADDRESSABLE (complete_type (type)))\n+\t  && COMPLETE_TYPE_P (complete_type (type))\n+\t  && !TREE_ADDRESSABLE (type))\n \tconv = conv->u.next;\n \n       val = convert_like_with_context"}, {"sha": "74a7e3baa7b3cb58befbaeaf6d0329cca41ba2e0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2811f33dcda5d7206dd0443109e17b3981915dbf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2811f33dcda5d7206dd0443109e17b3981915dbf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2811f33dcda5d7206dd0443109e17b3981915dbf", "patch": "@@ -1,3 +1,10 @@\n+2007-11-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/33501\n+\t* g++.dg/warn/incomplete2.C: New test.\n+\t* g++.dg/template/incomplete4.C: New test.\n+\t* g++.dg/template/incomplete5.C: New test.\n+\n 2007-11-07  Olivier Hainque  <hainque@adacore.com>\n \n \t* gnat.dg/max_align.adb: New test."}, {"sha": "6129e0d6fd057b4456cf8c0ee84165fdb1a84a6d", "filename": "gcc/testsuite/g++.dg/template/incomplete4.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2811f33dcda5d7206dd0443109e17b3981915dbf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fincomplete4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2811f33dcda5d7206dd0443109e17b3981915dbf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fincomplete4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fincomplete4.C?ref=2811f33dcda5d7206dd0443109e17b3981915dbf", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/33501\n+// { dg-do compile }\n+\n+class A;\t// { dg-error \"forward declaration\" }\n+\n+template <typename T> struct X\n+{\n+  static int f (T);\n+  static const T &make ();\n+};\n+\n+int\n+main ()\n+{\n+  return X<A>::f (X<A>::make ());\t// { dg-error \"invalid use of incomplete type|initializing argument\" }\n+}"}, {"sha": "9641003ddda62a723ab76fef1ff7ccad0c439f18", "filename": "gcc/testsuite/g++.dg/template/incomplete5.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2811f33dcda5d7206dd0443109e17b3981915dbf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fincomplete5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2811f33dcda5d7206dd0443109e17b3981915dbf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fincomplete5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fincomplete5.C?ref=2811f33dcda5d7206dd0443109e17b3981915dbf", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/33501\n+// { dg-do compile }\n+\n+class A;\t// { dg-error \"forward declaration\" }\n+\n+template <typename T> struct X\n+{\n+  static int f (T);\n+  static const T &make ();\n+  static const bool value = sizeof (f (make ())) == sizeof (int);\t// { dg-error \"invalid use of incomplete type|initializing argument\" }\n+};\n+\n+int\n+main ()\n+{\n+  return X <A>::value;\n+}"}, {"sha": "9fdfcba94791e0ae67ca3d612f6349f89f98a5f6", "filename": "gcc/testsuite/g++.dg/warn/incomplete2.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2811f33dcda5d7206dd0443109e17b3981915dbf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fincomplete2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2811f33dcda5d7206dd0443109e17b3981915dbf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fincomplete2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fincomplete2.C?ref=2811f33dcda5d7206dd0443109e17b3981915dbf", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/33501\n+// { dg-do compile }\n+\n+class A;\t// { dg-error \"forward declaration\" }\n+\n+int f (A);\n+const A &make ();\n+\n+int\n+main ()\n+{\n+  return f (make ());\t// { dg-error \"invalid use of incomplete type|initializing argument\" }\n+}"}]}