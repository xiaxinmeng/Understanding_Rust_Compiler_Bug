{"sha": "6d101824da66bef99004fe3e552bae5a57011e30", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQxMDE4MjRkYTY2YmVmOTkwMDRmZTNlNTUyYmFlNWE1NzAxMWUzMA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-12-11T01:20:59Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-12-11T01:20:59Z"}, "message": "(combinable_i3pat): Bring back to sync with can_combine_p.\n\nFrom-SVN: r13274", "tree": {"sha": "23dedbe184946db96f90932b69d850136ebccfbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/23dedbe184946db96f90932b69d850136ebccfbf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d101824da66bef99004fe3e552bae5a57011e30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d101824da66bef99004fe3e552bae5a57011e30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d101824da66bef99004fe3e552bae5a57011e30", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d101824da66bef99004fe3e552bae5a57011e30/comments", "author": null, "committer": null, "parents": [{"sha": "0d9b0e515b05e95a47769cc42a47d2287bd2dc07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d9b0e515b05e95a47769cc42a47d2287bd2dc07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d9b0e515b05e95a47769cc42a47d2287bd2dc07"}], "stats": {"total": 8, "additions": 6, "deletions": 2}, "files": [{"sha": "683765f407c3d7106cad5d90efbca0368ba0868e", "filename": "gcc/combine.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d101824da66bef99004fe3e552bae5a57011e30/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d101824da66bef99004fe3e552bae5a57011e30/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=6d101824da66bef99004fe3e552bae5a57011e30", "patch": "@@ -1143,13 +1143,17 @@ combinable_i3pat (i3, loc, i2dest, i1dest, i1_not_in_src, pi3dest_killed)\n \t       || (i1dest && reg_overlap_mentioned_p (i1dest, inner_dest))))\n \t  /* This is the same test done in can_combine_p except that we\n \t     allow a hard register with SMALL_REGISTER_CLASSES if SRC is a\n-\t     CALL operation.  */\n+\t     CALL operation.\n+\t     Moreover, we can't test all_adjacent; we don't have to, since\n+\t     this instruction will stay in place, thus we are not considering\n+\t     to increase the lifetime of INNER_DEST.  */\n \t  || (GET_CODE (inner_dest) == REG\n \t      && REGNO (inner_dest) < FIRST_PSEUDO_REGISTER\n \t      && (! HARD_REGNO_MODE_OK (REGNO (inner_dest),\n \t\t\t\t\tGET_MODE (inner_dest))\n #ifdef SMALL_REGISTER_CLASSES\n-\t\t || (GET_CODE (src) != CALL && ! REG_USERVAR_P (inner_dest))\n+\t\t || (GET_CODE (src) != CALL && ! REG_USERVAR_P (inner_dest)\n+\t\t     && FUNCTION_VALUE_REGNO_P (REGNO (inner_dest)))\n #endif\n \t\t  ))\n \t  || (i1_not_in_src && reg_overlap_mentioned_p (i1dest, src)))"}]}