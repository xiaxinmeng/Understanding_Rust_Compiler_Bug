{"sha": "a57193e811093277c5e6ed9520369445cc8dd30e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTU3MTkzZTgxMTA5MzI3N2M1ZTZlZDk1MjAzNjk0NDVjYzhkZDMwZQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2007-07-25T18:00:08Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2007-07-25T18:00:08Z"}, "message": "coretypes.h (const_bitmap, [...]): New.\n\n\t* coretypes.h (const_bitmap, const_rtx, const_rtvec, const_tree):\n\tNew.\n\t\n\t* rtl.h (RTL_CHECK1, RTL_CHECK2, RTL_CHECKC1, RTL_CHECKC2,\n\tRTVEC_ELT, XWINT, XCWINT, XCMWINT, XCNMPRV, BLOCK_SYMBOL_CHECK,\n\tRTL_FLAG_CHECK1, RTL_FLAG_CHECK2, RTL_FLAG_CHECK3,\n\tRTL_FLAG_CHECK4, RTL_FLAG_CHECK5, RTL_FLAG_CHECK6,\n\tRTL_FLAG_CHECK7, RTL_FLAG_CHECK8, LABEL_KIND, SET_LABEL_KIND):\n\tPreserve const-ness of parameters through use of __typeof(),\n\talso constify and tidy.\n\t\n\t* tree.h (TREE_CHECK, TREE_NOT_CHECK, TREE_CHECK2,\n\tTREE_NOT_CHECK2, TREE_CHECK3, TREE_NOT_CHECK3, TREE_CHECK4,\n\tNON_TREE_CHECK4, TREE_CHECK5, TREE_NOT_CHECK5,\n\tCONTAINS_STRUCT_CHECK, TREE_CLASS_CHECK, TREE_RANGE_CHECK,\n\tOMP_CLAUSE_SUBCODE_CHECK, OMP_CLAUSE_RANGE_CHECK, EXPR_CHECK,\n\tGIMPLE_STMT_CHECK, NON_TYPE_CHECK, TREE_VEC_ELT_CHECK,\n\tPHI_NODE_ELT_CHECK, OMP_CLAUSE_ELT_CHECK, TREE_OPERAND_CHECK,\n\tTREE_OPERAND_CHECK_CODE, GIMPLE_STMT_OPERAND_CHECK,\n\tTREE_RTL_OPERAND_CHECK, TREE_CHAIN, TREE_TYPE): Likewise.\n\nFrom-SVN: r126918", "tree": {"sha": "e05a5706a6c7a814b841fc502ea85b51cd8c1c44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e05a5706a6c7a814b841fc502ea85b51cd8c1c44"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a57193e811093277c5e6ed9520369445cc8dd30e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a57193e811093277c5e6ed9520369445cc8dd30e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a57193e811093277c5e6ed9520369445cc8dd30e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a57193e811093277c5e6ed9520369445cc8dd30e/comments", "author": null, "committer": null, "parents": [{"sha": "608063c3e9f54f45579ed601bb71c1e30b3e98aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/608063c3e9f54f45579ed601bb71c1e30b3e98aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/608063c3e9f54f45579ed601bb71c1e30b3e98aa"}], "stats": {"total": 140, "additions": 85, "deletions": 55}, "files": [{"sha": "aee62339d470e752073f743dfb5357c98e8cd8c2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a57193e811093277c5e6ed9520369445cc8dd30e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a57193e811093277c5e6ed9520369445cc8dd30e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a57193e811093277c5e6ed9520369445cc8dd30e", "patch": "@@ -1,3 +1,26 @@\n+2007-07-25  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* coretypes.h (const_bitmap, const_rtx, const_rtvec, const_tree):\n+\tNew.\n+\t\n+\t* rtl.h (RTL_CHECK1, RTL_CHECK2, RTL_CHECKC1, RTL_CHECKC2,\n+\tRTVEC_ELT, XWINT, XCWINT, XCMWINT, XCNMPRV, BLOCK_SYMBOL_CHECK,\n+\tRTL_FLAG_CHECK1, RTL_FLAG_CHECK2, RTL_FLAG_CHECK3,\n+\tRTL_FLAG_CHECK4, RTL_FLAG_CHECK5, RTL_FLAG_CHECK6,\n+\tRTL_FLAG_CHECK7, RTL_FLAG_CHECK8, LABEL_KIND, SET_LABEL_KIND):\n+\tPreserve const-ness of parameters through use of __typeof(),\n+\talso constify and tidy.\n+\t\n+\t* tree.h (TREE_CHECK, TREE_NOT_CHECK, TREE_CHECK2,\n+\tTREE_NOT_CHECK2, TREE_CHECK3, TREE_NOT_CHECK3, TREE_CHECK4,\n+\tNON_TREE_CHECK4, TREE_CHECK5, TREE_NOT_CHECK5,\n+\tCONTAINS_STRUCT_CHECK, TREE_CLASS_CHECK, TREE_RANGE_CHECK,\n+\tOMP_CLAUSE_SUBCODE_CHECK, OMP_CLAUSE_RANGE_CHECK, EXPR_CHECK,\n+\tGIMPLE_STMT_CHECK, NON_TYPE_CHECK, TREE_VEC_ELT_CHECK,\n+\tPHI_NODE_ELT_CHECK, OMP_CLAUSE_ELT_CHECK, TREE_OPERAND_CHECK,\n+\tTREE_OPERAND_CHECK_CODE, GIMPLE_STMT_OPERAND_CHECK,\n+\tTREE_RTL_OPERAND_CHECK, TREE_CHAIN, TREE_TYPE): Likewise.\n+\n 2007-07-25  Julian Brown  <julian@codesourcery.com>\n \t    Mark Shinwell  <shinwell@codesourcery.com>\n "}, {"sha": "ea116f60f9f689b06f1b68d5bf1c53ee13fd93ea", "filename": "gcc/coretypes.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a57193e811093277c5e6ed9520369445cc8dd30e/gcc%2Fcoretypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a57193e811093277c5e6ed9520369445cc8dd30e/gcc%2Fcoretypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoretypes.h?ref=a57193e811093277c5e6ed9520369445cc8dd30e", "patch": "@@ -39,12 +39,16 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n \n struct bitmap_head_def;\n typedef struct bitmap_head_def *bitmap;\n+typedef const struct bitmap_head_def *const_bitmap;\n struct rtx_def;\n typedef struct rtx_def *rtx;\n+typedef const struct rtx_def *const_rtx;\n struct rtvec_def;\n typedef struct rtvec_def *rtvec;\n+typedef const struct rtvec_def *const_rtvec;\n union tree_node;\n typedef union tree_node *tree;\n+typedef const union tree_node *const_tree;\n union section;\n typedef union section section;\n \n@@ -78,8 +82,11 @@ struct _dont_use_rtx_here_;\n struct _dont_use_rtvec_here_;\n union _dont_use_tree_here_;\n #define rtx struct _dont_use_rtx_here_ *\n+#define const_rtx struct _dont_use_rtx_here_ *\n #define rtvec struct _dont_use_rtvec_here *\n+#define const_rtvec struct _dont_use_rtvec_here *\n #define tree union _dont_use_tree_here_ *\n+#define const_tree union _dont_use_tree_here_ *\n \n #endif\n "}, {"sha": "446e9ab8adc55aa34abb5a5d6cb5be20c35a0072", "filename": "gcc/rtl.h", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a57193e811093277c5e6ed9520369445cc8dd30e/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a57193e811093277c5e6ed9520369445cc8dd30e/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=a57193e811093277c5e6ed9520369445cc8dd30e", "patch": "@@ -454,7 +454,7 @@ struct rtvec_def GTY(()) {\n /* The bit with a star outside the statement expr and an & inside is\n    so that N can be evaluated only once.  */\n #define RTL_CHECK1(RTX, N, C1) __extension__\t\t\t\t\\\n-(*({ rtx const _rtx = (RTX); const int _n = (N);\t\t\t\\\n+(*({ __typeof (RTX) const _rtx = (RTX); const int _n = (N);\t\t\\\n      const enum rtx_code _code = GET_CODE (_rtx);\t\t\t\\\n      if (_n < 0 || _n >= GET_RTX_LENGTH (_code))\t\t\t\\\n        rtl_check_failed_bounds (_rtx, _n, __FILE__, __LINE__,\t\t\\\n@@ -465,7 +465,7 @@ struct rtvec_def GTY(()) {\n      &_rtx->u.fld[_n]; }))\n \n #define RTL_CHECK2(RTX, N, C1, C2) __extension__\t\t\t\\\n-(*({ rtx const _rtx = (RTX); const int _n = (N);\t\t\t\\\n+(*({ __typeof (RTX) const _rtx = (RTX); const int _n = (N);\t\t\\\n      const enum rtx_code _code = GET_CODE (_rtx);\t\t\t\\\n      if (_n < 0 || _n >= GET_RTX_LENGTH (_code))\t\t\t\\\n        rtl_check_failed_bounds (_rtx, _n, __FILE__, __LINE__,\t\t\\\n@@ -477,29 +477,29 @@ struct rtvec_def GTY(()) {\n      &_rtx->u.fld[_n]; }))\n \n #define RTL_CHECKC1(RTX, N, C) __extension__\t\t\t\t\\\n-(*({ rtx const _rtx = (RTX); const int _n = (N);\t\t\t\\\n+(*({ __typeof (RTX) const _rtx = (RTX); const int _n = (N);\t\t\\\n      if (GET_CODE (_rtx) != (C))\t\t\t\t\t\\\n        rtl_check_failed_code1 (_rtx, (C), __FILE__, __LINE__,\t\t\\\n \t\t\t       __FUNCTION__);\t\t\t\t\\\n      &_rtx->u.fld[_n]; }))\n \n #define RTL_CHECKC2(RTX, N, C1, C2) __extension__\t\t\t\\\n-(*({ rtx const _rtx = (RTX); const int _n = (N);\t\t\t\\\n+(*({ __typeof (RTX) const _rtx = (RTX); const int _n = (N);\t\t\\\n      const enum rtx_code _code = GET_CODE (_rtx);\t\t\t\\\n      if (_code != (C1) && _code != (C2))\t\t\t\t\\\n        rtl_check_failed_code2 (_rtx, (C1), (C2), __FILE__, __LINE__,\t\\\n \t\t\t       __FUNCTION__); \\\n      &_rtx->u.fld[_n]; }))\n \n #define RTVEC_ELT(RTVEC, I) __extension__\t\t\t\t\\\n-(*({ rtvec const _rtvec = (RTVEC); const int _i = (I);\t\t\t\\\n+(*({ __typeof (RTVEC) const _rtvec = (RTVEC); const int _i = (I);\t\\\n      if (_i < 0 || _i >= GET_NUM_ELEM (_rtvec))\t\t\t\t\\\n        rtvec_check_failed_bounds (_rtvec, _i, __FILE__, __LINE__,\t\\\n \t\t\t\t  __FUNCTION__);\t\t\t\\\n      &_rtvec->elem[_i]; }))\n \n #define XWINT(RTX, N) __extension__\t\t\t\t\t\\\n-(*({ rtx const _rtx = (RTX); const int _n = (N);\t\t\t\\\n+(*({ __typeof (RTX) const _rtx = (RTX); const int _n = (N);\t\t\\\n      const enum rtx_code _code = GET_CODE (_rtx);\t\t\t\\\n      if (_n < 0 || _n >= GET_RTX_LENGTH (_code))\t\t\t\\\n        rtl_check_failed_bounds (_rtx, _n, __FILE__, __LINE__,\t\t\\\n@@ -510,29 +510,29 @@ struct rtvec_def GTY(()) {\n      &_rtx->u.hwint[_n]; }))\n \n #define XCWINT(RTX, N, C) __extension__\t\t\t\t\t\\\n-(*({ rtx const _rtx = (RTX);\t\t\t\t\t\t\\\n+(*({ __typeof (RTX) const _rtx = (RTX);\t\t\t\t\t\\\n      if (GET_CODE (_rtx) != (C))\t\t\t\t\t\\\n        rtl_check_failed_code1 (_rtx, (C), __FILE__, __LINE__,\t\t\\\n \t\t\t       __FUNCTION__);\t\t\t\t\\\n      &_rtx->u.hwint[N]; }))\n \n #define XCMWINT(RTX, N, C, M) __extension__\t\t\t\t\\\n-(*({ rtx const _rtx = (RTX);\t\t\t\t\t\t\\\n+(*({ __typeof (RTX) const _rtx = (RTX);\t\t\t\t\t\\\n      if (GET_CODE (_rtx) != (C) || GET_MODE (_rtx) != (M))\t\t\\\n        rtl_check_failed_code_mode (_rtx, (C), (M), false, __FILE__,\t\\\n \t\t\t\t   __LINE__, __FUNCTION__);\t\t\\\n      &_rtx->u.hwint[N]; }))\n \n #define XCNMPRV(RTX, C, M) __extension__\t\t\t\t\\\n-({ rtx const _rtx = (RTX);\t\t\t\t\t\t\\\n+({ __typeof (RTX) const _rtx = (RTX);\t\t\t\t\t\\\n    if (GET_CODE (_rtx) != (C) || GET_MODE (_rtx) == (M))\t\t\\\n      rtl_check_failed_code_mode (_rtx, (C), (M), true, __FILE__,\t\\\n \t\t\t\t __LINE__, __FUNCTION__);\t\t\\\n    &_rtx->u.rv; })\n \n #define BLOCK_SYMBOL_CHECK(RTX) __extension__\t\t\t\t\\\n-({ rtx const _symbol = (RTX);\t\t\t\t\t\t\\\n-   unsigned int flags = RTL_CHECKC1 (_symbol, 1, SYMBOL_REF).rt_int;\t\\\n+({ __typeof (RTX) const _symbol = (RTX);\t\t\t\t\\\n+   const unsigned int flags = RTL_CHECKC1 (_symbol, 1, SYMBOL_REF).rt_int; \\\n    if ((flags & SYMBOL_FLAG_HAS_BLOCK_INFO) == 0)\t\t\t\\\n      rtl_check_failed_block_symbol (__FILE__, __LINE__,\t\t\t\\\n \t\t\t\t    __FUNCTION__);\t\t\t\\\n@@ -585,37 +585,37 @@ extern void rtvec_check_failed_bounds (rtvec, int, const char *, int,\n \n #if defined ENABLE_RTL_FLAG_CHECKING && (GCC_VERSION >= 2007)\n #define RTL_FLAG_CHECK1(NAME, RTX, C1) __extension__\t\t\t\\\n-({ rtx const _rtx = (RTX);\t\t\t\t\t\t\\\n+({ __typeof (RTX) const _rtx = (RTX);\t\t\t\t\t\\\n    if (GET_CODE(_rtx) != C1)\t\t\t\t\t\t\\\n      rtl_check_failed_flag  (NAME, _rtx, __FILE__, __LINE__,\t\t\\\n \t\t\t     __FUNCTION__);\t\t\t\t\\\n    _rtx; })\n \n #define RTL_FLAG_CHECK2(NAME, RTX, C1, C2) __extension__\t\t\\\n-({ rtx const _rtx = (RTX);\t\t\t\t\t\t\\\n+({ __typeof (RTX) const _rtx = (RTX);\t\t\t\t\t\\\n    if (GET_CODE(_rtx) != C1 && GET_CODE(_rtx) != C2)\t\t\t\\\n      rtl_check_failed_flag  (NAME,_rtx, __FILE__, __LINE__,\t\t\\\n \t\t\t      __FUNCTION__);\t\t\t\t\\\n    _rtx; })\n \n #define RTL_FLAG_CHECK3(NAME, RTX, C1, C2, C3) __extension__\t\t\\\n-({ rtx const _rtx = (RTX);\t\t\t\t\t\t\\\n+({ __typeof (RTX) const _rtx = (RTX);\t\t\t\t\t\\\n    if (GET_CODE(_rtx) != C1 && GET_CODE(_rtx) != C2\t\t\t\\\n        && GET_CODE(_rtx) != C3)\t\t\t\t\t\t\\\n      rtl_check_failed_flag  (NAME, _rtx, __FILE__, __LINE__,\t\t\\\n \t\t\t     __FUNCTION__);\t\t\t\t\\\n    _rtx; })\n \n #define RTL_FLAG_CHECK4(NAME, RTX, C1, C2, C3, C4) __extension__\t\\\n-({ rtx const _rtx = (RTX);\t\t\t\t\t\t\\\n+({ __typeof (RTX) const _rtx = (RTX);\t\t\t\t\t\\\n    if (GET_CODE(_rtx) != C1 && GET_CODE(_rtx) != C2\t\t\t\\\n        && GET_CODE(_rtx) != C3 && GET_CODE(_rtx) != C4)\t\t\t\\\n      rtl_check_failed_flag  (NAME, _rtx, __FILE__, __LINE__,\t\t\\\n \t\t\t      __FUNCTION__);\t\t\t\t\\\n    _rtx; })\n \n #define RTL_FLAG_CHECK5(NAME, RTX, C1, C2, C3, C4, C5) __extension__\t\\\n-({ rtx const _rtx = (RTX);\t\t\t\t\t\t\\\n+({ __typeof (RTX) const _rtx = (RTX);\t\t\t\t\t\\\n    if (GET_CODE(_rtx) != C1 && GET_CODE(_rtx) != C2\t\t\t\\\n        && GET_CODE(_rtx) != C3 && GET_CODE(_rtx) != C4\t\t\t\\\n        && GET_CODE(_rtx) != C5)\t\t\t\t\t\t\\\n@@ -625,7 +625,7 @@ extern void rtvec_check_failed_bounds (rtvec, int, const char *, int,\n \n #define RTL_FLAG_CHECK6(NAME, RTX, C1, C2, C3, C4, C5, C6)\t\t\\\n   __extension__\t\t\t\t\t\t\t\t\\\n-({ rtx const _rtx = (RTX);\t\t\t\t\t\t\\\n+({ __typeof (RTX) const _rtx = (RTX);\t\t\t\t\t\\\n    if (GET_CODE(_rtx) != C1 && GET_CODE(_rtx) != C2\t\t\t\\\n        && GET_CODE(_rtx) != C3 && GET_CODE(_rtx) != C4\t\t\t\\\n        && GET_CODE(_rtx) != C5 && GET_CODE(_rtx) != C6)\t\t\t\\\n@@ -635,7 +635,7 @@ extern void rtvec_check_failed_bounds (rtvec, int, const char *, int,\n \n #define RTL_FLAG_CHECK7(NAME, RTX, C1, C2, C3, C4, C5, C6, C7)\t\t\\\n   __extension__\t\t\t\t\t\t\t\t\\\n-({ rtx const _rtx = (RTX);\t\t\t\t\t\t\\\n+({ __typeof (RTX) const _rtx = (RTX);\t\t\t\t\t\\\n    if (GET_CODE(_rtx) != C1 && GET_CODE(_rtx) != C2\t\t\t\\\n        && GET_CODE(_rtx) != C3 && GET_CODE(_rtx) != C4\t\t\t\\\n        && GET_CODE(_rtx) != C5 && GET_CODE(_rtx) != C6\t\t\t\\\n@@ -646,7 +646,7 @@ extern void rtvec_check_failed_bounds (rtvec, int, const char *, int,\n \n #define RTL_FLAG_CHECK8(NAME, RTX, C1, C2, C3, C4, C5, C6, C7, C8)\t\\\n   __extension__\t\t\t\t\t\t\t\t\\\n-({ rtx const _rtx = (RTX);\t\t\t\t\t\t\\\n+({ __typeof (RTX) const _rtx = (RTX);\t\t\t\t\t\\\n    if (GET_CODE(_rtx) != C1 && GET_CODE(_rtx) != C2\t\t\t\\\n        && GET_CODE(_rtx) != C3 && GET_CODE(_rtx) != C4\t\t\t\\\n        && GET_CODE(_rtx) != C5 && GET_CODE(_rtx) != C6\t\t\t\\\n@@ -910,16 +910,16 @@ enum label_kind\n \n /* Retrieve the kind of LABEL.  */\n #define LABEL_KIND(LABEL) __extension__\t\t\t\t\t\\\n-({ rtx const _label = (LABEL);\t\t\t\t\t\t\\\n+({ __typeof (LABEL) const _label = (LABEL);\t\t\t\t\t\\\n    if (GET_CODE (_label) != CODE_LABEL)\t\t\t\t\t\\\n      rtl_check_failed_flag (\"LABEL_KIND\", _label, __FILE__, __LINE__,\t\\\n \t\t\t    __FUNCTION__);\t\t\t\t\\\n    (enum label_kind) ((_label->jump << 1) | _label->call); })\n \n /* Set the kind of LABEL.  */\n #define SET_LABEL_KIND(LABEL, KIND) do {\t\t\t\t\\\n-   rtx _label = (LABEL);\t\t\t\t\t\t\\\n-   unsigned int _kind = (KIND);\t\t\t\t\t\t\\\n+   rtx const _label = (LABEL);\t\t\t\t\t\t\\\n+   const unsigned int _kind = (KIND);\t\t\t\t\t\\\n    if (GET_CODE (_label) != CODE_LABEL)\t\t\t\t\t\\\n      rtl_check_failed_flag (\"SET_LABEL_KIND\", _label, __FILE__, __LINE__, \\\n \t\t\t    __FUNCTION__);\t\t\t\t\\\n@@ -935,8 +935,8 @@ enum label_kind\n \n /* Set the kind of LABEL.  */\n #define SET_LABEL_KIND(LABEL, KIND) do {\t\t\t\t\\\n-   rtx _label = (LABEL);\t\t\t\t\t\t\\\n-   unsigned int _kind = (KIND);\t\t\t\t\t\t\\\n+   rtx const _label = (LABEL);\t\t\t\t\t\t\\\n+   const unsigned int _kind = (KIND);\t\t\t\t\t\\\n    _label->jump = ((_kind >> 1) & 1);\t\t\t\t\t\\\n    _label->call = (_kind & 1);\t\t\t\t\t\t\\\n } while (0)"}, {"sha": "7916b975fbbd8f1e2888ebe91b18e3b7907c4d9a", "filename": "gcc/tree.h", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a57193e811093277c5e6ed9520369445cc8dd30e/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a57193e811093277c5e6ed9520369445cc8dd30e/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=a57193e811093277c5e6ed9520369445cc8dd30e", "patch": "@@ -601,37 +601,37 @@ enum tree_node_structure_enum {\n #if defined ENABLE_TREE_CHECKING && (GCC_VERSION >= 2007)\n \n #define TREE_CHECK(T, CODE) __extension__\t\t\t\t\\\n-({  const tree __t = (T);\t\t\t\t\t\t\\\n+({  __typeof (T) const __t = (T);\t\t\t\t\t\\\n     if (TREE_CODE (__t) != (CODE))\t\t\t\t\t\\\n       tree_check_failed (__t, __FILE__, __LINE__, __FUNCTION__, \t\\\n \t\t\t (CODE), 0);\t\t\t\t\t\\\n     __t; })\n \n #define TREE_NOT_CHECK(T, CODE) __extension__\t\t\t\t\\\n-({  const tree __t = (T);\t\t\t\t\t\t\\\n+({  __typeof (T) const __t = (T);\t\t\t\t\t\\\n     if (TREE_CODE (__t) == (CODE))\t\t\t\t\t\\\n       tree_not_check_failed (__t, __FILE__, __LINE__, __FUNCTION__,\t\\\n \t\t\t     (CODE), 0);\t\t\t\t\\\n     __t; })\n \n #define TREE_CHECK2(T, CODE1, CODE2) __extension__\t\t\t\\\n-({  const tree __t = (T);\t\t\t\t\t\t\\\n+({  __typeof (T) const __t = (T);\t\t\t\t\t\\\n     if (TREE_CODE (__t) != (CODE1)\t\t\t\t\t\\\n \t&& TREE_CODE (__t) != (CODE2))\t\t\t\t\t\\\n       tree_check_failed (__t, __FILE__, __LINE__, __FUNCTION__,\t\t\\\n  \t\t\t (CODE1), (CODE2), 0);\t\t\t\t\\\n     __t; })\n \n #define TREE_NOT_CHECK2(T, CODE1, CODE2) __extension__\t\t\t\\\n-({  const tree __t = (T);\t\t\t\t\t\t\\\n+({  __typeof (T) const __t = (T);\t\t\t\t\t\\\n     if (TREE_CODE (__t) == (CODE1)\t\t\t\t\t\\\n \t|| TREE_CODE (__t) == (CODE2))\t\t\t\t\t\\\n       tree_not_check_failed (__t, __FILE__, __LINE__, __FUNCTION__,\t\\\n \t\t\t     (CODE1), (CODE2), 0);\t\t\t\\\n     __t; })\n \n #define TREE_CHECK3(T, CODE1, CODE2, CODE3) __extension__\t\t\\\n-({  const tree __t = (T);\t\t\t\t\t\t\\\n+({  __typeof (T) const __t = (T);\t\t\t\t\t\\\n     if (TREE_CODE (__t) != (CODE1)\t\t\t\t\t\\\n \t&& TREE_CODE (__t) != (CODE2)\t\t\t\t\t\\\n \t&& TREE_CODE (__t) != (CODE3))\t\t\t\t\t\\\n@@ -640,7 +640,7 @@ enum tree_node_structure_enum {\n     __t; })\n \n #define TREE_NOT_CHECK3(T, CODE1, CODE2, CODE3) __extension__\t\t\\\n-({  const tree __t = (T);\t\t\t\t\t\t\\\n+({  __typeof (T) const __t = (T);\t\t\t\t\t\\\n     if (TREE_CODE (__t) == (CODE1)\t\t\t\t\t\\\n \t|| TREE_CODE (__t) == (CODE2)\t\t\t\t\t\\\n \t|| TREE_CODE (__t) == (CODE3))\t\t\t\t\t\\\n@@ -649,7 +649,7 @@ enum tree_node_structure_enum {\n     __t; })\n \n #define TREE_CHECK4(T, CODE1, CODE2, CODE3, CODE4) __extension__\t\\\n-({  const tree __t = (T);\t\t\t\t\t\t\\\n+({  __typeof (T) const __t = (T);\t\t\t\t\t\\\n     if (TREE_CODE (__t) != (CODE1)\t\t\t\t\t\\\n \t&& TREE_CODE (__t) != (CODE2)\t\t\t\t\t\\\n \t&& TREE_CODE (__t) != (CODE3)\t\t\t\t\t\\\n@@ -659,7 +659,7 @@ enum tree_node_structure_enum {\n     __t; })\n \n #define NON_TREE_CHECK4(T, CODE1, CODE2, CODE3, CODE4) __extension__\t\\\n-({  const tree __t = (T);\t\t\t\t\t\t\\\n+({  __typeof (T) const __t = (T);\t\t\t\t\t\\\n     if (TREE_CODE (__t) == (CODE1)\t\t\t\t\t\\\n \t|| TREE_CODE (__t) == (CODE2)\t\t\t\t\t\\\n \t|| TREE_CODE (__t) == (CODE3)\t\t\t\t\t\\\n@@ -669,7 +669,7 @@ enum tree_node_structure_enum {\n     __t; })\n \n #define TREE_CHECK5(T, CODE1, CODE2, CODE3, CODE4, CODE5) __extension__\t\\\n-({  const tree __t = (T);\t\t\t\t\t\t\\\n+({  __typeof (T) const __t = (T);\t\t\t\t\t\\\n     if (TREE_CODE (__t) != (CODE1)\t\t\t\t\t\\\n \t&& TREE_CODE (__t) != (CODE2)\t\t\t\t\t\\\n \t&& TREE_CODE (__t) != (CODE3)\t\t\t\t\t\\\n@@ -680,7 +680,7 @@ enum tree_node_structure_enum {\n     __t; })\n \n #define TREE_NOT_CHECK5(T, CODE1, CODE2, CODE3, CODE4, CODE5) __extension__ \\\n-({  const tree __t = (T);\t\t\t\t\t\t\\\n+({  __typeof (T) const __t = (T);\t\t\t\t\t\\\n     if (TREE_CODE (__t) == (CODE1)\t\t\t\t\t\\\n \t|| TREE_CODE (__t) == (CODE2)\t\t\t\t\t\\\n \t|| TREE_CODE (__t) == (CODE3)\t\t\t\t\t\\\n@@ -691,28 +691,28 @@ enum tree_node_structure_enum {\n     __t; })\n \n #define CONTAINS_STRUCT_CHECK(T, STRUCT) __extension__\t\t\t\\\n-({  const tree __t = (T);\t\t\t\t\t\t\\\n+({  __typeof (T) const __t = (T);\t\t\t\t\t\\\n   if (tree_contains_struct[TREE_CODE(__t)][(STRUCT)] != 1)\t\t\\\n       tree_contains_struct_check_failed (__t, (STRUCT), __FILE__, __LINE__,\t\\\n \t\t\t       __FUNCTION__);\t\t\t\t\\\n     __t; })\n \n #define TREE_CLASS_CHECK(T, CLASS) __extension__\t\t\t\\\n-({  const tree __t = (T);\t\t\t\t\t\t\\\n+({  __typeof (T) const __t = (T);\t\t\t\t\t\\\n     if (TREE_CODE_CLASS (TREE_CODE(__t)) != (CLASS))\t\t\t\\\n       tree_class_check_failed (__t, (CLASS), __FILE__, __LINE__,\t\\\n \t\t\t       __FUNCTION__);\t\t\t\t\\\n     __t; })\n \n #define TREE_RANGE_CHECK(T, CODE1, CODE2) __extension__\t\t\t\\\n-({  const tree __t = (T);\t\t\t\t\t\t\\\n+({  __typeof (T) const __t = (T);\t\t\t\t\t\\\n     if (TREE_CODE (__t) < (CODE1) || TREE_CODE (__t) > (CODE2))\t\t\\\n       tree_range_check_failed (__t, __FILE__, __LINE__, __FUNCTION__,\t\\\n \t\t\t       (CODE1), (CODE2));\t\t\t\\\n     __t; })\n \n #define OMP_CLAUSE_SUBCODE_CHECK(T, CODE) __extension__\t\t\t\\\n-({  const tree __t = (T);\t\t\t\t\t\t\\\n+({  __typeof (T) const __t = (T);\t\t\t\t\t\\\n     if (TREE_CODE (__t) != OMP_CLAUSE)\t\t\t\t\t\\\n       tree_check_failed (__t, __FILE__, __LINE__, __FUNCTION__,  \t\\\n \t\t\t OMP_CLAUSE, 0);\t\t\t\t\\\n@@ -722,7 +722,7 @@ enum tree_node_structure_enum {\n     __t; })\n \n #define OMP_CLAUSE_RANGE_CHECK(T, CODE1, CODE2) __extension__\t\t\\\n-({  const tree __t = (T);\t\t\t\t\t\t\\\n+({  __typeof (T) const __t = (T);\t\t\t\t\t\\\n     if (TREE_CODE (__t) != OMP_CLAUSE)\t\t\t\t\t\\\n       tree_check_failed (__t, __FILE__, __LINE__, __FUNCTION__,  \t\\\n \t\t\t OMP_CLAUSE, 0);\t\t\t\t\\\n@@ -734,15 +734,15 @@ enum tree_node_structure_enum {\n \n /* These checks have to be special cased.  */\n #define EXPR_CHECK(T) __extension__\t\t\t\t\t\\\n-({  const tree __t = (T);\t\t\t\t\t\t\\\n+({  __typeof (T) const __t = (T);\t\t\t\t\t\\\n     char const __c = TREE_CODE_CLASS (TREE_CODE (__t));\t\t\t\\\n     if (!IS_EXPR_CODE_CLASS (__c))\t\t\t\t\t\\\n       tree_class_check_failed (__t, tcc_expression, __FILE__, __LINE__,\t\\\n \t\t\t       __FUNCTION__);\t\t\t\t\\\n     __t; })\n \n #define GIMPLE_STMT_CHECK(T) __extension__\t\t\t\t\\\n-({  const tree __t = (T);\t\t\t\t\t\t\\\n+({  __typeof (T) const __t = (T);\t\t\t\t\t\\\n     char const __c = TREE_CODE_CLASS (TREE_CODE (__t));\t\t\t\\\n     if (!IS_GIMPLE_STMT_CODE_CLASS (__c))\t\t\t\t\\\n       tree_class_check_failed (__t, tcc_gimple_stmt, __FILE__, __LINE__,\\\n@@ -751,14 +751,14 @@ enum tree_node_structure_enum {\n \n /* These checks have to be special cased.  */\n #define NON_TYPE_CHECK(T) __extension__\t\t\t\t\t\\\n-({  const tree __t = (T);\t\t\t\t\t\t\\\n+({  __typeof (T) const __t = (T);\t\t\t\t\t\\\n     if (TYPE_P (__t))\t\t\t\t\t\t\t\\\n       tree_not_class_check_failed (__t, tcc_type, __FILE__, __LINE__,\t\\\n \t\t\t\t   __FUNCTION__);\t\t\t\\\n     __t; })\n \n #define TREE_VEC_ELT_CHECK(T, I) __extension__\t\t\t\t\\\n-(*({const tree __t = (T);\t\t\t\t\t\t\\\n+(*({__typeof (T) const __t = (T);\t\t\t\t\t\\\n     const int __i = (I);\t\t\t\t\t\t\\\n     if (TREE_CODE (__t) != TREE_VEC)\t\t\t\t\t\\\n       tree_check_failed (__t, __FILE__, __LINE__, __FUNCTION__,\t\t\\\n@@ -768,9 +768,9 @@ enum tree_node_structure_enum {\n \t\t\t\t __FILE__, __LINE__, __FUNCTION__);\t\\\n     &__t->vec.a[__i]; }))\n \n-#define PHI_NODE_ELT_CHECK(t, i) __extension__\t\t\t\t\\\n-(*({const tree __t = t;\t\t\t\t\t\t\t\\\n-    const int __i = (i);\t\t\t\t\t\t\\\n+#define PHI_NODE_ELT_CHECK(T, I) __extension__\t\t\t\t\\\n+(*({__typeof (T) const __t = (T);\t\t\t\t\t\\\n+    const int __i = (I);\t\t\t\t\t\t\\\n     if (TREE_CODE (__t) != PHI_NODE)\t\t\t\t\t\\\n       tree_check_failed (__t, __FILE__, __LINE__, __FUNCTION__,  \t\\\n \t\t\t PHI_NODE, 0);\t\t\t\t\t\\\n@@ -779,9 +779,9 @@ enum tree_node_structure_enum {\n \t\t\t\t __FILE__, __LINE__, __FUNCTION__);\t\\\n     &__t->phi.a[__i]; }))\n \n-#define OMP_CLAUSE_ELT_CHECK(t, i) __extension__\t\t\t\\\n-(*({const tree __t = t;\t\t\t\t\t\t\t\\\n-    const int __i = (i);\t\t\t\t\t\t\\\n+#define OMP_CLAUSE_ELT_CHECK(T, I) __extension__\t\t\t\\\n+(*({__typeof (T) const __t = (T);\t\t\t\t\t\t\\\n+    const int __i = (I);\t\t\t\t\t\t\\\n     if (TREE_CODE (__t) != OMP_CLAUSE)\t\t\t\t\t\\\n       tree_check_failed (__t, __FILE__, __LINE__, __FUNCTION__,  \t\\\n \t\t\t OMP_CLAUSE, 0);\t\t\t\t\\\n@@ -792,7 +792,7 @@ enum tree_node_structure_enum {\n \n /* Special checks for TREE_OPERANDs.  */\n #define TREE_OPERAND_CHECK(T, I) __extension__\t\t\t\t\\\n-(*({const tree __t = EXPR_CHECK (T);\t\t\t\t\t\\\n+(*({__typeof (T) const __t = EXPR_CHECK (T);\t\t\t\t\\\n     const int __i = (I);\t\t\t\t\t\t\\\n     if (GIMPLE_TUPLE_P (__t))\t\t\t\t\t\t\\\n       gcc_unreachable ();\t\t\t\t\t\t\\\n@@ -802,7 +802,7 @@ enum tree_node_structure_enum {\n     &__t->exp.operands[__i]; }))\n \n #define TREE_OPERAND_CHECK_CODE(T, CODE, I) __extension__\t\t\\\n-(*({const tree __t = (T);\t\t\t\t\t\t\\\n+(*({__typeof (T) const __t = (T);\t\t\t\t\t\\\n     const int __i = (I);\t\t\t\t\t\t\\\n     if (TREE_CODE (__t) != CODE)\t\t\t\t\t\\\n       tree_check_failed (__t, __FILE__, __LINE__, __FUNCTION__, (CODE), 0);\\\n@@ -813,7 +813,7 @@ enum tree_node_structure_enum {\n \n /* Special checks for GIMPLE_STMT_OPERANDs.  */\n #define GIMPLE_STMT_OPERAND_CHECK(T, I) __extension__\t\t\t\\\n-(*({const tree __t = GIMPLE_STMT_CHECK (T);\t\t\t\t\\\n+(*({__typeof (T) const __t = GIMPLE_STMT_CHECK (T);\t\t\t\\\n     const int __i = (I);\t\t\t\t\t\t\\\n     if (__i < 0 || __i >= TREE_OPERAND_LENGTH (__t))\t\t\t\\\n       tree_operand_check_failed (__i, __t,\t\t\t\t\\\n@@ -822,7 +822,7 @@ enum tree_node_structure_enum {\n \n #define TREE_RTL_OPERAND_CHECK(T, CODE, I) __extension__\t\t\\\n (*(rtx *)\t\t\t\t\t\t\t\t\\\n- ({const tree __t = (T);\t\t\t\t\t\t\\\n+ ({__typeof (T) const __t = (T);\t\t\t\t\t\\\n     const int __i = (I);\t\t\t\t\t\t\\\n     if (TREE_CODE (__t) != (CODE))\t\t\t\t\t\\\n       tree_check_failed (__t, __FILE__, __LINE__, __FUNCTION__, (CODE), 0); \\\n@@ -841,7 +841,7 @@ enum tree_node_structure_enum {\n    are chained together.  */\n \n #define TREE_CHAIN(NODE) __extension__ \\\n-(*({const tree __t = (NODE);\t\t\t\t\t\\\n+(*({__typeof (NODE) const __t = (NODE);\t\t\t\t\\\n     if (GIMPLE_TUPLE_P (__t))\t\t\t\t\t\\\n       gcc_unreachable ();\t\t\t\t\t\\\n     &__t->common.chain; }))\n@@ -851,7 +851,7 @@ enum tree_node_structure_enum {\n    In ARRAY_TYPE nodes, this is the type of the elements.\n    In VECTOR_TYPE nodes, this is the type of the elements.  */\n #define TREE_TYPE(NODE) __extension__ \\\n-(*({const tree __t = (NODE);\t\t\t\t\t\\\n+(*({__typeof (NODE) const __t = (NODE);\t\t\t\t\t\\\n     if (GIMPLE_TUPLE_P (__t))\t\t\t\t\t\\\n       gcc_unreachable ();\t\t\t\t\t\\\n     &__t->common.type; }))"}]}