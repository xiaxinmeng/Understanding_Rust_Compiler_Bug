{"sha": "93313b94fe18f3c3de4f24f5bb3fafb4639f1c7e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTMzMTNiOTRmZTE4ZjNjM2RlNGYyNGY1YmIzZmFmYjQ2MzlmMWM3ZQ==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2019-10-02T00:08:40Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2019-10-02T00:08:40Z"}, "message": "Handle :: tokens in C for C2x.\n\nAs part of adding [[]]-style attributes, C2x adds the token :: for use\nin scoped attribute names.\n\nThis patch adds corresponding support for that token in C to GCC.  The\ntoken is supported both for C2x and for older gnu* standards (on the\nbasis that extensions are normally supported in older gnu* versions;\npeople will expect to be able to use [[]] attributes, before C2x is\nthe default, without needing to use -std=gnu2x).\n\nThere are no cases in older C standards where the token : can be\nfollowed by a token starting with : in syntactically valid sources;\nthe only cases the :: token could break in older standard C thus are\nones involving concatenation of pp-tokens where the result does not\nend up as tokens (e.g., gets stringized).  In GNU C extensions, the\nmain case where :: might appear in existing sources is in asm\nstatements, and the C parser is thus made to handle it like two\nconsecutive : tokens, which the C++ parser already does.  A limited\ntest of various positionings of :: in asm statements is added to the\ntestsuite (in particular, to cover the syntax error when :: means too\nmany colons but a single : would be OK), but existing tests cover a\nvariety of styles there anyway.\n\nTechnically there are cases in Objective-C and OpenMP for which this\nalso changes how previously valid code is lexed: the objc-selector-arg\nsyntax allows multiple consecutive : tokens (although I don't think\nthey are particularly useful there), while OpenMP syntax includes\narray section syntax such as [:] which, before :: was a token, could\nalso be written as [::> (there might be other OpenMP cases potentially\naffected, I didn't check all the OpenMP syntax in detail).  I don't\nthink either of those cases affects the basis for supporting the ::\ntoken in all -std=gnu* modes, or that there is any obvious need to\nspecial-case handling of CPP_SCOPE tokens for those constructs the way\nthere is for asm statements.\n\ncpp_avoid_paste, which determines when spaces need adding between\ntokens in preprocessed output where there wouldn't otherwise be\nwhitespace between them (e.g. if stringized), already inserts space\nbetween : and : unconditionally, rather than only for C++, so no\nchange is needed there (but a C2x test is added that such space is\nindeed inserted).\n\nBootstrapped with no regressions on x86-64-pc-linux-gnu.\n\ngcc/c:\n\t* c-parser.c (c_parser_asm_statement): Handle CPP_SCOPE like two\n\tCPP_COLON tokens.\n\ngcc/testsuite:\n\t* gcc.dg/asm-scope-1.c, gcc.dg/cpp/c11-scope-1.c,\n\tgcc.dg/cpp/c17-scope-1.c, gcc.dg/cpp/c2x-scope-1.c,\n\tgcc.dg/cpp/c2x-scope-2.c, gcc.dg/cpp/c90-scope-1.c,\n\tgcc.dg/cpp/c94-scope-1.c, gcc.dg/cpp/c99-scope-1.c,\n\tgcc.dg/cpp/gnu11-scope-1.c, gcc.dg/cpp/gnu17-scope-1.c,\n\tgcc.dg/cpp/gnu89-scope-1.c, gcc.dg/cpp/gnu99-scope-1.c: New tests.\n\nlibcpp:\n\t* include/cpplib.h (struct cpp_options): Add member scope.\n\t* init.c (struct lang_flags, lang_defaults): Likewise.\n\t(cpp_set_lang): Set scope member of pfile.\n\t* lex.c (_cpp_lex_direct): Test CPP_OPTION (pfile, scope) not\n\tCPP_OPTION (pfile, cplusplus) for creating CPP_SCOPE tokens.\n\nFrom-SVN: r276434", "tree": {"sha": "cf9d4a06b2f7e0356d2c66aaa9d1e6dd410e538a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf9d4a06b2f7e0356d2c66aaa9d1e6dd410e538a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/93313b94fe18f3c3de4f24f5bb3fafb4639f1c7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93313b94fe18f3c3de4f24f5bb3fafb4639f1c7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93313b94fe18f3c3de4f24f5bb3fafb4639f1c7e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93313b94fe18f3c3de4f24f5bb3fafb4639f1c7e/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9c9a142b49d069c5b7c24d47b07756e9d591956", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9c9a142b49d069c5b7c24d47b07756e9d591956", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9c9a142b49d069c5b7c24d47b07756e9d591956"}], "stats": {"total": 217, "additions": 187, "deletions": 30}, "files": [{"sha": "0f263f78e4b2d18b5691e3187e99078b7ed4b2e0", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93313b94fe18f3c3de4f24f5bb3fafb4639f1c7e/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93313b94fe18f3c3de4f24f5bb3fafb4639f1c7e/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=93313b94fe18f3c3de4f24f5bb3fafb4639f1c7e", "patch": "@@ -1,3 +1,8 @@\n+2019-10-02  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-parser.c (c_parser_asm_statement): Handle CPP_SCOPE like two\n+\tCPP_COLON tokens.\n+\n 2019-10-01  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* c-objc-common.c (useful_aka_type_p): New function."}, {"sha": "6957297b3a52e5fb8ea0c29781321c7a0b1098ac", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93313b94fe18f3c3de4f24f5bb3fafb4639f1c7e/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93313b94fe18f3c3de4f24f5bb3fafb4639f1c7e/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=93313b94fe18f3c3de4f24f5bb3fafb4639f1c7e", "patch": "@@ -6411,7 +6411,9 @@ c_parser_for_statement (c_parser *parser, bool ivdep, unsigned short unroll,\n \n    The form with asm-goto-operands is valid if and only if the\n    asm-qualifier-list contains goto, and is the only allowed form in that case.\n-   Duplicate asm-qualifiers are not allowed.  */\n+   Duplicate asm-qualifiers are not allowed.\n+\n+   The :: token is considered equivalent to two consecutive : tokens.  */\n \n static tree\n c_parser_asm_statement (c_parser *parser)\n@@ -6509,17 +6511,28 @@ c_parser_asm_statement (c_parser *parser)\n   nsections = 3 + is_goto;\n   for (section = 0; section < nsections; ++section)\n     {\n-      if (!c_parser_require (parser, CPP_COLON,\n-\t\t\t     is_goto\n-\t\t\t     ? G_(\"expected %<:%>\")\n-\t\t\t     : G_(\"expected %<:%> or %<)%>\"),\n-\t\t\t     UNKNOWN_LOCATION, is_goto))\n+      if (c_parser_next_token_is (parser, CPP_SCOPE))\n+\t{\n+\t  ++section;\n+\t  if (section == nsections)\n+\t    {\n+\t      c_parser_error (parser, \"expected %<)%>\");\n+\t      goto error_close_paren;\n+\t    }\n+\t  c_parser_consume_token (parser);\n+\t}\n+      else if (!c_parser_require (parser, CPP_COLON,\n+\t\t\t\t  is_goto\n+\t\t\t\t  ? G_(\"expected %<:%>\")\n+\t\t\t\t  : G_(\"expected %<:%> or %<)%>\"),\n+\t\t\t\t  UNKNOWN_LOCATION, is_goto))\n \tgoto error_close_paren;\n \n       /* Once past any colon, we're no longer a simple asm.  */\n       simple = false;\n \n       if ((!c_parser_next_token_is (parser, CPP_COLON)\n+\t   && !c_parser_next_token_is (parser, CPP_SCOPE)\n \t   && !c_parser_next_token_is (parser, CPP_CLOSE_PAREN))\n \t  || section == 3)\n \tswitch (section)"}, {"sha": "834ee454f9aa1180b816e53c1480345401459b9e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93313b94fe18f3c3de4f24f5bb3fafb4639f1c7e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93313b94fe18f3c3de4f24f5bb3fafb4639f1c7e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=93313b94fe18f3c3de4f24f5bb3fafb4639f1c7e", "patch": "@@ -1,3 +1,12 @@\n+2019-10-02  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/asm-scope-1.c, gcc.dg/cpp/c11-scope-1.c,\n+\tgcc.dg/cpp/c17-scope-1.c, gcc.dg/cpp/c2x-scope-1.c,\n+\tgcc.dg/cpp/c2x-scope-2.c, gcc.dg/cpp/c90-scope-1.c,\n+\tgcc.dg/cpp/c94-scope-1.c, gcc.dg/cpp/c99-scope-1.c,\n+\tgcc.dg/cpp/gnu11-scope-1.c, gcc.dg/cpp/gnu17-scope-1.c,\n+\tgcc.dg/cpp/gnu89-scope-1.c, gcc.dg/cpp/gnu99-scope-1.c: New tests.\n+\n 2019-10-01  David Malcolm  <dmalcolm@redhat.com>\n \n \t* gcc.dg/plugin/diagnostic_group_plugin.c (test_begin_group_cb):"}, {"sha": "6439104e5791cf5f709ed7290cd8383e1fbe9051", "filename": "gcc/testsuite/gcc.dg/asm-scope-1.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93313b94fe18f3c3de4f24f5bb3fafb4639f1c7e/gcc%2Ftestsuite%2Fgcc.dg%2Fasm-scope-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93313b94fe18f3c3de4f24f5bb3fafb4639f1c7e/gcc%2Ftestsuite%2Fgcc.dg%2Fasm-scope-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fasm-scope-1.c?ref=93313b94fe18f3c3de4f24f5bb3fafb4639f1c7e", "patch": "@@ -0,0 +1,27 @@\n+/* Test :: token handling in asm.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu2x\" } */\n+\n+void\n+f (void)\n+{\n+  asm (\"\");\n+  asm (\"\" : );\n+  asm (\"\" : :);\n+  asm (\"\" ::);\n+  asm (\"\" : : :);\n+  asm (\"\" :: :);\n+  asm (\"\" : ::);\n+  asm goto (\"\" : : : : lab);\n+  asm goto (\"\" :: : : lab);\n+  asm goto (\"\" : :: : lab);\n+  asm goto (\"\" : : :: lab);\n+  asm goto (\"\" :: :: lab);\n+ lab: ;\n+  /* Test errors when :: is at the end of asm and only one : allowed.  */\n+  asm (\"\" : : ::); /* { dg-error \"expected\" } */\n+  asm (\"\" :: ::); /* { dg-error \"expected\" } */\n+  asm goto (\"\" : : : :: lab); /* { dg-error \"expected\" } */\n+  asm goto (\"\" :: : :: lab); /* { dg-error \"expected\" } */\n+  asm goto (\"\" : :: :: lab); /* { dg-error \"expected\" } */\n+}"}, {"sha": "2db05163c913d8585d500a0a1680e361f677dee0", "filename": "gcc/testsuite/gcc.dg/cpp/c11-scope-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93313b94fe18f3c3de4f24f5bb3fafb4639f1c7e/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fc11-scope-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93313b94fe18f3c3de4f24f5bb3fafb4639f1c7e/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fc11-scope-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fc11-scope-1.c?ref=93313b94fe18f3c3de4f24f5bb3fafb4639f1c7e", "patch": "@@ -0,0 +1,8 @@\n+/* Test :: token not in C11.  */\n+/* { dg-do preprocess } */\n+/* { dg-options \"-std=c11 -pedantic-errors\" } */\n+\n+#define CONCAT(x, y) x ## y\n+\n+CONCAT (:, :) /* { dg-error \"does not give a valid preprocessing token\" } */\n+CONCAT (::, >)"}, {"sha": "b5b366b87915f3db6b41d5dabf37abb17d395bff", "filename": "gcc/testsuite/gcc.dg/cpp/c17-scope-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93313b94fe18f3c3de4f24f5bb3fafb4639f1c7e/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fc17-scope-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93313b94fe18f3c3de4f24f5bb3fafb4639f1c7e/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fc17-scope-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fc17-scope-1.c?ref=93313b94fe18f3c3de4f24f5bb3fafb4639f1c7e", "patch": "@@ -0,0 +1,8 @@\n+/* Test :: token not in C17.  */\n+/* { dg-do preprocess } */\n+/* { dg-options \"-std=c17 -pedantic-errors\" } */\n+\n+#define CONCAT(x, y) x ## y\n+\n+CONCAT (:, :) /* { dg-error \"does not give a valid preprocessing token\" } */\n+CONCAT (::, >)"}, {"sha": "8337ba70d635674db13aeabcc99ea67eb12e8ed4", "filename": "gcc/testsuite/gcc.dg/cpp/c2x-scope-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93313b94fe18f3c3de4f24f5bb3fafb4639f1c7e/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fc2x-scope-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93313b94fe18f3c3de4f24f5bb3fafb4639f1c7e/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fc2x-scope-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fc2x-scope-1.c?ref=93313b94fe18f3c3de4f24f5bb3fafb4639f1c7e", "patch": "@@ -0,0 +1,8 @@\n+/* Test :: token in C2x.  */\n+/* { dg-do preprocess } */\n+/* { dg-options \"-std=c2x -pedantic-errors\" } */\n+\n+#define CONCAT(x, y) x ## y\n+\n+CONCAT (:, :)\n+CONCAT (::, >) /* { dg-error \"does not give a valid preprocessing token\" } */"}, {"sha": "73b36e70f5034b9e54694f29c68f6daa3e9edf60", "filename": "gcc/testsuite/gcc.dg/cpp/c2x-scope-2.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93313b94fe18f3c3de4f24f5bb3fafb4639f1c7e/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fc2x-scope-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93313b94fe18f3c3de4f24f5bb3fafb4639f1c7e/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fc2x-scope-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fc2x-scope-2.c?ref=93313b94fe18f3c3de4f24f5bb3fafb4639f1c7e", "patch": "@@ -0,0 +1,11 @@\n+/* Test :: token in C2x: preprocessed output.  */\n+/* { dg-do preprocess } */\n+/* { dg-options \"-std=c2x -pedantic-errors -P\" } */\n+\n+#define COLON() :\n+#define TEST() ABC\n+\n+/* This must have a space inserted between the two ':' tokens in\n+   preprocessed output.  */\n+TEST()COLON()COLON()TEST()\n+/* { dg-final { scan-file c2x-scope-2.i \"ABC: :ABC\" } } */"}, {"sha": "4c23e21e74e2720b8213f2ddda0dc3edcabf86ca", "filename": "gcc/testsuite/gcc.dg/cpp/c90-scope-1.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93313b94fe18f3c3de4f24f5bb3fafb4639f1c7e/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fc90-scope-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93313b94fe18f3c3de4f24f5bb3fafb4639f1c7e/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fc90-scope-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fc90-scope-1.c?ref=93313b94fe18f3c3de4f24f5bb3fafb4639f1c7e", "patch": "@@ -0,0 +1,7 @@\n+/* Test :: token not in C90.  */\n+/* { dg-do preprocess } */\n+/* { dg-options \"-std=c90 -pedantic-errors\" } */\n+\n+#define CONCAT(x, y) x ## y\n+\n+CONCAT (:, :) /* { dg-error \"does not give a valid preprocessing token\" } */"}, {"sha": "0e6da012c4911ed321dc70458f77194e3f305b21", "filename": "gcc/testsuite/gcc.dg/cpp/c94-scope-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93313b94fe18f3c3de4f24f5bb3fafb4639f1c7e/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fc94-scope-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93313b94fe18f3c3de4f24f5bb3fafb4639f1c7e/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fc94-scope-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fc94-scope-1.c?ref=93313b94fe18f3c3de4f24f5bb3fafb4639f1c7e", "patch": "@@ -0,0 +1,8 @@\n+/* Test :: token not in C94.  */\n+/* { dg-do preprocess } */\n+/* { dg-options \"-std=iso9899:199409 -pedantic-errors\" } */\n+\n+#define CONCAT(x, y) x ## y\n+\n+CONCAT (:, :) /* { dg-error \"does not give a valid preprocessing token\" } */\n+CONCAT (::, >)"}, {"sha": "e878286b190480afab6731b077d9100afc9e0f48", "filename": "gcc/testsuite/gcc.dg/cpp/c99-scope-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93313b94fe18f3c3de4f24f5bb3fafb4639f1c7e/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fc99-scope-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93313b94fe18f3c3de4f24f5bb3fafb4639f1c7e/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fc99-scope-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fc99-scope-1.c?ref=93313b94fe18f3c3de4f24f5bb3fafb4639f1c7e", "patch": "@@ -0,0 +1,8 @@\n+/* Test :: token not in C99.  */\n+/* { dg-do preprocess } */\n+/* { dg-options \"-std=c99 -pedantic-errors\" } */\n+\n+#define CONCAT(x, y) x ## y\n+\n+CONCAT (:, :) /* { dg-error \"does not give a valid preprocessing token\" } */\n+CONCAT (::, >)"}, {"sha": "2dea3911eba15a4fc0959bcb1d77a23365dd3425", "filename": "gcc/testsuite/gcc.dg/cpp/gnu11-scope-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93313b94fe18f3c3de4f24f5bb3fafb4639f1c7e/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fgnu11-scope-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93313b94fe18f3c3de4f24f5bb3fafb4639f1c7e/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fgnu11-scope-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fgnu11-scope-1.c?ref=93313b94fe18f3c3de4f24f5bb3fafb4639f1c7e", "patch": "@@ -0,0 +1,8 @@\n+/* Test :: token in gnu11.  */\n+/* { dg-do preprocess } */\n+/* { dg-options \"-std=gnu11 -pedantic-errors\" } */\n+\n+#define CONCAT(x, y) x ## y\n+\n+CONCAT (:, :)\n+CONCAT (::, >) /* { dg-error \"does not give a valid preprocessing token\" } */"}, {"sha": "0c5f20dbe310c5331ff939f00cbe7b2fc80e8bed", "filename": "gcc/testsuite/gcc.dg/cpp/gnu17-scope-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93313b94fe18f3c3de4f24f5bb3fafb4639f1c7e/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fgnu17-scope-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93313b94fe18f3c3de4f24f5bb3fafb4639f1c7e/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fgnu17-scope-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fgnu17-scope-1.c?ref=93313b94fe18f3c3de4f24f5bb3fafb4639f1c7e", "patch": "@@ -0,0 +1,8 @@\n+/* Test :: token in gnu17.  */\n+/* { dg-do preprocess } */\n+/* { dg-options \"-std=gnu17 -pedantic-errors\" } */\n+\n+#define CONCAT(x, y) x ## y\n+\n+CONCAT (:, :)\n+CONCAT (::, >) /* { dg-error \"does not give a valid preprocessing token\" } */"}, {"sha": "812e62fcc125580a53792d74eb1fcf0f2d6e0573", "filename": "gcc/testsuite/gcc.dg/cpp/gnu89-scope-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93313b94fe18f3c3de4f24f5bb3fafb4639f1c7e/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fgnu89-scope-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93313b94fe18f3c3de4f24f5bb3fafb4639f1c7e/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fgnu89-scope-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fgnu89-scope-1.c?ref=93313b94fe18f3c3de4f24f5bb3fafb4639f1c7e", "patch": "@@ -0,0 +1,8 @@\n+/* Test :: token in gnu89.  */\n+/* { dg-do preprocess } */\n+/* { dg-options \"-std=gnu89 -pedantic-errors\" } */\n+\n+#define CONCAT(x, y) x ## y\n+\n+CONCAT (:, :)\n+CONCAT (::, >) /* { dg-error \"does not give a valid preprocessing token\" } */"}, {"sha": "5ba871d15fbe158815d9e1dc44c10623ebcbfa48", "filename": "gcc/testsuite/gcc.dg/cpp/gnu99-scope-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93313b94fe18f3c3de4f24f5bb3fafb4639f1c7e/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fgnu99-scope-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93313b94fe18f3c3de4f24f5bb3fafb4639f1c7e/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fgnu99-scope-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fgnu99-scope-1.c?ref=93313b94fe18f3c3de4f24f5bb3fafb4639f1c7e", "patch": "@@ -0,0 +1,8 @@\n+/* Test :: token in gnu99.  */\n+/* { dg-do preprocess } */\n+/* { dg-options \"-std=gnu99 -pedantic-errors\" } */\n+\n+#define CONCAT(x, y) x ## y\n+\n+CONCAT (:, :)\n+CONCAT (::, >) /* { dg-error \"does not give a valid preprocessing token\" } */"}, {"sha": "682caaccd969e1efb94fc0d102745d821fc5cd88", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93313b94fe18f3c3de4f24f5bb3fafb4639f1c7e/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93313b94fe18f3c3de4f24f5bb3fafb4639f1c7e/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=93313b94fe18f3c3de4f24f5bb3fafb4639f1c7e", "patch": "@@ -1,3 +1,11 @@\n+2019-10-02  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* include/cpplib.h (struct cpp_options): Add member scope.\n+\t* init.c (struct lang_flags, lang_defaults): Likewise.\n+\t(cpp_set_lang): Set scope member of pfile.\n+\t* lex.c (_cpp_lex_direct): Test CPP_OPTION (pfile, scope) not\n+\tCPP_OPTION (pfile, cplusplus) for creating CPP_SCOPE tokens.\n+\n 2019-09-26  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* charset.c (UCS_LIMIT): New macro."}, {"sha": "ccbcfde6dc452cf59da63dbab023315ee7e0be38", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93313b94fe18f3c3de4f24f5bb3fafb4639f1c7e/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93313b94fe18f3c3de4f24f5bb3fafb4639f1c7e/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=93313b94fe18f3c3de4f24f5bb3fafb4639f1c7e", "patch": "@@ -483,6 +483,9 @@ struct cpp_options\n   /* Nonzero for C++2a __VA_OPT__ feature.  */\n   unsigned char va_opt;\n \n+  /* Nonzero for the '::' token.  */\n+  unsigned char scope;\n+\n   /* Holds the name of the target (execution) character set.  */\n   const char *narrow_charset;\n "}, {"sha": "c932598b5fbad0543be014ec59e693c564456889", "filename": "libcpp/init.c", "status": "modified", "additions": 25, "deletions": 23, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93313b94fe18f3c3de4f24f5bb3fafb4639f1c7e/libcpp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93313b94fe18f3c3de4f24f5bb3fafb4639f1c7e/libcpp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finit.c?ref=93313b94fe18f3c3de4f24f5bb3fafb4639f1c7e", "patch": "@@ -92,32 +92,33 @@ struct lang_flags\n   char trigraphs;\n   char utf8_char_literals;\n   char va_opt;\n+  char scope;\n };\n \n static const struct lang_flags lang_defaults[] =\n-{ /*              c99 c++ xnum xid c11 std digr ulit rlit udlit bincst digsep trig u8chlit vaopt */\n-  /* GNUC89   */  { 0,  0,  1,  0,  0,  0,  1,   0,   0,   0,    0,     0,     0,   0,      1 },\n-  /* GNUC99   */  { 1,  0,  1,  1,  0,  0,  1,   1,   1,   0,    0,     0,     0,   0,      1 },\n-  /* GNUC11   */  { 1,  0,  1,  1,  1,  0,  1,   1,   1,   0,    0,     0,     0,   0,      1 },\n-  /* GNUC17   */  { 1,  0,  1,  1,  1,  0,  1,   1,   1,   0,    0,     0,     0,   0,      1 },\n-  /* GNUC2X   */  { 1,  0,  1,  1,  1,  0,  1,   1,   1,   0,    0,     0,     0,   0,      1 },\n-  /* STDC89   */  { 0,  0,  0,  0,  0,  1,  0,   0,   0,   0,    0,     0,     1,   0,      0 },\n-  /* STDC94   */  { 0,  0,  0,  0,  0,  1,  1,   0,   0,   0,    0,     0,     1,   0,      0 },\n-  /* STDC99   */  { 1,  0,  1,  1,  0,  1,  1,   0,   0,   0,    0,     0,     1,   0,      0 },\n-  /* STDC11   */  { 1,  0,  1,  1,  1,  1,  1,   1,   0,   0,    0,     0,     1,   0,      0 },\n-  /* STDC17   */  { 1,  0,  1,  1,  1,  1,  1,   1,   0,   0,    0,     0,     1,   0,      0 },\n-  /* STDC2X   */  { 1,  0,  1,  1,  1,  1,  1,   1,   0,   0,    0,     0,     1,   0,      0 },\n-  /* GNUCXX   */  { 0,  1,  1,  1,  0,  0,  1,   0,   0,   0,    0,     0,     0,   0,      1 },\n-  /* CXX98    */  { 0,  1,  0,  1,  0,  1,  1,   0,   0,   0,    0,     0,     1,   0,      0 },\n-  /* GNUCXX11 */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    0,     0,     0,   0,      1 },\n-  /* CXX11    */  { 1,  1,  0,  1,  1,  1,  1,   1,   1,   1,    0,     0,     1,   0,      0 },\n-  /* GNUCXX14 */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    1,     1,     0,   0,      1 },\n-  /* CXX14    */  { 1,  1,  0,  1,  1,  1,  1,   1,   1,   1,    1,     1,     1,   0,      0 },\n-  /* GNUCXX17 */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    1,     1,     0,   1,      1 },\n-  /* CXX17    */  { 1,  1,  1,  1,  1,  1,  1,   1,   1,   1,    1,     1,     0,   1,      0 },\n-  /* GNUCXX2A */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    1,     1,     0,   1,      1 },\n-  /* CXX2A    */  { 1,  1,  1,  1,  1,  1,  1,   1,   1,   1,    1,     1,     0,   1,      1 },\n-  /* ASM      */  { 0,  0,  1,  0,  0,  0,  0,   0,   0,   0,    0,     0,     0,   0,      0 }\n+{ /*              c99 c++ xnum xid c11 std digr ulit rlit udlit bincst digsep trig u8chlit vaopt scope*/\n+  /* GNUC89   */  { 0,  0,  1,  0,  0,  0,  1,   0,   0,   0,    0,     0,     0,   0,      1,   1 },\n+  /* GNUC99   */  { 1,  0,  1,  1,  0,  0,  1,   1,   1,   0,    0,     0,     0,   0,      1,   1 },\n+  /* GNUC11   */  { 1,  0,  1,  1,  1,  0,  1,   1,   1,   0,    0,     0,     0,   0,      1,   1 },\n+  /* GNUC17   */  { 1,  0,  1,  1,  1,  0,  1,   1,   1,   0,    0,     0,     0,   0,      1,   1 },\n+  /* GNUC2X   */  { 1,  0,  1,  1,  1,  0,  1,   1,   1,   0,    0,     0,     0,   0,      1,   1 },\n+  /* STDC89   */  { 0,  0,  0,  0,  0,  1,  0,   0,   0,   0,    0,     0,     1,   0,      0,   0 },\n+  /* STDC94   */  { 0,  0,  0,  0,  0,  1,  1,   0,   0,   0,    0,     0,     1,   0,      0,   0 },\n+  /* STDC99   */  { 1,  0,  1,  1,  0,  1,  1,   0,   0,   0,    0,     0,     1,   0,      0,   0 },\n+  /* STDC11   */  { 1,  0,  1,  1,  1,  1,  1,   1,   0,   0,    0,     0,     1,   0,      0,   0 },\n+  /* STDC17   */  { 1,  0,  1,  1,  1,  1,  1,   1,   0,   0,    0,     0,     1,   0,      0,   0 },\n+  /* STDC2X   */  { 1,  0,  1,  1,  1,  1,  1,   1,   0,   0,    0,     0,     1,   0,      0,   1 },\n+  /* GNUCXX   */  { 0,  1,  1,  1,  0,  0,  1,   0,   0,   0,    0,     0,     0,   0,      1,   1 },\n+  /* CXX98    */  { 0,  1,  0,  1,  0,  1,  1,   0,   0,   0,    0,     0,     1,   0,      0,   1 },\n+  /* GNUCXX11 */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    0,     0,     0,   0,      1,   1 },\n+  /* CXX11    */  { 1,  1,  0,  1,  1,  1,  1,   1,   1,   1,    0,     0,     1,   0,      0,   1 },\n+  /* GNUCXX14 */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    1,     1,     0,   0,      1,   1 },\n+  /* CXX14    */  { 1,  1,  0,  1,  1,  1,  1,   1,   1,   1,    1,     1,     1,   0,      0,   1 },\n+  /* GNUCXX17 */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    1,     1,     0,   1,      1,   1 },\n+  /* CXX17    */  { 1,  1,  1,  1,  1,  1,  1,   1,   1,   1,    1,     1,     0,   1,      0,   1 },\n+  /* GNUCXX2A */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    1,     1,     0,   1,      1,   1 },\n+  /* CXX2A    */  { 1,  1,  1,  1,  1,  1,  1,   1,   1,   1,    1,     1,     0,   1,      1,   1 },\n+  /* ASM      */  { 0,  0,  1,  0,  0,  0,  0,   0,   0,   0,    0,     0,     0,   0,      0,   0 }\n };\n \n /* Sets internal flags correctly for a given language.  */\n@@ -143,6 +144,7 @@ cpp_set_lang (cpp_reader *pfile, enum c_lang lang)\n   CPP_OPTION (pfile, trigraphs)\t\t\t = l->trigraphs;\n   CPP_OPTION (pfile, utf8_char_literals)\t = l->utf8_char_literals;\n   CPP_OPTION (pfile, va_opt)\t\t\t = l->va_opt;\n+  CPP_OPTION (pfile, scope)\t\t\t = l->scope;\n }\n \n /* Initialize library global state.  */"}, {"sha": "3e7d1c37ff5edb83da573b2f47e7b65e39667905", "filename": "libcpp/lex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93313b94fe18f3c3de4f24f5bb3fafb4639f1c7e/libcpp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93313b94fe18f3c3de4f24f5bb3fafb4639f1c7e/libcpp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Flex.c?ref=93313b94fe18f3c3de4f24f5bb3fafb4639f1c7e", "patch": "@@ -3104,7 +3104,7 @@ _cpp_lex_direct (cpp_reader *pfile)\n \n     case ':':\n       result->type = CPP_COLON;\n-      if (*buffer->cur == ':' && CPP_OPTION (pfile, cplusplus))\n+      if (*buffer->cur == ':' && CPP_OPTION (pfile, scope))\n \tbuffer->cur++, result->type = CPP_SCOPE;\n       else if (*buffer->cur == '>' && CPP_OPTION (pfile, digraphs))\n \t{"}]}