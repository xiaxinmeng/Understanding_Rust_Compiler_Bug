{"sha": "bcfaa720a25d9f3bc760a993ee1d949f68e777ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmNmYWE3MjBhMjVkOWYzYmM3NjBhOTkzZWUxZDk0OWY2OGU3NzdlZg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-12-18T08:35:23Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-12-18T08:35:23Z"}, "message": "re PR ipa/81877 (Incorrect results with lto and -fipa-cp and -fipa-cp-clone)\n\n2017-12-18  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/81877\n\t* tree-ssa-loop-im.c (ref_indep_loop_p): Remove safelen parameters.\n\t(outermost_indep_loop): Adjust.\n\t(ref_indep_loop_p_1): Likewise.  Remove safelen handling again.\n\t(can_sm_ref_p): Adjust.\n\n\t* g++.dg/torture/pr81877.C: New testcase.\n\t* g++.dg/vect/pr70729.cc: XFAIL.\n\t* g++.dg/vect/pr70729-nest.cc: XFAIL.\n\nFrom-SVN: r255776", "tree": {"sha": "a99c8c099c762920ec72ae2c6498f4a2e4bf5f22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a99c8c099c762920ec72ae2c6498f4a2e4bf5f22"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bcfaa720a25d9f3bc760a993ee1d949f68e777ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcfaa720a25d9f3bc760a993ee1d949f68e777ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcfaa720a25d9f3bc760a993ee1d949f68e777ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcfaa720a25d9f3bc760a993ee1d949f68e777ef/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8c3563f392007b60a07d4c6d3c335355e19f3135", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c3563f392007b60a07d4c6d3c335355e19f3135", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c3563f392007b60a07d4c6d3c335355e19f3135"}], "stats": {"total": 94, "additions": 49, "deletions": 45}, "files": [{"sha": "ab682443d3aa245247984ab260fe8e7781107aa8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcfaa720a25d9f3bc760a993ee1d949f68e777ef/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcfaa720a25d9f3bc760a993ee1d949f68e777ef/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bcfaa720a25d9f3bc760a993ee1d949f68e777ef", "patch": "@@ -1,3 +1,11 @@\n+2017-12-18  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/81877\n+\t* tree-ssa-loop-im.c (ref_indep_loop_p): Remove safelen parameters.\n+\t(outermost_indep_loop): Adjust.\n+\t(ref_indep_loop_p_1): Likewise.  Remove safelen handling again.\n+\t(can_sm_ref_p): Adjust.\n+\n 2017-12-18  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/77291"}, {"sha": "afcdd206d5fb827907fdd813678c50a22a3a520e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcfaa720a25d9f3bc760a993ee1d949f68e777ef/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcfaa720a25d9f3bc760a993ee1d949f68e777ef/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bcfaa720a25d9f3bc760a993ee1d949f68e777ef", "patch": "@@ -1,3 +1,10 @@\n+2017-12-18  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/81877\n+\t* g++.dg/torture/pr81877.C: New testcase.\n+\t* g++.dg/vect/pr70729.cc: XFAIL.\n+\t* g++.dg/vect/pr70729-nest.cc: XFAIL.\n+\n 2017-12-18  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/77291"}, {"sha": "3d47d1bde09c5e41d0c2499fa5fa2535eac9d864", "filename": "gcc/testsuite/g++.dg/torture/pr81877.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcfaa720a25d9f3bc760a993ee1d949f68e777ef/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr81877.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcfaa720a25d9f3bc760a993ee1d949f68e777ef/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr81877.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr81877.C?ref=bcfaa720a25d9f3bc760a993ee1d949f68e777ef", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do run } */\n+\n+void __attribute__((noipa)) g(int p, int *out)\n+{\n+  int x = 0, y;\n+#pragma GCC ivdep\n+  for (int i = 0; i < 100; i++)\n+    {\n+      int &r = p ? x : y;\n+      r = 42;\n+      out[i] = x;\n+    }\n+}\n+\n+int main()\n+{\n+  int out[100] = { 0 };\n+  g (1, out);\n+  if (out[0] != 42)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "0da0b4d73f5853cfe9bb8998347b7b99e0a6c140", "filename": "gcc/testsuite/g++.dg/vect/pr70729-nest.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcfaa720a25d9f3bc760a993ee1d949f68e777ef/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr70729-nest.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcfaa720a25d9f3bc760a993ee1d949f68e777ef/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr70729-nest.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr70729-nest.cc?ref=bcfaa720a25d9f3bc760a993ee1d949f68e777ef", "patch": "@@ -76,4 +76,4 @@ void Ss::foo (int n)\n     }\n }\n  \n-// { dg-final { scan-tree-dump \"LOOP VECTORIZED\" \"vect\" { target x86_64-*-* i?86-*-* } } }\n+// { dg-final { scan-tree-dump \"LOOP VECTORIZED\" \"vect\" { xfail *-*-* } } }"}, {"sha": "88d46553e5a2da8bdc5d4a3f0419b8c2734afe68", "filename": "gcc/testsuite/g++.dg/vect/pr70729.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcfaa720a25d9f3bc760a993ee1d949f68e777ef/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr70729.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcfaa720a25d9f3bc760a993ee1d949f68e777ef/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr70729.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr70729.cc?ref=bcfaa720a25d9f3bc760a993ee1d949f68e777ef", "patch": "@@ -70,4 +70,4 @@ void Ss::foo (float *in, float w)\n     }\n }\n  \n-// { dg-final { scan-tree-dump \"LOOP VECTORIZED\" \"vect\" { target x86_64-*-* i?86-*-* } } }\n+// { dg-final { scan-tree-dump \"LOOP VECTORIZED\" \"vect\" { xfail *-*-* } } }"}, {"sha": "e0e1556516d3d0782944de4558d503d5e87f0a35", "filename": "gcc/tree-ssa-loop-im.c", "status": "modified", "additions": 10, "deletions": 43, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcfaa720a25d9f3bc760a993ee1d949f68e777ef/gcc%2Ftree-ssa-loop-im.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcfaa720a25d9f3bc760a993ee1d949f68e777ef/gcc%2Ftree-ssa-loop-im.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-im.c?ref=bcfaa720a25d9f3bc760a993ee1d949f68e777ef", "patch": "@@ -199,7 +199,7 @@ static struct\n static bitmap_obstack lim_bitmap_obstack;\n static obstack mem_ref_obstack;\n \n-static bool ref_indep_loop_p (struct loop *, im_mem_ref *, struct loop *);\n+static bool ref_indep_loop_p (struct loop *, im_mem_ref *);\n static bool ref_always_accessed_p (struct loop *, im_mem_ref *, bool);\n \n /* Minimum cost of an expensive expression.  */\n@@ -548,10 +548,10 @@ outermost_indep_loop (struct loop *outer, struct loop *loop, im_mem_ref *ref)\n        aloop != loop;\n        aloop = superloop_at_depth (loop, loop_depth (aloop) + 1))\n     if ((!ref->stored || !bitmap_bit_p (ref->stored, aloop->num))\n-\t&& ref_indep_loop_p (aloop, ref, loop))\n+\t&& ref_indep_loop_p (aloop, ref))\n       return aloop;\n \n-  if (ref_indep_loop_p (loop, ref, loop))\n+  if (ref_indep_loop_p (loop, ref))\n     return loop;\n   else\n     return NULL;\n@@ -2150,20 +2150,13 @@ record_dep_loop (struct loop *loop, im_mem_ref *ref, bool stored_p)\n }\n \n /* Returns true if REF is independent on all other memory\n-   references in LOOP.  REF_LOOP is where REF is accessed, SAFELEN is the\n-   safelen to apply.  */\n+   references in LOOP.  */\n \n static bool\n-ref_indep_loop_p_1 (int safelen, struct loop *loop, im_mem_ref *ref,\n-\t\t    bool stored_p, struct loop *ref_loop)\n+ref_indep_loop_p_1 (struct loop *loop, im_mem_ref *ref, bool stored_p)\n {\n   stored_p |= (ref->stored && bitmap_bit_p (ref->stored, loop->num));\n \n-  if (loop->safelen > safelen\n-      /* Check that REF is accessed inside LOOP.  */\n-      && (loop == ref_loop || flow_loop_nested_p (loop, ref_loop)))\n-    safelen = loop->safelen;\n-\n   bool indep_p = true;\n   bitmap refs_to_check;\n \n@@ -2174,32 +2167,6 @@ ref_indep_loop_p_1 (int safelen, struct loop *loop, im_mem_ref *ref,\n \n   if (bitmap_bit_p (refs_to_check, UNANALYZABLE_MEM_ID))\n     indep_p = false;\n-  else if (safelen > 1)\n-    {\n-      if (dump_file && (dump_flags & TDF_DETAILS))\n-\t{\n-\t  fprintf (dump_file,\"REF is independent due to safelen %d\\n\",\n-\t\t   safelen);\n-\t  print_generic_expr (dump_file, ref->mem.ref, TDF_SLIM);\n-\t  fprintf (dump_file, \"\\n\");\n-\t}\n-\n-      /* We need to recurse to properly handle UNANALYZABLE_MEM_ID.  */\n-      struct loop *inner = loop->inner;\n-      while (inner)\n-\t{\n-\t  if (!ref_indep_loop_p_1 (safelen, inner, ref, stored_p, ref_loop))\n-\t    {\n-\t      indep_p = false;\n-\t      break;\n-\t    }\n-\t  inner = inner->next;\n-\t}\n-\n-      /* Avoid caching here as safelen depends on context and refs\n-         are shared between different contexts.  */\n-      return indep_p;\n-    }\n   else\n     {\n       if (bitmap_bit_p (&ref->indep_loop, LOOP_DEP_BIT (loop->num, stored_p)))\n@@ -2210,7 +2177,7 @@ ref_indep_loop_p_1 (int safelen, struct loop *loop, im_mem_ref *ref,\n       struct loop *inner = loop->inner;\n       while (inner)\n \t{\n-\t  if (!ref_indep_loop_p_1 (safelen, inner, ref, stored_p, ref_loop))\n+\t  if (!ref_indep_loop_p_1 (inner, ref, stored_p))\n \t    {\n \t      indep_p = false;\n \t      break;\n@@ -2264,14 +2231,14 @@ ref_indep_loop_p_1 (int safelen, struct loop *loop, im_mem_ref *ref,\n }\n \n /* Returns true if REF is independent on all other memory references in\n-   LOOP.  REF_LOOP is the loop where REF is accessed.  */\n+   LOOP.  */\n \n static bool\n-ref_indep_loop_p (struct loop *loop, im_mem_ref *ref, struct loop *ref_loop)\n+ref_indep_loop_p (struct loop *loop, im_mem_ref *ref)\n {\n   gcc_checking_assert (MEM_ANALYZABLE (ref));\n \n-  return ref_indep_loop_p_1 (0, loop, ref, false, ref_loop);\n+  return ref_indep_loop_p_1 (loop, ref, false);\n }\n \n /* Returns true if we can perform store motion of REF from LOOP.  */\n@@ -2307,7 +2274,7 @@ can_sm_ref_p (struct loop *loop, im_mem_ref *ref)\n \n   /* And it must be independent on all other memory references\n      in LOOP.  */\n-  if (!ref_indep_loop_p (loop, ref, loop))\n+  if (!ref_indep_loop_p (loop, ref))\n     return false;\n \n   return true;"}]}