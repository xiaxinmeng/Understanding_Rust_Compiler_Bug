{"sha": "ca300626e0176e5c84776960cf3f2f8d2bd8fd54", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2EzMDA2MjZlMDE3NmU1Yzg0Nzc2OTYwY2YzZjJmOGQyYmQ4ZmQ1NA==", "commit": {"author": {"name": "Torbjorn Granlund", "email": "tege@gnu.org", "date": "1994-06-29T00:19:52Z"}, "committer": {"name": "Torbjorn Granlund", "email": "tege@gnu.org", "date": "1994-06-29T00:19:52Z"}, "message": "(umulsi3_highpart, const_umulsi3_highpart): New expander and matcher.\n\n(smulsi3_highpart, const_smulsi3_highpart): Likewise.\n\nFrom-SVN: r7593", "tree": {"sha": "0ef4806498500846fde3293c14cadcdc33f475ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0ef4806498500846fde3293c14cadcdc33f475ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca300626e0176e5c84776960cf3f2f8d2bd8fd54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca300626e0176e5c84776960cf3f2f8d2bd8fd54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca300626e0176e5c84776960cf3f2f8d2bd8fd54", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca300626e0176e5c84776960cf3f2f8d2bd8fd54/comments", "author": null, "committer": null, "parents": [{"sha": "74a6106962459a471c23ea2b9d7823f448918ae1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74a6106962459a471c23ea2b9d7823f448918ae1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74a6106962459a471c23ea2b9d7823f448918ae1"}], "stats": {"total": 88, "additions": 88, "deletions": 0}, "files": [{"sha": "9e5494a4a81073a203e067e90519dc37e158ed54", "filename": "gcc/config/m68k/m68k.md", "status": "modified", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca300626e0176e5c84776960cf3f2f8d2bd8fd54/gcc%2Fconfig%2Fm68k%2Fm68k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca300626e0176e5c84776960cf3f2f8d2bd8fd54/gcc%2Fconfig%2Fm68k%2Fm68k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.md?ref=ca300626e0176e5c84776960cf3f2f8d2bd8fd54", "patch": "@@ -2531,6 +2531,94 @@\n    && INTVAL (operands[2]) >= -0x80000000\"\n   \"muls%.l %2,%3:%0\")\n \n+(define_expand \"umulsi3_highpart\"\n+  [(parallel\n+    [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t  (truncate:SI\n+\t   (lshiftrt:DI\n+\t    (mult:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"\"))\n+\t\t     (zero_extend:DI (match_operand:SI 2 \"general_operand\" \"\")))\n+\t    (const_int 32))))\n+     (clobber (match_dup 3))])]\n+  \"TARGET_68020\"\n+  \"\n+{\n+  operands[3] = gen_reg_rtx (SImode);\n+  if (CONSTANT_P (operands[2]))\n+    {\n+      /* We have to rearrange the operand order for the matching constraints.  */\n+      emit_insn (gen_const_umulsi3_highpart (operands[0], operands[3],\n+\t\t\t\t\t     operands[1], operands[2]));\n+      DONE;\n+    }\n+}\")\n+\n+(define_insn \"\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(truncate:SI\n+\t (lshiftrt:DI\n+\t  (mult:DI (zero_extend:DI (match_operand:SI 2 \"register_operand\" \"%1\"))\n+\t\t   (zero_extend:DI (match_operand:SI 3 \"nonimmediate_operand\" \"dm\")))\n+\t  (const_int 32))))\n+   (clobber (match_operand:SI 1 \"register_operand\" \"=d\"))]\n+  \"TARGET_68020\"\n+  \"mulu%.l %3,%0:%1\")\n+\n+(define_insn \"const_umulsi3_highpart\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(truncate:SI\n+\t (lshiftrt:DI\n+\t  (mult:DI (zero_extend:DI (match_operand:SI 2 \"register_operand\" \"1\"))\n+\t\t   (match_operand:DI 3 \"immediate_operand\" \"i\"))\n+\t  (const_int 32))))\n+   (clobber (match_operand:SI 1 \"register_operand\" \"=d\"))]\n+  \"TARGET_68020\"\n+  \"mulu%.l %3,%0:%1\")\n+\n+(define_expand \"smulsi3_highpart\"\n+  [(parallel\n+    [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t  (truncate:SI\n+\t   (lshiftrt:DI\n+\t    (mult:DI (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"\"))\n+\t\t     (sign_extend:DI (match_operand:SI 2 \"general_operand\" \"\")))\n+\t    (const_int 32))))\n+     (clobber (match_dup 3))])]\n+  \"TARGET_68020\"\n+  \"\n+{\n+  operands[3] = gen_reg_rtx (SImode);\n+  if (CONSTANT_P (operands[2]))\n+    {\n+      /* We have to rearrange the operand order for the matching constraints.  */\n+      emit_insn (gen_const_smulsi3_highpart (operands[0], operands[3],\n+\t\t\t\t\t     operands[1], operands[2]));\n+      DONE;\n+    }\n+}\")\n+\n+(define_insn \"\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(truncate:SI\n+\t (lshiftrt:DI\n+\t  (mult:DI (sign_extend:DI (match_operand:SI 2 \"register_operand\" \"%1\"))\n+\t\t   (sign_extend:DI (match_operand:SI 3 \"nonimmediate_operand\" \"dm\")))\n+\t  (const_int 32))))\n+   (clobber (match_operand:SI 1 \"register_operand\" \"=d\"))]\n+  \"TARGET_68020\"\n+  \"muls%.l %3,%0:%1\")\n+\n+(define_insn \"const_smulsi3_highpart\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(truncate:SI\n+\t (lshiftrt:DI\n+\t  (mult:DI (sign_extend:DI (match_operand:SI 2 \"register_operand\" \"1\"))\n+\t\t   (match_operand:DI 3 \"immediate_operand\" \"i\"))\n+\t  (const_int 32))))\n+   (clobber (match_operand:SI 1 \"register_operand\" \"=d\"))]\n+  \"TARGET_68020\"\n+  \"muls%.l %3,%0:%1\")\n+\n (define_expand \"muldf3\"\n   [(set (match_operand:DF 0 \"general_operand\" \"\")\n \t(mult:DF (match_operand:DF 1 \"general_operand\" \"\")"}]}