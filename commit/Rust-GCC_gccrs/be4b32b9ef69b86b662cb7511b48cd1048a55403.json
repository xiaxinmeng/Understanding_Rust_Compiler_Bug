{"sha": "be4b32b9ef69b86b662cb7511b48cd1048a55403", "node_id": "C_kwDOANBUbNoAKGJlNGIzMmI5ZWY2OWI4NmI2NjJjYjc1MTFiNDhjZDEwNDhhNTU0MDM", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-09-26T14:21:38Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-09-26T16:20:38Z"}, "message": "c++: Instantiate less when evaluating __is_convertible\n\nJon reported that evaluating __is_convertible in a test led to\ninstantiating something ill-formed and so we failed to compile the test.\n__is_convertible doesn't and shouldn't need to instantiate so much, so\nlet's limit it with a cp_unevaluated guard.  Use a helper function to\nimplement both built-ins.\n\n\tPR c++/106784\n\ngcc/cp/ChangeLog:\n\n\t* method.cc (is_convertible_helper): New.\n\t(is_convertible): Use it.\n\t(is_nothrow_convertible): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/ext/is_convertible3.C: New test.\n\t* g++.dg/ext/is_nothrow_convertible3.C: New test.", "tree": {"sha": "b931de83ee678a47a7085e09152a6bacdf93adc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b931de83ee678a47a7085e09152a6bacdf93adc1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be4b32b9ef69b86b662cb7511b48cd1048a55403", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be4b32b9ef69b86b662cb7511b48cd1048a55403", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be4b32b9ef69b86b662cb7511b48cd1048a55403", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be4b32b9ef69b86b662cb7511b48cd1048a55403/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "099a66498bf7a40764002793eba66c881a251b76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/099a66498bf7a40764002793eba66c881a251b76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/099a66498bf7a40764002793eba66c881a251b76"}], "stats": {"total": 41, "additions": 33, "deletions": 8}, "files": [{"sha": "9f917f13134a88e8d78fff28c1b133e2d1a3a666", "filename": "gcc/cp/method.cc", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be4b32b9ef69b86b662cb7511b48cd1048a55403/gcc%2Fcp%2Fmethod.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be4b32b9ef69b86b662cb7511b48cd1048a55403/gcc%2Fcp%2Fmethod.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.cc?ref=be4b32b9ef69b86b662cb7511b48cd1048a55403", "patch": "@@ -2236,6 +2236,19 @@ ref_xes_from_temporary (tree to, tree from, bool direct_init_p)\n   return ref_conv_binds_directly (to, val, direct_init_p).is_false ();\n }\n \n+/* Worker for is_{,nothrow_}convertible.  Attempt to perform an implicit\n+   conversion from FROM to TO and return the result.  */\n+\n+static tree\n+is_convertible_helper (tree from, tree to)\n+{\n+  if (VOID_TYPE_P (from) && VOID_TYPE_P (to))\n+    return integer_one_node;\n+  cp_unevaluated u;\n+  tree expr = build_stub_object (from);\n+  return perform_implicit_conversion (to, expr, tf_none);\n+}\n+\n /* Return true if FROM can be converted to TO using implicit conversions,\n    or both FROM and TO are possibly cv-qualified void.  NB: This doesn't\n    implement the \"Access checks are performed as if from a context unrelated\n@@ -2244,10 +2257,7 @@ ref_xes_from_temporary (tree to, tree from, bool direct_init_p)\n bool\n is_convertible (tree from, tree to)\n {\n-  if (VOID_TYPE_P (from) && VOID_TYPE_P (to))\n-    return true;\n-  tree expr = build_stub_object (from);\n-  expr = perform_implicit_conversion (to, expr, tf_none);\n+  tree expr = is_convertible_helper (from, to);\n   if (expr == error_mark_node)\n     return false;\n   return !!expr;\n@@ -2258,10 +2268,7 @@ is_convertible (tree from, tree to)\n bool\n is_nothrow_convertible (tree from, tree to)\n {\n-  if (VOID_TYPE_P (from) && VOID_TYPE_P (to))\n-    return true;\n-  tree expr = build_stub_object (from);\n-  expr = perform_implicit_conversion (to, expr, tf_none);\n+  tree expr = is_convertible_helper (from, to);\n   if (expr == NULL_TREE || expr == error_mark_node)\n     return false;\n   return expr_noexcept_p (expr, tf_none);"}, {"sha": "7a986d075c22fdffcb905ed46af2cabf66446479", "filename": "gcc/testsuite/g++.dg/ext/is_convertible3.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be4b32b9ef69b86b662cb7511b48cd1048a55403/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_convertible3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be4b32b9ef69b86b662cb7511b48cd1048a55403/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_convertible3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_convertible3.C?ref=be4b32b9ef69b86b662cb7511b48cd1048a55403", "patch": "@@ -0,0 +1,9 @@\n+// PR c++/106784\n+// { dg-do compile { target c++11 } }\n+// Make sure we don't reject this at runtime by trying to instantiate\n+// something that would be ill-formed.\n+\n+struct A;\n+struct B { template<class T> B(const T&) noexcept { T::nonexistent; } };\n+\n+static_assert(__is_convertible(const A&, B), \"\");"}, {"sha": "05b1e1d9ad9306a1c955a0e046da7d18fc0f0362", "filename": "gcc/testsuite/g++.dg/ext/is_nothrow_convertible3.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be4b32b9ef69b86b662cb7511b48cd1048a55403/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_nothrow_convertible3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be4b32b9ef69b86b662cb7511b48cd1048a55403/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_nothrow_convertible3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_nothrow_convertible3.C?ref=be4b32b9ef69b86b662cb7511b48cd1048a55403", "patch": "@@ -0,0 +1,9 @@\n+// PR c++/106784\n+// { dg-do compile { target c++11 } }\n+// Make sure we don't reject this at runtime by trying to instantiate\n+// something that would be ill-formed.\n+\n+struct A;\n+struct B { template<class T> B(const T&) noexcept { T::nonexistent; } };\n+\n+static_assert(__is_nothrow_convertible(const A&, B), \"\");"}]}