{"sha": "5a728aca655359f0f9b9d9ac81b79ad40f8efd2c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWE3MjhhY2E2NTUzNTlmMGY5YjlkOWFjODFiNzlhZDQwZjhlZmQyYw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2000-07-27T04:49:17Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2000-07-27T04:49:17Z"}, "message": "decl.c (start_cleanup_fn): Mark the function as `inline'.\n\n\t* decl.c (start_cleanup_fn): Mark the function as `inline'.\n\t* decl2.c (get_guard): Call cp_finish_decl, not\n\trest_of_decl_compilation, for local guards.\n\t* lex.c (do_identifier): Remove unused variable.\n\nFrom-SVN: r35285", "tree": {"sha": "cedb3d64c2a07afff949f54e543f25619147b28b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cedb3d64c2a07afff949f54e543f25619147b28b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a728aca655359f0f9b9d9ac81b79ad40f8efd2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a728aca655359f0f9b9d9ac81b79ad40f8efd2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a728aca655359f0f9b9d9ac81b79ad40f8efd2c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a728aca655359f0f9b9d9ac81b79ad40f8efd2c/comments", "author": null, "committer": null, "parents": [{"sha": "1b68067d75d1cae96dd2e36f74e4c852adeffc75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b68067d75d1cae96dd2e36f74e4c852adeffc75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b68067d75d1cae96dd2e36f74e4c852adeffc75"}], "stats": {"total": 34, "additions": 32, "deletions": 2}, "files": [{"sha": "1ebe193a86ae67d4cf216fb6c70469100ec37fb9", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a728aca655359f0f9b9d9ac81b79ad40f8efd2c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a728aca655359f0f9b9d9ac81b79ad40f8efd2c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5a728aca655359f0f9b9d9ac81b79ad40f8efd2c", "patch": "@@ -1,3 +1,10 @@\n+2000-07-26  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* decl.c (start_cleanup_fn): Mark the function as `inline'.\n+\t* decl2.c (get_guard): Call cp_finish_decl, not\n+\trest_of_decl_compilation, for local guards.\n+\t* lex.c (do_identifier): Remove unused variable.\n+\n Wed Jul 26 15:05:51 CEST 2000\tMarc Espie <espie@cvs.openbsd.org>\n \n \t* parse.y:  Add missing ';'."}, {"sha": "2f2d17b8fbe95aaf6651bf24ed427a221b2570a8", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a728aca655359f0f9b9d9ac81b79ad40f8efd2c/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a728aca655359f0f9b9d9ac81b79ad40f8efd2c/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=5a728aca655359f0f9b9d9ac81b79ad40f8efd2c", "patch": "@@ -8362,6 +8362,11 @@ start_cleanup_fn ()\n      compiler.  */\n   TREE_PUBLIC (fndecl) = 0;\n   DECL_ARTIFICIAL (fndecl) = 1;\n+  /* Make the function `inline' so that it is only emitted if it is\n+     actually needed.  It is unlikely that it will be inlined, since\n+     it is only called via a function pointer, but we avoid unncessary\n+     emissions this way.  */\n+  DECL_INLINE (fndecl) = 1;\n   /* Build the parameter.  */\n   if (flag_use_cxa_atexit)\n     {"}, {"sha": "1211957391e5c246baa16ba4d6c722381b85ab4e", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a728aca655359f0f9b9d9ac81b79ad40f8efd2c/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a728aca655359f0f9b9d9ac81b79ad40f8efd2c/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=5a728aca655359f0f9b9d9ac81b79ad40f8efd2c", "patch": "@@ -2866,7 +2866,7 @@ get_guard (decl)\n   if (!flag_new_abi && !DECL_NAMESPACE_SCOPE_P (decl))\n     {\n       guard = get_temp_name (integer_type_node);\n-      rest_of_decl_compilation (guard, NULL_PTR, 0, 0);\n+      cp_finish_decl (guard, NULL_TREE, NULL_TREE, 0);\n       return guard;\n     }\n "}, {"sha": "fd9276b60a9b431e6dcd69496675912b2b37a8b2", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a728aca655359f0f9b9d9ac81b79ad40f8efd2c/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a728aca655359f0f9b9d9ac81b79ad40f8efd2c/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=5a728aca655359f0f9b9d9ac81b79ad40f8efd2c", "patch": "@@ -3071,7 +3071,6 @@ do_identifier (token, parsing, args)\n {\n   register tree id;\n   int lexing = (parsing == 1);\n-  int in_call = (parsing == 2);\n \n   if (! lexing || IDENTIFIER_OPNAME_P (token))\n     id = lookup_name (token, 0);"}, {"sha": "4ebffa6369c3284de876f73bc91efe0effdd9033", "filename": "gcc/testsuite/g++.old-deja/g++.other/static13.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a728aca655359f0f9b9d9ac81b79ad40f8efd2c/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fstatic13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a728aca655359f0f9b9d9ac81b79ad40f8efd2c/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fstatic13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fstatic13.C?ref=5a728aca655359f0f9b9d9ac81b79ad40f8efd2c", "patch": "@@ -0,0 +1,19 @@\n+// Build don't run:\n+// Origin: scott snyder <snyder@fnal.gov>\n+\n+struct Cleaner\n+{\n+  ~Cleaner() {}\n+};\n+\n+template <class T>\n+void bar ()\n+{\n+  static Cleaner cleanup;\n+}\n+\n+\n+inline\n+void foo() { bar<int>(); }\n+\n+int main () {}"}]}