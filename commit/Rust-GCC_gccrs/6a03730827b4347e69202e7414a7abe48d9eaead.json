{"sha": "6a03730827b4347e69202e7414a7abe48d9eaead", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmEwMzczMDgyN2I0MzQ3ZTY5MjAyZTc0MTRhN2FiZTQ4ZDllYWVhZA==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2006-03-17T06:08:49Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2006-03-17T06:08:49Z"}, "message": "dwarf2out.c (dwarf2out_stack_adjust): Always track the stack pointer...\n\n* dwarf2out.c (dwarf2out_stack_adjust): Always track the stack\npointer, instead of assuming it is possible to derive the\ncorrect args size from a call insn.\n\nFrom-SVN: r112170", "tree": {"sha": "0f26026fd36a604d0cd5d16bb4e1df5a2aa21e8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f26026fd36a604d0cd5d16bb4e1df5a2aa21e8a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a03730827b4347e69202e7414a7abe48d9eaead", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a03730827b4347e69202e7414a7abe48d9eaead", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a03730827b4347e69202e7414a7abe48d9eaead", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a03730827b4347e69202e7414a7abe48d9eaead/comments", "author": null, "committer": null, "parents": [{"sha": "d97c12956f0d920c2a2cd617a2c7c08db7d0cfa7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d97c12956f0d920c2a2cd617a2c7c08db7d0cfa7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d97c12956f0d920c2a2cd617a2c7c08db7d0cfa7"}], "stats": {"total": 55, "additions": 29, "deletions": 26}, "files": [{"sha": "a63b7d0ddd936bbc7b1b8e965b8847fa093f1752", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a03730827b4347e69202e7414a7abe48d9eaead/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a03730827b4347e69202e7414a7abe48d9eaead/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6a03730827b4347e69202e7414a7abe48d9eaead", "patch": "@@ -1,3 +1,9 @@\n+2006-03-17  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* dwarf2out.c (dwarf2out_stack_adjust): Always track the stack\n+\tpointer, instead of assuming it is possible to derive the\n+\tcorrect args size from a call insn.\n+\n 2006-03-16  Jan-Benedict Glaw  <jbglaw@lug-owl.de>\n \n \t* rtl.h (CONST_INT_P): Define."}, {"sha": "ccfb5df699fb17f8241e926774f36bab75121bab", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 23, "deletions": 26, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a03730827b4347e69202e7414a7abe48d9eaead/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a03730827b4347e69202e7414a7abe48d9eaead/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=6a03730827b4347e69202e7414a7abe48d9eaead", "patch": "@@ -1072,7 +1072,7 @@ stack_adjust_offset (rtx pattern)\n    much extra space it needs to pop off the stack.  */\n \n static void\n-dwarf2out_stack_adjust (rtx insn, bool after_p)\n+dwarf2out_stack_adjust (rtx insn, bool after_p ATTRIBUTE_UNUSED)\n {\n   HOST_WIDE_INT offset;\n   const char *label;\n@@ -1085,31 +1085,7 @@ dwarf2out_stack_adjust (rtx insn, bool after_p)\n   if (prologue_epilogue_contains (insn) || sibcall_epilogue_contains (insn))\n     return;\n \n-  /* If only calls can throw, and we have a frame pointer,\n-     save up adjustments until we see the CALL_INSN.  */\n-  if (!flag_asynchronous_unwind_tables && cfa.reg != STACK_POINTER_REGNUM)\n-    {\n-      if (CALL_P (insn) && !after_p)\n-\t{\n-\t  /* Extract the size of the args from the CALL rtx itself.  */\n-\t  insn = PATTERN (insn);\n-\t  if (GET_CODE (insn) == PARALLEL)\n-\t    insn = XVECEXP (insn, 0, 0);\n-\t  if (GET_CODE (insn) == SET)\n-\t    insn = SET_SRC (insn);\n-\t  gcc_assert (GET_CODE (insn) == CALL);\n-\t  dwarf2out_args_size (\"\", INTVAL (XEXP (insn, 1)));\n-\t}\n-      return;\n-    }\n-\n-  if (CALL_P (insn) && !after_p)\n-    {\n-      if (!flag_asynchronous_unwind_tables)\n-\tdwarf2out_args_size (\"\", args_size);\n-      return;\n-    }\n-  else if (BARRIER_P (insn))\n+  if (BARRIER_P (insn))\n     {\n       /* When we see a BARRIER, we know to reset args_size to 0.  Usually\n \t the compiler will have already emitted a stack adjustment, but\n@@ -1131,9 +1107,20 @@ dwarf2out_stack_adjust (rtx insn, bool after_p)\n \tif (GET_CODE (XVECEXP (PATTERN (insn), 0, i)) == SET)\n \t  offset += stack_adjust_offset (XVECEXP (PATTERN (insn), 0, i));\n     }\n+  else if (GET_CODE (insn) == CALL_INSN)\n+    offset = 0;\n   else\n     return;\n \n+  /* We handle this separately because we want stack adjustments in a\n+     CALL_INSN to be handled.  */;\n+  if (GET_CODE (insn) == CALL_INSN)\n+    {\n+      /* If only calls can throw, adjust args_size only at call sites.  */\n+      if (!flag_asynchronous_unwind_tables)\n+\tdwarf2out_args_size (\"\", args_size);\n+    }\n+\n   if (offset == 0)\n     return;\n \n@@ -1148,6 +1135,16 @@ dwarf2out_stack_adjust (rtx insn, bool after_p)\n   if (args_size < 0)\n     args_size = 0;\n \n+  /* If only calls can throw and we have a frame pointer, we'll save\n+     up adjustments until we see the CALL_INSN.  We used to return\n+     early and derive args_size from NARGS in the CALL_INSN itself,\n+     but that doesn't compute the right value if we have nested call\n+     expansions, e.g., stack adjustments for a call have already been\n+     emitted, and then we issue another call to compute an argument\n+     for the enclosing call (i.e., bar (foo ())).  */\n+  if (!flag_asynchronous_unwind_tables && cfa.reg != STACK_POINTER_REGNUM)\n+    return;\n+\n   label = dwarf2out_cfi_label ();\n   def_cfa_1 (label, &cfa);\n   if (flag_asynchronous_unwind_tables)"}]}