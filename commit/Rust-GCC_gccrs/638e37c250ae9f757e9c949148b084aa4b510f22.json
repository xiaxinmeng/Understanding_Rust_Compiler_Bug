{"sha": "638e37c250ae9f757e9c949148b084aa4b510f22", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjM4ZTM3YzI1MGFlOWY3NTdlOWM5NDkxNDhiMDg0YWE0YjUxMGYyMg==", "commit": {"author": {"name": "Wolfgang Gellerich", "email": "gellerich@de.ibm.com", "date": "2007-04-18T11:51:06Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2007-04-18T11:51:06Z"}, "message": "s390.h (S390_TDC_POSITIVE_ZERO): New constant.\n\n2007-04-18  Wolfgang Gellerich  <gellerich@de.ibm.com>\n\n\t* config/s390/s390.h (S390_TDC_POSITIVE_ZERO): New constant.\n\t(S390_TDC_NEGATIVE_ZERO): New constant.\n\t(S390_TDC_POSITIVE_NORMALIZED_NUMBER): New constant.\n\t(S390_TDC_NEGATIVE_NORMALIZED_NUMBER): New constant.\n\t(S390_TDC_POSITIVE_DENORMALIZED_NUMBER): New constant.\n\t(S390_TDC_NEGATIVE_DENORMALIZED_NUMBER): New constant.\n\t(S390_TDC_POSITIVE_INFINITY): New constant.\n\t(S390_TDC_NEGATIVE_INFINITY): New constant.\n\t(S390_TDC_POSITIVE_QUIET_NAN): New constant.\n\t(S390_TDC_NEGATIVE_QUIET_NAN): New constant.\n\t(S390_TDC_POSITIVE_SIGNALING_NAN): New constant.\n\t(S390_TDC_NEGATIVE_SIGNALING_NAN): New constant.\n\t(S390_TDC_INFINITY): New constant.\n\t* config/s390/s390.c (s390_canonicalize_comparison): Renamed\n\tUNSPEC_CMPINT to UNSPEC_CCU_TO_INT, added a UNSPEC_CCU_TO_INT-like\n\toptimization for UNSPEC_CCZ_TO_INT.\n\t* config/s390/s390.md (\"*TDC_insn_<mode>\"): New insn.\n\t(\"*ccz_to_int\"): New insn.\n\t(\"isinf<mode>2\"): New insn.\n\t(UNSPEC_CMPINT): Renamed to UNSPEC_CCU_TO_INT.\n\t(UNSPEC_CCU_TO_INT): New constant, replaces UNSPEC_CMPINT.\n\t(UNSPEC_CCZ_TO_INT): New constant.\n\nFrom-SVN: r123947", "tree": {"sha": "ba2f886e6343b6e3376a4be454b1121c0bfd4751", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba2f886e6343b6e3376a4be454b1121c0bfd4751"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/638e37c250ae9f757e9c949148b084aa4b510f22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/638e37c250ae9f757e9c949148b084aa4b510f22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/638e37c250ae9f757e9c949148b084aa4b510f22", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/638e37c250ae9f757e9c949148b084aa4b510f22/comments", "author": null, "committer": null, "parents": [{"sha": "3b48ccbc89aef4e24f5f46e4f90cc793ed43df29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b48ccbc89aef4e24f5f46e4f90cc793ed43df29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b48ccbc89aef4e24f5f46e4f90cc793ed43df29"}], "stats": {"total": 133, "additions": 121, "deletions": 12}, "files": [{"sha": "b2339bfb7fe5588b981a5aece94d32f3a8aa0907", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/638e37c250ae9f757e9c949148b084aa4b510f22/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/638e37c250ae9f757e9c949148b084aa4b510f22/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=638e37c250ae9f757e9c949148b084aa4b510f22", "patch": "@@ -1,3 +1,28 @@\n+2007-04-18  Wolfgang Gellerich  <gellerich@de.ibm.com>\n+\n+\t* config/s390/s390.h (S390_TDC_POSITIVE_ZERO): New constant.\n+\t(S390_TDC_NEGATIVE_ZERO): New constant.\n+\t(S390_TDC_POSITIVE_NORMALIZED_NUMBER): New constant.\n+\t(S390_TDC_NEGATIVE_NORMALIZED_NUMBER): New constant.\n+\t(S390_TDC_POSITIVE_DENORMALIZED_NUMBER): New constant.\n+\t(S390_TDC_NEGATIVE_DENORMALIZED_NUMBER): New constant.\n+\t(S390_TDC_POSITIVE_INFINITY): New constant.\n+\t(S390_TDC_NEGATIVE_INFINITY): New constant.\n+\t(S390_TDC_POSITIVE_QUIET_NAN): New constant.\n+\t(S390_TDC_NEGATIVE_QUIET_NAN): New constant.\n+\t(S390_TDC_POSITIVE_SIGNALING_NAN): New constant.\n+\t(S390_TDC_NEGATIVE_SIGNALING_NAN): New constant.\n+\t(S390_TDC_INFINITY): New constant.\n+\t* config/s390/s390.c (s390_canonicalize_comparison): Renamed\n+\tUNSPEC_CMPINT to UNSPEC_CCU_TO_INT, added a UNSPEC_CCU_TO_INT-like\n+\toptimization for UNSPEC_CCZ_TO_INT.\n+\t* config/s390/s390.md (\"*TDC_insn_<mode>\"): New insn.\n+\t(\"*ccz_to_int\"): New insn.\n+\t(\"isinf<mode>2\"): New insn.\n+\t(UNSPEC_CMPINT): Renamed to UNSPEC_CCU_TO_INT.\n+\t(UNSPEC_CCU_TO_INT): New constant, replaces UNSPEC_CMPINT.\n+\t(UNSPEC_CCZ_TO_INT): New constant.\n+\n 2007-04-18  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/19431"}, {"sha": "bd88512cc039c3e3ead8ed9c74288c864ba51055", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/638e37c250ae9f757e9c949148b084aa4b510f22/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/638e37c250ae9f757e9c949148b084aa4b510f22/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=638e37c250ae9f757e9c949148b084aa4b510f22", "patch": "@@ -699,10 +699,9 @@ s390_canonicalize_comparison (enum rtx_code *code, rtx *op0, rtx *op1)\n       *op1 = constm1_rtx;\n     }\n \n-\n-  /* Remove redundant UNSPEC_CMPINT conversions if possible.  */\n+  /* Remove redundant UNSPEC_CCU_TO_INT conversions if possible.  */\n   if (GET_CODE (*op0) == UNSPEC\n-      && XINT (*op0, 1) == UNSPEC_CMPINT\n+      && XINT (*op0, 1) == UNSPEC_CCU_TO_INT\n       && XVECLEN (*op0, 0) == 1\n       && GET_MODE (XVECEXP (*op0, 0, 0)) == CCUmode\n       && GET_CODE (XVECEXP (*op0, 0, 0)) == REG\n@@ -728,6 +727,30 @@ s390_canonicalize_comparison (enum rtx_code *code, rtx *op0, rtx *op1)\n \t}\n     }\n \n+  /* Remove redundant UNSPEC_CCZ_TO_INT conversions if possible.  */\n+  if (GET_CODE (*op0) == UNSPEC\n+      && XINT (*op0, 1) == UNSPEC_CCZ_TO_INT\n+      && XVECLEN (*op0, 0) == 1\n+      && GET_MODE (XVECEXP (*op0, 0, 0)) == CCZmode\n+      && GET_CODE (XVECEXP (*op0, 0, 0)) == REG\n+      && REGNO (XVECEXP (*op0, 0, 0)) == CC_REGNUM\n+      && *op1 == const0_rtx)\n+    {\n+      enum rtx_code new_code = UNKNOWN;\n+      switch (*code)\n+\t{\n+\t  case EQ: new_code = EQ;  break;\n+\t  case NE: new_code = NE;  break;\n+\t  default: break;\n+\t}\n+\n+      if (new_code != UNKNOWN)\n+\t{\n+\t  *op0 = XVECEXP (*op0, 0, 0);\n+\t  *code = new_code;\n+\t}\n+    }\n+\n   /* Simplify cascaded EQ, NE with const0_rtx.  */\n   if ((*code == NE || *code == EQ)\n       && (GET_CODE (*op0) == EQ || GET_CODE (*op0) == NE)"}, {"sha": "8f004a39468fd6fa2c2088269d3608598ede1276", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/638e37c250ae9f757e9c949148b084aa4b510f22/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/638e37c250ae9f757e9c949148b084aa4b510f22/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=638e37c250ae9f757e9c949148b084aa4b510f22", "patch": "@@ -146,6 +146,22 @@ extern enum processor_flags s390_arch_flags;\n /* Frame pointer is not used for debugging.  */\n #define CAN_DEBUG_WITHOUT_FP\n \n+/* Constants needed to control the TEST DATA CLASS (TDC) instruction.  */\n+#define S390_TDC_POSITIVE_ZERO                (1 << 11)\n+#define S390_TDC_NEGATIVE_ZERO                (1 << 10)\n+#define S390_TDC_POSITIVE_NORMALIZED_NUMBER   (1 << 9)\n+#define S390_TDC_NEGATIVE_NORMALIZED_NUMBER   (1 << 8)\n+#define S390_TDC_POSITIVE_DENORMALIZED_NUMBER (1 << 7)\n+#define S390_TDC_NEGATIVE_DENORMALIZED_NUMBER (1 << 6)\n+#define S390_TDC_POSITIVE_INFINITY            (1 << 5)\n+#define S390_TDC_NEGATIVE_INFINITY            (1 << 4)\n+#define S390_TDC_POSITIVE_QUIET_NAN           (1 << 3)\n+#define S390_TDC_NEGATIVE_QUIET_NAN           (1 << 2)\n+#define S390_TDC_POSITIVE_SIGNALING_NAN       (1 << 1)\n+#define S390_TDC_NEGATIVE_SIGNALING_NAN       (1 << 0)\n+\n+#define S390_TDC_INFINITY (S390_TDC_POSITIVE_INFINITY \\\n+\t\t\t  | S390_TDC_NEGATIVE_INFINITY )\n \n /* In libgcc2, determine target settings as compile-time constants.  */\n #ifdef IN_LIBGCC2"}, {"sha": "4acba12674e56ed582939e35ca14b7c6a774b473", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 54, "deletions": 9, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/638e37c250ae9f757e9c949148b084aa4b510f22/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/638e37c250ae9f757e9c949148b084aa4b510f22/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=638e37c250ae9f757e9c949148b084aa4b510f22", "patch": "@@ -59,7 +59,8 @@\n (define_constants\n   [; Miscellaneous\n    (UNSPEC_ROUND\t\t1)\n-   (UNSPEC_CMPINT\t\t2)\n+   (UNSPEC_CCU_TO_INT\t\t2)\n+   (UNSPEC_CCZ_TO_INT\t\t3)\n    (UNSPEC_ICM\t\t\t10)\n \n    ; GOT/PLT and lt-relative accesses\n@@ -93,13 +94,16 @@\n    ; String Functions\n    (UNSPEC_SRST\t\t\t600)\n    (UNSPEC_MVST\t\t\t601)\n-   \n+\n    ; Stack Smashing Protector\n    (UNSPEC_SP_SET \t\t700)\n    (UNSPEC_SP_TEST\t\t701)\n \n    ; Copy sign instructions\n    (UNSPEC_COPYSIGN             800)\n+\n+   ; Test Data Class (TDC)\n+   (UNSPEC_TDC_INSN\t\t900)\n  ])\n \n ;;\n@@ -2090,7 +2094,7 @@\n      (use (reg:SI 0))])\n    (parallel\n     [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t  (unspec:SI [(reg:CCU CC_REGNUM)] UNSPEC_CMPINT))\n+\t  (unspec:SI [(reg:CCU CC_REGNUM)] UNSPEC_CCU_TO_INT))\n      (clobber (reg:CC CC_REGNUM))])]\n   \"\"\n {\n@@ -2288,6 +2292,47 @@\n   [(set_attr \"length\" \"8\")\n    (set_attr \"type\" \"vs\")])\n \n+\n+;\n+; Test data class.\n+;\n+\n+(define_expand \"isinf<mode>2\"\n+  [(set (reg:CCZ CC_REGNUM)\n+        (unspec:CCZ [(match_operand:BFP 1 \"register_operand\" \"f\") \n+                     (match_dup 2)] \n+                     UNSPEC_TDC_INSN))\n+   (set (match_operand:SI 0 \"register_operand\" \"=d\")\n+        (unspec:SI [(reg:CCZ CC_REGNUM)] UNSPEC_CCZ_TO_INT))]\n+  \"TARGET_HARD_FLOAT && TARGET_IEEE_FLOAT\"\n+{\n+  operands[2] = GEN_INT (S390_TDC_INFINITY);\n+})\n+\n+; This insn is used to generate all variants of the Test Data Class\n+; instruction, namely tcxb, tcdb, and tceb.  The insn's first operand\n+; is the register to be tested and the second one is the bit mask\n+; specifying the required test(s).  \n+;\n+(define_insn \"*TDC_insn_<mode>\"\n+  [(set (reg:CCZ CC_REGNUM)\n+        (unspec:CCZ [(match_operand:BFP 0 \"register_operand\" \"f\") \n+                     (match_operand:SI 1 \"const_int_operand\")] UNSPEC_TDC_INSN))]\n+  \"TARGET_HARD_FLOAT && TARGET_IEEE_FLOAT\"\n+  \"tc<xde>b\\t%0,%1\"\n+   [(set_attr \"op_type\" \"RXE\")\n+    (set_attr \"type\"  \"fsimp<mode>\")])\n+\n+(define_insn_and_split \"*ccz_to_int\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n+        (unspec:SI [(match_operand:CCZ 1 \"register_operand\" \"0\")]\n+                   UNSPEC_CCZ_TO_INT))]\n+  \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(set (match_dup 0) (lshiftrt:SI (match_dup 0) (const_int 28)))])\n+\n+\n ;\n ; setmemM instruction pattern(s).\n ;\n@@ -2564,7 +2609,7 @@\n (define_insn_and_split \"cmpint\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n         (unspec:SI [(match_operand:CCU 1 \"register_operand\" \"0\")]\n-                   UNSPEC_CMPINT))\n+                   UNSPEC_CCU_TO_INT))\n    (clobber (reg:CC CC_REGNUM))]\n   \"\"\n   \"#\"\n@@ -2577,10 +2622,10 @@\n (define_insn_and_split \"*cmpint_cc\"\n   [(set (reg CC_REGNUM)\n         (compare (unspec:SI [(match_operand:CCU 1 \"register_operand\" \"0\")]\n-                            UNSPEC_CMPINT)\n+                            UNSPEC_CCU_TO_INT)\n                  (const_int 0)))\n    (set (match_operand:SI 0 \"register_operand\" \"=d\")\n-        (unspec:SI [(match_dup 1)] UNSPEC_CMPINT))]\n+        (unspec:SI [(match_dup 1)] UNSPEC_CCU_TO_INT))]\n   \"s390_match_ccmode (insn, CCSmode)\"\n   \"#\"\n   \"&& reload_completed\"\n@@ -2597,7 +2642,7 @@\n (define_insn_and_split \"*cmpint_sign\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n         (sign_extend:DI (unspec:SI [(match_operand:CCU 1 \"register_operand\" \"0\")]\n-                                   UNSPEC_CMPINT)))\n+                                   UNSPEC_CCU_TO_INT)))\n    (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_64BIT\"\n   \"#\"\n@@ -2611,11 +2656,11 @@\n   [(set (reg CC_REGNUM)\n         (compare (ashiftrt:DI (ashift:DI (subreg:DI \n                    (unspec:SI [(match_operand:CCU 1 \"register_operand\" \"0\")]\n-                              UNSPEC_CMPINT) 0)\n+                              UNSPEC_CCU_TO_INT) 0)\n                    (const_int 32)) (const_int 32))\n                  (const_int 0)))\n    (set (match_operand:DI 0 \"register_operand\" \"=d\")\n-        (sign_extend:DI (unspec:SI [(match_dup 1)] UNSPEC_CMPINT)))]\n+        (sign_extend:DI (unspec:SI [(match_dup 1)] UNSPEC_CCU_TO_INT)))]\n   \"s390_match_ccmode (insn, CCSmode) && TARGET_64BIT\"\n   \"#\"\n   \"&& reload_completed\""}]}