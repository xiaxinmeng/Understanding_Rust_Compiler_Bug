{"sha": "6cea7e397693c3fb2e77b6f9d7770fecc15fd204", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmNlYTdlMzk3NjkzYzNmYjJlNzdiNmY5ZDc3NzBmZWNjMTVmZDIwNA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2019-06-10T07:39:20Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2019-06-10T07:39:20Z"}, "message": "Dump histograms only if present.\n\n2019-06-10  Martin Liska  <mliska@suse.cz>\n\n\t* value-prof.c (dump_histogram_value): Print histogram values\n\tonly if present.\n\nFrom-SVN: r272107", "tree": {"sha": "536fd7086c697630f09f4d39a5f13a81d4cc2f20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/536fd7086c697630f09f4d39a5f13a81d4cc2f20"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6cea7e397693c3fb2e77b6f9d7770fecc15fd204", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cea7e397693c3fb2e77b6f9d7770fecc15fd204", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cea7e397693c3fb2e77b6f9d7770fecc15fd204", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cea7e397693c3fb2e77b6f9d7770fecc15fd204/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "92d417175b9f7b41d5ebe3ceb723f808917ed964", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92d417175b9f7b41d5ebe3ceb723f808917ed964", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92d417175b9f7b41d5ebe3ceb723f808917ed964"}], "stats": {"total": 98, "additions": 45, "deletions": 53}, "files": [{"sha": "c463b689f6bafabd0e1cb6d3428046f67f64e472", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cea7e397693c3fb2e77b6f9d7770fecc15fd204/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cea7e397693c3fb2e77b6f9d7770fecc15fd204/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6cea7e397693c3fb2e77b6f9d7770fecc15fd204", "patch": "@@ -1,3 +1,8 @@\n+2019-06-10  Martin Liska  <mliska@suse.cz>\n+\n+\t* value-prof.c (dump_histogram_value): Print histogram values\n+\tonly if present.\n+\n 2019-06-10  Martin Liska  <mliska@suse.cz>\n \n \t* gcov-io.h (GCOV_DISK_SINGLE_VALUES): New."}, {"sha": "28fbec01984b9975338b0eabf75203af30536fce", "filename": "gcc/value-prof.c", "status": "modified", "additions": 40, "deletions": 53, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cea7e397693c3fb2e77b6f9d7770fecc15fd204/gcc%2Fvalue-prof.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cea7e397693c3fb2e77b6f9d7770fecc15fd204/gcc%2Fvalue-prof.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-prof.c?ref=6cea7e397693c3fb2e77b6f9d7770fecc15fd204", "patch": "@@ -228,87 +228,74 @@ dump_histogram_value (FILE *dump_file, histogram_value hist)\n   switch (hist->type)\n     {\n     case HIST_TYPE_INTERVAL:\n-      fprintf (dump_file, \"Interval counter range %d -- %d\",\n-\t       hist->hdata.intvl.int_start,\n-\t       (hist->hdata.intvl.int_start\n-\t        + hist->hdata.intvl.steps - 1));\n       if (hist->hvalue.counters)\n \t{\n-\t   unsigned int i;\n-\t   fprintf (dump_file, \" [\");\n-           for (i = 0; i < hist->hdata.intvl.steps; i++)\n-\t     fprintf (dump_file, \" %d:%\" PRId64,\n-\t\t      hist->hdata.intvl.int_start + i,\n-\t\t      (int64_t) hist->hvalue.counters[i]);\n-\t   fprintf (dump_file, \" ] outside range:%\" PRId64,\n-\t\t    (int64_t) hist->hvalue.counters[i]);\n+\t  fprintf (dump_file, \"Interval counter range %d -- %d\",\n+\t\t   hist->hdata.intvl.int_start,\n+\t\t   (hist->hdata.intvl.int_start\n+\t\t    + hist->hdata.intvl.steps - 1));\n+\n+\t  unsigned int i;\n+\t  fprintf (dump_file, \" [\");\n+\t  for (i = 0; i < hist->hdata.intvl.steps; i++)\n+\t    fprintf (dump_file, \" %d:%\" PRId64,\n+\t\t     hist->hdata.intvl.int_start + i,\n+\t\t     (int64_t) hist->hvalue.counters[i]);\n+\t  fprintf (dump_file, \" ] outside range:%\" PRId64 \".\\n\",\n+\t\t   (int64_t) hist->hvalue.counters[i]);\n \t}\n-      fprintf (dump_file, \".\\n\");\n       break;\n \n     case HIST_TYPE_POW2:\n-      fprintf (dump_file, \"Pow2 counter \");\n       if (hist->hvalue.counters)\n-\t{\n-\t   fprintf (dump_file, \"pow2:%\" PRId64\n-\t\t    \" nonpow2:%\" PRId64,\n-\t\t    (int64_t) hist->hvalue.counters[1],\n-\t\t    (int64_t) hist->hvalue.counters[0]);\n-\t}\n-      fprintf (dump_file, \".\\n\");\n+\tfprintf (dump_file, \"Pow2 counter pow2:%\" PRId64\n+\t\t \" nonpow2:%\" PRId64 \".\\n\",\n+\t\t (int64_t) hist->hvalue.counters[1],\n+\t\t (int64_t) hist->hvalue.counters[0]);\n       break;\n \n     case HIST_TYPE_SINGLE_VALUE:\n     case HIST_TYPE_INDIR_CALL:\n-      fprintf (dump_file,\n-\t       (hist->type == HIST_TYPE_SINGLE_VALUE\n-\t\t? \"Single value counter \" : \"Indirect call counter\"));\n       if (hist->hvalue.counters)\n \t{\n-\t  fprintf (dump_file, \"all: %\" PRId64 \", values: \",\n-\t\t   (int64_t) hist->hvalue.counters[0]);\n-\t  for (unsigned i = 0; i < GCOV_DISK_SINGLE_VALUES; i++)\n+\t  fprintf (dump_file,\n+\t\t   (hist->type == HIST_TYPE_SINGLE_VALUE\n+\t\t    ? \"Single value counter \" : \"Indirect call counter\"));\n+\t  if (hist->hvalue.counters)\n \t    {\n-\t      fprintf (dump_file, \"[%\" PRId64 \":%\" PRId64 \"]\",\n-\t\t       (int64_t) hist->hvalue.counters[2 * i + 1],\n-\t\t       (int64_t) hist->hvalue.counters[2 * i + 2]);\n-\t      if (i != GCOV_DISK_SINGLE_VALUES - 1)\n-\t\tfprintf (dump_file, \", \");\n+\t      fprintf (dump_file, \"all: %\" PRId64 \", values: \",\n+\t\t       (int64_t) hist->hvalue.counters[0]);\n+\t      for (unsigned i = 0; i < GCOV_DISK_SINGLE_VALUES; i++)\n+\t\t{\n+\t\t  fprintf (dump_file, \"[%\" PRId64 \":%\" PRId64 \"]\",\n+\t\t\t   (int64_t) hist->hvalue.counters[2 * i + 1],\n+\t\t\t   (int64_t) hist->hvalue.counters[2 * i + 2]);\n+\t\t  if (i != GCOV_DISK_SINGLE_VALUES - 1)\n+\t\t    fprintf (dump_file, \", \");\n+\t\t}\n+\t      fprintf (dump_file, \".\\n\");\n \t    }\n \t}\n-      fprintf (dump_file, \".\\n\");\n       break;\n \n     case HIST_TYPE_AVERAGE:\n-      fprintf (dump_file, \"Average value \");\n       if (hist->hvalue.counters)\n-\t{\n-\t   fprintf (dump_file, \"sum:%\" PRId64\n-\t\t    \" times:%\" PRId64,\n-\t\t    (int64_t) hist->hvalue.counters[0],\n-\t\t    (int64_t) hist->hvalue.counters[1]);\n-\t}\n-      fprintf (dump_file, \".\\n\");\n+\tfprintf (dump_file, \"Average value sum:%\" PRId64\n+\t\t \" times:%\" PRId64 \".\\n\",\n+\t\t (int64_t) hist->hvalue.counters[0],\n+\t\t (int64_t) hist->hvalue.counters[1]);\n       break;\n \n     case HIST_TYPE_IOR:\n-      fprintf (dump_file, \"IOR value \");\n       if (hist->hvalue.counters)\n-\t{\n-\t   fprintf (dump_file, \"ior:%\" PRId64,\n-\t\t    (int64_t) hist->hvalue.counters[0]);\n-\t}\n-      fprintf (dump_file, \".\\n\");\n+\tfprintf (dump_file, \"IOR value ior:%\" PRId64 \".\\n\",\n+\t\t (int64_t) hist->hvalue.counters[0]);\n       break;\n \n     case HIST_TYPE_TIME_PROFILE:\n-      fprintf (dump_file, \"Time profile \");\n       if (hist->hvalue.counters)\n-      {\n-        fprintf (dump_file, \"time:%\" PRId64,\n-                 (int64_t) hist->hvalue.counters[0]);\n-      }\n-      fprintf (dump_file, \".\\n\");\n+\tfprintf (dump_file, \"Time profile time:%\" PRId64 \".\\n\",\n+\t\t (int64_t) hist->hvalue.counters[0]);\n       break;\n     case HIST_TYPE_MAX:\n       gcc_unreachable ();"}]}