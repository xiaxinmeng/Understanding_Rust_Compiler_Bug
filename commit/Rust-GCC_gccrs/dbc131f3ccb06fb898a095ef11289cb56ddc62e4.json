{"sha": "dbc131f3ccb06fb898a095ef11289cb56ddc62e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGJjMTMxZjNjY2IwNmZiODk4YTA5NWVmMTEyODljYjU2ZGRjNjJlNA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-03-30T20:37:29Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-03-30T20:37:29Z"}, "message": "(record_dead_and_set_regs): Record death of all hard regs when a multi-reg object in hard regs dies.\n\n(record_dead_and_set_regs): Record death of all hard regs when a multi-reg\nobject in hard regs dies.\n(move_deaths): Handle the case when we only have to move part of a\nmulti-register death note.\n\nFrom-SVN: r3930", "tree": {"sha": "2af6a2f6e28835fec0aaf60d278e356d12d9ae5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2af6a2f6e28835fec0aaf60d278e356d12d9ae5f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dbc131f3ccb06fb898a095ef11289cb56ddc62e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbc131f3ccb06fb898a095ef11289cb56ddc62e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbc131f3ccb06fb898a095ef11289cb56ddc62e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbc131f3ccb06fb898a095ef11289cb56ddc62e4/comments", "author": null, "committer": null, "parents": [{"sha": "99309f3bcbb8cd7d7504a89b32588d301609bf9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99309f3bcbb8cd7d7504a89b32588d301609bf9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99309f3bcbb8cd7d7504a89b32588d301609bf9e"}], "stats": {"total": 45, "additions": 40, "deletions": 5}, "files": [{"sha": "92fa365f524f380c4ef1fa7b86ddc734479d87fe", "filename": "gcc/combine.c", "status": "modified", "additions": 40, "deletions": 5, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbc131f3ccb06fb898a095ef11289cb56ddc62e4/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbc131f3ccb06fb898a095ef11289cb56ddc62e4/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=dbc131f3ccb06fb898a095ef11289cb56ddc62e4", "patch": "@@ -8875,8 +8875,19 @@ record_dead_and_set_regs (insn)\n   register rtx link;\n   for (link = REG_NOTES (insn); link; link = XEXP (link, 1))\n     {\n-      if (REG_NOTE_KIND (link) == REG_DEAD)\n-\treg_last_death[REGNO (XEXP (link, 0))] = insn;\n+      if (REG_NOTE_KIND (link) == REG_DEAD\n+\t  && GET_CODE (XEXP (link, 0)) == REG)\n+\t{\n+\t  int regno = REGNO (XEXP (link, 0));\n+\t  int endregno\n+\t    = regno + (regno < FIRST_PSEUDO_REGISTER\n+\t\t       ? HARD_REGNO_NREGS (regno, GET_MODE (XEXP (link, 0)))\n+\t\t       : 1);\n+\t  int i;\n+\n+\t  for (i = regno; i < endregno; i++)\n+\t    reg_last_death[i] = insn;\n+\t}\n       else if (REG_NOTE_KIND (link) == REG_INC)\n \trecord_value_for_reg (XEXP (link, 0), insn, NULL_RTX);\n     }\n@@ -9204,13 +9215,37 @@ move_deaths (x, from_cuid, to_insn, pnotes)\n       if (where_dead && INSN_CUID (where_dead) >= from_cuid\n \t  && INSN_CUID (where_dead) < INSN_CUID (to_insn))\n \t{\n-\t  rtx note = remove_death (regno, reg_last_death[regno]);\n+\t  rtx note = remove_death (regno, where_dead);\n \n \t  /* It is possible for the call above to return 0.  This can occur\n \t     when reg_last_death points to I2 or I1 that we combined with.\n-\t     In that case make a new note.  */\n+\t     In that case make a new note.\n+\n+\t     We must also check for the case where X is a hard register\n+\t     and NOTE is a death note for a range of hard registers\n+\t     including X.  In that case, we must put REG_DEAD notes for\n+\t     the remaining registers in place of NOTE.  */\n+\n+\t  if (note != 0 && regno < FIRST_PSEUDO_REGISTER\n+\t      && (GET_MODE_SIZE (GET_MODE (XEXP (note, 0)))\n+\t\t  != GET_MODE_SIZE (GET_MODE (x))))\n+\t    {\n+\t      int deadregno = REGNO (XEXP (note, 0));\n+\t      int deadend\n+\t\t= (deadregno + HARD_REGNO_NREGS (deadregno,\n+\t\t\t\t\t\t GET_MODE (XEXP (note, 0))));\n+\t      int ourend = regno + HARD_REGNO_NREGS (regno, GET_MODE (x));\n+\t      int i;\n+\n+\t      for (i = deadregno; i < deadend; i++)\n+\t\tif (i < regno || i >= ourend)\n+\t\t  REG_NOTES (where_dead)\n+\t\t    = gen_rtx (EXPR_LIST, REG_DEAD,\n+\t\t\t       gen_rtx (REG, word_mode, i),\n+\t\t\t       REG_NOTES (where_dead));\n+\t    }\n \n-\t  if (note)\n+\t  if (note != 0 && GET_MODE (XEXP (note, 0)) == GET_MODE (x))\n \t    {\n \t      XEXP (note, 1) = *pnotes;\n \t      *pnotes = note;"}]}