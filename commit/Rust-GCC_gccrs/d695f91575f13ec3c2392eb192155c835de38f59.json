{"sha": "d695f91575f13ec3c2392eb192155c835de38f59", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDY5NWY5MTU3NWYxM2VjM2MyMzkyZWIxOTIxNTVjODM1ZGUzOGY1OQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2012-07-03T00:47:17Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2012-07-03T00:47:17Z"}, "message": "revert: re PR libstdc++/49561 ([C++0x] std::list::size complexity)\n\n2012-07-02  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tRevert:\n\t2011-10-04  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR libstdc++/49561\n\t* include/bits/stl_list.h (_List_base<>::_List_impl::_M_size):\n\tAdd in C++0x mode.\n\t(_List_base<>::_List_impl, _List_base<>::_M_get_node,\n\t_List_base<>::_M_put_node, _List_base<>::_List_base(_List_base&&),\n\tlist<>::size, list<>::swap, list<>::splice): Use it.\n\t(operator==(const list<>&, const list<>&)): Rewrite in C++0x mode.\n\t* include/bits/list.tcc (list<>::erase): Likewise.\n\t(list<>::merge): Adjust in C++0x mode.\n\t* testsuite/23_containers/list/requirements/dr438/assign_neg.cc:\n\tAdjust dg-error line number.\n\t* testsuite/23_containers/list/requirements/dr438/insert_neg.cc:\n\tLikewise.\n\t* testsuite/23_containers/list/requirements/dr438/\n\tconstructor_1_neg.cc: Likewise.\n\t* testsuite/23_containers/list/requirements/dr438/\n\tconstructor_2_neg.cc: Likewise.\n\nFrom-SVN: r189185", "tree": {"sha": "7f5c4b43c373eb9a4a34b99d15cc89adbbc88b1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f5c4b43c373eb9a4a34b99d15cc89adbbc88b1b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d695f91575f13ec3c2392eb192155c835de38f59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d695f91575f13ec3c2392eb192155c835de38f59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d695f91575f13ec3c2392eb192155c835de38f59", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d695f91575f13ec3c2392eb192155c835de38f59/comments", "author": null, "committer": null, "parents": [{"sha": "eeddef55da63241e585b6d83e4362c5846c847c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eeddef55da63241e585b6d83e4362c5846c847c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eeddef55da63241e585b6d83e4362c5846c847c5"}], "stats": {"total": 137, "additions": 50, "deletions": 87}, "files": [{"sha": "94a0ad485760a67383c06cdd52cb50f6913835d0", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d695f91575f13ec3c2392eb192155c835de38f59/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d695f91575f13ec3c2392eb192155c835de38f59/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d695f91575f13ec3c2392eb192155c835de38f59", "patch": "@@ -1,3 +1,26 @@\n+2012-07-02  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tRevert:\n+\t2011-10-04  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR libstdc++/49561\n+\t* include/bits/stl_list.h (_List_base<>::_List_impl::_M_size):\n+\tAdd in C++0x mode.\n+\t(_List_base<>::_List_impl, _List_base<>::_M_get_node,\n+\t_List_base<>::_M_put_node, _List_base<>::_List_base(_List_base&&),\n+\tlist<>::size, list<>::swap, list<>::splice): Use it.\n+\t(operator==(const list<>&, const list<>&)): Rewrite in C++0x mode.\n+\t* include/bits/list.tcc (list<>::erase): Likewise.\n+\t(list<>::merge): Adjust in C++0x mode.\n+\t* testsuite/23_containers/list/requirements/dr438/assign_neg.cc:\n+\tAdjust dg-error line number.\n+\t* testsuite/23_containers/list/requirements/dr438/insert_neg.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/list/requirements/dr438/\n+\tconstructor_1_neg.cc: Likewise.\n+\t* testsuite/23_containers/list/requirements/dr438/\n+\tconstructor_2_neg.cc: Likewise.\n+\n 2012-06-27  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* include/bits/c++config: Remove __regex nested namespace."}, {"sha": "727e82d3d8dda34e9094fd78511d4243902a76bb", "filename": "libstdc++-v3/include/bits/list.tcc", "status": "modified", "additions": 17, "deletions": 27, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d695f91575f13ec3c2392eb192155c835de38f59/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d695f91575f13ec3c2392eb192155c835de38f59/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc?ref=d695f91575f13ec3c2392eb192155c835de38f59", "patch": "@@ -1,7 +1,7 @@\n // List implementation (out of line) -*- C++ -*-\n \n // Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n-// 2011 Free Software Foundation, Inc.\n+// 2011, 2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -139,29 +139,29 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     list<_Tp, _Alloc>::\n     resize(size_type __new_size)\n     {\n-      if (__new_size > size())\n-\t_M_default_append(__new_size - size());\n-      else if (__new_size < size())\n-\t{\n-\t  iterator __i = begin();\n-\t  std::advance(__i, __new_size);\n-\t  erase(__i, end());\n-\t}\n+      iterator __i = begin();\n+      size_type __len = 0;\n+      for (; __i != end() && __len < __new_size; ++__i, ++__len)\n+        ;\n+      if (__len == __new_size)\n+        erase(__i, end());\n+      else                          // __i == end()\n+\t_M_default_append(__new_size - __len);\n     }\n \n   template<typename _Tp, typename _Alloc>\n     void\n     list<_Tp, _Alloc>::\n     resize(size_type __new_size, const value_type& __x)\n     {\n-      if (__new_size > size())\n-\tinsert(end(), __new_size - size(), __x);\n-      else if (__new_size < size())\n-\t{\n-\t  iterator __i = begin();\n-\t  std::advance(__i, __new_size);\n-\t  erase(__i, end());\n-\t}\n+      iterator __i = begin();\n+      size_type __len = 0;\n+      for (; __i != end() && __len < __new_size; ++__i, ++__len)\n+        ;\n+      if (__len == __new_size)\n+        erase(__i, end());\n+      else                          // __i == end()\n+        insert(end(), __new_size - __len, __x);\n     }\n #else\n   template<typename _Tp, typename _Alloc>\n@@ -312,11 +312,6 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t      ++__first1;\n \t  if (__first2 != __last2)\n \t    _M_transfer(__last1, __first2, __last2);\n-\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n-\t  this->_M_impl._M_size += __x.size();\n-\t  __x._M_impl._M_size = 0;\n-#endif\n \t}\n     }\n \n@@ -351,11 +346,6 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t\t++__first1;\n \t    if (__first2 != __last2)\n \t      _M_transfer(__last1, __first2, __last2);\n-\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n-\t    this->_M_impl._M_size += __x.size();\n-\t    __x._M_impl._M_size = 0;\n-#endif\n \t  }\n       }\n "}, {"sha": "5fdaec91d17ccc0fa6b49b7fae10eef96301e00e", "filename": "libstdc++-v3/include/bits/stl_list.h", "status": "modified", "additions": 6, "deletions": 56, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d695f91575f13ec3c2392eb192155c835de38f59/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d695f91575f13ec3c2392eb192155c835de38f59/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h?ref=d695f91575f13ec3c2392eb192155c835de38f59", "patch": "@@ -313,10 +313,6 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       {\n \t__detail::_List_node_base _M_node;\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n-\tsize_t                    _M_size = 0;\n-#endif\n-\n \t_List_impl()\n \t: _Node_alloc_type(), _M_node()\n \t{ }\n@@ -336,23 +332,12 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n       _List_node<_Tp>*\n       _M_get_node()\n-      {\n-\t_List_node<_Tp>* __tmp = _M_impl._Node_alloc_type::allocate(1);\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n-\t++_M_impl._M_size;\n-#endif\t\n-\treturn __tmp;\n-      }\n+      { return _M_impl._Node_alloc_type::allocate(1); }\n \n       void\n       _M_put_node(_List_node<_Tp>* __p)\n-      {\n-\t_M_impl._Node_alloc_type::deallocate(__p, 1);\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n-\t--_M_impl._M_size;\n-#endif\n-      }\n-      \n+      { _M_impl._Node_alloc_type::deallocate(__p, 1); }\n+\n   public:\n       typedef _Alloc allocator_type;\n \n@@ -386,7 +371,6 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       {\n \t_M_init();\n \t__detail::_List_node_base::swap(_M_impl._M_node, __x._M_impl._M_node);\n-\tstd::swap(_M_impl._M_size, __x._M_impl._M_size);\n       }\n #endif\n \n@@ -888,13 +872,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       /**  Returns the number of elements in the %list.  */\n       size_type\n       size() const _GLIBCXX_NOEXCEPT\n-      {\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n-\treturn this->_M_impl._M_size;\n-#else\n-\treturn std::distance(begin(), end());\n-#endif\n-      }\n+      { return std::distance(begin(), end()); }\n \n       /**  Returns the size() of the largest possible %list.  */\n       size_type\n@@ -1234,9 +1212,6 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       {\n \t__detail::_List_node_base::swap(this->_M_impl._M_node, \n \t\t\t\t\t__x._M_impl._M_node);\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n-\tstd::swap(this->_M_impl._M_size, __x._M_impl._M_size);\n-#endif\n \n \t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t// 431. Swapping containers with unequal allocators.\n@@ -1281,11 +1256,6 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t    _M_check_equal_allocators(__x);\n \n \t    this->_M_transfer(__position, __x.begin(), __x.end());\n-\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n-\t    this->_M_impl._M_size += __x.size();\n-\t    __x._M_impl._M_size = 0;\n-#endif\n \t  }\n       }\n \n@@ -1317,14 +1287,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t  return;\n \n \tif (this != &__x)\n-\t  {\n-\t    _M_check_equal_allocators(__x);\n-\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n-\t    ++this->_M_impl._M_size;\n-\t    --__x._M_impl._M_size;\n-#endif\n-\t  }\n+\t  _M_check_equal_allocators(__x);\n \n \tthis->_M_transfer(__position, __i, __j);\n       }\n@@ -1359,15 +1322,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \tif (__first != __last)\n \t  {\n \t    if (this != &__x)\n-\t      {\n-\t\t_M_check_equal_allocators(__x);\n-\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n-\t\tconst size_type __size = std::distance(__first, __last);\n-\t\tthis->_M_impl._M_size += __size;\n-\t\t__x._M_impl._M_size -= __size;\n-#endif\n-\t      }\n+\t      _M_check_equal_allocators(__x);\n \n \t    this->_M_transfer(__position, __first, __last);\n \t  }\n@@ -1643,10 +1598,6 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     inline bool\n     operator==(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)\n     {\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n-      return (__x.size() == __y.size()\n-\t      && std::equal(__x.begin(), __x.end(), __y.begin()));\n-#else\n       typedef typename list<_Tp, _Alloc>::const_iterator const_iterator;\n       const_iterator __end1 = __x.end();\n       const_iterator __end2 = __y.end();\n@@ -1659,7 +1610,6 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t  ++__i2;\n \t}\n       return __i1 == __end1 && __i2 == __end2;\n-#endif\n     }\n \n   /**"}, {"sha": "17af9cfe4d51e50cea7932951cfaf8fc442bccac", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d695f91575f13ec3c2392eb192155c835de38f59/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d695f91575f13ec3c2392eb192155c835de38f59/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fassign_neg.cc?ref=d695f91575f13ec3c2392eb192155c835de38f59", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1571 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1526 }\n \n #include <list>\n "}, {"sha": "cf303f9daeb19e3fd3fe5e48788b384de655a847", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/constructor_1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d695f91575f13ec3c2392eb192155c835de38f59/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d695f91575f13ec3c2392eb192155c835de38f59/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc?ref=d695f91575f13ec3c2392eb192155c835de38f59", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1527 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1482 }\n \n #include <list>\n "}, {"sha": "3e74bcfeb02c1946955a2c1aaaf2ae579da8b60c", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/constructor_2_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d695f91575f13ec3c2392eb192155c835de38f59/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d695f91575f13ec3c2392eb192155c835de38f59/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc?ref=d695f91575f13ec3c2392eb192155c835de38f59", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1527 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1482 }\n \n #include <list>\n #include <utility>"}, {"sha": "ac33bff79027e5657cf30f795ef25426e3ea4902", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/insert_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d695f91575f13ec3c2392eb192155c835de38f59/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Finsert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d695f91575f13ec3c2392eb192155c835de38f59/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Finsert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Finsert_neg.cc?ref=d695f91575f13ec3c2392eb192155c835de38f59", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1527 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1482 }\n \n #include <list>\n "}]}