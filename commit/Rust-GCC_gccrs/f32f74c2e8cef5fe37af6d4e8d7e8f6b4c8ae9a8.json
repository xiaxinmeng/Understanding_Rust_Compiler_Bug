{"sha": "f32f74c2e8cef5fe37af6d4e8d7e8f6b4c8ae9a8", "node_id": "C_kwDOANBUbNoAKGYzMmY3NGMyZThjZWY1ZmUzN2FmNmQ0ZThkN2U4ZjZiNGM4YWU5YTg", "commit": {"author": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2022-01-28T09:28:59Z"}, "committer": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2022-02-01T18:29:01Z"}, "message": "[nvptx] Add uniform_warp_check insn\n\nOn a GT 1030, with driver version 470.94 and -mptx=3.1 I run into:\n...\nFAIL: libgomp.oacc-c/../libgomp.oacc-c-c++-common/parallel-dims.c \\\n  -DACC_DEVICE_TYPE_nvidia=1 -DACC_MEM_SHARED=0 -foffload=nvptx-none \\\n  -O2 execution test\n...\nwhich minimizes to the same test-case as listed in commit \"[nvptx]\nUpdate default ptx isa to 6.3\".\n\nThe problem is again that the first diverging branch is not handled as such in\nSASS, which causes problems with a subsequent shfl insn, but given that we\nhave -mptx=3.1 we can't use the bar.warp.sync insn.\n\nGiven that the default is now -mptx=6.3, and consequently -mptx=3.1 is of a\nlesser importance, implement the next best thing: abort when detecting\nnon-convergence using this insn:\n...\n  { .reg.b32 act;\n    vote.ballot.b32 act,1;\n    .reg.pred uni;\n    setp.eq.b32 uni,act,0xffffffff;\n    @ !uni trap;\n    @ !uni exit;\n  }\n...\n\nInterestingly, the effect of this is that rather than aborting, the test-case\nnow passes.\n\nTested on x86_64 with nvptx accelerator.\n\ngcc/ChangeLog:\n\n2022-01-31  Tom de Vries  <tdevries@suse.de>\n\n\t* config/nvptx/nvptx.cc (nvptx_single): Use nvptx_uniform_warp_check.\n\t* config/nvptx/nvptx.md (define_c_enum \"unspecv\"): Add\n\tUNSPECV_UNIFORM_WARP_CHECK.\n\t(define_insn \"nvptx_uniform_warp_check\"): New define_insn.", "tree": {"sha": "5e9e1113f617f48d97af733a2e977f407e2f8481", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e9e1113f617f48d97af733a2e977f407e2f8481"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f32f74c2e8cef5fe37af6d4e8d7e8f6b4c8ae9a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f32f74c2e8cef5fe37af6d4e8d7e8f6b4c8ae9a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f32f74c2e8cef5fe37af6d4e8d7e8f6b4c8ae9a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f32f74c2e8cef5fe37af6d4e8d7e8f6b4c8ae9a8/comments", "author": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bba61d403d05202deb698b352a4faef3feb1f04d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bba61d403d05202deb698b352a4faef3feb1f04d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bba61d403d05202deb698b352a4faef3feb1f04d"}], "stats": {"total": 40, "additions": 36, "deletions": 4}, "files": [{"sha": "b3bb97c3c14daac494dab1f179c9633c4a63b8f2", "filename": "gcc/config/nvptx/nvptx.cc", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32f74c2e8cef5fe37af6d4e8d7e8f6b4c8ae9a8/gcc%2Fconfig%2Fnvptx%2Fnvptx.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32f74c2e8cef5fe37af6d4e8d7e8f6b4c8ae9a8/gcc%2Fconfig%2Fnvptx%2Fnvptx.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.cc?ref=f32f74c2e8cef5fe37af6d4e8d7e8f6b4c8ae9a8", "patch": "@@ -4631,15 +4631,29 @@ nvptx_single (unsigned mask, basic_block from, basic_block to)\n \tif (tail_branch)\n \t  {\n \t    label_insn = emit_label_before (label, before);\n-\t    if (TARGET_PTX_6_0 && mode == GOMP_DIM_VECTOR)\n-\t      warp_sync = emit_insn_after (gen_nvptx_warpsync (), label_insn);\n+\t    if (mode == GOMP_DIM_VECTOR)\n+\t      {\n+\t\tif (TARGET_PTX_6_0)\n+\t\t  warp_sync = emit_insn_after (gen_nvptx_warpsync (),\n+\t\t\t\t\t       label_insn);\n+\t\telse\n+\t\t  warp_sync = emit_insn_after (gen_nvptx_uniform_warp_check (),\n+\t\t\t\t\t       label_insn);\n+\t      }\n \t    before = label_insn;\n \t  }\n \telse\n \t  {\n \t    label_insn = emit_label_after (label, tail);\n-\t    if (TARGET_PTX_6_0 && mode == GOMP_DIM_VECTOR)\n-\t      warp_sync = emit_insn_after (gen_nvptx_warpsync (), label_insn);\n+\t    if (mode == GOMP_DIM_VECTOR)\n+\t      {\n+\t\tif (TARGET_PTX_6_0)\n+\t\t  warp_sync = emit_insn_after (gen_nvptx_warpsync (),\n+\t\t\t\t\t       label_insn);\n+\t\telse\n+\t\t  warp_sync = emit_insn_after (gen_nvptx_uniform_warp_check (),\n+\t\t\t\t\t       label_insn);\n+\t      }\n \t    if ((mode == GOMP_DIM_VECTOR || mode == GOMP_DIM_WORKER)\n \t\t&& CALL_P (tail) && find_reg_note (tail, REG_NORETURN, NULL))\n \t      emit_insn_after (gen_exit (), label_insn);"}, {"sha": "92768dd9e956a19dc346491bb85b0880b261c95e", "filename": "gcc/config/nvptx/nvptx.md", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32f74c2e8cef5fe37af6d4e8d7e8f6b4c8ae9a8/gcc%2Fconfig%2Fnvptx%2Fnvptx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32f74c2e8cef5fe37af6d4e8d7e8f6b4c8ae9a8/gcc%2Fconfig%2Fnvptx%2Fnvptx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.md?ref=f32f74c2e8cef5fe37af6d4e8d7e8f6b4c8ae9a8", "patch": "@@ -57,6 +57,7 @@\n    UNSPECV_XCHG\n    UNSPECV_BARSYNC\n    UNSPECV_WARPSYNC\n+   UNSPECV_UNIFORM_WARP_CHECK\n    UNSPECV_MEMBAR\n    UNSPECV_MEMBAR_CTA\n    UNSPECV_MEMBAR_GL\n@@ -1985,6 +1986,23 @@\n   \"\\\\tbar.warp.sync\\\\t0xffffffff;\"\n   [(set_attr \"predicable\" \"false\")])\n \n+(define_insn \"nvptx_uniform_warp_check\"\n+  [(unspec_volatile [(const_int 0)] UNSPECV_UNIFORM_WARP_CHECK)]\n+  \"\"\n+  {\n+    output_asm_insn (\"{\", NULL);\n+    output_asm_insn (\"\\\\t\"\t \".reg.b32\"\t   \"\\\\t\" \"act;\", NULL);\n+    output_asm_insn (\"\\\\t\"\t \"vote.ballot.b32\" \"\\\\t\" \"act,1;\", NULL);\n+    output_asm_insn (\"\\\\t\"\t \".reg.pred\"\t   \"\\\\t\" \"uni;\", NULL);\n+    output_asm_insn (\"\\\\t\"\t \"setp.eq.b32\"\t   \"\\\\t\" \"uni,act,0xffffffff;\",\n+\t\t     NULL);\n+    output_asm_insn (\"@ !uni\\\\t\" \"trap;\", NULL);\n+    output_asm_insn (\"@ !uni\\\\t\" \"exit;\", NULL);\n+    output_asm_insn (\"}\", NULL);\n+    return \"\";\n+  }\n+  [(set_attr \"predicable\" \"false\")])\n+\n (define_expand \"memory_barrier\"\n   [(set (match_dup 0)\n \t(unspec_volatile:BLK [(match_dup 0)] UNSPECV_MEMBAR))]"}]}