{"sha": "22d834e32b509b22f68000b7f012d8e45d833ea8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjJkODM0ZTMyYjUwOWIyMmY2ODAwMGI3ZjAxMmQ4ZTQ1ZDgzM2VhOA==", "commit": {"author": {"name": "Ilya Leoshkevich", "email": "iii@linux.ibm.com", "date": "2021-05-31T19:59:50Z"}, "committer": {"name": "Ilya Leoshkevich", "email": "iii@linux.ibm.com", "date": "2021-06-02T09:56:32Z"}, "message": "IBM Z: Remove match_scratch workaround\n\nSince commit dd1ef00c45ba (\"Fix bug in the define_subst handling that\nmade match_scratch unusable for multi-alternative patterns.\") the\nworkaround for that bug in *ashrdi3_31<setcc><cconly> is not only no\nlonger necessary, but actually breaks the build.\n\nGet rid of it by using only one alternative in (match_scratch).  It\nwill be replicated as many times as needed in order to match the\npattern with which (define_subst) is used.\n\ngcc/ChangeLog:\n\n\t* config/s390/s390.md(*ashrdi3_31<setcc><cconly>): Use a single\n\tconstraint.\n\t* config/s390/subst.md(cconly_subst): Use a single constraint\n\tin (match_scratch).\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/s390/ashr.c: New test.", "tree": {"sha": "dfe850ee8086cc35d7afd6ac8eaf8c943326acbb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dfe850ee8086cc35d7afd6ac8eaf8c943326acbb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22d834e32b509b22f68000b7f012d8e45d833ea8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22d834e32b509b22f68000b7f012d8e45d833ea8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22d834e32b509b22f68000b7f012d8e45d833ea8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22d834e32b509b22f68000b7f012d8e45d833ea8/comments", "author": {"login": "iii-i", "id": 45998171, "node_id": "MDQ6VXNlcjQ1OTk4MTcx", "avatar_url": "https://avatars.githubusercontent.com/u/45998171?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iii-i", "html_url": "https://github.com/iii-i", "followers_url": "https://api.github.com/users/iii-i/followers", "following_url": "https://api.github.com/users/iii-i/following{/other_user}", "gists_url": "https://api.github.com/users/iii-i/gists{/gist_id}", "starred_url": "https://api.github.com/users/iii-i/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iii-i/subscriptions", "organizations_url": "https://api.github.com/users/iii-i/orgs", "repos_url": "https://api.github.com/users/iii-i/repos", "events_url": "https://api.github.com/users/iii-i/events{/privacy}", "received_events_url": "https://api.github.com/users/iii-i/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iii-i", "id": 45998171, "node_id": "MDQ6VXNlcjQ1OTk4MTcx", "avatar_url": "https://avatars.githubusercontent.com/u/45998171?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iii-i", "html_url": "https://github.com/iii-i", "followers_url": "https://api.github.com/users/iii-i/followers", "following_url": "https://api.github.com/users/iii-i/following{/other_user}", "gists_url": "https://api.github.com/users/iii-i/gists{/gist_id}", "starred_url": "https://api.github.com/users/iii-i/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iii-i/subscriptions", "organizations_url": "https://api.github.com/users/iii-i/orgs", "repos_url": "https://api.github.com/users/iii-i/repos", "events_url": "https://api.github.com/users/iii-i/events{/privacy}", "received_events_url": "https://api.github.com/users/iii-i/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ca24bd34b6ac44c17f949d89ff60d0fd4665133", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ca24bd34b6ac44c17f949d89ff60d0fd4665133", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ca24bd34b6ac44c17f949d89ff60d0fd4665133"}], "stats": {"total": 27, "additions": 16, "deletions": 11}, "files": [{"sha": "0c5b4dc90293da99ba389e03da555184b5edea56", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22d834e32b509b22f68000b7f012d8e45d833ea8/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22d834e32b509b22f68000b7f012d8e45d833ea8/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=22d834e32b509b22f68000b7f012d8e45d833ea8", "patch": "@@ -9328,19 +9328,13 @@\n   \"\"\n   \"\")\n \n-; FIXME: The number of alternatives is doubled here to match the fix\n-; number of 2 in the subst pattern for the (clobber (match_scratch...\n-; The right fix should be to support match_scratch in the output\n-; pattern of a define_subst.\n (define_insn \"*ashrdi3_31<setcc><cconly>\"\n-  [(set (match_operand:DI 0 \"register_operand\"               \"=d, d\")\n-        (ashiftrt:DI (match_operand:DI 1 \"register_operand\"   \"0, 0\")\n-                     (match_operand:QI 2 \"shift_count_operand\" \"jsc,jsc\")))\n+  [(set (match_operand:DI 0 \"register_operand\"               \"=d\")\n+        (ashiftrt:DI (match_operand:DI 1 \"register_operand\"   \"0\")\n+                     (match_operand:QI 2 \"shift_count_operand\" \"jsc\")))\n    (clobber (reg:CC CC_REGNUM))]\n   \"!TARGET_ZARCH\"\n-  \"@\n-   srda\\t%0,%Y2\n-   srda\\t%0,%Y2\"\n+  \"srda\\t%0,%Y2\"\n   [(set_attr \"op_type\" \"RS\")\n    (set_attr \"atype\"   \"reg\")])\n "}, {"sha": "3ea6fc40ba82f32b65a369a31a3174ca49c6535b", "filename": "gcc/config/s390/subst.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22d834e32b509b22f68000b7f012d8e45d833ea8/gcc%2Fconfig%2Fs390%2Fsubst.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22d834e32b509b22f68000b7f012d8e45d833ea8/gcc%2Fconfig%2Fs390%2Fsubst.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fsubst.md?ref=22d834e32b509b22f68000b7f012d8e45d833ea8", "patch": "@@ -45,7 +45,7 @@\n   \"s390_match_ccmode(insn, CCSmode)\"\n   [(set (reg CC_REGNUM)\n \t(compare (match_dup 1) (const_int 0)))\n-   (clobber (match_scratch:DSI 0 \"=d,d\"))])\n+   (clobber (match_scratch:DSI 0 \"=d\"))])\n \n (define_subst_attr \"cconly\" \"cconly_subst\" \"\" \"_cconly\")\n "}, {"sha": "8cffdfa9a1d679396ba1c1f7cbaedea027aab77c", "filename": "gcc/testsuite/gcc.target/s390/ashr.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22d834e32b509b22f68000b7f012d8e45d833ea8/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fashr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22d834e32b509b22f68000b7f012d8e45d833ea8/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fashr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fashr.c?ref=22d834e32b509b22f68000b7f012d8e45d833ea8", "patch": "@@ -0,0 +1,11 @@\n+/* Test the arithmetic shift right pattern.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+int e(void);\n+\n+int f (long c, int b)\n+{\n+  return (c >> b) && e ();\n+}"}]}