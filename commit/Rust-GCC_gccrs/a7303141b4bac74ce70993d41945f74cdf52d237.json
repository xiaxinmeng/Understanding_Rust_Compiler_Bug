{"sha": "a7303141b4bac74ce70993d41945f74cdf52d237", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTczMDMxNDFiNGJhYzc0Y2U3MDk5M2Q0MTk0NWY3NGNkZjUyZDIzNw==", "commit": {"author": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1998-10-12T12:43:32Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1998-10-12T12:43:32Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r23019", "tree": {"sha": "9b34f30f9aadef0df59bf1774ac6449e570cb4f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b34f30f9aadef0df59bf1774ac6449e570cb4f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7303141b4bac74ce70993d41945f74cdf52d237", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7303141b4bac74ce70993d41945f74cdf52d237", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7303141b4bac74ce70993d41945f74cdf52d237", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7303141b4bac74ce70993d41945f74cdf52d237/comments", "author": null, "committer": null, "parents": [{"sha": "6d6044b0e6b2f58acef4fa2dbe5b39e331f3962e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d6044b0e6b2f58acef4fa2dbe5b39e331f3962e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d6044b0e6b2f58acef4fa2dbe5b39e331f3962e"}], "stats": {"total": 15, "additions": 7, "deletions": 8}, "files": [{"sha": "ef0181381e34257a5c6623d7ee77ac600e323473", "filename": "gcc/java/class.c", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7303141b4bac74ce70993d41945f74cdf52d237/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7303141b4bac74ce70993d41945f74cdf52d237/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=a7303141b4bac74ce70993d41945f74cdf52d237", "patch": "@@ -156,7 +156,7 @@ push_class (class_type, class_name)\n   input_filename = save_input_filename;\n   lineno = save_lineno;\n   signature = identifier_subst (class_name, \"L\", '.', '/', \";\");\n-  IDENTIFIER_SIGNATURE_TYPE (signature) = class_type;\n+  IDENTIFIER_SIGNATURE_TYPE (signature) = build_pointer_type (class_type);\n \n   /* Setting DECL_ARTIFICAL forces dbxout.c to specific the type is\n      both a typedef and in the struct name-space.  We may want to re-visit\n@@ -445,10 +445,6 @@ add_field (class, name, field_type, flags)\n   tree field;\n   /* Push the obstack of field_type ? FIXME */\n   push_obstacks (&permanent_obstack, &permanent_obstack);\n-#if ! JAVA_PROMOTE_TO_INT\n-  if (TREE_CODE (field_type) == RECORD_TYPE)\n-#endif\n-    field_type = promote_type (field_type);\n   field = build_decl (is_static ? VAR_DECL : FIELD_DECL, name, field_type);\n   pop_obstacks ();\n   TREE_CHAIN (field) = TYPE_FIELDS (class);\n@@ -464,8 +460,9 @@ add_field (class, name, field_type, flags)\n   if (is_static)\n     {\n       FIELD_STATIC (field) = 1;\n-      if (! FIELD_PRIVATE (field) || FIELD_PROTECTED (field))\n-\tTREE_PUBLIC (field) = 1;\n+      /* Always make field externally visible.  This is required so\n+\t that native methods can always access the field.  */\n+      TREE_PUBLIC (field) = 1;\n     }\n   return field;\n }\n@@ -1118,6 +1115,8 @@ make_class_data (type)\n   PUSH_FIELD_VALUE (cons, \"final\",\n \t\t    method == NULL ? integer_zero_node : integer_one_node);\n \n+  PUSH_FIELD_VALUE (cons, \"thread\", null_pointer_node);\n+\n   FINISH_RECORD_CONSTRUCTOR (cons);\n \n   DECL_INITIAL (decl) = cons;\n@@ -1598,5 +1597,5 @@ emit_register_class ()\n void\n init_class_processing ()\n {\n-  registerClass_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"registerClass\");\n+  registerClass_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"_Jv_RegisterClass\");\n }"}]}