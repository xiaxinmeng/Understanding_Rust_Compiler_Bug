{"sha": "2d57146b6ee86f1cbff948b98eecdc940c2f0412", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQ1NzE0NmI2ZWU4NmYxY2JmZjk0OGI5OGVlY2RjOTQwYzJmMDQxMg==", "commit": {"author": {"name": "Stan Cox", "email": "coxs@gnu.org", "date": "1994-03-01T17:08:55Z"}, "committer": {"name": "Stan Cox", "email": "coxs@gnu.org", "date": "1994-03-01T17:08:55Z"}, "message": "(GO_IF_LEGITIMATE_ADDRESS) Reject invalid PIC addresses.\n\nFrom-SVN: r6682", "tree": {"sha": "0f8bfd8b9c31f547f708337093185b851999aa77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f8bfd8b9c31f547f708337093185b851999aa77"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d57146b6ee86f1cbff948b98eecdc940c2f0412", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d57146b6ee86f1cbff948b98eecdc940c2f0412", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d57146b6ee86f1cbff948b98eecdc940c2f0412", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d57146b6ee86f1cbff948b98eecdc940c2f0412/comments", "author": null, "committer": null, "parents": [{"sha": "9fdd8bdb82f818f424632421f42ea58eec901687", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fdd8bdb82f818f424632421f42ea58eec901687", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fdd8bdb82f818f424632421f42ea58eec901687"}], "stats": {"total": 24, "additions": 21, "deletions": 3}, "files": [{"sha": "632bfae8b10b3c8d1f3288035d6d42f9380461e1", "filename": "gcc/config/m88k/m88k.h", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d57146b6ee86f1cbff948b98eecdc940c2f0412/gcc%2Fconfig%2Fm88k%2Fm88k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d57146b6ee86f1cbff948b98eecdc940c2f0412/gcc%2Fconfig%2Fm88k%2Fm88k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.h?ref=2d57146b6ee86f1cbff948b98eecdc940c2f0412", "patch": "@@ -197,13 +197,13 @@ extern char * reg_names[];\n    Redefined in sysv4.h, and luna.h.  */\n #define VERSION_INFO1\t\"88open OCS/BCS, \"\n #ifndef VERSION_INFO2\n-#define VERSION_INFO2   \"$Revision: 1.55 $\"\n+#define VERSION_INFO2   \"$Revision: 1.56 $\"\n #endif\n \n #ifndef VERSION_STRING\n #define VERSION_STRING  version_string\n #ifdef __STDC__\n-#define TM_RCS_ID      \"@(#)\" __FILE__ \" $Revision: 1.55 $ \" __DATE__\n+#define TM_RCS_ID      \"@(#)\" __FILE__ \" $Revision: 1.56 $ \" __DATE__\n #else\n #define TM_RCS_ID      \"$What$\"\n #endif  /* __STDC__ */\n@@ -1296,6 +1296,18 @@ enum reg_class { NO_REGS, AP_REG, XRF_REGS, GENERAL_REGS, AGRF_REGS,\n \t&& GET_CODE (XEXP (X, 1)) == CONST_INT\t\t\\\n \t&& INTVAL (XEXP (X, 1)) == GET_MODE_SIZE (MODE)))\n \n+#define RTX_OK_FOR_BASE_P(X)\t\t\t\t\t\t\\\n+  ((GET_CODE (X) == REG && REG_OK_FOR_BASE_P (X))\t\t\t\\\n+  || (GET_CODE (X) == SUBREG\t\t\t\t\t\t\\\n+      && GET_CODE (SUBREG_REG (X)) == REG\t\t\t\t\\\n+      && REG_OK_FOR_BASE_P (SUBREG_REG (X))))\n+\n+#define RTX_OK_FOR_INDEX_P(X)\t\t\t\t\t\t\\\n+  ((GET_CODE (X) == REG && REG_OK_FOR_INDEX_P (X))\t\t\t\\\n+  || (GET_CODE (X) == SUBREG\t\t\t\t\t\t\\\n+      && GET_CODE (SUBREG_REG (X)) == REG\t\t\t\t\\\n+      && REG_OK_FOR_INDEX_P (SUBREG_REG (X))))\n+\n #define GO_IF_LEGITIMATE_ADDRESS(MODE, X, ADDR)\t\t\\\n {\t\t\t\t\t\t\t\\\n   register rtx _x;\t\t\t\t\t\\\n@@ -1311,7 +1323,7 @@ enum reg_class { NO_REGS, AP_REG, XRF_REGS, GENERAL_REGS, AGRF_REGS,\n       if ((flag_pic\t\t\t\t\t\\\n \t   && _x0 == pic_offset_table_rtx\t\t\\\n \t   && (flag_pic == 2\t\t\t\t\\\n-\t       ? REG_P (_x1)\t\t\t\t\\\n+\t       ? RTX_OK_FOR_BASE_P (_x1)\t\t\\\n \t       : (GET_CODE (_x1) == SYMBOL_REF\t\t\\\n \t\t  || GET_CODE (_x1) == LABEL_REF)))\t\\\n \t  || (REG_P (_x0)\t\t\t\t\\\n@@ -1402,6 +1414,12 @@ enum reg_class { NO_REGS, AP_REG, XRF_REGS, GENERAL_REGS, AGRF_REGS,\n   if (GET_CODE (X) == PLUS && GET_CODE (XEXP (X, 1)) == MULT)\t\\\n     (X) = gen_rtx (PLUS, SImode, XEXP (X, 0),\t\t\t\\\n \t\t   force_operand (XEXP (X, 1), 0));\t\t\\\n+  if (GET_CODE (X) == PLUS && GET_CODE (XEXP (X, 0)) == PLUS)\t\\\n+    (X) = gen_rtx (PLUS, Pmode, force_operand (XEXP (X, 0), NULL_RTX),\\\n+\t\t   XEXP (X, 1));\t\t\t\t\\\n+  if (GET_CODE (X) == PLUS && GET_CODE (XEXP (X, 1)) == PLUS)\t\\\n+    (X) = gen_rtx (PLUS, Pmode, XEXP (X, 0),\t\t\t\\\n+\t\t   force_operand (XEXP (X, 1), NULL_RTX));\t\\\n   if (GET_CODE (X) == SYMBOL_REF || GET_CODE (X) == CONST\t\\\n \t   || GET_CODE (X) == LABEL_REF)\t\t\t\\\n     (X) = legitimize_address (flag_pic, X, 0, 0);\t\t\\"}]}