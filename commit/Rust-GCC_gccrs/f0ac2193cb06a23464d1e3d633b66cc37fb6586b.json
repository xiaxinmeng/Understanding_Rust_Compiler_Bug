{"sha": "f0ac2193cb06a23464d1e3d633b66cc37fb6586b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjBhYzIxOTNjYjA2YTIzNDY0ZDFlM2Q2MzNiNjZjYzM3ZmI2NTg2Yg==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2005-12-16T23:59:10Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2005-12-16T23:59:10Z"}, "message": "update_web_docs_svn: Remove unnecessary files from source tree.\n\n\t* update_web_docs_svn: Remove unnecessary files from source tree.\n\tUse set -e.\n\t* doc_exclude, update_web_docs, update_web_docs_libstdcxx: Remove.\n\nFrom-SVN: r108698", "tree": {"sha": "aed69468a1202ef3a63bdc9c8af4a0c4392167b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aed69468a1202ef3a63bdc9c8af4a0c4392167b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f0ac2193cb06a23464d1e3d633b66cc37fb6586b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0ac2193cb06a23464d1e3d633b66cc37fb6586b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0ac2193cb06a23464d1e3d633b66cc37fb6586b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0ac2193cb06a23464d1e3d633b66cc37fb6586b/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01578564782255d41967745d43d11720cee0ad6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01578564782255d41967745d43d11720cee0ad6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01578564782255d41967745d43d11720cee0ad6d"}], "stats": {"total": 299, "additions": 29, "deletions": 270}, "files": [{"sha": "ca702948b42e5e57ed488e210f88190aad7033cd", "filename": "maintainer-scripts/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0ac2193cb06a23464d1e3d633b66cc37fb6586b/maintainer-scripts%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0ac2193cb06a23464d1e3d633b66cc37fb6586b/maintainer-scripts%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/maintainer-scripts%2FChangeLog?ref=f0ac2193cb06a23464d1e3d633b66cc37fb6586b", "patch": "@@ -1,3 +1,9 @@\n+2005-12-16  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\t* update_web_docs_svn: Remove unnecessary files from source tree.\n+\tUse set -e.\n+\t* doc_exclude, update_web_docs, update_web_docs_libstdcxx: Remove.\n+\n 2005-12-16  Mark Mitchell  <mark@codesourcery.com>\n \n \t* update_web_docs_svn: Set @srcdir in gcc-vers.texi. "}, {"sha": "0efe47a702e4dac9bec0155be1d9e47bccfa8974", "filename": "maintainer-scripts/doc_exclude", "status": "removed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01578564782255d41967745d43d11720cee0ad6d/maintainer-scripts%2Fdoc_exclude", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01578564782255d41967745d43d11720cee0ad6d/maintainer-scripts%2Fdoc_exclude", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/maintainer-scripts%2Fdoc_exclude?ref=01578564782255d41967745d43d11720cee0ad6d", "patch": "@@ -1,2 +0,0 @@\n-texinfo\n-etc"}, {"sha": "6c14c68b0707bbd454160afc734a8a049ce54e21", "filename": "maintainer-scripts/update_web_docs", "status": "removed", "additions": 0, "deletions": 180, "changes": 180, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01578564782255d41967745d43d11720cee0ad6d/maintainer-scripts%2Fupdate_web_docs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01578564782255d41967745d43d11720cee0ad6d/maintainer-scripts%2Fupdate_web_docs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/maintainer-scripts%2Fupdate_web_docs?ref=01578564782255d41967745d43d11720cee0ad6d", "patch": "@@ -1,180 +0,0 @@\n-#!/bin/sh -x\n-\n-# Generate HTML documentation from GCC Texinfo docs.\n-# This version is for GCC 3.1 and later versions.\n-\n-# Run this from /tmp.\n-CVSROOT=/cvs/gcc\n-export CVSROOT\n-\n-PATH=/usr/local/bin:$PATH\n-\n-WWWBASE=/www/gcc/htdocs\n-WWWBASE_PREFORMATTED=/www/gcc/htdocs-preformatted\n-WWWPREPROCESS='/www/gcc/bin/preprocess -r'\n-\n-# Process options -rrelease and -ddirectory\n-RELEASE=\"\"\n-SUBDIR=\"\"\n-\n-while [ $# -gt 0 ]; do\n-  case $1 in\n-    -r*)\n-      if [ -n \"$RELEASE\" ]; then\n-        echo \"Multiple releases specified\" >&2\n-\texit 1\n-      fi\n-      RELEASE=\"${1#-r}\"\n-      if [ -z \"$RELEASE\" ]; then\n-\tshift\n-\tRELEASE=\"$1\"\n-\tif [ -z \"$RELEASE\" ]; then\n-\t  echo \"No release specified with -r\" >&2\n-\t  exit 1\n-\tfi\n-      fi\n-      ;;\n-    -d*)\n-      if [ -n \"$SUBDIR\" ]; then\n-        echo \"Multiple subdirectories specified\" >&2\n-\texit 1\n-      fi\n-      SUBDIR=\"${1#-d}\"\n-      if [ -z \"$SUBDIR\" ]; then\n-\tshift\n-\tSUBDIR=\"$1\"\n-\tif [ -z \"$SUBDIR\" ]; then\n-\t  echo \"No subdirectory specified with -d\" >&2\n-\t  exit 1\n-\tfi\n-      fi\n-      ;;\n-    *)\n-      echo \"Unknown argument \\\"$1\\\"\" >&2\n-      exit 1\n-      ;;\n-  esac\n-  shift\n-done\n-\n-if [ -n \"$RELEASE\" ] && [ -z \"$SUBDIR\" ]; then\n-  echo \"Release specified without subdirectory\" >&2\n-  exit 1\n-fi\n-\n-if [ -z \"$SUBDIR\" ]; then\n-  DOCSDIR=$WWWBASE/onlinedocs\n-else\n-  DOCSDIR=$WWWBASE/onlinedocs/$SUBDIR\n-fi\n-\n-if [ ! -d $DOCSDIR ]; then\n-  mkdir $DOCSDIR\n-fi\n-\n-if [ -z \"$RELEASE\" ]; then\n-  RELEASE=HEAD\n-fi\n-\n-WORKDIR=/tmp/gcc-doc-update.$$\n-\n-/bin/rm -rf $WORKDIR\n-/bin/mkdir $WORKDIR\n-cd $WORKDIR\n-\n-# Find all the texi files in the repository, except those in directories\n-# we do not care about (texinfo, etc).\n-find $CVSROOT/gcc -name \\*.texi,v -print | fgrep -v -f/home/gccadmin/scripts/doc_exclude | sed -e s#$CVSROOT/##g -e s#,v##g -e s#Attic/##g > FILES\n-\n-\n-# Checkout all the texi files.\n-cvs -Q export -r$RELEASE `cat FILES` gcc/gcc/doc/install.texi2html gcc/gcc/doc/include/texinfo.tex gcc/gcc/ada/xgnatugn.adb gcc/gcc/ada/ug_words gcc/gcc/BASE-VER gcc/gcc/DEV-PHASE\n-\n-# Build a tarball of the sources.\n-tar cf docs-sources.tar gcc\n-\n-# The directory to pass to -I; this is the one with texinfo.tex\n-# and fdl.texi.\n-includedir=gcc/gcc/doc/include\n-\n-MANUALS=\"cpp cppinternals fastjar gcc gccint gcj g77 gfortran gnat_ug_unx gnat_ug_vms gnat_ug_vxw gnat_ug_wnt gnat_ugn_unw gnat-style gnat_rm libiberty porting\"\n-\n-# Generate gnat_ugn_unw\n-\n-if [ -f gcc/gcc/ada/xgnatugn.adb ]; then\n-   gnatmake -q gcc/gcc/ada/xgnatugn\n-   ./xgnatugn unw gcc/gcc/ada/gnat_ugn.texi \\\n-     gcc/gcc/ada/ug_words gnat_ugn_unw.texi\n-fi\n-\n-# Generate gcc-vers.texi.\n-(\n-   echo \"@set version-GCC $(cat gcc/gcc/BASE-VER)\"\n-   if [ \"$(cat gcc/gcc/DEV-PHASE)\" = \"experimental\" ]; then\n-      echo \"@set DEVELOPMENT\"\n-   else\n-      echo \"@clear DEVELOPMENT\"\n-   fi\n-) > $includedir/gcc-vers.texi\n-\n-# Now convert the relevant files from texi to HTML, PDF and PostScript.\n-for file in $MANUALS; do\n-  filename=`find . -name ${file}.texi`\n-  if [ \"${filename}\" ]; then\n-    makeinfo --html -I ${includedir} -I `dirname ${filename}` ${filename}\n-    tar cf ${file}-html.tar ${file}/*.html\n-    texi2dvi -I ${includedir} ${filename} </dev/null && dvips -o ${file}.ps ${file}.dvi\n-    texi2pdf -I ${includedir} ${filename} </dev/null\n-    mkdir -p $DOCSDIR/$file\n-  fi\n-done\n-\n-# Then build a gzipped copy of each of the resulting .html, .ps and .tar files\n-for file in */*.html *.ps *.pdf *.tar; do\n-  cat $file | gzip --best > $file.gz\n-done\n-\n-# On the 15th of the month, wipe all the old files from the\n-# web server.\n-today=`date +%d`\n-if test $today = 15; then\n-  find $DOCSDIR -type f -maxdepth 1 -print | grep -v index.html | xargs rm\n-  for m in $MANUALS; do\n-    rm $DOCSDIR/$m/*.html $DOCSDIR/$m/*.html.gz\n-  done\n-fi\n-\n-# And copy the resulting files to the web server\n-for file in */*.html *.ps *.pdf *.tar; do\n-  cat $DOCSDIR/$file | \n-    sed -e '/^<meta name=generator/d' \\\n-        -e '/^%DVIPSSource:/d' > file1\n-  cat $file |\n-    sed -e '/^<meta name=generator/d' \\\n-        -e '/^%DVIPSSource:/d' > file2\n-  if cmp -s file1 file2; then\n-    :\n-  else\n-    cp $file $DOCSDIR/$file\n-    cp $file.gz $DOCSDIR/$file.gz\n-  fi\n-done\n-\n-cd $DOCSDIR\n-\n-# Finally, generate the installation documentation (but only for CVS HEAD).\n-if [ \"$RELEASE\" = \"HEAD\" ]; then\n-  SOURCEDIR=$WORKDIR/gcc/gcc/doc\n-  DESTDIR=$WWWBASE_PREFORMATTED/install\n-  export SOURCEDIR\n-  export DESTDIR\n-  $WORKDIR/gcc/gcc/doc/install.texi2html\n-\n-  # Preprocess the entire web site, not just the install docs!\n-  echo \"Invoking $WWWPREPROCESS\"\n-  $WWWPREPROCESS |grep -v '^  Warning: Keeping'\n-fi\n-\n-# Clean up behind us.\n-\n-rm -rf $WORKDIR"}, {"sha": "7aad551ea9eac1d33942acc911131d8788346899", "filename": "maintainer-scripts/update_web_docs_libstdcxx", "status": "removed", "additions": 0, "deletions": 54, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01578564782255d41967745d43d11720cee0ad6d/maintainer-scripts%2Fupdate_web_docs_libstdcxx", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01578564782255d41967745d43d11720cee0ad6d/maintainer-scripts%2Fupdate_web_docs_libstdcxx", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/maintainer-scripts%2Fupdate_web_docs_libstdcxx?ref=01578564782255d41967745d43d11720cee0ad6d", "patch": "@@ -1,54 +0,0 @@\n-#!/bin/sh\n-\n-\n-# \"sh update_web_docs_libstdcxx.sh\"\n-# Checks out a copy of the libstdc++-v3 \"inner\" documentation and puts\n-# it in the onlinedocs area.  For an initial description of \"inner\"\n-# docs, see the thread starting with \n-#     http://gcc.gnu.org/ml/libstdc++/2000-11/msg00475.html\n-#\n-# Id: update_v3_web_docs.sh,v 1.4 2000/12/25 05:02:14 pedwards Exp\n-#####################################################################\n-\n-CVSROOT=/cvs/gcc\n-GETTHIS='gcc/libstdc++-v3/docs/html'\n-WWWDIR=/www/gcc/htdocs/onlinedocs/libstdc++\n-#WWWDIR=/tmp/fake-onlinedocs-testing\n-\n-\n-## No more changes should be needed.  Ha, right, whatever.\n-#####################################################################\n-\n-\n-PATH=/usr/local/bin:$PATH\n-export CVSROOT\n-\n-test -d $WWWDIR || /bin/mkdir $WWWDIR\n-test -d $WWWDIR || { echo something is very wrong ; exit 1; }\n-\n-WORKDIR=/tmp/v3-doc-update.$$\n-/bin/rm -rf $WORKDIR\n-/bin/mkdir $WORKDIR\n-cd $WORKDIR\n-\n-\n-# checkout all the HTML files, get down into an interesting directory\n-cvs -Q co $GETTHIS\n-cd $GETTHIS\n-\n-# pity the cvs 'export' would require a tag... maybe gcc_latest_snapshot\n-# would be recent enough?  anyhow, get rid of the CVS dirs in the tree\n-find . -type d -name CVS -print | xargs rm -r Makefile\n-\n-# build a compressed copy of the HTML, preserve directory structure\n-for file in `find . -name \"*.html\" -print`; do\n-    gzip --best < $file > $file.gz\n-done\n-\n-# copy the tree to the onlinedocs area, preserve directory structure\n-#find . -depth -print | cpio -pdv $WWWDIR\n-find . -depth -print | cpio -pd $WWWDIR > /dev/null 2>&1\n-\n-cd /\n-/bin/rm -rf $WORKDIR\n-"}, {"sha": "ab991bbf1ac6130af98f469b7661717d6a5e0f40", "filename": "maintainer-scripts/update_web_docs_svn", "status": "modified", "additions": 23, "deletions": 34, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0ac2193cb06a23464d1e3d633b66cc37fb6586b/maintainer-scripts%2Fupdate_web_docs_svn", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0ac2193cb06a23464d1e3d633b66cc37fb6586b/maintainer-scripts%2Fupdate_web_docs_svn", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/maintainer-scripts%2Fupdate_web_docs_svn?ref=f0ac2193cb06a23464d1e3d633b66cc37fb6586b", "patch": "@@ -3,6 +3,8 @@\n # Generate HTML documentation from GCC Texinfo docs.\n # This version is for GCC 3.1 and later versions.\n \n+set -e\n+\n # Run this from /tmp.\n SVNROOT=${SVNROOT:-\"file:///svn/gcc\"}\n export SVNROOT\n@@ -78,43 +80,28 @@ fi\n \n WORKDIR=/tmp/gcc-doc-update.$$\n \n-/bin/rm -rf $WORKDIR\n-/bin/mkdir $WORKDIR\n+rm -rf $WORKDIR\n+mkdir $WORKDIR\n cd $WORKDIR\n-# Find all the texi files in the repository, except those in directories\n-# we do not care about (texinfo, etc).\n if [ \"$RELEASE\" = \"trunk\" ]; then\n-  svn ls -R $SVNROOT/$RELEASE/gcc | grep \"\\.texi$\" |fgrep -v -f/home/gccadmin/scripts/doc_exclude > FILES\n-  # SVN export doesn't function like CVS, in that it doesn't create an entire empty path structure\n-  # Thus, it's easiest to just export the entire tree\n   svn -q export $SVNROOT/$RELEASE gcc\n-#  # Checkout all the texi files.\n-#  for i in `cat FILES`; do\n-#    svn -q export $SVNROOT/$RELEASE/gcc/$i\n-#  done\n-#  svn -q export $SVNROOT/$RELEASE/gcc/doc/install.texi2html \n-#  svn -q export $SVNROOT/$RELEASE/gcc/doc/include/texinfo.tex \n-#  svn -q export $SVNROOT/$RELEASE/gcc/ada/xgnatugn.adb \n-#  svn -q export $SVNROOT/$RELEASE/gcc/ada/ug_words\n-#  svn -q export $SVNROOT/$RELEASE/gcc/BASE-VER\n-#  svn -q export $SVNROOT/$RELEASE/gcc/DEV-PHASE\n else\n-  svn ls -R $SVNROOT/tags/$RELEASE/gcc | grep \"\\.texi$\" |fgrep -v -f/home/gccadmin/scripts/doc_exclude > FILES\n-  # SVN export doesn't function like CVS, in that it doesn't create an entire empty path structure\n-  # Thus, it's easiest to just export the entire tree\n   svn -q export $SVNROOT/tags/$RELEASE gcc\n-#  # Checkout all the texi files.\n-#  for i in `cat FILES`; do\n-#    svn -q export $SVNROOT/tags/$RELEASE/gcc/$i\n-#  done\n-#  svn -q export $SVNROOT/tags/$RELEASE/gcc/doc/install.texi2html \n-#  svn -q export $SVNROOT/tags/$RELEASE/gcc/doc/include/texinfo.tex \n-#  svn -q export $SVNROOT/tags/$RELEASE/gcc/ada/xgnatugn.adb \n-#  svn -q export $SVNROOT/tags/$RELEASE/gcc/ada/ug_words\n-#  svn -q export $SVNROOT/tags/$RELEASE/gcc/BASE-VER\n-#  svn -q export $SVNROOT/tags/$RELEASE/gcc/DEV-PHASE\n fi\n \n+# Remove all unwanted files.  This is needed (a) to build the Ada\n+# generator programs with the installed library, not the new one and\n+# (b) to avoid packaging all the sources instead of only documentation\n+# sources.\n+find gcc -type f \\( -name '*.texi' \\\n+  -o -path gcc/gcc/doc/install.texi2html \\\n+  -o -path gcc/gcc/doc/include/texinfo.tex \\\n+  -o -path gcc/gcc/ada/xgnatugn.adb \\\n+  -o -path gcc/gcc/ada/ug_words \\\n+  -o -path gcc/gcc/BASE-VER \\\n+  -o -path gcc/gcc/DEV-PHASE \\\n+  -o -print0 \\) | xargs -0 rm -f\n+\n # Build a tarball of the sources.\n tar cf docs-sources.tar gcc\n \n@@ -166,15 +153,17 @@ today=`date +%d`\n if test $today = 15; then\n   find $DOCSDIR -type f -maxdepth 1 -print | grep -v index.html | xargs rm\n   for m in $MANUALS; do\n-    rm $DOCSDIR/$m/*.html $DOCSDIR/$m/*.html.gz\n+    rm -f $DOCSDIR/$m/*.html $DOCSDIR/$m/*.html.gz\n   done\n fi\n \n # And copy the resulting files to the web server\n for file in */*.html *.ps *.pdf *.tar; do\n-  cat $DOCSDIR/$file | \n-    sed -e '/^<meta name=generator/d' \\\n-        -e '/^%DVIPSSource:/d' > file1\n+  if [ -f $DOCSDIR/$file ]; then\n+    cat $DOCSDIR/$file | \n+      sed -e '/^<meta name=generator/d' \\\n+          -e '/^%DVIPSSource:/d' > file1\n+  fi\n   cat $file |\n     sed -e '/^<meta name=generator/d' \\\n         -e '/^%DVIPSSource:/d' > file2"}]}