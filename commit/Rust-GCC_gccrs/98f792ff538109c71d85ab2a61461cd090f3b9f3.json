{"sha": "98f792ff538109c71d85ab2a61461cd090f3b9f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OThmNzkyZmY1MzgxMDljNzFkODVhYjJhNjE0NjFjZDA5MGYzYjlmMw==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-11-13T16:03:23Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-11-13T16:28:49Z"}, "message": "libsanitizer: merge from master.", "tree": {"sha": "99bf74a06438f0328ade0591a0df6e6cf0572ddb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/99bf74a06438f0328ade0591a0df6e6cf0572ddb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/98f792ff538109c71d85ab2a61461cd090f3b9f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98f792ff538109c71d85ab2a61461cd090f3b9f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98f792ff538109c71d85ab2a61461cd090f3b9f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98f792ff538109c71d85ab2a61461cd090f3b9f3/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a514934a0565255276adaa4fbd4aa35579ec33c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a514934a0565255276adaa4fbd4aa35579ec33c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a514934a0565255276adaa4fbd4aa35579ec33c6"}], "stats": {"total": 1895, "additions": 580, "deletions": 1315}, "files": [{"sha": "2df9b4637b17bfb59208b813c6fe5327a1e72e91", "filename": "libsanitizer/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2FMERGE?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -1,4 +1,4 @@\n-51ff04567b2f8d06b2062bd3ed72eab2e93e4466\n+a28a466210199559d38251c11f30515cc83eadd6\n \n The first line of this file holds the git revision number of the\n last merge done from the master library sources."}, {"sha": "6c61344f87cfe210edc9ad721461b6f0e7df3b6f", "filename": "libsanitizer/asan/asan_fuchsia.cpp", "status": "modified", "additions": 19, "deletions": 12, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fasan%2Fasan_fuchsia.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fasan%2Fasan_fuchsia.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fasan%2Fasan_fuchsia.cpp?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -91,8 +91,7 @@ struct AsanThread::InitOptions {\n // Shared setup between thread creation and startup for the initial thread.\n static AsanThread *CreateAsanThread(StackTrace *stack, u32 parent_tid,\n                                     uptr user_id, bool detached,\n-                                    const char *name, uptr stack_bottom,\n-                                    uptr stack_size) {\n+                                    const char *name) {\n   // In lieu of AsanThread::Create.\n   AsanThread *thread = (AsanThread *)MmapOrDie(AsanThreadMmapSize(), __func__);\n \n@@ -101,12 +100,6 @@ static AsanThread *CreateAsanThread(StackTrace *stack, u32 parent_tid,\n       asanThreadRegistry().CreateThread(user_id, detached, parent_tid, &args);\n   asanThreadRegistry().SetThreadName(tid, name);\n \n-  // On other systems, AsanThread::Init() is called from the new\n-  // thread itself.  But on Fuchsia we already know the stack address\n-  // range beforehand, so we can do most of the setup right now.\n-  const AsanThread::InitOptions options = {stack_bottom, stack_size};\n-  thread->Init(&options);\n-\n   return thread;\n }\n \n@@ -135,9 +128,16 @@ AsanThread *CreateMainThread() {\n       _zx_object_get_property(thrd_get_zx_handle(self), ZX_PROP_NAME, name,\n                               sizeof(name)) == ZX_OK\n           ? name\n-          : nullptr,\n-      __sanitizer::MainThreadStackBase, __sanitizer::MainThreadStackSize);\n+          : nullptr);\n+  // We need to set the current thread before calling AsanThread::Init() below,\n+  // since it reads the thread ID.\n   SetCurrentThread(t);\n+  DCHECK_EQ(t->tid(), 0);\n+\n+  const AsanThread::InitOptions options = {__sanitizer::MainThreadStackBase,\n+                                           __sanitizer::MainThreadStackSize};\n+  t->Init(&options);\n+\n   return t;\n }\n \n@@ -153,8 +153,15 @@ static void *BeforeThreadCreateHook(uptr user_id, bool detached,\n   GET_STACK_TRACE_THREAD;\n   u32 parent_tid = GetCurrentTidOrInvalid();\n \n-  return CreateAsanThread(&stack, parent_tid, user_id, detached, name,\n-                          stack_bottom, stack_size);\n+  AsanThread *thread =\n+      CreateAsanThread(&stack, parent_tid, user_id, detached, name);\n+\n+  // On other systems, AsanThread::Init() is called from the new\n+  // thread itself.  But on Fuchsia we already know the stack address\n+  // range beforehand, so we can do most of the setup right now.\n+  const AsanThread::InitOptions options = {stack_bottom, stack_size};\n+  thread->Init(&options);\n+  return thread;\n }\n \n // This is called after creating a new thread (in the creating thread),"}, {"sha": "9d7dbc6f264cea7b80a71a91da37cfa0cfbbd0db", "filename": "libsanitizer/asan/asan_globals.cpp", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fasan%2Fasan_globals.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fasan%2Fasan_globals.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fasan%2Fasan_globals.cpp?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -154,6 +154,23 @@ static void CheckODRViolationViaIndicator(const Global *g) {\n   }\n }\n \n+// Check ODR violation for given global G by checking if it's already poisoned.\n+// We use this method in case compiler doesn't use private aliases for global\n+// variables.\n+static void CheckODRViolationViaPoisoning(const Global *g) {\n+  if (__asan_region_is_poisoned(g->beg, g->size_with_redzone)) {\n+    // This check may not be enough: if the first global is much larger\n+    // the entire redzone of the second global may be within the first global.\n+    for (ListOfGlobals *l = list_of_all_globals; l; l = l->next) {\n+      if (g->beg == l->g->beg &&\n+          (flags()->detect_odr_violation >= 2 || g->size != l->g->size) &&\n+          !IsODRViolationSuppressed(g->name))\n+        ReportODRViolation(g, FindRegistrationSite(g),\n+                           l->g, FindRegistrationSite(l->g));\n+    }\n+  }\n+}\n+\n // Clang provides two different ways for global variables protection:\n // it can poison the global itself or its private alias. In former\n // case we may poison same symbol multiple times, that can help us to\n@@ -199,6 +216,8 @@ static void RegisterGlobal(const Global *g) {\n     // where two globals with the same name are defined in different modules.\n     if (UseODRIndicator(g))\n       CheckODRViolationViaIndicator(g);\n+    else\n+      CheckODRViolationViaPoisoning(g);\n   }\n   if (CanPoisonMemory())\n     PoisonRedZones(*g);"}, {"sha": "8e9525673d12ae469afc508e7d6a3756af07d60a", "filename": "libsanitizer/asan/asan_interceptors.h", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fasan%2Fasan_interceptors.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fasan%2Fasan_interceptors.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fasan%2Fasan_interceptors.h?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -81,12 +81,7 @@ void InitializePlatformInterceptors();\n #if ASAN_HAS_EXCEPTIONS && !SANITIZER_WINDOWS && !SANITIZER_SOLARIS && \\\n     !SANITIZER_NETBSD\n # define ASAN_INTERCEPT___CXA_THROW 1\n-# if ! defined(ASAN_HAS_CXA_RETHROW_PRIMARY_EXCEPTION) \\\n-     || ASAN_HAS_CXA_RETHROW_PRIMARY_EXCEPTION\n-#   define ASAN_INTERCEPT___CXA_RETHROW_PRIMARY_EXCEPTION 1\n-# else\n-#   define ASAN_INTERCEPT___CXA_RETHROW_PRIMARY_EXCEPTION 0\n-# endif\n+# define ASAN_INTERCEPT___CXA_RETHROW_PRIMARY_EXCEPTION 1\n # if defined(_GLIBCXX_SJLJ_EXCEPTIONS) || (SANITIZER_IOS && defined(__arm__))\n #  define ASAN_INTERCEPT__UNWIND_SJLJ_RAISEEXCEPTION 1\n # else"}, {"sha": "f239c3ee2ff924bd8fbacf6b02e6ac4715ae38f8", "filename": "libsanitizer/asan/asan_mapping.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fasan%2Fasan_mapping.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fasan%2Fasan_mapping.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fasan%2Fasan_mapping.h?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -178,7 +178,7 @@ static const u64 kAArch64_ShadowOffset64 = 1ULL << 36;\n static const u64 kRiscv64_ShadowOffset64 = 0x20000000;\n static const u64 kMIPS32_ShadowOffset32 = 0x0aaa0000;\n static const u64 kMIPS64_ShadowOffset64 = 1ULL << 37;\n-static const u64 kPPC64_ShadowOffset64 = 1ULL << 41;\n+static const u64 kPPC64_ShadowOffset64 = 1ULL << 44;\n static const u64 kSystemZ_ShadowOffset64 = 1ULL << 52;\n static const u64 kSPARC64_ShadowOffset64 = 1ULL << 43;  // 0x80000000000\n static const u64 kFreeBSD_ShadowOffset32 = 1ULL << 30;  // 0x40000000"}, {"sha": "03f1ed2b0186642551251ec95e75c8cdb9452f45", "filename": "libsanitizer/asan/asan_report.cpp", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fasan%2Fasan_report.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fasan%2Fasan_report.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fasan%2Fasan_report.cpp?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -151,7 +151,8 @@ class ScopedInErrorReport {\n     if (common_flags()->print_cmdline)\n       PrintCmdline();\n \n-    if (common_flags()->print_module_map == 2) PrintModuleMap();\n+    if (common_flags()->print_module_map == 2)\n+      DumpProcessMap();\n \n     // Copy the message buffer so that we could start logging without holding a\n     // lock that gets aquired during printing."}, {"sha": "7b5a929963c6ad471f3907acaa49325716750721", "filename": "libsanitizer/asan/asan_rtl.cpp", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fasan%2Fasan_rtl.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fasan%2Fasan_rtl.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fasan%2Fasan_rtl.cpp?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -45,7 +45,8 @@ static void AsanDie() {\n     // Don't die twice - run a busy loop.\n     while (1) { }\n   }\n-  if (common_flags()->print_module_map >= 1) PrintModuleMap();\n+  if (common_flags()->print_module_map >= 1)\n+    DumpProcessMap();\n   if (flags()->sleep_before_dying) {\n     Report(\"Sleeping for %d second(s)\\n\", flags()->sleep_before_dying);\n     SleepForSeconds(flags()->sleep_before_dying);"}, {"sha": "fb09af0eccabbace0012e20fcf30085d1289c9a9", "filename": "libsanitizer/asan/asan_thread.cpp", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fasan%2Fasan_thread.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fasan%2Fasan_thread.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fasan%2Fasan_thread.cpp?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -188,7 +188,7 @@ uptr AsanThread::stack_size() {\n   return bounds.top - bounds.bottom;\n }\n \n-// We want to create the FakeStack lazyly on the first use, but not eralier\n+// We want to create the FakeStack lazily on the first use, but not earlier\n // than the stack size is known and the procedure has to be async-signal safe.\n FakeStack *AsanThread::AsyncSignalSafeLazyInitFakeStack() {\n   uptr stack_size = this->stack_size();\n@@ -211,13 +211,15 @@ FakeStack *AsanThread::AsyncSignalSafeLazyInitFakeStack() {\n     stack_size_log =\n         Max(stack_size_log, static_cast<uptr>(flags()->min_uar_stack_size_log));\n     fake_stack_ = FakeStack::Create(stack_size_log);\n+    DCHECK_EQ(GetCurrentThread(), this);\n     SetTLSFakeStack(fake_stack_);\n     return fake_stack_;\n   }\n   return nullptr;\n }\n \n void AsanThread::Init(const InitOptions *options) {\n+  DCHECK_NE(tid(), ThreadRegistry::kUnknownTid);\n   next_stack_top_ = next_stack_bottom_ = 0;\n   atomic_store(&stack_switching_, false, memory_order_release);\n   CHECK_EQ(this->stack_size(), 0U);\n@@ -229,8 +231,17 @@ void AsanThread::Init(const InitOptions *options) {\n   }\n   ClearShadowForThreadStackAndTLS();\n   fake_stack_ = nullptr;\n-  if (__asan_option_detect_stack_use_after_return)\n+  if (__asan_option_detect_stack_use_after_return &&\n+      tid() == GetCurrentTidOrInvalid()) {\n+    // AsyncSignalSafeLazyInitFakeStack makes use of threadlocals and must be\n+    // called from the context of the thread it is initializing, not its parent.\n+    // Most platforms call AsanThread::Init on the newly-spawned thread, but\n+    // Fuchsia calls this function from the parent thread.  To support that\n+    // approach, we avoid calling AsyncSignalSafeLazyInitFakeStack here; it will\n+    // be called by the new thread when it first attempts to access the fake\n+    // stack.\n     AsyncSignalSafeLazyInitFakeStack();\n+  }\n   int local = 0;\n   VReport(1, \"T%d: stack [%p,%p) size 0x%zx; local=%p\\n\", tid(),\n           (void *)stack_bottom_, (void *)stack_top_, stack_top_ - stack_bottom_,"}, {"sha": "ea58de4216a441edb50d69e629cc5d2a1e7a2c75", "filename": "libsanitizer/asan/asan_thread.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fasan%2Fasan_thread.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fasan%2Fasan_thread.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fasan%2Fasan_thread.h?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -35,7 +35,7 @@ class AsanThread;\n \n // These objects are created for every thread and are never deleted,\n // so we can find them by tid even if the thread is long dead.\n-class AsanThreadContext : public ThreadContextBase {\n+class AsanThreadContext final : public ThreadContextBase {\n  public:\n   explicit AsanThreadContext(int tid)\n       : ThreadContextBase(tid), announced(false),"}, {"sha": "a72126051003c69ea30f48d67cc6d00d40d1574d", "filename": "libsanitizer/include/sanitizer/memprof_interface.h", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Finclude%2Fsanitizer%2Fmemprof_interface.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Finclude%2Fsanitizer%2Fmemprof_interface.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Finclude%2Fsanitizer%2Fmemprof_interface.h?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -0,0 +1,60 @@\n+//===-- sanitizer/memprof_interface.h --------------------------*- C++ -*-===//\n+//\n+// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.\n+// See https://llvm.org/LICENSE.txt for license information.\n+// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n+//\n+//===----------------------------------------------------------------------===//\n+//\n+// This file is a part of MemProfiler (MemProf).\n+//\n+// Public interface header.\n+//===----------------------------------------------------------------------===//\n+#ifndef SANITIZER_MEMPROF_INTERFACE_H\n+#define SANITIZER_MEMPROF_INTERFACE_H\n+\n+#include <sanitizer/common_interface_defs.h>\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+/// Records access to a memory region (<c>[addr, addr+size)</c>).\n+///\n+/// This memory must be previously allocated by your program.\n+///\n+/// \\param addr Start of memory region.\n+/// \\param size Size of memory region.\n+void __memprof_record_access_range(void const volatile *addr, size_t size);\n+\n+/// Records access to a memory address <c><i>addr</i></c>.\n+///\n+/// This memory must be previously allocated by your program.\n+///\n+/// \\param addr Accessed memory address\n+void __memprof_record_access(void const volatile *addr);\n+\n+/// User-provided callback on MemProf errors.\n+///\n+/// You can provide a function that would be called immediately when MemProf\n+/// detects an error. This is useful in cases when MemProf detects an error but\n+/// your program crashes before the MemProf report is printed.\n+void __memprof_on_error(void);\n+\n+/// Prints accumulated statistics to <c>stderr</c> (useful for calling from the\n+/// debugger).\n+void __memprof_print_accumulated_stats(void);\n+\n+/// User-provided default option settings.\n+///\n+/// You can provide your own implementation of this function to return a string\n+/// containing MemProf runtime options (for example,\n+/// <c>verbosity=1:print_stats=1</c>).\n+///\n+/// \\returns Default options string.\n+const char *__memprof_default_options(void);\n+\n+#ifdef __cplusplus\n+} // extern \"C\"\n+#endif\n+\n+#endif // SANITIZER_MEMPROF_INTERFACE_H"}, {"sha": "cb0b5284ed268d7e99a7c07352c13e5a3550e697", "filename": "libsanitizer/interception/interception.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Finterception%2Finterception.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Finterception%2Finterception.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Finterception%2Finterception.h?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -17,7 +17,7 @@\n #include \"sanitizer_common/sanitizer_internal_defs.h\"\n \n #if !SANITIZER_LINUX && !SANITIZER_FREEBSD && !SANITIZER_MAC && \\\n-    !SANITIZER_NETBSD && !SANITIZER_OPENBSD && !SANITIZER_WINDOWS && \\\n+    !SANITIZER_NETBSD && !SANITIZER_WINDOWS && \\\n     !SANITIZER_FUCHSIA && !SANITIZER_RTEMS && !SANITIZER_SOLARIS\n # error \"Interception doesn't work on this operating system.\"\n #endif\n@@ -281,7 +281,7 @@ typedef unsigned long uptr;\n #define INCLUDED_FROM_INTERCEPTION_LIB\n \n #if SANITIZER_LINUX || SANITIZER_FREEBSD || SANITIZER_NETBSD || \\\n-    SANITIZER_OPENBSD || SANITIZER_SOLARIS\n+    SANITIZER_SOLARIS\n \n # include \"interception_linux.h\"\n # define INTERCEPT_FUNCTION(func) INTERCEPT_FUNCTION_LINUX_OR_FREEBSD(func)"}, {"sha": "6883608d44f302ce95c83acaf8aadfac7c07dd23", "filename": "libsanitizer/interception/interception_linux.cpp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Finterception%2Finterception_linux.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Finterception%2Finterception_linux.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Finterception%2Finterception_linux.cpp?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -14,7 +14,7 @@\n #include \"interception.h\"\n \n #if SANITIZER_LINUX || SANITIZER_FREEBSD || SANITIZER_NETBSD || \\\n-    SANITIZER_OPENBSD || SANITIZER_SOLARIS\n+    SANITIZER_SOLARIS\n \n #include <dlfcn.h>   // for dlsym() and dlvsym()\n \n@@ -64,7 +64,7 @@ bool InterceptFunction(const char *name, uptr *ptr_to_real, uptr func,\n }\n \n // Android and Solaris do not have dlvsym\n-#if !SANITIZER_ANDROID && !SANITIZER_SOLARIS && !SANITIZER_OPENBSD\n+#if !SANITIZER_ANDROID && !SANITIZER_SOLARIS\n static void *GetFuncAddr(const char *name, const char *ver) {\n   return dlvsym(RTLD_NEXT, name, ver);\n }\n@@ -80,4 +80,4 @@ bool InterceptFunction(const char *name, const char *ver, uptr *ptr_to_real,\n }  // namespace __interception\n \n #endif  // SANITIZER_LINUX || SANITIZER_FREEBSD || SANITIZER_NETBSD ||\n-        // SANITIZER_OPENBSD || SANITIZER_SOLARIS\n+        // SANITIZER_SOLARIS"}, {"sha": "097375fd1c16ac4993728808698baa7eab883a32", "filename": "libsanitizer/interception/interception_linux.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Finterception%2Finterception_linux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Finterception%2Finterception_linux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Finterception%2Finterception_linux.h?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -12,7 +12,7 @@\n //===----------------------------------------------------------------------===//\n \n #if SANITIZER_LINUX || SANITIZER_FREEBSD || SANITIZER_NETBSD || \\\n-    SANITIZER_OPENBSD || SANITIZER_SOLARIS\n+    SANITIZER_SOLARIS\n \n #if !defined(INCLUDED_FROM_INTERCEPTION_LIB)\n # error \"interception_linux.h should be included from interception library only\"\n@@ -35,8 +35,8 @@ bool InterceptFunction(const char *name, const char *ver, uptr *ptr_to_real,\n       (::__interception::uptr) & (func),          \\\n       (::__interception::uptr) & WRAP(func))\n \n-// Android,  Solaris and OpenBSD do not have dlvsym\n-#if !SANITIZER_ANDROID && !SANITIZER_SOLARIS && !SANITIZER_OPENBSD\n+// Android and Solaris do not have dlvsym\n+#if !SANITIZER_ANDROID && !SANITIZER_SOLARIS\n #define INTERCEPT_FUNCTION_VER_LINUX_OR_FREEBSD(func, symver) \\\n   ::__interception::InterceptFunction(                        \\\n       #func, symver,                                          \\\n@@ -50,4 +50,4 @@ bool InterceptFunction(const char *name, const char *ver, uptr *ptr_to_real,\n \n #endif  // INTERCEPTION_LINUX_H\n #endif  // SANITIZER_LINUX || SANITIZER_FREEBSD || SANITIZER_NETBSD ||\n-        // SANITIZER_OPENBSD || SANITIZER_SOLARIS\n+        // SANITIZER_SOLARIS"}, {"sha": "2c0a3bf0787c2a313795668dfd35debc138d96c4", "filename": "libsanitizer/lsan/lsan.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Flsan%2Flsan.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Flsan%2Flsan.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Flsan%2Flsan.cpp?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -77,7 +77,7 @@ static void InitializeFlags() {\n   parser.ParseString(lsan_default_options);\n   parser.ParseStringFromEnv(\"LSAN_OPTIONS\");\n \n-  SetVerbosity(common_flags()->verbosity);\n+  InitializeCommonFlags();\n \n   if (Verbosity()) ReportUnrecognizedFlags();\n "}, {"sha": "9e23aa9997ac0ee76e2fa51eb4981b16838ec6c5", "filename": "libsanitizer/lsan/lsan_common.cpp", "status": "modified", "additions": 30, "deletions": 9, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Flsan%2Flsan_common.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Flsan%2Flsan_common.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Flsan%2Flsan_common.cpp?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -71,17 +71,17 @@ static const char kSuppressionLeak[] = \"leak\";\n static const char *kSuppressionTypes[] = { kSuppressionLeak };\n static const char kStdSuppressions[] =\n #if SANITIZER_SUPPRESS_LEAK_ON_PTHREAD_EXIT\n-  // For more details refer to the SANITIZER_SUPPRESS_LEAK_ON_PTHREAD_EXIT\n-  // definition.\n-  \"leak:*pthread_exit*\\n\"\n+    // For more details refer to the SANITIZER_SUPPRESS_LEAK_ON_PTHREAD_EXIT\n+    // definition.\n+    \"leak:*pthread_exit*\\n\"\n #endif  // SANITIZER_SUPPRESS_LEAK_ON_PTHREAD_EXIT\n #if SANITIZER_MAC\n-  // For Darwin and os_log/os_trace: https://reviews.llvm.org/D35173\n-  \"leak:*_os_trace*\\n\"\n+    // For Darwin and os_log/os_trace: https://reviews.llvm.org/D35173\n+    \"leak:*_os_trace*\\n\"\n #endif\n-  // TLS leak in some glibc versions, described in\n-  // https://sourceware.org/bugzilla/show_bug.cgi?id=12650.\n-  \"leak:*tls_get_addr*\\n\";\n+    // TLS leak in some glibc versions, described in\n+    // https://sourceware.org/bugzilla/show_bug.cgi?id=12650.\n+    \"leak:*tls_get_addr*\\n\";\n \n void InitializeSuppressions() {\n   CHECK_EQ(nullptr, suppression_ctx);\n@@ -215,6 +215,12 @@ static void ProcessThreads(SuspendedThreadsList const &, Frontier *) {}\n \n #else\n \n+#if SANITIZER_ANDROID\n+// FIXME: Move this out into *libcdep.cpp\n+extern \"C\" SANITIZER_WEAK_ATTRIBUTE void __libc_iterate_dynamic_tls(\n+    pid_t, void (*cb)(void *, void *, uptr, void *), void *);\n+#endif\n+\n // Scans thread data (stacks and TLS) for heap pointers.\n static void ProcessThreads(SuspendedThreadsList const &suspended_threads,\n                            Frontier *frontier) {\n@@ -294,6 +300,20 @@ static void ProcessThreads(SuspendedThreadsList const &suspended_threads,\n                                  kReachable);\n         }\n       }\n+#if SANITIZER_ANDROID\n+      auto *cb = +[](void *dtls_begin, void *dtls_end, uptr /*dso_idd*/,\n+                     void *arg) -> void {\n+        ScanRangeForPointers(reinterpret_cast<uptr>(dtls_begin),\n+                             reinterpret_cast<uptr>(dtls_end),\n+                             reinterpret_cast<Frontier *>(arg), \"DTLS\",\n+                             kReachable);\n+      };\n+\n+      // FIXME: There might be a race-condition here (and in Bionic) if the\n+      // thread is suspended in the middle of updating its DTLS. IOWs, we\n+      // could scan already freed memory. (probably fine for now)\n+      __libc_iterate_dynamic_tls(os_id, cb, frontier);\n+#else\n       if (dtls && !DTLSInDestruction(dtls)) {\n         for (uptr j = 0; j < dtls->dtv_size; ++j) {\n           uptr dtls_beg = dtls->dtv[j].beg;\n@@ -309,6 +329,7 @@ static void ProcessThreads(SuspendedThreadsList const &suspended_threads,\n         // this and continue.\n         LOG_THREADS(\"Thread %d has DTLS under destruction.\\n\", os_id);\n       }\n+#endif\n     }\n   }\n }\n@@ -576,7 +597,7 @@ static void CheckForLeaksCallback(const SuspendedThreadsList &suspended_threads,\n \n static bool CheckForLeaks() {\n   if (&__lsan_is_turned_off && __lsan_is_turned_off())\n-      return false;\n+    return false;\n   EnsureMainThreadIDIsCorrect();\n   CheckForLeaksParam param;\n   LockStuffAndStopTheWorld(CheckForLeaksCallback, &param);"}, {"sha": "1fdce087b3a094f58d512ed6b0211df119d63fbd", "filename": "libsanitizer/lsan/lsan_common.h", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Flsan%2Flsan_common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Flsan%2Flsan_common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Flsan%2Flsan_common.h?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -29,16 +29,17 @@\n // To enable LeakSanitizer on a new architecture, one needs to implement the\n // internal_clone function as well as (probably) adjust the TLS machinery for\n // the new architecture inside the sanitizer library.\n-#if (SANITIZER_LINUX && !SANITIZER_ANDROID || SANITIZER_MAC) &&          \\\n-    (SANITIZER_WORDSIZE == 64) &&                                        \\\n-    (defined(__x86_64__) || defined(__mips64) || defined(__aarch64__) || \\\n+// Exclude leak-detection on arm32 for Android because `__aeabi_read_tp`\n+// is missing. This caused a link error.\n+#if SANITIZER_ANDROID && (__ANDROID_API__ < 28 || defined(__arm__))\n+#define CAN_SANITIZE_LEAKS 0\n+#elif (SANITIZER_LINUX || SANITIZER_MAC) && (SANITIZER_WORDSIZE == 64) && \\\n+    (defined(__x86_64__) || defined(__mips64) || defined(__aarch64__) ||  \\\n      defined(__powerpc64__) || defined(__s390x__))\n #define CAN_SANITIZE_LEAKS 1\n-#elif defined(__i386__) && \\\n-    (SANITIZER_LINUX && !SANITIZER_ANDROID || SANITIZER_MAC)\n+#elif defined(__i386__) && (SANITIZER_LINUX || SANITIZER_MAC)\n #define CAN_SANITIZE_LEAKS 1\n-#elif defined(__arm__) && \\\n-    SANITIZER_LINUX && !SANITIZER_ANDROID\n+#elif defined(__arm__) && SANITIZER_LINUX\n #define CAN_SANITIZE_LEAKS 1\n #elif SANITIZER_NETBSD || SANITIZER_FUCHSIA\n #define CAN_SANITIZE_LEAKS 1"}, {"sha": "3c62c9433d3dee285924b1d341502f5eb9a8c3d0", "filename": "libsanitizer/lsan/lsan_common_fuchsia.cpp", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Flsan%2Flsan_common_fuchsia.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Flsan%2Flsan_common_fuchsia.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Flsan%2Flsan_common_fuchsia.cpp?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -19,6 +19,7 @@\n \n #include \"lsan_allocator.h\"\n #include \"sanitizer_common/sanitizer_flags.h\"\n+#include \"sanitizer_common/sanitizer_stoptheworld_fuchsia.h\"\n #include \"sanitizer_common/sanitizer_thread_registry.h\"\n \n // Ensure that the Zircon system ABI is linked in.\n@@ -147,7 +148,7 @@ void LockStuffAndStopTheWorld(StopTheWorldCallback callback,\n               &params->argument->frontier);\n         }\n \n-        params->callback({}, params->argument);\n+        params->callback(SuspendedThreadsListFuchsia(), params->argument);\n       },\n       &params);\n "}, {"sha": "3af586e220f6cb847bcefe874f1a39154a84cdbb", "filename": "libsanitizer/lsan/lsan_common_linux.cpp", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Flsan%2Flsan_common_linux.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Flsan%2Flsan_common_linux.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Flsan%2Flsan_common_linux.cpp?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -93,6 +93,11 @@ static int ProcessGlobalRegionsCallback(struct dl_phdr_info *info, size_t size,\n   return 0;\n }\n \n+#if SANITIZER_ANDROID && __ANDROID_API__ < 21\n+extern \"C\" __attribute__((weak)) int dl_iterate_phdr(\n+    int (*)(struct dl_phdr_info *, size_t, void *), void *);\n+#endif\n+\n // Scans global variables for heap pointers.\n void ProcessGlobalRegions(Frontier *frontier) {\n   if (!flags()->use_globals) return;"}, {"sha": "bf8d316770ee163ec45051ef8463a4d52e79ca35", "filename": "libsanitizer/lsan/lsan_interceptors.cpp", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Flsan%2Flsan_interceptors.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Flsan%2Flsan_interceptors.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Flsan%2Flsan_interceptors.cpp?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -115,7 +115,11 @@ INTERCEPTOR(void*, memalign, uptr alignment, uptr size) {\n   return lsan_memalign(alignment, size, stack);\n }\n #define LSAN_MAYBE_INTERCEPT_MEMALIGN INTERCEPT_FUNCTION(memalign)\n+#else\n+#define LSAN_MAYBE_INTERCEPT_MEMALIGN\n+#endif  // SANITIZER_INTERCEPT_MEMALIGN\n \n+#if SANITIZER_INTERCEPT___LIBC_MEMALIGN\n INTERCEPTOR(void *, __libc_memalign, uptr alignment, uptr size) {\n   ENSURE_LSAN_INITED;\n   GET_STACK_TRACE_MALLOC;\n@@ -125,9 +129,8 @@ INTERCEPTOR(void *, __libc_memalign, uptr alignment, uptr size) {\n }\n #define LSAN_MAYBE_INTERCEPT___LIBC_MEMALIGN INTERCEPT_FUNCTION(__libc_memalign)\n #else\n-#define LSAN_MAYBE_INTERCEPT_MEMALIGN\n #define LSAN_MAYBE_INTERCEPT___LIBC_MEMALIGN\n-#endif // SANITIZER_INTERCEPT_MEMALIGN\n+#endif  // SANITIZER_INTERCEPT___LIBC_MEMALIGN\n \n #if SANITIZER_INTERCEPT_ALIGNED_ALLOC\n INTERCEPTOR(void*, aligned_alloc, uptr alignment, uptr size) {"}, {"sha": "b1265f233f363bf91f13dde9d3da750f36f647bc", "filename": "libsanitizer/lsan/lsan_posix.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Flsan%2Flsan_posix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Flsan%2Flsan_posix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Flsan%2Flsan_posix.h?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -27,7 +27,7 @@ struct DTLS;\n \n namespace __lsan {\n \n-class ThreadContext : public ThreadContextLsanBase {\n+class ThreadContext final : public ThreadContextLsanBase {\n  public:\n   explicit ThreadContext(int tid);\n   void OnStarted(void *arg) override;"}, {"sha": "36643753d019073271dc4d6988159cf80950d599", "filename": "libsanitizer/lsan/lsan_thread.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Flsan%2Flsan_thread.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Flsan%2Flsan_thread.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Flsan%2Flsan_thread.h?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -32,6 +32,7 @@ class ThreadContextLsanBase : public ThreadContextBase {\n                           void *onstarted_arg);\n \n  protected:\n+  ~ThreadContextLsanBase() {}\n   uptr stack_begin_ = 0;\n   uptr stack_end_ = 0;\n   uptr cache_begin_ = 0;"}, {"sha": "1c6520819ef9397b489b030b0a106ef3235d26e6", "filename": "libsanitizer/sanitizer_common/sanitizer_allocator_report.cpp", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_allocator_report.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_allocator_report.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_allocator_report.cpp?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -134,4 +134,12 @@ void NORETURN ReportOutOfMemory(uptr requested_size, const StackTrace *stack) {\n   Die();\n }\n \n+void NORETURN ReportRssLimitExceeded(const StackTrace *stack) {\n+  {\n+    ScopedAllocatorErrorReport report(\"rss-limit-exceeded\", stack);\n+    Report(\"ERROR: %s: allocator exceeded the RSS limit\\n\", SanitizerToolName);\n+  }\n+  Die();\n+}\n+\n }  // namespace __sanitizer"}, {"sha": "6e4e6b1354916c79c384ba094cddaf26a1715f6a", "filename": "libsanitizer/sanitizer_common/sanitizer_allocator_report.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_allocator_report.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_allocator_report.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_allocator_report.h?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -33,6 +33,7 @@ void NORETURN ReportInvalidPosixMemalignAlignment(uptr alignment,\n void NORETURN ReportAllocationSizeTooBig(uptr user_size, uptr max_size,\n                                          const StackTrace *stack);\n void NORETURN ReportOutOfMemory(uptr requested_size, const StackTrace *stack);\n+void NORETURN ReportRssLimitExceeded(const StackTrace *stack);\n \n }  // namespace __sanitizer\n "}, {"sha": "4a39889e534a000b96d63264bd24cd15280a0e1d", "filename": "libsanitizer/sanitizer_common/sanitizer_atomic_clang_other.h", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_atomic_clang_other.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_atomic_clang_other.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_atomic_clang_other.h?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -50,11 +50,8 @@ inline typename T::Type atomic_load(\n       __sync_synchronize();\n     }\n   } else {\n-    // 64-bit load on 32-bit platform.\n-    // Gross, but simple and reliable.\n-    // Assume that it is not in read-only memory.\n-    v = __sync_fetch_and_add(\n-        const_cast<typename T::Type volatile *>(&a->val_dont_use), 0);\n+    __atomic_load(const_cast<typename T::Type volatile *>(&a->val_dont_use), &v,\n+                  __ATOMIC_SEQ_CST);\n   }\n   return v;\n }\n@@ -79,16 +76,7 @@ inline void atomic_store(volatile T *a, typename T::Type v, memory_order mo) {\n       __sync_synchronize();\n     }\n   } else {\n-    // 64-bit store on 32-bit platform.\n-    // Gross, but simple and reliable.\n-    typename T::Type cmp = a->val_dont_use;\n-    typename T::Type cur;\n-    for (;;) {\n-      cur = __sync_val_compare_and_swap(&a->val_dont_use, cmp, v);\n-      if (cur == cmp || cur == v)\n-        break;\n-      cmp = cur;\n-    }\n+    __atomic_store(&a->val_dont_use, &v, __ATOMIC_SEQ_CST);\n   }\n }\n "}, {"sha": "bce24d68045b15294d6596919d28682e36690d88", "filename": "libsanitizer/sanitizer_common/sanitizer_common.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_common.h?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -254,7 +254,6 @@ void UpdateProcessName();\n void CacheBinaryName();\n void DisableCoreDumperIfNecessary();\n void DumpProcessMap();\n-void PrintModuleMap();\n const char *GetEnv(const char *name);\n bool SetEnv(const char *name, const char *value);\n "}, {"sha": "729eead43c04c930120f0b6bc0c039f3d9cdf45c", "filename": "libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_common_interceptors.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_common_interceptors.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_common_interceptors.inc?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -1864,7 +1864,7 @@ UNUSED static void unpoison_passwd(void *ctx, __sanitizer_passwd *pwd) {\n       COMMON_INTERCEPTOR_WRITE_RANGE(ctx, pwd->pw_gecos,\n                                      REAL(strlen)(pwd->pw_gecos) + 1);\n #endif\n-#if SANITIZER_MAC || SANITIZER_FREEBSD || SANITIZER_NETBSD || SANITIZER_OPENBSD\n+#if SANITIZER_MAC || SANITIZER_FREEBSD || SANITIZER_NETBSD\n     if (pwd->pw_class)\n       COMMON_INTERCEPTOR_WRITE_RANGE(ctx, pwd->pw_class,\n                                      REAL(strlen)(pwd->pw_class) + 1);\n@@ -3750,7 +3750,7 @@ INTERCEPTOR(char *, strerror, int errnum) {\n //    static storage.\n #if ((_POSIX_C_SOURCE >= 200112L || _XOPEN_SOURCE >= 600) && !_GNU_SOURCE) || \\\n     SANITIZER_MAC || SANITIZER_ANDROID || SANITIZER_NETBSD ||                 \\\n-    SANITIZER_FREEBSD || SANITIZER_OPENBSD\n+    SANITIZER_FREEBSD\n // POSIX version. Spec is not clear on whether buf is NULL-terminated.\n // At least on OSX, buf contents are valid even when the call fails.\n INTERCEPTOR(int, strerror_r, int errnum, char *buf, SIZE_T buflen) {"}, {"sha": "487a634a16523d13904d1d7c9878eda866fc75e3", "filename": "libsanitizer/sanitizer_common/sanitizer_common_nolibc.cpp", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_common_nolibc.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_common_nolibc.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_common_nolibc.cpp?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -10,9 +10,10 @@\n // libc in no-libcdep sources.\n //===----------------------------------------------------------------------===//\n \n-#include \"sanitizer_platform.h\"\n #include \"sanitizer_common.h\"\n+#include \"sanitizer_flags.h\"\n #include \"sanitizer_libc.h\"\n+#include \"sanitizer_platform.h\"\n \n namespace __sanitizer {\n \n@@ -29,6 +30,7 @@ void SleepForSeconds(int seconds) { internal_sleep(seconds); }\n \n #if !SANITIZER_WINDOWS && !SANITIZER_MAC\n void ListOfModules::init() {}\n+void InitializePlatformCommonFlags(CommonFlags *cf) {}\n #endif\n \n }  // namespace __sanitizer"}, {"sha": "2c924f5d3963919fa2c9034ea3f1e594a1c46c20", "filename": "libsanitizer/sanitizer_common/sanitizer_deadlock_detector1.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_deadlock_detector1.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_deadlock_detector1.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_deadlock_detector1.cpp?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -32,7 +32,7 @@ struct DDLogicalThread {\n   bool report_pending;\n };\n \n-struct DD : public DDetector {\n+struct DD final : public DDetector {\n   SpinMutex mtx;\n   DeadlockDetector<DDBV> dd;\n   DDFlags flags;"}, {"sha": "e3f8e1b12762383b0e940cc9f8aae7860aeb9bec", "filename": "libsanitizer/sanitizer_common/sanitizer_deadlock_detector2.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_deadlock_detector2.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_deadlock_detector2.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_deadlock_detector2.cpp?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -80,7 +80,7 @@ struct Mutex {\n   Link link[kMaxLink];\n };\n \n-struct DD : public DDetector {\n+struct DD final : public DDetector {\n   explicit DD(const DDFlags *flags);\n \n   DDPhysicalThread* CreatePhysicalThread();"}, {"sha": "7f461c98bade442f64cfcfd866df71d9bcffe975", "filename": "libsanitizer/sanitizer_common/sanitizer_deadlock_detector_interface.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_deadlock_detector_interface.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_deadlock_detector_interface.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_deadlock_detector_interface.h?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -66,6 +66,9 @@ struct DDCallback {\n \n   virtual u32 Unwind() { return 0; }\n   virtual int UniqueTid() { return 0; }\n+\n+ protected:\n+  ~DDCallback() {}\n };\n \n struct DDetector {\n@@ -85,6 +88,9 @@ struct DDetector {\n   virtual void MutexDestroy(DDCallback *cb, DDMutex *m) {}\n \n   virtual DDReport *GetReport(DDCallback *cb) { return nullptr; }\n+\n+ protected:\n+  ~DDetector() {}\n };\n \n } // namespace __sanitizer"}, {"sha": "94f16b6e87358499ae64d2deeca3db0827778f6e", "filename": "libsanitizer/sanitizer_common/sanitizer_errno.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_errno.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_errno.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_errno.h?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -23,7 +23,7 @@\n \n #if SANITIZER_FREEBSD || SANITIZER_MAC\n #  define __errno_location __error\n-#elif SANITIZER_ANDROID || SANITIZER_NETBSD || SANITIZER_OPENBSD || \\\n+#elif SANITIZER_ANDROID || SANITIZER_NETBSD || \\\n   SANITIZER_RTEMS\n #  define __errno_location __errno\n #elif SANITIZER_SOLARIS"}, {"sha": "7cce60906b7384bbd1f178e6ca2d8e1cc9b9c5f8", "filename": "libsanitizer/sanitizer_common/sanitizer_file.cpp", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_file.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_file.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_file.cpp?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -58,35 +58,38 @@ void ReportFile::ReopenIfNecessary() {\n   } else {\n     internal_snprintf(full_path, kMaxPathLength, \"%s.%zu\", path_prefix, pid);\n   }\n-  fd = OpenFile(full_path, WrOnly);\n+  error_t err;\n+  fd = OpenFile(full_path, WrOnly, &err);\n   if (fd == kInvalidFd) {\n     const char *ErrorMsgPrefix = \"ERROR: Can't open file: \";\n     WriteToFile(kStderrFd, ErrorMsgPrefix, internal_strlen(ErrorMsgPrefix));\n     WriteToFile(kStderrFd, full_path, internal_strlen(full_path));\n+    char errmsg[100];\n+    internal_snprintf(errmsg, sizeof(errmsg), \" (reason: %d)\", err);\n+    WriteToFile(kStderrFd, errmsg, internal_strlen(errmsg));\n     Die();\n   }\n   fd_pid = pid;\n }\n \n void ReportFile::SetReportPath(const char *path) {\n-  if (!path)\n-    return;\n-  uptr len = internal_strlen(path);\n-  if (len > sizeof(path_prefix) - 100) {\n-    Report(\"ERROR: Path is too long: %c%c%c%c%c%c%c%c...\\n\",\n-           path[0], path[1], path[2], path[3],\n-           path[4], path[5], path[6], path[7]);\n-    Die();\n+  if (path) {\n+    uptr len = internal_strlen(path);\n+    if (len > sizeof(path_prefix) - 100) {\n+      Report(\"ERROR: Path is too long: %c%c%c%c%c%c%c%c...\\n\", path[0], path[1],\n+             path[2], path[3], path[4], path[5], path[6], path[7]);\n+      Die();\n+    }\n   }\n \n   SpinMutexLock l(mu);\n   if (fd != kStdoutFd && fd != kStderrFd && fd != kInvalidFd)\n     CloseFile(fd);\n   fd = kInvalidFd;\n-  if (internal_strcmp(path, \"stdout\") == 0) {\n-    fd = kStdoutFd;\n-  } else if (internal_strcmp(path, \"stderr\") == 0) {\n+  if (!path || internal_strcmp(path, \"stderr\") == 0) {\n     fd = kStderrFd;\n+  } else if (internal_strcmp(path, \"stdout\") == 0) {\n+    fd = kStdoutFd;\n   } else {\n     internal_snprintf(path_prefix, kMaxPathLength, \"%s\", path);\n   }"}, {"sha": "acc71ccd89eea725e030dafa68fa76bb0f0f8126", "filename": "libsanitizer/sanitizer_common/sanitizer_flag_parser.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_flag_parser.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_flag_parser.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_flag_parser.h?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -42,7 +42,7 @@ class FlagHandlerBase {\n };\n \n template <typename T>\n-class FlagHandler : public FlagHandlerBase {\n+class FlagHandler final : public FlagHandlerBase {\n   T *t_;\n \n  public:"}, {"sha": "21048be730416f7a4cfae09bbf36187fc355e9eb", "filename": "libsanitizer/sanitizer_common/sanitizer_flags.cpp", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_flags.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_flags.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_flags.cpp?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -13,9 +13,10 @@\n #include \"sanitizer_flags.h\"\n \n #include \"sanitizer_common.h\"\n+#include \"sanitizer_flag_parser.h\"\n #include \"sanitizer_libc.h\"\n+#include \"sanitizer_linux.h\"\n #include \"sanitizer_list.h\"\n-#include \"sanitizer_flag_parser.h\"\n \n namespace __sanitizer {\n \n@@ -72,7 +73,7 @@ void SubstituteForFlagValue(const char *s, char *out, uptr out_size) {\n   *out = '\\0';\n }\n \n-class FlagHandlerInclude : public FlagHandlerBase {\n+class FlagHandlerInclude final : public FlagHandlerBase {\n   FlagParser *parser_;\n   bool ignore_missing_;\n   const char *original_path_;\n@@ -124,6 +125,8 @@ void InitializeCommonFlags(CommonFlags *cf) {\n   // need to record coverage to generate coverage report.\n   cf->coverage |= cf->html_cov_report;\n   SetVerbosity(cf->verbosity);\n+\n+  InitializePlatformCommonFlags(cf);\n }\n \n }  // namespace __sanitizer"}, {"sha": "5b59e5801bf9130f56b9c57e96171fa5c5a9e1d4", "filename": "libsanitizer/sanitizer_common/sanitizer_flags.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_flags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_flags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_flags.h?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -62,6 +62,10 @@ void RegisterIncludeFlags(FlagParser *parser, CommonFlags *cf);\n // and perform initializations common to all sanitizers (e.g. setting\n // verbosity).\n void InitializeCommonFlags(CommonFlags *cf = &common_flags_dont_use);\n+\n+// Platform specific flags initialization.\n+void InitializePlatformCommonFlags(CommonFlags *cf);\n+\n }  // namespace __sanitizer\n \n #endif  // SANITIZER_FLAGS_H"}, {"sha": "cfb5822645f131416602a16236534d8ce5694a8b", "filename": "libsanitizer/sanitizer_common/sanitizer_flags.inc", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_flags.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_flags.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_flags.inc?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -52,9 +52,9 @@ COMMON_FLAG(bool, handle_ioctl, false, \"Intercept and handle ioctl requests.\")\n COMMON_FLAG(int, malloc_context_size, 1,\n             \"Max number of stack frames kept for each allocation/deallocation.\")\n COMMON_FLAG(\n-    const char *, log_path, \"stderr\",\n+    const char *, log_path, nullptr,\n     \"Write logs to \\\"log_path.pid\\\". The special values are \\\"stdout\\\" and \"\n-    \"\\\"stderr\\\". The default is \\\"stderr\\\".\")\n+    \"\\\"stderr\\\". If unspecified, defaults to \\\"stderr\\\".\")\n COMMON_FLAG(\n     bool, log_exe_name, false,\n     \"Mention name of executable when reporting error and \"\n@@ -82,8 +82,9 @@ COMMON_FLAG(bool, print_summary, true,\n             \"If false, disable printing error summaries in addition to error \"\n             \"reports.\")\n COMMON_FLAG(int, print_module_map, 0,\n-            \"OS X only (0 - don't print, 1 - print only once before process \"\n-            \"exits, 2 - print after each report).\")\n+            \"Print the process module map where supported (0 - don't print, \"\n+            \"1 - print only once before process exits, 2 - print after each \"\n+            \"report).\")\n COMMON_FLAG(bool, check_printf, true, \"Check printf arguments.\")\n #define COMMON_FLAG_HANDLE_SIGNAL_HELP(signal) \\\n     \"Controls custom tool's \" #signal \" handler (0 - do not registers the \" \\"}, {"sha": "7200ffdac0ffd78a5fad16f55681765fc35f8c8b", "filename": "libsanitizer/sanitizer_common/sanitizer_fuchsia.cpp", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_fuchsia.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_fuchsia.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_fuchsia.cpp?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -14,17 +14,18 @@\n #include \"sanitizer_fuchsia.h\"\n #if SANITIZER_FUCHSIA\n \n-#include \"sanitizer_common.h\"\n-#include \"sanitizer_libc.h\"\n-#include \"sanitizer_mutex.h\"\n-\n #include <limits.h>\n #include <pthread.h>\n #include <stdlib.h>\n #include <unistd.h>\n #include <zircon/errors.h>\n #include <zircon/process.h>\n #include <zircon/syscalls.h>\n+#include <zircon/utc.h>\n+\n+#include \"sanitizer_common.h\"\n+#include \"sanitizer_libc.h\"\n+#include \"sanitizer_mutex.h\"\n \n namespace __sanitizer {\n \n@@ -47,8 +48,10 @@ unsigned int internal_sleep(unsigned int seconds) {\n }\n \n u64 NanoTime() {\n+  zx_handle_t utc_clock = _zx_utc_reference_get();\n+  CHECK_NE(utc_clock, ZX_HANDLE_INVALID);\n   zx_time_t time;\n-  zx_status_t status = _zx_clock_get(ZX_CLOCK_UTC, &time);\n+  zx_status_t status = _zx_clock_read(utc_clock, &time);\n   CHECK_EQ(status, ZX_OK);\n   return time;\n }\n@@ -105,8 +108,6 @@ void SetAlternateSignalStack() {}\n void UnsetAlternateSignalStack() {}\n void InitTlsSize() {}\n \n-void PrintModuleMap() {}\n-\n bool SignalContext::IsStackOverflow() const { return false; }\n void SignalContext::DumpAllRegisters(void *context) { UNIMPLEMENTED(); }\n const char *SignalContext::Describe() const { UNIMPLEMENTED(); }\n@@ -504,6 +505,8 @@ u32 GetNumberOfCPUs() {\n \n uptr GetRSS() { UNIMPLEMENTED(); }\n \n+void InitializePlatformCommonFlags(CommonFlags *cf) {}\n+\n }  // namespace __sanitizer\n \n using namespace __sanitizer;"}, {"sha": "d8f0540037d2435bc201a6cd7733fe4272f03519", "filename": "libsanitizer/sanitizer_common/sanitizer_internal_defs.h", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_internal_defs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_internal_defs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_internal_defs.h?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -39,7 +39,7 @@\n \n // TLS is handled differently on different platforms\n #if SANITIZER_LINUX || SANITIZER_NETBSD || \\\n-  SANITIZER_FREEBSD || SANITIZER_OPENBSD\n+  SANITIZER_FREEBSD\n # define SANITIZER_TLS_INITIAL_EXEC_ATTRIBUTE \\\n     __attribute__((tls_model(\"initial-exec\"))) thread_local\n #else\n@@ -104,8 +104,7 @@\n //\n // FIXME: do we have anything like this on Mac?\n #ifndef SANITIZER_CAN_USE_PREINIT_ARRAY\n-#if ((SANITIZER_LINUX && !SANITIZER_ANDROID) || SANITIZER_OPENBSD || \\\n-     SANITIZER_FUCHSIA || SANITIZER_NETBSD) && !defined(PIC)\n+#if (SANITIZER_LINUX || SANITIZER_FUCHSIA || SANITIZER_NETBSD) && !defined(PIC)\n #define SANITIZER_CAN_USE_PREINIT_ARRAY 1\n // Before Solaris 11.4, .preinit_array is fully supported only with GNU ld.\n // FIXME: Check for those conditions.\n@@ -170,7 +169,7 @@ typedef int pid_t;\n #endif\n \n #if SANITIZER_FREEBSD || SANITIZER_NETBSD || \\\n-    SANITIZER_OPENBSD || SANITIZER_MAC || \\\n+    SANITIZER_MAC || \\\n     (SANITIZER_SOLARIS && (defined(_LP64) || _FILE_OFFSET_BITS == 64)) || \\\n     (SANITIZER_LINUX && defined(__x86_64__))\n typedef u64 OFF_T;\n@@ -182,7 +181,7 @@ typedef u64  OFF64_T;\n #if (SANITIZER_WORDSIZE == 64) || SANITIZER_MAC\n typedef uptr operator_new_size_type;\n #else\n-# if SANITIZER_OPENBSD || defined(__s390__) && !defined(__s390x__)\n+# if defined(__s390__) && !defined(__s390x__)\n // Special case: 31-bit s390 has unsigned long as size_t.\n typedef unsigned long operator_new_size_type;\n # else\n@@ -448,5 +447,8 @@ using namespace __sanitizer;\n namespace __hwasan {\n using namespace __sanitizer;\n }\n+namespace __memprof {\n+using namespace __sanitizer;\n+}\n \n #endif  // SANITIZER_DEFS_H"}, {"sha": "9ea19bc21fa3c390b26f53ececd84f196656d52f", "filename": "libsanitizer/sanitizer_common/sanitizer_libignore.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_libignore.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_libignore.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_libignore.cpp?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -9,7 +9,7 @@\n #include \"sanitizer_platform.h\"\n \n #if SANITIZER_FREEBSD || SANITIZER_LINUX || SANITIZER_MAC || \\\n-    SANITIZER_NETBSD || SANITIZER_OPENBSD\n+    SANITIZER_NETBSD\n \n #include \"sanitizer_libignore.h\"\n #include \"sanitizer_flags.h\""}, {"sha": "379f6d9e294b7a2dcfeb1fc02542b1041aeaca5f", "filename": "libsanitizer/sanitizer_common/sanitizer_linux.cpp", "status": "modified", "additions": 34, "deletions": 88, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_linux.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_linux.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_linux.cpp?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -14,7 +14,7 @@\n #include \"sanitizer_platform.h\"\n \n #if SANITIZER_FREEBSD || SANITIZER_LINUX || SANITIZER_NETBSD || \\\n-    SANITIZER_OPENBSD || SANITIZER_SOLARIS\n+    SANITIZER_SOLARIS\n \n #include \"sanitizer_common.h\"\n #include \"sanitizer_flags.h\"\n@@ -38,6 +38,14 @@\n #include <asm/unistd.h>\n #include <sys/types.h>\n #define stat kernel_stat\n+#if SANITIZER_GO\n+#undef st_atime\n+#undef st_mtime\n+#undef st_ctime\n+#define st_atime st_atim\n+#define st_mtime st_mtim\n+#define st_ctime st_ctim\n+#endif\n #include <asm/stat.h>\n #undef stat\n #endif\n@@ -59,13 +67,7 @@\n #include <sys/syscall.h>\n #include <sys/time.h>\n #include <sys/types.h>\n-#if !SANITIZER_OPENBSD\n #include <ucontext.h>\n-#endif\n-#if SANITIZER_OPENBSD\n-#include <sys/futex.h>\n-#include <sys/sysctl.h>\n-#endif\n #include <unistd.h>\n \n #if SANITIZER_LINUX\n@@ -129,7 +131,7 @@ const int FUTEX_WAKE_PRIVATE = FUTEX_WAKE | FUTEX_PRIVATE_FLAG;\n #endif\n \n // Note : FreeBSD had implemented both\n-// Linux and OpenBSD apis, available from\n+// Linux apis, available from\n // future 12.x version most likely\n #if SANITIZER_LINUX && defined(__NR_getrandom)\n # if !defined(GRND_NONBLOCK)\n@@ -140,15 +142,11 @@ const int FUTEX_WAKE_PRIVATE = FUTEX_WAKE | FUTEX_PRIVATE_FLAG;\n # define SANITIZER_USE_GETRANDOM 0\n #endif  // SANITIZER_LINUX && defined(__NR_getrandom)\n \n-#if SANITIZER_OPENBSD\n-# define SANITIZER_USE_GETENTROPY 1\n+#if SANITIZER_FREEBSD && __FreeBSD_version >= 1200000\n+#  define SANITIZER_USE_GETENTROPY 1\n #else\n-# if SANITIZER_FREEBSD && __FreeBSD_version >= 1200000\n-#   define SANITIZER_USE_GETENTROPY 1\n-# else\n-#   define SANITIZER_USE_GETENTROPY 0\n-# endif\n-#endif // SANITIZER_USE_GETENTROPY\n+#  define SANITIZER_USE_GETENTROPY 0\n+#endif\n \n namespace __sanitizer {\n \n@@ -166,7 +164,7 @@ namespace __sanitizer {\n \n // --------------- sanitizer_libc.h\n #if !SANITIZER_SOLARIS && !SANITIZER_NETBSD\n-#if !SANITIZER_S390 && !SANITIZER_OPENBSD\n+#if !SANITIZER_S390\n uptr internal_mmap(void *addr, uptr length, int prot, int flags, int fd,\n                    u64 offset) {\n #if SANITIZER_FREEBSD || SANITIZER_LINUX_USES_64BIT_SYSCALLS\n@@ -179,9 +177,8 @@ uptr internal_mmap(void *addr, uptr length, int prot, int flags, int fd,\n                           offset / 4096);\n #endif\n }\n-#endif // !SANITIZER_S390 && !SANITIZER_OPENBSD\n+#endif // !SANITIZER_S390\n \n-#if !SANITIZER_OPENBSD\n uptr internal_munmap(void *addr, uptr length) {\n   return internal_syscall(SYSCALL(munmap), (uptr)addr, length);\n }\n@@ -193,7 +190,6 @@ int internal_mprotect(void *addr, uptr length, int prot) {\n int internal_madvise(uptr addr, uptr length, int advice) {\n   return internal_syscall(SYSCALL(madvise), addr, length, advice);\n }\n-#endif\n \n uptr internal_close(fd_t fd) {\n   return internal_syscall(SYSCALL(close), fd);\n@@ -260,9 +256,11 @@ static void stat64_to_stat(struct stat64 *in, struct stat *out) {\n // Undefine compatibility macros from <sys/stat.h>\n // so that they would not clash with the kernel_stat\n // st_[a|m|c]time fields\n+#if !SANITIZER_GO\n #undef st_atime\n #undef st_mtime\n #undef st_ctime\n+#endif\n #if defined(SANITIZER_ANDROID)\n // Bionic sys/stat.h defines additional macros\n // for compatibility with the old NDKs and\n@@ -305,7 +303,7 @@ static void kernel_stat_to_stat(struct kernel_stat *in, struct stat *out) {\n #endif\n \n uptr internal_stat(const char *path, void *buf) {\n-#if SANITIZER_FREEBSD || SANITIZER_OPENBSD\n+#if SANITIZER_FREEBSD\n   return internal_syscall(SYSCALL(fstatat), AT_FDCWD, (uptr)path, (uptr)buf, 0);\n #elif SANITIZER_USES_CANONICAL_LINUX_SYSCALLS\n   return internal_syscall(SYSCALL(newfstatat), AT_FDCWD, (uptr)path, (uptr)buf,\n@@ -329,7 +327,7 @@ uptr internal_stat(const char *path, void *buf) {\n }\n \n uptr internal_lstat(const char *path, void *buf) {\n-#if SANITIZER_FREEBSD || SANITIZER_OPENBSD\n+#if SANITIZER_FREEBSD\n   return internal_syscall(SYSCALL(fstatat), AT_FDCWD, (uptr)path, (uptr)buf,\n                           AT_SYMLINK_NOFOLLOW);\n #elif SANITIZER_USES_CANONICAL_LINUX_SYSCALLS\n@@ -354,9 +352,8 @@ uptr internal_lstat(const char *path, void *buf) {\n }\n \n uptr internal_fstat(fd_t fd, void *buf) {\n-#if SANITIZER_FREEBSD || SANITIZER_OPENBSD || \\\n-    SANITIZER_LINUX_USES_64BIT_SYSCALLS\n-#if SANITIZER_MIPS64 && !SANITIZER_OPENBSD\n+#if SANITIZER_FREEBSD || SANITIZER_LINUX_USES_64BIT_SYSCALLS\n+#if SANITIZER_MIPS64\n   // For mips64, fstat syscall fills buffer in the format of kernel_stat\n   struct kernel_stat kbuf;\n   int res = internal_syscall(SYSCALL(fstat), fd, &kbuf);\n@@ -396,16 +393,13 @@ uptr internal_readlink(const char *path, char *buf, uptr bufsize) {\n #if SANITIZER_USES_CANONICAL_LINUX_SYSCALLS\n   return internal_syscall(SYSCALL(readlinkat), AT_FDCWD, (uptr)path, (uptr)buf,\n                           bufsize);\n-#elif SANITIZER_OPENBSD\n-  return internal_syscall(SYSCALL(readlinkat), AT_FDCWD, (uptr)path, (uptr)buf,\n-                          bufsize);\n #else\n   return internal_syscall(SYSCALL(readlink), (uptr)path, (uptr)buf, bufsize);\n #endif\n }\n \n uptr internal_unlink(const char *path) {\n-#if SANITIZER_USES_CANONICAL_LINUX_SYSCALLS || SANITIZER_OPENBSD\n+#if SANITIZER_USES_CANONICAL_LINUX_SYSCALLS\n   return internal_syscall(SYSCALL(unlinkat), AT_FDCWD, (uptr)path, 0);\n #else\n   return internal_syscall(SYSCALL(unlink), (uptr)path);\n@@ -416,7 +410,7 @@ uptr internal_rename(const char *oldpath, const char *newpath) {\n #if defined(__riscv)\n   return internal_syscall(SYSCALL(renameat2), AT_FDCWD, (uptr)oldpath, AT_FDCWD,\n                           (uptr)newpath, 0);\n-#elif SANITIZER_USES_CANONICAL_LINUX_SYSCALLS || SANITIZER_OPENBSD\n+#elif SANITIZER_USES_CANONICAL_LINUX_SYSCALLS\n   return internal_syscall(SYSCALL(renameat), AT_FDCWD, (uptr)oldpath, AT_FDCWD,\n                           (uptr)newpath);\n #else\n@@ -446,7 +440,7 @@ uptr internal_execve(const char *filename, char *const argv[],\n \n #if !SANITIZER_NETBSD\n void internal__exit(int exitcode) {\n-#if SANITIZER_FREEBSD || SANITIZER_OPENBSD || SANITIZER_SOLARIS\n+#if SANITIZER_FREEBSD || SANITIZER_SOLARIS\n   internal_syscall(SYSCALL(exit), exitcode);\n #else\n   internal_syscall(SYSCALL(exit_group), exitcode);\n@@ -476,8 +470,6 @@ tid_t GetTid() {\n   long Tid;\n   thr_self(&Tid);\n   return Tid;\n-#elif SANITIZER_OPENBSD\n-  return internal_syscall(SYSCALL(getthrid));\n #elif SANITIZER_SOLARIS\n   return thr_self();\n #else\n@@ -490,9 +482,6 @@ int TgKill(pid_t pid, tid_t tid, int sig) {\n   return internal_syscall(SYSCALL(tgkill), pid, tid, sig);\n #elif SANITIZER_FREEBSD\n   return internal_syscall(SYSCALL(thr_kill2), pid, tid, sig);\n-#elif SANITIZER_OPENBSD\n-  (void)pid;\n-  return internal_syscall(SYSCALL(thrkill), tid, sig, nullptr);\n #elif SANITIZER_SOLARIS\n   (void)pid;\n   return thr_kill(tid, sig);\n@@ -502,7 +491,7 @@ int TgKill(pid_t pid, tid_t tid, int sig) {\n \n #if !SANITIZER_SOLARIS && !SANITIZER_NETBSD\n u64 NanoTime() {\n-#if SANITIZER_FREEBSD || SANITIZER_OPENBSD\n+#if SANITIZER_FREEBSD\n   timeval tv;\n #else\n   kernel_timeval tv;\n@@ -521,8 +510,7 @@ uptr internal_clock_gettime(__sanitizer_clockid_t clk_id, void *tp) {\n // 'environ' array (on some others) and does not use libc. This function\n // should be called first inside __asan_init.\n const char *GetEnv(const char *name) {\n-#if SANITIZER_FREEBSD || SANITIZER_NETBSD || SANITIZER_OPENBSD || \\\n-    SANITIZER_SOLARIS\n+#if SANITIZER_FREEBSD || SANITIZER_NETBSD || SANITIZER_SOLARIS\n   if (::environ != 0) {\n     uptr NameLen = internal_strlen(name);\n     for (char **Env = ::environ; *Env != 0; Env++) {\n@@ -560,15 +548,13 @@ const char *GetEnv(const char *name) {\n #endif\n }\n \n-#if !SANITIZER_FREEBSD && !SANITIZER_NETBSD && !SANITIZER_OPENBSD && \\\n-    !SANITIZER_GO\n+#if !SANITIZER_FREEBSD && !SANITIZER_NETBSD && !SANITIZER_GO\n extern \"C\" {\n SANITIZER_WEAK_ATTRIBUTE extern void *__libc_stack_end;\n }\n #endif\n \n-#if !SANITIZER_FREEBSD && !SANITIZER_NETBSD &&                \\\n-    !SANITIZER_OPENBSD\n+#if !SANITIZER_FREEBSD && !SANITIZER_NETBSD\n static void ReadNullSepFileToArray(const char *path, char ***arr,\n                                    int arr_size) {\n   char *buff;\n@@ -593,7 +579,6 @@ static void ReadNullSepFileToArray(const char *path, char ***arr,\n }\n #endif\n \n-#if !SANITIZER_OPENBSD\n static void GetArgsAndEnv(char ***argv, char ***envp) {\n #if SANITIZER_FREEBSD\n   // On FreeBSD, retrieving the argument and environment arrays is done via the\n@@ -645,8 +630,6 @@ char **GetEnviron() {\n   return envp;\n }\n \n-#endif  // !SANITIZER_OPENBSD\n-\n #if !SANITIZER_SOLARIS\n enum MutexState {\n   MtxUnlocked = 0,\n@@ -702,16 +685,6 @@ void BlockingMutex::CheckLocked() {\n // 32-bit syscall here.\n #if SANITIZER_NETBSD\n // Not used\n-#elif SANITIZER_OPENBSD\n-// struct dirent is different for Linux and us. At this moment, we use only\n-// d_fileno (Linux call this d_ino), d_reclen, and d_name.\n-struct linux_dirent {\n-  u64 d_ino;  // d_fileno\n-  u16 d_reclen;\n-  u16 d_namlen;  // not used\n-  u8 d_type;     // not used\n-  char d_name[NAME_MAX + 1];\n-};\n #else\n struct linux_dirent {\n #if SANITIZER_X32 || defined(__aarch64__) || SANITIZER_RISCV64\n@@ -789,19 +762,13 @@ int internal_fork() {\n #endif\n }\n \n-#if SANITIZER_FREEBSD || SANITIZER_OPENBSD\n+#if SANITIZER_FREEBSD\n int internal_sysctl(const int *name, unsigned int namelen, void *oldp,\n                     uptr *oldlenp, const void *newp, uptr newlen) {\n-#if SANITIZER_OPENBSD\n-  return sysctl(name, namelen, oldp, (size_t *)oldlenp, (void *)newp,\n-                (size_t)newlen);\n-#else\n   return internal_syscall(SYSCALL(__sysctl), name, namelen, oldp,\n                           (size_t *)oldlenp, newp, (size_t)newlen);\n-#endif\n }\n \n-#if SANITIZER_FREEBSD\n int internal_sysctlbyname(const char *sname, void *oldp, uptr *oldlenp,\n                           const void *newp, uptr newlen) {\n   // Note: this function can be called during startup, so we need to avoid\n@@ -829,7 +796,6 @@ int internal_sysctlbyname(const char *sname, void *oldp, uptr *oldlenp,\n #endif\n }\n #endif\n-#endif\n \n #if SANITIZER_LINUX\n #define SA_RESTORER 0x04000000\n@@ -882,7 +848,7 @@ int internal_sigaction_norestorer(int signum, const void *act, void *oldact) {\n \n uptr internal_sigprocmask(int how, __sanitizer_sigset_t *set,\n                           __sanitizer_sigset_t *oldset) {\n-#if SANITIZER_FREEBSD || SANITIZER_OPENBSD\n+#if SANITIZER_FREEBSD\n   return internal_syscall(SYSCALL(sigprocmask), how, set, oldset);\n #else\n   __sanitizer_kernel_sigset_t *k_set = (__sanitizer_kernel_sigset_t *)set;\n@@ -1059,7 +1025,7 @@ static uptr GetKernelAreaSize() {\n #endif  // SANITIZER_WORDSIZE == 32\n \n uptr GetMaxVirtualAddress() {\n-#if (SANITIZER_NETBSD || SANITIZER_OPENBSD) && defined(__x86_64__)\n+#if SANITIZER_NETBSD && defined(__x86_64__)\n   return 0x7f7ffffff000ULL;  // (0x00007f8000000000 - PAGE_SIZE)\n #elif SANITIZER_WORDSIZE == 64\n # if defined(__powerpc64__) || defined(__aarch64__)\n@@ -1122,7 +1088,6 @@ uptr GetPageSize() {\n }\n #endif // !SANITIZER_ANDROID\n \n-#if !SANITIZER_OPENBSD\n uptr ReadBinaryName(/*out*/char *buf, uptr buf_len) {\n #if SANITIZER_SOLARIS\n   const char *default_module_name = getexecname();\n@@ -1159,7 +1124,6 @@ uptr ReadBinaryName(/*out*/char *buf, uptr buf_len) {\n   return module_name_len;\n #endif\n }\n-#endif // !SANITIZER_OPENBSD\n \n uptr ReadLongProcessName(/*out*/ char *buf, uptr buf_len) {\n #if SANITIZER_LINUX\n@@ -1192,10 +1156,10 @@ bool LibraryNameIs(const char *full_name, const char *base_name) {\n // Call cb for each region mapped by map.\n void ForEachMappedRegion(link_map *map, void (*cb)(const void *, uptr)) {\n   CHECK_NE(map, nullptr);\n-#if !SANITIZER_FREEBSD && !SANITIZER_OPENBSD\n+#if !SANITIZER_FREEBSD\n   typedef ElfW(Phdr) Elf_Phdr;\n   typedef ElfW(Ehdr) Elf_Ehdr;\n-#endif // !SANITIZER_FREEBSD && !SANITIZER_OPENBSD\n+#endif // !SANITIZER_FREEBSD\n   char *base = (char *)map->l_addr;\n   Elf_Ehdr *ehdr = (Elf_Ehdr *)base;\n   char *phdrs = base + ehdr->e_phoff;\n@@ -1845,11 +1809,7 @@ static bool Aarch64GetESR(ucontext_t *ucontext, u64 *esr) {\n }\n #endif\n \n-#if SANITIZER_OPENBSD\n-using Context = sigcontext;\n-#else\n using Context = ucontext_t;\n-#endif\n \n SignalContext::WriteFlag SignalContext::GetWriteFlag() const {\n   Context *ucontext = (Context *)context;\n@@ -1859,8 +1819,6 @@ SignalContext::WriteFlag SignalContext::GetWriteFlag() const {\n   uptr err = ucontext->uc_mcontext.mc_err;\n #elif SANITIZER_NETBSD\n   uptr err = ucontext->uc_mcontext.__gregs[_REG_ERR];\n-#elif SANITIZER_OPENBSD\n-  uptr err = ucontext->sc_err;\n #elif SANITIZER_SOLARIS && defined(__i386__)\n   const int Err = 13;\n   uptr err = ucontext->uc_mcontext.gregs[Err];\n@@ -2086,11 +2044,6 @@ static void GetPcSpBp(void *context, uptr *pc, uptr *sp, uptr *bp) {\n   *pc = ucontext->uc_mcontext.mc_rip;\n   *bp = ucontext->uc_mcontext.mc_rbp;\n   *sp = ucontext->uc_mcontext.mc_rsp;\n-#elif SANITIZER_OPENBSD\n-  sigcontext *ucontext = (sigcontext *)context;\n-  *pc = ucontext->sc_rip;\n-  *bp = ucontext->sc_rbp;\n-  *sp = ucontext->sc_rsp;\n # else\n   ucontext_t *ucontext = (ucontext_t*)context;\n   *pc = ucontext->uc_mcontext.gregs[REG_RIP];\n@@ -2103,11 +2056,6 @@ static void GetPcSpBp(void *context, uptr *pc, uptr *sp, uptr *bp) {\n   *pc = ucontext->uc_mcontext.mc_eip;\n   *bp = ucontext->uc_mcontext.mc_ebp;\n   *sp = ucontext->uc_mcontext.mc_esp;\n-#elif SANITIZER_OPENBSD\n-  sigcontext *ucontext = (sigcontext *)context;\n-  *pc = ucontext->sc_eip;\n-  *bp = ucontext->sc_ebp;\n-  *sp = ucontext->sc_esp;\n # else\n   ucontext_t *ucontext = (ucontext_t*)context;\n # if SANITIZER_SOLARIS\n@@ -2280,8 +2228,6 @@ void CheckMPROTECT() {\n #endif\n }\n \n-void PrintModuleMap() { }\n-\n void CheckNoDeepBind(const char *filename, int flag) {\n #ifdef RTLD_DEEPBIND\n   if (flag & RTLD_DEEPBIND) {"}, {"sha": "24902d1b6bcefb8dbb0de6dfe32e015078dce6bf", "filename": "libsanitizer/sanitizer_common/sanitizer_linux.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_linux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_linux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_linux.h?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -14,12 +14,11 @@\n \n #include \"sanitizer_platform.h\"\n #if SANITIZER_FREEBSD || SANITIZER_LINUX || SANITIZER_NETBSD ||                \\\n-    SANITIZER_OPENBSD || SANITIZER_SOLARIS\n+    SANITIZER_SOLARIS\n #include \"sanitizer_common.h\"\n #include \"sanitizer_internal_defs.h\"\n #include \"sanitizer_platform_limits_freebsd.h\"\n #include \"sanitizer_platform_limits_netbsd.h\"\n-#include \"sanitizer_platform_limits_openbsd.h\"\n #include \"sanitizer_platform_limits_posix.h\"\n #include \"sanitizer_platform_limits_solaris.h\"\n #include \"sanitizer_posix.h\""}, {"sha": "47c84ce1b06041df2b9202486f80c9ad01183b27", "filename": "libsanitizer/sanitizer_common/sanitizer_linux_libcdep.cpp", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_linux_libcdep.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_linux_libcdep.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_linux_libcdep.cpp?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -14,7 +14,7 @@\n #include \"sanitizer_platform.h\"\n \n #if SANITIZER_FREEBSD || SANITIZER_LINUX || SANITIZER_NETBSD || \\\n-    SANITIZER_OPENBSD || SANITIZER_SOLARIS\n+    SANITIZER_SOLARIS\n \n #include \"sanitizer_allocator_internal.h\"\n #include \"sanitizer_atomic.h\"\n@@ -50,11 +50,6 @@\n #define pthread_getattr_np pthread_attr_get_np\n #endif\n \n-#if SANITIZER_OPENBSD\n-#include <pthread_np.h>\n-#include <sys/sysctl.h>\n-#endif\n-\n #if SANITIZER_NETBSD\n #include <sys/sysctl.h>\n #include <sys/tls.h>\n@@ -142,11 +137,6 @@ void GetThreadStackTopAndBottom(bool at_initialization, uptr *stack_top,\n   CHECK_EQ(thr_stksegment(&ss), 0);\n   stacksize = ss.ss_size;\n   stackaddr = (char *)ss.ss_sp - stacksize;\n-#elif SANITIZER_OPENBSD\n-  stack_t sattr;\n-  CHECK_EQ(pthread_stackseg_np(pthread_self(), &sattr), 0);\n-  stackaddr = sattr.ss_sp;\n-  stacksize = sattr.ss_size;\n #else  // !SANITIZER_SOLARIS\n   pthread_attr_t attr;\n   pthread_attr_init(&attr);\n@@ -194,7 +184,7 @@ __attribute__((unused)) static bool GetLibcVersion(int *major, int *minor,\n }\n \n #if !SANITIZER_FREEBSD && !SANITIZER_ANDROID && !SANITIZER_GO && \\\n-    !SANITIZER_NETBSD && !SANITIZER_OPENBSD && !SANITIZER_SOLARIS\n+    !SANITIZER_NETBSD && !SANITIZER_SOLARIS\n static uptr g_tls_size;\n \n #ifdef __i386__\n@@ -385,12 +375,9 @@ uptr ThreadSelf() {\n   descr_addr = reinterpret_cast<uptr>(__builtin_thread_pointer()) -\n                                       ThreadDescriptorSize();\n #elif SANITIZER_RISCV64\n-  uptr tcb_end;\n-  asm volatile(\"mv %0, tp;\\n\" : \"=r\"(tcb_end));\n   // https://github.com/riscv/riscv-elf-psabi-doc/issues/53\n-  const uptr kTlsTcbOffset = 0x800;\n-  descr_addr =\n-      reinterpret_cast<uptr>(tcb_end - kTlsTcbOffset - TlsPreTcbSize());\n+  uptr thread_pointer = reinterpret_cast<uptr>(__builtin_thread_pointer());\n+  descr_addr = thread_pointer - TlsPreTcbSize();\n #elif defined(__s390__)\n   descr_addr = reinterpret_cast<uptr>(__builtin_thread_pointer());\n #elif defined(__powerpc64__)\n@@ -458,9 +445,27 @@ int GetSizeFromHdr(struct dl_phdr_info *info, size_t size, void *data) {\n }\n #endif  // SANITIZER_NETBSD\n \n+#if SANITIZER_ANDROID\n+// Bionic provides this API since S.\n+extern \"C\" SANITIZER_WEAK_ATTRIBUTE void __libc_get_static_tls_bounds(void **,\n+                                                                      void **);\n+#endif\n+\n #if !SANITIZER_GO\n static void GetTls(uptr *addr, uptr *size) {\n-#if SANITIZER_LINUX && !SANITIZER_ANDROID\n+#if SANITIZER_ANDROID\n+  if (&__libc_get_static_tls_bounds) {\n+    void *start_addr;\n+    void *end_addr;\n+    __libc_get_static_tls_bounds(&start_addr, &end_addr);\n+    *addr = reinterpret_cast<uptr>(start_addr);\n+    *size =\n+        reinterpret_cast<uptr>(end_addr) - reinterpret_cast<uptr>(start_addr);\n+  } else {\n+    *addr = 0;\n+    *size = 0;\n+  }\n+#elif SANITIZER_LINUX\n #if defined(__x86_64__) || defined(__i386__) || defined(__s390__)\n   *addr = ThreadSelf();\n   *size = GetTlsSize();\n@@ -501,12 +506,6 @@ static void GetTls(uptr *addr, uptr *size) {\n       *addr = (uptr)tcb->tcb_dtv[1];\n     }\n   }\n-#elif SANITIZER_OPENBSD\n-  *addr = 0;\n-  *size = 0;\n-#elif SANITIZER_ANDROID\n-  *addr = 0;\n-  *size = 0;\n #elif SANITIZER_SOLARIS\n   // FIXME\n   *addr = 0;\n@@ -520,7 +519,7 @@ static void GetTls(uptr *addr, uptr *size) {\n #if !SANITIZER_GO\n uptr GetTlsSize() {\n #if SANITIZER_FREEBSD || SANITIZER_ANDROID || SANITIZER_NETBSD || \\\n-    SANITIZER_OPENBSD || SANITIZER_SOLARIS\n+    SANITIZER_SOLARIS\n   uptr addr, size;\n   GetTls(&addr, &size);\n   return size;\n@@ -557,13 +556,13 @@ void GetThreadStackAndTls(bool main, uptr *stk_addr, uptr *stk_size,\n #endif\n }\n \n-#if !SANITIZER_FREEBSD && !SANITIZER_OPENBSD\n+#if !SANITIZER_FREEBSD\n typedef ElfW(Phdr) Elf_Phdr;\n #elif SANITIZER_WORDSIZE == 32 && __FreeBSD_version <= 902001  // v9.2\n #define Elf_Phdr XElf32_Phdr\n #define dl_phdr_info xdl_phdr_info\n #define dl_iterate_phdr(c, b) xdl_iterate_phdr((c), (b))\n-#endif  // !SANITIZER_FREEBSD && !SANITIZER_OPENBSD\n+#endif  // !SANITIZER_FREEBSD\n \n struct DlIteratePhdrData {\n   InternalMmapVectorNoCtor<LoadedModule> *modules;\n@@ -683,7 +682,7 @@ uptr GetRSS() {\n // sysconf(_SC_NPROCESSORS_{CONF,ONLN}) cannot be used on most platforms as\n // they allocate memory.\n u32 GetNumberOfCPUs() {\n-#if SANITIZER_FREEBSD || SANITIZER_NETBSD || SANITIZER_OPENBSD\n+#if SANITIZER_FREEBSD || SANITIZER_NETBSD\n   u32 ncpu;\n   int req[2];\n   uptr len = sizeof(ncpu);\n@@ -730,13 +729,9 @@ u32 GetNumberOfCPUs() {\n #elif SANITIZER_SOLARIS\n   return sysconf(_SC_NPROCESSORS_ONLN);\n #else\n-#if defined(CPU_COUNT)\n   cpu_set_t CPUs;\n   CHECK_EQ(sched_getaffinity(0, sizeof(cpu_set_t), &CPUs), 0);\n   return CPU_COUNT(&CPUs);\n-#else\n-  return 1;\n-#endif\n #endif\n }\n \n@@ -844,7 +839,6 @@ u64 MonotonicNanoTime() {\n }\n #endif  // SANITIZER_LINUX && !SANITIZER_GO\n \n-#if !SANITIZER_OPENBSD\n void ReExec() {\n   const char *pathname = \"/proc/self/exe\";\n \n@@ -876,7 +870,6 @@ void ReExec() {\n   Printf(\"execve failed, errno %d\\n\", rverrno);\n   Die();\n }\n-#endif  // !SANITIZER_OPENBSD\n \n void UnmapFromTo(uptr from, uptr to) {\n   if (to == from)\n@@ -913,6 +906,13 @@ uptr MapDynamicShadow(uptr shadow_size_bytes, uptr shadow_scale,\n   return shadow_start;\n }\n \n+void InitializePlatformCommonFlags(CommonFlags *cf) {\n+#if SANITIZER_ANDROID\n+  if (&__libc_get_static_tls_bounds == nullptr)\n+    cf->detect_leaks = false;\n+#endif\n+}\n+\n } // namespace __sanitizer\n \n #endif"}, {"sha": "62d422d043d704b086a93be752d8d42a204ae8f5", "filename": "libsanitizer/sanitizer_common/sanitizer_mac.cpp", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_mac.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_mac.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_mac.cpp?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -37,7 +37,7 @@\n extern char **environ;\n #endif\n \n-#if defined(__has_include) && __has_include(<os/trace.h>) && defined(__BLOCKS__)\n+#if defined(__has_include) && __has_include(<os/trace.h>)\n #define SANITIZER_OS_TRACE 1\n #include <os/trace.h>\n #else\n@@ -1300,7 +1300,7 @@ void FormatUUID(char *out, uptr size, const u8 *uuid) {\n                     uuid[12], uuid[13], uuid[14], uuid[15]);\n }\n \n-void PrintModuleMap() {\n+void DumpProcessMap() {\n   Printf(\"Process module map:\\n\");\n   MemoryMappingLayout memory_mapping(false);\n   InternalMmapVector<LoadedModule> modules;\n@@ -1333,6 +1333,8 @@ u32 GetNumberOfCPUs() {\n   return (u32)sysconf(_SC_NPROCESSORS_ONLN);\n }\n \n+void InitializePlatformCommonFlags(CommonFlags *cf) {}\n+\n }  // namespace __sanitizer\n \n #endif  // SANITIZER_MAC"}, {"sha": "023071e4f11de73d6d6c3361ece16ae6430a5aab", "filename": "libsanitizer/sanitizer_common/sanitizer_mac.h", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_mac.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_mac.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_mac.h?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -14,26 +14,6 @@\n \n #include \"sanitizer_common.h\"\n #include \"sanitizer_platform.h\"\n-\n-/* TARGET_OS_OSX is not present in SDKs before Darwin16 (macOS 10.12) use\n-   TARGET_OS_MAC (we have no support for iOS in any form for these versions,\n-   so there's no ambiguity).  */\n-#if !defined(TARGET_OS_OSX) && TARGET_OS_MAC\n-# define TARGET_OS_OSX 1\n-#endif\n-\n-/* Other TARGET_OS_xxx are not present on earlier versions, define them to\n-   0 (we have no support for them; they are not valid targets anyway).  */\n-#ifndef TARGET_OS_IOS\n-#define TARGET_OS_IOS 0\n-#endif\n-#ifndef TARGET_OS_TV\n-#define TARGET_OS_TV 0\n-#endif\n-#ifndef TARGET_OS_WATCH\n-#define TARGET_OS_WATCH 0\n-#endif\n-\n #if SANITIZER_MAC\n #include \"sanitizer_posix.h\"\n "}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "libsanitizer/sanitizer_common/sanitizer_openbsd.cpp", "status": "modified", "additions": 0, "deletions": 119, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_openbsd.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_openbsd.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_openbsd.cpp?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -1,119 +0,0 @@\n-//===-- sanitizer_openbsd.cpp ---------------------------------------------===//\n-//\n-// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.\n-// See https://llvm.org/LICENSE.txt for license information.\n-// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n-//\n-//===----------------------------------------------------------------------===//\n-//\n-// This file is shared between various sanitizers' runtime libraries and\n-// implements Solaris-specific functions.\n-//===----------------------------------------------------------------------===//\n-\n-#include \"sanitizer_platform.h\"\n-#if SANITIZER_OPENBSD\n-\n-#include <stdio.h>\n-\n-#include \"sanitizer_common.h\"\n-#include \"sanitizer_flags.h\"\n-#include \"sanitizer_internal_defs.h\"\n-#include \"sanitizer_libc.h\"\n-#include \"sanitizer_placement_new.h\"\n-#include \"sanitizer_platform_limits_posix.h\"\n-#include \"sanitizer_procmaps.h\"\n-\n-#include <errno.h>\n-#include <fcntl.h>\n-#include <limits.h>\n-#include <pthread.h>\n-#include <sched.h>\n-#include <signal.h>\n-#include <stdio.h>\n-#include <stdlib.h>\n-#include <sys/mman.h>\n-#include <sys/shm.h>\n-#include <sys/sysctl.h>\n-#include <sys/types.h>\n-#include <unistd.h>\n-\n-extern char **environ;\n-\n-namespace __sanitizer {\n-\n-uptr internal_mmap(void *addr, size_t length, int prot, int flags, int fd,\n-                   u64 offset) {\n-  return (uptr)mmap(addr, length, prot, flags, fd, offset);\n-}\n-\n-uptr internal_munmap(void *addr, uptr length) { return munmap(addr, length); }\n-\n-int internal_mprotect(void *addr, uptr length, int prot) {\n-  return mprotect(addr, length, prot);\n-}\n-\n-int internal_madvise(uptr addr, uptr length, int advice) {\n-  return madvise((void *)addr, length, advice);\n-}\n-\n-int internal_sysctlbyname(const char *sname, void *oldp, uptr *oldlenp,\n-                          const void *newp, uptr newlen) {\n-  Printf(\"internal_sysctlbyname not implemented for OpenBSD\");\n-  Die();\n-  return 0;\n-}\n-\n-uptr ReadBinaryName(/*out*/char *buf, uptr buf_len) {\n-  // On OpenBSD we cannot get the full path\n-  struct kinfo_proc kp;\n-  uptr kl;\n-  const int Mib[4] = {CTL_KERN, KERN_PROC, KERN_PROC_PID, getpid()};\n-  if (internal_sysctl(Mib, ARRAY_SIZE(Mib), &kp, &kl, NULL, 0) != -1)\n-    return internal_snprintf(buf,\n-                             (KI_MAXCOMLEN < buf_len ? KI_MAXCOMLEN : buf_len),\n-                             \"%s\", kp.p_comm);\n-  return (uptr)0;\n-}\n-\n-static void GetArgsAndEnv(char ***argv, char ***envp) {\n-  uptr nargv;\n-  uptr nenv;\n-  int argvmib[4] = {CTL_KERN, KERN_PROC_ARGS, getpid(), KERN_PROC_ARGV};\n-  int envmib[4] = {CTL_KERN, KERN_PROC_ARGS, getpid(), KERN_PROC_ENV};\n-  if (internal_sysctl(argvmib, 4, NULL, &nargv, NULL, 0) == -1) {\n-    Printf(\"sysctl KERN_PROC_NARGV failed\\n\");\n-    Die();\n-  }\n-  if (internal_sysctl(envmib, 4, NULL, &nenv, NULL, 0) == -1) {\n-    Printf(\"sysctl KERN_PROC_NENV failed\\n\");\n-    Die();\n-  }\n-  if (internal_sysctl(argvmib, 4, &argv, &nargv, NULL, 0) == -1) {\n-    Printf(\"sysctl KERN_PROC_ARGV failed\\n\");\n-    Die();\n-  }\n-  if (internal_sysctl(envmib, 4, &envp, &nenv, NULL, 0) == -1) {\n-    Printf(\"sysctl KERN_PROC_ENV failed\\n\");\n-    Die();\n-  }\n-}\n-\n-char **GetArgv() {\n-  char **argv, **envp;\n-  GetArgsAndEnv(&argv, &envp);\n-  return argv;\n-}\n-\n-char **GetEnviron() {\n-  char **argv, **envp;\n-  GetArgsAndEnv(&argv, &envp);\n-  return envp;\n-}\n-\n-void ReExec() {\n-  UNIMPLEMENTED();\n-}\n-\n-}  // namespace __sanitizer\n-\n-#endif  // SANITIZER_OPENBSD"}, {"sha": "b2372a025c0ebfba80d7a71b9d745c70dd27a171", "filename": "libsanitizer/sanitizer_common/sanitizer_platform.h", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_platform.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_platform.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_platform.h?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -13,7 +13,7 @@\n #define SANITIZER_PLATFORM_H\n \n #if !defined(__linux__) && !defined(__FreeBSD__) && !defined(__NetBSD__) && \\\n-  !defined(__OpenBSD__) && !defined(__APPLE__) && !defined(_WIN32) && \\\n+  !defined(__APPLE__) && !defined(_WIN32) && \\\n   !defined(__Fuchsia__) && !defined(__rtems__) && \\\n   !(defined(__sun__) && defined(__svr4__))\n # error \"This operating system is not supported\"\n@@ -37,12 +37,6 @@\n # define SANITIZER_NETBSD 0\n #endif\n \n-#if defined(__OpenBSD__)\n-# define SANITIZER_OPENBSD 1\n-#else\n-# define SANITIZER_OPENBSD 0\n-#endif\n-\n #if defined(__sun__) && defined(__svr4__)\n # define SANITIZER_SOLARIS 1\n #else\n@@ -112,7 +106,7 @@\n \n #define SANITIZER_POSIX \\\n   (SANITIZER_FREEBSD || SANITIZER_LINUX || SANITIZER_MAC || \\\n-    SANITIZER_NETBSD || SANITIZER_OPENBSD || SANITIZER_SOLARIS)\n+    SANITIZER_NETBSD || SANITIZER_SOLARIS)\n \n #if __LP64__ || defined(_WIN64)\n #  define SANITIZER_WORDSIZE 64\n@@ -244,7 +238,11 @@\n // FIXME: this value should be different on different platforms.  Larger values\n // will still work but will consume more memory for TwoLevelByteMap.\n #if defined(__mips__)\n+#if SANITIZER_GO && defined(__mips64)\n+#define SANITIZER_MMAP_RANGE_SIZE FIRST_32_SECOND_64(1ULL << 32, 1ULL << 47)\n+#else\n # define SANITIZER_MMAP_RANGE_SIZE FIRST_32_SECOND_64(1ULL << 32, 1ULL << 40)\n+#endif\n #elif SANITIZER_RISCV64\n #define SANITIZER_MMAP_RANGE_SIZE FIRST_32_SECOND_64(1ULL << 32, 1ULL << 38)\n #elif defined(__aarch64__)\n@@ -339,7 +337,7 @@\n #endif\n \n #if SANITIZER_FREEBSD || SANITIZER_MAC || SANITIZER_NETBSD || \\\n-  SANITIZER_OPENBSD || SANITIZER_SOLARIS\n+  SANITIZER_SOLARIS\n # define SANITIZER_MADVISE_DONTNEED MADV_FREE\n #else\n # define SANITIZER_MADVISE_DONTNEED MADV_DONTNEED"}, {"sha": "18bab346ce6ed343fa725801252e8cbbbf50d6ec", "filename": "libsanitizer/sanitizer_common/sanitizer_platform_interceptors.h", "status": "modified", "additions": 131, "deletions": 151, "changes": 282, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_platform_interceptors.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_platform_interceptors.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_platform_interceptors.h?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -18,131 +18,124 @@\n #include \"sanitizer_platform.h\"\n \n #if SANITIZER_POSIX\n-# define SI_POSIX 1\n+#define SI_POSIX 1\n #else\n-# define SI_POSIX 0\n+#define SI_POSIX 0\n #endif\n \n #if !SANITIZER_WINDOWS\n-# define SI_WINDOWS 0\n+#define SI_WINDOWS 0\n #else\n-# define SI_WINDOWS 1\n+#define SI_WINDOWS 1\n #endif\n \n #if SI_WINDOWS && SI_POSIX\n-# error \"Windows is not POSIX!\"\n+#error \"Windows is not POSIX!\"\n #endif\n \n #if SI_POSIX\n-# include \"sanitizer_platform_limits_freebsd.h\"\n-# include \"sanitizer_platform_limits_netbsd.h\"\n-# include \"sanitizer_platform_limits_openbsd.h\"\n-# include \"sanitizer_platform_limits_posix.h\"\n-# include \"sanitizer_platform_limits_solaris.h\"\n+#include \"sanitizer_platform_limits_freebsd.h\"\n+#include \"sanitizer_platform_limits_netbsd.h\"\n+#include \"sanitizer_platform_limits_posix.h\"\n+#include \"sanitizer_platform_limits_solaris.h\"\n #endif\n \n #if SANITIZER_LINUX && !SANITIZER_ANDROID\n-# define SI_LINUX_NOT_ANDROID 1\n+#define SI_LINUX_NOT_ANDROID 1\n #else\n-# define SI_LINUX_NOT_ANDROID 0\n+#define SI_LINUX_NOT_ANDROID 0\n #endif\n \n #if SANITIZER_ANDROID\n-# define SI_ANDROID 1\n+#define SI_ANDROID 1\n #else\n-# define SI_ANDROID 0\n+#define SI_ANDROID 0\n #endif\n \n #if SANITIZER_FREEBSD\n-# define SI_FREEBSD 1\n+#define SI_FREEBSD 1\n #else\n-# define SI_FREEBSD 0\n+#define SI_FREEBSD 0\n #endif\n \n #if SANITIZER_NETBSD\n-# define SI_NETBSD 1\n+#define SI_NETBSD 1\n #else\n-# define SI_NETBSD 0\n-#endif\n-\n-#if SANITIZER_OPENBSD\n-#define SI_OPENBSD 1\n-#else\n-#define SI_OPENBSD 0\n+#define SI_NETBSD 0\n #endif\n \n #if SANITIZER_LINUX\n-# define SI_LINUX 1\n+#define SI_LINUX 1\n #else\n-# define SI_LINUX 0\n+#define SI_LINUX 0\n #endif\n \n #if SANITIZER_MAC\n-# define SI_MAC 1\n-# define SI_NOT_MAC 0\n+#define SI_MAC 1\n+#define SI_NOT_MAC 0\n #else\n-# define SI_MAC 0\n-# define SI_NOT_MAC 1\n+#define SI_MAC 0\n+#define SI_NOT_MAC 1\n #endif\n \n #if SANITIZER_IOS\n-# define SI_IOS 1\n+#define SI_IOS 1\n #else\n-# define SI_IOS 0\n+#define SI_IOS 0\n #endif\n \n #if SANITIZER_IOSSIM\n-# define SI_IOSSIM 1\n+#define SI_IOSSIM 1\n #else\n-# define SI_IOSSIM 0\n+#define SI_IOSSIM 0\n #endif\n \n #if SANITIZER_WATCHOS\n-# define SI_WATCHOS 1\n+#define SI_WATCHOS 1\n #else\n-# define SI_WATCHOS 0\n+#define SI_WATCHOS 0\n #endif\n \n #if SANITIZER_TVOS\n-# define SI_TVOS 1\n+#define SI_TVOS 1\n #else\n-# define SI_TVOS 0\n+#define SI_TVOS 0\n #endif\n \n #if SANITIZER_FUCHSIA\n-# define SI_NOT_FUCHSIA 0\n+#define SI_NOT_FUCHSIA 0\n #else\n-# define SI_NOT_FUCHSIA 1\n+#define SI_NOT_FUCHSIA 1\n #endif\n \n #if SANITIZER_RTEMS\n-# define SI_NOT_RTEMS 0\n+#define SI_NOT_RTEMS 0\n #else\n-# define SI_NOT_RTEMS 1\n+#define SI_NOT_RTEMS 1\n #endif\n \n #if SANITIZER_SOLARIS\n-# define SI_SOLARIS 1\n+#define SI_SOLARIS 1\n #else\n-# define SI_SOLARIS 0\n+#define SI_SOLARIS 0\n #endif\n \n #if SANITIZER_SOLARIS32\n-# define SI_SOLARIS32 1\n+#define SI_SOLARIS32 1\n #else\n-# define SI_SOLARIS32 0\n+#define SI_SOLARIS32 0\n #endif\n \n #if SANITIZER_POSIX && !SANITIZER_MAC\n-# define SI_POSIX_NOT_MAC 1\n+#define SI_POSIX_NOT_MAC 1\n #else\n-# define SI_POSIX_NOT_MAC 0\n+#define SI_POSIX_NOT_MAC 0\n #endif\n \n #if SANITIZER_LINUX && !SANITIZER_FREEBSD\n-# define SI_LINUX_NOT_FREEBSD 1\n-# else\n-# define SI_LINUX_NOT_FREEBSD 0\n+#define SI_LINUX_NOT_FREEBSD 1\n+#else\n+#define SI_LINUX_NOT_FREEBSD 0\n #endif\n \n #define SANITIZER_INTERCEPT_STRLEN SI_NOT_FUCHSIA\n@@ -164,21 +157,20 @@\n #define SANITIZER_INTERCEPT_MEMCMP SI_NOT_FUCHSIA\n #define SANITIZER_INTERCEPT_BCMP \\\n   SANITIZER_INTERCEPT_MEMCMP &&  \\\n-      ((SI_POSIX && _GNU_SOURCE) || SI_NETBSD || SI_OPENBSD || SI_FREEBSD)\n+      ((SI_POSIX && _GNU_SOURCE) || SI_NETBSD || SI_FREEBSD)\n #define SANITIZER_INTERCEPT_STRNDUP SI_POSIX\n #define SANITIZER_INTERCEPT___STRNDUP SI_LINUX_NOT_FREEBSD\n #if defined(__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__) && \\\n     __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ < 1070\n-# define SI_MAC_DEPLOYMENT_BELOW_10_7 1\n+#define SI_MAC_DEPLOYMENT_BELOW_10_7 1\n #else\n-# define SI_MAC_DEPLOYMENT_BELOW_10_7 0\n+#define SI_MAC_DEPLOYMENT_BELOW_10_7 0\n #endif\n // memmem on Darwin doesn't exist on 10.6\n // FIXME: enable memmem on Windows.\n #define SANITIZER_INTERCEPT_MEMMEM (SI_POSIX && !SI_MAC_DEPLOYMENT_BELOW_10_7)\n #define SANITIZER_INTERCEPT_MEMCHR SI_NOT_FUCHSIA\n-#define SANITIZER_INTERCEPT_MEMRCHR \\\n-  (SI_FREEBSD || SI_LINUX || SI_NETBSD || SI_OPENBSD)\n+#define SANITIZER_INTERCEPT_MEMRCHR (SI_FREEBSD || SI_LINUX || SI_NETBSD)\n \n #define SANITIZER_INTERCEPT_READ SI_POSIX\n #define SANITIZER_INTERCEPT_PREAD SI_POSIX\n@@ -198,12 +190,12 @@\n #define SANITIZER_INTERCEPT_WRITEV SI_POSIX\n \n #define SANITIZER_INTERCEPT_PREADV \\\n-  (SI_FREEBSD || SI_NETBSD || SI_OPENBSD || SI_LINUX_NOT_ANDROID)\n+  (SI_FREEBSD || SI_NETBSD || SI_LINUX_NOT_ANDROID)\n #define SANITIZER_INTERCEPT_PWRITEV SI_LINUX_NOT_ANDROID\n #define SANITIZER_INTERCEPT_PREADV64 SI_LINUX_NOT_ANDROID\n #define SANITIZER_INTERCEPT_PWRITEV64 SI_LINUX_NOT_ANDROID\n \n-#define SANITIZER_INTERCEPT_PRCTL   SI_LINUX\n+#define SANITIZER_INTERCEPT_PRCTL SI_LINUX\n \n #define SANITIZER_INTERCEPT_LOCALTIME_AND_FRIENDS SI_POSIX\n #define SANITIZER_INTERCEPT_STRPTIME SI_POSIX\n@@ -212,9 +204,9 @@\n #define SANITIZER_INTERCEPT_ISOC99_SCANF SI_LINUX_NOT_ANDROID\n \n #ifndef SANITIZER_INTERCEPT_PRINTF\n-# define SANITIZER_INTERCEPT_PRINTF SI_POSIX\n-# define SANITIZER_INTERCEPT_PRINTF_L (SI_FREEBSD || SI_NETBSD)\n-# define SANITIZER_INTERCEPT_ISOC99_PRINTF SI_LINUX_NOT_ANDROID\n+#define SANITIZER_INTERCEPT_PRINTF SI_POSIX\n+#define SANITIZER_INTERCEPT_PRINTF_L (SI_FREEBSD || SI_NETBSD)\n+#define SANITIZER_INTERCEPT_ISOC99_PRINTF SI_LINUX_NOT_ANDROID\n #endif\n \n #define SANITIZER_INTERCEPT___PRINTF_CHK \\\n@@ -224,31 +216,29 @@\n #define SANITIZER_INTERCEPT_FREXPF_FREXPL SI_POSIX\n \n #define SANITIZER_INTERCEPT_GETPWNAM_AND_FRIENDS SI_POSIX\n-#define SANITIZER_INTERCEPT_GETPWNAM_R_AND_FRIENDS                            \\\n-  (SI_FREEBSD || SI_NETBSD || SI_OPENBSD || SI_MAC || SI_LINUX_NOT_ANDROID || \\\n-  SI_SOLARIS)\n-#define SANITIZER_INTERCEPT_GETPWENT                                          \\\n-  (SI_FREEBSD || SI_NETBSD || SI_OPENBSD || SI_MAC || SI_LINUX_NOT_ANDROID || \\\n-  SI_SOLARIS)\n-#define SANITIZER_INTERCEPT_FGETGRENT_R                                       \\\n-  (SI_FREEBSD || SI_OPENBSD || SI_LINUX_NOT_ANDROID || SI_SOLARIS)\n+#define SANITIZER_INTERCEPT_GETPWNAM_R_AND_FRIENDS \\\n+  (SI_FREEBSD || SI_NETBSD || SI_MAC || SI_LINUX_NOT_ANDROID || SI_SOLARIS)\n+#define SANITIZER_INTERCEPT_GETPWENT \\\n+  (SI_FREEBSD || SI_NETBSD || SI_MAC || SI_LINUX_NOT_ANDROID || SI_SOLARIS)\n+#define SANITIZER_INTERCEPT_FGETGRENT_R \\\n+  (SI_FREEBSD || SI_LINUX_NOT_ANDROID || SI_SOLARIS)\n #define SANITIZER_INTERCEPT_FGETPWENT SI_LINUX_NOT_ANDROID || SI_SOLARIS\n #define SANITIZER_INTERCEPT_GETPWENT_R \\\n-  (SI_FREEBSD || SI_NETBSD || SI_OPENBSD || SI_LINUX_NOT_ANDROID || SI_SOLARIS)\n+  (SI_FREEBSD || SI_NETBSD || SI_LINUX_NOT_ANDROID || SI_SOLARIS)\n #define SANITIZER_INTERCEPT_FGETPWENT_R \\\n-  (SI_FREEBSD || SI_OPENBSD || SI_LINUX_NOT_ANDROID || SI_SOLARIS)\n+  (SI_FREEBSD || SI_LINUX_NOT_ANDROID || SI_SOLARIS)\n #define SANITIZER_INTERCEPT_SETPWENT \\\n   (SI_MAC || SI_LINUX_NOT_ANDROID || SI_SOLARIS)\n #define SANITIZER_INTERCEPT_CLOCK_GETTIME \\\n-  (SI_FREEBSD || SI_NETBSD || SI_OPENBSD || SI_LINUX || SI_SOLARIS)\n+  (SI_FREEBSD || SI_NETBSD || SI_LINUX || SI_SOLARIS)\n #define SANITIZER_INTERCEPT_CLOCK_GETCPUCLOCKID SI_LINUX\n #define SANITIZER_INTERCEPT_GETITIMER SI_POSIX\n #define SANITIZER_INTERCEPT_TIME SI_POSIX\n #define SANITIZER_INTERCEPT_GLOB SI_LINUX_NOT_ANDROID || SI_SOLARIS\n #define SANITIZER_INTERCEPT_GLOB64 SI_LINUX_NOT_ANDROID\n #define SANITIZER_INTERCEPT_WAIT SI_POSIX\n #define SANITIZER_INTERCEPT_INET SI_POSIX\n-#define SANITIZER_INTERCEPT_PTHREAD_GETSCHEDPARAM (SI_POSIX && !SI_OPENBSD)\n+#define SANITIZER_INTERCEPT_PTHREAD_GETSCHEDPARAM SI_POSIX\n #define SANITIZER_INTERCEPT_GETADDRINFO SI_POSIX\n #define SANITIZER_INTERCEPT_GETNAMEINFO SI_POSIX\n #define SANITIZER_INTERCEPT_GETSOCKNAME SI_POSIX\n@@ -264,8 +254,7 @@\n   (SI_FREEBSD || SI_LINUX_NOT_ANDROID || SI_SOLARIS)\n #define SANITIZER_INTERCEPT_GETSOCKOPT SI_POSIX\n #define SANITIZER_INTERCEPT_ACCEPT SI_POSIX\n-#define SANITIZER_INTERCEPT_ACCEPT4 \\\n-  (SI_LINUX_NOT_ANDROID || SI_NETBSD || SI_OPENBSD)\n+#define SANITIZER_INTERCEPT_ACCEPT4 (SI_LINUX_NOT_ANDROID || SI_NETBSD)\n #define SANITIZER_INTERCEPT_PACCEPT SI_NETBSD\n #define SANITIZER_INTERCEPT_MODF SI_POSIX\n #define SANITIZER_INTERCEPT_RECVMSG SI_POSIX\n@@ -299,36 +288,32 @@\n #define SANITIZER_INTERCEPT___STRXFRM_L SI_LINUX\n #define SANITIZER_INTERCEPT_WCSXFRM SI_POSIX\n #define SANITIZER_INTERCEPT___WCSXFRM_L SI_LINUX\n-#define SANITIZER_INTERCEPT_WCSNRTOMBS                                        \\\n-  (SI_FREEBSD || SI_NETBSD || SI_OPENBSD || SI_MAC || SI_LINUX_NOT_ANDROID || \\\n-  SI_SOLARIS)\n-#define SANITIZER_INTERCEPT_WCRTOMB                                           \\\n-  (SI_FREEBSD || SI_NETBSD || SI_OPENBSD || SI_MAC || SI_LINUX_NOT_ANDROID || \\\n-  SI_SOLARIS)\n-#define SANITIZER_INTERCEPT_WCTOMB                                           \\\n-  (SI_FREEBSD || SI_NETBSD || SI_OPENBSD || SI_MAC || SI_LINUX_NOT_ANDROID || \\\n-  SI_SOLARIS)\n+#define SANITIZER_INTERCEPT_WCSNRTOMBS \\\n+  (SI_FREEBSD || SI_NETBSD || SI_MAC || SI_LINUX_NOT_ANDROID || SI_SOLARIS)\n+#define SANITIZER_INTERCEPT_WCRTOMB \\\n+  (SI_FREEBSD || SI_NETBSD || SI_MAC || SI_LINUX_NOT_ANDROID || SI_SOLARIS)\n+#define SANITIZER_INTERCEPT_WCTOMB \\\n+  (SI_FREEBSD || SI_NETBSD || SI_MAC || SI_LINUX_NOT_ANDROID || SI_SOLARIS)\n #define SANITIZER_INTERCEPT_TCGETATTR SI_LINUX_NOT_ANDROID || SI_SOLARIS\n #define SANITIZER_INTERCEPT_REALPATH SI_POSIX\n #define SANITIZER_INTERCEPT_CANONICALIZE_FILE_NAME \\\n   (SI_LINUX_NOT_ANDROID || SI_SOLARIS)\n-#define SANITIZER_INTERCEPT_CONFSTR                                           \\\n-  (SI_FREEBSD || SI_NETBSD || SI_OPENBSD || SI_MAC || SI_LINUX_NOT_ANDROID || \\\n-  SI_SOLARIS)\n+#define SANITIZER_INTERCEPT_CONFSTR \\\n+  (SI_FREEBSD || SI_NETBSD || SI_MAC || SI_LINUX_NOT_ANDROID || SI_SOLARIS)\n #define SANITIZER_INTERCEPT_SCHED_GETAFFINITY SI_LINUX_NOT_ANDROID\n #define SANITIZER_INTERCEPT_SCHED_GETPARAM SI_LINUX_NOT_ANDROID || SI_SOLARIS\n #define SANITIZER_INTERCEPT_STRERROR SI_POSIX\n #define SANITIZER_INTERCEPT_STRERROR_R SI_POSIX\n #define SANITIZER_INTERCEPT_XPG_STRERROR_R SI_LINUX_NOT_ANDROID\n #define SANITIZER_INTERCEPT_SCANDIR \\\n-  (SI_FREEBSD || SI_NETBSD || SI_OPENBSD || SI_LINUX_NOT_ANDROID || SI_SOLARIS)\n+  (SI_FREEBSD || SI_NETBSD || SI_LINUX_NOT_ANDROID || SI_SOLARIS)\n #define SANITIZER_INTERCEPT_SCANDIR64 SI_LINUX_NOT_ANDROID || SI_SOLARIS32\n #define SANITIZER_INTERCEPT_GETGROUPS SI_POSIX\n #define SANITIZER_INTERCEPT_POLL SI_POSIX\n #define SANITIZER_INTERCEPT_PPOLL SI_LINUX_NOT_ANDROID || SI_SOLARIS\n-#define SANITIZER_INTERCEPT_WORDEXP \\\n+#define SANITIZER_INTERCEPT_WORDEXP                                          \\\n   (SI_FREEBSD || SI_NETBSD || (SI_MAC && !SI_IOS) || SI_LINUX_NOT_ANDROID || \\\n-    SI_SOLARIS)\n+   SI_SOLARIS)  // NOLINT\n #define SANITIZER_INTERCEPT_SIGWAIT SI_POSIX\n #define SANITIZER_INTERCEPT_SIGWAITINFO SI_LINUX_NOT_ANDROID || SI_SOLARIS\n #define SANITIZER_INTERCEPT_SIGTIMEDWAIT SI_LINUX_NOT_ANDROID || SI_SOLARIS\n@@ -339,33 +324,33 @@\n #define SANITIZER_INTERCEPT_SIGPROCMASK SI_POSIX\n #define SANITIZER_INTERCEPT_PTHREAD_SIGMASK SI_POSIX\n #define SANITIZER_INTERCEPT_BACKTRACE \\\n-  (SI_FREEBSD || SI_NETBSD || SI_OPENBSD || SI_LINUX_NOT_ANDROID || SI_SOLARIS)\n+  (SI_FREEBSD || SI_NETBSD || SI_LINUX_NOT_ANDROID || SI_SOLARIS)\n #define SANITIZER_INTERCEPT_GETMNTENT SI_LINUX\n #define SANITIZER_INTERCEPT_GETMNTENT_R SI_LINUX_NOT_ANDROID\n #define SANITIZER_INTERCEPT_STATFS \\\n   (SI_FREEBSD || SI_MAC || SI_LINUX_NOT_ANDROID || SI_SOLARIS)\n #define SANITIZER_INTERCEPT_STATFS64 \\\n   (((SI_MAC && !TARGET_CPU_ARM64) && !SI_IOS) || SI_LINUX_NOT_ANDROID)\n #define SANITIZER_INTERCEPT_STATVFS \\\n-  (SI_FREEBSD || SI_NETBSD || SI_OPENBSD || SI_LINUX_NOT_ANDROID)\n+  (SI_FREEBSD || SI_NETBSD || SI_LINUX_NOT_ANDROID)\n #define SANITIZER_INTERCEPT_STATVFS64 SI_LINUX_NOT_ANDROID\n #define SANITIZER_INTERCEPT_INITGROUPS SI_POSIX\n-#define SANITIZER_INTERCEPT_ETHER_NTOA_ATON (SI_POSIX && !SI_OPENBSD)\n+#define SANITIZER_INTERCEPT_ETHER_NTOA_ATON SI_POSIX\n #define SANITIZER_INTERCEPT_ETHER_HOST \\\n   (SI_FREEBSD || SI_MAC || SI_LINUX_NOT_ANDROID)\n #define SANITIZER_INTERCEPT_ETHER_R (SI_FREEBSD || SI_LINUX_NOT_ANDROID)\n #define SANITIZER_INTERCEPT_SHMCTL                                       \\\n   (((SI_FREEBSD || SI_LINUX_NOT_ANDROID) && SANITIZER_WORDSIZE == 64) || \\\n-   SI_NETBSD || SI_OPENBSD || SI_SOLARIS)  // NOLINT\n+   SI_NETBSD || SI_SOLARIS)  // NOLINT\n #define SANITIZER_INTERCEPT_RANDOM_R SI_LINUX_NOT_ANDROID\n #define SANITIZER_INTERCEPT_PTHREAD_ATTR_GET SI_POSIX\n #define SANITIZER_INTERCEPT_PTHREAD_ATTR_GETINHERITSCHED \\\n   (SI_FREEBSD || SI_NETBSD || SI_MAC || SI_LINUX_NOT_ANDROID || SI_SOLARIS)\n #define SANITIZER_INTERCEPT_PTHREAD_ATTR_GETAFFINITY_NP SI_LINUX_NOT_ANDROID\n-#define SANITIZER_INTERCEPT_PTHREAD_ATTR_GET_SCHED (SI_POSIX && !SI_OPENBSD)\n+#define SANITIZER_INTERCEPT_PTHREAD_ATTR_GET_SCHED SI_POSIX\n #define SANITIZER_INTERCEPT_PTHREAD_MUTEXATTR_GETPSHARED \\\n-  (SI_POSIX && !SI_NETBSD && !SI_OPENBSD)\n-#define SANITIZER_INTERCEPT_PTHREAD_MUTEXATTR_GETTYPE (SI_POSIX && !SI_OPENBSD)\n+  (SI_POSIX && !SI_NETBSD)\n+#define SANITIZER_INTERCEPT_PTHREAD_MUTEXATTR_GETTYPE SI_POSIX\n #define SANITIZER_INTERCEPT_PTHREAD_MUTEXATTR_GETPROTOCOL \\\n   (SI_MAC || SI_NETBSD || SI_LINUX_NOT_ANDROID || SI_SOLARIS)\n #define SANITIZER_INTERCEPT_PTHREAD_MUTEXATTR_GETPRIOCEILING \\\n@@ -374,14 +359,13 @@\n   (SI_LINUX_NOT_ANDROID || SI_SOLARIS)\n #define SANITIZER_INTERCEPT_PTHREAD_MUTEXATTR_GETROBUST_NP SI_LINUX_NOT_ANDROID\n #define SANITIZER_INTERCEPT_PTHREAD_RWLOCKATTR_GETPSHARED \\\n-  (SI_POSIX && !SI_NETBSD && !SI_OPENBSD)\n+  (SI_POSIX && !SI_NETBSD)\n #define SANITIZER_INTERCEPT_PTHREAD_RWLOCKATTR_GETKIND_NP SI_LINUX_NOT_ANDROID\n-#define SANITIZER_INTERCEPT_PTHREAD_CONDATTR_GETPSHARED \\\n-  (SI_POSIX && !SI_NETBSD && !SI_OPENBSD)\n+#define SANITIZER_INTERCEPT_PTHREAD_CONDATTR_GETPSHARED (SI_POSIX && !SI_NETBSD)\n #define SANITIZER_INTERCEPT_PTHREAD_CONDATTR_GETCLOCK \\\n   (SI_LINUX_NOT_ANDROID || SI_SOLARIS)\n #define SANITIZER_INTERCEPT_PTHREAD_BARRIERATTR_GETPSHARED \\\n-  (SI_LINUX_NOT_ANDROID && !SI_NETBSD && !SI_OPENBSD)\n+  (SI_LINUX_NOT_ANDROID && !SI_NETBSD)\n #define SANITIZER_INTERCEPT_THR_EXIT SI_FREEBSD\n #define SANITIZER_INTERCEPT_TMPNAM SI_POSIX\n #define SANITIZER_INTERCEPT_TMPNAM_R SI_LINUX_NOT_ANDROID || SI_SOLARIS\n@@ -398,40 +382,37 @@\n #define SANITIZER_INTERCEPT_LGAMMA_R (SI_FREEBSD || SI_LINUX || SI_SOLARIS)\n #define SANITIZER_INTERCEPT_LGAMMAL_R SI_LINUX_NOT_ANDROID || SI_SOLARIS\n #define SANITIZER_INTERCEPT_DRAND48_R SI_LINUX_NOT_ANDROID\n-#define SANITIZER_INTERCEPT_RAND_R                                            \\\n-  (SI_FREEBSD || SI_NETBSD || SI_OPENBSD || SI_MAC || SI_LINUX_NOT_ANDROID || \\\n-  SI_SOLARIS)\n+#define SANITIZER_INTERCEPT_RAND_R \\\n+  (SI_FREEBSD || SI_NETBSD || SI_MAC || SI_LINUX_NOT_ANDROID || SI_SOLARIS)\n #define SANITIZER_INTERCEPT_ICONV \\\n-  (SI_FREEBSD || SI_NETBSD || SI_OPENBSD || SI_LINUX_NOT_ANDROID || SI_SOLARIS)\n+  (SI_FREEBSD || SI_NETBSD || SI_LINUX_NOT_ANDROID || SI_SOLARIS)\n #define SANITIZER_INTERCEPT_TIMES SI_POSIX\n \n // FIXME: getline seems to be available on OSX 10.7\n #define SANITIZER_INTERCEPT_GETLINE \\\n-  (SI_FREEBSD || SI_NETBSD || SI_OPENBSD || SI_LINUX_NOT_ANDROID || SI_SOLARIS)\n+  (SI_FREEBSD || SI_NETBSD || SI_LINUX_NOT_ANDROID || SI_SOLARIS)\n \n #define SANITIZER_INTERCEPT__EXIT \\\n-  (SI_LINUX || SI_FREEBSD || SI_NETBSD || SI_OPENBSD || SI_MAC || SI_SOLARIS)\n+  (SI_LINUX || SI_FREEBSD || SI_NETBSD || SI_MAC || SI_SOLARIS)\n \n #define SANITIZER_INTERCEPT_PTHREAD_MUTEX SI_POSIX\n #define SANITIZER_INTERCEPT___PTHREAD_MUTEX SI_LINUX_NOT_ANDROID\n #define SANITIZER_INTERCEPT___LIBC_MUTEX SI_NETBSD\n #define SANITIZER_INTERCEPT_PTHREAD_SETNAME_NP \\\n-  (SI_FREEBSD || SI_NETBSD || SI_OPENBSD || SI_LINUX_NOT_ANDROID || SI_SOLARIS)\n+  (SI_FREEBSD || SI_NETBSD || SI_LINUX_NOT_ANDROID || SI_SOLARIS)\n #define SANITIZER_INTERCEPT_PTHREAD_GETNAME_NP \\\n   (SI_FREEBSD || SI_NETBSD || SI_LINUX_NOT_ANDROID || SI_SOLARIS)\n \n #define SANITIZER_INTERCEPT_TLS_GET_ADDR \\\n-  (SI_FREEBSD || SI_NETBSD || SI_OPENBSD || SI_LINUX_NOT_ANDROID || SI_SOLARIS)\n+  (SI_FREEBSD || SI_NETBSD || SI_LINUX_NOT_ANDROID || SI_SOLARIS)\n \n #define SANITIZER_INTERCEPT_LISTXATTR SI_LINUX\n #define SANITIZER_INTERCEPT_GETXATTR SI_LINUX\n #define SANITIZER_INTERCEPT_GETRESID SI_LINUX\n-#define SANITIZER_INTERCEPT_GETIFADDRS                                        \\\n-  (SI_FREEBSD || SI_NETBSD || SI_OPENBSD || SI_LINUX_NOT_ANDROID || SI_MAC || \\\n-  SI_SOLARIS)\n-#define SANITIZER_INTERCEPT_IF_INDEXTONAME                                    \\\n-  (SI_FREEBSD || SI_NETBSD || SI_OPENBSD || SI_LINUX_NOT_ANDROID || SI_MAC || \\\n-  SI_SOLARIS)\n+#define SANITIZER_INTERCEPT_GETIFADDRS \\\n+  (SI_FREEBSD || SI_NETBSD || SI_LINUX_NOT_ANDROID || SI_MAC || SI_SOLARIS)\n+#define SANITIZER_INTERCEPT_IF_INDEXTONAME \\\n+  (SI_FREEBSD || SI_NETBSD || SI_LINUX_NOT_ANDROID || SI_MAC || SI_SOLARIS)\n #define SANITIZER_INTERCEPT_CAPGET SI_LINUX_NOT_ANDROID\n #if SI_LINUX && defined(__arm__)\n #define SANITIZER_INTERCEPT_AEABI_MEM 1\n@@ -440,41 +421,38 @@\n #endif\n #define SANITIZER_INTERCEPT___BZERO SI_MAC || SI_LINUX_NOT_ANDROID\n #define SANITIZER_INTERCEPT_BZERO SI_LINUX_NOT_ANDROID\n-#define SANITIZER_INTERCEPT_FTIME \\\n-  (!SI_FREEBSD && !SI_NETBSD && !SI_OPENBSD && SI_POSIX)\n+#define SANITIZER_INTERCEPT_FTIME (!SI_FREEBSD && !SI_NETBSD && SI_POSIX)\n #define SANITIZER_INTERCEPT_XDR SI_LINUX_NOT_ANDROID || SI_SOLARIS\n #define SANITIZER_INTERCEPT_XDRREC SI_LINUX_NOT_ANDROID\n #define SANITIZER_INTERCEPT_TSEARCH \\\n-  (SI_LINUX_NOT_ANDROID || SI_MAC || SI_NETBSD || SI_OPENBSD || SI_SOLARIS)\n+  (SI_LINUX_NOT_ANDROID || SI_MAC || SI_NETBSD || SI_SOLARIS)\n #define SANITIZER_INTERCEPT_LIBIO_INTERNALS SI_LINUX_NOT_ANDROID\n #define SANITIZER_INTERCEPT_FOPEN SI_POSIX\n #define SANITIZER_INTERCEPT_FOPEN64 SI_LINUX_NOT_ANDROID || SI_SOLARIS32\n #define SANITIZER_INTERCEPT_OPEN_MEMSTREAM \\\n-  (SI_LINUX_NOT_ANDROID || SI_NETBSD || SI_OPENBSD || SI_SOLARIS)\n+  (SI_LINUX_NOT_ANDROID || SI_NETBSD || SI_SOLARIS)\n #define SANITIZER_INTERCEPT_OBSTACK SI_LINUX_NOT_ANDROID\n #define SANITIZER_INTERCEPT_FFLUSH SI_POSIX\n #define SANITIZER_INTERCEPT_FCLOSE SI_POSIX\n \n #ifndef SANITIZER_INTERCEPT_DLOPEN_DLCLOSE\n-#define SANITIZER_INTERCEPT_DLOPEN_DLCLOSE                                    \\\n-  (SI_FREEBSD || SI_NETBSD || SI_OPENBSD || SI_LINUX_NOT_ANDROID || SI_MAC || \\\n-  SI_SOLARIS)\n+#define SANITIZER_INTERCEPT_DLOPEN_DLCLOSE \\\n+  (SI_FREEBSD || SI_NETBSD || SI_LINUX_NOT_ANDROID || SI_MAC || SI_SOLARIS)\n #endif\n \n #define SANITIZER_INTERCEPT_GETPASS \\\n-  (SI_LINUX_NOT_ANDROID || SI_MAC || SI_NETBSD || SI_OPENBSD)\n+  (SI_LINUX_NOT_ANDROID || SI_MAC || SI_NETBSD)\n #define SANITIZER_INTERCEPT_TIMERFD SI_LINUX_NOT_ANDROID\n \n #define SANITIZER_INTERCEPT_MLOCKX SI_POSIX\n #define SANITIZER_INTERCEPT_FOPENCOOKIE SI_LINUX_NOT_ANDROID\n #define SANITIZER_INTERCEPT_SEM \\\n   (SI_LINUX || SI_FREEBSD || SI_NETBSD || SI_SOLARIS)\n #define SANITIZER_INTERCEPT_PTHREAD_SETCANCEL SI_POSIX\n-#define SANITIZER_INTERCEPT_MINCORE \\\n-  (SI_LINUX || SI_NETBSD || SI_OPENBSD || SI_SOLARIS)\n+#define SANITIZER_INTERCEPT_MINCORE (SI_LINUX || SI_NETBSD || SI_SOLARIS)\n #define SANITIZER_INTERCEPT_PROCESS_VM_READV SI_LINUX\n #define SANITIZER_INTERCEPT_CTERMID \\\n-  (SI_LINUX || SI_MAC || SI_FREEBSD || SI_NETBSD || SI_OPENBSD || SI_SOLARIS)\n+  (SI_LINUX || SI_MAC || SI_FREEBSD || SI_NETBSD || SI_SOLARIS)\n #define SANITIZER_INTERCEPT_CTERMID_R (SI_MAC || SI_FREEBSD || SI_SOLARIS)\n \n #define SANITIZER_INTERCEPTOR_HOOKS \\\n@@ -484,7 +462,7 @@\n #define SANITIZER_INTERCEPT_EVENTFD_READ_WRITE SI_LINUX\n \n #define SANITIZER_INTERCEPT_STAT \\\n-  (SI_FREEBSD || SI_MAC || SI_ANDROID || SI_NETBSD || SI_OPENBSD || SI_SOLARIS)\n+  (SI_FREEBSD || SI_MAC || SI_ANDROID || SI_NETBSD || SI_SOLARIS)\n #define SANITIZER_INTERCEPT_LSTAT (SI_NETBSD || SI_FREEBSD)\n #define SANITIZER_INTERCEPT___XSTAT (!SANITIZER_INTERCEPT_STAT && SI_POSIX)\n #define SANITIZER_INTERCEPT___XSTAT64 SI_LINUX_NOT_ANDROID\n@@ -497,65 +475,67 @@\n   (SI_LINUX_NOT_ANDROID || SI_MAC || SI_FREEBSD || SI_NETBSD)\n \n #define SANITIZER_INTERCEPT_GETLOADAVG \\\n-  (SI_LINUX_NOT_ANDROID || SI_MAC || SI_FREEBSD || SI_NETBSD || SI_OPENBSD)\n+  (SI_LINUX_NOT_ANDROID || SI_MAC || SI_FREEBSD || SI_NETBSD)\n \n #define SANITIZER_INTERCEPT_MMAP SI_POSIX\n #define SANITIZER_INTERCEPT_MMAP64 SI_LINUX_NOT_ANDROID\n-#define SANITIZER_INTERCEPT_MALLOPT_AND_MALLINFO                            \\\n-  (!SI_FREEBSD && !SI_MAC && !SI_NETBSD && !SI_OPENBSD && SI_NOT_FUCHSIA && \\\n-   SI_NOT_RTEMS && !SI_SOLARIS)  // NOLINT\n+#define SANITIZER_INTERCEPT_MALLOPT_AND_MALLINFO                             \\\n+  (!SI_FREEBSD && !SI_MAC && !SI_NETBSD && SI_NOT_FUCHSIA && SI_NOT_RTEMS && \\\n+   !SI_SOLARIS)  // NOLINT\n #define SANITIZER_INTERCEPT_MEMALIGN \\\n-  (!SI_FREEBSD && !SI_MAC && !SI_NETBSD && !SI_OPENBSD && SI_NOT_RTEMS)\n-#define SANITIZER_INTERCEPT_PVALLOC                                         \\\n-  (!SI_FREEBSD && !SI_MAC && !SI_NETBSD && !SI_OPENBSD && SI_NOT_FUCHSIA && \\\n-   SI_NOT_RTEMS && !SI_SOLARIS)  // NOLINT\n-#define SANITIZER_INTERCEPT_CFREE                                           \\\n-  (!SI_FREEBSD && !SI_MAC && !SI_NETBSD && !SI_OPENBSD && SI_NOT_FUCHSIA && \\\n-   SI_NOT_RTEMS && !SI_SOLARIS)  // NOLINT\n+  (!SI_FREEBSD && !SI_MAC && !SI_NETBSD && SI_NOT_RTEMS)\n+#define SANITIZER_INTERCEPT___LIBC_MEMALIGN                               \\\n+  (!SI_FREEBSD && !SI_MAC && !SI_NETBSD && !SI_OPENBSD && SI_NOT_RTEMS && \\\n+   !SI_ANDROID)  // NOLINT\n+#define SANITIZER_INTERCEPT_PVALLOC                                          \\\n+  (!SI_FREEBSD && !SI_MAC && !SI_NETBSD && SI_NOT_FUCHSIA && SI_NOT_RTEMS && \\\n+   !SI_SOLARIS)  // NOLINT\n+#define SANITIZER_INTERCEPT_CFREE                                            \\\n+  (!SI_FREEBSD && !SI_MAC && !SI_NETBSD && SI_NOT_FUCHSIA && SI_NOT_RTEMS && \\\n+   !SI_SOLARIS && !SANITIZER_ANDROID)  // NOLINT\n #define SANITIZER_INTERCEPT_REALLOCARRAY SI_POSIX\n #define SANITIZER_INTERCEPT_ALIGNED_ALLOC (!SI_MAC && SI_NOT_RTEMS)\n-#define SANITIZER_INTERCEPT_MALLOC_USABLE_SIZE \\\n-  (!SI_MAC && !SI_OPENBSD && !SI_NETBSD)\n+#define SANITIZER_INTERCEPT_MALLOC_USABLE_SIZE (!SI_MAC && !SI_NETBSD)\n #define SANITIZER_INTERCEPT_MCHECK_MPROBE SI_LINUX_NOT_ANDROID\n #define SANITIZER_INTERCEPT_WCSCAT SI_POSIX\n #define SANITIZER_INTERCEPT_WCSDUP SI_POSIX\n #define SANITIZER_INTERCEPT_SIGNAL_AND_SIGACTION (!SI_WINDOWS && SI_NOT_FUCHSIA)\n #define SANITIZER_INTERCEPT_BSD_SIGNAL SI_ANDROID\n \n-#define SANITIZER_INTERCEPT_ACCT (SI_NETBSD || SI_OPENBSD || SI_FREEBSD)\n+#define SANITIZER_INTERCEPT_ACCT (SI_NETBSD || SI_FREEBSD)\n #define SANITIZER_INTERCEPT_USER_FROM_UID SI_NETBSD\n #define SANITIZER_INTERCEPT_UID_FROM_USER SI_NETBSD\n #define SANITIZER_INTERCEPT_GROUP_FROM_GID SI_NETBSD\n #define SANITIZER_INTERCEPT_GID_FROM_GROUP SI_NETBSD\n-#define SANITIZER_INTERCEPT_ACCESS (SI_NETBSD || SI_OPENBSD || SI_FREEBSD)\n-#define SANITIZER_INTERCEPT_FACCESSAT (SI_NETBSD || SI_OPENBSD || SI_FREEBSD)\n-#define SANITIZER_INTERCEPT_GETGROUPLIST (SI_NETBSD || SI_OPENBSD)\n-#define SANITIZER_INTERCEPT_STRLCPY                                            \\\n-  (SI_NETBSD || SI_FREEBSD || SI_OPENBSD || SI_MAC || SI_ANDROID)\n+#define SANITIZER_INTERCEPT_ACCESS (SI_NETBSD || SI_FREEBSD)\n+#define SANITIZER_INTERCEPT_FACCESSAT (SI_NETBSD || SI_FREEBSD)\n+#define SANITIZER_INTERCEPT_GETGROUPLIST SI_NETBSD\n+#define SANITIZER_INTERCEPT_STRLCPY \\\n+  (SI_NETBSD || SI_FREEBSD || SI_MAC || SI_ANDROID)\n \n #define SANITIZER_INTERCEPT_NAME_TO_HANDLE_AT SI_LINUX_NOT_ANDROID\n #define SANITIZER_INTERCEPT_OPEN_BY_HANDLE_AT SI_LINUX_NOT_ANDROID\n \n #define SANITIZER_INTERCEPT_READLINK SI_POSIX\n #if defined(__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__) && \\\n     __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ < 101000\n-# define SI_MAC_DEPLOYMENT_BELOW_10_10 1\n+#define SI_MAC_DEPLOYMENT_BELOW_10_10 1\n #else\n-# define SI_MAC_DEPLOYMENT_BELOW_10_10 0\n+#define SI_MAC_DEPLOYMENT_BELOW_10_10 0\n #endif\n #define SANITIZER_INTERCEPT_READLINKAT \\\n   (SI_POSIX && !SI_MAC_DEPLOYMENT_BELOW_10_10)\n \n-#define SANITIZER_INTERCEPT_DEVNAME (SI_NETBSD || SI_OPENBSD || SI_FREEBSD)\n+#define SANITIZER_INTERCEPT_DEVNAME (SI_NETBSD || SI_FREEBSD)\n #define SANITIZER_INTERCEPT_DEVNAME_R (SI_NETBSD || SI_FREEBSD)\n #define SANITIZER_INTERCEPT_FGETLN (SI_NETBSD || SI_FREEBSD)\n #define SANITIZER_INTERCEPT_STRMODE (SI_NETBSD || SI_FREEBSD)\n #define SANITIZER_INTERCEPT_TTYENT SI_NETBSD\n #define SANITIZER_INTERCEPT_PROTOENT (SI_NETBSD || SI_LINUX)\n #define SANITIZER_INTERCEPT_PROTOENT_R (SI_LINUX_NOT_ANDROID)\n #define SANITIZER_INTERCEPT_NETENT SI_NETBSD\n-#define SANITIZER_INTERCEPT_SETVBUF (SI_NETBSD || SI_FREEBSD || \\\n-  SI_LINUX || SI_MAC)\n+#define SANITIZER_INTERCEPT_SETVBUF \\\n+  (SI_NETBSD || SI_FREEBSD || SI_LINUX || SI_MAC)\n #define SANITIZER_INTERCEPT_GETMNTINFO (SI_NETBSD || SI_FREEBSD || SI_MAC)\n #define SANITIZER_INTERCEPT_MI_VECTOR_HASH SI_NETBSD\n #define SANITIZER_INTERCEPT_GETVFSSTAT SI_NETBSD"}, {"sha": "c51327e1269e081cb0e231b75cbce71b62601e88", "filename": "libsanitizer/sanitizer_common/sanitizer_platform_limits_linux.cpp", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_platform_limits_linux.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_platform_limits_linux.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_platform_limits_linux.cpp?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -26,12 +26,9 @@\n \n // With old kernels (and even new kernels on powerpc) asm/stat.h uses types that\n // are not defined anywhere in userspace headers. Fake them. This seems to work\n-// fine with newer headers, too.  Beware that with <sys/stat.h>, struct stat\n-// takes the form of struct stat64 on 32-bit platforms if _FILE_OFFSET_BITS=64.\n-// Also, for some platforms (e.g. mips) there are additional members in the\n-// <sys/stat.h> struct stat:s.\n+// fine with newer headers, too.\n #include <linux/posix_types.h>\n-#if defined(__x86_64__)\n+#if defined(__x86_64__) ||  defined(__mips__)\n #include <sys/stat.h>\n #else\n #define ino_t __kernel_ino_t"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "libsanitizer/sanitizer_common/sanitizer_platform_limits_openbsd.cpp", "status": "modified", "additions": 0, "deletions": 279, "changes": 279, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_platform_limits_openbsd.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_platform_limits_openbsd.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_platform_limits_openbsd.cpp?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -1,279 +0,0 @@\n-//===-- sanitizer_platform_limits_openbsd.cpp -----------------------------===//\n-//\n-// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.\n-// See https://llvm.org/LICENSE.txt for license information.\n-// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n-//\n-//===----------------------------------------------------------------------===//\n-//\n-// This file is a part of Sanitizer common code.\n-//\n-// Sizes and layouts of platform-specific NetBSD data structures.\n-//===----------------------------------------------------------------------===//\n-\n-#include \"sanitizer_platform.h\"\n-\n-#if SANITIZER_OPENBSD\n-#include <arpa/inet.h>\n-#include <dirent.h>\n-#include <glob.h>\n-#include <grp.h>\n-#include <ifaddrs.h>\n-#include <limits.h>\n-#include <link_elf.h>\n-#include <sys/socket.h>\n-#include <net/if.h>\n-#include <net/ppp_defs.h>\n-#include <net/route.h>\n-#include <netdb.h>\n-#include <netinet/in.h>\n-#include <netinet/ip_mroute.h>\n-#include <poll.h>\n-#include <pthread.h>\n-#include <pwd.h>\n-#include <semaphore.h>\n-#include <signal.h>\n-#include <soundcard.h>\n-#include <stddef.h>\n-#include <stdint.h>\n-#include <sys/filio.h>\n-#include <sys/ipc.h>\n-#include <sys/mman.h>\n-#include <sys/mount.h>\n-#include <sys/msg.h>\n-#include <sys/mtio.h>\n-#include <sys/ptrace.h>\n-#include <sys/resource.h>\n-#include <sys/shm.h>\n-#include <sys/signal.h>\n-#include <sys/sockio.h>\n-#include <sys/stat.h>\n-#include <sys/statvfs.h>\n-#include <sys/time.h>\n-#include <sys/times.h>\n-#include <sys/types.h>\n-#include <sys/utsname.h>\n-#include <term.h>\n-#include <time.h>\n-#include <utime.h>\n-#include <utmp.h>\n-#include <wchar.h>\n-\n-// Include these after system headers to avoid name clashes and ambiguities.\n-#include \"sanitizer_internal_defs.h\"\n-#include \"sanitizer_platform_limits_openbsd.h\"\n-\n-namespace __sanitizer {\n-unsigned struct_utsname_sz = sizeof(struct utsname);\n-unsigned struct_stat_sz = sizeof(struct stat);\n-unsigned struct_rusage_sz = sizeof(struct rusage);\n-unsigned struct_tm_sz = sizeof(struct tm);\n-unsigned struct_passwd_sz = sizeof(struct passwd);\n-unsigned struct_group_sz = sizeof(struct group);\n-unsigned siginfo_t_sz = sizeof(siginfo_t);\n-unsigned struct_sigaction_sz = sizeof(struct sigaction);\n-unsigned struct_stack_t_sz = sizeof(stack_t);\n-unsigned struct_itimerval_sz = sizeof(struct itimerval);\n-unsigned pthread_t_sz = sizeof(pthread_t);\n-unsigned pthread_mutex_t_sz = sizeof(pthread_mutex_t);\n-unsigned pthread_cond_t_sz = sizeof(pthread_cond_t);\n-unsigned pid_t_sz = sizeof(pid_t);\n-unsigned timeval_sz = sizeof(timeval);\n-unsigned uid_t_sz = sizeof(uid_t);\n-unsigned gid_t_sz = sizeof(gid_t);\n-unsigned mbstate_t_sz = sizeof(mbstate_t);\n-unsigned sigset_t_sz = sizeof(sigset_t);\n-unsigned struct_timezone_sz = sizeof(struct timezone);\n-unsigned struct_tms_sz = sizeof(struct tms);\n-unsigned struct_sched_param_sz = sizeof(struct sched_param);\n-unsigned struct_sockaddr_sz = sizeof(struct sockaddr);\n-unsigned struct_rlimit_sz = sizeof(struct rlimit);\n-unsigned struct_timespec_sz = sizeof(struct timespec);\n-unsigned struct_utimbuf_sz = sizeof(struct utimbuf);\n-unsigned struct_itimerspec_sz = sizeof(struct itimerspec);\n-unsigned struct_msqid_ds_sz = sizeof(struct msqid_ds);\n-unsigned struct_statvfs_sz = sizeof(struct statvfs);\n-\n-const uptr sig_ign = (uptr)SIG_IGN;\n-const uptr sig_dfl = (uptr)SIG_DFL;\n-const uptr sig_err = (uptr)SIG_ERR;\n-const uptr sa_siginfo = (uptr)SA_SIGINFO;\n-\n-int shmctl_ipc_stat = (int)IPC_STAT;\n-\n-unsigned struct_utmp_sz = sizeof(struct utmp);\n-\n-int map_fixed = MAP_FIXED;\n-\n-int af_inet = (int)AF_INET;\n-int af_inet6 = (int)AF_INET6;\n-\n-uptr __sanitizer_in_addr_sz(int af) {\n-  if (af == AF_INET)\n-    return sizeof(struct in_addr);\n-  else if (af == AF_INET6)\n-    return sizeof(struct in6_addr);\n-  else\n-    return 0;\n-}\n-\n-unsigned struct_ElfW_Phdr_sz = sizeof(Elf_Phdr);\n-\n-int glob_nomatch = GLOB_NOMATCH;\n-int glob_altdirfunc = GLOB_ALTDIRFUNC;\n-\n-unsigned path_max = PATH_MAX;\n-\n-const int si_SEGV_MAPERR = SEGV_MAPERR;\n-const int si_SEGV_ACCERR = SEGV_ACCERR;\n-}  // namespace __sanitizer\n-\n-using namespace __sanitizer;\n-\n-COMPILER_CHECK(sizeof(__sanitizer_pthread_attr_t) >= sizeof(pthread_attr_t));\n-\n-COMPILER_CHECK(sizeof(socklen_t) == sizeof(unsigned));\n-CHECK_TYPE_SIZE(pthread_key_t);\n-\n-CHECK_TYPE_SIZE(dl_phdr_info);\n-CHECK_SIZE_AND_OFFSET(dl_phdr_info, dlpi_addr);\n-CHECK_SIZE_AND_OFFSET(dl_phdr_info, dlpi_name);\n-CHECK_SIZE_AND_OFFSET(dl_phdr_info, dlpi_phdr);\n-CHECK_SIZE_AND_OFFSET(dl_phdr_info, dlpi_phnum);\n-\n-CHECK_TYPE_SIZE(glob_t);\n-CHECK_SIZE_AND_OFFSET(glob_t, gl_pathc);\n-CHECK_SIZE_AND_OFFSET(glob_t, gl_pathv);\n-CHECK_SIZE_AND_OFFSET(glob_t, gl_offs);\n-CHECK_SIZE_AND_OFFSET(glob_t, gl_flags);\n-CHECK_SIZE_AND_OFFSET(glob_t, gl_closedir);\n-CHECK_SIZE_AND_OFFSET(glob_t, gl_readdir);\n-CHECK_SIZE_AND_OFFSET(glob_t, gl_opendir);\n-CHECK_SIZE_AND_OFFSET(glob_t, gl_lstat);\n-CHECK_SIZE_AND_OFFSET(glob_t, gl_stat);\n-\n-CHECK_TYPE_SIZE(addrinfo);\n-CHECK_SIZE_AND_OFFSET(addrinfo, ai_flags);\n-CHECK_SIZE_AND_OFFSET(addrinfo, ai_family);\n-CHECK_SIZE_AND_OFFSET(addrinfo, ai_socktype);\n-CHECK_SIZE_AND_OFFSET(addrinfo, ai_protocol);\n-CHECK_SIZE_AND_OFFSET(addrinfo, ai_addrlen);\n-CHECK_SIZE_AND_OFFSET(addrinfo, ai_addr);\n-CHECK_SIZE_AND_OFFSET(addrinfo, ai_canonname);\n-CHECK_SIZE_AND_OFFSET(addrinfo, ai_next);\n-\n-CHECK_TYPE_SIZE(hostent);\n-CHECK_SIZE_AND_OFFSET(hostent, h_name);\n-CHECK_SIZE_AND_OFFSET(hostent, h_aliases);\n-CHECK_SIZE_AND_OFFSET(hostent, h_addrtype);\n-CHECK_SIZE_AND_OFFSET(hostent, h_length);\n-CHECK_SIZE_AND_OFFSET(hostent, h_addr_list);\n-\n-CHECK_TYPE_SIZE(iovec);\n-CHECK_SIZE_AND_OFFSET(iovec, iov_base);\n-CHECK_SIZE_AND_OFFSET(iovec, iov_len);\n-\n-CHECK_TYPE_SIZE(msghdr);\n-CHECK_SIZE_AND_OFFSET(msghdr, msg_name);\n-CHECK_SIZE_AND_OFFSET(msghdr, msg_namelen);\n-CHECK_SIZE_AND_OFFSET(msghdr, msg_iov);\n-CHECK_SIZE_AND_OFFSET(msghdr, msg_iovlen);\n-CHECK_SIZE_AND_OFFSET(msghdr, msg_control);\n-CHECK_SIZE_AND_OFFSET(msghdr, msg_controllen);\n-CHECK_SIZE_AND_OFFSET(msghdr, msg_flags);\n-\n-CHECK_TYPE_SIZE(cmsghdr);\n-CHECK_SIZE_AND_OFFSET(cmsghdr, cmsg_len);\n-CHECK_SIZE_AND_OFFSET(cmsghdr, cmsg_level);\n-CHECK_SIZE_AND_OFFSET(cmsghdr, cmsg_type);\n-\n-COMPILER_CHECK(sizeof(__sanitizer_dirent) <= sizeof(dirent));\n-CHECK_SIZE_AND_OFFSET(dirent, d_fileno);\n-CHECK_SIZE_AND_OFFSET(dirent, d_off);\n-CHECK_SIZE_AND_OFFSET(dirent, d_reclen);\n-\n-CHECK_TYPE_SIZE(ifconf);\n-CHECK_SIZE_AND_OFFSET(ifconf, ifc_len);\n-CHECK_SIZE_AND_OFFSET(ifconf, ifc_ifcu);\n-\n-CHECK_TYPE_SIZE(pollfd);\n-CHECK_SIZE_AND_OFFSET(pollfd, fd);\n-CHECK_SIZE_AND_OFFSET(pollfd, events);\n-CHECK_SIZE_AND_OFFSET(pollfd, revents);\n-\n-CHECK_TYPE_SIZE(nfds_t);\n-\n-CHECK_TYPE_SIZE(sigset_t);\n-\n-COMPILER_CHECK(sizeof(__sanitizer_sigaction) == sizeof(struct sigaction));\n-// Can't write checks for sa_handler and sa_sigaction due to them being\n-// preprocessor macros.\n-CHECK_STRUCT_SIZE_AND_OFFSET(sigaction, sa_mask);\n-\n-CHECK_TYPE_SIZE(tm);\n-CHECK_SIZE_AND_OFFSET(tm, tm_sec);\n-CHECK_SIZE_AND_OFFSET(tm, tm_min);\n-CHECK_SIZE_AND_OFFSET(tm, tm_hour);\n-CHECK_SIZE_AND_OFFSET(tm, tm_mday);\n-CHECK_SIZE_AND_OFFSET(tm, tm_mon);\n-CHECK_SIZE_AND_OFFSET(tm, tm_year);\n-CHECK_SIZE_AND_OFFSET(tm, tm_wday);\n-CHECK_SIZE_AND_OFFSET(tm, tm_yday);\n-CHECK_SIZE_AND_OFFSET(tm, tm_isdst);\n-CHECK_SIZE_AND_OFFSET(tm, tm_gmtoff);\n-CHECK_SIZE_AND_OFFSET(tm, tm_zone);\n-\n-CHECK_TYPE_SIZE(ipc_perm);\n-CHECK_SIZE_AND_OFFSET(ipc_perm, cuid);\n-CHECK_SIZE_AND_OFFSET(ipc_perm, cgid);\n-CHECK_SIZE_AND_OFFSET(ipc_perm, uid);\n-CHECK_SIZE_AND_OFFSET(ipc_perm, gid);\n-CHECK_SIZE_AND_OFFSET(ipc_perm, mode);\n-CHECK_SIZE_AND_OFFSET(ipc_perm, seq);\n-CHECK_SIZE_AND_OFFSET(ipc_perm, key);\n-\n-CHECK_TYPE_SIZE(shmid_ds);\n-CHECK_SIZE_AND_OFFSET(shmid_ds, shm_perm);\n-CHECK_SIZE_AND_OFFSET(shmid_ds, shm_segsz);\n-CHECK_SIZE_AND_OFFSET(shmid_ds, shm_atime);\n-CHECK_SIZE_AND_OFFSET(shmid_ds, __shm_atimensec);\n-CHECK_SIZE_AND_OFFSET(shmid_ds, shm_dtime);\n-CHECK_SIZE_AND_OFFSET(shmid_ds, __shm_dtimensec);\n-CHECK_SIZE_AND_OFFSET(shmid_ds, shm_ctime);\n-CHECK_SIZE_AND_OFFSET(shmid_ds, __shm_ctimensec);\n-CHECK_SIZE_AND_OFFSET(shmid_ds, shm_cpid);\n-CHECK_SIZE_AND_OFFSET(shmid_ds, shm_lpid);\n-CHECK_SIZE_AND_OFFSET(shmid_ds, shm_nattch);\n-\n-CHECK_TYPE_SIZE(clock_t);\n-\n-CHECK_TYPE_SIZE(ifaddrs);\n-CHECK_SIZE_AND_OFFSET(ifaddrs, ifa_next);\n-CHECK_SIZE_AND_OFFSET(ifaddrs, ifa_name);\n-CHECK_SIZE_AND_OFFSET(ifaddrs, ifa_addr);\n-CHECK_SIZE_AND_OFFSET(ifaddrs, ifa_netmask);\n-// Compare against the union, because we can't reach into the union in a\n-// compliant way.\n-#ifdef ifa_dstaddr\n-#undef ifa_dstaddr\n-#endif\n-CHECK_SIZE_AND_OFFSET(ifaddrs, ifa_dstaddr);\n-CHECK_SIZE_AND_OFFSET(ifaddrs, ifa_data);\n-\n-CHECK_TYPE_SIZE(passwd);\n-CHECK_SIZE_AND_OFFSET(passwd, pw_name);\n-CHECK_SIZE_AND_OFFSET(passwd, pw_passwd);\n-CHECK_SIZE_AND_OFFSET(passwd, pw_uid);\n-CHECK_SIZE_AND_OFFSET(passwd, pw_gid);\n-CHECK_SIZE_AND_OFFSET(passwd, pw_dir);\n-CHECK_SIZE_AND_OFFSET(passwd, pw_shell);\n-\n-CHECK_SIZE_AND_OFFSET(passwd, pw_gecos);\n-\n-CHECK_TYPE_SIZE(group);\n-CHECK_SIZE_AND_OFFSET(group, gr_name);\n-CHECK_SIZE_AND_OFFSET(group, gr_passwd);\n-CHECK_SIZE_AND_OFFSET(group, gr_gid);\n-CHECK_SIZE_AND_OFFSET(group, gr_mem);\n-\n-#endif  // SANITIZER_OPENBSD"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "libsanitizer/sanitizer_common/sanitizer_platform_limits_openbsd.h", "status": "modified", "additions": 0, "deletions": 382, "changes": 382, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_platform_limits_openbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_platform_limits_openbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_platform_limits_openbsd.h?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -1,382 +0,0 @@\n-//===-- sanitizer_platform_limits_openbsd.h -------------------------------===//\n-//\n-// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.\n-// See https://llvm.org/LICENSE.txt for license information.\n-// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n-//\n-//===----------------------------------------------------------------------===//\n-//\n-// This file is a part of Sanitizer common code.\n-//\n-// Sizes and layouts of platform-specific OpenBSD data structures.\n-//===----------------------------------------------------------------------===//\n-\n-#ifndef SANITIZER_PLATFORM_LIMITS_OPENBSD_H\n-#define SANITIZER_PLATFORM_LIMITS_OPENBSD_H\n-\n-#if SANITIZER_OPENBSD\n-\n-#include \"sanitizer_internal_defs.h\"\n-#include \"sanitizer_platform.h\"\n-\n-#define _GET_LINK_MAP_BY_DLOPEN_HANDLE(handle, shift) \\\n-  ((link_map *)((handle) == nullptr ? nullptr : ((char *)(handle) + (shift))))\n-\n-#if defined(__x86_64__)\n-#define GET_LINK_MAP_BY_DLOPEN_HANDLE(handle) \\\n-  _GET_LINK_MAP_BY_DLOPEN_HANDLE(handle, 312)\n-#elif defined(__i386__)\n-#define GET_LINK_MAP_BY_DLOPEN_HANDLE(handle) \\\n-  _GET_LINK_MAP_BY_DLOPEN_HANDLE(handle, 164)\n-#endif\n-\n-#define RLIMIT_AS RLIMIT_DATA\n-\n-namespace __sanitizer {\n-extern unsigned struct_utsname_sz;\n-extern unsigned struct_stat_sz;\n-extern unsigned struct_rusage_sz;\n-extern unsigned siginfo_t_sz;\n-extern unsigned struct_itimerval_sz;\n-extern unsigned pthread_t_sz;\n-extern unsigned pthread_mutex_t_sz;\n-extern unsigned pthread_cond_t_sz;\n-extern unsigned pid_t_sz;\n-extern unsigned timeval_sz;\n-extern unsigned uid_t_sz;\n-extern unsigned gid_t_sz;\n-extern unsigned mbstate_t_sz;\n-extern unsigned struct_timezone_sz;\n-extern unsigned struct_tms_sz;\n-extern unsigned struct_itimerspec_sz;\n-extern unsigned struct_sigevent_sz;\n-extern unsigned struct_stack_t_sz;\n-extern unsigned struct_statfs_sz;\n-extern unsigned struct_sockaddr_sz;\n-\n-extern unsigned struct_rlimit_sz;\n-extern unsigned struct_utimbuf_sz;\n-extern unsigned struct_timespec_sz;\n-\n-struct __sanitizer_iocb {\n-  u64 aio_offset;\n-  uptr aio_buf;\n-  long aio_nbytes;\n-  u32 aio_fildes;\n-  u32 aio_lio_opcode;\n-  long aio_reqprio;\n-#if SANITIZER_WORDSIZE == 64\n-  u8 aio_sigevent[32];\n-#else\n-  u8 aio_sigevent[20];\n-#endif\n-  u32 _state;\n-  u32 _errno;\n-  long _retval;\n-};\n-\n-struct __sanitizer___sysctl_args {\n-  int *name;\n-  int nlen;\n-  void *oldval;\n-  uptr *oldlenp;\n-  void *newval;\n-  uptr newlen;\n-};\n-\n-struct __sanitizer_sem_t {\n-  uptr data[5];\n-};\n-\n-struct __sanitizer_ipc_perm {\n-  u32 cuid;\n-  u32 cgid;\n-  u32 uid;\n-  u32 gid;\n-  u32 mode;\n-  unsigned short seq;\n-  long key;\n-};\n-\n-struct __sanitizer_shmid_ds {\n-  __sanitizer_ipc_perm shm_perm;\n-  int shm_segsz;\n-  u32 shm_lpid;\n-  u32 shm_cpid;\n-  short shm_nattch;\n-  u64 shm_atime;\n-  long __shm_atimensec;\n-  u64 shm_dtime;\n-  long __shm_dtimensec;\n-  u64 shm_ctime;\n-  long __shm_ctimensec;\n-  void *_shm_internal;\n-};\n-\n-extern unsigned struct_msqid_ds_sz;\n-extern unsigned struct_mq_attr_sz;\n-extern unsigned struct_timex_sz;\n-extern unsigned struct_statvfs_sz;\n-\n-struct __sanitizer_iovec {\n-  void *iov_base;\n-  uptr iov_len;\n-};\n-\n-struct __sanitizer_ifaddrs {\n-  struct __sanitizer_ifaddrs *ifa_next;\n-  char *ifa_name;\n-  unsigned int ifa_flags;\n-  struct __sanitizer_sockaddr *ifa_addr;     // (struct sockaddr *)\n-  struct __sanitizer_sockaddr *ifa_netmask;  // (struct sockaddr *)\n-  struct __sanitizer_sockaddr *ifa_dstaddr;  // (struct sockaddr *)\n-  void *ifa_data;\n-};\n-\n-typedef unsigned __sanitizer_pthread_key_t;\n-\n-typedef long long __sanitizer_time_t;\n-typedef int __sanitizer_suseconds_t;\n-\n-struct __sanitizer_timeval {\n-  __sanitizer_time_t tv_sec;\n-  __sanitizer_suseconds_t tv_usec;\n-};\n-\n-struct __sanitizer_itimerval {\n-  struct __sanitizer_timeval it_interval;\n-  struct __sanitizer_timeval it_value;\n-};\n-\n-struct __sanitizer_passwd {\n-  char *pw_name;\n-  char *pw_passwd;\n-  int pw_uid;\n-  int pw_gid;\n-  __sanitizer_time_t pw_change;\n-  char *pw_class;\n-  char *pw_gecos;\n-  char *pw_dir;\n-  char *pw_shell;\n-  __sanitizer_time_t pw_expire;\n-};\n-\n-struct __sanitizer_group {\n-  char *gr_name;\n-  char *gr_passwd;\n-  int gr_gid;\n-  char **gr_mem;\n-};\n-\n-struct __sanitizer_ether_addr {\n-  u8 octet[6];\n-};\n-\n-struct __sanitizer_tm {\n-  int tm_sec;\n-  int tm_min;\n-  int tm_hour;\n-  int tm_mday;\n-  int tm_mon;\n-  int tm_year;\n-  int tm_wday;\n-  int tm_yday;\n-  int tm_isdst;\n-  long int tm_gmtoff;\n-  const char *tm_zone;\n-};\n-\n-struct __sanitizer_msghdr {\n-  void *msg_name;\n-  unsigned msg_namelen;\n-  struct __sanitizer_iovec *msg_iov;\n-  unsigned msg_iovlen;\n-  void *msg_control;\n-  unsigned msg_controllen;\n-  int msg_flags;\n-};\n-struct __sanitizer_cmsghdr {\n-  unsigned cmsg_len;\n-  int cmsg_level;\n-  int cmsg_type;\n-};\n-\n-struct __sanitizer_dirent {\n-  u64 d_fileno;\n-  u64 d_off;\n-  u16 d_reclen;\n-};\n-\n-typedef u64 __sanitizer_clock_t;\n-typedef u32 __sanitizer_clockid_t;\n-\n-typedef u32 __sanitizer___kernel_uid_t;\n-typedef u32 __sanitizer___kernel_gid_t;\n-typedef u64 __sanitizer___kernel_off_t;\n-typedef struct {\n-  u32 fds_bits[8];\n-} __sanitizer___kernel_fd_set;\n-\n-typedef struct {\n-  unsigned int pta_magic;\n-  int pta_flags;\n-  void *pta_private;\n-} __sanitizer_pthread_attr_t;\n-\n-typedef unsigned int __sanitizer_sigset_t;\n-\n-struct __sanitizer_siginfo {\n-  // The size is determined by looking at sizeof of real siginfo_t on linux.\n-  u64 opaque[128 / sizeof(u64)];\n-};\n-\n-using __sanitizer_sighandler_ptr = void (*)(int sig);\n-using __sanitizer_sigactionhandler_ptr = void (*)(int sig,\n-                                                  __sanitizer_siginfo *siginfo,\n-                                                  void *uctx);\n-\n-struct __sanitizer_sigaction {\n-  union {\n-    __sanitizer_sighandler_ptr handler;\n-    __sanitizer_sigactionhandler_ptr sigaction;\n-  };\n-  __sanitizer_sigset_t sa_mask;\n-  int sa_flags;\n-};\n-\n-typedef __sanitizer_sigset_t __sanitizer_kernel_sigset_t;\n-\n-struct __sanitizer_kernel_sigaction_t {\n-  union {\n-    void (*handler)(int signo);\n-    void (*sigaction)(int signo, void *info, void *ctx);\n-  };\n-  unsigned long sa_flags;\n-  void (*sa_restorer)(void);\n-  __sanitizer_kernel_sigset_t sa_mask;\n-};\n-\n-extern const uptr sig_ign;\n-extern const uptr sig_dfl;\n-extern const uptr sig_err;\n-extern const uptr sa_siginfo;\n-\n-extern int af_inet;\n-extern int af_inet6;\n-uptr __sanitizer_in_addr_sz(int af);\n-\n-struct __sanitizer_dl_phdr_info {\n-#if SANITIZER_WORDSIZE == 64\n-  u64 dlpi_addr;\n-#else\n-  u32 dlpi_addr;\n-#endif\n-  const char *dlpi_name;\n-  const void *dlpi_phdr;\n-#if SANITIZER_WORDSIZE == 64\n-  u32 dlpi_phnum;\n-#else\n-  u16 dlpi_phnum;\n-#endif\n-};\n-\n-extern unsigned struct_ElfW_Phdr_sz;\n-\n-struct __sanitizer_addrinfo {\n-  int ai_flags;\n-  int ai_family;\n-  int ai_socktype;\n-  int ai_protocol;\n-  unsigned ai_addrlen;\n-  struct __sanitizer_sockaddr *ai_addr;\n-  char *ai_canonname;\n-  struct __sanitizer_addrinfo *ai_next;\n-};\n-\n-struct __sanitizer_hostent {\n-  char *h_name;\n-  char **h_aliases;\n-  int h_addrtype;\n-  int h_length;\n-  char **h_addr_list;\n-};\n-\n-struct __sanitizer_pollfd {\n-  int fd;\n-  short events;\n-  short revents;\n-};\n-\n-typedef unsigned __sanitizer_nfds_t;\n-\n-struct __sanitizer_glob_t {\n-  int gl_pathc;\n-  int gl_matchc;\n-  int gl_offs;\n-  int gl_flags;\n-  char **gl_pathv;\n-  void **gl_statv;\n-  int (*gl_errfunc)(const char *, int);\n-  void (*gl_closedir)(void *dirp);\n-  struct dirent *(*gl_readdir)(void *dirp);\n-  void *(*gl_opendir)(const char *);\n-  int (*gl_lstat)(const char *, void * /* struct stat* */);\n-  int (*gl_stat)(const char *, void * /* struct stat* */);\n-};\n-\n-extern int glob_nomatch;\n-extern int glob_altdirfunc;\n-\n-extern unsigned path_max;\n-\n-typedef char __sanitizer_FILE;\n-#define SANITIZER_HAS_STRUCT_FILE 0\n-\n-extern int shmctl_ipc_stat;\n-\n-// This simplifies generic code\n-#define struct_shminfo_sz -1\n-#define struct_shm_info_sz -1\n-#define shmctl_shm_stat -1\n-#define shmctl_ipc_info -1\n-#define shmctl_shm_info -1\n-\n-extern unsigned struct_utmp_sz;\n-extern unsigned struct_utmpx_sz;\n-\n-extern int map_fixed;\n-\n-// ioctl arguments\n-struct __sanitizer_ifconf {\n-  int ifc_len;\n-  union {\n-    void *ifcu_req;\n-  } ifc_ifcu;\n-};\n-\n-extern const int si_SEGV_MAPERR;\n-extern const int si_SEGV_ACCERR;\n-}  // namespace __sanitizer\n-\n-#define CHECK_TYPE_SIZE(TYPE) \\\n-  COMPILER_CHECK(sizeof(__sanitizer_##TYPE) == sizeof(TYPE))\n-\n-#define CHECK_SIZE_AND_OFFSET(CLASS, MEMBER)                      \\\n-  COMPILER_CHECK(sizeof(((__sanitizer_##CLASS *)NULL)->MEMBER) == \\\n-                 sizeof(((CLASS *)NULL)->MEMBER));                \\\n-  COMPILER_CHECK(offsetof(__sanitizer_##CLASS, MEMBER) ==         \\\n-                 offsetof(CLASS, MEMBER))\n-\n-// For sigaction, which is a function and struct at the same time,\n-// and thus requires explicit \"struct\" in sizeof() expression.\n-#define CHECK_STRUCT_SIZE_AND_OFFSET(CLASS, MEMBER)                      \\\n-  COMPILER_CHECK(sizeof(((struct __sanitizer_##CLASS *)NULL)->MEMBER) == \\\n-                 sizeof(((struct CLASS *)NULL)->MEMBER));                \\\n-  COMPILER_CHECK(offsetof(struct __sanitizer_##CLASS, MEMBER) ==         \\\n-                 offsetof(struct CLASS, MEMBER))\n-\n-#define SIGACTION_SYMNAME __sigaction14\n-\n-#endif  // SANITIZER_OPENBSD\n-\n-#endif"}, {"sha": "e69560ee39e95572f557bd51fb654f06e591feb1", "filename": "libsanitizer/sanitizer_common/sanitizer_platform_limits_posix.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_platform_limits_posix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_platform_limits_posix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_platform_limits_posix.h?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -83,7 +83,7 @@ const unsigned struct_kernel_stat64_sz = 104;\n #elif defined(__mips__)\n const unsigned struct_kernel_stat_sz = SANITIZER_ANDROID\n                                            ? FIRST_32_SECOND_64(104, 128)\n-                                           : FIRST_32_SECOND_64(144, 216);\n+                                           : FIRST_32_SECOND_64(160, 216);\n const unsigned struct_kernel_stat64_sz = 104;\n #elif defined(__s390__) && !defined(__s390x__)\n const unsigned struct_kernel_stat_sz = 64;"}, {"sha": "2e080098283fde0dc5e525a388d8d65a2f6078e7", "filename": "libsanitizer/sanitizer_common/sanitizer_posix.cpp", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_posix.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_posix.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_posix.cpp?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -239,6 +239,7 @@ bool MemoryRangeIsAvailable(uptr range_start, uptr range_end) {\n   return true;\n }\n \n+#if !SANITIZER_MAC\n void DumpProcessMap() {\n   MemoryMappingLayout proc_maps(/*cache_enabled*/true);\n   const sptr kBufSize = 4095;\n@@ -252,6 +253,7 @@ void DumpProcessMap() {\n   Report(\"End of process memory map.\\n\");\n   UnmapOrDie(filename, kBufSize);\n }\n+#endif\n \n const char *GetPwd() {\n   return GetEnv(\"PWD\");"}, {"sha": "e1a2b48e5cd810a73fd21307b9220a3875783e34", "filename": "libsanitizer/sanitizer_common/sanitizer_posix.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_posix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_posix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_posix.h?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -17,7 +17,6 @@\n #include \"sanitizer_internal_defs.h\"\n #include \"sanitizer_platform_limits_freebsd.h\"\n #include \"sanitizer_platform_limits_netbsd.h\"\n-#include \"sanitizer_platform_limits_openbsd.h\"\n #include \"sanitizer_platform_limits_posix.h\"\n #include \"sanitizer_platform_limits_solaris.h\"\n "}, {"sha": "d29438cf9dbd59416ea3c0cb03433de4eed3ebbc", "filename": "libsanitizer/sanitizer_common/sanitizer_posix_libcdep.cpp", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_posix_libcdep.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_posix_libcdep.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_posix_libcdep.cpp?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -18,7 +18,6 @@\n #include \"sanitizer_common.h\"\n #include \"sanitizer_flags.h\"\n #include \"sanitizer_platform_limits_netbsd.h\"\n-#include \"sanitizer_platform_limits_openbsd.h\"\n #include \"sanitizer_platform_limits_posix.h\"\n #include \"sanitizer_platform_limits_solaris.h\"\n #include \"sanitizer_posix.h\""}, {"sha": "a56640db43e8a84c460b3b8dfb13191fedf037e5", "filename": "libsanitizer/sanitizer_common/sanitizer_procmaps.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_procmaps.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_procmaps.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_procmaps.h?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -16,7 +16,7 @@\n #include \"sanitizer_platform.h\"\n \n #if SANITIZER_LINUX || SANITIZER_FREEBSD || SANITIZER_NETBSD || \\\n-    SANITIZER_OPENBSD || SANITIZER_MAC || SANITIZER_SOLARIS ||  \\\n+    SANITIZER_MAC || SANITIZER_SOLARIS ||  \\\n     SANITIZER_FUCHSIA\n \n #include \"sanitizer_common.h\""}, {"sha": "1f489b71ad998817feeec1988ce6d3dac871b9ca", "filename": "libsanitizer/sanitizer_common/sanitizer_procmaps_bsd.cpp", "status": "modified", "additions": 2, "deletions": 29, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_procmaps_bsd.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_procmaps_bsd.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_procmaps_bsd.cpp?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -7,11 +7,11 @@\n //===----------------------------------------------------------------------===//\n //\n // Information about the process mappings\n-// (FreeBSD, OpenBSD and NetBSD-specific parts).\n+// (FreeBSD and NetBSD-specific parts).\n //===----------------------------------------------------------------------===//\n \n #include \"sanitizer_platform.h\"\n-#if SANITIZER_FREEBSD || SANITIZER_NETBSD || SANITIZER_OPENBSD\n+#if SANITIZER_FREEBSD || SANITIZER_NETBSD\n #include \"sanitizer_common.h\"\n #if SANITIZER_FREEBSD\n #include \"sanitizer_freebsd.h\"\n@@ -28,11 +28,6 @@\n #endif\n \n #include <limits.h>\n-#if SANITIZER_OPENBSD\n-#define KVME_PROT_READ KVE_PROT_READ\n-#define KVME_PROT_WRITE KVE_PROT_WRITE\n-#define KVME_PROT_EXEC KVE_PROT_EXEC\n-#endif\n \n // Fix 'kinfo_vmentry' definition on FreeBSD prior v9.2 in 32-bit mode.\n #if SANITIZER_FREEBSD && (SANITIZER_WORDSIZE == 32)\n@@ -51,10 +46,6 @@ void ReadProcMaps(ProcSelfMapsBuff *proc_maps) {\n     KERN_PROC,\n     KERN_PROC_VMMAP,\n     getpid()\n-#elif SANITIZER_OPENBSD\n-    CTL_KERN,\n-    KERN_PROC_VMMAP,\n-    getpid()\n #elif SANITIZER_NETBSD\n     CTL_VM,\n     VM_PROC,\n@@ -71,28 +62,12 @@ void ReadProcMaps(ProcSelfMapsBuff *proc_maps) {\n   CHECK_EQ(Err, 0);\n   CHECK_GT(Size, 0);\n \n-#if !SANITIZER_OPENBSD\n   size_t MmapedSize = Size * 4 / 3;\n   void *VmMap = MmapOrDie(MmapedSize, \"ReadProcMaps()\");\n   Size = MmapedSize;\n   Err = internal_sysctl(Mib, ARRAY_SIZE(Mib), VmMap, &Size, NULL, 0);\n   CHECK_EQ(Err, 0);\n   proc_maps->data = (char *)VmMap;\n-#else\n-  size_t PageSize = GetPageSize();\n-  size_t MmapedSize = Size;\n-  MmapedSize = ((MmapedSize - 1) / PageSize + 1) * PageSize;\n-  char *Mem = (char *)MmapOrDie(MmapedSize, \"ReadProcMaps()\");\n-  Size = 2 * Size + 10 * sizeof(struct kinfo_vmentry);\n-  if (Size > 0x10000)\n-    Size = 0x10000;\n-  Size = (Size / sizeof(struct kinfo_vmentry)) * sizeof(struct kinfo_vmentry);\n-  Err = internal_sysctl(Mib, ARRAY_SIZE(Mib), Mem, &Size, NULL, 0);\n-  CHECK_EQ(Err, 0);\n-  MmapedSize = Size;\n-  proc_maps->data = Mem;\n-#endif\n-\n   proc_maps->mmaped_size = MmapedSize;\n   proc_maps->len = Size;\n }\n@@ -117,13 +92,11 @@ bool MemoryMappingLayout::Next(MemoryMappedSegment *segment) {\n   if ((VmEntry->kve_protection & KVME_PROT_EXEC) != 0)\n     segment->protection |= kProtectionExecute;\n \n-#if !SANITIZER_OPENBSD\n   if (segment->filename != NULL && segment->filename_size > 0) {\n     internal_snprintf(segment->filename,\n                       Min(segment->filename_size, (uptr)PATH_MAX), \"%s\",\n                       VmEntry->kve_path);\n   }\n-#endif\n \n #if SANITIZER_FREEBSD\n   data_.current += VmEntry->kve_structsize;"}, {"sha": "f2cfcffaf4764b394c99569f443c38851cd7d914", "filename": "libsanitizer/sanitizer_common/sanitizer_procmaps_common.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_procmaps_common.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_procmaps_common.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_procmaps_common.cpp?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -12,7 +12,7 @@\n #include \"sanitizer_platform.h\"\n \n #if SANITIZER_FREEBSD || SANITIZER_LINUX || SANITIZER_NETBSD ||                \\\n-    SANITIZER_OPENBSD || SANITIZER_SOLARIS\n+    SANITIZER_SOLARIS\n \n #include \"sanitizer_common.h\"\n #include \"sanitizer_placement_new.h\""}, {"sha": "d58bd08fb1a899ea5652eda39a6fdbb6f29c8ce8", "filename": "libsanitizer/sanitizer_common/sanitizer_rtems.cpp", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_rtems.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_rtems.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_rtems.cpp?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -108,8 +108,6 @@ void SetAlternateSignalStack() {}\n void UnsetAlternateSignalStack() {}\n void InitTlsSize() {}\n \n-void PrintModuleMap() {}\n-\n void SignalContext::DumpAllRegisters(void *context) {}\n const char *DescribeSignalOrException(int signo) { UNIMPLEMENTED(); }\n "}, {"sha": "b0487d8987db28b028f30bbcad4a2a9d189ef99d", "filename": "libsanitizer/sanitizer_common/sanitizer_stacktrace.cpp", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_stacktrace.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_stacktrace.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_stacktrace.cpp?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -84,8 +84,8 @@ static inline uhwptr *GetCanonicFrame(uptr bp,\n   // Nope, this does not look right either. This means the frame after next does\n   // not have a valid frame pointer, but we can still extract the caller PC.\n   // Unfortunately, there is no way to decide between GCC and LLVM frame\n-  // layouts. Assume GCC.\n-  return bp_prev - 1;\n+  // layouts. Assume LLVM.\n+  return bp_prev;\n #else\n   return (uhwptr*)bp;\n #endif\n@@ -108,21 +108,14 @@ void BufferedStackTrace::UnwindFast(uptr pc, uptr bp, uptr stack_top,\n          IsAligned((uptr)frame, sizeof(*frame)) &&\n          size < max_depth) {\n #ifdef __powerpc__\n-    // PowerPC ABIs specify that the return address is saved on the\n-    // *caller's* stack frame.  Thus we must dereference the back chain\n-    // to find the caller frame before extracting it.\n+    // PowerPC ABIs specify that the return address is saved at offset\n+    // 16 of the *caller's* stack frame.  Thus we must dereference the\n+    // back chain to find the caller frame before extracting it.\n     uhwptr *caller_frame = (uhwptr*)frame[0];\n     if (!IsValidFrame((uptr)caller_frame, stack_top, bottom) ||\n         !IsAligned((uptr)caller_frame, sizeof(uhwptr)))\n       break;\n-    // For most ABIs the offset where the return address is saved is two\n-    // register sizes.  The exception is the SVR4 ABI, which uses an\n-    // offset of only one register size.\n-#ifdef _CALL_SYSV\n-    uhwptr pc1 = caller_frame[1];\n-#else\n     uhwptr pc1 = caller_frame[2];\n-#endif\n #elif defined(__s390__)\n     uhwptr pc1 = frame[14];\n #elif defined(__riscv)"}, {"sha": "0350fe84b045b391db2296415090a55131249ee4", "filename": "libsanitizer/sanitizer_common/sanitizer_stacktrace.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_stacktrace.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_stacktrace.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_stacktrace.h?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -25,16 +25,14 @@ static const u32 kStackTraceMax = 256;\n # define SANITIZER_CAN_FAST_UNWIND 0\n #elif SANITIZER_WINDOWS\n # define SANITIZER_CAN_FAST_UNWIND 0\n-#elif SANITIZER_OPENBSD\n-# define SANITIZER_CAN_FAST_UNWIND 0\n #else\n # define SANITIZER_CAN_FAST_UNWIND 1\n #endif\n \n // Fast unwind is the only option on Mac for now; we will need to\n // revisit this macro when slow unwind works on Mac, see\n // https://github.com/google/sanitizers/issues/137\n-#if SANITIZER_MAC || SANITIZER_OPENBSD || SANITIZER_RTEMS\n+#if SANITIZER_MAC || SANITIZER_RTEMS\n # define SANITIZER_CAN_SLOW_UNWIND 0\n #else\n # define SANITIZER_CAN_SLOW_UNWIND 1"}, {"sha": "7891c1081fe714b5f346261ed87e502205b7faa0", "filename": "libsanitizer/sanitizer_common/sanitizer_stoptheworld.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_stoptheworld.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_stoptheworld.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_stoptheworld.h?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -40,10 +40,13 @@ class SuspendedThreadsList {\n   virtual uptr ThreadCount() const { UNIMPLEMENTED(); }\n   virtual tid_t GetThreadID(uptr index) const { UNIMPLEMENTED(); }\n \n+ protected:\n+  ~SuspendedThreadsList() {}\n+\n  private:\n   // Prohibit copy and assign.\n-  SuspendedThreadsList(const SuspendedThreadsList&);\n-  void operator=(const SuspendedThreadsList&);\n+  SuspendedThreadsList(const SuspendedThreadsList &) = delete;\n+  void operator=(const SuspendedThreadsList &) = delete;\n };\n \n typedef void (*StopTheWorldCallback)("}, {"sha": "91bf19e40dad8136d64a279b0fad69a6b5a4116e", "filename": "libsanitizer/sanitizer_common/sanitizer_stoptheworld_fuchsia.cpp", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_stoptheworld_fuchsia.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_stoptheworld_fuchsia.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_stoptheworld_fuchsia.cpp?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -17,6 +17,7 @@\n #include <zircon/sanitizer.h>\n \n #include \"sanitizer_stoptheworld.h\"\n+#include \"sanitizer_stoptheworld_fuchsia.h\"\n \n namespace __sanitizer {\n \n@@ -32,7 +33,7 @@ void StopTheWorld(StopTheWorldCallback callback, void *argument) {\n       nullptr, nullptr, nullptr, nullptr,\n       [](zx_status_t, void *data) {\n         auto params = reinterpret_cast<Params *>(data);\n-        params->callback({}, params->argument);\n+        params->callback(SuspendedThreadsListFuchsia(), params->argument);\n       },\n       &params);\n }"}, {"sha": "6d9ead60508656dd04ea64d479682cd2f92ce686", "filename": "libsanitizer/sanitizer_common/sanitizer_stoptheworld_fuchsia.h", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_stoptheworld_fuchsia.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_stoptheworld_fuchsia.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_stoptheworld_fuchsia.h?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -0,0 +1,20 @@\n+//===-- sanitizer_stoptheworld_fuchsia.h ------------------------*- C++ -*-===//\n+//\n+// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.\n+// See https://llvm.org/LICENSE.txt for license information.\n+// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n+//\n+//===----------------------------------------------------------------------===//\n+\n+#ifndef SANITIZER_STOPTHEWORLD_FUCHSIA_H\n+#define SANITIZER_STOPTHEWORLD_FUCHSIA_H\n+\n+#include \"sanitizer_stoptheworld.h\"\n+\n+namespace __sanitizer {\n+\n+class SuspendedThreadsListFuchsia final : public SuspendedThreadsList {};\n+\n+}  // namespace __sanitizer\n+\n+#endif  // SANITIZER_STOPTHEWORLD_FUCHSIA_H"}, {"sha": "0f1cadfeae395923b4d9a90665e332b2e8559332", "filename": "libsanitizer/sanitizer_common/sanitizer_stoptheworld_linux_libcdep.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_stoptheworld_linux_libcdep.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_stoptheworld_linux_libcdep.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_stoptheworld_linux_libcdep.cpp?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -85,7 +85,7 @@\n \n namespace __sanitizer {\n \n-class SuspendedThreadsListLinux : public SuspendedThreadsList {\n+class SuspendedThreadsListLinux final : public SuspendedThreadsList {\n  public:\n   SuspendedThreadsListLinux() { thread_ids_.reserve(1024); }\n "}, {"sha": "5ec30803b7ade3a310a4d7a0e1af9729a2109614", "filename": "libsanitizer/sanitizer_common/sanitizer_stoptheworld_mac.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_stoptheworld_mac.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_stoptheworld_mac.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_stoptheworld_mac.cpp?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -27,7 +27,7 @@ typedef struct {\n   thread_t thread;\n } SuspendedThreadInfo;\n \n-class SuspendedThreadsListMac : public SuspendedThreadsList {\n+class SuspendedThreadsListMac final : public SuspendedThreadsList {\n  public:\n   SuspendedThreadsListMac() : threads_(1024) {}\n "}, {"sha": "9c7cd64255e55ece1417894e6f48a56c42ed74b5", "filename": "libsanitizer/sanitizer_common/sanitizer_stoptheworld_netbsd_libcdep.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_stoptheworld_netbsd_libcdep.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_stoptheworld_netbsd_libcdep.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_stoptheworld_netbsd_libcdep.cpp?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -48,7 +48,7 @@\n \n namespace __sanitizer {\n \n-class SuspendedThreadsListNetBSD : public SuspendedThreadsList {\n+class SuspendedThreadsListNetBSD final : public SuspendedThreadsList {\n  public:\n   SuspendedThreadsListNetBSD() { thread_ids_.reserve(1024); }\n "}, {"sha": "71de1758b3e9c6df3d6952dfebbce88555acc8ae", "filename": "libsanitizer/sanitizer_common/sanitizer_symbolizer_internal.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_symbolizer_internal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_symbolizer_internal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_symbolizer_internal.h?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -74,6 +74,9 @@ class SymbolizerTool {\n   // Usually this is a safe place to call code that might need to use user\n   // memory allocators.\n   virtual void LateInitialize() {}\n+\n+ protected:\n+  ~SymbolizerTool() {}\n };\n \n // SymbolizerProcess encapsulates communication between the tool and\n@@ -85,6 +88,8 @@ class SymbolizerProcess {\n   const char *SendCommand(const char *command);\n \n  protected:\n+  ~SymbolizerProcess() {}\n+\n   /// The maximum number of arguments required to invoke a tool process.\n   static const unsigned kArgVMax = 6;\n \n@@ -128,7 +133,7 @@ class LLVMSymbolizerProcess;\n \n // This tool invokes llvm-symbolizer in a subprocess. It should be as portable\n // as the llvm-symbolizer tool is.\n-class LLVMSymbolizer : public SymbolizerTool {\n+class LLVMSymbolizer final : public SymbolizerTool {\n  public:\n   explicit LLVMSymbolizer(const char *path, LowLevelAllocator *allocator);\n "}, {"sha": "7b039b894b3befba211ded1c1780e7aaeb7f59ff", "filename": "libsanitizer/sanitizer_common/sanitizer_symbolizer_libbacktrace.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_symbolizer_libbacktrace.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_symbolizer_libbacktrace.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_symbolizer_libbacktrace.h?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -28,7 +28,7 @@\n \n namespace __sanitizer {\n \n-class LibbacktraceSymbolizer : public SymbolizerTool {\n+class LibbacktraceSymbolizer final : public SymbolizerTool {\n  public:\n   static LibbacktraceSymbolizer *get(LowLevelAllocator *alloc);\n "}, {"sha": "710da4c1cecd1ad362990d0464ba5c55ae72ecef", "filename": "libsanitizer/sanitizer_common/sanitizer_symbolizer_libcdep.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_symbolizer_libcdep.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_symbolizer_libcdep.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_symbolizer_libcdep.cpp?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -237,7 +237,7 @@ const LoadedModule *Symbolizer::FindModuleForAddress(uptr address) {\n //   <file_name>:<line_number>:<column_number>\n //   ...\n //   <empty line>\n-class LLVMSymbolizerProcess : public SymbolizerProcess {\n+class LLVMSymbolizerProcess final : public SymbolizerProcess {\n  public:\n   explicit LLVMSymbolizerProcess(const char *path)\n       : SymbolizerProcess(path, /*use_posix_spawn=*/SANITIZER_MAC) {}"}, {"sha": "5c25b28b5dc96c1e3439cd7aaada85d30c9d6f98", "filename": "libsanitizer/sanitizer_common/sanitizer_symbolizer_mac.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_symbolizer_mac.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_symbolizer_mac.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_symbolizer_mac.cpp?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -65,7 +65,7 @@ bool DlAddrSymbolizer::SymbolizeData(uptr addr, DataInfo *datainfo) {\n // kAsanInternalHeapMagic.\n static char kAtosMachPortEnvEntry[] = K_ATOS_ENV_VAR \"=000000000000000\";\n \n-class AtosSymbolizerProcess : public SymbolizerProcess {\n+class AtosSymbolizerProcess final : public SymbolizerProcess {\n  public:\n   explicit AtosSymbolizerProcess(const char *path)\n       : SymbolizerProcess(path, /*use_posix_spawn*/ true) {"}, {"sha": "401d30fa503302722cbe0afdf618cafad10e6166", "filename": "libsanitizer/sanitizer_common/sanitizer_symbolizer_mac.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_symbolizer_mac.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_symbolizer_mac.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_symbolizer_mac.h?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -21,15 +21,15 @@\n \n namespace __sanitizer {\n \n-class DlAddrSymbolizer : public SymbolizerTool {\n+class DlAddrSymbolizer final : public SymbolizerTool {\n  public:\n   bool SymbolizePC(uptr addr, SymbolizedStack *stack) override;\n   bool SymbolizeData(uptr addr, DataInfo *info) override;\n };\n \n class AtosSymbolizerProcess;\n \n-class AtosSymbolizer : public SymbolizerTool {\n+class AtosSymbolizer final : public SymbolizerTool {\n  public:\n   explicit AtosSymbolizer(const char *path, LowLevelAllocator *allocator);\n "}, {"sha": "4dd5cc3ad7cbed1dde3ac80dba2667bd9af05bb2", "filename": "libsanitizer/sanitizer_common/sanitizer_symbolizer_posix_libcdep.cpp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_symbolizer_posix_libcdep.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_symbolizer_posix_libcdep.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_symbolizer_posix_libcdep.cpp?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -201,7 +201,7 @@ bool SymbolizerProcess::StartSymbolizerSubprocess() {\n   return true;\n }\n \n-class Addr2LineProcess : public SymbolizerProcess {\n+class Addr2LineProcess final : public SymbolizerProcess {\n  public:\n   Addr2LineProcess(const char *path, const char *module_name)\n       : SymbolizerProcess(path), module_name_(internal_strdup(module_name)) {}\n@@ -261,7 +261,7 @@ bool Addr2LineProcess::ReachedEndOfOutput(const char *buffer,\n                           output_terminator_, kTerminatorLen);\n }\n \n-class Addr2LinePool : public SymbolizerTool {\n+class Addr2LinePool final : public SymbolizerTool {\n  public:\n   explicit Addr2LinePool(const char *addr2line_path,\n                          LowLevelAllocator *allocator)\n@@ -328,7 +328,7 @@ int __sanitizer_symbolize_demangle(const char *Name, char *Buffer,\n                                    int MaxLength);\n }  // extern \"C\"\n \n-class InternalSymbolizer : public SymbolizerTool {\n+class InternalSymbolizer final : public SymbolizerTool {\n  public:\n   static InternalSymbolizer *get(LowLevelAllocator *alloc) {\n     if (__sanitizer_symbolize_code != 0 &&\n@@ -387,7 +387,7 @@ class InternalSymbolizer : public SymbolizerTool {\n };\n #else  // SANITIZER_SUPPORTS_WEAK_HOOKS\n \n-class InternalSymbolizer : public SymbolizerTool {\n+class InternalSymbolizer final : public SymbolizerTool {\n  public:\n   static InternalSymbolizer *get(LowLevelAllocator *alloc) { return 0; }\n };"}, {"sha": "48fa2d1033ae3d84f2b36f448e7a2c11964330ff", "filename": "libsanitizer/sanitizer_common/sanitizer_symbolizer_win.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_symbolizer_win.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_symbolizer_win.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_symbolizer_win.cpp?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -33,7 +33,7 @@ decltype(::UnDecorateSymbolName) *UnDecorateSymbolName;\n \n namespace {\n \n-class WinSymbolizerTool : public SymbolizerTool {\n+class WinSymbolizerTool final : public SymbolizerTool {\n  public:\n   // The constructor is provided to avoid synthesized memsets.\n   WinSymbolizerTool() {}"}, {"sha": "8829985b5b07fd06620118dd643ca1cc59b0dd18", "filename": "libsanitizer/sanitizer_common/sanitizer_syscall_generic.inc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_syscall_generic.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_syscall_generic.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_syscall_generic.inc?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -13,7 +13,7 @@\n // NetBSD uses libc calls directly\n #if !SANITIZER_NETBSD\n \n-#if SANITIZER_FREEBSD || SANITIZER_MAC || SANITIZER_OPENBSD || SANITIZER_SOLARIS\n+#if SANITIZER_FREEBSD || SANITIZER_MAC || SANITIZER_SOLARIS\n # define SYSCALL(name) SYS_ ## name\n #else\n # define SYSCALL(name) __NR_ ## name"}, {"sha": "85c522a31cac45baac11272e41ba8cabc5c42031", "filename": "libsanitizer/sanitizer_common/sanitizer_thread_registry.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_thread_registry.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_thread_registry.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_thread_registry.h?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -39,8 +39,6 @@ enum class ThreadType {\n class ThreadContextBase {\n  public:\n   explicit ThreadContextBase(u32 tid);\n-  ~ThreadContextBase();  // Should never be called.\n-\n   const u32 tid;  // Thread ID. Main thread should have tid = 0.\n   u64 unique_id;  // Unique thread ID.\n   u32 reuse_count;  // Number of times this tid was reused.\n@@ -80,6 +78,9 @@ class ThreadContextBase {\n   virtual void OnCreated(void *arg) {}\n   virtual void OnReset() {}\n   virtual void OnDetached(void *arg) {}\n+\n+ protected:\n+  ~ThreadContextBase();\n };\n \n typedef ThreadContextBase* (*ThreadContextFactory)(u32 tid);"}, {"sha": "10748f96420a5d4b3c48ad048b716ea5f3f13e40", "filename": "libsanitizer/sanitizer_common/sanitizer_tls_get_addr.cpp", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_tls_get_addr.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_tls_get_addr.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_tls_get_addr.cpp?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -80,8 +80,13 @@ void DTLS_Destroy() {\n #if defined(__powerpc64__) || defined(__mips__)\n // This is glibc's TLS_DTV_OFFSET:\n // \"Dynamic thread vector pointers point 0x8000 past the start of each\n-//  TLS block.\"\n+//  TLS block.\" (sysdeps/<arch>/dl-tls.h)\n static const uptr kDtvOffset = 0x8000;\n+#elif defined(__riscv)\n+// This is glibc's TLS_DTV_OFFSET:\n+// \"Dynamic thread vector pointers point 0x800 past the start of each\n+// TLS block.\" (sysdeps/riscv/dl-tls.h)\n+static const uptr kDtvOffset = 0x800;\n #else\n static const uptr kDtvOffset = 0;\n #endif"}, {"sha": "e2edf428004e7f0005a79e7fd0ec7503de7ecebb", "filename": "libsanitizer/sanitizer_common/sanitizer_unwind_win.cpp", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_unwind_win.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_unwind_win.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_unwind_win.cpp?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -37,6 +37,10 @@ void BufferedStackTrace::UnwindSlow(uptr pc, u32 max_depth) {\n   // Skip the RTL frames by searching for the PC in the stacktrace.\n   uptr pc_location = LocatePcInTrace(pc);\n   PopStackFrames(pc_location);\n+\n+  // Replace the first frame with the PC because the frame in the\n+  // stacktrace might be incorrect.\n+  trace_buffer[0] = pc;\n }\n \n void BufferedStackTrace::UnwindSlow(uptr pc, void *context, u32 max_depth) {"}, {"sha": "85ac2633bde1beeda2dd90466f4ca0c1bfe028a5", "filename": "libsanitizer/sanitizer_common/sanitizer_win.cpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_win.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fsanitizer_common%2Fsanitizer_win.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_win.cpp?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -491,8 +491,6 @@ void DumpProcessMap() {\n }\n #endif\n \n-void PrintModuleMap() { }\n-\n void DisableCoreDumperIfNecessary() {\n   // Do nothing.\n }\n@@ -1140,6 +1138,8 @@ void LogFullErrorReport(const char *buffer) {\n }\n #endif // SANITIZER_WIN_TRACE\n \n+void InitializePlatformCommonFlags(CommonFlags *cf) {}\n+\n }  // namespace __sanitizer\n \n #endif  // _WIN32"}, {"sha": "16169cab666ae285786188a1845683620b1e95d1", "filename": "libsanitizer/tsan/tsan_platform.h", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Ftsan%2Ftsan_platform.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Ftsan%2Ftsan_platform.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Ftsan%2Ftsan_platform.h?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -461,7 +461,7 @@ struct Mapping47 {\n \n #elif SANITIZER_GO && defined(__aarch64__)\n \n-/* Go on linux/aarch64 (48-bit VMA)\n+/* Go on linux/aarch64 (48-bit VMA) and darwin/aarch64 (47-bit VMA)\n 0000 0000 1000 - 0000 1000 0000: executable\n 0000 1000 0000 - 00c0 0000 0000: -\n 00c0 0000 0000 - 00e0 0000 0000: heap\n@@ -488,6 +488,30 @@ struct Mapping {\n // Indicates the runtime will define the memory regions at runtime.\n #define TSAN_RUNTIME_VMA 1\n \n+#elif SANITIZER_GO && defined(__mips64)\n+/*\n+Go on linux/mips64 (47-bit VMA)\n+0000 0000 1000 - 0000 1000 0000: executable\n+0000 1000 0000 - 00c0 0000 0000: -\n+00c0 0000 0000 - 00e0 0000 0000: heap\n+00e0 0000 0000 - 2000 0000 0000: -\n+2000 0000 0000 - 3000 0000 0000: shadow\n+3000 0000 0000 - 3000 0000 0000: -\n+3000 0000 0000 - 4000 0000 0000: metainfo (memory blocks and sync objects)\n+4000 0000 0000 - 6000 0000 0000: -\n+6000 0000 0000 - 6200 0000 0000: traces\n+6200 0000 0000 - 8000 0000 0000: -\n+*/\n+struct Mapping {\n+  static const uptr kMetaShadowBeg = 0x300000000000ull;\n+  static const uptr kMetaShadowEnd = 0x400000000000ull;\n+  static const uptr kTraceMemBeg = 0x600000000000ull;\n+  static const uptr kTraceMemEnd = 0x620000000000ull;\n+  static const uptr kShadowBeg = 0x200000000000ull;\n+  static const uptr kShadowEnd = 0x300000000000ull;\n+  static const uptr kAppMemBeg = 0x000000001000ull;\n+  static const uptr kAppMemEnd = 0x00e000000000ull;\n+};\n #else\n # error \"Unknown platform\"\n #endif"}, {"sha": "d136dcb1cec3bd649b1af98bd8566ea2e37f3509", "filename": "libsanitizer/tsan/tsan_platform_linux.cpp", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Ftsan%2Ftsan_platform_linux.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Ftsan%2Ftsan_platform_linux.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Ftsan%2Ftsan_platform_linux.cpp?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -12,14 +12,12 @@\n //===----------------------------------------------------------------------===//\n \n #include \"sanitizer_common/sanitizer_platform.h\"\n-#if SANITIZER_LINUX || SANITIZER_FREEBSD || SANITIZER_NETBSD || \\\n-    SANITIZER_OPENBSD\n+#if SANITIZER_LINUX || SANITIZER_FREEBSD || SANITIZER_NETBSD\n \n #include \"sanitizer_common/sanitizer_common.h\"\n #include \"sanitizer_common/sanitizer_libc.h\"\n #include \"sanitizer_common/sanitizer_linux.h\"\n #include \"sanitizer_common/sanitizer_platform_limits_netbsd.h\"\n-#include \"sanitizer_common/sanitizer_platform_limits_openbsd.h\"\n #include \"sanitizer_common/sanitizer_platform_limits_posix.h\"\n #include \"sanitizer_common/sanitizer_posix.h\"\n #include \"sanitizer_common/sanitizer_procmaps.h\"\n@@ -517,5 +515,4 @@ void cur_thread_finalize() {\n \n }  // namespace __tsan\n \n-#endif  // SANITIZER_LINUX || SANITIZER_FREEBSD || SANITIZER_NETBSD ||\n-        // SANITIZER_OPENBSD\n+#endif  // SANITIZER_LINUX || SANITIZER_FREEBSD || SANITIZER_NETBSD"}, {"sha": "ec2c5fb1621d3f7e22f0db24c9d59d8b8ec2ad94", "filename": "libsanitizer/tsan/tsan_platform_mac.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Ftsan%2Ftsan_platform_mac.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Ftsan%2Ftsan_platform_mac.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Ftsan%2Ftsan_platform_mac.cpp?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -234,7 +234,7 @@ static void my_pthread_introspection_hook(unsigned int event, pthread_t thread,\n #endif\n \n void InitializePlatformEarly() {\n-#if defined(__aarch64__)\n+#if !SANITIZER_GO && defined(__aarch64__)\n   uptr max_vm = GetMaxUserVirtualAddress() + 1;\n   if (max_vm != Mapping::kHiAppMemEnd) {\n     Printf(\"ThreadSanitizer: unsupported vm address limit %p, expected %p.\\n\","}, {"sha": "968c7b97553c6f73172ea964497da275b5275881", "filename": "libsanitizer/tsan/tsan_report.cpp", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Ftsan%2Ftsan_report.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Ftsan%2Ftsan_report.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Ftsan%2Ftsan_report.cpp?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -386,7 +386,8 @@ void PrintReport(const ReportDesc *rep) {\n       ReportErrorSummary(rep_typ_str, frame->info);\n   }\n \n-  if (common_flags()->print_module_map == 2) PrintModuleMap();\n+  if (common_flags()->print_module_map == 2)\n+    DumpProcessMap();\n \n   Printf(\"==================\\n\");\n }"}, {"sha": "3d721eb95a2cffd21fd69d87357f043c28d4d535", "filename": "libsanitizer/tsan/tsan_rtl.cpp", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Ftsan%2Ftsan_rtl.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Ftsan%2Ftsan_rtl.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Ftsan%2Ftsan_rtl.cpp?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -446,7 +446,8 @@ void MaybeSpawnBackgroundThread() {\n int Finalize(ThreadState *thr) {\n   bool failed = false;\n \n-  if (common_flags()->print_module_map == 1) PrintModuleMap();\n+  if (common_flags()->print_module_map == 1)\n+    DumpProcessMap();\n \n   if (flags()->atexit_sleep_ms > 0 && ThreadCount(thr) > 1)\n     SleepForMillis(flags()->atexit_sleep_ms);"}, {"sha": "04d474e044e15acf4f48ae04348a0ce34bb3e4ed", "filename": "libsanitizer/tsan/tsan_rtl.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Ftsan%2Ftsan_rtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Ftsan%2Ftsan_rtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Ftsan%2Ftsan_rtl.h?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -477,7 +477,7 @@ inline void cur_thread_finalize() { }\n #endif  // SANITIZER_MAC || SANITIZER_ANDROID\n #endif  // SANITIZER_GO\n \n-class ThreadContext : public ThreadContextBase {\n+class ThreadContext final : public ThreadContextBase {\n  public:\n   explicit ThreadContext(int tid);\n   ~ThreadContext();"}, {"sha": "27897f0592b0e0b916f41e751d320e512c9ff551", "filename": "libsanitizer/tsan/tsan_rtl_mutex.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Ftsan%2Ftsan_rtl_mutex.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Ftsan%2Ftsan_rtl_mutex.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Ftsan%2Ftsan_rtl_mutex.cpp?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -24,7 +24,7 @@ namespace __tsan {\n \n void ReportDeadlock(ThreadState *thr, uptr pc, DDReport *r);\n \n-struct Callback : DDCallback {\n+struct Callback final : public DDCallback {\n   ThreadState *thr;\n   uptr pc;\n "}, {"sha": "8285e21aa1ec7a797dfcf4840ee5a7851106b497", "filename": "libsanitizer/tsan/tsan_rtl_ppc64.S", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Ftsan%2Ftsan_rtl_ppc64.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Ftsan%2Ftsan_rtl_ppc64.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Ftsan%2Ftsan_rtl_ppc64.S?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -1,6 +1,5 @@\n #include \"tsan_ppc_regs.h\"\n \n-        .machine altivec\n         .section .text\n         .hidden __tsan_setjmp\n         .globl _setjmp"}, {"sha": "25cefd46ce27ced7fb6092d8d04b5074c56ebe95", "filename": "libsanitizer/ubsan/ubsan_flags.cpp", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fubsan%2Fubsan_flags.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fubsan%2Fubsan_flags.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fubsan%2Fubsan_flags.cpp?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -50,7 +50,6 @@ void InitializeFlags() {\n   {\n     CommonFlags cf;\n     cf.CopyFrom(*common_flags());\n-    cf.print_summary = false;\n     cf.external_symbolizer_path = GetFlag(\"UBSAN_SYMBOLIZER_PATH\");\n     OverrideCommonFlags(cf);\n   }"}, {"sha": "e201e6bba22078e3d873aeb5792b98ecd860cdaa", "filename": "libsanitizer/ubsan/ubsan_handlers.cpp", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fubsan%2Fubsan_handlers.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fubsan%2Fubsan_handlers.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fubsan%2Fubsan_handlers.cpp?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -894,21 +894,6 @@ void __ubsan_handle_cfi_bad_type(CFICheckFailData *Data, ValueHandle Vtable,\n \n }  // namespace __ubsan\n \n-void __ubsan::__ubsan_handle_cfi_bad_icall(CFIBadIcallData *CallData,\n-                                           ValueHandle Function) {\n-  GET_REPORT_OPTIONS(false);\n-  CFICheckFailData Data = {CFITCK_ICall, CallData->Loc, CallData->Type};\n-  handleCFIBadIcall(&Data, Function, Opts);\n-}\n-\n-void __ubsan::__ubsan_handle_cfi_bad_icall_abort(CFIBadIcallData *CallData,\n-                                                 ValueHandle Function) {\n-  GET_REPORT_OPTIONS(true);\n-  CFICheckFailData Data = {CFITCK_ICall, CallData->Loc, CallData->Type};\n-  handleCFIBadIcall(&Data, Function, Opts);\n-  Die();\n-}\n-\n void __ubsan::__ubsan_handle_cfi_check_fail(CFICheckFailData *Data,\n                                             ValueHandle Value,\n                                             uptr ValidVtable) {"}, {"sha": "219fb15de55fe02a4544422095baa0d8532baaa0", "filename": "libsanitizer/ubsan/ubsan_handlers.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fubsan%2Fubsan_handlers.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fubsan%2Fubsan_handlers.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fubsan%2Fubsan_handlers.h?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -215,20 +215,12 @@ enum CFITypeCheckKind : unsigned char {\n   CFITCK_VMFCall,\n };\n \n-struct CFIBadIcallData {\n-  SourceLocation Loc;\n-  const TypeDescriptor &Type;\n-};\n-\n struct CFICheckFailData {\n   CFITypeCheckKind CheckKind;\n   SourceLocation Loc;\n   const TypeDescriptor &Type;\n };\n \n-/// \\brief Handle control flow integrity failure for indirect function calls.\n-RECOVERABLE(cfi_bad_icall, CFIBadIcallData *Data, ValueHandle Function)\n-\n /// \\brief Handle control flow integrity failures.\n RECOVERABLE(cfi_check_fail, CFICheckFailData *Data, ValueHandle Function,\n             uptr VtableIsValid)"}, {"sha": "32d949d75b9c048b40c908e51dcb3b4d718d6f00", "filename": "libsanitizer/ubsan/ubsan_platform.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fubsan%2Fubsan_platform.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fubsan%2Fubsan_platform.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fubsan%2Fubsan_platform.h?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -12,16 +12,14 @@\n #ifndef UBSAN_PLATFORM_H\n #define UBSAN_PLATFORM_H\n \n-#ifndef CAN_SANITIZE_UB\n // Other platforms should be easy to add, and probably work as-is.\n #if defined(__linux__) || defined(__FreeBSD__) || defined(__APPLE__) ||        \\\n-    defined(__NetBSD__) || defined(__OpenBSD__) || \\\n+    defined(__NetBSD__) || \\\n     (defined(__sun__) && defined(__svr4__)) || \\\n     defined(_WIN32) || defined(__Fuchsia__) || defined(__rtems__)\n # define CAN_SANITIZE_UB 1\n #else\n # define CAN_SANITIZE_UB 0\n #endif\n-#endif //CAN_SANITIZE_UB\n \n #endif"}, {"sha": "d82b542a020e7619d2bf8aa0f9c9d425f3ec51f9", "filename": "libsanitizer/ubsan/ubsan_type_hash_itanium.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fubsan%2Fubsan_type_hash_itanium.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fubsan%2Fubsan_type_hash_itanium.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fubsan%2Fubsan_type_hash_itanium.cpp?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -12,7 +12,7 @@\n \n #include \"sanitizer_common/sanitizer_platform.h\"\n #include \"ubsan_platform.h\"\n-#if CAN_SANITIZE_UB && !SANITIZER_WINDOWS\n+#if CAN_SANITIZE_UB && !defined(_MSC_VER)\n #include \"ubsan_type_hash.h\"\n \n #include \"sanitizer_common/sanitizer_common.h\""}, {"sha": "106fa1b85a558db524039da40da826d0df2faf34", "filename": "libsanitizer/ubsan/ubsan_type_hash_win.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fubsan%2Fubsan_type_hash_win.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f792ff538109c71d85ab2a61461cd090f3b9f3/libsanitizer%2Fubsan%2Fubsan_type_hash_win.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fubsan%2Fubsan_type_hash_win.cpp?ref=98f792ff538109c71d85ab2a61461cd090f3b9f3", "patch": "@@ -12,7 +12,7 @@\n \n #include \"sanitizer_common/sanitizer_platform.h\"\n #include \"ubsan_platform.h\"\n-#if CAN_SANITIZE_UB && SANITIZER_WINDOWS\n+#if CAN_SANITIZE_UB && defined(_MSC_VER)\n #include \"ubsan_type_hash.h\"\n \n #include \"sanitizer_common/sanitizer_common.h\""}]}