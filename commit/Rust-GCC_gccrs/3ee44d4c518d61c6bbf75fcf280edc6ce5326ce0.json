{"sha": "3ee44d4c518d61c6bbf75fcf280edc6ce5326ce0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2VlNDRkNGM1MThkNjFjNmJiZjc1ZmNmMjgwZWRjNmNlNTMyNmNlMA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-10-09T15:10:31Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-10-09T15:58:32Z"}, "message": "libstdc++: Fix incorrect results in std::seed_seq::generate [PR 97311]\n\nThis ensures that intermediate results are done in uint32_t values,\nmeeting the requirement for operations to be done modulo 2^32.\n\nIf the target doesn't define __UINT32_TYPE__ then substitute uint32_t\nwith a class type that uses uint_least32_t and masks the value to\nUINT32_MAX.\n\nI've also split the first loop that goes from k=0 to k<m into three\nloops, for k=0, [1,s] and [s+1,m). This avoids branching for those three\ncases in the body of the loop, and also avoids the concerns in PR 94823\nregarding the k-1 index when k==0.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/97311\n\t* include/bits/random.tcc (seed_seq::generate): Use uint32_t for\n\tcalculations. Also split the first loop into three loops to\n\tavoid branching on k on every iteration, resolving PR 94823.\n\t* testsuite/26_numerics/random/seed_seq/97311.cc: New test.\n\t* testsuite/26_numerics/random/pr60037-neg.cc: Adjust dg-erro\n\tline number.", "tree": {"sha": "97860d67e7b00d0788d69ea08c4212eaad62569e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97860d67e7b00d0788d69ea08c4212eaad62569e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ee44d4c518d61c6bbf75fcf280edc6ce5326ce0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ee44d4c518d61c6bbf75fcf280edc6ce5326ce0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ee44d4c518d61c6bbf75fcf280edc6ce5326ce0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ee44d4c518d61c6bbf75fcf280edc6ce5326ce0/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb37ad8cc0fc937c7afcdab471e5d65d176041c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb37ad8cc0fc937c7afcdab471e5d65d176041c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb37ad8cc0fc937c7afcdab471e5d65d176041c3"}], "stats": {"total": 145, "additions": 113, "deletions": 32}, "files": [{"sha": "bf39a51559bb2749984fab059ff0dac902bba79c", "filename": "libstdc++-v3/include/bits/random.tcc", "status": "modified", "additions": 59, "deletions": 31, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ee44d4c518d61c6bbf75fcf280edc6ce5326ce0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ee44d4c518d61c6bbf75fcf280edc6ce5326ce0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc?ref=3ee44d4c518d61c6bbf75fcf280edc6ce5326ce0", "patch": "@@ -3237,42 +3237,70 @@ namespace __detail\n       const size_t __q = __p + __t;\n       const size_t __m = std::max(size_t(__s + 1), __n);\n \n-      for (size_t __k = 0; __k < __m; ++__k)\n+#ifndef __UINT32_TYPE__\n+      struct _Up\n+      {\n+\t_Up(uint_least32_t v) : _M_v(v & 0xffffffffu) { }\n+\n+\toperator uint_least32_t() const { return _M_v; }\n+\n+\tuint_least32_t _M_v;\n+      };\n+      using uint32_t = _Up;\n+#endif\n+\n+      // k == 0, every element in [begin,end) equals 0x8b8b8b8bu\n \t{\n-\t  _Type __arg = (__begin[__k % __n]\n-\t\t\t ^ __begin[(__k + __p) % __n]\n-\t\t\t ^ __begin[(__k - 1) % __n]);\n-\t  _Type __r1 = __arg ^ (__arg >> 27);\n-\t  __r1 = __detail::__mod<_Type,\n-\t\t    __detail::_Shift<_Type, 32>::__value>(1664525u * __r1);\n-\t  _Type __r2 = __r1;\n-\t  if (__k == 0)\n-\t    __r2 += __s;\n-\t  else if (__k <= __s)\n-\t    __r2 += __k % __n + _M_v[__k - 1];\n-\t  else\n-\t    __r2 += __k % __n;\n-\t  __r2 = __detail::__mod<_Type,\n-\t           __detail::_Shift<_Type, 32>::__value>(__r2);\n-\t  __begin[(__k + __p) % __n] += __r1;\n-\t  __begin[(__k + __q) % __n] += __r2;\n-\t  __begin[__k % __n] = __r2;\n+\t  uint32_t __r1 = 1371501266u;\n+\t  uint32_t __r2 = __r1 + __s;\n+\t  __begin[__p] += __r1;\n+\t  __begin[__q] = (uint32_t)__begin[__q] + __r2;\n+\t  __begin[0] = __r2;\n+\t}\n+\n+      for (size_t __k = 1; __k <= __s; ++__k)\n+\t{\n+\t  const size_t __kn = __k % __n;\n+\t  const size_t __kpn = (__k + __p) % __n;\n+\t  const size_t __kqn = (__k + __q) % __n;\n+\t  uint32_t __arg = (__begin[__kn]\n+\t\t\t    ^ __begin[__kpn]\n+\t\t\t    ^ __begin[(__k - 1) % __n]);\n+\t  uint32_t __r1 = 1664525u * (__arg ^ (__arg >> 27));\n+\t  uint32_t __r2 = __r1 + (uint32_t)__kn + _M_v[__k - 1];\n+\t  __begin[__kpn] = (uint32_t)__begin[__kpn] + __r1;\n+\t  __begin[__kqn] = (uint32_t)__begin[__kqn] + __r2;\n+\t  __begin[__kn] = __r2;\n+\t}\n+\n+      for (size_t __k = __s + 1; __k < __m; ++__k)\n+\t{\n+\t  const size_t __kn = __k % __n;\n+\t  const size_t __kpn = (__k + __p) % __n;\n+\t  const size_t __kqn = (__k + __q) % __n;\n+\t  uint32_t __arg = (__begin[__kn]\n+\t\t\t\t ^ __begin[__kpn]\n+\t\t\t\t ^ __begin[(__k - 1) % __n]);\n+\t  uint32_t __r1 = 1664525u * (__arg ^ (__arg >> 27));\n+\t  uint32_t __r2 = __r1 + (uint32_t)__kn;\n+\t  __begin[__kpn] = (uint32_t)__begin[__kpn] + __r1;\n+\t  __begin[__kqn] = (uint32_t)__begin[__kqn] + __r2;\n+\t  __begin[__kn] = __r2;\n \t}\n \n       for (size_t __k = __m; __k < __m + __n; ++__k)\n \t{\n-\t  _Type __arg = (__begin[__k % __n]\n-\t\t\t + __begin[(__k + __p) % __n]\n-\t\t\t + __begin[(__k - 1) % __n]);\n-\t  _Type __r3 = __arg ^ (__arg >> 27);\n-\t  __r3 = __detail::__mod<_Type,\n-\t\t   __detail::_Shift<_Type, 32>::__value>(1566083941u * __r3);\n-\t  _Type __r4 = __r3 - __k % __n;\n-\t  __r4 = __detail::__mod<_Type,\n-\t           __detail::_Shift<_Type, 32>::__value>(__r4);\n-\t  __begin[(__k + __p) % __n] ^= __r3;\n-\t  __begin[(__k + __q) % __n] ^= __r4;\n-\t  __begin[__k % __n] = __r4;\n+\t  const size_t __kn = __k % __n;\n+\t  const size_t __kpn = (__k + __p) % __n;\n+\t  const size_t __kqn = (__k + __q) % __n;\n+\t  uint32_t __arg = (__begin[__kn]\n+\t\t\t    + __begin[__kpn]\n+\t\t\t    + __begin[(__k - 1) % __n]);\n+\t  uint32_t __r3 = 1566083941u * (__arg ^ (__arg >> 27));\n+\t  uint32_t __r4 = __r3 - __kn;\n+\t  __begin[__kpn] ^= __r3;\n+\t  __begin[__kqn] ^= __r4;\n+\t  __begin[__kn] = __r4;\n \t}\n     }\n "}, {"sha": "0b5f597040b74bbc3563019ff6b6e23d70dbaa95", "filename": "libstdc++-v3/testsuite/26_numerics/random/pr60037-neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ee44d4c518d61c6bbf75fcf280edc6ce5326ce0/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpr60037-neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ee44d4c518d61c6bbf75fcf280edc6ce5326ce0/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpr60037-neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpr60037-neg.cc?ref=3ee44d4c518d61c6bbf75fcf280edc6ce5326ce0", "patch": "@@ -12,4 +12,4 @@ auto x = std::generate_canonical<std::size_t,\n \n // { dg-error \"static assertion failed: template argument must be a floating point type\" \"\" { target *-*-* } 167 }\n \n-// { dg-error \"static assertion failed: template argument must be a floating point type\" \"\" { target *-*-* } 3284 }\n+// { dg-error \"static assertion failed: template argument must be a floating point type\" \"\" { target *-*-* } 3312 }"}, {"sha": "594e859b8f87c40d4e812930d3322855b64c6fc3", "filename": "libstdc++-v3/testsuite/26_numerics/random/seed_seq/97311.cc", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ee44d4c518d61c6bbf75fcf280edc6ce5326ce0/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fseed_seq%2F97311.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ee44d4c518d61c6bbf75fcf280edc6ce5326ce0/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fseed_seq%2F97311.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fseed_seq%2F97311.cc?ref=3ee44d4c518d61c6bbf75fcf280edc6ce5326ce0", "patch": "@@ -0,0 +1,53 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++11 } }\n+\n+#include <random>\n+#include <cstdint>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  // PR libstdc++/97311\n+\n+  using i64 = std::int_least64_t; // can hold all values of uint32_t\n+  std::vector<i64> v(10);\n+  std::seed_seq s;\n+  s.generate(v.begin(), v.end());\n+\n+  const std::vector<i64> expected{\n+    0xbc199682,\n+    0x7a094407,\n+    0xac05bf42,\n+    0x10baa2f4,\n+    0x822d6fde,\n+    0xf08cdc22,\n+    0x30382aee,\n+    0xbd5fb4aa,\n+    0xb26c5a35,\n+    0xb9619724\n+  };\n+  VERIFY( v == expected );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}]}