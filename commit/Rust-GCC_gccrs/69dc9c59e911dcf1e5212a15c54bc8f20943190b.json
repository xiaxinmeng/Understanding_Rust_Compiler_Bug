{"sha": "69dc9c59e911dcf1e5212a15c54bc8f20943190b", "node_id": "C_kwDOANBUbNoAKDY5ZGM5YzU5ZTkxMWRjZjFlNTIxMmExNWM1NGJjOGYyMDk0MzE5MGI", "commit": {"author": {"name": "dianhong xu", "email": "dianhong.xu@intel.com", "date": "2021-06-22T12:33:24Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-09-22T10:27:28Z"}, "message": "AVX512FP16: Add complex conjugation intrinsic instructions.\n\ngcc/ChangeLog:\n\n\t* config/i386/avx512fp16intrin.h: Add new intrinsics.\n\t(_mm512_conj_pch): New intrinsic.\n\t(_mm512_mask_conj_pch): Ditto.\n\t(_mm512_maskz_conj_pch): Ditto.\n\t* config/i386/avx512fp16vlintrin.h: Add new intrinsics.\n\t(_mm256_conj_pch): New intrinsic.\n\t(_mm256_mask_conj_pch): Ditto.\n\t(_mm256_maskz_conj_pch): Ditto.\n\t(_mm_conj_pch): Ditto.\n\t(_mm_mask_conj_pch): Ditto.\n\t(_mm_maskz_conj_pch): Ditto.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/avx512fp16-conjugation-1.c: New test.\n\t* gcc.target/i386/avx512fp16vl-conjugation-1.c: New test.", "tree": {"sha": "d3a8eba9f7f45db47dbb77c0e0b764640807e98a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d3a8eba9f7f45db47dbb77c0e0b764640807e98a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/69dc9c59e911dcf1e5212a15c54bc8f20943190b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69dc9c59e911dcf1e5212a15c54bc8f20943190b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69dc9c59e911dcf1e5212a15c54bc8f20943190b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69dc9c59e911dcf1e5212a15c54bc8f20943190b/comments", "author": null, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6afc926dc8188ee7fb65d02a937dbc9f501f84c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6afc926dc8188ee7fb65d02a937dbc9f501f84c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6afc926dc8188ee7fb65d02a937dbc9f501f84c"}], "stats": {"total": 169, "additions": 169, "deletions": 0}, "files": [{"sha": "c0fb9ff25388592daa1a2139092d5c1d2d821dba", "filename": "gcc/config/i386/avx512fp16intrin.h", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69dc9c59e911dcf1e5212a15c54bc8f20943190b/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69dc9c59e911dcf1e5212a15c54bc8f20943190b/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h?ref=69dc9c59e911dcf1e5212a15c54bc8f20943190b", "patch": "@@ -721,6 +721,33 @@ _mm512_maskz_div_round_ph (__mmask32 __A, __m512h __B, __m512h __C,\n \t\t\t\t\t       (A), (D)))\n #endif  /* __OPTIMIZE__  */\n \n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_conj_pch (__m512h __A)\n+{\n+  return (__m512h) _mm512_xor_epi32 ((__m512i) __A, _mm512_set1_epi32 (1<<31));\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_conj_pch (__m512h __W, __mmask16 __U, __m512h __A)\n+{\n+  return (__m512h)\n+    __builtin_ia32_movaps512_mask ((__v16sf) _mm512_conj_pch (__A),\n+\t\t\t\t   (__v16sf) __W,\n+\t\t\t\t   (__mmask16) __U);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_conj_pch (__mmask16 __U, __m512h __A)\n+{\n+  return (__m512h)\n+    __builtin_ia32_movaps512_mask ((__v16sf) _mm512_conj_pch (__A),\n+\t\t\t\t   (__v16sf) _mm512_setzero_ps (),\n+\t\t\t\t   (__mmask16) __U);\n+}\n+\n /* Intrinsics of v[add,sub,mul,div]sh.  */\n extern __inline __m128h\n   __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))"}, {"sha": "36b3fe21d5b13d4cdace84e989afa79be0bb67e2", "filename": "gcc/config/i386/avx512fp16vlintrin.h", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69dc9c59e911dcf1e5212a15c54bc8f20943190b/gcc%2Fconfig%2Fi386%2Favx512fp16vlintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69dc9c59e911dcf1e5212a15c54bc8f20943190b/gcc%2Fconfig%2Fi386%2Favx512fp16vlintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fp16vlintrin.h?ref=69dc9c59e911dcf1e5212a15c54bc8f20943190b", "patch": "@@ -151,6 +151,59 @@ _mm256_zextph128_ph256 (__m128h __A)\n \t\t\t\t\t (__m128) __A, 0);\n }\n \n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_conj_pch (__m256h __A)\n+{\n+  return (__m256h) _mm256_xor_epi32 ((__m256i) __A, _mm256_set1_epi32 (1<<31));\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_conj_pch (__m256h __W, __mmask8 __U, __m256h __A)\n+{\n+  return (__m256h) __builtin_ia32_movaps256_mask ((__v8sf)\n+\t\t\t\t\t\t   _mm256_conj_pch (__A),\n+\t\t\t\t\t\t  (__v8sf) __W,\n+\t\t\t\t\t\t  (__mmask8) __U);\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_maskz_conj_pch (__mmask8 __U, __m256h __A)\n+{\n+  return (__m256h) __builtin_ia32_movaps256_mask ((__v8sf)\n+\t\t\t\t\t\t   _mm256_conj_pch (__A),\n+\t\t\t\t\t\t  (__v8sf)\n+\t\t\t\t\t\t   _mm256_setzero_ps (),\n+\t\t\t\t\t\t  (__mmask8) __U);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_conj_pch (__m128h __A)\n+{\n+  return (__m128h) _mm_xor_epi32 ((__m128i) __A, _mm_set1_epi32 (1<<31));\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_conj_pch (__m128h __W, __mmask8 __U, __m128h __A)\n+{\n+  return (__m128h) __builtin_ia32_movaps128_mask ((__v4sf) _mm_conj_pch (__A),\n+\t\t\t\t\t\t  (__v4sf) __W,\n+\t\t\t\t\t\t  (__mmask8) __U);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_conj_pch (__mmask8 __U, __m128h __A)\n+{\n+  return (__m128h) __builtin_ia32_movaps128_mask ((__v4sf) _mm_conj_pch (__A),\n+\t\t\t\t\t\t  (__v4sf) _mm_setzero_ps (),\n+\t\t\t\t\t\t  (__mmask8) __U);\n+}\n+\n /* Intrinsics v[add,sub,mul,div]ph.  */\n extern __inline __m128h\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))"}, {"sha": "662b23ca43d8593666427c2c06a1f2c05a068291", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-conjugation-1.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69dc9c59e911dcf1e5212a15c54bc8f20943190b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-conjugation-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69dc9c59e911dcf1e5212a15c54bc8f20943190b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-conjugation-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-conjugation-1.c?ref=69dc9c59e911dcf1e5212a15c54bc8f20943190b", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do compile} */\n+/* { dg-options \"-O2 -mavx512fp16\" } */\n+\n+#include <immintrin.h>\n+__m512h\n+__attribute__ ((noinline, noclone))\n+test_mm512_conj_pch (__m512h __A)\n+{\n+  return _mm512_conj_pch (__A);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vpxord\\[^\\n\\]*%zmm\\[0-9\\]+\" 3 } } */\n+\n+__m512h\n+__attribute__ ((noinline, noclone))\n+test_mm512_mask_conj_pch (__m512h __W, __mmask16 __U, __m512h __A)\n+{\n+  return _mm512_mask_conj_pch (__W, __U, __A);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vpxord\\[^\\n\\]*%zmm\\[0-9\\]+\" 3 } } */\n+/* { dg-final { scan-assembler-times \"kmovw\\[^\\n\\]*%k\\[1-9\\]+\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vmovaps\\[^\\n]\" 2 } } */\n+\n+__m512h\n+__attribute__ ((noinline, noclone))\n+test_mm512_maskz_conj_pch (__mmask16 __U, __m512h __A)\n+{\n+   return _mm512_maskz_conj_pch (__U, __A);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vpxord\\[^\\n\\]*%zmm\\[0-9\\]+\" 3 } } */\n+/* { dg-final { scan-assembler-times \"kmovw\\[^\\n\\]*%k\\[1-9\\]+\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vmovaps\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */"}, {"sha": "d8fdab7efec42e1df2e92ac86c0b2d938734f6e0", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-conjugation-1.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69dc9c59e911dcf1e5212a15c54bc8f20943190b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-conjugation-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69dc9c59e911dcf1e5212a15c54bc8f20943190b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-conjugation-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-conjugation-1.c?ref=69dc9c59e911dcf1e5212a15c54bc8f20943190b", "patch": "@@ -0,0 +1,55 @@\n+/* { dg-do compile} */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512vl -mavx512dq\" } */\n+\n+#include <immintrin.h>\n+__m256h\n+__attribute__ ((noinline, noclone))\n+test_mm256_conj_pch (__m256h __A)\n+{\n+  return _mm256_conj_pch (__A);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vpxor\\[^\\n\\]*%ymm\\[0-9\\]+\" 3 } } */\n+\n+__m128h\n+__attribute__ ((noinline, noclone))\n+test_mm_conj_pch (__m128h __A)\n+{\n+  return _mm_conj_pch (__A);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vpxor\\[^\\n\\]*%xmm\\[0-9\\]+\" 3  } } */\n+\n+__m256h\n+__attribute__ ((noinline, noclone))\n+test_mm256_mask_conj_pch (__m256h __W, __mmask8 __U, __m256h __A)\n+{\n+  return _mm256_mask_conj_pch (__W, __U, __A);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vmovaps\\[^\\n\\]*%ymm\\[0-9\\]+\" 2 } } */\n+\n+__m128h\n+__attribute__ ((noinline, noclone))\n+test_mm_mask_conj_pch (__m128h __W, __mmask8 __U, __m128h __A)\n+{\n+  return _mm_mask_conj_pch (__W, __U, __A);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vmovaps\\[^\\n\\]*%xmm\\[0-9\\]+\" 2 } } */\n+\n+__m256h\n+__attribute__ ((noinline, noclone))\n+test_mm256_maskz_conj_pch (__mmask8 __U, __m256h __A)\n+{\n+   return _mm256_maskz_conj_pch (__U, __A);\n+}\n+/* { dg-final { scan-assembler-times \"vmovaps\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+__m128h\n+__attribute__ ((noinline, noclone))\n+test_mm_maskz_conj_pch (__mmask8 __U, __m128h __A) {\n+   return _mm_maskz_conj_pch (__U, __A);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vmovaps\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */"}]}