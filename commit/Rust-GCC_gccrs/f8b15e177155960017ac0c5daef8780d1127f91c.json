{"sha": "f8b15e177155960017ac0c5daef8780d1127f91c", "node_id": "C_kwDOANBUbNoAKGY4YjE1ZTE3NzE1NTk2MDAxN2FjMGM1ZGFlZjg3ODBkMTEyN2Y5MWM", "commit": {"author": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2022-03-11T12:41:01Z"}, "committer": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2022-03-22T13:35:34Z"}, "message": "[nvptx] Use .alias directive for mptx >= 6.3\n\nStarting with ptx isa version 6.3, a ptx directive .alias is available.\nUse this directive to support symbol aliases, as far as possible.\n\nThe alias support is off by default.  It can be turned on using a switch\n-malias.\n\nFurthermore, for pre-sm_75, it's not effective unless the ptx version is\nbumped to 6.3 or higher using -mptx (given that the default for pre-sm_75 is\n6.0).\n\nThe alias support has the following limitations.\n\nOnly function aliases are supported.\n\nWeak aliases are not supported.  That is, if I disable the check in\nnvptx_asm_output_def_from_decls that disallows this, a weak alias is emitted\nand parsed by the driver.  But the test gcc.dg/globalalias.c starts failing,\nwith the behaviour matching the comment about \"weird behavior of AIX's .set\npseudo-op\": a weak alias may resolve to different functions in different\nfiles.\n\nAliases to weak symbols are not supported (see gcc.dg/localalias.c).  This is\ncurrently not prohibited by the compiler, but with the driver link we run\ninto: \"error: Function test with .weak scope cannot be aliased\".\n\nAliases to aliases are not supported (see libgomp.c-c++-common/pr96390.c).\nThis is currently not prohibited by the compiler, but with the driver link we\nrun into:  \"Internal error: alias to unknown symbol\" .\n\nUnreferenced aliases are not emitted (these can occur f.i. when inlining a\ncall to an alias).  This avoids driver link error \"Internal error: reference\nto deleted section\".\n\nWhen enabling malias by default, libgomp detects alias support and\nconsequently libgomp.a will contains a few uses of .alias.  This however\nresults in aforementioned \"Internal error: reference to deleted section\" in\nmany test-cases.  Either there's some error with how .alias is used, or\nthere's a driver bug.  While this issue is not resolved, we keep malias\noff-by-default.\n\nAt some point we may add support in the nvptx-tools linker for symbol\naliases, and define f.i. malias=ptx and malias=ld to choose between the two in\nthe compiler.\n\nAn example of where this support is useful, is the OvO (OpenMP vs Offload)\ntestsuite.  The testsuite passes already at -O2.  But at -O0, there are errors\nin some c++ test-cases due to missing symbol alias support.  By compiling with\n-malias, the whole testsuite passes also at -O0.\n\nThis patch causes a regression:\n...\n-PASS: gcc.dg/pr60797.c  (test for errors, line 4)\n+FAIL: gcc.dg/pr60797.c  (test for errors, line 4)\n...\nThe test-case is skipped for effective target alias, and both without and with\nthis patch the nvptx target is considered to not support it, so the test-case is\nexecuted.  The test-case expects an error message along the lines of \"alias\ndefinitions not supported in this configuration\", but instead we run into:\n...\ngcc.dg/pr60797.c:4:12: error: foo aliased to undefined symbol\n...\nThis is probably due to the fact that the nvptx backend now defines macros\nASM_OUTPUT_DEF and ASM_OUTPUT_DEF_FROM_DECLS, so from the point of view of the\ncommon part of the compiler, aliases are supported.\n\ngcc/ChangeLog:\n\n2022-03-18  Tom de Vries  <tdevries@suse.de>\n\n\tPR target/104957\n\t* config/nvptx/nvptx-protos.h (nvptx_asm_output_def_from_decls): Declare.\n\t* config/nvptx/nvptx.cc (write_fn_proto_1): Don't add function marker\n\tfor alias.\n\t(SET_ASM_OP, NVPTX_ASM_OUTPUT_DEF): New macro def.\n\t(nvptx_asm_output_def_from_decls): New function.\n\t* config/nvptx/nvptx.h (ASM_OUTPUT_DEF): New macro def, define to\n\tgcc_unreachable ().\n\t(ASM_OUTPUT_DEF_FROM_DECLS): New macro def, define to\n\tnvptx_asm_output_def_from_decls.\n\t* config/nvptx/nvptx.opt (malias): New opt.\n\ngcc/testsuite/ChangeLog:\n\n2022-03-18  Tom de Vries  <tdevries@suse.de>\n\n\tPR target/104957\n\t* gcc.target/nvptx/alias-1.c: New test.\n\t* gcc.target/nvptx/alias-2.c: New test.\n\t* gcc.target/nvptx/alias-3.c: New test.\n\t* gcc.target/nvptx/alias-4.c: New test.\n\t* gcc.target/nvptx/nvptx.exp\n\t(check_effective_target_runtime_ptx_isa_version_6_3): New proc.", "tree": {"sha": "675c4471f8a297f0e66d0b0baeca3a48d946ca6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/675c4471f8a297f0e66d0b0baeca3a48d946ca6c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f8b15e177155960017ac0c5daef8780d1127f91c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8b15e177155960017ac0c5daef8780d1127f91c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8b15e177155960017ac0c5daef8780d1127f91c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8b15e177155960017ac0c5daef8780d1127f91c/comments", "author": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a624388b9546b066250be8baa118b7d50c403c25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a624388b9546b066250be8baa118b7d50c403c25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a624388b9546b066250be8baa118b7d50c403c25"}], "stats": {"total": 183, "additions": 182, "deletions": 1}, "files": [{"sha": "ca0a87ee4bd68a4e2928cd0d49d2a02f37aa2e60", "filename": "gcc/config/nvptx/nvptx-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8b15e177155960017ac0c5daef8780d1127f91c/gcc%2Fconfig%2Fnvptx%2Fnvptx-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8b15e177155960017ac0c5daef8780d1127f91c/gcc%2Fconfig%2Fnvptx%2Fnvptx-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx-protos.h?ref=f8b15e177155960017ac0c5daef8780d1127f91c", "patch": "@@ -43,6 +43,7 @@ extern void nvptx_output_ascii (FILE *, const char *, unsigned HOST_WIDE_INT);\n extern void nvptx_cpu_cpp_builtins (void);\n extern void nvptx_register_pragmas (void);\n extern unsigned int nvptx_data_alignment (const_tree, unsigned int);\n+extern void nvptx_asm_output_def_from_decls (FILE *, tree, tree);\n \n #ifdef RTX_CODE\n extern void nvptx_expand_oacc_fork (unsigned);"}, {"sha": "b2f7b4af392d401300e69a243cf7ec859daafa2b", "filename": "gcc/config/nvptx/nvptx.cc", "status": "modified", "additions": 73, "deletions": 1, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8b15e177155960017ac0c5daef8780d1127f91c/gcc%2Fconfig%2Fnvptx%2Fnvptx.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8b15e177155960017ac0c5daef8780d1127f91c/gcc%2Fconfig%2Fnvptx%2Fnvptx.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.cc?ref=f8b15e177155960017ac0c5daef8780d1127f91c", "patch": "@@ -77,6 +77,7 @@\n #include \"opts.h\"\n #include \"tree-pretty-print.h\"\n #include \"rtl-iter.h\"\n+#include \"cgraph.h\"\n \n /* This file should be included last.  */\n #include \"target-def.h\"\n@@ -968,7 +969,8 @@ static void\n write_fn_proto_1 (std::stringstream &s, bool is_defn,\n \t\t  const char *name, const_tree decl)\n {\n-  write_fn_marker (s, is_defn, TREE_PUBLIC (decl), name);\n+  if (lookup_attribute (\"alias\", DECL_ATTRIBUTES (decl)) == NULL)\n+    write_fn_marker (s, is_defn, TREE_PUBLIC (decl), name);\n \n   /* PTX declaration.  */\n   if (DECL_EXTERNAL (decl))\n@@ -7393,6 +7395,76 @@ nvptx_mem_local_p (rtx mem)\n   return false;\n }\n \n+/* Define locally, for use in NVPTX_ASM_OUTPUT_DEF.  */\n+#define SET_ASM_OP \".alias \"\n+\n+/* Define locally, for use in nvptx_asm_output_def_from_decls.  Add NVPTX_\n+   prefix to avoid clash with ASM_OUTPUT_DEF from nvptx.h.\n+   Copy of ASM_OUTPUT_DEF from defaults.h, with added terminating\n+   semicolon.  */\n+#define NVPTX_ASM_OUTPUT_DEF(FILE,LABEL1,LABEL2)\t\\\n+  do\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      fprintf ((FILE), \"%s\", SET_ASM_OP);\t\t\\\n+      assemble_name (FILE, LABEL1);\t\t\t\\\n+      fprintf (FILE, \",\");\t\t\t\t\\\n+      assemble_name (FILE, LABEL2);\t\t\t\\\n+      fprintf (FILE, \";\\n\");\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+void\n+nvptx_asm_output_def_from_decls (FILE *stream, tree name, tree value)\n+{\n+  if (nvptx_alias == 0 || !TARGET_PTX_6_3)\n+    {\n+      /* Copied from assemble_alias.  */\n+      error_at (DECL_SOURCE_LOCATION (name),\n+\t\t\"alias definitions not supported in this configuration\");\n+      TREE_ASM_WRITTEN (name) = 1;\n+      return;\n+    }\n+\n+  if (lookup_attribute (\"weak\", DECL_ATTRIBUTES (name)))\n+    {\n+      /* Prevent execution FAILs for gcc.dg/globalalias.c and\n+\t gcc.dg/pr77587.c.  */\n+      error_at (DECL_SOURCE_LOCATION (name),\n+\t\t\"weak alias definitions not supported in this configuration\");\n+      TREE_ASM_WRITTEN (name) = 1;\n+      return;\n+    }\n+\n+  /* Ptx also doesn't support value having weak linkage, but we can't detect\n+     that here, so we'll end up with:\n+     \"error: Function test with .weak scope cannot be aliased\".\n+     See gcc.dg/localalias.c.  */\n+\n+  if (TREE_CODE (name) != FUNCTION_DECL)\n+    {\n+      error_at (DECL_SOURCE_LOCATION (name),\n+\t\t\"non-function alias definitions not supported\"\n+\t\t\" in this configuration\");\n+      TREE_ASM_WRITTEN (name) = 1;\n+      return;\n+    }\n+\n+  if (!cgraph_node::get (name)->referred_to_p ())\n+    /* Prevent \"Internal error: reference to deleted section\".  */\n+    return;\n+\n+  std::stringstream s;\n+  write_fn_proto (s, false, get_fnname_from_decl (name), name);\n+  fputs (s.str ().c_str (), stream);\n+\n+  tree id = DECL_ASSEMBLER_NAME (name);\n+  NVPTX_ASM_OUTPUT_DEF (stream, IDENTIFIER_POINTER (id),\n+\t\t\tIDENTIFIER_POINTER (value));\n+}\n+\n+#undef NVPTX_ASM_OUTPUT_DEF\n+#undef SET_ASM_OP\n+\n #undef TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE nvptx_option_override\n "}, {"sha": "75ac7a666b1391bb5b443e171c3876e31af2b0f1", "filename": "gcc/config/nvptx/nvptx.h", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8b15e177155960017ac0c5daef8780d1127f91c/gcc%2Fconfig%2Fnvptx%2Fnvptx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8b15e177155960017ac0c5daef8780d1127f91c/gcc%2Fconfig%2Fnvptx%2Fnvptx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.h?ref=f8b15e177155960017ac0c5daef8780d1127f91c", "patch": "@@ -315,6 +315,23 @@ struct GTY(()) machine_function\n   ((VALUE) = GET_MODE_BITSIZE ((MODE)), 2)\n \n #define SUPPORTS_WEAK 1\n+\n+/* The documentation states that ASM_OUTPUT_DEF_FROM_DECLS is used in\n+   preference to ASM_OUTPUT_DEF if the tree nodes are available.  However, we\n+   need the tree nodes to emit the prototype, so at this point it's not clear\n+   how we can support ASM_OUTPUT_DEF.  Still, we need to define it, or\n+   ASM_OUTPUT_DEF_FROM_DECLS is ignored.  For now, assert, and once we run\n+   into it possibly improve by somehow emitting the prototype elsewhere, or\n+   emitting a reasonable error message.  */\n+#define ASM_OUTPUT_DEF(FILE,LABEL1,LABEL2)\t\\\n+  do\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\\\n+      gcc_unreachable ();\t\t\t\\\n+    }\t\t\t\t\t\t\\\n+  while (0)\n+#define ASM_OUTPUT_DEF_FROM_DECLS(STREAM, NAME, VALUE)\t\\\n+  nvptx_asm_output_def_from_decls (STREAM, NAME, VALUE)\n+\n #define NO_DOT_IN_LABEL\n #define ASM_COMMENT_START \"//\"\n "}, {"sha": "980428b58cc80d27c194a996e4add9d495115979", "filename": "gcc/config/nvptx/nvptx.opt", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8b15e177155960017ac0c5daef8780d1127f91c/gcc%2Fconfig%2Fnvptx%2Fnvptx.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8b15e177155960017ac0c5daef8780d1127f91c/gcc%2Fconfig%2Fnvptx%2Fnvptx.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.opt?ref=f8b15e177155960017ac0c5daef8780d1127f91c", "patch": "@@ -85,3 +85,6 @@ Initialize ptx registers.\n \n mptx-comment\n Target Var(nvptx_comment) Init(1) Undocumented\n+\n+malias\n+Target Var(nvptx_alias) Init(0) Undocumented"}, {"sha": "f68716e77dd6dc346f012b819cf24bbc23db984e", "filename": "gcc/testsuite/gcc.target/nvptx/alias-1.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8b15e177155960017ac0c5daef8780d1127f91c/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Falias-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8b15e177155960017ac0c5daef8780d1127f91c/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Falias-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Falias-1.c?ref=f8b15e177155960017ac0c5daef8780d1127f91c", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do link } */\n+/* { dg-do run { target runtime_ptx_isa_version_6_3 } } */\n+/* { dg-options \"-save-temps -malias -mptx=6.3\" } */\n+\n+int v;\n+\n+void __f ()\n+{\n+  v = 1;\n+}\n+\n+void f () __attribute__ ((alias (\"__f\")));\n+\n+int\n+main (void)\n+{\n+  if (v != 0)\n+    __builtin_abort ();\n+  f ();\n+  if (v != 1)\n+    __builtin_abort ();\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\.alias f,__f;\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\\\.visible \\\\.func __f;\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\\\.visible \\\\.func f;\" 1 } } */"}, {"sha": "e2dc9b1f5aca472a6ba0a2192a82a1a5c93aa203", "filename": "gcc/testsuite/gcc.target/nvptx/alias-2.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8b15e177155960017ac0c5daef8780d1127f91c/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Falias-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8b15e177155960017ac0c5daef8780d1127f91c/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Falias-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Falias-2.c?ref=f8b15e177155960017ac0c5daef8780d1127f91c", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do link } */\n+/* { dg-do run { target runtime_ptx_isa_version_6_3 } } */\n+/* { dg-options \"-save-temps -malias -mptx=6.3 -O2\" } */\n+\n+#include \"alias-1.c\"\n+\n+/* Inlined, so no alias.  */\n+/* { dg-final { scan-assembler-not \"\\\\.alias.*;\" } } */\n+/* { dg-final { scan-assembler-not \"\\\\.visible \\\\.func f;\" } } */\n+\n+/* Note static and inlined, so still there.  */\n+/* { dg-final { scan-assembler-times \"\\\\.visible \\\\.func __f;\" 1 } } */\n+"}, {"sha": "60486e508269665e63848d0ccb47fb32ae75088a", "filename": "gcc/testsuite/gcc.target/nvptx/alias-3.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8b15e177155960017ac0c5daef8780d1127f91c/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Falias-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8b15e177155960017ac0c5daef8780d1127f91c/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Falias-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Falias-3.c?ref=f8b15e177155960017ac0c5daef8780d1127f91c", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do link } */\n+/* { dg-do run { target runtime_ptx_isa_version_6_3 } } */\n+/* { dg-options \"-save-temps -malias -mptx=6.3\" } */\n+\n+/* Copy of alias-1.c, with static __f and f.  */\n+\n+int v;\n+\n+static void __f ()\n+{\n+  v = 1;\n+}\n+\n+static void f () __attribute__ ((alias (\"__f\")));\n+\n+int\n+main (void)\n+{\n+  if (v != 0)\n+    __builtin_abort ();\n+  f ();\n+  if (v != 1)\n+    __builtin_abort ();\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\.alias f,__f;\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\\\.func __f;\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\\\.func f;\" 1 } } */"}, {"sha": "956150a6b3f74cc7df69b365415710d2fa518a2c", "filename": "gcc/testsuite/gcc.target/nvptx/alias-4.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8b15e177155960017ac0c5daef8780d1127f91c/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Falias-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8b15e177155960017ac0c5daef8780d1127f91c/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Falias-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Falias-4.c?ref=f8b15e177155960017ac0c5daef8780d1127f91c", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do link } */\n+/* { dg-do run { target runtime_ptx_isa_version_6_3 } } */\n+/* { dg-options \"-save-temps -malias -mptx=6.3 -O2\" } */\n+\n+#include \"alias-3.c\"\n+\n+/* Inlined, so no alias.  */\n+/* { dg-final { scan-assembler-not \"\\\\.alias.*;\" } } */\n+/* { dg-final { scan-assembler-not \"\\\\.func f;\" } } */\n+\n+/* Static and inlined, so it's deleted.  */\n+/* { dg-final { scan-assembler-not \"\\\\.func __f;\" } } */"}, {"sha": "e69b6d35feda7a42818e2300daee8a7ce8e63873", "filename": "gcc/testsuite/gcc.target/nvptx/nvptx.exp", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8b15e177155960017ac0c5daef8780d1127f91c/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fnvptx.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8b15e177155960017ac0c5daef8780d1127f91c/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fnvptx.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fnvptx.exp?ref=f8b15e177155960017ac0c5daef8780d1127f91c", "patch": "@@ -25,6 +25,13 @@ if ![istarget nvptx*-*-*] then {\n # Load support procs.\n load_lib gcc-dg.exp\n \n+# Return 1 if code with -mptx=6.3 can be run.\n+proc check_effective_target_runtime_ptx_isa_version_6_3 { args } {\n+    return [check_runtime run_ptx_isa_6_3 {\n+\tint main (void) { return 0; }\n+    } \"-mptx=6.3\"]\n+}\n+\n # If a testcase doesn't have special options, use these.\n global DEFAULT_CFLAGS\n if ![info exists DEFAULT_CFLAGS] then {"}]}