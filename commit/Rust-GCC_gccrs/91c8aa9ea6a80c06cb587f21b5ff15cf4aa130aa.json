{"sha": "91c8aa9ea6a80c06cb587f21b5ff15cf4aa130aa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTFjOGFhOWVhNmE4MGMwNmNiNTg3ZjIxYjVmZjE1Y2Y0YWExMzBhYQ==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2002-02-19T03:26:19Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2002-02-19T03:26:19Z"}, "message": "forgot cl entries\n\nFrom-SVN: r49854", "tree": {"sha": "43661af6101c937342dfaef0021f64fadb8eb146", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43661af6101c937342dfaef0021f64fadb8eb146"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/91c8aa9ea6a80c06cb587f21b5ff15cf4aa130aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91c8aa9ea6a80c06cb587f21b5ff15cf4aa130aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91c8aa9ea6a80c06cb587f21b5ff15cf4aa130aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91c8aa9ea6a80c06cb587f21b5ff15cf4aa130aa/comments", "author": null, "committer": null, "parents": [{"sha": "69ef87e2bc8b929b7af75c3f03aafd1f12121b67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69ef87e2bc8b929b7af75c3f03aafd1f12121b67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69ef87e2bc8b929b7af75c3f03aafd1f12121b67"}], "stats": {"total": 165, "additions": 165, "deletions": 0}, "files": [{"sha": "84a7f2e602d5cc1ead0501621f524bec7e57f8ae", "filename": "gcc/ChangeLog", "status": "modified", "additions": 165, "deletions": 0, "changes": 165, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91c8aa9ea6a80c06cb587f21b5ff15cf4aa130aa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91c8aa9ea6a80c06cb587f21b5ff15cf4aa130aa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=91c8aa9ea6a80c06cb587f21b5ff15cf4aa130aa", "patch": "@@ -1,3 +1,168 @@\n+2002-02-19  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* config/i386/i386.md (\"mmx_uavgv8qi3\"): Use const_vector.\n+\t(\"mmx_uavgv4hi3\"): Same.\n+\t(\"pmulhrwv4hi3\"): Same.\n+\n+\t* tree-inline.c (walk_tree): Handle vectors.\n+\n+\t* c-common.c (constant_expression_warning): Handle vectors.\n+\t(overflow_warning): Same.\n+\n+\t* sched-deps.c (sched_analyze_2): Handle vectors.\n+\n+\t* rtlanal.c (rtx_unstable_p): Handle vectors.\n+\t(rtx_varies_p): Same.\n+\t(count_occurrences): Same.\n+\t(regs_set_between_p): Same.\n+\t(modified_between_p): Same.\n+\t(modified_in_p): Same.\n+\t(volatile_insn_p): Same.\n+\t(volatile_refs_p): Same.\n+\t(side_effects_p): Same.\n+\t(may_trap_p): Same.\n+\t(inequality_comparisons_p): Same.\n+\t(replace_regs): Same.\n+\t(computed_jump_p_1): Same.\n+\n+\t* rtl.c (DEF_MACHMODE): Change all definitions to accept 8th\n+\targument.\n+\t(inner_mode_array): New.\n+\t(copy_rtx): Handle vectors.\n+\t(copy_most_rtx): Same.\n+\t(rtx_equal_p): Same.\n+\t(get_mode_alignment): Adjust for vectors.\n+\n+\t* resource.c (mark_referenced_resources): Handle vectors.\n+\t(mark_set_resources): Same.\n+\n+\t* reload1.c (eliminate_regs): Handle vectors.\n+\t(elimination_effects): Same.\n+\t(scan_paradoxical_subregs): Same.\n+\n+\t* reload.c (subst_reg_equivs): Handle vectors.\n+\n+\t* regrename.c (scan_rtx): Handle vectors.\n+\n+\t* regclass.c (reg_scan_mark_refs): Handle vectors.\n+\n+\t* recog.c (find_single_use_1): Handle vectors.\n+\n+\t* local-alloc.c (equiv_init_varies_p): Handle vectors.\n+\t(contains_replace_regs): Same.\n+\t(memref_referenced_p): Same.\n+\n+\t* integrate.c (copy_rtx_and_substitute): Handle vectors.\n+\t(subst_constants): Same.\n+\n+\t* genattrtab.c (attr_copy_rtx): Handle vectors.\n+\t(encode_units_mask): Same.\n+\t(clear_struct_flag): Same.\n+\t(count_sub_rtxs): Same.\n+\n+\t* gcse.c (want_to_gcse_p): Handle vectors.\n+\t(oprs_unchanged_p): Same.\n+\t(hash_expr_1): Same.\n+\t(oprs_not_set_p): Same.\n+\t(expr_killed_p): Same.\n+\t(compute_transp): Same.\n+\t(store_ops_ok): Same.\n+\n+\t* function.c (purge_addressof_1): Do not allow paradoxical subregs\n+\tof vectors.\n+\t(fixup_var_refs_1): Same.\n+\t(instantiate_virtual_regs_1): Same.\n+\n+\t* fold-const.c (operand_equal_p): Handle vectors.\n+\t(fold): Same.\n+\t(rtl_expr_nonnegative_p): Same.\n+\n+\t* flow.c (mark_used_regs): Handle vectors.\n+\n+\t* df.c (df_uses_record): Handle vectors.\n+\n+\t* cselib.c (cselib_subst_to_values): Handle vectors.\n+\t(cselib_mem_conflict_p): Same.\n+\t(hash_rtx): Same.\n+\n+\t* cse.c (canon_reg): Handle vectors.\n+\t(fold_rt): Same.\n+\t(cse_process_notes): Same.\n+\t(count_reg_usage): Same.\n+\t(canon_hash): Same.\n+\n+\t* alias.c (nonlocal_mentioned_p): Add case for CONST_VECTOR.\n+\n+\t* combine.c (mark_used_regs_combine): Add case for CONST_VECTOR.\n+\n+\t* emit-rtl.c (init_emit_once): Generate const0_rtx for vectors.\n+\t(gen_rtx): Handle CONST_VECTOR.\n+\t(gen_const_vector_0): New.\n+\t(copy_rtx_if_shared): CONST_VECTORs can be shared.\n+\t(reset_used_flags): Same.\n+\t(copy_insn_1): Same.\n+\t(initializer_constant_valid_p): Handle VECTOR_CST.\n+\n+\t* doc/c-tree.texi (Expression trees): Document VECTOR_CST.\n+\n+\t* doc/rtl.texi (Constants): Document const_vector.\n+\t(CONST0_RTX): Update for vectors.\n+\t(RTL sharing): Same.\n+\n+\t* print-tree.c (print_node): Add case for VECTOR_CST.\n+\n+\t* tree.h (TREE_VECTOR_CST_ELTS): New.\n+\t(struct tree_vector): New.\n+\t(union tree_node): Add vector node.\n+\t(build_vector): Add prototype.\n+\n+\t* tree.def (VECTOR_CST): New.\n+\n+\t* tree.c (build_vector): New.\n+\n+\t* expmed.c (make_tree): Handle CONST_VECTOR.\n+\n+\t* rtl.h (CONSTANT_P): CONST_VECTORs are constants too.\n+\t(CONST_VECTOR_ELT): New.\n+\t(CONST_VECTOR_NUNITS): New.\n+\n+\t* machmode.h (GET_MODE_INNER): New.\n+\t(DEF_MACHMODE): Accept 8th arg.\n+\n+\t* machmode.def: Add 8th argument for vector inner mode.\n+\tAdd inner vector modes for vectors.\n+\n+\t* rtl.def (VEC_CONST): Remove.\n+\t(CONST_VECTOR): New.\n+\n+\t* expr.c (clear_storage): Allow vectors.\n+\t(is_zeros_p): Handle VECTOR_CST.\n+\n+\t* varasm.c (output_constant_pool): Handle vectors.\n+\t(rtx_const): Add veclo and vechi fields.\n+\t(kind): Add RTX_VECTOR.\n+\t(decode_rtx_const): Add case for vector.\n+\n+\t* config/rs6000/rs6000-protos.h: Add zero_constant.\n+\t\n+\t* config/rs6000/rs6000.c (rs6000_emit_move): Handle vector\n+\tconstants.  Force easy vector constants into memory.\n+\t(easy_vector_constant): New.\n+\t(emit_easy_vector_constant): New.\n+\t(rs6000_legitimize_reload_address): Do not generate bad reloads on\n+\tdarwin.\n+\n+\t* config/rs6000/rs6000.md (\"altivec_lvx\"): Reflect what\n+\tinstruction does.\n+\t(\"altivec_lvxl\"): Same.\n+\t(altivec_lvebx): Same.\n+\t(altivec_lvehx): Same.\n+\t(altivec_lvewx): Same.\n+\t(\"*movv4si_const0\"): New.\n+\t(\"*movv4sf_const0\"): New.\n+\t(\"*movv8hi_const0\"): New.\n+\t(\"*movv16qi_const0\"): New.\n+\n 2002-02-18  Kazu Hirata  <kazu@hxi.com>\n \n \t* config/h8300/h8300.c (notice_update_cc): Use"}]}