{"sha": "6d4bbee4f59c7102f8ed9b6774f0b2d9f6ff4365", "node_id": "C_kwDOANBUbNoAKDZkNGJiZWU0ZjU5YzcxMDJmOGVkOWI2Nzc0ZjBiMmQ5ZjZmZjQzNjU", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-04-06T06:15:31Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-04-06T06:19:08Z"}, "message": "Support pandn for V1TI mode (i.e. *andnotv1ti3).\n\nThis simple patch allows the i386 backend to generate pandn instructions\nfor V1TI mode.  Currently, the testcase:\n\ntypedef unsigned __int128 v1ti __attribute__ ((__vector_size__ (16)));\nv1ti andnot1(v1ti x, v1ti y) { return ~x & y; }\n\ngenerates with -O2\n\n        pcmpeqd %xmm2, %xmm2\n        pxor    %xmm2, %xmm0\n        pand    %xmm1, %xmm0\n        ret\n\nwith this patch, we now generate:\n\n        pandn   %xmm1, %xmm0\n        ret\n\nIt turns out that there are currently three (near) duplicates of the\nlogic for andn/pandn/vandn/vpandn in i386/sse.md: one for floating point\nvectors (MODEF), one for integer vectors (VI) and a third for TFmode.\nRather than introduce a fourth copy, this patch introduces a new mode\niterator to share/reuse the TFmode define_insn to also handle V1TI.\n\n2022-04-06  Roger Sayle  <roger@nextmovesoftware.com>\n\ngcc/ChangeLog\n\t* config/i386/sse.md (ANDNOT_MODE): New mode iterator for TF and V1TI.\n\t(*andnottf3): Replace with...\n\t(*andnot<mode>3): New define_insn using ANDNOT_MODE.\n\ngcc/testsuite/ChangeLog\n\t* gcc.target/i386/sse2-v1ti-andnot.c: New test case.", "tree": {"sha": "72195b452667579281249d309b0103e71d6e9990", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/72195b452667579281249d309b0103e71d6e9990"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d4bbee4f59c7102f8ed9b6774f0b2d9f6ff4365", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d4bbee4f59c7102f8ed9b6774f0b2d9f6ff4365", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d4bbee4f59c7102f8ed9b6774f0b2d9f6ff4365", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d4bbee4f59c7102f8ed9b6774f0b2d9f6ff4365/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc8d9e4497032dd295aac9414042163f92250b77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc8d9e4497032dd295aac9414042163f92250b77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc8d9e4497032dd295aac9414042163f92250b77"}], "stats": {"total": 24, "additions": 19, "deletions": 5}, "files": [{"sha": "a852c166a58496ecb9081572199ff599eb72c08b", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d4bbee4f59c7102f8ed9b6774f0b2d9f6ff4365/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d4bbee4f59c7102f8ed9b6774f0b2d9f6ff4365/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=6d4bbee4f59c7102f8ed9b6774f0b2d9f6ff4365", "patch": "@@ -4923,11 +4923,14 @@\n \t      ]\n \t      (const_string \"<ssevecmode>\")))])\n \n-(define_insn \"*andnottf3\"\n-  [(set (match_operand:TF 0 \"register_operand\" \"=x,x,v,v\")\n-\t(and:TF\n-\t  (not:TF (match_operand:TF 1 \"register_operand\" \"0,x,v,v\"))\n-\t  (match_operand:TF 2 \"vector_operand\" \"xBm,xm,vm,v\")))]\n+;; Modes for andnot3 not covered by VI and MODEF.\n+(define_mode_iterator ANDNOT_MODE [TF V1TI])\n+\n+(define_insn \"*andnot<mode>3\"\n+  [(set (match_operand:ANDNOT_MODE 0 \"register_operand\" \"=x,x,v,v\")\n+\t(and:ANDNOT_MODE\n+\t  (not:ANDNOT_MODE (match_operand:ANDNOT_MODE 1 \"register_operand\" \"0,x,v,v\"))\n+\t  (match_operand:ANDNOT_MODE 2 \"vector_operand\" \"xBm,xm,vm,v\")))]\n   \"TARGET_SSE\"\n {\n   char buf[128];"}, {"sha": "ae4cb023d4019b816cdc9985ef4024b9ce69f920", "filename": "gcc/testsuite/gcc.target/i386/sse2-v1ti-andnot.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d4bbee4f59c7102f8ed9b6774f0b2d9f6ff4365/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-v1ti-andnot.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d4bbee4f59c7102f8ed9b6774f0b2d9f6ff4365/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-v1ti-andnot.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-v1ti-andnot.c?ref=6d4bbee4f59c7102f8ed9b6774f0b2d9f6ff4365", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O2 -msse2\" } */\n+\n+typedef __int128 v1ti __attribute__ ((__vector_size__ (16)));\n+\n+v1ti andnot1(v1ti x, v1ti y) { return ~x & y; }\n+v1ti andnot2(v1ti x, v1ti y) { return x & ~y; }\n+\n+/* { dg-final { scan-assembler-times \"pandn\" 2 } } */\n+/* { dg-final { scan-assembler-not \"pcmpeqd\" } } */\n+/* { dg-final { scan-assembler-not \"pxor\" } } */"}]}