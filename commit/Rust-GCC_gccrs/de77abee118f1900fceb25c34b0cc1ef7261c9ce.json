{"sha": "de77abee118f1900fceb25c34b0cc1ef7261c9ce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGU3N2FiZWUxMThmMTkwMGZjZWIyNWMzNGIwY2MxZWY3MjYxYzljZQ==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2020-10-30T12:11:49Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2020-10-31T17:10:10Z"}, "message": "libstdc++: Fix gnu-version-namespace buid\n\nCo-authored-by: Jonathan Wakely <jwakely@redhat.com>\n\nlibstdc++-v3/ChangeLog\n\n\t* src/c++17/floating_from_chars.cc (_GLIBCXX_USE_CX11_ABI): Add define.\n\t(buffering_string): New.\n\t[!_GLIBCXX_USE_CXX11_ABI](reserve_string): New.\n\t(from_chars): Adapt.\n\t* src/c++20/sstream-inst.cc: Limit instantiations to\n\t_GLIBCXX_USE_CXX11_ABI.", "tree": {"sha": "d44ff9355ab09c4bc031307912e49005e8709bcd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d44ff9355ab09c4bc031307912e49005e8709bcd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de77abee118f1900fceb25c34b0cc1ef7261c9ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de77abee118f1900fceb25c34b0cc1ef7261c9ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de77abee118f1900fceb25c34b0cc1ef7261c9ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de77abee118f1900fceb25c34b0cc1ef7261c9ce/comments", "author": null, "committer": null, "parents": [{"sha": "60d9f254876a00260992b2f37639ef4d82d9db8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60d9f254876a00260992b2f37639ef4d82d9db8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60d9f254876a00260992b2f37639ef4d82d9db8f"}], "stats": {"total": 54, "additions": 50, "deletions": 4}, "files": [{"sha": "c279809cf35d2f10743e2f79fe9b082dded9e319", "filename": "libstdc++-v3/src/c++17/floating_from_chars.cc", "status": "modified", "additions": 47, "deletions": 4, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de77abee118f1900fceb25c34b0cc1ef7261c9ce/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffloating_from_chars.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de77abee118f1900fceb25c34b0cc1ef7261c9ce/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffloating_from_chars.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffloating_from_chars.cc?ref=de77abee118f1900fceb25c34b0cc1ef7261c9ce", "patch": "@@ -27,6 +27,9 @@\n // 23.2.9  Primitive numeric input conversion [utility.from.chars]\n //\n \n+// Prefer to use std::pmr::string if possible, which requires the cxx11 ABI.\n+#define _GLIBCXX_USE_CXX11_ABI 1\n+\n #include <charconv>\n #include <string>\n #include <memory_resource>\n@@ -87,6 +90,12 @@ namespace\n     void* m_ptr = nullptr;\n   };\n \n+#if _GLIBCXX_USE_CXX11_ABI\n+  using buffered_string = std::pmr::string;\n+#else\n+  using buffered_string = std::string;\n+#endif\n+\n   inline bool valid_fmt(chars_format fmt)\n   {\n     return fmt != chars_format{}\n@@ -130,7 +139,7 @@ namespace\n   // Returns a nullptr if a valid pattern is not present.\n   const char*\n   pattern(const char* const first, const char* last,\n-\t  chars_format& fmt, pmr::string& buf)\n+\t  chars_format& fmt, buffered_string& buf)\n   {\n     // fmt has the value of one of the enumerators of chars_format.\n     __glibcxx_assert(valid_fmt(fmt));\n@@ -359,6 +368,22 @@ namespace\n     return result;\n   }\n \n+#if ! _GLIBCXX_USE_CXX11_ABI\n+  inline bool\n+  reserve_string(std::string& s) noexcept\n+  {\n+    __try\n+      {\n+\ts.reserve(buffer_resource::guaranteed_capacity());\n+      }\n+    __catch (const std::bad_alloc&)\n+      {\n+\treturn false;\n+      }\n+    return true;\n+  }\n+#endif\n+\n } // namespace\n \n // FIXME: This should be reimplemented so it doesn't use strtod and newlocale.\n@@ -369,10 +394,16 @@ from_chars_result\n from_chars(const char* first, const char* last, float& value,\n \t   chars_format fmt) noexcept\n {\n+  errc ec = errc::invalid_argument;\n+#if _GLIBCXX_USE_CXX11_ABI\n   buffer_resource mr;\n   pmr::string buf(&mr);\n+#else\n+  string buf;\n+  if (!reserve_string(buf))\n+    return make_result(first, 0, {}, ec);\n+#endif\n   size_t len = 0;\n-  errc ec = errc::invalid_argument;\n   __try\n     {\n       if (const char* pat = pattern(first, last, fmt, buf)) [[likely]]\n@@ -389,10 +420,16 @@ from_chars_result\n from_chars(const char* first, const char* last, double& value,\n \t   chars_format fmt) noexcept\n {\n+  errc ec = errc::invalid_argument;\n+#if _GLIBCXX_USE_CXX11_ABI\n   buffer_resource mr;\n   pmr::string buf(&mr);\n+#else\n+  string buf;\n+  if (!reserve_string(buf))\n+    return make_result(first, 0, {}, ec);\n+#endif\n   size_t len = 0;\n-  errc ec = errc::invalid_argument;\n   __try\n     {\n       if (const char* pat = pattern(first, last, fmt, buf)) [[likely]]\n@@ -409,10 +446,16 @@ from_chars_result\n from_chars(const char* first, const char* last, long double& value,\n \t   chars_format fmt) noexcept\n {\n+  errc ec = errc::invalid_argument;\n+#if _GLIBCXX_USE_CXX11_ABI\n   buffer_resource mr;\n   pmr::string buf(&mr);\n+#else\n+  string buf;\n+  if (!reserve_string(buf))\n+    return make_result(first, 0, {}, ec);\n+#endif\n   size_t len = 0;\n-  errc ec = errc::invalid_argument;\n   __try\n     {\n       if (const char* pat = pattern(first, last, fmt, buf)) [[likely]]"}, {"sha": "8c6840115c507c3b12f80157832be9788e0b3aab", "filename": "libstdc++-v3/src/c++20/sstream-inst.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de77abee118f1900fceb25c34b0cc1ef7261c9ce/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B20%2Fsstream-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de77abee118f1900fceb25c34b0cc1ef7261c9ce/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B20%2Fsstream-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B20%2Fsstream-inst.cc?ref=de77abee118f1900fceb25c34b0cc1ef7261c9ce", "patch": "@@ -29,6 +29,7 @@\n // Instantiations in this file are only for the new SSO std::string ABI\n #include <sstream>\n \n+#if _GLIBCXX_USE_CXX11_ABI\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n@@ -106,3 +107,5 @@ basic_stringstream<wchar_t>::view() const noexcept;\n \n _GLIBCXX_END_NAMESPACE_VERSION\n }\n+\n+#endif //_GLIBCXX_USE_CXX11_ABI"}]}