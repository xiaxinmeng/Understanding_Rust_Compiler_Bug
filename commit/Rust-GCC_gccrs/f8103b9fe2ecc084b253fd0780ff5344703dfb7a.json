{"sha": "f8103b9fe2ecc084b253fd0780ff5344703dfb7a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjgxMDNiOWZlMmVjYzA4NGIyNTNmZDA3ODBmZjUzNDQ3MDNkZmI3YQ==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2005-06-10T17:04:09Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2005-06-10T17:04:09Z"}, "message": "re PR middle-end/17961 (ICE for operation on small vector with altivec enabled)\n\n\tPR 17961\n\t* config/rs6000/sysv4.h (ROUND_TYPE_ALIGN): Remove.\n\t* config/rs6000/linux64.h (ROUND_TYPE_ALIGN): Remove vector check.\n\t* testsuite/gcc.dg/simd-3.c: New.\n\nFrom-SVN: r100820", "tree": {"sha": "1c76d480cf003fe98dfb32f105e6b4012ed54b2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c76d480cf003fe98dfb32f105e6b4012ed54b2e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f8103b9fe2ecc084b253fd0780ff5344703dfb7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8103b9fe2ecc084b253fd0780ff5344703dfb7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8103b9fe2ecc084b253fd0780ff5344703dfb7a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8103b9fe2ecc084b253fd0780ff5344703dfb7a/comments", "author": null, "committer": null, "parents": [{"sha": "4a96e5c3cd07bf5b4860fdb55510682f9d708e71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a96e5c3cd07bf5b4860fdb55510682f9d708e71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a96e5c3cd07bf5b4860fdb55510682f9d708e71"}], "stats": {"total": 37, "additions": 21, "deletions": 16}, "files": [{"sha": "18c2db941c5c945e5b073d633b9852efa181419d", "filename": "gcc/config/rs6000/linux64.h", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8103b9fe2ecc084b253fd0780ff5344703dfb7a/gcc%2Fconfig%2Frs6000%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8103b9fe2ecc084b253fd0780ff5344703dfb7a/gcc%2Fconfig%2Frs6000%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinux64.h?ref=f8103b9fe2ecc084b253fd0780ff5344703dfb7a", "patch": "@@ -228,13 +228,11 @@ extern int dot_symbols;\n    the first field is an FP double, only if in power alignment mode.  */\n #undef  ROUND_TYPE_ALIGN\n #define ROUND_TYPE_ALIGN(STRUCT, COMPUTED, SPECIFIED)\t\t\t\\\n-  ((TARGET_ALTIVEC && TREE_CODE (STRUCT) == VECTOR_TYPE)\t\t\\\n-   ? MAX (MAX ((COMPUTED), (SPECIFIED)), 128)\t\t\t\t\\\n-   : (TARGET_64BIT\t\t\t\t\t\t\t\\\n-      && (TREE_CODE (STRUCT) == RECORD_TYPE\t\t\t\t\\\n-\t  || TREE_CODE (STRUCT) == UNION_TYPE\t\t\t\t\\\n-\t  || TREE_CODE (STRUCT) == QUAL_UNION_TYPE)\t\t\t\\\n-      && TARGET_ALIGN_NATURAL == 0)\t\t\t\t\t\\\n+  ((TARGET_64BIT\t\t\t\t\t\t\t\\\n+    && (TREE_CODE (STRUCT) == RECORD_TYPE\t\t\t\t\\\n+\t|| TREE_CODE (STRUCT) == UNION_TYPE\t\t\t\t\\\n+\t|| TREE_CODE (STRUCT) == QUAL_UNION_TYPE)\t\t\t\\\n+    && TARGET_ALIGN_NATURAL == 0)\t\t\t\t\t\\\n    ? rs6000_special_round_type_align (STRUCT, COMPUTED, SPECIFIED)\t\\\n    : MAX ((COMPUTED), (SPECIFIED)))\n "}, {"sha": "d18607e3ceb12b4523fd4a8d2d12c7d4745dc185", "filename": "gcc/config/rs6000/sysv4.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8103b9fe2ecc084b253fd0780ff5344703dfb7a/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8103b9fe2ecc084b253fd0780ff5344703dfb7a/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.h?ref=f8103b9fe2ecc084b253fd0780ff5344703dfb7a", "patch": "@@ -335,15 +335,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n \t((TARGET_ALTIVEC && TREE_CODE (TREE_TYPE (FIELD)) == VECTOR_TYPE)     \\\n \t ? 128 : COMPUTED)\n \n-/* Define this macro as an expression for the alignment of a type\n-   (given by TYPE as a tree node) if the alignment computed in the\n-   usual way is COMPUTED and the alignment explicitly specified was\n-   SPECIFIED.  */\n-#define ROUND_TYPE_ALIGN(TYPE, COMPUTED, SPECIFIED)\t\t\t\\\n-\t((TARGET_ALTIVEC  && TREE_CODE (TYPE) == VECTOR_TYPE)\t\t\\\n-\t ? MAX (MAX ((COMPUTED), (SPECIFIED)), 128)\t\t\t\\\n-\t : MAX (COMPUTED, SPECIFIED))\n-\n #undef  BIGGEST_FIELD_ALIGNMENT\n \n /* Use ELF style section commands.  */"}, {"sha": "34ad75d960247cd1d422292cd8456cc898c8cc07", "filename": "gcc/testsuite/gcc.dg/simd-3.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8103b9fe2ecc084b253fd0780ff5344703dfb7a/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8103b9fe2ecc084b253fd0780ff5344703dfb7a/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-3.c?ref=f8103b9fe2ecc084b253fd0780ff5344703dfb7a", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-maltivec\" { target powerpc-*-* } } */\n+\n+__attribute__ ((vector_size (2))) signed char v1, v2, v3;\n+void\n+one (void)\n+{\n+  v1 = v2 + v3;\n+}\n+\n+__attribute__ ((vector_size (8))) signed char v4, v5, v6;\n+void\n+two (void)\n+{\n+  v4 = v5 + v6;\n+}"}]}