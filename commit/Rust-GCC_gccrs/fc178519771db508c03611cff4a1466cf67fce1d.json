{"sha": "fc178519771db508c03611cff4a1466cf67fce1d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmMxNzg1MTk3NzFkYjUwOGMwMzYxMWNmZjRhMTQ2NmNmNjdmY2UxZA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-05-06T02:25:45Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-05-07T16:09:38Z"}, "message": "c++: avoid non-TARGET_EXPR class prvalues\n\nAround PR98469 I asked Jakub to wrap a class BIT_CAST_EXPR in TARGET_EXPR;\nSPACESHIP_EXPR needs the same thing.  The dummy CAST_EXPR created in\ncan_convert is another instance of a non-TARGET_EXPR prvalue, so let's use\nthe declval-like build_stub_object there instead.\n\ngcc/cp/ChangeLog:\n\n\t* cp-tree.h (build_stub_object): Declare.\n\t* method.c (build_stub_object): No longer static.\n\t* call.c (can_convert): Use it.\n\t* tree.c (build_dummy_object): Adjust comment.\n\t* typeck.c (cp_build_binary_op): Wrap SPACESHIP_EXPR in a\n\tTARGET_EXPR.", "tree": {"sha": "f89f6573fcc112ba773d574c5b9fe38a0f767e1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f89f6573fcc112ba773d574c5b9fe38a0f767e1a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc178519771db508c03611cff4a1466cf67fce1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc178519771db508c03611cff4a1466cf67fce1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc178519771db508c03611cff4a1466cf67fce1d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc178519771db508c03611cff4a1466cf67fce1d/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14ed21f8749ae359690d9c4a69ca38cc45d0d1b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14ed21f8749ae359690d9c4a69ca38cc45d0d1b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14ed21f8749ae359690d9c4a69ca38cc45d0d1b0"}], "stats": {"total": 10, "additions": 7, "deletions": 3}, "files": [{"sha": "d985e4e8eda95b6545acb9733b3861cbc1825032", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc178519771db508c03611cff4a1466cf67fce1d/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc178519771db508c03611cff4a1466cf67fce1d/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=fc178519771db508c03611cff4a1466cf67fce1d", "patch": "@@ -12177,7 +12177,7 @@ can_convert (tree to, tree from, tsubst_flags_t complain)\n   /* implicit_conversion only considers user-defined conversions\n      if it has an expression for the call argument list.  */\n   if (CLASS_TYPE_P (from) || CLASS_TYPE_P (to))\n-    arg = build1 (CAST_EXPR, from, NULL_TREE);\n+    arg = build_stub_object (from);\n   return can_convert_arg (to, from, arg, LOOKUP_IMPLICIT, complain);\n }\n "}, {"sha": "122dadf976fd7d4738eb11cb198aa206bcadc484", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc178519771db508c03611cff4a1466cf67fce1d/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc178519771db508c03611cff4a1466cf67fce1d/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=fc178519771db508c03611cff4a1466cf67fce1d", "patch": "@@ -6968,6 +6968,7 @@ extern tree get_copy_ctor\t\t\t(tree, tsubst_flags_t);\n extern tree get_copy_assign\t\t\t(tree);\n extern tree get_default_ctor\t\t\t(tree);\n extern tree get_dtor\t\t\t\t(tree, tsubst_flags_t);\n+extern tree build_stub_object\t\t\t(tree);\n extern tree strip_inheriting_ctors\t\t(tree);\n extern tree inherited_ctor_binfo\t\t(tree);\n extern bool base_ctor_omit_inherited_parms\t(tree);"}, {"sha": "f8c9456d7204a1c5ef49e2ed83c1982941ad88c1", "filename": "gcc/cp/method.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc178519771db508c03611cff4a1466cf67fce1d/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc178519771db508c03611cff4a1466cf67fce1d/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=fc178519771db508c03611cff4a1466cf67fce1d", "patch": "@@ -1793,7 +1793,7 @@ build_stub_type (tree type, int quals, bool rvalue)\n /* Build a dummy glvalue from dereferencing a dummy reference of type\n    REFTYPE.  */\n \n-static tree\n+tree\n build_stub_object (tree reftype)\n {\n   if (!TYPE_REF_P (reftype))"}, {"sha": "4ccd7a314f523a991aa62235b37c47bd3fa7d277", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc178519771db508c03611cff4a1466cf67fce1d/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc178519771db508c03611cff4a1466cf67fce1d/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=fc178519771db508c03611cff4a1466cf67fce1d", "patch": "@@ -4175,7 +4175,8 @@ member_p (const_tree decl)\n }\n \n /* Create a placeholder for member access where we don't actually have an\n-   object that the access is against.  */\n+   object that the access is against.  For a general declval<T> equivalent,\n+   use build_stub_object instead.  */\n \n tree\n build_dummy_object (tree type)"}, {"sha": "5af47ce89a94f288b2a3dfded8f2ab6338d3767c", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc178519771db508c03611cff4a1466cf67fce1d/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc178519771db508c03611cff4a1466cf67fce1d/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=fc178519771db508c03611cff4a1466cf67fce1d", "patch": "@@ -5931,6 +5931,8 @@ cp_build_binary_op (const op_location_t &location,\n \n   if (!processing_template_decl)\n     {\n+      if (resultcode == SPACESHIP_EXPR)\n+\tresult = get_target_expr_sfinae (result, complain);\n       op0 = cp_fully_fold (op0);\n       /* Only consider the second argument if the first isn't overflowed.  */\n       if (!CONSTANT_CLASS_P (op0) || TREE_OVERFLOW_P (op0))"}]}