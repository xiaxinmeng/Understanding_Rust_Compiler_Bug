{"sha": "a9fee7cdc3c62d0e51730b6a9814909c557d3070", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTlmZWU3Y2RjM2M2MmQwZTUxNzMwYjZhOTgxNDkwOWM1NTdkMzA3MA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-03-14T14:50:40Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-03-14T14:50:40Z"}, "message": "re PR tree-optimization/56365 (Missed opportunities for smin/smax standard name patterns when compiling as C++)\n\n2016-03-14  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/56365\n\t* tree-ssa-phiopt.c (minmax_replacement): Handle alternate\n\tconstants to compare against.\n\n\t* gcc.dg/tree-ssa/phi-opt-14.c: New testcase.\n\nFrom-SVN: r234183", "tree": {"sha": "a213ec82574fdef415b804c92dfbd8051ee07fe2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a213ec82574fdef415b804c92dfbd8051ee07fe2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a9fee7cdc3c62d0e51730b6a9814909c557d3070", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9fee7cdc3c62d0e51730b6a9814909c557d3070", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9fee7cdc3c62d0e51730b6a9814909c557d3070", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9fee7cdc3c62d0e51730b6a9814909c557d3070/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4799603f1a0efdb385cc42268f8b379eb9240771", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4799603f1a0efdb385cc42268f8b379eb9240771", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4799603f1a0efdb385cc42268f8b379eb9240771"}], "stats": {"total": 150, "additions": 135, "deletions": 15}, "files": [{"sha": "68224f94618e214899cc65e40c408ffb6af90196", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9fee7cdc3c62d0e51730b6a9814909c557d3070/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9fee7cdc3c62d0e51730b6a9814909c557d3070/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a9fee7cdc3c62d0e51730b6a9814909c557d3070", "patch": "@@ -1,3 +1,9 @@\n+2016-03-14  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/56365\n+\t* tree-ssa-phiopt.c (minmax_replacement): Handle alternate\n+\tconstants to compare against.\n+\n 2016-03-14  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \tPR target/70098"}, {"sha": "54e063eb3c3d62fe87e8134b65a532bb7f6f7bbd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9fee7cdc3c62d0e51730b6a9814909c557d3070/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9fee7cdc3c62d0e51730b6a9814909c557d3070/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a9fee7cdc3c62d0e51730b6a9814909c557d3070", "patch": "@@ -1,3 +1,8 @@\n+2016-03-14  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/56365\n+\t* gcc.dg/tree-ssa/phi-opt-14.c: New testcase.\n+\n 2016-03-14  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \tPR target/70098"}, {"sha": "67fb4e9e889cdbf4beac5137c77228d5f1a58f5d", "filename": "gcc/testsuite/gcc.dg/tree-ssa/phi-opt-14.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9fee7cdc3c62d0e51730b6a9814909c557d3070/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fphi-opt-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9fee7cdc3c62d0e51730b6a9814909c557d3070/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fphi-opt-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fphi-opt-14.c?ref=a9fee7cdc3c62d0e51730b6a9814909c557d3070", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-phiopt1\" } */\n+\n+int test_01 (int a)\n+{\n+  if (127 <= a)\n+    a = 127;\n+  else if (a <= -128)\n+    a = -128;\n+  return a;\n+}\n+int test_02 (int a)\n+{\n+  if (127 < a)\n+    a = 127;\n+  else if (a <= -128)\n+    a = -128;\n+  return a;\n+}\n+int test_03 (int a)\n+{\n+  if (127 <= a)\n+    a = 127;\n+  else if (a < -128)\n+    a = -128;\n+  return a;\n+}\n+int test_04 (int a)\n+{\n+  if (127 < a)\n+    a = 127;\n+  else if (a < -128)\n+    a = -128;\n+  return a;\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"if\" \"phiopt1\" } } */"}, {"sha": "a752fe0fd1c216016c30945ee32374e6f68f4c31", "filename": "gcc/tree-ssa-phiopt.c", "status": "modified", "additions": 87, "deletions": 15, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9fee7cdc3c62d0e51730b6a9814909c557d3070/gcc%2Ftree-ssa-phiopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9fee7cdc3c62d0e51730b6a9814909c557d3070/gcc%2Ftree-ssa-phiopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.c?ref=a9fee7cdc3c62d0e51730b6a9814909c557d3070", "patch": "@@ -1045,7 +1045,7 @@ minmax_replacement (basic_block cond_bb, basic_block middle_bb,\n   gassign *new_stmt;\n   edge true_edge, false_edge;\n   enum tree_code cmp, minmax, ass_code;\n-  tree smaller, larger, arg_true, arg_false;\n+  tree smaller, alt_smaller, larger, alt_larger, arg_true, arg_false;\n   gimple_stmt_iterator gsi, gsi_from;\n \n   type = TREE_TYPE (PHI_RESULT (phi));\n@@ -1059,15 +1059,59 @@ minmax_replacement (basic_block cond_bb, basic_block middle_bb,\n \n   /* This transformation is only valid for order comparisons.  Record which\n      operand is smaller/larger if the result of the comparison is true.  */\n+  alt_smaller = NULL_TREE;\n+  alt_larger = NULL_TREE;\n   if (cmp == LT_EXPR || cmp == LE_EXPR)\n     {\n       smaller = gimple_cond_lhs (cond);\n       larger = gimple_cond_rhs (cond);\n+      /* If we have smaller < CST it is equivalent to smaller <= CST-1.\n+\t Likewise smaller <= CST is equivalent to smaller < CST+1.  */\n+      if (TREE_CODE (larger) == INTEGER_CST)\n+\t{\n+\t  if (cmp == LT_EXPR)\n+\t    {\n+\t      bool overflow;\n+\t      wide_int alt = wi::sub (larger, 1, TYPE_SIGN (TREE_TYPE (larger)),\n+\t\t\t\t      &overflow);\n+\t      if (! overflow)\n+\t\talt_larger = wide_int_to_tree (TREE_TYPE (larger), alt);\n+\t    }\n+\t  else\n+\t    {\n+\t      bool overflow;\n+\t      wide_int alt = wi::add (larger, 1, TYPE_SIGN (TREE_TYPE (larger)),\n+\t\t\t\t      &overflow);\n+\t      if (! overflow)\n+\t\talt_larger = wide_int_to_tree (TREE_TYPE (larger), alt);\n+\t    }\n+\t}\n     }\n   else if (cmp == GT_EXPR || cmp == GE_EXPR)\n     {\n       smaller = gimple_cond_rhs (cond);\n       larger = gimple_cond_lhs (cond);\n+      /* If we have larger > CST it is equivalent to larger >= CST+1.\n+\t Likewise larger >= CST is equivalent to larger > CST-1.  */\n+      if (TREE_CODE (smaller) == INTEGER_CST)\n+\t{\n+\t  if (cmp == GT_EXPR)\n+\t    {\n+\t      bool overflow;\n+\t      wide_int alt = wi::add (smaller, 1, TYPE_SIGN (TREE_TYPE (smaller)),\n+\t\t\t\t      &overflow);\n+\t      if (! overflow)\n+\t\talt_smaller = wide_int_to_tree (TREE_TYPE (smaller), alt);\n+\t    }\n+\t  else\n+\t    {\n+\t      bool overflow;\n+\t      wide_int alt = wi::sub (smaller, 1, TYPE_SIGN (TREE_TYPE (smaller)),\n+\t\t\t\t      &overflow);\n+\t      if (! overflow)\n+\t\talt_smaller = wide_int_to_tree (TREE_TYPE (smaller), alt);\n+\t    }\n+\t}\n     }\n   else\n     return false;\n@@ -1098,8 +1142,12 @@ minmax_replacement (basic_block cond_bb, basic_block middle_bb,\n \n   if (empty_block_p (middle_bb))\n     {\n-      if (operand_equal_for_phi_arg_p (arg_true, smaller)\n-\t  && operand_equal_for_phi_arg_p (arg_false, larger))\n+      if ((operand_equal_for_phi_arg_p (arg_true, smaller)\n+\t   || (alt_smaller\n+\t       && operand_equal_for_phi_arg_p (arg_true, alt_smaller)))\n+\t  && (operand_equal_for_phi_arg_p (arg_false, larger)\n+\t      || (alt_larger\n+\t\t  && operand_equal_for_phi_arg_p (arg_true, alt_larger))))\n \t{\n \t  /* Case\n \n@@ -1109,8 +1157,12 @@ minmax_replacement (basic_block cond_bb, basic_block middle_bb,\n \t     rslt = larger;  */\n \t  minmax = MIN_EXPR;\n \t}\n-      else if (operand_equal_for_phi_arg_p (arg_false, smaller)\n-\t       && operand_equal_for_phi_arg_p (arg_true, larger))\n+      else if ((operand_equal_for_phi_arg_p (arg_false, smaller)\n+\t\t|| (alt_smaller\n+\t\t    && operand_equal_for_phi_arg_p (arg_false, alt_smaller)))\n+\t       && (operand_equal_for_phi_arg_p (arg_true, larger)\n+\t\t   || (alt_larger\n+\t\t       && operand_equal_for_phi_arg_p (arg_true, alt_larger))))\n \tminmax = MAX_EXPR;\n       else\n \treturn false;\n@@ -1148,7 +1200,9 @@ minmax_replacement (basic_block cond_bb, basic_block middle_bb,\n \t  if (!operand_equal_for_phi_arg_p (lhs, arg_true))\n \t    return false;\n \n-\t  if (operand_equal_for_phi_arg_p (arg_false, larger))\n+\t  if (operand_equal_for_phi_arg_p (arg_false, larger)\n+\t      || (alt_larger\n+\t\t  && operand_equal_for_phi_arg_p (arg_false, alt_larger)))\n \t    {\n \t      /* Case\n \n@@ -1161,9 +1215,13 @@ minmax_replacement (basic_block cond_bb, basic_block middle_bb,\n \t\treturn false;\n \n \t      minmax = MIN_EXPR;\n-\t      if (operand_equal_for_phi_arg_p (op0, smaller))\n+\t      if (operand_equal_for_phi_arg_p (op0, smaller)\n+\t\t  || (alt_smaller\n+\t\t      && operand_equal_for_phi_arg_p (op0, alt_smaller)))\n \t\tbound = op1;\n-\t      else if (operand_equal_for_phi_arg_p (op1, smaller))\n+\t      else if (operand_equal_for_phi_arg_p (op1, smaller)\n+\t\t       || (alt_smaller\n+\t\t\t   && operand_equal_for_phi_arg_p (op1, alt_smaller)))\n \t\tbound = op0;\n \t      else\n \t\treturn false;\n@@ -1173,7 +1231,9 @@ minmax_replacement (basic_block cond_bb, basic_block middle_bb,\n \t\t\t\t\t\t  bound, larger)))\n \t\treturn false;\n \t    }\n-\t  else if (operand_equal_for_phi_arg_p (arg_false, smaller))\n+\t  else if (operand_equal_for_phi_arg_p (arg_false, smaller)\n+\t\t   || (alt_smaller\n+\t\t       && operand_equal_for_phi_arg_p (arg_false, alt_smaller)))\n \t    {\n \t      /* Case\n \n@@ -1186,9 +1246,13 @@ minmax_replacement (basic_block cond_bb, basic_block middle_bb,\n \t\treturn false;\n \n \t      minmax = MAX_EXPR;\n-\t      if (operand_equal_for_phi_arg_p (op0, larger))\n+\t      if (operand_equal_for_phi_arg_p (op0, larger)\n+\t\t  || (alt_larger\n+\t\t      && operand_equal_for_phi_arg_p (op0, alt_larger)))\n \t\tbound = op1;\n-\t      else if (operand_equal_for_phi_arg_p (op1, larger))\n+\t      else if (operand_equal_for_phi_arg_p (op1, larger)\n+\t\t       || (alt_larger\n+\t\t\t   && operand_equal_for_phi_arg_p (op1, alt_larger)))\n \t\tbound = op0;\n \t      else\n \t\treturn false;\n@@ -1207,7 +1271,9 @@ minmax_replacement (basic_block cond_bb, basic_block middle_bb,\n \t  if (!operand_equal_for_phi_arg_p (lhs, arg_false))\n \t    return false;\n \n-\t  if (operand_equal_for_phi_arg_p (arg_true, larger))\n+\t  if (operand_equal_for_phi_arg_p (arg_true, larger)\n+\t      || (alt_larger\n+\t\t  && operand_equal_for_phi_arg_p (arg_true, alt_larger)))\n \t    {\n \t      /* Case\n \n@@ -1220,9 +1286,13 @@ minmax_replacement (basic_block cond_bb, basic_block middle_bb,\n \t\treturn false;\n \n \t      minmax = MAX_EXPR;\n-\t      if (operand_equal_for_phi_arg_p (op0, smaller))\n+\t      if (operand_equal_for_phi_arg_p (op0, smaller)\n+\t\t  || (alt_smaller\n+\t\t      && operand_equal_for_phi_arg_p (op0, alt_smaller)))\n \t\tbound = op1;\n-\t      else if (operand_equal_for_phi_arg_p (op1, smaller))\n+\t      else if (operand_equal_for_phi_arg_p (op1, smaller)\n+\t\t       || (alt_smaller\n+\t\t\t   && operand_equal_for_phi_arg_p (op1, alt_smaller)))\n \t\tbound = op0;\n \t      else\n \t\treturn false;\n@@ -1232,7 +1302,9 @@ minmax_replacement (basic_block cond_bb, basic_block middle_bb,\n \t\t\t\t\t\t  bound, larger)))\n \t\treturn false;\n \t    }\n-\t  else if (operand_equal_for_phi_arg_p (arg_true, smaller))\n+\t  else if (operand_equal_for_phi_arg_p (arg_true, smaller)\n+\t\t   || (alt_smaller\n+\t\t       && operand_equal_for_phi_arg_p (arg_true, alt_smaller)))\n \t    {\n \t      /* Case\n "}]}