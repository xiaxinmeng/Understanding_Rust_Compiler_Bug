{"sha": "ee1326921d7cb8645bed87b2d9b71f1f74eb6605", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWUxMzI2OTIxZDdjYjg2NDViZWQ4N2IyZDliNzFmMWY3NGViNjYwNQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-11-19T08:17:21Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-11-19T08:17:21Z"}, "message": "PR 68393: Handle SUBREG_PROMOTED_VAR_P in expand_direct_optab_fn\n\nDo the usual dance when assigning to SUBREG_PROMOTED_VAR_P destinations:\nfirst convert to the outer mode, then extend to the inner mode.\n\nTested that it fixes the powerpc64le-linux-gnu breakage.  Also tested\non x86_64-linux-gnu and powerpc64-linux-gnu.\n\ngcc/\n\tPR bootstrap/68393\n\t* internal-fn.c (expand_direct_optab_fn): Handle SUBREG_PROMOTED_VAR_P\n\tdestinations.\n\nFrom-SVN: r230590", "tree": {"sha": "5c6549eb554dd14ad1e4a4f1834c2aeeb51136d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c6549eb554dd14ad1e4a4f1834c2aeeb51136d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee1326921d7cb8645bed87b2d9b71f1f74eb6605", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee1326921d7cb8645bed87b2d9b71f1f74eb6605", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee1326921d7cb8645bed87b2d9b71f1f74eb6605", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee1326921d7cb8645bed87b2d9b71f1f74eb6605/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d0eccfcdc30257a23ce82041a035626350fa421f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0eccfcdc30257a23ce82041a035626350fa421f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0eccfcdc30257a23ce82041a035626350fa421f"}], "stats": {"total": 36, "additions": 29, "deletions": 7}, "files": [{"sha": "f37ad250cb4913dcdf8c6ee6565645786502b2a9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee1326921d7cb8645bed87b2d9b71f1f74eb6605/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee1326921d7cb8645bed87b2d9b71f1f74eb6605/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ee1326921d7cb8645bed87b2d9b71f1f74eb6605", "patch": "@@ -1,3 +1,9 @@\n+2015-11-19  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR bootstrap/68393\n+\t* internal-fn.c (expand_direct_optab_fn): Handle SUBREG_PROMOTED_VAR_P\n+\tdestinations.\n+\n 2015-11-18  Jeff Law  <law@redhat.com>\n \n \tPR tree-optimization/68198"}, {"sha": "bc77bdc3b55e96401a72400d01f2510e55705362", "filename": "gcc/internal-fn.c", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee1326921d7cb8645bed87b2d9b71f1f74eb6605/gcc%2Finternal-fn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee1326921d7cb8645bed87b2d9b71f1f74eb6605/gcc%2Finternal-fn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.c?ref=ee1326921d7cb8645bed87b2d9b71f1f74eb6605", "patch": "@@ -2124,14 +2124,30 @@ expand_direct_optab_fn (internal_fn fn, gcall *stmt, direct_optab optab,\n   expand_insn (icode, nargs + 1, ops);\n   if (!rtx_equal_p (lhs_rtx, ops[0].value))\n     {\n-      if (INTEGRAL_TYPE_P (lhs_type))\n-\t/* Convert the operand to the required type, which is useful\n-\t   for things that return an int regardless of the size of\n-\t   the input.  If the value produced by the instruction is\n-\t   smaller than required, assume that it is signed.  */\n-\tconvert_move (lhs_rtx, ops[0].value, 0);\n-      else\n+      /* If the return value has an integral type, convert the instruction\n+\t result to that type.  This is useful for things that return an\n+\t int regardless of the size of the input.  If the instruction result\n+\t is smaller than required, assume that it is signed.\n+\n+\t If the return value has a nonintegral type, its mode must match\n+\t the instruction result.  */\n+      if (GET_CODE (lhs_rtx) == SUBREG && SUBREG_PROMOTED_VAR_P (lhs_rtx))\n+\t{\n+\t  /* If this is a scalar in a register that is stored in a wider\n+\t     mode than the declared mode, compute the result into its\n+\t     declared mode and then convert to the wider mode.  */\n+\t  gcc_checking_assert (INTEGRAL_TYPE_P (lhs_type));\n+\t  rtx tmp = convert_to_mode (GET_MODE (lhs_rtx), ops[0].value, 0);\n+\t  convert_move (SUBREG_REG (lhs_rtx), tmp,\n+\t\t\tSUBREG_PROMOTED_SIGN (lhs_rtx));\n+\t}\n+      else if (GET_MODE (lhs_rtx) == GET_MODE (ops[0].value))\n \temit_move_insn (lhs_rtx, ops[0].value);\n+      else\n+\t{\n+\t  gcc_checking_assert (INTEGRAL_TYPE_P (lhs_type));\n+\t  convert_move (lhs_rtx, ops[0].value, 0);\n+\t}\n     }\n }\n "}]}