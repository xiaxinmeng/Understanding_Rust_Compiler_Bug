{"sha": "a1d7a124b9f3940943890c6d1da2b0d2b5219f7e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTFkN2ExMjRiOWYzOTQwOTQzODkwYzZkMWRhMmIwZDJiNTIxOWY3ZQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2013-12-04T11:11:56Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2013-12-04T11:11:56Z"}, "message": "trans.c (Case_Statement_to_gnu): Do not push a binding level for each branch if...\n\n\t* gcc-interface/trans.c (Case_Statement_to_gnu): Do not push a binding\n\tlevel for each branch if this is a case expression in Ada 2012.\n\t(gnat_to_gnu) <case N_Expression_With_Actions>: Adjust comment.\n\nFrom-SVN: r205662", "tree": {"sha": "a9c83bb498c53c5a70e1f2b28addca926c4699b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9c83bb498c53c5a70e1f2b28addca926c4699b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a1d7a124b9f3940943890c6d1da2b0d2b5219f7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1d7a124b9f3940943890c6d1da2b0d2b5219f7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1d7a124b9f3940943890c6d1da2b0d2b5219f7e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1d7a124b9f3940943890c6d1da2b0d2b5219f7e/comments", "author": null, "committer": null, "parents": [{"sha": "f220a4f4e556777fdfbca7b41cda3f234a2507da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f220a4f4e556777fdfbca7b41cda3f234a2507da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f220a4f4e556777fdfbca7b41cda3f234a2507da"}], "stats": {"total": 23, "additions": 17, "deletions": 6}, "files": [{"sha": "504f358a782944cbb7ec7f9c378a1f09ee32d08a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1d7a124b9f3940943890c6d1da2b0d2b5219f7e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1d7a124b9f3940943890c6d1da2b0d2b5219f7e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a1d7a124b9f3940943890c6d1da2b0d2b5219f7e", "patch": "@@ -1,3 +1,9 @@\n+2013-12-04  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.c (Case_Statement_to_gnu): Do not push a binding\n+\tlevel for each branch if this is a case expression in Ada 2012.\n+\t(gnat_to_gnu) <case N_Expression_With_Actions>: Adjust comment.\n+\n 2013-11-29  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR ada/54040"}, {"sha": "2eae39976d86613410e7b7343676b093ece987c1", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1d7a124b9f3940943890c6d1da2b0d2b5219f7e/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1d7a124b9f3940943890c6d1da2b0d2b5219f7e/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=a1d7a124b9f3940943890c6d1da2b0d2b5219f7e", "patch": "@@ -2348,12 +2348,17 @@ Case_Statement_to_gnu (Node_Id gnat_node)\n \t    }\n \t}\n \n-      /* Push a binding level here in case variables are declared as we want\n-\t them to be local to this set of statements instead of to the block\n-\t containing the Case statement.  */\n+      /* This construct doesn't define a scope so we shouldn't push a binding\n+\t level around the statement list.  Except that we have always done so\n+\t historically and this makes it possible to reduce stack usage.  As a\n+\t compromise, we keep doing it for case statements, for which this has\n+\t never been problematic, but not for case expressions in Ada 2012.  */\n       if (choices_added_p)\n \t{\n-\t  tree group = build_stmt_group (Statements (gnat_when), true);\n+\t  const bool is_case_expression\n+\t    = (Nkind (Parent (gnat_node)) == N_Expression_With_Actions);\n+\t  tree group\n+\t    = build_stmt_group (Statements (gnat_when), !is_case_expression);\n \t  bool group_may_fallthru = block_may_fallthru (group);\n \t  add_stmt (group);\n \t  if (group_may_fallthru)\n@@ -7002,8 +7007,8 @@ gnat_to_gnu (Node_Id gnat_node)\n     /****************/\n \n     case N_Expression_With_Actions:\n-      /* This construct doesn't define a scope so we don't wrap the statement\n-\t list in a BIND_EXPR; however, we wrap it in a SAVE_EXPR to protect it\n+      /* This construct doesn't define a scope so we don't push a binding level\n+\t around the statement list; but we wrap it in a SAVE_EXPR to protect it\n \t from unsharing.  */\n       gnu_result = build_stmt_group (Actions (gnat_node), false);\n       gnu_result = build1 (SAVE_EXPR, void_type_node, gnu_result);"}]}