{"sha": "e03f5d43cb6dd594512afa8ac72ebfe6af2eafc8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTAzZjVkNDNjYjZkZDU5NDUxMmFmYThhYzcyZWJmZTZhZjJlYWZjOA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@hxi.com", "date": "2002-01-03T05:04:34Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2002-01-03T05:04:34Z"}, "message": "avr.c: Fix comment typos.\n\n\t* config/avr/avr.c: Fix comment typos.\n\t* config/c4x/c4x.md: Likewise.\n\t* config/dsp16xx/dsp16xx.h: Likewise.\n\t* config/dsp16xx/dsp16xx.md: Likewise.\n\t* config/i386/i386.md: Likewise.\n\t* config/ia64/ia64.c: Likewise.\n\t* config/m32r/m32r.h: Likewise.\n\t* config/m68hc11/m68hc11.md: Likewise.\n\t* config/mmix/mmix.c: Likewise.\n\t* config/mn10200/mn10200.c: Likewise.\n\t* config/romp/romp.c: Likewise.\n\t* config/sh/sh.c: Likewise.\n\t* config/stormy16/stormy16.c: Likewise.\n\t* config/stormy16/stormy16.h: Likewise.\n\t* config/stormy16/stormy16.md: Likewise.\n\nFrom-SVN: r48496", "tree": {"sha": "40434786b34e76504e4467b48f16f5a4021ad0e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/40434786b34e76504e4467b48f16f5a4021ad0e3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e03f5d43cb6dd594512afa8ac72ebfe6af2eafc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e03f5d43cb6dd594512afa8ac72ebfe6af2eafc8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e03f5d43cb6dd594512afa8ac72ebfe6af2eafc8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e03f5d43cb6dd594512afa8ac72ebfe6af2eafc8/comments", "author": null, "committer": null, "parents": [{"sha": "fa4723baafa6b6b3fe210a730032437b42ec2637", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa4723baafa6b6b3fe210a730032437b42ec2637", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa4723baafa6b6b3fe210a730032437b42ec2637"}], "stats": {"total": 87, "additions": 54, "deletions": 33}, "files": [{"sha": "56343e149af86a8814e5ae8e4054fe12489d0451", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e03f5d43cb6dd594512afa8ac72ebfe6af2eafc8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e03f5d43cb6dd594512afa8ac72ebfe6af2eafc8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e03f5d43cb6dd594512afa8ac72ebfe6af2eafc8", "patch": "@@ -1,3 +1,21 @@\n+2002-01-03  Kazu Hirata  <kazu@hxi.com>\n+\n+\t* config/avr/avr.c: Fix comment typos.\n+\t* config/c4x/c4x.md: Likewise.\n+\t* config/dsp16xx/dsp16xx.h: Likewise.\n+\t* config/dsp16xx/dsp16xx.md: Likewise.\n+\t* config/i386/i386.md: Likewise.\n+\t* config/ia64/ia64.c: Likewise.\n+\t* config/m32r/m32r.h: Likewise.\n+\t* config/m68hc11/m68hc11.md: Likewise.\n+\t* config/mmix/mmix.c: Likewise.\n+\t* config/mn10200/mn10200.c: Likewise.\n+\t* config/romp/romp.c: Likewise.\n+\t* config/sh/sh.c: Likewise.\n+\t* config/stormy16/stormy16.c: Likewise.\n+\t* config/stormy16/stormy16.h: Likewise.\n+\t* config/stormy16/stormy16.md: Likewise.\n+\n 2002-01-03  Graham Stott  <grahams@redhat.com>\n \n \t* loop.h: Update copyright date."}, {"sha": "5d6e120626ea06f58c6bc014af9a31d08de6dfe9", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e03f5d43cb6dd594512afa8ac72ebfe6af2eafc8/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e03f5d43cb6dd594512afa8ac72ebfe6af2eafc8/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=e03f5d43cb6dd594512afa8ac72ebfe6af2eafc8", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines for insn-output.c for ATMEL AVR micro controllers\n-   Copyright (C) 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n    Contributed by Denis Chertykov (denisc@overta.ru)\n \n    This file is part of GNU CC.\n@@ -4397,7 +4397,7 @@ _reg_unused_after (insn, reg)\n \n       /* If this is a sequence, we must handle them all at once.\n \t We could have for instance a call that sets the target register,\n-\t and a insn in a delay slot that uses the register.  In this case,\n+\t and an insn in a delay slot that uses the register.  In this case,\n \t we must return 0.  */\n       else if (code == INSN && GET_CODE (PATTERN (insn)) == SEQUENCE)\n \t{"}, {"sha": "a280857cc03c5d5952650165d6cfb30ac6b23b69", "filename": "gcc/config/c4x/c4x.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e03f5d43cb6dd594512afa8ac72ebfe6af2eafc8/gcc%2Fconfig%2Fc4x%2Fc4x.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e03f5d43cb6dd594512afa8ac72ebfe6af2eafc8/gcc%2Fconfig%2Fc4x%2Fc4x.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.md?ref=e03f5d43cb6dd594512afa8ac72ebfe6af2eafc8", "patch": "@@ -1,6 +1,6 @@\n ;; Machine description for the TMS320C[34]x for GNU C compiler\n ;; Copyright (C) 1994, 1995, 1996, 1997, 1998,\n-;; 1999, 2000 Free Software Foundation, Inc.\n+;; 1999, 2000, 2002 Free Software Foundation, Inc.\n \n ;; Contributed by Michael Hayes (m.hayes@elec.canterbury.ac.nz)\n ;;            and Herman Ten Brugge (Haj.Ten.Brugge@net.HCC.nl)\n@@ -5702,7 +5702,7 @@\n ; BLOCK MOVE\n ; We should probably get RC loaded when using RPTB automagically...\n ; There's probably no need to call _memcpy() if we don't get\n-; a immediate operand for the size.  We could do a better job here\n+; an immediate operand for the size.  We could do a better job here\n ; than most memcpy() implementations.\n ; operand 2 is the number of bytes\n ; operand 3 is the shared alignment"}, {"sha": "10ab17d70b9dbef533c39e4b94a71c2ddf6a1cf3", "filename": "gcc/config/dsp16xx/dsp16xx.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e03f5d43cb6dd594512afa8ac72ebfe6af2eafc8/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e03f5d43cb6dd594512afa8ac72ebfe6af2eafc8/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h?ref=e03f5d43cb6dd594512afa8ac72ebfe6af2eafc8", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler.  AT&T DSP1600.\n-   Copyright (C) 1994, 1995, 1996, 1997, 1998, 2000, 2001\n+   Copyright (C) 1994, 1995, 1996, 1997, 1998, 2000, 2001, 2002\n    Free Software Foundation, Inc.\n    Contributed by Michael Collison (collison@isisinc.net).\n \n@@ -501,7 +501,7 @@ extern int target_flags;\n #define REG_YBASE30 56\n #define REG_YBASE31 57\n \n-/* Do we have a accumulator register? */\n+/* Do we have an accumulator register? */\n #define IS_ACCUM_REG(REGNO) IN_RANGE ((REGNO), REG_A0, REG_A1L)\n #define IS_ACCUM_LOW_REG(REGNO) ((REGNO) == REG_A0L || (REGNO) == REG_A1L)\n \n@@ -1035,7 +1035,7 @@ enum reg_class\n    'K' requires a constant 0 operand.\n    'L' constant for use in add or sub from low 16-bits\n    'M' 32-bit value -- low 16-bits zero\n-   'N' constant for use incrementing or decrementing a address register\n+   'N' constant for use incrementing or decrementing an address register\n    'O' constant for use with and'ing only high 16-bit\n    'P' constant for use with and'ing only low 16-bit\n  */"}, {"sha": "7cea24a1ac5f38c515791bc3b56b42570bf2087e", "filename": "gcc/config/dsp16xx/dsp16xx.md", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e03f5d43cb6dd594512afa8ac72ebfe6af2eafc8/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e03f5d43cb6dd594512afa8ac72ebfe6af2eafc8/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.md?ref=e03f5d43cb6dd594512afa8ac72ebfe6af2eafc8", "patch": "@@ -1,5 +1,6 @@\n ;;- Machine description for the AT&T DSP1600 for GNU C compiler\n-;;  Copyright (C) 1994, 1995, 1997, 1998, 2001 Free Software Foundation, Inc.\n+;;  Copyright (C) 1994, 1995, 1997, 1998, 2001, 2002\n+;;  Free Software Foundation, Inc.\n ;;  Contributed by Michael Collison (collison@isisinc.net).\n \n ;; This file is part of GNU CC.\n@@ -1436,7 +1437,7 @@\n }\")\n \n ;; The movqi pattern with the parallel is used for addqi insns (which have a parallel)\n-;; that are turned into moveqi insns by the flow phase. This happens when a auto-increment\n+;; that are turned into moveqi insns by the flow phase. This happens when an auto-increment\n ;; is detected.\n \n (define_insn \"match_movqi1\""}, {"sha": "6e61108b49ad4d70faf1606657a498ee13be574c", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e03f5d43cb6dd594512afa8ac72ebfe6af2eafc8/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e03f5d43cb6dd594512afa8ac72ebfe6af2eafc8/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=e03f5d43cb6dd594512afa8ac72ebfe6af2eafc8", "patch": "@@ -1,5 +1,5 @@\n ;; GCC machine description for IA-32 and x86-64.\n-;; Copyright (C) 1988, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001\n+;; Copyright (C) 1988, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002\n ;; Free Software Foundation, Inc.\n ;; Mostly by William Schelter.\n ;; x86_64 support added by Jan Hubicka\n@@ -2113,7 +2113,7 @@\n \t(match_operand:QI 1 \"general_operand\" \"\"))]\n   \"! TARGET_PARTIAL_REG_STALL\"\n {\n-  /* Don't generate memory->memory moves, go through a register */\n+  /* Don't generate memory->memory moves, go through a register.  */\n   if (GET_CODE (operands[0]) == MEM && GET_CODE (operands[1]) == MEM)\n     operands[1] = force_reg (QImode, operands[1]);\n })"}, {"sha": "414b803cbdaf2e81f570ec890450f75270871107", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e03f5d43cb6dd594512afa8ac72ebfe6af2eafc8/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e03f5d43cb6dd594512afa8ac72ebfe6af2eafc8/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=e03f5d43cb6dd594512afa8ac72ebfe6af2eafc8", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler.\n-   Copyright (C) 1999, 2000, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n    Contributed by James E. Wilson <wilson@cygnus.com> and\n    \t\t  David Mosberger <davidm@hpl.hp.com>.\n \n@@ -4016,7 +4016,7 @@ ia64_safe_type (insn)\n    WRITE_COUNT gets set to 2.\n \n    The result of this is that whenever an insn attempts to write a register\n-   whose WRITE_COUNT is two, we need to issue a insn group barrier first.\n+   whose WRITE_COUNT is two, we need to issue an insn group barrier first.\n \n    If a predicate register is written by a floating-point insn, we set\n    WRITTEN_BY_FP to true."}, {"sha": "ed5796faf7bbd351d0b0f1d730e66056076449bf", "filename": "gcc/config/m32r/m32r.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e03f5d43cb6dd594512afa8ac72ebfe6af2eafc8/gcc%2Fconfig%2Fm32r%2Fm32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e03f5d43cb6dd594512afa8ac72ebfe6af2eafc8/gcc%2Fconfig%2Fm32r%2Fm32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.h?ref=e03f5d43cb6dd594512afa8ac72ebfe6af2eafc8", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler, Mitsubishi M32R cpu.\n-   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001\n+   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002\n    Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n@@ -1388,7 +1388,7 @@ do { \\\n  && RTX_OK_FOR_BASE_P (XEXP (X, 0)))\n \n /* Local to this file.  */\n-/* Is this a increment/decrement and store operation.  */\n+/* Is this an increment/decrement and store operation.  */\n #define STORE_PREINC_PREDEC_P(MODE, X)\t\t\t\t\t\\\n (((MODE) == SImode || (MODE) == SFmode)\t\t\t\t\t\\\n  && (GET_CODE (X) == PRE_INC || GET_CODE (X) == PRE_DEC)\t\t\\"}, {"sha": "7f13e69cfb067421fa76f9e6b036499b7ca1e54d", "filename": "gcc/config/m68hc11/m68hc11.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e03f5d43cb6dd594512afa8ac72ebfe6af2eafc8/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e03f5d43cb6dd594512afa8ac72ebfe6af2eafc8/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.md?ref=e03f5d43cb6dd594512afa8ac72ebfe6af2eafc8", "patch": "@@ -1,5 +1,5 @@\n ;;- Machine description file for Motorola 68HC11 and 68HC12.\n-;;- Copyright (C) 1999, 2000, 2001 Free Software Foundation, Inc.\n+;;- Copyright (C) 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n ;;- Contributed by Stephane Carrez (stcarrez@worldnet.fr)\n \n ;; This file is part of GNU CC.\n@@ -1596,7 +1596,7 @@\n     }\n   else\n     {\n-      /* X can be used as a indexed addressing in the source.\n+      /* X can be used as an indexed addressing in the source.\n          Get the value before clearing it.  */\n       x_reg_used = reg_mentioned_p (ix_reg, operands[1]);\n       if (x_reg_used)"}, {"sha": "b23365a8c93de8c30935067b83044840aefb6f66", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e03f5d43cb6dd594512afa8ac72ebfe6af2eafc8/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e03f5d43cb6dd594512afa8ac72ebfe6af2eafc8/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=e03f5d43cb6dd594512afa8ac72ebfe6af2eafc8", "patch": "@@ -2830,7 +2830,7 @@ mmix_gen_compare_reg (code, x, y)\n /* Local (static) helper functions.  */\n \n /* Print operator suitable for doing something with a shiftable\n-   wyde.  The type of operator is passed as a asm output modifier.  */\n+   wyde.  The type of operator is passed as an asm output modifier.  */\n \n static void\n mmix_output_shiftvalue_op_from_str (stream, mainop, value)"}, {"sha": "4fa4c2e1fb4edf8df994b17aa56f17d820596b5c", "filename": "gcc/config/mn10200/mn10200.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e03f5d43cb6dd594512afa8ac72ebfe6af2eafc8/gcc%2Fconfig%2Fmn10200%2Fmn10200.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e03f5d43cb6dd594512afa8ac72ebfe6af2eafc8/gcc%2Fconfig%2Fmn10200%2Fmn10200.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10200%2Fmn10200.c?ref=e03f5d43cb6dd594512afa8ac72ebfe6af2eafc8", "patch": "@@ -1,5 +1,6 @@\n /* Subroutines for insn-output.c for Matsushita MN10200 series\n-   Copyright (C) 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002\n+   Free Software Foundation, Inc.\n    Contributed by Jeff Law (law@cygnus.com).\n \n This file is part of GNU CC.\n@@ -615,7 +616,7 @@ expand_prologue ()\n \t\t}\n \t    }\n \n-\t  /* Now see if we could load the value into a address register.  */\n+\t  /* Now see if we could load the value into an address register.  */\n \t  if (zero_dreg == NULL_RTX\n \t      && areg_count > 2\n \t      && (!regs_ever_live[5] || !regs_ever_live[6]))"}, {"sha": "9a5022aa78917b941a4dbdc06352f7d78c384d23", "filename": "gcc/config/romp/romp.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e03f5d43cb6dd594512afa8ac72ebfe6af2eafc8/gcc%2Fconfig%2Fromp%2Fromp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e03f5d43cb6dd594512afa8ac72ebfe6af2eafc8/gcc%2Fconfig%2Fromp%2Fromp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fromp%2Fromp.c?ref=e03f5d43cb6dd594512afa8ac72ebfe6af2eafc8", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines used for code generation on ROMP.\n-   Copyright (C) 1990, 1991, 1992, 1993, 1997, 1998, 1999, 2000\n+   Copyright (C) 1990, 1991, 1992, 1993, 1997, 1998, 1999, 2000, 2002\n    Free Software Foundation, Inc.\n    Contributed by Richard Kenner (kenner@nyu.edu)\n \n@@ -1152,7 +1152,7 @@ romp_output_function_prologue (file, size)\n    The last 6 bits of the first byte initialize the offset value. In many\n    cases where procedures have small local storage, this is enough and, in\n    this case, the high-order size field is zero so the byte can (almost) be\n-   used as is (see below). Thus, the byte value of 0x0d is encodes a offset\n+   used as is (see below). Thus, the byte value of 0x0d is encodes an offset\n    size of 13 words, or 52 bytes.\n \n    For procedures with a local space larger than 60 bytes, the 6 bits\n@@ -2027,7 +2027,7 @@ romp_debugger_auto_correction(offset)\n }\n \n /* Return the offset value of an argument having\n-   the given offset. Basically, we correct by going from a arg pointer to\n+   the given offset. Basically, we correct by going from an arg pointer to\n    stack pointer value.  */\n \n int"}, {"sha": "f83a1e13f76842bfde70bcea0e212eb3248c145a", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e03f5d43cb6dd594512afa8ac72ebfe6af2eafc8/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e03f5d43cb6dd594512afa8ac72ebfe6af2eafc8/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=e03f5d43cb6dd594512afa8ac72ebfe6af2eafc8", "patch": "@@ -1,5 +1,5 @@\n /* Output routines for GCC for Hitachi Super-H.\n-   Copyright (C) 1993, 1994, 1995, 1997, 1997, 1998, 1999, 2000, 2001\n+   Copyright (C) 1993, 1994, 1995, 1997, 1997, 1998, 1999, 2000, 2001, 2002\n    Free Software Foundation, Inc.\n    Contributed by Steve Chamberlain (sac@cygnus.com).\n    Improved by Jim Wilson (wilson@cygnus.com). \n@@ -5142,7 +5142,7 @@ reg_unused_after (reg, insn)\n \n       /* If this is a sequence, we must handle them all at once.\n \t We could have for instance a call that sets the target register,\n-\t and a insn in a delay slot that uses the register.  In this case,\n+\t and an insn in a delay slot that uses the register.  In this case,\n \t we must return 0.  */\n       else if (code == INSN && GET_CODE (PATTERN (insn)) == SEQUENCE)\n \t{"}, {"sha": "fd8c978f901c5e38d99bd02348f915950e590b2b", "filename": "gcc/config/stormy16/stormy16.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e03f5d43cb6dd594512afa8ac72ebfe6af2eafc8/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e03f5d43cb6dd594512afa8ac72ebfe6af2eafc8/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.c?ref=e03f5d43cb6dd594512afa8ac72ebfe6af2eafc8", "patch": "@@ -1,5 +1,6 @@\n /* Xstormy16 target functions.\n-   Copyright (C) 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002\n+   Free Software Foundation, Inc.\n    Contributed by Red Hat, Inc.\n \n This file is part of GNU CC.\n@@ -440,7 +441,7 @@ xstormy16_output_cbranch_si (op, label, reversed, insn)\n    registers can only be copied to memory and not to another class of\n    registers.  In that case, secondary reload registers are not needed and\n    would not be helpful.  Instead, a stack location must be used to perform the\n-   copy and the `movM' pattern should use memory as a intermediate storage.\n+   copy and the `movM' pattern should use memory as an intermediate storage.\n    This case often occurs between floating-point and general registers.  */\n \n enum reg_class\n@@ -1015,7 +1016,7 @@ direct_return ()\n }\n \n /* Called after register allocation to add any instructions needed for\n-   the epilogue.  Using a epilogue insn is favored compared to putting\n+   the epilogue.  Using an epilogue insn is favored compared to putting\n    all of the instructions in the TARGET_ASM_FUNCTION_PROLOGUE macro,\n    since it allows the scheduler to intermix instructions with the\n    saves of the caller saved registers.  In some cases, it might be\n@@ -1502,7 +1503,7 @@ xstormy16_print_operand_address (file, address)\n   fputc (')', file);\n }\n \n-/* Print an operand to a assembler instruction.  */\n+/* Print an operand to an assembler instruction.  */\n void\n xstormy16_print_operand (file, x, code)\n      FILE * file;"}, {"sha": "330b75ed9c830ce8af59a105038bb66761d302e8", "filename": "gcc/config/stormy16/stormy16.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e03f5d43cb6dd594512afa8ac72ebfe6af2eafc8/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e03f5d43cb6dd594512afa8ac72ebfe6af2eafc8/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.h?ref=e03f5d43cb6dd594512afa8ac72ebfe6af2eafc8", "patch": "@@ -1,5 +1,5 @@\n /* Xstormy16 cpu description.\n-   Copyright (C) 1997, 1998, 1999, 2000, 2001\n+   Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002\n    Free Software Foundation, Inc.\n    Contributed by Red Hat, Inc.\n \n@@ -1406,7 +1406,7 @@ enum reg_class\n    registers can only be copied to memory and not to another class of\n    registers.  In that case, secondary reload registers are not needed and\n    would not be helpful.  Instead, a stack location must be used to perform the\n-   copy and the `movM' pattern should use memory as a intermediate storage.\n+   copy and the `movM' pattern should use memory as an intermediate storage.\n    This case often occurs between floating-point and general registers.  */\n \n /* This chip has the interesting property that only the first eight"}, {"sha": "cd68852c7893a8b3e76b2e092b1635ad9aedc339", "filename": "gcc/config/stormy16/stormy16.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e03f5d43cb6dd594512afa8ac72ebfe6af2eafc8/gcc%2Fconfig%2Fstormy16%2Fstormy16.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e03f5d43cb6dd594512afa8ac72ebfe6af2eafc8/gcc%2Fconfig%2Fstormy16%2Fstormy16.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.md?ref=e03f5d43cb6dd594512afa8ac72ebfe6af2eafc8", "patch": "@@ -1,5 +1,5 @@\n ;; XSTORMY16 Machine description template\n-;; Copyright (C) 1997, 1998, 1999, 2001 Free Software Foundation, Inc.\n+;; Copyright (C) 1997, 1998, 1999, 2001, 2002 Free Software Foundation, Inc.\n ;; Contributed by Red Hat, Inc.\n \n ;; This file is part of GNU CC.\n@@ -934,7 +934,7 @@\n }\")\n \n ;; Called after register allocation to add any instructions needed for\n-;; the epilogue.  Using a epilogue insn is favored compared to putting\n+;; the epilogue.  Using an epilogue insn is favored compared to putting\n ;; all of the instructions in the TARGET_ASM_FUNCTION_EPILOGUE macro,\n ;; since it allows the scheduler to intermix instructions with the\n ;; restires of the caller saved registers.  In some cases, it might be"}]}