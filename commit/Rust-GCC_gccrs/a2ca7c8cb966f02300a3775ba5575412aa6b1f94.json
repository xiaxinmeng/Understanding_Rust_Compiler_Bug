{"sha": "a2ca7c8cb966f02300a3775ba5575412aa6b1f94", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTJjYTdjOGNiOTY2ZjAyMzAwYTM3NzViYTU1NzU0MTJhYTZiMWY5NA==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2013-11-18T14:50:11Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2013-11-18T14:50:11Z"}, "message": "atomic-compare-exchange-1.c, [...]: Declare main as returning int.\n\n\t* testsuite/libatomic.c/atomic-compare-exchange-1.c,\n\ttestsuite/libatomic.c/atomic-compare-exchange-2.c,\n\ttestsuite/libatomic.c/atomic-compare-exchange-3.c,\n\ttestsuite/libatomic.c/atomic-compare-exchange-4.c,\n\ttestsuite/libatomic.c/atomic-compare-exchange-5.c,\n\ttestsuite/libatomic.c/atomic-exchange-1.c,\n\ttestsuite/libatomic.c/atomic-exchange-2.c,\n\ttestsuite/libatomic.c/atomic-exchange-3.c,\n\ttestsuite/libatomic.c/atomic-exchange-4.c,\n\ttestsuite/libatomic.c/atomic-exchange-5.c,\n\ttestsuite/libatomic.c/atomic-generic.c,\n\ttestsuite/libatomic.c/atomic-load-1.c,\n\ttestsuite/libatomic.c/atomic-load-2.c,\n\ttestsuite/libatomic.c/atomic-load-3.c,\n\ttestsuite/libatomic.c/atomic-load-4.c,\n\ttestsuite/libatomic.c/atomic-load-5.c,\n\ttestsuite/libatomic.c/atomic-op-1.c,\n\ttestsuite/libatomic.c/atomic-op-2.c,\n\ttestsuite/libatomic.c/atomic-op-3.c,\n\ttestsuite/libatomic.c/atomic-op-4.c,\n\ttestsuite/libatomic.c/atomic-op-5.c,\n\ttestsuite/libatomic.c/atomic-store-1.c,\n\ttestsuite/libatomic.c/atomic-store-2.c,\n\ttestsuite/libatomic.c/atomic-store-3.c,\n\ttestsuite/libatomic.c/atomic-store-4.c,\n\ttestsuite/libatomic.c/atomic-store-5.c: Declare main as returning\n\tint.  Do not require built-in sync support or add target-specific\n\toptions.\n\t* testsuite/libatomic.c/atomic-exchange-1.c,\n\ttestsuite/libatomic.c/atomic-exchange-2.c,\n\ttestsuite/libatomic.c/atomic-exchange-3.c,\n\ttestsuite/libatomic.c/atomic-exchange-4.c,\n\ttestsuite/libatomic.c/atomic-exchange-5.c: Separate increments of\n\tcount from expression using value of count.\n\nFrom-SVN: r204953", "tree": {"sha": "3ef9752a542301767b623ae7a0ea934a52f72ed6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ef9752a542301767b623ae7a0ea934a52f72ed6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a2ca7c8cb966f02300a3775ba5575412aa6b1f94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2ca7c8cb966f02300a3775ba5575412aa6b1f94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2ca7c8cb966f02300a3775ba5575412aa6b1f94", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2ca7c8cb966f02300a3775ba5575412aa6b1f94/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad098ad1335f0e2684d721793232de8eab45936c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad098ad1335f0e2684d721793232de8eab45936c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad098ad1335f0e2684d721793232de8eab45936c"}], "stats": {"total": 178, "additions": 118, "deletions": 60}, "files": [{"sha": "143a72926416d754d1a2a6b3c70d29ff2575a28f", "filename": "libatomic/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ca7c8cb966f02300a3775ba5575412aa6b1f94/libatomic%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ca7c8cb966f02300a3775ba5575412aa6b1f94/libatomic%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2FChangeLog?ref=a2ca7c8cb966f02300a3775ba5575412aa6b1f94", "patch": "@@ -1,3 +1,40 @@\n+2013-11-18  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* testsuite/libatomic.c/atomic-compare-exchange-1.c,\n+\ttestsuite/libatomic.c/atomic-compare-exchange-2.c,\n+\ttestsuite/libatomic.c/atomic-compare-exchange-3.c,\n+\ttestsuite/libatomic.c/atomic-compare-exchange-4.c,\n+\ttestsuite/libatomic.c/atomic-compare-exchange-5.c,\n+\ttestsuite/libatomic.c/atomic-exchange-1.c,\n+\ttestsuite/libatomic.c/atomic-exchange-2.c,\n+\ttestsuite/libatomic.c/atomic-exchange-3.c,\n+\ttestsuite/libatomic.c/atomic-exchange-4.c,\n+\ttestsuite/libatomic.c/atomic-exchange-5.c,\n+\ttestsuite/libatomic.c/atomic-generic.c,\n+\ttestsuite/libatomic.c/atomic-load-1.c,\n+\ttestsuite/libatomic.c/atomic-load-2.c,\n+\ttestsuite/libatomic.c/atomic-load-3.c,\n+\ttestsuite/libatomic.c/atomic-load-4.c,\n+\ttestsuite/libatomic.c/atomic-load-5.c,\n+\ttestsuite/libatomic.c/atomic-op-1.c,\n+\ttestsuite/libatomic.c/atomic-op-2.c,\n+\ttestsuite/libatomic.c/atomic-op-3.c,\n+\ttestsuite/libatomic.c/atomic-op-4.c,\n+\ttestsuite/libatomic.c/atomic-op-5.c,\n+\ttestsuite/libatomic.c/atomic-store-1.c,\n+\ttestsuite/libatomic.c/atomic-store-2.c,\n+\ttestsuite/libatomic.c/atomic-store-3.c,\n+\ttestsuite/libatomic.c/atomic-store-4.c,\n+\ttestsuite/libatomic.c/atomic-store-5.c: Declare main as returning\n+\tint.  Do not require built-in sync support or add target-specific\n+\toptions.\n+\t* testsuite/libatomic.c/atomic-exchange-1.c,\n+\ttestsuite/libatomic.c/atomic-exchange-2.c,\n+\ttestsuite/libatomic.c/atomic-exchange-3.c,\n+\ttestsuite/libatomic.c/atomic-exchange-4.c,\n+\ttestsuite/libatomic.c/atomic-exchange-5.c: Separate increments of\n+\tcount from expression using value of count.\n+\n 2013-11-10  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/x86/fenv.c: New file."}, {"sha": "33dba8640ea9ab98a421a19040a2a50bdb256d27", "filename": "libatomic/testsuite/libatomic.c/atomic-compare-exchange-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ca7c8cb966f02300a3775ba5575412aa6b1f94/libatomic%2Ftestsuite%2Flibatomic.c%2Fatomic-compare-exchange-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ca7c8cb966f02300a3775ba5575412aa6b1f94/libatomic%2Ftestsuite%2Flibatomic.c%2Fatomic-compare-exchange-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2Ftestsuite%2Flibatomic.c%2Fatomic-compare-exchange-1.c?ref=a2ca7c8cb966f02300a3775ba5575412aa6b1f94", "patch": "@@ -1,7 +1,6 @@\n /* Test __atomic routines for existence and proper execution on 1 byte \n    values with each valid memory model.  */\n /* { dg-do run } */\n-/* { dg-require-effective-target sync_char_short } */\n \n /* Test the execution of the __atomic_compare_exchange_n builtin for a char.  */\n \n@@ -16,6 +15,7 @@ char zero = 0;\n #define STRONG 0\n #define WEAK 1\n \n+int\n main ()\n {\n "}, {"sha": "588f3d2faf7035f33c2f6f487fba92ec19529062", "filename": "libatomic/testsuite/libatomic.c/atomic-compare-exchange-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ca7c8cb966f02300a3775ba5575412aa6b1f94/libatomic%2Ftestsuite%2Flibatomic.c%2Fatomic-compare-exchange-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ca7c8cb966f02300a3775ba5575412aa6b1f94/libatomic%2Ftestsuite%2Flibatomic.c%2Fatomic-compare-exchange-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2Ftestsuite%2Flibatomic.c%2Fatomic-compare-exchange-2.c?ref=a2ca7c8cb966f02300a3775ba5575412aa6b1f94", "patch": "@@ -1,7 +1,6 @@\n /* Test __atomic routines for existence and proper execution on 2 byte \n    values with each valid memory model.  */\n /* { dg-do run } */\n-/* { dg-require-effective-target sync_char_short } */\n \n /* Test the execution of the __atomic_compare_exchange_n builtin for a short.  */\n \n@@ -16,6 +15,7 @@ short zero = 0;\n #define STRONG 0\n #define WEAK 1\n \n+int\n main ()\n {\n "}, {"sha": "f424c4a2fb113c67c6bbc7c90a3719d2852c51e9", "filename": "libatomic/testsuite/libatomic.c/atomic-compare-exchange-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ca7c8cb966f02300a3775ba5575412aa6b1f94/libatomic%2Ftestsuite%2Flibatomic.c%2Fatomic-compare-exchange-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ca7c8cb966f02300a3775ba5575412aa6b1f94/libatomic%2Ftestsuite%2Flibatomic.c%2Fatomic-compare-exchange-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2Ftestsuite%2Flibatomic.c%2Fatomic-compare-exchange-3.c?ref=a2ca7c8cb966f02300a3775ba5575412aa6b1f94", "patch": "@@ -1,7 +1,6 @@\n /* Test __atomic routines for existence and proper execution on 4 byte \n    values with each valid memory model.  */\n /* { dg-do run } */\n-/* { dg-require-effective-target sync_int_long } */\n \n /* Test the execution of the __atomic_compare_exchange_n builtin for an int.  */\n \n@@ -16,6 +15,7 @@ int zero = 0;\n #define STRONG 0\n #define WEAK 1\n \n+int\n main ()\n {\n "}, {"sha": "5274f8c44c77030e1138a5ba6e9b8168452bfbf1", "filename": "libatomic/testsuite/libatomic.c/atomic-compare-exchange-4.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ca7c8cb966f02300a3775ba5575412aa6b1f94/libatomic%2Ftestsuite%2Flibatomic.c%2Fatomic-compare-exchange-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ca7c8cb966f02300a3775ba5575412aa6b1f94/libatomic%2Ftestsuite%2Flibatomic.c%2Fatomic-compare-exchange-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2Ftestsuite%2Flibatomic.c%2Fatomic-compare-exchange-4.c?ref=a2ca7c8cb966f02300a3775ba5575412aa6b1f94", "patch": "@@ -1,9 +1,7 @@\n /* Test __atomic routines for existence and proper execution on 8 byte \n    values with each valid memory model.  */\n /* { dg-do run } */\n-/* { dg-require-effective-target sync_long_long_runtime } */\n /* { dg-options \"\" } */\n-/* { dg-options \"-march=pentium\" { target { { i?86-*-* x86_64-*-* } && ia32 } } } */\n \n /* Test the execution of __atomic_compare_exchange_n builtin for a long_long.  */\n \n@@ -18,6 +16,7 @@ long long zero = 0;\n #define STRONG 0\n #define WEAK 1\n \n+int\n main ()\n {\n "}, {"sha": "fd05ce7444e4cd39b23b6bae498523a8e02eea02", "filename": "libatomic/testsuite/libatomic.c/atomic-compare-exchange-5.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ca7c8cb966f02300a3775ba5575412aa6b1f94/libatomic%2Ftestsuite%2Flibatomic.c%2Fatomic-compare-exchange-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ca7c8cb966f02300a3775ba5575412aa6b1f94/libatomic%2Ftestsuite%2Flibatomic.c%2Fatomic-compare-exchange-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2Ftestsuite%2Flibatomic.c%2Fatomic-compare-exchange-5.c?ref=a2ca7c8cb966f02300a3775ba5575412aa6b1f94", "patch": "@@ -1,8 +1,7 @@\n /* Test __atomic routines for existence and proper execution on 16 byte \n    values with each valid memory model.  */\n /* { dg-do run } */\n-/* { dg-require-effective-target sync_int_128_runtime } */\n-/* { dg-options \"-mcx16\" { target { i?86-*-* x86_64-*-* } } } */\n+/* { dg-require-effective-target int128 } */\n \n /* Test the execution of __atomic_compare_exchange_n builtin for an int_128.  */\n \n@@ -17,6 +16,7 @@ __int128_t zero = 0;\n #define STRONG 0\n #define WEAK 1\n \n+int\n main ()\n {\n "}, {"sha": "71c19807f37246acd8b5c5aef2f58e5da0b294e7", "filename": "libatomic/testsuite/libatomic.c/atomic-exchange-1.c", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ca7c8cb966f02300a3775ba5575412aa6b1f94/libatomic%2Ftestsuite%2Flibatomic.c%2Fatomic-exchange-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ca7c8cb966f02300a3775ba5575412aa6b1f94/libatomic%2Ftestsuite%2Flibatomic.c%2Fatomic-exchange-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2Ftestsuite%2Flibatomic.c%2Fatomic-exchange-1.c?ref=a2ca7c8cb966f02300a3775ba5575412aa6b1f94", "patch": "@@ -1,33 +1,38 @@\n /* Test __atomic routines for existence and proper execution on 1 byte \n    values with each valid memory model.  */\n /* { dg-do run } */\n-/* { dg-require-effective-target sync_char_short } */\n \n /* Test the execution of the __atomic_exchange_n builtin for a char.  */\n \n extern void abort(void);\n \n char v, count, ret;\n \n+int\n main ()\n {\n   v = 0;\n   count = 0;\n \n-  if (__atomic_exchange_n (&v, count + 1, __ATOMIC_RELAXED) !=  count++) \n+  if (__atomic_exchange_n (&v, count + 1, __ATOMIC_RELAXED) != count)\n     abort ();\n+  count++;\n \n-  if (__atomic_exchange_n (&v, count + 1, __ATOMIC_ACQUIRE) !=  count++) \n+  if (__atomic_exchange_n (&v, count + 1, __ATOMIC_ACQUIRE) != count)\n     abort ();\n+  count++;\n \n-  if (__atomic_exchange_n (&v, count + 1, __ATOMIC_RELEASE) !=  count++) \n+  if (__atomic_exchange_n (&v, count + 1, __ATOMIC_RELEASE) != count)\n     abort ();\n+  count++;\n \n-  if (__atomic_exchange_n (&v, count + 1, __ATOMIC_ACQ_REL) !=  count++) \n+  if (__atomic_exchange_n (&v, count + 1, __ATOMIC_ACQ_REL) != count)\n     abort ();\n+  count++;\n \n-  if (__atomic_exchange_n (&v, count + 1, __ATOMIC_SEQ_CST) !=  count++) \n+  if (__atomic_exchange_n (&v, count + 1, __ATOMIC_SEQ_CST) != count)\n     abort ();\n+  count++;\n \n   /* Now test the generic version.  */\n "}, {"sha": "e06d729517f01d2adcb0e0ce6f6679e6ff69f72f", "filename": "libatomic/testsuite/libatomic.c/atomic-exchange-2.c", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ca7c8cb966f02300a3775ba5575412aa6b1f94/libatomic%2Ftestsuite%2Flibatomic.c%2Fatomic-exchange-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ca7c8cb966f02300a3775ba5575412aa6b1f94/libatomic%2Ftestsuite%2Flibatomic.c%2Fatomic-exchange-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2Ftestsuite%2Flibatomic.c%2Fatomic-exchange-2.c?ref=a2ca7c8cb966f02300a3775ba5575412aa6b1f94", "patch": "@@ -1,33 +1,38 @@\n /* Test __atomic routines for existence and proper execution on 2 byte \n    values with each valid memory model.  */\n /* { dg-do run } */\n-/* { dg-require-effective-target sync_char_short } */\n \n /* Test the execution of the __atomic_X builtin for a short.  */\n \n extern void abort(void);\n \n short v, count, ret;\n \n+int\n main ()\n {\n   v = 0;\n   count = 0;\n \n-  if (__atomic_exchange_n (&v, count + 1, __ATOMIC_RELAXED) !=  count++) \n+  if (__atomic_exchange_n (&v, count + 1, __ATOMIC_RELAXED) != count)\n     abort ();\n+  count++;\n \n-  if (__atomic_exchange_n (&v, count + 1, __ATOMIC_ACQUIRE) !=  count++) \n+  if (__atomic_exchange_n (&v, count + 1, __ATOMIC_ACQUIRE) != count)\n     abort ();\n+  count++;\n \n-  if (__atomic_exchange_n (&v, count + 1, __ATOMIC_RELEASE) !=  count++) \n+  if (__atomic_exchange_n (&v, count + 1, __ATOMIC_RELEASE) != count)\n     abort ();\n+  count++;\n \n-  if (__atomic_exchange_n (&v, count + 1, __ATOMIC_ACQ_REL) !=  count++) \n+  if (__atomic_exchange_n (&v, count + 1, __ATOMIC_ACQ_REL) != count)\n     abort ();\n+  count++;\n \n-  if (__atomic_exchange_n (&v, count + 1, __ATOMIC_SEQ_CST) !=  count++) \n+  if (__atomic_exchange_n (&v, count + 1, __ATOMIC_SEQ_CST) != count)\n     abort ();\n+  count++;\n \n   /* Now test the generic version.  */\n "}, {"sha": "56841d99bb714c089db48bd5630d5b380fe7b091", "filename": "libatomic/testsuite/libatomic.c/atomic-exchange-3.c", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ca7c8cb966f02300a3775ba5575412aa6b1f94/libatomic%2Ftestsuite%2Flibatomic.c%2Fatomic-exchange-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ca7c8cb966f02300a3775ba5575412aa6b1f94/libatomic%2Ftestsuite%2Flibatomic.c%2Fatomic-exchange-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2Ftestsuite%2Flibatomic.c%2Fatomic-exchange-3.c?ref=a2ca7c8cb966f02300a3775ba5575412aa6b1f94", "patch": "@@ -1,33 +1,38 @@\n /* Test __atomic routines for existence and proper execution on 4 byte \n    values with each valid memory model.  */\n /* { dg-do run } */\n-/* { dg-require-effective-target sync_int_long } */\n \n /* Test the execution of the __atomic_X builtin for an int.  */\n \n extern void abort(void);\n \n int v, count, ret;\n \n+int\n main ()\n {\n   v = 0;\n   count = 0;\n \n-  if (__atomic_exchange_n (&v, count + 1, __ATOMIC_RELAXED) !=  count++) \n+  if (__atomic_exchange_n (&v, count + 1, __ATOMIC_RELAXED) != count)\n     abort ();\n+  count++;\n \n-  if (__atomic_exchange_n (&v, count + 1, __ATOMIC_ACQUIRE) !=  count++) \n+  if (__atomic_exchange_n (&v, count + 1, __ATOMIC_ACQUIRE) != count)\n     abort ();\n+  count++;\n \n-  if (__atomic_exchange_n (&v, count + 1, __ATOMIC_RELEASE) !=  count++) \n+  if (__atomic_exchange_n (&v, count + 1, __ATOMIC_RELEASE) != count)\n     abort ();\n+  count++;\n \n-  if (__atomic_exchange_n (&v, count + 1, __ATOMIC_ACQ_REL) !=  count++) \n+  if (__atomic_exchange_n (&v, count + 1, __ATOMIC_ACQ_REL) != count)\n     abort ();\n+  count++;\n \n-  if (__atomic_exchange_n (&v, count + 1, __ATOMIC_SEQ_CST) !=  count++) \n+  if (__atomic_exchange_n (&v, count + 1, __ATOMIC_SEQ_CST) != count)\n     abort ();\n+  count++;\n \n   /* Now test the generic version.  */\n "}, {"sha": "db867d6e5d6c31699bfe413d1dd8812226032d4c", "filename": "libatomic/testsuite/libatomic.c/atomic-exchange-4.c", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ca7c8cb966f02300a3775ba5575412aa6b1f94/libatomic%2Ftestsuite%2Flibatomic.c%2Fatomic-exchange-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ca7c8cb966f02300a3775ba5575412aa6b1f94/libatomic%2Ftestsuite%2Flibatomic.c%2Fatomic-exchange-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2Ftestsuite%2Flibatomic.c%2Fatomic-exchange-4.c?ref=a2ca7c8cb966f02300a3775ba5575412aa6b1f94", "patch": "@@ -1,35 +1,39 @@\n /* Test __atomic routines for existence and proper execution on 8 byte \n    values with each valid memory model.  */\n /* { dg-do run } */\n-/* { dg-require-effective-target sync_long_long_runtime } */\n /* { dg-options \"\" } */\n-/* { dg-options \"-march=pentium\" { target { { i?86-*-* x86_64-*-* } && ia32 } } } */\n \n /* Test the execution of the __atomic_X builtin for a long_long.  */\n \n extern void abort(void);\n \n long long v, count, ret;\n \n+int\n main ()\n {\n   v = 0;\n   count = 0;\n \n-  if (__atomic_exchange_n (&v, count + 1, __ATOMIC_RELAXED) !=  count++) \n+  if (__atomic_exchange_n (&v, count + 1, __ATOMIC_RELAXED) != count)\n     abort ();\n+  count++;\n \n-  if (__atomic_exchange_n (&v, count + 1, __ATOMIC_ACQUIRE) !=  count++) \n+  if (__atomic_exchange_n (&v, count + 1, __ATOMIC_ACQUIRE) != count)\n     abort ();\n+  count++;\n \n-  if (__atomic_exchange_n (&v, count + 1, __ATOMIC_RELEASE) !=  count++) \n+  if (__atomic_exchange_n (&v, count + 1, __ATOMIC_RELEASE) != count)\n     abort ();\n+  count++;\n \n-  if (__atomic_exchange_n (&v, count + 1, __ATOMIC_ACQ_REL) !=  count++) \n+  if (__atomic_exchange_n (&v, count + 1, __ATOMIC_ACQ_REL) != count)\n     abort ();\n+  count++;\n \n-  if (__atomic_exchange_n (&v, count + 1, __ATOMIC_SEQ_CST) !=  count++) \n+  if (__atomic_exchange_n (&v, count + 1, __ATOMIC_SEQ_CST) != count)\n     abort ();\n+  count++;\n \n   /* Now test the generic version.  */\n "}, {"sha": "02d4a8897f2313c8b26b46c885b76cdf210a929f", "filename": "libatomic/testsuite/libatomic.c/atomic-exchange-5.c", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ca7c8cb966f02300a3775ba5575412aa6b1f94/libatomic%2Ftestsuite%2Flibatomic.c%2Fatomic-exchange-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ca7c8cb966f02300a3775ba5575412aa6b1f94/libatomic%2Ftestsuite%2Flibatomic.c%2Fatomic-exchange-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2Ftestsuite%2Flibatomic.c%2Fatomic-exchange-5.c?ref=a2ca7c8cb966f02300a3775ba5575412aa6b1f94", "patch": "@@ -1,34 +1,39 @@\n /* Test __atomic routines for existence and proper execution on 16 byte \n    values with each valid memory model.  */\n /* { dg-do run } */\n-/* { dg-require-effective-target sync_int_128_runtime } */\n-/* { dg-options \"-mcx16\" { target { i?86-*-* x86_64-*-* } } } */\n+/* { dg-require-effective-target int128 } */\n \n /* Test the execution of the __atomic_X builtin for a 16 byte value.  */\n \n extern void abort(void);\n \n __int128_t v, count, ret;\n \n+int\n main ()\n {\n   v = 0;\n   count = 0;\n \n-  if (__atomic_exchange_n (&v, count + 1, __ATOMIC_RELAXED) !=  count++) \n+  if (__atomic_exchange_n (&v, count + 1, __ATOMIC_RELAXED) != count)\n     abort ();\n+  count++;\n \n-  if (__atomic_exchange_n (&v, count + 1, __ATOMIC_ACQUIRE) !=  count++) \n+  if (__atomic_exchange_n (&v, count + 1, __ATOMIC_ACQUIRE) != count)\n     abort ();\n+  count++;\n \n-  if (__atomic_exchange_n (&v, count + 1, __ATOMIC_RELEASE) !=  count++) \n+  if (__atomic_exchange_n (&v, count + 1, __ATOMIC_RELEASE) != count)\n     abort ();\n+  count++;\n \n-  if (__atomic_exchange_n (&v, count + 1, __ATOMIC_ACQ_REL) !=  count++) \n+  if (__atomic_exchange_n (&v, count + 1, __ATOMIC_ACQ_REL) != count)\n     abort ();\n+  count++;\n \n-  if (__atomic_exchange_n (&v, count + 1, __ATOMIC_SEQ_CST) !=  count++) \n+  if (__atomic_exchange_n (&v, count + 1, __ATOMIC_SEQ_CST) != count)\n     abort ();\n+  count++;\n \n   /* Now test the generic version.  */\n "}, {"sha": "11ef6c5831da42422112909bf9fa10811a0ce8bc", "filename": "libatomic/testsuite/libatomic.c/atomic-generic.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ca7c8cb966f02300a3775ba5575412aa6b1f94/libatomic%2Ftestsuite%2Flibatomic.c%2Fatomic-generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ca7c8cb966f02300a3775ba5575412aa6b1f94/libatomic%2Ftestsuite%2Flibatomic.c%2Fatomic-generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2Ftestsuite%2Flibatomic.c%2Fatomic-generic.c?ref=a2ca7c8cb966f02300a3775ba5575412aa6b1f94", "patch": "@@ -22,6 +22,7 @@ test_struct a,b;\n \n int size = sizeof (test_struct);\n /* Test for consistency on sizes 1, 2, 4, 8, 16 and 32.  */\n+int\n main ()\n {\n   test_struct c;"}, {"sha": "d7e430434d390326f9cbb37842ba83a924ef3e63", "filename": "libatomic/testsuite/libatomic.c/atomic-load-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ca7c8cb966f02300a3775ba5575412aa6b1f94/libatomic%2Ftestsuite%2Flibatomic.c%2Fatomic-load-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ca7c8cb966f02300a3775ba5575412aa6b1f94/libatomic%2Ftestsuite%2Flibatomic.c%2Fatomic-load-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2Ftestsuite%2Flibatomic.c%2Fatomic-load-1.c?ref=a2ca7c8cb966f02300a3775ba5575412aa6b1f94", "patch": "@@ -1,7 +1,6 @@\n /* Test __atomic routines for existence and proper execution on 1 byte \n    values with each valid memory model.  */\n /* { dg-do run } */\n-/* { dg-require-effective-target sync_char_short } */\n \n \n /* Test the execution of the __atomic_load_n builtin for a char.  */\n@@ -10,6 +9,7 @@ extern void abort(void);\n \n char v, count;\n \n+int\n main ()\n {\n   v = 0;"}, {"sha": "df2966be7a2448356855b46710093e492bed8bb6", "filename": "libatomic/testsuite/libatomic.c/atomic-load-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ca7c8cb966f02300a3775ba5575412aa6b1f94/libatomic%2Ftestsuite%2Flibatomic.c%2Fatomic-load-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ca7c8cb966f02300a3775ba5575412aa6b1f94/libatomic%2Ftestsuite%2Flibatomic.c%2Fatomic-load-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2Ftestsuite%2Flibatomic.c%2Fatomic-load-2.c?ref=a2ca7c8cb966f02300a3775ba5575412aa6b1f94", "patch": "@@ -1,7 +1,6 @@\n /* Test __atomic routines for existence and proper execution on 2 byte \n    values with each valid memory model.  */\n /* { dg-do run } */\n-/* { dg-require-effective-target sync_char_short } */\n \n \n /* Test the execution of the __atomic_load_n builtin for a short.  */\n@@ -11,6 +10,7 @@ extern void abort(void);\n short v, count;\n \n \n+int\n main ()\n {\n   v = 0;"}, {"sha": "b54cc4b2c75a8bd10aacaa77d49e5c04854ccf85", "filename": "libatomic/testsuite/libatomic.c/atomic-load-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ca7c8cb966f02300a3775ba5575412aa6b1f94/libatomic%2Ftestsuite%2Flibatomic.c%2Fatomic-load-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ca7c8cb966f02300a3775ba5575412aa6b1f94/libatomic%2Ftestsuite%2Flibatomic.c%2Fatomic-load-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2Ftestsuite%2Flibatomic.c%2Fatomic-load-3.c?ref=a2ca7c8cb966f02300a3775ba5575412aa6b1f94", "patch": "@@ -1,13 +1,13 @@\n /* Test __atomic routines for existence and proper execution on 4 byte \n    values with each valid memory model.  */\n /* { dg-do run } */\n-/* { dg-require-effective-target sync_int_long } */\n \n extern void abort(void);\n \n int v, count;\n \n \n+int\n main ()\n {\n   v = 0;"}, {"sha": "97e46861d26d59ee23c030b6ab6d730baf0e34ed", "filename": "libatomic/testsuite/libatomic.c/atomic-load-4.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ca7c8cb966f02300a3775ba5575412aa6b1f94/libatomic%2Ftestsuite%2Flibatomic.c%2Fatomic-load-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ca7c8cb966f02300a3775ba5575412aa6b1f94/libatomic%2Ftestsuite%2Flibatomic.c%2Fatomic-load-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2Ftestsuite%2Flibatomic.c%2Fatomic-load-4.c?ref=a2ca7c8cb966f02300a3775ba5575412aa6b1f94", "patch": "@@ -1,14 +1,13 @@\n /* Test __atomic routines for existence and proper execution on 8 byte \n    values with each valid memory model.  */\n /* { dg-do run } */\n-/* { dg-require-effective-target sync_long_long_runtime } */\n /* { dg-options \"\" } */\n-/* { dg-options \"-march=pentium\" { target { { i?86-*-* x86_64-*-* } && ia32 } } } */\n \n extern void abort(void);\n \n long long v, count;\n \n+int\n main ()\n {\n   v = 0;"}, {"sha": "570539376380920231ceafdfce7c62cd1453604b", "filename": "libatomic/testsuite/libatomic.c/atomic-load-5.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ca7c8cb966f02300a3775ba5575412aa6b1f94/libatomic%2Ftestsuite%2Flibatomic.c%2Fatomic-load-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ca7c8cb966f02300a3775ba5575412aa6b1f94/libatomic%2Ftestsuite%2Flibatomic.c%2Fatomic-load-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2Ftestsuite%2Flibatomic.c%2Fatomic-load-5.c?ref=a2ca7c8cb966f02300a3775ba5575412aa6b1f94", "patch": "@@ -1,13 +1,13 @@\n /* Test __atomic routines for existence and proper execution on 16 byte \n    values with each valid memory model.  */\n /* { dg-do run } */\n-/* { dg-require-effective-target sync_int_128_runtime } */\n-/* { dg-options \"-mcx16\" { target { i?86-*-* x86_64-*-* } } } */\n+/* { dg-require-effective-target int128 } */\n \n extern void abort(void);\n \n __int128_t v, count;\n \n+int\n main ()\n {\n   v = 0;"}, {"sha": "56632291489d2f601c1c5bd24db7bbb9247cd764", "filename": "libatomic/testsuite/libatomic.c/atomic-op-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ca7c8cb966f02300a3775ba5575412aa6b1f94/libatomic%2Ftestsuite%2Flibatomic.c%2Fatomic-op-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ca7c8cb966f02300a3775ba5575412aa6b1f94/libatomic%2Ftestsuite%2Flibatomic.c%2Fatomic-op-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2Ftestsuite%2Flibatomic.c%2Fatomic-op-1.c?ref=a2ca7c8cb966f02300a3775ba5575412aa6b1f94", "patch": "@@ -1,7 +1,6 @@\n /* Test __atomic routines for existence and proper execution on 1 byte \n    values with each valid memory model.  */\n /* { dg-do run } */\n-/* { dg-require-effective-target sync_char_short } */\n \n /* Test the execution of the __atomic_*OP builtin routines for a char.  */\n \n@@ -527,6 +526,7 @@ test_or ()\n     abort ();\n }\n \n+int\n main ()\n {\n   test_fetch_add ();"}, {"sha": "436b206b4226550ab401aa11ba3bc7c74c258f9e", "filename": "libatomic/testsuite/libatomic.c/atomic-op-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ca7c8cb966f02300a3775ba5575412aa6b1f94/libatomic%2Ftestsuite%2Flibatomic.c%2Fatomic-op-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ca7c8cb966f02300a3775ba5575412aa6b1f94/libatomic%2Ftestsuite%2Flibatomic.c%2Fatomic-op-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2Ftestsuite%2Flibatomic.c%2Fatomic-op-2.c?ref=a2ca7c8cb966f02300a3775ba5575412aa6b1f94", "patch": "@@ -1,7 +1,6 @@\n /* Test __atomic routines for existence and proper execution on 2 byte \n    values with each valid memory model.  */\n /* { dg-do run } */\n-/* { dg-require-effective-target sync_char_short } */\n \n \n /* Test the execution of the __atomic_*OP builtin routines for a short.  */\n@@ -528,6 +527,7 @@ test_or ()\n     abort ();\n }\n \n+int\n main ()\n {\n   test_fetch_add ();"}, {"sha": "d72be2e9d3052e0b285e554bd35e3d059593ae69", "filename": "libatomic/testsuite/libatomic.c/atomic-op-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ca7c8cb966f02300a3775ba5575412aa6b1f94/libatomic%2Ftestsuite%2Flibatomic.c%2Fatomic-op-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ca7c8cb966f02300a3775ba5575412aa6b1f94/libatomic%2Ftestsuite%2Flibatomic.c%2Fatomic-op-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2Ftestsuite%2Flibatomic.c%2Fatomic-op-3.c?ref=a2ca7c8cb966f02300a3775ba5575412aa6b1f94", "patch": "@@ -1,7 +1,6 @@\n /* Test __atomic routines for existence and proper execution on 4 byte \n    values with each valid memory model.  */\n /* { dg-do run } */\n-/* { dg-require-effective-target sync_int_long } */\n \n /* Test the execution of the __atomic_*OP builtin routines for an int.  */\n \n@@ -527,6 +526,7 @@ test_or ()\n     abort ();\n }\n \n+int\n main ()\n {\n   test_fetch_add ();"}, {"sha": "0998c3a65483d1c495d6f40b86da583d8b9550ef", "filename": "libatomic/testsuite/libatomic.c/atomic-op-4.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ca7c8cb966f02300a3775ba5575412aa6b1f94/libatomic%2Ftestsuite%2Flibatomic.c%2Fatomic-op-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ca7c8cb966f02300a3775ba5575412aa6b1f94/libatomic%2Ftestsuite%2Flibatomic.c%2Fatomic-op-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2Ftestsuite%2Flibatomic.c%2Fatomic-op-4.c?ref=a2ca7c8cb966f02300a3775ba5575412aa6b1f94", "patch": "@@ -1,9 +1,7 @@\n /* Test __atomic routines for existence and proper execution on 8 byte \n    values with each valid memory model.  */\n /* { dg-do run } */\n-/* { dg-require-effective-target sync_long_long_runtime } */\n /* { dg-options \"\" } */\n-/* { dg-options \"-march=pentium\" { target { { i?86-*-* x86_64-*-* } && ia32 } } } */\n \n /* Test the execution of the __atomic_*OP builtin routines for long long.  */\n \n@@ -529,6 +527,7 @@ test_or ()\n     abort ();\n }\n \n+int\n main ()\n {\n   test_fetch_add ();"}, {"sha": "763880da0fc8ed9bf13ca9f828bd68377a280ca1", "filename": "libatomic/testsuite/libatomic.c/atomic-op-5.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ca7c8cb966f02300a3775ba5575412aa6b1f94/libatomic%2Ftestsuite%2Flibatomic.c%2Fatomic-op-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ca7c8cb966f02300a3775ba5575412aa6b1f94/libatomic%2Ftestsuite%2Flibatomic.c%2Fatomic-op-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2Ftestsuite%2Flibatomic.c%2Fatomic-op-5.c?ref=a2ca7c8cb966f02300a3775ba5575412aa6b1f94", "patch": "@@ -1,8 +1,7 @@\n /* Test __atomic routines for existence and proper execution on 16 byte \n    values with each valid memory model.  */\n /* { dg-do run } */\n-/* { dg-require-effective-target sync_int_128_runtime } */\n-/* { dg-options \"-mcx16\" { target { i?86-*-* x86_64-*-* } } } */\n+/* { dg-require-effective-target int128 } */\n \n /* Test the execution of the __atomic_*OP builtin routines for an int_128.  */\n \n@@ -528,6 +527,7 @@ test_or ()\n     abort ();\n }\n \n+int\n main ()\n {\n   test_fetch_add ();"}, {"sha": "019aa423f2e40db46db41e2d2e5755b2d67b6886", "filename": "libatomic/testsuite/libatomic.c/atomic-store-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ca7c8cb966f02300a3775ba5575412aa6b1f94/libatomic%2Ftestsuite%2Flibatomic.c%2Fatomic-store-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ca7c8cb966f02300a3775ba5575412aa6b1f94/libatomic%2Ftestsuite%2Flibatomic.c%2Fatomic-store-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2Ftestsuite%2Flibatomic.c%2Fatomic-store-1.c?ref=a2ca7c8cb966f02300a3775ba5575412aa6b1f94", "patch": "@@ -1,14 +1,14 @@\n /* Test __atomic routines for existence and proper execution on 1 byte \n    values with each valid memory model.  */\n /* { dg-do run } */\n-/* { dg-require-effective-target sync_char_short } */\n \n /* Test the execution of the __atomic_store_n builtin for a char.  */\n \n extern void abort(void);\n \n char v, count;\n \n+int\n main ()\n {\n   v = 0;"}, {"sha": "278152788fbbf58621bdf8bdfa3455dc614df4a5", "filename": "libatomic/testsuite/libatomic.c/atomic-store-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ca7c8cb966f02300a3775ba5575412aa6b1f94/libatomic%2Ftestsuite%2Flibatomic.c%2Fatomic-store-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ca7c8cb966f02300a3775ba5575412aa6b1f94/libatomic%2Ftestsuite%2Flibatomic.c%2Fatomic-store-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2Ftestsuite%2Flibatomic.c%2Fatomic-store-2.c?ref=a2ca7c8cb966f02300a3775ba5575412aa6b1f94", "patch": "@@ -1,14 +1,14 @@\n /* Test __atomic routines for existence and proper execution on 2 byte \n    values with each valid memory model.  */\n /* { dg-do run } */\n-/* { dg-require-effective-target sync_char_short } */\n \n /* Test the execution of the __atomic_store_n builtin for a short.  */\n \n extern void abort(void);\n \n short v, count;\n \n+int\n main ()\n {\n   v = 0;"}, {"sha": "dbbb32d86cdc4969e68c66a8758a059c19c946e7", "filename": "libatomic/testsuite/libatomic.c/atomic-store-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ca7c8cb966f02300a3775ba5575412aa6b1f94/libatomic%2Ftestsuite%2Flibatomic.c%2Fatomic-store-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ca7c8cb966f02300a3775ba5575412aa6b1f94/libatomic%2Ftestsuite%2Flibatomic.c%2Fatomic-store-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2Ftestsuite%2Flibatomic.c%2Fatomic-store-3.c?ref=a2ca7c8cb966f02300a3775ba5575412aa6b1f94", "patch": "@@ -1,14 +1,14 @@\n /* Test __atomic routines for existence and proper execution on 4 byte \n    values with each valid memory model.  */\n /* { dg-do run } */\n-/* { dg-require-effective-target sync_int_long } */\n \n /* Test the execution of the __atomic_store_n builtin for an int.  */\n \n extern void abort(void);\n \n int v, count;\n \n+int\n main ()\n {\n   v = 0;"}, {"sha": "a69b9d07896cf2e8750c0210903bedb6fa5fe1a2", "filename": "libatomic/testsuite/libatomic.c/atomic-store-4.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ca7c8cb966f02300a3775ba5575412aa6b1f94/libatomic%2Ftestsuite%2Flibatomic.c%2Fatomic-store-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ca7c8cb966f02300a3775ba5575412aa6b1f94/libatomic%2Ftestsuite%2Flibatomic.c%2Fatomic-store-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2Ftestsuite%2Flibatomic.c%2Fatomic-store-4.c?ref=a2ca7c8cb966f02300a3775ba5575412aa6b1f94", "patch": "@@ -1,16 +1,15 @@\n /* Test __atomic routines for existence and proper execution on 8 byte \n    values with each valid memory model.  */\n /* { dg-do run } */\n-/* { dg-require-effective-target sync_long_long_runtime } */\n /* { dg-options \"\" } */\n-/* { dg-options \"-march=pentium\" { target { { i?86-*-* x86_64-*-* } && ia32 } } } */\n \n /* Test the execution of the __atomic_store_n builtin for a long long.  */\n \n extern void abort(void);\n \n long long v, count;\n \n+int\n main ()\n {\n   v = 0;"}, {"sha": "16440ce005901dbd268bf92d5145d4f993c7da42", "filename": "libatomic/testsuite/libatomic.c/atomic-store-5.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ca7c8cb966f02300a3775ba5575412aa6b1f94/libatomic%2Ftestsuite%2Flibatomic.c%2Fatomic-store-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ca7c8cb966f02300a3775ba5575412aa6b1f94/libatomic%2Ftestsuite%2Flibatomic.c%2Fatomic-store-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2Ftestsuite%2Flibatomic.c%2Fatomic-store-5.c?ref=a2ca7c8cb966f02300a3775ba5575412aa6b1f94", "patch": "@@ -1,15 +1,15 @@\n /* Test __atomic routines for existence and proper execution on 16 byte \n    values with each valid memory model.  */\n /* { dg-do run } */\n-/* { dg-require-effective-target sync_int_128_runtime } */\n-/* { dg-options \"-mcx16\" { target { i?86-*-* x86_64-*-* } } } */\n+/* { dg-require-effective-target int128 } */\n \n /* Test the execution of the __atomic_store_n builtin for a 16 byte value.  */\n \n extern void abort(void);\n \n __int128_t v, count;\n \n+int\n main ()\n {\n   v = 0;"}]}