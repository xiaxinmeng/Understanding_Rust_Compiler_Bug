{"sha": "edc5bbcd8f2becdd035195f0a4e6e0e880b3d28d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWRjNWJiY2Q4ZjJiZWNkZDAzNTE5NWYwYTRlNmUwZTg4MGIzZDI4ZA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2007-06-07T18:31:40Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2007-06-07T18:31:40Z"}, "message": "i386.md (standard sse constant splitter): Handle TFmode.\n\n        * config/i386/i386.md (standard sse constant splitter): Handle TFmode.\n        (negtf2, abstf2, *absnegtf2_sse): New insn patterns.\n        (CSGNMODE): New mode macro.\n        (CSGNVMODE): New mode attribute.\n        (copysign<mode>3): Rename from copysingsf3 and copysigndf3.  Macroize\n        expander using CSGNMODE mode macro.  Handle TFmode.\n        (copysign<mode>3_const): Rename from copysignsf3_const and\n        copysigndf3_const.  Macroize pattern using CSGNMODE mode macro.\n        Handle TFmode.\n        (copysign<mode>3_var): Rename from copysignsf3_var and\n        copysigndf3_var.  Macroize pattern using CSGNMODE mode macro.\n        Handle TFmode.\n        (copysign<mode>3_var splitter): Macroize pattern using CSGNMODE\n        mode macro.  Handle TFmode.\n        * config/i386/sse.md (andtf3, *andtf3, *nandtf3): New insn patterns.\n        (iortf3, *iortf3): Ditto.\n        (xortf3, *xortf3): Ditto.\n        * config/i386/i386.c (ix86_build_signbit_mask): Create scalar\n        TFmode and TImode masks.\n        (ix86_expand_copysign): Expand TFmode copysign insn.\n        (IX86_BUILTIN_INFQ): New.\n        (IX86_BUILTIN_FABSQ): Ditto.\n        (IX86_BUILTIN_COPYSIGNQ): Ditto.\n        (ix86_init_mmx_sse_builtins) [__builtin_infq]: New builtin definition.\n        [__builtin_fabsq]: Ditto.\n        [__builtin_copysignq]: Ditto.\n        (ix86_expand_builtin) [IX86_BUILTIN_INFQ]: Expand builtin.\n        [IX86_BUILTIN_FABSQ]: Expand builtin using ix86_expand_unop_builtin().\n        [IX86_BUILTIN_COPYSIGNQ]: Expand builtin using\n        ix86_expand_unop_builtin().\n\ntestsuite/ChangeLog:\n    \n        * gcc.target/i386/builtin-copysign.c: New test.\n\nFrom-SVN: r125535", "tree": {"sha": "443622ba397e46afad2dd19365e5275d03f2304c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/443622ba397e46afad2dd19365e5275d03f2304c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/edc5bbcd8f2becdd035195f0a4e6e0e880b3d28d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edc5bbcd8f2becdd035195f0a4e6e0e880b3d28d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/edc5bbcd8f2becdd035195f0a4e6e0e880b3d28d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edc5bbcd8f2becdd035195f0a4e6e0e880b3d28d/comments", "author": null, "committer": null, "parents": [{"sha": "125253d945a40bc7e56a40dc45b7cf1af77fba53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/125253d945a40bc7e56a40dc45b7cf1af77fba53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/125253d945a40bc7e56a40dc45b7cf1af77fba53"}], "stats": {"total": 442, "additions": 306, "deletions": 136}, "files": [{"sha": "dbd3526926a95f1e0260bcb533a3b17dce6d2b7c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edc5bbcd8f2becdd035195f0a4e6e0e880b3d28d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edc5bbcd8f2becdd035195f0a4e6e0e880b3d28d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=edc5bbcd8f2becdd035195f0a4e6e0e880b3d28d", "patch": "@@ -1,3 +1,36 @@\n+2007-06-07  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (standard sse constant splitter): Handle TFmode.\n+\t(negtf2, abstf2, *absnegtf2_sse): New insn patterns.\n+\t(CSGNMODE): New mode macro.\n+\t(CSGNVMODE): New mode attribute.\n+\t(copysign<mode>3): Rename from copysingsf3 and copysigndf3.  Macroize\n+\texpander using CSGNMODE mode macro.  Handle TFmode.\n+\t(copysign<mode>3_const): Rename from copysignsf3_const and\n+\tcopysigndf3_const.  Macroize pattern using CSGNMODE mode macro.\n+\tHandle TFmode.\n+\t(copysign<mode>3_var): Rename from copysignsf3_var and\n+\tcopysigndf3_var.  Macroize pattern using CSGNMODE mode macro.\n+\tHandle TFmode.\n+\t(copysign<mode>3_var splitter): Macroize pattern using CSGNMODE\n+\tmode macro.  Handle TFmode.\n+\t* config/i386/sse.md (andtf3, *andtf3, *nandtf3): New insn patterns.\n+\t(iortf3, *iortf3): Ditto.\n+\t(xortf3, *xortf3): Ditto.\n+\t* config/i386/i386.c (ix86_build_signbit_mask): Create scalar\n+\tTFmode and TImode masks.\n+\t(ix86_expand_copysign): Expand TFmode copysign insn.\n+\t(IX86_BUILTIN_INFQ): New.\n+\t(IX86_BUILTIN_FABSQ): Ditto.\n+\t(IX86_BUILTIN_COPYSIGNQ): Ditto.\n+\t(ix86_init_mmx_sse_builtins) [__builtin_infq]: New builtin definition.\n+\t[__builtin_fabsq]: Ditto.\n+\t[__builtin_copysignq]: Ditto.\n+\t(ix86_expand_builtin) [IX86_BUILTIN_INFQ]: Expand builtin.\n+\t[IX86_BUILTIN_FABSQ]: Expand builtin using ix86_expand_unop_builtin().\n+\t[IX86_BUILTIN_COPYSIGNQ]: Expand builtin using\n+\tix86_expand_unop_builtin().\n+\n 2007-06-07  Bob Wilson  <bob.wilson@acm.org>\n \n \t* config/xtensa/lib1funcs.asm: Clean up whitespace."}, {"sha": "c8939004d5e27ec6305541e16e226debd2860e1c", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 98, "deletions": 25, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edc5bbcd8f2becdd035195f0a4e6e0e880b3d28d/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edc5bbcd8f2becdd035195f0a4e6e0e880b3d28d/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=edc5bbcd8f2becdd035195f0a4e6e0e880b3d28d", "patch": "@@ -10632,6 +10632,14 @@ ix86_build_signbit_mask (enum machine_mode mode, bool vect, bool invert)\n \tlo = 0, hi = (HOST_WIDE_INT)1 << (shift - HOST_BITS_PER_WIDE_INT);\n       break;\n \n+    case TImode:\n+    case TFmode:\n+      imode = TImode;\n+      vec_mode = VOIDmode;\n+      gcc_assert (HOST_BITS_PER_WIDE_INT >= 64);\n+      lo = 0, hi = (HOST_WIDE_INT)1 << shift;\n+     break;\n+\n     default:\n       gcc_unreachable ();\n     }\n@@ -10643,6 +10651,9 @@ ix86_build_signbit_mask (enum machine_mode mode, bool vect, bool invert)\n   mask = immed_double_const (lo, hi, imode);\n   mask = gen_lowpart (mode, mask);\n \n+  if (vec_mode == VOIDmode)\n+    return force_reg (mode, mask);\n+\n   v = ix86_build_const_vector (mode, vect, mask);\n   return force_reg (vec_mode, v);\n }\n@@ -10664,6 +10675,8 @@ ix86_expand_fp_absneg_operator (enum rtx_code code, enum machine_mode mode,\n       elt_mode = GET_MODE_INNER (mode);\n       use_sse = true;\n     }\n+  else if (mode == TFmode)\n+    use_sse = true;\n   else if (TARGET_SSE_MATH)\n     use_sse = SSE_FLOAT_MODE_P (mode);\n \n@@ -10732,39 +10745,54 @@ ix86_expand_copysign (rtx operands[])\n \n   if (GET_CODE (op0) == CONST_DOUBLE)\n     {\n-      rtvec v;\n+      rtx (*copysign_insn)(rtx, rtx, rtx, rtx);\n \n       if (real_isneg (CONST_DOUBLE_REAL_VALUE (op0)))\n \top0 = simplify_unary_operation (ABS, mode, op0, mode);\n \n-      if (op0 == CONST0_RTX (mode))\n-\top0 = CONST0_RTX (vmode);\n-      else\n-        {\n-\t  if (mode == SFmode)\n-\t    v = gen_rtvec (4, op0, CONST0_RTX (SFmode),\n-                           CONST0_RTX (SFmode), CONST0_RTX (SFmode));\n+      if (mode == SFmode || mode == DFmode)\n+\t{\n+\t  if (op0 == CONST0_RTX (mode))\n+\t    op0 = CONST0_RTX (vmode);\n \t  else\n-\t    v = gen_rtvec (2, op0, CONST0_RTX (DFmode));\n-          op0 = force_reg (vmode, gen_rtx_CONST_VECTOR (vmode, v));\n+\t    {\n+\t      rtvec v;\n+\n+\t      if (mode == SFmode)\n+\t\tv = gen_rtvec (4, op0, CONST0_RTX (SFmode),\n+\t\t\t       CONST0_RTX (SFmode), CONST0_RTX (SFmode));\n+\t      else\n+\t\tv = gen_rtvec (2, op0, CONST0_RTX (DFmode));\n+\t      op0 = force_reg (vmode, gen_rtx_CONST_VECTOR (vmode, v));\n+\t    }\n \t}\n \n       mask = ix86_build_signbit_mask (mode, 0, 0);\n \n       if (mode == SFmode)\n-\temit_insn (gen_copysignsf3_const (dest, op0, op1, mask));\n+\tcopysign_insn = gen_copysignsf3_const;\n+      else if (mode == DFmode)\n+\tcopysign_insn = gen_copysigndf3_const;\n       else\n-\temit_insn (gen_copysigndf3_const (dest, op0, op1, mask));\n+\tcopysign_insn = gen_copysigntf3_const;\n+\n+\temit_insn (copysign_insn (dest, op0, op1, mask));\n     }\n   else\n     {\n+      rtx (*copysign_insn)(rtx, rtx, rtx, rtx, rtx, rtx);\n+\n       nmask = ix86_build_signbit_mask (mode, 0, 1);\n       mask = ix86_build_signbit_mask (mode, 0, 0);\n \n       if (mode == SFmode)\n-\temit_insn (gen_copysignsf3_var (dest, NULL, op0, op1, nmask, mask));\n+\tcopysign_insn = gen_copysignsf3_var;\n+      else if (mode == DFmode)\n+\tcopysign_insn = gen_copysigndf3_var;\n       else\n-\temit_insn (gen_copysigndf3_var (dest, NULL, op0, op1, nmask, mask));\n+\tcopysign_insn = gen_copysigntf3_var;\n+\n+      emit_insn (copysign_insn (dest, NULL_RTX, op0, op1, nmask, mask));\n     }\n }\n \n@@ -16808,6 +16836,11 @@ enum ix86_builtins\n \n   IX86_BUILTIN_PCMPGTQ,\n \n+  /* TFmode support builtins.  */\n+  IX86_BUILTIN_INFQ,\n+  IX86_BUILTIN_FABSQ,\n+  IX86_BUILTIN_COPYSIGNQ,\n+\n   IX86_BUILTIN_MAX\n };\n \n@@ -17706,9 +17739,6 @@ ix86_init_mmx_sse_builtins (void)\n \t\t\t\tV16QI_type_node,\n \t\t\t\tinteger_type_node,\n \t\t\t\tNULL_TREE);\n-\n-  tree float80_type;\n-  tree float128_type;\n   tree ftype;\n \n   /* The __float80 type.  */\n@@ -17718,18 +17748,38 @@ ix86_init_mmx_sse_builtins (void)\n   else\n     {\n       /* The __float80 type.  */\n-      float80_type = make_node (REAL_TYPE);\n-      TYPE_PRECISION (float80_type) = 80;\n-      layout_type (float80_type);\n-      (*lang_hooks.types.register_builtin_type) (float80_type, \"__float80\");\n+      tree float80_type_node = make_node (REAL_TYPE);\n+\n+      TYPE_PRECISION (float80_type_node) = 80;\n+      layout_type (float80_type_node);\n+      (*lang_hooks.types.register_builtin_type) (float80_type_node,\n+\t\t\t\t\t\t \"__float80\");\n     }\n \n   if (TARGET_64BIT)\n     {\n-      float128_type = make_node (REAL_TYPE);\n-      TYPE_PRECISION (float128_type) = 128;\n-      layout_type (float128_type);\n-      (*lang_hooks.types.register_builtin_type) (float128_type, \"__float128\");\n+      tree float128_type_node = make_node (REAL_TYPE);\n+\n+      TYPE_PRECISION (float128_type_node) = 128;\n+      layout_type (float128_type_node);\n+      (*lang_hooks.types.register_builtin_type) (float128_type_node,\n+\t\t\t\t\t\t \"__float128\");\n+\n+      /* TFmode support builtins.  */\n+      ftype = build_function_type (float128_type_node,\n+\t\t\t\t   void_list_node);\n+      def_builtin_const (OPTION_MASK_ISA_64BIT, \"__builtin_infq\", ftype, IX86_BUILTIN_INFQ);\n+\n+      ftype = build_function_type_list (float128_type_node,\n+\t\t\t\t\tfloat128_type_node,\n+\t\t\t\t\tNULL_TREE);\n+      def_builtin_const (OPTION_MASK_ISA_64BIT, \"__builtin_fabsq\", ftype, IX86_BUILTIN_FABSQ);\n+\n+      ftype = build_function_type_list (float128_type_node,\n+\t\t\t\t\tfloat128_type_node,\n+\t\t\t\t\tfloat128_type_node,\n+\t\t\t\t\tNULL_TREE);\n+      def_builtin (OPTION_MASK_ISA_64BIT, \"__builtin_copysignq\", ftype, IX86_BUILTIN_COPYSIGNQ);\n     }\n \n   /* Add all SSE builtins that are more or less simple operations on\n@@ -19687,6 +19737,29 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n     case IX86_BUILTIN_VEC_SET_V16QI:\n       return ix86_expand_vec_set_builtin (exp);\n \n+    case IX86_BUILTIN_INFQ:\n+      {\n+\tREAL_VALUE_TYPE inf;\n+\trtx tmp;\n+\n+\treal_inf (&inf);\n+\ttmp = CONST_DOUBLE_FROM_REAL_VALUE (inf, mode);\n+\n+\ttmp = validize_mem (force_const_mem (mode, tmp));\n+\n+\tif (target == 0)\n+\t  target = gen_reg_rtx (mode);\n+\n+\temit_move_insn (target, tmp);\n+\treturn target;\n+      }\n+\n+    case IX86_BUILTIN_FABSQ:\n+      return ix86_expand_unop_builtin (CODE_FOR_abstf2, exp, target, 0);\n+\n+    case IX86_BUILTIN_COPYSIGNQ:\n+      return ix86_expand_binop_builtin (CODE_FOR_copysigntf3, exp, target);\n+\n     default:\n       break;\n     }"}, {"sha": "641b6a1692daba90e21d77333dec1da87dc0d573", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 88, "deletions": 109, "changes": 197, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edc5bbcd8f2becdd035195f0a4e6e0e880b3d28d/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edc5bbcd8f2becdd035195f0a4e6e0e880b3d28d/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=edc5bbcd8f2becdd035195f0a4e6e0e880b3d28d", "patch": "@@ -3035,7 +3035,8 @@\n \t(match_operand 1 \"memory_operand\" \"\"))]\n   \"reload_completed\n    && MEM_P (operands[1])\n-   && (GET_MODE (operands[0]) == XFmode\n+   && (GET_MODE (operands[0]) == TFmode\n+       || GET_MODE (operands[0]) == XFmode\n        || GET_MODE (operands[0]) == SFmode\n        || GET_MODE (operands[0]) == DFmode)\n    && (operands[2] = find_constant_src (insn))\"\n@@ -9651,60 +9652,6 @@\n    && ix86_unary_operator_ok (GET_CODE (operands[3]), SFmode, operands)\"\n   \"#\")\n \n-(define_expand \"copysignsf3\"\n-  [(match_operand:SF 0 \"register_operand\" \"\")\n-   (match_operand:SF 1 \"nonmemory_operand\" \"\")\n-   (match_operand:SF 2 \"register_operand\" \"\")]\n-  \"TARGET_SSE_MATH\"\n-{\n-  ix86_expand_copysign (operands);\n-  DONE;\n-})\n-\n-(define_insn_and_split \"copysignsf3_const\"\n-  [(set (match_operand:SF 0 \"register_operand\"          \"=x\")\n-\t(unspec:SF\n-\t  [(match_operand:V4SF 1 \"vector_move_operand\"  \"xmC\")\n-\t   (match_operand:SF 2 \"register_operand\"       \"0\")\n-\t   (match_operand:V4SF 3 \"nonimmediate_operand\" \"xm\")]\n-\t  UNSPEC_COPYSIGN))]\n-  \"TARGET_SSE_MATH\"\n-  \"#\"\n-  \"&& reload_completed\"\n-  [(const_int 0)]\n-{\n-  ix86_split_copysign_const (operands);\n-  DONE;\n-})\n-\n-(define_insn \"copysignsf3_var\"\n-  [(set (match_operand:SF 0 \"register_operand\"          \"=x, x, x, x,x\")\n-\t(unspec:SF\n-\t  [(match_operand:SF 2 \"register_operand\"       \" x, 0, 0, x,x\")\n-\t   (match_operand:SF 3 \"register_operand\"       \" 1, 1, x, 1,x\")\n-\t   (match_operand:V4SF 4 \"nonimmediate_operand\" \" X,xm,xm, 0,0\")\n-\t   (match_operand:V4SF 5 \"nonimmediate_operand\" \" 0,xm, 1,xm,1\")]\n-\t  UNSPEC_COPYSIGN))\n-   (clobber (match_scratch:V4SF 1\t\t\t\"=x, x, x, x,x\"))]\n-  \"TARGET_SSE_MATH\"\n-  \"#\")\n-\n-(define_split\n-  [(set (match_operand:SF 0 \"register_operand\" \"\")\n-\t(unspec:SF\n-\t  [(match_operand:SF 2 \"register_operand\" \"\")\n-\t   (match_operand:SF 3 \"register_operand\" \"\")\n-\t   (match_operand:V4SF 4 \"\" \"\")\n-\t   (match_operand:V4SF 5 \"\" \"\")]\n-\t  UNSPEC_COPYSIGN))\n-   (clobber (match_scratch:V4SF 1 \"\"))]\n-  \"TARGET_SSE_MATH && reload_completed\"\n-  [(const_int 0)]\n-{\n-  ix86_split_copysign_var (operands);\n-  DONE;\n-})\n-\n (define_expand \"negdf2\"\n   [(set (match_operand:DF 0 \"nonimmediate_operand\" \"\")\n \t(neg:DF (match_operand:DF 1 \"nonimmediate_operand\" \"\")))]\n@@ -9747,60 +9694,6 @@\n    && ix86_unary_operator_ok (GET_CODE (operands[3]), DFmode, operands)\"\n   \"#\")\n \n-(define_expand \"copysigndf3\"\n-  [(match_operand:DF 0 \"register_operand\" \"\")\n-   (match_operand:DF 1 \"nonmemory_operand\" \"\")\n-   (match_operand:DF 2 \"register_operand\" \"\")]\n-  \"TARGET_SSE2 && TARGET_SSE_MATH\"\n-{\n-  ix86_expand_copysign (operands);\n-  DONE;\n-})\n-\n-(define_insn_and_split \"copysigndf3_const\"\n-  [(set (match_operand:DF 0 \"register_operand\"          \"=x\")\n-\t(unspec:DF\n-\t  [(match_operand:V2DF 1 \"vector_move_operand\"  \"xmC\")\n-\t   (match_operand:DF 2 \"register_operand\"       \"0\")\n-\t   (match_operand:V2DF 3 \"nonimmediate_operand\" \"xm\")]\n-\t  UNSPEC_COPYSIGN))]\n-  \"TARGET_SSE2 && TARGET_SSE_MATH\"\n-  \"#\"\n-  \"&& reload_completed\"\n-  [(const_int 0)]\n-{\n-  ix86_split_copysign_const (operands);\n-  DONE;\n-})\n-\n-(define_insn \"copysigndf3_var\"\n-  [(set (match_operand:DF 0 \"register_operand\"          \"=x, x, x, x,x\")\n-\t(unspec:DF\n-\t  [(match_operand:DF 2 \"register_operand\"       \" x, 0, 0, x,x\")\n-\t   (match_operand:DF 3 \"register_operand\"       \" 1, 1, x, 1,x\")\n-\t   (match_operand:V2DF 4 \"nonimmediate_operand\" \" X,xm,xm, 0,0\")\n-\t   (match_operand:V2DF 5 \"nonimmediate_operand\" \" 0,xm, 1,xm,1\")]\n-\t  UNSPEC_COPYSIGN))\n-   (clobber (match_scratch:V2DF 1\t\t\t\"=x, x, x, x,x\"))]\n-  \"TARGET_SSE2 && TARGET_SSE_MATH\"\n-  \"#\")\n-\n-(define_split\n-  [(set (match_operand:DF 0 \"register_operand\" \"\")\n-\t(unspec:DF\n-\t  [(match_operand:DF 2 \"register_operand\" \"\")\n-\t   (match_operand:DF 3 \"register_operand\" \"\")\n-\t   (match_operand:V2DF 4 \"\" \"\")\n-\t   (match_operand:V2DF 5 \"\" \"\")]\n-\t  UNSPEC_COPYSIGN))\n-   (clobber (match_scratch:V2DF 1 \"\"))]\n-  \"TARGET_SSE2 && TARGET_SSE_MATH && reload_completed\"\n-  [(const_int 0)]\n-{\n-  ix86_split_copysign_var (operands);\n-  DONE;\n-})\n-\n (define_expand \"negxf2\"\n   [(set (match_operand:XF 0 \"nonimmediate_operand\" \"\")\n \t(neg:XF (match_operand:XF 1 \"nonimmediate_operand\" \"\")))]\n@@ -9823,6 +9716,28 @@\n    && ix86_unary_operator_ok (GET_CODE (operands[3]), XFmode, operands)\"\n   \"#\")\n \n+(define_expand \"negtf2\"\n+  [(set (match_operand:TF 0 \"nonimmediate_operand\" \"\")\n+\t(neg:TF (match_operand:TF 1 \"nonimmediate_operand\" \"\")))]\n+  \"TARGET_64BIT\"\n+  \"ix86_expand_fp_absneg_operator (NEG, TFmode, operands); DONE;\")\n+\n+(define_expand \"abstf2\"\n+  [(set (match_operand:TF 0 \"nonimmediate_operand\" \"\")\n+\t(abs:TF (match_operand:TF 1 \"nonimmediate_operand\" \"\")))]\n+  \"TARGET_64BIT\"\n+  \"ix86_expand_fp_absneg_operator (ABS, TFmode, operands); DONE;\")\n+\n+(define_insn \"*absnegtf2_sse\"\n+  [(set (match_operand:TF 0 \"nonimmediate_operand\"    \"=x,x,m\")\n+\t(match_operator:TF 3 \"absneg_operator\"\n+\t  [(match_operand:TF 1 \"nonimmediate_operand\" \"0, x,0\")]))\n+   (use (match_operand:TF 2 \"nonimmediate_operand\"    \"xm,0,X\"))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_64BIT\n+   && ix86_unary_operator_ok (GET_CODE (operands[3]), TFmode, operands)\"\n+  \"#\")\n+\n ;; Splitters for fp abs and neg.\n \n (define_split\n@@ -10080,6 +9995,70 @@\n   \"fabs\"\n   [(set_attr \"type\" \"fsgn\")\n    (set_attr \"mode\" \"XF\")])\n+\n+;; Copysign instructions\n+\n+(define_mode_macro CSGNMODE [SF DF TF])\n+(define_mode_attr CSGNVMODE [(SF \"V4SF\") (DF \"V2DF\") (TF \"TF\")])\n+\n+(define_expand \"copysign<mode>3\"\n+  [(match_operand:CSGNMODE 0 \"register_operand\" \"\")\n+   (match_operand:CSGNMODE 1 \"nonmemory_operand\" \"\")\n+   (match_operand:CSGNMODE 2 \"register_operand\" \"\")]\n+  \"(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n+   || (TARGET_64BIT && (<MODE>mode == TFmode))\"\n+{\n+  ix86_expand_copysign (operands);\n+  DONE;\n+})\n+\n+(define_insn_and_split \"copysign<mode>3_const\"\n+  [(set (match_operand:CSGNMODE 0 \"register_operand\" \"=x\")\n+\t(unspec:CSGNMODE\n+\t  [(match_operand:<CSGNVMODE> 1 \"vector_move_operand\" \"xmC\")\n+\t   (match_operand:CSGNMODE 2 \"register_operand\" \"0\")\n+\t   (match_operand:<CSGNVMODE> 3 \"nonimmediate_operand\" \"xm\")]\n+\t  UNSPEC_COPYSIGN))]\n+  \"(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n+   || (TARGET_64BIT && (<MODE>mode == TFmode))\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(const_int 0)]\n+{\n+  ix86_split_copysign_const (operands);\n+  DONE;\n+})\n+\n+(define_insn \"copysign<mode>3_var\"\n+  [(set (match_operand:CSGNMODE 0 \"register_operand\" \"=x,x,x,x,x\")\n+\t(unspec:CSGNMODE\n+\t  [(match_operand:CSGNMODE 2 \"register_operand\"\t\"x,0,0,x,x\")\n+\t   (match_operand:CSGNMODE 3 \"register_operand\"\t\"1,1,x,1,x\")\n+\t   (match_operand:<CSGNVMODE> 4 \"nonimmediate_operand\" \"X,xm,xm,0,0\")\n+\t   (match_operand:<CSGNVMODE> 5 \"nonimmediate_operand\" \"0,xm,1,xm,1\")]\n+\t  UNSPEC_COPYSIGN))\n+   (clobber (match_scratch:<CSGNVMODE> 1 \"=x,x,x,x,x\"))]\n+  \"(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n+   || (TARGET_64BIT && (<MODE>mode == TFmode))\"\n+  \"#\")\n+\n+(define_split\n+  [(set (match_operand:CSGNMODE 0 \"register_operand\" \"\")\n+\t(unspec:CSGNMODE\n+\t  [(match_operand:CSGNMODE 2 \"register_operand\" \"\")\n+\t   (match_operand:CSGNMODE 3 \"register_operand\" \"\")\n+\t   (match_operand:<CSGNVMODE> 4 \"\" \"\")\n+\t   (match_operand:<CSGNVMODE> 5 \"\" \"\")]\n+\t  UNSPEC_COPYSIGN))\n+   (clobber (match_scratch:<CSGNVMODE> 1 \"\"))]\n+  \"((SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n+    || (TARGET_64BIT && (<MODE>mode == TFmode)))\n+   && reload_completed\"\n+  [(const_int 0)]\n+{\n+  ix86_split_copysign_var (operands);\n+  DONE;\n+})\n \f\n ;; One complement instructions\n "}, {"sha": "deb3c43cc34c377092b0ae48fd3d226d1e8fe758", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 66, "deletions": 1, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edc5bbcd8f2becdd035195f0a4e6e0e880b3d28d/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edc5bbcd8f2becdd035195f0a4e6e0e880b3d28d/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=edc5bbcd8f2becdd035195f0a4e6e0e880b3d28d", "patch": "@@ -3677,7 +3677,7 @@\n \n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n ;;\n-;; Parallel integral logical operations\n+;; Parallel bitwise logical operations\n ;;\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n \n@@ -3725,6 +3725,35 @@\n    (set_attr \"prefix_data16\" \"1\")\n    (set_attr \"mode\" \"TI\")])\n \n+(define_expand \"andtf3\"\n+  [(set (match_operand:TF 0 \"register_operand\" \"\")\n+\t(and:TF (match_operand:TF 1 \"nonimmediate_operand\" \"\")\n+\t\t(match_operand:TF 2 \"nonimmediate_operand\" \"\")))]\n+  \"TARGET_64BIT\"\n+  \"ix86_fixup_binary_operands_no_copy (AND, TFmode, operands);\")\n+\n+(define_insn \"*andtf3\"\n+  [(set (match_operand:TF 0 \"register_operand\" \"=x\")\n+\t(and:TF\n+\t  (match_operand:TF 1 \"nonimmediate_operand\" \"%0\")\n+\t  (match_operand:TF 2 \"nonimmediate_operand\" \"xm\")))]\n+  \"TARGET_64BIT && ix86_binary_operator_ok (AND, TFmode, operands)\"\n+  \"pand\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix_data16\" \"1\")\n+   (set_attr \"mode\" \"TI\")])\n+\n+(define_insn \"*nandtf3\"\n+  [(set (match_operand:TF 0 \"register_operand\" \"=x\")\n+\t(and:TF\n+\t  (not:TF (match_operand:TF 1 \"register_operand\" \"0\"))\n+\t  (match_operand:TF 2 \"nonimmediate_operand\" \"xm\")))]\n+  \"TARGET_64BIT\"\n+  \"pandn\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix_data16\" \"1\")\n+   (set_attr \"mode\" \"TI\")])\n+\n (define_expand \"ior<mode>3\"\n   [(set (match_operand:SSEMODEI 0 \"register_operand\" \"\")\n \t(ior:SSEMODEI (match_operand:SSEMODEI 1 \"nonimmediate_operand\" \"\")\n@@ -3743,6 +3772,24 @@\n    (set_attr \"prefix_data16\" \"1\")\n    (set_attr \"mode\" \"TI\")])\n \n+(define_expand \"iortf3\"\n+  [(set (match_operand:TF 0 \"register_operand\" \"\")\n+\t(ior:TF (match_operand:TF 1 \"nonimmediate_operand\" \"\")\n+\t\t(match_operand:TF 2 \"nonimmediate_operand\" \"\")))]\n+  \"TARGET_64BIT\"\n+  \"ix86_fixup_binary_operands_no_copy (IOR, TFmode, operands);\")\n+\n+(define_insn \"*iortf3\"\n+  [(set (match_operand:TF 0 \"register_operand\" \"=x\")\n+\t(ior:TF\n+\t  (match_operand:TF 1 \"nonimmediate_operand\" \"%0\")\n+\t  (match_operand:TF 2 \"nonimmediate_operand\" \"xm\")))]\n+  \"TARGET_64BIT && ix86_binary_operator_ok (IOR, TFmode, operands)\"\n+  \"por\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix_data16\" \"1\")\n+   (set_attr \"mode\" \"TI\")])\n+\n (define_expand \"xor<mode>3\"\n   [(set (match_operand:SSEMODEI 0 \"register_operand\" \"\")\n \t(xor:SSEMODEI (match_operand:SSEMODEI 1 \"nonimmediate_operand\" \"\")\n@@ -3761,6 +3808,24 @@\n    (set_attr \"prefix_data16\" \"1\")\n    (set_attr \"mode\" \"TI\")])\n \n+(define_expand \"xortf3\"\n+  [(set (match_operand:TF 0 \"register_operand\" \"\")\n+\t(xor:TF (match_operand:TF 1 \"nonimmediate_operand\" \"\")\n+\t\t(match_operand:TF 2 \"nonimmediate_operand\" \"\")))]\n+  \"TARGET_64BIT\"\n+  \"ix86_fixup_binary_operands_no_copy (XOR, TFmode, operands);\")\n+\n+(define_insn \"*xortf3\"\n+  [(set (match_operand:TF 0 \"register_operand\" \"=x\")\n+\t(xor:TF\n+\t  (match_operand:TF 1 \"nonimmediate_operand\" \"%0\")\n+\t  (match_operand:TF 2 \"nonimmediate_operand\" \"xm\")))]\n+  \"TARGET_64BIT && ix86_binary_operator_ok (XOR, TFmode, operands)\"\n+  \"pxor\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix_data16\" \"1\")\n+   (set_attr \"mode\" \"TI\")])\n+\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n ;;\n ;; Parallel integral element swizzling"}, {"sha": "0ee92f63d3340be9496095d8958b5c560307da32", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edc5bbcd8f2becdd035195f0a4e6e0e880b3d28d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edc5bbcd8f2becdd035195f0a4e6e0e880b3d28d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=edc5bbcd8f2becdd035195f0a4e6e0e880b3d28d", "patch": "@@ -1,3 +1,7 @@\n+2007-06-07  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* gcc.target/i386/builtin-copysign.c: New test.\n+\n 2007-06-07  Zdenek Dvorak  <dvorakz@suse.cz>\n \n \tPR tree-optimization/32220\n@@ -365,7 +369,7 @@\n \t* gcc.target/arm/long-calls-4.c: Likewise.\n \n 2007-05-25  Richard Guenther  <rguenther@suse.de>\n-\tAndrew Pinski  <andrew_pinski@playstation.sony.com>\n+\t    Andrew Pinski  <andrew_pinski@playstation.sony.com>\n \n \tPR tree-optimization/31982\n \t* gcc.dg/tree-ssa/forwprop-2.c: New testcase."}, {"sha": "c20a0b6cb4934d1b169bb8ab4d9c99e66c8ed5a1", "filename": "gcc/testsuite/gcc.target/i386/builtin-copysign.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edc5bbcd8f2becdd035195f0a4e6e0e880b3d28d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbuiltin-copysign.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edc5bbcd8f2becdd035195f0a4e6e0e880b3d28d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbuiltin-copysign.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbuiltin-copysign.c?ref=edc5bbcd8f2becdd035195f0a4e6e0e880b3d28d", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+#define TEST_SET(MODE, CEXT)\t\t\t\t\t\t\\\n+MODE test1##CEXT(MODE a) { return -a; }\t\t\t\t\t\\\n+MODE test2##CEXT(MODE a) { return __builtin_fabs##CEXT(a); }\t\t\\\n+MODE test3##CEXT(MODE a) { return __builtin_copysign##CEXT(a, 0.0); }\t\\\n+MODE test4##CEXT(MODE a) { return __builtin_copysign##CEXT(a, -1.0); }\t\\\n+MODE test5##CEXT(MODE a, MODE b) { return __builtin_copysign##CEXT(a, b); }\n+\n+TEST_SET (float, f)\n+TEST_SET (double, )\n+TEST_SET (long double, l)\n+#if defined (__LP64__)\n+TEST_SET (__float128, q)\n+#endif"}]}