{"sha": "f6981e16c3c4e9e009e3b34d185f2be15c76171c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjY5ODFlMTZjM2M0ZTllMDA5ZTNiMzRkMTg1ZjJiZTE1Yzc2MTcxYw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2003-07-02T00:14:44Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2003-07-02T00:14:44Z"}, "message": "cgraphunit.c (cgraph_finalize_function): Set finalized.\n\n\t* cgraphunit.c (cgraph_finalize_function): Set finalized.\n\t(cgraph_finalize_function): Do not examine inlinablility.\n\t(cgraph_finalize_compilation_unit): Do it here.\n\t* cgraph.h (cgraph_local_info): Add finalized field.\n\nFrom-SVN: r68803", "tree": {"sha": "4d97ef1059d4e3e31ef7dfafa8353a8924c2bf2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d97ef1059d4e3e31ef7dfafa8353a8924c2bf2f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f6981e16c3c4e9e009e3b34d185f2be15c76171c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6981e16c3c4e9e009e3b34d185f2be15c76171c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6981e16c3c4e9e009e3b34d185f2be15c76171c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6981e16c3c4e9e009e3b34d185f2be15c76171c/comments", "author": null, "committer": null, "parents": [{"sha": "d1c608553b0f6cec5ddc3e83c0198fa37ab9fe25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1c608553b0f6cec5ddc3e83c0198fa37ab9fe25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1c608553b0f6cec5ddc3e83c0198fa37ab9fe25"}], "stats": {"total": 28, "additions": 19, "deletions": 9}, "files": [{"sha": "716fb7a4dda6509db74486c796c7900e35ab6a06", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6981e16c3c4e9e009e3b34d185f2be15c76171c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6981e16c3c4e9e009e3b34d185f2be15c76171c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f6981e16c3c4e9e009e3b34d185f2be15c76171c", "patch": "@@ -1,3 +1,10 @@\n+Wed Jul  2 02:12:51 CEST 2003  Jan Hubicka  <jh@suse.cz>\n+\n+\t* cgraphunit.c (cgraph_finalize_function): Set finalized.\n+\t(cgraph_finalize_function): Do not examine inlinablility.\n+\t(cgraph_finalize_compilation_unit): Do it here.\n+\t* cgraph.h (cgraph_local_info): Add finalized field.\n+\n 2003-07-02  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n \n \t* ggc-common.c (gt_pch_save): Cast MAP_FAILED to void *."}, {"sha": "bbf1c2886182e2539c8303fadf4c086767721f83", "filename": "gcc/cgraph.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6981e16c3c4e9e009e3b34d185f2be15c76171c/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6981e16c3c4e9e009e3b34d185f2be15c76171c/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=f6981e16c3c4e9e009e3b34d185f2be15c76171c", "patch": "@@ -35,6 +35,8 @@ struct cgraph_local_info GTY(())\n   /* Set when function can be inlined once (false only for functions calling\n      alloca, using varargs and so on).  */\n   bool can_inline_once;\n+  /* Set once it has been finalized so we consider it to be output.  */\n+  bool finalized;\n };\n \n /* Information about the function that needs to be computed globally"}, {"sha": "75eae991d951f8717353703aea5a39021a3c0d3f", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6981e16c3c4e9e009e3b34d185f2be15c76171c/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6981e16c3c4e9e009e3b34d185f2be15c76171c/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=f6981e16c3c4e9e009e3b34d185f2be15c76171c", "patch": "@@ -54,6 +54,7 @@ cgraph_finalize_function (decl, body)\n   struct cgraph_node *node = cgraph_node (decl);\n \n   node->decl = decl;\n+  node->local.finalized = true;\n \n   if (/* Externally visible functions must be output.  The exception are\n \t COMDAT functions that must be output only when they are needed.\n@@ -74,15 +75,6 @@ cgraph_finalize_function (decl, body)\n       cgraph_mark_needed_node (node, 1);\n     }\n \n-  if (!node->needed && !DECL_COMDAT (node->decl))\n-    node->local.can_inline_once = tree_inlinable_function_p (decl, 1);\n-  else\n-    node->local.can_inline_once = 0;\n-  if (flag_inline_trees)\n-    node->local.inline_many = tree_inlinable_function_p (decl, 0);\n-  else\n-    node->local.inline_many = 0;\n-\n   (*debug_hooks->deferred_inline_function) (decl);\n }\n \n@@ -173,6 +165,15 @@ cgraph_finalize_compilation_unit ()\n       if (lang_hooks.callgraph.lower_function)\n \t(*lang_hooks.callgraph.lower_function) (decl);\n \n+      if (!node->needed && !DECL_COMDAT (node->decl))\n+\tnode->local.can_inline_once = tree_inlinable_function_p (decl, 1);\n+      else\n+\tnode->local.can_inline_once = 0;\n+      if (flag_inline_trees)\n+\tnode->local.inline_many = tree_inlinable_function_p (decl, 0);\n+      else\n+\tnode->local.inline_many = 0;\n+\n       /* At the moment frontend automatically emits all nested functions.  */\n       if (node->nested)\n \t{"}]}