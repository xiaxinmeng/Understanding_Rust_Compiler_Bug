{"sha": "14196e023fa2a07f86e864a9492e7cf3950d5ce9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQxOTZlMDIzZmEyYTA3Zjg2ZTg2NGE5NDkyZTdjZjM5NTBkNWNlOQ==", "commit": {"author": {"name": "Alan Hayward", "email": "alan.hayward@arm.com", "date": "2018-08-06T09:16:24Z"}, "committer": {"name": "Alan Hayward", "email": "alahay01@gcc.gnu.org", "date": "2018-08-06T09:16:24Z"}, "message": "Generation support for CLOBBER_HIGH\n\nEnsure clobber high is a register expression.\nInfo is passed through for the error case.\n\ngcc/\n\t* emit-rtl.c (verify_rtx_sharing): Check for CLOBBER_HIGH.\n\t(copy_insn_1): Likewise.\n\t(gen_hard_reg_clobber_high): New gen function.\n\t* genconfig.c (walk_insn_part): Check for CLOBBER_HIGH.\n\t* genemit.c (gen_exp): Likewise.\n\t(gen_emit_seq): Pass through info.\n\t(gen_insn): Check for CLOBBER_HIGH.\n\t(gen_expand): Pass through info.\n\t(gen_split): Likewise.\n\t(output_add_clobbers): Likewise.\n\t* genrecog.c (validate_pattern): Check for CLOBBER_HIGH.\n\t(remove_clobbers): Likewise.\n\t* rtl.h (gen_hard_reg_clobber_high): New declaration.\n\nFrom-SVN: r263327", "tree": {"sha": "f0d8015e011ea09736010143008d034336aed6e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f0d8015e011ea09736010143008d034336aed6e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/14196e023fa2a07f86e864a9492e7cf3950d5ce9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14196e023fa2a07f86e864a9492e7cf3950d5ce9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14196e023fa2a07f86e864a9492e7cf3950d5ce9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14196e023fa2a07f86e864a9492e7cf3950d5ce9/comments", "author": {"login": "a74nh", "id": 4146708, "node_id": "MDQ6VXNlcjQxNDY3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/4146708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/a74nh", "html_url": "https://github.com/a74nh", "followers_url": "https://api.github.com/users/a74nh/followers", "following_url": "https://api.github.com/users/a74nh/following{/other_user}", "gists_url": "https://api.github.com/users/a74nh/gists{/gist_id}", "starred_url": "https://api.github.com/users/a74nh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/a74nh/subscriptions", "organizations_url": "https://api.github.com/users/a74nh/orgs", "repos_url": "https://api.github.com/users/a74nh/repos", "events_url": "https://api.github.com/users/a74nh/events{/privacy}", "received_events_url": "https://api.github.com/users/a74nh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "601e86a57f6ec7e9acdfe5767779a3c62735b0e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/601e86a57f6ec7e9acdfe5767779a3c62735b0e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/601e86a57f6ec7e9acdfe5767779a3c62735b0e6"}], "stats": {"total": 91, "additions": 70, "deletions": 21}, "files": [{"sha": "248a42bce322520a5d5aad4822d0b2985b48370d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14196e023fa2a07f86e864a9492e7cf3950d5ce9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14196e023fa2a07f86e864a9492e7cf3950d5ce9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=14196e023fa2a07f86e864a9492e7cf3950d5ce9", "patch": "@@ -1,4 +1,21 @@\n 2018-08-06  Alan Hayward  <alan.hayward@arm.com>\n+\n+\t* emit-rtl.c (verify_rtx_sharing): Check for CLOBBER_HIGH.\n+\t(copy_insn_1): Likewise.\n+\t(gen_hard_reg_clobber_high): New gen function.\n+\t* genconfig.c (walk_insn_part): Check for CLOBBER_HIGH.\n+\t* genemit.c (gen_exp): Likewise.\n+\t(gen_emit_seq): Pass through info.\n+\t(gen_insn): Check for CLOBBER_HIGH.\n+\t(gen_expand): Pass through info.\n+\t(gen_split): Likewise.\n+\t(output_add_clobbers): Likewise.\n+\t* genrecog.c (validate_pattern): Check for CLOBBER_HIGH.\n+\t(remove_clobbers): Likewise.\n+\t* rtl.h (gen_hard_reg_clobber_high): New declaration.\n+\n+2018-08-06  Alan Hayward  <alan.hayward@arm.com>\n+\n \t* doc/rtl.texi (clobber_high): Add.\n \t(parallel): Add in clobber high\n \t* rtl.c (rtl_check_failed_code3): Add function."}, {"sha": "dacf27e087cedda026c438d540fcfc264dd2f56f", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14196e023fa2a07f86e864a9492e7cf3950d5ce9/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14196e023fa2a07f86e864a9492e7cf3950d5ce9/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=14196e023fa2a07f86e864a9492e7cf3950d5ce9", "patch": "@@ -2865,6 +2865,7 @@ verify_rtx_sharing (rtx orig, rtx insn)\n       /* SCRATCH must be shared because they represent distinct values.  */\n       return;\n     case CLOBBER:\n+    case CLOBBER_HIGH:\n       /* Share clobbers of hard registers (like cc0), but do not share pseudo reg\n          clobbers or clobbers of hard registers that originated as pseudos.\n          This is needed to allow safe register renaming.  */\n@@ -3118,6 +3119,7 @@ copy_rtx_if_shared_1 (rtx *orig1)\n       /* SCRATCH must be shared because they represent distinct values.  */\n       return;\n     case CLOBBER:\n+    case CLOBBER_HIGH:\n       /* Share clobbers of hard registers (like cc0), but do not share pseudo reg\n          clobbers or clobbers of hard registers that originated as pseudos.\n          This is needed to allow safe register renaming.  */\n@@ -5690,6 +5692,7 @@ copy_insn_1 (rtx orig)\n     case SIMPLE_RETURN:\n       return orig;\n     case CLOBBER:\n+    case CLOBBER_HIGH:\n       /* Share clobbers of hard registers (like cc0), but do not share pseudo reg\n          clobbers or clobbers of hard registers that originated as pseudos.\n          This is needed to allow safe register renaming.  */\n@@ -6508,6 +6511,21 @@ gen_hard_reg_clobber (machine_mode mode, unsigned int regno)\n \t    gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (mode, regno)));\n }\n \n+static GTY((deletable)) rtx\n+hard_reg_clobbers_high[NUM_MACHINE_MODES][FIRST_PSEUDO_REGISTER];\n+\n+/* Return a CLOBBER_HIGH expression for register REGNO that clobbers MODE,\n+   caching into HARD_REG_CLOBBERS_HIGH.  */\n+rtx\n+gen_hard_reg_clobber_high (machine_mode mode, unsigned int regno)\n+{\n+  if (hard_reg_clobbers_high[mode][regno])\n+    return hard_reg_clobbers_high[mode][regno];\n+  else\n+    return (hard_reg_clobbers_high[mode][regno]\n+\t    = gen_rtx_CLOBBER_HIGH (VOIDmode, gen_rtx_REG (mode, regno)));\n+}\n+\n location_t prologue_location;\n location_t epilogue_location;\n "}, {"sha": "745d5374b39596274bad1377618573666b2c7eb5", "filename": "gcc/genconfig.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14196e023fa2a07f86e864a9492e7cf3950d5ce9/gcc%2Fgenconfig.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14196e023fa2a07f86e864a9492e7cf3950d5ce9/gcc%2Fgenconfig.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenconfig.c?ref=14196e023fa2a07f86e864a9492e7cf3950d5ce9", "patch": "@@ -72,6 +72,7 @@ walk_insn_part (rtx part, int recog_p, int non_pc_set_src)\n   switch (code)\n     {\n     case CLOBBER:\n+    case CLOBBER_HIGH:\n       clobbers_seen_this_insn++;\n       break;\n "}, {"sha": "678b9aa39357047dff87dd60604f0e8ab5dcbb6d", "filename": "gcc/genemit.c", "status": "modified", "additions": 31, "deletions": 20, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14196e023fa2a07f86e864a9492e7cf3950d5ce9/gcc%2Fgenemit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14196e023fa2a07f86e864a9492e7cf3950d5ce9/gcc%2Fgenemit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenemit.c?ref=14196e023fa2a07f86e864a9492e7cf3950d5ce9", "patch": "@@ -79,7 +79,7 @@ gen_rtx_scratch (rtx x, enum rtx_code subroutine_type)\n    substituting any operand references appearing within.  */\n \n static void\n-gen_exp (rtx x, enum rtx_code subroutine_type, char *used)\n+gen_exp (rtx x, enum rtx_code subroutine_type, char *used, md_rtx_info *info)\n {\n   RTX_CODE code;\n   int i;\n@@ -123,7 +123,7 @@ gen_exp (rtx x, enum rtx_code subroutine_type, char *used)\n       for (i = 0; i < XVECLEN (x, 1); i++)\n \t{\n \t  printf (\",\\n\\t\\t\");\n-\t  gen_exp (XVECEXP (x, 1, i), subroutine_type, used);\n+\t  gen_exp (XVECEXP (x, 1, i), subroutine_type, used, info);\n \t}\n       printf (\")\");\n       return;\n@@ -137,7 +137,7 @@ gen_exp (rtx x, enum rtx_code subroutine_type, char *used)\n       for (i = 0; i < XVECLEN (x, 2); i++)\n \t{\n \t  printf (\",\\n\\t\\t\");\n-\t  gen_exp (XVECEXP (x, 2, i), subroutine_type, used);\n+\t  gen_exp (XVECEXP (x, 2, i), subroutine_type, used, info);\n \t}\n       printf (\")\");\n       return;\n@@ -163,12 +163,21 @@ gen_exp (rtx x, enum rtx_code subroutine_type, char *used)\n     case CLOBBER:\n       if (REG_P (XEXP (x, 0)))\n \t{\n-\t  printf (\"gen_hard_reg_clobber (%smode, %i)\", GET_MODE_NAME (GET_MODE (XEXP (x, 0))),\n-\t\t\t  \t\t\t     REGNO (XEXP (x, 0)));\n+\t  printf (\"gen_hard_reg_clobber (%smode, %i)\",\n+\t\t  GET_MODE_NAME (GET_MODE (XEXP (x, 0))),\n+\t\t  REGNO (XEXP (x, 0)));\n \t  return;\n \t}\n       break;\n-\n+    case CLOBBER_HIGH:\n+      if (!REG_P (XEXP (x, 0)))\n+\terror (\"CLOBBER_HIGH argument is not a register expr, at %s:%d\",\n+\t       info->loc.filename, info->loc.lineno);\n+      printf (\"gen_hard_reg_clobber_high (%smode, %i)\",\n+\t      GET_MODE_NAME (GET_MODE (XEXP (x, 0))),\n+\t      REGNO (XEXP (x, 0)));\n+      return;\n+      break;\n     case CC0:\n       printf (\"cc0_rtx\");\n       return;\n@@ -224,7 +233,7 @@ gen_exp (rtx x, enum rtx_code subroutine_type, char *used)\n       switch (fmt[i])\n \t{\n \tcase 'e': case 'u':\n-\t  gen_exp (XEXP (x, i), subroutine_type, used);\n+\t  gen_exp (XEXP (x, i), subroutine_type, used, info);\n \t  break;\n \n \tcase 'i':\n@@ -252,7 +261,7 @@ gen_exp (rtx x, enum rtx_code subroutine_type, char *used)\n \t    for (j = 0; j < XVECLEN (x, i); j++)\n \t      {\n \t\tprintf (\",\\n\\t\\t\");\n-\t\tgen_exp (XVECEXP (x, i, j), subroutine_type, used);\n+\t\tgen_exp (XVECEXP (x, i, j), subroutine_type, used, info);\n \t      }\n \t    printf (\")\");\n \t    break;\n@@ -270,7 +279,7 @@ gen_exp (rtx x, enum rtx_code subroutine_type, char *used)\n    becoming a separate instruction.  USED is as for gen_exp.  */\n \n static void\n-gen_emit_seq (rtvec vec, char *used)\n+gen_emit_seq (rtvec vec, char *used, md_rtx_info *info)\n {\n   for (int i = 0, len = GET_NUM_ELEM (vec); i < len; ++i)\n     {\n@@ -279,15 +288,15 @@ gen_emit_seq (rtvec vec, char *used)\n       if (const char *name = get_emit_function (next))\n \t{\n \t  printf (\"  %s (\", name);\n-\t  gen_exp (next, DEFINE_EXPAND, used);\n+\t  gen_exp (next, DEFINE_EXPAND, used, info);\n \t  printf (\");\\n\");\n \t  if (!last_p && needs_barrier_p (next))\n \t    printf (\"  emit_barrier ();\");\n \t}\n       else\n \t{\n \t  printf (\"  emit (\");\n-\t  gen_exp (next, DEFINE_EXPAND, used);\n+\t  gen_exp (next, DEFINE_EXPAND, used, info);\n \t  printf (\", %s);\\n\", last_p ? \"false\" : \"true\");\n \t}\n     }\n@@ -334,7 +343,8 @@ gen_insn (md_rtx_info *info)\n \n       for (i = XVECLEN (insn, 1) - 1; i > 0; i--)\n \t{\n-\t  if (GET_CODE (XVECEXP (insn, 1, i)) != CLOBBER)\n+\t  if (GET_CODE (XVECEXP (insn, 1, i)) != CLOBBER\n+\t      && GET_CODE (XVECEXP (insn, 1, i)) != CLOBBER_HIGH)\n \t    break;\n \n \t  if (REG_P (XEXP (XVECEXP (insn, 1, i), 0)))\n@@ -368,7 +378,8 @@ gen_insn (md_rtx_info *info)\n \t\t  /* OLD and NEW_INSN are the same if both are to be a SCRATCH\n \t\t     of the same mode,\n \t\t     or if both are registers of the same mode and number.  */\n-\t\t  if (! (GET_MODE (old_rtx) == GET_MODE (new_rtx)\n+\t\t  if (! (GET_CODE (old_rtx) == GET_CODE (new_rtx)\n+\t\t\t && GET_MODE (old_rtx) == GET_MODE (new_rtx)\n \t\t\t && ((GET_CODE (old_rtx) == MATCH_SCRATCH\n \t\t\t      && GET_CODE (new_rtx) == MATCH_SCRATCH)\n \t\t\t     || (REG_P (old_rtx) && REG_P (new_rtx)\n@@ -431,7 +442,7 @@ gen_insn (md_rtx_info *info)\n \t\t? NULL\n \t\t: XCNEWVEC (char, stats.num_generator_args));\n   printf (\"  return \");\n-  gen_exp (pattern, DEFINE_INSN, used);\n+  gen_exp (pattern, DEFINE_INSN, used, info);\n   printf (\";\\n}\\n\\n\");\n   XDELETEVEC (used);\n }\n@@ -480,7 +491,7 @@ gen_expand (md_rtx_info *info)\n       && XVECLEN (expand, 1) == 1)\n     {\n       printf (\"  return \");\n-      gen_exp (XVECEXP (expand, 1, 0), DEFINE_EXPAND, NULL);\n+      gen_exp (XVECEXP (expand, 1, 0), DEFINE_EXPAND, NULL, info);\n       printf (\";\\n}\\n\\n\");\n       return;\n     }\n@@ -534,7 +545,7 @@ gen_expand (md_rtx_info *info)\n     }\n \n   used = XCNEWVEC (char, stats.num_operand_vars);\n-  gen_emit_seq (XVEC (expand, 1), used);\n+  gen_emit_seq (XVEC (expand, 1), used, info);\n   XDELETEVEC (used);\n \n   /* Call `get_insns' to extract the list of all the\n@@ -617,7 +628,7 @@ gen_split (md_rtx_info *info)\n       printf (\"  (void) operand%d;\\n\", i);\n     }\n \n-  gen_emit_seq (XVEC (split, 2), used);\n+  gen_emit_seq (XVEC (split, 2), used, info);\n \n   /* Call `get_insns' to make a list of all the\n      insns emitted within this gen_... function.  */\n@@ -634,7 +645,7 @@ gen_split (md_rtx_info *info)\n    the end of the vector.  */\n \n static void\n-output_add_clobbers (void)\n+output_add_clobbers (md_rtx_info *info)\n {\n   struct clobber_pat *clobber;\n   struct clobber_ent *ent;\n@@ -654,7 +665,7 @@ output_add_clobbers (void)\n \t{\n \t  printf (\"      XVECEXP (pattern, 0, %d) = \", i);\n \t  gen_exp (XVECEXP (clobber->pattern, 1, i),\n-\t\t   GET_CODE (clobber->pattern), NULL);\n+\t\t   GET_CODE (clobber->pattern), NULL, info);\n \t  printf (\";\\n\");\n \t}\n \n@@ -923,7 +934,7 @@ from the machine description file `md'.  */\\n\\n\");\n \n   /* Write out the routines to add CLOBBERs to a pattern and say whether they\n      clobber a hard reg.  */\n-  output_add_clobbers ();\n+  output_add_clobbers (&info);\n   output_added_clobbers_hard_reg_p ();\n \n   for (overloaded_name *oname = rtx_reader_ptr->get_overloads ();"}, {"sha": "629e2dc91f3e4dae185e42e9f067941e84709235", "filename": "gcc/genrecog.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14196e023fa2a07f86e864a9492e7cf3950d5ce9/gcc%2Fgenrecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14196e023fa2a07f86e864a9492e7cf3950d5ce9/gcc%2Fgenrecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenrecog.c?ref=14196e023fa2a07f86e864a9492e7cf3950d5ce9", "patch": "@@ -718,6 +718,7 @@ validate_pattern (rtx pattern, md_rtx_info *info, rtx set, int set_code)\n       }\n \n     case CLOBBER:\n+    case CLOBBER_HIGH:\n       validate_pattern (SET_DEST (pattern), info, pattern, '=');\n       return;\n \n@@ -5294,7 +5295,7 @@ remove_clobbers (acceptance_type *acceptance_ptr, rtx *pattern_ptr)\n   for (i = XVECLEN (pattern, 0); i > 0; i--)\n     {\n       rtx x = XVECEXP (pattern, 0, i - 1);\n-      if (GET_CODE (x) != CLOBBER\n+      if ((GET_CODE (x) != CLOBBER && GET_CODE (x) != CLOBBER_HIGH)\n \t  || (!REG_P (XEXP (x, 0))\n \t      && GET_CODE (XEXP (x, 0)) != MATCH_SCRATCH))\n \tbreak;"}, {"sha": "f42d749511d8988b77f8f167c22c42ec0c2ef6d5", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14196e023fa2a07f86e864a9492e7cf3950d5ce9/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14196e023fa2a07f86e864a9492e7cf3950d5ce9/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=14196e023fa2a07f86e864a9492e7cf3950d5ce9", "patch": "@@ -4242,6 +4242,7 @@ extern void vt_equate_reg_base_value (const_rtx, const_rtx);\n extern bool memory_modified_in_insn_p (const_rtx, const_rtx);\n extern bool may_be_sp_based_p (rtx);\n extern rtx gen_hard_reg_clobber (machine_mode, unsigned int);\n+extern rtx gen_hard_reg_clobber_high (machine_mode, unsigned int);\n extern rtx get_reg_known_value (unsigned int);\n extern bool get_reg_known_equiv_p (unsigned int);\n extern rtx get_reg_base_value (unsigned int);"}]}