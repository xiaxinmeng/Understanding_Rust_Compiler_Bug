{"sha": "fcb87c50b00e203aa3ef586915edd305429d3868", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmNiODdjNTBiMDBlMjAzYWEzZWY1ODY5MTVlZGQzMDU0MjlkMzg2OA==", "commit": {"author": {"name": "Mikhail Maltsev", "email": "maltsevm@gmail.com", "date": "2015-09-16T00:56:54Z"}, "committer": {"name": "Mikhail Maltsev", "email": "miyuki@gcc.gnu.org", "date": "2015-09-16T00:56:54Z"}, "message": "Share memory blocks between pool allocators\n\ngcc/\n\t* Makefile.in: Add memory-block.cc\n\t(pool_allocator::initialize): Use fixed block size.\n\t(pool_allocator::release): Use memory_block_pool.\n\t(pool_allocator::allocate): Likewise.\n\t* asan.c (asan_mem_ref_pool): Adjust to use common block size in all\n\tobject pools.\n\t* cfg.c (initialize_original_copy_tables): Likewise.\n\t* cselib.c (elt_list_pool, elt_loc_list_pool,\n\tcselib_val_pool): Likewise.\n\t* df-problems.c (df_chain_alloc): Likewise.\n\t* df-scan.c (df_scan_alloc): Likewise.\n\t* dse.c (cse_store_info_pool, rtx_store_info_pool,\n\tread_info_type_pool, insn_info_type_pool, bb_info_pool,\n\tgroup_info_pool, deferred_change_pool): Likewise.\n\t* et-forest.c (et_nodes, et_occurrences): Likewise.\n\t* ipa-cp.c (ipcp_cst_values_pool, ipcp_sources_pool,\n\tipcp_agg_lattice_pool): Likewise.\n\t* ipa-inline-analysis.c (edge_predicate_pool): Likewise.\n\t* ipa-profile.c (histogram_pool): Likewise.\n\t* ipa-prop.c (ipa_refdesc_pool): Likewise.\n\t* ira-build.c (live_range_pool, allocno_pool, object_pool,\n\tinitiate_cost_vectors, pref_pool, copy_pool): Likewise.\n\t* ira-color.c (update_cost_record_pool): Likewise.\n\t* lra-lives.c (lra_live_range_pool): Likewise.\n\t* lra.c (lra_insn_reg_pool, lra_copy_pool): Likewise.\n\t* memory-block.cc: New file.\n\t* memory-block.h: New file.\n\t* regcprop.c (queued_debug_insn_change_pool): Use common block size.\n\t* sched-deps.c (sched_deps_init): Likewise.\n\t* sel-sched-ir.c (sched_lists_pool): Likewise.\n\t* stmt.c (expand_case, expand_sjlj_dispatch_table): Likewise.\n\t* tree-sra.c (access_pool): Likewise.\n\t* tree-ssa-math-opts.c (pass_cse_reciprocals::execute): Likewise.\n\t* tree-ssa-pre.c (pre_expr_pool, bitmap_set_pool): Likewise.\n\t* tree-ssa-reassoc.c (operand_entry_pool): Likewise.\n\t* tree-ssa-sccvn.c (allocate_vn_table): Likewise.\n\t* tree-ssa-strlen.c (strinfo_pool): Likewise.\n\t* tree-ssa-structalias.c (variable_info_pool): Likewise.\n\t* var-tracking.c (attrs_def_pool, var_pool, valvar_pool,\n\tlocation_chain_pool, shared_hash_pool, loc_exp_dep_pool): Likewise.\n\ngcc/c-family/\n\t* c-format.c (check_format_arg): Adjust to use common block size in all\n\tobject pools.\n\nFrom-SVN: r227817", "tree": {"sha": "e915c259d85e8eae9618ae3fa48e6250374ddb3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e915c259d85e8eae9618ae3fa48e6250374ddb3e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fcb87c50b00e203aa3ef586915edd305429d3868", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcb87c50b00e203aa3ef586915edd305429d3868", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fcb87c50b00e203aa3ef586915edd305429d3868", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcb87c50b00e203aa3ef586915edd305429d3868/comments", "author": {"login": "miyuki", "id": 4668268, "node_id": "MDQ6VXNlcjQ2NjgyNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/4668268?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miyuki", "html_url": "https://github.com/miyuki", "followers_url": "https://api.github.com/users/miyuki/followers", "following_url": "https://api.github.com/users/miyuki/following{/other_user}", "gists_url": "https://api.github.com/users/miyuki/gists{/gist_id}", "starred_url": "https://api.github.com/users/miyuki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miyuki/subscriptions", "organizations_url": "https://api.github.com/users/miyuki/orgs", "repos_url": "https://api.github.com/users/miyuki/repos", "events_url": "https://api.github.com/users/miyuki/events{/privacy}", "received_events_url": "https://api.github.com/users/miyuki/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5e4e62af0c226f3ec57bd8cc71b64bd5af4e37aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e4e62af0c226f3ec57bd8cc71b64bd5af4e37aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e4e62af0c226f3ec57bd8cc71b64bd5af4e37aa"}], "stats": {"total": 483, "additions": 357, "deletions": 126}, "files": [{"sha": "92ed286935c85dbc167f79568fa0c5b3b61ed894", "filename": "gcc/ChangeLog", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcb87c50b00e203aa3ef586915edd305429d3868/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcb87c50b00e203aa3ef586915edd305429d3868/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fcb87c50b00e203aa3ef586915edd305429d3868", "patch": "@@ -1,3 +1,46 @@\n+2015-09-16  Mikhail Maltsev  <maltsevm@gmail.com>\n+\n+\t* Makefile.in: Add memory-block.cc\n+\t(pool_allocator::initialize): Use fixed block size.\n+\t(pool_allocator::release): Use memory_block_pool.\n+\t(pool_allocator::allocate): Likewise.\n+\t* asan.c (asan_mem_ref_pool): Adjust to use common block size in all\n+\tobject pools.\n+\t* cfg.c (initialize_original_copy_tables): Likewise.\n+\t* cselib.c (elt_list_pool, elt_loc_list_pool,\n+\tcselib_val_pool): Likewise.\n+\t* df-problems.c (df_chain_alloc): Likewise.\n+\t* df-scan.c (df_scan_alloc): Likewise.\n+\t* dse.c (cse_store_info_pool, rtx_store_info_pool,\n+\tread_info_type_pool, insn_info_type_pool, bb_info_pool,\n+\tgroup_info_pool, deferred_change_pool): Likewise.\n+\t* et-forest.c (et_nodes, et_occurrences): Likewise.\n+\t* ipa-cp.c (ipcp_cst_values_pool, ipcp_sources_pool,\n+\tipcp_agg_lattice_pool): Likewise.\n+\t* ipa-inline-analysis.c (edge_predicate_pool): Likewise.\n+\t* ipa-profile.c (histogram_pool): Likewise.\n+\t* ipa-prop.c (ipa_refdesc_pool): Likewise.\n+\t* ira-build.c (live_range_pool, allocno_pool, object_pool,\n+\tinitiate_cost_vectors, pref_pool, copy_pool): Likewise.\n+\t* ira-color.c (update_cost_record_pool): Likewise.\n+\t* lra-lives.c (lra_live_range_pool): Likewise.\n+\t* lra.c (lra_insn_reg_pool, lra_copy_pool): Likewise.\n+\t* memory-block.cc: New file.\n+\t* memory-block.h: New file.\n+\t* regcprop.c (queued_debug_insn_change_pool): Use common block size.\n+\t* sched-deps.c (sched_deps_init): Likewise.\n+\t* sel-sched-ir.c (sched_lists_pool): Likewise.\n+\t* stmt.c (expand_case, expand_sjlj_dispatch_table): Likewise.\n+\t* tree-sra.c (access_pool): Likewise.\n+\t* tree-ssa-math-opts.c (pass_cse_reciprocals::execute): Likewise.\n+\t* tree-ssa-pre.c (pre_expr_pool, bitmap_set_pool): Likewise.\n+\t* tree-ssa-reassoc.c (operand_entry_pool): Likewise.\n+\t* tree-ssa-sccvn.c (allocate_vn_table): Likewise.\n+\t* tree-ssa-strlen.c (strinfo_pool): Likewise.\n+\t* tree-ssa-structalias.c (variable_info_pool): Likewise.\n+\t* var-tracking.c (attrs_def_pool, var_pool, valvar_pool,\n+\tlocation_chain_pool, shared_hash_pool, loc_exp_dep_pool): Likewise.\n+\n 2015-09-15  Max Filippov  <jcmvbkbc@gmail.com>\n \n \t* config/xtensa/xtensa.h (DWARF_ALT_FRAME_RETURN_COLUMN): New"}, {"sha": "254837e6efe0545a01fff0c746a9178c10aa020f", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcb87c50b00e203aa3ef586915edd305429d3868/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcb87c50b00e203aa3ef586915edd305429d3868/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=fcb87c50b00e203aa3ef586915edd305429d3868", "patch": "@@ -1513,7 +1513,7 @@ OBJS = \\\n # Objects in libcommon.a, potentially used by all host binaries and with\n # no target dependencies.\n OBJS-libcommon = diagnostic.o diagnostic-color.o pretty-print.o intl.o \\\n-\tvec.o input.o version.o hash-table.o ggc-none.o\n+\tvec.o input.o version.o hash-table.o ggc-none.o memory-block.o\n \n # Objects in libcommon-target.a, used by drivers and by the core\n # compiler and containing target-dependent code."}, {"sha": "70105ba4ebc77de88d5a3f1a5284a43b1d096c5f", "filename": "gcc/alloc-pool.h", "status": "modified", "additions": 90, "deletions": 34, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcb87c50b00e203aa3ef586915edd305429d3868/gcc%2Falloc-pool.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcb87c50b00e203aa3ef586915edd305429d3868/gcc%2Falloc-pool.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falloc-pool.h?ref=fcb87c50b00e203aa3ef586915edd305429d3868", "patch": "@@ -20,6 +20,7 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef ALLOC_POOL_H\n #define ALLOC_POOL_H\n \n+#include \"memory-block.h\"\n \n extern void dump_alloc_pool_statistics (void);\n \n@@ -95,18 +96,53 @@ struct pool_usage: public mem_usage\n \n extern mem_alloc_description<pool_usage> pool_allocator_usage;\n \n+#if 0\n+/* If a pool with custom block size is needed, one might use the following\n+   template.  An instance of this template can be used as a parameter for\n+   instantiating base_pool_allocator template:\n+\n+\ttypedef custom_block_allocator <128*1024> huge_block_allocator;\n+\t...\n+\tstatic base_pool_allocator <huge_block_allocator>\n+\t\t\t\t\t\tvalue_pool (\"value\", 16384);\n+\n+   Right now it's not used anywhere in the code, and is given here as an\n+   example).  */\n+\n+template <size_t BlockSize>\n+class custom_block_allocator\n+{\n+public:\n+  static const size_t block_size = BlockSize;\n+\n+  static inline void *\n+  allocate () ATTRIBUTE_MALLOC\n+  {\n+    return XNEWVEC (char, BlockSize);\n+  }\n+\n+  static inline void\n+  release (void *block)\n+  {\n+    XDELETEVEC (block);\n+  }\n+};\n+#endif\n+\n /* Generic pool allocator.  */\n-class pool_allocator\n+\n+template <typename TBlockAllocator>\n+class base_pool_allocator\n {\n public:\n-  /* Default constructor for pool allocator called NAME.  Each block\n-     has NUM elements.  */\n-  pool_allocator (const char *name, size_t num, size_t size CXX_MEM_STAT_INFO);\n-  ~pool_allocator ();\n+  /* Default constructor for pool allocator called NAME.  */\n+  base_pool_allocator (const char *name, size_t size CXX_MEM_STAT_INFO);\n+  ~base_pool_allocator ();\n   void release ();\n   void release_if_empty ();\n   void *allocate () ATTRIBUTE_MALLOC;\n   void remove (void *object);\n+  size_t num_elts_current ();\n \n private:\n   struct allocation_pool_list\n@@ -151,7 +187,7 @@ class pool_allocator\n   };\n \n   /* Align X to 8.  */\n-  size_t\n+  static inline size_t\n   align_eight (size_t x)\n   {\n     return (((x+7) >> 3) << 3);\n@@ -180,8 +216,6 @@ class pool_allocator\n   size_t m_blocks_allocated;\n   /* List of blocks that are used to allocate new objects.  */\n   allocation_pool_list *m_block_list;\n-  /* The number of elements in a block.  */\n-  size_t m_block_size;\n   /* Size of a pool elements in bytes.  */\n   size_t m_elt_size;\n   /* Size in bytes that should be allocated for each element.  */\n@@ -192,24 +226,24 @@ class pool_allocator\n   mem_location m_location;\n };\n \n+template <typename TBlockAllocator>\n inline\n-pool_allocator::pool_allocator (const char *name, size_t num,\n-\t\t\t\tsize_t size MEM_STAT_DECL):\n-  m_name (name), m_id (0), m_elts_per_block (num), m_returned_free_list (NULL),\n+base_pool_allocator <TBlockAllocator>::base_pool_allocator (\n+\t\t\t\tconst char *name, size_t size MEM_STAT_DECL):\n+  m_name (name), m_id (0), m_elts_per_block (0), m_returned_free_list (NULL),\n   m_virgin_free_list (NULL), m_virgin_elts_remaining (0), m_elts_allocated (0),\n-  m_elts_free (0), m_blocks_allocated (0), m_block_list (NULL),\n-  m_block_size (0), m_size (size), m_initialized (false),\n-  m_location (ALLOC_POOL_ORIGIN, false PASS_MEM_STAT) {}\n+  m_elts_free (0), m_blocks_allocated (0), m_block_list (NULL), m_size (size),\n+  m_initialized (false), m_location (ALLOC_POOL_ORIGIN, false PASS_MEM_STAT) {}\n \n /* Initialize a pool allocator.  */\n \n+template <typename TBlockAllocator>\n inline void\n-pool_allocator::initialize ()\n+base_pool_allocator <TBlockAllocator>::initialize ()\n {\n   gcc_checking_assert (!m_initialized);\n   m_initialized = true;\n \n-  size_t header_size;\n   size_t size = m_size;\n \n   gcc_checking_assert (m_name);\n@@ -218,15 +252,12 @@ pool_allocator::initialize ()\n   if (size < sizeof (allocation_pool_list*))\n     size = sizeof (allocation_pool_list*);\n \n-  /* Now align the size to a multiple of 4.  */\n+  /* Now align the size to a multiple of 8.  */\n   size = align_eight (size);\n \n   /* Add the aligned size of ID.  */\n   size += offsetof (allocation_object, u.data);\n \n-  /* Um, we can't really allocate 0 elements per block.  */\n-  gcc_checking_assert (m_elts_per_block);\n-\n   m_elt_size = size;\n \n   if (GATHER_STATISTICS)\n@@ -239,9 +270,10 @@ pool_allocator::initialize ()\n     }\n \n   /* List header size should be a multiple of 8.  */\n-  header_size = align_eight (sizeof (allocation_pool_list));\n+  size_t header_size = align_eight (sizeof (allocation_pool_list));\n \n-  m_block_size = (size * m_elts_per_block) + header_size;\n+  m_elts_per_block = (TBlockAllocator::block_size - header_size) / size;\n+  gcc_checking_assert (m_elts_per_block != 0);\n \n #ifdef ENABLE_CHECKING\n   /* Increase the last used ID and use it for this pool.\n@@ -255,8 +287,9 @@ pool_allocator::initialize ()\n }\n \n /* Free all memory allocated for the given memory pool.  */\n+template <typename TBlockAllocator>\n inline void\n-pool_allocator::release ()\n+base_pool_allocator <TBlockAllocator>::release ()\n {\n   if (!m_initialized)\n     return;\n@@ -267,7 +300,7 @@ pool_allocator::release ()\n   for (block = m_block_list; block != NULL; block = next_block)\n     {\n       next_block = block->next;\n-      free (block);\n+      TBlockAllocator::release (block);\n     }\n \n   if (GATHER_STATISTICS)\n@@ -285,21 +318,24 @@ pool_allocator::release ()\n   m_block_list = NULL;\n }\n \n-void\n-inline pool_allocator::release_if_empty ()\n+template <typename TBlockAllocator>\n+inline void\n+base_pool_allocator <TBlockAllocator>::release_if_empty ()\n {\n   if (m_elts_free == m_elts_allocated)\n     release ();\n }\n \n-inline pool_allocator::~pool_allocator ()\n+template <typename TBlockAllocator>\n+inline base_pool_allocator <TBlockAllocator>::~base_pool_allocator ()\n {\n   release ();\n }\n \n /* Allocates one element from the pool specified.  */\n+template <typename TBlockAllocator>\n inline void*\n-pool_allocator::allocate ()\n+base_pool_allocator <TBlockAllocator>::allocate ()\n {\n   if (!m_initialized)\n     initialize ();\n@@ -327,7 +363,7 @@ pool_allocator::allocate ()\n \t  allocation_pool_list *block_header;\n \n \t  /* Make the block.  */\n-\t  block = XNEWVEC (char, m_block_size);\n+\t  block = reinterpret_cast<char *> (TBlockAllocator::allocate ());\n \t  block_header = (allocation_pool_list*) block;\n \t  block += align_eight (sizeof (allocation_pool_list));\n \n@@ -378,8 +414,9 @@ pool_allocator::allocate ()\n }\n \n /* Puts PTR back on POOL's free list.  */\n+template <typename TBlockAllocator>\n inline void\n-pool_allocator::remove (void *object)\n+base_pool_allocator <TBlockAllocator>::remove (void *object)\n {\n   gcc_checking_assert (m_initialized);\n \n@@ -412,15 +449,28 @@ pool_allocator::remove (void *object)\n     }\n }\n \n+/* Number of elements currently active (not returned to pool).  Used for cheap\n+   consistency checks.  */\n+template <typename TBlockAllocator>\n+inline size_t\n+base_pool_allocator <TBlockAllocator>::num_elts_current ()\n+{\n+  return m_elts_allocated - m_elts_free;\n+}\n+\n+/* Specialization of base_pool_allocator which should be used in most cases.\n+   Another specialization may be needed, if object size is greater than\n+   memory_block_pool::block_size (64 KB).  */\n+typedef base_pool_allocator <memory_block_pool> pool_allocator;\n+\n /* Type based memory pool allocator.  */\n template <typename T>\n class object_allocator\n {\n public:\n-  /* Default constructor for pool allocator called NAME.  Each block\n-     has NUM elements.  */\n-  object_allocator (const char *name, size_t num CXX_MEM_STAT_INFO):\n-    m_allocator (name, num, sizeof (T) PASS_MEM_STAT) {}\n+  /* Default constructor for pool allocator called NAME.  */\n+  object_allocator (const char *name CXX_MEM_STAT_INFO):\n+    m_allocator (name, sizeof (T) PASS_MEM_STAT) {}\n \n   inline void\n   release ()\n@@ -448,6 +498,12 @@ class object_allocator\n     m_allocator.remove (object);\n   }\n \n+  inline size_t\n+  num_elts_current ()\n+  {\n+    return m_allocator.num_elts_current ();\n+  }\n+\n private:\n   pool_allocator m_allocator;\n };"}, {"sha": "7c243cdc451d5b188b7ee86b7b557c6e6ef5dec2", "filename": "gcc/asan.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcb87c50b00e203aa3ef586915edd305429d3868/gcc%2Fasan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcb87c50b00e203aa3ef586915edd305429d3868/gcc%2Fasan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.c?ref=fcb87c50b00e203aa3ef586915edd305429d3868", "patch": "@@ -350,7 +350,7 @@ struct asan_mem_ref\n   HOST_WIDE_INT access_size;\n };\n \n-object_allocator <asan_mem_ref> asan_mem_ref_pool (\"asan_mem_ref\", 10);\n+object_allocator <asan_mem_ref> asan_mem_ref_pool (\"asan_mem_ref\");\n \n /* Initializes an instance of asan_mem_ref.  */\n "}, {"sha": "9a631698c1cdc646adb5d7b2d469d22e10d80bb0", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcb87c50b00e203aa3ef586915edd305429d3868/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcb87c50b00e203aa3ef586915edd305429d3868/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=fcb87c50b00e203aa3ef586915edd305429d3868", "patch": "@@ -1,3 +1,8 @@\n+2015-09-16  Mikhail Maltsev  <maltsevm@gmail.com>\n+\n+\t* c-format.c (check_format_arg): Adjust to use common block size in all\n+\tobject pools.\n+\n 2015-09-15  David Malcolm  <dmalcolm@redhat.com>\n \n \t* c-format.c (location_from_offset): Update for change in"}, {"sha": "d358098b3e521fdf3ba95abd3f72948bc5f0ae80", "filename": "gcc/c-family/c-format.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcb87c50b00e203aa3ef586915edd305429d3868/gcc%2Fc-family%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcb87c50b00e203aa3ef586915edd305429d3868/gcc%2Fc-family%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-format.c?ref=fcb87c50b00e203aa3ef586915edd305429d3868", "patch": "@@ -1687,8 +1687,7 @@ check_format_arg (void *ctx, tree format_tree,\n      will decrement it if it finds there are extra arguments, but this way\n      need not adjust it for every return.  */\n   res->number_other++;\n-  object_allocator <format_wanted_type> fwt_pool (\"format_wanted_type pool\",\n-\t\t\t\t\t\t  10);\n+  object_allocator <format_wanted_type> fwt_pool (\"format_wanted_type pool\");\n   check_format_info_main (res, info, format_chars, format_length,\n \t\t\t  params, arg_num, fwt_pool);\n }"}, {"sha": "2bc785731f773abf94769aaf4f17e9ef9c55e528", "filename": "gcc/cfg.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcb87c50b00e203aa3ef586915edd305429d3868/gcc%2Fcfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcb87c50b00e203aa3ef586915edd305429d3868/gcc%2Fcfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfg.c?ref=fcb87c50b00e203aa3ef586915edd305429d3868", "patch": "@@ -1052,7 +1052,7 @@ void\n initialize_original_copy_tables (void)\n {\n   original_copy_bb_pool = new object_allocator<htab_bb_copy_original_entry>\n-    (\"original_copy\", 10);\n+    (\"original_copy\");\n   bb_original = new hash_table<bb_copy_hasher> (10);\n   bb_copy = new hash_table<bb_copy_hasher> (10);\n   loop_copy = new hash_table<bb_copy_hasher> (10);"}, {"sha": "41bb58e7a4b179de22674acd04f61949167d5a38", "filename": "gcc/coretypes.h", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcb87c50b00e203aa3ef586915edd305429d3868/gcc%2Fcoretypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcb87c50b00e203aa3ef586915edd305429d3868/gcc%2Fcoretypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoretypes.h?ref=fcb87c50b00e203aa3ef586915edd305429d3868", "patch": "@@ -225,9 +225,16 @@ struct basic_block_def;\n typedef struct basic_block_def *basic_block;\n typedef const struct basic_block_def *const_basic_block;\n \n-#define obstack_chunk_alloc\txmalloc\n-#define obstack_chunk_free\tfree\n-#define OBSTACK_CHUNK_SIZE\t0\n+#if !defined (GENERATOR_FILE)\n+# define OBSTACK_CHUNK_SIZE     memory_block_pool::block_size\n+# define obstack_chunk_alloc    mempool_obstack_chunk_alloc\n+# define obstack_chunk_free     mempool_obstack_chunk_free\n+#else\n+# define OBSTACK_CHUNK_SIZE     0\n+# define obstack_chunk_alloc    xmalloc\n+# define obstack_chunk_free     free\n+#endif\n+\n #define gcc_obstack_init(OBSTACK)\t\t\t\t\\\n   obstack_specify_allocation ((OBSTACK), OBSTACK_CHUNK_SIZE, 0,\t\\\n \t\t\t      obstack_chunk_alloc,\t\t\\\n@@ -328,6 +335,7 @@ typedef unsigned char uchar;\n #include \"hash-set.h\"\n #include \"input.h\"\n #include \"is-a.h\"\n+#include \"memory-block.h\"\n #endif /* GENERATOR_FILE && !USED_FOR_TARGET */\n \n #endif /* coretypes.h */"}, {"sha": "4264394b0729f8eee772fbd1798e3d9042aa80c9", "filename": "gcc/cselib.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcb87c50b00e203aa3ef586915edd305429d3868/gcc%2Fcselib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcb87c50b00e203aa3ef586915edd305429d3868/gcc%2Fcselib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcselib.c?ref=fcb87c50b00e203aa3ef586915edd305429d3868", "patch": "@@ -246,11 +246,11 @@ static unsigned int cfa_base_preserved_regno = INVALID_REGNUM;\n    each time memory is invalidated.  */\n static cselib_val *first_containing_mem = &dummy_val;\n \n-static object_allocator<elt_list> elt_list_pool (\"elt_list\", 10);\n-static object_allocator<elt_loc_list> elt_loc_list_pool (\"elt_loc_list\", 10);\n-static object_allocator<cselib_val> cselib_val_pool (\"cselib_val_list\", 10);\n+static object_allocator<elt_list> elt_list_pool (\"elt_list\");\n+static object_allocator<elt_loc_list> elt_loc_list_pool (\"elt_loc_list\");\n+static object_allocator<cselib_val> cselib_val_pool (\"cselib_val_list\");\n \n-static pool_allocator value_pool (\"value\", 100, RTX_CODE_SIZE (VALUE));\n+static pool_allocator value_pool (\"value\", RTX_CODE_SIZE (VALUE));\n \n /* If nonnull, cselib will call this function before freeing useless\n    VALUEs.  A VALUE is deemed useless if its \"locs\" field is null.  */"}, {"sha": "0ab533fe0b1ffedaab703c93cf83ddfbde067152", "filename": "gcc/df-problems.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcb87c50b00e203aa3ef586915edd305429d3868/gcc%2Fdf-problems.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcb87c50b00e203aa3ef586915edd305429d3868/gcc%2Fdf-problems.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-problems.c?ref=fcb87c50b00e203aa3ef586915edd305429d3868", "patch": "@@ -1997,8 +1997,7 @@ static void\n df_chain_alloc (bitmap all_blocks ATTRIBUTE_UNUSED)\n {\n   df_chain_remove_problem ();\n-  df_chain->block_pool = new object_allocator<df_link> (\"df_chain_block pool\",\n-\t\t\t\t\t\t      50);\n+  df_chain->block_pool = new object_allocator<df_link> (\"df_chain_block pool\");\n   df_chain->optional_p = true;\n }\n "}, {"sha": "eea93df1a3174a30df273a3ab8b015e64394298c", "filename": "gcc/df-scan.c", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcb87c50b00e203aa3ef586915edd305429d3868/gcc%2Fdf-scan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcb87c50b00e203aa3ef586915edd305429d3868/gcc%2Fdf-scan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-scan.c?ref=fcb87c50b00e203aa3ef586915edd305429d3868", "patch": "@@ -133,8 +133,6 @@ static const unsigned int copy_all = copy_defs | copy_uses | copy_eq_uses\n    it gets run.  It also has no need for the iterative solver.\n ----------------------------------------------------------------------------*/\n \n-#define SCAN_PROBLEM_DATA_BLOCK_SIZE 512\n-\n /* Problem data for the scanning dataflow function.  */\n struct df_scan_problem_data\n {\n@@ -253,17 +251,17 @@ df_scan_alloc (bitmap all_blocks ATTRIBUTE_UNUSED)\n   df_scan->computed = true;\n \n   problem_data->ref_base_pool = new object_allocator<df_base_ref>\n-    (\"df_scan ref base\", SCAN_PROBLEM_DATA_BLOCK_SIZE);\n+    (\"df_scan ref base\");\n   problem_data->ref_artificial_pool = new object_allocator<df_artificial_ref>\n-    (\"df_scan ref artificial\", SCAN_PROBLEM_DATA_BLOCK_SIZE);\n+    (\"df_scan ref artificial\");\n   problem_data->ref_regular_pool = new object_allocator<df_regular_ref>\n-    (\"df_scan ref regular\", SCAN_PROBLEM_DATA_BLOCK_SIZE);\n+    (\"df_scan ref regular\");\n   problem_data->insn_pool = new object_allocator<df_insn_info>\n-    (\"df_scan insn\", SCAN_PROBLEM_DATA_BLOCK_SIZE);\n+    (\"df_scan insn\");\n   problem_data->reg_pool = new object_allocator<df_reg_info>\n-    (\"df_scan reg\", SCAN_PROBLEM_DATA_BLOCK_SIZE);\n+    (\"df_scan reg\");\n   problem_data->mw_reg_pool = new object_allocator<df_mw_hardreg>\n-    (\"df_scan mw_reg\", SCAN_PROBLEM_DATA_BLOCK_SIZE / 16);\n+    (\"df_scan mw_reg\");\n \n   bitmap_obstack_initialize (&problem_data->reg_bitmaps);\n   bitmap_obstack_initialize (&problem_data->insn_bitmaps);"}, {"sha": "86d058984a9ce0d78d342e8cb1aad1a8a99b0f07", "filename": "gcc/dse.c", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcb87c50b00e203aa3ef586915edd305429d3868/gcc%2Fdse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcb87c50b00e203aa3ef586915edd305429d3868/gcc%2Fdse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdse.c?ref=fcb87c50b00e203aa3ef586915edd305429d3868", "patch": "@@ -307,11 +307,9 @@ lowpart_bitmask (int n)\n   return mask >> (HOST_BITS_PER_WIDE_INT - n);\n }\n \n-static object_allocator<store_info> cse_store_info_pool (\"cse_store_info_pool\",\n-\t\t\t\t\t\t       100);\n+static object_allocator<store_info> cse_store_info_pool (\"cse_store_info_pool\");\n \n-static object_allocator<store_info> rtx_store_info_pool (\"rtx_store_info_pool\",\n-\t\t\t\t\t\t       100);\n+static object_allocator<store_info> rtx_store_info_pool (\"rtx_store_info_pool\");\n \n /* This structure holds information about a load.  These are only\n    built for rtx bases.  */\n@@ -336,8 +334,7 @@ struct read_info_type\n };\n typedef struct read_info_type *read_info_t;\n \n-static object_allocator<read_info_type> read_info_type_pool\n-  (\"read_info_pool\", 100);\n+static object_allocator<read_info_type> read_info_type_pool (\"read_info_pool\");\n \n /* One of these records is created for each insn.  */\n \n@@ -426,8 +423,7 @@ struct insn_info_type\n };\n typedef struct insn_info_type *insn_info_t;\n \n-static object_allocator<insn_info_type> insn_info_type_pool\n-  (\"insn_info_pool\", 100);\n+static object_allocator<insn_info_type> insn_info_type_pool (\"insn_info_pool\");\n \n /* The linked list of stores that are under consideration in this\n    basic block.  */\n@@ -494,7 +490,7 @@ struct dse_bb_info_type\n typedef struct dse_bb_info_type *bb_info_t;\n \n static object_allocator<dse_bb_info_type> dse_bb_info_type_pool\n-  (\"bb_info_pool\", 100);\n+  (\"bb_info_pool\");\n \n /* Table to hold all bb_infos.  */\n static bb_info_t *bb_table;\n@@ -564,8 +560,7 @@ struct group_info\n   int offset_map_size_n, offset_map_size_p;\n };\n \n-static object_allocator<group_info> group_info_pool\n-  (\"rtx_group_info_pool\", 100);\n+static object_allocator<group_info> group_info_pool (\"rtx_group_info_pool\");\n \n /* Index into the rtx_group_vec.  */\n static int rtx_group_next_id;\n@@ -589,7 +584,7 @@ struct deferred_change\n };\n \n static object_allocator<deferred_change> deferred_change_pool\n-  (\"deferred_change_pool\", 10);\n+  (\"deferred_change_pool\");\n \n static deferred_change *deferred_change_list = NULL;\n "}, {"sha": "4f919d45563d848f5bde4383538472d6790f6405", "filename": "gcc/et-forest.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcb87c50b00e203aa3ef586915edd305429d3868/gcc%2Fet-forest.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcb87c50b00e203aa3ef586915edd305429d3868/gcc%2Fet-forest.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fet-forest.c?ref=fcb87c50b00e203aa3ef586915edd305429d3868", "patch": "@@ -54,8 +54,8 @@ struct et_occ\n \t\t\t\t   depth.  */\n };\n \n-static object_allocator<et_node> et_nodes (\"et_nodes pool\", 300);\n-static object_allocator<et_occ> et_occurrences (\"et_occ pool\", 300);\n+static object_allocator<et_node> et_nodes (\"et_nodes pool\");\n+static object_allocator<et_occ> et_occurrences (\"et_occ pool\");\n \n /* Changes depth of OCC to D.  */\n "}, {"sha": "69a181d200464654c79aa93316c22fa66ff1eb2a", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcb87c50b00e203aa3ef586915edd305429d3868/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcb87c50b00e203aa3ef586915edd305429d3868/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=fcb87c50b00e203aa3ef586915edd305429d3868", "patch": "@@ -276,16 +276,16 @@ class ipcp_param_lattices\n /* Allocation pools for values and their sources in ipa-cp.  */\n \n object_allocator<ipcp_value<tree> > ipcp_cst_values_pool\n-  (\"IPA-CP constant values\", 32);\n+  (\"IPA-CP constant values\");\n \n object_allocator<ipcp_value<ipa_polymorphic_call_context> >\n-  ipcp_poly_ctx_values_pool (\"IPA-CP polymorphic contexts\", 32);\n+  ipcp_poly_ctx_values_pool (\"IPA-CP polymorphic contexts\");\n \n object_allocator<ipcp_value_source<tree> > ipcp_sources_pool\n-  (\"IPA-CP value sources\", 64);\n+  (\"IPA-CP value sources\");\n \n object_allocator<ipcp_agg_lattice> ipcp_agg_lattice_pool\n-  (\"IPA_CP aggregate lattices\", 32);\n+  (\"IPA_CP aggregate lattices\");\n \n /* Maximal count found in program.  */\n "}, {"sha": "4822329bfcab98e1c800160b2d6058b035cfbbb4", "filename": "gcc/ipa-inline-analysis.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcb87c50b00e203aa3ef586915edd305429d3868/gcc%2Fipa-inline-analysis.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcb87c50b00e203aa3ef586915edd305429d3868/gcc%2Fipa-inline-analysis.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline-analysis.c?ref=fcb87c50b00e203aa3ef586915edd305429d3868", "patch": "@@ -143,7 +143,7 @@ vec<inline_edge_summary_t> inline_edge_summary_vec;\n vec<edge_growth_cache_entry> edge_growth_cache;\n \n /* Edge predicates goes here.  */\n-static object_allocator<predicate> edge_predicate_pool (\"edge predicates\", 10);\n+static object_allocator<predicate> edge_predicate_pool (\"edge predicates\");\n \n /* Return true predicate (tautology).\n    We represent it by empty list of clauses.  */"}, {"sha": "382897cf1a7f9dc8d08794ee11999b1a451f26da", "filename": "gcc/ipa-profile.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcb87c50b00e203aa3ef586915edd305429d3868/gcc%2Fipa-profile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcb87c50b00e203aa3ef586915edd305429d3868/gcc%2Fipa-profile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-profile.c?ref=fcb87c50b00e203aa3ef586915edd305429d3868", "patch": "@@ -87,8 +87,7 @@ struct histogram_entry\n    duplicate entries.  */\n \n vec<histogram_entry *> histogram;\n-static object_allocator<histogram_entry> histogram_pool\n-  (\"IPA histogram\", 10);\n+static object_allocator<histogram_entry> histogram_pool (\"IPA histogram\");\n \n /* Hashtable support for storing SSA names hashed by their SSA_NAME_VAR.  */\n "}, {"sha": "8e0f182ea627ff44887656dd0fc636a26f8e78db", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcb87c50b00e203aa3ef586915edd305429d3868/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcb87c50b00e203aa3ef586915edd305429d3868/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=fcb87c50b00e203aa3ef586915edd305429d3868", "patch": "@@ -95,7 +95,7 @@ struct ipa_cst_ref_desc\n /* Allocation pool for reference descriptions.  */\n \n static object_allocator<ipa_cst_ref_desc> ipa_refdesc_pool\n-  (\"IPA-PROP ref descriptions\", 32);\n+  (\"IPA-PROP ref descriptions\");\n \n /* Return true if DECL_FUNCTION_SPECIFIC_OPTIMIZATION of the decl associated\n    with NODE should prevent us from analyzing it for the purposes of IPA-CP.  */"}, {"sha": "f49591c6e53bb18e58161474ebd50c6bdd229f39", "filename": "gcc/ira-build.c", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcb87c50b00e203aa3ef586915edd305429d3868/gcc%2Fira-build.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcb87c50b00e203aa3ef586915edd305429d3868/gcc%2Fira-build.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-build.c?ref=fcb87c50b00e203aa3ef586915edd305429d3868", "patch": "@@ -420,9 +420,9 @@ rebuild_regno_allocno_maps (void)\n \f\n \n /* Pools for allocnos, allocno live ranges and objects.  */\n-static object_allocator<live_range> live_range_pool (\"live ranges\", 100);\n-static object_allocator<ira_allocno> allocno_pool (\"allocnos\", 100);\n-static object_allocator<ira_object> object_pool (\"objects\", 100);\n+static object_allocator<live_range> live_range_pool (\"live ranges\");\n+static object_allocator<ira_allocno> allocno_pool (\"allocnos\");\n+static object_allocator<ira_object> object_pool (\"objects\");\n \n /* Vec containing references to all created allocnos.  It is a\n    container of array allocnos.  */\n@@ -1170,7 +1170,7 @@ finish_allocnos (void)\n \f\n \n /* Pools for allocno preferences.  */\n-static object_allocator <ira_allocno_pref> pref_pool (\"prefs\", 100);\n+static object_allocator <ira_allocno_pref> pref_pool (\"prefs\");\n \n /* Vec containing references to all created preferences.  It is a\n    container of array ira_prefs.  */\n@@ -1357,7 +1357,7 @@ finish_prefs (void)\n \f\n \n /* Pools for copies.  */\n-static object_allocator<ira_allocno_copy> copy_pool (\"copies\", 100);\n+static object_allocator<ira_allocno_copy> copy_pool (\"copies\");\n \n /* Vec containing references to all created copies.  It is a\n    container of array ira_copies.  */\n@@ -1630,8 +1630,7 @@ initiate_cost_vectors (void)\n     {\n       aclass = ira_allocno_classes[i];\n       cost_vector_pool[aclass] = new pool_allocator\n-\t(\"cost vectors\", 100,\n-\t sizeof (int) * (ira_class_hard_regs_num[aclass]));\n+\t(\"cost vectors\", sizeof (int) * (ira_class_hard_regs_num[aclass]));\n     }\n }\n "}, {"sha": "e6533c6654dee7eb8f648f69c703c8094972c50e", "filename": "gcc/ira-color.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcb87c50b00e203aa3ef586915edd305429d3868/gcc%2Fira-color.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcb87c50b00e203aa3ef586915edd305429d3868/gcc%2Fira-color.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-color.c?ref=fcb87c50b00e203aa3ef586915edd305429d3868", "patch": "@@ -1157,7 +1157,7 @@ setup_profitable_hard_regs (void)\n \n /* Pool for update cost records.  */\n static object_allocator<update_cost_record> update_cost_record_pool\n-  (\"update cost records\", 100);\n+  (\"update cost records\");\n \n /* Return new update cost record with given params.  */\n static struct update_cost_record *"}, {"sha": "253bc1818270685b40d2a26a067c7a292b9f80d6", "filename": "gcc/lra-lives.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcb87c50b00e203aa3ef586915edd305429d3868/gcc%2Flra-lives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcb87c50b00e203aa3ef586915edd305429d3868/gcc%2Flra-lives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-lives.c?ref=fcb87c50b00e203aa3ef586915edd305429d3868", "patch": "@@ -107,8 +107,7 @@ static sparseset unused_set, dead_set;\n static bitmap_head temp_bitmap;\n \n /* Pool for pseudo live ranges.\t */\n-static object_allocator<lra_live_range> lra_live_range_pool\n-  (\"live ranges\", 100);\n+static object_allocator<lra_live_range> lra_live_range_pool (\"live ranges\");\n \n /* Free live range list LR.  */\n static void"}, {"sha": "bdbfe51355349d3b0e566a5b63e6e10ad5ac9d83", "filename": "gcc/lra.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcb87c50b00e203aa3ef586915edd305429d3868/gcc%2Flra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcb87c50b00e203aa3ef586915edd305429d3868/gcc%2Flra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra.c?ref=fcb87c50b00e203aa3ef586915edd305429d3868", "patch": "@@ -533,7 +533,7 @@ lra_update_dups (lra_insn_recog_data_t id, signed char *nops)\n    insns.  */\n \n /* Pools for insn reg info.  */\n-object_allocator<lra_insn_reg> lra_insn_reg_pool (\"insn regs\", 100);\n+object_allocator<lra_insn_reg> lra_insn_reg_pool (\"insn regs\");\n \n /* Create LRA insn related info about a reference to REGNO in INSN with\n    TYPE (in/out/inout), biggest reference mode MODE, flag that it is\n@@ -744,7 +744,7 @@ free_insn_recog_data (lra_insn_recog_data_t data)\n }\n \n /* Pools for copies.  */\n-static object_allocator<lra_copy> lra_copy_pool (\"lra copies\", 100);\n+static object_allocator<lra_copy> lra_copy_pool (\"lra copies\");\n \n /* Finish LRA data about all insns.  */\n static void"}, {"sha": "8470c7adf7350f72651103469e474b500df8623a", "filename": "gcc/memory-block.cc", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcb87c50b00e203aa3ef586915edd305429d3868/gcc%2Fmemory-block.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcb87c50b00e203aa3ef586915edd305429d3868/gcc%2Fmemory-block.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmemory-block.cc?ref=fcb87c50b00e203aa3ef586915edd305429d3868", "patch": "@@ -0,0 +1,64 @@\n+/* Shared pool of memory blocks for pool allocators.\n+   Copyright (C) 2015 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"memory-block.h\"\n+#include \"obstack.h\"\n+\n+/* Global singleton-like instance.  */\n+memory_block_pool memory_block_pool::instance;\n+\n+memory_block_pool::memory_block_pool () : m_blocks (NULL) {}\n+\n+/* Return all blocks from free list to the OS.  */\n+void\n+memory_block_pool::clear_free_list ()\n+{\n+  while (m_blocks)\n+    {\n+      block_list *next = m_blocks->m_next;\n+      XDELETEVEC (m_blocks);\n+      m_blocks = next;\n+    }\n+}\n+\n+/* Allocate a chunk for obstack.  Use the pool if requested chunk size matches\n+   the size of blocks in the pool.  */\n+void *\n+mempool_obstack_chunk_alloc (size_t size)\n+{\n+  if (size == memory_block_pool::block_size)\n+    return memory_block_pool::allocate ();\n+  else\n+    return XNEWVEC (char, size);\n+}\n+\n+/* Free previously allocated obstack chunk.  */\n+void\n+mempool_obstack_chunk_free (void *chunk)\n+{\n+  size_t size = (reinterpret_cast<_obstack_chunk *> (chunk)->limit\n+\t\t - reinterpret_cast<char *> (chunk));\n+  if (size == memory_block_pool::block_size)\n+    memory_block_pool::release (chunk);\n+  else\n+    XDELETEVEC (chunk);\n+}"}, {"sha": "1a495eaea0eefd14bbd6d5da329bf43a3bdde7f1", "filename": "gcc/memory-block.h", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcb87c50b00e203aa3ef586915edd305429d3868/gcc%2Fmemory-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcb87c50b00e203aa3ef586915edd305429d3868/gcc%2Fmemory-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmemory-block.h?ref=fcb87c50b00e203aa3ef586915edd305429d3868", "patch": "@@ -0,0 +1,75 @@\n+/* Shared pool of memory blocks for pool allocators.\n+   Copyright (C) 2015 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+\n+#ifndef MEMORY_BLOCK_H\n+#define MEMORY_BLOCK_H\n+\n+/* Shared pool which allows other memory pools to reuse each others' allocated\n+   memory blocks instead of calling free/malloc again.  */\n+class memory_block_pool\n+{\n+public:\n+  /* Blocks have fixed size.  This is necessary for sharing.  */\n+  static const size_t block_size = 64 * 1024;\n+\n+  memory_block_pool ();\n+\n+  static inline void *allocate () ATTRIBUTE_MALLOC;\n+  static inline void release (void *);\n+  void clear_free_list ();\n+\n+private:\n+  /* memory_block_pool singleton instance, defined in memory-block.cc.  */\n+  static memory_block_pool instance;\n+\n+  struct block_list\n+  {\n+    block_list *m_next;\n+  };\n+\n+  /* Free list.  */\n+  block_list *m_blocks;\n+};\n+\n+/* Allocate a single block.  Reuse a previously returned block, if possible.  */\n+inline void *\n+memory_block_pool::allocate ()\n+{\n+  if (instance.m_blocks == NULL)\n+    return XNEWVEC (char, block_size);\n+\n+  void *result = instance.m_blocks;\n+  instance.m_blocks = instance.m_blocks->m_next;\n+  return result;\n+}\n+\n+/* Return UNCAST_BLOCK to the pool.  */\n+inline void\n+memory_block_pool::release (void *uncast_block)\n+{\n+  block_list *block = new (uncast_block) block_list;\n+  block->m_next = instance.m_blocks;\n+  instance.m_blocks = block;\n+}\n+\n+extern void *mempool_obstack_chunk_alloc (size_t) ATTRIBUTE_MALLOC;\n+extern void mempool_obstack_chunk_free (void *);\n+\n+#endif /* MEMORY_BLOCK_H */"}, {"sha": "6f7d01e6af46359a18205fdca3e08f6c11ceda46", "filename": "gcc/regcprop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcb87c50b00e203aa3ef586915edd305429d3868/gcc%2Fregcprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcb87c50b00e203aa3ef586915edd305429d3868/gcc%2Fregcprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregcprop.c?ref=fcb87c50b00e203aa3ef586915edd305429d3868", "patch": "@@ -75,7 +75,7 @@ struct value_data\n };\n \n static object_allocator<queued_debug_insn_change> queued_debug_insn_change_pool\n-  (\"debug insn changes pool\", 256);\n+  (\"debug insn changes pool\");\n \n static bool skip_debug_insn_p;\n "}, {"sha": "9683055a8579cb26e6fcbbad08653f253d5c00ef", "filename": "gcc/sched-deps.c", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcb87c50b00e203aa3ef586915edd305429d3868/gcc%2Fsched-deps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcb87c50b00e203aa3ef586915edd305429d3868/gcc%2Fsched-deps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-deps.c?ref=fcb87c50b00e203aa3ef586915edd305429d3868", "patch": "@@ -4059,14 +4059,10 @@ sched_deps_init (bool global_p)\n \n   if (global_p)\n     {\n-      dl_pool = new object_allocator<_deps_list> (\"deps_list\",\n-                                   /* Allocate lists for one block at a time.  */\n-                                   insns_in_block);\n-      dn_pool = new object_allocator<_dep_node> (\"dep_node\",\n-                                   /* Allocate nodes for one block at a time.\n-                                      We assume that average insn has\n-                                      5 producers.  */\n-                                   5 * insns_in_block);\n+      dl_pool = new object_allocator<_deps_list> (\"deps_list\");\n+\t\t\t\t/* Allocate lists for one block at a time.  */\n+      dn_pool = new object_allocator<_dep_node> (\"dep_node\");\n+\t\t\t\t/* Allocate nodes for one block at a time.  */\n     }\n }\n "}, {"sha": "8ea4dce8bc7fc701b2dda5213507dc61a8a32e76", "filename": "gcc/sel-sched-ir.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcb87c50b00e203aa3ef586915edd305429d3868/gcc%2Fsel-sched-ir.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcb87c50b00e203aa3ef586915edd305429d3868/gcc%2Fsel-sched-ir.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched-ir.c?ref=fcb87c50b00e203aa3ef586915edd305429d3868", "patch": "@@ -59,7 +59,7 @@ vec<sel_region_bb_info_def>\n     sel_region_bb_info = vNULL;\n \n /* A pool for allocating all lists.  */\n-object_allocator<_list_node> sched_lists_pool (\"sel-sched-lists\", 500);\n+object_allocator<_list_node> sched_lists_pool (\"sel-sched-lists\");\n \n /* This contains information about successors for compute_av_set.  */\n struct succs_info current_succs;"}, {"sha": "134d78e751beda0b38be9249fade1604f5fd4865", "filename": "gcc/stmt.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcb87c50b00e203aa3ef586915edd305429d3868/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcb87c50b00e203aa3ef586915edd305429d3868/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=fcb87c50b00e203aa3ef586915edd305429d3868", "patch": "@@ -1138,7 +1138,7 @@ expand_case (gswitch *stmt)\n   struct case_node *case_list = 0;\n \n   /* A pool for case nodes.  */\n-  object_allocator<case_node> case_node_pool (\"struct case_node pool\", 100);\n+  object_allocator<case_node> case_node_pool (\"struct case_node pool\");\n \n   /* An ERROR_MARK occurs for various reasons including invalid data type.\n      ??? Can this still happen, with GIMPLE and all?  */\n@@ -1314,8 +1314,7 @@ expand_sjlj_dispatch_table (rtx dispatch_index,\n     {\n       /* Similar to expand_case, but much simpler.  */\n       struct case_node *case_list = 0;\n-      object_allocator<case_node> case_node_pool (\"struct sjlj_case pool\",\n-\t\t\t\t\t\tncases);\n+      object_allocator<case_node> case_node_pool (\"struct sjlj_case pool\");\n       tree index_expr = make_tree (index_type, dispatch_index);\n       tree minval = build_int_cst (index_type, 0);\n       tree maxval = CASE_LOW (dispatch_table.last ());"}, {"sha": "94fea2e3cacabbbfe4085decfaed26a6717719a9", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcb87c50b00e203aa3ef586915edd305429d3868/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcb87c50b00e203aa3ef586915edd305429d3868/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=fcb87c50b00e203aa3ef586915edd305429d3868", "patch": "@@ -277,7 +277,7 @@ typedef struct access *access_p;\n \n \n /* Alloc pool for allocating access structures.  */\n-static object_allocator<struct access> access_pool (\"SRA accesses\", 16);\n+static object_allocator<struct access> access_pool (\"SRA accesses\");\n \n /* A structure linking lhs and rhs accesses from an aggregate assignment.  They\n    are used to propagate subaccesses from rhs to lhs as long as they don't\n@@ -289,7 +289,7 @@ struct assign_link\n };\n \n /* Alloc pool for allocating assign link structures.  */\n-static object_allocator<assign_link> assign_link_pool (\"SRA links\", 16);\n+static object_allocator<assign_link> assign_link_pool (\"SRA links\");\n \n /* Base (tree) -> Vector (vec<access_p> *) map.  */\n static hash_map<tree, auto_vec<access_p> > *base_access_vec;"}, {"sha": "c8d0d331e9c249f1b344dd676b11ef22b04513fc", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcb87c50b00e203aa3ef586915edd305429d3868/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcb87c50b00e203aa3ef586915edd305429d3868/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=fcb87c50b00e203aa3ef586915edd305429d3868", "patch": "@@ -547,8 +547,7 @@ pass_cse_reciprocals::execute (function *fun)\n   basic_block bb;\n   tree arg;\n \n-  occ_pool = new object_allocator<occurrence>\n-    (\"dominators for recip\", n_basic_blocks_for_fn (fun) / 3 + 1);\n+  occ_pool = new object_allocator<occurrence> (\"dominators for recip\");\n \n   memset (&reciprocal_stats, 0, sizeof (reciprocal_stats));\n   calculate_dominance_info (CDI_DOMINATORS);"}, {"sha": "9c4e301aefec25ecfc0c7259e15a961695de155e", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcb87c50b00e203aa3ef586915edd305429d3868/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcb87c50b00e203aa3ef586915edd305429d3868/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=fcb87c50b00e203aa3ef586915edd305429d3868", "patch": "@@ -349,7 +349,7 @@ clear_expression_ids (void)\n   expressions.release ();\n }\n \n-static object_allocator<pre_expr_d> pre_expr_pool (\"pre_expr nodes\", 30);\n+static object_allocator<pre_expr_d> pre_expr_pool (\"pre_expr nodes\");\n \n /* Given an SSA_NAME NAME, get or create a pre_expr to represent it.  */\n \n@@ -488,7 +488,7 @@ static unsigned int get_expr_value_id (pre_expr);\n /* We can add and remove elements and entries to and from sets\n    and hash tables, so we use alloc pools for them.  */\n \n-static object_allocator<bitmap_set> bitmap_set_pool (\"Bitmap sets\", 30);\n+static object_allocator<bitmap_set> bitmap_set_pool (\"Bitmap sets\");\n static bitmap_obstack grand_bitmap_obstack;\n \n /* Set of blocks with statements that have had their EH properties changed.  */"}, {"sha": "f1ffb2490460e8a00fcb492d94ee155fdd1205e5", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcb87c50b00e203aa3ef586915edd305429d3868/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcb87c50b00e203aa3ef586915edd305429d3868/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=fcb87c50b00e203aa3ef586915edd305429d3868", "patch": "@@ -209,8 +209,8 @@ typedef struct operand_entry\n   unsigned int count;\n } *operand_entry_t;\n \n-static object_allocator<operand_entry> operand_entry_pool (\"operand entry pool\",\n-\t\t\t\t\t\t\t 30);\n+static object_allocator<operand_entry> operand_entry_pool\n+  (\"operand entry pool\");\n \n /* This is used to assign a unique ID to each struct operand_entry\n    so that qsort results are identical on different hosts.  */"}, {"sha": "d9eb9f361ef83390ffe847c09f59693e11ea1009", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcb87c50b00e203aa3ef586915edd305429d3868/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcb87c50b00e203aa3ef586915edd305429d3868/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=fcb87c50b00e203aa3ef586915edd305429d3868", "patch": "@@ -4146,9 +4146,9 @@ allocate_vn_table (vn_tables_t table)\n   table->references = new vn_reference_table_type (23);\n \n   gcc_obstack_init (&table->nary_obstack);\n-  table->phis_pool = new object_allocator<vn_phi_s> (\"VN phis\", 30);\n+  table->phis_pool = new object_allocator<vn_phi_s> (\"VN phis\");\n   table->references_pool = new object_allocator<vn_reference_s>\n-    (\"VN references\", 30);\n+    (\"VN references\");\n }\n \n /* Free a value number table.  */"}, {"sha": "87f48bc3f44713b59ca136235c73831dcff20f7c", "filename": "gcc/tree-ssa-strlen.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcb87c50b00e203aa3ef586915edd305429d3868/gcc%2Ftree-ssa-strlen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcb87c50b00e203aa3ef586915edd305429d3868/gcc%2Ftree-ssa-strlen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-strlen.c?ref=fcb87c50b00e203aa3ef586915edd305429d3868", "patch": "@@ -113,8 +113,7 @@ typedef struct strinfo_struct\n } *strinfo;\n \n /* Pool for allocating strinfo_struct entries.  */\n-static object_allocator<strinfo_struct> strinfo_pool (\"strinfo_struct pool\",\n-\t\t\t\t\t\t      64);\n+static object_allocator<strinfo_struct> strinfo_pool (\"strinfo_struct pool\");\n \n /* Vector mapping positive string indexes to strinfo, for the\n    current basic block.  The first pointer in the vector is special,"}, {"sha": "b5b9d0ac86c6b338aca822395908840ebde9363a", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcb87c50b00e203aa3ef586915edd305429d3868/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcb87c50b00e203aa3ef586915edd305429d3868/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=fcb87c50b00e203aa3ef586915edd305429d3868", "patch": "@@ -323,7 +323,7 @@ static inline bool type_can_have_subvars (const_tree);\n \n /* Pool of variable info structures.  */\n static object_allocator<variable_info> variable_info_pool\n-  (\"Variable info pool\", 30);\n+  (\"Variable info pool\");\n \n /* Map varinfo to final pt_solution.  */\n static hash_map<varinfo_t, pt_solution *> *final_solutions;\n@@ -523,7 +523,7 @@ struct constraint\n /* List of constraints that we use to build the constraint graph from.  */\n \n static vec<constraint_t> constraints;\n-static object_allocator<constraint> constraint_pool (\"Constraint pool\", 30);\n+static object_allocator<constraint> constraint_pool (\"Constraint pool\");\n \n /* The constraint graph is represented as an array of bitmaps\n    containing successor nodes.  */"}, {"sha": "e3542d31e1515cb2c1c62166b1411715a78eabd8", "filename": "gcc/var-tracking.c", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcb87c50b00e203aa3ef586915edd305429d3868/gcc%2Fvar-tracking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcb87c50b00e203aa3ef586915edd305429d3868/gcc%2Fvar-tracking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvar-tracking.c?ref=fcb87c50b00e203aa3ef586915edd305429d3868", "patch": "@@ -576,28 +576,27 @@ typedef struct variable_tracking_info_def\n } *variable_tracking_info;\n \n /* Alloc pool for struct attrs_def.  */\n-object_allocator<attrs_def> attrs_def_pool (\"attrs_def pool\", 1024);\n+object_allocator<attrs_def> attrs_def_pool (\"attrs_def pool\");\n \n /* Alloc pool for struct variable_def with MAX_VAR_PARTS entries.  */\n \n static pool_allocator var_pool\n-  (\"variable_def pool\", 64, sizeof (variable_def) +\n+  (\"variable_def pool\", sizeof (variable_def) +\n    (MAX_VAR_PARTS - 1) * sizeof (((variable)NULL)->var_part[0]));\n \n /* Alloc pool for struct variable_def with a single var_part entry.  */\n static pool_allocator valvar_pool\n-  (\"small variable_def pool\", 256, sizeof (variable_def));\n+  (\"small variable_def pool\", sizeof (variable_def));\n \n-/* Alloc pool for struct location_chain_def.  */\n+/* Alloc pool for struct location_chain.  */\n static object_allocator<location_chain> location_chain_pool\n-  (\"location_chain pool\", 1024);\n+  (\"location_chain pool\");\n \n-/* Alloc pool for struct shared_hash_def.  */\n-static object_allocator<shared_hash> shared_hash_pool\n-  (\"shared_hash pool\", 256);\n+/* Alloc pool for struct shared_hash.  */\n+static object_allocator<shared_hash> shared_hash_pool (\"shared_hash pool\");\n \n /* Alloc pool for struct loc_exp_dep_s for NOT_ONEPART variables.  */\n-object_allocator<loc_exp_dep> loc_exp_dep_pool (\"loc_exp_dep pool\", 64);\n+object_allocator<loc_exp_dep> loc_exp_dep_pool (\"loc_exp_dep pool\");\n \n /* Changed variables, notes will be emitted for them.  */\n static variable_table_type *changed_variables;"}]}