{"sha": "7c3cace17c44e3fa1bf8f7128d2f9b8fefb4f865", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2MzY2FjZTE3YzQ0ZTNmYTFiZjhmNzEyOGQyZjliOGZlZmI0Zjg2NQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2016-12-03T17:29:43Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2016-12-03T17:29:43Z"}, "message": "constraints.md (U): Adjust comment.\n\n\t* config/sparc/constraints.md (U): Adjust comment.\n\t* config/sparc/sparc.md (lra): New attribute.\n\t(enabled): For base instructions, if the lra attribute is set,\n\treturn 1 if it is in keeping with TARGET_LRA.\n\t(*movdi_insn_sp32): Add lra attribute for alternatives mentioning U\n\tconstraint and duplicate them with U replaced by r.\n\t(*movdf_insn_sp32): Likewise.\n\t(*mov<VM64:mode>_insn_sp32): Likewise.\n\t(*movtf_insn_sp32): Remove alternatives mentioning U constraint.\n\nFrom-SVN: r243221", "tree": {"sha": "553b4eda02c83fed6e917e233ca215d109fc27e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/553b4eda02c83fed6e917e233ca215d109fc27e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c3cace17c44e3fa1bf8f7128d2f9b8fefb4f865", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c3cace17c44e3fa1bf8f7128d2f9b8fefb4f865", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c3cace17c44e3fa1bf8f7128d2f9b8fefb4f865", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c3cace17c44e3fa1bf8f7128d2f9b8fefb4f865/comments", "author": null, "committer": null, "parents": [{"sha": "f9b6b9291db6eab79e3f4c177cf4cf264aac6dda", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9b6b9291db6eab79e3f4c177cf4cf264aac6dda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9b6b9291db6eab79e3f4c177cf4cf264aac6dda"}], "stats": {"total": 88, "additions": 58, "deletions": 30}, "files": [{"sha": "396580a59ba1781bfc906bbde8de3b80d5ef4ec9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c3cace17c44e3fa1bf8f7128d2f9b8fefb4f865/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c3cace17c44e3fa1bf8f7128d2f9b8fefb4f865/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7c3cace17c44e3fa1bf8f7128d2f9b8fefb4f865", "patch": "@@ -1,4 +1,17 @@\n-2016-12-01  Jeff Law  <law@redhat.com>\n+2016-12-03  Eric Botcazou  <ebotcazou@adacore.com>\n+            David S. Miller  <davem@davemloft.net>\n+\n+\t* config/sparc/constraints.md (U): Adjust comment.\n+\t* config/sparc/sparc.md (lra): New attribute.\n+\t(enabled): For base instructions, if the lra attribute is set,\n+\treturn 1 if it is in keeping with TARGET_LRA.\n+\t(*movdi_insn_sp32): Add lra attribute for alternatives mentioning U\n+\tconstraint and duplicate them with U replaced by r.\n+\t(*movdf_insn_sp32): Likewise.\n+\t(*mov<VM64:mode>_insn_sp32): Likewise.\n+\t(*movtf_insn_sp32): Remove alternatives mentioning U constraint.\n+\n+2016-12-02  Jeff Law  <law@redhat.com>\n \n \t* config/arm/arm.c (arm_handle_cmse_nonsecure_call): Remove unused\n \tvariable main_variant."}, {"sha": "626ced79144ca7fae8d09d8ede3ed1070e60a4f5", "filename": "gcc/config/sparc/constraints.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c3cace17c44e3fa1bf8f7128d2f9b8fefb4f865/gcc%2Fconfig%2Fsparc%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c3cace17c44e3fa1bf8f7128d2f9b8fefb4f865/gcc%2Fconfig%2Fsparc%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fconstraints.md?ref=7c3cace17c44e3fa1bf8f7128d2f9b8fefb4f865", "patch": "@@ -166,10 +166,10 @@\n ;; example, we have a non-offsetable MEM.  Reload will notice this\n ;; case and reload the address into a single hard register.\n ;;\n-;; The real downfall of this awkward register constraint is that it does\n-;; not evaluate to a true register class like a bonafide use of\n-;; define_register_constraint would.  This currently means that we cannot\n-;; use LRA on Sparc, since the constraint processing of LRA really depends\n+;; The real downfall of this awkward register constraint is that it\n+;; does not evaluate to a true register class like a bonafide use of\n+;; define_register_constraint would.  This means that we cannot use\n+;; it with LRA, since the constraint processing of LRA really depends\n ;; upon whether an extra constraint is for registers or not.  It uses\n ;; reg_class_for_constraint, and checks it against NO_REGS.\n (define_constraint \"U\""}, {"sha": "000c5a3859bb83b2f57919a28a5dc2b32353c276", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 40, "deletions": 25, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c3cace17c44e3fa1bf8f7128d2f9b8fefb4f865/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c3cace17c44e3fa1bf8f7128d2f9b8fefb4f865/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=7c3cace17c44e3fa1bf8f7128d2f9b8fefb4f865", "patch": "@@ -254,8 +254,14 @@\n (define_attr \"cpu_feature\" \"none,fpu,fpunotv9,v9,vis,vis3,vis4\"\n   (const_string \"none\"))\n \n+(define_attr \"lra\" \"none,disabled,enabled\"\n+  (const_string \"none\"))\n+\n (define_attr \"enabled\" \"\"\n-  (cond [(eq_attr \"cpu_feature\" \"none\") (const_int 1)\n+  (cond [(eq_attr \"cpu_feature\" \"none\")\n+\t   (cond [(eq_attr \"lra\" \"disabled\") (symbol_ref \"!TARGET_LRA\")\n+\t\t  (eq_attr \"lra\" \"enabled\") (symbol_ref \"TARGET_LRA\")]\n+\t\t (const_int 1))\n          (eq_attr \"cpu_feature\" \"fpu\") (symbol_ref \"TARGET_FPU\")\n          (eq_attr \"cpu_feature\" \"fpunotv9\") (symbol_ref \"TARGET_FPU && !TARGET_V9\")\n          (eq_attr \"cpu_feature\" \"v9\") (symbol_ref \"TARGET_V9\")\n@@ -1701,16 +1707,18 @@\n \n (define_insn \"*movdi_insn_sp32\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\"\n-\t\t\t    \"=T,o,T,U,o,r,r,r,?T,?*f,?*f,?o,?*e,?*e,  r,?*f,?*e,?W,b,b\")\n+\t\t\t    \"=T,o,T,T,U,r,o,r,r,r,?T,?*f,?*f,?o,?*e,?*e,  r,?*f,?*e,?W,b,b\")\n         (match_operand:DI 1 \"input_operand\"\n-\t\t\t    \" J,J,U,T,r,o,i,r,*f,  T,  o,*f, *e, *e,?*f,  r,  W,*e,J,P\"))]\n+\t\t\t    \" J,J,U,r,T,T,r,o,i,r,*f,  T,  o,*f, *e, *e,?*f,  r,  W,*e,J,P\"))]\n   \"TARGET_ARCH32\n    && (register_operand (operands[0], DImode)\n        || register_or_zero_operand (operands[1], DImode))\"\n   \"@\n    stx\\t%%g0, %0\n    #\n    std\\t%1, %0\n+   std\\t%1, %0\n+   ldd\\t%1, %0\n    ldd\\t%1, %0\n    #\n    #\n@@ -1728,11 +1736,12 @@\n    std\\t%1, %0\n    fzero\\t%0\n    fone\\t%0\"\n-  [(set_attr \"type\" \"store,store,store,load,*,*,*,*,fpstore,fpload,*,*,fpmove,*,*,*,fpload,fpstore,visl,visl\")\n-   (set_attr \"length\" \"*,2,*,*,2,2,2,2,*,*,2,2,*,2,2,2,*,*,*,*\")\n-   (set_attr \"fptype\" \"*,*,*,*,*,*,*,*,*,*,*,*,double,*,*,*,*,*,double,double\")\n-   (set_attr \"cpu_feature\" \"v9,*,*,*,*,*,*,*,fpu,fpu,fpu,fpu,v9,fpunotv9,vis3,vis3,fpu,fpu,vis,vis\")\n-   (set_attr \"v3pipe\" \"*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,true,true\")])\n+  [(set_attr \"type\" \"store,store,store,store,load,load,*,*,*,*,fpstore,fpload,*,*,fpmove,*,*,*,fpload,fpstore,visl,visl\")\n+   (set_attr \"length\" \"*,2,*,*,*,*,2,2,2,2,*,*,2,2,*,2,2,2,*,*,*,*\")\n+   (set_attr \"fptype\" \"*,*,*,*,*,*,*,*,*,*,*,*,*,*,double,*,*,*,*,*,double,double\")\n+   (set_attr \"cpu_feature\" \"v9,*,*,*,*,*,*,*,*,*,fpu,fpu,fpu,fpu,v9,fpunotv9,vis3,vis3,fpu,fpu,vis,vis\")\n+   (set_attr \"v3pipe\" \"*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,true,true\")\n+   (set_attr \"lra\" \"*,*,disabled,enabled,disabled,enabled,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*\")])\n \n (define_insn \"*movdi_insn_sp64\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,r,r, m, r,*e,?*e,?*e,?W,b,b\")\n@@ -2372,9 +2381,9 @@\n \n (define_insn \"*movdf_insn_sp32\"\n   [(set (match_operand:DF 0 \"nonimmediate_operand\"\n-\t\t\t    \"=b,b,e,e,*r, f,  e,T,W,U,T,  f,  *r,  o,o\")\n+\t\t\t    \"=b,b,e,e,*r, f,  e,T,W,U,r,T,T,  f,  *r,  o,o\")\n \t(match_operand:DF 1 \"input_operand\"\n-\t\t\t    \" G,C,e,e, f,*r,W#F,G,e,T,U,o#F,*roF,*rG,f\"))]\n+\t\t\t    \" G,C,e,e, f,*r,W#F,G,e,T,T,U,r,o#F,*roF,*rG,f\"))]\n   \"TARGET_ARCH32\n    && (register_operand (operands[0], DFmode)\n        || register_or_zero_or_all_ones_operand (operands[1], DFmode))\"\n@@ -2389,16 +2398,19 @@\n   stx\\t%r1, %0\n   std\\t%1, %0\n   ldd\\t%1, %0\n+  ldd\\t%1, %0\n+  std\\t%1, %0\n   std\\t%1, %0\n   #\n   #\n   #\n   #\"\n-  [(set_attr \"type\" \"visl,visl,fpmove,*,*,*,fpload,store,fpstore,load,store,*,*,*,*\")\n-   (set_attr \"length\" \"*,*,*,2,2,2,*,*,*,*,*,2,2,2,2\")\n-   (set_attr \"fptype\" \"double,double,double,*,*,*,*,*,*,*,*,*,*,*,*\")\n-   (set_attr \"cpu_feature\" \"vis,vis,v9,fpunotv9,vis3,vis3,fpu,v9,fpu,*,*,fpu,*,*,fpu\")\n-   (set_attr \"v3pipe\" \"true,true,*,*,*,*,*,*,*,*,*,*,*,*,*\")])\n+  [(set_attr \"type\" \"visl,visl,fpmove,*,*,*,fpload,store,fpstore,load,load,store,store,*,*,*,*\")\n+   (set_attr \"length\" \"*,*,*,2,2,2,*,*,*,*,*,*,*,2,2,2,2\")\n+   (set_attr \"fptype\" \"double,double,double,*,*,*,*,*,*,*,*,*,*,*,*,*,*\")\n+   (set_attr \"cpu_feature\" \"vis,vis,v9,fpunotv9,vis3,vis3,fpu,v9,fpu,*,*,*,*,fpu,*,*,fpu\")\n+   (set_attr \"v3pipe\" \"true,true,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*\")\n+   (set_attr \"lra\" \"*,*,*,*,*,*,*,*,*,disabled,enabled,disabled,enabled,*,*,*,*\")])\n \n (define_insn \"*movdf_insn_sp64\"\n   [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=b,b,e,*r, e,  e,W, *r,*r,  m,*r\")\n@@ -2609,14 +2621,14 @@\n })\n \n (define_insn \"*movtf_insn_sp32\"\n-  [(set (match_operand:TF 0 \"nonimmediate_operand\" \"=b, e,o,  o,U,  r\")\n-\t(match_operand:TF 1 \"input_operand\"        \" G,oe,e,rGU,o,roG\"))]\n+  [(set (match_operand:TF 0 \"nonimmediate_operand\" \"=b, e,o, o,  r\")\n+\t(match_operand:TF 1 \"input_operand\"        \" G,oe,e,rG,roG\"))]\n   \"TARGET_ARCH32\n    && (register_operand (operands[0], TFmode)\n        || register_or_zero_operand (operands[1], TFmode))\"\n   \"#\"\n-  [(set_attr \"length\" \"4,4,4,4,4,4\")\n-   (set_attr \"cpu_feature\" \"fpu,fpu,fpu,*,*,*\")])\n+  [(set_attr \"length\" \"4,4,4,4,4\")\n+   (set_attr \"cpu_feature\" \"fpu,fpu,fpu,*,*\")])\n \n (define_insn \"*movtf_insn_sp64\"\n   [(set (match_operand:TF 0 \"nonimmediate_operand\" \"=b, e,o, o,  r\")\n@@ -8636,8 +8648,8 @@\n    (set_attr \"v3pipe\" \"true,true,true,*,*,*,*,*,*,*,*\")])\n \n (define_insn \"*mov<VM64:mode>_insn_sp32\"\n-  [(set (match_operand:VM64 0 \"nonimmediate_operand\" \"=e,e,e,*r, f,e,m,m,U,T, o,*r\")\n-\t(match_operand:VM64 1 \"input_operand\"         \"Y,C,e, f,*r,m,e,Y,T,U,*r,*r\"))]\n+  [(set (match_operand:VM64 0 \"nonimmediate_operand\" \"=e,e,e,*r, f,e,m,m,U,r,T,T, o,*r\")\n+\t(match_operand:VM64 1 \"input_operand\"         \"Y,C,e, f,*r,m,e,Y,T,T,U,r,*r,*r\"))]\n   \"TARGET_VIS\n    && TARGET_ARCH32\n    && (register_operand (operands[0], <VM64:MODE>mode)\n@@ -8652,13 +8664,16 @@\n   std\\t%1, %0\n   stx\\t%r1, %0\n   ldd\\t%1, %0\n+  ldd\\t%1, %0\n+  std\\t%1, %0\n   std\\t%1, %0\n   #\n   #\"\n-  [(set_attr \"type\" \"visl,visl,vismv,*,*,fpload,fpstore,store,load,store,*,*\")\n-   (set_attr \"length\" \"*,*,*,2,2,*,*,*,*,*,2,2\")\n-   (set_attr \"cpu_feature\" \"vis,vis,vis,vis3,vis3,*,*,*,*,*,*,*\")\n-   (set_attr \"v3pipe\" \"true,true,true,*,*,*,*,*,*,*,*,*\")])\n+  [(set_attr \"type\" \"visl,visl,vismv,*,*,fpload,fpstore,store,load,load,store,store,*,*\")\n+   (set_attr \"length\" \"*,*,*,2,2,*,*,*,*,*,*,*,2,2\")\n+   (set_attr \"cpu_feature\" \"vis,vis,vis,vis3,vis3,*,*,*,*,*,*,*,*,*\")\n+   (set_attr \"v3pipe\" \"true,true,true,*,*,*,*,*,*,*,*,*,*,*\")\n+   (set_attr \"lra\" \"*,*,*,*,*,*,*,*,disabled,enabled,disabled,enabled,*,*\")])\n \n (define_split\n   [(set (match_operand:VM64 0 \"memory_operand\" \"\")"}]}