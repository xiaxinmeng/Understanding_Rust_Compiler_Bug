{"sha": "3fd30b88dfb2aca4bad797fa7b287556d663562a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2ZkMzBiODhkZmIyYWNhNGJhZDc5N2ZhN2IyODc1NTZkNjYzNTYyYQ==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@apple.com", "date": "2005-05-18T20:45:26Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2005-05-18T20:45:26Z"}, "message": "dummy-checksum.c: New.\n\n2005-05-18  Geoffrey Keating  <geoffk@apple.com>\n\n\t* dummy-checksum.c: New.\n\t* genchecksum.c: New.\n\t* c.opt (print_pch_checksum): New flag.\n\t* c-pch.c (struct c_pch_validity): Make much shorter.\n\t(no_checksum): New.\n\t(host_machine): Remove.\n\t(target_machine): Remove.\n\t(get_ident): Change PCH version number.\n\t(pch_init): When -fverbose-asm, print out the compiler fingerprint.\n\tDon't put triplets or version string in PCH validity data.\n\tDo put the compiler checksum in the validity data.\n\t(c_common_valid_pch): Don't check triplets or version string.  Do\n\tcheck checksum.\n\t(c_common_print_pch_checksum): New.\n\t* c-opts.c (c_common_handle_option): Add OPT_print_pch_checksum.\n\tPrint fingerprint with -v.\n\t* c-common.h (c_common_print_pch_checksum): New.\n\t(executable_checksum): New.\n\t* Makefile.in (STAGEMOVESTUFF): Add cc1*-dummy, *-checksum.c.\n\t(cc1-dummy): New rule.\n\t(cc1-checksum.c): New rule.\n\t(cc1-checksum.o): New rule.\n\t(cc1): Add checksum support.\n\t(build/genchecksum): New.\n\t(build/genchecksum.o): New.\n\t(dummy-checksum.o): New.\n\t(genobjnames): Add genchecksum.o.\n\t(mostlyclean): Remove *-checksum.c.\n\t(gnucompare): Add libgcc to list of directories checked.\n\tMake comparison problems in libgcc/ and with checksum files only\n\tbe warnings.\n\t* doc/invoke.texi (Precompiled Headers): Remove caution.\n\tDocument that it must be the exact same binary.  Add a few\n\tknown-safe flags to the list.\n\nIn cp/:\n2005-05-18  Geoffrey Keating  <geoffk@apple.com>\n\n\t* Make-lang.in (cc1plus-dummy): New.\n\t(cc1plus-checksum.c): New.\n\t(cc1plus-checksum.o): New.\n\t(cc1plus): Add cc1plus-checksum.o.\n\nIn objc/:\n2005-05-18  Geoffrey Keating  <geoffk@apple.com>\n\n\t* Make-lang.in (cc1obj-dummy): New.\n\t(cc1obj-checksum.c): New.\n\t(cc1obj-checksum.o): New.\n\t(cc1obj): Add cc1obj-checksum.o.\n\nIn objcp/:\n2005-05-18  Geoffrey Keating  <geoffk@apple.com>\n\n\t* Make-lang.in (cc1objplus-dummy): New.\n\t(cc1objplus-checksum.c): New.\n\t(cc1objplus-checksum.o): New.\n\t(cc1objplus): Add cc1objplus-checksum.o.\n\nFrom-SVN: r99928", "tree": {"sha": "245651951ece0aac97f2aca3cb99e9d5d3e256a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/245651951ece0aac97f2aca3cb99e9d5d3e256a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3fd30b88dfb2aca4bad797fa7b287556d663562a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fd30b88dfb2aca4bad797fa7b287556d663562a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fd30b88dfb2aca4bad797fa7b287556d663562a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fd30b88dfb2aca4bad797fa7b287556d663562a/comments", "author": {"login": "geoffk01", "id": 31905243, "node_id": "MDQ6VXNlcjMxOTA1MjQz", "avatar_url": "https://avatars.githubusercontent.com/u/31905243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geoffk01", "html_url": "https://github.com/geoffk01", "followers_url": "https://api.github.com/users/geoffk01/followers", "following_url": "https://api.github.com/users/geoffk01/following{/other_user}", "gists_url": "https://api.github.com/users/geoffk01/gists{/gist_id}", "starred_url": "https://api.github.com/users/geoffk01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geoffk01/subscriptions", "organizations_url": "https://api.github.com/users/geoffk01/orgs", "repos_url": "https://api.github.com/users/geoffk01/repos", "events_url": "https://api.github.com/users/geoffk01/events{/privacy}", "received_events_url": "https://api.github.com/users/geoffk01/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "045a8eb38895adbd97913affd35ab1ac450d8871", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/045a8eb38895adbd97913affd35ab1ac450d8871", "html_url": "https://github.com/Rust-GCC/gccrs/commit/045a8eb38895adbd97913affd35ab1ac450d8871"}], "stats": {"total": 408, "additions": 296, "deletions": 112}, "files": [{"sha": "1697d9a45da3ac05c61d57a662d6e9b4d8b1bf35", "filename": "gcc/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fd30b88dfb2aca4bad797fa7b287556d663562a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fd30b88dfb2aca4bad797fa7b287556d663562a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3fd30b88dfb2aca4bad797fa7b287556d663562a", "patch": "@@ -1,5 +1,40 @@\n 2005-05-18  Geoffrey Keating  <geoffk@apple.com>\n \n+\t* dummy-checksum.c: New.\n+\t* genchecksum.c: New.\n+\t* c.opt (print_pch_checksum): New flag.\n+\t* c-pch.c (struct c_pch_validity): Make much shorter.\n+\t(no_checksum): New.\n+\t(host_machine): Remove.\n+\t(target_machine): Remove.\n+\t(get_ident): Change PCH version number.\n+\t(pch_init): When -fverbose-asm, print out the compiler fingerprint.\n+\tDon't put triplets or version string in PCH validity data.\n+\tDo put the compiler checksum in the validity data.\n+\t(c_common_valid_pch): Don't check triplets or version string.  Do\n+\tcheck checksum.\n+\t(c_common_print_pch_checksum): New.\n+\t* c-opts.c (c_common_handle_option): Add OPT_print_pch_checksum.\n+\tPrint fingerprint with -v.\n+\t* c-common.h (c_common_print_pch_checksum): New.\n+\t(executable_checksum): New.\n+\t* Makefile.in (STAGEMOVESTUFF): Add cc1*-dummy, *-checksum.c.\n+\t(cc1-dummy): New rule.\n+\t(cc1-checksum.c): New rule.\n+\t(cc1-checksum.o): New rule.\n+\t(cc1): Add checksum support.\n+\t(build/genchecksum): New.\n+\t(build/genchecksum.o): New.\n+\t(dummy-checksum.o): New.\n+\t(genobjnames): Add genchecksum.o.\n+\t(mostlyclean): Remove *-checksum.c.\n+\t(gnucompare): Add libgcc to list of directories checked.\n+\tMake comparison problems in libgcc/ and with checksum files only\n+\tbe warnings.\n+\t* doc/invoke.texi (Precompiled Headers): Remove caution.\n+\tDocument that it must be the exact same binary.  Add a few\n+\tknown-safe flags to the list.\n+\n \t* rs6000/predicates.md (fix_trunc_dest_operand): New.\n \t* rs6000/rs6000.md (fix_truncdfsi2): Use fix_trunc_dest_operand.\n \tCheck that a memory operand is valid before trying to use it."}, {"sha": "296e1cbe00f91ac5907165e8f1cfdc2168e384bd", "filename": "gcc/Makefile.in", "status": "modified", "additions": 49, "deletions": 20, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fd30b88dfb2aca4bad797fa7b287556d663562a/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fd30b88dfb2aca4bad797fa7b287556d663562a/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=3fd30b88dfb2aca4bad797fa7b287556d663562a", "patch": "@@ -983,12 +983,12 @@ STAGECOPYSTUFF = insn-flags.h insn-config.h insn-codes.h \\\n \n # Files to be moved away after each stage in building.\n STAGEMOVESTUFF = *$(objext) s-* \\\n- xgcc$(exeext) cpp$(exeext) cc1$(exeext) $(EXTRA_PASSES) \\\n+ xgcc$(exeext) cpp$(exeext) cc1$(exeext) cc1*-dummy$(exeext) $(EXTRA_PASSES) \\\n  $(EXTRA_PARTS) $(EXTRA_PROGRAMS) gcc-cross$(exeext) \\\n  protoize$(exeext) unprotoize$(exeext) \\\n  $(SPECS) collect2$(exeext) \\\n  gcov-iov$(build_exeext) gcov$(exeext) gcov-dump$(exeext) \\\n- *.[0-9][0-9].* *.[si] libbackend.a libgcc.mk \\\n+ *.[0-9][0-9].* *.[si] *-checksum.c libbackend.a libgcc.mk \\\n  $(LANG_STAGESTUFF)\n \n # Defined in libgcc2.c, included only in the static library.\n@@ -1213,9 +1213,18 @@ $(SPECS): xgcc$(exeext)\n gcc-cross: xgcc$(exeext)\n \tcp xgcc$(exeext) gcc-cross$(exeext)\n \n-cc1$(exeext): $(C_OBJS) $(BACKEND) $(LIBDEPS)\n-\t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o cc1$(exeext) \\\n-\t\t$(C_OBJS) $(BACKEND) $(LIBS)\n+cc1-dummy$(exeext): $(C_OBJS) dummy-checksum.o $(BACKEND) $(LIBDEPS)\n+\t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ $(C_OBJS) dummy-checksum.o \\\n+\t  $(BACKEND) $(LIBS)\n+\n+cc1-checksum.c : cc1-dummy$(exeext) build/genchecksum$(exeext)\n+\tbuild/genchecksum$(exeext) cc1-dummy$(exeext) > $@\n+\n+cc1-checksum.o : cc1-checksum.c\n+\n+cc1$(exeext): $(C_OBJS) cc1-checksum.o $(BACKEND) $(LIBDEPS)\n+\t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ $(C_OBJS) cc1-checksum.o \\\n+\t  $(BACKEND) $(LIBS)\n \n # Build the version of limits.h that we will install.\n xlimits.h: glimits.h limitx.h limity.h\n@@ -1532,6 +1541,14 @@ gccspec.o: gccspec.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(GCC_H)\n \n cppspec.o: cppspec.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(GCC_H)\n \n+build/genchecksum$(build_exeext) : build/genchecksum.o $(BUILD_LIBDEPS)\n+\t$(CC_FOR_BUILD) $(BUILD_CFLAGS) $(BUILD_LDFLAGS) -o $@ \\\n+\t build/genchecksum.o $(BUILD_LIBS)\n+\n+build/genchecksum.o : genchecksum.c $(BCONFIG_H) $(SYSTEM_H) $(MD5_H)\n+\n+dummy-checksum.o : dummy-checksum.c\n+\n tree-check.h: s-check ; @true\n s-check : build/gencheck$(build_exeext)\n \t$(RUN_GEN) build/gencheck$(build_exeext) > tmp-check.h\n@@ -2668,7 +2685,8 @@ genobjnames=$(genprognames:%=%.o) read-rtl.o gensupport.o genattrtab.o \\\n \tgenconstants.o gen-protos.o scan.o fix-header.o scan-decls.o \\\n \tgencheck.o dummy-conditions.o genconditions.o errors.o ggc-none.o \\\n \tmin-insn-modes.o rtl.o print-rtl.o varray.o gcov-iov.o \\\n-\tinsn-conditions.o gengtype-lex.o gengtype-yacc.o genmddeps.o\n+\tinsn-conditions.o gengtype-lex.o gengtype-yacc.o genmddeps.o \\\n+\tgenchecksum.o\n \n genobjs=$(genobjnames:%=build/%)\n \n@@ -3300,6 +3318,8 @@ mostlyclean: lang.mostlyclean\n # Delete files generated by gengtype.c\n \t-rm -f gtype-*\n \t-rm -f gt-*\n+# Delete genchecksum outputs\n+\t-rm -f *-checksum.c\n \n # Delete all files made by compilation\n # that don't exist in the distribution.\n@@ -4068,23 +4088,32 @@ fastcompare fastcompare3 fastcompare4 fastcompare-lean fastcompare3-lean fastcom\n  gnucompare  gnucompare3  gnucompare4  gnucompare-lean  gnucompare3-lean  gnucompare4-lean: force\n \t-rm -f .bad_compare\n \tcase \"$@\" in *compare | *compare-lean ) stage=2 ;; * ) stage=`echo $@ | sed -e 's,^[a-z]*compare\\([0-9][0-9]*\\).*,\\1,'` ;; esac; \\\n-\tfor dir in . $(SUBDIRS); do \\\n+\tfor dir in . $(SUBDIRS) libgcc; do \\\n \t  if [ \"`echo $$dir/*$(objext)`\" != \"$$dir/*$(objext)\" ] ; then \\\n \t    for file in $$dir/*$(objext); do \\\n-\t      case \"$@\" in \\\n-\t\tslowcompare* ) \\\n-\t\t  tail +16c ./$$file > tmp-foo1; \\\n-\t\t  tail +16c stage$$stage/$$file > tmp-foo2 \\\n-\t\t    && (cmp tmp-foo1 tmp-foo2 > /dev/null 2>&1 || echo $$file differs >> .bad_compare) || true; \\\n-\t\t  ;; \\\n-\t\tfastcompare* ) \\\n-\t\t  cmp $$file stage$$stage/$$file 16 16 > /dev/null 2>&1; \\\n-\t\t  test $$? -eq 1 && echo $$file differs >> .bad_compare || true; \\\n-\t\t  ;; \\\n-\t\tgnucompare* ) \\\n-\t\t  cmp --ignore-initial=16 $$file stage$$stage/$$file > /dev/null 2>&1; \\\n-\t\t  test $$? -eq 1 && echo $$file differs >> .bad_compare || true; \\\n+\t      case $$file in \\\n+\t\t./cc*-checksum$(objext) | libgcc/* ) \\\n+\t\t    tail +16c ./$$file > tmp-foo1 \\\n+\t\t    && tail +16c stage$$stage/$$file > tmp-foo2 \\\n+\t\t    && ( cmp tmp-foo1 tmp-foo2 > /dev/null 2>&1 \\\n+\t\t\t || echo warning: $$file differs || true ) \\\n \t\t  ;; \\\n+\t\t*)  case \"$@\" in \\\n+\t\t  slowcompare* ) \\\n+\t\t    tail +16c ./$$file > tmp-foo1; \\\n+\t\t    tail +16c stage$$stage/$$file > tmp-foo2 \\\n+\t\t      && (cmp tmp-foo1 tmp-foo2 > /dev/null 2>&1 \\\n+\t\t\t  || echo $$file differs >> .bad_compare) || true; \\\n+\t\t    ;; \\\n+\t\t  fastcompare* ) \\\n+\t\t    cmp $$file stage$$stage/$$file 16 16 > /dev/null 2>&1; \\\n+\t\t    test $$? -eq 1 && echo $$file differs >> .bad_compare || true; \\\n+\t\t    ;; \\\n+\t\t  gnucompare* ) \\\n+\t\t    cmp --ignore-initial=16 $$file stage$$stage/$$file > /dev/null 2>&1; \\\n+\t\t    test $$? -eq 1 && echo $$file differs >> .bad_compare || true; \\\n+\t\t    ;; \\\n+\t        esac ; \\\n \t      esac ; \\\n \t    done; \\\n \t  else true; fi; \\"}, {"sha": "962f157539e8d75d27cd51b079d1d539a02a8eda", "filename": "gcc/c-common.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fd30b88dfb2aca4bad797fa7b287556d663562a/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fd30b88dfb2aca4bad797fa7b287556d663562a/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=3fd30b88dfb2aca4bad797fa7b287556d663562a", "patch": "@@ -859,6 +859,10 @@ extern void c_common_read_pch (cpp_reader *pfile, const char *name, int fd,\n extern void c_common_write_pch (void);\n extern void c_common_no_more_pch (void);\n extern void c_common_pch_pragma (cpp_reader *pfile);\n+extern void c_common_print_pch_checksum (FILE *f);\n+\n+/* In *-checksum.c */\n+extern const unsigned char executable_checksum[16];\n \n extern void builtin_define_with_value (const char *, const char *, int);\n extern void c_stddef_cpp_builtins (void);"}, {"sha": "62fec1a124a1cc56a3280d441547f6afa6010e44", "filename": "gcc/c-opts.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fd30b88dfb2aca4bad797fa7b287556d663562a/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fd30b88dfb2aca4bad797fa7b287556d663562a/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=3fd30b88dfb2aca4bad797fa7b287556d663562a", "patch": "@@ -863,6 +863,11 @@ c_common_handle_option (size_t scode, const char *arg, int value)\n       print_struct_values = 1;\n       break;\n \n+    case OPT_print_pch_checksum:\n+      c_common_print_pch_checksum (stdout);\n+      exit_after_options = true;\n+      break;\n+\n     case OPT_remap:\n       cpp_opts->remap = 1;\n       break;\n@@ -1066,6 +1071,9 @@ c_common_init (void)\n      are known.  */\n   cpp_init_iconv (parse_in);\n \n+  if (version_flag)\n+    c_common_print_pch_checksum (stderr);\n+\n   if (flag_preprocess_only)\n     {\n       finish_options ();"}, {"sha": "a15134185784ffb42ed95e540f5c0f466017d1cd", "filename": "gcc/c-pch.c", "status": "modified", "additions": 55, "deletions": 74, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fd30b88dfb2aca4bad797fa7b287556d663562a/gcc%2Fc-pch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fd30b88dfb2aca4bad797fa7b287556d663562a/gcc%2Fc-pch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pch.c?ref=3fd30b88dfb2aca4bad797fa7b287556d663562a", "patch": "@@ -52,22 +52,17 @@ enum {\n   MATCH_SIZE = ARRAY_SIZE (pch_matching)\n };\n \n-/* This structure is read very early when validating the PCH, and\n-   might be read for a PCH which is for a completely different compiler\n-   for a different operating system.  Thus, it should really only contain\n-   'unsigned char' entries, at least in the initial entries.  \n+/* The value of the checksum in the dummy compiler that is actually\n+   checksummed.  That compiler should never be run.  */\n+static const char no_checksum[16] = { 0 };\n \n-   If you add or change entries before version_length, you should increase\n-   the version number in get_ident().  \n+/* Information about flags and suchlike that affect PCH validity.\n \n-   There are a bunch of fields named *_length; those are lengths of data that\n-   follows this structure in the same order as the fields in the structure.  */\n+   Before this structure is read, both an initial 8-character identification\n+   string, and a 16-byte checksum, have been read and validated.  */\n \n struct c_pch_validity\n {\n-  unsigned char host_machine_length;\n-  unsigned char target_machine_length;\n-  unsigned char version_length;\n   unsigned char debug_info_type;\n   signed char match[MATCH_SIZE];\n   void (*pch_init) (void);\n@@ -87,10 +82,6 @@ static FILE *pch_outfile;\n /* The position in the assembler output file when pch_init was called.  */\n static long asm_file_startpos;\n \n-/* The host and target machines.  */\n-static const char host_machine[] = HOST_MACHINE;\n-static const char target_machine[] = TARGET_MACHINE;\n-\n static const char *get_ident (void);\n \n /* Compute an appropriate 8-byte magic number for the PCH file, so that\n@@ -102,7 +93,7 @@ static const char *\n get_ident (void)\n {\n   static char result[IDENT_LENGTH];\n-  static const char template[IDENT_LENGTH] = \"gpch.012\";\n+  static const char template[IDENT_LENGTH] = \"gpch.013\";\n   static const char c_language_chars[] = \"Co+O\";\n   \n   memcpy (result, template, IDENT_LENGTH);\n@@ -111,8 +102,10 @@ get_ident (void)\n   return result;\n }\n \n-/* Prepare to write a PCH file.  This is called at the start of \n-   compilation.  */\n+/* Prepare to write a PCH file, if one is being written.  This is\n+   called at the start of compilation.  \n+\n+   Also, print out the executable checksum if -fverbose-asm is in effect.  */\n \n void\n pch_init (void)\n@@ -122,6 +115,15 @@ pch_init (void)\n   void *target_validity;\n   static const char partial_pch[IDENT_LENGTH] = \"gpcWrite\";\n   \n+#ifdef ASM_COMMENT_START\n+  if (flag_verbose_asm)\n+    {\n+      fprintf (asm_out_file, \"%s \", ASM_COMMENT_START);\n+      c_common_print_pch_checksum (asm_out_file);\n+      fputc ('\\n', asm_out_file);\n+    }\n+#endif\n+  \n   if (!pch_file)\n     return;\n   \n@@ -130,13 +132,8 @@ pch_init (void)\n     fatal_error (\"can%'t create precompiled header %s: %m\", pch_file);\n   pch_outfile = f;\n \n-  gcc_assert (strlen (host_machine) < 256\n-\t      && strlen (target_machine) < 256\n-\t      && strlen (version_string) < 256);\n+  gcc_assert (memcmp (executable_checksum, no_checksum, 16) != 0);\n   \n-  v.host_machine_length = strlen (host_machine);\n-  v.target_machine_length = strlen (target_machine);\n-  v.version_length = strlen (version_string);\n   v.debug_info_type = write_symbols;\n   {\n     size_t i;\n@@ -150,10 +147,8 @@ pch_init (void)\n   target_validity = targetm.get_pch_validity (&v.target_data_length);\n   \n   if (fwrite (partial_pch, IDENT_LENGTH, 1, f) != 1\n+      || fwrite (executable_checksum, 16, 1, f) != 1\n       || fwrite (&v, sizeof (v), 1, f) != 1\n-      || fwrite (host_machine, v.host_machine_length, 1, f) != 1\n-      || fwrite (target_machine, v.target_machine_length, 1, f) != 1\n-      || fwrite (version_string, v.version_length, 1, f) != 1\n       || fwrite (target_validity, v.target_data_length, 1, f) != 1)\n     fatal_error (\"can%'t write to %s: %m\", pch_file);\n \n@@ -234,20 +229,24 @@ c_common_valid_pch (cpp_reader *pfile, const char *name, int fd)\n {\n   int sizeread;\n   int result;\n-  char ident[IDENT_LENGTH];\n-  char short_strings[256 * 3];\n-  int strings_length;\n+  char ident[IDENT_LENGTH + 16];\n   const char *pch_ident;\n   struct c_pch_validity v;\n \n   /* Perform a quick test of whether this is a valid\n      precompiled header for the current language.  */\n \n-  sizeread = read (fd, ident, IDENT_LENGTH);\n+  gcc_assert (memcmp (executable_checksum, no_checksum, 16) != 0);\n+\n+  sizeread = read (fd, ident, IDENT_LENGTH + 16);\n   if (sizeread == -1)\n     fatal_error (\"can%'t read %s: %m\", name);\n-  else if (sizeread != IDENT_LENGTH)\n-    return 2;\n+  else if (sizeread != IDENT_LENGTH + 16)\n+    {\n+      cpp_error (pfile, CPP_DL_WARNING, \"%s: too short to be a PCH file\",\n+\t\t name);\n+      return 2;\n+    }\n   \n   pch_ident = get_ident();\n   if (memcmp (ident, pch_ident, IDENT_LENGTH) != 0)\n@@ -269,52 +268,20 @@ c_common_valid_pch (cpp_reader *pfile, const char *name, int fd)\n \t}\n       return 2;\n     }\n-\n-  /* At this point, we know it's a PCH file, so it ought to be long enough\n-     that we can read a c_pch_validity structure.  */\n-  if (read (fd, &v, sizeof (v)) != sizeof (v))\n-    fatal_error (\"can%'t read %s: %m\", name);\n-\n-  strings_length = (v.host_machine_length + v.target_machine_length \n-\t\t    + v.version_length);\n-  if (read (fd, short_strings, strings_length) != strings_length)\n-    fatal_error (\"can%'t read %s: %m\", name);\n-  if (v.host_machine_length != strlen (host_machine)\n-      || memcmp (host_machine, short_strings, strlen (host_machine)) != 0)\n-    {\n-      if (cpp_get_options (pfile)->warn_invalid_pch)\n-\tcpp_error (pfile, CPP_DL_WARNING, \n-\t\t   \"%s: created on host '%.*s', but used on host '%s'\", name,\n-\t\t   v.host_machine_length, short_strings, host_machine);\n-      return 2;\n-    }\n-  if (v.target_machine_length != strlen (target_machine)\n-      || memcmp (target_machine, short_strings + v.host_machine_length,\n-\t\t strlen (target_machine)) != 0)\n-    {\n-      if (cpp_get_options (pfile)->warn_invalid_pch)\n-\tcpp_error (pfile, CPP_DL_WARNING, \n-\t\t   \"%s: created for target '%.*s', but used for target '%s'\", \n-\t\t   name, v.target_machine_length, \n-\t\t   short_strings + v.host_machine_length, target_machine);\n-      return 2;\n-    }\n-  if (v.version_length != strlen (version_string)\n-      || memcmp (version_string, \n-\t\t (short_strings + v.host_machine_length \n-\t\t  + v.target_machine_length),\n-\t\t v.version_length) != 0)\n+  if (memcmp (ident + IDENT_LENGTH, executable_checksum, 16) != 0)\n     {\n       if (cpp_get_options (pfile)->warn_invalid_pch)\n \tcpp_error (pfile, CPP_DL_WARNING,\n-\t\t   \"%s: created by version '%.*s', but this is version '%s'\", \n-\t\t   name, v.version_length, \n-\t\t   (short_strings + v.host_machine_length \n-\t\t    + v.target_machine_length), \n-\t\t   version_string);\n+\t\t   \"%s: created by a different GCC executable\", name);\n       return 2;\n     }\n \n+  /* At this point, we know it's a PCH file created by this\n+     executable, so it ought to be long enough that we can read a\n+     c_pch_validity structure.  */\n+  if (read (fd, &v, sizeof (v)) != sizeof (v))\n+    fatal_error (\"can%'t read %s: %m\", name);\n+\n   /* The allowable debug info combinations are that either the PCH file\n      was built with the same as is being used now, or the PCH file was\n      built for some kind of debug info but now none is in use.  */\n@@ -346,7 +313,9 @@ c_common_valid_pch (cpp_reader *pfile, const char *name, int fd)\n   /* If the text segment was not loaded at the same address as it was\n      when the PCH file was created, function pointers loaded from the\n      PCH will not be valid.  We could in theory remap all the function\n-     pointers, but no support for that exists at present.  */\n+     pointers, but no support for that exists at present.  \n+     Since we have the same executable, it should only be necessary to\n+     check one function.  */\n   if (v.pch_init != &pch_init)\n     {\n       if (cpp_get_options (pfile)->warn_invalid_pch)\n@@ -508,3 +477,15 @@ c_common_pch_pragma (cpp_reader *pfile)\n   \n   close (fd);\n }\n+\n+/* Print out executable_checksum[].  */\n+\n+void\n+c_common_print_pch_checksum (FILE *f)\n+{\n+  int i;\n+  fputs (\"Compiler executable checksum: \", f);\n+  for (i = 0; i < 16; i++)\n+    fprintf (f, \"%02x\", executable_checksum[i]);\n+  putc ('\\n', f);\n+}"}, {"sha": "d06ac94772e4315338f8fc979da66b87356fed00", "filename": "gcc/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fd30b88dfb2aca4bad797fa7b287556d663562a/gcc%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fd30b88dfb2aca4bad797fa7b287556d663562a/gcc%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc.opt?ref=3fd30b88dfb2aca4bad797fa7b287556d663562a", "patch": "@@ -791,6 +791,10 @@ print-objc-runtime-info\n ObjC ObjC++\n Generate C header of platform-specific features\n \n+print-pch-checksum\n+C ObjC C++ ObjC++\n+Print a checksum of the executable for PCH validity checking, and stop.\n+\n remap\n C ObjC C++ ObjC++\n Remap file names when including files"}, {"sha": "cc4abc62b5713d3d0b11efd69ae448dfb92217f8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fd30b88dfb2aca4bad797fa7b287556d663562a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fd30b88dfb2aca4bad797fa7b287556d663562a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3fd30b88dfb2aca4bad797fa7b287556d663562a", "patch": "@@ -1,3 +1,10 @@\n+2005-05-18  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* Make-lang.in (cc1plus-dummy): New.\n+\t(cc1plus-checksum.c): New.\n+\t(cc1plus-checksum.o): New.\n+\t(cc1plus): Add cc1plus-checksum.o.\n+\n 2005-05-17  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR C++/19664"}, {"sha": "9b33211e6f1e9febf6b0f497865f800fe3d75ddc", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fd30b88dfb2aca4bad797fa7b287556d663562a/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fd30b88dfb2aca4bad797fa7b287556d663562a/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=3fd30b88dfb2aca4bad797fa7b287556d663562a", "patch": "@@ -91,9 +91,18 @@ CXX_OBJS = cp/cp-lang.o stub-objc.o $(CXX_AND_OBJCXX_OBJS)\n # Use strict warnings for this front end.\n cp-warn = $(STRICT_WARN)\n \n-cc1plus$(exeext): $(CXX_OBJS) $(BACKEND) $(LIBDEPS)\n+cc1plus-dummy$(exeext): $(CXX_OBJS) dummy-checksum.o $(BACKEND) $(LIBDEPS)\n \t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ \\\n-\t      $(CXX_OBJS) $(BACKEND) $(LIBS)\n+\t      $(CXX_OBJS) dummy-checksum.o $(BACKEND) $(LIBS)\n+\n+cc1plus-checksum.c : cc1plus-dummy$(exeext) build/genchecksum$(exeext)\n+\tbuild/genchecksum$(exeext) cc1plus-dummy$(exeext) > $@\n+\n+cc1plus-checksum.o : cc1plus-checksum.c\n+\n+cc1plus$(exeext): $(CXX_OBJS) cc1plus-checksum.o $(BACKEND) $(LIBDEPS)\n+\t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ \\\n+\t      $(CXX_OBJS) cc1plus-checksum.o $(BACKEND) $(LIBS)\n \n # Special build rules.\n $(srcdir)/cp/cfns.h: $(srcdir)/cp/cfns.gperf"}, {"sha": "75227614602b2a3a0668871bd173a347e997a9c0", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fd30b88dfb2aca4bad797fa7b287556d663562a/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fd30b88dfb2aca4bad797fa7b287556d663562a/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=3fd30b88dfb2aca4bad797fa7b287556d663562a", "patch": "@@ -12941,13 +12941,6 @@ build the project.  To make builds faster, GCC allows users to\n `precompile' a header file; then, if builds can use the precompiled\n header file they will be much faster.\n \n-@strong{Caution:} There are a few known situations where GCC will\n-crash when trying to use a precompiled header.  If you have trouble\n-with a precompiled header, you should remove the precompiled header\n-and compile without it.  In addition, please use GCC's on-line\n-defect-tracking system to report any problems you encounter with\n-precompiled headers.  @xref{Bugs}.\n-\n To create a precompiled header file, simply compile it as you would any\n other file, if necessary using the @option{-x} option to make the driver\n treat it as a C or C++ header file.  You will probably want to use a\n@@ -13012,10 +13005,8 @@ the current compilation.  You can't use a C precompiled header for a C++\n compilation.\n \n @item\n-The precompiled header file must be produced by the same compiler\n-version and configuration as the current compilation is using.\n-The easiest way to guarantee this is to use the same compiler binary\n-for creating and using precompiled headers.\n+The precompiled header file must have been produced by the same compiler\n+binary as the current compilation is using.\n \n @item\n Any macros defined before the precompiled header is included must\n@@ -13052,7 +13043,10 @@ which options are safe to change and which are not; the safest choice\n is to use exactly the same options when generating and using the\n precompiled header.  The following are known to be safe:\n \n-@gccoptlist{-fpreprocessed -pedantic-errors}\n+@gccoptlist{-fpreprocessed\n+-fsched-interblock -fsched-spec -fsched-spec-load -fsched-spec-load-dangerous\n+-fsched-verbose=<number> -fschedule-insns\n+-pedantic-errors}\n \n @end itemize\n "}, {"sha": "81190a6ca156145565a3b4f1fb7ffaa317208b12", "filename": "gcc/dummy-checksum.c", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fd30b88dfb2aca4bad797fa7b287556d663562a/gcc%2Fdummy-checksum.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fd30b88dfb2aca4bad797fa7b287556d663562a/gcc%2Fdummy-checksum.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdummy-checksum.c?ref=3fd30b88dfb2aca4bad797fa7b287556d663562a", "patch": "@@ -0,0 +1 @@\n+const unsigned char executable_checksum[16] = { 0 };"}, {"sha": "465a4f6032b92accb0bc05e397ef10326f2b4790", "filename": "gcc/genchecksum.c", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fd30b88dfb2aca4bad797fa7b287556d663562a/gcc%2Fgenchecksum.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fd30b88dfb2aca4bad797fa7b287556d663562a/gcc%2Fgenchecksum.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenchecksum.c?ref=3fd30b88dfb2aca4bad797fa7b287556d663562a", "patch": "@@ -0,0 +1,77 @@\n+/* Generate checksums of executables for PCH validation\n+   Copyright (C) 2005\n+   Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 2, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to the Free\n+Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n+02111-1307, USA.  */\n+\n+#include \"bconfig.h\"\n+#include \"system.h\"\n+#include \"md5.h\"\n+\n+static void\n+usage (void)\n+{\n+  fputs (\"Usage: genchecksums <filename>\\n\", stderr);\n+}\n+\n+static void\n+dosum (const char *file)\n+{\n+  FILE *f;\n+  unsigned char result[16];\n+  int i;\n+  \n+  f = fopen (file, \"rb\");\n+  if (!f)\n+    {\n+      fprintf (stderr, \"opening %s: %s\\n\", file, xstrerror (errno));\n+      exit (1);\n+    }\n+  \n+  /* Some executable formats have timestamps in the first 16 bytes, yuck.  */\n+  if (fseek (f, 16, SEEK_SET) != 0)\n+     {\n+      fprintf (stderr, \"seeking in %s: %s\\n\", file, xstrerror (errno));\n+      exit (1);\n+    }\n+  \n+  if (md5_stream (f, result) != 0\n+      || fclose (f) != 0)\n+     {\n+      fprintf (stderr, \"reading %s: %s\\n\", file, xstrerror (errno));\n+      exit (1);\n+    }\n+\n+  fputs (\"const unsigned char executable_checksum[16] = { \", stdout);\n+  for (i = 0; i < 16; i++)\n+    printf (\"%#02x%s\", result[i], i == 15 ? \" };\\n\" : \", \");\n+}\n+\n+int\n+main (int argc, char ** argv)\n+{\n+  if (argc != 2)\n+    {\n+      usage ();\n+      return 1;\n+    }\n+\n+  dosum (argv[1]);\n+\n+  return 0;\n+}"}, {"sha": "00e650283b7bc95afe464d960d4e66a388975951", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fd30b88dfb2aca4bad797fa7b287556d663562a/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fd30b88dfb2aca4bad797fa7b287556d663562a/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=3fd30b88dfb2aca4bad797fa7b287556d663562a", "patch": "@@ -1,3 +1,10 @@\n+2005-05-18  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* Make-lang.in (cc1obj-dummy): New.\n+\t(cc1obj-checksum.c): New.\n+\t(cc1obj-checksum.o): New.\n+\t(cc1obj): Add cc1obj-checksum.o.\n+\n 2005-05-18  Mike Stump  <mrs@apple.com>\n \n \tPR objc/21641"}, {"sha": "4c1698abe5fde00b95ef81d11664fb5806915297", "filename": "gcc/objc/Make-lang.in", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fd30b88dfb2aca4bad797fa7b287556d663562a/gcc%2Fobjc%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fd30b88dfb2aca4bad797fa7b287556d663562a/gcc%2Fobjc%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FMake-lang.in?ref=3fd30b88dfb2aca4bad797fa7b287556d663562a", "patch": "@@ -50,9 +50,20 @@ objc-warn = $(STRICT_WARN)\n # Language-specific object files for Objective C.\n OBJC_OBJS = objc/objc-lang.o objc/objc-act.o\n \n-cc1obj$(exeext): $(OBJC_OBJS) $(C_AND_OBJC_OBJS) $(BACKEND) $(LIBDEPS)\n+cc1obj-dummy$(exeext): $(OBJC_OBJS) $(C_AND_OBJC_OBJS) dummy-checksum.o $(BACKEND) $(LIBDEPS)\n \t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ \\\n-\t\t$(OBJC_OBJS) $(C_AND_OBJC_OBJS) $(BACKEND) $(LIBS)\n+\t      $(OBJC_OBJS) $(C_AND_OBJC_OBJS) dummy-checksum.o \\\n+\t      $(BACKEND) $(LIBS)\n+\n+cc1obj-checksum.c : cc1obj-dummy$(exeext) build/genchecksum$(exeext)\n+\tbuild/genchecksum$(exeext) cc1obj-dummy$(exeext) > $@\n+\n+cc1obj-checksum.o : cc1obj-checksum.c\n+\n+cc1obj$(exeext): $(OBJC_OBJS) $(C_AND_OBJC_OBJS) cc1obj-checksum.o $(BACKEND) $(LIBDEPS)\n+\t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ \\\n+\t      $(OBJC_OBJS) $(C_AND_OBJC_OBJS) cc1obj-checksum.o \\\n+\t      $(BACKEND) $(LIBS)\n \n # Objective C language specific files.\n "}, {"sha": "dea594dbd4bb6b46109d4186a3bf4eafb8518575", "filename": "gcc/objcp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fd30b88dfb2aca4bad797fa7b287556d663562a/gcc%2Fobjcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fd30b88dfb2aca4bad797fa7b287556d663562a/gcc%2Fobjcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjcp%2FChangeLog?ref=3fd30b88dfb2aca4bad797fa7b287556d663562a", "patch": "@@ -1,3 +1,10 @@\n+2005-05-18  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* Make-lang.in (cc1objplus-dummy): New.\n+\t(cc1objplus-checksum.c): New.\n+\t(cc1objplus-checksum.o): New.\n+\t(cc1objplus): Add cc1objplus-checksum.o.\n+\n 2005-05-17  Mike Stump  <mrs@apple.com>\n \n \tYet more Objective-C++..."}, {"sha": "422e274059813008743409d40fea97ea791ed2ff", "filename": "gcc/objcp/Make-lang.in", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fd30b88dfb2aca4bad797fa7b287556d663562a/gcc%2Fobjcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fd30b88dfb2aca4bad797fa7b287556d663562a/gcc%2Fobjcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjcp%2FMake-lang.in?ref=3fd30b88dfb2aca4bad797fa7b287556d663562a", "patch": "@@ -51,9 +51,19 @@ objcp-warn = $(STRICT_WARN) -DOBJCPLUS -I$(srcdir)/objc -I$(srcdir)/cp\n OBJCXX_OBJS = objcp/objcp-act.o objcp/objcp-lang.o objcp/objcp-decl.o \\\n    $(CXX_AND_OBJCXX_OBJS)\n \n-cc1objplus$(exeext): $(OBJCXX_OBJS) $(BACKEND) $(LIBDEPS)\n+cc1objplus-dummy$(exeext): $(OBJCXX_OBJS) dummy-checksum.o $(BACKEND) \\\n+\t\t$(LIBDEPS)\n \t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ \\\n-\t\t$(OBJCXX_OBJS) $(BACKEND) $(LIBS)\n+\t\t$(OBJCXX_OBJS) dummy-checksum.o $(BACKEND) $(LIBS)\n+\n+cc1objplus-checksum.c : cc1objplus-dummy$(exeext) build/genchecksum$(exeext)\n+\tbuild/genchecksum$(exeext) cc1objplus-dummy$(exeext) > $@\n+\n+cc1objplus-checksum.o : cc1objplus-checksum.c\n+\n+cc1objplus$(exeext): $(OBJCXX_OBJS) cc1objplus-checksum.o $(BACKEND) $(LIBDEPS)\n+\t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ \\\n+\t\t$(OBJCXX_OBJS) cc1objplus-checksum.o $(BACKEND) $(LIBS)\n \n # Objective C++ language specific files.\n "}]}