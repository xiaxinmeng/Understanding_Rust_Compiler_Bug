{"sha": "73cc8f6230c672fab16f0d43a661c62744b5f0cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzNjYzhmNjIzMGM2NzJmYWIxNmYwZDQzYTY2MWM2Mjc0NGI1ZjBjYg==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2015-05-12T08:34:04Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-05-12T08:34:04Z"}, "message": "sem_ch3.adb, [...]: Minor reformatting.\n\n2015-05-12  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch3.adb, freeze.adb, sem_ch6.adb: Minor reformatting.\n\nFrom-SVN: r223042", "tree": {"sha": "f63dffbcd215a30b511e5eb49c7b95f7cdb68c21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f63dffbcd215a30b511e5eb49c7b95f7cdb68c21"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/73cc8f6230c672fab16f0d43a661c62744b5f0cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73cc8f6230c672fab16f0d43a661c62744b5f0cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73cc8f6230c672fab16f0d43a661c62744b5f0cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73cc8f6230c672fab16f0d43a661c62744b5f0cb/comments", "author": null, "committer": null, "parents": [{"sha": "b741083a31b79945bb754418ed14883a1c7b50d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b741083a31b79945bb754418ed14883a1c7b50d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b741083a31b79945bb754418ed14883a1c7b50d2"}], "stats": {"total": 110, "additions": 56, "deletions": 54}, "files": [{"sha": "0cba4e798a4aacf7b7e02248e61167971c97f7b6", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73cc8f6230c672fab16f0d43a661c62744b5f0cb/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73cc8f6230c672fab16f0d43a661c62744b5f0cb/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=73cc8f6230c672fab16f0d43a661c62744b5f0cb", "patch": "@@ -1,3 +1,7 @@\n+2015-05-12  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch3.adb, freeze.adb, sem_ch6.adb: Minor reformatting.\n+\n 2015-05-12  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_ch3.adb (Analyze_Object_Declaration): New function"}, {"sha": "7612c189b5c75ead426f74f8d8c523b27e9d3c43", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 42, "deletions": 41, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73cc8f6230c672fab16f0d43a661c62744b5f0cb/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73cc8f6230c672fab16f0d43a661c62744b5f0cb/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=73cc8f6230c672fab16f0d43a661c62744b5f0cb", "patch": "@@ -1895,8 +1895,8 @@ package body Freeze is\n       --  Freeze array type, including freezing index and component types\n \n       procedure Freeze_Object_Declaration (E : Entity_Id);\n-      --  Perfom checks and generate freeze node if needed for a constant\n-      --  or variable declared by an object declaration.\n+      --  Perform checks and generate freeze node if needed for a constant or\n+      --  variable declared by an object declaration.\n \n       function Freeze_Generic_Entities (Pack : Entity_Id) return List_Id;\n       --  Create Freeze_Generic_Entity nodes for types declared in a generic\n@@ -2792,23 +2792,23 @@ package body Freeze is\n \n       procedure Freeze_Object_Declaration (E : Entity_Id) is\n       begin\n-         --  Abstract type allowed only for C++ imported variables or\n-         --  constants.\n+         --  Abstract type allowed only for C++ imported variables or constants\n \n-         --  Note: we inhibit this check for objects that do not come\n-         --  from source because there is at least one case (the\n-         --  expansion of x'Class'Input where x is abstract) where we\n-         --  legitimately generate an abstract object.\n+         --  Note: we inhibit this check for objects that do not come from\n+         --  source because there is at least one case (the expansion of\n+         --  x'Class'Input where x is abstract) where we legitimately\n+         --  generate an abstract object.\n \n          if Is_Abstract_Type (Etype (E))\n            and then Comes_From_Source (Parent (E))\n            and then not (Is_Imported (E) and then Is_CPP_Class (Etype (E)))\n          then\n             Error_Msg_N (\"type of object cannot be abstract\",\n-                           Object_Definition (Parent (E)));\n+                         Object_Definition (Parent (E)));\n \n             if Is_CPP_Class (Etype (E)) then\n-               Error_Msg_NE (\"\\} may need a cpp_constructor\",\n+               Error_Msg_NE\n+                 (\"\\} may need a cpp_constructor\",\n                   Object_Definition (Parent (E)), Etype (E));\n \n             elsif Present (Expression (Parent (E))) then\n@@ -2841,12 +2841,13 @@ package body Freeze is\n          then\n             declare\n                Decl : constant Node_Id := Parent (E);\n-               Lhs  : constant Node_Id :=  New_Occurrence_Of (E, Loc);\n+               Lhs  : constant Node_Id := New_Occurrence_Of (E, Loc);\n+\n             begin\n \n-               --  Capture initialization value at point of declaration,\n-               --  and make explicit assignment legal, because object may\n-               --  be a constant.\n+               --  Capture initialization value at point of declaration, and\n+               --  make explicit assignment legal, because object may be a\n+               --  constant.\n \n                Remove_Side_Effects (Expression (Decl));\n                Set_Assignment_OK (Lhs);\n@@ -2864,22 +2865,23 @@ package body Freeze is\n          end if;\n \n          --  Reset Is_True_Constant for non-constant aliased object. We\n-         --  consider that the fact that a non-constant object is aliased\n-         --  may indicate that some funny business is going on, e.g. an\n-         --  aliased object is passed by reference to a procedure which\n-         --  captures the address of the object, which is later used to\n-         --  assign a new value, even though the compiler thinks that it\n-         --  is not modified. Such code is highly dubious, but we choose\n-         --  to make it \"work\" for non-constant aliased objects.\n-         --  Note that we used to do this for all aliased objects, whether\n-         --  or not constant, but this caused anomalies down the line\n-         --  because we ended up with static objects that were not\n-         --  Is_True_Constant. Not resetting Is_True_Constant for (aliased)\n-         --  constant objects ensures that this anomaly never occurs.\n-\n-         --  However, we don't do that for internal entities. We figure\n-         --  that if we deliberately set Is_True_Constant for an internal\n-         --  entity, e.g. a dispatch table entry, then we mean it.\n+         --  consider that the fact that a non-constant object is aliased may\n+         --  indicate that some funny business is going on, e.g. an aliased\n+         --  object is passed by reference to a procedure which captures the\n+         --  address of the object, which is later used to assign a new value,\n+         --  even though the compiler thinks that it is not modified. Such\n+         --  code is highly dubious, but we choose to make it \"work\" for\n+         --  non-constant aliased objects.\n+\n+         --  Note that we used to do this for all aliased objects, whether or\n+         --  not constant, but this caused anomalies down the line because we\n+         --  ended up with static objects that were not Is_True_Constant. Not\n+         --  resetting Is_True_Constant for (aliased) constant objects ensures\n+         --  that this anomaly never occurs.\n+\n+         --  However, we don't do that for internal entities. We figure that if\n+         --  we deliberately set Is_True_Constant for an internal entity, e.g.\n+         --  a dispatch table entry, then we mean it.\n \n          if Ekind (E) /= E_Constant\n            and then (Is_Aliased (E) or else Is_Aliased (Etype (E)))\n@@ -2888,17 +2890,15 @@ package body Freeze is\n             Set_Is_True_Constant (E, False);\n          end if;\n \n-         --  If the object needs any kind of default initialization, an\n-         --  error must be issued if No_Default_Initialization applies.\n-         --  The check doesn't apply to imported objects, which are not\n-         --  ever default initialized, and is why the check is deferred\n-         --  until freezing, at which point we know if Import applies.\n-         --  Deferred constants are also exempted from this test because\n-         --  their completion is explicit, or through an import pragma.\n+         --  If the object needs any kind of default initialization, an error\n+         --  must be issued if No_Default_Initialization applies. The check\n+         --  doesn't apply to imported objects, which are not ever default\n+         --  initialized, and is why the check is deferred until freezing, at\n+         --  which point we know if Import applies. Deferred constants are also\n+         --  exempted from this test because their completion is explicit, or\n+         --  through an import pragma.\n \n-         if Ekind (E) = E_Constant\n-           and then Present (Full_View (E))\n-         then\n+         if Ekind (E) = E_Constant and then Present (Full_View (E)) then\n             null;\n \n          elsif Comes_From_Source (E)\n@@ -2977,7 +2977,8 @@ package body Freeze is\n          --  8-bit sizes for these cases.\n \n          if (Convention (E) = Convention_C\n-               or else Convention (E) = Convention_CPP)\n+               or else\n+             Convention (E) = Convention_CPP)\n            and then Is_Enumeration_Type (Etype (E))\n            and then not Is_Character_Type (Etype (E))\n            and then not Is_Boolean_Type (Etype (E))"}, {"sha": "3b8628065e71735da8ec5074b0ab522dcb5fd8cf", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73cc8f6230c672fab16f0d43a661c62744b5f0cb/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73cc8f6230c672fab16f0d43a661c62744b5f0cb/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=73cc8f6230c672fab16f0d43a661c62744b5f0cb", "patch": "@@ -3341,12 +3341,11 @@ package body Sem_Ch3 is\n       --  has aspects that require delayed analysis, the resolution of the\n       --  aggregate must be deferred to the freeze point of the objet. This\n       --  special processing was created for address clauses, but it must\n-      --  also apply to Alignment.\n-      --  This must be done before the aspect specifications are analyzed\n-      --  because we must handle the aggregate before the analysis of the\n-      --  object declaration is complete.\n+      --  also apply to Alignment. This must be done before the aspect\n+      --  specifications are analyzed because we must handle the aggregate\n+      --  before the analysis of the object declaration is complete.\n \n-      --  any other relevant delayed aspects on object declarations ???\n+      --  Any other relevant delayed aspects on object declarations ???\n \n       -----------------\n       -- Count_Tasks --\n@@ -3407,17 +3406,15 @@ package body Sem_Ch3 is\n       ----------------------------\n \n       function Delayed_Aspect_Present return Boolean is\n-         A : Node_Id;\n+         A    : Node_Id;\n          A_Id : Aspect_Id;\n \n       begin\n          if Present (Aspect_Specifications (N)) then\n             A    := First (Aspect_Specifications (N));\n-            A_Id :=   Get_Aspect_Id (Chars (Identifier (A)));\n+            A_Id := Get_Aspect_Id (Chars (Identifier (A)));\n             while Present (A) loop\n-               if\n-                 A_Id = Aspect_Alignment or else A_Id = Aspect_Address\n-               then\n+               if A_Id = Aspect_Alignment or else A_Id = Aspect_Address then\n                   return True;\n                end if;\n "}, {"sha": "c4c47a5e96895df349b370f7e94009fb7021599b", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73cc8f6230c672fab16f0d43a661c62744b5f0cb/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73cc8f6230c672fab16f0d43a661c62744b5f0cb/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=73cc8f6230c672fab16f0d43a661c62744b5f0cb", "patch": "@@ -4346,8 +4346,8 @@ package body Sem_Ch6 is\n       then\n          Check_SPARK_05_Restriction (\"null procedure is not allowed\", N);\n \n-         --  Null procedures are allowed in protected types, following\n-         --  the recent AI12-0147.\n+         --  Null procedures are allowed in protected types, following the\n+         --  recent AI12-0147.\n \n          if Is_Protected_Type (Current_Scope)\n            and then Ada_Version < Ada_2012\n@@ -4359,7 +4359,7 @@ package body Sem_Ch6 is\n \n          if Is_Completion then\n \n-            --  The null procedure acts as a body, nothing further is needed.\n+            --  The null procedure acts as a body, nothing further is needed\n \n             return;\n          end if;"}]}