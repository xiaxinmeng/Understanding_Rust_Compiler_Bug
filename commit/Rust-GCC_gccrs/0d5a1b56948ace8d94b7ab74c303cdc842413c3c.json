{"sha": "0d5a1b56948ace8d94b7ab74c303cdc842413c3c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQ1YTFiNTY5NDhhY2U4ZDk0YjdhYjc0YzMwM2NkYzg0MjQxM2MzYw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-03-18T08:53:42Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-03-18T08:53:42Z"}, "message": "re PR tree-optimization/3713 (Pointers to functions or member functions are not folded or inlined)\n\n2013-03-18  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/3713\n\t* tree-ssa-sccvn.c (visit_copy): Simplify.  Always propagate\n\thas_constants and expr.\n\t(stmt_has_constants): Properly valueize SSA names when deciding\n\twhether the stmt has constants.\n\n\t* g++.dg/ipa/devirt-12.C: New testcase.\n\nFrom-SVN: r196771", "tree": {"sha": "ea0a23b8045269a9507c4a14ff379cb858e21f49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea0a23b8045269a9507c4a14ff379cb858e21f49"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d5a1b56948ace8d94b7ab74c303cdc842413c3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d5a1b56948ace8d94b7ab74c303cdc842413c3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d5a1b56948ace8d94b7ab74c303cdc842413c3c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d5a1b56948ace8d94b7ab74c303cdc842413c3c/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "789c34e3c7bb5e5c7c2cadd8de7c395654bf99cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/789c34e3c7bb5e5c7c2cadd8de7c395654bf99cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/789c34e3c7bb5e5c7c2cadd8de7c395654bf99cf"}], "stats": {"total": 81, "additions": 62, "deletions": 19}, "files": [{"sha": "385821fa57a47b00764948af29e9f6f3f5a740df", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d5a1b56948ace8d94b7ab74c303cdc842413c3c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d5a1b56948ace8d94b7ab74c303cdc842413c3c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0d5a1b56948ace8d94b7ab74c303cdc842413c3c", "patch": "@@ -1,3 +1,11 @@\n+2013-03-18  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/3713\n+\t* tree-ssa-sccvn.c (visit_copy): Simplify.  Always propagate\n+\thas_constants and expr.\n+\t(stmt_has_constants): Properly valueize SSA names when deciding\n+\twhether the stmt has constants.\n+\n 2013-03-18  Richard Biener  <rguenther@suse.de>\n \n \t* tree-ssa-loop-manip.c (find_uses_to_rename): Do not scan the"}, {"sha": "20b206ae4603986484c1157ae22476ec59ad390e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d5a1b56948ace8d94b7ab74c303cdc842413c3c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d5a1b56948ace8d94b7ab74c303cdc842413c3c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0d5a1b56948ace8d94b7ab74c303cdc842413c3c", "patch": "@@ -1,3 +1,8 @@\n+2013-03-18  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/3713\n+\t* g++.dg/ipa/devirt-12.C: New testcase.\n+\n 2013-03-18  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/56566"}, {"sha": "2fdf5c49b77420c56615640189fac64ae3d4b480", "filename": "gcc/testsuite/g++.dg/ipa/devirt-12.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d5a1b56948ace8d94b7ab74c303cdc842413c3c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d5a1b56948ace8d94b7ab74c303cdc842413c3c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-12.C?ref=0d5a1b56948ace8d94b7ab74c303cdc842413c3c", "patch": "@@ -0,0 +1,22 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++11 -O -fdump-ipa-inline\" }\n+\n+class Foo\n+{\n+public:\n+  void Bar() const\n+    {\n+      __builtin_puts (\"Howdy!\");\n+    }\n+};\n+\n+int main()\n+{\n+  Foo x;\n+  auto y = &Foo::Bar;\n+  (x.*y)();\n+  return 0;\n+}\n+\n+// { dg-final { scan-ipa-dump \"Inlined 1 calls, eliminated 1 functions\" \"inline\" } }\n+// { dg-final { cleanup-ipa-dump \"inline\" } }"}, {"sha": "8360cc730008e0bbf419296c3fc14f855c978394", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 27, "deletions": 19, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d5a1b56948ace8d94b7ab74c303cdc842413c3c/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d5a1b56948ace8d94b7ab74c303cdc842413c3c/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=0d5a1b56948ace8d94b7ab74c303cdc842413c3c", "patch": "@@ -2652,18 +2652,13 @@ static tree valueize_expr (tree expr);\n static bool\n visit_copy (tree lhs, tree rhs)\n {\n-  /* Follow chains of copies to their destination.  */\n-  while (TREE_CODE (rhs) == SSA_NAME\n-\t && SSA_VAL (rhs) != rhs)\n-    rhs = SSA_VAL (rhs);\n-\n   /* The copy may have a more interesting constant filled expression\n      (we don't, since we know our RHS is just an SSA name).  */\n-  if (TREE_CODE (rhs) == SSA_NAME)\n-    {\n-      VN_INFO (lhs)->has_constants = VN_INFO (rhs)->has_constants;\n-      VN_INFO (lhs)->expr = VN_INFO (rhs)->expr;\n-    }\n+  VN_INFO (lhs)->has_constants = VN_INFO (rhs)->has_constants;\n+  VN_INFO (lhs)->expr = VN_INFO (rhs)->expr;\n+\n+  /* And finally valueize.  */\n+  rhs = SSA_VAL (rhs);\n \n   return set_ssa_val_to (lhs, rhs);\n }\n@@ -3062,25 +3057,38 @@ expr_has_constants (tree expr)\n static bool\n stmt_has_constants (gimple stmt)\n {\n+  tree tem;\n+\n   if (gimple_code (stmt) != GIMPLE_ASSIGN)\n     return false;\n \n   switch (get_gimple_rhs_class (gimple_assign_rhs_code (stmt)))\n     {\n-    case GIMPLE_UNARY_RHS:\n-      return is_gimple_min_invariant (gimple_assign_rhs1 (stmt));\n+    case GIMPLE_TERNARY_RHS:\n+      tem = gimple_assign_rhs3 (stmt);\n+      if (TREE_CODE (tem) == SSA_NAME)\n+\ttem = SSA_VAL (tem);\n+      if (is_gimple_min_invariant (tem))\n+\treturn true;\n+      /* Fallthru.  */\n \n     case GIMPLE_BINARY_RHS:\n-      return (is_gimple_min_invariant (gimple_assign_rhs1 (stmt))\n-\t      || is_gimple_min_invariant (gimple_assign_rhs2 (stmt)));\n-    case GIMPLE_TERNARY_RHS:\n-      return (is_gimple_min_invariant (gimple_assign_rhs1 (stmt))\n-\t      || is_gimple_min_invariant (gimple_assign_rhs2 (stmt))\n-\t      || is_gimple_min_invariant (gimple_assign_rhs3 (stmt)));\n+      tem = gimple_assign_rhs2 (stmt);\n+      if (TREE_CODE (tem) == SSA_NAME)\n+\ttem = SSA_VAL (tem);\n+      if (is_gimple_min_invariant (tem))\n+\treturn true;\n+      /* Fallthru.  */\n+\n     case GIMPLE_SINGLE_RHS:\n       /* Constants inside reference ops are rarely interesting, but\n \t it can take a lot of looking to find them.  */\n-      return is_gimple_min_invariant (gimple_assign_rhs1 (stmt));\n+    case GIMPLE_UNARY_RHS:\n+      tem = gimple_assign_rhs1 (stmt);\n+      if (TREE_CODE (tem) == SSA_NAME)\n+\ttem = SSA_VAL (tem);\n+      return is_gimple_min_invariant (tem);\n+\n     default:\n       gcc_unreachable ();\n     }"}]}