{"sha": "27c825c5cca3243f293aee29a4abeb22242d4d2b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjdjODI1YzVjY2EzMjQzZjI5M2FlZTI5YTRhYmViMjIyNDJkNGQyYg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2017-09-08T22:39:17Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2017-09-08T22:39:17Z"}, "message": "PR c++/70029 - ICE with ref-qualifier and -flto\n\n\tPR c++/70029 - ICE with ref-qualifier and -flto\ngcc/\n\t* langhooks.h (struct lang_hooks_for_types): Add\n\tcopy_lang_qualifiers.\n\t* attribs.c (build_type_attribute_qual_variant): Use it.\n\t* langhooks-def.h (LANG_HOOKS_COPY_LANG_QUALIFIERS): Default to\n\tNULL.\n\t(LANG_HOOKS_FOR_TYPES_INITIALIZER): Use it.\n\t* tree.c (verify_type): Re-enable TYPE_CANONICAL main variant check.\ngcc/cp/\n\t* tree.c (cxx_copy_lang_qualifiers): New.\n\t* cp-tree.h: Declare it.\n\t* cp-objcp-common.h: Define LANG_HOOKS_COPY_LANG_QUALIFIERS.\n\nFrom-SVN: r251911", "tree": {"sha": "d4c20252428e4348fc569284133594067d73b3c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d4c20252428e4348fc569284133594067d73b3c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27c825c5cca3243f293aee29a4abeb22242d4d2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27c825c5cca3243f293aee29a4abeb22242d4d2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27c825c5cca3243f293aee29a4abeb22242d4d2b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27c825c5cca3243f293aee29a4abeb22242d4d2b/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b2c5d6f1d2a71374bcd8277a0697490582bc03a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2c5d6f1d2a71374bcd8277a0697490582bc03a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2c5d6f1d2a71374bcd8277a0697490582bc03a8"}], "stats": {"total": 67, "additions": 63, "deletions": 4}, "files": [{"sha": "b9b04565d287bcf114645f9e440eadf2800a0e5d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c825c5cca3243f293aee29a4abeb22242d4d2b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c825c5cca3243f293aee29a4abeb22242d4d2b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=27c825c5cca3243f293aee29a4abeb22242d4d2b", "patch": "@@ -1,3 +1,14 @@\n+2017-09-08  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/70029 - ICE with ref-qualifier and -flto\n+\t* langhooks.h (struct lang_hooks_for_types): Add\n+\tcopy_lang_qualifiers.\n+\t* attribs.c (build_type_attribute_qual_variant): Use it.\n+\t* langhooks-def.h (LANG_HOOKS_COPY_LANG_QUALIFIERS): Default to\n+\tNULL.\n+\t(LANG_HOOKS_FOR_TYPES_INITIALIZER): Use it.\n+\t* tree.c (verify_type): Re-enable TYPE_CANONICAL main variant check.\n+\n 2017-09-08  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR target/81988"}, {"sha": "b8f58a7459643c3d82eb8cac0eddbb4d9f6fde70", "filename": "gcc/attribs.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c825c5cca3243f293aee29a4abeb22242d4d2b/gcc%2Fattribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c825c5cca3243f293aee29a4abeb22242d4d2b/gcc%2Fattribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fattribs.c?ref=27c825c5cca3243f293aee29a4abeb22242d4d2b", "patch": "@@ -959,8 +959,9 @@ build_decl_attribute_variant (tree ddecl, tree attribute)\n    Record such modified types already made so we don't make duplicates.  */\n \n tree\n-build_type_attribute_qual_variant (tree ttype, tree attribute, int quals)\n+build_type_attribute_qual_variant (tree otype, tree attribute, int quals)\n {\n+  tree ttype = otype;\n   if (! attribute_list_equal (TYPE_ATTRIBUTES (ttype), attribute))\n     {\n       tree ntype;\n@@ -983,6 +984,11 @@ build_type_attribute_qual_variant (tree ttype, tree attribute, int quals)\n \t}\n \n       ttype = build_qualified_type (ttype, TYPE_UNQUALIFIED);\n+      if (lang_hooks.types.copy_lang_qualifiers\n+\t  && otype != TYPE_MAIN_VARIANT (otype))\n+\tttype = (lang_hooks.types.copy_lang_qualifiers\n+\t\t (ttype, TYPE_MAIN_VARIANT (otype)));\n+\n       ntype = build_distinct_type_copy (ttype);\n \n       TYPE_ATTRIBUTES (ntype) = attribute;\n@@ -1000,6 +1006,9 @@ build_type_attribute_qual_variant (tree ttype, tree attribute, int quals)\n \tTYPE_CANONICAL (ntype) = TYPE_CANONICAL (ttype);\n \n       ttype = build_qualified_type (ntype, quals);\n+      if (lang_hooks.types.copy_lang_qualifiers\n+\t  && otype != TYPE_MAIN_VARIANT (otype))\n+\tttype = lang_hooks.types.copy_lang_qualifiers (ttype, otype);\n     }\n   else if (TYPE_QUALS (ttype) != quals)\n     ttype = build_qualified_type (ttype, quals);"}, {"sha": "730a2dace19d7d61049548a2c03a4e198b7e01e1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c825c5cca3243f293aee29a4abeb22242d4d2b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c825c5cca3243f293aee29a4abeb22242d4d2b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=27c825c5cca3243f293aee29a4abeb22242d4d2b", "patch": "@@ -1,3 +1,10 @@\n+2017-09-08  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/70029 - ICE with ref-qualifier and -flto\n+\t* tree.c (cxx_copy_lang_qualifiers): New.\n+\t* cp-tree.h: Declare it.\n+\t* cp-objcp-common.h: Define LANG_HOOKS_COPY_LANG_QUALIFIERS.\n+\n 2017-09-06  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/82053 - ICE with default argument in lambda in template"}, {"sha": "3e4cc9c5d4ceaee544d6e7363236c47ea0695776", "filename": "gcc/cp/cp-objcp-common.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c825c5cca3243f293aee29a4abeb22242d4d2b/gcc%2Fcp%2Fcp-objcp-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c825c5cca3243f293aee29a4abeb22242d4d2b/gcc%2Fcp%2Fcp-objcp-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.h?ref=27c825c5cca3243f293aee29a4abeb22242d4d2b", "patch": "@@ -99,6 +99,8 @@ extern void cp_register_dumps (gcc::dump_manager *);\n #define LANG_HOOKS_BUILTIN_FUNCTION_EXT_SCOPE cxx_builtin_function_ext_scope\n #undef\tLANG_HOOKS_TYPE_HASH_EQ\n #define LANG_HOOKS_TYPE_HASH_EQ\tcxx_type_hash_eq\n+#undef\tLANG_HOOKS_COPY_LANG_QUALIFIERS\n+#define LANG_HOOKS_COPY_LANG_QUALIFIERS\tcxx_copy_lang_qualifiers\n #undef LANG_HOOKS_MISSING_NORETURN_OK_P\n #define LANG_HOOKS_MISSING_NORETURN_OK_P cp_missing_noreturn_ok_p\n #undef LANG_HOOKS_BLOCK_MAY_FALLTHRU"}, {"sha": "a57de335f1a6c4b32e5cb1e71faf2485ca47900c", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c825c5cca3243f293aee29a4abeb22242d4d2b/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c825c5cca3243f293aee29a4abeb22242d4d2b/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=27c825c5cca3243f293aee29a4abeb22242d4d2b", "patch": "@@ -6963,6 +6963,7 @@ extern tree convert_bitfield_to_declared_type   (tree);\n extern tree cp_save_expr\t\t\t(tree);\n extern bool cast_valid_in_integral_constant_expression_p (tree);\n extern bool cxx_type_hash_eq\t\t\t(const_tree, const_tree);\n+extern tree cxx_copy_lang_qualifiers\t\t(const_tree, const_tree);\n \n extern void cxx_print_statistics\t\t(void);\n extern bool maybe_warn_zero_as_null_pointer_constant (tree, location_t);"}, {"sha": "f387f38639b937e22119aaf658664cff95918189", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c825c5cca3243f293aee29a4abeb22242d4d2b/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c825c5cca3243f293aee29a4abeb22242d4d2b/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=27c825c5cca3243f293aee29a4abeb22242d4d2b", "patch": "@@ -4626,6 +4626,21 @@ cxx_type_hash_eq (const_tree typea, const_tree typeb)\n \t\t\t    TYPE_RAISES_EXCEPTIONS (typeb), ce_exact);\n }\n \n+/* Copy the language-specific type variant modifiers from TYPEB to TYPEA.  For\n+   C++, these are the exception-specifier and ref-qualifier.  */\n+\n+tree\n+cxx_copy_lang_qualifiers (const_tree typea, const_tree typeb)\n+{\n+  tree type = CONST_CAST_TREE (typea);\n+  if (TREE_CODE (type) == FUNCTION_TYPE || TREE_CODE (type) == METHOD_TYPE)\n+    {\n+      type = build_exception_variant (type, TYPE_RAISES_EXCEPTIONS (typeb));\n+      type = build_ref_qualified_type (type, type_memfn_rqual (typeb));\n+    }\n+  return type;\n+}\n+\n /* Apply FUNC to all language-specific sub-trees of TP in a pre-order\n    traversal.  Called from walk_tree.  */\n "}, {"sha": "61b081bd7ccc57d90cae9e3203edfea17fd61191", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c825c5cca3243f293aee29a4abeb22242d4d2b/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c825c5cca3243f293aee29a4abeb22242d4d2b/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=27c825c5cca3243f293aee29a4abeb22242d4d2b", "patch": "@@ -186,6 +186,7 @@ extern tree lhd_unit_size_without_reusable_padding (tree);\n   lhd_omp_firstprivatize_type_sizes\n #define LANG_HOOKS_OMP_MAPPABLE_TYPE\tlhd_omp_mappable_type\n #define LANG_HOOKS_TYPE_HASH_EQ\t\tNULL\n+#define LANG_HOOKS_COPY_LANG_QUALIFIERS NULL\n #define LANG_HOOKS_GET_ARRAY_DESCR_INFO\tNULL\n #define LANG_HOOKS_GET_SUBRANGE_BOUNDS\tNULL\n #define LANG_HOOKS_GET_TYPE_BIAS\tNULL\n@@ -211,6 +212,7 @@ extern tree lhd_unit_size_without_reusable_padding (tree);\n   LANG_HOOKS_OMP_FIRSTPRIVATIZE_TYPE_SIZES, \\\n   LANG_HOOKS_OMP_MAPPABLE_TYPE, \\\n   LANG_HOOKS_TYPE_HASH_EQ, \\\n+  LANG_HOOKS_COPY_LANG_QUALIFIERS, \\\n   LANG_HOOKS_GET_ARRAY_DESCR_INFO, \\\n   LANG_HOOKS_GET_SUBRANGE_BOUNDS, \\\n   LANG_HOOKS_GET_TYPE_BIAS, \\"}, {"sha": "b0c9829a6cd4df0246a748f9422ef186db201472", "filename": "gcc/langhooks.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c825c5cca3243f293aee29a4abeb22242d4d2b/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c825c5cca3243f293aee29a4abeb22242d4d2b/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=27c825c5cca3243f293aee29a4abeb22242d4d2b", "patch": "@@ -123,6 +123,10 @@ struct lang_hooks_for_types\n      FUNCTION_TYPE or METHOD_TYPE.  */\n   bool (*type_hash_eq) (const_tree, const_tree);\n \n+  /* If non-NULL, return TYPE1 with any language-specific modifiers copied from\n+     TYPE2.  */\n+  tree (*copy_lang_qualifiers) (const_tree, const_tree);\n+\n   /* Return TRUE if TYPE uses a hidden descriptor and fills in information\n      for the debugger about the array bounds, strides, etc.  */\n   bool (*get_array_descr_info) (const_tree, struct array_descr_info *);"}, {"sha": "9c8c31cf68b035c53d072c05d03ad43262db14de", "filename": "gcc/testsuite/g++.dg/lto/pr70029_0.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c825c5cca3243f293aee29a4abeb22242d4d2b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr70029_0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c825c5cca3243f293aee29a4abeb22242d4d2b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr70029_0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr70029_0.C?ref=27c825c5cca3243f293aee29a4abeb22242d4d2b", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/70029\n+// { dg-lto-do assemble }\n+\n+struct A\n+{\n+  A();\n+  int foo() && __attribute__ ((__warn_unused_result__)) { return 0; }\n+};\n+\n+A a;"}, {"sha": "721330a4a499e722fd3233988bf54843b0136a6c", "filename": "gcc/tree.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c825c5cca3243f293aee29a4abeb22242d4d2b/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c825c5cca3243f293aee29a4abeb22242d4d2b/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=27c825c5cca3243f293aee29a4abeb22242d4d2b", "patch": "@@ -13220,9 +13220,7 @@ verify_type (const_tree t)\n       debug_tree (ct);\n       error_found = true;\n     }\n-  /* FIXME: this is violated by the C++ FE as discussed in PR70029, when\n-     FUNCTION_*_QUALIFIED flags are set.  */\n-  if (0 && TYPE_MAIN_VARIANT (t) == t && ct && TYPE_MAIN_VARIANT (ct) != ct)\n+  if (TYPE_MAIN_VARIANT (t) == t && ct && TYPE_MAIN_VARIANT (ct) != ct)\n    {\n       error (\"TYPE_CANONICAL of main variant is not main variant\");\n       debug_tree (ct);"}]}