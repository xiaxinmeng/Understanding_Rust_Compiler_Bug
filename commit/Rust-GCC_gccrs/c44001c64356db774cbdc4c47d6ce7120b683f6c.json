{"sha": "c44001c64356db774cbdc4c47d6ce7120b683f6c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzQ0MDAxYzY0MzU2ZGI3NzRjYmRjNGM0N2Q2Y2U3MTIwYjY4M2Y2Yw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2005-04-14T12:22:49Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-04-14T12:22:49Z"}, "message": "cp-tree.h (SET_TMPL_ARG, [...]): Remove.\n\n\t* cp-tree.h (SET_TMPL_ARG, ENUM_TI_TEMPLATE, ENUM_TI_ARGS,\n\tCLASSTYPE_TEMPLATE_LEVEL): Remove.\n\nFrom-SVN: r98133", "tree": {"sha": "44e1ac16bb3ef8859b6338f93a77d7ff661c9092", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/44e1ac16bb3ef8859b6338f93a77d7ff661c9092"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c44001c64356db774cbdc4c47d6ce7120b683f6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c44001c64356db774cbdc4c47d6ce7120b683f6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c44001c64356db774cbdc4c47d6ce7120b683f6c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c44001c64356db774cbdc4c47d6ce7120b683f6c/comments", "author": null, "committer": null, "parents": [{"sha": "4a92766451afff12822ab80719988849ad9abea0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a92766451afff12822ab80719988849ad9abea0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a92766451afff12822ab80719988849ad9abea0"}], "stats": {"total": 17, "additions": 5, "deletions": 12}, "files": [{"sha": "b12b7916377c5727163ff483cd8f385aec3da721", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c44001c64356db774cbdc4c47d6ce7120b683f6c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c44001c64356db774cbdc4c47d6ce7120b683f6c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c44001c64356db774cbdc4c47d6ce7120b683f6c", "patch": "@@ -1,3 +1,8 @@\n+2005-04-14  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* cp-tree.h (SET_TMPL_ARG, ENUM_TI_TEMPLATE, ENUM_TI_ARGS,\n+\tCLASSTYPE_TEMPLATE_LEVEL): Remove.\n+\n 2005-04-11  Mark Mitchell  <mark@codesourcery.com>\n \n \t* decl2.c (determine_visibility): Don't use export_class_data."}, {"sha": "e1e15a8739c99166be1dd6769d8c1bf31fd1282a", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c44001c64356db774cbdc4c47d6ce7120b683f6c/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c44001c64356db774cbdc4c47d6ce7120b683f6c/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=c44001c64356db774cbdc4c47d6ce7120b683f6c", "patch": "@@ -2141,11 +2141,6 @@ struct lang_decl GTY(())\n #define TMPL_ARG(ARGS, LEVEL, IDX)\t\t\t\t\\\n   (TREE_VEC_ELT (TMPL_ARGS_LEVEL (ARGS, LEVEL), IDX))\n \n-/* Set the IDXth element in the LEVELth level of ARGS to VAL.  This\n-   macro does not work with single-level argument vectors.  */\n-#define SET_TMPL_ARG(ARGS, LEVEL, IDX, VAL)\t\t\t\\\n-  (TREE_VEC_ELT (TREE_VEC_ELT ((ARGS), (LEVEL) - 1), (IDX)) = (VAL))\n-\n /* Given a single level of template arguments in NODE, return the\n    number of arguments.  */\n #define NUM_TMPL_ARGS(NODE)\t\t\t\t\\\n@@ -2187,10 +2182,6 @@ struct lang_decl GTY(())\n #define DECL_TI_ARGS(NODE)          TI_ARGS (DECL_TEMPLATE_INFO (NODE))\n #define CLASSTYPE_TI_TEMPLATE(NODE) TI_TEMPLATE (CLASSTYPE_TEMPLATE_INFO (NODE))\n #define CLASSTYPE_TI_ARGS(NODE)     TI_ARGS (CLASSTYPE_TEMPLATE_INFO (NODE))\n-#define ENUM_TI_TEMPLATE(NODE)\t\t\t\\\n-  TI_TEMPLATE (ENUM_TEMPLATE_INFO (NODE))\n-#define ENUM_TI_ARGS(NODE)\t\t\t\\\n-  TI_ARGS (ENUM_TEMPLATE_INFO (NODE))\n \n /* For a template instantiation TYPE, returns the TYPE corresponding\n    to the primary template.  Otherwise returns TYPE itself.  */\n@@ -2763,9 +2754,6 @@ struct lang_decl GTY(())\n /* Returns nonzero if NODE is a primary template.  */\n #define PRIMARY_TEMPLATE_P(NODE) (DECL_PRIMARY_TEMPLATE (NODE) == (NODE))\n \n-#define CLASSTYPE_TEMPLATE_LEVEL(NODE) \\\n-  (TREE_INT_CST_LOW (TREE_PURPOSE (CLASSTYPE_TI_TEMPLATE (NODE))))\n-\n /* Indicates whether or not (and how) a template was expanded for this\n    FUNCTION_DECL or VAR_DECL.\n      0=normal declaration, e.g. int min (int, int);"}]}