{"sha": "ccce3b2ac3c9352501278d36b3c79f049234870b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2NjZTNiMmFjM2M5MzUyNTAxMjc4ZDM2YjNjNzlmMDQ5MjM0ODcwYg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2015-01-09T20:10:11Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2015-01-09T20:10:11Z"}, "message": "New jit API entrypoint: gcc_jit_context_new_rvalue_from_long\n\ngcc/jit/ChangeLog:\n\t* docs/cp/topics/expressions.rst (Simple expressions): Use\n\t\":c:type:\" for C types.  Document new overload of\n\tgcc::jit::context::new_rvalue.\n\t* docs/topics/expressions.rst (Simple expressions): Use\n\t\":c:type:\" for C types.  Document new entrypoint\n\tgcc_jit_context_new_rvalue_from_long.\n\t* docs/_build/texinfo/libgccjit.texi: Regenerate.\n\t* jit-playback.c: Within namespace gcc::jit::playback...\n\t(context::new_rvalue_from_int): Eliminate in favor of...\n\t(context::new_rvalue_from_const <int>): ...this.\n\t(context::new_rvalue_from_double): Eliminate in favor of...\n\t(context::new_rvalue_from_const <double>): ...this.\n\t(context::new_rvalue_from_const <long>): New.\n\t(context::new_rvalue_from_ptr): Eliminate in favor of...\n\t(context::new_rvalue_from_const <void *>): ...this.\n\t* jit-playback.h: Within namespace gcc::jit::playback...\n\t(context::new_rvalue_from_int): Eliminate in favor of...\n\t(context::new_rvalue_from_const <HOST_TYPE>): ...this.\n\t(context::new_rvalue_from_double): Likewise.\n\t(context::new_rvalue_from_ptr): Likewise.\n\t* jit-recording.c: Within namespace gcc::jit::recording...\n\t(context::new_rvalue_from_int): Eliminate.\n\t(context::new_rvalue_from_double): Likewise.\n\t(context::new_rvalue_from_ptr): Likewise.\n\t(class memento_of_new_rvalue_from_const <int>):\n\tAdd explicit specialization.\n\t(class memento_of_new_rvalue_from_const <long>):\n\tLikewise.\n\t(class memento_of_new_rvalue_from_const <double>):\n\tLikewise.\n\t(class memento_of_new_rvalue_from_const <void *>):\n\tLikewise.\n\t(memento_of_new_rvalue_from_int::replay_into):\n\tGeneralize into...\n\t(memento_of_new_rvalue_from_const <HOST_TYPE>::replay_into):\n\t...this...\n\t(memento_of_new_rvalue_from_double::replay_into):\n\t...allowing this...\n\t(memento_of_new_rvalue_from_ptr::replay_into):\n\t...and this to be deleted.\n\t(memento_of_new_rvalue_from_int::make_debug_string):\n\tConvert to...\n\t(memento_of_new_rvalue_from_const <int>::make_debug_string):\n\t...this.\n\t(memento_of_new_rvalue_from_double::make_debug_string):\n\tConvert to...\n\t(memento_of_new_rvalue_from_const <double>::make_debug_string):\n\t...this.\n\t(memento_of_new_rvalue_from_ptr::make_debug_string)\n\tConvert to...\n\t(memento_of_new_rvalue_from_const <void *>::make_debug_string):\n\t...this.\n\t(memento_of_new_rvalue_from_const <long>::make_debug_string):\n\tNew function.\n\t* jit-recording.h: Within namespace gcc::jit::recording...\n\t(context::new_rvalue_from_int): Eliminate.\n\t(context::new_rvalue_from_double): Likewise.\n\t(context::new_rvalue_from_ptr): Likewise, all in favor of...\n\t(context::new_rvalue_from_const <HOST_TYPE>): New family of\n\tmethods.\n\t(class memento_of_new_rvalue_from_int): Eliminate.\n\t(class memento_of_new_rvalue_from_double): Likewise.\n\t(class memento_of_new_rvalue_from_ptr): Likewise.\n\t(class memento_of_new_rvalue_from_const <HOST_TYPE>): New family\n\tof rvalue subclasses.\n\t* libgccjit++.h (gccjit::context::new_rvalue): New overload, for\n\t\"long\".\n\t* libgccjit.c (gcc_jit_context_new_rvalue_from_int): Update for\n\trewriting of recording::context::new_rvalue_from_int to\n\trecording::context::new_rvalue_from_const <int>.\n\t(gcc_jit_context_new_rvalue_from_long): New API entrypoint.\n\t(gcc_jit_context_new_rvalue_from_double): Update for\n\trewriting of recording::context::new_rvalue_from_double to\n\trecording::context::new_rvalue_from_const <double>.\n\t(gcc_jit_context_new_rvalue_from_ptr): Update for\n\trewriting of recording::context::new_rvalue_from_ptr to\n\trecording::context::new_rvalue_from_const <void *>.\n\t* libgccjit.h (gcc_jit_context_new_rvalue_from_long): New API\n\tentrypoint.\n\t* libgccjit.map (gcc_jit_context_new_rvalue_from_long): Likewise.\n\ngcc/testsuite/ChangeLog:\n\t* jit.dg/all-non-failing-tests.h: Add test-constants.c.\n\t* jit.dg/test-combination.c (create_code): Likewise.\n\t(verify_code): Likewise.\n\t* jit.dg/test-constants.c: New test case.\n\t* jit.dg/test-threads.c: Add test-constants.c.\n\nFrom-SVN: r219401", "tree": {"sha": "61e9e361de747f905be63bd0d96940d2f0d1c39b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/61e9e361de747f905be63bd0d96940d2f0d1c39b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ccce3b2ac3c9352501278d36b3c79f049234870b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccce3b2ac3c9352501278d36b3c79f049234870b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ccce3b2ac3c9352501278d36b3c79f049234870b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccce3b2ac3c9352501278d36b3c79f049234870b/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "486b97f297eb20c5b72140ea257ff63143a69ab7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/486b97f297eb20c5b72140ea257ff63143a69ab7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/486b97f297eb20c5b72140ea257ff63143a69ab7"}], "stats": {"total": 1162, "additions": 657, "deletions": 505}, "files": [{"sha": "b84ac992cb2ffacab0ceb4aa403eeac129ed15f9", "filename": "gcc/jit/ChangeLog", "status": "modified", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccce3b2ac3c9352501278d36b3c79f049234870b/gcc%2Fjit%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccce3b2ac3c9352501278d36b3c79f049234870b/gcc%2Fjit%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2FChangeLog?ref=ccce3b2ac3c9352501278d36b3c79f049234870b", "patch": "@@ -1,3 +1,86 @@\n+2015-01-09  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* docs/cp/topics/expressions.rst (Simple expressions): Use\n+\t\":c:type:\" for C types.  Document new overload of\n+\tgcc::jit::context::new_rvalue.\n+\t* docs/topics/expressions.rst (Simple expressions): Use\n+\t\":c:type:\" for C types.  Document new entrypoint\n+\tgcc_jit_context_new_rvalue_from_long.\n+\t* docs/_build/texinfo/libgccjit.texi: Regenerate.\n+\t* jit-playback.c: Within namespace gcc::jit::playback...\n+\t(context::new_rvalue_from_int): Eliminate in favor of...\n+\t(context::new_rvalue_from_const <int>): ...this.\n+\t(context::new_rvalue_from_double): Eliminate in favor of...\n+\t(context::new_rvalue_from_const <double>): ...this.\n+\t(context::new_rvalue_from_const <long>): New.\n+\t(context::new_rvalue_from_ptr): Eliminate in favor of...\n+\t(context::new_rvalue_from_const <void *>): ...this.\n+\t* jit-playback.h: Within namespace gcc::jit::playback...\n+\t(context::new_rvalue_from_int): Eliminate in favor of...\n+\t(context::new_rvalue_from_const <HOST_TYPE>): ...this.\n+\t(context::new_rvalue_from_double): Likewise.\n+\t(context::new_rvalue_from_ptr): Likewise.\n+\t* jit-recording.c: Within namespace gcc::jit::recording...\n+\t(context::new_rvalue_from_int): Eliminate.\n+\t(context::new_rvalue_from_double): Likewise.\n+\t(context::new_rvalue_from_ptr): Likewise.\n+\t(class memento_of_new_rvalue_from_const <int>):\n+\tAdd explicit specialization.\n+\t(class memento_of_new_rvalue_from_const <long>):\n+\tLikewise.\n+\t(class memento_of_new_rvalue_from_const <double>):\n+\tLikewise.\n+\t(class memento_of_new_rvalue_from_const <void *>):\n+\tLikewise.\n+\t(memento_of_new_rvalue_from_int::replay_into):\n+\tGeneralize into...\n+\t(memento_of_new_rvalue_from_const <HOST_TYPE>::replay_into):\n+\t...this...\n+\t(memento_of_new_rvalue_from_double::replay_into):\n+\t...allowing this...\n+\t(memento_of_new_rvalue_from_ptr::replay_into):\n+\t...and this to be deleted.\n+\t(memento_of_new_rvalue_from_int::make_debug_string):\n+\tConvert to...\n+\t(memento_of_new_rvalue_from_const <int>::make_debug_string):\n+\t...this.\n+\t(memento_of_new_rvalue_from_double::make_debug_string):\n+\tConvert to...\n+\t(memento_of_new_rvalue_from_const <double>::make_debug_string):\n+\t...this.\n+\t(memento_of_new_rvalue_from_ptr::make_debug_string)\n+\tConvert to...\n+\t(memento_of_new_rvalue_from_const <void *>::make_debug_string):\n+\t...this.\n+\t(memento_of_new_rvalue_from_const <long>::make_debug_string):\n+\tNew function.\n+\t* jit-recording.h: Within namespace gcc::jit::recording...\n+\t(context::new_rvalue_from_int): Eliminate.\n+\t(context::new_rvalue_from_double): Likewise.\n+\t(context::new_rvalue_from_ptr): Likewise, all in favor of...\n+\t(context::new_rvalue_from_const <HOST_TYPE>): New family of\n+\tmethods.\n+\t(class memento_of_new_rvalue_from_int): Eliminate.\n+\t(class memento_of_new_rvalue_from_double): Likewise.\n+\t(class memento_of_new_rvalue_from_ptr): Likewise.\n+\t(class memento_of_new_rvalue_from_const <HOST_TYPE>): New family\n+\tof rvalue subclasses.\n+\t* libgccjit++.h (gccjit::context::new_rvalue): New overload, for\n+\t\"long\".\n+\t* libgccjit.c (gcc_jit_context_new_rvalue_from_int): Update for\n+\trewriting of recording::context::new_rvalue_from_int to\n+\trecording::context::new_rvalue_from_const <int>.\n+\t(gcc_jit_context_new_rvalue_from_long): New API entrypoint.\n+\t(gcc_jit_context_new_rvalue_from_double): Update for\n+\trewriting of recording::context::new_rvalue_from_double to\n+\trecording::context::new_rvalue_from_const <double>.\n+\t(gcc_jit_context_new_rvalue_from_ptr): Update for\n+\trewriting of recording::context::new_rvalue_from_ptr to\n+\trecording::context::new_rvalue_from_const <void *>.\n+\t* libgccjit.h (gcc_jit_context_new_rvalue_from_long): New API\n+\tentrypoint.\n+\t* libgccjit.map (gcc_jit_context_new_rvalue_from_long): Likewise.\n+\n 2015-01-09  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR jit/64206"}, {"sha": "1f5fcd059264f4d75acaccffaa9785377f5f8c3d", "filename": "gcc/jit/docs/_build/texinfo/libgccjit.texi", "status": "modified", "additions": 343, "deletions": 327, "changes": 670, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccce3b2ac3c9352501278d36b3c79f049234870b/gcc%2Fjit%2Fdocs%2F_build%2Ftexinfo%2Flibgccjit.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccce3b2ac3c9352501278d36b3c79f049234870b/gcc%2Fjit%2Fdocs%2F_build%2Ftexinfo%2Flibgccjit.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2F_build%2Ftexinfo%2Flibgccjit.texi?ref=ccce3b2ac3c9352501278d36b3c79f049234870b"}, {"sha": "b58eeff8ff1819b1c4cce7dc08f960f7325899c4", "filename": "gcc/jit/docs/cp/topics/expressions.rst", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccce3b2ac3c9352501278d36b3c79f049234870b/gcc%2Fjit%2Fdocs%2Fcp%2Ftopics%2Fexpressions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccce3b2ac3c9352501278d36b3c79f049234870b/gcc%2Fjit%2Fdocs%2Fcp%2Ftopics%2Fexpressions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Fcp%2Ftopics%2Fexpressions.rst?ref=ccce3b2ac3c9352501278d36b3c79f049234870b", "patch": "@@ -57,7 +57,14 @@ Simple expressions\n                                            int value) const\n \n    Given a numeric type (integer or floating point), build an rvalue for\n-   the given constant ``int`` value.\n+   the given constant :c:type:`int` value.\n+\n+.. function:: gccjit::rvalue \\\n+              gccjit::context::new_rvalue (gccjit::type numeric_type, \\\n+                                           long value) const\n+\n+   Given a numeric type (integer or floating point), build an rvalue for\n+   the given constant :c:type:`long` value.\n \n .. function::  gccjit::rvalue \\\n                gccjit::context::zero (gccjit::type numeric_type) const\n@@ -84,7 +91,7 @@ Simple expressions\n                                             double value) const\n \n    Given a numeric type (integer or floating point), build an rvalue for\n-   the given constant value.\n+   the given constant :c:type:`double` value.\n \n .. function:: gccjit::rvalue \\\n               gccjit::context::new_rvalue (gccjit::type pointer_type, \\"}, {"sha": "13a28e895d9304005f6b143e18c1b2ce83cb1d84", "filename": "gcc/jit/docs/topics/expressions.rst", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccce3b2ac3c9352501278d36b3c79f049234870b/gcc%2Fjit%2Fdocs%2Ftopics%2Fexpressions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccce3b2ac3c9352501278d36b3c79f049234870b/gcc%2Fjit%2Fdocs%2Ftopics%2Fexpressions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Ftopics%2Fexpressions.rst?ref=ccce3b2ac3c9352501278d36b3c79f049234870b", "patch": "@@ -60,7 +60,15 @@ Simple expressions\n                                                    int value)\n \n    Given a numeric type (integer or floating point), build an rvalue for\n-   the given constant value.\n+   the given constant :c:type:`int` value.\n+\n+.. function:: gcc_jit_rvalue *\\\n+              gcc_jit_context_new_rvalue_from_long (gcc_jit_context *ctxt, \\\n+                                                    gcc_jit_type *numeric_type, \\\n+                                                    long value)\n+\n+   Given a numeric type (integer or floating point), build an rvalue for\n+   the given constant :c:type:`long` value.\n \n .. function::  gcc_jit_rvalue *gcc_jit_context_zero (gcc_jit_context *ctxt, \\\n                                                      gcc_jit_type *numeric_type)\n@@ -88,7 +96,7 @@ Simple expressions\n                                                        double value)\n \n    Given a numeric type (integer or floating point), build an rvalue for\n-   the given constant value.\n+   the given constant :c:type:`double` value.\n \n .. function:: gcc_jit_rvalue *\\\n               gcc_jit_context_new_rvalue_from_ptr (gcc_jit_context *ctxt, \\"}, {"sha": "9c3bc17089ff3c4590e177ca3237b8d61e2c1b84", "filename": "gcc/jit/jit-playback.c", "status": "modified", "additions": 60, "deletions": 15, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccce3b2ac3c9352501278d36b3c79f049234870b/gcc%2Fjit%2Fjit-playback.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccce3b2ac3c9352501278d36b3c79f049234870b/gcc%2Fjit%2Fjit-playback.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-playback.c?ref=ccce3b2ac3c9352501278d36b3c79f049234870b", "patch": "@@ -486,12 +486,25 @@ new_global (location *loc,\n   return new lvalue (this, inner);\n }\n \n-/* Construct a playback::rvalue instance (wrapping a tree).  */\n+/* Implementation of the various\n+      gcc::jit::playback::context::new_rvalue_from_const <HOST_TYPE>\n+   methods.\n+   Each of these constructs a playback::rvalue instance (wrapping a tree).\n \n-playback::rvalue *\n-playback::context::\n-new_rvalue_from_int (type *type,\n-\t\t     int value)\n+   These specializations are required to be in the same namespace\n+   as the template, hence we now have to enter the gcc::jit::playback\n+   namespace.  */\n+\n+namespace playback\n+{\n+\n+/* Specialization of making an rvalue from a const, for host <int>.  */\n+\n+template <>\n+rvalue *\n+context::\n+new_rvalue_from_const <int> (type *type,\n+\t\t\t     int value)\n {\n   // FIXME: type-checking, or coercion?\n   tree inner_type = type->as_tree ();\n@@ -509,12 +522,37 @@ new_rvalue_from_int (type *type,\n     }\n }\n \n-/* Construct a playback::rvalue instance (wrapping a tree).  */\n+/* Specialization of making an rvalue from a const, for host <long>.  */\n \n-playback::rvalue *\n-playback::context::\n-new_rvalue_from_double (type *type,\n-\t\t\tdouble value)\n+template <>\n+rvalue *\n+context::\n+new_rvalue_from_const <long> (type *type,\n+\t\t\t      long value)\n+{\n+  // FIXME: type-checking, or coercion?\n+  tree inner_type = type->as_tree ();\n+  if (INTEGRAL_TYPE_P (inner_type))\n+    {\n+      tree inner = build_int_cst (inner_type, value);\n+      return new rvalue (this, inner);\n+    }\n+  else\n+    {\n+      REAL_VALUE_TYPE real_value;\n+      real_from_integer (&real_value, VOIDmode, value, SIGNED);\n+      tree inner = build_real (inner_type, real_value);\n+      return new rvalue (this, inner);\n+    }\n+}\n+\n+/* Specialization of making an rvalue from a const, for host <double>.  */\n+\n+template <>\n+rvalue *\n+context::\n+new_rvalue_from_const <double> (type *type,\n+\t\t\t\tdouble value)\n {\n   // FIXME: type-checking, or coercion?\n   tree inner_type = type->as_tree ();\n@@ -539,19 +577,26 @@ new_rvalue_from_double (type *type,\n   return new rvalue (this, inner);\n }\n \n-/* Construct a playback::rvalue instance (wrapping a tree).  */\n+/* Specialization of making an rvalue from a const, for host <void *>.  */\n \n-playback::rvalue *\n-playback::context::\n-new_rvalue_from_ptr (type *type,\n-\t\t     void *value)\n+template <>\n+rvalue *\n+context::\n+new_rvalue_from_const <void *> (type *type,\n+\t\t\t\tvoid *value)\n {\n   tree inner_type = type->as_tree ();\n   /* FIXME: how to ensure we have a wide enough type?  */\n   tree inner = build_int_cstu (inner_type, (unsigned HOST_WIDE_INT)value);\n   return new rvalue (this, inner);\n }\n \n+/* We're done implementing the specializations of\n+      gcc::jit::playback::context::new_rvalue_from_const <T>\n+   so we can exit the gcc::jit::playback namespace.  */\n+\n+} // namespace playback\n+\n /* Construct a playback::rvalue instance (wrapping a tree).  */\n \n playback::rvalue *"}, {"sha": "07d030e8c300ffde5694d35957a76539a8921a16", "filename": "gcc/jit/jit-playback.h", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccce3b2ac3c9352501278d36b3c79f049234870b/gcc%2Fjit%2Fjit-playback.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccce3b2ac3c9352501278d36b3c79f049234870b/gcc%2Fjit%2Fjit-playback.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-playback.h?ref=ccce3b2ac3c9352501278d36b3c79f049234870b", "patch": "@@ -93,17 +93,10 @@ class context : public log_user\n \t      type *type,\n \t      const char *name);\n \n+  template <typename HOST_TYPE>\n   rvalue *\n-  new_rvalue_from_int (type *type,\n-\t\t       int value);\n-\n-  rvalue *\n-  new_rvalue_from_double (type *type,\n-\t\t\t  double value);\n-\n-  rvalue *\n-  new_rvalue_from_ptr (type *type,\n-\t\t       void *value);\n+  new_rvalue_from_const (type *type,\n+\t\t\t HOST_TYPE value);\n \n   rvalue *\n   new_string_literal (const char *value);"}, {"sha": "63dab380db13c691735808421d08da6ed3a03c58", "filename": "gcc/jit/jit-recording.c", "status": "modified", "additions": 62, "deletions": 89, "changes": 151, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccce3b2ac3c9352501278d36b3c79f049234870b/gcc%2Fjit%2Fjit-recording.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccce3b2ac3c9352501278d36b3c79f049234870b/gcc%2Fjit%2Fjit-recording.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-recording.c?ref=ccce3b2ac3c9352501278d36b3c79f049234870b", "patch": "@@ -647,54 +647,6 @@ recording::context::new_global (recording::location *loc,\n   return result;\n }\n \n-/* Create a recording::memento_of_new_rvalue_from_int instance and add\n-   it to this context's list of mementos.\n-\n-   Implements the post-error-checking part of\n-   gcc_jit_context_new_rvalue_from_int.  */\n-\n-recording::rvalue *\n-recording::context::new_rvalue_from_int (recording::type *type,\n-\t\t\t\t\t int value)\n-{\n-  recording::rvalue *result =\n-    new memento_of_new_rvalue_from_int (this, NULL, type, value);\n-  record (result);\n-  return result;\n-}\n-\n-/* Create a recording::memento_of_new_rvalue_from_double instance and\n-   add it to this context's list of mementos.\n-\n-   Implements the post-error-checking part of\n-   gcc_jit_context_new_rvalue_from_double.  */\n-\n-recording::rvalue *\n-recording::context::new_rvalue_from_double (recording::type *type,\n-\t\t\t\t\t    double value)\n-{\n-  recording::rvalue *result =\n-    new memento_of_new_rvalue_from_double (this, NULL, type, value);\n-  record (result);\n-  return result;\n-}\n-\n-/* Create a recording::memento_of_new_rvalue_from_ptr instance and add\n-   it to this context's list of mementos.\n-\n-   Implements the post-error-checking part of\n-   gcc_jit_context_new_rvalue_from_ptr.  */\n-\n-recording::rvalue *\n-recording::context::new_rvalue_from_ptr (recording::type *type,\n-\t\t\t\t\t void *value)\n-{\n-  recording::rvalue *result =\n-    new memento_of_new_rvalue_from_ptr (this, NULL, type, value);\n-  record (result);\n-  return result;\n-}\n-\n /* Create a recording::memento_of_new_string_literal instance and add it\n    to this context's list of mementos.\n \n@@ -2702,83 +2654,99 @@ recording::global::replay_into (replayer *r)\n \t\t\t\t   playback_string (m_name)));\n }\n \n-/* The implementation of class gcc::jit::recording::memento_of_new_rvalue_from_int.  */\n+/* The implementation of the various const-handling classes:\n+   gcc::jit::recording::memento_of_new_rvalue_from_const <HOST_TYPE>.  */\n \n-/* Implementation of pure virtual hook recording::memento::replay_into\n-   for recording::memento_of_new_rvalue_from_int.  */\n+/* Explicit specialization of the various mementos we're interested in.  */\n+template class recording::memento_of_new_rvalue_from_const <int>;\n+template class recording::memento_of_new_rvalue_from_const <long>;\n+template class recording::memento_of_new_rvalue_from_const <double>;\n+template class recording::memento_of_new_rvalue_from_const <void *>;\n+\n+/* Implementation of the pure virtual hook recording::memento::replay_into\n+   for recording::memento_of_new_rvalue_from_const <HOST_TYPE>.  */\n \n+template <typename HOST_TYPE>\n void\n-recording::memento_of_new_rvalue_from_int::replay_into (replayer *r)\n+recording::\n+memento_of_new_rvalue_from_const <HOST_TYPE>::replay_into (replayer *r)\n {\n-  set_playback_obj (r->new_rvalue_from_int (m_type->playback_type (),\n-\t\t\t\t\t    m_value));\n+    set_playback_obj\n+      (r->new_rvalue_from_const <HOST_TYPE> (m_type->playback_type (),\n+\t\t\t\t\t     m_value));\n }\n \n-/* Implementation of recording::memento::make_debug_string for\n-   rvalue_from_int, rendering it as\n-     (TYPE)LITERAL\n+/* The make_debug_string method varies between the various\n+   memento_of_new_rvalue_from_const <HOST_TYPE> classes, so we explicitly\n+   write specializations of it.\n+\n+   I (dmalcolm) find the code to be clearer if the \"recording\" vs \"playback\"\n+   namespaces are written out explicitly, which is why most of this file\n+   doesn't abbreviate things by entering the \"recording\" namespace.\n+\n+   However, these specializations are required to be in the same namespace\n+   as the template, hence we now have to enter the gcc::jit::recording\n+   namespace.  */\n+\n+namespace recording\n+{\n+\n+/* The make_debug_string specialization for <int>, which renders it as\n+     (TARGET_TYPE)LITERAL\n    e.g.\n      \"(int)42\".  */\n \n-recording::string *\n-recording::memento_of_new_rvalue_from_int::make_debug_string ()\n+template <>\n+string *\n+memento_of_new_rvalue_from_const <int>::make_debug_string ()\n {\n   return string::from_printf (m_ctxt,\n \t\t\t      \"(%s)%i\",\n \t\t\t      m_type->get_debug_string (),\n \t\t\t      m_value);\n }\n \n-/* The implementation of class gcc::jit::recording::memento_of_new_rvalue_from_double.  */\n-\n-/* Implementation of pure virtual hook recording::memento::replay_into\n-   for recording::memento_of_new_rvalue_from_double.  */\n+/* The make_debug_string specialization for <long>, rendering it as\n+     (TARGET_TYPE)LITERAL\n+   e.g.\n+     \"(long)42\".  */\n \n-void\n-recording::memento_of_new_rvalue_from_double::replay_into (replayer *r)\n+template <>\n+string *\n+memento_of_new_rvalue_from_const <long>::make_debug_string ()\n {\n-  set_playback_obj (r->new_rvalue_from_double (m_type->playback_type (),\n-\t\t\t\t\t       m_value));\n+  return string::from_printf (m_ctxt,\n+\t\t\t      \"(%s)%li\",\n+\t\t\t      m_type->get_debug_string (),\n+\t\t\t      m_value);\n }\n \n-/* Implementation of recording::memento::make_debug_string for\n-   rvalue_from_double, rendering it as\n-     (TYPE)LITERAL\n+/* The make_debug_string specialization for <double>, rendering it as\n+     (TARGET_TYPE)LITERAL\n    e.g.\n      \"(float)42.0\".  */\n \n-recording::string *\n-recording::memento_of_new_rvalue_from_double::make_debug_string ()\n+template <>\n+string *\n+memento_of_new_rvalue_from_const <double>::make_debug_string ()\n {\n   return string::from_printf (m_ctxt,\n \t\t\t      \"(%s)%f\",\n \t\t\t      m_type->get_debug_string (),\n \t\t\t      m_value);\n }\n \n-/* The implementation of class gcc::jit::recording::memento_of_new_rvalue_from_ptr.  */\n-\n-/* Implementation of pure virtual hook recording::memento::replay_into\n-   for recording::memento_of_new_rvalue_from_ptr.  */\n-\n-void\n-recording::memento_of_new_rvalue_from_ptr::replay_into (replayer *r)\n-{\n-  set_playback_obj (r->new_rvalue_from_ptr (m_type->playback_type (),\n-\t\t\t\t\t    m_value));\n-}\n-\n-/* Implementation of recording::memento::make_debug_string for\n-   rvalue_from_ptr, rendering it as\n-     (TYPE)HEX\n+/* The make_debug_string specialization for <void *>, rendering it as\n+     (TARGET_TYPE)HEX\n    e.g.\n      \"(int *)0xdeadbeef\"\n \n    Zero is rendered as NULL e.g.\n      \"(int *)NULL\".  */\n \n-recording::string *\n-recording::memento_of_new_rvalue_from_ptr::make_debug_string ()\n+template <>\n+string *\n+memento_of_new_rvalue_from_const <void *>::make_debug_string ()\n {\n   if (m_value != NULL)\n     return string::from_printf (m_ctxt,\n@@ -2790,6 +2758,11 @@ recording::memento_of_new_rvalue_from_ptr::make_debug_string ()\n \t\t\t\tm_type->get_debug_string ());\n }\n \n+/* We're done specializing make_debug_string, so we can exit the\n+   gcc::jit::recording namespace.  */\n+\n+} // namespace recording\n+\n /* The implementation of class gcc::jit::recording::memento_of_new_string_literal.  */\n \n /* Implementation of pure virtual hook recording::memento::replay_into"}, {"sha": "8d1548743668e09a0fad99ce033e5fe874e91950", "filename": "gcc/jit/jit-recording.h", "status": "modified", "additions": 28, "deletions": 57, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccce3b2ac3c9352501278d36b3c79f049234870b/gcc%2Fjit%2Fjit-recording.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccce3b2ac3c9352501278d36b3c79f049234870b/gcc%2Fjit%2Fjit-recording.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-recording.h?ref=ccce3b2ac3c9352501278d36b3c79f049234870b", "patch": "@@ -135,17 +135,10 @@ class context : public log_user\n \t      type *type,\n \t      const char *name);\n \n+  template <typename HOST_TYPE>\n   rvalue *\n-  new_rvalue_from_int (type *numeric_type,\n-\t\t       int value);\n-\n-  rvalue *\n-  new_rvalue_from_double (type *numeric_type,\n-\t\t\t  double value);\n-\n-  rvalue *\n-  new_rvalue_from_ptr (type *pointer_type,\n-\t\t       void *value);\n+  new_rvalue_from_const (type *type,\n+\t\t\t HOST_TYPE value);\n \n   rvalue *\n   new_string_literal (const char *value);\n@@ -1073,14 +1066,15 @@ class global : public lvalue\n   string *m_name;\n };\n \n-class memento_of_new_rvalue_from_int : public rvalue\n+template <typename HOST_TYPE>\n+class memento_of_new_rvalue_from_const : public rvalue\n {\n public:\n-  memento_of_new_rvalue_from_int (context *ctxt,\n-\t\t\t\t  location *loc,\n-\t\t\t\t  type *numeric_type,\n-\t\t\t\t  int value)\n-  : rvalue (ctxt, loc, numeric_type),\n+  memento_of_new_rvalue_from_const (context *ctxt,\n+\t\t\t\t    location *loc,\n+\t\t\t\t    type *type,\n+\t\t\t\t    HOST_TYPE value)\n+  : rvalue (ctxt, loc, type),\n     m_value (value) {}\n \n   void replay_into (replayer *r);\n@@ -1089,47 +1083,7 @@ class memento_of_new_rvalue_from_int : public rvalue\n   string * make_debug_string ();\n \n private:\n-  int m_value;\n-};\n-\n-class memento_of_new_rvalue_from_double : public rvalue\n-{\n-public:\n-  memento_of_new_rvalue_from_double (context *ctxt,\n-\t\t\t\t     location *loc,\n-\t\t\t\t     type *numeric_type,\n-\t\t\t\t     double value)\n-  : rvalue (ctxt, loc, numeric_type),\n-    m_value (value)\n-  {}\n-\n-  void replay_into (replayer *);\n-\n-private:\n-  string * make_debug_string ();\n-\n-private:\n-  double m_value;\n-};\n-\n-class memento_of_new_rvalue_from_ptr : public rvalue\n-{\n-public:\n-  memento_of_new_rvalue_from_ptr (context *ctxt,\n-\t\t\t\t  location *loc,\n-\t\t\t\t  type *pointer_type,\n-\t\t\t\t  void *value)\n-  : rvalue (ctxt, loc, pointer_type),\n-    m_value (value)\n-  {}\n-\n-  void replay_into (replayer *);\n-\n-private:\n-  string * make_debug_string ();\n-\n-private:\n-  void *m_value;\n+  HOST_TYPE m_value;\n };\n \n class memento_of_new_string_literal : public rvalue\n@@ -1605,6 +1559,23 @@ class return_ : public statement\n \n } // namespace gcc::jit::recording\n \n+/* Create a recording::memento_of_new_rvalue_from_const instance and add\n+   it to this context's list of mementos.\n+\n+   Implements the post-error-checking part of\n+   gcc_jit_context_new_rvalue_from_{int|long|double|ptr}.  */\n+\n+template <typename HOST_TYPE>\n+recording::rvalue *\n+recording::context::new_rvalue_from_const (recording::type *type,\n+\t\t\t\t\t   HOST_TYPE value)\n+{\n+  recording::rvalue *result =\n+    new memento_of_new_rvalue_from_const <HOST_TYPE> (this, NULL, type, value);\n+  record (result);\n+  return result;\n+}\n+\n } // namespace gcc::jit\n \n } // namespace gcc"}, {"sha": "84144e51126f065c63d90ed78fa2f4cfee66370f", "filename": "gcc/jit/libgccjit++.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccce3b2ac3c9352501278d36b3c79f049234870b/gcc%2Fjit%2Flibgccjit%2B%2B.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccce3b2ac3c9352501278d36b3c79f049234870b/gcc%2Fjit%2Flibgccjit%2B%2B.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Flibgccjit%2B%2B.h?ref=ccce3b2ac3c9352501278d36b3c79f049234870b", "patch": "@@ -161,6 +161,8 @@ namespace gccjit\n \n     rvalue new_rvalue (type numeric_type,\n \t\t       int value) const;\n+    rvalue new_rvalue (type numeric_type,\n+\t\t       long value) const;\n     rvalue zero (type numeric_type) const;\n     rvalue one (type numeric_type) const;\n     rvalue new_rvalue (type numeric_type,\n@@ -725,6 +727,16 @@ context::new_rvalue (type numeric_type,\n \t\t\t\t\t value));\n }\n \n+inline rvalue\n+context::new_rvalue (type numeric_type,\n+\t\t     long value) const\n+{\n+  return rvalue (\n+    gcc_jit_context_new_rvalue_from_long (m_inner_ctxt,\n+\t\t\t\t\t  numeric_type.get_inner_type (),\n+\t\t\t\t\t  value));\n+}\n+\n inline rvalue\n context::zero (type numeric_type) const\n {"}, {"sha": "62d3edf9e1c5e36d863e97b1ed47e4fa4dac9f46", "filename": "gcc/jit/libgccjit.c", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccce3b2ac3c9352501278d36b3c79f049234870b/gcc%2Fjit%2Flibgccjit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccce3b2ac3c9352501278d36b3c79f049234870b/gcc%2Fjit%2Flibgccjit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Flibgccjit.c?ref=ccce3b2ac3c9352501278d36b3c79f049234870b", "patch": "@@ -1080,7 +1080,23 @@ gcc_jit_context_new_rvalue_from_int (gcc_jit_context *ctxt,\n   JIT_LOG_FUNC (ctxt->get_logger ());\n   RETURN_NULL_IF_FAIL_NONNULL_NUMERIC_TYPE (ctxt, numeric_type);\n \n-  return (gcc_jit_rvalue *)ctxt->new_rvalue_from_int (numeric_type, value);\n+  return ((gcc_jit_rvalue *)ctxt\n+\t  ->new_rvalue_from_const <int> (numeric_type, value));\n+}\n+\n+/* FIXME. */\n+\n+gcc_jit_rvalue *\n+gcc_jit_context_new_rvalue_from_long (gcc_jit_context *ctxt,\n+\t\t\t\t      gcc_jit_type *numeric_type,\n+\t\t\t\t      long value)\n+{\n+  RETURN_NULL_IF_FAIL (ctxt, NULL, NULL, \"NULL context\");\n+  JIT_LOG_FUNC (ctxt->get_logger ());\n+  RETURN_NULL_IF_FAIL_NONNULL_NUMERIC_TYPE (ctxt, numeric_type);\n+\n+  return ((gcc_jit_rvalue *)ctxt\n+\t  ->new_rvalue_from_const <long> (numeric_type, value));\n }\n \n /* Public entrypoint.  See description in libgccjit.h.\n@@ -1132,7 +1148,8 @@ gcc_jit_context_new_rvalue_from_double (gcc_jit_context *ctxt,\n   JIT_LOG_FUNC (ctxt->get_logger ());\n   RETURN_NULL_IF_FAIL_NONNULL_NUMERIC_TYPE (ctxt, numeric_type);\n \n-  return (gcc_jit_rvalue *)ctxt->new_rvalue_from_double (numeric_type, value);\n+  return ((gcc_jit_rvalue *)ctxt\n+\t  ->new_rvalue_from_const <double> (numeric_type, value));\n }\n \n /* Public entrypoint.  See description in libgccjit.h.\n@@ -1155,7 +1172,8 @@ gcc_jit_context_new_rvalue_from_ptr (gcc_jit_context *ctxt,\n     \"not a pointer type (type: %s)\",\n     pointer_type->get_debug_string ());\n \n-  return (gcc_jit_rvalue *)ctxt->new_rvalue_from_ptr (pointer_type, value);\n+  return ((gcc_jit_rvalue *)ctxt\n+\t  ->new_rvalue_from_const <void *> (pointer_type, value));\n }\n \n /* Public entrypoint.  See description in libgccjit.h."}, {"sha": "92eed37fb521ecb93a1cc355305f291a276b70a4", "filename": "gcc/jit/libgccjit.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccce3b2ac3c9352501278d36b3c79f049234870b/gcc%2Fjit%2Flibgccjit.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccce3b2ac3c9352501278d36b3c79f049234870b/gcc%2Fjit%2Flibgccjit.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Flibgccjit.h?ref=ccce3b2ac3c9352501278d36b3c79f049234870b", "patch": "@@ -632,6 +632,11 @@ gcc_jit_context_new_rvalue_from_int (gcc_jit_context *ctxt,\n \t\t\t\t     gcc_jit_type *numeric_type,\n \t\t\t\t     int value);\n \n+extern gcc_jit_rvalue *\n+gcc_jit_context_new_rvalue_from_long (gcc_jit_context *ctxt,\n+\t\t\t\t      gcc_jit_type *numeric_type,\n+\t\t\t\t      long value);\n+\n extern gcc_jit_rvalue *\n gcc_jit_context_zero (gcc_jit_context *ctxt,\n \t\t      gcc_jit_type *numeric_type);"}, {"sha": "bc6eb1afaa6eebc4ceafce1c959121079facd179", "filename": "gcc/jit/libgccjit.map", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccce3b2ac3c9352501278d36b3c79f049234870b/gcc%2Fjit%2Flibgccjit.map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccce3b2ac3c9352501278d36b3c79f049234870b/gcc%2Fjit%2Flibgccjit.map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Flibgccjit.map?ref=ccce3b2ac3c9352501278d36b3c79f049234870b", "patch": "@@ -56,6 +56,7 @@\n     gcc_jit_context_new_param;\n     gcc_jit_context_new_rvalue_from_double;\n     gcc_jit_context_new_rvalue_from_int;\n+    gcc_jit_context_new_rvalue_from_long;\n     gcc_jit_context_new_rvalue_from_ptr;\n     gcc_jit_context_new_string_literal;\n     gcc_jit_context_new_struct_type;"}, {"sha": "c0721898e835ba960bc62513e4bf5e72422d6835", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccce3b2ac3c9352501278d36b3c79f049234870b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccce3b2ac3c9352501278d36b3c79f049234870b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ccce3b2ac3c9352501278d36b3c79f049234870b", "patch": "@@ -1,3 +1,11 @@\n+2015-01-09  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* jit.dg/all-non-failing-tests.h: Add test-constants.c.\n+\t* jit.dg/test-combination.c (create_code): Likewise.\n+\t(verify_code): Likewise.\n+\t* jit.dg/test-constants.c: New test case.\n+\t* jit.dg/test-threads.c: Add test-constants.c.\n+\n 2015-01-09  Dimitris Papavasiliou  <dpapavas@gmail.com>\n \n \tPR libobjc/51891"}, {"sha": "14211af220abc2cb018d3c5639f655c3d96395ff", "filename": "gcc/testsuite/jit.dg/all-non-failing-tests.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccce3b2ac3c9352501278d36b3c79f049234870b/gcc%2Ftestsuite%2Fjit.dg%2Fall-non-failing-tests.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccce3b2ac3c9352501278d36b3c79f049234870b/gcc%2Ftestsuite%2Fjit.dg%2Fall-non-failing-tests.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Fall-non-failing-tests.h?ref=ccce3b2ac3c9352501278d36b3c79f049234870b", "patch": "@@ -57,6 +57,13 @@\n #undef create_code\n #undef verify_code\n \n+/* test-constants.c */\n+#define create_code create_code_constants\n+#define verify_code verify_code_constants\n+#include \"test-constants.c\"\n+#undef create_code\n+#undef verify_code\n+\n /* test-dot-product.c */\n #define create_code create_code_dot_product\n #define verify_code verify_code_dot_product"}, {"sha": "5131613190978135d7d1d03d420bda45ec37fa9c", "filename": "gcc/testsuite/jit.dg/test-combination.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccce3b2ac3c9352501278d36b3c79f049234870b/gcc%2Ftestsuite%2Fjit.dg%2Ftest-combination.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccce3b2ac3c9352501278d36b3c79f049234870b/gcc%2Ftestsuite%2Fjit.dg%2Ftest-combination.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Ftest-combination.c?ref=ccce3b2ac3c9352501278d36b3c79f049234870b", "patch": "@@ -22,6 +22,7 @@ create_code (gcc_jit_context *ctxt, void * user_data)\n   create_code_arrays (ctxt, user_data);\n   create_code_calling_external_function (ctxt, user_data);\n   create_code_calling_function_ptr (ctxt, user_data);\n+  create_code_constants (ctxt, user_data);\n   create_code_dot_product (ctxt, user_data);\n   create_code_expressions (ctxt, user_data);\n   create_code_factorial (ctxt, user_data);\n@@ -50,6 +51,7 @@ verify_code (gcc_jit_context *ctxt, gcc_jit_result *result)\n   verify_code_arrays (ctxt, result);\n   verify_code_calling_external_function (ctxt, result);\n   verify_code_calling_function_ptr (ctxt, result);\n+  verify_code_constants (ctxt, result);\n   verify_code_dot_product (ctxt, result);\n   verify_code_expressions (ctxt, result);\n   verify_code_factorial (ctxt, result);"}, {"sha": "13e414db878cd3d56a09064fe5f37bc4039c495f", "filename": "gcc/testsuite/jit.dg/test-threads.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccce3b2ac3c9352501278d36b3c79f049234870b/gcc%2Ftestsuite%2Fjit.dg%2Ftest-threads.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccce3b2ac3c9352501278d36b3c79f049234870b/gcc%2Ftestsuite%2Fjit.dg%2Ftest-threads.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Ftest-threads.c?ref=ccce3b2ac3c9352501278d36b3c79f049234870b", "patch": "@@ -122,6 +122,9 @@ const struct testcase testcases[] = {\n   {\"calling_function_ptr\",\n    create_code_calling_function_ptr,\n    verify_code_calling_function_ptr},\n+  {\"constants\",\n+   create_code_constants,\n+   verify_code_constants},\n   {\"dot_product\",\n    create_code_dot_product,\n    verify_code_dot_product},"}]}