{"sha": "d7419dec458b277eb34ed15a3895c166fc47f93b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDc0MTlkZWM0NThiMjc3ZWIzNGVkMTVhMzg5NWMxNjZmYzQ3ZjkzYg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2007-03-11T15:53:30Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2007-03-11T15:53:30Z"}, "message": "tree-vrp.c (vrp_int_const_binop): Handle PLUS_EXPR and the *_DIV_EXPR codes correctly with overflow infinities.\n\n\t* tree-vrp.c (vrp_int_const_binop): Handle PLUS_EXPR and\n\tthe *_DIV_EXPR codes correctly with overflow infinities.\n\nFrom-SVN: r122820", "tree": {"sha": "b7ce9f769a469cdb7f4b5350f43afde469788df8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b7ce9f769a469cdb7f4b5350f43afde469788df8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d7419dec458b277eb34ed15a3895c166fc47f93b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7419dec458b277eb34ed15a3895c166fc47f93b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7419dec458b277eb34ed15a3895c166fc47f93b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7419dec458b277eb34ed15a3895c166fc47f93b/comments", "author": null, "committer": null, "parents": [{"sha": "bd91a8c4edadd47b17270c27e222cdca9472b534", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd91a8c4edadd47b17270c27e222cdca9472b534", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd91a8c4edadd47b17270c27e222cdca9472b534"}], "stats": {"total": 34, "additions": 27, "deletions": 7}, "files": [{"sha": "d26d9bec7a656fccfcbcfa02fe1ef28c3b252ab4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7419dec458b277eb34ed15a3895c166fc47f93b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7419dec458b277eb34ed15a3895c166fc47f93b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d7419dec458b277eb34ed15a3895c166fc47f93b", "patch": "@@ -1,3 +1,8 @@\n+2007-03-11  Ian Lance Taylor  <iant@google.com>\n+\n+\t* tree-vrp.c (vrp_int_const_binop): Handle PLUS_EXPR and\n+\tthe *_DIV_EXPR codes correctly with overflow infinities.\n+\n 2007-03-11  Ira Rosen  <irar@il.ibm.com>\n \n \t* tree-data-ref.c (analyze_offset): Add a return value (bool) to "}, {"sha": "d3fd911dbb1b6549a9270f5dc03ceab563aa04e8", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 22, "deletions": 7, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7419dec458b277eb34ed15a3895c166fc47f93b/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7419dec458b277eb34ed15a3895c166fc47f93b/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=d7419dec458b277eb34ed15a3895c166fc47f93b", "patch": "@@ -1519,15 +1519,26 @@ vrp_int_const_binop (enum tree_code code, tree val1, tree val2)\n \t  && !supports_overflow_infinity (TREE_TYPE (res)))\n \treturn NULL_TREE;\n \n-      /* We have to punt on subtracting infinities of the same sign,\n-\t since we can't tell what the sign of the result should\n-\t be.  */\n-      if (code == MINUS_EXPR\n-\t  && sgn1 == sgn2\n+      /* We have to punt on adding infinities of different signs,\n+\t since we can't tell what the sign of the result should be.\n+\t Likewise for subtracting infinities of the same sign.  */\n+      if (((code == PLUS_EXPR && sgn1 != sgn2)\n+\t   || (code == MINUS_EXPR && sgn1 == sgn2))\n \t  && is_overflow_infinity (val1)\n \t  && is_overflow_infinity (val2))\n \treturn NULL_TREE;\n \n+      /* Don't try to handle division or shifting of infinities.  */\n+      if ((code == TRUNC_DIV_EXPR\n+\t   || code == FLOOR_DIV_EXPR\n+\t   || code == CEIL_DIV_EXPR\n+\t   || code == EXACT_DIV_EXPR\n+\t   || code == ROUND_DIV_EXPR\n+\t   || code == RSHIFT_EXPR)\n+\t  && (is_overflow_infinity (val1)\n+\t      || is_overflow_infinity (val2)))\n+\treturn NULL_TREE;\n+\n       /* Notice that we only need to handle the restricted set of\n \t operations handled by extract_range_from_binary_expr.\n \t Among them, only multiplication, addition and subtraction\n@@ -1541,8 +1552,12 @@ vrp_int_const_binop (enum tree_code code, tree val1, tree val2)\n       if ((code == MULT_EXPR && sgn1 == sgn2)\n           /* For addition, the operands must be of the same sign\n \t     to yield an overflow.  Its sign is therefore that\n-\t     of one of the operands, for example the first.  */\n-\t  || (code == PLUS_EXPR && sgn1 > 0)\n+\t     of one of the operands, for example the first.  For\n+\t     infinite operands X + -INF is negative, not positive.  */\n+\t  || (code == PLUS_EXPR\n+\t      && (sgn1 >= 0\n+\t\t  ? !is_negative_overflow_infinity (val2)\n+\t\t  : is_positive_overflow_infinity (val2)))\n \t  /* For subtraction, non-infinite operands must be of\n \t     different signs to yield an overflow.  Its sign is\n \t     therefore that of the first operand or the opposite of"}]}