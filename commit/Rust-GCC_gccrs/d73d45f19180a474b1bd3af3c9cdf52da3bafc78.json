{"sha": "d73d45f19180a474b1bd3af3c9cdf52da3bafc78", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDczZDQ1ZjE5MTgwYTQ3NGIxYmQzYWYzYzljZGY1MmRhM2JhZmM3OA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-02-04T13:55:14Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-05-05T13:54:57Z"}, "message": "Use const for some function arguments.\n\ngcc/ChangeLog:\n\n2020-02-04  Martin Liska  <mliska@suse.cz>\n\n\tPR c/92472\n\t* alloc-pool.h: Use const for some arguments.\n\t* bitmap.h: Likewise.\n\t* mem-stats.h: Likewise.\n\t* sese.h (get_entry_bb): Likewise.\n\t(get_exit_bb): Likewise.", "tree": {"sha": "4ddb2e4178dab4c5bbbdea4fe1172713841ada26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ddb2e4178dab4c5bbbdea4fe1172713841ada26"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d73d45f19180a474b1bd3af3c9cdf52da3bafc78", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEE6I4wzqqylQBfXaRhTcGC3A+nN4UFAl6xcDEACgkQTcGC3A+n\nN4Ur5gf9Em6QbS8zPceR/cayhF2L/KOaoypy4hYDCV+fp7wIqXWxS+SEu29tvGJS\nzZE6o1NByVQjEtoO2bKMpCK1jVzKXzMPSgOkyayOuI55SDBiBjFv2nvBZHf+JHET\nEav/7UpweiuihTVSZrWbU5tQP3i2FbJvyJOWBSlUwdZ2bXbh2R0hZMJO+jH2wc0U\nQs2sgGmaRrxJMCMWn6PRw7g8VZo0qp2/AGvj/U5JBDd1JYiMn9PQ/ahH18tt6HcH\nL8kFBfs091WowtXhrD/SCONnhsLbGCl99itcMKA8k/W2ztk/G0ug7LxniFMB1s5v\nw0JJDaxhsCzI/7JfL/OXd7gHHZ396w==\n=C3O0\n-----END PGP SIGNATURE-----", "payload": "tree 4ddb2e4178dab4c5bbbdea4fe1172713841ada26\nparent 8b33430b53b2a884f177f1d9b40ed840e07240c5\nauthor Martin Liska <mliska@suse.cz> 1580824514 +0100\ncommitter Martin Liska <mliska@suse.cz> 1588686897 +0200\n\nUse const for some function arguments.\n\ngcc/ChangeLog:\n\n2020-02-04  Martin Liska  <mliska@suse.cz>\n\n\tPR c/92472\n\t* alloc-pool.h: Use const for some arguments.\n\t* bitmap.h: Likewise.\n\t* mem-stats.h: Likewise.\n\t* sese.h (get_entry_bb): Likewise.\n\t(get_exit_bb): Likewise.\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d73d45f19180a474b1bd3af3c9cdf52da3bafc78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d73d45f19180a474b1bd3af3c9cdf52da3bafc78", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d73d45f19180a474b1bd3af3c9cdf52da3bafc78/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b33430b53b2a884f177f1d9b40ed840e07240c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b33430b53b2a884f177f1d9b40ed840e07240c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b33430b53b2a884f177f1d9b40ed840e07240c5"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "fd7194bfea423a2d959aa0d2d1209678252af2a8", "filename": "gcc/alloc-pool.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d73d45f19180a474b1bd3af3c9cdf52da3bafc78/gcc%2Falloc-pool.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d73d45f19180a474b1bd3af3c9cdf52da3bafc78/gcc%2Falloc-pool.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falloc-pool.h?ref=d73d45f19180a474b1bd3af3c9cdf52da3bafc78", "patch": "@@ -60,7 +60,7 @@ class pool_usage: public mem_usage\n \n   /* Dump usage coupled to LOC location, where TOTAL is sum of all rows.  */\n   inline void\n-  dump (mem_location *loc, mem_usage &total) const\n+  dump (mem_location *loc, const mem_usage &total) const\n   {\n     char *location_string = loc->to_string ();\n "}, {"sha": "b481f4b260672cf589ec8b8bc626216e59d4f3cf", "filename": "gcc/bitmap.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d73d45f19180a474b1bd3af3c9cdf52da3bafc78/gcc%2Fbitmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d73d45f19180a474b1bd3af3c9cdf52da3bafc78/gcc%2Fbitmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbitmap.h?ref=d73d45f19180a474b1bd3af3c9cdf52da3bafc78", "patch": "@@ -237,7 +237,7 @@ class bitmap_usage: public mem_usage\n \n   /* Dump usage coupled to LOC location, where TOTAL is sum of all rows.  */\n   inline void\n-  dump (mem_location *loc, mem_usage &total) const\n+  dump (mem_location *loc, const mem_usage &total) const\n   {\n     char *location_string = loc->to_string ();\n "}, {"sha": "4a3177dd4fc215475538b3d665bedd7d0f253687", "filename": "gcc/mem-stats.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d73d45f19180a474b1bd3af3c9cdf52da3bafc78/gcc%2Fmem-stats.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d73d45f19180a474b1bd3af3c9cdf52da3bafc78/gcc%2Fmem-stats.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmem-stats.h?ref=d73d45f19180a474b1bd3af3c9cdf52da3bafc78", "patch": "@@ -70,7 +70,7 @@ class mem_location\n \n   /* Return true if the memory location is equal to OTHER.  */\n   int\n-  equal (mem_location &other)\n+  equal (const mem_location &other)\n   {\n     return m_filename == other.m_filename && m_function == other.m_function\n       && m_line == other.m_line;\n@@ -203,7 +203,7 @@ class mem_usage\n \n   /* Dump usage coupled to LOC location, where TOTAL is sum of all rows.  */\n   inline void\n-  dump (mem_location *loc, mem_usage &total) const\n+  dump (mem_location *loc, const mem_usage &total) const\n   {\n     char *location_string = loc->to_string ();\n "}, {"sha": "74d3fe3cd8a01e0b71fc7a017f607fb6f72578c3", "filename": "gcc/sese.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d73d45f19180a474b1bd3af3c9cdf52da3bafc78/gcc%2Fsese.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d73d45f19180a474b1bd3af3c9cdf52da3bafc78/gcc%2Fsese.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsese.h?ref=d73d45f19180a474b1bd3af3c9cdf52da3bafc78", "patch": "@@ -45,15 +45,15 @@ void dump_sese (const sese_l &);\n /* Get the entry of an sese S.  */\n \n static inline basic_block\n-get_entry_bb (sese_l &s)\n+get_entry_bb (const sese_l &s)\n {\n   return s.entry->dest;\n }\n \n /* Get the exit of an sese S.  */\n \n static inline basic_block\n-get_exit_bb (sese_l &s)\n+get_exit_bb (const sese_l &s)\n {\n   return s.exit->src;\n }"}]}