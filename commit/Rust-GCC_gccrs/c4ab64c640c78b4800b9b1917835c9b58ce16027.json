{"sha": "c4ab64c640c78b4800b9b1917835c9b58ce16027", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzRhYjY0YzY0MGM3OGI0ODAwYjliMTkxNzgzNWM5YjU4Y2UxNjAyNw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-10-28T18:17:51Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-10-28T18:17:51Z"}, "message": "i386.md (shift_insn): Rename code attribute from shiftrt_insn.\n\n\t* config/i386/i386.md (shift_insn): Rename code attribute from\n\tshiftrt_insn.  Also handle ashift RTX.\n\t(shift): Rename code attribute from shiftrt.  Also handle ashift RTX.\n\t(<shift_insn>*): Rename from <shiftrt_insn>*. Update asm templates.\n\t* config/i386/sse.md (any_lshift): Rename code iterator from lshift.\n\t(lshift_insn): Remove code attribute.\n\t(lshift): Remove code attribute.\n\t(vlshr<mode>3): Use lshiftrt RTX.\n\t(vashr<mode>3): Use ashiftrt RTX.\n\t(vashl<mode>3): Use ashift RTX.\n\t(avx2_<lshift>v<mode>): Rename from avx2_<shift_insn>v<mode>.  Use\n\tany_lshift code iterator.  Update asm template.\n\t* config/i386/i386.c (bdesc_args) <__builtin_ia32_psll>: Update.\n\nFrom-SVN: r180622", "tree": {"sha": "a54f4581665318b06f1c6b7b9b035e9e0c923e5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a54f4581665318b06f1c6b7b9b035e9e0c923e5b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c4ab64c640c78b4800b9b1917835c9b58ce16027", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4ab64c640c78b4800b9b1917835c9b58ce16027", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4ab64c640c78b4800b9b1917835c9b58ce16027", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4ab64c640c78b4800b9b1917835c9b58ce16027/comments", "author": null, "committer": null, "parents": [{"sha": "f89d6e77d72b81f2b5c6b2f591db7499df1189d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f89d6e77d72b81f2b5c6b2f591db7499df1189d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f89d6e77d72b81f2b5c6b2f591db7499df1189d1"}], "stats": {"total": 139, "additions": 76, "deletions": 63}, "files": [{"sha": "2a855c7534f0cbf9f4dd399ed4948c217f225304", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4ab64c640c78b4800b9b1917835c9b58ce16027/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4ab64c640c78b4800b9b1917835c9b58ce16027/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c4ab64c640c78b4800b9b1917835c9b58ce16027", "patch": "@@ -1,3 +1,19 @@\n+2011-10-28  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (shift_insn): Rename code attribute from\n+\tshiftrt_insn.  Also handle ashift RTX.\n+\t(shift): Rename code attribute from shiftrt.  Also handle ashift RTX.\n+\t(<shift_insn>*): Rename from <shiftrt_insn>*. Update asm templates.\n+\t* config/i386/sse.md (any_lshift): Rename code iterator from lshift.\n+\t(lshift_insn): Remove code attribute.\n+\t(lshift): Remove code attribute.\n+\t(vlshr<mode>3): Use lshiftrt RTX.\n+\t(vashr<mode>3): Use ashiftrt RTX.\n+\t(vashl<mode>3): Use ashift RTX.\n+\t(avx2_<lshift>v<mode>): Rename from avx2_<shift_insn>v<mode>.  Use\n+\tany_lshift code iterator.  Update asm template.\n+\t* config/i386/i386.c (bdesc_args) <__builtin_ia32_psll>: Update.\n+\n 2011-10-28  Georg-Johann Lay  <avr@gjlay.de>\n \n \tPR target/49313\n@@ -9,13 +25,12 @@\n 2011-10-28  Julian Brown  <julian@codesourcery.com>\n \n \tPR rtl-optimization/47918\n-\n \t* reload1.c (set_initial_label_offsets): Use initial offsets\n \tfor labels on the nonlocal_goto_handler_labels chain.\n \n 2011-10-28  Iain Sandoe  <iains@gcc.gnu.org>\n \n-\t* config/rs6000/t-darwin (LIB2FUNCS_STATIC_EXTRA): \n+\t* config/rs6000/t-darwin (LIB2FUNCS_STATIC_EXTRA):\n \tMove darwin-fpsave.asm from here to ... LIB2FUNCS_EXTRA.\n \t(LIB2FUNCS_EXTRA):  Add darwin-gpsave.asm.\n \t(TARGET_LIBGCC2_CFLAGS): Ensure that fPIC and -pipe are inherited from\n@@ -123,7 +138,7 @@\n 2011-10-27  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/50875\n-\t* config/i386/sse.md (*avx2_unpcklpd256): Remove extra insn\n+\t* config/i386/sse.md (*avx_unpcklpd256): Remove extra insn\n \tconstraints.  Change alternative 1 to \"x,m,1\".\n \n 2011-10-27  Jakub Jelinek  <jakub@redhat.com>"}, {"sha": "bb0433f1ef8f1ac1106d328dceb71b1f3b353763", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4ab64c640c78b4800b9b1917835c9b58ce16027/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4ab64c640c78b4800b9b1917835c9b58ce16027/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=c4ab64c640c78b4800b9b1917835c9b58ce16027", "patch": "@@ -26366,10 +26366,10 @@ static const struct builtin_description bdesc_args[] =\n   { OPTION_MASK_ISA_AVX2, CODE_FOR_avx2_permv2ti, \"__builtin_ia32_permti256\", IX86_BUILTIN_VPERMTI256, UNKNOWN, (int) V4DI_FTYPE_V4DI_V4DI_INT },\n   { OPTION_MASK_ISA_AVX2, CODE_FOR_avx2_extracti128, \"__builtin_ia32_extract128i256\", IX86_BUILTIN_VEXTRACT128I256, UNKNOWN, (int) V2DI_FTYPE_V4DI_INT },\n   { OPTION_MASK_ISA_AVX2, CODE_FOR_avx2_inserti128, \"__builtin_ia32_insert128i256\", IX86_BUILTIN_VINSERT128I256, UNKNOWN, (int) V4DI_FTYPE_V4DI_V2DI_INT },\n-  { OPTION_MASK_ISA_AVX2, CODE_FOR_avx2_lshlvv4di, \"__builtin_ia32_psllv4di\", IX86_BUILTIN_PSLLVV4DI, UNKNOWN, (int) V4DI_FTYPE_V4DI_V4DI },\n-  { OPTION_MASK_ISA_AVX2, CODE_FOR_avx2_lshlvv2di, \"__builtin_ia32_psllv2di\", IX86_BUILTIN_PSLLVV2DI, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI },\n-  { OPTION_MASK_ISA_AVX2, CODE_FOR_avx2_lshlvv8si, \"__builtin_ia32_psllv8si\", IX86_BUILTIN_PSLLVV8SI, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI },\n-  { OPTION_MASK_ISA_AVX2, CODE_FOR_avx2_lshlvv4si, \"__builtin_ia32_psllv4si\", IX86_BUILTIN_PSLLVV4SI, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI },\n+  { OPTION_MASK_ISA_AVX2, CODE_FOR_avx2_ashlvv4di, \"__builtin_ia32_psllv4di\", IX86_BUILTIN_PSLLVV4DI, UNKNOWN, (int) V4DI_FTYPE_V4DI_V4DI },\n+  { OPTION_MASK_ISA_AVX2, CODE_FOR_avx2_ashlvv2di, \"__builtin_ia32_psllv2di\", IX86_BUILTIN_PSLLVV2DI, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI },\n+  { OPTION_MASK_ISA_AVX2, CODE_FOR_avx2_ashlvv8si, \"__builtin_ia32_psllv8si\", IX86_BUILTIN_PSLLVV8SI, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI },\n+  { OPTION_MASK_ISA_AVX2, CODE_FOR_avx2_ashlvv4si, \"__builtin_ia32_psllv4si\", IX86_BUILTIN_PSLLVV4SI, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI },\n   { OPTION_MASK_ISA_AVX2, CODE_FOR_avx2_ashrvv8si, \"__builtin_ia32_psrav8si\", IX86_BUILTIN_PSRAVV8SI, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI },\n   { OPTION_MASK_ISA_AVX2, CODE_FOR_avx2_ashrvv4si, \"__builtin_ia32_psrav4si\", IX86_BUILTIN_PSRAVV4SI, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI },\n   { OPTION_MASK_ISA_AVX2, CODE_FOR_avx2_lshrvv4di, \"__builtin_ia32_psrlv4di\", IX86_BUILTIN_PSRLVV4DI, UNKNOWN, (int) V4DI_FTYPE_V4DI_V4DI },"}, {"sha": "91a830104a4d1eec8c39b0c8625bc17ff91fda75", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 33, "deletions": 32, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4ab64c640c78b4800b9b1917835c9b58ce16027/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4ab64c640c78b4800b9b1917835c9b58ce16027/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=c4ab64c640c78b4800b9b1917835c9b58ce16027", "patch": "@@ -776,10 +776,11 @@\n (define_code_iterator any_shiftrt [lshiftrt ashiftrt])\n \n ;; Base name for define_insn\n-(define_code_attr shiftrt_insn [(lshiftrt \"lshr\") (ashiftrt \"ashr\")])\n+(define_code_attr shift_insn\n+  [(ashift \"ashl\") (lshiftrt \"lshr\") (ashiftrt \"ashr\")])\n \n ;; Base name for insn mnemonic.\n-(define_code_attr shiftrt [(lshiftrt \"shr\") (ashiftrt \"sar\")])\n+(define_code_attr shift [(ashift \"sll\") (lshiftrt \"shr\") (ashiftrt \"sar\")])\n \n ;; Mapping of rotate operators\n (define_code_iterator any_rotate [rotate rotatert])\n@@ -9579,15 +9580,15 @@\n \n ;; See comment above `ashl<mode>3' about how this works.\n \n-(define_expand \"<shiftrt_insn><mode>3\"\n+(define_expand \"<shift_insn><mode>3\"\n   [(set (match_operand:SDWIM 0 \"<shift_operand>\" \"\")\n \t(any_shiftrt:SDWIM (match_operand:SDWIM 1 \"<shift_operand>\" \"\")\n \t\t\t   (match_operand:QI 2 \"nonmemory_operand\" \"\")))]\n   \"\"\n   \"ix86_expand_binary_operator (<CODE>, <MODE>mode, operands); DONE;\")\n \n ;; Avoid useless masking of count operand.\n-(define_insn_and_split \"*<shiftrt_insn><mode>3_mask\"\n+(define_insn_and_split \"*<shift_insn><mode>3_mask\"\n   [(set (match_operand:SWI48 0 \"nonimmediate_operand\" \"=rm\")\n \t(any_shiftrt:SWI48\n \t  (match_operand:SWI48 1 \"nonimmediate_operand\" \"0\")\n@@ -9613,7 +9614,7 @@\n   [(set_attr \"type\" \"ishift\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn_and_split \"*<shiftrt_insn><mode>3_doubleword\"\n+(define_insn_and_split \"*<shift_insn><mode>3_doubleword\"\n   [(set (match_operand:DWI 0 \"register_operand\" \"=r\")\n \t(any_shiftrt:DWI (match_operand:DWI 1 \"register_operand\" \"0\")\n \t\t\t (match_operand:QI 2 \"nonmemory_operand\" \"<S>c\")))\n@@ -9622,7 +9623,7 @@\n   \"#\"\n   \"(optimize && flag_peephole2) ? epilogue_completed : reload_completed\"\n   [(const_int 0)]\n-  \"ix86_split_<shiftrt_insn> (operands, NULL_RTX, <MODE>mode); DONE;\"\n+  \"ix86_split_<shift_insn> (operands, NULL_RTX, <MODE>mode); DONE;\"\n   [(set_attr \"type\" \"multi\")])\n \n ;; By default we don't ask for a scratch register, because when DWImode\n@@ -9639,7 +9640,7 @@\n    (match_dup 3)]\n   \"TARGET_CMOVE\"\n   [(const_int 0)]\n-  \"ix86_split_<shiftrt_insn> (operands, operands[3], <DWI>mode); DONE;\")\n+  \"ix86_split_<shift_insn> (operands, operands[3], <DWI>mode); DONE;\")\n \n (define_insn \"x86_64_shrd\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"+r*m\")\n@@ -9755,16 +9756,16 @@\n   DONE;\n })\n \n-(define_insn \"*bmi2_<shiftrt_insn><mode>3_1\"\n+(define_insn \"*bmi2_<shift_insn><mode>3_1\"\n   [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n \t(any_shiftrt:SWI48 (match_operand:SWI48 1 \"nonimmediate_operand\" \"rm\")\n \t\t\t   (match_operand:SWI48 2 \"register_operand\" \"r\")))]\n   \"TARGET_BMI2\"\n-  \"<shiftrt>x\\t{%2, %1, %0|%0, %1, %2}\"\n+  \"<shift>x\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"ishiftx\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"*<shiftrt_insn><mode>3_1\"\n+(define_insn \"*<shift_insn><mode>3_1\"\n   [(set (match_operand:SWI48 0 \"nonimmediate_operand\" \"=rm,r\")\n \t(any_shiftrt:SWI48\n \t  (match_operand:SWI48 1 \"nonimmediate_operand\" \"0,rm\")\n@@ -9780,9 +9781,9 @@\n     default:\n       if (operands[2] == const1_rtx\n \t  && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun)))\n-\treturn \"<shiftrt>{<imodesuffix>}\\t%0\";\n+\treturn \"<shift>{<imodesuffix>}\\t%0\";\n       else\n-\treturn \"<shiftrt>{<imodesuffix>}\\t{%2, %0|%0, %2}\";\n+\treturn \"<shift>{<imodesuffix>}\\t{%2, %0|%0, %2}\";\n     }\n }\n   [(set_attr \"isa\" \"*,bmi2\")\n@@ -9807,17 +9808,17 @@\n \t(any_shiftrt:SWI48 (match_dup 1) (match_dup 2)))]\n   \"operands[2] = gen_lowpart (<MODE>mode, operands[2]);\")\n \n-(define_insn \"*bmi2_<shiftrt_insn>si3_1_zext\"\n+(define_insn \"*bmi2_<shift_insn>si3_1_zext\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(zero_extend:DI\n \t  (any_shiftrt:SI (match_operand:SI 1 \"nonimmediate_operand\" \"rm\")\n \t\t\t  (match_operand:SI 2 \"register_operand\" \"r\"))))]\n   \"TARGET_64BIT && TARGET_BMI2\"\n-  \"<shiftrt>x\\t{%2, %1, %k0|%k0, %1, %2}\"\n+  \"<shift>x\\t{%2, %1, %k0|%k0, %1, %2}\"\n   [(set_attr \"type\" \"ishiftx\")\n    (set_attr \"mode\" \"SI\")])\n \n-(define_insn \"*<shiftrt_insn>si3_1_zext\"\n+(define_insn \"*<shift_insn>si3_1_zext\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n \t(zero_extend:DI\n \t  (any_shiftrt:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0,rm\")\n@@ -9833,9 +9834,9 @@\n     default:\n       if (operands[2] == const1_rtx\n \t  && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun)))\n-\treturn \"<shiftrt>{l}\\t%k0\";\n+\treturn \"<shift>{l}\\t%k0\";\n       else\n-\treturn \"<shiftrt>{l}\\t{%2, %k0|%k0, %2}\";\n+\treturn \"<shift>{l}\\t{%2, %k0|%k0, %2}\";\n     }\n }\n   [(set_attr \"isa\" \"*,bmi2\")\n@@ -9861,7 +9862,7 @@\n \t(zero_extend:DI (any_shiftrt:SI (match_dup 1) (match_dup 2))))]\n   \"operands[2] = gen_lowpart (SImode, operands[2]);\")\n \n-(define_insn \"*<shiftrt_insn><mode>3_1\"\n+(define_insn \"*<shift_insn><mode>3_1\"\n   [(set (match_operand:SWI12 0 \"nonimmediate_operand\" \"=<r>m\")\n \t(any_shiftrt:SWI12\n \t  (match_operand:SWI12 1 \"nonimmediate_operand\" \"0\")\n@@ -9871,9 +9872,9 @@\n {\n   if (operands[2] == const1_rtx\n       && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun)))\n-    return \"<shiftrt>{<imodesuffix>}\\t%0\";\n+    return \"<shift>{<imodesuffix>}\\t%0\";\n   else\n-    return \"<shiftrt>{<imodesuffix>}\\t{%2, %0|%0, %2}\";\n+    return \"<shift>{<imodesuffix>}\\t{%2, %0|%0, %2}\";\n }\n   [(set_attr \"type\" \"ishift\")\n    (set (attr \"length_immediate\")\n@@ -9885,7 +9886,7 @@\n        (const_string \"*\")))\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"*<shiftrt_insn>qi3_1_slp\"\n+(define_insn \"*<shift_insn>qi3_1_slp\"\n   [(set (strict_low_part (match_operand:QI 0 \"nonimmediate_operand\" \"+qm\"))\n \t(any_shiftrt:QI (match_dup 0)\n \t\t\t(match_operand:QI 1 \"nonmemory_operand\" \"cI\")))\n@@ -9897,9 +9898,9 @@\n {\n   if (operands[1] == const1_rtx\n       && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun)))\n-    return \"<shiftrt>{b}\\t%0\";\n+    return \"<shift>{b}\\t%0\";\n   else\n-    return \"<shiftrt>{b}\\t{%1, %0|%0, %1}\";\n+    return \"<shift>{b}\\t{%1, %0|%0, %1}\";\n }\n   [(set_attr \"type\" \"ishift1\")\n    (set (attr \"length_immediate\")\n@@ -9914,7 +9915,7 @@\n ;; This pattern can't accept a variable shift count, since shifts by\n ;; zero don't affect the flags.  We assume that shifts by constant\n ;; zero are optimized away.\n-(define_insn \"*<shiftrt_insn><mode>3_cmp\"\n+(define_insn \"*<shift_insn><mode>3_cmp\"\n   [(set (reg FLAGS_REG)\n \t(compare\n \t  (any_shiftrt:SWI\n@@ -9932,9 +9933,9 @@\n {\n   if (operands[2] == const1_rtx\n       && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun)))\n-    return \"<shiftrt>{<imodesuffix>}\\t%0\";\n+    return \"<shift>{<imodesuffix>}\\t%0\";\n   else\n-    return \"<shiftrt>{<imodesuffix>}\\t{%2, %0|%0, %2}\";\n+    return \"<shift>{<imodesuffix>}\\t{%2, %0|%0, %2}\";\n }\n   [(set_attr \"type\" \"ishift\")\n    (set (attr \"length_immediate\")\n@@ -9946,7 +9947,7 @@\n        (const_string \"*\")))\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"*<shiftrt_insn>si3_cmp_zext\"\n+(define_insn \"*<shift_insn>si3_cmp_zext\"\n   [(set (reg FLAGS_REG)\n \t(compare\n \t  (any_shiftrt:SI (match_operand:SI 1 \"register_operand\" \"0\")\n@@ -9964,9 +9965,9 @@\n {\n   if (operands[2] == const1_rtx\n       && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun)))\n-    return \"<shiftrt>{l}\\t%k0\";\n+    return \"<shift>{l}\\t%k0\";\n   else\n-    return \"<shiftrt>{l}\\t{%2, %k0|%k0, %2}\";\n+    return \"<shift>{l}\\t{%2, %k0|%k0, %2}\";\n }\n   [(set_attr \"type\" \"ishift\")\n    (set (attr \"length_immediate\")\n@@ -9978,7 +9979,7 @@\n        (const_string \"*\")))\n    (set_attr \"mode\" \"SI\")])\n \n-(define_insn \"*<shiftrt_insn><mode>3_cconly\"\n+(define_insn \"*<shift_insn><mode>3_cconly\"\n   [(set (reg FLAGS_REG)\n \t(compare\n \t  (any_shiftrt:SWI\n@@ -9994,9 +9995,9 @@\n {\n   if (operands[2] == const1_rtx\n       && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun)))\n-    return \"<shiftrt>{<imodesuffix>}\\t%0\";\n+    return \"<shift>{<imodesuffix>}\\t%0\";\n   else\n-    return \"<shiftrt>{<imodesuffix>}\\t{%2, %0|%0, %2}\";\n+    return \"<shift>{<imodesuffix>}\\t{%2, %0|%0, %2}\";\n }\n   [(set_attr \"type\" \"ishift\")\n    (set (attr \"length_immediate\")"}, {"sha": "697002a244fa0304f52b6adcfda993e9b1a8a500", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 21, "deletions": 24, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4ab64c640c78b4800b9b1917835c9b58ce16027/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4ab64c640c78b4800b9b1917835c9b58ce16027/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=c4ab64c640c78b4800b9b1917835c9b58ce16027", "patch": "@@ -168,13 +168,7 @@\n    (V2DI \"vec\") (V4DI \"avx2\")])\n \n ;; Mapping of logic-shift operators\n-(define_code_iterator lshift [lshiftrt ashift])\n-\n-;; Base name for define_insn\n-(define_code_attr lshift_insn [(lshiftrt \"srl\") (ashift \"sll\")])\n-\n-;; Base name for insn mnemonic\n-(define_code_attr lshift [(lshiftrt \"lshr\") (ashift \"lshl\")])\n+(define_code_iterator any_lshift [ashift lshiftrt])\n \n (define_mode_attr ssedoublemode\n   [(V16HI \"V16SI\") (V8HI \"V8SI\")])\n@@ -11270,9 +11264,10 @@\n \n ;; XOP packed shift instructions.\n (define_expand \"vlshr<mode>3\"\n-  [(match_operand:VI12_128 0 \"register_operand\" \"\")\n-   (match_operand:VI12_128 1 \"register_operand\" \"\")\n-   (match_operand:VI12_128 2 \"nonimmediate_operand\" \"\")]\n+  [(set (match_operand:VI12_128 0 \"register_operand\" \"\")\n+\t(lshiftrt:VI12_128\n+\t  (match_operand:VI12_128 1 \"register_operand\" \"\")\n+\t  (match_operand:VI12_128 2 \"nonimmediate_operand\" \"\")))]\n   \"TARGET_XOP\"\n {\n   rtx neg = gen_reg_rtx (<MODE>mode);\n@@ -11305,9 +11300,10 @@\n   \"TARGET_AVX2\")\n \n (define_expand \"vashr<mode>3\"\n-  [(match_operand:VI128_128 0 \"register_operand\" \"\")\n-   (match_operand:VI128_128 1 \"register_operand\" \"\")\n-   (match_operand:VI128_128 2 \"nonimmediate_operand\" \"\")]\n+  [(set (match_operand:VI128_128 0 \"register_operand\" \"\")\n+\t(ashiftrt:VI128_128\n+\t  (match_operand:VI128_128 1 \"register_operand\" \"\")\n+\t  (match_operand:VI128_128 2 \"nonimmediate_operand\" \"\")))]\n   \"TARGET_XOP\"\n {\n   rtx neg = gen_reg_rtx (<MODE>mode);\n@@ -11338,9 +11334,10 @@\n   \"TARGET_AVX2\")\n \n (define_expand \"vashl<mode>3\"\n-  [(match_operand:VI12_128 0 \"register_operand\" \"\")\n-   (match_operand:VI12_128 1 \"register_operand\" \"\")\n-   (match_operand:VI12_128 2 \"register_operand\" \"\")]\n+  [(set (match_operand:VI12_128 0 \"register_operand\" \"\")\n+\t(ashift:VI12_128\n+\t  (match_operand:VI12_128 1 \"register_operand\" \"\")\n+\t  (match_operand:VI12_128 2 \"nonimmediate_operand\" \"\")))]\n   \"TARGET_XOP\"\n {\n   emit_insn (gen_xop_ashl<mode>3 (operands[0], operands[1], operands[2]));\n@@ -12472,22 +12469,22 @@\n \n (define_insn \"avx2_ashrv<mode>\"\n   [(set (match_operand:VI4_AVX2 0 \"register_operand\" \"=x\")\n-\t(ashiftrt:VI4_AVX2 (match_operand:VI4_AVX2 1 \"register_operand\" \"x\")\n-\t\t\t   (match_operand:VI4_AVX2 2 \"nonimmediate_operand\"\n-\t\t\t\t\t\t     \"xm\")))]\n+\t(ashiftrt:VI4_AVX2\n+\t  (match_operand:VI4_AVX2 1 \"register_operand\" \"x\")\n+\t  (match_operand:VI4_AVX2 2 \"nonimmediate_operand\" \"xm\")))]\n   \"TARGET_AVX2\"\n   \"vpsravd\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"sseishft\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n-(define_insn \"avx2_<lshift>v<mode>\"\n+(define_insn \"avx2_<shift_insn>v<mode>\"\n   [(set (match_operand:VI48_AVX2 0 \"register_operand\" \"=x\")\n-\t(lshift:VI48_AVX2 (match_operand:VI48_AVX2 1 \"register_operand\" \"x\")\n-\t\t\t  (match_operand:VI48_AVX2 2 \"nonimmediate_operand\"\n-\t\t\t\t\t\t     \"xm\")))]\n+\t(any_lshift:VI48_AVX2\n+\t  (match_operand:VI48_AVX2 1 \"register_operand\" \"x\")\n+\t  (match_operand:VI48_AVX2 2 \"nonimmediate_operand\" \"xm\")))]\n   \"TARGET_AVX2\"\n-  \"vp<lshift_insn>v<ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n+  \"vp<shift>v<ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"sseishft\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])"}]}