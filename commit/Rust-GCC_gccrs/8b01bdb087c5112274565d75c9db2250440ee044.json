{"sha": "8b01bdb087c5112274565d75c9db2250440ee044", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGIwMWJkYjA4N2M1MTEyMjc0NTY1ZDc1YzlkYjIyNTA0NDBlZTA0NA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2011-11-10T19:34:57Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2011-11-10T19:34:57Z"}, "message": "configure.ac (GCC_AS_CFI_PSEUDO_OP): Use it instead of inline check.\n\n        * configure.ac (GCC_AS_CFI_PSEUDO_OP): Use it instead of inline check.\n        * configure, aclocal.m4: Rebuild.\n\nFrom-SVN: r181266", "tree": {"sha": "0eb400233d39321811e788f4e3be6962f8504fff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0eb400233d39321811e788f4e3be6962f8504fff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b01bdb087c5112274565d75c9db2250440ee044", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b01bdb087c5112274565d75c9db2250440ee044", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b01bdb087c5112274565d75c9db2250440ee044", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b01bdb087c5112274565d75c9db2250440ee044/comments", "author": null, "committer": null, "parents": [{"sha": "1ce1b79265fe104815b98c38ffd3de25a7a5ac3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ce1b79265fe104815b98c38ffd3de25a7a5ac3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ce1b79265fe104815b98c38ffd3de25a7a5ac3d"}], "stats": {"total": 35, "additions": 16, "deletions": 19}, "files": [{"sha": "2c34801a354e519cb6e4fd66d763808d038ab80c", "filename": "libffi/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b01bdb087c5112274565d75c9db2250440ee044/libffi%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b01bdb087c5112274565d75c9db2250440ee044/libffi%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2FChangeLog?ref=8b01bdb087c5112274565d75c9db2250440ee044", "patch": "@@ -1,3 +1,8 @@\n+2011-11-10  Richard Henderson  <rth@redhat.com>\n+\n+\t* configure.ac (GCC_AS_CFI_PSEUDO_OP): Use it instead of inline check.\n+\t* configure, aclocal.m4: Rebuild.\n+\n 2011-09-04  Iain Sandoe  <iains@gcc.gnu.org>\n \n \tPR libffi/49594"}, {"sha": "9d6a6694fd245815ea6c74037f81d5e47ac74739", "filename": "libffi/aclocal.m4", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b01bdb087c5112274565d75c9db2250440ee044/libffi%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b01bdb087c5112274565d75c9db2250440ee044/libffi%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Faclocal.m4?ref=8b01bdb087c5112274565d75c9db2250440ee044", "patch": "@@ -1025,6 +1025,7 @@ AC_SUBST([am__tar])\n AC_SUBST([am__untar])\n ]) # _AM_PROG_TAR\n \n+m4_include([../config/asmcfi.m4])\n m4_include([../config/depstand.m4])\n m4_include([../config/lead-dot.m4])\n m4_include([../config/multi.m4])"}, {"sha": "57ccc55f4adbdd704cf2f75169af3dc2d0e604b4", "filename": "libffi/configure", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b01bdb087c5112274565d75c9db2250440ee044/libffi%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b01bdb087c5112274565d75c9db2250440ee044/libffi%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fconfigure?ref=8b01bdb087c5112274565d75c9db2250440ee044", "patch": "@@ -12282,11 +12282,11 @@ $as_echo \"#define AC_APPLE_UNIVERSAL_BUILD 1\" >>confdefs.h\n \n { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler .cfi pseudo-op support\" >&5\n $as_echo_n \"checking assembler .cfi pseudo-op support... \" >&6; }\n-if test \"${libffi_cv_as_cfi_pseudo_op+set}\" = set; then :\n+if test \"${gcc_cv_as_cfi_pseudo_op+set}\" = set; then :\n   $as_echo_n \"(cached) \" >&6\n else\n \n-    libffi_cv_as_cfi_pseudo_op=unknown\n+    gcc_cv_as_cfi_pseudo_op=unknown\n     cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n /* end confdefs.h.  */\n asm (\".cfi_startproc\\n\\t.cfi_endproc\");\n@@ -12299,20 +12299,21 @@ main ()\n }\n _ACEOF\n if ac_fn_c_try_compile \"$LINENO\"; then :\n-  libffi_cv_as_cfi_pseudo_op=yes\n+  gcc_cv_as_cfi_pseudo_op=yes\n else\n-  libffi_cv_as_cfi_pseudo_op=no\n+  gcc_cv_as_cfi_pseudo_op=no\n fi\n rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n \n fi\n-{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $libffi_cv_as_cfi_pseudo_op\" >&5\n-$as_echo \"$libffi_cv_as_cfi_pseudo_op\" >&6; }\n-if test \"x$libffi_cv_as_cfi_pseudo_op\" = xyes; then\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_as_cfi_pseudo_op\" >&5\n+$as_echo \"$gcc_cv_as_cfi_pseudo_op\" >&6; }\n+ if test \"x$gcc_cv_as_cfi_pseudo_op\" = xyes; then\n \n $as_echo \"#define HAVE_AS_CFI_PSEUDO_OP 1\" >>confdefs.h\n \n-fi\n+ fi\n+\n \n if test x$TARGET = xSPARC; then\n     { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler and linker support unaligned pc related relocs\" >&5"}, {"sha": "2c673354ff274f30290237fba87bee6731151138", "filename": "libffi/configure.ac", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b01bdb087c5112274565d75c9db2250440ee044/libffi%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b01bdb087c5112274565d75c9db2250440ee044/libffi%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fconfigure.ac?ref=8b01bdb087c5112274565d75c9db2250440ee044", "patch": "@@ -228,17 +228,7 @@ AC_SUBST(HAVE_LONG_DOUBLE)\n \n AC_C_BIGENDIAN\n \n-AC_CACHE_CHECK([assembler .cfi pseudo-op support],\n-    libffi_cv_as_cfi_pseudo_op, [\n-    libffi_cv_as_cfi_pseudo_op=unknown\n-    AC_TRY_COMPILE([asm (\".cfi_startproc\\n\\t.cfi_endproc\");],,\n-\t\t   [libffi_cv_as_cfi_pseudo_op=yes],\n-\t\t   [libffi_cv_as_cfi_pseudo_op=no])\n-])\n-if test \"x$libffi_cv_as_cfi_pseudo_op\" = xyes; then\n-    AC_DEFINE(HAVE_AS_CFI_PSEUDO_OP, 1,\n-\t      [Define if your assembler supports .cfi_* directives.])\n-fi\n+GCC_AS_CFI_PSEUDO_OP\n \n if test x$TARGET = xSPARC; then\n     AC_CACHE_CHECK([assembler and linker support unaligned pc related relocs],"}]}