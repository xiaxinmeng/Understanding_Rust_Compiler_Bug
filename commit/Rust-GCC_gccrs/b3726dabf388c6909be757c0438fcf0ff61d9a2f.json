{"sha": "b3726dabf388c6909be757c0438fcf0ff61d9a2f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjM3MjZkYWJmMzg4YzY5MDliZTc1N2MwNDM4ZmNmMGZmNjFkOWEyZg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2007-04-06T14:52:27Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-04-06T14:52:27Z"}, "message": "type_traits.h (__numeric_traits): Move...\n\n2007-04-06  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/ext/type_traits.h (__numeric_traits): Move...\n\t* include/ext/numeric_traits.h: ... here.\n\t* include/Makefile.am: Add.\n\t* include/ext/pb_ds/detail/type_utils.hpp: Include \n\t<ext/numeric_traits.h> too.\n\t* include/tr1/random: Likewise.\n\t* testsuite/ext/type_traits/numeric_traits.cc: Move...\n\t* testsuite/ext/numeric_traits/numeric_traits.cc: ... here.\n\t* include/Makefile.in: Regenerate.\n\nFrom-SVN: r123618", "tree": {"sha": "c047f78a7f3057b7ae9f852f3d522a99b1f9a1f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c047f78a7f3057b7ae9f852f3d522a99b1f9a1f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b3726dabf388c6909be757c0438fcf0ff61d9a2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3726dabf388c6909be757c0438fcf0ff61d9a2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3726dabf388c6909be757c0438fcf0ff61d9a2f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3726dabf388c6909be757c0438fcf0ff61d9a2f/comments", "author": null, "committer": null, "parents": [{"sha": "8669fed1d7c2b534694dfd00ba7eea088739ca6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8669fed1d7c2b534694dfd00ba7eea088739ca6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8669fed1d7c2b534694dfd00ba7eea088739ca6a"}], "stats": {"total": 169, "additions": 116, "deletions": 53}, "files": [{"sha": "63e408c01700f5c25607d5338ac38983479ff2b0", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3726dabf388c6909be757c0438fcf0ff61d9a2f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3726dabf388c6909be757c0438fcf0ff61d9a2f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b3726dabf388c6909be757c0438fcf0ff61d9a2f", "patch": "@@ -1,3 +1,15 @@\n+2007-04-06  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/ext/type_traits.h (__numeric_traits): Move...\n+\t* include/ext/numeric_traits.h: ... here.\n+\t* include/Makefile.am: Add.\n+\t* include/ext/pb_ds/detail/type_utils.hpp: Include \n+\t<ext/numeric_traits.h> too.\n+\t* include/tr1/random: Likewise.\n+\t* testsuite/ext/type_traits/numeric_traits.cc: Move...\n+\t* testsuite/ext/numeric_traits/numeric_traits.cc: ... here.\n+\t* include/Makefile.in: Regenerate.\n+\n 2007-04-04  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/valarray_array.h (__valarray_default_construct(_Tp*,"}, {"sha": "2cb8930639287ba6fc93d9823e10895f5af504c3", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3726dabf388c6909be757c0438fcf0ff61d9a2f/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3726dabf388c6909be757c0438fcf0ff61d9a2f/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=b3726dabf388c6909be757c0438fcf0ff61d9a2f", "patch": "@@ -512,6 +512,7 @@ ext_headers = \\\n \t${ext_srcdir}/mt_allocator.h \\\n \t${ext_srcdir}/new_allocator.h \\\n \t${ext_srcdir}/numeric \\\n+\t${ext_srcdir}/numeric_traits.h \\\n \t${ext_srcdir}/pod_char_traits.h \\\n \t${ext_srcdir}/pool_allocator.h \\\n \t${ext_srcdir}/rb_tree \\"}, {"sha": "3681d1e78acff954bacff93a26ca0649dca1616b", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3726dabf388c6909be757c0438fcf0ff61d9a2f/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3726dabf388c6909be757c0438fcf0ff61d9a2f/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=b3726dabf388c6909be757c0438fcf0ff61d9a2f", "patch": "@@ -743,6 +743,7 @@ ext_headers = \\\n \t${ext_srcdir}/mt_allocator.h \\\n \t${ext_srcdir}/new_allocator.h \\\n \t${ext_srcdir}/numeric \\\n+\t${ext_srcdir}/numeric_traits.h \\\n \t${ext_srcdir}/pod_char_traits.h \\\n \t${ext_srcdir}/pool_allocator.h \\\n \t${ext_srcdir}/rb_tree \\"}, {"sha": "cff5b7066d6f5731bf1634c00b45da5545a152d7", "filename": "libstdc++-v3/include/ext/numeric_traits.h", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3726dabf388c6909be757c0438fcf0ff61d9a2f/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnumeric_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3726dabf388c6909be757c0438fcf0ff61d9a2f/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnumeric_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnumeric_traits.h?ref=b3726dabf388c6909be757c0438fcf0ff61d9a2f", "patch": "@@ -0,0 +1,98 @@\n+// -*- C++ -*-\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the terms\n+// of the GNU General Public License as published by the Free Software\n+// Foundation; either version 2, or (at your option) any later\n+// version.\n+\n+// This library is distributed in the hope that it will be useful, but\n+// WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free\n+// software library without restriction.  Specifically, if other files\n+// instantiate templates or use macros or inline functions from this\n+// file, or you compile this file and link it with other files to\n+// produce an executable, this file does not by itself cause the\n+// resulting executable to be covered by the GNU General Public\n+// License.  This exception does not however invalidate any other\n+// reasons why the executable file might be covered by the GNU General\n+// Public License.\n+\n+/** @file ext/numeric_traits.h\n+ *  This file is a GNU extension to the Standard C++ Library.\n+ */\n+\n+#ifndef _EXT_NUMERIC_TRAITS\n+#define _EXT_NUMERIC_TRAITS 1\n+\n+#pragma GCC system_header\n+\n+#include <limits>\n+#include <bits/cpp_type_traits.h>\n+#include <ext/type_traits.h>\n+\n+_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+\n+  // Compile time constants for builtin types.\n+  // Sadly std::numeric_limits member functions cannot be used for this.\n+#define __glibcxx_signed(_Tp) ((_Tp)(-1) < 0)\n+#define __glibcxx_digits(_Tp) \\\n+  (sizeof(_Tp) * __CHAR_BIT__ - __glibcxx_signed(_Tp))\n+\n+#define __glibcxx_min(_Tp) \\\n+  (__glibcxx_signed(_Tp) ? (_Tp)1 << __glibcxx_digits(_Tp) : (_Tp)0)\n+\n+#define __glibcxx_max(_Tp) \\\n+  (__glibcxx_signed(_Tp) ? \\\n+   (((((_Tp)1 << (__glibcxx_digits(_Tp) - 1)) - 1) << 1) + 1) : ~(_Tp)0)\n+\n+  template<typename _Value>\n+    struct __numeric_traits_integer\n+    {\n+      // Only integers for initialization of member constant.\n+      static const _Value __min = __glibcxx_min(_Value);\n+      static const _Value __max = __glibcxx_max(_Value);\n+    };\n+\n+  template<typename _Value>\n+    const _Value __numeric_traits_integer<_Value>::__min;\n+\n+  template<typename _Value>\n+    const _Value __numeric_traits_integer<_Value>::__max;\n+\n+  template<typename _Value>\n+    struct __numeric_traits_floating\n+    {\n+      // Only floating point types. See N1822. \n+      static const int __max_digits10 =\n+\t2 + std::numeric_limits<_Value>::digits * 3010/10000;\n+    };\n+\n+  template<typename _Value>\n+    const int __numeric_traits_floating<_Value>::__max_digits10;\n+\n+  template<typename _Value>\n+    struct __numeric_traits\n+    : public __conditional_type<std::__is_integer<_Value>::__value,\n+\t\t\t\t__numeric_traits_integer<_Value>,\n+\t\t\t\t__numeric_traits_floating<_Value> >::__type\n+    { };\n+\n+_GLIBCXX_END_NAMESPACE\n+\n+#undef __glibcxx_signed\n+#undef __glibcxx_min\n+#undef __glibcxx_max\n+#undef __glibcxx_digits\n+\n+#endif "}, {"sha": "197b17efb6bd99f1539231abfc28f0bb7adb3bbf", "filename": "libstdc++-v3/include/ext/pb_ds/detail/type_utils.hpp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3726dabf388c6909be757c0438fcf0ff61d9a2f/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftype_utils.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3726dabf388c6909be757c0438fcf0ff61d9a2f/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftype_utils.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftype_utils.hpp?ref=b3726dabf388c6909be757c0438fcf0ff61d9a2f", "patch": "@@ -52,6 +52,7 @@\n #include <utility>\n #include <tr1/type_traits>\n #include <ext/type_traits.h>\n+#include <ext/numeric_traits.h>\n \n namespace pb_ds\n {"}, {"sha": "310d8342d60add4873627f3c2681d4217c15b02f", "filename": "libstdc++-v3/include/ext/type_traits.h", "status": "modified", "additions": 1, "deletions": 52, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3726dabf388c6909be757c0438fcf0ff61d9a2f/libstdc%2B%2B-v3%2Finclude%2Fext%2Ftype_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3726dabf388c6909be757c0438fcf0ff61d9a2f/libstdc%2B%2B-v3%2Finclude%2Fext%2Ftype_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Ftype_traits.h?ref=b3726dabf388c6909be757c0438fcf0ff61d9a2f", "patch": "@@ -37,7 +37,7 @@\n \n #pragma GCC system_header\n \n-#include <limits>\n+#include <bits/c++config.h>\n #include <bits/cpp_type_traits.h>\n \n _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n@@ -147,57 +147,6 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n   template<>\n     struct __remove_unsigned<wchar_t>;\n \n-\n-  // Compile time constants for builtin types.\n-  // Sadly std::numeric_limits member functions cannot be used for this.\n-#define __glibcxx_signed(_Tp) ((_Tp)(-1) < 0)\n-#define __glibcxx_digits(_Tp) \\\n-  (sizeof(_Tp) * __CHAR_BIT__ - __glibcxx_signed(_Tp))\n-\n-#define __glibcxx_min(_Tp) \\\n-  (__glibcxx_signed(_Tp) ? (_Tp)1 << __glibcxx_digits(_Tp) : (_Tp)0)\n-\n-#define __glibcxx_max(_Tp) \\\n-  (__glibcxx_signed(_Tp) ? \\\n-   (((((_Tp)1 << (__glibcxx_digits(_Tp) - 1)) - 1) << 1) + 1) : ~(_Tp)0)\n-\n-  template<typename _Value>\n-    struct __numeric_traits_integer\n-    {\n-      // Only integers for initialization of member constant.\n-      static const _Value __min = __glibcxx_min(_Value);\n-      static const _Value __max = __glibcxx_max(_Value);\n-    };\n-\n-  template<typename _Value>\n-    const _Value __numeric_traits_integer<_Value>::__min;\n-\n-  template<typename _Value>\n-    const _Value __numeric_traits_integer<_Value>::__max;\n-\n-  template<typename _Value>\n-    struct __numeric_traits_floating\n-    {\n-      // Only floating point types. See N1822. \n-      static const int __max_digits10 =\n-\t2 + std::numeric_limits<_Value>::digits * 3010/10000;\n-    };\n-\n-  template<typename _Value>\n-    const int __numeric_traits_floating<_Value>::__max_digits10;\n-\n-  template<typename _Value>\n-    struct __numeric_traits \n-    : public __conditional_type<std::__is_integer<_Value>::__value,\n-\t\t\t\t__numeric_traits_integer<_Value>,\n-\t\t\t\t__numeric_traits_floating<_Value> >::__type\n-    { };\n-\n _GLIBCXX_END_NAMESPACE\n \n-#undef __glibcxx_signed\n-#undef __glibcxx_min\n-#undef __glibcxx_max\n-#undef __glibcxx_digits\n-\n #endif "}, {"sha": "10337437fede78fa948e06bd88d6da789f3a484a", "filename": "libstdc++-v3/include/tr1/random", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3726dabf388c6909be757c0438fcf0ff61d9a2f/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3726dabf388c6909be757c0438fcf0ff61d9a2f/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom?ref=b3726dabf388c6909be757c0438fcf0ff61d9a2f", "patch": "@@ -44,6 +44,7 @@\n #include <tr1/type_traits>\n #include <tr1/cmath>\n #include <ext/type_traits.h>\n+#include <ext/numeric_traits.h>\n #include <bits/concept_check.h>\n #include <debug/debug.h>\n "}, {"sha": "9e00510fff18ab06d7c7f35225c96076e8a567c7", "filename": "libstdc++-v3/testsuite/ext/numeric_traits/numeric_traits.cc", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3726dabf388c6909be757c0438fcf0ff61d9a2f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fnumeric_traits%2Fnumeric_traits.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3726dabf388c6909be757c0438fcf0ff61d9a2f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fnumeric_traits%2Fnumeric_traits.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fnumeric_traits%2Fnumeric_traits.cc?ref=b3726dabf388c6909be757c0438fcf0ff61d9a2f", "patch": "@@ -20,7 +20,7 @@\n // Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n // USA.\n \n-#include <ext/type_traits.h>\n+#include <ext/numeric_traits.h>\n \n using __gnu_cxx::__numeric_traits;\n template struct __numeric_traits<short>;", "previous_filename": "libstdc++-v3/testsuite/ext/type_traits/numeric_traits.cc"}]}