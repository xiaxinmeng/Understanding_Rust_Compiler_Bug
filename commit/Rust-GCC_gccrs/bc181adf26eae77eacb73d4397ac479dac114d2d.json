{"sha": "bc181adf26eae77eacb73d4397ac479dac114d2d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmMxODFhZGYyNmVhZTc3ZWFjYjczZDQzOTdhYzQ3OWRhYzExNGQyZA==", "commit": {"author": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-07-30T14:30:19Z"}, "committer": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-08-06T10:04:27Z"}, "message": "aarch64: Use memcpy to copy structures in bfloat vst* intrinsics\n\nUse __builtin_memcpy to copy vector structures instead of using a\nunion - or constructing a new opaque structure one vector at a time -\nin each of the vst[234][q] and vst1[q]_x[234] bfloat Neon intrinsics\nin arm_neon.h.\n\nAdd new code generation tests to verify that superfluous move\ninstructions are not generated for the vst[234]q or vst1q_x[234]\nbfloat intrinsics.\n\ngcc/ChangeLog:\n\n2021-07-30  Jonathan Wright  <jonathan.wright@arm.com>\n\n\t* config/aarch64/arm_neon.h (vst1_bf16_x2): Use\n\t__builtin_memcpy instead of constructing an additional\n\t__builtin_aarch64_simd_oi one vector at a time.\n\t(vst1q_bf16_x2): Likewise.\n\t(vst1_bf16_x3): Use __builtin_memcpy instead of constructing\n\tan additional __builtin_aarch64_simd_ci one vector at a time.\n\t(vst1q_bf16_x3): Likewise.\n\t(vst1_bf16_x4): Use __builtin_memcpy instead of a union.\n\t(vst1q_bf16_x4): Likewise.\n\t(vst2_bf16): Use __builtin_memcpy instead of constructing an\n\tadditional __builtin_aarch64_simd_oi one vector at a time.\n\t(vst2q_bf16): Likewise.\n\t(vst3_bf16): Use __builtin_memcpy instead of constructing an\n\tadditional __builtin_aarch64_simd_ci mode one vector at a\n\ttime.\n\t(vst3q_bf16): Likewise.\n\t(vst4_bf16): Use __builtin_memcpy instead of constructing an\n\tadditional __builtin_aarch64_simd_xi one vector at a time.\n\t(vst4q_bf16): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/aarch64/vector_structure_intrinsics.c: Add new\n\ttests.", "tree": {"sha": "5abd91910b79365b86a81c369d5e312bfd962285", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5abd91910b79365b86a81c369d5e312bfd962285"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bc181adf26eae77eacb73d4397ac479dac114d2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc181adf26eae77eacb73d4397ac479dac114d2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc181adf26eae77eacb73d4397ac479dac114d2d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc181adf26eae77eacb73d4397ac479dac114d2d/comments", "author": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1deb0818f4bca408994f666c1bd43289753507f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1deb0818f4bca408994f666c1bd43289753507f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1deb0818f4bca408994f666c1bd43289753507f5"}], "stats": {"total": 71, "additions": 33, "deletions": 38}, "files": [{"sha": "390cf9a774381365017895951b0209b7e64ce78b", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 23, "deletions": 34, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc181adf26eae77eacb73d4397ac479dac114d2d/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc181adf26eae77eacb73d4397ac479dac114d2d/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=bc181adf26eae77eacb73d4397ac479dac114d2d", "patch": "@@ -33839,8 +33839,7 @@ vst1_bf16_x2 (bfloat16_t * __a, bfloat16x4x2_t __val)\n   bfloat16x8x2_t __temp;\n   __temp.val[0] = vcombine_bf16 (__val.val[0], vcreate_bf16 (__AARCH64_UINT64_C (0)));\n   __temp.val[1] = vcombine_bf16 (__val.val[1], vcreate_bf16 (__AARCH64_UINT64_C (0)));\n-  __o = __builtin_aarch64_set_qregoiv8bf (__o, __temp.val[0], 0);\n-  __o = __builtin_aarch64_set_qregoiv8bf (__o, __temp.val[1], 1);\n+  __builtin_memcpy (&__o, &__temp, sizeof (__temp));\n   __builtin_aarch64_st1x2v4bf (__a, __o);\n }\n \n@@ -33849,8 +33848,7 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vst1q_bf16_x2 (bfloat16_t * __a, bfloat16x8x2_t __val)\n {\n   __builtin_aarch64_simd_oi __o;\n-  __o = __builtin_aarch64_set_qregoiv8bf (__o, __val.val[0], 0);\n-  __o = __builtin_aarch64_set_qregoiv8bf (__o, __val.val[1], 1);\n+  __builtin_memcpy (&__o, &__val, sizeof (__val));\n   __builtin_aarch64_st1x2v8bf (__a, __o);\n }\n \n@@ -33863,9 +33861,7 @@ vst1_bf16_x3 (bfloat16_t * __a, bfloat16x4x3_t __val)\n   __temp.val[0] = vcombine_bf16 (__val.val[0], vcreate_bf16 (__AARCH64_UINT64_C (0)));\n   __temp.val[1] = vcombine_bf16 (__val.val[1], vcreate_bf16 (__AARCH64_UINT64_C (0)));\n   __temp.val[2] = vcombine_bf16 (__val.val[2], vcreate_bf16 (__AARCH64_UINT64_C (0)));\n-  __o = __builtin_aarch64_set_qregciv8bf (__o, (bfloat16x8_t) __temp.val[0], 0);\n-  __o = __builtin_aarch64_set_qregciv8bf (__o, (bfloat16x8_t) __temp.val[1], 1);\n-  __o = __builtin_aarch64_set_qregciv8bf (__o, (bfloat16x8_t) __temp.val[2], 2);\n+  __builtin_memcpy (&__o, &__temp, sizeof (__temp));\n   __builtin_aarch64_st1x3v4bf ((__builtin_aarch64_simd_bf *) __a, __o);\n }\n \n@@ -33874,26 +33870,31 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vst1q_bf16_x3 (bfloat16_t * __a, bfloat16x8x3_t __val)\n {\n   __builtin_aarch64_simd_ci __o;\n-  __o = __builtin_aarch64_set_qregciv8bf (__o, (bfloat16x8_t) __val.val[0], 0);\n-  __o = __builtin_aarch64_set_qregciv8bf (__o, (bfloat16x8_t) __val.val[1], 1);\n-  __o = __builtin_aarch64_set_qregciv8bf (__o, (bfloat16x8_t) __val.val[2], 2);\n+  __builtin_memcpy (&__o, &__val, sizeof (__val));\n   __builtin_aarch64_st1x3v8bf ((__builtin_aarch64_simd_bf *) __a, __o);\n }\n \n __extension__ extern __inline void\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-vst1_bf16_x4 (bfloat16_t * __a, bfloat16x4x4_t val)\n+vst1_bf16_x4 (bfloat16_t * __a, bfloat16x4x4_t __val)\n {\n-  union { bfloat16x4x4_t __i; __builtin_aarch64_simd_xi __o; } __u = { val };\n-  __builtin_aarch64_st1x4v4bf ((__builtin_aarch64_simd_bf *) __a, __u.__o);\n+  __builtin_aarch64_simd_xi __o;\n+  bfloat16x8x4_t __temp;\n+  __temp.val[0] = vcombine_bf16 (__val.val[0], vcreate_bf16 (__AARCH64_UINT64_C (0)));\n+  __temp.val[1] = vcombine_bf16 (__val.val[1], vcreate_bf16 (__AARCH64_UINT64_C (0)));\n+  __temp.val[2] = vcombine_bf16 (__val.val[2], vcreate_bf16 (__AARCH64_UINT64_C (0)));\n+  __temp.val[3] = vcombine_bf16 (__val.val[3], vcreate_bf16 (__AARCH64_UINT64_C (0)));\n+  __builtin_memcpy (&__o, &__temp, sizeof (__temp));\n+  __builtin_aarch64_st1x4v4bf ((__builtin_aarch64_simd_bf *) __a, __o);\n }\n \n __extension__ extern __inline void\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-vst1q_bf16_x4 (bfloat16_t * __a, bfloat16x8x4_t val)\n+vst1q_bf16_x4 (bfloat16_t * __a, bfloat16x8x4_t __val)\n {\n-  union { bfloat16x8x4_t __i; __builtin_aarch64_simd_xi __o; } __u = { val };\n-  __builtin_aarch64_st1x4v8bf ((__builtin_aarch64_simd_bf *) __a, __u.__o);\n+  __builtin_aarch64_simd_xi __o;\n+  __builtin_memcpy (&__o, &__val, sizeof (__val));\n+  __builtin_aarch64_st1x4v8bf ((__builtin_aarch64_simd_bf *) __a, __o);\n }\n \n __extension__ extern __inline void\n@@ -33925,8 +33926,7 @@ vst2_bf16 (bfloat16_t * __a, bfloat16x4x2_t __val)\n   bfloat16x8x2_t __temp;\n   __temp.val[0] = vcombine_bf16 (__val.val[0], vcreate_bf16 (__AARCH64_UINT64_C (0)));\n   __temp.val[1] = vcombine_bf16 (__val.val[1], vcreate_bf16 (__AARCH64_UINT64_C (0)));\n-  __o = __builtin_aarch64_set_qregoiv8bf (__o, __temp.val[0], 0);\n-  __o = __builtin_aarch64_set_qregoiv8bf (__o, __temp.val[1], 1);\n+  __builtin_memcpy (&__o, &__temp, sizeof (__temp));\n   __builtin_aarch64_st2v4bf (__a, __o);\n }\n \n@@ -33935,8 +33935,7 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vst2q_bf16 (bfloat16_t * __a, bfloat16x8x2_t __val)\n {\n   __builtin_aarch64_simd_oi __o;\n-  __o = __builtin_aarch64_set_qregoiv8bf (__o, __val.val[0], 0);\n-  __o = __builtin_aarch64_set_qregoiv8bf (__o, __val.val[1], 1);\n+  __builtin_memcpy (&__o, &__val, sizeof (__val));\n   __builtin_aarch64_st2v8bf (__a, __o);\n }\n \n@@ -33949,9 +33948,7 @@ vst3_bf16 (bfloat16_t * __a, bfloat16x4x3_t __val)\n   __temp.val[0] = vcombine_bf16 (__val.val[0], vcreate_bf16 (__AARCH64_UINT64_C (0)));\n   __temp.val[1] = vcombine_bf16 (__val.val[1], vcreate_bf16 (__AARCH64_UINT64_C (0)));\n   __temp.val[2] = vcombine_bf16 (__val.val[2], vcreate_bf16 (__AARCH64_UINT64_C (0)));\n-  __o = __builtin_aarch64_set_qregciv8bf (__o, (bfloat16x8_t) __temp.val[0], 0);\n-  __o = __builtin_aarch64_set_qregciv8bf (__o, (bfloat16x8_t) __temp.val[1], 1);\n-  __o = __builtin_aarch64_set_qregciv8bf (__o, (bfloat16x8_t) __temp.val[2], 2);\n+  __builtin_memcpy (&__o, &__temp, sizeof (__temp));\n   __builtin_aarch64_st3v4bf ((__builtin_aarch64_simd_bf *) __a, __o);\n }\n \n@@ -33960,9 +33957,7 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vst3q_bf16 (bfloat16_t * __a, bfloat16x8x3_t __val)\n {\n   __builtin_aarch64_simd_ci __o;\n-  __o = __builtin_aarch64_set_qregciv8bf (__o, (bfloat16x8_t) __val.val[0], 0);\n-  __o = __builtin_aarch64_set_qregciv8bf (__o, (bfloat16x8_t) __val.val[1], 1);\n-  __o = __builtin_aarch64_set_qregciv8bf (__o, (bfloat16x8_t) __val.val[2], 2);\n+  __builtin_memcpy (&__o, &__val, sizeof (__val));\n   __builtin_aarch64_st3v8bf ((__builtin_aarch64_simd_bf *) __a, __o);\n }\n \n@@ -33976,10 +33971,7 @@ vst4_bf16 (bfloat16_t * __a, bfloat16x4x4_t __val)\n   __temp.val[1] = vcombine_bf16 (__val.val[1], vcreate_bf16 (__AARCH64_UINT64_C (0)));\n   __temp.val[2] = vcombine_bf16 (__val.val[2], vcreate_bf16 (__AARCH64_UINT64_C (0)));\n   __temp.val[3] = vcombine_bf16 (__val.val[3], vcreate_bf16 (__AARCH64_UINT64_C (0)));\n-  __o = __builtin_aarch64_set_qregxiv8bf (__o, (bfloat16x8_t) __temp.val[0], 0);\n-  __o = __builtin_aarch64_set_qregxiv8bf (__o, (bfloat16x8_t) __temp.val[1], 1);\n-  __o = __builtin_aarch64_set_qregxiv8bf (__o, (bfloat16x8_t) __temp.val[2], 2);\n-  __o = __builtin_aarch64_set_qregxiv8bf (__o, (bfloat16x8_t) __temp.val[3], 3);\n+  __builtin_memcpy (&__o, &__temp, sizeof (__temp));\n   __builtin_aarch64_st4v4bf ((__builtin_aarch64_simd_bf *) __a, __o);\n }\n \n@@ -33988,10 +33980,7 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vst4q_bf16 (bfloat16_t * __a, bfloat16x8x4_t __val)\n {\n   __builtin_aarch64_simd_xi __o;\n-  __o = __builtin_aarch64_set_qregxiv8bf (__o, (bfloat16x8_t) __val.val[0], 0);\n-  __o = __builtin_aarch64_set_qregxiv8bf (__o, (bfloat16x8_t) __val.val[1], 1);\n-  __o = __builtin_aarch64_set_qregxiv8bf (__o, (bfloat16x8_t) __val.val[2], 2);\n-  __o = __builtin_aarch64_set_qregxiv8bf (__o, (bfloat16x8_t) __val.val[3], 3);\n+  __builtin_memcpy (&__o, &__val, sizeof (__val));\n   __builtin_aarch64_st4v8bf ((__builtin_aarch64_simd_bf *) __a, __o);\n }\n "}, {"sha": "3e7e572bf39659ecf2f17751d92a4a99a4f2bf8b", "filename": "gcc/testsuite/gcc.target/aarch64/vector_structure_intrinsics.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc181adf26eae77eacb73d4397ac479dac114d2d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvector_structure_intrinsics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc181adf26eae77eacb73d4397ac479dac114d2d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvector_structure_intrinsics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvector_structure_intrinsics.c?ref=bc181adf26eae77eacb73d4397ac479dac114d2d", "patch": "@@ -95,6 +95,7 @@ TEST_STX (vst4q, int16x8x4_t, int16_t*, s16);\n TEST_STX (vst4q, uint16x8x4_t, uint16_t*, u16);\n TEST_STX (vst4q, poly16x8x4_t, poly16_t*, p16);\n TEST_STX (vst4q, float16x8x4_t, float16_t*, f16);\n+TEST_STX (vst4q, bfloat16x8x4_t, bfloat16_t*, bf16);\n TEST_STX (vst4q, int32x4x4_t, int32_t*, s32);\n TEST_STX (vst4q, uint32x4x4_t, uint32_t*, u32);\n TEST_STX (vst4q, float32x4x4_t, float32_t*, f32);\n@@ -110,6 +111,7 @@ TEST_STX (vst2q, int16x8x2_t, int16_t*, s16);\n TEST_STX (vst2q, uint16x8x2_t, uint16_t*, u16);\n TEST_STX (vst2q, poly16x8x2_t, poly16_t*, p16);\n TEST_STX (vst2q, float16x8x2_t, float16_t*, f16);\n+TEST_STX (vst2q, bfloat16x8x2_t, bfloat16_t*, bf16);\n TEST_STX (vst2q, int32x4x2_t, int32_t*, s32);\n TEST_STX (vst2q, uint32x4x2_t, uint32_t*, u32);\n TEST_STX (vst2q, float32x4x2_t, float32_t*, f32);\n@@ -131,6 +133,7 @@ TEST_ST3 (vst3q, int16x8x3_t, int16_t*, s16);\n TEST_ST3 (vst3q, uint16x8x3_t, uint16_t*, u16);\n TEST_ST3 (vst3q, poly16x8x3_t, poly16_t*, p16);\n TEST_ST3 (vst3q, float16x8x3_t, float16_t*, f16);\n+TEST_ST3 (vst3q, bfloat16x8x3_t, bfloat16_t*, bf16);\n TEST_ST3 (vst3q, int32x4x3_t, int32_t*, s32);\n TEST_ST3 (vst3q, uint32x4x3_t, uint32_t*, u32);\n TEST_ST3 (vst3q, float32x4x3_t, float32_t*, f32);\n@@ -212,6 +215,7 @@ TEST_ST1xN (vst1q, int16x8x4_t, int16_t*, s16, x4);\n TEST_ST1xN (vst1q, uint16x8x4_t, uint16_t*, u16, x4);\n TEST_ST1xN (vst1q, poly16x8x4_t, poly16_t*, p16, x4);\n TEST_ST1xN (vst1q, float16x8x4_t, float16_t*, f16, x4);\n+TEST_ST1xN (vst1q, bfloat16x8x4_t, bfloat16_t*, bf16, x4);\n TEST_ST1xN (vst1q, int32x4x4_t, int32_t*, s32, x4);\n TEST_ST1xN (vst1q, uint32x4x4_t, uint32_t*, u32, x4);\n TEST_ST1xN (vst1q, float32x4x4_t, float32_t*, f32, x4);\n@@ -227,6 +231,7 @@ TEST_ST1xN (vst1q, int16x8x2_t, int16_t*, s16, x2);\n TEST_ST1xN (vst1q, uint16x8x2_t, uint16_t*, u16, x2);\n TEST_ST1xN (vst1q, poly16x8x2_t, poly16_t*, p16, x2);\n TEST_ST1xN (vst1q, float16x8x2_t, float16_t*, f16, x2);\n+TEST_ST1xN (vst1q, bfloat16x8x2_t, bfloat16_t*, bf16, x2);\n TEST_ST1xN (vst1q, int32x4x2_t, int32_t*, s32, x2);\n TEST_ST1xN (vst1q, uint32x4x2_t, uint32_t*, u32, x2);\n TEST_ST1xN (vst1q, float32x4x2_t, float32_t*, f32, x2);\n@@ -249,6 +254,7 @@ TEST_ST1x3 (vst1q, int16x8x3_t, int16_t*, s16, x3);\n TEST_ST1x3 (vst1q, uint16x8x3_t, uint16_t*, u16, x3);\n TEST_ST1x3 (vst1q, poly16x8x3_t, poly16_t*, p16, x3);\n TEST_ST1x3 (vst1q, float16x8x3_t, float16_t*, f16, x3);\n+TEST_ST1x3 (vst1q, bfloat16x8x3_t, bfloat16_t*, bf16, x3);\n TEST_ST1x3 (vst1q, int32x4x3_t, int32_t*, s32, x3);\n TEST_ST1x3 (vst1q, uint32x4x3_t, uint32_t*, u32, x3);\n TEST_ST1x3 (vst1q, float32x4x3_t, float32_t*, f32, x3);\n@@ -261,7 +267,7 @@ TEST_ST1x3 (vst1q, float64x2x3_t, float64_t*, f64, x3);\n \n /* { dg-final { scan-assembler-times \"tbl\\\\t\" 18} }  */\n /* { dg-final { scan-assembler-times \"tbx\\\\t\" 18} }  */\n-/* { dg-final { scan-assembler-times \"st4\\\\t\" 29} }  */\n-/* { dg-final { scan-assembler-times \"st3\\\\t\" 29} }  */\n-/* { dg-final { scan-assembler-times \"st2\\\\t\" 29} }  */\n-/* { dg-final { scan-assembler-times \"st1\\\\t\" 42} }  */\n+/* { dg-final { scan-assembler-times \"st4\\\\t\" 30} }  */\n+/* { dg-final { scan-assembler-times \"st3\\\\t\" 30} }  */\n+/* { dg-final { scan-assembler-times \"st2\\\\t\" 30} }  */\n+/* { dg-final { scan-assembler-times \"st1\\\\t\" 45} }  */"}]}