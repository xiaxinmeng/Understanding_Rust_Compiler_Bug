{"sha": "ddc9c40d207ed67a7c438b4bd3166eeaa44dd08a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGRjOWM0MGQyMDdlZDY3YTdjNDM4YjRiZDMxNjZlZWFhNDRkZDA4YQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-07-27T10:36:50Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-07-27T10:36:50Z"}, "message": "acinclude.m4 ([GLIBCXX_CHECK_STDIO_MACROS]): Remove.\n\n2010-07-27  Paolo Carlini  <paolo.carlini@oracle.com>\n\t    Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n\n\t* acinclude.m4 ([GLIBCXX_CHECK_STDIO_MACROS]): Remove.\n\t([GLIBCXX_COMPUTE_STDIO_INTEGER_CONSTANTS]): Add, actually\n\tcompute the constants via AC_COMPUTE_INT.\n\t* configure.ac: Call the latter.\n\t* include/bits/ios_base.h: Adjust.\n\t* include/bits/char_traits.h: Likewise.\n\t* testsuite/27_io/ios_base/cons/assign_neg.cc: Adjust dg-error\n\tline number.\n\t* testsuite/27_io/ios_base/cons/copy_neg.cc: Likewise.\n\t* config.h.in: Regenerate.\n\t* configure: Likewise.\n\n2010-07-27  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* config/io/c_io_stdio.h: Do not include <cstddef>.\n\nCo-Authored-By: Ralf Wildenhues <Ralf.Wildenhues@gmx.de>\n\nFrom-SVN: r162562", "tree": {"sha": "f5d9e49c8040d887a70a17fcb0630a432423bc74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f5d9e49c8040d887a70a17fcb0630a432423bc74"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ddc9c40d207ed67a7c438b4bd3166eeaa44dd08a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddc9c40d207ed67a7c438b4bd3166eeaa44dd08a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddc9c40d207ed67a7c438b4bd3166eeaa44dd08a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddc9c40d207ed67a7c438b4bd3166eeaa44dd08a/comments", "author": null, "committer": null, "parents": [{"sha": "a691bb08942d242a1799787b195b554d0696a938", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a691bb08942d242a1799787b195b554d0696a938", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a691bb08942d242a1799787b195b554d0696a938"}], "stats": {"total": 307, "additions": 175, "deletions": 132}, "files": [{"sha": "ce732b4362eeadbee050205cb6a090908c6be589", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddc9c40d207ed67a7c438b4bd3166eeaa44dd08a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddc9c40d207ed67a7c438b4bd3166eeaa44dd08a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ddc9c40d207ed67a7c438b4bd3166eeaa44dd08a", "patch": "@@ -1,3 +1,22 @@\n+2010-07-27  Paolo Carlini  <paolo.carlini@oracle.com>\n+\t    Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n+\n+\t* acinclude.m4 ([GLIBCXX_CHECK_STDIO_MACROS]): Remove.\n+\t([GLIBCXX_COMPUTE_STDIO_INTEGER_CONSTANTS]): Add, actually\n+\tcompute the constants via AC_COMPUTE_INT.\n+\t* configure.ac: Call the latter.\n+\t* include/bits/ios_base.h: Adjust.\n+\t* include/bits/char_traits.h: Likewise.\n+\t* testsuite/27_io/ios_base/cons/assign_neg.cc: Adjust dg-error\n+\tline number.\n+\t* testsuite/27_io/ios_base/cons/copy_neg.cc: Likewise.\n+\t* config.h.in: Regenerate.\n+\t* configure: Likewise.\n+\n+2010-07-27  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* config/io/c_io_stdio.h: Do not include <cstddef>.\n+\n 2010-07-26  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* testsuite/22_locale/num_put/put/char/14220.cc: XFAIL on Solaris"}, {"sha": "8977f3d7cb7d593bea669e04e1eac064fa91fc23", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 31, "deletions": 19, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddc9c40d207ed67a7c438b4bd3166eeaa44dd08a/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddc9c40d207ed67a7c438b4bd3166eeaa44dd08a/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=ddc9c40d207ed67a7c438b4bd3166eeaa44dd08a", "patch": "@@ -1619,26 +1619,38 @@ AC_DEFUN([GLIBCXX_CHECK_RANDOM_TR1], [\n ])\n \n dnl\n-dnl Check whether EOF, SEEK_CUR, and SEEK_END have the most common values:\n-dnl in that case including <cstdio> in some C++ headers can be avoided.\n-dnl\n-AC_DEFUN([GLIBCXX_CHECK_STDIO_MACROS], [\n-\n-  AC_MSG_CHECKING([for EOF == -1, SEEK_CUR == 1, SEEK_END == 2])\n-  AC_CACHE_VAL(glibcxx_cv_stdio_macros, [\n-  AC_TRY_COMPILE([#include <stdio.h>],\n-                 [#if ((EOF != -1) || (SEEK_CUR != 1) || (SEEK_END != 2))\n-\t            unusual values...\n-\t          #endif\n-\t         ], [glibcxx_cv_stdio_macros=yes],\n-\t\t    [glibcxx_cv_stdio_macros=no])\n-  ])\n-  AC_MSG_RESULT($glibcxx_cv_stdio_macros)\n-  if test x\"$glibcxx_cv_stdio_macros\" = x\"yes\"; then\n-    AC_DEFINE(_GLIBCXX_STDIO_MACROS, 1,\n-              [Define if EOF == -1, SEEK_CUR == 1, SEEK_END == 2.])\n-  fi\n+dnl Compute the EOF, SEEK_CUR, and SEEK_END integer constants.\n+dnl\n+AC_DEFUN([GLIBCXX_COMPUTE_STDIO_INTEGER_CONSTANTS], [\n+\n+  AC_MSG_CHECKING([For some <stdio.h> integer constants.])\n \n+  AC_CACHE_VAL(glibcxx_cv_stdio_eof, [\n+  AC_COMPUTE_INT([glibcxx_cv_stdio_eof], [[EOF]],\n+                 [#include <stdio.h>],\n+                 [AC_MSG_ERROR([computing EOF failed])])\n+  ])\n+  AC_MSG_RESULT($glibcxx_cv_stdio_eof)\n+  AC_DEFINE_UNQUOTED(_GLIBCXX_STDIO_EOF, $glibcxx_cv_stdio_eof,\n+                     [Define to the value of the EOF integer constant.])\n+\n+  AC_CACHE_VAL(glibcxx_cv_stdio_seek_cur, [\n+  AC_COMPUTE_INT([glibcxx_cv_stdio_seek_cur], [[SEEK_CUR]],\n+                 [#include <stdio.h>],\n+                 [AC_MSG_ERROR([computing SEEK_CUR failed])])\n+  ])\n+  AC_MSG_RESULT($glibcxx_cv_stdio_seek_cur)\n+  AC_DEFINE_UNQUOTED(_GLIBCXX_STDIO_SEEK_CUR, $glibcxx_cv_stdio_seek_cur,\n+                     [Define to the value of the SEEK_CUR integer constant.])\n+\n+  AC_CACHE_VAL(glibcxx_cv_stdio_seek_end, [\n+  AC_COMPUTE_INT([glibcxx_cv_stdio_seek_end], [[SEEK_END]],\n+                 [#include <stdio.h>],\n+                 [AC_MSG_ERROR([computing SEEK_END failed])])\n+  ])\n+  AC_MSG_RESULT($glibcxx_cv_stdio_seek_end)\n+  AC_DEFINE_UNQUOTED(_GLIBCXX_STDIO_SEEK_END, $glibcxx_cv_stdio_seek_end,\n+                     [Define to the value of the SEEK_END integer constant.])\n ])\n \n dnl"}, {"sha": "6ab257fa34403dca1fd8e11fb20ace115c8753d7", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddc9c40d207ed67a7c438b4bd3166eeaa44dd08a/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddc9c40d207ed67a7c438b4bd3166eeaa44dd08a/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=ddc9c40d207ed67a7c438b4bd3166eeaa44dd08a", "patch": "@@ -713,8 +713,14 @@\n /* Define if the compiler is configured for setjmp/longjmp exceptions. */\n #undef _GLIBCXX_SJLJ_EXCEPTIONS\n \n-/* Define if EOF == -1, SEEK_CUR == 1, SEEK_END == 2. */\n-#undef _GLIBCXX_STDIO_MACROS\n+/* Define to the value of the EOF integer constant. */\n+#undef _GLIBCXX_STDIO_EOF\n+\n+/* Define to the value of the SEEK_CUR integer constant. */\n+#undef _GLIBCXX_STDIO_SEEK_CUR\n+\n+/* Define to the value of the SEEK_END integer constant. */\n+#undef _GLIBCXX_STDIO_SEEK_END\n \n /* Define to use symbol versioning in the shared library. */\n #undef _GLIBCXX_SYMVER"}, {"sha": "f6eeadc9ba9b5a4fa3cd4241226aad21b7cb8af7", "filename": "libstdc++-v3/config/io/c_io_stdio.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddc9c40d207ed67a7c438b4bd3166eeaa44dd08a/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fc_io_stdio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddc9c40d207ed67a7c438b4bd3166eeaa44dd08a/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fc_io_stdio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fc_io_stdio.h?ref=ddc9c40d207ed67a7c438b4bd3166eeaa44dd08a", "patch": "@@ -1,6 +1,6 @@\n // Underlying io library details -*- C++ -*-\n \n-// Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2009\n+// Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -34,7 +34,6 @@\n #define _GLIBCXX_CXX_IO_H 1\n \n #include <cstdio>\n-#include <cstddef>\n #include <bits/gthr.h>\n \n _GLIBCXX_BEGIN_NAMESPACE(std)"}, {"sha": "2e6affaf74001c3d159c8c7b7e16dec0236e4d74", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 107, "deletions": 79, "changes": 186, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddc9c40d207ed67a7c438b4bd3166eeaa44dd08a/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddc9c40d207ed67a7c438b4bd3166eeaa44dd08a/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=ddc9c40d207ed67a7c438b4bd3166eeaa44dd08a", "patch": "@@ -2201,60 +2201,6 @@ fi\n \n } # ac_fn_cxx_check_header_mongrel\n \n-# ac_fn_c_check_type LINENO TYPE VAR INCLUDES\n-# -------------------------------------------\n-# Tests whether TYPE exists after having included INCLUDES, setting cache\n-# variable VAR accordingly.\n-ac_fn_c_check_type ()\n-{\n-  as_lineno=${as_lineno-\"$1\"} as_lineno_stack=as_lineno_stack=$as_lineno_stack\n-  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for $2\" >&5\n-$as_echo_n \"checking for $2... \" >&6; }\n-if { as_var=$3; eval \"test \\\"\\${$as_var+set}\\\" = set\"; }; then :\n-  $as_echo_n \"(cached) \" >&6\n-else\n-  eval \"$3=no\"\n-  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n-/* end confdefs.h.  */\n-$4\n-int\n-main ()\n-{\n-if (sizeof ($2))\n-\t return 0;\n-  ;\n-  return 0;\n-}\n-_ACEOF\n-if ac_fn_c_try_compile \"$LINENO\"; then :\n-  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n-/* end confdefs.h.  */\n-$4\n-int\n-main ()\n-{\n-if (sizeof (($2)))\n-\t    return 0;\n-  ;\n-  return 0;\n-}\n-_ACEOF\n-if ac_fn_c_try_compile \"$LINENO\"; then :\n-\n-else\n-  eval \"$3=yes\"\n-fi\n-rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n-fi\n-rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n-fi\n-eval ac_res=\\$$3\n-\t       { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_res\" >&5\n-$as_echo \"$ac_res\" >&6; }\n-  eval $as_lineno_stack; test \"x$as_lineno_stack\" = x && { as_lineno=; unset as_lineno;}\n-\n-} # ac_fn_c_check_type\n-\n # ac_fn_c_compute_int LINENO EXPR VAR INCLUDES\n # --------------------------------------------\n # Tries to find the compile-time value of EXPR in a program that includes\n@@ -2432,6 +2378,60 @@ rm -f conftest.val\n   return $ac_retval\n \n } # ac_fn_c_compute_int\n+\n+# ac_fn_c_check_type LINENO TYPE VAR INCLUDES\n+# -------------------------------------------\n+# Tests whether TYPE exists after having included INCLUDES, setting cache\n+# variable VAR accordingly.\n+ac_fn_c_check_type ()\n+{\n+  as_lineno=${as_lineno-\"$1\"} as_lineno_stack=as_lineno_stack=$as_lineno_stack\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for $2\" >&5\n+$as_echo_n \"checking for $2... \" >&6; }\n+if { as_var=$3; eval \"test \\\"\\${$as_var+set}\\\" = set\"; }; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  eval \"$3=no\"\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+$4\n+int\n+main ()\n+{\n+if (sizeof ($2))\n+\t return 0;\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+$4\n+int\n+main ()\n+{\n+if (sizeof (($2)))\n+\t    return 0;\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+\n+else\n+  eval \"$3=yes\"\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+fi\n+eval ac_res=\\$$3\n+\t       { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_res\" >&5\n+$as_echo \"$ac_res\" >&6; }\n+  eval $as_lineno_stack; test \"x$as_lineno_stack\" = x && { as_lineno=; unset as_lineno;}\n+\n+} # ac_fn_c_check_type\n cat >config.log <<_ACEOF\n This file contains any messages produced by compilers while\n running configure, to aid debugging if configure makes a mistake.\n@@ -18676,45 +18676,73 @@ ac_compiler_gnu=$ac_cv_c_compiler_gnu\n \n \n \n-# For common values of EOF, SEEK_CUR, SEEK_END.\n+# For the EOF, SEEK_CUR, and SEEK_END integer constants.\n \n \n-  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for EOF == -1, SEEK_CUR == 1, SEEK_END == 2\" >&5\n-$as_echo_n \"checking for EOF == -1, SEEK_CUR == 1, SEEK_END == 2... \" >&6; }\n-  if test \"${glibcxx_cv_stdio_macros+set}\" = set; then :\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking For some <stdio.h> integer constants.\" >&5\n+$as_echo_n \"checking For some <stdio.h> integer constants.... \" >&6; }\n+\n+  if test \"${glibcxx_cv_stdio_eof+set}\" = set; then :\n   $as_echo_n \"(cached) \" >&6\n else\n \n-  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n-/* end confdefs.h.  */\n-#include <stdio.h>\n-int\n-main ()\n-{\n-#if ((EOF != -1) || (SEEK_CUR != 1) || (SEEK_END != 2))\n-\t            unusual values...\n-\t          #endif\n+  if ac_fn_c_compute_int \"$LINENO\" \"EOF\" \"glibcxx_cv_stdio_eof\"        \"#include <stdio.h>\"; then :\n \n-  ;\n-  return 0;\n-}\n+else\n+  as_fn_error \"computing EOF failed\" \"$LINENO\" 5\n+fi\n+\n+\n+fi\n+\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $glibcxx_cv_stdio_eof\" >&5\n+$as_echo \"$glibcxx_cv_stdio_eof\" >&6; }\n+\n+cat >>confdefs.h <<_ACEOF\n+#define _GLIBCXX_STDIO_EOF $glibcxx_cv_stdio_eof\n _ACEOF\n-if ac_fn_c_try_compile \"$LINENO\"; then :\n-  glibcxx_cv_stdio_macros=yes\n+\n+\n+  if test \"${glibcxx_cv_stdio_seek_cur+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+\n+  if ac_fn_c_compute_int \"$LINENO\" \"SEEK_CUR\" \"glibcxx_cv_stdio_seek_cur\"        \"#include <stdio.h>\"; then :\n+\n else\n-  glibcxx_cv_stdio_macros=no\n+  as_fn_error \"computing SEEK_CUR failed\" \"$LINENO\" 5\n fi\n-rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+\n \n fi\n \n-  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $glibcxx_cv_stdio_macros\" >&5\n-$as_echo \"$glibcxx_cv_stdio_macros\" >&6; }\n-  if test x\"$glibcxx_cv_stdio_macros\" = x\"yes\"; then\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $glibcxx_cv_stdio_seek_cur\" >&5\n+$as_echo \"$glibcxx_cv_stdio_seek_cur\" >&6; }\n \n-$as_echo \"#define _GLIBCXX_STDIO_MACROS 1\" >>confdefs.h\n+cat >>confdefs.h <<_ACEOF\n+#define _GLIBCXX_STDIO_SEEK_CUR $glibcxx_cv_stdio_seek_cur\n+_ACEOF\n \n-  fi\n+\n+  if test \"${glibcxx_cv_stdio_seek_end+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+\n+  if ac_fn_c_compute_int \"$LINENO\" \"SEEK_END\" \"glibcxx_cv_stdio_seek_end\"        \"#include <stdio.h>\"; then :\n+\n+else\n+  as_fn_error \"computing SEEK_END failed\" \"$LINENO\" 5\n+fi\n+\n+\n+fi\n+\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $glibcxx_cv_stdio_seek_end\" >&5\n+$as_echo \"$glibcxx_cv_stdio_seek_end\" >&6; }\n+\n+cat >>confdefs.h <<_ACEOF\n+#define _GLIBCXX_STDIO_SEEK_END $glibcxx_cv_stdio_seek_end\n+_ACEOF\n \n \n "}, {"sha": "f3dfe0142d039ee92d67c125495ecdd5d8e04e2a", "filename": "libstdc++-v3/configure.ac", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddc9c40d207ed67a7c438b4bd3166eeaa44dd08a/libstdc%2B%2B-v3%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddc9c40d207ed67a7c438b4bd3166eeaa44dd08a/libstdc%2B%2B-v3%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.ac?ref=ddc9c40d207ed67a7c438b4bd3166eeaa44dd08a", "patch": "@@ -153,8 +153,8 @@ GLIBCXX_CHECK_WRITEV\n # For C99 support to TR1.\n GLIBCXX_CHECK_C99_TR1\n \n-# For common values of EOF, SEEK_CUR, SEEK_END.\n-GLIBCXX_CHECK_STDIO_MACROS\n+# For the EOF, SEEK_CUR, and SEEK_END integer constants.\n+GLIBCXX_COMPUTE_STDIO_INTEGER_CONSTANTS\n \n # For gettimeofday support.\n GLIBCXX_CHECK_GETTIMEOFDAY"}, {"sha": "786c1c6b38018db36bf5c6583be50b13641d36ea", "filename": "libstdc++-v3/include/bits/char_traits.h", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddc9c40d207ed67a7c438b4bd3166eeaa44dd08a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddc9c40d207ed67a7c438b4bd3166eeaa44dd08a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h?ref=ddc9c40d207ed67a7c438b4bd3166eeaa44dd08a", "patch": "@@ -42,13 +42,6 @@\n #include <bits/postypes.h>      // For streampos\n #include <cwchar>               // For WEOF, wmemmove, wmemset, etc.\n \n-#ifndef _GLIBCXX_STDIO_MACROS\n-# include <cstdio>              // For EOF\n-# define _CHAR_TRAITS_EOF EOF\n-#else\n-# define _CHAR_TRAITS_EOF (-1)\n-#endif\n-\n _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n   /**\n@@ -139,7 +132,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n       static int_type\n       eof()\n-      { return static_cast<int_type>(_CHAR_TRAITS_EOF); }\n+      { return static_cast<int_type>(_GLIBCXX_STDIO_EOF); }\n \n       static int_type\n       not_eof(const int_type& __c)\n@@ -294,7 +287,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n       static int_type\n       eof()\n-      { return static_cast<int_type>(_CHAR_TRAITS_EOF); }\n+      { return static_cast<int_type>(_GLIBCXX_STDIO_EOF); }\n \n       static int_type\n       not_eof(const int_type& __c)\n@@ -570,6 +563,4 @@ _GLIBCXX_END_NAMESPACE\n \n #endif \n \n-#undef _CHAR_TRAITS_EOF\n-\n #endif // _CHAR_TRAITS_H"}, {"sha": "6515dd40e8e97c275558927bbb6e7a8b6173e5b0", "filename": "libstdc++-v3/include/bits/ios_base.h", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddc9c40d207ed67a7c438b4bd3166eeaa44dd08a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddc9c40d207ed67a7c438b4bd3166eeaa44dd08a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h?ref=ddc9c40d207ed67a7c438b4bd3166eeaa44dd08a", "patch": "@@ -42,15 +42,6 @@\n #include <bits/localefwd.h>\n #include <bits/locale_classes.h>\n \n-#ifndef _GLIBCXX_STDIO_MACROS\n-# include <cstdio>   // For SEEK_CUR, SEEK_END\n-# define _IOS_BASE_SEEK_CUR SEEK_CUR\n-# define _IOS_BASE_SEEK_END SEEK_END\n-#else\n-# define _IOS_BASE_SEEK_CUR 1\n-# define _IOS_BASE_SEEK_END 2\n-#endif\n-\n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   // The following definitions of bitmask types are enums, not ints,\n@@ -189,8 +180,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   enum _Ios_Seekdir \n     { \n       _S_beg = 0,\n-      _S_cur = _IOS_BASE_SEEK_CUR,\n-      _S_end = _IOS_BASE_SEEK_END,\n+      _S_cur = _GLIBCXX_STDIO_SEEK_CUR,\n+      _S_end = _GLIBCXX_STDIO_SEEK_END,\n       _S_ios_seekdir_end = 1L << 16 \n     };\n \n@@ -970,8 +961,5 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n _GLIBCXX_END_NAMESPACE\n \n-#undef _IOS_BASE_SEEK_CUR\n-#undef _IOS_BASE_SEEK_END\n-\n #endif /* _IOS_BASE_H */\n "}, {"sha": "9f85ad1c9d8f4d5b3a3f440bcbe8d512fa3c8646", "filename": "libstdc++-v3/testsuite/27_io/ios_base/cons/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddc9c40d207ed67a7c438b4bd3166eeaa44dd08a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddc9c40d207ed67a7c438b4bd3166eeaa44dd08a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fcons%2Fassign_neg.cc?ref=ddc9c40d207ed67a7c438b4bd3166eeaa44dd08a", "patch": "@@ -34,5 +34,5 @@ void test01()\n }\n // { dg-error \"synthesized\" \"\" { target *-*-* } 33 } \n // { dg-error \"within this context\" \"\" { target *-*-* } 26 } \n-// { dg-error \"is private\" \"\" { target *-*-* } 788 } \n+// { dg-error \"is private\" \"\" { target *-*-* } 779 }\n // { dg-error \"operator=\" \"\" { target *-*-* } 0 } "}, {"sha": "2a7573749bdf00d0a24ee889f561d151547e52b8", "filename": "libstdc++-v3/testsuite/27_io/ios_base/cons/copy_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddc9c40d207ed67a7c438b4bd3166eeaa44dd08a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddc9c40d207ed67a7c438b4bd3166eeaa44dd08a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fcons%2Fcopy_neg.cc?ref=ddc9c40d207ed67a7c438b4bd3166eeaa44dd08a", "patch": "@@ -1,6 +1,6 @@\n // { dg-do compile }\n \n-// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009 Free Software\n+// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010 Free Software\n // Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -34,5 +34,5 @@ void test02()\n }\n // { dg-error \"within this context\" \"\" { target *-*-* } 26 }\n // { dg-error \"synthesized\" \"\" { target *-*-* } 33 } \n-// { dg-error \"is private\" \"\" { target *-*-* } 785 } \n+// { dg-error \"is private\" \"\" { target *-*-* } 776 } \n // { dg-error \"copy constructor\" \"\" { target *-*-* } 0 } "}]}