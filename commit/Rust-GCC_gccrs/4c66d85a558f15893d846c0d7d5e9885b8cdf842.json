{"sha": "4c66d85a558f15893d846c0d7d5e9885b8cdf842", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGM2NmQ4NWE1NThmMTU4OTNkODQ2YzBkN2Q1ZTk4ODViOGNkZjg0Mg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-03-15T18:27:09Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-03-15T18:27:09Z"}, "message": "re PR c++/34758 (Bad diagnostic for circular dependency in constructor default argument)\n\n\tPR c++/34758\n\t* call.c (convert_default_arg): Use DECL_ORIGIN of fn.  Check for\n\trecursion first.\n\t(push_defarg_context, pop_defarg_context): New.\n\t* parser.c (cp_parser_late_parsing_default_args): Use them.\n\t* cp-tree.h: Declare them.\n\nFrom-SVN: r171009", "tree": {"sha": "37f9886968ac0a2a5f0f68d1dc00396a32a27f3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37f9886968ac0a2a5f0f68d1dc00396a32a27f3f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c66d85a558f15893d846c0d7d5e9885b8cdf842", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c66d85a558f15893d846c0d7d5e9885b8cdf842", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c66d85a558f15893d846c0d7d5e9885b8cdf842", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c66d85a558f15893d846c0d7d5e9885b8cdf842/comments", "author": null, "committer": null, "parents": [{"sha": "56b67510587aa6aa75884ee45f4ddd9108bde7c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56b67510587aa6aa75884ee45f4ddd9108bde7c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56b67510587aa6aa75884ee45f4ddd9108bde7c3"}], "stats": {"total": 83, "additions": 70, "deletions": 13}, "files": [{"sha": "34a3a5347881eceeb853544507b4787ec99fa18d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c66d85a558f15893d846c0d7d5e9885b8cdf842/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c66d85a558f15893d846c0d7d5e9885b8cdf842/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4c66d85a558f15893d846c0d7d5e9885b8cdf842", "patch": "@@ -1,3 +1,12 @@\n+2011-03-15  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/34758\n+\t* call.c (convert_default_arg): Use DECL_ORIGIN of fn.  Check for\n+\trecursion first.\n+\t(push_defarg_context, pop_defarg_context): New.\n+\t* parser.c (cp_parser_late_parsing_default_args): Use them.\n+\t* cp-tree.h: Declare them.\n+\n 2011-03-11  Dodji Seketeli  <dodji@redhat.com>\n \n \t* call.c (add_builtin_candidate)<case INDIRECT_REF>: The type of"}, {"sha": "499ed03f3f9e0ceb711e9a71c5e95608d32c86db", "filename": "gcc/cp/call.c", "status": "modified", "additions": 23, "deletions": 13, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c66d85a558f15893d846c0d7d5e9885b8cdf842/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c66d85a558f15893d846c0d7d5e9885b8cdf842/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=4c66d85a558f15893d846c0d7d5e9885b8cdf842", "patch": "@@ -5746,26 +5746,26 @@ cxx_type_promotes_to (tree type)\n }\n \n /* ARG is a default argument expression being passed to a parameter of\n-   the indicated TYPE, which is a parameter to FN.  Do any required\n-   conversions.  Return the converted value.  */\n+   the indicated TYPE, which is a parameter to FN.  PARMNUM is the\n+   zero-based argument number.  Do any required conversions.  Return\n+   the converted value.  */\n \n static GTY(()) VEC(tree,gc) *default_arg_context;\n+void\n+push_defarg_context (tree fn)\n+{ VEC_safe_push (tree, gc, default_arg_context, fn); }\n+void\n+pop_defarg_context (void)\n+{ VEC_pop (tree, default_arg_context); }\n \n tree\n convert_default_arg (tree type, tree arg, tree fn, int parmnum)\n {\n   int i;\n   tree t;\n \n-  /* If the ARG is an unparsed default argument expression, the\n-     conversion cannot be performed.  */\n-  if (TREE_CODE (arg) == DEFAULT_ARG)\n-    {\n-      error (\"the default argument for parameter %d of %qD has \"\n-\t     \"not yet been parsed\",\n-\t     parmnum, fn);\n-      return error_mark_node;\n-    }\n+  /* See through clones.  */\n+  fn = DECL_ORIGIN (fn);\n \n   /* Detect recursion.  */\n   FOR_EACH_VEC_ELT (tree, default_arg_context, i, t)\n@@ -5774,7 +5774,17 @@ convert_default_arg (tree type, tree arg, tree fn, int parmnum)\n \terror (\"recursive evaluation of default argument for %q#D\", fn);\n \treturn error_mark_node;\n       }\n-  VEC_safe_push (tree, gc, default_arg_context, fn);\n+\n+  /* If the ARG is an unparsed default argument expression, the\n+     conversion cannot be performed.  */\n+  if (TREE_CODE (arg) == DEFAULT_ARG)\n+    {\n+      error (\"call to %qD uses the default argument for parameter %P, which \"\n+\t     \"is not yet defined\", fn, parmnum);\n+      return error_mark_node;\n+    }\n+\n+  push_defarg_context (fn);\n \n   if (fn && DECL_TEMPLATE_INFO (fn))\n     arg = tsubst_default_argument (fn, type, arg);\n@@ -5814,7 +5824,7 @@ convert_default_arg (tree type, tree arg, tree fn, int parmnum)\n     }\n   pop_deferring_access_checks();\n \n-  VEC_pop (tree, default_arg_context);\n+  pop_defarg_context ();\n \n   return arg;\n }"}, {"sha": "6ef6e6eb3ec77e612b8c4bef4882da9bb6ba48c6", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c66d85a558f15893d846c0d7d5e9885b8cdf842/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c66d85a558f15893d846c0d7d5e9885b8cdf842/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=4c66d85a558f15893d846c0d7d5e9885b8cdf842", "patch": "@@ -4638,6 +4638,8 @@ extern bool can_convert\t\t\t\t(tree, tree);\n extern bool can_convert_arg\t\t\t(tree, tree, tree, int);\n extern bool can_convert_arg_bad\t\t\t(tree, tree, tree, int);\n extern bool enforce_access\t\t\t(tree, tree, tree);\n+extern void push_defarg_context\t\t\t(tree);\n+extern void pop_defarg_context\t\t\t(void);\n extern tree convert_default_arg\t\t\t(tree, tree, tree, int);\n extern tree convert_arg_to_ellipsis\t\t(tree);\n extern tree build_x_va_arg\t\t\t(tree, tree);"}, {"sha": "a9fd2010b253495aae40e551ae7904901d48ea27", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c66d85a558f15893d846c0d7d5e9885b8cdf842/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c66d85a558f15893d846c0d7d5e9885b8cdf842/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=4c66d85a558f15893d846c0d7d5e9885b8cdf842", "patch": "@@ -20521,6 +20521,8 @@ cp_parser_late_parsing_default_args (cp_parser *parser, tree fn)\n   saved_local_variables_forbidden_p = parser->local_variables_forbidden_p;\n   parser->local_variables_forbidden_p = true;\n \n+  push_defarg_context (fn);\n+\n   for (parm = TYPE_ARG_TYPES (TREE_TYPE (fn)),\n \t parmdecl = DECL_ARGUMENTS (fn);\n        parm && parm != void_list_node;\n@@ -20579,6 +20581,8 @@ cp_parser_late_parsing_default_args (cp_parser *parser, tree fn)\n       cp_parser_pop_lexer (parser);\n     }\n \n+  pop_defarg_context ();\n+\n   /* Make sure no default arg is missing.  */\n   check_default_args (fn);\n "}, {"sha": "3529a65bccf61c9548d939d4cd81ab0862ad7c2c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c66d85a558f15893d846c0d7d5e9885b8cdf842/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c66d85a558f15893d846c0d7d5e9885b8cdf842/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4c66d85a558f15893d846c0d7d5e9885b8cdf842", "patch": "@@ -1,3 +1,7 @@\n+2011-03-15  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\t* g++.dg/parse/pr34758.C: New.\n+\n 2011-03-15  Xinliang David Li  <davidxl@google.com>\n \n \tPR c/47837"}, {"sha": "d694853e68e8c29114546cdd07933694915b5380", "filename": "gcc/testsuite/g++.dg/parse/pr34758.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c66d85a558f15893d846c0d7d5e9885b8cdf842/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fpr34758.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c66d85a558f15893d846c0d7d5e9885b8cdf842/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fpr34758.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fpr34758.C?ref=4c66d85a558f15893d846c0d7d5e9885b8cdf842", "patch": "@@ -0,0 +1,28 @@\n+// PR 34758 Bad diagnostic for circular dependency in constructor default argument\n+// { dg-do compile }\n+// { dg-options \"\" }\n+struct A\n+{\n+  A (const A& = A()); // { dg-error \"recursive evaluation of default argument\" }\n+};\n+\n+\n+struct S {\n+  S(const S& = f()); // { dg-error \"default argument\\[^\\n\\]*which is not yet defined\" }\n+  static const S& f(int i = 3);\n+};\n+\n+struct J {\n+  J(const J& = f(2)); // { dg-error \"default argument.*which is not yet defined\" }\n+  static const J& f(int i = 3, int j = 4);\n+};\n+\n+struct Z {\n+  Z(const Z& = f(4));\n+  static const Z& f(int i = 3);\n+};\n+\n+struct X {\n+  X(const X& = g());\n+  static const X& g(void);\n+};"}]}