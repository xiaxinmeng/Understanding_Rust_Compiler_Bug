{"sha": "69458145262e4cef76410f5d42fe0d12b7c395fb", "node_id": "C_kwDOANBUbNoAKDY5NDU4MTQ1MjYyZTRjZWY3NjQxMGY1ZDQyZmUwZDEyYjdjMzk1ZmI", "commit": {"author": {"name": "Lulu Cheng", "email": "chenglulu@loongson.cn", "date": "2022-08-18T09:26:13Z"}, "committer": {"name": "Lulu Cheng", "email": "chenglulu@loongson.cn", "date": "2022-08-20T09:02:19Z"}, "message": "LoongArch: Add support code model extreme.\n\nUse five instructions to calculate a signed 64-bit offset relative to the pc.\n\ngcc/ChangeLog:\n\n\t* config/loongarch/loongarch-opts.cc: Allow cmodel to be extreme.\n\t* config/loongarch/loongarch.cc (loongarch_call_tls_get_addr):\n\tAdd extreme support for TLS GD and LD types.\n\t(loongarch_legitimize_tls_address): Add extreme support for TLS LE\n\tand IE.\n\t(loongarch_split_symbol): When compiling with -mcmodel=extreme,\n\tthe symbol address will be obtained through five instructions.\n\t(loongarch_print_operand_reloc): Add support.\n\t(loongarch_print_operand): Add support.\n\t(loongarch_print_operand_address): Add support.\n\t(loongarch_option_override_internal): Set '-mcmodel=extreme' option\n\tincompatible with '-mno-explicit-relocs'.\n\t* config/loongarch/loongarch.md (@lui_l_hi20<mode>):\n\tLoads bits 12-31 of data into registers.\n\t(lui_h_lo20): Load bits 32-51 of the data and spell bits 0-31 of\n\tthe source register.\n\t(lui_h_hi12): Load bits 52-63 of the data and spell bits 0-51 of\n\tthe source register.\n\t* config/loongarch/predicates.md: Symbols need to be decomposed\n\twhen defining the macro TARGET_CMODEL_EXTREME\n\t* doc/invoke.texi: Modify the description information of cmodel in the document.\n\tDocument -W[no-]extreme-plt.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/loongarch/func-call-1.c: Add option '-mcmodel=normal'.\n\t* gcc.target/loongarch/func-call-2.c: Likewise.\n\t* gcc.target/loongarch/func-call-3.c: Likewise.\n\t* gcc.target/loongarch/func-call-4.c: Likewise.\n\t* gcc.target/loongarch/func-call-5.c: Likewise.\n\t* gcc.target/loongarch/func-call-6.c: Likewise.\n\t* gcc.target/loongarch/func-call-7.c: Likewise.\n\t* gcc.target/loongarch/func-call-8.c: Likewise.\n\t* gcc.target/loongarch/relocs-symbol-noaddend.c: Likewise.\n\t* gcc.target/loongarch/func-call-extreme-1.c: New test.\n\t* gcc.target/loongarch/func-call-extreme-2.c: New test.", "tree": {"sha": "68c94097b721f9c913e1b18be17ebe76b29a9fb9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68c94097b721f9c913e1b18be17ebe76b29a9fb9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/69458145262e4cef76410f5d42fe0d12b7c395fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69458145262e4cef76410f5d42fe0d12b7c395fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69458145262e4cef76410f5d42fe0d12b7c395fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69458145262e4cef76410f5d42fe0d12b7c395fb/comments", "author": {"login": "chenglulu326", "id": 88083425, "node_id": "MDQ6VXNlcjg4MDgzNDI1", "avatar_url": "https://avatars.githubusercontent.com/u/88083425?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenglulu326", "html_url": "https://github.com/chenglulu326", "followers_url": "https://api.github.com/users/chenglulu326/followers", "following_url": "https://api.github.com/users/chenglulu326/following{/other_user}", "gists_url": "https://api.github.com/users/chenglulu326/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenglulu326/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenglulu326/subscriptions", "organizations_url": "https://api.github.com/users/chenglulu326/orgs", "repos_url": "https://api.github.com/users/chenglulu326/repos", "events_url": "https://api.github.com/users/chenglulu326/events{/privacy}", "received_events_url": "https://api.github.com/users/chenglulu326/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chenglulu326", "id": 88083425, "node_id": "MDQ6VXNlcjg4MDgzNDI1", "avatar_url": "https://avatars.githubusercontent.com/u/88083425?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenglulu326", "html_url": "https://github.com/chenglulu326", "followers_url": "https://api.github.com/users/chenglulu326/followers", "following_url": "https://api.github.com/users/chenglulu326/following{/other_user}", "gists_url": "https://api.github.com/users/chenglulu326/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenglulu326/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenglulu326/subscriptions", "organizations_url": "https://api.github.com/users/chenglulu326/orgs", "repos_url": "https://api.github.com/users/chenglulu326/repos", "events_url": "https://api.github.com/users/chenglulu326/events{/privacy}", "received_events_url": "https://api.github.com/users/chenglulu326/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9dd050e0ccd644c3bb6d6538dc6187157f6b3e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9dd050e0ccd644c3bb6d6538dc6187157f6b3e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9dd050e0ccd644c3bb6d6538dc6187157f6b3e8"}], "stats": {"total": 400, "additions": 318, "deletions": 82}, "files": [{"sha": "2ae89f234430e8fda1fd2c6dcca74333e9a86045", "filename": "gcc/config/loongarch/loongarch-opts.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69458145262e4cef76410f5d42fe0d12b7c395fb/gcc%2Fconfig%2Floongarch%2Floongarch-opts.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69458145262e4cef76410f5d42fe0d12b7c395fb/gcc%2Fconfig%2Floongarch%2Floongarch-opts.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Floongarch%2Floongarch-opts.cc?ref=69458145262e4cef76410f5d42fe0d12b7c395fb", "patch": "@@ -376,14 +376,13 @@ loongarch_config_target (struct loongarch_target *target,\n \n   /* 5.  Target code model */\n   t.cmodel = constrained.cmodel ? opt_cmodel : CMODEL_NORMAL;\n-  if (t.cmodel != CMODEL_NORMAL)\n+  if (t.cmodel != CMODEL_NORMAL && t.cmodel != CMODEL_EXTREME)\n     {\n       warning (0, \"%qs is not supported, now cmodel is set to %qs\",\n \t       loongarch_cmodel_strings[t.cmodel], \"normal\");\n       t.cmodel = CMODEL_NORMAL;\n     }\n \n-\n   /* Cleanup and return.  */\n   obstack_free (&msg_obstack, NULL);\n   *target = t;"}, {"sha": "207ac2762c6aa594b6d11dbaf4d00c9b5aefa0a3", "filename": "gcc/config/loongarch/loongarch.cc", "status": "modified", "additions": 195, "deletions": 27, "changes": 222, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69458145262e4cef76410f5d42fe0d12b7c395fb/gcc%2Fconfig%2Floongarch%2Floongarch.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69458145262e4cef76410f5d42fe0d12b7c395fb/gcc%2Fconfig%2Floongarch%2Floongarch.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Floongarch%2Floongarch.cc?ref=69458145262e4cef76410f5d42fe0d12b7c395fb", "patch": "@@ -2436,7 +2436,19 @@ loongarch_call_tls_get_addr (rtx sym, enum loongarch_symbol_type type, rtx v0)\n       /* Split tls symbol to high and low.  */\n       rtx high = gen_rtx_HIGH (Pmode, copy_rtx (loc));\n       high = loongarch_force_temporary (tmp, high);\n-      emit_insn (gen_tls_low (Pmode, a0, high, loc));\n+\n+      if (TARGET_CMODEL_EXTREME)\n+\t{\n+\t  gcc_assert (TARGET_EXPLICIT_RELOCS);\n+\n+\t  rtx tmp1 = gen_reg_rtx (Pmode);\n+\t  emit_insn (gen_tls_low (Pmode, tmp1, gen_rtx_REG (Pmode, 0), loc));\n+\t  emit_insn (gen_lui_h_lo20 (tmp1, tmp1, loc));\n+\t  emit_insn (gen_lui_h_hi12 (tmp1, tmp1, loc));\n+\t  emit_move_insn (a0, gen_rtx_PLUS (Pmode, high, tmp1));\n+\t}\n+      else\n+\temit_insn (gen_tls_low (Pmode, a0, high, loc));\n     }\n   else\n     {\n@@ -2449,14 +2461,44 @@ loongarch_call_tls_get_addr (rtx sym, enum loongarch_symbol_type type, rtx v0)\n     }\n \n   if (flag_plt)\n-    insn = emit_call_insn (gen_call_value_internal (v0, loongarch_tls_symbol,\n+    insn = emit_call_insn (gen_call_value_internal (v0,\n+\t\t\t\t\t\t    loongarch_tls_symbol,\n \t\t\t\t\t\t    const0_rtx));\n   else\n     {\n       rtx dest = gen_reg_rtx (Pmode);\n-      rtx high = gen_reg_rtx (Pmode);\n-      loongarch_emit_move (high, gen_rtx_HIGH (Pmode, loongarch_tls_symbol));\n-      emit_insn (gen_ld_from_got (Pmode, dest, high, loongarch_tls_symbol));\n+\n+      if (TARGET_CMODEL_EXTREME)\n+\t{\n+\t  gcc_assert (TARGET_EXPLICIT_RELOCS);\n+\n+\t  rtx tmp1 = gen_reg_rtx (Pmode);\n+\t  rtx high = gen_reg_rtx (Pmode);\n+\n+\t  loongarch_emit_move (high,\n+\t\t\t       gen_rtx_HIGH (Pmode, loongarch_tls_symbol));\n+\t  loongarch_emit_move (tmp1, gen_rtx_LO_SUM (Pmode,\n+\t\t\t\t\t\t     gen_rtx_REG (Pmode, 0),\n+\t\t\t\t\t\t     loongarch_tls_symbol));\n+\t  emit_insn (gen_lui_h_lo20 (tmp1, tmp1, loongarch_tls_symbol));\n+\t  emit_insn (gen_lui_h_hi12 (tmp1, tmp1, loongarch_tls_symbol));\n+\t  loongarch_emit_move (dest,\n+\t\t\t       gen_rtx_MEM (Pmode,\n+\t\t\t\t\t    gen_rtx_PLUS (Pmode, high, tmp1)));\n+\t}\n+      else\n+\t{\n+\t  if (TARGET_EXPLICIT_RELOCS)\n+\t    {\n+\t      rtx high = gen_reg_rtx (Pmode);\n+\t      loongarch_emit_move (high,\n+\t\t\t\t   gen_rtx_HIGH (Pmode, loongarch_tls_symbol));\n+\t      emit_insn (gen_ld_from_got (Pmode, dest, high,\n+\t\t\t\t\t  loongarch_tls_symbol));\n+\t    }\n+\t  else\n+\t    loongarch_emit_move (dest, loongarch_tls_symbol);\n+\t}\n       insn = emit_call_insn (gen_call_value_internal (v0, dest, const0_rtx));\n     }\n \n@@ -2508,7 +2550,23 @@ loongarch_legitimize_tls_address (rtx loc)\n \t      tmp3 = gen_reg_rtx (Pmode);\n \t      rtx high = gen_rtx_HIGH (Pmode, copy_rtx (tmp2));\n \t      high = loongarch_force_temporary (tmp3, high);\n-\t      emit_insn (gen_ld_from_got (Pmode, tmp1, high, tmp2));\n+\n+\t      if (TARGET_CMODEL_EXTREME)\n+\t\t{\n+\t\t  gcc_assert (TARGET_EXPLICIT_RELOCS);\n+\n+\t\t  rtx tmp3 = gen_reg_rtx (Pmode);\n+\t\t  emit_insn (gen_tls_low (Pmode, tmp3,\n+\t\t\t\t\t  gen_rtx_REG (Pmode, 0), tmp2));\n+\t\t  emit_insn (gen_lui_h_lo20 (tmp3, tmp3, tmp2));\n+\t\t  emit_insn (gen_lui_h_hi12 (tmp3, tmp3, tmp2));\n+\t\t  emit_move_insn (tmp1,\n+\t\t\t\t  gen_rtx_MEM (Pmode,\n+\t\t\t\t\t       gen_rtx_PLUS (Pmode,\n+\t\t\t\t\t\t\t     high, tmp3)));\n+\t\t}\n+\t      else\n+\t\temit_insn (gen_ld_from_got (Pmode, tmp1, high, tmp2));\n \t    }\n \t  else\n \t    emit_insn (loongarch_got_load_tls_ie (tmp1, loc));\n@@ -2530,11 +2588,18 @@ loongarch_legitimize_tls_address (rtx loc)\n \t      rtx high = gen_rtx_HIGH (Pmode, copy_rtx (tmp2));\n \t      high = loongarch_force_temporary (tmp3, high);\n \t      emit_insn (gen_ori_l_lo12 (Pmode, tmp1, high, tmp2));\n+\n+\t      if (TARGET_CMODEL_EXTREME)\n+\t\t{\n+\t\t  gcc_assert (TARGET_EXPLICIT_RELOCS);\n+\n+\t\t  emit_insn (gen_lui_h_lo20 (tmp1, tmp1, tmp2));\n+\t\t  emit_insn (gen_lui_h_hi12 (tmp1, tmp1, tmp2));\n+\t\t}\n \t    }\n \t  else\n \t    emit_insn (loongarch_got_load_tls_le (tmp1, loc));\n \t  emit_insn (gen_add3_insn (dest, tmp1, tp));\n-\n \t}\n       break;\n \n@@ -2603,7 +2668,6 @@ bool\n loongarch_split_symbol (rtx temp, rtx addr, machine_mode mode, rtx *low_out)\n {\n   enum loongarch_symbol_type symbol_type;\n-  rtx high;\n \n   /* If build with '-mno-explicit-relocs', don't split symbol.  */\n   if (!TARGET_EXPLICIT_RELOCS)\n@@ -2615,27 +2679,51 @@ loongarch_split_symbol (rtx temp, rtx addr, machine_mode mode, rtx *low_out)\n       || !loongarch_split_symbol_type (symbol_type))\n     return false;\n \n+  rtx high, temp1 = NULL;\n+\n   if (temp == NULL)\n     temp = gen_reg_rtx (Pmode);\n \n   /* Get the 12-31 bits of the address.  */\n   high = gen_rtx_HIGH (Pmode, copy_rtx (addr));\n   high = loongarch_force_temporary (temp, high);\n \n+  if (TARGET_CMODEL_EXTREME && can_create_pseudo_p ())\n+    {\n+      gcc_assert (TARGET_EXPLICIT_RELOCS);\n+\n+      temp1 = gen_reg_rtx (Pmode);\n+      emit_move_insn (temp1, gen_rtx_LO_SUM (Pmode, gen_rtx_REG (Pmode, 0),\n+\t\t\t\t\t     addr));\n+      emit_insn (gen_lui_h_lo20 (temp1, temp1, addr));\n+      emit_insn (gen_lui_h_hi12 (temp1, temp1, addr));\n+    }\n+\n   if (low_out)\n     switch (symbol_type)\n       {\n       case SYMBOL_PCREL:\n-\t*low_out = gen_rtx_LO_SUM (Pmode, high, addr);\n-\tbreak;\n+\t{\n+\t  if (TARGET_CMODEL_EXTREME && can_create_pseudo_p ())\n+\t    *low_out = gen_rtx_PLUS (Pmode, high, temp1);\n+\t  else\n+\t    *low_out = gen_rtx_LO_SUM (Pmode, high, addr);\n+\t  break;\n+\t}\n \n       case SYMBOL_GOT_DISP:\n \t/* SYMBOL_GOT_DISP symbols are loaded from the GOT.  */\n \t{\n-\t  rtx low = gen_rtx_LO_SUM (Pmode, high, addr);\n-\t  rtx mem = gen_rtx_MEM (Pmode, low);\n-\t  *low_out = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, mem),\n-\t\t\t\t     UNSPEC_LOAD_FROM_GOT);\n+\t  if (TARGET_CMODEL_EXTREME && can_create_pseudo_p ())\n+\t    *low_out = gen_rtx_MEM (Pmode, gen_rtx_PLUS (Pmode, high, temp1));\n+\t  else\n+\t    {\n+\t      rtx low = gen_rtx_LO_SUM (Pmode, high, addr);\n+\t      rtx mem = gen_rtx_MEM (Pmode, low);\n+\t      *low_out = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, mem),\n+\t\t\t\t\t UNSPEC_LOAD_FROM_GOT);\n+\t    }\n+\n \t  break;\n \t}\n \n@@ -4584,34 +4672,86 @@ loongarch_memmodel_needs_release_fence (enum memmodel model)\n    in context CONTEXT.  HI_RELOC indicates a high-part reloc.  */\n \n static void\n-loongarch_print_operand_reloc (FILE *file, rtx op, bool hi_reloc)\n+loongarch_print_operand_reloc (FILE *file, rtx op, bool hi64_part,\n+\t\t\t       bool hi_reloc)\n {\n   const char *reloc;\n \n+  if (TARGET_CMODEL_EXTREME)\n+    gcc_assert (TARGET_EXPLICIT_RELOCS);\n+\n   switch (loongarch_classify_symbolic_expression (op))\n     {\n     case SYMBOL_PCREL:\n-      reloc = hi_reloc ? \"%pc_hi20\" : \"%pc_lo12\";\n+      if (hi64_part)\n+\t{\n+\t  if (TARGET_CMODEL_EXTREME)\n+\t    reloc = hi_reloc ? \"%pc64_hi12\" : \"%pc64_lo20\";\n+\t  else\n+\t    gcc_unreachable ();\n+\t}\n+      else\n+\treloc = hi_reloc ? \"%pc_hi20\" : \"%pc_lo12\";\n       break;\n \n     case SYMBOL_GOT_DISP:\n-      reloc = hi_reloc ? \"%got_pc_hi20\" : \"%got_pc_lo12\";\n+      if (hi64_part)\n+\t{\n+\t  if (TARGET_CMODEL_EXTREME)\n+\t    reloc = hi_reloc ? \"%got64_pc_hi12\" : \"%got64_pc_lo20\";\n+\t  else\n+\t    gcc_unreachable ();\n+\t}\n+      else\n+\treloc = hi_reloc ? \"%got_pc_hi20\" : \"%got_pc_lo12\";\n       break;\n \n     case SYMBOL_TLS_IE:\n-      reloc = hi_reloc ? \"%ie_pc_hi20\" : \"%ie_pc_lo12\";\n+      if (hi64_part)\n+\t{\n+\t  if (TARGET_CMODEL_EXTREME)\n+\t    reloc = hi_reloc ? \"%ie64_pc_hi12\" : \"%ie64_pc_lo20\";\n+\t  else\n+\t    gcc_unreachable ();\n+\t}\n+      else\n+\treloc = hi_reloc ? \"%ie_pc_hi20\" : \"%ie_pc_lo12\";\n       break;\n \n     case SYMBOL_TLS_LE:\n-      reloc = hi_reloc ? \"%le_hi20\" : \"%le_lo12\";\n+      if (hi64_part)\n+\t{\n+\t  if (TARGET_CMODEL_EXTREME)\n+\t    reloc = hi_reloc ? \"%le64_hi12\" : \"%le64_lo20\";\n+\t  else\n+\t    gcc_unreachable ();\n+\t}\n+      else\n+\treloc = hi_reloc ? \"%le_hi20\" : \"%le_lo12\";\n       break;\n \n     case SYMBOL_TLSGD:\n-      reloc = hi_reloc ? \"%gd_pc_hi20\" : \"%got_pc_lo12\";\n+      if (hi64_part)\n+\t{\n+\t  if (TARGET_CMODEL_EXTREME)\n+\t    reloc = hi_reloc ? \"%got64_pc_hi12\" : \"%got64_pc_lo20\";\n+\t  else\n+\t    gcc_unreachable ();\n+\t}\n+      else\n+\treloc = hi_reloc ? \"%gd_pc_hi20\" : \"%got_pc_lo12\";\n       break;\n \n     case SYMBOL_TLSLDM:\n-      reloc = hi_reloc ? \"%ld_pc_hi20\" : \"%got_pc_lo12\";\n+      if (hi64_part)\n+\t{\n+\t  if (TARGET_CMODEL_EXTREME)\n+\t    reloc = hi_reloc ? \"%got64_pc_hi12\" : \"%got64_pc_lo20\";\n+\t  else\n+\t    gcc_unreachable ();\n+\t}\n+      else\n+\treloc = hi_reloc ? \"%ld_pc_hi20\" : \"%got_pc_lo12\";\n       break;\n \n     default:\n@@ -4637,6 +4777,8 @@ loongarch_print_operand_reloc (FILE *file, rtx op, bool hi_reloc)\n    'L'  Print the low-part relocation associated with OP.\n    'm'\tPrint one less than CONST_INT OP in decimal.\n    'N'\tPrint the inverse of the integer branch condition for comparison OP.\n+   'r'  Print address 12-31bit relocation associated with OP.\n+   'R'  Print address 32-51bit relocation associated with OP.\n    'T'\tPrint 'f' for (eq:CC ...), 't' for (ne:CC ...),\n \t      'z' for (eq:?I ...), 'n' for (ne:?I ...).\n    't'\tLike 'T', but with the EQ/NE cases reversed\n@@ -4694,7 +4836,13 @@ loongarch_print_operand (FILE *file, rtx op, int letter)\n     case 'h':\n       if (code == HIGH)\n \top = XEXP (op, 0);\n-      loongarch_print_operand_reloc (file, op, true /* hi_reloc */);\n+      loongarch_print_operand_reloc (file, op, false /* hi64_part */,\n+\t\t\t\t     true /* hi_reloc */);\n+      break;\n+\n+    case 'H':\n+      loongarch_print_operand_reloc (file, op, true /* hi64_part */,\n+\t\t\t\t     true /* hi_reloc */);\n       break;\n \n     case 'i':\n@@ -4703,7 +4851,8 @@ loongarch_print_operand (FILE *file, rtx op, int letter)\n       break;\n \n     case 'L':\n-      loongarch_print_operand_reloc (file, op, false /* lo_reloc */);\n+      loongarch_print_operand_reloc (file, op, false /* hi64_part*/,\n+\t\t\t\t     false /* lo_reloc */);\n       break;\n \n     case 'm':\n@@ -4718,6 +4867,16 @@ loongarch_print_operand (FILE *file, rtx op, int letter)\n \t\t\t\t\t    letter);\n       break;\n \n+    case 'r':\n+      loongarch_print_operand_reloc (file, op, false /* hi64_part */,\n+\t\t\t\t     true /* lo_reloc */);\n+      break;\n+\n+    case 'R':\n+      loongarch_print_operand_reloc (file, op, true /* hi64_part */,\n+\t\t\t\t     false /* lo_reloc */);\n+      break;\n+\n     case 't':\n     case 'T':\n       {\n@@ -4848,7 +5007,8 @@ loongarch_print_operand_address (FILE *file, machine_mode /* mode  */, rtx x)\n \n       case ADDRESS_LO_SUM:\n \tfprintf (file, \"%s,\", reg_names[REGNO (addr.reg)]);\n-\tloongarch_print_operand_reloc (file, addr.offset, false /* hi_reloc */);\n+\tloongarch_print_operand_reloc (file, addr.offset, false /* hi64_part */,\n+\t\t\t\t       false /* hi_reloc */);\n \treturn;\n \n       case ADDRESS_CONST_INT:\n@@ -5821,13 +5981,21 @@ loongarch_option_override_internal (struct gcc_options *opts)\n \n   switch (la_target.cmodel)\n     {\n-      case CMODEL_TINY_STATIC:\n       case CMODEL_EXTREME:\n+\tif (!TARGET_EXPLICIT_RELOCS)\n+\t  error (\"code model %qs needs %s\",\n+\t\t \"extreme\", \"-mexplicit-relocs\");\n+\n \tif (opts->x_flag_plt)\n-\t  error (\"code model %qs and %qs not support %s mode\",\n-\t\t \"tiny-static\", \"extreme\", \"plt\");\n+\t  {\n+\t    if (global_options_set.x_flag_plt)\n+\t      error (\"code model %qs is not compatible with %s\",\n+\t\t     \"extreme\", \"-fplt\");\n+\t    opts->x_flag_plt = 0;\n+\t  }\n \tbreak;\n \n+      case CMODEL_TINY_STATIC:\n       case CMODEL_NORMAL:\n       case CMODEL_TINY:\n       case CMODEL_LARGE:"}, {"sha": "8fc10444c2aefd2a84354f144e6eae8c7b64db81", "filename": "gcc/config/loongarch/loongarch.md", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69458145262e4cef76410f5d42fe0d12b7c395fb/gcc%2Fconfig%2Floongarch%2Floongarch.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69458145262e4cef76410f5d42fe0d12b7c395fb/gcc%2Fconfig%2Floongarch%2Floongarch.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Floongarch%2Floongarch.md?ref=69458145262e4cef76410f5d42fe0d12b7c395fb", "patch": "@@ -60,6 +60,9 @@\n \n   UNSPEC_LOAD_FROM_GOT\n   UNSPEC_ORI_L_LO12\n+  UNSPEC_LUI_L_HI20\n+  UNSPEC_LUI_H_LO20\n+  UNSPEC_LUI_H_HI12\n   UNSPEC_TLS_LOW\n ])\n \n@@ -1934,16 +1937,45 @@\n   [(set_attr \"type\" \"move\")]\n )\n \n+(define_insn \"@lui_l_hi20<mode>\"\n+  [(set (match_operand:P 0 \"register_operand\" \"=r\")\n+\t(unspec:P [(match_operand:P 1 \"symbolic_operand\")]\n+\tUNSPEC_LUI_L_HI20))]\n+  \"\"\n+  \"lu12i.w\\t%0,%r1\"\n+  [(set_attr \"type\" \"move\")]\n+)\n+\n (define_insn \"@ori_l_lo12<mode>\"\n   [(set (match_operand:P 0 \"register_operand\" \"=r\")\n \t(unspec:P [(match_operand:P 1 \"register_operand\" \"r\")\n-\t\t    (match_operand:P 2 \"symbolic_operand\")]\n+\t\t   (match_operand:P 2 \"symbolic_operand\")]\n \tUNSPEC_ORI_L_LO12))]\n   \"\"\n   \"ori\\t%0,%1,%L2\"\n   [(set_attr \"type\" \"move\")]\n )\n \n+(define_insn \"lui_h_lo20\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(unspec:DI [(match_operand:DI 1 \"register_operand\" \"0\")\n+\t\t    (match_operand:DI 2 \"symbolic_operand\")]\n+\tUNSPEC_LUI_H_LO20))]\n+  \"TARGET_64BIT\"\n+  \"lu32i.d\\t%0,%R2\"\n+  [(set_attr \"type\" \"move\")]\n+)\n+\n+(define_insn \"lui_h_hi12\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(unspec:DI [(match_operand:DI 1 \"register_operand\" \"r\")\n+\t\t    (match_operand:DI 2 \"symbolic_operand\")]\n+\tUNSPEC_LUI_H_HI12))]\n+  \"TARGET_64BIT\"\n+  \"lu52i.d\\t%0,%1,%H2\"\n+  [(set_attr \"type\" \"move\")]\n+)\n+\n ;; Convert floating-point numbers to integers\n (define_insn \"frint_<fmt>\"\n   [(set (match_operand:ANYF 0 \"register_operand\" \"=f\")"}, {"sha": "e38c6fbdd5fad0fd9883fc4a76d8506a50bdc11d", "filename": "gcc/config/loongarch/predicates.md", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69458145262e4cef76410f5d42fe0d12b7c395fb/gcc%2Fconfig%2Floongarch%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69458145262e4cef76410f5d42fe0d12b7c395fb/gcc%2Fconfig%2Floongarch%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Floongarch%2Fpredicates.md?ref=69458145262e4cef76410f5d42fe0d12b7c395fb", "patch": "@@ -111,7 +111,7 @@\n   (match_code \"const,symbol_ref,label_ref\")\n {\n   /* Split symbol to high and low if return false.\n-     If defined TARGET_CMODEL_LARGE, all symbol would be splited,\n+     If defined TARGET_CMODEL_EXTREME, all symbol would be splited,\n      else if offset is not zero, the symbol would be splited.  */\n \n   enum loongarch_symbol_type symbol_type;\n@@ -126,10 +126,13 @@\n   switch (symbol_type)\n     {\n     case SYMBOL_PCREL:\n-      return 1;\n+      if (TARGET_CMODEL_EXTREME)\n+\treturn false;\n+      else\n+\treturn 1;\n \n     case SYMBOL_GOT_DISP:\n-      if (TARGET_CMODEL_LARGE || !flag_plt)\n+      if (TARGET_CMODEL_EXTREME || !flag_plt)\n \treturn false;\n       else\n \treturn 1;"}, {"sha": "78eb7ad7e7408b3eb312360bb3cbf47727dbf9be", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 10, "deletions": 40, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69458145262e4cef76410f5d42fe0d12b7c395fb/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69458145262e4cef76410f5d42fe0d12b7c395fb/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=69458145262e4cef76410f5d42fe0d12b7c395fb", "patch": "@@ -1021,6 +1021,7 @@ Objective-C and Objective-C++ Dialects}.\n -mcond-move-float  -mno-cond-move-float @gol\n -memcpy  -mno-memcpy -mstrict-align -mno-strict-align @gol\n -mmax-inline-memcpy-size=@var{n} @gol\n+-mexplicit-relocs -mno-explicit-relocs @gol\n -mcmodel=@var{code-model}}\n \n @emph{M32R/D Options}\n@@ -25090,50 +25091,19 @@ less than or equal to @var{n} bytes.  The default value of @var{n} is 1024.\n @item -mcmodel=@var{code-model}\n Set the code model to one of:\n @table @samp\n-@item tiny-static\n-@itemize @bullet\n-@item\n-local symbol and global strong symbol: The data section must be within +/-2MiB addressing space.\n-The text section must be within +/-128MiB addressing space.\n-@item\n-global weak symbol: The got table must be within +/-2GiB addressing space.\n-@end itemize\n-\n-@item tiny\n-@itemize @bullet\n-@item\n-local symbol: The data section must be within +/-2MiB addressing space.\n-The text section must be within +/-128MiB\n-addressing space.\n-@item\n-global symbol: The got table must be within +/-2GiB addressing space.\n-@end itemize\n+@item tiny-static (Not implemented yet)\n+@item tiny (Not implemented yet)\n \n @item normal\n-@itemize @bullet\n-@item\n-local symbol: The data section must be within +/-2GiB addressing space.\n-The text section must be within +/-128MiB addressing space.\n-@item\n-global symbol: The got table must be within +/-2GiB addressing space.\n-@end itemize\n+The text segment must be within 128MB addressing space.  The data segment must\n+be within 2GB addressing space.\n \n-@item large\n-@itemize @bullet\n-@item\n-local symbol: The data section must be within +/-2GiB addressing space.\n-The text section must be within +/-128GiB addressing space.\n-@item\n-global symbol: The got table must be within +/-2GiB addressing space.\n-@end itemize\n+@item large (Not implemented yet)\n \n-@item extreme(Not implemented yet)\n-@itemize @bullet\n-@item\n-local symbol: The data and text section must be within +/-8EiB addressing space.\n-@item\n-global symbol: The data got table must be within +/-8EiB addressing space.\n-@end itemize\n+@item extreme\n+This mode does not limit the size of the code segment and data segment.\n+The @option{-mcmodel=extreme} option is incompatible with @option{-fplt} and\n+@option{-mno-explicit-relocs}.\n @end table\n The default code model is @code{normal}.\n "}, {"sha": "76bf11b0c0320d8f201947999762c9dd4f11a827", "filename": "gcc/testsuite/gcc.target/loongarch/func-call-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69458145262e4cef76410f5d42fe0d12b7c395fb/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Ffunc-call-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69458145262e4cef76410f5d42fe0d12b7c395fb/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Ffunc-call-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Ffunc-call-1.c?ref=69458145262e4cef76410f5d42fe0d12b7c395fb", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-mabi=lp64d -O0 -fpic -fplt -mno-explicit-relocs\" } */\n+/* { dg-options \"-mabi=lp64d -O0 -fpic -fplt -mno-explicit-relocs -mcmodel=normal\" } */\n /* { dg-final { scan-assembler \"test:.*bl\\t%plt\\\\(g\\\\)\\n\" } } */\n /* { dg-final { scan-assembler \"test1:.*bl\\t%plt\\\\(f\\\\)\\n\" } } */\n /* { dg-final { scan-assembler \"test2:.*bl\\tl\\n\" } } */"}, {"sha": "4b468fef8b4517553be22e41d8c62b1fec6b257a", "filename": "gcc/testsuite/gcc.target/loongarch/func-call-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69458145262e4cef76410f5d42fe0d12b7c395fb/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Ffunc-call-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69458145262e4cef76410f5d42fe0d12b7c395fb/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Ffunc-call-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Ffunc-call-2.c?ref=69458145262e4cef76410f5d42fe0d12b7c395fb", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-mabi=lp64d -O0 -fno-pic -fplt -mno-explicit-relocs\" } */\n+/* { dg-options \"-mabi=lp64d -O0 -fno-pic -fplt -mno-explicit-relocs -mcmodel=normal\" } */\n /* { dg-final { scan-assembler \"test:.*bl\\t%plt\\\\(g\\\\)\\n\" } } */\n /* { dg-final { scan-assembler \"test1:.*bl\\tf\\n\" } } */\n /* { dg-final { scan-assembler \"test2:.*bl\\tl\\n\" } } */"}, {"sha": "dd3a4882d6096523407b1417dbce31b999109fc3", "filename": "gcc/testsuite/gcc.target/loongarch/func-call-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69458145262e4cef76410f5d42fe0d12b7c395fb/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Ffunc-call-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69458145262e4cef76410f5d42fe0d12b7c395fb/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Ffunc-call-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Ffunc-call-3.c?ref=69458145262e4cef76410f5d42fe0d12b7c395fb", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-mabi=lp64d -O0 -fpic -fno-plt -mno-explicit-relocs\" } */\n+/* { dg-options \"-mabi=lp64d -O0 -fpic -fno-plt -mno-explicit-relocs -mcmodel=normal\" } */\n /* { dg-final { scan-assembler \"test:.*la\\.global\\t.*g\\n\\tjirl\" } } */\n /* { dg-final { scan-assembler \"test1:.*la\\.global\\t.*f\\n\\tjirl\" } } */\n /* { dg-final { scan-assembler \"test2:.*bl\\tl\\n\" } } */"}, {"sha": "f8158ec349f8cfec79c120b7ca4f87025ca556c3", "filename": "gcc/testsuite/gcc.target/loongarch/func-call-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69458145262e4cef76410f5d42fe0d12b7c395fb/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Ffunc-call-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69458145262e4cef76410f5d42fe0d12b7c395fb/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Ffunc-call-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Ffunc-call-4.c?ref=69458145262e4cef76410f5d42fe0d12b7c395fb", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-mabi=lp64d -O0 -fno-pic -fno-plt -mno-explicit-relocs\" } */\n+/* { dg-options \"-mabi=lp64d -O0 -fno-pic -fno-plt -mno-explicit-relocs -mcmodel=normal\" } */\n /* { dg-final { scan-assembler \"test:.*la\\.global\\t.*g\\n\\tjirl\" } } */\n /* { dg-final { scan-assembler \"test1:.*bl\\tf\\n\" } } */\n /* { dg-final { scan-assembler \"test2:.*bl\\tl\\n\" } } */"}, {"sha": "37994af430dfb69f3368572353c4a8484ddb09c9", "filename": "gcc/testsuite/gcc.target/loongarch/func-call-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69458145262e4cef76410f5d42fe0d12b7c395fb/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Ffunc-call-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69458145262e4cef76410f5d42fe0d12b7c395fb/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Ffunc-call-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Ffunc-call-5.c?ref=69458145262e4cef76410f5d42fe0d12b7c395fb", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-mabi=lp64d -O0 -fpic -fplt -mexplicit-relocs\" } */\n+/* { dg-options \"-mabi=lp64d -O0 -fpic -fplt -mexplicit-relocs -mcmodel=normal\" } */\n /* { dg-final { scan-assembler \"test:.*bl\\t%plt\\\\(g\\\\)\\n\" } } */\n /* { dg-final { scan-assembler \"test1:.*bl\\t%plt\\\\(f\\\\)\\n\" } } */\n /* { dg-final { scan-assembler \"test2:.*bl\\tl\\n\" } } */"}, {"sha": "8e366e376e76593c8a185af52b85117623e8256b", "filename": "gcc/testsuite/gcc.target/loongarch/func-call-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69458145262e4cef76410f5d42fe0d12b7c395fb/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Ffunc-call-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69458145262e4cef76410f5d42fe0d12b7c395fb/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Ffunc-call-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Ffunc-call-6.c?ref=69458145262e4cef76410f5d42fe0d12b7c395fb", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-mabi=lp64d -O0 -fno-pic -fplt -mexplicit-relocs\" } */\n+/* { dg-options \"-mabi=lp64d -O0 -fno-pic -fplt -mexplicit-relocs -mcmodel=normal\" } */\n /* { dg-final { scan-assembler \"test:.*bl\\t%plt\\\\(g\\\\)\\n\" } } */\n /* { dg-final { scan-assembler \"test1:.*bl\\tf\\n\" } } */\n /* { dg-final { scan-assembler \"test2:.*bl\\tl\\n\" } } */"}, {"sha": "4177c3d962e7b365b4c6818b3b5c3de3409fea13", "filename": "gcc/testsuite/gcc.target/loongarch/func-call-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69458145262e4cef76410f5d42fe0d12b7c395fb/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Ffunc-call-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69458145262e4cef76410f5d42fe0d12b7c395fb/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Ffunc-call-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Ffunc-call-7.c?ref=69458145262e4cef76410f5d42fe0d12b7c395fb", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-mabi=lp64d -O0 -fpic -fno-plt -mexplicit-relocs\" } */\n+/* { dg-options \"-mabi=lp64d -O0 -fpic -fno-plt -mexplicit-relocs -mcmodel=normal\" } */\n /* { dg-final { scan-assembler \"test:.*pcalau12i\\t.*%got_pc_hi20\\\\(g\\\\)\\n\\tld\\.d\\t.*%got_pc_lo12\\\\(g\\\\)\\n\\tjirl\" } } */\n /* { dg-final { scan-assembler \"test1:.*pcalau12i\\t.*%got_pc_hi20\\\\(f\\\\)\\n\\tld\\.d\\t.*%got_pc_lo12\\\\(f\\\\)\\n\\tjirl\" } } */\n /* { dg-final { scan-assembler \"test2:.*bl\\tl\\n\" } } */"}, {"sha": "4254eaa16d4436781d7dcfcf37e07f0b7b58c267", "filename": "gcc/testsuite/gcc.target/loongarch/func-call-8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69458145262e4cef76410f5d42fe0d12b7c395fb/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Ffunc-call-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69458145262e4cef76410f5d42fe0d12b7c395fb/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Ffunc-call-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Ffunc-call-8.c?ref=69458145262e4cef76410f5d42fe0d12b7c395fb", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-mabi=lp64d -O0 -fno-pic -fno-plt -mexplicit-relocs\" } */\n+/* { dg-options \"-mabi=lp64d -O0 -fno-pic -fno-plt -mexplicit-relocs -mcmodel=normal\" } */\n /* { dg-final { scan-assembler \"test:.*pcalau12i\\t.*%got_pc_hi20\\\\(g\\\\)\\n\\tld\\.d\\t.*%got_pc_lo12\\\\(g\\\\)\\n\\tjirl\" } } */\n /* { dg-final { scan-assembler \"test1:.*bl\\tf\\n\" } } */\n /* { dg-final { scan-assembler \"test2:.*bl\\tl\\n\" } } */"}, {"sha": "db1e0f853961ed51be92296682c9e4c72b05851b", "filename": "gcc/testsuite/gcc.target/loongarch/func-call-extreme-1.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69458145262e4cef76410f5d42fe0d12b7c395fb/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Ffunc-call-extreme-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69458145262e4cef76410f5d42fe0d12b7c395fb/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Ffunc-call-extreme-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Ffunc-call-extreme-1.c?ref=69458145262e4cef76410f5d42fe0d12b7c395fb", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mabi=lp64d -O0 -fno-pic -fno-plt -mexplicit-relocs -mcmodel=extreme\" } */\n+/* { dg-final { scan-assembler \"test:.*pcalau12i.*%got_pc_hi20.*\\n\\taddi\\.d.*%got_pc_lo12.*\\n\\tlu32i\\.d.*%got64_pc_lo20.*\\n\\tlu52i\\.d.*%got64_pc_hi12.*\\n\\tldx\\.d\" } } */\n+/* { dg-final { scan-assembler \"test1:.*pcalau12i.*%pc_hi20.*\\n\\taddi\\.d.*%pc_lo12.*\\n\\tlu32i\\.d.*%pc64_lo20.*\\n\\tlu52i\\.d.*pc64_hi12.*\\n\\tadd\\.d\" } } */\n+/* { dg-final { scan-assembler \"test2:.*pcalau12i.*%pc_hi20.*\\n\\taddi\\.d.*%pc_lo12.*\\n\\tlu32i\\.d.*%pc64_lo20.*\\n\\tlu52i\\.d.*pc64_hi12.*\\n\\tadd\\.d\" } } */\n+\n+extern void g (void);\n+void\n+f (void)\n+{}\n+\n+static void\n+l (void)\n+{}\n+\n+void\n+test (void)\n+{\n+  g ();\n+}\n+\n+void\n+test1 (void)\n+{\n+  f ();\n+}\n+\n+void\n+test2 (void)\n+{\n+  l ();\n+}"}, {"sha": "21bf81ae8377829d047375995c4b4021033ebede", "filename": "gcc/testsuite/gcc.target/loongarch/func-call-extreme-2.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69458145262e4cef76410f5d42fe0d12b7c395fb/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Ffunc-call-extreme-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69458145262e4cef76410f5d42fe0d12b7c395fb/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Ffunc-call-extreme-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Ffunc-call-extreme-2.c?ref=69458145262e4cef76410f5d42fe0d12b7c395fb", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mabi=lp64d -O0 -fpic -fno-plt -mexplicit-relocs -mcmodel=extreme\" } */\n+/* { dg-final { scan-assembler \"test:.*pcalau12i.*%got_pc_hi20.*\\n\\taddi\\.d.*%got_pc_lo12.*\\n\\tlu32i\\.d.*%got64_pc_lo20.*\\n\\tlu52i\\.d.*%got64_pc_hi12.*\\n\\tldx\\.d\" } } */\n+/* { dg-final { scan-assembler \"test1:.*pcalau12i.*%got_pc_hi20.*\\n\\taddi\\.d.*%got_pc_lo12.*\\n\\tlu32i\\.d.*%got64_pc_lo20.*\\n\\tlu52i\\.d.*%got64_pc_hi12.*\\n\\tldx\\.d\" } } */\n+/* { dg-final { scan-assembler \"test2:.*pcalau12i.*%pc_hi20.*\\n\\taddi\\.d.*%pc_lo12.*\\n\\tlu32i\\.d.*%pc64_lo20.*\\n\\tlu52i\\.d.*pc64_hi12.*\\n\\tadd\\.d\" } } */\n+\n+extern void g (void);\n+void\n+f (void)\n+{}\n+\n+static void\n+l (void)\n+{}\n+\n+void\n+test (void)\n+{\n+  g ();\n+}\n+\n+void\n+test1 (void)\n+{\n+  f ();\n+}\n+\n+void\n+test2 (void)\n+{\n+  l ();\n+}"}, {"sha": "3ec8bd229fdc080674ac46b33bdac841d0c0b4fc", "filename": "gcc/testsuite/gcc.target/loongarch/relocs-symbol-noaddend.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69458145262e4cef76410f5d42fe0d12b7c395fb/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Frelocs-symbol-noaddend.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69458145262e4cef76410f5d42fe0d12b7c395fb/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Frelocs-symbol-noaddend.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Frelocs-symbol-noaddend.c?ref=69458145262e4cef76410f5d42fe0d12b7c395fb", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-mabi=lp64d -mexplicit-relocs -fno-pic -O2\" } */\n+/* { dg-options \"-mabi=lp64d -mexplicit-relocs -fno-pic -O2 -mcmodel=normal\" } */\n /* { dg-final { scan-assembler \"pcalau12i.*%pc_hi20\\\\(\\.LANCHOR0\\\\)\\n\" } } */\n /* { dg-final { scan-assembler \"addi\\.d.*%pc_lo12\\\\(\\.LANCHOR0\\\\)\\n\" } } */\n /* { dg-final { scan-assembler \"ldptr.d\\t\\\\\\$r4,.*,0\\n\" } } */"}]}