{"sha": "dd29d26b24928bdbcbdb1e7cbe09284f76f886f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGQyOWQyNmIyNDkyOGJkYmNiZGIxZTdjYmUwOTI4NGY3NmY4ODZmNw==", "commit": {"author": {"name": "Giovanni Bajo", "email": "giovannibajo@gcc.gnu.org", "date": "2004-07-09T00:59:05Z"}, "committer": {"name": "Giovanni Bajo", "email": "giovannibajo@gcc.gnu.org", "date": "2004-07-09T00:59:05Z"}, "message": "re PR c++/8211 (-Weffc++ warns about copyable classes with func ptr members)\n\n\tPR c++/8211\n\tPR c++/16165\n\t* class.c (check_field_decls): Improve -Weffc++ warning: do not\n\twarn for pointers to functions/members, or for classes without\n\tdestructors.\n\n\tPR c++/8211\n\tPR c++/16165\n\t* g++.dg/warn/effc3.C: New test.\n\nFrom-SVN: r84338", "tree": {"sha": "1114998697276d9bcef8e06602efabdc91eb7497", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1114998697276d9bcef8e06602efabdc91eb7497"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd29d26b24928bdbcbdb1e7cbe09284f76f886f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd29d26b24928bdbcbdb1e7cbe09284f76f886f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd29d26b24928bdbcbdb1e7cbe09284f76f886f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd29d26b24928bdbcbdb1e7cbe09284f76f886f7/comments", "author": {"login": "rasky", "id": 1014109, "node_id": "MDQ6VXNlcjEwMTQxMDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1014109?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rasky", "html_url": "https://github.com/rasky", "followers_url": "https://api.github.com/users/rasky/followers", "following_url": "https://api.github.com/users/rasky/following{/other_user}", "gists_url": "https://api.github.com/users/rasky/gists{/gist_id}", "starred_url": "https://api.github.com/users/rasky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rasky/subscriptions", "organizations_url": "https://api.github.com/users/rasky/orgs", "repos_url": "https://api.github.com/users/rasky/repos", "events_url": "https://api.github.com/users/rasky/events{/privacy}", "received_events_url": "https://api.github.com/users/rasky/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rasky", "id": 1014109, "node_id": "MDQ6VXNlcjEwMTQxMDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1014109?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rasky", "html_url": "https://github.com/rasky", "followers_url": "https://api.github.com/users/rasky/followers", "following_url": "https://api.github.com/users/rasky/following{/other_user}", "gists_url": "https://api.github.com/users/rasky/gists{/gist_id}", "starred_url": "https://api.github.com/users/rasky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rasky/subscriptions", "organizations_url": "https://api.github.com/users/rasky/orgs", "repos_url": "https://api.github.com/users/rasky/repos", "events_url": "https://api.github.com/users/rasky/events{/privacy}", "received_events_url": "https://api.github.com/users/rasky/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45dc67b726b159bfc8740f442025ef4b6b619836", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45dc67b726b159bfc8740f442025ef4b6b619836", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45dc67b726b159bfc8740f442025ef4b6b619836"}], "stats": {"total": 109, "additions": 101, "deletions": 8}, "files": [{"sha": "3d194a4366802cc8c6207b53438535f531ef63a6", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd29d26b24928bdbcbdb1e7cbe09284f76f886f7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd29d26b24928bdbcbdb1e7cbe09284f76f886f7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=dd29d26b24928bdbcbdb1e7cbe09284f76f886f7", "patch": "@@ -1,3 +1,11 @@\n+2004-07-09  Giovanni Bajo  <giovannibajo@gcc.gnu.org>\n+\n+\tPR c++/8211\n+\tPR c++/16165\n+\t* class.c (check_field_decls): Improve -Weffc++ warning: do not\n+\twarn for pointers to functions/members, or for classes without\n+\tdestructors.\n+\n 2004-07-08  Mark Mitchell  <mark@codesourcery.com>\n \n \t* name-lookup.h (struct cp_binding_level): Update documentation"}, {"sha": "f9c3b706592eca96fff8d3c66607b1d86f38b23b", "filename": "gcc/cp/class.c", "status": "modified", "additions": 29, "deletions": 8, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd29d26b24928bdbcbdb1e7cbe09284f76f886f7/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd29d26b24928bdbcbdb1e7cbe09284f76f886f7/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=dd29d26b24928bdbcbdb1e7cbe09284f76f886f7", "patch": "@@ -2925,13 +2925,13 @@ check_field_decls (tree t, tree *access_decls,\n {\n   tree *field;\n   tree *next;\n-  int has_pointers;\n+  bool has_pointers;\n   int any_default_members;\n \n   /* Assume there are no access declarations.  */\n   *access_decls = NULL_TREE;\n   /* Assume this class has no pointer members.  */\n-  has_pointers = 0;\n+  has_pointers = false;\n   /* Assume none of the members of this class have default\n      initializations.  */\n   any_default_members = 0;\n@@ -3072,9 +3072,14 @@ check_field_decls (tree t, tree *access_decls,\n \t}\n \n       type = strip_array_types (type);\n-      \n-      if (TYPE_PTR_P (type))\n-\thas_pointers = 1;\n+\n+      /* This is used by -Weffc++ (see below). Warn only for pointers\n+\t to members which might hold dynamic memory. So do not warn\n+\t for pointers to functions or pointers to members.  */\n+      if (TYPE_PTR_P (type)\n+\t  && !TYPE_PTRFN_P (type)\n+\t  && !TYPE_PTR_TO_MEMBER_P (type))\n+\thas_pointers = true;\n \n       if (CLASS_TYPE_P (type))\n \t{\n@@ -3140,9 +3145,25 @@ check_field_decls (tree t, tree *access_decls,\n \t\t\t  &any_default_members);\n     }\n \n-  /* Effective C++ rule 11.  */\n-  if (has_pointers && warn_ecpp && TYPE_HAS_CONSTRUCTOR (t)\n-      && ! (TYPE_HAS_INIT_REF (t) && TYPE_HAS_ASSIGN_REF (t)))\n+  /* Effective C++ rule 11: if a class has dynamic memory held by pointers,\n+     it should also define a copy constructor and an assignment operator to\n+     implement the correct copy semantic (deep vs shallow, etc.). As it is\n+     not feasible to check whether the constructors do allocate dynamic memory\n+     and store it within members, we approximate the warning like this:\n+\n+     -- Warn only if there are members which are pointers\n+     -- Warn only if there is a non-trivial constructor (otherwise,\n+\tthere cannot be memory allocated).\n+     -- Warn only if there is a non-trivial destructor. We assume that the\n+\tuser at least implemented the cleanup correctly, and a destructor\n+\tis needed to free dynamic memory.\n+\t\n+     This seems enough for pratical purposes.  */\n+    if (warn_ecpp\n+\t&& has_pointers\n+\t&& TYPE_HAS_CONSTRUCTOR (t)\n+\t&& TYPE_HAS_DESTRUCTOR (t)\n+\t&& !(TYPE_HAS_INIT_REF (t) && TYPE_HAS_ASSIGN_REF (t)))\n     {\n       warning (\"`%#T' has pointer data members\", t);\n       "}, {"sha": "bc11b674407223a3d20b8ec56492576345768445", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd29d26b24928bdbcbdb1e7cbe09284f76f886f7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd29d26b24928bdbcbdb1e7cbe09284f76f886f7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=dd29d26b24928bdbcbdb1e7cbe09284f76f886f7", "patch": "@@ -1,3 +1,9 @@\n+2004-07-09  Giovanni Bajo  <giovannibajo@gcc.gnu.org>\n+\n+\tPR c++/8211\n+\tPR c++/16165\n+\t* g++.dg/warn/effc3.C: New test.\n+\n 2004-07-09  David Billinghurst (David.Billinghurst@riotinto.com)\n \n \t* gfortran.dg/g77/f77-edit-i-in.f: Copy from g77.dg and"}, {"sha": "ba2cc03998656974d4aa2aecb3382e18a4577e94", "filename": "gcc/testsuite/g++.dg/warn/effc3.C", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd29d26b24928bdbcbdb1e7cbe09284f76f886f7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Feffc3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd29d26b24928bdbcbdb1e7cbe09284f76f886f7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Feffc3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Feffc3.C?ref=dd29d26b24928bdbcbdb1e7cbe09284f76f886f7", "patch": "@@ -0,0 +1,58 @@\n+// { dg-do compile }\n+// { dg-options \"-Weffc++\" }\n+// Contributed by Benjamin Kosnik <bkoz at redhat dot com>\n+// PR c++/16165 and PR c++/8211: Improve item 11 of -Weffc++\n+\n+\n+// We should not warn for this class since this kind of pointers can\n+//  never hold dynamic memory.\n+struct A {\n+  void (*func1)(void);\n+  void (A::*func2)(void);\n+  int A::*func3;\n+\n+  int a;\n+  void b(void);\n+\n+  A();\n+  ~A();\n+};\n+\n+// We do not warn for this class because there is no destructor, so we\n+//  assume there is no dynamic memory allocated (it could point to a\n+//  global variable).\n+struct B {\n+  int *ptr;\n+  B();\n+};\n+\n+\n+// We should emit a warning for these\n+struct C1 {\t\t// { dg-warning \"\" \"\" }\n+  int *ptr;\n+  C1();\n+  ~C1();\n+};\n+\n+struct C2 {\t\t// { dg-warning \"\" \"\" }\n+  int *ptr;\n+  C2();\n+  C2(const C2&);\n+  ~C2();\n+};\n+\n+struct C3 {\t\t// { dg-warning \"\" \"\" }\n+  int *ptr;\n+  C3();\n+  ~C3();\n+  C3& operator=(const C3&);\n+};\n+\n+// But not for this\n+struct C4 {\n+  int *ptr;\n+  C4();\n+  C4(const C4&);\n+  ~C4();\n+  C4& operator=(const C4&);\n+};"}]}