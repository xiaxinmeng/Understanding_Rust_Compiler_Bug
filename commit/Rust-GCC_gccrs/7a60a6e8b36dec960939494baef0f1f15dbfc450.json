{"sha": "7a60a6e8b36dec960939494baef0f1f15dbfc450", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2E2MGE2ZThiMzZkZWM5NjA5Mzk0OTRiYWVmMGYxZjE1ZGJmYzQ1MA==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-07-03T00:16:31Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-07-03T00:16:31Z"}, "message": "Daily bump.", "tree": {"sha": "5fd3554d2040754dda4e795d0b3458b0afc38ad7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5fd3554d2040754dda4e795d0b3458b0afc38ad7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a60a6e8b36dec960939494baef0f1f15dbfc450", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a60a6e8b36dec960939494baef0f1f15dbfc450", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a60a6e8b36dec960939494baef0f1f15dbfc450", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a60a6e8b36dec960939494baef0f1f15dbfc450/comments", "author": null, "committer": null, "parents": [{"sha": "c77230856eac2d28eb7bf10985846885c3c8727b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c77230856eac2d28eb7bf10985846885c3c8727b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c77230856eac2d28eb7bf10985846885c3c8727b"}], "stats": {"total": 328, "additions": 327, "deletions": 1}, "files": [{"sha": "e38ab1e1fe4a5f7b2fd97bc9991b113c62122e67", "filename": "contrib/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a60a6e8b36dec960939494baef0f1f15dbfc450/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a60a6e8b36dec960939494baef0f1f15dbfc450/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=7a60a6e8b36dec960939494baef0f1f15dbfc450", "patch": "@@ -1,3 +1,7 @@\n+2021-07-02  Eugene Rozenfeld  <erozen@microsoft.com>\n+\n+\t* gen_autofdo_event.py: handle stepping, non-working PEBS\n+\n 2021-06-28  Martin Liska  <mliska@suse.cz>\n \n \t* mklog.py: Handle correctly long lines."}, {"sha": "8b003c66780470e6b499c3c689c36efe562b1139", "filename": "gcc/ChangeLog", "status": "modified", "additions": 170, "deletions": 0, "changes": 170, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a60a6e8b36dec960939494baef0f1f15dbfc450/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a60a6e8b36dec960939494baef0f1f15dbfc450/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7a60a6e8b36dec960939494baef0f1f15dbfc450", "patch": "@@ -1,3 +1,173 @@\n+2021-07-02  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/98871\n+\tPR middle-end/98512\n+\t* diagnostic.c (get_any_inlining_info): New.\n+\t(update_effective_level_from_pragmas): Handle inlining context.\n+\t(diagnostic_enabled): Same.\n+\t(diagnostic_report_diagnostic): Same.\n+\t* diagnostic.h (struct diagnostic_info): Add ctor.\n+\t(struct diagnostic_context): Add new member.\n+\t* tree-diagnostic.c (set_inlining_locations): New.\n+\t(tree_diagnostics_defaults): Set new callback pointer.\n+\n+2021-07-02  Peter Bergner  <bergner@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000-builtin.def (BU_MMA_PAIR_LD, BU_MMA_PAIR_ST):\n+\tNew macros.\n+\t(__builtin_vsx_lxvp, __builtin_vsx_stxvp): New built-ins.\n+\t* config/rs6000/rs6000-call.c (rs6000_gimple_fold_mma_builtin): Expand\n+\tlxvp and stxvp built-ins.\n+\t(mma_init_builtins): Handle lxvp and stxvp built-ins.\n+\t(builtin_function_type): Likewise.\n+\t* doc/extend.texi (__builtin_vsx_lxvp, __builtin_mma_stxvp): Document.\n+\n+2021-07-02  Jeff Law  <jeffreyalaw@gmail.com>\n+\n+\t* config/h8300/h8300-protos.h (compute_a_shift_cc): Accept\n+\tadditional argument for the code.\n+\t* config/h8300/h8300.c (compute_a_shift_cc): Accept additional\n+\targument for the code.  Just return if the ZN bits are useful or\n+\tnot rather than the old style CC_* enums.\n+\t* config/h8300/shiftrotate.md (shiftqi_noscratch): Move before\n+\tmore generic shiftqi patterns.\n+\t(shifthi_noscratch, shiftsi_noscratch): Similarly.\n+\t(shiftqi_noscratch_set_flags): New pattern.\n+\t(shifthi_noscratch_set_flags, shiftsi_noscratch_set_flags): Likewise.\n+\n+2021-07-02  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/101223\n+\t* range-op.cc (build_lt): Add -1 for signed values.\n+\t(built_gt): Subtract -1 for signed values.\n+\n+2021-07-02  David Faust  <david.faust@oracle.com>\n+\n+\t* btfout.c (get_btf_kind): Support BTF_KIND_FLOAT.\n+\t(btf_asm_type): Likewise.\n+\n+2021-07-02  Jeff Law  <jeffreyalaw@gmail.com>\n+\n+\t* config/h8300/h8300-protos.h (output_a_shift): Make first argument\n+\tan array of rtx rather than a pointer to rtx.  Add code argument.\n+\t(compute_a_shift_length): Similarly.\n+\t* config/h8300/h8300.c (h8300_shift_costs): Adjust now that the\n+\tshift itself isn't an operand.  Create dummy operand[0] to carry\n+\ta mode and pass a suitable rtx code to compute_a_shift_length.\n+\t(get_shift_alg): Adjust operand number of clobber in output templates.\n+\t(output_a_shift): Make first argument an array of rtx rather than\n+\ta pointer to rtx.  Add code argument for the type of shift.\n+\tAdjust now that the shift itself is no longer an operand.\n+\t(compute_a_shift_length): Similarly.\n+\t* config/h8300/shiftrotate.md (shiftqi, shifthi, shiftsi): Use an\n+\titerator rather than nshift_operator.\n+\t(shiftqi_noscratch, shifthi_noscratch, shiftsi_noscratch): Likewise.\n+\t(shiftqi_clobber_flags): Adjust to API changes in output_a_shift\n+\tand compute_a_shift_length.\n+\t(shiftqi_noscratch_clobber_flags): Likewise.\n+\t(shifthi_noscratch_clobber_flags): Likewise.\n+\t(shiftsi_noscratch_clobber_flags): Likewise.\n+\n+2021-07-02  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR debug/101283\n+\t* config/darwin.h (DSYMUTIL_SPEC): Do not try to run\n+\tdsymutil for BTF/CTF.\n+\n+2021-07-02  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR debug/101283\n+\t* config/darwin.h (CTF_INFO_SECTION_NAME): Update the\n+\tsegment to include BTF.\n+\t(BTF_INFO_SECTION_NAME): New.\n+\n+2021-07-02  Jeff Law  <jeffreyalaw@gmail.com>\n+\n+\t* config/m32r/m32r-protos.h (call_operand): Adjust return type.\n+\t(small_data_operand, memreg_operand, small_insn_p): Likewise.\n+\t* config/m32r/m32r.c (call_operand): Adjust return type.\n+\t(small_data_operand, memreg_operand): Likewise.\n+\n+2021-07-02  Jeff Law  <jeffreyalaw@gmail.com>\n+\n+\t* config/frv/frv-protos.h  (integer_register_operand): Adjust return\n+\ttype.\n+\t(frv_load_operand, gpr_or_fpr_operand, gpr_no_subreg_operand): Likewise.\n+\t(fpr_or_int6_operand, gpr_or_int_operand); Likewise.\n+\t(gpr_or_int12_operand, gpr_or_int10_operand); Likewise.\n+\t(move_source_operand, move_destination_operand): Likewise.\n+\t(condexec_source_operand, condexec_dest_operand): Likewise.\n+\t(lr_operand, gpr_or_memory_operand, fpr_or_memory_operand): Likewise.\n+\t(reg_or_0_operand, fcc_operand, icc_operand, cc_operand): Likewise.\n+\t(fcr_operand, icr_operand, cr_operand, call_operand): Likewise.\n+\t(fpr_operand, even_reg_operand, odd_reg_operand): Likewise.\n+\t(even_gpr_operand, odd_gpr_operand, quad_fpr_operand): Likewise.\n+\t(even_fpr_operand, odd_fpr_operand): Likewise.\n+\t(dbl_memory_one_insn_operand, dbl_memory_two_insn_operand): Likewise.\n+\t(int12_operand, int6_operand, int5_operand, uint5_operand): Likewise.\n+\t(uint4_operand, uint1_operand, int_2word_operand): Likewise\n+\t(upper_int16_operand, uint16_operand, symbolic_operand): Likewise.\n+\t(relational_operator, float_relational_operator): Likewise.\n+\t(ccr_eqne_operator, minmax_operator): Likewise.\n+\t(condexec_si_binary_operator, condexec_si_media_operator): Likewise.\n+\t(condexec_si_divide_operator, condexec_si_unary_operator): Likewise.\n+\t(condexec_sf_conv_operator, condexec_sf_add_operator): Likewise.\n+\t(intop_compare_operator, acc_operand, even_acc_operand): Likewise.\n+\t(quad_acc_operand, accg_operand): Likewise.\n+\n+2021-07-02  Jeff Law  <jeffreyalaw@gmail.com>\n+\n+\t* config/stormy16/stormy16-protos.h (xstormy16_below_100_symbol): Change\n+\treturn type to a bool.\n+\t(nonimmediate_nonstack_operand): Likewise.\n+\t(xstormy16_splittable_below100_operand): Likewise.\n+\t* config/stormy16/stormy16.c (xstormy16_below_100_symbol): Fix\n+\treturn type.\n+\t(xstormy16_splittable_below100_operand): Likewise.\n+\n+2021-07-02  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/101293\n+\t* tree-ssa-loop-im.c (mem_ref_hasher::equal): Compare MEM_REF bases\n+\twith combined offsets.\n+\t(gather_mem_refs_stmt): Hash MEM_REFs as if their offset were\n+\tcombined with the rest of the offset.\n+\n+2021-07-02  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* config/i386/i386.c (asm_preferred_eh_data_format): Always use the\n+\tPIC encodings for PE-COFF targets.\n+\n+2021-07-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/101286\n+\t* config/i386/i386-expand.c (ix86_broadcast_from_integer_constant):\n+\tReturn nullptr for TImode inner mode.\n+\n+2021-07-02  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/101280\n+\tPR tree-optimization/101173\n+\t* gimple-loop-interchange.cc\n+\t(tree_loop_interchange::valid_data_dependences): Properly\n+\tguard all dependence checks with DDR_REVERSED_P or its\n+\tinverse.\n+\n+2021-07-02  Hongyu Wang  <hongyu.wang@intel.com>\n+\n+\t* config/i386/i386-expand.c (ix86_expand_builtin):\n+\tAdd branch to clear odata when ZF is set for asedecenc_expand\n+\tand wideaesdecenc_expand.\n+\n+2021-07-02  Eugene Rozenfeld  <erozen@microsoft.com>\n+\n+\t* config/i386/gcc-auto-profile: regenerate\n+\n+2021-07-02  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* config/i386/sse.md (trunc<mode><pmov_dst_4>2): Refined to ..\n+\t(trunc<mode><pmov_dst_4_lower>2): this.\n+\n 2021-07-01  David Malcolm  <dmalcolm@redhat.com>\n \n \t* diagnostic.h (diagnostic_context::m_file_cache): New field."}, {"sha": "7693fe4e2c5a5ba41e5fa613794e26aa1562a552", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a60a6e8b36dec960939494baef0f1f15dbfc450/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a60a6e8b36dec960939494baef0f1f15dbfc450/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=7a60a6e8b36dec960939494baef0f1f15dbfc450", "patch": "@@ -1 +1 @@\n-20210702\n+20210703"}, {"sha": "cd01f5c117fbfe8503030205b556e4833084c7ca", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a60a6e8b36dec960939494baef0f1f15dbfc450/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a60a6e8b36dec960939494baef0f1f15dbfc450/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=7a60a6e8b36dec960939494baef0f1f15dbfc450", "patch": "@@ -1,3 +1,11 @@\n+2021-07-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-common.h (enum c_omp_directive_kind): New enum.\n+\t(struct c_omp_directive): New type.\n+\t(c_omp_categorize_directive): Declare.\n+\t* c-omp.c (omp_directives): New variable.\n+\t(c_omp_categorize_directive): New function.\n+\n 2021-07-01  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* c-ada-spec.c (packed_layout): New global variable."}, {"sha": "27d6e891d24e9da36c75af7033f4955cee551ce0", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a60a6e8b36dec960939494baef0f1f15dbfc450/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a60a6e8b36dec960939494baef0f1f15dbfc450/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=7a60a6e8b36dec960939494baef0f1f15dbfc450", "patch": "@@ -1,3 +1,9 @@\n+2021-07-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/101297\n+\t* c-parser.c (c_parser_omp_atomic): Consume comma only if it\n+\tappears before a CPP_NAME.\n+\n 2021-06-25  Martin Sebor  <msebor@redhat.com>\n \n \t* c-decl.c (pop_scope): Replace direct uses of TREE_NO_WARNING with"}, {"sha": "90a2d2a501f1c8cd498eb7fd409ae333a581d920", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a60a6e8b36dec960939494baef0f1f15dbfc450/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a60a6e8b36dec960939494baef0f1f15dbfc450/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7a60a6e8b36dec960939494baef0f1f15dbfc450", "patch": "@@ -1,3 +1,56 @@\n+2021-07-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* parser.h (struct cp_lexer): Add in_omp_attribute_pragma member.\n+\t(struct cp_omp_declare_simd_data): Likewise.\n+\t* cp-tree.h (enum cp_tree_index): Add CPTI_OMP_IDENTIFIER.\n+\t(omp_identifier): Define.\n+\t* parser.c (cp_parser_skip_to_pragma_eol): Handle\n+\tin_omp_attribute_pragma CPP_PRAGMA_EOL followed by CPP_EOF.\n+\t(cp_parser_require_pragma_eol): Likewise.\n+\t(struct cp_omp_attribute_data): New type.\n+\t(cp_parser_handle_statement_omp_attributes): New function.\n+\t(cp_parser_statement): Handle OpenMP directives in statement's\n+\tattribute-specifier-seq.\n+\t(cp_parser_omp_directive_args, cp_parser_omp_sequence_args): New\n+\tfunctions.\n+\t(cp_parser_std_attribute): Handle omp::directive and omp::sequence\n+\tattributes.\n+\t(cp_parser_omp_all_clauses): If in_omp_attribute_pragma, allow\n+\ta comma also before the first clause.\n+\t(cp_parser_omp_allocate): Likewise.\n+\t(cp_parser_omp_atomic): Likewise.\n+\t(cp_parser_omp_depobj): Likewise.\n+\t(cp_parser_omp_flush): Likewise.\n+\t(cp_parser_omp_ordered): Likewise.\n+\t(cp_parser_omp_declare_simd): Save in_omp_attribute_pragma\n+\tinto struct cp_omp_declare_simd_data.\n+\t(cp_finish_omp_declare_variant): Add in_omp_attribute_pragma\n+\targument.  If set, allow a comma also before match clause.\n+\t(cp_parser_late_parsing_omp_declare_simd): If in_omp_attribute_pragma,\n+\tallow a comma also before the first clause.  Adjust\n+\tcp_finish_omp_declare_variant caller.\n+\t(cp_parser_omp_declare_target): If in_omp_attribute_pragma, allow\n+\ta comma also before the first clause.\n+\t(cp_parser_omp_declare_reduction_exprs): Likewise.\n+\t(cp_parser_omp_requires): Likewise.\n+\t* decl.c (initialize_predefined_identifiers): Initialize\n+\tomp_identifier.\n+\t* decl2.c (cplus_decl_attributes): Reject omp::directive and\n+\tomp::sequence attributes.\n+\n+2021-07-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/101297\n+\t* parser.c (cp_parser_omp_atomic): Consume comma only if it\n+\tappears before a CPP_NAME.\n+\n+2021-07-02  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/101247\n+\t* pt.c (any_template_parm_r) <case TEMPLATE_DECL>: Rewrite to\n+\tuse common_enclosing_class and to not depend on the TREE_TYPE\n+\tof outer levels pointing to the corresponding primary template.\n+\n 2021-07-01  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/101194"}, {"sha": "b6ace1e6a7f5db15694f5eb5d382691de3237e6f", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a60a6e8b36dec960939494baef0f1f15dbfc450/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a60a6e8b36dec960939494baef0f1f15dbfc450/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=7a60a6e8b36dec960939494baef0f1f15dbfc450", "patch": "@@ -1,3 +1,9 @@\n+2021-07-02  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/101282\n+\t* d-codegen.cc (build_assign): Force target_expr on RHS for non-POD\n+\tassignment expressions.\n+\n 2021-06-11  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \tPR d/100999"}, {"sha": "e18f267bb98351d99511749985963eab51563ea1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a60a6e8b36dec960939494baef0f1f15dbfc450/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a60a6e8b36dec960939494baef0f1f15dbfc450/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7a60a6e8b36dec960939494baef0f1f15dbfc450", "patch": "@@ -1,3 +1,66 @@\n+2021-07-02  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/101282\n+\t* gdc.dg/torture/pr101282.d: New test.\n+\n+2021-07-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* g++.dg/gomp/attrs-1.C: New test.\n+\t* g++.dg/gomp/attrs-2.C: New test.\n+\t* g++.dg/gomp/attrs-3.C: New test.\n+\n+2021-07-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/101297\n+\t* c-c++-common/gomp/atomic-24.c: New test.\n+\n+2021-07-02  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/101247\n+\t* g++.dg/cpp2a/concepts-memtmpl4.C: New test.\n+\n+2021-07-02  Peter Bergner  <bergner@linux.ibm.com>\n+\n+\t* gcc.target/powerpc/mma-builtin-7.c: New test.\n+\t* gcc.target/powerpc/mma-builtin-8.c: New test.\n+\n+2021-07-02  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/101223\n+\t* gcc.dg/pr101223.c: New.\n+\n+2021-07-02  David Faust  <david.faust@oracle.com>\n+\n+\t* gcc.dg/debug/btf/btf-float-1.c: New test.\n+\t* gcc.dg/debug/btf/btf-function-3.c: Use different unrepresentable type.\n+\t* gcc.dg/debug/btf/btf-struct-2.c: Likewise.\n+\t* gcc.dg/debug/btf/btf-variables-2.c: Likewise.\n+\n+2021-07-02  Maxim Kuvyrkov  <maxim.kuvyrkov@linaro.org>\n+\n+\t* lib/gcc-defs.exp: Add a comment.\n+\n+2021-07-02  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/101293\n+\t* gcc.dg/tree-ssa/ssa-lim-15.c: New testcase.\n+\n+2021-07-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/101286\n+\t* gcc.target/i386/avx2-pr101286.c: New test.\n+\n+2021-07-02  Hongyu Wang  <hongyu.wang@intel.com>\n+\n+\t* gcc.target/i386/keylocker-aesdec128kl.c: Update test.\n+\t* gcc.target/i386/keylocker-aesdec256kl.c: Likewise.\n+\t* gcc.target/i386/keylocker-aesdecwide128kl.c: Likewise.\n+\t* gcc.target/i386/keylocker-aesdecwide256kl.c: Likewise.\n+\t* gcc.target/i386/keylocker-aesenc128kl.c: Likewise.\n+\t* gcc.target/i386/keylocker-aesenc256kl.c: Likewise.\n+\t* gcc.target/i386/keylocker-aesencwide128kl.c: Likewise.\n+\t* gcc.target/i386/keylocker-aesencwide256kl.c: Likewise.\n+\n 2021-07-01  Michael Meissner  <meissner@linux.ibm.com>\n \n \t* gcc.target/powerpc/float128-cmove.c: New test."}, {"sha": "3d6fdd2f8991bf4dfe76d2e8bc74153799d44137", "filename": "include/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a60a6e8b36dec960939494baef0f1f15dbfc450/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a60a6e8b36dec960939494baef0f1f15dbfc450/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=7a60a6e8b36dec960939494baef0f1f15dbfc450", "patch": "@@ -1,3 +1,10 @@\n+2021-07-02  David Faust  <david.faust@oracle.com>\n+\n+\t* btf.h (struct btf_type): Update bit usage comment.\n+\t(BTF_INFO_KIND): Update bit mask.\n+\t(BTF_KIND_FLOAT): New define.\n+\t(BTF_KIND_MAX): Update.\n+\n 2021-06-28  Indu Bhagat  <indu.bhagat@oracle.com>\n \t    David Faust  <david.faust@oracle.com>\n \t    Jose E. Marchesi  <jose.marchesi@oracle.com>"}, {"sha": "222b103f5c93be27d280a6cfc511f2fd4522469d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a60a6e8b36dec960939494baef0f1f15dbfc450/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a60a6e8b36dec960939494baef0f1f15dbfc450/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7a60a6e8b36dec960939494baef0f1f15dbfc450", "patch": "@@ -1,3 +1,12 @@\n+2021-07-02  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/101271\n+\t* include/bits/unique_ptr.h (unique_ptr<T[],D>::operator[]):\n+\tRemove noexcept-specifier.\n+\t(unique_ptr<T[],D>::_S_nothrow_deref): Remove.\n+\t* testsuite/20_util/unique_ptr/lwg2762.cc: Remove checks for\n+\toperator[].\n+\n 2021-07-01  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* doc/doxygen/doxygroups.cc: Fix docs for std::literals."}]}