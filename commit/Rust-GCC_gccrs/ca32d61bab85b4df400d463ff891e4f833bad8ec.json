{"sha": "ca32d61bab85b4df400d463ff891e4f833bad8ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2EzMmQ2MWJhYjg1YjRkZjQwMGQ0NjNmZjg5MWU0ZjgzM2JhZDhlYw==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2018-09-17T07:18:17Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2018-09-17T07:18:17Z"}, "message": "re PR fortran/85954 (ICE in make_ssa_name_fn, at tree-ssanames.c:266)\n\n2018-09-17  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/85954\n\t* resolve.c (resolve_assoc_var): If the target expression is a\n\tdeferred charlen dummy and the associate name shares the\n\tcharlen, generate a new one. Make sure that new charlens are in\n\tthe namespace list so that they get cleaned up.\n\t* trans-array.c (gfc_is_reallocatable_lhs): Associate names are\n\tnot reallocatable.\n\t* trans-decl.c (gfc_get_symbol_decl): Put deferred character\n\tlength dummy and result arrays on the deferred initialization\n\tlist so that the variable length arrays can be correctly dealt\n\twith.\n\t* trans-expr.c (gfc_conv_string_length): Return if 'expr' is\n\tNULL rather than ICEing..\n\n2018-09-17  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/85954\n\t* gfortran.dg/deferred_character_21.f90 : New test.\n\nFrom-SVN: r264358", "tree": {"sha": "73ac3b0468f763ffe46fc2d04f7ca235be6b1f36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73ac3b0468f763ffe46fc2d04f7ca235be6b1f36"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca32d61bab85b4df400d463ff891e4f833bad8ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca32d61bab85b4df400d463ff891e4f833bad8ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca32d61bab85b4df400d463ff891e4f833bad8ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca32d61bab85b4df400d463ff891e4f833bad8ec/comments", "author": null, "committer": null, "parents": [{"sha": "3cc2fdfd93efaf1b2e8bcffe84c20cbd1ffc4e96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cc2fdfd93efaf1b2e8bcffe84c20cbd1ffc4e96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cc2fdfd93efaf1b2e8bcffe84c20cbd1ffc4e96"}], "stats": {"total": 73, "additions": 71, "deletions": 2}, "files": [{"sha": "22435d3f0e0611f1c314a8798625037c60c7d576", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca32d61bab85b4df400d463ff891e4f833bad8ec/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca32d61bab85b4df400d463ff891e4f833bad8ec/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=ca32d61bab85b4df400d463ff891e4f833bad8ec", "patch": "@@ -1,3 +1,19 @@\n+2018-09-17  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/85954\n+\t* resolve.c (resolve_assoc_var): If the target expression is a\n+\tdeferred charlen dummy and the associate name shares the\n+\tcharlen, generate a new one. Make sure that new charlens are in\n+\tthe namespace list so that they get cleaned up.\n+\t* trans-array.c (gfc_is_reallocatable_lhs): Associate names are\n+\tnot reallocatable.\n+\t* trans-decl.c (gfc_get_symbol_decl): Put deferred character\n+\tlength dummy and result arrays on the deferred initialization\n+\tlist so that the variable length arrays can be correctly dealt\n+\twith.\n+\t* trans-expr.c (gfc_conv_string_length): Return if 'expr' is\n+\tNULL rather than ICEing..\n+\n 2018-09-16  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/86484"}, {"sha": "e6180b889ecbc47c80b8ea92c33b01b179f7b7b8", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca32d61bab85b4df400d463ff891e4f833bad8ec/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca32d61bab85b4df400d463ff891e4f833bad8ec/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=ca32d61bab85b4df400d463ff891e4f833bad8ec", "patch": "@@ -8744,6 +8744,14 @@ resolve_assoc_var (gfc_symbol* sym, bool resolve_target)\n       if (!sym->ts.u.cl)\n \tsym->ts.u.cl = target->ts.u.cl;\n \n+      if (sym->ts.deferred && target->expr_type == EXPR_VARIABLE\n+\t  && target->symtree->n.sym->attr.dummy\n+\t  && sym->ts.u.cl == target->ts.u.cl)\n+\t{\n+\t  sym->ts.u.cl = gfc_new_charlen (sym->ns, NULL);\n+\t  sym->ts.deferred = 1;\n+\t}\n+\n       if (!sym->ts.u.cl->length\n \t  && !sym->ts.deferred\n \t  && target->expr_type == EXPR_CONSTANT)\n@@ -8756,7 +8764,7 @@ resolve_assoc_var (gfc_symbol* sym, bool resolve_target)\n \t\t|| sym->ts.u.cl->length->expr_type != EXPR_CONSTANT)\n \t\t&& target->expr_type != EXPR_VARIABLE)\n \t{\n-\t  sym->ts.u.cl = gfc_get_charlen();\n+\t  sym->ts.u.cl = gfc_new_charlen (sym->ns, NULL);\n \t  sym->ts.deferred = 1;\n \n \t  /* This is reset in trans-stmt.c after the assignment"}, {"sha": "9565b7d8dd9ee70943c323feb491357381c5630c", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca32d61bab85b4df400d463ff891e4f833bad8ec/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca32d61bab85b4df400d463ff891e4f833bad8ec/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=ca32d61bab85b4df400d463ff891e4f833bad8ec", "patch": "@@ -9520,6 +9520,9 @@ gfc_is_reallocatable_lhs (gfc_expr *expr)\n \n   sym = expr->symtree->n.sym;\n \n+  if (sym->attr.associate_var)\n+    return false;\n+\n   /* An allocatable class variable with no reference.  */\n   if (sym->ts.type == BT_CLASS\n       && CLASS_DATA (sym)->attr.allocatable"}, {"sha": "e54d09817cc626449ffa21b3b9b187b4bdcd99a1", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca32d61bab85b4df400d463ff891e4f833bad8ec/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca32d61bab85b4df400d463ff891e4f833bad8ec/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=ca32d61bab85b4df400d463ff891e4f833bad8ec", "patch": "@@ -1510,6 +1510,13 @@ gfc_get_symbol_decl (gfc_symbol * sym)\n       /* Dummy variables should already have been created.  */\n       gcc_assert (sym->backend_decl);\n \n+      /* However, the string length of deferred arrays must be set.  */\n+      if (sym->ts.type == BT_CHARACTER\n+\t  && sym->ts.deferred\n+\t  && sym->attr.dimension\n+\t  && sym->attr.allocatable)\n+\tgfc_defer_symbol_init (sym);\n+\n       if (sym->attr.pointer && sym->attr.dimension && sym->ts.type != BT_CLASS)\n \tGFC_DECL_PTR_ARRAY_P (sym->backend_decl) = 1;\n "}, {"sha": "35052a8a8eafe6865977823221ae7d6d678bc10d", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca32d61bab85b4df400d463ff891e4f833bad8ec/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca32d61bab85b4df400d463ff891e4f833bad8ec/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=ca32d61bab85b4df400d463ff891e4f833bad8ec", "patch": "@@ -2237,7 +2237,8 @@ gfc_conv_string_length (gfc_charlen * cl, gfc_expr * expr, stmtblock_t * pblock)\n   if (!cl->length)\n     {\n       gfc_expr* expr_flat;\n-      gcc_assert (expr);\n+      if (!expr)\n+\treturn;\n       expr_flat = gfc_copy_expr (expr);\n       flatten_array_ctors_without_strlen (expr_flat);\n       gfc_resolve_expr (expr_flat);"}, {"sha": "c40fc5f692c5e85b710a41880cf7b04ef2d4266a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca32d61bab85b4df400d463ff891e4f833bad8ec/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca32d61bab85b4df400d463ff891e4f833bad8ec/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ca32d61bab85b4df400d463ff891e4f833bad8ec", "patch": "@@ -1,3 +1,8 @@\n+2018-09-17  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/85954\n+\t* gfortran.dg/deferred_character_21.f90 : New test.\n+\n 2018-09-16  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/86484"}, {"sha": "354c847556cc7f60d1cfed2c99028b671a12dcca", "filename": "gcc/testsuite/gfortran.dg/deferred_character_21.f90", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca32d61bab85b4df400d463ff891e4f833bad8ec/gcc%2Ftestsuite%2Fgfortran.dg%2Fdeferred_character_21.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca32d61bab85b4df400d463ff891e4f833bad8ec/gcc%2Ftestsuite%2Fgfortran.dg%2Fdeferred_character_21.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdeferred_character_21.f90?ref=ca32d61bab85b4df400d463ff891e4f833bad8ec", "patch": "@@ -0,0 +1,29 @@\n+! { dg-do compile }\n+! { dg-options \"-O3\" }\n+!\n+! Tests the fix for PR85954 in which the gimplifier could not determine\n+! the space required for the dummy argument data types, when inlining the\n+! subroutines.\n+!\n+! Contributed by G.Steinmetz  <gscfq@t-online.de>\n+!\n+program p\n+   character(kind=1,len=:), allocatable :: z(:)\n+   allocate (z, source = [\"xyz\"])\n+   print *, allocated(z), size(z), len(z), z\n+   call s(z)\n+   call t(z)\n+contains\n+   subroutine s(x)\n+      character(kind=1,len=:), allocatable :: x(:)\n+      x = ['abcd']\n+      print *, allocated(x), size(x), len(x), x\n+   end\n+   subroutine t(x)\n+      character(kind=1,len=:), allocatable :: x(:)\n+      associate (y => x)\n+         y = ['abc']\n+      end associate\n+      print *, allocated(x), size(x), len(x), x\n+   end\n+end"}]}