{"sha": "265133917c2cc24309c97b0836007742407469a0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjY1MTMzOTE3YzJjYzI0MzA5Yzk3YjA4MzYwMDc3NDI0MDc0NjlhMA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-05-26T02:23:02Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-05-26T02:23:02Z"}, "message": "re PR c++/48536 ([C++0x] Automatic Enumerator Incrementation is not compliant with Clause 7.2/5)\n\n\tPR c++/48536\n\t* decl.c (build_enumerator): If incremented enumerator won't fit in\n\tprevious integral type, find one it will fit in.\n\nFrom-SVN: r174258", "tree": {"sha": "e67f36fe735543b104f9dc811c2c3459aae0d708", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e67f36fe735543b104f9dc811c2c3459aae0d708"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/265133917c2cc24309c97b0836007742407469a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/265133917c2cc24309c97b0836007742407469a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/265133917c2cc24309c97b0836007742407469a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/265133917c2cc24309c97b0836007742407469a0/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5df0c0c767de7cc44474504d0de8e15ac96c97b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5df0c0c767de7cc44474504d0de8e15ac96c97b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5df0c0c767de7cc44474504d0de8e15ac96c97b9"}], "stats": {"total": 68, "additions": 61, "deletions": 7}, "files": [{"sha": "6277596f6ced2d8b1176df8a3d763641e613db76", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/265133917c2cc24309c97b0836007742407469a0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/265133917c2cc24309c97b0836007742407469a0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=265133917c2cc24309c97b0836007742407469a0", "patch": "@@ -1,5 +1,9 @@\n 2011-05-25  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/48536\n+\t* decl.c (build_enumerator): If incremented enumerator won't fit in\n+\tprevious integral type, find one it will fit in.\n+\n \tPR c++/48599\n \t* decl.c (create_array_type_for_decl): Complain about array of auto.\n "}, {"sha": "8ab0c8afc7f532b0ccc0ff26b4dd054db2e12df7", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 35, "deletions": 6, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/265133917c2cc24309c97b0836007742407469a0/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/265133917c2cc24309c97b0836007742407469a0/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=265133917c2cc24309c97b0836007742407469a0", "patch": "@@ -12190,9 +12190,13 @@ build_enumerator (tree name, tree value, tree enumtype, location_t loc)\n \t      tree prev_value;\n \t      bool overflowed;\n \n-\t      /* The next value is the previous value plus one.\n-\t\t add_double doesn't know the type of the target expression,\n-\t\t so we must check with int_fits_type_p as well.  */\n+\t      /* C++03 7.2/4: If no initializer is specified for the first\n+\t\t enumerator, the type is an unspecified integral\n+\t\t type. Otherwise the type is the same as the type of the\n+\t\t initializing value of the preceding enumerator unless the\n+\t\t incremented value is not representable in that type, in\n+\t\t which case the type is an unspecified integral type\n+\t\t sufficient to contain the incremented value.  */\n \t      prev_value = DECL_INITIAL (TREE_VALUE (TYPE_VALUES (enumtype)));\n \t      if (error_operand_p (prev_value))\n \t\tvalue = error_mark_node;\n@@ -12201,9 +12205,34 @@ build_enumerator (tree name, tree value, tree enumtype, location_t loc)\n \t\t  overflowed = add_double (TREE_INT_CST_LOW (prev_value),\n \t\t\t\t\t   TREE_INT_CST_HIGH (prev_value),\n \t\t\t\t\t   1, 0, &lo, &hi);\n-\t\t  value = build_int_cst_wide (TREE_TYPE (prev_value), lo, hi);\n-\t\t  overflowed\n-\t\t    |= !int_fits_type_p (value, TREE_TYPE (prev_value));\n+\t\t  if (!overflowed)\n+\t\t    {\n+\t\t      double_int di;\n+\t\t      tree type = TREE_TYPE (prev_value);\n+\t\t      bool pos = (TYPE_UNSIGNED (type) || hi >= 0);\n+\t\t      di.low = lo; di.high = hi;\n+\t\t      if (!double_int_fits_to_tree_p (type, di))\n+\t\t\t{\n+\t\t\t  unsigned int itk;\n+\t\t\t  for (itk = itk_int; itk != itk_none; itk++)\n+\t\t\t    {\n+\t\t\t      type = integer_types[itk];\n+\t\t\t      if (type != NULL_TREE\n+\t\t\t\t  && (pos || !TYPE_UNSIGNED (type))\n+\t\t\t\t  && double_int_fits_to_tree_p (type, di))\n+\t\t\t\tbreak;\n+\t\t\t    }\n+\t\t\t  if (type && cxx_dialect < cxx0x\n+\t\t\t      && itk > itk_unsigned_long)\n+\t\t\t    pedwarn (input_location, OPT_Wlong_long, pos ? \"\\\n+incremented enumerator value is too large for %<unsigned long%>\" :  \"\\\n+incremented enumerator value is too large for %<long%>\");\n+\t\t\t}\n+\t\t      if (type == NULL_TREE)\n+\t\t\toverflowed = true;\n+\t\t      else\n+\t\t\tvalue = double_int_to_tree (type, di);\n+\t\t    }\n \n \t\t  if (overflowed)\n \t\t    {"}, {"sha": "367bd881fa6b1aaa9fec03793dbb8ab94df6d547", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/265133917c2cc24309c97b0836007742407469a0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/265133917c2cc24309c97b0836007742407469a0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=265133917c2cc24309c97b0836007742407469a0", "patch": "@@ -1,5 +1,8 @@\n 2011-05-25  Jason Merrill  <jason@redhat.com>\n \n+\t* g++.dg/cpp0x/enum17.C: New.\n+\t* g++.old-deja/g++.jason/rfg10.C: Adjust.\n+\n \t* g++.dg/cpp0x/auto24.C: New.\n \n \t* g++.dg/cpp0x/error4.C: New."}, {"sha": "8ba827e50f435312714923cc6ee1f7c5657cba59", "filename": "gcc/testsuite/g++.dg/cpp0x/enum17.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/265133917c2cc24309c97b0836007742407469a0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/265133917c2cc24309c97b0836007742407469a0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum17.C?ref=265133917c2cc24309c97b0836007742407469a0", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/48536\n+// { dg-options \"-std=c++0x -pedantic-errors\" }\n+\n+#include <climits>\n+\n+// According to C++11 / Clause 7.2/5 the following enumeration is\n+// well-formed.  It is also well-formed in C++03 if UINT_MAX < ULONG_MAX,\n+// but C++11 adds long long.\n+\n+enum Enum_Inc  { EI_1=UINT_MAX, EI_2 }; // #1\n+\n+// It is not equivalent to the following.\n+enum Enum_Inc2 { FI_1=UINT_MAX, FI_2=FI_1+1 }; // #2\n+\n+#define SA(X) static_assert(X,#X)\n+SA (EI_2 != 0);\n+SA (FI_2 == 0);"}, {"sha": "58af19c33644832db276d47a164f6f61f9ebcf4a", "filename": "gcc/testsuite/g++.old-deja/g++.jason/rfg10.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/265133917c2cc24309c97b0836007742407469a0/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Frfg10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/265133917c2cc24309c97b0836007742407469a0/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Frfg10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Frfg10.C?ref=265133917c2cc24309c97b0836007742407469a0", "patch": "@@ -1,4 +1,5 @@\n // { dg-do assemble  }\n+// { dg-options \"-pedantic-errors\" }\n // Bug: g++ doesn't notice the overflow in the enum values.\n \n #include <limits.h>\n@@ -7,5 +8,5 @@ enum COLOR\n {\n     red,\n     green = ULONG_MAX,\n-    blue // { dg-error \"overflow in enumeration\" }\n+    blue\t\t     // { dg-error \"too large for .unsigned long\" }\n };"}]}