{"sha": "e203a9886ae8b3ec53bcae7c28500209dfc395a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTIwM2E5ODg2YWU4YjNlYzUzYmNhZTdjMjg1MDAyMDlkZmMzOTVhOQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-08-31T01:17:53Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-08-31T01:17:53Z"}, "message": "ctype_wchar_t_members.cc (test01): New file.\n\n\n2000-08-30  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* testsuite/22_locale/ctype_wchar_t_members.cc (test01): New file.\n\n\t* docs/22_locale/codecvt.html: Re-number.\n\t* docs/22_locale/howto.html: Add entry for ctype\n\tdocumentation. Add entry for Nathan's introduction to locales\n\tpaper.\n\t* docs/22_locale/ctype.html: New file. In progress...\n\n\t* docs/22_locale/codecvt.html: Formatting cleanups.\n\t* src/locale.cc (ctype<wchar_t>::do_is): Fix thinko.\n\nFrom-SVN: r36082", "tree": {"sha": "f31da4ad066a42a89265163ba8376bc882151f9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f31da4ad066a42a89265163ba8376bc882151f9f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e203a9886ae8b3ec53bcae7c28500209dfc395a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e203a9886ae8b3ec53bcae7c28500209dfc395a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e203a9886ae8b3ec53bcae7c28500209dfc395a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e203a9886ae8b3ec53bcae7c28500209dfc395a9/comments", "author": null, "committer": null, "parents": [{"sha": "83bbca3be78c3289a7c5ce9fb498cd26257c6e77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83bbca3be78c3289a7c5ce9fb498cd26257c6e77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83bbca3be78c3289a7c5ce9fb498cd26257c6e77"}], "stats": {"total": 342, "additions": 319, "deletions": 23}, "files": [{"sha": "3c27ef46c4fc3fc8392f77ca4ab6d4edc0b471de", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e203a9886ae8b3ec53bcae7c28500209dfc395a9/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e203a9886ae8b3ec53bcae7c28500209dfc395a9/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e203a9886ae8b3ec53bcae7c28500209dfc395a9", "patch": "@@ -1,9 +1,22 @@\n 2000-08-30  Benjamin Kosnik  <bkoz@redhat.com>\n \n+\t* testsuite/22_locale/ctype_wchar_t_members.cc (test01): New file.\n+\n+\t* docs/22_locale/codecvt.html: Re-number.\n+\t* docs/22_locale/howto.html: Add entry for ctype\n+\tdocumentation. Add entry for Nathan's introduction to locales\n+\tpaper.\n+\t* docs/22_locale/ctype.html: New file. In progress...\n+\n \t* docs/22_locale/codecvt.html: Formatting cleanups.\n \t* src/locale.cc (ctype<wchar_t>::do_is): Fix thinko.\n \n-2000-08-30  Benjamin Kosnik  <bkoz@redhat.com>\n+2000-08-30  Phil Edwards  <pme@sources.redhat.com>\n+\n+\t* docs/22_locale/codecvt.html:  Behind-the-scenes ASCII->HTML\n+\t  tweaks for certain browsers.\n+\n+2000-08-29  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* bits/locale_facets.h (ctype<char>): Remove __table_type.\n \tAdd include for bits/std_cwctype.h, for wctype_t.\n@@ -14,13 +27,8 @@\n \t* config/gnu-linux/ctype.cc: Tweak.\t\n \t* testsuite/22_locale/ctype.cc: Tweak.\n \t\n-\t* bits/codecvt.h (__enc_traits): Mangle names.\n+\t* bits/codecvt.h (__enc_traits): Uglify names.\n \t\n-2000-08-30  Phil Edwards  <pme@sources.redhat.com>\n-\n-\t* docs/22_locale/codecvt.html:  Behind-the-scenes ASCII->HTML\n-\t  tweaks for certain browsers.\n-\n 2000-08-28  Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n \n \t* docs/22_locale/codecvt.html: Add more bits, format. "}, {"sha": "2ce6c95a1e58459474d7a02c68c12674e94af1d7", "filename": "libstdc++-v3/docs/22_locale/codecvt.html", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e203a9886ae8b3ec53bcae7c28500209dfc395a9/libstdc%2B%2B-v3%2Fdocs%2F22_locale%2Fcodecvt.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e203a9886ae8b3ec53bcae7c28500209dfc395a9/libstdc%2B%2B-v3%2Fdocs%2F22_locale%2Fcodecvt.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2F22_locale%2Fcodecvt.html?ref=e203a9886ae8b3ec53bcae7c28500209dfc395a9", "patch": "@@ -97,7 +97,7 @@ <H2>\n \n <P>\n <H2>\n-2. Some thoughts on what would be useful\n+3. Some thoughts on what would be useful\n </H2>\n Probably the most frequently asked question about code conversion is:\n &quot;So dudes, what's the deal with Unicode strings?&quot; The dude part is\n@@ -208,7 +208,7 @@ <H2>\n \n <P>\n <H2>\n-3. Problems with &quot;C&quot; code conversions : thread safety, global\n+4. Problems with &quot;C&quot; code conversions : thread safety, global\n locales, termination.\n </H2>\n \n@@ -251,7 +251,7 @@ <H2>\n \n <P>\n <H2>\n-4. Design\n+5. Design\n </H2>\n The two required specializations are implemented as follows:\n \n@@ -370,7 +370,7 @@ <H2>\n \n <P>\n <H2>\n-5.  Examples\n+6.  Examples\n </H2>\n \n <UL>\n@@ -431,7 +431,7 @@ <H2>\n \n <P>\n <H2>\n-6.  Unresolved Issues\n+7.  Unresolved Issues\n </H2>\n <UL>\n <LI>\n@@ -474,15 +474,15 @@ <H2>\n \n <P>\n <H2>\n-7. Acknowledgments\n+8. Acknowledgments\n </H2>\n Ulrich Drepper for the iconv suggestions and patient answering of\n late-night questions, Jason Merrill for the template partial\n specialization hints, language clarification, and wchar_t fixes.\n \n <P>\n <H2>\n-8. Bibliography / Referenced Documents\n+9. Bibliography / Referenced Documents\n </H2>\n \n Drepper, Ulrich, GNU libc (glibc) 2.2 manual. In particular, Chapters &quot;6. Character Set Handling&quot; and &quot;7 Locales and Internationalization&quot;"}, {"sha": "08be102fe2664e42fc8689f3be62db87811894af", "filename": "libstdc++-v3/docs/22_locale/ctype.html", "status": "added", "additions": 146, "deletions": 0, "changes": 146, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e203a9886ae8b3ec53bcae7c28500209dfc395a9/libstdc%2B%2B-v3%2Fdocs%2F22_locale%2Fctype.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e203a9886ae8b3ec53bcae7c28500209dfc395a9/libstdc%2B%2B-v3%2Fdocs%2F22_locale%2Fctype.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2F22_locale%2Fctype.html?ref=e203a9886ae8b3ec53bcae7c28500209dfc395a9", "patch": "@@ -0,0 +1,146 @@\n+<HTML>\n+<HEAD>\n+  <H1>\n+  Notes on the ctype implementation.\n+  </H1>\n+</HEAD>\n+<I>\n+prepared by Benjamin Kosnik (bkoz@redhat.com) on August 30, 2000\n+</I>\n+\n+<P>\n+<H2>\n+1. Abstract\n+</H2>\n+<P>\n+Woe is me.\n+</P>\n+\n+<P>\n+<H2>\n+2. What the standard says\n+</H2>\n+\n+\n+<P>\n+<H2>\n+3. Problems with &quot;C&quot; ctype : global locales, termination.\n+</H2>\n+\n+<P>\n+For the required specialization codecvt&lt;wchar_t, char, mbstate_t&gt; ,\n+conversions are made between the internal character set (always UCS4\n+on GNU/Linux) and whatever the currently selected locale for the\n+LC_CTYPE category implements.\n+\n+<P>\n+<H2>\n+4. Design\n+</H2>\n+The two required specializations are implemented as follows:\n+\n+<P>\n+<TT>\n+ctype&lt;char&gt;\n+</TT>\n+<P>\n+This is simple specialization. Implementing this was a piece of cake.\n+\n+<P>\n+<TT>\n+ctype&lt;wchar_t&gt;\n+</TT>\n+<P>\n+This specialization, by specifying all the template parameters, pretty\n+much ties the hands of implementors. As such, the implementation is\n+straightforward, involving mcsrtombs for the conversions between char\n+to wchar_t and wcsrtombs for conversions between wchar_t and char.\n+\n+<P>\n+Neither of these two required specializations deals with Unicode\n+characters. As such, libstdc++-v3 implements \n+\n+\n+\n+<P>\n+<H2>\n+5.  Examples\n+</H2>\n+\n+<pre>\n+  typedef ctype<char> cctype;\n+</pre>\n+\n+More information can be found in the following testcases:\n+<UL>\n+<LI> testsuite/22_locale/ctype_char_members.cc \n+<LI> testsuite/22_locale/ctype_wchar_t_members.cc \n+</UL>\n+\n+<P>\n+<H2>\n+6.  Unresolved Issues\n+</H2>\n+\n+<UL>\n+\t<LI> how to deal with the global locale issue?\n+\n+\t<LI> how to deal with different types than char, wchar_t?\n+\n+\t<LI> codecvt/ctype overlap: narrow/widen\n+\n+\t<LI> mask typedef in codecvt_base, argument types in codecvt.\n+\twhat is know about this type?\n+\n+\t<LI> why mask* argument in codecvt?\n+\t\n+\t<LI> can this be made (more) generic? is there a simple way to\n+\tstraighten out the configure-time mess that is a by-product of\n+\tthis class?\n+\n+\t<LI> get the ctype<wchar_t>::mask stuff under control. Need to\n+\tmake some kind of static table, and not do lookup evertime\n+\tsomebody hits the do_is... functions. Too bad we can't just\n+\tredefine mask for ctype<wchar_t>\n+\t\n+\t<LI> rename abstract base class. See if just smash-overriding\n+\tis a better approach. Clarify, add sanity to naming.\n+\n+</UL>\n+\n+\n+<P>\n+<H2>\n+7. Acknowledgments\n+</H2>\n+Ulrich Drepper for patient answering of late-night questions, skeletal\n+examples, and C language expertise.\n+\n+<P>\n+<H2>\n+8. Bibliography / Referenced Documents\n+</H2>\n+\n+Drepper, Ulrich, GNU libc (glibc) 2.2 manual. In particular, Chapters &quot;6. Character Set Handling&quot; and &quot;7 Locales and Internationalization&quot;\n+\n+<P>\n+Drepper, Ulrich, Numerous, late-night email correspondence\n+\n+<P>\n+ISO/IEC 14882:1998 Programming languages - C++\n+\n+<P>\n+ISO/IEC 9899:1999 Programming languages - C\n+\n+<P>\n+Langer, Angelika and Klaus Kreft, Standard C++ IOStreams and Locales, Advanced Programmer's Guide and Reference, Addison Wesley Longman, Inc. 2000\n+\n+<P>\n+Stroustrup, Bjarne, Appendix D, The C++ Programming Language, Special Edition, Addison Wesley, Inc. 2000\n+\n+<P>\n+System Interface Definitions, Issue 6 (IEEE Std. 1003.1-200x)\n+The Open Group/The Institute of Electrical and Electronics Engineers, Inc.\n+http://www.opennc.org/austin/docreg.html\n+\n+"}, {"sha": "c464bf105fae5960690859b345d11898e51c335b", "filename": "libstdc++-v3/docs/22_locale/howto.html", "status": "modified", "additions": 46, "deletions": 9, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e203a9886ae8b3ec53bcae7c28500209dfc395a9/libstdc%2B%2B-v3%2Fdocs%2F22_locale%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e203a9886ae8b3ec53bcae7c28500209dfc395a9/libstdc%2B%2B-v3%2Fdocs%2F22_locale%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2F22_locale%2Fhowto.html?ref=e203a9886ae8b3ec53bcae7c28500209dfc395a9", "patch": "@@ -9,23 +9,24 @@\n    <TITLE>libstdc++-v3 HOWTO:  Chapter 22</TITLE>\n <LINK REL=\"home\" HREF=\"http://sources.redhat.com/libstdc++/docs/22_locale/\">\n <LINK REL=StyleSheet HREF=\"../lib3styles.css\">\n-<!-- $Id: howto.html,v 1.2 2000/07/11 21:45:07 pme Exp $ -->\n+<!-- $Id: howto.html,v 1.3 2000/08/25 08:52:56 bkoz Exp $ -->\n </HEAD>\n <BODY>\n \n <H1 CLASS=\"centered\"><A NAME=\"top\">Chapter 22:  Localization</A></H1>\n \n-<P>Chapter 22 deals with the FORTRAN subroutines for automatically\n-   transforming lemmings into gold.\n+<P>Chapter 22 deals with the C++ localization facilities.\n </P>\n \n \n <!-- ####################################################### -->\n <HR>\n <H1>Contents</H1>\n <UL>\n-   <LI><A HREF=\"#1\">Stroustrup on Locales</A>\n-   <LI><A HREF=\"#2\">Notes on the codecvt implementation</A>\n+   <LI><A HREF=\"#1\">Bjarne Stroustrup on Locales</A>\n+   <LI><A HREF=\"#2\">Nathan Myers on Locales</A>   \n+   <LI><A HREF=\"#3\">codecvt</A>\n+   <LI><A HREF=\"#4\">ctype</A>\n </UL>\n \n <HR>\n@@ -45,15 +46,51 @@ <H2><A NAME=\"1\">Stroustrup on Locales</A></H2>\n    </P>\n \n <HR>\n-<H2><A NAME=\"2\">Notes on the codecvt implementation</A></H2>\n-   <P> This document turned out to be larger than anticipated. As\n-   such, it gets its own page, which can be found \n+<H2><A NAME=\"2\">Nathan Myers on Locales</A></H2>\n+   <P> An article entitled \"The Standard C++ Locale\" was published in\n+   Dr. Dobb's Journal and can be found\n+      <A HREF=\"http://www.cantrip.org/locale.html\">here</A>\n+   </P>\n+   <P>Return <A HREF=\"#top\">to top of page</A> or\n+      <A HREF=\"../faq/index.html\">to the FAQ</A>.\n+   </P>\n+\n+<HR>\n+<H2><A NAME=\"3\">codecvt</A></H2>\n+   <P> Notes made during the implementation of codecvt can be found \n    <A HREF=\"codecvt.html\">here</A>.\n    </P>\n+\n+   <P> The following is the abstract from the implementation notes:\n+<BLOCKQUOTE>\n+\tThe standard class codecvt attempts to address conversions\n+between different character encoding schemes. In particular, the\n+standard attempts to detail conversions between the\n+implementation-defined wide characters (hereafter referred to as\n+wchar_t) and the standard type char that is so beloved in classic\n+&quot;C&quot; (which can now be referred to as narrow characters.)\n+This document attempts to describe how the GNU libstdc++-v3\n+implementation deals with the conversion between wide and narrow\n+characters, and also presents a framework for dealing with the huge\n+number of other encodings that iconv can convert, including Unicode\n+and UTF8. Design issues and requirements are addressed, and examples\n+of correct usage for both the required specializations for wide and\n+narrow characters and the implementation-provided extended\n+functionality are given.\n+</BLOCKQUOTE>\n+\n    <P>Return <A HREF=\"#top\">to top of page</A> or\n       <A HREF=\"../faq/index.html\">to the FAQ</A>.\n    </P>\n \n+<HR>\n+<H2><A NAME=\"4\">ctype</A></H2>\n+   <P> Notes made during the implementation of ctype can be found \n+   <A HREF=\"ctype.html\">here</A>.\n+   </P>\n+   <P>Return <A HREF=\"#top\">to top of page</A> or\n+      <A HREF=\"../faq/index.html\">to the FAQ</A>.\n+   </P>\n \n \n \n@@ -64,7 +101,7 @@ <H2><A NAME=\"2\">Notes on the codecvt implementation</A></H2>\n Comments and suggestions are welcome, and may be sent to\n <A HREF=\"mailto:pme@sources.redhat.com\">Phil Edwards</A> or\n <A HREF=\"mailto:gdr@egcs.cygnus.com\">Gabriel Dos Reis</A>.\n-<BR> $Id: howto.html,v 1.2 2000/07/11 21:45:07 pme Exp $\n+<BR> $Id: howto.html,v 1.3 2000/08/25 08:52:56 bkoz Exp $\n </EM></P>\n \n "}, {"sha": "ad8452ac397db90c9418da517e8eeab4cdbb4ad6", "filename": "libstdc++-v3/testsuite/22_locale/ctype_wchar_t_members.cc", "status": "added", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e203a9886ae8b3ec53bcae7c28500209dfc395a9/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_wchar_t_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e203a9886ae8b3ec53bcae7c28500209dfc395a9/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_wchar_t_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_wchar_t_members.cc?ref=e203a9886ae8b3ec53bcae7c28500209dfc395a9", "patch": "@@ -0,0 +1,105 @@\n+// 2000-09-01 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2000 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 22.2.1.3.2 ctype<char> members\n+\n+#include <locale>\n+// NB: Don't include any other headers in this file.\n+#include <debug_assert.h>\n+\n+class gnu_ctype: public std::ctype<wchar_t> {};\n+\n+void test01()\n+{\n+  bool test = true;\n+  typedef wchar_t \tchar_type;\n+\n+  const char_type strlit00[] = L\"manilla, cebu, tandag PHILIPPINES\";\n+  const char_type strlit01[] = L\"MANILLA, CEBU, TANDAG PHILIPPINES\";\n+  const char_type strlit02[] = L\"manilla, cebu, tandag philippines\";\n+  const char_type c00 = L'S';\n+  const char_type c10 = L's';\n+  const char_type c20 = L'9';\n+  const char_type c30 = L' ';\n+  const char_type c40 = L'!';\n+  const char_type c50 = L'F';\n+  const char_type c60 = L'f';\n+  const char_type c70 = L'X';\n+  const char_type c80 = L'x';\n+\n+  gnu_ctype gctype;\n+  char_type c100;\n+  int len = std::char_traits<char_type>::length(strlit00);\n+  char_type c_array[len + 1];\n+\n+  // bool is(mask m, char_type c) const;\n+  VERIFY( gctype.is(std::ctype_base::space, c30) );\n+  VERIFY( gctype.is(std::ctype_base::upper, c00) );\n+  VERIFY( gctype.is(std::ctype_base::lower, c10) );\n+  VERIFY( gctype.is(std::ctype_base::digit, c20) );\n+  VERIFY( gctype.is(std::ctype_base::punct, c40) );\n+  VERIFY( gctype.is(std::ctype_base::alpha, c50) );\n+  VERIFY( gctype.is(std::ctype_base::alpha, c60) );\n+  VERIFY( gctype.is(std::ctype_base::xdigit, c20) );\n+  VERIFY( !gctype.is(std::ctype_base::xdigit, c80) );\n+  VERIFY( gctype.is(std::ctype_base::alnum, c50) );\n+  VERIFY( gctype.is(std::ctype_base::alnum, c20) );\n+  VERIFY( gctype.is(std::ctype_base::graph, c40) );\n+  VERIFY( gctype.is(std::ctype_base::graph, c20) );\n+\n+  // char_type toupper(char_type c) const\n+  c100 = gctype.toupper(c10);\n+  VERIFY( c100 == c00 );\n+\n+  // char_type tolower(char_type c) const\n+  c100 = gctype.tolower(c00);\n+  VERIFY( c100 == c10 );\n+\n+  // char_type toupper(char_type* low, const char_type* hi) const\n+  std::char_traits<char_type>::copy(c_array, strlit02, len + 1);\n+  gctype.toupper(c_array, c_array + len);\n+  VERIFY( !std::char_traits<char_type>::compare(c_array, strlit01, len - 1) );\n+\n+  // char_type tolower(char_type* low, const char_type* hi) const\n+  std::char_traits<char_type>::copy(c_array, strlit01, len + 1);\n+  gctype.tolower(c_array, c_array + len);\n+  VERIFY( !std::char_traits<char_type>::compare(c_array, strlit02, len - 1) );\n+\n+\n+#ifdef DEBUG_ASSERT\n+  assert(test);\n+#endif\n+}\n+\n+int main() {\n+  test01();\n+  return 0;\n+}\n+\n+"}]}