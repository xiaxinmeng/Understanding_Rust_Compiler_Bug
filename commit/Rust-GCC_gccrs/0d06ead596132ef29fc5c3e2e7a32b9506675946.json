{"sha": "0d06ead596132ef29fc5c3e2e7a32b9506675946", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQwNmVhZDU5NjEzMmVmMjlmYzVjM2UyZTdhMzJiOTUwNjY3NTk0Ng==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@apple.com", "date": "2006-03-27T06:09:48Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2006-03-27T06:09:48Z"}, "message": "dwarf2out.c (add_location_or_const_value_attribute): Call tree_add_const_value_attribute if nothing else works.\n\n\t* dwarf2out.c (add_location_or_const_value_attribute): Call\n\ttree_add_const_value_attribute if nothing else works.\n\t(reference_to_unused): New.\n\t(rtl_for_decl_init): Use reference_to_unused to decide whether\n\tto output an initializer.\n\nFrom-SVN: r112408", "tree": {"sha": "e2aaa33a44365850573ec0e40ea48caf0b331efd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e2aaa33a44365850573ec0e40ea48caf0b331efd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d06ead596132ef29fc5c3e2e7a32b9506675946", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d06ead596132ef29fc5c3e2e7a32b9506675946", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d06ead596132ef29fc5c3e2e7a32b9506675946", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d06ead596132ef29fc5c3e2e7a32b9506675946/comments", "author": {"login": "geoffk01", "id": 31905243, "node_id": "MDQ6VXNlcjMxOTA1MjQz", "avatar_url": "https://avatars.githubusercontent.com/u/31905243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geoffk01", "html_url": "https://github.com/geoffk01", "followers_url": "https://api.github.com/users/geoffk01/followers", "following_url": "https://api.github.com/users/geoffk01/following{/other_user}", "gists_url": "https://api.github.com/users/geoffk01/gists{/gist_id}", "starred_url": "https://api.github.com/users/geoffk01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geoffk01/subscriptions", "organizations_url": "https://api.github.com/users/geoffk01/orgs", "repos_url": "https://api.github.com/users/geoffk01/repos", "events_url": "https://api.github.com/users/geoffk01/events{/privacy}", "received_events_url": "https://api.github.com/users/geoffk01/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ef6fa01d3af63506555c932629c9d870af559aca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef6fa01d3af63506555c932629c9d870af559aca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef6fa01d3af63506555c932629c9d870af559aca"}], "stats": {"total": 45, "additions": 37, "deletions": 8}, "files": [{"sha": "dac49f65bcbed30a606c121cf0f2936e1da34394", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d06ead596132ef29fc5c3e2e7a32b9506675946/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d06ead596132ef29fc5c3e2e7a32b9506675946/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0d06ead596132ef29fc5c3e2e7a32b9506675946", "patch": "@@ -1,3 +1,11 @@\n+2006-03-26  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* dwarf2out.c (add_location_or_const_value_attribute): Call\n+\ttree_add_const_value_attribute if nothing else works.\n+\t(reference_to_unused): New.\n+\t(rtl_for_decl_init): Use reference_to_unused to decide whether\n+\tto output an initializer.\n+\n 2006-03-27  Alan Modra  <amodra@bigpond.net.au>\n \n \tPR target/26459"}, {"sha": "5b1894c5be001f62fec412123faba760c12ca4d4", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 29, "deletions": 8, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d06ead596132ef29fc5c3e2e7a32b9506675946/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d06ead596132ef29fc5c3e2e7a32b9506675946/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=0d06ead596132ef29fc5c3e2e7a32b9506675946", "patch": "@@ -9929,6 +9929,23 @@ add_const_value_attribute (dw_die_ref die, rtx rtl)\n \n }\n \n+/* Determine whether the evaluation of EXPR references any variables\n+   or functions which aren't otherwise used (and therefore may not be\n+   output).  */\n+static tree\n+reference_to_unused (tree * tp, int * walk_subtrees,\n+\t\t     void * data ATTRIBUTE_UNUSED)\n+{\n+  if (! EXPR_P (*tp) && ! CONSTANT_CLASS_P (*tp))\n+    *walk_subtrees = 0;\n+  \n+  if (DECL_P (*tp) && ! TREE_PUBLIC (*tp) && ! TREE_USED (*tp)\n+      && ! TREE_ASM_WRITTEN (*tp))\n+    return *tp;\n+  else\n+    return NULL_TREE;\n+}\n+\n /* Generate an RTL constant from a decl initializer INIT with decl type TYPE,\n    for use in a later add_const_value_attribute call.  */\n \n@@ -9955,15 +9972,16 @@ rtl_for_decl_init (tree init, tree type)\n \trtl = gen_rtx_CONST_STRING (VOIDmode,\n \t\t\t\t    ggc_strdup (TREE_STRING_POINTER (init)));\n     }\n+  /* Although DWARF could easily handle other kinds of aggregates, we\n+     have no way to represent such values as RTL constants, so skip\n+     those.  */\n+  else if (AGGREGATE_TYPE_P (type))\n+    ;\n   /* If the initializer is something that we know will expand into an\n-     immediate RTL constant, expand it now.  Expanding anything else\n-     tends to produce unresolved symbols; see debug/5770 and c++/6381.  */\n-  /* Aggregate, vector, and complex types may contain constructors that may\n-     result in code being generated when expand_expr is called, so we can't\n-     handle them here.  Integer and float are useful and safe types to handle\n-     here.  */\n-  else if ((INTEGRAL_TYPE_P (type) || SCALAR_FLOAT_TYPE_P (type))\n-\t   && initializer_constant_valid_p (init, type) == null_pointer_node)\n+     immediate RTL constant, expand it now.  We must be careful not to\n+     reference variables which won't be output.  */\n+  else if (initializer_constant_valid_p (init, type)\n+\t   && ! walk_tree (&init, reference_to_unused, NULL, NULL))\n     {\n       rtl = expand_expr (init, NULL_RTX, VOIDmode, EXPAND_INITIALIZER);\n \n@@ -10327,6 +10345,9 @@ add_location_or_const_value_attribute (dw_die_ref die, tree decl,\n       add_AT_location_description (die, attr, descr);\n       return;\n     }\n+  /* None of that worked, so it must not really have a location;\n+     try adding a constant value attribute from the DECL_INITIAL.  */\n+  tree_add_const_value_attribute (die, decl);\n }\n \n /* If we don't have a copy of this variable in memory for some reason (such"}]}