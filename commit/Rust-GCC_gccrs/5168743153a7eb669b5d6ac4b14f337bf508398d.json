{"sha": "5168743153a7eb669b5d6ac4b14f337bf508398d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTE2ODc0MzE1M2E3ZWI2NjliNWQ2YWM0YjE0ZjMzN2JmNTA4Mzk4ZA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-12-27T18:51:12Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-12-27T18:51:12Z"}, "message": "type_traits: Rework the _DEFINE_SPEC* macros.\n\n2004-12-27  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/tr1/type_traits: Rework the _DEFINE_SPEC* macros.\n\nFrom-SVN: r92647", "tree": {"sha": "15abfa4e3f3fceba09a96b78ae5c3f7d2f3b77c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/15abfa4e3f3fceba09a96b78ae5c3f7d2f3b77c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5168743153a7eb669b5d6ac4b14f337bf508398d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5168743153a7eb669b5d6ac4b14f337bf508398d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5168743153a7eb669b5d6ac4b14f337bf508398d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5168743153a7eb669b5d6ac4b14f337bf508398d/comments", "author": null, "committer": null, "parents": [{"sha": "8f8883b1406a6951ab430e9701a1cb3761778f11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f8883b1406a6951ab430e9701a1cb3761778f11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f8883b1406a6951ab430e9701a1cb3761778f11"}], "stats": {"total": 104, "additions": 51, "deletions": 53}, "files": [{"sha": "ba4b65ec707b4f8d0931b26c023b3de832c9363a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5168743153a7eb669b5d6ac4b14f337bf508398d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5168743153a7eb669b5d6ac4b14f337bf508398d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5168743153a7eb669b5d6ac4b14f337bf508398d", "patch": "@@ -1,3 +1,7 @@\n+2004-12-27  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/tr1/type_traits: Rework the _DEFINE_SPEC* macros.\n+\n 2004-12-26  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/tr1/type_traits (__is_enum_helper): Slightly simplify,"}, {"sha": "d035a197b78c4d35724a7db3ee78dd42c29353c0", "filename": "libstdc++-v3/include/tr1/type_traits", "status": "modified", "additions": 47, "deletions": 53, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5168743153a7eb669b5d6ac4b14f337bf508398d/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5168743153a7eb669b5d6ac4b14f337bf508398d/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits?ref=5168743153a7eb669b5d6ac4b14f337bf508398d", "patch": "@@ -40,26 +40,29 @@ namespace tr1\n     typedef struct { char __arr[2]; } __two;\n   };\n \n-#define _DEFINE_SPEC_0_HELPER(_Spec)                            \\\n-  template<>                                                    \\\n-    struct _Spec                                                \\\n-    : public true_type { };\n-\n-#define _DEFINE_SPEC_1_HELPER(_Spec)                            \\\n-  template<typename _Tp>                                        \\\n-    struct _Spec                                                \\\n-    _DEFINE_SPEC_1_VAR\n+#define _DEFINE_SPEC_BODY(_Value)                                    \\\n+    : public integral_constant<bool, _Value> { };\n+\n+#define _DEFINE_SPEC_0_HELPER(_Spec, _Value)                         \\\n+  template<>                                                         \\\n+    struct _Spec                                                     \\\n+    _DEFINE_SPEC_BODY(_Value)\n+\n+#define _DEFINE_SPEC_1_HELPER(_Spec, _Value)                         \\\n+  template<typename _Tp>                                             \\\n+    struct _Spec                                                     \\\n+    _DEFINE_SPEC_BODY(_Value)\n       \n-#define _DEFINE_SPEC_2_HELPER(_Spec)                            \\\n-  template<typename _Tp, typename _Cp>                          \\\n-    struct _Spec                                                \\\n-    _DEFINE_SPEC_2_VAR\n+#define _DEFINE_SPEC_2_HELPER(_Spec, _Value)                         \\\n+  template<typename _Tp, typename _Cp>                               \\\n+    struct _Spec                                                     \\\n+    _DEFINE_SPEC_BODY(_Value)\n \n-#define _DEFINE_SPEC(_Order, _Trait, _Type)                     \\\n-  _DEFINE_SPEC_##_Order##_HELPER(_Trait<_Type>)                 \\\n-  _DEFINE_SPEC_##_Order##_HELPER(_Trait<_Type const>)           \\\n-  _DEFINE_SPEC_##_Order##_HELPER(_Trait<_Type volatile>)        \\\n-  _DEFINE_SPEC_##_Order##_HELPER(_Trait<_Type const volatile>)\n+#define _DEFINE_SPEC(_Order, _Trait, _Type, _Value)                  \\\n+  _DEFINE_SPEC_##_Order##_HELPER(_Trait<_Type>, _Value)              \\\n+  _DEFINE_SPEC_##_Order##_HELPER(_Trait<_Type const>, _Value)        \\\n+  _DEFINE_SPEC_##_Order##_HELPER(_Trait<_Type volatile>, _Value)     \\\n+  _DEFINE_SPEC_##_Order##_HELPER(_Trait<_Type const volatile>, _Value)\n \n   /// @brief  helper classes [4.3].\n   template<typename _Tp, _Tp __v>\n@@ -76,33 +79,33 @@ namespace tr1\n   template<typename>\n     struct is_void\n     : public false_type { };\n-  _DEFINE_SPEC(0, is_void, void)\n+  _DEFINE_SPEC(0, is_void, void, true)\n \n   template<typename>\n     struct is_integral\n     : public false_type { };\n-  _DEFINE_SPEC(0, is_integral, bool)\n-  _DEFINE_SPEC(0, is_integral, char)\n-  _DEFINE_SPEC(0, is_integral, signed char)\n-  _DEFINE_SPEC(0, is_integral, unsigned char)\n+  _DEFINE_SPEC(0, is_integral, bool, true)\n+  _DEFINE_SPEC(0, is_integral, char, true)\n+  _DEFINE_SPEC(0, is_integral, signed char, true)\n+  _DEFINE_SPEC(0, is_integral, unsigned char, true)\n #ifdef _GLIBCXX_USE_WCHAR_T\n-  _DEFINE_SPEC(0, is_integral, wchar_t)\n+  _DEFINE_SPEC(0, is_integral, wchar_t, true)\n #endif\n-  _DEFINE_SPEC(0, is_integral, short)\n-  _DEFINE_SPEC(0, is_integral, unsigned short)\n-  _DEFINE_SPEC(0, is_integral, int)\n-  _DEFINE_SPEC(0, is_integral, unsigned int)\n-  _DEFINE_SPEC(0, is_integral, long)\n-  _DEFINE_SPEC(0, is_integral, unsigned long)\n-  _DEFINE_SPEC(0, is_integral, long long)\n-  _DEFINE_SPEC(0, is_integral, unsigned long long)\n+  _DEFINE_SPEC(0, is_integral, short, true)\n+  _DEFINE_SPEC(0, is_integral, unsigned short, true)\n+  _DEFINE_SPEC(0, is_integral, int, true)\n+  _DEFINE_SPEC(0, is_integral, unsigned int, true)\n+  _DEFINE_SPEC(0, is_integral, long, true)\n+  _DEFINE_SPEC(0, is_integral, unsigned long, true)\n+  _DEFINE_SPEC(0, is_integral, long long, true)\n+  _DEFINE_SPEC(0, is_integral, unsigned long long, true)\n \n   template<typename>\n     struct is_floating_point\n     : public false_type { };\n-  _DEFINE_SPEC(0, is_floating_point, float)\n-  _DEFINE_SPEC(0, is_floating_point, double)\n-  _DEFINE_SPEC(0, is_floating_point, long double)\n+  _DEFINE_SPEC(0, is_floating_point, float, true)\n+  _DEFINE_SPEC(0, is_floating_point, double, true)\n+  _DEFINE_SPEC(0, is_floating_point, long double, true)\n \n   template<typename>\n     struct is_array\n@@ -116,13 +119,10 @@ namespace tr1\n     struct is_array<_Tp[]>\n     : public true_type { };\n \n-#define _DEFINE_SPEC_1_VAR        \\\n-    : public true_type { };\n-  \n   template<typename>\n     struct is_pointer\n     : public false_type { };\n-  _DEFINE_SPEC(1, is_pointer, _Tp*)\n+  _DEFINE_SPEC(1, is_pointer, _Tp*, true)\n  \n   template<typename>\n     struct is_reference\n@@ -132,22 +132,17 @@ namespace tr1\n     struct is_reference<_Tp&>\n     : public true_type { };\n \n-#define _DEFINE_SPEC_2_VAR        \\\n-    : public integral_constant<bool, !is_function<_Tp>::value> { };\n-\n   template<typename>\n     struct is_member_object_pointer\n     : public false_type { };\n-  _DEFINE_SPEC(2, is_member_object_pointer, _Tp _Cp::*)\n-\n-#undef _DEFINE_SPEC_2_VAR\n-#define _DEFINE_SPEC_2_VAR        \\\n-    : public integral_constant<bool, is_function<_Tp>::value> { };\n+  _DEFINE_SPEC(2, is_member_object_pointer, _Tp _Cp::*,\n+\t       !is_function<_Tp>::value)\n \n   template<typename>\n     struct is_member_function_pointer\n     : public false_type { };\n-  _DEFINE_SPEC(2, is_member_function_pointer, _Tp _Cp::*)\n+  _DEFINE_SPEC(2, is_member_function_pointer, _Tp _Cp::*,\n+\t       is_function<_Tp>::value)\n \n   template<typename _Tp, bool = (is_fundamental<_Tp>::value\n \t\t\t\t || is_array<_Tp>::value\n@@ -410,14 +405,14 @@ namespace tr1\n     { typedef typename remove_all_extents<_Tp>::type     type; };\n \n   /// @brief  pointer modifications [4.7.4].\n-#undef _DEFINE_SPEC_1_VAR\n-#define _DEFINE_SPEC_1_VAR        \\\n+#undef _DEFINE_SPEC_BODY\n+#define _DEFINE_SPEC_BODY(_Value)      \\\n     { typedef _Tp     type; };\n \n   template<typename _Tp>\n     struct remove_pointer\n     { typedef _Tp     type; };\n-  _DEFINE_SPEC(1, remove_pointer, _Tp*)\n+  _DEFINE_SPEC(1, remove_pointer, _Tp*, false)\n   \n   template<typename _Tp>\n     struct add_pointer\n@@ -429,8 +424,7 @@ namespace tr1\n #undef _DEFINE_SPEC_1_HELPER\n #undef _DEFINE_SPEC_2_HELPER\n #undef _DEFINE_SPEC\n-#undef _DEFINE_SPEC_1_VAR\n-#undef _DEFINE_SPEC_2_VAR\n+#undef _DEFINE_SPEC_BODY\n \n }\n }"}]}