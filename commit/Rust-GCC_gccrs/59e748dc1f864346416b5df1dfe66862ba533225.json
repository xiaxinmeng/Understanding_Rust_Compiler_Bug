{"sha": "59e748dc1f864346416b5df1dfe66862ba533225", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTllNzQ4ZGMxZjg2NDM0NjQxNmI1ZGYxZGZlNjY4NjJiYTUzMzIyNQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-06-05T22:53:19Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-06-05T22:53:19Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r1166", "tree": {"sha": "749cd67648e47ab3fbbc7cf15a6b3cdf7d2435b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/749cd67648e47ab3fbbc7cf15a6b3cdf7d2435b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/59e748dc1f864346416b5df1dfe66862ba533225", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59e748dc1f864346416b5df1dfe66862ba533225", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59e748dc1f864346416b5df1dfe66862ba533225", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59e748dc1f864346416b5df1dfe66862ba533225/comments", "author": null, "committer": null, "parents": [{"sha": "8129e7a455e7c859f6fed17988a44b8c2a67be58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8129e7a455e7c859f6fed17988a44b8c2a67be58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8129e7a455e7c859f6fed17988a44b8c2a67be58"}], "stats": {"total": 85, "additions": 1, "deletions": 84}, "files": [{"sha": "b3bcf01e349b98a406a98df948f6a7b3bf6e2aa0", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 1, "deletions": 84, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59e748dc1f864346416b5df1dfe66862ba533225/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59e748dc1f864346416b5df1dfe66862ba533225/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=59e748dc1f864346416b5df1dfe66862ba533225", "patch": "@@ -438,25 +438,6 @@ large_int (op, mode)\n   return TRUE;\n }\n \n-/* Return truth value of whether OP is an integer which can be loaded\n-   with an lui instruction.  */\n-\n-int\n-lui_int (op, mode)\n-     rtx op;\n-     enum machine_mode mode;\n-{\n-  long value;\n-\n-  if (GET_CODE (op) != CONST_INT)\n-    return FALSE;\n-\n-  if ((value & 0x0000ffff) == 0)\t\t/* lui reg,value>>16 */\n-    return TRUE;\n-\n-  return FALSE;\n-}\n-\n /* Return truth value of whether OP is a register or the constant 0.  */\n \n int\n@@ -3563,71 +3544,6 @@ mips_output_lineno (stream, line)\n     }\n }\n \n-\f\n-/* If defined, a C statement to be executed just prior to the\n-   output of assembler code for INSN, to modify the extracted\n-   operands so they will be output differently.\n-\n-   Here the argument OPVEC is the vector containing the operands\n-   extracted from INSN, and NOPERANDS is the number of elements of\n-   the vector which contain meaningful data for this insn.  The\n-   contents of this vector are what will be used to convert the\n-   insn template into assembler code, so you can change the\n-   assembler output by changing the contents of the vector.\n-\n-   We use it to check if the current insn needs a nop in front of it\n-   because of load delays, and also to update the delay slot\n-   statistics.  */\n-\n-void\n-final_prescan_insn (insn, opvec, noperands)\n-     rtx insn;\n-     rtx opvec[];\n-     int noperands;\n-{\n-  if (dslots_number_nops > 0)\n-    {\n-      enum machine_mode mode = GET_MODE (mips_load_reg);\n-      rtx pattern = PATTERN (insn);\n-      int length = get_attr_length (insn);\n-\n-      /* If this operand is really safe to fill the delay slot, such as an\n-\t AND with a large constant integer as operand[2], mark the delay\n-\t slot filled.  */\n-      if (get_attr_safe (insn) == SAFE_YES && length > 1)\n-\tdslots_load_filled++;\n-\n-      /* Do we need to emit a NOP? */\n-      else if (length == 0\n-\t       || (mips_load_reg  != (rtx)0 && reg_mentioned_p (mips_load_reg,  pattern))\n-\t       || (mips_load_reg2 != (rtx)0 && reg_mentioned_p (mips_load_reg2, pattern))\n-\t       || (mips_load_reg3 != (rtx)0 && reg_mentioned_p (mips_load_reg3, pattern))\n-\t       || (mips_load_reg4 != (rtx)0 && reg_mentioned_p (mips_load_reg4, pattern)))\n-\tfputs ((set_noreorder) ? \"\\tnop\\n\" : \"\\t#nop\\n\", asm_out_file);\n-\n-      else\n-\tdslots_load_filled++;\n-\n-      while (--dslots_number_nops > 0)\n-\tfputs ((set_noreorder) ? \"\\tnop\\n\" : \"\\t#nop\\n\", asm_out_file);\n-\n-      mips_load_reg  = (rtx)0;\n-      mips_load_reg2 = (rtx)0;\n-      mips_load_reg3 = (rtx)0;\n-      mips_load_reg4 = (rtx)0;\n-\n-      if (set_noreorder && --set_noreorder == 0)\n-\tfputs (\"\\t.set\\treorder\\n\", asm_out_file);\n-    }\n-\n-  if (TARGET_STATS)\n-    {\n-      enum rtx_code code = GET_CODE (insn);\n-      if (code == JUMP_INSN || code == CALL_INSN)\n-\tdslots_jump_total++;\n-    }\n-}\n-\n \f\n /* Output at beginning of assembler file.\n    If we are optimizing to use the global pointer, create a temporary\n@@ -4451,3 +4367,4 @@ null_epilogue ()\n \n   return (compute_frame_size (get_frame_size ())) == 0;\n }\n+"}]}