{"sha": "cff1b7e0d21a81fb8b39811f13d7a940d89bdf5a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2ZmMWI3ZTBkMjFhODFmYjhiMzk4MTFmMTNkN2E5NDBkODliZGY1YQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2011-04-12T12:51:28Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2011-04-12T12:51:28Z"}, "message": "recog.h (insn_operand_data): Add an \"allows_mem\" field.\n\ngcc/\n\t* recog.h (insn_operand_data): Add an \"allows_mem\" field.\n\t* genoutput.c (output_operand_data): Initialize it.\n\t* optabs.c (maybe_legitimize_operand_same_code): New function.\n\t(maybe_legitimize_operand): Use it when matching the original\n\top->value.\n\nFrom-SVN: r172316", "tree": {"sha": "ef1f2b179e33edaca097310347743941ae39a687", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef1f2b179e33edaca097310347743941ae39a687"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cff1b7e0d21a81fb8b39811f13d7a940d89bdf5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cff1b7e0d21a81fb8b39811f13d7a940d89bdf5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cff1b7e0d21a81fb8b39811f13d7a940d89bdf5a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cff1b7e0d21a81fb8b39811f13d7a940d89bdf5a/comments", "author": null, "committer": null, "parents": [{"sha": "77059241d8049bd7626ce216caf0313a2fa964c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77059241d8049bd7626ce216caf0313a2fa964c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77059241d8049bd7626ce216caf0313a2fa964c2"}], "stats": {"total": 82, "additions": 66, "deletions": 16}, "files": [{"sha": "4a1ec50bbc3bd16ea38f5305a38a7e5c69614a1d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cff1b7e0d21a81fb8b39811f13d7a940d89bdf5a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cff1b7e0d21a81fb8b39811f13d7a940d89bdf5a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cff1b7e0d21a81fb8b39811f13d7a940d89bdf5a", "patch": "@@ -1,3 +1,11 @@\n+2011-04-12  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\t* recog.h (insn_operand_data): Add an \"allows_mem\" field.\n+\t* genoutput.c (output_operand_data): Initialize it.\n+\t* optabs.c (maybe_legitimize_operand_same_code): New function.\n+\t(maybe_legitimize_operand): Use it when matching the original\n+\top->value.\n+\n 2011-04-12  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* genpreds.c (process_define_predicate): Move most processing"}, {"sha": "621439f479acb4bf31cb45641ca7293ce252c30b", "filename": "gcc/genoutput.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cff1b7e0d21a81fb8b39811f13d7a940d89bdf5a/gcc%2Fgenoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cff1b7e0d21a81fb8b39811f13d7a940d89bdf5a/gcc%2Fgenoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenoutput.c?ref=cff1b7e0d21a81fb8b39811f13d7a940d89bdf5a", "patch": "@@ -66,6 +66,8 @@ along with GCC; see the file COPYING3.  If not see\n      MATCH_OPERAND; it is zero for operands that should not be changed during\n      register elimination such as MATCH_OPERATORs.\n \n+     g. `allows_mem', is true for operands that accept MEM rtxes.\n+\n   The code number of an insn is simply its position in the machine\n   description; code numbers are assigned sequentially to entries in\n   the description, starting with code number 0.\n@@ -256,6 +258,8 @@ output_operand_data (void)\n \n   for (d = odata; d; d = d->next)\n     {\n+      struct pred_data *pred;\n+\n       printf (\"  {\\n\");\n \n       printf (\"    %s,\\n\",\n@@ -269,7 +273,12 @@ output_operand_data (void)\n \n       printf (\"    %d,\\n\", d->constraint == NULL ? 1 : 0);\n \n-      printf (\"    %d\\n\", d->eliminable);\n+      printf (\"    %d,\\n\", d->eliminable);\n+\n+      pred = NULL;\n+      if (d->predicate)\n+\tpred = lookup_predicate (d->predicate);\n+      printf (\"    %d\\n\", pred && pred->codes[MEM]);\n \n       printf(\"  },\\n\");\n     }"}, {"sha": "15f50f7bb480f70772b8f6bddfbf3b28f682185c", "filename": "gcc/optabs.c", "status": "modified", "additions": 46, "deletions": 15, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cff1b7e0d21a81fb8b39811f13d7a940d89bdf5a/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cff1b7e0d21a81fb8b39811f13d7a940d89bdf5a/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=cff1b7e0d21a81fb8b39811f13d7a940d89bdf5a", "patch": "@@ -7001,6 +7001,36 @@ insn_operand_matches (enum insn_code icode, unsigned int opno, rtx operand)\n \t      (operand, insn_data[(int) icode].operand[opno].mode)));\n }\n \f\n+/* Like maybe_legitimize_operand, but do not change the code of the\n+   current rtx value.  */\n+\n+static bool\n+maybe_legitimize_operand_same_code (enum insn_code icode, unsigned int opno,\n+\t\t\t\t    struct expand_operand *op)\n+{\n+  /* See if the operand matches in its current form.  */\n+  if (insn_operand_matches (icode, opno, op->value))\n+    return true;\n+\n+  /* If the operand is a memory, try forcing the address into a register.  */\n+  if (MEM_P (op->value) && insn_data[(int) icode].operand[opno].allows_mem)\n+    {\n+      rtx addr, mem, last;\n+\n+      last = get_last_insn ();\n+      addr = force_reg (Pmode, XEXP (op->value, 0));\n+      mem = replace_equiv_address (op->value, addr);\n+      if (insn_operand_matches (icode, opno, mem))\n+\t{\n+\t  op->value = mem;\n+\t  return true;\n+\t}\n+      delete_insns_since (last);\n+    }\n+\n+  return false;\n+}\n+\n /* Try to make OP match operand OPNO of instruction ICODE.  Return true\n    on success, storing the new operand value back in OP.  */\n \n@@ -7011,32 +7041,36 @@ maybe_legitimize_operand (enum insn_code icode, unsigned int opno,\n   enum machine_mode mode, imode;\n   bool old_volatile_ok, result;\n \n-  old_volatile_ok = volatile_ok;\n   mode = op->mode;\n-  result = false;\n   switch (op->type)\n     {\n     case EXPAND_FIXED:\n+      old_volatile_ok = volatile_ok;\n       volatile_ok = true;\n-      break;\n+      result = maybe_legitimize_operand_same_code (icode, opno, op);\n+      volatile_ok = old_volatile_ok;\n+      return result;\n \n     case EXPAND_OUTPUT:\n       gcc_assert (mode != VOIDmode);\n-      if (!op->value\n-\t  || op->value == const0_rtx\n-\t  || GET_MODE (op->value) != mode\n-\t  || !insn_operand_matches (icode, opno, op->value))\n-\top->value = gen_reg_rtx (mode);\n+      if (op->value\n+\t  && op->value != const0_rtx\n+\t  && GET_MODE (op->value) == mode\n+\t  && maybe_legitimize_operand_same_code (icode, opno, op))\n+\treturn true;\n+\n+      op->value = gen_reg_rtx (mode);\n       break;\n \n     case EXPAND_INPUT:\n     input:\n       gcc_assert (mode != VOIDmode);\n       gcc_assert (GET_MODE (op->value) == VOIDmode\n \t\t  || GET_MODE (op->value) == mode);\n-      result = insn_operand_matches (icode, opno, op->value);\n-      if (!result)\n-\top->value = copy_to_mode_reg (mode, op->value);\n+      if (maybe_legitimize_operand_same_code (icode, opno, op))\n+\treturn true;\n+\n+      op->value = copy_to_mode_reg (mode, op->value);\n       break;\n \n     case EXPAND_CONVERT_TO:\n@@ -7070,10 +7104,7 @@ maybe_legitimize_operand (enum insn_code icode, unsigned int opno,\n \tgoto input;\n       break;\n     }\n-  if (!result)\n-    result = insn_operand_matches (icode, opno, op->value);\n-  volatile_ok = old_volatile_ok;\n-  return result;\n+  return insn_operand_matches (icode, opno, op->value);\n }\n \n /* Make OP describe an input operand that should have the same value"}, {"sha": "cce1321ad09d605e68963066f29039062b41f58a", "filename": "gcc/recog.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cff1b7e0d21a81fb8b39811f13d7a940d89bdf5a/gcc%2Frecog.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cff1b7e0d21a81fb8b39811f13d7a940d89bdf5a/gcc%2Frecog.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.h?ref=cff1b7e0d21a81fb8b39811f13d7a940d89bdf5a", "patch": "@@ -272,6 +272,8 @@ struct insn_operand_data\n   const char is_operator;\n \n   const char eliminable;\n+\n+  const char allows_mem;\n };\n \n /* Legal values for insn_data.output_format.  Indicate what type of data"}]}