{"sha": "009668e31f4ee910eae874b24afb8eb6adf65fae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDA5NjY4ZTMxZjRlZTkxMGVhZTg3NGIyNGFmYjhlYjZhZGY2NWZhZQ==", "commit": {"author": {"name": "Javier Miranda", "email": "miranda@adacore.com", "date": "2020-03-01T19:04:48Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-09T08:09:07Z"}, "message": "[Ada] Missing check on private overriding of dispatching primitive\n\n2020-06-09  Javier Miranda  <miranda@adacore.com>\n\ngcc/ada/\n\n\t* sem_ch6.adb (New_Overloaded_Entity): Add missing call to check\n\tsubtype conformance of overriding dispatching primitive.\n\t* sem_eval.adb (Subtypes_Statically_Match): Handle derivations\n\tof private subtypes.\n\t* libgnat/g-exptty.adb, libgnat/g-exptty.ads\n\t(Set_Up_Communications): Fix the profile since null-exclusion is\n\tmissing in the access type formals.\n\t* sem_disp.ads (Check_Operation_From_Private_View): Adding\n\tdocumentation.", "tree": {"sha": "293532dcc33f84f79d321e4f6cf75280b448b396", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/293532dcc33f84f79d321e4f6cf75280b448b396"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/009668e31f4ee910eae874b24afb8eb6adf65fae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/009668e31f4ee910eae874b24afb8eb6adf65fae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/009668e31f4ee910eae874b24afb8eb6adf65fae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/009668e31f4ee910eae874b24afb8eb6adf65fae/comments", "author": {"login": "miranda-adacore", "id": 54413934, "node_id": "MDQ6VXNlcjU0NDEzOTM0", "avatar_url": "https://avatars.githubusercontent.com/u/54413934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miranda-adacore", "html_url": "https://github.com/miranda-adacore", "followers_url": "https://api.github.com/users/miranda-adacore/followers", "following_url": "https://api.github.com/users/miranda-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/miranda-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/miranda-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miranda-adacore/subscriptions", "organizations_url": "https://api.github.com/users/miranda-adacore/orgs", "repos_url": "https://api.github.com/users/miranda-adacore/repos", "events_url": "https://api.github.com/users/miranda-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/miranda-adacore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2048d055bfe230b7074c492245ac041f739e471", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2048d055bfe230b7074c492245ac041f739e471", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2048d055bfe230b7074c492245ac041f739e471"}], "stats": {"total": 59, "additions": 47, "deletions": 12}, "files": [{"sha": "bc239e48651663328309e9f6510234d41c780865", "filename": "gcc/ada/libgnat/g-exptty.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/009668e31f4ee910eae874b24afb8eb6adf65fae/gcc%2Fada%2Flibgnat%2Fg-exptty.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/009668e31f4ee910eae874b24afb8eb6adf65fae/gcc%2Fada%2Flibgnat%2Fg-exptty.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fg-exptty.adb?ref=009668e31f4ee910eae874b24afb8eb6adf65fae", "patch": "@@ -314,9 +314,9 @@ package body GNAT.Expect.TTY is\n    overriding procedure Set_Up_Communications\n      (Pid        : in out TTY_Process_Descriptor;\n       Err_To_Out : Boolean;\n-      Pipe1      : access Pipe_Type;\n-      Pipe2      : access Pipe_Type;\n-      Pipe3      : access Pipe_Type)\n+      Pipe1      : not null access Pipe_Type;\n+      Pipe2      : not null access Pipe_Type;\n+      Pipe3      : not null access Pipe_Type)\n    is\n       pragma Unreferenced (Err_To_Out, Pipe1, Pipe2, Pipe3);\n "}, {"sha": "ede147caa2d98c7e73c2bb394ab3c583a7b2ff57", "filename": "gcc/ada/libgnat/g-exptty.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/009668e31f4ee910eae874b24afb8eb6adf65fae/gcc%2Fada%2Flibgnat%2Fg-exptty.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/009668e31f4ee910eae874b24afb8eb6adf65fae/gcc%2Fada%2Flibgnat%2Fg-exptty.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fg-exptty.ads?ref=009668e31f4ee910eae874b24afb8eb6adf65fae", "patch": "@@ -116,9 +116,9 @@ private\n    procedure Set_Up_Communications\n      (Pid        : in out TTY_Process_Descriptor;\n       Err_To_Out : Boolean;\n-      Pipe1      : access Pipe_Type;\n-      Pipe2      : access Pipe_Type;\n-      Pipe3      : access Pipe_Type);\n+      Pipe1      : not null access Pipe_Type;\n+      Pipe2      : not null access Pipe_Type;\n+      Pipe3      : not null access Pipe_Type);\n \n    procedure Set_Up_Parent_Communications\n      (Pid   : in out TTY_Process_Descriptor;"}, {"sha": "69494a08584d4fa42e23555e867ab1c5e1bccf10", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/009668e31f4ee910eae874b24afb8eb6adf65fae/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/009668e31f4ee910eae874b24afb8eb6adf65fae/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=009668e31f4ee910eae874b24afb8eb6adf65fae", "patch": "@@ -11177,6 +11177,18 @@ package body Sem_Ch6 is\n                      Inherit_Subprogram_Contract (E, S);\n                   end if;\n \n+                  --  When a dispatching operation overrides an inherited\n+                  --  subprogram, it shall be subtype conformant with the\n+                  --  inherited subprogram (RM 3.9.2 (10.2)).\n+\n+                  if Comes_From_Source (E)\n+                    and then Is_Dispatching_Operation (E)\n+                    and then Find_Dispatching_Type (S)\n+                               = Find_Dispatching_Type (E)\n+                  then\n+                     Check_Subtype_Conformant (E, S);\n+                  end if;\n+\n                   if Comes_From_Source (E) then\n                      Check_Overriding_Indicator (E, S, Is_Primitive => False);\n "}, {"sha": "993ec10f38c3d9ff8d38ca4d8c8fe80bf3b2fcb9", "filename": "gcc/ada/sem_disp.ads", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/009668e31f4ee910eae874b24afb8eb6adf65fae/gcc%2Fada%2Fsem_disp.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/009668e31f4ee910eae874b24afb8eb6adf65fae/gcc%2Fada%2Fsem_disp.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_disp.ads?ref=009668e31f4ee910eae874b24afb8eb6adf65fae", "patch": "@@ -64,11 +64,11 @@ package Sem_Disp is\n    --  this call actually do???\n \n    procedure Check_Operation_From_Private_View (Subp, Old_Subp : Entity_Id);\n-   --  Add Old_Subp to the list of primitive operations of the corresponding\n-   --  tagged type if it is the full view of a private tagged type. The Alias\n-   --  of Old_Subp is adjusted to point to the inherited procedure of the\n-   --  full view because it is always this one which has to be called.\n-   --  What is Subp used for???\n+   --  No action performed if Subp is not an alias of a dispatching operation.\n+   --  Add Old_Subp (if not already present) to the list of primitives of the\n+   --  tagged type T of Subp if T is the full view of a private tagged type.\n+   --  The Alias of Old_Subp is adjusted to point to the inherited procedure\n+   --  of the full view because it is always this one which has to be called.\n \n    function Covered_Interface_Op (Prim : Entity_Id) return Entity_Id;\n    --  Returns the interface primitive that Prim covers, when its controlling"}, {"sha": "879f0c1986f6c41d6c10d452accb3fbc0a233162", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/009668e31f4ee910eae874b24afb8eb6adf65fae/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/009668e31f4ee910eae874b24afb8eb6adf65fae/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=009668e31f4ee910eae874b24afb8eb6adf65fae", "patch": "@@ -6092,14 +6092,37 @@ package body Sem_Eval is\n \n       elsif Has_Discriminants (T1) or else Has_Discriminants (T2) then\n \n+         --  Handle derivations of private subtypes. For example S1 statically\n+         --  matches the full view of T1 in the following example:\n+\n+         --      type T1(<>) is new Root with private;\n+         --      subtype S1 is new T1;\n+         --      overriding proc P1 (P : S1);\n+         --    private\n+         --      type T1 (D : Disc) is new Root with ...\n+\n+         if Ekind (T2) = E_Record_Subtype_With_Private\n+           and then not Has_Discriminants (T2)\n+           and then Partial_View_Has_Unknown_Discr (T1)\n+           and then Etype (T2) = T1\n+         then\n+            return True;\n+\n+         elsif Ekind (T1) = E_Record_Subtype_With_Private\n+           and then not Has_Discriminants (T1)\n+           and then Partial_View_Has_Unknown_Discr (T2)\n+           and then Etype (T1) = T2\n+         then\n+            return True;\n+\n          --  Because of view exchanges in multiple instantiations, conformance\n          --  checking might try to match a partial view of a type with no\n          --  discriminants with a full view that has defaulted discriminants.\n          --  In such a case, use the discriminant constraint of the full view,\n          --  which must exist because we know that the two subtypes have the\n          --  same base type.\n \n-         if Has_Discriminants (T1) /= Has_Discriminants (T2) then\n+         elsif Has_Discriminants (T1) /= Has_Discriminants (T2) then\n             if In_Instance then\n                if Is_Private_Type (T2)\n                  and then Present (Full_View (T2))"}]}