{"sha": "cedf8d2ee7cf8bb3a5d4d3fe480b257110c0debb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2VkZjhkMmVlN2NmOGJiM2E1ZDRkM2ZlNDgwYjI1NzExMGMwZGViYg==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2019-02-10T15:52:38Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2019-02-10T15:52:38Z"}, "message": "re PR fortran/71723 ([F08] ICE on invalid pointer initialization)\n\n2019-02-10  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/71237\n\t* expr.c (gfc_check_assign): Add argument is_init_expr.  If we are\n\tlooking at an init expression, issue error if the target is not a\n\tTARGET and we are not looking at a procedure pointer.\n\t* gfortran.h (gfc_check_assign): Add optional argument\n\tis_init_expr.\n\n2019-02-10  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/71237\n\t* gfortran.dg/pointer_init_2.f90: Adjust error messages.\n\t* gfortran.dg/pointer_init_6.f90: Likewise.\n\t* gfortran.dg/pointer_init_9.f90: New test.\n\nFrom-SVN: r268748", "tree": {"sha": "66de6950f32c4e85b501ddff96ddb2149f461dd3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/66de6950f32c4e85b501ddff96ddb2149f461dd3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cedf8d2ee7cf8bb3a5d4d3fe480b257110c0debb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cedf8d2ee7cf8bb3a5d4d3fe480b257110c0debb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cedf8d2ee7cf8bb3a5d4d3fe480b257110c0debb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cedf8d2ee7cf8bb3a5d4d3fe480b257110c0debb/comments", "author": null, "committer": null, "parents": [{"sha": "1386121ecd068799110d01f01e20e190e3937d25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1386121ecd068799110d01f01e20e190e3937d25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1386121ecd068799110d01f01e20e190e3937d25"}], "stats": {"total": 76, "additions": 65, "deletions": 11}, "files": [{"sha": "73c42796fba9f90cd440c878a2f9a3da4c8d9ac6", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cedf8d2ee7cf8bb3a5d4d3fe480b257110c0debb/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cedf8d2ee7cf8bb3a5d4d3fe480b257110c0debb/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=cedf8d2ee7cf8bb3a5d4d3fe480b257110c0debb", "patch": "@@ -1,3 +1,12 @@\n+2019-02-10  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/71237\n+\t* expr.c (gfc_check_assign): Add argument is_init_expr.  If we are\n+\tlooking at an init expression, issue error if the target is not a\n+\tTARGET and we are not looking at a procedure pointer.\n+\t* gfortran.h (gfc_check_assign): Add optional argument\n+\tis_init_expr.\n+\n 2019-02-09  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/89077"}, {"sha": "c3d78d358cf694473942dc7ed02b870325a3fb86", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 30, "deletions": 6, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cedf8d2ee7cf8bb3a5d4d3fe480b257110c0debb/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cedf8d2ee7cf8bb3a5d4d3fe480b257110c0debb/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=cedf8d2ee7cf8bb3a5d4d3fe480b257110c0debb", "patch": "@@ -3691,7 +3691,7 @@ gfc_check_assign (gfc_expr *lvalue, gfc_expr *rvalue, int conform,\n \n bool\n gfc_check_pointer_assign (gfc_expr *lvalue, gfc_expr *rvalue,\n-\t\t\t  bool suppress_type_test)\n+\t\t\t  bool suppress_type_test, bool is_init_expr)\n {\n   symbol_attribute attr, lhs_attr;\n   gfc_ref *ref;\n@@ -4133,11 +4133,35 @@ gfc_check_pointer_assign (gfc_expr *lvalue, gfc_expr *rvalue,\n       return false;\n     }\n \n-  if (!attr.target && !attr.pointer)\n+  if (is_init_expr)\n     {\n-      gfc_error (\"Pointer assignment target is neither TARGET \"\n-\t\t \"nor POINTER at %L\", &rvalue->where);\n-      return false;\n+      gfc_symbol *sym;\n+      bool target;\n+\n+      gcc_assert (rvalue->symtree);\n+      sym = rvalue->symtree->n.sym;\n+\n+      if (sym->ts.type == BT_CLASS && sym->attr.class_ok)\n+\ttarget = CLASS_DATA (sym)->attr.target;\n+      else\n+\ttarget = sym->attr.target;\n+\n+      if (!target && !proc_pointer)\n+\t{\n+\t  gfc_error (\"Pointer assignment target in initialization expression \"\n+\t\t     \"does not have the TARGET attribute at %L\",\n+\t\t     &rvalue->where);\n+\t  return false;\n+\t}\n+    }\n+  else\n+    {\n+      if (!attr.target && !attr.pointer)\n+\t{\n+\t  gfc_error (\"Pointer assignment target is neither TARGET \"\n+\t\t     \"nor POINTER at %L\", &rvalue->where);\n+\t  return false;\n+\t}\n     }\n \n   if (is_pure && gfc_impure_variable (rvalue->symtree->n.sym))\n@@ -4271,7 +4295,7 @@ gfc_check_assign_symbol (gfc_symbol *sym, gfc_component *comp, gfc_expr *rvalue)\n     }\n \n   if (pointer || proc_pointer)\n-    r = gfc_check_pointer_assign (&lvalue, rvalue);\n+    r = gfc_check_pointer_assign (&lvalue, rvalue, false, true);\n   else\n     {\n       /* If a conversion function, e.g., __convert_i8_i4, was inserted"}, {"sha": "0a0fef81d9fb7ee0820e88108e2541e042405ede", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cedf8d2ee7cf8bb3a5d4d3fe480b257110c0debb/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cedf8d2ee7cf8bb3a5d4d3fe480b257110c0debb/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=cedf8d2ee7cf8bb3a5d4d3fe480b257110c0debb", "patch": "@@ -3247,7 +3247,8 @@ int gfc_kind_max (gfc_expr *, gfc_expr *);\n bool gfc_check_conformance (gfc_expr *, gfc_expr *, const char *, ...) ATTRIBUTE_PRINTF_3;\n bool gfc_check_assign (gfc_expr *, gfc_expr *, int, bool c = true);\n bool gfc_check_pointer_assign (gfc_expr *lvalue, gfc_expr *rvalue,\n-  bool suppres_type_test = false);\n+\t\t\t       bool suppres_type_test = false,\n+\t\t\t       bool is_init_expr = false);\n bool gfc_check_assign_symbol (gfc_symbol *, gfc_component *, gfc_expr *);\n \n gfc_expr *gfc_build_default_init_expr (gfc_typespec *, locus *);"}, {"sha": "c70ec9f270474f064b69e4c03dd684070cd7895d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cedf8d2ee7cf8bb3a5d4d3fe480b257110c0debb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cedf8d2ee7cf8bb3a5d4d3fe480b257110c0debb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cedf8d2ee7cf8bb3a5d4d3fe480b257110c0debb", "patch": "@@ -1,7 +1,14 @@\n+2019-02-10  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/71237\n+\t* gfortran.dg/pointer_init_2.f90: Adjust error messages.\n+\t* gfortran.dg/pointer_init_6.f90: Likewise.\n+\t* gfortran.dg/pointer_init_9.f90: New test.\n+\n 2019-02-10  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/67679\n-\t* gfortran.dg/warn_undefined_1.f90: New test.\n+\t* gfortran.dg/warn_undefined_1.f90: New test.o\n \n 2019-02-10  Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "bc1ef74ec5590a2cb04869c74f6a3b6bb7000b5b", "filename": "gcc/testsuite/gfortran.dg/pointer_init_2.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cedf8d2ee7cf8bb3a5d4d3fe480b257110c0debb/gcc%2Ftestsuite%2Fgfortran.dg%2Fpointer_init_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cedf8d2ee7cf8bb3a5d4d3fe480b257110c0debb/gcc%2Ftestsuite%2Fgfortran.dg%2Fpointer_init_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpointer_init_2.f90?ref=cedf8d2ee7cf8bb3a5d4d3fe480b257110c0debb", "patch": "@@ -18,7 +18,7 @@ subroutine sub\n   integer, pointer :: dp0 => 13  ! { dg-error \"Error in pointer initialization\" }\n   integer, pointer :: dp1 => r   ! { dg-error \"Different types in pointer assignment\" }\n   integer, pointer :: dp2 => v   ! { dg-error \"Different ranks in pointer assignment\" }\n-  integer, pointer :: dp3 => i   ! { dg-error \"is neither TARGET nor POINTER\" }\n+  integer, pointer :: dp3 => i   ! { dg-error \"Pointer assignment target in initialization expression does not have the TARGET attribute\" }\n   integer, pointer :: dp4 => j   ! { dg-error \"must have the SAVE attribute\" }\n   integer, pointer :: dp5 => a   ! { dg-error \"must not be ALLOCATABLE\" }\n \n@@ -35,7 +35,7 @@ subroutine sub\n   end type t3\n \n   type t4\n-    integer, pointer :: dpc3 => i   ! { dg-error \"Pointer assignment target is neither TARGET nor POINTER\" }\n+    integer, pointer :: dpc3 => i   ! { dg-error \"Pointer assignment target in initialization expression does not have the TARGET attribute\" }\n   end type t4\n \n   type t5"}, {"sha": "3abad4ae1795f5dc739651a8f83987cdd6622a74", "filename": "gcc/testsuite/gfortran.dg/pointer_init_6.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cedf8d2ee7cf8bb3a5d4d3fe480b257110c0debb/gcc%2Ftestsuite%2Fgfortran.dg%2Fpointer_init_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cedf8d2ee7cf8bb3a5d4d3fe480b257110c0debb/gcc%2Ftestsuite%2Fgfortran.dg%2Fpointer_init_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpointer_init_6.f90?ref=cedf8d2ee7cf8bb3a5d4d3fe480b257110c0debb", "patch": "@@ -13,7 +13,7 @@ module m1\n  integer, target :: i\n  type(t), target :: x\n  integer, pointer :: p1 => i\n- integer, pointer :: p2 => p1   ! { dg-error \"must have the TARGET attribute\" }\n+ integer, pointer :: p2 => p1   ! { dg-error \"Pointer assignment target in initialization expression does not have the TARGET attribute at\" }\n  integer, pointer :: p3 => x%p  ! { dg-error \"must have the TARGET attribute\" }\n  integer, pointer :: p4 => x%i\n  integer, pointer :: p5 => u    ! { dg-error \"has no IMPLICIT type\" }"}, {"sha": "da00330e5366e26b9a3060715b010ac4252f0c27", "filename": "gcc/testsuite/gfortran.dg/pointer_init_9.f90", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cedf8d2ee7cf8bb3a5d4d3fe480b257110c0debb/gcc%2Ftestsuite%2Fgfortran.dg%2Fpointer_init_9.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cedf8d2ee7cf8bb3a5d4d3fe480b257110c0debb/gcc%2Ftestsuite%2Fgfortran.dg%2Fpointer_init_9.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpointer_init_9.f90?ref=cedf8d2ee7cf8bb3a5d4d3fe480b257110c0debb", "patch": "@@ -0,0 +1,13 @@\n+! { dg-do compile }\n+! PR 71237 - this used to ICE.\n+module data_mod\n+  implicit none\n+\n+  type data_t\n+    integer :: i\n+  end type\n+\n+  type(data_t), pointer :: data\n+  integer, pointer :: idata => data%i ! { dg-error \"Pointer assignment target in initialization expression does not have the TARGET attribute\" }\n+\n+end module"}]}