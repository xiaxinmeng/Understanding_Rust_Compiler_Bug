{"sha": "30f7c83e9cfe7c015448d72f63c4c39d14bc6de6", "node_id": "C_kwDOANBUbNoAKDMwZjdjODNlOWNmZTdjMDE1NDQ4ZDcyZjYzYzRjMzlkMTRiYzZkZTY", "commit": {"author": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2022-04-12T21:17:50Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-04-12T21:17:50Z"}, "message": "libgccjit: Add support for bitcasts [PR104071]\n\ngcc/jit/\n\tPR jit/104071\n\t* docs/_build/texinfo/libgccjit.texi: Regenerate.\n\t* docs/topics/compatibility.rst (LIBGCCJIT_ABI_21): New ABI tag.\n\t* docs/topics/expressions.rst: Add documentation for the\n\tfunction gcc_jit_context_new_bitcast.\n\t* jit-playback.cc: New function (new_bitcast).\n\t* jit-playback.h: New function (new_bitcast).\n\t* jit-recording.cc: New functions (new_bitcast,\n\tbitcast::replay_into, bitcast::visit_children,\n\tbitcast::make_debug_string, bitcast::write_reproducer).\n\t* jit-recording.h: New class (bitcast) and new function\n\t(new_bitcast, bitcast::replay_into, bitcast::visit_children,\n\tbitcast::make_debug_string, bitcast::write_reproducer,\n\tbitcast::get_precedence).\n\t* libgccjit.cc: New function (gcc_jit_context_new_bitcast)\n\t* libgccjit.h: New function (gcc_jit_context_new_bitcast)\n\t* libgccjit.map (LIBGCCJIT_ABI_21): New ABI tag.\n\ngcc/testsuite/\n\tPR jit/104071\n\t* jit.dg/all-non-failing-tests.h: Add new test-bitcast.\n\t* jit.dg/test-bitcast.c: New test.\n\t* jit.dg/test-error-bad-bitcast.c: New test.\n\t* jit.dg/test-error-bad-bitcast2.c: New test.\n\ngcc/\n\tPR jit/104071\n\t* toplev.cc: Call the new function tree_cc_finalize in\n\ttoplev::finalize.\n\t* tree.cc: New functions (clear_nonstandard_integer_type_cache\n\tand tree_cc_finalize) to clear the cache of non-standard integer\n\ttypes to avoid having issues with some optimizations of\n\tbitcast where the SSA_NAME will have a size of a cached\n\tinteger type that should have been invalidated, causing a\n\tcomparison of integer constant to fail.\n\t* tree.h: New function (tree_cc_finalize).", "tree": {"sha": "9cb2b8d0acf1b0a5e779e85c1cd53ce8d17a270f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9cb2b8d0acf1b0a5e779e85c1cd53ce8d17a270f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30f7c83e9cfe7c015448d72f63c4c39d14bc6de6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30f7c83e9cfe7c015448d72f63c4c39d14bc6de6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30f7c83e9cfe7c015448d72f63c4c39d14bc6de6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30f7c83e9cfe7c015448d72f63c4c39d14bc6de6/comments", "author": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af80ea97b61847d91da0d303e85faed437059092", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af80ea97b61847d91da0d303e85faed437059092", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af80ea97b61847d91da0d303e85faed437059092"}], "stats": {"total": 1704, "additions": 1079, "deletions": 625}, "files": [{"sha": "e5759eb973e2468a79c01f193c02140784518838", "filename": "gcc/jit/docs/_build/texinfo/libgccjit.texi", "status": "modified", "additions": 663, "deletions": 625, "changes": 1288, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30f7c83e9cfe7c015448d72f63c4c39d14bc6de6/gcc%2Fjit%2Fdocs%2F_build%2Ftexinfo%2Flibgccjit.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30f7c83e9cfe7c015448d72f63c4c39d14bc6de6/gcc%2Fjit%2Fdocs%2F_build%2Ftexinfo%2Flibgccjit.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2F_build%2Ftexinfo%2Flibgccjit.texi?ref=30f7c83e9cfe7c015448d72f63c4c39d14bc6de6"}, {"sha": "cfd31335611792fdadd92469e532084f5cab9ae5", "filename": "gcc/jit/docs/topics/compatibility.rst", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30f7c83e9cfe7c015448d72f63c4c39d14bc6de6/gcc%2Fjit%2Fdocs%2Ftopics%2Fcompatibility.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30f7c83e9cfe7c015448d72f63c4c39d14bc6de6/gcc%2Fjit%2Fdocs%2Ftopics%2Fcompatibility.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Ftopics%2Fcompatibility.rst?ref=30f7c83e9cfe7c015448d72f63c4c39d14bc6de6", "patch": "@@ -334,3 +334,12 @@ of a global with an rvalue and to use constructors:\n   * :c:macro:`GCC_JIT_TYPE_INT32_T`\n   * :c:macro:`GCC_JIT_TYPE_INT64_T`\n   * :c:macro:`GCC_JIT_TYPE_INT128_T`\n+\n+.. _LIBGCCJIT_ABI_21:\n+\n+``LIBGCCJIT_ABI_21``\n+--------------------\n+``LIBGCCJIT_ABI_21`` covers the addition of an API entrypoint to bitcast a\n+value from one type to another:\n+\n+  * :func:`gcc_jit_context_new_bitcast`"}, {"sha": "e9e8de5d4a238e318e7f495babce31f15358607a", "filename": "gcc/jit/docs/topics/expressions.rst", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30f7c83e9cfe7c015448d72f63c4c39d14bc6de6/gcc%2Fjit%2Fdocs%2Ftopics%2Fexpressions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30f7c83e9cfe7c015448d72f63c4c39d14bc6de6/gcc%2Fjit%2Fdocs%2Ftopics%2Fexpressions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Ftopics%2Fexpressions.rst?ref=30f7c83e9cfe7c015448d72f63c4c39d14bc6de6", "patch": "@@ -653,6 +653,25 @@ Type-coercion\n      * int <-> bool\n      * P*  <-> Q*, for pointer types P and Q\n \n+.. function:: gcc_jit_rvalue *\\\n+              gcc_jit_context_new_bitcast (gcc_jit_context *ctxt,\\\n+                                           gcc_jit_location *loc,\\\n+                                           gcc_jit_rvalue *rvalue,\\\n+                                           gcc_jit_type *type)\n+\n+   Given an rvalue of T, bitcast it to another type, meaning that this will\n+   generate a new rvalue by interpreting the bits of ``rvalue`` to the layout\n+   of ``type``.\n+\n+   The type of rvalue must be the same size as the size of ``type``.\n+\n+   This entrypoint was added in :ref:`LIBGCCJIT_ABI_21`; you can test for\n+   its presence using\n+\n+   .. code-block:: c\n+\n+      #ifdef LIBGCCJIT_HAVE_gcc_jit_context_new_bitcast\n+\n Lvalues\n -------\n "}, {"sha": "b1e72fbcf8a3aa29ab50a7ad141e8c881b7086a0", "filename": "gcc/jit/jit-playback.cc", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30f7c83e9cfe7c015448d72f63c4c39d14bc6de6/gcc%2Fjit%2Fjit-playback.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30f7c83e9cfe7c015448d72f63c4c39d14bc6de6/gcc%2Fjit%2Fjit-playback.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-playback.cc?ref=30f7c83e9cfe7c015448d72f63c4c39d14bc6de6", "patch": "@@ -1422,6 +1422,36 @@ new_cast (playback::location *loc,\n   return new rvalue (this, t_cast);\n }\n \n+/* Construct a playback::rvalue instance (wrapping a tree) for a\n+   bitcast.  */\n+\n+playback::rvalue *\n+playback::context::\n+new_bitcast (location *loc,\n+\t     rvalue *expr,\n+\t     type *type_)\n+{\n+  tree expr_size = TYPE_SIZE (expr->get_type ()->as_tree ());\n+  tree type_size = TYPE_SIZE (type_->as_tree ());\n+  tree t_expr = expr->as_tree ();\n+  tree t_dst_type = type_->as_tree ();\n+  if (expr_size != type_size)\n+  {\n+    active_playback_ctxt->add_error (loc,\n+      \"bitcast with types of different sizes\");\n+    fprintf (stderr, \"input expression (size: %ld):\\n\",\n+      tree_to_uhwi (expr_size));\n+    debug_tree (t_expr);\n+    fprintf (stderr, \"requested type (size: %ld):\\n\",\n+      tree_to_uhwi (type_size));\n+    debug_tree (t_dst_type);\n+  }\n+  tree t_bitcast = build1 (VIEW_CONVERT_EXPR, t_dst_type, t_expr);\n+  if (loc)\n+    set_tree_location (t_bitcast, loc);\n+  return new rvalue (this, t_bitcast);\n+}\n+\n /* Construct a playback::lvalue instance (wrapping a tree) for an\n    array access.  */\n "}, {"sha": "5b107be9d698356a0903eeab05af474ba6c40222", "filename": "gcc/jit/jit-playback.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30f7c83e9cfe7c015448d72f63c4c39d14bc6de6/gcc%2Fjit%2Fjit-playback.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30f7c83e9cfe7c015448d72f63c4c39d14bc6de6/gcc%2Fjit%2Fjit-playback.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-playback.h?ref=30f7c83e9cfe7c015448d72f63c4c39d14bc6de6", "patch": "@@ -180,6 +180,11 @@ class context : public log_user\n \t    rvalue *expr,\n \t    type *type_);\n \n+  rvalue *\n+  new_bitcast (location *loc,\n+\t       rvalue *expr,\n+\t       type *type_);\n+\n   lvalue *\n   new_array_access (location *loc,\n \t\t    rvalue *ptr,"}, {"sha": "4f12b206e1a27491251c7638499cd41316a0bc4d", "filename": "gcc/jit/jit-recording.cc", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30f7c83e9cfe7c015448d72f63c4c39d14bc6de6/gcc%2Fjit%2Fjit-recording.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30f7c83e9cfe7c015448d72f63c4c39d14bc6de6/gcc%2Fjit%2Fjit-recording.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-recording.cc?ref=30f7c83e9cfe7c015448d72f63c4c39d14bc6de6", "patch": "@@ -1246,6 +1246,22 @@ recording::context::new_cast (recording::location *loc,\n   return result;\n }\n \n+/* Create a recording::bitcast instance and add it to this context's list\n+   of mementos.\n+\n+   Implements the post-error-checking part of\n+   gcc_jit_context_new_bitcast.  */\n+\n+recording::rvalue *\n+recording::context::new_bitcast (location *loc,\n+\t\t\t\t rvalue *expr,\n+\t\t\t\t type *type_)\n+{\n+  recording::rvalue *result = new bitcast (this, loc, expr, type_);\n+  record (result);\n+  return result;\n+}\n+\n /* Create a recording::call instance and add it to this context's list\n    of mementos.\n \n@@ -5882,6 +5898,56 @@ recording::cast::write_reproducer (reproducer &r)\n \t   r.get_identifier_as_type (get_type ()));\n }\n \n+/* Implementation of pure virtual hook recording::memento::replay_into\n+   for recording::bitcast.  */\n+\n+void\n+recording::bitcast::replay_into (replayer *r)\n+{\n+  set_playback_obj (r->new_bitcast (playback_location (r, m_loc),\n+\t\t\t\t    m_rvalue->playback_rvalue (),\n+\t\t\t\t    get_type ()->playback_type ()));\n+}\n+\n+/* Implementation of pure virtual hook recording::rvalue::visit_children\n+   for recording::bitcast.  */\n+void\n+recording::bitcast::visit_children (rvalue_visitor *v)\n+{\n+  v->visit (m_rvalue);\n+}\n+\n+/* Implementation of recording::memento::make_debug_string for\n+   casts.  */\n+\n+recording::string *\n+recording::bitcast::make_debug_string ()\n+{\n+  enum precedence prec = get_precedence ();\n+  return string::from_printf (m_ctxt,\n+\t\t\t      \"bitcast(%s, %s)\",\n+\t\t\t      m_rvalue->get_debug_string_parens (prec),\n+\t\t\t      get_type ()->get_debug_string ());\n+}\n+\n+/* Implementation of recording::memento::write_reproducer for casts.  */\n+\n+void\n+recording::bitcast::write_reproducer (reproducer &r)\n+{\n+  const char *id = r.make_identifier (this, \"rvalue\");\n+  r.write (\"  gcc_jit_rvalue *%s =\\n\"\n+\t   \"    gcc_jit_context_new_bitcast (%s,\\n\"\n+\t   \"                                 %s, /* gcc_jit_location *loc */\\n\"\n+\t   \"                                 %s, /* gcc_jit_rvalue *rvalue */\\n\"\n+\t   \"                                 %s); /* gcc_jit_type *type */\\n\",\n+\t   id,\n+\t   r.get_identifier (get_context ()),\n+\t   r.get_identifier (m_loc),\n+\t   r.get_identifier_as_rvalue (m_rvalue),\n+\t   r.get_identifier_as_type (get_type ()));\n+}\n+\n /* The implementation of class gcc::jit::recording::base_call.  */\n \n /* The constructor for gcc::jit::recording::base_call.  */"}, {"sha": "20d161de4311b220722630505e120bb327926771", "filename": "gcc/jit/jit-recording.h", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30f7c83e9cfe7c015448d72f63c4c39d14bc6de6/gcc%2Fjit%2Fjit-recording.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30f7c83e9cfe7c015448d72f63c4c39d14bc6de6/gcc%2Fjit%2Fjit-recording.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-recording.h?ref=30f7c83e9cfe7c015448d72f63c4c39d14bc6de6", "patch": "@@ -205,6 +205,11 @@ class context : public log_user\n \t    rvalue *expr,\n \t    type *type_);\n \n+  rvalue *\n+  new_bitcast (location *loc,\n+\t       rvalue *expr,\n+\t       type *type_);\n+\n   lvalue *\n   new_array_access (location *loc,\n \t\t    rvalue *ptr,\n@@ -1709,6 +1714,33 @@ class cast : public rvalue\n   rvalue *m_rvalue;\n };\n \n+class bitcast : public rvalue\n+{\n+public:\n+  bitcast (context *ctxt,\n+\t   location *loc,\n+\t   rvalue *a,\n+\t   type *type_)\n+  : rvalue (ctxt, loc, type_),\n+    m_rvalue (a)\n+  {}\n+\n+  void replay_into (replayer *r) FINAL OVERRIDE;\n+\n+  void visit_children (rvalue_visitor *v) FINAL OVERRIDE;\n+\n+private:\n+  string * make_debug_string () FINAL OVERRIDE;\n+  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n+  enum precedence get_precedence () const FINAL OVERRIDE\n+  {\n+    return PRECEDENCE_CAST;\n+  }\n+\n+private:\n+  rvalue *m_rvalue;\n+};\n+\n class base_call : public rvalue\n {\n  public:"}, {"sha": "142f60bf57d07fa28fdb5077140dbe60646541c6", "filename": "gcc/jit/libgccjit.cc", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30f7c83e9cfe7c015448d72f63c4c39d14bc6de6/gcc%2Fjit%2Flibgccjit.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30f7c83e9cfe7c015448d72f63c4c39d14bc6de6/gcc%2Fjit%2Flibgccjit.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Flibgccjit.cc?ref=30f7c83e9cfe7c015448d72f63c4c39d14bc6de6", "patch": "@@ -2433,6 +2433,28 @@ gcc_jit_context_new_cast (gcc_jit_context *ctxt,\n   return static_cast <gcc_jit_rvalue *> (ctxt->new_cast (loc, rvalue, type));\n }\n \n+/* Public entrypoint.  See description in libgccjit.h.\n+\n+   After error-checking, the real work is done by the\n+   gcc::jit::recording::context::new_bitcast method in jit-recording.c.  */\n+\n+gcc_jit_rvalue *\n+gcc_jit_context_new_bitcast (gcc_jit_context *ctxt,\n+\t\t\t     gcc_jit_location *loc,\n+\t\t\t     gcc_jit_rvalue *rvalue,\n+\t\t\t     gcc_jit_type *type)\n+{\n+  RETURN_NULL_IF_FAIL (ctxt, NULL, loc, \"NULL context\");\n+  JIT_LOG_FUNC (ctxt->get_logger ());\n+  /* LOC can be NULL.  */\n+  RETURN_NULL_IF_FAIL (rvalue, ctxt, loc, \"NULL rvalue\");\n+  RETURN_NULL_IF_FAIL (type, ctxt, loc, \"NULL type\");\n+  /* We cannot check if the size of rvalue matches the size of type here, so\n+   we'll do it at playback. */\n+\n+  return static_cast <gcc_jit_rvalue *> (ctxt->new_bitcast (loc, rvalue, type));\n+}\n+\n /* Public entrypoint.  See description in libgccjit.h.\n \n    After error-checking, the real work is done by the"}, {"sha": "0628f174871ed972ed2caeff7394ab6386a1c23b", "filename": "gcc/jit/libgccjit.h", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30f7c83e9cfe7c015448d72f63c4c39d14bc6de6/gcc%2Fjit%2Flibgccjit.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30f7c83e9cfe7c015448d72f63c4c39d14bc6de6/gcc%2Fjit%2Flibgccjit.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Flibgccjit.h?ref=30f7c83e9cfe7c015448d72f63c4c39d14bc6de6", "patch": "@@ -1234,6 +1234,21 @@ gcc_jit_context_new_cast (gcc_jit_context *ctxt,\n \t\t\t  gcc_jit_rvalue *rvalue,\n \t\t\t  gcc_jit_type *type);\n \n+/* Reinterpret a value as another type.\n+\n+#define LIBGCCJIT_HAVE_gcc_jit_context_new_bitcast\n+\n+   The types must be of the same size.\n+\n+   This API entrypoint was added in LIBGCCJIT_ABI_21; you can test for its\n+   presence using\n+     #ifdef LIBGCCJIT_HAVE_gcc_jit_context_new_bitcast  */\n+extern gcc_jit_rvalue *\n+gcc_jit_context_new_bitcast (gcc_jit_context *ctxt,\n+\t\t\t     gcc_jit_location *loc,\n+\t\t\t     gcc_jit_rvalue *rvalue,\n+\t\t\t     gcc_jit_type *type);\n+\n extern gcc_jit_lvalue *\n gcc_jit_context_new_array_access (gcc_jit_context *ctxt,\n \t\t\t\t  gcc_jit_location *loc,"}, {"sha": "7f988babf3663c93cc40312ef964963e8be5553e", "filename": "gcc/jit/libgccjit.map", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30f7c83e9cfe7c015448d72f63c4c39d14bc6de6/gcc%2Fjit%2Flibgccjit.map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30f7c83e9cfe7c015448d72f63c4c39d14bc6de6/gcc%2Fjit%2Flibgccjit.map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Flibgccjit.map?ref=30f7c83e9cfe7c015448d72f63c4c39d14bc6de6", "patch": "@@ -238,6 +238,7 @@ LIBGCCJIT_ABI_18 {\n } LIBGCCJIT_ABI_17;\n \n LIBGCCJIT_ABI_19 {\n+  global:\n     gcc_jit_context_new_array_constructor;\n     gcc_jit_context_new_struct_constructor;\n     gcc_jit_context_new_union_constructor;\n@@ -249,3 +250,8 @@ LIBGCCJIT_ABI_20 {\n     gcc_jit_compatible_types;\n     gcc_jit_type_get_size;\n } LIBGCCJIT_ABI_19;\n+\n+LIBGCCJIT_ABI_21 {\n+  global:\n+    gcc_jit_context_new_bitcast;\n+} LIBGCCJIT_ABI_20;"}, {"sha": "656351edce190ea7045dc5180db4e25b83c01f6f", "filename": "gcc/testsuite/jit.dg/all-non-failing-tests.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30f7c83e9cfe7c015448d72f63c4c39d14bc6de6/gcc%2Ftestsuite%2Fjit.dg%2Fall-non-failing-tests.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30f7c83e9cfe7c015448d72f63c4c39d14bc6de6/gcc%2Ftestsuite%2Fjit.dg%2Fall-non-failing-tests.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Fall-non-failing-tests.h?ref=30f7c83e9cfe7c015448d72f63c4c39d14bc6de6", "patch": "@@ -77,6 +77,13 @@\n /* test-builtin-unreachable.c: We don't add this one, since it touches\n    the optimization level of the context as a whole.  */\n \n+/* test-bitcast.c */\n+#define create_code create_code_bitcast\n+#define verify_code verify_code_bitcast\n+#include \"test-bitcast.c\"\n+#undef create_code\n+#undef verify_code\n+\n /* test-calling-external-function.c */\n #define create_code create_code_calling_external_function\n #define verify_code verify_code_calling_external_function\n@@ -400,6 +407,9 @@ const struct testcase testcases[] = {\n   {\"builtin-memcpy\",\n    create_code_builtin_memcpy,\n    verify_code_builtin_memcpy},\n+  {\"bitcast\",\n+   create_code_bitcast,\n+   verify_code_bitcast},\n   {\"calling_external_function\",\n    create_code_calling_external_function,\n    verify_code_calling_external_function},"}, {"sha": "2f80045293fc731883e1474e64749a1ffb54dc73", "filename": "gcc/testsuite/jit.dg/test-bitcast.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30f7c83e9cfe7c015448d72f63c4c39d14bc6de6/gcc%2Ftestsuite%2Fjit.dg%2Ftest-bitcast.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30f7c83e9cfe7c015448d72f63c4c39d14bc6de6/gcc%2Ftestsuite%2Fjit.dg%2Ftest-bitcast.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Ftest-bitcast.c?ref=30f7c83e9cfe7c015448d72f63c4c39d14bc6de6", "patch": "@@ -0,0 +1,61 @@\n+#include <stdlib.h>\n+#include <stdio.h>\n+#include <string.h>\n+#include <stdint.h>\n+\n+#include \"libgccjit.h\"\n+\n+#include \"harness.h\"\n+\n+void\n+create_code (gcc_jit_context *ctxt, void *user_data)\n+{\n+  /* Let's try to inject the equivalent of:\n+int32_t\n+my_bitcast (float x)\n+{\n+   return bitcast(x, int32_t);\n+}\n+   */\n+  gcc_jit_type *int32 =\n+    gcc_jit_context_get_int_type (ctxt, 4, 1);\n+  gcc_jit_type *float_type =\n+    gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_FLOAT);\n+\n+  gcc_jit_param *x =\n+    gcc_jit_context_new_param (\n+      ctxt,\n+      NULL,\n+      float_type, \"x\");\n+  gcc_jit_param *params[1] = {x};\n+  gcc_jit_function *func =\n+    gcc_jit_context_new_function (ctxt,\n+\t\t\t\t  NULL,\n+\t\t\t\t  GCC_JIT_FUNCTION_EXPORTED,\n+\t\t\t\t  int32,\n+\t\t\t\t  \"my_bitcast\",\n+\t\t\t\t  1, params, 0);\n+\n+  gcc_jit_block *initial =\n+    gcc_jit_function_new_block (func, \"initial\");\n+\n+  gcc_jit_block_end_with_return(initial, NULL,\n+    gcc_jit_context_new_bitcast(ctxt,\n+        NULL,\n+        gcc_jit_param_as_rvalue(x),\n+        int32\n+    ));\n+}\n+\n+void\n+verify_code (gcc_jit_context *ctxt, gcc_jit_result *result)\n+{\n+  typedef int32_t (*my_bitcast_fn_type) (float);\n+  CHECK_NON_NULL (result);\n+  my_bitcast_fn_type my_bitcast =\n+    (my_bitcast_fn_type)gcc_jit_result_get_code (result, \"my_bitcast\");\n+  CHECK_NON_NULL (my_bitcast);\n+  int32_t val = my_bitcast (3.1415927f);\n+  note (\"my_bitcast returned: 0x%x\", val);\n+  CHECK_VALUE (val, 0x40490FDB);\n+}"}, {"sha": "642890605ad922fe319d7242442e0dd84b80947f", "filename": "gcc/testsuite/jit.dg/test-error-bad-bitcast.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30f7c83e9cfe7c015448d72f63c4c39d14bc6de6/gcc%2Ftestsuite%2Fjit.dg%2Ftest-error-bad-bitcast.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30f7c83e9cfe7c015448d72f63c4c39d14bc6de6/gcc%2Ftestsuite%2Fjit.dg%2Ftest-error-bad-bitcast.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Ftest-error-bad-bitcast.c?ref=30f7c83e9cfe7c015448d72f63c4c39d14bc6de6", "patch": "@@ -0,0 +1,62 @@\n+#include <stdlib.h>\n+#include <stdio.h>\n+\n+#include \"libgccjit.h\"\n+\n+#include \"harness.h\"\n+\n+void\n+create_code (gcc_jit_context *ctxt, void *user_data)\n+{\n+  /* Let's try to inject the equivalent of:\n+\n+     int\n+     test_fn ()\n+     {\n+       char f[4096];\n+       return bitcast(f, int);\n+     }\n+\n+     and verify that the API complains about the bad cast.\n+  */\n+  gcc_jit_type *int_type =\n+    gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_INT);\n+  gcc_jit_type *char_type =\n+    gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_CHAR);\n+\n+\n+  gcc_jit_type *array_type =\n+    gcc_jit_context_new_array_type (ctxt, NULL, char_type, 4096);\n+\n+  gcc_jit_function *test_fn =\n+    gcc_jit_context_new_function (ctxt, NULL,\n+                                  GCC_JIT_FUNCTION_EXPORTED,\n+                                  int_type,\n+                                  \"test_fn\",\n+                                  0, NULL,\n+                                  0);\n+  gcc_jit_lvalue *f =\n+    gcc_jit_function_new_local (\n+      test_fn,\n+      NULL,\n+      array_type, \"f\");\n+\n+  gcc_jit_block *block = gcc_jit_function_new_block (test_fn, NULL);\n+\n+  gcc_jit_block_end_with_return (\n+    block, NULL,\n+    gcc_jit_context_new_bitcast (ctxt, NULL,\n+\t\t\t      gcc_jit_lvalue_as_rvalue (f),\n+\t\t\t      int_type));\n+}\n+\n+void\n+verify_code (gcc_jit_context *ctxt, gcc_jit_result *result)\n+{\n+  CHECK_VALUE (result, NULL);\n+\n+  /* Verify that the correct error message was emitted.  */\n+  CHECK_STRING_VALUE (gcc_jit_context_get_first_error (ctxt),\n+\t\t      \"bitcast with types of different sizes\");\n+}\n+"}, {"sha": "602ae4070761df7d391cab5d1f420d66c0b3a6df", "filename": "gcc/testsuite/jit.dg/test-error-bad-bitcast2.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30f7c83e9cfe7c015448d72f63c4c39d14bc6de6/gcc%2Ftestsuite%2Fjit.dg%2Ftest-error-bad-bitcast2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30f7c83e9cfe7c015448d72f63c4c39d14bc6de6/gcc%2Ftestsuite%2Fjit.dg%2Ftest-error-bad-bitcast2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Ftest-error-bad-bitcast2.c?ref=30f7c83e9cfe7c015448d72f63c4c39d14bc6de6", "patch": "@@ -0,0 +1,62 @@\n+#include <stdlib.h>\n+#include <stdio.h>\n+\n+#include \"libgccjit.h\"\n+\n+#include \"harness.h\"\n+\n+void\n+create_code (gcc_jit_context *ctxt, void *user_data)\n+{\n+  /* Let's try to inject the equivalent of:\n+\n+     char[4096]\n+     test_fn ()\n+     {\n+       int f;\n+       return bitcast(f, char[4096]);\n+     }\n+\n+     and verify that the API complains about the bad cast.\n+  */\n+  gcc_jit_type *int_type =\n+    gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_INT);\n+  gcc_jit_type *char_type =\n+    gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_CHAR);\n+\n+\n+  gcc_jit_type *array_type =\n+    gcc_jit_context_new_array_type (ctxt, NULL, char_type, 4096);\n+\n+  gcc_jit_function *test_fn =\n+    gcc_jit_context_new_function (ctxt, NULL,\n+                                  GCC_JIT_FUNCTION_EXPORTED,\n+                                  array_type,\n+                                  \"test_fn\",\n+                                  0, NULL,\n+                                  0);\n+  gcc_jit_lvalue *f =\n+    gcc_jit_function_new_local (\n+      test_fn,\n+      NULL,\n+      int_type, \"f\");\n+\n+  gcc_jit_block *block = gcc_jit_function_new_block (test_fn, NULL);\n+\n+  gcc_jit_block_end_with_return (\n+    block, NULL,\n+    gcc_jit_context_new_bitcast (ctxt, NULL,\n+\t\t\t      gcc_jit_lvalue_as_rvalue (f),\n+\t\t\t      array_type));\n+}\n+\n+void\n+verify_code (gcc_jit_context *ctxt, gcc_jit_result *result)\n+{\n+  CHECK_VALUE (result, NULL);\n+\n+  /* Verify that the correct error message was emitted.  */\n+  CHECK_STRING_VALUE (gcc_jit_context_get_first_error (ctxt),\n+\t\t      \"bitcast with types of different sizes\");\n+}\n+"}, {"sha": "036a47ac45890dbf686486573c6c7feb45e80990", "filename": "gcc/toplev.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30f7c83e9cfe7c015448d72f63c4c39d14bc6de6/gcc%2Ftoplev.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30f7c83e9cfe7c015448d72f63c4c39d14bc6de6/gcc%2Ftoplev.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.cc?ref=30f7c83e9cfe7c015448d72f63c4c39d14bc6de6", "patch": "@@ -2378,6 +2378,7 @@ toplev::finalize (void)\n   gcse_cc_finalize ();\n   ipa_cp_cc_finalize ();\n   ira_costs_cc_finalize ();\n+  tree_cc_finalize ();\n \n   /* save_decoded_options uses opts_obstack, so these must\n      be cleaned up together.  */"}, {"sha": "4f997578bac0961125740af4eaaf61aefbfa52c2", "filename": "gcc/tree.cc", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30f7c83e9cfe7c015448d72f63c4c39d14bc6de6/gcc%2Ftree.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30f7c83e9cfe7c015448d72f63c4c39d14bc6de6/gcc%2Ftree.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.cc?ref=30f7c83e9cfe7c015448d72f63c4c39d14bc6de6", "patch": "@@ -6985,6 +6985,15 @@ build_reference_type (tree to_type)\n   (HOST_BITS_PER_WIDE_INT > 64 ? HOST_BITS_PER_WIDE_INT : 64)\n static GTY(()) tree nonstandard_integer_type_cache[2 * MAX_INT_CACHED_PREC + 2];\n \n+static void\n+clear_nonstandard_integer_type_cache (void)\n+{\n+  for (size_t i = 0 ; i < 2 * MAX_INT_CACHED_PREC + 2 ; i++)\n+  {\n+    nonstandard_integer_type_cache[i] = NULL;\n+  }\n+}\n+\n /* Builds a signed or unsigned integer type of precision PRECISION.\n    Used for C bitfields whose precision does not match that of\n    built-in target types.  */\n@@ -14675,6 +14684,12 @@ get_target_clone_attr_len (tree arglist)\n   return str_len_sum;\n }\n \n+void\n+tree_cc_finalize (void)\n+{\n+  clear_nonstandard_integer_type_cache ();\n+}\n+\n #if CHECKING_P\n \n namespace selftest {"}, {"sha": "8844471e9a5f2c8de93bb411e1c635a451d3d239", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30f7c83e9cfe7c015448d72f63c4c39d14bc6de6/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30f7c83e9cfe7c015448d72f63c4c39d14bc6de6/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=30f7c83e9cfe7c015448d72f63c4c39d14bc6de6", "patch": "@@ -5401,6 +5401,7 @@ extern bool real_minus_onep (const_tree);\n extern void init_ttree (void);\n extern void build_common_tree_nodes (bool);\n extern void build_common_builtin_nodes (void);\n+extern void tree_cc_finalize (void);\n extern tree build_nonstandard_integer_type (unsigned HOST_WIDE_INT, int);\n extern tree build_nonstandard_boolean_type (unsigned HOST_WIDE_INT);\n extern tree build_range_type (tree, tree, tree);"}]}