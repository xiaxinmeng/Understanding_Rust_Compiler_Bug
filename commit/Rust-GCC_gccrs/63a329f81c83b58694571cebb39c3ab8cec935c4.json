{"sha": "63a329f81c83b58694571cebb39c3ab8cec935c4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjNhMzI5ZjgxYzgzYjU4Njk0NTcxY2ViYjM5YzNhYjhjZWM5MzVjNA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2018-05-24T13:07:06Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-05-24T13:07:06Z"}, "message": "[Ada] Fix irregular output with -gnatR3\n\nThis fixes a long-standing quirk present in the layout information for record\ntypes displayed by the -gnatR3 switch: when a component has a variable\n(starting) position, its corresponding line in the output has an irregular and\nawkward format.  After this change, the format is the same as in all the other\ncases.\n\nFor the following record:\n\n    type R (m : natural) is record\n        s : string (1 .. m);\n        r : natural;\n        b : boolean;\n    end record;\n    for R'alignment use 4;\n    pragma Pack (R);\n\nthe output of -gnatR3 used to be:\n\nfor R'Object_Size use 17179869248;\nfor R'Value_Size use ((#1 + 8) * 8);\nfor R'Alignment use 4;\nfor R use record\n   m at  0 range  0 .. 30;\n   s at  4 range  0 .. ((#1 * 8)) - 1;\n   r at bit offset (((#1 + 4) * 8)) size in bits = 31\n   b at bit offset ((((#1 + 7) * 8) + 7)) size in bits = 1\nend record;\n\nand is changed into:\n\nfor R'Object_Size use 17179869248;\nfor R'Value_Size use ((#1 + 8) * 8);\nfor R'Alignment use 4;\nfor R use record\n   m at  0 range  0 .. 30;\n   s at  4 range  0 .. ((#1 * 8)) - 1;\n   r at (#1 + 4) range  0 .. 30;\n   b at (#1 + 7) range  7 ..  7;\nend record;\n\n2018-05-24  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* fe.h (Set_Normalized_First_Bit): Declare.\n\t(Set_Normalized_Position): Likewise.\n\t* repinfo.adb (List_Record_Layout): Do not use irregular output for a\n\tvariable position.  Fix minor spacing issue.\n\t* gcc-interface/decl.c (annotate_rep): If a field has a variable\n\toffset, compute the normalized position and annotate it in addition to\n\tthe bit offset.\n\nFrom-SVN: r260669", "tree": {"sha": "c8c829990917f139bff567e4f480f1376d74a210", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c8c829990917f139bff567e4f480f1376d74a210"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/63a329f81c83b58694571cebb39c3ab8cec935c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63a329f81c83b58694571cebb39c3ab8cec935c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63a329f81c83b58694571cebb39c3ab8cec935c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63a329f81c83b58694571cebb39c3ab8cec935c4/comments", "author": null, "committer": null, "parents": [{"sha": "736e16efea25ff2bb1a0fe230b6a242b8cd5dd0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/736e16efea25ff2bb1a0fe230b6a242b8cd5dd0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/736e16efea25ff2bb1a0fe230b6a242b8cd5dd0d"}], "stats": {"total": 96, "additions": 56, "deletions": 40}, "files": [{"sha": "5ebe69e4de6f7cca188f6aa1a91e64a88a66f1a1", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63a329f81c83b58694571cebb39c3ab8cec935c4/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63a329f81c83b58694571cebb39c3ab8cec935c4/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=63a329f81c83b58694571cebb39c3ab8cec935c4", "patch": "@@ -1,3 +1,13 @@\n+2018-05-24  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* fe.h (Set_Normalized_First_Bit): Declare.\n+\t(Set_Normalized_Position): Likewise.\n+\t* repinfo.adb (List_Record_Layout): Do not use irregular output for a\n+\tvariable position.  Fix minor spacing issue.\n+\t* gcc-interface/decl.c (annotate_rep): If a field has a variable\n+\toffset, compute the normalized position and annotate it in addition to\n+\tthe bit offset.\n+\n 2018-05-24  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/trans.c (Handled_Sequence_Of_Statements_to_gnu):"}, {"sha": "1928609ba05394031b788358e8a1ee73e37bd943", "filename": "gcc/ada/fe.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63a329f81c83b58694571cebb39c3ab8cec935c4/gcc%2Fada%2Ffe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63a329f81c83b58694571cebb39c3ab8cec935c4/gcc%2Fada%2Ffe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffe.h?ref=63a329f81c83b58694571cebb39c3ab8cec935c4", "patch": "@@ -68,13 +68,17 @@ extern Boolean Debug_Flag_NN;\n #define Set_Component_Size\t\teinfo__set_component_size\n #define Set_Esize\t\t\teinfo__set_esize\n #define Set_Mechanism\t\t\teinfo__set_mechanism\n+#define Set_Normalized_First_Bit\teinfo__set_normalized_first_bit\n+#define Set_Normalized_Position\t\teinfo__set_normalized_position\n #define Set_RM_Size\t\t\teinfo__set_rm_size\n \n extern void Set_Alignment\t\t(Entity_Id, Uint);\n extern void Set_Component_Bit_Offset\t(Entity_Id, Uint);\n extern void Set_Component_Size\t\t(Entity_Id, Uint);\n extern void Set_Esize\t\t\t(Entity_Id, Uint);\n extern void Set_Mechanism\t\t(Entity_Id, Mechanism_Type);\n+extern void Set_Normalized_First_Bit\t(Entity_Id, Uint);\n+extern void Set_Normalized_Position\t(Entity_Id, Uint);\n extern void Set_RM_Size\t\t\t(Entity_Id, Uint);\n \n #define Is_Entity_Name einfo__is_entity_name"}, {"sha": "a63cc1887bf78ab11b6f5f2943a707ed4f41da03", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 41, "deletions": 17, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63a329f81c83b58694571cebb39c3ab8cec935c4/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63a329f81c83b58694571cebb39c3ab8cec935c4/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=63a329f81c83b58694571cebb39c3ab8cec935c4", "patch": "@@ -8291,7 +8291,8 @@ annotate_rep (Entity_Id gnat_entity, tree gnu_type)\n \t\t\t\t       gnu_list);\n \tif (t)\n \t  {\n-\t    tree parent_offset;\n+\t    tree offset = TREE_VEC_ELT (TREE_VALUE (t), 0);\n+\t    tree bit_offset = TREE_VEC_ELT (TREE_VALUE (t), 2);\n \n \t    /* If we are just annotating types and the type is tagged, the tag\n \t       and the parent components are not generated by the front-end so\n@@ -8301,31 +8302,46 @@ annotate_rep (Entity_Id gnat_entity, tree gnu_type)\n \t\t&& Is_Tagged_Type (gnat_entity)\n \t\t&& No (Component_Clause (gnat_field)))\n \t      {\n+\t\ttree parent_bit_offset;\n+\n \t\t/* For a component appearing in the current extension, the\n \t\t   offset is the size of the parent.  */\n \t\tif (Is_Derived_Type (gnat_entity)\n \t\t    && Original_Record_Component (gnat_field) == gnat_field)\n-\t\t  parent_offset\n+\t\t  parent_bit_offset\n \t\t    = UI_To_gnu (Esize (Etype (Base_Type (gnat_entity))),\n \t\t\t\t bitsizetype);\n \t\telse\n-\t\t  parent_offset = bitsize_int (POINTER_SIZE);\n+\t\t  parent_bit_offset = bitsize_int (POINTER_SIZE);\n \n \t\tif (TYPE_FIELDS (gnu_type))\n-\t\t  parent_offset\n-\t\t    = round_up (parent_offset,\n+\t\t  parent_bit_offset\n+\t\t    = round_up (parent_bit_offset,\n \t\t\t\tDECL_ALIGN (TYPE_FIELDS (gnu_type)));\n+\n+\t\toffset\n+\t\t  = size_binop (PLUS_EXPR, offset,\n+\t\t\t\tfold_convert (sizetype,\n+\t\t\t\t\t      size_binop (TRUNC_DIV_EXPR,\n+\t\t\t\t\t\t\t  parent_bit_offset,\n+\t\t\t\t\t\t\t  bitsize_unit_node)));\n+\t      }\n+\n+\t    /* If the field has a variable offset, also compute the normalized\n+\t       position since it's easier to do on trees here than to deduce\n+\t       it from the annotated expression of Component_Bit_Offset.  */\n+\t    if (TREE_CODE (offset) != INTEGER_CST)\n+\t      {\n+\t\tnormalize_offset (&offset, &bit_offset, BITS_PER_UNIT);\n+\t\tSet_Normalized_Position (gnat_field,\n+\t\t\t\t\t annotate_value (offset));\n+\t\tSet_Normalized_First_Bit (gnat_field,\n+\t\t\t\t\t  annotate_value (bit_offset));\n \t      }\n-\t    else\n-\t      parent_offset = bitsize_zero_node;\n \n \t    Set_Component_Bit_Offset\n \t      (gnat_field,\n-\t       annotate_value\n-\t\t (size_binop (PLUS_EXPR,\n-\t\t\t      bit_from_pos (TREE_VEC_ELT (TREE_VALUE (t), 0),\n-\t\t\t\t\t    TREE_VEC_ELT (TREE_VALUE (t), 2)),\n-\t\t\t      parent_offset)));\n+\t       annotate_value (bit_from_pos (offset, bit_offset)));\n \n \t    Set_Esize (gnat_field,\n \t\t       annotate_value (DECL_SIZE (TREE_PURPOSE (t))));\n@@ -8334,19 +8350,27 @@ annotate_rep (Entity_Id gnat_entity, tree gnu_type)\n \t  {\n \t    /* If there is no entry, this is an inherited component whose\n \t       position is the same as in the parent type.  */\n-\t    Entity_Id gnat_orig_field = Original_Record_Component (gnat_field);\n+\t    Entity_Id gnat_orig = Original_Record_Component (gnat_field);\n \n \t    /* If we are just annotating types, discriminants renaming those of\n \t       the parent have no entry so deal with them specifically.  */\n \t    if (type_annotate_only\n-\t\t&& gnat_orig_field == gnat_field\n+\t\t&& gnat_orig == gnat_field\n \t\t&& Ekind (gnat_field) == E_Discriminant)\n-\t      gnat_orig_field = Corresponding_Discriminant (gnat_field);\n+\t      gnat_orig = Corresponding_Discriminant (gnat_field);\n+\n+\t    if (Known_Normalized_Position (gnat_orig))\n+\t      {\n+\t\tSet_Normalized_Position (gnat_field,\n+\t\t\t\t\t Normalized_Position (gnat_orig));\n+\t\tSet_Normalized_First_Bit (gnat_field,\n+\t\t\t\t\t  Normalized_First_Bit (gnat_orig));\n+\t      }\n \n \t    Set_Component_Bit_Offset (gnat_field,\n-\t\t\t\t      Component_Bit_Offset (gnat_orig_field));\n+\t\t\t\t      Component_Bit_Offset (gnat_orig));\n \n-\t    Set_Esize (gnat_field, Esize (gnat_orig_field));\n+\t    Set_Esize (gnat_field, Esize (gnat_orig));\n \t  }\n       }\n }"}, {"sha": "fd7a9319038c8635a5e1613a03faf93f5bf36e69", "filename": "gcc/ada/repinfo.adb", "status": "modified", "additions": 1, "deletions": 23, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63a329f81c83b58694571cebb39c3ab8cec935c4/gcc%2Fada%2Frepinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63a329f81c83b58694571cebb39c3ab8cec935c4/gcc%2Fada%2Frepinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frepinfo.adb?ref=63a329f81c83b58694571cebb39c3ab8cec935c4", "patch": "@@ -992,7 +992,6 @@ package body Repinfo is\n             declare\n                Ctyp : constant Entity_Id := Underlying_Type (Etype (Comp));\n                Esiz : constant Uint      := Esize (Comp);\n-               Bofs : constant Uint      := Component_Bit_Offset (Comp);\n                Npos : constant Uint      := Normalized_Position (Comp);\n                Fbit : constant Uint      := Normalized_First_Bit (Comp);\n                Spos : Uint;\n@@ -1047,35 +1046,14 @@ package body Repinfo is\n                   Spaces (Max_Spos_Length - UI_Image_Length);\n                   Write_Str (UI_Image_Buffer (1 .. UI_Image_Length));\n \n-               elsif Known_Component_Bit_Offset (Comp)\n-                 and then List_Representation_Info = 3\n-               then\n-                  Spaces (Max_Spos_Length - 2);\n-                  Write_Str (\"bit offset \");\n-\n-                  if Starting_Position /= Uint_0\n-                    or else Starting_First_Bit /= Uint_0\n-                  then\n-                     UI_Write (Starting_Position * SSU + Starting_First_Bit);\n-                     Write_Str (\" + \");\n-                  end if;\n-\n-                  Write_Val (Bofs, Paren => True);\n-                  Write_Str (\" size in bits = \");\n-                  Write_Val (Esiz, Paren => True);\n-                  Write_Eol;\n-\n-                  goto Continue;\n-\n                elsif Known_Normalized_Position (Comp)\n                  and then List_Representation_Info = 3\n                then\n                   Spaces (Max_Spos_Length - 2);\n \n                   if Starting_Position /= Uint_0 then\n-                     Write_Char (' ');\n                      UI_Write (Starting_Position);\n-                     Write_Str (\" +\");\n+                     Write_Str (\" + \");\n                   end if;\n \n                   Write_Val (Npos);"}]}