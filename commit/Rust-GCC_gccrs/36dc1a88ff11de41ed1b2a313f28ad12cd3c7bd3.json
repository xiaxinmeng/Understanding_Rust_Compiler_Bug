{"sha": "36dc1a88ff11de41ed1b2a313f28ad12cd3c7bd3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzZkYzFhODhmZjExZGU0MWVkMWIyYTMxM2YyOGFkMTJjZDNjN2JkMw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2011-06-22T10:46:36Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-06-22T10:46:36Z"}, "message": "tree-ssa-ccp.c (evaluate_stmt): Try bitwise tracking for builtin calls even if likelyvalue is not CONSTANT.\n\n\t* tree-ssa-ccp.c (evaluate_stmt): Try bitwise tracking for\n\tbuiltin calls even if likelyvalue is not CONSTANT.\n\tHandle BUILT_IN_STRDUP and BUILT_IN_STRNDUP like BUILT_IN_MALLOC.\n\tReturn get_value_for_expr of first operand\n\tfor BUILT_IN_{MEM{CPY,MOVE,SET},STR{,N}CPY}{,_CHK}.\n\t* tree-ssa-alias.c (ref_maybe_used_by_call_p_1): Handle\n\tBUILT_IN_{MEM{{,P}CPY,MOVE,SET},STR{,N}C{PY,AT},STPCPY}_CHK like\n\ttheir non-checking counterparts.\n\t(call_may_clobber_ref_p_1): Likewise.\n\t(stmt_kills_ref_p_1): Handle BUILT_IN_MEM{{,P}CPY,MOVE,SET}_CHK\n\tlike their non-checking counterparts.\n\t* tree-ssa-structalias.c (find_func_aliases_for_builtin_call):\n\tHandle BUILT_IN_{MEM{{,P}CPY,MOVE,SET},STR{,N}C{PY,AT},STPCPY}_CHK\n\tlike their non-checking counterparts.\n\t(find_func_clobbers): Likewise.\n\t* tree-ssa-dce.c (propagate_necessity): Handle BUILT_IN_MEMSET_CHK\n\tlike BUILT_IN_MEMSET and BUILT_IN_CALLOC like BUILT_IN_MALLOC.\n\nFrom-SVN: r175290", "tree": {"sha": "5db992248a216e242d2e9eff0ad5aea9a9f3ebdd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5db992248a216e242d2e9eff0ad5aea9a9f3ebdd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36dc1a88ff11de41ed1b2a313f28ad12cd3c7bd3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36dc1a88ff11de41ed1b2a313f28ad12cd3c7bd3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36dc1a88ff11de41ed1b2a313f28ad12cd3c7bd3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36dc1a88ff11de41ed1b2a313f28ad12cd3c7bd3/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "41cd495729ac43083ce23687b55c42f3a6c298d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41cd495729ac43083ce23687b55c42f3a6c298d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41cd495729ac43083ce23687b55c42f3a6c298d1"}], "stats": {"total": 102, "additions": 99, "deletions": 3}, "files": [{"sha": "a8e03fdd24f2dba606c96b47a5eed58e02cd0f7e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36dc1a88ff11de41ed1b2a313f28ad12cd3c7bd3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36dc1a88ff11de41ed1b2a313f28ad12cd3c7bd3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=36dc1a88ff11de41ed1b2a313f28ad12cd3c7bd3", "patch": "@@ -1,5 +1,23 @@\n 2011-06-22  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* tree-ssa-ccp.c (evaluate_stmt): Try bitwise tracking for\n+\tbuiltin calls even if likelyvalue is not CONSTANT.\n+\tHandle BUILT_IN_STRDUP and BUILT_IN_STRNDUP like BUILT_IN_MALLOC.\n+\tReturn get_value_for_expr of first operand\n+\tfor BUILT_IN_{MEM{CPY,MOVE,SET},STR{,N}CPY}{,_CHK}.\n+\t* tree-ssa-alias.c (ref_maybe_used_by_call_p_1): Handle\n+\tBUILT_IN_{MEM{{,P}CPY,MOVE,SET},STR{,N}C{PY,AT},STPCPY}_CHK like\n+\ttheir non-checking counterparts.\n+\t(call_may_clobber_ref_p_1): Likewise.\n+\t(stmt_kills_ref_p_1): Handle BUILT_IN_MEM{{,P}CPY,MOVE,SET}_CHK\n+\tlike their non-checking counterparts.\n+\t* tree-ssa-structalias.c (find_func_aliases_for_builtin_call):\n+\tHandle BUILT_IN_{MEM{{,P}CPY,MOVE,SET},STR{,N}C{PY,AT},STPCPY}_CHK\n+\tlike their non-checking counterparts.\n+\t(find_func_clobbers): Likewise.\n+\t* tree-ssa-dce.c (propagate_necessity): Handle BUILT_IN_MEMSET_CHK\n+\tlike BUILT_IN_MEMSET and BUILT_IN_CALLOC like BUILT_IN_MALLOC.\n+\n \t* dwarf2out.c (size_of_loc_descr, output_loc_operands,\n \tmark_base_types, hash_loc_operands, compare_loc_operands): Allow\n \tDW_OP_GNU_convert and DW_OP_GNU_reinterpret to use constant instead"}, {"sha": "5647899f531ce147a0c0dc82bbb2b1f54d3c5690", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 43, "deletions": 1, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36dc1a88ff11de41ed1b2a313f28ad12cd3c7bd3/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36dc1a88ff11de41ed1b2a313f28ad12cd3c7bd3/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=36dc1a88ff11de41ed1b2a313f28ad12cd3c7bd3", "patch": "@@ -1,5 +1,5 @@\n /* Alias analysis for trees.\n-   Copyright (C) 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+   Copyright (C) 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n    Free Software Foundation, Inc.\n    Contributed by Diego Novillo <dnovillo@redhat.com>\n \n@@ -1199,6 +1199,24 @@ ref_maybe_used_by_call_p_1 (gimple call, ao_ref *ref)\n \t\t\t\t\t   size);\n \t    return refs_may_alias_p_1 (&dref, ref, false);\n \t  }\n+\tcase BUILT_IN_STRCPY_CHK:\n+\tcase BUILT_IN_STRNCPY_CHK:\n+\tcase BUILT_IN_MEMCPY_CHK:\n+\tcase BUILT_IN_MEMMOVE_CHK:\n+\tcase BUILT_IN_MEMPCPY_CHK:\n+\tcase BUILT_IN_STPCPY_CHK:\n+\tcase BUILT_IN_STRCAT_CHK:\n+\tcase BUILT_IN_STRNCAT_CHK:\n+\t  {\n+\t    ao_ref dref;\n+\t    tree size = NULL_TREE;\n+\t    if (gimple_call_num_args (call) == 4)\n+\t      size = gimple_call_arg (call, 2);\n+\t    ao_ref_init_from_ptr_and_size (&dref,\n+\t\t\t\t\t   gimple_call_arg (call, 1),\n+\t\t\t\t\t   size);\n+\t    return refs_may_alias_p_1 (&dref, ref, false);\n+\t  }\n \tcase BUILT_IN_BCOPY:\n \t  {\n \t    ao_ref dref;\n@@ -1216,6 +1234,7 @@ ref_maybe_used_by_call_p_1 (gimple call, ao_ref *ref)\n \tcase BUILT_IN_STACK_SAVE:\n \tcase BUILT_IN_STACK_RESTORE:\n \tcase BUILT_IN_MEMSET:\n+\tcase BUILT_IN_MEMSET_CHK:\n \tcase BUILT_IN_FREXP:\n \tcase BUILT_IN_FREXPF:\n \tcase BUILT_IN_FREXPL:\n@@ -1453,6 +1472,25 @@ call_may_clobber_ref_p_1 (gimple call, ao_ref *ref)\n \t\t\t\t\t   size);\n \t    return refs_may_alias_p_1 (&dref, ref, false);\n \t  }\n+\tcase BUILT_IN_STRCPY_CHK:\n+\tcase BUILT_IN_STRNCPY_CHK:\n+\tcase BUILT_IN_MEMCPY_CHK:\n+\tcase BUILT_IN_MEMMOVE_CHK:\n+\tcase BUILT_IN_MEMPCPY_CHK:\n+\tcase BUILT_IN_STPCPY_CHK:\n+\tcase BUILT_IN_STRCAT_CHK:\n+\tcase BUILT_IN_STRNCAT_CHK:\n+\tcase BUILT_IN_MEMSET_CHK:\n+\t  {\n+\t    ao_ref dref;\n+\t    tree size = NULL_TREE;\n+\t    if (gimple_call_num_args (call) == 4)\n+\t      size = gimple_call_arg (call, 2);\n+\t    ao_ref_init_from_ptr_and_size (&dref,\n+\t\t\t\t\t   gimple_call_arg (call, 0),\n+\t\t\t\t\t   size);\n+\t    return refs_may_alias_p_1 (&dref, ref, false);\n+\t  }\n \tcase BUILT_IN_BCOPY:\n \t  {\n \t    ao_ref dref;\n@@ -1697,6 +1735,10 @@ stmt_kills_ref_p_1 (gimple stmt, ao_ref *ref)\n \t  case BUILT_IN_MEMPCPY:\n \t  case BUILT_IN_MEMMOVE:\n \t  case BUILT_IN_MEMSET:\n+\t  case BUILT_IN_MEMCPY_CHK:\n+\t  case BUILT_IN_MEMPCPY_CHK:\n+\t  case BUILT_IN_MEMMOVE_CHK:\n+\t  case BUILT_IN_MEMSET_CHK:\n \t    {\n \t      tree dest = gimple_call_arg (stmt, 0);\n \t      tree len = gimple_call_arg (stmt, 2);"}, {"sha": "fd95abbc8e74ff0810b60430f8fc5ea37b4b8a12", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36dc1a88ff11de41ed1b2a313f28ad12cd3c7bd3/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36dc1a88ff11de41ed1b2a313f28ad12cd3c7bd3/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=36dc1a88ff11de41ed1b2a313f28ad12cd3c7bd3", "patch": "@@ -1556,7 +1556,7 @@ evaluate_stmt (gimple stmt)\n \n   /* Resort to simplification for bitwise tracking.  */\n   if (flag_tree_bit_ccp\n-      && likelyvalue == CONSTANT\n+      && (likelyvalue == CONSTANT || is_gimple_call (stmt))\n       && !is_constant)\n     {\n       enum gimple_code code = gimple_code (stmt);\n@@ -1616,6 +1616,8 @@ evaluate_stmt (gimple stmt)\n \t    case BUILT_IN_MALLOC:\n \t    case BUILT_IN_REALLOC:\n \t    case BUILT_IN_CALLOC:\n+\t    case BUILT_IN_STRDUP:\n+\t    case BUILT_IN_STRNDUP:\n \t      val.lattice_val = CONSTANT;\n \t      val.value = build_int_cst (TREE_TYPE (gimple_get_lhs (stmt)), 0);\n \t      val.mask = shwi_to_double_int\n@@ -1631,6 +1633,20 @@ evaluate_stmt (gimple stmt)\n \t\t\t      / BITS_PER_UNIT - 1));\n \t      break;\n \n+\t    /* These builtins return their first argument, unmodified.  */\n+\t    case BUILT_IN_MEMCPY:\n+\t    case BUILT_IN_MEMMOVE:\n+\t    case BUILT_IN_MEMSET:\n+\t    case BUILT_IN_STRCPY:\n+\t    case BUILT_IN_STRNCPY:\n+\t    case BUILT_IN_MEMCPY_CHK:\n+\t    case BUILT_IN_MEMMOVE_CHK:\n+\t    case BUILT_IN_MEMSET_CHK:\n+\t    case BUILT_IN_STRCPY_CHK:\n+\t    case BUILT_IN_STRNCPY_CHK:\n+\t      val = get_value_for_expr (gimple_call_arg (stmt, 0), true);\n+\t      break;\n+\n \t    default:;\n \t    }\n \t}"}, {"sha": "a088ef2a56ffb268d546fc799aadd6a909b700d5", "filename": "gcc/tree-ssa-dce.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36dc1a88ff11de41ed1b2a313f28ad12cd3c7bd3/gcc%2Ftree-ssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36dc1a88ff11de41ed1b2a313f28ad12cd3c7bd3/gcc%2Ftree-ssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.c?ref=36dc1a88ff11de41ed1b2a313f28ad12cd3c7bd3", "patch": "@@ -831,7 +831,9 @@ propagate_necessity (struct edge_list *el)\n \t      if (callee != NULL_TREE\n \t\t  && DECL_BUILT_IN_CLASS (callee) == BUILT_IN_NORMAL\n \t\t  && (DECL_FUNCTION_CODE (callee) == BUILT_IN_MEMSET\n+\t\t      || DECL_FUNCTION_CODE (callee) == BUILT_IN_MEMSET_CHK\n \t\t      || DECL_FUNCTION_CODE (callee) == BUILT_IN_MALLOC\n+\t\t      || DECL_FUNCTION_CODE (callee) == BUILT_IN_CALLOC\n \t\t      || DECL_FUNCTION_CODE (callee) == BUILT_IN_FREE\n \t\t      || DECL_FUNCTION_CODE (callee) == BUILT_IN_ALLOCA\n \t\t      || DECL_FUNCTION_CODE (callee) == BUILT_IN_STACK_SAVE"}, {"sha": "faf4f6a56d44ce5dbbaf637a5f063265ab09f3ca", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36dc1a88ff11de41ed1b2a313f28ad12cd3c7bd3/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36dc1a88ff11de41ed1b2a313f28ad12cd3c7bd3/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=36dc1a88ff11de41ed1b2a313f28ad12cd3c7bd3", "patch": "@@ -1,5 +1,5 @@\n /* Tree based points-to analysis\n-   Copyright (C) 2005, 2006, 2007, 2008, 2009, 2010\n+   Copyright (C) 2005, 2006, 2007, 2008, 2009, 2010, 2011\n    Free Software Foundation, Inc.\n    Contributed by Daniel Berlin <dberlin@dberlin.org>\n \n@@ -3982,6 +3982,14 @@ find_func_aliases_for_builtin_call (gimple t)\n       case BUILT_IN_STPNCPY:\n       case BUILT_IN_STRCAT:\n       case BUILT_IN_STRNCAT:\n+      case BUILT_IN_STRCPY_CHK:\n+      case BUILT_IN_STRNCPY_CHK:\n+      case BUILT_IN_MEMCPY_CHK:\n+      case BUILT_IN_MEMMOVE_CHK:\n+      case BUILT_IN_MEMPCPY_CHK:\n+      case BUILT_IN_STPCPY_CHK:\n+      case BUILT_IN_STRCAT_CHK:\n+      case BUILT_IN_STRNCAT_CHK:\n \t{\n \t  tree res = gimple_call_lhs (t);\n \t  tree dest = gimple_call_arg (t, (DECL_FUNCTION_CODE (fndecl)\n@@ -4011,6 +4019,7 @@ find_func_aliases_for_builtin_call (gimple t)\n \t  return true;\n \t}\n       case BUILT_IN_MEMSET:\n+      case BUILT_IN_MEMSET_CHK:\n \t{\n \t  tree res = gimple_call_lhs (t);\n \t  tree dest = gimple_call_arg (t, 0);\n@@ -4627,6 +4636,14 @@ find_func_clobbers (gimple origt)\n \t  case BUILT_IN_STPNCPY:\n \t  case BUILT_IN_STRCAT:\n \t  case BUILT_IN_STRNCAT:\n+\t  case BUILT_IN_STRCPY_CHK:\n+\t  case BUILT_IN_STRNCPY_CHK:\n+\t  case BUILT_IN_MEMCPY_CHK:\n+\t  case BUILT_IN_MEMMOVE_CHK:\n+\t  case BUILT_IN_MEMPCPY_CHK:\n+\t  case BUILT_IN_STPCPY_CHK:\n+\t  case BUILT_IN_STRCAT_CHK:\n+\t  case BUILT_IN_STRNCAT_CHK:\n \t    {\n \t      tree dest = gimple_call_arg (t, (DECL_FUNCTION_CODE (decl)\n \t\t\t\t\t       == BUILT_IN_BCOPY ? 1 : 0));\n@@ -4649,6 +4666,7 @@ find_func_clobbers (gimple origt)\n \t  /* The following function clobbers memory pointed to by\n \t     its argument.  */\n \t  case BUILT_IN_MEMSET:\n+\t  case BUILT_IN_MEMSET_CHK:\n \t    {\n \t      tree dest = gimple_call_arg (t, 0);\n \t      unsigned i;"}]}