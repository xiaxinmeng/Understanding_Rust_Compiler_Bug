{"sha": "39afeb1aad63cf3e2dcfb7a93e20f014bc5dc28e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzlhZmViMWFhZDYzY2YzZTJkY2ZiN2E5M2UyMGYwMTRiYzVkYzI4ZQ==", "commit": {"author": {"name": "Steven Bosscher", "email": "stevenb@suse.de", "date": "2004-11-24T19:45:32Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2004-11-24T19:45:32Z"}, "message": "c-opts.c (c_common_post_options): Don't clear flag_inline_functions.\n\ngcc/\n\t* c-opts.c (c_common_post_options): Don't clear\n\tflag_inline_functions.\n\t* dojump.c (clear_pending_stack_adjust): Remove check on\n\tflag_inline_functions, it's always true.\n\t* config/alpha/alpha.md (movdi_er_maybe_g): Remove splitter\n\tthat can never trigger.\n\t* config/c4x/c4x.h (TARGET_CPU_CPP_BUILTINS): Don't look at\n\tflag_inline_trees, now that flag_inline_functions is never\n\tcleared.\n\t* config/pdp11/pdp11.h (OPTIMIZATION_OPTIONS): Don't set\n\tflag_inline_functions at optimization levels greater than\n\tor equal to 3.  This is already done by default.\n\nada/\n\t* misc.c (gnat_post_options): Don't clear\n\tflag_inline_functions.\n\ncp/\n\t* decl.c (cxx_init_decl_processing): Don't clear\n\tflag_inline_functions.\n\nfortran/\n\t* options.c (gfc_post_options): Don't clear flag_inline_functions.\n\njava/\n\t* class.c (make_class_data): Don't check flag_inline_functions.\n\t* lang.c (flag_really_inline): Remove unused flag.\n\t(java_handle_option): Don't set it here.  Remove special handling\n\tof flag_inline_functions for Java.\n\t(java_init): Don't set flag_inline_trees here.  Already done...\n\t(java_post_options): ...here.  Don't clear flag_inline_functions.\n\nFrom-SVN: r91190", "tree": {"sha": "e03bd7fb108fe9325c02bc63b1552f84968a2f97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e03bd7fb108fe9325c02bc63b1552f84968a2f97"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/39afeb1aad63cf3e2dcfb7a93e20f014bc5dc28e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39afeb1aad63cf3e2dcfb7a93e20f014bc5dc28e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39afeb1aad63cf3e2dcfb7a93e20f014bc5dc28e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39afeb1aad63cf3e2dcfb7a93e20f014bc5dc28e/comments", "author": null, "committer": null, "parents": [{"sha": "41f683efe5ab3b56b38ae6be0320232bf444dd83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41f683efe5ab3b56b38ae6be0320232bf444dd83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41f683efe5ab3b56b38ae6be0320232bf444dd83"}], "stats": {"total": 121, "additions": 46, "deletions": 75}, "files": [{"sha": "f6af7177b160dd9a97cfc04d3b6d669910f8c2a0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39afeb1aad63cf3e2dcfb7a93e20f014bc5dc28e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39afeb1aad63cf3e2dcfb7a93e20f014bc5dc28e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=39afeb1aad63cf3e2dcfb7a93e20f014bc5dc28e", "patch": "@@ -1,3 +1,18 @@\n+2004-11-24  Steven Bosscher  <stevenb@suse.de>\n+\n+\t* c-opts.c (c_common_post_options): Don't clear\n+\tflag_inline_functions.\n+\t* dojump.c (clear_pending_stack_adjust): Remove check on\n+\tflag_inline_functions, it's always true.\n+\t* config/alpha/alpha.md (movdi_er_maybe_g): Remove splitter\n+\tthat can never trigger.\n+\t* config/c4x/c4x.h (TARGET_CPU_CPP_BUILTINS): Don't look at\n+\tflag_inline_trees, now that flag_inline_functions is never\n+\tcleared.\n+\t* config/pdp11/pdp11.h (OPTIMIZATION_OPTIONS): Don't set\n+\tflag_inline_functions at optimization levels greater than\n+\tor equal to 3.  This is already done by default.\n+\n 2004-11-24  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* tree-outof-ssa.c (eliminate_build): Use g->e->dest_idx"}, {"sha": "5769f8bb4759ed980fada640b93c340be65c1e6f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39afeb1aad63cf3e2dcfb7a93e20f014bc5dc28e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39afeb1aad63cf3e2dcfb7a93e20f014bc5dc28e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=39afeb1aad63cf3e2dcfb7a93e20f014bc5dc28e", "patch": "@@ -1,3 +1,8 @@\n+2004-11-24  Steven Bosscher  <stevenb@suse.de>\n+\n+\t* misc.c (gnat_post_options): Don't clear\n+\tflag_inline_functions.\n+\n 2004-11-22  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR ada/17986"}, {"sha": "6e871b565c4742a9accba82cff3510ef3855b9b8", "filename": "gcc/ada/misc.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39afeb1aad63cf3e2dcfb7a93e20f014bc5dc28e/gcc%2Fada%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39afeb1aad63cf3e2dcfb7a93e20f014bc5dc28e/gcc%2Fada%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmisc.c?ref=39afeb1aad63cf3e2dcfb7a93e20f014bc5dc28e", "patch": "@@ -352,10 +352,7 @@ gnat_post_options (const char **pfilename ATTRIBUTE_UNUSED)\n   if (!flag_no_inline)\n     flag_no_inline = 1;\n   if (flag_inline_functions)\n-    {\n-      flag_inline_trees = 2;\n-      flag_inline_functions = 0;\n-    }\n+    flag_inline_trees = 2;\n \n   return false;\n }"}, {"sha": "8eef6bfbf0077042975e555598818ffd267d3027", "filename": "gcc/c-opts.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39afeb1aad63cf3e2dcfb7a93e20f014bc5dc28e/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39afeb1aad63cf3e2dcfb7a93e20f014bc5dc28e/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=39afeb1aad63cf3e2dcfb7a93e20f014bc5dc28e", "patch": "@@ -945,10 +945,7 @@ c_common_post_options (const char **pfilename)\n   if (!flag_no_inline)\n     flag_no_inline = 1;\n   if (flag_inline_functions)\n-    {\n-      flag_inline_trees = 2;\n-      flag_inline_functions = 0;\n-    }\n+    flag_inline_trees = 2;\n \n   /* If we are given more than one input file, we must use\n      unit-at-a-time mode.  */"}, {"sha": "3f72427018818e810551d864c775bf286dea97d4", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39afeb1aad63cf3e2dcfb7a93e20f014bc5dc28e/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39afeb1aad63cf3e2dcfb7a93e20f014bc5dc28e/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=39afeb1aad63cf3e2dcfb7a93e20f014bc5dc28e", "patch": "@@ -5379,41 +5379,6 @@\n \t\t    (const_int 0)] UNSPEC_LITERAL))]\n   \"operands[2] = pic_offset_table_rtx;\")\n \n-;; With RTL inlining, at -O3, rtl is generated, stored, then actually\n-;; compiled at the end of compilation.  In the meantime, someone can\n-;; re-encode-section-info on some symbol changing it e.g. from global\n-;; to local-not-small.  If this happens, we'd have emitted a plain\n-;; load rather than a high+losum load and not recognize the insn.\n-;;\n-;; So if rtl inlining is in effect, we delay the global/not-global\n-;; decision until rest_of_compilation by wrapping it in an UNSPEC_SYMBOL.\n-\n-(define_insn_and_split \"movdi_er_maybe_g\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(unspec:DI [(match_operand:DI 1 \"symbolic_operand\" \"\")]\n-\t\t   UNSPEC_SYMBOL))]\n-  \"TARGET_EXPLICIT_RELOCS && flag_inline_functions\"\n-  \"#\"\n-  \"\"\n-  [(set (match_dup 0) (match_dup 1))]\n-{\n-  if (local_symbolic_operand (operands[1], Pmode)\n-      && !small_symbolic_operand (operands[1], Pmode))\n-    {\n-      rtx subtarget = no_new_pseudos ? operands[0] : gen_reg_rtx (Pmode);\n-      rtx tmp;\n-\n-      tmp = gen_rtx_HIGH (Pmode, operands[1]);\n-      if (reload_completed)\n-\ttmp = gen_rtx_PLUS (Pmode, pic_offset_table_rtx, tmp);\n-      emit_insn (gen_rtx_SET (VOIDmode, subtarget, tmp));\n-\n-      tmp = gen_rtx_LO_SUM (Pmode, subtarget, operands[1]);\n-      emit_insn (gen_rtx_SET (VOIDmode, operands[0], tmp));\n-      DONE;\n-    }\n-})\n-\n (define_insn \"movdi_er_tlsgd\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(unspec:DI [(match_operand:DI 1 \"register_operand\" \"r\")"}, {"sha": "591c2cb3bcd6c83776926554671e65845053b0b9", "filename": "gcc/config/c4x/c4x.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39afeb1aad63cf3e2dcfb7a93e20f014bc5dc28e/gcc%2Fconfig%2Fc4x%2Fc4x.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39afeb1aad63cf3e2dcfb7a93e20f014bc5dc28e/gcc%2Fconfig%2Fc4x%2Fc4x.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.h?ref=39afeb1aad63cf3e2dcfb7a93e20f014bc5dc28e", "patch": "@@ -29,14 +29,12 @@\n #define TARGET_CPU_CPP_BUILTINS()\t\t\\\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n-      /* ??? HACK.  We shouldn't have flag_inline_trees at all.  */ \\\n       extern int flag_inline_trees;\t\t\\\n       if (!TARGET_SMALL)\t\t\t\\\n \tbuiltin_define (\"_BIGMODEL\");\t\t\\\n       if (!TARGET_MEMPARM)\t\t\t\\\n \tbuiltin_define (\"_REGPARM\");\t\t\\\n-      if (flag_inline_functions\t\t\t\\\n-\t  || flag_inline_trees)\t\t\t\\\n+      if (flag_inline_functions)\t\t\\\n \tbuiltin_define (\"_INLINE\");\t\t\\\n       if (TARGET_C3X)\t\t\t\t\\\n \t{\t\t\t\t\t\\"}, {"sha": "22eedfe81062ec9286ca6225869a305f24e1a42d", "filename": "gcc/config/pdp11/pdp11.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39afeb1aad63cf3e2dcfb7a93e20f014bc5dc28e/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39afeb1aad63cf3e2dcfb7a93e20f014bc5dc28e/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.h?ref=39afeb1aad63cf3e2dcfb7a93e20f014bc5dc28e", "patch": "@@ -1144,8 +1144,6 @@ JMP\tFUNCTION\t0x0058  0x0000 <- FUNCTION\n {\t\t\t\t\t\t\t\t\t\\\n   if (LEVEL >= 3)\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      if (! SIZE)\t\t\t\t\t\t\t\\\n-        flag_inline_functions\t\t= 1;\t\t\t\t\\\n       flag_omit_frame_pointer\t\t= 1;\t\t\t\t\\\n       /* flag_unroll_loops\t\t\t= 1; */\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\"}, {"sha": "95e2ed4c4c2e19fdaa5ad9f6f285e92d7dbda8f5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39afeb1aad63cf3e2dcfb7a93e20f014bc5dc28e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39afeb1aad63cf3e2dcfb7a93e20f014bc5dc28e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=39afeb1aad63cf3e2dcfb7a93e20f014bc5dc28e", "patch": "@@ -1,3 +1,8 @@\n+2004-11-24  Steven Bosscher  <stevenb@suse.de>\n+\n+\t* decl.c (cxx_init_decl_processing): Don't clear\n+\tflag_inline_functions.\n+\n 2004-11-24  Mark Mitchell  <mark@codesourcery.com>\n \n \t* pt.c (tsubst_function_type): Do not permit function types which"}, {"sha": "c47c342bc6f8612cc39ae7b958da50dbd45e5dc9", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39afeb1aad63cf3e2dcfb7a93e20f014bc5dc28e/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39afeb1aad63cf3e2dcfb7a93e20f014bc5dc28e/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=39afeb1aad63cf3e2dcfb7a93e20f014bc5dc28e", "patch": "@@ -2990,10 +2990,7 @@ cxx_init_decl_processing (void)\n       flag_no_inline = 1;\n     }\n   if (flag_inline_functions)\n-    {\n-      flag_inline_trees = 2;\n-      flag_inline_functions = 0;\n-    }\n+    flag_inline_trees = 2;\n \n   /* Force minimum function alignment if using the least significant\n      bit of function pointers to store the virtual bit.  */"}, {"sha": "27a3cd68cee05cadc298301637f641917e705d3b", "filename": "gcc/dojump.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39afeb1aad63cf3e2dcfb7a93e20f014bc5dc28e/gcc%2Fdojump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39afeb1aad63cf3e2dcfb7a93e20f014bc5dc28e/gcc%2Fdojump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdojump.c?ref=39afeb1aad63cf3e2dcfb7a93e20f014bc5dc28e", "patch": "@@ -71,8 +71,7 @@ clear_pending_stack_adjust (void)\n   if (optimize > 0\n       && (! flag_omit_frame_pointer || current_function_calls_alloca)\n       && EXIT_IGNORE_STACK\n-      && ! (DECL_INLINE (current_function_decl) && ! flag_no_inline)\n-      && ! flag_inline_functions)\n+      && ! (DECL_INLINE (current_function_decl) && ! flag_no_inline))\n     discard_pending_stack_adjust ();\n }\n "}, {"sha": "1130054acc8fc4890f58acafae7069f0508e68d2", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39afeb1aad63cf3e2dcfb7a93e20f014bc5dc28e/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39afeb1aad63cf3e2dcfb7a93e20f014bc5dc28e/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=39afeb1aad63cf3e2dcfb7a93e20f014bc5dc28e", "patch": "@@ -1,3 +1,7 @@\n+2004-11-24  Steven Bosscher  <stevenb@suse.de>\n+\n+\t* options.c (gfc_post_options): Don't clear flag_inline_functions.\n+\n 2004-11-20  Steven G. Kargl  <kargls@comcast.net>\n \n \t* check.c (gfc_check_getcwd_sub): Fix seg fault."}, {"sha": "bdffbf3c2ebbbb2421b1598690029fab27e264ef", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39afeb1aad63cf3e2dcfb7a93e20f014bc5dc28e/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39afeb1aad63cf3e2dcfb7a93e20f014bc5dc28e/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=39afeb1aad63cf3e2dcfb7a93e20f014bc5dc28e", "patch": "@@ -109,10 +109,7 @@ gfc_post_options (const char **pfilename)\n   if (!flag_no_inline)\n     flag_no_inline = 1;\n   if (flag_inline_functions)\n-    {\n-      flag_inline_trees = 2;\n-      flag_inline_functions = 0;\n-    }\n+    flag_inline_trees = 2;\n \n   /* If -pedantic, warn about the use of GNU extensions.  */\n   if (pedantic && (gfc_option.allow_std & GFC_STD_GNU) != 0)"}, {"sha": "272e8c52ab37dd356d0b7df7acda50c8e910219a", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39afeb1aad63cf3e2dcfb7a93e20f014bc5dc28e/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39afeb1aad63cf3e2dcfb7a93e20f014bc5dc28e/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=39afeb1aad63cf3e2dcfb7a93e20f014bc5dc28e", "patch": "@@ -1,3 +1,12 @@\n+2004-11-24  Steven Bosscher  <stevenb@suse.de>\n+\n+\t* class.c (make_class_data): Don't check flag_inline_functions.\n+\t* lang.c (flag_really_inline): Remove unused flag.\n+\t(java_handle_option): Don't set it here.  Remove special handling\n+\tof flag_inline_functions for Java.\n+\t(java_init): Don't set flag_inline_trees here.  Already done...\n+\t(java_post_options): ...here.  Don't clear flag_inline_functions.\n+\n 2004-11-24  Steven Bosscher  <stevenb@suse.de>\n \n \t* java-gimplify.c (java_gimplify_labeled_block_expr): New function."}, {"sha": "543bdf2d984259c5ca4e8f7516cfb9a459be91cd", "filename": "gcc/java/class.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39afeb1aad63cf3e2dcfb7a93e20f014bc5dc28e/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39afeb1aad63cf3e2dcfb7a93e20f014bc5dc28e/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=39afeb1aad63cf3e2dcfb7a93e20f014bc5dc28e", "patch": "@@ -1618,7 +1618,7 @@ make_class_data (tree type)\n       tree init;\n       if (METHOD_PRIVATE (method)\n \t  && ! flag_keep_inline_functions\n-\t  && (flag_inline_functions || optimize))\n+\t  && optimize)\n \tcontinue;\n       init = make_method_value (method);\n       method_count++;"}, {"sha": "be789fe538183e840b92b240121b83b861cc84fe", "filename": "gcc/java/lang.c", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39afeb1aad63cf3e2dcfb7a93e20f014bc5dc28e/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39afeb1aad63cf3e2dcfb7a93e20f014bc5dc28e/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=39afeb1aad63cf3e2dcfb7a93e20f014bc5dc28e", "patch": "@@ -131,10 +131,6 @@ const char *current_encoding = NULL;\n /* When nonzero, print extra version information.  */\n static int v_flag = 0;\n \n-/* Set nonzero if the user specified -finline-functions on the command\n-   line.  */\n-int flag_really_inline = 0;\n-\n JCF *current_jcf;\n \n /* Variable controlling how dependency tracking is enabled in\n@@ -322,11 +318,6 @@ java_handle_option (size_t scode, const char *arg, int value)\n       jcf_path_extdirs_arg (arg);\n       break;\n \n-    case OPT_finline_functions:\n-      flag_inline_functions = value;\n-      flag_really_inline = value;\n-      break;\n-\n     case OPT_foutput_class_dir_:\n       jcf_write_base_directory = arg;\n       break;\n@@ -355,9 +346,6 @@ java_init (void)\n   flag_minimal_debug = 0;\n #endif\n \n-  if (flag_inline_functions)\n-    flag_inline_trees = 1;\n-\n   /* FIXME: Indirect dispatch isn't yet compatible with static class\n      init optimization.  */\n   if (flag_indirect_dispatch)\n@@ -603,10 +591,7 @@ java_post_options (const char **pfilename)\n   if (!flag_no_inline)\n     flag_no_inline = 1;\n   if (flag_inline_functions)\n-    {\n-      flag_inline_trees = 2;\n-      flag_inline_functions = 0;\n-    }\n+    flag_inline_trees = 2;\n \n   /* Open input file.  */\n "}]}