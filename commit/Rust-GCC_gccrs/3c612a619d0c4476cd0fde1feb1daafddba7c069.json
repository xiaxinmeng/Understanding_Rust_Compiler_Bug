{"sha": "3c612a619d0c4476cd0fde1feb1daafddba7c069", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2M2MTJhNjE5ZDBjNDQ3NmNkMGZkZTFmZWIxZGFhZmRkYmE3YzA2OQ==", "commit": {"author": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2001-12-11T19:04:58Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2001-12-11T19:04:58Z"}, "message": "allocators.cc: New file.\n\n2001-12-11  Phil Edwards  <pme@gcc.gnu.org>\n\n\t* testsuite/ext/allocators.cc:  New file.\n\nFrom-SVN: r47888", "tree": {"sha": "bdc3beef626242d73f958708e0349d01be88ca95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bdc3beef626242d73f958708e0349d01be88ca95"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c612a619d0c4476cd0fde1feb1daafddba7c069", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c612a619d0c4476cd0fde1feb1daafddba7c069", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c612a619d0c4476cd0fde1feb1daafddba7c069", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c612a619d0c4476cd0fde1feb1daafddba7c069/comments", "author": null, "committer": null, "parents": [{"sha": "d8634d81165c346ba9205e1f61cad2c63be751f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8634d81165c346ba9205e1f61cad2c63be751f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8634d81165c346ba9205e1f61cad2c63be751f1"}], "stats": {"total": 107, "additions": 107, "deletions": 0}, "files": [{"sha": "9a32983e16d5bbd873bbf9d5ba836d3dbd153295", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c612a619d0c4476cd0fde1feb1daafddba7c069/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c612a619d0c4476cd0fde1feb1daafddba7c069/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3c612a619d0c4476cd0fde1feb1daafddba7c069", "patch": "@@ -1,3 +1,7 @@\n+2001-12-11  Phil Edwards  <pme@gcc.gnu.org>\n+\n+\t* testsuite/ext/allocators.cc:  New file.\n+\n 2001-12-11  Jason Merrill  <jason@redhat.com>\n \n \t* include/bits/locale_facets.tcc (_M_extract_int): Avoid"}, {"sha": "b3068e0b2ddf2880f8594336e3498692c65bd5f8", "filename": "libstdc++-v3/testsuite/ext/allocators.cc", "status": "added", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c612a619d0c4476cd0fde1feb1daafddba7c069/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fallocators.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c612a619d0c4476cd0fde1feb1daafddba7c069/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fallocators.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fallocators.cc?ref=3c612a619d0c4476cd0fde1feb1daafddba7c069", "patch": "@@ -0,0 +1,103 @@\n+// 2001-11-25  Phil Edwards  <pme@gcc.gnu.org>\n+//\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 20.4.1.1 allocator members\n+\n+#undef __USE_MALLOC\n+#include <memory>\n+#include <cstdlib>\n+#include <testsuite_hooks.h>\n+\n+typedef std::__malloc_alloc_template<3>             weird_alloc;\n+template class std::__malloc_alloc_template<3>;\n+\n+typedef std::__debug_alloc<weird_alloc>             debug_weird_alloc;\n+template class std::__debug_alloc<weird_alloc>;\n+\n+typedef std::__default_alloc_template<true, 3>      unshared_normal_alloc;\n+template class std::__default_alloc_template<true, 3>;\n+\n+typedef std::__default_alloc_template<false, 3>     unshared_singlethreaded;\n+template class std::__default_alloc_template<false, 3>;\n+\n+//std::malloc_alloc test_malloc_alloc;\n+\n+struct big\n+{\n+    long f[15];\n+};\n+\n+\n+bool         new_called;\n+bool         delete_called;\n+std::size_t  requested;\n+\n+void* \n+operator new(std::size_t n) throw(std::bad_alloc)\n+{\n+  new_called = true;\n+  requested = n;\n+  return std::malloc(n);\n+}\n+\n+void\n+operator delete(void *v) throw()\n+{\n+  delete_called = true;\n+  return std::free(v);\n+}\n+\n+\n+template <typename arbitrary_SGIstyle_allocator,\n+          bool uses_global_new_and_delete>\n+void test()\n+{\n+  new_called = false;\n+  delete_called = false;\n+  requested = 0;\n+\n+  std::__allocator<big, arbitrary_SGIstyle_allocator>   a;\n+  big *p = a.allocate(10);\n+  if (uses_global_new_and_delete)  VERIFY (requested >= (10*15*sizeof(long)));\n+  // Touch the far end of supposedly-allocated memory to check that we got\n+  // all of it.  Why \"3\"?  Because it's my favorite integer between e and pi.\n+  p[9].f[14] = 3;\n+  VERIFY (new_called == uses_global_new_and_delete );\n+  a.deallocate(p,10);\n+  VERIFY (delete_called == uses_global_new_and_delete );\n+}\n+\n+\n+// These just help tracking down error messages.\n+void test01() { test<weird_alloc,false>(); }\n+void test02() { test<debug_weird_alloc,false>(); }\n+void test03() { test<unshared_normal_alloc,true>(); }\n+void test04() { test<unshared_singlethreaded,true>(); }\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+  test04();\n+\n+  return 0;\n+}\n+"}]}