{"sha": "b1e5b86c5245015820f99043feb2fe5e9958daa7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjFlNWI4NmM1MjQ1MDE1ODIwZjk5MDQzZmViMmZlNWU5OTU4ZGFhNw==", "commit": {"author": {"name": "Giovanni Bajo", "email": "giovannibajo@gcc.gnu.org", "date": "2004-02-05T02:48:31Z"}, "committer": {"name": "Giovanni Bajo", "email": "giovannibajo@gcc.gnu.org", "date": "2004-02-05T02:48:31Z"}, "message": "re PR c++/13086 (the location of the warning message is wrong when calling delete on incomplete type)\n\n\tPR c++/13086\n\t* init.c (build_delete): Emit a more informative error message in\n\tcase of an incomplete type, and on the correct source line.\n\nFrom-SVN: r77289", "tree": {"sha": "5064c31166066fcd9c2eaafa931c5dacf4345b1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5064c31166066fcd9c2eaafa931c5dacf4345b1c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b1e5b86c5245015820f99043feb2fe5e9958daa7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1e5b86c5245015820f99043feb2fe5e9958daa7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1e5b86c5245015820f99043feb2fe5e9958daa7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1e5b86c5245015820f99043feb2fe5e9958daa7/comments", "author": {"login": "rasky", "id": 1014109, "node_id": "MDQ6VXNlcjEwMTQxMDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1014109?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rasky", "html_url": "https://github.com/rasky", "followers_url": "https://api.github.com/users/rasky/followers", "following_url": "https://api.github.com/users/rasky/following{/other_user}", "gists_url": "https://api.github.com/users/rasky/gists{/gist_id}", "starred_url": "https://api.github.com/users/rasky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rasky/subscriptions", "organizations_url": "https://api.github.com/users/rasky/orgs", "repos_url": "https://api.github.com/users/rasky/repos", "events_url": "https://api.github.com/users/rasky/events{/privacy}", "received_events_url": "https://api.github.com/users/rasky/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rasky", "id": 1014109, "node_id": "MDQ6VXNlcjEwMTQxMDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1014109?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rasky", "html_url": "https://github.com/rasky", "followers_url": "https://api.github.com/users/rasky/followers", "following_url": "https://api.github.com/users/rasky/following{/other_user}", "gists_url": "https://api.github.com/users/rasky/gists{/gist_id}", "starred_url": "https://api.github.com/users/rasky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rasky/subscriptions", "organizations_url": "https://api.github.com/users/rasky/orgs", "repos_url": "https://api.github.com/users/rasky/repos", "events_url": "https://api.github.com/users/rasky/events{/privacy}", "received_events_url": "https://api.github.com/users/rasky/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f3d0d2f8d6f7b1405a9e2548dd71dd0d26f3fe2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f3d0d2f8d6f7b1405a9e2548dd71dd0d26f3fe2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f3d0d2f8d6f7b1405a9e2548dd71dd0d26f3fe2"}], "stats": {"total": 44, "additions": 31, "deletions": 13}, "files": [{"sha": "083bebe540d4657e72814f74046d498509e67135", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1e5b86c5245015820f99043feb2fe5e9958daa7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1e5b86c5245015820f99043feb2fe5e9958daa7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b1e5b86c5245015820f99043feb2fe5e9958daa7", "patch": "@@ -1,3 +1,9 @@\n+2004-02-04  Giovanni Bajo  <giovannibajo@gcc.gnu.org>\n+\n+\tPR c++/13086\n+\t* init.c (build_delete): Emit a more informative error message in\n+\tcase of an incomplete type, and on the correct source line.\n+\n 2004-02-04  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* error.c, search.c: Update copyright."}, {"sha": "e3804442689e437d1a0fa8b24bfd1e83c1524392", "filename": "gcc/cp/init.c", "status": "modified", "additions": 25, "deletions": 13, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1e5b86c5245015820f99043feb2fe5e9958daa7/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1e5b86c5245015820f99043feb2fe5e9958daa7/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=b1e5b86c5245015820f99043feb2fe5e9958daa7", "patch": "@@ -2020,12 +2020,12 @@ build_new_1 (tree exp)\n       use_java_new = 1;\n       if (!get_global_value_if_present (get_identifier (alloc_name), \n \t\t\t\t\t&alloc_decl))\n-\t{\r\n+\t{\n \t  error (\"call to Java constructor with `%s' undefined\", alloc_name);\n \t  return error_mark_node;\n \t}\n       else if (really_overloaded_fn (alloc_decl))\n-\t{\r\n+\t{\n \t  error (\"`%D' should never be overloaded\", alloc_decl);\n \t  return error_mark_node;\n \t}\n@@ -2856,23 +2856,35 @@ build_delete (tree type, tree addr, special_function_kind auto_delete,\n \n   if (TREE_CODE (type) == POINTER_TYPE)\n     {\n+      bool complete_p = true;\n+\n       type = TYPE_MAIN_VARIANT (TREE_TYPE (type));\n       if (TREE_CODE (type) == ARRAY_TYPE)\n \tgoto handle_array;\n \n-      if (VOID_TYPE_P (type)\n-\t  /* We don't want to warn about delete of void*, only other\n-\t     incomplete types.  Deleting other incomplete types\n-\t     invokes undefined behavior, but it is not ill-formed, so\n-\t     compile to something that would even do The Right Thing\n-\t     (TM) should the type have a trivial dtor and no delete\n-\t     operator.  */\n-\t  || !complete_type_or_diagnostic (type, addr, 1)\n-\t  || !IS_AGGR_TYPE (type))\n+      /* We don't want to warn about delete of void*, only other\n+\t  incomplete types.  Deleting other incomplete types\n+\t  invokes undefined behavior, but it is not ill-formed, so\n+\t  compile to something that would even do The Right Thing\n+\t  (TM) should the type have a trivial dtor and no delete\n+\t  operator.  */\n+      if (!VOID_TYPE_P (type))\n \t{\n-\t  /* Call the builtin operator delete.  */\n-\t  return build_builtin_delete_call (addr);\n+\t  complete_type (type);\n+\t  if (!COMPLETE_TYPE_P (type))\n+\t    {\n+\t      warning (\"possible problem detected in invocation of \"\n+\t\t       \"delete operator:\");\n+\t      cxx_incomplete_type_diagnostic (addr, type, 1);\n+\t      inform (\"neither the destructor nor the class-specific \"\r\n+\t\t      \"operator delete will be called, even if they are \"\r\n+\t\t      \"declared when the class is defined.\");\n+\t      complete_p = false;\n+\t    }\n \t}\n+      if (VOID_TYPE_P (type) || !complete_p || !IS_AGGR_TYPE (type))\n+\t/* Call the builtin operator delete.  */\n+\treturn build_builtin_delete_call (addr);\n       if (TREE_SIDE_EFFECTS (addr))\n \taddr = save_expr (addr);\n "}]}