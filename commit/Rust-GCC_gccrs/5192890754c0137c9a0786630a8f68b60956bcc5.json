{"sha": "5192890754c0137c9a0786630a8f68b60956bcc5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTE5Mjg5MDc1NGMwMTM3YzlhMDc4NjYzMGE4ZjY4YjYwOTU2YmNjNQ==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2003-02-22T03:17:24Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2003-02-22T03:17:24Z"}, "message": "regmove.c (optimize_reg_copy_1): Do not replace a hard register in an asm.\n\n\t* regmove.c (optimize_reg_copy_1): Do not replace a hard register\n\tin an asm.\n\nFrom-SVN: r63270", "tree": {"sha": "563adae3927fc19a17b0f17e1a1866a4796c7b4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/563adae3927fc19a17b0f17e1a1866a4796c7b4e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5192890754c0137c9a0786630a8f68b60956bcc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5192890754c0137c9a0786630a8f68b60956bcc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5192890754c0137c9a0786630a8f68b60956bcc5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5192890754c0137c9a0786630a8f68b60956bcc5/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9ac121af2a23ff86838f619ae58a6be7cf16d605", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ac121af2a23ff86838f619ae58a6be7cf16d605", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ac121af2a23ff86838f619ae58a6be7cf16d605"}], "stats": {"total": 15, "additions": 15, "deletions": 0}, "files": [{"sha": "22309ff35f0210fd81aa6ff181ec6d422d720003", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5192890754c0137c9a0786630a8f68b60956bcc5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5192890754c0137c9a0786630a8f68b60956bcc5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5192890754c0137c9a0786630a8f68b60956bcc5", "patch": "@@ -1,3 +1,8 @@\n+2003-02-22  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\t* regmove.c (optimize_reg_copy_1): Do not replace a hard register\n+\tin an asm.\n+\n 2003-02-21  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* Makefile.in (ggc-common.o): Depend on $(PARAMS_H)"}, {"sha": "2639ebd54f418003265eafb50b80abe5e45f67de", "filename": "gcc/regmove.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5192890754c0137c9a0786630a8f68b60956bcc5/gcc%2Fregmove.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5192890754c0137c9a0786630a8f68b60956bcc5/gcc%2Fregmove.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregmove.c?ref=5192890754c0137c9a0786630a8f68b60956bcc5", "patch": "@@ -433,6 +433,16 @@ optimize_reg_copy_1 (insn, dest, src)\n \tcontinue;\n \n       if (reg_set_p (src, p) || reg_set_p (dest, p)\n+\t  /* If SRC is an asm-declared register, it must not be replaced\n+\t     in any asm.  Unfortunately, the REG_EXPR tree for the asm\n+\t     variable may be absent in the SRC rtx, so we can't check the\n+\t     actual register declaration easily (the asm operand will have\n+\t     it, though).  To avoid complicating the test for a rare case,\n+\t     we just don't perform register replacement for a hard reg\n+\t     mentioned in an asm.  */\n+\t  || (sregno < FIRST_PSEUDO_REGISTER\n+\t      && asm_noperands (PATTERN (p)) >= 0\n+\t      && reg_overlap_mentioned_p (src, PATTERN (p)))\n \t  /* Don't change a USE of a register.  */\n \t  || (GET_CODE (PATTERN (p)) == USE\n \t      && reg_overlap_mentioned_p (src, XEXP (PATTERN (p), 0))))"}]}