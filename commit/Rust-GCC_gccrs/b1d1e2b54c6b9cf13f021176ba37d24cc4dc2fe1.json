{"sha": "b1d1e2b54c6b9cf13f021176ba37d24cc4dc2fe1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjFkMWUyYjU0YzZiOWNmMTNmMDIxMTc2YmEzN2QyNGNjNGRjMmZlMQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-01-13T10:28:48Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-01-13T10:36:38Z"}, "message": "i386, expand: Optimize also 256-bit and 512-bit permutatations as vpmovzx if possible [PR95905]\n\nThe following patch implements what I've talked about, i.e. to no longer\nforce operands of vec_perm_const into registers in the generic code, but let\neach of the (currently 8) targets force it into registers individually,\ngiving the targets better control on if it does that and when and allowing\nthem to do something special with some particular operands.\nAnd then defines the define_insn_and_split for the 256-bit and 512-bit\npermutations into vpmovzx* (only the bw, wd and dq cases, in theory we could\nadd define_insn_and_split patterns also for the bd, bq and wq).\n\n2021-01-13  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/95905\n\t* optabs.c (expand_vec_perm_const): Don't force v0 and v1 into\n\tregisters before calling targetm.vectorize.vec_perm_const, only after\n\tthat.\n\t* config/i386/i386-expand.c (ix86_vectorize_vec_perm_const): Handle\n\ttwo argument permutation when one operand is zero vector and only\n\tafter that force operands into registers.\n\t* config/i386/sse.md (*avx2_zero_extendv16qiv16hi2_1): New\n\tdefine_insn_and_split pattern.\n\t(*avx512bw_zero_extendv32qiv32hi2_1): Likewise.\n\t(*avx512f_zero_extendv16hiv16si2_1): Likewise.\n\t(*avx2_zero_extendv8hiv8si2_1): Likewise.\n\t(*avx512f_zero_extendv8siv8di2_1): Likewise.\n\t(*avx2_zero_extendv4siv4di2_1): Likewise.\n\t* config/mips/mips.c (mips_vectorize_vec_perm_const): Force operands\n\tinto registers.\n\t* config/arm/arm.c (arm_vectorize_vec_perm_const): Likewise.\n\t* config/sparc/sparc.c (sparc_vectorize_vec_perm_const): Likewise.\n\t* config/ia64/ia64.c (ia64_vectorize_vec_perm_const): Likewise.\n\t* config/aarch64/aarch64.c (aarch64_vectorize_vec_perm_const): Likewise.\n\t* config/rs6000/rs6000.c (rs6000_vectorize_vec_perm_const): Likewise.\n\t* config/gcn/gcn.c (gcn_vectorize_vec_perm_const): Likewise.  Use std::swap.\n\n\t* gcc.target/i386/pr95905-2.c: Use scan-assembler-times instead of\n\tscan-assembler.  Add tests with zero vector as first __builtin_shuffle\n\toperand.\n\t* gcc.target/i386/pr95905-3.c: New test.\n\t* gcc.target/i386/pr95905-4.c: New test.", "tree": {"sha": "722a890359eaccb0530f254bceed153fdac46ff0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/722a890359eaccb0530f254bceed153fdac46ff0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b1d1e2b54c6b9cf13f021176ba37d24cc4dc2fe1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1d1e2b54c6b9cf13f021176ba37d24cc4dc2fe1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1d1e2b54c6b9cf13f021176ba37d24cc4dc2fe1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1d1e2b54c6b9cf13f021176ba37d24cc4dc2fe1/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7875e8dc831f30eec7203e090a209efe4c01a27d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7875e8dc831f30eec7203e090a209efe4c01a27d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7875e8dc831f30eec7203e090a209efe4c01a27d"}], "stats": {"total": 399, "additions": 388, "deletions": 11}, "files": [{"sha": "c19dc6cd8958d9b0143a50cf5e56c5cdda4be02d", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1d1e2b54c6b9cf13f021176ba37d24cc4dc2fe1/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1d1e2b54c6b9cf13f021176ba37d24cc4dc2fe1/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=b1d1e2b54c6b9cf13f021176ba37d24cc4dc2fe1", "patch": "@@ -21084,8 +21084,11 @@ aarch64_vectorize_vec_perm_const (machine_mode vmode, rtx target, rtx op0,\n   d.vmode = vmode;\n   d.vec_flags = aarch64_classify_vector_mode (d.vmode);\n   d.target = target;\n-  d.op0 = op0;\n-  d.op1 = op1;\n+  d.op0 = op0 ? force_reg (vmode, op0) : NULL_RTX;\n+  if (op0 == op1)\n+    d.op1 = d.op0;\n+  else\n+    d.op1 = op1 ? force_reg (vmode, op1) : NULL_RTX;\n   d.testing_p = !target;\n \n   if (!d.testing_p)"}, {"sha": "bebccc13456a8eda21fe5ca8f7bc1783fa36d29a", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1d1e2b54c6b9cf13f021176ba37d24cc4dc2fe1/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1d1e2b54c6b9cf13f021176ba37d24cc4dc2fe1/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=b1d1e2b54c6b9cf13f021176ba37d24cc4dc2fe1", "patch": "@@ -31482,6 +31482,15 @@ arm_vectorize_vec_perm_const (machine_mode vmode, rtx target, rtx op0, rtx op1,\n     return false;\n \n   d.target = target;\n+  if (op0)\n+    {\n+      rtx nop0 = force_reg (vmode, op0);\n+      if (op0 == op1)\n+        op1 = nop0;\n+      op0 = nop0;\n+    }\n+  if (op1)\n+    op1 = force_reg (vmode, op1);\n   d.op0 = op0;\n   d.op1 = op1;\n "}, {"sha": "3b1762efd3ab2ff363a37316d4e792f3790248a4", "filename": "gcc/config/gcn/gcn.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1d1e2b54c6b9cf13f021176ba37d24cc4dc2fe1/gcc%2Fconfig%2Fgcn%2Fgcn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1d1e2b54c6b9cf13f021176ba37d24cc4dc2fe1/gcc%2Fconfig%2Fgcn%2Fgcn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn.c?ref=b1d1e2b54c6b9cf13f021176ba37d24cc4dc2fe1", "patch": "@@ -3982,13 +3982,14 @@ gcn_vectorize_vec_perm_const (machine_mode vmode, rtx dst,\n   for (unsigned int i = 0; i < nelt; ++i)\n     perm[i] = sel[i] & (2 * nelt - 1);\n \n+  src0 = force_reg (vmode, src0);\n+  src1 = force_reg (vmode, src1);\n+\n   /* Make life a bit easier by swapping operands if necessary so that\n      the first element always comes from src0.  */\n   if (perm[0] >= nelt)\n     {\n-      rtx temp = src0;\n-      src0 = src1;\n-      src1 = temp;\n+      std::swap (src0, src1);\n \n       for (unsigned int i = 0; i < nelt; ++i)\n \tif (perm[i] < nelt)"}, {"sha": "280645f60d5cf2dc571329cd9686327ac212674e", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1d1e2b54c6b9cf13f021176ba37d24cc4dc2fe1/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1d1e2b54c6b9cf13f021176ba37d24cc4dc2fe1/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=b1d1e2b54c6b9cf13f021176ba37d24cc4dc2fe1", "patch": "@@ -19929,6 +19929,32 @@ ix86_vectorize_vec_perm_const (machine_mode vmode, rtx target, rtx op0,\n \n   two_args = canonicalize_perm (&d);\n \n+  /* If one of the operands is a zero vector, try to match pmovzx.  */\n+  if (two_args && (d.op0 == CONST0_RTX (vmode) || d.op1 == CONST0_RTX (vmode)))\n+    {\n+      struct expand_vec_perm_d dzero = d;\n+      if (d.op0 == CONST0_RTX (vmode))\n+\t{\n+\t  d.op1 = dzero.op1 = force_reg (vmode, d.op1);\n+\t  std::swap (dzero.op0, dzero.op1);\n+\t  for (i = 0; i < nelt; ++i)\n+\t    dzero.perm[i] ^= nelt;\n+\t}\n+      else\n+\td.op0 = dzero.op0 = force_reg (vmode, d.op0);\n+\n+      if (expand_vselect_vconcat (dzero.target, dzero.op0, dzero.op1,\n+\t\t\t\t  dzero.perm, nelt, dzero.testing_p))\n+\treturn true;\n+    }\n+\n+  /* Force operands into registers.  */\n+  rtx nop0 = force_reg (vmode, d.op0);\n+  if (d.op0 == d.op1)\n+    d.op1 = nop0;\n+  d.op0 = nop0;\n+  d.op1 = force_reg (vmode, d.op1);\n+\n   if (ix86_expand_vec_perm_const_1 (&d))\n     return true;\n "}, {"sha": "7f03fc491c385554e505f06c466099afbb3b08f4", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1d1e2b54c6b9cf13f021176ba37d24cc4dc2fe1/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1d1e2b54c6b9cf13f021176ba37d24cc4dc2fe1/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=b1d1e2b54c6b9cf13f021176ba37d24cc4dc2fe1", "patch": "@@ -17611,6 +17611,23 @@\n    (set_attr \"prefix\" \"maybe_evex\")\n    (set_attr \"mode\" \"OI\")])\n \n+(define_insn_and_split \"*avx2_zero_extendv16qiv16hi2_1\"\n+  [(set (match_operand:V32QI 0 \"register_operand\" \"=v\")\n+\t(vec_select:V32QI\n+\t  (vec_concat:V64QI\n+\t    (match_operand:V32QI 1 \"nonimmediate_operand\" \"vm\")\n+\t    (match_operand:V32QI 2 \"const0_operand\" \"C\"))\n+\t  (match_parallel 3 \"pmovzx_parallel\"\n+\t    [(match_operand 4 \"const_int_operand\" \"n\")])))]\n+  \"TARGET_AVX2\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 0) (zero_extend:V16HI (match_dup 1)))]\n+{\n+  operands[0] = lowpart_subreg (V16HImode, operands[0], V32QImode);\n+  operands[1] = lowpart_subreg (V16QImode, operands[1], V32QImode);\n+})\n+\n (define_expand \"<insn>v16qiv16hi2\"\n   [(set (match_operand:V16HI 0 \"register_operand\")\n \t(any_extend:V16HI\n@@ -17628,6 +17645,23 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"XI\")])\n \n+(define_insn_and_split \"*avx512bw_zero_extendv32qiv32hi2_1\"\n+  [(set (match_operand:V64QI 0 \"register_operand\" \"=v\")\n+\t(vec_select:V64QI\n+\t  (vec_concat:V128QI\n+\t    (match_operand:V64QI 1 \"nonimmediate_operand\" \"vm\")\n+\t    (match_operand:V64QI 2 \"const0_operand\" \"C\"))\n+\t  (match_parallel 3 \"pmovzx_parallel\"\n+\t    [(match_operand 4 \"const_int_operand\" \"n\")])))]\n+  \"TARGET_AVX512BW\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 0) (zero_extend:V32HI (match_dup 1)))]\n+{\n+  operands[0] = lowpart_subreg (V32HImode, operands[0], V64QImode);\n+  operands[1] = lowpart_subreg (V32QImode, operands[1], V64QImode);\n+})\n+\n (define_expand \"<insn>v32qiv32hi2\"\n   [(set (match_operand:V32HI 0 \"register_operand\")\n \t(any_extend:V32HI\n@@ -17883,6 +17917,23 @@\n \t  (match_operand:V16HI 1 \"nonimmediate_operand\")))]\n   \"TARGET_AVX512F\")\n \n+(define_insn_and_split \"avx512f_zero_extendv16hiv16si2_1\"\n+  [(set (match_operand:V32HI 0 \"register_operand\" \"=v\")\n+\t(vec_select:V32HI\n+\t  (vec_concat:V64HI\n+\t    (match_operand:V32HI 1 \"nonimmediate_operand\" \"vm\")\n+\t    (match_operand:V32HI 2 \"const0_operand\" \"C\"))\n+\t  (match_parallel 3 \"pmovzx_parallel\"\n+\t    [(match_operand 4 \"const_int_operand\" \"n\")])))]\n+  \"TARGET_AVX512F\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 0) (zero_extend:V16SI (match_dup 1)))]\n+{\n+  operands[0] = lowpart_subreg (V16SImode, operands[0], V32HImode);\n+  operands[1] = lowpart_subreg (V16HImode, operands[1], V32HImode);\n+})\n+\n (define_insn \"avx2_<code>v8hiv8si2<mask_name>\"\n   [(set (match_operand:V8SI 0 \"register_operand\" \"=v\")\n \t(any_extend:V8SI\n@@ -17900,6 +17951,23 @@\n \t  (match_operand:V8HI 1 \"nonimmediate_operand\")))]\n   \"TARGET_AVX2\")\n \n+(define_insn_and_split \"avx2_zero_extendv8hiv8si2_1\"\n+  [(set (match_operand:V16HI 0 \"register_operand\" \"=v\")\n+\t(vec_select:V16HI\n+\t  (vec_concat:V32HI\n+\t    (match_operand:V16HI 1 \"nonimmediate_operand\" \"vm\")\n+\t    (match_operand:V16HI 2 \"const0_operand\" \"C\"))\n+\t  (match_parallel 3 \"pmovzx_parallel\"\n+\t    [(match_operand 4 \"const_int_operand\" \"n\")])))]\n+  \"TARGET_AVX2\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 0) (zero_extend:V8SI (match_dup 1)))]\n+{\n+  operands[0] = lowpart_subreg (V8SImode, operands[0], V16HImode);\n+  operands[1] = lowpart_subreg (V8HImode, operands[1], V16HImode);\n+})\n+\n (define_insn \"sse4_1_<code>v4hiv4si2<mask_name>\"\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=Yr,*x,v\")\n \t(any_extend:V4SI\n@@ -18275,6 +18343,23 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"XI\")])\n \n+(define_insn_and_split \"*avx512f_zero_extendv8siv8di2_1\"\n+  [(set (match_operand:V16SI 0 \"register_operand\" \"=v\")\n+\t(vec_select:V16SI\n+\t  (vec_concat:V32SI\n+\t    (match_operand:V16SI 1 \"nonimmediate_operand\" \"vm\")\n+\t    (match_operand:V16SI 2 \"const0_operand\" \"C\"))\n+\t  (match_parallel 3 \"pmovzx_parallel\"\n+\t    [(match_operand 4 \"const_int_operand\" \"n\")])))]\n+  \"TARGET_AVX512F\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 0) (zero_extend:V8DI (match_dup 1)))]\n+{\n+  operands[0] = lowpart_subreg (V8DImode, operands[0], V16SImode);\n+  operands[1] = lowpart_subreg (V8SImode, operands[1], V16SImode);\n+})\n+\n (define_expand \"<insn>v8siv8di2\"\n   [(set (match_operand:V8DI 0 \"register_operand\" \"=v\")\n \t(any_extend:V8DI\n@@ -18292,6 +18377,23 @@\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"mode\" \"OI\")])\n \n+(define_insn_and_split \"*avx2_zero_extendv4siv4di2_1\"\n+  [(set (match_operand:V8SI 0 \"register_operand\" \"=v\")\n+\t(vec_select:V8SI\n+\t  (vec_concat:V16SI\n+\t    (match_operand:V8SI 1 \"nonimmediate_operand\" \"vm\")\n+\t    (match_operand:V8SI 2 \"const0_operand\" \"C\"))\n+\t  (match_parallel 3 \"pmovzx_parallel\"\n+\t    [(match_operand 4 \"const_int_operand\" \"n\")])))]\n+  \"TARGET_AVX2\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 0) (zero_extend:V4DI (match_dup 1)))]\n+{\n+  operands[0] = lowpart_subreg (V4DImode, operands[0], V8SImode);\n+  operands[1] = lowpart_subreg (V4SImode, operands[1], V8SImode);\n+})\n+\n (define_expand \"<insn>v4siv4di2\"\n   [(set (match_operand:V4DI 0 \"register_operand\" \"=v\")\n \t(any_extend:V4DI"}, {"sha": "f1a6de14cdd763f5429395177d0ba0fa648ad03a", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1d1e2b54c6b9cf13f021176ba37d24cc4dc2fe1/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1d1e2b54c6b9cf13f021176ba37d24cc4dc2fe1/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=b1d1e2b54c6b9cf13f021176ba37d24cc4dc2fe1", "patch": "@@ -11759,6 +11759,15 @@ ia64_vectorize_vec_perm_const (machine_mode vmode, rtx target, rtx op0,\n   unsigned int i, nelt, which;\n \n   d.target = target;\n+  if (op0)\n+    {\n+      rtx nop0 = force_reg (vmode, op0);\n+      if (op0 == op1)\n+        op1 = nop0;\n+      op0 = nop0;\n+    }\n+  if (op1)\n+    op1 = force_reg (vmode, op1);\n   d.op0 = op0;\n   d.op1 = op1;\n "}, {"sha": "ebb04b72b2b80793bd3c74b4d43a20da2446275e", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1d1e2b54c6b9cf13f021176ba37d24cc4dc2fe1/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1d1e2b54c6b9cf13f021176ba37d24cc4dc2fe1/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=b1d1e2b54c6b9cf13f021176ba37d24cc4dc2fe1", "patch": "@@ -21624,6 +21624,15 @@ mips_vectorize_vec_perm_const (machine_mode vmode, rtx target, rtx op0,\n   bool ok;\n \n   d.target = target;\n+  if (op0)\n+    {\n+      rtx nop0 = force_reg (vmode, op0);\n+      if (op0 == op1)\n+        op1 = nop0;\n+      op0 = nop0;\n+    }\n+  if (op1)\n+    op1 = force_reg (vmode, op1);\n   d.op0 = op0;\n   d.op1 = op1;\n "}, {"sha": "b9e90ae0468a73915ec60810ed9c8bb96168510e", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1d1e2b54c6b9cf13f021176ba37d24cc4dc2fe1/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1d1e2b54c6b9cf13f021176ba37d24cc4dc2fe1/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=b1d1e2b54c6b9cf13f021176ba37d24cc4dc2fe1", "patch": "@@ -22946,6 +22946,16 @@ rs6000_vectorize_vec_perm_const (machine_mode vmode, rtx target, rtx op0,\n   if (TARGET_ALTIVEC && testing_p)\n     return true;\n \n+  if (op0)\n+    {\n+      rtx nop0 = force_reg (vmode, op0);\n+      if (op0 == op1)\n+        op1 = nop0;\n+      op0 = nop0;\n+    }\n+  if (op1)\n+    op1 = force_reg (vmode, op1);\n+\n   /* Check for ps_merge* or xxpermdi insns.  */\n   if ((vmode == V2DFmode || vmode == V2DImode) && VECTOR_MEM_VSX_P (vmode))\n     {"}, {"sha": "f35579361142280fe2adaa286376fde46400ce79", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1d1e2b54c6b9cf13f021176ba37d24cc4dc2fe1/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1d1e2b54c6b9cf13f021176ba37d24cc4dc2fe1/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=b1d1e2b54c6b9cf13f021176ba37d24cc4dc2fe1", "patch": "@@ -12942,6 +12942,12 @@ sparc_vectorize_vec_perm_const (machine_mode vmode, rtx target, rtx op0,\n   if (vmode != V8QImode)\n     return false;\n \n+  rtx nop0 = force_reg (vmode, op0);\n+  if (op0 == op1)\n+    op1 = nop0;\n+  op0 = nop0;\n+  op1 = force_reg (vmode, op1);\n+\n   unsigned int i, mask;\n   for (i = mask = 0; i < 8; ++i)\n     mask |= (sel[i] & 0xf) << (28 - i*4);"}, {"sha": "f4614a394587787293dc8b680a38901f7906f61c", "filename": "gcc/optabs.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1d1e2b54c6b9cf13f021176ba37d24cc4dc2fe1/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1d1e2b54c6b9cf13f021176ba37d24cc4dc2fe1/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=b1d1e2b54c6b9cf13f021176ba37d24cc4dc2fe1", "patch": "@@ -6070,11 +6070,8 @@ expand_vec_perm_const (machine_mode mode, rtx v0, rtx v1,\n \n   if (targetm.vectorize.vec_perm_const != NULL)\n     {\n-      v0 = force_reg (mode, v0);\n       if (single_arg_p)\n \tv1 = v0;\n-      else\n-\tv1 = force_reg (mode, v1);\n \n       if (targetm.vectorize.vec_perm_const (mode, target, v0, v1, indices))\n \treturn target;\n@@ -6095,6 +6092,11 @@ expand_vec_perm_const (machine_mode mode, rtx v0, rtx v1,\n \treturn gen_lowpart (mode, target_qi);\n     }\n \n+  v0 = force_reg (mode, v0);\n+  if (single_arg_p)\n+    v1 = v0;\n+  v1 = force_reg (mode, v1);\n+\n   /* Otherwise expand as a fully variable permuation.  */\n \n   /* The optabs are only defined for selectors with the same width"}, {"sha": "231335c4dadd02c5c818b7d2802d26b439d944ea", "filename": "gcc/testsuite/gcc.target/i386/pr95905-2.c", "status": "modified", "additions": 39, "deletions": 3, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1d1e2b54c6b9cf13f021176ba37d24cc4dc2fe1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95905-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1d1e2b54c6b9cf13f021176ba37d24cc4dc2fe1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95905-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95905-2.c?ref=b1d1e2b54c6b9cf13f021176ba37d24cc4dc2fe1", "patch": "@@ -1,9 +1,9 @@\n /* PR target/95905 */\n /* { dg-do compile } */\n /* { dg-options \"-O2 -msse4.1\" } */\n-/* { dg-final { scan-assembler \"\\tv?pmovzxbw\\t\" } } */\n-/* { dg-final { scan-assembler \"\\tv?pmovzxwd\\t\" } } */\n-/* { dg-final { scan-assembler \"\\tv?pmovzxdq\\t\" } } */\n+/* { dg-final { scan-assembler-times \"\\tv?pmovzxbw\\t\" 4 } } */\n+/* { dg-final { scan-assembler-times \"\\tv?pmovzxwd\\t\" 4 } } */\n+/* { dg-final { scan-assembler-times \"\\tv?pmovzxdq\\t\" 4 } } */\n \n typedef unsigned char V1 __attribute__((vector_size (16)));\n typedef unsigned short V2 __attribute__((vector_size (16)));\n@@ -44,3 +44,39 @@ f6 (V3 *x)\n {\n   return __builtin_shuffle (*x, (V3) {}, (V3) { 0, 4, 1, 5 });\n }\n+\n+V1\n+f7 (V1 x)\n+{\n+  return __builtin_shuffle ((V1) {}, x, (V1) { 16, 0, 17, 1, 18, 2, 19, 3, 20, 4, 21, 5, 22, 6, 23, 7 });\n+}\n+\n+V2\n+f8 (V2 x)\n+{\n+  return __builtin_shuffle ((V2) {}, x, (V2) { 8, 0, 9, 1, 10, 2, 11, 3 });\n+}\n+\n+V3\n+f9 (V3 x)\n+{\n+  return __builtin_shuffle ((V3) {}, x, (V3) { 4, 0, 5, 1 });\n+}\n+\n+V1\n+f10 (V1 *x)\n+{\n+  return __builtin_shuffle ((V1) {}, *x, (V1) { 16, 0, 17, 1, 18, 2, 19, 3, 20, 4, 21, 5, 22, 6, 23, 7 });\n+}\n+\n+V2\n+f11 (V2 *x)\n+{\n+  return __builtin_shuffle ((V2) {}, *x, (V2) { 8, 0, 9, 1, 10, 2, 11, 3 });\n+}\n+\n+V3\n+f12 (V3 *x)\n+{\n+  return __builtin_shuffle ((V3) {}, *x, (V3) { 4, 0, 5, 1 });\n+}"}, {"sha": "b7b4bc5c4f27e72a81d61f029a378994a64a38f8", "filename": "gcc/testsuite/gcc.target/i386/pr95905-3.c", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1d1e2b54c6b9cf13f021176ba37d24cc4dc2fe1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95905-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1d1e2b54c6b9cf13f021176ba37d24cc4dc2fe1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95905-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95905-3.c?ref=b1d1e2b54c6b9cf13f021176ba37d24cc4dc2fe1", "patch": "@@ -0,0 +1,82 @@\n+/* PR target/95905 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx2\" } */\n+/* { dg-final { scan-assembler-times \"\\tvpmovzxbw\\t\" 4 } } */\n+/* { dg-final { scan-assembler-times \"\\tvpmovzxwd\\t\" 4 } } */\n+/* { dg-final { scan-assembler-times \"\\tvpmovzxdq\\t\" 4 } } */\n+\n+typedef unsigned char V1 __attribute__((vector_size (32)));\n+typedef unsigned short V2 __attribute__((vector_size (32)));\n+typedef unsigned int V3 __attribute__((vector_size (32)));\n+\n+V1\n+f1 (V1 x)\n+{\n+  return __builtin_shuffle (x, (V1) {}, (V1) { 0, 32, 1, 33, 2, 34, 3, 35, 4, 36, 5, 37, 6, 38, 7, 39, 8, 40, 9, 41, 10, 42, 11, 43, 12, 44, 13, 45, 14, 46, 15, 47 });\n+}\n+\n+V2\n+f2 (V2 x)\n+{\n+  return __builtin_shuffle (x, (V2) {}, (V2) { 0, 16, 1, 17, 2, 18, 3, 19, 4, 20, 5, 21, 6, 22, 7, 23 });\n+}\n+\n+V3\n+f3 (V3 x)\n+{\n+  return __builtin_shuffle (x, (V3) {}, (V3) { 0, 8, 1, 9, 2, 10, 3, 11 });\n+}\n+\n+V1\n+f4 (V1 *x)\n+{\n+  return __builtin_shuffle (*x, (V1) {}, (V1) { 0, 32, 1, 33, 2, 34, 3, 35, 4, 36, 5, 37, 6, 38, 7, 39, 8, 40, 9, 41, 10, 42, 11, 43, 12, 44, 13, 45, 14, 46, 15, 47 });\n+}\n+\n+V2\n+f5 (V2 *x)\n+{\n+  return __builtin_shuffle (*x, (V2) {}, (V2) { 0, 16, 1, 17, 2, 18, 3, 19, 4, 20, 5, 21, 6, 22, 7, 23 });\n+}\n+\n+V3\n+f6 (V3 *x)\n+{\n+  return __builtin_shuffle (*x, (V3) {}, (V3) { 0, 8, 1, 9, 2, 10, 3, 11 });\n+}\n+\n+V1\n+f7 (V1 x)\n+{\n+  return __builtin_shuffle ((V1) {}, x, (V1) { 32, 0, 33, 1, 34, 2, 35, 3, 36, 4, 37, 5, 38, 6, 39, 7, 40, 8, 41, 9, 42, 10, 43, 11, 44, 12, 45, 13, 46, 14, 47, 15 });\n+}\n+\n+V2\n+f8 (V2 x)\n+{\n+  return __builtin_shuffle ((V2) {}, x, (V2) { 16, 0, 17, 1, 18, 2, 19, 3, 20, 4, 21, 5, 22, 6, 23, 7 });\n+}\n+\n+V3\n+f9 (V3 x)\n+{\n+  return __builtin_shuffle ((V3) {}, x, (V3) { 8, 0, 9, 1, 10, 2, 11, 3 });\n+}\n+\n+V1\n+f10 (V1 *x)\n+{\n+  return __builtin_shuffle ((V1) {}, *x, (V1) { 32, 0, 33, 1, 34, 2, 35, 3, 36, 4, 37, 5, 38, 6, 39, 7, 40, 8, 41, 9, 42, 10, 43, 11, 44, 12, 45, 13, 46, 14, 47, 15 });\n+}\n+\n+V2\n+f11 (V2 *x)\n+{\n+  return __builtin_shuffle ((V2) {}, *x, (V2) { 16, 0, 17, 1, 18, 2, 19, 3, 20, 4, 21, 5, 22, 6, 23, 7 });\n+}\n+\n+V3\n+f12 (V3 *x)\n+{\n+  return __builtin_shuffle ((V3) {}, *x, (V3) { 8, 0, 9, 1, 10, 2, 11, 3 });\n+}"}, {"sha": "43cdf7f7a7817b3b162c5c3d0cc6aaf6e67072fa", "filename": "gcc/testsuite/gcc.target/i386/pr95905-4.c", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1d1e2b54c6b9cf13f021176ba37d24cc4dc2fe1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95905-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1d1e2b54c6b9cf13f021176ba37d24cc4dc2fe1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95905-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95905-4.c?ref=b1d1e2b54c6b9cf13f021176ba37d24cc4dc2fe1", "patch": "@@ -0,0 +1,82 @@\n+/* PR target/95905 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512bw\" } */\n+/* { dg-final { scan-assembler-times \"\\tvpmovzxbw\\t\" 4 } } */\n+/* { dg-final { scan-assembler-times \"\\tvpmovzxwd\\t\" 4 } } */\n+/* { dg-final { scan-assembler-times \"\\tvpmovzxdq\\t\" 4 } } */\n+\n+typedef unsigned char V1 __attribute__((vector_size (64)));\n+typedef unsigned short V2 __attribute__((vector_size (64)));\n+typedef unsigned int V3 __attribute__((vector_size (64)));\n+\n+V1\n+f1 (V1 x)\n+{\n+  return __builtin_shuffle (x, (V1) {}, (V1) { 0, 64, 1, 65, 2, 66, 3, 67, 4, 68, 5, 69, 6, 70, 7, 71, 8, 72, 9, 73, 10, 74, 11, 75, 12, 76, 13, 77, 14, 78, 15, 79, 16, 80, 17, 81, 18, 82, 19, 83, 20, 84, 21, 85, 22, 86, 23, 87, 24, 88, 25, 89, 26, 90, 27, 91, 28, 92, 29, 93, 30, 94, 31, 95 });\n+}\n+\n+V2\n+f2 (V2 x)\n+{\n+  return __builtin_shuffle (x, (V2) {}, (V2) { 0, 32, 1, 33, 2, 34, 3, 35, 4, 36, 5, 37, 6, 38, 7, 39, 8, 40, 9, 41, 10, 42, 11, 43, 12, 44, 13, 45, 14, 46, 15, 47 });\n+}\n+\n+V3\n+f3 (V3 x)\n+{\n+  return __builtin_shuffle (x, (V3) {}, (V3) { 0, 16, 1, 17, 2, 18, 3, 19, 4, 20, 5, 21, 6, 22, 7, 23 });\n+}\n+\n+V1\n+f4 (V1 *x)\n+{\n+  return __builtin_shuffle (*x, (V1) {}, (V1) { 0, 64, 1, 65, 2, 66, 3, 67, 4, 68, 5, 69, 6, 70, 7, 71, 8, 72, 9, 73, 10, 74, 11, 75, 12, 76, 13, 77, 14, 78, 15, 79, 16, 80, 17, 81, 18, 82, 19, 83, 20, 84, 21, 85, 22, 86, 23, 87, 24, 88, 25, 89, 26, 90, 27, 91, 28, 92, 29, 93, 30, 94, 31, 95 });\n+}\n+\n+V2\n+f5 (V2 *x)\n+{\n+  return __builtin_shuffle (*x, (V2) {}, (V2) { 0, 32, 1, 33, 2, 34, 3, 35, 4, 36, 5, 37, 6, 38, 7, 39, 8, 40, 9, 41, 10, 42, 11, 43, 12, 44, 13, 45, 14, 46, 15, 47 });\n+}\n+\n+V3\n+f6 (V3 *x)\n+{\n+  return __builtin_shuffle (*x, (V3) {}, (V3) { 0, 16, 1, 17, 2, 18, 3, 19, 4, 20, 5, 21, 6, 22, 7, 23 });\n+}\n+\n+V1\n+f7 (V1 x)\n+{\n+  return __builtin_shuffle ((V1) {}, x, (V1) { 64, 0, 65, 1, 66, 2, 67, 3, 68, 4, 69, 5, 70, 6, 71, 7, 72, 8, 73, 9, 74, 10, 75, 11, 76, 12, 77, 13, 78, 14, 79, 15, 80, 16, 81, 17, 82, 18, 83, 19, 84, 20, 85, 21, 86, 22, 87, 23, 88, 24, 89, 25, 90, 26, 91, 27, 92, 28, 93, 29, 94, 30, 95, 31 });\n+}\n+\n+V2\n+f8 (V2 x)\n+{\n+  return __builtin_shuffle ((V2) {}, x, (V2) { 32, 0, 33, 1, 34, 2, 35, 3, 36, 4, 37, 5, 38, 6, 39, 7, 40, 8, 41, 9, 42, 10, 43, 11, 44, 12, 45, 13, 46, 14, 47, 15 });\n+}\n+\n+V3\n+f9 (V3 x)\n+{\n+  return __builtin_shuffle ((V3) {}, x, (V3) { 16, 0, 17, 1, 18, 2, 19, 3, 20, 4, 21, 5, 22, 6, 23, 7 });\n+}\n+\n+V1\n+f10 (V1 *x)\n+{\n+  return __builtin_shuffle ((V1) {}, *x, (V1) { 64, 0, 65, 1, 66, 2, 67, 3, 68, 4, 69, 5, 70, 6, 71, 7, 72, 8, 73, 9, 74, 10, 75, 11, 76, 12, 77, 13, 78, 14, 79, 15, 80, 16, 81, 17, 82, 18, 83, 19, 84, 20, 85, 21, 86, 22, 87, 23, 88, 24, 89, 25, 90, 26, 91, 27, 92, 28, 93, 29, 94, 30, 95, 31 });\n+}\n+\n+V2\n+f11 (V2 *x)\n+{\n+  return __builtin_shuffle ((V2) {}, *x, (V2) { 32, 0, 33, 1, 34, 2, 35, 3, 36, 4, 37, 5, 38, 6, 39, 7, 40, 8, 41, 9, 42, 10, 43, 11, 44, 12, 45, 13, 46, 14, 47, 15 });\n+}\n+\n+V3\n+f12 (V3 *x)\n+{\n+  return __builtin_shuffle ((V3) {}, *x, (V3) { 16, 0, 17, 1, 18, 2, 19, 3, 20, 4, 21, 5, 22, 6, 23, 7 });\n+}"}]}