{"sha": "e2e030322038fa1b9bad7c567a09c8835dfd5183", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTJlMDMwMzIyMDM4ZmExYjliYWQ3YzU2N2EwOWM4ODM1ZGZkNTE4Mw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2012-09-11T01:05:12Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2012-09-11T01:05:12Z"}, "message": "re PR c++/54541 (SFINAE bug: handling incomplete return types)\n\n/cp\n2012-09-10  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/54541\n\tPR c++/54542\n\t* call.c (build_cxx_call): Add tsubst_flags_t parameter, use\n\trequire_complete_type_sfinae.\n\t(build_op_delete_call, build_over_call): Adjust.\n\t* typeck.c (build_x_compound_expr_from_vec): Add tsubst_flags_t\n\tparameter.\n\t(cp_build_function_call_vec): Adjust.\n\t* init.c (build_new_1): Likewise.\n\t* rtti.c (throw_bad_cast, throw_bad_typeid, build_dynamic_cast_1):\n\tLikewise.\n\t* optimize.c (build_delete_destructor_body): Likewise.\n\t* cp-tree.h: Adjust declarations.\n\n\t* call.c (convert_arg_to_ellipsis): Use require_complete_type_sfinae.\n\n/testsuite\n2012-09-10  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/54541\n\tPR c++/54542\n\t* g++.dg/cpp0x/sfinae40.C: New.\n\t* g++.dg/cpp0x/sfinae41.C: Likewise.\n\nFrom-SVN: r191170", "tree": {"sha": "96b82d9148fffb25980f7664eaf3ee1f5a19ccee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/96b82d9148fffb25980f7664eaf3ee1f5a19ccee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e2e030322038fa1b9bad7c567a09c8835dfd5183", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2e030322038fa1b9bad7c567a09c8835dfd5183", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2e030322038fa1b9bad7c567a09c8835dfd5183", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2e030322038fa1b9bad7c567a09c8835dfd5183/comments", "author": null, "committer": null, "parents": [{"sha": "f0bdc1d25c3b5619856efbb0ae260a7e6550df9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0bdc1d25c3b5619856efbb0ae260a7e6550df9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0bdc1d25c3b5619856efbb0ae260a7e6550df9e"}], "stats": {"total": 116, "additions": 95, "deletions": 21}, "files": [{"sha": "bd620469df1718c587e2c14cf4425377c76bf3bc", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2e030322038fa1b9bad7c567a09c8835dfd5183/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2e030322038fa1b9bad7c567a09c8835dfd5183/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e2e030322038fa1b9bad7c567a09c8835dfd5183", "patch": "@@ -1,3 +1,21 @@\n+2012-09-10  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/54541\n+\tPR c++/54542\n+\t* call.c (build_cxx_call): Add tsubst_flags_t parameter, use\n+\trequire_complete_type_sfinae.\n+\t(build_op_delete_call, build_over_call): Adjust.\n+\t* typeck.c (build_x_compound_expr_from_vec): Add tsubst_flags_t\n+\tparameter.\n+\t(cp_build_function_call_vec): Adjust.\n+\t* init.c (build_new_1): Likewise.\n+\t* rtti.c (throw_bad_cast, throw_bad_typeid, build_dynamic_cast_1):\n+\tLikewise.\n+\t* optimize.c (build_delete_destructor_body): Likewise.\n+\t* cp-tree.h: Adjust declarations.\n+\n+\t* call.c (convert_arg_to_ellipsis): Use require_complete_type_sfinae.\n+\n 2012-09-10  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/54538\n@@ -18,7 +36,7 @@\n \n \t* decl.c (reshape_init_class): Avoid dereferencing a\n \tpast-the-end pointer.\n-\t\t  \n+\n 2012-09-07  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* pt.c (num_template_headers_for_class): Rework per the code"}, {"sha": "6f7e34669ce86e830d77334491aacfcc2d97b994", "filename": "gcc/cp/call.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2e030322038fa1b9bad7c567a09c8835dfd5183/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2e030322038fa1b9bad7c567a09c8835dfd5183/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=e2e030322038fa1b9bad7c567a09c8835dfd5183", "patch": "@@ -5525,7 +5525,7 @@ build_op_delete_call (enum tree_code code, tree addr, tree size,\n \t  for (i = 1; i < nargs; i++)\n \t    argarray[i] = CALL_EXPR_ARG (placement, i);\n \t  mark_used (fn);\n-\t  return build_cxx_call (fn, nargs, argarray);\n+\t  return build_cxx_call (fn, nargs, argarray, complain);\n \t}\n       else\n \t{\n@@ -6127,12 +6127,12 @@ convert_arg_to_ellipsis (tree arg, tsubst_flags_t complain)\n       arg = cp_perform_integral_promotions (arg, complain);\n     }\n \n-  arg = require_complete_type (arg);\n+  arg = require_complete_type_sfinae (arg, complain);\n   arg_type = TREE_TYPE (arg);\n \n   if (arg != error_mark_node\n       /* In a template (or ill-formed code), we can have an incomplete type\n-\t even after require_complete_type, in which case we don't know\n+\t even after require_complete_type_sfinae, in which case we don't know\n \t whether it has trivial copy or not.  */\n       && COMPLETE_TYPE_P (arg_type))\n     {\n@@ -6882,15 +6882,16 @@ build_over_call (struct z_candidate *cand, int flags, tsubst_flags_t complain)\n \treturn error_mark_node;\n     }\n \n-  return build_cxx_call (fn, nargs, argarray);\n+  return build_cxx_call (fn, nargs, argarray, complain);\n }\n \n /* Build and return a call to FN, using NARGS arguments in ARGARRAY.\n    This function performs no overload resolution, conversion, or other\n    high-level operations.  */\n \n tree\n-build_cxx_call (tree fn, int nargs, tree *argarray)\n+build_cxx_call (tree fn, int nargs, tree *argarray,\n+\t\ttsubst_flags_t complain)\n {\n   tree fndecl;\n   int optimize_sav;\n@@ -6923,12 +6924,12 @@ build_cxx_call (tree fn, int nargs, tree *argarray)\n   if (VOID_TYPE_P (TREE_TYPE (fn)))\n     return fn;\n \n-  fn = require_complete_type (fn);\n+  fn = require_complete_type_sfinae (fn, complain);\n   if (fn == error_mark_node)\n     return error_mark_node;\n \n   if (MAYBE_CLASS_TYPE_P (TREE_TYPE (fn)))\n-    fn = build_cplus_new (TREE_TYPE (fn), fn, tf_warning_or_error);\n+    fn = build_cplus_new (TREE_TYPE (fn), fn, complain);\n   return convert_from_reference (fn);\n }\n "}, {"sha": "ded247d93d1ff25ef8f823f5e1a397399ab3be0a", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2e030322038fa1b9bad7c567a09c8835dfd5183/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2e030322038fa1b9bad7c567a09c8835dfd5183/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=e2e030322038fa1b9bad7c567a09c8835dfd5183", "patch": "@@ -4918,7 +4918,8 @@ extern tree build_integral_nontype_arg_conv\t(tree, tree, tsubst_flags_t);\n extern tree perform_direct_initialization_if_possible (tree, tree, bool,\n                                                        tsubst_flags_t);\n extern tree in_charge_arg_for_name\t\t(tree);\n-extern tree build_cxx_call\t\t\t(tree, int, tree *);\n+extern tree build_cxx_call\t\t\t(tree, int, tree *,\n+\t\t\t\t\t\t tsubst_flags_t);\n extern bool is_std_init_list\t\t\t(tree);\n extern bool is_list_ctor\t\t\t(tree);\n #ifdef ENABLE_CHECKING\n@@ -5851,7 +5852,8 @@ extern tree build_x_conditional_expr\t\t(location_t, tree, tree, tree,\n                                                  tsubst_flags_t);\n extern tree build_x_compound_expr_from_list\t(tree, expr_list_kind,\n \t\t\t\t\t\t tsubst_flags_t);\n-extern tree build_x_compound_expr_from_vec\t(VEC(tree,gc) *, const char *);\n+extern tree build_x_compound_expr_from_vec\t(VEC(tree,gc) *, const char *,\n+\t\t\t\t\t\t tsubst_flags_t);\n extern tree build_x_compound_expr\t\t(location_t, tree, tree,\n \t\t\t\t\t\t tsubst_flags_t);\n extern tree build_compound_expr                 (location_t, tree, tree);"}, {"sha": "e5abec706cd02467652a1e554231c95cc5d6c792", "filename": "gcc/cp/init.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2e030322038fa1b9bad7c567a09c8835dfd5183/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2e030322038fa1b9bad7c567a09c8835dfd5183/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=e2e030322038fa1b9bad7c567a09c8835dfd5183", "patch": "@@ -2739,7 +2739,8 @@ build_new_1 (VEC(tree,gc) **placement, tree type, tree nelts,\n \t      /* We are processing something like `new int (10)', which\n \t\t means allocate an int, and initialize it with 10.  */\n \n-\t      ie = build_x_compound_expr_from_vec (*init, \"new initializer\");\n+\t      ie = build_x_compound_expr_from_vec (*init, \"new initializer\",\n+\t\t\t\t\t\t   complain);\n \t      init_expr = cp_build_modify_expr (init_expr, INIT_EXPR, ie,\n \t\t\t\t\t\tcomplain);\n \t    }"}, {"sha": "ec283355521339dfc89b9e04f4b6f4e7dd6aec58", "filename": "gcc/cp/optimize.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2e030322038fa1b9bad7c567a09c8835dfd5183/gcc%2Fcp%2Foptimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2e030322038fa1b9bad7c567a09c8835dfd5183/gcc%2Fcp%2Foptimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Foptimize.c?ref=e2e030322038fa1b9bad7c567a09c8835dfd5183", "patch": "@@ -128,7 +128,8 @@ build_delete_destructor_body (tree delete_dtor, tree complete_dtor)\n \n   /* Call the corresponding complete destructor.  */\n   gcc_assert (complete_dtor);\n-  call_dtor = build_cxx_call (complete_dtor, 1, &parm);\n+  call_dtor = build_cxx_call (complete_dtor, 1, &parm,\n+\t\t\t      tf_warning_or_error);\n   add_stmt (call_dtor);\n \n   add_stmt (build_stmt (0, LABEL_EXPR, cdtor_label));"}, {"sha": "95518cffe1d06cc807f2ce4bb972bc4f020ad19a", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2e030322038fa1b9bad7c567a09c8835dfd5183/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2e030322038fa1b9bad7c567a09c8835dfd5183/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=e2e030322038fa1b9bad7c567a09c8835dfd5183", "patch": "@@ -206,7 +206,7 @@ throw_bad_cast (void)\n     fn = push_throw_library_fn (fn, build_function_type_list (ptr_type_node,\n \t\t\t\t\t\t\t      NULL_TREE));\n \n-  return build_cxx_call (fn, 0, NULL);\n+  return build_cxx_call (fn, 0, NULL, tf_warning_or_error);\n }\n \n /* Return an expression for \"__cxa_bad_typeid()\".  The expression\n@@ -225,7 +225,7 @@ throw_bad_typeid (void)\n       fn = push_throw_library_fn (fn, t);\n     }\n \n-  return build_cxx_call (fn, 0, NULL);\n+  return build_cxx_call (fn, 0, NULL, tf_warning_or_error);\n }\n \f\n /* Return an lvalue expression whose type is \"const std::type_info\"\n@@ -743,7 +743,7 @@ build_dynamic_cast_1 (tree type, tree expr, tsubst_flags_t complain)\n \t      pop_abi_namespace ();\n \t      dynamic_cast_node = dcast_fn;\n \t    }\n-\t  result = build_cxx_call (dcast_fn, 4, elems);\n+\t  result = build_cxx_call (dcast_fn, 4, elems, complain);\n \n \t  if (tc == REFERENCE_TYPE)\n \t    {"}, {"sha": "97a4588157e639d49f2435d46376d30aa7664ce6", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2e030322038fa1b9bad7c567a09c8835dfd5183/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2e030322038fa1b9bad7c567a09c8835dfd5183/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=e2e030322038fa1b9bad7c567a09c8835dfd5183", "patch": "@@ -3373,7 +3373,7 @@ cp_build_function_call_vec (tree function, VEC(tree,gc) **params,\n      null parameters.  */\n   check_function_arguments (fntype, nargs, argarray);\n \n-  ret = build_cxx_call (function, nargs, argarray);\n+  ret = build_cxx_call (function, nargs, argarray, complain);\n \n   if (allocated != NULL)\n     release_tree_vector (allocated);\n@@ -5719,7 +5719,8 @@ build_x_compound_expr_from_list (tree list, expr_list_kind exp,\n /* Like build_x_compound_expr_from_list, but using a VEC.  */\n \n tree\n-build_x_compound_expr_from_vec (VEC(tree,gc) *vec, const char *msg)\n+build_x_compound_expr_from_vec (VEC(tree,gc) *vec, const char *msg,\n+\t\t\t\ttsubst_flags_t complain)\n {\n   if (VEC_empty (tree, vec))\n     return NULL_TREE;\n@@ -5732,14 +5733,19 @@ build_x_compound_expr_from_vec (VEC(tree,gc) *vec, const char *msg)\n       tree t;\n \n       if (msg != NULL)\n-\tpermerror (input_location,\n-\t\t   \"%s expression list treated as compound expression\",\n-\t\t   msg);\n+\t{\n+\t  if (complain & tf_error)\n+\t    permerror (input_location,\n+\t\t       \"%s expression list treated as compound expression\",\n+\t\t       msg);\n+\t  else\n+\t    return error_mark_node;\n+\t}\n \n       expr = VEC_index (tree, vec, 0);\n       for (ix = 1; VEC_iterate (tree, vec, ix, t); ++ix)\n \texpr = build_x_compound_expr (EXPR_LOCATION (t), expr,\n-\t\t\t\t      t, tf_warning_or_error);\n+\t\t\t\t      t, complain);\n \n       return expr;\n     }"}, {"sha": "bc9c0afac9aa51a8d40d7e89feb1b04c9dd57dad", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2e030322038fa1b9bad7c567a09c8835dfd5183/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2e030322038fa1b9bad7c567a09c8835dfd5183/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e2e030322038fa1b9bad7c567a09c8835dfd5183", "patch": "@@ -1,3 +1,10 @@\n+2012-09-10  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/54541\n+\tPR c++/54542\n+\t* g++.dg/cpp0x/sfinae40.C: New.\n+\t* g++.dg/cpp0x/sfinae41.C: Likewise.\n+\n 2012-09-10  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/54538"}, {"sha": "18e5fecb268163cf5e1551fa103734e90db8434c", "filename": "gcc/testsuite/g++.dg/cpp0x/sfinae40.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2e030322038fa1b9bad7c567a09c8835dfd5183/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae40.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2e030322038fa1b9bad7c567a09c8835dfd5183/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae40.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae40.C?ref=e2e030322038fa1b9bad7c567a09c8835dfd5183", "patch": "@@ -0,0 +1,21 @@\n+// PR c++/54541\n+// { dg-do compile { target c++11 } }\n+\n+template <typename T> T&& declval();\n+\n+struct X;\n+\n+X f(int);\n+\n+template <class T>\n+void g(decltype((void)f(declval<T>())) *)\n+{}\n+\n+template <class T>\n+void g(...)\n+{}\n+\n+int main()\n+{\n+  g<int>(0);\n+}"}, {"sha": "bd6f624f0adccffd72c7615d8568c74653ce06f9", "filename": "gcc/testsuite/g++.dg/cpp0x/sfinae41.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2e030322038fa1b9bad7c567a09c8835dfd5183/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae41.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2e030322038fa1b9bad7c567a09c8835dfd5183/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae41.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae41.C?ref=e2e030322038fa1b9bad7c567a09c8835dfd5183", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/54542\n+// { dg-do compile { target c++11 } }\n+\n+template <class T>\n+void f(decltype(new T(1, 2)) *)\n+{\n+  T(1, 2);\n+}\n+\n+template <class T>\n+void f(...)\n+{}\n+\n+int main()\n+{\n+  f<int>(0);\n+}"}]}