{"sha": "1ccaa21f0cdab09acd959883dd4d5a68692807dd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWNjYWEyMWYwY2RhYjA5YWNkOTU5ODgzZGQ0ZDVhNjg2OTI4MDdkZA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2018-06-04T11:38:38Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2018-06-04T11:38:38Z"}, "message": "tree-cfgcleanup.c (cleanup_tree_cfg_1): Fold into...\n\n2018-06-04  Richard Biener  <rguenther@suse.de>\n\n\t* tree-cfgcleanup.c (cleanup_tree_cfg_1): Fold into...\n\t(cleanup_tree_cfg_noloop): ... single caller.  Do\n\tstart_recording_case_labels later.\n\nFrom-SVN: r261145", "tree": {"sha": "d8757c9a49b93afedfce23eac750b1f8553b29ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d8757c9a49b93afedfce23eac750b1f8553b29ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ccaa21f0cdab09acd959883dd4d5a68692807dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ccaa21f0cdab09acd959883dd4d5a68692807dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ccaa21f0cdab09acd959883dd4d5a68692807dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ccaa21f0cdab09acd959883dd4d5a68692807dd/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5a6e3d7925e9587b98902c26f3e4992419a140a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a6e3d7925e9587b98902c26f3e4992419a140a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a6e3d7925e9587b98902c26f3e4992419a140a2"}], "stats": {"total": 118, "additions": 53, "deletions": 65}, "files": [{"sha": "83a7a4f9d90250757ab08dab66c1884a7fa153be", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ccaa21f0cdab09acd959883dd4d5a68692807dd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ccaa21f0cdab09acd959883dd4d5a68692807dd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1ccaa21f0cdab09acd959883dd4d5a68692807dd", "patch": "@@ -1,3 +1,9 @@\n+2018-06-04  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-cfgcleanup.c (cleanup_tree_cfg_1): Fold into...\n+\t(cleanup_tree_cfg_noloop): ... single caller.  Do\n+\tstart_recording_case_labels later.\n+\n 2018-06-04  Sebastian Peryt  <sebastian.peryt@intel.com>\n \n         * config/i386/cldemoteintrin.h: Change define from _X86INTRIN_H_INCLUDED"}, {"sha": "55fce08ad96ac9fe374ffe07a27ece2e8ef21cab", "filename": "gcc/tree-cfgcleanup.c", "status": "modified", "additions": 47, "deletions": 65, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ccaa21f0cdab09acd959883dd4d5a68692807dd/gcc%2Ftree-cfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ccaa21f0cdab09acd959883dd4d5a68692807dd/gcc%2Ftree-cfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfgcleanup.c?ref=1ccaa21f0cdab09acd959883dd4d5a68692807dd", "patch": "@@ -757,66 +757,6 @@ cleanup_control_flow_pre ()\n   return retval;\n }\n \n-/* Iterate the cfg cleanups, while anything changes.  */\n-\n-static bool\n-cleanup_tree_cfg_1 (void)\n-{\n-  bool retval = false;\n-  basic_block bb;\n-  unsigned i, n;\n-\n-  /* Prepare the worklists of altered blocks.  */\n-  cfgcleanup_altered_bbs = BITMAP_ALLOC (NULL);\n-\n-  /* During forwarder block cleanup, we may redirect edges out of\n-     SWITCH_EXPRs, which can get expensive.  So we want to enable\n-     recording of edge to CASE_LABEL_EXPR.  */\n-  start_recording_case_labels ();\n-\n-  /* We cannot use FOR_EACH_BB_FN for the BB iterations below\n-     since the basic blocks may get removed.  */\n-\n-  /* Start by iterating over all basic blocks in PRE order looking for\n-     edge removal opportunities.  Do this first because incoming SSA form\n-     may be invalid and we want to avoid performing SSA related tasks such\n-     as propgating out a PHI node during BB merging in that state.  */\n-  retval |= cleanup_control_flow_pre ();\n-\n-  /* After doing the above SSA form should be valid (or an update SSA\n-     should be required).  */\n-\n-  /* Continue by iterating over all basic blocks looking for BB merging\n-     opportunities.  */\n-  n = last_basic_block_for_fn (cfun);\n-  for (i = NUM_FIXED_BLOCKS; i < n; i++)\n-    {\n-      bb = BASIC_BLOCK_FOR_FN (cfun, i);\n-      if (bb)\n-\tretval |= cleanup_tree_cfg_bb (bb);\n-    }\n-\n-  /* Now process the altered blocks, as long as any are available.  */\n-  while (!bitmap_empty_p (cfgcleanup_altered_bbs))\n-    {\n-      i = bitmap_first_set_bit (cfgcleanup_altered_bbs);\n-      bitmap_clear_bit (cfgcleanup_altered_bbs, i);\n-      if (i < NUM_FIXED_BLOCKS)\n-\tcontinue;\n-\n-      bb = BASIC_BLOCK_FOR_FN (cfun, i);\n-      if (!bb)\n-\tcontinue;\n-\n-      retval |= cleanup_control_flow_bb (bb);\n-      retval |= cleanup_tree_cfg_bb (bb);\n-    }\n-\n-  end_recording_case_labels ();\n-  BITMAP_FREE (cfgcleanup_altered_bbs);\n-  return retval;\n-}\n-\n static bool\n mfb_keep_latches (edge e)\n {\n@@ -833,10 +773,7 @@ cleanup_tree_cfg_noloop (void)\n \n   timevar_push (TV_TREE_CLEANUP_CFG);\n \n-  /* Iterate until there are no more cleanups left to do.  If any\n-     iteration changed the flowgraph, set CHANGED to true.\n-\n-     If dominance information is available, there cannot be any unreachable\n+  /* If dominance information is available, there cannot be any unreachable\n      blocks.  */\n   if (!dom_info_available_p (CDI_DOMINATORS))\n     {\n@@ -907,7 +844,52 @@ cleanup_tree_cfg_noloop (void)\n \t  }\n     }\n \n-  changed |= cleanup_tree_cfg_1 ();\n+  /* Prepare the worklists of altered blocks.  */\n+  cfgcleanup_altered_bbs = BITMAP_ALLOC (NULL);\n+\n+  /* Start by iterating over all basic blocks in PRE order looking for\n+     edge removal opportunities.  Do this first because incoming SSA form\n+     may be invalid and we want to avoid performing SSA related tasks such\n+     as propgating out a PHI node during BB merging in that state.  */\n+  changed |= cleanup_control_flow_pre ();\n+\n+  /* After doing the above SSA form should be valid (or an update SSA\n+     should be required).  */\n+\n+  /* During forwarder block cleanup, we may redirect edges out of\n+     SWITCH_EXPRs, which can get expensive.  So we want to enable\n+     recording of edge to CASE_LABEL_EXPR.  */\n+  start_recording_case_labels ();\n+\n+  /* Continue by iterating over all basic blocks looking for BB merging\n+     opportunities.  We cannot use FOR_EACH_BB_FN for the BB iteration\n+     since the basic blocks may get removed.  */\n+  unsigned n = last_basic_block_for_fn (cfun);\n+  for (unsigned i = NUM_FIXED_BLOCKS; i < n; i++)\n+    {\n+      basic_block bb = BASIC_BLOCK_FOR_FN (cfun, i);\n+      if (bb)\n+\tchanged |= cleanup_tree_cfg_bb (bb);\n+    }\n+\n+  /* Now process the altered blocks, as long as any are available.  */\n+  while (!bitmap_empty_p (cfgcleanup_altered_bbs))\n+    {\n+      unsigned i = bitmap_first_set_bit (cfgcleanup_altered_bbs);\n+      bitmap_clear_bit (cfgcleanup_altered_bbs, i);\n+      if (i < NUM_FIXED_BLOCKS)\n+\tcontinue;\n+\n+      basic_block bb = BASIC_BLOCK_FOR_FN (cfun, i);\n+      if (!bb)\n+\tcontinue;\n+\n+      changed |= cleanup_control_flow_bb (bb);\n+      changed |= cleanup_tree_cfg_bb (bb);\n+    }\n+\n+  end_recording_case_labels ();\n+  BITMAP_FREE (cfgcleanup_altered_bbs);\n \n   gcc_assert (dom_info_available_p (CDI_DOMINATORS));\n "}]}