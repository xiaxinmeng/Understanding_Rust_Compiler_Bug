{"sha": "4480e13f5e5133cb604d0ce893d6935c1e7b6033", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQ4MGUxM2Y1ZTUxMzNjYjYwNGQwY2U4OTNkNjkzNWMxZTdiNjAzMw==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1994-09-20T19:57:18Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1994-09-20T19:57:18Z"}, "message": "(sched_analyze_insn): Parameter loop_note type changed to rtx, and name changed to loop_notes.\n\n(sched_analyze_insn): Parameter loop_note type changed\nto rtx, and name changed to loop_notes.  Code adding it to\nREG_NOTES modified to account for type change.\n(sched_analyze): Variable loop_note type changed to rtx, and name\nchanged to loop_notes.  Store LOOP_* REG_DEAD notes in it instead\nof LOOP_* NOTE_LINE_NUMBER.\n(schedule_block): Pass last not insn to emit_note_before call.\n\nFrom-SVN: r8099", "tree": {"sha": "fceb2fc8266419b317fb0cd8793dd9a17067b25f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fceb2fc8266419b317fb0cd8793dd9a17067b25f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4480e13f5e5133cb604d0ce893d6935c1e7b6033", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4480e13f5e5133cb604d0ce893d6935c1e7b6033", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4480e13f5e5133cb604d0ce893d6935c1e7b6033", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4480e13f5e5133cb604d0ce893d6935c1e7b6033/comments", "author": null, "committer": null, "parents": [{"sha": "b840bfb0a22793c3794793a6e4817f9fb7b8e03a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b840bfb0a22793c3794793a6e4817f9fb7b8e03a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b840bfb0a22793c3794793a6e4817f9fb7b8e03a"}], "stats": {"total": 31, "additions": 18, "deletions": 13}, "files": [{"sha": "0f08b6531da04181364137072d7eabf567b858dd", "filename": "gcc/sched.c", "status": "modified", "additions": 18, "deletions": 13, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4480e13f5e5133cb604d0ce893d6935c1e7b6033/gcc%2Fsched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4480e13f5e5133cb604d0ce893d6935c1e7b6033/gcc%2Fsched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched.c?ref=4480e13f5e5133cb604d0ce893d6935c1e7b6033", "patch": "@@ -315,7 +315,7 @@ static void add_insn_mem_dependence\tPROTO((rtx *, rtx *, rtx, rtx));\n static void flush_pending_lists\t\tPROTO((rtx));\n static void sched_analyze_1\t\tPROTO((rtx, rtx));\n static void sched_analyze_2\t\tPROTO((rtx, rtx));\n-static void sched_analyze_insn\t\tPROTO((rtx, rtx, int));\n+static void sched_analyze_insn\t\tPROTO((rtx, rtx, rtx));\n static int sched_analyze\t\tPROTO((rtx, rtx));\n static void sched_note_set\t\tPROTO((int, rtx, int));\n static int rank_for_schedule\t\tPROTO((rtx *, rtx *));\n@@ -2013,9 +2013,9 @@ sched_analyze_2 (x, insn)\n /* Analyze an INSN with pattern X to find all dependencies.  */\n \n static void\n-sched_analyze_insn (x, insn, loop_note)\n+sched_analyze_insn (x, insn, loop_notes)\n      rtx x, insn;\n-     int loop_note;\n+     rtx loop_notes;\n {\n   register RTX_CODE code = GET_CODE (x);\n   rtx link;\n@@ -2054,9 +2054,10 @@ sched_analyze_insn (x, insn, loop_note)\n      Otherwise, the reg_n_refs info (which depends on loop_depth) would\n      become incorrect.  */\n \n-  if (loop_note)\n+  if (loop_notes)\n     {\n       int max_reg = max_reg_num ();\n+      rtx link;\n \n       for (i = 0; i < max_reg; i++)\n \t{\n@@ -2071,8 +2072,11 @@ sched_analyze_insn (x, insn, loop_note)\n \n       flush_pending_lists (insn);\n \n-      REG_NOTES (insn) = gen_rtx (EXPR_LIST, REG_DEAD,\n-\t\t\t\t       GEN_INT (loop_note), REG_NOTES (insn));\n+      link = loop_notes;\n+      while (XEXP (link, 1))\n+\tlink = XEXP (link, 1);\n+      XEXP (link, 1) = REG_NOTES (insn);\n+      REG_NOTES (insn) = loop_notes;\n     }\n \n   /* After reload, it is possible for an instruction to have a REG_DEAD note\n@@ -2163,16 +2167,16 @@ sched_analyze (head, tail)\n   register int n_insns = 0;\n   register rtx u;\n   register int luid = 0;\n-  int loop_note = 0;\n+  rtx loop_notes = 0;\n \n   for (insn = head; ; insn = NEXT_INSN (insn))\n     {\n       INSN_LUID (insn) = luid++;\n \n       if (GET_CODE (insn) == INSN || GET_CODE (insn) == JUMP_INSN)\n \t{\n-\t  sched_analyze_insn (PATTERN (insn), insn, loop_note);\n-\t  loop_note = 0;\n+\t  sched_analyze_insn (PATTERN (insn), insn, loop_notes);\n+\t  loop_notes = 0;\n \t  n_insns += 1;\n \t}\n       else if (GET_CODE (insn) == CALL_INSN)\n@@ -2238,8 +2242,8 @@ sched_analyze (head, tail)\n \t    }\n \t  LOG_LINKS (sched_before_next_call) = 0;\n \n-\t  sched_analyze_insn (PATTERN (insn), insn, loop_note);\n-\t  loop_note = 0;\n+\t  sched_analyze_insn (PATTERN (insn), insn, loop_notes);\n+\t  loop_notes = 0;\n \n \t  /* We don't need to flush memory for a function call which does\n \t     not involve memory.  */\n@@ -2259,7 +2263,8 @@ sched_analyze (head, tail)\n       else if (GET_CODE (insn) == NOTE\n \t       && (NOTE_LINE_NUMBER (insn) == NOTE_INSN_LOOP_BEG\n \t\t   || NOTE_LINE_NUMBER (insn) == NOTE_INSN_LOOP_END))\n-\tloop_note = NOTE_LINE_NUMBER (insn);\n+\tloop_notes = gen_rtx (EXPR_LIST, REG_DEAD,\n+\t\t\t      GEN_INT (NOTE_LINE_NUMBER (insn)), loop_notes);\n \n       if (insn == tail)\n \treturn n_insns;\n@@ -3864,7 +3869,7 @@ schedule_block (b, file)\n \t\tif (INTVAL (XEXP (note, 0)) == NOTE_INSN_SETJMP)\n \t\t  emit_note_after (INTVAL (XEXP (note, 0)), insn);\n \t\telse\n-\t\t  last = emit_note_before (INTVAL (XEXP (note, 0)), insn);\n+\t\t  last = emit_note_before (INTVAL (XEXP (note, 0)), last);\n \t\tremove_note (insn, note);\n \t      }\n \t  }"}]}