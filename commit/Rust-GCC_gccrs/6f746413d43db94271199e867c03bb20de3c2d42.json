{"sha": "6f746413d43db94271199e867c03bb20de3c2d42", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmY3NDY0MTNkNDNkYjk0MjcxMTk5ZTg2N2MwM2JiMjBkZTNjMmQ0Mg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2014-02-04T06:04:32Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2014-02-04T06:04:32Z"}, "message": "gimple-fold.c (gimple_extract_devirt_binfo_from_cst): Remove.\n\n\n\t* gimple-fold.c (gimple_extract_devirt_binfo_from_cst): Remove.\n\t* gimple-fold.h (gimple_extract_devirt_binfo_from_cst): Remove.\n\nFrom-SVN: r207450", "tree": {"sha": "761dc26b22dd807bfe3d477bf19b0fe1345cee2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/761dc26b22dd807bfe3d477bf19b0fe1345cee2a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f746413d43db94271199e867c03bb20de3c2d42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f746413d43db94271199e867c03bb20de3c2d42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f746413d43db94271199e867c03bb20de3c2d42", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f746413d43db94271199e867c03bb20de3c2d42/comments", "author": null, "committer": null, "parents": [{"sha": "5f876ae722d5a409960aef5ab4d3ea7630fd516c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f876ae722d5a409960aef5ab4d3ea7630fd516c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f876ae722d5a409960aef5ab4d3ea7630fd516c"}], "stats": {"total": 74, "additions": 5, "deletions": 69}, "files": [{"sha": "b3fcc141a7984cef5fd3e6c869ab2448aa7488cb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f746413d43db94271199e867c03bb20de3c2d42/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f746413d43db94271199e867c03bb20de3c2d42/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6f746413d43db94271199e867c03bb20de3c2d42", "patch": "@@ -1,3 +1,8 @@\n+2014-02-03  Jan Hubicka  <jh@suse.cz>\n+\n+\t* gimple-fold.c (gimple_extract_devirt_binfo_from_cst): Remove.\n+\t* gimple-fold.h (gimple_extract_devirt_binfo_from_cst): Remove.\n+\n 2014-02-03  Jan Hubicka  <jh@suse.cz>\n \n \tPR ipa/59831"}, {"sha": "43b49f1dc170a4da716aa48362c8278d3e3e33d0", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 0, "deletions": 68, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f746413d43db94271199e867c03bb20de3c2d42/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f746413d43db94271199e867c03bb20de3c2d42/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=6f746413d43db94271199e867c03bb20de3c2d42", "patch": "@@ -1071,74 +1071,6 @@ gimple_fold_builtin (gimple stmt)\n }\n \n \n-/* Return a binfo to be used for devirtualization of calls based on an object\n-   represented by a declaration (i.e. a global or automatically allocated one)\n-   or NULL if it cannot be found or is not safe.  CST is expected to be an\n-   ADDR_EXPR of such object or the function will return NULL.  Currently it is\n-   safe to use such binfo only if it has no base binfo (i.e. no ancestors)\n-   EXPECTED_TYPE is type of the class virtual belongs to.  */\n-\n-tree\n-gimple_extract_devirt_binfo_from_cst (tree cst, tree expected_type)\n-{\n-  HOST_WIDE_INT offset, size, max_size;\n-  tree base, type, binfo;\n-  bool last_artificial = false;\n-\n-  if (!flag_devirtualize\n-      || TREE_CODE (cst) != ADDR_EXPR\n-      || TREE_CODE (TREE_TYPE (TREE_TYPE (cst))) != RECORD_TYPE)\n-    return NULL_TREE;\n-\n-  cst = TREE_OPERAND (cst, 0);\n-  base = get_ref_base_and_extent (cst, &offset, &size, &max_size);\n-  type = TREE_TYPE (base);\n-  if (!DECL_P (base)\n-      || max_size == -1\n-      || max_size != size\n-      || TREE_CODE (type) != RECORD_TYPE)\n-    return NULL_TREE;\n-\n-  /* Find the sub-object the constant actually refers to and mark whether it is\n-     an artificial one (as opposed to a user-defined one).  */\n-  while (true)\n-    {\n-      HOST_WIDE_INT pos, size;\n-      tree fld;\n-\n-      if (types_same_for_odr (type, expected_type))\n-\tbreak;\n-      if (offset < 0)\n-\treturn NULL_TREE;\n-\n-      for (fld = TYPE_FIELDS (type); fld; fld = DECL_CHAIN (fld))\n-\t{\n-\t  if (TREE_CODE (fld) != FIELD_DECL)\n-\t    continue;\n-\n-\t  pos = int_bit_position (fld);\n-\t  size = tree_to_uhwi (DECL_SIZE (fld));\n-\t  if (pos <= offset && (pos + size) > offset)\n-\t    break;\n-\t}\n-      if (!fld || TREE_CODE (TREE_TYPE (fld)) != RECORD_TYPE)\n-\treturn NULL_TREE;\n-\n-      last_artificial = DECL_ARTIFICIAL (fld);\n-      type = TREE_TYPE (fld);\n-      offset -= pos;\n-    }\n-  /* Artificial sub-objects are ancestors, we do not want to use them for\n-     devirtualization, at least not here.  */\n-  if (last_artificial)\n-    return NULL_TREE;\n-  binfo = TYPE_BINFO (type);\n-  if (!binfo || BINFO_N_BASE_BINFOS (binfo) > 0)\n-    return NULL_TREE;\n-  else\n-    return binfo;\n-}\n-\n /* Attempt to fold a call statement referenced by the statement iterator GSI.\n    The statement may be replaced by another statement, e.g., if the call\n    simplifies to a constant value. Return true if any changes were made."}, {"sha": "6d8746ccb16963049a4a471ea92a546403380a12", "filename": "gcc/gimple-fold.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f746413d43db94271199e867c03bb20de3c2d42/gcc%2Fgimple-fold.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f746413d43db94271199e867c03bb20de3c2d42/gcc%2Fgimple-fold.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.h?ref=6f746413d43db94271199e867c03bb20de3c2d42", "patch": "@@ -26,7 +26,6 @@ extern tree canonicalize_constructor_val (tree, tree);\n extern tree get_symbol_constant_value (tree);\n extern void gimplify_and_update_call_from_tree (gimple_stmt_iterator *, tree);\n extern tree gimple_fold_builtin (gimple);\n-extern tree gimple_extract_devirt_binfo_from_cst (tree, tree);\n extern bool fold_stmt (gimple_stmt_iterator *);\n extern bool fold_stmt_inplace (gimple_stmt_iterator *);\n extern tree maybe_fold_and_comparisons (enum tree_code, tree, tree, "}]}