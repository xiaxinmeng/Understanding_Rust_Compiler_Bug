{"sha": "03cb9ed8dd603dbb77762ca948fc6381ba190731", "node_id": "C_kwDOANBUbNoAKDAzY2I5ZWQ4ZGQ2MDNkYmI3Nzc2MmNhOTQ4ZmM2MzgxYmExOTA3MzE", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-09-26T17:59:45Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-09-26T22:47:37Z"}, "message": "libstdc++: Update std::pointer_traits to match new LWG 3545 wording\n\nIt was pointed out in recent LWG 3545 discussion that having a\nconstrained partial specialization of std::pointer_traits can cause\nambiguities with program-defined specializations. For example, the\naddition to the testcase has:\n\ntemplate<typename P> requires std::derived_from<P, base_type\nstruct std::pointer_traits<P>;\n\nThis would be ambiguous with the library's own constrained partial\nspecialization:\n\ntemplate<typename Ptr> requires requires { typename Ptr::element_type; }\nstruct std::pointer_traits<Ptr>;\n\nNeither specialization is more specialized than the other for a type\nthat is derived from base_type and also has an element_type member.\n\nThe solution is to remove the library's partial specialization, and do\nthe check for Ptr::element_type in the __ptr_traits_elem helper (which\nis what we already do for !__cpp_concepts anyway).\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/ptr_traits.h (__ptr_traits_elem) [__cpp_concepts]:\n\tAlso define the __ptr_traits_elem class template for the\n\tconcepts case.\n\t(pointer_traits<Ptr>): Remove constrained partial\n\tspecialization.\n\t* testsuite/20_util/pointer_traits/lwg3545.cc: Check for\n\tambiguitiy with program-defined partial specialization.", "tree": {"sha": "b7259318f6ef5cf0fa4309f22452c303287e49f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b7259318f6ef5cf0fa4309f22452c303287e49f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/03cb9ed8dd603dbb77762ca948fc6381ba190731", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03cb9ed8dd603dbb77762ca948fc6381ba190731", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03cb9ed8dd603dbb77762ca948fc6381ba190731", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03cb9ed8dd603dbb77762ca948fc6381ba190731/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af85ad891703db220b25e7847f10d0bbec4becf4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af85ad891703db220b25e7847f10d0bbec4becf4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af85ad891703db220b25e7847f10d0bbec4becf4"}], "stats": {"total": 37, "additions": 23, "deletions": 14}, "files": [{"sha": "71370ff4fc9422a8efee0227de3a4bc8771530d2", "filename": "libstdc++-v3/include/bits/ptr_traits.h", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03cb9ed8dd603dbb77762ca948fc6381ba190731/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fptr_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03cb9ed8dd603dbb77762ca948fc6381ba190731/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fptr_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fptr_traits.h?ref=03cb9ed8dd603dbb77762ca948fc6381ba190731", "patch": "@@ -73,25 +73,24 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __replace_first_arg<_SomeTemplate<_Tp, _Types...>, _Up>\n     { using type = _SomeTemplate<_Up, _Types...>; };\n \n-#if __cpp_concepts\n-  // When concepts are supported detection of _Ptr::element_type is done\n-  // by a requires-clause, so __ptr_traits_elem_t only needs to do this:\n-  template<typename _Ptr>\n-    using __ptr_traits_elem_t = typename __get_first_arg<_Ptr>::type;\n-#else\n   // Detect the element type of a pointer-like type.\n   template<typename _Ptr, typename = void>\n     struct __ptr_traits_elem : __get_first_arg<_Ptr>\n     { };\n \n   // Use _Ptr::element_type if is a valid type.\n+#if __cpp_concepts\n+  template<typename _Ptr> requires requires { typename _Ptr::element_type; }\n+    struct __ptr_traits_elem<_Ptr, void>\n+    { using type = typename _Ptr::element_type; };\n+#else\n   template<typename _Ptr>\n     struct __ptr_traits_elem<_Ptr, __void_t<typename _Ptr::element_type>>\n     { using type = typename _Ptr::element_type; };\n+#endif\n \n   template<typename _Ptr>\n     using __ptr_traits_elem_t = typename __ptr_traits_elem<_Ptr>::type;\n-#endif\n \n   /// @endcond\n \n@@ -182,13 +181,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct pointer_traits : __ptr_traits_impl<_Ptr, __ptr_traits_elem_t<_Ptr>>\n     { };\n \n-#if __cpp_concepts\n-  template<typename _Ptr> requires requires { typename _Ptr::element_type; }\n-    struct pointer_traits<_Ptr>\n-    : __ptr_traits_impl<_Ptr, typename _Ptr::element_type>\n-    { };\n-#endif\n-\n   /**\n    * @brief  Partial specialization for built-in pointers.\n    * @headerfile memory"}, {"sha": "93c64a353bde7dedb4a4a27cc5e3371027c6cb82", "filename": "libstdc++-v3/testsuite/20_util/pointer_traits/lwg3545.cc", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03cb9ed8dd603dbb77762ca948fc6381ba190731/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpointer_traits%2Flwg3545.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03cb9ed8dd603dbb77762ca948fc6381ba190731/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpointer_traits%2Flwg3545.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpointer_traits%2Flwg3545.cc?ref=03cb9ed8dd603dbb77762ca948fc6381ba190731", "patch": "@@ -99,3 +99,20 @@ static_assert( is_same<pointer<Ctraits>, clever_ptr<char>>::value, \"\" );\n static_assert( is_same<difference_type<Ctraits>, std::ptrdiff_t>::value, \"\" );\n static_assert( is_same<rebind<Ctraits>, clever_ptr<short>>::value, \"\" );\n static_assert( is_same<pointer_to<Ctraits>, clever_ptr<char>>::value, \"\" );\n+\n+#ifdef __cpp_concepts\n+struct ptr_base { };\n+\n+// Program-defined specialization must not be ambiguous with primary template.\n+template<typename P> requires std::derived_from<P, ptr_base>\n+struct std::pointer_traits<P>\n+{\n+  using element_type = int;\n+  using difference_type = long;\n+  using pointer = P;\n+};\n+\n+struct Ptr : ptr_base { using element_type = int; };\n+\n+using E = std::pointer_traits<Ptr>::element_type;\n+#endif"}]}