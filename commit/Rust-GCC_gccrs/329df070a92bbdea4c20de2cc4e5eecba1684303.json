{"sha": "329df070a92bbdea4c20de2cc4e5eecba1684303", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzI5ZGYwNzBhOTJiYmRlYTRjMjBkZTJjYzRlNWVlY2JhMTY4NDMwMw==", "commit": {"author": {"name": "Michael Matz", "email": "matz@suse.de", "date": "2012-08-02T12:24:52Z"}, "committer": {"name": "Michael Matz", "email": "matz@gcc.gnu.org", "date": "2012-08-02T12:24:52Z"}, "message": "tree-ssa-live.c (set_is_used): Return a bool.\n\n\t* tree-ssa-live.c (set_is_used): Return a bool.\n\t(mark_all_vars_used): Don't take data argument.\n\t(mark_all_vars_used_1): Adjust calls to above, merge handling\n\tof local and global vars.\n\t(remove_unused_scope_block_p): Don't take global_unused_vars,\n\tmerge handling of local and global vars.\n\t(remove_unused_locals): Don't allocate/fill/pass global_unused_vars,\n\tuse is_used_p for local and global vars.\n\nFrom-SVN: r190080", "tree": {"sha": "1d85d20158168d9096bdb479a8d4cd917e671475", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d85d20158168d9096bdb479a8d4cd917e671475"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/329df070a92bbdea4c20de2cc4e5eecba1684303", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/329df070a92bbdea4c20de2cc4e5eecba1684303", "html_url": "https://github.com/Rust-GCC/gccrs/commit/329df070a92bbdea4c20de2cc4e5eecba1684303", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/329df070a92bbdea4c20de2cc4e5eecba1684303/comments", "author": {"login": "susematz", "id": 4117296, "node_id": "MDQ6VXNlcjQxMTcyOTY=", "avatar_url": "https://avatars.githubusercontent.com/u/4117296?v=4", "gravatar_id": "", "url": "https://api.github.com/users/susematz", "html_url": "https://github.com/susematz", "followers_url": "https://api.github.com/users/susematz/followers", "following_url": "https://api.github.com/users/susematz/following{/other_user}", "gists_url": "https://api.github.com/users/susematz/gists{/gist_id}", "starred_url": "https://api.github.com/users/susematz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/susematz/subscriptions", "organizations_url": "https://api.github.com/users/susematz/orgs", "repos_url": "https://api.github.com/users/susematz/repos", "events_url": "https://api.github.com/users/susematz/events{/privacy}", "received_events_url": "https://api.github.com/users/susematz/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7cc434a3c1e4ac3b7855d6195c35b23ff6103b60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cc434a3c1e4ac3b7855d6195c35b23ff6103b60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cc434a3c1e4ac3b7855d6195c35b23ff6103b60"}], "stats": {"total": 91, "additions": 37, "deletions": 54}, "files": [{"sha": "07a1fdd1b56c7b6ebb7e64561eff47ab3a314054", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/329df070a92bbdea4c20de2cc4e5eecba1684303/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/329df070a92bbdea4c20de2cc4e5eecba1684303/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=329df070a92bbdea4c20de2cc4e5eecba1684303", "patch": "@@ -1,3 +1,14 @@\n+2012-08-02  Michael Matz  <matz@suse.de>\n+\n+\t* tree-ssa-live.c (set_is_used): Return a bool.\n+\t(mark_all_vars_used): Don't take data argument.\n+\t(mark_all_vars_used_1): Adjust calls to above, merge handling\n+\tof local and global vars.\n+\t(remove_unused_scope_block_p): Don't take global_unused_vars,\n+\tmerge handling of local and global vars.\n+\t(remove_unused_locals): Don't allocate/fill/pass global_unused_vars,\n+\tuse is_used_p for local and global vars.\n+\n 2012-08-02  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-flow.h (make_rename_temp): Remove."}, {"sha": "e4e6458d3222afb843bc4dbe5fd3d0ce1fa4fc4e", "filename": "gcc/tree-ssa-live.c", "status": "modified", "additions": 26, "deletions": 54, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/329df070a92bbdea4c20de2cc4e5eecba1684303/gcc%2Ftree-ssa-live.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/329df070a92bbdea4c20de2cc4e5eecba1684303/gcc%2Ftree-ssa-live.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-live.c?ref=329df070a92bbdea4c20de2cc4e5eecba1684303", "patch": "@@ -331,12 +331,13 @@ partition_view_bitmap (var_map map, bitmap only, bool want_bases)\n \n static bitmap usedvars;\n \n-/* Mark VAR as used, so that it'll be preserved during rtl expansion.  */\n+/* Mark VAR as used, so that it'll be preserved during rtl expansion.\n+   Returns true if VAR wasn't marked before.  */\n \n-static inline void\n+static inline bool\n set_is_used (tree var)\n {\n-  bitmap_set_bit (usedvars, DECL_UID (var));\n+  return bitmap_set_bit (usedvars, DECL_UID (var));\n }\n \n /* Return true if VAR is marked as used.  */\n@@ -347,14 +348,13 @@ is_used_p (tree var)\n   return bitmap_bit_p (usedvars, DECL_UID (var));\n }\n \n-static inline void mark_all_vars_used (tree *, void *data);\n+static inline void mark_all_vars_used (tree *);\n \n /* Helper function for mark_all_vars_used, called via walk_tree.  */\n \n static tree\n-mark_all_vars_used_1 (tree *tp, int *walk_subtrees, void *data)\n+mark_all_vars_used_1 (tree *tp, int *walk_subtrees, void *data ATTRIBUTE_UNUSED)\n {\n-  bitmap global_unused_vars = (bitmap)data;\n   tree t = *tp;\n   enum tree_code_class c = TREE_CODE_CLASS (TREE_CODE (t));\n   tree b;\n@@ -370,9 +370,9 @@ mark_all_vars_used_1 (tree *tp, int *walk_subtrees, void *data)\n      fields do not contain vars.  */\n   if (TREE_CODE (t) == TARGET_MEM_REF)\n     {\n-      mark_all_vars_used (&TMR_BASE (t), data);\n-      mark_all_vars_used (&TMR_INDEX (t), data);\n-      mark_all_vars_used (&TMR_INDEX2 (t), data);\n+      mark_all_vars_used (&TMR_BASE (t));\n+      mark_all_vars_used (&TMR_INDEX (t));\n+      mark_all_vars_used (&TMR_INDEX2 (t));\n       *walk_subtrees = 0;\n       return NULL;\n     }\n@@ -381,16 +381,10 @@ mark_all_vars_used_1 (tree *tp, int *walk_subtrees, void *data)\n      eliminated as unused.  */\n   if (TREE_CODE (t) == VAR_DECL)\n     {\n-      /* Global vars do not have a var-annotation so their use is tracked\n-         with the global_unused_vars bitmap.  Also walk their initializer\n-\t when they are first recognized as used.  */\n-      if (is_global_var (t))\n-\t{\n-\t  if (bitmap_clear_bit (global_unused_vars, DECL_UID (t)))\n-\t    mark_all_vars_used (&DECL_INITIAL (t), data);\n-\t}\n-      else\n-\tset_is_used (t);\n+      /* When a global var becomes used for the first time also walk its\n+         initializer (non global ones don't have any).  */\n+      if (set_is_used (t) && is_global_var (t))\n+\tmark_all_vars_used (&DECL_INITIAL (t));\n     }\n   /* remove_unused_scope_block_p requires information about labels\n      which are not DECL_IGNORED_P to tell if they might be used in the IL.  */\n@@ -435,7 +429,7 @@ mark_scope_block_unused (tree scope)\n    done by the inliner.  */\n \n static bool\n-remove_unused_scope_block_p (tree scope, bitmap global_unused_vars)\n+remove_unused_scope_block_p (tree scope)\n {\n   tree *t, *next;\n   bool unused = !TREE_USED (scope);\n@@ -475,9 +469,7 @@ remove_unused_scope_block_p (tree scope, bitmap global_unused_vars)\n \t info about optimized-out variables in the scope blocks.\n \t Exception are the scope blocks not containing any instructions\n \t at all so user can't get into the scopes at first place.  */\n-      else if ((is_global_var (*t)\n-\t\t&& !bitmap_bit_p (global_unused_vars, DECL_UID (*t)))\n-\t       || is_used_p (*t))\n+      else if (is_used_p (*t))\n \tunused = false;\n       else if (TREE_CODE (*t) == LABEL_DECL && TREE_USED (*t))\n \t/* For labels that are still used in the IL, the decision to\n@@ -522,7 +514,7 @@ remove_unused_scope_block_p (tree scope, bitmap global_unused_vars)\n     }\n \n   for (t = &BLOCK_SUBBLOCKS (scope); *t ;)\n-    if (remove_unused_scope_block_p (*t, global_unused_vars))\n+    if (remove_unused_scope_block_p (*t))\n       {\n \tif (BLOCK_SUBBLOCKS (*t))\n \t  {\n@@ -603,9 +595,9 @@ remove_unused_scope_block_p (tree scope, bitmap global_unused_vars)\n    eliminated during the tree->rtl conversion process.  */\n \n static inline void\n-mark_all_vars_used (tree *expr_p, void *data)\n+mark_all_vars_used (tree *expr_p)\n {\n-  walk_tree (expr_p, mark_all_vars_used_1, data, NULL);\n+  walk_tree (expr_p, mark_all_vars_used_1, NULL, NULL);\n }\n \n \n@@ -693,8 +685,7 @@ remove_unused_locals (void)\n {\n   basic_block bb;\n   tree var;\n-  bitmap global_unused_vars = NULL;\n-  unsigned srcidx, dstidx, num, ix;\n+  unsigned srcidx, dstidx, num;\n   bool have_local_clobbers = false;\n \n   /* Removing declarations from lexical blocks when not optimizing is\n@@ -709,13 +700,6 @@ remove_unused_locals (void)\n \n   usedvars = BITMAP_ALLOC (NULL);\n \n-  /* Assume all globals in local decls are unused.  */\n-  global_unused_vars = BITMAP_ALLOC (NULL);\n-  FOR_EACH_LOCAL_DECL (cfun, ix, var)\n-    if (TREE_CODE (var) == VAR_DECL\n-\t&& is_global_var (var))\n-      bitmap_set_bit (global_unused_vars, DECL_UID (var));\n-\n   /* Walk the CFG marking all referenced symbols.  */\n   FOR_EACH_BB (bb)\n     {\n@@ -743,8 +727,7 @@ remove_unused_locals (void)\n \t    TREE_USED (b) = true;\n \n \t  for (i = 0; i < gimple_num_ops (stmt); i++)\n-\t    mark_all_vars_used (gimple_op_ptr (gsi_stmt (gsi), i),\n-\t\t\t\tglobal_unused_vars);\n+\t    mark_all_vars_used (gimple_op_ptr (gsi_stmt (gsi), i));\n \t}\n \n       for (gsi = gsi_start_phis (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n@@ -758,12 +741,12 @@ remove_unused_locals (void)\n \t    continue;\n \n \t  def = gimple_phi_result (phi);\n-\t  mark_all_vars_used (&def, global_unused_vars);\n+\t  mark_all_vars_used (&def);\n \n           FOR_EACH_PHI_ARG (arg_p, phi, i, SSA_OP_ALL_USES)\n             {\n \t      tree arg = USE_FROM_PTR (arg_p);\n-\t      mark_all_vars_used (&arg, global_unused_vars);\n+\t      mark_all_vars_used (&arg);\n             }\n         }\n \n@@ -793,10 +776,7 @@ remove_unused_locals (void)\n \t\tlhs = get_base_address (lhs);\n \t\tif (TREE_CODE (lhs) == SSA_NAME)\n \t\t  lhs = SSA_NAME_VAR (lhs);\n-\t\tif (TREE_CODE (lhs) == VAR_DECL\n-\t\t    && ((is_global_var (lhs)\n-\t\t\t && bitmap_bit_p (global_unused_vars, DECL_UID (lhs)))\n-\t\t\t|| (!is_global_var (lhs) && !is_used_p (lhs))))\n+\t\tif (TREE_CODE (lhs) == VAR_DECL && !is_used_p (lhs))\n \t\t  {\n \t\t    unlink_stmt_vdef (stmt);\n \t\t    gsi_remove (&gsi, true);\n@@ -812,20 +792,14 @@ remove_unused_locals (void)\n \n   cfun->has_local_explicit_reg_vars = false;\n \n-  /* Remove unmarked local and global vars from local_decls\n-     and referenced vars.  */\n+  /* Remove unmarked local and global vars from local_decls.  */\n   num = VEC_length (tree, cfun->local_decls);\n   for (srcidx = 0, dstidx = 0; srcidx < num; srcidx++)\n     {\n       var = VEC_index (tree, cfun->local_decls, srcidx);\n       if (TREE_CODE (var) == VAR_DECL)\n \t{\n-\t  if (is_global_var (var))\n-\t    {\n-\t      if (bitmap_bit_p (global_unused_vars, DECL_UID (var)))\n-\t\tcontinue;\n-\t    }\n-\t  else if (!is_used_p (var))\n+\t  if (!is_used_p (var))\n \t    {\n \t      if (cfun->nonlocal_goto_save_area\n \t\t  && TREE_OPERAND (cfun->nonlocal_goto_save_area, 0) == var)\n@@ -845,10 +819,8 @@ remove_unused_locals (void)\n   if (dstidx != num)\n     VEC_truncate (tree, cfun->local_decls, dstidx);\n \n-  remove_unused_scope_block_p (DECL_INITIAL (current_function_decl),\n-\t\t\t       global_unused_vars);\n+  remove_unused_scope_block_p (DECL_INITIAL (current_function_decl));\n \n-  BITMAP_FREE (global_unused_vars);\n   BITMAP_FREE (usedvars);\n \n   if (dump_file && (dump_flags & TDF_DETAILS))"}]}