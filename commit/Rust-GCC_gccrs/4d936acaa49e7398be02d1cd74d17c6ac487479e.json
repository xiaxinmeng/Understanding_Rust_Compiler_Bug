{"sha": "4d936acaa49e7398be02d1cd74d17c6ac487479e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGQ5MzZhY2FhNDllNzM5OGJlMDJkMWNkNzRkMTdjNmFjNDg3NDc5ZQ==", "commit": {"author": {"name": "Janis Johnson", "email": "janis187@us.ibm.com", "date": "2009-03-17T17:35:55Z"}, "committer": {"name": "Janis Johnson", "email": "janis@gcc.gnu.org", "date": "2009-03-17T17:35:55Z"}, "message": "re PR testsuite/38526 (WARNING: Could not compile gcc.dg/compat/struct-layout-1 generator)\n\ngcc/\n\tPR testsuite/38526\n\t* Makefile.in (site.exp): Rename TEST_GCC_EXEC_PREFIX and comment\n\tits use.\n\t(check-%): Don't set GCC_EXEC_PREFIX when invoking runtest.\n\t(check-parallel-%): Ditto.\n\t(check-consistency): Ditto.\ntestsuite/\n\tPR testsuite/38526\n\t* lib/target-libpath.exp (set_ld_library_path_env_vars): Save\n\texisting GCC_EXEC_PREFIX, set to TEST_GCC_EXEC_PREFIX if that\n\tis defined.\n\t(restore_ld_library_path_env_vars): Restore GCC_EXEC_PREFIX to\n\tits original value, or unset if it was not defined.\n\t* gcc.dg/compat/struct-layout-1.exp: Use set/restore library\n\tpath procs around use of HOSTCC.\n\t* g++.dg/compat/struct-layout-1.exp: Ditto.\n\t* objc.dg/gnu-encoding/gnu-encoding.exp: Ditto.\n\nFrom-SVN: r144908", "tree": {"sha": "6df853bcedd0502074c26798cdab75a06af6912c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6df853bcedd0502074c26798cdab75a06af6912c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d936acaa49e7398be02d1cd74d17c6ac487479e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d936acaa49e7398be02d1cd74d17c6ac487479e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d936acaa49e7398be02d1cd74d17c6ac487479e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d936acaa49e7398be02d1cd74d17c6ac487479e/comments", "author": null, "committer": null, "parents": [{"sha": "4e9b2e504ea95567611ee528794e6eac2098264e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e9b2e504ea95567611ee528794e6eac2098264e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e9b2e504ea95567611ee528794e6eac2098264e"}], "stats": {"total": 114, "additions": 68, "deletions": 46}, "files": [{"sha": "8e08d7089c5e74af915b2afb2dc88236b6b811a0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d936acaa49e7398be02d1cd74d17c6ac487479e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d936acaa49e7398be02d1cd74d17c6ac487479e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4d936acaa49e7398be02d1cd74d17c6ac487479e", "patch": "@@ -1,3 +1,12 @@\n+2009-03-17  Janis Johnson  <janis187@us.ibm.com>\n+\n+\tPR testsuite/38526\n+\t* Makefile.in (site.exp): Rename TEST_GCC_EXEC_PREFIX and comment\n+\tits use.\n+\t(check-%): Don't set GCC_EXEC_PREFIX when invoking runtest.\n+\t(check-parallel-%): Ditto.\n+\t(check-consistency): Ditto.\n+\n 2009-03-17  Kai Tietz  <kai.tietz@onevision.com>\n \n \t* ipa-struct-reorg.c (create_general_new_stmt): Initialize"}, {"sha": "be5634f65474a2f66ea51ac6691a48b075be214c", "filename": "gcc/Makefile.in", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d936acaa49e7398be02d1cd74d17c6ac487479e/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d936acaa49e7398be02d1cd74d17c6ac487479e/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=4d936acaa49e7398be02d1cd74d17c6ac487479e", "patch": "@@ -4418,9 +4418,13 @@ site.exp: ./config.status Makefile\n \t@echo \"set CXXFLAGS \\\"\\\"\" >> ./tmp0\n \t@echo \"set HOSTCC \\\"$(CC)\\\"\" >> ./tmp0\n \t@echo \"set HOSTCFLAGS \\\"$(CFLAGS)\\\"\" >> ./tmp0\n+# When running the tests we set GCC_EXEC_PREFIX to the install tree so that\n+# files that have already been installed there will be found.  The -B option\n+# overrides it, so use of GCC_EXEC_PREFIX will not result in using GCC files\n+# from the install tree.\n+\t@echo \"set TEST_GCC_EXEC_PREFIX \\\"$(libdir)/gcc/\\\"\" >> ./tmp0\n \t@echo \"set TESTING_IN_BUILD_TREE 1\" >> ./tmp0\n \t@echo \"set HAVE_LIBSTDCXX_V3 1\" >> ./tmp0\n-\t@echo \"set GCC_EXEC_PREFIX \\\"$(libdir)/gcc/\\\"\" >> ./tmp0\n # If newlib has been configured, we need to pass -B to gcc so it can find\n # newlib's crt0.o if it exists.  This will cause a \"path prefix not used\"\n # message if it doesn't, but the testsuite is supposed to ignore the message -\n@@ -4505,7 +4509,6 @@ $(filter-out $(lang_checks_parallelized),$(lang_checks)): check-% : site.exp\n \tif [ -f $${rootme}/../expect/expect ] ; then  \\\n \t   TCL_LIBRARY=`cd .. ; cd $${srcdir}/../tcl/library ; ${PWD_COMMAND}` ; \\\n \t    export TCL_LIBRARY ; fi ; \\\n-\tGCC_EXEC_PREFIX=\"$(libdir)/gcc/\" ; export GCC_EXEC_PREFIX ; \\\n \t$(RUNTEST) --tool $* $(RUNTESTFLAGS))\n \n $(patsubst %,%-subtargets,$(filter-out $(lang_checks_parallelized),$(lang_checks))): check-%-subtargets:\n@@ -4593,7 +4596,6 @@ check-parallel-% : site.exp\n \tif [ -f $${rootme}/../expect/expect ] ; then  \\\n \t   TCL_LIBRARY=`cd .. ; cd $${srcdir}/../tcl/library ; ${PWD_COMMAND}` ; \\\n \t    export TCL_LIBRARY ; fi ; \\\n-\tGCC_EXEC_PREFIX=\"$(libdir)/gcc/\" ; export GCC_EXEC_PREFIX ; \\\n \truntestflags= ; \\\n \tif [ -n \"$(check_p_subno)\" ] ; then \\\n \t  runtestflags=\"$(check_p_subwork)\"; \\\n@@ -4618,7 +4620,6 @@ check-consistency: testsuite/site.exp\n \tif [ -f $${rootme}/../expect/expect ] ; then  \\\n \t   TCL_LIBRARY=`cd .. ; cd $${srcdir}/../tcl/library ; ${PWD_COMMAND}` ; \\\n \t   export TCL_LIBRARY ; fi ; \\\n-\tGCC_EXEC_PREFIX=\"$(libdir)/gcc/\" ; export GCC_EXEC_PREFIX ; \\\n \t$(RUNTEST) --tool consistency $(RUNTESTFLAGS)\n \n # QMTest targets"}, {"sha": "f91e99c9a0feb82198f4a81520bf11a97ea716c8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d936acaa49e7398be02d1cd74d17c6ac487479e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d936acaa49e7398be02d1cd74d17c6ac487479e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4d936acaa49e7398be02d1cd74d17c6ac487479e", "patch": "@@ -1,3 +1,16 @@\n+2009-03-17  Janis Johnson  <janis187@us.ibm.com>\n+\n+\tPR testsuite/38526\n+\t* lib/target-libpath.exp (set_ld_library_path_env_vars): Save\n+\texisting GCC_EXEC_PREFIX, set to TEST_GCC_EXEC_PREFIX if that\n+\tis defined.\n+\t(restore_ld_library_path_env_vars): Restore GCC_EXEC_PREFIX to\n+\tits original value, or unset if it was not defined.\n+\t* gcc.dg/compat/struct-layout-1.exp: Use set/restore library\n+\tpath procs around use of HOSTCC.\n+\t* g++.dg/compat/struct-layout-1.exp: Ditto.\n+\t* objc.dg/gnu-encoding/gnu-encoding.exp: Ditto.\n+\n 2009-03-16  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* gcc.target/x86_64/abi/callabi/func-indirect.c (main): Return 0."}, {"sha": "7fa89470e16e1a67246ff762cfbe1d8b90fda5e4", "filename": "gcc/testsuite/g++.dg/compat/struct-layout-1.exp", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d936acaa49e7398be02d1cd74d17c6ac487479e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fstruct-layout-1.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d936acaa49e7398be02d1cd74d17c6ac487479e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fstruct-layout-1.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fstruct-layout-1.exp?ref=4d936acaa49e7398be02d1cd74d17c6ac487479e", "patch": "@@ -129,20 +129,11 @@ set generator_src \"$generator_src $srcdir/$subdir/../../gcc.dg/compat/generate-r\n set generator_src \"$generator_src $srcdir/$subdir/../../gcc.dg/compat/generate-random_r.c\"\n set generator_cmd \"-o $generator $generator_src\"\n \n-# Temporarily unset GCC_EXEC_PREFIX from environment, as that might\n-# confuse the $HOSTCC.\n-set orig_gcc_exec_prefix_saved 0\n-if [info exists env(GCC_EXEC_PREFIX)] {\n-     set orig_gcc_exec_prefix \"$env(GCC_EXEC_PREFIX)\"\n-     set orig_gcc_exec_prefix_saved 1\n-     unsetenv GCC_EXEC_PREFIX\n-}\n+# Temporarily switch to the environment of the host compiler.\n+restore_ld_library_path_env_vars\n set status [remote_exec build \"$HOSTCC $HOSTCFLAGS $generator_cmd\"]\n set status [lindex $status 0]\n-if { $orig_gcc_exec_prefix_saved } {\n-     set orig_gcc_exec_prefix_saved 0\n-     setenv GCC_EXEC_PREFIX \"$orig_gcc_exec_prefix\"\n-}\n+set_ld_library_path_env_vars\n if { $status == 0 } then {\n     file delete -force $tstobjdir\n     file mkdir $tstobjdir"}, {"sha": "e541f6ed3adaed97ceae2d2b85014f31d1d59eb8", "filename": "gcc/testsuite/gcc.dg/compat/struct-layout-1.exp", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d936acaa49e7398be02d1cd74d17c6ac487479e/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-layout-1.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d936acaa49e7398be02d1cd74d17c6ac487479e/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-layout-1.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-layout-1.exp?ref=4d936acaa49e7398be02d1cd74d17c6ac487479e", "patch": "@@ -43,6 +43,7 @@ global compat_have_dfp\n # Load procedures from common libraries. \n load_lib standard.exp\n load_lib gcc.exp\n+load_lib target-libpath.exp\n \n # Load the language-dependent compabibility support procedures.\n load_lib c-compat.exp\n@@ -90,20 +91,12 @@ set generator_src \"$generator_src $srcdir/$subdir/generate-random.c\"\n set generator_src \"$generator_src $srcdir/$subdir/generate-random_r.c\"\n set generator_cmd \"-o $generator $skip_dfp $generator_src\"\n \n-# Temporarily unset GCC_EXEC_PREFIX from environment, as that might\n-# confuse the $HOSTCC.\n-set orig_gcc_exec_prefix_saved 0\n-if [info exists env(GCC_EXEC_PREFIX)] {\n-     set orig_gcc_exec_prefix \"$env(GCC_EXEC_PREFIX)\"\n-     set orig_gcc_exec_prefix_saved 1\n-     unsetenv GCC_EXEC_PREFIX\n-}\n+# Temporarily switch to the environment for the host compiler.\n+restore_ld_library_path_env_vars\n set status [remote_exec build \"$HOSTCC $HOSTCFLAGS $generator_cmd\"]\n set status [lindex $status 0]\n-if { $orig_gcc_exec_prefix_saved } {\n-     set orig_gcc_exec_prefix_saved 0\n-     setenv GCC_EXEC_PREFIX \"$orig_gcc_exec_prefix\"\n-}\n+set_ld_library_path_env_vars\n+\n if { $status == 0 } then {\n     file delete -force $tstobjdir\n     file mkdir $tstobjdir"}, {"sha": "760f3751aa168546f1b1023ade7d6c671990d3d3", "filename": "gcc/testsuite/lib/target-libpath.exp", "status": "modified", "additions": 29, "deletions": 6, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d936acaa49e7398be02d1cd74d17c6ac487479e/gcc%2Ftestsuite%2Flib%2Ftarget-libpath.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d936acaa49e7398be02d1cd74d17c6ac487479e/gcc%2Ftestsuite%2Flib%2Ftarget-libpath.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-libpath.exp?ref=4d936acaa49e7398be02d1cd74d17c6ac487479e", "patch": "@@ -25,6 +25,8 @@ set orig_ld_library64_path_saved 0\n set orig_ld_library_path_32_saved 0\n set orig_ld_library_path_64_saved 0\n set orig_dyld_library_path_saved 0\n+set orig_gcc_exec_prefix_saved 0\n+set orig_gcc_exec_prefix_checked 0\n \n \n #######################################\n@@ -42,6 +44,8 @@ proc set_ld_library_path_env_vars { } {\n   global orig_ld_library_path_32_saved\n   global orig_ld_library_path_64_saved\n   global orig_dyld_library_path_saved\n+  global orig_gcc_exec_prefix_saved\n+  global orig_gcc_exec_prefix_checked\n   global orig_ld_library_path\n   global orig_ld_run_path\n   global orig_shlib_path\n@@ -50,11 +54,23 @@ proc set_ld_library_path_env_vars { } {\n   global orig_ld_library_path_32\n   global orig_ld_library_path_64\n   global orig_dyld_library_path\n-  global GCC_EXEC_PREFIX\n+  global orig_gcc_exec_prefix\n+  global TEST_GCC_EXEC_PREFIX\n+  global env\n \n-  # Set the relocated compiler prefix, but only if the user hasn't specified one.\n-  if { [info exists GCC_EXEC_PREFIX] && ![info exists env(GCC_EXEC_PREFIX)] } {\n-    setenv GCC_EXEC_PREFIX \"$GCC_EXEC_PREFIX\"\n+  # Save the original GCC_EXEC_PREFIX.\n+  if { $orig_gcc_exec_prefix_checked == 0 } {\n+    if [info exists env(GCC_EXEC_PREFIX)] {\n+      set orig_gcc_exec_prefix \"$env(GCC_EXEC_PREFIX)\"\n+      set orig_gcc_exec_prefix_saved 1\n+    }\n+    set orig_gcc_exec_prefix_checked 1\n+  }\n+\n+  # Set GCC_EXEC_PREFIX for the compiler under test to pick up files not in\n+  # the build tree from a specified location (normally the install tree).\n+  if [info exists env(TEST_GCC_EXEC_PREFIX)] {\n+    setenv GCC_EXEC_PREFIX \"$TEST_GCC_EXEC_PREFIX\"\n   }\n \n   # Setting the ld library path causes trouble when testing cross-compilers.\n@@ -63,8 +79,6 @@ proc set_ld_library_path_env_vars { } {\n   }\n \n   if { $orig_environment_saved == 0 } {\n-    global env\n-\n     set orig_environment_saved 1\n \n     # Save the original environment.\n@@ -187,6 +201,7 @@ proc restore_ld_library_path_env_vars { } {\n   global orig_ld_library_path_32_saved\n   global orig_ld_library_path_64_saved\n   global orig_dyld_library_path_saved\n+  global orig_gcc_exec_prefix_saved\n   global orig_ld_library_path\n   global orig_ld_run_path\n   global orig_shlib_path\n@@ -195,11 +210,19 @@ proc restore_ld_library_path_env_vars { } {\n   global orig_ld_library_path_32\n   global orig_ld_library_path_64\n   global orig_dyld_library_path\n+  global orig_gcc_exec_prefix\n+  global env\n \n   if { $orig_environment_saved == 0 } {\n     return\n   }\n \n+  if { $orig_gcc_exec_prefix_saved } {\n+    setenv GCC_EXEC_PREFIX \"$orig_gcc_exec_prefix\"\n+  } elseif [info exists env(GCC_EXEC_PREFIX)] {\n+    unsetenv GCC_EXEC_PREFIX\n+  }\n+\n   if { $orig_ld_library_path_saved } {\n     setenv LD_LIBRARY_PATH \"$orig_ld_library_path\"\n   } elseif [info exists env(LD_LIBRARY_PATH)] {"}, {"sha": "b137b751ae06d1549a84d6a38c1733af8b535d52", "filename": "gcc/testsuite/objc.dg/gnu-encoding/gnu-encoding.exp", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d936acaa49e7398be02d1cd74d17c6ac487479e/gcc%2Ftestsuite%2Fobjc.dg%2Fgnu-encoding%2Fgnu-encoding.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d936acaa49e7398be02d1cd74d17c6ac487479e/gcc%2Ftestsuite%2Fobjc.dg%2Fgnu-encoding%2Fgnu-encoding.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fgnu-encoding%2Fgnu-encoding.exp?ref=4d936acaa49e7398be02d1cd74d17c6ac487479e", "patch": "@@ -17,6 +17,7 @@\n \n # Load support procs.\n load_lib objc-dg.exp\n+load_lib target-libpath.exp\n \n # If a testcase doesn't have special options, use these.\n global DEFAULT_CFLAGS\n@@ -37,20 +38,11 @@ set generator_src \"$srcdir/$subdir/struct-layout-encoding-1_generate.c\"\n set generator_src \"$generator_src $srcdir/$subdir/generate-random.c\"\n set generator_src \"$generator_src $srcdir/$subdir/generate-random_r.c\"\n set generator_cmd \"-o $generator $generator_src\"\n-# Temporarily unset GCC_EXEC_PREFIX from environment, as that might\n-# confuse the $HOSTCC.\n-set orig_gcc_exec_prefix_saved 0\n-if [info exists env(GCC_EXEC_PREFIX)] {\n-     set orig_gcc_exec_prefix \"$env(GCC_EXEC_PREFIX)\"\n-     set orig_gcc_exec_prefix_saved 1\n-     unsetenv GCC_EXEC_PREFIX\n-}\n+# Temporarily switch to the environment of the host compiler.\n+restore_ld_library_path_env_vars\n set status [remote_exec build \"$HOSTCC $HOSTCFLAGS $generator_cmd\"]\n set status [lindex $status 0]\n-if { $orig_gcc_exec_prefix_saved } {\n-     set orig_gcc_exec_prefix_saved 0\n-     setenv GCC_EXEC_PREFIX \"$orig_gcc_exec_prefix\"\n-}\n+set_ld_library_path_env_vars\n if { $status == 0 } then {\n     file delete -force $tstobjdir\n     file mkdir $tstobjdir"}]}