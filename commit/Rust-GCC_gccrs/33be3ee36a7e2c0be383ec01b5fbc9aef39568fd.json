{"sha": "33be3ee36a7e2c0be383ec01b5fbc9aef39568fd", "node_id": "C_kwDOANBUbNoAKDMzYmUzZWUzNmE3ZTJjMGJlMzgzZWMwMWI1ZmJjOWFlZjM5NTY4ZmQ", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-12-13T15:55:21Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-12-13T15:55:21Z"}, "message": "vect-patterns: Fix up vect_recog_rotate_pattern [PR108064]\n\nSince vect_recog_rotate_pattern has been extended to work also\non signed types in r13-1100 we miscompile the testcase below.\nvect_recog_rotate_pattern actually emits correct scalar code into\nthe pattern def sequence (in particular cast to utype, doing the\n2 shifts in utype so that the right shift is logical and not arithmetic,\nor and then cast back to the signed type), but it didn't supply vectype\nfor most of those pattern statements, which means that the generic handling\nfills it up later with the vectype provided by vect_recog_rotate_pattern.\nThe problem is that it is vectype of the result of the whole pattern,\ni.e. vector of signed values in this case, while the conversion to utype,\n2 shifts and or (everything with utype lhs in scalar code) should have\nuvectype as STMT_VINFO_VECTYPE.\n\n2022-12-13  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/108064\n\t* tree-vect-patterns.cc (vect_recog_rotate_pattern): Pass uvectype\n\tas 4th argument to append_pattern_def_seq for statements with lhs\n\twith utype type.\n\n\t* gcc.c-torture/execute/pr108064.c: New test.", "tree": {"sha": "54a51e8ca48643355721638e9971b8dc3c4f79ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54a51e8ca48643355721638e9971b8dc3c4f79ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/33be3ee36a7e2c0be383ec01b5fbc9aef39568fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33be3ee36a7e2c0be383ec01b5fbc9aef39568fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33be3ee36a7e2c0be383ec01b5fbc9aef39568fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33be3ee36a7e2c0be383ec01b5fbc9aef39568fd/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f4634fb82d5670183d0ee42de9dae3b55ab5087", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f4634fb82d5670183d0ee42de9dae3b55ab5087", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f4634fb82d5670183d0ee42de9dae3b55ab5087"}], "stats": {"total": 38, "additions": 33, "deletions": 5}, "files": [{"sha": "a7170bcf17bf0108f587d532b17f17b20e01ba06", "filename": "gcc/testsuite/gcc.c-torture/execute/pr108064.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33be3ee36a7e2c0be383ec01b5fbc9aef39568fd/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr108064.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33be3ee36a7e2c0be383ec01b5fbc9aef39568fd/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr108064.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr108064.c?ref=33be3ee36a7e2c0be383ec01b5fbc9aef39568fd", "patch": "@@ -0,0 +1,28 @@\n+/* PR tree-optimization/108064 */\n+\n+static inline short\n+foo (short value)\n+{\n+  return ((value >> 8) & 0xff) | ((value & 0xff) << 8);\n+}\n+\n+__attribute__((noipa))\n+void\n+bar (short *d, const short *s)\n+{\n+  for (unsigned long i = 0; i < 4; i++)\n+    d[i] = foo (s[i]);\n+}\n+\n+int\n+main ()\n+{\n+  short a[4] __attribute__((aligned (16))) = { 0xff, 0, 0, 0 };\n+  short b[4] __attribute__((aligned (16)));\n+  short c[4] __attribute__((aligned (16)));\n+\n+  bar (b, a);\n+  bar (c, b);\n+  if (a[0] != c[0])\n+    __builtin_abort ();\n+}"}, {"sha": "32f95a7a40979f4503446404b503ec84d5837521", "filename": "gcc/tree-vect-patterns.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33be3ee36a7e2c0be383ec01b5fbc9aef39568fd/gcc%2Ftree-vect-patterns.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33be3ee36a7e2c0be383ec01b5fbc9aef39568fd/gcc%2Ftree-vect-patterns.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.cc?ref=33be3ee36a7e2c0be383ec01b5fbc9aef39568fd", "patch": "@@ -3113,7 +3113,7 @@ vect_recog_rotate_pattern (vec_info *vinfo,\n     {\n       def = vect_recog_temp_ssa_var (utype, NULL);\n       def_stmt = gimple_build_assign (def, NOP_EXPR, oprnd0);\n-      append_pattern_def_seq (vinfo, stmt_vinfo, def_stmt);\n+      append_pattern_def_seq (vinfo, stmt_vinfo, def_stmt, uvectype);\n       oprnd0 = def;\n     }\n \n@@ -3137,7 +3137,7 @@ vect_recog_rotate_pattern (vec_info *vinfo,\n     {\n       def = vect_recog_temp_ssa_var (utype, NULL);\n       def_stmt = gimple_build_assign (def, NOP_EXPR, oprnd1);\n-      append_pattern_def_seq (vinfo, stmt_vinfo, def_stmt);\n+      append_pattern_def_seq (vinfo, stmt_vinfo, def_stmt, uvectype);\n     }\n   stype = TREE_TYPE (def);\n \n@@ -3185,13 +3185,13 @@ vect_recog_rotate_pattern (vec_info *vinfo,\n   def_stmt = gimple_build_assign (var1, rhs_code == LROTATE_EXPR\n \t\t\t\t\t? LSHIFT_EXPR : RSHIFT_EXPR,\n \t\t\t\t  oprnd0, def);\n-  append_pattern_def_seq (vinfo, stmt_vinfo, def_stmt);\n+  append_pattern_def_seq (vinfo, stmt_vinfo, def_stmt, uvectype);\n \n   var2 = vect_recog_temp_ssa_var (utype, NULL);\n   def_stmt = gimple_build_assign (var2, rhs_code == LROTATE_EXPR\n \t\t\t\t\t? RSHIFT_EXPR : LSHIFT_EXPR,\n \t\t\t\t  oprnd0, def2);\n-  append_pattern_def_seq (vinfo, stmt_vinfo, def_stmt);\n+  append_pattern_def_seq (vinfo, stmt_vinfo, def_stmt, uvectype);\n \n   /* Pattern detected.  */\n   vect_pattern_detected (\"vect_recog_rotate_pattern\", last_stmt);\n@@ -3202,7 +3202,7 @@ vect_recog_rotate_pattern (vec_info *vinfo,\n \n   if (!useless_type_conversion_p (type, utype))\n     {\n-      append_pattern_def_seq (vinfo, stmt_vinfo, pattern_stmt);\n+      append_pattern_def_seq (vinfo, stmt_vinfo, pattern_stmt, uvectype);\n       tree result = vect_recog_temp_ssa_var (type, NULL);\n       pattern_stmt = gimple_build_assign (result, NOP_EXPR, var);\n     }"}]}