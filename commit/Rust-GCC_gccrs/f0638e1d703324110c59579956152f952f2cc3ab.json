{"sha": "f0638e1d703324110c59579956152f952f2cc3ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjA2MzhlMWQ3MDMzMjQxMTBjNTk1Nzk5NTYxNTJmOTUyZjJjYzNhYg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-05-21T22:00:14Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-05-21T22:00:14Z"}, "message": "gimplify.c (mostly_copy_tree_r): Don't attempt to copy decls.\n\n        * gimplify.c (mostly_copy_tree_r): Don't attempt to copy decls.\n        (copy_if_shared_r): Don't copy decls, types, constants, BINDs.\n        Don't mark VA_ARG_EXPRs volatile here.\n        (gimplify_modify_expr): Unshare TYPE_SIZE_UNIT.\n\nFrom-SVN: r82110", "tree": {"sha": "c03718137ee7eaf59dad196db1c3eca34b21c143", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c03718137ee7eaf59dad196db1c3eca34b21c143"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f0638e1d703324110c59579956152f952f2cc3ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0638e1d703324110c59579956152f952f2cc3ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0638e1d703324110c59579956152f952f2cc3ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0638e1d703324110c59579956152f952f2cc3ab/comments", "author": null, "committer": null, "parents": [{"sha": "11670eebf3c9844fc34793789397fe05d60b4a77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11670eebf3c9844fc34793789397fe05d60b4a77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11670eebf3c9844fc34793789397fe05d60b4a77"}], "stats": {"total": 51, "additions": 37, "deletions": 14}, "files": [{"sha": "519605859bd3374ea8345ede5d90e36363427443", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0638e1d703324110c59579956152f952f2cc3ab/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0638e1d703324110c59579956152f952f2cc3ab/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f0638e1d703324110c59579956152f952f2cc3ab", "patch": "@@ -1,3 +1,10 @@\n+2004-05-21  Richard Henderson  <rth@redhat.com>\n+\n+\t* gimplify.c (mostly_copy_tree_r): Don't attempt to copy decls.\n+\t(copy_if_shared_r): Don't copy decls, types, constants, BINDs.\n+\tDon't mark VA_ARG_EXPRs volatile here.\n+\t(gimplify_modify_expr): Unshare TYPE_SIZE_UNIT.\n+\n 2004-05-21  Richard Henderson  <rth@redhat.com>\n \n \t* Makefile.in (tree-dump.o): Depend on tree-iterator.h."}, {"sha": "b081e5e619b0897c3497b2a6293c1ce61edb4744", "filename": "gcc/gimplify.c", "status": "modified", "additions": 30, "deletions": 14, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0638e1d703324110c59579956152f952f2cc3ab/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0638e1d703324110c59579956152f952f2cc3ab/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=f0638e1d703324110c59579956152f952f2cc3ab", "patch": "@@ -588,8 +588,9 @@ static tree\n mostly_copy_tree_r (tree *tp, int *walk_subtrees, void *data)\n {\n   enum tree_code code = TREE_CODE (*tp);\n-  /* Don't unshare types, constants and SAVE_EXPR nodes.  */\n+  /* Don't unshare types, decls, constants and SAVE_EXPR nodes.  */\n   if (TREE_CODE_CLASS (code) == 't'\n+      || TREE_CODE_CLASS (code) == 'd'\n       || TREE_CODE_CLASS (code) == 'c'\n       || code == SAVE_EXPR || code == TARGET_EXPR\n       /* We can't do anything sensible with a BLOCK used as an expression,\n@@ -632,26 +633,40 @@ static tree\n copy_if_shared_r (tree *tp, int *walk_subtrees ATTRIBUTE_UNUSED,\n \t\t  void *data ATTRIBUTE_UNUSED)\n {\n+  tree t = *tp;\n+  enum tree_code code = TREE_CODE (t);\n+\n+  /* Skip types, decls, and constants.  */\n+  if (TREE_CODE_CLASS (code) == 't'\n+      || TREE_CODE_CLASS (code) == 'd'\n+      || TREE_CODE_CLASS (code) == 'c')\n+    *walk_subtrees = 0;\n+\n+  /* Special-case BIND_EXPR.  We should never be copying these, therefore\n+     we can omit examining BIND_EXPR_VARS.  Which also avoids problems with\n+     double processing of the DECL_INITIAL, which could be seen via both\n+     the BIND_EXPR_VARS and a DECL_STMT.  */\n+  else if (code == BIND_EXPR)\n+    {\n+      if (TREE_VISITED (t))\n+\tabort ();\n+      TREE_VISITED (t) = 1;\n+      *walk_subtrees = 0;\n+      walk_tree (&BIND_EXPR_BODY (t), copy_if_shared_r, NULL, NULL);\n+    }\n+\n   /* If this node has been visited already, unshare it and don't look\n      any deeper.  */\n-  if (TREE_VISITED (*tp))\n+  else if (TREE_VISITED (t))\n     {\n       walk_tree (tp, mostly_copy_tree_r, NULL, NULL);\n       *walk_subtrees = 0;\n     }\n+\n+  /* Otherwise, mark the tree as visited and keep looking.  */\n   else\n-    {\n-    /* Otherwise, mark the tree as visited and keep looking.  */\n-    TREE_VISITED (*tp) = 1;\n-      if (TREE_CODE (*tp) == VA_ARG_EXPR)\n-\t{\n-\t  /* Mark any _DECL inside the operand as volatile to avoid the\n-\t     optimizers messing around with it. FIXME: Remove this once\n-\t     VA_ARG_EXPRs are properly lowered.  */\n-\t  walk_tree (&TREE_OPERAND (*tp, 0), mark_decls_volatile_r,\n-\t\t     NULL, NULL);\n-\t}\n-    }\n+    TREE_VISITED (t) = 1;\n+\n   return NULL_TREE;\n }\n \n@@ -2472,6 +2487,7 @@ gimplify_modify_expr (tree *expr_p, tree *pre_p, tree *post_p, bool want_value)\n \t  tree args, t, dest;\n \n \t  t = TYPE_SIZE_UNIT (TREE_TYPE (*to_p));\n+\t  t = unshare_expr (t);\n \t  args = tree_cons (NULL, t, NULL);\n \t  t = build_addr_expr (*from_p);\n \t  args = tree_cons (NULL, t, args);"}]}