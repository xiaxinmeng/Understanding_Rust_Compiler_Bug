{"sha": "6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmZmMjRkNDVkYzdiZjI2OTFiNmMyYzNmOWU5ODMwMzYwZGM1NzJhNg==", "commit": {"author": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2006-06-06T08:10:09Z"}, "committer": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2006-06-06T08:10:09Z"}, "message": "in_pack.m4: Add TODO comment about detecting temporaries...\n\n2006-06-06  Janne Blomqvist  <jb@gcc.gnu.org>\n\n\t* m4/in_pack.m4: Add TODO comment about detecting temporaries,\n\tremove test for stride 0, update copyright year.\n\t* m4/transpose.m4: Remove test for stride 0, update copyright\n\tyear.\n\t* m4/iforeach.m4: Likewise.\n\t* m4/shape.m4: Likewise.\n\t* m4/in_unpack.m4: Likewise.\n\t* m4/reshape.m4: Likewise.\n\t* m4/ifunction.m4: Likewise.\n\t* m4/matmul.m4: Likewise.\n\t* m4/matmull.m4: Likewise.\n\t* intrinsics/etime.c: Likewise.\n\t* intrinsics/transpose_generic.c: Likewise.\n\t* intrinsics/spread_generic.c: Likewise.\n\t* intrinsics/stat.c: Likewise.\n\t* intrinsics/reshape_generic.c: Likewise.\n\t* intrinsics/random.c: Likewise.\n\t* generated/*: Regenerated from above changed m4 files.\n\nFrom-SVN: r114424", "tree": {"sha": "88f8e06667bc01f3aee614a92f3130c18d864edd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/88f8e06667bc01f3aee614a92f3130c18d864edd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/comments", "author": null, "committer": null, "parents": [{"sha": "0d3b0abea32c88c867948cd1786bd9df3634ac89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d3b0abea32c88c867948cd1786bd9df3634ac89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d3b0abea32c88c867948cd1786bd9df3634ac89"}], "stats": {"total": 3381, "additions": 99, "deletions": 3282}, "files": [{"sha": "bd1aecbc32bd70456aa80546ebf5e26236bde2c6", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -1,3 +1,24 @@\n+2006-06-06  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\t* m4/in_pack.m4: Add TODO comment about detecting temporaries,\n+\tremove test for stride 0, update copyright year.\n+\t* m4/transpose.m4: Remove test for stride 0, update copyright\n+\tyear.\n+\t* m4/iforeach.m4: Likewise.\n+\t* m4/shape.m4: Likewise.\n+\t* m4/in_unpack.m4: Likewise.\n+\t* m4/reshape.m4: Likewise.\n+\t* m4/ifunction.m4: Likewise.\n+\t* m4/matmul.m4: Likewise.\n+\t* m4/matmull.m4: Likewise.\n+\t* intrinsics/etime.c: Likewise.\n+\t* intrinsics/transpose_generic.c: Likewise.\n+\t* intrinsics/spread_generic.c: Likewise.\n+\t* intrinsics/stat.c: Likewise.\n+\t* intrinsics/reshape_generic.c: Likewise.\n+\t* intrinsics/random.c: Likewise.\n+\t* generated/*: Regenerated from above changed m4 files.\n+\t\n 2006-05-29  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libgfortran/27757"}, {"sha": "91f342aee1d03ad3b60b0d9273c76b7715b5e04d", "filename": "libgfortran/generated/all_l16.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fall_l16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fall_l16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fall_l16.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -62,11 +62,6 @@ all_l16 (gfc_array_l16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -103,9 +98,6 @@ all_l16 (gfc_array_l16 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }"}, {"sha": "7cb4ae1a6d7d33decc8493d1e9c626b161170a3c", "filename": "libgfortran/generated/all_l4.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fall_l4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fall_l4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fall_l4.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -62,11 +62,6 @@ all_l4 (gfc_array_l4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -103,9 +98,6 @@ all_l4 (gfc_array_l4 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }"}, {"sha": "bc3928a8fa799c7c9c9fa1c28c09198562234752", "filename": "libgfortran/generated/all_l8.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fall_l8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fall_l8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fall_l8.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -62,11 +62,6 @@ all_l8 (gfc_array_l8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -103,9 +98,6 @@ all_l8 (gfc_array_l8 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }"}, {"sha": "e4fce4b9f6e5d556bcd3b7e883aebb285d7e3b4c", "filename": "libgfortran/generated/any_l16.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fany_l16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fany_l16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fany_l16.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -62,11 +62,6 @@ any_l16 (gfc_array_l16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -103,9 +98,6 @@ any_l16 (gfc_array_l16 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }"}, {"sha": "d026abd2b9b505ecc611538d69ba61042b8908b8", "filename": "libgfortran/generated/any_l4.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fany_l4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fany_l4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fany_l4.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -62,11 +62,6 @@ any_l4 (gfc_array_l4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -103,9 +98,6 @@ any_l4 (gfc_array_l4 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }"}, {"sha": "232ebfadda560816e2498d675099c2e30b9a6a19", "filename": "libgfortran/generated/any_l8.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fany_l8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fany_l8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fany_l8.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -62,11 +62,6 @@ any_l8 (gfc_array_l8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -103,9 +98,6 @@ any_l8 (gfc_array_l8 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }"}, {"sha": "c3402a0bc0f7552343cebe6c5f3c553d1a72b46d", "filename": "libgfortran/generated/count_16_l16.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fcount_16_l16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fcount_16_l16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fcount_16_l16.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -62,11 +62,6 @@ count_16_l16 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -103,9 +98,6 @@ count_16_l16 (gfc_array_i16 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }"}, {"sha": "433096dd3dc61c4620ca8135596aeca9eac3079c", "filename": "libgfortran/generated/count_16_l4.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fcount_16_l4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fcount_16_l4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fcount_16_l4.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -62,11 +62,6 @@ count_16_l4 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -103,9 +98,6 @@ count_16_l4 (gfc_array_i16 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }"}, {"sha": "4a363dc08d097f78fa345ab74b682dfcad3f1df0", "filename": "libgfortran/generated/count_16_l8.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fcount_16_l8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fcount_16_l8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fcount_16_l8.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -62,11 +62,6 @@ count_16_l8 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -103,9 +98,6 @@ count_16_l8 (gfc_array_i16 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }"}, {"sha": "df29e33961e0de90d46346c85662b34a7f020f6b", "filename": "libgfortran/generated/count_4_l16.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fcount_4_l16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fcount_4_l16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fcount_4_l16.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -62,11 +62,6 @@ count_4_l16 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -103,9 +98,6 @@ count_4_l16 (gfc_array_i4 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }"}, {"sha": "fcbe0812f3258dde5843e821bbc79311359f0085", "filename": "libgfortran/generated/count_4_l4.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fcount_4_l4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fcount_4_l4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fcount_4_l4.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -62,11 +62,6 @@ count_4_l4 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -103,9 +98,6 @@ count_4_l4 (gfc_array_i4 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }"}, {"sha": "2563e88ecd18c146d310c7d906816b1f5c552b10", "filename": "libgfortran/generated/count_4_l8.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fcount_4_l8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fcount_4_l8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fcount_4_l8.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -62,11 +62,6 @@ count_4_l8 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -103,9 +98,6 @@ count_4_l8 (gfc_array_i4 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }"}, {"sha": "3b8172d7f8513157510997941908d7d49584a39b", "filename": "libgfortran/generated/count_8_l16.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fcount_8_l16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fcount_8_l16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fcount_8_l16.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -62,11 +62,6 @@ count_8_l16 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -103,9 +98,6 @@ count_8_l16 (gfc_array_i8 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }"}, {"sha": "a322b1b1913312fcd8b3e907c4c43f7c0a43daaa", "filename": "libgfortran/generated/count_8_l4.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fcount_8_l4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fcount_8_l4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fcount_8_l4.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -62,11 +62,6 @@ count_8_l4 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -103,9 +98,6 @@ count_8_l4 (gfc_array_i8 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }"}, {"sha": "48a60b15e09a0dadfc38301ae74423e3fc3d4971", "filename": "libgfortran/generated/count_8_l8.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fcount_8_l8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fcount_8_l8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fcount_8_l8.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -62,11 +62,6 @@ count_8_l8 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -103,9 +98,6 @@ count_8_l8 (gfc_array_i8 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }"}, {"sha": "1c51349d088a7d2fcb95e286f7ba799d0cb5baae", "filename": "libgfortran/generated/in_pack_c10.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fin_pack_c10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fin_pack_c10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fin_pack_c10.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -1,5 +1,5 @@\n /* Helper function for repacking arrays.\n-   Copyright 2003 Free Software Foundation, Inc.\n+   Copyright 2003, 2006 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -53,11 +53,8 @@ internal_pack_c10 (gfc_array_c10 * source)\n   int n;\n   int packed;\n \n-  if (source->dim[0].stride == 0)\n-    {\n-      source->dim[0].stride = 1;\n-      return source->data;\n-    }\n+  /* TODO: Investigate how we can figure out if this is a temporary\n+     since the stride=0 thing has been removed from the frontend.  */\n \n   dim = GFC_DESCRIPTOR_RANK (source);\n   ssize = 1;"}, {"sha": "ca6af477ef9fc6864ef0ec9463592a9a8c5150b2", "filename": "libgfortran/generated/in_pack_c16.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fin_pack_c16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fin_pack_c16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fin_pack_c16.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -1,5 +1,5 @@\n /* Helper function for repacking arrays.\n-   Copyright 2003 Free Software Foundation, Inc.\n+   Copyright 2003, 2006 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -53,11 +53,8 @@ internal_pack_c16 (gfc_array_c16 * source)\n   int n;\n   int packed;\n \n-  if (source->dim[0].stride == 0)\n-    {\n-      source->dim[0].stride = 1;\n-      return source->data;\n-    }\n+  /* TODO: Investigate how we can figure out if this is a temporary\n+     since the stride=0 thing has been removed from the frontend.  */\n \n   dim = GFC_DESCRIPTOR_RANK (source);\n   ssize = 1;"}, {"sha": "f16392b3ca9f9acbca9e03fbbbb0942457514c69", "filename": "libgfortran/generated/in_pack_c4.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fin_pack_c4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fin_pack_c4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fin_pack_c4.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -1,5 +1,5 @@\n /* Helper function for repacking arrays.\n-   Copyright 2003 Free Software Foundation, Inc.\n+   Copyright 2003, 2006 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -53,11 +53,8 @@ internal_pack_c4 (gfc_array_c4 * source)\n   int n;\n   int packed;\n \n-  if (source->dim[0].stride == 0)\n-    {\n-      source->dim[0].stride = 1;\n-      return source->data;\n-    }\n+  /* TODO: Investigate how we can figure out if this is a temporary\n+     since the stride=0 thing has been removed from the frontend.  */\n \n   dim = GFC_DESCRIPTOR_RANK (source);\n   ssize = 1;"}, {"sha": "abcf571dbd8943bb5f08e784985d9af57343029b", "filename": "libgfortran/generated/in_pack_c8.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fin_pack_c8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fin_pack_c8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fin_pack_c8.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -1,5 +1,5 @@\n /* Helper function for repacking arrays.\n-   Copyright 2003 Free Software Foundation, Inc.\n+   Copyright 2003, 2006 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -53,11 +53,8 @@ internal_pack_c8 (gfc_array_c8 * source)\n   int n;\n   int packed;\n \n-  if (source->dim[0].stride == 0)\n-    {\n-      source->dim[0].stride = 1;\n-      return source->data;\n-    }\n+  /* TODO: Investigate how we can figure out if this is a temporary\n+     since the stride=0 thing has been removed from the frontend.  */\n \n   dim = GFC_DESCRIPTOR_RANK (source);\n   ssize = 1;"}, {"sha": "205c1020150e857849fe24e95bef1d0b203c165d", "filename": "libgfortran/generated/in_pack_i16.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fin_pack_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fin_pack_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fin_pack_i16.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -1,5 +1,5 @@\n /* Helper function for repacking arrays.\n-   Copyright 2003 Free Software Foundation, Inc.\n+   Copyright 2003, 2006 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -53,11 +53,8 @@ internal_pack_16 (gfc_array_i16 * source)\n   int n;\n   int packed;\n \n-  if (source->dim[0].stride == 0)\n-    {\n-      source->dim[0].stride = 1;\n-      return source->data;\n-    }\n+  /* TODO: Investigate how we can figure out if this is a temporary\n+     since the stride=0 thing has been removed from the frontend.  */\n \n   dim = GFC_DESCRIPTOR_RANK (source);\n   ssize = 1;"}, {"sha": "0d2ef2dd26158216ef4e8d2bd7a0df10096567f1", "filename": "libgfortran/generated/in_pack_i4.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fin_pack_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fin_pack_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fin_pack_i4.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -1,5 +1,5 @@\n /* Helper function for repacking arrays.\n-   Copyright 2003 Free Software Foundation, Inc.\n+   Copyright 2003, 2006 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -53,11 +53,8 @@ internal_pack_4 (gfc_array_i4 * source)\n   int n;\n   int packed;\n \n-  if (source->dim[0].stride == 0)\n-    {\n-      source->dim[0].stride = 1;\n-      return source->data;\n-    }\n+  /* TODO: Investigate how we can figure out if this is a temporary\n+     since the stride=0 thing has been removed from the frontend.  */\n \n   dim = GFC_DESCRIPTOR_RANK (source);\n   ssize = 1;"}, {"sha": "b9be8b3358204d8fdcb8a3ace149b9311f4161c1", "filename": "libgfortran/generated/in_pack_i8.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fin_pack_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fin_pack_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fin_pack_i8.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -1,5 +1,5 @@\n /* Helper function for repacking arrays.\n-   Copyright 2003 Free Software Foundation, Inc.\n+   Copyright 2003, 2006 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -53,11 +53,8 @@ internal_pack_8 (gfc_array_i8 * source)\n   int n;\n   int packed;\n \n-  if (source->dim[0].stride == 0)\n-    {\n-      source->dim[0].stride = 1;\n-      return source->data;\n-    }\n+  /* TODO: Investigate how we can figure out if this is a temporary\n+     since the stride=0 thing has been removed from the frontend.  */\n \n   dim = GFC_DESCRIPTOR_RANK (source);\n   ssize = 1;"}, {"sha": "d4fe858b5c539d9cc8ab5e32c3e39883abc58b77", "filename": "libgfortran/generated/in_unpack_c10.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fin_unpack_c10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fin_unpack_c10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fin_unpack_c10.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -1,5 +1,5 @@\n /* Helper function for repacking arrays.\n-   Copyright 2003 Free Software Foundation, Inc.\n+   Copyright 2003, 2006 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -52,9 +52,6 @@ internal_unpack_c10 (gfc_array_c10 * d, const GFC_COMPLEX_10 * src)\n   if (src == dest || !src)\n     return;\n \n-  if (d->dim[0].stride == 0)\n-    d->dim[0].stride = 1;\n-\n   dim = GFC_DESCRIPTOR_RANK (d);\n   dsize = 1;\n   for (n = 0; n < dim; n++)"}, {"sha": "ad5fa0717cc110dc641f659d8555a2f420758b47", "filename": "libgfortran/generated/in_unpack_c16.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fin_unpack_c16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fin_unpack_c16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fin_unpack_c16.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -1,5 +1,5 @@\n /* Helper function for repacking arrays.\n-   Copyright 2003 Free Software Foundation, Inc.\n+   Copyright 2003, 2006 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -52,9 +52,6 @@ internal_unpack_c16 (gfc_array_c16 * d, const GFC_COMPLEX_16 * src)\n   if (src == dest || !src)\n     return;\n \n-  if (d->dim[0].stride == 0)\n-    d->dim[0].stride = 1;\n-\n   dim = GFC_DESCRIPTOR_RANK (d);\n   dsize = 1;\n   for (n = 0; n < dim; n++)"}, {"sha": "de1b48664ba6fbcc3242139be9002b9a41a49ac3", "filename": "libgfortran/generated/in_unpack_c4.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fin_unpack_c4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fin_unpack_c4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fin_unpack_c4.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -1,5 +1,5 @@\n /* Helper function for repacking arrays.\n-   Copyright 2003 Free Software Foundation, Inc.\n+   Copyright 2003, 2006 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -52,9 +52,6 @@ internal_unpack_c4 (gfc_array_c4 * d, const GFC_COMPLEX_4 * src)\n   if (src == dest || !src)\n     return;\n \n-  if (d->dim[0].stride == 0)\n-    d->dim[0].stride = 1;\n-\n   dim = GFC_DESCRIPTOR_RANK (d);\n   dsize = 1;\n   for (n = 0; n < dim; n++)"}, {"sha": "70f22e41c2900dd77feb4a717ed07cb848a3b8bd", "filename": "libgfortran/generated/in_unpack_c8.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fin_unpack_c8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fin_unpack_c8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fin_unpack_c8.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -1,5 +1,5 @@\n /* Helper function for repacking arrays.\n-   Copyright 2003 Free Software Foundation, Inc.\n+   Copyright 2003, 2006 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -52,9 +52,6 @@ internal_unpack_c8 (gfc_array_c8 * d, const GFC_COMPLEX_8 * src)\n   if (src == dest || !src)\n     return;\n \n-  if (d->dim[0].stride == 0)\n-    d->dim[0].stride = 1;\n-\n   dim = GFC_DESCRIPTOR_RANK (d);\n   dsize = 1;\n   for (n = 0; n < dim; n++)"}, {"sha": "b64b8bdaf655dfabbde96be28b2f749bbe444e04", "filename": "libgfortran/generated/in_unpack_i16.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fin_unpack_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fin_unpack_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fin_unpack_i16.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -1,5 +1,5 @@\n /* Helper function for repacking arrays.\n-   Copyright 2003 Free Software Foundation, Inc.\n+   Copyright 2003, 2006 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -52,9 +52,6 @@ internal_unpack_16 (gfc_array_i16 * d, const GFC_INTEGER_16 * src)\n   if (src == dest || !src)\n     return;\n \n-  if (d->dim[0].stride == 0)\n-    d->dim[0].stride = 1;\n-\n   dim = GFC_DESCRIPTOR_RANK (d);\n   dsize = 1;\n   for (n = 0; n < dim; n++)"}, {"sha": "013634921036587bd7a51a1f6b644c8e3b28a412", "filename": "libgfortran/generated/in_unpack_i4.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fin_unpack_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fin_unpack_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fin_unpack_i4.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -1,5 +1,5 @@\n /* Helper function for repacking arrays.\n-   Copyright 2003 Free Software Foundation, Inc.\n+   Copyright 2003, 2006 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -52,9 +52,6 @@ internal_unpack_4 (gfc_array_i4 * d, const GFC_INTEGER_4 * src)\n   if (src == dest || !src)\n     return;\n \n-  if (d->dim[0].stride == 0)\n-    d->dim[0].stride = 1;\n-\n   dim = GFC_DESCRIPTOR_RANK (d);\n   dsize = 1;\n   for (n = 0; n < dim; n++)"}, {"sha": "3f21843c7eb50ab4e87caaf78c6235e467ed786e", "filename": "libgfortran/generated/in_unpack_i8.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fin_unpack_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fin_unpack_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fin_unpack_i8.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -1,5 +1,5 @@\n /* Helper function for repacking arrays.\n-   Copyright 2003 Free Software Foundation, Inc.\n+   Copyright 2003, 2006 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -52,9 +52,6 @@ internal_unpack_8 (gfc_array_i8 * d, const GFC_INTEGER_8 * src)\n   if (src == dest || !src)\n     return;\n \n-  if (d->dim[0].stride == 0)\n-    d->dim[0].stride = 1;\n-\n   dim = GFC_DESCRIPTOR_RANK (d);\n   dsize = 1;\n   for (n = 0; n < dim; n++)"}, {"sha": "72c3a7dba7252c55afdcf5f21eb8b578a7973f92", "filename": "libgfortran/generated/matmul_c10.c", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmatmul_c10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmatmul_c10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_c10.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -1,5 +1,5 @@\n /* Implementation of the MATMUL intrinsic\n-   Copyright 2002, 2005 Free Software Foundation, Inc.\n+   Copyright 2002, 2005, 2006 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -120,15 +120,6 @@ matmul_c10 (gfc_array_c10 * const restrict retarray,\n       retarray->offset = 0;\n     }\n \n-  if (retarray->dim[0].stride == 0)\n-    retarray->dim[0].stride = 1;\n-\n-  /* This prevents constifying the input arguments.  */\n-  if (a->dim[0].stride == 0)\n-    a->dim[0].stride = 1;\n-  if (b->dim[0].stride == 0)\n-    b->dim[0].stride = 1;\n-\n \n   if (GFC_DESCRIPTOR_RANK (retarray) == 1)\n     {"}, {"sha": "d87eea1a273bad968eacd7253901d125d8f601d9", "filename": "libgfortran/generated/matmul_c16.c", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmatmul_c16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmatmul_c16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_c16.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -1,5 +1,5 @@\n /* Implementation of the MATMUL intrinsic\n-   Copyright 2002, 2005 Free Software Foundation, Inc.\n+   Copyright 2002, 2005, 2006 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -120,15 +120,6 @@ matmul_c16 (gfc_array_c16 * const restrict retarray,\n       retarray->offset = 0;\n     }\n \n-  if (retarray->dim[0].stride == 0)\n-    retarray->dim[0].stride = 1;\n-\n-  /* This prevents constifying the input arguments.  */\n-  if (a->dim[0].stride == 0)\n-    a->dim[0].stride = 1;\n-  if (b->dim[0].stride == 0)\n-    b->dim[0].stride = 1;\n-\n \n   if (GFC_DESCRIPTOR_RANK (retarray) == 1)\n     {"}, {"sha": "339c9c03554ee026b0dbc3f8cdc07039a06a08c9", "filename": "libgfortran/generated/matmul_c4.c", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmatmul_c4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmatmul_c4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_c4.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -1,5 +1,5 @@\n /* Implementation of the MATMUL intrinsic\n-   Copyright 2002, 2005 Free Software Foundation, Inc.\n+   Copyright 2002, 2005, 2006 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -120,15 +120,6 @@ matmul_c4 (gfc_array_c4 * const restrict retarray,\n       retarray->offset = 0;\n     }\n \n-  if (retarray->dim[0].stride == 0)\n-    retarray->dim[0].stride = 1;\n-\n-  /* This prevents constifying the input arguments.  */\n-  if (a->dim[0].stride == 0)\n-    a->dim[0].stride = 1;\n-  if (b->dim[0].stride == 0)\n-    b->dim[0].stride = 1;\n-\n \n   if (GFC_DESCRIPTOR_RANK (retarray) == 1)\n     {"}, {"sha": "13a9e3720d3ddaecb809624830b37bb24e6b7536", "filename": "libgfortran/generated/matmul_c8.c", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmatmul_c8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmatmul_c8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_c8.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -1,5 +1,5 @@\n /* Implementation of the MATMUL intrinsic\n-   Copyright 2002, 2005 Free Software Foundation, Inc.\n+   Copyright 2002, 2005, 2006 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -120,15 +120,6 @@ matmul_c8 (gfc_array_c8 * const restrict retarray,\n       retarray->offset = 0;\n     }\n \n-  if (retarray->dim[0].stride == 0)\n-    retarray->dim[0].stride = 1;\n-\n-  /* This prevents constifying the input arguments.  */\n-  if (a->dim[0].stride == 0)\n-    a->dim[0].stride = 1;\n-  if (b->dim[0].stride == 0)\n-    b->dim[0].stride = 1;\n-\n \n   if (GFC_DESCRIPTOR_RANK (retarray) == 1)\n     {"}, {"sha": "b6136ef702c6ba05e999f814cdd9a924e92c8f45", "filename": "libgfortran/generated/matmul_i16.c", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmatmul_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmatmul_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_i16.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -1,5 +1,5 @@\n /* Implementation of the MATMUL intrinsic\n-   Copyright 2002, 2005 Free Software Foundation, Inc.\n+   Copyright 2002, 2005, 2006 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -120,15 +120,6 @@ matmul_i16 (gfc_array_i16 * const restrict retarray,\n       retarray->offset = 0;\n     }\n \n-  if (retarray->dim[0].stride == 0)\n-    retarray->dim[0].stride = 1;\n-\n-  /* This prevents constifying the input arguments.  */\n-  if (a->dim[0].stride == 0)\n-    a->dim[0].stride = 1;\n-  if (b->dim[0].stride == 0)\n-    b->dim[0].stride = 1;\n-\n \n   if (GFC_DESCRIPTOR_RANK (retarray) == 1)\n     {"}, {"sha": "4cffcf05dd8af93b5760aef27178855f63f38b75", "filename": "libgfortran/generated/matmul_i4.c", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmatmul_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmatmul_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_i4.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -1,5 +1,5 @@\n /* Implementation of the MATMUL intrinsic\n-   Copyright 2002, 2005 Free Software Foundation, Inc.\n+   Copyright 2002, 2005, 2006 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -120,15 +120,6 @@ matmul_i4 (gfc_array_i4 * const restrict retarray,\n       retarray->offset = 0;\n     }\n \n-  if (retarray->dim[0].stride == 0)\n-    retarray->dim[0].stride = 1;\n-\n-  /* This prevents constifying the input arguments.  */\n-  if (a->dim[0].stride == 0)\n-    a->dim[0].stride = 1;\n-  if (b->dim[0].stride == 0)\n-    b->dim[0].stride = 1;\n-\n \n   if (GFC_DESCRIPTOR_RANK (retarray) == 1)\n     {"}, {"sha": "c4fb0c7e5b9a0e62d4b166f5e38e4b29d912de55", "filename": "libgfortran/generated/matmul_i8.c", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmatmul_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmatmul_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_i8.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -1,5 +1,5 @@\n /* Implementation of the MATMUL intrinsic\n-   Copyright 2002, 2005 Free Software Foundation, Inc.\n+   Copyright 2002, 2005, 2006 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -120,15 +120,6 @@ matmul_i8 (gfc_array_i8 * const restrict retarray,\n       retarray->offset = 0;\n     }\n \n-  if (retarray->dim[0].stride == 0)\n-    retarray->dim[0].stride = 1;\n-\n-  /* This prevents constifying the input arguments.  */\n-  if (a->dim[0].stride == 0)\n-    a->dim[0].stride = 1;\n-  if (b->dim[0].stride == 0)\n-    b->dim[0].stride = 1;\n-\n \n   if (GFC_DESCRIPTOR_RANK (retarray) == 1)\n     {"}, {"sha": "7e7f2f9c658017990c668b53787004c5e79b6b2e", "filename": "libgfortran/generated/matmul_l16.c", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmatmul_l16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmatmul_l16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_l16.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -1,5 +1,5 @@\n /* Implementation of the MATMUL intrinsic\n-   Copyright 2002, 2005 Free Software Foundation, Inc.\n+   Copyright 2002, 2005, 2006 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -112,13 +112,6 @@ matmul_l16 (gfc_array_l16 * const restrict retarray,\n     }\n   dest = retarray->data;\n \n-  if (retarray->dim[0].stride == 0)\n-    retarray->dim[0].stride = 1;\n-  if (a->dim[0].stride == 0)\n-    a->dim[0].stride = 1;\n-  if (b->dim[0].stride == 0)\n-    b->dim[0].stride = 1;\n-\n \n   if (GFC_DESCRIPTOR_RANK (retarray) == 1)\n     {"}, {"sha": "8428ff9dc0ba355c6fe53de9207a765bdab7a6a2", "filename": "libgfortran/generated/matmul_l4.c", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmatmul_l4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmatmul_l4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_l4.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -1,5 +1,5 @@\n /* Implementation of the MATMUL intrinsic\n-   Copyright 2002, 2005 Free Software Foundation, Inc.\n+   Copyright 2002, 2005, 2006 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -112,13 +112,6 @@ matmul_l4 (gfc_array_l4 * const restrict retarray,\n     }\n   dest = retarray->data;\n \n-  if (retarray->dim[0].stride == 0)\n-    retarray->dim[0].stride = 1;\n-  if (a->dim[0].stride == 0)\n-    a->dim[0].stride = 1;\n-  if (b->dim[0].stride == 0)\n-    b->dim[0].stride = 1;\n-\n \n   if (GFC_DESCRIPTOR_RANK (retarray) == 1)\n     {"}, {"sha": "76dee0a48d7fc9e710ee5e05a220980797c32a5d", "filename": "libgfortran/generated/matmul_l8.c", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmatmul_l8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmatmul_l8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_l8.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -1,5 +1,5 @@\n /* Implementation of the MATMUL intrinsic\n-   Copyright 2002, 2005 Free Software Foundation, Inc.\n+   Copyright 2002, 2005, 2006 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -112,13 +112,6 @@ matmul_l8 (gfc_array_l8 * const restrict retarray,\n     }\n   dest = retarray->data;\n \n-  if (retarray->dim[0].stride == 0)\n-    retarray->dim[0].stride = 1;\n-  if (a->dim[0].stride == 0)\n-    a->dim[0].stride = 1;\n-  if (b->dim[0].stride == 0)\n-    b->dim[0].stride = 1;\n-\n \n   if (GFC_DESCRIPTOR_RANK (retarray) == 1)\n     {"}, {"sha": "e90ac57c5c2b52b5e3cad0569911b133bf3d3fdd", "filename": "libgfortran/generated/matmul_r10.c", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmatmul_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmatmul_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_r10.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -1,5 +1,5 @@\n /* Implementation of the MATMUL intrinsic\n-   Copyright 2002, 2005 Free Software Foundation, Inc.\n+   Copyright 2002, 2005, 2006 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -120,15 +120,6 @@ matmul_r10 (gfc_array_r10 * const restrict retarray,\n       retarray->offset = 0;\n     }\n \n-  if (retarray->dim[0].stride == 0)\n-    retarray->dim[0].stride = 1;\n-\n-  /* This prevents constifying the input arguments.  */\n-  if (a->dim[0].stride == 0)\n-    a->dim[0].stride = 1;\n-  if (b->dim[0].stride == 0)\n-    b->dim[0].stride = 1;\n-\n \n   if (GFC_DESCRIPTOR_RANK (retarray) == 1)\n     {"}, {"sha": "3823fa6d5c49d5e0fdb1a49da3a7b06d75ced555", "filename": "libgfortran/generated/matmul_r16.c", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmatmul_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmatmul_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_r16.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -1,5 +1,5 @@\n /* Implementation of the MATMUL intrinsic\n-   Copyright 2002, 2005 Free Software Foundation, Inc.\n+   Copyright 2002, 2005, 2006 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -120,15 +120,6 @@ matmul_r16 (gfc_array_r16 * const restrict retarray,\n       retarray->offset = 0;\n     }\n \n-  if (retarray->dim[0].stride == 0)\n-    retarray->dim[0].stride = 1;\n-\n-  /* This prevents constifying the input arguments.  */\n-  if (a->dim[0].stride == 0)\n-    a->dim[0].stride = 1;\n-  if (b->dim[0].stride == 0)\n-    b->dim[0].stride = 1;\n-\n \n   if (GFC_DESCRIPTOR_RANK (retarray) == 1)\n     {"}, {"sha": "3757b65eaffda4d46ed7210a9e5dc8b543118adf", "filename": "libgfortran/generated/matmul_r4.c", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmatmul_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmatmul_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_r4.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -1,5 +1,5 @@\n /* Implementation of the MATMUL intrinsic\n-   Copyright 2002, 2005 Free Software Foundation, Inc.\n+   Copyright 2002, 2005, 2006 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -120,15 +120,6 @@ matmul_r4 (gfc_array_r4 * const restrict retarray,\n       retarray->offset = 0;\n     }\n \n-  if (retarray->dim[0].stride == 0)\n-    retarray->dim[0].stride = 1;\n-\n-  /* This prevents constifying the input arguments.  */\n-  if (a->dim[0].stride == 0)\n-    a->dim[0].stride = 1;\n-  if (b->dim[0].stride == 0)\n-    b->dim[0].stride = 1;\n-\n \n   if (GFC_DESCRIPTOR_RANK (retarray) == 1)\n     {"}, {"sha": "2bd607cc40ab15f8eedc8af2827aca2d189a48f0", "filename": "libgfortran/generated/matmul_r8.c", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmatmul_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmatmul_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_r8.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -1,5 +1,5 @@\n /* Implementation of the MATMUL intrinsic\n-   Copyright 2002, 2005 Free Software Foundation, Inc.\n+   Copyright 2002, 2005, 2006 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -120,15 +120,6 @@ matmul_r8 (gfc_array_r8 * const restrict retarray,\n       retarray->offset = 0;\n     }\n \n-  if (retarray->dim[0].stride == 0)\n-    retarray->dim[0].stride = 1;\n-\n-  /* This prevents constifying the input arguments.  */\n-  if (a->dim[0].stride == 0)\n-    a->dim[0].stride = 1;\n-  if (b->dim[0].stride == 0)\n-    b->dim[0].stride = 1;\n-\n \n   if (GFC_DESCRIPTOR_RANK (retarray) == 1)\n     {"}, {"sha": "1883557545c256b86399302abf78256bf76739aa", "filename": "libgfortran/generated/maxloc0_16_i16.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxloc0_16_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxloc0_16_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_16_i16.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -76,16 +76,8 @@ maxloc0_16_i16 (gfc_array_i16 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -196,19 +188,8 @@ mmaxloc0_16_i16 (gfc_array_i16 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -335,9 +316,6 @@ smaxloc0_16_i16 (gfc_array_i16 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n   dstride = retarray->dim[0].stride;"}, {"sha": "187a6c8c69447669add027f14383572f856b8b43", "filename": "libgfortran/generated/maxloc0_16_i4.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxloc0_16_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxloc0_16_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_16_i4.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -76,16 +76,8 @@ maxloc0_16_i4 (gfc_array_i16 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -196,19 +188,8 @@ mmaxloc0_16_i4 (gfc_array_i16 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -335,9 +316,6 @@ smaxloc0_16_i4 (gfc_array_i16 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n   dstride = retarray->dim[0].stride;"}, {"sha": "c51a70b9228f33d21eaf1b2627c3bedd4d1891a3", "filename": "libgfortran/generated/maxloc0_16_i8.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxloc0_16_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxloc0_16_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_16_i8.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -76,16 +76,8 @@ maxloc0_16_i8 (gfc_array_i16 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -196,19 +188,8 @@ mmaxloc0_16_i8 (gfc_array_i16 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -335,9 +316,6 @@ smaxloc0_16_i8 (gfc_array_i16 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n   dstride = retarray->dim[0].stride;"}, {"sha": "75c3f7a86f335425b6b70c827e663661c77e0787", "filename": "libgfortran/generated/maxloc0_16_r10.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxloc0_16_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxloc0_16_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_16_r10.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -76,16 +76,8 @@ maxloc0_16_r10 (gfc_array_i16 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -196,19 +188,8 @@ mmaxloc0_16_r10 (gfc_array_i16 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -335,9 +316,6 @@ smaxloc0_16_r10 (gfc_array_i16 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n   dstride = retarray->dim[0].stride;"}, {"sha": "4754bbd487dd81e05df42df1d27f24a312d06ff1", "filename": "libgfortran/generated/maxloc0_16_r16.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxloc0_16_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxloc0_16_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_16_r16.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -76,16 +76,8 @@ maxloc0_16_r16 (gfc_array_i16 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -196,19 +188,8 @@ mmaxloc0_16_r16 (gfc_array_i16 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -335,9 +316,6 @@ smaxloc0_16_r16 (gfc_array_i16 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n   dstride = retarray->dim[0].stride;"}, {"sha": "007932e183869c25751840623265654731b01ba7", "filename": "libgfortran/generated/maxloc0_16_r4.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxloc0_16_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxloc0_16_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_16_r4.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -76,16 +76,8 @@ maxloc0_16_r4 (gfc_array_i16 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -196,19 +188,8 @@ mmaxloc0_16_r4 (gfc_array_i16 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -335,9 +316,6 @@ smaxloc0_16_r4 (gfc_array_i16 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n   dstride = retarray->dim[0].stride;"}, {"sha": "6c004b02cad7c38b2c393f11db84a752d39b20a6", "filename": "libgfortran/generated/maxloc0_16_r8.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxloc0_16_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxloc0_16_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_16_r8.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -76,16 +76,8 @@ maxloc0_16_r8 (gfc_array_i16 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -196,19 +188,8 @@ mmaxloc0_16_r8 (gfc_array_i16 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -335,9 +316,6 @@ smaxloc0_16_r8 (gfc_array_i16 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n   dstride = retarray->dim[0].stride;"}, {"sha": "a8b3bab824e3d786ad8f2b61865df903d12c2d4f", "filename": "libgfortran/generated/maxloc0_4_i16.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxloc0_4_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxloc0_4_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_4_i16.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -76,16 +76,8 @@ maxloc0_4_i16 (gfc_array_i4 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -196,19 +188,8 @@ mmaxloc0_4_i16 (gfc_array_i4 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -335,9 +316,6 @@ smaxloc0_4_i16 (gfc_array_i4 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n   dstride = retarray->dim[0].stride;"}, {"sha": "8fe240c9a7e115e28a20e5d3cbcab07e911c79ee", "filename": "libgfortran/generated/maxloc0_4_i4.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxloc0_4_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxloc0_4_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_4_i4.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -76,16 +76,8 @@ maxloc0_4_i4 (gfc_array_i4 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -196,19 +188,8 @@ mmaxloc0_4_i4 (gfc_array_i4 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -335,9 +316,6 @@ smaxloc0_4_i4 (gfc_array_i4 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n   dstride = retarray->dim[0].stride;"}, {"sha": "dd816defcd8e8a54e7728597d97362a7d989c8fe", "filename": "libgfortran/generated/maxloc0_4_i8.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxloc0_4_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxloc0_4_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_4_i8.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -76,16 +76,8 @@ maxloc0_4_i8 (gfc_array_i4 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -196,19 +188,8 @@ mmaxloc0_4_i8 (gfc_array_i4 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -335,9 +316,6 @@ smaxloc0_4_i8 (gfc_array_i4 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n   dstride = retarray->dim[0].stride;"}, {"sha": "db829a90218c1e717ac91de958d5edf5bd26b2bc", "filename": "libgfortran/generated/maxloc0_4_r10.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxloc0_4_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxloc0_4_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_4_r10.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -76,16 +76,8 @@ maxloc0_4_r10 (gfc_array_i4 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -196,19 +188,8 @@ mmaxloc0_4_r10 (gfc_array_i4 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -335,9 +316,6 @@ smaxloc0_4_r10 (gfc_array_i4 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n   dstride = retarray->dim[0].stride;"}, {"sha": "de37c032a60f086cbf915463ede425cbd37fe694", "filename": "libgfortran/generated/maxloc0_4_r16.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxloc0_4_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxloc0_4_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_4_r16.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -76,16 +76,8 @@ maxloc0_4_r16 (gfc_array_i4 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -196,19 +188,8 @@ mmaxloc0_4_r16 (gfc_array_i4 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -335,9 +316,6 @@ smaxloc0_4_r16 (gfc_array_i4 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n   dstride = retarray->dim[0].stride;"}, {"sha": "b69c01fabc08a1496a331bf40d56b68e5246d1b6", "filename": "libgfortran/generated/maxloc0_4_r4.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxloc0_4_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxloc0_4_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_4_r4.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -76,16 +76,8 @@ maxloc0_4_r4 (gfc_array_i4 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -196,19 +188,8 @@ mmaxloc0_4_r4 (gfc_array_i4 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -335,9 +316,6 @@ smaxloc0_4_r4 (gfc_array_i4 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n   dstride = retarray->dim[0].stride;"}, {"sha": "8021d1b928872561ac2ffb1e02b671d4a5c4b37a", "filename": "libgfortran/generated/maxloc0_4_r8.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxloc0_4_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxloc0_4_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_4_r8.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -76,16 +76,8 @@ maxloc0_4_r8 (gfc_array_i4 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -196,19 +188,8 @@ mmaxloc0_4_r8 (gfc_array_i4 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -335,9 +316,6 @@ smaxloc0_4_r8 (gfc_array_i4 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n   dstride = retarray->dim[0].stride;"}, {"sha": "14ce142263587d718471130e6a7099c17c45d70a", "filename": "libgfortran/generated/maxloc0_8_i16.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxloc0_8_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxloc0_8_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_8_i16.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -76,16 +76,8 @@ maxloc0_8_i16 (gfc_array_i8 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -196,19 +188,8 @@ mmaxloc0_8_i16 (gfc_array_i8 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -335,9 +316,6 @@ smaxloc0_8_i16 (gfc_array_i8 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n   dstride = retarray->dim[0].stride;"}, {"sha": "df1a27fd16d2088aa547f6665e26cb483332f715", "filename": "libgfortran/generated/maxloc0_8_i4.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxloc0_8_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxloc0_8_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_8_i4.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -76,16 +76,8 @@ maxloc0_8_i4 (gfc_array_i8 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -196,19 +188,8 @@ mmaxloc0_8_i4 (gfc_array_i8 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -335,9 +316,6 @@ smaxloc0_8_i4 (gfc_array_i8 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n   dstride = retarray->dim[0].stride;"}, {"sha": "3400587250f48b31f372c0120d5e9a0d697d1e7f", "filename": "libgfortran/generated/maxloc0_8_i8.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxloc0_8_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxloc0_8_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_8_i8.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -76,16 +76,8 @@ maxloc0_8_i8 (gfc_array_i8 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -196,19 +188,8 @@ mmaxloc0_8_i8 (gfc_array_i8 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -335,9 +316,6 @@ smaxloc0_8_i8 (gfc_array_i8 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n   dstride = retarray->dim[0].stride;"}, {"sha": "70860c8a9bdf12c1e27e0a97bb2419756395ab37", "filename": "libgfortran/generated/maxloc0_8_r10.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxloc0_8_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxloc0_8_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_8_r10.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -76,16 +76,8 @@ maxloc0_8_r10 (gfc_array_i8 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -196,19 +188,8 @@ mmaxloc0_8_r10 (gfc_array_i8 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -335,9 +316,6 @@ smaxloc0_8_r10 (gfc_array_i8 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n   dstride = retarray->dim[0].stride;"}, {"sha": "e9ef7ef40605d3fb50a5c0c546b0c8768ad5ae4e", "filename": "libgfortran/generated/maxloc0_8_r16.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxloc0_8_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxloc0_8_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_8_r16.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -76,16 +76,8 @@ maxloc0_8_r16 (gfc_array_i8 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -196,19 +188,8 @@ mmaxloc0_8_r16 (gfc_array_i8 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -335,9 +316,6 @@ smaxloc0_8_r16 (gfc_array_i8 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n   dstride = retarray->dim[0].stride;"}, {"sha": "7dede4597e1a83f672239127c32a4abf5c2c2606", "filename": "libgfortran/generated/maxloc0_8_r4.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxloc0_8_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxloc0_8_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_8_r4.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -76,16 +76,8 @@ maxloc0_8_r4 (gfc_array_i8 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -196,19 +188,8 @@ mmaxloc0_8_r4 (gfc_array_i8 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -335,9 +316,6 @@ smaxloc0_8_r4 (gfc_array_i8 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n   dstride = retarray->dim[0].stride;"}, {"sha": "73531d713f9c7220cf48a2aec9abbbe8086b7183", "filename": "libgfortran/generated/maxloc0_8_r8.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxloc0_8_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxloc0_8_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_8_r8.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -76,16 +76,8 @@ maxloc0_8_r8 (gfc_array_i8 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -196,19 +188,8 @@ mmaxloc0_8_r8 (gfc_array_i8 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -335,9 +316,6 @@ smaxloc0_8_r8 (gfc_array_i8 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n   dstride = retarray->dim[0].stride;"}, {"sha": "7ba4fa56360da8b13a4e9863355e3ffe0c04f8fb", "filename": "libgfortran/generated/maxloc1_16_i16.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxloc1_16_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxloc1_16_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_16_i16.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -64,11 +64,6 @@ maxloc1_16_i16 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -105,9 +100,6 @@ maxloc1_16_i16 (gfc_array_i16 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -210,14 +202,6 @@ mmaxloc1_16_i16 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   if (len <= 0)\n     return;\n@@ -259,9 +243,6 @@ mmaxloc1_16_i16 (gfc_array_i16 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -392,9 +373,6 @@ smaxloc1_16_i16 (gfc_array_i16 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n     dstride = retarray->dim[0].stride;"}, {"sha": "af438c7758a09cc52a18c4f8679c9181a32eac7f", "filename": "libgfortran/generated/maxloc1_16_i4.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxloc1_16_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxloc1_16_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_16_i4.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -64,11 +64,6 @@ maxloc1_16_i4 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -105,9 +100,6 @@ maxloc1_16_i4 (gfc_array_i16 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -210,14 +202,6 @@ mmaxloc1_16_i4 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   if (len <= 0)\n     return;\n@@ -259,9 +243,6 @@ mmaxloc1_16_i4 (gfc_array_i16 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -392,9 +373,6 @@ smaxloc1_16_i4 (gfc_array_i16 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n     dstride = retarray->dim[0].stride;"}, {"sha": "63de2a1a94e57da8c769e5b423de723af15d0061", "filename": "libgfortran/generated/maxloc1_16_i8.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxloc1_16_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxloc1_16_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_16_i8.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -64,11 +64,6 @@ maxloc1_16_i8 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -105,9 +100,6 @@ maxloc1_16_i8 (gfc_array_i16 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -210,14 +202,6 @@ mmaxloc1_16_i8 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   if (len <= 0)\n     return;\n@@ -259,9 +243,6 @@ mmaxloc1_16_i8 (gfc_array_i16 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -392,9 +373,6 @@ smaxloc1_16_i8 (gfc_array_i16 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n     dstride = retarray->dim[0].stride;"}, {"sha": "e78658d58f5eb2174ed9a29705142ef2a9b383a4", "filename": "libgfortran/generated/maxloc1_16_r10.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxloc1_16_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxloc1_16_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_16_r10.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -64,11 +64,6 @@ maxloc1_16_r10 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -105,9 +100,6 @@ maxloc1_16_r10 (gfc_array_i16 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -210,14 +202,6 @@ mmaxloc1_16_r10 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   if (len <= 0)\n     return;\n@@ -259,9 +243,6 @@ mmaxloc1_16_r10 (gfc_array_i16 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -392,9 +373,6 @@ smaxloc1_16_r10 (gfc_array_i16 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n     dstride = retarray->dim[0].stride;"}, {"sha": "c92dfc9cc39c658173b9c21e6f7e9e5957ae3312", "filename": "libgfortran/generated/maxloc1_16_r16.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxloc1_16_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxloc1_16_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_16_r16.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -64,11 +64,6 @@ maxloc1_16_r16 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -105,9 +100,6 @@ maxloc1_16_r16 (gfc_array_i16 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -210,14 +202,6 @@ mmaxloc1_16_r16 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   if (len <= 0)\n     return;\n@@ -259,9 +243,6 @@ mmaxloc1_16_r16 (gfc_array_i16 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -392,9 +373,6 @@ smaxloc1_16_r16 (gfc_array_i16 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n     dstride = retarray->dim[0].stride;"}, {"sha": "dbe14d7cf08c3d150d46e83e00cce2caa9c3c12f", "filename": "libgfortran/generated/maxloc1_16_r4.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxloc1_16_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxloc1_16_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_16_r4.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -64,11 +64,6 @@ maxloc1_16_r4 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -105,9 +100,6 @@ maxloc1_16_r4 (gfc_array_i16 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -210,14 +202,6 @@ mmaxloc1_16_r4 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   if (len <= 0)\n     return;\n@@ -259,9 +243,6 @@ mmaxloc1_16_r4 (gfc_array_i16 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -392,9 +373,6 @@ smaxloc1_16_r4 (gfc_array_i16 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n     dstride = retarray->dim[0].stride;"}, {"sha": "2dd306620ad2b9efa5e715f1214298b5dad36de0", "filename": "libgfortran/generated/maxloc1_16_r8.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxloc1_16_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxloc1_16_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_16_r8.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -64,11 +64,6 @@ maxloc1_16_r8 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -105,9 +100,6 @@ maxloc1_16_r8 (gfc_array_i16 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -210,14 +202,6 @@ mmaxloc1_16_r8 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   if (len <= 0)\n     return;\n@@ -259,9 +243,6 @@ mmaxloc1_16_r8 (gfc_array_i16 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -392,9 +373,6 @@ smaxloc1_16_r8 (gfc_array_i16 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n     dstride = retarray->dim[0].stride;"}, {"sha": "d3609fb6ef731625869ec00ac7c7c7d1f5e8b65a", "filename": "libgfortran/generated/maxloc1_4_i16.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxloc1_4_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxloc1_4_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_4_i16.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -64,11 +64,6 @@ maxloc1_4_i16 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -105,9 +100,6 @@ maxloc1_4_i16 (gfc_array_i4 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -210,14 +202,6 @@ mmaxloc1_4_i16 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   if (len <= 0)\n     return;\n@@ -259,9 +243,6 @@ mmaxloc1_4_i16 (gfc_array_i4 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -392,9 +373,6 @@ smaxloc1_4_i16 (gfc_array_i4 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n     dstride = retarray->dim[0].stride;"}, {"sha": "d4f53a4bcb2b0c580040bedff7a56b9706046d90", "filename": "libgfortran/generated/maxloc1_4_i4.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxloc1_4_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxloc1_4_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_4_i4.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -64,11 +64,6 @@ maxloc1_4_i4 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -105,9 +100,6 @@ maxloc1_4_i4 (gfc_array_i4 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -210,14 +202,6 @@ mmaxloc1_4_i4 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   if (len <= 0)\n     return;\n@@ -259,9 +243,6 @@ mmaxloc1_4_i4 (gfc_array_i4 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -392,9 +373,6 @@ smaxloc1_4_i4 (gfc_array_i4 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n     dstride = retarray->dim[0].stride;"}, {"sha": "71e804560a187d09a73deeec72b3c9d3fca65d17", "filename": "libgfortran/generated/maxloc1_4_i8.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxloc1_4_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxloc1_4_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_4_i8.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -64,11 +64,6 @@ maxloc1_4_i8 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -105,9 +100,6 @@ maxloc1_4_i8 (gfc_array_i4 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -210,14 +202,6 @@ mmaxloc1_4_i8 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   if (len <= 0)\n     return;\n@@ -259,9 +243,6 @@ mmaxloc1_4_i8 (gfc_array_i4 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -392,9 +373,6 @@ smaxloc1_4_i8 (gfc_array_i4 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n     dstride = retarray->dim[0].stride;"}, {"sha": "3c376591fc3c5dd8ce655273035b3197bc63ab4c", "filename": "libgfortran/generated/maxloc1_4_r10.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxloc1_4_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxloc1_4_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_4_r10.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -64,11 +64,6 @@ maxloc1_4_r10 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -105,9 +100,6 @@ maxloc1_4_r10 (gfc_array_i4 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -210,14 +202,6 @@ mmaxloc1_4_r10 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   if (len <= 0)\n     return;\n@@ -259,9 +243,6 @@ mmaxloc1_4_r10 (gfc_array_i4 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -392,9 +373,6 @@ smaxloc1_4_r10 (gfc_array_i4 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n     dstride = retarray->dim[0].stride;"}, {"sha": "6c98b6f0adaa45c9b36250239bb3449ccd134ae0", "filename": "libgfortran/generated/maxloc1_4_r16.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxloc1_4_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxloc1_4_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_4_r16.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -64,11 +64,6 @@ maxloc1_4_r16 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -105,9 +100,6 @@ maxloc1_4_r16 (gfc_array_i4 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -210,14 +202,6 @@ mmaxloc1_4_r16 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   if (len <= 0)\n     return;\n@@ -259,9 +243,6 @@ mmaxloc1_4_r16 (gfc_array_i4 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -392,9 +373,6 @@ smaxloc1_4_r16 (gfc_array_i4 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n     dstride = retarray->dim[0].stride;"}, {"sha": "e9b8d454cf5359032be24aaee6f6547ea54ec799", "filename": "libgfortran/generated/maxloc1_4_r4.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxloc1_4_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxloc1_4_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_4_r4.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -64,11 +64,6 @@ maxloc1_4_r4 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -105,9 +100,6 @@ maxloc1_4_r4 (gfc_array_i4 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -210,14 +202,6 @@ mmaxloc1_4_r4 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   if (len <= 0)\n     return;\n@@ -259,9 +243,6 @@ mmaxloc1_4_r4 (gfc_array_i4 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -392,9 +373,6 @@ smaxloc1_4_r4 (gfc_array_i4 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n     dstride = retarray->dim[0].stride;"}, {"sha": "4651e3751fdcf3446918815ceb70810924919bc7", "filename": "libgfortran/generated/maxloc1_4_r8.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxloc1_4_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxloc1_4_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_4_r8.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -64,11 +64,6 @@ maxloc1_4_r8 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -105,9 +100,6 @@ maxloc1_4_r8 (gfc_array_i4 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -210,14 +202,6 @@ mmaxloc1_4_r8 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   if (len <= 0)\n     return;\n@@ -259,9 +243,6 @@ mmaxloc1_4_r8 (gfc_array_i4 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -392,9 +373,6 @@ smaxloc1_4_r8 (gfc_array_i4 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n     dstride = retarray->dim[0].stride;"}, {"sha": "811bb2945432442c5824b759ab332b906fdb0fde", "filename": "libgfortran/generated/maxloc1_8_i16.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxloc1_8_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxloc1_8_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_8_i16.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -64,11 +64,6 @@ maxloc1_8_i16 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -105,9 +100,6 @@ maxloc1_8_i16 (gfc_array_i8 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -210,14 +202,6 @@ mmaxloc1_8_i16 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   if (len <= 0)\n     return;\n@@ -259,9 +243,6 @@ mmaxloc1_8_i16 (gfc_array_i8 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -392,9 +373,6 @@ smaxloc1_8_i16 (gfc_array_i8 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n     dstride = retarray->dim[0].stride;"}, {"sha": "459d87db0ff4ef53fe72a2646471b16fed2fb68a", "filename": "libgfortran/generated/maxloc1_8_i4.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxloc1_8_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxloc1_8_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_8_i4.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -64,11 +64,6 @@ maxloc1_8_i4 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -105,9 +100,6 @@ maxloc1_8_i4 (gfc_array_i8 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -210,14 +202,6 @@ mmaxloc1_8_i4 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   if (len <= 0)\n     return;\n@@ -259,9 +243,6 @@ mmaxloc1_8_i4 (gfc_array_i8 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -392,9 +373,6 @@ smaxloc1_8_i4 (gfc_array_i8 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n     dstride = retarray->dim[0].stride;"}, {"sha": "da054c05b51ae62ef70d3047055d8acf2b2f5e92", "filename": "libgfortran/generated/maxloc1_8_i8.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxloc1_8_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxloc1_8_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_8_i8.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -64,11 +64,6 @@ maxloc1_8_i8 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -105,9 +100,6 @@ maxloc1_8_i8 (gfc_array_i8 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -210,14 +202,6 @@ mmaxloc1_8_i8 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   if (len <= 0)\n     return;\n@@ -259,9 +243,6 @@ mmaxloc1_8_i8 (gfc_array_i8 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -392,9 +373,6 @@ smaxloc1_8_i8 (gfc_array_i8 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n     dstride = retarray->dim[0].stride;"}, {"sha": "94d538eeeca9bc0769f2b83bdda323cad460cf85", "filename": "libgfortran/generated/maxloc1_8_r10.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxloc1_8_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxloc1_8_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_8_r10.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -64,11 +64,6 @@ maxloc1_8_r10 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -105,9 +100,6 @@ maxloc1_8_r10 (gfc_array_i8 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -210,14 +202,6 @@ mmaxloc1_8_r10 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   if (len <= 0)\n     return;\n@@ -259,9 +243,6 @@ mmaxloc1_8_r10 (gfc_array_i8 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -392,9 +373,6 @@ smaxloc1_8_r10 (gfc_array_i8 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n     dstride = retarray->dim[0].stride;"}, {"sha": "01b237eb976249ec09061a21e4599b24a1677553", "filename": "libgfortran/generated/maxloc1_8_r16.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxloc1_8_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxloc1_8_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_8_r16.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -64,11 +64,6 @@ maxloc1_8_r16 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -105,9 +100,6 @@ maxloc1_8_r16 (gfc_array_i8 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -210,14 +202,6 @@ mmaxloc1_8_r16 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   if (len <= 0)\n     return;\n@@ -259,9 +243,6 @@ mmaxloc1_8_r16 (gfc_array_i8 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -392,9 +373,6 @@ smaxloc1_8_r16 (gfc_array_i8 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n     dstride = retarray->dim[0].stride;"}, {"sha": "359cb7c1543da2bb8b15f63a7ccffc7a77026c3d", "filename": "libgfortran/generated/maxloc1_8_r4.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxloc1_8_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxloc1_8_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_8_r4.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -64,11 +64,6 @@ maxloc1_8_r4 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -105,9 +100,6 @@ maxloc1_8_r4 (gfc_array_i8 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -210,14 +202,6 @@ mmaxloc1_8_r4 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   if (len <= 0)\n     return;\n@@ -259,9 +243,6 @@ mmaxloc1_8_r4 (gfc_array_i8 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -392,9 +373,6 @@ smaxloc1_8_r4 (gfc_array_i8 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n     dstride = retarray->dim[0].stride;"}, {"sha": "8e91eb3d2fb1f7790e6e1701c4c1d5098009b5dc", "filename": "libgfortran/generated/maxloc1_8_r8.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxloc1_8_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxloc1_8_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_8_r8.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -64,11 +64,6 @@ maxloc1_8_r8 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -105,9 +100,6 @@ maxloc1_8_r8 (gfc_array_i8 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -210,14 +202,6 @@ mmaxloc1_8_r8 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   if (len <= 0)\n     return;\n@@ -259,9 +243,6 @@ mmaxloc1_8_r8 (gfc_array_i8 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -392,9 +373,6 @@ smaxloc1_8_r8 (gfc_array_i8 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n     dstride = retarray->dim[0].stride;"}, {"sha": "77412e50d323ef6c28cc2bff8046e8bff28ed11c", "filename": "libgfortran/generated/maxval_i16.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxval_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxval_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxval_i16.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -63,11 +63,6 @@ maxval_i16 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -104,9 +99,6 @@ maxval_i16 (gfc_array_i16 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -204,14 +196,6 @@ mmaxval_i16 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   if (len <= 0)\n     return;\n@@ -253,9 +237,6 @@ mmaxval_i16 (gfc_array_i16 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -381,9 +362,6 @@ smaxval_i16 (gfc_array_i16 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n     dstride = retarray->dim[0].stride;"}, {"sha": "2f135802179a6e7922bf72a6f4d5f49a9bcb7042", "filename": "libgfortran/generated/maxval_i4.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxval_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxval_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxval_i4.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -63,11 +63,6 @@ maxval_i4 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -104,9 +99,6 @@ maxval_i4 (gfc_array_i4 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -204,14 +196,6 @@ mmaxval_i4 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   if (len <= 0)\n     return;\n@@ -253,9 +237,6 @@ mmaxval_i4 (gfc_array_i4 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -381,9 +362,6 @@ smaxval_i4 (gfc_array_i4 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n     dstride = retarray->dim[0].stride;"}, {"sha": "40726c01287b12d34af3325f124f868c31242ec3", "filename": "libgfortran/generated/maxval_i8.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxval_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxval_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxval_i8.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -63,11 +63,6 @@ maxval_i8 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -104,9 +99,6 @@ maxval_i8 (gfc_array_i8 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -204,14 +196,6 @@ mmaxval_i8 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   if (len <= 0)\n     return;\n@@ -253,9 +237,6 @@ mmaxval_i8 (gfc_array_i8 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -381,9 +362,6 @@ smaxval_i8 (gfc_array_i8 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n     dstride = retarray->dim[0].stride;"}, {"sha": "db319884bb50d1d7b01bd464e4ebbdfec71dee70", "filename": "libgfortran/generated/maxval_r10.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxval_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxval_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxval_r10.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -63,11 +63,6 @@ maxval_r10 (gfc_array_r10 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -104,9 +99,6 @@ maxval_r10 (gfc_array_r10 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -204,14 +196,6 @@ mmaxval_r10 (gfc_array_r10 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   if (len <= 0)\n     return;\n@@ -253,9 +237,6 @@ mmaxval_r10 (gfc_array_r10 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -381,9 +362,6 @@ smaxval_r10 (gfc_array_r10 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n     dstride = retarray->dim[0].stride;"}, {"sha": "abb41bb18099773c0e8912a26f483c1f18471267", "filename": "libgfortran/generated/maxval_r16.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxval_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxval_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxval_r16.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -63,11 +63,6 @@ maxval_r16 (gfc_array_r16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -104,9 +99,6 @@ maxval_r16 (gfc_array_r16 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -204,14 +196,6 @@ mmaxval_r16 (gfc_array_r16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   if (len <= 0)\n     return;\n@@ -253,9 +237,6 @@ mmaxval_r16 (gfc_array_r16 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -381,9 +362,6 @@ smaxval_r16 (gfc_array_r16 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n     dstride = retarray->dim[0].stride;"}, {"sha": "217a37b19ee5decfc78bdc407ad5c8b6fe1d4919", "filename": "libgfortran/generated/maxval_r4.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxval_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxval_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxval_r4.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -63,11 +63,6 @@ maxval_r4 (gfc_array_r4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -104,9 +99,6 @@ maxval_r4 (gfc_array_r4 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -204,14 +196,6 @@ mmaxval_r4 (gfc_array_r4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   if (len <= 0)\n     return;\n@@ -253,9 +237,6 @@ mmaxval_r4 (gfc_array_r4 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -381,9 +362,6 @@ smaxval_r4 (gfc_array_r4 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n     dstride = retarray->dim[0].stride;"}, {"sha": "f455afc5fdf42f6e4758a45592539e64257667f1", "filename": "libgfortran/generated/maxval_r8.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxval_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fmaxval_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxval_r8.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -63,11 +63,6 @@ maxval_r8 (gfc_array_r8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -104,9 +99,6 @@ maxval_r8 (gfc_array_r8 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -204,14 +196,6 @@ mmaxval_r8 (gfc_array_r8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   if (len <= 0)\n     return;\n@@ -253,9 +237,6 @@ mmaxval_r8 (gfc_array_r8 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -381,9 +362,6 @@ smaxval_r8 (gfc_array_r8 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n     dstride = retarray->dim[0].stride;"}, {"sha": "3a85b1bad71821a2cad1c570b5973fba2f0b8187", "filename": "libgfortran/generated/minloc0_16_i16.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminloc0_16_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminloc0_16_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_16_i16.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -76,16 +76,8 @@ minloc0_16_i16 (gfc_array_i16 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -196,19 +188,8 @@ mminloc0_16_i16 (gfc_array_i16 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -335,9 +316,6 @@ sminloc0_16_i16 (gfc_array_i16 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n   dstride = retarray->dim[0].stride;"}, {"sha": "5fc61237e46df8c8386b3e6217116f6196d4f531", "filename": "libgfortran/generated/minloc0_16_i4.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminloc0_16_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminloc0_16_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_16_i4.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -76,16 +76,8 @@ minloc0_16_i4 (gfc_array_i16 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -196,19 +188,8 @@ mminloc0_16_i4 (gfc_array_i16 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -335,9 +316,6 @@ sminloc0_16_i4 (gfc_array_i16 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n   dstride = retarray->dim[0].stride;"}, {"sha": "486108fed4b42186b12b72578ee7516a67ca5633", "filename": "libgfortran/generated/minloc0_16_i8.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminloc0_16_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminloc0_16_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_16_i8.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -76,16 +76,8 @@ minloc0_16_i8 (gfc_array_i16 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -196,19 +188,8 @@ mminloc0_16_i8 (gfc_array_i16 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -335,9 +316,6 @@ sminloc0_16_i8 (gfc_array_i16 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n   dstride = retarray->dim[0].stride;"}, {"sha": "e00fb5032d50b0f1adf7339692986d5536da6847", "filename": "libgfortran/generated/minloc0_16_r10.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminloc0_16_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminloc0_16_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_16_r10.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -76,16 +76,8 @@ minloc0_16_r10 (gfc_array_i16 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -196,19 +188,8 @@ mminloc0_16_r10 (gfc_array_i16 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -335,9 +316,6 @@ sminloc0_16_r10 (gfc_array_i16 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n   dstride = retarray->dim[0].stride;"}, {"sha": "c6a8d8e5e7a2d0a473944b3ea81d620931cebbfa", "filename": "libgfortran/generated/minloc0_16_r16.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminloc0_16_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminloc0_16_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_16_r16.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -76,16 +76,8 @@ minloc0_16_r16 (gfc_array_i16 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -196,19 +188,8 @@ mminloc0_16_r16 (gfc_array_i16 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -335,9 +316,6 @@ sminloc0_16_r16 (gfc_array_i16 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n   dstride = retarray->dim[0].stride;"}, {"sha": "f6b10c83a423dd2a075e8999e8d7aa2ffa3bd6c4", "filename": "libgfortran/generated/minloc0_16_r4.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminloc0_16_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminloc0_16_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_16_r4.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -76,16 +76,8 @@ minloc0_16_r4 (gfc_array_i16 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -196,19 +188,8 @@ mminloc0_16_r4 (gfc_array_i16 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -335,9 +316,6 @@ sminloc0_16_r4 (gfc_array_i16 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n   dstride = retarray->dim[0].stride;"}, {"sha": "c129cd70d2fa6f00c606b5124d2d6ad189cae00f", "filename": "libgfortran/generated/minloc0_16_r8.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminloc0_16_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminloc0_16_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_16_r8.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -76,16 +76,8 @@ minloc0_16_r8 (gfc_array_i16 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -196,19 +188,8 @@ mminloc0_16_r8 (gfc_array_i16 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -335,9 +316,6 @@ sminloc0_16_r8 (gfc_array_i16 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n   dstride = retarray->dim[0].stride;"}, {"sha": "37233a78e2b88c19bf1adce847ec0f1401c45936", "filename": "libgfortran/generated/minloc0_4_i16.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminloc0_4_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminloc0_4_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_4_i16.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -76,16 +76,8 @@ minloc0_4_i16 (gfc_array_i4 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -196,19 +188,8 @@ mminloc0_4_i16 (gfc_array_i4 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -335,9 +316,6 @@ sminloc0_4_i16 (gfc_array_i4 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n   dstride = retarray->dim[0].stride;"}, {"sha": "c246b96ff29300da52d7c912afb3ef0b980f528a", "filename": "libgfortran/generated/minloc0_4_i4.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminloc0_4_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminloc0_4_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_4_i4.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -76,16 +76,8 @@ minloc0_4_i4 (gfc_array_i4 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -196,19 +188,8 @@ mminloc0_4_i4 (gfc_array_i4 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -335,9 +316,6 @@ sminloc0_4_i4 (gfc_array_i4 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n   dstride = retarray->dim[0].stride;"}, {"sha": "8b03ceba63d0136641b98219bf0d864533124989", "filename": "libgfortran/generated/minloc0_4_i8.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminloc0_4_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminloc0_4_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_4_i8.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -76,16 +76,8 @@ minloc0_4_i8 (gfc_array_i4 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -196,19 +188,8 @@ mminloc0_4_i8 (gfc_array_i4 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -335,9 +316,6 @@ sminloc0_4_i8 (gfc_array_i4 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n   dstride = retarray->dim[0].stride;"}, {"sha": "06664d89ecec30942c88b257b99afe2aa862260a", "filename": "libgfortran/generated/minloc0_4_r10.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminloc0_4_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminloc0_4_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_4_r10.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -76,16 +76,8 @@ minloc0_4_r10 (gfc_array_i4 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -196,19 +188,8 @@ mminloc0_4_r10 (gfc_array_i4 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -335,9 +316,6 @@ sminloc0_4_r10 (gfc_array_i4 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n   dstride = retarray->dim[0].stride;"}, {"sha": "29c880c68457520f59ce595fa20b760dc25840a2", "filename": "libgfortran/generated/minloc0_4_r16.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminloc0_4_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminloc0_4_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_4_r16.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -76,16 +76,8 @@ minloc0_4_r16 (gfc_array_i4 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -196,19 +188,8 @@ mminloc0_4_r16 (gfc_array_i4 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -335,9 +316,6 @@ sminloc0_4_r16 (gfc_array_i4 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n   dstride = retarray->dim[0].stride;"}, {"sha": "99c6c2f318b0717816e2aa736c66710bb5ba1538", "filename": "libgfortran/generated/minloc0_4_r4.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminloc0_4_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminloc0_4_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_4_r4.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -76,16 +76,8 @@ minloc0_4_r4 (gfc_array_i4 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -196,19 +188,8 @@ mminloc0_4_r4 (gfc_array_i4 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -335,9 +316,6 @@ sminloc0_4_r4 (gfc_array_i4 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n   dstride = retarray->dim[0].stride;"}, {"sha": "08d645ea5845176796d274b572832931161868bc", "filename": "libgfortran/generated/minloc0_4_r8.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminloc0_4_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminloc0_4_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_4_r8.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -76,16 +76,8 @@ minloc0_4_r8 (gfc_array_i4 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -196,19 +188,8 @@ mminloc0_4_r8 (gfc_array_i4 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -335,9 +316,6 @@ sminloc0_4_r8 (gfc_array_i4 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n   dstride = retarray->dim[0].stride;"}, {"sha": "f669a93dcb657c7e10b77d7c4eea7f797d2a37c1", "filename": "libgfortran/generated/minloc0_8_i16.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminloc0_8_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminloc0_8_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_8_i16.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -76,16 +76,8 @@ minloc0_8_i16 (gfc_array_i8 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -196,19 +188,8 @@ mminloc0_8_i16 (gfc_array_i8 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -335,9 +316,6 @@ sminloc0_8_i16 (gfc_array_i8 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n   dstride = retarray->dim[0].stride;"}, {"sha": "349c8b3c52581ec097eb8196d648f69e6068f4c5", "filename": "libgfortran/generated/minloc0_8_i4.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminloc0_8_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminloc0_8_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_8_i4.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -76,16 +76,8 @@ minloc0_8_i4 (gfc_array_i8 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -196,19 +188,8 @@ mminloc0_8_i4 (gfc_array_i8 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -335,9 +316,6 @@ sminloc0_8_i4 (gfc_array_i8 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n   dstride = retarray->dim[0].stride;"}, {"sha": "00d737e9a5ca819d26ae0c54c2864b7f7f403ef4", "filename": "libgfortran/generated/minloc0_8_i8.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminloc0_8_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminloc0_8_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_8_i8.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -76,16 +76,8 @@ minloc0_8_i8 (gfc_array_i8 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -196,19 +188,8 @@ mminloc0_8_i8 (gfc_array_i8 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -335,9 +316,6 @@ sminloc0_8_i8 (gfc_array_i8 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n   dstride = retarray->dim[0].stride;"}, {"sha": "c95778c57653bfe8135b2f2089c3eed1b008c09b", "filename": "libgfortran/generated/minloc0_8_r10.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminloc0_8_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminloc0_8_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_8_r10.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -76,16 +76,8 @@ minloc0_8_r10 (gfc_array_i8 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -196,19 +188,8 @@ mminloc0_8_r10 (gfc_array_i8 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -335,9 +316,6 @@ sminloc0_8_r10 (gfc_array_i8 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n   dstride = retarray->dim[0].stride;"}, {"sha": "1d968f896070273b10eba14eef79c9708ba41494", "filename": "libgfortran/generated/minloc0_8_r16.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminloc0_8_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminloc0_8_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_8_r16.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -76,16 +76,8 @@ minloc0_8_r16 (gfc_array_i8 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -196,19 +188,8 @@ mminloc0_8_r16 (gfc_array_i8 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -335,9 +316,6 @@ sminloc0_8_r16 (gfc_array_i8 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n   dstride = retarray->dim[0].stride;"}, {"sha": "f83af9366a54d3ae608a4fd6ee1d61c8046d5f48", "filename": "libgfortran/generated/minloc0_8_r4.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminloc0_8_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminloc0_8_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_8_r4.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -76,16 +76,8 @@ minloc0_8_r4 (gfc_array_i8 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -196,19 +188,8 @@ mminloc0_8_r4 (gfc_array_i8 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -335,9 +316,6 @@ sminloc0_8_r4 (gfc_array_i8 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n   dstride = retarray->dim[0].stride;"}, {"sha": "8784b280b0967214b20dc2f14d4d3b6281783204", "filename": "libgfortran/generated/minloc0_8_r8.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminloc0_8_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminloc0_8_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_8_r8.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -76,16 +76,8 @@ minloc0_8_r8 (gfc_array_i8 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -196,19 +188,8 @@ mminloc0_8_r8 (gfc_array_i8 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -335,9 +316,6 @@ sminloc0_8_r8 (gfc_array_i8 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n   dstride = retarray->dim[0].stride;"}, {"sha": "e1aa42abad9e01d7b06d3a2be344ccf7a273b462", "filename": "libgfortran/generated/minloc1_16_i16.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminloc1_16_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminloc1_16_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_16_i16.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -64,11 +64,6 @@ minloc1_16_i16 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -105,9 +100,6 @@ minloc1_16_i16 (gfc_array_i16 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -210,14 +202,6 @@ mminloc1_16_i16 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   if (len <= 0)\n     return;\n@@ -259,9 +243,6 @@ mminloc1_16_i16 (gfc_array_i16 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -392,9 +373,6 @@ sminloc1_16_i16 (gfc_array_i16 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n     dstride = retarray->dim[0].stride;"}, {"sha": "6a42d90baa45429765c3f9456ad2b7652b8256b8", "filename": "libgfortran/generated/minloc1_16_i4.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminloc1_16_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminloc1_16_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_16_i4.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -64,11 +64,6 @@ minloc1_16_i4 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -105,9 +100,6 @@ minloc1_16_i4 (gfc_array_i16 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -210,14 +202,6 @@ mminloc1_16_i4 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   if (len <= 0)\n     return;\n@@ -259,9 +243,6 @@ mminloc1_16_i4 (gfc_array_i16 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -392,9 +373,6 @@ sminloc1_16_i4 (gfc_array_i16 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n     dstride = retarray->dim[0].stride;"}, {"sha": "72d0f94f2134721852f15c46a6ae199a6c8378c0", "filename": "libgfortran/generated/minloc1_16_i8.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminloc1_16_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminloc1_16_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_16_i8.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -64,11 +64,6 @@ minloc1_16_i8 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -105,9 +100,6 @@ minloc1_16_i8 (gfc_array_i16 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -210,14 +202,6 @@ mminloc1_16_i8 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   if (len <= 0)\n     return;\n@@ -259,9 +243,6 @@ mminloc1_16_i8 (gfc_array_i16 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -392,9 +373,6 @@ sminloc1_16_i8 (gfc_array_i16 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n     dstride = retarray->dim[0].stride;"}, {"sha": "16d5903ff9dabd52b97be27fd4c1b1a9d2778475", "filename": "libgfortran/generated/minloc1_16_r10.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminloc1_16_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminloc1_16_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_16_r10.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -64,11 +64,6 @@ minloc1_16_r10 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -105,9 +100,6 @@ minloc1_16_r10 (gfc_array_i16 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -210,14 +202,6 @@ mminloc1_16_r10 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   if (len <= 0)\n     return;\n@@ -259,9 +243,6 @@ mminloc1_16_r10 (gfc_array_i16 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -392,9 +373,6 @@ sminloc1_16_r10 (gfc_array_i16 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n     dstride = retarray->dim[0].stride;"}, {"sha": "aee2cd1a9b89949f96d567bb7e2348d0e68d1e0d", "filename": "libgfortran/generated/minloc1_16_r16.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminloc1_16_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminloc1_16_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_16_r16.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -64,11 +64,6 @@ minloc1_16_r16 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -105,9 +100,6 @@ minloc1_16_r16 (gfc_array_i16 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -210,14 +202,6 @@ mminloc1_16_r16 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   if (len <= 0)\n     return;\n@@ -259,9 +243,6 @@ mminloc1_16_r16 (gfc_array_i16 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -392,9 +373,6 @@ sminloc1_16_r16 (gfc_array_i16 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n     dstride = retarray->dim[0].stride;"}, {"sha": "16bbfeaea03a186134c341ace440c03a1205035a", "filename": "libgfortran/generated/minloc1_16_r4.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminloc1_16_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminloc1_16_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_16_r4.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -64,11 +64,6 @@ minloc1_16_r4 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -105,9 +100,6 @@ minloc1_16_r4 (gfc_array_i16 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -210,14 +202,6 @@ mminloc1_16_r4 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   if (len <= 0)\n     return;\n@@ -259,9 +243,6 @@ mminloc1_16_r4 (gfc_array_i16 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -392,9 +373,6 @@ sminloc1_16_r4 (gfc_array_i16 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n     dstride = retarray->dim[0].stride;"}, {"sha": "fe7c940bbe70367f7a2364e4f366e05d8dd6218b", "filename": "libgfortran/generated/minloc1_16_r8.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminloc1_16_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminloc1_16_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_16_r8.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -64,11 +64,6 @@ minloc1_16_r8 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -105,9 +100,6 @@ minloc1_16_r8 (gfc_array_i16 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -210,14 +202,6 @@ mminloc1_16_r8 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   if (len <= 0)\n     return;\n@@ -259,9 +243,6 @@ mminloc1_16_r8 (gfc_array_i16 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -392,9 +373,6 @@ sminloc1_16_r8 (gfc_array_i16 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n     dstride = retarray->dim[0].stride;"}, {"sha": "327e8c9116def7acedb2bc85a58782272c953987", "filename": "libgfortran/generated/minloc1_4_i16.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminloc1_4_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminloc1_4_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_4_i16.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -64,11 +64,6 @@ minloc1_4_i16 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -105,9 +100,6 @@ minloc1_4_i16 (gfc_array_i4 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -210,14 +202,6 @@ mminloc1_4_i16 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   if (len <= 0)\n     return;\n@@ -259,9 +243,6 @@ mminloc1_4_i16 (gfc_array_i4 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -392,9 +373,6 @@ sminloc1_4_i16 (gfc_array_i4 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n     dstride = retarray->dim[0].stride;"}, {"sha": "a7dfa1f6396ee6231df1f8b576335dc4cdeb2469", "filename": "libgfortran/generated/minloc1_4_i4.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminloc1_4_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminloc1_4_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_4_i4.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -64,11 +64,6 @@ minloc1_4_i4 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -105,9 +100,6 @@ minloc1_4_i4 (gfc_array_i4 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -210,14 +202,6 @@ mminloc1_4_i4 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   if (len <= 0)\n     return;\n@@ -259,9 +243,6 @@ mminloc1_4_i4 (gfc_array_i4 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -392,9 +373,6 @@ sminloc1_4_i4 (gfc_array_i4 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n     dstride = retarray->dim[0].stride;"}, {"sha": "34d0192861e6bc1a4321487c04b55a995ceca857", "filename": "libgfortran/generated/minloc1_4_i8.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminloc1_4_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminloc1_4_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_4_i8.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -64,11 +64,6 @@ minloc1_4_i8 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -105,9 +100,6 @@ minloc1_4_i8 (gfc_array_i4 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -210,14 +202,6 @@ mminloc1_4_i8 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   if (len <= 0)\n     return;\n@@ -259,9 +243,6 @@ mminloc1_4_i8 (gfc_array_i4 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -392,9 +373,6 @@ sminloc1_4_i8 (gfc_array_i4 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n     dstride = retarray->dim[0].stride;"}, {"sha": "1a0d1b55562fbb997d05662a7759b273379d02ee", "filename": "libgfortran/generated/minloc1_4_r10.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminloc1_4_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminloc1_4_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_4_r10.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -64,11 +64,6 @@ minloc1_4_r10 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -105,9 +100,6 @@ minloc1_4_r10 (gfc_array_i4 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -210,14 +202,6 @@ mminloc1_4_r10 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   if (len <= 0)\n     return;\n@@ -259,9 +243,6 @@ mminloc1_4_r10 (gfc_array_i4 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -392,9 +373,6 @@ sminloc1_4_r10 (gfc_array_i4 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n     dstride = retarray->dim[0].stride;"}, {"sha": "ea3f020170930a33259a9fe11f76869ffabbdd7f", "filename": "libgfortran/generated/minloc1_4_r16.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminloc1_4_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminloc1_4_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_4_r16.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -64,11 +64,6 @@ minloc1_4_r16 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -105,9 +100,6 @@ minloc1_4_r16 (gfc_array_i4 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -210,14 +202,6 @@ mminloc1_4_r16 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   if (len <= 0)\n     return;\n@@ -259,9 +243,6 @@ mminloc1_4_r16 (gfc_array_i4 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -392,9 +373,6 @@ sminloc1_4_r16 (gfc_array_i4 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n     dstride = retarray->dim[0].stride;"}, {"sha": "c788433d13cc959570250be071abe0ec4753d0d1", "filename": "libgfortran/generated/minloc1_4_r4.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminloc1_4_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminloc1_4_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_4_r4.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -64,11 +64,6 @@ minloc1_4_r4 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -105,9 +100,6 @@ minloc1_4_r4 (gfc_array_i4 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -210,14 +202,6 @@ mminloc1_4_r4 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   if (len <= 0)\n     return;\n@@ -259,9 +243,6 @@ mminloc1_4_r4 (gfc_array_i4 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -392,9 +373,6 @@ sminloc1_4_r4 (gfc_array_i4 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n     dstride = retarray->dim[0].stride;"}, {"sha": "ba96e5f10a3a68cec14709f8956de5b8b5f18031", "filename": "libgfortran/generated/minloc1_4_r8.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminloc1_4_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminloc1_4_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_4_r8.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -64,11 +64,6 @@ minloc1_4_r8 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -105,9 +100,6 @@ minloc1_4_r8 (gfc_array_i4 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -210,14 +202,6 @@ mminloc1_4_r8 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   if (len <= 0)\n     return;\n@@ -259,9 +243,6 @@ mminloc1_4_r8 (gfc_array_i4 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -392,9 +373,6 @@ sminloc1_4_r8 (gfc_array_i4 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n     dstride = retarray->dim[0].stride;"}, {"sha": "817b20e78c9545cf7b1fe4bab7103153e8f675dd", "filename": "libgfortran/generated/minloc1_8_i16.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminloc1_8_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminloc1_8_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_8_i16.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -64,11 +64,6 @@ minloc1_8_i16 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -105,9 +100,6 @@ minloc1_8_i16 (gfc_array_i8 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -210,14 +202,6 @@ mminloc1_8_i16 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   if (len <= 0)\n     return;\n@@ -259,9 +243,6 @@ mminloc1_8_i16 (gfc_array_i8 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -392,9 +373,6 @@ sminloc1_8_i16 (gfc_array_i8 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n     dstride = retarray->dim[0].stride;"}, {"sha": "e087776f4b85441c096db78af56ee6e7f7d2f11c", "filename": "libgfortran/generated/minloc1_8_i4.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminloc1_8_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminloc1_8_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_8_i4.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -64,11 +64,6 @@ minloc1_8_i4 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -105,9 +100,6 @@ minloc1_8_i4 (gfc_array_i8 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -210,14 +202,6 @@ mminloc1_8_i4 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   if (len <= 0)\n     return;\n@@ -259,9 +243,6 @@ mminloc1_8_i4 (gfc_array_i8 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -392,9 +373,6 @@ sminloc1_8_i4 (gfc_array_i8 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n     dstride = retarray->dim[0].stride;"}, {"sha": "5c8e882b44b3828e5ac36d7475c46a878e79be42", "filename": "libgfortran/generated/minloc1_8_i8.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminloc1_8_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminloc1_8_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_8_i8.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -64,11 +64,6 @@ minloc1_8_i8 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -105,9 +100,6 @@ minloc1_8_i8 (gfc_array_i8 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -210,14 +202,6 @@ mminloc1_8_i8 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   if (len <= 0)\n     return;\n@@ -259,9 +243,6 @@ mminloc1_8_i8 (gfc_array_i8 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -392,9 +373,6 @@ sminloc1_8_i8 (gfc_array_i8 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n     dstride = retarray->dim[0].stride;"}, {"sha": "ade86acdd461d107b5b9d910e66bd9f6ef219b2c", "filename": "libgfortran/generated/minloc1_8_r10.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminloc1_8_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminloc1_8_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_8_r10.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -64,11 +64,6 @@ minloc1_8_r10 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -105,9 +100,6 @@ minloc1_8_r10 (gfc_array_i8 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -210,14 +202,6 @@ mminloc1_8_r10 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   if (len <= 0)\n     return;\n@@ -259,9 +243,6 @@ mminloc1_8_r10 (gfc_array_i8 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -392,9 +373,6 @@ sminloc1_8_r10 (gfc_array_i8 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n     dstride = retarray->dim[0].stride;"}, {"sha": "4137672b9d5733cb5236e0685230077f1137ed43", "filename": "libgfortran/generated/minloc1_8_r16.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminloc1_8_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminloc1_8_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_8_r16.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -64,11 +64,6 @@ minloc1_8_r16 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -105,9 +100,6 @@ minloc1_8_r16 (gfc_array_i8 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -210,14 +202,6 @@ mminloc1_8_r16 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   if (len <= 0)\n     return;\n@@ -259,9 +243,6 @@ mminloc1_8_r16 (gfc_array_i8 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -392,9 +373,6 @@ sminloc1_8_r16 (gfc_array_i8 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n     dstride = retarray->dim[0].stride;"}, {"sha": "643ffa483a18bac704920a1495edba9416b5b217", "filename": "libgfortran/generated/minloc1_8_r4.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminloc1_8_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminloc1_8_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_8_r4.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -64,11 +64,6 @@ minloc1_8_r4 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -105,9 +100,6 @@ minloc1_8_r4 (gfc_array_i8 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -210,14 +202,6 @@ mminloc1_8_r4 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   if (len <= 0)\n     return;\n@@ -259,9 +243,6 @@ mminloc1_8_r4 (gfc_array_i8 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -392,9 +373,6 @@ sminloc1_8_r4 (gfc_array_i8 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n     dstride = retarray->dim[0].stride;"}, {"sha": "e9e876ff2deb6991b85e6d993e7836be6b4766db", "filename": "libgfortran/generated/minloc1_8_r8.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminloc1_8_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminloc1_8_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_8_r8.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -64,11 +64,6 @@ minloc1_8_r8 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -105,9 +100,6 @@ minloc1_8_r8 (gfc_array_i8 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -210,14 +202,6 @@ mminloc1_8_r8 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   if (len <= 0)\n     return;\n@@ -259,9 +243,6 @@ mminloc1_8_r8 (gfc_array_i8 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -392,9 +373,6 @@ sminloc1_8_r8 (gfc_array_i8 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n     dstride = retarray->dim[0].stride;"}, {"sha": "7854fd4c7fd8fe32c26e58b1ffc2c8f5005f43b4", "filename": "libgfortran/generated/minval_i16.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminval_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminval_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminval_i16.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -63,11 +63,6 @@ minval_i16 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -104,9 +99,6 @@ minval_i16 (gfc_array_i16 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -204,14 +196,6 @@ mminval_i16 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   if (len <= 0)\n     return;\n@@ -253,9 +237,6 @@ mminval_i16 (gfc_array_i16 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -381,9 +362,6 @@ sminval_i16 (gfc_array_i16 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n     dstride = retarray->dim[0].stride;"}, {"sha": "a833529a06b0681baceef7688e8890286b5165b3", "filename": "libgfortran/generated/minval_i4.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminval_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminval_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminval_i4.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -63,11 +63,6 @@ minval_i4 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -104,9 +99,6 @@ minval_i4 (gfc_array_i4 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -204,14 +196,6 @@ mminval_i4 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   if (len <= 0)\n     return;\n@@ -253,9 +237,6 @@ mminval_i4 (gfc_array_i4 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -381,9 +362,6 @@ sminval_i4 (gfc_array_i4 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n     dstride = retarray->dim[0].stride;"}, {"sha": "9b3de20f3c1881afd4ff7ed2ca85296436ff236d", "filename": "libgfortran/generated/minval_i8.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminval_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminval_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminval_i8.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -63,11 +63,6 @@ minval_i8 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -104,9 +99,6 @@ minval_i8 (gfc_array_i8 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -204,14 +196,6 @@ mminval_i8 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   if (len <= 0)\n     return;\n@@ -253,9 +237,6 @@ mminval_i8 (gfc_array_i8 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -381,9 +362,6 @@ sminval_i8 (gfc_array_i8 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n     dstride = retarray->dim[0].stride;"}, {"sha": "85b51c61eb9b60dfd0f7f3574c50514731169758", "filename": "libgfortran/generated/minval_r10.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminval_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminval_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminval_r10.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -63,11 +63,6 @@ minval_r10 (gfc_array_r10 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -104,9 +99,6 @@ minval_r10 (gfc_array_r10 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -204,14 +196,6 @@ mminval_r10 (gfc_array_r10 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   if (len <= 0)\n     return;\n@@ -253,9 +237,6 @@ mminval_r10 (gfc_array_r10 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -381,9 +362,6 @@ sminval_r10 (gfc_array_r10 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n     dstride = retarray->dim[0].stride;"}, {"sha": "556d14c4d1a591f1445337c0089f2b7a94e12f55", "filename": "libgfortran/generated/minval_r16.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminval_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminval_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminval_r16.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -63,11 +63,6 @@ minval_r16 (gfc_array_r16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -104,9 +99,6 @@ minval_r16 (gfc_array_r16 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -204,14 +196,6 @@ mminval_r16 (gfc_array_r16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   if (len <= 0)\n     return;\n@@ -253,9 +237,6 @@ mminval_r16 (gfc_array_r16 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -381,9 +362,6 @@ sminval_r16 (gfc_array_r16 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n     dstride = retarray->dim[0].stride;"}, {"sha": "9fe32a9a7e5b25379416c1c6676d6e2dfdfa6ad6", "filename": "libgfortran/generated/minval_r4.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminval_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminval_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminval_r4.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -63,11 +63,6 @@ minval_r4 (gfc_array_r4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -104,9 +99,6 @@ minval_r4 (gfc_array_r4 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -204,14 +196,6 @@ mminval_r4 (gfc_array_r4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   if (len <= 0)\n     return;\n@@ -253,9 +237,6 @@ mminval_r4 (gfc_array_r4 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -381,9 +362,6 @@ sminval_r4 (gfc_array_r4 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n     dstride = retarray->dim[0].stride;"}, {"sha": "f713332055841cbbceb3f5f9711fc404d753e4f0", "filename": "libgfortran/generated/minval_r8.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminval_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fminval_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminval_r8.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -63,11 +63,6 @@ minval_r8 (gfc_array_r8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -104,9 +99,6 @@ minval_r8 (gfc_array_r8 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -204,14 +196,6 @@ mminval_r8 (gfc_array_r8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   if (len <= 0)\n     return;\n@@ -253,9 +237,6 @@ mminval_r8 (gfc_array_r8 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -381,9 +362,6 @@ sminval_r8 (gfc_array_r8 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n     dstride = retarray->dim[0].stride;"}, {"sha": "af3e3c29c5e2e8362414a9dae7d7fd6522a32bfc", "filename": "libgfortran/generated/product_c10.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fproduct_c10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fproduct_c10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_c10.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -62,11 +62,6 @@ product_c10 (gfc_array_c10 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -103,9 +98,6 @@ product_c10 (gfc_array_c10 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -202,14 +194,6 @@ mproduct_c10 (gfc_array_c10 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   if (len <= 0)\n     return;\n@@ -251,9 +235,6 @@ mproduct_c10 (gfc_array_c10 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -379,9 +360,6 @@ sproduct_c10 (gfc_array_c10 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n     dstride = retarray->dim[0].stride;"}, {"sha": "f913b5f2b2973c2376a94093bd9d23c8bab8bfcf", "filename": "libgfortran/generated/product_c16.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fproduct_c16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fproduct_c16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_c16.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -62,11 +62,6 @@ product_c16 (gfc_array_c16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -103,9 +98,6 @@ product_c16 (gfc_array_c16 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -202,14 +194,6 @@ mproduct_c16 (gfc_array_c16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   if (len <= 0)\n     return;\n@@ -251,9 +235,6 @@ mproduct_c16 (gfc_array_c16 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -379,9 +360,6 @@ sproduct_c16 (gfc_array_c16 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n     dstride = retarray->dim[0].stride;"}, {"sha": "68144dcfbe279cb619f2e60d82f6e7a9df3a9fd2", "filename": "libgfortran/generated/product_c4.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fproduct_c4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fproduct_c4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_c4.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -62,11 +62,6 @@ product_c4 (gfc_array_c4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -103,9 +98,6 @@ product_c4 (gfc_array_c4 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -202,14 +194,6 @@ mproduct_c4 (gfc_array_c4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   if (len <= 0)\n     return;\n@@ -251,9 +235,6 @@ mproduct_c4 (gfc_array_c4 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -379,9 +360,6 @@ sproduct_c4 (gfc_array_c4 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n     dstride = retarray->dim[0].stride;"}, {"sha": "183e5b2dff73922108e3aa6d8438ce47fe35d3d9", "filename": "libgfortran/generated/product_c8.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fproduct_c8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fproduct_c8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_c8.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -62,11 +62,6 @@ product_c8 (gfc_array_c8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -103,9 +98,6 @@ product_c8 (gfc_array_c8 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -202,14 +194,6 @@ mproduct_c8 (gfc_array_c8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   if (len <= 0)\n     return;\n@@ -251,9 +235,6 @@ mproduct_c8 (gfc_array_c8 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -379,9 +360,6 @@ sproduct_c8 (gfc_array_c8 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n     dstride = retarray->dim[0].stride;"}, {"sha": "7bd1c66247c60ef91661b8f7f8cc9f1375757e91", "filename": "libgfortran/generated/product_i16.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fproduct_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fproduct_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_i16.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -62,11 +62,6 @@ product_i16 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -103,9 +98,6 @@ product_i16 (gfc_array_i16 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -202,14 +194,6 @@ mproduct_i16 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   if (len <= 0)\n     return;\n@@ -251,9 +235,6 @@ mproduct_i16 (gfc_array_i16 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -379,9 +360,6 @@ sproduct_i16 (gfc_array_i16 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n     dstride = retarray->dim[0].stride;"}, {"sha": "8bf7e64802726ff8aaa9d1c5979df4138f51111e", "filename": "libgfortran/generated/product_i4.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fproduct_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fproduct_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_i4.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -62,11 +62,6 @@ product_i4 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -103,9 +98,6 @@ product_i4 (gfc_array_i4 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -202,14 +194,6 @@ mproduct_i4 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   if (len <= 0)\n     return;\n@@ -251,9 +235,6 @@ mproduct_i4 (gfc_array_i4 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -379,9 +360,6 @@ sproduct_i4 (gfc_array_i4 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n     dstride = retarray->dim[0].stride;"}, {"sha": "c5f9e09e5a4e24a23ca93b028ab35b2ed9f3c060", "filename": "libgfortran/generated/product_i8.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fproduct_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fproduct_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_i8.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -62,11 +62,6 @@ product_i8 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -103,9 +98,6 @@ product_i8 (gfc_array_i8 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -202,14 +194,6 @@ mproduct_i8 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   if (len <= 0)\n     return;\n@@ -251,9 +235,6 @@ mproduct_i8 (gfc_array_i8 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -379,9 +360,6 @@ sproduct_i8 (gfc_array_i8 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n     dstride = retarray->dim[0].stride;"}, {"sha": "091cec3ca61728c2b307d3d15d947c883506caa3", "filename": "libgfortran/generated/product_r10.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fproduct_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fproduct_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_r10.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -62,11 +62,6 @@ product_r10 (gfc_array_r10 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -103,9 +98,6 @@ product_r10 (gfc_array_r10 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -202,14 +194,6 @@ mproduct_r10 (gfc_array_r10 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   if (len <= 0)\n     return;\n@@ -251,9 +235,6 @@ mproduct_r10 (gfc_array_r10 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -379,9 +360,6 @@ sproduct_r10 (gfc_array_r10 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n     dstride = retarray->dim[0].stride;"}, {"sha": "4a059a9c44c3728438e2c8b69b859dcdaab30040", "filename": "libgfortran/generated/product_r16.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fproduct_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fproduct_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_r16.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -62,11 +62,6 @@ product_r16 (gfc_array_r16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -103,9 +98,6 @@ product_r16 (gfc_array_r16 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -202,14 +194,6 @@ mproduct_r16 (gfc_array_r16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   if (len <= 0)\n     return;\n@@ -251,9 +235,6 @@ mproduct_r16 (gfc_array_r16 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -379,9 +360,6 @@ sproduct_r16 (gfc_array_r16 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n     dstride = retarray->dim[0].stride;"}, {"sha": "763dd95e2b26a155f2abbb67c694a8bc26ff34a1", "filename": "libgfortran/generated/product_r4.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fproduct_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fproduct_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_r4.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -62,11 +62,6 @@ product_r4 (gfc_array_r4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -103,9 +98,6 @@ product_r4 (gfc_array_r4 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -202,14 +194,6 @@ mproduct_r4 (gfc_array_r4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   if (len <= 0)\n     return;\n@@ -251,9 +235,6 @@ mproduct_r4 (gfc_array_r4 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -379,9 +360,6 @@ sproduct_r4 (gfc_array_r4 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n     dstride = retarray->dim[0].stride;"}, {"sha": "43364994a174a663581f49eba025f649e1591c8c", "filename": "libgfortran/generated/product_r8.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fproduct_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fproduct_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_r8.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -62,11 +62,6 @@ product_r8 (gfc_array_r8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -103,9 +98,6 @@ product_r8 (gfc_array_r8 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -202,14 +194,6 @@ mproduct_r8 (gfc_array_r8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   if (len <= 0)\n     return;\n@@ -251,9 +235,6 @@ mproduct_r8 (gfc_array_r8 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -379,9 +360,6 @@ sproduct_r8 (gfc_array_r8 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n     dstride = retarray->dim[0].stride;"}, {"sha": "008dc2329d7f1d3d9028e5d488e60aa39f52a540", "filename": "libgfortran/generated/reshape_c10.c", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Freshape_c10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Freshape_c10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Freshape_c10.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -1,5 +1,5 @@\n /* Implementation of the RESHAPE\n-   Copyright 2002 Free Software Foundation, Inc.\n+   Copyright 2002, 2006 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -84,15 +84,6 @@ reshape_c10 (gfc_array_c10 * const restrict ret,\n   int n;\n   int dim;\n \n-  if (source->dim[0].stride == 0)\n-    source->dim[0].stride = 1;\n-  if (shape->dim[0].stride == 0)\n-    shape->dim[0].stride = 1;\n-  if (pad && pad->dim[0].stride == 0)\n-    pad->dim[0].stride = 1;\n-  if (order && order->dim[0].stride == 0)\n-    order->dim[0].stride = 1;\n-\n   if (ret->data == NULL)\n     {\n       rdim = shape->dim[0].ubound - shape->dim[0].lbound + 1;\n@@ -112,8 +103,6 @@ reshape_c10 (gfc_array_c10 * const restrict ret,\n   else\n     {\n       rdim = GFC_DESCRIPTOR_RANK (ret);\n-      if (ret->dim[0].stride == 0)\n-\tret->dim[0].stride = 1;\n     }\n \n   rsize = 1;"}, {"sha": "c176f2f511d4e3eee0d04b736e44619c2861e29a", "filename": "libgfortran/generated/reshape_c16.c", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Freshape_c16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Freshape_c16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Freshape_c16.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -1,5 +1,5 @@\n /* Implementation of the RESHAPE\n-   Copyright 2002 Free Software Foundation, Inc.\n+   Copyright 2002, 2006 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -84,15 +84,6 @@ reshape_c16 (gfc_array_c16 * const restrict ret,\n   int n;\n   int dim;\n \n-  if (source->dim[0].stride == 0)\n-    source->dim[0].stride = 1;\n-  if (shape->dim[0].stride == 0)\n-    shape->dim[0].stride = 1;\n-  if (pad && pad->dim[0].stride == 0)\n-    pad->dim[0].stride = 1;\n-  if (order && order->dim[0].stride == 0)\n-    order->dim[0].stride = 1;\n-\n   if (ret->data == NULL)\n     {\n       rdim = shape->dim[0].ubound - shape->dim[0].lbound + 1;\n@@ -112,8 +103,6 @@ reshape_c16 (gfc_array_c16 * const restrict ret,\n   else\n     {\n       rdim = GFC_DESCRIPTOR_RANK (ret);\n-      if (ret->dim[0].stride == 0)\n-\tret->dim[0].stride = 1;\n     }\n \n   rsize = 1;"}, {"sha": "d7132848728173c4cd80db87a5797c0133b58781", "filename": "libgfortran/generated/reshape_c4.c", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Freshape_c4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Freshape_c4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Freshape_c4.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -1,5 +1,5 @@\n /* Implementation of the RESHAPE\n-   Copyright 2002 Free Software Foundation, Inc.\n+   Copyright 2002, 2006 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -84,15 +84,6 @@ reshape_c4 (gfc_array_c4 * const restrict ret,\n   int n;\n   int dim;\n \n-  if (source->dim[0].stride == 0)\n-    source->dim[0].stride = 1;\n-  if (shape->dim[0].stride == 0)\n-    shape->dim[0].stride = 1;\n-  if (pad && pad->dim[0].stride == 0)\n-    pad->dim[0].stride = 1;\n-  if (order && order->dim[0].stride == 0)\n-    order->dim[0].stride = 1;\n-\n   if (ret->data == NULL)\n     {\n       rdim = shape->dim[0].ubound - shape->dim[0].lbound + 1;\n@@ -112,8 +103,6 @@ reshape_c4 (gfc_array_c4 * const restrict ret,\n   else\n     {\n       rdim = GFC_DESCRIPTOR_RANK (ret);\n-      if (ret->dim[0].stride == 0)\n-\tret->dim[0].stride = 1;\n     }\n \n   rsize = 1;"}, {"sha": "5c0e1ab5566c0d0dfa306b38cc1e24d26f116300", "filename": "libgfortran/generated/reshape_c8.c", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Freshape_c8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Freshape_c8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Freshape_c8.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -1,5 +1,5 @@\n /* Implementation of the RESHAPE\n-   Copyright 2002 Free Software Foundation, Inc.\n+   Copyright 2002, 2006 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -84,15 +84,6 @@ reshape_c8 (gfc_array_c8 * const restrict ret,\n   int n;\n   int dim;\n \n-  if (source->dim[0].stride == 0)\n-    source->dim[0].stride = 1;\n-  if (shape->dim[0].stride == 0)\n-    shape->dim[0].stride = 1;\n-  if (pad && pad->dim[0].stride == 0)\n-    pad->dim[0].stride = 1;\n-  if (order && order->dim[0].stride == 0)\n-    order->dim[0].stride = 1;\n-\n   if (ret->data == NULL)\n     {\n       rdim = shape->dim[0].ubound - shape->dim[0].lbound + 1;\n@@ -112,8 +103,6 @@ reshape_c8 (gfc_array_c8 * const restrict ret,\n   else\n     {\n       rdim = GFC_DESCRIPTOR_RANK (ret);\n-      if (ret->dim[0].stride == 0)\n-\tret->dim[0].stride = 1;\n     }\n \n   rsize = 1;"}, {"sha": "e7767dc8df9060c2992b75379599bb9f47dd07fd", "filename": "libgfortran/generated/reshape_i16.c", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Freshape_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Freshape_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Freshape_i16.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -1,5 +1,5 @@\n /* Implementation of the RESHAPE\n-   Copyright 2002 Free Software Foundation, Inc.\n+   Copyright 2002, 2006 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -84,15 +84,6 @@ reshape_16 (gfc_array_i16 * const restrict ret,\n   int n;\n   int dim;\n \n-  if (source->dim[0].stride == 0)\n-    source->dim[0].stride = 1;\n-  if (shape->dim[0].stride == 0)\n-    shape->dim[0].stride = 1;\n-  if (pad && pad->dim[0].stride == 0)\n-    pad->dim[0].stride = 1;\n-  if (order && order->dim[0].stride == 0)\n-    order->dim[0].stride = 1;\n-\n   if (ret->data == NULL)\n     {\n       rdim = shape->dim[0].ubound - shape->dim[0].lbound + 1;\n@@ -112,8 +103,6 @@ reshape_16 (gfc_array_i16 * const restrict ret,\n   else\n     {\n       rdim = GFC_DESCRIPTOR_RANK (ret);\n-      if (ret->dim[0].stride == 0)\n-\tret->dim[0].stride = 1;\n     }\n \n   rsize = 1;"}, {"sha": "e2f38e7e796fcf2810a4a47c7253ee259f7b2a39", "filename": "libgfortran/generated/reshape_i4.c", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Freshape_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Freshape_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Freshape_i4.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -1,5 +1,5 @@\n /* Implementation of the RESHAPE\n-   Copyright 2002 Free Software Foundation, Inc.\n+   Copyright 2002, 2006 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -84,15 +84,6 @@ reshape_4 (gfc_array_i4 * const restrict ret,\n   int n;\n   int dim;\n \n-  if (source->dim[0].stride == 0)\n-    source->dim[0].stride = 1;\n-  if (shape->dim[0].stride == 0)\n-    shape->dim[0].stride = 1;\n-  if (pad && pad->dim[0].stride == 0)\n-    pad->dim[0].stride = 1;\n-  if (order && order->dim[0].stride == 0)\n-    order->dim[0].stride = 1;\n-\n   if (ret->data == NULL)\n     {\n       rdim = shape->dim[0].ubound - shape->dim[0].lbound + 1;\n@@ -112,8 +103,6 @@ reshape_4 (gfc_array_i4 * const restrict ret,\n   else\n     {\n       rdim = GFC_DESCRIPTOR_RANK (ret);\n-      if (ret->dim[0].stride == 0)\n-\tret->dim[0].stride = 1;\n     }\n \n   rsize = 1;"}, {"sha": "5d54b074d4be0fd22a27b69282432af0d20c0c78", "filename": "libgfortran/generated/reshape_i8.c", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Freshape_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Freshape_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Freshape_i8.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -1,5 +1,5 @@\n /* Implementation of the RESHAPE\n-   Copyright 2002 Free Software Foundation, Inc.\n+   Copyright 2002, 2006 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -84,15 +84,6 @@ reshape_8 (gfc_array_i8 * const restrict ret,\n   int n;\n   int dim;\n \n-  if (source->dim[0].stride == 0)\n-    source->dim[0].stride = 1;\n-  if (shape->dim[0].stride == 0)\n-    shape->dim[0].stride = 1;\n-  if (pad && pad->dim[0].stride == 0)\n-    pad->dim[0].stride = 1;\n-  if (order && order->dim[0].stride == 0)\n-    order->dim[0].stride = 1;\n-\n   if (ret->data == NULL)\n     {\n       rdim = shape->dim[0].ubound - shape->dim[0].lbound + 1;\n@@ -112,8 +103,6 @@ reshape_8 (gfc_array_i8 * const restrict ret,\n   else\n     {\n       rdim = GFC_DESCRIPTOR_RANK (ret);\n-      if (ret->dim[0].stride == 0)\n-\tret->dim[0].stride = 1;\n     }\n \n   rsize = 1;"}, {"sha": "fe514c721731cc01eeec78249caac5563a5a8b68", "filename": "libgfortran/generated/reshape_r10.c", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Freshape_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Freshape_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Freshape_r10.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -1,5 +1,5 @@\n /* Implementation of the RESHAPE\n-   Copyright 2002 Free Software Foundation, Inc.\n+   Copyright 2002, 2006 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -84,15 +84,6 @@ reshape_r10 (gfc_array_r10 * const restrict ret,\n   int n;\n   int dim;\n \n-  if (source->dim[0].stride == 0)\n-    source->dim[0].stride = 1;\n-  if (shape->dim[0].stride == 0)\n-    shape->dim[0].stride = 1;\n-  if (pad && pad->dim[0].stride == 0)\n-    pad->dim[0].stride = 1;\n-  if (order && order->dim[0].stride == 0)\n-    order->dim[0].stride = 1;\n-\n   if (ret->data == NULL)\n     {\n       rdim = shape->dim[0].ubound - shape->dim[0].lbound + 1;\n@@ -112,8 +103,6 @@ reshape_r10 (gfc_array_r10 * const restrict ret,\n   else\n     {\n       rdim = GFC_DESCRIPTOR_RANK (ret);\n-      if (ret->dim[0].stride == 0)\n-\tret->dim[0].stride = 1;\n     }\n \n   rsize = 1;"}, {"sha": "3f260c11ed101b717fa5fba5616a22bf3fa7cf7c", "filename": "libgfortran/generated/reshape_r16.c", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Freshape_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Freshape_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Freshape_r16.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -1,5 +1,5 @@\n /* Implementation of the RESHAPE\n-   Copyright 2002 Free Software Foundation, Inc.\n+   Copyright 2002, 2006 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -84,15 +84,6 @@ reshape_r16 (gfc_array_r16 * const restrict ret,\n   int n;\n   int dim;\n \n-  if (source->dim[0].stride == 0)\n-    source->dim[0].stride = 1;\n-  if (shape->dim[0].stride == 0)\n-    shape->dim[0].stride = 1;\n-  if (pad && pad->dim[0].stride == 0)\n-    pad->dim[0].stride = 1;\n-  if (order && order->dim[0].stride == 0)\n-    order->dim[0].stride = 1;\n-\n   if (ret->data == NULL)\n     {\n       rdim = shape->dim[0].ubound - shape->dim[0].lbound + 1;\n@@ -112,8 +103,6 @@ reshape_r16 (gfc_array_r16 * const restrict ret,\n   else\n     {\n       rdim = GFC_DESCRIPTOR_RANK (ret);\n-      if (ret->dim[0].stride == 0)\n-\tret->dim[0].stride = 1;\n     }\n \n   rsize = 1;"}, {"sha": "58b59098cae872e83d47505b17819118b5084064", "filename": "libgfortran/generated/shape_i16.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fshape_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fshape_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fshape_i16.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -1,5 +1,5 @@\n /* Implementation of the SHAPE intrinsic\n-   Copyright 2002 Free Software Foundation, Inc.\n+   Copyright 2002, 2006 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -47,8 +47,6 @@ shape_16 (gfc_array_i16 * const restrict ret,\n   index_type stride;\n \n   stride = ret->dim[0].stride;\n-  if (stride == 0)\n-    stride = 1;\n \n   for (n = 0; n < GFC_DESCRIPTOR_RANK (array); n++)\n     {"}, {"sha": "5a7aa03bced496fd1f1758941f116d47ab3ffc4e", "filename": "libgfortran/generated/shape_i4.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fshape_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fshape_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fshape_i4.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -1,5 +1,5 @@\n /* Implementation of the SHAPE intrinsic\n-   Copyright 2002 Free Software Foundation, Inc.\n+   Copyright 2002, 2006 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -47,8 +47,6 @@ shape_4 (gfc_array_i4 * const restrict ret,\n   index_type stride;\n \n   stride = ret->dim[0].stride;\n-  if (stride == 0)\n-    stride = 1;\n \n   for (n = 0; n < GFC_DESCRIPTOR_RANK (array); n++)\n     {"}, {"sha": "e3e2bf538b91e9d08a0e64d00f87a2bb67d63dcc", "filename": "libgfortran/generated/shape_i8.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fshape_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fshape_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fshape_i8.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -1,5 +1,5 @@\n /* Implementation of the SHAPE intrinsic\n-   Copyright 2002 Free Software Foundation, Inc.\n+   Copyright 2002, 2006 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -47,8 +47,6 @@ shape_8 (gfc_array_i8 * const restrict ret,\n   index_type stride;\n \n   stride = ret->dim[0].stride;\n-  if (stride == 0)\n-    stride = 1;\n \n   for (n = 0; n < GFC_DESCRIPTOR_RANK (array); n++)\n     {"}, {"sha": "7bd3b79a32002f545fd747b69dce721f67c2af22", "filename": "libgfortran/generated/sum_c10.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fsum_c10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fsum_c10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_c10.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -62,11 +62,6 @@ sum_c10 (gfc_array_c10 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -103,9 +98,6 @@ sum_c10 (gfc_array_c10 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -202,14 +194,6 @@ msum_c10 (gfc_array_c10 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   if (len <= 0)\n     return;\n@@ -251,9 +235,6 @@ msum_c10 (gfc_array_c10 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -379,9 +360,6 @@ ssum_c10 (gfc_array_c10 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n     dstride = retarray->dim[0].stride;"}, {"sha": "a5f66c5925ab3f3dfd0b0afab6286e996f5c94b6", "filename": "libgfortran/generated/sum_c16.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fsum_c16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fsum_c16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_c16.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -62,11 +62,6 @@ sum_c16 (gfc_array_c16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -103,9 +98,6 @@ sum_c16 (gfc_array_c16 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -202,14 +194,6 @@ msum_c16 (gfc_array_c16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   if (len <= 0)\n     return;\n@@ -251,9 +235,6 @@ msum_c16 (gfc_array_c16 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -379,9 +360,6 @@ ssum_c16 (gfc_array_c16 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n     dstride = retarray->dim[0].stride;"}, {"sha": "17d9e911704387d20e31ccf9bc7b684a0f892923", "filename": "libgfortran/generated/sum_c4.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fsum_c4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fsum_c4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_c4.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -62,11 +62,6 @@ sum_c4 (gfc_array_c4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -103,9 +98,6 @@ sum_c4 (gfc_array_c4 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -202,14 +194,6 @@ msum_c4 (gfc_array_c4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   if (len <= 0)\n     return;\n@@ -251,9 +235,6 @@ msum_c4 (gfc_array_c4 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -379,9 +360,6 @@ ssum_c4 (gfc_array_c4 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n     dstride = retarray->dim[0].stride;"}, {"sha": "d5bd3aa029cf28ac50207d7db86eb4d994a6063c", "filename": "libgfortran/generated/sum_c8.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fsum_c8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fsum_c8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_c8.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -62,11 +62,6 @@ sum_c8 (gfc_array_c8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -103,9 +98,6 @@ sum_c8 (gfc_array_c8 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -202,14 +194,6 @@ msum_c8 (gfc_array_c8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   if (len <= 0)\n     return;\n@@ -251,9 +235,6 @@ msum_c8 (gfc_array_c8 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -379,9 +360,6 @@ ssum_c8 (gfc_array_c8 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n     dstride = retarray->dim[0].stride;"}, {"sha": "33911ebd6f050ff9cf851a74d77e0e22b4bdd5fa", "filename": "libgfortran/generated/sum_i16.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fsum_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fsum_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_i16.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -62,11 +62,6 @@ sum_i16 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -103,9 +98,6 @@ sum_i16 (gfc_array_i16 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -202,14 +194,6 @@ msum_i16 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   if (len <= 0)\n     return;\n@@ -251,9 +235,6 @@ msum_i16 (gfc_array_i16 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -379,9 +360,6 @@ ssum_i16 (gfc_array_i16 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n     dstride = retarray->dim[0].stride;"}, {"sha": "03d7ce20dccae582cd38a09937baef0b6da28a15", "filename": "libgfortran/generated/sum_i4.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fsum_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fsum_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_i4.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -62,11 +62,6 @@ sum_i4 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -103,9 +98,6 @@ sum_i4 (gfc_array_i4 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -202,14 +194,6 @@ msum_i4 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   if (len <= 0)\n     return;\n@@ -251,9 +235,6 @@ msum_i4 (gfc_array_i4 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -379,9 +360,6 @@ ssum_i4 (gfc_array_i4 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n     dstride = retarray->dim[0].stride;"}, {"sha": "177aae61a33c7abd4e7b6be5e6628c568040b69d", "filename": "libgfortran/generated/sum_i8.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fsum_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fsum_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_i8.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -62,11 +62,6 @@ sum_i8 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -103,9 +98,6 @@ sum_i8 (gfc_array_i8 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -202,14 +194,6 @@ msum_i8 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   if (len <= 0)\n     return;\n@@ -251,9 +235,6 @@ msum_i8 (gfc_array_i8 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -379,9 +360,6 @@ ssum_i8 (gfc_array_i8 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n     dstride = retarray->dim[0].stride;"}, {"sha": "87531d313ca0138aab805cbd2cdc0b8dfe8013bf", "filename": "libgfortran/generated/sum_r10.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fsum_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fsum_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_r10.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -62,11 +62,6 @@ sum_r10 (gfc_array_r10 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -103,9 +98,6 @@ sum_r10 (gfc_array_r10 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -202,14 +194,6 @@ msum_r10 (gfc_array_r10 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   if (len <= 0)\n     return;\n@@ -251,9 +235,6 @@ msum_r10 (gfc_array_r10 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -379,9 +360,6 @@ ssum_r10 (gfc_array_r10 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n     dstride = retarray->dim[0].stride;"}, {"sha": "ea59713ca7031c787ce676a6d6a90b64db317f17", "filename": "libgfortran/generated/sum_r16.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fsum_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fsum_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_r16.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -62,11 +62,6 @@ sum_r16 (gfc_array_r16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -103,9 +98,6 @@ sum_r16 (gfc_array_r16 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -202,14 +194,6 @@ msum_r16 (gfc_array_r16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   if (len <= 0)\n     return;\n@@ -251,9 +235,6 @@ msum_r16 (gfc_array_r16 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -379,9 +360,6 @@ ssum_r16 (gfc_array_r16 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n     dstride = retarray->dim[0].stride;"}, {"sha": "2c4441d11c9ae947327777f7aa7ad4d7c6cfd75c", "filename": "libgfortran/generated/sum_r4.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fsum_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fsum_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_r4.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -62,11 +62,6 @@ sum_r4 (gfc_array_r4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -103,9 +98,6 @@ sum_r4 (gfc_array_r4 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -202,14 +194,6 @@ msum_r4 (gfc_array_r4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   if (len <= 0)\n     return;\n@@ -251,9 +235,6 @@ msum_r4 (gfc_array_r4 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -379,9 +360,6 @@ ssum_r4 (gfc_array_r4 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n     dstride = retarray->dim[0].stride;"}, {"sha": "6a68db0524355e7a174057c371ea4d63bfd07754", "filename": "libgfortran/generated/sum_r8.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fsum_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Fsum_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_r8.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -62,11 +62,6 @@ sum_r8 (gfc_array_r8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -103,9 +98,6 @@ sum_r8 (gfc_array_r8 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -202,14 +194,6 @@ msum_r8 (gfc_array_r8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   if (len <= 0)\n     return;\n@@ -251,9 +235,6 @@ msum_r8 (gfc_array_r8 * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -379,9 +360,6 @@ ssum_r8 (gfc_array_r8 * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n     dstride = retarray->dim[0].stride;"}, {"sha": "aec76c647eaf095acdf247d040821d71df31308e", "filename": "libgfortran/generated/transpose_c10.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Ftranspose_c10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Ftranspose_c10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Ftranspose_c10.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -1,5 +1,5 @@\n /* Implementation of the TRANSPOSE intrinsic\n-   Copyright 2003, 2005 Free Software Foundation, Inc.\n+   Copyright 2003, 2005, 2006 Free Software Foundation, Inc.\n    Contributed by Tobias Schl\ufffdter\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -71,11 +71,6 @@ transpose_c10 (gfc_array_c10 * const restrict ret,\n       ret->offset = 0;\n     }\n \n-  if (ret->dim[0].stride == 0)\n-    ret->dim[0].stride = 1;\n-  if (source->dim[0].stride == 0)\n-    source->dim[0].stride = 1;\n-\n   sxstride = source->dim[0].stride;\n   systride = source->dim[1].stride;\n   xcount = source->dim[0].ubound + 1 - source->dim[0].lbound;"}, {"sha": "62d91658021295166f7dd131c57752f614707f3a", "filename": "libgfortran/generated/transpose_c16.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Ftranspose_c16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Ftranspose_c16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Ftranspose_c16.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -1,5 +1,5 @@\n /* Implementation of the TRANSPOSE intrinsic\n-   Copyright 2003, 2005 Free Software Foundation, Inc.\n+   Copyright 2003, 2005, 2006 Free Software Foundation, Inc.\n    Contributed by Tobias Schl\ufffdter\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -71,11 +71,6 @@ transpose_c16 (gfc_array_c16 * const restrict ret,\n       ret->offset = 0;\n     }\n \n-  if (ret->dim[0].stride == 0)\n-    ret->dim[0].stride = 1;\n-  if (source->dim[0].stride == 0)\n-    source->dim[0].stride = 1;\n-\n   sxstride = source->dim[0].stride;\n   systride = source->dim[1].stride;\n   xcount = source->dim[0].ubound + 1 - source->dim[0].lbound;"}, {"sha": "ac4316c930ef0037c4e84458cc4ed2404b6ec653", "filename": "libgfortran/generated/transpose_c4.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Ftranspose_c4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Ftranspose_c4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Ftranspose_c4.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -1,5 +1,5 @@\n /* Implementation of the TRANSPOSE intrinsic\n-   Copyright 2003, 2005 Free Software Foundation, Inc.\n+   Copyright 2003, 2005, 2006 Free Software Foundation, Inc.\n    Contributed by Tobias Schl\ufffdter\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -71,11 +71,6 @@ transpose_c4 (gfc_array_c4 * const restrict ret,\n       ret->offset = 0;\n     }\n \n-  if (ret->dim[0].stride == 0)\n-    ret->dim[0].stride = 1;\n-  if (source->dim[0].stride == 0)\n-    source->dim[0].stride = 1;\n-\n   sxstride = source->dim[0].stride;\n   systride = source->dim[1].stride;\n   xcount = source->dim[0].ubound + 1 - source->dim[0].lbound;"}, {"sha": "401874a8d8694298d9ec17f5126f857d3d5c27db", "filename": "libgfortran/generated/transpose_c8.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Ftranspose_c8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Ftranspose_c8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Ftranspose_c8.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -1,5 +1,5 @@\n /* Implementation of the TRANSPOSE intrinsic\n-   Copyright 2003, 2005 Free Software Foundation, Inc.\n+   Copyright 2003, 2005, 2006 Free Software Foundation, Inc.\n    Contributed by Tobias Schl\ufffdter\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -71,11 +71,6 @@ transpose_c8 (gfc_array_c8 * const restrict ret,\n       ret->offset = 0;\n     }\n \n-  if (ret->dim[0].stride == 0)\n-    ret->dim[0].stride = 1;\n-  if (source->dim[0].stride == 0)\n-    source->dim[0].stride = 1;\n-\n   sxstride = source->dim[0].stride;\n   systride = source->dim[1].stride;\n   xcount = source->dim[0].ubound + 1 - source->dim[0].lbound;"}, {"sha": "f47a0ee4b443f03c7425d06364ce7e1102957f18", "filename": "libgfortran/generated/transpose_i16.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Ftranspose_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Ftranspose_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Ftranspose_i16.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -1,5 +1,5 @@\n /* Implementation of the TRANSPOSE intrinsic\n-   Copyright 2003, 2005 Free Software Foundation, Inc.\n+   Copyright 2003, 2005, 2006 Free Software Foundation, Inc.\n    Contributed by Tobias Schl\ufffdter\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -71,11 +71,6 @@ transpose_i16 (gfc_array_i16 * const restrict ret,\n       ret->offset = 0;\n     }\n \n-  if (ret->dim[0].stride == 0)\n-    ret->dim[0].stride = 1;\n-  if (source->dim[0].stride == 0)\n-    source->dim[0].stride = 1;\n-\n   sxstride = source->dim[0].stride;\n   systride = source->dim[1].stride;\n   xcount = source->dim[0].ubound + 1 - source->dim[0].lbound;"}, {"sha": "23ed03ff22dfdfbcd92360f1f6ff2009f789f681", "filename": "libgfortran/generated/transpose_i4.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Ftranspose_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Ftranspose_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Ftranspose_i4.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -1,5 +1,5 @@\n /* Implementation of the TRANSPOSE intrinsic\n-   Copyright 2003, 2005 Free Software Foundation, Inc.\n+   Copyright 2003, 2005, 2006 Free Software Foundation, Inc.\n    Contributed by Tobias Schl\ufffdter\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -71,11 +71,6 @@ transpose_i4 (gfc_array_i4 * const restrict ret,\n       ret->offset = 0;\n     }\n \n-  if (ret->dim[0].stride == 0)\n-    ret->dim[0].stride = 1;\n-  if (source->dim[0].stride == 0)\n-    source->dim[0].stride = 1;\n-\n   sxstride = source->dim[0].stride;\n   systride = source->dim[1].stride;\n   xcount = source->dim[0].ubound + 1 - source->dim[0].lbound;"}, {"sha": "3972032e66296baa7033cc528acccf56c0c46908", "filename": "libgfortran/generated/transpose_i8.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Ftranspose_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Ftranspose_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Ftranspose_i8.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -1,5 +1,5 @@\n /* Implementation of the TRANSPOSE intrinsic\n-   Copyright 2003, 2005 Free Software Foundation, Inc.\n+   Copyright 2003, 2005, 2006 Free Software Foundation, Inc.\n    Contributed by Tobias Schl\ufffdter\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -71,11 +71,6 @@ transpose_i8 (gfc_array_i8 * const restrict ret,\n       ret->offset = 0;\n     }\n \n-  if (ret->dim[0].stride == 0)\n-    ret->dim[0].stride = 1;\n-  if (source->dim[0].stride == 0)\n-    source->dim[0].stride = 1;\n-\n   sxstride = source->dim[0].stride;\n   systride = source->dim[1].stride;\n   xcount = source->dim[0].ubound + 1 - source->dim[0].lbound;"}, {"sha": "97a988ceea3c0eca078130d162167cca6d30af37", "filename": "libgfortran/generated/transpose_r10.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Ftranspose_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Ftranspose_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Ftranspose_r10.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -1,5 +1,5 @@\n /* Implementation of the TRANSPOSE intrinsic\n-   Copyright 2003, 2005 Free Software Foundation, Inc.\n+   Copyright 2003, 2005, 2006 Free Software Foundation, Inc.\n    Contributed by Tobias Schl\ufffdter\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -71,11 +71,6 @@ transpose_r10 (gfc_array_r10 * const restrict ret,\n       ret->offset = 0;\n     }\n \n-  if (ret->dim[0].stride == 0)\n-    ret->dim[0].stride = 1;\n-  if (source->dim[0].stride == 0)\n-    source->dim[0].stride = 1;\n-\n   sxstride = source->dim[0].stride;\n   systride = source->dim[1].stride;\n   xcount = source->dim[0].ubound + 1 - source->dim[0].lbound;"}, {"sha": "ba4c09e74702f26b3578bf710c3ebafa3d7dc9c8", "filename": "libgfortran/generated/transpose_r16.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Ftranspose_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fgenerated%2Ftranspose_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Ftranspose_r16.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -1,5 +1,5 @@\n /* Implementation of the TRANSPOSE intrinsic\n-   Copyright 2003, 2005 Free Software Foundation, Inc.\n+   Copyright 2003, 2005, 2006 Free Software Foundation, Inc.\n    Contributed by Tobias Schl\ufffdter\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -71,11 +71,6 @@ transpose_r16 (gfc_array_r16 * const restrict ret,\n       ret->offset = 0;\n     }\n \n-  if (ret->dim[0].stride == 0)\n-    ret->dim[0].stride = 1;\n-  if (source->dim[0].stride == 0)\n-    source->dim[0].stride = 1;\n-\n   sxstride = source->dim[0].stride;\n   systride = source->dim[1].stride;\n   xcount = source->dim[0].ubound + 1 - source->dim[0].lbound;"}, {"sha": "6263d4d0ee57d799439d32a69812307679cf4a39", "filename": "libgfortran/intrinsics/etime.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fintrinsics%2Fetime.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fintrinsics%2Fetime.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fetime.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -1,5 +1,5 @@\n /* Implementation of the ETIME intrinsic.\n-   Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n+   Copyright (C) 2004, 2005, 2006 Free Software Foundation, Inc.\n    Contributed by Steven G. Kargl <kargls@comcast.net>.\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -71,9 +71,6 @@ etime_sub (gfc_array_r4 *t, GFC_REAL_4 *result)\n   if (((t->dim[0].ubound + 1 - t->dim[0].lbound)) < 2)\n     runtime_error (\"Insufficient number of elements in TARRAY.\");\n \n-  if (t->dim[0].stride == 0)\n-    t->dim[0].stride = 1;\n-\n   tp = t->data;\n \n   *tp = tu;"}, {"sha": "9ea2889fd2524d2f42f90f42acf815f526872171", "filename": "libgfortran/intrinsics/random.c", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fintrinsics%2Frandom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fintrinsics%2Frandom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Frandom.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -1,5 +1,5 @@\n /* Implementation of the RANDOM intrinsics\n-   Copyright 2002, 2004, 2005 Free Software Foundation, Inc.\n+   Copyright 2002, 2004, 2005, 2006 Free Software Foundation, Inc.\n    Contributed by Lars Segerlund <seger@linuxmail.org>\n    and Steve Kargl.\n \n@@ -188,9 +188,6 @@ arandom_r4 (gfc_array_r4 *x)\n \n   dest = x->data;\n \n-  if (x->dim[0].stride == 0)\n-    x->dim[0].stride = 1;\n-\n   dim = GFC_DESCRIPTOR_RANK (x);\n \n   for (n = 0; n < dim; n++)\n@@ -261,9 +258,6 @@ arandom_r8 (gfc_array_r8 *x)\n \n   dest = x->data;\n \n-  if (x->dim[0].stride == 0)\n-    x->dim[0].stride = 1;\n-\n   dim = GFC_DESCRIPTOR_RANK (x);\n \n   for (n = 0; n < dim; n++)\n@@ -349,9 +343,6 @@ random_seed (GFC_INTEGER_4 *size, gfc_array_i4 *put, gfc_array_i4 *get)\n       if (((put->dim[0].ubound + 1 - put->dim[0].lbound)) < kiss_size)\n         runtime_error (\"Array size of PUT is too small.\");\n \n-      if (put->dim[0].stride == 0)\n-\tput->dim[0].stride = 1;\n-\n       /*  This code now should do correct strides.  */\n       for (i = 0; i < kiss_size; i++)\n         kiss_seed[i] =(GFC_UINTEGER_4) put->data[i * put->dim[0].stride];\n@@ -368,9 +359,6 @@ random_seed (GFC_INTEGER_4 *size, gfc_array_i4 *put, gfc_array_i4 *get)\n       if (((get->dim[0].ubound + 1 - get->dim[0].lbound)) < kiss_size)\n \truntime_error (\"Array size of GET is too small.\");\n \n-      if (get->dim[0].stride == 0)\n-\tget->dim[0].stride = 1;\n-\n       /*  This code now should do correct strides.  */\n       for (i = 0; i < kiss_size; i++)\n         get->data[i * get->dim[0].stride] = (GFC_INTEGER_4) kiss_seed[i];"}, {"sha": "4f05416500fc68c1334b949af2a93992cd237a18", "filename": "libgfortran/intrinsics/reshape_generic.c", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fintrinsics%2Freshape_generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fintrinsics%2Freshape_generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Freshape_generic.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -1,5 +1,5 @@\n /* Generic implementation of the RESHAPE intrinsic\n-   Copyright 2002 Free Software Foundation, Inc.\n+   Copyright 2002, 2006 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -74,15 +74,6 @@ reshape_internal (parray *ret, parray *source, shape_type *shape,\n   int n;\n   int dim;\n \n-  if (source->dim[0].stride == 0)\n-    source->dim[0].stride = 1;\n-  if (shape->dim[0].stride == 0)\n-    shape->dim[0].stride = 1;\n-  if (pad && pad->dim[0].stride == 0)\n-    pad->dim[0].stride = 1;\n-  if (order && order->dim[0].stride == 0)\n-    order->dim[0].stride = 1;\n-\n   if (ret->data == NULL)\n     {\n       rdim = shape->dim[0].ubound - shape->dim[0].lbound + 1;\n@@ -102,8 +93,6 @@ reshape_internal (parray *ret, parray *source, shape_type *shape,\n   else\n     {\n       rdim = GFC_DESCRIPTOR_RANK (ret);\n-      if (ret->dim[0].stride == 0)\n-\tret->dim[0].stride = 1;\n     }\n \n   rsize = 1;"}, {"sha": "cbc5c4985dffdfd8c4edf8227f762392e8726857", "filename": "libgfortran/intrinsics/spread_generic.c", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fintrinsics%2Fspread_generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fintrinsics%2Fspread_generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fspread_generic.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -1,5 +1,5 @@\n /* Generic implementation of the SPREAD intrinsic\n-   Copyright 2002, 2005 Free Software Foundation, Inc.\n+   Copyright 2002, 2005, 2006 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -109,9 +109,6 @@ spread_internal (gfc_array_char *ret, const gfc_array_char *source,\n       if (GFC_DESCRIPTOR_RANK(ret) != rrank)\n \truntime_error (\"rank mismatch in spread()\");\n \n-      if (ret->dim[0].stride == 0)\n-\tret->dim[0].stride = 1;\n-\n       for (n = 0; n < rrank; n++)\n \t{\n \t  if (n == *along - 1)\n@@ -204,9 +201,6 @@ spread_internal_scalar (gfc_array_char *ret, const char *source,\n     }\n   else\n     {\n-      if (ret->dim[0].stride == 0)\n-\tret->dim[0].stride = 1;\n-\n       if (ncopies - 1 > (ret->dim[0].ubound - ret->dim[0].lbound)\n \t\t\t   / ret->dim[0].stride)\n \truntime_error (\"dim too large in spread()\");"}, {"sha": "ab134ab4b1805306382a64d51afcf1ad06ddc1fb", "filename": "libgfortran/intrinsics/stat.c", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fintrinsics%2Fstat.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fintrinsics%2Fstat.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fstat.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -1,5 +1,5 @@\n /* Implementation of the STAT and FSTAT intrinsics.\n-   Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n+   Copyright (C) 2004, 2005, 2006 Free Software Foundation, Inc.\n    Contributed by Steven G. Kargl <kargls@comcast.net>.\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -81,9 +81,6 @@ stat_i4_sub (char *name, gfc_array_i4 *sarray, GFC_INTEGER_4 *status,\n   if (sarray->dim[0].ubound + 1 - sarray->dim[0].lbound < 13)\n     runtime_error (\"Array size of SARRAY is too small.\");\n \n-  if (sarray->dim[0].stride == 0)\n-    sarray->dim[0].stride = 1;\n-\n   /* Trim trailing spaces from name.  */\n   while (name_len > 0 && name[name_len - 1] == ' ')\n     name_len--;\n@@ -174,9 +171,6 @@ stat_i8_sub (char *name, gfc_array_i8 *sarray, GFC_INTEGER_8 *status,\n   if (sarray->dim[0].ubound + 1 - sarray->dim[0].lbound < 13)\n     runtime_error (\"Array size of SARRAY is too small.\");\n \n-  if (sarray->dim[0].stride == 0)\n-    sarray->dim[0].stride = 1;\n-\n   /* Trim trailing spaces from name.  */\n   while (name_len > 0 && name[name_len - 1] == ' ')\n     name_len--;\n@@ -297,9 +291,6 @@ fstat_i4_sub (GFC_INTEGER_4 *unit, gfc_array_i4 *sarray, GFC_INTEGER_4 *status)\n   if (sarray->dim[0].ubound + 1 - sarray->dim[0].lbound < 13)\n     runtime_error (\"Array size of SARRAY is too small.\");\n \n-  if (sarray->dim[0].stride == 0)\n-    sarray->dim[0].stride = 1;\n-\n   /* Convert Fortran unit number to C file descriptor.  */\n   val = unit_to_fd (*unit);\n   if (val >= 0)\n@@ -381,9 +372,6 @@ fstat_i8_sub (GFC_INTEGER_8 *unit, gfc_array_i8 *sarray, GFC_INTEGER_8 *status)\n   if (sarray->dim[0].ubound + 1 - sarray->dim[0].lbound < 13)\n     runtime_error (\"Array size of SARRAY is too small.\");\n \n-  if (sarray->dim[0].stride == 0)\n-    sarray->dim[0].stride = 1;\n-\n   /* Convert Fortran unit number to C file descriptor.  */\n   val = unit_to_fd ((int) *unit);\n   if (val >= 0)"}, {"sha": "1daae8bb5b786908dbe9328811068310750e1a67", "filename": "libgfortran/intrinsics/transpose_generic.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fintrinsics%2Ftranspose_generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fintrinsics%2Ftranspose_generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Ftranspose_generic.c?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -1,5 +1,5 @@\n /* Implementation of the TRANSPOSE intrinsic\n-   Copyright 2003 Free Software Foundation, Inc.\n+   Copyright 2003, 2006 Free Software Foundation, Inc.\n    Contributed by Tobias Schl\ufffdter\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -71,15 +71,11 @@ transpose_internal (gfc_array_char *ret, gfc_array_char *source,\n     }\n \n   sxstride = source->dim[0].stride * size;\n-  if (sxstride == 0)\n-    sxstride = size;\n   systride = source->dim[1].stride * size;\n   xcount = source->dim[0].ubound + 1 - source->dim[0].lbound;\n   ycount = source->dim[1].ubound + 1 - source->dim[1].lbound;\n \n   rxstride = ret->dim[0].stride * size;\n-  if (rxstride == 0)\n-    rxstride = size;\n   rystride = ret->dim[1].stride * size;\n \n   rptr = ret->data;"}, {"sha": "6ff9427722e36e6800583c241219111a2974a557", "filename": "libgfortran/m4/iforeach.m4", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fm4%2Fiforeach.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fm4%2Fiforeach.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fiforeach.m4?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -41,16 +41,8 @@ name`'rtype_qual`_'atype_code (rtype * const restrict retarray,\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -153,19 +145,8 @@ void\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   dstride = retarray->dim[0].stride;\n   dest = retarray->data;\n   for (n = 0; n < rank; n++)\n@@ -291,9 +272,6 @@ void\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n   dstride = retarray->dim[0].stride;"}, {"sha": "74ae6a5d5e4784c87e53865c971e07770b150736", "filename": "libgfortran/m4/ifunction.m4", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fm4%2Fifunction.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fm4%2Fifunction.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fifunction.m4?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -44,11 +44,6 @@ name`'rtype_qual`_'atype_code (rtype * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   delta = array->dim[dim].stride;\n \n@@ -85,9 +80,6 @@ name`'rtype_qual`_'atype_code (rtype * const restrict retarray,\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -184,14 +176,6 @@ void\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n-  /* TODO:  It should be a front end job to correctly set the strides.  */\n-\n-  if (array->dim[0].stride == 0)\n-    array->dim[0].stride = 1;\n-\n-  if (mask->dim[0].stride == 0)\n-    mask->dim[0].stride = 1;\n-\n   len = array->dim[dim].ubound + 1 - array->dim[dim].lbound;\n   if (len <= 0)\n     return;\n@@ -233,9 +217,6 @@ void\n     }\n   else\n     {\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n-\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect\");\n     }\n@@ -360,9 +341,6 @@ void\n \n       if (retarray->dim[0].ubound + 1 - retarray->dim[0].lbound != rank)\n         runtime_error (\"dimension of return array incorrect\");\n-\n-      if (retarray->dim[0].stride == 0)\n-\tretarray->dim[0].stride = 1;\n     }\n \n     dstride = retarray->dim[0].stride;"}, {"sha": "950919d07828a27371609d5aacf1417650823195", "filename": "libgfortran/m4/in_pack.m4", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fm4%2Fin_pack.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fm4%2Fin_pack.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fin_pack.m4?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -1,5 +1,5 @@\n `/* Helper function for repacking arrays.\n-   Copyright 2003 Free Software Foundation, Inc.\n+   Copyright 2003, 2006 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -56,11 +56,8 @@ rtype_name *\n   int n;\n   int packed;\n \n-  if (source->dim[0].stride == 0)\n-    {\n-      source->dim[0].stride = 1;\n-      return source->data;\n-    }\n+  /* TODO: Investigate how we can figure out if this is a temporary\n+     since the stride=0 thing has been removed from the frontend.  */\n \n   dim = GFC_DESCRIPTOR_RANK (source);\n   ssize = 1;"}, {"sha": "d6ee7c6f7381fac96e5db8fe823492fa17028950", "filename": "libgfortran/m4/in_unpack.m4", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fm4%2Fin_unpack.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fm4%2Fin_unpack.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fin_unpack.m4?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -1,5 +1,5 @@\n `/* Helper function for repacking arrays.\n-   Copyright 2003 Free Software Foundation, Inc.\n+   Copyright 2003, 2006 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -55,9 +55,6 @@ void\n   if (src == dest || !src)\n     return;\n \n-  if (d->dim[0].stride == 0)\n-    d->dim[0].stride = 1;\n-\n   dim = GFC_DESCRIPTOR_RANK (d);\n   dsize = 1;\n   for (n = 0; n < dim; n++)"}, {"sha": "f83837b77a96d8b9b2429dbda4947559f0922850", "filename": "libgfortran/m4/matmul.m4", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fm4%2Fmatmul.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fm4%2Fmatmul.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fmatmul.m4?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -1,5 +1,5 @@\n `/* Implementation of the MATMUL intrinsic\n-   Copyright 2002, 2005 Free Software Foundation, Inc.\n+   Copyright 2002, 2005, 2006 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -121,15 +121,6 @@ matmul_`'rtype_code (rtype * const restrict retarray,\n       retarray->offset = 0;\n     }\n \n-  if (retarray->dim[0].stride == 0)\n-    retarray->dim[0].stride = 1;\n-\n-  /* This prevents constifying the input arguments.  */\n-  if (a->dim[0].stride == 0)\n-    a->dim[0].stride = 1;\n-  if (b->dim[0].stride == 0)\n-    b->dim[0].stride = 1;\n-\n sinclude(`matmul_asm_'rtype_code`.m4')dnl\n \n   if (GFC_DESCRIPTOR_RANK (retarray) == 1)"}, {"sha": "f880199eb1a642d6829b721139a54be038951443", "filename": "libgfortran/m4/matmull.m4", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fm4%2Fmatmull.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fm4%2Fmatmull.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fmatmull.m4?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -1,5 +1,5 @@\n `/* Implementation of the MATMUL intrinsic\n-   Copyright 2002, 2005 Free Software Foundation, Inc.\n+   Copyright 2002, 2005, 2006 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -113,13 +113,6 @@ matmul_`'rtype_code (rtype * const restrict retarray,\n     }\n   dest = retarray->data;\n \n-  if (retarray->dim[0].stride == 0)\n-    retarray->dim[0].stride = 1;\n-  if (a->dim[0].stride == 0)\n-    a->dim[0].stride = 1;\n-  if (b->dim[0].stride == 0)\n-    b->dim[0].stride = 1;\n-\n sinclude(`matmul_asm_'rtype_code`.m4')dnl\n \n   if (GFC_DESCRIPTOR_RANK (retarray) == 1)"}, {"sha": "569b413028c017ce7c2d31d4333fa82de4c4ba87", "filename": "libgfortran/m4/reshape.m4", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fm4%2Freshape.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fm4%2Freshape.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Freshape.m4?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -1,5 +1,5 @@\n `/* Implementation of the RESHAPE\n-   Copyright 2002 Free Software Foundation, Inc.\n+   Copyright 2002, 2006 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -86,15 +86,6 @@ reshape_`'rtype_ccode (rtype * const restrict ret,\n   int n;\n   int dim;\n \n-  if (source->dim[0].stride == 0)\n-    source->dim[0].stride = 1;\n-  if (shape->dim[0].stride == 0)\n-    shape->dim[0].stride = 1;\n-  if (pad && pad->dim[0].stride == 0)\n-    pad->dim[0].stride = 1;\n-  if (order && order->dim[0].stride == 0)\n-    order->dim[0].stride = 1;\n-\n   if (ret->data == NULL)\n     {\n       rdim = shape->dim[0].ubound - shape->dim[0].lbound + 1;\n@@ -114,8 +105,6 @@ reshape_`'rtype_ccode (rtype * const restrict ret,\n   else\n     {\n       rdim = GFC_DESCRIPTOR_RANK (ret);\n-      if (ret->dim[0].stride == 0)\n-\tret->dim[0].stride = 1;\n     }\n \n   rsize = 1;"}, {"sha": "a219a8bb32a52dd11e0b12dfc8ee482ed1f1c1fd", "filename": "libgfortran/m4/shape.m4", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fm4%2Fshape.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fm4%2Fshape.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fshape.m4?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -1,5 +1,5 @@\n `/* Implementation of the SHAPE intrinsic\n-   Copyright 2002 Free Software Foundation, Inc.\n+   Copyright 2002, 2006 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -48,8 +48,6 @@ shape_`'rtype_kind (rtype * const restrict ret,\n   index_type stride;\n \n   stride = ret->dim[0].stride;\n-  if (stride == 0)\n-    stride = 1;\n \n   for (n = 0; n < GFC_DESCRIPTOR_RANK (array); n++)\n     {"}, {"sha": "1511258a1dedcb8bae767dd51dcb02fe1832b3b1", "filename": "libgfortran/m4/transpose.m4", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fm4%2Ftranspose.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6/libgfortran%2Fm4%2Ftranspose.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Ftranspose.m4?ref=6ff24d45dc7bf2691b6c2c3f9e9830360dc572a6", "patch": "@@ -1,5 +1,5 @@\n `/* Implementation of the TRANSPOSE intrinsic\n-   Copyright 2003, 2005 Free Software Foundation, Inc.\n+   Copyright 2003, 2005, 2006 Free Software Foundation, Inc.\n    Contributed by Tobias Schl\ufffdter\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -72,11 +72,6 @@ transpose_`'rtype_code (rtype * const restrict ret,\n       ret->offset = 0;\n     }\n \n-  if (ret->dim[0].stride == 0)\n-    ret->dim[0].stride = 1;\n-  if (source->dim[0].stride == 0)\n-    source->dim[0].stride = 1;\n-\n   sxstride = source->dim[0].stride;\n   systride = source->dim[1].stride;\n   xcount = source->dim[0].ubound + 1 - source->dim[0].lbound;"}]}