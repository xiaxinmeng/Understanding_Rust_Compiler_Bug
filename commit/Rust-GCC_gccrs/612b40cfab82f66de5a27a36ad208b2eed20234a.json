{"sha": "612b40cfab82f66de5a27a36ad208b2eed20234a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjEyYjQwY2ZhYjgyZjY2ZGU1YTI3YTM2YWQyMDhiMmVlZDIwMjM0YQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-08-25T17:34:45Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-08-25T17:34:45Z"}, "message": "config/i386/i386: Use rtx_insn\n\ngcc/\n\t* config/i386/i386-protos.h (ix86_avoid_lea_for_add): Strengthen\n\tparam 1 \"insn\" from rtx to rtx_insn *.\n\t(ix86_use_lea_for_mov): Likewise.\n\t(ix86_avoid_lea_for_addr): Likewise.\n\t(ix86_split_lea_for_addr): Likewise.\n\t(ix86_lea_for_add_ok): Likewise.\n\t(ix86_output_call_insn): Likewise.\n\n\t* config/i386/i386.c (ix86_va_start): Likewise for local \"seq\".\n\t(ix86_get_drap_rtx): Likewise for locals \"seq\", \"insn\".\n\t(ix86_output_function_epilogue): Likewise for locals \"insn\",\n\t\"deleted_debug_label\".\n\t(legitimize_tls_address): Likewise for local \"insn\".\n\t(get_some_local_dynamic_name): Likewise.\n\t(increase_distance): Likewise for params \"prev\", \"next\".\n\t(distance_non_agu_define_in_bb): Likewise for params \"insn\",\n\t\"start\" and locals \"prev\", \"next\".\n\t(distance_non_agu_define): Likewise for param \"insn\".\n\t(distance_agu_use_in_bb): Likewise for params \"insn\", \"start\" and\n\tlocals \"next\", \"prev\".\n\t(distance_agu_use): Likewise for param \"insn\".\n\t(ix86_lea_outperforms): Likewise.\n\t(ix86_ok_to_clobber_flags): Likewise.\n\t(ix86_avoid_lea_for_add): Likewise.\n\t(ix86_use_lea_for_mov): Likewise.\n\t(ix86_avoid_lea_for_addr): Likewise.\n\t(find_nearest_reg_def): Likewise, also for locals \"prev\", \"start\".\n\t(ix86_split_lea_for_addr): Likewise for param \"insn\".\n\t(ix86_lea_for_add_ok): Likewise for param \"insn\".\n\t(ix86_expand_carry_flag_compare): Likewise for local\n\t\"compare_seq\".\n\t(ix86_expand_int_movcc): Likewise.\n\t(ix86_output_call_insn): Likewise for param \"insn\".\n\t(ix86_output_call_insn): Likewise for local \"i\".\n\t(x86_output_mi_thunk): Introduce local \"insn\", using it in place\n\tof \"tmp\" when dealing with insns.\n\t(ix86_avoid_jump_mispredicts): Likewise for locals \"insn\",\n\t\"start\".\n\t(ix86_pad_returns): Likewise for locals \"ret\", \"prev\".\n\t(ix86_count_insn_bb): Likewise for local \"insn\".\n\t(ix86_pad_short_function): Likewise for locals \"ret\", \"insn\".\n\t(ix86_seh_fixup_eh_fallthru): Likewise for locals \"insn\", \"next\".\n\t(ix86_vector_duplicate_value): Likewise for local \"insn\", \"seq\".\n\t(expand_vec_perm_interleave2): Likewise for local \"seq\".\n\t(expand_vec_perm_vperm2f128_vblend): Likewise.\n\t(ix86_loop_unroll_adjust): Likewise for local \"insn\".  Convert\n\tcall to for_each_rtx with for_each_rtx_in_insn.\n\nFrom-SVN: r214444", "tree": {"sha": "8cab630176805f35892e0ebce8fb4f8aea43ddb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8cab630176805f35892e0ebce8fb4f8aea43ddb2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/612b40cfab82f66de5a27a36ad208b2eed20234a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/612b40cfab82f66de5a27a36ad208b2eed20234a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/612b40cfab82f66de5a27a36ad208b2eed20234a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/612b40cfab82f66de5a27a36ad208b2eed20234a/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "aefef06abc1ba3b1a181720fb4971b8b7a474bf8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aefef06abc1ba3b1a181720fb4971b8b7a474bf8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aefef06abc1ba3b1a181720fb4971b8b7a474bf8"}], "stats": {"total": 165, "additions": 111, "deletions": 54}, "files": [{"sha": "c0915317d0284d701d36a4c4b58199ce979f6122", "filename": "gcc/ChangeLog", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/612b40cfab82f66de5a27a36ad208b2eed20234a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/612b40cfab82f66de5a27a36ad208b2eed20234a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=612b40cfab82f66de5a27a36ad208b2eed20234a", "patch": "@@ -1,3 +1,53 @@\n+2014-08-25  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* config/i386/i386-protos.h (ix86_avoid_lea_for_add): Strengthen\n+\tparam 1 \"insn\" from rtx to rtx_insn *.\n+\t(ix86_use_lea_for_mov): Likewise.\n+\t(ix86_avoid_lea_for_addr): Likewise.\n+\t(ix86_split_lea_for_addr): Likewise.\n+\t(ix86_lea_for_add_ok): Likewise.\n+\t(ix86_output_call_insn): Likewise.\n+\n+\t* config/i386/i386.c (ix86_va_start): Likewise for local \"seq\".\n+\t(ix86_get_drap_rtx): Likewise for locals \"seq\", \"insn\".\n+\t(ix86_output_function_epilogue): Likewise for locals \"insn\",\n+\t\"deleted_debug_label\".\n+\t(legitimize_tls_address): Likewise for local \"insn\".\n+\t(get_some_local_dynamic_name): Likewise.\n+\t(increase_distance): Likewise for params \"prev\", \"next\".\n+\t(distance_non_agu_define_in_bb): Likewise for params \"insn\",\n+\t\"start\" and locals \"prev\", \"next\".\n+\t(distance_non_agu_define): Likewise for param \"insn\".\n+\t(distance_agu_use_in_bb): Likewise for params \"insn\", \"start\" and\n+\tlocals \"next\", \"prev\".\n+\t(distance_agu_use): Likewise for param \"insn\".\n+\t(ix86_lea_outperforms): Likewise.\n+\t(ix86_ok_to_clobber_flags): Likewise.\n+\t(ix86_avoid_lea_for_add): Likewise.\n+\t(ix86_use_lea_for_mov): Likewise.\n+\t(ix86_avoid_lea_for_addr): Likewise.\n+\t(find_nearest_reg_def): Likewise, also for locals \"prev\", \"start\".\n+\t(ix86_split_lea_for_addr): Likewise for param \"insn\".\n+\t(ix86_lea_for_add_ok): Likewise for param \"insn\".\n+\t(ix86_expand_carry_flag_compare): Likewise for local\n+\t\"compare_seq\".\n+\t(ix86_expand_int_movcc): Likewise.\n+\t(ix86_output_call_insn): Likewise for param \"insn\".\n+\t(ix86_output_call_insn): Likewise for local \"i\".\n+\t(x86_output_mi_thunk): Introduce local \"insn\", using it in place\n+\tof \"tmp\" when dealing with insns.\n+\t(ix86_avoid_jump_mispredicts): Likewise for locals \"insn\",\n+\t\"start\".\n+\t(ix86_pad_returns): Likewise for locals \"ret\", \"prev\".\n+\t(ix86_count_insn_bb): Likewise for local \"insn\".\n+\t(ix86_pad_short_function): Likewise for locals \"ret\", \"insn\".\n+\t(ix86_seh_fixup_eh_fallthru): Likewise for locals \"insn\", \"next\".\n+\t(ix86_vector_duplicate_value): Likewise for local \"insn\", \"seq\".\n+\t(expand_vec_perm_interleave2): Likewise for local \"seq\".\n+\t(expand_vec_perm_vperm2f128_vblend): Likewise.\n+\t(ix86_loop_unroll_adjust): Likewise for local \"insn\".  Convert\n+\tcall to for_each_rtx with for_each_rtx_in_insn.\n+\n 2014-08-25  David Malcolm  <dmalcolm@redhat.com>\n \n \t* config/i386/i386.c (setup_incoming_varargs_64): Strengthen local"}, {"sha": "0670962b940e16383ef2a759476ae9d7653221b1", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/612b40cfab82f66de5a27a36ad208b2eed20234a/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/612b40cfab82f66de5a27a36ad208b2eed20234a/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=612b40cfab82f66de5a27a36ad208b2eed20234a", "patch": "@@ -93,11 +93,11 @@ extern void ix86_expand_binary_operator (enum rtx_code,\n extern void ix86_expand_vector_logical_operator (enum rtx_code,\n \t\t\t\t\t\t enum machine_mode, rtx[]);\n extern bool ix86_binary_operator_ok (enum rtx_code, enum machine_mode, rtx[]);\n-extern bool ix86_avoid_lea_for_add (rtx, rtx[]);\n-extern bool ix86_use_lea_for_mov (rtx, rtx[]);\n-extern bool ix86_avoid_lea_for_addr (rtx, rtx[]);\n-extern void ix86_split_lea_for_addr (rtx, rtx[], enum machine_mode);\n-extern bool ix86_lea_for_add_ok (rtx, rtx[]);\n+extern bool ix86_avoid_lea_for_add (rtx_insn *, rtx[]);\n+extern bool ix86_use_lea_for_mov (rtx_insn *, rtx[]);\n+extern bool ix86_avoid_lea_for_addr (rtx_insn *, rtx[]);\n+extern void ix86_split_lea_for_addr (rtx_insn *, rtx[], enum machine_mode);\n+extern bool ix86_lea_for_add_ok (rtx_insn *, rtx[]);\n extern bool ix86_vec_interleave_v2df_operator_ok (rtx operands[3], bool high);\n extern bool ix86_dep_by_shift_count (const_rtx set_insn, const_rtx use_insn);\n extern bool ix86_agi_dependent (rtx set_insn, rtx use_insn);\n@@ -302,7 +302,7 @@ extern int asm_preferred_eh_data_format (int, int);\n extern enum attr_cpu ix86_schedule;\n #endif\n \n-extern const char * ix86_output_call_insn (rtx insn, rtx call_op);\n+extern const char * ix86_output_call_insn (rtx_insn *insn, rtx call_op);\n \n #ifdef RTX_CODE\n /* Target data for multipass lookahead scheduling."}, {"sha": "6bc636ad6c2b90405d45179f4308642f3ce538c8", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 55, "deletions": 48, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/612b40cfab82f66de5a27a36ad208b2eed20234a/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/612b40cfab82f66de5a27a36ad208b2eed20234a/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=612b40cfab82f66de5a27a36ad208b2eed20234a", "patch": "@@ -8401,7 +8401,8 @@ ix86_va_start (tree valist, rtx nextarg)\n       scratch_regno = split_stack_prologue_scratch_regno ();\n       if (scratch_regno != INVALID_REGNUM)\n \t{\n-\t  rtx reg, seq;\n+\t  rtx reg;\n+\t  rtx_insn *seq;\n \n \t  reg = gen_reg_rtx (Pmode);\n \t  cfun->machine->split_stack_varargs_pointer = reg;\n@@ -10212,7 +10213,7 @@ ix86_get_drap_rtx (void)\n       unsigned int regno = find_drap_reg ();\n       rtx drap_vreg;\n       rtx arg_ptr;\n-      rtx seq, insn;\n+      rtx_insn *seq, *insn;\n \n       arg_ptr = gen_rtx_REG (Pmode, regno);\n       crtl->drap_reg = arg_ptr;\n@@ -11797,8 +11798,8 @@ ix86_output_function_epilogue (FILE *file ATTRIBUTE_UNUSED, HOST_WIDE_INT)\n   /* Mach-O doesn't support labels at the end of objects, so if\n      it looks like we might want one, insert a NOP.  */\n   {\n-    rtx insn = get_last_insn ();\n-    rtx deleted_debug_label = NULL_RTX;\n+    rtx_insn *insn = get_last_insn ();\n+    rtx_insn *deleted_debug_label = NULL;\n     while (insn\n \t   && NOTE_P (insn)\n \t   && NOTE_KIND (insn) != NOTE_INSN_DELETED_LABEL)\n@@ -13494,7 +13495,7 @@ legitimize_tls_address (rtx x, enum tls_model model, bool for_mov)\n \t  if (TARGET_64BIT)\n \t    {\n \t      rtx rax = gen_rtx_REG (Pmode, AX_REG);\n-\t      rtx insns;\n+\t      rtx_insn *insns;\n \n \t      start_sequence ();\n \t      emit_call_insn\n@@ -13547,7 +13548,8 @@ legitimize_tls_address (rtx x, enum tls_model model, bool for_mov)\n \t  if (TARGET_64BIT)\n \t    {\n \t      rtx rax = gen_rtx_REG (Pmode, AX_REG);\n-\t      rtx insns, eqv;\n+\t      rtx_insn *insns;\n+\t      rtx eqv;\n \n \t      start_sequence ();\n \t      emit_call_insn\n@@ -14776,7 +14778,7 @@ get_some_local_dynamic_name_1 (rtx *px, void *)\n static const char *\n get_some_local_dynamic_name (void)\n {\n-  rtx insn;\n+  rtx_insn *insn;\n \n   if (cfun->machine->some_ld_name)\n     return cfun->machine->some_ld_name;\n@@ -17782,7 +17784,7 @@ ix86_emit_cfi ()\n    go to next cycle if there is some dependecy.  */\n \n static unsigned int\n-increase_distance (rtx prev, rtx next, unsigned int distance)\n+increase_distance (rtx_insn *prev, rtx_insn *next, unsigned int distance)\n {\n   df_ref def, use;\n \n@@ -17847,12 +17849,12 @@ insn_uses_reg_mem (unsigned int regno, rtx insn)\n \n static int\n distance_non_agu_define_in_bb (unsigned int regno1, unsigned int regno2,\n-\t\t\t       rtx insn, int distance,\n-\t\t\t       rtx start, bool *found)\n+\t\t\t       rtx_insn *insn, int distance,\n+\t\t\t       rtx_insn *start, bool *found)\n {\n   basic_block bb = start ? BLOCK_FOR_INSN (start) : NULL;\n-  rtx prev = start;\n-  rtx next = NULL;\n+  rtx_insn *prev = start;\n+  rtx_insn *next = NULL;\n \n   *found = false;\n \n@@ -17894,7 +17896,7 @@ distance_non_agu_define_in_bb (unsigned int regno1, unsigned int regno2,\n \n static int\n distance_non_agu_define (unsigned int regno1, unsigned int regno2,\n-\t\t\t rtx insn)\n+\t\t\t rtx_insn *insn)\n {\n   basic_block bb = BLOCK_FOR_INSN (insn);\n   int distance = 0;\n@@ -17971,12 +17973,12 @@ distance_non_agu_define (unsigned int regno1, unsigned int regno2,\n \n static int\n distance_agu_use_in_bb (unsigned int regno,\n-\t\t\trtx insn, int distance, rtx start,\n+\t\t\trtx_insn *insn, int distance, rtx_insn *start,\n \t\t\tbool *found, bool *redefined)\n {\n   basic_block bb = NULL;\n-  rtx next = start;\n-  rtx prev = NULL;\n+  rtx_insn *next = start;\n+  rtx_insn *prev = NULL;\n \n   *found = false;\n   *redefined = false;\n@@ -18030,7 +18032,7 @@ distance_agu_use_in_bb (unsigned int regno,\n    a use is found within LEA_SEARCH_THRESHOLD or REGNO0 is set.  */\n \n static int\n-distance_agu_use (unsigned int regno0, rtx insn)\n+distance_agu_use (unsigned int regno0, rtx_insn *insn)\n {\n   basic_block bb = BLOCK_FOR_INSN (insn);\n   int distance = 0;\n@@ -18104,7 +18106,7 @@ distance_agu_use (unsigned int regno0, rtx insn)\n    SPLIT_COST cycles higher latency than lea latency.  */\n \n static bool\n-ix86_lea_outperforms (rtx insn, unsigned int regno0, unsigned int regno1,\n+ix86_lea_outperforms (rtx_insn *insn, unsigned int regno0, unsigned int regno1,\n \t\t      unsigned int regno2, int split_cost, bool has_scale)\n {\n   int dist_define, dist_use;\n@@ -18158,7 +18160,7 @@ ix86_lea_outperforms (rtx insn, unsigned int regno0, unsigned int regno1,\n    false otherwise.  */\n \n static bool\n-ix86_ok_to_clobber_flags (rtx insn)\n+ix86_ok_to_clobber_flags (rtx_insn *insn)\n {\n   basic_block bb = BLOCK_FOR_INSN (insn);\n   df_ref use;\n@@ -18190,7 +18192,7 @@ ix86_ok_to_clobber_flags (rtx insn)\n    move and add to avoid AGU stalls.  */\n \n bool\n-ix86_avoid_lea_for_add (rtx insn, rtx operands[])\n+ix86_avoid_lea_for_add (rtx_insn *insn, rtx operands[])\n {\n   unsigned int regno0, regno1, regno2;\n \n@@ -18218,7 +18220,7 @@ ix86_avoid_lea_for_add (rtx insn, rtx operands[])\n    instruction.  */\n \n bool\n-ix86_use_lea_for_mov (rtx insn, rtx operands[])\n+ix86_use_lea_for_mov (rtx_insn *insn, rtx operands[])\n {\n   unsigned int regno0, regno1;\n \n@@ -18240,7 +18242,7 @@ ix86_use_lea_for_mov (rtx insn, rtx operands[])\n    instructions to avoid AGU stalls. */\n \n bool\n-ix86_avoid_lea_for_addr (rtx insn, rtx operands[])\n+ix86_avoid_lea_for_addr (rtx_insn *insn, rtx operands[])\n {\n   unsigned int regno0, regno1, regno2;\n   int split_cost;\n@@ -18344,10 +18346,10 @@ ix86_emit_binop (enum rtx_code code, enum machine_mode mode,\n /* Return true if regno1 def is nearest to the insn.  */\n \n static bool\n-find_nearest_reg_def (rtx insn, int regno1, int regno2)\n+find_nearest_reg_def (rtx_insn *insn, int regno1, int regno2)\n {\n-  rtx prev = insn;\n-  rtx start = BB_HEAD (BLOCK_FOR_INSN (insn));\n+  rtx_insn *prev = insn;\n+  rtx_insn *start = BB_HEAD (BLOCK_FOR_INSN (insn));\n \n   if (insn == start)\n     return false;\n@@ -18375,7 +18377,7 @@ find_nearest_reg_def (rtx insn, int regno1, int regno2)\n    at lea position.  */\n \n void\n-ix86_split_lea_for_addr (rtx insn, rtx operands[], enum machine_mode mode)\n+ix86_split_lea_for_addr (rtx_insn *insn, rtx operands[], enum machine_mode mode)\n {\n   unsigned int regno0, regno1, regno2;\n   struct ix86_address parts;\n@@ -18495,7 +18497,7 @@ ix86_split_lea_for_addr (rtx insn, rtx operands[], enum machine_mode mode)\n    used soon, LEA is better and otherwise ADD is better.  */\n \n bool\n-ix86_lea_for_add_ok (rtx insn, rtx operands[])\n+ix86_lea_for_add_ok (rtx_insn *insn, rtx operands[])\n {\n   unsigned int regno0 = true_regnum (operands[0]);\n   unsigned int regno1 = true_regnum (operands[1]);\n@@ -20102,7 +20104,8 @@ ix86_expand_carry_flag_compare (enum rtx_code code, rtx op0, rtx op1, rtx *pop)\n \n   if (SCALAR_FLOAT_MODE_P (mode))\n     {\n-      rtx compare_op, compare_seq;\n+      rtx compare_op;\n+      rtx_insn *compare_seq;\n \n       gcc_assert (!DECIMAL_FLOAT_MODE_P (mode));\n \n@@ -20220,7 +20223,8 @@ bool\n ix86_expand_int_movcc (rtx operands[])\n {\n   enum rtx_code code = GET_CODE (operands[1]), compare_code;\n-  rtx compare_seq, compare_op;\n+  rtx_insn *compare_seq;\n+  rtx compare_op;\n   enum machine_mode mode = GET_MODE (operands[0]);\n   bool sign_bit_compare_p = false;\n   rtx op0 = XEXP (operands[1], 0);\n@@ -24987,7 +24991,7 @@ ix86_expand_call (rtx retval, rtx fnaddr, rtx callarg1,\n /* Output the assembly for a call instruction.  */\n \n const char *\n-ix86_output_call_insn (rtx insn, rtx call_op)\n+ix86_output_call_insn (rtx_insn *insn, rtx call_op)\n {\n   bool direct_p = constant_call_address_operand (call_op, VOIDmode);\n   bool seh_nop_p = false;\n@@ -25012,7 +25016,7 @@ ix86_output_call_insn (rtx insn, rtx call_op)\n      circumstances.  Determine if we have one of those.  */\n   if (TARGET_SEH)\n     {\n-      rtx i;\n+      rtx_insn *i;\n \n       for (i = NEXT_INSN (insn); i ; i = NEXT_INSN (i))\n \t{\n@@ -38837,6 +38841,7 @@ x86_output_mi_thunk (FILE *file, tree, HOST_WIDE_INT delta,\n   rtx this_param = x86_this_parameter (function);\n   rtx this_reg, tmp, fnaddr;\n   unsigned int tmp_regno;\n+  rtx_insn *insn;\n \n   if (TARGET_64BIT)\n     tmp_regno = R10_REG;\n@@ -38996,10 +39001,10 @@ x86_output_mi_thunk (FILE *file, tree, HOST_WIDE_INT delta,\n \n   /* Emit just enough of rest_of_compilation to get the insns emitted.\n      Note that use_thunk calls assemble_start_function et al.  */\n-  tmp = get_insns ();\n-  shorten_branches (tmp);\n-  final_start_function (tmp, file, 1);\n-  final (tmp, file, 1);\n+  insn = get_insns ();\n+  shorten_branches (insn);\n+  final_start_function (insn, file, 1);\n+  final (insn, file, 1);\n   final_end_function ();\n }\n \n@@ -39140,7 +39145,7 @@ min_insn_size (rtx insn)\n static void\n ix86_avoid_jump_mispredicts (void)\n {\n-  rtx insn, start = get_insns ();\n+  rtx_insn *insn, *start = get_insns ();\n   int nbytes = 0, njumps = 0;\n   int isjump = 0;\n \n@@ -39246,8 +39251,8 @@ ix86_pad_returns (void)\n   FOR_EACH_EDGE (e, ei, EXIT_BLOCK_PTR_FOR_FN (cfun)->preds)\n     {\n       basic_block bb = e->src;\n-      rtx ret = BB_END (bb);\n-      rtx prev;\n+      rtx_insn *ret = BB_END (bb);\n+      rtx_insn *prev;\n       bool replace = false;\n \n       if (!JUMP_P (ret) || !ANY_RETURN_P (PATTERN (ret))\n@@ -39295,7 +39300,7 @@ ix86_pad_returns (void)\n static int\n ix86_count_insn_bb (basic_block bb)\n {\n-  rtx insn;\n+  rtx_insn *insn;\n   int insn_count = 0;\n \n   /* Count number of instructions in this block.  Return 4 if the number\n@@ -39376,15 +39381,15 @@ ix86_pad_short_function (void)\n \n   FOR_EACH_EDGE (e, ei, EXIT_BLOCK_PTR_FOR_FN (cfun)->preds)\n     {\n-      rtx ret = BB_END (e->src);\n+      rtx_insn *ret = BB_END (e->src);\n       if (JUMP_P (ret) && ANY_RETURN_P (PATTERN (ret)))\n \t{\n \t  int insn_count = ix86_count_insn (e->src);\n \n \t  /* Pad short function.  */\n \t  if (insn_count < 4)\n \t    {\n-\t      rtx insn = ret;\n+\t      rtx_insn *insn = ret;\n \n \t      /* Find epilogue.  */\n \t      while (insn\n@@ -39416,7 +39421,7 @@ ix86_seh_fixup_eh_fallthru (void)\n \n   FOR_EACH_EDGE (e, ei, EXIT_BLOCK_PTR_FOR_FN (cfun)->preds)\n     {\n-      rtx insn, next;\n+      rtx_insn *insn, *next;\n \n       /* Find the beginning of the epilogue.  */\n       for (insn = BB_END (e->src); insn != NULL; insn = PREV_INSN (insn))\n@@ -39629,14 +39634,15 @@ static bool\n ix86_vector_duplicate_value (enum machine_mode mode, rtx target, rtx val)\n {\n   bool ok;\n-  rtx insn, dup;\n+  rtx_insn *insn;\n+  rtx dup;\n \n   /* First attempt to recognize VAL as-is.  */\n   dup = gen_rtx_VEC_DUPLICATE (mode, val);\n   insn = emit_insn (gen_rtx_SET (VOIDmode, target, dup));\n   if (recog_memoized (insn) < 0)\n     {\n-      rtx seq;\n+      rtx_insn *seq;\n       /* If that fails, force VAL into a register.  */\n \n       start_sequence ();\n@@ -43355,7 +43361,7 @@ expand_vec_perm_interleave2 (struct expand_vec_perm_d *d)\n   unsigned i, nelt = d->nelt, nelt2 = nelt / 2;\n   unsigned HOST_WIDE_INT contents;\n   unsigned char remap[2 * MAX_VECT_LEN];\n-  rtx seq;\n+  rtx_insn *seq;\n   bool ok, same_halves = false;\n \n   if (GET_MODE_SIZE (d->vmode) == 16)\n@@ -43904,7 +43910,7 @@ expand_vec_perm_vperm2f128_vblend (struct expand_vec_perm_d *d)\n {\n   struct expand_vec_perm_d dfirst, dsecond;\n   unsigned i, j, msk, nelt = d->nelt, nelt2 = nelt / 2;\n-  rtx seq;\n+  rtx_insn *seq;\n   bool ok;\n   rtx (*blend) (rtx, rtx, rtx, rtx) = NULL;\n \n@@ -46901,7 +46907,7 @@ static unsigned\n ix86_loop_unroll_adjust (unsigned nunroll, struct loop *loop)\n {\n   basic_block *bbs;\n-  rtx insn;\n+  rtx_insn *insn;\n   unsigned i;\n   unsigned mem_count = 0;\n \n@@ -46914,7 +46920,8 @@ ix86_loop_unroll_adjust (unsigned nunroll, struct loop *loop)\n     {\n       for (insn = BB_HEAD (bbs[i]); insn != BB_END (bbs[i]); insn = NEXT_INSN (insn))\n         if (NONDEBUG_INSN_P (insn))\n-            for_each_rtx (&insn, (rtx_function) ix86_loop_memcount, &mem_count);\n+            for_each_rtx_in_insn (&insn, (rtx_function) ix86_loop_memcount,\n+\t\t\t\t  &mem_count);\n     }\n   free (bbs);\n "}]}