{"sha": "3e8fb15a8cfd0e62dd474af9f536863392ed7572", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2U4ZmIxNWE4Y2ZkMGU2MmRkNDc0YWY5ZjUzNjg2MzM5MmVkNzU3Mg==", "commit": {"author": {"name": "Joe Ramsay", "email": "Joe.Ramsay@arm.com", "date": "2020-10-06T06:33:52Z"}, "committer": {"name": "Srinath Parvathaneni", "email": "srinath.parvathaneni@arm.com", "date": "2020-10-06T07:10:47Z"}, "message": "arm: Add +nomve and +nomve.fp options to -mcpu=cortex-m55\n\nThis patch rearranges feature bits for MVE and FP to implement the\nfollowing flags for -mcpu=cortex-m55.\n\n  - +nomve:    equivalent to armv8.1-m.main+fp.dp+dsp.\n  - +nomve.fp: equivalent to armv8.1-m.main+mve+fp.dp (+dsp is implied by +mve).\n  - +nofp:     equivalent to armv8.1-m.main+mve (+dsp is implied by +mve).\n  - +nodsp:    equivalent to armv8.1-m.main+fp.dp.\n\nCombinations of the above:\n\n  - +nomve+nofp: equivalent to armv8.1-m.main+dsp.\n  - +nodsp+nofp: equivalent to armv8.1-m.main.\n\nDue to MVE and FP sharing vfp_base, some new syntax was required in the CPU\ndescription to implement the concept of 'implied bits'. These are non-named\nfeatures added to the ISA late, depending on whether one or more features which\ndepend on them are present. This means vfp_base can be present when only one of\nMVE and FP is removed, but absent when both are removed.\n\ngcc/ChangeLog:\n\n2020-07-31  Joe Ramsay  <joe.ramsay@arm.com>\n\n\t* config/arm/arm-cpus.in:\n\t(ALL_FPU_INTERNAL): Remove vfp_base.\n\t(VFPv2): Remove vfp_base.\n\t(MVE): Remove vfp_base.\n\t(vfp_base): Redefine as implied bit dependent on MVE or FP\n\t(cortex-m55): Add flags to disable MVE, MVE FP, FP and DSP extensions.\n\t* config/arm/arm.c (arm_configure_build_target): Add implied bits to ISA.\n\t* config/arm/parsecpu.awk:\n\t(gen_isa): Print implied bits and their dependencies to ISA header.\n\t(gen_data): Add parsing for implied feature bits.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/cortex-m55-nodsp-flag-hard.c: New test.\n\t* gcc.target/arm/cortex-m55-nodsp-flag-softfp.c: New test.\n\t* gcc.target/arm/cortex-m55-nodsp-nofp-flag-softfp.c: New test.\n\t* gcc.target/arm/cortex-m55-nofp-flag-hard.c: New test.\n\t* gcc.target/arm/cortex-m55-nofp-flag-softfp.c: New test.\n\t* gcc.target/arm/cortex-m55-nofp-nomve-flag-softfp.c: New test.\n\t* gcc.target/arm/cortex-m55-nomve-flag-hard.c: New test.\n\t* gcc.target/arm/cortex-m55-nomve-flag-softfp.c: New test.\n\t* gcc.target/arm/cortex-m55-nomve.fp-flag-hard.c: New test.\n\t* gcc.target/arm/cortex-m55-nomve.fp-flag-softfp.c: New test.\n\t* gcc.target/arm/multilib.exp: Add tests for -mcpu=cortex-m55.", "tree": {"sha": "a239888a26c65f40952abaeb562e37650d92726f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a239888a26c65f40952abaeb562e37650d92726f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e8fb15a8cfd0e62dd474af9f536863392ed7572", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e8fb15a8cfd0e62dd474af9f536863392ed7572", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e8fb15a8cfd0e62dd474af9f536863392ed7572", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e8fb15a8cfd0e62dd474af9f536863392ed7572/comments", "author": {"login": "joeramsay", "id": 78039542, "node_id": "MDQ6VXNlcjc4MDM5NTQy", "avatar_url": "https://avatars.githubusercontent.com/u/78039542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joeramsay", "html_url": "https://github.com/joeramsay", "followers_url": "https://api.github.com/users/joeramsay/followers", "following_url": "https://api.github.com/users/joeramsay/following{/other_user}", "gists_url": "https://api.github.com/users/joeramsay/gists{/gist_id}", "starred_url": "https://api.github.com/users/joeramsay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joeramsay/subscriptions", "organizations_url": "https://api.github.com/users/joeramsay/orgs", "repos_url": "https://api.github.com/users/joeramsay/repos", "events_url": "https://api.github.com/users/joeramsay/events{/privacy}", "received_events_url": "https://api.github.com/users/joeramsay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sripar01", "id": 115715849, "node_id": "U_kgDOBuWvCQ", "avatar_url": "https://avatars.githubusercontent.com/u/115715849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sripar01", "html_url": "https://github.com/sripar01", "followers_url": "https://api.github.com/users/sripar01/followers", "following_url": "https://api.github.com/users/sripar01/following{/other_user}", "gists_url": "https://api.github.com/users/sripar01/gists{/gist_id}", "starred_url": "https://api.github.com/users/sripar01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sripar01/subscriptions", "organizations_url": "https://api.github.com/users/sripar01/orgs", "repos_url": "https://api.github.com/users/sripar01/repos", "events_url": "https://api.github.com/users/sripar01/events{/privacy}", "received_events_url": "https://api.github.com/users/sripar01/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2364fb436ff64a4c5293b697f37d53fd58a9f54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2364fb436ff64a4c5293b697f37d53fd58a9f54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2364fb436ff64a4c5293b697f37d53fd58a9f54"}], "stats": {"total": 257, "additions": 250, "deletions": 7}, "files": [{"sha": "8c61ad0f048394c22ff21d0e31a4a88893e2a724", "filename": "gcc/config/arm/arm-cpus.in", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e8fb15a8cfd0e62dd474af9f536863392ed7572/gcc%2Fconfig%2Farm%2Farm-cpus.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e8fb15a8cfd0e62dd474af9f536863392ed7572/gcc%2Fconfig%2Farm%2Farm-cpus.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-cpus.in?ref=3e8fb15a8cfd0e62dd474af9f536863392ed7572", "patch": "@@ -135,10 +135,6 @@ define feature armv8_1m_main\n # Floating point and Neon extensions.\n # VFPv1 is not supported in GCC.\n \n-# This feature bit is enabled for all VFP, MVE and\n-# MVE with floating point extensions.\n-define feature vfp_base\n-\n # Vector floating point v2.\n define feature vfpv2\n \n@@ -251,7 +247,7 @@ define fgroup ALL_SIMD\tALL_SIMD_INTERNAL ALL_SIMD_EXTERNAL\n \n # List of all FPU bits to strip out if -mfpu is used to override the\n # default.  fp16 is deliberately missing from this list.\n-define fgroup ALL_FPU_INTERNAL\tvfp_base vfpv2 vfpv3 vfpv4 fpv5 fp16conv fp_dbl ALL_SIMD_INTERNAL\n+define fgroup ALL_FPU_INTERNAL\tvfpv2 vfpv3 vfpv4 fpv5 fp16conv fp_dbl ALL_SIMD_INTERNAL\n # Similarly, but including fp16 and other extensions that aren't part of\n # -mfpu support.\n define fgroup ALL_FPU_EXTERNAL fp16 bf16\n@@ -296,11 +292,11 @@ define fgroup ARMv8r      ARMv8a\n define fgroup ARMv8_1m_main ARMv8m_main armv8_1m_main\n \n # Useful combinations.\n-define fgroup VFPv2\tvfp_base vfpv2\n+define fgroup VFPv2\tvfpv2\n define fgroup VFPv3\tVFPv2 vfpv3\n define fgroup VFPv4\tVFPv3 vfpv4 fp16conv\n define fgroup FPv5\tVFPv4 fpv5\n-define fgroup MVE      mve vfp_base armv7em\n+define fgroup MVE      mve armv7em\n define fgroup MVE_FP   MVE FPv5 fp16 mve_float\n \n define fgroup FP_DBL\tfp_dbl\n@@ -310,6 +306,18 @@ define fgroup NEON\tFP_D32 neon\n define fgroup CRYPTO\tNEON crypto\n define fgroup DOTPROD\tNEON dotprod\n \n+# Implied feature bits.  These are for non-named features shared between fgroups.\n+# Shared feature f belonging to fgroups A and B will be erroneously removed if:\n+# A and B are enabled by default AND A is disabled by a removal flag.\n+# To ensure that f is retained, we must add such bits to the ISA after\n+# processing the removal flags.  This is implemented by 'implied bits':\n+# define implied <name> [<feature-or-fgroup>]+\n+# This indicates that, if any of the listed features are enabled, or if any\n+# member of a listed fgroup is enabled, then <name> will be implicitly enabled.\n+\n+# Enabled for all VFP, MVE and MVE with floating point extensions.\n+define implied vfp_base MVE MVE_FP ALL_FP\n+\n # List of all quirk bits to strip out when comparing CPU features with\n # architectures.\n # xscale isn't really a 'quirk', but it isn't an architecture either and we\n@@ -1565,6 +1573,10 @@ begin cpu cortex-m55\n  cname cortexm55\n  tune flags LDSCHED\n  architecture armv8.1-m.main+mve.fp+fp.dp\n+ option nomve.fp remove mve_float\n+ option nomve remove mve mve_float\n+ option nofp remove ALL_FP mve_float\n+ option nodsp remove MVE mve_float\n  isa quirk_no_asmcpu\n  costs v7m\n  vendor 41"}, {"sha": "bd7be8fde011fa6144039a54e5e2fb6d87b64813", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e8fb15a8cfd0e62dd474af9f536863392ed7572/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e8fb15a8cfd0e62dd474af9f536863392ed7572/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=3e8fb15a8cfd0e62dd474af9f536863392ed7572", "patch": "@@ -3391,6 +3391,20 @@ arm_configure_build_target (struct arm_build_target *target,\n       bitmap_ior (target->isa, target->isa, fpu_bits);\n     }\n \n+  /* There may be implied bits which we still need to enable. These are\n+     non-named features which are needed to complete other sets of features,\n+     but cannot be enabled from arm-cpus.in due to being shared between\n+     multiple fgroups. Each entry in all_implied_fbits is of the form\n+     ante -> cons, meaning that if the feature \"ante\" is enabled, we should\n+     implicitly enable \"cons\".  */\n+  const struct fbit_implication *impl = all_implied_fbits;\n+  while (impl->ante)\n+    {\n+      if (bitmap_bit_p (target->isa, impl->ante))\n+\tbitmap_set_bit (target->isa, impl->cons);\n+      impl++;\n+    }\n+\n   if (!arm_selected_tune)\n     arm_selected_tune = arm_selected_cpu;\n   else /* Validate the features passed to -mtune.  */"}, {"sha": "9423e8a9d5ce56383365e3c80b581970cde4e51d", "filename": "gcc/config/arm/parsecpu.awk", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e8fb15a8cfd0e62dd474af9f536863392ed7572/gcc%2Fconfig%2Farm%2Fparsecpu.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e8fb15a8cfd0e62dd474af9f536863392ed7572/gcc%2Fconfig%2Farm%2Fparsecpu.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fparsecpu.awk?ref=3e8fb15a8cfd0e62dd474af9f536863392ed7572", "patch": "@@ -190,6 +190,23 @@ function gen_isa () {\n \tORS = z\n \tprint \"\\n\"\n     }\n+\n+    print \"struct fbit_implication {\"\n+    print \"  /* Represents a feature implication, where:\"\n+    print \"     ante IMPLIES cons\"\n+    print \"     meaning that if ante is enabled then we should\"\n+    print \"     also implicitly enable cons.  */\"\n+    print \"  enum isa_feature ante;\"\n+    print \"  enum isa_feature cons;\"\n+    print \"};\\n\"\n+    print \"static const struct fbit_implication all_implied_fbits[] =\"\n+    print \"{\"\n+    for (impl in implied_bits) {\n+      split (impl, impl_parts, SUBSEP)\n+      print \"  { isa_bit_\" impl_parts[2] \", isa_bit_\" impl_parts[1] \" },\"\n+    }\n+    print \"  { isa_nobit, isa_nobit }\"\n+    print \"};\\n\"\n }\n \n function gen_data () {\n@@ -600,6 +617,40 @@ BEGIN {\n     parse_ok = 1\n }\n \n+/^define implied / {\n+  if (NF < 4) fatal(\"syntax: define implied <name> [<feature-or-fgroup>]+\\n\" \\\n+\t\t    \"Implied bits must be defined with at least one antecedent.\")\n+  toplevel()\n+  fbit = $3\n+  if (fbit in features) fatal(\"implied feature \" fbit \" aliases a real feature\")\n+  if (fbit in fgroup) fatal(\"implied feature \" fbit \" aliases a feature group\")\n+  fcount = NF\n+  features[fbit] = 1\n+  for (n = 4; n <= fcount; n++) {\n+    ante = $n\n+    if (fbit == ante) fatal(\"feature cannot imply itself\")\n+    else if (ante in features) {\n+      for (impl in implied_bits) {\n+\tsplit(impl, impl_sep, SUBSEP)\n+\tif (ante == impl_sep[1])\n+\t  fatal(ante \" implies implied bit \" fbit\t\t\\\n+\t\t\". Chained implications not currently supported\")\n+      }\n+      implied_bits[fbit, ante] = 1\n+    } else if (ante in fgroup) {\n+      for (bitcomb in fgrp_bits) {\n+\tsplit(bitcomb, bitsep, SUBSEP)\n+\tif (bitsep[1] == ante) {\n+\t  implied_bits[fbit, bitsep[2]] = 1\n+\t}\n+      }\n+    } else {\n+      fatal(\"implied bit antecedent \" ante \" unrecognized\")\n+    }\n+  }\n+  parse_ok = 1\n+}\n+\n /^begin fpu / {\n     if (NF != 3) fatal(\"syntax: begin fpu <name>\")\n     toplevel()"}, {"sha": "b3c7fd06a1ad1bbe70123a834a8a0b6587cba9f2", "filename": "gcc/testsuite/gcc.target/arm/cortex-m55-nodsp-flag-hard.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e8fb15a8cfd0e62dd474af9f536863392ed7572/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcortex-m55-nodsp-flag-hard.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e8fb15a8cfd0e62dd474af9f536863392ed7572/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcortex-m55-nodsp-flag-hard.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcortex-m55-nodsp-flag-hard.c?ref=3e8fb15a8cfd0e62dd474af9f536863392ed7572", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-additional-options \"-mcpu=cortex-m55+nodsp -mfloat-abi=hard -mfpu=auto --save-temps\" } */\n+/* { dg-final { scan-assembler \"\\.arch_extension fp\" } } */\n+/* { dg-final { scan-assembler \"\\.arch_extension fp.dp\" } } */\n+/* { dg-final { scan-assembler-not \"\\.arch_extension dsp\" } } */\n+/* { dg-final { scan-assembler-not \"\\.arch_extension mve\" } } */\n+/* { dg-final { scan-assembler-not \"\\.arch_extension mve.fp\" } } */\n+/* { dg-final { scan-assembler \"\\.fpu fpv5-d16\" } } */\n+\n+int\n+f ()\n+{\n+  return 1;\n+}"}, {"sha": "3806554761f5e6f0c5a1688b1373a2cf4c609b97", "filename": "gcc/testsuite/gcc.target/arm/cortex-m55-nodsp-flag-softfp.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e8fb15a8cfd0e62dd474af9f536863392ed7572/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcortex-m55-nodsp-flag-softfp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e8fb15a8cfd0e62dd474af9f536863392ed7572/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcortex-m55-nodsp-flag-softfp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcortex-m55-nodsp-flag-softfp.c?ref=3e8fb15a8cfd0e62dd474af9f536863392ed7572", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-additional-options \"-mcpu=cortex-m55+nodsp -mfloat-abi=softfp -mfpu=auto --save-temps\" } */\n+/* { dg-final { scan-assembler \"\\.arch_extension fp\" } } */\n+/* { dg-final { scan-assembler \"\\.arch_extension fp.dp\" } } */\n+/* { dg-final { scan-assembler-not \"\\.arch_extension dsp\" } } */\n+/* { dg-final { scan-assembler-not \"\\.arch_extension mve\" } } */\n+/* { dg-final { scan-assembler-not \"\\.arch_extension mve.fp\" } } */\n+/* { dg-final { scan-assembler \"\\.fpu fpv5-d16\" } } */\n+\n+int\n+f ()\n+{\n+  return 1;\n+}"}, {"sha": "d22eb4e063036a99f5274c441427ace08f328ec4", "filename": "gcc/testsuite/gcc.target/arm/cortex-m55-nodsp-nofp-flag-softfp.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e8fb15a8cfd0e62dd474af9f536863392ed7572/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcortex-m55-nodsp-nofp-flag-softfp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e8fb15a8cfd0e62dd474af9f536863392ed7572/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcortex-m55-nodsp-nofp-flag-softfp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcortex-m55-nodsp-nofp-flag-softfp.c?ref=3e8fb15a8cfd0e62dd474af9f536863392ed7572", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-additional-options \"-mcpu=cortex-m55+nodsp+nofp -mfloat-abi=softfp -mfpu=auto --save-temps\" } */\n+/* { dg-final { scan-assembler-not \"\\.arch_extension fp\" } } */\n+/* { dg-final { scan-assembler-not \"\\.arch_extension fp.dp\" } } */\n+/* { dg-final { scan-assembler-not \"\\.arch_extension dsp\" } } */\n+/* { dg-final { scan-assembler-not \"\\.arch_extension mve\" } } */\n+/* { dg-final { scan-assembler-not \"\\.arch_extension mve.fp\" } } */\n+/* { dg-final { scan-assembler \"\\.fpu softvfp\" } } */\n+\n+int\n+f ()\n+{\n+  return 1;\n+}"}, {"sha": "da1cc25e83b1e5de4fe71b66ee146337b7714b7d", "filename": "gcc/testsuite/gcc.target/arm/cortex-m55-nofp-flag-hard.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e8fb15a8cfd0e62dd474af9f536863392ed7572/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcortex-m55-nofp-flag-hard.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e8fb15a8cfd0e62dd474af9f536863392ed7572/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcortex-m55-nofp-flag-hard.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcortex-m55-nofp-flag-hard.c?ref=3e8fb15a8cfd0e62dd474af9f536863392ed7572", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-additional-options \"-mcpu=cortex-m55+nofp -mfloat-abi=hard -mfpu=auto --save-temps\" } */\n+/* { dg-final { scan-assembler \"\\.arch_extension mve\" } } */\n+/* { dg-final { scan-assembler \"\\.arch_extension dsp\" } } */\n+/* { dg-final { scan-assembler-not \"\\.arch_extension fp\" } } */\n+/* { dg-final { scan-assembler-not \"\\.arch_extension fp.dp\" } } */\n+/* { dg-final { scan-assembler-not \"\\.arch_extension mve.fp\" } } */\n+/* { dg-final { scan-assembler-not \"\\.fpu\" } } */\n+\n+int\n+f ()\n+{\n+  return 1;\n+}"}, {"sha": "0a4fb14bd9b7291c60d3acb571bd9cbdfeca5e09", "filename": "gcc/testsuite/gcc.target/arm/cortex-m55-nofp-flag-softfp.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e8fb15a8cfd0e62dd474af9f536863392ed7572/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcortex-m55-nofp-flag-softfp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e8fb15a8cfd0e62dd474af9f536863392ed7572/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcortex-m55-nofp-flag-softfp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcortex-m55-nofp-flag-softfp.c?ref=3e8fb15a8cfd0e62dd474af9f536863392ed7572", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-additional-options \"-mcpu=cortex-m55+nofp -mfloat-abi=softfp -mfpu=auto --save-temps\" } */\n+/* { dg-final { scan-assembler \"\\.arch_extension mve\" } } */\n+/* { dg-final { scan-assembler \"\\.arch_extension dsp\" } } */\n+/* { dg-final { scan-assembler-not \"\\.arch_extension fp\" } } */\n+/* { dg-final { scan-assembler-not \"\\.arch_extension fp.dp\" } } */\n+/* { dg-final { scan-assembler-not \"\\.arch_extension mve.fp\" } } */\n+/* { dg-final { scan-assembler-not \"\\.fpu\" } } */\n+\n+int\n+f ()\n+{\n+  return 1;\n+}"}, {"sha": "2ae7f34d4563dd4b53f030512cb6dbb6a166db16", "filename": "gcc/testsuite/gcc.target/arm/cortex-m55-nofp-nomve-flag-softfp.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e8fb15a8cfd0e62dd474af9f536863392ed7572/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcortex-m55-nofp-nomve-flag-softfp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e8fb15a8cfd0e62dd474af9f536863392ed7572/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcortex-m55-nofp-nomve-flag-softfp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcortex-m55-nofp-nomve-flag-softfp.c?ref=3e8fb15a8cfd0e62dd474af9f536863392ed7572", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-additional-options \"-mcpu=cortex-m55+nomve+nofp -mfloat-abi=softfp -mfpu=auto --save-temps\" } */\n+/* { dg-final { scan-assembler-not \"\\.arch_extension mve\" } } */\n+/* { dg-final { scan-assembler-not \"\\.arch_extension mve.fp\" } } */\n+/* { dg-final { scan-assembler-not \"\\.arch_extension fp\" } } */\n+/* { dg-final { scan-assembler-not \"\\.arch_extension fp.dp\" } } */\n+/* { dg-final { scan-assembler \"\\.arch_extension dsp\" } } */\n+/* { dg-final { scan-assembler-not \"\\.fpu\" } } */\n+\n+int\n+f ()\n+{\n+  return 1;\n+}"}, {"sha": "a6ccd7b6ed43c6efff7b2ddb530dc9bf7fd91506", "filename": "gcc/testsuite/gcc.target/arm/cortex-m55-nomve-flag-hard.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e8fb15a8cfd0e62dd474af9f536863392ed7572/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcortex-m55-nomve-flag-hard.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e8fb15a8cfd0e62dd474af9f536863392ed7572/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcortex-m55-nomve-flag-hard.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcortex-m55-nomve-flag-hard.c?ref=3e8fb15a8cfd0e62dd474af9f536863392ed7572", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-additional-options \"-mcpu=cortex-m55+nomve -mfloat-abi=hard -mfpu=auto --save-temps\" } */\n+/* { dg-final { scan-assembler-not \"\\.arch_extension mve\" } } */\n+/* { dg-final { scan-assembler \"\\.arch_extension dsp\" } } */\n+/* { dg-final { scan-assembler \"\\.arch_extension fp\" } } */\n+/* { dg-final { scan-assembler \"\\.arch_extension fp.dp\" } } */\n+/* { dg-final { scan-assembler \"\\.fpu fpv5-d16\" } } */\n+/* { dg-final { scan-assembler-not \"\\.arch_extension mve.fp\" } } */\n+\n+int\n+f ()\n+{\n+  return 1;\n+}"}, {"sha": "2ad976a7960ae75ca62cdf16ba5b3112d0837294", "filename": "gcc/testsuite/gcc.target/arm/cortex-m55-nomve-flag-softfp.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e8fb15a8cfd0e62dd474af9f536863392ed7572/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcortex-m55-nomve-flag-softfp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e8fb15a8cfd0e62dd474af9f536863392ed7572/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcortex-m55-nomve-flag-softfp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcortex-m55-nomve-flag-softfp.c?ref=3e8fb15a8cfd0e62dd474af9f536863392ed7572", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-additional-options \"-mcpu=cortex-m55+nomve -mfloat-abi=softfp -mfpu=auto --save-temps\" } */\n+/* { dg-final { scan-assembler-not \"\\.arch_extension mve\" } } */\n+/* { dg-final { scan-assembler \"\\.arch_extension dsp\" } } */\n+/* { dg-final { scan-assembler \"\\.arch_extension fp\" } } */\n+/* { dg-final { scan-assembler \"\\.arch_extension fp.dp\" } } */\n+/* { dg-final { scan-assembler \"\\.fpu fpv5-d16\" } } */\n+/* { dg-final { scan-assembler-not \"\\.arch_extension mve.fp\" } } */\n+\n+int\n+f ()\n+{\n+  return 1;\n+}"}, {"sha": "40d54b89befb4be2020d5be99542189d792a285e", "filename": "gcc/testsuite/gcc.target/arm/cortex-m55-nomve.fp-flag-hard.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e8fb15a8cfd0e62dd474af9f536863392ed7572/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcortex-m55-nomve.fp-flag-hard.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e8fb15a8cfd0e62dd474af9f536863392ed7572/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcortex-m55-nomve.fp-flag-hard.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcortex-m55-nomve.fp-flag-hard.c?ref=3e8fb15a8cfd0e62dd474af9f536863392ed7572", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-additional-options \"-mcpu=cortex-m55+nomve.fp -mfloat-abi=hard -mfpu=auto --save-temps\" } */\n+/* { dg-final { scan-assembler-not \"\\.arch_extension mve.fp\" } } */\n+/* { dg-final { scan-assembler \"\\.arch_extension mve\" } } */\n+/* { dg-final { scan-assembler \"\\.arch_extension dsp\" } } */\n+/* { dg-final { scan-assembler \"\\.arch_extension fp\" } } */\n+/* { dg-final { scan-assembler \"\\.arch_extension fp.dp\" } } */\n+/* { dg-final { scan-assembler \"\\.fpu fpv5-d16\" } } */\n+\n+int\n+f ()\n+{\n+  return 1;\n+}"}, {"sha": "c72680314cf37b06b824b55f5412a4d52c965fde", "filename": "gcc/testsuite/gcc.target/arm/cortex-m55-nomve.fp-flag-softfp.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e8fb15a8cfd0e62dd474af9f536863392ed7572/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcortex-m55-nomve.fp-flag-softfp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e8fb15a8cfd0e62dd474af9f536863392ed7572/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcortex-m55-nomve.fp-flag-softfp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcortex-m55-nomve.fp-flag-softfp.c?ref=3e8fb15a8cfd0e62dd474af9f536863392ed7572", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-additional-options \"-mcpu=cortex-m55+nomve.fp -mfloat-abi=softfp -mfpu=auto --save-temps\" } */\n+/* { dg-final { scan-assembler-not \"\\.arch_extension mve.fp\" } } */\n+/* { dg-final { scan-assembler \"\\.arch_extension mve\" } } */\n+/* { dg-final { scan-assembler \"\\.arch_extension dsp\" } } */\n+/* { dg-final { scan-assembler \"\\.arch_extension fp\" } } */\n+/* { dg-final { scan-assembler \"\\.arch_extension fp.dp\" } } */\n+/* { dg-final { scan-assembler \"\\.fpu fpv5-d16\" } } */\n+\n+int\n+f ()\n+{\n+  return 1;\n+}"}, {"sha": "6aba29ede95263b1c9a7eff438f94f53559f8a2a", "filename": "gcc/testsuite/gcc.target/arm/multilib.exp", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e8fb15a8cfd0e62dd474af9f536863392ed7572/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmultilib.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e8fb15a8cfd0e62dd474af9f536863392ed7572/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmultilib.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmultilib.exp?ref=3e8fb15a8cfd0e62dd474af9f536863392ed7572", "patch": "@@ -824,6 +824,22 @@ if {[multilib_config \"rmprofile\"] } {\n \t{-march=armv8.1-m.main+mve.fp+fp.dp -mfpu=auto -mfloat-abi=softfp} \"thumb/v8-m.main+dp/softfp\"\n \t{-march=armv8.1-m.main+mve+fp.dp -mfpu=auto -mfloat-abi=hard} \"thumb/v8-m.main+dp/hard\"\n \t{-march=armv8.1-m.main+mve.fp+fp.dp -mfpu=auto -mfloat-abi=hard} \"thumb/v8-m.main+dp/hard\"\n+\t{-mcpu=cortex-m55+nomve -mfpu=auto -mfloat-abi=soft} \"thumb/v8-m.main/nofp\"\n+\t{-mcpu=cortex-m55+nomve -mfpu=auto -mfloat-abi=softfp} \"thumb/v8-m.main+dp/softfp\"\n+\t{-mcpu=cortex-m55+nomve -mfpu=auto -mfloat-abi=hard} \"thumb/v8-m.main+dp/hard\"\n+\t{-mcpu=cortex-m55+nomve.fp -mfpu=auto -mfloat-abi=soft} \"thumb/v8-m.main/nofp\"\n+\t{-mcpu=cortex-m55+nomve.fp -mfpu=auto -mfloat-abi=softfp} \"thumb/v8-m.main+dp/softfp\"\n+\t{-mcpu=cortex-m55+nomve.fp -mfpu=auto -mfloat-abi=hard} \"thumb/v8-m.main+dp/hard\"\n+\t{-mcpu=cortex-m55+nofp -mfpu=auto -mfloat-abi=soft} \"thumb/v8-m.main/nofp\"\n+\t{-mcpu=cortex-m55+nofp -mfpu=auto -mfloat-abi=softfp} \"thumb/v8-m.main/nofp\"\n+\t{-mcpu=cortex-m55+nofp -mfpu=auto -mfloat-abi=hard} \"thumb/v8.1-m.main+mve/hard\"\n+\t{-mcpu=cortex-m55+nodsp -mfpu=auto -mfloat-abi=soft} \"thumb/v8-m.main/nofp\"\n+\t{-mcpu=cortex-m55+nodsp -mfpu=auto -mfloat-abi=softfp} \"thumb/v8-m.main+dp/softfp\"\n+\t{-mcpu=cortex-m55+nodsp -mfpu=auto -mfloat-abi=hard} \"thumb/v8-m.main+dp/hard\"\n+\t{-mcpu=cortex-m55+nomve+nofp -mfpu=auto -mfloat-abi=soft} \"thumb/v8-m.main/nofp\"\n+\t{-mcpu=cortex-m55+nomve+nofp -mfpu=auto -mfloat-abi=softfp} \"thumb/v8-m.main/nofp\"\n+\t{-mcpu=cortex-m55+nodsp+nofp -mfpu=auto -mfloat-abi=soft} \"thumb/v8-m.main/nofp\"\n+\t{-mcpu=cortex-m55+nodsp+nofp -mfpu=auto -mfloat-abi=softfp} \"thumb/v8-m.main/nofp\"\n     } {\n \tcheck_multi_dir $opts $dir\n     }"}]}