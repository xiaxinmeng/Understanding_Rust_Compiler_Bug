{"sha": "62d4592363e21433046e6ab066f94203b9da8edd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjJkNDU5MjM2M2UyMTQzMzA0NmU2YWIwNjZmOTQyMDNiOWRhOGVkZA==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2004-05-10T18:35:43Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2004-05-10T18:35:43Z"}, "message": "read-rtl.c (read_rtx): Allow 's' and 'T' strings to be omitted, treating missing ones as \"\".\n\n\t* read-rtl.c (read_rtx): Allow 's' and 'T' strings to be omitted,\n\ttreating missing ones as \"\".\n\t* config/mips/mips.md: Remove constraints from match_operands and\n\tmatch_scratches if they appear in define_expands (except reload*),\n\tdefine_peephole2s, define_splits or attribute specifications.\n\t* config/mips/7000.md, config/mips/sb1.md: Remove match_operand\n\tconstraint strings.\n\nFrom-SVN: r81676", "tree": {"sha": "ce05352c7b32b19a3c31bab0a19f7e1e3355740c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce05352c7b32b19a3c31bab0a19f7e1e3355740c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/62d4592363e21433046e6ab066f94203b9da8edd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62d4592363e21433046e6ab066f94203b9da8edd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62d4592363e21433046e6ab066f94203b9da8edd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62d4592363e21433046e6ab066f94203b9da8edd/comments", "author": null, "committer": null, "parents": [{"sha": "af434fa7a17e1dadd41821663b754cde38ab3810", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af434fa7a17e1dadd41821663b754cde38ab3810", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af434fa7a17e1dadd41821663b754cde38ab3810"}], "stats": {"total": 996, "additions": 503, "deletions": 493}, "files": [{"sha": "36330b7e02d6f1353c91b5937345904e16ffc206", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d4592363e21433046e6ab066f94203b9da8edd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d4592363e21433046e6ab066f94203b9da8edd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=62d4592363e21433046e6ab066f94203b9da8edd", "patch": "@@ -1,3 +1,13 @@\n+2004-05-10  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* read-rtl.c (read_rtx): Allow 's' and 'T' strings to be omitted,\n+\ttreating missing ones as \"\".\n+\t* config/mips/mips.md: Remove constraints from match_operands and\n+\tmatch_scratches if they appear in define_expands (except reload*),\n+\tdefine_peephole2s, define_splits or attribute specifications.\n+\t* config/mips/7000.md, config/mips/sb1.md: Remove match_operand\n+\tconstraint strings.\n+\n 2004-05-10  Alan Modra  <amodra@bigpond.net.au>\n \n \t* config/rs6000/rs6000.c (function_arg_boundary): Always align"}, {"sha": "8917a6fa1028fcef2e36db10b1d87862d1aabddb", "filename": "gcc/config/mips/7000.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d4592363e21433046e6ab066f94203b9da8edd/gcc%2Fconfig%2Fmips%2F7000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d4592363e21433046e6ab066f94203b9da8edd/gcc%2Fconfig%2Fmips%2F7000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2F7000.md?ref=62d4592363e21433046e6ab066f94203b9da8edd", "patch": "@@ -113,15 +113,15 @@\n \t\t (and (eq_attr \"cpu\" \"r7000\")\n \t\t      (and (eq_attr \"type\" \"imul,imadd\")\n \t\t\t   (and (eq_attr \"mode\" \"SI\")\n-\t\t\t\t(match_operand 0 \"hilo_operand\" \"\"))))\n+\t\t\t\t(match_operand 0 \"hilo_operand\"))))\n \t\t\t \"rm7_impydiv+(rm7_impydiv_iter*3)\")\n \n ;; There are an additional 2 stall cycles.\n (define_insn_reservation \"rm7_impy_si_mul\" 2\n \t\t (and (eq_attr \"cpu\" \"r7000\")\n \t\t      (and (eq_attr \"type\" \"imul,imadd\")\n \t\t\t   (and (eq_attr \"mode\" \"SI\")\n-\t\t\t\t(not (match_operand 0 \"hilo_operand\" \"\")))))\n+\t\t\t\t(not (match_operand 0 \"hilo_operand\")))))\n \t\t\t \"rm7_impydiv\")\n \n (define_insn_reservation \"rm7_impy_di\" 9 (and (eq_attr \"cpu\" \"r7000\")"}, {"sha": "c3e4ccd7372db9106a2e039dc56d3304c8226e27", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 474, "deletions": 476, "changes": 950, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d4592363e21433046e6ab066f94203b9da8edd/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d4592363e21433046e6ab066f94203b9da8edd/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=62d4592363e21433046e6ab066f94203b9da8edd", "patch": "@@ -664,7 +664,7 @@\n (define_expand \"conditional_trap\"\n   [(trap_if (match_operator 0 \"cmp_op\"\n \t\t\t    [(match_dup 2) (match_dup 3)])\n-\t    (match_operand 1 \"const_int_operand\" \"\"))]\n+\t    (match_operand 1 \"const_int_operand\"))]\n   \"ISA_HAS_COND_TRAP\"\n {\n   if (operands[1] == const0_rtx)\n@@ -721,9 +721,9 @@\n    (set_attr \"mode\"\t\"SF\")])\n \n (define_expand \"addsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(plus:SI (match_operand:SI 1 \"reg_or_0_operand\" \"\")\n-\t\t (match_operand:SI 2 \"arith_operand\" \"\")))]\n+  [(set (match_operand:SI 0 \"register_operand\")\n+\t(plus:SI (match_operand:SI 1 \"reg_or_0_operand\")\n+\t\t (match_operand:SI 2 \"arith_operand\")))]\n   \"\"\n {\n   /* If a large stack adjustment was forced into a register, we may be\n@@ -771,7 +771,7 @@\n   \"addu\\t%$,%$,%0\"\n   [(set_attr \"type\"\t\"arith\")\n    (set_attr \"mode\"\t\"SI\")\n-   (set (attr \"length\")\t(if_then_else (match_operand:VOID 0 \"m16_simm8_8\" \"\")\n+   (set (attr \"length\")\t(if_then_else (match_operand:VOID 0 \"m16_simm8_8\")\n \t\t\t\t      (const_int 4)\n \t\t\t\t      (const_int 8)))])\n \n@@ -783,7 +783,7 @@\n   \"addu\\t%0,%$,%1\"\n   [(set_attr \"type\"\t\"arith\")\n    (set_attr \"mode\"\t\"SI\")\n-   (set (attr \"length\")\t(if_then_else (match_operand:VOID 1 \"m16_uimm8_4\" \"\")\n+   (set (attr \"length\")\t(if_then_else (match_operand:VOID 1 \"m16_uimm8_4\")\n \t\t\t\t      (const_int 4)\n \t\t\t\t      (const_int 8)))])\n \n@@ -813,10 +813,10 @@\n   [(set_attr \"type\"\t\"arith\")\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr_alternative \"length\"\n-\t\t[(if_then_else (match_operand:VOID 2 \"m16_simm8_1\" \"\")\n+\t\t[(if_then_else (match_operand:VOID 2 \"m16_simm8_1\")\n \t\t\t       (const_int 4)\n \t\t\t       (const_int 8))\n-\t\t (if_then_else (match_operand:VOID 2 \"m16_simm4_1\" \"\")\n+\t\t (if_then_else (match_operand:VOID 2 \"m16_simm4_1\")\n \t\t\t       (const_int 4)\n \t\t\t       (const_int 8))\n \t\t (const_int 4)])])\n@@ -829,9 +829,9 @@\n ;; simply adding a constant to a register.\n \n (define_split\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+  [(set (match_operand:SI 0 \"register_operand\")\n \t(plus:SI (match_dup 0)\n-\t\t (match_operand:SI 1 \"const_int_operand\" \"\")))]\n+\t\t (match_operand:SI 1 \"const_int_operand\")))]\n   \"TARGET_MIPS16 && reload_completed && !TARGET_DEBUG_D_MODE\n    && GET_CODE (operands[0]) == REG\n    && M16_REG_P (REGNO (operands[0]))\n@@ -858,9 +858,9 @@\n })\n \n (define_split\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(plus:SI (match_operand:SI 1 \"register_operand\" \"\")\n-\t\t (match_operand:SI 2 \"const_int_operand\" \"\")))]\n+  [(set (match_operand:SI 0 \"register_operand\")\n+\t(plus:SI (match_operand:SI 1 \"register_operand\")\n+\t\t (match_operand:SI 2 \"const_int_operand\")))]\n   \"TARGET_MIPS16 && reload_completed && !TARGET_DEBUG_D_MODE\n    && GET_CODE (operands[0]) == REG\n    && M16_REG_P (REGNO (operands[0]))\n@@ -890,9 +890,9 @@\n })\n \n (define_expand \"adddi3\"\n-  [(parallel [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t\t   (plus:DI (match_operand:DI 1 \"register_operand\" \"\")\n-\t\t\t    (match_operand:DI 2 \"arith_operand\" \"\")))\n+  [(parallel [(set (match_operand:DI 0 \"register_operand\")\n+\t\t   (plus:DI (match_operand:DI 1 \"register_operand\")\n+\t\t\t    (match_operand:DI 2 \"arith_operand\")))\n \t      (clobber (match_dup 3))])]\n   \"TARGET_64BIT || (!TARGET_DEBUG_G_MODE && !TARGET_MIPS16)\"\n {\n@@ -944,10 +944,10 @@\n    (set_attr \"length\"\t\"16\")])\n \n (define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(plus:DI (match_operand:DI 1 \"register_operand\" \"\")\n-\t\t (match_operand:DI 2 \"register_operand\" \"\")))\n-   (clobber (match_operand:SI 3 \"register_operand\" \"\"))]\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(plus:DI (match_operand:DI 1 \"register_operand\")\n+\t\t (match_operand:DI 2 \"register_operand\")))\n+   (clobber (match_operand:SI 3 \"register_operand\"))]\n   \"reload_completed && !WORDS_BIG_ENDIAN && !TARGET_64BIT\n    && !TARGET_DEBUG_D_MODE && !TARGET_DEBUG_G_MODE && !TARGET_MIPS16\n    && GET_CODE (operands[0]) == REG && GP_REG_P (REGNO (operands[0]))\n@@ -974,10 +974,10 @@\n   \"\")\n \n (define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(plus:DI (match_operand:DI 1 \"register_operand\" \"\")\n-\t\t (match_operand:DI 2 \"register_operand\" \"\")))\n-   (clobber (match_operand:SI 3 \"register_operand\" \"\"))]\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(plus:DI (match_operand:DI 1 \"register_operand\")\n+\t\t (match_operand:DI 2 \"register_operand\")))\n+   (clobber (match_operand:SI 3 \"register_operand\"))]\n   \"reload_completed && WORDS_BIG_ENDIAN && !TARGET_64BIT\n    && !TARGET_DEBUG_D_MODE && !TARGET_DEBUG_G_MODE && !TARGET_MIPS16\n    && GET_CODE (operands[0]) == REG && GP_REG_P (REGNO (operands[0]))\n@@ -1018,10 +1018,10 @@\n    (set_attr \"length\"\t\"12,8,16\")])\n \n (define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(plus:DI (match_operand:DI 1 \"register_operand\" \"\")\n-\t\t (match_operand:DI 2 \"small_int\" \"\")))\n-   (clobber (match_operand:SI 3 \"register_operand\" \"\"))]\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(plus:DI (match_operand:DI 1 \"register_operand\")\n+\t\t (match_operand:DI 2 \"small_int\")))\n+   (clobber (match_operand:SI 3 \"register_operand\"))]\n   \"reload_completed && !WORDS_BIG_ENDIAN && !TARGET_64BIT\n    && !TARGET_DEBUG_D_MODE && !TARGET_DEBUG_G_MODE && !TARGET_MIPS16\n    && GET_CODE (operands[0]) == REG && GP_REG_P (REGNO (operands[0]))\n@@ -1042,10 +1042,10 @@\n   \"\")\n \n (define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(plus:DI (match_operand:DI 1 \"register_operand\" \"\")\n-\t\t (match_operand:DI 2 \"small_int\" \"\")))\n-   (clobber (match_operand:SI 3 \"register_operand\" \"\"))]\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(plus:DI (match_operand:DI 1 \"register_operand\")\n+\t\t (match_operand:DI 2 \"small_int\")))\n+   (clobber (match_operand:SI 3 \"register_operand\"))]\n   \"reload_completed && WORDS_BIG_ENDIAN && !TARGET_64BIT\n    && !TARGET_DEBUG_D_MODE && !TARGET_DEBUG_G_MODE && !TARGET_MIPS16\n    && GET_CODE (operands[0]) == REG && GP_REG_P (REGNO (operands[0]))\n@@ -1088,7 +1088,7 @@\n   \"daddu\\t%$,%$,%0\"\n   [(set_attr \"type\"\t\"arith\")\n    (set_attr \"mode\"\t\"DI\")\n-   (set (attr \"length\")\t(if_then_else (match_operand:VOID 0 \"m16_simm8_8\" \"\")\n+   (set (attr \"length\")\t(if_then_else (match_operand:VOID 0 \"m16_simm8_8\")\n \t\t\t\t      (const_int 4)\n \t\t\t\t      (const_int 8)))])\n \n@@ -1100,7 +1100,7 @@\n   \"daddu\\t%0,%$,%1\"\n   [(set_attr \"type\"\t\"arith\")\n    (set_attr \"mode\"\t\"DI\")\n-   (set (attr \"length\")\t(if_then_else (match_operand:VOID 0 \"m16_uimm5_4\" \"\")\n+   (set (attr \"length\")\t(if_then_else (match_operand:VOID 0 \"m16_uimm5_4\")\n \t\t\t\t      (const_int 4)\n \t\t\t\t      (const_int 8)))])\n \n@@ -1130,10 +1130,10 @@\n   [(set_attr \"type\"\t\"arith\")\n    (set_attr \"mode\"\t\"DI\")\n    (set_attr_alternative \"length\"\n-\t\t[(if_then_else (match_operand:VOID 2 \"m16_simm5_1\" \"\")\n+\t\t[(if_then_else (match_operand:VOID 2 \"m16_simm5_1\")\n \t\t\t       (const_int 4)\n \t\t\t       (const_int 8))\n-\t\t (if_then_else (match_operand:VOID 2 \"m16_simm4_1\" \"\")\n+\t\t (if_then_else (match_operand:VOID 2 \"m16_simm4_1\")\n \t\t\t       (const_int 4)\n \t\t\t       (const_int 8))\n \t\t (const_int 4)])])\n@@ -1146,9 +1146,9 @@\n ;; simply adding a constant to a register.\n \n (define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+  [(set (match_operand:DI 0 \"register_operand\")\n \t(plus:DI (match_dup 0)\n-\t\t (match_operand:DI 1 \"const_int_operand\" \"\")))]\n+\t\t (match_operand:DI 1 \"const_int_operand\")))]\n   \"TARGET_MIPS16 && TARGET_64BIT && reload_completed && !TARGET_DEBUG_D_MODE\n    && GET_CODE (operands[0]) == REG\n    && M16_REG_P (REGNO (operands[0]))\n@@ -1175,9 +1175,9 @@\n })\n \n (define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(plus:DI (match_operand:DI 1 \"register_operand\" \"\")\n-\t\t (match_operand:DI 2 \"const_int_operand\" \"\")))]\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(plus:DI (match_operand:DI 1 \"register_operand\")\n+\t\t (match_operand:DI 2 \"const_int_operand\")))]\n   \"TARGET_MIPS16 && TARGET_64BIT && reload_completed && !TARGET_DEBUG_D_MODE\n    && GET_CODE (operands[0]) == REG\n    && M16_REG_P (REGNO (operands[0]))\n@@ -1231,10 +1231,10 @@\n   [(set_attr \"type\"\t\"arith\")\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr_alternative \"length\"\n-\t\t[(if_then_else (match_operand:VOID 2 \"m16_simm8_1\" \"\")\n+\t\t[(if_then_else (match_operand:VOID 2 \"m16_simm8_1\")\n \t\t\t       (const_int 4)\n \t\t\t       (const_int 8))\n-\t\t (if_then_else (match_operand:VOID 2 \"m16_simm4_1\" \"\")\n+\t\t (if_then_else (match_operand:VOID 2 \"m16_simm4_1\")\n \t\t\t       (const_int 4)\n \t\t\t       (const_int 8))\n \t\t (const_int 4)])])\n@@ -1266,9 +1266,9 @@\n    (set_attr \"mode\"\t\"SF\")])\n \n (define_expand \"subsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(minus:SI (match_operand:SI 1 \"register_operand\" \"\")\n-\t\t  (match_operand:SI 2 \"register_operand\" \"\")))]\n+  [(set (match_operand:SI 0 \"register_operand\")\n+\t(minus:SI (match_operand:SI 1 \"register_operand\")\n+\t\t  (match_operand:SI 2 \"register_operand\")))]\n   \"\"\n   \"\")\n \n@@ -1282,9 +1282,9 @@\n    (set_attr \"mode\"\t\"SI\")])\n \n (define_expand \"subdi3\"\n-  [(parallel [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-\t\t   (minus:DI (match_operand:DI 1 \"register_operand\" \"d\")\n-\t\t\t     (match_operand:DI 2 \"register_operand\" \"d\")))\n+  [(parallel [(set (match_operand:DI 0 \"register_operand\")\n+\t\t   (minus:DI (match_operand:DI 1 \"register_operand\")\n+\t\t\t     (match_operand:DI 2 \"register_operand\")))\n \t      (clobber (match_dup 3))])]\n   \"TARGET_64BIT || (!TARGET_DEBUG_G_MODE && !TARGET_MIPS16)\"\n {\n@@ -1310,10 +1310,10 @@\n    (set_attr \"length\"\t\"16\")])\n \n (define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(minus:DI (match_operand:DI 1 \"register_operand\" \"\")\n-\t\t  (match_operand:DI 2 \"register_operand\" \"\")))\n-   (clobber (match_operand:SI 3 \"register_operand\" \"\"))]\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(minus:DI (match_operand:DI 1 \"register_operand\")\n+\t\t  (match_operand:DI 2 \"register_operand\")))\n+   (clobber (match_operand:SI 3 \"register_operand\"))]\n   \"reload_completed && !WORDS_BIG_ENDIAN && !TARGET_64BIT\n    && !TARGET_DEBUG_D_MODE && !TARGET_DEBUG_G_MODE && !TARGET_MIPS16\n    && GET_CODE (operands[0]) == REG && GP_REG_P (REGNO (operands[0]))\n@@ -1338,10 +1338,10 @@\n   \"\")\n \n (define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(minus:DI (match_operand:DI 1 \"register_operand\" \"\")\n-\t\t  (match_operand:DI 2 \"register_operand\" \"\")))\n-   (clobber (match_operand:SI 3 \"register_operand\" \"\"))]\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(minus:DI (match_operand:DI 1 \"register_operand\")\n+\t\t  (match_operand:DI 2 \"register_operand\")))\n+   (clobber (match_operand:SI 3 \"register_operand\"))]\n   \"reload_completed && WORDS_BIG_ENDIAN && !TARGET_64BIT\n    && !TARGET_DEBUG_D_MODE && !TARGET_DEBUG_G_MODE && !TARGET_MIPS16\n    && GET_CODE (operands[0]) == REG && GP_REG_P (REGNO (operands[0]))\n@@ -1393,9 +1393,9 @@\n ;;\n \n (define_expand \"muldf3\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-\t(mult:DF (match_operand:DF 1 \"register_operand\" \"f\")\n-\t\t (match_operand:DF 2 \"register_operand\" \"f\")))]\n+  [(set (match_operand:DF 0 \"register_operand\")\n+\t(mult:DF (match_operand:DF 1 \"register_operand\")\n+\t\t (match_operand:DF 2 \"register_operand\")))]\n   \"TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT\"\n   \"\")\n \n@@ -1423,9 +1423,9 @@\n    (set_attr \"length\"\t\"8\")])\n \n (define_expand \"mulsf3\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n-\t(mult:SF (match_operand:SF 1 \"register_operand\" \"f\")\n-\t\t (match_operand:SF 2 \"register_operand\" \"f\")))]\n+  [(set (match_operand:SF 0 \"register_operand\")\n+\t(mult:SF (match_operand:SF 1 \"register_operand\")\n+\t\t (match_operand:SF 2 \"register_operand\")))]\n   \"TARGET_HARD_FLOAT\"\n   \"\")\n \n@@ -1498,9 +1498,9 @@\n ;; respectively.\n \n (define_expand \"mulsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(mult:SI (match_operand:SI 1 \"register_operand\" \"\")\n-\t\t (match_operand:SI 2 \"register_operand\" \"\")))]\n+  [(set (match_operand:SI 0 \"register_operand\")\n+\t(mult:SI (match_operand:SI 1 \"register_operand\")\n+\t\t (match_operand:SI 2 \"register_operand\")))]\n   \"\"\n {\n   if (GENERATE_MULT3_SI || TARGET_MAD)\n@@ -1548,12 +1548,12 @@\n ;; Operand 4: GPR (destination)\n (define_peephole2\n   [(parallel\n-       [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t     (mult:SI (match_operand:SI 1 \"register_operand\" \"\")\n-\t\t      (match_operand:SI 2 \"register_operand\" \"\")))\n-        (clobber (match_operand:SI 3 \"register_operand\" \"\"))\n+       [(set (match_operand:SI 0 \"register_operand\")\n+\t     (mult:SI (match_operand:SI 1 \"register_operand\")\n+\t\t      (match_operand:SI 2 \"register_operand\")))\n+        (clobber (match_operand:SI 3 \"register_operand\"))\n         (clobber (scratch:SI))])\n-   (set (match_operand:SI 4 \"register_operand\" \"\")\n+   (set (match_operand:SI 4 \"register_operand\")\n \t(unspec [(match_dup 0) (match_dup 3)] UNSPEC_MFHILO))]\n   \"GENERATE_MULT3_SI && peep2_reg_dead_p (2, operands[0])\"\n   [(parallel\n@@ -1596,11 +1596,11 @@\n ;; Operand 4: GPR (destination)\n (define_peephole2\n   [(parallel\n-       [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t     (mult:SI (match_operand:SI 1 \"register_operand\" \"\")\n-\t\t      (match_operand:SI 2 \"register_operand\" \"\")))\n-        (clobber (match_operand:SI 3 \"register_operand\" \"\"))])\n-   (set (match_operand:SI 4 \"register_operand\" \"\")\n+       [(set (match_operand:SI 0 \"register_operand\")\n+\t     (mult:SI (match_operand:SI 1 \"register_operand\")\n+\t\t      (match_operand:SI 2 \"register_operand\")))\n+        (clobber (match_operand:SI 3 \"register_operand\"))])\n+   (set (match_operand:SI 4 \"register_operand\")\n \t(unspec:SI [(match_dup 0) (match_dup 3)] UNSPEC_MFHILO))]\n   \"ISA_HAS_MACC && !GENERATE_MULT3_SI\"\n   [(set (match_dup 0)\n@@ -1653,13 +1653,13 @@\n \n ;; Split the above insn if we failed to get LO allocated.\n (define_split\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(plus:SI (mult:SI (match_operand:SI 1 \"register_operand\" \"\")\n-\t\t\t  (match_operand:SI 2 \"register_operand\" \"\"))\n-\t\t (match_operand:SI 3 \"register_operand\" \"\")))\n-   (clobber (match_scratch:SI 4 \"\"))\n-   (clobber (match_scratch:SI 5 \"\"))\n-   (clobber (match_scratch:SI 6 \"\"))]\n+  [(set (match_operand:SI 0 \"register_operand\")\n+\t(plus:SI (mult:SI (match_operand:SI 1 \"register_operand\")\n+\t\t\t  (match_operand:SI 2 \"register_operand\"))\n+\t\t (match_operand:SI 3 \"register_operand\")))\n+   (clobber (match_scratch:SI 4))\n+   (clobber (match_scratch:SI 5))\n+   (clobber (match_scratch:SI 6))]\n   \"reload_completed && !TARGET_DEBUG_D_MODE\n    && GP_REG_P (true_regnum (operands[0]))\n    && GP_REG_P (true_regnum (operands[3]))\"\n@@ -1672,13 +1672,13 @@\n \n ;; Splitter to copy result of MADD to a general register\n (define_split\n-  [(set (match_operand:SI                   0 \"register_operand\" \"\")\n-        (plus:SI (mult:SI (match_operand:SI 1 \"register_operand\" \"\")\n-                          (match_operand:SI 2 \"register_operand\" \"\"))\n-                 (match_operand:SI          3 \"register_operand\" \"\")))\n-   (clobber (match_scratch:SI               4 \"\"))\n-   (clobber (match_scratch:SI               5 \"\"))\n-   (clobber (match_scratch:SI               6 \"\"))]\n+  [(set (match_operand:SI                   0 \"register_operand\")\n+        (plus:SI (mult:SI (match_operand:SI 1 \"register_operand\")\n+                          (match_operand:SI 2 \"register_operand\"))\n+                 (match_operand:SI          3 \"register_operand\")))\n+   (clobber (match_scratch:SI               4))\n+   (clobber (match_scratch:SI               5))\n+   (clobber (match_scratch:SI               6))]\n   \"reload_completed && !TARGET_DEBUG_D_MODE\n    && GP_REG_P (true_regnum (operands[0]))\n    && true_regnum (operands[3]) == LO_REGNUM\"\n@@ -1798,11 +1798,11 @@\n ;; Operand 3: GPR (destination)\n (define_peephole2\n   [(parallel\n-       [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t     (match_operand:SI 1 \"macc_msac_operand\" \"\"))\n-\t(clobber (match_operand:SI 2 \"register_operand\" \"\"))\n+       [(set (match_operand:SI 0 \"register_operand\")\n+\t     (match_operand:SI 1 \"macc_msac_operand\"))\n+\t(clobber (match_operand:SI 2 \"register_operand\"))\n \t(clobber (scratch:SI))])\n-   (set (match_operand:SI 3 \"register_operand\" \"\")\n+   (set (match_operand:SI 3 \"register_operand\")\n \t(unspec:SI [(match_dup 0) (match_dup 2)] UNSPEC_MFHILO))]\n   \"\"\n   [(parallel [(set (match_dup 0)\n@@ -1829,13 +1829,13 @@\n ;; Operand 7: new addition/subtraction\n (define_peephole2\n   [(match_scratch:SI 0 \"d\")\n-   (set (match_operand:SI 1 \"register_operand\" \"\")\n-\t(match_operand:SI 2 \"register_operand\" \"\"))\n+   (set (match_operand:SI 1 \"register_operand\")\n+\t(match_operand:SI 2 \"register_operand\"))\n    (match_dup 0)\n    (parallel\n-       [(set (match_operand:SI 3 \"register_operand\" \"\")\n-\t     (match_operand:SI 4 \"macc_msac_operand\" \"\"))\n-\t(clobber (match_operand:SI 5 \"register_operand\" \"\"))\n+       [(set (match_operand:SI 3 \"register_operand\")\n+\t     (match_operand:SI 4 \"macc_msac_operand\"))\n+\t(clobber (match_operand:SI 5 \"register_operand\"))\n \t(clobber (match_dup 1))])]\n   \"GENERATE_MULT3_SI\n    && true_regnum (operands[1]) == LO_REGNUM\n@@ -1865,16 +1865,16 @@\n ;; Operand 7: new addition/subtraction\n (define_peephole2\n   [(match_scratch:SI 0 \"d\")\n-   (set (match_operand:SI 1 \"register_operand\" \"\")\n-\t(match_operand:SI 2 \"register_operand\" \"\"))\n+   (set (match_operand:SI 1 \"register_operand\")\n+\t(match_operand:SI 2 \"register_operand\"))\n    (match_dup 0)\n    (parallel\n        [(set (match_dup 1)\n-\t     (match_operand:SI 3 \"macc_msac_operand\" \"\"))\n-\t(clobber (match_operand:SI 4 \"register_operand\" \"\"))\n+\t     (match_operand:SI 3 \"macc_msac_operand\"))\n+\t(clobber (match_operand:SI 4 \"register_operand\"))\n \t(clobber (scratch:SI))])\n    (match_dup 0)\n-   (set (match_operand:SI 5 \"register_operand\" \"\")\n+   (set (match_operand:SI 5 \"register_operand\")\n \t(unspec:SI [(match_dup 1) (match_dup 4)] UNSPEC_MFHILO))]\n   \"GENERATE_MULT3_SI && peep2_reg_dead_p (3, operands[1])\"\n   [(parallel [(set (match_dup 0)\n@@ -1908,13 +1908,13 @@\n \n ;; Split the above insn if we failed to get LO allocated.\n (define_split\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-        (minus:SI (match_operand:SI 1 \"register_operand\" \"\")\n-                  (mult:SI (match_operand:SI 2 \"register_operand\" \"\")\n-                           (match_operand:SI 3 \"register_operand\" \"\"))))\n-   (clobber (match_scratch:SI 4 \"\"))\n-   (clobber (match_scratch:SI 5 \"\"))\n-   (clobber (match_scratch:SI 6 \"\"))]\n+  [(set (match_operand:SI 0 \"register_operand\")\n+        (minus:SI (match_operand:SI 1 \"register_operand\")\n+                  (mult:SI (match_operand:SI 2 \"register_operand\")\n+                           (match_operand:SI 3 \"register_operand\"))))\n+   (clobber (match_scratch:SI 4))\n+   (clobber (match_scratch:SI 5))\n+   (clobber (match_scratch:SI 6))]\n   \"reload_completed && !TARGET_DEBUG_D_MODE\n    && GP_REG_P (true_regnum (operands[0]))\n    && GP_REG_P (true_regnum (operands[1]))\"\n@@ -1927,13 +1927,13 @@\n \n ;; Splitter to copy result of MSUB to a general register\n (define_split\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-        (minus:SI (match_operand:SI 1 \"register_operand\" \"\")\n-                  (mult:SI (match_operand:SI 2 \"register_operand\" \"\")\n-                           (match_operand:SI 3 \"register_operand\" \"\"))))\n-   (clobber (match_scratch:SI 4 \"\"))\n-   (clobber (match_scratch:SI 5 \"\"))\n-   (clobber (match_scratch:SI 6 \"\"))]\n+  [(set (match_operand:SI 0 \"register_operand\")\n+        (minus:SI (match_operand:SI 1 \"register_operand\")\n+                  (mult:SI (match_operand:SI 2 \"register_operand\")\n+                           (match_operand:SI 3 \"register_operand\"))))\n+   (clobber (match_scratch:SI 4))\n+   (clobber (match_scratch:SI 5))\n+   (clobber (match_scratch:SI 6))]\n   \"reload_completed && !TARGET_DEBUG_D_MODE\n    && GP_REG_P (true_regnum (operands[0]))\n    && true_regnum (operands[1]) == LO_REGNUM\"\n@@ -1960,9 +1960,9 @@\n    (set_attr \"mode\"     \"SI\")])\n \n (define_expand \"muldi3\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(mult:DI (match_operand:DI 1 \"register_operand\" \"\")\n-\t\t (match_operand:DI 2 \"register_operand\" \"\")))]\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(mult:DI (match_operand:DI 1 \"register_operand\")\n+\t\t (match_operand:DI 2 \"register_operand\")))]\n   \"TARGET_64BIT\"\n {\n   if (GENERATE_MULT3_DI)\n@@ -2011,10 +2011,10 @@\n \n (define_expand \"mulsidi3\"\n   [(parallel\n-      [(set (match_operand:DI 0 \"register_operand\" \"\")\n+      [(set (match_operand:DI 0 \"register_operand\")\n \t    (mult:DI\n-\t       (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"\"))\n-\t       (sign_extend:DI (match_operand:SI 2 \"register_operand\" \"\"))))\n+\t       (sign_extend:DI (match_operand:SI 1 \"register_operand\"))\n+\t       (sign_extend:DI (match_operand:SI 2 \"register_operand\"))))\n        (clobber (scratch:DI))\n        (clobber (scratch:DI))\n        (clobber (scratch:DI))])]\n@@ -2129,10 +2129,10 @@\n \n (define_expand \"umulsidi3\"\n   [(parallel\n-      [(set (match_operand:DI 0 \"register_operand\" \"\")\n+      [(set (match_operand:DI 0 \"register_operand\")\n \t    (mult:DI\n-\t       (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"\"))\n-\t       (zero_extend:DI (match_operand:SI 2 \"register_operand\" \"\"))))\n+\t       (zero_extend:DI (match_operand:SI 1 \"register_operand\"))\n+\t       (zero_extend:DI (match_operand:SI 2 \"register_operand\"))))\n        (clobber (scratch:DI))\n        (clobber (scratch:DI))\n        (clobber (scratch:DI))])]\n@@ -2236,11 +2236,11 @@\n \n ;; _highpart patterns\n (define_expand \"umulsi3_highpart\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+  [(set (match_operand:SI 0 \"register_operand\")\n \t(truncate:SI\n \t (lshiftrt:DI\n-\t  (mult:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"\"))\n-\t\t   (zero_extend:DI (match_operand:SI 2 \"register_operand\" \"\")))\n+\t  (mult:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\"))\n+\t\t   (zero_extend:DI (match_operand:SI 2 \"register_operand\")))\n \t  (const_int 32))))]\n   \"ISA_HAS_MULHI || !TARGET_FIX_R4000\"\n {\n@@ -2303,11 +2303,11 @@\n    (set_attr \"length\" \"4\")])\n \n (define_expand \"smulsi3_highpart\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+  [(set (match_operand:SI 0 \"register_operand\")\n \t(truncate:SI\n \t (lshiftrt:DI\n-\t  (mult:DI (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"\"))\n-\t\t   (sign_extend:DI (match_operand:SI 2 \"register_operand\" \"\")))\n+\t  (mult:DI (sign_extend:DI (match_operand:SI 1 \"register_operand\"))\n+\t\t   (sign_extend:DI (match_operand:SI 2 \"register_operand\")))\n          (const_int 32))))]\n   \"ISA_HAS_MULHI || !TARGET_FIX_R4000\"\n {\n@@ -2546,9 +2546,9 @@\n ;;\n \n (define_expand \"divdf3\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"\")\n-\t(div:DF (match_operand:DF 1 \"reg_or_const_float_1_operand\" \"\")\n-\t\t(match_operand:DF 2 \"register_operand\" \"\")))]\n+  [(set (match_operand:DF 0 \"register_operand\")\n+\t(div:DF (match_operand:DF 1 \"reg_or_const_float_1_operand\")\n+\t\t(match_operand:DF 2 \"register_operand\")))]\n   \"TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT\"\n {\n   if (const_float_1_operand (operands[1], DFmode))\n@@ -2596,9 +2596,9 @@\n ;; errata, or if working around those errata and a slight loss of\n ;; precision is OK (i.e., flag_unsafe_math_optimizations is set).\n (define_expand \"divsf3\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"\")\n-\t(div:SF (match_operand:SF 1 \"reg_or_const_float_1_operand\" \"\")\n-\t\t(match_operand:SF 2 \"register_operand\" \"\")))]\n+  [(set (match_operand:SF 0 \"register_operand\")\n+\t(div:SF (match_operand:SF 1 \"reg_or_const_float_1_operand\")\n+\t\t(match_operand:SF 2 \"register_operand\")))]\n   \"TARGET_HARD_FLOAT && (!TARGET_FIX_SB1 || flag_unsafe_math_optimizations)\"\n {\n   if (const_float_1_operand (operands[1], SFmode))\n@@ -2988,8 +2988,8 @@ dsrl\\t%3,%3,1\\n\\\n    (set_attr \"mode\"\t\"SI\")])\n \n (define_expand \"negdi2\"\n-  [(parallel [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-\t\t   (neg:DI (match_operand:DI 1 \"register_operand\" \"d\")))\n+  [(parallel [(set (match_operand:DI 0 \"register_operand\")\n+\t\t   (neg:DI (match_operand:DI 1 \"register_operand\")))\n \t      (clobber (match_dup 2))])]\n   \"(TARGET_64BIT || !TARGET_DEBUG_G_MODE) && !TARGET_MIPS16\"\n {\n@@ -3074,9 +3074,9 @@ dsrl\\t%3,%3,1\\n\\\n ;; want to use a different set of constraints when TARGET_MIPS16.\n \n (define_expand \"andsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d,d\")\n-\t(and:SI (match_operand:SI 1 \"uns_arith_operand\" \"%d,d\")\n-\t\t(match_operand:SI 2 \"uns_arith_operand\" \"d,K\")))]\n+  [(set (match_operand:SI 0 \"register_operand\")\n+\t(and:SI (match_operand:SI 1 \"uns_arith_operand\")\n+\t\t(match_operand:SI 2 \"uns_arith_operand\")))]\n   \"\"\n {\n   if (TARGET_MIPS16)\n@@ -3107,9 +3107,9 @@ dsrl\\t%3,%3,1\\n\\\n    (set_attr \"mode\"\t\"SI\")])\n \n (define_expand \"anddi3\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(and:DI (match_operand:DI 1 \"register_operand\" \"\")\n-\t\t(match_operand:DI 2 \"uns_arith_operand\" \"\")))]\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(and:DI (match_operand:DI 1 \"register_operand\")\n+\t\t(match_operand:DI 2 \"uns_arith_operand\")))]\n   \"TARGET_64BIT\"\n {\n   if (TARGET_MIPS16)\n@@ -3140,9 +3140,9 @@ dsrl\\t%3,%3,1\\n\\\n    (set_attr \"mode\"\t\"DI\")])\n \n (define_expand \"iorsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d,d\")\n-\t(ior:SI (match_operand:SI 1 \"uns_arith_operand\" \"%d,d\")\n-\t\t(match_operand:SI 2 \"uns_arith_operand\" \"d,K\")))]\n+  [(set (match_operand:SI 0 \"register_operand\")\n+\t(ior:SI (match_operand:SI 1 \"uns_arith_operand\")\n+\t\t(match_operand:SI 2 \"uns_arith_operand\")))]\n   \"\"\n {\n   if (TARGET_MIPS16)\n@@ -3173,9 +3173,9 @@ dsrl\\t%3,%3,1\\n\\\n    (set_attr \"mode\"\t\"SI\")])\n \n (define_expand \"iordi3\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(ior:DI (match_operand:DI 1 \"register_operand\" \"\")\n-\t\t(match_operand:DI 2 \"uns_arith_operand\" \"\")))]\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(ior:DI (match_operand:DI 1 \"register_operand\")\n+\t\t(match_operand:DI 2 \"uns_arith_operand\")))]\n   \"TARGET_64BIT\"\n {\n   if (TARGET_MIPS16)\n@@ -3206,9 +3206,9 @@ dsrl\\t%3,%3,1\\n\\\n    (set_attr \"mode\"\t\"DI\")])\n \n (define_expand \"xorsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d,d\")\n-\t(xor:SI (match_operand:SI 1 \"uns_arith_operand\" \"%d,d\")\n-\t\t(match_operand:SI 2 \"uns_arith_operand\" \"d,K\")))]\n+  [(set (match_operand:SI 0 \"register_operand\")\n+\t(xor:SI (match_operand:SI 1 \"uns_arith_operand\")\n+\t\t(match_operand:SI 2 \"uns_arith_operand\")))]\n   \"\"\n   \"\")\n \n@@ -3236,15 +3236,15 @@ dsrl\\t%3,%3,1\\n\\\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr_alternative \"length\"\n \t\t[(const_int 4)\n-\t\t (if_then_else (match_operand:VOID 2 \"m16_uimm8_1\" \"\")\n+\t\t (if_then_else (match_operand:VOID 2 \"m16_uimm8_1\")\n \t\t\t       (const_int 4)\n \t\t\t       (const_int 8))\n \t\t (const_int 4)])])\n \n (define_expand \"xordi3\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(xor:DI (match_operand:DI 1 \"register_operand\" \"\")\n-\t\t(match_operand:DI 2 \"uns_arith_operand\" \"\")))]\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(xor:DI (match_operand:DI 1 \"register_operand\")\n+\t\t(match_operand:DI 2 \"uns_arith_operand\")))]\n   \"TARGET_64BIT\"\n {\n   if (TARGET_MIPS16)\n@@ -3278,7 +3278,7 @@ dsrl\\t%3,%3,1\\n\\\n    (set_attr \"mode\"\t\"DI\")\n    (set_attr_alternative \"length\"\n \t\t[(const_int 4)\n-\t\t (if_then_else (match_operand:VOID 2 \"m16_uimm8_1\" \"\")\n+\t\t (if_then_else (match_operand:VOID 2 \"m16_uimm8_1\")\n \t\t\t       (const_int 4)\n \t\t\t       (const_int 8))\n \t\t (const_int 4)])])\n@@ -3482,8 +3482,8 @@ dsrl\\t%3,%3,1\\n\\\n    (set_attr \"mode\"     \"DI\")])\n \n (define_expand \"zero_extendhisi2\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-        (zero_extend:SI (match_operand:HI 1 \"nonimmediate_operand\" \"\")))]\n+  [(set (match_operand:SI 0 \"register_operand\")\n+        (zero_extend:SI (match_operand:HI 1 \"nonimmediate_operand\")))]\n   \"\"\n {\n   if (TARGET_MIPS16 && GET_CODE (operands[1]) != MEM)\n@@ -3516,8 +3516,8 @@ dsrl\\t%3,%3,1\\n\\\n    (set_attr \"mode\"     \"SI\")])\n \n (define_expand \"zero_extendhidi2\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-        (zero_extend:DI (match_operand:HI 1 \"nonimmediate_operand\" \"\")))]\n+  [(set (match_operand:DI 0 \"register_operand\")\n+        (zero_extend:DI (match_operand:HI 1 \"nonimmediate_operand\")))]\n   \"TARGET_64BIT\"\n {\n   if (TARGET_MIPS16 && GET_CODE (operands[1]) != MEM)\n@@ -3550,8 +3550,8 @@ dsrl\\t%3,%3,1\\n\\\n    (set_attr \"mode\"     \"DI\")])\n \n (define_expand \"zero_extendqihi2\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"\")\n-\t(zero_extend:HI (match_operand:QI 1 \"nonimmediate_operand\" \"\")))]\n+  [(set (match_operand:HI 0 \"register_operand\")\n+\t(zero_extend:HI (match_operand:QI 1 \"nonimmediate_operand\")))]\n   \"\"\n {\n   if (TARGET_MIPS16 && GET_CODE (operands[1]) != MEM)\n@@ -3585,8 +3585,8 @@ dsrl\\t%3,%3,1\\n\\\n    (set_attr \"mode\"     \"HI\")])\n \n (define_expand \"zero_extendqisi2\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(zero_extend:SI (match_operand:QI 1 \"nonimmediate_operand\" \"\")))]\n+  [(set (match_operand:SI 0 \"register_operand\")\n+\t(zero_extend:SI (match_operand:QI 1 \"nonimmediate_operand\")))]\n   \"\"\n {\n   if (TARGET_MIPS16 && GET_CODE (operands[1]) != MEM)\n@@ -3619,8 +3619,8 @@ dsrl\\t%3,%3,1\\n\\\n    (set_attr \"mode\"     \"SI\")])\n \n (define_expand \"zero_extendqidi2\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(zero_extend:DI (match_operand:QI 1 \"nonimmediate_operand\" \"\")))]\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(zero_extend:DI (match_operand:QI 1 \"nonimmediate_operand\")))]\n   \"TARGET_64BIT\"\n {\n   if (TARGET_MIPS16 && GET_CODE (operands[1]) != MEM)\n@@ -3681,8 +3681,8 @@ dsrl\\t%3,%3,1\\n\\\n ;; all non-mem patterns after reload.\n \n (define_expand \"extendhidi2\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-        (sign_extend:DI (match_operand:HI 1 \"nonimmediate_operand\" \"\")))]\n+  [(set (match_operand:DI 0 \"register_operand\")\n+        (sign_extend:DI (match_operand:HI 1 \"nonimmediate_operand\")))]\n   \"TARGET_64BIT\"\n   \"\")\n \n@@ -3693,8 +3693,8 @@ dsrl\\t%3,%3,1\\n\\\n   \"#\")\n \n (define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-        (sign_extend:DI (match_operand:HI 1 \"register_operand\" \"\")))]\n+  [(set (match_operand:DI 0 \"register_operand\")\n+        (sign_extend:DI (match_operand:HI 1 \"register_operand\")))]\n   \"TARGET_64BIT && reload_completed\"\n   [(set (match_dup 0)\n         (ashift:DI (match_dup 1) (const_int 48)))\n@@ -3711,8 +3711,8 @@ dsrl\\t%3,%3,1\\n\\\n    (set_attr \"mode\"     \"DI\")])\n \n (define_expand \"extendhisi2\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-        (sign_extend:SI (match_operand:HI 1 \"nonimmediate_operand\" \"\")))]\n+  [(set (match_operand:SI 0 \"register_operand\")\n+        (sign_extend:SI (match_operand:HI 1 \"nonimmediate_operand\")))]\n   \"\"\n {\n   if (ISA_HAS_SEB_SEH)\n@@ -3730,8 +3730,8 @@ dsrl\\t%3,%3,1\\n\\\n   \"#\")\n \n (define_split\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-        (sign_extend:SI (match_operand:HI 1 \"register_operand\" \"\")))]\n+  [(set (match_operand:SI 0 \"register_operand\")\n+        (sign_extend:SI (match_operand:HI 1 \"register_operand\")))]\n   \"reload_completed\"\n   [(set (match_dup 0)\n         (ashift:SI (match_dup 1) (const_int 16)))\n@@ -3756,8 +3756,8 @@ dsrl\\t%3,%3,1\\n\\\n    (set_attr \"mode\" \"SI\")])\n \n (define_expand \"extendqihi2\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"\")\n-        (sign_extend:HI (match_operand:QI 1 \"nonimmediate_operand\" \"\")))]\n+  [(set (match_operand:HI 0 \"register_operand\")\n+        (sign_extend:HI (match_operand:QI 1 \"nonimmediate_operand\")))]\n   \"\"\n   \"\")\n \n@@ -3768,8 +3768,8 @@ dsrl\\t%3,%3,1\\n\\\n   \"#\")\n \n (define_split\n-  [(set (match_operand:HI 0 \"register_operand\" \"\")\n-        (sign_extend:HI (match_operand:QI 1 \"register_operand\" \"\")))]\n+  [(set (match_operand:HI 0 \"register_operand\")\n+        (sign_extend:HI (match_operand:QI 1 \"register_operand\")))]\n   \"reload_completed\"\n   [(set (match_dup 0)\n         (ashift:SI (match_dup 1) (const_int 24)))\n@@ -3788,8 +3788,8 @@ dsrl\\t%3,%3,1\\n\\\n \n \n (define_expand \"extendqisi2\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-        (sign_extend:SI (match_operand:QI 1 \"nonimmediate_operand\" \"\")))]\n+  [(set (match_operand:SI 0 \"register_operand\")\n+        (sign_extend:SI (match_operand:QI 1 \"nonimmediate_operand\")))]\n   \"\"\n {\n   if (ISA_HAS_SEB_SEH)\n@@ -3807,8 +3807,8 @@ dsrl\\t%3,%3,1\\n\\\n   \"#\")\n \n (define_split\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-        (sign_extend:SI (match_operand:QI 1 \"register_operand\" \"\")))]\n+  [(set (match_operand:SI 0 \"register_operand\")\n+        (sign_extend:SI (match_operand:QI 1 \"register_operand\")))]\n   \"reload_completed\"\n   [(set (match_dup 0)\n         (ashift:SI (match_dup 1) (const_int 24)))\n@@ -3833,8 +3833,8 @@ dsrl\\t%3,%3,1\\n\\\n    (set_attr \"mode\" \"SI\")])\n \n (define_expand \"extendqidi2\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-        (sign_extend:DI (match_operand:QI 1 \"nonimmediate_operand\" \"\")))]\n+  [(set (match_operand:DI 0 \"register_operand\")\n+        (sign_extend:DI (match_operand:QI 1 \"nonimmediate_operand\")))]\n   \"TARGET_64BIT\"\n   \"\")\n \n@@ -3845,8 +3845,8 @@ dsrl\\t%3,%3,1\\n\\\n   \"#\")\n \n (define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-        (sign_extend:DI (match_operand:QI 1 \"register_operand\" \"\")))]\n+  [(set (match_operand:DI 0 \"register_operand\")\n+        (sign_extend:DI (match_operand:QI 1 \"register_operand\")))]\n   \"TARGET_64BIT && reload_completed\"\n   [(set (match_dup 0)\n         (ashift:DI (match_dup 1) (const_int 56)))\n@@ -3878,8 +3878,8 @@ dsrl\\t%3,%3,1\\n\\\n ;;  ....................\n \n (define_expand \"fix_truncdfsi2\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=f\")\n-\t(fix:SI (match_operand:DF 1 \"register_operand\" \"f\")))]\n+  [(set (match_operand:SI 0 \"register_operand\")\n+\t(fix:SI (match_operand:DF 1 \"register_operand\")))]\n   \"TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT\"\n {\n   if (!ISA_HAS_TRUNC_W)\n@@ -3914,8 +3914,8 @@ dsrl\\t%3,%3,1\\n\\\n    (set_attr \"length\"\t\"36\")])\n \n (define_expand \"fix_truncsfsi2\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=f\")\n-\t(fix:SI (match_operand:SF 1 \"register_operand\" \"f\")))]\n+  [(set (match_operand:SI 0 \"register_operand\")\n+\t(fix:SI (match_operand:SF 1 \"register_operand\")))]\n   \"TARGET_HARD_FLOAT\"\n {\n   if (!ISA_HAS_TRUNC_W)\n@@ -4011,8 +4011,8 @@ dsrl\\t%3,%3,1\\n\\\n \n \n (define_expand \"fixuns_truncdfsi2\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(unsigned_fix:SI (match_operand:DF 1 \"register_operand\" \"\")))]\n+  [(set (match_operand:SI 0 \"register_operand\")\n+\t(unsigned_fix:SI (match_operand:DF 1 \"register_operand\")))]\n   \"TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT\"\n {\n   rtx reg1 = gen_reg_rtx (DFmode);\n@@ -4056,8 +4056,8 @@ dsrl\\t%3,%3,1\\n\\\n \n \n (define_expand \"fixuns_truncdfdi2\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(unsigned_fix:DI (match_operand:DF 1 \"register_operand\" \"\")))]\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(unsigned_fix:DI (match_operand:DF 1 \"register_operand\")))]\n   \"TARGET_HARD_FLOAT && TARGET_64BIT && TARGET_DOUBLE_FLOAT\"\n {\n   rtx reg1 = gen_reg_rtx (DFmode);\n@@ -4098,8 +4098,8 @@ dsrl\\t%3,%3,1\\n\\\n \n \n (define_expand \"fixuns_truncsfsi2\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(unsigned_fix:SI (match_operand:SF 1 \"register_operand\" \"\")))]\n+  [(set (match_operand:SI 0 \"register_operand\")\n+\t(unsigned_fix:SI (match_operand:SF 1 \"register_operand\")))]\n   \"TARGET_HARD_FLOAT\"\n {\n   rtx reg1 = gen_reg_rtx (SFmode);\n@@ -4140,8 +4140,8 @@ dsrl\\t%3,%3,1\\n\\\n \n \n (define_expand \"fixuns_truncsfdi2\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(unsigned_fix:DI (match_operand:SF 1 \"register_operand\" \"\")))]\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(unsigned_fix:DI (match_operand:SF 1 \"register_operand\")))]\n   \"TARGET_HARD_FLOAT && TARGET_64BIT && TARGET_DOUBLE_FLOAT\"\n {\n   rtx reg1 = gen_reg_rtx (SFmode);\n@@ -4190,10 +4190,10 @@ dsrl\\t%3,%3,1\\n\\\n ;; Bit field extract patterns which use lwl/lwr or ldl/ldr.\n \n (define_expand \"extv\"\n-  [(set (match_operand 0 \"register_operand\" \"\")\n-\t(sign_extract (match_operand:QI 1 \"memory_operand\" \"\")\n-\t\t      (match_operand 2 \"immediate_operand\" \"\")\n-\t\t      (match_operand 3 \"immediate_operand\" \"\")))]\n+  [(set (match_operand 0 \"register_operand\")\n+\t(sign_extract (match_operand:QI 1 \"memory_operand\")\n+\t\t      (match_operand 2 \"immediate_operand\")\n+\t\t      (match_operand 3 \"immediate_operand\")))]\n   \"!TARGET_MIPS16\"\n {\n   if (mips_expand_unaligned_load (operands[0], operands[1],\n@@ -4205,10 +4205,10 @@ dsrl\\t%3,%3,1\\n\\\n })\n \n (define_expand \"extzv\"\n-  [(set (match_operand 0 \"register_operand\" \"\")\n-\t(zero_extract (match_operand:QI 1 \"memory_operand\" \"\")\n-\t\t      (match_operand 2 \"immediate_operand\" \"\")\n-\t\t      (match_operand 3 \"immediate_operand\" \"\")))]\n+  [(set (match_operand 0 \"register_operand\")\n+\t(zero_extract (match_operand:QI 1 \"memory_operand\")\n+\t\t      (match_operand 2 \"immediate_operand\")\n+\t\t      (match_operand 3 \"immediate_operand\")))]\n   \"!TARGET_MIPS16\"\n {\n   if (mips_expand_unaligned_load (operands[0], operands[1],\n@@ -4220,10 +4220,10 @@ dsrl\\t%3,%3,1\\n\\\n })\n \n (define_expand \"insv\"\n-  [(set (zero_extract (match_operand:QI 0 \"memory_operand\" \"\")\n-\t\t      (match_operand 1 \"immediate_operand\" \"\")\n-\t\t      (match_operand 2 \"immediate_operand\" \"\"))\n-\t(match_operand 3 \"reg_or_0_operand\" \"\"))]\n+  [(set (zero_extract (match_operand:QI 0 \"memory_operand\")\n+\t\t      (match_operand 1 \"immediate_operand\")\n+\t\t      (match_operand 2 \"immediate_operand\"))\n+\t(match_operand 3 \"reg_or_0_operand\"))]\n   \"!TARGET_MIPS16\"\n {\n   if (mips_expand_unaligned_store (operands[0], operands[3],\n@@ -4582,8 +4582,8 @@ dsrl\\t%3,%3,1\\n\\\n ;; the compiler, have memoized the insn number already.\n \n (define_expand \"movdi\"\n-  [(set (match_operand:DI 0 \"\" \"\")\n-\t(match_operand:DI 1 \"\" \"\"))]\n+  [(set (match_operand:DI 0 \"\")\n+\t(match_operand:DI 1 \"\"))]\n   \"\"\n {\n   if (mips_legitimize_move (DImode, operands[0], operands[1]))\n@@ -4648,10 +4648,10 @@ dsrl\\t%3,%3,1\\n\\\n \t\t[(const_int 4)\n \t\t (const_int 4)\n \t\t (const_int 4)\n-\t\t (if_then_else (match_operand:VOID 1 \"m16_uimm8_1\" \"\")\n+\t\t (if_then_else (match_operand:VOID 1 \"m16_uimm8_1\")\n \t\t\t       (const_int 4)\n \t\t\t       (const_int 8))\n-\t\t (if_then_else (match_operand:VOID 1 \"m16_nuimm8_1\" \"\")\n+\t\t (if_then_else (match_operand:VOID 1 \"m16_nuimm8_1\")\n \t\t\t       (const_int 8)\n \t\t\t       (const_int 12))\n \t\t (const_string \"*\")\n@@ -4664,9 +4664,9 @@ dsrl\\t%3,%3,1\\n\\\n ;; load are 2 2 byte instructions.\n \n (define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+  [(set (match_operand:DI 0 \"register_operand\")\n \t(mem:DI (plus:DI (match_dup 0)\n-\t\t\t (match_operand:DI 1 \"const_int_operand\" \"\"))))]\n+\t\t\t (match_operand:DI 1 \"const_int_operand\"))))]\n   \"TARGET_64BIT && TARGET_MIPS16 && reload_completed\n    && !TARGET_DEBUG_D_MODE\n    && GET_CODE (operands[0]) == REG\n@@ -4709,8 +4709,8 @@ dsrl\\t%3,%3,1\\n\\\n ;; the compiler, have memoized the insn number already.\n \n (define_expand \"movsi\"\n-  [(set (match_operand:SI 0 \"\" \"\")\n-\t(match_operand:SI 1 \"\" \"\"))]\n+  [(set (match_operand:SI 0 \"\")\n+\t(match_operand:SI 1 \"\"))]\n   \"\"\n {\n   if (mips_legitimize_move (SImode, operands[0], operands[1]))\n@@ -4754,10 +4754,10 @@ dsrl\\t%3,%3,1\\n\\\n \t\t[(const_int 4)\n \t\t (const_int 4)\n \t\t (const_int 4)\n-\t\t (if_then_else (match_operand:VOID 1 \"m16_uimm8_1\" \"\")\n+\t\t (if_then_else (match_operand:VOID 1 \"m16_uimm8_1\")\n \t\t\t       (const_int 4)\n \t\t\t       (const_int 8))\n-\t\t (if_then_else (match_operand:VOID 1 \"m16_nuimm8_1\" \"\")\n+\t\t (if_then_else (match_operand:VOID 1 \"m16_nuimm8_1\")\n \t\t\t       (const_int 8)\n \t\t\t       (const_int 12))\n \t\t (const_string \"*\")\n@@ -4769,9 +4769,9 @@ dsrl\\t%3,%3,1\\n\\\n ;; load are 2 2 byte instructions.\n \n (define_split\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+  [(set (match_operand:SI 0 \"register_operand\")\n \t(mem:SI (plus:SI (match_dup 0)\n-\t\t\t (match_operand:SI 1 \"const_int_operand\" \"\"))))]\n+\t\t\t (match_operand:SI 1 \"const_int_operand\"))))]\n   \"TARGET_MIPS16 && reload_completed && !TARGET_DEBUG_D_MODE\n    && GET_CODE (operands[0]) == REG\n    && M16_REG_P (REGNO (operands[0]))\n@@ -4811,8 +4811,8 @@ dsrl\\t%3,%3,1\\n\\\n ;; instructions.\n \n (define_split\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(match_operand:SI 1 \"const_int_operand\" \"\"))]\n+  [(set (match_operand:SI 0 \"register_operand\")\n+\t(match_operand:SI 1 \"const_int_operand\"))]\n   \"TARGET_MIPS16 && reload_completed && !TARGET_DEBUG_D_MODE\n    && GET_CODE (operands[0]) == REG\n    && M16_REG_P (REGNO (operands[0]))\n@@ -4832,8 +4832,8 @@ dsrl\\t%3,%3,1\\n\\\n ;; load and a neg.  That's what mips_output_move will generate anyhow.\n \n (define_split\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(match_operand:SI 1 \"const_int_operand\" \"\"))]\n+  [(set (match_operand:SI 0 \"register_operand\")\n+\t(match_operand:SI 1 \"const_int_operand\"))]\n   \"TARGET_MIPS16 && reload_completed && !TARGET_DEBUG_D_MODE\n    && GET_CODE (operands[0]) == REG\n    && M16_REG_P (REGNO (operands[0]))\n@@ -4993,8 +4993,8 @@ dsrl\\t%3,%3,1\\n\\\n ;; Unsigned loads are used because LOAD_EXTEND_OP returns ZERO_EXTEND.\n \n (define_expand \"movhi\"\n-  [(set (match_operand:HI 0 \"\" \"\")\n-\t(match_operand:HI 1 \"\" \"\"))]\n+  [(set (match_operand:HI 0 \"\")\n+\t(match_operand:HI 1 \"\"))]\n   \"\"\n {\n   if (mips_legitimize_move (HImode, operands[0], operands[1]))\n@@ -5040,10 +5040,10 @@ dsrl\\t%3,%3,1\\n\\\n \t\t[(const_int 4)\n \t\t (const_int 4)\n \t\t (const_int 4)\n-\t\t (if_then_else (match_operand:VOID 1 \"m16_uimm8_1\" \"\")\n+\t\t (if_then_else (match_operand:VOID 1 \"m16_uimm8_1\")\n \t\t\t       (const_int 4)\n \t\t\t       (const_int 8))\n-\t\t (if_then_else (match_operand:VOID 1 \"m16_nuimm8_1\" \"\")\n+\t\t (if_then_else (match_operand:VOID 1 \"m16_nuimm8_1\")\n \t\t\t       (const_int 8)\n \t\t\t       (const_int 12))\n \t\t (const_string \"*\")\n@@ -5055,9 +5055,9 @@ dsrl\\t%3,%3,1\\n\\\n ;; load are 2 2 byte instructions.\n \n (define_split\n-  [(set (match_operand:HI 0 \"register_operand\" \"\")\n+  [(set (match_operand:HI 0 \"register_operand\")\n \t(mem:HI (plus:SI (match_dup 0)\n-\t\t\t (match_operand:SI 1 \"const_int_operand\" \"\"))))]\n+\t\t\t (match_operand:SI 1 \"const_int_operand\"))))]\n   \"TARGET_MIPS16 && reload_completed && !TARGET_DEBUG_D_MODE\n    && GET_CODE (operands[0]) == REG\n    && M16_REG_P (REGNO (operands[0]))\n@@ -5100,8 +5100,8 @@ dsrl\\t%3,%3,1\\n\\\n ;; Unsigned loads are used because LOAD_EXTEND_OP returns ZERO_EXTEND.\n \n (define_expand \"movqi\"\n-  [(set (match_operand:QI 0 \"\" \"\")\n-\t(match_operand:QI 1 \"\" \"\"))]\n+  [(set (match_operand:QI 0 \"\")\n+\t(match_operand:QI 1 \"\"))]\n   \"\"\n {\n   if (mips_legitimize_move (QImode, operands[0], operands[1]))\n@@ -5150,9 +5150,9 @@ dsrl\\t%3,%3,1\\n\\\n ;; load are 2 2 byte instructions.\n \n (define_split\n-  [(set (match_operand:QI 0 \"register_operand\" \"\")\n+  [(set (match_operand:QI 0 \"register_operand\")\n \t(mem:QI (plus:SI (match_dup 0)\n-\t\t\t (match_operand:SI 1 \"const_int_operand\" \"\"))))]\n+\t\t\t (match_operand:SI 1 \"const_int_operand\"))))]\n   \"TARGET_MIPS16 && reload_completed && !TARGET_DEBUG_D_MODE\n    && GET_CODE (operands[0]) == REG\n    && M16_REG_P (REGNO (operands[0]))\n@@ -5178,8 +5178,8 @@ dsrl\\t%3,%3,1\\n\\\n ;; 32-bit floating point moves\n \n (define_expand \"movsf\"\n-  [(set (match_operand:SF 0 \"\" \"\")\n-\t(match_operand:SF 1 \"\" \"\"))]\n+  [(set (match_operand:SF 0 \"\")\n+\t(match_operand:SF 1 \"\"))]\n   \"\"\n {\n   if (mips_legitimize_move (SFmode, operands[0], operands[1]))\n@@ -5223,8 +5223,8 @@ dsrl\\t%3,%3,1\\n\\\n ;; 64-bit floating point moves\n \n (define_expand \"movdf\"\n-  [(set (match_operand:DF 0 \"\" \"\")\n-\t(match_operand:DF 1 \"\" \"\"))]\n+  [(set (match_operand:DF 0 \"\")\n+\t(match_operand:DF 1 \"\"))]\n   \"\"\n {\n   if (mips_legitimize_move (DFmode, operands[0], operands[1]))\n@@ -5276,8 +5276,8 @@ dsrl\\t%3,%3,1\\n\\\n    (set_attr \"length\"\t\"8,8,8,*,*\")])\n \n (define_split\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"\")\n-\t(match_operand:DI 1 \"move_operand\" \"\"))]\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\")\n+\t(match_operand:DI 1 \"move_operand\"))]\n   \"reload_completed && !TARGET_64BIT\n    && mips_split_64bit_move_p (operands[0], operands[1])\"\n   [(const_int 0)]\n@@ -5287,8 +5287,8 @@ dsrl\\t%3,%3,1\\n\\\n })\n \n (define_split\n-  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"\")\n-\t(match_operand:DF 1 \"move_operand\" \"\"))]\n+  [(set (match_operand:DF 0 \"nonimmediate_operand\")\n+\t(match_operand:DF 1 \"move_operand\"))]\n   \"reload_completed && !TARGET_64BIT\n    && mips_split_64bit_move_p (operands[0], operands[1])\"\n   [(const_int 0)]\n@@ -5418,10 +5418,10 @@ dsrl\\t%3,%3,1\\n\\\n ;; Argument 3 is the alignment\n \n (define_expand \"movstrsi\"\n-  [(parallel [(set (match_operand:BLK 0 \"general_operand\" \"\")\n-\t\t   (match_operand:BLK 1 \"general_operand\" \"\"))\n-\t      (use (match_operand:SI 2 \"\" \"\"))\n-\t      (use (match_operand:SI 3 \"const_int_operand\" \"\"))])]\n+  [(parallel [(set (match_operand:BLK 0 \"general_operand\")\n+\t\t   (match_operand:BLK 1 \"general_operand\"))\n+\t      (use (match_operand:SI 2 \"\"))\n+\t      (use (match_operand:SI 3 \"const_int_operand\"))])]\n   \"!TARGET_MIPS16 && !TARGET_MEMCPY\"\n {\n   if (mips_expand_block_move (operands[0], operands[1], operands[2]))\n@@ -5441,9 +5441,9 @@ dsrl\\t%3,%3,1\\n\\\n ;; want to use a different set of constraints when TARGET_MIPS16.\n \n (define_expand \"ashlsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(ashift:SI (match_operand:SI 1 \"register_operand\" \"d\")\n-\t\t   (match_operand:SI 2 \"arith_operand\" \"dI\")))]\n+  [(set (match_operand:SI 0 \"register_operand\")\n+\t(ashift:SI (match_operand:SI 1 \"register_operand\")\n+\t\t   (match_operand:SI 2 \"arith_operand\")))]\n   \"\"\n {\n   /* On the mips16, a shift of more than 8 is a four byte instruction,\n@@ -5517,16 +5517,16 @@ dsrl\\t%3,%3,1\\n\\\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr_alternative \"length\"\n \t\t[(const_int 4)\n-\t\t (if_then_else (match_operand:VOID 2 \"m16_uimm3_b\" \"\")\n+\t\t (if_then_else (match_operand:VOID 2 \"m16_uimm3_b\")\n \t\t\t       (const_int 4)\n \t\t\t       (const_int 8))])])\n \n ;; On the mips16, we can split a 4 byte shift into 2 2 byte shifts.\n \n (define_split\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(ashift:SI (match_operand:SI 1 \"register_operand\" \"\")\n-\t\t   (match_operand:SI 2 \"const_int_operand\" \"\")))]\n+  [(set (match_operand:SI 0 \"register_operand\")\n+\t(ashift:SI (match_operand:SI 1 \"register_operand\")\n+\t\t   (match_operand:SI 2 \"const_int_operand\")))]\n   \"TARGET_MIPS16 && reload_completed && !TARGET_DEBUG_D_MODE\n    && GET_CODE (operands[2]) == CONST_INT\n    && INTVAL (operands[2]) > 8\n@@ -5536,9 +5536,9 @@ dsrl\\t%3,%3,1\\n\\\n   { operands[2] = GEN_INT (INTVAL (operands[2]) - 8); })\n \n (define_expand \"ashldi3\"\n-  [(parallel [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t\t   (ashift:DI (match_operand:DI 1 \"register_operand\" \"\")\n-\t\t\t      (match_operand:SI 2 \"arith_operand\" \"\")))\n+  [(parallel [(set (match_operand:DI 0 \"register_operand\")\n+\t\t   (ashift:DI (match_operand:DI 1 \"register_operand\")\n+\t\t\t      (match_operand:SI 2 \"arith_operand\")))\n \t      (clobber (match_dup  3))])]\n   \"TARGET_64BIT || (!TARGET_DEBUG_G_MODE && !TARGET_MIPS16)\"\n {\n@@ -5620,10 +5620,10 @@ sll\\t%L0,%L1,%2\\n\\\n \n \n (define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(ashift:DI (match_operand:DI 1 \"register_operand\" \"\")\n-\t\t   (match_operand:SI 2 \"small_int\" \"\")))\n-   (clobber (match_operand:SI 3 \"register_operand\" \"\"))]\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(ashift:DI (match_operand:DI 1 \"register_operand\")\n+\t\t   (match_operand:SI 2 \"small_int\")))\n+   (clobber (match_operand:SI 3 \"register_operand\"))]\n   \"reload_completed && !WORDS_BIG_ENDIAN && !TARGET_64BIT\n    && !TARGET_DEBUG_D_MODE && !TARGET_DEBUG_G_MODE && !TARGET_MIPS16\n    && GET_CODE (operands[0]) == REG && REGNO (operands[0]) < FIRST_PSEUDO_REGISTER\n@@ -5637,10 +5637,10 @@ sll\\t%L0,%L1,%2\\n\\\n \n \n (define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(ashift:DI (match_operand:DI 1 \"register_operand\" \"\")\n-\t\t   (match_operand:SI 2 \"small_int\" \"\")))\n-   (clobber (match_operand:SI 3 \"register_operand\" \"\"))]\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(ashift:DI (match_operand:DI 1 \"register_operand\")\n+\t\t   (match_operand:SI 2 \"small_int\")))\n+   (clobber (match_operand:SI 3 \"register_operand\"))]\n   \"reload_completed && WORDS_BIG_ENDIAN && !TARGET_64BIT\n    && !TARGET_DEBUG_D_MODE && !TARGET_DEBUG_G_MODE && !TARGET_MIPS16\n    && GET_CODE (operands[0]) == REG && REGNO (operands[0]) < FIRST_PSEUDO_REGISTER\n@@ -5675,10 +5675,10 @@ sll\\t%L0,%L1,%2\\n\\\n \n \n (define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(ashift:DI (match_operand:DI 1 \"register_operand\" \"\")\n-\t\t   (match_operand:SI 2 \"small_int\" \"\")))\n-   (clobber (match_operand:SI 3 \"register_operand\" \"\"))]\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(ashift:DI (match_operand:DI 1 \"register_operand\")\n+\t\t   (match_operand:SI 2 \"small_int\")))\n+   (clobber (match_operand:SI 3 \"register_operand\"))]\n   \"reload_completed && !WORDS_BIG_ENDIAN && !TARGET_64BIT\n    && !TARGET_DEBUG_D_MODE && !TARGET_DEBUG_G_MODE && !TARGET_MIPS16\n    && GET_CODE (operands[0]) == REG && REGNO (operands[0]) < FIRST_PSEUDO_REGISTER\n@@ -5709,10 +5709,10 @@ sll\\t%L0,%L1,%2\\n\\\n \n \n (define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(ashift:DI (match_operand:DI 1 \"register_operand\" \"\")\n-\t\t   (match_operand:SI 2 \"small_int\" \"\")))\n-   (clobber (match_operand:SI 3 \"register_operand\" \"\"))]\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(ashift:DI (match_operand:DI 1 \"register_operand\")\n+\t\t   (match_operand:SI 2 \"small_int\")))\n+   (clobber (match_operand:SI 3 \"register_operand\"))]\n   \"reload_completed && WORDS_BIG_ENDIAN && !TARGET_64BIT\n    && !TARGET_DEBUG_D_MODE && !TARGET_DEBUG_G_MODE && !TARGET_MIPS16\n    && GET_CODE (operands[0]) == REG && REGNO (operands[0]) < FIRST_PSEUDO_REGISTER\n@@ -5774,17 +5774,17 @@ sll\\t%L0,%L1,%2\\n\\\n    (set_attr \"mode\"\t\"DI\")\n    (set_attr_alternative \"length\"\n \t\t[(const_int 4)\n-\t\t (if_then_else (match_operand:VOID 2 \"m16_uimm3_b\" \"\")\n+\t\t (if_then_else (match_operand:VOID 2 \"m16_uimm3_b\")\n \t\t\t       (const_int 4)\n \t\t\t       (const_int 8))])])\n \n \n ;; On the mips16, we can split a 4 byte shift into 2 2 byte shifts.\n \n (define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(ashift:DI (match_operand:DI 1 \"register_operand\" \"\")\n-\t\t   (match_operand:SI 2 \"const_int_operand\" \"\")))]\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(ashift:DI (match_operand:DI 1 \"register_operand\")\n+\t\t   (match_operand:SI 2 \"const_int_operand\")))]\n   \"TARGET_MIPS16 && TARGET_64BIT && !TARGET_DEBUG_D_MODE\n    && reload_completed\n    && GET_CODE (operands[2]) == CONST_INT\n@@ -5795,9 +5795,9 @@ sll\\t%L0,%L1,%2\\n\\\n   { operands[2] = GEN_INT (INTVAL (operands[2]) - 8); })\n \n (define_expand \"ashrsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(ashiftrt:SI (match_operand:SI 1 \"register_operand\" \"d\")\n-\t\t     (match_operand:SI 2 \"arith_operand\" \"dI\")))]\n+  [(set (match_operand:SI 0 \"register_operand\")\n+\t(ashiftrt:SI (match_operand:SI 1 \"register_operand\")\n+\t\t     (match_operand:SI 2 \"arith_operand\")))]\n   \"\"\n {\n   /* On the mips16, a shift of more than 8 is a four byte instruction,\n@@ -5852,17 +5852,17 @@ sll\\t%L0,%L1,%2\\n\\\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr_alternative \"length\"\n \t\t[(const_int 4)\n-\t\t (if_then_else (match_operand:VOID 2 \"m16_uimm3_b\" \"\")\n+\t\t (if_then_else (match_operand:VOID 2 \"m16_uimm3_b\")\n \t\t\t       (const_int 4)\n \t\t\t       (const_int 8))])])\n \n \n ;; On the mips16, we can split a 4 byte shift into 2 2 byte shifts.\n \n (define_split\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(ashiftrt:SI (match_operand:SI 1 \"register_operand\" \"\")\n-\t\t     (match_operand:SI 2 \"const_int_operand\" \"\")))]\n+  [(set (match_operand:SI 0 \"register_operand\")\n+\t(ashiftrt:SI (match_operand:SI 1 \"register_operand\")\n+\t\t     (match_operand:SI 2 \"const_int_operand\")))]\n   \"TARGET_MIPS16 && reload_completed && !TARGET_DEBUG_D_MODE\n    && GET_CODE (operands[2]) == CONST_INT\n    && INTVAL (operands[2]) > 8\n@@ -5872,9 +5872,9 @@ sll\\t%L0,%L1,%2\\n\\\n   { operands[2] = GEN_INT (INTVAL (operands[2]) - 8); })\n \n (define_expand \"ashrdi3\"\n-  [(parallel [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t\t   (ashiftrt:DI (match_operand:DI 1 \"register_operand\" \"\")\n-\t\t\t\t(match_operand:SI 2 \"arith_operand\" \"\")))\n+  [(parallel [(set (match_operand:DI 0 \"register_operand\")\n+\t\t   (ashiftrt:DI (match_operand:DI 1 \"register_operand\")\n+\t\t\t\t(match_operand:SI 2 \"arith_operand\")))\n \t      (clobber (match_dup  3))])]\n   \"TARGET_64BIT || (!TARGET_DEBUG_G_MODE && !TARGET_MIPS16)\"\n {\n@@ -5951,10 +5951,10 @@ sra\\t%M0,%M1,%2\\n\\\n \n \n (define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(ashiftrt:DI (match_operand:DI 1 \"register_operand\" \"\")\n-\t\t     (match_operand:SI 2 \"small_int\" \"\")))\n-   (clobber (match_operand:SI 3 \"register_operand\" \"\"))]\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(ashiftrt:DI (match_operand:DI 1 \"register_operand\")\n+\t\t     (match_operand:SI 2 \"small_int\")))\n+   (clobber (match_operand:SI 3 \"register_operand\"))]\n   \"reload_completed && !WORDS_BIG_ENDIAN && !TARGET_64BIT\n    && !TARGET_DEBUG_D_MODE && !TARGET_DEBUG_G_MODE\n    && GET_CODE (operands[0]) == REG && REGNO (operands[0]) < FIRST_PSEUDO_REGISTER\n@@ -5968,10 +5968,10 @@ sra\\t%M0,%M1,%2\\n\\\n \n \n (define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(ashiftrt:DI (match_operand:DI 1 \"register_operand\" \"\")\n-\t\t     (match_operand:SI 2 \"small_int\" \"\")))\n-   (clobber (match_operand:SI 3 \"register_operand\" \"\"))]\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(ashiftrt:DI (match_operand:DI 1 \"register_operand\")\n+\t\t     (match_operand:SI 2 \"small_int\")))\n+   (clobber (match_operand:SI 3 \"register_operand\"))]\n   \"reload_completed && WORDS_BIG_ENDIAN && !TARGET_64BIT\n    && !TARGET_DEBUG_D_MODE && !TARGET_DEBUG_G_MODE\n    && GET_CODE (operands[0]) == REG && REGNO (operands[0]) < FIRST_PSEUDO_REGISTER\n@@ -6006,10 +6006,10 @@ sra\\t%M0,%M1,%2\\n\\\n \n \n (define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(ashiftrt:DI (match_operand:DI 1 \"register_operand\" \"\")\n-\t\t     (match_operand:SI 2 \"small_int\" \"\")))\n-   (clobber (match_operand:SI 3 \"register_operand\" \"\"))]\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(ashiftrt:DI (match_operand:DI 1 \"register_operand\")\n+\t\t     (match_operand:SI 2 \"small_int\")))\n+   (clobber (match_operand:SI 3 \"register_operand\"))]\n   \"reload_completed && !WORDS_BIG_ENDIAN && !TARGET_64BIT\n    && !TARGET_DEBUG_D_MODE && !TARGET_DEBUG_G_MODE && !TARGET_MIPS16\n    && GET_CODE (operands[0]) == REG && REGNO (operands[0]) < FIRST_PSEUDO_REGISTER\n@@ -6040,10 +6040,10 @@ sra\\t%M0,%M1,%2\\n\\\n \n \n (define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(ashiftrt:DI (match_operand:DI 1 \"register_operand\" \"\")\n-\t\t     (match_operand:SI 2 \"small_int\" \"\")))\n-   (clobber (match_operand:SI 3 \"register_operand\" \"\"))]\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(ashiftrt:DI (match_operand:DI 1 \"register_operand\")\n+\t\t     (match_operand:SI 2 \"small_int\")))\n+   (clobber (match_operand:SI 3 \"register_operand\"))]\n   \"reload_completed && WORDS_BIG_ENDIAN && !TARGET_64BIT\n    && !TARGET_DEBUG_D_MODE && !TARGET_DEBUG_G_MODE && !TARGET_MIPS16\n    && GET_CODE (operands[0]) == REG && REGNO (operands[0]) < FIRST_PSEUDO_REGISTER\n@@ -6102,16 +6102,16 @@ sra\\t%M0,%M1,%2\\n\\\n    (set_attr \"mode\"\t\"DI\")\n    (set_attr_alternative \"length\"\n \t\t[(const_int 4)\n-\t\t (if_then_else (match_operand:VOID 2 \"m16_uimm3_b\" \"\")\n+\t\t (if_then_else (match_operand:VOID 2 \"m16_uimm3_b\")\n \t\t\t       (const_int 4)\n \t\t\t       (const_int 8))])])\n \n ;; On the mips16, we can split a 4 byte shift into 2 2 byte shifts.\n \n (define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(ashiftrt:DI (match_operand:DI 1 \"register_operand\" \"\")\n-\t\t     (match_operand:SI 2 \"const_int_operand\" \"\")))]\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(ashiftrt:DI (match_operand:DI 1 \"register_operand\")\n+\t\t     (match_operand:SI 2 \"const_int_operand\")))]\n   \"TARGET_MIPS16 && TARGET_64BIT && !TARGET_DEBUG_D_MODE\n    && reload_completed\n    && GET_CODE (operands[2]) == CONST_INT\n@@ -6122,9 +6122,9 @@ sra\\t%M0,%M1,%2\\n\\\n   { operands[2] = GEN_INT (INTVAL (operands[2]) - 8); })\n \n (define_expand \"lshrsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"d\")\n-\t\t     (match_operand:SI 2 \"arith_operand\" \"dI\")))]\n+  [(set (match_operand:SI 0 \"register_operand\")\n+\t(lshiftrt:SI (match_operand:SI 1 \"register_operand\")\n+\t\t     (match_operand:SI 2 \"arith_operand\")))]\n   \"\"\n {\n   /* On the mips16, a shift of more than 8 is a four byte instruction,\n@@ -6179,17 +6179,17 @@ sra\\t%M0,%M1,%2\\n\\\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr_alternative \"length\"\n \t\t[(const_int 4)\n-\t\t (if_then_else (match_operand:VOID 2 \"m16_uimm3_b\" \"\")\n+\t\t (if_then_else (match_operand:VOID 2 \"m16_uimm3_b\")\n \t\t\t       (const_int 4)\n \t\t\t       (const_int 8))])])\n \n \n ;; On the mips16, we can split a 4 byte shift into 2 2 byte shifts.\n \n (define_split\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"\")\n-\t\t     (match_operand:SI 2 \"const_int_operand\" \"\")))]\n+  [(set (match_operand:SI 0 \"register_operand\")\n+\t(lshiftrt:SI (match_operand:SI 1 \"register_operand\")\n+\t\t     (match_operand:SI 2 \"const_int_operand\")))]\n   \"TARGET_MIPS16 && reload_completed && !TARGET_DEBUG_D_MODE\n    && GET_CODE (operands[2]) == CONST_INT\n    && INTVAL (operands[2]) > 8\n@@ -6222,9 +6222,9 @@ sra\\t%M0,%M1,%2\\n\\\n    (set_attr \"length\"\t\"16\")])\n \n (define_expand \"lshrdi3\"\n-  [(parallel [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t\t   (lshiftrt:DI (match_operand:DI 1 \"register_operand\" \"\")\n-\t\t\t\t(match_operand:SI 2 \"arith_operand\" \"\")))\n+  [(parallel [(set (match_operand:DI 0 \"register_operand\")\n+\t\t   (lshiftrt:DI (match_operand:DI 1 \"register_operand\")\n+\t\t\t\t(match_operand:SI 2 \"arith_operand\")))\n \t      (clobber (match_dup  3))])]\n   \"TARGET_64BIT || (!TARGET_DEBUG_G_MODE && !TARGET_MIPS16)\"\n {\n@@ -6302,10 +6302,10 @@ srl\\t%M0,%M1,%2\\n\\\n \n \n (define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(lshiftrt:DI (match_operand:DI 1 \"register_operand\" \"\")\n-\t\t     (match_operand:SI 2 \"small_int\" \"\")))\n-   (clobber (match_operand:SI 3 \"register_operand\" \"\"))]\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(lshiftrt:DI (match_operand:DI 1 \"register_operand\")\n+\t\t     (match_operand:SI 2 \"small_int\")))\n+   (clobber (match_operand:SI 3 \"register_operand\"))]\n   \"reload_completed && !WORDS_BIG_ENDIAN && !TARGET_64BIT\n    && !TARGET_DEBUG_D_MODE && !TARGET_DEBUG_G_MODE && !TARGET_MIPS16\n    && GET_CODE (operands[0]) == REG && REGNO (operands[0]) < FIRST_PSEUDO_REGISTER\n@@ -6319,10 +6319,10 @@ srl\\t%M0,%M1,%2\\n\\\n \n \n (define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(lshiftrt:DI (match_operand:DI 1 \"register_operand\" \"\")\n-\t\t     (match_operand:SI 2 \"small_int\" \"\")))\n-   (clobber (match_operand:SI 3 \"register_operand\" \"\"))]\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(lshiftrt:DI (match_operand:DI 1 \"register_operand\")\n+\t\t     (match_operand:SI 2 \"small_int\")))\n+   (clobber (match_operand:SI 3 \"register_operand\"))]\n   \"reload_completed && WORDS_BIG_ENDIAN && !TARGET_64BIT\n    && !TARGET_DEBUG_D_MODE && !TARGET_DEBUG_G_MODE && !TARGET_MIPS16\n    && GET_CODE (operands[0]) == REG && REGNO (operands[0]) < FIRST_PSEUDO_REGISTER\n@@ -6357,10 +6357,10 @@ srl\\t%M0,%M1,%2\\n\\\n \n \n (define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(lshiftrt:DI (match_operand:DI 1 \"register_operand\" \"\")\n-\t\t     (match_operand:SI 2 \"small_int\" \"\")))\n-   (clobber (match_operand:SI 3 \"register_operand\" \"\"))]\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(lshiftrt:DI (match_operand:DI 1 \"register_operand\")\n+\t\t     (match_operand:SI 2 \"small_int\")))\n+   (clobber (match_operand:SI 3 \"register_operand\"))]\n   \"reload_completed && !WORDS_BIG_ENDIAN && !TARGET_64BIT\n    && !TARGET_DEBUG_D_MODE && !TARGET_DEBUG_G_MODE && !TARGET_MIPS16\n    && GET_CODE (operands[0]) == REG && REGNO (operands[0]) < FIRST_PSEUDO_REGISTER\n@@ -6391,10 +6391,10 @@ srl\\t%M0,%M1,%2\\n\\\n \n \n (define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(lshiftrt:DI (match_operand:DI 1 \"register_operand\" \"\")\n-\t\t     (match_operand:SI 2 \"small_int\" \"\")))\n-   (clobber (match_operand:SI 3 \"register_operand\" \"\"))]\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(lshiftrt:DI (match_operand:DI 1 \"register_operand\")\n+\t\t     (match_operand:SI 2 \"small_int\")))\n+   (clobber (match_operand:SI 3 \"register_operand\"))]\n   \"reload_completed && WORDS_BIG_ENDIAN && !TARGET_64BIT\n    && !TARGET_DEBUG_D_MODE && !TARGET_DEBUG_G_MODE && !TARGET_MIPS16\n    && GET_CODE (operands[0]) == REG && REGNO (operands[0]) < FIRST_PSEUDO_REGISTER\n@@ -6453,7 +6453,7 @@ srl\\t%M0,%M1,%2\\n\\\n    (set_attr \"mode\"\t\"DI\")\n    (set_attr_alternative \"length\"\n \t\t[(const_int 4)\n-\t\t (if_then_else (match_operand:VOID 2 \"m16_uimm3_b\" \"\")\n+\t\t (if_then_else (match_operand:VOID 2 \"m16_uimm3_b\")\n \t\t\t       (const_int 4)\n \t\t\t       (const_int 8))])])\n \n@@ -6503,9 +6503,9 @@ srl\\t%M0,%M1,%2\\n\\\n ;; On the mips16, we can split a 4 byte shift into 2 2 byte shifts.\n \n (define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(lshiftrt:DI (match_operand:DI 1 \"register_operand\" \"\")\n-\t\t     (match_operand:SI 2 \"const_int_operand\" \"\")))]\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(lshiftrt:DI (match_operand:DI 1 \"register_operand\")\n+\t\t     (match_operand:SI 2 \"const_int_operand\")))]\n   \"TARGET_MIPS16 && reload_completed && !TARGET_DEBUG_D_MODE\n    && GET_CODE (operands[2]) == CONST_INT\n    && INTVAL (operands[2]) > 8\n@@ -6539,8 +6539,8 @@ srl\\t%M0,%M1,%2\\n\\\n \n (define_expand \"cmpsi\"\n   [(set (cc0)\n-\t(compare:CC (match_operand:SI 0 \"register_operand\" \"\")\n-\t\t    (match_operand:SI 1 \"arith_operand\" \"\")))]\n+\t(compare:CC (match_operand:SI 0 \"register_operand\")\n+\t\t    (match_operand:SI 1 \"arith_operand\")))]\n   \"\"\n {\n   branch_cmp[0] = operands[0];\n@@ -6551,8 +6551,8 @@ srl\\t%M0,%M1,%2\\n\\\n \n (define_expand \"cmpdi\"\n   [(set (cc0)\n-\t(compare:CC (match_operand:DI 0 \"register_operand\" \"\")\n-\t\t    (match_operand:DI 1 \"arith_operand\" \"\")))]\n+\t(compare:CC (match_operand:DI 0 \"register_operand\")\n+\t\t    (match_operand:DI 1 \"arith_operand\")))]\n   \"TARGET_64BIT\"\n {\n   branch_cmp[0] = operands[0];\n@@ -6563,8 +6563,8 @@ srl\\t%M0,%M1,%2\\n\\\n \n (define_expand \"cmpdf\"\n   [(set (cc0)\n-\t(compare:CC (match_operand:DF 0 \"register_operand\" \"\")\n-\t\t    (match_operand:DF 1 \"register_operand\" \"\")))]\n+\t(compare:CC (match_operand:DF 0 \"register_operand\")\n+\t\t    (match_operand:DF 1 \"register_operand\")))]\n   \"TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT\"\n {\n   branch_cmp[0] = operands[0];\n@@ -6575,8 +6575,8 @@ srl\\t%M0,%M1,%2\\n\\\n \n (define_expand \"cmpsf\"\n   [(set (cc0)\n-\t(compare:CC (match_operand:SF 0 \"register_operand\" \"\")\n-\t\t    (match_operand:SF 1 \"register_operand\" \"\")))]\n+\t(compare:CC (match_operand:SF 0 \"register_operand\")\n+\t\t    (match_operand:SF 1 \"register_operand\")))]\n   \"TARGET_HARD_FLOAT\"\n {\n   branch_cmp[0] = operands[0];\n@@ -6860,7 +6860,7 @@ srl\\t%M0,%M1,%2\\n\\\n   [(set (pc)\n \t(if_then_else (unordered:CC (cc0)\n \t\t\t\t    (const_int 0))\n-\t\t      (label_ref (match_operand 0 \"\" \"\"))\n+\t\t      (label_ref (match_operand 0 \"\"))\n \t\t      (pc)))]\n   \"\"\n {\n@@ -6872,7 +6872,7 @@ srl\\t%M0,%M1,%2\\n\\\n   [(set (pc)\n \t(if_then_else (ordered:CC (cc0)\n \t\t\t\t  (const_int 0))\n-\t\t      (label_ref (match_operand 0 \"\" \"\"))\n+\t\t      (label_ref (match_operand 0 \"\"))\n \t\t      (pc)))]\n   \"\"\n {\n@@ -6884,7 +6884,7 @@ srl\\t%M0,%M1,%2\\n\\\n   [(set (pc)\n \t(if_then_else (unlt:CC (cc0)\n \t\t\t       (const_int 0))\n-\t\t      (label_ref (match_operand 0 \"\" \"\"))\n+\t\t      (label_ref (match_operand 0 \"\"))\n \t\t      (pc)))]\n   \"\"\n {\n@@ -6896,7 +6896,7 @@ srl\\t%M0,%M1,%2\\n\\\n   [(set (pc)\n \t(if_then_else (unge:CC (cc0)\n \t\t\t       (const_int 0))\n-\t\t      (label_ref (match_operand 0 \"\" \"\"))\n+\t\t      (label_ref (match_operand 0 \"\"))\n \t\t      (pc)))]\n   \"\"\n {\n@@ -6908,7 +6908,7 @@ srl\\t%M0,%M1,%2\\n\\\n   [(set (pc)\n \t(if_then_else (uneq:CC (cc0)\n \t\t\t       (const_int 0))\n-\t\t      (label_ref (match_operand 0 \"\" \"\"))\n+\t\t      (label_ref (match_operand 0 \"\"))\n \t\t      (pc)))]\n   \"\"\n {\n@@ -6920,7 +6920,7 @@ srl\\t%M0,%M1,%2\\n\\\n   [(set (pc)\n \t(if_then_else (ltgt:CC (cc0)\n \t\t\t       (const_int 0))\n-\t\t      (label_ref (match_operand 0 \"\" \"\"))\n+\t\t      (label_ref (match_operand 0 \"\"))\n \t\t      (pc)))]\n   \"\"\n {\n@@ -6932,7 +6932,7 @@ srl\\t%M0,%M1,%2\\n\\\n   [(set (pc)\n \t(if_then_else (unle:CC (cc0)\n \t\t\t       (const_int 0))\n-\t\t      (label_ref (match_operand 0 \"\" \"\"))\n+\t\t      (label_ref (match_operand 0 \"\"))\n \t\t      (pc)))]\n   \"\"\n {\n@@ -6944,7 +6944,7 @@ srl\\t%M0,%M1,%2\\n\\\n   [(set (pc)\n \t(if_then_else (ungt:CC (cc0)\n \t\t\t       (const_int 0))\n-\t\t      (label_ref (match_operand 0 \"\" \"\"))\n+\t\t      (label_ref (match_operand 0 \"\"))\n \t\t      (pc)))]\n   \"\"\n {\n@@ -6956,7 +6956,7 @@ srl\\t%M0,%M1,%2\\n\\\n   [(set (pc)\n \t(if_then_else (eq:CC (cc0)\n \t\t\t     (const_int 0))\n-\t\t      (label_ref (match_operand 0 \"\" \"\"))\n+\t\t      (label_ref (match_operand 0 \"\"))\n \t\t      (pc)))]\n   \"\"\n {\n@@ -6968,7 +6968,7 @@ srl\\t%M0,%M1,%2\\n\\\n   [(set (pc)\n \t(if_then_else (ne:CC (cc0)\n \t\t\t     (const_int 0))\n-\t\t      (label_ref (match_operand 0 \"\" \"\"))\n+\t\t      (label_ref (match_operand 0 \"\"))\n \t\t      (pc)))]\n   \"\"\n {\n@@ -6980,7 +6980,7 @@ srl\\t%M0,%M1,%2\\n\\\n   [(set (pc)\n \t(if_then_else (gt:CC (cc0)\n \t\t\t     (const_int 0))\n-\t\t      (label_ref (match_operand 0 \"\" \"\"))\n+\t\t      (label_ref (match_operand 0 \"\"))\n \t\t      (pc)))]\n   \"\"\n {\n@@ -6992,7 +6992,7 @@ srl\\t%M0,%M1,%2\\n\\\n   [(set (pc)\n \t(if_then_else (ge:CC (cc0)\n \t\t\t     (const_int 0))\n-\t\t      (label_ref (match_operand 0 \"\" \"\"))\n+\t\t      (label_ref (match_operand 0 \"\"))\n \t\t      (pc)))]\n   \"\"\n {\n@@ -7004,7 +7004,7 @@ srl\\t%M0,%M1,%2\\n\\\n   [(set (pc)\n \t(if_then_else (lt:CC (cc0)\n \t\t\t     (const_int 0))\n-\t\t      (label_ref (match_operand 0 \"\" \"\"))\n+\t\t      (label_ref (match_operand 0 \"\"))\n \t\t      (pc)))]\n   \"\"\n {\n@@ -7016,7 +7016,7 @@ srl\\t%M0,%M1,%2\\n\\\n   [(set (pc)\n \t(if_then_else (le:CC (cc0)\n \t\t\t     (const_int 0))\n-\t\t      (label_ref (match_operand 0 \"\" \"\"))\n+\t\t      (label_ref (match_operand 0 \"\"))\n \t\t      (pc)))]\n   \"\"\n {\n@@ -7028,7 +7028,7 @@ srl\\t%M0,%M1,%2\\n\\\n   [(set (pc)\n \t(if_then_else (gtu:CC (cc0)\n \t\t\t      (const_int 0))\n-\t\t      (label_ref (match_operand 0 \"\" \"\"))\n+\t\t      (label_ref (match_operand 0 \"\"))\n \t\t      (pc)))]\n   \"\"\n {\n@@ -7040,7 +7040,7 @@ srl\\t%M0,%M1,%2\\n\\\n   [(set (pc)\n \t(if_then_else (geu:CC (cc0)\n \t\t\t      (const_int 0))\n-\t\t      (label_ref (match_operand 0 \"\" \"\"))\n+\t\t      (label_ref (match_operand 0 \"\"))\n \t\t      (pc)))]\n   \"\"\n {\n@@ -7052,7 +7052,7 @@ srl\\t%M0,%M1,%2\\n\\\n   [(set (pc)\n \t(if_then_else (ltu:CC (cc0)\n \t\t\t      (const_int 0))\n-\t\t      (label_ref (match_operand 0 \"\" \"\"))\n+\t\t      (label_ref (match_operand 0 \"\"))\n \t\t      (pc)))]\n   \"\"\n {\n@@ -7064,7 +7064,7 @@ srl\\t%M0,%M1,%2\\n\\\n   [(set (pc)\n \t(if_then_else (leu:CC (cc0)\n \t\t\t      (const_int 0))\n-\t\t      (label_ref (match_operand 0 \"\" \"\"))\n+\t\t      (label_ref (match_operand 0 \"\"))\n \t\t      (pc)))]\n   \"\"\n {\n@@ -7080,7 +7080,7 @@ srl\\t%M0,%M1,%2\\n\\\n ;;  ....................\n \n (define_expand \"seq\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n+  [(set (match_operand:SI 0 \"register_operand\")\n \t(eq:SI (match_dup 1)\n \t       (match_dup 2)))]\n   \"\"\n@@ -7154,9 +7154,9 @@ srl\\t%M0,%M1,%2\\n\\\n    (set_attr \"length\"\t\"8\")])\n \n (define_split\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(eq:SI (match_operand:SI 1 \"register_operand\" \"\")\n-\t       (match_operand:SI 2 \"uns_arith_operand\" \"\")))]\n+  [(set (match_operand:SI 0 \"register_operand\")\n+\t(eq:SI (match_operand:SI 1 \"register_operand\")\n+\t       (match_operand:SI 2 \"uns_arith_operand\")))]\n   \"TARGET_DEBUG_C_MODE && !TARGET_DEBUG_D_MODE && !TARGET_MIPS16\n     && (GET_CODE (operands[2]) != CONST_INT || INTVAL (operands[2]) != 0)\"\n   [(set (match_dup 0)\n@@ -7180,9 +7180,9 @@ srl\\t%M0,%M1,%2\\n\\\n    (set_attr \"length\"\t\"8\")])\n \n (define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(eq:DI (match_operand:DI 1 \"register_operand\" \"\")\n-\t       (match_operand:DI 2 \"uns_arith_operand\" \"\")))]\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(eq:DI (match_operand:DI 1 \"register_operand\")\n+\t       (match_operand:DI 2 \"uns_arith_operand\")))]\n   \"TARGET_64BIT && TARGET_DEBUG_C_MODE && !TARGET_DEBUG_D_MODE\n     && !TARGET_MIPS16\n     && (GET_CODE (operands[2]) != CONST_INT || INTVAL (operands[2]) != 0)\"\n@@ -7197,7 +7197,7 @@ srl\\t%M0,%M1,%2\\n\\\n ;; On the mips16 the default code is better than using sltu.\n \n (define_expand \"sne\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n+  [(set (match_operand:SI 0 \"register_operand\")\n \t(ne:SI (match_dup 1)\n \t       (match_dup 2)))]\n   \"!TARGET_MIPS16\"\n@@ -7252,9 +7252,9 @@ srl\\t%M0,%M1,%2\\n\\\n    (set_attr \"length\"\t\"8\")])\n \n (define_split\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(ne:SI (match_operand:SI 1 \"register_operand\" \"\")\n-\t       (match_operand:SI 2 \"uns_arith_operand\" \"\")))]\n+  [(set (match_operand:SI 0 \"register_operand\")\n+\t(ne:SI (match_operand:SI 1 \"register_operand\")\n+\t       (match_operand:SI 2 \"uns_arith_operand\")))]\n   \"TARGET_DEBUG_C_MODE && !TARGET_DEBUG_D_MODE && !TARGET_MIPS16\n     && (GET_CODE (operands[2]) != CONST_INT || INTVAL (operands[2]) != 0)\"\n   [(set (match_dup 0)\n@@ -7278,9 +7278,9 @@ srl\\t%M0,%M1,%2\\n\\\n    (set_attr \"length\"\t\"8\")])\n \n (define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(ne:DI (match_operand:DI 1 \"register_operand\" \"\")\n-\t       (match_operand:DI 2 \"uns_arith_operand\" \"\")))]\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(ne:DI (match_operand:DI 1 \"register_operand\")\n+\t       (match_operand:DI 2 \"uns_arith_operand\")))]\n   \"TARGET_64BIT && TARGET_DEBUG_C_MODE && !TARGET_DEBUG_D_MODE\n     && !TARGET_MIPS16\n     && (GET_CODE (operands[2]) != CONST_INT || INTVAL (operands[2]) != 0)\"\n@@ -7293,7 +7293,7 @@ srl\\t%M0,%M1,%2\\n\\\n   \"\")\n \n (define_expand \"sgt\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n+  [(set (match_operand:SI 0 \"register_operand\")\n \t(gt:SI (match_dup 1)\n \t       (match_dup 2)))]\n   \"\"\n@@ -7354,7 +7354,7 @@ srl\\t%M0,%M1,%2\\n\\\n    (set_attr \"mode\"\t\"DI\")])\n \n (define_expand \"sge\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n+  [(set (match_operand:SI 0 \"register_operand\")\n \t(ge:SI (match_dup 1)\n \t       (match_dup 2)))]\n   \"\"\n@@ -7386,9 +7386,9 @@ srl\\t%M0,%M1,%2\\n\\\n    (set_attr \"length\"\t\"8\")])\n \n (define_split\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(ge:SI (match_operand:SI 1 \"register_operand\" \"\")\n-\t       (match_operand:SI 2 \"arith_operand\" \"\")))]\n+  [(set (match_operand:SI 0 \"register_operand\")\n+\t(ge:SI (match_operand:SI 1 \"register_operand\")\n+\t       (match_operand:SI 2 \"arith_operand\")))]\n   \"TARGET_DEBUG_C_MODE && !TARGET_DEBUG_D_MODE && !TARGET_MIPS16\"\n   [(set (match_dup 0)\n \t(lt:SI (match_dup 1)\n@@ -7409,9 +7409,9 @@ srl\\t%M0,%M1,%2\\n\\\n    (set_attr \"length\"\t\"8\")])\n \n (define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(ge:DI (match_operand:DI 1 \"register_operand\" \"\")\n-\t       (match_operand:DI 2 \"arith_operand\" \"\")))]\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(ge:DI (match_operand:DI 1 \"register_operand\")\n+\t       (match_operand:DI 2 \"arith_operand\")))]\n   \"TARGET_64BIT && TARGET_DEBUG_C_MODE && !TARGET_DEBUG_D_MODE\n    && !TARGET_MIPS16\"\n   [(set (match_dup 0)\n@@ -7423,7 +7423,7 @@ srl\\t%M0,%M1,%2\\n\\\n   \"\")\n \n (define_expand \"slt\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n+  [(set (match_operand:SI 0 \"register_operand\")\n \t(lt:SI (match_dup 1)\n \t       (match_dup 2)))]\n   \"\"\n@@ -7463,7 +7463,7 @@ srl\\t%M0,%M1,%2\\n\\\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr_alternative \"length\"\n \t\t[(const_int 4)\n-\t\t (if_then_else (match_operand:VOID 2 \"m16_uimm8_1\" \"\")\n+\t\t (if_then_else (match_operand:VOID 2 \"m16_uimm8_1\")\n \t\t\t       (const_int 4)\n \t\t\t       (const_int 8))])])\n \n@@ -7486,12 +7486,12 @@ srl\\t%M0,%M1,%2\\n\\\n    (set_attr \"mode\"\t\"DI\")\n    (set_attr_alternative \"length\"\n \t\t[(const_int 4)\n-\t\t (if_then_else (match_operand:VOID 2 \"m16_uimm8_1\" \"\")\n+\t\t (if_then_else (match_operand:VOID 2 \"m16_uimm8_1\")\n \t\t\t       (const_int 4)\n \t\t\t       (const_int 8))])])\n \n (define_expand \"sle\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n+  [(set (match_operand:SI 0 \"register_operand\")\n \t(le:SI (match_dup 1)\n \t       (match_dup 2)))]\n   \"\"\n@@ -7538,7 +7538,7 @@ srl\\t%M0,%M1,%2\\n\\\n }\n   [(set_attr \"type\"\t\"slt\")\n    (set_attr \"mode\"\t\"SI\")\n-   (set (attr \"length\") (if_then_else (match_operand:VOID 2 \"m16_uimm8_m1_1\" \"\")\n+   (set (attr \"length\") (if_then_else (match_operand:VOID 2 \"m16_uimm8_m1_1\")\n \t\t\t\t      (const_int 4)\n \t\t\t\t      (const_int 8)))])\n \n@@ -7565,7 +7565,7 @@ srl\\t%M0,%M1,%2\\n\\\n }\n   [(set_attr \"type\"\t\"slt\")\n    (set_attr \"mode\"\t\"DI\")\n-   (set (attr \"length\") (if_then_else (match_operand:VOID 2 \"m16_uimm8_m1_1\" \"\")\n+   (set (attr \"length\") (if_then_else (match_operand:VOID 2 \"m16_uimm8_m1_1\")\n \t\t\t\t      (const_int 4)\n \t\t\t\t      (const_int 8)))])\n \n@@ -7580,9 +7580,9 @@ srl\\t%M0,%M1,%2\\n\\\n    (set_attr \"length\"\t\"8\")])\n \n (define_split\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(le:SI (match_operand:SI 1 \"register_operand\" \"\")\n-\t       (match_operand:SI 2 \"register_operand\" \"\")))]\n+  [(set (match_operand:SI 0 \"register_operand\")\n+\t(le:SI (match_operand:SI 1 \"register_operand\")\n+\t       (match_operand:SI 2 \"register_operand\")))]\n   \"TARGET_DEBUG_C_MODE && !TARGET_DEBUG_D_MODE && !TARGET_MIPS16\"\n   [(set (match_dup 0)\n \t(lt:SI (match_dup 2)\n@@ -7603,9 +7603,9 @@ srl\\t%M0,%M1,%2\\n\\\n    (set_attr \"length\"\t\"8\")])\n \n (define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(le:DI (match_operand:DI 1 \"register_operand\" \"\")\n-\t       (match_operand:DI 2 \"register_operand\" \"\")))]\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(le:DI (match_operand:DI 1 \"register_operand\")\n+\t       (match_operand:DI 2 \"register_operand\")))]\n   \"TARGET_64BIT && TARGET_DEBUG_C_MODE && !TARGET_DEBUG_D_MODE\n    && !TARGET_MIPS16\"\n   [(set (match_dup 0)\n@@ -7617,7 +7617,7 @@ srl\\t%M0,%M1,%2\\n\\\n   \"\")\n \n (define_expand \"sgtu\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n+  [(set (match_operand:SI 0 \"register_operand\")\n \t(gtu:SI (match_dup 1)\n \t\t(match_dup 2)))]\n   \"\"\n@@ -7678,7 +7678,7 @@ srl\\t%M0,%M1,%2\\n\\\n    (set_attr \"mode\"\t\"DI\")])\n \n (define_expand \"sgeu\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n+  [(set (match_operand:SI 0 \"register_operand\")\n         (geu:SI (match_dup 1)\n                 (match_dup 2)))]\n   \"\"\n@@ -7710,9 +7710,9 @@ srl\\t%M0,%M1,%2\\n\\\n    (set_attr \"length\"\t\"8\")])\n \n (define_split\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(geu:SI (match_operand:SI 1 \"register_operand\" \"\")\n-\t\t(match_operand:SI 2 \"arith_operand\" \"\")))]\n+  [(set (match_operand:SI 0 \"register_operand\")\n+\t(geu:SI (match_operand:SI 1 \"register_operand\")\n+\t\t(match_operand:SI 2 \"arith_operand\")))]\n   \"TARGET_DEBUG_C_MODE && !TARGET_DEBUG_D_MODE && !TARGET_MIPS16\"\n   [(set (match_dup 0)\n \t(ltu:SI (match_dup 1)\n@@ -7733,9 +7733,9 @@ srl\\t%M0,%M1,%2\\n\\\n    (set_attr \"length\"\t\"8\")])\n \n (define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(geu:DI (match_operand:DI 1 \"register_operand\" \"\")\n-\t\t(match_operand:DI 2 \"arith_operand\" \"\")))]\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(geu:DI (match_operand:DI 1 \"register_operand\")\n+\t\t(match_operand:DI 2 \"arith_operand\")))]\n   \"TARGET_64BIT && TARGET_DEBUG_C_MODE && !TARGET_DEBUG_D_MODE\n    && !TARGET_MIPS16\"\n   [(set (match_dup 0)\n@@ -7747,7 +7747,7 @@ srl\\t%M0,%M1,%2\\n\\\n   \"\")\n \n (define_expand \"sltu\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n+  [(set (match_operand:SI 0 \"register_operand\")\n \t(ltu:SI (match_dup 1)\n \t\t(match_dup 2)))]\n   \"\"\n@@ -7787,7 +7787,7 @@ srl\\t%M0,%M1,%2\\n\\\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr_alternative \"length\"\n \t\t[(const_int 4)\n-\t\t (if_then_else (match_operand:VOID 2 \"m16_uimm8_1\" \"\")\n+\t\t (if_then_else (match_operand:VOID 2 \"m16_uimm8_1\")\n \t\t\t       (const_int 4)\n \t\t\t       (const_int 8))])])\n \n@@ -7810,12 +7810,12 @@ srl\\t%M0,%M1,%2\\n\\\n    (set_attr \"mode\"\t\"DI\")\n    (set_attr_alternative \"length\"\n \t\t[(const_int 4)\n-\t\t (if_then_else (match_operand:VOID 2 \"m16_uimm8_1\" \"\")\n+\t\t (if_then_else (match_operand:VOID 2 \"m16_uimm8_1\")\n \t\t\t       (const_int 4)\n \t\t\t       (const_int 8))])])\n \n (define_expand \"sleu\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n+  [(set (match_operand:SI 0 \"register_operand\")\n \t(leu:SI (match_dup 1)\n \t\t(match_dup 2)))]\n   \"\"\n@@ -7862,7 +7862,7 @@ srl\\t%M0,%M1,%2\\n\\\n }\n   [(set_attr \"type\"\t\"slt\")\n    (set_attr \"mode\"\t\"SI\")\n-   (set (attr \"length\") (if_then_else (match_operand:VOID 2 \"m16_uimm8_m1_1\" \"\")\n+   (set (attr \"length\") (if_then_else (match_operand:VOID 2 \"m16_uimm8_m1_1\")\n \t\t\t\t      (const_int 4)\n \t\t\t\t      (const_int 8)))])\n \n@@ -7889,7 +7889,7 @@ srl\\t%M0,%M1,%2\\n\\\n }\n   [(set_attr \"type\"\t\"slt\")\n    (set_attr \"mode\"\t\"DI\")\n-   (set (attr \"length\") (if_then_else (match_operand:VOID 2 \"m16_uimm8_m1_1\" \"\")\n+   (set (attr \"length\") (if_then_else (match_operand:VOID 2 \"m16_uimm8_m1_1\")\n \t\t\t\t      (const_int 4)\n \t\t\t\t      (const_int 8)))])\n \n@@ -7904,9 +7904,9 @@ srl\\t%M0,%M1,%2\\n\\\n    (set_attr \"length\"\t\"8\")])\n \n (define_split\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(leu:SI (match_operand:SI 1 \"register_operand\" \"\")\n-\t\t(match_operand:SI 2 \"register_operand\" \"\")))]\n+  [(set (match_operand:SI 0 \"register_operand\")\n+\t(leu:SI (match_operand:SI 1 \"register_operand\")\n+\t\t(match_operand:SI 2 \"register_operand\")))]\n   \"TARGET_DEBUG_C_MODE && !TARGET_DEBUG_D_MODE && !TARGET_MIPS16\"\n   [(set (match_dup 0)\n \t(ltu:SI (match_dup 2)\n@@ -7927,9 +7927,9 @@ srl\\t%M0,%M1,%2\\n\\\n    (set_attr \"length\"\t\"8\")])\n \n (define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(leu:DI (match_operand:DI 1 \"register_operand\" \"\")\n-\t\t(match_operand:DI 2 \"register_operand\" \"\")))]\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(leu:DI (match_operand:DI 1 \"register_operand\")\n+\t\t(match_operand:DI 2 \"register_operand\")))]\n   \"TARGET_64BIT && TARGET_DEBUG_C_MODE && !TARGET_DEBUG_D_MODE\n    && !TARGET_MIPS16\"\n   [(set (match_dup 0)\n@@ -8162,7 +8162,7 @@ srl\\t%M0,%M1,%2\\n\\\n    (set_attr \"length\"\t\"8\")])\n \n (define_expand \"indirect_jump\"\n-  [(set (pc) (match_operand 0 \"register_operand\" \"d\"))]\n+  [(set (pc) (match_operand 0 \"register_operand\"))]\n   \"\"\n {\n   rtx dest;\n@@ -8195,8 +8195,8 @@ srl\\t%M0,%M1,%2\\n\\\n \n (define_expand \"tablejump\"\n   [(set (pc)\n-\t(match_operand 0 \"register_operand\" \"d\"))\n-   (use (label_ref (match_operand 1 \"\" \"\")))]\n+\t(match_operand 0 \"register_operand\"))\n+   (use (label_ref (match_operand 1 \"\")))]\n   \"\"\n {\n   if (TARGET_MIPS16)\n@@ -8243,9 +8243,8 @@ srl\\t%M0,%M1,%2\\n\\\n    (set_attr \"mode\"\t\"none\")])\n \n (define_expand \"tablejump_mips161\"\n-  [(set (pc) (plus:SI (sign_extend:SI\n-\t\t       (match_operand:HI 0 \"register_operand\" \"d\"))\n-\t\t      (label_ref:SI (match_operand 1 \"\" \"\"))))]\n+  [(set (pc) (plus:SI (sign_extend:SI (match_operand:HI 0 \"register_operand\"))\n+\t\t      (label_ref:SI (match_operand 1 \"\"))))]\n   \"TARGET_MIPS16 && !(Pmode == DImode)\"\n {\n   rtx t1, t2, t3;\n@@ -8261,9 +8260,8 @@ srl\\t%M0,%M1,%2\\n\\\n })\n \n (define_expand \"tablejump_mips162\"\n-  [(set (pc) (plus:DI (sign_extend:DI\n-\t\t       (match_operand:HI 0 \"register_operand\" \"d\"))\n-\t\t      (label_ref:DI (match_operand 1 \"\" \"\"))))]\n+  [(set (pc) (plus:DI (sign_extend:DI (match_operand:HI 0 \"register_operand\"))\n+\t\t      (label_ref:DI (match_operand 1 \"\"))))]\n   \"TARGET_MIPS16 && Pmode == DImode\"\n {\n   rtx t1, t2, t3;\n@@ -8284,7 +8282,7 @@ srl\\t%M0,%M1,%2\\n\\\n ;; it takes 3 or 4 insns to do so.\n \n (define_expand \"builtin_setjmp_setup\"\n-  [(use (match_operand 0 \"register_operand\" \"\"))]\n+  [(use (match_operand 0 \"register_operand\"))]\n   \"TARGET_ABICALLS\"\n {\n   rtx addr;\n@@ -8299,7 +8297,7 @@ srl\\t%M0,%M1,%2\\n\\\n ;; $25 for compatibility (we lose nothing by doing so).\n \n (define_expand \"builtin_longjmp\"\n-  [(use (match_operand 0 \"register_operand\" \"r\"))]\n+  [(use (match_operand 0 \"register_operand\"))]\n   \"TARGET_ABICALLS\"\n {\n   /* The elements of the buffer are, in order:  */\n@@ -8393,7 +8391,7 @@ srl\\t%M0,%M1,%2\\n\\\n \n ;; This is used in compiling the unwind routines.\n (define_expand \"eh_return\"\n-  [(use (match_operand 0 \"general_operand\" \"\"))]\n+  [(use (match_operand 0 \"general_operand\"))]\n   \"\"\n {\n   enum machine_mode gpr_mode = TARGET_64BIT ? DImode : SImode;\n@@ -8424,8 +8422,8 @@ srl\\t%M0,%M1,%2\\n\\\n   \"#\")\n \n (define_split\n-  [(unspec [(match_operand 0 \"register_operand\" \"\")] UNSPEC_EH_RETURN)\n-   (clobber (match_scratch 1 \"\"))]\n+  [(unspec [(match_operand 0 \"register_operand\")] UNSPEC_EH_RETURN)\n+   (clobber (match_scratch 1))]\n   \"reload_completed && !TARGET_DEBUG_D_MODE\"\n   [(const_int 0)]\n {\n@@ -8501,10 +8499,10 @@ srl\\t%M0,%M1,%2\\n\\\n ;; epilogue -- we might as well use it for !TARGET_ABICALLS as well.\n \n (define_expand \"sibcall\"\n-  [(parallel [(call (match_operand 0 \"\" \"\")\n-\t\t    (match_operand 1 \"\" \"\"))\n-\t      (use (match_operand 2 \"\" \"\"))\t;; next_arg_reg\n-\t      (use (match_operand 3 \"\" \"\"))])]\t;; struct_value_size_rtx\n+  [(parallel [(call (match_operand 0 \"\")\n+\t\t    (match_operand 1 \"\"))\n+\t      (use (match_operand 2 \"\"))\t;; next_arg_reg\n+\t      (use (match_operand 3 \"\"))])]\t;; struct_value_size_rtx\n   \"TARGET_SIBCALLS\"\n {\n   mips_expand_call (0, XEXP (operands[0], 0), operands[1], operands[2], true);\n@@ -8521,10 +8519,10 @@ srl\\t%M0,%M1,%2\\n\\\n   [(set_attr \"type\" \"call\")])\n \n (define_expand \"sibcall_value\"\n-  [(parallel [(set (match_operand 0 \"\" \"\")\n-\t\t   (call (match_operand 1 \"\" \"\")\n-\t\t\t (match_operand 2 \"\" \"\")))\n-\t      (use (match_operand 3 \"\" \"\"))])]\t\t;; next_arg_reg\n+  [(parallel [(set (match_operand 0 \"\")\n+\t\t   (call (match_operand 1 \"\")\n+\t\t\t (match_operand 2 \"\")))\n+\t      (use (match_operand 3 \"\"))])]\t\t;; next_arg_reg\n   \"TARGET_SIBCALLS\"\n {\n   mips_expand_call (operands[0], XEXP (operands[1], 0),\n@@ -8556,10 +8554,10 @@ srl\\t%M0,%M1,%2\\n\\\n   [(set_attr \"type\" \"call\")])\n \n (define_expand \"call\"\n-  [(parallel [(call (match_operand 0 \"\" \"\")\n-\t\t    (match_operand 1 \"\" \"\"))\n-\t      (use (match_operand 2 \"\" \"\"))\t;; next_arg_reg\n-\t      (use (match_operand 3 \"\" \"\"))])]\t;; struct_value_size_rtx\n+  [(parallel [(call (match_operand 0 \"\")\n+\t\t    (match_operand 1 \"\"))\n+\t      (use (match_operand 2 \"\"))\t;; next_arg_reg\n+\t      (use (match_operand 3 \"\"))])]\t;; struct_value_size_rtx\n   \"\"\n {\n   mips_expand_call (0, XEXP (operands[0], 0), operands[1], operands[2], false);\n@@ -8630,10 +8628,10 @@ srl\\t%M0,%M1,%2\\n\\\n   [(set_attr \"type\" \"call\")])\n \n (define_expand \"call_value\"\n-  [(parallel [(set (match_operand 0 \"\" \"\")\n-\t\t   (call (match_operand 1 \"\" \"\")\n-\t\t\t (match_operand 2 \"\" \"\")))\n-\t      (use (match_operand 3 \"\" \"\"))])]\t\t;; next_arg_reg\n+  [(parallel [(set (match_operand 0 \"\")\n+\t\t   (call (match_operand 1 \"\")\n+\t\t\t (match_operand 2 \"\")))\n+\t      (use (match_operand 3 \"\"))])]\t\t;; next_arg_reg\n   \"\"\n {\n   mips_expand_call (operands[0], XEXP (operands[1], 0),\n@@ -8710,10 +8708,10 @@ srl\\t%M0,%M1,%2\\n\\\n ;; Call subroutine returning any type.\n \n (define_expand \"untyped_call\"\n-  [(parallel [(call (match_operand 0 \"\" \"\")\n+  [(parallel [(call (match_operand 0 \"\")\n \t\t    (const_int 0))\n-\t      (match_operand 1 \"\" \"\")\n-\t      (match_operand 2 \"\" \"\")])]\n+\t      (match_operand 1 \"\")\n+\t      (match_operand 2 \"\")])]\n   \"\"\n {\n   int i;\n@@ -8740,9 +8738,9 @@ srl\\t%M0,%M1,%2\\n\\\n \n \n (define_expand \"prefetch\"\n-  [(prefetch (match_operand 0 \"address_operand\" \"\")\n-\t     (match_operand 1 \"const_int_operand\" \"\")\n-\t     (match_operand 2 \"const_int_operand\" \"\"))]\n+  [(prefetch (match_operand 0 \"address_operand\")\n+\t     (match_operand 1 \"const_int_operand\")\n+\t     (match_operand 2 \"const_int_operand\"))]\n   \"ISA_HAS_PREFETCH\"\n {\n   if (symbolic_operand (operands[0], GET_MODE (operands[0])))\n@@ -9015,47 +9013,47 @@ srl\\t%M0,%M1,%2\\n\\\n ;; These are the main define_expand's used to make conditional moves.\n \n (define_expand \"movsicc\"\n-  [(set (match_dup 4) (match_operand 1 \"comparison_operator\" \"\"))\n-   (set (match_operand:SI 0 \"register_operand\" \"\")\n+  [(set (match_dup 4) (match_operand 1 \"comparison_operator\"))\n+   (set (match_operand:SI 0 \"register_operand\")\n \t(if_then_else:SI (match_dup 5)\n-\t\t\t (match_operand:SI 2 \"reg_or_0_operand\" \"\")\n-\t\t\t (match_operand:SI 3 \"reg_or_0_operand\" \"\")))]\n+\t\t\t (match_operand:SI 2 \"reg_or_0_operand\")\n+\t\t\t (match_operand:SI 3 \"reg_or_0_operand\")))]\n   \"ISA_HAS_CONDMOVE || ISA_HAS_INT_CONDMOVE\"\n {\n   gen_conditional_move (operands);\n   DONE;\n })\n \n (define_expand \"movdicc\"\n-  [(set (match_dup 4) (match_operand 1 \"comparison_operator\" \"\"))\n-   (set (match_operand:DI 0 \"register_operand\" \"\")\n+  [(set (match_dup 4) (match_operand 1 \"comparison_operator\"))\n+   (set (match_operand:DI 0 \"register_operand\")\n \t(if_then_else:DI (match_dup 5)\n-\t\t\t (match_operand:DI 2 \"reg_or_0_operand\" \"\")\n-\t\t\t (match_operand:DI 3 \"reg_or_0_operand\" \"\")))]\n+\t\t\t (match_operand:DI 2 \"reg_or_0_operand\")\n+\t\t\t (match_operand:DI 3 \"reg_or_0_operand\")))]\n   \"(ISA_HAS_CONDMOVE || ISA_HAS_INT_CONDMOVE) && TARGET_64BIT\"\n {\n   gen_conditional_move (operands);\n   DONE;\n })\n \n (define_expand \"movsfcc\"\n-  [(set (match_dup 4) (match_operand 1 \"comparison_operator\" \"\"))\n-   (set (match_operand:SF 0 \"register_operand\" \"\")\n+  [(set (match_dup 4) (match_operand 1 \"comparison_operator\"))\n+   (set (match_operand:SF 0 \"register_operand\")\n \t(if_then_else:SF (match_dup 5)\n-\t\t\t (match_operand:SF 2 \"register_operand\" \"\")\n-\t\t\t (match_operand:SF 3 \"register_operand\" \"\")))]\n+\t\t\t (match_operand:SF 2 \"register_operand\")\n+\t\t\t (match_operand:SF 3 \"register_operand\")))]\n   \"ISA_HAS_CONDMOVE && TARGET_HARD_FLOAT\"\n {\n   gen_conditional_move (operands);\n   DONE;\n })\n \n (define_expand \"movdfcc\"\n-  [(set (match_dup 4) (match_operand 1 \"comparison_operator\" \"\"))\n-   (set (match_operand:DF 0 \"register_operand\" \"\")\n+  [(set (match_dup 4) (match_operand 1 \"comparison_operator\"))\n+   (set (match_operand:DF 0 \"register_operand\")\n \t(if_then_else:DF (match_dup 5)\n-\t\t\t (match_operand:DF 2 \"register_operand\" \"\")\n-\t\t\t (match_operand:DF 3 \"register_operand\" \"\")))]\n+\t\t\t (match_operand:DF 2 \"register_operand\")\n+\t\t\t (match_operand:DF 3 \"register_operand\")))]\n   \"ISA_HAS_CONDMOVE && TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT\"\n {\n   gen_conditional_move (operands);\n@@ -9221,7 +9219,7 @@ srl\\t%M0,%M1,%2\\n\\\n    (set_attr \"length\"\t\"8\")])\n \n (define_split\n-  [(match_operand 0 \"small_data_pattern\" \"\")]\n+  [(match_operand 0 \"small_data_pattern\")]\n   \"reload_completed\"\n   [(match_dup 0)]\n   { operands[0] = mips_rewrite_small_data (operands[0]); })"}, {"sha": "41cebedce4ffe08010fe692b36fcecae07831a32", "filename": "gcc/config/mips/sb1.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d4592363e21433046e6ab066f94203b9da8edd/gcc%2Fconfig%2Fmips%2Fsb1.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d4592363e21433046e6ab066f94203b9da8edd/gcc%2Fconfig%2Fmips%2Fsb1.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fsb1.md?ref=62d4592363e21433046e6ab066f94203b9da8edd", "patch": "@@ -269,13 +269,13 @@\n (define_insn_reservation \"ir_sb1_mfhi\" 1\n   (and (eq_attr \"cpu\" \"sb1\")\n        (and (eq_attr \"type\" \"mfhilo\")\n-\t    (not (match_operand 1 \"lo_operand\" \"\"))))\n+\t    (not (match_operand 1 \"lo_operand\"))))\n   \"sb1_ex1\")\n \n (define_insn_reservation \"ir_sb1_mflo\" 1\n   (and (eq_attr \"cpu\" \"sb1\")\n        (and (eq_attr \"type\" \"mfhilo\")\n-\t    (match_operand 1 \"lo_operand\" \"\")))\n+\t    (match_operand 1 \"lo_operand\")))\n   \"sb1_ex1\")\n \n ;; mt{hi,lo} to mul/div is 4 cycles.\n@@ -390,15 +390,15 @@\n (define_insn_reservation \"ir_sb1_mtxfer\" 5\n   (and (eq_attr \"cpu\" \"sb1\")\n        (and (eq_attr \"type\" \"xfer\")\n-\t    (match_operand 0 \"fp_register_operand\" \"\")))\n+\t    (match_operand 0 \"fp_register_operand\")))\n   \"sb1_fp0\")\n \n ;; mfc1 latency 1 cycle.  \n \n (define_insn_reservation \"ir_sb1_mfxfer\" 1\n   (and (eq_attr \"cpu\" \"sb1\")\n        (and (eq_attr \"type\" \"xfer\")\n-\t    (not (match_operand 0 \"fp_register_operand\" \"\"))))\n+\t    (not (match_operand 0 \"fp_register_operand\"))))\n   \"sb1_fp0\")\n \n ;; ??? Can deliver at most 1 result per every 6 cycles because of issue"}, {"sha": "d17235f5f61b994df1fbc95317a064415227d449", "filename": "gcc/read-rtl.c", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d4592363e21433046e6ab066f94203b9da8edd/gcc%2Fread-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d4592363e21433046e6ab066f94203b9da8edd/gcc%2Fread-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fread-rtl.c?ref=62d4592363e21433046e6ab066f94203b9da8edd", "patch": "@@ -651,26 +651,28 @@ read_rtx (FILE *infile)\n \tbreak;\n \n       case 'S':\n-\t/* 'S' is an optional string: if a closeparen follows,\n-\t   just store NULL for this element.  */\n-\tc = read_skip_spaces (infile);\n-\tungetc (c, infile);\n-\tif (c == ')')\n-\t  {\n-\t    XSTR (return_rtx, i) = 0;\n-\t    break;\n-\t  }\n-\n       case 'T':\n       case 's':\n \t{\n \t  char *stringbuf;\n+\t  int star_if_braced;\n+\n+\t  c = read_skip_spaces (infile);\n+\t  ungetc (c, infile);\n+\t  if (c == ')')\n+\t    {\n+\t      /* 'S' fields are optional and should be NULL if no string\n+\t\t was given.  Also allow normal 's' and 'T' strings to be\n+\t\t omitted, treating them in the same way as empty strings.  */\n+\t      XSTR (return_rtx, i) = (format_ptr[-1] == 'S' ? NULL : \"\");\n+\t      break;\n+\t    }\n \n \t  /* The output template slot of a DEFINE_INSN,\n \t     DEFINE_INSN_AND_SPLIT, or DEFINE_PEEPHOLE automatically\n \t     gets a star inserted as its first character, if it is\n \t     written with a brace block instead of a string constant.  */\n-\t  int star_if_braced = (format_ptr[-1] == 'T');\n+\t  star_if_braced = (format_ptr[-1] == 'T');\n \n \t  stringbuf = read_string (&rtl_obstack, infile, star_if_braced);\n "}]}