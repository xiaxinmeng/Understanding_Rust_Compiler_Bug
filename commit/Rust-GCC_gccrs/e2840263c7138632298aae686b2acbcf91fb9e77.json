{"sha": "e2840263c7138632298aae686b2acbcf91fb9e77", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTI4NDAyNjNjNzEzODYzMjI5OGFhZTY4NmIyYWNiY2Y5MWZiOWU3Nw==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@codesourcery.com", "date": "2000-08-20T09:50:12Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2000-08-20T09:50:12Z"}, "message": "c-errors.c (pedwarn_c99): Adjust call to report_diagnostic.\n\n\t* c-errors.c (pedwarn_c99): Adjust call to report_diagnostic.\n\n\t* diagnostic.c (default_diagnostic_starter,\n\tdefault_diagnostic_finalizer): New functions.\n\t(diagnostic_for_asm, diagnostic_for_decl): Tweak.\n\t(pedwarn, pedwarn_with_file_and_line, error,\n\terror_with_file_and_line, fatal, warning,\n\twarning_with_file_and_line): Adjust call to report_diagnostic.\n\t(report_diagnostic): Rework.\n\t(set_diagnostic_context): New function.\n\n\t* diagnostic.h (struct diagnostic_context): New data structure.\n\t(diagnostic_message, diagnostic_argument_list,\n\tdiagnostic_file_location, diagnostic_line_location,\n\tdiagnostic_is_warning, diagnostic_starter, diagnostic_finalizer,\n\tdiagnostic_finalizer, diagnostic_auxiliary_data): New macros.\n\t(set_diagnostic_context): Declare.\n\t(report_diagnostic): Change prototype.\n\nFrom-SVN: r35817", "tree": {"sha": "a48feb8c4b79b8c4f09b952ea1e0f1cbca855311", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a48feb8c4b79b8c4f09b952ea1e0f1cbca855311"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e2840263c7138632298aae686b2acbcf91fb9e77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2840263c7138632298aae686b2acbcf91fb9e77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2840263c7138632298aae686b2acbcf91fb9e77", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2840263c7138632298aae686b2acbcf91fb9e77/comments", "author": null, "committer": null, "parents": [{"sha": "1293daae2b80a40d3325f54ddbe139385edfde98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1293daae2b80a40d3325f54ddbe139385edfde98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1293daae2b80a40d3325f54ddbe139385edfde98"}], "stats": {"total": 203, "additions": 166, "deletions": 37}, "files": [{"sha": "45db7463449af84ed5f920a8276b45effbd82eb0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2840263c7138632298aae686b2acbcf91fb9e77/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2840263c7138632298aae686b2acbcf91fb9e77/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e2840263c7138632298aae686b2acbcf91fb9e77", "patch": "@@ -1,3 +1,24 @@\n+2000-08-20  Gabriel Dos Reis  <gdr@codesourcery.com>\n+\n+\t* c-errors.c (pedwarn_c99): Adjust call to report_diagnostic.\n+\n+\t* diagnostic.c (default_diagnostic_starter,\n+\tdefault_diagnostic_finalizer): New functions.\n+\t(diagnostic_for_asm, diagnostic_for_decl): Tweak.\n+\t(pedwarn, pedwarn_with_file_and_line, error,\n+\terror_with_file_and_line, fatal, warning,\n+\twarning_with_file_and_line): Adjust call to report_diagnostic.\n+\t(report_diagnostic): Rework.\n+\t(set_diagnostic_context): New function.\n+\n+\t* diagnostic.h (struct diagnostic_context): New data structure.\n+\t(diagnostic_message, diagnostic_argument_list,\n+\tdiagnostic_file_location, diagnostic_line_location,\n+\tdiagnostic_is_warning, diagnostic_starter, diagnostic_finalizer,\n+\tdiagnostic_finalizer, diagnostic_auxiliary_data): New macros.\n+\t(set_diagnostic_context): Declare.\n+\t(report_diagnostic): Change prototype.\n+\n Sun 20-Aug-2000 09:25:45 BST  Neil Booth  <NeilB@earthling.net>\n \n \t* fix-header.c (main): Initialize cpplib."}, {"sha": "562915bb27859abc208cdf5c2d460bc19925371e", "filename": "gcc/c-errors.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2840263c7138632298aae686b2acbcf91fb9e77/gcc%2Fc-errors.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2840263c7138632298aae686b2acbcf91fb9e77/gcc%2Fc-errors.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-errors.c?ref=e2840263c7138632298aae686b2acbcf91fb9e77", "patch": "@@ -36,14 +36,16 @@ pedwarn_c99 VPARAMS ((const char *msgid, ...))\n   const char *msgid;\n #endif\n   va_list ap;\n+  diagnostic_context dc;\n \n   VA_START (ap, msgid);\n \n #ifndef ANSI_PROTOTYPES\n   msgid = va_arg (ap, const char *);\n #endif\n \n-  report_diagnostic (msgid, &ap, input_filename, lineno,\n-                     !flag_isoc99 || !flag_pedantic_errors);\n+  set_diagnostic_context (&dc, msgid, &ap, input_filename, lineno,\n+                          !flag_isoc99 || !flag_pedantic_errors);\n+  report_diagnostic (&dc);\n   va_end (ap);\n }"}, {"sha": "ce0bb10d188f6984b079d72b55127e59dc06d06d", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 92, "deletions": 33, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2840263c7138632298aae686b2acbcf91fb9e77/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2840263c7138632298aae686b2acbcf91fb9e77/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=e2840263c7138632298aae686b2acbcf91fb9e77", "patch": "@@ -96,6 +96,11 @@ static void maybe_wrap_text PARAMS ((output_buffer *, const char *,\n static void clear_text_info PARAMS ((output_buffer *));\n static void clear_diagnostic_info PARAMS ((output_buffer *));\n \n+static void default_diagnostic_starter PARAMS ((output_buffer *,\n+                                                diagnostic_context *));\n+static void default_diagnostic_finalizer PARAMS ((output_buffer *,\n+                                                  diagnostic_context *));\n+\n static void error_recursion PARAMS ((void)) ATTRIBUTE_NORETURN;\n static const char *trim_filename PARAMS ((const char *));\n \n@@ -912,11 +917,12 @@ diagnostic_for_asm (insn, msg, args_ptr, warn)\n      va_list *args_ptr;\n      int warn;\n {\n-  const char *file;\n-  int line;\n+  diagnostic_context dc;\n \n-  file_and_line_for_asm (insn, &file, &line);\n-  report_diagnostic (msg, args_ptr, file, line, warn);\n+  set_diagnostic_context (&dc, msg, args_ptr, NULL, 0, warn);\n+  file_and_line_for_asm (insn, &diagnostic_file_location (&dc),\n+                         &diagnostic_line_location (&dc));\n+  report_diagnostic (&dc);\n }\n \n /* Report a diagnostic MESSAGE at the declaration DECL.\n@@ -1032,15 +1038,17 @@ pedwarn VPARAMS ((const char *msgid, ...))\n   const char *msgid;\n #endif\n   va_list ap;\n+  diagnostic_context dc;\n \n   VA_START (ap, msgid);\n \n #ifndef ANSI_PROTOTYPES\n   msgid = va_arg (ap, const char *);\n #endif\n \n-  report_diagnostic (msgid, &ap, input_filename, lineno,\n-                     !flag_pedantic_errors);\n+  set_diagnostic_context\n+    (&dc, msgid, &ap, input_filename, lineno, !flag_pedantic_errors);\n+  report_diagnostic (&dc);\n   va_end (ap);\n }\n \n@@ -1084,6 +1092,7 @@ pedwarn_with_file_and_line VPARAMS ((const char *file, int line,\n   const char *msgid;\n #endif\n   va_list ap;\n+  diagnostic_context dc;\n \n   VA_START (ap, msgid);\n \n@@ -1093,7 +1102,8 @@ pedwarn_with_file_and_line VPARAMS ((const char *file, int line,\n   msgid = va_arg (ap, const char *);\n #endif\n \n-  report_diagnostic (msgid, &ap, file, line, !flag_pedantic_errors);\n+  set_diagnostic_context (&dc, msgid, &ap, file, line, !flag_pedantic_errors);\n+  report_diagnostic (&dc);\n   va_end (ap);\n }\n \n@@ -1225,6 +1235,7 @@ error_with_file_and_line VPARAMS ((const char *file, int line,\n   const char *msgid;\n #endif\n   va_list ap;\n+  diagnostic_context dc;\n \n   VA_START (ap, msgid);\n \n@@ -1234,7 +1245,8 @@ error_with_file_and_line VPARAMS ((const char *file, int line,\n   msgid = va_arg (ap, const char *);\n #endif\n \n-  report_diagnostic (msgid, &ap, file, line, /* warn = */ 0);\n+  set_diagnostic_context (&dc, msgid, &ap, file, line, /* warn = */ 0);\n+  report_diagnostic (&dc);\n   va_end (ap);\n }\n \n@@ -1285,14 +1297,17 @@ error VPARAMS ((const char *msgid, ...))\n   const char *msgid;\n #endif\n   va_list ap;\n+  diagnostic_context dc;\n \n   VA_START (ap, msgid);\n \n #ifndef ANSI_PROTOTYPES\n   msgid = va_arg (ap, const char *);\n #endif\n \n-  report_diagnostic (msgid, &ap, input_filename, lineno, /* warn = */ 0);\n+  set_diagnostic_context\n+    (&dc, msgid, &ap, input_filename, lineno, /* warn = */ 0);\n+  report_diagnostic (&dc);\n   va_end (ap);\n }\n \n@@ -1317,17 +1332,20 @@ fatal VPARAMS ((const char *msgid, ...))\n   const char *msgid;\n #endif\n   va_list ap;\n+  diagnostic_context dc;\n \n   VA_START (ap, msgid);\n \n #ifndef ANSI_PROTOTYPES\n   msgid = va_arg (ap, const char *);\n #endif\n \n-   if (fatal_function != 0)\n-     (*fatal_function) (_(msgid), &ap);\n-\n-  report_diagnostic (msgid, &ap, input_filename, lineno, 0);\n+  if (fatal_function != 0)\n+    (*fatal_function) (_(msgid), &ap);\n+  \n+  set_diagnostic_context\n+    (&dc, msgid, &ap, input_filename, lineno, /* warn = */0);\n+  report_diagnostic (&dc);\n   va_end (ap);\n   exit (FATAL_EXIT_CODE);\n }\n@@ -1369,6 +1387,7 @@ warning_with_file_and_line VPARAMS ((const char *file, int line,\n   const char *msgid;\n #endif\n   va_list ap;\n+  diagnostic_context dc;\n \n   VA_START (ap, msgid);\n \n@@ -1378,7 +1397,8 @@ warning_with_file_and_line VPARAMS ((const char *file, int line,\n   msgid = va_arg (ap, const char *);\n #endif\n \n-  report_diagnostic (msgid, &ap, file, line, /* warn = */ 1);\n+  set_diagnostic_context (&dc, msgid, &ap, file, line, /* warn = */ 1);\n+  report_diagnostic (&dc);\n   va_end (ap);\n }\n \n@@ -1429,14 +1449,17 @@ warning VPARAMS ((const char *msgid, ...))\n   const char *msgid;\n #endif\n   va_list ap;\n+  diagnostic_context dc;\n \n   VA_START (ap, msgid);\n \n #ifndef ANSI_PROTOTYPES\n   msgid = va_arg (ap, const char *);\n #endif\n \n-  report_diagnostic (msgid, &ap, input_filename, lineno, /* warn = */ 1);\n+  set_diagnostic_context\n+    (&dc, msgid, &ap, input_filename, lineno, /* warn = */ 1);\n+  report_diagnostic (&dc);\n   va_end (ap);\n }\n \n@@ -1507,36 +1530,29 @@ verbatim VPARAMS ((const char *msg, ...))\n   va_end (ap);\n }\n \n-/* Report a diagnostic MESSAGE (an error or a WARNING) involving\n-   entities in ARGUMENTS.  FILE and LINE indicate where the diagnostic\n-   occurs.  This function is *the* subroutine in terms of which front-ends\n-   should implement their specific diagnostic handling modules.\n-   The front-end independent format specifiers are exactly those described\n+/* Report a diagnostic message (an error or a warning) as specified by\n+   DC.  This function is *the* subroutine in terms of which front-ends\n+   should implement their specific diagnostic handling modules.  The\n+   front-end independent format specifiers are exactly those described\n    in the documentation of output_format.  */\n void\n-report_diagnostic (msg, args_ptr, file, line, warn)\n-     const char *msg;\n-     va_list *args_ptr;\n-     const char *file;\n-     int line;\n-     int warn;\n+report_diagnostic (dc)\n+     diagnostic_context *dc;\n {\n   output_state os;\n \n   if (diagnostic_lock++)\n     error_recursion ();\n \n-  if (count_error (warn))\n+  if (count_error (diagnostic_is_warning (dc)))\n     {\n       os = diagnostic_buffer->state;\n-      diagnostic_msg = msg;\n-      diagnostic_args = args_ptr;\n-      report_error_function (file);\n-      output_set_prefix\n-\t(diagnostic_buffer, context_as_prefix (file, line, warn));\n+      diagnostic_msg = diagnostic_message (dc);\n+      diagnostic_args = diagnostic_argument_list (dc);\n+      (*diagnostic_starter (dc)) (diagnostic_buffer, dc);\n       output_format (diagnostic_buffer);\n+      (*diagnostic_finalizer (dc)) (diagnostic_buffer, dc);\n       finish_diagnostic ();\n-      output_destroy_prefix (diagnostic_buffer);\n       diagnostic_buffer->state = os;\n     }\n \n@@ -1597,3 +1613,46 @@ Please submit a full bug report.\\n\\\n See %s for instructions.\",\n \t function, trim_filename (file), line, GCCBUGURL);\n }\n+\n+/* Setup DC for reporting a diagnostic MESSAGE (an error of a WARNING),\n+   using arguments pointed to by ARGS_PTR, issued at a location specified\n+   by FILE and LINE.  Front-ends may override the defaut diagnostic pager\n+   and finalizer *after* this subroutine completes.  */\n+void\n+set_diagnostic_context (dc, message, args_ptr, file, line, warn)\n+     diagnostic_context *dc;\n+     const char *message;\n+     va_list *args_ptr;\n+     const char *file;\n+     int line;\n+     int warn;\n+{\n+  bzero (dc, sizeof (diagnostic_context));\n+  diagnostic_message (dc) = message;\n+  diagnostic_argument_list (dc) = args_ptr;\n+  diagnostic_file_location (dc) = file;\n+  diagnostic_line_location (dc) = line;\n+  diagnostic_is_warning (dc) = warn;\n+  diagnostic_starter (dc) = default_diagnostic_starter;\n+  diagnostic_finalizer (dc) = default_diagnostic_finalizer;\n+}\n+\n+static void\n+default_diagnostic_starter (buffer, dc)\n+     output_buffer *buffer;\n+     diagnostic_context *dc;\n+{\n+  report_error_function (diagnostic_file_location (dc));\n+  output_set_prefix (buffer,\n+                     context_as_prefix (diagnostic_file_location (dc),\n+                                        diagnostic_line_location (dc),\n+                                        diagnostic_is_warning (dc)));\n+}\n+\n+static void\n+default_diagnostic_finalizer (buffer, dc)\n+     output_buffer *buffer;\n+     diagnostic_context *dc __attribute__((__unused__));\n+{\n+  output_destroy_prefix (buffer);\n+}"}, {"sha": "07beb4b44581740577d0ca2dd98108338a35c8b0", "filename": "gcc/diagnostic.h", "status": "modified", "additions": 49, "deletions": 2, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2840263c7138632298aae686b2acbcf91fb9e77/gcc%2Fdiagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2840263c7138632298aae686b2acbcf91fb9e77/gcc%2Fdiagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.h?ref=e2840263c7138632298aae686b2acbcf91fb9e77", "patch": "@@ -26,6 +26,7 @@ Boston, MA 02111-1307, USA.  */\n \n /*  Forward declarations.  */\n typedef struct output_buffer output_buffer;\n+typedef struct diagnostic_context diagnostic_context;\n \n #define DIAGNOSTICS_SHOW_PREFIX_ONCE       0x0\n #define DIAGNOSTICS_SHOW_PREFIX_NEVER      0x1\n@@ -79,6 +80,51 @@ struct output_buffer\n #define output_buffer_text_cursor(BUFFER) (BUFFER)->state.cursor\n #define output_buffer_format_args(BUFFER) *((BUFFER)->state.format_args)\n \n+/* This data structure bundles altogether any information relevent to\n+   the context of a diagnostic message.  */\n+struct diagnostic_context\n+{\n+  /* The diagnostic message to output.  */\n+  const char *message;\n+\n+  /* A pointer to a variable list of the arguments necessary for the\n+     purpose of  message formatting.  */\n+  va_list *args_ptr;\n+\n+  /* The name of the source file involved in the diiagnostic.  */     \n+  const char *file;\n+\n+  /* The line-location in the source file.  */\n+  int line;\n+\n+  /* Is it message a warning?  */\n+  int warn;\n+\n+  /* This function is called before any message is printed out.  It is\n+     respondible for preparing message prefix and such.  For example, it\n+     might say:\n+     In file included from \"/usr/local/include/curses.h:5:\n+                      from \"/home/gdr/src/nifty_printer.h:56:\n+                      ...\n+  */\n+  void (*begin_diagnostic) PARAMS ((output_buffer *, diagnostic_context *));\n+\n+  /* This function is called after the diagnostic message is printed.   */\n+  void (*end_diagnostic) PARAMS ((output_buffer *, diagnostic_context *));\n+\n+  /* Hook for front-end extensions.  */\n+  void *x_data;\n+};\n+\n+#define diagnostic_message(DC) (DC)->message\n+#define diagnostic_argument_list(DC) (DC)->args_ptr\n+#define diagnostic_file_location(DC) (DC)->file\n+#define diagnostic_line_location(DC) (DC)->line\n+#define diagnostic_is_warning(DC) (DC)->warn\n+#define diagnostic_starter(DC) (DC)->begin_diagnostic\n+#define diagnostic_finalizer(DC) (DC)->end_diagnostic\n+#define diagnostic_auxiliary_data(DC) (DC)->x_data\n+\n /* If non-NULL, this function formats data in the BUFFER. When called,\n    output_buffer_text_cursor (BUFFER) points to a format code.  LANG_PRINTER\n    should call output_add_string (and related functions) to add data to\n@@ -101,10 +147,11 @@ extern int diagnostic_message_length_per_line;\n extern output_buffer *diagnostic_buffer;\n \n /* Prototypes */\n+void set_diagnostic_context     PARAMS ((diagnostic_context *, const char *,\n+                                         va_list *, const char *, int, int));\n void set_fatal_function\t\tPARAMS ((void (*) PARAMS ((const char *,\n \t\t\t\t\t\t\t   va_list *))));\n-void report_diagnostic          PARAMS ((const char *, va_list *,\n-                                         const char *, int, int));\n+void report_diagnostic          PARAMS ((diagnostic_context *));\n void initialize_diagnostics     PARAMS ((void));\n void reshape_diagnostic_buffer  PARAMS ((void));\n void default_initialize_buffer  PARAMS ((output_buffer *));"}]}