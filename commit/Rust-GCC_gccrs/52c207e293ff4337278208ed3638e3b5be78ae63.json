{"sha": "52c207e293ff4337278208ed3638e3b5be78ae63", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTJjMjA3ZTI5M2ZmNDMzNzI3ODIwOGVkMzYzOGUzYjViZTc4YWU2Mw==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@wolery.cumb.org", "date": "2000-01-20T18:25:12Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-01-20T18:25:12Z"}, "message": "Makefile.in (fixinc.sh): Depend on specs.\n\n\t* Makefile.in (fixinc.sh): Depend on specs.\n        * fixinc/Makefile.in: Add rule to create machname.h.\n        (fixlib.o): Depend on machname.h.\n        * fixinc/fixtests.c (machine_name): New test.\n        * fixinc/fixfixes.c (machine_name): New fix.\n        * fixinc/fixlib.c (mn_get_regexps): New helper function for\n        the machine_name test and fix.\n        * fixinc/fixlib.h: Prototype it.\n        * fixinc/inclhack.def (machine_name): Use the C test and fix.\n\t* fixinc/fixincl.x, fixinc/inclhack.sh: Rebuild.\n\n        * gcc.c (do_spec_1) [case P]: Take care not to create\n        identifiers with three leading or trailing underscores.\n\n\t* fixinc/Makefile.in (FIXINC_DEFS): Add -DIN_GCC.\n\t(fixincl): Don't specify libraries twice on link line.\n\t(gnu-regex.o): Remove special rule.\n\t* fixinc/gnu-regex.c: Define REGEX_MALLOC if C_ALLOCA was\n\tdefined by config.h.  Do not define _REGEX_RE_COMP.\n\t(regcomp): Allocate and initialize a fastmap.\n\t* fixinc/gnu-regex.h: Do not define _REGEX_RE_COMP.\n\nFrom-SVN: r31542", "tree": {"sha": "088b6ad9fd2e111425c3ac61d68bf0b55e82c712", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/088b6ad9fd2e111425c3ac61d68bf0b55e82c712"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/52c207e293ff4337278208ed3638e3b5be78ae63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52c207e293ff4337278208ed3638e3b5be78ae63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52c207e293ff4337278208ed3638e3b5be78ae63", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52c207e293ff4337278208ed3638e3b5be78ae63/comments", "author": null, "committer": null, "parents": [{"sha": "d3de1cf7f0f0e2c98460a3fb50b2aee18ddbdc51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3de1cf7f0f0e2c98460a3fb50b2aee18ddbdc51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3de1cf7f0f0e2c98460a3fb50b2aee18ddbdc51"}], "stats": {"total": 482, "additions": 279, "deletions": 203}, "files": [{"sha": "1c71eb3f5088ad1909928eec0e5a31bbdb348682", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52c207e293ff4337278208ed3638e3b5be78ae63/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52c207e293ff4337278208ed3638e3b5be78ae63/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=52c207e293ff4337278208ed3638e3b5be78ae63", "patch": "@@ -1,3 +1,29 @@\n+2000-01-20  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* Makefile.in (fixinc.sh): Depend on specs.\n+        * fixinc/Makefile.in: Add rule to create machname.h.\n+        (fixlib.o): Depend on machname.h.\n+        * fixinc/fixtests.c (machine_name): New test.\n+        * fixinc/fixfixes.c (machine_name): New fix.\n+        * fixinc/fixlib.c (mn_get_regexps): New helper function for\n+        the machine_name test and fix.\n+        * fixinc/fixlib.h: Prototype it.\n+        * fixinc/inclhack.def (machine_name): Use the C test and fix.\n+\t* fixinc/fixincl.x, fixinc/inclhack.sh: Rebuild.\n+\n+        * gcc.c (do_spec_1) [case P]: Take care not to create\n+        identifiers with three leading or trailing underscores.\n+\n+\t* fixinc/Makefile.in (FIXINC_DEFS): Add -DIN_GCC.\n+\t(fixincl): Don't specify libraries twice on link line.\n+\t(gnu-regex.o): Remove special rule.\n+\t* fixinc/gnu-regex.c: Define REGEX_MALLOC if C_ALLOCA was\n+\tdefined by config.h.  Do not define _REGEX_RE_COMP.\n+\t(regcomp): Allocate and initialize a fastmap.\n+\t* fixinc/gnu-regex.h: Do not define _REGEX_RE_COMP.\n+\t\n+\t\n+\n 2000-01-20  Brad Lucier  <lucier@math.purdue.edu>\n \n \t* Makefile.in (predict.o): Depend on $(EXPR_H), not expr.h."}, {"sha": "8d91ab318b8f7e4205b17105b93b63fb9f9f09f7", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52c207e293ff4337278208ed3638e3b5be78ae63/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52c207e293ff4337278208ed3638e3b5be78ae63/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=52c207e293ff4337278208ed3638e3b5be78ae63", "patch": "@@ -2161,7 +2161,7 @@ FIXINCSRCDIR=$(srcdir)/fixinc\n fixinc.sh: $(FIXINCSRCDIR)/mkfixinc.sh $(FIXINCSRCDIR)/fixincl.c \\\n \t$(FIXINCSRCDIR)/procopen.c $(FIXINCSRCDIR)/gnu-regex.c \\\n \t$(FIXINCSRCDIR)/server.c $(FIXINCSRCDIR)/gnu-regex.h \\\n-\t$(FIXINCSRCDIR)/server.h $(FIXINCSRCDIR)/inclhack.def\n+\t$(FIXINCSRCDIR)/server.h $(FIXINCSRCDIR)/inclhack.def specs\n \tMAKE=\"$(MAKE)\"; srcdir=`cd $(srcdir)/fixinc; pwd` ; \\\n \texport MAKE srcdir ; \\\n \tcd ./fixinc; $(SHELL) $${srcdir}/mkfixinc.sh $(target)"}, {"sha": "43d3855be22d9bc14368f1aa4cb73b31574eae80", "filename": "gcc/fixinc/Makefile.in", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52c207e293ff4337278208ed3638e3b5be78ae63/gcc%2Ffixinc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52c207e293ff4337278208ed3638e3b5be78ae63/gcc%2Ffixinc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2FMakefile.in?ref=52c207e293ff4337278208ed3638e3b5be78ae63", "patch": "@@ -22,7 +22,7 @@\n # Its purpose is to build the any-platforms fixinc.sh script.\n \n CFLAGS = -g\n-FIXINC_DEFS = $(CFLAGS) $(CPPFLAGS) @fixinc_defs@ $(INCLUDES)\n+FIXINC_DEFS = -DIN_GCC $(CFLAGS) $(CPPFLAGS) @fixinc_defs@ $(INCLUDES)\n \n CC = @CC@\n SHELL = /bin/sh\n@@ -77,8 +77,8 @@ gen : $(SH_TARGET) fixincl.x\n $(FIOBJ): $(HDR)\n \n fixincl: $(FIOBJ)\n-\t@echo $(CC) -o $@ $(FIOBJ) $(LIBERTY) $(LIB) ; \\\n-\tif $(CC) -o $@ $(FIOBJ) $(LIBERTY) $(LIB) ; then : ; else \\\n+\t@echo $(CC) $(FIXINC_DEFS) -o $@ $(FIOBJ) ; \\\n+\tif $(CC) $(FIXINC_DEFS) -o $@ $(FIOBJ) ; then : ; else \\\n \trm -f $@ ; (echo \"#! /bin/sh\" ; echo exit 1 ) > $@ ; \\\n \tchmod 777 $@ ; fi\n \n@@ -90,13 +90,10 @@ fixtests: fixtests.c $(LIBOBJ)\n \t$(CC) -o $@ $(FIXINC_DEFS) -DMAIN \\\n \t\t$(srcdir)/fixtests.c $(LIBOBJ) $(LIB)\n \n-gnu-regex.o: gnu-regex.c\n-\t-$(CC) $(CFLAGS) $(FIXINC_DEFS) $(INCLUDES) -DREGEX_MALLOC \\\n-\t\t-c $(srcdir)/gnu-regex.c\n-\n fixincl.o : fixincl.x fixincl.c fixfixes.c fixtests.c\n server.o : server.c server.h\n procopen.o : procopen.c server.h\n+fixlib.o: machname.h\n \n fixincl.x: fixincl.tpl inclhack.def\n \tcd $(srcdir) ; ./genfixes $@\n@@ -139,3 +136,16 @@ install: $(TARGETS)\n Makefile: Makefile.in ../config.status\n \tcd .. \\\n \t  && CONFIG_FILES=$(subdir)/$@ CONFIG_HEADERS= $(SHELL) ./config.status\n+\n+# Black magic.\n+# Note dependency on ASCII. \\040 = space, \\011 = tab, \\012 = newline.\n+\n+machname.h: ../specs\n+\t@tr -s '\\040\\011' '\\012\\012' < ../specs | \\\n+\t    sed -n 's/^.*-D\\([a-zA-Z_][a-zA-Z0-9_]*\\).*$$/\\1/p' | sort -u | \\\n+\t    grep -v '^_[_A-Z]' > mn.T\n+\t@echo \"Forbidden identifiers: `tr '\\012' ' ' <mn.T`\"\n+\t@sed 's/^/\\\\\\\\</; s/$$/\\\\\\\\>/' <mn.T | tr '\\012' '|' | \\\n+\t     sed 's/^/#define MN_NAME_PAT \"/; s/|$$/\"/' > machname.h\n+\t@echo >> machname.h\n+\t@-rm -f mn.T"}, {"sha": "109c61128f42a88aede5a8d7cbb52864406ccd8a", "filename": "gcc/fixinc/fixfixes.c", "status": "modified", "additions": 100, "deletions": 1, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52c207e293ff4337278208ed3638e3b5be78ae63/gcc%2Ffixinc%2Ffixfixes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52c207e293ff4337278208ed3638e3b5be78ae63/gcc%2Ffixinc%2Ffixfixes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixfixes.c?ref=52c207e293ff4337278208ed3638e3b5be78ae63", "patch": "@@ -77,7 +77,8 @@ typedef struct {\n   _FT_( \"IO_use\",\t    IO_use_fix ) \\\n   _FT_( \"CTRL_use\",\t    CTRL_use_fix) \\\n   _FT_( \"IO_defn\",\t    IO_defn_fix ) \\\n-  _FT_( \"CTRL_defn\",\t    CTRL_defn_fix )\n+  _FT_( \"CTRL_defn\",\t    CTRL_defn_fix ) \\\n+  _FT_( \"machine_name\",\t    machine_name_fix )\n \n \n #define FIX_PROC_HEAD( fix ) \\\n@@ -548,6 +549,104 @@ FIX_PROC_HEAD( CTRL_defn_fix )\n }\n \n \n+/* Fix for machine name #ifdefs that are not in the namespace reserved\n+   by the C standard.  They won't be defined if compiling with -ansi,\n+   and the headers will break.  We go to some trouble to only change\n+   #ifdefs where the macro is defined by GCC in non-ansi mode; this\n+   minimizes the number of headers touched.  */\n+\n+#define SCRATCHSZ 64   /* hopefully long enough */\n+\n+FIX_PROC_HEAD( machine_name_fix )\n+{\n+  regmatch_t match[2];\n+  char *line, *base, *limit, *p, *q;\n+  regex_t *label_re, *name_re;\n+  char scratch[SCRATCHSZ];\n+  size_t len;\n+\n+  mn_get_regexps (&label_re, &name_re, \"machine_name_fix\");\n+  scratch[0] = '_';\n+  scratch[1] = '_';\n+\n+  for (base = text;\n+       regexec (label_re, base, 2, match, 0) == 0;\n+       base = limit)\n+    {\n+      base += match[0].rm_eo;\n+      /* We're looking at an #if or #ifdef.  Scan forward for the\n+\t next non-escaped newline.  */\n+      line = limit = base;\n+      do\n+\t{\n+\t  limit++;\n+\t  limit = strchr (limit, '\\n');\n+\t  if (!limit)\n+\t    goto done;\n+\t}\n+      while (limit[-1] == '\\\\');\n+\n+      /* If the 'name_pat' matches in between base and limit, we have\n+\t a bogon.  It is not worth the hassle of excluding comments\n+\t because comments on #if/#ifdef lines are rare, and strings on\n+\t such lines are illegal.\n+\n+\t REG_NOTBOL means 'base' is not at the beginning of a line, which\n+\t shouldn't matter since the name_re has no ^ anchor, but let's\n+\t be accurate anyway.  */\n+\n+      for (;;)\n+\t{\n+\tagain:\n+\t  if (base == limit)\n+\t    break;\n+\n+\t  if (regexec (name_re, base, 1, match, REG_NOTBOL))\n+\t    goto done;  /* No remaining match in this file */\n+\n+\t  /* Match; is it on the line?  */\n+\t  if (match[0].rm_eo > limit - base)\n+\t    break;\n+\n+\t  p = base + match[0].rm_so;\n+\t  base += match[0].rm_eo;\n+\n+\t  /* One more test: if on the same line we have the same string\n+\t     with the appropriate underscores, then leave it alone.\n+\t     We want exactly two leading and trailing underscores.  */\n+\t  if (*p == '_')\n+\t    {\n+\t      len = base - p - ((*base == '_') ? 2 : 1);\n+\t      q = p + 1;\n+\t    }\n+\t  else\n+\t    {\n+\t      len = base - p - ((*base == '_') ? 1 : 0);\n+\t      q = p;\n+\t    }\n+\t  if (len + 4 > SCRATCHSZ)\n+\t    abort ();\n+\t  memcpy (&scratch[2], q, len);\n+\t  len += 2;\n+\t  scratch[len++] = '_';\n+\t  scratch[len++] = '_';\n+\n+\t  for (q = line; q <= limit - len; q++)\n+\t    if (*q == '_' && !strncmp (q, scratch, len))\n+\t      goto again;\n+\t  \n+\t  fwrite (text, 1, p - text, stdout);\n+\t  fwrite (scratch, 1, len, stdout);\n+\n+\t  text = base;\n+\t}\n+    }\n+ done:\n+  fputs (text, stdout);\n+  free (scratch);\n+}\n+\n+\n /* = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n \n      test for fix selector"}, {"sha": "5c4089147de6fa5feb7c6d4bf86a283d938cb462", "filename": "gcc/fixinc/fixincl.x", "status": "modified", "additions": 5, "deletions": 43, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52c207e293ff4337278208ed3638e3b5be78ae63/gcc%2Ffixinc%2Ffixincl.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52c207e293ff4337278208ed3638e3b5be78ae63/gcc%2Ffixinc%2Ffixincl.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixincl.x?ref=52c207e293ff4337278208ed3638e3b5be78ae63", "patch": "@@ -2341,56 +2341,18 @@ tSCC zMachine_NameName[] =\n #define apzMachine_NameMachs (const char**)NULL\n \n /*\n- *  content selection pattern - do fix if pattern found\n- *  This is a special pattern that not all egrep commands\n- *  are capable of coping with.  We use the GNU library, tho :)\n+ *  perform the C function call test\n  */\n-tSCC zMachine_NameSelect0[] =\n-       \"^#[ \\t]*(if|elif).*[^a-zA-Z0-9_](M32|_*MIPSE[LB]|_*SYSTYPE_[A-Z0-9]|_*[Rr][34]000|_*host_mips|_*i386|_*mips|bsd4|is68k|m[68]8k|mc680|news|ns32000|pdp11|pyr|sel|sony_news|sparc|sun|tahoe|tower|u370|u3b|unix|vax)\";\n+tSCC zMachine_NameFTst0[] = \"machine_name\";\n \n #define    MACHINE_NAME_TEST_CT  1\n tTestDesc aMachine_NameTests[] = {\n-  { TT_EGREP,    zMachine_NameSelect0, (regex_t*)NULL }, };\n+  { TT_FUNCTION, zMachine_NameFTst0,   0 /* unused */ }, };\n \n /*\n  *  Fix Command Arguments for Machine_Name\n  */\n-const char* apzMachine_NamePatch[] = { \"sed\",\n-    \"-e\", \":loop\\n\\\n-/\\\\\\\\$/N\\n\\\n-s/\\\\\\\\$/\\\\\\\\+++fixinc_eol+++/\\n\\\n-/\\\\\\\\$/b loop\\n\\\n-s/\\\\\\\\+++fixinc_eol+++/\\\\\\\\/g\\n\\\n-/#[\\t ]*[el]*if/ {\\n\\\n-\\ts/[a-zA-Z0-9_][a-zA-Z0-9_]*/ & /g\\n\\\n-\\ts/ M32 / __M32__ /g\\n\\\n-\\ts/ _*MIPSE\\\\([LB]\\\\) / __MIPSE\\\\1__ /g\\n\\\n-\\ts/ _*SYSTYPE_\\\\([A-Z0-9]*\\\\) / __SYSTYPE_\\\\1__ /g\\n\\\n-\\ts/ _*\\\\([Rr][34]\\\\)000 / __\\\\1000__ /g\\n\\\n-\\ts/ _*host_mips / __host_mips__ /g\\n\\\n-\\ts/ _*i386 / __i386__ /g\\n\\\n-\\ts/ _*mips / __mips__ /g\\n\\\n-\\ts/ bsd4\\\\([0-9]\\\\) / __bsd4\\\\1__ /g\\n\\\n-\\ts/ is68k / __is68k__ /g\\n\\\n-\\ts/ m68k / __m68k__ /g\\n\\\n-\\ts/ m88k / __m88k__ /g\\n\\\n-\\ts/ mc680\\\\([0-9]\\\\)0 / __mc680\\\\10__ /g\\n\\\n-\\ts/ news\\\\([0-9]*\\\\) / __news\\\\1__ /g\\n\\\n-\\ts/ ns32000 / __ns32000__ /g\\n\\\n-\\ts/ pdp11 / __pdp11__ /g\\n\\\n-\\ts/ pyr / __pyr__ /g\\n\\\n-\\ts/ sel / __sel__ /g\\n\\\n-\\ts/ sony_news / __sony_news__ /g\\n\\\n-\\ts/ sparc / __sparc__ /g\\n\\\n-\\ts/ sun\\\\([a-z0-9]*\\\\) / __sun\\\\1__ /g\\n\\\n-\\ts/ tahoe / __tahoe__ /g\\n\\\n-\\ts/ tower\\\\([_0-9]*\\\\) / __tower\\\\1__ /g\\n\\\n-\\ts/ u370 / __u370__ /g\\n\\\n-\\ts/ u3b\\\\([0-9]*\\\\) / __u3b\\\\1__ /g\\n\\\n-\\ts/ unix / __unix__ /g\\n\\\n-\\ts/ vax / __vax__ /g\\n\\\n-\\ts/ \\\\([a-zA-Z0-9_][a-zA-Z0-9_]*\\\\) /\\\\1/g\\n\\\n-\\t}\",\n+const char* apzMachine_NamePatch[] = {\"machine_name\",\n     (char*)NULL };\n \n /* * * * * * * * * * * * * * * * * * * * * * * * * *\n@@ -4696,7 +4658,7 @@ tFixDesc fixDescList[ FIX_COUNT ] = {\n \n   {  zMachine_NameName,    zMachine_NameList,\n      apzMachine_NameMachs, (regex_t*)NULL,\n-     MACHINE_NAME_TEST_CT, FD_MACH_ONLY,\n+     MACHINE_NAME_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n      aMachine_NameTests,   apzMachine_NamePatch },\n \n   {  zMath_ExceptionName,    zMath_ExceptionList,"}, {"sha": "edd0be6daab65c076790487662179b27eef530b2", "filename": "gcc/fixinc/fixlib.c", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52c207e293ff4337278208ed3638e3b5be78ae63/gcc%2Ffixinc%2Ffixlib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52c207e293ff4337278208ed3638e3b5be78ae63/gcc%2Ffixinc%2Ffixlib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixlib.c?ref=52c207e293ff4337278208ed3638e3b5be78ae63", "patch": "@@ -171,3 +171,34 @@ compile_re( pat, re, match, e1, e2 )\n       exit (EXIT_FAILURE);\n     }\n }\n+\n+/* * * * * * * * * * * * *\n+\n+   Helper routine and data for the machine_name test and fix.\n+   machname.h is created by black magic in the Makefile.  */\n+\n+#include \"machname.h\"\n+\n+tSCC mn_label_pat[] = \"^[ \\t]*#[ \\t]*(if|ifdef|ifndef)[ \\t]+\";\n+static regex_t mn_label_re;\n+\n+tSCC mn_name_pat[] = MN_NAME_PAT;\n+static regex_t mn_name_re;\n+\n+static int mn_compiled = 0;\n+\n+void\n+mn_get_regexps( label_re, name_re, who )\n+     regex_t **label_re;\n+     regex_t **name_re;\n+     tCC *who;\n+{\n+  if (! mn_compiled)\n+    {\n+      compile_re (mn_label_pat, &mn_label_re, 1, \"label pattern\", who);\n+      compile_re (mn_name_pat, &mn_name_re, 1, \"name pattern\", who);\n+      mn_compiled++;\n+    }\n+  *label_re = &mn_label_re;\n+  *name_re = &mn_name_re;\n+}"}, {"sha": "22ab56a3de5ec41e5e410bd917be83d90077da8c", "filename": "gcc/fixinc/fixlib.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52c207e293ff4337278208ed3638e3b5be78ae63/gcc%2Ffixinc%2Ffixlib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52c207e293ff4337278208ed3638e3b5be78ae63/gcc%2Ffixinc%2Ffixlib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixlib.h?ref=52c207e293ff4337278208ed3638e3b5be78ae63", "patch": "@@ -99,4 +99,6 @@ char * load_file_data _P_(( FILE* fp ));\n t_bool is_cxx_header  _P_(( tCC* filename, tCC* filetext ));\n void   compile_re     _P_(( tCC* pat, regex_t* re, int match,\n \t\t\t    tCC *e1, tCC *e2 ));\n+void   mn_get_regexps _P_(( regex_t** label_re, regex_t** name_re,\n+\t\t\t    tCC *who ));\n #endif /* FIXINCLUDES_FIXLIB_H */"}, {"sha": "72fa7ee0354ec1bdb6aed50e8fa2b956ed46f55c", "filename": "gcc/fixinc/fixtests.c", "status": "modified", "additions": 48, "deletions": 1, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52c207e293ff4337278208ed3638e3b5be78ae63/gcc%2Ffixinc%2Ffixtests.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52c207e293ff4337278208ed3638e3b5be78ae63/gcc%2Ffixinc%2Ffixtests.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixtests.c?ref=52c207e293ff4337278208ed3638e3b5be78ae63", "patch": "@@ -58,7 +58,8 @@ typedef struct {\n \n #define FIX_TEST_TABLE \\\n   _FT_( \"double_slash\",     double_slash_test ) \\\n-  _FT_( \"else_endif_label\", else_endif_label_test )\n+  _FT_( \"else_endif_label\", else_endif_label_test ) \\\n+  _FT_( \"machine_name\",     machine_name_test )\n \n \n #define TEST_FOR_FIX_PROC_HEAD( test ) \\\n@@ -268,6 +269,52 @@ TEST_FOR_FIX_PROC_HEAD( else_endif_label_test )\n   return SKIP_FIX;\n }\n \n+TEST_FOR_FIX_PROC_HEAD( machine_name_test )\n+{\n+  regex_t *label_re, *name_re;\n+  regmatch_t match[2];\n+  tCC *base, *limit;\n+\n+  mn_get_regexps(&label_re, &name_re, \"machine_name_test\");\n+\n+  for (base = text;\n+       regexec (label_re, base, 2, match, 0) == 0;\n+       base = limit)\n+    {\n+      base += match[0].rm_eo;\n+      /* We're looking at an #if or #ifdef.  Scan forward for the\n+\t next non-escaped newline.  */\n+      limit = base;\n+      do\n+\t{\n+\t  limit++;\n+\t  limit = strchr (limit, '\\n');\n+\t  if (!limit)\n+\t    return SKIP_FIX;\n+\t}\n+      while (limit[-1] == '\\\\');\n+\n+      /* If the 'name_pat' matches in between base and limit, we have\n+\t a bogon.  It is not worth the hassle of excluding comments,\n+\t because comments on #if/#ifdef/#ifndef lines are rare,\n+\t and strings on such lines are illegal.\n+\n+\t REG_NOTBOL means 'base' is not at the beginning of a line, which\n+\t shouldn't matter since the name_re has no ^ anchor, but let's\n+\t be accurate anyway.  */\n+\n+      if (regexec (name_re, base, 1, match, REG_NOTBOL))\n+\treturn SKIP_FIX;  /* No match in file - no fix needed */\n+\n+      /* Match; is it on the line?  */\n+      if (match[0].rm_eo < limit - base)\n+\treturn APPLY_FIX;  /* Yup */\n+\n+      /* Otherwise, keep looking... */\n+    }\n+  return SKIP_FIX;\n+}\n+\n \n /* = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n "}, {"sha": "007aec175d42330a04758e2a3ba5e9149342f8c9", "filename": "gcc/fixinc/gnu-regex.c", "status": "modified", "additions": 27, "deletions": 16, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52c207e293ff4337278208ed3638e3b5be78ae63/gcc%2Ffixinc%2Fgnu-regex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52c207e293ff4337278208ed3638e3b5be78ae63/gcc%2Ffixinc%2Fgnu-regex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Fgnu-regex.c?ref=52c207e293ff4337278208ed3638e3b5be78ae63", "patch": "@@ -21,18 +21,23 @@\n    along with this program; if not, write to the Free Software Foundation, \n    Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n \n-/* AIX requires this to be the first thing in the file. */\n-#if defined _AIX && !defined REGEX_MALLOC\n-  #pragma alloca\n-#endif\n-\n #undef\t_GNU_SOURCE\n #define _GNU_SOURCE\n \n #ifdef HAVE_CONFIG_H\n # include <config.h>\n #endif\n \n+/* Do not use a C alloca, we will leak memory and crash.  */\n+#ifdef C_ALLOCA\n+# define REGEX_MALLOC\n+#endif\n+\n+/* AIX requires this to be the first thing in the file. */\n+#if defined _AIX && !defined REGEX_MALLOC\n+  #pragma alloca\n+#endif\n+\n #ifndef PARAMS\n # if defined __GNUC__ || (defined __STDC__ && __STDC__)\n #  define PARAMS(args) args\n@@ -153,11 +158,6 @@ char *realloc ();\n /* How many characters in the character set.  */\n # define CHAR_SET_SIZE 256\n \n-/* GDB LOCAL: define _REGEX_RE_COMP to get BSD style re_comp and re_exec */\n-#ifndef _REGEX_RE_COMP\n-#define _REGEX_RE_COMP\n-#endif\n-\n # ifdef SYNTAX_TABLE\n \n extern char *re_syntax_table;\n@@ -5561,7 +5561,8 @@ re_exec (s)\n        REG_EXTENDED bit in CFLAGS is set; otherwise, to\n        RE_SYNTAX_POSIX_BASIC;\n      `newline_anchor' to REG_NEWLINE being set in CFLAGS;\n-     `fastmap' and `fastmap_accurate' to zero;\n+     `fastmap' to an allocated space for the fastmap;\n+     `fastmap_accurate' to 1;\n      `re_nsub' to the number of subexpressions in PATTERN.\n \n    PATTERN is the address of the pattern string.\n@@ -5600,11 +5601,8 @@ regcomp (preg, pattern, cflags)\n   preg->allocated = 0;\n   preg->used = 0;\n \n-  /* Don't bother to use a fastmap when searching.  This simplifies the\n-     REG_NEWLINE case: if we used a fastmap, we'd have to put all the\n-     characters after newlines into the fastmap.  This way, we just try\n-     every character.  */\n-  preg->fastmap = 0;\n+  /* Try to allocate space for the fastmap.  */\n+  preg->fastmap = (char *) malloc (1 << BYTEWIDTH);\n \n   if (cflags & REG_ICASE)\n     {\n@@ -5644,6 +5642,19 @@ regcomp (preg, pattern, cflags)\n      unmatched close-group: both are REG_EPAREN.  */\n   if (ret == REG_ERPAREN) ret = REG_EPAREN;\n \n+  if (ret == REG_NOERROR && preg->fastmap)\n+    {\n+      /* Compute the fastmap now, since regexec cannot modify the pattern\n+        buffer.  */\n+      if (re_compile_fastmap (preg) == -2)\n+       {\n+         /* Some error occured while computing the fastmap, just forget\n+            about it.  */\n+         free (preg->fastmap);\n+         preg->fastmap = NULL;\n+       }\n+    }\n+\n   return (int) ret;\n }\n #ifdef _LIBC"}, {"sha": "57a4f1416ced25a04a0b31c8548f48dd13ff43cc", "filename": "gcc/fixinc/gnu-regex.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52c207e293ff4337278208ed3638e3b5be78ae63/gcc%2Ffixinc%2Fgnu-regex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52c207e293ff4337278208ed3638e3b5be78ae63/gcc%2Ffixinc%2Fgnu-regex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Fgnu-regex.h?ref=52c207e293ff4337278208ed3638e3b5be78ae63", "patch": "@@ -36,11 +36,6 @@ extern \"C\" {\n # include <stddef.h>\n #endif\n \n-/* GDB LOCAL: define _REGEX_RE_COMP to get BSD style re_comp and re_exec */\n-#ifndef _REGEX_RE_COMP\n-#define _REGEX_RE_COMP\n-#endif\n-\n /* The following two types have to be signed and unsigned integer type\n    wide enough to hold a value of a pointer.  For most ANSI compilers\n    ptrdiff_t and size_t should be likely OK.  Still size of these two"}, {"sha": "370ac253b2ae853b0f5454c7008d92bdaa36a9d2", "filename": "gcc/fixinc/inclhack.def", "status": "modified", "additions": 2, "deletions": 84, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52c207e293ff4337278208ed3638e3b5be78ae63/gcc%2Ffixinc%2Finclhack.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52c207e293ff4337278208ed3638e3b5be78ae63/gcc%2Ffixinc%2Finclhack.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Finclhack.def?ref=52c207e293ff4337278208ed3638e3b5be78ae63", "patch": "@@ -1253,93 +1253,11 @@ fix = {\n \n /*\n  *  Fix non-ansi machine name defines\n- *  File selection is split into two parts:  the shell version as\n- *  a single patch, and the program version with each patch separate.\n- *  Each is substantially faster for the particular environment.\n- *  You have a dual maintenance problem here.\n  */\n fix = {\n     hackname = machine_name;\n-    /*\n-     *  Select '#if.*' and '#elif\" with possible non-ansi symbols\n-     *  The only non-ansi symbols we know about start with one of:\n-     *     MRS_bhimnprstuv\n-     *  If any are added to the substitution list, then add it to\n-     *  the selection list as well.  Hopefully we can avoid names\n-     *  starting with \"d\" and \"l\", because this pattern would then\n-     *  match \"defined\" and \"lint\" as well.  I suppose we could add\n-     *  a \"bypass = lint\" if we had to though.\n-     *\n-     * The fixinc_eol stuff is to work around a bug in the sed\n-     */\n-    select = \"^#[ \\t]*(if|elif).*\"\n-             \"[^a-zA-Z0-9_](_*[MSRrhim]|[Mbimnpstuv])[a-zA-Z0-9_]\";\n-    exesel = \"^#[ \\t]*(if|elif).*[^a-zA-Z0-9_]\"\n-             \"(\"\n-                  \"M32\"\n-                 \"|_*MIPSE[LB]\"\n-                 \"|_*SYSTYPE_[A-Z0-9]\"\n-                 \"|_*[Rr][34]000\"\n-                 \"|_*host_mips\"\n-                 \"|_*i386\"\n-                 \"|_*mips\"\n-                 \"|bsd4\"\n-                 \"|is68k\"\n-                 \"|m[68]8k\"\n-                 \"|mc680\"\n-                 \"|news\"\n-                 \"|ns32000\"\n-                 \"|pdp11\"\n-                 \"|pyr\"\n-                 \"|sel\"\n-                 \"|sony_news\"\n-                 \"|sparc\"\n-                 \"|sun\"\n-                 \"|tahoe\"\n-                 \"|tower\"\n-                 \"|u370\"\n-                 \"|u3b\"\n-                 \"|unix\"\n-                 \"|vax\"\n-             \")\";\n-\n-    sed =      \":loop\\n\"\n-               '/\\\\\\\\$/'                       \"N\\n\"\n-               's/\\\\\\\\$/\\\\\\\\+++fixinc_eol+++/' \"\\n\"\n-               '/\\\\\\\\$/'                       \"b loop\\n\"\n-               's/\\\\\\\\+++fixinc_eol+++/\\\\\\\\/g' \"\\n\"\n-\n-          \"/#[\\t ]*[el]*if/ {\\n\"\n-                \"\\ts/[a-zA-Z0-9_][a-zA-Z0-9_]*/ & /g\\n\"\n-\n-                \"\\ts/ M32 / __M32__ /g\\n\"\n-                \"\\ts/ _*MIPSE\\\\([LB]\\\\) / __MIPSE\\\\1__ /g\\n\"\n-                \"\\ts/ _*SYSTYPE_\\\\([A-Z0-9]*\\\\) / __SYSTYPE_\\\\1__ /g\\n\"\n-                \"\\ts/ _*\\\\([Rr][34]\\\\)000 / __\\\\1000__ /g\\n\"\n-                \"\\ts/ _*host_mips / __host_mips__ /g\\n\"\n-                \"\\ts/ _*i386 / __i386__ /g\\n\"\n-                \"\\ts/ _*mips / __mips__ /g\\n\"\n-                \"\\ts/ bsd4\\\\([0-9]\\\\) / __bsd4\\\\1__ /g\\n\"\n-                \"\\ts/ is68k / __is68k__ /g\\n\"\n-                \"\\ts/ m68k / __m68k__ /g\\n\"\n-                \"\\ts/ m88k / __m88k__ /g\\n\"\n-                \"\\ts/ mc680\\\\([0-9]\\\\)0 / __mc680\\\\10__ /g\\n\"\n-                \"\\ts/ news\\\\([0-9]*\\\\) / __news\\\\1__ /g\\n\"\n-                \"\\ts/ ns32000 / __ns32000__ /g\\n\"\n-                \"\\ts/ pdp11 / __pdp11__ /g\\n\"\n-                \"\\ts/ pyr / __pyr__ /g\\n\"\n-                \"\\ts/ sel / __sel__ /g\\n\"\n-                \"\\ts/ sony_news / __sony_news__ /g\\n\"\n-                \"\\ts/ sparc / __sparc__ /g\\n\"\n-                \"\\ts/ sun\\\\([a-z0-9]*\\\\) / __sun\\\\1__ /g\\n\"\n-                \"\\ts/ tahoe / __tahoe__ /g\\n\"\n-                \"\\ts/ tower\\\\([_0-9]*\\\\) / __tower\\\\1__ /g\\n\"\n-                \"\\ts/ u370 / __u370__ /g\\n\"\n-                \"\\ts/ u3b\\\\([0-9]*\\\\) / __u3b\\\\1__ /g\\n\"\n-                \"\\ts/ unix / __unix__ /g\\n\"\n-                \"\\ts/ vax / __vax__ /g\\n\"\n-\n-                \"\\ts/ \\\\([a-zA-Z0-9_][a-zA-Z0-9_]*\\\\) /\\\\1/g\\n\\t}\";\n+    c_test   = machine_name;\n+    c_fix    = machine_name;\n };\n \n "}, {"sha": "7de99b6660f1a6a52c3e80636c8030d76ec0eef6", "filename": "gcc/fixinc/inclhack.sh", "status": "modified", "additions": 4, "deletions": 40, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52c207e293ff4337278208ed3638e3b5be78ae63/gcc%2Ffixinc%2Finclhack.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52c207e293ff4337278208ed3638e3b5be78ae63/gcc%2Ffixinc%2Finclhack.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Finclhack.sh?ref=52c207e293ff4337278208ed3638e3b5be78ae63", "patch": "@@ -1995,53 +1995,17 @@ static __inline__ double fake_hypot (x, y)\\\n     #\n     # Fix Machine_Name\n     #\n-    if ( test -n \"`egrep '^#[ \t]*(if|elif).*[^a-zA-Z0-9_](_*[MSRrhim]|[Mbimnpstuv])[a-zA-Z0-9_]' ${file}`\"\n-       ) > /dev/null 2>&1 ; then\n+    if ${FIXTESTS} ${file} machine_name\n+    then\n     fixlist=\"${fixlist}\n       machine_name\"\n     if [ ! -r ${DESTFILE} ]\n     then infile=${file}\n     else infile=${DESTFILE} ; fi \n-\n-    sed -e ':loop\n-/\\\\$/N\n-s/\\\\$/\\\\+++fixinc_eol+++/\n-/\\\\$/b loop\n-s/\\\\+++fixinc_eol+++/\\\\/g\n-/#[\t ]*[el]*if/ {\n-\ts/[a-zA-Z0-9_][a-zA-Z0-9_]*/ & /g\n-\ts/ M32 / __M32__ /g\n-\ts/ _*MIPSE\\([LB]\\) / __MIPSE\\1__ /g\n-\ts/ _*SYSTYPE_\\([A-Z0-9]*\\) / __SYSTYPE_\\1__ /g\n-\ts/ _*\\([Rr][34]\\)000 / __\\1000__ /g\n-\ts/ _*host_mips / __host_mips__ /g\n-\ts/ _*i386 / __i386__ /g\n-\ts/ _*mips / __mips__ /g\n-\ts/ bsd4\\([0-9]\\) / __bsd4\\1__ /g\n-\ts/ is68k / __is68k__ /g\n-\ts/ m68k / __m68k__ /g\n-\ts/ m88k / __m88k__ /g\n-\ts/ mc680\\([0-9]\\)0 / __mc680\\10__ /g\n-\ts/ news\\([0-9]*\\) / __news\\1__ /g\n-\ts/ ns32000 / __ns32000__ /g\n-\ts/ pdp11 / __pdp11__ /g\n-\ts/ pyr / __pyr__ /g\n-\ts/ sel / __sel__ /g\n-\ts/ sony_news / __sony_news__ /g\n-\ts/ sparc / __sparc__ /g\n-\ts/ sun\\([a-z0-9]*\\) / __sun\\1__ /g\n-\ts/ tahoe / __tahoe__ /g\n-\ts/ tower\\([_0-9]*\\) / __tower\\1__ /g\n-\ts/ u370 / __u370__ /g\n-\ts/ u3b\\([0-9]*\\) / __u3b\\1__ /g\n-\ts/ unix / __unix__ /g\n-\ts/ vax / __vax__ /g\n-\ts/ \\([a-zA-Z0-9_][a-zA-Z0-9_]*\\) /\\1/g\n-\t}' \\\n-          < $infile > ${DESTDIR}/fixinc.tmp\n+    ${FIXFIXES} ${file} machine_name < $infile > ${DESTDIR}/fixinc.tmp\n     rm -f ${DESTFILE}\n     mv -f ${DESTDIR}/fixinc.tmp ${DESTFILE}\n-    fi # end of select 'if'\n+    fi # end of c_test 'if'\n \n \n     #"}, {"sha": "6ad53f01c278ec4b6764d31da9e041a0afcac3a1", "filename": "gcc/gcc.c", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52c207e293ff4337278208ed3638e3b5be78ae63/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52c207e293ff4337278208ed3638e3b5be78ae63/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=52c207e293ff4337278208ed3638e3b5be78ae63", "patch": "@@ -4263,7 +4263,12 @@ do_spec_1 (spec, inswitch, soft_matched_part)\n \t      char *y;\n \n \t      /* Copy all of CPP_PREDEFINES into BUF,\n-\t\t but put __ after every -D and at the end of each arg.  */\n+\t\t but force them all into the reserved name space if they\t\t\t aren't already there.  The reserved name space is all\n+\t\t identifiers beginning with two underscores or with one\n+\t\t underscore and a capital letter.  We do the forcing by\n+\t\t adding up to two underscores to the beginning and end\n+\t\t of each symbol. e.g. mips, _mips, mips_, and _mips_ all\n+\t\t become __mips__.  */\n \t      y = cpp_predefines;\n \t      while (*y != 0)\n \t\t{\n@@ -4279,7 +4284,8 @@ do_spec_1 (spec, inswitch, soft_matched_part)\n \t\t\t      && ! ISUPPER ((unsigned char)*(y+1))))\n \t\t        {\n \t\t\t  /* Stick __ at front of macro name.  */\n-\t\t\t  *x++ = '_';\n+\t\t\t  if (*y != '_')\n+\t\t\t    *x++ = '_';\n \t\t\t  *x++ = '_';\n \t\t\t  /* Arrange to stick __ at the end as well.  */\n \t\t\t  flag = 1;\n@@ -4291,8 +4297,12 @@ do_spec_1 (spec, inswitch, soft_matched_part)\n \n \t\t      if (flag)\n \t\t        {\n-\t\t\t  *x++ = '_';\n-\t\t\t  *x++ = '_';\n+\t\t\t  if (x[-1] != '_')\n+\t\t\t    {\n+\t\t\t      if (x[-2] != '_')\n+\t\t\t\t*x++ = '_';\n+\t\t\t      *x++ = '_';\n+\t\t\t    }\n \t\t\t}\n \n \t\t      /* Copy the value given, if any.  */\n@@ -4324,7 +4334,8 @@ do_spec_1 (spec, inswitch, soft_matched_part)\n \t\t\t  /* Stick -D__ at front of macro name.  */\n \t\t\t  *x++ = '-';\n \t\t\t  *x++ = 'D';\n-\t\t\t  *x++ = '_';\n+\t\t\t  if (*y != '_')\n+\t\t\t    *x++ = '_';\n \t\t\t  *x++ = '_';\n \n \t\t\t  /* Copy the macro name.  */"}]}