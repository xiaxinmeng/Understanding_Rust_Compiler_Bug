{"sha": "93dd7f36f2066ec52137178ee52052f293e5e743", "node_id": "C_kwDOANBUbNoAKDkzZGQ3ZjM2ZjIwNjZlYzUyMTM3MTc4ZWU1MjA1MmYyOTNlNWU3NDM", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-04-21T16:11:01Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-04-21T16:11:01Z"}, "message": "libstdc++: Avoid ASCII assumptions in floating_from_chars.cc\n\nIn starts_with_ci and in __floating_from_chars_hex's inf/nan handling,\nwe were assuming that the letters are contiguous and that 'A' + 32 == 'a'\nwhich is true for ASCII but not for other character encodings.\n\nThis patch fixes starts_with_ci by using a constexpr lookup table that\nmaps uppercase letters to lowercase, and fixes __floating_from_chars_hex\nby using __from_chars_alnum_to_val.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/charconv (__from_chars_alnum_to_val_table):\n\tSimplify initialization of __lower/__upper_letters.\n\t(__from_chars_alnum_to_val): Default the template parameter to\n\tfalse.\n\t* src/c++17/floating_from_chars.cc (starts_with_ci): Don't\n\tassume the uppercase and lowercase letters are contiguous.\n\t(__floating_from_chars_hex): Likewise.", "tree": {"sha": "391af3af100b83dfca4c6b38fdb1d3d1f39befda", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/391af3af100b83dfca4c6b38fdb1d3d1f39befda"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/93dd7f36f2066ec52137178ee52052f293e5e743", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93dd7f36f2066ec52137178ee52052f293e5e743", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93dd7f36f2066ec52137178ee52052f293e5e743", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93dd7f36f2066ec52137178ee52052f293e5e743/comments", "author": null, "committer": null, "parents": [{"sha": "605a80bb733b225e5e53db0f0298374213cdcd95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/605a80bb733b225e5e53db0f0298374213cdcd95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/605a80bb733b225e5e53db0f0298374213cdcd95"}], "stats": {"total": 45, "additions": 28, "deletions": 17}, "files": [{"sha": "218813e4797f3a02de57e41f2bea462d855beec9", "filename": "libstdc++-v3/include/std/charconv", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93dd7f36f2066ec52137178ee52052f293e5e743/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcharconv", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93dd7f36f2066ec52137178ee52052f293e5e743/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcharconv", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcharconv?ref=93dd7f36f2066ec52137178ee52052f293e5e743", "patch": "@@ -412,14 +412,8 @@ namespace __detail\n   constexpr auto\n   __from_chars_alnum_to_val_table()\n   {\n-    constexpr unsigned char __lower_letters[]\n-      = { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',\n-\t  'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',\n-\t  'u', 'v', 'w', 'x', 'y', 'z' };\n-    constexpr unsigned char __upper_letters[]\n-      = { 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J',\n-\t  'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T',\n-\t  'U', 'V', 'W', 'X', 'Y', 'Z' };\n+    constexpr unsigned char __lower_letters[27] = \"abcdefghijklmnopqrstuvwxyz\";\n+    constexpr unsigned char __upper_letters[27] = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n     struct { unsigned char __data[1u << __CHAR_BIT__] = {}; } __table;\n     for (auto& __entry : __table.__data)\n       __entry = 127;\n@@ -437,7 +431,7 @@ namespace __detail\n   // return its corresponding base-10 value, otherwise return a value >= 127.\n   // If _DecOnly is false: if the character is an alphanumeric digit, then\n   // return its corresponding base-36 value, otherwise return a value >= 127.\n-  template<bool _DecOnly>\n+  template<bool _DecOnly = false>\n     unsigned char\n     __from_chars_alnum_to_val(unsigned char __c)\n     {"}, {"sha": "13de1e346abb2677d3c18c9502ef603898056e3c", "filename": "libstdc++-v3/src/c++17/floating_from_chars.cc", "status": "modified", "additions": 25, "deletions": 8, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93dd7f36f2066ec52137178ee52052f293e5e743/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffloating_from_chars.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93dd7f36f2066ec52137178ee52052f293e5e743/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffloating_from_chars.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffloating_from_chars.cc?ref=93dd7f36f2066ec52137178ee52052f293e5e743", "patch": "@@ -30,6 +30,7 @@\n // Prefer to use std::pmr::string if possible, which requires the cxx11 ABI.\n #define _GLIBCXX_USE_CXX11_ABI 1\n \n+#include <array>\n #include <charconv>\n #include <bit>\n #include <string>\n@@ -451,15 +452,33 @@ namespace\n \n #if _GLIBCXX_FLOAT_IS_IEEE_BINARY32 && _GLIBCXX_DOUBLE_IS_IEEE_BINARY64\n   // Return true iff [FIRST,LAST) begins with PREFIX, ignoring case.\n+  // PREFIX is assumed to not contain any uppercase letters.\n   bool\n   starts_with_ci(const char* first, const char* last, string_view prefix)\n   {\n     __glibcxx_requires_valid_range(first, last);\n \n-    for (char ch : prefix)\n+    // A lookup table that maps uppercase letters to lowercase and\n+    // is otherwise the identity mapping.\n+    static constexpr auto upper_to_lower_table = [] {\n+      constexpr unsigned char lower_letters[27] = \"abcdefghijklmnopqrstuvwxyz\";\n+      constexpr unsigned char upper_letters[27] = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n+      std::array<unsigned char, (1u << __CHAR_BIT__)> table = {};\n+      for (unsigned i = 0; i < table.size(); ++i)\n+\ttable[i] = i;\n+      for (unsigned i = 0; i < 26; ++i)\n+\ttable[upper_letters[i]] = lower_letters[i];\n+      return table;\n+    }();\n+\n+    if (last - first < static_cast<ptrdiff_t>(prefix.length()))\n+      return false;\n+\n+    for (const unsigned char pch : prefix)\n       {\n-\t__glibcxx_assert(ch >= 'a' && ch <= 'z');\n-\tif (first == last || (*first != ch && *first != ch - 32))\n+\t// __glibcxx_assert(pch == upper_to_lower_table[pch]);\n+\tconst unsigned char ch = *first;\n+\tif (ch != pch && upper_to_lower_table[ch] != pch)\n \t  return false;\n \t++first;\n       }\n@@ -535,10 +554,8 @@ namespace\n \t\t\t  ++first;\n \t\t\t  break;\n \t\t\t}\n-\t\t      else if ((ch >= '0' && ch <= '9')\n-\t\t\t       || (ch >= 'a' && ch <= 'z')\n-\t\t\t       || (ch >= 'A' && ch <= 'Z')\n-\t\t\t       || ch == '_')\n+\t\t      else if (ch == '_'\n+\t\t\t       || __detail::__from_chars_alnum_to_val(ch) < 127)\n \t\t\tcontinue;\n \t\t      else\n \t\t\t{\n@@ -599,7 +616,7 @@ namespace\n \t    continue;\n \t  }\n \n-\tint hexit = __detail::__from_chars_alnum_to_val<false>(ch);\n+\tint hexit = __detail::__from_chars_alnum_to_val(ch);\n \tif (hexit >= 16)\n \t  break;\n \tseen_hexit = true;"}]}