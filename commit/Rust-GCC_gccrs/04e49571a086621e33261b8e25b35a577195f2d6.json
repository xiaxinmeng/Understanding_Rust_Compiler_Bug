{"sha": "04e49571a086621e33261b8e25b35a577195f2d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDRlNDk1NzFhMDg2NjIxZTMzMjYxYjhlMjViMzVhNTc3MTk1ZjJkNg==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2015-09-09T05:56:26Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2015-09-09T05:56:26Z"}, "message": "Fix PowerPC ICE due to secondary_reload ignoring reload replacements\n\nThe reason for this PR is that insns emitted by secondary reload\npatterns are being generated without taking into account other reloads\nthat may have occurred.  We run into this problem when an insn has a\npseudo that doesn't get a hard reg, and the pseudo is used in a way\nthat requires a secondary reload.  In this case the secondary reload\nis needed due to gcc generating a 64-bit gpr load from memory insn\nwith an address offset not a multiple of 4.\n\n\tPR target/67378\n\t* config/rs6000/rs6000.c (rs6000_secondary_reload_gpr): Find\n\treload replacement for PRE_MODIFY address reg.\n\nFrom-SVN: r227573", "tree": {"sha": "486c315e02a987f8585cd2f7bd62d8f8f61f5ff8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/486c315e02a987f8585cd2f7bd62d8f8f61f5ff8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04e49571a086621e33261b8e25b35a577195f2d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04e49571a086621e33261b8e25b35a577195f2d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04e49571a086621e33261b8e25b35a577195f2d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04e49571a086621e33261b8e25b35a577195f2d6/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6b3ebcdda18d2b6b0e2bf3857726ab02fbac5ad4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b3ebcdda18d2b6b0e2bf3857726ab02fbac5ad4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b3ebcdda18d2b6b0e2bf3857726ab02fbac5ad4"}], "stats": {"total": 21, "additions": 20, "deletions": 1}, "files": [{"sha": "542abcfe0eccf7287bff50c9968edea281b268b3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04e49571a086621e33261b8e25b35a577195f2d6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04e49571a086621e33261b8e25b35a577195f2d6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=04e49571a086621e33261b8e25b35a577195f2d6", "patch": "@@ -1,3 +1,9 @@\n+2015-09-09  Alan Modra  <amodra@gmail.com>\n+\n+\tPR target/67378\n+\t* config/rs6000/rs6000.c (rs6000_secondary_reload_gpr): Find\n+\treload replacement for PRE_MODIFY address reg.\n+\n 2015-09-09  Sebastian Pop  <s.pop@samsung.com>\n \n \tPR tree-optimization/53852"}, {"sha": "941592af7447fc1b348014c359b8c411f0833f14", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04e49571a086621e33261b8e25b35a577195f2d6/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04e49571a086621e33261b8e25b35a577195f2d6/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=04e49571a086621e33261b8e25b35a577195f2d6", "patch": "@@ -18198,8 +18198,21 @@ rs6000_secondary_reload_gpr (rtx reg, rtx mem, rtx scratch, bool store_p)\n \n   if (GET_CODE (addr) == PRE_MODIFY)\n     {\n+      gcc_assert (REG_P (XEXP (addr, 0))\n+\t\t  && GET_CODE (XEXP (addr, 1)) == PLUS\n+\t\t  && XEXP (XEXP (addr, 1), 0) == XEXP (addr, 0));\n       scratch_or_premodify = XEXP (addr, 0);\n-      gcc_assert (REG_P (scratch_or_premodify));\n+      if (!HARD_REGISTER_P (scratch_or_premodify))\n+\t/* If we have a pseudo here then reload will have arranged\n+\t   to have it replaced, but only in the original insn.\n+\t   Use the replacement here too.  */\n+\tscratch_or_premodify = find_replacement (&XEXP (addr, 0));\n+\n+      /* RTL emitted by rs6000_secondary_reload_gpr uses RTL\n+\t expressions from the original insn, without unsharing them.\n+\t Any RTL that points into the original insn will of course\n+\t have register replacements applied.  That is why we don't\n+\t need to look for replacements under the PLUS.  */\n       addr = XEXP (addr, 1);\n     }\n   gcc_assert (GET_CODE (addr) == PLUS || GET_CODE (addr) == LO_SUM);"}]}