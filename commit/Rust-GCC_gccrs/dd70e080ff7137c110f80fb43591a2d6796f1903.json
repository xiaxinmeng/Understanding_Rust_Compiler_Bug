{"sha": "dd70e080ff7137c110f80fb43591a2d6796f1903", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGQ3MGUwODBmZjcxMzdjMTEwZjgwZmI0MzU5MWEyZDY3OTZmMTkwMw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-06-20T14:40:01Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-06-20T14:40:01Z"}, "message": "re PR c++/37089 ([C++0x] rvalue/lvalue reference collapsing not performed in error ouput thus printing \"&&&\")\n\n\tPR c++/37089\n\t* cp-demangle.c (d_print_comp): Handle reference smashing.\n\nFrom-SVN: r175213", "tree": {"sha": "697a295231adf84782c86185e8235044100d0c41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/697a295231adf84782c86185e8235044100d0c41"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd70e080ff7137c110f80fb43591a2d6796f1903", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd70e080ff7137c110f80fb43591a2d6796f1903", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd70e080ff7137c110f80fb43591a2d6796f1903", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd70e080ff7137c110f80fb43591a2d6796f1903/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d84572a4009158fe24931e2f8d8a7aa496d8a570", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d84572a4009158fe24931e2f8d8a7aa496d8a570", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d84572a4009158fe24931e2f8d8a7aa496d8a570"}], "stats": {"total": 45, "additions": 41, "deletions": 4}, "files": [{"sha": "7453b09ed0bd6ca9394833ff6fb730e14f4186fe", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd70e080ff7137c110f80fb43591a2d6796f1903/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd70e080ff7137c110f80fb43591a2d6796f1903/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=dd70e080ff7137c110f80fb43591a2d6796f1903", "patch": "@@ -1,3 +1,9 @@\n+2011-06-20  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/37089\n+\t* cp-demangle.c (d_print_comp): Handle reference smashing.\n+\t* testsuite/demangle-expected: Test it.\n+\n 2011-06-13  Jan Kratochvil  <jan.kratochvil@redhat.com>\n \n \t* cp-demangle.c (d_print_comp) <DEMANGLE_COMPONENT_FUNCTION_TYPE>:"}, {"sha": "d664e5f29badfee5d63b85c9503b7d084b7896c2", "filename": "libiberty/cp-demangle.c", "status": "modified", "additions": 31, "deletions": 3, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd70e080ff7137c110f80fb43591a2d6796f1903/libiberty%2Fcp-demangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd70e080ff7137c110f80fb43591a2d6796f1903/libiberty%2Fcp-demangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcp-demangle.c?ref=dd70e080ff7137c110f80fb43591a2d6796f1903", "patch": "@@ -3554,6 +3554,10 @@ static void\n d_print_comp (struct d_print_info *dpi, int options,\n               const struct demangle_component *dc)\n {\n+  /* Magic variable to let reference smashing skip over the next modifier\n+     without needing to modify *dc.  */\n+  const struct demangle_component *mod_inner = NULL;\n+\n   if (dc == NULL)\n     {\n       d_print_error (dpi);\n@@ -3869,16 +3873,37 @@ d_print_comp (struct d_print_info *dpi, int options,\n \t      }\n \t  }\n       }\n+      goto modifier;\n+\n+    case DEMANGLE_COMPONENT_REFERENCE:\n+    case DEMANGLE_COMPONENT_RVALUE_REFERENCE:\n+      {\n+\t/* Handle reference smashing: & + && = &.  */\n+\tconst struct demangle_component *sub = d_left (dc);\n+\tif (sub->type == DEMANGLE_COMPONENT_TEMPLATE_PARAM)\n+\t  {\n+\t    struct demangle_component *a = d_lookup_template_argument (dpi, sub);\n+\t    if (a && a->type == DEMANGLE_COMPONENT_TEMPLATE_ARGLIST)\n+\t      a = d_index_template_argument (a, dpi->pack_index);\n+\t    sub = a;\n+\t  }\n+\n+\tif (sub->type == DEMANGLE_COMPONENT_REFERENCE\n+\t    || sub->type == dc->type)\n+\t  dc = sub;\n+\telse if (sub->type == DEMANGLE_COMPONENT_RVALUE_REFERENCE)\n+\t  mod_inner = d_left (sub);\n+      }\n       /* Fall through.  */\n+\n     case DEMANGLE_COMPONENT_RESTRICT_THIS:\n     case DEMANGLE_COMPONENT_VOLATILE_THIS:\n     case DEMANGLE_COMPONENT_CONST_THIS:\n     case DEMANGLE_COMPONENT_VENDOR_TYPE_QUAL:\n     case DEMANGLE_COMPONENT_POINTER:\n-    case DEMANGLE_COMPONENT_REFERENCE:\n-    case DEMANGLE_COMPONENT_RVALUE_REFERENCE:\n     case DEMANGLE_COMPONENT_COMPLEX:\n     case DEMANGLE_COMPONENT_IMAGINARY:\n+    modifier:\n       {\n \t/* We keep a list of modifiers on the stack.  */\n \tstruct d_print_mod dpm;\n@@ -3889,7 +3914,10 @@ d_print_comp (struct d_print_info *dpi, int options,\n \tdpm.printed = 0;\n \tdpm.templates = dpi->templates;\n \n-\td_print_comp (dpi, options, d_left (dc));\n+\tif (!mod_inner)\n+\t  mod_inner = d_left (dc);\n+\n+\td_print_comp (dpi, options, mod_inner);\n \n \t/* If the modifier didn't get printed by the type, print it\n \t   now.  */"}, {"sha": "bbd418c8b9e22d7e0aca385a8544949b3cec6305", "filename": "libiberty/testsuite/demangle-expected", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd70e080ff7137c110f80fb43591a2d6796f1903/libiberty%2Ftestsuite%2Fdemangle-expected", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd70e080ff7137c110f80fb43591a2d6796f1903/libiberty%2Ftestsuite%2Fdemangle-expected", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ftestsuite%2Fdemangle-expected?ref=dd70e080ff7137c110f80fb43591a2d6796f1903", "patch": "@@ -3957,6 +3957,9 @@ decltype (({parm#1}.(operator-))()) h<A>(A)\n _Z1fDn\n f(decltype(nullptr))\n --format=gnu-v3\n+_Z1fIRiEvOT_b\n+void f<int&>(int&, bool)\n+--format=gnu-v3\n _ZN5aaaaa6bbbbbb5cccccIN23ddddddddddddddddddddddd3eeeENS2_4ffff16ggggggggggggggggENS0_9hhhhhhhhhES6_S6_S6_S6_S6_S6_S6_EE\n aaaaa::bbbbbb::ccccc<ddddddddddddddddddddddd::eee, ddddddddddddddddddddddd::ffff::gggggggggggggggg, aaaaa::bbbbbb::hhhhhhhhh, aaaaa::bbbbbb::hhhhhhhhh, aaaaa::bbbbbb::hhhhhhhhh, aaaaa::bbbbbb::hhhhhhhhh, aaaaa::bbbbbb::hhhhhhhhh, aaaaa::bbbbbb::hhhhhhhhh, aaaaa::bbbbbb::hhhhhhhhh, aaaaa::bbbbbb::hhhhhhhhh>\n --format=gnu-v3\n@@ -4118,4 +4121,4 @@ DFA\n # http://sourceware.org/bugzilla/show_bug.cgi?id=11572\n --format=auto\n _ZN3Psi7VariantIIcPKcEE5visitIIRZN11VariantTest9TestVisit11test_methodEvEUlS2_E0_RZNS6_11test_methodEvEUlcE1_RZNS6_11test_methodEvEUlNS_4NoneEE_EEENS_13VariantDetail19SelectVisitorResultIIDpT_EE4typeEDpOSG_\n-Psi::VariantDetail::SelectVisitorResult<VariantTest::TestVisit::test_method()::{lambda(char const*)#2}&, VariantTest::TestVisit::test_method()::{lambda(char)#3}&, VariantTest::TestVisit::test_method()::{lambda(Psi::None)#1}&>::type Psi::Variant<char, char const*>::visit<VariantTest::TestVisit::test_method()::{lambda(char const*)#2}&, VariantTest::TestVisit::test_method()::{lambda(char)#3}&, VariantTest::TestVisit::test_method()::{lambda(Psi::None)#1}&>((VariantTest::TestVisit::test_method()::{lambda(Psi::None)#1}&&&)...)\n+Psi::VariantDetail::SelectVisitorResult<VariantTest::TestVisit::test_method()::{lambda(char const*)#2}&, VariantTest::TestVisit::test_method()::{lambda(char)#3}&, VariantTest::TestVisit::test_method()::{lambda(Psi::None)#1}&>::type Psi::Variant<char, char const*>::visit<VariantTest::TestVisit::test_method()::{lambda(char const*)#2}&, VariantTest::TestVisit::test_method()::{lambda(char)#3}&, VariantTest::TestVisit::test_method()::{lambda(Psi::None)#1}&>((VariantTest::TestVisit::test_method()::{lambda(Psi::None)#1}&)...)"}]}