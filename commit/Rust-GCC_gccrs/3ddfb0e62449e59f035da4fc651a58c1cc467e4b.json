{"sha": "3ddfb0e62449e59f035da4fc651a58c1cc467e4b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2RkZmIwZTYyNDQ5ZTU5ZjAzNWRhNGZjNjUxYTU4YzFjYzQ2N2U0Yg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@markmitchell.com", "date": "1998-09-22T11:58:41Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1998-09-22T11:58:41Z"}, "message": "decl.c (grokfndecl): Improve error-recovery.\n\n\t* decl.c (grokfndecl): Improve error-recovery.\n\t* decl2.c (grokfield): Likewise.\n\t* pt.c (finish_member_template_decl): Likewise.\n\nFrom-SVN: r22549", "tree": {"sha": "ad09fd54f0a5d9d938dd37d62c9eba117dbaef98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad09fd54f0a5d9d938dd37d62c9eba117dbaef98"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ddfb0e62449e59f035da4fc651a58c1cc467e4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ddfb0e62449e59f035da4fc651a58c1cc467e4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ddfb0e62449e59f035da4fc651a58c1cc467e4b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ddfb0e62449e59f035da4fc651a58c1cc467e4b/comments", "author": null, "committer": null, "parents": [{"sha": "a105e36f8cf5a403da2def2712cf85c476a975b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a105e36f8cf5a403da2def2712cf85c476a975b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a105e36f8cf5a403da2def2712cf85c476a975b6"}], "stats": {"total": 33, "additions": 24, "deletions": 9}, "files": [{"sha": "360dcb088d07ae259f6057a6c5259e81f4306144", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ddfb0e62449e59f035da4fc651a58c1cc467e4b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ddfb0e62449e59f035da4fc651a58c1cc467e4b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3ddfb0e62449e59f035da4fc651a58c1cc467e4b", "patch": "@@ -1,3 +1,9 @@\n+1998-09-22  Mark Mitchell  <mark@markmitchell.com>\n+\n+\t* decl.c (grokfndecl): Improve error-recovery.\n+\t* decl2.c (grokfield): Likewise.\n+\t* pt.c (finish_member_template_decl): Likewise.\n+\n 1998-09-20  Martin von L\ufffdwis  <loewis@informatik.hu-berlin.de>\n \n \t* method.c (hack_identifier): Finding multiple members is always"}, {"sha": "17078e0ae7c8d46e362a8ee33c0c4d9a886edf36", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ddfb0e62449e59f035da4fc651a58c1cc467e4b/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ddfb0e62449e59f035da4fc651a58c1cc467e4b/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=3ddfb0e62449e59f035da4fc651a58c1cc467e4b", "patch": "@@ -7866,7 +7866,10 @@ bad_specifiers (object, type, virtualp, quals, inlinep, friendp, raises)\n    or `volatile'.\n    RAISES is a list of exceptions that this function can raise.\n    CHECK is 1 if we must find this method in CTYPE, 0 if we should\n-   not look, and -1 if we should not call `grokclassfn' at all.  */\n+   not look, and -1 if we should not call `grokclassfn' at all.  \n+\n+   Returns `error_mark_node' if something goes wrong, after issuing\n+   applicable error messages.  */\n \n static tree\n grokfndecl (ctype, type, declarator, orig_declarator, virtualp, flags, quals,\n@@ -8046,7 +8049,7 @@ grokfndecl (ctype, type, declarator, orig_declarator, virtualp, flags, quals,\n \t    return tmp;\n \t}\n       if (! grok_ctor_properties (ctype, decl))\n-\treturn NULL_TREE;\n+\treturn error_mark_node;\n \n       if (check == 0 && ! current_function_decl)\n \t{\n@@ -10342,8 +10345,8 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \t\t\t       virtualp, flags, quals, raises, attrlist,\n \t\t\t       friendp ? -1 : 0, friendp, publicp, inlinep,\n \t\t\t       funcdef_flag, template_count, in_namespace);\n-\t    if (decl == NULL_TREE)\n-\t      return NULL_TREE;\n+\t    if (decl == NULL_TREE || decl == error_mark_node)\n+\t      return decl;\n #if 0\n \t    /* This clobbers the attrs stored in `decl' from `attrlist'.  */\n \t    /* The decl and setting of decl_machine_attr is also turned off.  */"}, {"sha": "9d9e7ad623e5cb96a40b2eaee4dbaee98378c31b", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ddfb0e62449e59f035da4fc651a58c1cc467e4b/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ddfb0e62449e59f035da4fc651a58c1cc467e4b/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=3ddfb0e62449e59f035da4fc651a58c1cc467e4b", "patch": "@@ -1607,7 +1607,8 @@ grokfield (declarator, declspecs, init, asmspec_tree, attrlist)\n \n   value = grokdeclarator (declarator, declspecs, FIELD, init != 0, NULL_TREE);\n   if (! value || value == error_mark_node)\n-    return NULL_TREE; /* friend or constructor went bad.  */\n+    /* friend or constructor went bad.  */\n+    return value;\n \n   /* Pass friendly classes back.  */\n   if (TREE_CODE (value) == VOID_TYPE)"}, {"sha": "47cb0c34ec8fa8b5b125ac5dfa87afa409a47fd3", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ddfb0e62449e59f035da4fc651a58c1cc467e4b/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ddfb0e62449e59f035da4fc651a58c1cc467e4b/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=3ddfb0e62449e59f035da4fc651a58c1cc467e4b", "patch": "@@ -204,6 +204,10 @@ finish_member_template_decl (template_parameters, decl)\n \n   if (decl == NULL_TREE || decl == void_type_node)\n     return NULL_TREE;\n+  else if (decl == error_mark_node)\n+    /* By returning NULL_TREE, the parser will just ignore this\n+       declaration.  We have already issued the error.  */\n+    return NULL_TREE;\n   else if (TREE_CODE (decl) == TREE_LIST)\n     {\n       /* Assume that the class is the only declspec.  */\n@@ -229,7 +233,6 @@ finish_member_template_decl (template_parameters, decl)\n     } \n   else\n     cp_error (\"invalid member template declaration `%D'\", decl);\n-\t\n \n   return error_mark_node;\n }\n@@ -584,6 +587,7 @@ void\n check_specialization_scope ()\n {\n   tree scope = current_scope ();\n+\n   /* [temp.expl.spec] \n      \n      An explicit specialization shall be declared in the namespace of\n@@ -596,6 +600,7 @@ check_specialization_scope ()\n   if (scope && TREE_CODE (scope) != NAMESPACE_DECL)\n     cp_error (\"explicit specialization in non-namespace scope `%D'\",\n \t      scope);\n+\n   /* [temp.expl.spec] \n \n      In an explicit specialization declaration for a member of a class"}, {"sha": "468340f7b647ef66015addaec4fa6cfc0559e7e3", "filename": "gcc/testsuite/g++.old-deja/g++.other/friend4.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ddfb0e62449e59f035da4fc651a58c1cc467e4b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Ffriend4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ddfb0e62449e59f035da4fc651a58c1cc467e4b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Ffriend4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Ffriend4.C?ref=3ddfb0e62449e59f035da4fc651a58c1cc467e4b", "patch": "@@ -11,11 +11,11 @@\n template <class A, class B> void foo();\n template <class C> class bar {\n   int i;\n-  template <class B> friend void foo<C,B>();\n+  template <class B> friend void foo<C,B>(); // ERROR - bogus declaration\n };\n template <class A, class B> void foo() {\n-  bar<A> baz; baz.i = 1;\n-  bar<int> buz; buz.i = 1; // ERROR - foo<void,void> cannot access bar<int>::i - XFAIL *-*-*\n+  bar<A> baz; baz.i = 1;   // ERROR - foo cannot access bar<int>::i\n+  bar<int> buz; buz.i = 1; // ERROR - foo cannot access bar<int>::i\n }\n int main() {\n   foo<void,void>();"}]}