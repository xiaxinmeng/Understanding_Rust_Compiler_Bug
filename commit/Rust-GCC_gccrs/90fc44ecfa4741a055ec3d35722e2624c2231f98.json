{"sha": "90fc44ecfa4741a055ec3d35722e2624c2231f98", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTBmYzQ0ZWNmYTQ3NDFhMDU1ZWMzZDM1NzIyZTI2MjRjMjIzMWY5OA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-07-04T08:07:23Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-07-04T08:07:23Z"}, "message": "Optimize std::rotl and std::rotr, add test for std::popcount\n\n\t* include/std/bit (__rotl, __rotr): Avoid branch.\n\t(_If_is_unsigned_integer): Use remove_cv_t.\n\t* testsuite/26_numerics/bit/bitops.count/popcount.cc: New.\n\nFrom-SVN: r262378", "tree": {"sha": "fd397e0cb3a87ce87d0e8d28b2e2e5a46427262d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd397e0cb3a87ce87d0e8d28b2e2e5a46427262d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/90fc44ecfa4741a055ec3d35722e2624c2231f98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90fc44ecfa4741a055ec3d35722e2624c2231f98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90fc44ecfa4741a055ec3d35722e2624c2231f98", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90fc44ecfa4741a055ec3d35722e2624c2231f98/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e38deee4659d87d57e54a869d546dc01cf733cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e38deee4659d87d57e54a869d546dc01cf733cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e38deee4659d87d57e54a869d546dc01cf733cc"}], "stats": {"total": 124, "additions": 117, "deletions": 7}, "files": [{"sha": "e3211bc819ffd02a343b589ddb62c38dd545ed08", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90fc44ecfa4741a055ec3d35722e2624c2231f98/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90fc44ecfa4741a055ec3d35722e2624c2231f98/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=90fc44ecfa4741a055ec3d35722e2624c2231f98", "patch": "@@ -1,3 +1,9 @@\n+2018-07-04  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/bit (__rotl, __rotr): Avoid branch.\n+\t(_If_is_unsigned_integer): Use remove_cv_t.\n+\t* testsuite/26_numerics/bit/bitops.count/popcount.cc: New.\n+\n 2018-07-03  Jonathan Wakely  <jwakely@redhat.com>\n \n \tP0556R3 Integral power-of-2 operations, P0553R2 Bit operations"}, {"sha": "ace889540307366ba953c654ab978bca8be2fb3e", "filename": "libstdc++-v3/include/std/bit", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90fc44ecfa4741a055ec3d35722e2624c2231f98/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbit", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90fc44ecfa4741a055ec3d35722e2624c2231f98/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbit", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbit?ref=90fc44ecfa4741a055ec3d35722e2624c2231f98", "patch": "@@ -46,9 +46,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       constexpr auto _Nd = numeric_limits<_Tp>::digits;\n       const unsigned __sN = __s % _Nd;\n-      if (__sN)\n-        return (__x << __sN) | (__x >> (_Nd - __sN));\n-      return __x;\n+      return (__x << __sN) | (__x >> ((-__sN) % _Nd));\n     }\n \n   template<typename _Tp>\n@@ -57,9 +55,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       constexpr auto _Nd = numeric_limits<_Tp>::digits;\n       const unsigned __sN = __s % _Nd;\n-      if (__sN)\n-        return (__x >> __sN) | (__x << (_Nd - __sN));\n-      return __x;\n+      return (__x >> __sN) | (__x << ((-__sN) % _Nd));\n     }\n \n   template<typename _Tp>\n@@ -237,7 +233,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _Tp, typename _Up = _Tp>\n     using _If_is_unsigned_integer\n-      = typename _If_is_unsigned_integer_type<_Tp, _Up>::type;\n+      = typename _If_is_unsigned_integer_type<remove_cv_t<_Tp>, _Up>::type;\n \n #if ! __STRICT_ANSI__\n   // [bitops.rot], rotating"}, {"sha": "2982cb19bbedcd877acdb5bf9c527eef9e86908b", "filename": "libstdc++-v3/testsuite/26_numerics/bit/bitops.count/popcount.cc", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90fc44ecfa4741a055ec3d35722e2624c2231f98/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbitops.count%2Fpopcount.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90fc44ecfa4741a055ec3d35722e2624c2231f98/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbitops.count%2Fpopcount.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbitops.count%2Fpopcount.cc?ref=90fc44ecfa4741a055ec3d35722e2624c2231f98", "patch": "@@ -0,0 +1,108 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++11 } }\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <bit>\n+\n+template<typename UInt>\n+constexpr auto\n+test(UInt x)\n+-> decltype(std::popcount(x))\n+{\n+  static_assert( noexcept(std::popcount(x)) );\n+\n+  constexpr unsigned digits = std::numeric_limits<UInt>::digits;\n+\n+  static_assert( std::popcount((UInt)0) == 0 );\n+  static_assert( std::popcount((UInt)-1) == digits );\n+  static_assert( std::popcount((UInt)-2) == digits - 1 );\n+  static_assert( std::popcount((UInt)127) == 7 );\n+\n+  static_assert( std::popcount((UInt)1) == 1 );\n+  static_assert( std::popcount((UInt)2) == 1 );\n+  static_assert( std::popcount((UInt)0x70) == 3 );\n+\n+  if constexpr (std::numeric_limits<UInt>::digits > 8)\n+  {\n+    static_assert( std::popcount((UInt)(0x101)) == 2 );\n+    static_assert( std::popcount((UInt)(0xfff)) == 12 );\n+  }\n+\n+  if constexpr (std::numeric_limits<UInt>::digits > 64)\n+  {\n+    static_assert( std::popcount((UInt)0xffffffffffffffff) == 64 );\n+    static_assert( std::popcount(0x5555555555555555 | ((UInt)1 << 64)) == 33 );\n+    static_assert( std::popcount(0x5555555555555555 | ((UInt)3 << 64)) == 34 );\n+  }\n+\n+  return true;\n+}\n+\n+static_assert( test( (unsigned char)0 ) );\n+static_assert( test( (unsigned short)0 ) );\n+static_assert( test( (unsigned int)0 ) );\n+static_assert( test( (unsigned long)0 ) );\n+static_assert( test( (unsigned long long)0 ) );\n+\n+// std::popcount(T) shall not participate in overload resolution\n+// unless T is an unsigned integer type.\n+struct X { constexpr bool did_not_match() { return true; } };\n+constexpr X test(...) { return X{}; }\n+static_assert( test( (bool)0 ).did_not_match() );\n+static_assert( test( (char)0 ).did_not_match() );\n+static_assert( test( (int)0 ).did_not_match() );\n+static_assert( test( (char16_t)0 ).did_not_match() );\n+static_assert( test( (float)0 ).did_not_match() );\n+static_assert( test( (void*)0 ).did_not_match() );\n+static_assert( test( X{} ).did_not_match() );\n+enum E : unsigned { e };\n+static_assert( test( e ).did_not_match() );\n+\n+#ifndef __STRICT_ANSI__\n+#include <cstddef>\n+static_assert( std::popcount(std::byte{0x00}) == 0 );\n+static_assert( std::popcount(std::byte{0x01}) == 1 );\n+static_assert( std::popcount(std::byte{0x02}) == 1 );\n+static_assert( std::popcount(std::byte{0x03}) == 2 );\n+static_assert( std::popcount(std::byte{0x30}) == 2 );\n+static_assert( std::popcount(std::byte{0x40}) == 1 );\n+static_assert( std::popcount(std::byte{0x41}) == 2 );\n+static_assert( std::popcount(std::byte{0xff}) == 8 );\n+#else\n+static_assert( test( (std::byte)0 ).did_not_match() );\n+#endif\n+\n+#if !defined(__STRICT_ANSI__) && defined _GLIBCXX_USE_INT128\n+static_assert( test( (unsigned __int128)0 ) );\n+static_assert( test( (__int128)0 ).did_not_match() );\n+#endif\n+#if defined(__GLIBCXX_TYPE_INT_N_0)\n+static_assert( test( (unsigned __GLIBCXX_TYPE_INT_N_0)0 ) );\n+static_assert( test( (__GLIBCXX_TYPE_INT_N_0)0 ).did_not_match() );\n+#endif\n+#if defined(__GLIBCXX_TYPE_INT_N_1)\n+static_assert( test( (unsigned __GLIBCXX_TYPE_INT_N_1)0 ) );\n+static_assert( test( (__GLIBCXX_TYPE_INT_N_1)0 ).did_not_match() );\n+#endif\n+#if defined(__GLIBCXX_TYPE_INT_N_2)\n+static_assert( test( (unsigned __GLIBCXX_TYPE_INT_N_2)0 ) );\n+static_assert( test( (__GLIBCXX_TYPE_INT_N_2)0 ).did_not_match() );\n+#endif"}]}