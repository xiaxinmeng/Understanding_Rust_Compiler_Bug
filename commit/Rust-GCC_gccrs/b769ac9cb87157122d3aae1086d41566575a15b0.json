{"sha": "b769ac9cb87157122d3aae1086d41566575a15b0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjc2OWFjOWNiODcxNTcxMjJkM2FhZTEwODZkNDE1NjY1NzVhMTViMA==", "commit": {"author": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2007-11-24T00:29:14Z"}, "committer": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2007-11-24T00:29:14Z"}, "message": "[multiple changes]\n\n2007-11-23  Tobias Burnus  <burnus@net-b.de>\n\n\tPR fortran/34209\n\t* gfortran.dg/nearest_3.f90: New test.\n\n2007-11-23  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n\n\tPR fortran/33317\n\t* gfortran.dg/optional_dim_2.f90: New test.\n\nFrom-SVN: r130392", "tree": {"sha": "bb908535c9647d0a0f356216e9efd06c0e281e25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb908535c9647d0a0f356216e9efd06c0e281e25"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b769ac9cb87157122d3aae1086d41566575a15b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b769ac9cb87157122d3aae1086d41566575a15b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b769ac9cb87157122d3aae1086d41566575a15b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b769ac9cb87157122d3aae1086d41566575a15b0/comments", "author": null, "committer": null, "parents": [{"sha": "be9c3c6e931d77e06d5ec6366d7379f27dd35dd3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be9c3c6e931d77e06d5ec6366d7379f27dd35dd3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be9c3c6e931d77e06d5ec6366d7379f27dd35dd3"}], "stats": {"total": 371, "additions": 371, "deletions": 0}, "files": [{"sha": "6c191d61b44f8094c570c7a089d97def524af799", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b769ac9cb87157122d3aae1086d41566575a15b0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b769ac9cb87157122d3aae1086d41566575a15b0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b769ac9cb87157122d3aae1086d41566575a15b0", "patch": "@@ -1,3 +1,13 @@\n+2007-11-23  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/34209\n+\t* gfortran.dg/nearest_3.f90: New test.\n+\n+2007-11-23  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\tPR fortran/33317\n+\t* gfortran.dg/optional_dim_2.f90: New test.\n+\n 2007-11-23  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/34187"}, {"sha": "0bf241aebf2eea054c946557088d9a8222b0a5ec", "filename": "gcc/testsuite/gfortran.dg/nearest_3.f90", "status": "added", "additions": 337, "deletions": 0, "changes": 337, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b769ac9cb87157122d3aae1086d41566575a15b0/gcc%2Ftestsuite%2Fgfortran.dg%2Fnearest_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b769ac9cb87157122d3aae1086d41566575a15b0/gcc%2Ftestsuite%2Fgfortran.dg%2Fnearest_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fnearest_3.f90?ref=b769ac9cb87157122d3aae1086d41566575a15b0", "patch": "@@ -0,0 +1,337 @@\n+! { dg-do run }\n+!\n+! PR fortran/34209\n+!\n+! Test run-time implementation of NEAREST\n+!\n+program test\n+  implicit none\n+  real(4), volatile :: r4\n+  real(8), volatile :: r8\n+\n+! Single precision with single-precision sign\n+\n+  r4 = 0.0_4\n+  ! 0+ > 0\n+  if (nearest(r4, 1.0) &\n+      <= r4) &\n+    call abort()\n+  ! 0++ > 0+\n+  if (nearest(nearest(r4, 1.0), 1.0) &\n+      <= nearest(r4, 1.0)) &\n+    call abort()\n+  ! 0+++ > 0++\n+  if (nearest(nearest(nearest(r4, 1.0), 1.0), 1.0) &\n+      <= nearest(nearest(r4, 1.0), 1.0)) &\n+    call abort()\n+  ! 0+- = 0\n+  if (nearest(nearest(r4, 1.0), -1.0) &\n+      /= r4) &\n+    call abort()\n+  ! 0++- = 0+\n+  if (nearest(nearest(nearest(r4, 1.0), 1.0), -1.0) &\n+      /= nearest(r4, 1.0)) &\n+    call abort()\n+  ! 0++-- = 0\n+  if (nearest(nearest(nearest(nearest(r4, 1.0), 1.0), -1.0), -1.0) &\n+      /= r4) &\n+    call abort()\n+\n+  ! 0- < 0\n+  if (nearest(r4, -1.0) &\n+      >= r4) &\n+    call abort()\n+  ! 0-- < 0+\n+  if (nearest(nearest(r4, -1.0), -1.0) &\n+      >= nearest(r4, -1.0)) &\n+    call abort()\n+  ! 0--- < 0--\n+  if (nearest(nearest(nearest(r4, -1.0), -1.0), -1.0) &\n+      >= nearest(nearest(r4, -1.0), -1.0)) &\n+    call abort()\n+  ! 0-+ = 0\n+  if (nearest(nearest(r4, -1.0), 1.0) &\n+      /= r4) &\n+    call abort()\n+  ! 0--+ = 0-\n+  if (nearest(nearest(nearest(r4, -1.0), -1.0), 1.0) &\n+      /= nearest(r4, -1.0)) &\n+    call abort()\n+  ! 0--++ = 0\n+  if (nearest(nearest(nearest(nearest(r4, -1.0), -1.0), 1.0), 1.0) &\n+      /= r4) &\n+    call abort()\n+\n+  r4 = 42.0_4\n+  ! 42++ > 42+\n+  if (nearest(nearest(r4, 1.0), 1.0) &\n+      <= nearest(r4, 1.0)) &\n+    call abort()\n+  ! 42-- < 42-\n+  if (nearest(nearest(r4, -1.0), -1.0) &\n+      >= nearest(r4, -1.0)) &\n+    call abort()\n+  ! 42-+ = 42\n+  if (nearest(nearest(r4, -1.0), 1.0) &\n+      /= r4) &\n+    call abort()\n+  ! 42+- = 42\n+  if (nearest(nearest(r4, 1.0), -1.0) &\n+      /= r4) &\n+    call abort()\n+\n+  r4 = 0.0\n+  ! INF+ = INF\n+  if (nearest(1.0/r4, 1.0) /= 1.0/r4) call abort()\n+  ! -INF- = -INF\n+  if (nearest(-1.0/r4, -1.0) /= -1.0/r4) call abort()\n+  ! NAN- = NAN\n+  if (.not.isnan(nearest(0.0/r4,  1.0))) call abort()\n+  ! NAN+ = NAN\n+  if (.not.isnan(nearest(0.0/r4, -1.0))) call abort()\n+\n+! Double precision with single-precision sign\n+\n+  r8 = 0.0_8\n+  ! 0+ > 0\n+  if (nearest(r8, 1.0) &\n+      <= r8) &\n+    call abort()\n+  ! 0++ > 0+\n+  if (nearest(nearest(r8, 1.0), 1.0) &\n+      <= nearest(r8, 1.0)) &\n+    call abort()\n+  ! 0+++ > 0++\n+  if (nearest(nearest(nearest(r8, 1.0), 1.0), 1.0) &\n+      <= nearest(nearest(r8, 1.0), 1.0)) &\n+    call abort()\n+  ! 0+- = 0\n+  if (nearest(nearest(r8, 1.0), -1.0) &\n+      /= r8) &\n+    call abort()\n+  ! 0++- = 0+\n+  if (nearest(nearest(nearest(r8, 1.0), 1.0), -1.0) &\n+      /= nearest(r8, 1.0)) &\n+    call abort()\n+  ! 0++-- = 0\n+  if (nearest(nearest(nearest(nearest(r8, 1.0), 1.0), -1.0), -1.0) &\n+      /= r8) &\n+    call abort()\n+\n+  ! 0- < 0\n+  if (nearest(r8, -1.0) &\n+      >= r8) &\n+    call abort()\n+  ! 0-- < 0+\n+  if (nearest(nearest(r8, -1.0), -1.0) &\n+      >= nearest(r8, -1.0)) &\n+    call abort()\n+  ! 0--- < 0--\n+  if (nearest(nearest(nearest(r8, -1.0), -1.0), -1.0) &\n+      >= nearest(nearest(r8, -1.0), -1.0)) &\n+    call abort()\n+  ! 0-+ = 0\n+  if (nearest(nearest(r8, -1.0), 1.0) &\n+      /= r8) &\n+    call abort()\n+  ! 0--+ = 0-\n+  if (nearest(nearest(nearest(r8, -1.0), -1.0), 1.0) &\n+      /= nearest(r8, -1.0)) &\n+    call abort()\n+  ! 0--++ = 0\n+  if (nearest(nearest(nearest(nearest(r8, -1.0), -1.0), 1.0), 1.0) &\n+      /= r8) &\n+    call abort()\n+\n+  r8 = 42.0_8\n+  ! 42++ > 42+\n+  if (nearest(nearest(r8, 1.0), 1.0) &\n+      <= nearest(r8, 1.0)) &\n+    call abort()\n+  ! 42-- < 42-\n+  if (nearest(nearest(r8, -1.0), -1.0) &\n+      >= nearest(r8, -1.0)) &\n+    call abort()\n+  ! 42-+ = 42\n+  if (nearest(nearest(r8, -1.0), 1.0) &\n+      /= r8) &\n+    call abort()\n+  ! 42+- = 42\n+  if (nearest(nearest(r8, 1.0), -1.0) &\n+      /= r8) &\n+    call abort()\n+\n+  r4 = 0.0\n+  ! INF+ = INF\n+  if (nearest(1.0/r4, 1.0) /= 1.0/r4) call abort()\n+  ! -INF- = -INF\n+  if (nearest(-1.0/r4, -1.0) /= -1.0/r4) call abort()\n+  ! NAN- = NAN\n+  if (.not.isnan(nearest(0.0/r4,  1.0))) call abort()\n+  ! NAN+ = NAN\n+  if (.not.isnan(nearest(0.0/r4, -1.0))) call abort()\n+\n+\n+! Single precision with double-precision sign\n+\n+  r4 = 0.0_4\n+  ! 0+ > 0\n+  if (nearest(r4, 1.0d0) &\n+      <= r4) &\n+    call abort()\n+  ! 0++ > 0+\n+  if (nearest(nearest(r4, 1.0d0), 1.0d0) &\n+      <= nearest(r4, 1.0d0)) &\n+    call abort()\n+  ! 0+++ > 0++\n+  if (nearest(nearest(nearest(r4, 1.0d0), 1.0d0), 1.0d0) &\n+      <= nearest(nearest(r4, 1.0d0), 1.0d0)) &\n+    call abort()\n+  ! 0+- = 0\n+  if (nearest(nearest(r4, 1.0d0), -1.0d0) &\n+      /= r4) &\n+    call abort()\n+  ! 0++- = 0+\n+  if (nearest(nearest(nearest(r4, 1.0d0), 1.0d0), -1.0d0) &\n+      /= nearest(r4, 1.0d0)) &\n+    call abort()\n+  ! 0++-- = 0\n+  if (nearest(nearest(nearest(nearest(r4, 1.0d0), 1.0d0), -1.0d0), -1.0d0) &\n+      /= r4) &\n+    call abort()\n+\n+  ! 0- < 0\n+  if (nearest(r4, -1.0d0) &\n+      >= r4) &\n+    call abort()\n+  ! 0-- < 0+\n+  if (nearest(nearest(r4, -1.0d0), -1.0d0) &\n+      >= nearest(r4, -1.0d0)) &\n+    call abort()\n+  ! 0--- < 0--\n+  if (nearest(nearest(nearest(r4, -1.0d0), -1.0d0), -1.0d0) &\n+      >= nearest(nearest(r4, -1.0d0), -1.0d0)) &\n+    call abort()\n+  ! 0-+ = 0\n+  if (nearest(nearest(r4, -1.0d0), 1.0d0) &\n+      /= r4) &\n+    call abort()\n+  ! 0--+ = 0-\n+  if (nearest(nearest(nearest(r4, -1.0d0), -1.0d0), 1.0d0) &\n+      /= nearest(r4, -1.0d0)) &\n+    call abort()\n+  ! 0--++ = 0\n+  if (nearest(nearest(nearest(nearest(r4, -1.0d0), -1.0d0), 1.0d0), 1.0d0) &\n+      /= r4) &\n+    call abort()\n+\n+  r4 = 42.0_4\n+  ! 42++ > 42+\n+  if (nearest(nearest(r4, 1.0d0), 1.0d0) &\n+      <= nearest(r4, 1.0d0)) &\n+    call abort()\n+  ! 42-- < 42-\n+  if (nearest(nearest(r4, -1.0d0), -1.0d0) &\n+      >= nearest(r4, -1.0d0)) &\n+    call abort()\n+  ! 42-+ = 42\n+  if (nearest(nearest(r4, -1.0d0), 1.0d0) &\n+      /= r4) &\n+    call abort()\n+  ! 42+- = 42\n+  if (nearest(nearest(r4, 1.0d0), -1.0d0) &\n+      /= r4) &\n+    call abort()\n+\n+  r4 = 0.0\n+  ! INF+ = INF\n+  if (nearest(1.0d0/r4, 1.0d0) /= 1.0d0/r4) call abort()\n+  ! -INF- = -INF\n+  if (nearest(-1.0d0/r4, -1.0d0) /= -1.0d0/r4) call abort()\n+  ! NAN- = NAN\n+  if (.not.isnan(nearest(0.0/r4,  1.0d0))) call abort()\n+  ! NAN+ = NAN\n+  if (.not.isnan(nearest(0.0/r4, -1.0d0))) call abort()\n+\n+! Double precision with double-precision sign\n+\n+  r8 = 0.0_8\n+  ! 0+ > 0\n+  if (nearest(r8, 1.0d0) &\n+      <= r8) &\n+    call abort()\n+  ! 0++ > 0+\n+  if (nearest(nearest(r8, 1.0d0), 1.0d0) &\n+      <= nearest(r8, 1.0d0)) &\n+    call abort()\n+  ! 0+++ > 0++\n+  if (nearest(nearest(nearest(r8, 1.0d0), 1.0d0), 1.0d0) &\n+      <= nearest(nearest(r8, 1.0d0), 1.0d0)) &\n+    call abort()\n+  ! 0+- = 0\n+  if (nearest(nearest(r8, 1.0d0), -1.0d0) &\n+      /= r8) &\n+    call abort()\n+  ! 0++- = 0+\n+  if (nearest(nearest(nearest(r8, 1.0d0), 1.0d0), -1.0d0) &\n+      /= nearest(r8, 1.0d0)) &\n+    call abort()\n+  ! 0++-- = 0\n+  if (nearest(nearest(nearest(nearest(r8, 1.0d0), 1.0d0), -1.0d0), -1.0d0) &\n+      /= r8) &\n+    call abort()\n+\n+  ! 0- < 0\n+  if (nearest(r8, -1.0d0) &\n+      >= r8) &\n+    call abort()\n+  ! 0-- < 0+\n+  if (nearest(nearest(r8, -1.0d0), -1.0d0) &\n+      >= nearest(r8, -1.0d0)) &\n+    call abort()\n+  ! 0--- < 0--\n+  if (nearest(nearest(nearest(r8, -1.0d0), -1.0d0), -1.0d0) &\n+      >= nearest(nearest(r8, -1.0d0), -1.0d0)) &\n+    call abort()\n+  ! 0-+ = 0\n+  if (nearest(nearest(r8, -1.0d0), 1.0d0) &\n+      /= r8) &\n+    call abort()\n+  ! 0--+ = 0-\n+  if (nearest(nearest(nearest(r8, -1.0d0), -1.0d0), 1.0d0) &\n+      /= nearest(r8, -1.0d0)) &\n+    call abort()\n+  ! 0--++ = 0\n+  if (nearest(nearest(nearest(nearest(r8, -1.0d0), -1.0d0), 1.0d0), 1.0d0) &\n+      /= r8) &\n+    call abort()\n+\n+  r8 = 42.0_8\n+  ! 42++ > 42+\n+  if (nearest(nearest(r8, 1.0d0), 1.0d0) &\n+      <= nearest(r8, 1.0d0)) &\n+    call abort()\n+  ! 42-- < 42-\n+  if (nearest(nearest(r8, -1.0d0), -1.0d0) &\n+      >= nearest(r8, -1.0d0)) &\n+    call abort()\n+  ! 42-+ = 42\n+  if (nearest(nearest(r8, -1.0d0), 1.0d0) &\n+      /= r8) &\n+    call abort()\n+  ! 42+- = 42\n+  if (nearest(nearest(r8, 1.0d0), -1.0d0) &\n+      /= r8) &\n+    call abort()\n+\n+  r4 = 0.0\n+  ! INF+ = INF\n+  if (nearest(1.0d0/r4, 1.0d0) /= 1.0d0/r4) call abort()\n+  ! -INF- = -INF\n+  if (nearest(-1.0d0/r4, -1.0d0) /= -1.0d0/r4) call abort()\n+  ! NAN- = NAN\n+  if (.not.isnan(nearest(0.0/r4,  1.0d0))) call abort()\n+  ! NAN+ = NAN\n+  if (.not.isnan(nearest(0.0/r4, -1.0d0))) call abort()\n+\n+end program test"}, {"sha": "bb2520136131a2cd17ff63fcf1f0123023e872f4", "filename": "gcc/testsuite/gfortran.dg/optional_dim_2.f90", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b769ac9cb87157122d3aae1086d41566575a15b0/gcc%2Ftestsuite%2Fgfortran.dg%2Foptional_dim_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b769ac9cb87157122d3aae1086d41566575a15b0/gcc%2Ftestsuite%2Fgfortran.dg%2Foptional_dim_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Foptional_dim_2.f90?ref=b769ac9cb87157122d3aae1086d41566575a15b0", "patch": "@@ -0,0 +1,24 @@\n+! { dg-do run }\n+! PR33317 CSHIFT/EOSHIFT: Rejects optional dummy for DIM=\n+! Test case submitted by Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+program test\n+ implicit none\n+ call sub(bound=.false., dimmy=1_8)\n+ call sub()\n+contains\n+ subroutine sub(bound, dimmy)\n+   integer(kind=8), optional :: dimmy\n+   logical, optional :: bound\n+   logical :: lotto(4)\n+   character(20) :: testbuf\n+   lotto = .false.\n+   lotto = cshift((/.true.,.false.,.true.,.false./),1,dim=dimmy)\n+   write(testbuf,*) lotto\n+   if (trim(testbuf).ne.\" F T F T\") call abort\n+   lotto = .false.\n+   lotto = eoshift((/.true.,.true.,.true.,.true./),1,boundary=bound,dim=dimmy)\n+   lotto = eoshift(lotto,1,dim=dimmy)\n+   write(testbuf,*) lotto\n+   if (trim(testbuf).ne.\" T T F F\") print *, testbuf\n+ end subroutine\n+end program test\n\\ No newline at end of file"}]}