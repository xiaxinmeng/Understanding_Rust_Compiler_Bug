{"sha": "b0c2dee9fbfb3ca4b768c17f14afcb89086c0eae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjBjMmRlZTlmYmZiM2NhNGI3NjhjMTdmMTRhZmNiODkwODZjMGVhZQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-11-29T18:42:26Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-11-29T18:42:26Z"}, "message": "re PR target/17224 (relocation truncated to fit: GPREL22)\n\n        PR target/17224\n        * config/ia64/predicates.md (sdata_symbolic_operand): Deny offsets\n        outside the referenced object.\n\nFrom-SVN: r91478", "tree": {"sha": "eff32a57671c5494fd73715a4ef2663a8988ccd9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eff32a57671c5494fd73715a4ef2663a8988ccd9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b0c2dee9fbfb3ca4b768c17f14afcb89086c0eae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0c2dee9fbfb3ca4b768c17f14afcb89086c0eae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0c2dee9fbfb3ca4b768c17f14afcb89086c0eae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0c2dee9fbfb3ca4b768c17f14afcb89086c0eae/comments", "author": null, "committer": null, "parents": [{"sha": "dda88f6f8500f5381afc5126b99290f52c810d20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dda88f6f8500f5381afc5126b99290f52c810d20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dda88f6f8500f5381afc5126b99290f52c810d20"}], "stats": {"total": 46, "additions": 43, "deletions": 3}, "files": [{"sha": "ed8056abb4d071541b3d4b3c180c7bb01e83aa6f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c2dee9fbfb3ca4b768c17f14afcb89086c0eae/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c2dee9fbfb3ca4b768c17f14afcb89086c0eae/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b0c2dee9fbfb3ca4b768c17f14afcb89086c0eae", "patch": "@@ -1,3 +1,9 @@\n+2004-11-29  Richard Henderson  <rth@redhat.com>\n+\n+\tPR target/17224\n+\t* config/ia64/predicates.md (sdata_symbolic_operand): Deny offsets\n+\toutside the referenced object.\n+\n 2004-11-29  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* tree-if-conv.c (replace_phi_with_cond_modify_expr): Use"}, {"sha": "6166612ecad209083945d282e361e945fc4eb6b6", "filename": "gcc/config/ia64/predicates.md", "status": "modified", "additions": 37, "deletions": 3, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c2dee9fbfb3ca4b768c17f14afcb89086c0eae/gcc%2Fconfig%2Fia64%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c2dee9fbfb3ca4b768c17f14afcb89086c0eae/gcc%2Fconfig%2Fia64%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fpredicates.md?ref=b0c2dee9fbfb3ca4b768c17f14afcb89086c0eae", "patch": "@@ -74,21 +74,55 @@\n (define_predicate \"sdata_symbolic_operand\" \n   (match_code \"symbol_ref,const\")\n {\n+  HOST_WIDE_INT offset = 0, size = 0;\n+\n   switch (GET_CODE (op))\n     {\n     case CONST:\n       op = XEXP (op, 0);\n       if (GET_CODE (op) != PLUS\n-\t  || GET_CODE (XEXP (op, 0)) != SYMBOL_REF)\n+\t  || GET_CODE (XEXP (op, 0)) != SYMBOL_REF\n+\t  || GET_CODE (XEXP (op, 1)) != CONST_INT)\n \treturn false;\n+      offset = INTVAL (XEXP (op, 1));\n       op = XEXP (op, 0);\n       /* FALLTHRU */\n \n     case SYMBOL_REF:\n       if (CONSTANT_POOL_ADDRESS_P (op))\n-\treturn GET_MODE_SIZE (get_pool_mode (op)) <= ia64_section_threshold;\n+\t{\n+\t  size = GET_MODE_SIZE (get_pool_mode (op));\n+\t  if (size > ia64_section_threshold)\n+\t    return false;\n+\t}\n       else\n-\treturn SYMBOL_REF_LOCAL_P (op) && SYMBOL_REF_SMALL_P (op);\n+\t{\n+\t  tree t;\n+\n+\t  if (!SYMBOL_REF_LOCAL_P (op) || !SYMBOL_REF_SMALL_P (op))\n+\t    return false;\n+\n+\t  /* Note that in addition to DECLs, we can get various forms\n+\t     of constants here.  */\n+\t  t = SYMBOL_REF_DECL (op);\n+\t  if (DECL_P (t))\n+\t    t = DECL_SIZE_UNIT (t);\n+\t  else\n+\t    t = TYPE_SIZE_UNIT (TREE_TYPE (t));\n+\t  if (t && host_integerp (t, 0))\n+\t    {\n+\t      size = tree_low_cst (t, 0);\n+\t      if (size < 0)\n+\t\tsize = 0;\n+\t    }\n+\t}\n+\n+      /* Deny the stupid user trick of addressing outside the object.  Such\n+\t things quickly result in GPREL22 relocation overflows.  Of course,\n+\t they're also highly undefined.  From a pure pedant's point of view\n+\t they deserve a slap on the wrist (such as provided by a relocation\n+\t overflow), but that just leads to bugzilla noise.  */\n+      return (offset >= 0 && offset <= size);\n \n     default:\n       abort ();"}]}