{"sha": "26004f51f9cfb83d88d445903933fb8c39a841f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjYwMDRmNTFmOWNmYjgzZDg4ZDQ0NTkwMzkzM2ZiOGMzOWE4NDFmMQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2018-12-07T15:03:15Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-12-07T15:03:15Z"}, "message": "[AArch64][SVE] Remove unnecessary PTRUEs from integer arithmetic\n\nWhen using the unpredicated immediate forms of MUL, LSL, LSR and ASR,\nthe rtl patterns would still have the predicate operand we created for\nthe other forms.  This patch splits the patterns after reload in order\nto get rid of the predicate, like we already do for WHILE.\n\n2018-12-07  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* config/aarch64/aarch64-sve.md (*mul<mode>3, *v<optab><mode>3):\n\tSplit the patterns after reload if we don't need the predicate\n\toperand.\n\t(*post_ra_mul<mode>3, *post_ra_v<optab><mode>3): New patterns.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/pred_elim_2.c: New test.\n\nFrom-SVN: r266892", "tree": {"sha": "b131de467fe3ab3f444ff4f12e71c9bceca06d55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b131de467fe3ab3f444ff4f12e71c9bceca06d55"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26004f51f9cfb83d88d445903933fb8c39a841f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26004f51f9cfb83d88d445903933fb8c39a841f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26004f51f9cfb83d88d445903933fb8c39a841f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26004f51f9cfb83d88d445903933fb8c39a841f1/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "740c1ed77c11b4be66c3c3c56660e11f01a383d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/740c1ed77c11b4be66c3c3c56660e11f01a383d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/740c1ed77c11b4be66c3c3c56660e11f01a383d8"}], "stats": {"total": 84, "additions": 80, "deletions": 4}, "files": [{"sha": "95c1a4a8029dfc41e5791c40fac510909c0b05b5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26004f51f9cfb83d88d445903933fb8c39a841f1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26004f51f9cfb83d88d445903933fb8c39a841f1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=26004f51f9cfb83d88d445903933fb8c39a841f1", "patch": "@@ -1,3 +1,10 @@\n+2018-12-07  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64-sve.md (*mul<mode>3, *v<optab><mode>3):\n+\tSplit the patterns after reload if we don't need the predicate\n+\toperand.\n+\t(*post_ra_mul<mode>3, *post_ra_v<optab><mode>3): New patterns.\n+\n 2018-12-07  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* config/aarch64/iterators.md (SVE_UNPRED_FP_BINARY): New code"}, {"sha": "8569a8e1ea7466c67091feb4e6f25603817436fa", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26004f51f9cfb83d88d445903933fb8c39a841f1/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26004f51f9cfb83d88d445903933fb8c39a841f1/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=26004f51f9cfb83d88d445903933fb8c39a841f1", "patch": "@@ -936,7 +936,7 @@\n ;; predicate for the first alternative, but using Upa or X isn't likely\n ;; to gain much and would make the instruction seem less uniform to the\n ;; register allocator.\n-(define_insn \"*mul<mode>3\"\n+(define_insn_and_split \"*mul<mode>3\"\n   [(set (match_operand:SVE_I 0 \"register_operand\" \"=w, w, ?&w\")\n \t(unspec:SVE_I\n \t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl, Upl\")\n@@ -946,12 +946,30 @@\n \t  UNSPEC_MERGE_PTRUE))]\n   \"TARGET_SVE\"\n   \"@\n-   mul\\t%0.<Vetype>, %0.<Vetype>, #%3\n+   #\n    mul\\t%0.<Vetype>, %1/m, %0.<Vetype>, %3.<Vetype>\n    movprfx\\t%0, %2\\;mul\\t%0.<Vetype>, %1/m, %0.<Vetype>, %3.<Vetype>\"\n+  ; Split the unpredicated form after reload, so that we don't have\n+  ; the unnecessary PTRUE.\n+  \"&& reload_completed\n+   && !register_operand (operands[3], <MODE>mode)\"\n+  [(set (match_dup 0) (mult:SVE_I (match_dup 2) (match_dup 3)))]\n+  \"\"\n   [(set_attr \"movprfx\" \"*,*,yes\")]\n )\n \n+;; Unpredicated multiplications by a constant (post-RA only).\n+;; These are generated by splitting a predicated instruction whose\n+;; predicate is unused.\n+(define_insn \"*post_ra_mul<mode>3\"\n+  [(set (match_operand:SVE_I 0 \"register_operand\" \"=w\")\n+\t(mult:SVE_I\n+\t  (match_operand:SVE_I 1 \"register_operand\" \"0\")\n+\t  (match_operand:SVE_I 2 \"aarch64_sve_mul_immediate\")))]\n+  \"TARGET_SVE && reload_completed\"\n+  \"mul\\t%0.<Vetype>, %0.<Vetype>, #%2\"\n+)\n+\n (define_insn \"*madd<mode>\"\n   [(set (match_operand:SVE_I 0 \"register_operand\" \"=w, w, ?&w\")\n \t(plus:SVE_I\n@@ -1232,7 +1250,7 @@\n ;; actually need the predicate for the first alternative, but using Upa\n ;; or X isn't likely to gain much and would make the instruction seem\n ;; less uniform to the register allocator.\n-(define_insn \"*v<optab><mode>3\"\n+(define_insn_and_split \"*v<optab><mode>3\"\n   [(set (match_operand:SVE_I 0 \"register_operand\" \"=w, w, ?&w\")\n \t(unspec:SVE_I\n \t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl, Upl\")\n@@ -1242,12 +1260,28 @@\n \t  UNSPEC_MERGE_PTRUE))]\n   \"TARGET_SVE\"\n   \"@\n-   <shift>\\t%0.<Vetype>, %2.<Vetype>, #%3\n+   #\n    <shift>\\t%0.<Vetype>, %1/m, %0.<Vetype>, %3.<Vetype>\n    movprfx\\t%0, %2\\;<shift>\\t%0.<Vetype>, %1/m, %0.<Vetype>, %3.<Vetype>\"\n+  \"&& reload_completed\n+   && !register_operand (operands[3], <MODE>mode)\"\n+  [(set (match_dup 0) (ASHIFT:SVE_I (match_dup 2) (match_dup 3)))]\n+  \"\"\n   [(set_attr \"movprfx\" \"*,*,yes\")]\n )\n \n+;; Unpredicated shift operations by a constant (post-RA only).\n+;; These are generated by splitting a predicated instruction whose\n+;; predicate is unused.\n+(define_insn \"*post_ra_v<optab><mode>3\"\n+  [(set (match_operand:SVE_I 0 \"register_operand\" \"=w\")\n+\t(ASHIFT:SVE_I\n+\t  (match_operand:SVE_I 1 \"register_operand\" \"w\")\n+\t  (match_operand:SVE_I 2 \"aarch64_simd_<lr>shift_imm\")))]\n+  \"TARGET_SVE && reload_completed\"\n+  \"<shift>\\t%0.<Vetype>, %1.<Vetype>, #%2\"\n+)\n+\n ;; LSL, LSR and ASR by a scalar, which expands into one of the vector\n ;; shifts above.\n (define_expand \"<ASHIFT:optab><mode>3\""}, {"sha": "231275454bd24051280db93eebdf2dd5752dac64", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26004f51f9cfb83d88d445903933fb8c39a841f1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26004f51f9cfb83d88d445903933fb8c39a841f1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=26004f51f9cfb83d88d445903933fb8c39a841f1", "patch": "@@ -1,3 +1,7 @@\n+2018-12-07  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/sve/pred_elim_2.c: New test.\n+\n 2018-12-07  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* gcc.target/aarch64/sve/pred_elim_1.c: New test."}, {"sha": "ed9c7007d2ed2779d5f97e18facf8482dc62b8cf", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pred_elim_2.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26004f51f9cfb83d88d445903933fb8c39a841f1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpred_elim_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26004f51f9cfb83d88d445903933fb8c39a841f1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpred_elim_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpred_elim_2.c?ref=26004f51f9cfb83d88d445903933fb8c39a841f1", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define TEST_OP(NAME, TYPE, OP)\t\t\t\t\t\\\n+  void\t\t\t\t\t\t\t\t\\\n+  NAME##_##TYPE (TYPE *restrict a, TYPE *restrict b, int n)\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\t\\\n+      a[i] = b[i] OP;\t\t\t\t\t\t\\\n+  }\n+\n+#define TEST_TYPE(TYPE) \\\n+  TEST_OP (shl, TYPE, << 6) \\\n+  TEST_OP (shr, TYPE, >> 6) \\\n+  TEST_OP (mult, TYPE, * 0x2b)\n+\n+TEST_TYPE (int8_t)\n+TEST_TYPE (int16_t)\n+TEST_TYPE (int32_t)\n+TEST_TYPE (int64_t)\n+TEST_TYPE (uint8_t)\n+TEST_TYPE (uint16_t)\n+TEST_TYPE (uint32_t)\n+TEST_TYPE (uint64_t)\n+\n+/* { dg-final { scan-assembler-times {\\tlsl\\t} 8 } } */\n+/* { dg-final { scan-assembler-times {\\tlsr\\t} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tasr\\t} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tmul\\t} 8 } } */\n+/* { dg-final { scan-assembler-not {\\tptrue\\t} } } */"}]}