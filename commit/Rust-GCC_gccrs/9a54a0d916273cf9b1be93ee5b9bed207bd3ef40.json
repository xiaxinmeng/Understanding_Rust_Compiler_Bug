{"sha": "9a54a0d916273cf9b1be93ee5b9bed207bd3ef40", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWE1NGEwZDkxNjI3M2NmOWIxYmU5M2VlNWI5YmVkMjA3YmQzZWY0MA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2019-05-01T11:38:54Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2019-05-01T11:38:54Z"}, "message": "[C++ PATCH] Simplify class member lookup\n\nhttps://gcc.gnu.org/ml/gcc-patches/2019-05/msg00004.html\n\tgcc/cp/\n\t* name-lookup.h (get_class_binding_direct): Change final arg to\n\tbool.\n\t(get_class_binding): Likewise.\n\t* name-lookup.c (get_class_binding_direct): Replace TYPE_OR_FNS\n\targ with WANT_TYPE bool.  Simplify.\n\t(get_class_binding): Adjust final arg.\n\t* decl.c (reshape_init_class): Adjust get_class_binding calls.\n\n\tgcc/testsuite/\n\t* g++.dg/cpp0x/decltype9.C: Adjust expected diagnostics.\n\nFrom-SVN: r270765", "tree": {"sha": "0f009dad0bed690608819485a85f9248299e16d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f009dad0bed690608819485a85f9248299e16d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a54a0d916273cf9b1be93ee5b9bed207bd3ef40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a54a0d916273cf9b1be93ee5b9bed207bd3ef40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a54a0d916273cf9b1be93ee5b9bed207bd3ef40", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a54a0d916273cf9b1be93ee5b9bed207bd3ef40/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "243dd48646beb0de2a2aac8236eef8fa60f5b99d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/243dd48646beb0de2a2aac8236eef8fa60f5b99d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/243dd48646beb0de2a2aac8236eef8fa60f5b99d"}], "stats": {"total": 60, "additions": 34, "deletions": 26}, "files": [{"sha": "3213b4aa2df10507504812cf7f0d2ee4fcf9a7eb", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a54a0d916273cf9b1be93ee5b9bed207bd3ef40/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a54a0d916273cf9b1be93ee5b9bed207bd3ef40/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9a54a0d916273cf9b1be93ee5b9bed207bd3ef40", "patch": "@@ -1,3 +1,13 @@\n+2019-05-01  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* name-lookup.h (get_class_binding_direct): Change final arg to\n+\tbool.\n+\t(get_class_binding): Likewise.\n+\t* name-lookup.c (get_class_binding_direct): Replace TYPE_OR_FNS\n+\targ with WANT_TYPE bool.  Simplify.\n+\t(get_class_binding): Adjust final arg.\n+\t* decl.c (reshape_init_class): Adjust get_class_binding calls.\n+\n 2019-04-30  Nathan Sidwell  <nathan@acm.org>\n \n \t* cp-objcp-common.c (cp_common_init_ts): Use MARK_TS_EXP for _EXPR"}, {"sha": "ee38ac25e6599f24b9825588b7c5e40e673ff262", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a54a0d916273cf9b1be93ee5b9bed207bd3ef40/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a54a0d916273cf9b1be93ee5b9bed207bd3ef40/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=9a54a0d916273cf9b1be93ee5b9bed207bd3ef40", "patch": "@@ -5968,12 +5968,12 @@ reshape_init_class (tree type, reshape_iter *d, bool first_initializer_p,\n \t\t  tree id = DECL_NAME (d->cur->index);\n \t\t  gcc_assert (id);\n \t\t  gcc_checking_assert (d->cur->index\n-\t\t\t\t       == get_class_binding (type, id, false));\n+\t\t\t\t       == get_class_binding (type, id));\n \t\t  field = d->cur->index;\n \t\t}\n \t    }\n \t  else if (TREE_CODE (d->cur->index) == IDENTIFIER_NODE)\n-\t    field = get_class_binding (type, d->cur->index, false);\n+\t    field = get_class_binding (type, d->cur->index);\n \t  else\n \t    {\n \t      if (complain & tf_error)"}, {"sha": "89d85f6c7d7b1a8e7be9c608d5584acc548b931d", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 15, "deletions": 20, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a54a0d916273cf9b1be93ee5b9bed207bd3ef40/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a54a0d916273cf9b1be93ee5b9bed207bd3ef40/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=9a54a0d916273cf9b1be93ee5b9bed207bd3ef40", "patch": "@@ -1217,7 +1217,7 @@ search_anon_aggr (tree anon, tree name, bool want_type)\n    Use this if you do not want lazy member creation.  */\n \n tree\n-get_class_binding_direct (tree klass, tree name, int type_or_fns)\n+get_class_binding_direct (tree klass, tree name, bool want_type)\n {\n   gcc_checking_assert (RECORD_OR_UNION_TYPE_P (klass));\n \n@@ -1233,31 +1233,26 @@ get_class_binding_direct (tree klass, tree name, int type_or_fns)\n       val = member_vec_binary_search (member_vec, lookup);\n       if (!val)\n \t;\n-      else if (type_or_fns > 0)\n-\t{\n-\t  if (STAT_HACK_P (val))\n-\t    val = STAT_TYPE (val);\n-\t  else if (!DECL_DECLARES_TYPE_P (val))\n-\t    val = NULL_TREE;\n-\t}\n       else if (STAT_HACK_P (val))\n-\tval = STAT_DECL (val);\n+\tval = want_type ? STAT_TYPE (val) : STAT_DECL (val);\n+      else if (want_type && !DECL_DECLARES_TYPE_P (val))\n+\tval = NULL_TREE;\n     }\n   else\n     {\n-      if (member_vec && type_or_fns <= 0)\n+      if (member_vec && !want_type)\n \tval = member_vec_linear_search (member_vec, lookup);\n \n-      if (type_or_fns < 0)\n-\t/* Don't bother looking for field.  We don't want it.  */;\n-      else if (!val || (TREE_CODE (val) == OVERLOAD\n-\t\t\t&& OVL_DEDUP_P (val)))\n+      if (!val || (TREE_CODE (val) == OVERLOAD && OVL_DEDUP_P (val)))\n \t/* Dependent using declarations are a 'field', make sure we\n \t   return that even if we saw an overload already.  */\n-\tif (tree field_val = fields_linear_search (klass, lookup,\n-\t\t\t\t\t\t   type_or_fns > 0))\n-\t  if (!val || TREE_CODE (field_val) == USING_DECL)\n-\t    val = field_val;\n+\tif (tree field_val = fields_linear_search (klass, lookup, want_type))\n+\t  {\n+\t    if (!val)\n+\t      val = field_val;\n+\t    else if (TREE_CODE (field_val) == USING_DECL)\n+\t      val = ovl_make (field_val, val);\n+\t  }\n     }\n \n   /* Extract the conversion operators asked for, unless the general\n@@ -1278,7 +1273,7 @@ get_class_binding_direct (tree klass, tree name, int type_or_fns)\n    special function creation as necessary.  */\n \n tree\n-get_class_binding (tree klass, tree name, int type_or_fns)\n+get_class_binding (tree klass, tree name, bool want_type)\n {\n   klass = complete_type (klass);\n \n@@ -1308,7 +1303,7 @@ get_class_binding (tree klass, tree name, int type_or_fns)\n \t}\n     }\n \n-  return get_class_binding_direct (klass, name, type_or_fns);\n+  return get_class_binding_direct (klass, name, want_type);\n }\n \n /* Find the slot containing overloads called 'NAME'.  If there is no"}, {"sha": "311654af75d87071a84bcc1b9bc63b72e7cc9283", "filename": "gcc/cp/name-lookup.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a54a0d916273cf9b1be93ee5b9bed207bd3ef40/gcc%2Fcp%2Fname-lookup.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a54a0d916273cf9b1be93ee5b9bed207bd3ef40/gcc%2Fcp%2Fname-lookup.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.h?ref=9a54a0d916273cf9b1be93ee5b9bed207bd3ef40", "patch": "@@ -303,8 +303,8 @@ extern void do_namespace_alias (tree, tree);\n extern tree do_class_using_decl (tree, tree);\n extern tree lookup_arg_dependent (tree, tree, vec<tree, va_gc> *);\n extern tree search_anon_aggr (tree, tree, bool = false);\n-extern tree get_class_binding_direct (tree, tree, int type_or_fns = -1);\n-extern tree get_class_binding (tree, tree, int type_or_fns = -1);\n+extern tree get_class_binding_direct (tree, tree, bool want_type = false);\n+extern tree get_class_binding (tree, tree, bool want_type = false);\n extern tree *find_member_slot (tree klass, tree name);\n extern tree *add_member_slot (tree klass, tree name);\n extern void resort_type_member_vec (void *, void *,"}, {"sha": "1427a8ee523f4ec1024a322637274e1f77f2221b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a54a0d916273cf9b1be93ee5b9bed207bd3ef40/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a54a0d916273cf9b1be93ee5b9bed207bd3ef40/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9a54a0d916273cf9b1be93ee5b9bed207bd3ef40", "patch": "@@ -1,3 +1,7 @@\n+2019-05-01  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* g++.dg/cpp0x/decltype9.C: Adjust expected diagnostics.\n+\n 2019-04-30  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/89093"}, {"sha": "f6cfb0c67c160b63b3ea6e54e7e01d9f7b26e048", "filename": "gcc/testsuite/g++.dg/cpp0x/decltype9.C", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a54a0d916273cf9b1be93ee5b9bed207bd3ef40/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a54a0d916273cf9b1be93ee5b9bed207bd3ef40/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype9.C?ref=9a54a0d916273cf9b1be93ee5b9bed207bd3ef40", "patch": "@@ -2,8 +2,7 @@\n // { dg-do compile { target c++11 } }\n \n template<int> struct A { // { dg-message \"defined here\" }\n-  static int i;\n+  static int i; // { dg-message \"candidate\" }\n };\n \n template<int N> int A<N>::i(decltype (A::i));\t// { dg-error \"no declaration\" }\n-// { dg-message \"no functions\" \"note\" { target *-*-* } .-1 }"}]}