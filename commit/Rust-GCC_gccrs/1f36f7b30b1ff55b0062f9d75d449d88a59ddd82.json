{"sha": "1f36f7b30b1ff55b0062f9d75d449d88a59ddd82", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWYzNmY3YjMwYjFmZjU1YjAwNjJmOWQ3NWQ0NDlkODhhNTlkZGQ4Mg==", "commit": {"author": {"name": "Jim Meyering", "email": "meyering@redhat.com", "date": "2012-04-20T15:38:35Z"}, "committer": {"name": "Jim Meyering", "email": "meyering@gcc.gnu.org", "date": "2012-04-20T15:38:35Z"}, "message": "genmodes: don't truncate a mode name of length >= 7\n\n* genmodes.c (make_complex_modes): Don't truncate a mode name of\nlength 7 or more when prepending a \"C\".  Suggested by Richard Guenther.\n\nFrom-SVN: r186628", "tree": {"sha": "636b970315112fb6f1950a72514b9db2f0724360", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/636b970315112fb6f1950a72514b9db2f0724360"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f36f7b30b1ff55b0062f9d75d449d88a59ddd82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f36f7b30b1ff55b0062f9d75d449d88a59ddd82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f36f7b30b1ff55b0062f9d75d449d88a59ddd82", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f36f7b30b1ff55b0062f9d75d449d88a59ddd82/comments", "author": null, "committer": null, "parents": [{"sha": "b7262828c0cb62e9c66bdefeb306a9ccbf9eb79f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7262828c0cb62e9c66bdefeb306a9ccbf9eb79f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7262828c0cb62e9c66bdefeb306a9ccbf9eb79f"}], "stats": {"total": 37, "additions": 18, "deletions": 19}, "files": [{"sha": "0d5457d6501f1cb506255b59e1bd6c32c3d0b036", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f36f7b30b1ff55b0062f9d75d449d88a59ddd82/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f36f7b30b1ff55b0062f9d75d449d88a59ddd82/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1f36f7b30b1ff55b0062f9d75d449d88a59ddd82", "patch": "@@ -1,3 +1,8 @@\n+2012-04-20  Jim Meyering  <meyering@redhat.com>\n+\n+\t* genmodes.c (make_complex_modes): Don't truncate a mode name of\n+\tlength 7 or more when prepending a \"C\".  Suggested by Richard Guenther.\n+\n 2012-04-20  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \tPR rtl-optimization/44214"}, {"sha": "84517b9f3dcfc78fd0cb2304bb4a2954d734a35d", "filename": "gcc/genmodes.c", "status": "modified", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f36f7b30b1ff55b0062f9d75d449d88a59ddd82/gcc%2Fgenmodes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f36f7b30b1ff55b0062f9d75d449d88a59ddd82/gcc%2Fgenmodes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenmodes.c?ref=1f36f7b30b1ff55b0062f9d75d449d88a59ddd82", "patch": "@@ -427,55 +427,49 @@ make_complex_modes (enum mode_class cl,\n {\n   struct mode_data *m;\n   struct mode_data *c;\n-  char buf[8];\n   enum mode_class cclass = complex_class (cl);\n \n   if (cclass == MODE_RANDOM)\n     return;\n \n   for (m = modes[cl]; m; m = m->next)\n     {\n+      char *p, *buf;\n       size_t m_len;\n \n       /* Skip BImode.  FIXME: BImode probably shouldn't be MODE_INT.  */\n       if (m->precision == 1)\n \tcontinue;\n \n       m_len = strlen (m->name);\n-      if (m_len >= sizeof buf)\n-\t{\n-\t  error (\"%s:%d:mode name \\\"%s\\\" is too long\",\n-\t\t m->file, m->line, m->name);\n-\t  continue;\n-\t}\n+      /* The leading \"1 +\" is in case we prepend a \"C\" below.  */\n+      buf = (char *) xmalloc (1 + m_len + 1);\n \n       /* Float complex modes are named SCmode, etc.\n \t Int complex modes are named CSImode, etc.\n          This inconsistency should be eliminated.  */\n+      p = 0;\n       if (cl == MODE_FLOAT)\n \t{\n-\t  char *p, *q = 0;\n-\t  /* We verified above that m->name+NUL fits in buf.  */\n \t  memcpy (buf, m->name, m_len + 1);\n \t  p = strchr (buf, 'F');\n-\t  if (p == 0)\n-\t    q = strchr (buf, 'D');\n-\t  if (p == 0 && q == 0)\n+\t  if (p == 0 && strchr (buf, 'D') == 0)\n \t    {\n \t      error (\"%s:%d: float mode \\\"%s\\\" has no 'F' or 'D'\",\n \t\t     m->file, m->line, m->name);\n+\t      free (buf);\n \t      continue;\n \t    }\n-\n-\t  if (p != 0)\n-\t    *p = 'C';\n-\t  else\n-\t    snprintf (buf, sizeof buf, \"C%s\", m->name);\n \t}\n+      if (p != 0)\n+\t*p = 'C';\n       else\n-\tsnprintf (buf, sizeof buf, \"C%s\", m->name);\n+\t{\n+\t  buf[0] = 'C';\n+\t  memcpy (buf + 1, m->name, m_len + 1);\n+\t}\n \n-      c = new_mode (cclass, xstrdup (buf), file, line);\n+      c = new_mode (cclass, buf, file, line);\n       c->component = m;\n     }\n }"}]}