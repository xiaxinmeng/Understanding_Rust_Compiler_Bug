{"sha": "c63b98cdad0bfd07d732fffbf6013893a919bfeb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzYzYjk4Y2RhZDBiZmQwN2Q3MzJmZmZiZjYwMTM4OTNhOTE5YmZlYg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1999-12-31T03:30:22Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1999-12-31T03:30:22Z"}, "message": "class.c (assume_compiled, [...]): Add static prototype.\n\n\t* class.c (assume_compiled, assume_compiled_node): Add static\n\tprototype.\n\t(add_assume_compiled): Use xmalloc/xstrdup, not malloc/strdup.\n\n\t* jcf-dump.c (ARRAY_NEW_NUM): Cast long to int in switch.\n\n\t* jvgenmain.c (usage): Add static prototype with ATTRIBUTE_NORETURN.\n\n\t* parse.h (OBSOLETE_MODIFIER_WARNING): Rename parameter `modifier'\n\tto `__modifier' to avoid stringifying it.\n\n\t* parse.y (verify_constructor_circularity): Don't call a variadic\n\tfunction with a non-literal format string.\n\t(java_check_abstract_methods): Move unreachable code inside\n\t`continue' statement.\n\t(lookup_method_invoke): Call xstrdup, not strdup.\n\n\t* expr.c (expand_java_field_op): Avoid the use of ANSI string\n\tconcatenation.\n\n\t* jcf-parse.c (yyparse): Likewise.\n\n\t* jv-scan.c (main): Likewise.\n\nFrom-SVN: r31148", "tree": {"sha": "f85ebd132a52c9f4368a95dcbccd79d8403b7c9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f85ebd132a52c9f4368a95dcbccd79d8403b7c9d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c63b98cdad0bfd07d732fffbf6013893a919bfeb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c63b98cdad0bfd07d732fffbf6013893a919bfeb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c63b98cdad0bfd07d732fffbf6013893a919bfeb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c63b98cdad0bfd07d732fffbf6013893a919bfeb/comments", "author": null, "committer": null, "parents": [{"sha": "6bafd8b6e9fcf4c7a9606af4fc7965717c43a161", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bafd8b6e9fcf4c7a9606af4fc7965717c43a161", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bafd8b6e9fcf4c7a9606af4fc7965717c43a161"}], "stats": {"total": 73, "additions": 50, "deletions": 23}, "files": [{"sha": "9b68f752fa79a5c286dc304e8ad0e8e1c17b5290", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c63b98cdad0bfd07d732fffbf6013893a919bfeb/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c63b98cdad0bfd07d732fffbf6013893a919bfeb/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=c63b98cdad0bfd07d732fffbf6013893a919bfeb", "patch": "@@ -1,3 +1,29 @@\n+1999-12-30  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* class.c (assume_compiled, assume_compiled_node): Add static\n+\tprototype.\n+\t(add_assume_compiled): Use xmalloc/xstrdup, not malloc/strdup.\n+\n+\t* jcf-dump.c (ARRAY_NEW_NUM): Cast long to int in switch.\n+\n+\t* jvgenmain.c (usage): Add static prototype with ATTRIBUTE_NORETURN.\n+\n+\t* parse.h (OBSOLETE_MODIFIER_WARNING): Rename parameter `modifier'\n+\tto `__modifier' to avoid stringifying it.\n+\n+\t* parse.y (verify_constructor_circularity): Don't call a variadic\n+\tfunction with a non-literal format string.\n+\t(java_check_abstract_methods): Move unreachable code inside\n+\t`continue' statement.\n+\t(lookup_method_invoke): Call xstrdup, not strdup.\n+\n+\t* expr.c (expand_java_field_op): Avoid the use of ANSI string\n+\tconcatenation.\n+\n+\t* jcf-parse.c (yyparse): Likewise.\n+\n+\t* jv-scan.c (main): Likewise.\n+\t\n 1999-12-30  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* parse.h (ABSTRACT_CHECK, JCONSTRUCTOR_CHECK,"}, {"sha": "3e3cfe635507b36743c373d7dfbb13b4373eb807", "filename": "gcc/java/class.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c63b98cdad0bfd07d732fffbf6013893a919bfeb/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c63b98cdad0bfd07d732fffbf6013893a919bfeb/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=c63b98cdad0bfd07d732fffbf6013893a919bfeb", "patch": "@@ -47,6 +47,7 @@ static void append_gpp_mangled_type PROTO ((struct obstack *, tree));\n static tree mangle_static_field PROTO ((tree));\n static void add_interface_do PROTO ((tree, tree, int));\n static tree maybe_layout_super_class PROTO ((tree, tree));\n+static int assume_compiled PROTO ((const char *));\n \n static rtx registerClass_libfunc;\n \n@@ -75,6 +76,9 @@ typedef struct assume_compiled_node_struct\n   struct assume_compiled_node_struct *child;\n } assume_compiled_node;\n \n+static assume_compiled_node *find_assume_compiled_node\n+\t\t\tPROTO ((assume_compiled_node *, const char *));\n+\n /* This is the root of the include/exclude tree.  */\n \n static assume_compiled_node *assume_compiled_tree;\n@@ -83,7 +87,7 @@ static assume_compiled_node *assume_compiled_tree;\n    is IDENT.  Start the search from NODE.  Return NULL if an\n    appropriate node does not exist.  */\n \n-assume_compiled_node *\n+static assume_compiled_node *\n find_assume_compiled_node (node, ident)\n      assume_compiled_node *node;\n      const char *ident;\n@@ -131,9 +135,9 @@ add_assume_compiled (ident, excludep)\n {\n   assume_compiled_node *parent;\n   assume_compiled_node *node = \n-    (assume_compiled_node *) malloc (sizeof (assume_compiled_node));\n+    (assume_compiled_node *) xmalloc (sizeof (assume_compiled_node));\n \n-  node->ident = strdup (ident);\n+  node->ident = xstrdup (ident);\n   node->excludep = excludep;\n   node->child = NULL;\n \n@@ -142,7 +146,7 @@ add_assume_compiled (ident, excludep)\n   if (NULL == assume_compiled_tree)\n     {\n       assume_compiled_tree = \n-\t(assume_compiled_node *) malloc (sizeof (assume_compiled_node));\n+\t(assume_compiled_node *) xmalloc (sizeof (assume_compiled_node));\n       assume_compiled_tree->ident = \"\";\n       assume_compiled_tree->excludep = 0;\n       assume_compiled_tree->sibling = NULL;\n@@ -176,7 +180,7 @@ add_assume_compiled (ident, excludep)\n /* Returns non-zero if IDENT is the name of a class that the compiler\n    should assume has been compiled to FIXME  */\n \n-int\n+static int\n assume_compiled (ident)\n      const char *ident;\n {"}, {"sha": "ffeddd63d8441009282a24becc27beeef97a614c", "filename": "gcc/java/expr.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c63b98cdad0bfd07d732fffbf6013893a919bfeb/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c63b98cdad0bfd07d732fffbf6013893a919bfeb/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=c63b98cdad0bfd07d732fffbf6013893a919bfeb", "patch": "@@ -1820,8 +1820,7 @@ expand_java_field_op (is_static, is_putting, field_ref_index)\n \t      tree cfndecl_name = DECL_NAME (current_function_decl);\n \t      if (! DECL_CONSTRUCTOR_P (current_function_decl)\n \t\t  && (cfndecl_name != finit_identifier_node))\n-\t\terror_with_decl (field_decl, \"assignment to final field `%s' \"\n-\t\t\t\t \"not in constructor\");\n+\t\terror_with_decl (field_decl, \"assignment to final field `%s' not in constructor\");\n \t    }\n \t}\n       expand_assignment (field_ref, new_value, 0, 0);"}, {"sha": "8a66def1053c4c502138b9f986c86cd01c98a69a", "filename": "gcc/java/jcf-dump.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c63b98cdad0bfd07d732fffbf6013893a919bfeb/gcc%2Fjava%2Fjcf-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c63b98cdad0bfd07d732fffbf6013893a919bfeb/gcc%2Fjava%2Fjcf-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-dump.c?ref=c63b98cdad0bfd07d732fffbf6013893a919bfeb", "patch": "@@ -1018,7 +1018,7 @@ DEFUN(disassemble_method, (jcf, byte_ops, len),\n #define ARRAY_NEW(TYPE) ARRAY_NEW_##TYPE\n #define ARRAY_NEW_NUM \\\n  INT_temp = IMMEDIATE_u1; \\\n- { switch (INT_temp) {  \\\n+ { switch ((int) INT_temp) {  \\\n     case  4: fputs (\" boolean\", out); break; \\\n     case  5: fputs (\" char\", out); break; \\\n     case  6: fputs (\" float\", out); break; \\"}, {"sha": "b1c818a50c737ab297497dadf47363f77951e706", "filename": "gcc/java/jcf-parse.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c63b98cdad0bfd07d732fffbf6013893a919bfeb/gcc%2Fjava%2Fjcf-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c63b98cdad0bfd07d732fffbf6013893a919bfeb/gcc%2Fjava%2Fjcf-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-parse.c?ref=c63b98cdad0bfd07d732fffbf6013893a919bfeb", "patch": "@@ -825,8 +825,7 @@ yyparse ()\n \t    {\n \t      char *saved_input_filename = input_filename;\n \t      input_filename = value;\n-\t      warning (\"source file seen twice on command line and will be \"\n-\t\t       \"compiled only once.\");\n+\t      warning (\"source file seen twice on command line and will be compiled only once.\");\n \t      input_filename = saved_input_filename;\n \t    }\n \t  else"}, {"sha": "0e07f42363ead5a0ff13d7f9f6c70d789256ed92", "filename": "gcc/java/jv-scan.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c63b98cdad0bfd07d732fffbf6013893a919bfeb/gcc%2Fjava%2Fjv-scan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c63b98cdad0bfd07d732fffbf6013893a919bfeb/gcc%2Fjava%2Fjv-scan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjv-scan.c?ref=c63b98cdad0bfd07d732fffbf6013893a919bfeb", "patch": "@@ -99,8 +99,7 @@ DEFUN (main, (argc, argv),\n \n   /* Check on bad usage */\n   if (flag_find_main && flag_dump_class)\n-    fatal (\"Options `--print-main' and `--list-class' can't be turned on \"\n-\t   \"at the same time\");\n+    fatal (\"Options `--print-main' and `--list-class' can't be turned on at the same time\");\n \n   if (output_file && !(out = fopen (output_file, \"w\")))\n     fatal (\"Can't open output file `%s'\", output_file);"}, {"sha": "9c17455e3723874e4399c586dcad87c363be4974", "filename": "gcc/java/jvgenmain.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c63b98cdad0bfd07d732fffbf6013893a919bfeb/gcc%2Fjava%2Fjvgenmain.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c63b98cdad0bfd07d732fffbf6013893a919bfeb/gcc%2Fjava%2Fjvgenmain.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjvgenmain.c?ref=c63b98cdad0bfd07d732fffbf6013893a919bfeb", "patch": "@@ -79,6 +79,8 @@ gcc_obstack_init (obstack)\n \t\t  (void (*) PROTO((void *))) OBSTACK_CHUNK_FREE);\n }\n \n+static void usage (const char *) ATTRIBUTE_NORETURN;\n+\n static void\n usage (const char *name)\n {"}, {"sha": "13d63edd8a3503b9dbe0227fa569271604f2a8b8", "filename": "gcc/java/parse.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c63b98cdad0bfd07d732fffbf6013893a919bfeb/gcc%2Fjava%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c63b98cdad0bfd07d732fffbf6013893a919bfeb/gcc%2Fjava%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.c?ref=c63b98cdad0bfd07d732fffbf6013893a919bfeb", "patch": "@@ -6252,7 +6252,7 @@ verify_constructor_circularity (meth, current)\n \t      for (liste = list; liste; liste = TREE_CHAIN (liste))\n \t\t{\n \t\t  parse_error_context \n-\t\t    (TREE_PURPOSE (TREE_PURPOSE (liste)),\n+\t\t    (TREE_PURPOSE (TREE_PURPOSE (liste)), \"%s\",\n \t\t     constructor_circularity_msg\n \t\t      (TREE_VALUE (liste), TREE_VALUE (TREE_PURPOSE (liste)))); \n \t\t  java_error_count--;\n@@ -7618,9 +7618,8 @@ java_check_abstract_methods (interface_decl)\n \t     IDENTIFIER_POINTER \n \t       (DECL_NAME (TYPE_NAME (DECL_CONTEXT (found)))));\n \t  free (t);\n-\t  continue;\n-\t  \n \t  DECL_NAME (found) = saved_found_wfl;\n+\t  continue;\n \t}\n     }\n \n@@ -10224,7 +10223,7 @@ lookup_method_invoke (lc, cl, class, name, arg_list)\n   method = make_node (FUNCTION_TYPE);\n   TYPE_ARG_TYPES (method) = atl;\n   signature = build_java_argument_signature (method);\n-  dup = strdup (lang_printable_name (class, 0));\n+  dup = xstrdup (lang_printable_name (class, 0));\n   parse_error_context (cl, \"Can't find %s `%s(%s)' in type `%s'%s\",\n \t\t       (lc ? \"constructor\" : \"method\"),\n \t\t       (lc ? dup : IDENTIFIER_POINTER (name)),"}, {"sha": "c875592e6bf21f15f28d5f72c9bd65fee6488c96", "filename": "gcc/java/parse.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c63b98cdad0bfd07d732fffbf6013893a919bfeb/gcc%2Fjava%2Fparse.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c63b98cdad0bfd07d732fffbf6013893a919bfeb/gcc%2Fjava%2Fparse.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.h?ref=c63b98cdad0bfd07d732fffbf6013893a919bfeb", "patch": "@@ -138,12 +138,12 @@ extern tree stabilize_reference PROTO ((tree));\n \n /* Pedantic warning on obsolete modifiers. Note: when cl is NULL,\n    flags was set artificially, such as for a interface method */\n-#define OBSOLETE_MODIFIER_WARNING(cl, flags, modifier, format, arg)          \\\n+#define OBSOLETE_MODIFIER_WARNING(cl, flags, __modifier, format, arg)        \\\n   {                                                                          \\\n-    if (flag_redundant && (cl) && ((flags) & (modifier)))\t\t     \\\n+    if (flag_redundant && (cl) && ((flags) & (__modifier)))\t\t     \\\n       parse_warning_context (cl,                                             \\\n      \"Discouraged redundant use of `%s' modifier in declaration of \" format, \\\n-\t\t\t     java_accstring_lookup (modifier), arg);         \\\n+\t\t\t     java_accstring_lookup (__modifier), arg);       \\\n   }\n \n /* Quickly build a temporary pointer on hypothetical type NAME. */"}, {"sha": "49118ced5dd512130c15d1475f051853d86b7377", "filename": "gcc/java/parse.y", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c63b98cdad0bfd07d732fffbf6013893a919bfeb/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c63b98cdad0bfd07d732fffbf6013893a919bfeb/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=c63b98cdad0bfd07d732fffbf6013893a919bfeb", "patch": "@@ -3649,7 +3649,7 @@ verify_constructor_circularity (meth, current)\n \t      for (liste = list; liste; liste = TREE_CHAIN (liste))\n \t\t{\n \t\t  parse_error_context \n-\t\t    (TREE_PURPOSE (TREE_PURPOSE (liste)),\n+\t\t    (TREE_PURPOSE (TREE_PURPOSE (liste)), \"%s\",\n \t\t     constructor_circularity_msg\n \t\t      (TREE_VALUE (liste), TREE_VALUE (TREE_PURPOSE (liste)))); \n \t\t  java_error_count--;\n@@ -5015,9 +5015,8 @@ java_check_abstract_methods (interface_decl)\n \t     IDENTIFIER_POINTER \n \t       (DECL_NAME (TYPE_NAME (DECL_CONTEXT (found)))));\n \t  free (t);\n-\t  continue;\n-\t  \n \t  DECL_NAME (found) = saved_found_wfl;\n+\t  continue;\n \t}\n     }\n \n@@ -7621,7 +7620,7 @@ lookup_method_invoke (lc, cl, class, name, arg_list)\n   method = make_node (FUNCTION_TYPE);\n   TYPE_ARG_TYPES (method) = atl;\n   signature = build_java_argument_signature (method);\n-  dup = strdup (lang_printable_name (class, 0));\n+  dup = xstrdup (lang_printable_name (class, 0));\n   parse_error_context (cl, \"Can't find %s `%s(%s)' in type `%s'%s\",\n \t\t       (lc ? \"constructor\" : \"method\"),\n \t\t       (lc ? dup : IDENTIFIER_POINTER (name)),"}]}