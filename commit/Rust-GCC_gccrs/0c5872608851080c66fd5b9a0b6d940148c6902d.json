{"sha": "0c5872608851080c66fd5b9a0b6d940148c6902d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGM1ODcyNjA4ODUxMDgwYzY2ZmQ1YjlhMGI2ZDk0MDE0OGM2OTAyZA==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2011-06-18T14:48:14Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2011-06-18T14:48:14Z"}, "message": "Properly check if .init_array can be used with .ctors on targets.\n\n2011-06-18  H.J. Lu  <hongjiu.lu@intel.com>\n\n\tPR other/49325\n\t* acinclude.m4 (gcc_AC_INITFINI_ARRAY): Properly check if\n\t.init_array can be used with .ctors on targets.\n\t* configure: Regenerated.\n\nFrom-SVN: r175181", "tree": {"sha": "5cc8af97d1c0bdccd7a4ff87400e7f3b1970fb52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5cc8af97d1c0bdccd7a4ff87400e7f3b1970fb52"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c5872608851080c66fd5b9a0b6d940148c6902d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c5872608851080c66fd5b9a0b6d940148c6902d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c5872608851080c66fd5b9a0b6d940148c6902d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c5872608851080c66fd5b9a0b6d940148c6902d/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6e6224c1d0a88d5223d530f27833dd8029e6cc12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e6224c1d0a88d5223d530f27833dd8029e6cc12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e6224c1d0a88d5223d530f27833dd8029e6cc12"}], "stats": {"total": 222, "additions": 217, "deletions": 5}, "files": [{"sha": "57789e3e6b56f11e6a1482678b327fc203cd8dcd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c5872608851080c66fd5b9a0b6d940148c6902d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c5872608851080c66fd5b9a0b6d940148c6902d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0c5872608851080c66fd5b9a0b6d940148c6902d", "patch": "@@ -1,3 +1,10 @@\n+2011-06-18  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR other/49325\n+\t* acinclude.m4 (gcc_AC_INITFINI_ARRAY): Properly check if\n+\t.init_array can be used with .ctors on targets.\n+\t* configure: Regenerated.\n+\n 2011-06-18  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* tree-sra.c (type_internals_preclude_sra_p) <ARRAY_TYPE>: Return true"}, {"sha": "ff38682588041058e96ac2fd41cfc032252db8cb", "filename": "gcc/acinclude.m4", "status": "modified", "additions": 105, "deletions": 3, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c5872608851080c66fd5b9a0b6d940148c6902d/gcc%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c5872608851080c66fd5b9a0b6d940148c6902d/gcc%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Facinclude.m4?ref=0c5872608851080c66fd5b9a0b6d940148c6902d", "patch": "@@ -375,13 +375,115 @@ AC_DEFUN([gcc_AC_INITFINI_ARRAY],\n \t[], [\n AC_CACHE_CHECK(for .preinit_array/.init_array/.fini_array support,\n \t\t gcc_cv_initfini_array, [dnl\n-  AC_RUN_IFELSE([AC_LANG_SOURCE([\n+  if test \"x${build}\" = \"x${target}\" && test \"x${build}\" = \"x${host}\"; then\n+    AC_RUN_IFELSE([AC_LANG_SOURCE([\n+#ifdef __ia64__\n+/* We turn on .preinit_array/.init_array/.fini_array support for ia64\n+   if it can be used.  */\n static int x = -1;\n int main (void) { return x; }\n int foo (void) { x = 0; }\n-int (*fp) (void) __attribute__ ((section (\".init_array\"))) = foo;])],\n+int (*fp) (void) __attribute__ ((section (\".init_array\"))) = foo;\n+#else\n+extern void abort ();\n+static int count;\n+\n+static void\n+init1005 ()\n+{\n+  if (count != 0)\n+    abort ();\n+  count = 1005;\n+}\n+void (*const init_array1005[]) ()\n+  __attribute__ ((section (\".init_array.01005\"), aligned (sizeof (void *))))\n+  = { init1005 };\n+static void\n+fini1005 ()\n+{\n+  if (count != 1005)\n+    abort ();\n+}\n+void (*const fini_array1005[]) ()\n+  __attribute__ ((section (\".fini_array.01005\"), aligned (sizeof (void *))))\n+  = { fini1005 };\n+\n+static void\n+ctor1007 ()\n+{\n+  if (count != 1005)\n+    abort ();\n+  count = 1007;\n+}\n+void (*const ctors1007[]) ()\n+  __attribute__ ((section (\".ctors.64528\"), aligned (sizeof (void *))))\n+  = { ctor1007 };\n+static void\n+dtor1007 ()\n+{\n+  if (count != 1007)\n+    abort ();\n+  count = 1005;\n+}\n+void (*const dtors1007[]) ()\n+  __attribute__ ((section (\".dtors.64528\"), aligned (sizeof (void *))))\n+  = { dtor1007 };\n+\n+static void\n+init65530 ()\n+{\n+  if (count != 1007)\n+    abort ();\n+  count = 65530;\n+}\n+void (*const init_array65530[]) ()\n+  __attribute__ ((section (\".init_array.65530\"), aligned (sizeof (void *))))\n+  = { init65530 };\n+static void\n+fini65530 ()\n+{\n+  if (count != 65530)\n+    abort ();\n+  count = 1007;\n+}\n+void (*const fini_array65530[]) ()\n+  __attribute__ ((section (\".fini_array.65530\"), aligned (sizeof (void *))))\n+  = { fini65530 };\n+\n+static void\n+ctor65535 ()\n+{\n+  if (count != 65530)\n+    abort ();\n+  count = 65535;\n+}\n+void (*const ctors65535[]) ()\n+  __attribute__ ((section (\".ctors\"), aligned (sizeof (void *))))\n+  = { ctor65535 };\n+static void\n+dtor65535 ()\n+{\n+  if (count != 65535)\n+    abort ();\n+  count = 65530;\n+}\n+void (*const dtors65535[]) ()\n+  __attribute__ ((section (\".dtors\"), aligned (sizeof (void *))))\n+  = { dtor65535 };\n+\n+int\n+main ()\n+{\n+  return 0;\n+}\n+#endif\n+])],\n \t     [gcc_cv_initfini_array=yes], [gcc_cv_initfini_array=no],\n-\t     [gcc_cv_initfini_array=no])])\n+\t     [gcc_cv_initfini_array=no])\n+   else\n+     AC_MSG_CHECKING(cross compile... guessing)\n+     gcc_cv_initfini_array=no\n+   fi])\n   enable_initfini_array=$gcc_cv_initfini_array\n ])\n if test $enable_initfini_array = yes; then"}, {"sha": "10c24cc94c9e387933ac92a78804855766beaafa", "filename": "gcc/configure", "status": "modified", "additions": 105, "deletions": 2, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c5872608851080c66fd5b9a0b6d940148c6902d/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c5872608851080c66fd5b9a0b6d940148c6902d/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=0c5872608851080c66fd5b9a0b6d940148c6902d", "patch": "@@ -10459,16 +10459,114 @@ $as_echo_n \"checking for .preinit_array/.init_array/.fini_array support... \" >&6\n if test \"${gcc_cv_initfini_array+set}\" = set; then :\n   $as_echo_n \"(cached) \" >&6\n else\n+    if test \"x${build}\" = \"x${target}\" && test \"x${build}\" = \"x${host}\"; then\n     if test \"$cross_compiling\" = yes; then :\n   gcc_cv_initfini_array=no\n else\n   cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n /* end confdefs.h.  */\n \n+#ifdef __ia64__\n+/* We turn on .preinit_array/.init_array/.fini_array support for ia64\n+   if it can be used.  */\n static int x = -1;\n int main (void) { return x; }\n int foo (void) { x = 0; }\n int (*fp) (void) __attribute__ ((section (\".init_array\"))) = foo;\n+#else\n+extern void abort ();\n+static int count;\n+\n+static void\n+init1005 ()\n+{\n+  if (count != 0)\n+    abort ();\n+  count = 1005;\n+}\n+void (*const init_array1005) ()\n+  __attribute__ ((section (\".init_array.01005\"), aligned (sizeof (void *))))\n+  = { init1005 };\n+static void\n+fini1005 ()\n+{\n+  if (count != 1005)\n+    abort ();\n+}\n+void (*const fini_array1005) ()\n+  __attribute__ ((section (\".fini_array.01005\"), aligned (sizeof (void *))))\n+  = { fini1005 };\n+\n+static void\n+ctor1007 ()\n+{\n+  if (count != 1005)\n+    abort ();\n+  count = 1007;\n+}\n+void (*const ctors1007) ()\n+  __attribute__ ((section (\".ctors.64528\"), aligned (sizeof (void *))))\n+  = { ctor1007 };\n+static void\n+dtor1007 ()\n+{\n+  if (count != 1007)\n+    abort ();\n+  count = 1005;\n+}\n+void (*const dtors1007) ()\n+  __attribute__ ((section (\".dtors.64528\"), aligned (sizeof (void *))))\n+  = { dtor1007 };\n+\n+static void\n+init65530 ()\n+{\n+  if (count != 1007)\n+    abort ();\n+  count = 65530;\n+}\n+void (*const init_array65530) ()\n+  __attribute__ ((section (\".init_array.65530\"), aligned (sizeof (void *))))\n+  = { init65530 };\n+static void\n+fini65530 ()\n+{\n+  if (count != 65530)\n+    abort ();\n+  count = 1007;\n+}\n+void (*const fini_array65530) ()\n+  __attribute__ ((section (\".fini_array.65530\"), aligned (sizeof (void *))))\n+  = { fini65530 };\n+\n+static void\n+ctor65535 ()\n+{\n+  if (count != 65530)\n+    abort ();\n+  count = 65535;\n+}\n+void (*const ctors65535) ()\n+  __attribute__ ((section (\".ctors\"), aligned (sizeof (void *))))\n+  = { ctor65535 };\n+static void\n+dtor65535 ()\n+{\n+  if (count != 65535)\n+    abort ();\n+  count = 65530;\n+}\n+void (*const dtors65535) ()\n+  __attribute__ ((section (\".dtors\"), aligned (sizeof (void *))))\n+  = { dtor65535 };\n+\n+int\n+main ()\n+{\n+  return 0;\n+}\n+#endif\n+\n _ACEOF\n if ac_fn_c_try_run \"$LINENO\"; then :\n   gcc_cv_initfini_array=yes\n@@ -10479,6 +10577,11 @@ rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \\\n   conftest.$ac_objext conftest.beam conftest.$ac_ext\n fi\n \n+   else\n+     { $as_echo \"$as_me:${as_lineno-$LINENO}: checking cross compile... guessing\" >&5\n+$as_echo_n \"checking cross compile... guessing... \" >&6; }\n+     gcc_cv_initfini_array=no\n+   fi\n fi\n { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_initfini_array\" >&5\n $as_echo \"$gcc_cv_initfini_array\" >&6; }\n@@ -17520,7 +17623,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 17523 \"configure\"\n+#line 17626 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -17626,7 +17729,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 17629 \"configure\"\n+#line 17732 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H"}]}