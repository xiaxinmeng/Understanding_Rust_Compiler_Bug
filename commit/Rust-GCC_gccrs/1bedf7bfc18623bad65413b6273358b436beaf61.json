{"sha": "1bedf7bfc18623bad65413b6273358b436beaf61", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWJlZGY3YmZjMTg2MjNiYWQ2NTQxM2I2MjczMzU4YjQzNmJlYWY2MQ==", "commit": {"author": {"name": "SimplyTheOther", "email": "simplytheother@gmail.com", "date": "2020-07-23T14:05:45Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2020-11-28T21:13:19Z"}, "message": "Added NEC V850 target hook (or provisional one at least)", "tree": {"sha": "1e9ac2d05bcb8e94cc5b8ae3b7513f140e808f1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e9ac2d05bcb8e94cc5b8ae3b7513f140e808f1b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1bedf7bfc18623bad65413b6273358b436beaf61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bedf7bfc18623bad65413b6273358b436beaf61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1bedf7bfc18623bad65413b6273358b436beaf61", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bedf7bfc18623bad65413b6273358b436beaf61/comments", "author": {"login": "SimplyTheOther", "id": 19371469, "node_id": "MDQ6VXNlcjE5MzcxNDY5", "avatar_url": "https://avatars.githubusercontent.com/u/19371469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimplyTheOther", "html_url": "https://github.com/SimplyTheOther", "followers_url": "https://api.github.com/users/SimplyTheOther/followers", "following_url": "https://api.github.com/users/SimplyTheOther/following{/other_user}", "gists_url": "https://api.github.com/users/SimplyTheOther/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimplyTheOther/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimplyTheOther/subscriptions", "organizations_url": "https://api.github.com/users/SimplyTheOther/orgs", "repos_url": "https://api.github.com/users/SimplyTheOther/repos", "events_url": "https://api.github.com/users/SimplyTheOther/events{/privacy}", "received_events_url": "https://api.github.com/users/SimplyTheOther/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6bc70496837494959039523fb7982056f59347f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6bc70496837494959039523fb7982056f59347f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6bc70496837494959039523fb7982056f59347f"}], "stats": {"total": 95, "additions": 94, "deletions": 1}, "files": [{"sha": "e4fd4277702de684d9ff8bbea79853e500fceff3", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bedf7bfc18623bad65413b6273358b436beaf61/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bedf7bfc18623bad65413b6273358b436beaf61/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=1bedf7bfc18623bad65413b6273358b436beaf61", "patch": "@@ -589,6 +589,7 @@ sh[123456789lbe]*-*-* | sh-*-*)\n \t;;\n v850*-*-*)\n \tcpu_type=v850\n+\trust_target_objs=\"v850-rust.o\"\n \t;;\n tic6x-*-*)\n \tcpu_type=c6x"}, {"sha": "6ba28526b1af1c3b5d8a207cedbacb5bfaecc181", "filename": "gcc/config/sparc/sparc-rust.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bedf7bfc18623bad65413b6273358b436beaf61/gcc%2Fconfig%2Fsparc%2Fsparc-rust.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bedf7bfc18623bad65413b6273358b436beaf61/gcc%2Fconfig%2Fsparc%2Fsparc-rust.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc-rust.c?ref=1bedf7bfc18623bad65413b6273358b436beaf61", "patch": "@@ -35,7 +35,7 @@ void sparc_rust_target_cpu_info(void) {\n     /* TODO: try to isolate soft-mul-div feature (software emulation for integer multiply and divide) \n      * if doable? does gcc even support this? */\n     if (!(TARGET_FSMULD))\n-        rust_add_target_info(\"target_arch\", \"no-fsmuld\");\n+        rust_add_target_info(\"target_feature\", \"no-fsmuld\");\n     // TODO: add \"no-fmuls\" (fmuls instruction) option if can find in gcc\n     if (TARGET_V9)\n         rust_add_target_info(\"target_feature\", \"v9\");"}, {"sha": "5edba8937dce0f56a845acc2c9d1f243383d2ccd", "filename": "gcc/config/v850/t-v850", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bedf7bfc18623bad65413b6273358b436beaf61/gcc%2Fconfig%2Fv850%2Ft-v850", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bedf7bfc18623bad65413b6273358b436beaf61/gcc%2Fconfig%2Fv850%2Ft-v850", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Ft-v850?ref=1bedf7bfc18623bad65413b6273358b436beaf61", "patch": "@@ -30,6 +30,10 @@ v850-c.o: $(srcdir)/config/v850/v850-c.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n \t\t$(srcdir)/config/v850/v850-c.c \n \n+v850-rust.o: $(srcdir)/config/v850/v850-rust.c \\\n+  $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(C_COMMON_H)\n+\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<\n+\n # Local Variables:\n # mode: Makefile\n # End:"}, {"sha": "45d860693e5726b047823d663feaffb488e3253d", "filename": "gcc/config/v850/v850-protos.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bedf7bfc18623bad65413b6273358b436beaf61/gcc%2Fconfig%2Fv850%2Fv850-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bedf7bfc18623bad65413b6273358b436beaf61/gcc%2Fconfig%2Fv850%2Fv850-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850-protos.h?ref=1bedf7bfc18623bad65413b6273358b436beaf61", "patch": "@@ -65,4 +65,7 @@ extern void ghs_pragma_endtda\t\t    (struct cpp_reader *);\n extern void ghs_pragma_endsda\t\t    (struct cpp_reader *);\n extern void ghs_pragma_endzda\t\t    (struct cpp_reader *);\n \n+/* Routines implemented in v850-rust.c  */\n+extern void v850_rust_target_cpu_info (void);\n+\n #endif /* ! GCC_V850_PROTOS_H */"}, {"sha": "866774a9c2c6425ab67bde16cc7dcd0da0e1bd70", "filename": "gcc/config/v850/v850-rust.c", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bedf7bfc18623bad65413b6273358b436beaf61/gcc%2Fconfig%2Fv850%2Fv850-rust.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bedf7bfc18623bad65413b6273358b436beaf61/gcc%2Fconfig%2Fv850%2Fv850-rust.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850-rust.c?ref=1bedf7bfc18623bad65413b6273358b436beaf61", "patch": "@@ -0,0 +1,83 @@\n+/* Subroutines for the Rust front end for the NEC V850 architecture.\n+   Copyright (C) 2020 Free Software Foundation, Inc.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"tm_p.h\"\n+#include \"rust/rust-target.h\"\n+#include \"rust/rust-target-def.h\"\n+\n+/* Implement TARGET_RUST_CPU_INFO for NEC V850 targets.  */\n+\n+void v850_rust_target_cpu_info(void) {\n+    rust_add_target_info(\"target_arch\", \"v850\");\n+\n+    // appears to have no current or historical support in llvm, so names made up by me\n+    if (TARGET_APP_REGS)\n+        rust_add_target_info(\"target_feature\", \"app-regs\");\n+    if (TARGET_BIG_SWITCH) {\n+        rust_add_target_info(\"target_feature\", \"big-switch\");\n+        rust_add_target_info(\"target_feature\", \"long-jumps\");\n+    }\n+    if (TARGET_DEBUG)\n+        rust_add_target_info(\"target_feature\", \"debug\");\n+    if (TARGET_DISABLE_CALLT)\n+        rust_add_target_info(\"target_feature\", \"disable-callt\");\n+    if (TARGET_EP)\n+        rust_add_target_info(\"target_feature\", \"ep\");\n+    if (TARGET_LONG_CALLS)\n+        rust_add_target_info(\"target_feature\", \"long-calls\");\n+    if (TARGET_PROLOG_FUNCTION) \n+        rust_add_target_info(\"target_feature\", \"prolog-function\");\n+    // TODO: find if can get info from sda, zda and tda options\n+    if (TARGET_SMALL_SLD)\n+        rust_add_target_info(\"target_feature\", \"small-sld\");\n+    if (TARGET_NO_STRICT_ALIGN)\n+        rust_add_target_info(\"target_feature\", \"no-strict-align\");\n+    if (TARGET_JUMP_TABLES_IN_DATA_SECTION)\n+        rust_add_target_info(\"target_feature\", \"jump-tables-in-data-section\");\n+    if (TARGET_US_BIT_SET)\n+        rust_add_target_info(\"target_feature\", \"US-bit-set\");\n+    if (TARGET_V850)\n+        rust_add_target_info(\"target_feature\", \"v850\");\n+    if (TARGET_V850E)\n+        rust_add_target_info(\"target_feature\", \"v850e\");\n+    if (TARGET_V850E1)\n+        rust_add_target_info(\"target_feature\", \"v850e1\");\n+    if (TARGET_V850E2)\n+        rust_add_target_info(\"target_feature\", \"v850e2\");\n+    if (TARGET_V850E2V3)\n+        rust_add_target_info(\"target_feature\", \"v850e2v3\");\n+    if (TARGET_V850E2V5) // TODO: how do i deal with V850E2V4 redirecting to this?\n+        rust_add_target_info(\"target_feature\", \"v850e2v5\");\n+    if (TARGET_LOOP)\n+        rust_add_target_info(\"target_feature\", \"loop\");\n+    if (TARGET_RELAX)\n+        rust_add_target_info(\"target_feature\", \"relax\");\n+    if (TARGET_SOFT_FLOAT)\n+        rust_add_target_info(\"target_feature\", \"soft-float\");\n+    else\n+        rust_add_target_info(\"target_feature\", \"hard-float\");\n+    if (TARGET_GCC_ABI)\n+        rust_add_target_info(\"target_feature\", \"gcc-abi\");\n+    else\n+        rust_add_target_info(\"target_feature\", \"rh850-abi\");\n+    if (TARGET_8BYTE_ALIGN)\n+        rust_add_target_info(\"target_feature\", \"8byte-align\");\n+}"}, {"sha": "72daf1ad42ec99fddf975b2905f88c5b9a3a9ace", "filename": "gcc/config/v850/v850.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bedf7bfc18623bad65413b6273358b436beaf61/gcc%2Fconfig%2Fv850%2Fv850.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bedf7bfc18623bad65413b6273358b436beaf61/gcc%2Fconfig%2Fv850%2Fv850.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.h?ref=1bedf7bfc18623bad65413b6273358b436beaf61", "patch": "@@ -156,6 +156,8 @@\n     }\t\t\t\t\t\t\\\n   while(0)\n \n+#define TARGET_RUST_CPU_INFO v850_rust_target_cpu_info\n+\n #define MASK_CPU (MASK_V850 | MASK_V850E | MASK_V850E1 | MASK_V850E2 | MASK_V850E2V3 | MASK_V850E3V5)\n \f\n /* Target machine storage layout */"}]}