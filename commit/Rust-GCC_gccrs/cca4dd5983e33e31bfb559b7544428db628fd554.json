{"sha": "cca4dd5983e33e31bfb559b7544428db628fd554", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2NhNGRkNTk4M2UzM2UzMWJmYjU1OWI3NTQ0NDI4ZGI2MjhmZDU1NA==", "commit": {"author": {"name": "Andrew Haley", "email": "aph@redhat.com", "date": "2012-04-11T10:47:43Z"}, "committer": {"name": "Andrew Haley", "email": "aph@gcc.gnu.org", "date": "2012-04-11T10:47:43Z"}, "message": "jcf.h (bootstrap_method): New.\n\n2012-04-11  Andrew Haley  <aph@redhat.com>\n\n\t* jcf.h (bootstrap_method): New.\n\t(BootstrapMethods): New.\n\t(JCF): Add BootstrapMethods.\n\t(enum cpool_tag): Add MethodHandle, MethodType, and InvokeDynamic.\n\t* jcf-reader.c (jcf_parse_bootstrap_methods): New.\n\t(jcf_parse_constant_pool): Handlers for MethodHandle, MethodType,\n\tand InvokeDynamic.\n\t(jcf_parse_bootstrap_methods): New.\n\t* javaop.def (invokedynamic): New opcode.\n\t* jcf-parse.c (get_constant): An unknown constant type should not\n\tbe an internal error, but a fatal one.  Make it so.\n\t* jcf-dump.c (HANDLE_BOOTSTRAP_METHODS_ATTRIBUTE): New.\n\t(HANDLE_END_BOOTSTRAP_METHODS): New.\n\t(print_constant): Handlers for MethodHandle, MethodType, and\n\tInvokeDynamic.\n\nFrom-SVN: r186307", "tree": {"sha": "22431b761201f7586d181a8501e813148ae881b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/22431b761201f7586d181a8501e813148ae881b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cca4dd5983e33e31bfb559b7544428db628fd554", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cca4dd5983e33e31bfb559b7544428db628fd554", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cca4dd5983e33e31bfb559b7544428db628fd554", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cca4dd5983e33e31bfb559b7544428db628fd554/comments", "author": {"login": "theRealAph", "id": 254637, "node_id": "MDQ6VXNlcjI1NDYzNw==", "avatar_url": "https://avatars.githubusercontent.com/u/254637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theRealAph", "html_url": "https://github.com/theRealAph", "followers_url": "https://api.github.com/users/theRealAph/followers", "following_url": "https://api.github.com/users/theRealAph/following{/other_user}", "gists_url": "https://api.github.com/users/theRealAph/gists{/gist_id}", "starred_url": "https://api.github.com/users/theRealAph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theRealAph/subscriptions", "organizations_url": "https://api.github.com/users/theRealAph/orgs", "repos_url": "https://api.github.com/users/theRealAph/repos", "events_url": "https://api.github.com/users/theRealAph/events{/privacy}", "received_events_url": "https://api.github.com/users/theRealAph/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ada371011e40f98f5d03767f34bb11e3dbf53bab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ada371011e40f98f5d03767f34bb11e3dbf53bab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ada371011e40f98f5d03767f34bb11e3dbf53bab"}], "stats": {"total": 180, "additions": 178, "deletions": 2}, "files": [{"sha": "49db1cb7bfb73b8c9152494f9ac252d4125ddfa1", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cca4dd5983e33e31bfb559b7544428db628fd554/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cca4dd5983e33e31bfb559b7544428db628fd554/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=cca4dd5983e33e31bfb559b7544428db628fd554", "patch": "@@ -1,3 +1,21 @@\n+2012-04-11  Andrew Haley  <aph@redhat.com>\n+\n+\t* jcf.h (bootstrap_method): New.\n+\t(BootstrapMethods): New.\n+\t(JCF): Add BootstrapMethods.\n+\t(enum cpool_tag): Add MethodHandle, MethodType, and InvokeDynamic.\n+\t* jcf-reader.c (jcf_parse_bootstrap_methods): New.\n+\t(jcf_parse_constant_pool): Handlers for MethodHandle, MethodType,\n+\tand InvokeDynamic.\n+\t(jcf_parse_bootstrap_methods): New.\n+\t* javaop.def (invokedynamic): New opcode.\n+\t* jcf-parse.c (get_constant): An unknown constant type should not\n+\tbe an internal error, but a fatal one.  Make it so.\n+\t* jcf-dump.c (HANDLE_BOOTSTRAP_METHODS_ATTRIBUTE): New.\n+\t(HANDLE_END_BOOTSTRAP_METHODS): New.\n+\t(print_constant): Handlers for MethodHandle, MethodType, and\n+\tInvokeDynamic.\n+\n 2012-04-02  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* class.c (emit_register_classes_in_jcr_section): Set DECL_USER_ALIGN."}, {"sha": "6fe986d5d2d15dea0f3457bd8f7d87fafb9f9ceb", "filename": "gcc/java/javaop.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cca4dd5983e33e31bfb559b7544428db628fd554/gcc%2Fjava%2Fjavaop.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cca4dd5983e33e31bfb559b7544428db628fd554/gcc%2Fjava%2Fjavaop.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjavaop.def?ref=cca4dd5983e33e31bfb559b7544428db628fd554", "patch": "@@ -292,6 +292,7 @@ JAVAOP (invokevirtual, 182, INVOKE,  VIRTUAL,0)\n JAVAOP (invokespecial, 183, INVOKE,  SPECIAL, 0)\n JAVAOP (invokestatic,  184, INVOKE,  STATIC, 0)\n JAVAOP (invokeinterface,185, INVOKE, INTERFACE, 1)\n+JAVAOP (invokedynamic, 186, INVOKE,  DYNAMIC, 1)\n JAVAOP (new,           187, OBJECT,  PTR,    NEW)\n JAVAOP (newarray,      188, ARRAY,   NUM,    NEW)\n JAVAOP (anewarray,     189, ARRAY,   PTR,    NEW)"}, {"sha": "9173ea473cc52a02474b721648d8f44aa2b7c98c", "filename": "gcc/java/jcf-dump.c", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cca4dd5983e33e31bfb559b7544428db628fd554/gcc%2Fjava%2Fjcf-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cca4dd5983e33e31bfb559b7544428db628fd554/gcc%2Fjava%2Fjcf-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-dump.c?ref=cca4dd5983e33e31bfb559b7544428db628fd554", "patch": "@@ -430,6 +430,23 @@ utf8_equal_string (JCF *jcf, int index, const char * value)\n   print_element_value (out, jcf, 1);\t\t\t\t\t\\\n }\n \n+#define HANDLE_BOOTSTRAP_METHODS_ATTRIBUTE()\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  COMMON_HANDLE_ATTRIBUTE(jcf, attribute_name, attribute_length);\t\\\n+  fputc ('\\n', out); jcf_parse_bootstrap_methods (jcf, attribute_length); \\\n+}\n+\n+#define HANDLE_END_BOOTSTRAP_METHODS(NUM_METHODS)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    int i;\t\t\t\t\t\t\t\t\\\n+    for (i = 0; i < NUM_METHODS; i++)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\tbootstrap_method *m = &jcf->bootstrap_methods.methods[i];\t\\\n+\tfprintf (out, \"  %d: \", i);\t\t\t\t\t\\\n+\tprint_constant (out, jcf, m->method_ref, 1);\t\t\t\\\n+\tfprintf (out, \"\\n\");\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+  }\n \n #define PROCESS_OTHER_ATTRIBUTE(JCF, INDEX, LENGTH) \\\n { COMMON_HANDLE_ATTRIBUTE(JCF, INDEX, LENGTH); \\\n@@ -898,6 +915,53 @@ print_constant (FILE *out, JCF *jcf, int index, int verbosity)\n \tfputc ('\\\"', out);\n       }\n       break;\n+    case CONSTANT_MethodHandle:\n+      {\n+\tint kind = JPOOL_USHORT1 (jcf, index);\n+\tif (verbosity > 0)\n+\t  fprintf (out, \"MethodHandle kind: %d=\", kind);\n+\tswitch(kind) {\n+\tcase 1:\n+\tcase 2:\n+\tcase 3:\n+\tcase 4:\n+\t  if (verbosity > 0)\n+\t    fprintf (out, \"Fieldref: %ld=\", JPOOL_USHORT2 (jcf, index));\n+\t  print_constant (out, jcf, JPOOL_USHORT2 (jcf, index), 0);\n+\tcase 5:\n+\tcase 6:\n+\tcase 7:\n+\tcase 8:\n+\t  if (verbosity > 0)\n+\t    fprintf (out, \"Methodref: %ld=\", JPOOL_USHORT2 (jcf, index));\n+\t  print_constant (out, jcf, JPOOL_USHORT2 (jcf, index), 0);\n+\t  break;\n+\tcase 9:\n+\t  if (verbosity > 0)\n+\t    fprintf (out, \"InterfaceMethodref: %ld=\", JPOOL_USHORT2 (jcf, index));\n+\t  print_constant (out, jcf, JPOOL_USHORT2 (jcf, index), 0);\n+\t  break;\n+\t}\n+\tbreak;\n+      }\n+    case CONSTANT_MethodType:\n+      if (verbosity > 0)\n+\tfprintf (out, \"MethodType %ld: \", JPOOL_USHORT1 (jcf, index));\n+      print_signature (out, jcf, JPOOL_USHORT1 (jcf, index), 0);\n+      break;\n+    case CONSTANT_InvokeDynamic:\n+      {\n+\tuint16 name_and_type = JPOOL_USHORT2 (jcf, index);\n+\tif (verbosity > 0)\n+\t  fprintf (out, \"InvokeDynamic: \");\n+\tfprintf (out, \"bootstrap_method: %ld \", JPOOL_USHORT1 (jcf, index));\n+\tif (verbosity == 2)\n+\t  fprintf (out, \" name_and_type: %d=<\", name_and_type);\n+\tprint_constant_terse (out, jcf, name_and_type, CONSTANT_NameAndType);\n+\tif (verbosity == 2)\n+\t  fputc ('>', out);\n+\tbreak;\n+      }\n     default:\n       fprintf (out, \"(Unknown constant type %d)\", kind);\n     }"}, {"sha": "c50ec49ccc5997732277d29de97ed933b2c3fac2", "filename": "gcc/java/jcf-io.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cca4dd5983e33e31bfb559b7544428db628fd554/gcc%2Fjava%2Fjcf-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cca4dd5983e33e31bfb559b7544428db628fd554/gcc%2Fjava%2Fjcf-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-io.c?ref=cca4dd5983e33e31bfb559b7544428db628fd554", "patch": "@@ -518,6 +518,26 @@ verify_constant_pool (JCF *jcf)\n \tcase CONSTANT_Utf8:\n \tcase CONSTANT_Unicode:\n \t  break;\n+\tcase CONSTANT_MethodHandle:\n+\t  n = JPOOL_USHORT1 (jcf, i);\n+\t  if (n < 1 || n > 9)\n+\t    return i;\n+\t  n = JPOOL_USHORT2 (jcf, i);\n+\t  if (n <= 0 || n >= JPOOL_SIZE(jcf))\n+\t    return i;\n+\t  break;\n+\tcase CONSTANT_MethodType:\n+\t  n = JPOOL_USHORT1 (jcf, i);\n+\t  if (n <= 0 || n >= JPOOL_SIZE(jcf)\n+\t      || JPOOL_TAG (jcf, n) != CONSTANT_Utf8)\n+\t    return i;\n+\t  break;\n+\tcase CONSTANT_InvokeDynamic:\n+\t  n = JPOOL_USHORT2 (jcf, i);\n+\t  if (n <= 0 || n >= JPOOL_SIZE(jcf)\n+\t      || JPOOL_TAG (jcf, n) != CONSTANT_NameAndType)\n+\t    return i;\n+\t  break;\n \tdefault:\n \t  return i;\n \t}"}, {"sha": "c799676074e72ce641d721f1e923cdf983f4647a", "filename": "gcc/java/jcf-parse.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cca4dd5983e33e31bfb559b7544428db628fd554/gcc%2Fjava%2Fjcf-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cca4dd5983e33e31bfb559b7544428db628fd554/gcc%2Fjava%2Fjcf-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-parse.c?ref=cca4dd5983e33e31bfb559b7544428db628fd554", "patch": "@@ -1113,8 +1113,8 @@ get_constant (JCF *jcf, int index)\n   jcf->cpool.data[index].t = value;\n   return value;\n  bad:\n-  internal_error (\"bad value constant type %d, index %d\", \n-\t\t  JPOOL_TAG (jcf, index), index);\n+  fatal_error (\"bad value constant type %d, index %d\", \n+\t       JPOOL_TAG (jcf, index), index);\n }\n \n tree"}, {"sha": "c47436a5b0f7d72306e330638b30429d284b53f9", "filename": "gcc/java/jcf-reader.c", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cca4dd5983e33e31bfb559b7544428db628fd554/gcc%2Fjava%2Fjcf-reader.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cca4dd5983e33e31bfb559b7544428db628fd554/gcc%2Fjava%2Fjcf-reader.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-reader.c?ref=cca4dd5983e33e31bfb559b7544428db628fd554", "patch": "@@ -36,6 +36,7 @@ static int jcf_parse_fields (JCF *);\n static int jcf_parse_one_method (JCF *, int);\n static int jcf_parse_methods (JCF *);\n static int jcf_parse_final_attributes (JCF *);\n+static int jcf_parse_bootstrap_methods (JCF *, int );\n #ifdef NEED_PEEK_ATTRIBUTE\n static int peek_attribute (JCF *, int, const char *, int);\n #endif\n@@ -293,6 +294,15 @@ get_attribute (JCF *jcf, int index,\n     }\n   else\n #endif\n+  if (MATCH_ATTRIBUTE (\"BootstrapMethods\"))\n+    {\n+#ifdef HANDLE_BOOTSTRAP_METHODS_ATTRIBUTE\n+      HANDLE_BOOTSTRAP_METHODS_ATTRIBUTE();\n+#else\n+      JCF_SKIP (jcf, attribute_length);\n+#endif\n+    }\n+   else\n     {\n #ifdef PROCESS_OTHER_ATTRIBUTE\n       PROCESS_OTHER_ATTRIBUTE(jcf, attribute_name, attribute_length);\n@@ -382,6 +392,17 @@ jcf_parse_constant_pool (JCF* jcf)\n \t  JCF_SKIP (jcf, n);\n #endif\n \t  break;\n+\tcase CONSTANT_MethodHandle:\n+\t  jcf->cpool.data[i].w = JCF_readu (jcf);\n+\t  jcf->cpool.data[i].w |= JCF_readu2 (jcf) << 16;\n+\t  break;\n+\tcase CONSTANT_MethodType:\n+\t  jcf->cpool.data[i].w = JCF_readu2 (jcf);\n+\t  break;\n+\tcase CONSTANT_InvokeDynamic:\n+\t  jcf->cpool.data[i].w = JCF_readu2 (jcf);\n+\t  jcf->cpool.data[i].w |= JCF_readu2 (jcf) << 16;\n+\t  break;\n \tdefault:\n \t  return i;\n \t}\n@@ -521,3 +542,39 @@ jcf_parse_final_attributes (JCF *jcf)\n   return 0;\n }\n \n+/* Read and handle the \"BootstrapMethods\" attribute.\n+\n+   Return 0 if OK.\n+*/\n+static int\n+jcf_parse_bootstrap_methods (JCF* jcf, int attribute_length ATTRIBUTE_UNUSED)\n+{\n+  int i;\n+  uint16 num_methods = JCF_readu2 (jcf);\n+  jcf->bootstrap_methods.count = num_methods;\n+  jcf->bootstrap_methods.methods\n+    = (bootstrap_method *) ggc_alloc_atomic (num_methods\n+\t\t\t\t\t      * sizeof (bootstrap_method));\n+#ifdef HANDLE_START_BOOTSTRAP_METHODS\n+  HANDLE_START_BOOTSTRAP_METHODS (jcf, num_methods);\n+#endif\n+\n+  for (i = 0; i < num_methods; i++)\n+    {\n+      unsigned j;\n+      bootstrap_method *m = &jcf->bootstrap_methods.methods[i];\n+      m->method_ref = JCF_readu2 (jcf);\n+      m->num_arguments = JCF_readu2 (jcf);\n+      m->bootstrap_arguments\n+\t= (unsigned *) ggc_alloc_atomic (m->num_arguments\n+\t\t\t\t\t * sizeof (unsigned));\n+      for (j = 0; j < m->num_arguments; j++)\n+\tm->bootstrap_arguments[j] = JCF_readu2 (jcf);\n+    }\n+\n+#ifdef HANDLE_END_BOOTSTRAP_METHODS\n+  HANDLE_END_BOOTSTRAP_METHODS (num_methods);\n+#endif\n+\n+  return 0;\n+}"}, {"sha": "40b4ae2d27800084554d8bc8e063cccfa8d30872", "filename": "gcc/java/jcf.h", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cca4dd5983e33e31bfb559b7544428db628fd554/gcc%2Fjava%2Fjcf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cca4dd5983e33e31bfb559b7544428db628fd554/gcc%2Fjava%2Fjcf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf.h?ref=cca4dd5983e33e31bfb559b7544428db628fd554", "patch": "@@ -88,6 +88,17 @@ typedef struct GTY(()) CPool {\n \t\t\t   desc (\"cpool_entry_is_tree (%1.tags%a)\")))\tdata;\n } CPool;\n \n+typedef struct GTY(()) bootstrap_method {\n+  unsigned method_ref;\n+  unsigned num_arguments;\n+  unsigned* GTY((length (\"%h.num_arguments\"))) bootstrap_arguments;\n+} bootstrap_method;\n+\n+typedef struct GTY(()) BootstrapMethods {\n+  unsigned count;\n+  bootstrap_method* GTY((length (\"%h.count\"))) methods;\n+} BootstrapMethods;\n+\n struct ZipDirectory;\n \n /* JCF encapsulates the state of reading a Java Class File. */\n@@ -109,6 +120,7 @@ typedef struct GTY(()) JCF {\n   JCF_u2 this_class;\n   JCF_u2 super_class;\n   CPool cpool;\n+  BootstrapMethods bootstrap_methods;\n } JCF;\n /*typedef JCF*  JCF_FILE;*/\n \n@@ -245,6 +257,10 @@ enum cpool_tag\n   CONSTANT_NameAndType = 12,\n   CONSTANT_Utf8 = 1,\n   CONSTANT_Unicode = 2,\n+  CONSTANT_MethodHandle = 15,\n+  CONSTANT_MethodType = 16,\n+  CONSTANT_InvokeDynamic = 18,\n+\n   CONSTANT_None = 0\n };\n "}]}