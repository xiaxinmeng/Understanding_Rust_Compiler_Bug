{"sha": "8a42356f48f489b4e2af7b02bafac8ebaff5da09", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGE0MjM1NmY0OGY0ODliNGUyYWY3YjAyYmFmYWM4ZWJhZmY1ZGEwOQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2005-08-11T21:18:24Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2005-08-11T21:18:24Z"}, "message": "configure.ac (HAVE_HIDDEN_VISIBILITY_ATTRIBUTE): New test.\n\n\t* configure.ac (HAVE_HIDDEN_VISIBILITY_ATTRIBUTE): New test.\n\t(AH_BOTTOM): Add FFI_HIDDEN definition.\n\t* configure: Rebuilt.\n\t* fficonfig.h.in: Rebuilt.\n\t* src/powerpc/ffi.c (hidden): Remove.\n\t(ffi_closure_LINUX64, ffi_prep_args64, ffi_call_LINUX64,\n\tffi_closure_helper_LINUX64): Use FFI_HIDDEN instead of hidden.\n\t* src/powerpc/linux64_closure.S (ffi_closure_LINUX64,\n\t.ffi_closure_LINUX64): Use FFI_HIDDEN instead of .hidden.\n\t* src/x86/ffi.c (ffi_closure_SYSV, ffi_closure_raw_SYSV): Remove,\n\tadd FFI_HIDDEN to its prototype.\n\t(ffi_closure_SYSV_inner): New.\n\t* src/x86/sysv.S (ffi_closure_SYSV, ffi_closure_raw_SYSV): New.\n\t* src/x86/win32.S (ffi_closure_SYSV, ffi_closure_raw_SYSV): New.\n\nFrom-SVN: r103002", "tree": {"sha": "26c42f7f1f69f7735ef39926c2c1dd7be903a44c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/26c42f7f1f69f7735ef39926c2c1dd7be903a44c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a42356f48f489b4e2af7b02bafac8ebaff5da09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a42356f48f489b4e2af7b02bafac8ebaff5da09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a42356f48f489b4e2af7b02bafac8ebaff5da09", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a42356f48f489b4e2af7b02bafac8ebaff5da09/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dec1f3aa95606219f3b0f2255813a4d90c277451", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dec1f3aa95606219f3b0f2255813a4d90c277451", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dec1f3aa95606219f3b0f2255813a4d90c277451"}], "stats": {"total": 549, "additions": 433, "deletions": 116}, "files": [{"sha": "33fe14ae332212856b0b73584139eb80bb90efac", "filename": "libffi/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a42356f48f489b4e2af7b02bafac8ebaff5da09/libffi%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a42356f48f489b4e2af7b02bafac8ebaff5da09/libffi%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2FChangeLog?ref=8a42356f48f489b4e2af7b02bafac8ebaff5da09", "patch": "@@ -1,3 +1,20 @@\n+2005-08-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* configure.ac (HAVE_HIDDEN_VISIBILITY_ATTRIBUTE): New test.\n+\t(AH_BOTTOM): Add FFI_HIDDEN definition.\n+\t* configure: Rebuilt.\n+\t* fficonfig.h.in: Rebuilt.\n+\t* src/powerpc/ffi.c (hidden): Remove.\n+\t(ffi_closure_LINUX64, ffi_prep_args64, ffi_call_LINUX64,\n+\tffi_closure_helper_LINUX64): Use FFI_HIDDEN instead of hidden.\n+\t* src/powerpc/linux64_closure.S (ffi_closure_LINUX64,\n+\t.ffi_closure_LINUX64): Use FFI_HIDDEN instead of .hidden.\n+\t* src/x86/ffi.c (ffi_closure_SYSV, ffi_closure_raw_SYSV): Remove,\n+\tadd FFI_HIDDEN to its prototype.\n+\t(ffi_closure_SYSV_inner): New.\n+\t* src/x86/sysv.S (ffi_closure_SYSV, ffi_closure_raw_SYSV): New.\n+\t* src/x86/win32.S (ffi_closure_SYSV, ffi_closure_raw_SYSV): New.\n+\n 2005-08-10  Alfred M. Szmidt  <ams@gnu.org>\n \n \tPR libffi/21819:"}, {"sha": "a6a6e09d06c0d7a4de39edaddee7be39ac67c7be", "filename": "libffi/configure", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a42356f48f489b4e2af7b02bafac8ebaff5da09/libffi%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a42356f48f489b4e2af7b02bafac8ebaff5da09/libffi%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fconfigure?ref=8a42356f48f489b4e2af7b02bafac8ebaff5da09", "patch": "@@ -7522,6 +7522,40 @@ _ACEOF\n \n fi\n \n+echo \"$as_me:$LINENO: checking for __attribute__((visibility(\\\"hidden\\\")))\" >&5\n+echo $ECHO_N \"checking for __attribute__((visibility(\\\"hidden\\\")))... $ECHO_C\" >&6\n+if test \"${libffi_cv_hidden_visibility_attribute+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+\n+\techo 'int __attribute__ ((visibility (\"hidden\"))) foo (void) { return 1; }' > conftest.c\n+\tlibffi_cv_hidden_visibility_attribute=no\n+\tif { ac_try='${CC-cc} -Werror -S conftest.c -o conftest.s 1>&5'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+\t    if grep '\\.hidden.*foo' conftest.s >/dev/null; then\n+\t\tlibffi_cv_hidden_visibility_attribute=yes\n+\t    fi\n+\tfi\n+\trm -f conftest.*\n+\n+fi\n+echo \"$as_me:$LINENO: result: $libffi_cv_hidden_visibility_attribute\" >&5\n+echo \"${ECHO_T}$libffi_cv_hidden_visibility_attribute\" >&6\n+if test $libffi_cv_hidden_visibility_attribute = yes; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define HAVE_HIDDEN_VISIBILITY_ATTRIBUTE 1\n+_ACEOF\n+\n+fi\n+\n+\n+\n+\n \n \n "}, {"sha": "eac8e8fe42e3596bb45ad77a575672a8f3c563bb", "filename": "libffi/configure.ac", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a42356f48f489b4e2af7b02bafac8ebaff5da09/libffi%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a42356f48f489b4e2af7b02bafac8ebaff5da09/libffi%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fconfigure.ac?ref=8a42356f48f489b4e2af7b02bafac8ebaff5da09", "patch": "@@ -192,6 +192,38 @@ else\n \t      [Define to the flags needed for the .section .eh_frame directive.])\n fi\n \n+AC_CACHE_CHECK([for __attribute__((visibility(\"hidden\")))],\n+    libffi_cv_hidden_visibility_attribute, [\n+\techo 'int __attribute__ ((visibility (\"hidden\"))) foo (void) { return 1; }' > conftest.c\n+\tlibffi_cv_hidden_visibility_attribute=no\n+\tif AC_TRY_COMMAND(${CC-cc} -Werror -S conftest.c -o conftest.s 1>&AS_MESSAGE_LOG_FD); then\n+\t    if grep '\\.hidden.*foo' conftest.s >/dev/null; then\n+\t\tlibffi_cv_hidden_visibility_attribute=yes\n+\t    fi\n+\tfi\n+\trm -f conftest.*\n+    ])\n+if test $libffi_cv_hidden_visibility_attribute = yes; then\n+    AC_DEFINE(HAVE_HIDDEN_VISIBILITY_ATTRIBUTE, 1,\n+\t      [Define if __attribute__((visibility(\"hidden\"))) is supported.])\n+fi\n+\n+AH_BOTTOM([\n+#ifdef HAVE_HIDDEN_VISIBILITY_ATTRIBUTE\n+#ifdef LIBFFI_ASM\n+#define FFI_HIDDEN(name) .hidden name\n+#else\n+#define FFI_HIDDEN __attribute__ ((visibility (\"hidden\")))\n+#endif\n+#else\n+#ifdef LIBFFI_ASM\n+#define FFI_HIDDEN(name)\n+#else\n+#define FFI_HIDDEN\n+#endif\n+#endif\n+])\n+\n AC_SUBST(TARGET)\n AC_SUBST(TARGETDIR)\n "}, {"sha": "f982707344f5f3312eb5238431c79a7e1356856c", "filename": "libffi/fficonfig.h.in", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a42356f48f489b4e2af7b02bafac8ebaff5da09/libffi%2Ffficonfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a42356f48f489b4e2af7b02bafac8ebaff5da09/libffi%2Ffficonfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ffficonfig.h.in?ref=8a42356f48f489b4e2af7b02bafac8ebaff5da09", "patch": "@@ -34,6 +34,9 @@\n    */\n #undef HAVE_AS_SPARC_UA_PCREL\n \n+/* Define if __attribute__((visibility(\"hidden\"))) is supported. */\n+#undef HAVE_HIDDEN_VISIBILITY_ATTRIBUTE\n+\n /* Define to 1 if you have the <inttypes.h> header file. */\n #undef HAVE_INTTYPES_H\n \n@@ -133,3 +136,19 @@\n /* Define to 1 if your processor stores words with the most significant byte\n    first (like Motorola and SPARC, unlike Intel and VAX). */\n #undef WORDS_BIGENDIAN\n+\n+\n+#ifdef HAVE_HIDDEN_VISIBILITY_ATTRIBUTE\n+#ifdef LIBFFI_ASM\n+#define FFI_HIDDEN(name) .hidden name\n+#else\n+#define FFI_HIDDEN __attribute__ ((visibility (\"hidden\")))\n+#endif\n+#else\n+#ifdef LIBFFI_ASM\n+#define FFI_HIDDEN(name)\n+#else\n+#define FFI_HIDDEN\n+#endif\n+#endif\n+"}, {"sha": "ed02bf38d560070edcce6cb447f20309e20b807b", "filename": "libffi/src/powerpc/ffi.c", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a42356f48f489b4e2af7b02bafac8ebaff5da09/libffi%2Fsrc%2Fpowerpc%2Fffi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a42356f48f489b4e2af7b02bafac8ebaff5da09/libffi%2Fsrc%2Fpowerpc%2Fffi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fpowerpc%2Fffi.c?ref=8a42356f48f489b4e2af7b02bafac8ebaff5da09", "patch": "@@ -29,15 +29,9 @@\n #include <stdlib.h>\n #include <stdio.h>\n \n-#if __GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ > 1)\n-# define hidden __attribute__ ((visibility (\"hidden\")))\n-#else\n-# define hidden\n-#endif\n-\n \n extern void ffi_closure_SYSV(void);\n-extern void hidden ffi_closure_LINUX64(void);\n+extern void FFI_HIDDEN ffi_closure_LINUX64(void);\n \n enum {\n   /* The assembly depends on these exact flags.  */\n@@ -301,7 +295,7 @@ enum { ASM_NEEDS_REGISTERS64 = 4 };\n */\n \n /*@-exportheader@*/\n-void hidden ffi_prep_args64(extended_cif *ecif, unsigned long *const stack)\n+void FFI_HIDDEN ffi_prep_args64(extended_cif *ecif, unsigned long *const stack)\n /*@=exportheader@*/\n {\n   const unsigned long bytes = ecif->cif->bytes;\n@@ -697,10 +691,10 @@ extern void ffi_call_SYSV(/*@out@*/ extended_cif *,\n \t\t\t  unsigned, unsigned,\n \t\t\t  /*@out@*/ unsigned *,\n \t\t\t  void (*fn)());\n-extern void hidden ffi_call_LINUX64(/*@out@*/ extended_cif *,\n-\t\t\t\t    unsigned long, unsigned long,\n-\t\t\t\t    /*@out@*/ unsigned long *,\n-\t\t\t\t    void (*fn)());\n+extern void FFI_HIDDEN ffi_call_LINUX64(/*@out@*/ extended_cif *,\n+\t\t\t\t\tunsigned long, unsigned long,\n+\t\t\t\t\t/*@out@*/ unsigned long *,\n+\t\t\t\t\tvoid (*fn)());\n /*@=declundef@*/\n /*@=exportheader@*/\n \n@@ -1020,10 +1014,10 @@ ffi_closure_helper_SYSV (ffi_closure* closure, void * rvalue,\n \n }\n \n-int hidden ffi_closure_helper_LINUX64 (ffi_closure*, void*, unsigned long*,\n-\t\t\t\t       ffi_dblfl*);\n+int FFI_HIDDEN ffi_closure_helper_LINUX64 (ffi_closure*, void*, unsigned long*,\n+\t\t\t\t\t   ffi_dblfl*);\n \n-int hidden\n+int FFI_HIDDEN\n ffi_closure_helper_LINUX64 (ffi_closure *closure, void *rvalue,\n \t\t\t    unsigned long *pst, ffi_dblfl *pfr)\n {"}, {"sha": "b19bc718b504bf9f6201d2150acd45288ccc11bb", "filename": "libffi/src/powerpc/linux64_closure.S", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a42356f48f489b4e2af7b02bafac8ebaff5da09/libffi%2Fsrc%2Fpowerpc%2Flinux64_closure.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a42356f48f489b4e2af7b02bafac8ebaff5da09/libffi%2Fsrc%2Fpowerpc%2Flinux64_closure.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fpowerpc%2Flinux64_closure.S?ref=8a42356f48f489b4e2af7b02bafac8ebaff5da09", "patch": "@@ -5,7 +5,8 @@\n \t.file\t\"linux64_closure.S\"\n \n #ifdef __powerpc64__\n-\t.hidden ffi_closure_LINUX64, .ffi_closure_LINUX64\n+\tFFI_HIDDEN (ffi_closure_LINUX64)\n+\tFFI_HIDDEN (.ffi_closure_LINUX64)\n \t.globl  ffi_closure_LINUX64, .ffi_closure_LINUX64\n \t.section        \".opd\",\"aw\"\n \t.align  3"}, {"sha": "e4d5fc31c8a82c47f1c7b504c3070f852bb12273", "filename": "libffi/src/x86/ffi.c", "status": "modified", "additions": 11, "deletions": 99, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a42356f48f489b4e2af7b02bafac8ebaff5da09/libffi%2Fsrc%2Fx86%2Fffi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a42356f48f489b4e2af7b02bafac8ebaff5da09/libffi%2Fsrc%2Fx86%2Fffi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fx86%2Fffi.c?ref=8a42356f48f489b4e2af7b02bafac8ebaff5da09", "patch": "@@ -241,26 +241,24 @@ void ffi_call(/*@dependent@*/ ffi_cif *cif,\n \n static void ffi_prep_incoming_args_SYSV (char *stack, void **ret,\n \t\t\t\t\t void** args, ffi_cif* cif);\n-static void ffi_closure_SYSV (ffi_closure *)\n+void FFI_HIDDEN ffi_closure_SYSV (ffi_closure *)\n      __attribute__ ((regparm(1)));\n-static void ffi_closure_raw_SYSV (ffi_raw_closure *)\n+unsigned int FFI_HIDDEN ffi_closure_SYSV_inner (ffi_closure *, void **, void *)\n+     __attribute__ ((regparm(1)));\n+void FFI_HIDDEN ffi_closure_raw_SYSV (ffi_raw_closure *)\n      __attribute__ ((regparm(1)));\n \n /* This function is jumped to by the trampoline */\n \n-static void\n-ffi_closure_SYSV (closure)\n+unsigned int FFI_HIDDEN\n+ffi_closure_SYSV_inner (closure, respp, args)\n      ffi_closure *closure;\n+     void **respp;\n+     void *args;\n {\n-  // this is our return value storage\n-  long double    res;\n-\n   // our various things...\n   ffi_cif       *cif;\n   void         **arg_area;\n-  unsigned short rtype;\n-  void          *resp = (void*)&res;\n-  void *args = __builtin_dwarf_cfa ();\n \n   cif         = closure->cif;\n   arg_area    = (void**) alloca (cif->nargs * sizeof (void*));  \n@@ -271,46 +269,11 @@ ffi_closure_SYSV (closure)\n    * a structure, it will re-set RESP to point to the\n    * structure return address.  */\n \n-  ffi_prep_incoming_args_SYSV(args, (void**)&resp, arg_area, cif);\n-  \n-  (closure->fun) (cif, resp, arg_area, closure->user_data);\n+  ffi_prep_incoming_args_SYSV(args, respp, arg_area, cif);\n \n-  rtype = cif->flags;\n+  (closure->fun) (cif, *respp, arg_area, closure->user_data);\n \n-  /* now, do a generic return based on the value of rtype */\n-  if (rtype == FFI_TYPE_INT)\n-    {\n-      asm (\"movl (%0),%%eax\" : : \"r\" (resp) : \"eax\");\n-    }\n-  else if (rtype == FFI_TYPE_FLOAT)\n-    {\n-      asm (\"flds (%0)\" : : \"r\" (resp) : \"st\" );\n-    }\n-  else if (rtype == FFI_TYPE_DOUBLE)\n-    {\n-      asm (\"fldl (%0)\" : : \"r\" (resp) : \"st\", \"st(1)\" );\n-    }\n-  else if (rtype == FFI_TYPE_LONGDOUBLE)\n-    {\n-      asm (\"fldt (%0)\" : : \"r\" (resp) : \"st\", \"st(1)\" );\n-    }\n-  else if (rtype == FFI_TYPE_SINT64)\n-    {\n-      asm (\"movl 0(%0),%%eax;\"\n-\t   \"movl 4(%0),%%edx\" \n-\t   : : \"r\"(resp)\n-\t   : \"eax\", \"edx\");\n-    }\n-#ifdef X86_WIN32\n-  else if (rtype == FFI_TYPE_SINT8) /* 1-byte struct  */\n-    {\n-      asm (\"movsbl (%0),%%eax\" : : \"r\" (resp) : \"eax\");\n-    }\n-  else if (rtype == FFI_TYPE_SINT16) /* 2-bytes struct */\n-    {\n-      asm (\"movswl (%0),%%eax\" : : \"r\" (resp) : \"eax\");\n-    }\n-#endif\n+  return cif->flags;\n }\n \n /*@-exportheader@*/\n@@ -394,57 +357,6 @@ ffi_prep_closure (ffi_closure* closure,\n \n #if !FFI_NO_RAW_API\n \n-static void\n-ffi_closure_raw_SYSV (closure)\n-     ffi_raw_closure *closure;\n-{\n-  // this is our return value storage\n-  long double    res;\n-\n-  // our various things...\n-  ffi_raw         *raw_args;\n-  ffi_cif         *cif;\n-  unsigned short   rtype;\n-  void            *resp = (void*)&res;\n-\n-  /* get the cif */\n-  cif = closure->cif;\n-\n-  /* the SYSV/X86 abi matches the RAW API exactly, well.. almost */\n-  raw_args = (ffi_raw*) __builtin_dwarf_cfa ();\n-\n-  (closure->fun) (cif, resp, raw_args, closure->user_data);\n-\n-  rtype = cif->flags;\n-\n-  /* now, do a generic return based on the value of rtype */\n-  if (rtype == FFI_TYPE_INT)\n-    {\n-      asm (\"movl (%0),%%eax\" : : \"r\" (resp) : \"eax\");\n-    }\n-  else if (rtype == FFI_TYPE_FLOAT)\n-    {\n-      asm (\"flds (%0)\" : : \"r\" (resp) : \"st\" );\n-    }\n-  else if (rtype == FFI_TYPE_DOUBLE)\n-    {\n-      asm (\"fldl (%0)\" : : \"r\" (resp) : \"st\", \"st(1)\" );\n-    }\n-  else if (rtype == FFI_TYPE_LONGDOUBLE)\n-    {\n-      asm (\"fldt (%0)\" : : \"r\" (resp) : \"st\", \"st(1)\" );\n-    }\n-  else if (rtype == FFI_TYPE_SINT64)\n-    {\n-      asm (\"movl 0(%0),%%eax; movl 4(%0),%%edx\" \n-\t   : : \"r\"(resp)\n-\t   : \"eax\", \"edx\");\n-    }\n-}\n-\n- \n-\n-\n ffi_status\n ffi_prep_raw_closure (ffi_raw_closure* closure,\n \t\t      ffi_cif* cif,"}, {"sha": "46759f43498583642745ecb0dd34c71e3a968264", "filename": "libffi/src/x86/sysv.S", "status": "modified", "additions": 195, "deletions": 1, "changes": 196, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a42356f48f489b4e2af7b02bafac8ebaff5da09/libffi%2Fsrc%2Fx86%2Fsysv.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a42356f48f489b4e2af7b02bafac8ebaff5da09/libffi%2Fsrc%2Fx86%2Fsysv.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fx86%2Fsysv.S?ref=8a42356f48f489b4e2af7b02bafac8ebaff5da09", "patch": "@@ -1,5 +1,5 @@\n /* -----------------------------------------------------------------------\n-   sysv.S - Copyright (c) 1996, 1998, 2001, 2002, 2003  Red Hat, Inc.\n+   sysv.S - Copyright (c) 1996, 1998, 2001, 2002, 2003, 2005  Red Hat, Inc.\n    \n    X86 Foreign Function Interface \n \n@@ -130,6 +130,135 @@ epilogue:\n .ffi_call_SYSV_end:\n         .size    ffi_call_SYSV,.ffi_call_SYSV_end-ffi_call_SYSV\n \n+\t.align\t4\n+FFI_HIDDEN (ffi_closure_SYSV)\n+.globl ffi_closure_SYSV\n+\t.type\tffi_closure_SYSV, @function\n+\n+ffi_closure_SYSV:\n+.LFB2:\n+\tpushl\t%ebp\n+.LCFI2:\n+\tmovl\t%esp, %ebp\n+.LCFI3:\n+\tsubl\t$40, %esp\n+\tleal\t-24(%ebp), %edx\n+\tmovl\t%edx, -12(%ebp)\t/* resp */\n+\tleal\t8(%ebp), %edx\n+\tmovl\t%edx, 4(%esp)\t/* args = __builtin_dwarf_cfa () */\n+\tleal\t-12(%ebp), %edx\n+\tmovl\t%edx, (%esp)\t/* &resp */\n+#if defined HAVE_HIDDEN_VISIBILITY_ATTRIBUTE || !defined __PIC__\n+\tcall\tffi_closure_SYSV_inner\n+#else\n+\tmovl\t%ebx, 8(%esp)\n+.LCFI7:\n+\tcall\t1f\n+1:\tpopl\t%ebx\n+\taddl\t$_GLOBAL_OFFSET_TABLE_+[.-1b], %ebx\n+\tcall\tffi_closure_SYSV_inner@PLT\n+\tmovl\t8(%esp), %ebx\n+#endif\n+\tmovl\t-12(%ebp), %ecx\n+\tcmpl\t$FFI_TYPE_INT, %eax\n+\tje\t.Lcls_retint\n+\tcmpl\t$FFI_TYPE_FLOAT, %eax\n+\tje\t.Lcls_retfloat\n+\tcmpl\t$FFI_TYPE_DOUBLE, %eax\n+\tje\t.Lcls_retdouble\n+\tcmpl\t$FFI_TYPE_LONGDOUBLE, %eax\n+\tje\t.Lcls_retldouble\n+\tcmpl\t$FFI_TYPE_SINT64, %eax\n+\tje\t.Lcls_retllong\n+.Lcls_epilogue:\n+\tmovl\t%ebp, %esp\n+\tpopl\t%ebp\n+\tret\n+.Lcls_retint:\n+\tmovl\t(%ecx), %eax\n+\tjmp\t.Lcls_epilogue\n+.Lcls_retfloat:\n+\tflds\t(%ecx)\n+\tjmp\t.Lcls_epilogue\n+.Lcls_retdouble:\n+\tfldl\t(%ecx)\n+\tjmp\t.Lcls_epilogue\n+.Lcls_retldouble:\n+\tfldt\t(%ecx)\n+\tjmp\t.Lcls_epilogue\n+.Lcls_retllong:\n+\tmovl\t(%ecx), %eax\n+\tmovl\t4(%ecx), %edx\n+\tjmp\t.Lcls_epilogue\n+.LFE2:\n+\t.size\tffi_closure_SYSV, .-ffi_closure_SYSV\n+\n+#if !FFI_NO_RAW_API\n+\n+#define RAW_CLOSURE_CIF_OFFSET ((FFI_TRAMPOLINE_SIZE + 3) & ~3)\n+#define RAW_CLOSURE_FUN_OFFSET (RAW_CLOSURE_CIF_OFFSET + 4)\n+#define RAW_CLOSURE_USER_DATA_OFFSET (RAW_CLOSURE_FUN_OFFSET + 4)\n+#define CIF_FLAGS_OFFSET 20\n+\n+\t.align\t4\n+FFI_HIDDEN (ffi_closure_raw_SYSV)\n+.globl ffi_closure_raw_SYSV\n+\t.type\tffi_closure_raw_SYSV, @function\n+\n+ffi_closure_raw_SYSV:\n+.LFB3:\n+\tpushl\t%ebp\n+.LCFI4:\n+\tmovl\t%esp, %ebp\n+.LCFI5:\n+\tpushl\t%esi\n+.LCFI6:\n+\tsubl\t$36, %esp\n+\tmovl\tRAW_CLOSURE_CIF_OFFSET(%eax), %esi\t /* closure->cif */\n+\tmovl\tRAW_CLOSURE_USER_DATA_OFFSET(%eax), %edx /* closure->user_data */\n+\tmovl\t%edx, 12(%esp)\t/* user_data */\n+\tleal\t8(%ebp), %edx\t/* __builtin_dwarf_cfa () */\n+\tmovl\t%edx, 8(%esp)\t/* raw_args */\n+\tleal\t-24(%ebp), %edx\n+\tmovl\t%edx, 4(%esp)\t/* &res */\n+\tmovl\t%esi, (%esp)\t/* cif */\n+\tcall\t*RAW_CLOSURE_FUN_OFFSET(%eax)\t\t /* closure->fun */\n+\tmovl\tCIF_FLAGS_OFFSET(%esi), %eax\t\t /* rtype */\n+\tcmpl\t$FFI_TYPE_INT, %eax\n+\tje\t.Lrcls_retint\n+\tcmpl\t$FFI_TYPE_FLOAT, %eax\n+\tje\t.Lrcls_retfloat\n+\tcmpl\t$FFI_TYPE_DOUBLE, %eax\n+\tje\t.Lrcls_retdouble\n+\tcmpl\t$FFI_TYPE_LONGDOUBLE, %eax\n+\tje\t.Lrcls_retldouble\n+\tcmpl\t$FFI_TYPE_SINT64, %eax\n+\tje\t.Lrcls_retllong\n+.Lrcls_epilogue:\n+\taddl\t$36, %esp\n+\tpopl\t%esi\n+\tpopl\t%ebp\n+\tret\n+.Lrcls_retint:\n+\tmovl\t-24(%ebp), %eax\n+\tjmp\t.Lrcls_epilogue\n+.Lrcls_retfloat:\n+\tflds\t-24(%ebp)\n+\tjmp\t.Lrcls_epilogue\n+.Lrcls_retdouble:\n+\tfldl\t-24(%ebp)\n+\tjmp\t.Lrcls_epilogue\n+.Lrcls_retldouble:\n+\tfldt\t-24(%ebp)\n+\tjmp\t.Lrcls_epilogue\n+.Lrcls_retllong:\n+\tmovl\t-24(%ebp), %eax\n+\tmovl\t-20(%ebp), %edx\n+\tjmp\t.Lrcls_epilogue\n+.LFE3:\n+\t.size\tffi_closure_raw_SYSV, .-ffi_closure_raw_SYSV\n+#endif\n+\n \t.section\t.eh_frame,EH_FRAME_FLAGS,@progbits\n .Lframe1:\n \t.long\t.LECIE1-.LSCIE1\t/* Length of Common Information Entry */\n@@ -180,5 +309,70 @@ epilogue:\n \t.byte\t0x5\t/* .uleb128 0x5 */\n \t.align 4\n .LEFDE1:\n+.LSFDE2:\n+\t.long\t.LEFDE2-.LASFDE2\t/* FDE Length */\n+.LASFDE2:\n+\t.long\t.LASFDE2-.Lframe1\t/* FDE CIE offset */\n+#ifdef __PIC__\n+\t.long\t.LFB2-.\t/* FDE initial location */\n+#else\n+\t.long\t.LFB2\n+#endif\n+\t.long\t.LFE2-.LFB2\t/* FDE address range */\n+#ifdef __PIC__\n+\t.byte\t0x0\t/* .uleb128 0x0; Augmentation size */\n+#endif\n+\t.byte\t0x4\t/* DW_CFA_advance_loc4 */\n+\t.long\t.LCFI2-.LFB2\n+\t.byte\t0xe\t/* DW_CFA_def_cfa_offset */\n+\t.byte\t0x8\t/* .uleb128 0x8 */\n+\t.byte\t0x85\t/* DW_CFA_offset, column 0x5 */\n+\t.byte\t0x2\t/* .uleb128 0x2 */\n+\t.byte\t0x4\t/* DW_CFA_advance_loc4 */\n+\t.long\t.LCFI3-.LCFI2\n+\t.byte\t0xd\t/* DW_CFA_def_cfa_register */\n+\t.byte\t0x5\t/* .uleb128 0x5 */\n+#if !defined HAVE_HIDDEN_VISIBILITY_ATTRIBUTE && defined __PIC__\n+\t.byte\t0x4\t/* DW_CFA_advance_loc4 */\n+\t.long\t.LCFI7-.LCFI3\n+\t.byte\t0x83\t/* DW_CFA_offset, column 0x3 */\n+\t.byte\t0xa\t/* .uleb128 0xa */\n+#endif\n+\t.align 4\n+.LEFDE2:\n+\n+#if !FFI_NO_RAW_API\n+\n+.LSFDE3:\n+\t.long\t.LEFDE3-.LASFDE3\t/* FDE Length */\n+.LASFDE3:\n+\t.long\t.LASFDE3-.Lframe1\t/* FDE CIE offset */\n+#ifdef __PIC__\n+\t.long\t.LFB3-.\t/* FDE initial location */\n+#else\n+\t.long\t.LFB3\n+#endif\n+\t.long\t.LFE3-.LFB3\t/* FDE address range */\n+#ifdef __PIC__\n+\t.byte\t0x0\t/* .uleb128 0x0; Augmentation size */\n+#endif\n+\t.byte\t0x4\t/* DW_CFA_advance_loc4 */\n+\t.long\t.LCFI4-.LFB3\n+\t.byte\t0xe\t/* DW_CFA_def_cfa_offset */\n+\t.byte\t0x8\t/* .uleb128 0x8 */\n+\t.byte\t0x85\t/* DW_CFA_offset, column 0x5 */\n+\t.byte\t0x2\t/* .uleb128 0x2 */\n+\t.byte\t0x4\t/* DW_CFA_advance_loc4 */\n+\t.long\t.LCFI5-.LCFI4\n+\t.byte\t0xd\t/* DW_CFA_def_cfa_register */\n+\t.byte\t0x5\t/* .uleb128 0x5 */\n+\t.byte\t0x4\t/* DW_CFA_advance_loc4 */\n+\t.long\t.LCFI6-.LCFI5\n+\t.byte\t0x86\t/* DW_CFA_offset, column 0x6 */\n+\t.byte\t0x3\t/* .uleb128 0x3 */\n+\t.align 4\n+.LEFDE3:\n+\n+#endif\n \n #endif /* ifndef __x86_64__ */"}, {"sha": "496953e434451e4fee1df80c25fbe817b75d4b15", "filename": "libffi/src/x86/win32.S", "status": "modified", "additions": 114, "deletions": 0, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a42356f48f489b4e2af7b02bafac8ebaff5da09/libffi%2Fsrc%2Fx86%2Fwin32.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a42356f48f489b4e2af7b02bafac8ebaff5da09/libffi%2Fsrc%2Fx86%2Fwin32.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fx86%2Fwin32.S?ref=8a42356f48f489b4e2af7b02bafac8ebaff5da09", "patch": "@@ -257,3 +257,117 @@ sc_epilogue:\n         ret\n \n .ffi_call_STDCALL_end:\n+\n+\t.globl _ffi_closure_SYSV\n+_ffi_closure_SYSV:\n+\tpushl\t%ebp\n+\tmovl\t%esp, %ebp\n+\tsubl\t$40, %esp\n+\tleal\t-24(%ebp), %edx\n+\tmovl\t%edx, -12(%ebp)\t/* resp */\n+\tleal\t8(%ebp), %edx\n+\tmovl\t%edx, 4(%esp)\t/* args = __builtin_dwarf_cfa () */\n+\tleal\t-12(%ebp), %edx\n+\tmovl\t%edx, (%esp)\t/* &resp */\n+\tcall\t_ffi_closure_SYSV_inner\n+\tmovl\t-12(%ebp), %ecx\n+\tcmpl\t$FFI_TYPE_INT, %eax\n+\tje\t.Lcls_retint\n+\tcmpl\t$FFI_TYPE_FLOAT, %eax\n+\tje\t.Lcls_retfloat\n+\tcmpl\t$FFI_TYPE_DOUBLE, %eax\n+\tje\t.Lcls_retdouble\n+\tcmpl\t$FFI_TYPE_LONGDOUBLE, %eax\n+\tje\t.Lcls_retldouble\n+\tcmpl\t$FFI_TYPE_SINT64, %eax\n+\tje\t.Lcls_retllong\n+\tcmpl\t$FFI_TYPE_SINT8, %eax\t/* 1-byte struct */\n+\tje\t.Lcls_retstruct1\n+\tcmpl\t$FFI_TYPE_SINT16, %eax\t/* 2-bytes struct */\n+\tje\t.Lcls_retstruct2\n+.Lcls_epilogue:\n+\tmovl\t%ebp, %esp\n+\tpopl\t%ebp\n+\tret\n+.Lcls_retint:\n+\tmovl\t(%ecx), %eax\n+\tjmp\t.Lcls_epilogue\n+.Lcls_retfloat:\n+\tflds\t(%ecx)\n+\tjmp\t.Lcls_epilogue\n+.Lcls_retdouble:\n+\tfldl\t(%ecx)\n+\tjmp\t.Lcls_epilogue\n+.Lcls_retldouble:\n+\tfldt\t(%ecx)\n+\tjmp\t.Lcls_epilogue\n+.Lcls_retllong:\n+\tmovl\t(%ecx), %eax\n+\tmovl\t4(%ecx), %edx\n+\tjmp\t.Lcls_epilogue\n+.Lcls_retstruct1:\n+\tmovsbl\t(%ecx), %eax\n+\tjmp\t.Lcls_epilogue\n+.Lcls_retstruct2:\n+\tmovswl\t(%ecx), %eax\n+\tjmp\t.Lcls_epilogue\n+.ffi_closure_SYSV_end:\n+\n+#if !FFI_NO_RAW_API\n+\n+#define RAW_CLOSURE_CIF_OFFSET ((FFI_TRAMPOLINE_SIZE + 3) & ~3)\n+#define RAW_CLOSURE_FUN_OFFSET (RAW_CLOSURE_CIF_OFFSET + 4)\n+#define RAW_CLOSURE_USER_DATA_OFFSET (RAW_CLOSURE_FUN_OFFSET + 4)\n+#define CIF_FLAGS_OFFSET 20\n+\n+\t.balign\t16\n+\t.globl _ffi_closure_raw_SYSV\n+_ffi_closure_raw_SYSV:\n+\tpushl\t%ebp\n+\tmovl\t%esp, %ebp\n+\tpushl\t%esi\n+\tsubl\t$36, %esp\n+\tmovl\tRAW_CLOSURE_CIF_OFFSET(%eax), %esi\t /* closure->cif */\n+\tmovl\tRAW_CLOSURE_USER_DATA_OFFSET(%eax), %edx /* closure->user_data */\n+\tmovl\t%edx, 12(%esp)\t/* user_data */\n+\tleal\t8(%ebp), %edx\t/* __builtin_dwarf_cfa () */\n+\tmovl\t%edx, 8(%esp)\t/* raw_args */\n+\tleal\t-24(%ebp), %edx\n+\tmovl\t%edx, 4(%esp)\t/* &res */\n+\tmovl\t%esi, (%esp)\t/* cif */\n+\tcall\t*RAW_CLOSURE_FUN_OFFSET(%eax)\t\t /* closure->fun */\n+\tmovl\tCIF_FLAGS_OFFSET(%esi), %eax\t\t /* rtype */\n+\tcmpl\t$FFI_TYPE_INT, %eax\n+\tje\t.Lrcls_retint\n+\tcmpl\t$FFI_TYPE_FLOAT, %eax\n+\tje\t.Lrcls_retfloat\n+\tcmpl\t$FFI_TYPE_DOUBLE, %eax\n+\tje\t.Lrcls_retdouble\n+\tcmpl\t$FFI_TYPE_LONGDOUBLE, %eax\n+\tje\t.Lrcls_retldouble\n+\tcmpl\t$FFI_TYPE_SINT64, %eax\n+\tje\t.Lrcls_retllong\n+.Lrcls_epilogue:\n+\taddl\t$36, %esp\n+\tpopl\t%esi\n+\tpopl\t%ebp\n+\tret\n+.Lrcls_retint:\n+\tmovl\t-24(%ebp), %eax\n+\tjmp\t.Lrcls_epilogue\n+.Lrcls_retfloat:\n+\tflds\t-24(%ebp)\n+\tjmp\t.Lrcls_epilogue\n+.Lrcls_retdouble:\n+\tfldl\t-24(%ebp)\n+\tjmp\t.Lrcls_epilogue\n+.Lrcls_retldouble:\n+\tfldt\t-24(%ebp)\n+\tjmp\t.Lrcls_epilogue\n+.Lrcls_retllong:\n+\tmovl\t-24(%ebp), %eax\n+\tmovl\t-20(%ebp), %edx\n+\tjmp\t.Lrcls_epilogue\n+.ffi_closure_raw_SYSV_end:\n+\n+#endif"}]}