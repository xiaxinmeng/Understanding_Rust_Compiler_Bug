{"sha": "f8dd9e0de06aefc5722e0772bbb0d42427b867ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjhkZDllMGRlMDZhZWZjNTcyMmUwNzcyYmJiMGQ0MjQyN2I4NjdlZg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2009-06-19T17:17:14Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2009-06-19T17:17:14Z"}, "message": "random.tcc (discrete_distribution<>::param_type:: param_type(size_t, double, double, _Func), [...]): Tidy.\n\n2009-06-19  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/random.tcc (discrete_distribution<>::param_type::\n      \tparam_type(size_t, double, double, _Func),\n\tdiscrete_distribution<>::operator()(_UniformRandomNumberGenerator&,\n\tconst param_type&)): Tidy.\n\t(piecewise_constant_distribution<>::param_type::_M_initialize):\n\tUse reserve, fix.\n\t(piecewise_constant_distribution<>::param_type::\n\tparam_type(initializer_list<>, _Func),\n\tpiecewise_constant_distribution<>::param_type::\n\tparam_type(size_t, _RealType, _RealType, _Func),\n       \tpiecewise_linear_distribution<>::param_type::\n\tparam_type(initializer_list<>, _Func),\n       \tpiecewise_linear_distribution<>::param_type::\n\tparam_type(size_t, _RealType, _RealType, _Func)): Use reserve, tidy.\n\t(piecewise_constant_distribution<>::param_type::\n\tparam_type(_InputIteratorB, _InputIteratorB, _InputIteratorW),\n\tpiecewise_constant_distribution<>::\n\toperator()(_UniformRandomNumberGenerator&, const param_type&),\n      \tpiecewise_linear_distribution<>::\n\toperator()(_UniformRandomNumberGenerator&, const param_type&)): Fix.\n\t(operator>>(std::basic_istream<>&,\n\tpiecewise_constant_distribution<>&),\n\toperator>>(std::basic_istream<>&, piecewise_linear_distribution<>&)):\n\tUse reserve.\n\t* include/bits/random.h: Minor cosmetic changes.\n\nFrom-SVN: r148719", "tree": {"sha": "58d10d38bf76e71283bca4c6a00975f8609c04cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/58d10d38bf76e71283bca4c6a00975f8609c04cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f8dd9e0de06aefc5722e0772bbb0d42427b867ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8dd9e0de06aefc5722e0772bbb0d42427b867ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8dd9e0de06aefc5722e0772bbb0d42427b867ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8dd9e0de06aefc5722e0772bbb0d42427b867ef/comments", "author": null, "committer": null, "parents": [{"sha": "779704e7cf116eb261248a30d8b7d57157532a58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/779704e7cf116eb261248a30d8b7d57157532a58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/779704e7cf116eb261248a30d8b7d57157532a58"}], "stats": {"total": 231, "additions": 133, "deletions": 98}, "files": [{"sha": "ded7f3e25e8fb36290f078d6919db97a41492ec4", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8dd9e0de06aefc5722e0772bbb0d42427b867ef/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8dd9e0de06aefc5722e0772bbb0d42427b867ef/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f8dd9e0de06aefc5722e0772bbb0d42427b867ef", "patch": "@@ -1,3 +1,31 @@\n+2009-06-19  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/random.tcc (discrete_distribution<>::param_type::\n+      \tparam_type(size_t, double, double, _Func),\n+\tdiscrete_distribution<>::operator()(_UniformRandomNumberGenerator&,\n+\tconst param_type&)): Tidy.\n+\t(piecewise_constant_distribution<>::param_type::_M_initialize):\n+\tUse reserve, fix.\n+\t(piecewise_constant_distribution<>::param_type::\n+\tparam_type(initializer_list<>, _Func),\n+\tpiecewise_constant_distribution<>::param_type::\n+\tparam_type(size_t, _RealType, _RealType, _Func),\n+       \tpiecewise_linear_distribution<>::param_type::\n+\tparam_type(initializer_list<>, _Func),\n+       \tpiecewise_linear_distribution<>::param_type::\n+\tparam_type(size_t, _RealType, _RealType, _Func)): Use reserve, tidy.\n+\t(piecewise_constant_distribution<>::param_type::\n+\tparam_type(_InputIteratorB, _InputIteratorB, _InputIteratorW),\n+\tpiecewise_constant_distribution<>::\n+\toperator()(_UniformRandomNumberGenerator&, const param_type&),\n+      \tpiecewise_linear_distribution<>::\n+\toperator()(_UniformRandomNumberGenerator&, const param_type&)): Fix.\n+\t(operator>>(std::basic_istream<>&,\n+\tpiecewise_constant_distribution<>&),\n+\toperator>>(std::basic_istream<>&, piecewise_linear_distribution<>&)):\n+\tUse reserve.\n+\t* include/bits/random.h: Minor cosmetic changes.\n+\n 2009-06-17  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* testsuite/23_containers/list/check_construct_destroy.h: New."}, {"sha": "ec3dd13cbca8b5487200efa28e9272c54b518554", "filename": "libstdc++-v3/include/bits/random.h", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8dd9e0de06aefc5722e0772bbb0d42427b867ef/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8dd9e0de06aefc5722e0772bbb0d42427b867ef/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h?ref=f8dd9e0de06aefc5722e0772bbb0d42427b867ef", "patch": "@@ -4108,8 +4108,8 @@ namespace std\n \t: _M_param(__wbegin, __wend)\n \t{ }\n \n-      discrete_distribution(initializer_list<double> __wil)\n-      : _M_param(__wil)\n+      discrete_distribution(initializer_list<double> __wl)\n+      : _M_param(__wl)\n       { }\n \n       template<typename _Func>\n@@ -4240,7 +4240,7 @@ namespace std\n \t\t     _InputIteratorW __wbegin);\n \n \ttemplate<typename _Func>\n-\t  param_type(initializer_list<_RealType> __bil, _Func __fw);\n+\t  param_type(initializer_list<_RealType> __bi, _Func __fw);\n \n \ttemplate<typename _Func>\n \t  param_type(size_t __nw, _RealType __xmin, _RealType __xmax,\n@@ -4276,9 +4276,9 @@ namespace std\n \t{ }\n \n       template<typename _Func>\n-\tpiecewise_constant_distribution(initializer_list<_RealType> __bil,\n+\tpiecewise_constant_distribution(initializer_list<_RealType> __bl,\n \t\t\t\t\t_Func __fw)\n-\t: _M_param(__bil, __fw)\n+\t: _M_param(__bl, __fw)\n \t{ }\n \n       template<typename _Func>\n@@ -4408,15 +4408,17 @@ namespace std\n \ttypedef piecewise_linear_distribution<_RealType> distribution_type;\n \tfriend class piecewise_linear_distribution<_RealType>;\n \n-\tparam_type();\n+\tparam_type()\n+\t: _M_int(), _M_den(), _M_cp(), _M_m()\n+\t{ _M_initialize(); }\n \n \ttemplate<typename _InputIteratorB, typename _InputIteratorW>\n \t  param_type(_InputIteratorB __bfirst,\n \t\t     _InputIteratorB __bend,\n \t\t     _InputIteratorW __wbegin);\n \n \ttemplate<typename _Func>\n-\t  param_type(initializer_list<_RealType> __bil, _Func __fw);\n+\t  param_type(initializer_list<_RealType> __bl, _Func __fw);\n \n \ttemplate<typename _Func>\n \t  param_type(size_t __nw, _RealType __xmin, _RealType __xmax,\n@@ -4453,9 +4455,9 @@ namespace std\n \t{ }\n \n       template<typename _Func>\n-\tpiecewise_linear_distribution(initializer_list<_RealType> __bil,\n+\tpiecewise_linear_distribution(initializer_list<_RealType> __bl,\n \t\t\t\t      _Func __fw)\n-\t: _M_param(__bil, __fw)\n+\t: _M_param(__bl, __fw)\n \t{ }\n \n       template<typename _Func>"}, {"sha": "846b6b057115396e834547f94a7739b99b8ec2a2", "filename": "libstdc++-v3/include/bits/random.tcc", "status": "modified", "additions": 94, "deletions": 89, "changes": 183, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8dd9e0de06aefc5722e0772bbb0d42427b867ef/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8dd9e0de06aefc5722e0772bbb0d42427b867ef/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc?ref=f8dd9e0de06aefc5722e0772bbb0d42427b867ef", "patch": "@@ -1985,30 +1985,31 @@ namespace std\n \t  return;\n \t}\n \n-      double __sum = std::accumulate(_M_prob.begin(), _M_prob.end(), 0.0);\n-      //  Now normalize the densities.\n+      const double __sum = std::accumulate(_M_prob.begin(),\n+\t\t\t\t\t   _M_prob.end(), 0.0);\n+      // Now normalize the probabilites.\n       std::transform(_M_prob.begin(), _M_prob.end(), _M_prob.begin(),\n \t\t     std::bind2nd(std::divides<double>(), __sum));\n-      //  Accumulate partial sums.\n+      // Accumulate partial sums.\n+      _M_cp.reserve(_M_prob.size());\n       std::partial_sum(_M_prob.begin(), _M_prob.end(),\n \t\t       std::back_inserter(_M_cp));\n-      //  Make sure the last cumulative probablility is one.\n+      // Make sure the last cumulative probability is one.\n       _M_cp[_M_cp.size() - 1] = 1.0;\n     }\n \n   template<typename _IntType>\n     template<typename _Func>\n       discrete_distribution<_IntType>::param_type::\n-      param_type(size_t __nw, double __xmin, double __xmax,\n-\t\t _Func __fw)\n+      param_type(size_t __nw, double __xmin, double __xmax, _Func __fw)\n       : _M_prob(), _M_cp()\n       {\n-\tfor (size_t __i = 0; __i < __nw; ++__i)\n-\t  {\n-\t    const double __x = ((__nw - __i - 0.5) * __xmin\n-\t\t\t\t     + (__i + 0.5) * __xmax) / __nw;\n-\t    _M_prob.push_back(__fw(__x));\n-\t  }\n+\tconst size_t __n = __nw == 0 ? 1 : __nw;\n+\tconst double __delta = (__xmax - __xmin) / __n;\n+\n+\t_M_prob.reserve(__n);\n+\tfor (size_t __k = 0; __k < __nw; ++__k)\n+\t  _M_prob.push_back(__fw(__xmin + __k * __delta + 0.5 * __delta));\n \n \t_M_initialize();\n       }\n@@ -2026,11 +2027,8 @@ namespace std\n \tconst double __p = __aurng();\n \tauto __pos = std::lower_bound(__param._M_cp.begin(),\n \t\t\t\t      __param._M_cp.end(), __p);\n-\tif (__pos == __param._M_cp.end())\n-\t  return 0;\n-\tconst size_t __i = __pos - __param._M_cp.begin();\n \n-\treturn __i;\n+\treturn __pos - __param._M_cp.begin();\n       }\n \n   template<typename _IntType, typename _CharT, typename _Traits>\n@@ -2075,6 +2073,7 @@ namespace std\n       __is >> __n;\n \n       std::vector<double> __prob_vec;\n+      __prob_vec.reserve(__n);\n       for (; __n != 0; --__n)\n \t{\n \t  double __prob;\n@@ -2098,6 +2097,7 @@ namespace std\n       if (_M_int.size() < 2)\n \t{\n \t  _M_int.clear();\n+\t  _M_int.reserve(2);\n \t  _M_int.push_back(_RealType(0));\n \t  _M_int.push_back(_RealType(1));\n \n@@ -2107,21 +2107,21 @@ namespace std\n \t  return;\n \t}\n \n-      double __sum = 0.0;\n-      for (size_t __i = 0; __i < _M_den.size(); ++__i)\n-\t{\n-\t  __sum += _M_den[__i] * (_M_int[__i + 1] - _M_int[__i]);\n-\t  _M_cp.push_back(__sum);\n-\t}\n+      const double __sum = std::accumulate(_M_den.begin(),\n+\t\t\t\t\t   _M_den.end(), 0.0);\n \n-      //  Now normalize the densities...\n       std::transform(_M_den.begin(), _M_den.end(), _M_den.begin(),\n \t\t     std::bind2nd(std::divides<double>(), __sum));\n-      //  ... and partial sums.\n-      std::transform(_M_cp.begin(), _M_cp.end(), _M_cp.begin(),\n-\t\t     std::bind2nd(std::divides<double>(), __sum));\n-      //  Make sure the last cumulative probablility is one.\n+\n+      _M_cp.reserve(_M_den.size());\n+      std::partial_sum(_M_den.begin(), _M_den.end(),\n+\t\t       std::back_inserter(_M_cp));\n+\n+      // Make sure the last cumulative probability is one.\n       _M_cp[_M_cp.size() - 1] = 1.0;\n+\n+      for (size_t __k = 0; __k < _M_den.size(); ++__k)\n+\t_M_den[__k] /= _M_int[__k + 1] - _M_int[__k];\n     }\n \n   template<typename _RealType>\n@@ -2132,35 +2132,36 @@ namespace std\n \t\t _InputIteratorW __wbegin)\n       : _M_int(), _M_den(), _M_cp()\n       {\n-\tdo\n+\tif (__bbegin != __bend)\n \t  {\n-\t    _M_int.push_back(*__bbegin);\n-\t    ++__bbegin;\n-\t    if (__bbegin != __bend)\n+\t    for (;;)\n \t      {\n+\t\t_M_int.push_back(*__bbegin);\n+\t\t++__bbegin;\n+\t\tif (__bbegin == __bend)\n+\t\t  break;\n+\n \t\t_M_den.push_back(*__wbegin);\n \t\t++__wbegin;\n \t      }\n \t  }\n-\twhile (__bbegin != __bend);\n \n \t_M_initialize();\n       }\n \n   template<typename _RealType>\n     template<typename _Func>\n       piecewise_constant_distribution<_RealType>::param_type::\n-      param_type(initializer_list<_RealType> __bil, _Func __fw)\n+      param_type(initializer_list<_RealType> __bl, _Func __fw)\n       : _M_int(), _M_den(), _M_cp()\n       {\n-\tfor (auto __biter = __bil.begin(); __biter != __bil.end(); ++__biter)\n+\t_M_int.reserve(__bl.size());\n+\tfor (auto __biter = __bl.begin(); __biter != __bl.end(); ++__biter)\n \t  _M_int.push_back(*__biter);\n \n-\tfor (size_t __i = 0; __i < _M_int.size() - 1; ++__i)\n-\t  {\n-\t    _RealType __x = 0.5 * (_M_int[__i] + _M_int[__i + 1]);\n-\t    _M_den.push_back(__fw(__x));\n-\t  }\n+\t_M_den.reserve(_M_int.size() - 1);\n+\tfor (size_t __k = 0; __k < _M_int.size() - 1; ++__k)\n+\t  _M_den.push_back(__fw(0.5 * (_M_int[__k + 1] + _M_int[__k])));\n \n \t_M_initialize();\n       }\n@@ -2171,18 +2172,16 @@ namespace std\n       param_type(size_t __nw, _RealType __xmin, _RealType __xmax, _Func __fw)\n       : _M_int(), _M_den(), _M_cp()\n       {\n-\tfor (size_t __i = 0; __i <= __nw; ++__i)\n-\t  {\n-\t    const _RealType __x = ((__nw - __i) * __xmin\n-\t\t\t\t\t  + __i * __xmax) / __nw;\n-\t    _M_int.push_back(__x);\n-\t  }\n-\tfor (size_t __i = 0; __i < __nw; ++__i)\n-\t  {\n-\t    const _RealType __x = ((__nw - __i - 0.5) * __xmin\n-\t\t\t\t\t+ (__i + 0.5) * __xmax) / __nw;\n-\t    _M_den.push_back(__fw(__x));\n-\t  }\n+\tconst size_t __n = __nw == 0 ? 1 : __nw;\n+\tconst _RealType __delta = (__xmax - __xmin) / __n;\n+\n+\t_M_int.reserve(__n + 1);\n+\tfor (size_t __k = 0; __k <= __nw; ++__k)\n+\t  _M_int.push_back(__xmin + __k * __delta);\n+\n+\t_M_den.reserve(__n);\n+\tfor (size_t __k = 0; __k < __nw; ++__k)\n+\t  _M_den.push_back(__fw(_M_int[__k] + 0.5 * __delta));\n \n \t_M_initialize();\n       }\n@@ -2202,8 +2201,9 @@ namespace std\n \t\t\t\t      __param._M_cp.end(), __p);\n \tconst size_t __i = __pos - __param._M_cp.begin();\n \n-\treturn __param._M_int[__i]\n-\t     + (__p - __param._M_cp[__i]) / __param._M_den[__i];\n+\tconst double __pref = __i > 0 ? __param._M_cp[__i - 1] : 0.0;\n+\n+\treturn __param._M_int[__i] + (__p - __pref) / __param._M_den[__i];\n       }\n \n   template<typename _RealType, typename _CharT, typename _Traits>\n@@ -2253,6 +2253,7 @@ namespace std\n       __is >> __n;\n \n       std::vector<_RealType> __int_vec;\n+      __int_vec.reserve(__n + 1);\n       for (size_t __i = 0; __i <= __n; ++__i)\n \t{\n \t  _RealType __int;\n@@ -2261,6 +2262,7 @@ namespace std\n \t}\n \n       std::vector<double> __den_vec;\n+      __den_vec.reserve(__n);\n       for (size_t __i = 0; __i < __n; ++__i)\n \t{\n \t  double __den;\n@@ -2284,28 +2286,32 @@ namespace std\n       if (_M_int.size() < 2)\n \t{\n \t  _M_int.clear();\n+\t  _M_int.reserve(2);\n \t  _M_int.push_back(_RealType(0));\n \t  _M_int.push_back(_RealType(1));\n \n \t  _M_den.clear();\n+\t  _M_den.reserve(2);\n \t  _M_den.push_back(1.0);\n \t  _M_den.push_back(1.0);\n \n \t  return;\n \t}\n \n       double __sum = 0.0;\n-      for (size_t __i = 0; __i < _M_int.size() - 1; ++__i)\n+      _M_cp.reserve(_M_int.size() - 1);\n+      _M_m.reserve(_M_int.size() - 1);\n+      for (size_t __k = 0; __k < _M_int.size() - 1; ++__k)\n \t{\n-\t  const _RealType __delta = _M_int[__i + 1] - _M_int[__i];\n-\t  __sum += 0.5 * (_M_den[__i + 1] + _M_den[__i]) * __delta;\n+\t  const _RealType __delta = _M_int[__k + 1] - _M_int[__k];\n+\t  __sum += 0.5 * (_M_den[__k + 1] + _M_den[__k]) * __delta;\n \t  _M_cp.push_back(__sum);\n-\t  _M_m.push_back((_M_den[__i + 1] - _M_den[__i]) / __delta);\n+\t  _M_m.push_back((_M_den[__k + 1] - _M_den[__k]) / __delta);\n \t}\n \n       //  Now normalize the densities...\n       std::transform(_M_den.begin(), _M_den.end(), _M_den.begin(),\n-\t\t     std::bind2nd(std::divides<double>(),__sum));\n+\t\t     std::bind2nd(std::divides<double>(), __sum));\n       //  ... and partial sums... \n       std::transform(_M_cp.begin(), _M_cp.end(), _M_cp.begin(),\n \t\t     std::bind2nd(std::divides<double>(), __sum));\n@@ -2314,13 +2320,7 @@ namespace std\n \t\t     std::bind2nd(std::divides<double>(), __sum));\n       //  Make sure the last cumulative probablility is one.\n       _M_cp[_M_cp.size() - 1] = 1.0;\n-    }\n-\n-  template<typename _RealType>\n-    piecewise_linear_distribution<_RealType>::param_type::\n-    param_type()\n-    : _M_int(), _M_den(), _M_cp(), _M_m()\n-    { _M_initialize(); }\n+     }\n \n   template<typename _RealType>\n     template<typename _InputIteratorB, typename _InputIteratorW>\n@@ -2342,10 +2342,12 @@ namespace std\n   template<typename _RealType>\n     template<typename _Func>\n       piecewise_linear_distribution<_RealType>::param_type::\n-      param_type(initializer_list<_RealType> __bil, _Func __fw)\n+      param_type(initializer_list<_RealType> __bl, _Func __fw)\n       : _M_int(), _M_den(), _M_cp(), _M_m()\n       {\n-\tfor (auto __biter = __bil.begin(); __biter != __bil.end(); ++__biter)\n+\t_M_int.reserve(__bl.size());\n+\t_M_den.reserve(__bl.size());\n+\tfor (auto __biter = __bl.begin(); __biter != __bl.end(); ++__biter)\n \t  {\n \t    _M_int.push_back(*__biter);\n \t    _M_den.push_back(__fw(*__biter));\n@@ -2357,16 +2359,18 @@ namespace std\n   template<typename _RealType>\n     template<typename _Func>\n       piecewise_linear_distribution<_RealType>::param_type::\n-      param_type(size_t __nw, _RealType __xmin, _RealType __xmax,\n-\t\t _Func __fw)\n+      param_type(size_t __nw, _RealType __xmin, _RealType __xmax, _Func __fw)\n       : _M_int(), _M_den(), _M_cp(), _M_m()\n       {\n-\tfor (size_t __i = 0; __i <= __nw; ++__i)\n+\tconst size_t __n = __nw == 0 ? 1 : __nw;\n+\tconst _RealType __delta = (__xmax - __xmin) / __n;\n+\n+\t_M_int.reserve(__n + 1);\n+\t_M_den.reserve(__n + 1);\n+\tfor (size_t __k = 0; __k <= __nw; ++__k)\n \t  {\n-\t    const _RealType __x = ((__nw - __i) * __xmin\n-\t\t\t\t\t  + __i * __xmax) / __nw;\n-\t    _M_int.push_back(__x);\n-\t    _M_den.push_back(__fw(__x));\n+\t    _M_int.push_back(__xmin + __k * __delta);\n+\t    _M_den.push_back(__fw(_M_int[__k] + __delta));\n \t  }\n \n \t_M_initialize();\n@@ -2379,31 +2383,30 @@ namespace std\n       operator()(_UniformRandomNumberGenerator& __urng,\n \t\t const param_type& __param)\n       {\n-\tresult_type __x;\n \t__detail::_Adaptor<_UniformRandomNumberGenerator, result_type>\n \t  __aurng(__urng);\n \n \tconst double __p = __aurng();\n \tauto __pos = std::lower_bound(__param._M_cp.begin(),\n \t\t\t\t      __param._M_cp.end(), __p);\n \tconst size_t __i = __pos - __param._M_cp.begin();\n+\n+\tconst double __pref = __i > 0 ? __param._M_cp[__i - 1] : 0.0;\n+\n \tconst double __a = 0.5 * __param._M_m[__i];\n \tconst double __b = __param._M_den[__i];\n-\tconst double __c = __param._M_cp[__i];\n-\tconst double __q = -0.5 * (__b\n-#if _GLIBCXX_USE_C99_MATH_TR1\n-\t\t\t + std::copysign(std::sqrt(__b * __b\n-\t\t\t\t\t\t - 4.0 * __a * __c), __b));\n-#else\n-\t\t\t + (__b < 0.0 ? -1.0 : 1.0)\n-\t\t\t * std::sqrt(__b * __b - 4.0 * __a * __c));\n-#endif\n-\tconst double __x0 = __param._M_int[__i];\n-\tconst double __x1 = __q / __a;\n-\tconst double __x2 = __c / __q;\n-\t__x = std::max(__x0 + __x1, __x0 + __x2);\n+\tconst double __cm = __p - __pref;\n+\n+\t_RealType __x = __param._M_int[__i];\n+\tif (__a == 0)\n+\t  __x += __cm / __b;\n+\telse\n+\t  {\n+\t    const double __d = __b * __b + 4.0 * __a * __cm;\n+\t    __x += 0.5 * (std::sqrt(__d) - __b) / __a;\n+          }\n \n-\treturn __x;\n+        return __x;\n       }\n \n   template<typename _RealType, typename _CharT, typename _Traits>\n@@ -2453,6 +2456,7 @@ namespace std\n       __is >> __n;\n \n       std::vector<_RealType> __int_vec;\n+      __int_vec.reserve(__n + 1);\n       for (size_t __i = 0; __i <= __n; ++__i)\n \t{\n \t  _RealType __int;\n@@ -2461,6 +2465,7 @@ namespace std\n \t}\n \n       std::vector<double> __den_vec;\n+      __den_vec.reserve(__n + 1);\n       for (size_t __i = 0; __i <= __n; ++__i)\n \t{\n \t  double __den;"}]}