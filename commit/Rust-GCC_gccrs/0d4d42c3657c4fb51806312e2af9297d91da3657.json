{"sha": "0d4d42c3657c4fb51806312e2af9297d91da3657", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQ0ZDQyYzM2NTdjNGZiNTE4MDYzMTJlMmFmOTI5N2Q5MWRhMzY1Nw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-07-30T10:47:51Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-07-30T10:47:51Z"}, "message": "Remove change of July 21.\n\n(this_basic_block): New variable.\n(combine_instructions): Set it.\n(try_combine, distribute_links): Use it and basic_block_head to see if\nwe've gone to a new basic block instead of trying to reproduce\ncalculation done in flow.\n\nFrom-SVN: r5044", "tree": {"sha": "5463c34f82bd3ca13e81e1c596115e56be30a27c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5463c34f82bd3ca13e81e1c596115e56be30a27c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d4d42c3657c4fb51806312e2af9297d91da3657", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d4d42c3657c4fb51806312e2af9297d91da3657", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d4d42c3657c4fb51806312e2af9297d91da3657", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d4d42c3657c4fb51806312e2af9297d91da3657/comments", "author": null, "committer": null, "parents": [{"sha": "5eb94e4e8b3bb7cc7407b646d982ad99a192041a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5eb94e4e8b3bb7cc7407b646d982ad99a192041a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5eb94e4e8b3bb7cc7407b646d982ad99a192041a"}], "stats": {"total": 55, "additions": 21, "deletions": 34}, "files": [{"sha": "dddb9acdd2b637f49b22ec41bfd7789813b84640", "filename": "gcc/combine.c", "status": "modified", "additions": 21, "deletions": 34, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d4d42c3657c4fb51806312e2af9297d91da3657/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d4d42c3657c4fb51806312e2af9297d91da3657/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=0d4d42c3657c4fb51806312e2af9297d91da3657", "patch": "@@ -188,10 +188,8 @@ static int subst_low_cuid;\n \n static int previous_num_undos;\n \n-/* This is non-zero if there exists at least one nonlocal_label in the\n-   current function.  This affects how basic block structure is determined.  */\n-\n-static rtx nonlocal_label_list;\n+/* Basic block number of the block in which we are performing combines.  */\n+static int this_basic_block;\n \f\n /* The next group of arrays allows the recording of the last value assigned\n    to (hard or pseudo) register n.  We use this information to see if a\n@@ -520,6 +518,7 @@ combine_instructions (f, nregs)\n \n   /* Now scan all the insns in forward order.  */\n \n+  this_basic_block = -1;\n   label_tick = 1;\n   last_call_cuid = 0;\n   mem_last_set = 0;\n@@ -532,18 +531,19 @@ combine_instructions (f, nregs)\n \n   setup_incoming_promotions ();\n \n-  nonlocal_label_list = nonlocal_label_rtx_list ();\n-\n   for (insn = f; insn; insn = next ? next : NEXT_INSN (insn))\n     {\n       next = 0;\n \n+      /* If INSN starts a new basic block, update our basic block number.  */\n+      if (this_basic_block < n_basic_blocks + 1\n+\t  && basic_block_head[this_basic_block + 1] == insn)\n+\tthis_basic_block++;\n+\n       if (GET_CODE (insn) == CODE_LABEL)\n \tlabel_tick++;\n \n-      else if (GET_CODE (insn) == INSN\n-\t       || GET_CODE (insn) == CALL_INSN\n-\t       || GET_CODE (insn) == JUMP_INSN)\n+      else if (GET_RTX_CLASS (GET_CODE (insn)) == 'i')\n \t{\n \t  /* Try this insn with each insn it links back to.  */\n \n@@ -1881,10 +1881,8 @@ try_combine (i3, i2, i1)\n \t     which we know will be a NOTE.  */\n \n \t  for (insn = NEXT_INSN (i3);\n-\t       insn && GET_CODE (insn) != CODE_LABEL\n-\t       && (GET_CODE (PREV_INSN (insn)) != CALL_INSN\n-\t\t   || nonlocal_label_list == 0)\n-\t       && GET_CODE (PREV_INSN (insn)) != JUMP_INSN;\n+\t       insn && (this_basic_block == n_basic_blocks - 1\n+\t\t\t|| insn != basic_block_head[this_basic_block + 1]);\n \t       insn = NEXT_INSN (insn))\n \t    {\n \t      if (GET_RTX_CLASS (GET_CODE (insn)) == 'i'\n@@ -2045,23 +2043,14 @@ try_combine (i3, i2, i1)\n \t    && SET_DEST (XVECEXP (PATTERN (i2), 0, i)) != i2dest\n \t    && ! find_reg_note (i2, REG_UNUSED,\n \t\t\t\tSET_DEST (XVECEXP (PATTERN (i2), 0, i))))\n-\t  {\n-\t    register rtx insn;\n-\n-\t    for (insn = NEXT_INSN (i2); insn; insn = NEXT_INSN (insn))\n-\t      {\n-\t\tif (insn != i3 && GET_RTX_CLASS (GET_CODE (insn)) == 'i')\n-\t\t  for (link = LOG_LINKS (insn); link; link = XEXP (link, 1))\n-\t\t    if (XEXP (link, 0) == i2)\n-\t\t      XEXP (link, 0) = i3;\n-\n-\t\tif (GET_CODE (insn) == CODE_LABEL\n-\t\t    || GET_CODE (insn) == JUMP_INSN\n-\t\t    || (GET_CODE (PREV_INSN (insn)) == CALL_INSN\n-\t\t\t&& nonlocal_label_list != 0))\n-\t\t  break;\n-\t      }\n-\t  }\n+\t  for (temp = NEXT_INSN (i2);\n+\t       temp && (this_basic_block == n_basic_blocks - 1\n+\t\t\t|| basic_block_head[this_basic_block] != temp);\n+\t       temp = NEXT_INSN (temp))\n+\t    if (temp != i3 && GET_RTX_CLASS (GET_CODE (temp)) == 'i')\n+\t      for (link = LOG_LINKS (temp); link; link = XEXP (link, 1))\n+\t\tif (XEXP (link, 0) == i2)\n+\t\t  XEXP (link, 0) = i3;\n \n     LOG_LINKS (i3) = 0;\n     REG_NOTES (i3) = 0;\n@@ -10053,10 +10042,8 @@ distribute_links (links)\n \t since most links don't point very far away.  */\n \n       for (insn = NEXT_INSN (XEXP (link, 0));\n-\t   (insn && GET_CODE (insn) != CODE_LABEL\n-\t    && (GET_CODE (PREV_INSN (insn)) != CALL_INSN\n-\t\t|| nonlocal_label_list == 0)\n-\t    && GET_CODE (PREV_INSN (insn)) != JUMP_INSN);\n+\t   (insn && (this_basic_block == n_basic_blocks - 1\n+\t\t     || basic_block_head[this_basic_block + 1] != insn));\n \t   insn = NEXT_INSN (insn))\n \tif (GET_RTX_CLASS (GET_CODE (insn)) == 'i'\n \t    && reg_overlap_mentioned_p (reg, PATTERN (insn)))"}]}