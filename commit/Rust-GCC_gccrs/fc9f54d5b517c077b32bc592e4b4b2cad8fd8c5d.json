{"sha": "fc9f54d5b517c077b32bc592e4b4b2cad8fd8c5d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmM5ZjU0ZDViNTE3YzA3N2IzMmJjNTkyZTRiNGIyY2FkOGZkOGM1ZA==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2007-04-29T16:03:58Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2007-04-29T16:03:58Z"}, "message": "re PR fortran/31591 (UBOUND as initialization expression (lacking simplification))\n\n\tPR fortran/31591\n\n\t* simplify.c (simplify_bound_dim): New function.\n\t(simplify_bound): Use the above. Perform simplification of LBOUND\n\tand UBOUND when DIM argument is not present.\n\n\t* gfortran.dg/bound_simplification_1.f90: New test.\n\nFrom-SVN: r124281", "tree": {"sha": "d0ba31495bdf0ad73cb46d5b9a09a5436737dd67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d0ba31495bdf0ad73cb46d5b9a09a5436737dd67"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc9f54d5b517c077b32bc592e4b4b2cad8fd8c5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc9f54d5b517c077b32bc592e4b4b2cad8fd8c5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc9f54d5b517c077b32bc592e4b4b2cad8fd8c5d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc9f54d5b517c077b32bc592e4b4b2cad8fd8c5d/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26c5953d277f00dbef89d7d6122e94a282a35bca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26c5953d277f00dbef89d7d6122e94a282a35bca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26c5953d277f00dbef89d7d6122e94a282a35bca"}], "stats": {"total": 198, "additions": 154, "deletions": 44}, "files": [{"sha": "208d78471487be9e84d35626c03321c0ab668400", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc9f54d5b517c077b32bc592e4b4b2cad8fd8c5d/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc9f54d5b517c077b32bc592e4b4b2cad8fd8c5d/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=fc9f54d5b517c077b32bc592e4b4b2cad8fd8c5d", "patch": "@@ -1,3 +1,10 @@\n+2007-04-29 Francois-Xavier Coudert <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/31591\n+\t* simplify.c (simplify_bound_dim): New function.\n+\t(simplify_bound): Use the above. Perform simplification of LBOUND\n+\tand UBOUND when DIM argument is not present.\n+\n 2007-04-29  Daniel Franke  <franke.daniel@gmail.com>\n \n \t* gfortran.texi: Cleaned up keyword index."}, {"sha": "b31597d170bc190d5790554cc6bf94c5fde1d5c4", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 115, "deletions": 44, "changes": 159, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc9f54d5b517c077b32bc592e4b4b2cad8fd8c5d/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc9f54d5b517c077b32bc592e4b4b2cad8fd8c5d/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=fc9f54d5b517c077b32bc592e4b4b2cad8fd8c5d", "patch": "@@ -1938,20 +1938,57 @@ gfc_simplify_kind (gfc_expr *e)\n \n \n static gfc_expr *\n-simplify_bound (gfc_expr *array, gfc_expr *dim, int upper)\n+simplify_bound_dim (gfc_expr *array, int d, int upper, gfc_array_spec *as)\n {\n-  gfc_ref *ref;\n-  gfc_array_spec *as;\n   gfc_expr *l, *u, *result;\n-  int d;\n \n-  if (dim == NULL)\n-    /* TODO: Simplify constant multi-dimensional bounds.  */\n-    return NULL;\n+  /* The last dimension of an assumed-size array is special.  */\n+  if (d == as->rank && as->type == AS_ASSUMED_SIZE && !upper)\n+    {\n+      if (as->lower[d-1]->expr_type == EXPR_CONSTANT)\n+\treturn gfc_copy_expr (as->lower[d-1]);\n+      else\n+\treturn NULL;\n+    }\n \n-  if (dim->expr_type != EXPR_CONSTANT)\n+  /* Then, we need to know the extent of the given dimension.  */\n+  l = as->lower[d-1];\n+  u = as->upper[d-1];\n+\n+  if (l->expr_type != EXPR_CONSTANT || u->expr_type != EXPR_CONSTANT)\n     return NULL;\n \n+  result = gfc_constant_result (BT_INTEGER, gfc_default_integer_kind,\n+\t\t\t\t&array->where);\n+\n+  if (mpz_cmp (l->value.integer, u->value.integer) > 0)\n+    {\n+      /* Zero extent.  */\n+      if (upper)\n+\tmpz_set_si (result->value.integer, 0);\n+      else\n+\tmpz_set_si (result->value.integer, 1);\n+    }\n+  else\n+    {\n+      /* Nonzero extent.  */\n+      if (upper)\n+\tmpz_set (result->value.integer, u->value.integer);\n+      else\n+\tmpz_set (result->value.integer, l->value.integer);\n+    }\n+\n+  return range_check (result, upper ? \"UBOUND\" : \"LBOUND\");\n+}\n+\n+\n+static gfc_expr *\n+simplify_bound (gfc_expr *array, gfc_expr *dim, int upper)\n+{\n+  gfc_ref *ref;\n+  gfc_array_spec *as;\n+  int d;\n+\n   if (array->expr_type != EXPR_VARIABLE)\n     return NULL;\n \n@@ -1992,55 +2029,89 @@ simplify_bound (gfc_expr *array, gfc_expr *dim, int upper)\n   gcc_unreachable ();\n \n  done:\n+\n   if (as->type == AS_DEFERRED || as->type == AS_ASSUMED_SHAPE)\n     return NULL;\n \n-  d = mpz_get_si (dim->value.integer);\n-\n-  if (d < 1 || d > as->rank\n-      || (d == as->rank && as->type == AS_ASSUMED_SIZE && upper))\n+  if (dim == NULL)\n     {\n-      gfc_error (\"DIM argument at %L is out of bounds\", &dim->where);\n-      return &gfc_bad_expr;\n-    }\n+      /* Multi-dimensional bounds.  */\n+      gfc_expr *bounds[GFC_MAX_DIMENSIONS];\n+      gfc_expr *e;\n+      gfc_constructor *head, *tail;\n \n-  /* The last dimension of an assumed-size array is special.  */\n-  if (d == as->rank && as->type == AS_ASSUMED_SIZE && !upper)\n-    {\n-      if (as->lower[d-1]->expr_type == EXPR_CONSTANT)\n-\treturn gfc_copy_expr (as->lower[d-1]);\n-      else\n-\treturn NULL;\n-    }\n+      /* UBOUND(ARRAY) is not valid for an assumed-size array.  */\n+      if (upper && as->type == AS_ASSUMED_SIZE)\n+\t{\n+\t  /* An error message will be emitted in\n+\t     check_assumed_size_reference (resolve.c).  */\n+\t  return &gfc_bad_expr;\n+\t}\n \n-  /* Then, we need to know the extent of the given dimension.  */\n-  l = as->lower[d-1];\n-  u = as->upper[d-1];\n+      /* Simplify the bounds for each dimension.  */\n+      for (d = 0; d < array->rank; d++)\n+\t{\n+\t  bounds[d] = simplify_bound_dim (array, d + 1, upper, as);\n+\t  if (bounds[d] == NULL || bounds[d] == &gfc_bad_expr)\n+\t    {\n+\t      int j;\n \n-  if (l->expr_type != EXPR_CONSTANT || u->expr_type != EXPR_CONSTANT)\n-    return NULL;\n+\t      for (j = 0; j < d; j++)\n+\t\tgfc_free_expr (bounds[j]);\n+\t      return bounds[d];\n+\t    }\n+\t}\n \n-  result = gfc_constant_result (BT_INTEGER, gfc_default_integer_kind,\n-\t\t\t\t&array->where);\n+      /* Allocate the result expression.  */\n+      e = gfc_get_expr ();\n+      e->where = array->where;\n+      e->expr_type = EXPR_ARRAY;\n+      e->ts.type = BT_INTEGER;\n+      e->ts.kind = gfc_default_integer_kind;\n+\n+      /* The result is a rank 1 array; its size is the rank of the first\n+\t argument to {L,U}BOUND.  */\n+      e->rank = 1;\n+      e->shape = gfc_get_shape (1);\n+      mpz_init_set_ui (e->shape[0], array->rank);\n+\n+      /* Create the constructor for this array.  */\n+      head = tail = NULL;\n+      for (d = 0; d < array->rank; d++)\n+\t{\n+\t  /* Get a new constructor element.  */\n+\t  if (head == NULL)\n+\t    head = tail = gfc_get_constructor ();\n+\t  else\n+\t    {\n+\t      tail->next = gfc_get_constructor ();\n+\t      tail = tail->next;\n+\t    }\n \n-  if (mpz_cmp (l->value.integer, u->value.integer) > 0)\n-    {\n-      /* Zero extent.  */\n-      if (upper)\n-\tmpz_set_si (result->value.integer, 0);\n-      else\n-\tmpz_set_si (result->value.integer, 1);\n+\t  tail->where = e->where;\n+\t  tail->expr = bounds[d];\n+\t}\n+      e->value.constructor = head;\n+\n+      return e;\n     }\n   else\n     {\n-      /* Nonzero extent.  */\n-      if (upper)\n-\tmpz_set (result->value.integer, u->value.integer);\n-      else\n-\tmpz_set (result->value.integer, l->value.integer);\n-    }\n+      /* A DIM argument is specified.  */\n+      if (dim->expr_type != EXPR_CONSTANT)\n+\treturn NULL;\n \n-  return range_check (result, upper ? \"UBOUND\" : \"LBOUND\");\n+      d = mpz_get_si (dim->value.integer);\n+\n+      if (d < 1 || d > as->rank\n+\t  || (d == as->rank && as->type == AS_ASSUMED_SIZE && upper))\n+\t{\n+\t  gfc_error (\"DIM argument at %L is out of bounds\", &dim->where);\n+\t  return &gfc_bad_expr;\n+\t}\n+\n+      return simplify_bound_dim (array, d, upper, as);\n+    }\n }\n \n "}, {"sha": "d9972b7497fcb3cb9e41130db93b14ffade2e2d6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc9f54d5b517c077b32bc592e4b4b2cad8fd8c5d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc9f54d5b517c077b32bc592e4b4b2cad8fd8c5d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fc9f54d5b517c077b32bc592e4b4b2cad8fd8c5d", "patch": "@@ -1,3 +1,8 @@\n+2007-04-29 Francois-Xavier Coudert <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/31591\n+\t* gfortran.dg/bound_simplification_1.f90: New test.\n+\n 2007-04-29  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR fortran/31645"}, {"sha": "def5b7005efc4b3d8094fafcc0316b23528dbc8b", "filename": "gcc/testsuite/gfortran.dg/bound_simplification_1.f90", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc9f54d5b517c077b32bc592e4b4b2cad8fd8c5d/gcc%2Ftestsuite%2Fgfortran.dg%2Fbound_simplification_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc9f54d5b517c077b32bc592e4b4b2cad8fd8c5d/gcc%2Ftestsuite%2Fgfortran.dg%2Fbound_simplification_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbound_simplification_1.f90?ref=fc9f54d5b517c077b32bc592e4b4b2cad8fd8c5d", "patch": "@@ -0,0 +1,27 @@\n+! { dg-do run }\n+! { dg-options \"\" }\n+  implicit none\n+  real :: f(10,10,10,3,4)\n+  integer, parameter :: upper(5) = ubound(f), lower(5) = lbound (f)\n+  integer :: varu(5), varl(5)\n+\n+  varu(:) = ubound(f)\n+  varl(:) = lbound(f)\n+  if (any (varu /= upper)) call abort\n+  if (any (varl /= lower)) call abort\n+\n+  call check (f, upper, lower)\n+  call check (f, ubound(f), lbound(f))\n+\n+contains\n+\n+  subroutine check (f, upper, lower)\n+    implicit none\n+    integer :: upper(5), lower(5)\n+    real :: f(:,:,:,:,:)\n+\n+    if (any (ubound(f) /= upper)) call abort\n+    if (any (lbound(f) /= lower)) call abort\n+  end subroutine check\n+\n+end"}]}