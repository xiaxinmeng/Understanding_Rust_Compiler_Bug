{"sha": "588f75d040271e8405dca86f2bfb59d7afce8d9b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTg4Zjc1ZDA0MDI3MWU4NDA1ZGNhODZmMmJmYjU5ZDdhZmNlOGQ5Yg==", "commit": {"author": {"name": "Stuart Hastings", "email": "stuart@apple.com", "date": "2004-01-09T01:01:50Z"}, "committer": {"name": "Stuart Hastings", "email": "stuart@gcc.gnu.org", "date": "2004-01-09T01:01:50Z"}, "message": "i386.md: Typos in MMX/SSE immediate shifts.\n\n2004-01-08  Stuart Hastings  <stuart@apple.com>\n\n\t* config/i386/i386.md: Typos in MMX/SSE immediate shifts.\n\t* testsuite/gcc.dg/20020523-2.c (bail_if_no_sse): Moved cpu-ID code...\n\ttestsuite/gcc.dg/i386-cpuid.h (i386_cpuid): ...to here, to share with...\n\t* testsuite/gcc.dg/i386-sse-6.c: ...this new testcase.\n\nFrom-SVN: r75566", "tree": {"sha": "b4da94d23ce849099109f79856686c4a80998703", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b4da94d23ce849099109f79856686c4a80998703"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/588f75d040271e8405dca86f2bfb59d7afce8d9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/588f75d040271e8405dca86f2bfb59d7afce8d9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/588f75d040271e8405dca86f2bfb59d7afce8d9b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/588f75d040271e8405dca86f2bfb59d7afce8d9b/comments", "author": null, "committer": null, "parents": [{"sha": "3b458e6fa992b82049912ab5d49a6d81c50bb17f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b458e6fa992b82049912ab5d49a6d81c50bb17f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b458e6fa992b82049912ab5d49a6d81c50bb17f"}], "stats": {"total": 611, "additions": 578, "deletions": 33}, "files": [{"sha": "3e4922c16b3cc264cba5ef97a42a7e501db0049b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/588f75d040271e8405dca86f2bfb59d7afce8d9b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/588f75d040271e8405dca86f2bfb59d7afce8d9b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=588f75d040271e8405dca86f2bfb59d7afce8d9b", "patch": "@@ -1,3 +1,7 @@\n+2004-01-08  Stuart Hastings  <stuart@apple.com>\n+\n+\t* config/i386/i386.md: Typos in MMX/SSE immediate shifts.\n+\n 2004-01-08  Jan Hubicka  <jh@suse.cz>\n \n \t* cgraphunit.c (cgraph_decide_inlining):  Fix typo."}, {"sha": "ab35e075868bd4902dd654ff316919b12a350fea", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/588f75d040271e8405dca86f2bfb59d7afce8d9b/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/588f75d040271e8405dca86f2bfb59d7afce8d9b/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=588f75d040271e8405dca86f2bfb59d7afce8d9b", "patch": "@@ -22388,7 +22388,7 @@\n (define_insn \"ashrv8hi3\"\n   [(set (match_operand:V8HI 0 \"register_operand\" \"=x\")\n         (ashiftrt:V8HI (match_operand:V8HI 1 \"register_operand\" \"0\")\n-\t\t       (match_operand:TI 2 \"nonmemory_operand\" \"xi\")))]\n+\t\t       (match_operand:SI 2 \"nonmemory_operand\" \"xi\")))]\n   \"TARGET_SSE2\"\n   \"psraw\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sseishft\")\n@@ -22397,7 +22397,7 @@\n (define_insn \"ashrv4si3\"\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")\n         (ashiftrt:V4SI (match_operand:V4SI 1 \"register_operand\" \"0\")\n-\t\t       (match_operand:TI 2 \"nonmemory_operand\" \"xi\")))]\n+\t\t       (match_operand:SI 2 \"nonmemory_operand\" \"xi\")))]\n   \"TARGET_SSE2\"\n   \"psrad\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sseishft\")\n@@ -22406,7 +22406,7 @@\n (define_insn \"lshrv8hi3\"\n   [(set (match_operand:V8HI 0 \"register_operand\" \"=x\")\n         (lshiftrt:V8HI (match_operand:V8HI 1 \"register_operand\" \"0\")\n-\t\t       (match_operand:TI 2 \"nonmemory_operand\" \"xi\")))]\n+\t\t       (match_operand:SI 2 \"nonmemory_operand\" \"xi\")))]\n   \"TARGET_SSE2\"\n   \"psrlw\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sseishft\")\n@@ -22415,7 +22415,7 @@\n (define_insn \"lshrv4si3\"\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")\n         (lshiftrt:V4SI (match_operand:V4SI 1 \"register_operand\" \"0\")\n-\t\t       (match_operand:TI 2 \"nonmemory_operand\" \"xi\")))]\n+\t\t       (match_operand:SI 2 \"nonmemory_operand\" \"xi\")))]\n   \"TARGET_SSE2\"\n   \"psrld\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sseishft\")\n@@ -22424,7 +22424,7 @@\n (define_insn \"lshrv2di3\"\n   [(set (match_operand:V2DI 0 \"register_operand\" \"=x\")\n         (lshiftrt:V2DI (match_operand:V2DI 1 \"register_operand\" \"0\")\n-\t\t       (match_operand:TI 2 \"nonmemory_operand\" \"xi\")))]\n+\t\t       (match_operand:SI 2 \"nonmemory_operand\" \"xi\")))]\n   \"TARGET_SSE2\"\n   \"psrlq\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sseishft\")\n@@ -22433,7 +22433,7 @@\n (define_insn \"ashlv8hi3\"\n   [(set (match_operand:V8HI 0 \"register_operand\" \"=x\")\n         (ashift:V8HI (match_operand:V8HI 1 \"register_operand\" \"0\")\n-\t\t     (match_operand:TI 2 \"nonmemory_operand\" \"xi\")))]\n+\t\t     (match_operand:SI 2 \"nonmemory_operand\" \"xi\")))]\n   \"TARGET_SSE2\"\n   \"psllw\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sseishft\")\n@@ -22442,7 +22442,7 @@\n (define_insn \"ashlv4si3\"\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")\n         (ashift:V4SI (match_operand:V4SI 1 \"register_operand\" \"0\")\n-\t\t     (match_operand:TI 2 \"nonmemory_operand\" \"xi\")))]\n+\t\t     (match_operand:SI 2 \"nonmemory_operand\" \"xi\")))]\n   \"TARGET_SSE2\"\n   \"pslld\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sseishft\")\n@@ -22451,7 +22451,7 @@\n (define_insn \"ashlv2di3\"\n   [(set (match_operand:V2DI 0 \"register_operand\" \"=x\")\n         (ashift:V2DI (match_operand:V2DI 1 \"register_operand\" \"0\")\n-\t\t     (match_operand:TI 2 \"nonmemory_operand\" \"xi\")))]\n+\t\t     (match_operand:SI 2 \"nonmemory_operand\" \"xi\")))]\n   \"TARGET_SSE2\"\n   \"psllq\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sseishft\")\n@@ -22460,7 +22460,7 @@\n (define_insn \"ashrv8hi3_ti\"\n   [(set (match_operand:V8HI 0 \"register_operand\" \"=x\")\n         (ashiftrt:V8HI (match_operand:V8HI 1 \"register_operand\" \"0\")\n-\t\t       (subreg:TI (match_operand:V2DI 2 \"nonmemory_operand\" \"xi\") 0)))]\n+\t\t       (subreg:SI (match_operand:V2DI 2 \"nonmemory_operand\" \"xi\") 0)))]\n   \"TARGET_SSE2\"\n   \"psraw\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sseishft\")\n@@ -22469,7 +22469,7 @@\n (define_insn \"ashrv4si3_ti\"\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")\n         (ashiftrt:V4SI (match_operand:V4SI 1 \"register_operand\" \"0\")\n-\t\t       (subreg:TI (match_operand:V2DI 2 \"nonmemory_operand\" \"xi\") 0)))]\n+\t\t       (subreg:SI (match_operand:V2DI 2 \"nonmemory_operand\" \"xi\") 0)))]\n   \"TARGET_SSE2\"\n   \"psrad\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sseishft\")\n@@ -22478,7 +22478,7 @@\n (define_insn \"lshrv8hi3_ti\"\n   [(set (match_operand:V8HI 0 \"register_operand\" \"=x\")\n         (lshiftrt:V8HI (match_operand:V8HI 1 \"register_operand\" \"0\")\n-\t\t       (subreg:TI (match_operand:V2DI 2 \"nonmemory_operand\" \"xi\") 0)))]\n+\t\t       (subreg:SI (match_operand:V2DI 2 \"nonmemory_operand\" \"xi\") 0)))]\n   \"TARGET_SSE2\"\n   \"psrlw\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sseishft\")\n@@ -22487,7 +22487,7 @@\n (define_insn \"lshrv4si3_ti\"\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")\n         (lshiftrt:V4SI (match_operand:V4SI 1 \"register_operand\" \"0\")\n-\t\t       (subreg:TI (match_operand:V2DI 2 \"nonmemory_operand\" \"xi\") 0)))]\n+\t\t       (subreg:SI (match_operand:V2DI 2 \"nonmemory_operand\" \"xi\") 0)))]\n   \"TARGET_SSE2\"\n   \"psrld\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sseishft\")\n@@ -22496,7 +22496,7 @@\n (define_insn \"lshrv2di3_ti\"\n   [(set (match_operand:V2DI 0 \"register_operand\" \"=x\")\n         (lshiftrt:V2DI (match_operand:V2DI 1 \"register_operand\" \"0\")\n-\t\t       (subreg:TI (match_operand:V2DI 2 \"nonmemory_operand\" \"xi\") 0)))]\n+\t\t       (subreg:SI (match_operand:V2DI 2 \"nonmemory_operand\" \"xi\") 0)))]\n   \"TARGET_SSE2\"\n   \"psrlq\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sseishft\")\n@@ -22505,7 +22505,7 @@\n (define_insn \"ashlv8hi3_ti\"\n   [(set (match_operand:V8HI 0 \"register_operand\" \"=x\")\n         (ashift:V8HI (match_operand:V8HI 1 \"register_operand\" \"0\")\n-\t\t     (subreg:TI (match_operand:V2DI 2 \"nonmemory_operand\" \"xi\") 0)))]\n+\t\t     (subreg:SI (match_operand:V2DI 2 \"nonmemory_operand\" \"xi\") 0)))]\n   \"TARGET_SSE2\"\n   \"psllw\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sseishft\")\n@@ -22514,7 +22514,7 @@\n (define_insn \"ashlv4si3_ti\"\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")\n         (ashift:V4SI (match_operand:V4SI 1 \"register_operand\" \"0\")\n-\t\t     (subreg:TI (match_operand:V2DI 2 \"nonmemory_operand\" \"xi\") 0)))]\n+\t\t     (subreg:SI (match_operand:V2DI 2 \"nonmemory_operand\" \"xi\") 0)))]\n   \"TARGET_SSE2\"\n   \"pslld\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sseishft\")\n@@ -22523,7 +22523,7 @@\n (define_insn \"ashlv2di3_ti\"\n   [(set (match_operand:V2DI 0 \"register_operand\" \"=x\")\n         (ashift:V2DI (match_operand:V2DI 1 \"register_operand\" \"0\")\n-\t\t     (subreg:TI (match_operand:V2DI 2 \"nonmemory_operand\" \"xi\") 0)))]\n+\t\t     (subreg:SI (match_operand:V2DI 2 \"nonmemory_operand\" \"xi\") 0)))]\n   \"TARGET_SSE2\"\n   \"psllq\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sseishft\")"}, {"sha": "dd32bd96ec4146e025fbd628320b60b1b1168f5b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/588f75d040271e8405dca86f2bfb59d7afce8d9b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/588f75d040271e8405dca86f2bfb59d7afce8d9b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=588f75d040271e8405dca86f2bfb59d7afce8d9b", "patch": "@@ -1,3 +1,9 @@\n+2004-01-08  Stuart Hastings  <stuart@apple.com>\n+\n+\t* testsuite/gcc.dg/20020523-2.c (bail_if_no_sse): Moved cpu-ID code...\n+\ttestsuite/gcc.dg/i386-cpuid.h (i386_cpuid): ...to here, to share with...\n+\t* testsuite/gcc.dg/i386-sse-6.c: ...this new testcase.\n+\n 2004-01-09  Alan Modra  <amodra@bigpond.net.au>\n \n \t* gcc.dg/array-quals-1.c: Accept .data.rel.ro."}, {"sha": "1bb5a1a6567adb49f49219ff9c5f7f16df97aac8", "filename": "gcc/testsuite/gcc.dg/20020523-2.c", "status": "modified", "additions": 4, "deletions": 17, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/588f75d040271e8405dca86f2bfb59d7afce8d9b/gcc%2Ftestsuite%2Fgcc.dg%2F20020523-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/588f75d040271e8405dca86f2bfb59d7afce8d9b/gcc%2Ftestsuite%2Fgcc.dg%2F20020523-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20020523-2.c?ref=588f75d040271e8405dca86f2bfb59d7afce8d9b", "patch": "@@ -4,6 +4,7 @@\n /* { dg-do run { target i386-*-* } } */\n /* { dg-options \"-march=pentium3 -msse -ffast-math -O2\" } */\n \n+#include \"i386-cpuid.h\"\n extern void abort (void);\n extern void exit (int);\n \n@@ -27,24 +28,10 @@ typedef struct\n \n void bail_if_no_sse (void)\n {\n-  int fl1, fl2;\n-\n-  /* See if we can use cpuid.  */\n-  __asm__ (\"pushfl; pushfl; popl %0; movl %0,%1; xorl %2,%0;\"\n-\t   \"pushl %0; popfl; pushfl; popl %0; popfl\"\n-\t   : \"=&r\" (fl1), \"=&r\" (fl2)\n-\t   : \"i\" (0x00200000));\n-  if (((fl1 ^ fl2) & 0x00200000) == 0)\n-    exit (0);\n-\n-  /* See if cpuid gives capabilities.  */\n-  __asm__ (\"cpuid\" : \"=a\" (fl1) : \"0\" (0) : \"ebx\", \"ecx\", \"edx\", \"cc\");\n-  if (fl1 == 0)\n-    exit (0);\n-\n+  unsigned int edx;\n   /* See if capabilities include SSE (25th bit; 26 for SSE2).  */\n-  __asm__ (\"cpuid\" : \"=a\" (fl1), \"=d\" (fl2) : \"0\" (1) : \"ebx\", \"ecx\", \"cc\");\n-  if ((fl2 & (1 << 25)) == 0)\n+  edx = i386_cpuid();\n+  if (!(edx & bit_SSE))\n     exit (0);\n }\n "}, {"sha": "f8e72dbb5d97805a60a21fec210f0fdba8e87e06", "filename": "gcc/testsuite/gcc.dg/i386-cpuid.h", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/588f75d040271e8405dca86f2bfb59d7afce8d9b/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-cpuid.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/588f75d040271e8405dca86f2bfb59d7afce8d9b/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-cpuid.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-cpuid.h?ref=588f75d040271e8405dca86f2bfb59d7afce8d9b", "patch": "@@ -0,0 +1,43 @@\n+/* Helper file for i386 platform.  Runtime check for MMX/SSE/SSE2 support.\n+   Used by 20020523-2.c and i386-sse-6.c, and possibly others.  */\n+/* Plagarized from 20020523-2.c.  */\n+\n+#define bit_MMX (1 << 23)\n+#define bit_SSE (1 << 25)\n+#define bit_SSE2 (1 << 26)\n+\n+#ifndef NOINLINE\n+#define NOINLINE __attribute__ ((noinline))\n+#endif\n+\n+unsigned int i386_cpuid (void) NOINLINE;\n+\n+unsigned int NOINLINE\n+i386_cpuid (void)\n+{\n+  int fl1, fl2;\n+\n+  /* See if we can use cpuid.  */\n+  __asm__ (\"pushfl; pushfl; popl %0; movl %0,%1; xorl %2,%0;\"\n+\t   \"pushl %0; popfl; pushfl; popl %0; popfl\"\n+\t   : \"=&r\" (fl1), \"=&r\" (fl2)\n+\t   : \"i\" (0x00200000));\n+  if (((fl1 ^ fl2) & 0x00200000) == 0)\n+    return (0);\n+\n+  /* Host supports cpuid.  See if cpuid gives capabilities, try\n+     CPUID(0).  Preserve %ebx and %ecx; cpuid insn clobbers these, we\n+     don't need their CPUID values here, and %ebx may be the PIC\n+     register.  */\n+  __asm__ (\"push %%ecx ; push %%ebx ; cpuid ; pop %%ebx ; pop %%ecx\"\n+\t   : \"=a\" (fl1) : \"0\" (0) : \"edx\", \"cc\");\n+  if (fl1 == 0)\n+    return (0);\n+\n+  /* Invoke CPUID(1), return %edx; caller can examine bits to\n+     determine what's supported.  */\n+  __asm__ (\"push %%ecx ; push %%ebx ; cpuid ; pop %%ebx ; pop %%ecx\" : \"=d\" (fl2) : \"a\" (1) : \"cc\");\n+\n+  return fl2;\n+}\n+"}, {"sha": "ca18132ce301e7c5ea90af81383fc5798036a40a", "filename": "gcc/testsuite/gcc.dg/i386-sse-6.c", "status": "added", "additions": 505, "deletions": 0, "changes": 505, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/588f75d040271e8405dca86f2bfb59d7afce8d9b/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-sse-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/588f75d040271e8405dca86f2bfb59d7afce8d9b/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-sse-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-sse-6.c?ref=588f75d040271e8405dca86f2bfb59d7afce8d9b", "patch": "@@ -0,0 +1,505 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -msse2\" } */\n+#include <xmmintrin.h>\n+#include \"i386-cpuid.h\"\n+\n+#ifndef NOINLINE\n+#define NOINLINE __attribute__ ((noinline))\n+#endif\n+\n+#define SHIFT (4)\n+\n+typedef union {\n+  __m128i v;\n+  unsigned long s[4];\n+  unsigned short int t[8];\n+  unsigned long long u[2];\n+  unsigned char c[16];\n+}vecInLong;\n+\n+typedef union {\n+  __m64 v;\n+  unsigned char c[8];\n+  unsigned short int s[4];\n+  unsigned long long t;\n+  unsigned int u[2];\n+}vecInWord;\n+\n+void mmx_tests (void) NOINLINE;\n+void sse_tests (void) NOINLINE;\n+void sse2_tests (void) NOINLINE;\n+void dump64_16 (char *, char *, vecInWord);\n+void dump64_32 (char *, char *, vecInWord);\n+void dump64_64 (char *, char *, vecInWord);\n+void dump128_16 (char *, char *, vecInLong);\n+void dump128_32 (char *, char *, vecInLong);\n+void dump128_64 (char *, char *, vecInLong);\n+void dump128_128 (char *, char *, vecInLong);\n+int check (const char *, const char *[]);\n+\n+char buf[8000];\n+char comparison[8000];\n+static int errors = 0;\n+\n+vecInLong a128, b128, c128, d128, e128, f128;\n+vecInWord a64, b64, c64, d64, e64;\n+__m128i m128_16, m128_32, s128, m128_64, m128_128;\n+__m64 m64_16, s64, m64_32, m64_64;\n+\n+const char *reference_mmx[] = {\n+  \"_mm_srai_pi16 0012 0012 0012 0012 \\n\",\n+  \"_mm_sra_pi16 0012 0012 0012 0012 \\n\",\n+  \"_mm_srai_pi32 00123456 00123456 \\n\",\n+  \"_mm_sra_pi32 00123456 00123456 \\n\",\n+  \"_mm_srli_pi16 0012 0012 0012 0012 \\n\",\n+  \"_mm_srl_pi16 0012 0012 0012 0012 \\n\",\n+  \"_mm_srli_pi32 00123456 00123456 \\n\",\n+  \"_mm_srl_pi32 00123456 00123456 \\n\",\n+  \"_mm_srli_si64 00123456789abcde\\n\",\n+  \"_mm_srl_si64 00123456789abcde\\n\",\n+  \"_mm_slli_pi16 1230 1230 1230 1230 \\n\",\n+  \"_mm_sll_pi16 1230 1230 1230 1230 \\n\",\n+  \"_mm_slli_pi32 12345670 12345670 \\n\",\n+  \"_mm_sll_pi32 12345670 12345670 \\n\",\n+  \"_mm_slli_si64 123456789abcdef0\\n\",\n+  \"_mm_sll_si64 123456789abcdef0\\n\",\n+  \"\"\n+};\n+\n+const char *reference_sse[] = {\n+  \"_mm_shuffle_pi16 0123 4567 89ab cdef \\n\",\n+  \"\"\n+};\n+\n+const char *reference_sse2[] = {\n+  \"_mm_srai_epi16 0012 0012 0012 0012 0012 0012 0012 0012 \\n\",\n+  \"_mm_sra_epi16 0012 0012 0012 0012 0012 0012 0012 0012 \\n\",\n+  \"_mm_srai_epi32 00123456 00123456 00123456 00123456 \\n\",\n+  \"_mm_sra_epi32 00123456 00123456 00123456 00123456 \\n\",\n+  \"_mm_srli_epi16 0012 0012 0012 0012 0012 0012 0012 0012 \\n\",\n+  \"_mm_srl_epi16 0012 0012 0012 0012 0012 0012 0012 0012 \\n\",\n+  \"_mm_srli_epi32 00123456 00123456 00123456 00123456 \\n\",\n+  \"_mm_srl_epi32 00123456 00123456 00123456 00123456 \\n\",\n+  \"_mm_srli_epi64 00123456789abcde 00123456789abcde \\n\",\n+  \"_mm_srl_epi64 00123456789abcde 00123456789abcde \\n\",\n+  \"_mm_srli_si128 (byte shift)  00000000ffeeddccbbaa998877665544\\n\",\n+  \"_mm_slli_epi16 1230 1230 1230 1230 1230 1230 1230 1230 \\n\",\n+  \"_mm_sll_epi16 1230 1230 1230 1230 1230 1230 1230 1230 \\n\",\n+  \"_mm_slli_epi32 12345670 12345670 12345670 12345670 \\n\",\n+  \"_mm_sll_epi32 12345670 12345670 12345670 12345670 \\n\",\n+  \"_mm_slli_epi64 123456789abcdef0 123456789abcdef0 \\n\",\n+  \"_mm_sll_epi64 123456789abcdef0 123456789abcdef0 \\n\",\n+  \"_mm_sll_si128 (byte shift) bbaa9988776655443322110000000000\\n\",\n+  \"_mm_shuffle_epi32 ffeeddcc bbaa9988 77665544 33221100 \\n\",\n+  \"_mm_shuffelo_epi16 7766 5544 3322 1100 9988 bbaa ddcc ffee \\n\",\n+  \"_mm_shuffehi_epi16 1100 3322 5544 7766 ffee ddcc bbaa 9988 \\n\",\n+  \"\"\n+};\n+\n+int main()\n+{\n+  unsigned long *p;\n+  unsigned long cpu_facilities;\n+\n+  cpu_facilities = i386_cpuid ();\n+\n+  if (!cpu_facilities)\t/* If host has no vector support, pass.  */\n+    exit (0);\n+\n+  a128.s[0] = 0x01234567;\n+  a128.s[1] = 0x01234567;\n+  a128.s[2] = 0x01234567;\n+  a128.s[3] = 0x01234567;\n+\n+  m128_32 = a128.v;\n+\n+  d128.u[0] = 0x0123456789abcdefULL;\n+  d128.u[1] = 0x0123456789abcdefULL;\n+\n+  m128_64 = d128.v;\n+\n+  /* This is the 128-bit constant 0x00112233445566778899aabbccddeeff,\n+     expressed as two little-endian 64-bit words.  */\n+  e128.u[0] = 0x7766554433221100ULL;\n+  e128.u[1] = 0xffeeddccbbaa9988ULL;\n+\n+  f128.t[0] = 0x0123;\n+  f128.t[1] = 0x0123;\n+  f128.t[2] = 0x0123;\n+  f128.t[3] = 0x0123;\n+  f128.t[4] = 0x0123;\n+  f128.t[5] = 0x0123;\n+  f128.t[6] = 0x0123;\n+  f128.t[7] = 0x0123;\n+\n+  m128_16 = f128.v;\n+\n+  m128_128 = e128.v;\n+\n+  d64.u[0]  = 0x01234567;\n+  d64.u[1]  = 0x01234567;\n+\n+  m64_32 = d64.v;\n+\n+  e64.t  = 0x0123456789abcdefULL;\n+\n+  m64_64 = e64.v;\n+\n+  a64.s[0] = 0x0123;\n+  a64.s[1] = 0x0123;\n+  a64.s[2] = 0x0123;\n+  a64.s[3] = 0x0123;\n+\n+  m64_16 = a64.v;\n+\n+  b128.s[0] = SHIFT;\n+  b128.s[1] = 0;\n+  b128.s[2] = 0;\n+  b128.s[3] = 0;\n+\n+  s128 = b128.v;\n+\n+  b64.s[0] = SHIFT;\n+  b64.s[1] = 0;\n+  b64.s[2] = 0;\n+  b64.s[3] = 0;\n+\n+  s64 = b64.v;\n+\n+  if (cpu_facilities & bit_MMX)\n+    {\n+      mmx_tests();\n+      check (buf, reference_mmx);\n+#ifdef DEBUG\n+      printf (\"mmx testing:\\n\");\n+      printf (buf);\n+      printf (\"\\ncomparison:\\n\");\n+      printf (comparison);\n+#endif\n+      buf[0] = '\\0';\n+    }\n+\n+  if (cpu_facilities & bit_SSE)\n+    {\n+      sse_tests();\n+      check (buf, reference_sse);\n+#ifdef DEBUG\n+      printf (\"sse testing:\\n\");\n+      printf (buf);\n+      printf (\"\\ncomparison:\\n\");\n+      printf (comparison);\n+#endif\n+      buf[0] = '\\0';\n+    }\n+\n+  if (cpu_facilities & bit_SSE2)\n+    {\n+      sse2_tests();\n+      check (buf, reference_sse2);\n+#ifdef DEBUG\n+      printf (\"sse2 testing:\\n\");\n+      printf (buf);\n+      printf (\"\\ncomparison:\\n\");\n+      printf (comparison);\n+#endif\n+      buf[0] = '\\0';\n+    }\n+\n+  if (errors != 0)\n+    abort ();\n+  exit (0);\n+}\n+\n+void NOINLINE\n+mmx_tests (void)\n+{\n+  /* psraw */\n+  c64.v = _mm_srai_pi16 (m64_16, SHIFT);\n+  dump64_16 (buf, \"_mm_srai_pi16\", c64);\n+  c64.v  = _mm_sra_pi16 (m64_16, s64);\n+  dump64_16 (buf, \"_mm_sra_pi16\", c64);\n+\n+  /* psrad */\n+  c64.v  = _mm_srai_pi32 (m64_32, SHIFT);\n+  dump64_32 (buf, \"_mm_srai_pi32\", c64);\n+  c64.v = _mm_sra_pi32 (m64_32, s64);\n+  dump64_32 (buf, \"_mm_sra_pi32\", c64);\n+\n+  /* psrlw */\n+  c64.v = _mm_srli_pi16 (m64_16, SHIFT);\n+  dump64_16 (buf, \"_mm_srli_pi16\", c64);\n+  c64.v = _mm_srl_pi16 (m64_16, s64);\n+  dump64_16 (buf, \"_mm_srl_pi16\", c64);\n+\n+  /* psrld */\n+  c64.v = _mm_srli_pi32 (m64_32, SHIFT);\n+  dump64_32 (buf, \"_mm_srli_pi32\", c64);\n+  c64.v = _mm_srl_pi32 (m64_32, s64);\n+  dump64_32 (buf, \"_mm_srl_pi32\", c64);\n+\n+  /* psrlq */\n+  c64.v = _mm_srli_si64 (m64_64, SHIFT);\n+  dump64_64 (buf, \"_mm_srli_si64\", c64);\n+  c64.v = _mm_srl_si64 (m64_64, s64);\n+  dump64_64 (buf, \"_mm_srl_si64\", c64);\n+\n+  /* psllw */\n+  c64.v = _mm_slli_pi16 (m64_16, SHIFT);\n+  dump64_16 (buf, \"_mm_slli_pi16\", c64);\n+  c64.v = _mm_sll_pi16 (m64_16, s64);\n+  dump64_16 (buf, \"_mm_sll_pi16\", c64);\n+\n+  /* pslld */\n+  c64.v = _mm_slli_pi32 (m64_32, SHIFT);\n+  dump64_32 (buf, \"_mm_slli_pi32\", c64);\n+  c64.v = _mm_sll_pi32 (m64_32, s64);\n+  dump64_32 (buf, \"_mm_sll_pi32\", c64);\n+\n+  /* psllq */\n+  c64.v = _mm_slli_si64 (m64_64, SHIFT);\n+  dump64_64 (buf, \"_mm_slli_si64\", c64);\n+  c64.v = _mm_sll_si64 (m64_64, s64);\n+  dump64_64 (buf, \"_mm_sll_si64\", c64);\n+}\n+\n+void NOINLINE\n+sse_tests (void)\n+{\n+  /* pshufw */\n+  c64.v = _mm_shuffle_pi16 (m64_64, 0x1b);\n+  dump64_16 (buf, \"_mm_shuffle_pi16\", c64);\n+}\n+\n+void NOINLINE\n+sse2_tests (void)\n+{\n+  /* psraw */\n+  c128.v = _mm_srai_epi16 (m128_16, SHIFT);\n+  dump128_16 (buf, \"_mm_srai_epi16\", c128);\n+  c128.v = _mm_sra_epi16 (m128_16, s128);\n+  dump128_16 (buf, \"_mm_sra_epi16\", c128);\n+\n+  /* psrad */\n+  c128.v = _mm_srai_epi32 (m128_32, SHIFT);\n+  dump128_32 (buf, \"_mm_srai_epi32\", c128);\n+  c128.v = _mm_sra_epi32 (m128_32, s128);\n+  dump128_32 (buf, \"_mm_sra_epi32\", c128);\n+\n+  /* psrlw */\n+  c128.v = _mm_srli_epi16 (m128_16, SHIFT);\n+  dump128_16 (buf, \"_mm_srli_epi16\", c128);\n+  c128.v = _mm_srl_epi16 (m128_16, s128);\n+  dump128_16 (buf, \"_mm_srl_epi16\", c128);\n+\n+  /* psrld */\n+  c128.v = _mm_srli_epi32 (m128_32, SHIFT);\n+  dump128_32 (buf, \"_mm_srli_epi32\", c128);\n+  c128.v = _mm_srl_epi32 (m128_32, s128);\n+  dump128_32 (buf, \"_mm_srl_epi32\", c128);\n+\n+  /* psrlq */\n+  c128.v = _mm_srli_epi64 (m128_64, SHIFT);\n+  dump128_64 (buf, \"_mm_srli_epi64\", c128);\n+  c128.v = _mm_srl_epi64 (m128_64, s128);\n+  dump128_64 (buf, \"_mm_srl_epi64\", c128);\n+\n+  /* psrldq */\n+  c128.v = _mm_srli_si128 (m128_128, SHIFT);\n+  dump128_128 (buf, \"_mm_srli_si128 (byte shift) \", c128);\n+\n+  /* psllw */\n+  c128.v = _mm_slli_epi16 (m128_16, SHIFT);\n+  dump128_16 (buf, \"_mm_slli_epi16\", c128);\n+  c128.v = _mm_sll_epi16 (m128_16, s128);\n+  dump128_16 (buf, \"_mm_sll_epi16\", c128);\n+\n+  /* pslld */\n+  c128.v = _mm_slli_epi32 (m128_32, SHIFT);\n+  dump128_32 (buf, \"_mm_slli_epi32\", c128);\n+  c128.v = _mm_sll_epi32 (m128_32, s128);\n+  dump128_32 (buf, \"_mm_sll_epi32\", c128);\n+\n+  /* psllq */\n+  c128.v = _mm_slli_epi64 (m128_64, SHIFT);\n+  dump128_64 (buf, \"_mm_slli_epi64\", c128);\n+  c128.v = _mm_sll_epi64 (m128_64, s128);\n+  dump128_64 (buf, \"_mm_sll_epi64\", c128);\n+\n+  /* pslldq */\n+  c128.v = _mm_slli_si128 (m128_128, SHIFT);\n+  dump128_128 (buf, \"_mm_sll_si128 (byte shift)\", c128);\n+\n+  /* Shuffle constant 0x1b == 0b_00_01_10_11, e.g. swap words: ABCD => DCBA.  */\n+\n+  /* pshufd */\n+  c128.v = _mm_shuffle_epi32 (m128_128, 0x1b);\n+  dump128_32 (buf, \"_mm_shuffle_epi32\", c128);\n+\n+  /* pshuflw */\n+  c128.v = _mm_shufflelo_epi16 (m128_128, 0x1b);\n+  dump128_16 (buf, \"_mm_shuffelo_epi16\", c128);\n+\n+  /* pshufhw */\n+  c128.v = _mm_shufflehi_epi16 (m128_128, 0x1b);\n+  dump128_16 (buf, \"_mm_shuffehi_epi16\", c128);\n+}\n+\n+void\n+dump64_16 (char *buf, char *name, vecInWord x)\n+{\n+  int i;\n+  char *p = buf + strlen (buf);\n+\n+  sprintf (p, \"%s \", name);\n+  p += strlen (p);\n+\n+  for (i=0; i<4; i++)\n+    {\n+      sprintf (p, \"%4.4x \", x.s[i]);\n+      p += strlen (p);\n+    }\n+  strcat (p, \"\\n\");\n+}\n+\n+void\n+dump64_32 (char *buf, char *name, vecInWord x)\n+{\n+  int i;\n+  char *p = buf + strlen (buf);\n+\n+  sprintf (p, \"%s \", name);\n+  p += strlen (p);\n+\n+  for (i=0; i<2; i++)\n+    {\n+      sprintf (p, \"%8.8x \", x.u[i]);\n+      p += strlen (p);\n+    }\n+  strcat (p, \"\\n\");\n+}\n+\n+void\n+dump64_64 (char *buf, char *name, vecInWord x)\n+{\n+  int i;\n+  char *p = buf + strlen (buf);\n+\n+  sprintf (p, \"%s \", name);\n+  p += strlen (p);\n+\n+  sprintf (p, \"%16.16llx\\n\", x.t);\n+}\n+\n+void\n+dump128_16 (char *buf, char *name, vecInLong x)\n+{\n+  int i;\n+  char *p = buf + strlen (buf);\n+\n+  sprintf (p, \"%s \", name);\n+  p += strlen (p);\n+\n+  for (i=0; i<8; i++)\n+    {\n+      sprintf (p, \"%4.4x \", x.t[i]);\n+      p += strlen (p);\n+    }\n+  strcat (p, \"\\n\");\n+}\n+\n+void\n+dump128_32 (char *buf, char *name, vecInLong x)\n+{\n+  int i;\n+  char *p = buf + strlen (buf);\n+\n+  sprintf (p, \"%s \", name);\n+  p += strlen (p);\n+\n+  for (i=0; i<4; i++)\n+    {\n+      sprintf (p, \"%8.8x \", x.s[i]);\n+      p += strlen (p);\n+    }\n+  strcat (p, \"\\n\");\n+}\n+\n+void\n+dump128_64 (char *buf, char *name, vecInLong x)\n+{\n+  int i;\n+  char *p = buf + strlen (buf);\n+\n+  sprintf (p, \"%s \", name);\n+  p += strlen (p);\n+\n+  for (i=0; i<2; i++)\n+    {\n+      sprintf (p, \"%16.16llx \", x.u[i]);\n+      p += strlen (p);\n+    }\n+  strcat (p, \"\\n\");\n+}\n+\n+void\n+dump128_128 (char *buf, char *name, vecInLong x)\n+{\n+  int i;\n+  char *p = buf + strlen (buf);\n+\n+  sprintf (p, \"%s \", name);\n+  p += strlen (p);\n+\n+  for (i=15; i>=0; i--)\n+    {\n+      /* This is cheating; we don't have a 128-bit int format code.\n+\t Running the loop backwards to compensate for the\n+\t little-endian layout. */\n+      sprintf (p, \"%2.2x\", x.c[i]);\n+      p += strlen (p);\n+    }\n+  strcat (p, \"\\n\");\n+}\n+\n+int\n+check (const char *input, const char *reference[])\n+{\n+  int broken, i, j, len;\n+  const char *p_input;\n+  char *p_comparison;\n+  int new_errors = 0;\n+\n+  p_comparison = &comparison[0];\n+  p_input = input;\n+\n+  for (i = 0; *reference[i] != '\\0'; i++)\n+    {\n+      broken = 0;\n+      len = strlen (reference[i]);\n+      for (j = 0; j < len; j++)\n+\t{\n+\t  /* Ignore the terminating NUL characters at the end of every string in 'reference[]'.  */\n+\t  if (!broken && *p_input != reference[i][j])\n+\t    {\n+\t      *p_comparison = '\\0';\n+\t      strcat (p_comparison, \" >>> \");\n+\t      p_comparison += strlen (p_comparison);\n+\t      new_errors++;\n+\t      broken = 1;\n+\t    }\n+\t  *p_comparison = *p_input;\n+\t  p_comparison++;\n+\t  p_input++;\n+\t}\n+      if (broken)\n+\t{\n+\t  *p_comparison = '\\0';\n+\t  strcat (p_comparison, \"expected:\\n\");\n+\t  strcat (p_comparison, reference[i]);\n+\t  p_comparison += strlen (p_comparison);\n+\t}\n+    }\n+  *p_comparison = '\\0';\n+  strcat (p_comparison, new_errors ? \"failure\\n\\n\" : \"O.K.\\n\\n\") ;\n+  errors += new_errors;\n+}"}]}