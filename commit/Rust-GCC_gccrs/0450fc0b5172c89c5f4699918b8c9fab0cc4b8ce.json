{"sha": "0450fc0b5172c89c5f4699918b8c9fab0cc4b8ce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQ1MGZjMGI1MTcyYzg5YzVmNDY5OTkxOGI4YzlmYWIwY2M0YjhjZQ==", "commit": {"author": {"name": "Patrick Palka", "email": "patrick@parcs.ath.cx", "date": "2014-04-04T19:36:00Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2014-04-04T19:36:00Z"}, "message": "re PR c++/44613 (Declaring an array with non-constant length inside a switch corrupts stack pointer.)\n\n\tPR c++/44613\n\t* semantics.c (add_stmt): Set STATEMENT_LIST_HAS_LABEL.\n\t* decl.c (cp_finish_decl): Create a new BIND_EXPR before\n\tinstantiating a variable-sized type.\n\nFrom-SVN: r209125", "tree": {"sha": "f7b75c382b59179eb5fe4c75f7d7165e04fa37ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f7b75c382b59179eb5fe4c75f7d7165e04fa37ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0450fc0b5172c89c5f4699918b8c9fab0cc4b8ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0450fc0b5172c89c5f4699918b8c9fab0cc4b8ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0450fc0b5172c89c5f4699918b8c9fab0cc4b8ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0450fc0b5172c89c5f4699918b8c9fab0cc4b8ce/comments", "author": null, "committer": null, "parents": [{"sha": "822cc906fd9341dd64f808f4553aaa07c8de8c6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/822cc906fd9341dd64f808f4553aaa07c8de8c6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/822cc906fd9341dd64f808f4553aaa07c8de8c6a"}], "stats": {"total": 47, "additions": 46, "deletions": 1}, "files": [{"sha": "b3b9ccbdb61859e8499668a453880105860548b4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0450fc0b5172c89c5f4699918b8c9fab0cc4b8ce/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0450fc0b5172c89c5f4699918b8c9fab0cc4b8ce/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0450fc0b5172c89c5f4699918b8c9fab0cc4b8ce", "patch": "@@ -1,5 +1,10 @@\n 2014-04-04  Patrick Palka  <patrick@parcs.ath.cx>\n \n+\tPR c++/44613\n+\t* semantics.c (add_stmt): Set STATEMENT_LIST_HAS_LABEL.\n+\t* decl.c (cp_finish_decl): Create a new BIND_EXPR before\n+\tinstantiating a variable-sized type.\n+\n \tPR c++/21113\n \t* decl.c (decl_jump_unsafe): Consider variably-modified decls.\n "}, {"sha": "d70a8656e920a82a2d63db5dae5bf8ad989a3f83", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0450fc0b5172c89c5f4699918b8c9fab0cc4b8ce/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0450fc0b5172c89c5f4699918b8c9fab0cc4b8ce/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=0450fc0b5172c89c5f4699918b8c9fab0cc4b8ce", "patch": "@@ -6440,7 +6440,24 @@ cp_finish_decl (tree decl, tree init, bool init_const_expr_p,\n      after the call to check_initializer so that the DECL_EXPR for a\n      reference temp is added before the DECL_EXPR for the reference itself.  */\n   if (DECL_FUNCTION_SCOPE_P (decl))\n-    add_decl_expr (decl);\n+    {\n+      /* If we're building a variable sized type, and we might be\n+\t reachable other than via the top of the current binding\n+\t level, then create a new BIND_EXPR so that we deallocate\n+\t the object at the right time.  */\n+      if (VAR_P (decl)\n+\t  && DECL_SIZE (decl)\n+\t  && !TREE_CONSTANT (DECL_SIZE (decl))\n+\t  && STATEMENT_LIST_HAS_LABEL (cur_stmt_list))\n+\t{\n+\t  tree bind;\n+\t  bind = build3 (BIND_EXPR, void_type_node, NULL, NULL, NULL);\n+\t  TREE_SIDE_EFFECTS (bind) = 1;\n+\t  add_stmt (bind);\n+\t  BIND_EXPR_BODY (bind) = push_stmt_list ();\n+\t}\n+      add_decl_expr (decl);\n+    }\n \n   /* Let the middle end know about variables and functions -- but not\n      static data members in uninstantiated class templates.  */"}, {"sha": "92695418e6092a14169c3874e751507b75f86806", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0450fc0b5172c89c5f4699918b8c9fab0cc4b8ce/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0450fc0b5172c89c5f4699918b8c9fab0cc4b8ce/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=0450fc0b5172c89c5f4699918b8c9fab0cc4b8ce", "patch": "@@ -386,6 +386,9 @@ add_stmt (tree t)\n       STMT_IS_FULL_EXPR_P (t) = stmts_are_full_exprs_p ();\n     }\n \n+  if (code == LABEL_EXPR || code == CASE_LABEL_EXPR)\n+    STATEMENT_LIST_HAS_LABEL (cur_stmt_list) = 1;\n+\n   /* Add T to the statement-tree.  Non-side-effect statements need to be\n      recorded during statement expressions.  */\n   gcc_checking_assert (!stmt_list_stack->is_empty ());"}, {"sha": "feeb49ff2803127694528cfc8c00a65644a095b4", "filename": "gcc/testsuite/g++.dg/ext/vla15.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0450fc0b5172c89c5f4699918b8c9fab0cc4b8ce/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvla15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0450fc0b5172c89c5f4699918b8c9fab0cc4b8ce/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvla15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvla15.C?ref=0450fc0b5172c89c5f4699918b8c9fab0cc4b8ce", "patch": "@@ -0,0 +1,20 @@\n+// PR c++/44613\n+// { dg-do run }\n+// { dg-options \"\" }\n+\n+void *volatile p;\n+\n+int\n+main (void)\n+{\n+  int n = 0;\n+ lab:;\n+  int x[n % 1000 + 1];\n+  x[0] = 1;\n+  x[n % 1000] = 2;\n+  p = x;\n+  n++;\n+  if (n < 1000000)\n+    goto lab;\n+  return 0;\n+}"}]}