{"sha": "2b0cb007fa96ea4ea95de5505cfe481b2aedcf80", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmIwY2IwMDdmYTk2ZWE0ZWE5NWRlNTUwNWNmZTQ4MWIyYWVkY2Y4MA==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@codesourcery.com", "date": "2010-07-27T09:34:51Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2010-07-27T09:34:51Z"}, "message": "re PR rtl-optimization/45051 (gcc.c-torture/execute/builtins/abs-2.c and abs-3.c due to \"track subwords of DImode allocnos\")\n\n\tPR rtl-optimization/45051\n\t* reload1.c (delete_output_reload): Use refers_to_regno_p rather\n\tthan reg_mentioned_p.\n\nFrom-SVN: r162558", "tree": {"sha": "2bc0c7ba98b274d17347753a77a6e5a17643aec0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2bc0c7ba98b274d17347753a77a6e5a17643aec0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b0cb007fa96ea4ea95de5505cfe481b2aedcf80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b0cb007fa96ea4ea95de5505cfe481b2aedcf80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b0cb007fa96ea4ea95de5505cfe481b2aedcf80", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b0cb007fa96ea4ea95de5505cfe481b2aedcf80/comments", "author": null, "committer": null, "parents": [{"sha": "fb55ca75aed99996a52ea22ba5456c918e7e70c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb55ca75aed99996a52ea22ba5456c918e7e70c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb55ca75aed99996a52ea22ba5456c918e7e70c6"}], "stats": {"total": 14, "additions": 13, "deletions": 1}, "files": [{"sha": "6983da721b4acc93ce962ca0d76708b26a49ced5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b0cb007fa96ea4ea95de5505cfe481b2aedcf80/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b0cb007fa96ea4ea95de5505cfe481b2aedcf80/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2b0cb007fa96ea4ea95de5505cfe481b2aedcf80", "patch": "@@ -3,6 +3,10 @@\n \t* postreload.c (reload_combine_recognize_const_pattern): Move test\n \tfor limiting the insn movement to the right scope.\n \n+\tPR rtl-optimization/45051\n+\t* reload1.c (delete_output_reload): Use refers_to_regno_p rather\n+\tthan reg_mentioned_p.\n+\n 2010-07-26  Richard Henderson  <rth@redhat.com>\n \n \tPR target/44132"}, {"sha": "5c49f3cf817aa7619e817afafc1ef5adc392ccd3", "filename": "gcc/reload1.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b0cb007fa96ea4ea95de5505cfe481b2aedcf80/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b0cb007fa96ea4ea95de5505cfe481b2aedcf80/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=2b0cb007fa96ea4ea95de5505cfe481b2aedcf80", "patch": "@@ -8813,6 +8813,8 @@ delete_output_reload (rtx insn, int j, int last_reload_reg, rtx new_reload_reg)\n   int n_inherited = 0;\n   rtx i1;\n   rtx substed;\n+  unsigned regno;\n+  int nregs;\n \n   /* It is possible that this reload has been only used to set another reload\n      we eliminated earlier and thus deleted this instruction too.  */\n@@ -8864,6 +8866,12 @@ delete_output_reload (rtx insn, int j, int last_reload_reg, rtx new_reload_reg)\n   if (n_occurrences > n_inherited)\n     return;\n \n+  regno = REGNO (reg);\n+  if (regno >= FIRST_PSEUDO_REGISTER)\n+    nregs = 1;\n+  else\n+    nregs = hard_regno_nregs[regno][GET_MODE (reg)];\n+\n   /* If the pseudo-reg we are reloading is no longer referenced\n      anywhere between the store into it and here,\n      and we're within the same basic block, then the value can only\n@@ -8875,7 +8883,7 @@ delete_output_reload (rtx insn, int j, int last_reload_reg, rtx new_reload_reg)\n       if (NOTE_INSN_BASIC_BLOCK_P (i1))\n \treturn;\n       if ((NONJUMP_INSN_P (i1) || CALL_P (i1))\n-\t  && reg_mentioned_p (reg, PATTERN (i1)))\n+\t  && refers_to_regno_p (regno, regno + nregs, PATTERN (i1), NULL))\n \t{\n \t  /* If this is USE in front of INSN, we only have to check that\n \t     there are no more references than accounted for by inheritance.  */"}]}