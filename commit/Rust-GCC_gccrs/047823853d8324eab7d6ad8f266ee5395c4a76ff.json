{"sha": "047823853d8324eab7d6ad8f266ee5395c4a76ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQ3ODIzODUzZDgzMjRlYWI3ZDZhZDhmMjY2ZWU1Mzk1YzRhNzZmZg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-05-04T07:19:45Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-05-04T07:19:45Z"}, "message": "re PR tree-optimization/85466 (Performance is slow when doing 'branchless' conditional style math operations)\n\n\tPR libstdc++/85466\n\t* real.h (real_nextafter): Declare.\n\t* real.c (real_nextafter): New function.\n\t* fold-const-call.c (fold_const_nextafter): New function.\n\t(fold_const_call_sss): Call it for CASE_CFN_NEXTAFTER and\n\tCASE_CFN_NEXTTOWARD.\n\t(fold_const_call_1): For CASE_CFN_NEXTTOWARD call fold_const_call_sss\n\teven when arg1_mode is different from arg0_mode.\n\n\t* gcc.dg/nextafter-1.c: New test.\n\t* gcc.dg/nextafter-2.c: New test.\n\t* gcc.dg/nextafter-3.c: New test.\n\t* gcc.dg/nextafter-4.c: New test.\n\nFrom-SVN: r259921", "tree": {"sha": "577de47e3f2f5746febab4c2403441ef0d8abd9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/577de47e3f2f5746febab4c2403441ef0d8abd9f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/047823853d8324eab7d6ad8f266ee5395c4a76ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/047823853d8324eab7d6ad8f266ee5395c4a76ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/047823853d8324eab7d6ad8f266ee5395c4a76ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/047823853d8324eab7d6ad8f266ee5395c4a76ff/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "105073e1cc39fbeb03aa40e294ffc3c400cfa844", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/105073e1cc39fbeb03aa40e294ffc3c400cfa844", "html_url": "https://github.com/Rust-GCC/gccrs/commit/105073e1cc39fbeb03aa40e294ffc3c400cfa844"}], "stats": {"total": 368, "additions": 365, "deletions": 3}, "files": [{"sha": "229e095137118474603cfc7efe14a3b9e7442151", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047823853d8324eab7d6ad8f266ee5395c4a76ff/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047823853d8324eab7d6ad8f266ee5395c4a76ff/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=047823853d8324eab7d6ad8f266ee5395c4a76ff", "patch": "@@ -1,3 +1,14 @@\n+2018-05-04  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR libstdc++/85466\n+\t* real.h (real_nextafter): Declare.\n+\t* real.c (real_nextafter): New function.\n+\t* fold-const-call.c (fold_const_nextafter): New function.\n+\t(fold_const_call_sss): Call it for CASE_CFN_NEXTAFTER and\n+\tCASE_CFN_NEXTTOWARD.\n+\t(fold_const_call_1): For CASE_CFN_NEXTTOWARD call fold_const_call_sss\n+\teven when arg1_mode is different from arg0_mode.\n+\n 2018-05-03  Nathan Sidwell  <nathan@acm.org>\n \n \t* doc/extend.texi (Deprecated Features): Remove"}, {"sha": "49694922b5c4cf75cdf9d528193fc43b8624e05b", "filename": "gcc/fold-const-call.c", "status": "modified", "additions": 62, "deletions": 3, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047823853d8324eab7d6ad8f266ee5395c4a76ff/gcc%2Ffold-const-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047823853d8324eab7d6ad8f266ee5395c4a76ff/gcc%2Ffold-const-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const-call.c?ref=047823853d8324eab7d6ad8f266ee5395c4a76ff", "patch": "@@ -527,6 +527,48 @@ fold_const_pow (real_value *result, const real_value *arg0,\n   return false;\n }\n \n+/* Try to evaluate:\n+\n+      *RESULT = nextafter (*ARG0, *ARG1)\n+\n+   or\n+\n+      *RESULT = nexttoward (*ARG0, *ARG1)\n+\n+   in format FORMAT.  Return true on success.  */\n+\n+static bool\n+fold_const_nextafter (real_value *result, const real_value *arg0,\n+\t\t      const real_value *arg1, const real_format *format)\n+{\n+  if (REAL_VALUE_ISSIGNALING_NAN (*arg0)\n+      || REAL_VALUE_ISSIGNALING_NAN (*arg1))\n+    return false;\n+\n+  /* Don't handle composite modes, nor decimal, nor modes without\n+     inf or denorm at least for now.  */\n+  if (format->pnan < format->p\n+      || format->b == 10\n+      || !format->has_inf\n+      || !format->has_denorm)\n+    return false;\n+\n+  if (real_nextafter (result, format, arg0, arg1)\n+      /* If raising underflow or overflow and setting errno to ERANGE,\n+\t fail if we care about those side-effects.  */\n+      && (flag_trapping_math || flag_errno_math))\n+    return false;\n+  /* Similarly for nextafter (0, 1) raising underflow.  */\n+  else if (flag_trapping_math\n+\t   && arg0->cl == rvc_zero\n+\t   && result->cl != rvc_zero)\n+    return false;\n+\n+  real_convert (result, format, result);\n+\n+  return true;\n+}\n+\n /* Try to evaluate:\n \n       *RESULT = ldexp (*ARG0, ARG1)\n@@ -1260,6 +1302,10 @@ fold_const_call_sss (real_value *result, combined_fn fn,\n     CASE_CFN_POW:\n       return fold_const_pow (result, arg0, arg1, format);\n \n+    CASE_CFN_NEXTAFTER:\n+    CASE_CFN_NEXTTOWARD:\n+      return fold_const_nextafter (result, arg0, arg1, format);\n+\n     default:\n       return false;\n     }\n@@ -1365,20 +1411,33 @@ fold_const_call_1 (combined_fn fn, tree type, tree arg0, tree arg1)\n   machine_mode arg0_mode = TYPE_MODE (TREE_TYPE (arg0));\n   machine_mode arg1_mode = TYPE_MODE (TREE_TYPE (arg1));\n \n-  if (arg0_mode == arg1_mode\n+  if (mode == arg0_mode\n       && real_cst_p (arg0)\n       && real_cst_p (arg1))\n     {\n       gcc_checking_assert (SCALAR_FLOAT_MODE_P (arg0_mode));\n-      if (mode == arg0_mode)\n+      REAL_VALUE_TYPE result;\n+      if (arg0_mode == arg1_mode)\n \t{\n \t  /* real, real -> real.  */\n-\t  REAL_VALUE_TYPE result;\n \t  if (fold_const_call_sss (&result, fn, TREE_REAL_CST_PTR (arg0),\n \t\t\t\t   TREE_REAL_CST_PTR (arg1),\n \t\t\t\t   REAL_MODE_FORMAT (mode)))\n \t    return build_real (type, result);\n \t}\n+      else if (arg1_mode == TYPE_MODE (long_double_type_node))\n+\tswitch (fn)\n+\t  {\n+\t  CASE_CFN_NEXTTOWARD:\n+\t    /* real, long double -> real.  */\n+\t    if (fold_const_call_sss (&result, fn, TREE_REAL_CST_PTR (arg0),\n+\t\t\t\t     TREE_REAL_CST_PTR (arg1),\n+\t\t\t\t     REAL_MODE_FORMAT (mode)))\n+\t      return build_real (type, result);\n+\t    break;\n+\t  default:\n+\t    break;\n+\t  }\n       return NULL_TREE;\n     }\n "}, {"sha": "eefa69e853573ab34e315172c38a4a561c7a532e", "filename": "gcc/real.c", "status": "modified", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047823853d8324eab7d6ad8f266ee5395c4a76ff/gcc%2Freal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047823853d8324eab7d6ad8f266ee5395c4a76ff/gcc%2Freal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.c?ref=047823853d8324eab7d6ad8f266ee5395c4a76ff", "patch": "@@ -5048,6 +5048,102 @@ real_isinteger (const REAL_VALUE_TYPE *c, HOST_WIDE_INT *int_out)\n   return false;\n }\n \n+/* Calculate nextafter (X, Y) or nexttoward (X, Y).  Return true if\n+   underflow or overflow needs to be raised.  */\n+\n+bool\n+real_nextafter (REAL_VALUE_TYPE *r, format_helper fmt,\n+\t\tconst REAL_VALUE_TYPE *x, const REAL_VALUE_TYPE *y)\n+{\n+  int cmp = do_compare (x, y, 2);\n+  /* If either operand is NaN, return qNaN.  */\n+  if (cmp == 2)\n+    {\n+      get_canonical_qnan (r, 0);\n+      return false;\n+    }\n+  /* If x == y, return y cast to target type.  */\n+  if (cmp == 0)\n+    {\n+      real_convert (r, fmt, y);\n+      return false;\n+    }\n+\n+  if (x->cl == rvc_zero)\n+    {\n+      get_zero (r, y->sign);\n+      r->cl = rvc_normal;\n+      SET_REAL_EXP (r, fmt->emin - fmt->p + 1);\n+      r->sig[SIGSZ - 1] = SIG_MSB;\n+      return false;\n+    }\n+\n+  int np2 = SIGNIFICAND_BITS - fmt->p;\n+  /* For denormals adjust np2 correspondingly.  */\n+  if (x->cl == rvc_normal && REAL_EXP (x) < fmt->emin)\n+    np2 += fmt->emin - REAL_EXP (x);\n+\n+  REAL_VALUE_TYPE u;\n+  get_zero (r, x->sign);\n+  get_zero (&u, 0);\n+  set_significand_bit (&u, np2);\n+  r->cl = rvc_normal;\n+  SET_REAL_EXP (r, REAL_EXP (x));\n+\n+  if (x->cl == rvc_inf)\n+    {\n+      bool borrow = sub_significands (r, r, &u, 0);\n+      gcc_assert (borrow);\n+      SET_REAL_EXP (r, fmt->emax);\n+    }\n+  else if (cmp == (x->sign ? 1 : -1))\n+    {\n+      if (add_significands (r, x, &u))\n+\t{\n+\t  /* Overflow.  Means the significand had been all ones, and\n+\t     is now all zeros.  Need to increase the exponent, and\n+\t     possibly re-normalize it.  */\n+\t  SET_REAL_EXP (r, REAL_EXP (r) + 1);\n+\t  if (REAL_EXP (r) > fmt->emax)\n+\t    {\n+\t      get_inf (r, x->sign);\n+\t      return true;\n+\t    }\n+\t  r->sig[SIGSZ - 1] = SIG_MSB;\n+\t}\n+    }\n+  else\n+    {\n+      if (REAL_EXP (x) > fmt->emin && x->sig[SIGSZ - 1] == SIG_MSB)\n+\t{\n+\t  int i;\n+\t  for (i = SIGSZ - 2; i >= 0; i--)\n+\t    if (x->sig[i])\n+\t      break;\n+\t  if (i < 0)\n+\t    {\n+\t      /* When mantissa is 1.0, we need to subtract only\n+\t\t half of u: nextafter (1.0, 0.0) is 1.0 - __DBL_EPSILON__ / 2\n+\t\t rather than 1.0 - __DBL_EPSILON__.  */\n+\t      clear_significand_bit (&u, np2);\n+\t      np2--;\n+\t      set_significand_bit (&u, np2);\n+\t    }\n+\t}\n+      sub_significands (r, x, &u, 0);\n+    }\n+\n+  /* Clear out trailing garbage.  */\n+  clear_significand_below (r, np2);\n+  normalize (r);\n+  if (REAL_EXP (r) <= fmt->emin - fmt->p)\n+    {\n+      get_zero (r, x->sign);\n+      return true;\n+    }\n+  return r->cl == rvc_zero;\n+}\n+\n /* Write into BUF the maximum representable finite floating-point\n    number, (1 - b**-p) * b**emax for a given FP format FMT as a hex\n    float string.  LEN is the size of BUF, and the buffer must be large"}, {"sha": "0ce4256570819c3f18054373c4c1615cb645b505", "filename": "gcc/real.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047823853d8324eab7d6ad8f266ee5395c4a76ff/gcc%2Freal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047823853d8324eab7d6ad8f266ee5395c4a76ff/gcc%2Freal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.h?ref=047823853d8324eab7d6ad8f266ee5395c4a76ff", "patch": "@@ -507,6 +507,10 @@ extern void real_copysign (REAL_VALUE_TYPE *, const REAL_VALUE_TYPE *);\n extern bool real_isinteger (const REAL_VALUE_TYPE *, format_helper);\n extern bool real_isinteger (const REAL_VALUE_TYPE *, HOST_WIDE_INT *);\n \n+/* Calculate nextafter (X, Y) in format FMT.  */\n+extern bool real_nextafter (REAL_VALUE_TYPE *, format_helper,\n+\t\t\t    const REAL_VALUE_TYPE *, const REAL_VALUE_TYPE *);\n+\n /* Write into BUF the maximum representable finite floating-point\n    number, (1 - b**-p) * b**emax for a given FP format FMT as a hex\n    float string.  BUF must be large enough to contain the result.  */"}, {"sha": "6b5077535db654b8cddee1b770f60f1ce7f0bc40", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047823853d8324eab7d6ad8f266ee5395c4a76ff/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047823853d8324eab7d6ad8f266ee5395c4a76ff/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=047823853d8324eab7d6ad8f266ee5395c4a76ff", "patch": "@@ -1,3 +1,11 @@\n+2018-05-04  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR libstdc++/85466\n+\t* gcc.dg/nextafter-1.c: New test.\n+\t* gcc.dg/nextafter-2.c: New test.\n+\t* gcc.dg/nextafter-3.c: New test.\n+\t* gcc.dg/nextafter-4.c: New test.\n+\n 2018-05-03  Nathan Sidwell  <nathan@acm.org>\n \n \tRemove -ffriend-injection."}, {"sha": "c8647ede00be4e7fab100b41d294fb3a16d59d90", "filename": "gcc/testsuite/gcc.dg/nextafter-1.c", "status": "added", "additions": 159, "deletions": 0, "changes": 159, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047823853d8324eab7d6ad8f266ee5395c4a76ff/gcc%2Ftestsuite%2Fgcc.dg%2Fnextafter-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047823853d8324eab7d6ad8f266ee5395c4a76ff/gcc%2Ftestsuite%2Fgcc.dg%2Fnextafter-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fnextafter-1.c?ref=047823853d8324eab7d6ad8f266ee5395c4a76ff", "patch": "@@ -0,0 +1,159 @@\n+/* PR libstdc++/85466 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-math-errno -fno-trapping-math -fdump-tree-optimized\" } */\n+/* { dg-add-options ieee } */\n+/* { dg-final { scan-tree-dump-not \"nextafter\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \"nexttoward\" \"optimized\" } } */\n+\n+float nextafterf (float, float);\n+double nextafter (double, double);\n+long double nextafterl (long double, long double);\n+float nexttowardf (float, long double);\n+double nexttoward (double, long double);\n+long double nexttowardl (long double, long double);\n+\n+#define CHECK(x) if (!(x)) __builtin_abort ()\n+\n+#ifndef NEED_ERRNO\n+#define NEED_ERRNO 0\n+#endif\n+#ifndef NEED_EXC\n+#define NEED_EXC 0\n+#endif\n+\n+#define TEST(name, fn, type, L1, L2, l1, l2, MIN1,\t\t\t     \\\n+\t     MAX1, DENORM_MIN1, EPSILON1, MIN2, MAX2, DENORM_MIN2)\t     \\\n+void\t\t\t\t\t\t\t\t\t     \\\n+name (void)\t\t\t\t\t\t\t\t     \\\n+{\t\t\t\t\t\t\t\t\t     \\\n+  const type a = fn (0.0##L1, 0.0##L2);\t\t\t\t\t     \\\n+  CHECK (a == 0.0##L1 && !__builtin_signbit (a));\t\t\t     \\\n+  const type b = fn (0.0##L1, -0.0##L2);\t\t\t\t     \\\n+  CHECK (b == 0.0##L1 && __builtin_signbit (b));\t\t\t     \\\n+  const type c = fn (__builtin_nan##l1 (\"\"), 0.0##L2);\t\t\t     \\\n+  CHECK (__builtin_isnan##l1 (c));\t\t\t\t\t     \\\n+  const type d = fn (2.0##L1, __builtin_nan##l2 (\"\"));\t\t\t     \\\n+  CHECK (__builtin_isnan##l1 (d));\t\t\t\t\t     \\\n+  const type e = NEED_EXC ? DENORM_MIN1 : fn (0.0##L1, 8.0##L2);\t     \\\n+  CHECK (e == DENORM_MIN1);\t\t\t\t\t\t     \\\n+  const type f = fn (1.0##L1, 8.0##L2);\t\t\t\t\t     \\\n+  CHECK (f == 1.0##L1 + EPSILON1);\t\t\t\t\t     \\\n+  const type g = fn (1.0##L1, -8.0##L2);\t\t\t\t     \\\n+  CHECK (g == 1.0##L1 - EPSILON1 / 2.0##L1);\t\t\t\t     \\\n+  const type h = fn (__builtin_inf (), 0.0##L2);\t\t\t     \\\n+  CHECK (h == MAX1);\t\t\t\t\t\t\t     \\\n+  const type i = fn (-1.0##L1, -__builtin_inf ());\t\t\t     \\\n+  CHECK (i == -1.0##L1 - EPSILON1);\t\t\t\t\t     \\\n+  const type j = fn (1.5##L1, __builtin_inf ());\t\t\t     \\\n+  CHECK (j == 1.5##L1 + EPSILON1);\t\t\t\t\t     \\\n+  const type k = fn (1.5##L1 - EPSILON1, 100.0##L2);\t\t\t     \\\n+  CHECK (k == 1.5##L1);\t\t\t\t\t\t\t     \\\n+  const type l\t\t\t\t\t\t\t\t     \\\n+    = (NEED_EXC || NEED_ERRNO) ? 0.0##L1 : fn (DENORM_MIN1, 0.0##L2);\t     \\\n+  CHECK (l == 0.0##L1 && !__builtin_signbit (l));\t\t\t     \\\n+  const type m\t\t\t\t\t\t\t\t     \\\n+    = (NEED_EXC || NEED_ERRNO) ? __builtin_inf##l1 ()\t\t\t     \\\n+      : fn (MAX1, __builtin_inf ());\t\t\t\t\t     \\\n+  CHECK (__builtin_isinf##l1 (m) && !__builtin_signbit (m));\t\t     \\\n+  const type n = fn (DENORM_MIN1, 12.0##L2);\t\t\t\t     \\\n+  CHECK (n == 2.0##L1 * DENORM_MIN1);\t\t\t\t\t     \\\n+  const type o = fn (n, 24.0##L2);\t\t\t\t\t     \\\n+  CHECK (o == 3.0##L1 * DENORM_MIN1);\t\t\t\t\t     \\\n+  const type p = fn (o, 132.0##L2);\t\t\t\t\t     \\\n+  CHECK (p == 4.0##L1 * DENORM_MIN1);\t\t\t\t\t     \\\n+  const type q = fn (2.0##L1 * DENORM_MIN1, -__builtin_inf ());\t\t     \\\n+  CHECK (q == DENORM_MIN1);\t\t\t\t\t\t     \\\n+  const type r = fn (3.0##L1 * DENORM_MIN1, DENORM_MIN2);\t\t     \\\n+  CHECK (r == 2.0##L1 * DENORM_MIN1);\t\t\t\t\t     \\\n+  const type s = fn (4.0##L1 * DENORM_MIN1, 2.0##L2 * DENORM_MIN2);\t     \\\n+  CHECK (s == 3.0##L1 * DENORM_MIN1);\t\t\t\t\t     \\\n+  const type t = fn (MIN1, 0.0##L2);\t\t\t\t\t     \\\n+  CHECK (t == MIN1 - DENORM_MIN1);\t\t\t\t\t     \\\n+  const type u = fn (MIN1 - DENORM_MIN1, -MIN2);\t\t\t     \\\n+  CHECK (u == MIN1 - 2.0##L1 * DENORM_MIN1);\t\t\t\t     \\\n+  const type v = fn (MIN1 - 2.0##L1 * DENORM_MIN1, 100.0##L2);\t\t     \\\n+  CHECK (v == MIN1 - DENORM_MIN1);\t\t\t\t\t     \\\n+  const type w = fn (MIN1 - DENORM_MIN1, MAX2);\t\t\t\t     \\\n+  CHECK (w == MIN1);\t\t\t\t\t\t\t     \\\n+  const type x = fn (MIN1, 17.0##L2);\t\t\t\t\t     \\\n+  CHECK (x == MIN1 + DENORM_MIN1);\t\t\t\t\t     \\\n+  const type y = fn (MIN1 + DENORM_MIN1, __builtin_inf##l2 ());\t\t     \\\n+  CHECK (y == MIN1 + 2.0##L1 * DENORM_MIN1);\t\t\t\t     \\\n+  const type z = fn (MIN1 / 2.0##L1, -MIN2);\t\t\t\t     \\\n+  CHECK (z == MIN1 / 2.0##L1 - DENORM_MIN1);\t\t\t\t     \\\n+  const type aa = fn (-MIN1 / 4.0##L1, MIN2);\t\t\t\t     \\\n+  CHECK (aa == -MIN1 / 4.0##L1 + DENORM_MIN1);\t\t\t\t     \\\n+  const type ab = fn (MIN1 * 2.0##L1, -MIN2);\t\t\t\t     \\\n+  CHECK (ab == MIN1 * 2.0##L1 - DENORM_MIN1);\t\t\t\t     \\\n+  const type ac = fn (MIN1 * 4.0##L1, MIN2);\t\t\t\t     \\\n+  CHECK (ac == MIN1 * 4.0##L1 - DENORM_MIN1 * 2.0##L1);\t\t\t     \\\n+  const type ad = fn (MIN1 * 64.0##L1, MIN2);\t\t\t\t     \\\n+  CHECK (ad == MIN1 * 64.0##L1 - DENORM_MIN1 * 32.0##L1);\t\t     \\\n+  const type ae = fn (MIN1 / 2.0##L1 - DENORM_MIN1, 100.0##L2);\t\t     \\\n+  CHECK (ae == MIN1 / 2.0##L1);\t\t\t\t\t\t     \\\n+  const type af = fn (-MIN1 / 4 + DENORM_MIN1, -100.0##L2);\t\t     \\\n+  CHECK (af == -MIN1 / 4.0##L1);\t\t\t\t\t     \\\n+  const type ag = fn (MIN1 * 2.0##L1 - DENORM_MIN1, 100.0##L2);\t\t     \\\n+  CHECK (ag == MIN1 * 2.0##L1);\t\t\t\t\t\t     \\\n+  const type ah = fn (MIN1 * 4.0##L1 - 2.0##L1 * DENORM_MIN1, 100.0##L2);    \\\n+  CHECK (ah == MIN1 * 4.0##L1);\t\t\t\t\t\t     \\\n+  const type ai = fn (MIN1 * 64.0##L1 - 32.0##L1 * DENORM_MIN1, 100.0##L2);  \\\n+  CHECK (ai == MIN1 * 64.0##L1);\t\t\t\t\t     \\\n+  const type aj = fn (MIN1 * 64.0##L1, 100.0##L2);\t\t\t     \\\n+  CHECK (aj == MIN1 * 64.0##L1 + 64.0##L1 * DENORM_MIN1);\t\t     \\\n+  const type ak = fn (MIN1 * 64.0##L1 + DENORM_MIN1 * 64.0##L1, 1024.0##L2); \\\n+  CHECK (ak == MIN1 * 64.0##L1 + 128.0##L1 * DENORM_MIN1);\t\t     \\\n+  const type al = fn (128.0##L1, 128.0##L2);\t\t\t\t     \\\n+  CHECK (al == 128.0##L1);\t\t\t\t\t\t     \\\n+  const type am = fn (128.0##L1, 129.0##L2);\t\t\t\t     \\\n+  CHECK (am == 128.0##L1 + 128.0##L1 * EPSILON1);\t\t\t     \\\n+  const type an = fn (-128.0##L1 + -128.0##L1 * EPSILON1, -130.0##L2);\t     \\\n+  CHECK (an == -128.0##L1 - 256.0##L1 * EPSILON1);\t\t\t     \\\n+  const type ao = fn (128.0##L1 + 256.0##L1 * EPSILON1, 256.0##L2);\t     \\\n+  CHECK (ao == 128.0##L1 + 384.0##L1 * EPSILON1);\t\t\t     \\\n+  const type ap = fn (128.0##L1 + 384.0##L1 * EPSILON1, -0.0##L2);\t     \\\n+  CHECK (ap == 128.0##L1 + 256.0##L1 * EPSILON1);\t\t\t     \\\n+  const type aq = fn (128.0##L1 + 256.0##L1 * EPSILON1, 1.0##L2);\t     \\\n+  CHECK (aq == 128.0##L1 + 128.0##L1 * EPSILON1);\t\t\t     \\\n+  const type ar = fn (128.0##L1 + 128.0##L1 * EPSILON1, 0.0##L2);\t     \\\n+  CHECK (ar == 128.0##L1);\t\t\t\t\t\t     \\\n+  const type as = fn (128.0##L1, 0.0##L2);\t\t\t\t     \\\n+  CHECK (as == 128.0##L1 - 64.0##L1 * EPSILON1);\t\t\t     \\\n+  const type at = fn (128.0##L1 - 64.0##L1 * EPSILON1, 5.0##L2);\t     \\\n+  CHECK (at == 128.0##L1 - 128.0##L1 * EPSILON1);\t\t\t     \\\n+}\n+\n+TEST (test1, nextafterf, float, F, F, f, f, __FLT_MIN__, __FLT_MAX__,\n+      __FLT_DENORM_MIN__, __FLT_EPSILON__, __FLT_MIN__, __FLT_MAX__,\n+      __FLT_DENORM_MIN__)\n+TEST (test2, nextafter, double, , , , , __DBL_MIN__, __DBL_MAX__,\n+      __DBL_DENORM_MIN__, __DBL_EPSILON__, __DBL_MIN__, __DBL_MAX__,\n+      __DBL_DENORM_MIN__)\n+#if __LDBL_MANT_DIG__ != 106\n+TEST (test3, nextafterl, long double, L, L, l, l, __LDBL_MIN__, __LDBL_MAX__,\n+      __LDBL_DENORM_MIN__, __LDBL_EPSILON__, __LDBL_MIN__, __LDBL_MAX__,\n+      __LDBL_DENORM_MIN__)\n+TEST (test4, nexttowardf, float, F, L, f, l, __FLT_MIN__, __FLT_MAX__,\n+      __FLT_DENORM_MIN__, __FLT_EPSILON__, __LDBL_MIN__, __LDBL_MAX__,\n+      __LDBL_DENORM_MIN__)\n+TEST (test5, nexttoward, double, , L, , l, __DBL_MIN__, __DBL_MAX__,\n+      __DBL_DENORM_MIN__, __DBL_EPSILON__, __LDBL_MIN__, __LDBL_MAX__,\n+      __LDBL_DENORM_MIN__)\n+TEST (test6, nexttowardl, long double, L, L, l, l, __LDBL_MIN__, __LDBL_MAX__,\n+      __LDBL_DENORM_MIN__, __LDBL_EPSILON__, __LDBL_MIN__, __LDBL_MAX__,\n+      __LDBL_DENORM_MIN__)\n+#endif\n+\n+int\n+main ()\n+{\n+  test1 ();\n+  test2 ();\n+#if __LDBL_MANT_DIG__ != 106\n+  test3 ();\n+  test4 ();\n+  test5 ();\n+  test6 ();\n+#endif\n+  return 0;\n+}"}, {"sha": "36b7e3cfa1ad65542a5d07a5b00d7d5a21e3276f", "filename": "gcc/testsuite/gcc.dg/nextafter-2.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047823853d8324eab7d6ad8f266ee5395c4a76ff/gcc%2Ftestsuite%2Fgcc.dg%2Fnextafter-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047823853d8324eab7d6ad8f266ee5395c4a76ff/gcc%2Ftestsuite%2Fgcc.dg%2Fnextafter-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fnextafter-2.c?ref=047823853d8324eab7d6ad8f266ee5395c4a76ff", "patch": "@@ -0,0 +1,6 @@\n+/* PR libstdc++/85466 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-builtin\" } */\n+/* { dg-add-options ieee } */\n+\n+#include \"nextafter-1.c\""}, {"sha": "25a520bb15e22dbd5c63427910425641116d71cb", "filename": "gcc/testsuite/gcc.dg/nextafter-3.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047823853d8324eab7d6ad8f266ee5395c4a76ff/gcc%2Ftestsuite%2Fgcc.dg%2Fnextafter-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047823853d8324eab7d6ad8f266ee5395c4a76ff/gcc%2Ftestsuite%2Fgcc.dg%2Fnextafter-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fnextafter-3.c?ref=047823853d8324eab7d6ad8f266ee5395c4a76ff", "patch": "@@ -0,0 +1,9 @@\n+/* PR libstdc++/85466 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fmath-errno -fno-trapping-math -fdump-tree-optimized\" } */\n+/* { dg-add-options ieee } */\n+/* { dg-final { scan-tree-dump-not \"nextafter\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \"nexttoward\" \"optimized\" } } */\n+\n+#define NEED_ERRNO 1\n+#include \"nextafter-1.c\""}, {"sha": "7e3639b675c5b41c75c946e30b5d65d068a97d96", "filename": "gcc/testsuite/gcc.dg/nextafter-4.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047823853d8324eab7d6ad8f266ee5395c4a76ff/gcc%2Ftestsuite%2Fgcc.dg%2Fnextafter-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047823853d8324eab7d6ad8f266ee5395c4a76ff/gcc%2Ftestsuite%2Fgcc.dg%2Fnextafter-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fnextafter-4.c?ref=047823853d8324eab7d6ad8f266ee5395c4a76ff", "patch": "@@ -0,0 +1,10 @@\n+/* PR libstdc++/85466 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fmath-errno -ftrapping-math -fdump-tree-optimized\" } */\n+/* { dg-add-options ieee } */\n+/* { dg-final { scan-tree-dump-not \"nextafter\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \"nexttoward\" \"optimized\" } } */\n+\n+#define NEED_ERRNO 1\n+#define NEED_EXC 1\n+#include \"nextafter-1.c\""}]}