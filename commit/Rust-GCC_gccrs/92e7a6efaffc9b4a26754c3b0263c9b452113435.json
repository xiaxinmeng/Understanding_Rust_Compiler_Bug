{"sha": "92e7a6efaffc9b4a26754c3b0263c9b452113435", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTJlN2E2ZWZhZmZjOWI0YTI2NzU0YzNiMDI2M2M5YjQ1MjExMzQzNQ==", "commit": {"author": {"name": "Danny Smith", "email": "dannysmith@users.sourceforge.net", "date": "2003-07-26T11:43:15Z"}, "committer": {"name": "Danny Smith", "email": "dannysmith@gcc.gnu.org", "date": "2003-07-26T11:43:15Z"}, "message": "winnt.c: Revert 2003-07-08 change.\n\n\t* config/i386/winnt.c: Revert 2003-07-08 change.\n\t(i386_pe_section_type_flags): Remove error_with_decl here too.\n\nFrom-SVN: r69813", "tree": {"sha": "a8d535634a031598be9c74812bbef6ccfa1d43d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a8d535634a031598be9c74812bbef6ccfa1d43d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/92e7a6efaffc9b4a26754c3b0263c9b452113435", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92e7a6efaffc9b4a26754c3b0263c9b452113435", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92e7a6efaffc9b4a26754c3b0263c9b452113435", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92e7a6efaffc9b4a26754c3b0263c9b452113435/comments", "author": null, "committer": null, "parents": [{"sha": "ba9cfcb5e7cc98281b490dc88f80324483db5d6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba9cfcb5e7cc98281b490dc88f80324483db5d6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba9cfcb5e7cc98281b490dc88f80324483db5d6b"}], "stats": {"total": 42, "additions": 28, "deletions": 14}, "files": [{"sha": "3f278f5f8e550c6871927c013c62bffaaf711f3a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92e7a6efaffc9b4a26754c3b0263c9b452113435/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92e7a6efaffc9b4a26754c3b0263c9b452113435/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=92e7a6efaffc9b4a26754c3b0263c9b452113435", "patch": "@@ -1,3 +1,8 @@\n+2003-07-26  Danny Smith  <dannysmith@users.sourceforge.net>\n+\n+\t* config/i386/winnt.c: Revert 2003-07-08 change.\n+\t(i386_pe_section_type_flags): Remove error_with_decl here too.\n+\n 2003-07-26  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n \t* config/arm/pe.c (arm_mark_dllimport): Don't use xxx_with_decl."}, {"sha": "c253a84cc7b5b57361dfa04a4e35be16d3ddd0c7", "filename": "gcc/config/i386/winnt.c", "status": "modified", "additions": 23, "deletions": 14, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92e7a6efaffc9b4a26754c3b0263c9b452113435/gcc%2Fconfig%2Fi386%2Fwinnt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92e7a6efaffc9b4a26754c3b0263c9b452113435/gcc%2Fconfig%2Fi386%2Fwinnt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwinnt.c?ref=92e7a6efaffc9b4a26754c3b0263c9b452113435", "patch": "@@ -105,15 +105,17 @@ ix86_handle_dll_attribute (pnode, name, args, flags, no_add_attrs)\n       if (TREE_CODE (node) == FUNCTION_DECL  && DECL_INITIAL (node)\n           && !DECL_INLINE (node))\n \t{\n-\t  error_with_decl (node, \"function `%s' definition is marked dllimport.\");\n+\t  error (\"%Hfunction `%D' definition is marked dllimport.\",\n+\t\t &DECL_SOURCE_LOCATION (node), node);\n \t  *no_add_attrs = true;\n \t}\n \n       else if (TREE_CODE (node) == VAR_DECL)\n \t{\n \t  if (DECL_INITIAL (node))\n \t    {\n-\t      error_with_decl (node,\"variable `%s' definition is marked dllimport.\");\n+\t      error (\"%Hvariable `%D' definition is marked dllimport.\",\n+\t\t     &DECL_SOURCE_LOCATION (node), node);\n \t      *no_add_attrs = true;\n \t    }\n \n@@ -132,8 +134,8 @@ ix86_handle_dll_attribute (pnode, name, args, flags, no_add_attrs)\n       && (TREE_CODE (node) == VAR_DECL\n \t  || TREE_CODE (node) == FUNCTION_DECL)) \n     {\n-      error_with_decl (node, \"external linkage required for symbol '%s' because of '%s' attribute.\",\n-\t\t       IDENTIFIER_POINTER (name));\n+      error (\"%Hexternal linkage required for symbol '%D' because of '%s' attribute.\",\n+\t       &DECL_SOURCE_LOCATION (node), node, IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }\n \n@@ -253,7 +255,8 @@ i386_pe_dllimport_p (decl)\n \t{\n \t   /* Don't warn about artificial methods.  */\n \t  if (!DECL_ARTIFICIAL (decl))\n-\t    warning_with_decl (decl,\"function '%s' is defined after prior declaration as dllimport: attribute ignored.\");\n+\t    warning (\"%H function '%D' is defined after prior declaration as dllimport: attribute ignored\",\n+\t\t     &DECL_SOURCE_LOCATION (decl), decl);\n \t  return 0;\n \t}\n \n@@ -263,7 +266,8 @@ i386_pe_dllimport_p (decl)\n       else if (TREE_CODE (decl) == FUNCTION_DECL && DECL_INLINE (decl))\n         {\n \t  if (extra_warnings)\n-\t    warning_with_decl (decl, \"inline function '%s' is declared as dllimport: attribute ignored.\");\n+\t    warning (\"%Hinline function '%D' is declared as dllimport: attribute ignored.\", \n+\t\t     &DECL_SOURCE_LOCATION (decl), decl);\n \t  return 0;\n \t}\n \n@@ -274,8 +278,8 @@ i386_pe_dllimport_p (decl)\n \t       && !DECL_EXTERNAL (decl) && context_imp)\n \t{\n \t  if (!DECL_VIRTUAL_P (decl))\n-\t      error_with_decl (decl, \"definition of static data member '%s' of dllimport'd class.\");\n-           return 0;\n+            error (\"%Hdefinition of static data member '%D' of dllimport'd class.\", \n+\t\t   &DECL_SOURCE_LOCATION (decl), decl);           return 0;\n \t}\n \n       /* Since we can't treat a pointer to a dllimport'd symbol as a\n@@ -335,7 +339,8 @@ i386_pe_mark_dllexport (decl)\n     abort ();\n   if (i386_pe_dllimport_name_p (oldname))\n     {\n-      warning_with_decl (decl,\"inconsistent dll linkage for '%s': dllexport assumed.\");\n+      warning (\"%Hinconsistent dll linkage for '%D', dllexport assumed.\",\n+\t       &DECL_SOURCE_LOCATION (decl), decl);\n      /* Remove DLL_IMPORT_PREFIX.  */\n       oldname += strlen (DLL_IMPORT_PREFIX);\n       DECL_NON_ADDR_CONST_P (decl) = 0;\n@@ -386,7 +391,8 @@ i386_pe_mark_dllimport (decl)\n       /* Already done, but do a sanity check to prevent assembler errors. */\n       if (!DECL_EXTERNAL (decl) || !TREE_PUBLIC (decl))\n \t{\n-\t  error_with_decl (decl, \"failure in redeclaration of '%s': dllimport'd symbol lacks external linkage.\");\n+\t  error (\"%Hfailure in redeclaration of '%D': dllimport'd symbol lacks external linkage.\", \n+\t\t &DECL_SOURCE_LOCATION (decl), decl);\n \t  abort();\n \t}\n       return;\n@@ -532,9 +538,11 @@ i386_pe_encode_section_info (decl, rtl, first)\n       tree idp = get_identifier (oldname + strlen (DLL_IMPORT_PREFIX));\n       rtx newrtl = gen_rtx (SYMBOL_REF, Pmode, IDENTIFIER_POINTER (idp));\n \n-      warning_with_decl (decl, \"'%s' %s after being referenced with dllimport linkage.\",\n-\t         \t (DECL_INITIAL (decl) || !DECL_EXTERNAL (decl))\n-\t\t\t ? \"defined locally\" : \"redeclared without dllimport attribute\");\n+      warning (\"%H%s '%D' %s after being referenced with dllimport linkage.\",\n+\t         &DECL_SOURCE_LOCATION (decl),\n+\t         TREE_CODE (decl) == VAR_DECL ? \"variable\" : \"function\", \n+\t         decl, (DECL_INITIAL (decl) || !DECL_EXTERNAL (decl))\n+\t\t\t? \"defined locally\" : \"redeclared without dllimport attribute\");\n \n       XEXP (DECL_RTL (decl), 0) = newrtl;\n \n@@ -711,7 +719,8 @@ i386_pe_section_type_flags (decl, name, reloc)\n   else\n     {\n       if (decl && **slot != flags)\n-\terror_with_decl (decl, \"%s causes a section type conflict\");\n+\terror (\"%H'%D' causes a section type conflict\",\n+\t        &DECL_SOURCE_LOCATION (decl), decl);\n     }\n \n   return flags;"}]}