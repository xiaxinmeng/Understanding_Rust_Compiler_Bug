{"sha": "467a8db025e7513bca07688dc3eaf515bed0eb87", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDY3YThkYjAyNWU3NTEzYmNhMDc2ODhkYzNlYWY1MTViZWQwZWI4Nw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2011-10-02T14:30:50Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2011-10-02T14:30:50Z"}, "message": "cgraphunit.c (ipa_passes): Remove unrechable nodes.\n\n\n\t* cgraphunit.c (ipa_passes): Remove unrechable nodes.\n\t* lto-streamer-out.c (produce_symtab): Skip unused extern declarations.\n\t* ipa.c (cgraph_remove_unreachable_nodes): Do not assume that external\n\tfunctions are reachable when address is taken.\n\t* ipa-inline-analysis.c (reset_inline_edge_summary): New\n\n\t* gcc.dg/ipa/ctor-empty-1.c: Update dump file.\n\nFrom-SVN: r179429", "tree": {"sha": "f40e1b4f38e5db0794b1f03ee8f8d26958cf4b8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f40e1b4f38e5db0794b1f03ee8f8d26958cf4b8b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/467a8db025e7513bca07688dc3eaf515bed0eb87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/467a8db025e7513bca07688dc3eaf515bed0eb87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/467a8db025e7513bca07688dc3eaf515bed0eb87", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/467a8db025e7513bca07688dc3eaf515bed0eb87/comments", "author": null, "committer": null, "parents": [{"sha": "78e5ce9f1eb789154f083296ae85a7582bc36a97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78e5ce9f1eb789154f083296ae85a7582bc36a97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78e5ce9f1eb789154f083296ae85a7582bc36a97"}], "stats": {"total": 41, "additions": 32, "deletions": 9}, "files": [{"sha": "05539e6355c33f2b99a17bb5fddee71a7e349140", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/467a8db025e7513bca07688dc3eaf515bed0eb87/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/467a8db025e7513bca07688dc3eaf515bed0eb87/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=467a8db025e7513bca07688dc3eaf515bed0eb87", "patch": "@@ -1,3 +1,11 @@\n+2011-10-02  Jan Hubicka  <jh@suse.cz>\n+\n+\t* cgraphunit.c (ipa_passes): Remove unrechable nodes.\n+\t* lto-streamer-out.c (produce_symtab): Skip unused extern declarations.\n+\t* ipa.c (cgraph_remove_unreachable_nodes): Do not assume that external\n+\tfunctions are reachable when address is taken.\n+\t* tree-sra.c (modify_function): Free dominance info.\n+\n 2011-10-02  Jan Hubicka  <jh@suse.cz>\n \n \t* ipa-inline-analysis.c (inline_summary_alloc): Bounds check."}, {"sha": "5964570d882d6023e7499102c4323fe1e3aa2d94", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/467a8db025e7513bca07688dc3eaf515bed0eb87/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/467a8db025e7513bca07688dc3eaf515bed0eb87/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=467a8db025e7513bca07688dc3eaf515bed0eb87", "patch": "@@ -2011,6 +2011,12 @@ ipa_passes (void)\n \treturn;\n     }\n \n+  /* We never run removal of unreachable nodes after early passes.  This is\n+     because TODO is run before the subpasses.  It is important to remove\n+     the unreachable functions to save works at IPA level and to get LTO\n+     symbol tables right.  */\n+  cgraph_remove_unreachable_nodes (true, cgraph_dump_file);\n+\n   /* If pass_all_early_optimizations was not scheduled, the state of\n      the cgraph will not be properly updated.  Update it now.  */\n   if (cgraph_state < CGRAPH_STATE_IPA_SSA)"}, {"sha": "dfd8eef99ca362c3bab3f2fe0ed7608ea2732a67", "filename": "gcc/ipa.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/467a8db025e7513bca07688dc3eaf515bed0eb87/gcc%2Fipa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/467a8db025e7513bca07688dc3eaf515bed0eb87/gcc%2Fipa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa.c?ref=467a8db025e7513bca07688dc3eaf515bed0eb87", "patch": "@@ -196,12 +196,7 @@ cgraph_remove_unreachable_nodes (bool before_inlining_p, FILE *file)\n \t    /* Keep around virtual functions for possible devirtualization.  */\n \t    || (before_inlining_p\n \t\t&& DECL_VIRTUAL_P (node->decl)\n-\t\t&& (DECL_COMDAT (node->decl) || DECL_EXTERNAL (node->decl)))\n-\t    /* Also external functions with address taken are better to stay\n-\t       for indirect inlining.  */\n-\t    || (before_inlining_p\n-\t\t&& DECL_EXTERNAL (node->decl)\n-\t\t&& node->address_taken)))\n+\t\t&& (DECL_COMDAT (node->decl) || DECL_EXTERNAL (node->decl)))))\n       {\n         gcc_assert (!node->global.inlined_to);\n \tenqueue_cgraph_node (node, &first);"}, {"sha": "d107b916e56d5b25e4846bbafecb0021fba9cfd6", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/467a8db025e7513bca07688dc3eaf515bed0eb87/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/467a8db025e7513bca07688dc3eaf515bed0eb87/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=467a8db025e7513bca07688dc3eaf515bed0eb87", "patch": "@@ -1407,6 +1407,15 @@ produce_symtab (struct output_block *ob,\n       node = lto_cgraph_encoder_deref (encoder, i);\n       if (!DECL_EXTERNAL (node->decl))\n \tcontinue;\n+      /* We keep around unused extern inlines in order to be able to inline\n+\t them indirectly or via vtables.  Do not output them to symbol\n+\t table: they end up being undefined and just consume space.  */\n+      if (!node->address_taken && !node->callers)\n+\t{\n+\t  gcc_assert (node->analyzed);\n+\t  gcc_assert (DECL_DECLARED_INLINE_P (node->decl));\n+\t  continue;\n+\t}\n       if (DECL_COMDAT (node->decl)\n \t  && cgraph_comdat_can_be_unshared_p (node))\n \tcontinue;"}, {"sha": "37a71e5e4d86d1ae882778b06a682532e48c4fc5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/467a8db025e7513bca07688dc3eaf515bed0eb87/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/467a8db025e7513bca07688dc3eaf515bed0eb87/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=467a8db025e7513bca07688dc3eaf515bed0eb87", "patch": "@@ -1,3 +1,7 @@\n+2011-10-02  Jan Hubicka  <jh@suse.cz>\n+\n+\t* gcc.dg/ipa/ctor-empty-1.c: Update dump file.\n+\n 2011-10-01  David S. Miller  <davem@davemloft.net>\n \n \t* gcc.target/sparc/cmask.c: New test."}, {"sha": "bb8e7aff25d87e2b11af4bdda64cb74bf6e9c58b", "filename": "gcc/testsuite/gcc.dg/ipa/ctor-empty-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/467a8db025e7513bca07688dc3eaf515bed0eb87/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fctor-empty-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/467a8db025e7513bca07688dc3eaf515bed0eb87/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fctor-empty-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fctor-empty-1.c?ref=467a8db025e7513bca07688dc3eaf515bed0eb87", "patch": "@@ -1,8 +1,8 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O3 -c -fdump-ipa-whole-program\"  } */\n+/* { dg-options \"-O3 -c -fdump-ipa-cgraph\"  } */\n static __attribute__((constructor))\n void empty_constructor()\n {\n }\n-/* { dg-final { scan-ipa-dump \"Reclaiming functions: empty_constructor\"  \"whole-program\"  } } */\n-/* { dg-final { cleanup-ipa-dump \"whole-program\" } } */\n+/* { dg-final { scan-ipa-dump \"Reclaiming functions: empty_constructor\"  \"cgraph\"  } } */\n+/* { dg-final { cleanup-ipa-dump \"cgraph\" } } */"}, {"sha": "c83f480643c0be818ef3ca0f08624d5e5877d995", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/467a8db025e7513bca07688dc3eaf515bed0eb87/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/467a8db025e7513bca07688dc3eaf515bed0eb87/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=467a8db025e7513bca07688dc3eaf515bed0eb87", "patch": "@@ -4622,6 +4622,7 @@ modify_function (struct cgraph_node *node, ipa_parm_adjustment_vec adjustments)\n   VEC (cgraph_edge_p, heap) * redirect_callers = collect_callers_of_node (node);\n \n   rebuild_cgraph_edges ();\n+  free_dominance_info (CDI_DOMINATORS);\n   pop_cfun ();\n   current_function_decl = NULL_TREE;\n "}]}