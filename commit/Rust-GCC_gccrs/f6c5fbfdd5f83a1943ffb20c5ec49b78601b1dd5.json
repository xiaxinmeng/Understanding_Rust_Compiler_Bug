{"sha": "f6c5fbfdd5f83a1943ffb20c5ec49b78601b1dd5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjZjNWZiZmRkNWY4M2ExOTQzZmZiMjBjNWVjNDliNzg2MDFiMWRkNQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2010-09-29T14:58:52Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2010-09-29T14:58:52Z"}, "message": "configure.ac: Add --enable-indirect-function option.\n\n\t* configure.ac: Add --enable-indirect-function option.\n\t* config.gcc: Add default_gnu_indirect_function.\n\t* config.in (HAVE_GAS_INDIRECT_FUNCTION): Rename to ...\n\t(HAVE_GNU_INDIRECT_FUNCTION): ... this.\n\t* varasm.c (do_assemble_alias): Adjust for macto name change.\n\t* configure: Rebuilt.\n\t* doc/install.texi: Document --enable-indirect-function.\n\n\ttestsuite/\n\t* lib/target-supports-dg.exp (dg-require-ifunc): Remove extraneous\n\talias checking.\n\t* lib/target-supports.exp (check_ifunc_available): Likewise.\n\nFrom-SVN: r164725", "tree": {"sha": "29a61336a4b0fe515e260e6960da160e7f939916", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/29a61336a4b0fe515e260e6960da160e7f939916"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f6c5fbfdd5f83a1943ffb20c5ec49b78601b1dd5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6c5fbfdd5f83a1943ffb20c5ec49b78601b1dd5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6c5fbfdd5f83a1943ffb20c5ec49b78601b1dd5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6c5fbfdd5f83a1943ffb20c5ec49b78601b1dd5/comments", "author": null, "committer": null, "parents": [{"sha": "f0036cca42f0e15b89736429ffd17d174fa14f13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0036cca42f0e15b89736429ffd17d174fa14f13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0036cca42f0e15b89736429ffd17d174fa14f13"}], "stats": {"total": 145, "additions": 76, "deletions": 69}, "files": [{"sha": "096c59d380aa661e7a0ec1956b271545e9aca467", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6c5fbfdd5f83a1943ffb20c5ec49b78601b1dd5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6c5fbfdd5f83a1943ffb20c5ec49b78601b1dd5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f6c5fbfdd5f83a1943ffb20c5ec49b78601b1dd5", "patch": "@@ -1,3 +1,13 @@\n+2010-09-29  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* configure.ac: Add --enable-indirect-function option.\n+\t* config.gcc: Add default_gnu_indirect_function.\n+\t* config.in (HAVE_GAS_INDIRECT_FUNCTION): Rename to ...\n+\t(HAVE_GNU_INDIRECT_FUNCTION): ... this.\n+\t* varasm.c (do_assemble_alias): Adjust for macto name change.\n+\t* configure: Rebuilt.\n+\t* doc/install.texi: Document --enable-indirect-function.\n+\n 2010-09-29  Joseph Myers  <joseph@codesourcery.com>\n \n \t* doc/options.texi (Variable, Var, Init): Update documentation"}, {"sha": "6558a996250bc09897f2e691ec195177d422644f", "filename": "gcc/config.gcc", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6c5fbfdd5f83a1943ffb20c5ec49b78601b1dd5/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6c5fbfdd5f83a1943ffb20c5ec49b78601b1dd5/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=f6c5fbfdd5f83a1943ffb20c5ec49b78601b1dd5", "patch": "@@ -45,6 +45,16 @@\n #\t\t\tdefault value of $default_use_cxa_atexit is set to\n #\t\t\t\"no\" except for targets which are known to be OK.\n #\n+#  default_gnu_indirect_function\n+#                       The default value for the $enable_gnu_indirect_function\n+#                       variable.  enable_gnu_indirect_function relies\n+#\t\t\tupon the presence of a non-standard gnu ifunc support\n+#\t\t\tin the assembler, linker and dynamic linker.\n+#\t\t\tSince not all libraries provide the dynamic linking\n+#\t\t\tsupport, the default value of\n+#\t\t\t$default_gnu_indirect_function is set to\n+#\t\t\t\"no\" except for targets which are known to be OK.\n+#\n #  gas_flag\t\tEither yes or no depending on whether GNU as was\n #\t\t\trequested.\n #\n@@ -205,6 +215,7 @@ thread_file=\n gas=\"$gas_flag\"\n gnu_ld=\"$gnu_ld_flag\"\n default_use_cxa_atexit=no\n+default_gnu_indirect_function=no\n target_gtfiles=\n need_64bit_hwint=\n need_64bit_isa=\n@@ -1192,6 +1203,8 @@ i[34567]86-*-linux* | i[34567]86-*-kfreebsd*-gnu | i[34567]86-*-knetbsd*-gnu | i\n \ttm_file=\"${tm_file} i386/unix.h i386/att.h dbxelf.h elfos.h svr4.h linux.h glibc-stdint.h\"\n \tcase ${target} in\n \ti[34567]86-*-linux*)\n+\t\t# Assume modern glibc\n+\t\tdefault_gnu_indirect_function=yes\n \t\tif test x$enable_targets = xall; then\n \t\t\ttm_file=\"${tm_file} i386/x86-64.h i386/linux64.h\"\n \t\t\ttm_defines=\"${tm_defines} TARGET_BI_ARCH=1\"\n@@ -1227,6 +1240,8 @@ x86_64-*-linux* | x86_64-*-kfreebsd*-gnu | x86_64-*-knetbsd*-gnu)\n \ttm_file=\"${tm_file} i386/unix.h i386/att.h dbxelf.h elfos.h svr4.h linux.h glibc-stdint.h \\\n \t\t i386/x86-64.h i386/linux64.h\"\n \tcase ${target} in\n+\tx86_64-*-linux*)\n+\t  default_gnu_indirect_function=glibc-2011 ;;\n \tx86_64-*-kfreebsd*-gnu) tm_file=\"${tm_file} kfreebsd-gnu.h\" ;;\n \tx86_64-*-knetbsd*-gnu) tm_file=\"${tm_file} knetbsd-gnu.h\" ;;\n \tesac"}, {"sha": "3925a111e186531a4a6526b466863eff03c74b86", "filename": "gcc/config.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6c5fbfdd5f83a1943ffb20c5ec49b78601b1dd5/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6c5fbfdd5f83a1943ffb20c5ec49b78601b1dd5/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=f6c5fbfdd5f83a1943ffb20c5ec49b78601b1dd5", "patch": "@@ -959,8 +959,8 @@\n /* Define if your assembler and linker support .hidden. */\n #undef HAVE_GAS_HIDDEN\n \n-/* Define if your assembler supports indirect function type. */\n-#undef HAVE_GAS_INDIRECT_FUNCTION\n+/* Define if your system supports gnu indirect functions. */\n+#undef HAVE_GNU_INDIRECT_FUNCTION\n \n /* Define if your assembler supports .lcomm with an alignment field. */\n #ifndef USED_FOR_TARGET"}, {"sha": "e01097cb0698297f61e8e330afefd1285e1d33f5", "filename": "gcc/configure", "status": "modified", "additions": 16, "deletions": 34, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6c5fbfdd5f83a1943ffb20c5ec49b78601b1dd5/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6c5fbfdd5f83a1943ffb20c5ec49b78601b1dd5/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=f6c5fbfdd5f83a1943ffb20c5ec49b78601b1dd5", "patch": "@@ -903,6 +903,7 @@ with_pic\n enable_fast_install\n enable_libtool_lock\n with_plugin_ld\n+enable_gnu_indirect_function\n enable_comdat\n enable_gnu_unique_object\n enable_linker_build_id\n@@ -1608,6 +1609,9 @@ Optional Features:\n   --enable-fast-install[=PKGS]\n                           optimize for fast installation [default=yes]\n   --disable-libtool-lock  avoid locking (might break parallel builds)\n+  --enable-gnu-indirect-function\n+                          enable the use of the @gnu_indirect_function to\n+                          glibc systems\n   --enable-comdat         enable COMDAT group support\n   --enable-gnu-unique-object\tenable the use of the @gnu_unique_object ELF extension on\n \t\t\t\tglibc systems\n@@ -17123,7 +17127,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 17126 \"configure\"\n+#line 17130 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -17229,7 +17233,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 17232 \"configure\"\n+#line 17236 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -21316,42 +21320,20 @@ $as_echo \"$gcc_cv_as_hidden\" >&6; }\n # gnu_indirect_function type is an extension proposed at\n # http://groups.google/com/group/generic-abi/files. It allows dynamic runtime\n # selection of function implementation\n-{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for gnu_indirect_function\" >&5\n-$as_echo_n \"checking assembler for gnu_indirect_function... \" >&6; }\n-if test \"${gcc_cv_as_indirect_function+set}\" = set; then :\n-  $as_echo_n \"(cached) \" >&6\n+# Check whether --enable-gnu-indirect-function was given.\n+if test \"${enable_gnu_indirect_function+set}\" = set; then :\n+  enableval=$enable_gnu_indirect_function; case $enable_gnu_indirect_function in\n+    yes | no) ;;\n+    *) as_fn_error \"'$enable_gnu_indirect_function' is an invalid value for --enable-gnu-indirect-function.\n+Valid choices are 'yes' and 'no'.\" \"$LINENO\" 5 ;;\n+  esac\n else\n-  gcc_cv_as_indirect_function=no\n-    if test $in_tree_gas = yes; then\n-    if test $in_tree_gas_is_elf = yes \\\n-  && test $gcc_cv_gas_vers -ge `expr \\( \\( 2 \\* 1000 \\) + 20 \\) \\* 1000 + 1`\n-  then gcc_cv_as_indirect_function=yes\n-fi\n-  elif test x$gcc_cv_as != x; then\n-    echo '\t.type  Foo, @gnu_indirect_function\n-Foo:' > conftest.s\n-    if { ac_try='$gcc_cv_as $gcc_cv_as_flags  -o conftest.o conftest.s >&5'\n-  { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_try\\\"\"; } >&5\n-  (eval $ac_try) 2>&5\n-  ac_status=$?\n-  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n-  test $ac_status = 0; }; }\n-    then\n-\tgcc_cv_as_indirect_function=yes\n-    else\n-      echo \"configure: failed program was\" >&5\n-      cat conftest.s >&5\n-    fi\n-    rm -f conftest.o conftest.s\n-  fi\n+  enable_gnu_indirect_function=\"$default_gnu_indirect_function\"\n fi\n-{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_as_indirect_function\" >&5\n-$as_echo \"$gcc_cv_as_indirect_function\" >&6; }\n-\n \n-if test $gcc_cv_as_indirect_function = yes ; then\n+if test x$enable_gnu_indirect_function = xyes; then\n \n-$as_echo \"#define HAVE_GAS_INDIRECT_FUNCTION 1\" >>confdefs.h\n+$as_echo \"#define HAVE_GNU_INDIRECT_FUNCTION 1\" >>confdefs.h\n \n fi\n "}, {"sha": "a83a227f19de8ae9e572980b8e9e991d69b30087", "filename": "gcc/configure.ac", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6c5fbfdd5f83a1943ffb20c5ec49b78601b1dd5/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6c5fbfdd5f83a1943ffb20c5ec49b78601b1dd5/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=f6c5fbfdd5f83a1943ffb20c5ec49b78601b1dd5", "patch": "@@ -2151,14 +2151,18 @@ esac])\n # gnu_indirect_function type is an extension proposed at\n # http://groups.google/com/group/generic-abi/files. It allows dynamic runtime\n # selection of function implementation\n-gcc_GAS_CHECK_FEATURE(gnu_indirect_function, gcc_cv_as_indirect_function,\n- [elf,2,20,1],,\n-[\t.type  Foo, @gnu_indirect_function\n-Foo:])\n-GCC_TARGET_TEMPLATE([HAVE_GAS_INDIRECT_FUNCTION])\n-if test $gcc_cv_as_indirect_function = yes ; then\n-  AC_DEFINE(HAVE_GAS_INDIRECT_FUNCTION, 1,\n-  [Define if your assembler supports indirect function type.])\n+AC_ARG_ENABLE(gnu-indirect-function,\n+ [AS_HELP_STRING([--enable-gnu-indirect-function],\n+                 [enable the use of the @gnu_indirect_function to glibc systems])],\n+ [case $enable_gnu_indirect_function in\n+    yes | no) ;;\n+    *) AC_MSG_ERROR(['$enable_gnu_indirect_function' is an invalid value for --enable-gnu-indirect-function.\n+Valid choices are 'yes' and 'no'.]) ;;\n+  esac],\n+ [enable_gnu_indirect_function=\"$default_gnu_indirect_function\"])\n+if test x$enable_gnu_indirect_function = xyes; then\n+  AC_DEFINE(HAVE_GNU_INDIRECT_FUNCTION, 1,\n+   [Define if your system supports gnu indirect functions.])\n fi\n \n changequote(,)dnl"}, {"sha": "5cb047e50a68dde3b9977ca192c9ebfdbf17987d", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6c5fbfdd5f83a1943ffb20c5ec49b78601b1dd5/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6c5fbfdd5f83a1943ffb20c5ec49b78601b1dd5/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=f6c5fbfdd5f83a1943ffb20c5ec49b78601b1dd5", "patch": "@@ -1229,6 +1229,10 @@ destructors, but requires __cxa_atexit in libc.  This option is currently\n only available on systems with GNU libc.  When enabled, this will cause\n @option{-fuse-cxa-atexit} to be passed by default.\n \n+@item --enable-indirect-function\n+Define if you want to enable the @code{ifunc} attribute.  This option is\n+currently only available on systems with GNU libc on certain targets.\n+\n @item --enable-target-optspace\n Specify that target\n libraries should be optimized for code space instead of code speed."}, {"sha": "76ae3a1eff38eacda151545ca192b98462efd02b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6c5fbfdd5f83a1943ffb20c5ec49b78601b1dd5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6c5fbfdd5f83a1943ffb20c5ec49b78601b1dd5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f6c5fbfdd5f83a1943ffb20c5ec49b78601b1dd5", "patch": "@@ -1,3 +1,9 @@\n+2010-09-29  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* lib/target-supports-dg.exp (dg-require-ifunc): Remove extraneous\n+\talias checking.\n+\t* lib/target-supports.exp (check_ifunc_available): Likewise.\n+\n 2010-09-29  Tristan Gingold  <gingold@adacore.com>\n \n \t* gcc.dg/stack-usage-1.c (SIZE): Adjust for avr."}, {"sha": "257c68e3bdbc912de75ce2b38573659f6b4f5bce", "filename": "gcc/testsuite/lib/target-supports-dg.exp", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6c5fbfdd5f83a1943ffb20c5ec49b78601b1dd5/gcc%2Ftestsuite%2Flib%2Ftarget-supports-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6c5fbfdd5f83a1943ffb20c5ec49b78601b1dd5/gcc%2Ftestsuite%2Flib%2Ftarget-supports-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports-dg.exp?ref=f6c5fbfdd5f83a1943ffb20c5ec49b78601b1dd5", "patch": "@@ -94,12 +94,7 @@ proc dg-require-alias { args } {\n # test.\n \n proc dg-require-ifunc { args } {\n-    set ifunc_available [ check_ifunc_available ]\n-    if { $ifunc_available == -1 } {\n-\tupvar name name\n-\tunresolved \"$name\"\n-    }\n-    if { $ifunc_available < 2 } {\n+    if { ![ check_ifunc_available ] } {\n \tupvar dg-do-what dg-do-what\n \tset dg-do-what [list [lindex ${dg-do-what} 0] \"N\" \"P\"]\n     }"}, {"sha": "35798a092c2b7c5aad8fe3f7446ae050e571fed3", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 9, "deletions": 18, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6c5fbfdd5f83a1943ffb20c5ec49b78601b1dd5/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6c5fbfdd5f83a1943ffb20c5ec49b78601b1dd5/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=f6c5fbfdd5f83a1943ffb20c5ec49b78601b1dd5", "patch": "@@ -372,12 +372,10 @@ proc check_alias_available { } {\n # proc check_ifunc_available { }\n ###############################\n \n-# Determine if the target toolchain supports the alias attribute.\n+# Determine if the target toolchain supports the ifunc attribute.\n \n-# Returns 2 if the target supports aliases.  Returns 1 if the target\n-# only supports weak aliased.  Returns 0 if the target does not\n-# support aliases at all.  Returns -1 if support for aliases could not\n-# be determined.\n+# Returns 1 if the target supports ifunc.  Returns 0 if the target\n+# does not support ifunc.\n \n proc check_ifunc_available { } {\n     global ifunc_available_saved\n@@ -390,26 +388,19 @@ proc check_ifunc_available { } {\n \tset obj ifunc[pid].o\n         verbose \"check_ifunc_available  compiling testfile $src\" 2\n \tset f [open $src \"w\"]\n-\t# Compile a small test program.  The definition of \"g\" is\n-\t# necessary to keep the Solaris assembler from complaining\n-\t# about the program.\n-\tputs $f \"#ifdef __cplusplus\\nextern \\\"C\\\"\\n#endif\\n\"\n-\tputs $f \"void g() {} void f() __attribute__((ifunc(\\\"g\\\")));\"\n+\tputs $f \"#endif\"\n+\tputs $f \"#ifdef __cplusplus\\nextern \\\"C\\\"\\n#endif\"\n+\tputs $f \"void g() {}\"\n+\tputs $f \"void f() __attribute__((ifunc(\\\"g\\\")));\"\n \tclose $f\n \tset lines [${tool}_target_compile $src $obj object \"\"]\n \tfile delete $src\n \tremote_file build delete $obj\n \n \tif [string match \"\" $lines] then {\n-\t    # No error messages, everything is OK.\n-\t    set ifunc_available_saved 2\n+\t    set ifunc_available_saved 1\n \t} else {\n-\t    if [regexp \"ifunc is not supported\" $lines] {\n-\t\tverbose \"check_ifunc_available  target does not support ifunc\" 2\n-\t\tset ifunc_available_saved 0\n-\t    } else {\n-\t\tset ifunc_available_saved -1\n-\t    }\n+\t    set ifunc_available_saved 0\n \t}\n \n \tverbose \"check_ifunc_available  returning $ifunc_available_saved\" 2"}, {"sha": "5f9ec9001cb88d3bfca9e462672cce791cdc537d", "filename": "gcc/varasm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6c5fbfdd5f83a1943ffb20c5ec49b78601b1dd5/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6c5fbfdd5f83a1943ffb20c5ec49b78601b1dd5/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=f6c5fbfdd5f83a1943ffb20c5ec49b78601b1dd5", "patch": "@@ -5364,7 +5364,7 @@ do_assemble_alias (tree decl, tree target)\n     }\n   if (lookup_attribute (\"ifunc\", DECL_ATTRIBUTES (decl)))\n     {\n-#if defined (ASM_OUTPUT_TYPE_DIRECTIVE) && HAVE_GAS_INDIRECT_FUNCTION\n+#if defined (ASM_OUTPUT_TYPE_DIRECTIVE) && HAVE_GNU_INDIRECT_FUNCTION\n       ASM_OUTPUT_TYPE_DIRECTIVE\n \t(asm_out_file, IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl)),\n \t IFUNC_ASM_TYPE);"}]}