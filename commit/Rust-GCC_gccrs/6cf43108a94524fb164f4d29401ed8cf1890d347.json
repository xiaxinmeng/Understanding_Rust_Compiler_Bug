{"sha": "6cf43108a94524fb164f4d29401ed8cf1890d347", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmNmNDMxMDhhOTQ1MjRmYjE2NGY0ZDI5NDAxZWQ4Y2YxODkwZDM0Nw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2006-12-13T17:29:26Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2006-12-13T17:29:26Z"}, "message": "[multiple changes]\n\n2006-12-13  Jakub Jelinek  <jakub@redhat.com>\n\n\t* g++.dg/debug/vartrack1.C: New test.\n\n\t* g++.dg/opt/ifcvt1.C: New test.\n\n\t* gcc.dg/tls/opt-13.c: New test.\n\n\t* gcc.dg/20060425-2.c: New test.\n\n\t* g++.dg/opt/pr15054-2.C: New test.\n\n\t* gcc.c-torture/execute/20060420-1.c: New test.\n\n\t* gcc.c-torture/execute/20060412-1.c: New test.\n\n\t* objc/compile/20060406-1.m: New test.\n\n2006-12-08  Alexandre Oliva  <aoliva@redhat.com>\n\n\t* g++.dg/template/array17.C: New test.\n\n2006-02-25  Alexandre Oliva  <aoliva@redhat.com>\n\n\t* gcc.target/powerpc/altivec-23.c: New test.\n\nFrom-SVN: r119837", "tree": {"sha": "b2e4fe83000683e3368074e77341645bd6d4c109", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2e4fe83000683e3368074e77341645bd6d4c109"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6cf43108a94524fb164f4d29401ed8cf1890d347", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cf43108a94524fb164f4d29401ed8cf1890d347", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cf43108a94524fb164f4d29401ed8cf1890d347", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cf43108a94524fb164f4d29401ed8cf1890d347/comments", "author": null, "committer": null, "parents": [{"sha": "40e1b1d433f5178bbf0c08d8ce18c9855390024b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40e1b1d433f5178bbf0c08d8ce18c9855390024b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40e1b1d433f5178bbf0c08d8ce18c9855390024b"}], "stats": {"total": 380, "additions": 380, "deletions": 0}, "files": [{"sha": "5fe430e5345e04f4d0279da7511f704c1aec8296", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cf43108a94524fb164f4d29401ed8cf1890d347/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cf43108a94524fb164f4d29401ed8cf1890d347/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6cf43108a94524fb164f4d29401ed8cf1890d347", "patch": "@@ -1,3 +1,29 @@\n+2006-12-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* g++.dg/debug/vartrack1.C: New test.\n+\n+\t* g++.dg/opt/ifcvt1.C: New test.\n+\n+\t* gcc.dg/tls/opt-13.c: New test.\n+\n+\t* gcc.dg/20060425-2.c: New test.\n+\n+\t* g++.dg/opt/pr15054-2.C: New test.\n+\n+\t* gcc.c-torture/execute/20060420-1.c: New test.\n+\n+\t* gcc.c-torture/execute/20060412-1.c: New test.\n+\n+\t* objc/compile/20060406-1.m: New test.\n+\n+2006-12-08  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* g++.dg/template/array17.C: New test.\n+\n+2006-02-25  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* gcc.target/powerpc/altivec-23.c: New test.\n+\n 2006-12-13  Lee Millward  <lee.millward@codesourcery.com>\n \n \tPR c++27316"}, {"sha": "d72cb6f3572060cd833ffcaaa064d3cfbe4b31b1", "filename": "gcc/testsuite/g++.dg/debug/vartrack1.C", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cf43108a94524fb164f4d29401ed8cf1890d347/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fvartrack1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cf43108a94524fb164f4d29401ed8cf1890d347/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fvartrack1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fvartrack1.C?ref=6cf43108a94524fb164f4d29401ed8cf1890d347", "patch": "@@ -0,0 +1,99 @@\n+// This testcase used to hang the compiler in vt_find_locations.\n+// { dg-do compile }\n+// { dg-options \"-O2 -g\" }\n+\n+struct S\n+{\n+  int a;\n+  S *b, *c, *d;\n+};\n+\n+struct T\n+{\n+  void f1 (S *x);\n+  void f2 (S *x);\n+  void f3 (S *x, S *y);\n+  S *e;\n+};\n+\n+void\n+T::f3 (S *x, S *y)\n+{\n+  while (x != this->e && (!x || x->a == 1))\n+    {\n+      if (x == y->c)\n+\t{\n+\t  S *w = y->d;\n+\t  if (w && w->a == 0)\n+\t    {\n+\t      w->a = 1;\n+\t      y->a = 0;\n+\t      f2 (y);\n+\t      w = y->d;\n+\t    }\n+\t  if (w && (!w->c || w->c->a == 1) && (!w->d || w->d->a == 1))\n+\t    {\n+\t      w->a = 0;\n+\t      x = y;\n+\t      y = x->b;\n+\t    }\n+\t  else\n+\t    {\n+\t      if (w && (!w->d || w->d->a == 1))\n+\t\t{\n+\t\t  if (w->c)\n+\t\t    w->c->a = 1;\n+\t\t  w->a = 0;\n+\t\t  f1 (w);\n+\t\t  w = y->d;\n+\t\t}\n+\t      if (w)\n+\t\t{\n+\t\t  w->a = y->a;\n+\t\t  if (w->d)\n+\t\t    w->d->a = 1;\n+\t\t}\n+\t      y->a = 1;\n+\t      f2 (y);\n+\t      x = e;\n+\t    }\n+\t}\n+      else\n+\t{\n+\t  S *w = y->c;\n+\t  if (w && w->a == 0)\n+\t    {\n+\t      w->a = 1;\n+\t      y->a = 0;\n+\t      f1 (y);\n+\t      w = y->c;\n+\t    }\n+\t  if (w && (!w->c || w->c->a == 1) && (!w->d || w->d->a == 1))\n+\t    {\n+\t      w->a = 0;\n+\t      x = y;\n+\t      y = x->b;\n+\t    }\n+\t  else\n+\t    {\n+\t      if (w && (!w->c || w->c->a == 1))\n+\t\t{\n+\t\t  w->a = 0;\n+\t\t  if (w->d)\n+\t\t    w->d->a = 1;\n+\t\t  f2 (w);\n+\t\t  w = y->c;\n+\t\t}\n+\t      if (w)\n+\t\t{\n+\t\t  w->a = y->a;\n+\t\t  if (w->c)\n+\t\t    w->c->a = 1;\n+\t\t}\n+\t      y->a = 1;\n+\t      f1 (y);\n+\t      x = e;\n+\t    }\n+\t}\n+    }\n+}"}, {"sha": "8fcbf4619078b1a8d685047d2393bbf844238c4d", "filename": "gcc/testsuite/g++.dg/opt/ifcvt1.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cf43108a94524fb164f4d29401ed8cf1890d347/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fifcvt1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cf43108a94524fb164f4d29401ed8cf1890d347/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fifcvt1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fifcvt1.C?ref=6cf43108a94524fb164f4d29401ed8cf1890d347", "patch": "@@ -0,0 +1,17 @@\n+// { dg-do compile }\n+// { dg-options \"-O2 -fnon-call-exceptions\" }\n+\n+struct S { ~S () throw () {} };\n+double bar ();\n+\n+int\n+foo ()\n+{\n+  S a;\n+  int i = 0;\n+  double c = bar ();\n+  c = c < 0 ? -c : c;\n+  if (c <= 1.e-8)\n+    i += 24;\n+  return i;\n+}"}, {"sha": "156e945d01135718e18484b99d7a434136435c4a", "filename": "gcc/testsuite/g++.dg/opt/pr15054-2.C", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cf43108a94524fb164f4d29401ed8cf1890d347/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr15054-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cf43108a94524fb164f4d29401ed8cf1890d347/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr15054-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr15054-2.C?ref=6cf43108a94524fb164f4d29401ed8cf1890d347", "patch": "@@ -0,0 +1,39 @@\n+// PR middle-end/15054\n+\n+// { dg-do run }\n+// { dg-options \"-O2\" }\n+\n+extern \"C\" void abort (void);\n+\n+void\n+__attribute__((noinline))\n+check (long x, long y)\n+{\n+  if (x != y)\n+    abort ();\n+}\n+\n+struct A\n+{\n+  A() : a(2) { check (a, 2); }\n+  ~A() { check (a, 2); }\n+private:\n+  long a;\n+};\n+\n+class B {\n+  long b;\n+  B& operator =(const B& );\n+public:\n+  B (long p) : b(p) { check (b, 6); }\n+  B (const B& p) : b(p.b) { check (b, 6); }\n+  ~B () { check (b, 6); A obj; check (b, 6); }\n+  B foo() { return B(*this); }\n+};\n+\n+int main ()\n+{\n+  B o(6);\n+  o.foo().foo();\n+  return 0;\n+}"}, {"sha": "12a5c472095b3c50ac4fbe29416ab1c3438821b2", "filename": "gcc/testsuite/g++.dg/template/array17.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cf43108a94524fb164f4d29401ed8cf1890d347/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Farray17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cf43108a94524fb164f4d29401ed8cf1890d347/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Farray17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Farray17.C?ref=6cf43108a94524fb164f4d29401ed8cf1890d347", "patch": "@@ -0,0 +1,23 @@\n+// { dg-do compile }\n+\n+template <typename T>\n+struct V {\n+  T& operator[](int);\n+};\n+\n+struct S {\n+  S operator +(int);\n+  template <typename T> T value();\n+};\n+\n+template <typename T>\n+void R (T v)\n+{\n+  v[(S() + 0).template value<int>()][0] = 0;\n+}\n+\n+int\n+main ()\n+{\n+  R(V<V<int> >());\n+}"}, {"sha": "a4cc4d450391b320ca8a891709ff7e5159f3f72c", "filename": "gcc/testsuite/gcc.c-torture/execute/20060412-1.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cf43108a94524fb164f4d29401ed8cf1890d347/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20060412-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cf43108a94524fb164f4d29401ed8cf1890d347/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20060412-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20060412-1.c?ref=6cf43108a94524fb164f4d29401ed8cf1890d347", "patch": "@@ -0,0 +1,33 @@\n+extern void abort (void);\n+\n+struct S\n+{\n+  long o;\n+};\n+\n+struct T\n+{\n+  long o;\n+  struct S m[82];\n+};\n+\n+struct T t;\n+\n+int\n+main ()\n+{\n+  struct S *p, *q;\n+\n+  p = (struct S *) &t;\n+  p = &((struct T *) p)->m[0];\n+  q = p + 82;\n+  while (--q > p)\n+    q->o = -1;\n+  q->o = 0;\n+\n+  if (q > p)\n+    abort ();\n+  if (q - p > 0)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "fe62f6bf0ee39f90968541dccce089a4e81af69e", "filename": "gcc/testsuite/gcc.c-torture/execute/20060420-1.c", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cf43108a94524fb164f4d29401ed8cf1890d347/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20060420-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cf43108a94524fb164f4d29401ed8cf1890d347/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20060420-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20060420-1.c?ref=6cf43108a94524fb164f4d29401ed8cf1890d347", "patch": "@@ -0,0 +1,71 @@\n+extern void abort (void);\n+\n+typedef float v4flt __attribute__ ((vector_size (16)));\n+\n+void __attribute__ ((noinline)) foo (float *dst, float **src, int a, int n)\n+{\n+  int i, j;\n+  int z = sizeof (v4flt) / sizeof (float);\n+  unsigned m = sizeof (v4flt) - 1;\n+\n+  for (j = 0; j < n && (((unsigned long) dst + j) & m); ++j)\n+    {\n+      float t = src[0][j];\n+      for (i = 1; i < a; ++i)\n+\tt += src[i][j];\n+      dst[j] = t;\n+    }\n+\n+  for (; j < (n - (4 * z - 1)); j += 4 * z)\n+    {\n+      v4flt t0 = *(v4flt *) (src[0] + j + 0 * z);\n+      v4flt t1 = *(v4flt *) (src[0] + j + 1 * z);\n+      v4flt t2 = *(v4flt *) (src[0] + j + 2 * z);\n+      v4flt t3 = *(v4flt *) (src[0] + j + 3 * z);\n+      for (i = 1; i < a; ++i)\n+\t{\n+\t  t0 += *(v4flt *) (src[i] + j + 0 * z);\n+\t  t1 += *(v4flt *) (src[i] + j + 1 * z);\n+\t  t2 += *(v4flt *) (src[i] + j + 2 * z);\n+\t  t3 += *(v4flt *) (src[i] + j + 3 * z);\n+\t}\n+      *(v4flt *) (dst + j + 0 * z) = t0;\n+      *(v4flt *) (dst + j + 1 * z) = t1;\n+      *(v4flt *) (dst + j + 2 * z) = t2;\n+      *(v4flt *) (dst + j + 3 * z) = t3;\n+    }\n+  for (; j < n; ++j)\n+    {\n+      float t = src[0][j];\n+      for (i = 1; i < a; ++i)\n+\tt += src[i][j];\n+      dst[j] = t;\n+    }\n+}\n+\n+float buffer[64];\n+\n+int\n+main (void)\n+{\n+  int i;\n+  float *dst, *src[2];\n+\n+  dst = buffer;\n+  dst += (-(long int) buffer & (16 * sizeof (float) - 1)) / sizeof (float);\n+  src[0] = dst + 16;\n+  src[1] = dst + 32;\n+  for (i = 0; i < 16; ++i)\n+    {\n+      src[0][i] = (float) i + 11 * (float) i;\n+      src[1][i] = (float) i + 12 * (float) i;\n+    }\n+  foo (dst, src, 2, 16);\n+  for (i = 0; i < 16; ++i)\n+    {\n+      float e = (float) i + 11 * (float) i + (float) i + 12 * (float) i;\n+      if (dst[i] != e)\n+\tabort ();\n+    }\n+  return 0;\n+}"}, {"sha": "2a5e131a1007684e3308640d7a4afe9814ba0b4b", "filename": "gcc/testsuite/gcc.dg/20060425-2.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cf43108a94524fb164f4d29401ed8cf1890d347/gcc%2Ftestsuite%2Fgcc.dg%2F20060425-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cf43108a94524fb164f4d29401ed8cf1890d347/gcc%2Ftestsuite%2Fgcc.dg%2F20060425-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20060425-2.c?ref=6cf43108a94524fb164f4d29401ed8cf1890d347", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+double\n+crashme (double v, double *p)\n+{\n+  if (v < 0. && *p == 1.)\n+    v = 0.;\n+  return v;\n+}"}, {"sha": "8eea76b68ab5f72cac09a8f7efedf37962e736ff", "filename": "gcc/testsuite/gcc.dg/tls/opt-13.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cf43108a94524fb164f4d29401ed8cf1890d347/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fopt-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cf43108a94524fb164f4d29401ed8cf1890d347/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fopt-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fopt-13.c?ref=6cf43108a94524fb164f4d29401ed8cf1890d347", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-require-effective-target tls } */\n+\n+__thread struct\n+{\n+  int a;\n+  char b[32];\n+} thr;\n+\n+int\n+main ()\n+{\n+  __builtin_strcpy (thr.b, \"abcd\");\n+  return 0;\n+}"}, {"sha": "c8851a4614bbcde939158d358613b660c0dd8d45", "filename": "gcc/testsuite/gcc.target/powerpc/altivec-23.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cf43108a94524fb164f4d29401ed8cf1890d347/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cf43108a94524fb164f4d29401ed8cf1890d347/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-23.c?ref=6cf43108a94524fb164f4d29401ed8cf1890d347", "patch": "@@ -0,0 +1,25 @@\n+/* Verify that it is possible to define variables of composite types\n+   containing vector types.  We used to crash handling the\n+   initializer of automatic ones.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-maltivec -mabi=altivec\" } */\n+\n+#include <altivec.h>\n+\n+typedef int bt;\n+typedef vector bt vt;\n+typedef struct { vt x; bt y[sizeof(vt) / sizeof (bt)]; } st;\n+#define INIT { 1, 2, 3, 4 }\n+\n+void f ()\n+{\n+  vt x = INIT;\n+  vt y[1] = { INIT };\n+  st s = { INIT, INIT };\n+}\n+\n+vt x = INIT;\n+vt y[1] = { INIT };\n+st s = { INIT, INIT };"}, {"sha": "e4496bf6edebac9bb28b4f1c552efe540da2e6c5", "filename": "gcc/testsuite/objc/compile/20060406-1.m", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cf43108a94524fb164f4d29401ed8cf1890d347/gcc%2Ftestsuite%2Fobjc%2Fcompile%2F20060406-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cf43108a94524fb164f4d29401ed8cf1890d347/gcc%2Ftestsuite%2Fobjc%2Fcompile%2F20060406-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fcompile%2F20060406-1.m?ref=6cf43108a94524fb164f4d29401ed8cf1890d347", "patch": "@@ -0,0 +1,21 @@\n+typedef struct\n+{\n+  void *p;\n+} *S;\n+\n+@protocol O\n+- (unsigned)j;\n+@end\n+\n+@interface I\n++ (unsigned char)T:(S<O>[2])p v:(S<O>)h;\n+@end\n+\n+@implementation I\n++ (unsigned char)T:(S<O>[2])p v:(S<O>)h\n+{\n+  p[0] = (S) 0;\n+  p[1] = (S) 0;\n+  return 0;\n+}\n+@end"}]}