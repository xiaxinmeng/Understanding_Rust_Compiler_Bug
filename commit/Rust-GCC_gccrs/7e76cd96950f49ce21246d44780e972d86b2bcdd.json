{"sha": "7e76cd96950f49ce21246d44780e972d86b2bcdd", "node_id": "C_kwDOANBUbNoAKDdlNzZjZDk2OTUwZjQ5Y2UyMTI0NmQ0NDc4MGU5NzJkODZiMmJjZGQ", "commit": {"author": {"name": "Steve Kargl", "email": "kargl@gcc.gnu.org", "date": "2022-12-23T04:38:57Z"}, "committer": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2022-12-23T05:19:39Z"}, "message": "Remove not needed assert macro which fails.\n\n\tPR fortran/106731\n\ngcc/fortran/ChangeLog:\n\n\t* trans-array.cc (gfc_trans_auto_array_allocation): Remove gcc_assert (!TREE_STATIC()).\n\ngcc/testsuite/ChangeLog:\n\n\t* gfortran.dg/pr106731.f90: New test.", "tree": {"sha": "b823c1e9b507eb1ba3af99c6172eca58ebb81cfa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b823c1e9b507eb1ba3af99c6172eca58ebb81cfa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e76cd96950f49ce21246d44780e972d86b2bcdd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e76cd96950f49ce21246d44780e972d86b2bcdd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e76cd96950f49ce21246d44780e972d86b2bcdd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e76cd96950f49ce21246d44780e972d86b2bcdd/comments", "author": null, "committer": null, "parents": [{"sha": "8ec5fcb6fc79e5bcca23c3fecbaf09d4566cb1d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ec5fcb6fc79e5bcca23c3fecbaf09d4566cb1d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ec5fcb6fc79e5bcca23c3fecbaf09d4566cb1d5"}], "stats": {"total": 59, "additions": 58, "deletions": 1}, "files": [{"sha": "44177aa0813f4b37b71c2748b0c6cf2b14a59e73", "filename": "gcc/fortran/trans-array.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e76cd96950f49ce21246d44780e972d86b2bcdd/gcc%2Ffortran%2Ftrans-array.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e76cd96950f49ce21246d44780e972d86b2bcdd/gcc%2Ffortran%2Ftrans-array.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.cc?ref=7e76cd96950f49ce21246d44780e972d86b2bcdd", "patch": "@@ -6614,7 +6614,6 @@ gfc_trans_auto_array_allocation (tree decl, gfc_symbol * sym,\n   type = TREE_TYPE (type);\n \n   gcc_assert (!sym->attr.use_assoc);\n-  gcc_assert (!TREE_STATIC (decl));\n   gcc_assert (!sym->module);\n \n   if (sym->ts.type == BT_CHARACTER"}, {"sha": "470830c706956f73e88626d915f73200e112b4a0", "filename": "gcc/testsuite/gfortran.dg/pr106731.f90", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e76cd96950f49ce21246d44780e972d86b2bcdd/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr106731.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e76cd96950f49ce21246d44780e972d86b2bcdd/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr106731.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr106731.f90?ref=7e76cd96950f49ce21246d44780e972d86b2bcdd", "patch": "@@ -0,0 +1,58 @@\n+! { dg-do run }\n+! PR106731 ICE on automatic array of derived type\n+module causes_ice\n+    implicit none\n+\n+    type :: t\n+        real(8) :: x\n+        contains\n+        procedure, private :: write_formatted\n+        generic :: write(formatted) => write_formatted\n+    end type t\n+\n+    contains\n+\n+    subroutine write_formatted(this, unit, iotype, v_list, iostat, iomsg)\n+       class(t), intent(in) :: this\n+       integer, intent(in) :: unit\n+       character(*), intent(in) :: iotype\n+       integer, intent(in) :: v_list(:)\n+       integer, intent(out) :: iostat\n+       character(*), intent(inout) :: iomsg\n+       write(unit, '(a,3x,f10.5)', iostat=iostat, iomsg=iomsg) 'dummy', this%x\n+    end subroutine write_formatted\n+\n+end module causes_ice\n+\n+module use_t\n+    use causes_ice\n+    implicit none\n+\n+    public :: automatic_alloc\n+\n+    contains\n+\n+    subroutine automatic_alloc(n)\n+        integer, intent(in) :: n\n+\n+        ! Automatic array: ICE!\n+        type(t) :: automatic(n)\n+\n+        ! Allocatable: works\n+        type(t), allocatable :: alloc(:)\n+        allocate(alloc(n))\n+        \n+        automatic%x = 42.34675_8\n+\n+        ! Do anything\n+        print *, 'n=',n,automatic%x\n+        print *, 'n=',n,automatic\n+\n+    end subroutine automatic_alloc\n+\n+end module use_t\n+\n+program test\n+    use use_t\n+    call automatic_alloc(1)\n+end program test"}]}