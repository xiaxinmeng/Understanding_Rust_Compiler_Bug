{"sha": "fdd2fb172940c5fc60e1d8195b30f7ebc0e754d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmRkMmZiMTcyOTQwYzVmYzYwZTFkODE5NWIzMGY3ZWJjMGU3NTRkMA==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2020-11-22T17:53:14Z"}, "committer": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2020-11-22T17:57:20Z"}, "message": "Partially revert recent H8 patch for conditional branches\n\nSo I'd forgotten an important tidbit on the H8 port.  Specifically\nfor a branch instruction, the target label must be operand 0 for\nthe length computations.\n\nThis really only affects the main conditional branch pattern.\nThe other conditional branch patterns are split and ultimately\nfunnel into the main pattern.  This patch fixes the issue by\npartially reverting an earlier change.  This issue didn't show up\nuntil late in the optimization work on cc0 removal of the H8 port,\nbut was caught by the testsuite.  So there's no new test.\n\nBuilt and regression tested H8 with this change, with and without\nthe cc0 removal patches.\n\ngcc/\n\n\t* config/h8300/jumpcall.md (branch_true, branch_false): Revert\n\trecent change.  Ensure operand[0] is always the target label.", "tree": {"sha": "0a45b817efbcee6bf6b7d72eb1e0095301535854", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a45b817efbcee6bf6b7d72eb1e0095301535854"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fdd2fb172940c5fc60e1d8195b30f7ebc0e754d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdd2fb172940c5fc60e1d8195b30f7ebc0e754d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdd2fb172940c5fc60e1d8195b30f7ebc0e754d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdd2fb172940c5fc60e1d8195b30f7ebc0e754d0/comments", "author": null, "committer": null, "parents": [{"sha": "3c52cd517a34b6b37eb17d4defd63bb31e60888b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c52cd517a34b6b37eb17d4defd63bb31e60888b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c52cd517a34b6b37eb17d4defd63bb31e60888b"}], "stats": {"total": 66, "additions": 41, "deletions": 25}, "files": [{"sha": "650b5e6fb705109a58bdd7b48ed81ef3e80b9a8d", "filename": "gcc/config/h8300/jumpcall.md", "status": "modified", "additions": 41, "deletions": 25, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdd2fb172940c5fc60e1d8195b30f7ebc0e754d0/gcc%2Fconfig%2Fh8300%2Fjumpcall.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdd2fb172940c5fc60e1d8195b30f7ebc0e754d0/gcc%2Fconfig%2Fh8300%2Fjumpcall.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fjumpcall.md?ref=fdd2fb172940c5fc60e1d8195b30f7ebc0e754d0", "patch": "@@ -37,44 +37,60 @@\n     DONE;\n   })\n \n-(define_insn \"branch\"\n+(define_insn \"branch_true\"\n   [(set (pc)\n-\t(if_then_else (match_operator 2 \"comparison_operator\"\n+\t(if_then_else (match_operator 1 \"comparison_operator\"\n \t\t       [(cc0) (const_int 0)])\n-\t\t      (match_operand 0 \"pc_or_label_operand\" \"\")\n-\t\t      (match_operand 1 \"pc_or_label_operand\" \"\")))]\n-  \"operands[0] == pc_rtx || operands[1] == pc_rtx\"\n+\t\t      (label_ref (match_operand 0 \"\" \"\"))\n+\t\t      (pc)))]\n+  \"\"\n {\n   if ((cc_status.flags & CC_OVERFLOW_UNUSABLE) != 0\n-      && (GET_CODE (operands[2]) == GT\n-\t  || GET_CODE (operands[2]) == GE\n-\t  || GET_CODE (operands[2]) == LE\n-\t  || GET_CODE (operands[2]) == LT))\n+      && (GET_CODE (operands[1]) == GT\n+\t  || GET_CODE (operands[1]) == GE\n+\t  || GET_CODE (operands[1]) == LE\n+\t  || GET_CODE (operands[1]) == LT))\n     {\n       cc_status.flags &= ~CC_OVERFLOW_UNUSABLE;\n       return 0;\n     }\n \n-  if (operands[0] != pc_rtx)\n-    {\n-      if (get_attr_length (insn) == 2)\n-\treturn \"b%j2\t%l0\";\n-      else if (get_attr_length (insn) == 4)\n-\treturn \"b%j2\t%l0:16\";\n-      else\n-\treturn \"b%k2\t.Lh8BR%=\\;jmp\t@%l0\\\\n.Lh8BR%=:\";\n-    }\n+  if (get_attr_length (insn) == 2)\n+    return \"b%j1\t%l0\";\n+  else if (get_attr_length (insn) == 4)\n+    return \"b%j1\t%l0:16\";\n   else\n+    return \"b%k1\t.Lh8BR%=\\;jmp\t@%l0\\\\n.Lh8BR%=:\";\n+}\n+ [(set_attr \"type\" \"branch\")\n+   (set_attr \"cc\" \"none\")])\n+\n+(define_insn \"branch_false\"\n+  [(set (pc)\n+\t(if_then_else (match_operator 1 \"comparison_operator\"\n+\t\t       [(cc0) (const_int 0)])\n+\t\t      (pc)\n+\t\t      (label_ref (match_operand 0 \"\" \"\"))))]\n+  \"\"\n+{\n+  if ((cc_status.flags & CC_OVERFLOW_UNUSABLE) != 0\n+      && (GET_CODE (operands[1]) == GT\n+\t  || GET_CODE (operands[1]) == GE\n+\t  || GET_CODE (operands[1]) == LE\n+\t  || GET_CODE (operands[1]) == LT))\n     {\n-      if (get_attr_length (insn) == 2)\n-\treturn \"b%k2\t%l1\";\n-      else if (get_attr_length (insn) == 4)\n-\treturn \"b%k2\t%l1:16\";\n-      else\n-\treturn \"b%j2\t.Lh8BR%=\\;jmp\t@%l1\\\\n.Lh8BR%=:\";\n+      cc_status.flags &= ~CC_OVERFLOW_UNUSABLE;\n+      return 0;\n     }\n+\n+  if (get_attr_length (insn) == 2)\n+    return \"b%k1\t%l0\";\n+  else if (get_attr_length (insn) == 4)\n+    return \"b%k1\t%l0:16\";\n+  else\n+    return \"b%j1\t.Lh8BR%=\\;jmp\t@%l0\\\\n.Lh8BR%=:\";\n }\n- [(set_attr \"type\" \"branch\")\n+  [(set_attr \"type\" \"branch\")\n    (set_attr \"cc\" \"none\")])\n \n ;; The brabc/brabs patterns have been disabled because their length computation"}]}