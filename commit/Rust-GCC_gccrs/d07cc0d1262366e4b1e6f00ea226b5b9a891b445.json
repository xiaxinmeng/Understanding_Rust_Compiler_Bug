{"sha": "d07cc0d1262366e4b1e6f00ea226b5b9a891b445", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDA3Y2MwZDEyNjIzNjZlNGIxZTZmMDBlYTIyNmI1YjlhODkxYjQ0NQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-01-18T18:30:27Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-05-06T07:51:28Z"}, "message": "[Ada] Document a few more characteristics of floating-point support\n\ngcc/ada/\n\n\t* doc/gnat_rm/implementation_defined_characteristics.rst (3.5.7):\n\tMention the IEEE standard explicitly.  Use current format names.\n\tDocument assumed rounding mode and new features of I/O support.\n\t* gnat_rm.texi: Regenerate.", "tree": {"sha": "e49ce89cab108bcaa1818ca2f493652d941ecb21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e49ce89cab108bcaa1818ca2f493652d941ecb21"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d07cc0d1262366e4b1e6f00ea226b5b9a891b445", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d07cc0d1262366e4b1e6f00ea226b5b9a891b445", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d07cc0d1262366e4b1e6f00ea226b5b9a891b445", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d07cc0d1262366e4b1e6f00ea226b5b9a891b445/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1bc178bb6c6f5c959c9fb0d929734c08ad5aa1d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bc178bb6c6f5c959c9fb0d929734c08ad5aa1d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1bc178bb6c6f5c959c9fb0d929734c08ad5aa1d5"}], "stats": {"total": 46, "additions": 32, "deletions": 14}, "files": [{"sha": "8d0be38d9aafd3498dbb191917ea7d44d781d8a7", "filename": "gcc/ada/doc/gnat_rm/implementation_defined_characteristics.rst", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d07cc0d1262366e4b1e6f00ea226b5b9a891b445/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_characteristics.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d07cc0d1262366e4b1e6f00ea226b5b9a891b445/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_characteristics.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_characteristics.rst?ref=d07cc0d1262366e4b1e6f00ea226b5b9a891b445", "patch": "@@ -129,20 +129,29 @@ There are no nonstandard real types.\n   \"What combinations of requested decimal precision and range\n   are supported for floating point types.  See 3.5.7(7).\"\n \n-The precision and range is as defined by the IEEE standard.\n+The precision and range are defined by the IEEE Standard for Floating-Point\n+Arithmetic (IEEE 754-2019).\n \n *\n   \"The predefined floating point types declared in\n   ``Standard``.  See 3.5.7(16).\"\n \n-====================== ====================================================\n+====================== ===============================================\n Type                   Representation\n-====================== ====================================================\n-*Short_Float*          32 bit IEEE short\n-*Float*                (Short) 32 bit IEEE short\n-*Long_Float*           64 bit IEEE long\n-*Long_Long_Float*      64 bit IEEE long (80 bit IEEE long on x86 processors)\n-====================== ====================================================\n+====================== ===============================================\n+*Short_Float*          IEEE Binary32 (Single)\n+*Float*                IEEE Binary32 (Single)\n+*Long_Float*           IEEE Binary64 (Double)\n+*Long_Long_Float*      IEEE Binary64 (Double) on non-x86 architectures\n+                       IEEE 80-bit Extended on x86 architecture\n+====================== ===============================================\n+\n+The default rounding mode specified by the IEEE 754 Standard is assumed for\n+static computations, i.e. round to nearest, ties to even. The input routines\n+yield correctly rounded values for Short_Float, Float and Long_Float at least.\n+The output routines can compute up to twice as many exact digits as the value\n+of ``T'Digits`` for any type, for example 30 digits for Long_Float; if more\n+digits are requested, zeros are printed.\n \n *\n   \"The small of an ordinary fixed point type.  See 3.5.9(8).\""}, {"sha": "569b9812eff89ad0f68dc3a5bf2a1cf3dfe3d79b", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d07cc0d1262366e4b1e6f00ea226b5b9a891b445/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d07cc0d1262366e4b1e6f00ea226b5b9a891b445/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=d07cc0d1262366e4b1e6f00ea226b5b9a891b445", "patch": "@@ -15667,7 +15667,8 @@ There are no nonstandard real types.\n are supported for floating point types.  See 3.5.7(7).\"\n @end itemize\n \n-The precision and range is as defined by the IEEE standard.\n+The precision and range are defined by the IEEE Standard for Floating-Point\n+Arithmetic (IEEE 754-2019).\n \n \n @itemize *\n@@ -15678,7 +15679,7 @@ The precision and range is as defined by the IEEE standard.\n @end itemize\n \n \n-@multitable {xxxxxxxxxxxxxxxxxxxxxxxx} {xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx} \n+@multitable {xxxxxxxxxxxxxxxxxxxxxxxx} {xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx} \n @headitem\n \n Type\n@@ -15693,35 +15694,43 @@ Representation\n \n @tab\n \n-32 bit IEEE short\n+IEEE Binary32 (Single)\n \n @item\n \n @emph{Float}\n \n @tab\n \n-(Short) 32 bit IEEE short\n+IEEE Binary32 (Single)\n \n @item\n \n @emph{Long_Float}\n \n @tab\n \n-64 bit IEEE long\n+IEEE Binary64 (Double)\n \n @item\n \n @emph{Long_Long_Float}\n \n @tab\n \n-64 bit IEEE long (80 bit IEEE long on x86 processors)\n+IEEE Binary64 (Double) on non-x86 architectures\n+IEEE 80-bit Extended on x86 architecture\n \n @end multitable\n \n \n+The default rounding mode specified by the IEEE 754 Standard is assumed for\n+static computations, i.e. round to nearest, ties to even. The input routines\n+yield correctly rounded values for Short_Float, Float and Long_Float at least.\n+The output routines can compute up to twice as many exact digits as the value\n+of @code{T'Digits} for any type, for example 30 digits for Long_Float; if more\n+digits are requested, zeros are printed.\n+\n \n @itemize *\n "}]}