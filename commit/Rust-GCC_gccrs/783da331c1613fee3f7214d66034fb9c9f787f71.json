{"sha": "783da331c1613fee3f7214d66034fb9c9f787f71", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzgzZGEzMzFjMTYxM2ZlZTNmNzIxNGQ2NjAzNGZiOWM5Zjc4N2Y3MQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-06-13T10:31:26Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-06-13T10:31:26Z"}, "message": "[multiple changes]\n\n2014-06-13  Yannick Moy  <moy@adacore.com>\n\n\t* exp_attr.adb Typo in comment.\n\t* gnat1drv.adb (Adjust_Global_Switches): Force float overflow\n\tchecking in GNATprove_Mode.\n\n2014-06-13  Ed Schonberg  <schonberg@adacore.com>\n\n\t* a-coinho-shared.adb, a-coinho-shared.ads: Update shared version.\n\nFrom-SVN: r211629", "tree": {"sha": "d2023029b43e34e2cc1d9b3e1d9c045ced2a0ed7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d2023029b43e34e2cc1d9b3e1d9c045ced2a0ed7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/783da331c1613fee3f7214d66034fb9c9f787f71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/783da331c1613fee3f7214d66034fb9c9f787f71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/783da331c1613fee3f7214d66034fb9c9f787f71", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/783da331c1613fee3f7214d66034fb9c9f787f71/comments", "author": null, "committer": null, "parents": [{"sha": "129bbe4330667aca34b1f15cb6db9e7615143acb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/129bbe4330667aca34b1f15cb6db9e7615143acb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/129bbe4330667aca34b1f15cb6db9e7615143acb"}], "stats": {"total": 170, "additions": 162, "deletions": 8}, "files": [{"sha": "4a898e6238d4a69ce3974c3b588e50978d4852c2", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/783da331c1613fee3f7214d66034fb9c9f787f71/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/783da331c1613fee3f7214d66034fb9c9f787f71/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=783da331c1613fee3f7214d66034fb9c9f787f71", "patch": "@@ -1,3 +1,13 @@\n+2014-06-13  Yannick Moy  <moy@adacore.com>\n+\n+\t* exp_attr.adb Typo in comment.\n+\t* gnat1drv.adb (Adjust_Global_Switches): Force float overflow\n+\tchecking in GNATprove_Mode.\n+\n+2014-06-13  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* a-coinho-shared.adb, a-coinho-shared.ads: Update shared version.\n+\n 2014-06-13  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_ch3.adb, sem_ch9.adb, a-coinho.adb, a-coinho.ads: Minor"}, {"sha": "222c2f14205093012a4d5b6f8a9a67be57c19d88", "filename": "gcc/ada/a-coinho-shared.adb", "status": "modified", "additions": 78, "deletions": 4, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/783da331c1613fee3f7214d66034fb9c9f787f71/gcc%2Fada%2Fa-coinho-shared.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/783da331c1613fee3f7214d66034fb9c9f787f71/gcc%2Fada%2Fa-coinho-shared.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-coinho-shared.adb?ref=783da331c1613fee3f7214d66034fb9c9f787f71", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---             Copyright (C) 2013, Free Software Foundation, Inc.           --\n+--          Copyright (C) 2013-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -62,6 +62,13 @@ package body Ada.Containers.Indefinite_Holders is\n       Container.Busy := 0;\n    end Adjust;\n \n+   overriding procedure Adjust (Control : in out Reference_Control_Type) is\n+   begin\n+      if Control.Container /= null then\n+         Reference (Control.Container);\n+      end if;\n+   end Adjust;\n+\n    ------------\n    -- Assign --\n    ------------\n@@ -99,18 +106,33 @@ package body Ada.Containers.Indefinite_Holders is\n       Container.Reference := null;\n    end Clear;\n \n+   ------------------------\n+   -- Constant_Reference --\n+   ------------------------\n+\n+   function Constant_Reference\n+     (Container : aliased Holder) return Constant_Reference_Type\n+   is\n+      Ref : constant Constant_Reference_Type :=\n+              (Element => Container.Reference.Element,\n+               Control => (Controlled with Container.Reference));\n+   begin\n+      Reference (Ref.Control.Container);\n+      return Ref;\n+   end Constant_Reference;\n+\n    ----------\n    -- Copy --\n    ----------\n \n    function Copy (Source : Holder) return Holder is\n    begin\n       if Source.Reference = null then\n-         return (AF.Controlled with null, 0);\n+         return (Controlled with null, 0);\n       else\n          Reference (Source.Reference);\n \n-         return (AF.Controlled with Source.Reference, 0);\n+         return (Controlled with Source.Reference, 0);\n       end if;\n    end Copy;\n \n@@ -143,6 +165,15 @@ package body Ada.Containers.Indefinite_Holders is\n       end if;\n    end Finalize;\n \n+   overriding procedure Finalize (Control : in out Reference_Control_Type) is\n+   begin\n+      if Control.Container /= null then\n+         Unreference (Control.Container);\n+      end if;\n+\n+      Control.Container := null;\n+   end Finalize;\n+\n    --------------\n    -- Is_Empty --\n    --------------\n@@ -223,6 +254,22 @@ package body Ada.Containers.Indefinite_Holders is\n       end if;\n    end Read;\n \n+   procedure Read\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Constant_Reference_Type)\n+   is\n+   begin\n+      raise Program_Error with \"attempt to stream reference\";\n+   end Read;\n+\n+   procedure Read\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Reference_Type)\n+   is\n+   begin\n+      raise Program_Error with \"attempt to stream reference\";\n+   end Read;\n+\n    ---------------\n    -- Reference --\n    ---------------\n@@ -232,6 +279,17 @@ package body Ada.Containers.Indefinite_Holders is\n       System.Atomic_Counters.Increment (Item.Counter);\n    end Reference;\n \n+   function Reference\n+     (Container : aliased in out Holder) return Reference_Type\n+   is\n+      Ref : constant Reference_Type :=\n+              (Element => Container.Reference.Element,\n+               Control => (Controlled with Container.Reference));\n+   begin\n+      Reference (Ref.Control.Container);\n+      return Ref;\n+   end Reference;\n+\n    ---------------------\n    -- Replace_Element --\n    ---------------------\n@@ -287,7 +345,7 @@ package body Ada.Containers.Indefinite_Holders is\n \n    begin\n       return\n-        (AF.Controlled with\n+        (Controlled with\n             new Shared_Holder'\n               (Counter => <>,\n                Element => new Element_Type'(New_Item)), 0);\n@@ -355,4 +413,20 @@ package body Ada.Containers.Indefinite_Holders is\n       end if;\n    end Write;\n \n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Reference_Type)\n+   is\n+   begin\n+      raise Program_Error with \"attempt to stream reference\";\n+   end Write;\n+\n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Constant_Reference_Type)\n+   is\n+   begin\n+      raise Program_Error with \"attempt to stream reference\";\n+   end Write;\n+\n end Ada.Containers.Indefinite_Holders;"}, {"sha": "e97a64af655409281a14aa8b507690a79c7b9a22", "filename": "gcc/ada/a-coinho-shared.ads", "status": "modified", "additions": 67, "deletions": 3, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/783da331c1613fee3f7214d66034fb9c9f787f71/gcc%2Fada%2Fa-coinho-shared.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/783da331c1613fee3f7214d66034fb9c9f787f71/gcc%2Fada%2Fa-coinho-shared.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-coinho-shared.ads?ref=783da331c1613fee3f7214d66034fb9c9f787f71", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---             Copyright (C) 2013, Free Software Foundation, Inc.           --\n+--          Copyright (C) 2013-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -67,6 +67,24 @@ package Ada.Containers.Indefinite_Holders is\n      (Container : Holder;\n       Process   : not null access procedure (Element : in out Element_Type));\n \n+   type Constant_Reference_Type\n+      (Element : not null access constant Element_Type) is private\n+   with\n+      Implicit_Dereference => Element;\n+\n+   type Reference_Type\n+     (Element : not null access Element_Type) is private\n+   with\n+      Implicit_Dereference => Element;\n+\n+   function Constant_Reference\n+     (Container : aliased Holder) return Constant_Reference_Type;\n+   pragma Inline (Constant_Reference);\n+\n+   function Reference\n+     (Container : aliased in out Holder) return Reference_Type;\n+   pragma Inline (Reference);\n+\n    procedure Assign (Target : in out Holder; Source : Holder);\n \n    function Copy (Source : Holder) return Holder;\n@@ -75,7 +93,8 @@ package Ada.Containers.Indefinite_Holders is\n \n private\n \n-   package AF renames Ada.Finalization;\n+   use Ada.Finalization;\n+   use Ada.Streams;\n \n    type Element_Access is access all Element_Type;\n \n@@ -110,6 +129,51 @@ private\n    overriding procedure Adjust (Container : in out Holder);\n    overriding procedure Finalize (Container : in out Holder);\n \n-   Empty_Holder : constant Holder := (AF.Controlled with null, 0);\n+   type Reference_Control_Type is new Controlled with\n+   record\n+      Container : Shared_Holder_Access;\n+   end record;\n+\n+   overriding procedure Adjust (Control : in out Reference_Control_Type);\n+   pragma Inline (Adjust);\n+\n+   overriding procedure Finalize (Control : in out Reference_Control_Type);\n+   pragma Inline (Finalize);\n+\n+   type Constant_Reference_Type\n+      (Element : not null access constant Element_Type) is\n+   record\n+      Control : Reference_Control_Type;\n+   end record;\n+\n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Constant_Reference_Type);\n+\n+   for Constant_Reference_Type'Write use Write;\n+\n+   procedure Read\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Constant_Reference_Type);\n+\n+   for Constant_Reference_Type'Read use Read;\n+\n+   type Reference_Type (Element : not null access Element_Type) is record\n+      Control : Reference_Control_Type;\n+   end record;\n+\n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Reference_Type);\n+\n+   for Reference_Type'Write use Write;\n+\n+   procedure Read\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Reference_Type);\n+\n+   for Reference_Type'Read use Read;\n+\n+   Empty_Holder : constant Holder := (Controlled with null, 0);\n \n end Ada.Containers.Indefinite_Holders;"}, {"sha": "80e2bf447086ac374eae97dc38e6a6630e5ddc4c", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/783da331c1613fee3f7214d66034fb9c9f787f71/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/783da331c1613fee3f7214d66034fb9c9f787f71/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=783da331c1613fee3f7214d66034fb9c9f787f71", "patch": "@@ -4441,7 +4441,7 @@ package body Exp_Attr is\n \n       --  1. Deal with enumeration types with holes\n       --  2. For floating-point, generate call to attribute function and deal\n-      --       with range checking if Check_Float_Overflow modde.\n+      --       with range checking if Check_Float_Overflow mode is set.\n       --  3. For other cases, deal with constraint checking\n \n       when Attribute_Pred => Pred :"}, {"sha": "756961e3d2da83347d1cae7c6b9c382844321e24", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/783da331c1613fee3f7214d66034fb9c9f787f71/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/783da331c1613fee3f7214d66034fb9c9f787f71/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=783da331c1613fee3f7214d66034fb9c9f787f71", "patch": "@@ -364,6 +364,12 @@ procedure Gnat1drv is\n \n          Dynamic_Elaboration_Checks := False;\n \n+         --  Detect overflow on unconstrained floating-point types, such as\n+         --  the predefined types Float, Long_Float and Long_Long_Float from\n+         --  package Standard.\n+\n+         Check_Float_Overflow := True;\n+\n          --  Set STRICT mode for overflow checks if not set explicitly. This\n          --  prevents suppressing of overflow checks by default, in code down\n          --  below."}]}