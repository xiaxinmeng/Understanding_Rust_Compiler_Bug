{"sha": "46621807e9bf7bc94302cda27852e33a3c766112", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDY2MjE4MDdlOWJmN2JjOTQzMDJjZGEyNzg1MmUzM2EzYzc2NjExMg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2015-01-08T20:58:39Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2015-01-08T20:58:39Z"}, "message": "init.c (build_vec_init): Call ubsan_instrument_bounds to check whether an initializer-list is too big...\n\n\t* init.c (build_vec_init): Call ubsan_instrument_bounds to check\n\twhether an initializer-list is too big for a VLA.\n\t(throw_bad_array_length): Remove.\n\t* cp-tree.h: Remove prototype.\n\nFrom-SVN: r219359", "tree": {"sha": "a45b718f1a16735546118a03e2e94c044731098a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a45b718f1a16735546118a03e2e94c044731098a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46621807e9bf7bc94302cda27852e33a3c766112", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46621807e9bf7bc94302cda27852e33a3c766112", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46621807e9bf7bc94302cda27852e33a3c766112", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46621807e9bf7bc94302cda27852e33a3c766112/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d9ebff44bb8217b3982c987072ab5a76c6de74e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9ebff44bb8217b3982c987072ab5a76c6de74e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9ebff44bb8217b3982c987072ab5a76c6de74e9"}], "stats": {"total": 83, "additions": 49, "deletions": 34}, "files": [{"sha": "46d795705d9c553eb9b4a05d0ca547282bb9e542", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46621807e9bf7bc94302cda27852e33a3c766112/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46621807e9bf7bc94302cda27852e33a3c766112/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=46621807e9bf7bc94302cda27852e33a3c766112", "patch": "@@ -1,3 +1,10 @@\n+2015-01-08  Jason Merrill  <jason@redhat.com>\n+\n+\t* init.c (build_vec_init): Call ubsan_instrument_bounds to check\n+\twhether an initializer-list is too big for a VLA.\n+\t(throw_bad_array_length): Remove.\n+\t* cp-tree.h: Remove prototype.\n+\n 2015-01-08  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/60753"}, {"sha": "77f2b5b918ca2b252924764ee5fd2f6beafdaa39", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46621807e9bf7bc94302cda27852e33a3c766112/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46621807e9bf7bc94302cda27852e33a3c766112/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=46621807e9bf7bc94302cda27852e33a3c766112", "patch": "@@ -5574,7 +5574,6 @@ extern tree get_nsdmi\t\t\t\t(tree, bool);\n extern tree build_offset_ref\t\t\t(tree, tree, bool,\n \t\t\t\t\t\t tsubst_flags_t);\n extern tree throw_bad_array_new_length\t\t(void);\n-extern tree throw_bad_array_length\t\t(void);\n extern tree build_new\t\t\t\t(vec<tree, va_gc> **, tree, tree,\n \t\t\t\t\t\t vec<tree, va_gc> **, int,\n                                                  tsubst_flags_t);"}, {"sha": "6f324926aefaf6d2f6d432c7e87a73694bbdd2c3", "filename": "gcc/cp/init.c", "status": "modified", "additions": 28, "deletions": 30, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46621807e9bf7bc94302cda27852e33a3c766112/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46621807e9bf7bc94302cda27852e33a3c766112/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=46621807e9bf7bc94302cda27852e33a3c766112", "patch": "@@ -32,6 +32,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"target.h\"\n #include \"gimplify.h\"\n #include \"wide-int.h\"\n+#include \"c-family/c-ubsan.h\"\n \n static bool begin_init_stmts (tree *, tree *);\n static tree finish_init_stmts (bool, tree, tree);\n@@ -2241,20 +2242,6 @@ throw_bad_array_new_length (void)\n   return build_cxx_call (fn, 0, NULL, tf_warning_or_error);\n }\n \n-/* Call __cxa_bad_array_length to indicate that there were too many\n-   initializers.  */\n-\n-tree\n-throw_bad_array_length (void)\n-{\n-  tree fn = get_identifier (\"__cxa_throw_bad_array_length\");\n-  if (!get_global_value_if_present (fn, &fn))\n-    fn = push_throw_library_fn (fn, build_function_type_list (void_type_node,\n-\t\t\t\t\t\t\t      NULL_TREE));\n-\n-  return build_cxx_call (fn, 0, NULL, tf_warning_or_error);\n-}\n-\n /* Generate code for a new-expression, including calling the \"operator\n    new\" function, initializing the object, and, if an exception occurs\n    during construction, cleaning up.  The arguments are as for\n@@ -3419,7 +3406,6 @@ build_vec_init (tree base, tree maxindex, tree init,\n   tree obase = base;\n   bool xvalue = false;\n   bool errors = false;\n-  tree length_check = NULL_TREE;\n \n   if (TREE_CODE (atype) == ARRAY_TYPE && TYPE_DOMAIN (atype))\n     maxindex = array_type_nelts (atype);\n@@ -3440,12 +3426,9 @@ build_vec_init (tree base, tree maxindex, tree init,\n \n   /* If we have a braced-init-list, make sure that the array\n      is big enough for all the initializers.  */\n-  if (init && TREE_CODE (init) == CONSTRUCTOR\n-      && CONSTRUCTOR_NELTS (init) > 0\n-      && !TREE_CONSTANT (maxindex)\n-      && flag_exceptions)\n-    length_check = fold_build2 (LT_EXPR, boolean_type_node, maxindex,\n-\t\t\t\tsize_int (CONSTRUCTOR_NELTS (init) - 1));\n+  bool length_check = (init && TREE_CODE (init) == CONSTRUCTOR\n+\t\t       && CONSTRUCTOR_NELTS (init) > 0\n+\t\t       && !TREE_CONSTANT (maxindex));\n \n   if (init\n       && TREE_CODE (atype) == ARRAY_TYPE\n@@ -3468,10 +3451,6 @@ build_vec_init (tree base, tree maxindex, tree init,\n       if (BRACE_ENCLOSED_INITIALIZER_P (init))\n \tinit = digest_init (atype, init, complain);\n       stmt_expr = build2 (INIT_EXPR, atype, base, init);\n-      if (length_check)\n-\tstmt_expr = build3 (COND_EXPR, atype, length_check,\n-\t\t\t    throw_bad_array_length (),\n-\t\t\t    stmt_expr);\n       return stmt_expr;\n     }\n \n@@ -3582,11 +3561,30 @@ build_vec_init (tree base, tree maxindex, tree init,\n \n       if (length_check)\n \t{\n-\t  tree throw_call;\n-\t  throw_call = throw_bad_array_new_length ();\n-\t  length_check = build3 (COND_EXPR, void_type_node, length_check,\n-\t\t\t\t throw_call, void_node);\n-\t  finish_expr_stmt (length_check);\n+\t  tree nelts = size_int (CONSTRUCTOR_NELTS (init) - 1);\n+\t  if (TREE_CODE (atype) != ARRAY_TYPE)\n+\t    {\n+\t      if (flag_exceptions)\n+\t\t{\n+\t\t  tree c = fold_build2 (LT_EXPR, boolean_type_node, iterator,\n+\t\t\t\t\tnelts);\n+\t\t  c = build3 (COND_EXPR, void_type_node, c,\n+\t\t\t      throw_bad_array_new_length (), void_node);\n+\t\t  finish_expr_stmt (c);\n+\t\t}\n+\t      /* Don't check an array new when -fno-exceptions.  */\n+\t    }\n+\t  else if (flag_sanitize & SANITIZE_BOUNDS\n+\t\t   && current_function_decl\n+\t\t   && !lookup_attribute (\"no_sanitize_undefined\",\n+\t\t\t\t\t DECL_ATTRIBUTES\n+\t\t\t\t\t (current_function_decl)))\n+\t    {\n+\t      /* Make sure the last element of the initializer is in bounds. */\n+\t      finish_expr_stmt\n+\t\t(ubsan_instrument_bounds\n+\t\t (input_location, obase, &nelts, /*ignore_off_by_one*/false));\n+\t    }\n \t}\n \n       if (try_const)"}, {"sha": "2d06396b2418bcee90745595df81fb731f740c42", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46621807e9bf7bc94302cda27852e33a3c766112/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46621807e9bf7bc94302cda27852e33a3c766112/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=46621807e9bf7bc94302cda27852e33a3c766112", "patch": "@@ -5629,9 +5629,7 @@ call into a diagnostics message call instead.  When reaching the\n @item -fsanitize=vla-bound\n @opindex fsanitize=vla-bound\n This option instructs the compiler to check that the size of a variable\n-length array is positive.  This option does not have any effect in\n-@option{-std=c++14} mode, as the standard requires the exception be thrown\n-instead.\n+length array is positive.\n \n @item -fsanitize=null\n @opindex fsanitize=null"}, {"sha": "e7f24945f7ae1ccdec2abe7209596b3d9e2cb4b0", "filename": "gcc/testsuite/g++.dg/ubsan/vla-1.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46621807e9bf7bc94302cda27852e33a3c766112/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fvla-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46621807e9bf7bc94302cda27852e33a3c766112/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fvla-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fvla-1.C?ref=46621807e9bf7bc94302cda27852e33a3c766112", "patch": "@@ -0,0 +1,13 @@\n+// { dg-do run }\n+// { dg-options \"-Wno-vla -fsanitize=undefined\" }\n+// { dg-shouldfail \"ubsan\" }\n+// { dg-output \"index 1 out of bounds\" }\n+\n+void f(int i) {\n+  int ar[i] = { 42, 24 };\n+}\n+\n+int main()\n+{\n+  f(1);\n+}"}]}