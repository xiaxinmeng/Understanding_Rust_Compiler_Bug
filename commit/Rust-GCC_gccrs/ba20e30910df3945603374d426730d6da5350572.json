{"sha": "ba20e30910df3945603374d426730d6da5350572", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmEyMGUzMDkxMGRmMzk0NTYwMzM3NGQ0MjY3MzBkNmRhNTM1MDU3Mg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2009-03-29T20:49:01Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2009-03-29T20:49:01Z"}, "message": "ChangeLog: Fix whitespace.\n\n\t* gcc/ChangeLog: Fix whitespace.\n\t* gcc/testsuite/ChangeLog: Ditto.\n\nFrom-SVN: r145262", "tree": {"sha": "e3b5bf59c98d2fb04f1138fe7535faad48476088", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3b5bf59c98d2fb04f1138fe7535faad48476088"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba20e30910df3945603374d426730d6da5350572", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba20e30910df3945603374d426730d6da5350572", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba20e30910df3945603374d426730d6da5350572", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba20e30910df3945603374d426730d6da5350572/comments", "author": null, "committer": null, "parents": [{"sha": "6bb6267173b422eb05776c3212925e57aab008e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bb6267173b422eb05776c3212925e57aab008e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bb6267173b422eb05776c3212925e57aab008e5"}], "stats": {"total": 107, "additions": 51, "deletions": 56}, "files": [{"sha": "37bab5e95d9fd91b77ec7b4ed9bf0096950f5642", "filename": "gcc/ChangeLog", "status": "modified", "additions": 49, "deletions": 54, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba20e30910df3945603374d426730d6da5350572/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba20e30910df3945603374d426730d6da5350572/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ba20e30910df3945603374d426730d6da5350572", "patch": "@@ -1,40 +1,40 @@\n 2009-03-28  Paolo Bonzini  <bonzini@gnu.org>\n \n-        * c-common.c (c_expand_expr, c_staticp): Remove.\n-        * c-common.def (COMPOUND_LITERAL_EXPR): Delete.\n-        * c-common.h (emit_local_var, c_staticp, COMPOUND_LITERAL_EXPR_DECL,\n-        COMPOUND_LITERAL_EXPR_DECL_EXPR): Remove.\n-        * c-gimplify.c (gimplify_compound_literal_expr,\n-        optimize_compound_literals_in_ctor): Remove.\n-        (c_gimplify_expr): Remove COMPOUND_LITERAL_EXPR handling.\n-        * c-objc-common.h (LANG_HOOKS_STATICP): Remove.\n-        * c-semantics.c (emit_local_var): Remove.\n-\n-        * langhooks-def.h (lhd_expand_expr): Remove.\n-        * langhooks.c (lhd_expand_expr): Remove.\n-        * langhooks.h (LANG_HOOKS_DEF): Remove LANG_HOOKS_EXPAND_EXPR.\n-\n-        * expr.c (expand_expr_real_1): Move COMPOUND_LITERAL_EXPR\n-        handling from c-semantics.c; don't call into langhook.\n-        (expand_expr_addr_expr_1): Check that we don't get non-GENERIC trees.\n-        * gimplify.c (gimplify_compound_literal_expr,\n-        optimize_compound_literals_in_ctor): Move from c-gimplify.c.\n-        (gimplify_init_constructor): Call optimize_compound_literals_in_ctor.\n-        (gimplify_modify_expr_rhs, gimplify_expr): Handle COMPOUND_LITERAL_EXPR\n-        as was done in c-gimplify.c.\n-        * tree.c (staticp): Move COMPOUND_LITERAL_EXPR handling from c_staticp.\n-        * tree.h (COMPOUND_LITERAL_EXPR_DECL, COMPOUND_LITERAL_EXPR_DECL_EXPR):\n-        Move from c-common.h.\n-        * tree.def (COMPOUND_LITERAL_EXPR): Move from c-common.def.\n+\t* c-common.c (c_expand_expr, c_staticp): Remove.\n+\t* c-common.def (COMPOUND_LITERAL_EXPR): Delete.\n+\t* c-common.h (emit_local_var, c_staticp, COMPOUND_LITERAL_EXPR_DECL,\n+\tCOMPOUND_LITERAL_EXPR_DECL_EXPR): Remove.\n+\t* c-gimplify.c (gimplify_compound_literal_expr,\n+\toptimize_compound_literals_in_ctor): Remove.\n+\t(c_gimplify_expr): Remove COMPOUND_LITERAL_EXPR handling.\n+\t* c-objc-common.h (LANG_HOOKS_STATICP): Remove.\n+\t* c-semantics.c (emit_local_var): Remove.\n+\n+\t* langhooks-def.h (lhd_expand_expr): Remove.\n+\t* langhooks.c (lhd_expand_expr): Remove.\n+\t* langhooks.h (LANG_HOOKS_DEF): Remove LANG_HOOKS_EXPAND_EXPR.\n+\n+\t* expr.c (expand_expr_real_1): Move COMPOUND_LITERAL_EXPR\n+\thandling from c-semantics.c; don't call into langhook.\n+\t(expand_expr_addr_expr_1): Check that we don't get non-GENERIC trees.\n+\t* gimplify.c (gimplify_compound_literal_expr,\n+\toptimize_compound_literals_in_ctor): Move from c-gimplify.c.\n+\t(gimplify_init_constructor): Call optimize_compound_literals_in_ctor.\n+\t(gimplify_modify_expr_rhs, gimplify_expr): Handle COMPOUND_LITERAL_EXPR\n+\tas was done in c-gimplify.c.\n+\t* tree.c (staticp): Move COMPOUND_LITERAL_EXPR handling from c_staticp.\n+\t* tree.h (COMPOUND_LITERAL_EXPR_DECL, COMPOUND_LITERAL_EXPR_DECL_EXPR):\n+\tMove from c-common.h.\n+\t* tree.def (COMPOUND_LITERAL_EXPR): Move from c-common.def.\n \n \t* tree.c (staticp): Do not call langhook.\n \t* langhooks.c (lhd_staticp): Delete.\n \t* langhooks-def.h (lhd_staticp): Delete prototype.\n \t(LANG_HOOKS_STATICP): Delete.\n \t(LANG_HOOKS_INITIALIZER): Delete LANG_HOOKS_STATICP.\n \n-        * doc/c-tree.texi (Expression nodes): Refer to DECL_EXPRs\n-        instead of DECL_STMTs.\n+\t* doc/c-tree.texi (Expression nodes): Refer to DECL_EXPRs\n+\tinstead of DECL_STMTs.\n \n 2009-03-29  Joseph Myers  <joseph@codesourcery.com>\n \n@@ -48,12 +48,11 @@\n \tvoid_type_node.\n \t(fold_call_expr): Return a NOP_EXPR from folding rather than the\n \tcontained expression.\n-\t* c-common.c (c_fully_fold, c_fully_fold_internal, c_save_expr):\n-\tNew.\n+\t* c-common.c (c_fully_fold, c_fully_fold_internal, c_save_expr): New.\n \t(c_common_truthvalue_conversion): Use c_save_expr.  Do not fold\n \tconditional expressions for C.\n \t(decl_constant_value_for_optimization): Move from\n-\tdecl_constant_value_for_broken_optimization in c-typeck.c.  Check\n+ \tdecl_constant_value_for_broken_optimization in c-typeck.c.  Check\n \twhether optimizing and that the expression is a VAR_DECL not of\n \tarray type instead of doing such checks in the caller.  Do not\n \tcheck pedantic.  Call gcc_unreachable for C++.\n@@ -194,8 +193,7 @@\n \t(c_start_case): Fold switch expression.\n \t(c_process_expr_stmt): Fold expression.\n \t(c_finish_stmt_expr): Create C_MAYBE_CONST_EXPR as needed to\n-\tensure statement expression is not evaluated in constant\n-\texpression.\n+\tensure statement expression is not evaluated in constant expression.\n \t(build_binary_op): Track whether results are integer constant\n \texpressions or may occur in such, disable folding and wrap results\n \tas applicable.  Fold operands for -Wsign-compare warnings unless\n@@ -254,8 +252,7 @@\n \t(remove_eh_region, remove_unreachable_regions, label_to_region_map,\n \tnum_eh_regions): Declare.\n \t* passes.c (init_optimization_passes): Schedule cleanup_eh.\n-\t* Makefile.in (EXCEPT_H): New; replace all uses of except.h\n-\tby it.\n+\t* Makefile.in (EXCEPT_H): New; replace all uses of except.h by it.\n \t* tree-eh.c (tree_remove_unreachable_handlers): New function.\n \t(tree_empty_eh_handler_p): New function.\n \t(cleanup_empty_eh): New function.\n@@ -339,6 +336,7 @@\n \tMerge from pretty-ipa:\n \n \t2009-03-27  Jan Hubicka  <jh@suse.cz>\n+\n \t* cgraph.c (dump_cgraph_node): Add replace output flag by process.\n \t* tree-pass.h (function_called_by_processed_nodes_p): Declare.\n \t* passes.c (function_called_by_processed_nodes_p): New.\n@@ -371,6 +369,7 @@\n \t* tree-flow.h (stmt_can_throw_external): New.\n \t* passes.c (init_optimization_passes): Schedule fixup_cfg pass early;\n \tand local pure/const pass in early and late optimization queue.\n+\n 2009-03-28  Martin Jambor  <mjambor@suse.cz>\n \n \t* fold-const.c (get_pointer_modulus_and_residue): New parameter\n@@ -464,6 +463,7 @@\n 2009-03-28  Jan Hubicka  <jh@suse.cz>\n \n \tBring from lto-branch:\n+\n \t2008-09-03  Doug Kwan  <dougkwan@google.com>\n \n \t* cgraphbuild.c (initialize_inline_failed): Use cgraph_inline_failed_t\n@@ -698,8 +698,7 @@\n \t* c-common.c (handle_aligned_attribute): Properly check alignment\n \toverflow.  Use (1U << i) instead of (1 << i).\n \n-\t* emit-rtl.c (get_mem_align_offset): Use \"unsigned int\" for\n-\talign.\n+\t* emit-rtl.c (get_mem_align_offset): Use \"unsigned int\" for align.\n \n \t* expr.h (get_mem_align_offset): Updated.\n \n@@ -731,8 +730,7 @@\n \tPR target/39472\n \t* config/i386/i386.c (ix86_abi): New.\n \t(override_options): Handle -mabi=.\n-\t(ix86_function_arg_regno_p): Replace DEFAULT_ABI with\n-\tix86_abi.\n+\t(ix86_function_arg_regno_p): Replace DEFAULT_ABI with ix86_abi.\n \t(ix86_call_abi_override): Likewise.\n \t(init_cumulative_args): Likewise.\n \t(function_arg_advance): Likewise.\n@@ -744,12 +742,10 @@\n \t(setup_incoming_varargs_64): Likewise.\n \t(is_va_list_char_pointer): Likewise.\n \t(ix86_init_machine_status): Likewise.\n-\t(ix86_reg_parm_stack_space): Use enum calling_abi on\n-\tcall_abi.\n+\t(ix86_reg_parm_stack_space): Use enum calling_abi on call_abi.\n \t(ix86_function_type_abi): Return enum calling_abi.  Rewrite\n \tfor 64bit.  Replace DEFAULT_ABI with ix86_abi.\n-\t(ix86_function_abi): Make it static and return enum\n-\tcalling_abi.\n+\t(ix86_function_abi): Make it static and return enum calling_abi.\n \t(ix86_cfun_abi): Return enum calling_abi.  Replace DEFAULT_ABI\n \twith ix86_abi.\n \t(ix86_fn_abi_va_list): Updated.\n@@ -831,7 +827,8 @@\n 2009-03-27  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n \n \tPR c++/36799\n-\t* ginclude/stdarg.h (va_copy): Define also for __GXX_EXPERIMENTAL_CXX0X__.\n+\t* ginclude/stdarg.h (va_copy): Define also for\n+\t__GXX_EXPERIMENTAL_CXX0X__.\n \n 2009-03-27  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n@@ -917,8 +914,7 @@\n \n \t* configure.ac <GAS features, nop mnemonic>: Add pattern\n \tcrisv32-*-* for \"nop\".\n-\t<GAS features, Thread-local storage>: Add item for CRIS and\n-\tCRIS v32.\n+\t<GAS features, Thread-local storage>: Add item for CRIS and CRIS v32.\n \t* configure: Regenerate.\n \n 2009-03-24  Ira Rosen  <irar@il.ibm.com>\n@@ -930,8 +926,7 @@\n \n 2009-03-24  Arthur Loiret  <aloiret@debian.org>\n \n-\t* config.host (alpha*-*-linux*): Use driver-alpha.o and\n-\talpha/x-alpha.\n+\t* config.host (alpha*-*-linux*): Use driver-alpha.o and alpha/x-alpha.\n \t* config/alpha/linux.h (host_detect_local_cpu): Declare, add to\n \tEXTRA_SPEC_FUNCTIONS.\n \t(MCPU_MTUNE_NATIVE_SPECS, DRIVER_SELF_SPECS): New macros.\n@@ -1384,7 +1379,7 @@\n \n 2009-03-06  Jan-Benedict Glaw  <jbglaw@lug-owl.de>\n \n-\t* genpreds.c: (needs_variable): Fix parentheses at variable name\n+\t* genpreds.c (needs_variable): Fix parentheses at variable name\n \tdetection.\n \t(write_tm_constrs_h): Indent generated code.\n \n@@ -1703,7 +1698,7 @@\n \n 2009-02-27  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n \n-\t* gcc/config/s390/s390.c: (s390_swap_cmp): Look for conditional\n+\t* gcc/config/s390/s390.c (s390_swap_cmp): Look for conditional\n \tjumps if COND is NULL.\n \t(find_cond_jump): New function.\n \t(s390_z10_optimize_cmp): Handling for reg-reg compares added.\n@@ -2750,7 +2745,7 @@\n \n \t* global.c: Remove the file.\n \n-\t* opts.c: (decode_options): Remove flag_ira.\n+\t* opts.c (decode_options): Remove flag_ira.\n \n \t* hard-reg-set.h (losing_caller_save_reg_set): Remove.\n \n@@ -3130,7 +3125,7 @@\n 2009-01-22  Dodji Seketeli  <dodji@redhat.com>\n \n \tPR c++/38930\n-\t* c-decl.c: (clone_underlying_type): Revert PR c++/26693 changes.\n+\t* c-decl.c (clone_underlying_type): Revert PR c++/26693 changes.\n \t* c-common.c (set_underlying_type): Likewise.\n \t(is_typedef_decl ): Likewise\n \t* tree.h: Likewise\n@@ -3160,7 +3155,7 @@\n 2009-01-21  Dodji Seketeli  <dodji@redhat.com>\n \n \tPR c++/26693\n-\t* c-decl.c: (clone_underlying_type): Move this ...\n+\t* c-decl.c (clone_underlying_type): Move this ...\n \t* c-common.c (set_underlying_type): ... here.\n \tAlso, make sure the function properly sets TYPE_STUB_DECL() on\n \tthe newly created typedef variant type.\n@@ -3523,7 +3518,7 @@\n \t* config/avr/t-avr (LIB1ASMFUNCS): Add _tablejump_elpm.\n \t* config/avr/libgcc.S (__do_global_ctors, __do_global_dtors): Add\n \tvariant for devices with 3-byte PC.\n-\t(__tablejump_elpm__) : New.\n+\t(__tablejump_elpm__): New.\n \n 2009-01-12  Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "37c447ab5a81d266e7f58cf3713c3c51e7cba102", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba20e30910df3945603374d426730d6da5350572/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba20e30910df3945603374d426730d6da5350572/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ba20e30910df3945603374d426730d6da5350572", "patch": "@@ -135,8 +135,8 @@\n \n 2009-03-28  Paul Thomas  <pault@gcc.gnu.org\n \n-        PR fortran/38538\n-        * gfortran.dg/char_result_13.f90: New test.\n+\tPR fortran/38538\n+\t* gfortran.dg/char_result_13.f90: New test.\n \n 2009-03-28  Paul Thomas  <pault@gcc.gnu.org>\n "}]}