{"sha": "90b160f8ec515f54ddc36519a6aaa60abdabdec1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTBiMTYwZjhlYzUxNWY1NGRkYzM2NTE5YTZhYWE2MGFiZGFiZGVjMQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-05-12T18:56:13Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-05-12T20:25:51Z"}, "message": "c++: Function found via ADL when it should not [PR95074]\n\nI noticed that we don't implement [basic.lookup.argdep]/3: quite correctly;\nit says \"If X (the lookup set produced by unqualified lookup) contains\n-- a block-scope function declaration that is not a using-declaration\n[...]\nthen Y (the lookup set produced by ADL) is empty.\"\nbut we were still performing ADL in fn1 in the attached test.  The\nproblem was that we were only looking at the first function in the\noverload set which in this case happened to be a using-declaration, and\nthose don't suppress ADL.  We have to look through the whole set to find\nout if unqualified lookup found a block-scope function declaration, or\na member function declaration.\n\n\tPR c++/95074\n\t* parser.c (cp_parser_postfix_expression) <case CPP_OPEN_PAREN>: When\n\tlooking for a block-scope function declaration, look through the whole\n\tset, not just the first function in the overload set.\n\n\t* g++.dg/lookup/koenig15.C: New test.", "tree": {"sha": "8b4b63c44002d4b6cd0aee527a86957dda357dd7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b4b63c44002d4b6cd0aee527a86957dda357dd7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/90b160f8ec515f54ddc36519a6aaa60abdabdec1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90b160f8ec515f54ddc36519a6aaa60abdabdec1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90b160f8ec515f54ddc36519a6aaa60abdabdec1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90b160f8ec515f54ddc36519a6aaa60abdabdec1/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac627eb4162d31aa4d009c3c9a8da7dfd6cc34e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac627eb4162d31aa4d009c3c9a8da7dfd6cc34e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac627eb4162d31aa4d009c3c9a8da7dfd6cc34e0"}], "stats": {"total": 83, "additions": 73, "deletions": 10}, "files": [{"sha": "7515827d7aea15bdbe89f429d542d18730f3a04f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90b160f8ec515f54ddc36519a6aaa60abdabdec1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90b160f8ec515f54ddc36519a6aaa60abdabdec1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=90b160f8ec515f54ddc36519a6aaa60abdabdec1", "patch": "@@ -1,3 +1,10 @@\n+2020-05-12  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/95074\n+\t* parser.c (cp_parser_postfix_expression) <case CPP_OPEN_PAREN>: When\n+\tlooking for a block-scope function declaration, look through the whole\n+\tset, not just the first function in the overload set.\n+\n 2020-05-12  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/95063"}, {"sha": "f1ddef220fec8dc9de60a841a0b69eeeddec7d08", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90b160f8ec515f54ddc36519a6aaa60abdabdec1/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90b160f8ec515f54ddc36519a6aaa60abdabdec1/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=90b160f8ec515f54ddc36519a6aaa60abdabdec1", "patch": "@@ -7385,19 +7385,25 @@ cp_parser_postfix_expression (cp_parser *parser, bool address_p, bool cast_p,\n \t\telse if (!args->is_empty ()\n \t\t\t && is_overloaded_fn (postfix_expression))\n \t\t  {\n-\t\t    /* We only need to look at the first function,\n-\t\t       because all the fns share the attribute we're\n-\t\t       concerned with (all member fns or all local\n-\t\t       fns).  */\n-\t\t    tree fn = get_first_fn (postfix_expression);\n-\t\t    fn = STRIP_TEMPLATE (fn);\n-\n \t\t    /* Do not do argument dependent lookup if regular\n \t\t       lookup finds a member function or a block-scope\n \t\t       function declaration.  [basic.lookup.argdep]/3  */\n-\t\t    if (!((TREE_CODE (fn) == USING_DECL && DECL_DEPENDENT_P (fn))\n-\t\t\t  || DECL_FUNCTION_MEMBER_P (fn)\n-\t\t\t  || DECL_LOCAL_FUNCTION_P (fn)))\n+\t\t    bool do_adl_p = true;\n+\t\t    tree fns = get_fns (postfix_expression);\n+\t\t    for (lkp_iterator iter (fns); iter; ++iter)\n+\t\t      {\n+\t\t\ttree fn = STRIP_TEMPLATE (*iter);\n+\t\t\tif ((TREE_CODE (fn) == USING_DECL\n+\t\t\t     && DECL_DEPENDENT_P (fn))\n+\t\t\t    || DECL_FUNCTION_MEMBER_P (fn)\n+\t\t\t    || DECL_LOCAL_FUNCTION_P (fn))\n+\t\t\t  {\n+\t\t\t    do_adl_p = false;\n+\t\t\t    break;\n+\t\t\t  }\n+\t\t      }\n+\n+\t\t    if (do_adl_p)\n \t\t      {\n \t\t\tkoenig_p = true;\n \t\t\tif (!any_type_dependent_arguments_p (args))"}, {"sha": "24a42765cc225a573c2719a37a0f7753b85f8a97", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90b160f8ec515f54ddc36519a6aaa60abdabdec1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90b160f8ec515f54ddc36519a6aaa60abdabdec1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=90b160f8ec515f54ddc36519a6aaa60abdabdec1", "patch": "@@ -1,3 +1,8 @@\n+2020-05-12  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/95074\n+\t* g++.dg/lookup/koenig15.C: New test.\n+\n 2020-05-12  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR sanitizer/95051"}, {"sha": "f317c010dde196ca7b3a14c3490f376f238aa298", "filename": "gcc/testsuite/g++.dg/lookup/koenig15.C", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90b160f8ec515f54ddc36519a6aaa60abdabdec1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fkoenig15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90b160f8ec515f54ddc36519a6aaa60abdabdec1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fkoenig15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fkoenig15.C?ref=90b160f8ec515f54ddc36519a6aaa60abdabdec1", "patch": "@@ -0,0 +1,45 @@\n+// PR c++/95074 - Function found via ADL when it should not.\n+// { dg-do compile }\n+\n+namespace N {\n+  struct S { };\n+  void f(S);\n+}\n+\n+namespace M {\n+  void f(int);\n+}\n+\n+void\n+fn0 ()\n+{\n+  N::S s;\n+  using M::f;\n+  f (s);\n+}\n+\n+void\n+fn1 ()\n+{\n+  N::S s;\n+  extern void f(char);\n+  using M::f;\n+  f (s); // { dg-error \"no matching function\" }\n+}\n+\n+void\n+fn2 ()\n+{\n+  N::S s;\n+  using M::f;\n+  extern void f(char);\n+  f (s); // { dg-error \"no matching function\" }\n+}\n+\n+void\n+fn3 ()\n+{\n+  N::S s;\n+  extern void (*f)(char);\n+  f (s); // { dg-error \"cannot convert\" }\n+}"}]}