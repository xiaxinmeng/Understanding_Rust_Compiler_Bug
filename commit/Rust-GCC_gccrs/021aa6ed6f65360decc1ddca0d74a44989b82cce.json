{"sha": "021aa6ed6f65360decc1ddca0d74a44989b82cce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDIxYWE2ZWQ2ZjY1MzYwZGVjYzFkZGNhMGQ3NGE0NDk4OWI4MmNjZQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2003-01-28T23:04:02Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2003-01-28T23:04:02Z"}, "message": "config.gcc (ia64*-*-aix*): Remove.\n\n        * config.gcc (ia64*-*-aix*): Remove.\n        * config/ia64/aix.h, config/ia64/t-aix: Remove file.\n        * config/ia64/unwind-aix.c: Remove file.\n\nFrom-SVN: r62043", "tree": {"sha": "e2b9d7a5ed3a3ac14ae573af6b78eb467eb7fb29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e2b9d7a5ed3a3ac14ae573af6b78eb467eb7fb29"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/021aa6ed6f65360decc1ddca0d74a44989b82cce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/021aa6ed6f65360decc1ddca0d74a44989b82cce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/021aa6ed6f65360decc1ddca0d74a44989b82cce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/021aa6ed6f65360decc1ddca0d74a44989b82cce/comments", "author": null, "committer": null, "parents": [{"sha": "db2cd5e6c0fb329a8191993a203bdfd43069664e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db2cd5e6c0fb329a8191993a203bdfd43069664e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db2cd5e6c0fb329a8191993a203bdfd43069664e"}], "stats": {"total": 306, "additions": 6, "deletions": 300}, "files": [{"sha": "fdccdbbcfe48f933a4b93d0b5937315813d6c6a7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/021aa6ed6f65360decc1ddca0d74a44989b82cce/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/021aa6ed6f65360decc1ddca0d74a44989b82cce/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=021aa6ed6f65360decc1ddca0d74a44989b82cce", "patch": "@@ -1,3 +1,9 @@\n+2003-01-28  Richard Henderson  <rth@redhat.com>\n+\n+\t* config.gcc (ia64*-*-aix*): Remove.\n+\t* config/ia64/aix.h, config/ia64/t-aix: Remove file.\n+\t* config/ia64/unwind-aix.c: Remove file.\n+\n 2003-01-28  Andreas Schwab  <schwab@suse.de>\n \n         * config/m68k/m68k.md (tablejump+2): Don't sign extend an address"}, {"sha": "f839ba94c44844d4477c84bbac5fe912b228e880", "filename": "gcc/config.gcc", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/021aa6ed6f65360decc1ddca0d74a44989b82cce/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/021aa6ed6f65360decc1ddca0d74a44989b82cce/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=021aa6ed6f65360decc1ddca0d74a44989b82cce", "patch": "@@ -1382,12 +1382,6 @@ i960-*-*)\t\t\t# Default i960 environment.\n \tc_target_objs=\"i960-c.o\"\n \tcxx_target_objs=\"i960-c.o\"\n \t;;\n-ia64*-*-aix*)\n-\ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h ia64/sysv4.h ia64/aix.h\"\n-\ttmake_file=\"ia64/t-ia64 ia64/t-aix\"\n-\ttarget_cpu_default=\"MASK_GNU_AS|MASK_GNU_LD\"\n-\textra_parts=\"crti.o crtn.o crtbegin.o crtend.o crtbeginS.o crtendS.o\"\n-\t;;\n ia64*-*-elf*)\n \ttm_file=\"${tm_file} dbxelf.h elfos.h ia64/sysv4.h ia64/elf.h\"\n \ttmake_file=\"ia64/t-ia64\""}, {"sha": "5eb2334cb6a83317d68932c98151a33e5cae51bc", "filename": "gcc/config/ia64/aix.h", "status": "removed", "additions": 0, "deletions": 159, "changes": 159, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db2cd5e6c0fb329a8191993a203bdfd43069664e/gcc%2Fconfig%2Fia64%2Faix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db2cd5e6c0fb329a8191993a203bdfd43069664e/gcc%2Fconfig%2Fia64%2Faix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Faix.h?ref=db2cd5e6c0fb329a8191993a203bdfd43069664e", "patch": "@@ -1,159 +0,0 @@\n-/* Definitions of target machine GNU compiler.  IA-64/AIX version.\n-   Copyright (C) 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n-   Contributed by Timothy Wall (twall@cygnus.com)\n-\n-This file is part of GNU CC.\n-\n-GNU CC is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 2, or (at your option)\n-any later version.\n-\n-GNU CC is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GNU CC; see the file COPYING.  If not, write to\n-the Free Software Foundation, 59 Temple Place - Suite 330,\n-Boston, MA 02111-1307, USA.  */\n-\n-/* AIX5 (aka Monterey): a mix of AIX and UnixWare.  \n-   This file is loosely based on ia64/linux.h.  */\n-\n-/* This macro is a C statement to print on `stderr' a string describing the\n-   particular machine description choice.  */\n-\n-#define TARGET_VERSION fprintf (stderr, \" (IA-64) AIX\");\n-\n-#undef ASM_APP_ON\n-#define ASM_APP_ON \"#APP\\n\"\n-\n-#undef ASM_APP_OFF\n-#define ASM_APP_OFF \"#NO_APP\\n\"\n-\n-#define SET_ASM_OP\t\"\\t.set\\t\"\n-\n-#undef MD_EXEC_PREFIX\n-#undef MD_STARTFILE_PREFIX\n-#define MD_STARTFILE_PREFIX \"/usr/lib/ia64l64/\"\n-\n-/* Output at beginning of assembler file.  */\n-/* The .file command should always begin the output.  */\n-#undef ASM_FILE_START\n-#define ASM_FILE_START(FILE)\t\t\t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-\toutput_file_directive (FILE, main_input_filename);\t\t\\\n-\tfprintf (FILE, \"\\t.version\\t\\\"01.01\\\"\\n\");\t\t\t\\\n-  } while (0)\n-\n-/* Provide a STARTFILE_SPEC appropriate for AIX.  Here we add\n-   the crti C++ startup files file which provide part of the support\n-   for getting C++ file-scope static object constructed before entering\n-   `main'.  */ \n-   \n-#undef\tSTARTFILE_SPEC\n-#define STARTFILE_SPEC \\\n-\"%{!shared: \\\n-   %{pg:gcrt1_64.o%s} %{!pg:%{p:mcrt1_64.o%s} \\\n-                        %{!p:%{profile:gcrt1_64.o%s} \\\n-                          %{!profile:crt1_64.o%s}}}} \\\n- crti.o%s %{!shared:crtbegin.o%s} %{shared:crtbeginS.o%s}\"\n-\n-/* Provide a ENDFILE_SPEC appropriate for AIX.  Here we tack on\n-   the crtn file which provides termination of the support for getting C++\n-   file-scope static object constructed before entering `main'.  */\n-\n-#undef  ENDFILE_SPEC\n-#define ENDFILE_SPEC \"%{!shared:crtend.o%s} %{shared:crtendS.o%s} crtn.o%s\"\n-\n-/* Define this so we can compile MS code for use with WINE.  */\n-#define HANDLE_PRAGMA_PACK_PUSH_POP\n-\n-/* Target OS builtins.  */\n-#define TARGET_OS_CPP_BUILTINS()\t\t\t\\\n-do {\t\t\t\t\t\t\t\\\n-\tif (flag_iso)\t\t\t\t\t\\\n-\t  builtin_define(\"_ANSI_C_SOURCE\");\t\t\\\n-\tbuiltin_define(\"_AIX\");\t\t\t\t\\\n-\tbuiltin_define(\"_AIX64\");\t\t\t\\\n-\tbuiltin_define(\"unix\");\t\t\t\t\\\n-\tbuiltin_assert(\"system=unix\");\t\t\t\\\n-\tbuiltin_assert(\"system=aix\");\t\t\t\\\n-\tbuiltin_define(\"__64BIT__\");\t\t\t\\\n-\tbuiltin_define(\"_LONG_LONG\");\t\t\t\\\n-\tbuiltin_define(\"_IA64\");\t\t\t\\\n-\tbuiltin_define(\"__int128=__size128_t\");\t\t\\\n-\tif (c_language == clk_cplusplus)\t\t\\\n-\t  {\t\t\t\t\t\t\\\n-\t    builtin_define(\"_XOPEN_SOURCE=500\");\t\\\n-\t    builtin_define(\"_XOPEN_SOURCE_EXTENDED=1\");\t\\\n-\t    builtin_define(\"_LARGE_FILE_API\");\t\t\\\n-\t    builtin_define(\"_ALL_SOURCE\");\t\t\\\n-\t  }\t\t\t\t\t\t\\\n-} while (0)\n-\n-/* A C string constant that tells the GNU CC driver program options to pass to\n-   CPP.  It can also specify how to translate options you give to GNU CC into\n-   options for GNU CC to pass to the CPP.  */\n-\n-#undef CPP_SPEC\n-#define CPP_SPEC \"\\\n-%{posix:-D_POSIX_SOURCE}\"\n-\n-/* Define this for shared library support.  */\n-\n-#undef LINK_SPEC\n-#define LINK_SPEC \"\\\n-%{shared:-shared} \\\n-%{!shared: \\\n-  %{!static: \\\n-    %{rdynamic:-export-dynamic} \\\n-    %{!dynamic-linker:-dynamic-linker /usr/lib/ia64l64/libc.so.1}} \\\n-    %{static:-static}}\"\n-\n-#define JMP_BUF_SIZE  85\n-\n-/* A C statement or compound statement to output to FILE some assembler code to\n-   call the profiling subroutine `mcount'.  \n-\n-   FIXME this is not supported until xlC supports it and can thus tell us\n-   how to do it.\n-*/\n-\n-#undef FUNCTION_PROFILER\n-#define FUNCTION_PROFILER(FILE, LABELNO)\t\t\\\n-do {\t\t\t\t\t\t\t\\\n-} while (0)\n-\n-/* Tell the linker where to find the crt*.o files.  */\n-\n-#ifndef CROSS_COMPILE\n-#undef STANDARD_STARTFILE_PREFIX\n-#define STANDARD_STARTFILE_PREFIX \"/usr/lib/ia64l64/\"\n-#endif\n-\n-/* It is illegal to have relocations in shared segments on AIX.\n-   Pretend flag_pic is always set.  */\n-#undef\tTARGET_ASM_SELECT_SECTION\n-#define TARGET_ASM_SELECT_SECTION  ia64_rwreloc_select_section\n-#undef\tTARGET_ASM_UNIQUE_SECTION\n-#define TARGET_ASM_UNIQUE_SECTION  ia64_rwreloc_unique_section\n-#undef\tTARGET_ASM_SELECT_RTX_SECTION\n-#define TARGET_ASM_SELECT_RTX_SECTION  ia64_rwreloc_select_rtx_section\n-\n-/* Override ia64/sysv4.h setting with that used by AIX5.  */\n-#undef WCHAR_TYPE\n-#ifdef __64BIT__\n-#define WCHAR_TYPE \"unsigned int\"\n-#else\n-#define WCHAR_TYPE \"unsigned short\"\n-#endif\n-\n-/* Define the `__builtin_va_list' type for AIX.  Use char* b/c that's what the\n-   system headers expect.  */\n-#define BUILD_VA_LIST_TYPE(VALIST) \\\n-  (VALIST) = build_pointer_type(char_type_node)\n-\n-/* End of aix.h */"}, {"sha": "7b6df46a5d05e4324643ce41d4ab65a0c1772a92", "filename": "gcc/config/ia64/t-aix", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db2cd5e6c0fb329a8191993a203bdfd43069664e/gcc%2Fconfig%2Fia64%2Ft-aix", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db2cd5e6c0fb329a8191993a203bdfd43069664e/gcc%2Fconfig%2Fia64%2Ft-aix", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Ft-aix?ref=db2cd5e6c0fb329a8191993a203bdfd43069664e", "patch": "@@ -1,15 +0,0 @@\n-# AIX support \n-\n-# Compile crtbeginS.o and crtendS.o with pic.\n-CRTSTUFF_T_CFLAGS_S = -fPIC\n-# Compile libgcc2.a with pic and defines required by AIX headers\n-TARGET_LIBGCC2_CFLAGS = -fPIC -D__64BIT__ -D_LONG_LONG -D_IA64 -D__int128=__size128_t\n-LIB2ADDEH += $(srcdir)/config/ia64/unwind-aix.c\n-\n-# Assemble startup files.\n-crti.o: $(srcdir)/config/ia64/crti.asm $(GCC_PASSES)\n-\t$(GCC_FOR_TARGET) -c -o crti.o -x assembler $(srcdir)/config/ia64/crti.asm\n-crtn.o: $(srcdir)/config/ia64/crtn.asm $(GCC_PASSES)\n-\t$(GCC_FOR_TARGET) -c -o crtn.o -x assembler $(srcdir)/config/ia64/crtn.asm\n-\n-# end t-aix"}, {"sha": "7e594060f3ec95205a4f1c79959a5025935736b4", "filename": "gcc/config/ia64/unwind-aix.c", "status": "removed", "additions": 0, "deletions": 120, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db2cd5e6c0fb329a8191993a203bdfd43069664e/gcc%2Fconfig%2Fia64%2Funwind-aix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db2cd5e6c0fb329a8191993a203bdfd43069664e/gcc%2Fconfig%2Fia64%2Funwind-aix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Funwind-aix.c?ref=db2cd5e6c0fb329a8191993a203bdfd43069664e", "patch": "@@ -1,120 +0,0 @@\n-/* Implements unwind table entry lookup for AIX (cf. fde-glibc.c). \n-   Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n-   Contributed by Timothy Wall <twall@redhat.com>\n-\n-   This file is part of GNU CC.\n-\n-   GNU CC is free software; you can redistribute it and/or modify\n-   it under the terms of the GNU General Public License as published by\n-   the Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   GNU CC is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License\n-   along with GNU CC; see the file COPYING.  If not, write to\n-   the Free Software Foundation, 59 Temple Place - Suite 330,\n-   Boston, MA 02111-1307, USA.  */\n-\n-#include \"tconfig.h\"\n-#include \"tsystem.h\"\n-#include \"unwind.h\"\n-#include \"unwind-ia64.h\"\n-\n-#include <dlfcn.h>\n-#include <link.h>\n-#include <sys/mman.h>\n-\n-static struct unw_table_entry *\n-find_fde_for_dso (Elf64_Addr pc, rt_link_map *map,\n-                  unsigned long* pseg_base, unsigned long* pgp)\n-{\n-  rt_segment *seg;\n-  Elf64_Addr seg_base;\n-  struct unw_table_entry *f_base;\n-  size_t lo, hi;\n-  \n-  /* See if PC falls into one of the loaded segments.  */\n-  for (seg = map->l_segments; seg; seg = (rt_segment *)seg->s_next) \n-    {\n-      if (pc >= seg->s_map_addr && pc < seg->s_map_addr + seg->s_mapsz)\n-        break;\n-    }\n-  if (!seg) \n-    return NULL;\n-  \n-  /* Search for the entry within the unwind table.  */\n-  f_base = (struct unw_table_entry *) (map->l_unwind_table);\n-  seg_base = (Elf64_Addr) seg->s_map_addr;\n-  lo = 0;\n-  hi = map->l_unwind_sz / sizeof (struct unw_table_entry);\n-\n-  while (lo < hi)\n-    {\n-      size_t mid = (lo + hi) / 2;\n-      struct unw_table_entry *f = f_base + mid;\n-\n-      if (pc < f->start_offset + seg_base)\n-        hi = mid;\n-      else if (pc >= f->end_offset + seg_base)\n-        lo = mid + 1;\n-      else {\n-        /* AIX executables are *always* dynamic.  Look up GP for this\n-           object.  */ \n-        Elf64_Dyn *dyn = map->l_ld;\n-        *pgp = 0;\n-        for (; dyn->d_tag != DT_NULL ; dyn++) \n-          {\n-            if (dyn->d_tag == DT_PLTGOT)\n-              {\n-                *pgp = dyn->d_un.d_ptr;\n-                break;\n-              }\n-          }\n-        *pseg_base = seg_base;\n-        return f;\n-      }\n-    }\n-  return NULL;\n-}\n-\n-/* Return a pointer to the unwind table entry for the function containing\n-   PC.  */  \n-struct unw_table_entry *\n-_Unwind_FindTableEntry (void *pc, unsigned long *pseg_base, unsigned long *pgp)\n-{\n-  extern rt_r_debug _r_debug;\n-  struct unw_table_entry *ret;\n-  rt_link_map *map = _r_debug.r_map; /* address of link map */\n-\n-  /* Check the main application first, hoping that most of the user's\n-     code is there instead of in some library.  */\n-  ret = find_fde_for_dso ((Elf64_Addr)pc, map, pseg_base, pgp);\n-  if (ret) \n-    {\n-      /* If we're in the main application, use the current GP value.  */\n-      register unsigned long gp __asm__(\"gp\");\n-      *pgp = gp;\n-      return ret;\n-    }\n-\n-  /* FIXME need a DSO lock mechanism for AIX here, to ensure shared\n-     libraries aren't changed while we're examining them.  */\n-\n-  for (map = _r_debug.r_map; map; map = map->l_next)\n-    {\n-      /* Skip the main application's entry.  */\n-      if (!map->l_name)\n-      continue;\n-      ret = find_fde_for_dso ((Elf64_Addr)pc, map, pseg_base, pgp);\n-      if (ret)\n-      break;\n-    }\n-\n-  /* FIXME need a DSO unlock mechanism for AIX here.  */\n-\n-  return ret;\n-}"}]}