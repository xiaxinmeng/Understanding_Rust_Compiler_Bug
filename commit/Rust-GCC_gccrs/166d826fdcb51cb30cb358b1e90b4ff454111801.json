{"sha": "166d826fdcb51cb30cb358b1e90b4ff454111801", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTY2ZDgyNmZkY2I1MWNiMzBjYjM1OGIxZTkwYjRmZjQ1NDExMTgwMQ==", "commit": {"author": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2015-04-02T11:29:48Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2015-04-02T11:29:48Z"}, "message": "pa.c (pa_output_move_double): Directly handle register indexed memory operand.\n\n\t* config/pa/pa.c (pa_output_move_double): Directly handle register\n\tindexed memory operand.  Simplify handling of scaled register indexed\n\tmemory operands.\n\nFrom-SVN: r221835", "tree": {"sha": "2e34f4ae9aff9b0fc01362a0193a12adae75dc47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e34f4ae9aff9b0fc01362a0193a12adae75dc47"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/166d826fdcb51cb30cb358b1e90b4ff454111801", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/166d826fdcb51cb30cb358b1e90b4ff454111801", "html_url": "https://github.com/Rust-GCC/gccrs/commit/166d826fdcb51cb30cb358b1e90b4ff454111801", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/166d826fdcb51cb30cb358b1e90b4ff454111801/comments", "author": null, "committer": null, "parents": [{"sha": "e61ffb3b5acbf364d0f2bbf4e33475e8ccaadb7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e61ffb3b5acbf364d0f2bbf4e33475e8ccaadb7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e61ffb3b5acbf364d0f2bbf4e33475e8ccaadb7d"}], "stats": {"total": 49, "additions": 28, "deletions": 21}, "files": [{"sha": "d0ab5c364b623a32190eba88736d65652fe03820", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/166d826fdcb51cb30cb358b1e90b4ff454111801/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/166d826fdcb51cb30cb358b1e90b4ff454111801/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=166d826fdcb51cb30cb358b1e90b4ff454111801", "patch": "@@ -1,3 +1,9 @@\n+2015-04-02  John David Anglin  <danglin@gcc.gnu.org>\n+\n+\t* config/pa/pa.c (pa_output_move_double): Directly handle register\n+\tindexed memory operand.  Simplify handling of scaled register indexed\n+\tmemory operands.\n+\n 2015-04-02  Ilya Enkovich  <ilya.enkovich@intel.com>\n \n \tPR driver/65444"}, {"sha": "d5b0c5081a899ba70e94e0fc9bf20d248530da5f", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 22, "deletions": 21, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/166d826fdcb51cb30cb358b1e90b4ff454111801/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/166d826fdcb51cb30cb358b1e90b4ff454111801/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=166d826fdcb51cb30cb358b1e90b4ff454111801", "patch": "@@ -2595,28 +2595,29 @@ pa_output_move_double (rtx *operands)\n \t       && GET_CODE (XEXP (addr, 0)) == MULT)\n \t{\n \t  rtx xoperands[4];\n-\t  rtx high_reg = gen_rtx_SUBREG (SImode, operands[0], 0);\n \n-\t  if (!reg_overlap_mentioned_p (high_reg, addr))\n-\t    {\n-\t      xoperands[0] = high_reg;\n-\t      xoperands[1] = XEXP (addr, 1);\n-\t      xoperands[2] = XEXP (XEXP (addr, 0), 0);\n-\t      xoperands[3] = XEXP (XEXP (addr, 0), 1);\n-\t      output_asm_insn (\"{sh%O3addl %2,%1,%0|shladd,l %2,%O3,%1,%0}\",\n-\t\t\t       xoperands);\n-\t      return \"ldw 4(%0),%R0\\n\\tldw 0(%0),%0\";\n-\t    }\n-\t  else\n-\t    {\n-\t      xoperands[0] = high_reg;\n-\t      xoperands[1] = XEXP (addr, 1);\n-\t      xoperands[2] = XEXP (XEXP (addr, 0), 0);\n-\t      xoperands[3] = XEXP (XEXP (addr, 0), 1);\n-\t      output_asm_insn (\"{sh%O3addl %2,%1,%R0|shladd,l %2,%O3,%1,%R0}\",\n-\t\t\t       xoperands);\n-\t      return \"ldw 0(%R0),%0\\n\\tldw 4(%R0),%R0\";\n-\t    }\n+\t  /* Load address into left half of destination register.  */\n+\t  xoperands[0] = gen_rtx_SUBREG (SImode, operands[0], 0);\n+\t  xoperands[1] = XEXP (addr, 1);\n+\t  xoperands[2] = XEXP (XEXP (addr, 0), 0);\n+\t  xoperands[3] = XEXP (XEXP (addr, 0), 1);\n+\t  output_asm_insn (\"{sh%O3addl %2,%1,%0|shladd,l %2,%O3,%1,%0}\",\n+\t\t\t   xoperands);\n+\t  return \"ldw 4(%0),%R0\\n\\tldw 0(%0),%0\";\n+\t}\n+      else if (GET_CODE (addr) == PLUS\n+\t       && REG_P (XEXP (addr, 0))\n+\t       && REG_P (XEXP (addr, 1)))\n+\t{\n+\t  rtx xoperands[3];\n+\n+\t  /* Load address into left half of destination register.  */\n+\t  xoperands[0] = gen_rtx_SUBREG (SImode, operands[0], 0);\n+\t  xoperands[1] = XEXP (addr, 0);\n+\t  xoperands[2] = XEXP (addr, 1);\n+\t  output_asm_insn (\"{addl|add,l} %1,%2,%0\",\n+\t\t\t   xoperands);\n+\t  return \"ldw 4(%0),%R0\\n\\tldw 0(%0),%0\";\n \t}\n     }\n "}]}