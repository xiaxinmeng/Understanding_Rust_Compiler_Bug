{"sha": "3abeaf8f89f246f481c869a09d0715a2762bde28", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2FiZWFmOGY4OWYyNDZmNDgxYzg2OWEwOWQwNzE1YTI3NjJiZGUyOA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-08-11T08:49:47Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-08-11T08:49:47Z"}, "message": "re PR libstdc++/42925 ([GB 99] Not possible to compare unique_ptr with 0)\n\n2010-08-11  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR libstdc++/42925\n\t* include/bits/unique_ptr.h (operator==(const unique_ptr<>&,\n\tnullptr_t), operator==(nullptr_t, const unique_ptr<>&),\n\toperator!=(const unique_ptr<>&, nullptr_t),\n\toperator!=(nullptr_t, const unique_ptr<>&)): Add.\n\t* include/bits/shared_ptr_base.h (operator==(const __shared_ptr<>&,\n\tnullptr_t), operator==(nullptr_t, const __shared_ptr<>&),\n\toperator!=(const __shared_ptr<>&, nullptr_t),\n\toperator!=(nullptr_t, const __shared_ptr<>&)): Likewise.\n\t* include/bits/shared_ptr.h (operator==(const shared_ptr<>&,\n\tnullptr_t), operator==(nullptr_t, const shared_ptr<>&),\n\toperator!=(const shared_ptr<>&, nullptr_t),\n\toperator!=(nullptr_t, const shared_ptr<>&)): Likewise.\n\t* testsuite/20_util/unique_ptr/comparison/42925.cc: New.\n\t* testsuite/20_util/shared_ptr/comparison/42925.cc: Likewise.\n\t* testsuite/20_util/weak_ptr/comparison/cmp_neg.cc: Adjust\n\tdg-error line numbers.\n\nFrom-SVN: r163094", "tree": {"sha": "7b9f9a2cd71a9f12a49311af70596d15abe4c21b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b9f9a2cd71a9f12a49311af70596d15abe4c21b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3abeaf8f89f246f481c869a09d0715a2762bde28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3abeaf8f89f246f481c869a09d0715a2762bde28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3abeaf8f89f246f481c869a09d0715a2762bde28", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3abeaf8f89f246f481c869a09d0715a2762bde28/comments", "author": null, "committer": null, "parents": [{"sha": "8fe286ea6d3807259c46054ea1f11d1a26ed4cc0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fe286ea6d3807259c46054ea1f11d1a26ed4cc0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fe286ea6d3807259c46054ea1f11d1a26ed4cc0"}], "stats": {"total": 162, "additions": 158, "deletions": 4}, "files": [{"sha": "b900bf56565ff793d2bb1416b8e8922dfca1b0d5", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3abeaf8f89f246f481c869a09d0715a2762bde28/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3abeaf8f89f246f481c869a09d0715a2762bde28/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3abeaf8f89f246f481c869a09d0715a2762bde28", "patch": "@@ -1,3 +1,23 @@\n+2010-08-11  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR libstdc++/42925\n+\t* include/bits/unique_ptr.h (operator==(const unique_ptr<>&,\n+\tnullptr_t), operator==(nullptr_t, const unique_ptr<>&),\n+\toperator!=(const unique_ptr<>&, nullptr_t),\n+\toperator!=(nullptr_t, const unique_ptr<>&)): Add.\n+\t* include/bits/shared_ptr_base.h (operator==(const __shared_ptr<>&,\n+\tnullptr_t), operator==(nullptr_t, const __shared_ptr<>&),\n+\toperator!=(const __shared_ptr<>&, nullptr_t),\n+\toperator!=(nullptr_t, const __shared_ptr<>&)): Likewise.\n+\t* include/bits/shared_ptr.h (operator==(const shared_ptr<>&,\n+\tnullptr_t), operator==(nullptr_t, const shared_ptr<>&),\n+\toperator!=(const shared_ptr<>&, nullptr_t),\n+\toperator!=(nullptr_t, const shared_ptr<>&)): Likewise.\n+\t* testsuite/20_util/unique_ptr/comparison/42925.cc: New.\n+\t* testsuite/20_util/shared_ptr/comparison/42925.cc: Likewise.\n+\t* testsuite/20_util/weak_ptr/comparison/cmp_neg.cc: Adjust\n+\tdg-error line numbers.\n+\n 2010-08-11  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/bits/unique_ptr.h: Replace _Tp_Deleter -> _Dp, and"}, {"sha": "2d9e6f771a61975418aaae9b1d5d2de77f23da6c", "filename": "libstdc++-v3/include/bits/shared_ptr.h", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3abeaf8f89f246f481c869a09d0715a2762bde28/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3abeaf8f89f246f481c869a09d0715a2762bde28/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h?ref=3abeaf8f89f246f481c869a09d0715a2762bde28", "patch": "@@ -317,11 +317,31 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     operator==(const shared_ptr<_Tp1>& __a, const shared_ptr<_Tp2>& __b)\n     { return __a.get() == __b.get(); }\n \n+  template<typename _Tp>\n+    inline bool\n+    operator==(const shared_ptr<_Tp>& __a, nullptr_t)\n+    { return __a.get() == nullptr; }\n+\n+  template<typename _Tp>\n+    inline bool\n+    operator==(nullptr_t, const shared_ptr<_Tp>& __b)\n+    { return nullptr == __b.get(); }\n+\n   template<typename _Tp1, typename _Tp2>\n     inline bool\n     operator!=(const shared_ptr<_Tp1>& __a, const shared_ptr<_Tp2>& __b)\n     { return __a.get() != __b.get(); }\n \n+  template<typename _Tp>\n+    inline bool\n+    operator!=(const shared_ptr<_Tp>& __a, nullptr_t)\n+    { return __a.get() != nullptr; }\n+\n+  template<typename _Tp>\n+    inline bool\n+    operator!=(nullptr_t, const shared_ptr<_Tp>& __b)\n+    { return nullptr != __b.get(); }\n+\n   template<typename _Tp1, typename _Tp2>\n     inline bool\n     operator<(const shared_ptr<_Tp1>& __a, const shared_ptr<_Tp2>& __b)"}, {"sha": "183c241e29bc3955e0a437018ccf12b8d0ad8e86", "filename": "libstdc++-v3/include/bits/shared_ptr_base.h", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3abeaf8f89f246f481c869a09d0715a2762bde28/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3abeaf8f89f246f481c869a09d0715a2762bde28/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h?ref=3abeaf8f89f246f481c869a09d0715a2762bde28", "patch": "@@ -851,12 +851,32 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t       const __shared_ptr<_Tp2, _Lp>& __b)\n     { return __a.get() == __b.get(); }\n \n+  template<typename _Tp, _Lock_policy _Lp>\n+    inline bool\n+    operator==(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t)\n+    { return __a.get() == nullptr; }\n+\n+  template<typename _Tp, _Lock_policy _Lp>\n+    inline bool\n+    operator==(nullptr_t, const __shared_ptr<_Tp, _Lp>& __b)\n+    { return nullptr == __b.get(); }\n+\n   template<typename _Tp1, typename _Tp2, _Lock_policy _Lp>\n     inline bool\n     operator!=(const __shared_ptr<_Tp1, _Lp>& __a,\n \t       const __shared_ptr<_Tp2, _Lp>& __b)\n     { return __a.get() != __b.get(); }\n \n+  template<typename _Tp, _Lock_policy _Lp>\n+    inline bool\n+    operator!=(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t)\n+    { return __a.get() != nullptr; }\n+\n+  template<typename _Tp, _Lock_policy _Lp>\n+    inline bool\n+    operator!=(nullptr_t, const __shared_ptr<_Tp, _Lp>& __b)\n+    { return nullptr != __b.get(); }\n+\n   template<typename _Tp1, typename _Tp2, _Lock_policy _Lp>\n     inline bool\n     operator<(const __shared_ptr<_Tp1, _Lp>& __a,"}, {"sha": "d6adb1459e313ae8fdc435ce189d5c54ad4fe163", "filename": "libstdc++-v3/include/bits/unique_ptr.h", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3abeaf8f89f246f481c869a09d0715a2762bde28/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3abeaf8f89f246f481c869a09d0715a2762bde28/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h?ref=3abeaf8f89f246f481c869a09d0715a2762bde28", "patch": "@@ -101,7 +101,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     public:\n       typedef typename _Pointer::type\tpointer;\n       typedef _Tp                       element_type;\n-      typedef _Dp               deleter_type;\n+      typedef _Dp                       deleter_type;\n \n       // Constructors.\n       unique_ptr()\n@@ -432,13 +432,33 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t       const unique_ptr<_Up, _Ep>& __y)\n     { return __x.get() == __y.get(); }\n \n+  template<typename _Tp, typename _Dp>\n+    inline bool\n+    operator==(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)\n+    { return __x.get() == nullptr; }\n+\n+  template<typename _Tp, typename _Dp>\n+    inline bool\n+    operator==(nullptr_t, const unique_ptr<_Tp, _Dp>& __y)\n+    { return nullptr == __y.get(); }\n+\n   template<typename _Tp, typename _Dp,\n \t   typename _Up, typename _Ep>\n     inline bool\n     operator!=(const unique_ptr<_Tp, _Dp>& __x,\n \t       const unique_ptr<_Up, _Ep>& __y)\n     { return !(__x.get() == __y.get()); }\n \n+  template<typename _Tp, typename _Dp>\n+    inline bool\n+    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)\n+    { return __x.get() != nullptr; }\n+\n+  template<typename _Tp, typename _Dp>\n+    inline bool\n+    operator!=(nullptr_t, const unique_ptr<_Tp, _Dp>& __y)\n+    { return nullptr != __y.get(); }\n+\n   template<typename _Tp, typename _Dp,\n \t   typename _Up, typename _Ep>\n     inline bool"}, {"sha": "41e09d666ae9435bb71d3f153c81ad2e762cac77", "filename": "libstdc++-v3/testsuite/20_util/shared_ptr/comparison/42925.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3abeaf8f89f246f481c869a09d0715a2762bde28/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcomparison%2F42925.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3abeaf8f89f246f481c869a09d0715a2762bde28/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcomparison%2F42925.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcomparison%2F42925.cc?ref=3abeaf8f89f246f481c869a09d0715a2762bde28", "patch": "@@ -0,0 +1,37 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2010 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 20.9.11.2 Class template shared_ptr [util.smartptr.shared]\n+\n+#include <memory>\n+\n+// libstdc++/42925 (also see GB 99)\n+void test01()\n+{\n+  std::shared_ptr<int> ptr;\n+  if (ptr == 0)\n+    { }\n+  if (0 == ptr)\n+    { }\n+  if (ptr != 0)\n+    { }\n+  if (0 != ptr)\n+    { }\n+}"}, {"sha": "e3dfad46f8841f32d1826dd815dcebf1383a4f72", "filename": "libstdc++-v3/testsuite/20_util/unique_ptr/comparison/42925.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3abeaf8f89f246f481c869a09d0715a2762bde28/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcomparison%2F42925.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3abeaf8f89f246f481c869a09d0715a2762bde28/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcomparison%2F42925.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcomparison%2F42925.cc?ref=3abeaf8f89f246f481c869a09d0715a2762bde28", "patch": "@@ -0,0 +1,37 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2010 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 20.9.10 Class template unique_ptr [unique.ptr]\n+\n+#include <memory>\n+\n+// libstdc++/42925 (also see GB 99)\n+void test01()\n+{\n+  std::unique_ptr<int> ptr;\n+  if (ptr == 0)\n+    { }\n+  if (0 == ptr)\n+    { }\n+  if (ptr != 0)\n+    { }\n+  if (0 != ptr)\n+    { }\n+}"}, {"sha": "f124718016eb1bc62f162ce4e732805f5e72ae7d", "filename": "libstdc++-v3/testsuite/20_util/weak_ptr/comparison/cmp_neg.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3abeaf8f89f246f481c869a09d0715a2762bde28/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fweak_ptr%2Fcomparison%2Fcmp_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3abeaf8f89f246f481c869a09d0715a2762bde28/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fweak_ptr%2Fcomparison%2Fcmp_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fweak_ptr%2Fcomparison%2Fcmp_neg.cc?ref=3abeaf8f89f246f481c869a09d0715a2762bde28", "patch": "@@ -41,9 +41,9 @@ main()\n   return 0;\n }\n \n-// { dg-warning \"note\" \"\" { target *-*-* } 327 }\n-// { dg-warning \"note\" \"\" { target *-*-* } 446 }\n-// { dg-warning \"note\" \"\" { target *-*-* } 863 }\n+// { dg-warning \"note\" \"\" { target *-*-* } 347 }\n+// { dg-warning \"note\" \"\" { target *-*-* } 466 }\n+// { dg-warning \"note\" \"\" { target *-*-* } 883 }\n // { dg-warning \"note\" \"\" { target *-*-* } 580 }\n // { dg-warning \"note\" \"\" { target *-*-* } 1027 }\n // { dg-warning \"note\" \"\" { target *-*-* } 340 }"}]}