{"sha": "d0d428c4ce425c470120a46427d5964f0bd09f89", "node_id": "C_kwDOANBUbNoAKGQwZDQyOGM0Y2U0MjVjNDcwMTIwYTQ2NDI3ZDU5NjRmMGJkMDlmODk", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-11-04T07:37:49Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-11-04T07:41:58Z"}, "message": "Update TARGET_MEM_REF documentation\n\nThis updates the internals manual documentation of TARGET_MEM_REF\nand amends MEM_REF.  The former was seriously out of date.\n\n2021-11-04  Richard Biener  <rguenther@suse.de>\n\ngcc/\n\t* doc/generic.texi: Update TARGET_MEM_REF and MEM_REF\n\tdocumentation.", "tree": {"sha": "82e641b6ccadfb0e7da8a2b4d58550309f297c0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/82e641b6ccadfb0e7da8a2b4d58550309f297c0e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d0d428c4ce425c470120a46427d5964f0bd09f89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0d428c4ce425c470120a46427d5964f0bd09f89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0d428c4ce425c470120a46427d5964f0bd09f89", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0d428c4ce425c470120a46427d5964f0bd09f89/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3fd0723f0a388817def293e606a99bfbf3a4ced4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fd0723f0a388817def293e606a99bfbf3a4ced4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fd0723f0a388817def293e606a99bfbf3a4ced4"}], "stats": {"total": 58, "additions": 31, "deletions": 27}, "files": [{"sha": "69f6f375181c8b302eaa048ef6e8ab1864046120", "filename": "gcc/doc/generic.texi", "status": "modified", "additions": 31, "deletions": 27, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0d428c4ce425c470120a46427d5964f0bd09f89/gcc%2Fdoc%2Fgeneric.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0d428c4ce425c470120a46427d5964f0bd09f89/gcc%2Fdoc%2Fgeneric.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgeneric.texi?ref=d0d428c4ce425c470120a46427d5964f0bd09f89", "patch": "@@ -1223,25 +1223,12 @@ meanings.  The type of these expressions must be an array whose component\n type is the same as that of the first operand.  The range of that array\n type determines the amount of data these expressions access.\n \n-@item TARGET_MEM_REF\n-These nodes represent memory accesses whose address directly map to\n-an addressing mode of the target architecture.  The first argument\n-is @code{TMR_SYMBOL} and must be a @code{VAR_DECL} of an object with\n-a fixed address.  The second argument is @code{TMR_BASE} and the\n-third one is @code{TMR_INDEX}.  The fourth argument is\n-@code{TMR_STEP} and must be an @code{INTEGER_CST}.  The fifth\n-argument is @code{TMR_OFFSET} and must be an @code{INTEGER_CST}.\n-Any of the arguments may be NULL if the appropriate component\n-does not appear in the address.  Address of the @code{TARGET_MEM_REF}\n-is determined in the following way.\n-\n-@smallexample\n-&TMR_SYMBOL + TMR_BASE + TMR_INDEX * TMR_STEP + TMR_OFFSET\n-@end smallexample\n-\n-The sixth argument is the reference to the original memory access, which\n-is preserved for the purposes of the RTL alias analysis.  The seventh\n-argument is a tag representing the results of tree level alias analysis.\n+@item COMPONENT_REF\n+These nodes represent non-static data member accesses.  The first\n+operand is the object (rather than a pointer to it); the second operand\n+is the @code{FIELD_DECL} for the data member.  The third operand represents\n+the byte offset of the field, but should not be used directly; call\n+@code{component_ref_field_offset} instead.\n \n @item ADDR_EXPR\n These nodes are used to represent the address of an object.  (These\n@@ -1264,16 +1251,33 @@ pointer or reference type.\n These nodes are used to represent the object pointed to by a pointer\n offset by a constant.\n The first operand is the pointer being dereferenced; it will always have\n-pointer or reference type.  The second operand is a pointer constant.\n-Its type is specifying the type to be used for type-based alias analysis.\n+pointer or reference type.  The second operand is a pointer constant\n+serving as constant offset applied to the pointer being dereferenced\n+with its type specifying the type to be used for type-based alias analysis.\n+The type of the node specifies the alignment of the access.\n \n-@item COMPONENT_REF\n-These nodes represent non-static data member accesses.  The first\n-operand is the object (rather than a pointer to it); the second operand\n-is the @code{FIELD_DECL} for the data member.  The third operand represents\n-the byte offset of the field, but should not be used directly; call\n-@code{component_ref_field_offset} instead.\n+@item TARGET_MEM_REF\n+These nodes represent memory accesses whose address directly map to\n+an addressing mode of the target architecture.  The first argument\n+is @code{TMR_BASE} and is a pointer to the object being accessed.\n+The second argument is @code{TMR_OFFSET} which is a pointer constant\n+with dual purpose serving both as constant offset and holder of\n+the type used for type-based alias analysis.  The first two operands\n+have exactly the same semantics as @code{MEM_REF}.  The third\n+and fourth operand are @code{TMR_INDEX} and @code{TMR_STEP} where\n+the former is an integer and the latter an integer constant.  The\n+fifth and last operand is @code{TMR_INDEX2} which is an alternate\n+non-constant offset.  Any of the third to last operands may be\n+@code{NULL} if the corresponding component does not appear in\n+the address, but @code{TMR_INDEX} and @code{TMR_STEP} shall be\n+always supplied in pair.  The Address of the @code{TARGET_MEM_REF}\n+is determined in the following way.\n+\n+@smallexample\n+TMR_BASE + TMR_OFFSET + TMR_INDEX * TMR_STEP + TMR_INDEX2\n+@end smallexample\n \n+The type of the node specifies the alignment of the access.\n \n @end table\n "}]}