{"sha": "b112d1c928df130cd5481e0f751242c7217ec83d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjExMmQxYzkyOGRmMTMwY2Q1NDgxZTBmNzUxMjQyYzcyMTdlYzgzZA==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.ibm.com", "date": "2019-04-02T11:03:40Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2019-04-02T11:03:40Z"}, "message": "S/390: arch13: vector load/store byte reversed element for builtins\n\n2019-04-02  Andreas Krebbel  <krebbel@linux.ibm.com>\n\n\t* config/s390/vecintrin.h: Map vec_vster low-level builtins to vec_vler.\n\t* config/s390/vx-builtins.md (\"*vec_insert_and_zero_bswap<mode>\")\n\t(\"*vec_set_bswap_elem<mode>\", \"*vec_set_bswap_vec<mode>\")\n\t(\"*vec_extract_bswap_vec<mode>\", \"*vec_extract_bswap_elem<mode>\"):\n\tNew insn definitions.\n\ngcc/testsuite/ChangeLog:\n\n2019-04-02  Andreas Krebbel  <krebbel@linux.ibm.com>\n\n\t* gcc.target/s390/zvector/bswap-and-replicate-1.c: New test.\n\t* gcc.target/s390/zvector/get-element-bswap-1.c: New test.\n\t* gcc.target/s390/zvector/get-element-bswap-2.c: New test.\n\t* gcc.target/s390/zvector/get-element-bswap-3.c: New test.\n\t* gcc.target/s390/zvector/get-element-bswap-4.c: New test.\n\t* gcc.target/s390/zvector/set-element-bswap-1.c: New test.\n\t* gcc.target/s390/zvector/set-element-bswap-2.c: New test.\n\t* gcc.target/s390/zvector/set-element-bswap-3.c: New test.\n\nFrom-SVN: r270086", "tree": {"sha": "b2d1ef70af524dccd721eac0779fdeccf2e0c38f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2d1ef70af524dccd721eac0779fdeccf2e0c38f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b112d1c928df130cd5481e0f751242c7217ec83d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b112d1c928df130cd5481e0f751242c7217ec83d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b112d1c928df130cd5481e0f751242c7217ec83d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b112d1c928df130cd5481e0f751242c7217ec83d/comments", "author": {"login": "Andreas-Krebbel", "id": 38103320, "node_id": "MDQ6VXNlcjM4MTAzMzIw", "avatar_url": "https://avatars.githubusercontent.com/u/38103320?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Andreas-Krebbel", "html_url": "https://github.com/Andreas-Krebbel", "followers_url": "https://api.github.com/users/Andreas-Krebbel/followers", "following_url": "https://api.github.com/users/Andreas-Krebbel/following{/other_user}", "gists_url": "https://api.github.com/users/Andreas-Krebbel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Andreas-Krebbel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Andreas-Krebbel/subscriptions", "organizations_url": "https://api.github.com/users/Andreas-Krebbel/orgs", "repos_url": "https://api.github.com/users/Andreas-Krebbel/repos", "events_url": "https://api.github.com/users/Andreas-Krebbel/events{/privacy}", "received_events_url": "https://api.github.com/users/Andreas-Krebbel/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3278804e59a76e7f140a522286d7ac88c2cdb916", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3278804e59a76e7f140a522286d7ac88c2cdb916", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3278804e59a76e7f140a522286d7ac88c2cdb916"}], "stats": {"total": 323, "additions": 323, "deletions": 0}, "files": [{"sha": "782aed6f33c199dd4e1cb039fb669eb59d7980b6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b112d1c928df130cd5481e0f751242c7217ec83d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b112d1c928df130cd5481e0f751242c7217ec83d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b112d1c928df130cd5481e0f751242c7217ec83d", "patch": "@@ -1,3 +1,11 @@\n+2019-04-02  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\t* config/s390/vecintrin.h: Map vec_vster low-level builtins to vec_vler.\n+\t* config/s390/vx-builtins.md (\"*vec_insert_and_zero_bswap<mode>\")\n+\t(\"*vec_set_bswap_elem<mode>\", \"*vec_set_bswap_vec<mode>\")\n+\t(\"*vec_extract_bswap_vec<mode>\", \"*vec_extract_bswap_elem<mode>\"):\n+\tNew insn definitions.\n+\n 2019-04-02  Andreas Krebbel  <krebbel@linux.ibm.com>\n \n \t* config/s390/s390-builtin-types.def: Add new builtin function type."}, {"sha": "05707a136c1d7badcda61020caeee408f274bf8b", "filename": "gcc/config/s390/vecintrin.h", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b112d1c928df130cd5481e0f751242c7217ec83d/gcc%2Fconfig%2Fs390%2Fvecintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b112d1c928df130cd5481e0f751242c7217ec83d/gcc%2Fconfig%2Fs390%2Fvecintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fvecintrin.h?ref=b112d1c928df130cd5481e0f751242c7217ec83d", "patch": "@@ -159,6 +159,20 @@ __lcbb(const void *ptr, int bndry)\n \t\t\t    | __VEC_CLASS_FP_SUBNORMAL_N, &cc);\t\\\n       cc != 3 ? 1 : 0;\t\t\t\t\t\t\\\n     })\n+\n+#define vec_vstbrh vec_vlbrh\n+#define vec_vstbrf vec_vlbrf\n+#define vec_vstbrg vec_vlbrg\n+#define vec_vstbrq vec_vlbrq\n+#define vec_vstbrf_flt vec_vlbrf_flt\n+#define vec_vstbrg_dbl vec_vlbrg_dbl\n+\n+#define vec_vsterb vec_vlerb\n+#define vec_vsterh vec_vlerh\n+#define vec_vsterf vec_vlerh\n+#define vec_vsterg vec_vlerh\n+#define vec_vsterf_flt vec_vlerf_flt\n+#define vec_vsterg_dbl vec_vlerg_dbl\n #define vec_gather_element __builtin_s390_vec_gather_element\n #define vec_xl __builtin_s390_vec_xl\n #define vec_xld2 __builtin_s390_vec_xld2"}, {"sha": "8d837c4cead119b8eb1ff598994ecedbbb879a50", "filename": "gcc/config/s390/vx-builtins.md", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b112d1c928df130cd5481e0f751242c7217ec83d/gcc%2Fconfig%2Fs390%2Fvx-builtins.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b112d1c928df130cd5481e0f751242c7217ec83d/gcc%2Fconfig%2Fs390%2Fvx-builtins.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fvx-builtins.md?ref=b112d1c928df130cd5481e0f751242c7217ec83d", "patch": "@@ -181,6 +181,18 @@\n   \"vllez<bhfgq>\\t%v0,%1\"\n   [(set_attr \"op_type\" \"VRX\")])\n \n+; vec_revb (vec_insert_and_zero(x))             bswap-and-replicate-1.c\n+; vllebrzh, vllebrzf, vllebrzg\n+(define_insn \"*vec_insert_and_zero_bswap<mode>\"\n+  [(set (match_operand:V_HW_HSD                    0 \"register_operand\" \"=v\")\n+\t(bswap:V_HW_HSD (unspec:V_HW_HSD\n+\t\t\t [(match_operand:<non_vec> 1 \"memory_operand\"    \"R\")]\n+\t\t\t UNSPEC_VEC_INSERT_AND_ZERO)))]\n+  \"TARGET_VXE2\"\n+  \"vllebrz<bhfgq>\\t%v0,%1\"\n+  [(set_attr \"op_type\" \"VRX\")])\n+\n+\n (define_insn \"vlbb\"\n   [(set (match_operand:V16QI              0 \"register_operand\"   \"=v\")\n \t(unspec:V16QI [(match_operand:BLK 1 \"memory_operand\"      \"R\")\n@@ -2139,3 +2151,54 @@\n   constv = force_const_mem (V16QImode, gen_rtx_CONST_VECTOR (V16QImode, gen_rtvec_v (16, perm_rtx)));\n   emit_move_insn (operands[2], constv);\n })\n+\n+; vec_insert (__builtin_bswap32 (*a), b, 1)        set-element-bswap-2.c\n+; b[1] = __builtin_bswap32 (*a)                    set-element-bswap-3.c\n+; vlebrh, vlebrf, vlebrg\n+(define_insn \"*vec_set_bswap_elem<mode>\"\n+  [(set (match_operand:V_HW_HSD                                     0 \"register_operand\" \"=v\")\n+\t(unspec:V_HW_HSD [(bswap:<non_vec> (match_operand:<non_vec> 1 \"memory_operand\"    \"R\"))\n+\t\t                           (match_operand:SI        2 \"const_int_operand\" \"C\")\n+\t\t\t\t\t   (match_operand:V_HW_HSD  3 \"register_operand\"  \"0\")]\n+\t\t  UNSPEC_VEC_SET))]\n+  \"TARGET_VXE2 && UINTVAL (operands[2]) < GET_MODE_NUNITS (<V_HW_HSD:MODE>mode)\"\n+  \"vlebr<bhfgq>\\t%v0,%1,%2\"\n+  [(set_attr \"op_type\" \"VRX\")])\n+\n+; vec_revb (vec_insert (*a, vec_revb (b), 1))      set-element-bswap-1.c\n+; vlebrh, vlebrf, vlebrg\n+(define_insn \"*vec_set_bswap_vec<mode>\"\n+  [(set (match_operand:V_HW_HSD                                     0 \"register_operand\" \"=v\")\n+\t(bswap:V_HW_HSD\n+\t (unspec:V_HW_HSD [(match_operand:<non_vec>                 1 \"memory_operand\"    \"R\")\n+\t\t           (match_operand:SI                        2 \"const_int_operand\" \"C\")\n+\t\t\t   (bswap:V_HW_HSD (match_operand:V_HW_HSD  3 \"register_operand\"  \"0\"))]\n+\t\t\t  UNSPEC_VEC_SET)))]\n+  \"TARGET_VXE2 && UINTVAL (operands[2]) < GET_MODE_NUNITS (<V_HW_HSD:MODE>mode)\"\n+  \"vlebr<bhfgq>\\t%v0,%1,%2\"\n+  [(set_attr \"op_type\" \"VRX\")])\n+\n+; *a = vec_extract (vec_revb (b), 1);              get-element-bswap-3.c\n+; *a = vec_revb (b)[1];                            get-element-bswap-4.c\n+; vstebrh, vstebrf, vstebrg\n+(define_insn \"*vec_extract_bswap_vec<mode>\"\n+  [(set (match_operand:<non_vec>                                    0 \"memory_operand\"   \"=R\")\n+\t(unspec:<non_vec> [(bswap:V_HW_HSD (match_operand:V_HW_HSD  1 \"register_operand\"  \"v\"))\n+\t\t\t   (match_operand:SI                        2 \"const_int_operand\" \"C\")]\n+\t\t\t   UNSPEC_VEC_EXTRACT))]\n+  \"TARGET_VXE2 && UINTVAL (operands[2]) < GET_MODE_NUNITS (<V_HW_HSD:MODE>mode)\"\n+  \"vstebr<bhfgq>\\t%v1,%0,%2\"\n+  [(set_attr \"op_type\" \"VRX\")])\n+\n+; *a = __builtin_bswap32 (vec_extract (b, 1));     get-element-bswap-1.c\n+; *a = __builtin_bswap32 (b[1]);                   get-element-bswap-2.c\n+; vstebrh, vstebrf, vstebrg\n+(define_insn \"*vec_extract_bswap_elem<mode>\"\n+  [(set (match_operand:<non_vec>                     0 \"memory_operand\"   \"=R\")\n+\t(bswap:<non_vec>\n+\t (unspec:<non_vec> [(match_operand:V_HW_HSD  1 \"register_operand\"  \"v\")\n+\t\t\t    (match_operand:SI        2 \"const_int_operand\" \"C\")]\n+\t\t\t   UNSPEC_VEC_EXTRACT)))]\n+  \"TARGET_VXE2 && UINTVAL (operands[2]) < GET_MODE_NUNITS (<V_HW_HSD:MODE>mode)\"\n+  \"vstebr<bhfgq>\\t%v1,%0,%2\"\n+  [(set_attr \"op_type\" \"VRX\")])"}, {"sha": "9315bd02214a73306ec0052cbbdae51231a118f7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b112d1c928df130cd5481e0f751242c7217ec83d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b112d1c928df130cd5481e0f751242c7217ec83d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b112d1c928df130cd5481e0f751242c7217ec83d", "patch": "@@ -1,3 +1,14 @@\n+2019-04-02  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\t* gcc.target/s390/zvector/bswap-and-replicate-1.c: New test.\n+\t* gcc.target/s390/zvector/get-element-bswap-1.c: New test.\n+\t* gcc.target/s390/zvector/get-element-bswap-2.c: New test.\n+\t* gcc.target/s390/zvector/get-element-bswap-3.c: New test.\n+\t* gcc.target/s390/zvector/get-element-bswap-4.c: New test.\n+\t* gcc.target/s390/zvector/set-element-bswap-1.c: New test.\n+\t* gcc.target/s390/zvector/set-element-bswap-2.c: New test.\n+\t* gcc.target/s390/zvector/set-element-bswap-3.c: New test.\n+\n 2019-04-02  Andreas Krebbel  <krebbel@linux.ibm.com>\n \n \t* gcc.target/s390/zvector/vec-reve-load-byte-z14.c: New test."}, {"sha": "443b346ce906ad395851235b4cbe221ef2f787ed", "filename": "gcc/testsuite/gcc.target/s390/zvector/bswap-and-replicate-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b112d1c928df130cd5481e0f751242c7217ec83d/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fbswap-and-replicate-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b112d1c928df130cd5481e0f751242c7217ec83d/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fbswap-and-replicate-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fbswap-and-replicate-1.c?ref=b112d1c928df130cd5481e0f751242c7217ec83d", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mzarch -march=arch13 -mzvector -fno-asynchronous-unwind-tables -dp\" } */\n+\n+#include <vecintrin.h>\n+\n+vector signed short\n+vllebrzh (const signed short *a)\n+{\n+  return vec_revb (vec_insert_and_zero (a));\n+}\n+\n+/* { dg-final { scan-assembler-times \"vllebrzh.*\\n\\tvllebrzh.*vec_insert_and_zero_bswapv8hi\" 1 } } */\n+\n+vector signed int\n+vllebrzf (const signed int *a)\n+{\n+  return vec_revb (vec_insert_and_zero (a));\n+}\n+\n+/* { dg-final { scan-assembler-times \"vllebrzf.*\\n\\tvllebrzf.*vec_insert_and_zero_bswapv4si\" 1 } } */\n+\n+vector signed long long\n+vllebrzg (const signed long long *a)\n+{\n+  return vec_revb (vec_insert_and_zero (a));\n+}\n+\n+/* { dg-final { scan-assembler-times \"vllebrzg.*\\n\\tvllebrzg.*vec_insert_and_zero_bswapv2di\" 1 } } */"}, {"sha": "ce81f106029028c44914c0f10be95aae95a90549", "filename": "gcc/testsuite/gcc.target/s390/zvector/get-element-bswap-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b112d1c928df130cd5481e0f751242c7217ec83d/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fget-element-bswap-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b112d1c928df130cd5481e0f751242c7217ec83d/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fget-element-bswap-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fget-element-bswap-1.c?ref=b112d1c928df130cd5481e0f751242c7217ec83d", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mzarch -march=arch13 -mzvector -fno-asynchronous-unwind-tables -dp\" } */\n+\n+#include <vecintrin.h>\n+\n+void\n+vstebrh (signed short *a, vector signed short b)\n+{\n+  *a = __builtin_bswap16 (vec_extract (b, 1));\n+}\n+\n+/* { dg-final { scan-assembler-times \"vstebrh.*\\n\\tvstebrh.*vec_extract_bswap_elemv8hi\" 1 } } */\n+\n+void\n+vstebrf (int *a, vector int b)\n+{\n+  *a = __builtin_bswap32 (vec_extract (b, 1));\n+}\n+\n+/* { dg-final { scan-assembler-times \"vstebrf.*\\n\\tvstebrf.*vec_extract_bswap_elemv4si\" 1 } } */\n+\n+void\n+vstebrg (long long *a, vector long long b)\n+{\n+  *a = __builtin_bswap64 (vec_extract (b, 1));\n+}\n+\n+/* { dg-final { scan-assembler-times \"vstebrg.*\\n\\tvstebrg.*vec_extract_bswap_elemv2di\" 1 } } */"}, {"sha": "e8190b0b2cbaa1bd65cf554b57fdfc98ffece735", "filename": "gcc/testsuite/gcc.target/s390/zvector/get-element-bswap-2.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b112d1c928df130cd5481e0f751242c7217ec83d/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fget-element-bswap-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b112d1c928df130cd5481e0f751242c7217ec83d/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fget-element-bswap-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fget-element-bswap-2.c?ref=b112d1c928df130cd5481e0f751242c7217ec83d", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mzarch -march=arch13 -mzvector -fno-asynchronous-unwind-tables -dp\" } */\n+\n+#include <vecintrin.h>\n+\n+void\n+vstebrh (signed short *a, vector signed short b)\n+{\n+  *a = __builtin_bswap16 (b[1]);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vstebrh.*\\n\\tvstebrh.*vec_extract_bswap_elemv8hi\" 1 } } */\n+\n+void\n+vstebrf (int *a, vector int b)\n+{\n+  *a = __builtin_bswap32 (b[1]);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vstebrf.*\\n\\tvstebrf.*vec_extract_bswap_elemv4si\" 1 } } */\n+\n+void\n+vstebrg (long long *a, vector long long b)\n+{\n+  *a = __builtin_bswap64 (b[1]);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vstebrg.*\\n\\tvstebrg.*vec_extract_bswap_elemv2di\" 1 } } */"}, {"sha": "c4f0287b0f161d91ab18af833fdd27dc8410a68f", "filename": "gcc/testsuite/gcc.target/s390/zvector/get-element-bswap-3.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b112d1c928df130cd5481e0f751242c7217ec83d/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fget-element-bswap-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b112d1c928df130cd5481e0f751242c7217ec83d/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fget-element-bswap-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fget-element-bswap-3.c?ref=b112d1c928df130cd5481e0f751242c7217ec83d", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mzarch -march=arch13 -mzvector -fno-asynchronous-unwind-tables -dp\" } */\n+\n+#include <vecintrin.h>\n+\n+void\n+vstebrh (signed short *a, vector signed short b)\n+{\n+  *a = vec_extract (vec_revb (b), 1);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vstebrh.*\\n\\tvstebrh.*vec_extract_bswap_vecv8hi\" 1 } } */\n+\n+void\n+vstebrf (int *a, vector int b)\n+{\n+  *a = vec_extract (vec_revb (b), 1);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vstebrf.*\\n\\tvstebrf.*vec_extract_bswap_vecv4si\" 1 } } */\n+\n+void\n+vstebrg (long long *a, vector long long b)\n+{\n+  *a = vec_extract (vec_revb (b), 1);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vstebrg.*\\n\\tvstebrg.*vec_extract_bswap_vecv2di\" 1 } } */"}, {"sha": "1be463f297d8e8c4f2ec38f48b1af3409a193995", "filename": "gcc/testsuite/gcc.target/s390/zvector/get-element-bswap-4.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b112d1c928df130cd5481e0f751242c7217ec83d/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fget-element-bswap-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b112d1c928df130cd5481e0f751242c7217ec83d/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fget-element-bswap-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fget-element-bswap-4.c?ref=b112d1c928df130cd5481e0f751242c7217ec83d", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mzarch -march=arch13 -mzvector -fno-asynchronous-unwind-tables -dp\" } */\n+\n+#include <vecintrin.h>\n+\n+void\n+vstebrh (signed short *a, vector signed short b)\n+{\n+  *a = vec_revb (b)[1];\n+}\n+\n+/* { dg-final { scan-assembler-times \"vstebrh.*\\n\\tvstebrh.*vec_extract_bswap_vecv8hi\" 1 } } */\n+\n+void\n+vstebrf (int *a, vector int b)\n+{\n+  *a = vec_revb (b)[1];\n+}\n+\n+/* { dg-final { scan-assembler-times \"vstebrf.*\\n\\tvstebrf.*vec_extract_bswap_vecv4si\" 1 } } */\n+\n+void\n+vstebrg (long long *a, vector long long b)\n+{\n+  *a = vec_revb (b)[1];\n+}\n+\n+/* { dg-final { scan-assembler-times \"vstebrg.*\\n\\tvstebrg.*vec_extract_bswap_vecv2di\" 1 } } */"}, {"sha": "218f829bf6ec6c06b6a92fcd9e281adb951253fa", "filename": "gcc/testsuite/gcc.target/s390/zvector/set-element-bswap-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b112d1c928df130cd5481e0f751242c7217ec83d/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fset-element-bswap-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b112d1c928df130cd5481e0f751242c7217ec83d/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fset-element-bswap-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fset-element-bswap-1.c?ref=b112d1c928df130cd5481e0f751242c7217ec83d", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mzarch -march=arch13 -mzvector -fno-asynchronous-unwind-tables -dp\" } */\n+\n+#include <vecintrin.h>\n+\n+vector signed short\n+vlebrh (const signed short *a, vector signed short b)\n+{\n+  return vec_revb (vec_insert (*a, vec_revb (b), 1));\n+}\n+\n+/* { dg-final { scan-assembler-times \"vlebrh.*\\n\\tvlebrh.*vec_set_bswap_vecv8hi\" 1 } } */\n+\n+vector signed int\n+vlebrf (const signed int *a, vector signed int b)\n+{\n+  return vec_revb (vec_insert (*a, vec_revb (b), 1));\n+}\n+\n+/* { dg-final { scan-assembler-times \"vlebrf.*\\n\\tvlebrf.*vec_set_bswap_vecv4si\" 1 } } */\n+\n+vector signed long long\n+vlebrg (const signed long long *a, vector signed long long b)\n+{\n+  return vec_revb (vec_insert (*a, vec_revb (b), 1));\n+}\n+\n+/* { dg-final { scan-assembler-times \"vlebrg.*\\n\\tvlebrg.*vec_set_bswap_vecv2di\" 1 } } */"}, {"sha": "8a8c95b6936f4302896cd4eee87414dc9afd1e01", "filename": "gcc/testsuite/gcc.target/s390/zvector/set-element-bswap-2.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b112d1c928df130cd5481e0f751242c7217ec83d/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fset-element-bswap-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b112d1c928df130cd5481e0f751242c7217ec83d/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fset-element-bswap-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fset-element-bswap-2.c?ref=b112d1c928df130cd5481e0f751242c7217ec83d", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mzarch -march=arch13 -mzvector -fno-asynchronous-unwind-tables -dp\" } */\n+\n+#include <vecintrin.h>\n+\n+vector signed short\n+vlebrh (const signed short *a, vector signed short b)\n+{\n+  return vec_insert (__builtin_bswap16 (*a), b, 1);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vlebrh.*\\n\\tvlebrh.*vec_set_bswap_elemv8hi\" 1 } } */\n+\n+vector signed int\n+vlebrf (const signed int *a, vector signed int b)\n+{\n+  return vec_insert (__builtin_bswap32 (*a), b, 1);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vlebrf.*\\n\\tvlebrf.*vec_set_bswap_elemv4si\" 1 } } */\n+\n+vector signed long long\n+vlebrg (const signed long long *a, vector signed long long b)\n+{\n+  return vec_insert (__builtin_bswap64 (*a), b, 1);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vlebrg.*\\n\\tvlebrg.*vec_set_bswap_elemv2di\" 1 } } */"}, {"sha": "ef8742602d4a478c2decd2accbf4a572596f7085", "filename": "gcc/testsuite/gcc.target/s390/zvector/set-element-bswap-3.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b112d1c928df130cd5481e0f751242c7217ec83d/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fset-element-bswap-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b112d1c928df130cd5481e0f751242c7217ec83d/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fset-element-bswap-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fset-element-bswap-3.c?ref=b112d1c928df130cd5481e0f751242c7217ec83d", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mzarch -march=arch13 -mzvector -fno-asynchronous-unwind-tables -dp\" } */\n+\n+#include <vecintrin.h>\n+\n+vector signed short\n+vlebrh (const signed short *a, vector signed short b)\n+{\n+  b[1] = __builtin_bswap16 (*a);\n+  return b;\n+}\n+\n+/* { dg-final { scan-assembler-times \"vlebrh.*\\n\\tvlebrh.*vec_set_bswap_elemv8hi\" 1 } } */\n+\n+vector signed int\n+vlebrf (const signed int *a, vector signed int b)\n+{\n+  b[1] = __builtin_bswap32 (*a);\n+  return b;\n+}\n+\n+/* { dg-final { scan-assembler-times \"vlebrf.*\\n\\tvlebrf.*vec_set_bswap_elemv4si\" 1 } } */\n+\n+vector signed long long\n+vlebrg (const signed long long *a, vector signed long long b)\n+{\n+  b[1] = __builtin_bswap64 (*a);\n+  return b;\n+}\n+\n+/* { dg-final { scan-assembler-times \"vlebrg.*\\n\\tvlebrg.*vec_set_bswap_elemv2di\" 1 } } */"}]}