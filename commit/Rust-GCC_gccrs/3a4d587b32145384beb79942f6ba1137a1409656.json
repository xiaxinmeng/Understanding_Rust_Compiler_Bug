{"sha": "3a4d587b32145384beb79942f6ba1137a1409656", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2E0ZDU4N2IzMjE0NTM4NGJlYjc5OTQyZjZiYTExMzdhMTQwOTY1Ng==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@bigpond.net.au", "date": "2004-06-24T06:10:35Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2004-06-24T06:10:35Z"}, "message": "calls.c (expand_call): Call INIT_CUMULATIVE_ARGS earlier, and pass raw n_named_args to it.\n\n\t* calls.c (expand_call): Call INIT_CUMULATIVE_ARGS earlier, and\n\tpass raw n_named_args to it.\n\t* targhooks.c: Formatting.\n\t(hook_bool_CUMULATIVE_ARGS_false): Correct comment.\n\nFrom-SVN: r83583", "tree": {"sha": "43dbb623994689c18ffd4dc140e02cd4778da8e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43dbb623994689c18ffd4dc140e02cd4778da8e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a4d587b32145384beb79942f6ba1137a1409656", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a4d587b32145384beb79942f6ba1137a1409656", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a4d587b32145384beb79942f6ba1137a1409656", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a4d587b32145384beb79942f6ba1137a1409656/comments", "author": null, "committer": null, "parents": [{"sha": "8c56bb830708cab8909c6911124af2565ad1acc6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c56bb830708cab8909c6911124af2565ad1acc6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c56bb830708cab8909c6911124af2565ad1acc6"}], "stats": {"total": 60, "additions": 39, "deletions": 21}, "files": [{"sha": "eb04bf36dc06796a558e048e95a28355f746eda0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a4d587b32145384beb79942f6ba1137a1409656/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a4d587b32145384beb79942f6ba1137a1409656/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3a4d587b32145384beb79942f6ba1137a1409656", "patch": "@@ -1,3 +1,10 @@\n+2004-06-24  Alan Modra  <amodra@bigpond.net.au>\n+\n+\t* calls.c (expand_call): Call INIT_CUMULATIVE_ARGS earlier, and\n+\tpass raw n_named_args to it.\n+\t* targhooks.c: Formatting.\n+\t(hook_bool_CUMULATIVE_ARGS_false): Correct comment.\n+\n 2004-06-23  Richard Henderson  <rth@redhat.com>\n \n \t* c-gimplify.c (gimplify_decl_stmt): Push gimplify_one_sizepos inside"}, {"sha": "80931003f92193db38bb57ebe8ee9d8c72b0ef2e", "filename": "gcc/calls.c", "status": "modified", "additions": 28, "deletions": 18, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a4d587b32145384beb79942f6ba1137a1409656/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a4d587b32145384beb79942f6ba1137a1409656/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=3a4d587b32145384beb79942f6ba1137a1409656", "patch": "@@ -2275,6 +2275,26 @@ expand_call (tree exp, rtx target, int ignore)\n     num_actuals++;\n \n   /* Compute number of named args.\n+     First, do a raw count of the args for INIT_CUMULATIVE_ARGS.  */\n+\n+  if (type_arg_types != 0)\n+    n_named_args\n+      = (list_length (type_arg_types)\n+\t /* Count the struct value address, if it is passed as a parm.  */\n+\t + structure_value_addr_parm);\n+  else\n+    /* If we know nothing, treat all args as named.  */\n+    n_named_args = num_actuals;\n+\n+  /* Start updating where the next arg would go.\n+\n+     On some machines (such as the PA) indirect calls have a different\n+     calling convention than normal calls.  The fourth argument in\n+     INIT_CUMULATIVE_ARGS tells the backend if this is an indirect call\n+     or not.  */\n+  INIT_CUMULATIVE_ARGS (args_so_far, funtype, NULL_RTX, fndecl, n_named_args);\n+\n+  /* Now possibly adjust the number of named args.\n      Normally, don't include the last named arg if anonymous args follow.\n      We do include the last named arg if\n      targetm.calls.strict_argument_naming() returns nonzero.\n@@ -2292,27 +2312,17 @@ expand_call (tree exp, rtx target, int ignore)\n      we do not have any reliable way to pass unnamed args in\n      registers, so we must force them into memory.  */\n \n-  if ((targetm.calls.strict_argument_naming (&args_so_far)\n-       || ! targetm.calls.pretend_outgoing_varargs_named (&args_so_far))\n-      && type_arg_types != 0)\n-    n_named_args\n-      = (list_length (type_arg_types)\n-\t /* Don't include the last named arg.  */\n-\t - (targetm.calls.strict_argument_naming (&args_so_far) ? 0 : 1)\n-\t /* Count the struct value address, if it is passed as a parm.  */\n-\t + structure_value_addr_parm);\n+  if (type_arg_types != 0\n+      && targetm.calls.strict_argument_naming (&args_so_far))\n+    ;\n+  else if (type_arg_types != 0\n+\t   && ! targetm.calls.pretend_outgoing_varargs_named (&args_so_far))\n+    /* Don't include the last named arg.  */\n+    --n_named_args;\n   else\n-    /* If we know nothing, treat all args as named.  */\n+    /* Treat all args as named.  */\n     n_named_args = num_actuals;\n \n-  /* Start updating where the next arg would go.\n-\n-     On some machines (such as the PA) indirect calls have a different\n-     calling convention than normal calls.  The fourth argument in\n-     INIT_CUMULATIVE_ARGS tells the backend if this is an indirect call\n-     or not.  */\n-  INIT_CUMULATIVE_ARGS (args_so_far, funtype, NULL_RTX, fndecl, n_named_args);\n-\n   /* Make a vector to hold all the information about each arg.  */\n   args = alloca (num_actuals * sizeof (struct arg_data));\n   memset (args, 0, num_actuals * sizeof (struct arg_data));"}, {"sha": "80ac8721d21ed089b857848ae978171394c1dbce", "filename": "gcc/targhooks.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a4d587b32145384beb79942f6ba1137a1409656/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a4d587b32145384beb79942f6ba1137a1409656/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=3a4d587b32145384beb79942f6ba1137a1409656", "patch": "@@ -113,7 +113,7 @@ default_builtin_setjmp_frame_value (void)\n   return virtual_stack_vars_rtx;\n }\n \n-/* Generic hook that takes a CUMULATIVE_ARGS pointer and returns true.  */\n+/* Generic hook that takes a CUMULATIVE_ARGS pointer and returns false.  */\n \n bool\n hook_bool_CUMULATIVE_ARGS_false (CUMULATIVE_ARGS *ca ATTRIBUTE_UNUSED)\n@@ -122,9 +122,10 @@ hook_bool_CUMULATIVE_ARGS_false (CUMULATIVE_ARGS *ca ATTRIBUTE_UNUSED)\n }\n \n bool\n-default_pretend_outgoing_varargs_named(CUMULATIVE_ARGS *ca ATTRIBUTE_UNUSED)\n+default_pretend_outgoing_varargs_named (CUMULATIVE_ARGS *ca ATTRIBUTE_UNUSED)\n {\n-  return (targetm.calls.setup_incoming_varargs != default_setup_incoming_varargs);\n+  return (targetm.calls.setup_incoming_varargs\n+\t  != default_setup_incoming_varargs);\n }\n \n /* Generic hook that takes a CUMULATIVE_ARGS pointer and returns true.  */"}]}