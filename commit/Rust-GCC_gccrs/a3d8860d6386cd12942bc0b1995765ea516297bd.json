{"sha": "a3d8860d6386cd12942bc0b1995765ea516297bd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTNkODg2MGQ2Mzg2Y2QxMjk0MmJjMGIxOTk1NzY1ZWE1MTYyOTdiZA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-07-01T16:06:46Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-07-01T16:13:12Z"}, "message": "Improve packed record layout support with -fdump-ada-spec\n\nWe cannot fully support packed record layout in -fdump-ada-spec, as packing\nin C and Ada does not behave the same, so we issue a warning.  But simple\ncases are OK and can actually be handled without much work.\n\ngcc/c-family/\n\t* c-ada-spec.c (packed_layout): New global variable.\n\t(dump_ada_declaration): Set it upon seeing a packed record type.\n\tDo not put the \"aliased\" keyword if it is set.\n\t(dump_ada_structure): Add Pack aspect if it is set and clear it.\ngcc/testsuite/\n\t* c-c++-common/dump-ada-spec-14.c: Adjust dg-warning directive.", "tree": {"sha": "94904be460b914f7de438e1c9884453e47f6ab5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/94904be460b914f7de438e1c9884453e47f6ab5e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a3d8860d6386cd12942bc0b1995765ea516297bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3d8860d6386cd12942bc0b1995765ea516297bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3d8860d6386cd12942bc0b1995765ea516297bd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3d8860d6386cd12942bc0b1995765ea516297bd/comments", "author": null, "committer": null, "parents": [{"sha": "506c68e25fb6aea135468972dbc9d8abf816a443", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/506c68e25fb6aea135468972dbc9d8abf816a443", "html_url": "https://github.com/Rust-GCC/gccrs/commit/506c68e25fb6aea135468972dbc9d8abf816a443"}], "stats": {"total": 20, "additions": 12, "deletions": 8}, "files": [{"sha": "827bcc7683065d642927bbc218442ec6b6e17f27", "filename": "gcc/c-family/c-ada-spec.c", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3d8860d6386cd12942bc0b1995765ea516297bd/gcc%2Fc-family%2Fc-ada-spec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3d8860d6386cd12942bc0b1995765ea516297bd/gcc%2Fc-family%2Fc-ada-spec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-ada-spec.c?ref=a3d8860d6386cd12942bc0b1995765ea516297bd", "patch": "@@ -2038,6 +2038,7 @@ is_float128 (tree node)\n }\n \n static bool bitfield_used = false;\n+static bool packed_layout = false;\n \n /* Recursively dump in BUFFER Ada declarations corresponding to NODE of type\n    TYPE.  SPC is the indentation level.  LIMITED_ACCESS indicates whether NODE\n@@ -2851,14 +2852,14 @@ dump_ada_declaration (pretty_printer *buffer, tree t, tree type, int spc)\n \t\treturn 1;\n \t      }\n \n-\t    /* ??? Packed record layout is not supported.  */\n+\t    /* Packed record layout is not fully supported.  */\n \t    if (TYPE_PACKED (TREE_TYPE (t)))\n \t      {\n-\t\twarning_at (DECL_SOURCE_LOCATION (t), 0,\n-\t\t\t    \"unsupported record layout\");\n+\t\twarning_at (DECL_SOURCE_LOCATION (t), 0, \"packed layout\");\n \t\tpp_string (buffer, \"pragma Compile_Time_Warning (True, \");\n-\t\tpp_string (buffer, \"\\\"probably incorrect record layout\\\");\");\n+\t\tpp_string (buffer, \"\\\"packed layout may be incorrect\\\");\");\n \t\tnewline_and_indent (buffer, spc);\n+\t\tpacked_layout = true;\n \t      }\n \n \t    if (orig && TYPE_NAME (orig))\n@@ -2951,7 +2952,8 @@ dump_ada_declaration (pretty_printer *buffer, tree t, tree type, int spc)\n \n \t  pp_string (buffer, \" : \");\n \n-\t  if (TREE_CODE (TREE_TYPE (TREE_TYPE (t))) != POINTER_TYPE)\n+\t  if (TREE_CODE (TREE_TYPE (TREE_TYPE (t))) != POINTER_TYPE\n+\t      && !packed_layout)\n \t    pp_string (buffer, \"aliased \");\n \n \t  if (TYPE_NAME (TREE_TYPE (t)))\n@@ -3185,7 +3187,8 @@ dump_ada_declaration (pretty_printer *buffer, tree t, tree type, int spc)\n \t  if (TREE_CODE (TREE_TYPE (t)) != POINTER_TYPE\n \t      && (TYPE_NAME (TREE_TYPE (t))\n \t\t  || (TREE_CODE (TREE_TYPE (t)) != INTEGER_TYPE\n-\t\t      && TREE_CODE (TREE_TYPE (t)) != ENUMERAL_TYPE)))\n+\t\t      && TREE_CODE (TREE_TYPE (t)) != ENUMERAL_TYPE))\n+\t      && !packed_layout)\n \t    pp_string (buffer, \"aliased \");\n \n \t  if (TREE_READONLY (t) && TREE_CODE (t) != FIELD_DECL)\n@@ -3352,7 +3355,7 @@ dump_ada_structure (pretty_printer *buffer, tree node, tree type, bool nested,\n       pp_string (buffer, \"Unchecked_Union => True\");\n     }\n \n-  if (bitfield_used)\n+  if (bitfield_used || packed_layout)\n     {\n       char buf[32];\n       pp_comma (buffer);\n@@ -3363,6 +3366,7 @@ dump_ada_structure (pretty_printer *buffer, tree node, tree type, bool nested,\n       sprintf (buf, \"Alignment => %d\", TYPE_ALIGN (node) / BITS_PER_UNIT);\n       pp_string (buffer, buf);\n       bitfield_used = false;\n+      packed_layout = false;\n     }\n \n   if (nested)"}, {"sha": "291eea8ba702fb615a121fa8b806566171bb78d6", "filename": "gcc/testsuite/c-c++-common/dump-ada-spec-14.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3d8860d6386cd12942bc0b1995765ea516297bd/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fdump-ada-spec-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3d8860d6386cd12942bc0b1995765ea516297bd/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fdump-ada-spec-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fdump-ada-spec-14.c?ref=a3d8860d6386cd12942bc0b1995765ea516297bd", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-fdump-ada-spec\" } */\n \n-struct __attribute__((packed)) S /* { dg-warning \"unsupported record layout\" } */\n+struct __attribute__((packed)) S /* { dg-warning \"packed layout\" } */\n {\n   char c;\n   int  t;"}]}