{"sha": "eaed0c37779f8cf403921cda1f63d14c1f14a914", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWFlZDBjMzc3NzlmOGNmNDAzOTIxY2RhMWY2M2QxNGMxZjE0YTkxNA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-09-06T08:07:27Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-09-06T08:07:27Z"}, "message": "[multiple changes]\n\n2011-09-06  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch4.adb (Expand_N_Case_Expression): Actions created for the\n\texpression in a given case alternative must be attached to the\n\tstatement list of the ccrresponding case statement alternative\n\tThey cannot be propagated ahead of the case statement, because\n\tthe validity of the expression that generated the action may\n\thold only for that alternative.\n\n2011-09-06  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_ch7.adb: Remove with and use clauses for Get_Targ.\n\t(Alignment_Of): Remove the code for strict alignment targets.\n\t(Double_Alignment_Of): Removed.\n\t(Double_Size_Of): New routine.\n\t(Make_Finalize_Address_Stmts): Change the\n\tcalculation of the dope's size.  Update relevant comments.\n\t(Size_Of): New routine.\n\nFrom-SVN: r178570", "tree": {"sha": "5e667f993d72f235c5c58d8362da36397fa74144", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e667f993d72f235c5c58d8362da36397fa74144"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eaed0c37779f8cf403921cda1f63d14c1f14a914", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eaed0c37779f8cf403921cda1f63d14c1f14a914", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eaed0c37779f8cf403921cda1f63d14c1f14a914", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eaed0c37779f8cf403921cda1f63d14c1f14a914/comments", "author": null, "committer": null, "parents": [{"sha": "b8a93198c2286edd6954930696ff8c1a6607785b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8a93198c2286edd6954930696ff8c1a6607785b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8a93198c2286edd6954930696ff8c1a6607785b"}], "stats": {"total": 128, "additions": 86, "deletions": 42}, "files": [{"sha": "bb3a5b674d2f25ddc4711f88428727aeb20e1549", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaed0c37779f8cf403921cda1f63d14c1f14a914/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaed0c37779f8cf403921cda1f63d14c1f14a914/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=eaed0c37779f8cf403921cda1f63d14c1f14a914", "patch": "@@ -1,3 +1,22 @@\n+2011-09-06  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_N_Case_Expression): Actions created for the\n+\texpression in a given case alternative must be attached to the\n+\tstatement list of the ccrresponding case statement alternative\n+\tThey cannot be propagated ahead of the case statement, because\n+\tthe validity of the expression that generated the action may\n+\thold only for that alternative.\n+\n+2011-09-06  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_ch7.adb: Remove with and use clauses for Get_Targ.\n+\t(Alignment_Of): Remove the code for strict alignment targets.\n+\t(Double_Alignment_Of): Removed.\n+\t(Double_Size_Of): New routine.\n+\t(Make_Finalize_Address_Stmts): Change the\n+\tcalculation of the dope's size.  Update relevant comments.\n+\t(Size_Of): New routine.\n+\n 2011-09-06  Steve Baird  <baird@adacore.com>\n \n \t* einfo.ads (Extra_Accessibility): Update associated comment to use"}, {"sha": "8555883aa32e671b30720213634ed06b0e4d4054", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaed0c37779f8cf403921cda1f63d14c1f14a914/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaed0c37779f8cf403921cda1f63d14c1f14a914/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=eaed0c37779f8cf403921cda1f63d14c1f14a914", "patch": "@@ -4149,14 +4149,13 @@ package body Exp_Ch4 is\n       Alt := First (Alternatives (N));\n       while Present (Alt) loop\n          declare\n-            Aexp : Node_Id             := Expression (Alt);\n-            Aloc : constant Source_Ptr := Sloc (Aexp);\n+            Aexp  : Node_Id             := Expression (Alt);\n+            Aloc  : constant Source_Ptr := Sloc (Aexp);\n+            Stats : List_Id;\n \n          begin\n-            --  Propagate declarations inserted in the node by Insert_Actions\n-            --  (for example, temporaries generated to remove side effects).\n-\n-            Append_List_To (Actions, Sinfo.Actions (Alt));\n+            --  As described above, take Unrestricted_Access for case of non-\n+            --  scalar types, to avoid big copies, and special cases.\n \n             if not Is_Scalar_Type (Typ) then\n                Aexp :=\n@@ -4165,14 +4164,25 @@ package body Exp_Ch4 is\n                    Attribute_Name => Name_Unrestricted_Access);\n             end if;\n \n+            Stats := New_List (\n+              Make_Assignment_Statement (Aloc,\n+                Name       => New_Occurrence_Of (Tnn, Loc),\n+                Expression => Aexp));\n+\n+            --  Propagate declarations inserted in the node by Insert_Actions\n+            --  (for example, temporaries generated to remove side effects).\n+            --  These actions must remain attached to the alternative, given\n+            --  that they are generated by the corresponding expression.\n+\n+            if Present (Sinfo.Actions (Alt)) then\n+               Prepend_List (Sinfo.Actions (Alt), Stats);\n+            end if;\n+\n             Append_To\n               (Alternatives (Cstmt),\n                Make_Case_Statement_Alternative (Sloc (Alt),\n                  Discrete_Choices => Discrete_Choices (Alt),\n-                 Statements       => New_List (\n-                   Make_Assignment_Statement (Aloc,\n-                     Name       => New_Occurrence_Of (Tnn, Loc),\n-                     Expression => Aexp))));\n+                 Statements       => Stats));\n          end;\n \n          Next (Alt);"}, {"sha": "6975f3ed3eab914f331ad39f75060732e69c9a86", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 47, "deletions": 32, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaed0c37779f8cf403921cda1f63d14c1f14a914/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaed0c37779f8cf403921cda1f63d14c1f14a914/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=eaed0c37779f8cf403921cda1f63d14c1f14a914", "patch": "@@ -41,7 +41,6 @@ with Exp_Disp; use Exp_Disp;\n with Exp_Tss;  use Exp_Tss;\n with Exp_Util; use Exp_Util;\n with Freeze;   use Freeze;\n-with Get_Targ; use Get_Targ;\n with Lib;      use Lib;\n with Nlists;   use Nlists;\n with Nmake;    use Nmake;\n@@ -1808,10 +1807,10 @@ package body Exp_Ch7 is\n                             (Available_View (Designated_Type (Obj_Typ)))\n                  and then Present (Expr)\n                  and then\n-                   (Is_Null_Access_BIP_Func_Call (Expr)\n-                     or else (Is_Non_BIP_Func_Call (Expr)\n-                               and then not\n-                                 Is_Related_To_Func_Return (Obj_Id)))\n+                     (Is_Null_Access_BIP_Func_Call (Expr)\n+                   or else\n+                     (Is_Non_BIP_Func_Call (Expr)\n+                        and then not Is_Related_To_Func_Return (Obj_Id)))\n                then\n                   Processing_Actions (Has_No_Init => True);\n \n@@ -7039,42 +7038,55 @@ package body Exp_Ch7 is\n       --\n       --    Typ'Alignment\n \n-      function Double_Alignment_Of (Typ : Entity_Id) return Node_Id;\n+      function Size_Of (Typ : Entity_Id) return Node_Id;\n+      --  Subsidiary routine, generate the following attribute reference:\n+      --\n+      --    Typ'Size / Storage_Unit\n+\n+      function Double_Size_Of (Typ : Entity_Id) return Node_Id;\n       --  Subsidiary routine, generate the following expression:\n       --\n-      --    2 * Typ'Alignment\n+      --    2 * Typ'Size / Storage_Unit\n \n       ------------------\n       -- Alignment_Of --\n       ------------------\n \n       function Alignment_Of (Typ : Entity_Id) return Node_Id is\n       begin\n-         --  Strict alignment targets such as SPARC ignore the alignment of the\n-         --  index type and use the system allocator alignment instead.\n+         return\n+           Make_Attribute_Reference (Loc,\n+             Prefix         => New_Reference_To (Typ, Loc),\n+             Attribute_Name => Name_Alignment);\n+      end Alignment_Of;\n \n-         if Target_Strict_Alignment then\n-            return Make_Integer_Literal (Loc, Get_System_Allocator_Alignment);\n+      -------------\n+      -- Size_Of --\n+      -------------\n \n-         else\n-            return\n-              Make_Attribute_Reference (Loc,\n-                Prefix         => New_Reference_To (Typ, Loc),\n-                Attribute_Name => Name_Alignment);\n-         end if;\n-      end Alignment_Of;\n+      function Size_Of (Typ : Entity_Id) return Node_Id is\n+      begin\n+         return\n+           Make_Op_Divide (Loc,\n+             Left_Opnd  =>\n+               Make_Attribute_Reference (Loc,\n+                 Prefix         => New_Reference_To (Typ, Loc),\n+                 Attribute_Name => Name_Size),\n+             Right_Opnd =>\n+               Make_Integer_Literal (Loc, System_Storage_Unit));\n+      end Size_Of;\n \n-      -------------------------\n-      -- Double_Alignment_Of --\n-      -------------------------\n+      --------------------\n+      -- Double_Size_Of --\n+      --------------------\n \n-      function Double_Alignment_Of (Typ : Entity_Id) return Node_Id is\n+      function Double_Size_Of (Typ : Entity_Id) return Node_Id is\n       begin\n          return\n            Make_Op_Multiply (Loc,\n              Left_Opnd  => Make_Integer_Literal (Loc, 2),\n-             Right_Opnd => Alignment_Of (Typ));\n-      end Double_Alignment_Of;\n+             Right_Opnd => Size_Of (Typ));\n+      end Double_Size_Of;\n \n    --  Start of processing for Make_Finalize_Address_Stmts\n \n@@ -7183,28 +7195,31 @@ package body Exp_Ch7 is\n                   For_First := False;\n \n                   --  Generate:\n-                  --    2 * Index_Typ'Alignment\n+                  --    2 * Index_Typ'Size / Storage_Unit\n \n-                  Dope_Expr := Double_Alignment_Of (Index_Typ);\n+                  Dope_Expr := Double_Size_Of (Index_Typ);\n \n                else\n                   --  Generate:\n-                  --    Dope_Expr + 2 * Index_Typ'Alignment\n+                  --    Dope_Expr + 2 * Index_Typ'Size / Storage_Unit\n \n                   Dope_Expr :=\n                     Make_Op_Add (Loc,\n                       Left_Opnd  => Dope_Expr,\n-                      Right_Opnd => Double_Alignment_Of (Index_Typ));\n+                      Right_Opnd => Double_Size_Of (Index_Typ));\n                end if;\n \n                Next_Index (Index);\n             end loop;\n \n-            --  Round the cumulative alignment to the next higher multiple of\n-            --  the array alignment. Generate:\n+            --  Dope_Expr calculates the optimum size of the dope, as if the\n+            --  dope was \"packed\". Since the alignment of the component type\n+            --  dictates the underlying layout of the array, round the size\n+            --  of the dope to the next higher multiple of the component\n+            --  alignment. Generate:\n \n-            --    ((Dope_Expr + Typ'Alignment - 1) / Typ'Alignment)\n-            --        * Typ'Alignment\n+            --    ((Dope_Expr + Typ'Alignment - 1) / Typ'Alignment) *\n+            --        Typ'Alignment\n \n             Dope_Expr :=\n               Make_Op_Multiply (Loc,"}]}