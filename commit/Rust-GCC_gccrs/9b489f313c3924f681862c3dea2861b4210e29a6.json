{"sha": "9b489f313c3924f681862c3dea2861b4210e29a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWI0ODlmMzEzYzM5MjRmNjgxODYyYzNkZWEyODYxYjQyMTBlMjlhNg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2014-12-02T07:45:36Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2014-12-02T07:45:36Z"}, "message": "sparc.c (sparc_atomic_assign_expand_fenv): Remove NULL last argument from create_tmp_var calls.\n\n\t* config/sparc/sparc.c (sparc_atomic_assign_expand_fenv):\n\tRemove NULL last argument from create_tmp_var calls.\n\t* config/mips/mips.c (mips_atomic_assign_expand_fenv): Likewise.\n\t* config/arm/arm-builtins.c (arm_atomic_assign_expand_fenv): Likewise.\n\t* config/i386/i386.c (add_condition_to_bb,\n\tix86_atomic_assign_expand_fenv): Likewise.\n\t* config/mep/mep.c (mep_gimplify_va_arg_expr): Likewise.\n\t* config/xtensa/xtensa.c (xtensa_gimplify_va_arg_expr): Likewise.\n\t* config/aarch64/aarch64-builtins.c\n\t(aarch64_atomic_assign_expand_fenv): Likewise.\n\t* config/stormy16/stormy16.c (xstormy16_gimplify_va_arg_expr):\n\tLikewise.\n\t* config/rs6000/rs6000.c (rs6000_atomic_assign_expand_fenv): Likewise.\n\t* config/alpha/alpha.c (alpha_atomic_assign_expand_fenv): Likewise.\n\t* config/sh/sh.c (sh_gimplify_va_arg_expr): Likewise.\n\nFrom-SVN: r218257", "tree": {"sha": "ffeb529104d6c810f3671a10cc8f7642382b2020", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ffeb529104d6c810f3671a10cc8f7642382b2020"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b489f313c3924f681862c3dea2861b4210e29a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b489f313c3924f681862c3dea2861b4210e29a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b489f313c3924f681862c3dea2861b4210e29a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b489f313c3924f681862c3dea2861b4210e29a6/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0d3d81525dd293e19166820d2a8f5f00a939f906", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d3d81525dd293e19166820d2a8f5f00a939f906", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d3d81525dd293e19166820d2a8f5f00a939f906"}], "stats": {"total": 74, "additions": 45, "deletions": 29}, "files": [{"sha": "8924c7aa95eed25b9cc9403ff5735209f5446e64", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b489f313c3924f681862c3dea2861b4210e29a6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b489f313c3924f681862c3dea2861b4210e29a6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9b489f313c3924f681862c3dea2861b4210e29a6", "patch": "@@ -1,5 +1,21 @@\n 2014-12-02  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* config/sparc/sparc.c (sparc_atomic_assign_expand_fenv):\n+\tRemove NULL last argument from create_tmp_var calls.\n+\t* config/mips/mips.c (mips_atomic_assign_expand_fenv): Likewise.\n+\t* config/arm/arm-builtins.c (arm_atomic_assign_expand_fenv): Likewise.\n+\t* config/i386/i386.c (add_condition_to_bb,\n+\tix86_atomic_assign_expand_fenv): Likewise.\n+\t* config/mep/mep.c (mep_gimplify_va_arg_expr): Likewise.\n+\t* config/xtensa/xtensa.c (xtensa_gimplify_va_arg_expr): Likewise.\n+\t* config/aarch64/aarch64-builtins.c\n+\t(aarch64_atomic_assign_expand_fenv): Likewise.\n+\t* config/stormy16/stormy16.c (xstormy16_gimplify_va_arg_expr):\n+\tLikewise.\n+\t* config/rs6000/rs6000.c (rs6000_atomic_assign_expand_fenv): Likewise.\n+\t* config/alpha/alpha.c (alpha_atomic_assign_expand_fenv): Likewise.\n+\t* config/sh/sh.c (sh_gimplify_va_arg_expr): Likewise.\n+\n \t* config/alpha/alpha.c (alpha_gimple_fold_builtin): Use\n \tgimple_build_assign instead of gimple_build_assign_with_ops and swap\n \tthe order of first two arguments."}, {"sha": "aac7269337c46a9af5dffaeeed85f3b812c9c9fb", "filename": "gcc/config/aarch64/aarch64-builtins.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b489f313c3924f681862c3dea2861b4210e29a6/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b489f313c3924f681862c3dea2861b4210e29a6/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c?ref=9b489f313c3924f681862c3dea2861b4210e29a6", "patch": "@@ -1391,8 +1391,8 @@ aarch64_atomic_assign_expand_fenv (tree *hold, tree *clear, tree *update)\n        __builtin_aarch64_set_cr (masked_cr);\n        __builtin_aarch64_set_sr (masked_sr);  */\n \n-  fenv_cr = create_tmp_var (unsigned_type_node, NULL);\n-  fenv_sr = create_tmp_var (unsigned_type_node, NULL);\n+  fenv_cr = create_tmp_var (unsigned_type_node);\n+  fenv_sr = create_tmp_var (unsigned_type_node);\n \n   get_fpcr = aarch64_builtin_decls[AARCH64_BUILTIN_GET_FPCR];\n   set_fpcr = aarch64_builtin_decls[AARCH64_BUILTIN_SET_FPCR];\n@@ -1438,7 +1438,7 @@ aarch64_atomic_assign_expand_fenv (tree *hold, tree *clear, tree *update)\n \n        __atomic_feraiseexcept (new_fenv_var);  */\n \n-  new_fenv_var = create_tmp_var (unsigned_type_node, NULL);\n+  new_fenv_var = create_tmp_var (unsigned_type_node);\n   reload_fenv = build2 (MODIFY_EXPR, unsigned_type_node,\n \t\t\tnew_fenv_var, build_call_expr (get_fpsr, 0));\n   restore_fnenv = build_call_expr (set_fpsr, 1, fenv_sr);"}, {"sha": "afcede9c736aabf233ce5ecaae04062f8571e78b", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b489f313c3924f681862c3dea2861b4210e29a6/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b489f313c3924f681862c3dea2861b4210e29a6/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=9b489f313c3924f681862c3dea2861b4210e29a6", "patch": "@@ -9885,7 +9885,7 @@ alpha_atomic_assign_expand_fenv (tree *hold, tree *clear, tree *update)\n \n        __ieee_set_fp_control (masked_fenv);  */\n \n-  fenv_var = create_tmp_var (long_unsigned_type_node, NULL);\n+  fenv_var = create_tmp_var (long_unsigned_type_node);\n   get_fpscr\n     = build_fn_decl (\"__ieee_get_fp_control\",\n \t\t     build_function_type_list (long_unsigned_type_node, NULL));\n@@ -9914,7 +9914,7 @@ alpha_atomic_assign_expand_fenv (tree *hold, tree *clear, tree *update)\n \n        __atomic_feraiseexcept (new_fenv_var);  */\n \n-  new_fenv_var = create_tmp_var (long_unsigned_type_node, NULL);\n+  new_fenv_var = create_tmp_var (long_unsigned_type_node);\n   reload_fenv = build2 (MODIFY_EXPR, long_unsigned_type_node, new_fenv_var,\n \t\t\tbuild_call_expr (get_fpscr, 0));\n   restore_fnenv = build_call_expr (set_fpscr, 1, fenv_var);"}, {"sha": "62eb9f7332aa33d2402ce75c3f4ab519053c106a", "filename": "gcc/config/arm/arm-builtins.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b489f313c3924f681862c3dea2861b4210e29a6/gcc%2Fconfig%2Farm%2Farm-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b489f313c3924f681862c3dea2861b4210e29a6/gcc%2Fconfig%2Farm%2Farm-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-builtins.c?ref=9b489f313c3924f681862c3dea2861b4210e29a6", "patch": "@@ -2883,7 +2883,7 @@ arm_atomic_assign_expand_fenv (tree *hold, tree *clear, tree *update)\n \n        __builtin_arm_set_fpscr (masked_fenv);  */\n \n-  fenv_var = create_tmp_var (unsigned_type_node, NULL);\n+  fenv_var = create_tmp_var (unsigned_type_node);\n   get_fpscr = arm_builtin_decls[ARM_BUILTIN_GET_FPSCR];\n   set_fpscr = arm_builtin_decls[ARM_BUILTIN_SET_FPSCR];\n   mask = build_int_cst (unsigned_type_node,\n@@ -2910,7 +2910,7 @@ arm_atomic_assign_expand_fenv (tree *hold, tree *clear, tree *update)\n \n        __atomic_feraiseexcept (new_fenv_var);  */\n \n-  new_fenv_var = create_tmp_var (unsigned_type_node, NULL);\n+  new_fenv_var = create_tmp_var (unsigned_type_node);\n   reload_fenv = build2 (MODIFY_EXPR, unsigned_type_node, new_fenv_var,\n \t\t\tbuild_call_expr (get_fpscr, 0));\n   restore_fnenv = build_call_expr (set_fpscr, 1, fenv_var);"}, {"sha": "3397167179078f1d7f5c0de373bfa0f11741691a", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b489f313c3924f681862c3dea2861b4210e29a6/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b489f313c3924f681862c3dea2861b4210e29a6/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=9b489f313c3924f681862c3dea2861b4210e29a6", "patch": "@@ -34111,7 +34111,7 @@ add_condition_to_bb (tree function_decl, tree version_decl,\n \n   convert_expr = build1 (CONVERT_EXPR, ptr_type_node,\n \t     \t\t build_fold_addr_expr (version_decl));\n-  result_var = create_tmp_var (ptr_type_node, NULL);\n+  result_var = create_tmp_var (ptr_type_node);\n   convert_stmt = gimple_build_assign (result_var, convert_expr); \n   return_stmt = gimple_build_return (result_var);\n \n@@ -34128,7 +34128,7 @@ add_condition_to_bb (tree function_decl, tree version_decl,\n \n   while (predicate_chain != NULL)\n     {\n-      cond_var = create_tmp_var (integer_type_node, NULL);\n+      cond_var = create_tmp_var (integer_type_node);\n       predicate_decl = TREE_PURPOSE (predicate_chain);\n       predicate_arg = TREE_VALUE (predicate_chain);\n       call_cond_stmt = gimple_build_call (predicate_decl, 1, predicate_arg);\n@@ -51337,12 +51337,12 @@ ix86_atomic_assign_expand_fenv (tree *hold, tree *clear, tree *update)\n {\n   if (!TARGET_80387 && !TARGET_SSE_MATH)\n     return;\n-  tree exceptions_var = create_tmp_var (integer_type_node, NULL);\n+  tree exceptions_var = create_tmp_var (integer_type_node);\n   if (TARGET_80387)\n     {\n       tree fenv_index_type = build_index_type (size_int (6));\n       tree fenv_type = build_array_type (unsigned_type_node, fenv_index_type);\n-      tree fenv_var = create_tmp_var (fenv_type, NULL);\n+      tree fenv_var = create_tmp_var (fenv_type);\n       mark_addressable (fenv_var);\n       tree fenv_ptr = build_pointer_type (fenv_type);\n       tree fenv_addr = build1 (ADDR_EXPR, fenv_ptr, fenv_var);\n@@ -51356,7 +51356,7 @@ ix86_atomic_assign_expand_fenv (tree *hold, tree *clear, tree *update)\n       *hold = build2 (COMPOUND_EXPR, void_type_node, hold_fnstenv,\n \t\t      hold_fnclex);\n       *clear = build_call_expr (fnclex, 0);\n-      tree sw_var = create_tmp_var (short_unsigned_type_node, NULL);\n+      tree sw_var = create_tmp_var (short_unsigned_type_node);\n       tree fnstsw_call = build_call_expr (fnstsw, 0);\n       tree sw_mod = build2 (MODIFY_EXPR, short_unsigned_type_node,\n \t\t\t    sw_var, fnstsw_call);\n@@ -51370,8 +51370,8 @@ ix86_atomic_assign_expand_fenv (tree *hold, tree *clear, tree *update)\n     }\n   if (TARGET_SSE_MATH)\n     {\n-      tree mxcsr_orig_var = create_tmp_var (unsigned_type_node, NULL);\n-      tree mxcsr_mod_var = create_tmp_var (unsigned_type_node, NULL);\n+      tree mxcsr_orig_var = create_tmp_var (unsigned_type_node);\n+      tree mxcsr_mod_var = create_tmp_var (unsigned_type_node);\n       tree stmxcsr = ix86_builtins[IX86_BUILTIN_STMXCSR];\n       tree ldmxcsr = ix86_builtins[IX86_BUILTIN_LDMXCSR];\n       tree stmxcsr_hold_call = build_call_expr (stmxcsr, 0);"}, {"sha": "7244db410d3def79953f607b8e02c2b575742d73", "filename": "gcc/config/mep/mep.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b489f313c3924f681862c3dea2861b4210e29a6/gcc%2Fconfig%2Fmep%2Fmep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b489f313c3924f681862c3dea2861b4210e29a6/gcc%2Fconfig%2Fmep%2Fmep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmep%2Fmep.c?ref=9b489f313c3924f681862c3dea2861b4210e29a6", "patch": "@@ -3597,7 +3597,7 @@ mep_gimplify_va_arg_expr (tree valist, tree type,\n \n   label_sover = create_artificial_label (UNKNOWN_LOCATION);\n   label_selse = create_artificial_label (UNKNOWN_LOCATION);\n-  res_addr = create_tmp_var (ptr_type_node, NULL);\n+  res_addr = create_tmp_var (ptr_type_node);\n \n   tmp = build2 (GE_EXPR, boolean_type_node, next_gp,\n \t\tunshare_expr (next_gp_limit));"}, {"sha": "1aea23e66e551c43be61297ce0043d8bbe3ef3bc", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b489f313c3924f681862c3dea2861b4210e29a6/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b489f313c3924f681862c3dea2861b4210e29a6/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=9b489f313c3924f681862c3dea2861b4210e29a6", "patch": "@@ -19051,9 +19051,9 @@ mips_atomic_assign_expand_fenv (tree *hold, tree *clear, tree *update)\n {\n   if (!TARGET_HARD_FLOAT_ABI)\n     return;\n-  tree exceptions_var = create_tmp_var (MIPS_ATYPE_USI, NULL);\n-  tree fcsr_orig_var = create_tmp_var (MIPS_ATYPE_USI, NULL);\n-  tree fcsr_mod_var = create_tmp_var (MIPS_ATYPE_USI, NULL);\n+  tree exceptions_var = create_tmp_var (MIPS_ATYPE_USI);\n+  tree fcsr_orig_var = create_tmp_var (MIPS_ATYPE_USI);\n+  tree fcsr_mod_var = create_tmp_var (MIPS_ATYPE_USI);\n   tree get_fcsr = mips_builtin_decls[MIPS_GET_FCSR];\n   tree set_fcsr = mips_builtin_decls[MIPS_SET_FCSR];\n   tree get_fcsr_hold_call = build_call_expr (get_fcsr, 0);"}, {"sha": "6811ed4dcfa4eee5e9c9fe86406434e82edfa765", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b489f313c3924f681862c3dea2861b4210e29a6/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b489f313c3924f681862c3dea2861b4210e29a6/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=9b489f313c3924f681862c3dea2861b4210e29a6", "patch": "@@ -34914,7 +34914,7 @@ rs6000_atomic_assign_expand_fenv (tree *hold, tree *clear, tree *update)\n \t  DECL_EXTERNAL (atomic_update_decl) = 1;\n \t}\n \n-      tree fenv_var = create_tmp_var (double_type_node, NULL);\n+      tree fenv_var = create_tmp_var (double_type_node);\n       mark_addressable (fenv_var);\n       tree fenv_addr = build1 (ADDR_EXPR, double_ptr_type_node, fenv_var);\n \n@@ -34942,7 +34942,7 @@ rs6000_atomic_assign_expand_fenv (tree *hold, tree *clear, tree *update)\n   const unsigned HOST_WIDE_INT hold_exception_mask =\n     HOST_WIDE_INT_C (0xffffffff00000007);\n \n-  tree fenv_var = create_tmp_var (double_type_node, NULL);\n+  tree fenv_var = create_tmp_var (double_type_node);\n \n   tree hold_mffs = build2 (MODIFY_EXPR, void_type_node, fenv_var, call_mffs);\n \n@@ -34971,7 +34971,7 @@ rs6000_atomic_assign_expand_fenv (tree *hold, tree *clear, tree *update)\n   const unsigned HOST_WIDE_INT clear_exception_mask =\n     HOST_WIDE_INT_C (0xffffffff00000000);\n \n-  tree fenv_clear = create_tmp_var (double_type_node, NULL);\n+  tree fenv_clear = create_tmp_var (double_type_node);\n \n   tree clear_mffs = build2 (MODIFY_EXPR, void_type_node, fenv_clear, call_mffs);\n \n@@ -35003,7 +35003,7 @@ rs6000_atomic_assign_expand_fenv (tree *hold, tree *clear, tree *update)\n   const unsigned HOST_WIDE_INT new_exception_mask =\n     HOST_WIDE_INT_C (0x1ff80fff);\n \n-  tree old_fenv = create_tmp_var (double_type_node, NULL);\n+  tree old_fenv = create_tmp_var (double_type_node);\n   tree update_mffs = build2 (MODIFY_EXPR, void_type_node, old_fenv, call_mffs);\n \n   tree old_llu = build1 (VIEW_CONVERT_EXPR, uint64_type_node, old_fenv);"}, {"sha": "b89d0481fac157e48ee2cd32c861bf4b3d8eab3c", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b489f313c3924f681862c3dea2861b4210e29a6/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b489f313c3924f681862c3dea2861b4210e29a6/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=9b489f313c3924f681862c3dea2861b4210e29a6", "patch": "@@ -8629,15 +8629,15 @@ sh_gimplify_va_arg_expr (tree valist, tree type, gimple_seq *pre_p,\n \t  pass_as_float = (TREE_CODE (eff_type) == REAL_TYPE && size == 4);\n \t}\n \n-      addr = create_tmp_var (pptr_type_node, NULL);\n+      addr = create_tmp_var (pptr_type_node);\n       lab_false = create_artificial_label (UNKNOWN_LOCATION);\n       lab_over = create_artificial_label (UNKNOWN_LOCATION);\n \n       valist = build_simple_mem_ref (addr);\n \n       if (pass_as_float)\n \t{\n-\t  tree next_fp_tmp = create_tmp_var (TREE_TYPE (f_next_fp), NULL);\n+\t  tree next_fp_tmp = create_tmp_var (TREE_TYPE (f_next_fp));\n \t  tree cmp;\n \t  bool is_double = size == 8 && TREE_CODE (eff_type) == REAL_TYPE;\n "}, {"sha": "1d0d45ad16c73ef76684e01e024a383e88bbafa3", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b489f313c3924f681862c3dea2861b4210e29a6/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b489f313c3924f681862c3dea2861b4210e29a6/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=9b489f313c3924f681862c3dea2861b4210e29a6", "patch": "@@ -12608,13 +12608,13 @@ sparc_atomic_assign_expand_fenv (tree *hold, tree *clear, tree *update)\n \n        __builtin_load_fsr (&tmp1_var);  */\n \n-  tree fenv_var = create_tmp_var (unsigned_type_node, NULL);\n+  tree fenv_var = create_tmp_var (unsigned_type_node);\n   mark_addressable (fenv_var);\n   tree fenv_addr = build_fold_addr_expr (fenv_var);\n   tree stfsr = sparc_builtins[SPARC_BUILTIN_STFSR];\n   tree hold_stfsr = build_call_expr (stfsr, 1, fenv_addr);\n \n-  tree tmp1_var = create_tmp_var (unsigned_type_node, NULL);\n+  tree tmp1_var = create_tmp_var (unsigned_type_node);\n   mark_addressable (tmp1_var);\n   tree masked_fenv_var\n     = build2 (BIT_AND_EXPR, unsigned_type_node, fenv_var,\n@@ -12646,7 +12646,7 @@ sparc_atomic_assign_expand_fenv (tree *hold, tree *clear, tree *update)\n          tmp2_var >>= 5;\n        __atomic_feraiseexcept ((int) tmp2_var);  */\n \n-  tree tmp2_var = create_tmp_var (unsigned_type_node, NULL);\n+  tree tmp2_var = create_tmp_var (unsigned_type_node);\n   mark_addressable (tmp2_var);\n   tree tmp3_addr = build_fold_addr_expr (tmp2_var);\n   tree update_stfsr = build_call_expr (stfsr, 1, tmp3_addr);"}, {"sha": "0b1548789fe002d461155003fee589d21f6dd524", "filename": "gcc/config/stormy16/stormy16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b489f313c3924f681862c3dea2861b4210e29a6/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b489f313c3924f681862c3dea2861b4210e29a6/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.c?ref=9b489f313c3924f681862c3dea2861b4210e29a6", "patch": "@@ -1373,7 +1373,7 @@ xstormy16_gimplify_va_arg_expr (tree valist, tree type, gimple_seq *pre_p,\n   count_tmp = get_initialized_tmp_var (count, pre_p, NULL);\n   lab_gotaddr = create_artificial_label (UNKNOWN_LOCATION);\n   lab_fromstack = create_artificial_label (UNKNOWN_LOCATION);\n-  addr = create_tmp_var (ptr_type_node, NULL);\n+  addr = create_tmp_var (ptr_type_node);\n \n   if (!must_stack)\n     {"}, {"sha": "9cc767590ec6bf8d827cf42ea04da8ea7c64b9f1", "filename": "gcc/config/xtensa/xtensa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b489f313c3924f681862c3dea2861b4210e29a6/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b489f313c3924f681862c3dea2861b4210e29a6/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.c?ref=9b489f313c3924f681862c3dea2861b4210e29a6", "patch": "@@ -3014,7 +3014,7 @@ xtensa_gimplify_va_arg_expr (tree valist, tree type, gimple_seq *pre_p,\n          && !must_pass_in_stack (type))\n         __array = (AP).__va_reg; */\n \n-  array = create_tmp_var (ptr_type_node, NULL);\n+  array = create_tmp_var (ptr_type_node);\n \n   lab_over = NULL;\n   if (!targetm.calls.must_pass_in_stack (TYPE_MODE (type), type))"}]}