{"sha": "9b6c65c754f2b2a78f5353219ec62817064e0d24", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWI2YzY1Yzc1NGYyYjJhNzhmNTM1MzIxOWVjNjI4MTcwNjRlMGQyNA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-06-25T17:31:23Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-06-25T17:47:23Z"}, "message": "libstdc++: Fix exception handling in std::ostream seek functions\n\nN3168 added the requirement that the [ostream.seeks] functions create a\nsentry object. Nothing in the requirements of those functions says\nanything about catching exceptions and setting badbit.\n\nAs well as not catching exceptions, this change results in another\nobservable behaviour change. Previously seeking on a stream with eofbit\nset would work (as long as badbit and failbit weren't set). The\nconstruction of a sentry causes failbit to be set when eofbit is set,\nwhich causes the seek to fail. It is necessary to clear the eofbit\nbefore seeking now.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/ostream.tcc (sentry): Only set failbit if badbit\n\tis set, not if eofbit is set.\n\t(tellp, seekp, seekp): Create sentry object. Do not set badbit\n\ton exceptions.\n\t* testsuite/27_io/basic_ostream/seekp/char/exceptions_badbit_throw.cc:\n\tAdjust expected behaviour.\n\t* testsuite/27_io/basic_ostream/seekp/wchar_t/exceptions_badbit_throw.cc:\n\tLikewise.\n\t* testsuite/27_io/basic_ostream/tellp/char/exceptions_badbit_throw.cc:\n\tLikewise.\n\t* testsuite/27_io/basic_ostream/tellp/wchar_t/exceptions_badbit_throw.cc:\n\tLikewise.\n\t* testsuite/27_io/basic_ostream/seekp/char/n3168.cc: New test.\n\t* testsuite/27_io/basic_ostream/seekp/wchar_t/n3168.cc: New test.\n\t* testsuite/27_io/basic_ostream/tellp/char/n3168.cc: New test.\n\t* testsuite/27_io/basic_ostream/tellp/wchar_t/n3168.cc: New test.", "tree": {"sha": "761a79c58e3521507d40240ff27043fe1db56718", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/761a79c58e3521507d40240ff27043fe1db56718"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b6c65c754f2b2a78f5353219ec62817064e0d24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b6c65c754f2b2a78f5353219ec62817064e0d24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b6c65c754f2b2a78f5353219ec62817064e0d24", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b6c65c754f2b2a78f5353219ec62817064e0d24/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ab7fa1b51cb7227e051842bcb971b95c962327a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ab7fa1b51cb7227e051842bcb971b95c962327a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ab7fa1b51cb7227e051842bcb971b95c962327a"}], "stats": {"total": 470, "additions": 372, "deletions": 98}, "files": [{"sha": "20585f447ac27d42e140b101564b0a797059ed0d", "filename": "libstdc++-v3/include/bits/ostream.tcc", "status": "modified", "additions": 21, "deletions": 55, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b6c65c754f2b2a78f5353219ec62817064e0d24/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b6c65c754f2b2a78f5353219ec62817064e0d24/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc?ref=9b6c65c754f2b2a78f5353219ec62817064e0d24", "patch": "@@ -53,7 +53,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       if (__os.good())\n \t_M_ok = true;\n-      else\n+      else if (__os.bad())\n \t__os.setstate(ios_base::failbit);\n     }\n \n@@ -236,19 +236,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     basic_ostream<_CharT, _Traits>::\n     tellp()\n     {\n+      sentry __cerb(*this);\n       pos_type __ret = pos_type(-1);\n-      __try\n-\t{\n-\t  if (!this->fail())\n-\t    __ret = this->rdbuf()->pubseekoff(0, ios_base::cur, ios_base::out);\n-\t}\n-      __catch(__cxxabiv1::__forced_unwind&)\n-\t{\n-\t  this->_M_setstate(ios_base::badbit);\t\t\n-\t  __throw_exception_again;\n-\t}\n-      __catch(...)\n-\t{ this->_M_setstate(ios_base::badbit); }\n+      if (!this->fail())\n+\t__ret = this->rdbuf()->pubseekoff(0, ios_base::cur, ios_base::out);\n       return __ret;\n     }\n \n@@ -257,30 +248,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     basic_ostream<_CharT, _Traits>::\n     seekp(pos_type __pos)\n     {\n-      ios_base::iostate __err = ios_base::goodbit;\n-      __try\n+      sentry __cerb(*this);\n+      if (!this->fail())\n \t{\n-\t  if (!this->fail())\n-\t    {\n-\t      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n-\t      // 136.  seekp, seekg setting wrong streams?\n-\t      const pos_type __p = this->rdbuf()->pubseekpos(__pos,\n-\t\t\t\t\t\t\t     ios_base::out);\n+\t  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t  // 136.  seekp, seekg setting wrong streams?\n+\t  const pos_type __p = this->rdbuf()->pubseekpos(__pos, ios_base::out);\n \n-\t      // 129. Need error indication from seekp() and seekg()\n-\t      if (__p == pos_type(off_type(-1)))\n-\t\t__err |= ios_base::failbit;\n-\t    }\n-\t}\n-      __catch(__cxxabiv1::__forced_unwind&)\n-\t{\n-\t  this->_M_setstate(ios_base::badbit);\t\t\n-\t  __throw_exception_again;\n+\t  // 129. Need error indication from seekp() and seekg()\n+\t  if (__p == pos_type(off_type(-1)))\n+\t    this->setstate(ios_base::failbit);\n \t}\n-      __catch(...)\n-\t{ this->_M_setstate(ios_base::badbit); }\n-      if (__err)\n-\tthis->setstate(__err);\n       return *this;\n     }\n \n@@ -289,30 +267,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     basic_ostream<_CharT, _Traits>::\n     seekp(off_type __off, ios_base::seekdir __dir)\n     {\n-      ios_base::iostate __err = ios_base::goodbit;\n-      __try\n+      sentry __cerb(*this);\n+      if (!this->fail())\n \t{\n-\t  if (!this->fail())\n-\t    {\n-\t      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n-\t      // 136.  seekp, seekg setting wrong streams?\n-\t      const pos_type __p = this->rdbuf()->pubseekoff(__off, __dir,\n-\t\t\t\t\t\t\t     ios_base::out);\n+\t  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t  // 136.  seekp, seekg setting wrong streams?\n+\t  const pos_type __p = this->rdbuf()->pubseekoff(__off, __dir,\n+\t\t\t\t\t\t\t ios_base::out);\n \n-\t      // 129. Need error indication from seekp() and seekg()\n-\t      if (__p == pos_type(off_type(-1)))\n-\t\t__err |= ios_base::failbit;\n-\t    }\n+\t  // 129. Need error indication from seekp() and seekg()\n+\t  if (__p == pos_type(off_type(-1)))\n+\t    this->setstate(ios_base::failbit);\n \t}\n-      __catch(__cxxabiv1::__forced_unwind&)\n-\t{\n-\t  this->_M_setstate(ios_base::badbit);\t\t\n-\t  __throw_exception_again;\n-\t}\n-      __catch(...)\n-\t{ this->_M_setstate(ios_base::badbit); }\n-      if (__err)\n-\tthis->setstate(__err);\n       return *this;\n     }\n "}, {"sha": "bc59578bfa10b594d4cad317e1423ecf5502cb9a", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/seekp/char/exceptions_badbit_throw.cc", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b6c65c754f2b2a78f5353219ec62817064e0d24/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fseekp%2Fchar%2Fexceptions_badbit_throw.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b6c65c754f2b2a78f5353219ec62817064e0d24/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fseekp%2Fchar%2Fexceptions_badbit_throw.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fseekp%2Fchar%2Fexceptions_badbit_throw.cc?ref=9b6c65c754f2b2a78f5353219ec62817064e0d24", "patch": "@@ -28,7 +28,6 @@ void test01()\n \n   __gnu_test::fail_streambuf bib;\n   ostream stream(&bib);\n-  stream.exceptions(ios_base::badbit);\n \n   ostream::pos_type pos = ostream::pos_type();\n \n@@ -37,14 +36,11 @@ void test01()\n       stream.seekp(pos);\n       VERIFY( false );\n     }\n-  catch (const __gnu_test::positioning_error&) \n+  catch (const __gnu_test::positioning_error&)\n     {\n-      // stream should set badbit and rethrow facet_error.\n-      VERIFY( stream.bad() );\n-      VERIFY( (stream.rdstate() & ios_base::failbit) == 0 );\n-      VERIFY( !stream.eof() );\n+      VERIFY( stream.good() );\n     }\n-  catch (...) \n+  catch (...)\n     {\n       VERIFY( false );\n     }\n@@ -56,7 +52,6 @@ void test02()\n \n   __gnu_test::fail_streambuf bib;\n   ostream stream(&bib);\n-  stream.exceptions(ios_base::badbit);\n \n   ostream::off_type off(5);\n \n@@ -65,14 +60,11 @@ void test02()\n       stream.seekp(off, ios_base::cur);\n       VERIFY( false );\n     }\n-  catch (const __gnu_test::positioning_error&) \n+  catch (const __gnu_test::positioning_error&)\n     {\n-      // stream should set badbit and rethrow facet_error.\n-      VERIFY( stream.bad() );\n-      VERIFY( (stream.rdstate() & ios_base::failbit) == 0 );\n-      VERIFY( !stream.eof() );\n+      VERIFY( stream.good() );\n     }\n-  catch (...) \n+  catch (...)\n     {\n       VERIFY( false );\n     }"}, {"sha": "12da0b1f011aca5baeab887c16f4489ce5e6e2bb", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/seekp/char/n3168.cc", "status": "added", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b6c65c754f2b2a78f5353219ec62817064e0d24/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fseekp%2Fchar%2Fn3168.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b6c65c754f2b2a78f5353219ec62817064e0d24/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fseekp%2Fchar%2Fn3168.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fseekp%2Fchar%2Fn3168.cc?ref=9b6c65c754f2b2a78f5353219ec62817064e0d24", "patch": "@@ -0,0 +1,103 @@\n+#include <ostream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+// C++11 27.7.3.5 basic_ostream seek members [ostream.seeks]\n+\n+// Verify [ostream.seeks] functions use a sentry, as per N3168.\n+\n+void\n+test01()\n+{\n+  // Check that the sentry sets failbit when seeking on a bad stream.\n+  // The standard doesn't guarantee this, but it is true for libstdc++.\n+\n+  std::ostream os(0);\n+  VERIFY( os.rdstate() == std::ios_base::badbit );\n+\n+  std::ostream::pos_type pos = std::ostream::pos_type();\n+  os.seekp(pos);\n+  VERIFY( os.rdstate() & std::ios_base::failbit );\n+\n+  os.clear();\n+  std::ostream::off_type off(5);\n+  os.seekp(off, std::ios_base::cur);\n+  VERIFY( os.rdstate() & std::ios_base::failbit );\n+\n+  os.clear();\n+  os.exceptions(std::ios_base::failbit);\n+\n+  try\n+  {\n+    os.clear();\n+    os.seekp(pos);\n+    VERIFY( false );\n+  }\n+  catch (const std::ios_base::failure&)\n+  {\n+    VERIFY( os.rdstate() & std::ios_base::failbit );\n+  }\n+  catch (...)\n+  {\n+    VERIFY( false );\n+  }\n+\n+  try\n+  {\n+    os.clear();\n+    os.seekp(off, std::ios_base::cur);\n+    VERIFY( false );\n+  }\n+  catch (const std::ios_base::failure&)\n+  {\n+    VERIFY( os.rdstate() & std::ios_base::failbit );\n+  }\n+  catch (...)\n+  {\n+    VERIFY( false );\n+  }\n+}\n+\n+void\n+test02()\n+{\n+  // Check that the sentry flushes a tied stream when seeking.\n+\n+  {\n+    __gnu_test::sync_streambuf buf;\n+    std::ostream os(&buf);\n+\n+    __gnu_test::sync_streambuf buf_tie;\n+    std::ostream os_tie(&buf_tie);\n+\n+    os.tie(&os_tie);\n+\n+    std::ostream::pos_type pos = std::ostream::pos_type();\n+    os.seekp(pos);\n+\n+    VERIFY( ! buf.sync_called() );\n+    VERIFY( buf_tie.sync_called() );\n+  }\n+\n+  {\n+    __gnu_test::sync_streambuf buf;\n+    std::ostream os(&buf);\n+\n+    __gnu_test::sync_streambuf buf_tie;\n+    std::ostream os_tie(&buf_tie);\n+\n+    os.tie(&os_tie);\n+\n+    std::ostream::off_type off(0);\n+    os.seekp(off, std::ios_base::cur);\n+\n+    VERIFY( ! buf.sync_called() );\n+    VERIFY( buf_tie.sync_called() );\n+  }\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+}"}, {"sha": "2daa959532d9c6c8bb51b7bd004a4e662331ff74", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/seekp/wchar_t/exceptions_badbit_throw.cc", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b6c65c754f2b2a78f5353219ec62817064e0d24/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fseekp%2Fwchar_t%2Fexceptions_badbit_throw.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b6c65c754f2b2a78f5353219ec62817064e0d24/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fseekp%2Fwchar_t%2Fexceptions_badbit_throw.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fseekp%2Fwchar_t%2Fexceptions_badbit_throw.cc?ref=9b6c65c754f2b2a78f5353219ec62817064e0d24", "patch": "@@ -28,7 +28,6 @@ void test01()\n \n   __gnu_test::fail_wstreambuf bib;\n   wostream stream(&bib);\n-  stream.exceptions(ios_base::badbit);\n \n   wostream::pos_type pos = wostream::pos_type();\n \n@@ -37,14 +36,11 @@ void test01()\n       stream.seekp(pos);\n       VERIFY( false );\n     }\n-  catch (const __gnu_test::positioning_error&) \n+  catch (const __gnu_test::positioning_error&)\n     {\n-      // stream should set badbit and rethrow facet_error.\n-      VERIFY( stream.bad() );\n-      VERIFY( (stream.rdstate() & ios_base::failbit) == 0 );\n-      VERIFY( !stream.eof() );\n+      VERIFY( stream.good() );\n     }\n-  catch (...) \n+  catch (...)\n     {\n       VERIFY( false );\n     }\n@@ -53,10 +49,9 @@ void test01()\n void test02()\n {\n   using namespace std;\n- \n+\n   __gnu_test::fail_wstreambuf bib;\n   wostream stream(&bib);\n-  stream.exceptions(ios_base::badbit);\n \n   wostream::off_type off(5);\n \n@@ -65,14 +60,11 @@ void test02()\n       stream.seekp(off, ios_base::cur);\n       VERIFY( false );\n     }\n-  catch (const __gnu_test::positioning_error&) \n+  catch (const __gnu_test::positioning_error&)\n     {\n-      // stream should set badbit and rethrow facet_error.\n-      VERIFY( stream.bad() );\n-      VERIFY( (stream.rdstate() & ios_base::failbit) == 0 );\n-      VERIFY( !stream.eof() );\n+      VERIFY( stream.good() );\n     }\n-  catch (...) \n+  catch (...)\n     {\n       VERIFY( false );\n     }"}, {"sha": "652f46f615ce6217c27eec6bfe32be9214a9de66", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/seekp/wchar_t/n3168.cc", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b6c65c754f2b2a78f5353219ec62817064e0d24/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fseekp%2Fwchar_t%2Fn3168.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b6c65c754f2b2a78f5353219ec62817064e0d24/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fseekp%2Fwchar_t%2Fn3168.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fseekp%2Fwchar_t%2Fn3168.cc?ref=9b6c65c754f2b2a78f5353219ec62817064e0d24", "patch": "@@ -0,0 +1,101 @@\n+#include <ostream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+// C++11 27.7.3.5 basic_ostream seek members [ostream.seeks]\n+\n+// Verify [ostream.seeks] functions use a sentry, as per N3168.\n+\n+void\n+test01()\n+{\n+  // Check that the sentry sets failbit when seeking on a bad stream.\n+  // The standard doesn't guarantee this, but it is true for libstdc++.\n+\n+  std::wostream os(0);\n+  VERIFY( os.rdstate() == std::ios_base::badbit );\n+\n+  std::wostream::pos_type pos = std::wostream::pos_type();\n+  os.seekp(pos);\n+  VERIFY( os.rdstate() & std::ios_base::failbit );\n+\n+  os.clear();\n+  std::wostream::off_type off(5);\n+  os.seekp(off, std::ios_base::cur);\n+  VERIFY( os.rdstate() & std::ios_base::failbit );\n+\n+  os.clear();\n+  os.exceptions(std::ios_base::failbit);\n+\n+  try\n+  {\n+    os.clear();\n+    os.seekp(pos);\n+    VERIFY( false );\n+  }\n+  catch (const std::ios_base::failure&)\n+  {\n+    VERIFY( os.rdstate() & std::ios_base::failbit );\n+  }\n+  catch (...)\n+  {\n+    VERIFY( false );\n+  }\n+\n+  try\n+  {\n+    os.clear();\n+    os.seekp(off, std::ios_base::cur);\n+    VERIFY( false );\n+  }\n+  catch (const std::ios_base::failure&)\n+  {\n+    VERIFY( os.rdstate() & std::ios_base::failbit );\n+  }\n+  catch (...)\n+  {\n+    VERIFY( false );\n+  }\n+}\n+\n+void\n+test02()\n+{\n+  // Check that the sentry flushes a tied stream when seeking.\n+\n+  {\n+    __gnu_test::sync_wstreambuf buf;\n+    std::wostream os(&buf);\n+\n+    __gnu_test::sync_wstreambuf buf_tie;\n+    std::wostream os_tie(&buf_tie);\n+\n+    os.tie(&os_tie);\n+\n+    std::wostream::pos_type pos = std::wostream::pos_type();\n+    os.seekp(pos);\n+\n+    VERIFY( buf_tie.sync_called() );\n+  }\n+\n+  {\n+    __gnu_test::sync_wstreambuf buf;\n+    std::wostream os(&buf);\n+\n+    __gnu_test::sync_wstreambuf buf_tie;\n+    std::wostream os_tie(&buf_tie);\n+\n+    os.tie(&os_tie);\n+\n+    std::wostream::off_type off(0);\n+    os.seekp(off, std::ios_base::cur);\n+\n+    VERIFY( buf_tie.sync_called() );\n+  }\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+}"}, {"sha": "7ddddeccc65dd08380744292a1bd7d0568a74d1c", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/tellp/char/exceptions_badbit_throw.cc", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b6c65c754f2b2a78f5353219ec62817064e0d24/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Ftellp%2Fchar%2Fexceptions_badbit_throw.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b6c65c754f2b2a78f5353219ec62817064e0d24/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Ftellp%2Fchar%2Fexceptions_badbit_throw.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Ftellp%2Fchar%2Fexceptions_badbit_throw.cc?ref=9b6c65c754f2b2a78f5353219ec62817064e0d24", "patch": "@@ -28,21 +28,17 @@ void test01()\n {\n   __gnu_test::fail_streambuf bib;\n   ostream stream(&bib);\n-  stream.exceptions(ios_base::badbit);\n \n   try\n     {\n       stream.tellp();\n       VERIFY( false );\n     }\n-  catch (const __gnu_test::positioning_error&) \n+  catch (const __gnu_test::positioning_error&)\n     {\n-      // stream should set badbit and rethrow facet_error.\n-      VERIFY( stream.bad() );\n-      VERIFY( (stream.rdstate() & ios_base::failbit) == 0 );\n-      VERIFY( !stream.eof() );\n+      VERIFY( stream.good() );\n     }\n-  catch (...) \n+  catch (...)\n     {\n       VERIFY(false);\n     }"}, {"sha": "8c2fe85db36e885ead18e585ffed3e45c6955f8a", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/tellp/char/n3168.cc", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b6c65c754f2b2a78f5353219ec62817064e0d24/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Ftellp%2Fchar%2Fn3168.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b6c65c754f2b2a78f5353219ec62817064e0d24/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Ftellp%2Fchar%2Fn3168.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Ftellp%2Fchar%2Fn3168.cc?ref=9b6c65c754f2b2a78f5353219ec62817064e0d24", "patch": "@@ -0,0 +1,64 @@\n+#include <ostream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+// C++11 27.7.3.5 basic_ostream seek members [ostream.seeks]\n+\n+// Verify [ostream.seeks] functions use a sentry, as per N3168.\n+\n+void\n+test01()\n+{\n+  // Check that the sentry sets failbit when seeking on a bad stream.\n+  // The standard doesn't guarantee this, but it is true for libstdc++.\n+\n+  std::ostream os(0);\n+  VERIFY( os.rdstate() == std::ios_base::badbit );\n+\n+  os.tellp();\n+  VERIFY( os.rdstate() & std::ios_base::failbit );\n+\n+  os.clear();\n+\n+  os.exceptions(std::ios_base::failbit);\n+\n+  try\n+  {\n+    os.clear();\n+    os.tellp();\n+    VERIFY( false );\n+  }\n+  catch (const std::ios_base::failure&)\n+  {\n+    VERIFY( os.rdstate() & std::ios_base::failbit );\n+  }\n+  catch (...)\n+  {\n+    VERIFY( false );\n+  }\n+}\n+\n+void\n+test02()\n+{\n+  // Check that the sentry flushes a tied stream when seeking.\n+\n+  __gnu_test::sync_streambuf buf;\n+  std::ostream os(&buf);\n+\n+  __gnu_test::sync_streambuf buf_tie;\n+  std::ostream os_tie(&buf_tie);\n+\n+  os.tie(&os_tie);\n+\n+  os.tellp();\n+\n+  VERIFY( ! buf.sync_called() );\n+  VERIFY( buf_tie.sync_called() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+}"}, {"sha": "803c45abe1111cc506614ad5837794e18dc3b1db", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/tellp/wchar_t/exceptions_badbit_throw.cc", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b6c65c754f2b2a78f5353219ec62817064e0d24/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Ftellp%2Fwchar_t%2Fexceptions_badbit_throw.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b6c65c754f2b2a78f5353219ec62817064e0d24/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Ftellp%2Fwchar_t%2Fexceptions_badbit_throw.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Ftellp%2Fwchar_t%2Fexceptions_badbit_throw.cc?ref=9b6c65c754f2b2a78f5353219ec62817064e0d24", "patch": "@@ -28,21 +28,17 @@ void test01()\n {\n   __gnu_test::fail_wstreambuf bib;\n   wostream stream(&bib);\n-  stream.exceptions(ios_base::badbit);\n \n   try\n     {\n       stream.tellp();\n       VERIFY( false );\n     }\n-  catch (const __gnu_test::positioning_error&) \n+  catch (const __gnu_test::positioning_error&)\n     {\n-      // stream should set badbit and rethrow facet_error.\n-      VERIFY( stream.bad() );\n-      VERIFY( (stream.rdstate() & ios_base::failbit) == 0 );\n-      VERIFY( !stream.eof() );\n+      VERIFY( stream.good() );\n     }\n-  catch (...) \n+  catch (...)\n     {\n       VERIFY(false);\n     }"}, {"sha": "887a9a773d1966ab8e2ef705eadb865c57ccf8c2", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/tellp/wchar_t/n3168.cc", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b6c65c754f2b2a78f5353219ec62817064e0d24/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Ftellp%2Fwchar_t%2Fn3168.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b6c65c754f2b2a78f5353219ec62817064e0d24/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Ftellp%2Fwchar_t%2Fn3168.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Ftellp%2Fwchar_t%2Fn3168.cc?ref=9b6c65c754f2b2a78f5353219ec62817064e0d24", "patch": "@@ -0,0 +1,64 @@\n+#include <ostream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+// C++11 27.7.3.5 basic_ostream seek members [ostream.seeks]\n+\n+// Verify [ostream.seeks] functions use a sentry, as per N3168.\n+\n+void\n+test01()\n+{\n+  // Check that the sentry sets failbit when seeking on a bad stream.\n+  // The standard doesn't guarantee this, but it is true for libstdc++.\n+\n+  std::wostream os(0);\n+  VERIFY( os.rdstate() == std::ios_base::badbit );\n+\n+  os.tellp();\n+  VERIFY( os.rdstate() & std::ios_base::failbit );\n+\n+  os.clear();\n+\n+  os.exceptions(std::ios_base::failbit);\n+\n+  try\n+  {\n+    os.clear();\n+    os.tellp();\n+    VERIFY( false );\n+  }\n+  catch (const std::ios_base::failure&)\n+  {\n+    VERIFY( os.rdstate() & std::ios_base::failbit );\n+  }\n+  catch (...)\n+  {\n+    VERIFY( false );\n+  }\n+}\n+\n+void\n+test02()\n+{\n+  // Check that the sentry flushes a tied stream when seeking.\n+\n+  __gnu_test::sync_wstreambuf buf;\n+  std::wostream os(&buf);\n+\n+  __gnu_test::sync_wstreambuf buf_tie;\n+  std::wostream os_tie(&buf_tie);\n+\n+  os.tie(&os_tie);\n+\n+  os.tellp();\n+\n+  VERIFY( ! buf.sync_called() );\n+  VERIFY( buf_tie.sync_called() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+}"}]}