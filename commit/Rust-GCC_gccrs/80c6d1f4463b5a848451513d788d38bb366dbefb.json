{"sha": "80c6d1f4463b5a848451513d788d38bb366dbefb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODBjNmQxZjQ0NjNiNWE4NDg0NTE1MTNkNzg4ZDM4YmIzNjZkYmVmYg==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2018-09-17T13:12:12Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2018-09-17T13:12:12Z"}, "message": "Add -Wabsolute-value\n\n2018-09-17  Martin Jambor  <mjambor@suse.cz>\n\n\tgcc/\n\t* doc/invoke.texi (Warning Options): Likewise.\n\n\tgcc/c-family/\n\t* c.opt (Wabsolute-value): New.\n\n\tgcc/c/\n\t* c-parser.c: (warn_for_abs): New function.\n\t(c_parser_postfix_expression_after_primary): Call it.\n\n\ttestsuite/\n\t* gcc.dg/warn-abs-1.c: New test.\n\t* gcc.dg/dfp/warn-abs-2.c: Likewise.\n\nFrom-SVN: r264368", "tree": {"sha": "829a703a921957e67d4691d0a217fb0560e7c5aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/829a703a921957e67d4691d0a217fb0560e7c5aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/80c6d1f4463b5a848451513d788d38bb366dbefb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80c6d1f4463b5a848451513d788d38bb366dbefb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80c6d1f4463b5a848451513d788d38bb366dbefb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80c6d1f4463b5a848451513d788d38bb366dbefb/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3ab3a92e8ee19d942c89b0feb99f7a10bde794a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ab3a92e8ee19d942c89b0feb99f7a10bde794a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ab3a92e8ee19d942c89b0feb99f7a10bde794a8"}], "stats": {"total": 285, "additions": 279, "deletions": 6}, "files": [{"sha": "f653d66f28849b652dd91bff682f4f225d34668b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80c6d1f4463b5a848451513d788d38bb366dbefb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80c6d1f4463b5a848451513d788d38bb366dbefb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=80c6d1f4463b5a848451513d788d38bb366dbefb", "patch": "@@ -1,3 +1,8 @@\n+2018-09-17  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR c/63886\n+\t* doc/invoke.texi (Warning Options): Likewise.\n+\n 2018-09-17  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/87301"}, {"sha": "b299ad2bc22b82439952fa6c6087397646a0a922", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80c6d1f4463b5a848451513d788d38bb366dbefb/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80c6d1f4463b5a848451513d788d38bb366dbefb/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=80c6d1f4463b5a848451513d788d38bb366dbefb", "patch": "@@ -1,3 +1,8 @@\n+2018-09-17  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR c/63886\n+\t* c.opt (Wabsolute-value): New.\n+\n 2018-09-06  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \t* c-common.c (complete_flexible_array_elts): New helper function."}, {"sha": "092ec940d860b35f895e07b96b3662c3cbe9ab7d", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80c6d1f4463b5a848451513d788d38bb366dbefb/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80c6d1f4463b5a848451513d788d38bb366dbefb/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=80c6d1f4463b5a848451513d788d38bb366dbefb", "patch": "@@ -271,6 +271,10 @@ Warn if a subobject has an abi_tag attribute that the complete object type does\n Wpsabi\n C ObjC C++ ObjC++ LTO Var(warn_psabi) Init(1) Warning Undocumented LangEnabledBy(C ObjC C++ ObjC++,Wabi)\n \n+Wabsolute-value\n+C ObjC Var(warn_absolute_value) Warning EnabledBy(Wextra)\n+Warn on suspicious calls of standard functions computing absolute values.\n+\n Waddress\n C ObjC C++ ObjC++ Var(warn_address) Warning LangEnabledBy(C ObjC C++ ObjC++,Wall)\n Warn about suspicious uses of memory addresses."}, {"sha": "3133ca6b6b074384f27c0deb1a356d0097c80b8f", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80c6d1f4463b5a848451513d788d38bb366dbefb/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80c6d1f4463b5a848451513d788d38bb366dbefb/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=80c6d1f4463b5a848451513d788d38bb366dbefb", "patch": "@@ -1,3 +1,9 @@\n+2018-09-17  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR c/63886\n+\t* c-parser.c: (warn_for_abs): New function.\n+\t(c_parser_postfix_expression_after_primary): Call it.\n+\n 2018-09-13  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \t* c-typeck.c (digest_init): Shorten overlength strings."}, {"sha": "1766a256633bc41a67e0f42fc1c62ac5fe564eef", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 150, "deletions": 6, "changes": 156, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80c6d1f4463b5a848451513d788d38bb366dbefb/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80c6d1f4463b5a848451513d788d38bb366dbefb/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=80c6d1f4463b5a848451513d788d38bb366dbefb", "patch": "@@ -9101,6 +9101,144 @@ sizeof_ptr_memacc_comptypes (tree type1, tree type2)\n   return comptypes (type1, type2) == 1;\n }\n \n+/* Warn for patterns where abs-like function appears to be used incorrectly,\n+   gracely ignore any non-abs-like function.  The warning location should be\n+   LOC.  FNDECL is the declaration of called function, it must be a\n+   BUILT_IN_NORMAL function.  ARG is the first and only argument of the\n+   call.  */\n+\n+static void\n+warn_for_abs (location_t loc, tree fndecl, tree arg)\n+{\n+  tree atype = TREE_TYPE (arg);\n+\n+  /* Casts from pointers (and thus arrays and fndecls) will generate\n+     -Wint-conversion warnings.  Most other wrong types hopefully lead to type\n+     mismatch errors.  TODO: Think about what to do with FIXED_POINT_TYPE_P\n+     types and possibly other exotic types.  */\n+  if (!INTEGRAL_TYPE_P (atype)\n+      && !SCALAR_FLOAT_TYPE_P (atype)\n+      && TREE_CODE (atype) != COMPLEX_TYPE)\n+    return;\n+\n+  enum built_in_function fcode = DECL_FUNCTION_CODE (fndecl);\n+\n+  switch (fcode)\n+    {\n+    case BUILT_IN_ABS:\n+    case BUILT_IN_LABS:\n+    case BUILT_IN_LLABS:\n+    case BUILT_IN_IMAXABS:\n+      if (!INTEGRAL_TYPE_P (atype))\n+\t{\n+\t  if (SCALAR_FLOAT_TYPE_P (atype))\n+\t    warning_at (loc, OPT_Wabsolute_value,\n+\t\t\t\"using integer absolute value function %qD when \"\n+\t\t\t\"argument is of floating point type %qT\",\n+\t\t\tfndecl, atype);\n+\t  else if (TREE_CODE (atype) == COMPLEX_TYPE)\n+\t    warning_at (loc, OPT_Wabsolute_value,\n+\t\t\t\"using integer absolute value function %qD when \"\n+\t\t\t\"argument is of complex type %qT\", fndecl, atype);\n+\t  else\n+\t    gcc_unreachable ();\n+\t  return;\n+\t}\n+      if (TYPE_UNSIGNED (atype))\n+\twarning_at (loc, OPT_Wabsolute_value,\n+\t\t    \"taking the absolute value of unsigned type %qT \"\n+\t\t    \"has no effect\", atype);\n+      break;\n+\n+    CASE_FLT_FN (BUILT_IN_FABS):\n+    CASE_FLT_FN_FLOATN_NX (BUILT_IN_FABS):\n+      if (!SCALAR_FLOAT_TYPE_P (atype)\n+\t  || DECIMAL_FLOAT_MODE_P (TYPE_MODE (atype)))\n+\t{\n+\t  if (INTEGRAL_TYPE_P (atype))\n+\t    warning_at (loc, OPT_Wabsolute_value,\n+\t\t\t\"using floating point absolute value function %qD \"\n+\t\t\t\"when argument is of integer type %qT\", fndecl, atype);\n+\t  else if (DECIMAL_FLOAT_TYPE_P (atype))\n+\t    warning_at (loc, OPT_Wabsolute_value,\n+\t\t\t\"using floating point absolute value function %qD \"\n+\t\t\t\"when argument is of decimal floating point type %qT\",\n+\t\t\tfndecl, atype);\n+\t  else if (TREE_CODE (atype) == COMPLEX_TYPE)\n+\t    warning_at (loc, OPT_Wabsolute_value,\n+\t\t\t\"using floating point absolute value function %qD when \"\n+\t\t\t\"argument is of complex type %qT\", fndecl, atype);\n+\t  else\n+\t    gcc_unreachable ();\n+\t  return;\n+\t}\n+      break;\n+\n+    CASE_FLT_FN (BUILT_IN_CABS):\n+      if (TREE_CODE (atype) != COMPLEX_TYPE)\n+\t{\n+\t  if (INTEGRAL_TYPE_P (atype))\n+\t    warning_at (loc, OPT_Wabsolute_value,\n+\t\t\t\"using complex absolute value function %qD when \"\n+\t\t\t\"argument is of integer type %qT\", fndecl, atype);\n+\t  else if (SCALAR_FLOAT_TYPE_P (atype))\n+\t    warning_at (loc, OPT_Wabsolute_value,\n+\t\t\t\"using complex absolute value function %qD when \"\n+\t\t\t\"argument is of floating point type %qT\",\n+\t\t\tfndecl, atype);\n+\t  else\n+\t    gcc_unreachable ();\n+\n+\t  return;\n+\t}\n+      break;\n+\n+    case BUILT_IN_FABSD32:\n+    case BUILT_IN_FABSD64:\n+    case BUILT_IN_FABSD128:\n+      if (!DECIMAL_FLOAT_TYPE_P (atype))\n+\t{\n+\t  if (INTEGRAL_TYPE_P (atype))\n+\t    warning_at (loc, OPT_Wabsolute_value,\n+\t\t\t\"using decimal floating point absolute value \"\n+\t\t\t\"function %qD when argument is of integer type %qT\",\n+\t\t\tfndecl, atype);\n+\t  else if (SCALAR_FLOAT_TYPE_P (atype))\n+\t    warning_at (loc, OPT_Wabsolute_value,\n+\t\t\t\"using decimal floating point absolute value \"\n+\t\t\t\"function %qD when argument is of floating point \"\n+\t\t\t\"type %qT\", fndecl, atype);\n+\t  else if (TREE_CODE (atype) == COMPLEX_TYPE)\n+\t    warning_at (loc, OPT_Wabsolute_value,\n+\t\t\t\"using decimal floating point absolute value \"\n+\t\t\t\"function %qD when argument is of complex type %qT\",\n+\t\t\tfndecl, atype);\n+\t  else\n+\t    gcc_unreachable ();\n+\t  return;\n+\t}\n+      break;\n+\n+    default:\n+      return;\n+    }\n+\n+  tree ftype = TREE_VALUE (TYPE_ARG_TYPES (TREE_TYPE (fndecl)));\n+  if (TREE_CODE (atype) == COMPLEX_TYPE)\n+    {\n+      gcc_assert (TREE_CODE (ftype) == COMPLEX_TYPE);\n+      atype = TREE_TYPE (atype);\n+      ftype = TREE_TYPE (ftype);\n+    }\n+\n+  if (TYPE_PRECISION (ftype) < TYPE_PRECISION (atype))\n+    warning_at (loc, OPT_Wabsolute_value,\n+\t\t\"absolute value function %qD given an argument of type %qT \"\n+\t\t\"but has parameter of type %qT which may cause truncation \"\n+\t\t\"of value\", fndecl, atype, ftype);\n+}\n+\n+\n /* Parse a postfix expression after the initial primary or compound\n    literal; that is, parse a series of postfix operators.\n \n@@ -9165,13 +9303,19 @@ c_parser_postfix_expression_after_primary (c_parser *parser,\n \t\t\t\t\t      expr.value, exprlist,\n \t\t\t\t\t      sizeof_arg,\n \t\t\t\t\t      sizeof_ptr_memacc_comptypes);\n-\t  if (TREE_CODE (expr.value) == FUNCTION_DECL\n-\t      && fndecl_built_in_p (expr.value, BUILT_IN_MEMSET)\n-\t      && vec_safe_length (exprlist) == 3)\n+\t  if (TREE_CODE (expr.value) == FUNCTION_DECL)\n \t    {\n-\t      tree arg0 = (*exprlist)[0];\n-\t      tree arg2 = (*exprlist)[2];\n-\t      warn_for_memset (expr_loc, arg0, arg2, literal_zero_mask);\n+\t      if (fndecl_built_in_p (expr.value, BUILT_IN_MEMSET)\n+\t\t  && vec_safe_length (exprlist) == 3)\n+\t\t{\n+\t\t  tree arg0 = (*exprlist)[0];\n+\t\t  tree arg2 = (*exprlist)[2];\n+\t\t  warn_for_memset (expr_loc, arg0, arg2, literal_zero_mask);\n+\t\t}\n+\t      if (warn_absolute_value\n+\t\t  && fndecl_built_in_p (expr.value, BUILT_IN_NORMAL)\n+\t\t  && vec_safe_length (exprlist) == 1)\n+\t\twarn_for_abs (expr_loc, expr.value, (*exprlist)[0]);\n \t    }\n \n \t  start = expr.get_start ();"}, {"sha": "94304c314cfb74a50ffd9a32b7b7cfc417144954", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80c6d1f4463b5a848451513d788d38bb366dbefb/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80c6d1f4463b5a848451513d788d38bb366dbefb/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=80c6d1f4463b5a848451513d788d38bb366dbefb", "patch": "@@ -6281,6 +6281,14 @@ example, warn if an unsigned variable is compared against zero with\n @code{<} or @code{>=}.  This warning is also enabled by\n @option{-Wextra}.\n \n+@item -Wabsolute-value @r{(C and Objective-C only)}\n+@opindex Wabsolute-value\n+@opindex Wno-absolute-value\n+Warn when a wrong absolute value function seems to be used or when it\n+does not have any effect because its argument is an unsigned type.\n+This warning be suppressed with an explicit type cast and it is also\n+enabled by @option{-Wextra}.\n+\n @include cppwarnopts.texi\n \n @item -Wbad-function-cast @r{(C and Objective-C only)}"}, {"sha": "4fd1ff928ab660f1985dcee6e969df56019a9be5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80c6d1f4463b5a848451513d788d38bb366dbefb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80c6d1f4463b5a848451513d788d38bb366dbefb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=80c6d1f4463b5a848451513d788d38bb366dbefb", "patch": "@@ -1,3 +1,9 @@\n+2018-09-17  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR c/63886\n+\t* gcc.dg/warn-abs-1.c: New test.\n+\t* gcc.dg/dfp/warn-abs-2.c: Likewise.\n+\n 2018-09-17  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \t* gcc.target/x86_64/abi/ms-sysv/ms-sysv.exp: Don't pass"}, {"sha": "c1a1994997f03bb2ce2f9ea7ddc58d0daa21e46f", "filename": "gcc/testsuite/gcc.dg/dfp/warn-abs-2.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80c6d1f4463b5a848451513d788d38bb366dbefb/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fwarn-abs-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80c6d1f4463b5a848451513d788d38bb366dbefb/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fwarn-abs-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fwarn-abs-2.c?ref=80c6d1f4463b5a848451513d788d38bb366dbefb", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wabsolute-value\" } */\n+\n+#include <stdlib.h>\n+#include <complex.h>\n+#include <math.h>\n+\n+void tst_decimal (_Decimal32 *p32, _Decimal64 *p64, _Decimal128 *p128)\n+{\n+  *p32 = abs(*p32);       /* { dg-warning \"using integer absolute value function\" } */\n+  *p64 = fabs(*p64);      /* { dg-warning \"using floating point absolute value function\" } */\n+  *p128 = cabsl(*p128);   /* { dg-warning \"using complex absolute value function\" } */\n+}\n+\n+void tst_notdecimal (int *pi, double *pd, long double *pld, complex double *pc)\n+{\n+  *pi = __builtin_fabsd32 (*pi);   /* { dg-warning \"using decimal floating point absolute value function\" } */\n+  *pd = __builtin_fabsd64 (*pd);   /* { dg-warning \"using decimal floating point absolute value function\" } */\n+  *pld = __builtin_fabsd64 (*pld); /* { dg-warning \"using decimal floating point absolute value function\" } */\n+  *pc = __builtin_fabsd128 (*pc);  /* { dg-warning \"using decimal floating point absolute value function\" } */\n+}\n+\n+void\n+test_size  (_Decimal64 *p64, _Decimal128 *p128)\n+{\n+  *p64 = __builtin_fabsd32 (*p64);   /* { dg-warning \"may cause truncation of value\" } */\n+  *p128 = __builtin_fabsd64 (*p128); /* { dg-warning \"may cause truncation of value\" } */\n+}"}, {"sha": "6aa937c3a2e9921e90969911550eebf2965ffdb4", "filename": "gcc/testsuite/gcc.dg/warn-abs-1.c", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80c6d1f4463b5a848451513d788d38bb366dbefb/gcc%2Ftestsuite%2Fgcc.dg%2Fwarn-abs-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80c6d1f4463b5a848451513d788d38bb366dbefb/gcc%2Ftestsuite%2Fgcc.dg%2Fwarn-abs-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fwarn-abs-1.c?ref=80c6d1f4463b5a848451513d788d38bb366dbefb", "patch": "@@ -0,0 +1,67 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wabsolute-value\" } */\n+\n+#include <stdlib.h>\n+#include <inttypes.h>\n+#include <math.h>\n+#include <complex.h>\n+\n+void\n+tst_unsigned (unsigned *pu, unsigned long *pl, unsigned long long *pll,\n+\t      uintmax_t *pm)\n+{\n+  *pu = abs (*pu);      /* { dg-warning \"taking the absolute value of unsigned type\" } */\n+  *pl = labs (*pl);     /* { dg-warning \"taking the absolute value of unsigned type\" } */\n+  *pll = llabs (*pll);  /* { dg-warning \"taking the absolute value of unsigned type\" } */\n+  *pm = imaxabs (*pm);      /* { dg-warning \"taking the absolute value of unsigned type\" } */\n+}\n+\n+void\n+test_int_size (long long *pll)\n+{\n+  *pll = abs (*pll);  /* { dg-warning \"may cause truncation of value\" } */\n+  *pll = abs ((int) *pll);\n+}\n+\n+void\n+tst_notint (float *pf, double *pd, _Complex double *pc)\n+{\n+  *pf = abs (*pf);    /* { dg-warning \"using integer absolute value function\" } */\n+  *pd = labs (*pd);   /* { dg-warning \"using integer absolute value function\" } */\n+  *pc = abs (*pc);    /* { dg-warning \"using integer absolute value function\" } */\n+}\n+\n+void\n+tst_notfloat (int *pi, long *pl, complex double *pc)\n+{\n+  *pi = fabsf (*pi);  /* { dg-warning \"using floating point absolute value function\" } */\n+  *pl = fabs (*pl);   /* { dg-warning \"using floating point absolute value function\" } */\n+  *pc = fabs (*pc);   /* { dg-warning \"using floating point absolute value function\" } */\n+}\n+\n+void\n+tst_float_size (double *pd, long double *pld, _Float128 *pf128)\n+{\n+  *pd = fabsf (*pd);   /* { dg-warning \"may cause truncation of value\" } */\n+  *pld = fabs (*pld);  /* { dg-warning \"may cause truncation of value\" } */\n+  *pld = fabs ((double) *pld);\n+  *pf128 = fabsl (*pf128); /* { dg-warning \"may cause truncation of value\" } */\n+}\n+\n+void tst_notcomplex (int *pi, long *pl, long double *pld)\n+{\n+  *pi = cabs (*pi);   /* { dg-warning \"using complex absolute value function\" } */\n+  *pl = cabs (*pl);   /* { dg-warning \"using complex absolute value function\" } */\n+  *pld = cabsl (*pld);/* { dg-warning \"using complex absolute value function\" } */\n+}\n+\n+void tst_cplx_size (complex double *pcd, complex long double *pcld)\n+{\n+  *pcd = cabsf (*pcd);   /* { dg-warning \"may cause truncation of value\" } */\n+  *pcld = cabs (*pcld);  /* { dg-warning \"may cause truncation of value\" } */\n+  *pcld = cabs ((complex double) *pcld);\n+}\n+\n+\n+\n+"}]}