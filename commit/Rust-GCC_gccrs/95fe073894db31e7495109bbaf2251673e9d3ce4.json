{"sha": "95fe073894db31e7495109bbaf2251673e9d3ce4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTVmZTA3Mzg5NGRiMzFlNzQ5NTEwOWJiYWYyMjUxNjczZTlkM2NlNA==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2006-11-10T17:21:57Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2006-11-10T17:21:57Z"}, "message": "re PR fortran/29315 (error passing an array derived from type element)\n\n2006-11-10 Paul Thomas <pault@gcc.gnu.org>\n\n\tPR fortran/29315\n\t* trans-expr.c (is_aliased_array): Treat correctly the case where the\n\tcomponent is itself and array or array reference.\n\n\n2006-11-10 Paul Thomas <pault@gcc.gnu.org>\n\n\tPR fortran/29315\n\t* gfortran.dg/aliasing_dummy_4.f90: New test.\n\nFrom-SVN: r118659", "tree": {"sha": "8f99da864a8c9eb9ed8ea2089a5e47c1ccffb58c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f99da864a8c9eb9ed8ea2089a5e47c1ccffb58c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/95fe073894db31e7495109bbaf2251673e9d3ce4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95fe073894db31e7495109bbaf2251673e9d3ce4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95fe073894db31e7495109bbaf2251673e9d3ce4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95fe073894db31e7495109bbaf2251673e9d3ce4/comments", "author": null, "committer": null, "parents": [{"sha": "29520adf7d46186470718cbd7d277db6c85ac0be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29520adf7d46186470718cbd7d277db6c85ac0be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29520adf7d46186470718cbd7d277db6c85ac0be"}], "stats": {"total": 61, "additions": 58, "deletions": 3}, "files": [{"sha": "25ed17ea1c749b9c47196923484b4474d323ffe9", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95fe073894db31e7495109bbaf2251673e9d3ce4/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95fe073894db31e7495109bbaf2251673e9d3ce4/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=95fe073894db31e7495109bbaf2251673e9d3ce4", "patch": "@@ -1,3 +1,9 @@\n+2006-11-10 Paul Thomas <pault@gcc.gnu.org>\n+\n+\tPR fortran/29315\n+\t* trans-expr.c (is_aliased_array): Treat correctly the case where the\n+\tcomponent is itself and array or array reference.\n+\n 2006-11-09  Brooks Moses  <brooks.moses@codesourcery.com>\n \n \t* check.c (same_type_check): Typo fix in comment."}, {"sha": "6f1e163d46a6f5d8a7c4125a5880f4629b927b4a", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95fe073894db31e7495109bbaf2251673e9d3ce4/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95fe073894db31e7495109bbaf2251673e9d3ce4/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=95fe073894db31e7495109bbaf2251673e9d3ce4", "patch": "@@ -1838,7 +1838,8 @@ gfc_conv_aliased_arg (gfc_se * parmse, gfc_expr * expr,\n   return;\n }\n \n-/* Is true if the last array reference is followed by a component reference.  */\n+/* Is true if an array reference is followed by a component or substring\n+   reference.  */\n \n static bool\n is_aliased_array (gfc_expr * e)\n@@ -1849,10 +1850,11 @@ is_aliased_array (gfc_expr * e)\n   seen_array = false;\t\n   for (ref = e->ref; ref; ref = ref->next)\n     {\n-      if (ref->type == REF_ARRAY)\n+      if (ref->type == REF_ARRAY\n+\t    && ref->u.ar.type != AR_ELEMENT)\n \tseen_array = true;\n \n-      if (ref->next == NULL\n+      if (seen_array\n \t    && ref->type != REF_ARRAY)\n \treturn seen_array;\n     }"}, {"sha": "4189bb08d7e5de86c3622fb454685aa82142c1da", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95fe073894db31e7495109bbaf2251673e9d3ce4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95fe073894db31e7495109bbaf2251673e9d3ce4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=95fe073894db31e7495109bbaf2251673e9d3ce4", "patch": "@@ -1,3 +1,8 @@\n+2006-11-10 Paul Thomas <pault@gcc.gnu.org>\n+\n+\tPR fortran/29315\n+\t* gfortran.dg/aliasing_dummy_4.f90: New test.\n+\n 2006-11-10  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/29777"}, {"sha": "826ada162775e8c2cc9702f7bc5c06b22565655a", "filename": "gcc/testsuite/gfortran.dg/aliasing_dummy_4.f90", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95fe073894db31e7495109bbaf2251673e9d3ce4/gcc%2Ftestsuite%2Fgfortran.dg%2Faliasing_dummy_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95fe073894db31e7495109bbaf2251673e9d3ce4/gcc%2Ftestsuite%2Fgfortran.dg%2Faliasing_dummy_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Faliasing_dummy_4.f90?ref=95fe073894db31e7495109bbaf2251673e9d3ce4", "patch": "@@ -0,0 +1,42 @@\n+! { dg-do run }\n+! This tests the fix for PR29315, in which array components of derived type arrays were\n+! not correctly passed to procedures because of a fault in the function that detects\n+! these references that do not have the span of a natural type.\n+!\n+! Contributed by Stephen Jeffrey  <stephen.jeffrey@nrm.qld.gov.au>\n+!\n+program  test_f90\n+\n+    integer, parameter :: N = 2\n+\n+    type test_type\n+        integer a(N, N)\n+    end type\n+\n+    type (test_type) s(N, N)\n+\n+    forall (l = 1:N, m = 1:N) &\n+        s(l, m)%a(:, :) = reshape ([((i*l + 10*j*m +100, i = 1, N), j = 1, N)], [N, N])\n+\n+    call test_sub(s%a(1, 1), 1000) ! Test the original problem.\n+\n+    if ( any (s(1, 1)%a(:, :) /= reshape ([1111, 112, 121, 122], [2, 2]))) call abort ()\n+    if ( any (s(1, 2)%a(:, :) /= reshape ([1121, 122, 141, 142], [2, 2]))) call abort ()\n+    if ( any (s(2, 1)%a(:, :) /= reshape ([1112, 114, 122, 124], [2, 2]))) call abort ()\n+    if ( any (s(2, 2)%a(:, :) /= reshape ([1122, 124, 142, 144], [2, 2]))) call abort ()\n+\n+    call test_sub(s(1, 1)%a(:, :), 1000)  ! Check \"normal\" references.\n+\n+    if ( any (s(1, 1)%a(:, :) /= reshape ([2111,1112,1121,1122], [2, 2]))) call abort ()\n+    if ( any (s(1, 2)%a(:, :) /= reshape ([1121, 122, 141, 142], [2, 2]))) call abort ()\n+    if ( any (s(2, 1)%a(:, :) /= reshape ([1112, 114, 122, 124], [2, 2]))) call abort ()\n+    if ( any (s(2, 2)%a(:, :) /= reshape ([1122, 124, 142, 144], [2, 2]))) call abort ()\n+contains\n+  subroutine test_sub(array, offset)\n+    integer array(:, :), offset\n+\n+    forall (i = 1:N, j = 1:N) &\n+        array(i, j) = array(i, j) + offset\n+  end subroutine\n+end program\n+"}]}