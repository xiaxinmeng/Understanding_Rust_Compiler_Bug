{"sha": "8e7757ba17b1aeb83387c33004149a185a5fa137", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGU3NzU3YmExN2IxYWViODMzODdjMzMwMDQxNDlhMTg1YTVmYTEzNw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-05-27T21:33:37Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-05-27T21:33:37Z"}, "message": "gimplify.c (gimplify_scan_omp_clauses): Allow lastprivate conditional on sections construct.\n\n\t* gimplify.c (gimplify_scan_omp_clauses): Allow lastprivate conditional\n\ton sections construct.\n\t* omp-low.c (lower_lastprivate_conditional_clauses): Handle sections\n\tconstruct.\n\t(lower_omp_sections): Handle lastprivate conditional.\n\t(lower_omp_1) <case GIMPLE_ASSIGN>: Handle sections construct with\n\tlastprivate_conditional_map.\n\t* omp-expand.c (expand_omp_sections): Handle lastprivate conditional.\nlibgomp/\n\t* testsuite/libgomp.c-c++-common/lastprivate_conditional_4.c: New test.\n\nFrom-SVN: r271673", "tree": {"sha": "7b0ead544da63501144fb40b91e57cef10f84917", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b0ead544da63501144fb40b91e57cef10f84917"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8e7757ba17b1aeb83387c33004149a185a5fa137", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e7757ba17b1aeb83387c33004149a185a5fa137", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e7757ba17b1aeb83387c33004149a185a5fa137", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e7757ba17b1aeb83387c33004149a185a5fa137/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "36c7a3fff99326a1dd45f495ee8e1b6bfd6cf9f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36c7a3fff99326a1dd45f495ee8e1b6bfd6cf9f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36c7a3fff99326a1dd45f495ee8e1b6bfd6cf9f5"}], "stats": {"total": 290, "additions": 266, "deletions": 24}, "files": [{"sha": "03b549601f0a7751ebb7f1ee6c5a185a63f3e8f9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e7757ba17b1aeb83387c33004149a185a5fa137/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e7757ba17b1aeb83387c33004149a185a5fa137/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8e7757ba17b1aeb83387c33004149a185a5fa137", "patch": "@@ -1,5 +1,14 @@\n 2019-05-27  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* gimplify.c (gimplify_scan_omp_clauses): Allow lastprivate conditional\n+\ton sections construct.\n+\t* omp-low.c (lower_lastprivate_conditional_clauses): Handle sections\n+\tconstruct.\n+\t(lower_omp_sections): Handle lastprivate conditional.\n+\t(lower_omp_1) <case GIMPLE_ASSIGN>: Handle sections construct with\n+\tlastprivate_conditional_map.\n+\t* omp-expand.c (expand_omp_sections): Handle lastprivate conditional.\n+\n \t* omp-low.c (lower_omp_1) <case GIMPLE_ASSIGN>: Look through ordered,\n \tcritical, taskgroup and section regions when looking for a region\n \twith non-NULL lastprivate_conditional_map."}, {"sha": "a0177b25f563160aa6f993ec218dc272523a9423", "filename": "gcc/gimplify.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e7757ba17b1aeb83387c33004149a185a5fa137/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e7757ba17b1aeb83387c33004149a185a5fa137/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=8e7757ba17b1aeb83387c33004149a185a5fa137", "patch": "@@ -8143,7 +8143,7 @@ gimplify_scan_omp_clauses (tree *list_p, gimple_seq *pre_p,\n \t    }\n \t  if (OMP_CLAUSE_LASTPRIVATE_CONDITIONAL (c))\n \t    {\n-\t      if (code == OMP_FOR)\n+\t      if (code == OMP_FOR || code == OMP_SECTIONS)\n \t\tflags |= GOVD_LASTPRIVATE_CONDITIONAL;\n \t      else\n \t\t{"}, {"sha": "038781c918ccd9b902c85461255b59a8e2b41c9b", "filename": "gcc/omp-expand.c", "status": "modified", "additions": 60, "deletions": 13, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e7757ba17b1aeb83387c33004149a185a5fa137/gcc%2Fomp-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e7757ba17b1aeb83387c33004149a185a5fa137/gcc%2Fomp-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-expand.c?ref=8e7757ba17b1aeb83387c33004149a185a5fa137", "patch": "@@ -6386,21 +6386,62 @@ expand_omp_sections (struct omp_region *region)\n   vin = gimple_omp_sections_control (sections_stmt);\n   tree clauses = gimple_omp_sections_clauses (sections_stmt);\n   tree reductmp = omp_find_clause (clauses, OMP_CLAUSE__REDUCTEMP_);\n-  if (reductmp)\n-    {\n-      tree reductions = OMP_CLAUSE_DECL (reductmp);\n-      gcc_assert (TREE_CODE (reductions) == SSA_NAME);\n-      gimple *g = SSA_NAME_DEF_STMT (reductions);\n-      reductions = gimple_assign_rhs1 (g);\n-      OMP_CLAUSE_DECL (reductmp) = reductions;\n-      gimple_stmt_iterator gsi = gsi_for_stmt (g);\n+  tree condtmp = omp_find_clause (clauses, OMP_CLAUSE__CONDTEMP_);\n+  tree cond_var = NULL_TREE;\n+  if (reductmp || condtmp)\n+    {\n+      tree reductions = null_pointer_node, mem = null_pointer_node;\n+      tree memv = NULL_TREE, condtemp = NULL_TREE;\n+      gimple_stmt_iterator gsi = gsi_none ();\n+      gimple *g = NULL;\n+      if (reductmp)\n+\t{\n+\t  reductions = OMP_CLAUSE_DECL (reductmp);\n+\t  gcc_assert (TREE_CODE (reductions) == SSA_NAME);\n+\t  g = SSA_NAME_DEF_STMT (reductions);\n+\t  reductions = gimple_assign_rhs1 (g);\n+\t  OMP_CLAUSE_DECL (reductmp) = reductions;\n+\t  gsi = gsi_for_stmt (g);\n+\t}\n+      else\n+\tgsi = si;\n+      if (condtmp)\n+\t{\n+\t  condtemp = OMP_CLAUSE_DECL (condtmp);\n+\t  tree c = omp_find_clause (OMP_CLAUSE_CHAIN (condtmp),\n+\t\t\t\t    OMP_CLAUSE__CONDTEMP_);\n+\t  cond_var = OMP_CLAUSE_DECL (c);\n+\t  tree type = TREE_TYPE (condtemp);\n+\t  memv = create_tmp_var (type);\n+\t  TREE_ADDRESSABLE (memv) = 1;\n+\t  unsigned cnt = 0;\n+\t  for (c = clauses; c; c = OMP_CLAUSE_CHAIN (c))\n+\t    if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_LASTPRIVATE\n+\t\t&& OMP_CLAUSE_LASTPRIVATE_CONDITIONAL (c))\n+\t      ++cnt;\n+\t  unsigned HOST_WIDE_INT sz\n+\t    = tree_to_uhwi (TYPE_SIZE_UNIT (TREE_TYPE (type))) * cnt;\n+\t  expand_omp_build_assign (&gsi, memv, build_int_cst (type, sz),\n+\t\t\t\t   false);\n+\t  mem = build_fold_addr_expr (memv);\n+\t}\n       t = build_int_cst (unsigned_type_node, len - 1);\n       u = builtin_decl_explicit (BUILT_IN_GOMP_SECTIONS2_START);\n-      stmt = gimple_build_call (u, 3, t, reductions, null_pointer_node);\n+      stmt = gimple_build_call (u, 3, t, reductions, mem);\n       gimple_call_set_lhs (stmt, vin);\n       gsi_insert_before (&gsi, stmt, GSI_SAME_STMT);\n-      gsi_remove (&gsi, true);\n-      release_ssa_name (gimple_assign_lhs (g));\n+      if (condtmp)\n+\t{\n+\t  expand_omp_build_assign (&gsi, condtemp, memv, false);\n+\t  tree t = build2 (PLUS_EXPR, TREE_TYPE (cond_var),\n+\t\t\t   vin, build_one_cst (TREE_TYPE (cond_var)));\n+\t  expand_omp_build_assign (&gsi, cond_var, t, false);\n+\t}\n+      if (reductmp)\n+\t{\n+\t  gsi_remove (&gsi, true);\n+\t  release_ssa_name (gimple_assign_lhs (g));\n+\t}\n     }\n   else if (!is_combined_parallel (region))\n     {\n@@ -6416,7 +6457,7 @@ expand_omp_sections (struct omp_region *region)\n       u = builtin_decl_explicit (BUILT_IN_GOMP_SECTIONS_NEXT);\n       stmt = gimple_build_call (u, 0);\n     }\n-  if (!reductmp)\n+  if (!reductmp && !condtmp)\n     {\n       gimple_call_set_lhs (stmt, vin);\n       gsi_insert_after (&si, stmt, GSI_SAME_STMT);\n@@ -6508,7 +6549,13 @@ expand_omp_sections (struct omp_region *region)\n       bfn_decl = builtin_decl_explicit (BUILT_IN_GOMP_SECTIONS_NEXT);\n       stmt = gimple_build_call (bfn_decl, 0);\n       gimple_call_set_lhs (stmt, vnext);\n-      gsi_insert_after (&si, stmt, GSI_SAME_STMT);\n+      gsi_insert_before (&si, stmt, GSI_SAME_STMT);\n+      if (cond_var)\n+\t{\n+\t  tree t = build2 (PLUS_EXPR, TREE_TYPE (cond_var),\n+\t\t\t   vnext, build_one_cst (TREE_TYPE (cond_var)));\n+\t  expand_omp_build_assign (&si, cond_var, t, false);\n+\t}\n       gsi_remove (&si, true);\n \n       single_succ_edge (l1_bb)->flags = EDGE_FALLTHRU;"}, {"sha": "e673abaf4a2e6e03f0140844eb49c1d221d56944", "filename": "gcc/omp-low.c", "status": "modified", "additions": 33, "deletions": 10, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e7757ba17b1aeb83387c33004149a185a5fa137/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e7757ba17b1aeb83387c33004149a185a5fa137/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=8e7757ba17b1aeb83387c33004149a185a5fa137", "patch": "@@ -5370,7 +5370,6 @@ lower_rec_input_clauses (tree clauses, gimple_seq *ilist, gimple_seq *dlist,\n static void\n lower_lastprivate_conditional_clauses (tree *clauses, omp_context *ctx)\n {\n-  struct omp_for_data fd;\n   tree iter_type = NULL_TREE;\n   tree cond_ptr = NULL_TREE;\n   tree iter_var = NULL_TREE;\n@@ -5380,8 +5379,15 @@ lower_lastprivate_conditional_clauses (tree *clauses, omp_context *ctx)\n       {\n \tif (iter_type == NULL)\n \t  {\n-\t    omp_extract_for_data (as_a <gomp_for *> (ctx->stmt), &fd, NULL);\n-\t    iter_type = unsigned_type_for (fd.iter_type);\n+\t    if (gimple_code (ctx->stmt) == GIMPLE_OMP_FOR)\n+\t      {\n+\t\tstruct omp_for_data fd;\n+\t\tomp_extract_for_data (as_a <gomp_for *> (ctx->stmt), &fd,\n+\t\t\t\t      NULL);\n+\t\titer_type = unsigned_type_for (fd.iter_type);\n+\t      }\n+\t    else if (gimple_code (ctx->stmt) == GIMPLE_OMP_SECTIONS)\n+\t      iter_type = unsigned_type_node;\n \t    cond_ptr = create_tmp_var_raw (build_pointer_type (iter_type));\n \t    DECL_CONTEXT (cond_ptr) = current_function_decl;\n \t    DECL_SEEN_IN_BIND_EXPR_P (cond_ptr) = 1;\n@@ -6739,7 +6745,7 @@ lower_omp_sections (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n   gomp_sections *stmt;\n   gimple *t;\n   gbind *new_stmt, *bind;\n-  gimple_seq ilist, dlist, olist, tred_dlist = NULL, new_body;\n+  gimple_seq ilist, dlist, olist, tred_dlist = NULL, clist = NULL, new_body;\n \n   stmt = as_a <gomp_sections *> (gsi_stmt (*gsi_p));\n \n@@ -6771,6 +6777,12 @@ lower_omp_sections (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n   lower_rec_input_clauses (gimple_omp_sections_clauses (stmt),\n       \t\t\t   &ilist, &dlist, ctx, NULL);\n \n+  control = create_tmp_var (unsigned_type_node, \".section\");\n+  gimple_omp_sections_set_control (stmt, control);\n+\n+  tree *clauses_ptr = gimple_omp_sections_clauses_ptr (stmt);\n+  lower_lastprivate_conditional_clauses (clauses_ptr, ctx);\n+\n   new_body = gimple_omp_body (stmt);\n   gimple_omp_set_body (stmt, NULL);\n   tgsi = gsi_start (new_body);\n@@ -6792,7 +6804,7 @@ lower_omp_sections (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \t{\n \t  gimple_seq l = NULL;\n \t  lower_lastprivate_clauses (gimple_omp_sections_clauses (stmt), NULL,\n-\t\t\t\t     NULL, &l, NULL, ctx);\n+\t\t\t\t     &ilist, &l, &clist, ctx);\n \t  gsi_insert_seq_after (&tgsi, l, GSI_CONTINUE_LINKING);\n \t  gimple_omp_section_set_last (sec_start);\n \t}\n@@ -6806,7 +6818,17 @@ lower_omp_sections (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \n   olist = NULL;\n   lower_reduction_clauses (gimple_omp_sections_clauses (stmt), &olist,\n-\t\t\t   NULL, ctx);\n+\t\t\t   &clist, ctx);\n+  if (clist)\n+    {\n+      tree fndecl = builtin_decl_explicit (BUILT_IN_GOMP_ATOMIC_START);\n+      gcall *g = gimple_build_call (fndecl, 0);\n+      gimple_seq_add_stmt (&olist, g);\n+      gimple_seq_add_seq (&olist, clist);\n+      fndecl = builtin_decl_explicit (BUILT_IN_GOMP_ATOMIC_END);\n+      g = gimple_build_call (fndecl, 0);\n+      gimple_seq_add_stmt (&olist, g);\n+    }\n \n   block = make_node (BLOCK);\n   new_stmt = gimple_build_bind (NULL, NULL, block);\n@@ -6824,9 +6846,7 @@ lower_omp_sections (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n   gimple_seq_add_stmt (&new_body, gimple_build_omp_sections_switch ());\n   gimple_seq_add_stmt (&new_body, bind);\n \n-  control = create_tmp_var (unsigned_type_node, \".section\");\n   t = gimple_build_omp_continue (control, control);\n-  gimple_omp_sections_set_control (stmt, control);\n   gimple_seq_add_stmt (&new_body, t);\n \n   gimple_seq_add_seq (&new_body, olist);\n@@ -10640,8 +10660,11 @@ lower_omp_1 (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \t  if (DECL_P (lhs))\n \t    if (tree *v = up->lastprivate_conditional_map->get (lhs))\n \t      {\n-\t\ttree clauses\n-\t\t  = gimple_omp_for_clauses (as_a <gomp_for *> (up->stmt));\n+\t\ttree clauses;\n+\t\tif (gimple_code (up->stmt) == GIMPLE_OMP_FOR)\n+\t\t  clauses = gimple_omp_for_clauses (up->stmt);\n+\t\telse\n+\t\t  clauses = gimple_omp_sections_clauses (up->stmt);\n \t\ttree c = omp_find_clause (clauses, OMP_CLAUSE__CONDTEMP_);\n \t\tc = omp_find_clause (OMP_CLAUSE_CHAIN (c),\n \t\t\t\t     OMP_CLAUSE__CONDTEMP_);"}, {"sha": "e6cda724fbd2fe2ea9d258f7142193dafbde14f9", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e7757ba17b1aeb83387c33004149a185a5fa137/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e7757ba17b1aeb83387c33004149a185a5fa137/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=8e7757ba17b1aeb83387c33004149a185a5fa137", "patch": "@@ -1,5 +1,7 @@\n 2019-05-27  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* testsuite/libgomp.c-c++-common/lastprivate_conditional_4.c: New test.\n+\n \t* testsuite/libgomp.c-c++-common/lastprivate-conditional-3.c: New test.\n \n \tPR libgomp/90641"}, {"sha": "bc102a10cd1465e2a61db83995077f8f6a8bdd61", "filename": "libgomp/testsuite/libgomp.c-c++-common/lastprivate_conditional_4.c", "status": "added", "additions": 161, "deletions": 0, "changes": 161, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e7757ba17b1aeb83387c33004149a185a5fa137/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Flastprivate_conditional_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e7757ba17b1aeb83387c33004149a185a5fa137/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Flastprivate_conditional_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Flastprivate_conditional_4.c?ref=8e7757ba17b1aeb83387c33004149a185a5fa137", "patch": "@@ -0,0 +1,161 @@\n+#include <stdlib.h>\n+\n+int x;\n+long long y;\n+int r, s, t;\n+\n+void\n+foo (const char *a)\n+{\n+  #pragma omp sections lastprivate (conditional: x, y)\n+  {\n+    if (a[0])\n+      x = a[0];\n+    #pragma omp section\n+    {\n+      if (a[1])\n+\tx = a[1];\n+      if (a[2])\n+\ty = a[2];\n+    }\n+    #pragma omp section\n+    if (a[3])\n+      y = a[3];\n+    #pragma omp section\n+    if (a[4])\n+      x = a[4];\n+    #pragma omp section\n+    {\n+      if (a[5])\n+\tx = a[5];\n+      if (a[6])\n+\ty = a[6];\n+    }\n+  }\n+}\n+\n+void\n+bar (const char *a)\n+{\n+  #pragma omp sections lastprivate (conditional: x, y) reduction (task, +: t)\n+  {\n+    if (a[0])\n+      x = a[0];\n+    #pragma omp section\n+    {\n+      if (a[1])\n+\tx = a[1];\n+      if (a[2])\n+\ty = a[2];\n+      #pragma omp task in_reduction (+: t)\n+      t++;\n+    }\n+    #pragma omp section\n+    if (a[3])\n+      y = a[3];\n+    #pragma omp section\n+    if (a[4])\n+      x = a[4];\n+    #pragma omp section\n+    {\n+      #pragma omp task in_reduction (+: t)\n+      ++t;\n+      if (a[5])\n+\tx = a[5];\n+      if (a[6])\n+\ty = a[6];\n+    }\n+  }\n+}\n+\n+void\n+baz (const char *a)\n+{\n+  #pragma omp sections lastprivate (conditional: x, y) reduction (+: r, s)\n+  {\n+    if (a[0])\n+      x = a[0];\n+    #pragma omp section\n+    {\n+      if (a[1])\n+\tx = a[1];\n+      ++r;\n+      ++s;\n+      if (a[2])\n+\ty = a[2];\n+    }\n+    #pragma omp section\n+    if (a[3])\n+      y = a[3];\n+    #pragma omp section\n+    {\n+      ++s;\n+      if (a[4])\n+\tx = a[4];\n+    }\n+    #pragma omp section\n+    {\n+      if (a[5])\n+\tx = a[5];\n+      if (a[6])\n+\ty = a[6];\n+      ++s;\n+    }\n+  }\n+}\n+\n+int\n+main ()\n+{\n+  #pragma omp parallel\n+  {\n+    foo (\"\\0\\1\\2\\3\\0\\5\");\n+    if (x != 5 || y != 3)\n+      abort ();\n+    #pragma omp barrier\n+    foo (\"\\6\\0\\0\\0\\0\\0\\7\");\n+    if (x != 6 || y != 7)\n+      abort ();\n+    #pragma omp barrier\n+    foo (\"\\7\\6\\5\\4\\3\\2\\1\");\n+    if (x != 2 || y != 1)\n+      abort ();\n+    #pragma omp barrier\n+    foo (\"\\0\\0\\4\\3\\0\\7\");\n+    if (x != 7 || y != 3)\n+      abort ();\n+    #pragma omp barrier\n+    bar (\"\\0\\1\\2\\4\\0\\5\");\n+    if (x != 5 || y != 4 || t != 2)\n+      abort ();\n+    #pragma omp barrier\n+    bar (\"\\6\\0\\0\\0\\0\\0\\7\");\n+    if (x != 6 || y != 7 || t != 4)\n+      abort ();\n+    #pragma omp barrier\n+    bar (\"\\7\\6\\5\\4\\3\\2\\1\");\n+    if (x != 2 || y != 1 || t != 6)\n+      abort ();\n+    #pragma omp barrier\n+    bar (\"\\0\\0\\4\\3\\0\\7\");\n+    if (x != 7 || y != 3 || t != 8)\n+      abort ();\n+    #pragma omp barrier\n+    baz (\"\\0\\1\\2\\4\\0\\5\");\n+    if (x != 5 || y != 4 || r != 1 || s != 3)\n+      abort ();\n+    #pragma omp barrier\n+    baz (\"\\6\\0\\0\\0\\0\\0\\7\");\n+    if (x != 6 || y != 7 || r != 2 || s != 6)\n+      abort ();\n+    #pragma omp barrier\n+    baz (\"\\7\\6\\5\\4\\3\\2\\1\");\n+    if (x != 2 || y != 1 || r != 3 || s != 9)\n+      abort ();\n+    #pragma omp barrier\n+    baz (\"\\0\\0\\4\\3\\0\\7\");\n+    if (x != 7 || y != 3 || r != 4 || s != 12)\n+      abort ();\n+  }\n+  return 0;\n+}"}]}