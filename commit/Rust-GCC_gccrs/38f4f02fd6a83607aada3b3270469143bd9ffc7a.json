{"sha": "38f4f02fd6a83607aada3b3270469143bd9ffc7a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzhmNGYwMmZkNmE4MzYwN2FhZGEzYjMyNzA0NjkxNDNiZDlmZmM3YQ==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@codesourcery.com", "date": "2013-11-18T22:16:37Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2013-11-18T22:16:37Z"}, "message": "Remove all_lto_gen_passes, replace with plain function calls\n\n\t* cgraphunit.c (ipa_passes): Don't execute all_lto_gen_passes.\n\t* lto-streamer-out.c (lto_output, produce_asm_for_decls): No longer\n\tstatic.\n\t(pass_data_ipa_lto_gimple_out, pass_ipa_lto_gimple_out,\n\tmake_pass_ipa_lto_gimple_out, pass_data_ipa_lto_finish_out,\n\tpass_ipa_lto_finish_out, make_pass_ipa_lto_finish_out): Remove.\n\t* lto-streamer.h (lto_output, produce_asm_for_decls): Declare.\n\t* pass-manager.h (GCC_PASS_LISTS, class pass_manager):\n\tRemove all_lto_gen_passes.\n\t* passes.c (pass_manager::dump_passes): Remove its use.\n\t(pass_manager::register_pass): Likewise.\n\t(ipa_read_summaries, ipa_read_optimization_summaries): Likewise.\n\t(pass_manager::pass_manager): Don't initialize or use it.\n\t(write_lto): New static function.\n\t(ipa_write_summaries_1, ipa_write_optimization_summaries): Use it\n\tinstead of using all_lto_gen_passes.\n\t* passes.def (all_lto_gen_passes, pass_ipa_lto_gimple_out,\n\tpass_ipa_lto_finish_out): Delete.\n\t* tree-pass.h (make_pass_ipa_lto_gimple_out,\n\tmake_pass_ipa_lto_finish_out): Don't declare.\n\nFrom-SVN: r204984", "tree": {"sha": "99d9aea67e80ae40bd6bfd83c82954aa16dccb28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/99d9aea67e80ae40bd6bfd83c82954aa16dccb28"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/38f4f02fd6a83607aada3b3270469143bd9ffc7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38f4f02fd6a83607aada3b3270469143bd9ffc7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38f4f02fd6a83607aada3b3270469143bd9ffc7a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38f4f02fd6a83607aada3b3270469143bd9ffc7a/comments", "author": null, "committer": null, "parents": [{"sha": "867c8b03ffc45fee45b414d511ccf125ca5a8c4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/867c8b03ffc45fee45b414d511ccf125ca5a8c4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/867c8b03ffc45fee45b414d511ccf125ca5a8c4c"}], "stats": {"total": 169, "additions": 47, "deletions": 122}, "files": [{"sha": "498f78048239f21d1b0a3e8ff21c9a070715a516", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38f4f02fd6a83607aada3b3270469143bd9ffc7a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38f4f02fd6a83607aada3b3270469143bd9ffc7a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=38f4f02fd6a83607aada3b3270469143bd9ffc7a", "patch": "@@ -1,3 +1,26 @@\n+2013-11-18  Bernd Schmidt  <bernds@codesourcery.com>\n+\n+\t* cgraphunit.c (ipa_passes): Don't execute all_lto_gen_passes.\n+\t* lto-streamer-out.c (lto_output, produce_asm_for_decls): No longer\n+\tstatic.\n+\t(pass_data_ipa_lto_gimple_out, pass_ipa_lto_gimple_out,\n+\tmake_pass_ipa_lto_gimple_out, pass_data_ipa_lto_finish_out,\n+\tpass_ipa_lto_finish_out, make_pass_ipa_lto_finish_out): Remove.\n+\t* lto-streamer.h (lto_output, produce_asm_for_decls): Declare.\n+\t* pass-manager.h (GCC_PASS_LISTS, class pass_manager):\n+\tRemove all_lto_gen_passes.\n+\t* passes.c (pass_manager::dump_passes): Remove its use.\n+\t(pass_manager::register_pass): Likewise.\n+\t(ipa_read_summaries, ipa_read_optimization_summaries): Likewise.\n+\t(pass_manager::pass_manager): Don't initialize or use it.\n+\t(write_lto): New static function.\n+\t(ipa_write_summaries_1, ipa_write_optimization_summaries): Use it\n+\tinstead of using all_lto_gen_passes.\n+\t* passes.def (all_lto_gen_passes, pass_ipa_lto_gimple_out,\n+\tpass_ipa_lto_finish_out): Delete.\n+\t* tree-pass.h (make_pass_ipa_lto_gimple_out,\n+\tmake_pass_ipa_lto_finish_out): Don't declare.\n+\n 2013-11-18  Jeff Law  <law@redhat.com>\n \n \t* tree-ssa-threadupdate.c (redirection_data): Record two\n@@ -11,7 +34,7 @@\n \tblocks duplicated, then duplicate them.\n \t(ssa_fix_duplicate_block_edges): Corresponding changes.\n \t(ssa_fixup_template_block, thread_single_edge):  Likewise.\n-\t\n+\n 2013-11-18  Marek Polacek  <polacek@redhat.com>\n \n \t* doc/invoke.texi: Extend -fsanitize=undefined documentation."}, {"sha": "cbd32aaab3ebc8608b2536b0fda61f390ba28f66", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38f4f02fd6a83607aada3b3270469143bd9ffc7a/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38f4f02fd6a83607aada3b3270469143bd9ffc7a/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=38f4f02fd6a83607aada3b3270469143bd9ffc7a", "patch": "@@ -2019,9 +2019,6 @@ ipa_passes (void)\n   if (flag_generate_lto)\n     targetm.asm_out.lto_start ();\n \n-  execute_ipa_summary_passes ((struct ipa_opt_pass_d *)\n-\t\t\t      passes->all_lto_gen_passes);\n-\n   if (!in_lto_p)\n     ipa_write_summaries ();\n "}, {"sha": "5176e35b70d43063122ea4cacfb7db70e61e7d02", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 2, "deletions": 96, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38f4f02fd6a83607aada3b3270469143bd9ffc7a/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38f4f02fd6a83607aada3b3270469143bd9ffc7a/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=38f4f02fd6a83607aada3b3270469143bd9ffc7a", "patch": "@@ -1966,7 +1966,7 @@ copy_function (struct cgraph_node *node)\n \n /* Main entry point from the pass manager.  */\n \n-static void\n+void\n lto_output (void)\n {\n   struct lto_out_decl_state *decl_state;\n@@ -2016,53 +2016,6 @@ lto_output (void)\n #endif\n }\n \n-namespace {\n-\n-const pass_data pass_data_ipa_lto_gimple_out =\n-{\n-  IPA_PASS, /* type */\n-  \"lto_gimple_out\", /* name */\n-  OPTGROUP_NONE, /* optinfo_flags */\n-  true, /* has_gate */\n-  false, /* has_execute */\n-  TV_IPA_LTO_GIMPLE_OUT, /* tv_id */\n-  0, /* properties_required */\n-  0, /* properties_provided */\n-  0, /* properties_destroyed */\n-  0, /* todo_flags_start */\n-  0, /* todo_flags_finish */\n-};\n-\n-class pass_ipa_lto_gimple_out : public ipa_opt_pass_d\n-{\n-public:\n-  pass_ipa_lto_gimple_out (gcc::context *ctxt)\n-    : ipa_opt_pass_d (pass_data_ipa_lto_gimple_out, ctxt,\n-\t\t      NULL, /* generate_summary */\n-\t\t      lto_output, /* write_summary */\n-\t\t      NULL, /* read_summary */\n-\t\t      lto_output, /* write_optimization_summary */\n-\t\t      NULL, /* read_optimization_summary */\n-\t\t      NULL, /* stmt_fixup */\n-\t\t      0, /* function_transform_todo_flags_start */\n-\t\t      NULL, /* function_transform */\n-\t\t      NULL) /* variable_transform */\n-  {}\n-\n-  /* opt_pass methods: */\n-  bool gate () { return gate_lto_out (); }\n-\n-}; // class pass_ipa_lto_gimple_out\n-\n-} // anon namespace\n-\n-ipa_opt_pass_d *\n-make_pass_ipa_lto_gimple_out (gcc::context *ctxt)\n-{\n-  return new pass_ipa_lto_gimple_out (ctxt);\n-}\n-\n-\n /* Write each node in encoded by ENCODER to OB, as well as those reachable\n    from it and required for correct representation of its semantics.\n    Each node in ENCODER must be a global declaration or a type.  A node\n@@ -2382,7 +2335,7 @@ produce_symtab (struct output_block *ob)\n    this file to be written in to a section that can then be read in to\n    recover these on other side.  */\n \n-static void\n+void\n produce_asm_for_decls (void)\n {\n   struct lto_out_decl_state *out_state;\n@@ -2486,50 +2439,3 @@ produce_asm_for_decls (void)\n   lto_function_decl_states.release ();\n   destroy_output_block (ob);\n }\n-\n-\n-namespace {\n-\n-const pass_data pass_data_ipa_lto_finish_out =\n-{\n-  IPA_PASS, /* type */\n-  \"lto_decls_out\", /* name */\n-  OPTGROUP_NONE, /* optinfo_flags */\n-  true, /* has_gate */\n-  false, /* has_execute */\n-  TV_IPA_LTO_DECL_OUT, /* tv_id */\n-  0, /* properties_required */\n-  0, /* properties_provided */\n-  0, /* properties_destroyed */\n-  0, /* todo_flags_start */\n-  0, /* todo_flags_finish */\n-};\n-\n-class pass_ipa_lto_finish_out : public ipa_opt_pass_d\n-{\n-public:\n-  pass_ipa_lto_finish_out (gcc::context *ctxt)\n-    : ipa_opt_pass_d (pass_data_ipa_lto_finish_out, ctxt,\n-\t\t      NULL, /* generate_summary */\n-\t\t      produce_asm_for_decls, /* write_summary */\n-\t\t      NULL, /* read_summary */\n-\t\t      produce_asm_for_decls, /* write_optimization_summary */\n-\t\t      NULL, /* read_optimization_summary */\n-\t\t      NULL, /* stmt_fixup */\n-\t\t      0, /* function_transform_todo_flags_start */\n-\t\t      NULL, /* function_transform */\n-\t\t      NULL) /* variable_transform */\n-  {}\n-\n-  /* opt_pass methods: */\n-  bool gate () { return gate_lto_out (); }\n-\n-}; // class pass_ipa_lto_finish_out\n-\n-} // anon namespace\n-\n-ipa_opt_pass_d *\n-make_pass_ipa_lto_finish_out (gcc::context *ctxt)\n-{\n-  return new pass_ipa_lto_finish_out (ctxt);\n-}"}, {"sha": "9dac7c9e8461de90af14b93f00157442881498d5", "filename": "gcc/lto-streamer.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38f4f02fd6a83607aada3b3270469143bd9ffc7a/gcc%2Flto-streamer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38f4f02fd6a83607aada3b3270469143bd9ffc7a/gcc%2Flto-streamer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer.h?ref=38f4f02fd6a83607aada3b3270469143bd9ffc7a", "patch": "@@ -862,6 +862,8 @@ extern void destroy_output_block (struct output_block *);\n extern void lto_output_tree (struct output_block *, tree, bool, bool);\n extern void lto_output_toplevel_asms (void);\n extern void produce_asm (struct output_block *ob, tree fn);\n+extern void lto_output ();\n+extern void produce_asm_for_decls ();\n void lto_output_decl_state_streams (struct output_block *,\n \t\t\t\t    struct lto_out_decl_state *);\n void lto_output_decl_state_refs (struct output_block *,"}, {"sha": "9a71e9c7cbf9725795377426050a51d97551b67d", "filename": "gcc/pass_manager.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38f4f02fd6a83607aada3b3270469143bd9ffc7a/gcc%2Fpass_manager.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38f4f02fd6a83607aada3b3270469143bd9ffc7a/gcc%2Fpass_manager.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpass_manager.h?ref=38f4f02fd6a83607aada3b3270469143bd9ffc7a", "patch": "@@ -29,7 +29,6 @@ struct register_pass_info;\n   DEF_PASS_LIST (all_lowering_passes) \\\n   DEF_PASS_LIST (all_small_ipa_passes) \\\n   DEF_PASS_LIST (all_regular_ipa_passes) \\\n-  DEF_PASS_LIST (all_lto_gen_passes) \\\n   DEF_PASS_LIST (all_passes)\n \n #define DEF_PASS_LIST(LIST) PASS_LIST_NO_##LIST,\n@@ -82,7 +81,6 @@ class pass_manager\n   opt_pass *all_small_ipa_passes;\n   opt_pass *all_lowering_passes;\n   opt_pass *all_regular_ipa_passes;\n-  opt_pass *all_lto_gen_passes;\n   opt_pass *all_late_ipa_passes;\n \n   /* A map from static pass id to optimization pass.  */"}, {"sha": "55ec70f8962b492b8b2e05c76637b54ee9448524", "filename": "gcc/passes.c", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38f4f02fd6a83607aada3b3270469143bd9ffc7a/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38f4f02fd6a83607aada3b3270469143bd9ffc7a/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=38f4f02fd6a83607aada3b3270469143bd9ffc7a", "patch": "@@ -907,7 +907,6 @@ pass_manager::dump_passes () const\n   dump_pass_list (all_lowering_passes, 1);\n   dump_pass_list (all_small_ipa_passes, 1);\n   dump_pass_list (all_regular_ipa_passes, 1);\n-  dump_pass_list (all_lto_gen_passes, 1);\n   dump_pass_list (all_late_ipa_passes, 1);\n   dump_pass_list (all_passes, 1);\n \n@@ -1425,8 +1424,6 @@ pass_manager::register_pass (struct register_pass_info *pass_info)\n     success |= position_pass (pass_info, &all_small_ipa_passes);\n   if (!success || all_instances)\n     success |= position_pass (pass_info, &all_regular_ipa_passes);\n-  if (!success || all_instances)\n-    success |= position_pass (pass_info, &all_lto_gen_passes);\n   if (!success || all_instances)\n     success |= position_pass (pass_info, &all_late_ipa_passes);\n   if (!success || all_instances)\n@@ -1498,7 +1495,7 @@ pass_manager::operator new (size_t sz)\n \n pass_manager::pass_manager (context *ctxt)\n : all_passes (NULL), all_small_ipa_passes (NULL), all_lowering_passes (NULL),\n-  all_regular_ipa_passes (NULL), all_lto_gen_passes (NULL),\n+  all_regular_ipa_passes (NULL),\n   all_late_ipa_passes (NULL), passes_by_id (NULL), passes_by_id_size (0),\n   m_ctxt (ctxt)\n {\n@@ -1553,9 +1550,6 @@ pass_manager::pass_manager (context *ctxt)\n   register_dump_files (all_regular_ipa_passes,\n \t\t       PROP_gimple_any | PROP_gimple_lcf | PROP_gimple_leh\n \t\t       | PROP_cfg);\n-  register_dump_files (all_lto_gen_passes,\n-\t\t       PROP_gimple_any | PROP_gimple_lcf | PROP_gimple_leh\n-\t\t       | PROP_cfg);\n   register_dump_files (all_late_ipa_passes,\n \t\t       PROP_gimple_any | PROP_gimple_lcf | PROP_gimple_leh\n \t\t       | PROP_cfg);\n@@ -2274,6 +2268,18 @@ execute_pass_list (struct opt_pass *pass)\n   while (pass);\n }\n \n+/* Write out all LTO data.  */\n+static void\n+write_lto (void)\n+{\n+  timevar_push (TV_IPA_LTO_GIMPLE_OUT);\n+  lto_output ();\n+  timevar_pop (TV_IPA_LTO_GIMPLE_OUT);\n+  timevar_push (TV_IPA_LTO_DECL_OUT);\n+  produce_asm_for_decls ();\n+  timevar_pop (TV_IPA_LTO_DECL_OUT);\n+}\n+\n /* Same as execute_pass_list but assume that subpasses of IPA passes\n    are local passes. If SET is not NULL, write out summaries of only\n    those node in SET. */\n@@ -2328,7 +2334,8 @@ ipa_write_summaries_1 (lto_symtab_encoder_t encoder)\n \n   gcc_assert (!flag_wpa);\n   ipa_write_summaries_2 (passes->all_regular_ipa_passes, state);\n-  ipa_write_summaries_2 (passes->all_lto_gen_passes, state);\n+\n+  write_lto ();\n \n   gcc_assert (lto_get_out_decl_state () == state);\n   lto_pop_out_decl_state ();\n@@ -2461,7 +2468,8 @@ ipa_write_optimization_summaries (lto_symtab_encoder_t encoder)\n   gcc_assert (flag_wpa);\n   pass_manager *passes = g->get_passes ();\n   ipa_write_optimization_summaries_1 (passes->all_regular_ipa_passes, state);\n-  ipa_write_optimization_summaries_1 (passes->all_lto_gen_passes, state);\n+\n+  write_lto ();\n \n   gcc_assert (lto_get_out_decl_state () == state);\n   lto_pop_out_decl_state ();\n@@ -2509,14 +2517,13 @@ ipa_read_summaries_1 (struct opt_pass *pass)\n }\n \n \n-/* Read all the summaries for all_regular_ipa_passes and all_lto_gen_passes.  */\n+/* Read all the summaries for all_regular_ipa_passes.  */\n \n void\n ipa_read_summaries (void)\n {\n   pass_manager *passes = g->get_passes ();\n   ipa_read_summaries_1 (passes->all_regular_ipa_passes);\n-  ipa_read_summaries_1 (passes->all_lto_gen_passes);\n }\n \n /* Same as execute_pass_list but assume that subpasses of IPA passes\n@@ -2559,14 +2566,13 @@ ipa_read_optimization_summaries_1 (struct opt_pass *pass)\n     }\n }\n \n-/* Read all the summaries for all_regular_ipa_passes and all_lto_gen_passes.  */\n+/* Read all the summaries for all_regular_ipa_passes.  */\n \n void\n ipa_read_optimization_summaries (void)\n {\n   pass_manager *passes = g->get_passes ();\n   ipa_read_optimization_summaries_1 (passes->all_regular_ipa_passes);\n-  ipa_read_optimization_summaries_1 (passes->all_lto_gen_passes);\n }\n \n /* Same as execute_pass_list but assume that subpasses of IPA passes"}, {"sha": "8480991f60d65de5dfb53afcf93a8e1fc5d2e941", "filename": "gcc/passes.def", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38f4f02fd6a83607aada3b3270469143bd9ffc7a/gcc%2Fpasses.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38f4f02fd6a83607aada3b3270469143bd9ffc7a/gcc%2Fpasses.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.def?ref=38f4f02fd6a83607aada3b3270469143bd9ffc7a", "patch": "@@ -111,11 +111,6 @@ along with GCC; see the file COPYING3.  If not see\n   NEXT_PASS (pass_ipa_reference);\n   TERMINATE_PASS_LIST ()\n \n-  INSERT_PASSES_AFTER (all_lto_gen_passes)\n-  NEXT_PASS (pass_ipa_lto_gimple_out);\n-  NEXT_PASS (pass_ipa_lto_finish_out);  /* This must be the last LTO pass.  */\n-  TERMINATE_PASS_LIST ()\n-\n   /* Simple IPA passes executed after the regular passes.  In WHOPR mode the\n      passes are executed after partitioning and thus see just parts of the\n      compiled unit.  */"}, {"sha": "77abd94d439f08cf6c8df2452039ce6e2ed3132d", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38f4f02fd6a83607aada3b3270469143bd9ffc7a/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38f4f02fd6a83607aada3b3270469143bd9ffc7a/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=38f4f02fd6a83607aada3b3270469143bd9ffc7a", "patch": "@@ -458,7 +458,6 @@ extern simple_ipa_opt_pass *make_pass_early_local_passes (gcc::context *ctxt);\n \n extern ipa_opt_pass_d *make_pass_ipa_whole_program_visibility (gcc::context\n \t\t\t\t\t\t\t       *ctxt);\n-extern ipa_opt_pass_d *make_pass_ipa_lto_gimple_out (gcc::context *ctxt);\n extern simple_ipa_opt_pass *make_pass_ipa_increase_alignment (gcc::context\n \t\t\t\t\t\t\t      *ctxt);\n extern ipa_opt_pass_d *make_pass_ipa_inline (gcc::context *ctxt);\n@@ -470,7 +469,6 @@ extern ipa_opt_pass_d *make_pass_ipa_devirt (gcc::context *ctxt);\n extern ipa_opt_pass_d *make_pass_ipa_reference (gcc::context *ctxt);\n extern ipa_opt_pass_d *make_pass_ipa_pure_const (gcc::context *ctxt);\n extern simple_ipa_opt_pass *make_pass_ipa_pta (gcc::context *ctxt);\n-extern ipa_opt_pass_d *make_pass_ipa_lto_finish_out (gcc::context *ctxt);\n extern simple_ipa_opt_pass *make_pass_ipa_tm (gcc::context *ctxt);\n extern ipa_opt_pass_d *make_pass_ipa_profile (gcc::context *ctxt);\n extern ipa_opt_pass_d *make_pass_ipa_cdtor_merge (gcc::context *ctxt);"}]}