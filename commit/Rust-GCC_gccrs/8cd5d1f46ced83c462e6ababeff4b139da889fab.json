{"sha": "8cd5d1f46ced83c462e6ababeff4b139da889fab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGNkNWQxZjQ2Y2VkODNjNDYyZTZhYmFiZWZmNGIxMzlkYTg4OWZhYg==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2016-04-30T00:34:58Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2016-04-30T00:34:58Z"}, "message": "[RS6000] Split SAVRES_STRATEGY\n\nNo functional change here.  A single bit becomes two bits, which\nalways have the same value at the moment.\n\n\t* config/rs6000/rs6000.c (SAVRES_MULTIPLE): Replace with..\n\t(SAVE_STRATEGY, REST_STRATEGY): ..this.  Renumber and sort enum.\n\tUpdate all uses.\n\nFrom-SVN: r235671", "tree": {"sha": "e6e7338bb96f5db8bda1f7ed47c0363ca304e14b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e6e7338bb96f5db8bda1f7ed47c0363ca304e14b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8cd5d1f46ced83c462e6ababeff4b139da889fab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cd5d1f46ced83c462e6ababeff4b139da889fab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8cd5d1f46ced83c462e6ababeff4b139da889fab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cd5d1f46ced83c462e6ababeff4b139da889fab/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "223de6dae11fe1d12c10511b79a33e977e1eeaba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/223de6dae11fe1d12c10511b79a33e977e1eeaba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/223de6dae11fe1d12c10511b79a33e977e1eeaba"}], "stats": {"total": 41, "additions": 24, "deletions": 17}, "files": [{"sha": "451ea71407536c102b87d5e0165f49fd36b55052", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cd5d1f46ced83c462e6ababeff4b139da889fab/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cd5d1f46ced83c462e6ababeff4b139da889fab/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8cd5d1f46ced83c462e6ababeff4b139da889fab", "patch": "@@ -1,3 +1,9 @@\n+2016-04-30  Alan Modra  <amodra@gmail.com>\n+\n+\t* config/rs6000/rs6000.c (SAVRES_MULTIPLE): Replace with..\n+\t(SAVE_STRATEGY, REST_STRATEGY): ..this.  Renumber and sort enum.\n+\tUpdate all uses.\n+\n 2016-04-30  Alan Modra  <amodra@gmail.com>\n \n \tPR target/69645"}, {"sha": "7a1d516d87727d5ed8d16431cde119926aaef354", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cd5d1f46ced83c462e6ababeff4b139da889fab/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cd5d1f46ced83c462e6ababeff4b139da889fab/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=8cd5d1f46ced83c462e6ababeff4b139da889fab", "patch": "@@ -23265,16 +23265,17 @@ fixed_regs_p (unsigned first, unsigned last)\n /* Determine the strategy for savings/restoring registers.  */\n \n enum {\n-  SAVRES_MULTIPLE = 0x1,\n-  SAVE_INLINE_FPRS = 0x2,\n-  SAVE_INLINE_GPRS = 0x4,\n-  REST_INLINE_FPRS = 0x8,\n-  REST_INLINE_GPRS = 0x10,\n-  SAVE_NOINLINE_GPRS_SAVES_LR = 0x20,\n-  SAVE_NOINLINE_FPRS_SAVES_LR = 0x40,\n-  REST_NOINLINE_FPRS_DOESNT_RESTORE_LR = 0x80,\n-  SAVE_INLINE_VRS = 0x100,\n-  REST_INLINE_VRS = 0x200\n+  SAVE_MULTIPLE = 0x1,\n+  SAVE_INLINE_GPRS = 0x2,\n+  SAVE_INLINE_FPRS = 0x4,\n+  SAVE_NOINLINE_GPRS_SAVES_LR = 0x8,\n+  SAVE_NOINLINE_FPRS_SAVES_LR = 0x10,\n+  SAVE_INLINE_VRS = 0x20,\n+  REST_MULTIPLE = 0x100,\n+  REST_INLINE_GPRS = 0x200,\n+  REST_INLINE_FPRS = 0x400,\n+  REST_NOINLINE_FPRS_DOESNT_RESTORE_LR = 0x800,\n+  REST_INLINE_VRS = 0x1000\n };\n \n static int\n@@ -23289,7 +23290,7 @@ rs6000_savres_strategy (rs6000_stack_t *info,\n       && !(TARGET_SPE_ABI && info->spe_64bit_regs_used)\n       && info->first_gp_reg_save < 31\n       && !fixed_regs_p (info->first_gp_reg_save, 32))\n-    strategy |= SAVRES_MULTIPLE;\n+    strategy |= SAVE_MULTIPLE | REST_MULTIPLE;\n \n   if (crtl->calls_eh_return\n       || cfun->machine->ra_need_lr)\n@@ -23305,7 +23306,7 @@ rs6000_savres_strategy (rs6000_stack_t *info,\n     strategy |= SAVE_INLINE_FPRS | REST_INLINE_FPRS;\n \n   if (info->first_gp_reg_save == 32\n-      || (!(strategy & SAVRES_MULTIPLE)\n+      || (!(strategy & (SAVE_MULTIPLE | REST_MULTIPLE))\n \t  && fixed_regs_p (info->first_gp_reg_save, 32)))\n     strategy |= SAVE_INLINE_GPRS | REST_INLINE_GPRS;\n \n@@ -23383,7 +23384,7 @@ rs6000_savres_strategy (rs6000_stack_t *info,\n   /* If we are going to use store multiple, then don't even bother\n      with the out-of-line routines, since the store-multiple\n      instruction will always be smaller.  */\n-  if ((strategy & SAVRES_MULTIPLE))\n+  if ((strategy & (SAVE_MULTIPLE | REST_MULTIPLE)))\n     strategy |= SAVE_INLINE_GPRS;\n \n   /* info->lr_save_p isn't yet set if the only reason lr needs to be\n@@ -23404,7 +23405,7 @@ rs6000_savres_strategy (rs6000_stack_t *info,\n      LR, and we can't use the \"exit\" out-of-line gpr restore if we\n      have saved some fprs; In those cases it is advantageous to use\n      load multiple when available.  */\n-  if ((strategy & SAVRES_MULTIPLE)\n+  if ((strategy & (SAVE_MULTIPLE | REST_MULTIPLE))\n       && (!lr_save_p\n \t  || info->first_fp_reg_save != 64))\n     strategy |= REST_INLINE_GPRS;\n@@ -23420,7 +23421,7 @@ rs6000_savres_strategy (rs6000_stack_t *info,\n      restore if we've used store multiple or out-of-line routines\n      in the prologue, i.e. if we've saved all the registers from\n      first_gp_reg_save.  Otherwise, we risk loading garbage.  */\n-  if ((strategy & (SAVE_INLINE_GPRS | REST_INLINE_GPRS | SAVRES_MULTIPLE))\n+  if ((strategy & (SAVE_INLINE_GPRS | REST_INLINE_GPRS | SAVE_MULTIPLE | REST_MULTIPLE))\n       == SAVE_INLINE_GPRS)\n     {\n       int i;\n@@ -25795,7 +25796,7 @@ rs6000_emit_prologue (void)\n       if (lr)\n \tEND_USE (0);\n     }\n-  else if (!WORLD_SAVE_P (info) && (strategy & SAVRES_MULTIPLE))\n+  else if (!WORLD_SAVE_P (info) && (strategy & SAVE_MULTIPLE))\n     {\n       rtvec p;\n       int i;\n@@ -26707,7 +26708,7 @@ rs6000_emit_epilogue (int sibcall)\n     }\n \n   strategy = info->savres_strategy;\n-  using_load_multiple = strategy & SAVRES_MULTIPLE;\n+  using_load_multiple = strategy & REST_MULTIPLE;\n   restoring_FPRs_inline = sibcall || (strategy & REST_INLINE_FPRS);\n   restoring_GPRs_inline = sibcall || (strategy & REST_INLINE_GPRS);\n   using_mtcr_multiple = (rs6000_cpu == PROCESSOR_PPC601"}]}