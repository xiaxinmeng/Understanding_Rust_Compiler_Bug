{"sha": "6b6d5d092292a33a5463f18b8d55e9818e5f8c02", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmI2ZDVkMDkyMjkyYTMzYTU0NjNmMThiOGQ1NWU5ODE4ZTVmOGMwMg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-11-14T18:41:01Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-11-14T18:41:01Z"}, "message": "stl_tree.h (_Rb_tree<>::_M_const_cast_iter): Remove.\n\n2010-11-14  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/stl_tree.h (_Rb_tree<>::_M_const_cast_iter): Remove.\n\t(_Rb_tree_const_iterator<>::_M_const_cast): Add.\n\t(_Rb_tree<>::erase, _M_insert_unique_): Adjust.\n\t* include/debug/map.h (map<>::erase, insert): Fix C++0x signatures.\n\t* include/debug/multimap.h (multimap<>::erase, insert): Likewise.\n\t* include/debug/set.h (set<>::erase, insert): Fix, only cosmetic\n\tchanges in this case.\n\t* include/debug/multiset.h (multiset<>::erase, insert): Likewise.\n\t* include/profile/set.h (set<>::insert): Remove redundant macro.\n\t* include/profile/multiset.h (multiset<>::insert): Likewise.\n\t* include/bits/stl_set.h (set<>::insert): Likewise.\n\t* include/bits/stl_multiset.h (multiset<>::insert): Likewise.\n\nFrom-SVN: r166734", "tree": {"sha": "fcb23e8bb645ab48cfb497aef32b65dbdf8d822d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fcb23e8bb645ab48cfb497aef32b65dbdf8d822d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b6d5d092292a33a5463f18b8d55e9818e5f8c02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b6d5d092292a33a5463f18b8d55e9818e5f8c02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b6d5d092292a33a5463f18b8d55e9818e5f8c02", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b6d5d092292a33a5463f18b8d55e9818e5f8c02/comments", "author": null, "committer": null, "parents": [{"sha": "fc3f9236ec74805ed3b82f0839aa123b13d3a0f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc3f9236ec74805ed3b82f0839aa123b13d3a0f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc3f9236ec74805ed3b82f0839aa123b13d3a0f4"}], "stats": {"total": 85, "additions": 46, "deletions": 39}, "files": [{"sha": "0e0418b87a9e4ca5a0eb5b9f181c3021d31fa97e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b6d5d092292a33a5463f18b8d55e9818e5f8c02/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b6d5d092292a33a5463f18b8d55e9818e5f8c02/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6b6d5d092292a33a5463f18b8d55e9818e5f8c02", "patch": "@@ -1,3 +1,18 @@\n+2010-11-14  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/stl_tree.h (_Rb_tree<>::_M_const_cast_iter): Remove.\n+\t(_Rb_tree_const_iterator<>::_M_const_cast): Add.\n+\t(_Rb_tree<>::erase, _M_insert_unique_): Adjust.\n+\t* include/debug/map.h (map<>::erase, insert): Fix C++0x signatures.\n+\t* include/debug/multimap.h (multimap<>::erase, insert): Likewise.\n+\t* include/debug/set.h (set<>::erase, insert): Fix, only cosmetic\n+\tchanges in this case.\n+\t* include/debug/multiset.h (multiset<>::erase, insert): Likewise.\n+\t* include/profile/set.h (set<>::insert): Remove redundant macro.\n+\t* include/profile/multiset.h (multiset<>::insert): Likewise.\n+\t* include/bits/stl_set.h (set<>::insert): Likewise.\n+\t* include/bits/stl_multiset.h (multiset<>::insert): Likewise.\n+\n 2010-11-12  Ian Lance Taylor  <iant@google.com>\n \n \tPR other/46332"}, {"sha": "58f902c53f099f8b7a2797139c7f429664fb1698", "filename": "libstdc++-v3/include/bits/stl_multiset.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b6d5d092292a33a5463f18b8d55e9818e5f8c02/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b6d5d092292a33a5463f18b8d55e9818e5f8c02/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h?ref=6b6d5d092292a33a5463f18b8d55e9818e5f8c02", "patch": "@@ -423,11 +423,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        *  Insertion requires logarithmic time (if the hint is not taken).\n        */\n       iterator\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n       insert(const_iterator __position, const value_type& __x)\n-#else\n-      insert(iterator __position, const value_type& __x)\n-#endif\n       { return _M_t._M_insert_equal_(__position, __x); }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__"}, {"sha": "8d82716d3cb1d79157aca6ff50566553352fce6f", "filename": "libstdc++-v3/include/bits/stl_set.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b6d5d092292a33a5463f18b8d55e9818e5f8c02/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b6d5d092292a33a5463f18b8d55e9818e5f8c02/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h?ref=6b6d5d092292a33a5463f18b8d55e9818e5f8c02", "patch": "@@ -439,11 +439,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        *  Insertion requires logarithmic time (if the hint is not taken).\n        */\n       iterator\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n       insert(const_iterator __position, const value_type& __x)\n-#else\n-      insert(iterator __position, const value_type& __x)\n-#endif\n       { return _M_t._M_insert_unique_(__position, __x); }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__"}, {"sha": "8919030631554150f64a3902cb9712bb58171a21", "filename": "libstdc++-v3/include/bits/stl_tree.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b6d5d092292a33a5463f18b8d55e9818e5f8c02/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b6d5d092292a33a5463f18b8d55e9818e5f8c02/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h?ref=6b6d5d092292a33a5463f18b8d55e9818e5f8c02", "patch": "@@ -247,6 +247,11 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       _Rb_tree_const_iterator(const iterator& __it)\n       : _M_node(__it._M_node) { }\n \n+      iterator\n+      _M_const_cast() const\n+      { return iterator(static_cast<typename iterator::_Link_type>\n+\t\t\t(const_cast<typename iterator::_Base_ptr>(_M_node))); }\n+\n       reference\n       operator*() const\n       { return static_cast<_Link_type>(_M_node)->_M_value_field; }\n@@ -556,11 +561,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       typedef std::reverse_iterator<const_iterator> const_reverse_iterator;\n \n     private:\n-      iterator\n-      _M_const_cast_iter(const_iterator __cit)\n-      { return iterator(static_cast<_Link_type>\n-\t\t\t(const_cast<_Base_ptr>(__cit._M_node))); }\n-\n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       template<typename _Arg>\n         iterator\n@@ -756,7 +756,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \tconst_iterator __result = __position;\n \t++__result;\n \t_M_erase_aux(__position);\n-\treturn _M_const_cast_iter(__result);\n+\treturn __result._M_const_cast();\n       }\n #else\n       void\n@@ -773,7 +773,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       erase(const_iterator __first, const_iterator __last)\n       {\n \t_M_erase_aux(__first, __last);\n-\treturn _M_const_cast_iter(__last);\n+\treturn __last._M_const_cast();\n       }\n #else\n       void\n@@ -1364,7 +1364,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t}\n       else\n \t// Equivalent keys.\n-\treturn _M_const_cast_iter(__position);\n+\treturn __position._M_const_cast();\n     }\n \n   template<typename _Key, typename _Val, typename _KeyOfValue,"}, {"sha": "6e8858c6706fdc64f029e178b57714b03d61e715", "filename": "libstdc++-v3/include/debug/map.h", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b6d5d092292a33a5463f18b8d55e9818e5f8c02/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b6d5d092292a33a5463f18b8d55e9818e5f8c02/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h?ref=6b6d5d092292a33a5463f18b8d55e9818e5f8c02", "patch": "@@ -232,7 +232,11 @@ namespace __debug\n #endif\n \n       iterator\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      insert(const_iterator __position, const value_type& __x)\n+#else\n       insert(iterator __position, const value_type& __x)\n+#endif\n       {\n \t__glibcxx_check_insert(__position);\n \treturn iterator(_Base::insert(__position.base(), __x), this);\n@@ -262,7 +266,7 @@ namespace __debug\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       iterator\n-      erase(iterator __position)\n+      erase(const_iterator __position)\n       {\n \t__glibcxx_check_erase(__position);\n \t__position._M_invalidate();\n@@ -294,14 +298,14 @@ namespace __debug\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       iterator\n-      erase(iterator __first, iterator __last)\n+      erase(const_iterator __first, const_iterator __last)\n       {\n \t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t// 151. can't currently clear() empty container\n \t__glibcxx_check_erase_range(__first, __last);\n \twhile (__first != __last)\n \t  this->erase(__first++);\n-\treturn __last;\n+\treturn iterator(__last.base()._M_const_cast(), this);\n       }\n #else\n       void"}, {"sha": "56f58ffce3be9c98d675e57bb088c34e934d6fc9", "filename": "libstdc++-v3/include/debug/multimap.h", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b6d5d092292a33a5463f18b8d55e9818e5f8c02/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b6d5d092292a33a5463f18b8d55e9818e5f8c02/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h?ref=6b6d5d092292a33a5463f18b8d55e9818e5f8c02", "patch": "@@ -213,7 +213,11 @@ namespace __debug\n #endif\n \n       iterator\n-      insert(iterator __position, const value_type& __x)\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      insert(const_iterator __position, const value_type& __x)\n+#else\n+      insert(iterator __position, const value_type& __x)\t\n+#endif\n       {\n \t__glibcxx_check_insert(__position);\n \treturn iterator(_Base::insert(__position.base(), __x), this);\n@@ -243,7 +247,7 @@ namespace __debug\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       iterator\n-      erase(iterator __position)\n+      erase(const_iterator __position)\n       {\n \t__glibcxx_check_erase(__position);\n \t__position._M_invalidate();\n@@ -276,14 +280,14 @@ namespace __debug\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       iterator\n-      erase(iterator __first, iterator __last)\n+      erase(const_iterator __first, const_iterator __last)\n       {\n \t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t// 151. can't currently clear() empty container\n \t__glibcxx_check_erase_range(__first, __last);\n \twhile (__first != __last)\n \t  this->erase(__first++);\n-\treturn __last;\n+\treturn iterator(__last.base()._M_const_cast(), this);\n       }\n #else\n       void"}, {"sha": "9c950a1d0c21386a7bfc5efd28886463b26eca5a", "filename": "libstdc++-v3/include/debug/multiset.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b6d5d092292a33a5463f18b8d55e9818e5f8c02/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b6d5d092292a33a5463f18b8d55e9818e5f8c02/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h?ref=6b6d5d092292a33a5463f18b8d55e9818e5f8c02", "patch": "@@ -201,7 +201,7 @@ namespace __debug\n #endif\n \n       iterator\n-      insert(iterator __position, const value_type& __x)\n+      insert(const_iterator __position, const value_type& __x)\n       {\n \t__glibcxx_check_insert(__position);\n \treturn iterator(_Base::insert(__position.base(), __x), this);\n@@ -234,7 +234,7 @@ namespace __debug\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       iterator\n-      erase(iterator __position)\n+      erase(const_iterator __position)\n       {\n \t__glibcxx_check_erase(__position);\n \t__position._M_invalidate();\n@@ -267,14 +267,14 @@ namespace __debug\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       iterator\n-      erase(iterator __first, iterator __last)\n+      erase(const_iterator __first, const_iterator __last)\n       {\n \t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t// 151. can't currently clear() empty container\n \t__glibcxx_check_erase_range(__first, __last);\n \twhile (__first != __last)\n \t  this->erase(__first++);\n-\treturn __last;\n+\treturn __last; // iterator == const_iterator\n       }\n #else\n       void"}, {"sha": "b8ff463b2cfa161fa0dbcc41f784f921b2568048", "filename": "libstdc++-v3/include/debug/set.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b6d5d092292a33a5463f18b8d55e9818e5f8c02/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b6d5d092292a33a5463f18b8d55e9818e5f8c02/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h?ref=6b6d5d092292a33a5463f18b8d55e9818e5f8c02", "patch": "@@ -212,7 +212,7 @@ namespace __debug\n #endif\n \n       iterator\n-      insert(iterator __position, const value_type& __x)\n+      insert(const_iterator __position, const value_type& __x)\n       {\n \t__glibcxx_check_insert(__position);\n \treturn iterator(_Base::insert(__position.base(), __x), this);\n@@ -245,7 +245,7 @@ namespace __debug\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       iterator\n-      erase(iterator __position)\n+      erase(const_iterator __position)\n       {\n \t__glibcxx_check_erase(__position);\n \t__position._M_invalidate();\n@@ -277,14 +277,14 @@ namespace __debug\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       iterator\n-      erase(iterator __first, iterator __last)\n+      erase(const_iterator __first, const_iterator __last)\n       {\n \t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t// 151. can't currently clear() empty container\n \t__glibcxx_check_erase_range(__first, __last);\n \twhile (__first != __last)\n \t  this->erase(__first++);\n-\treturn __last;\n+\treturn __last; // iterator == const_iterator\n       }\n #else\n       void"}, {"sha": "ff95f881addc01fa4ef121b46b8e104c90043b68", "filename": "libstdc++-v3/include/profile/multiset.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b6d5d092292a33a5463f18b8d55e9818e5f8c02/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b6d5d092292a33a5463f18b8d55e9818e5f8c02/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultiset.h?ref=6b6d5d092292a33a5463f18b8d55e9818e5f8c02", "patch": "@@ -190,11 +190,7 @@ namespace __profile\n #endif\n \n       iterator\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n       insert(const_iterator __position, const value_type& __x)\n-#else\n-      insert(iterator __position, const value_type& __x)\n-#endif\n       { return iterator(_Base::insert(__position, __x)); }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__"}, {"sha": "96b7be42ba54e352715bf381a07f3eaf42bf7742", "filename": "libstdc++-v3/include/profile/set.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b6d5d092292a33a5463f18b8d55e9818e5f8c02/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b6d5d092292a33a5463f18b8d55e9818e5f8c02/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fset.h?ref=6b6d5d092292a33a5463f18b8d55e9818e5f8c02", "patch": "@@ -201,11 +201,7 @@ namespace __profile\n #endif\n \n       iterator\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n       insert(const_iterator __position, const value_type& __x)\n-#else\n-      insert(iterator __position, const value_type& __x)\n-#endif\n       { return iterator(_Base::insert(__position, __x)); }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__"}]}