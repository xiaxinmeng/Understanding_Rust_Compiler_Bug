{"sha": "87a5b4cc3c685ec64acccc0f9fa25b6a51f60f66", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODdhNWI0Y2MzYzY4NWVjNjRhY2NjYzBmOWZhMjViNmE1MWY2MGY2Ng==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2009-04-20T14:11:34Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2009-04-20T14:11:34Z"}, "message": "expr.c (handled_component_p): Move ...\n\n2009-04-20  Richard Guenther  <rguenther@suse.de>\n\n\t* expr.c (handled_component_p): Move ...\n\t* tree.h (handled_component_p): ... here.\n\t* tree.def: Re-order BIT_FIELD_REF, COMPONENT_REF,\n\tARRAY_REF, ARRAY_RANGE_REF, VIEW_CONVERT_EXPR, IMAGPART_EXPR\n\tand REALPART_EXPR to be in one group.\n\nFrom-SVN: r146427", "tree": {"sha": "bf0d148c757ab3059e36ba96092c021f4f472894", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf0d148c757ab3059e36ba96092c021f4f472894"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/87a5b4cc3c685ec64acccc0f9fa25b6a51f60f66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87a5b4cc3c685ec64acccc0f9fa25b6a51f60f66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87a5b4cc3c685ec64acccc0f9fa25b6a51f60f66", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87a5b4cc3c685ec64acccc0f9fa25b6a51f60f66/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "438c239d7629e2107dd831760835895c82f7d8f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/438c239d7629e2107dd831760835895c82f7d8f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/438c239d7629e2107dd831760835895c82f7d8f3"}], "stats": {"total": 85, "additions": 46, "deletions": 39}, "files": [{"sha": "11704878a5345211bba9dcd9b06c4efb13b9ead0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87a5b4cc3c685ec64acccc0f9fa25b6a51f60f66/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87a5b4cc3c685ec64acccc0f9fa25b6a51f60f66/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=87a5b4cc3c685ec64acccc0f9fa25b6a51f60f66", "patch": "@@ -1,3 +1,11 @@\n+2009-04-20  Richard Guenther  <rguenther@suse.de>\n+\n+\t* expr.c (handled_component_p): Move ...\n+\t* tree.h (handled_component_p): ... here.\n+\t* tree.def: Re-order BIT_FIELD_REF, COMPONENT_REF,\n+\tARRAY_REF, ARRAY_RANGE_REF, VIEW_CONVERT_EXPR, IMAGPART_EXPR\n+\tand REALPART_EXPR to be in one group.\n+\n 2009-04-20  Richard Guenther  <rguenther@suse.de>\n \n \t* basic-block.h (get_all_dominated_blocks): Declare."}, {"sha": "ce740d24d917192006873ea1795c61a4725d353a", "filename": "gcc/expr.c", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87a5b4cc3c685ec64acccc0f9fa25b6a51f60f66/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87a5b4cc3c685ec64acccc0f9fa25b6a51f60f66/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=87a5b4cc3c685ec64acccc0f9fa25b6a51f60f66", "patch": "@@ -6199,27 +6199,6 @@ component_ref_field_offset (tree exp)\n   else\n     return SUBSTITUTE_PLACEHOLDER_IN_EXPR (DECL_FIELD_OFFSET (field), exp);\n }\n-\n-/* Return 1 if T is an expression that get_inner_reference handles.  */\n-\n-int\n-handled_component_p (const_tree t)\n-{\n-  switch (TREE_CODE (t))\n-    {\n-    case BIT_FIELD_REF:\n-    case COMPONENT_REF:\n-    case ARRAY_REF:\n-    case ARRAY_RANGE_REF:\n-    case VIEW_CONVERT_EXPR:\n-    case REALPART_EXPR:\n-    case IMAGPART_EXPR:\n-      return 1;\n-\n-    default:\n-      return 0;\n-    }\n-}\n \f\n /* Given an rtx VALUE that may contain additions and multiplications, return\n    an equivalent value that just refers to a register, memory, or constant."}, {"sha": "41a9e908cab5762b024568a7981f4cf5481bcdba", "filename": "gcc/tree.def", "status": "modified", "additions": 20, "deletions": 17, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87a5b4cc3c685ec64acccc0f9fa25b6a51f60f66/gcc%2Ftree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87a5b4cc3c685ec64acccc0f9fa25b6a51f60f66/gcc%2Ftree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.def?ref=87a5b4cc3c685ec64acccc0f9fa25b6a51f60f66", "patch": "@@ -383,6 +383,9 @@ DEFTREECODE (TRANSLATION_UNIT_DECL, \"translation_unit_decl\",\\\n \f\n /* References to storage.  */\n \n+/* The ordering of the following codes is optimized for the classification\n+   in handled_component_p.  Keep them in a consecutive group.  */\n+\n /* Value is structure or union component.\n    Operand 0 is the structure or union (an expression).\n    Operand 1 is the field (a node of type FIELD_DECL).\n@@ -400,6 +403,23 @@ DEFTREECODE (COMPONENT_REF, \"component_ref\", tcc_reference, 3)\n    to its mode width.  */\n DEFTREECODE (BIT_FIELD_REF, \"bit_field_ref\", tcc_reference, 3)\n \n+/* Used only on an operand of complex type, these return\n+   a value of the corresponding component type.  */\n+DEFTREECODE (REALPART_EXPR, \"realpart_expr\", tcc_reference, 1)\n+DEFTREECODE (IMAGPART_EXPR, \"imagpart_expr\", tcc_reference, 1)\n+\n+/* Array indexing.\n+   Operand 0 is the array; operand 1 is a (single) array index.\n+   Operand 2, if present, is a copy of TYPE_MIN_VALUE of the index.\n+   Operand 3, if present, is the element size, measured in units of\n+   the alignment of the element type.  */\n+DEFTREECODE (ARRAY_REF, \"array_ref\", tcc_reference, 4)\n+\n+/* Likewise, except that the result is a range (\"slice\") of the array.  The\n+   starting index of the resulting array is taken from operand 1 and the size\n+   of the range is taken from the type of the expression.  */\n+DEFTREECODE (ARRAY_RANGE_REF, \"array_range_ref\", tcc_reference, 4)\n+\n /* The ordering of the following codes is optimized for the checking\n    macros in tree.h.  Changing the order will degrade the speed of the\n    compiler.  INDIRECT_REF, ALIGN_INDIRECT_REF, MISALIGNED_INDIRECT_REF.  */\n@@ -418,18 +438,6 @@ DEFTREECODE (ALIGN_INDIRECT_REF, \"align_indirect_ref\", tcc_reference, 1)\n    or 0 if the alignment is unknown.  */\n DEFTREECODE (MISALIGNED_INDIRECT_REF, \"misaligned_indirect_ref\", tcc_reference, 2)\n \n-/* Array indexing.\n-   Operand 0 is the array; operand 1 is a (single) array index.\n-   Operand 2, if present, is a copy of TYPE_MIN_VALUE of the index.\n-   Operand 3, if present, is the element size, measured in units of\n-   the alignment of the element type.  */\n-DEFTREECODE (ARRAY_REF, \"array_ref\", tcc_reference, 4)\n-\n-/* Likewise, except that the result is a range (\"slice\") of the array.  The\n-   starting index of the resulting array is taken from operand 1 and the size\n-   of the range is taken from the type of the expression.  */\n-DEFTREECODE (ARRAY_RANGE_REF, \"array_range_ref\", tcc_reference, 4)\n-\n /* Used to represent lookup of runtime type dependent data.  Often this is\n    a reference to a vtable, but it needn't be.  Operands are:\n    OBJ_TYPE_REF_EXPR: An expression that evaluates the value to use.\n@@ -806,11 +814,6 @@ DEFTREECODE (COMPLEX_EXPR, \"complex_expr\", tcc_binary, 2)\n /* Complex conjugate of operand.  Used only on complex types.  */\n DEFTREECODE (CONJ_EXPR, \"conj_expr\", tcc_unary, 1)\n \n-/* Used only on an operand of complex type, these return\n-   a value of the corresponding component type.  */\n-DEFTREECODE (REALPART_EXPR, \"realpart_expr\", tcc_reference, 1)\n-DEFTREECODE (IMAGPART_EXPR, \"imagpart_expr\", tcc_reference, 1)\n-\n /* Nodes for ++ and -- in C.\n    The second arg is how much to increment or decrement by.\n    For a pointer, it would be the size of the object pointed to.  */"}, {"sha": "8902b43254dad478f2f4d0384519be2237e5e3d4", "filename": "gcc/tree.h", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87a5b4cc3c685ec64acccc0f9fa25b6a51f60f66/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87a5b4cc3c685ec64acccc0f9fa25b6a51f60f66/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=87a5b4cc3c685ec64acccc0f9fa25b6a51f60f66", "patch": "@@ -4503,7 +4503,24 @@ extern tree get_narrower (tree, int *);\n \n /* Return true if T is an expression that get_inner_reference handles.  */\n \n-extern int handled_component_p (const_tree);\n+static inline bool\n+handled_component_p (const_tree t)\n+{\n+  switch (TREE_CODE (t))\n+    {\n+    case BIT_FIELD_REF:\n+    case COMPONENT_REF:\n+    case ARRAY_REF:\n+    case ARRAY_RANGE_REF:\n+    case VIEW_CONVERT_EXPR:\n+    case REALPART_EXPR:\n+    case IMAGPART_EXPR:\n+      return true;\n+\n+    default:\n+      return false;\n+    }\n+}\n \n /* Given an expression EXP that is a handled_component_p,\n    look for the ultimate containing object, which is returned and specify"}]}