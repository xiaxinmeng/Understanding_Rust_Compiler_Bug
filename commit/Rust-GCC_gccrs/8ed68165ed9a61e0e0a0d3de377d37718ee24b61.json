{"sha": "8ed68165ed9a61e0e0a0d3de377d37718ee24b61", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGVkNjgxNjVlZDlhNjFlMGUwYTBkM2RlMzc3ZDM3NzE4ZWUyNGI2MQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-01T15:51:41Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-01T15:51:41Z"}, "message": "[multiple changes]\n\n2011-08-01  Yannick Moy  <moy@adacore.com>\n\n\t* sem_util.ads, sem_util.adb, par.adb, par_util.adb\n\t(Formal_Error_Msg, Formal_Error_Msg_N, Formal_Error_Msg_SP): move\n\tprocedures out of these packages.\n\t* errout.ads, errout.adb \n\t(Formal_Error_Msg, Formal_Error_Msg_N, Formal_Error_Msg_SP): move\n\tprocedures in of this package\n\t(Formal_Error_Msg_NE): new procedure for wrapper on Error_Msg_NE\n\t* par-ch5.adb (Parse_Decls_Begin_End): issue syntax error in SPARK mode\n\ton misplaced later vs initial declarations, like in Ada 83\n\t* sem_attr.adb (Processing for Analyze_Attribute): issue error in\n\tformal mode on attribute of private type whose full type declaration\n\tis not visible\n\t* sem_ch3.adb (Analyze_Declarations): issue error in formal mode on a\n\tpackage declaration inside a package specification\n\t(Analyze_Full_Type_Declaration): issue error in formal mode on\n\tcontrolled type or discriminant type\n\t* sem_ch6.adb (Analyze_Subprogram_Specification): only issue error on\n\tuser-defined operator means that it should come from the source\n\t(New_Overloaded_Entity): issue error in formal mode on overloaded\n\tentity.\n\t* sem_ch6.ads, sem_ch13.ads: typos in comments.\n\n2011-08-01  Thomas Quinot  <quinot@adacore.com>\n\n\t* atree.adb: Minor reformatting.\n\t* checks.adb: Minor reformatting.\n\nFrom-SVN: r177052", "tree": {"sha": "afdcca1f06b9d1a28fb282a8ac450f7220d6d1aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/afdcca1f06b9d1a28fb282a8ac450f7220d6d1aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ed68165ed9a61e0e0a0d3de377d37718ee24b61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ed68165ed9a61e0e0a0d3de377d37718ee24b61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ed68165ed9a61e0e0a0d3de377d37718ee24b61", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ed68165ed9a61e0e0a0d3de377d37718ee24b61/comments", "author": null, "committer": null, "parents": [{"sha": "4230bdb759b717d87186ccb1df225f241322386b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4230bdb759b717d87186ccb1df225f241322386b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4230bdb759b717d87186ccb1df225f241322386b"}], "stats": {"total": 224, "additions": 169, "deletions": 55}, "files": [{"sha": "810203732bd6ac0eb13b7de5e5e647c84d66e972", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ed68165ed9a61e0e0a0d3de377d37718ee24b61/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ed68165ed9a61e0e0a0d3de377d37718ee24b61/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=8ed68165ed9a61e0e0a0d3de377d37718ee24b61", "patch": "@@ -1,3 +1,32 @@\n+2011-08-01  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_util.ads, sem_util.adb, par.adb, par_util.adb\n+\t(Formal_Error_Msg, Formal_Error_Msg_N, Formal_Error_Msg_SP): move\n+\tprocedures out of these packages.\n+\t* errout.ads, errout.adb \n+\t(Formal_Error_Msg, Formal_Error_Msg_N, Formal_Error_Msg_SP): move\n+\tprocedures in of this package\n+\t(Formal_Error_Msg_NE): new procedure for wrapper on Error_Msg_NE\n+\t* par-ch5.adb (Parse_Decls_Begin_End): issue syntax error in SPARK mode\n+\ton misplaced later vs initial declarations, like in Ada 83\n+\t* sem_attr.adb (Processing for Analyze_Attribute): issue error in\n+\tformal mode on attribute of private type whose full type declaration\n+\tis not visible\n+\t* sem_ch3.adb (Analyze_Declarations): issue error in formal mode on a\n+\tpackage declaration inside a package specification\n+\t(Analyze_Full_Type_Declaration): issue error in formal mode on\n+\tcontrolled type or discriminant type\n+\t* sem_ch6.adb (Analyze_Subprogram_Specification): only issue error on\n+\tuser-defined operator means that it should come from the source\n+\t(New_Overloaded_Entity): issue error in formal mode on overloaded\n+\tentity.\n+\t* sem_ch6.ads, sem_ch13.ads: typos in comments.\n+\n+2011-08-01  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* atree.adb: Minor reformatting.\n+\t* checks.adb: Minor reformatting.\n+\n 2011-08-01  Vincent Celier  <celier@adacore.com>\n \n \t* s-parame-vms-ia64.ads: Fix typo in comment"}, {"sha": "d0a9cc292292f9f7f978ea87d039185ecb3b7490", "filename": "gcc/ada/atree.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ed68165ed9a61e0e0a0d3de377d37718ee24b61/gcc%2Fada%2Fatree.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ed68165ed9a61e0e0a0d3de377d37718ee24b61/gcc%2Fada%2Fatree.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.adb?ref=8ed68165ed9a61e0e0a0d3de377d37718ee24b61", "patch": "@@ -1196,14 +1196,14 @@ package body Atree is\n          Nodes.Table (New_Id).Link := Empty_List_Or_Node;\n          Nodes.Table (New_Id).In_List := False;\n \n-         --  If the original is marked as a rewrite insertion, then unmark\n-         --  the copy, since we inserted the original, not the copy.\n+         --  If the original is marked as a rewrite insertion, then unmark the\n+         --  copy, since we inserted the original, not the copy.\n \n          Nodes.Table (New_Id).Rewrite_Ins := False;\n          pragma Debug (New_Node_Debugging_Output (New_Id));\n \n          --  Clear Is_Overloaded since we cannot have semantic interpretations\n-         --  of this new node\n+         --  of this new node.\n \n          if Nkind (Source) in N_Subexpr then\n             Set_Is_Overloaded (New_Id, False);"}, {"sha": "62dd861557c1bb82f7150121efb190a1dba528c6", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ed68165ed9a61e0e0a0d3de377d37718ee24b61/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ed68165ed9a61e0e0a0d3de377d37718ee24b61/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=8ed68165ed9a61e0e0a0d3de377d37718ee24b61", "patch": "@@ -4560,6 +4560,10 @@ package body Checks is\n       function Entity_Of_Prefix return Entity_Id;\n       --  Returns the entity of the prefix of N (or Empty if not found)\n \n+      ----------------------\n+      -- Entity_Of_Prefix --\n+      ----------------------\n+\n       function Entity_Of_Prefix return Entity_Id is\n          P : Node_Id := Prefix (N);\n       begin\n@@ -4583,6 +4587,8 @@ package body Checks is\n       A_Ent : constant Entity_Id  := Entity_Of_Prefix;\n       Sub   : Node_Id;\n \n+   --  Start of processing for Generate_Index_Checks\n+\n    begin\n       --  Ignore call if the prefix is not an array since we have a serious\n       --  error in the sources. Ignore it also if index checks are suppressed\n@@ -4599,7 +4605,7 @@ package body Checks is\n       --  Generate a raise of constraint error with the appropriate reason and\n       --  a condition of the form:\n \n-      --    Base_Type(Sub) not in array'range (subscript)\n+      --    Base_Type (Sub) not in Array'Range (Subscript)\n \n       --  Note that the reason we generate the conversion to the base type here\n       --  is that we definitely want the range check to take place, even if it\n@@ -4627,7 +4633,7 @@ package body Checks is\n                           Duplicate_Subexpr_Move_Checks (Sub)),\n                       Right_Opnd =>\n                         Make_Attribute_Reference (Loc,\n-                          Prefix => New_Reference_To (Etype (A), Loc),\n+                          Prefix         => New_Reference_To (Etype (A), Loc),\n                           Attribute_Name => Name_Range)),\n                  Reason => CE_Index_Check_Failed));\n          end if;\n@@ -4680,7 +4686,8 @@ package body Checks is\n                   then\n                      Range_N :=\n                        Make_Attribute_Reference (Loc,\n-                         Prefix => New_Reference_To (Etype (A_Idx), Loc),\n+                         Prefix         =>\n+                           New_Reference_To (Etype (A_Idx), Loc),\n                          Attribute_Name => Name_Range);\n \n                   --  For arrays with non-constant bounds we cannot generate"}, {"sha": "0703afc89a7bd21aeb1e3aecbb4028ece2420a91", "filename": "gcc/ada/errout.adb", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ed68165ed9a61e0e0a0d3de377d37718ee24b61/gcc%2Fada%2Ferrout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ed68165ed9a61e0e0a0d3de377d37718ee24b61/gcc%2Fada%2Ferrout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.adb?ref=8ed68165ed9a61e0e0a0d3de377d37718ee24b61", "patch": "@@ -1402,6 +1402,49 @@ package body Errout is\n       return S;\n    end First_Sloc;\n \n+   ----------------------\n+   -- Formal_Error_Msg --\n+   ----------------------\n+\n+   procedure Formal_Error_Msg (Msg : String; Flag_Location : Source_Ptr) is\n+   begin\n+      pragma Assert (Formal_Verification_Mode);\n+      Error_Msg (\"(\" & Formal_Language & \") \" & Msg, Flag_Location);\n+   end Formal_Error_Msg;\n+\n+   ------------------------\n+   -- Formal_Error_Msg_N --\n+   ------------------------\n+\n+   procedure Formal_Error_Msg_N (Msg : String; N : Node_Id) is\n+   begin\n+      pragma Assert (Formal_Verification_Mode);\n+      Error_Msg_N (\"(\" & Formal_Language & \") \" & Msg, N);\n+   end Formal_Error_Msg_N;\n+\n+   -------------------------\n+   -- Formal_Error_Msg_NE --\n+   -------------------------\n+\n+   procedure Formal_Error_Msg_NE\n+     (Msg : String;\n+      N   : Node_Or_Entity_Id;\n+      E   : Node_Or_Entity_Id) is\n+   begin\n+      pragma Assert (Formal_Verification_Mode);\n+      Error_Msg_NE (\"(\" & Formal_Language & \") \" & Msg, N, E);\n+   end Formal_Error_Msg_NE;\n+\n+   -------------------------\n+   -- Formal_Error_Msg_SP --\n+   -------------------------\n+\n+   procedure Formal_Error_Msg_SP (Msg : String) is\n+   begin\n+      pragma Assert (Formal_Verification_Mode);\n+      Error_Msg_SP (\"(\" & Formal_Language & \") \" & Msg);\n+   end Formal_Error_Msg_SP;\n+\n    ----------------\n    -- Initialize --\n    ----------------"}, {"sha": "af219647a57801094e16ec191436493daf8be1b9", "filename": "gcc/ada/errout.ads", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ed68165ed9a61e0e0a0d3de377d37718ee24b61/gcc%2Fada%2Ferrout.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ed68165ed9a61e0e0a0d3de377d37718ee24b61/gcc%2Fada%2Ferrout.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.ads?ref=8ed68165ed9a61e0e0a0d3de377d37718ee24b61", "patch": "@@ -735,6 +735,25 @@ package Errout is\n    --  where the expression is parenthesized, an attempt is made to include\n    --  the parentheses (i.e. to return the location of the initial paren).\n \n+   procedure Formal_Error_Msg (Msg : String; Flag_Location : Source_Ptr);\n+   --  Wrapper on Error_Msg which adds a prefix to Msg giving the name of\n+   --  the formal language analyzed (spark or alfa)\n+\n+   procedure Formal_Error_Msg_N (Msg : String; N : Node_Id);\n+   --  Wrapper on Error_Msg_N which adds a prefix to Msg giving the name of\n+   --  the formal language analyzed (spark or alfa)\n+\n+   procedure Formal_Error_Msg_NE\n+     (Msg : String;\n+      N   : Node_Or_Entity_Id;\n+      E   : Node_Or_Entity_Id);\n+   --  Wrapper on Error_Msg_NE which adds a prefix to Msg giving the name of\n+   --  the formal language analyzed (spark or alfa)\n+\n+   procedure Formal_Error_Msg_SP (Msg : String);\n+   --  Wrapper on Error_Msg_SP which adds a prefix to Msg giving the name of\n+   --  the formal language analyzed (spark or alfa)\n+\n    procedure Purge_Messages (From : Source_Ptr; To : Source_Ptr)\n      renames Erroutc.Purge_Messages;\n    --  All error messages whose location is in the range From .. To (not"}, {"sha": "acea49b7445a49c26e81e618b974cd77c2315226", "filename": "gcc/ada/par-ch5.adb", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ed68165ed9a61e0e0a0d3de377d37718ee24b61/gcc%2Fada%2Fpar-ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ed68165ed9a61e0e0a0d3de377d37718ee24b61/gcc%2Fada%2Fpar-ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch5.adb?ref=8ed68165ed9a61e0e0a0d3de377d37718ee24b61", "patch": "@@ -2110,9 +2110,12 @@ package body Ch5 is\n    begin\n       Decls := P_Declarative_Part;\n \n-      --  Check for misplacement of later vs basic declarations in Ada 83\n+      --  Check for misplacement of later vs basic declarations in Ada 83.\n+      --  The same is true for the SPARK mode: although SPARK 95 removes\n+      --  the distinction between initial and later declarative items,\n+      --  the distinction remains in the Examiner. (JB01-005)\n \n-      if Ada_Version = Ada_83 then\n+      if Ada_Version = Ada_83 or else SPARK_Mode then\n          Decl := First (Decls);\n \n          --  Loop through sequence of basic declarative items\n@@ -2139,6 +2142,11 @@ package body Ch5 is\n                         Error_Msg_Sloc := Body_Sloc;\n                         Error_Msg_N\n                           (\"(Ada 83) decl cannot appear after body#\", Decl);\n+                     else\n+                        pragma Assert (SPARK_Mode);\n+                        Error_Msg_Sloc := Body_Sloc;\n+                        Formal_Error_Msg_N\n+                          (\"decl cannot appear after body#\", Decl);\n                      end if;\n                   end if;\n "}, {"sha": "6a0e8efc6cbdd156c5b7a7daad4deeb1ca75f0c9", "filename": "gcc/ada/par-util.adb", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ed68165ed9a61e0e0a0d3de377d37718ee24b61/gcc%2Fada%2Fpar-util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ed68165ed9a61e0e0a0d3de377d37718ee24b61/gcc%2Fada%2Fpar-util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-util.adb?ref=8ed68165ed9a61e0e0a0d3de377d37718ee24b61", "patch": "@@ -377,16 +377,6 @@ package body Util is\n       null;\n    end Discard_Junk_Node;\n \n-   -------------------------\n-   -- Formal_Error_Msg_SP --\n-   -------------------------\n-\n-   procedure Formal_Error_Msg_SP (Msg : String) is\n-   begin\n-      pragma Assert (Formal_Verification_Mode);\n-      Error_Msg_SP (\"(\" & Formal_Language & \") \" & Msg);\n-   end Formal_Error_Msg_SP;\n-\n    ------------\n    -- Ignore --\n    ------------"}, {"sha": "99f6806057d7ad1ee5f7a1ffe3ea01595343c3dc", "filename": "gcc/ada/par.adb", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ed68165ed9a61e0e0a0d3de377d37718ee24b61/gcc%2Fada%2Fpar.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ed68165ed9a61e0e0a0d3de377d37718ee24b61/gcc%2Fada%2Fpar.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar.adb?ref=8ed68165ed9a61e0e0a0d3de377d37718ee24b61", "patch": "@@ -1158,10 +1158,6 @@ function Par (Configuration_Pragmas : Boolean) return List_Id is\n       --  the argument. A typical use is to skip by some junk that is not\n       --  expected in the current context.\n \n-      procedure Formal_Error_Msg_SP (Msg : String);\n-      --  Wrapper on Errout.Error_Msg_SP which adds a prefix to Msg giving\n-      --  the name of the formal language analyzed (spark or alfa)\n-\n       procedure Ignore (T : Token_Type);\n       --  If current token matches T, then give an error message and skip\n       --  past it, otherwise the call has no effect at all. T may be any"}, {"sha": "73239e600aa6c8b80cedd7bdfefe5af791f8a5e2", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ed68165ed9a61e0e0a0d3de377d37718ee24b61/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ed68165ed9a61e0e0a0d3de377d37718ee24b61/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=8ed68165ed9a61e0e0a0d3de377d37718ee24b61", "patch": "@@ -2055,6 +2055,20 @@ package body Sem_Attr is\n          end if;\n       end if;\n \n+      --  In SPARK or ALFA, attributes of private types are only allowed if\n+      --  the full type declaration is visible\n+\n+      if Formal_Verification_Mode\n+        and then Is_Entity_Name (P)\n+        and then Is_Type (Entity (P))\n+        and then Is_Private_Type (P_Type)\n+        and then not In_Open_Scopes (Scope (P_Type))\n+        and then not In_Spec_Expression\n+      then\n+         Formal_Error_Msg_NE\n+           (\"invisible attribute of}\", N, First_Subtype (P_Type));\n+      end if;\n+\n       --  Remaining processing depends on attribute\n \n       case Attr_Id is"}, {"sha": "32b3237ee4c57bdf2ebd6d4b3b0dce9ed8928bf6", "filename": "gcc/ada/sem_ch13.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ed68165ed9a61e0e0a0d3de377d37718ee24b61/gcc%2Fada%2Fsem_ch13.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ed68165ed9a61e0e0a0d3de377d37718ee24b61/gcc%2Fada%2Fsem_ch13.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.ads?ref=8ed68165ed9a61e0e0a0d3de377d37718ee24b61", "patch": "@@ -40,9 +40,9 @@ package Sem_Ch13 is\n      (N : Node_Id;\n       E : Entity_Id;\n       L : List_Id);\n-   --  This procedure is called to analyze aspect specifications for node N. E\n-   --  is the corresponding entity declared by the declaration node N, and L is\n-   --  the list of aspect specifications for this node. If L is No_List, the\n+   --  This procedure is called to analyze aspect specifications for node N.\n+   --  E is the corresponding entity declared by the declaration node N, and L\n+   --  is the list of aspect specifications for this node. If L is No_List, the\n    --  call is ignored. Note that we can't use a simpler interface of just\n    --  passing the node N, since the analysis of the node may cause it to be\n    --  rewritten to a node not permitting aspect specifications."}, {"sha": "7418084427213b6a2c2f49fa3996b2f4e0618bb3", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ed68165ed9a61e0e0a0d3de377d37718ee24b61/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ed68165ed9a61e0e0a0d3de377d37718ee24b61/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=8ed68165ed9a61e0e0a0d3de377d37718ee24b61", "patch": "@@ -2027,6 +2027,17 @@ package body Sem_Ch3 is\n       D := First (L);\n       while Present (D) loop\n \n+         --  Package specification cannot contain a package declaration in\n+         --  SPARK or ALFA\n+\n+         if Formal_Verification_Mode\n+           and then Nkind (D) = N_Package_Declaration\n+           and then Nkind (Parent (L)) = N_Package_Specification\n+         then\n+            Formal_Error_Msg_N (\"package specification cannot contain \"\n+                                & \"a package declaration\", D);\n+         end if;\n+\n          --  Complete analysis of declaration\n \n          Analyze (D);\n@@ -2347,6 +2358,21 @@ package body Sem_Ch3 is\n          return;\n       end if;\n \n+      if Formal_Verification_Mode then\n+\n+         --  Controlled type is not allowed in SPARK and ALFA\n+\n+         if Is_Visibly_Controlled (T) then\n+            Formal_Error_Msg_N (\"controlled type is not allowed\", N);\n+         end if;\n+\n+         --  Discriminant type is not allowed in SPARK and ALFA\n+\n+         if Present (Discriminant_Specifications (N)) then\n+            Formal_Error_Msg_N (\"discriminant type is not allowed\", N);\n+         end if;\n+      end if;\n+\n       --  Some common processing for all types\n \n       Set_Depends_On_Private (T, Has_Private_Component (T));"}, {"sha": "d96499db2e252cb3d097fdad0cbb3bbef6b4a90b", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ed68165ed9a61e0e0a0d3de377d37718ee24b61/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ed68165ed9a61e0e0a0d3de377d37718ee24b61/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=8ed68165ed9a61e0e0a0d3de377d37718ee24b61", "patch": "@@ -3072,6 +3072,7 @@ package body Sem_Ch6 is\n       --  User-defined operator is not allowed in SPARK or ALFA\n \n       if Formal_Verification_Mode\n+        and then Comes_From_Source (N)\n         and then Nkind (Defining_Unit_Name (N)) = N_Defining_Operator_Symbol\n       then\n          Formal_Error_Msg_N (\"user-defined operator is not allowed\", N);\n@@ -8493,6 +8494,15 @@ package body Sem_Ch6 is\n          Check_Overriding_Indicator\n            (S, Overridden_Subp, Is_Primitive => Is_Primitive_Subp);\n \n+         --  Overloading is not allowed in SPARK or ALFA\n+\n+         if Formal_Verification_Mode\n+           and then Comes_From_Source (S)\n+         then\n+            Error_Msg_Sloc := Sloc (Homonym (S));\n+            Formal_Error_Msg_N (\"overloading not allowed with entity#\", S);\n+         end if;\n+\n          --  If S is a derived operation for an untagged type then by\n          --  definition it's not a dispatching operation (even if the parent\n          --  operation was dispatching), so we don't call"}, {"sha": "2fc59b43652d60c4bdf9a498ee7cdc17c5f1bcaf", "filename": "gcc/ada/sem_ch6.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ed68165ed9a61e0e0a0d3de377d37718ee24b61/gcc%2Fada%2Fsem_ch6.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ed68165ed9a61e0e0a0d3de377d37718ee24b61/gcc%2Fada%2Fsem_ch6.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.ads?ref=8ed68165ed9a61e0e0a0d3de377d37718ee24b61", "patch": "@@ -205,7 +205,7 @@ package Sem_Ch6 is\n    --  Process new overloaded entity. Overloaded entities are created by\n    --  enumeration type declarations, subprogram specifications, entry\n    --  declarations, and (implicitly) by type derivations. Derived_Type non-\n-   --  Empty indicates that this is subprogram derived for that type.\n+   --  Empty indicates that this is a subprogram derived for that type.\n \n    procedure Process_Formals (T : List_Id; Related_Nod : Node_Id);\n    --  Enter the formals in the scope of the subprogram or entry, and"}, {"sha": "6631e1c04fd6c42e866191344a05d38673e3976f", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ed68165ed9a61e0e0a0d3de377d37718ee24b61/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ed68165ed9a61e0e0a0d3de377d37718ee24b61/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=8ed68165ed9a61e0e0a0d3de377d37718ee24b61", "patch": "@@ -9,7 +9,7 @@\n --          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- terms of the  GNU Genconflieral Public License as published  by the Free Soft- --\n -- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n -- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n -- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n@@ -3644,26 +3644,6 @@ package body Sem_Util is\n       end if;\n    end First_Actual;\n \n-   ----------------------\n-   -- Formal_Error_Msg --\n-   ----------------------\n-\n-   procedure Formal_Error_Msg (Msg : String; Flag_Location : Source_Ptr) is\n-   begin\n-      pragma Assert (Formal_Verification_Mode);\n-      Error_Msg (\"(\" & Formal_Language & \") \" & Msg, Flag_Location);\n-   end Formal_Error_Msg;\n-\n-   ------------------------\n-   -- Formal_Error_Msg_N --\n-   ------------------------\n-\n-   procedure Formal_Error_Msg_N (Msg : String; N : Node_Id) is\n-   begin\n-      pragma Assert (Formal_Verification_Mode);\n-      Error_Msg_N (\"(\" & Formal_Language & \") \" & Msg, N);\n-   end Formal_Error_Msg_N;\n-\n    -----------------------\n    -- Gather_Components --\n    -----------------------"}, {"sha": "df74a1f568931495b0872653f791824624df0411", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ed68165ed9a61e0e0a0d3de377d37718ee24b61/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ed68165ed9a61e0e0a0d3de377d37718ee24b61/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=8ed68165ed9a61e0e0a0d3de377d37718ee24b61", "patch": "@@ -407,14 +407,6 @@ package Sem_Util is\n    --  is always the expression (not the N_Parameter_Association nodes,\n    --  even if named association is used).\n \n-   procedure Formal_Error_Msg (Msg : String; Flag_Location : Source_Ptr);\n-   --  Wrapper on Errout.Error_Msg which adds a prefix to Msg giving\n-   --  the name of the formal language analyzed (spark or alfa)\n-\n-   procedure Formal_Error_Msg_N (Msg : String; N : Node_Id);\n-   --  Wrapper on Errout.Error_Msg_N which adds a prefix to Msg giving\n-   --  the name of the formal language analyzed (spark or alfa)\n-\n    procedure Gather_Components\n      (Typ           : Entity_Id;\n       Comp_List     : Node_Id;"}]}