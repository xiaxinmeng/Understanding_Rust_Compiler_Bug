{"sha": "25faed6f37969a72ea8257736a6821a5c3a54bba", "node_id": "C_kwDOANBUbNoAKDI1ZmFlZDZmMzc5NjlhNzJlYTgyNTc3MzZhNjgyMWE1YzNhNTRiYmE", "commit": {"author": {"name": "Hongyu Wang", "email": "hongyu.wang@intel.com", "date": "2021-07-12T01:45:33Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-09-23T09:05:02Z"}, "message": "AVX512FP16: Add float(uns)?mn2 expander\n\ngcc/ChangeLog:\n\n\t* config/i386/sse.md (float<floatunssuffix><mode><ssePHmodelower>2):\n\tNew expander.\n\t(avx512fp16_vcvt<floatsuffix><sseintconvert>2ph_<mode>):\n\tRename to ...\n\t(float<floatunssuffix><mode>v4hf2): ... this, and drop constraints.\n\t(avx512fp16_vcvt<floatsuffix>qq2ph_v2di): Rename to ...\n\t(float<floatunssuffix>v2div2hf2): ... this, and likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/avx512fp16-floatvnhf.c: New test.", "tree": {"sha": "030836087a02012014fcbc92cbb18e79fd3c0d78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/030836087a02012014fcbc92cbb18e79fd3c0d78"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/25faed6f37969a72ea8257736a6821a5c3a54bba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25faed6f37969a72ea8257736a6821a5c3a54bba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25faed6f37969a72ea8257736a6821a5c3a54bba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25faed6f37969a72ea8257736a6821a5c3a54bba/comments", "author": {"login": "wwwhhhyyy", "id": 5366075, "node_id": "MDQ6VXNlcjUzNjYwNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/5366075?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wwwhhhyyy", "html_url": "https://github.com/wwwhhhyyy", "followers_url": "https://api.github.com/users/wwwhhhyyy/followers", "following_url": "https://api.github.com/users/wwwhhhyyy/following{/other_user}", "gists_url": "https://api.github.com/users/wwwhhhyyy/gists{/gist_id}", "starred_url": "https://api.github.com/users/wwwhhhyyy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wwwhhhyyy/subscriptions", "organizations_url": "https://api.github.com/users/wwwhhhyyy/orgs", "repos_url": "https://api.github.com/users/wwwhhhyyy/repos", "events_url": "https://api.github.com/users/wwwhhhyyy/events{/privacy}", "received_events_url": "https://api.github.com/users/wwwhhhyyy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60698a19c77aef8c96d14238975e12fad653e7fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60698a19c77aef8c96d14238975e12fad653e7fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60698a19c77aef8c96d14238975e12fad653e7fb"}], "stats": {"total": 107, "additions": 99, "deletions": 8}, "files": [{"sha": "66062dc3bcff97fb151a2a268dd18138c9b19fce", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 38, "deletions": 8, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25faed6f37969a72ea8257736a6821a5c3a54bba/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25faed6f37969a72ea8257736a6821a5c3a54bba/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=25faed6f37969a72ea8257736a6821a5c3a54bba", "patch": "@@ -6006,6 +6006,12 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n+(define_expand \"float<floatunssuffix><mode><ssePHmodelower>2\"\n+  [(set (match_operand:<ssePHmode> 0 \"register_operand\")\n+\t(any_float:<ssePHmode>\n+\t  (match_operand:VI2H_AVX512VL 1 \"nonimmediate_operand\")))]\n+  \"TARGET_AVX512FP16\")\n+\n (define_insn \"avx512fp16_vcvt<floatsuffix><sseintconvert>2ph_<mode><mask_name><round_name>\"\n   [(set (match_operand:<ssePHmode> 0 \"register_operand\" \"=v\")\n \t(any_float:<ssePHmode>\n@@ -6016,11 +6022,23 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n-(define_expand \"avx512fp16_vcvt<floatsuffix><sseintconvert>2ph_<mode>\"\n-  [(set (match_operand:V8HF 0 \"register_operand\" \"=v\")\n+(define_expand \"float<floatunssuffix><mode>v4hf2\"\n+  [(set (match_operand:V4HF 0 \"register_operand\")\n+\t(any_float:V4HF\n+\t  (match_operand:VI4_128_8_256 1 \"vector_operand\")))]\n+  \"TARGET_AVX512FP16 && TARGET_AVX512VL\"\n+{\n+  operands[0] = lowpart_subreg (V8HFmode, operands[0], V4HFmode);\n+  emit_insn (gen_avx512fp16_float<floatunssuffix><mode>v4hf2 (operands[0],\n+\t\t\t\t\t\t\t      operands[1]));\n+  DONE;\n+})\n+\n+(define_expand \"avx512fp16_float<floatunssuffix><mode>v4hf2\"\n+  [(set (match_operand:V8HF 0 \"register_operand\")\n \t(vec_concat:V8HF\n-\t    (any_float:V4HF (match_operand:VI4_128_8_256 1 \"vector_operand\" \"vm\"))\n-\t    (match_dup 2)))]\n+\t  (any_float:V4HF (match_operand:VI4_128_8_256 1 \"vector_operand\"))\n+\t  (match_dup 2)))]\n   \"TARGET_AVX512FP16 && TARGET_AVX512VL\"\n   \"operands[2] = CONST0_RTX (V4HFmode);\")\n \n@@ -6079,11 +6097,23 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n-(define_expand \"avx512fp16_vcvt<floatsuffix>qq2ph_v2di\"\n-  [(set (match_operand:V8HF 0 \"register_operand\" \"=v\")\n+(define_expand \"float<floatunssuffix>v2div2hf2\"\n+  [(set (match_operand:V2HF 0 \"register_operand\")\n+\t(any_float:V2HF\n+\t  (match_operand:V2DI 1 \"vector_operand\")))]\n+  \"TARGET_AVX512FP16 && TARGET_AVX512VL\"\n+{\n+  operands[0] = lowpart_subreg (V8HFmode, operands[0], V2HFmode);\n+  emit_insn (gen_avx512fp16_float<floatunssuffix>v2div2hf2 (operands[0],\n+\t\t\t\t\t\t\t    operands[1]));\n+  DONE;\n+})\n+\n+(define_expand \"avx512fp16_float<floatunssuffix>v2div2hf2\"\n+  [(set (match_operand:V8HF 0 \"register_operand\")\n \t(vec_concat:V8HF\n-\t    (any_float:V2HF (match_operand:V2DI 1 \"vector_operand\" \"vm\"))\n-\t    (match_dup 2)))]\n+\t  (any_float:V2HF (match_operand:V2DI 1 \"vector_operand\"))\n+\t  (match_dup 2)))]\n   \"TARGET_AVX512FP16 && TARGET_AVX512VL\"\n   \"operands[2] = CONST0_RTX (V6HFmode);\")\n "}, {"sha": "112ac3e74d557fc4061dd11e536089dbca55e28d", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-floatvnhf.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25faed6f37969a72ea8257736a6821a5c3a54bba/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-floatvnhf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25faed6f37969a72ea8257736a6821a5c3a54bba/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-floatvnhf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-floatvnhf.c?ref=25faed6f37969a72ea8257736a6821a5c3a54bba", "patch": "@@ -0,0 +1,61 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512vl -ftree-slp-vectorize -mprefer-vector-width=512\" } */\n+\n+extern long long di[8];\n+extern unsigned long long udi[8];\n+extern int si[16];\n+extern unsigned int usi[16];\n+extern short hi[32];\n+extern unsigned short uhi[32];\n+extern _Float16 hf[32];\n+\n+#define DO_PRAGMA(X) _Pragma(#X)\n+\n+#define FLOATHFVV(size, mode)\t    \\\n+  void __attribute__ ((noinline, noclone))  \\\n+float##v##size##mode##v##size##hf ()   \\\n+{\\\n+  int i;  \\\n+  DO_PRAGMA (GCC unroll size)\t\\\n+  for (i = 0; i < size; i++)  \\\n+    hf[i] = (_Float16) mode[i];  \\\n+}\n+\n+FLOATHFVV(32, hi)\n+FLOATHFVV(16, hi)\n+FLOATHFVV(8, hi)\n+FLOATHFVV(16, si)\n+FLOATHFVV(8, si)\n+FLOATHFVV(4, si)\n+FLOATHFVV(8, di)\n+FLOATHFVV(4, di)\n+FLOATHFVV(2, di)\n+\n+FLOATHFVV(32, uhi)\n+FLOATHFVV(16, uhi)\n+FLOATHFVV(8, uhi)\n+FLOATHFVV(16, usi)\n+FLOATHFVV(8, usi)\n+FLOATHFVV(4, usi)\n+FLOATHFVV(8, udi)\n+FLOATHFVV(4, udi)\n+FLOATHFVV(2, udi)\n+\n+/* { dg-final { scan-assembler-times \"vcvtqq2phz\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtuqq2phz\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtqq2phy\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times \"vcvtuqq2phy\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times \"vcvtqq2phx\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times \"vcvtuqq2phx\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times \"vcvtdq2ph\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtudq2ph\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtdq2phy\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtudq2phy\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtdq2phx\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times \"vcvtudq2phx\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times \"vcvtw2ph\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtuw2ph\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtw2ph\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtuw2ph\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtw2ph\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtuw2ph\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */"}]}