{"sha": "7d3a3b01c3f43635a798a0e03765aef9fdf17e9e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2QzYTNiMDFjM2Y0MzYzNWE3OThhMGUwMzc2NWFlZjlmZGYxN2U5ZQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2006-03-30T12:11:16Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2006-03-30T12:11:16Z"}, "message": "Makefile.am: Do not build dbl-64 variants.\n\n2006-03-30  Richard Guenther  <rguenther@suse.de>\n\n\t* i386/Makefile.am: Do not build dbl-64 variants.\n\t* i386/Makefile.in: Regenerate.\n\t* dbl-64: Remove.\n\n\t* config/i386/i386.c: Remove builtins for SSE2 ABI intrinsic\n\tvariants with double arguments.\n\n\t* gcc.target/i386/sselibm-1.c: Adjust for libgcc-math partial\n\tremoval.\n\t* gcc.target/i386/sselibm-2.c: Likewise.\n\t* gcc.target/i386/sselibm-3.c: Likewise.\n\t* gcc.target/i386/sselibm-4.c: Likewise.\n\t* gcc.target/i386/sselibm-5.c: Likewise.\n\nFrom-SVN: r112530", "tree": {"sha": "1f3a7815ffe634bd001cb95eeac2b85a5f17f19b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f3a7815ffe634bd001cb95eeac2b85a5f17f19b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d3a3b01c3f43635a798a0e03765aef9fdf17e9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d3a3b01c3f43635a798a0e03765aef9fdf17e9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d3a3b01c3f43635a798a0e03765aef9fdf17e9e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d3a3b01c3f43635a798a0e03765aef9fdf17e9e/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5cd88d6857dffe4f10c834c773c300881ec20e32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cd88d6857dffe4f10c834c773c300881ec20e32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5cd88d6857dffe4f10c834c773c300881ec20e32"}], "stats": {"total": 44680, "additions": 41, "deletions": 44639}, "files": [{"sha": "f7679d1f6d29971e6527d5b7307c242ae3fbf6c2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d3a3b01c3f43635a798a0e03765aef9fdf17e9e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d3a3b01c3f43635a798a0e03765aef9fdf17e9e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7d3a3b01c3f43635a798a0e03765aef9fdf17e9e", "patch": "@@ -1,3 +1,8 @@\n+2006-03-30  Richard Guenther  <rguenther@suse.de>\n+\n+\t* config/i386/i386.c: Remove builtins for SSE2 ABI intrinsic\n+\tvariants with double arguments.\n+\n 2006-03-29  David Edelsohn  <edelsohn@gnu.org>\n \n \t* genpreds.c (write_tm_constrs_h): Delete variable p."}, {"sha": "da4b1350a0fd919ae9abddb7a1980d4b73588129", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d3a3b01c3f43635a798a0e03765aef9fdf17e9e/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d3a3b01c3f43635a798a0e03765aef9fdf17e9e/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=7d3a3b01c3f43635a798a0e03765aef9fdf17e9e", "patch": "@@ -15349,7 +15349,7 @@ ix86_init_mmx_sse_builtins (void)\n static void\n ix86_init_sse_abi_builtins (void)\n {\n-  tree dbl, flt, dbl2, flt2;\n+  tree flt, flt2;\n \n   /* Bail out in case the template definitions are not available.  */\n   if (! built_in_decls [BUILT_IN_SIN]\n@@ -15359,18 +15359,10 @@ ix86_init_sse_abi_builtins (void)\n     return;\n \n   /* Build the function types as variants of the existing ones.  */\n-  dbl = build_variant_type_copy (TREE_TYPE (built_in_decls [BUILT_IN_SIN]));\n-  TYPE_ATTRIBUTES (dbl)\n-    = tree_cons (get_identifier (\"sseregparm\"),\n-                 NULL_TREE, TYPE_ATTRIBUTES (dbl));\n   flt = build_variant_type_copy (TREE_TYPE (built_in_decls [BUILT_IN_SINF]));\n   TYPE_ATTRIBUTES (flt)\n     = tree_cons (get_identifier (\"sseregparm\"),\n                  NULL_TREE, TYPE_ATTRIBUTES (flt));\n-  dbl2 = build_variant_type_copy (TREE_TYPE (built_in_decls [BUILT_IN_ATAN2]));\n-  TYPE_ATTRIBUTES (dbl2)\n-    = tree_cons (get_identifier (\"sseregparm\"),\n-                 NULL_TREE, TYPE_ATTRIBUTES (dbl2));\n   flt2 = build_variant_type_copy (TREE_TYPE (built_in_decls [BUILT_IN_ATAN2F]));\n   TYPE_ATTRIBUTES (flt2)\n     = tree_cons (get_identifier (\"sseregparm\"),\n@@ -15383,25 +15375,15 @@ ix86_init_sse_abi_builtins (void)\n \t\t\t\t   BUILT_IN_NORMAL,\t\t\t\\\n \t\t\t\t   \"__libm_sse2_\" # name, NULL_TREE)\n  \n-  def_builtin (ACOS, acos, dbl);\n   def_builtin (ACOSF, acosf, flt);\n-  def_builtin (ASIN, asin, dbl);\n   def_builtin (ASINF, asinf, flt);\n-  def_builtin (ATAN, atan, dbl);\n   def_builtin (ATANF, atanf, flt);\n-  def_builtin (ATAN2, atan2, dbl2);\n   def_builtin (ATAN2F, atan2f, flt2);\n-  def_builtin (COS, cos, dbl);\n   def_builtin (COSF, cosf, flt);\n-  def_builtin (EXP, exp, dbl);\n   def_builtin (EXPF, expf, flt);\n-  def_builtin (LOG10, log10, dbl);\n   def_builtin (LOG10F, log10f, flt);\n-  def_builtin (LOG, log, dbl);\n   def_builtin (LOGF, logf, flt);\n-  def_builtin (SIN, sin, dbl);\n   def_builtin (SINF, sinf, flt);\n-  def_builtin (TAN, tan, dbl);\n   def_builtin (TANF, tanf, flt);\n \n #undef def_builtin"}, {"sha": "53f2522df471d136a8d62c3dab44c8380ed7549d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d3a3b01c3f43635a798a0e03765aef9fdf17e9e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d3a3b01c3f43635a798a0e03765aef9fdf17e9e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7d3a3b01c3f43635a798a0e03765aef9fdf17e9e", "patch": "@@ -1,3 +1,12 @@\n+2006-03-30  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gcc.target/i386/sselibm-1.c: Adjust for libgcc-math partial\n+\tremoval.\n+\t* gcc.target/i386/sselibm-2.c: Likewise.\n+\t* gcc.target/i386/sselibm-3.c: Likewise.\n+\t* gcc.target/i386/sselibm-4.c: Likewise.\n+\t* gcc.target/i386/sselibm-5.c: Likewise.\n+\n 2006-03-28  Roger Sayle  <roger@eyesopen.com>\n \n \t* gcc.dg/fold-andxor-1.c: New test case."}, {"sha": "82f553ba9468e744fd754d561e0e51ab6fdaab28", "filename": "gcc/testsuite/gcc.target/i386/sselibm-1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d3a3b01c3f43635a798a0e03765aef9fdf17e9e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsselibm-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d3a3b01c3f43635a798a0e03765aef9fdf17e9e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsselibm-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsselibm-1.c?ref=7d3a3b01c3f43635a798a0e03765aef9fdf17e9e", "patch": "@@ -2,11 +2,11 @@\n /* { dg-options \"-msse2 -mfpmath=sse\" } */\n /* { dg-require-effective-target ilp32 } */\n \n-double sin(double);\n+float sinf(float);\n \n-double foo(double x)\n+float foo(float x)\n {\n-  return sin(x);\n+  return sinf(x);\n }\n \n-/* { dg-final { scan-assembler-not \"__libm_sse2_sin\" } } */\n+/* { dg-final { scan-assembler-not \"__libm_sse2_sinf\" } } */"}, {"sha": "9c479b65c7ffa3bd3f196d1e4ad2dcff503cb6d6", "filename": "gcc/testsuite/gcc.target/i386/sselibm-2.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d3a3b01c3f43635a798a0e03765aef9fdf17e9e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsselibm-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d3a3b01c3f43635a798a0e03765aef9fdf17e9e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsselibm-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsselibm-2.c?ref=7d3a3b01c3f43635a798a0e03765aef9fdf17e9e", "patch": "@@ -2,11 +2,11 @@\n /* { dg-options \"-msse2 -mfpmath=sse -msselibm\" } */\n /* { dg-require-effective-target ilp32 } */\n \n-double sin(double);\n+float sinf(float);\n \n-double foo(double x)\n+float foo(float x)\n {\n-  return sin(x);\n+  return sinf(x);\n }\n \n-/* { dg-final { scan-assembler \"__libm_sse2_sin\" } } */\n+/* { dg-final { scan-assembler \"__libm_sse2_sinf\" } } */"}, {"sha": "eaa8d8fcf4528400deda6b173b083ab36e63ae4e", "filename": "gcc/testsuite/gcc.target/i386/sselibm-3.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d3a3b01c3f43635a798a0e03765aef9fdf17e9e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsselibm-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d3a3b01c3f43635a798a0e03765aef9fdf17e9e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsselibm-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsselibm-3.c?ref=7d3a3b01c3f43635a798a0e03765aef9fdf17e9e", "patch": "@@ -2,18 +2,18 @@\n /* { dg-options \"-O1 -msse2 -mfpmath=sse -msselibm\" } */\n /* { dg-require-effective-target ilp32 } */\n \n-double sin(double);\n-double (*mysin)(double) = sin;\n+float sinf(float);\n+float (*mysin)(float) = sinf;\n \n-double f1(double x)\n+float f1(float x)\n {\n-  return sin(x);\n+  return sinf(x);\n }\n \n-double f2(double x)\n+float f2(float x)\n {\n-  /* Verify we do not expand the following call to __libm_sse2_sin.  */\n+  /* Verify we do not expand the following call to __libm_sse2_sinf.  */\n   return (*mysin)(x);\n }\n \n-/* { dg-final { scan-assembler-times \"__libm_sse2_sin\" 1 } } */\n+/* { dg-final { scan-assembler-times \"__libm_sse2_sinf\" 1 } } */"}, {"sha": "152672a6103205d95daafbfb10d871b226628c6c", "filename": "gcc/testsuite/gcc.target/i386/sselibm-4.c", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d3a3b01c3f43635a798a0e03765aef9fdf17e9e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsselibm-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d3a3b01c3f43635a798a0e03765aef9fdf17e9e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsselibm-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsselibm-4.c?ref=7d3a3b01c3f43635a798a0e03765aef9fdf17e9e", "patch": "@@ -2,17 +2,6 @@\n /* { dg-options \"-O1 -msse2 -mfpmath=sse -msselibm\" } */\n /* { dg-require-effective-target ilp32 } */\n \n-extern double acos(double);\n-extern double asin(double);\n-extern double atan(double);\n-extern double atan2(double, double);\n-extern double cos(double);\n-extern double exp(double);\n-extern double log10(double);\n-extern double log(double);\n-extern double sin(double);\n-extern double tan(double);\n-\n extern float acosf(float);\n extern float asinf(float);\n extern float atanf(float);\n@@ -30,10 +19,4 @@ float foof(float x)\n \t+ log10f(x) + logf(x) + sinf(x) + tanf(x);\n }\n \n-double foo(double x)\n-{\n-  return acos(x) + asin(x) + atan(x) + atan2(x, x) + cos(x) + exp(x)\n-\t+ log10(x) + log(x) + sin(x) + tan(x);\n-}\n-\n-/* { dg-final { scan-assembler-times \"__libm_sse2\" 20 } } */\n+/* { dg-final { scan-assembler-times \"__libm_sse2\" 10 } } */"}, {"sha": "b7e4690f774255700159489d538e8b0a6112cc79", "filename": "gcc/testsuite/gcc.target/i386/sselibm-5.c", "status": "modified", "additions": 1, "deletions": 26, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d3a3b01c3f43635a798a0e03765aef9fdf17e9e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsselibm-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d3a3b01c3f43635a798a0e03765aef9fdf17e9e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsselibm-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsselibm-5.c?ref=7d3a3b01c3f43635a798a0e03765aef9fdf17e9e", "patch": "@@ -2,17 +2,6 @@\n /* { dg-options \"-O1 -msse2 -mfpmath=sse -msselibm\" } */\n /* { dg-require-effective-target ilp32 } */\n \n-extern double acos(double);\n-extern double asin(double);\n-extern double atan(double);\n-extern double atan2(double, double);\n-extern double cos(double);\n-extern double exp(double);\n-extern double log10(double);\n-extern double log(double);\n-extern double sin(double);\n-extern double tan(double);\n-\n extern float acosf(float);\n extern float asinf(float);\n extern float atanf(float);\n@@ -38,18 +27,4 @@ float foof(float x)\n \t+ __builtin_sse2_tanf(x);\n }\n \n-double foo(double x)\n-{\n-  return __builtin_sse2_acos(x)\n-\t+ __builtin_sse2_asin(x)\n-\t+ __builtin_sse2_atan(x)\n-\t+ __builtin_sse2_atan2(x, x)\n-\t+ __builtin_sse2_cos(x)\n-\t+ __builtin_sse2_exp(x)\n-\t+ __builtin_sse2_log10(x)\n-\t+ __builtin_sse2_log(x)\n-\t+ __builtin_sse2_sin(x)\n-\t+ __builtin_sse2_tan(x);\n-}\n-\n-/* { dg-final { scan-assembler-times \"__libm_sse2\" 20 } } */\n+/* { dg-final { scan-assembler-times \"__libm_sse2\" 10 } } */"}, {"sha": "414a95f9edd1f8890e32066ef115571ffcc81aeb", "filename": "libgcc-math/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d3a3b01c3f43635a798a0e03765aef9fdf17e9e/libgcc-math%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d3a3b01c3f43635a798a0e03765aef9fdf17e9e/libgcc-math%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc-math%2FChangeLog?ref=7d3a3b01c3f43635a798a0e03765aef9fdf17e9e", "patch": "@@ -1,3 +1,9 @@\n+2006-03-30  Richard Guenther  <rguenther@suse.de>\n+\n+\t* i386/Makefile.am: Do not build dbl-64 variants.\n+\t* i386/Makefile.in: Regenerate.\n+\t* dbl-64: Remove.\n+\n 2006-03-20  Richard Guenther  <rguenther@suse.de>\n \n \t* README: New file."}, {"sha": "7e271425d93e122188be07dfd8e25f7f74e88e7b", "filename": "libgcc-math/dbl-64/MathLib.h", "status": "removed", "additions": 0, "deletions": 103, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2FMathLib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2FMathLib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc-math%2Fdbl-64%2FMathLib.h?ref=5cd88d6857dffe4f10c834c773c300881ec20e32", "patch": "@@ -1,103 +0,0 @@\n-/*\n- * IBM Accurate Mathematical Library\n- * Written by International Business Machines Corp.\n- * Copyright (C) 2001 Free Software Foundation, Inc.\n- *\n- * This program is free software; you can redistribute it and/or modify\n- * it under the terms of the GNU Lesser General Public License as published by\n- * the Free Software Foundation; either version 2.1 of the License, or\n- * (at your option) any later version.\n- *\n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Lesser General Public License for more details.\n- *\n- * You should have received a copy of the GNU Lesser General Public License\n- * along with this program; if not, write to the Free Software\n- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n- */\n-\n-/********************************************************************/\n-/* Ultimate math functions. Each function computes the exact        */\n-/* theoretical value of its argument rounded to nearest or even.    */\n-/*                                                                  */\n-/* Assumption: Machine arithmetic operations are performed in       */\n-/* round nearest mode of IEEE 754 standard.                         */\n-/********************************************************************/\n-\n-#ifndef UMATH_LIB\n-#define UMATH_LIB\n-/********************************************************************/\n-/* Function changes the precision mode to IEEE 754 double precision */\n-/* and the rounding mode to nearest or even.                        */\n-/* It returns the original status of these modes.                   */\n-/* See further explanations of usage in DPChange.h                  */\n-/********************************************************************/\n-unsigned short Init_Lib(void);\n-\n-/********************************************************************/\n-/* Function that changes the precision and rounding modes to the    */\n-/* specified by the argument received. See further explanations in  */\n-/* DPChange.h                                                       */\n-/********************************************************************/\n-void Exit_Lib(unsigned short);\n-\n-\n-/* The  asin() function calculates the arc sine of its argument.    */\n-/* The  function returns the arc sine in radians                    */\n-/* (between -PI/2 and PI/2).                                        */\n-/* If the argument is greater than 1 or less than -1 it returns     */\n-/* a NaN.                                                           */\n-double uasin(double );\n-\n-\n-/* The  acos() function calculates the arc cosine of its argument.  */\n-/* The  function returns the arc cosine in radians                  */\n-/* (between -PI/2 and PI/2).                                        */\n-/* If the argument is greater than 1 or less than -1 it returns     */\n-/* a NaN.                                                           */\n-double uacos(double );\n-\n-/* The  atan() function calculates the arctanget of its argument.   */\n-/* The  function returns the arc tangent in radians                 */\n-/* (between -PI/2 and PI/2).                                        */\n-double uatan(double );\n-\n-\n-/* The uatan2() function calculates the arc tangent of the two arguments x   */\n-/* and y (x is the right argument and y is the left one).The signs of both   */\n-/* arguments are used to determine the quadrant of the result.               */\n-/* The function returns the result in radians, which is between -PI and PI   */\n-double uatan2(double ,double );\n-\n-/* Compute log(x). The base of log is e (natural logarithm)         */\n-double ulog(double );\n-\n-/* Compute e raised to the power of argument x.                     */\n-double uexp(double );\n-\n-/* Compute sin(x). The argument x is assumed to be given in radians.*/\n-double usin(double );\n-\n-/* Compute cos(x). The argument x is assumed to be given in radians.*/\n-double ucos(double );\n-\n-/* Compute tan(x). The argument x is assumed to be given in radians.*/\n-double utan(double );\n-\n-/* Compute the square root of non-negative argument x.              */\n-/* If x is negative the returned value is NaN.                      */\n-double usqrt(double );\n-\n-/* Compute x raised to the power of y, where x is the left argument */\n-/* and y is the right argument. The function returns a NaN if x<0.  */\n-/* If x equals zero it returns -inf                                 */\n-double upow(double , double );\n-\n-/* Computing x mod y, where x is the left argument and y is the     */\n-/* right one.                                                       */\n-double uremainder(double , double );\n-\n-\n-#endif"}, {"sha": "ff67957253a9ef60859e5e0702f86b3f95cf5b31", "filename": "libgcc-math/dbl-64/asincos.tbl", "status": "removed", "additions": 0, "deletions": 5169, "changes": 5169, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fasincos.tbl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fasincos.tbl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc-math%2Fdbl-64%2Fasincos.tbl?ref=5cd88d6857dffe4f10c834c773c300881ec20e32"}, {"sha": "72f67f01fcde2b32e6d7c707ea7f80a7fd2add26", "filename": "libgcc-math/dbl-64/atnat.h", "status": "removed", "additions": 0, "deletions": 167, "changes": 167, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fatnat.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fatnat.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc-math%2Fdbl-64%2Fatnat.h?ref=5cd88d6857dffe4f10c834c773c300881ec20e32", "patch": "@@ -1,167 +0,0 @@\n-/*\n- * IBM Accurate Mathematical Library\n- * Written by International Business Machines Corp.\n- * Copyright (C) 2001 Free Software Foundation, Inc.\n- *\n- * This program is free software; you can redistribute it and/or modify\n- * it under the terms of the GNU Lesser General Public License as published by\n- * the Free Software Foundation; either version 2.1 of the License, or\n- * (at your option) any later version.\n- *\n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Lesser General Public License for more details.\n- *\n- * You should have received a copy of the GNU Lesser General Public License\n- * along with this program; if not, write to the Free Software\n- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n- */\n-\n-/************************************************************************/\n-/*  MODULE_NAME: atnat.h                                                */\n-/*                                                                      */\n-/*                                                                      */\n-/* \tcommon data and variables definition for BIG or LITTLE ENDIAN   */\n-/************************************************************************/\n-#ifndef ATNAT_H\n-#define ATNAT_H\n-\n-#define M 4\n-\n-#ifdef BIG_ENDI\n-  static const number\n-  /* polynomial I */\n-/**/ d3             = {{0xbfd55555, 0x55555555} }, /* -0.333... */\n-/**/ d5             = {{0x3fc99999, 0x999997fd} }, /*  0.199... */\n-/**/ d7             = {{0xbfc24924, 0x923f7603} }, /* -0.142... */\n-/**/ d9             = {{0x3fbc71c6, 0xe5129a3b} }, /*  0.111... */\n-/**/ d11            = {{0xbfb74580, 0x22b13c25} }, /* -0.090... */\n-/**/ d13            = {{0x3fb375f0, 0x8b31cbce} }, /*  0.076... */\n-  /* polynomial II */\n-/**/ f3             = {{0xbfd55555, 0x55555555} }, /* -1/3      */\n-/**/ ff3            = {{0xbc755555, 0x55555555} }, /* -1/3-f3   */\n-/**/ f5             = {{0x3fc99999, 0x9999999a} }, /*  1/5      */\n-/**/ ff5            = {{0xbc699999, 0x9999999a} }, /*  1/5-f5   */\n-/**/ f7             = {{0xbfc24924, 0x92492492} }, /* -1/7      */\n-/**/ ff7            = {{0xbc624924, 0x92492492} }, /* -1/7-f7   */\n-/**/ f9             = {{0x3fbc71c7, 0x1c71c71c} }, /*  1/9      */\n-/**/ ff9            = {{0x3c5c71c7, 0x1c71c71c} }, /*  1/9-f9   */\n-/**/ f11            = {{0xbfb745d1, 0x745d1746} }, /* -1/11     */\n-/**/ f13            = {{0x3fb3b13b, 0x13b13b14} }, /*  1/13     */\n-/**/ f15            = {{0xbfb11111, 0x11111111} }, /* -1/15     */\n-/**/ f17            = {{0x3fae1e1e, 0x1e1e1e1e} }, /*  1/17     */\n-/**/ f19            = {{0xbfaaf286, 0xbca1af28} }, /* -1/19     */\n-  /* constants    */\n-/**/ zero           = {{0x00000000, 0x00000000} }, /*  0            */\n-/**/ one            = {{0x3ff00000, 0x00000000} }, /*  1            */\n-/**/ a              = {{0x3e4bb67a, 0x00000000} }, /*  1.290e-8     */\n-/**/ b              = {{0x3fb00000, 0x00000000} }, /*  1/16         */\n-/**/ c              = {{0x3ff00000, 0x00000000} }, /*  1            */\n-/**/ d              = {{0x40300000, 0x00000000} }, /*  16           */\n-/**/ e              = {{0x43349ff2, 0x00000000} }, /*  5.805e15     */\n-/**/ hpi            = {{0x3ff921fb, 0x54442d18} }, /*  pi/2         */\n-/**/ mhpi           = {{0xbff921fb, 0x54442d18} }, /* -pi/2         */\n-/**/ hpi1           = {{0x3c91a626, 0x33145c07} }, /*  pi/2-hpi     */\n-/**/ u1             = {{0x3c2d3382, 0x00000000} }, /*  7.915e-19    */\n-/**/ u21            = {{0x3c6dffc0, 0x00000000} }, /*  1.301e-17    */\n-/**/ u22            = {{0x3c527bd0, 0x00000000} }, /*  4.008e-18    */\n-/**/ u23            = {{0x3c3cd057, 0x00000000} }, /*  1.562e-18    */\n-/**/ u24            = {{0x3c329cdf, 0x00000000} }, /*  1.009e-18    */\n-/**/ u31            = {{0x3c3a1edf, 0x00000000} }, /*  1.416e-18    */\n-/**/ u32            = {{0x3c33f0e1, 0x00000000} }, /*  1.081e-18    */\n-/**/ u4             = {{0x3bf955e4, 0x00000000} }, /*  8.584e-20    */\n-/**/ u5             = {{0x3aaef2d1, 0x00000000} }, /*  5e-26        */\n-/**/ u6             = {{0x3a98c56d, 0x00000000} }, /*  2.001e-26    */\n-/**/ u7             = {{0x3a9375de, 0x00000000} }, /*  1.572e-26    */\n-/**/ u8             = {{0x3a6eeb36, 0x00000000} }, /*  3.122e-27    */\n-/**/ u9[M]          ={{{0x38c1aa5b, 0x00000000} }, /* 2.658e-35     */\n-/**/                  {{0x35c1aa4d, 0x00000000} }, /* 9.443e-50     */\n-/**/                  {{0x32c1aa88, 0x00000000} }, /* 3.355e-64     */\n-/**/                  {{0x11c1aa56, 0x00000000} }},/* 3.818e-223    */\n-/**/ two8           = {{0x40700000, 0x00000000} }, /*  2**8=256     */\n-/**/ two52          = {{0x43300000, 0x00000000} }; /*  2**52        */\n-\n-#else\n-#ifdef LITTLE_ENDI\n-  static const number\n-  /* polynomial I */\n-/**/ d3             = {{0x55555555, 0xbfd55555} }, /* -0.333... */\n-/**/ d5             = {{0x999997fd, 0x3fc99999} }, /*  0.199... */\n-/**/ d7             = {{0x923f7603, 0xbfc24924} }, /* -0.142... */\n-/**/ d9             = {{0xe5129a3b, 0x3fbc71c6} }, /*  0.111... */\n-/**/ d11            = {{0x22b13c25, 0xbfb74580} }, /* -0.090... */\n-/**/ d13            = {{0x8b31cbce, 0x3fb375f0} }, /*  0.076... */\n-  /* polynomial II */\n-/**/ f3             = {{0x55555555, 0xbfd55555} }, /* -1/3      */\n-/**/ ff3            = {{0x55555555, 0xbc755555} }, /* -1/3-f3   */\n-/**/ f5             = {{0x9999999a, 0x3fc99999} }, /*  1/5      */\n-/**/ ff5            = {{0x9999999a, 0xbc699999} }, /*  1/5-f5   */\n-/**/ f7             = {{0x92492492, 0xbfc24924} }, /* -1/7      */\n-/**/ ff7            = {{0x92492492, 0xbc624924} }, /* -1/7-f7   */\n-/**/ f9             = {{0x1c71c71c, 0x3fbc71c7} }, /*  1/9      */\n-/**/ ff9            = {{0x1c71c71c, 0x3c5c71c7} }, /*  1/9-f9   */\n-/**/ f11            = {{0x745d1746, 0xbfb745d1} }, /* -1/11     */\n-/**/ f13            = {{0x13b13b14, 0x3fb3b13b} }, /*  1/13     */\n-/**/ f15            = {{0x11111111, 0xbfb11111} }, /* -1/15     */\n-/**/ f17            = {{0x1e1e1e1e, 0x3fae1e1e} }, /*  1/17     */\n-/**/ f19            = {{0xbca1af28, 0xbfaaf286} }, /* -1/19     */\n-  /* constants    */\n-/**/ zero           = {{0x00000000, 0x00000000} }, /*  0            */\n-/**/ one            = {{0x00000000, 0x3ff00000} }, /*  1            */\n-/**/ a              = {{0x00000000, 0x3e4bb67a} }, /*  1.290e-8     */\n-/**/ b              = {{0x00000000, 0x3fb00000} }, /*  1/16         */\n-/**/ c              = {{0x00000000, 0x3ff00000} }, /*  1            */\n-/**/ d              = {{0x00000000, 0x40300000} }, /*  16           */\n-/**/ e              = {{0x00000000, 0x43349ff2} }, /*  5.805e15     */\n-/**/ hpi            = {{0x54442d18, 0x3ff921fb} }, /*  pi/2         */\n-/**/ mhpi           = {{0x54442d18, 0xbff921fb} }, /* -pi/2         */\n-/**/ hpi1           = {{0x33145c07, 0x3c91a626} }, /*  pi/2-hpi     */\n-/**/ u1             = {{0x00000000, 0x3c2d3382} }, /*  7.915e-19    */\n-/**/ u21            = {{0x00000000, 0x3c6dffc0} }, /*  1.301e-17    */\n-/**/ u22            = {{0x00000000, 0x3c527bd0} }, /*  4.008e-18    */\n-/**/ u23            = {{0x00000000, 0x3c3cd057} }, /*  1.562e-18    */\n-/**/ u24            = {{0x00000000, 0x3c329cdf} }, /*  1.009e-18    */\n-/**/ u31            = {{0x00000000, 0x3c3a1edf} }, /*  1.416e-18    */\n-/**/ u32            = {{0x00000000, 0x3c33f0e1} }, /*  1.081e-18    */\n-/**/ u4             = {{0x00000000, 0x3bf955e4} }, /*  8.584e-20    */\n-/**/ u5             = {{0x00000000, 0x3aaef2d1} }, /*  5e-26        */\n-/**/ u6             = {{0x00000000, 0x3a98c56d} }, /*  2.001e-26    */\n-/**/ u7             = {{0x00000000, 0x3a9375de} }, /*  1.572e-26    */\n-/**/ u8             = {{0x00000000, 0x3a6eeb36} }, /*  3.122e-27    */\n-/**/ u9[M]          ={{{0x00000000, 0x38c1aa5b} }, /* 2.658e-35     */\n-/**/                  {{0x00000000, 0x35c1aa4d} }, /* 9.443e-50     */\n-/**/                  {{0x00000000, 0x32c1aa88} }, /* 3.355e-64     */\n-/**/                  {{0x00000000, 0x11c1aa56} }},/* 3.818e-223    */\n-/**/ two8           = {{0x00000000, 0x40700000} }, /*  2**8=256     */\n-/**/ two52          = {{0x00000000, 0x43300000} }; /*  2**52        */\n-\n-#endif\n-#endif\n-\n-#define  ZERO      zero.d\n-#define  ONE       one.d\n-#define  A         a.d\n-#define  B         b.d\n-#define  C         c.d\n-#define  D         d.d\n-#define  E         e.d\n-#define  HPI       hpi.d\n-#define  MHPI      mhpi.d\n-#define  HPI1      hpi1.d\n-#define  U1        u1.d\n-#define  U21       u21.d\n-#define  U22       u22.d\n-#define  U23       u23.d\n-#define  U24       u24.d\n-#define  U31       u31.d\n-#define  U32       u32.d\n-#define  U4        u4.d\n-#define  U5        u5.d\n-#define  U6        u6.d\n-#define  U7        u7.d\n-#define  U8        u8.d\n-#define  TWO8      two8.d\n-#define  TWO52     two52.d\n-\n-#endif"}, {"sha": "c6914ac0fa0a2223c626c7a5d6296254cfe58c93", "filename": "libgcc-math/dbl-64/atnat2.h", "status": "removed", "additions": 0, "deletions": 185, "changes": 185, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fatnat2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fatnat2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc-math%2Fdbl-64%2Fatnat2.h?ref=5cd88d6857dffe4f10c834c773c300881ec20e32", "patch": "@@ -1,185 +0,0 @@\n-\n-/*\n- * IBM Accurate Mathematical Library\n- * Written by International Business Machines Corp.\n- * Copyright (C) 2001 Free Software Foundation, Inc.\n- *\n- * This program is free software; you can redistribute it and/or modify\n- * it under the terms of the GNU Lesser General Public License as published by\n- * the Free Software Foundation; either version 2.1 of the License, or\n- * (at your option) any later version.\n- *\n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Lesser General Public License for more details.\n- *\n- * You should have received a copy of the GNU Lesser General Public License\n- * along with this program; if not, write to the Free Software\n- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n- */\n-\n-/************************************************************************/\n-/*  MODULE_NAME: atnat2.h                                                */\n-/*                                                                      */\n-/*                                                                      */\n-/* \tcommon data and variables definition for BIG or LITTLE ENDIAN   */\n-/************************************************************************/\n-\n-\n-\n-#ifndef ATNAT2_H\n-#define ATNAT2_H\n-\n-\n-#define MM 5\n-#ifdef BIG_ENDI\n-\n-  static const number\n-  /* polynomial I */\n-/**/ d3             = {{0xbfd55555, 0x55555555} }, /* -0.333... */\n-/**/ d5             = {{0x3fc99999, 0x999997fd} }, /*  0.199... */\n-/**/ d7             = {{0xbfc24924, 0x923f7603} }, /* -0.142... */\n-/**/ d9             = {{0x3fbc71c6, 0xe5129a3b} }, /*  0.111... */\n-/**/ d11            = {{0xbfb74580, 0x22b13c25} }, /* -0.090... */\n-/**/ d13            = {{0x3fb375f0, 0x8b31cbce} }, /*  0.076... */\n-  /* polynomial II */\n-/**/ f3             = {{0xbfd55555, 0x55555555} }, /* -1/3      */\n-/**/ ff3            = {{0xbc755555, 0x55555555} }, /* -1/3-f3   */\n-/**/ f5             = {{0x3fc99999, 0x9999999a} }, /*  1/5      */\n-/**/ ff5            = {{0xbc699999, 0x9999999a} }, /*  1/5-f5   */\n-/**/ f7             = {{0xbfc24924, 0x92492492} }, /* -1/7      */\n-/**/ ff7            = {{0xbc624924, 0x92492492} }, /* -1/7-f7   */\n-/**/ f9             = {{0x3fbc71c7, 0x1c71c71c} }, /*  1/9      */\n-/**/ ff9            = {{0x3c5c71c7, 0x1c71c71c} }, /*  1/9-f9   */\n-/**/ f11            = {{0xbfb745d1, 0x745d1746} }, /* -1/11     */\n-/**/ f13            = {{0x3fb3b13b, 0x13b13b14} }, /*  1/13     */\n-/**/ f15            = {{0xbfb11111, 0x11111111} }, /* -1/15     */\n-/**/ f17            = {{0x3fae1e1e, 0x1e1e1e1e} }, /*  1/17     */\n-/**/ f19            = {{0xbfaaf286, 0xbca1af28} }, /* -1/19     */\n-  /* constants    */\n-/**/ zero           = {{0x00000000, 0x00000000} }, /*  0            */\n-/**/ mzero          = {{0x80000000, 0x00000000} }, /* -0            */\n-/**/ one            = {{0x3ff00000, 0x00000000} }, /*  1            */\n-/**/ inv16          = {{0x3fb00000, 0x00000000} }, /*  1/16         */\n-/**/ opi            = {{0x400921fb, 0x54442d18} }, /*  pi           */\n-/**/ opi1           = {{0x3ca1a626, 0x33145c07} }, /*  pi-opi       */\n-/**/ mopi           = {{0xc00921fb, 0x54442d18} }, /* -pi           */\n-/**/ hpi            = {{0x3ff921fb, 0x54442d18} }, /*  pi/2         */\n-/**/ hpi1           = {{0x3c91a626, 0x33145c07} }, /*  pi/2-hpi     */\n-/**/ mhpi           = {{0xbff921fb, 0x54442d18} }, /* -pi/2         */\n-/**/ qpi            = {{0x3fe921fb, 0x54442d18} }, /*  pi/4         */\n-/**/ qpi1           = {{0x3c81a626, 0x33145c07} }, /*  pi/4-qpi     */\n-/**/ mqpi           = {{0xbfe921fb, 0x54442d18} }, /* -pi/4         */\n-/**/ tqpi           = {{0x4002d97c, 0x7f3321d2} }, /*  3pi/4        */\n-/**/ tqpi1          = {{0x3c9a7939, 0x4c9e8a0a} }, /*  3pi/4-tqpi   */\n-/**/ mtqpi          = {{0xc002d97c, 0x7f3321d2} }, /* -3pi/4        */\n-/**/ u1             = {{0x3c314c2a, 0x00000000} }, /*  9.377e-19    */\n-/**/ u2             = {{0x3bf955e4, 0x00000000} }, /*  8.584e-20    */\n-/**/ u3             = {{0x3bf955e4, 0x00000000} }, /*  8.584e-20    */\n-/**/ u4             = {{0x3bf955e4, 0x00000000} }, /*  8.584e-20    */\n-/**/ u5             = {{0x3aaef2d1, 0x00000000} }, /*  5e-26        */\n-/**/ u6             = {{0x3a6eeb36, 0x00000000} }, /*  3.122e-27    */\n-/**/ u7             = {{0x3a6eeb36, 0x00000000} }, /*  3.122e-27    */\n-/**/ u8             = {{0x3a6eeb36, 0x00000000} }, /*  3.122e-27    */\n-/**/ u91            = {{0x3c6dffc0, 0x00000000} }, /*  1.301e-17    */\n-/**/ u92            = {{0x3c527bd0, 0x00000000} }, /*  4.008e-18    */\n-/**/ u93            = {{0x3c3cd057, 0x00000000} }, /*  1.562e-18    */\n-/**/ u94            = {{0x3c329cdf, 0x00000000} }, /*  1.009e-18    */\n-/**/ ua1            = {{0x3c3a1edf, 0x00000000} }, /*  1.416e-18    */\n-/**/ ua2            = {{0x3c33f0e1, 0x00000000} }, /*  1.081e-18    */\n-/**/ ub             = {{0x3a98c56d, 0x00000000} }, /*  2.001e-26    */\n-/**/ uc             = {{0x3a9375de, 0x00000000} }, /*  1.572e-26    */\n-/**/ ud[MM]         ={{{0x38c6eddf, 0x00000000} }, /*  3.450e-35    */\n-/**/                  {{0x35c6ef60, 0x00000000} }, /*  1.226e-49    */\n-/**/                  {{0x32c6ed2f, 0x00000000} }, /*  4.354e-64    */\n-/**/                  {{0x23c6eee8, 0x00000000} }, /*  2.465e-136   */\n-/**/                  {{0x11c6ed16, 0x00000000} }},/*  4.955e-223   */\n-/**/ ue             = {{0x38900e9d, 0x00000000} }, /*  3.02e-36     */\n-/**/ two8           = {{0x40700000, 0x00000000} }, /*  2**8=256     */\n-/**/ two52          = {{0x43300000, 0x00000000} }, /*  2**52        */\n-/**/ two500         = {{0x5f300000, 0x00000000} }, /*  2**500       */\n-/**/ twom500        = {{0x20b00000, 0x00000000} }, /*  2**(-500)    */\n-/**/ twom1022       = {{0x00100000, 0x00000000} }; /*  2**(-1022)   */\n-\n-#else\n-#ifdef LITTLE_ENDI\n-\n-  static const number\n-  /* polynomial I */\n-/**/ d3             = {{0x55555555, 0xbfd55555} }, /* -0.333... */\n-/**/ d5             = {{0x999997fd, 0x3fc99999} }, /*  0.199... */\n-/**/ d7             = {{0x923f7603, 0xbfc24924} }, /* -0.142... */\n-/**/ d9             = {{0xe5129a3b, 0x3fbc71c6} }, /*  0.111... */\n-/**/ d11            = {{0x22b13c25, 0xbfb74580} }, /* -0.090... */\n-/**/ d13            = {{0x8b31cbce, 0x3fb375f0} }, /*  0.076... */\n-  /* polynomial II */\n-/**/ f3             = {{0x55555555, 0xbfd55555} }, /* -1/3      */\n-/**/ ff3            = {{0x55555555, 0xbc755555} }, /* -1/3-f3   */\n-/**/ f5             = {{0x9999999a, 0x3fc99999} }, /*  1/5      */\n-/**/ ff5            = {{0x9999999a, 0xbc699999} }, /*  1/5-f5   */\n-/**/ f7             = {{0x92492492, 0xbfc24924} }, /* -1/7      */\n-/**/ ff7            = {{0x92492492, 0xbc624924} }, /* -1/7-f7   */\n-/**/ f9             = {{0x1c71c71c, 0x3fbc71c7} }, /*  1/9      */\n-/**/ ff9            = {{0x1c71c71c, 0x3c5c71c7} }, /*  1/9-f9   */\n-/**/ f11            = {{0x745d1746, 0xbfb745d1} }, /* -1/11     */\n-/**/ f13            = {{0x13b13b14, 0x3fb3b13b} }, /*  1/13     */\n-/**/ f15            = {{0x11111111, 0xbfb11111} }, /* -1/15     */\n-/**/ f17            = {{0x1e1e1e1e, 0x3fae1e1e} }, /*  1/17     */\n-/**/ f19            = {{0xbca1af28, 0xbfaaf286} }, /* -1/19     */\n-  /* constants    */\n-/**/ zero           = {{0x00000000, 0x00000000} }, /*  0            */\n-/**/ mzero          = {{0x00000000, 0x80000000} }, /* -0            */\n-/**/ one            = {{0x00000000, 0x3ff00000} }, /*  1            */\n-/**/ inv16          = {{0x00000000, 0x3fb00000} }, /*  1/16         */\n-/**/ opi            = {{0x54442d18, 0x400921fb} }, /*  pi           */\n-/**/ opi1           = {{0x33145c07, 0x3ca1a626} }, /*  pi-opi       */\n-/**/ mopi           = {{0x54442d18, 0xc00921fb} }, /* -pi           */\n-/**/ hpi            = {{0x54442d18, 0x3ff921fb} }, /*  pi/2         */\n-/**/ hpi1           = {{0x33145c07, 0x3c91a626} }, /*  pi/2-hpi     */\n-/**/ mhpi           = {{0x54442d18, 0xbff921fb} }, /* -pi/2         */\n-/**/ qpi            = {{0x54442d18, 0x3fe921fb} }, /*  pi/4         */\n-/**/ qpi1           = {{0x33145c07, 0x3c81a626} }, /*  pi/4-qpi     */\n-/**/ mqpi           = {{0x54442d18, 0xbfe921fb} }, /* -pi/4         */\n-/**/ tqpi           = {{0x7f3321d2, 0x4002d97c} }, /*  3pi/4        */\n-/**/ tqpi1          = {{0x4c9e8a0a, 0x3c9a7939} }, /*  3pi/4-tqpi   */\n-/**/ mtqpi          = {{0x7f3321d2, 0xc002d97c} }, /* -3pi/4        */\n-/**/ u1             = {{0x00000000, 0x3c314c2a} }, /*  9.377e-19    */\n-/**/ u2             = {{0x00000000, 0x3bf955e4} }, /*  8.584e-20    */\n-/**/ u3             = {{0x00000000, 0x3bf955e4} }, /*  8.584e-20    */\n-/**/ u4             = {{0x00000000, 0x3bf955e4} }, /*  8.584e-20    */\n-/**/ u5             = {{0x00000000, 0x3aaef2d1} }, /*  5e-26        */\n-/**/ u6             = {{0x00000000, 0x3a6eeb36} }, /*  3.122e-27    */\n-/**/ u7             = {{0x00000000, 0x3a6eeb36} }, /*  3.122e-27    */\n-/**/ u8             = {{0x00000000, 0x3a6eeb36} }, /*  3.122e-27    */\n-/**/ u91            = {{0x00000000, 0x3c6dffc0} }, /*  1.301e-17    */\n-/**/ u92            = {{0x00000000, 0x3c527bd0} }, /*  4.008e-18    */\n-/**/ u93            = {{0x00000000, 0x3c3cd057} }, /*  1.562e-18    */\n-/**/ u94            = {{0x00000000, 0x3c329cdf} }, /*  1.009e-18    */\n-/**/ ua1            = {{0x00000000, 0x3c3a1edf} }, /*  1.416e-18    */\n-/**/ ua2            = {{0x00000000, 0x3c33f0e1} }, /*  1.081e-18    */\n-/**/ ub             = {{0x00000000, 0x3a98c56d} }, /*  2.001e-26    */\n-/**/ uc             = {{0x00000000, 0x3a9375de} }, /*  1.572e-26    */\n-/**/ ud[MM]         ={{{0x00000000, 0x38c6eddf} }, /*  3.450e-35    */\n-/**/                  {{0x00000000, 0x35c6ef60} }, /*  1.226e-49    */\n-/**/                  {{0x00000000, 0x32c6ed2f} }, /*  4.354e-64    */\n-/**/                  {{0x00000000, 0x23c6eee8} }, /*  2.465e-136   */\n-/**/                  {{0x00000000, 0x11c6ed16} }},/*  4.955e-223   */\n-/**/ ue             = {{0x00000000, 0x38900e9d} }, /*  3.02e-36     */\n-/**/ two8           = {{0x00000000, 0x40700000} }, /*  2**8=256     */\n-/**/ two52          = {{0x00000000, 0x43300000} }, /*  2**52        */\n-/**/ two500         = {{0x00000000, 0x5f300000} }, /*  2**500       */\n-/**/ twom500        = {{0x00000000, 0x20b00000} }, /*  2**(-500)    */\n-/**/ twom1022       = {{0x00000000, 0x00100000} }; /*  2**(-1022)   */\n-\n-#endif\n-#endif\n-\n-#define  ZERO      zero.d\n-#define  MZERO     mzero.d\n-#define  ONE       one.d\n-#define  TWO8      two8.d\n-#define  TWO52     two52.d\n-#define  TWOM1022  twom1022.d\n-\n-#endif"}, {"sha": "76015f0c5ce4daf46365e1911b2c4a8ba94570fb", "filename": "libgcc-math/dbl-64/branred.c", "status": "removed", "additions": 0, "deletions": 144, "changes": 144, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fbranred.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fbranred.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc-math%2Fdbl-64%2Fbranred.c?ref=5cd88d6857dffe4f10c834c773c300881ec20e32", "patch": "@@ -1,144 +0,0 @@\n-/*\n- * IBM Accurate Mathematical Library\n- * Written by International Business Machines Corp.\n- * Copyright (C) 2001 Free Software Foundation, Inc.\n- *\n- * This program is free software; you can redistribute it and/or modify\n- * it under the terms of the GNU Lesser General Public License as published by\n- * the Free Software Foundation; either version 2.1 of the License, or\n- * (at your option) any later version.\n- *\n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Lesser General Public License for more details.\n- *\n- * You should have received a copy of the GNU Lesser General Public License\n- * along with this program; if not, write to the Free Software\n- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n- */\n-/*******************************************************************/\n-/*                                                                 */\n-/* MODULE_NAME: branred.c                                          */\n-/*                                                                 */\n-/* FUNCTIONS:   branred                                            */\n-/*                                                                 */\n-/* FILES NEEDED: branred.h mydefs.h endian.h mpa.h                 */\n-/*               mha.c                                             */\n-/*                                                                 */\n-/* Routine  branred() performs range  reduction of a double number */\n-/* x into Double length number  a+aa,such that                     */\n-/* x=n*pi/2+(a+aa), abs(a+aa)<pi/4, n=0,+-1,+-2,....               */\n-/* Routine returns the integer (n mod 4) of the above description  */\n-/* of x.                                                           */\n-/*******************************************************************/\n-\n-#include \"endian.h\"\n-#include \"mydefs.h\"\n-#include \"branred.h\"\n-#include \"math_private.h\"\n-\n-\n-/*******************************************************************/\n-/* Routine  branred() performs range  reduction of a double number */\n-/* x into Double length number a+aa,such that                      */\n-/* x=n*pi/2+(a+aa), abs(a+aa)<pi/4, n=0,+-1,+-2,....               */\n-/* Routine return integer (n mod 4)                                */\n-/*******************************************************************/\n-int __branred(double x, double *a, double *aa)\n-{\n-  int i,k;\n-#if 0\n-  int n;\n-#endif\n-  mynumber  u,gor;\n-#if 0\n-  mynumber v;\n-#endif\n-  double r[6],s,t,sum,b,bb,sum1,sum2,b1,bb1,b2,bb2,x1,x2,t1,t2;\n-\n-  x*=tm600.x;\n-  t=x*split;   /* split x to two numbers */\n-  x1=t-(t-x);\n-  x2=x-x1;\n-  sum=0;\n-  u.x = x1;\n-  k = (u.i[HIGH_HALF]>>20)&2047;\n-  k = (k-450)/24;\n-  if (k<0)\n-    k=0;\n-  gor.x = t576.x;\n-  gor.i[HIGH_HALF] -= ((k*24)<<20);\n-  for (i=0;i<6;i++)\n-    { r[i] = x1*toverp[k+i]*gor.x; gor.x *= tm24.x; }\n-  for (i=0;i<3;i++) {\n-    s=(r[i]+big.x)-big.x;\n-    sum+=s;\n-    r[i]-=s;\n-  }\n-  t=0;\n-  for (i=0;i<6;i++)\n-    t+=r[5-i];\n-  bb=(((((r[0]-t)+r[1])+r[2])+r[3])+r[4])+r[5];\n-  s=(t+big.x)-big.x;\n-  sum+=s;\n-  t-=s;\n-  b=t+bb;\n-  bb=(t-b)+bb;\n-  s=(sum+big1.x)-big1.x;\n-  sum-=s;\n-  b1=b;\n-  bb1=bb;\n-  sum1=sum;\n-  sum=0;\n-\n-  u.x = x2;\n-  k = (u.i[HIGH_HALF]>>20)&2047;\n-  k = (k-450)/24;\n-  if (k<0)\n-    k=0;\n-  gor.x = t576.x;\n-  gor.i[HIGH_HALF] -= ((k*24)<<20);\n-  for (i=0;i<6;i++)\n-    { r[i] = x2*toverp[k+i]*gor.x; gor.x *= tm24.x; }\n-  for (i=0;i<3;i++) {\n-    s=(r[i]+big.x)-big.x;\n-    sum+=s;\n-    r[i]-=s;\n-  }\n-  t=0;\n-  for (i=0;i<6;i++)\n-    t+=r[5-i];\n-  bb=(((((r[0]-t)+r[1])+r[2])+r[3])+r[4])+r[5];\n-  s=(t+big.x)-big.x;\n- sum+=s;\n- t-=s;\n- b=t+bb;\n- bb=(t-b)+bb;\n- s=(sum+big1.x)-big1.x;\n- sum-=s;\n-\n- b2=b;\n- bb2=bb;\n- sum2=sum;\n-\n- sum=sum1+sum2;\n- b=b1+b2;\n- bb = (ABS(b1)>ABS(b2))? (b1-b)+b2 : (b2-b)+b1;\n- if (b > 0.5)\n-   {b-=1.0; sum+=1.0;}\n- else if (b < -0.5)\n-   {b+=1.0; sum-=1.0;}\n- s=b+(bb+bb1+bb2);\n- t=((b-s)+bb)+(bb1+bb2);\n- b=s*split;\n- t1=b-(b-s);\n- t2=s-t1;\n- b=s*hp0.x;\n- bb=(((t1*mp1.x-b)+t1*mp2.x)+t2*mp1.x)+(t2*mp2.x+s*hp1.x+t*hp0.x);\n- s=b+bb;\n- t=(b-s)+bb;\n- *a=s;\n- *aa=t;\n- return ((int) sum)&3; /* return quater of unit circle */\n-}"}, {"sha": "48f8976640fe13ce87e2d2d402111ee7ead9defa", "filename": "libgcc-math/dbl-64/branred.h", "status": "removed", "additions": 0, "deletions": 80, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fbranred.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fbranred.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc-math%2Fdbl-64%2Fbranred.h?ref=5cd88d6857dffe4f10c834c773c300881ec20e32", "patch": "@@ -1,80 +0,0 @@\n-/*\n- * IBM Accurate Mathematical Library\n- * Written by International Business Machines Corp.\n- * Copyright (C) 2001 Free Software Foundation, Inc.\n- *\n- * This program is free software; you can redistribute it and/or modify\n- * it under the terms of the GNU Lesser General Public License as published by\n- * the Free Software Foundation; either version 2.1 of the License, or\n- * (at your option) any later version.\n- *\n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Lesser General Public License for more details.\n- *\n- * You should have received a copy of the GNU Lesser General Public License\n- * along with this program; if not, write to the Free Software\n- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n- */\n-/************************************************************************/\n-/*  MODULE_NAME: branred.h                                              */\n-/*                                                                      */\n-/*                                                                      */\n-/* \tcommon data and variables definition for BIG or LITTLE ENDIAN   */\n-/************************************************************************/\n-\n-#ifndef BRANRED_H\n-#define BRANRED_H\n-\n-\n-#ifdef BIG_ENDI\n-static const mynumber\n-\n-/**/           t576 = {{0x63f00000, 0x00000000}}, /* 2 ^ 576  */\n-/**/          tm600 = {{0x1a700000, 0x00000000}}, /* 2 ^- 600 */\n-/**/           tm24 = {{0x3e700000, 0x00000000}}, /* 2 ^- 24  */\n-/**/            big = {{0x43380000, 0x00000000}}, /*  6755399441055744      */\n-/**/           big1 = {{0x43580000, 0x00000000}}, /* 27021597764222976      */\n-/**/            hp0 = {{0x3FF921FB, 0x54442D18}} ,/* 1.5707963267948966     */\n-/**/            hp1 = {{0x3C91A626, 0x33145C07}} ,/* 6.123233995736766e-17  */\n-/**/            mp1 = {{0x3FF921FB, 0x58000000}}, /* 1.5707963407039642     */\n-/**/            mp2 = {{0xBE4DDE97, 0x40000000}}; /*-1.3909067675399456e-08 */\n-\n-#else\n-#ifdef LITTLE_ENDI\n-static const mynumber\n-\n-/**/           t576 = {{0x00000000, 0x63f00000}},  /* 2 ^ 576  */\n-/**/          tm600 = {{0x00000000, 0x1a700000}},  /* 2 ^- 600 */\n-/**/           tm24 = {{0x00000000, 0x3e700000}},  /* 2 ^- 24  */\n-/**/            big = {{0x00000000, 0x43380000}},  /*  6755399441055744      */\n-/**/           big1 = {{0x00000000, 0x43580000}},  /* 27021597764222976      */\n-/**/            hp0 = {{0x54442D18, 0x3FF921FB}},  /* 1.5707963267948966     */\n-/**/            hp1 = {{0x33145C07, 0x3C91A626}},  /* 6.123233995736766e-17  */\n-/**/            mp1 = {{0x58000000, 0x3FF921FB}},  /* 1.5707963407039642     */\n-/**/            mp2 = {{0x40000000, 0xBE4DDE97}};  /*-1.3909067675399456e-08 */\n-\n-#endif\n-#endif\n-\n-static const double toverp[75] = { /*  2/ PI base 24*/\n-  10680707.0,  7228996.0,  1387004.0,  2578385.0, 16069853.0,\n-  12639074.0,  9804092.0,  4427841.0, 16666979.0, 11263675.0,\n-  12935607.0,  2387514.0,  4345298.0, 14681673.0,  3074569.0,\n-  13734428.0, 16653803.0,  1880361.0, 10960616.0,  8533493.0,\n-   3062596.0,  8710556.0,  7349940.0,  6258241.0,  3772886.0,\n-   3769171.0,  3798172.0,  8675211.0, 12450088.0,  3874808.0,\n-   9961438.0,   366607.0, 15675153.0,  9132554.0,  7151469.0,\n-   3571407.0,  2607881.0, 12013382.0,  4155038.0,  6285869.0,\n-   7677882.0, 13102053.0, 15825725.0,   473591.0,  9065106.0,\n-  15363067.0,  6271263.0,  9264392.0,  5636912.0,  4652155.0,\n-   7056368.0, 13614112.0, 10155062.0,  1944035.0,  9527646.0,\n-  15080200.0,  6658437.0,  6231200.0,  6832269.0, 16767104.0,\n-   5075751.0,  3212806.0,  1398474.0,  7579849.0,  6349435.0,\n-  12618859.0,  4703257.0, 12806093.0, 14477321.0,  2786137.0,\n-  12875403.0,  9837734.0, 14528324.0, 13719321.0,   343717.0 };\n-\n-static const double split =  134217729.0;\n-\n-#endif"}, {"sha": "bf73fa902e25177cc3aaea642cba9026a79ce630", "filename": "libgcc-math/dbl-64/dla.h", "status": "removed", "additions": 0, "deletions": 174, "changes": 174, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fdla.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fdla.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc-math%2Fdbl-64%2Fdla.h?ref=5cd88d6857dffe4f10c834c773c300881ec20e32", "patch": "@@ -1,174 +0,0 @@\n-/*\n- * IBM Accurate Mathematical Library\n- * Written by International Business Machines Corp.\n- * Copyright (C) 2001 Free Software Foundation, Inc.\n- *\n- * This program is free software; you can redistribute it and/or modify\n- * it under the terms of the GNU Lesser General Public License as published by\n- * the Free Software Foundation; either version 2.1 of the License, or\n- * (at your option) any later version.\n- *\n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Lesser General Public License for more details.\n- *\n- * You should have received a copy of the GNU Lesser General Public License\n- * along with this program; if not, write to the Free Software\n- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n- */\n-\n-/***********************************************************************/\n-/*MODULE_NAME: dla.h                                                   */\n-/*                                                                     */\n-/* This file holds C language macros for 'Double Length Floating Point */\n-/* Arithmetic'. The macros are based on the paper:                     */\n-/* T.J.Dekker, \"A floating-point Technique for extending the           */\n-/* Available Precision\", Number. Math. 18, 224-242 (1971).              */\n-/* A Double-Length number is defined by a pair (r,s), of IEEE double    */\n-/* precision floating point numbers that satisfy,                      */\n-/*                                                                     */\n-/*              abs(s) <= abs(r+s)*2**(-53)/(1+2**(-53)).              */\n-/*                                                                     */\n-/* The computer arithmetic assumed is IEEE double precision in         */\n-/* round to nearest mode. All variables in the macros must be of type  */\n-/* IEEE double.                                                        */\n-/***********************************************************************/\n-\n-/* CN = 1+2**27 = '41a0000002000000' IEEE double format */\n-#define  CN   134217729.0\n-\n-\n-/* Exact addition of two single-length floating point numbers, Dekker. */\n-/* The macro produces a double-length number (z,zz) that satisfies     */\n-/* z+zz = x+y exactly.                                                 */\n-\n-#define  EADD(x,y,z,zz)  \\\n-           z=(x)+(y);  zz=(ABS(x)>ABS(y)) ? (((x)-(z))+(y)) : (((y)-(z))+(x));\n-\n-\n-/* Exact subtraction of two single-length floating point numbers, Dekker. */\n-/* The macro produces a double-length number (z,zz) that satisfies        */\n-/* z+zz = x-y exactly.                                                    */\n-\n-#define  ESUB(x,y,z,zz)  \\\n-           z=(x)-(y);  zz=(ABS(x)>ABS(y)) ? (((x)-(z))-(y)) : ((x)-((y)+(z)));\n-\n-\n-/* Exact multiplication of two single-length floating point numbers,   */\n-/* Veltkamp. The macro produces a double-length number (z,zz) that     */\n-/* satisfies z+zz = x*y exactly. p,hx,tx,hy,ty are temporary           */\n-/* storage variables of type double.                                   */\n-\n-#define  EMULV(x,y,z,zz,p,hx,tx,hy,ty)          \\\n-           p=CN*(x);  hx=((x)-p)+p;  tx=(x)-hx; \\\n-           p=CN*(y);  hy=((y)-p)+p;  ty=(y)-hy; \\\n-           z=(x)*(y); zz=(((hx*hy-z)+hx*ty)+tx*hy)+tx*ty;\n-\n-\n-/* Exact multiplication of two single-length floating point numbers, Dekker. */\n-/* The macro produces a nearly double-length number (z,zz) (see Dekker)      */\n-/* that satisfies z+zz = x*y exactly. p,hx,tx,hy,ty,q are temporary          */\n-/* storage variables of type double.                                         */\n-\n-#define  MUL12(x,y,z,zz,p,hx,tx,hy,ty,q)        \\\n-           p=CN*(x);  hx=((x)-p)+p;  tx=(x)-hx; \\\n-           p=CN*(y);  hy=((y)-p)+p;  ty=(y)-hy; \\\n-           p=hx*hy;  q=hx*ty+tx*hy; z=p+q;  zz=((p-z)+q)+tx*ty;\n-\n-\n-/* Double-length addition, Dekker. The macro produces a double-length   */\n-/* number (z,zz) which satisfies approximately   z+zz = x+xx + y+yy.    */\n-/* An error bound: (abs(x+xx)+abs(y+yy))*4.94e-32. (x,xx), (y,yy)       */\n-/* are assumed to be double-length numbers. r,s are temporary           */\n-/* storage variables of type double.                                    */\n-\n-#define  ADD2(x,xx,y,yy,z,zz,r,s)                    \\\n-           r=(x)+(y);  s=(ABS(x)>ABS(y)) ?           \\\n-                       (((((x)-r)+(y))+(yy))+(xx)) : \\\n-                       (((((y)-r)+(x))+(xx))+(yy));  \\\n-           z=r+s;  zz=(r-z)+s;\n-\n-\n-/* Double-length subtraction, Dekker. The macro produces a double-length  */\n-/* number (z,zz) which satisfies approximately   z+zz = x+xx - (y+yy).    */\n-/* An error bound: (abs(x+xx)+abs(y+yy))*4.94e-32. (x,xx), (y,yy)         */\n-/* are assumed to be double-length numbers. r,s are temporary             */\n-/* storage variables of type double.                                      */\n-\n-#define  SUB2(x,xx,y,yy,z,zz,r,s)                    \\\n-           r=(x)-(y);  s=(ABS(x)>ABS(y)) ?           \\\n-                       (((((x)-r)-(y))-(yy))+(xx)) : \\\n-                       ((((x)-((y)+r))+(xx))-(yy));  \\\n-           z=r+s;  zz=(r-z)+s;\n-\n-\n-/* Double-length multiplication, Dekker. The macro produces a double-length  */\n-/* number (z,zz) which satisfies approximately   z+zz = (x+xx)*(y+yy).       */\n-/* An error bound: abs((x+xx)*(y+yy))*1.24e-31. (x,xx), (y,yy)               */\n-/* are assumed to be double-length numbers. p,hx,tx,hy,ty,q,c,cc are         */\n-/* temporary storage variables of type double.                               */\n-\n-#define  MUL2(x,xx,y,yy,z,zz,p,hx,tx,hy,ty,q,c,cc)  \\\n-           MUL12(x,y,c,cc,p,hx,tx,hy,ty,q)          \\\n-           cc=((x)*(yy)+(xx)*(y))+cc;   z=c+cc;   zz=(c-z)+cc;\n-\n-\n-/* Double-length division, Dekker. The macro produces a double-length        */\n-/* number (z,zz) which satisfies approximately   z+zz = (x+xx)/(y+yy).       */\n-/* An error bound: abs((x+xx)/(y+yy))*1.50e-31. (x,xx), (y,yy)               */\n-/* are assumed to be double-length numbers. p,hx,tx,hy,ty,q,c,cc,u,uu        */\n-/* are temporary storage variables of type double.                           */\n-\n-#define  DIV2(x,xx,y,yy,z,zz,p,hx,tx,hy,ty,q,c,cc,u,uu)  \\\n-           c=(x)/(y);   MUL12(c,y,u,uu,p,hx,tx,hy,ty,q)  \\\n-           cc=(((((x)-u)-uu)+(xx))-c*(yy))/(y);   z=c+cc;   zz=(c-z)+cc;\n-\n-\n-/* Double-length addition, slower but more accurate than ADD2.               */\n-/* The macro produces a double-length                                        */\n-/* number (z,zz) which satisfies approximately   z+zz = (x+xx)+(y+yy).       */\n-/* An error bound: abs(x+xx + y+yy)*1.50e-31. (x,xx), (y,yy)                 */\n-/* are assumed to be double-length numbers. r,rr,s,ss,u,uu,w                 */\n-/* are temporary storage variables of type double.                           */\n-\n-#define  ADD2A(x,xx,y,yy,z,zz,r,rr,s,ss,u,uu,w)                        \\\n-           r=(x)+(y);                                                  \\\n-           if (ABS(x)>ABS(y)) { rr=((x)-r)+(y);  s=(rr+(yy))+(xx); }   \\\n-           else               { rr=((y)-r)+(x);  s=(rr+(xx))+(yy); }   \\\n-           if (rr!=0.0) {                                              \\\n-             z=r+s;  zz=(r-z)+s; }                                     \\\n-           else {                                                      \\\n-             ss=(ABS(xx)>ABS(yy)) ? (((xx)-s)+(yy)) : (((yy)-s)+(xx)); \\\n-             u=r+s;                                                    \\\n-             uu=(ABS(r)>ABS(s))   ? ((r-u)+s)   : ((s-u)+r)  ;         \\\n-             w=uu+ss;  z=u+w;                                          \\\n-             zz=(ABS(u)>ABS(w))   ? ((u-z)+w)   : ((w-z)+u)  ; }\n-\n-\n-/* Double-length subtraction, slower but more accurate than SUB2.            */\n-/* The macro produces a double-length                                        */\n-/* number (z,zz) which satisfies approximately   z+zz = (x+xx)-(y+yy).       */\n-/* An error bound: abs(x+xx - (y+yy))*1.50e-31. (x,xx), (y,yy)               */\n-/* are assumed to be double-length numbers. r,rr,s,ss,u,uu,w                 */\n-/* are temporary storage variables of type double.                           */\n-\n-#define  SUB2A(x,xx,y,yy,z,zz,r,rr,s,ss,u,uu,w)                        \\\n-           r=(x)-(y);                                                  \\\n-           if (ABS(x)>ABS(y)) { rr=((x)-r)-(y);  s=(rr-(yy))+(xx); }   \\\n-           else               { rr=(x)-((y)+r);  s=(rr+(xx))-(yy); }   \\\n-           if (rr!=0.0) {                                              \\\n-             z=r+s;  zz=(r-z)+s; }                                     \\\n-           else {                                                      \\\n-             ss=(ABS(xx)>ABS(yy)) ? (((xx)-s)-(yy)) : ((xx)-((yy)+s)); \\\n-             u=r+s;                                                    \\\n-             uu=(ABS(r)>ABS(s))   ? ((r-u)+s)   : ((s-u)+r)  ;         \\\n-             w=uu+ss;  z=u+w;                                          \\\n-             zz=(ABS(u)>ABS(w))   ? ((u-z)+w)   : ((w-z)+u)  ; }\n-\n-\n-\n-\n-\n-\n-"}, {"sha": "79f344af2dc518ee639ef36274be6a55187da0ca", "filename": "libgcc-math/dbl-64/doasin.c", "status": "removed", "additions": 0, "deletions": 76, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fdoasin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fdoasin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc-math%2Fdbl-64%2Fdoasin.c?ref=5cd88d6857dffe4f10c834c773c300881ec20e32", "patch": "@@ -1,76 +0,0 @@\n-/*\n- * IBM Accurate Mathematical Library\n- * written by International Business Machines Corp.\n- * Copyright (C) 2001 Free Software Foundation\n- *\n- * This program is free software; you can redistribute it and/or modify\n- * it under the terms of the GNU Lesser General Public License as published by\n- * the Free Software Foundation; either version 2.1 of the License, or\n- * (at your option) any later version.\n- *\n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Lesser General Public License for more details.\n- *\n- * You should have received a copy of the GNU Lesser General Public License\n- * along with this program; if not, write to the Free Software\n- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n- */\n-/**********************************************************************/\n-/* MODULE_NAME: doasin.c                                              */\n-/*                                                                    */\n-/* FUNCTION: doasin                                                   */\n-/*                                                                    */\n-/* FILES NEEDED:endian.h mydefs.h dla.h doasin.h                      */\n-/*              mpa.c                                                 */\n-/*                                                                    */\n-/* Compute arcsin(x,dx,v) of double-length number (x+dx) the result   */\n-/* stored in v where v= v[0]+v[1] =arcsin(x+dx)                       */\n-/**********************************************************************/\n-\n-#include \"endian.h\"\n-#include \"mydefs.h\"\n-#include \"dla.h\"\n-#include \"math_private.h\"\n-\n-/********************************************************************/\n-/* Compute arcsin(x,dx,v) of double-length number (x+dx) the result */\n-/* stored in v where v= v[0]+v[1] =arcsin(x+dx)                     */\n-/********************************************************************/\n-void __doasin(double x, double dx, double v[]) {\n-\n-#include \"doasin.h\"\n-\n-  static const double\n-    d5 =  0.22372159090911789889975459505194491E-01,\n-    d6 =  0.17352764422456822913014975683014622E-01,\n-    d7 =  0.13964843843786693521653681033981614E-01,\n-    d8 =  0.11551791438485242609036067259086589E-01,\n-    d9 =  0.97622386568166960207425666787248914E-02,\n-    d10 = 0.83638737193775788576092749009744976E-02,\n-    d11 = 0.79470250400727425881446981833568758E-02;\n-\n-  double xx,p,pp,u,uu,r,s;\n-  double hx,tx,hy,ty,tp,tq,tc,tcc;\n-\n-\n-/* Taylor series for arcsin for Double-Length numbers         */\n-  xx = x*x+2.0*x*dx;\n-  p = ((((((d11*xx+d10)*xx+d9)*xx+d8)*xx+d7)*xx+d6)*xx+d5)*xx;\n-  pp = 0;\n-\n-  MUL2(x,dx,x,dx,u,uu,tp,hx,tx,hy,ty,tq,tc,tcc);\n-  ADD2(p,pp,c4.x,cc4.x,p,pp,r,s);\n-  MUL2(p,pp,u,uu,p,pp,tp,hx,tx,hy,ty,tq,tc,tcc);\n-  ADD2(p,pp,c3.x,cc3.x,p,pp,r,s);\n-  MUL2(p,pp,u,uu,p,pp,tp,hx,tx,hy,ty,tq,tc,tcc);\n-  ADD2(p,pp,c2.x,cc2.x,p,pp,r,s);\n-  MUL2(p,pp,u,uu,p,pp,tp,hx,tx,hy,ty,tq,tc,tcc);\n-  ADD2(p,pp,c1.x,cc1.x,p,pp,r,s);\n-  MUL2(p,pp,u,uu,p,pp,tp,hx,tx,hy,ty,tq,tc,tcc);\n-  MUL2(p,pp,x,dx,p,pp,tp,hx,tx,hy,ty,tq,tc,tcc);\n-  ADD2(p,pp,x,dx,p,pp,r,s);\n-  v[0]=p;\n-  v[1]=pp; /* arcsin(x+dx)=v[0]+v[1] */\n-}"}, {"sha": "0625e51852687c46ebd338037fa68b697fb9a2ab", "filename": "libgcc-math/dbl-64/doasin.h", "status": "removed", "additions": 0, "deletions": 64, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fdoasin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fdoasin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc-math%2Fdbl-64%2Fdoasin.h?ref=5cd88d6857dffe4f10c834c773c300881ec20e32", "patch": "@@ -1,64 +0,0 @@\n-\n-/*\n- * IBM Accurate Mathematical Library\n- * Written by International Business Machines Corp.\n- * Copyright (C) 2001 Free Software Foundation, Inc.\n- *\n- * This program is free software; you can redistribute it and/or modify\n- * it under the terms of the GNU Lesser General Public License as published by\n- * the Free Software Foundation; either version 2.1 of the License, or\n- * (at your option) any later version.\n- *\n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Lesser General Public License for more details.\n- *\n- * You should have received a copy of the GNU Lesser General Public License\n- * along with this program; if not, write to the Free Software\n- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n- */\n-\n-/************************************************************************/\n-/*  MODULE_NAME: doasin.h                                                */\n-/*                                                                      */\n-/*                                                                      */\n-/* \tcommon data and variables definition for BIG or LITTLE ENDIAN   */\n-/************************************************************************/\n-\n-\n-\n-#ifndef DOASIN_H\n-#define DOASIN_H\n-\n-#ifdef BIG_ENDI\n-\n- static const  mynumber\n-/**/             c1 = {{0x3FC55555, 0x55555555}}, /*  0.16666666666666666    */\n-/**/            cc1 = {{0x3C655555, 0x55775389}}, /*  9.2518585419753846e-18 */\n-/**/             c2 = {{0x3FB33333, 0x33333333}}, /*  0.074999999999999997   */\n-/**/            cc2 = {{0x3C499993, 0x63F1A115}}, /*  2.7755472886508899e-18 */\n-/**/             c3 = {{0x3FA6DB6D, 0xB6DB6DB7}}, /*  0.044642857142857144   */\n-/**/            cc3 = {{0xBC320FC0, 0x3D5CF0C5}}, /* -9.7911734574147224e-19 */\n-/**/             c4 = {{0x3F9F1C71, 0xC71C71C5}}, /*  0.030381944444444437   */\n-/**/            cc4 = {{0xBC02B240, 0xFF23ED1E}}; /* -1.2669108566898312e-19 */\n-\n-#else\n-#ifdef LITTLE_ENDI\n-\n- static const  mynumber\n-/**/             c1 = {{0x55555555, 0x3FC55555}}, /*  0.16666666666666666    */\n-/**/            cc1 = {{0x55775389, 0x3C655555}}, /*  9.2518585419753846e-18 */\n-/**/             c2 = {{0x33333333, 0x3FB33333}}, /*  0.074999999999999997   */\n-/**/            cc2 = {{0x63F1A115, 0x3C499993}}, /*  2.7755472886508899e-18 */\n-/**/             c3 = {{0xB6DB6DB7, 0x3FA6DB6D}}, /*  0.044642857142857144   */\n-/**/            cc3 = {{0x3D5CF0C5, 0xBC320FC0}}, /* -9.7911734574147224e-19 */\n-/**/             c4 = {{0xC71C71C5, 0x3F9F1C71}}, /*  0.030381944444444437   */\n-/**/            cc4 = {{0xFF23ED1E, 0xBC02B240}}; /* -1.2669108566898312e-19 */\n-\n-\n-#endif\n-#endif\n-\n-\n-#endif"}, {"sha": "1d347a4bc78b3cb09680a6f065c562ad70057f9f", "filename": "libgcc-math/dbl-64/dosincos.c", "status": "removed", "additions": 0, "deletions": 189, "changes": 189, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fdosincos.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fdosincos.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc-math%2Fdbl-64%2Fdosincos.c?ref=5cd88d6857dffe4f10c834c773c300881ec20e32", "patch": "@@ -1,189 +0,0 @@\n-/*\n- * IBM Accurate Mathematical Library\n- * written by International Business Machines Corp.\n- * Copyright (C) 2001 Free Software Foundation\n- *\n- * This program is free software; you can redistribute it and/or modify\n- * it under the terms of the GNU Lesser General Public License as published by\n- * the Free Software Foundation; either version 2.1 of the License, or\n- * (at your option) any later version.\n- *\n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Lesser General Public License for more details.\n- *\n- * You should have received a copy of the GNU Lesser General Public License\n- * along with this program; if not, write to the Free Software\n- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n- */\n-/********************************************************************/\n-/*                                                                  */\n-/* MODULE_NAME: dosincos.c                                          */\n-/*                                                                  */\n-/*                                                                  */\n-/* FUNCTIONS:   dubsin                                              */\n-/*              dubcos                                              */\n-/*              docos                                               */\n-/* FILES NEEDED: endian.h mydefs.h dla.h dosincos.h                 */\n-/*               sincos.tbl                                         */\n-/*                                                                  */\n-/* Routines compute sin() and cos() as Double-Length numbers         */\n-/********************************************************************/\n-\n-\n-\n-#include \"endian.h\"\n-#include \"mydefs.h\"\n-#include \"sincos.tbl\"\n-#include \"dla.h\"\n-#include \"dosincos.h\"\n-#include \"math_private.h\"\n-\n-/***********************************************************************/\n-/* Routine receive Double-Length number (x+dx) and computing sin(x+dx) */\n-/* as Double-Length number and store it at array v .It computes it by  */\n-/* arithmetic action on Double-Length numbers                          */\n-/*(x+dx) between 0 and PI/4                                            */\n-/***********************************************************************/\n-\n-void __dubsin(double x, double dx, double v[]) {\n-  double r,s,p,hx,tx,hy,ty,q,c,cc,d,dd,d2,dd2,e,ee,\n-    sn,ssn,cs,ccs,ds,dss,dc,dcc;\n-#if 0\n-  double xx,y,yy,z,zz;\n-#endif\n-  mynumber u;\n-  int4 k;\n-\n-  u.x=x+big.x;\n-  k = u.i[LOW_HALF]<<2;\n-  x=x-(u.x-big.x);\n-  d=x+dx;\n-  dd=(x-d)+dx;\n-         /* sin(x+dx)=sin(Xi+t)=sin(Xi)*cos(t) + cos(Xi)sin(t) where t ->0 */\n-  MUL2(d,dd,d,dd,d2,dd2,p,hx,tx,hy,ty,q,c,cc);\n-  sn=sincos.x[k];     /*                                  */\n-  ssn=sincos.x[k+1];  /*      sin(Xi) and cos(Xi)         */\n-  cs=sincos.x[k+2];   /*                                  */\n-  ccs=sincos.x[k+3];  /*                                  */\n-  MUL2(d2,dd2,s7.x,ss7.x,ds,dss,p,hx,tx,hy,ty,q,c,cc);  /* Taylor    */\n-  ADD2(ds,dss,s5.x,ss5.x,ds,dss,r,s);\n-  MUL2(d2,dd2,ds,dss,ds,dss,p,hx,tx,hy,ty,q,c,cc);      /* series    */\n-  ADD2(ds,dss,s3.x,ss3.x,ds,dss,r,s);\n-  MUL2(d2,dd2,ds,dss,ds,dss,p,hx,tx,hy,ty,q,c,cc);      /* for sin   */\n-  MUL2(d,dd,ds,dss,ds,dss,p,hx,tx,hy,ty,q,c,cc);\n-  ADD2(ds,dss,d,dd,ds,dss,r,s);                         /* ds=sin(t) */\n-\n-  MUL2(d2,dd2,c8.x,cc8.x,dc,dcc,p,hx,tx,hy,ty,q,c,cc); ;/* Taylor    */\n-  ADD2(dc,dcc,c6.x,cc6.x,dc,dcc,r,s);\n-  MUL2(d2,dd2,dc,dcc,dc,dcc,p,hx,tx,hy,ty,q,c,cc);      /* series    */\n-  ADD2(dc,dcc,c4.x,cc4.x,dc,dcc,r,s);\n-  MUL2(d2,dd2,dc,dcc,dc,dcc,p,hx,tx,hy,ty,q,c,cc);      /* for cos   */\n-  ADD2(dc,dcc,c2.x,cc2.x,dc,dcc,r,s);\n-  MUL2(d2,dd2,dc,dcc,dc,dcc,p,hx,tx,hy,ty,q,c,cc);      /* dc=cos(t) */\n-\n-  MUL2(cs,ccs,ds,dss,e,ee,p,hx,tx,hy,ty,q,c,cc);\n-  MUL2(dc,dcc,sn,ssn,dc,dcc,p,hx,tx,hy,ty,q,c,cc);\n-  SUB2(e,ee,dc,dcc,e,ee,r,s);\n-  ADD2(e,ee,sn,ssn,e,ee,r,s);                    /* e+ee=sin(x+dx) */\n-\n-  v[0]=e;\n-  v[1]=ee;\n-}\n-/**********************************************************************/\n-/* Routine receive Double-Length number (x+dx) and computes cos(x+dx) */\n-/* as Double-Length number and store it in array v .It computes it by */\n-/* arithmetic action on Double-Length numbers                         */\n-/*(x+dx) between 0 and PI/4                                           */\n-/**********************************************************************/\n-\n-void __dubcos(double x, double dx, double v[]) {\n-  double r,s,p,hx,tx,hy,ty,q,c,cc,d,dd,d2,dd2,e,ee,\n-    sn,ssn,cs,ccs,ds,dss,dc,dcc;\n-#if 0\n-  double xx,y,yy,z,zz;\n-#endif\n-  mynumber u;\n-  int4 k;\n-  u.x=x+big.x;\n-  k = u.i[LOW_HALF]<<2;\n-  x=x-(u.x-big.x);\n-  d=x+dx;\n-  dd=(x-d)+dx;  /* cos(x+dx)=cos(Xi+t)=cos(Xi)cos(t) - sin(Xi)sin(t) */\n-  MUL2(d,dd,d,dd,d2,dd2,p,hx,tx,hy,ty,q,c,cc);\n-  sn=sincos.x[k];     /*                                  */\n-  ssn=sincos.x[k+1];  /*      sin(Xi) and cos(Xi)         */\n-  cs=sincos.x[k+2];   /*                                  */\n-  ccs=sincos.x[k+3];  /*                                  */\n-  MUL2(d2,dd2,s7.x,ss7.x,ds,dss,p,hx,tx,hy,ty,q,c,cc);\n-  ADD2(ds,dss,s5.x,ss5.x,ds,dss,r,s);\n-  MUL2(d2,dd2,ds,dss,ds,dss,p,hx,tx,hy,ty,q,c,cc);\n-  ADD2(ds,dss,s3.x,ss3.x,ds,dss,r,s);\n-  MUL2(d2,dd2,ds,dss,ds,dss,p,hx,tx,hy,ty,q,c,cc);\n-  MUL2(d,dd,ds,dss,ds,dss,p,hx,tx,hy,ty,q,c,cc);\n-  ADD2(ds,dss,d,dd,ds,dss,r,s);\n-\n-  MUL2(d2,dd2,c8.x,cc8.x,dc,dcc,p,hx,tx,hy,ty,q,c,cc);\n-  ADD2(dc,dcc,c6.x,cc6.x,dc,dcc,r,s);\n-  MUL2(d2,dd2,dc,dcc,dc,dcc,p,hx,tx,hy,ty,q,c,cc);\n-  ADD2(dc,dcc,c4.x,cc4.x,dc,dcc,r,s);\n-  MUL2(d2,dd2,dc,dcc,dc,dcc,p,hx,tx,hy,ty,q,c,cc);\n-  ADD2(dc,dcc,c2.x,cc2.x,dc,dcc,r,s);\n-  MUL2(d2,dd2,dc,dcc,dc,dcc,p,hx,tx,hy,ty,q,c,cc);\n-\n-  MUL2(cs,ccs,ds,dss,e,ee,p,hx,tx,hy,ty,q,c,cc);\n-  MUL2(dc,dcc,sn,ssn,dc,dcc,p,hx,tx,hy,ty,q,c,cc);\n-\n-  MUL2(d2,dd2,s7.x,ss7.x,ds,dss,p,hx,tx,hy,ty,q,c,cc);\n-  ADD2(ds,dss,s5.x,ss5.x,ds,dss,r,s);\n-  MUL2(d2,dd2,ds,dss,ds,dss,p,hx,tx,hy,ty,q,c,cc);\n-  ADD2(ds,dss,s3.x,ss3.x,ds,dss,r,s);\n-  MUL2(d2,dd2,ds,dss,ds,dss,p,hx,tx,hy,ty,q,c,cc);\n-  MUL2(d,dd,ds,dss,ds,dss,p,hx,tx,hy,ty,q,c,cc);\n-  ADD2(ds,dss,d,dd,ds,dss,r,s);\n-  MUL2(d2,dd2,c8.x,cc8.x,dc,dcc,p,hx,tx,hy,ty,q,c,cc);\n-  ADD2(dc,dcc,c6.x,cc6.x,dc,dcc,r,s);\n-  MUL2(d2,dd2,dc,dcc,dc,dcc,p,hx,tx,hy,ty,q,c,cc);\n-  ADD2(dc,dcc,c4.x,cc4.x,dc,dcc,r,s);\n-  MUL2(d2,dd2,dc,dcc,dc,dcc,p,hx,tx,hy,ty,q,c,cc);\n-  ADD2(dc,dcc,c2.x,cc2.x,dc,dcc,r,s);\n-  MUL2(d2,dd2,dc,dcc,dc,dcc,p,hx,tx,hy,ty,q,c,cc);\n-  MUL2(sn,ssn,ds,dss,e,ee,p,hx,tx,hy,ty,q,c,cc);\n-  MUL2(dc,dcc,cs,ccs,dc,dcc,p,hx,tx,hy,ty,q,c,cc);\n-  ADD2(e,ee,dc,dcc,e,ee,r,s);\n-  SUB2(cs,ccs,e,ee,e,ee,r,s);\n-\n-  v[0]=e;\n-  v[1]=ee;\n-}\n-/**********************************************************************/\n-/* Routine receive Double-Length number (x+dx) and computes cos(x+dx) */\n-/* as Double-Length number and store it in array v                    */\n-/**********************************************************************/\n-void __docos(double x, double dx, double v[]) {\n-  double y,yy,p,w[2];\n-  if (x>0) {y=x; yy=dx;}\n-     else {y=-x; yy=-dx;}\n-  if (y<0.5*hp0.x)                                 /*  y< PI/4    */\n-           {__dubcos(y,yy,w); v[0]=w[0]; v[1]=w[1];}\n-     else if (y<1.5*hp0.x) {                       /* y< 3/4 * PI */\n-       p=hp0.x-y;  /* p = PI/2 - y */\n-       yy=hp1.x-yy;\n-       y=p+yy;\n-       yy=(p-y)+yy;\n-       if (y>0) {__dubsin(y,yy,w); v[0]=w[0]; v[1]=w[1];}\n-                                       /* cos(x) = sin ( 90 -  x ) */\n-         else {__dubsin(-y,-yy,w); v[0]=-w[0]; v[1]=-w[1];\n-\t }\n-     }\n-  else { /* y>= 3/4 * PI */\n-    p=2.0*hp0.x-y;    /* p = PI- y */\n-    yy=2.0*hp1.x-yy;\n-    y=p+yy;\n-    yy=(p-y)+yy;\n-    __dubcos(y,yy,w);\n-    v[0]=-w[0];\n-    v[1]=-w[1];\n-  }\n-}"}, {"sha": "49d61cd917982039242be618e99b08777269e088", "filename": "libgcc-math/dbl-64/dosincos.h", "status": "removed", "additions": 0, "deletions": 81, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fdosincos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fdosincos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc-math%2Fdbl-64%2Fdosincos.h?ref=5cd88d6857dffe4f10c834c773c300881ec20e32", "patch": "@@ -1,81 +0,0 @@\n-\n-/*\n- * IBM Accurate Mathematical Library\n- * Written by International Business Machines Corp.\n- * Copyright (C) 2001 Free Software Foundation, Inc.\n- *\n- * This program is free software; you can redistribute it and/or modify\n- * it under the terms of the GNU Lesser General Public License as published by\n- * the Free Software Foundation; either version 2.1 of the License, or\n- * (at your option) any later version.\n- *\n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Lesser General Public License for more details.\n- *\n- * You should have received a copy of the GNU Lesser General Public License\n- * along with this program; if not, write to the Free Software\n- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n- */\n-\n-/************************************************************************/\n-/*  MODULE_NAME: dosincos.h                                                */\n-/*                                                                      */\n-/*                                                                      */\n-/* \tcommon data and variables definition for BIG or LITTLE ENDIAN   */\n-/************************************************************************/\n-\n-\n-\n-#ifndef DOSINCOS_H\n-#define DOSINCOS_H\n-\n-\n-#ifdef BIG_ENDI\n-static const mynumber\n-/**/             s3 = {{0xBFC55555, 0x55555555}},/* -0.16666666666666666    */\n-/**/            ss3 = {{0xBC6553AA, 0xE77EE482}},/* -9.2490366677784492e-18 */\n-/**/             s5 = {{0x3F811111, 0x11110F15}},/*  0.008333333333332452   */\n-/**/            ss5 = {{0xBC21AC06, 0xDA488820}},/* -4.7899996586987931e-19 */\n-/**/             s7 = {{0xBF2A019F, 0x5816C78D}},/* -0.00019841261022928957 */\n-/**/            ss7 = {{0x3BCDCEC9, 0x6A18BF2A}},/*  1.2624077757871259e-20 */\n-/**/             c2 = {{0x3FE00000, 0x00000000}},/*  0.5                    */\n-/**/            cc2 = {{0xBA282FD8, 0x00000000}},/* -1.5264073330037701e-28 */\n-/**/             c4 = {{0xBFA55555, 0x55555555}},/* -0.041666666666666664   */\n-/**/            cc4 = {{0xBC4554BC, 0x2FFF257E}},/* -2.312711276085743e-18  */\n-/**/             c6 = {{0x3F56C16C, 0x16C16A96}},/*  0.0013888888888888055  */\n-/**/            cc6 = {{0xBBD2E846, 0xE6346F14}},/* -1.6015133010194884e-20 */\n-/**/             c8 = {{0xBEFA019F, 0x821D5987}},/* -2.480157866754367e-05  */\n-/**/            cc8 = {{0x3B7AB71E, 0x72FFE5CC}},/*  3.5357416224857556e-22 */\n-\n-/**/            big = {{0x42c80000, 0x00000000}}, /* 52776558133248         */\n-\n-/**/            hp0 = {{0x3FF921FB, 0x54442D18}}, /* PI / 2                 */\n-/**/            hp1 = {{0x3C91A626, 0x33145C07}}; /* 6.123233995736766e-17  */\n-#else\n-#ifdef LITTLE_ENDI\n-static const mynumber\n-/**/             s3 = {{0x55555555, 0xBFC55555}},/* -0.16666666666666666    */\n-/**/            ss3 = {{0xE77EE482, 0xBC6553AA}},/* -9.2490366677784492e-18 */\n-/**/             s5 = {{0x11110F15, 0x3F811111}},/*  0.008333333333332452   */\n-/**/            ss5 = {{0xDA488820, 0xBC21AC06}},/* -4.7899996586987931e-19 */\n-/**/             s7 = {{0x5816C78D, 0xBF2A019F}},/* -0.00019841261022928957 */\n-/**/            ss7 = {{0x6A18BF2A, 0x3BCDCEC9}},/*  1.2624077757871259e-20 */\n-/**/             c2 = {{0x00000000, 0x3FE00000}},/*  0.5                    */\n-/**/            cc2 = {{0x00000000, 0xBA282FD8}},/* -1.5264073330037701e-28 */\n-/**/             c4 = {{0x55555555, 0xBFA55555}},/* -0.041666666666666664   */\n-/**/            cc4 = {{0x2FFF257E, 0xBC4554BC}},/* -2.312711276085743e-18  */\n-/**/             c6 = {{0x16C16A96, 0x3F56C16C}},/*  0.0013888888888888055  */\n-/**/            cc6 = {{0xE6346F14, 0xBBD2E846}},/* -1.6015133010194884e-20 */\n-/**/             c8 = {{0x821D5987, 0xBEFA019F}},/* -2.480157866754367e-05  */\n-/**/            cc8 = {{0x72FFE5CC, 0x3B7AB71E}},/*  3.5357416224857556e-22 */\n-\n-/**/            big = {{0x00000000, 0x42c80000}}, /* 52776558133248         */\n-\n-/**/            hp0 = {{0x54442D18, 0x3FF921FB}}, /* PI / 2                 */\n-/**/            hp1 = {{0x33145C07, 0x3C91A626}}; /* 6.123233995736766e-17  */\n-#endif\n-#endif\n-\n-#endif"}, {"sha": "ce5d227b71e7031d30d747c145ef03d124674895", "filename": "libgcc-math/dbl-64/e_asin.c", "status": "removed", "additions": 0, "deletions": 637, "changes": 637, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fe_asin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fe_asin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc-math%2Fdbl-64%2Fe_asin.c?ref=5cd88d6857dffe4f10c834c773c300881ec20e32", "patch": "@@ -1,637 +0,0 @@\n-/*\n- * IBM Accurate Mathematical Library\n- * written by International Business Machines Corp.\n- * Copyright (C) 2001 Free Software Foundation\n- *\n- * This program is free software; you can redistribute it and/or modify\n- * it under the terms of the GNU Lesser General Public License as published by\n- * the Free Software Foundation; either version 2.1 of the License, or\n- * (at your option) any later version.\n- *\n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Lesser General Public License for more details.\n- *\n- * You should have received a copy of the GNU Lesser General Public License\n- * along with this program; if not, write to the Free Software\n- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n- */\n-/******************************************************************/\n-/*     MODULE_NAME:uasncs.c                                       */\n-/*                                                                */\n-/*     FUNCTIONS: uasin                                           */\n-/*                uacos                                           */\n-/* FILES NEEDED: dla.h endian.h mpa.h mydefs.h  usncs.h           */\n-/*               doasin.c sincos32.c dosincos.c mpa.c             */\n-/*               sincos.tbl  asincos.tbl  powtwo.tbl root.tbl     */\n-/*                                                                */\n-/* Ultimate asin/acos routines. Given an IEEE double machine      */\n-/* number x, compute the correctly rounded value of               */\n-/* arcsin(x)or arccos(x)  according to the function called.       */\n-/* Assumption: Machine arithmetic operations are performed in     */\n-/* round to nearest mode of IEEE 754 standard.                    */\n-/*                                                                */\n-/******************************************************************/\n-#include \"endian.h\"\n-#include \"mydefs.h\"\n-#include \"asincos.tbl\"\n-#include \"root.tbl\"\n-#include \"powtwo.tbl\"\n-#include \"MathLib.h\"\n-#include \"uasncs.h\"\n-#include \"math_private.h\"\n-\n-void __doasin(double x, double dx, double w[]);\n-void __dubsin(double x, double dx, double v[]);\n-void __dubcos(double x, double dx, double v[]);\n-void __docos(double x, double dx, double v[]);\n-double __sin32(double x, double res, double res1);\n-double __cos32(double x, double res, double res1);\n-\n-/***************************************************************************/\n-/* An ultimate asin routine. Given an IEEE double machine number x         */\n-/* it computes the correctly rounded (to nearest) value of arcsin(x)       */\n-/***************************************************************************/\n-double __ieee754_asin(double x){\n-  double x1,x2,xx,s1,s2,res1,p,t,res,r,cor,cc,y,c,z,w[2];\n-  mynumber u,v;\n-  int4 k,m,n;\n-#if 0\n-  int4 nn;\n-#endif\n-\n-  u.x = x;\n-  m = u.i[HIGH_HALF];\n-  k = 0x7fffffff&m;              /* no sign */\n-\n-  if (k < 0x3e500000) return x;  /* for x->0 => sin(x)=x */\n-  /*----------------------2^-26 <= |x| < 2^ -3    -----------------*/\n-  else\n-  if (k < 0x3fc00000) {\n-    x2 = x*x;\n-    t = (((((f6*x2 + f5)*x2 + f4)*x2 + f3)*x2 + f2)*x2 + f1)*(x2*x);\n-    res = x+t;         /*  res=arcsin(x) according to Taylor series  */\n-    cor = (x-res)+t;\n-    if (res == res+1.025*cor) return res;\n-    else {\n-      x1 = x+big;\n-      xx = x*x;\n-      x1 -= big;\n-      x2 = x - x1;\n-      p = x1*x1*x1;\n-      s1 = a1.x*p;\n-      s2 = ((((((c7*xx + c6)*xx + c5)*xx + c4)*xx + c3)*xx + c2)*xx*xx*x +\n-\t     ((a1.x+a2.x)*x2*x2+ 0.5*x1*x)*x2) + a2.x*p;\n-      res1 = x+s1;\n-      s2 = ((x-res1)+s1)+s2;\n-      res = res1+s2;\n-      cor = (res1-res)+s2;\n-      if (res == res+1.00014*cor) return res;\n-      else {\n-\t__doasin(x,0,w);\n-\tif (w[0]==(w[0]+1.00000001*w[1])) return w[0];\n-\telse {\n-\t  y=ABS(x);\n-\t  res=ABS(w[0]);\n-\t  res1=ABS(w[0]+1.1*w[1]);\n-\t  return (m>0)?__sin32(y,res,res1):-__sin32(y,res,res1);\n-\t}\n-      }\n-    }\n-  }\n-  /*---------------------0.125 <= |x| < 0.5 -----------------------------*/\n-  else if (k < 0x3fe00000) {\n-    if (k<0x3fd00000) n = 11*((k&0x000fffff)>>15);\n-    else n = 11*((k&0x000fffff)>>14)+352;\n-    if (m>0) xx = x - asncs.x[n];\n-    else xx = -x - asncs.x[n];\n-    t = asncs.x[n+1]*xx;\n-    p=xx*xx*(asncs.x[n+2]+xx*(asncs.x[n+3]+xx*(asncs.x[n+4]+xx*(asncs.x[n+5]\n-     +xx*asncs.x[n+6]))))+asncs.x[n+7];\n-    t+=p;\n-    res =asncs.x[n+8] +t;\n-    cor = (asncs.x[n+8]-res)+t;\n-    if (res == res+1.05*cor) return (m>0)?res:-res;\n-    else {\n-      r=asncs.x[n+8]+xx*asncs.x[n+9];\n-      t=((asncs.x[n+8]-r)+xx*asncs.x[n+9])+(p+xx*asncs.x[n+10]);\n-      res = r+t;\n-      cor = (r-res)+t;\n-      if (res == res+1.0005*cor) return (m>0)?res:-res;\n-      else {\n-\tres1=res+1.1*cor;\n-\tz=0.5*(res1-res);\n-\t__dubsin(res,z,w);\n-\tz=(w[0]-ABS(x))+w[1];\n-\tif (z>1.0e-27) return (m>0)?min(res,res1):-min(res,res1);\n-\telse if (z<-1.0e-27) return (m>0)?max(res,res1):-max(res,res1);\n-\telse {\n-\t  y=ABS(x);\n-\t  return (m>0)?__sin32(y,res,res1):-__sin32(y,res,res1);\n-\t}\n-      }\n-    }\n-  }    /*   else  if (k < 0x3fe00000)    */\n-  /*-------------------- 0.5 <= |x| < 0.75 -----------------------------*/\n-  else\n-  if (k < 0x3fe80000) {\n-    n = 1056+((k&0x000fe000)>>11)*3;\n-    if (m>0) xx = x - asncs.x[n];\n-    else xx = -x - asncs.x[n];\n-    t = asncs.x[n+1]*xx;\n-    p=xx*xx*(asncs.x[n+2]+xx*(asncs.x[n+3]+xx*(asncs.x[n+4]+xx*(asncs.x[n+5]\n-\t   +xx*(asncs.x[n+6]+xx*asncs.x[n+7])))))+asncs.x[n+8];\n-    t+=p;\n-    res =asncs.x[n+9] +t;\n-    cor = (asncs.x[n+9]-res)+t;\n-    if (res == res+1.01*cor) return (m>0)?res:-res;\n-    else {\n-      r=asncs.x[n+9]+xx*asncs.x[n+10];\n-      t=((asncs.x[n+9]-r)+xx*asncs.x[n+10])+(p+xx*asncs.x[n+11]);\n-      res = r+t;\n-      cor = (r-res)+t;\n-      if (res == res+1.0005*cor) return (m>0)?res:-res;\n-      else {\n-\tres1=res+1.1*cor;\n-\tz=0.5*(res1-res);\n-\t__dubsin(res,z,w);\n-\tz=(w[0]-ABS(x))+w[1];\n-\tif (z>1.0e-27) return (m>0)?min(res,res1):-min(res,res1);\n-\telse if (z<-1.0e-27) return (m>0)?max(res,res1):-max(res,res1);\n-\telse {\n-\t  y=ABS(x);\n-\t  return (m>0)?__sin32(y,res,res1):-__sin32(y,res,res1);\n-\t}\n-      }\n-    }\n-  }    /*   else  if (k < 0x3fe80000)    */\n-  /*--------------------- 0.75 <= |x|< 0.921875 ----------------------*/\n-  else\n-  if (k < 0x3fed8000) {\n-    n = 992+((k&0x000fe000)>>13)*13;\n-    if (m>0) xx = x - asncs.x[n];\n-    else xx = -x - asncs.x[n];\n-    t = asncs.x[n+1]*xx;\n-    p=xx*xx*(asncs.x[n+2]+xx*(asncs.x[n+3]+xx*(asncs.x[n+4]+xx*(asncs.x[n+5]\n-     +xx*(asncs.x[n+6]+xx*(asncs.x[n+7]+xx*asncs.x[n+8]))))))+asncs.x[n+9];\n-    t+=p;\n-    res =asncs.x[n+10] +t;\n-    cor = (asncs.x[n+10]-res)+t;\n-    if (res == res+1.01*cor) return (m>0)?res:-res;\n-    else {\n-      r=asncs.x[n+10]+xx*asncs.x[n+11];\n-      t=((asncs.x[n+10]-r)+xx*asncs.x[n+11])+(p+xx*asncs.x[n+12]);\n-      res = r+t;\n-      cor = (r-res)+t;\n-      if (res == res+1.0008*cor) return (m>0)?res:-res;\n-      else {\n-\tres1=res+1.1*cor;\n-\tz=0.5*(res1-res);\n-\ty=hp0.x-res;\n-\tz=((hp0.x-y)-res)+(hp1.x-z);\n-\t__dubcos(y,z,w);\n-\tz=(w[0]-ABS(x))+w[1];\n-\tif (z>1.0e-27) return (m>0)?min(res,res1):-min(res,res1);\n-\telse if (z<-1.0e-27) return (m>0)?max(res,res1):-max(res,res1);\n-\telse {\n-\t  y=ABS(x);\n-\t  return (m>0)?__sin32(y,res,res1):-__sin32(y,res,res1);\n-\t}\n-      }\n-    }\n-  }    /*   else  if (k < 0x3fed8000)    */\n-  /*-------------------0.921875 <= |x| < 0.953125 ------------------------*/\n-  else\n-  if (k < 0x3fee8000) {\n-    n = 884+((k&0x000fe000)>>13)*14;\n-    if (m>0) xx = x - asncs.x[n];\n-    else xx = -x - asncs.x[n];\n-    t = asncs.x[n+1]*xx;\n-    p=xx*xx*(asncs.x[n+2]+xx*(asncs.x[n+3]+xx*(asncs.x[n+4]+\n-                      xx*(asncs.x[n+5]+xx*(asncs.x[n+6]\n-\t\t      +xx*(asncs.x[n+7]+xx*(asncs.x[n+8]+\n-                      xx*asncs.x[n+9])))))))+asncs.x[n+10];\n-    t+=p;\n-    res =asncs.x[n+11] +t;\n-    cor = (asncs.x[n+11]-res)+t;\n-    if (res == res+1.01*cor) return (m>0)?res:-res;\n-    else {\n-      r=asncs.x[n+11]+xx*asncs.x[n+12];\n-      t=((asncs.x[n+11]-r)+xx*asncs.x[n+12])+(p+xx*asncs.x[n+13]);\n-      res = r+t;\n-      cor = (r-res)+t;\n-      if (res == res+1.0007*cor) return (m>0)?res:-res;\n-      else {\n-\tres1=res+1.1*cor;\n-\tz=0.5*(res1-res);\n-\ty=(hp0.x-res)-z;\n-\tz=y+hp1.x;\n-\ty=(y-z)+hp1.x;\n-\t__dubcos(z,y,w);\n-\tz=(w[0]-ABS(x))+w[1];\n-\tif (z>1.0e-27) return (m>0)?min(res,res1):-min(res,res1);\n-\telse if (z<-1.0e-27) return (m>0)?max(res,res1):-max(res,res1);\n-\telse {\n-\t  y=ABS(x);\n-\t  return (m>0)?__sin32(y,res,res1):-__sin32(y,res,res1);\n-\t}\n-      }\n-    }\n-  }    /*   else  if (k < 0x3fee8000)    */\n-\n-  /*--------------------0.953125 <= |x| < 0.96875 ------------------------*/\n-  else\n-  if (k < 0x3fef0000) {\n-    n = 768+((k&0x000fe000)>>13)*15;\n-    if (m>0) xx = x - asncs.x[n];\n-    else xx = -x - asncs.x[n];\n-    t = asncs.x[n+1]*xx;\n-    p=xx*xx*(asncs.x[n+2]+xx*(asncs.x[n+3]+xx*(asncs.x[n+4]+\n-                         xx*(asncs.x[n+5]+xx*(asncs.x[n+6]\n-\t\t\t +xx*(asncs.x[n+7]+xx*(asncs.x[n+8]+\n-                    xx*(asncs.x[n+9]+xx*asncs.x[n+10]))))))))+asncs.x[n+11];\n-    t+=p;\n-    res =asncs.x[n+12] +t;\n-    cor = (asncs.x[n+12]-res)+t;\n-    if (res == res+1.01*cor) return (m>0)?res:-res;\n-    else {\n-      r=asncs.x[n+12]+xx*asncs.x[n+13];\n-      t=((asncs.x[n+12]-r)+xx*asncs.x[n+13])+(p+xx*asncs.x[n+14]);\n-      res = r+t;\n-      cor = (r-res)+t;\n-      if (res == res+1.0007*cor) return (m>0)?res:-res;\n-      else {\n-\tres1=res+1.1*cor;\n-\tz=0.5*(res1-res);\n-\ty=(hp0.x-res)-z;\n-\tz=y+hp1.x;\n-\ty=(y-z)+hp1.x;\n-\t__dubcos(z,y,w);\n-\tz=(w[0]-ABS(x))+w[1];\n-\tif (z>1.0e-27) return (m>0)?min(res,res1):-min(res,res1);\n-\telse if (z<-1.0e-27) return (m>0)?max(res,res1):-max(res,res1);\n-\telse {\n-\t  y=ABS(x);\n-\t  return (m>0)?__sin32(y,res,res1):-__sin32(y,res,res1);\n-\t}\n-      }\n-    }\n-  }    /*   else  if (k < 0x3fef0000)    */\n-  /*--------------------0.96875 <= |x| < 1 --------------------------------*/\n-  else\n-  if (k<0x3ff00000)  {\n-    z = 0.5*((m>0)?(1.0-x):(1.0+x));\n-    v.x=z;\n-    k=v.i[HIGH_HALF];\n-    t=inroot[(k&0x001fffff)>>14]*powtwo[511-(k>>21)];\n-    r=1.0-t*t*z;\n-    t = t*(rt0+r*(rt1+r*(rt2+r*rt3)));\n-    c=t*z;\n-    t=c*(1.5-0.5*t*c);\n-    y=(c+t24)-t24;\n-    cc = (z-y*y)/(t+y);\n-    p=(((((f6*z+f5)*z+f4)*z+f3)*z+f2)*z+f1)*z;\n-    cor = (hp1.x - 2.0*cc)-2.0*(y+cc)*p;\n-    res1 = hp0.x - 2.0*y;\n-    res =res1 + cor;\n-    if (res == res+1.003*((res1-res)+cor)) return (m>0)?res:-res;\n-    else {\n-      c=y+cc;\n-      cc=(y-c)+cc;\n-      __doasin(c,cc,w);\n-      res1=hp0.x-2.0*w[0];\n-      cor=((hp0.x-res1)-2.0*w[0])+(hp1.x-2.0*w[1]);\n-      res = res1+cor;\n-      cor = (res1-res)+cor;\n-      if (res==(res+1.0000001*cor)) return (m>0)?res:-res;\n-      else {\n-\ty=ABS(x);\n-\tres1=res+1.1*cor;\n-\treturn (m>0)?__sin32(y,res,res1):-__sin32(y,res,res1);\n-      }\n-    }\n-  }    /*   else  if (k < 0x3ff00000)    */\n-  /*---------------------------- |x|>=1 -------------------------------*/\n-  else if (k==0x3ff00000 && u.i[LOW_HALF]==0) return (m>0)?hp0.x:-hp0.x;\n-  else\n-  if (k>0x7ff00000 || (k == 0x7ff00000 && u.i[LOW_HALF] != 0)) return x;\n-  else {\n-    u.i[HIGH_HALF]=0x7ff00000;\n-    v.i[HIGH_HALF]=0x7ff00000;\n-    u.i[LOW_HALF]=0;\n-    v.i[LOW_HALF]=0;\n-    return u.x/v.x;  /* NaN */\n- }\n-}\n-\n-/*******************************************************************/\n-/*                                                                 */\n-/*         End of arcsine,  below is arccosine                     */\n-/*                                                                 */\n-/*******************************************************************/\n-\n-double __ieee754_acos(double x)\n-{\n-  double x1,x2,xx,s1,s2,res1,p,t,res,r,cor,cc,y,c,z,w[2],eps;\n-#if 0\n-  double fc;\n-#endif\n-  mynumber u,v;\n-  int4 k,m,n;\n-#if 0\n-  int4 nn;\n-#endif\n-  u.x = x;\n-  m = u.i[HIGH_HALF];\n-  k = 0x7fffffff&m;\n-  /*-------------------  |x|<2.77556*10^-17 ----------------------*/\n-  if (k < 0x3c880000) return hp0.x;\n-\n-  /*-----------------  2.77556*10^-17 <= |x| < 2^-3 --------------*/\n-  else\n-  if (k < 0x3fc00000) {\n-    x2 = x*x;\n-    t = (((((f6*x2 + f5)*x2 + f4)*x2 + f3)*x2 + f2)*x2 + f1)*(x2*x);\n-    r=hp0.x-x;\n-    cor=(((hp0.x-r)-x)+hp1.x)-t;\n-    res = r+cor;\n-    cor = (r-res)+cor;\n-    if (res == res+1.004*cor) return res;\n-    else {\n-      x1 = x+big;\n-      xx = x*x;\n-      x1 -= big;\n-      x2 = x - x1;\n-      p = x1*x1*x1;\n-      s1 = a1.x*p;\n-      s2 = ((((((c7*xx + c6)*xx + c5)*xx + c4)*xx + c3)*xx + c2)*xx*xx*x +\n-\t    ((a1.x+a2.x)*x2*x2+ 0.5*x1*x)*x2) + a2.x*p;\n-      res1 = x+s1;\n-      s2 = ((x-res1)+s1)+s2;\n-      r=hp0.x-res1;\n-      cor=(((hp0.x-r)-res1)+hp1.x)-s2;\n-      res = r+cor;\n-      cor = (r-res)+cor;\n-      if (res == res+1.00004*cor) return res;\n-      else {\n-\t__doasin(x,0,w);\n-\tr=hp0.x-w[0];\n-\tcor=((hp0.x-r)-w[0])+(hp1.x-w[1]);\n-\tres=r+cor;\n-\tcor=(r-res)+cor;\n-\tif (res ==(res +1.00000001*cor)) return res;\n-\telse {\n-\t  res1=res+1.1*cor;\n-\t  return __cos32(x,res,res1);\n-\t}\n-      }\n-    }\n-  }    /*   else  if (k < 0x3fc00000)    */\n-  /*----------------------  0.125 <= |x| < 0.5 --------------------*/\n-  else\n-  if (k < 0x3fe00000) {\n-    if (k<0x3fd00000) n = 11*((k&0x000fffff)>>15);\n-    else n = 11*((k&0x000fffff)>>14)+352;\n-    if (m>0) xx = x - asncs.x[n];\n-    else xx = -x - asncs.x[n];\n-    t = asncs.x[n+1]*xx;\n-    p=xx*xx*(asncs.x[n+2]+xx*(asncs.x[n+3]+xx*(asncs.x[n+4]+\n-                   xx*(asncs.x[n+5]+xx*asncs.x[n+6]))))+asncs.x[n+7];\n-    t+=p;\n-    y = (m>0)?(hp0.x-asncs.x[n+8]):(hp0.x+asncs.x[n+8]);\n-    t = (m>0)?(hp1.x-t):(hp1.x+t);\n-    res = y+t;\n-    if (res == res+1.02*((y-res)+t)) return res;\n-    else {\n-      r=asncs.x[n+8]+xx*asncs.x[n+9];\n-      t=((asncs.x[n+8]-r)+xx*asncs.x[n+9])+(p+xx*asncs.x[n+10]);\n-      if (m>0)\n-\t{p = hp0.x-r; t = (((hp0.x-p)-r)-t)+hp1.x; }\n-      else\n-\t{p = hp0.x+r; t = ((hp0.x-p)+r)+(hp1.x+t); }\n-      res = p+t;\n-      cor = (p-res)+t;\n-      if (res == (res+1.0002*cor)) return res;\n-      else {\n-\tres1=res+1.1*cor;\n-\tz=0.5*(res1-res);\n-\t__docos(res,z,w);\n-\tz=(w[0]-x)+w[1];\n-\tif (z>1.0e-27) return max(res,res1);\n-\telse if (z<-1.0e-27) return min(res,res1);\n-\telse return __cos32(x,res,res1);\n-      }\n-    }\n-  }    /*   else  if (k < 0x3fe00000)    */\n-\n-  /*--------------------------- 0.5 <= |x| < 0.75 ---------------------*/\n-  else\n-  if (k < 0x3fe80000) {\n-    n = 1056+((k&0x000fe000)>>11)*3;\n-    if (m>0) {xx = x - asncs.x[n]; eps=1.04; }\n-    else {xx = -x - asncs.x[n]; eps=1.02; }\n-    t = asncs.x[n+1]*xx;\n-    p=xx*xx*(asncs.x[n+2]+xx*(asncs.x[n+3]+xx*(asncs.x[n+4]+\n-                   xx*(asncs.x[n+5]+xx*(asncs.x[n+6]+\n-                   xx*asncs.x[n+7])))))+asncs.x[n+8];\n-    t+=p;\n-   y = (m>0)?(hp0.x-asncs.x[n+9]):(hp0.x+asncs.x[n+9]);\n-   t = (m>0)?(hp1.x-t):(hp1.x+t);\n-   res = y+t;\n-   if (res == res+eps*((y-res)+t)) return res;\n-   else {\n-     r=asncs.x[n+9]+xx*asncs.x[n+10];\n-     t=((asncs.x[n+9]-r)+xx*asncs.x[n+10])+(p+xx*asncs.x[n+11]);\n-     if (m>0) {p = hp0.x-r; t = (((hp0.x-p)-r)-t)+hp1.x; eps=1.0004; }\n-     else   {p = hp0.x+r; t = ((hp0.x-p)+r)+(hp1.x+t); eps=1.0002; }\n-     res = p+t;\n-     cor = (p-res)+t;\n-     if (res == (res+eps*cor)) return res;\n-     else {\n-       res1=res+1.1*cor;\n-       z=0.5*(res1-res);\n-       __docos(res,z,w);\n-       z=(w[0]-x)+w[1];\n-       if (z>1.0e-27) return max(res,res1);\n-       else if (z<-1.0e-27) return min(res,res1);\n-       else return __cos32(x,res,res1);\n-     }\n-   }\n-  }    /*   else  if (k < 0x3fe80000)    */\n-\n-/*------------------------- 0.75 <= |x| < 0.921875 -------------*/\n-  else\n-  if (k < 0x3fed8000) {\n-    n = 992+((k&0x000fe000)>>13)*13;\n-    if (m>0) {xx = x - asncs.x[n]; eps = 1.04; }\n-    else {xx = -x - asncs.x[n]; eps = 1.01; }\n-    t = asncs.x[n+1]*xx;\n-    p=xx*xx*(asncs.x[n+2]+xx*(asncs.x[n+3]+xx*(asncs.x[n+4]+\n-                      xx*(asncs.x[n+5]+xx*(asncs.x[n+6]+xx*(asncs.x[n+7]+\n-                      xx*asncs.x[n+8]))))))+asncs.x[n+9];\n-    t+=p;\n-    y = (m>0)?(hp0.x-asncs.x[n+10]):(hp0.x+asncs.x[n+10]);\n-    t = (m>0)?(hp1.x-t):(hp1.x+t);\n-    res = y+t;\n-    if (res == res+eps*((y-res)+t)) return res;\n-    else {\n-      r=asncs.x[n+10]+xx*asncs.x[n+11];\n-      t=((asncs.x[n+10]-r)+xx*asncs.x[n+11])+(p+xx*asncs.x[n+12]);\n-      if (m>0) {p = hp0.x-r; t = (((hp0.x-p)-r)-t)+hp1.x; eps=1.0032; }\n-      else   {p = hp0.x+r; t = ((hp0.x-p)+r)+(hp1.x+t); eps=1.0008; }\n-      res = p+t;\n-      cor = (p-res)+t;\n-      if (res == (res+eps*cor)) return res;\n-      else {\n-\tres1=res+1.1*cor;\n-\tz=0.5*(res1-res);\n-\t__docos(res,z,w);\n-\tz=(w[0]-x)+w[1];\n-\tif (z>1.0e-27) return max(res,res1);\n-\telse if (z<-1.0e-27) return min(res,res1);\n-\telse return __cos32(x,res,res1);\n-      }\n-    }\n-  }    /*   else  if (k < 0x3fed8000)    */\n-\n-/*-------------------0.921875 <= |x| < 0.953125 ------------------*/\n-  else\n-  if (k < 0x3fee8000) {\n-    n = 884+((k&0x000fe000)>>13)*14;\n-    if (m>0) {xx = x - asncs.x[n]; eps=1.04; }\n-    else {xx = -x - asncs.x[n]; eps =1.005; }\n-    t = asncs.x[n+1]*xx;\n-    p=xx*xx*(asncs.x[n+2]+xx*(asncs.x[n+3]+xx*(asncs.x[n+4]+\n-                   xx*(asncs.x[n+5]+xx*(asncs.x[n+6]\n-\t\t   +xx*(asncs.x[n+7]+xx*(asncs.x[n+8]+\n-                   xx*asncs.x[n+9])))))))+asncs.x[n+10];\n-    t+=p;\n-    y = (m>0)?(hp0.x-asncs.x[n+11]):(hp0.x+asncs.x[n+11]);\n-    t = (m>0)?(hp1.x-t):(hp1.x+t);\n-    res = y+t;\n-    if (res == res+eps*((y-res)+t)) return res;\n-    else {\n-      r=asncs.x[n+11]+xx*asncs.x[n+12];\n-      t=((asncs.x[n+11]-r)+xx*asncs.x[n+12])+(p+xx*asncs.x[n+13]);\n-      if (m>0) {p = hp0.x-r; t = (((hp0.x-p)-r)-t)+hp1.x; eps=1.0030; }\n-      else   {p = hp0.x+r; t = ((hp0.x-p)+r)+(hp1.x+t); eps=1.0005; }\n-      res = p+t;\n-      cor = (p-res)+t;\n-      if (res == (res+eps*cor)) return res;\n-      else {\n-\tres1=res+1.1*cor;\n-\tz=0.5*(res1-res);\n-\t__docos(res,z,w);\n-\tz=(w[0]-x)+w[1];\n-\tif (z>1.0e-27) return max(res,res1);\n-\telse if (z<-1.0e-27) return min(res,res1);\n-\telse return __cos32(x,res,res1);\n-      }\n-    }\n-  }    /*   else  if (k < 0x3fee8000)    */\n-\n-  /*--------------------0.953125 <= |x| < 0.96875 ----------------*/\n-  else\n-  if (k < 0x3fef0000) {\n-    n = 768+((k&0x000fe000)>>13)*15;\n-    if (m>0) {xx = x - asncs.x[n]; eps=1.04; }\n-    else {xx = -x - asncs.x[n]; eps=1.005;}\n-    t = asncs.x[n+1]*xx;\n-    p=xx*xx*(asncs.x[n+2]+xx*(asncs.x[n+3]+xx*(asncs.x[n+4]+\n-            xx*(asncs.x[n+5]+xx*(asncs.x[n+6]\n-\t    +xx*(asncs.x[n+7]+xx*(asncs.x[n+8]+xx*(asncs.x[n+9]+\n-            xx*asncs.x[n+10]))))))))+asncs.x[n+11];\n-    t+=p;\n-    y = (m>0)?(hp0.x-asncs.x[n+12]):(hp0.x+asncs.x[n+12]);\n-   t = (m>0)?(hp1.x-t):(hp1.x+t);\n-   res = y+t;\n-   if (res == res+eps*((y-res)+t)) return res;\n-   else {\n-     r=asncs.x[n+12]+xx*asncs.x[n+13];\n-     t=((asncs.x[n+12]-r)+xx*asncs.x[n+13])+(p+xx*asncs.x[n+14]);\n-     if (m>0) {p = hp0.x-r; t = (((hp0.x-p)-r)-t)+hp1.x; eps=1.0030; }\n-     else   {p = hp0.x+r; t = ((hp0.x-p)+r)+(hp1.x+t); eps=1.0005; }\n-     res = p+t;\n-     cor = (p-res)+t;\n-     if (res == (res+eps*cor)) return res;\n-     else {\n-       res1=res+1.1*cor;\n-       z=0.5*(res1-res);\n-       __docos(res,z,w);\n-       z=(w[0]-x)+w[1];\n-       if (z>1.0e-27) return max(res,res1);\n-       else if (z<-1.0e-27) return min(res,res1);\n-       else return __cos32(x,res,res1);\n-     }\n-   }\n-  }    /*   else  if (k < 0x3fef0000)    */\n-  /*-----------------0.96875 <= |x| < 1 ---------------------------*/\n-\n-  else\n-  if (k<0x3ff00000)  {\n-    z = 0.5*((m>0)?(1.0-x):(1.0+x));\n-    v.x=z;\n-    k=v.i[HIGH_HALF];\n-    t=inroot[(k&0x001fffff)>>14]*powtwo[511-(k>>21)];\n-    r=1.0-t*t*z;\n-    t = t*(rt0+r*(rt1+r*(rt2+r*rt3)));\n-    c=t*z;\n-    t=c*(1.5-0.5*t*c);\n-    y = (t27*c+c)-t27*c;\n-    cc = (z-y*y)/(t+y);\n-    p=(((((f6*z+f5)*z+f4)*z+f3)*z+f2)*z+f1)*z;\n-    if (m<0) {\n-      cor = (hp1.x - cc)-(y+cc)*p;\n-      res1 = hp0.x - y;\n-      res =res1 + cor;\n-      if (res == res+1.002*((res1-res)+cor)) return (res+res);\n-      else {\n-\tc=y+cc;\n-\tcc=(y-c)+cc;\n-\t__doasin(c,cc,w);\n-\tres1=hp0.x-w[0];\n-\tcor=((hp0.x-res1)-w[0])+(hp1.x-w[1]);\n-\tres = res1+cor;\n-\tcor = (res1-res)+cor;\n-\tif (res==(res+1.000001*cor)) return (res+res);\n-\telse {\n-\t  res=res+res;\n-\t  res1=res+1.2*cor;\n-\t  return __cos32(x,res,res1);\n-\t}\n-      }\n-    }\n-    else {\n-      cor = cc+p*(y+cc);\n-      res = y + cor;\n-      if (res == res+1.03*((y-res)+cor)) return (res+res);\n-      else {\n-\tc=y+cc;\n-\tcc=(y-c)+cc;\n-\t__doasin(c,cc,w);\n-\tres = w[0];\n-\tcor=w[1];\n-\tif (res==(res+1.000001*cor)) return (res+res);\n-\telse {\n-\t  res=res+res;\n-\t  res1=res+1.2*cor;\n-\t  return __cos32(x,res,res1);\n-\t}\n-      }\n-    }\n-  }    /*   else  if (k < 0x3ff00000)    */\n-\n-  /*---------------------------- |x|>=1 -----------------------*/\n-  else\n-  if (k==0x3ff00000 && u.i[LOW_HALF]==0) return (m>0)?0:2.0*hp0.x;\n-  else\n-  if (k>0x7ff00000 || (k == 0x7ff00000 && u.i[LOW_HALF] != 0)) return x;\n-  else {\n-    u.i[HIGH_HALF]=0x7ff00000;\n-    v.i[HIGH_HALF]=0x7ff00000;\n-    u.i[LOW_HALF]=0;\n-    v.i[LOW_HALF]=0;\n-    return u.x/v.x;\n-  }\n-}"}, {"sha": "9e1a794ec82bef0f98d88fc15805514e3ab73c00", "filename": "libgcc-math/dbl-64/e_atan2.c", "status": "removed", "additions": 0, "deletions": 406, "changes": 406, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fe_atan2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fe_atan2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc-math%2Fdbl-64%2Fe_atan2.c?ref=5cd88d6857dffe4f10c834c773c300881ec20e32", "patch": "@@ -1,406 +0,0 @@\n-/*\n- * IBM Accurate Mathematical Library\n- * written by International Business Machines Corp.\n- * Copyright (C) 2001 Free Software Foundation\n- *\n- * This program is free software; you can redistribute it and/or modify\n- * it under the terms of the GNU Lesser General Public License as published by\n- * the Free Software Foundation; either version 2.1 of the License, or\n- * (at your option) any later version.\n- *\n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Lesser General Public License for more details.\n- *\n- * You should have received a copy of the GNU Lesser General Public License\n- * along with this program; if not, write to the Free Software\n- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n- */\n-/************************************************************************/\n-/*  MODULE_NAME: atnat2.c                                               */\n-/*                                                                      */\n-/*  FUNCTIONS: uatan2                                                   */\n-/*             atan2Mp                                                  */\n-/*             signArctan2                                              */\n-/*             normalized                                               */\n-/*                                                                      */\n-/*  FILES NEEDED: dla.h endian.h mpa.h mydefs.h atnat2.h                */\n-/*                mpatan.c mpatan2.c mpsqrt.c                           */\n-/*                uatan.tbl                                             */\n-/*                                                                      */\n-/* An ultimate atan2() routine. Given two IEEE double machine numbers y,*/\n-/* x it computes the correctly rounded (to nearest) value of atan2(y,x).*/\n-/*                                                                      */\n-/* Assumption: Machine arithmetic operations are performed in           */\n-/* round to nearest mode of IEEE 754 standard.                          */\n-/*                                                                      */\n-/************************************************************************/\n-\n-#include \"dla.h\"\n-#include \"mpa.h\"\n-#include \"MathLib.h\"\n-#include \"uatan.tbl\"\n-#include \"atnat2.h\"\n-#include \"math_private.h\"\n-\n-/************************************************************************/\n-/* An ultimate atan2 routine. Given two IEEE double machine numbers y,x */\n-/* it computes the correctly rounded (to nearest) value of atan2(y,x).  */\n-/* Assumption: Machine arithmetic operations are performed in           */\n-/* round to nearest mode of IEEE 754 standard.                          */\n-/************************************************************************/\n-static double atan2Mp(double ,double ,const int[]);\n-static double signArctan2(double ,double);\n-static double normalized(double ,double,double ,double);\n-void __mpatan2(mp_no *,mp_no *,mp_no *,int);\n-\n-double __ieee754_atan2(double y,double x) {\n-\n-  int i,de,ux,dx,uy,dy;\n-#if 0\n-  int p;\n-#endif\n-  static const int pr[MM]={6,8,10,20,32};\n-  double ax,ay,u,du,u9,ua,v,vv,dv,t1,t2,t3,t4,t5,t6,t7,t8,\n-         z,zz,cor,s1,ss1,s2,ss2;\n-#if 0\n-  double z1,z2;\n-#endif\n-  number num;\n-#if 0\n-  mp_no mperr,mpt1,mpx,mpy,mpz,mpz1,mpz2;\n-#endif\n-\n-  static const int ep= 59768832,   /*  57*16**5   */\n-                   em=-59768832;   /* -57*16**5   */\n-\n-  /* x=NaN or y=NaN */\n-  num.d = x;  ux = num.i[HIGH_HALF];  dx = num.i[LOW_HALF];\n-  if   ((ux&0x7ff00000)    ==0x7ff00000) {\n-    if (((ux&0x000fffff)|dx)!=0x00000000) return x+x; }\n-  num.d = y;  uy = num.i[HIGH_HALF];  dy = num.i[LOW_HALF];\n-  if   ((uy&0x7ff00000)    ==0x7ff00000) {\n-    if (((uy&0x000fffff)|dy)!=0x00000000) return y+y; }\n-\n-  /* y=+-0 */\n-  if      (uy==0x00000000) {\n-    if    (dy==0x00000000) {\n-      if  ((ux&0x80000000)==0x00000000)  return ZERO;\n-      else                               return opi.d; } }\n-  else if (uy==0x80000000) {\n-    if    (dy==0x00000000) {\n-      if  ((ux&0x80000000)==0x00000000)  return MZERO;\n-      else                               return mopi.d;} }\n-\n-  /* x=+-0 */\n-  if (x==ZERO) {\n-    if ((uy&0x80000000)==0x00000000)     return hpi.d;\n-    else                                 return mhpi.d; }\n-\n-  /* x=+-INF */\n-  if          (ux==0x7ff00000) {\n-    if        (dx==0x00000000) {\n-      if      (uy==0x7ff00000) {\n-        if    (dy==0x00000000)  return qpi.d; }\n-      else if (uy==0xfff00000) {\n-        if    (dy==0x00000000)  return mqpi.d; }\n-      else {\n-        if    ((uy&0x80000000)==0x00000000)  return ZERO;\n-        else                                 return MZERO; }\n-    }\n-  }\n-  else if     (ux==0xfff00000) {\n-    if        (dx==0x00000000) {\n-      if      (uy==0x7ff00000) {\n-        if    (dy==0x00000000)  return tqpi.d; }\n-      else if (uy==0xfff00000) {\n-        if    (dy==0x00000000)  return mtqpi.d; }\n-      else                     {\n-        if    ((uy&0x80000000)==0x00000000)  return opi.d;\n-        else                                 return mopi.d; }\n-    }\n-  }\n-\n-  /* y=+-INF */\n-  if      (uy==0x7ff00000) {\n-    if    (dy==0x00000000)  return hpi.d; }\n-  else if (uy==0xfff00000) {\n-    if    (dy==0x00000000)  return mhpi.d; }\n-\n-  /* either x/y or y/x is very close to zero */\n-  ax = (x<ZERO) ? -x : x;    ay = (y<ZERO) ? -y : y;\n-  de = (uy & 0x7ff00000) - (ux & 0x7ff00000);\n-  if      (de>=ep)  { return ((y>ZERO) ? hpi.d : mhpi.d); }\n-  else if (de<=em)  {\n-    if    (x>ZERO)  {\n-      if  ((z=ay/ax)<TWOM1022)  return normalized(ax,ay,y,z);\n-      else                      return signArctan2(y,z); }\n-    else            { return ((y>ZERO) ? opi.d : mopi.d); } }\n-\n-  /* if either x or y is extremely close to zero, scale abs(x), abs(y). */\n-  if (ax<twom500.d || ay<twom500.d) { ax*=two500.d;  ay*=two500.d; }\n-\n-  /* x,y which are neither special nor extreme */\n-  if (ay<ax) {\n-    u=ay/ax;\n-    EMULV(ax,u,v,vv,t1,t2,t3,t4,t5)\n-    du=((ay-v)-vv)/ax; }\n-  else {\n-    u=ax/ay;\n-    EMULV(ay,u,v,vv,t1,t2,t3,t4,t5)\n-    du=((ax-v)-vv)/ay; }\n-\n-  if (x>ZERO) {\n-\n-    /* (i)   x>0, abs(y)< abs(x):  atan(ay/ax) */\n-    if (ay<ax) {\n-      if (u<inv16.d) {\n-        v=u*u;  zz=du+u*v*(d3.d+v*(d5.d+v*(d7.d+v*(d9.d+v*(d11.d+v*d13.d)))));\n-        if ((z=u+(zz-u1.d*u)) == u+(zz+u1.d*u))  return signArctan2(y,z);\n-\n-        MUL2(u,du,u,du,v,vv,t1,t2,t3,t4,t5,t6,t7,t8)\n-        s1=v*(f11.d+v*(f13.d+v*(f15.d+v*(f17.d+v*f19.d))));\n-        ADD2(f9.d,ff9.d,s1,ZERO,s2,ss2,t1,t2)\n-        MUL2(v,vv,s2,ss2,s1,ss1,t1,t2,t3,t4,t5,t6,t7,t8)\n-        ADD2(f7.d,ff7.d,s1,ss1,s2,ss2,t1,t2)\n-        MUL2(v,vv,s2,ss2,s1,ss1,t1,t2,t3,t4,t5,t6,t7,t8)\n-        ADD2(f5.d,ff5.d,s1,ss1,s2,ss2,t1,t2)\n-        MUL2(v,vv,s2,ss2,s1,ss1,t1,t2,t3,t4,t5,t6,t7,t8)\n-        ADD2(f3.d,ff3.d,s1,ss1,s2,ss2,t1,t2)\n-        MUL2(v,vv,s2,ss2,s1,ss1,t1,t2,t3,t4,t5,t6,t7,t8)\n-        MUL2(u,du,s1,ss1,s2,ss2,t1,t2,t3,t4,t5,t6,t7,t8)\n-        ADD2(u,du,s2,ss2,s1,ss1,t1,t2)\n-        if ((z=s1+(ss1-u5.d*s1)) == s1+(ss1+u5.d*s1))  return signArctan2(y,z);\n-        return atan2Mp(x,y,pr);\n-      }\n-      else {\n-        i=(TWO52+TWO8*u)-TWO52;  i-=16;\n-        t3=u-cij[i][0].d;\n-        EADD(t3,du,v,dv)\n-        t1=cij[i][1].d;  t2=cij[i][2].d;\n-        zz=v*t2+(dv*t2+v*v*(cij[i][3].d+v*(cij[i][4].d+\n-                         v*(cij[i][5].d+v* cij[i][6].d))));\n-        if (i<112) {\n-          if (i<48)  u9=u91.d;    /* u < 1/4        */\n-          else       u9=u92.d; }  /* 1/4 <= u < 1/2 */\n-        else {\n-          if (i<176) u9=u93.d;    /* 1/2 <= u < 3/4 */\n-          else       u9=u94.d; }  /* 3/4 <= u <= 1  */\n-        if ((z=t1+(zz-u9*t1)) == t1+(zz+u9*t1))  return signArctan2(y,z);\n-\n-        t1=u-hij[i][0].d;\n-        EADD(t1,du,v,vv)\n-        s1=v*(hij[i][11].d+v*(hij[i][12].d+v*(hij[i][13].d+\n-           v*(hij[i][14].d+v* hij[i][15].d))));\n-        ADD2(hij[i][9].d,hij[i][10].d,s1,ZERO,s2,ss2,t1,t2)\n-        MUL2(v,vv,s2,ss2,s1,ss1,t1,t2,t3,t4,t5,t6,t7,t8)\n-        ADD2(hij[i][7].d,hij[i][8].d,s1,ss1,s2,ss2,t1,t2)\n-        MUL2(v,vv,s2,ss2,s1,ss1,t1,t2,t3,t4,t5,t6,t7,t8)\n-        ADD2(hij[i][5].d,hij[i][6].d,s1,ss1,s2,ss2,t1,t2)\n-        MUL2(v,vv,s2,ss2,s1,ss1,t1,t2,t3,t4,t5,t6,t7,t8)\n-        ADD2(hij[i][3].d,hij[i][4].d,s1,ss1,s2,ss2,t1,t2)\n-        MUL2(v,vv,s2,ss2,s1,ss1,t1,t2,t3,t4,t5,t6,t7,t8)\n-        ADD2(hij[i][1].d,hij[i][2].d,s1,ss1,s2,ss2,t1,t2)\n-        if ((z=s2+(ss2-ub.d*s2)) == s2+(ss2+ub.d*s2))  return signArctan2(y,z);\n-        return atan2Mp(x,y,pr);\n-      }\n-    }\n-\n-    /* (ii)  x>0, abs(x)<=abs(y):  pi/2-atan(ax/ay) */\n-    else {\n-      if (u<inv16.d) {\n-        v=u*u;\n-        zz=u*v*(d3.d+v*(d5.d+v*(d7.d+v*(d9.d+v*(d11.d+v*d13.d)))));\n-        ESUB(hpi.d,u,t2,cor)\n-        t3=((hpi1.d+cor)-du)-zz;\n-        if ((z=t2+(t3-u2.d)) == t2+(t3+u2.d))  return signArctan2(y,z);\n-\n-        MUL2(u,du,u,du,v,vv,t1,t2,t3,t4,t5,t6,t7,t8)\n-        s1=v*(f11.d+v*(f13.d+v*(f15.d+v*(f17.d+v*f19.d))));\n-        ADD2(f9.d,ff9.d,s1,ZERO,s2,ss2,t1,t2)\n-        MUL2(v,vv,s2,ss2,s1,ss1,t1,t2,t3,t4,t5,t6,t7,t8)\n-        ADD2(f7.d,ff7.d,s1,ss1,s2,ss2,t1,t2)\n-        MUL2(v,vv,s2,ss2,s1,ss1,t1,t2,t3,t4,t5,t6,t7,t8)\n-        ADD2(f5.d,ff5.d,s1,ss1,s2,ss2,t1,t2)\n-        MUL2(v,vv,s2,ss2,s1,ss1,t1,t2,t3,t4,t5,t6,t7,t8)\n-        ADD2(f3.d,ff3.d,s1,ss1,s2,ss2,t1,t2)\n-        MUL2(v,vv,s2,ss2,s1,ss1,t1,t2,t3,t4,t5,t6,t7,t8)\n-        MUL2(u,du,s1,ss1,s2,ss2,t1,t2,t3,t4,t5,t6,t7,t8)\n-        ADD2(u,du,s2,ss2,s1,ss1,t1,t2)\n-        SUB2(hpi.d,hpi1.d,s1,ss1,s2,ss2,t1,t2)\n-        if ((z=s2+(ss2-u6.d)) == s2+(ss2+u6.d))  return signArctan2(y,z);\n-        return atan2Mp(x,y,pr);\n-      }\n-      else {\n-        i=(TWO52+TWO8*u)-TWO52;  i-=16;\n-        v=(u-cij[i][0].d)+du;\n-        zz=hpi1.d-v*(cij[i][2].d+v*(cij[i][3].d+v*(cij[i][4].d+\n-                                 v*(cij[i][5].d+v* cij[i][6].d))));\n-        t1=hpi.d-cij[i][1].d;\n-        if (i<112)  ua=ua1.d;  /* w <  1/2 */\n-        else        ua=ua2.d;  /* w >= 1/2 */\n-        if ((z=t1+(zz-ua)) == t1+(zz+ua))  return signArctan2(y,z);\n-\n-        t1=u-hij[i][0].d;\n-        EADD(t1,du,v,vv)\n-        s1=v*(hij[i][11].d+v*(hij[i][12].d+v*(hij[i][13].d+\n-           v*(hij[i][14].d+v* hij[i][15].d))));\n-        ADD2(hij[i][9].d,hij[i][10].d,s1,ZERO,s2,ss2,t1,t2)\n-        MUL2(v,vv,s2,ss2,s1,ss1,t1,t2,t3,t4,t5,t6,t7,t8)\n-        ADD2(hij[i][7].d,hij[i][8].d,s1,ss1,s2,ss2,t1,t2)\n-        MUL2(v,vv,s2,ss2,s1,ss1,t1,t2,t3,t4,t5,t6,t7,t8)\n-        ADD2(hij[i][5].d,hij[i][6].d,s1,ss1,s2,ss2,t1,t2)\n-        MUL2(v,vv,s2,ss2,s1,ss1,t1,t2,t3,t4,t5,t6,t7,t8)\n-        ADD2(hij[i][3].d,hij[i][4].d,s1,ss1,s2,ss2,t1,t2)\n-        MUL2(v,vv,s2,ss2,s1,ss1,t1,t2,t3,t4,t5,t6,t7,t8)\n-        ADD2(hij[i][1].d,hij[i][2].d,s1,ss1,s2,ss2,t1,t2)\n-        SUB2(hpi.d,hpi1.d,s2,ss2,s1,ss1,t1,t2)\n-        if ((z=s1+(ss1-uc.d)) == s1+(ss1+uc.d))  return signArctan2(y,z);\n-        return atan2Mp(x,y,pr);\n-      }\n-    }\n-  }\n-  else {\n-\n-    /* (iii) x<0, abs(x)< abs(y):  pi/2+atan(ax/ay) */\n-    if (ax<ay) {\n-      if (u<inv16.d) {\n-        v=u*u;\n-        zz=u*v*(d3.d+v*(d5.d+v*(d7.d+v*(d9.d+v*(d11.d+v*d13.d)))));\n-        EADD(hpi.d,u,t2,cor)\n-        t3=((hpi1.d+cor)+du)+zz;\n-        if ((z=t2+(t3-u3.d)) == t2+(t3+u3.d))  return signArctan2(y,z);\n-\n-        MUL2(u,du,u,du,v,vv,t1,t2,t3,t4,t5,t6,t7,t8)\n-        s1=v*(f11.d+v*(f13.d+v*(f15.d+v*(f17.d+v*f19.d))));\n-        ADD2(f9.d,ff9.d,s1,ZERO,s2,ss2,t1,t2)\n-        MUL2(v,vv,s2,ss2,s1,ss1,t1,t2,t3,t4,t5,t6,t7,t8)\n-        ADD2(f7.d,ff7.d,s1,ss1,s2,ss2,t1,t2)\n-        MUL2(v,vv,s2,ss2,s1,ss1,t1,t2,t3,t4,t5,t6,t7,t8)\n-        ADD2(f5.d,ff5.d,s1,ss1,s2,ss2,t1,t2)\n-        MUL2(v,vv,s2,ss2,s1,ss1,t1,t2,t3,t4,t5,t6,t7,t8)\n-        ADD2(f3.d,ff3.d,s1,ss1,s2,ss2,t1,t2)\n-        MUL2(v,vv,s2,ss2,s1,ss1,t1,t2,t3,t4,t5,t6,t7,t8)\n-        MUL2(u,du,s1,ss1,s2,ss2,t1,t2,t3,t4,t5,t6,t7,t8)\n-        ADD2(u,du,s2,ss2,s1,ss1,t1,t2)\n-        ADD2(hpi.d,hpi1.d,s1,ss1,s2,ss2,t1,t2)\n-        if ((z=s2+(ss2-u7.d)) == s2+(ss2+u7.d))  return signArctan2(y,z);\n-        return atan2Mp(x,y,pr);\n-      }\n-      else {\n-        i=(TWO52+TWO8*u)-TWO52;  i-=16;\n-        v=(u-cij[i][0].d)+du;\n-        zz=hpi1.d+v*(cij[i][2].d+v*(cij[i][3].d+v*(cij[i][4].d+\n-                                 v*(cij[i][5].d+v* cij[i][6].d))));\n-        t1=hpi.d+cij[i][1].d;\n-        if (i<112)  ua=ua1.d;  /* w <  1/2 */\n-        else        ua=ua2.d;  /* w >= 1/2 */\n-        if ((z=t1+(zz-ua)) == t1+(zz+ua))  return signArctan2(y,z);\n-\n-        t1=u-hij[i][0].d;\n-        EADD(t1,du,v,vv)\n-        s1=v*(hij[i][11].d+v*(hij[i][12].d+v*(hij[i][13].d+\n-           v*(hij[i][14].d+v* hij[i][15].d))));\n-        ADD2(hij[i][9].d,hij[i][10].d,s1,ZERO,s2,ss2,t1,t2)\n-        MUL2(v,vv,s2,ss2,s1,ss1,t1,t2,t3,t4,t5,t6,t7,t8)\n-        ADD2(hij[i][7].d,hij[i][8].d,s1,ss1,s2,ss2,t1,t2)\n-        MUL2(v,vv,s2,ss2,s1,ss1,t1,t2,t3,t4,t5,t6,t7,t8)\n-        ADD2(hij[i][5].d,hij[i][6].d,s1,ss1,s2,ss2,t1,t2)\n-        MUL2(v,vv,s2,ss2,s1,ss1,t1,t2,t3,t4,t5,t6,t7,t8)\n-        ADD2(hij[i][3].d,hij[i][4].d,s1,ss1,s2,ss2,t1,t2)\n-        MUL2(v,vv,s2,ss2,s1,ss1,t1,t2,t3,t4,t5,t6,t7,t8)\n-        ADD2(hij[i][1].d,hij[i][2].d,s1,ss1,s2,ss2,t1,t2)\n-        ADD2(hpi.d,hpi1.d,s2,ss2,s1,ss1,t1,t2)\n-        if ((z=s1+(ss1-uc.d)) == s1+(ss1+uc.d))  return signArctan2(y,z);\n-        return atan2Mp(x,y,pr);\n-      }\n-    }\n-\n-    /* (iv)  x<0, abs(y)<=abs(x):  pi-atan(ax/ay) */\n-    else {\n-      if (u<inv16.d) {\n-        v=u*u;\n-        zz=u*v*(d3.d+v*(d5.d+v*(d7.d+v*(d9.d+v*(d11.d+v*d13.d)))));\n-        ESUB(opi.d,u,t2,cor)\n-        t3=((opi1.d+cor)-du)-zz;\n-        if ((z=t2+(t3-u4.d)) == t2+(t3+u4.d))  return signArctan2(y,z);\n-\n-        MUL2(u,du,u,du,v,vv,t1,t2,t3,t4,t5,t6,t7,t8)\n-        s1=v*(f11.d+v*(f13.d+v*(f15.d+v*(f17.d+v*f19.d))));\n-        ADD2(f9.d,ff9.d,s1,ZERO,s2,ss2,t1,t2)\n-        MUL2(v,vv,s2,ss2,s1,ss1,t1,t2,t3,t4,t5,t6,t7,t8)\n-        ADD2(f7.d,ff7.d,s1,ss1,s2,ss2,t1,t2)\n-        MUL2(v,vv,s2,ss2,s1,ss1,t1,t2,t3,t4,t5,t6,t7,t8)\n-        ADD2(f5.d,ff5.d,s1,ss1,s2,ss2,t1,t2)\n-        MUL2(v,vv,s2,ss2,s1,ss1,t1,t2,t3,t4,t5,t6,t7,t8)\n-        ADD2(f3.d,ff3.d,s1,ss1,s2,ss2,t1,t2)\n-        MUL2(v,vv,s2,ss2,s1,ss1,t1,t2,t3,t4,t5,t6,t7,t8)\n-        MUL2(u,du,s1,ss1,s2,ss2,t1,t2,t3,t4,t5,t6,t7,t8)\n-        ADD2(u,du,s2,ss2,s1,ss1,t1,t2)\n-        SUB2(opi.d,opi1.d,s1,ss1,s2,ss2,t1,t2)\n-        if ((z=s2+(ss2-u8.d)) == s2+(ss2+u8.d))  return signArctan2(y,z);\n-        return atan2Mp(x,y,pr);\n-      }\n-      else {\n-        i=(TWO52+TWO8*u)-TWO52;  i-=16;\n-        v=(u-cij[i][0].d)+du;\n-        zz=opi1.d-v*(cij[i][2].d+v*(cij[i][3].d+v*(cij[i][4].d+\n-                                 v*(cij[i][5].d+v* cij[i][6].d))));\n-        t1=opi.d-cij[i][1].d;\n-        if (i<112)  ua=ua1.d;  /* w <  1/2 */\n-        else        ua=ua2.d;  /* w >= 1/2 */\n-        if ((z=t1+(zz-ua)) == t1+(zz+ua))  return signArctan2(y,z);\n-\n-        t1=u-hij[i][0].d;\n-        EADD(t1,du,v,vv)\n-        s1=v*(hij[i][11].d+v*(hij[i][12].d+v*(hij[i][13].d+\n-           v*(hij[i][14].d+v* hij[i][15].d))));\n-        ADD2(hij[i][9].d,hij[i][10].d,s1,ZERO,s2,ss2,t1,t2)\n-        MUL2(v,vv,s2,ss2,s1,ss1,t1,t2,t3,t4,t5,t6,t7,t8)\n-        ADD2(hij[i][7].d,hij[i][8].d,s1,ss1,s2,ss2,t1,t2)\n-        MUL2(v,vv,s2,ss2,s1,ss1,t1,t2,t3,t4,t5,t6,t7,t8)\n-        ADD2(hij[i][5].d,hij[i][6].d,s1,ss1,s2,ss2,t1,t2)\n-        MUL2(v,vv,s2,ss2,s1,ss1,t1,t2,t3,t4,t5,t6,t7,t8)\n-        ADD2(hij[i][3].d,hij[i][4].d,s1,ss1,s2,ss2,t1,t2)\n-        MUL2(v,vv,s2,ss2,s1,ss1,t1,t2,t3,t4,t5,t6,t7,t8)\n-        ADD2(hij[i][1].d,hij[i][2].d,s1,ss1,s2,ss2,t1,t2)\n-        SUB2(opi.d,opi1.d,s2,ss2,s1,ss1,t1,t2)\n-        if ((z=s1+(ss1-uc.d)) == s1+(ss1+uc.d))  return signArctan2(y,z);\n-        return atan2Mp(x,y,pr);\n-      }\n-    }\n-  }\n-}\n-  /* Treat the Denormalized case */\n-static double  normalized(double ax,double ay,double y, double z)\n-    { int p;\n-      mp_no mpx,mpy,mpz,mperr,mpz2,mpt1;\n-  p=6;\n-  __dbl_mp(ax,&mpx,p);  __dbl_mp(ay,&mpy,p);  __dvd(&mpy,&mpx,&mpz,p);\n-  __dbl_mp(ue.d,&mpt1,p);   __mul(&mpz,&mpt1,&mperr,p);\n-  __sub(&mpz,&mperr,&mpz2,p);  __mp_dbl(&mpz2,&z,p);\n-  return signArctan2(y,z);\n-}\n-  /* Fix the sign and return after stage 1 or stage 2 */\n-static double signArctan2(double y,double z)\n-{\n-  return ((y<ZERO) ? -z : z);\n-}\n-  /* Stage 3: Perform a multi-Precision computation */\n-static double  atan2Mp(double x,double y,const int pr[])\n-{\n-  double z1,z2;\n-  int i,p;\n-  mp_no mpx,mpy,mpz,mpz1,mpz2,mperr,mpt1;\n-  for (i=0; i<MM; i++) {\n-    p = pr[i];\n-    __dbl_mp(x,&mpx,p);  __dbl_mp(y,&mpy,p);\n-    __mpatan2(&mpy,&mpx,&mpz,p);\n-    __dbl_mp(ud[i].d,&mpt1,p);   __mul(&mpz,&mpt1,&mperr,p);\n-    __add(&mpz,&mperr,&mpz1,p);  __sub(&mpz,&mperr,&mpz2,p);\n-    __mp_dbl(&mpz1,&z1,p);       __mp_dbl(&mpz2,&z2,p);\n-    if (z1==z2)   return z1;\n-  }\n-  return z1; /*if unpossible to do exact computing */\n-}"}, {"sha": "717469e250aea24b68c1ff3285b7cdff2cc60715", "filename": "libgcc-math/dbl-64/e_exp.c", "status": "removed", "additions": 0, "deletions": 252, "changes": 252, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fe_exp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fe_exp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc-math%2Fdbl-64%2Fe_exp.c?ref=5cd88d6857dffe4f10c834c773c300881ec20e32", "patch": "@@ -1,252 +0,0 @@\n-/*\n- * IBM Accurate Mathematical Library\n- * written by International Business Machines Corp.\n- * Copyright (C) 2001 Free Software Foundation\n- *\n- * This program is free software; you can redistribute it and/or modify\n- * it under the terms of the GNU Lesser General Public License as published by\n- * the Free Software Foundation; either version 2.1 of the License, or\n- * (at your option) any later version.\n- *\n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Lesser General Public License for more details.\n- *\n- * You should have received a copy of the GNU Lesser General Public License\n- * along with this program; if not, write to the Free Software\n- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n- */\n-/***************************************************************************/\n-/*  MODULE_NAME:uexp.c                                                     */\n-/*                                                                         */\n-/*  FUNCTION:uexp                                                          */\n-/*           exp1                                                          */\n-/*                                                                         */\n-/* FILES NEEDED:dla.h endian.h mpa.h mydefs.h uexp.h                       */\n-/*              mpa.c mpexp.x slowexp.c                                    */\n-/*                                                                         */\n-/* An ultimate exp routine. Given an IEEE double machine number x          */\n-/* it computes the correctly rounded (to nearest) value of e^x             */\n-/* Assumption: Machine arithmetic operations are performed in              */\n-/* round to nearest mode of IEEE 754 standard.                             */\n-/*                                                                         */\n-/***************************************************************************/\n-\n-#include \"endian.h\"\n-#include \"uexp.h\"\n-#include \"mydefs.h\"\n-#include \"MathLib.h\"\n-#include \"uexp.tbl\"\n-#include \"math_private.h\"\n-\n-double __slowexp(double);\n-\n-/***************************************************************************/\n-/* An ultimate exp routine. Given an IEEE double machine number x          */\n-/* it computes the correctly rounded (to nearest) value of e^x             */\n-/***************************************************************************/\n-double __ieee754_exp(double x) {\n-  double bexp, t, eps, del, base, y, al, bet, res, rem, cor;\n-  mynumber junk1, junk2, binexp  = {{0,0}};\n-#if 0\n-  int4 k;\n-#endif\n-  int4 i,j,m,n,ex;\n-\n-  junk1.x = x;\n-  m = junk1.i[HIGH_HALF];\n-  n = m&hugeint;\n-\n-  if (n > smallint && n < bigint) {\n-\n-    y = x*log2e.x + three51.x;\n-    bexp = y - three51.x;      /*  multiply the result by 2**bexp        */\n-\n-    junk1.x = y;\n-\n-    eps = bexp*ln_two2.x;      /* x = bexp*ln(2) + t - eps               */\n-    t = x - bexp*ln_two1.x;\n-\n-    y = t + three33.x;\n-    base = y - three33.x;      /* t rounded to a multiple of 2**-18      */\n-    junk2.x = y;\n-    del = (t - base) - eps;    /*  x = bexp*ln(2) + base + del           */\n-    eps = del + del*del*(p3.x*del + p2.x);\n-\n-    binexp.i[HIGH_HALF] =(junk1.i[LOW_HALF]+1023)<<20;\n-\n-    i = ((junk2.i[LOW_HALF]>>8)&0xfffffffe)+356;\n-    j = (junk2.i[LOW_HALF]&511)<<1;\n-\n-    al = coar.x[i]*fine.x[j];\n-    bet =(coar.x[i]*fine.x[j+1] + coar.x[i+1]*fine.x[j]) + coar.x[i+1]*fine.x[j+1];\n-\n-    rem=(bet + bet*eps)+al*eps;\n-    res = al + rem;\n-    cor = (al - res) + rem;\n-    if  (res == (res+cor*err_0)) return res*binexp.x;\n-    else return __slowexp(x); /*if error is over bound */\n-  }\n-\n-  if (n <= smallint) return 1.0;\n-\n-  if (n >= badint) {\n-    if (n > infint) return(x+x);               /* x is NaN */\n-    if (n < infint) return ( (x>0) ? (hhuge*hhuge) : (tiny*tiny) );\n-    /* x is finite,  cause either overflow or underflow  */\n-    if (junk1.i[LOW_HALF] != 0)  return (x+x);                /*  x is NaN  */\n-    return ((x>0)?inf.x:zero );             /* |x| = inf;  return either inf or 0 */\n-  }\n-\n-  y = x*log2e.x + three51.x;\n-  bexp = y - three51.x;\n-  junk1.x = y;\n-  eps = bexp*ln_two2.x;\n-  t = x - bexp*ln_two1.x;\n-  y = t + three33.x;\n-  base = y - three33.x;\n-  junk2.x = y;\n-  del = (t - base) - eps;\n-  eps = del + del*del*(p3.x*del + p2.x);\n-  i = ((junk2.i[LOW_HALF]>>8)&0xfffffffe)+356;\n-  j = (junk2.i[LOW_HALF]&511)<<1;\n-  al = coar.x[i]*fine.x[j];\n-  bet =(coar.x[i]*fine.x[j+1] + coar.x[i+1]*fine.x[j]) + coar.x[i+1]*fine.x[j+1];\n-  rem=(bet + bet*eps)+al*eps;\n-  res = al + rem;\n-  cor = (al - res) + rem;\n-  if (m>>31) {\n-    ex=junk1.i[LOW_HALF];\n-    if (res < 1.0) {res+=res; cor+=cor; ex-=1;}\n-    if (ex >=-1022) {\n-      binexp.i[HIGH_HALF] = (1023+ex)<<20;\n-      if  (res == (res+cor*err_0)) return res*binexp.x;\n-      else return __slowexp(x); /*if error is over bound */\n-    }\n-    ex = -(1022+ex);\n-    binexp.i[HIGH_HALF] = (1023-ex)<<20;\n-    res*=binexp.x;\n-    cor*=binexp.x;\n-    eps=1.0000000001+err_0*binexp.x;\n-    t=1.0+res;\n-    y = ((1.0-t)+res)+cor;\n-    res=t+y;\n-    cor = (t-res)+y;\n-    if (res == (res + eps*cor))\n-    { binexp.i[HIGH_HALF] = 0x00100000;\n-      return (res-1.0)*binexp.x;\n-    }\n-    else return __slowexp(x); /*   if error is over bound    */\n-  }\n-  else {\n-    binexp.i[HIGH_HALF] =(junk1.i[LOW_HALF]+767)<<20;\n-    if  (res == (res+cor*err_0)) return res*binexp.x*t256.x;\n-    else return __slowexp(x);\n-  }\n-}\n-\n-/************************************************************************/\n-/* Compute e^(x+xx)(Double-Length number) .The routine also receive     */\n-/* bound of error of previous calculation .If after computing exp       */\n-/* error bigger than allows routine return non positive number          */\n-/*else return   e^(x + xx)   (always positive )                         */\n-/************************************************************************/\n-\n-double __exp1(double x, double xx, double error) {\n-  double bexp, t, eps, del, base, y, al, bet, res, rem, cor;\n-  mynumber junk1, junk2, binexp  = {{0,0}};\n-#if 0\n-  int4 k;\n-#endif\n-  int4 i,j,m,n,ex;\n-\n-  junk1.x = x;\n-  m = junk1.i[HIGH_HALF];\n-  n = m&hugeint;                 /* no sign */\n-\n-  if (n > smallint && n < bigint) {\n-    y = x*log2e.x + three51.x;\n-    bexp = y - three51.x;      /*  multiply the result by 2**bexp        */\n-\n-    junk1.x = y;\n-\n-    eps = bexp*ln_two2.x;      /* x = bexp*ln(2) + t - eps               */\n-    t = x - bexp*ln_two1.x;\n-\n-    y = t + three33.x;\n-    base = y - three33.x;      /* t rounded to a multiple of 2**-18      */\n-    junk2.x = y;\n-    del = (t - base) + (xx-eps);    /*  x = bexp*ln(2) + base + del      */\n-    eps = del + del*del*(p3.x*del + p2.x);\n-\n-    binexp.i[HIGH_HALF] =(junk1.i[LOW_HALF]+1023)<<20;\n-\n-    i = ((junk2.i[LOW_HALF]>>8)&0xfffffffe)+356;\n-    j = (junk2.i[LOW_HALF]&511)<<1;\n-\n-    al = coar.x[i]*fine.x[j];\n-    bet =(coar.x[i]*fine.x[j+1] + coar.x[i+1]*fine.x[j]) + coar.x[i+1]*fine.x[j+1];\n-\n-    rem=(bet + bet*eps)+al*eps;\n-    res = al + rem;\n-    cor = (al - res) + rem;\n-    if  (res == (res+cor*(1.0+error+err_1))) return res*binexp.x;\n-    else return -10.0;\n-  }\n-\n-  if (n <= smallint) return 1.0; /*  if x->0 e^x=1 */\n-\n-  if (n >= badint) {\n-    if (n > infint) return(zero/zero);    /* x is NaN,  return invalid */\n-    if (n < infint) return ( (x>0) ? (hhuge*hhuge) : (tiny*tiny) );\n-    /* x is finite,  cause either overflow or underflow  */\n-    if (junk1.i[LOW_HALF] != 0)  return (zero/zero);        /*  x is NaN  */\n-    return ((x>0)?inf.x:zero );   /* |x| = inf;  return either inf or 0 */\n-  }\n-\n-  y = x*log2e.x + three51.x;\n-  bexp = y - three51.x;\n-  junk1.x = y;\n-  eps = bexp*ln_two2.x;\n-  t = x - bexp*ln_two1.x;\n-  y = t + three33.x;\n-  base = y - three33.x;\n-  junk2.x = y;\n-  del = (t - base) + (xx-eps);\n-  eps = del + del*del*(p3.x*del + p2.x);\n-  i = ((junk2.i[LOW_HALF]>>8)&0xfffffffe)+356;\n-  j = (junk2.i[LOW_HALF]&511)<<1;\n-  al = coar.x[i]*fine.x[j];\n-  bet =(coar.x[i]*fine.x[j+1] + coar.x[i+1]*fine.x[j]) + coar.x[i+1]*fine.x[j+1];\n-  rem=(bet + bet*eps)+al*eps;\n-  res = al + rem;\n-  cor = (al - res) + rem;\n-  if (m>>31) {\n-    ex=junk1.i[LOW_HALF];\n-    if (res < 1.0) {res+=res; cor+=cor; ex-=1;}\n-    if (ex >=-1022) {\n-      binexp.i[HIGH_HALF] = (1023+ex)<<20;\n-      if  (res == (res+cor*(1.0+error+err_1))) return res*binexp.x;\n-      else return -10.0;\n-    }\n-    ex = -(1022+ex);\n-    binexp.i[HIGH_HALF] = (1023-ex)<<20;\n-    res*=binexp.x;\n-    cor*=binexp.x;\n-    eps=1.00000000001+(error+err_1)*binexp.x;\n-    t=1.0+res;\n-    y = ((1.0-t)+res)+cor;\n-    res=t+y;\n-    cor = (t-res)+y;\n-    if (res == (res + eps*cor))\n-      {binexp.i[HIGH_HALF] = 0x00100000; return (res-1.0)*binexp.x;}\n-    else return -10.0;\n-  }\n-  else {\n-    binexp.i[HIGH_HALF] =(junk1.i[LOW_HALF]+767)<<20;\n-    if  (res == (res+cor*(1.0+error+err_1)))\n-      return res*binexp.x*t256.x;\n-    else return -10.0;\n-  }\n-}"}, {"sha": "1a9967b546f78e52876a5ec441d4ea9ec9921093", "filename": "libgcc-math/dbl-64/e_log.c", "status": "removed", "additions": 0, "deletions": 203, "changes": 203, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fe_log.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fe_log.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc-math%2Fdbl-64%2Fe_log.c?ref=5cd88d6857dffe4f10c834c773c300881ec20e32", "patch": "@@ -1,203 +0,0 @@\n-/*\n- * IBM Accurate Mathematical Library\n- * written by International Business Machines Corp.\n- * Copyright (C) 2001 Free Software Foundation\n- *\n- * This program is free software; you can redistribute it and/or modify\n- * it under the terms of the GNU Lesser General Public License as published by\n- * the Free Software Foundation; either version 2.1 of the License, or\n- * (at your option) any later version.\n- *\n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Lesser General Public License for more details.\n- *\n- * You should have received a copy of the GNU Lesser General Public License\n- * along with this program; if not, write to the Free Software\n- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n- */\n-/*********************************************************************/\n-/*                                                                   */\n-/*      MODULE_NAME:ulog.c                                           */\n-/*                                                                   */\n-/*      FUNCTION:ulog                                                */\n-/*                                                                   */\n-/*      FILES NEEDED: dla.h endian.h mpa.h mydefs.h ulog.h           */\n-/*                    mpexp.c mplog.c mpa.c                          */\n-/*                    ulog.tbl                                       */\n-/*                                                                   */\n-/* An ultimate log routine. Given an IEEE double machine number x    */\n-/* it computes the correctly rounded (to nearest) value of log(x).   */\n-/* Assumption: Machine arithmetic operations are performed in        */\n-/* round to nearest mode of IEEE 754 standard.                       */\n-/*                                                                   */\n-/*********************************************************************/\n-\n-\n-#include \"endian.h\"\n-#include \"dla.h\"\n-#include \"mpa.h\"\n-#include \"MathLib.h\"\n-#include \"math_private.h\"\n-\n-void __mplog(mp_no *, mp_no *, int);\n-\n-/*********************************************************************/\n-/* An ultimate log routine. Given an IEEE double machine number x     */\n-/* it computes the correctly rounded (to nearest) value of log(x).   */\n-/*********************************************************************/\n-double __ieee754_log(double x) {\n-#define M 4\n-  static const int pr[M]={8,10,18,32};\n-  int i,j,n,ux,dx,p;\n-#if 0\n-  int k;\n-#endif\n-  double dbl_n,u,p0,q,r0,w,nln2a,luai,lubi,lvaj,lvbj,\n-         sij,ssij,ttij,A,B,B0,y,y1,y2,polI,polII,sa,sb,\n-         t1,t2,t3,t4,t5,t6,t7,t8,t,ra,rb,ww,\n-         a0,aa0,s1,s2,ss2,s3,ss3,a1,aa1,a,aa,b,bb,c;\n-  number num;\n-  mp_no mpx,mpy,mpy1,mpy2,mperr;\n-\n-#include \"ulog.tbl\"\n-#include \"ulog.h\"\n-\n-  /* Treating special values of x ( x<=0, x=INF, x=NaN etc.). */\n-\n-  num.d = x;  ux = num.i[HIGH_HALF];  dx = num.i[LOW_HALF];\n-  n=0;\n-  if (ux < 0x00100000) {\n-    if (((ux & 0x7fffffff) | dx) == 0)  return MHALF/ZERO; /* return -INF */\n-    if (ux < 0) return (x-x)/ZERO;                         /* return NaN  */\n-    n -= 54;    x *= two54.d;                              /* scale x     */\n-    num.d = x;\n-  }\n-  if (ux >= 0x7ff00000) return x+x;                        /* INF or NaN  */\n-\n-  /* Regular values of x */\n-\n-  w = x-ONE;\n-  if (ABS(w) > U03) { goto case_03; }\n-\n-\n-  /*--- Stage I, the case abs(x-1) < 0.03 */\n-\n-  t8 = MHALF*w;\n-  EMULV(t8,w,a,aa,t1,t2,t3,t4,t5)\n-  EADD(w,a,b,bb)\n-\n-  /* Evaluate polynomial II */\n-  polII = (b0.d+w*(b1.d+w*(b2.d+w*(b3.d+w*(b4.d+\n-          w*(b5.d+w*(b6.d+w*(b7.d+w*b8.d))))))))*w*w*w;\n-  c = (aa+bb)+polII;\n-\n-  /* End stage I, case abs(x-1) < 0.03 */\n-  if ((y=b+(c+b*E2)) == b+(c-b*E2))  return y;\n-\n-  /*--- Stage II, the case abs(x-1) < 0.03 */\n-\n-  a = d11.d+w*(d12.d+w*(d13.d+w*(d14.d+w*(d15.d+w*(d16.d+\n-            w*(d17.d+w*(d18.d+w*(d19.d+w*d20.d))))))));\n-  EMULV(w,a,s2,ss2,t1,t2,t3,t4,t5)\n-  ADD2(d10.d,dd10.d,s2,ss2,s3,ss3,t1,t2)\n-  MUL2(w,ZERO,s3,ss3,s2,ss2,t1,t2,t3,t4,t5,t6,t7,t8)\n-  ADD2(d9.d,dd9.d,s2,ss2,s3,ss3,t1,t2)\n-  MUL2(w,ZERO,s3,ss3,s2,ss2,t1,t2,t3,t4,t5,t6,t7,t8)\n-  ADD2(d8.d,dd8.d,s2,ss2,s3,ss3,t1,t2)\n-  MUL2(w,ZERO,s3,ss3,s2,ss2,t1,t2,t3,t4,t5,t6,t7,t8)\n-  ADD2(d7.d,dd7.d,s2,ss2,s3,ss3,t1,t2)\n-  MUL2(w,ZERO,s3,ss3,s2,ss2,t1,t2,t3,t4,t5,t6,t7,t8)\n-  ADD2(d6.d,dd6.d,s2,ss2,s3,ss3,t1,t2)\n-  MUL2(w,ZERO,s3,ss3,s2,ss2,t1,t2,t3,t4,t5,t6,t7,t8)\n-  ADD2(d5.d,dd5.d,s2,ss2,s3,ss3,t1,t2)\n-  MUL2(w,ZERO,s3,ss3,s2,ss2,t1,t2,t3,t4,t5,t6,t7,t8)\n-  ADD2(d4.d,dd4.d,s2,ss2,s3,ss3,t1,t2)\n-  MUL2(w,ZERO,s3,ss3,s2,ss2,t1,t2,t3,t4,t5,t6,t7,t8)\n-  ADD2(d3.d,dd3.d,s2,ss2,s3,ss3,t1,t2)\n-  MUL2(w,ZERO,s3,ss3,s2,ss2,t1,t2,t3,t4,t5,t6,t7,t8)\n-  ADD2(d2.d,dd2.d,s2,ss2,s3,ss3,t1,t2)\n-  MUL2(w,ZERO,s3,ss3,s2,ss2,t1,t2,t3,t4,t5,t6,t7,t8)\n-  MUL2(w,ZERO,s2,ss2,s3,ss3,t1,t2,t3,t4,t5,t6,t7,t8)\n-  ADD2(w,ZERO,    s3,ss3, b, bb,t1,t2)\n-\n-  /* End stage II, case abs(x-1) < 0.03 */\n-  if ((y=b+(bb+b*E4)) == b+(bb-b*E4))  return y;\n-  goto stage_n;\n-\n-  /*--- Stage I, the case abs(x-1) > 0.03 */\n-  case_03:\n-\n-  /* Find n,u such that x = u*2**n,   1/sqrt(2) < u < sqrt(2)  */\n-  n += (num.i[HIGH_HALF] >> 20) - 1023;\n-  num.i[HIGH_HALF] = (num.i[HIGH_HALF] & 0x000fffff) | 0x3ff00000;\n-  if (num.d > SQRT_2) { num.d *= HALF;  n++; }\n-  u = num.d;  dbl_n = (double) n;\n-\n-  /* Find i such that ui=1+(i-75)/2**8 is closest to u (i= 0,1,2,...,181) */\n-  num.d += h1.d;\n-  i = (num.i[HIGH_HALF] & 0x000fffff) >> 12;\n-\n-  /* Find j such that vj=1+(j-180)/2**16 is closest to v=u/ui (j= 0,...,361) */\n-  num.d = u*Iu[i].d + h2.d;\n-  j = (num.i[HIGH_HALF] & 0x000fffff) >> 4;\n-\n-  /* Compute w=(u-ui*vj)/(ui*vj) */\n-  p0=(ONE+(i-75)*DEL_U)*(ONE+(j-180)*DEL_V);\n-  q=u-p0;   r0=Iu[i].d*Iv[j].d;   w=q*r0;\n-\n-  /* Evaluate polynomial I */\n-  polI = w+(a2.d+a3.d*w)*w*w;\n-\n-  /* Add up everything */\n-  nln2a = dbl_n*LN2A;\n-  luai  = Lu[i][0].d;   lubi  = Lu[i][1].d;\n-  lvaj  = Lv[j][0].d;   lvbj  = Lv[j][1].d;\n-  EADD(luai,lvaj,sij,ssij)\n-  EADD(nln2a,sij,A  ,ttij)\n-  B0 = (((lubi+lvbj)+ssij)+ttij)+dbl_n*LN2B;\n-  B  = polI+B0;\n-\n-  /* End stage I, case abs(x-1) >= 0.03 */\n-  if ((y=A+(B+E1)) == A+(B-E1))  return y;\n-\n-\n-  /*--- Stage II, the case abs(x-1) > 0.03 */\n-\n-  /* Improve the accuracy of r0 */\n-  EMULV(p0,r0,sa,sb,t1,t2,t3,t4,t5)\n-  t=r0*((ONE-sa)-sb);\n-  EADD(r0,t,ra,rb)\n-\n-  /* Compute w */\n-  MUL2(q,ZERO,ra,rb,w,ww,t1,t2,t3,t4,t5,t6,t7,t8)\n-\n-  EADD(A,B0,a0,aa0)\n-\n-  /* Evaluate polynomial III */\n-  s1 = (c3.d+(c4.d+c5.d*w)*w)*w;\n-  EADD(c2.d,s1,s2,ss2)\n-  MUL2(s2,ss2,w,ww,s3,ss3,t1,t2,t3,t4,t5,t6,t7,t8)\n-  MUL2(s3,ss3,w,ww,s2,ss2,t1,t2,t3,t4,t5,t6,t7,t8)\n-  ADD2(s2,ss2,w,ww,s3,ss3,t1,t2)\n-  ADD2(s3,ss3,a0,aa0,a1,aa1,t1,t2)\n-\n-  /* End stage II, case abs(x-1) >= 0.03 */\n-  if ((y=a1+(aa1+E3)) == a1+(aa1-E3)) return y;\n-\n-\n-  /* Final stages. Use multi-precision arithmetic. */\n-  stage_n:\n-\n-  for (i=0; i<M; i++) {\n-    p = pr[i];\n-    __dbl_mp(x,&mpx,p);  __dbl_mp(y,&mpy,p);\n-    __mplog(&mpx,&mpy,p);\n-    __dbl_mp(e[i].d,&mperr,p);\n-    __add(&mpy,&mperr,&mpy1,p);  __sub(&mpy,&mperr,&mpy2,p);\n-    __mp_dbl(&mpy1,&y1,p);       __mp_dbl(&mpy2,&y2,p);\n-    if (y1==y2)   return y1;\n-  }\n-  return y1;\n-}"}, {"sha": "2be04b8756d4800198a30e741ccba0e1954425ab", "filename": "libgcc-math/dbl-64/e_log10.c", "status": "removed", "additions": 0, "deletions": 97, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fe_log10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fe_log10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc-math%2Fdbl-64%2Fe_log10.c?ref=5cd88d6857dffe4f10c834c773c300881ec20e32", "patch": "@@ -1,97 +0,0 @@\n-/* @(#)e_log10.c 5.1 93/09/24 */\n-/*\n- * ====================================================\n- * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n- *\n- * Developed at SunPro, a Sun Microsystems, Inc. business.\n- * Permission to use, copy, modify, and distribute this\n- * software is freely granted, provided that this notice\n- * is preserved.\n- * ====================================================\n- */\n-\n-#if defined(LIBM_SCCS) && !defined(lint)\n-static char rcsid[] = \"$NetBSD: e_log10.c,v 1.9 1995/05/10 20:45:51 jtc Exp $\";\n-#endif\n-\n-/* __ieee754_log10(x)\n- * Return the base 10 logarithm of x\n- *\n- * Method :\n- *\tLet log10_2hi = leading 40 bits of log10(2) and\n- *\t    log10_2lo = log10(2) - log10_2hi,\n- *\t    ivln10   = 1/log(10) rounded.\n- *\tThen\n- *\t\tn = ilogb(x),\n- *\t\tif(n<0)  n = n+1;\n- *\t\tx = scalbn(x,-n);\n- *\t\tlog10(x) := n*log10_2hi + (n*log10_2lo + ivln10*log(x))\n- *\n- * Note 1:\n- *\tTo guarantee log10(10**n)=n, where 10**n is normal, the rounding\n- *\tmode must set to Round-to-Nearest.\n- * Note 2:\n- *\t[1/log(10)] rounded to 53 bits has error  .198   ulps;\n- *\tlog10 is monotonic at all binary break points.\n- *\n- * Special cases:\n- *\tlog10(x) is NaN with signal if x < 0;\n- *\tlog10(+INF) is +INF with no signal; log10(0) is -INF with signal;\n- *\tlog10(NaN) is that NaN with no signal;\n- *\tlog10(10**N) = N  for N=0,1,...,22.\n- *\n- * Constants:\n- * The hexadecimal values are the intended ones for the following constants.\n- * The decimal values may be used, provided that the compiler will convert\n- * from decimal to binary accurately enough to produce the hexadecimal values\n- * shown.\n- */\n-\n-#include \"math_private.h\"\n-\n-#ifdef __STDC__\n-static const double\n-#else\n-static double\n-#endif\n-two54      =  1.80143985094819840000e+16, /* 0x43500000, 0x00000000 */\n-ivln10     =  4.34294481903251816668e-01, /* 0x3FDBCB7B, 0x1526E50E */\n-log10_2hi  =  3.01029995663611771306e-01, /* 0x3FD34413, 0x509F6000 */\n-log10_2lo  =  3.69423907715893078616e-13; /* 0x3D59FEF3, 0x11F12B36 */\n-\n-#ifdef __STDC__\n-static const double zero   =  0.0;\n-#else\n-static double zero   =  0.0;\n-#endif\n-\n-#ifdef __STDC__\n-\tdouble __ieee754_log10(double x)\n-#else\n-\tdouble __ieee754_log10(x)\n-\tdouble x;\n-#endif\n-{\n-\tdouble y,z;\n-\tint32_t i,k,hx;\n-\tuint32_t lx;\n-\n-\tEXTRACT_WORDS(hx,lx,x);\n-\n-        k=0;\n-        if (hx < 0x00100000) {\t\t\t/* x < 2**-1022  */\n-            if (((hx&0x7fffffff)|lx)==0)\n-                return -two54/(x-x);\t\t/* log(+-0)=-inf */\n-            if (hx<0) return (x-x)/(x-x);\t/* log(-#) = NaN */\n-            k -= 54; x *= two54; /* subnormal number, scale up x */\n-\t    GET_HIGH_WORD(hx,x);\n-        }\n-\tif (hx >= 0x7ff00000) return x+x;\n-\tk += (hx>>20)-1023;\n-\ti  = ((uint32_t)k&0x80000000)>>31;\n-        hx = (hx&0x000fffff)|((0x3ff-i)<<20);\n-        y  = (double)(k+i);\n-\tSET_HIGH_WORD(x,hx);\n-\tz  = y*log10_2lo + ivln10*__ieee754_log(x);\n-\treturn  z+y*log10_2hi;\n-}"}, {"sha": "d9bd8b479f4aa8dce3a4e476575f5848b69499b0", "filename": "libgcc-math/dbl-64/e_pow.c", "status": "removed", "additions": 0, "deletions": 388, "changes": 388, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fe_pow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fe_pow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc-math%2Fdbl-64%2Fe_pow.c?ref=5cd88d6857dffe4f10c834c773c300881ec20e32", "patch": "@@ -1,388 +0,0 @@\n-/*\n- * IBM Accurate Mathematical Library\n- * written by International Business Machines Corp.\n- * Copyright (C) 2001, 2002, 2004 Free Software Foundation\n- *\n- * This program is free software; you can redistribute it and/or modify\n- * it under the terms of the GNU Lesser General Public License as published by\n- * the Free Software Foundation; either version 2.1 of the License, or\n- * (at your option) any later version.\n- *\n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Lesser General Public License for more details.\n- *\n- * You should have received a copy of the GNU Lesser General Public License\n- * along with this program; if not, write to the Free Software\n- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n- */\n-/***************************************************************************/\n-/*  MODULE_NAME: upow.c                                                    */\n-/*                                                                         */\n-/*  FUNCTIONS: upow                                                        */\n-/*             power1                                                      */\n-/*             my_log2                                                        */\n-/*             log1                                                        */\n-/*             checkint                                                    */\n-/* FILES NEEDED: dla.h endian.h mpa.h mydefs.h                             */\n-/*               halfulp.c mpexp.c mplog.c slowexp.c slowpow.c mpa.c       */\n-/*                          uexp.c  upow.c\t\t\t           */\n-/*               root.tbl uexp.tbl upow.tbl                                */\n-/* An ultimate power routine. Given two IEEE double machine numbers y,x    */\n-/* it computes the correctly rounded (to nearest) value of x^y.            */\n-/* Assumption: Machine arithmetic operations are performed in              */\n-/* round to nearest mode of IEEE 754 standard.                             */\n-/*                                                                         */\n-/***************************************************************************/\n-#include \"endian.h\"\n-#include \"upow.h\"\n-#include \"dla.h\"\n-#include \"mydefs.h\"\n-#include \"MathLib.h\"\n-#include \"upow.tbl\"\n-#include \"math_private.h\"\n-\n-\n-double __exp1(double x, double xx, double error);\n-static double log1(double x, double *delta, double *error);\n-static double my_log2(double x, double *delta, double *error);\n-double __slowpow(double x, double y,double z);\n-static double power1(double x, double y);\n-static int checkint(double x);\n-\n-/***************************************************************************/\n-/* An ultimate power routine. Given two IEEE double machine numbers y,x    */\n-/* it computes the correctly rounded (to nearest) value of X^y.            */\n-/***************************************************************************/\n-double __ieee754_pow(double x, double y) {\n-  double z,a,aa,error, t,a1,a2,y1,y2;\n-#if 0\n-  double gor=1.0;\n-#endif\n-  mynumber u,v;\n-  int k;\n-  int4 qx,qy;\n-  v.x=y;\n-  u.x=x;\n-  if (v.i[LOW_HALF] == 0) { /* of y */\n-    qx = u.i[HIGH_HALF]&0x7fffffff;\n-    /* Checking  if x is not too small to compute */\n-    if (((qx==0x7ff00000)&&(u.i[LOW_HALF]!=0))||(qx>0x7ff00000)) return NaNQ.x;\n-    if (y == 1.0) return x;\n-    if (y == 2.0) return x*x;\n-    if (y == -1.0) return 1.0/x;\n-    if (y == 0) return 1.0;\n-  }\n-  /* else */\n-  if(((u.i[HIGH_HALF]>0 && u.i[HIGH_HALF]<0x7ff00000)||        /* x>0 and not x->0 */\n-       (u.i[HIGH_HALF]==0 && u.i[LOW_HALF]!=0))  &&\n-                                      /*   2^-1023< x<= 2^-1023 * 0x1.0000ffffffff */\n-      (v.i[HIGH_HALF]&0x7fffffff) < 0x4ff00000) {              /* if y<-1 or y>1   */\n-    z = log1(x,&aa,&error);                                 /* x^y  =e^(y log (X)) */\n-    t = y*134217729.0;\n-    y1 = t - (t-y);\n-    y2 = y - y1;\n-    t = z*134217729.0;\n-    a1 = t - (t-z);\n-    a2 = (z - a1)+aa;\n-    a = y1*a1;\n-    aa = y2*a1 + y*a2;\n-    a1 = a+aa;\n-    a2 = (a-a1)+aa;\n-    error = error*ABS(y);\n-    t = __exp1(a1,a2,1.9e16*error);     /* return -10 or 0 if wasn't computed exactly */\n-    return (t>0)?t:power1(x,y);\n-  }\n-\n-  if (x == 0) {\n-    if (((v.i[HIGH_HALF] & 0x7fffffff) == 0x7ff00000 && v.i[LOW_HALF] != 0)\n-\t|| (v.i[HIGH_HALF] & 0x7fffffff) > 0x7ff00000)\n-      return y;\n-    if (ABS(y) > 1.0e20) return (y>0)?0:INF.x;\n-    k = checkint(y);\n-    if (k == -1)\n-      return y < 0 ? 1.0/x : x;\n-    else\n-      return y < 0 ? 1.0/ABS(x) : 0.0;                               /* return 0 */\n-  }\n-  /* if x<0 */\n-  if (u.i[HIGH_HALF] < 0) {\n-    k = checkint(y);\n-    if (k==0) {\n-      if ((v.i[HIGH_HALF] & 0x7fffffff) == 0x7ff00000 && v.i[LOW_HALF] == 0) {\n-\tif (x == -1.0) return 1.0;\n-\telse if (x > -1.0) return v.i[HIGH_HALF] < 0 ? INF.x : 0.0;\n-\telse return v.i[HIGH_HALF] < 0 ? 0.0 : INF.x;\n-      }\n-      else if (u.i[HIGH_HALF] == 0xfff00000 && u.i[LOW_HALF] == 0)\n-\treturn y < 0 ? 0.0 : INF.x;\n-      return NaNQ.x;                              /* y not integer and x<0 */\n-    }\n-    else if (u.i[HIGH_HALF] == 0xfff00000 && u.i[LOW_HALF] == 0)\n-      {\n-\tif (k < 0)\n-\t  return y < 0 ? nZERO.x : nINF.x;\n-\telse\n-\t  return y < 0 ? 0.0 : INF.x;\n-      }\n-    return (k==1)?__ieee754_pow(-x,y):-__ieee754_pow(-x,y); /* if y even or odd */\n-  }\n-  /* x>0 */\n-  qx = u.i[HIGH_HALF]&0x7fffffff;  /*   no sign   */\n-  qy = v.i[HIGH_HALF]&0x7fffffff;  /*   no sign   */\n-\n-  if (qx > 0x7ff00000 || (qx == 0x7ff00000 && u.i[LOW_HALF] != 0)) return NaNQ.x;\n-                                                                 /*  if 0<x<2^-0x7fe */\n-  if (qy > 0x7ff00000 || (qy == 0x7ff00000 && v.i[LOW_HALF] != 0))\n-    return x == 1.0 ? 1.0 : NaNQ.x;\n-                                                                 /*  if y<2^-0x7fe   */\n-\n-  if (qx == 0x7ff00000)                              /* x= 2^-0x3ff */\n-    {if (y == 0) return NaNQ.x;\n-    return (y>0)?x:0; }\n-\n-  if (qy > 0x45f00000 && qy < 0x7ff00000) {\n-    if (x == 1.0) return 1.0;\n-    if (y>0) return (x>1.0)?INF.x:0;\n-    if (y<0) return (x<1.0)?INF.x:0;\n-  }\n-\n-  if (x == 1.0) return 1.0;\n-  if (y>0) return (x>1.0)?INF.x:0;\n-  if (y<0) return (x<1.0)?INF.x:0;\n-  return 0;     /* unreachable, to make the compiler happy */\n-}\n-\n-/**************************************************************************/\n-/* Computing x^y using more accurate but more slow log routine            */\n-/**************************************************************************/\n-static double power1(double x, double y) {\n-  double z,a,aa,error, t,a1,a2,y1,y2;\n-  z = my_log2(x,&aa,&error);\n-  t = y*134217729.0;\n-  y1 = t - (t-y);\n-  y2 = y - y1;\n-  t = z*134217729.0;\n-  a1 = t - (t-z);\n-  a2 = z - a1;\n-  a = y*z;\n-  aa = ((y1*a1-a)+y1*a2+y2*a1)+y2*a2+aa*y;\n-  a1 = a+aa;\n-  a2 = (a-a1)+aa;\n-  error = error*ABS(y);\n-  t = __exp1(a1,a2,1.9e16*error);\n-  return (t >= 0)?t:__slowpow(x,y,z);\n-}\n-\n-/****************************************************************************/\n-/* Computing log(x) (x is left argument). The result is the returned double */\n-/* + the parameter delta.                                                   */\n-/* The result is bounded by error (rightmost argument)                      */\n-/****************************************************************************/\n-static double log1(double x, double *delta, double *error) {\n-  int i,j,m;\n-#if 0\n-  int n;\n-#endif\n-  double uu,vv,eps,nx,e,e1,e2,t,t1,t2,res,add=0;\n-#if 0\n-  double cor;\n-#endif\n-  mynumber u,v;\n-#ifdef BIG_ENDI\n-  mynumber\n-/**/ two52          = {{0x43300000, 0x00000000}}; /* 2**52         */\n-#else\n-#ifdef LITTLE_ENDI\n-  mynumber\n-/**/ two52          = {{0x00000000, 0x43300000}}; /* 2**52         */\n-#endif\n-#endif\n-\n-  u.x = x;\n-  m = u.i[HIGH_HALF];\n-  *error = 0;\n-  *delta = 0;\n-  if (m < 0x00100000)             /*  1<x<2^-1007 */\n-    { x = x*t52.x; add = -52.0; u.x = x; m = u.i[HIGH_HALF];}\n-\n-  if ((m&0x000fffff) < 0x0006a09e)\n-    {u.i[HIGH_HALF] = (m&0x000fffff)|0x3ff00000; two52.i[LOW_HALF]=(m>>20); }\n-  else\n-    {u.i[HIGH_HALF] = (m&0x000fffff)|0x3fe00000; two52.i[LOW_HALF]=(m>>20)+1; }\n-\n-  v.x = u.x + bigu.x;\n-  uu = v.x - bigu.x;\n-  i = (v.i[LOW_HALF]&0x000003ff)<<2;\n-  if (two52.i[LOW_HALF] == 1023)         /* nx = 0              */\n-  {\n-      if (i > 1192 && i < 1208)          /* |x-1| < 1.5*2**-10  */\n-      {\n-\t  t = x - 1.0;\n-\t  t1 = (t+5.0e6)-5.0e6;\n-\t  t2 = t-t1;\n-\t  e1 = t - 0.5*t1*t1;\n-\t  e2 = t*t*t*(r3+t*(r4+t*(r5+t*(r6+t*(r7+t*r8)))))-0.5*t2*(t+t1);\n-\t  res = e1+e2;\n-\t  *error = 1.0e-21*ABS(t);\n-\t  *delta = (e1-res)+e2;\n-\t  return res;\n-      }                  /* |x-1| < 1.5*2**-10  */\n-      else\n-      {\n-\t  v.x = u.x*(ui.x[i]+ui.x[i+1])+bigv.x;\n-\t  vv = v.x-bigv.x;\n-\t  j = v.i[LOW_HALF]&0x0007ffff;\n-\t  j = j+j+j;\n-\t  eps = u.x - uu*vv;\n-\t  e1 = eps*ui.x[i];\n-\t  e2 = eps*(ui.x[i+1]+vj.x[j]*(ui.x[i]+ui.x[i+1]));\n-\t  e = e1+e2;\n-\t  e2 =  ((e1-e)+e2);\n-\t  t=ui.x[i+2]+vj.x[j+1];\n-\t  t1 = t+e;\n-\t  t2 = (((t-t1)+e)+(ui.x[i+3]+vj.x[j+2]))+e2+e*e*(p2+e*(p3+e*p4));\n-\t  res=t1+t2;\n-\t  *error = 1.0e-24;\n-\t  *delta = (t1-res)+t2;\n-\t  return res;\n-      }\n-  }   /* nx = 0 */\n-  else                            /* nx != 0   */\n-  {\n-      eps = u.x - uu;\n-      nx = (two52.x - two52e.x)+add;\n-      e1 = eps*ui.x[i];\n-      e2 = eps*ui.x[i+1];\n-      e=e1+e2;\n-      e2 = (e1-e)+e2;\n-      t=nx*ln2a.x+ui.x[i+2];\n-      t1=t+e;\n-      t2=(((t-t1)+e)+nx*ln2b.x+ui.x[i+3]+e2)+e*e*(q2+e*(q3+e*(q4+e*(q5+e*q6))));\n-      res = t1+t2;\n-      *error = 1.0e-21;\n-      *delta = (t1-res)+t2;\n-      return res;\n-  }                                /* nx != 0   */\n-}\n-\n-/****************************************************************************/\n-/* More slow but more accurate routine of log                               */\n-/* Computing log(x)(x is left argument).The result is return double + delta.*/\n-/* The result is bounded by error (right argument)                           */\n-/****************************************************************************/\n-static double my_log2(double x, double *delta, double *error) {\n-  int i,j,m;\n-#if 0\n-  int n;\n-#endif\n-  double uu,vv,eps,nx,e,e1,e2,t,t1,t2,res,add=0;\n-#if 0\n-  double cor;\n-#endif\n-  double ou1,ou2,lu1,lu2,ov,lv1,lv2,a,a1,a2;\n-  double y,yy,z,zz,j1,j2,j3,j4,j5,j6,j7,j8;\n-  mynumber u,v;\n-#ifdef BIG_ENDI\n-  mynumber\n-/**/ two52          = {{0x43300000, 0x00000000}}; /* 2**52         */\n-#else\n-#ifdef LITTLE_ENDI\n-  mynumber\n-/**/ two52          = {{0x00000000, 0x43300000}}; /* 2**52         */\n-#endif\n-#endif\n-\n-  u.x = x;\n-  m = u.i[HIGH_HALF];\n-  *error = 0;\n-  *delta = 0;\n-  add=0;\n-  if (m<0x00100000) {  /* x < 2^-1022 */\n-    x = x*t52.x;  add = -52.0; u.x = x; m = u.i[HIGH_HALF]; }\n-\n-  if ((m&0x000fffff) < 0x0006a09e)\n-    {u.i[HIGH_HALF] = (m&0x000fffff)|0x3ff00000; two52.i[LOW_HALF]=(m>>20); }\n-  else\n-    {u.i[HIGH_HALF] = (m&0x000fffff)|0x3fe00000; two52.i[LOW_HALF]=(m>>20)+1; }\n-\n-  v.x = u.x + bigu.x;\n-  uu = v.x - bigu.x;\n-  i = (v.i[LOW_HALF]&0x000003ff)<<2;\n-  /*------------------------------------- |x-1| < 2**-11-------------------------------  */\n-  if ((two52.i[LOW_HALF] == 1023)  && (i == 1200))\n-  {\n-      t = x - 1.0;\n-      EMULV(t,s3,y,yy,j1,j2,j3,j4,j5);\n-      ADD2(-0.5,0,y,yy,z,zz,j1,j2);\n-      MUL2(t,0,z,zz,y,yy,j1,j2,j3,j4,j5,j6,j7,j8);\n-      MUL2(t,0,y,yy,z,zz,j1,j2,j3,j4,j5,j6,j7,j8);\n-\n-      e1 = t+z;\n-      e2 = (((t-e1)+z)+zz)+t*t*t*(ss3+t*(s4+t*(s5+t*(s6+t*(s7+t*s8)))));\n-      res = e1+e2;\n-      *error = 1.0e-25*ABS(t);\n-      *delta = (e1-res)+e2;\n-      return res;\n-  }\n-  /*----------------------------- |x-1| > 2**-11  --------------------------  */\n-  else\n-  {          /*Computing log(x) according to log table                        */\n-      nx = (two52.x - two52e.x)+add;\n-      ou1 = ui.x[i];\n-      ou2 = ui.x[i+1];\n-      lu1 = ui.x[i+2];\n-      lu2 = ui.x[i+3];\n-      v.x = u.x*(ou1+ou2)+bigv.x;\n-      vv = v.x-bigv.x;\n-      j = v.i[LOW_HALF]&0x0007ffff;\n-      j = j+j+j;\n-      eps = u.x - uu*vv;\n-      ov  = vj.x[j];\n-      lv1 = vj.x[j+1];\n-      lv2 = vj.x[j+2];\n-      a = (ou1+ou2)*(1.0+ov);\n-      a1 = (a+1.0e10)-1.0e10;\n-      a2 = a*(1.0-a1*uu*vv);\n-      e1 = eps*a1;\n-      e2 = eps*a2;\n-      e = e1+e2;\n-      e2 = (e1-e)+e2;\n-      t=nx*ln2a.x+lu1+lv1;\n-      t1 = t+e;\n-      t2 = (((t-t1)+e)+(lu2+lv2+nx*ln2b.x+e2))+e*e*(p2+e*(p3+e*p4));\n-      res=t1+t2;\n-      *error = 1.0e-27;\n-      *delta = (t1-res)+t2;\n-      return res;\n-  }\n-}\n-\n-/**********************************************************************/\n-/* Routine receives a double x and checks if it is an integer. If not */\n-/* it returns 0, else it returns 1 if even or -1 if odd.              */\n-/**********************************************************************/\n-static int checkint(double x) {\n-  union {int4 i[2]; double x;} u;\n-  int k,m,n;\n-#if 0\n-  int l;\n-#endif\n-  u.x = x;\n-  m = u.i[HIGH_HALF]&0x7fffffff;    /* no sign */\n-  if (m >= 0x7ff00000) return 0;    /*  x is +/-inf or NaN  */\n-  if (m >= 0x43400000) return 1;    /*  |x| >= 2**53   */\n-  if (m < 0x40000000) return 0;     /* |x| < 2,  can not be 0 or 1  */\n-  n = u.i[LOW_HALF];\n-  k = (m>>20)-1023;                 /*  1 <= k <= 52   */\n-  if (k == 52) return (n&1)? -1:1;  /* odd or even*/\n-  if (k>20) {\n-    if (n<<(k-20)) return 0;        /* if not integer */\n-    return (n<<(k-21))?-1:1;\n-  }\n-  if (n) return 0;                  /*if  not integer*/\n-  if (k == 20) return (m&1)? -1:1;\n-  if (m<<(k+12)) return 0;\n-  return (m<<(k+11))?-1:1;\n-}"}, {"sha": "7d4f7e19b5c1dd1282e941557698c5285731b86a", "filename": "libgcc-math/dbl-64/e_rem_pio2.c", "status": "removed", "additions": 0, "deletions": 182, "changes": 182, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fe_rem_pio2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fe_rem_pio2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc-math%2Fdbl-64%2Fe_rem_pio2.c?ref=5cd88d6857dffe4f10c834c773c300881ec20e32", "patch": "@@ -1,182 +0,0 @@\n-/* @(#)e_rem_pio2.c 5.1 93/09/24 */\n-/*\n- * ====================================================\n- * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n- *\n- * Developed at SunPro, a Sun Microsystems, Inc. business.\n- * Permission to use, copy, modify, and distribute this\n- * software is freely granted, provided that this notice \n- * is preserved.\n- * ====================================================\n- */\n-\n-#if defined(LIBM_SCCS) && !defined(lint)\n-static char rcsid[] = \"$NetBSD: e_rem_pio2.c,v 1.8 1995/05/10 20:46:02 jtc Exp $\";\n-#endif\n-\n-/* __ieee754_rem_pio2(x,y)\n- * \n- * return the remainder of x rem pi/2 in y[0]+y[1] \n- * use __kernel_rem_pio2()\n- */\n-\n-#include \"math_private.h\"\n-\n-/*\n- * Table of constants for 2/pi, 396 Hex digits (476 decimal) of 2/pi \n- */\n-#ifdef __STDC__\n-static const int32_t two_over_pi[] = {\n-#else\n-static int32_t two_over_pi[] = {\n-#endif\n-0xA2F983, 0x6E4E44, 0x1529FC, 0x2757D1, 0xF534DD, 0xC0DB62, \n-0x95993C, 0x439041, 0xFE5163, 0xABDEBB, 0xC561B7, 0x246E3A, \n-0x424DD2, 0xE00649, 0x2EEA09, 0xD1921C, 0xFE1DEB, 0x1CB129, \n-0xA73EE8, 0x8235F5, 0x2EBB44, 0x84E99C, 0x7026B4, 0x5F7E41, \n-0x3991D6, 0x398353, 0x39F49C, 0x845F8B, 0xBDF928, 0x3B1FF8, \n-0x97FFDE, 0x05980F, 0xEF2F11, 0x8B5A0A, 0x6D1F6D, 0x367ECF, \n-0x27CB09, 0xB74F46, 0x3F669E, 0x5FEA2D, 0x7527BA, 0xC7EBE5, \n-0xF17B3D, 0x0739F7, 0x8A5292, 0xEA6BFB, 0x5FB11F, 0x8D5D08, \n-0x560330, 0x46FC7B, 0x6BABF0, 0xCFBC20, 0x9AF436, 0x1DA9E3, \n-0x91615E, 0xE61B08, 0x659985, 0x5F14A0, 0x68408D, 0xFFD880, \n-0x4D7327, 0x310606, 0x1556CA, 0x73A8C9, 0x60E27B, 0xC08C6B, \n-};\n-\n-#ifdef __STDC__\n-static const int32_t npio2_hw[] = {\n-#else\n-static int32_t npio2_hw[] = {\n-#endif\n-0x3FF921FB, 0x400921FB, 0x4012D97C, 0x401921FB, 0x401F6A7A, 0x4022D97C,\n-0x4025FDBB, 0x402921FB, 0x402C463A, 0x402F6A7A, 0x4031475C, 0x4032D97C,\n-0x40346B9C, 0x4035FDBB, 0x40378FDB, 0x403921FB, 0x403AB41B, 0x403C463A,\n-0x403DD85A, 0x403F6A7A, 0x40407E4C, 0x4041475C, 0x4042106C, 0x4042D97C,\n-0x4043A28C, 0x40446B9C, 0x404534AC, 0x4045FDBB, 0x4046C6CB, 0x40478FDB,\n-0x404858EB, 0x404921FB,\n-};\n-\n-/*\n- * invpio2:  53 bits of 2/pi\n- * pio2_1:   first  33 bit of pi/2\n- * pio2_1t:  pi/2 - pio2_1\n- * pio2_2:   second 33 bit of pi/2\n- * pio2_2t:  pi/2 - (pio2_1+pio2_2)\n- * pio2_3:   third  33 bit of pi/2\n- * pio2_3t:  pi/2 - (pio2_1+pio2_2+pio2_3)\n- */\n-\n-#ifdef __STDC__\n-static const double \n-#else\n-static double \n-#endif\n-zero =  0.00000000000000000000e+00, /* 0x00000000, 0x00000000 */\n-half =  5.00000000000000000000e-01, /* 0x3FE00000, 0x00000000 */\n-two24 =  1.67772160000000000000e+07, /* 0x41700000, 0x00000000 */\n-invpio2 =  6.36619772367581382433e-01, /* 0x3FE45F30, 0x6DC9C883 */\n-pio2_1  =  1.57079632673412561417e+00, /* 0x3FF921FB, 0x54400000 */\n-pio2_1t =  6.07710050650619224932e-11, /* 0x3DD0B461, 0x1A626331 */\n-pio2_2  =  6.07710050630396597660e-11, /* 0x3DD0B461, 0x1A600000 */\n-pio2_2t =  2.02226624879595063154e-21, /* 0x3BA3198A, 0x2E037073 */\n-pio2_3  =  2.02226624871116645580e-21, /* 0x3BA3198A, 0x2E000000 */\n-pio2_3t =  8.47842766036889956997e-32; /* 0x397B839A, 0x252049C1 */\n-\n-#ifdef __STDC__\n-\tint32_t __ieee754_rem_pio2(double x, double *y)\n-#else\n-\tint32_t __ieee754_rem_pio2(x,y)\n-\tdouble x,y[];\n-#endif\n-{\n-\tdouble z=z,w,t,r,fn;\n-\tdouble tx[3];\n-\tint32_t e0,i,j,nx,n,ix,hx;\n-\tuint32_t low;\n-\n-\tGET_HIGH_WORD(hx,x);\t\t/* high word of x */\n-\tix = hx&0x7fffffff;\n-\tif(ix<=0x3fe921fb)   /* |x| ~<= pi/4 , no need for reduction */\n-\t    {y[0] = x; y[1] = 0; return 0;}\n-\tif(ix<0x4002d97c) {  /* |x| < 3pi/4, special case with n=+-1 */\n-\t    if(hx>0) { \n-\t\tz = x - pio2_1;\n-\t\tif(ix!=0x3ff921fb) { \t/* 33+53 bit pi is good enough */\n-\t\t    y[0] = z - pio2_1t;\n-\t\t    y[1] = (z-y[0])-pio2_1t;\n-\t\t} else {\t\t/* near pi/2, use 33+33+53 bit pi */\n-\t\t    z -= pio2_2;\n-\t\t    y[0] = z - pio2_2t;\n-\t\t    y[1] = (z-y[0])-pio2_2t;\n-\t\t}\n-\t\treturn 1;\n-\t    } else {\t/* negative x */\n-\t\tz = x + pio2_1;\n-\t\tif(ix!=0x3ff921fb) { \t/* 33+53 bit pi is good enough */\n-\t\t    y[0] = z + pio2_1t;\n-\t\t    y[1] = (z-y[0])+pio2_1t;\n-\t\t} else {\t\t/* near pi/2, use 33+33+53 bit pi */\n-\t\t    z += pio2_2;\n-\t\t    y[0] = z + pio2_2t;\n-\t\t    y[1] = (z-y[0])+pio2_2t;\n-\t\t}\n-\t\treturn -1;\n-\t    }\n-\t}\n-\tif(ix<=0x413921fb) { /* |x| ~<= 2^19*(pi/2), medium size */\n-\t    t  = fabs(x);\n-\t    n  = (int32_t) (t*invpio2+half);\n-\t    fn = (double)n;\n-\t    r  = t-fn*pio2_1;\n-\t    w  = fn*pio2_1t;\t/* 1st round good to 85 bit */\n-\t    if(n<32&&ix!=npio2_hw[n-1]) {\t\n-\t\ty[0] = r-w;\t/* quick check no cancellation */\n-\t    } else {\n-\t        uint32_t high;\n-\t        j  = ix>>20;\n-\t        y[0] = r-w; \n-\t\tGET_HIGH_WORD(high,y[0]);\n-\t        i = j-((high>>20)&0x7ff);\n-\t        if(i>16) {  /* 2nd iteration needed, good to 118 */\n-\t\t    t  = r;\n-\t\t    w  = fn*pio2_2;\t\n-\t\t    r  = t-w;\n-\t\t    w  = fn*pio2_2t-((t-r)-w);\t\n-\t\t    y[0] = r-w;\n-\t\t    GET_HIGH_WORD(high,y[0]);\n-\t\t    i = j-((high>>20)&0x7ff);\n-\t\t    if(i>49)  {\t/* 3rd iteration need, 151 bits acc */\n-\t\t    \tt  = r;\t/* will cover all possible cases */\n-\t\t    \tw  = fn*pio2_3;\t\n-\t\t    \tr  = t-w;\n-\t\t    \tw  = fn*pio2_3t-((t-r)-w);\t\n-\t\t    \ty[0] = r-w;\n-\t\t    }\n-\t\t}\n-\t    }\n-\t    y[1] = (r-y[0])-w;\n-\t    if(hx<0) \t{y[0] = -y[0]; y[1] = -y[1]; return -n;}\n-\t    else\t return n;\n-\t}\n-    /* \n-     * all other (large) arguments\n-     */\n-\tif(ix>=0x7ff00000) {\t\t/* x is inf or NaN */\n-\t    y[0]=y[1]=x-x; return 0;\n-\t}\n-    /* set z = scalbn(|x|,ilogb(x)-23) */\n-\tGET_LOW_WORD(low,x);\n-\tSET_LOW_WORD(z,low);\n-\te0 \t= (ix>>20)-1046;\t/* e0 = ilogb(z)-23; */\n-\tSET_HIGH_WORD(z, ix - ((int32_t)(e0<<20)));\n-\tfor(i=0;i<2;i++) {\n-\t\ttx[i] = (double)((int32_t)(z));\n-\t\tz     = (z-tx[i])*two24;\n-\t}\n-\ttx[2] = z;\n-\tnx = 3;\n-\twhile(tx[nx-1]==zero) nx--;\t/* skip zero term */\n-\tn  =  __kernel_rem_pio2(tx,y,e0,nx,2,two_over_pi);\n-\tif(hx<0) {y[0] = -y[0]; y[1] = -y[1]; return -n;}\n-\treturn n;\n-}"}, {"sha": "f7e80554917f962af2053c75b8f33eaa0d5f2b5c", "filename": "libgcc-math/dbl-64/e_sqrt.c", "status": "removed", "additions": 0, "deletions": 88, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fe_sqrt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fe_sqrt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc-math%2Fdbl-64%2Fe_sqrt.c?ref=5cd88d6857dffe4f10c834c773c300881ec20e32", "patch": "@@ -1,88 +0,0 @@\n-/*\n- * IBM Accurate Mathematical Library\n- * written by International Business Machines Corp.\n- * Copyright (C) 2001 Free Software Foundation\n- *\n- * This program is free software; you can redistribute it and/or modify\n- * it under the terms of the GNU Lesser General Public License as published by\n- * the Free Software Foundation; either version 2.1 of the License, or\n- * (at your option) any later version.\n- *\n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Lesser General Public License for more details.\n- *\n- * You should have received a copy of the GNU Lesser General Public License\n- * along with this program; if not, write to the Free Software\n- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n- */\n-/*********************************************************************/\n-/* MODULE_NAME: uroot.c                                              */\n-/*                                                                   */\n-/* FUNCTION:    usqrt                                                */\n-/*                                                                   */\n-/* FILES NEEDED: dla.h endian.h mydefs.h uroot.h                     */\n-/*               uroot.tbl                                           */\n-/*                                                                   */\n-/* An ultimate sqrt routine. Given an IEEE double machine number x   */\n-/* it computes the correctly rounded (to nearest) value of square    */\n-/* root of x.                                                        */\n-/* Assumption: Machine arithmetic operations are performed in        */\n-/* round to nearest mode of IEEE 754 standard.                       */\n-/*                                                                   */\n-/*********************************************************************/\n-\n-#include \"endian.h\"\n-#include \"mydefs.h\"\n-#include \"dla.h\"\n-#include \"MathLib.h\"\n-#include \"root.tbl\"\n-#include \"math_private.h\"\n-\n-/*********************************************************************/\n-/* An ultimate sqrt routine. Given an IEEE double machine number x   */\n-/* it computes the correctly rounded (to nearest) value of square    */\n-/* root of x.                                                        */\n-/*********************************************************************/\n-double __ieee754_sqrt(double x) {\n-#include \"uroot.h\"\n-  static const double\n-    rt0 = 9.99999999859990725855365213134618E-01,\n-    rt1 = 4.99999999495955425917856814202739E-01,\n-    rt2 = 3.75017500867345182581453026130850E-01,\n-    rt3 = 3.12523626554518656309172508769531E-01;\n-  static const double big =  134217728.0;\n-  double y,t,del,res,res1,hy,z,zz,p,hx,tx,ty,s;\n-  mynumber a,c={{0,0}};\n-  int4 k;\n-\n-  a.x=x;\n-  k=a.i[HIGH_HALF];\n-  a.i[HIGH_HALF]=(k&0x001fffff)|0x3fe00000;\n-  t=inroot[(k&0x001fffff)>>14];\n-  s=a.x;\n-  /*----------------- 2^-1022  <= | x |< 2^1024  -----------------*/\n-  if (k>0x000fffff && k<0x7ff00000) {\n-    y=1.0-t*(t*s);\n-    t=t*(rt0+y*(rt1+y*(rt2+y*rt3)));\n-    c.i[HIGH_HALF]=0x20000000+((k&0x7fe00000)>>1);\n-    y=t*s;\n-    hy=(y+big)-big;\n-    del=0.5*t*((s-hy*hy)-(y-hy)*(y+hy));\n-    res=y+del;\n-    if (res == (res+1.002*((y-res)+del))) return res*c.x;\n-    else {\n-      res1=res+1.5*((y-res)+del);\n-      EMULV(res,res1,z,zz,p,hx,tx,hy,ty);  /* (z+zz)=res*res1 */\n-      return ((((z-s)+zz)<0)?max(res,res1):min(res,res1))*c.x;\n-    }\n-  }\n-  else {\n-    if ((k & 0x7ff00000) == 0x7ff00000)\n-      return x*x+x;\t/* sqrt(NaN)=NaN, sqrt(+inf)=+inf, sqrt(-inf)=sNaN */\n-    if (x==0) return x;\t/* sqrt(+0)=+0, sqrt(-0)=-0 */\n-    if (k<0) return (x-x)/(x-x); /* sqrt(-ve)=sNaN */\n-    return tm256.x*__ieee754_sqrt(x*t512.x);\n-  }\n-}"}, {"sha": "478a4bacf60fd142b48a8fa58d9af5bec5328c7f", "filename": "libgcc-math/dbl-64/halfulp.c", "status": "removed", "additions": 0, "deletions": 123, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fhalfulp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fhalfulp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc-math%2Fdbl-64%2Fhalfulp.c?ref=5cd88d6857dffe4f10c834c773c300881ec20e32", "patch": "@@ -1,123 +0,0 @@\n-/*\n- * IBM Accurate Mathematical Library\n- * written by International Business Machines Corp.\n- * Copyright (C) 2001, 2005 Free Software Foundation\n- *\n- * This program is free software; you can redistribute it and/or modify\n- * it under the terms of the GNU Lesser General Public License as published by\n- * the Free Software Foundation; either version 2.1 of the License, or\n- * (at your option) any later version.\n- *\n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Lesser General Public License for more details.\n- *\n- * You should have received a copy of the GNU Lesser General Public License\n- * along with this program; if not, write to the Free Software\n- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n- */\n-/************************************************************************/\n-/*                                                                      */\n-/* MODULE_NAME:halfulp.c                                                */\n-/*                                                                      */\n-/*  FUNCTIONS:halfulp                                                   */\n-/*  FILES NEEDED: mydefs.h dla.h endian.h                               */\n-/*                uroot.c                                               */\n-/*                                                                      */\n-/*Routine halfulp(double x, double y) computes x^y where result does    */\n-/*not need rounding. If the result is closer to 0 than can be           */\n-/*represented it returns 0.                                             */\n-/*     In the following cases the function does not compute anything    */\n-/*and returns a negative number:                                        */\n-/*1. if the result needs rounding,                                      */\n-/*2. if y is outside the interval [0,  2^20-1],                         */\n-/*3. if x can be represented by  x=2**n for some integer n.             */\n-/************************************************************************/\n-\n-#include \"endian.h\"\n-#include \"mydefs.h\"\n-#include \"dla.h\"\n-#include \"math_private.h\"\n-\n-double __ieee754_sqrt(double x);\n-\n-static const int4 tab54[32] = {\n-   262143, 11585, 1782, 511, 210, 107, 63, 42,\n-       30,    22,   17,  14,  12,  10,  9,  7,\n-        7,     6,    5,   5,   5,   4,  4,  4,\n-        3,     3,    3,   3,   3,   3,  3,  3 };\n-\n-\n-double __halfulp(double x, double y)\n-{\n-  mynumber v;\n-  double z,u,uu,j1,j2,j3,j4,j5;\n-  int4 k,l,m,n;\n-  if (y <= 0) {               /*if power is negative or zero */\n-    v.x = y;\n-    if (v.i[LOW_HALF] != 0) return -10.0;\n-    v.x = x;\n-    if (v.i[LOW_HALF] != 0) return -10.0;\n-    if ((v.i[HIGH_HALF]&0x000fffff) != 0) return -10;   /* if x =2 ^ n */\n-    k = ((v.i[HIGH_HALF]&0x7fffffff)>>20)-1023;         /* find this n */\n-    z = (double) k;\n-    return (z*y == -1075.0)?0: -10.0;\n-  }\n-                              /* if y > 0  */\n-  v.x = y;\n-    if (v.i[LOW_HALF] != 0) return -10.0;\n-\n-  v.x=x;\n-                              /*  case where x = 2**n for some integer n */\n-  if (((v.i[HIGH_HALF]&0x000fffff)|v.i[LOW_HALF]) == 0) {\n-    k=(v.i[HIGH_HALF]>>20)-1023;\n-    return (((double) k)*y == -1075.0)?0:-10.0;\n-  }\n-\n-  v.x = y;\n-  k = v.i[HIGH_HALF];\n-  m = k<<12;\n-  l = 0;\n-  while (m)\n-    {m = m<<1; l++; }\n-  n = (k&0x000fffff)|0x00100000;\n-  n = n>>(20-l);                       /*   n is the odd integer of y    */\n-  k = ((k>>20) -1023)-l;               /*   y = n*2**k                   */\n-  if (k>5) return -10.0;\n-  if (k>0) for (;k>0;k--) n *= 2;\n-  if (n > 34) return -10.0;\n-  k = -k;\n-  if (k>5) return -10.0;\n-\n-                            /*   now treat x        */\n-  while (k>0) {\n-    z = __ieee754_sqrt(x);\n-    EMULV(z,z,u,uu,j1,j2,j3,j4,j5);\n-    if (((u-x)+uu) != 0) break;\n-    x = z;\n-    k--;\n- }\n-  if (k) return -10.0;\n-\n-  /* it is impossible that n == 2,  so the mantissa of x must be short  */\n-\n-  v.x = x;\n-  if (v.i[LOW_HALF]) return -10.0;\n-  k = v.i[HIGH_HALF];\n-  m = k<<12;\n-  l = 0;\n-  while (m) {m = m<<1; l++; }\n-  m = (k&0x000fffff)|0x00100000;\n-  m = m>>(20-l);                       /*   m is the odd integer of x    */\n-\n-            /*   now check whether the length of m**n is at most 54 bits */\n-\n-  if  (m > tab54[n-3]) return -10.0;\n-\n-             /* yes, it is - now compute x**n by simple multiplications  */\n-\n-  u = x;\n-  for (k=1;k<n;k++) u = u*x;\n-  return u;\n-}"}, {"sha": "9ea767f591fccfa9a6fa3f70e83c46ee17a19d0a", "filename": "libgcc-math/dbl-64/k_rem_pio2.c", "status": "removed", "additions": 0, "deletions": 319, "changes": 319, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fk_rem_pio2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fk_rem_pio2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc-math%2Fdbl-64%2Fk_rem_pio2.c?ref=5cd88d6857dffe4f10c834c773c300881ec20e32", "patch": "@@ -1,319 +0,0 @@\n-/* @(#)k_rem_pio2.c 5.1 93/09/24 */\n-/*\n- * ====================================================\n- * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n- *\n- * Developed at SunPro, a Sun Microsystems, Inc. business.\n- * Permission to use, copy, modify, and distribute this\n- * software is freely granted, provided that this notice\n- * is preserved.\n- * ====================================================\n- */\n-\n-#if defined(LIBM_SCCS) && !defined(lint)\n-static char rcsid[] = \"$NetBSD: k_rem_pio2.c,v 1.7 1995/05/10 20:46:25 jtc Exp $\";\n-#endif\n-\n-/*\n- * __kernel_rem_pio2(x,y,e0,nx,prec,ipio2)\n- * double x[],y[]; int e0,nx,prec; int ipio2[];\n- *\n- * __kernel_rem_pio2 return the last three digits of N with\n- *\t\ty = x - N*pi/2\n- * so that |y| < pi/2.\n- *\n- * The method is to compute the integer (mod 8) and fraction parts of\n- * (2/pi)*x without doing the full multiplication. In general we\n- * skip the part of the product that are known to be a huge integer (\n- * more accurately, = 0 mod 8 ). Thus the number of operations are\n- * independent of the exponent of the input.\n- *\n- * (2/pi) is represented by an array of 24-bit integers in ipio2[].\n- *\n- * Input parameters:\n- * \tx[]\tThe input value (must be positive) is broken into nx\n- *\t\tpieces of 24-bit integers in double precision format.\n- *\t\tx[i] will be the i-th 24 bit of x. The scaled exponent\n- *\t\tof x[0] is given in input parameter e0 (i.e., x[0]*2^e0\n- *\t\tmatch x's up to 24 bits.\n- *\n- *\t\tExample of breaking a double positive z into x[0]+x[1]+x[2]:\n- *\t\t\te0 = ilogb(z)-23\n- *\t\t\tz  = scalbn(z,-e0)\n- *\t\tfor i = 0,1,2\n- *\t\t\tx[i] = floor(z)\n- *\t\t\tz    = (z-x[i])*2**24\n- *\n- *\n- *\ty[]\touput result in an array of double precision numbers.\n- *\t\tThe dimension of y[] is:\n- *\t\t\t24-bit  precision\t1\n- *\t\t\t53-bit  precision\t2\n- *\t\t\t64-bit  precision\t2\n- *\t\t\t113-bit precision\t3\n- *\t\tThe actual value is the sum of them. Thus for 113-bit\n- *\t\tprecision, one may have to do something like:\n- *\n- *\t\tlong double t,w,r_head, r_tail;\n- *\t\tt = (long double)y[2] + (long double)y[1];\n- *\t\tw = (long double)y[0];\n- *\t\tr_head = t+w;\n- *\t\tr_tail = w - (r_head - t);\n- *\n- *\te0\tThe exponent of x[0]\n- *\n- *\tnx\tdimension of x[]\n- *\n- *  \tprec\tan integer indicating the precision:\n- *\t\t\t0\t24  bits (single)\n- *\t\t\t1\t53  bits (double)\n- *\t\t\t2\t64  bits (extended)\n- *\t\t\t3\t113 bits (quad)\n- *\n- *\tipio2[]\n- *\t\tinteger array, contains the (24*i)-th to (24*i+23)-th\n- *\t\tbit of 2/pi after binary point. The corresponding\n- *\t\tfloating value is\n- *\n- *\t\t\tipio2[i] * 2^(-24(i+1)).\n- *\n- * External function:\n- *\tdouble scalbn(), floor();\n- *\n- *\n- * Here is the description of some local variables:\n- *\n- * \tjk\tjk+1 is the initial number of terms of ipio2[] needed\n- *\t\tin the computation. The recommended value is 2,3,4,\n- *\t\t6 for single, double, extended,and quad.\n- *\n- * \tjz\tlocal integer variable indicating the number of\n- *\t\tterms of ipio2[] used.\n- *\n- *\tjx\tnx - 1\n- *\n- *\tjv\tindex for pointing to the suitable ipio2[] for the\n- *\t\tcomputation. In general, we want\n- *\t\t\t( 2^e0*x[0] * ipio2[jv-1]*2^(-24jv) )/8\n- *\t\tis an integer. Thus\n- *\t\t\te0-3-24*jv >= 0 or (e0-3)/24 >= jv\n- *\t\tHence jv = max(0,(e0-3)/24).\n- *\n- *\tjp\tjp+1 is the number of terms in PIo2[] needed, jp = jk.\n- *\n- * \tq[]\tdouble array with integral value, representing the\n- *\t\t24-bits chunk of the product of x and 2/pi.\n- *\n- *\tq0\tthe corresponding exponent of q[0]. Note that the\n- *\t\texponent for q[i] would be q0-24*i.\n- *\n- *\tPIo2[]\tdouble precision array, obtained by cutting pi/2\n- *\t\tinto 24 bits chunks.\n- *\n- *\tf[]\tipio2[] in floating point\n- *\n- *\tiq[]\tinteger array by breaking up q[] in 24-bits chunk.\n- *\n- *\tfq[]\tfinal product of x*(2/pi) in fq[0],..,fq[jk]\n- *\n- *\tih\tinteger. If >0 it indicates q[] is >= 0.5, hence\n- *\t\tit also indicates the *sign* of the result.\n- *\n- */\n-\n-\n-/*\n- * Constants:\n- * The hexadecimal values are the intended ones for the following\n- * constants. The decimal values may be used, provided that the\n- * compiler will convert from decimal to binary accurately enough\n- * to produce the hexadecimal values shown.\n- */\n-\n-#include \"math_private.h\"\n-\n-#ifdef __STDC__\n-static const int init_jk[] = {2,3,4,6}; /* initial value for jk */\n-#else\n-static int init_jk[] = {2,3,4,6};\n-#endif\n-\n-#ifdef __STDC__\n-static const double PIo2[] = {\n-#else\n-static double PIo2[] = {\n-#endif\n-  1.57079625129699707031e+00, /* 0x3FF921FB, 0x40000000 */\n-  7.54978941586159635335e-08, /* 0x3E74442D, 0x00000000 */\n-  5.39030252995776476554e-15, /* 0x3CF84698, 0x80000000 */\n-  3.28200341580791294123e-22, /* 0x3B78CC51, 0x60000000 */\n-  1.27065575308067607349e-29, /* 0x39F01B83, 0x80000000 */\n-  1.22933308981111328932e-36, /* 0x387A2520, 0x40000000 */\n-  2.73370053816464559624e-44, /* 0x36E38222, 0x80000000 */\n-  2.16741683877804819444e-51, /* 0x3569F31D, 0x00000000 */\n-};\n-\n-#ifdef __STDC__\n-static const double\n-#else\n-static double\n-#endif\n-zero   = 0.0,\n-one    = 1.0,\n-two24   =  1.67772160000000000000e+07, /* 0x41700000, 0x00000000 */\n-twon24  =  5.96046447753906250000e-08; /* 0x3E700000, 0x00000000 */\n-\n-#ifdef __STDC__\n-\tint __kernel_rem_pio2(double *x, double *y, int e0, int nx, int prec, const int32_t *ipio2)\n-#else\n-\tint __kernel_rem_pio2(x,y,e0,nx,prec,ipio2)\n-\tdouble x[], y[]; int e0,nx,prec; int32_t ipio2[];\n-#endif\n-{\n-\tint32_t jz,jx,jv,jp,jk,carry,n,iq[20],i,j,k,m,q0,ih;\n-\tdouble z,fw,f[20],fq[20],q[20];\n-\n-    /* initialize jk*/\n-\tjk = init_jk[prec];\n-\tjp = jk;\n-\n-    /* determine jx,jv,q0, note that 3>q0 */\n-\tjx =  nx-1;\n-\tjv = (e0-3)/24; if(jv<0) jv=0;\n-\tq0 =  e0-24*(jv+1);\n-\n-    /* set up f[0] to f[jx+jk] where f[jx+jk] = ipio2[jv+jk] */\n-\tj = jv-jx; m = jx+jk;\n-\tfor(i=0;i<=m;i++,j++) f[i] = (j<0)? zero : (double) ipio2[j];\n-\n-    /* compute q[0],q[1],...q[jk] */\n-\tfor (i=0;i<=jk;i++) {\n-\t    for(j=0,fw=0.0;j<=jx;j++) fw += x[j]*f[jx+i-j]; q[i] = fw;\n-\t}\n-\n-\tjz = jk;\n-recompute:\n-    /* distill q[] into iq[] reversingly */\n-\tfor(i=0,j=jz,z=q[jz];j>0;i++,j--) {\n-\t    fw    =  (double)((int32_t)(twon24* z));\n-\t    iq[i] =  (int32_t)(z-two24*fw);\n-\t    z     =  q[j-1]+fw;\n-\t}\n-\n-    /* compute n */\n-\tz  = __scalbn(z,q0);\t\t/* actual value of z */\n-\tz -= 8.0*__floor(z*0.125);\t\t/* trim off integer >= 8 */\n-\tn  = (int32_t) z;\n-\tz -= (double)n;\n-\tih = 0;\n-\tif(q0>0) {\t/* need iq[jz-1] to determine n */\n-\t    i  = (iq[jz-1]>>(24-q0)); n += i;\n-\t    iq[jz-1] -= i<<(24-q0);\n-\t    ih = iq[jz-1]>>(23-q0);\n-\t}\n-\telse if(q0==0) ih = iq[jz-1]>>23;\n-\telse if(z>=0.5) ih=2;\n-\n-\tif(ih>0) {\t/* q > 0.5 */\n-\t    n += 1; carry = 0;\n-\t    for(i=0;i<jz ;i++) {\t/* compute 1-q */\n-\t\tj = iq[i];\n-\t\tif(carry==0) {\n-\t\t    if(j!=0) {\n-\t\t\tcarry = 1; iq[i] = 0x1000000- j;\n-\t\t    }\n-\t\t} else  iq[i] = 0xffffff - j;\n-\t    }\n-\t    if(q0>0) {\t\t/* rare case: chance is 1 in 12 */\n-\t        switch(q0) {\n-\t        case 1:\n-\t    \t   iq[jz-1] &= 0x7fffff; break;\n-\t    \tcase 2:\n-\t    \t   iq[jz-1] &= 0x3fffff; break;\n-\t        }\n-\t    }\n-\t    if(ih==2) {\n-\t\tz = one - z;\n-\t\tif(carry!=0) z -= __scalbn(one,q0);\n-\t    }\n-\t}\n-\n-    /* check if recomputation is needed */\n-\tif(z==zero) {\n-\t    j = 0;\n-\t    for (i=jz-1;i>=jk;i--) j |= iq[i];\n-\t    if(j==0) { /* need recomputation */\n-\t\tfor(k=1;iq[jk-k]==0;k++);   /* k = no. of terms needed */\n-\n-\t\tfor(i=jz+1;i<=jz+k;i++) {   /* add q[jz+1] to q[jz+k] */\n-\t\t    f[jx+i] = (double) ipio2[jv+i];\n-\t\t    for(j=0,fw=0.0;j<=jx;j++) fw += x[j]*f[jx+i-j];\n-\t\t    q[i] = fw;\n-\t\t}\n-\t\tjz += k;\n-\t\tgoto recompute;\n-\t    }\n-\t}\n-\n-    /* chop off zero terms */\n-\tif(z==0.0) {\n-\t    jz -= 1; q0 -= 24;\n-\t    while(iq[jz]==0) { jz--; q0-=24;}\n-\t} else { /* break z into 24-bit if necessary */\n-\t    z = __scalbn(z,-q0);\n-\t    if(z>=two24) {\n-\t\tfw = (double)((int32_t)(twon24*z));\n-\t\tiq[jz] = (int32_t)(z-two24*fw);\n-\t\tjz += 1; q0 += 24;\n-\t\tiq[jz] = (int32_t) fw;\n-\t    } else iq[jz] = (int32_t) z ;\n-\t}\n-\n-    /* convert integer \"bit\" chunk to floating-point value */\n-\tfw = __scalbn(one,q0);\n-\tfor(i=jz;i>=0;i--) {\n-\t    q[i] = fw*(double)iq[i]; fw*=twon24;\n-\t}\n-\n-    /* compute PIo2[0,...,jp]*q[jz,...,0] */\n-\tfor(i=jz;i>=0;i--) {\n-\t    for(fw=0.0,k=0;k<=jp&&k<=jz-i;k++) fw += PIo2[k]*q[i+k];\n-\t    fq[jz-i] = fw;\n-\t}\n-\n-    /* compress fq[] into y[] */\n-\tswitch(prec) {\n-\t    case 0:\n-\t\tfw = 0.0;\n-\t\tfor (i=jz;i>=0;i--) fw += fq[i];\n-\t\ty[0] = (ih==0)? fw: -fw;\n-\t\tbreak;\n-\t    case 1:\n-\t    case 2:\n-\t\tfw = 0.0;\n-\t\tfor (i=jz;i>=0;i--) fw += fq[i];\n-\t\ty[0] = (ih==0)? fw: -fw;\n-\t\tfw = fq[0]-fw;\n-\t\tfor (i=1;i<=jz;i++) fw += fq[i];\n-\t\ty[1] = (ih==0)? fw: -fw;\n-\t\tbreak;\n-\t    case 3:\t/* painful */\n-\t\tfor (i=jz;i>0;i--) {\n-\t\t    fw      = fq[i-1]+fq[i];\n-\t\t    fq[i]  += fq[i-1]-fw;\n-\t\t    fq[i-1] = fw;\n-\t\t}\n-\t\tfor (i=jz;i>1;i--) {\n-\t\t    fw      = fq[i-1]+fq[i];\n-\t\t    fq[i]  += fq[i-1]-fw;\n-\t\t    fq[i-1] = fw;\n-\t\t}\n-\t\tfor (fw=0.0,i=jz;i>=2;i--) fw += fq[i];\n-\t\tif(ih==0) {\n-\t\t    y[0] =  fq[0]; y[1] =  fq[1]; y[2] =  fw;\n-\t\t} else {\n-\t\t    y[0] = -fq[0]; y[1] = -fq[1]; y[2] = -fw;\n-\t\t}\n-\t}\n-\treturn n&7;\n-}"}, {"sha": "0fd87321445766672f0a26dfa3821163841c532a", "filename": "libgcc-math/dbl-64/mpa.c", "status": "removed", "additions": 0, "deletions": 508, "changes": 508, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fmpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fmpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc-math%2Fdbl-64%2Fmpa.c?ref=5cd88d6857dffe4f10c834c773c300881ec20e32", "patch": "@@ -1,508 +0,0 @@\n-\n-/*\n- * IBM Accurate Mathematical Library\n- * written by International Business Machines Corp.\n- * Copyright (C) 2001 Free Software Foundation\n- *\n- * This program is free software; you can redistribute it and/or modify\n- * it under the terms of the GNU Lesser General Public License as published by\n- * the Free Software Foundation; either version 2.1 of the License, or\n- * (at your option) any later version.\n- *\n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Lesser General Public License for more details.\n- *\n- * You should have received a copy of the GNU Lesser General Public License\n- * along with this program; if not, write to the Free Software\n- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n- */\n-/************************************************************************/\n-/*  MODULE_NAME: mpa.c                                                  */\n-/*                                                                      */\n-/*  FUNCTIONS:                                                          */\n-/*               mcr                                                    */\n-/*               acr                                                    */\n-/*               cr                                                     */\n-/*               cpy                                                    */\n-/*               cpymn                                                  */\n-/*               norm                                                   */\n-/*               denorm                                                 */\n-/*               mp_dbl                                                 */\n-/*               dbl_mp                                                 */\n-/*               add_magnitudes                                         */\n-/*               sub_magnitudes                                         */\n-/*               add                                                    */\n-/*               sub                                                    */\n-/*               mul                                                    */\n-/*               inv                                                    */\n-/*               dvd                                                    */\n-/*                                                                      */\n-/* Arithmetic functions for multiple precision numbers.                 */\n-/* Relative errors are bounded                                          */\n-/************************************************************************/\n-\n-\n-#include \"endian.h\"\n-#include \"mpa.h\"\n-#include \"mpa2.h\"\n-\n-/* mcr() compares the sizes of the mantissas of two multiple precision  */\n-/* numbers. Mantissas are compared regardless of the signs of the       */\n-/* numbers, even if x->d[0] or y->d[0] are zero. Exponents are also     */\n-/* disregarded.                                                         */\n-static int mcr(const mp_no *x, const mp_no *y, int p) {\n-  int i;\n-  for (i=1; i<=p; i++) {\n-    if      (X[i] == Y[i])  continue;\n-    else if (X[i] >  Y[i])  return  1;\n-    else                    return -1; }\n-  return 0;\n-}\n-\n-\n-\n-/* acr() compares the absolute values of two multiple precision numbers */\n-int __acr(const mp_no *x, const mp_no *y, int p) {\n-  int i;\n-\n-  if      (X[0] == ZERO) {\n-    if    (Y[0] == ZERO) i= 0;\n-    else                 i=-1;\n-  }\n-  else if (Y[0] == ZERO) i= 1;\n-  else {\n-    if      (EX >  EY)   i= 1;\n-    else if (EX <  EY)   i=-1;\n-    else                 i= mcr(x,y,p);\n-  }\n-\n-  return i;\n-}\n-\n-\n-/* cr90 compares the values of two multiple precision numbers           */\n-int  __cr(const mp_no *x, const mp_no *y, int p) {\n-  int i;\n-\n-  if      (X[0] > Y[0])  i= 1;\n-  else if (X[0] < Y[0])  i=-1;\n-  else if (X[0] < ZERO ) i= __acr(y,x,p);\n-  else                   i= __acr(x,y,p);\n-\n-  return i;\n-}\n-\n-\n-/* Copy a multiple precision number. Set *y=*x. x=y is permissible.      */\n-void __cpy(const mp_no *x, mp_no *y, int p) {\n-  int i;\n-\n-  EY = EX;\n-  for (i=0; i <= p; i++)    Y[i] = X[i];\n-\n-  return;\n-}\n-\n-\n-/* Copy a multiple precision number x of precision m into a */\n-/* multiple precision number y of precision n. In case n>m, */\n-/* the digits of y beyond the m'th are set to zero. In case */\n-/* n<m, the digits of x beyond the n'th are ignored.        */\n-/* x=y is permissible.                                      */\n-\n-void __cpymn(const mp_no *x, int m, mp_no *y, int n) {\n-\n-  int i,k;\n-\n-  EY = EX;     k=MIN(m,n);\n-  for (i=0; i <= k; i++)    Y[i] = X[i];\n-  for (   ; i <= n; i++)    Y[i] = ZERO;\n-\n-  return;\n-}\n-\n-/* Convert a multiple precision number *x into a double precision */\n-/* number *y, normalized case  (|x| >= 2**(-1022))) */\n-static void norm(const mp_no *x, double *y, int p)\n-{\n-  #define R  radixi.d\n-  int i;\n-#if 0\n-  int k;\n-#endif\n-  double a,c=c,u,v,z[5];\n-  if (p<5) {\n-    if      (p==1) c = X[1];\n-    else if (p==2) c = X[1] + R* X[2];\n-    else if (p==3) c = X[1] + R*(X[2]  +   R* X[3]);\n-    else if (p==4) c =(X[1] + R* X[2]) + R*R*(X[3] + R*X[4]);\n-  }\n-  else {\n-    for (a=ONE, z[1]=X[1]; z[1] < TWO23; )\n-        {a *= TWO;   z[1] *= TWO; }\n-\n-    for (i=2; i<5; i++) {\n-      z[i] = X[i]*a;\n-      u = (z[i] + CUTTER)-CUTTER;\n-      if  (u > z[i])  u -= RADIX;\n-      z[i] -= u;\n-      z[i-1] += u*RADIXI;\n-    }\n-\n-    u = (z[3] + TWO71) - TWO71;\n-    if (u > z[3])   u -= TWO19;\n-    v = z[3]-u;\n-\n-    if (v == TWO18) {\n-      if (z[4] == ZERO) {\n-        for (i=5; i <= p; i++) {\n-          if (X[i] == ZERO)   continue;\n-          else                {z[3] += ONE;   break; }\n-        }\n-      }\n-      else              z[3] += ONE;\n-    }\n-\n-    c = (z[1] + R *(z[2] + R * z[3]))/a;\n-  }\n-\n-  c *= X[0];\n-\n-  for (i=1; i<EX; i++)   c *= RADIX;\n-  for (i=1; i>EX; i--)   c *= RADIXI;\n-\n-  *y = c;\n-  return;\n-#undef R\n-}\n-\n-/* Convert a multiple precision number *x into a double precision */\n-/* number *y, denormalized case  (|x| < 2**(-1022))) */\n-static void denorm(const mp_no *x, double *y, int p)\n-{\n-  int i,k;\n-  double c,u,z[5];\n-#if 0\n-  double a,v;\n-#endif\n-\n-#define R  radixi.d\n-  if (EX<-44 || (EX==-44 && X[1]<TWO5))\n-     { *y=ZERO; return; }\n-\n-  if      (p==1) {\n-    if      (EX==-42) {z[1]=X[1]+TWO10;  z[2]=ZERO;  z[3]=ZERO;  k=3;}\n-    else if (EX==-43) {z[1]=     TWO10;  z[2]=X[1];  z[3]=ZERO;  k=2;}\n-    else              {z[1]=     TWO10;  z[2]=ZERO;  z[3]=X[1];  k=1;}\n-  }\n-  else if (p==2) {\n-    if      (EX==-42) {z[1]=X[1]+TWO10;  z[2]=X[2];  z[3]=ZERO;  k=3;}\n-    else if (EX==-43) {z[1]=     TWO10;  z[2]=X[1];  z[3]=X[2];  k=2;}\n-    else              {z[1]=     TWO10;  z[2]=ZERO;  z[3]=X[1];  k=1;}\n-  }\n-  else {\n-    if      (EX==-42) {z[1]=X[1]+TWO10;  z[2]=X[2];  k=3;}\n-    else if (EX==-43) {z[1]=     TWO10;  z[2]=X[1];  k=2;}\n-    else              {z[1]=     TWO10;  z[2]=ZERO;  k=1;}\n-    z[3] = X[k];\n-  }\n-\n-  u = (z[3] + TWO57) - TWO57;\n-  if  (u > z[3])   u -= TWO5;\n-\n-  if (u==z[3]) {\n-    for (i=k+1; i <= p; i++) {\n-      if (X[i] == ZERO)   continue;\n-      else {z[3] += ONE;   break; }\n-    }\n-  }\n-\n-  c = X[0]*((z[1] + R*(z[2] + R*z[3])) - TWO10);\n-\n-  *y = c*TWOM1032;\n-  return;\n-\n-#undef R\n-}\n-\n-/* Convert a multiple precision number *x into a double precision number *y. */\n-/* The result is correctly rounded to the nearest/even. *x is left unchanged */\n-\n-void __mp_dbl(const mp_no *x, double *y, int p) {\n-#if 0\n-  int i,k;\n-  double a,c,u,v,z[5];\n-#endif\n-\n-  if (X[0] == ZERO)  {*y = ZERO;  return; }\n-\n-  if      (EX> -42)                 norm(x,y,p);\n-  else if (EX==-42 && X[1]>=TWO10)  norm(x,y,p);\n-  else                              denorm(x,y,p);\n-}\n-\n-\n-/* dbl_mp() converts a double precision number x into a multiple precision  */\n-/* number *y. If the precision p is too small the result is truncated. x is */\n-/* left unchanged.                                                          */\n-\n-void __dbl_mp(double x, mp_no *y, int p) {\n-\n-  int i,n;\n-  double u;\n-\n-  /* Sign */\n-  if      (x == ZERO)  {Y[0] = ZERO;  return; }\n-  else if (x >  ZERO)   Y[0] = ONE;\n-  else                 {Y[0] = MONE;  x=-x;   }\n-\n-  /* Exponent */\n-  for (EY=ONE; x >= RADIX; EY += ONE)   x *= RADIXI;\n-  for (      ; x <  ONE;   EY -= ONE)   x *= RADIX;\n-\n-  /* Digits */\n-  n=MIN(p,4);\n-  for (i=1; i<=n; i++) {\n-    u = (x + TWO52) - TWO52;\n-    if (u>x)   u -= ONE;\n-    Y[i] = u;     x -= u;    x *= RADIX; }\n-  for (   ; i<=p; i++)     Y[i] = ZERO;\n-  return;\n-}\n-\n-\n-/*  add_magnitudes() adds the magnitudes of *x & *y assuming that           */\n-/*  abs(*x) >= abs(*y) > 0.                                                 */\n-/* The sign of the sum *z is undefined. x&y may overlap but not x&z or y&z. */\n-/* No guard digit is used. The result equals the exact sum, truncated.      */\n-/* *x & *y are left unchanged.                                              */\n-\n-static void add_magnitudes(const mp_no *x, const mp_no *y, mp_no *z, int p) {\n-\n-  int i,j,k;\n-\n-  EZ = EX;\n-\n-  i=p;    j=p+ EY - EX;    k=p+1;\n-\n-  if (j<1)\n-     {__cpy(x,z,p);  return; }\n-  else   Z[k] = ZERO;\n-\n-  for (; j>0; i--,j--) {\n-    Z[k] += X[i] + Y[j];\n-    if (Z[k] >= RADIX) {\n-      Z[k]  -= RADIX;\n-      Z[--k] = ONE; }\n-    else\n-      Z[--k] = ZERO;\n-  }\n-\n-  for (; i>0; i--) {\n-    Z[k] += X[i];\n-    if (Z[k] >= RADIX) {\n-      Z[k]  -= RADIX;\n-      Z[--k] = ONE; }\n-    else\n-      Z[--k] = ZERO;\n-  }\n-\n-  if (Z[1] == ZERO) {\n-    for (i=1; i<=p; i++)    Z[i] = Z[i+1]; }\n-  else   EZ += ONE;\n-}\n-\n-\n-/*  sub_magnitudes() subtracts the magnitudes of *x & *y assuming that      */\n-/*  abs(*x) > abs(*y) > 0.                                                  */\n-/* The sign of the difference *z is undefined. x&y may overlap but not x&z  */\n-/* or y&z. One guard digit is used. The error is less than one ulp.         */\n-/* *x & *y are left unchanged.                                              */\n-\n-static void sub_magnitudes(const mp_no *x, const mp_no *y, mp_no *z, int p) {\n-\n-  int i,j,k;\n-\n-  EZ = EX;\n-\n-  if (EX == EY) {\n-    i=j=k=p;\n-    Z[k] = Z[k+1] = ZERO; }\n-  else {\n-    j= EX - EY;\n-    if (j > p)  {__cpy(x,z,p);  return; }\n-    else {\n-      i=p;   j=p+1-j;   k=p;\n-      if (Y[j] > ZERO) {\n-        Z[k+1] = RADIX - Y[j--];\n-        Z[k]   = MONE; }\n-      else {\n-        Z[k+1] = ZERO;\n-        Z[k]   = ZERO;   j--;}\n-    }\n-  }\n-\n-  for (; j>0; i--,j--) {\n-    Z[k] += (X[i] - Y[j]);\n-    if (Z[k] < ZERO) {\n-      Z[k]  += RADIX;\n-      Z[--k] = MONE; }\n-    else\n-      Z[--k] = ZERO;\n-  }\n-\n-  for (; i>0; i--) {\n-    Z[k] += X[i];\n-    if (Z[k] < ZERO) {\n-      Z[k]  += RADIX;\n-      Z[--k] = MONE; }\n-    else\n-      Z[--k] = ZERO;\n-  }\n-\n-  for (i=1; Z[i] == ZERO; i++) ;\n-  EZ = EZ - i + 1;\n-  for (k=1; i <= p+1; )\n-    Z[k++] = Z[i++];\n-  for (; k <= p; )\n-    Z[k++] = ZERO;\n-\n-  return;\n-}\n-\n-\n-/* Add two multiple precision numbers. Set *z = *x + *y. x&y may overlap  */\n-/* but not x&z or y&z. One guard digit is used. The error is less than    */\n-/* one ulp. *x & *y are left unchanged.                                   */\n-\n-void __add(const mp_no *x, const mp_no *y, mp_no *z, int p) {\n-\n-  int n;\n-\n-  if      (X[0] == ZERO)     {__cpy(y,z,p);  return; }\n-  else if (Y[0] == ZERO)     {__cpy(x,z,p);  return; }\n-\n-  if (X[0] == Y[0])   {\n-    if (__acr(x,y,p) > 0)      {add_magnitudes(x,y,z,p);  Z[0] = X[0]; }\n-    else                     {add_magnitudes(y,x,z,p);  Z[0] = Y[0]; }\n-  }\n-  else                       {\n-    if ((n=__acr(x,y,p)) == 1) {sub_magnitudes(x,y,z,p);  Z[0] = X[0]; }\n-    else if (n == -1)        {sub_magnitudes(y,x,z,p);  Z[0] = Y[0]; }\n-    else                      Z[0] = ZERO;\n-  }\n-  return;\n-}\n-\n-\n-/* Subtract two multiple precision numbers. *z is set to *x - *y. x&y may */\n-/* overlap but not x&z or y&z. One guard digit is used. The error is      */\n-/* less than one ulp. *x & *y are left unchanged.                         */\n-\n-void __sub(const mp_no *x, const mp_no *y, mp_no *z, int p) {\n-\n-  int n;\n-\n-  if      (X[0] == ZERO)     {__cpy(y,z,p);  Z[0] = -Z[0];  return; }\n-  else if (Y[0] == ZERO)     {__cpy(x,z,p);                 return; }\n-\n-  if (X[0] != Y[0])    {\n-    if (__acr(x,y,p) > 0)      {add_magnitudes(x,y,z,p);  Z[0] =  X[0]; }\n-    else                     {add_magnitudes(y,x,z,p);  Z[0] = -Y[0]; }\n-  }\n-  else                       {\n-    if ((n=__acr(x,y,p)) == 1) {sub_magnitudes(x,y,z,p);  Z[0] =  X[0]; }\n-    else if (n == -1)        {sub_magnitudes(y,x,z,p);  Z[0] = -Y[0]; }\n-    else                      Z[0] = ZERO;\n-  }\n-  return;\n-}\n-\n-\n-/* Multiply two multiple precision numbers. *z is set to *x * *y. x&y      */\n-/* may overlap but not x&z or y&z. In case p=1,2,3 the exact result is     */\n-/* truncated to p digits. In case p>3 the error is bounded by 1.001 ulp.   */\n-/* *x & *y are left unchanged.                                             */\n-\n-void __mul(const mp_no *x, const mp_no *y, mp_no *z, int p) {\n-\n-  int i, i1, i2, j, k, k2;\n-  double u;\n-\n-                      /* Is z=0? */\n-  if (X[0]*Y[0]==ZERO)\n-     { Z[0]=ZERO;  return; }\n-\n-                       /* Multiply, add and carry */\n-  k2 = (p<3) ? p+p : p+3;\n-  Z[k2]=ZERO;\n-  for (k=k2; k>1; ) {\n-    if (k > p)  {i1=k-p; i2=p+1; }\n-    else        {i1=1;   i2=k;   }\n-    for (i=i1,j=i2-1; i<i2; i++,j--)  Z[k] += X[i]*Y[j];\n-\n-    u = (Z[k] + CUTTER)-CUTTER;\n-    if  (u > Z[k])  u -= RADIX;\n-    Z[k]  -= u;\n-    Z[--k] = u*RADIXI;\n-  }\n-\n-                 /* Is there a carry beyond the most significant digit? */\n-  if (Z[1] == ZERO) {\n-    for (i=1; i<=p; i++)  Z[i]=Z[i+1];\n-    EZ = EX + EY - 1; }\n-  else\n-    EZ = EX + EY;\n-\n-  Z[0] = X[0] * Y[0];\n-  return;\n-}\n-\n-\n-/* Invert a multiple precision number. Set *y = 1 / *x.                     */\n-/* Relative error bound = 1.001*r**(1-p) for p=2, 1.063*r**(1-p) for p=3,   */\n-/* 2.001*r**(1-p) for p>3.                                                  */\n-/* *x=0 is not permissible. *x is left unchanged.                           */\n-\n-void __inv(const mp_no *x, mp_no *y, int p) {\n-  int i;\n-#if 0\n-  int l;\n-#endif\n-  double t;\n-  mp_no z,w;\n-  static const int np1[] = {0,0,0,0,1,2,2,2,2,3,3,3,3,3,3,3,3,3,\n-                            4,4,4,4,4,4,4,4,4,4,4,4,4,4,4};\n-  const mp_no mptwo = {1,{1.0,2.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,\n-                         0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,\n-                         0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,\n-                         0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}};\n-\n-  __cpy(x,&z,p);  z.e=0;  __mp_dbl(&z,&t,p);\n-  t=ONE/t;   __dbl_mp(t,y,p);    EY -= EX;\n-\n-  for (i=0; i<np1[p]; i++) {\n-    __cpy(y,&w,p);\n-    __mul(x,&w,y,p);\n-    __sub(&mptwo,y,&z,p);\n-    __mul(&w,&z,y,p);\n-  }\n-  return;\n-}\n-\n-\n-/* Divide one multiple precision number by another.Set *z = *x / *y. *x & *y */\n-/* are left unchanged. x&y may overlap but not x&z or y&z.                   */\n-/* Relative error bound = 2.001*r**(1-p) for p=2, 2.063*r**(1-p) for p=3     */\n-/* and 3.001*r**(1-p) for p>3. *y=0 is not permissible.                      */\n-\n-void __dvd(const mp_no *x, const mp_no *y, mp_no *z, int p) {\n-\n-  mp_no w;\n-\n-  if (X[0] == ZERO)    Z[0] = ZERO;\n-  else                {__inv(y,&w,p);   __mul(x,&w,z,p);}\n-  return;\n-}"}, {"sha": "14a446baf9776de9e9383f8ee5eaad2dfef2ce84", "filename": "libgcc-math/dbl-64/mpa.h", "status": "removed", "additions": 0, "deletions": 90, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fmpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fmpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc-math%2Fdbl-64%2Fmpa.h?ref=5cd88d6857dffe4f10c834c773c300881ec20e32", "patch": "@@ -1,90 +0,0 @@\n-\n-/*\n- * IBM Accurate Mathematical Library\n- * Written by International Business Machines Corp.\n- * Copyright (C) 2001 Free Software Foundation, Inc.\n- *\n- * This program is free software; you can redistribute it and/or modify\n- * it under the terms of the GNU Lesser General Public License as published by\n- * the Free Software Foundation; either version 2.1 of the License, or\n- * (at your option) any later version.\n- *\n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Lesser General Public License for more details.\n- *\n- * You should have received a copy of the GNU Lesser General Public License\n- * along with this program; if not, write to the Free Software\n- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n- */\n-\n-/************************************************************************/\n-/*  MODULE_NAME: mpa.h                                                  */\n-/*                                                                      */\n-/*  FUNCTIONS:                                                          */\n-/*               mcr                                                    */\n-/*               acr                                                    */\n-/*               cr                                                     */\n-/*               cpy                                                    */\n-/*               cpymn                                                  */\n-/*               mp_dbl                                                 */\n-/*               dbl_mp                                                 */\n-/*               add                                                    */\n-/*               sub                                                    */\n-/*               mul                                                    */\n-/*               inv                                                    */\n-/*               dvd                                                    */\n-/*                                                                      */\n-/* Arithmetic functions for multiple precision numbers.                 */\n-/* Common types and definition                                          */\n-/************************************************************************/\n-\n-#ifndef MPA_H\n-#define MPA_H\n-\n-typedef struct {/* This structure holds the details of a multi-precision     */\n-  int e;        /* floating point number, x: d[0] holds its sign (-1,0 or 1) */\n-  double d[40]; /* e holds its exponent (...,-2,-1,0,1,2,...) and            */\n-} mp_no;        /* d[1]...d[p] hold its mantissa digits. The value of x is,  */\n-                /* x = d[1]*r**(e-1) + d[2]*r**(e-2) + ... + d[p]*r**(e-p).  */\n-                /* Here   r = 2**24,   0 <= d[i] < r  and  1 <= p <= 32.     */\n-                /* p is a global variable. A multi-precision number is       */\n-                /* always normalized. Namely, d[1] > 0. An exception is      */\n-                /* a zero which is characterized by d[0] = 0. The terms      */\n-                /* d[p+1], d[p+2], ... of a none zero number have no         */\n-                /* significance and so are the terms e, d[1],d[2],...        */\n-                /* of a zero.                                                */\n-\n-typedef union { int i[2]; double d; } number;\n-\n-#define  X   x->d\n-#define  Y   y->d\n-#define  Z   z->d\n-#define  EX  x->e\n-#define  EY  y->e\n-#define  EZ  z->e\n-\n-#define ABS(x)   ((x) <  0  ? -(x) : (x))\n-#define MIN(a,b) (((a)<(b))?(a):(b))\n-\n-int __acr(const mp_no *, const mp_no *, int);\n-int  __cr(const mp_no *, const mp_no *, int);\n-void __cpy(const mp_no *, mp_no *, int);\n-void __cpymn(const mp_no *, int, mp_no *, int);\n-void __mp_dbl(const mp_no *, double *, int);\n-void __dbl_mp(double, mp_no *, int);\n-void __add(const mp_no *, const mp_no *, mp_no *, int);\n-void __sub(const mp_no *, const mp_no *, mp_no *, int);\n-void __mul(const mp_no *, const mp_no *, mp_no *, int);\n-void __inv(const mp_no *, mp_no *, int);\n-void __dvd(const mp_no *, const mp_no *, mp_no *, int);\n-\n-extern void __mpatan (mp_no *, mp_no *, int);\n-extern void __mpatan2 (mp_no *, mp_no *, mp_no *, int);\n-extern void __mpsqrt (mp_no *, mp_no *, int);\n-extern void __mpexp (mp_no *, mp_no *__y, int);\n-extern void __c32 (mp_no *, mp_no *, mp_no *, int);\n-extern int __mpranred (double, mp_no *, int);\n-\n-#endif"}, {"sha": "54284bb8dc5f73b063188ba5ff39534f6e8b6eab", "filename": "libgcc-math/dbl-64/mpa2.h", "status": "removed", "additions": 0, "deletions": 98, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fmpa2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fmpa2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc-math%2Fdbl-64%2Fmpa2.h?ref=5cd88d6857dffe4f10c834c773c300881ec20e32", "patch": "@@ -1,98 +0,0 @@\n-\n-/*\n- * IBM Accurate Mathematical Library\n- * Written by International Business Machines Corp.\n- * Copyright (C) 2001 Free Software Foundation, Inc.\n- *\n- * This program is free software; you can redistribute it and/or modify\n- * it under the terms of the GNU Lesser General Public License as published by\n- * the Free Software Foundation; either version 2.1 of the License, or\n- * (at your option) any later version.\n- *\n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Lesser General Public License for more details.\n- *\n- * You should have received a copy of the GNU Lesser General Public License\n- * along with this program; if not, write to the Free Software\n- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n- */\n-\n-/**************************************************************************/\n-/*                                                                        */\n-/* MODULE_NAME:mpa2.h                                                     */\n-/*                                                                        */\n-/*                                                                        */\n-/*   variables prototype and definition   according to type of processor  */\n-/*   types definition                                                     */\n-/**************************************************************************/\n-\n-#ifndef MPA2_H\n-#define MPA2_H\n-\n-\n-#ifdef BIG_ENDI\n-static const number\n-/**/ radix          = {{0x41700000, 0x00000000} }, /* 2**24  */\n-/**/ radixi         = {{0x3e700000, 0x00000000} }, /* 2**-24 */\n-/**/ cutter         = {{0x44b00000, 0x00000000} }, /* 2**76  */\n-/**/ zero           = {{0x00000000, 0x00000000} }, /*  0     */\n-/**/ one            = {{0x3ff00000, 0x00000000} }, /*  1     */\n-/**/ mone           = {{0xbff00000, 0x00000000} }, /* -1     */\n-/**/ two            = {{0x40000000, 0x00000000} }, /*  2     */\n-/**/ half           = {{0x3fe00000, 0x00000000} }, /* 1/2    */\n-/**/ two5           = {{0x40400000, 0x00000000} }, /* 2**5   */\n-/**/ two10          = {{0x40900000, 0x00000000} }, /* 2**10  */\n-/**/ two18          = {{0x41100000, 0x00000000} }, /* 2**18  */\n-/**/ two19          = {{0x41200000, 0x00000000} }, /* 2**19  */\n-/**/ two23          = {{0x41600000, 0x00000000} }, /* 2**23  */\n-/**/ two52          = {{0x43300000, 0x00000000} }, /* 2**52  */\n-/**/ two57          = {{0x43800000, 0x00000000} }, /* 2**57  */\n-/**/ two71          = {{0x44600000, 0x00000000} }, /* 2**71  */\n-/**/ twom1032       = {{0x00000400, 0x00000000} }; /* 2**-1032 */\n-\n-#else\n-#ifdef LITTLE_ENDI\n-static const number\n-/**/ radix          = {{0x00000000, 0x41700000} }, /* 2**24  */\n-/**/ radixi         = {{0x00000000, 0x3e700000} }, /* 2**-24 */\n-/**/ cutter         = {{0x00000000, 0x44b00000} }, /* 2**76  */\n-/**/ zero           = {{0x00000000, 0x00000000} }, /*  0     */\n-/**/ one            = {{0x00000000, 0x3ff00000} }, /*  1     */\n-/**/ mone           = {{0x00000000, 0xbff00000} }, /* -1     */\n-/**/ two            = {{0x00000000, 0x40000000} }, /*  2     */\n-/**/ half           = {{0x00000000, 0x3fe00000} }, /* 1/2    */\n-/**/ two5           = {{0x00000000, 0x40400000} }, /* 2**5   */\n-/**/ two10          = {{0x00000000, 0x40900000} }, /* 2**10  */\n-/**/ two18          = {{0x00000000, 0x41100000} }, /* 2**18  */\n-/**/ two19          = {{0x00000000, 0x41200000} }, /* 2**19  */\n-/**/ two23          = {{0x00000000, 0x41600000} }, /* 2**23  */\n-/**/ two52          = {{0x00000000, 0x43300000} }, /* 2**52  */\n-/**/ two57          = {{0x00000000, 0x43800000} }, /* 2**57  */\n-/**/ two71          = {{0x00000000, 0x44600000} }, /* 2**71  */\n-/**/ twom1032       = {{0x00000000, 0x00000400} }; /* 2**-1032 */\n-\n-#endif\n-#endif\n-\n-#define  RADIX     radix.d\n-#define  RADIXI    radixi.d\n-#define  CUTTER    cutter.d\n-#define  ZERO      zero.d\n-#define  ONE       one.d\n-#define  MONE      mone.d\n-#define  TWO       two.d\n-#define  HALF      half.d\n-#define  TWO5      two5.d\n-#define  TWO10     two10.d\n-#define  TWO18     two18.d\n-#define  TWO19     two19.d\n-#define  TWO23     two23.d\n-#define  TWO52     two52.d\n-#define  TWO57     two57.d\n-#define  TWO71     two71.d\n-#define  TWOM1032  twom1032.d\n-\n-\n-#endif"}, {"sha": "ee21c2513817cabef2ddc0ca1826a20f6ecbcabd", "filename": "libgcc-math/dbl-64/mpatan.c", "status": "removed", "additions": 0, "deletions": 102, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fmpatan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fmpatan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc-math%2Fdbl-64%2Fmpatan.c?ref=5cd88d6857dffe4f10c834c773c300881ec20e32", "patch": "@@ -1,102 +0,0 @@\n-\n-/*\n- * IBM Accurate Mathematical Library\n- * written by International Business Machines Corp.\n- * Copyright (C) 2001 Free Software Foundation\n- *\n- * This program is free software; you can redistribute it and/or modify\n- * it under the terms of the GNU Lesser General Public License as published by\n- * the Free Software Foundation; either version 2.1 of the License, or\n- * (at your option) any later version.\n- *\n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Lesser General Public License for more details.\n- *\n- * You should have received a copy of the GNU  Lesser General Public License\n- * along with this program; if not, write to the Free Software\n- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n- */\n-/******************************************************************/\n-/*                                                                */\n-/* MODULE_NAME:mpatan.c                                           */\n-/*                                                                */\n-/* FUNCTIONS:mpatan                                               */\n-/*                                                                */\n-/* FILES NEEDED: mpa.h endian.h mpatan.h                          */\n-/*               mpa.c                                            */\n-/*                                                                */\n-/* Multi-Precision Atan function subroutine, for precision p >= 4.*/\n-/* The relative error of the result is bounded by 34.32*r**(1-p), */\n-/* where r=2**24.                                                 */\n-/******************************************************************/\n-\n-#include \"endian.h\"\n-#include \"mpa.h\"\n-void __mpsqrt(mp_no *, mp_no *, int);\n-\n-void __mpatan(mp_no *x, mp_no *y, int p) {\n-#include \"mpatan.h\"\n-\n-  int i,m,n;\n-  double dx;\n-  mp_no\n-    mpone    = {0,{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,\n-\t\t0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,\n-\t\t0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}},\n-    mptwo    = {0,{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,\n-\t\t0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,\n-\t\t0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}},\n-    mptwoim1 = {0,{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,\n-\t\t0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,\n-\t\t0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}};\n-\n-  mp_no mps,mpsm,mpt,mpt1,mpt2,mpt3;\n-\n-                      /* Choose m and initiate mpone, mptwo & mptwoim1 */\n-    if      (EX>0) m=7;\n-    else if (EX<0) m=0;\n-    else {\n-      __mp_dbl(x,&dx,p);  dx=ABS(dx);\n-      for (m=6; m>0; m--)\n-        {if (dx>xm[m].d) break;}\n-    }\n-    mpone.e    = mptwo.e    = mptwoim1.e = 1;\n-    mpone.d[0] = mpone.d[1] = mptwo.d[0] = mptwoim1.d[0] = ONE;\n-    mptwo.d[1] = TWO;\n-\n-                                 /* Reduce x m times */\n-    __mul(x,x,&mpsm,p);\n-    if (m==0) __cpy(x,&mps,p);\n-    else {\n-      for (i=0; i<m; i++) {\n-\t__add(&mpone,&mpsm,&mpt1,p);\n-\t__mpsqrt(&mpt1,&mpt2,p);\n-\t__add(&mpt2,&mpt2,&mpt1,p);\n-\t__add(&mptwo,&mpsm,&mpt2,p);\n-\t__add(&mpt1,&mpt2,&mpt3,p);\n-\t__dvd(&mpsm,&mpt3,&mpt1,p);\n-\t__cpy(&mpt1,&mpsm,p);\n-      }\n-      __mpsqrt(&mpsm,&mps,p);    mps.d[0] = X[0];\n-    }\n-\n-                    /* Evaluate a truncated power series for Atan(s) */\n-    n=np[p];    mptwoim1.d[1] = twonm1[p].d;\n-    __dvd(&mpsm,&mptwoim1,&mpt,p);\n-    for (i=n-1; i>1; i--) {\n-      mptwoim1.d[1] -= TWO;\n-      __dvd(&mpsm,&mptwoim1,&mpt1,p);\n-      __mul(&mpsm,&mpt,&mpt2,p);\n-      __sub(&mpt1,&mpt2,&mpt,p);\n-    }\n-    __mul(&mps,&mpt,&mpt1,p);\n-    __sub(&mps,&mpt1,&mpt,p);\n-\n-                          /* Compute Atan(x) */\n-    mptwoim1.d[1] = twom[m].d;\n-    __mul(&mptwoim1,&mpt,y,p);\n-\n-  return;\n-}"}, {"sha": "d420ff34088c8784eca0b362abc97b7bcfa5606b", "filename": "libgcc-math/dbl-64/mpatan.h", "status": "removed", "additions": 0, "deletions": 174, "changes": 174, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fmpatan.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fmpatan.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc-math%2Fdbl-64%2Fmpatan.h?ref=5cd88d6857dffe4f10c834c773c300881ec20e32", "patch": "@@ -1,174 +0,0 @@\n-\n-/*\n- * IBM Accurate Mathematical Library\n- * Written by International Business Machines Corp.\n- * Copyright (C) 2001 Free Software Foundation, Inc.\n- *\n- * This program is free software; you can redistribute it and/or modify\n- * it under the terms of the GNU Lesser General Public License as published by\n- * the Free Software Foundation; either version 2.1 of the License, or\n- * (at your option) any later version.\n- *\n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Lesser General Public License for more details.\n- *\n- * You should have received a copy of the GNU Lesser General Public License\n- * along with this program; if not, write to the Free Software\n- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n- */\n-\n-/******************************************************************/\n-/*                                                                */\n-/* MODULE_NAME:mpatan.h                                           */\n-/*                                                                */\n-/* common data and variables prototype and definition             */\n-/******************************************************************/\n-\n-#ifndef MPATAN_H\n-#define MPATAN_H\n-\n-#ifdef BIG_ENDI\n-  static const number\n-            xm[8] = {                             /* x[m]   */\n-/**/                  {{0x00000000, 0x00000000} }, /* 0.0    */\n-/**/                  {{0x3f8930be, 0x00000000} }, /* 0.0123 */\n-/**/                  {{0x3f991687, 0x00000000} }, /* 0.0245 */\n-/**/                  {{0x3fa923a2, 0x00000000} }, /* 0.0491 */\n-/**/                  {{0x3fb930be, 0x00000000} }, /* 0.0984 */\n-/**/                  {{0x3fc95810, 0x00000000} }, /* 0.198  */\n-/**/                  {{0x3fda7ef9, 0x00000000} }, /* 0.414  */\n-/**/                  {{0x3ff00000, 0x00000000} }, /* 1.0    */\n-                    };\n-  static const number\n-       twonm1[33] = {                             /* 2n-1   */\n-/**/                  {{0x00000000, 0x00000000} }, /* 0      */\n-/**/                  {{0x00000000, 0x00000000} }, /* 0      */\n-/**/                  {{0x00000000, 0x00000000} }, /* 0      */\n-/**/                  {{0x00000000, 0x00000000} }, /* 0      */\n-/**/                  {{0x40260000, 0x00000000} }, /* 11     */\n-/**/                  {{0x402e0000, 0x00000000} }, /* 15     */\n-/**/                  {{0x40330000, 0x00000000} }, /* 19     */\n-/**/                  {{0x40350000, 0x00000000} }, /* 21     */\n-/**/                  {{0x40390000, 0x00000000} }, /* 25     */\n-/**/                  {{0x403d0000, 0x00000000} }, /* 29     */\n-/**/                  {{0x40408000, 0x00000000} }, /* 33     */\n-/**/                  {{0x40428000, 0x00000000} }, /* 37     */\n-/**/                  {{0x40448000, 0x00000000} }, /* 41     */\n-/**/                  {{0x40468000, 0x00000000} }, /* 45     */\n-/**/                  {{0x40488000, 0x00000000} }, /* 49     */\n-/**/                  {{0x404a8000, 0x00000000} }, /* 53     */\n-/**/                  {{0x404b8000, 0x00000000} }, /* 55     */\n-/**/                  {{0x404d8000, 0x00000000} }, /* 59     */\n-/**/                  {{0x404f8000, 0x00000000} }, /* 63     */\n-/**/                  {{0x4050c000, 0x00000000} }, /* 67     */\n-/**/                  {{0x4051c000, 0x00000000} }, /* 71     */\n-/**/                  {{0x4052c000, 0x00000000} }, /* 75     */\n-/**/                  {{0x4053c000, 0x00000000} }, /* 79     */\n-/**/                  {{0x4054c000, 0x00000000} }, /* 83     */\n-/**/                  {{0x40554000, 0x00000000} }, /* 85     */\n-/**/                  {{0x40564000, 0x00000000} }, /* 89     */\n-/**/                  {{0x40574000, 0x00000000} }, /* 93     */\n-/**/                  {{0x40584000, 0x00000000} }, /* 97     */\n-/**/                  {{0x40594000, 0x00000000} }, /* 101    */\n-/**/                  {{0x405a4000, 0x00000000} }, /* 105    */\n-/**/                  {{0x405b4000, 0x00000000} }, /* 109    */\n-/**/                  {{0x405c4000, 0x00000000} }, /* 113    */\n-/**/                  {{0x405d4000, 0x00000000} }, /* 117    */\n-                    };\n-\n-  static const number\n-          twom[8] = {                             /* 2**m   */\n-/**/                  {{0x3ff00000, 0x00000000} }, /*   1.0  */\n-/**/                  {{0x40000000, 0x00000000} }, /*   2.0  */\n-/**/                  {{0x40100000, 0x00000000} }, /*   4.0  */\n-/**/                  {{0x40200000, 0x00000000} }, /*   8.0  */\n-/**/                  {{0x40300000, 0x00000000} }, /*  16.0  */\n-/**/                  {{0x40400000, 0x00000000} }, /*  32.0  */\n-/**/                  {{0x40500000, 0x00000000} }, /*  64.0  */\n-/**/                  {{0x40600000, 0x00000000} }, /* 128.0  */\n-                    };\n-\n-  static const number\n-/**/ one            = {{0x3ff00000, 0x00000000} }, /* 1      */\n-/**/ two            = {{0x40000000, 0x00000000} }; /* 2      */\n-\n-#else\n-#ifdef LITTLE_ENDI\n-\n-  static const number\n-            xm[8] = {                             /* x[m]   */\n-/**/                  {{0x00000000, 0x00000000} }, /* 0.0    */\n-/**/                  {{0x00000000, 0x3f8930be} }, /* 0.0123 */\n-/**/                  {{0x00000000, 0x3f991687} }, /* 0.0245 */\n-/**/                  {{0x00000000, 0x3fa923a2} }, /* 0.0491 */\n-/**/                  {{0x00000000, 0x3fb930be} }, /* 0.0984 */\n-/**/                  {{0x00000000, 0x3fc95810} }, /* 0.198  */\n-/**/                  {{0x00000000, 0x3fda7ef9} }, /* 0.414  */\n-/**/                  {{0x00000000, 0x3ff00000} }, /* 1.0    */\n-                    };\n-  static const number\n-       twonm1[33] = {                             /* 2n-1   */\n-/**/                  {{0x00000000, 0x00000000} }, /* 0      */\n-/**/                  {{0x00000000, 0x00000000} }, /* 0      */\n-/**/                  {{0x00000000, 0x00000000} }, /* 0      */\n-/**/                  {{0x00000000, 0x00000000} }, /* 0      */\n-/**/                  {{0x00000000, 0x40260000} }, /* 11     */\n-/**/                  {{0x00000000, 0x402e0000} }, /* 15     */\n-/**/                  {{0x00000000, 0x40330000} }, /* 19     */\n-/**/                  {{0x00000000, 0x40350000} }, /* 21     */\n-/**/                  {{0x00000000, 0x40390000} }, /* 25     */\n-/**/                  {{0x00000000, 0x403d0000} }, /* 29     */\n-/**/                  {{0x00000000, 0x40408000} }, /* 33     */\n-/**/                  {{0x00000000, 0x40428000} }, /* 37     */\n-/**/                  {{0x00000000, 0x40448000} }, /* 41     */\n-/**/                  {{0x00000000, 0x40468000} }, /* 45     */\n-/**/                  {{0x00000000, 0x40488000} }, /* 49     */\n-/**/                  {{0x00000000, 0x404a8000} }, /* 53     */\n-/**/                  {{0x00000000, 0x404b8000} }, /* 55     */\n-/**/                  {{0x00000000, 0x404d8000} }, /* 59     */\n-/**/                  {{0x00000000, 0x404f8000} }, /* 63     */\n-/**/                  {{0x00000000, 0x4050c000} }, /* 67     */\n-/**/                  {{0x00000000, 0x4051c000} }, /* 71     */\n-/**/                  {{0x00000000, 0x4052c000} }, /* 75     */\n-/**/                  {{0x00000000, 0x4053c000} }, /* 79     */\n-/**/                  {{0x00000000, 0x4054c000} }, /* 83     */\n-/**/                  {{0x00000000, 0x40554000} }, /* 85     */\n-/**/                  {{0x00000000, 0x40564000} }, /* 89     */\n-/**/                  {{0x00000000, 0x40574000} }, /* 93     */\n-/**/                  {{0x00000000, 0x40584000} }, /* 97     */\n-/**/                  {{0x00000000, 0x40594000} }, /* 101    */\n-/**/                  {{0x00000000, 0x405a4000} }, /* 105    */\n-/**/                  {{0x00000000, 0x405b4000} }, /* 109    */\n-/**/                  {{0x00000000, 0x405c4000} }, /* 113    */\n-/**/                  {{0x00000000, 0x405d4000} }, /* 117    */\n-                    };\n-\n-  static const number\n-          twom[8] = {                             /* 2**m   */\n-/**/                  {{0x00000000, 0x3ff00000} }, /*   1.0  */\n-/**/                  {{0x00000000, 0x40000000} }, /*   2.0  */\n-/**/                  {{0x00000000, 0x40100000} }, /*   4.0  */\n-/**/                  {{0x00000000, 0x40200000} }, /*   8.0  */\n-/**/                  {{0x00000000, 0x40300000} }, /*  16.0  */\n-/**/                  {{0x00000000, 0x40400000} }, /*  32.0  */\n-/**/                  {{0x00000000, 0x40500000} }, /*  64.0  */\n-/**/                  {{0x00000000, 0x40600000} }, /* 128.0  */\n-                    };\n-\n-  static const number\n-/**/ one            = {{0x00000000, 0x3ff00000} }, /* 1      */\n-/**/ two            = {{0x00000000, 0x40000000} }; /* 2      */\n-\n-#endif\n-#endif\n-\n-#define  ONE       one.d\n-#define  TWO       two.d\n-\n-  static const int\n-    np[33] = { 0, 0, 0, 0, 6, 8,10,11,13,15,17,19,21,23,25,27,28,\n-\t       30,32,34,36,38,40,42,43,45,47,49,51,53,55,57,59};\n-\n-#endif"}, {"sha": "91df920566392fb473960c11ae3e2323247b05b1", "filename": "libgcc-math/dbl-64/mpatan2.c", "status": "removed", "additions": 0, "deletions": 70, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fmpatan2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fmpatan2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc-math%2Fdbl-64%2Fmpatan2.c?ref=5cd88d6857dffe4f10c834c773c300881ec20e32", "patch": "@@ -1,70 +0,0 @@\n-\n-/*\n- * IBM Accurate Mathematical Library\n- * written by International Business Machines Corp.\n- * Copyright (C) 2001 Free Software Foundation\n- *\n- * This program is free software; you can redistribute it and/or modify\n- * it under the terms of the GNU Lesser General Public License as published by\n- * the Free Software Foundation; either version 2.1 of the License, or\n- * (at your option) any later version.\n- *\n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Lesser General Public License for more details.\n- *\n- * You should have received a copy of the GNU Lesser General Public License\n- * along with this program; if not, write to the Free Software\n- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n- */\n-/******************************************************************/\n-/*  MODULE_NAME: mpatan2.c                                        */\n-/*                                                                */\n-/*  FUNCTIONS:mpatan2                                             */\n-/*                                                                */\n-/*  FILES NEEDED: mpa.h                                           */\n-/*                mpa.c mpatan.c mpsqrt.c                         */\n-/*                                                                */\n-/* Multi-Precision Atan2(y,x) function subroutine,                */\n-/* for precision p >= 4.                                          */\n-/* y=0 is not permitted if x<=0. No error messages are given.     */\n-/* The relative error of the result is bounded by 44.84*r**(1-p)  */\n-/* if x <= 0,  y != 0 and by 37.33*r**(1-p) if x>0. here r=2**24. */\n-/*                                                                */\n-/******************************************************************/\n-\n-\n-\n-#include \"mpa.h\"\n-\n-void __mpsqrt(mp_no *, mp_no *, int);\n-void __mpatan(mp_no *, mp_no *, int);\n-\n-/* Multi-Precision Atan2(y,x) function subroutine, for p >= 4.    */\n-/* y=0 is not permitted if x<=0. No error messages are given.     */\n-void __mpatan2(mp_no *y, mp_no *x, mp_no *z, int p) {\n-\n-  static const double Zero = 0.0, One = 1.0;\n-\n-  mp_no mpone = {0,{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,\n-                    0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,\n-                    0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}};\n-  mp_no mpt1,mpt2,mpt3;\n-\n-\n-  if (X[0] <= Zero) {\n-    mpone.e = 1;                 mpone.d[0] = mpone.d[1] = One;\n-    __dvd(x,y,&mpt1,p);          __mul(&mpt1,&mpt1,&mpt2,p);\n-    if (mpt1.d[0] != Zero)       mpt1.d[0] = One;\n-    __add(&mpt2,&mpone,&mpt3,p); __mpsqrt(&mpt3,&mpt2,p);\n-    __add(&mpt1,&mpt2,&mpt3,p);  mpt3.d[0]=Y[0];\n-    __mpatan(&mpt3,&mpt1,p);     __add(&mpt1,&mpt1,z,p);\n-  }\n-  else\n-  { __dvd(y,x,&mpt1,p);\n-    __mpatan(&mpt1,z,p);\n-  }\n-\n-  return;\n-}"}, {"sha": "6398679dc36a8128631abb17e74c9e3d606dd035", "filename": "libgcc-math/dbl-64/mpexp.c", "status": "removed", "additions": 0, "deletions": 106, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fmpexp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fmpexp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc-math%2Fdbl-64%2Fmpexp.c?ref=5cd88d6857dffe4f10c834c773c300881ec20e32", "patch": "@@ -1,106 +0,0 @@\n-\n-/*\n- * IBM Accurate Mathematical Library\n- * written by International Business Machines Corp.\n- * Copyright (C) 2001 Free Software Foundation\n- *\n- * This program is free software; you can redistribute it and/or modify\n- * it under the terms of the GNU  Lesser General Public License as published by\n- * the Free Software Foundation; either version 2.1 of the License, or\n- * (at your option) any later version.\n- *\n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Lesser General Public License for more details.\n- *\n- * You should have received a copy of the GNU Lesser General Public License\n- * along with this program; if not, write to the Free Software\n- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n- */\n-/*************************************************************************/\n-/*   MODULE_NAME:mpexp.c                                                 */\n-/*                                                                       */\n-/*   FUNCTIONS: mpexp                                                    */\n-/*                                                                       */\n-/*   FILES NEEDED: mpa.h endian.h mpexp.h                                */\n-/*                 mpa.c                                                 */\n-/*                                                                       */\n-/* Multi-Precision exponential function subroutine                       */\n-/*   (  for p >= 4, 2**(-55) <= abs(x) <= 1024     ).                    */\n-/*************************************************************************/\n-\n-#include \"endian.h\"\n-#include \"mpa.h\"\n-#include \"mpa2.h\"\n-#include \"mpexp.h\"\n-\n-/* Multi-Precision exponential function subroutine (for p >= 4,          */\n-/* 2**(-55) <= abs(x) <= 1024).                                          */\n-void __mpexp(mp_no *x, mp_no *y, int p) {\n-\n-  int i,j,k,m,m1,m2,n;\n-  double a,b;\n-  static const int np[33] = {0,0,0,0,3,3,4,4,5,4,4,5,5,5,6,6,6,6,6,6,\n-                             6,6,6,6,7,7,7,7,8,8,8,8,8};\n-  static const int m1p[33]= {0,0,0,0,17,23,23,28,27,38,42,39,43,47,43,47,50,54,\n-                               57,60,64,67,71,74,68,71,74,77,70,73,76,78,81};\n-  static const int m1np[7][18] = {\n-                 { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},\n-                 { 0, 0, 0, 0,36,48,60,72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},\n-                 { 0, 0, 0, 0,24,32,40,48,56,64,72, 0, 0, 0, 0, 0, 0, 0},\n-                 { 0, 0, 0, 0,17,23,29,35,41,47,53,59,65, 0, 0, 0, 0, 0},\n-                 { 0, 0, 0, 0, 0, 0,23,28,33,38,42,47,52,57,62,66, 0, 0},\n-                 { 0, 0, 0, 0, 0, 0, 0, 0,27, 0, 0,39,43,47,51,55,59,63},\n-                 { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,43,47,50,54}};\n-  mp_no mpone = {0,{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,\n-                    0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,\n-                    0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}};\n-  mp_no mpk   = {0,{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,\n-                    0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,\n-                    0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}};\n-  mp_no mps,mpak,mpt1,mpt2;\n-\n-  /* Choose m,n and compute a=2**(-m) */\n-  n = np[p];    m1 = m1p[p];    a = twomm1[p].d;\n-  for (i=0; i<EX; i++)  a *= RADIXI;\n-  for (   ; i>EX; i--)  a *= RADIX;\n-  b = X[1]*RADIXI;   m2 = 24*EX;\n-  for (; b<HALF; m2--)  { a *= TWO;   b *= TWO; }\n-  if (b == HALF) {\n-    for (i=2; i<=p; i++) { if (X[i]!=ZERO)  break; }\n-    if (i==p+1)  { m2--;  a *= TWO; }\n-  }\n-  if ((m=m1+m2) <= 0) {\n-    m=0;  a=ONE;\n-    for (i=n-1; i>0; i--,n--) { if (m1np[i][p]+m2>0)  break; }\n-  }\n-\n-  /* Compute s=x*2**(-m). Put result in mps */\n-  __dbl_mp(a,&mpt1,p);\n-  __mul(x,&mpt1,&mps,p);\n-\n-  /* Evaluate the polynomial. Put result in mpt2 */\n-  mpone.e=1;   mpone.d[0]=ONE;   mpone.d[1]=ONE;\n-  mpk.e = 1;   mpk.d[0] = ONE;   mpk.d[1]=nn[n].d;\n-  __dvd(&mps,&mpk,&mpt1,p);\n-  __add(&mpone,&mpt1,&mpak,p);\n-  for (k=n-1; k>1; k--) {\n-    __mul(&mps,&mpak,&mpt1,p);\n-    mpk.d[1]=nn[k].d;\n-    __dvd(&mpt1,&mpk,&mpt2,p);\n-    __add(&mpone,&mpt2,&mpak,p);\n-  }\n-  __mul(&mps,&mpak,&mpt1,p);\n-  __add(&mpone,&mpt1,&mpt2,p);\n-\n-  /* Raise polynomial value to the power of 2**m. Put result in y */\n-  for (k=0,j=0; k<m; ) {\n-    __mul(&mpt2,&mpt2,&mpt1,p);  k++;\n-    if (k==m)  { j=1;  break; }\n-    __mul(&mpt1,&mpt1,&mpt2,p);  k++;\n-  }\n-  if (j)  __cpy(&mpt1,y,p);\n-  else    __cpy(&mpt2,y,p);\n-  return;\n-}"}, {"sha": "7ca9f6e32f0ed29310967e64f68fba0fd3ad3db4", "filename": "libgcc-math/dbl-64/mpexp.h", "status": "removed", "additions": 0, "deletions": 135, "changes": 135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fmpexp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fmpexp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc-math%2Fdbl-64%2Fmpexp.h?ref=5cd88d6857dffe4f10c834c773c300881ec20e32", "patch": "@@ -1,135 +0,0 @@\n-/*\n- * IBM Accurate Mathematical Library\n- * Written by International Business Machines Corp.\n- * Copyright (C) 2001 Free Software Foundation, Inc.\n- *\n- * This program is free software; you can redistribute it and/or modify\n- * it under the terms of the GNU Lesser General Public License as published by\n- * the Free Software Foundation; either version 2.1 of the License, or\n- * (at your option) any later version.\n- *\n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Lesser General Public License for more details.\n- *\n- * You should have received a copy of the GNU Lesser General Public License\n- * along with this program; if not, write to the Free Software\n- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n- */\n-\n-/******************************************************************/\n-/*                                                                */\n-/* MODULE_NAME:mpexp.h                                            */\n-/*                                                                */\n-/* common data and variables prototype and definition             */\n-/******************************************************************/\n-\n-#ifndef MPEXP_H\n-#define MPEXP_H\n-\n-#ifdef BIG_ENDI\n-  static const number\n-        twomm1[33] = {                            /* 2**-m1 */\n-/**/                  {{0x00000000, 0x00000000} }, /* 0      */\n-/**/                  {{0x00000000, 0x00000000} }, /* 0      */\n-/**/                  {{0x00000000, 0x00000000} }, /* 0      */\n-/**/                  {{0x00000000, 0x00000000} }, /* 0      */\n-/**/                  {{0x3ee00000, 0x00000000} }, /* 2**-17 */\n-/**/                  {{0x3e800000, 0x00000000} }, /* 2**-23 */\n-/**/                  {{0x3e800000, 0x00000000} }, /* 2**-23 */\n-/**/                  {{0x3e300000, 0x00000000} }, /* 2**-28 */\n-/**/                  {{0x3e400000, 0x00000000} }, /* 2**-27 */\n-/**/                  {{0x3d900000, 0x00000000} }, /* 2**-38 */\n-/**/                  {{0x3d500000, 0x00000000} }, /* 2**-42 */\n-/**/                  {{0x3d800000, 0x00000000} }, /* 2**-39 */\n-/**/                  {{0x3d400000, 0x00000000} }, /* 2**-43 */\n-/**/                  {{0x3d000000, 0x00000000} }, /* 2**-47 */\n-/**/                  {{0x3d400000, 0x00000000} }, /* 2**-43 */\n-/**/                  {{0x3d000000, 0x00000000} }, /* 2**-47 */\n-/**/                  {{0x3cd00000, 0x00000000} }, /* 2**-50 */\n-/**/                  {{0x3c900000, 0x00000000} }, /* 2**-54 */\n-/**/                  {{0x3c600000, 0x00000000} }, /* 2**-57 */\n-/**/                  {{0x3c300000, 0x00000000} }, /* 2**-60 */\n-/**/                  {{0x3bf00000, 0x00000000} }, /* 2**-64 */\n-/**/                  {{0x3bc00000, 0x00000000} }, /* 2**-67 */\n-/**/                  {{0x3b800000, 0x00000000} }, /* 2**-71 */\n-/**/                  {{0x3b500000, 0x00000000} }, /* 2**-74 */\n-/**/                  {{0x3bb00000, 0x00000000} }, /* 2**-68 */\n-/**/                  {{0x3b800000, 0x00000000} }, /* 2**-71 */\n-/**/                  {{0x3b500000, 0x00000000} }, /* 2**-74 */\n-/**/                  {{0x3b200000, 0x00000000} }, /* 2**-77 */\n-/**/                  {{0x3b900000, 0x00000000} }, /* 2**-70 */\n-/**/                  {{0x3b600000, 0x00000000} }, /* 2**-73 */\n-/**/                  {{0x3b300000, 0x00000000} }, /* 2**-76 */\n-/**/                  {{0x3b100000, 0x00000000} }, /* 2**-78 */\n-/**/                  {{0x3ae00000, 0x00000000} }, /* 2**-81 */\n-  };\n-  static const number\n-               nn[9]={                            /* n      */\n-/**/                  {{0x00000000, 0x00000000} }, /* 0      */\n-/**/                  {{0x3ff00000, 0x00000000} }, /* 1      */\n-/**/                  {{0x40000000, 0x00000000} }, /* 2      */\n-/**/                  {{0x40080000, 0x00000000} }, /* 3      */\n-/**/                  {{0x40100000, 0x00000000} }, /* 4      */\n-/**/                  {{0x40140000, 0x00000000} }, /* 5      */\n-/**/                  {{0x40180000, 0x00000000} }, /* 6      */\n-/**/                  {{0x401c0000, 0x00000000} }, /* 7      */\n-/**/                  {{0x40200000, 0x00000000} }, /* 8      */\n-  };\n-\n-#else\n-#ifdef LITTLE_ENDI\n-  static const number\n-        twomm1[33] = {                            /* 2**-m1 */\n-/**/                  {{0x00000000, 0x00000000} }, /* 0      */\n-/**/                  {{0x00000000, 0x00000000} }, /* 0      */\n-/**/                  {{0x00000000, 0x00000000} }, /* 0      */\n-/**/                  {{0x00000000, 0x00000000} }, /* 0      */\n-/**/                  {{0x00000000, 0x3ee00000} }, /* 2**-17 */\n-/**/                  {{0x00000000, 0x3e800000} }, /* 2**-23 */\n-/**/                  {{0x00000000, 0x3e800000} }, /* 2**-23 */\n-/**/                  {{0x00000000, 0x3e300000} }, /* 2**-28 */\n-/**/                  {{0x00000000, 0x3e400000} }, /* 2**-27 */\n-/**/                  {{0x00000000, 0x3d900000} }, /* 2**-38 */\n-/**/                  {{0x00000000, 0x3d500000} }, /* 2**-42 */\n-/**/                  {{0x00000000, 0x3d800000} }, /* 2**-39 */\n-/**/                  {{0x00000000, 0x3d400000} }, /* 2**-43 */\n-/**/                  {{0x00000000, 0x3d000000} }, /* 2**-47 */\n-/**/                  {{0x00000000, 0x3d400000} }, /* 2**-43 */\n-/**/                  {{0x00000000, 0x3d000000} }, /* 2**-47 */\n-/**/                  {{0x00000000, 0x3cd00000} }, /* 2**-50 */\n-/**/                  {{0x00000000, 0x3c900000} }, /* 2**-54 */\n-/**/                  {{0x00000000, 0x3c600000} }, /* 2**-57 */\n-/**/                  {{0x00000000, 0x3c300000} }, /* 2**-60 */\n-/**/                  {{0x00000000, 0x3bf00000} }, /* 2**-64 */\n-/**/                  {{0x00000000, 0x3bc00000} }, /* 2**-67 */\n-/**/                  {{0x00000000, 0x3b800000} }, /* 2**-71 */\n-/**/                  {{0x00000000, 0x3b500000} }, /* 2**-74 */\n-/**/                  {{0x00000000, 0x3bb00000} }, /* 2**-68 */\n-/**/                  {{0x00000000, 0x3b800000} }, /* 2**-71 */\n-/**/                  {{0x00000000, 0x3b500000} }, /* 2**-74 */\n-/**/                  {{0x00000000, 0x3b200000} }, /* 2**-77 */\n-/**/                  {{0x00000000, 0x3b900000} }, /* 2**-70 */\n-/**/                  {{0x00000000, 0x3b600000} }, /* 2**-73 */\n-/**/                  {{0x00000000, 0x3b300000} }, /* 2**-76 */\n-/**/                  {{0x00000000, 0x3b100000} }, /* 2**-78 */\n-/**/                  {{0x00000000, 0x3ae00000} }, /* 2**-81 */\n-  };\n-  static const number\n-               nn[9]={                            /* n      */\n-/**/                  {{0x00000000, 0x00000000} }, /* 0      */\n-/**/                  {{0x00000000, 0x3ff00000} }, /* 1      */\n-/**/                  {{0x00000000, 0x40000000} }, /* 2      */\n-/**/                  {{0x00000000, 0x40080000} }, /* 3      */\n-/**/                  {{0x00000000, 0x40100000} }, /* 4      */\n-/**/                  {{0x00000000, 0x40140000} }, /* 5      */\n-/**/                  {{0x00000000, 0x40180000} }, /* 6      */\n-/**/                  {{0x00000000, 0x401c0000} }, /* 7      */\n-/**/                  {{0x00000000, 0x40200000} }, /* 8      */\n-  };\n-\n-#endif\n-#endif\n-\n-#endif"}, {"sha": "d9cb6a535c235c0b7a377c5d0a55585c3afd9dc4", "filename": "libgcc-math/dbl-64/mplog.c", "status": "removed", "additions": 0, "deletions": 72, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fmplog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fmplog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc-math%2Fdbl-64%2Fmplog.c?ref=5cd88d6857dffe4f10c834c773c300881ec20e32", "patch": "@@ -1,72 +0,0 @@\n-\n-/*\n- * IBM Accurate Mathematical Library\n- * written by International Business Machines Corp.\n- * Copyright (C) 2001 Free Software Foundation\n- *\n- * This program is free software; you can redistribute it and/or modify\n- * it under the terms of the GNU Lesser General Public License as published by\n- * the Free Software Foundation; either version 2.1 of the License, or\n- * (at your option) any later version.\n- *\n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Lesser General Public License for more details.\n- *\n- * You should have received a copy of the GNU Lesser General Public License\n- * along with this program; if not, write to the Free Software\n- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n- */\n-/************************************************************************/\n-/*                                                                      */\n-/*     MODULE_NAME:mplog.c                                              */\n-/*                                                                      */\n-/*     FUNCTIONS:  mplog                                                */\n-/*                                                                      */\n-/*     FILES NEEDED: endian.h mpa.h  mplog.h                            */\n-/*                    mpexp.c                                           */\n-/*                                                                      */\n-/* Multi-Precision logarithm function subroutine (for precision p >= 4, */\n-/* 2**(-1024) < x < 2**1024) and x is outside of the interval           */\n-/* [1-2**(-54),1+2**(-54)]. Upon entry, x should be set to the          */\n-/* multi-precision value of the input and y should be set into a multi- */\n-/* precision value of an approximation of log(x) with relative error    */\n-/* bound of at most 2**(-52). The routine improves the accuracy of y.   */\n-/*                                                                      */\n-/************************************************************************/\n-#include \"endian.h\"\n-#include \"mpa.h\"\n-\n-void __mpexp(mp_no *, mp_no *, int);\n-\n-void __mplog(mp_no *x, mp_no *y, int p) {\n-#include \"mplog.h\"\n-  int i,m;\n-#if 0\n-  int j,k,m1,m2,n;\n-  double a,b;\n-#endif\n-  static const int mp[33] = {0,0,0,0,0,1,1,2,2,2,2,3,3,3,3,3,3,3,3,\n-                             4,4,4,4,4,4,4,4,4,4,4,4,4,4};\n-  mp_no mpone = {0,{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,\n-                    0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,\n-                    0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}};\n-  mp_no mpt1,mpt2;\n-\n-  /* Choose m and initiate mpone */\n-  m = mp[p];  mpone.e = 1;  mpone.d[0]=mpone.d[1]=ONE;\n-\n-  /* Perform m newton iterations to solve for y: exp(y)-x=0.     */\n-  /* The iterations formula is:  y(n+1)=y(n)+(x*exp(-y(n))-1).   */\n-  __cpy(y,&mpt1,p);\n-  for (i=0; i<m; i++) {\n-    mpt1.d[0]=-mpt1.d[0];\n-    __mpexp(&mpt1,&mpt2,p);\n-    __mul(x,&mpt2,&mpt1,p);\n-    __sub(&mpt1,&mpone,&mpt2,p);\n-    __add(y,&mpt2,&mpt1,p);\n-    __cpy(&mpt1,y,p);\n-  }\n-  return;\n-}"}, {"sha": "336a8ecca44c9873d279bc3228eada20fbda3d0f", "filename": "libgcc-math/dbl-64/mplog.h", "status": "removed", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fmplog.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fmplog.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc-math%2Fdbl-64%2Fmplog.h?ref=5cd88d6857dffe4f10c834c773c300881ec20e32", "patch": "@@ -1,45 +0,0 @@\n-/*\n- * IBM Accurate Mathematical Library\n- * Written by International Business Machines Corp.\n- * Copyright (C) 2001 Free Software Foundation, Inc.\n- *\n- * This program is free software; you can redistribute it and/or modify\n- * it under the terms of the GNU Lesser General Public License as published by\n- * the Free Software Foundation; either version 2.1 of the License, or\n- * (at your option) any later version.\n- *\n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Lesser General Public License for more details.\n- *\n- * You should have received a copy of the GNU Lesser General Public License\n- * along with this program; if not, write to the Free Software\n- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n- */\n-\n-/******************************************************************/\n-/*                                                                */\n-/* MODULE_NAME:mplog.h                                            */\n-/*                                                                */\n-/* common data and variables prototype and definition             */\n-/******************************************************************/\n-\n-#ifndef MPLOG_H\n-#define MPLOG_H\n-\n-#ifdef BIG_ENDI\n-  static const number\n-/**/ one            = {{0x3ff00000, 0x00000000} }; /* 1      */\n-\n-#else\n-#ifdef LITTLE_ENDI\n-  static const number\n-/**/ one            = {{0x00000000, 0x3ff00000} }; /* 1      */\n-\n-#endif\n-#endif\n-\n-#define  ONE       one.d\n-\n-#endif"}, {"sha": "9945de30611e843eee584d6211e5c99313e46d12", "filename": "libgcc-math/dbl-64/mpsqrt.c", "status": "removed", "additions": 0, "deletions": 103, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fmpsqrt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fmpsqrt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc-math%2Fdbl-64%2Fmpsqrt.c?ref=5cd88d6857dffe4f10c834c773c300881ec20e32", "patch": "@@ -1,103 +0,0 @@\n-\n-/*\n- * IBM Accurate Mathematical Library\n- * written by International Business Machines Corp.\n- * Copyright (C) 2001 Free Software Foundation\n- *\n- * This program is free software; you can redistribute it and/or modify\n- * it under the terms of the GNU Lesser General Public License as published by\n- * the Free Software Foundation; either version 2.1 of the License, or\n- * (at your option) any later version.\n- *\n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Lesser General Public License for more details.\n- *\n- * You should have received a copy of the GNU Lesser General Public License\n- * along with this program; if not, write to the Free Software\n- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n- */\n-/****************************************************************************/\n-/*  MODULE_NAME:mpsqrt.c                                                    */\n-/*                                                                          */\n-/*  FUNCTION:mpsqrt                                                         */\n-/*           fastiroot                                                      */\n-/*                                                                          */\n-/* FILES NEEDED:endian.h mpa.h mpsqrt.h                                     */\n-/*              mpa.c                                                       */\n-/* Multi-Precision square root function subroutine for precision p >= 4.    */\n-/* The relative error is bounded by 3.501*r**(1-p), where r=2**24.          */\n-/*                                                                          */\n-/****************************************************************************/\n-#include \"endian.h\"\n-#include \"mpa.h\"\n-\n-/****************************************************************************/\n-/* Multi-Precision square root function subroutine for precision p >= 4.    */\n-/* The relative error is bounded by 3.501*r**(1-p), where r=2**24.          */\n-/* Routine receives two pointers to  Multi Precision numbers:               */\n-/* x (left argument) and y (next argument). Routine also receives precision */\n-/* p as integer. Routine computes sqrt(*x) and stores result in *y          */\n-/****************************************************************************/\n-\n-double fastiroot(double);\n-\n-void __mpsqrt(mp_no *x, mp_no *y, int p) {\n-#include \"mpsqrt.h\"\n-\n-  int i,m,ex,ey;\n-  double dx,dy;\n-  mp_no\n-    mphalf   = {0,{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,\n-                   0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,\n-                   0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}},\n-    mp3halfs = {0,{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,\n-                   0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,\n-                   0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}};\n-  mp_no mpxn,mpz,mpu,mpt1,mpt2;\n-\n-  /* Prepare multi-precision 1/2 and 3/2 */\n-  mphalf.e  =0;  mphalf.d[0]  =ONE;  mphalf.d[1]  =HALFRAD;\n-  mp3halfs.e=1;  mp3halfs.d[0]=ONE;  mp3halfs.d[1]=ONE;  mp3halfs.d[2]=HALFRAD;\n-\n-  ex=EX;      ey=EX/2;     __cpy(x,&mpxn,p);    mpxn.e -= (ey+ey);\n-  __mp_dbl(&mpxn,&dx,p);   dy=fastiroot(dx);    __dbl_mp(dy,&mpu,p);\n-  __mul(&mpxn,&mphalf,&mpz,p);\n-\n-  m=mp[p];\n-  for (i=0; i<m; i++) {\n-    __mul(&mpu,&mpu,&mpt1,p);\n-    __mul(&mpt1,&mpz,&mpt2,p);\n-    __sub(&mp3halfs,&mpt2,&mpt1,p);\n-    __mul(&mpu,&mpt1,&mpt2,p);\n-    __cpy(&mpt2,&mpu,p);\n-  }\n-  __mul(&mpxn,&mpu,y,p);  EY += ey;\n-\n-  return;\n-}\n-\n-/***********************************************************/\n-/* Compute a double precision approximation for 1/sqrt(x)  */\n-/* with the relative error bounded by 2**-51.              */\n-/***********************************************************/\n-double fastiroot(double x) {\n-  union {int i[2]; double d;} p,q;\n-  double y,z, t;\n-  int n;\n-  static const double c0 = 0.99674, c1 = -0.53380, c2 = 0.45472, c3 = -0.21553;\n-\n-  p.d = x;\n-  p.i[HIGH_HALF] = (p.i[HIGH_HALF] & 0x3FFFFFFF ) | 0x3FE00000 ;\n-  q.d = x;\n-  y = p.d;\n-  z = y -1.0;\n-  n = (q.i[HIGH_HALF] - p.i[HIGH_HALF])>>1;\n-  z = ((c3*z + c2)*z + c1)*z + c0;            /* 2**-7         */\n-  z = z*(1.5 - 0.5*y*z*z);                    /* 2**-14        */\n-  p.d = z*(1.5 - 0.5*y*z*z);                  /* 2**-28        */\n-  p.i[HIGH_HALF] -= n;\n-  t = x*p.d;\n-  return p.d*(1.5 - 0.5*p.d*t);\n-}"}, {"sha": "729d57af2ceaeee09c7b33770891e1a3c9e29cf3", "filename": "libgcc-math/dbl-64/mpsqrt.h", "status": "removed", "additions": 0, "deletions": 51, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fmpsqrt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fmpsqrt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc-math%2Fdbl-64%2Fmpsqrt.h?ref=5cd88d6857dffe4f10c834c773c300881ec20e32", "patch": "@@ -1,51 +0,0 @@\n-/*\n- * IBM Accurate Mathematical Library\n- * Written by International Business Machines Corp.\n- * Copyright (C) 2001 Free Software Foundation, Inc.\n- *\n- * This program is free software; you can redistribute it and/or modify\n- * it under the terms of the GNU Lesser General Public License as published by\n- * the Free Software Foundation; either version 2.1 of the License, or\n- * (at your option) any later version.\n- *\n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Lesser General Public License for more details.\n- *\n- * You should have received a copy of the GNU Lesser General Public License\n- * along with this program; if not, write to the Free Software\n- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n- */\n-\n-/******************************************************************/\n-/*                                                                */\n-/* MODULE_NAME:mpatan.h                                           */\n-/*                                                                */\n-/* common data and variables prototype and definition             */\n-/******************************************************************/\n-\n-#ifndef MPSQRT_H\n-#define MPSQRT_H\n-\n-#ifdef BIG_ENDI\n-  static const number\n-/**/ one            = {{0x3ff00000, 0x00000000} }, /* 1      */\n-/**/ halfrad        = {{0x41600000, 0x00000000} }; /* 2**23  */\n-\n-#else\n-#ifdef LITTLE_ENDI\n-  static const number\n-/**/ one            = {{0x00000000, 0x3ff00000} }, /* 1      */\n-/**/ halfrad        = {{0x00000000, 0x41600000} }; /* 2**23  */\n-\n-#endif\n-#endif\n-\n-#define  ONE       one.d\n-#define  HALFRAD   halfrad.d\n-\n-  static const int mp[33] = {0,0,0,0,1,2,2,2,2,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,\n-                             4,4,4,4,4,4,4,4,4};\n-\n-#endif"}, {"sha": "ed4c20b44e951933c55481aa4ab3bff180834aa6", "filename": "libgcc-math/dbl-64/mptan.c", "status": "removed", "additions": 0, "deletions": 60, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fmptan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fmptan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc-math%2Fdbl-64%2Fmptan.c?ref=5cd88d6857dffe4f10c834c773c300881ec20e32", "patch": "@@ -1,60 +0,0 @@\n-\n-/*\n- * IBM Accurate Mathematical Library\n- * written by International Business Machines Corp.\n- * Copyright (C) 2001 Free Software Foundation\n- *\n- * This program is free software; you can redistribute it and/or modify\n- * it under the terms of the GNU Lesser General Public License as published by\n- * the Free Software Foundation; either version 2.1 of the License, or\n- * (at your option) any later version.\n- *\n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Lesser General Public License for more details.\n- *\n- * You should have received a copy of the GNU Lesser General Public License\n- * along with this program; if not, write to the Free Software\n- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n- */\n-/**********************************************************************/\n-/* MODULE_NAME:mptan.c                                                */\n-/*                                                                    */\n-/* FUNCTION: mptan                                                    */\n-/*                                                                    */\n-/* FILES NEEDED: endian.h  mpa.h                                      */\n-/*               mpa.c  sincos32.c branred.c                          */\n-/*                                                                    */\n-/* Multi-Precision tan() function subroutine, for p=32.  It is based  */\n-/* on the routines mpranred() and c32(). mpranred() performs range    */\n-/* reduction of a double number x into a multiple precision number    */\n-/* y, such that y=x-n*pi/2, abs(y)<pi/4, n=0,+-1,+-2,....  c32()      */\n-/* computes both sin(y), cos(y).  tan(x) is either sin(y)/cos(y)      */\n-/* or -cos(y)/sin(y). The precision of the result is of about 559     */\n-/* significant bits.                                                  */\n-/*                                                                    */\n-/**********************************************************************/\n-#include \"endian.h\"\n-#include \"mpa.h\"\n-\n-int __mpranred(double, mp_no *, int);\n-void __c32(mp_no *, mp_no *, mp_no *, int);\n-\n-void __mptan(double x, mp_no *mpy, int p) {\n-\n-  static const double Mone = -1.0;\n-\n-  int n;\n-  mp_no mpw, mpc, mps;\n-\n-  n = __mpranred(x, &mpw, p) & 0x00000001; /* negative or positive result */\n-  __c32(&mpw, &mpc, &mps, p);              /* computing sin(x) and cos(x) */\n-  if (n)                     /* second or fourth quarter of unit circle */\n-  { __dvd(&mpc,&mps,mpy,p);\n-    mpy->d[0] *= Mone;\n-  }                          /* tan is negative in this area */\n-  else  __dvd(&mps,&mpc,mpy,p);\n-\n-  return;\n-}"}, {"sha": "a47f2b506abf054310c0813b9b340e52fcf68d3a", "filename": "libgcc-math/dbl-64/mydefs.h", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fmydefs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fmydefs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc-math%2Fdbl-64%2Fmydefs.h?ref=5cd88d6857dffe4f10c834c773c300881ec20e32", "patch": "@@ -1,38 +0,0 @@\n-/*\n- * IBM Accurate Mathematical Library\n- * Written by International Business Machines Corp.\n- * Copyright (C) 2001 Free Software Foundation, Inc.\n- *\n- * This program is free software; you can redistribute it and/or modify\n- * it under the terms of the GNU Lesser General Public License as published by\n- * the Free Software Foundation; either version 2.1 of the License, or\n- * (at your option) any later version.\n- *\n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Lesser General Public License for more details.\n- *\n- * You should have received a copy of the GNU Lesser General Public License\n- * along with this program; if not, write to the Free Software\n- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n- */\n-\n-/******************************************************************/\n-/*                                                                */\n-/* MODULE_NAME:mydefs.h                                           */\n-/*                                                                */\n-/* common data and definition                                     */\n-/******************************************************************/\n-\n-#ifndef MY_H\n-#define MY_H\n-\n-typedef int int4;\n-typedef union {int4 i[2]; double x;} mynumber;\n-\n-#define ABS(x)   (((x)>0)?(x):-(x))\n-#define max(x,y)  (((y)>(x))?(y):(x))\n-#define min(x,y)  (((y)<(x))?(y):(x))\n-\n-#endif"}, {"sha": "53c49c10f7cbc923c66edd98f9c3e9d4d15b97d6", "filename": "libgcc-math/dbl-64/powtwo.tbl", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fpowtwo.tbl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fpowtwo.tbl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc-math%2Fdbl-64%2Fpowtwo.tbl?ref=5cd88d6857dffe4f10c834c773c300881ec20e32", "patch": "@@ -1,32 +0,0 @@\n-/*\n- * IBM Accurate Mathematical Library\n- * Written by International Business Machines Corp.\n- * Copyright (C) 2001 Free Software Foundation, Inc.\n- *\n- * This program is free software; you can redistribute it and/or modify\n- * it under the terms of the GNU Lesser General Public License as published by\n- * the Free Software Foundation; either version 2.1 of the License, or\n- * (at your option) any later version.\n- *\n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Lesser General Public License for more details.\n- *\n- * You should have received a copy of the GNU Lesser General Public License\n- * along with this program; if not, write to the Free Software\n- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n- */\n-\n-/****************************************************************/\n-/* TABLES FOR THE upow() FUNCTION                               */\n-/****************************************************************/\n-\n-\n-\n-static const double powtwo[] = { 1.0,  2.0,  4.0, \n-         8.0,          16.0,          32.0,          64.0,         128.0, \n-       256.0,         512.0,        1024.0,        2048.0,        4096.0, \n-      8192.0,       16384.0,       32768.0,       65536.0,      131072.0, \n-    262144.0,      524288.0,     1048576.0,     2097152.0,     4194304.0, \n-   8388608.0,    16777216.0,    33554432.0,    67108864.0,   134217728.0 }; "}, {"sha": "066e588ce7e4372c5ede785f3c3e28794e6ddde6", "filename": "libgcc-math/dbl-64/root.tbl", "status": "removed", "additions": 0, "deletions": 58, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Froot.tbl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Froot.tbl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc-math%2Fdbl-64%2Froot.tbl?ref=5cd88d6857dffe4f10c834c773c300881ec20e32", "patch": "@@ -1,58 +0,0 @@\n-/*\n- * IBM Accurate Mathematical Library\n- * Written by International Business Machines Corp.\n- * Copyright (C) 2001 Free Software Foundation, Inc.\n- *\n- * This program is free software; you can redistribute it and/or modify\n- * it under the terms of the GNU Lesser General Public License as published by\n- * the Free Software Foundation; either version 2.1 of the License, or\n- * (at your option) any later version.\n- *\n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Lesser General Public License for more details.\n- *\n- * You should have received a copy of the GNU Lesser General Public License\n- * along with this program; if not, write to the Free Software\n- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n- */\n-\n-/****************************************************************/\n-/* TABLES FOR THE usqrt() FUNCTION                              */\n-/****************************************************************/\n-\n-\n-static const double inroot[128] = {\n-  1.40872145012100,  1.39792649065766,  1.38737595123859,  1.37706074531819,\n-  1.36697225234682,  1.35710228748795,  1.34744307370643,  1.33798721601135,\n-  1.32872767765984,  1.31965775814772,  1.31077107283046,  1.30206153403386,\n-  1.29352333352711,  1.28515092624400,  1.27693901514820,  1.26888253714903,\n-  1.26097664998256,  1.25321671998073,  1.24559831065844,  1.23811717205462,\n-  1.23076923076923,  1.22355058064300,  1.21645747403153,  1.20948631362953,\n-  1.20263364480453,  1.19589614840310,  1.18927063399547,  1.18275403352732,\n-  1.17634339535009,  1.17003587860341,  1.16382874792529,  1.15771936846787,\n-  1.15170520119791,  1.14578379846309,  1.13995279980655,  1.13420992801334,\n-  1.12855298537376,  1.12297985014975,  1.11748847323133,  1.11207687497107,\n-  1.10674314218572,  1.10148542531442,  1.09630193572405,  1.09119094315276,\n-  1.08615077328341,  1.08117980543918,  1.07627647039410,  1.07143924829188,\n-  1.06666666666667,  1.06195729855996,  1.05730976072814,  1.05272271193563,\n-  1.04819485132867,  1.04372491688551,  1.03931168393861,  1.03495396376504,\n-  1.03065060224133,  1.02640047855933,  1.02220250399990,  1.01805562076124,\n-  1.01395880083916,  1.00991104495649,  1.00591138153909,  1.00195886573624,\n-  0.99611649018350,  0.98848330114434,  0.98102294317595,  0.97372899112030,\n-  0.96659534932828,  0.95961623024651,  0.95278613468066,  0.94609983358253,\n-  0.93955235122353,  0.93313894963169,  0.92685511418159,  0.92069654023750,\n-  0.91465912076005,  0.90873893479530,  0.90293223677296,  0.89723544654727,\n-  0.89164514012056,  0.88615804099474,  0.88077101210109,  0.87548104826333,\n-  0.87028526915267,  0.86518091269740,  0.86016532891275,  0.85523597411976,\n-  0.85039040552437,  0.84562627613070,  0.84094132996422,  0.83633339758291,\n-  0.83180039185606,  0.82734030399203,  0.82295119979782,  0.81863121615464,\n-  0.81437855769486,  0.81019149366693,  0.80606835497581,  0.80200753138734,\n-  0.79800746888611,  0.79406666717674,  0.79018367731967,  0.78635709949278,\n-  0.78258558087123,  0.77886781361798,  0.77520253297841,  0.77158851547266,\n-  0.76802457717971,  0.76450957210799,  0.76104239064719,  0.75762195809661,\n-  0.75424723326565,  0.75091720714229,  0.74763090162560,  0.74438736831878,\n-  0.74118568737933,  0.73802496642311,  0.73490433947940,  0.73182296599416,\n-  0.72878002987884,  0.72577473860242,  0.72280632232420,  0.71987403306536,\n-  0.71697714391715,  0.71411494828392,  0.71128675915902,  0.70849190843208 };"}, {"sha": "439bccb29e465c0e182d41f60d31d3d996d18c87", "filename": "libgcc-math/dbl-64/s_atan.c", "status": "removed", "additions": 0, "deletions": 229, "changes": 229, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fs_atan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fs_atan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc-math%2Fdbl-64%2Fs_atan.c?ref=5cd88d6857dffe4f10c834c773c300881ec20e32", "patch": "@@ -1,229 +0,0 @@\n-/*\n- * IBM Accurate Mathematical Library\n- * written by International Business Machines Corp.\n- * Copyright (C) 2001 Free Software Foundation\n- *\n- * This program is free software; you can redistribute it and/or modify\n- * it under the terms of the GNU Lesser General Public License as published by\n- * the Free Software Foundation; either version 2.1 of the License, or\n- * (at your option) any later version.\n- *\n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Lesser General Public License for more details.\n- *\n- * You should have received a copy of the GNU Lesser General Public License\n- * along with this program; if not, write to the Free Software\n- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n- */\n-/************************************************************************/\n-/*  MODULE_NAME: atnat.c                                                */\n-/*                                                                      */\n-/*  FUNCTIONS:  uatan                                                   */\n-/*              atanMp                                                  */\n-/*              signArctan                                              */\n-/*                                                                      */\n-/*                                                                      */\n-/*  FILES NEEDED: dla.h endian.h mpa.h mydefs.h atnat.h                 */\n-/*                mpatan.c mpatan2.c mpsqrt.c                           */\n-/*                uatan.tbl                                             */\n-/*                                                                      */\n-/* An ultimate atan() routine. Given an IEEE double machine number x    */\n-/* it computes the correctly rounded (to nearest) value of atan(x).     */\n-/*                                                                      */\n-/* Assumption: Machine arithmetic operations are performed in           */\n-/* round to nearest mode of IEEE 754 standard.                          */\n-/*                                                                      */\n-/************************************************************************/\n-\n-#include \"dla.h\"\n-#include \"mpa.h\"\n-#include \"MathLib.h\"\n-#include \"uatan.tbl\"\n-#include \"atnat.h\"\n-\n-void __mpatan(mp_no *,mp_no *,int);          /* see definition in mpatan.c */\n-static double atanMp(double,const int[]);\n-double __signArctan(double,double);\n-/* An ultimate atan() routine. Given an IEEE double machine number x,    */\n-/* routine computes the correctly rounded (to nearest) value of atan(x). */\n-double atan(double x) {\n-\n-\n-  double cor,s1,ss1,s2,ss2,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,u,u2,u3,\n-         v,vv,w,ww,y,yy,z,zz;\n-#if 0\n-  double y1,y2;\n-#endif\n-  int i,ux,dx;\n-#if 0\n-  int p;\n-#endif\n-  static const int pr[M]={6,8,10,32};\n-  number num;\n-#if 0\n-  mp_no mpt1,mpx,mpy,mpy1,mpy2,mperr;\n-#endif\n-\n-  num.d = x;  ux = num.i[HIGH_HALF];  dx = num.i[LOW_HALF];\n-\n-  /* x=NaN */\n-  if (((ux&0x7ff00000)==0x7ff00000) && (((ux&0x000fffff)|dx)!=0x00000000))\n-    return x+x;\n-\n-  /* Regular values of x, including denormals +-0 and +-INF */\n-  u = (x<ZERO) ? -x : x;\n-  if (u<C) {\n-    if (u<B) {\n-      if (u<A) {                                           /* u < A */\n-         return x; }\n-      else {                                               /* A <= u < B */\n-        v=x*x;  yy=x*v*(d3.d+v*(d5.d+v*(d7.d+v*(d9.d+v*(d11.d+v*d13.d)))));\n-        if ((y=x+(yy-U1*x)) == x+(yy+U1*x))  return y;\n-\n-        EMULV(x,x,v,vv,t1,t2,t3,t4,t5)                       /* v+vv=x^2 */\n-        s1=v*(f11.d+v*(f13.d+v*(f15.d+v*(f17.d+v*f19.d))));\n-        ADD2(f9.d,ff9.d,s1,ZERO,s2,ss2,t1,t2)\n-        MUL2(v,vv,s2,ss2,s1,ss1,t1,t2,t3,t4,t5,t6,t7,t8)\n-        ADD2(f7.d,ff7.d,s1,ss1,s2,ss2,t1,t2)\n-        MUL2(v,vv,s2,ss2,s1,ss1,t1,t2,t3,t4,t5,t6,t7,t8)\n-        ADD2(f5.d,ff5.d,s1,ss1,s2,ss2,t1,t2)\n-        MUL2(v,vv,s2,ss2,s1,ss1,t1,t2,t3,t4,t5,t6,t7,t8)\n-        ADD2(f3.d,ff3.d,s1,ss1,s2,ss2,t1,t2)\n-        MUL2(v,vv,s2,ss2,s1,ss1,t1,t2,t3,t4,t5,t6,t7,t8)\n-        MUL2(x,ZERO,s1,ss1,s2,ss2,t1,t2,t3,t4,t5,t6,t7,t8)\n-        ADD2(x,ZERO,s2,ss2,s1,ss1,t1,t2)\n-        if ((y=s1+(ss1-U5*s1)) == s1+(ss1+U5*s1))  return y;\n-\n-        return atanMp(x,pr);\n-      } }\n-    else {  /* B <= u < C */\n-      i=(TWO52+TWO8*u)-TWO52;  i-=16;\n-      z=u-cij[i][0].d;\n-      yy=z*(cij[i][2].d+z*(cij[i][3].d+z*(cij[i][4].d+\n-                        z*(cij[i][5].d+z* cij[i][6].d))));\n-      t1=cij[i][1].d;\n-      if (i<112) {\n-        if (i<48)  u2=U21;    /* u < 1/4        */\n-        else       u2=U22; }  /* 1/4 <= u < 1/2 */\n-      else {\n-        if (i<176) u2=U23;    /* 1/2 <= u < 3/4 */\n-        else       u2=U24; }  /* 3/4 <= u <= 1  */\n-      if ((y=t1+(yy-u2*t1)) == t1+(yy+u2*t1))  return __signArctan(x,y);\n-\n-      z=u-hij[i][0].d;\n-      s1=z*(hij[i][11].d+z*(hij[i][12].d+z*(hij[i][13].d+\n-         z*(hij[i][14].d+z* hij[i][15].d))));\n-      ADD2(hij[i][9].d,hij[i][10].d,s1,ZERO,s2,ss2,t1,t2)\n-      MUL2(z,ZERO,s2,ss2,s1,ss1,t1,t2,t3,t4,t5,t6,t7,t8)\n-      ADD2(hij[i][7].d,hij[i][8].d,s1,ss1,s2,ss2,t1,t2)\n-      MUL2(z,ZERO,s2,ss2,s1,ss1,t1,t2,t3,t4,t5,t6,t7,t8)\n-      ADD2(hij[i][5].d,hij[i][6].d,s1,ss1,s2,ss2,t1,t2)\n-      MUL2(z,ZERO,s2,ss2,s1,ss1,t1,t2,t3,t4,t5,t6,t7,t8)\n-      ADD2(hij[i][3].d,hij[i][4].d,s1,ss1,s2,ss2,t1,t2)\n-      MUL2(z,ZERO,s2,ss2,s1,ss1,t1,t2,t3,t4,t5,t6,t7,t8)\n-      ADD2(hij[i][1].d,hij[i][2].d,s1,ss1,s2,ss2,t1,t2)\n-      if ((y=s2+(ss2-U6*s2)) == s2+(ss2+U6*s2))  return __signArctan(x,y);\n-\n-      return atanMp(x,pr);\n-    }\n-  }\n-  else {\n-    if (u<D) { /* C <= u < D */\n-      w=ONE/u;\n-      EMULV(w,u,t1,t2,t3,t4,t5,t6,t7)\n-      ww=w*((ONE-t1)-t2);\n-      i=(TWO52+TWO8*w)-TWO52;  i-=16;\n-      z=(w-cij[i][0].d)+ww;\n-      yy=HPI1-z*(cij[i][2].d+z*(cij[i][3].d+z*(cij[i][4].d+\n-                             z*(cij[i][5].d+z* cij[i][6].d))));\n-      t1=HPI-cij[i][1].d;\n-      if (i<112)  u3=U31;  /* w <  1/2 */\n-      else        u3=U32;  /* w >= 1/2 */\n-      if ((y=t1+(yy-u3)) == t1+(yy+u3))  return __signArctan(x,y);\n-\n-      DIV2(ONE,ZERO,u,ZERO,w,ww,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10)\n-      t1=w-hij[i][0].d;\n-      EADD(t1,ww,z,zz)\n-      s1=z*(hij[i][11].d+z*(hij[i][12].d+z*(hij[i][13].d+\n-         z*(hij[i][14].d+z* hij[i][15].d))));\n-      ADD2(hij[i][9].d,hij[i][10].d,s1,ZERO,s2,ss2,t1,t2)\n-      MUL2(z,zz,s2,ss2,s1,ss1,t1,t2,t3,t4,t5,t6,t7,t8)\n-      ADD2(hij[i][7].d,hij[i][8].d,s1,ss1,s2,ss2,t1,t2)\n-      MUL2(z,zz,s2,ss2,s1,ss1,t1,t2,t3,t4,t5,t6,t7,t8)\n-      ADD2(hij[i][5].d,hij[i][6].d,s1,ss1,s2,ss2,t1,t2)\n-      MUL2(z,zz,s2,ss2,s1,ss1,t1,t2,t3,t4,t5,t6,t7,t8)\n-      ADD2(hij[i][3].d,hij[i][4].d,s1,ss1,s2,ss2,t1,t2)\n-      MUL2(z,zz,s2,ss2,s1,ss1,t1,t2,t3,t4,t5,t6,t7,t8)\n-      ADD2(hij[i][1].d,hij[i][2].d,s1,ss1,s2,ss2,t1,t2)\n-      SUB2(HPI,HPI1,s2,ss2,s1,ss1,t1,t2)\n-      if ((y=s1+(ss1-U7)) == s1+(ss1+U7))  return __signArctan(x,y);\n-\n-    return atanMp(x,pr);\n-    }\n-    else {\n-      if (u<E) { /* D <= u < E */\n-        w=ONE/u;   v=w*w;\n-        EMULV(w,u,t1,t2,t3,t4,t5,t6,t7)\n-        yy=w*v*(d3.d+v*(d5.d+v*(d7.d+v*(d9.d+v*(d11.d+v*d13.d)))));\n-        ww=w*((ONE-t1)-t2);\n-        ESUB(HPI,w,t3,cor)\n-        yy=((HPI1+cor)-ww)-yy;\n-        if ((y=t3+(yy-U4)) == t3+(yy+U4))  return __signArctan(x,y);\n-\n-        DIV2(ONE,ZERO,u,ZERO,w,ww,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10)\n-        MUL2(w,ww,w,ww,v,vv,t1,t2,t3,t4,t5,t6,t7,t8)\n-        s1=v*(f11.d+v*(f13.d+v*(f15.d+v*(f17.d+v*f19.d))));\n-        ADD2(f9.d,ff9.d,s1,ZERO,s2,ss2,t1,t2)\n-        MUL2(v,vv,s2,ss2,s1,ss1,t1,t2,t3,t4,t5,t6,t7,t8)\n-        ADD2(f7.d,ff7.d,s1,ss1,s2,ss2,t1,t2)\n-        MUL2(v,vv,s2,ss2,s1,ss1,t1,t2,t3,t4,t5,t6,t7,t8)\n-        ADD2(f5.d,ff5.d,s1,ss1,s2,ss2,t1,t2)\n-        MUL2(v,vv,s2,ss2,s1,ss1,t1,t2,t3,t4,t5,t6,t7,t8)\n-        ADD2(f3.d,ff3.d,s1,ss1,s2,ss2,t1,t2)\n-        MUL2(v,vv,s2,ss2,s1,ss1,t1,t2,t3,t4,t5,t6,t7,t8)\n-        MUL2(w,ww,s1,ss1,s2,ss2,t1,t2,t3,t4,t5,t6,t7,t8)\n-        ADD2(w,ww,s2,ss2,s1,ss1,t1,t2)\n-        SUB2(HPI,HPI1,s1,ss1,s2,ss2,t1,t2)\n-        if ((y=s2+(ss2-U8)) == s2+(ss2+U8))  return __signArctan(x,y);\n-\n-      return atanMp(x,pr);\n-      }\n-      else {\n-        /* u >= E */\n-        if (x>0) return  HPI;\n-        else     return MHPI; }\n-    }\n-  }\n-\n-}\n-\n-\n-  /* Fix the sign of y and return */\n-double  __signArctan(double x,double y){\n-\n-    if (x<ZERO) return -y;\n-    else        return  y;\n-}\n-\n- /* Final stages. Compute atan(x) by multiple precision arithmetic */\n-static double atanMp(double x,const int pr[]){\n-  mp_no mpx,mpy,mpy2,mperr,mpt1,mpy1;\n-  double y1,y2;\n-  int i,p;\n-\n-for (i=0; i<M; i++) {\n-    p = pr[i];\n-    __dbl_mp(x,&mpx,p);          __mpatan(&mpx,&mpy,p);\n-    __dbl_mp(u9[i].d,&mpt1,p);   __mul(&mpy,&mpt1,&mperr,p);\n-    __add(&mpy,&mperr,&mpy1,p);  __sub(&mpy,&mperr,&mpy2,p);\n-    __mp_dbl(&mpy1,&y1,p);       __mp_dbl(&mpy2,&y2,p);\n-    if (y1==y2)   return y1;\n-  }\n-  return y1; /*if unpossible to do exact computing */\n-}\n-\n-#ifdef NO_LONG_DOUBLE\n-weak_alias (atan, atanl)\n-#endif"}, {"sha": "1fe135a7c3589344e0847b4d9aa25bff5e37f50e", "filename": "libgcc-math/dbl-64/s_floor.c", "status": "removed", "additions": 0, "deletions": 85, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fs_floor.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fs_floor.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc-math%2Fdbl-64%2Fs_floor.c?ref=5cd88d6857dffe4f10c834c773c300881ec20e32", "patch": "@@ -1,85 +0,0 @@\n-/* @(#)s_floor.c 5.1 93/09/24 */\n-/*\n- * ====================================================\n- * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n- *\n- * Developed at SunPro, a Sun Microsystems, Inc. business.\n- * Permission to use, copy, modify, and distribute this\n- * software is freely granted, provided that this notice\n- * is preserved.\n- * ====================================================\n- */\n-\n-#if defined(LIBM_SCCS) && !defined(lint)\n-static char rcsid[] = \"$NetBSD: s_floor.c,v 1.8 1995/05/10 20:47:20 jtc Exp $\";\n-#endif\n-\n-/*\n- * floor(x)\n- * Return x rounded toward -inf to integral value\n- * Method:\n- *\tBit twiddling.\n- * Exception:\n- *\tInexact flag raised if x not equal to floor(x).\n- */\n-\n-#include \"math_private.h\"\n-\n-#ifdef __STDC__\n-static const double huge = 1.0e300;\n-#else\n-static double huge = 1.0e300;\n-#endif\n-\n-#ifdef __STDC__\n-\tdouble __floor(double x)\n-#else\n-\tdouble __floor(x)\n-\tdouble x;\n-#endif\n-{\n-\tint32_t i0,i1,j0;\n-\tuint32_t i,j;\n-\tEXTRACT_WORDS(i0,i1,x);\n-\tj0 = ((i0>>20)&0x7ff)-0x3ff;\n-\tif(j0<20) {\n-\t    if(j0<0) { \t/* raise inexact if x != 0 */\n-\t\tif(huge+x>0.0) {/* return 0*sign(x) if |x|<1 */\n-\t\t    if(i0>=0) {i0=i1=0;}\n-\t\t    else if(((i0&0x7fffffff)|i1)!=0)\n-\t\t\t{ i0=0xbff00000;i1=0;}\n-\t\t}\n-\t    } else {\n-\t\ti = (0x000fffff)>>j0;\n-\t\tif(((i0&i)|i1)==0) return x; /* x is integral */\n-\t\tif(huge+x>0.0) {\t/* raise inexact flag */\n-\t\t    if(i0<0) i0 += (0x00100000)>>j0;\n-\t\t    i0 &= (~i); i1=0;\n-\t\t}\n-\t    }\n-\t} else if (j0>51) {\n-\t    if(j0==0x400) return x+x;\t/* inf or NaN */\n-\t    else return x;\t\t/* x is integral */\n-\t} else {\n-\t    i = ((uint32_t)(0xffffffff))>>(j0-20);\n-\t    if((i1&i)==0) return x;\t/* x is integral */\n-\t    if(huge+x>0.0) { \t\t/* raise inexact flag */\n-\t\tif(i0<0) {\n-\t\t    if(j0==20) i0+=1;\n-\t\t    else {\n-\t\t\tj = i1+(1<<(52-j0));\n-\t\t\tif(j<i1) i0 +=1 ; \t/* got a carry */\n-\t\t\ti1=j;\n-\t\t    }\n-\t\t}\n-\t\ti1 &= (~i);\n-\t    }\n-\t}\n-\tINSERT_WORDS(x,i0,i1);\n-\treturn x;\n-}\n-weak_alias (__floor, floor)\n-#ifdef NO_LONG_DOUBLE\n-strong_alias (__floor, __floorl)\n-weak_alias (__floor, floorl)\n-#endif"}, {"sha": "4e84790401a4c01d854a6012139a2675f118e0fa", "filename": "libgcc-math/dbl-64/s_isinf.c", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fs_isinf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fs_isinf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc-math%2Fdbl-64%2Fs_isinf.c?ref=5cd88d6857dffe4f10c834c773c300881ec20e32", "patch": "@@ -1,32 +0,0 @@\n-/*\n- * Written by J.T. Conklin <jtc@netbsd.org>.\n- * Changed to return -1 for -Inf by Ulrich Drepper <drepper@cygnus.com>.\n- * Public domain.\n- */\n-\n-#if defined(LIBM_SCCS) && !defined(lint)\n-static char rcsid[] = \"$NetBSD: s_isinf.c,v 1.3 1995/05/11 23:20:14 jtc Exp $\";\n-#endif\n-\n-/*\n- * isinf(x) returns 1 is x is inf, -1 if x is -inf, else 0;\n- * no branching!\n- */\n-\n-#include \"math_private.h\"\n-\n-int\n-__isinf (double x)\n-{\n-\tint32_t hx,lx;\n-\tEXTRACT_WORDS(hx,lx,x);\n-\tlx |= (hx & 0x7fffffff) ^ 0x7ff00000;\n-\tlx |= -lx;\n-\treturn ~(lx >> 31) & (hx >> 30);\n-}\n-hidden_def (__isinf)\n-weak_alias (__isinf, isinf)\n-#ifdef NO_LONG_DOUBLE\n-strong_alias (__isinf, __isinfl)\n-weak_alias (__isinf, isinfl)\n-#endif"}, {"sha": "6ad68f9b9d6b4503f234a693a47b43f04cac7e9c", "filename": "libgcc-math/dbl-64/s_scalbn.c", "status": "removed", "additions": 0, "deletions": 69, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fs_scalbn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fs_scalbn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc-math%2Fdbl-64%2Fs_scalbn.c?ref=5cd88d6857dffe4f10c834c773c300881ec20e32", "patch": "@@ -1,69 +0,0 @@\n-/* @(#)s_scalbn.c 5.1 93/09/24 */\n-/*\n- * ====================================================\n- * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n- *\n- * Developed at SunPro, a Sun Microsystems, Inc. business.\n- * Permission to use, copy, modify, and distribute this\n- * software is freely granted, provided that this notice\n- * is preserved.\n- * ====================================================\n- */\n-\n-#if defined(LIBM_SCCS) && !defined(lint)\n-static char rcsid[] = \"$NetBSD: s_scalbn.c,v 1.8 1995/05/10 20:48:08 jtc Exp $\";\n-#endif\n-\n-/*\n- * scalbn (double x, int n)\n- * scalbn(x,n) returns x* 2**n  computed by  exponent\n- * manipulation rather than by actually performing an\n- * exponentiation or a multiplication.\n- */\n-\n-#include \"math_private.h\"\n-\n-#ifdef __STDC__\n-static const double\n-#else\n-static double\n-#endif\n-two54   =  1.80143985094819840000e+16, /* 0x43500000, 0x00000000 */\n-twom54  =  5.55111512312578270212e-17, /* 0x3C900000, 0x00000000 */\n-huge   = 1.0e+300,\n-tiny   = 1.0e-300;\n-\n-#ifdef __STDC__\n-\tdouble __scalbn (double x, int n)\n-#else\n-\tdouble __scalbn (x,n)\n-\tdouble x; int n;\n-#endif\n-{\n-\tint32_t k,hx,lx;\n-\tEXTRACT_WORDS(hx,lx,x);\n-        k = (hx&0x7ff00000)>>20;\t\t/* extract exponent */\n-        if (k==0) {\t\t\t\t/* 0 or subnormal x */\n-            if ((lx|(hx&0x7fffffff))==0) return x; /* +-0 */\n-\t    x *= two54;\n-\t    GET_HIGH_WORD(hx,x);\n-\t    k = ((hx&0x7ff00000)>>20) - 54;\n-\t    }\n-        if (k==0x7ff) return x+x;\t\t/* NaN or Inf */\n-        k = k+n;\n-        if (n> 50000 || k >  0x7fe)\n-\t  return huge*__builtin_copysign(huge,x); /* overflow  */\n-\tif (n< -50000) return tiny*__builtin_copysign(tiny,x); /*underflow*/\n-        if (k > 0) \t\t\t\t/* normal result */\n-\t    {SET_HIGH_WORD(x,(hx&0x800fffff)|(k<<20)); return x;}\n-        if (k <= -54)\n-\t  return tiny*__builtin_copysign(tiny,x); \t/*underflow*/\n-        k += 54;\t\t\t\t/* subnormal result */\n-\tSET_HIGH_WORD(x,(hx&0x800fffff)|(k<<20));\n-        return x*twom54;\n-}\n-weak_alias (__scalbn, scalbn)\n-#ifdef NO_LONG_DOUBLE\n-strong_alias (__scalbn, __scalbnl)\n-weak_alias (__scalbn, scalbnl)\n-#endif"}, {"sha": "86e1a6d12169f83f9aadc138940071c2a0aaf752", "filename": "libgcc-math/dbl-64/s_sin.c", "status": "removed", "additions": 0, "deletions": 1129, "changes": 1129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fs_sin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fs_sin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc-math%2Fdbl-64%2Fs_sin.c?ref=5cd88d6857dffe4f10c834c773c300881ec20e32", "patch": "@@ -1,1129 +0,0 @@\n-/*\n- * IBM Accurate Mathematical Library\n- * written by International Business Machines Corp.\n- * Copyright (C) 2001 Free Software Foundation\n- *\n- * This program is free software; you can redistribute it and/or modify\n- * it under the terms of the GNU Lesser General Public License as published by\n- * the Free Software Foundation; either version 2.1 of the License, or\n- * (at your option) any later version.\n- *\n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Lesser General Public License for more details.\n- *\n- * You should have received a copy of the GNU  Lesser General Public License\n- * along with this program; if not, write to the Free Software\n- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n- */\n-/****************************************************************************/\n-/*                                                                          */\n-/* MODULE_NAME:usncs.c                                                      */\n-/*                                                                          */\n-/* FUNCTIONS: usin                                                          */\n-/*            ucos                                                          */\n-/*            slow                                                          */\n-/*            slow1                                                         */\n-/*            slow2                                                         */\n-/*            sloww                                                         */\n-/*            sloww1                                                        */\n-/*            sloww2                                                        */\n-/*            bsloww                                                        */\n-/*            bsloww1                                                       */\n-/*            bsloww2                                                       */\n-/*            cslow2                                                        */\n-/*            csloww                                                        */\n-/*            csloww1                                                       */\n-/*            csloww2                                                       */\n-/* FILES NEEDED: dla.h endian.h mpa.h mydefs.h  usncs.h                     */\n-/*               branred.c sincos32.c dosincos.c mpa.c                      */\n-/*               sincos.tbl                                                 */\n-/*                                                                          */\n-/* An ultimate sin and  routine. Given an IEEE double machine number x       */\n-/* it computes the correctly rounded (to nearest) value of sin(x) or cos(x) */\n-/* Assumption: Machine arithmetic operations are performed in               */\n-/* round to nearest mode of IEEE 754 standard.                              */\n-/*                                                                          */\n-/****************************************************************************/\n-\n-\n-#include \"endian.h\"\n-#include \"mydefs.h\"\n-#include \"usncs.h\"\n-#include \"MathLib.h\"\n-#include \"sincos.tbl\"\n-#include \"math_private.h\"\n-\n-static const double\n-          sn3 = -1.66666666666664880952546298448555E-01,\n-          sn5 =  8.33333214285722277379541354343671E-03,\n-          cs2 =  4.99999999999999999999950396842453E-01,\n-          cs4 = -4.16666666666664434524222570944589E-02,\n-          cs6 =  1.38888874007937613028114285595617E-03;\n-\n-void __dubsin(double x, double dx, double w[]);\n-void __docos(double x, double dx, double w[]);\n-double __mpsin(double x, double dx);\n-double __mpcos(double x, double dx);\n-double __mpsin1(double x);\n-double __mpcos1(double x);\n-static double slow(double x);\n-static double slow1(double x);\n-static double slow2(double x);\n-static double sloww(double x, double dx, double orig);\n-static double sloww1(double x, double dx, double orig);\n-static double sloww2(double x, double dx, double orig, int n);\n-static double bsloww(double x, double dx, double orig, int n);\n-static double bsloww1(double x, double dx, double orig, int n);\n-static double bsloww2(double x, double dx, double orig, int n);\n-int __branred(double x, double *a, double *aa);\n-static double cslow2(double x);\n-static double csloww(double x, double dx, double orig);\n-static double csloww1(double x, double dx, double orig);\n-static double csloww2(double x, double dx, double orig, int n);\n-/*******************************************************************/\n-/* An ultimate sin routine. Given an IEEE double machine number x   */\n-/* it computes the correctly rounded (to nearest) value of sin(x)  */\n-/*******************************************************************/\n-double __sin(double x){\n-\tdouble xx,res,t,cor,y,s,c,sn,ssn,cs,ccs,xn,a,da,db,eps,xn1,xn2;\n-#if 0\n-\tdouble w[2];\n-#endif\n-\tmynumber u,v;\n-\tint4 k,m,n;\n-#if 0\n-\tint4 nn;\n-#endif\n-\n-\tu.x = x;\n-\tm = u.i[HIGH_HALF];\n-\tk = 0x7fffffff&m;              /* no sign           */\n-\tif (k < 0x3e500000)            /* if x->0 =>sin(x)=x */\n-\t return x;\n- /*---------------------------- 2^-26 < |x|< 0.25 ----------------------*/\n-\telse  if (k < 0x3fd00000){\n-\t  xx = x*x;\n-\t  /*Taylor series */\n-\t  t = ((((s5.x*xx + s4.x)*xx + s3.x)*xx + s2.x)*xx + s1.x)*(xx*x);\n-\t  res = x+t;\n-\t  cor = (x-res)+t;\n-\t  return (res == res + 1.07*cor)? res : slow(x);\n-\t}    /*  else  if (k < 0x3fd00000)    */\n-/*---------------------------- 0.25<|x|< 0.855469---------------------- */\n-\telse if (k < 0x3feb6000)  {\n-\t  u.x=(m>0)?big.x+x:big.x-x;\n-\t  y=(m>0)?x-(u.x-big.x):x+(u.x-big.x);\n-\t  xx=y*y;\n-\t  s = y + y*xx*(sn3 +xx*sn5);\n-\t  c = xx*(cs2 +xx*(cs4 + xx*cs6));\n-\t  k=u.i[LOW_HALF]<<2;\n-\t  sn=(m>0)?sincos.x[k]:-sincos.x[k];\n-\t  ssn=(m>0)?sincos.x[k+1]:-sincos.x[k+1];\n-\t  cs=sincos.x[k+2];\n-\t  ccs=sincos.x[k+3];\n-\t  cor=(ssn+s*ccs-sn*c)+cs*s;\n-\t  res=sn+cor;\n-\t  cor=(sn-res)+cor;\n-\t  return (res==res+1.025*cor)? res : slow1(x);\n-\t}    /*   else  if (k < 0x3feb6000)    */\n-\n-/*----------------------- 0.855469  <|x|<2.426265  ----------------------*/\n-\telse if (k <  0x400368fd ) {\n-\n-\t  y = (m>0)? hp0.x-x:hp0.x+x;\n-\t  if (y>=0) {\n-\t    u.x = big.x+y;\n-\t    y = (y-(u.x-big.x))+hp1.x;\n-\t  }\n-\t  else {\n-\t    u.x = big.x-y;\n-\t    y = (-hp1.x) - (y+(u.x-big.x));\n-\t  }\n-\t  xx=y*y;\n-\t  s = y + y*xx*(sn3 +xx*sn5);\n-\t  c = xx*(cs2 +xx*(cs4 + xx*cs6));\n-\t  k=u.i[LOW_HALF]<<2;\n-\t  sn=sincos.x[k];\n-\t  ssn=sincos.x[k+1];\n-\t  cs=sincos.x[k+2];\n-\t  ccs=sincos.x[k+3];\n-\t  cor=(ccs-s*ssn-cs*c)-sn*s;\n-\t  res=cs+cor;\n-\t  cor=(cs-res)+cor;\n-\t  return (res==res+1.020*cor)? ((m>0)?res:-res) : slow2(x);\n-\t} /*   else  if (k < 0x400368fd)    */\n-\n-/*-------------------------- 2.426265<|x|< 105414350 ----------------------*/\n-\telse if (k < 0x419921FB ) {\n-\t  t = (x*hpinv.x + toint.x);\n-\t  xn = t - toint.x;\n-\t  v.x = t;\n-\t  y = (x - xn*mp1.x) - xn*mp2.x;\n-\t  n =v.i[LOW_HALF]&3;\n-\t  da = xn*mp3.x;\n-\t  a=y-da;\n-\t  da = (y-a)-da;\n-\t  eps = ABS(x)*1.2e-30;\n-\n-\t  switch (n) { /* quarter of unit circle */\n-\t  case 0:\n-\t  case 2:\n-\t    xx = a*a;\n-\t    if (n) {a=-a;da=-da;}\n-\t    if (xx < 0.01588) {\n-                      /*Taylor series */\n-\t      t = (((((s5.x*xx + s4.x)*xx + s3.x)*xx + s2.x)*xx + s1.x)*a - 0.5*da)*xx+da;\n-\t      res = a+t;\n-\t      cor = (a-res)+t;\n-\t      cor = (cor>0)? 1.02*cor+eps : 1.02*cor -eps;\n-\t      return (res == res + cor)? res : sloww(a,da,x);\n-\t    }\n-\t    else  {\n-\t      if (a>0)\n-\t\t{m=1;t=a;db=da;}\n-\t      else\n-\t\t{m=0;t=-a;db=-da;}\n-\t      u.x=big.x+t;\n-\t      y=t-(u.x-big.x);\n-\t      xx=y*y;\n-\t      s = y + (db+y*xx*(sn3 +xx*sn5));\n-\t      c = y*db+xx*(cs2 +xx*(cs4 + xx*cs6));\n-\t      k=u.i[LOW_HALF]<<2;\n-\t      sn=sincos.x[k];\n-\t      ssn=sincos.x[k+1];\n-\t      cs=sincos.x[k+2];\n-\t      ccs=sincos.x[k+3];\n-\t      cor=(ssn+s*ccs-sn*c)+cs*s;\n-\t      res=sn+cor;\n-\t      cor=(sn-res)+cor;\n-\t      cor = (cor>0)? 1.035*cor+eps : 1.035*cor-eps;\n-\t      return (res==res+cor)? ((m)?res:-res) : sloww1(a,da,x);\n-\t    }\n-\t    break;\n-\n-\t  case 1:\n-\t  case 3:\n-\t    if (a<0)\n-\t      {a=-a;da=-da;}\n-\t    u.x=big.x+a;\n-\t    y=a-(u.x-big.x)+da;\n-\t    xx=y*y;\n-\t    k=u.i[LOW_HALF]<<2;\n-\t    sn=sincos.x[k];\n-\t    ssn=sincos.x[k+1];\n-\t    cs=sincos.x[k+2];\n-\t    ccs=sincos.x[k+3];\n-\t    s = y + y*xx*(sn3 +xx*sn5);\n-\t    c = xx*(cs2 +xx*(cs4 + xx*cs6));\n-\t    cor=(ccs-s*ssn-cs*c)-sn*s;\n-\t    res=cs+cor;\n-\t    cor=(cs-res)+cor;\n-\t    cor = (cor>0)? 1.025*cor+eps : 1.025*cor-eps;\n-\t    return (res==res+cor)? ((n&2)?-res:res) : sloww2(a,da,x,n);\n-\n-\t    break;\n-\n-\t  }\n-\n-\t}    /*   else  if (k <  0x419921FB )    */\n-\n-/*---------------------105414350 <|x|< 281474976710656 --------------------*/\n-\telse if (k < 0x42F00000 ) {\n-\t  t = (x*hpinv.x + toint.x);\n-\t  xn = t - toint.x;\n-\t  v.x = t;\n-\t  xn1 = (xn+8.0e22)-8.0e22;\n-\t  xn2 = xn - xn1;\n-\t  y = ((((x - xn1*mp1.x) - xn1*mp2.x)-xn2*mp1.x)-xn2*mp2.x);\n-\t  n =v.i[LOW_HALF]&3;\n-\t  da = xn1*pp3.x;\n-\t  t=y-da;\n-\t  da = (y-t)-da;\n-\t  da = (da - xn2*pp3.x) -xn*pp4.x;\n-\t  a = t+da;\n-\t  da = (t-a)+da;\n-\t  eps = 1.0e-24;\n-\n-\t  switch (n) {\n-\t  case 0:\n-\t  case 2:\n-\t    xx = a*a;\n-\t    if (n) {a=-a;da=-da;}\n-\t    if (xx < 0.01588) {\n-              /* Taylor series */\n-\t      t = (((((s5.x*xx + s4.x)*xx + s3.x)*xx + s2.x)*xx + s1.x)*a - 0.5*da)*xx+da;\n-\t      res = a+t;\n-\t      cor = (a-res)+t;\n-\t      cor = (cor>0)? 1.02*cor+eps : 1.02*cor -eps;\n-\t      return (res == res + cor)? res : bsloww(a,da,x,n);\n-\t    }\n-\t    else  {\n-\t      if (a>0) {m=1;t=a;db=da;}\n-\t      else {m=0;t=-a;db=-da;}\n-\t      u.x=big.x+t;\n-\t      y=t-(u.x-big.x);\n-\t      xx=y*y;\n-\t      s = y + (db+y*xx*(sn3 +xx*sn5));\n-\t      c = y*db+xx*(cs2 +xx*(cs4 + xx*cs6));\n-\t      k=u.i[LOW_HALF]<<2;\n-\t      sn=sincos.x[k];\n-\t      ssn=sincos.x[k+1];\n-\t      cs=sincos.x[k+2];\n-\t      ccs=sincos.x[k+3];\n-\t      cor=(ssn+s*ccs-sn*c)+cs*s;\n-\t      res=sn+cor;\n-\t      cor=(sn-res)+cor;\n-\t      cor = (cor>0)? 1.035*cor+eps : 1.035*cor-eps;\n-\t      return (res==res+cor)? ((m)?res:-res) : bsloww1(a,da,x,n);\n-\t\t   }\n-\t    break;\n-\n-\t  case 1:\n-\t  case 3:\n-\t    if (a<0)\n-\t      {a=-a;da=-da;}\n-\t    u.x=big.x+a;\n-\t    y=a-(u.x-big.x)+da;\n-\t    xx=y*y;\n-\t    k=u.i[LOW_HALF]<<2;\n-\t    sn=sincos.x[k];\n-\t    ssn=sincos.x[k+1];\n-\t    cs=sincos.x[k+2];\n-\t    ccs=sincos.x[k+3];\n-\t    s = y + y*xx*(sn3 +xx*sn5);\n-\t    c = xx*(cs2 +xx*(cs4 + xx*cs6));\n-\t    cor=(ccs-s*ssn-cs*c)-sn*s;\n-\t    res=cs+cor;\n-\t    cor=(cs-res)+cor;\n-\t    cor = (cor>0)? 1.025*cor+eps : 1.025*cor-eps;\n-\t    return (res==res+cor)? ((n&2)?-res:res) : bsloww2(a,da,x,n);\n-\n-\t    break;\n-\n-\t  }\n-\n-\t}    /*   else  if (k <  0x42F00000 )   */\n-\n-/* -----------------281474976710656 <|x| <2^1024----------------------------*/\n-\telse if (k < 0x7ff00000) {\n-\n-\t  n = __branred(x,&a,&da);\n-\t  switch (n) {\n-\t  case 0:\n-\t    if (a*a < 0.01588) return bsloww(a,da,x,n);\n-\t    else return bsloww1(a,da,x,n);\n-\t    break;\n-\t  case 2:\n-\t    if (a*a < 0.01588) return bsloww(-a,-da,x,n);\n-\t    else return bsloww1(-a,-da,x,n);\n-\t    break;\n-\n-\t  case 1:\n-\t  case 3:\n-\t    return  bsloww2(a,da,x,n);\n-\t    break;\n-\t  }\n-\n-\t}    /*   else  if (k <  0x7ff00000 )    */\n-\n-/*--------------------- |x| > 2^1024 ----------------------------------*/\n-\telse return x / x;\n-\treturn 0;         /* unreachable */\n-}\n-\n-\n-/*******************************************************************/\n-/* An ultimate cos routine. Given an IEEE double machine number x   */\n-/* it computes the correctly rounded (to nearest) value of cos(x)  */\n-/*******************************************************************/\n-\n-double __cos(double x)\n-{\n-  double y,xx,res,t,cor,s,c,sn,ssn,cs,ccs,xn,a,da,db,eps,xn1,xn2;\n-  mynumber u,v;\n-  int4 k,m,n;\n-\n-  u.x = x;\n-  m = u.i[HIGH_HALF];\n-  k = 0x7fffffff&m;\n-\n-  if (k < 0x3e400000 ) return 1.0; /* |x|<2^-27 => cos(x)=1 */\n-\n-  else if (k < 0x3feb6000 ) {/* 2^-27 < |x| < 0.855469 */\n-    y=ABS(x);\n-    u.x = big.x+y;\n-    y = y-(u.x-big.x);\n-    xx=y*y;\n-    s = y + y*xx*(sn3 +xx*sn5);\n-    c = xx*(cs2 +xx*(cs4 + xx*cs6));\n-    k=u.i[LOW_HALF]<<2;\n-    sn=sincos.x[k];\n-    ssn=sincos.x[k+1];\n-    cs=sincos.x[k+2];\n-    ccs=sincos.x[k+3];\n-    cor=(ccs-s*ssn-cs*c)-sn*s;\n-    res=cs+cor;\n-    cor=(cs-res)+cor;\n-    return (res==res+1.020*cor)? res : cslow2(x);\n-\n-}    /*   else  if (k < 0x3feb6000)    */\n-\n-  else if (k <  0x400368fd ) {/* 0.855469  <|x|<2.426265  */;\n-    y=hp0.x-ABS(x);\n-    a=y+hp1.x;\n-    da=(y-a)+hp1.x;\n-    xx=a*a;\n-    if (xx < 0.01588) {\n-      t = (((((s5.x*xx + s4.x)*xx + s3.x)*xx + s2.x)*xx + s1.x)*a - 0.5*da)*xx+da;\n-      res = a+t;\n-      cor = (a-res)+t;\n-      cor = (cor>0)? 1.02*cor+1.0e-31 : 1.02*cor -1.0e-31;\n-      return (res == res + cor)? res : csloww(a,da,x);\n-    }\n-    else  {\n-      if (a>0) {m=1;t=a;db=da;}\n-      else {m=0;t=-a;db=-da;}\n-      u.x=big.x+t;\n-      y=t-(u.x-big.x);\n-      xx=y*y;\n-      s = y + (db+y*xx*(sn3 +xx*sn5));\n-      c = y*db+xx*(cs2 +xx*(cs4 + xx*cs6));\n-      k=u.i[LOW_HALF]<<2;\n-      sn=sincos.x[k];\n-      ssn=sincos.x[k+1];\n-      cs=sincos.x[k+2];\n-      ccs=sincos.x[k+3];\n-      cor=(ssn+s*ccs-sn*c)+cs*s;\n-      res=sn+cor;\n-      cor=(sn-res)+cor;\n-      cor = (cor>0)? 1.035*cor+1.0e-31 : 1.035*cor-1.0e-31;\n-      return (res==res+cor)? ((m)?res:-res) : csloww1(a,da,x);\n-}\n-\n-}    /*   else  if (k < 0x400368fd)    */\n-\n-\n-  else if (k < 0x419921FB ) {/* 2.426265<|x|< 105414350 */\n-    t = (x*hpinv.x + toint.x);\n-    xn = t - toint.x;\n-    v.x = t;\n-    y = (x - xn*mp1.x) - xn*mp2.x;\n-    n =v.i[LOW_HALF]&3;\n-    da = xn*mp3.x;\n-    a=y-da;\n-    da = (y-a)-da;\n-    eps = ABS(x)*1.2e-30;\n-\n-    switch (n) {\n-    case 1:\n-    case 3:\n-      xx = a*a;\n-      if (n == 1) {a=-a;da=-da;}\n-      if (xx < 0.01588) {\n-\tt = (((((s5.x*xx + s4.x)*xx + s3.x)*xx + s2.x)*xx + s1.x)*a - 0.5*da)*xx+da;\n-\tres = a+t;\n-\tcor = (a-res)+t;\n-\tcor = (cor>0)? 1.02*cor+eps : 1.02*cor -eps;\n-\treturn (res == res + cor)? res : csloww(a,da,x);\n-      }\n-      else  {\n-\tif (a>0) {m=1;t=a;db=da;}\n-\telse {m=0;t=-a;db=-da;}\n-\tu.x=big.x+t;\n-\ty=t-(u.x-big.x);\n-\txx=y*y;\n-\ts = y + (db+y*xx*(sn3 +xx*sn5));\n-\tc = y*db+xx*(cs2 +xx*(cs4 + xx*cs6));\n-\tk=u.i[LOW_HALF]<<2;\n-\tsn=sincos.x[k];\n-\tssn=sincos.x[k+1];\n-\tcs=sincos.x[k+2];\n-\tccs=sincos.x[k+3];\n-\tcor=(ssn+s*ccs-sn*c)+cs*s;\n-\tres=sn+cor;\n-\tcor=(sn-res)+cor;\n-\tcor = (cor>0)? 1.035*cor+eps : 1.035*cor-eps;\n-\treturn (res==res+cor)? ((m)?res:-res) : csloww1(a,da,x);\n-      }\n-      break;\n-\n-  case 0:\n-    case 2:\n-      if (a<0) {a=-a;da=-da;}\n-      u.x=big.x+a;\n-      y=a-(u.x-big.x)+da;\n-      xx=y*y;\n-      k=u.i[LOW_HALF]<<2;\n-      sn=sincos.x[k];\n-      ssn=sincos.x[k+1];\n-      cs=sincos.x[k+2];\n-      ccs=sincos.x[k+3];\n-      s = y + y*xx*(sn3 +xx*sn5);\n-      c = xx*(cs2 +xx*(cs4 + xx*cs6));\n-      cor=(ccs-s*ssn-cs*c)-sn*s;\n-      res=cs+cor;\n-      cor=(cs-res)+cor;\n-      cor = (cor>0)? 1.025*cor+eps : 1.025*cor-eps;\n-      return (res==res+cor)? ((n)?-res:res) : csloww2(a,da,x,n);\n-\n-           break;\n-\n-    }\n-\n-  }    /*   else  if (k <  0x419921FB )    */\n-\n-\n-  else if (k < 0x42F00000 ) {\n-    t = (x*hpinv.x + toint.x);\n-    xn = t - toint.x;\n-    v.x = t;\n-    xn1 = (xn+8.0e22)-8.0e22;\n-    xn2 = xn - xn1;\n-    y = ((((x - xn1*mp1.x) - xn1*mp2.x)-xn2*mp1.x)-xn2*mp2.x);\n-    n =v.i[LOW_HALF]&3;\n-    da = xn1*pp3.x;\n-    t=y-da;\n-    da = (y-t)-da;\n-    da = (da - xn2*pp3.x) -xn*pp4.x;\n-    a = t+da;\n-    da = (t-a)+da;\n-    eps = 1.0e-24;\n-\n-    switch (n) {\n-    case 1:\n-    case 3:\n-      xx = a*a;\n-      if (n==1) {a=-a;da=-da;}\n-      if (xx < 0.01588) {\n-\tt = (((((s5.x*xx + s4.x)*xx + s3.x)*xx + s2.x)*xx + s1.x)*a - 0.5*da)*xx+da;\n-\tres = a+t;\n-\tcor = (a-res)+t;\n-\tcor = (cor>0)? 1.02*cor+eps : 1.02*cor -eps;\n-\treturn (res == res + cor)? res : bsloww(a,da,x,n);\n-      }\n-      else  {\n-\tif (a>0) {m=1;t=a;db=da;}\n-\telse {m=0;t=-a;db=-da;}\n-\tu.x=big.x+t;\n-\ty=t-(u.x-big.x);\n-\txx=y*y;\n-\ts = y + (db+y*xx*(sn3 +xx*sn5));\n-\tc = y*db+xx*(cs2 +xx*(cs4 + xx*cs6));\n-\tk=u.i[LOW_HALF]<<2;\n-\tsn=sincos.x[k];\n-\tssn=sincos.x[k+1];\n-\tcs=sincos.x[k+2];\n-\tccs=sincos.x[k+3];\n-\tcor=(ssn+s*ccs-sn*c)+cs*s;\n-\tres=sn+cor;\n-\tcor=(sn-res)+cor;\n-\tcor = (cor>0)? 1.035*cor+eps : 1.035*cor-eps;\n-\treturn (res==res+cor)? ((m)?res:-res) : bsloww1(a,da,x,n);\n-      }\n-      break;\n-\n-    case 0:\n-    case 2:\n-      if (a<0) {a=-a;da=-da;}\n-      u.x=big.x+a;\n-      y=a-(u.x-big.x)+da;\n-      xx=y*y;\n-      k=u.i[LOW_HALF]<<2;\n-      sn=sincos.x[k];\n-      ssn=sincos.x[k+1];\n-      cs=sincos.x[k+2];\n-      ccs=sincos.x[k+3];\n-      s = y + y*xx*(sn3 +xx*sn5);\n-      c = xx*(cs2 +xx*(cs4 + xx*cs6));\n-      cor=(ccs-s*ssn-cs*c)-sn*s;\n-      res=cs+cor;\n-      cor=(cs-res)+cor;\n-      cor = (cor>0)? 1.025*cor+eps : 1.025*cor-eps;\n-      return (res==res+cor)? ((n)?-res:res) : bsloww2(a,da,x,n);\n-      break;\n-\n-    }\n-\n-  }    /*   else  if (k <  0x42F00000 )    */\n-\n-  else if (k < 0x7ff00000) {/* 281474976710656 <|x| <2^1024 */\n-\n-    n = __branred(x,&a,&da);\n-    switch (n) {\n-    case 1:\n-      if (a*a < 0.01588) return bsloww(-a,-da,x,n);\n-      else return bsloww1(-a,-da,x,n);\n-      break;\n-\t\tcase 3:\n-\t\t  if (a*a < 0.01588) return bsloww(a,da,x,n);\n-\t\t  else return bsloww1(a,da,x,n);\n-\t\t  break;\n-\n-    case 0:\n-    case 2:\n-      return  bsloww2(a,da,x,n);\n-      break;\n-    }\n-\n-  }    /*   else  if (k <  0x7ff00000 )    */\n-\n-\n-\n-\n-  else return x / x; /* |x| > 2^1024 */\n-  return 0;\n-\n-}\n-\n-/************************************************************************/\n-/*  Routine compute sin(x) for  2^-26 < |x|< 0.25 by  Taylor with more   */\n-/* precision  and if still doesn't accurate enough by mpsin   or dubsin */\n-/************************************************************************/\n-\n-static double slow(double x) {\n-static const double th2_36 = 206158430208.0;   /*    1.5*2**37   */\n- double y,x1,x2,xx,r,t,res,cor,w[2];\n- x1=(x+th2_36)-th2_36;\n- y = aa.x*x1*x1*x1;\n- r=x+y;\n- x2=x-x1;\n- xx=x*x;\n- t = (((((s5.x*xx + s4.x)*xx + s3.x)*xx + s2.x)*xx + bb.x)*xx + 3.0*aa.x*x1*x2)*x +aa.x*x2*x2*x2;\n- t=((x-r)+y)+t;\n- res=r+t;\n- cor = (r-res)+t;\n- if (res == res + 1.0007*cor) return res;\n- else {\n-   __dubsin(ABS(x),0,w);\n-   if (w[0] == w[0]+1.000000001*w[1]) return (x>0)?w[0]:-w[0];\n-   else return (x>0)?__mpsin(x,0):-__mpsin(-x,0);\n- }\n-}\n-/*******************************************************************************/\n-/* Routine compute sin(x) for   0.25<|x|< 0.855469 by  sincos.tbl   and Taylor */\n-/* and if result still doesn't accurate enough by mpsin   or dubsin            */\n-/*******************************************************************************/\n-\n-static double slow1(double x) {\n-  mynumber u;\n-  double sn,ssn,cs,ccs,s,c,w[2],y,y1,y2,c1,c2,xx,cor,res;\n-  static const double t22 = 6291456.0;\n-  int4 k;\n-  y=ABS(x);\n-  u.x=big.x+y;\n-  y=y-(u.x-big.x);\n-  xx=y*y;\n-  s = y*xx*(sn3 +xx*sn5);\n-  c = xx*(cs2 +xx*(cs4 + xx*cs6));\n-  k=u.i[LOW_HALF]<<2;\n-  sn=sincos.x[k];          /* Data          */\n-  ssn=sincos.x[k+1];       /*  from         */\n-  cs=sincos.x[k+2];        /*   tables      */\n-  ccs=sincos.x[k+3];       /*    sincos.tbl */\n-  y1 = (y+t22)-t22;\n-  y2 = y - y1;\n-  c1 = (cs+t22)-t22;\n-  c2=(cs-c1)+ccs;\n-  cor=(ssn+s*ccs+cs*s+c2*y+c1*y2)-sn*c;\n-  y=sn+c1*y1;\n-  cor = cor+((sn-y)+c1*y1);\n-  res=y+cor;\n-  cor=(y-res)+cor;\n-  if (res == res+1.0005*cor) return (x>0)?res:-res;\n-  else {\n-    __dubsin(ABS(x),0,w);\n-    if (w[0] == w[0]+1.000000005*w[1]) return (x>0)?w[0]:-w[0];\n-    else return (x>0)?__mpsin(x,0):-__mpsin(-x,0);\n-  }\n-}\n-/**************************************************************************/\n-/*  Routine compute sin(x) for   0.855469  <|x|<2.426265  by  sincos.tbl  */\n-/* and if result still doesn't accurate enough by mpsin   or dubsin       */\n-/**************************************************************************/\n-static double slow2(double x) {\n-  mynumber u;\n-  double sn,ssn,cs,ccs,s,c,w[2],y,y1,y2,e1,e2,xx,cor,res,del;\n-  static const double t22 = 6291456.0;\n-  int4 k;\n-  y=ABS(x);\n-  y = hp0.x-y;\n-  if (y>=0) {\n-    u.x = big.x+y;\n-    y = y-(u.x-big.x);\n-    del = hp1.x;\n-  }\n-  else {\n-    u.x = big.x-y;\n-    y = -(y+(u.x-big.x));\n-    del = -hp1.x;\n-  }\n-  xx=y*y;\n-  s = y*xx*(sn3 +xx*sn5);\n-  c = y*del+xx*(cs2 +xx*(cs4 + xx*cs6));\n-  k=u.i[LOW_HALF]<<2;\n-  sn=sincos.x[k];\n-  ssn=sincos.x[k+1];\n-  cs=sincos.x[k+2];\n-  ccs=sincos.x[k+3];\n-  y1 = (y+t22)-t22;\n-  y2 = (y - y1)+del;\n-  e1 = (sn+t22)-t22;\n-  e2=(sn-e1)+ssn;\n-  cor=(ccs-cs*c-e1*y2-e2*y)-sn*s;\n-  y=cs-e1*y1;\n-  cor = cor+((cs-y)-e1*y1);\n-  res=y+cor;\n-  cor=(y-res)+cor;\n-  if (res == res+1.0005*cor) return (x>0)?res:-res;\n-  else {\n-    y=ABS(x)-hp0.x;\n-    y1=y-hp1.x;\n-    y2=(y-y1)-hp1.x;\n-    __docos(y1,y2,w);\n-    if (w[0] == w[0]+1.000000005*w[1]) return (x>0)?w[0]:-w[0];\n-    else return (x>0)?__mpsin(x,0):-__mpsin(-x,0);\n-  }\n-}\n-/***************************************************************************/\n-/*  Routine compute sin(x+dx) (Double-Length number) where x is small enough*/\n-/* to use Taylor series around zero and   (x+dx)                            */\n-/* in first or third quarter of unit circle.Routine receive also            */\n-/* (right argument) the  original   value of x for computing error of      */\n-/* result.And if result not accurate enough routine calls mpsin1 or dubsin */\n-/***************************************************************************/\n-\n-static double sloww(double x,double dx, double orig) {\n-  static const double th2_36 = 206158430208.0;   /*    1.5*2**37   */\n-  double y,x1,x2,xx,r,t,res,cor,w[2],a,da,xn;\n-  union {int4 i[2]; double x;} v;\n-  int4 n;\n-  x1=(x+th2_36)-th2_36;\n-  y = aa.x*x1*x1*x1;\n-  r=x+y;\n-  x2=(x-x1)+dx;\n-  xx=x*x;\n-  t = (((((s5.x*xx + s4.x)*xx + s3.x)*xx + s2.x)*xx + bb.x)*xx + 3.0*aa.x*x1*x2)*x +aa.x*x2*x2*x2+dx;\n-  t=((x-r)+y)+t;\n-  res=r+t;\n-  cor = (r-res)+t;\n-  cor = (cor>0)? 1.0005*cor+ABS(orig)*3.1e-30 : 1.0005*cor-ABS(orig)*3.1e-30;\n-  if (res == res + cor) return res;\n-  else {\n-    (x>0)? __dubsin(x,dx,w) : __dubsin(-x,-dx,w);\n-    cor = (w[1]>0)? 1.000000001*w[1] + ABS(orig)*1.1e-30 : 1.000000001*w[1] - ABS(orig)*1.1e-30;\n-    if (w[0] == w[0]+cor) return (x>0)?w[0]:-w[0];\n-    else {\n-      t = (orig*hpinv.x + toint.x);\n-      xn = t - toint.x;\n-      v.x = t;\n-      y = (orig - xn*mp1.x) - xn*mp2.x;\n-      n =v.i[LOW_HALF]&3;\n-      da = xn*pp3.x;\n-      t=y-da;\n-      da = (y-t)-da;\n-      y = xn*pp4.x;\n-      a = t - y;\n-      da = ((t-a)-y)+da;\n-      if (n&2) {a=-a; da=-da;}\n-      (a>0)? __dubsin(a,da,w) : __dubsin(-a,-da,w);\n-      cor = (w[1]>0)? 1.000000001*w[1] + ABS(orig)*1.1e-40 : 1.000000001*w[1] - ABS(orig)*1.1e-40;\n-      if (w[0] == w[0]+cor) return (a>0)?w[0]:-w[0];\n-      else return __mpsin1(orig);\n-    }\n-  }\n-}\n-/***************************************************************************/\n-/*  Routine compute sin(x+dx)   (Double-Length number) where x in first or  */\n-/*  third quarter of unit circle.Routine receive also (right argument) the  */\n-/*  original   value of x for computing error of result.And if result not  */\n-/* accurate enough routine calls  mpsin1   or dubsin                       */\n-/***************************************************************************/\n-\n-static double sloww1(double x, double dx, double orig) {\n-  mynumber u;\n-  double sn,ssn,cs,ccs,s,c,w[2],y,y1,y2,c1,c2,xx,cor,res;\n-  static const double t22 = 6291456.0;\n-  int4 k;\n-  y=ABS(x);\n-  u.x=big.x+y;\n-  y=y-(u.x-big.x);\n-  dx=(x>0)?dx:-dx;\n-  xx=y*y;\n-  s = y*xx*(sn3 +xx*sn5);\n-  c = xx*(cs2 +xx*(cs4 + xx*cs6));\n-  k=u.i[LOW_HALF]<<2;\n-  sn=sincos.x[k];\n-  ssn=sincos.x[k+1];\n-  cs=sincos.x[k+2];\n-  ccs=sincos.x[k+3];\n-  y1 = (y+t22)-t22;\n-  y2 = (y - y1)+dx;\n-  c1 = (cs+t22)-t22;\n-  c2=(cs-c1)+ccs;\n-  cor=(ssn+s*ccs+cs*s+c2*y+c1*y2-sn*y*dx)-sn*c;\n-  y=sn+c1*y1;\n-  cor = cor+((sn-y)+c1*y1);\n-  res=y+cor;\n-  cor=(y-res)+cor;\n-  cor = (cor>0)? 1.0005*cor+3.1e-30*ABS(orig) : 1.0005*cor-3.1e-30*ABS(orig);\n-  if (res == res + cor) return (x>0)?res:-res;\n-  else {\n-    __dubsin(ABS(x),dx,w);\n-    cor = (w[1]>0)? 1.000000005*w[1]+1.1e-30*ABS(orig) : 1.000000005*w[1]-1.1e-30*ABS(orig);\n-    if (w[0] == w[0]+cor) return (x>0)?w[0]:-w[0];\n-  else  return __mpsin1(orig);\n-  }\n-}\n-/***************************************************************************/\n-/*  Routine compute sin(x+dx)   (Double-Length number) where x in second or */\n-/*  fourth quarter of unit circle.Routine receive also  the  original value */\n-/* and quarter(n= 1or 3)of x for computing error of result.And if result not*/\n-/* accurate enough routine calls  mpsin1   or dubsin                       */\n-/***************************************************************************/\n-\n-static double sloww2(double x, double dx, double orig, int n) {\n-  mynumber u;\n-  double sn,ssn,cs,ccs,s,c,w[2],y,y1,y2,e1,e2,xx,cor,res;\n-  static const double t22 = 6291456.0;\n-  int4 k;\n-  y=ABS(x);\n-  u.x=big.x+y;\n-  y=y-(u.x-big.x);\n-  dx=(x>0)?dx:-dx;\n-  xx=y*y;\n-  s = y*xx*(sn3 +xx*sn5);\n-  c = y*dx+xx*(cs2 +xx*(cs4 + xx*cs6));\n-  k=u.i[LOW_HALF]<<2;\n-  sn=sincos.x[k];\n-  ssn=sincos.x[k+1];\n-  cs=sincos.x[k+2];\n-  ccs=sincos.x[k+3];\n-\n-  y1 = (y+t22)-t22;\n-  y2 = (y - y1)+dx;\n-  e1 = (sn+t22)-t22;\n-  e2=(sn-e1)+ssn;\n-  cor=(ccs-cs*c-e1*y2-e2*y)-sn*s;\n-  y=cs-e1*y1;\n-  cor = cor+((cs-y)-e1*y1);\n-  res=y+cor;\n-  cor=(y-res)+cor;\n-  cor = (cor>0)? 1.0005*cor+3.1e-30*ABS(orig) : 1.0005*cor-3.1e-30*ABS(orig);\n-  if (res == res + cor) return (n&2)?-res:res;\n-  else {\n-   __docos(ABS(x),dx,w);\n-   cor = (w[1]>0)? 1.000000005*w[1]+1.1e-30*ABS(orig) : 1.000000005*w[1]-1.1e-30*ABS(orig);\n-   if (w[0] == w[0]+cor) return (n&2)?-w[0]:w[0];\n-   else  return __mpsin1(orig);\n-  }\n-}\n-/***************************************************************************/\n-/*  Routine compute sin(x+dx) or cos(x+dx) (Double-Length number) where x   */\n-/* is small enough to use Taylor series around zero and   (x+dx)            */\n-/* in first or third quarter of unit circle.Routine receive also            */\n-/* (right argument) the  original   value of x for computing error of      */\n-/* result.And if result not accurate enough routine calls other routines    */\n-/***************************************************************************/\n-\n-static double bsloww(double x,double dx, double orig,int n) {\n-  static const double th2_36 = 206158430208.0;   /*    1.5*2**37   */\n-  double y,x1,x2,xx,r,t,res,cor,w[2];\n-#if 0\n-  double a,da,xn;\n-  union {int4 i[2]; double x;} v;\n-#endif\n-  x1=(x+th2_36)-th2_36;\n-  y = aa.x*x1*x1*x1;\n-  r=x+y;\n-  x2=(x-x1)+dx;\n-  xx=x*x;\n-  t = (((((s5.x*xx + s4.x)*xx + s3.x)*xx + s2.x)*xx + bb.x)*xx + 3.0*aa.x*x1*x2)*x +aa.x*x2*x2*x2+dx;\n-  t=((x-r)+y)+t;\n-  res=r+t;\n-  cor = (r-res)+t;\n-  cor = (cor>0)? 1.0005*cor+1.1e-24 : 1.0005*cor-1.1e-24;\n-  if (res == res + cor) return res;\n-  else {\n-    (x>0)? __dubsin(x,dx,w) : __dubsin(-x,-dx,w);\n-    cor = (w[1]>0)? 1.000000001*w[1] + 1.1e-24 : 1.000000001*w[1] - 1.1e-24;\n-    if (w[0] == w[0]+cor) return (x>0)?w[0]:-w[0];\n-    else return (n&1)?__mpcos1(orig):__mpsin1(orig);\n-  }\n-}\n-\n-/***************************************************************************/\n-/*  Routine compute sin(x+dx)  or cos(x+dx) (Double-Length number) where x  */\n-/* in first or third quarter of unit circle.Routine receive also            */\n-/* (right argument) the original  value of x for computing error of result.*/\n-/* And if result not  accurate enough routine calls  other routines         */\n-/***************************************************************************/\n-\n-static double bsloww1(double x, double dx, double orig,int n) {\n-mynumber u;\n- double sn,ssn,cs,ccs,s,c,w[2],y,y1,y2,c1,c2,xx,cor,res;\n- static const double t22 = 6291456.0;\n- int4 k;\n- y=ABS(x);\n- u.x=big.x+y;\n- y=y-(u.x-big.x);\n- dx=(x>0)?dx:-dx;\n- xx=y*y;\n- s = y*xx*(sn3 +xx*sn5);\n- c = xx*(cs2 +xx*(cs4 + xx*cs6));\n- k=u.i[LOW_HALF]<<2;\n- sn=sincos.x[k];\n- ssn=sincos.x[k+1];\n- cs=sincos.x[k+2];\n- ccs=sincos.x[k+3];\n- y1 = (y+t22)-t22;\n- y2 = (y - y1)+dx;\n- c1 = (cs+t22)-t22;\n- c2=(cs-c1)+ccs;\n- cor=(ssn+s*ccs+cs*s+c2*y+c1*y2-sn*y*dx)-sn*c;\n- y=sn+c1*y1;\n- cor = cor+((sn-y)+c1*y1);\n- res=y+cor;\n- cor=(y-res)+cor;\n- cor = (cor>0)? 1.0005*cor+1.1e-24 : 1.0005*cor-1.1e-24;\n- if (res == res + cor) return (x>0)?res:-res;\n- else {\n-   __dubsin(ABS(x),dx,w);\n-   cor = (w[1]>0)? 1.000000005*w[1]+1.1e-24: 1.000000005*w[1]-1.1e-24;\n-   if (w[0] == w[0]+cor) return (x>0)?w[0]:-w[0];\n-   else  return (n&1)?__mpcos1(orig):__mpsin1(orig);\n- }\n-}\n-\n-/***************************************************************************/\n-/*  Routine compute sin(x+dx)  or cos(x+dx) (Double-Length number) where x  */\n-/* in second or fourth quarter of unit circle.Routine receive also  the     */\n-/* original value and quarter(n= 1or 3)of x for computing error of result.  */\n-/* And if result not accurate enough routine calls  other routines          */\n-/***************************************************************************/\n-\n-static double bsloww2(double x, double dx, double orig, int n) {\n-mynumber u;\n- double sn,ssn,cs,ccs,s,c,w[2],y,y1,y2,e1,e2,xx,cor,res;\n- static const double t22 = 6291456.0;\n- int4 k;\n- y=ABS(x);\n- u.x=big.x+y;\n- y=y-(u.x-big.x);\n- dx=(x>0)?dx:-dx;\n- xx=y*y;\n- s = y*xx*(sn3 +xx*sn5);\n- c = y*dx+xx*(cs2 +xx*(cs4 + xx*cs6));\n- k=u.i[LOW_HALF]<<2;\n- sn=sincos.x[k];\n- ssn=sincos.x[k+1];\n- cs=sincos.x[k+2];\n- ccs=sincos.x[k+3];\n-\n- y1 = (y+t22)-t22;\n- y2 = (y - y1)+dx;\n- e1 = (sn+t22)-t22;\n- e2=(sn-e1)+ssn;\n- cor=(ccs-cs*c-e1*y2-e2*y)-sn*s;\n- y=cs-e1*y1;\n- cor = cor+((cs-y)-e1*y1);\n- res=y+cor;\n- cor=(y-res)+cor;\n- cor = (cor>0)? 1.0005*cor+1.1e-24 : 1.0005*cor-1.1e-24;\n- if (res == res + cor) return (n&2)?-res:res;\n- else {\n-   __docos(ABS(x),dx,w);\n-   cor = (w[1]>0)? 1.000000005*w[1]+1.1e-24 : 1.000000005*w[1]-1.1e-24;\n-   if (w[0] == w[0]+cor) return (n&2)?-w[0]:w[0];\n-   else  return (n&1)?__mpsin1(orig):__mpcos1(orig);\n- }\n-}\n-\n-/************************************************************************/\n-/*  Routine compute cos(x) for  2^-27 < |x|< 0.25 by  Taylor with more   */\n-/* precision  and if still doesn't accurate enough by mpcos   or docos  */\n-/************************************************************************/\n-\n-static double cslow2(double x) {\n-  mynumber u;\n-  double sn,ssn,cs,ccs,s,c,w[2],y,y1,y2,e1,e2,xx,cor,res;\n-  static const double t22 = 6291456.0;\n-  int4 k;\n-  y=ABS(x);\n-  u.x = big.x+y;\n-  y = y-(u.x-big.x);\n-  xx=y*y;\n-  s = y*xx*(sn3 +xx*sn5);\n-  c = xx*(cs2 +xx*(cs4 + xx*cs6));\n-  k=u.i[LOW_HALF]<<2;\n-  sn=sincos.x[k];\n-  ssn=sincos.x[k+1];\n-  cs=sincos.x[k+2];\n-  ccs=sincos.x[k+3];\n-  y1 = (y+t22)-t22;\n-  y2 = y - y1;\n-  e1 = (sn+t22)-t22;\n-  e2=(sn-e1)+ssn;\n-  cor=(ccs-cs*c-e1*y2-e2*y)-sn*s;\n-  y=cs-e1*y1;\n-  cor = cor+((cs-y)-e1*y1);\n-  res=y+cor;\n-  cor=(y-res)+cor;\n-  if (res == res+1.0005*cor)\n-    return res;\n-  else {\n-    y=ABS(x);\n-    __docos(y,0,w);\n-    if (w[0] == w[0]+1.000000005*w[1]) return w[0];\n-    else return __mpcos(x,0);\n-  }\n-}\n-\n-/***************************************************************************/\n-/*  Routine compute cos(x+dx) (Double-Length number) where x is small enough*/\n-/* to use Taylor series around zero and   (x+dx) .Routine receive also      */\n-/* (right argument) the  original   value of x for computing error of      */\n-/* result.And if result not accurate enough routine calls other routines    */\n-/***************************************************************************/\n-\n-\n-static double csloww(double x,double dx, double orig) {\n-  static const double th2_36 = 206158430208.0;   /*    1.5*2**37   */\n-  double y,x1,x2,xx,r,t,res,cor,w[2],a,da,xn;\n-  union {int4 i[2]; double x;} v;\n-  int4 n;\n-  x1=(x+th2_36)-th2_36;\n-  y = aa.x*x1*x1*x1;\n-  r=x+y;\n-  x2=(x-x1)+dx;\n-  xx=x*x;\n-    /* Taylor series */\n-  t = (((((s5.x*xx + s4.x)*xx + s3.x)*xx + s2.x)*xx + bb.x)*xx + 3.0*aa.x*x1*x2)*x +aa.x*x2*x2*x2+dx;\n-  t=((x-r)+y)+t;\n-  res=r+t;\n-  cor = (r-res)+t;\n-  cor = (cor>0)? 1.0005*cor+ABS(orig)*3.1e-30 : 1.0005*cor-ABS(orig)*3.1e-30;\n-  if (res == res + cor) return res;\n-  else {\n-    (x>0)? __dubsin(x,dx,w) : __dubsin(-x,-dx,w);\n-    cor = (w[1]>0)? 1.000000001*w[1] + ABS(orig)*1.1e-30 : 1.000000001*w[1] - ABS(orig)*1.1e-30;\n-    if (w[0] == w[0]+cor) return (x>0)?w[0]:-w[0];\n-    else {\n-      t = (orig*hpinv.x + toint.x);\n-      xn = t - toint.x;\n-      v.x = t;\n-      y = (orig - xn*mp1.x) - xn*mp2.x;\n-      n =v.i[LOW_HALF]&3;\n-      da = xn*pp3.x;\n-      t=y-da;\n-      da = (y-t)-da;\n-      y = xn*pp4.x;\n-      a = t - y;\n-      da = ((t-a)-y)+da;\n-      if (n==1) {a=-a; da=-da;}\n-      (a>0)? __dubsin(a,da,w) : __dubsin(-a,-da,w);\n-      cor = (w[1]>0)? 1.000000001*w[1] + ABS(orig)*1.1e-40 : 1.000000001*w[1] - ABS(orig)*1.1e-40;\n-      if (w[0] == w[0]+cor) return (a>0)?w[0]:-w[0];\n-      else return __mpcos1(orig);\n-    }\n-  }\n-}\n-\n-/***************************************************************************/\n-/*  Routine compute sin(x+dx)   (Double-Length number) where x in first or  */\n-/*  third quarter of unit circle.Routine receive also (right argument) the  */\n-/*  original   value of x for computing error of result.And if result not  */\n-/* accurate enough routine calls  other routines                            */\n-/***************************************************************************/\n-\n-static double csloww1(double x, double dx, double orig) {\n-  mynumber u;\n-  double sn,ssn,cs,ccs,s,c,w[2],y,y1,y2,c1,c2,xx,cor,res;\n-  static const double t22 = 6291456.0;\n-  int4 k;\n-  y=ABS(x);\n-  u.x=big.x+y;\n-  y=y-(u.x-big.x);\n-  dx=(x>0)?dx:-dx;\n-  xx=y*y;\n-  s = y*xx*(sn3 +xx*sn5);\n-  c = xx*(cs2 +xx*(cs4 + xx*cs6));\n-  k=u.i[LOW_HALF]<<2;\n-  sn=sincos.x[k];\n-  ssn=sincos.x[k+1];\n-  cs=sincos.x[k+2];\n-  ccs=sincos.x[k+3];\n-  y1 = (y+t22)-t22;\n-  y2 = (y - y1)+dx;\n-  c1 = (cs+t22)-t22;\n-  c2=(cs-c1)+ccs;\n-  cor=(ssn+s*ccs+cs*s+c2*y+c1*y2-sn*y*dx)-sn*c;\n-  y=sn+c1*y1;\n-  cor = cor+((sn-y)+c1*y1);\n-  res=y+cor;\n-  cor=(y-res)+cor;\n-  cor = (cor>0)? 1.0005*cor+3.1e-30*ABS(orig) : 1.0005*cor-3.1e-30*ABS(orig);\n-  if (res == res + cor) return (x>0)?res:-res;\n-  else {\n-    __dubsin(ABS(x),dx,w);\n-    cor = (w[1]>0)? 1.000000005*w[1]+1.1e-30*ABS(orig) : 1.000000005*w[1]-1.1e-30*ABS(orig);\n-    if (w[0] == w[0]+cor) return (x>0)?w[0]:-w[0];\n-    else  return __mpcos1(orig);\n-  }\n-}\n-\n-\n-/***************************************************************************/\n-/*  Routine compute sin(x+dx)   (Double-Length number) where x in second or */\n-/*  fourth quarter of unit circle.Routine receive also  the  original value */\n-/* and quarter(n= 1or 3)of x for computing error of result.And if result not*/\n-/* accurate enough routine calls  other routines                            */\n-/***************************************************************************/\n-\n-static double csloww2(double x, double dx, double orig, int n) {\n-  mynumber u;\n-  double sn,ssn,cs,ccs,s,c,w[2],y,y1,y2,e1,e2,xx,cor,res;\n-  static const double t22 = 6291456.0;\n-  int4 k;\n-  y=ABS(x);\n-  u.x=big.x+y;\n-  y=y-(u.x-big.x);\n-  dx=(x>0)?dx:-dx;\n-  xx=y*y;\n-  s = y*xx*(sn3 +xx*sn5);\n-  c = y*dx+xx*(cs2 +xx*(cs4 + xx*cs6));\n-  k=u.i[LOW_HALF]<<2;\n-  sn=sincos.x[k];\n-  ssn=sincos.x[k+1];\n-  cs=sincos.x[k+2];\n-  ccs=sincos.x[k+3];\n-\n-  y1 = (y+t22)-t22;\n-  y2 = (y - y1)+dx;\n-  e1 = (sn+t22)-t22;\n-  e2=(sn-e1)+ssn;\n-  cor=(ccs-cs*c-e1*y2-e2*y)-sn*s;\n-  y=cs-e1*y1;\n-  cor = cor+((cs-y)-e1*y1);\n-  res=y+cor;\n-  cor=(y-res)+cor;\n-  cor = (cor>0)? 1.0005*cor+3.1e-30*ABS(orig) : 1.0005*cor-3.1e-30*ABS(orig);\n-  if (res == res + cor) return (n)?-res:res;\n-  else {\n-    __docos(ABS(x),dx,w);\n-    cor = (w[1]>0)? 1.000000005*w[1]+1.1e-30*ABS(orig) : 1.000000005*w[1]-1.1e-30*ABS(orig);\n-    if (w[0] == w[0]+cor) return (n)?-w[0]:w[0];\n-    else  return __mpcos1(orig);\n-  }\n-}\n-\n-weak_alias (__cos, cos)\n-weak_alias (__sin, sin)\n-\n-#ifdef NO_LONG_DOUBLE\n-strong_alias (__sin, __sinl)\n-weak_alias (__sin, sinl)\n-strong_alias (__cos, __cosl)\n-weak_alias (__cos, cosl)\n-#endif"}, {"sha": "17bac52da0319504ce0a445e32411bca581070b0", "filename": "libgcc-math/dbl-64/s_tan.c", "status": "removed", "additions": 0, "deletions": 485, "changes": 485, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fs_tan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fs_tan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc-math%2Fdbl-64%2Fs_tan.c?ref=5cd88d6857dffe4f10c834c773c300881ec20e32", "patch": "@@ -1,485 +0,0 @@\n-/*\n- * IBM Accurate Mathematical Library\n- * written by International Business Machines Corp.\n- * Copyright (C) 2001 Free Software Foundation\n- *\n- * This program is free software; you can redistribute it and/or modify\n- * it under the terms of the GNU Lesser General Public License as published by\n- * the Free Software Foundation; either version 2.1 of the License, or\n- * (at your option) any later version.\n- *\n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Lesser General Public License for more details.\n- *\n- * You should have received a copy of the GNU Lesser General Public License\n- * along with this program; if not, write to the Free Software\n- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n- */\n-/*********************************************************************/\n-/*  MODULE_NAME: utan.c                                              */\n-/*                                                                   */\n-/*  FUNCTIONS: utan                                                  */\n-/*             tanMp                                                 */\n-/*                                                                   */\n-/*  FILES NEEDED:dla.h endian.h mpa.h mydefs.h utan.h                */\n-/*               branred.c sincos32.c mptan.c                        */\n-/*               utan.tbl                                            */\n-/*                                                                   */\n-/* An ultimate tan routine. Given an IEEE double machine number x    */\n-/* it computes the correctly rounded (to nearest) value of tan(x).   */\n-/* Assumption: Machine arithmetic operations are performed in        */\n-/* round to nearest mode of IEEE 754 standard.                       */\n-/*                                                                   */\n-/*********************************************************************/\n-#include \"endian.h\"\n-#include \"dla.h\"\n-#include \"mpa.h\"\n-#include \"MathLib.h\"\n-\n-static double tanMp(double);\n-void __mptan(double, mp_no *, int);\n-\n-double tan(double x) {\n-#include \"utan.h\"\n-#include \"utan.tbl\"\n-\n-  int ux,i,n;\n-  double a,da,a2,b,db,c,dc,c1,cc1,c2,cc2,c3,cc3,fi,ffi,gi,pz,s,sy,\n-  t,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,w,x2,xn,xx2,y,ya,yya,z0,z,zz,z2,zz2;\n-  int p;\n-  number num,v;\n-  mp_no mpa,mpt1,mpt2;\n-#if 0\n-  mp_no mpy;\n-#endif\n-\n-  int __branred(double, double *, double *);\n-  int __mpranred(double, mp_no *, int);\n-\n-  /* x=+-INF, x=NaN */\n-  num.d = x;  ux = num.i[HIGH_HALF];\n-  if ((ux&0x7ff00000)==0x7ff00000) return x-x;\n-\n-  w=(x<ZERO) ? -x : x;\n-\n-  /* (I) The case abs(x) <= 1.259e-8 */\n-  if (w<=g1.d)  return x;\n-\n-  /* (II) The case 1.259e-8 < abs(x) <= 0.0608 */\n-  if (w<=g2.d) {\n-\n-    /* First stage */\n-    x2 = x*x;\n-    t2 = x*x2*(d3.d+x2*(d5.d+x2*(d7.d+x2*(d9.d+x2*d11.d))));\n-    if ((y=x+(t2-u1.d*t2)) == x+(t2+u1.d*t2))  return y;\n-\n-    /* Second stage */\n-    c1 = x2*(a15.d+x2*(a17.d+x2*(a19.d+x2*(a21.d+x2*(a23.d+x2*(a25.d+\n-         x2*a27.d))))));\n-    EMULV(x,x,x2,xx2,t1,t2,t3,t4,t5)\n-    ADD2(a13.d,aa13.d,c1,zero.d,c2,cc2,t1,t2)\n-    MUL2(x2,xx2,c2,cc2,c1,cc1,t1,t2,t3,t4,t5,t6,t7,t8)\n-    ADD2(a11.d,aa11.d,c1,cc1,c2,cc2,t1,t2)\n-    MUL2(x2,xx2,c2,cc2,c1,cc1,t1,t2,t3,t4,t5,t6,t7,t8)\n-    ADD2(a9.d ,aa9.d ,c1,cc1,c2,cc2,t1,t2)\n-    MUL2(x2,xx2,c2,cc2,c1,cc1,t1,t2,t3,t4,t5,t6,t7,t8)\n-    ADD2(a7.d ,aa7.d ,c1,cc1,c2,cc2,t1,t2)\n-    MUL2(x2,xx2,c2,cc2,c1,cc1,t1,t2,t3,t4,t5,t6,t7,t8)\n-    ADD2(a5.d ,aa5.d ,c1,cc1,c2,cc2,t1,t2)\n-    MUL2(x2,xx2,c2,cc2,c1,cc1,t1,t2,t3,t4,t5,t6,t7,t8)\n-    ADD2(a3.d ,aa3.d ,c1,cc1,c2,cc2,t1,t2)\n-    MUL2(x2,xx2,c2,cc2,c1,cc1,t1,t2,t3,t4,t5,t6,t7,t8)\n-    MUL2(x ,zero.d,c1,cc1,c2,cc2,t1,t2,t3,t4,t5,t6,t7,t8)\n-    ADD2(x    ,zero.d,c2,cc2,c1,cc1,t1,t2)\n-    if ((y=c1+(cc1-u2.d*c1)) == c1+(cc1+u2.d*c1))  return y;\n-    return tanMp(x);\n-  }\n-\n-  /* (III) The case 0.0608 < abs(x) <= 0.787 */\n-  if (w<=g3.d) {\n-\n-    /* First stage */\n-    i = ((int) (mfftnhf.d+TWO8*w));\n-    z = w-xfg[i][0].d;  z2 = z*z;   s = (x<ZERO) ? MONE : ONE;\n-    pz = z+z*z2*(e0.d+z2*e1.d);\n-    fi = xfg[i][1].d;   gi = xfg[i][2].d;   t2 = pz*(gi+fi)/(gi-pz);\n-    if ((y=fi+(t2-fi*u3.d))==fi+(t2+fi*u3.d))  return (s*y);\n-    t3 = (t2<ZERO) ? -t2 : t2;\n-    if ((y=fi+(t2-(t4=fi*ua3.d+t3*ub3.d)))==fi+(t2+t4))  return (s*y);\n-\n-    /* Second stage */\n-    ffi = xfg[i][3].d;\n-    c1 = z2*(a7.d+z2*(a9.d+z2*a11.d));\n-    EMULV(z,z,z2,zz2,t1,t2,t3,t4,t5)\n-    ADD2(a5.d,aa5.d,c1,zero.d,c2,cc2,t1,t2)\n-    MUL2(z2,zz2,c2,cc2,c1,cc1,t1,t2,t3,t4,t5,t6,t7,t8)\n-    ADD2(a3.d,aa3.d,c1,cc1,c2,cc2,t1,t2)\n-    MUL2(z2,zz2,c2,cc2,c1,cc1,t1,t2,t3,t4,t5,t6,t7,t8)\n-    MUL2(z ,zero.d,c1,cc1,c2,cc2,t1,t2,t3,t4,t5,t6,t7,t8)\n-    ADD2(z ,zero.d,c2,cc2,c1,cc1,t1,t2)\n-\n-    ADD2(fi ,ffi,c1,cc1,c2,cc2,t1,t2)\n-    MUL2(fi ,ffi,c1,cc1,c3,cc3,t1,t2,t3,t4,t5,t6,t7,t8)\n-    SUB2(one.d,zero.d,c3,cc3,c1,cc1,t1,t2)\n-    DIV2(c2,cc2,c1,cc1,c3,cc3,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10)\n-\n-    if ((y=c3+(cc3-u4.d*c3))==c3+(cc3+u4.d*c3))  return (s*y);\n-    return tanMp(x);\n-  }\n-\n-  /* (---) The case 0.787 < abs(x) <= 25 */\n-  if (w<=g4.d) {\n-    /* Range reduction by algorithm i */\n-    t = (x*hpinv.d + toint.d);\n-    xn = t - toint.d;\n-    v.d = t;\n-    t1 = (x - xn*mp1.d) - xn*mp2.d;\n-    n =v.i[LOW_HALF] & 0x00000001;\n-    da = xn*mp3.d;\n-    a=t1-da;\n-    da = (t1-a)-da;\n-    if (a<ZERO)  {ya=-a;  yya=-da;  sy=MONE;}\n-    else         {ya= a;  yya= da;  sy= ONE;}\n-\n-    /* (IV),(V) The case 0.787 < abs(x) <= 25,    abs(y) <= 1e-7 */\n-    if (ya<=gy1.d)  return tanMp(x);\n-\n-    /* (VI) The case 0.787 < abs(x) <= 25,    1e-7 < abs(y) <= 0.0608 */\n-    if (ya<=gy2.d) {\n-      a2 = a*a;\n-      t2 = da+a*a2*(d3.d+a2*(d5.d+a2*(d7.d+a2*(d9.d+a2*d11.d))));\n-      if (n) {\n-        /* First stage -cot */\n-        EADD(a,t2,b,db)\n-        DIV2(one.d,zero.d,b,db,c,dc,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10)\n-        if ((y=c+(dc-u6.d*c))==c+(dc+u6.d*c))  return (-y); }\n-      else {\n-        /* First stage tan */\n-        if ((y=a+(t2-u5.d*a))==a+(t2+u5.d*a))  return y; }\n-      /* Second stage */\n-      /* Range reduction by algorithm ii */\n-      t = (x*hpinv.d + toint.d);\n-      xn = t - toint.d;\n-      v.d = t;\n-      t1 = (x - xn*mp1.d) - xn*mp2.d;\n-      n =v.i[LOW_HALF] & 0x00000001;\n-      da = xn*pp3.d;\n-      t=t1-da;\n-      da = (t1-t)-da;\n-      t1 = xn*pp4.d;\n-      a = t - t1;\n-      da = ((t-a)-t1)+da;\n-\n-      /* Second stage */\n-      EADD(a,da,t1,t2)   a=t1;  da=t2;\n-      MUL2(a,da,a,da,x2,xx2,t1,t2,t3,t4,t5,t6,t7,t8)\n-      c1 = x2*(a15.d+x2*(a17.d+x2*(a19.d+x2*(a21.d+x2*(a23.d+x2*(a25.d+\n-           x2*a27.d))))));\n-      ADD2(a13.d,aa13.d,c1,zero.d,c2,cc2,t1,t2)\n-      MUL2(x2,xx2,c2,cc2,c1,cc1,t1,t2,t3,t4,t5,t6,t7,t8)\n-      ADD2(a11.d,aa11.d,c1,cc1,c2,cc2,t1,t2)\n-      MUL2(x2,xx2,c2,cc2,c1,cc1,t1,t2,t3,t4,t5,t6,t7,t8)\n-      ADD2(a9.d ,aa9.d ,c1,cc1,c2,cc2,t1,t2)\n-      MUL2(x2,xx2,c2,cc2,c1,cc1,t1,t2,t3,t4,t5,t6,t7,t8)\n-      ADD2(a7.d ,aa7.d ,c1,cc1,c2,cc2,t1,t2)\n-      MUL2(x2,xx2,c2,cc2,c1,cc1,t1,t2,t3,t4,t5,t6,t7,t8)\n-      ADD2(a5.d ,aa5.d ,c1,cc1,c2,cc2,t1,t2)\n-      MUL2(x2,xx2,c2,cc2,c1,cc1,t1,t2,t3,t4,t5,t6,t7,t8)\n-      ADD2(a3.d ,aa3.d ,c1,cc1,c2,cc2,t1,t2)\n-      MUL2(x2,xx2,c2,cc2,c1,cc1,t1,t2,t3,t4,t5,t6,t7,t8)\n-      MUL2(a ,da ,c1,cc1,c2,cc2,t1,t2,t3,t4,t5,t6,t7,t8)\n-      ADD2(a  ,da  ,c2,cc2,c1,cc1,t1,t2)\n-\n-      if (n) {\n-        /* Second stage -cot */\n-        DIV2(one.d,zero.d,c1,cc1,c2,cc2,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10)\n-        if ((y=c2+(cc2-u8.d*c2)) == c2+(cc2+u8.d*c2))  return (-y); }\n-      else {\n-        /* Second stage tan */\n-        if ((y=c1+(cc1-u7.d*c1)) == c1+(cc1+u7.d*c1))  return y; }\n-      return tanMp(x);\n-    }\n-\n-    /* (VII) The case 0.787 < abs(x) <= 25,    0.0608 < abs(y) <= 0.787 */\n-\n-    /* First stage */\n-    i = ((int) (mfftnhf.d+TWO8*ya));\n-    z = (z0=(ya-xfg[i][0].d))+yya;  z2 = z*z;\n-    pz = z+z*z2*(e0.d+z2*e1.d);\n-    fi = xfg[i][1].d;   gi = xfg[i][2].d;\n-\n-    if (n) {\n-      /* -cot */\n-      t2 = pz*(fi+gi)/(fi+pz);\n-      if ((y=gi-(t2-gi*u10.d))==gi-(t2+gi*u10.d))  return (-sy*y);\n-      t3 = (t2<ZERO) ? -t2 : t2;\n-      if ((y=gi-(t2-(t4=gi*ua10.d+t3*ub10.d)))==gi-(t2+t4))  return (-sy*y); }\n-    else   {\n-      /* tan */\n-      t2 = pz*(gi+fi)/(gi-pz);\n-      if ((y=fi+(t2-fi*u9.d))==fi+(t2+fi*u9.d))  return (sy*y);\n-      t3 = (t2<ZERO) ? -t2 : t2;\n-      if ((y=fi+(t2-(t4=fi*ua9.d+t3*ub9.d)))==fi+(t2+t4))  return (sy*y); }\n-\n-    /* Second stage */\n-    ffi = xfg[i][3].d;\n-    EADD(z0,yya,z,zz)\n-    MUL2(z,zz,z,zz,z2,zz2,t1,t2,t3,t4,t5,t6,t7,t8)\n-    c1 = z2*(a7.d+z2*(a9.d+z2*a11.d));\n-    ADD2(a5.d,aa5.d,c1,zero.d,c2,cc2,t1,t2)\n-    MUL2(z2,zz2,c2,cc2,c1,cc1,t1,t2,t3,t4,t5,t6,t7,t8)\n-    ADD2(a3.d,aa3.d,c1,cc1,c2,cc2,t1,t2)\n-    MUL2(z2,zz2,c2,cc2,c1,cc1,t1,t2,t3,t4,t5,t6,t7,t8)\n-    MUL2(z ,zz ,c1,cc1,c2,cc2,t1,t2,t3,t4,t5,t6,t7,t8)\n-    ADD2(z ,zz ,c2,cc2,c1,cc1,t1,t2)\n-\n-    ADD2(fi ,ffi,c1,cc1,c2,cc2,t1,t2)\n-    MUL2(fi ,ffi,c1,cc1,c3,cc3,t1,t2,t3,t4,t5,t6,t7,t8)\n-    SUB2(one.d,zero.d,c3,cc3,c1,cc1,t1,t2)\n-\n-    if (n) {\n-      /* -cot */\n-      DIV2(c1,cc1,c2,cc2,c3,cc3,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10)\n-      if ((y=c3+(cc3-u12.d*c3))==c3+(cc3+u12.d*c3))  return (-sy*y); }\n-    else {\n-      /* tan */\n-      DIV2(c2,cc2,c1,cc1,c3,cc3,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10)\n-      if ((y=c3+(cc3-u11.d*c3))==c3+(cc3+u11.d*c3))  return (sy*y); }\n-\n-    return tanMp(x);\n-  }\n-\n-  /* (---) The case 25 < abs(x) <= 1e8 */\n-  if (w<=g5.d) {\n-    /* Range reduction by algorithm ii */\n-    t = (x*hpinv.d + toint.d);\n-    xn = t - toint.d;\n-    v.d = t;\n-    t1 = (x - xn*mp1.d) - xn*mp2.d;\n-    n =v.i[LOW_HALF] & 0x00000001;\n-    da = xn*pp3.d;\n-    t=t1-da;\n-    da = (t1-t)-da;\n-    t1 = xn*pp4.d;\n-    a = t - t1;\n-    da = ((t-a)-t1)+da;\n-    EADD(a,da,t1,t2)   a=t1;  da=t2;\n-    if (a<ZERO)  {ya=-a;  yya=-da;  sy=MONE;}\n-    else         {ya= a;  yya= da;  sy= ONE;}\n-\n-    /* (+++) The case 25 < abs(x) <= 1e8,    abs(y) <= 1e-7 */\n-    if (ya<=gy1.d)  return tanMp(x);\n-\n-    /* (VIII) The case 25 < abs(x) <= 1e8,    1e-7 < abs(y) <= 0.0608 */\n-    if (ya<=gy2.d) {\n-      a2 = a*a;\n-      t2 = da+a*a2*(d3.d+a2*(d5.d+a2*(d7.d+a2*(d9.d+a2*d11.d))));\n-      if (n) {\n-        /* First stage -cot */\n-        EADD(a,t2,b,db)\n-        DIV2(one.d,zero.d,b,db,c,dc,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10)\n-        if ((y=c+(dc-u14.d*c))==c+(dc+u14.d*c))  return (-y); }\n-      else {\n-        /* First stage tan */\n-        if ((y=a+(t2-u13.d*a))==a+(t2+u13.d*a))  return y; }\n-\n-      /* Second stage */\n-      MUL2(a,da,a,da,x2,xx2,t1,t2,t3,t4,t5,t6,t7,t8)\n-      c1 = x2*(a15.d+x2*(a17.d+x2*(a19.d+x2*(a21.d+x2*(a23.d+x2*(a25.d+\n-           x2*a27.d))))));\n-      ADD2(a13.d,aa13.d,c1,zero.d,c2,cc2,t1,t2)\n-      MUL2(x2,xx2,c2,cc2,c1,cc1,t1,t2,t3,t4,t5,t6,t7,t8)\n-      ADD2(a11.d,aa11.d,c1,cc1,c2,cc2,t1,t2)\n-      MUL2(x2,xx2,c2,cc2,c1,cc1,t1,t2,t3,t4,t5,t6,t7,t8)\n-      ADD2(a9.d ,aa9.d ,c1,cc1,c2,cc2,t1,t2)\n-      MUL2(x2,xx2,c2,cc2,c1,cc1,t1,t2,t3,t4,t5,t6,t7,t8)\n-      ADD2(a7.d ,aa7.d ,c1,cc1,c2,cc2,t1,t2)\n-      MUL2(x2,xx2,c2,cc2,c1,cc1,t1,t2,t3,t4,t5,t6,t7,t8)\n-      ADD2(a5.d ,aa5.d ,c1,cc1,c2,cc2,t1,t2)\n-      MUL2(x2,xx2,c2,cc2,c1,cc1,t1,t2,t3,t4,t5,t6,t7,t8)\n-      ADD2(a3.d ,aa3.d ,c1,cc1,c2,cc2,t1,t2)\n-      MUL2(x2,xx2,c2,cc2,c1,cc1,t1,t2,t3,t4,t5,t6,t7,t8)\n-      MUL2(a ,da ,c1,cc1,c2,cc2,t1,t2,t3,t4,t5,t6,t7,t8)\n-      ADD2(a  ,da  ,c2,cc2,c1,cc1,t1,t2)\n-\n-      if (n) {\n-        /* Second stage -cot */\n-        DIV2(one.d,zero.d,c1,cc1,c2,cc2,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10)\n-        if ((y=c2+(cc2-u16.d*c2)) == c2+(cc2+u16.d*c2))  return (-y); }\n-      else {\n-        /* Second stage tan */\n-        if ((y=c1+(cc1-u15.d*c1)) == c1+(cc1+u15.d*c1))  return (y); }\n-      return tanMp(x);\n-    }\n-\n-    /* (IX) The case 25 < abs(x) <= 1e8,    0.0608 < abs(y) <= 0.787 */\n-    /* First stage */\n-    i = ((int) (mfftnhf.d+TWO8*ya));\n-    z = (z0=(ya-xfg[i][0].d))+yya;  z2 = z*z;\n-    pz = z+z*z2*(e0.d+z2*e1.d);\n-    fi = xfg[i][1].d;   gi = xfg[i][2].d;\n-\n-    if (n) {\n-      /* -cot */\n-      t2 = pz*(fi+gi)/(fi+pz);\n-      if ((y=gi-(t2-gi*u18.d))==gi-(t2+gi*u18.d))  return (-sy*y);\n-      t3 = (t2<ZERO) ? -t2 : t2;\n-      if ((y=gi-(t2-(t4=gi*ua18.d+t3*ub18.d)))==gi-(t2+t4))  return (-sy*y); }\n-    else   {\n-      /* tan */\n-      t2 = pz*(gi+fi)/(gi-pz);\n-      if ((y=fi+(t2-fi*u17.d))==fi+(t2+fi*u17.d))  return (sy*y);\n-      t3 = (t2<ZERO) ? -t2 : t2;\n-      if ((y=fi+(t2-(t4=fi*ua17.d+t3*ub17.d)))==fi+(t2+t4))  return (sy*y); }\n-\n-    /* Second stage */\n-    ffi = xfg[i][3].d;\n-    EADD(z0,yya,z,zz)\n-    MUL2(z,zz,z,zz,z2,zz2,t1,t2,t3,t4,t5,t6,t7,t8)\n-    c1 = z2*(a7.d+z2*(a9.d+z2*a11.d));\n-    ADD2(a5.d,aa5.d,c1,zero.d,c2,cc2,t1,t2)\n-    MUL2(z2,zz2,c2,cc2,c1,cc1,t1,t2,t3,t4,t5,t6,t7,t8)\n-    ADD2(a3.d,aa3.d,c1,cc1,c2,cc2,t1,t2)\n-    MUL2(z2,zz2,c2,cc2,c1,cc1,t1,t2,t3,t4,t5,t6,t7,t8)\n-    MUL2(z ,zz ,c1,cc1,c2,cc2,t1,t2,t3,t4,t5,t6,t7,t8)\n-    ADD2(z ,zz ,c2,cc2,c1,cc1,t1,t2)\n-\n-    ADD2(fi ,ffi,c1,cc1,c2,cc2,t1,t2)\n-    MUL2(fi ,ffi,c1,cc1,c3,cc3,t1,t2,t3,t4,t5,t6,t7,t8)\n-    SUB2(one.d,zero.d,c3,cc3,c1,cc1,t1,t2)\n-\n-    if (n) {\n-      /* -cot */\n-      DIV2(c1,cc1,c2,cc2,c3,cc3,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10)\n-      if ((y=c3+(cc3-u20.d*c3))==c3+(cc3+u20.d*c3))  return (-sy*y); }\n-    else {\n-      /* tan */\n-      DIV2(c2,cc2,c1,cc1,c3,cc3,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10)\n-      if ((y=c3+(cc3-u19.d*c3))==c3+(cc3+u19.d*c3))  return (sy*y); }\n-    return tanMp(x);\n-  }\n-\n-  /* (---) The case 1e8 < abs(x) < 2**1024 */\n-  /* Range reduction by algorithm iii */\n-  n = (__branred(x,&a,&da)) & 0x00000001;\n-  EADD(a,da,t1,t2)   a=t1;  da=t2;\n-  if (a<ZERO)  {ya=-a;  yya=-da;  sy=MONE;}\n-  else         {ya= a;  yya= da;  sy= ONE;}\n-\n-  /* (+++) The case 1e8 < abs(x) < 2**1024,    abs(y) <= 1e-7 */\n-  if (ya<=gy1.d)  return tanMp(x);\n-\n-  /* (X) The case 1e8 < abs(x) < 2**1024,    1e-7 < abs(y) <= 0.0608 */\n-  if (ya<=gy2.d) {\n-    a2 = a*a;\n-    t2 = da+a*a2*(d3.d+a2*(d5.d+a2*(d7.d+a2*(d9.d+a2*d11.d))));\n-    if (n) {\n-      /* First stage -cot */\n-      EADD(a,t2,b,db)\n-      DIV2(one.d,zero.d,b,db,c,dc,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10)\n-      if ((y=c+(dc-u22.d*c))==c+(dc+u22.d*c))  return (-y); }\n-    else {\n-      /* First stage tan */\n-      if ((y=a+(t2-u21.d*a))==a+(t2+u21.d*a))  return y; }\n-\n-    /* Second stage */\n-    /* Reduction by algorithm iv */\n-    p=10;    n = (__mpranred(x,&mpa,p)) & 0x00000001;\n-    __mp_dbl(&mpa,&a,p);        __dbl_mp(a,&mpt1,p);\n-    __sub(&mpa,&mpt1,&mpt2,p);  __mp_dbl(&mpt2,&da,p);\n-\n-    MUL2(a,da,a,da,x2,xx2,t1,t2,t3,t4,t5,t6,t7,t8)\n-    c1 = x2*(a15.d+x2*(a17.d+x2*(a19.d+x2*(a21.d+x2*(a23.d+x2*(a25.d+\n-         x2*a27.d))))));\n-    ADD2(a13.d,aa13.d,c1,zero.d,c2,cc2,t1,t2)\n-    MUL2(x2,xx2,c2,cc2,c1,cc1,t1,t2,t3,t4,t5,t6,t7,t8)\n-    ADD2(a11.d,aa11.d,c1,cc1,c2,cc2,t1,t2)\n-    MUL2(x2,xx2,c2,cc2,c1,cc1,t1,t2,t3,t4,t5,t6,t7,t8)\n-    ADD2(a9.d ,aa9.d ,c1,cc1,c2,cc2,t1,t2)\n-    MUL2(x2,xx2,c2,cc2,c1,cc1,t1,t2,t3,t4,t5,t6,t7,t8)\n-    ADD2(a7.d ,aa7.d ,c1,cc1,c2,cc2,t1,t2)\n-    MUL2(x2,xx2,c2,cc2,c1,cc1,t1,t2,t3,t4,t5,t6,t7,t8)\n-    ADD2(a5.d ,aa5.d ,c1,cc1,c2,cc2,t1,t2)\n-    MUL2(x2,xx2,c2,cc2,c1,cc1,t1,t2,t3,t4,t5,t6,t7,t8)\n-    ADD2(a3.d ,aa3.d ,c1,cc1,c2,cc2,t1,t2)\n-    MUL2(x2,xx2,c2,cc2,c1,cc1,t1,t2,t3,t4,t5,t6,t7,t8)\n-    MUL2(a ,da ,c1,cc1,c2,cc2,t1,t2,t3,t4,t5,t6,t7,t8)\n-    ADD2(a    ,da    ,c2,cc2,c1,cc1,t1,t2)\n-\n-    if (n) {\n-      /* Second stage -cot */\n-      DIV2(one.d,zero.d,c1,cc1,c2,cc2,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10)\n-      if ((y=c2+(cc2-u24.d*c2)) == c2+(cc2+u24.d*c2))  return (-y); }\n-    else {\n-      /* Second stage tan */\n-      if ((y=c1+(cc1-u23.d*c1)) == c1+(cc1+u23.d*c1))  return y; }\n-    return tanMp(x);\n-  }\n-\n-  /* (XI) The case 1e8 < abs(x) < 2**1024,    0.0608 < abs(y) <= 0.787 */\n-  /* First stage */\n-  i = ((int) (mfftnhf.d+TWO8*ya));\n-  z = (z0=(ya-xfg[i][0].d))+yya;  z2 = z*z;\n-  pz = z+z*z2*(e0.d+z2*e1.d);\n-  fi = xfg[i][1].d;   gi = xfg[i][2].d;\n-\n-  if (n) {\n-    /* -cot */\n-    t2 = pz*(fi+gi)/(fi+pz);\n-    if ((y=gi-(t2-gi*u26.d))==gi-(t2+gi*u26.d))  return (-sy*y);\n-    t3 = (t2<ZERO) ? -t2 : t2;\n-    if ((y=gi-(t2-(t4=gi*ua26.d+t3*ub26.d)))==gi-(t2+t4))  return (-sy*y); }\n-  else   {\n-    /* tan */\n-    t2 = pz*(gi+fi)/(gi-pz);\n-    if ((y=fi+(t2-fi*u25.d))==fi+(t2+fi*u25.d))  return (sy*y);\n-    t3 = (t2<ZERO) ? -t2 : t2;\n-    if ((y=fi+(t2-(t4=fi*ua25.d+t3*ub25.d)))==fi+(t2+t4))  return (sy*y); }\n-\n-  /* Second stage */\n-  ffi = xfg[i][3].d;\n-  EADD(z0,yya,z,zz)\n-  MUL2(z,zz,z,zz,z2,zz2,t1,t2,t3,t4,t5,t6,t7,t8)\n-  c1 = z2*(a7.d+z2*(a9.d+z2*a11.d));\n-  ADD2(a5.d,aa5.d,c1,zero.d,c2,cc2,t1,t2)\n-  MUL2(z2,zz2,c2,cc2,c1,cc1,t1,t2,t3,t4,t5,t6,t7,t8)\n-  ADD2(a3.d,aa3.d,c1,cc1,c2,cc2,t1,t2)\n-  MUL2(z2,zz2,c2,cc2,c1,cc1,t1,t2,t3,t4,t5,t6,t7,t8)\n-  MUL2(z ,zz ,c1,cc1,c2,cc2,t1,t2,t3,t4,t5,t6,t7,t8)\n-  ADD2(z ,zz ,c2,cc2,c1,cc1,t1,t2)\n-\n-  ADD2(fi ,ffi,c1,cc1,c2,cc2,t1,t2)\n-  MUL2(fi ,ffi,c1,cc1,c3,cc3,t1,t2,t3,t4,t5,t6,t7,t8)\n-  SUB2(one.d,zero.d,c3,cc3,c1,cc1,t1,t2)\n-\n-  if (n) {\n-    /* -cot */\n-    DIV2(c1,cc1,c2,cc2,c3,cc3,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10)\n-    if ((y=c3+(cc3-u28.d*c3))==c3+(cc3+u28.d*c3))  return (-sy*y); }\n-  else {\n-    /* tan */\n-    DIV2(c2,cc2,c1,cc1,c3,cc3,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10)\n-    if ((y=c3+(cc3-u27.d*c3))==c3+(cc3+u27.d*c3))  return (sy*y); }\n-  return tanMp(x);\n-}\n-\n-\n-/* multiple precision stage                                              */\n-/* Convert x to multi precision number,compute tan(x) by mptan() routine */\n-/* and converts result back to double                                    */\n-static double tanMp(double x)\n-{\n-  int p;\n-  double y;\n-  mp_no mpy;\n-  p=32;\n-  __mptan(x, &mpy, p);\n-  __mp_dbl(&mpy,&y,p);\n-  return y;\n-}\n-\n-#ifdef NO_LONG_DOUBLE\n-weak_alias (tan, tanl)\n-#endif"}, {"sha": "9dd5502841a518fb4b30fc804e8275851d52a6aa", "filename": "libgcc-math/dbl-64/sincos.tbl", "status": "removed", "additions": 0, "deletions": 912, "changes": 912, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fsincos.tbl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fsincos.tbl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc-math%2Fdbl-64%2Fsincos.tbl?ref=5cd88d6857dffe4f10c834c773c300881ec20e32", "patch": "@@ -1,912 +0,0 @@\n-/*\n- * IBM Accurate Mathematical Library\n- * Written by International Business Machines Corp.\n- * Copyright (C) 2001 Free Software Foundation, Inc.\n- *\n- * This program is free software; you can redistribute it and/or modify\n- * it under the terms of the GNU Lesser General Public License as published by\n- * the Free Software Foundation; either version 2.1 of the License, or\n- * (at your option) any later version.\n- *\n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Lesser General Public License for more details.\n- *\n- * You should have received a copy of the GNU Lesser General Public License\n- * along with this program; if not, write to the Free Software\n- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n- */\n-\n-/****************************************************************/\n-/* TABLES FOR THE usin() and ucos()   FUNCTION                  */\n-/****************************************************************/\n-\n-\n-#ifdef BIG_ENDI\n-static const union {int4 i[880]; double x[40];}sincos = { .i = {\n-/**/                   0x00000000, 0x00000000,\n-/**/                   0x00000000, 0x00000000,\n-/**/                   0x3FF00000, 0x00000000,\n-/**/                   0x00000000, 0x00000000,\n-/**/                   0x3F7FFFEA, 0xAAAEEEEF,\n-/**/                   0xBC1E45E2, 0xEC67B77C,\n-/**/                   0x3FEFFFC0, 0x00155552,\n-/**/                   0x3C8F4A01, 0xA0196DAE,\n-/**/                   0x3F8FFFAA, 0xAAEEEED5,\n-/**/                   0xBC02AB63, 0x9A9F0777,\n-/**/                   0x3FEFFF00, 0x0155549F,\n-/**/                   0x3C828A28, 0xA03A5EF3,\n-/**/                   0x3F97FF70, 0x01033255,\n-/**/                   0x3BFEFE2B, 0x51527336,\n-/**/                   0x3FEFFDC0, 0x06BFF7E6,\n-/**/                   0x3C8AE6DA, 0xE86977BD,\n-/**/                   0x3F9FFEAA, 0xAEEEE86F,\n-/**/                   0xBC3CD406, 0xFB224AE2,\n-/**/                   0x3FEFFC00, 0x155527D3,\n-/**/                   0xBC83B544, 0x92D89B5B,\n-/**/                   0x3FA3FEB2, 0xB12D45D5,\n-/**/                   0x3C34EC54, 0x203D1C11,\n-/**/                   0x3FEFF9C0, 0x3414A7BA,\n-/**/                   0x3C6991F4, 0xBE6C59BF,\n-/**/                   0x3FA7FDC0, 0x1032FBA9,\n-/**/                   0xBC4599BD, 0xF46E997A,\n-/**/                   0x3FEFF700, 0x6BFDF99F,\n-/**/                   0xBC78B3B5, 0x60648D5F,\n-/**/                   0x3FABFC6D, 0x78586DAC,\n-/**/                   0x3C18E4FD, 0x03DBF236,\n-/**/                   0x3FEFF3C0, 0xC8103A31,\n-/**/                   0x3C74856D, 0xBDDC0E66,\n-/**/                   0x3FAFFAAA, 0xEEED4EDB,\n-/**/                   0xBC42D16D, 0x32684B69,\n-/**/                   0x3FEFF001, 0x5549F4D3,\n-/**/                   0x3C832838, 0x7B99426F,\n-/**/                   0x3FB1FC34, 0x3D808BEF,\n-/**/                   0xBC5F3D32, 0xE6F3BE4F,\n-/**/                   0x3FEFEBC2, 0x22A8EF9F,\n-/**/                   0x3C579349, 0x34F54C77,\n-/**/                   0x3FB3FACB, 0x12D1755B,\n-/**/                   0xBC592191, 0x5299468C,\n-/**/                   0x3FEFE703, 0x4129EF6F,\n-/**/                   0xBC6CBF43, 0x37C96F97,\n-/**/                   0x3FB5F911, 0xFD10B737,\n-/**/                   0xBC50184F, 0x02BE9102,\n-/**/                   0x3FEFE1C4, 0xC3C873EB,\n-/**/                   0xBC35A9C9, 0x057C4A02,\n-/**/                   0x3FB7F701, 0x032550E4,\n-/**/                   0x3C3AFC2D, 0x1800501A,\n-/**/                   0x3FEFDC06, 0xBF7E6B9B,\n-/**/                   0x3C831902, 0xB535F8DB,\n-/**/                   0x3FB9F490, 0x2D55D1F9,\n-/**/                   0x3C52696D, 0x7EAC1DC1,\n-/**/                   0x3FEFD5C9, 0x4B43E000,\n-/**/                   0xBC62E768, 0xCB4F92F9,\n-/**/                   0x3FBBF1B7, 0x8568391D,\n-/**/                   0x3C5E9184, 0x1DEA4CC8,\n-/**/                   0x3FEFCF0C, 0x800E99B1,\n-/**/                   0x3C6EA3D7, 0x86D186AC,\n-/**/                   0x3FBDEE6F, 0x16C1CCE6,\n-/**/                   0xBC450F8E, 0x2FB71673,\n-/**/                   0x3FEFC7D0, 0x78D1BC88,\n-/**/                   0x3C8075D2, 0x447DB685,\n-/**/                   0x3FBFEAAE, 0xEE86EE36,\n-/**/                   0xBC4AFCB2, 0xBCC6F03B,\n-/**/                   0x3FEFC015, 0x527D5BD3,\n-/**/                   0x3C8B68F3, 0x5094EFB8,\n-/**/                   0x3FC0F337, 0x8DDD71D1,\n-/**/                   0x3C6D8468, 0x724F0F9E,\n-/**/                   0x3FEFB7DB, 0x2BFE0695,\n-/**/                   0x3C821DAD, 0xF4F65AB1,\n-/**/                   0x3FC1F0D3, 0xD7AFCEAF,\n-/**/                   0xBC66EF95, 0x099769A5,\n-/**/                   0x3FEFAF22, 0x263C4BD3,\n-/**/                   0xBC552ACE, 0x133A2769,\n-/**/                   0x3FC2EE28, 0x5E4AB88F,\n-/**/                   0xBC6E4D0F, 0x05DEE058,\n-/**/                   0x3FEFA5EA, 0x641C36F2,\n-/**/                   0x3C404DA6, 0xED17CC7C,\n-/**/                   0x3FC3EB31, 0x2C5D66CB,\n-/**/                   0x3C647D66, 0x6B66CB91,\n-/**/                   0x3FEF9C34, 0x0A7CC428,\n-/**/                   0x3C8C5B6B, 0x063B7462,\n-/**/                   0x3FC4E7EA, 0x4DC5F27B,\n-/**/                   0x3C5949DB, 0x2AC072FC,\n-/**/                   0x3FEF91FF, 0x40374D01,\n-/**/                   0xBC67D03F, 0x4D3A9E4C,\n-/**/                   0x3FC5E44F, 0xCFA126F3,\n-/**/                   0xBC66F443, 0x063F89B6,\n-/**/                   0x3FEF874C, 0x2E1EECF6,\n-/**/                   0xBC8C6514, 0xE1332B16,\n-/**/                   0x3FC6E05D, 0xC05A4D4C,\n-/**/                   0xBBD32C5C, 0x8B81C940,\n-/**/                   0x3FEF7C1A, 0xFEFFDE24,\n-/**/                   0xBC78F55B, 0xC47540B1,\n-/**/                   0x3FC7DC10, 0x2FBAF2B5,\n-/**/                   0x3C45AB50, 0xE23C97C3,\n-/**/                   0x3FEF706B, 0xDF9ECE1C,\n-/**/                   0xBC8698C8, 0x0C36DCB4,\n-/**/                   0x3FC8D763, 0x2EFAA944,\n-/**/                   0xBC620FA2, 0x62CBB953,\n-/**/                   0x3FEF643E, 0xFEB82ACD,\n-/**/                   0x3C76B00A, 0xC1FE28AC,\n-/**/                   0x3FC9D252, 0xD0CEC312,\n-/**/                   0x3C59C43D, 0x80B1137D,\n-/**/                   0x3FEF5794, 0x8CFF6797,\n-/**/                   0x3C6E3A0D, 0x3E03B1D5,\n-/**/                   0x3FCACCDB, 0x297A0765,\n-/**/                   0xBC59883B, 0x57D6CDEB,\n-/**/                   0x3FEF4A6C, 0xBD1E3A79,\n-/**/                   0x3C813DF0, 0xEDAEBB57,\n-/**/                   0x3FCBC6F8, 0x4EDC6199,\n-/**/                   0x3C69C1A5, 0x6A7B0CAB,\n-/**/                   0x3FEF3CC7, 0xC3B3D16E,\n-/**/                   0xBC621A3A, 0xD28A3494,\n-/**/                   0x3FCCC0A6, 0x588289A3,\n-/**/                   0xBC6868D0, 0x9BC87C6B,\n-/**/                   0x3FEF2EA5, 0xD753FFED,\n-/**/                   0x3C8CC421, 0x5F56D583,\n-/**/                   0x3FCDB9E1, 0x5FB5A5D0,\n-/**/                   0xBC632E20, 0xD6CC6FC2,\n-/**/                   0x3FEF2007, 0x3086649F,\n-/**/                   0x3C7B9404, 0x16C1984B,\n-/**/                   0x3FCEB2A5, 0x7F8AE5A3,\n-/**/                   0xBC60BE06, 0xAF572CEB,\n-/**/                   0x3FEF10EC, 0x09C5873B,\n-/**/                   0x3C8D9072, 0x762C1283,\n-/**/                   0x3FCFAAEE, 0xD4F31577,\n-/**/                   0xBC615D88, 0x508E32B8,\n-/**/                   0x3FEF0154, 0x9F7DEEA1,\n-/**/                   0x3C8D3C1E, 0x99E5CAFD,\n-/**/                   0x3FD0515C, 0xBF65155C,\n-/**/                   0xBC79B8C2, 0x9DFD8EC8,\n-/**/                   0x3FEEF141, 0x300D2F26,\n-/**/                   0xBC82AA1B, 0x08DED372,\n-/**/                   0x3FD0CD00, 0xCEF36436,\n-/**/                   0xBC79FB0A, 0x0C93E2B5,\n-/**/                   0x3FEEE0B1, 0xFBC0F11C,\n-/**/                   0xBC4BFD23, 0x80BBC3B1,\n-/**/                   0x3FD14861, 0xAA94DDEB,\n-/**/                   0xBC6BE881, 0xB5B615A4,\n-/**/                   0x3FEECFA7, 0x44D5EFA1,\n-/**/                   0xBC556D0A, 0x4AF541D0,\n-/**/                   0x3FD1C37D, 0x64C6B876,\n-/**/                   0x3C746076, 0xFE0DCFF5,\n-/**/                   0x3FEEBE21, 0x4F76EFA8,\n-/**/                   0xBC802F9F, 0x12BA543E,\n-/**/                   0x3FD23E52, 0x111AAF36,\n-/**/                   0xBC74F080, 0x334EFF18,\n-/**/                   0x3FEEAC20, 0x61BBAF4F,\n-/**/                   0x3C62C1D5, 0x3E94658D,\n-/**/                   0x3FD2B8DD, 0xC43EB49F,\n-/**/                   0x3C615538, 0x99F2D807,\n-/**/                   0x3FEE99A4, 0xC3A7CD83,\n-/**/                   0xBC82264B, 0x1BC53CE8,\n-/**/                   0x3FD3331E, 0x94049F87,\n-/**/                   0x3C7E0CB6, 0xB40C302C,\n-/**/                   0x3FEE86AE, 0xBF29A9ED,\n-/**/                   0x3C89397A, 0xFDBB58A7,\n-/**/                   0x3FD3AD12, 0x9769D3D8,\n-/**/                   0x3C003D55, 0x04878398,\n-/**/                   0x3FEE733E, 0xA0193D40,\n-/**/                   0xBC86428B, 0x3546CE13,\n-/**/                   0x3FD426B7, 0xE69EE697,\n-/**/                   0xBC7F09C7, 0x5705C59F,\n-/**/                   0x3FEE5F54, 0xB436E9D0,\n-/**/                   0x3C87EB0F, 0xD02FC8BC,\n-/**/                   0x3FD4A00C, 0x9B0F3D20,\n-/**/                   0x3C7823BA, 0x6BB08EAD,\n-/**/                   0x3FEE4AF1, 0x4B2A449C,\n-/**/                   0xBC868CA0, 0x2E8A6833,\n-/**/                   0x3FD5190E, 0xCF68A77A,\n-/**/                   0x3C7B3571, 0x55EEF0F3,\n-/**/                   0x3FEE3614, 0xB680D6A5,\n-/**/                   0xBC727793, 0xAA015237,\n-/**/                   0x3FD591BC, 0x9FA2F597,\n-/**/                   0x3C67C74B, 0xAC3FE0CB,\n-/**/                   0x3FEE20BF, 0x49ACD6C1,\n-/**/                   0xBC5660AE, 0xC7EF636C,\n-/**/                   0x3FD60A14, 0x29078775,\n-/**/                   0x3C5B1FD8, 0x0BA89133,\n-/**/                   0x3FEE0AF1, 0x5A03DBCE,\n-/**/                   0x3C5FE8E7, 0x02771AE6,\n-/**/                   0x3FD68213, 0x8A38D7F7,\n-/**/                   0xBC7D8892, 0x02444AAD,\n-/**/                   0x3FEDF4AB, 0x3EBD875E,\n-/**/                   0xBC8E2D8A, 0x7E6736C4,\n-/**/                   0x3FD6F9B8, 0xE33A0255,\n-/**/                   0x3C742BC1, 0x4EE9DA0D,\n-/**/                   0x3FEDDDED, 0x50F228D6,\n-/**/                   0xBC6E80C8, 0xD42BA2BF,\n-/**/                   0x3FD77102, 0x55764214,\n-/**/                   0xBC66EAD7, 0x314BB6CE,\n-/**/                   0x3FEDC6B7, 0xEB995912,\n-/**/                   0x3C54B364, 0x776DCD35,\n-/**/                   0x3FD7E7EE, 0x03C86D4E,\n-/**/                   0xBC7B63BC, 0xDABF5AF2,\n-/**/                   0x3FEDAF0B, 0x6B888E83,\n-/**/                   0x3C8A249E, 0x2B5E5CEA,\n-/**/                   0x3FD85E7A, 0x12826949,\n-/**/                   0x3C78A40E, 0x9B5FACE0,\n-/**/                   0x3FED96E8, 0x2F71A9DC,\n-/**/                   0x3C8FF61B, 0xD5D2039D,\n-/**/                   0x3FD8D4A4, 0xA774992F,\n-/**/                   0x3C744A02, 0xEA766326,\n-/**/                   0x3FED7E4E, 0x97E17B4A,\n-/**/                   0xBC63B770, 0x352BED94,\n-/**/                   0x3FD94A6B, 0xE9F546C5,\n-/**/                   0xBC769CE1, 0x3E683F58,\n-/**/                   0x3FED653F, 0x073E4040,\n-/**/                   0xBC876236, 0x434BEC37,\n-/**/                   0x3FD9BFCE, 0x02E80510,\n-/**/                   0x3C709E39, 0xA320B0A4,\n-/**/                   0x3FED4BB9, 0xE1C619E0,\n-/**/                   0x3C8F34BB, 0x77858F61,\n-/**/                   0x3FDA34C9, 0x1CC50CCA,\n-/**/                   0xBC5A310E, 0x3B50CECD,\n-/**/                   0x3FED31BF, 0x8D8D7C06,\n-/**/                   0x3C7E60DD, 0x3089CBDD,\n-/**/                   0x3FDAA95B, 0x63A09277,\n-/**/                   0xBC66293E, 0xB13C0381,\n-/**/                   0x3FED1750, 0x727D94F0,\n-/**/                   0x3C80D52B, 0x1EC1A48E,\n-/**/                   0x3FDB1D83, 0x05321617,\n-/**/                   0xBC7AE242, 0xCB99F519,\n-/**/                   0x3FECFC6C, 0xFA52AD9F,\n-/**/                   0x3C88B5B5, 0x508F2A0D,\n-/**/                   0x3FDB913E, 0x30DBAC43,\n-/**/                   0xBC7E38AD, 0x2F6C3FF1,\n-/**/                   0x3FECE115, 0x909A82E5,\n-/**/                   0x3C81F139, 0xBB31109A,\n-/**/                   0x3FDC048B, 0x17B140A3,\n-/**/                   0x3C619FE6, 0x757E9FA7,\n-/**/                   0x3FECC54A, 0xA2B2972E,\n-/**/                   0x3C64EE16, 0x2BA83A98,\n-/**/                   0x3FDC7767, 0xEC7FD19E,\n-/**/                   0xBC5EB14D, 0x1A3D5826,\n-/**/                   0x3FECA90C, 0x9FC67D0B,\n-/**/                   0xBC646A81, 0x485E3462,\n-/**/                   0x3FDCE9D2, 0xE3D4A51F,\n-/**/                   0xBC62FC8A, 0x12DAE298,\n-/**/                   0x3FEC8C5B, 0xF8CE1A84,\n-/**/                   0x3C7AB3D1, 0xA1590123,\n-/**/                   0x3FDD5BCA, 0x34047661,\n-/**/                   0x3C728A44, 0xA75FC29C,\n-/**/                   0x3FEC6F39, 0x208BE53B,\n-/**/                   0xBC8741DB, 0xFBAADB42,\n-/**/                   0x3FDDCD4C, 0x15329C9A,\n-/**/                   0x3C70D4C6, 0xE171FD9A,\n-/**/                   0x3FEC51A4, 0x8B8B175E,\n-/**/                   0xBC61BBB4, 0x3B9AA880,\n-/**/                   0x3FDE3E56, 0xC1582A69,\n-/**/                   0xBC50A482, 0x1099F88F,\n-/**/                   0x3FEC339E, 0xB01DDD81,\n-/**/                   0xBC8CAAF5, 0xEE82C5C0,\n-/**/                   0x3FDEAEE8, 0x744B05F0,\n-/**/                   0xBC5789B4, 0x3C9B027D,\n-/**/                   0x3FEC1528, 0x065B7D50,\n-/**/                   0xBC889211, 0x1312E828,\n-/**/                   0x3FDF1EFF, 0x6BC4F97B,\n-/**/                   0x3C717212, 0xF8A7525C,\n-/**/                   0x3FEBF641, 0x081E7536,\n-/**/                   0x3C8B7BD7, 0x1628A9A1,\n-/**/                   0x3FDF8E99, 0xE76ABC97,\n-/**/                   0x3C59D950, 0xAF2D00A3,\n-/**/                   0x3FEBD6EA, 0x310294F5,\n-/**/                   0x3C731BBC, 0xC88C109D,\n-/**/                   0x3FDFFDB6, 0x28D2F57A,\n-/**/                   0x3C6F4A99, 0x2E905B6A,\n-/**/                   0x3FEBB723, 0xFE630F32,\n-/**/                   0x3C772BD2, 0x452D0A39,\n-/**/                   0x3FE03629, 0x39C69955,\n-/**/                   0xBC82D8CD, 0x78397B01,\n-/**/                   0x3FEB96EE, 0xEF58840E,\n-/**/                   0x3C545A3C, 0xC78FADE0,\n-/**/                   0x3FE06D36, 0x86946E5B,\n-/**/                   0x3C83F5AE, 0x4538FF1B,\n-/**/                   0x3FEB764B, 0x84B704C2,\n-/**/                   0xBC8F5848, 0xC21B389B,\n-/**/                   0x3FE0A402, 0x1E9E1001,\n-/**/                   0xBC86F643, 0xA13914F6,\n-/**/                   0x3FEB553A, 0x410C104E,\n-/**/                   0x3C58FF79, 0x47027A16,\n-/**/                   0x3FE0DA8B, 0x26B5672E,\n-/**/                   0xBC8A58DE, 0xF0BEE909,\n-/**/                   0x3FEB33BB, 0xA89C8948,\n-/**/                   0x3C8EA6A5, 0x1D1F6CA9,\n-/**/                   0x3FE110D0, 0xC4B69C3B,\n-/**/                   0x3C8D9189, 0x98809981,\n-/**/                   0x3FEB11D0, 0x4162A4C6,\n-/**/                   0x3C71DD56, 0x1EFBC0C2,\n-/**/                   0x3FE146D2, 0x1F8B7F82,\n-/**/                   0x3C7BF953, 0x5E2739A8,\n-/**/                   0x3FEAEF78, 0x930BD275,\n-/**/                   0xBC7F8362, 0x79746F94,\n-/**/                   0x3FE17C8E, 0x5F2EEDB0,\n-/**/                   0x3C635E57, 0x102E2488,\n-/**/                   0x3FEACCB5, 0x26F69DE5,\n-/**/                   0x3C88FB6A, 0x8DD6B6CC,\n-/**/                   0x3FE1B204, 0xACB02FDD,\n-/**/                   0xBC5F190C, 0x70CBB5FF,\n-/**/                   0x3FEAA986, 0x88308913,\n-/**/                   0xBC0B83D6, 0x07CD5070,\n-/**/                   0x3FE1E734, 0x3236574C,\n-/**/                   0x3C722A3F, 0xA4F41D5A,\n-/**/                   0x3FEA85ED, 0x4373E02D,\n-/**/                   0x3C69BE06, 0x385EC792,\n-/**/                   0x3FE21C1C, 0x1B0394CF,\n-/**/                   0x3C5E5B32, 0x4B23AA31,\n-/**/                   0x3FEA61E9, 0xE72586AF,\n-/**/                   0x3C858330, 0xE2FD453F,\n-/**/                   0x3FE250BB, 0x93788BBB,\n-/**/                   0x3C7EA3D0, 0x2457BCCE,\n-/**/                   0x3FEA3D7D, 0x0352BDCF,\n-/**/                   0xBC868DBA, 0xECA19669,\n-/**/                   0x3FE28511, 0xC917A067,\n-/**/                   0xBC801DF1, 0xD9A16B70,\n-/**/                   0x3FEA18A7, 0x29AEE445,\n-/**/                   0x3C395E25, 0x736C0358,\n-/**/                   0x3FE2B91D, 0xEA88421E,\n-/**/                   0xBC8FA371, 0xDB216AB0,\n-/**/                   0x3FE9F368, 0xED912F85,\n-/**/                   0xBC81D200, 0xC5791606,\n-/**/                   0x3FE2ECDF, 0x279A3082,\n-/**/                   0x3C8D3557, 0xE0E7E37E,\n-/**/                   0x3FE9CDC2, 0xE3F25E5C,\n-/**/                   0x3C83F991, 0x12993F62,\n-/**/                   0x3FE32054, 0xB148BC4F,\n-/**/                   0x3C8F6B42, 0x095A135B,\n-/**/                   0x3FE9A7B5, 0xA36A6514,\n-/**/                   0x3C8722CF, 0xCC9FA7A9,\n-/**/                   0x3FE3537D, 0xB9BE0367,\n-/**/                   0x3C6B327E, 0x7AF040F0,\n-/**/                   0x3FE98141, 0xC42E1310,\n-/**/                   0x3C8D1FF8, 0x0488F08D,\n-/**/                   0x3FE38659, 0x7456282B,\n-/**/                   0xBC710FAD, 0xA93B07A8,\n-/**/                   0x3FE95A67, 0xE00CB1FD,\n-/**/                   0xBC80BEFD, 0xA21F862D,\n-/**/                   0x3FE3B8E7, 0x15A2840A,\n-/**/                   0xBC797653, 0xA7D2F07B,\n-/**/                   0x3FE93328, 0x926D9E92,\n-/**/                   0xBC8BB770, 0x03600CDA,\n-/**/                   0x3FE3EB25, 0xD36CD53A,\n-/**/                   0xBC5BE570, 0xE1570FC0,\n-/**/                   0x3FE90B84, 0x784DDAF7,\n-/**/                   0xBC70FEB1, 0x0AB93B87,\n-/**/                   0x3FE41D14, 0xE4BA6790,\n-/**/                   0x3C84608F, 0xD287ECF5,\n-/**/                   0x3FE8E37C, 0x303D9AD1,\n-/**/                   0xBC6463A4, 0xB53D4BF8,\n-/**/                   0x3FE44EB3, 0x81CF386B,\n-/**/                   0xBC83ED6C, 0x1E6A5505,\n-/**/                   0x3FE8BB10, 0x5A5DC900,\n-/**/                   0x3C8863E0, 0x3E9474C1,\n-/**/                   0x3FE48000, 0xE431159F,\n-/**/                   0xBC8B194A, 0x7463ED10,\n-/**/                   0x3FE89241, 0x985D871F,\n-/**/                   0x3C8C48D9, 0xC413ED84,\n-/**/                   0x3FE4B0FC, 0x46AAB761,\n-/**/                   0x3C20DA05, 0x738CC59A,\n-/**/                   0x3FE86910, 0x8D77A6C6,\n-/**/                   0x3C7338FF, 0xE2BFE9DD,\n-/**/                   0x3FE4E1A4, 0xE54ED51B,\n-/**/                   0xBC8A492F, 0x89B7C76A,\n-/**/                   0x3FE83F7D, 0xDE701CA0,\n-/**/                   0xBC4152CF, 0x609BC6E8,\n-/**/                   0x3FE511F9, 0xFD7B351C,\n-/**/                   0xBC85C0E8, 0x61C48831,\n-/**/                   0x3FE8158A, 0x31916D5D,\n-/**/                   0xBC6DE8B9, 0x0B8228DE,\n-/**/                   0x3FE541FA, 0xCDDBB724,\n-/**/                   0x3C7232C2, 0x8520D391,\n-/**/                   0x3FE7EB36, 0x2EAA1488,\n-/**/                   0x3C5A1D65, 0xA4A5959F,\n-/**/                   0x3FE571A6, 0x966D59B3,\n-/**/                   0x3C5C843B, 0x4D0FB198,\n-/**/                   0x3FE7C082, 0x7F09E54F,\n-/**/                   0xBC6C73D6, 0xD72AEE68,\n-/**/                   0x3FE5A0FC, 0x98813A12,\n-/**/                   0xBC8D82E2, 0xB7D4227B,\n-/**/                   0x3FE7956F, 0xCD7F6543,\n-/**/                   0xBC8AB276, 0xE9D45AE4,\n-/**/                   0x3FE5CFFC, 0x16BF8F0D,\n-/**/                   0x3C896CB3, 0x70EB578A,\n-/**/                   0x3FE769FE, 0xC655211F,\n-/**/                   0xBC6827D5, 0xCF8C68C5,\n-/**/                   0x3FE5FEA4, 0x552A9E57,\n-/**/                   0x3C80B6CE, 0xF7EE20B7,\n-/**/                   0x3FE73E30, 0x174EFBA1,\n-/**/                   0xBC65D3AE, 0x3D94AD5F,\n-/**/                   0x3FE62CF4, 0x9921AC79,\n-/**/                   0xBC8EDD98, 0x55B6241A,\n-/**/                   0x3FE71204, 0x6FA77678,\n-/**/                   0x3C8425B0, 0xA5029C81,\n-/**/                   0x3FE65AEC, 0x2963E755,\n-/**/                   0x3C8126F9, 0x6B71053C,\n-/**/                   0x3FE6E57C, 0x800CF55E,\n-/**/                   0x3C860286, 0xDEDBD0A6,\n-/**/                   0x3FE6888A, 0x4E134B2F,\n-/**/                   0xBC86B7D3, 0x7644D5E6,\n-/**/                   0x3FE6B898, 0xFA9EFB5D,\n-/**/                   0x3C715AC7, 0x86CCF4B2,\n-/**/                   0x3FE6B5CE, 0x50B7821A,\n-/**/                   0xBC65D515, 0x8F702E0F,\n-/**/                   0x3FE68B5A, 0x92EB6253,\n-/**/                   0xBC89A91A, 0xD985F89C,\n-/**/                   0x3FE6E2B7, 0x7C40BDE1,\n-/**/                   0xBC70E729, 0x857FAD53,\n-/**/                   0x3FE65DC1, 0xFDEB8CBA,\n-/**/                   0xBC597C1B, 0x47337C77,\n-/**/                   0x3FE70F45, 0x1D0A8C40,\n-/**/                   0x3C697EDE, 0x3885770D,\n-/**/                   0x3FE62FCF, 0xF20191C7,\n-/**/                   0x3C6D9143, 0x895756EF,\n-/**/                   0x3FE73B76, 0x80DEA578,\n-/**/                   0xBC722483, 0x06DC12A2,\n-/**/                   0x3FE60185, 0x26F563DF,\n-/**/                   0x3C846CA5, 0xE0E432D0,\n-/**/                   0x3FE7674A, 0xF6F7B524,\n-/**/                   0x3C7E9D3F, 0x94AC84A8,\n-/**/                   0x3FE5D2E2, 0x55F1F17A,\n-/**/                   0x3C803141, 0x04C8892B,\n-/**/                   0x3FE792C1, 0xD0041D52,\n-/**/                   0xBC8ABF05, 0xEEB354EB,\n-/**/                   0x3FE5A3E8, 0x39824077,\n-/**/                   0x3C8428AA, 0x2759BE62,\n-/**/                   0x3FE7BDDA, 0x5E28B3C2,\n-/**/                   0x3C4AD119, 0x7CCD0393,\n-/**/                   0x3FE57497, 0x8D8E83F2,\n-/**/                   0x3C8F4714, 0xAF282D23,\n-/**/                   0x3FE7E893, 0xF5037959,\n-/**/                   0x3C80EEFB, 0xAA650C4C,\n-/**/                   0x3FE544F1, 0x0F592CA5,\n-/**/                   0xBC8E7AE8, 0xE6C7A62F,\n-/**/                   0x3FE812ED, 0xE9AE4BA4,\n-/**/                   0xBC87830A, 0xDF402DDA,\n-/**/                   0x3FE514F5, 0x7D7BF3DA,\n-/**/                   0x3C747A10, 0x8073C259 } };\n-#else\n-#ifdef LITTLE_ENDI\n-static const union {int4 i[880]; double x[440];} sincos = { .i = {\n-/**/                   0x00000000, 0x00000000,\n-/**/                   0x00000000, 0x00000000,\n-/**/                   0x00000000, 0x3FF00000,\n-/**/                   0x00000000, 0x00000000,\n-/**/                   0xAAAEEEEF, 0x3F7FFFEA,\n-/**/                   0xEC67B77C, 0xBC1E45E2,\n-/**/                   0x00155552, 0x3FEFFFC0,\n-/**/                   0xA0196DAE, 0x3C8F4A01,\n-/**/                   0xAAEEEED5, 0x3F8FFFAA,\n-/**/                   0x9A9F0777, 0xBC02AB63,\n-/**/                   0x0155549F, 0x3FEFFF00,\n-/**/                   0xA03A5EF3, 0x3C828A28,\n-/**/                   0x01033255, 0x3F97FF70,\n-/**/                   0x51527336, 0x3BFEFE2B,\n-/**/                   0x06BFF7E6, 0x3FEFFDC0,\n-/**/                   0xE86977BD, 0x3C8AE6DA,\n-/**/                   0xAEEEE86F, 0x3F9FFEAA,\n-/**/                   0xFB224AE2, 0xBC3CD406,\n-/**/                   0x155527D3, 0x3FEFFC00,\n-/**/                   0x92D89B5B, 0xBC83B544,\n-/**/                   0xB12D45D5, 0x3FA3FEB2,\n-/**/                   0x203D1C11, 0x3C34EC54,\n-/**/                   0x3414A7BA, 0x3FEFF9C0,\n-/**/                   0xBE6C59BF, 0x3C6991F4,\n-/**/                   0x1032FBA9, 0x3FA7FDC0,\n-/**/                   0xF46E997A, 0xBC4599BD,\n-/**/                   0x6BFDF99F, 0x3FEFF700,\n-/**/                   0x60648D5F, 0xBC78B3B5,\n-/**/                   0x78586DAC, 0x3FABFC6D,\n-/**/                   0x03DBF236, 0x3C18E4FD,\n-/**/                   0xC8103A31, 0x3FEFF3C0,\n-/**/                   0xBDDC0E66, 0x3C74856D,\n-/**/                   0xEEED4EDB, 0x3FAFFAAA,\n-/**/                   0x32684B69, 0xBC42D16D,\n-/**/                   0x5549F4D3, 0x3FEFF001,\n-/**/                   0x7B99426F, 0x3C832838,\n-/**/                   0x3D808BEF, 0x3FB1FC34,\n-/**/                   0xE6F3BE4F, 0xBC5F3D32,\n-/**/                   0x22A8EF9F, 0x3FEFEBC2,\n-/**/                   0x34F54C77, 0x3C579349,\n-/**/                   0x12D1755B, 0x3FB3FACB,\n-/**/                   0x5299468C, 0xBC592191,\n-/**/                   0x4129EF6F, 0x3FEFE703,\n-/**/                   0x37C96F97, 0xBC6CBF43,\n-/**/                   0xFD10B737, 0x3FB5F911,\n-/**/                   0x02BE9102, 0xBC50184F,\n-/**/                   0xC3C873EB, 0x3FEFE1C4,\n-/**/                   0x057C4A02, 0xBC35A9C9,\n-/**/                   0x032550E4, 0x3FB7F701,\n-/**/                   0x1800501A, 0x3C3AFC2D,\n-/**/                   0xBF7E6B9B, 0x3FEFDC06,\n-/**/                   0xB535F8DB, 0x3C831902,\n-/**/                   0x2D55D1F9, 0x3FB9F490,\n-/**/                   0x7EAC1DC1, 0x3C52696D,\n-/**/                   0x4B43E000, 0x3FEFD5C9,\n-/**/                   0xCB4F92F9, 0xBC62E768,\n-/**/                   0x8568391D, 0x3FBBF1B7,\n-/**/                   0x1DEA4CC8, 0x3C5E9184,\n-/**/                   0x800E99B1, 0x3FEFCF0C,\n-/**/                   0x86D186AC, 0x3C6EA3D7,\n-/**/                   0x16C1CCE6, 0x3FBDEE6F,\n-/**/                   0x2FB71673, 0xBC450F8E,\n-/**/                   0x78D1BC88, 0x3FEFC7D0,\n-/**/                   0x447DB685, 0x3C8075D2,\n-/**/                   0xEE86EE36, 0x3FBFEAAE,\n-/**/                   0xBCC6F03B, 0xBC4AFCB2,\n-/**/                   0x527D5BD3, 0x3FEFC015,\n-/**/                   0x5094EFB8, 0x3C8B68F3,\n-/**/                   0x8DDD71D1, 0x3FC0F337,\n-/**/                   0x724F0F9E, 0x3C6D8468,\n-/**/                   0x2BFE0695, 0x3FEFB7DB,\n-/**/                   0xF4F65AB1, 0x3C821DAD,\n-/**/                   0xD7AFCEAF, 0x3FC1F0D3,\n-/**/                   0x099769A5, 0xBC66EF95,\n-/**/                   0x263C4BD3, 0x3FEFAF22,\n-/**/                   0x133A2769, 0xBC552ACE,\n-/**/                   0x5E4AB88F, 0x3FC2EE28,\n-/**/                   0x05DEE058, 0xBC6E4D0F,\n-/**/                   0x641C36F2, 0x3FEFA5EA,\n-/**/                   0xED17CC7C, 0x3C404DA6,\n-/**/                   0x2C5D66CB, 0x3FC3EB31,\n-/**/                   0x6B66CB91, 0x3C647D66,\n-/**/                   0x0A7CC428, 0x3FEF9C34,\n-/**/                   0x063B7462, 0x3C8C5B6B,\n-/**/                   0x4DC5F27B, 0x3FC4E7EA,\n-/**/                   0x2AC072FC, 0x3C5949DB,\n-/**/                   0x40374D01, 0x3FEF91FF,\n-/**/                   0x4D3A9E4C, 0xBC67D03F,\n-/**/                   0xCFA126F3, 0x3FC5E44F,\n-/**/                   0x063F89B6, 0xBC66F443,\n-/**/                   0x2E1EECF6, 0x3FEF874C,\n-/**/                   0xE1332B16, 0xBC8C6514,\n-/**/                   0xC05A4D4C, 0x3FC6E05D,\n-/**/                   0x8B81C940, 0xBBD32C5C,\n-/**/                   0xFEFFDE24, 0x3FEF7C1A,\n-/**/                   0xC47540B1, 0xBC78F55B,\n-/**/                   0x2FBAF2B5, 0x3FC7DC10,\n-/**/                   0xE23C97C3, 0x3C45AB50,\n-/**/                   0xDF9ECE1C, 0x3FEF706B,\n-/**/                   0x0C36DCB4, 0xBC8698C8,\n-/**/                   0x2EFAA944, 0x3FC8D763,\n-/**/                   0x62CBB953, 0xBC620FA2,\n-/**/                   0xFEB82ACD, 0x3FEF643E,\n-/**/                   0xC1FE28AC, 0x3C76B00A,\n-/**/                   0xD0CEC312, 0x3FC9D252,\n-/**/                   0x80B1137D, 0x3C59C43D,\n-/**/                   0x8CFF6797, 0x3FEF5794,\n-/**/                   0x3E03B1D5, 0x3C6E3A0D,\n-/**/                   0x297A0765, 0x3FCACCDB,\n-/**/                   0x57D6CDEB, 0xBC59883B,\n-/**/                   0xBD1E3A79, 0x3FEF4A6C,\n-/**/                   0xEDAEBB57, 0x3C813DF0,\n-/**/                   0x4EDC6199, 0x3FCBC6F8,\n-/**/                   0x6A7B0CAB, 0x3C69C1A5,\n-/**/                   0xC3B3D16E, 0x3FEF3CC7,\n-/**/                   0xD28A3494, 0xBC621A3A,\n-/**/                   0x588289A3, 0x3FCCC0A6,\n-/**/                   0x9BC87C6B, 0xBC6868D0,\n-/**/                   0xD753FFED, 0x3FEF2EA5,\n-/**/                   0x5F56D583, 0x3C8CC421,\n-/**/                   0x5FB5A5D0, 0x3FCDB9E1,\n-/**/                   0xD6CC6FC2, 0xBC632E20,\n-/**/                   0x3086649F, 0x3FEF2007,\n-/**/                   0x16C1984B, 0x3C7B9404,\n-/**/                   0x7F8AE5A3, 0x3FCEB2A5,\n-/**/                   0xAF572CEB, 0xBC60BE06,\n-/**/                   0x09C5873B, 0x3FEF10EC,\n-/**/                   0x762C1283, 0x3C8D9072,\n-/**/                   0xD4F31577, 0x3FCFAAEE,\n-/**/                   0x508E32B8, 0xBC615D88,\n-/**/                   0x9F7DEEA1, 0x3FEF0154,\n-/**/                   0x99E5CAFD, 0x3C8D3C1E,\n-/**/                   0xBF65155C, 0x3FD0515C,\n-/**/                   0x9DFD8EC8, 0xBC79B8C2,\n-/**/                   0x300D2F26, 0x3FEEF141,\n-/**/                   0x08DED372, 0xBC82AA1B,\n-/**/                   0xCEF36436, 0x3FD0CD00,\n-/**/                   0x0C93E2B5, 0xBC79FB0A,\n-/**/                   0xFBC0F11C, 0x3FEEE0B1,\n-/**/                   0x80BBC3B1, 0xBC4BFD23,\n-/**/                   0xAA94DDEB, 0x3FD14861,\n-/**/                   0xB5B615A4, 0xBC6BE881,\n-/**/                   0x44D5EFA1, 0x3FEECFA7,\n-/**/                   0x4AF541D0, 0xBC556D0A,\n-/**/                   0x64C6B876, 0x3FD1C37D,\n-/**/                   0xFE0DCFF5, 0x3C746076,\n-/**/                   0x4F76EFA8, 0x3FEEBE21,\n-/**/                   0x12BA543E, 0xBC802F9F,\n-/**/                   0x111AAF36, 0x3FD23E52,\n-/**/                   0x334EFF18, 0xBC74F080,\n-/**/                   0x61BBAF4F, 0x3FEEAC20,\n-/**/                   0x3E94658D, 0x3C62C1D5,\n-/**/                   0xC43EB49F, 0x3FD2B8DD,\n-/**/                   0x99F2D807, 0x3C615538,\n-/**/                   0xC3A7CD83, 0x3FEE99A4,\n-/**/                   0x1BC53CE8, 0xBC82264B,\n-/**/                   0x94049F87, 0x3FD3331E,\n-/**/                   0xB40C302C, 0x3C7E0CB6,\n-/**/                   0xBF29A9ED, 0x3FEE86AE,\n-/**/                   0xFDBB58A7, 0x3C89397A,\n-/**/                   0x9769D3D8, 0x3FD3AD12,\n-/**/                   0x04878398, 0x3C003D55,\n-/**/                   0xA0193D40, 0x3FEE733E,\n-/**/                   0x3546CE13, 0xBC86428B,\n-/**/                   0xE69EE697, 0x3FD426B7,\n-/**/                   0x5705C59F, 0xBC7F09C7,\n-/**/                   0xB436E9D0, 0x3FEE5F54,\n-/**/                   0xD02FC8BC, 0x3C87EB0F,\n-/**/                   0x9B0F3D20, 0x3FD4A00C,\n-/**/                   0x6BB08EAD, 0x3C7823BA,\n-/**/                   0x4B2A449C, 0x3FEE4AF1,\n-/**/                   0x2E8A6833, 0xBC868CA0,\n-/**/                   0xCF68A77A, 0x3FD5190E,\n-/**/                   0x55EEF0F3, 0x3C7B3571,\n-/**/                   0xB680D6A5, 0x3FEE3614,\n-/**/                   0xAA015237, 0xBC727793,\n-/**/                   0x9FA2F597, 0x3FD591BC,\n-/**/                   0xAC3FE0CB, 0x3C67C74B,\n-/**/                   0x49ACD6C1, 0x3FEE20BF,\n-/**/                   0xC7EF636C, 0xBC5660AE,\n-/**/                   0x29078775, 0x3FD60A14,\n-/**/                   0x0BA89133, 0x3C5B1FD8,\n-/**/                   0x5A03DBCE, 0x3FEE0AF1,\n-/**/                   0x02771AE6, 0x3C5FE8E7,\n-/**/                   0x8A38D7F7, 0x3FD68213,\n-/**/                   0x02444AAD, 0xBC7D8892,\n-/**/                   0x3EBD875E, 0x3FEDF4AB,\n-/**/                   0x7E6736C4, 0xBC8E2D8A,\n-/**/                   0xE33A0255, 0x3FD6F9B8,\n-/**/                   0x4EE9DA0D, 0x3C742BC1,\n-/**/                   0x50F228D6, 0x3FEDDDED,\n-/**/                   0xD42BA2BF, 0xBC6E80C8,\n-/**/                   0x55764214, 0x3FD77102,\n-/**/                   0x314BB6CE, 0xBC66EAD7,\n-/**/                   0xEB995912, 0x3FEDC6B7,\n-/**/                   0x776DCD35, 0x3C54B364,\n-/**/                   0x03C86D4E, 0x3FD7E7EE,\n-/**/                   0xDABF5AF2, 0xBC7B63BC,\n-/**/                   0x6B888E83, 0x3FEDAF0B,\n-/**/                   0x2B5E5CEA, 0x3C8A249E,\n-/**/                   0x12826949, 0x3FD85E7A,\n-/**/                   0x9B5FACE0, 0x3C78A40E,\n-/**/                   0x2F71A9DC, 0x3FED96E8,\n-/**/                   0xD5D2039D, 0x3C8FF61B,\n-/**/                   0xA774992F, 0x3FD8D4A4,\n-/**/                   0xEA766326, 0x3C744A02,\n-/**/                   0x97E17B4A, 0x3FED7E4E,\n-/**/                   0x352BED94, 0xBC63B770,\n-/**/                   0xE9F546C5, 0x3FD94A6B,\n-/**/                   0x3E683F58, 0xBC769CE1,\n-/**/                   0x073E4040, 0x3FED653F,\n-/**/                   0x434BEC37, 0xBC876236,\n-/**/                   0x02E80510, 0x3FD9BFCE,\n-/**/                   0xA320B0A4, 0x3C709E39,\n-/**/                   0xE1C619E0, 0x3FED4BB9,\n-/**/                   0x77858F61, 0x3C8F34BB,\n-/**/                   0x1CC50CCA, 0x3FDA34C9,\n-/**/                   0x3B50CECD, 0xBC5A310E,\n-/**/                   0x8D8D7C06, 0x3FED31BF,\n-/**/                   0x3089CBDD, 0x3C7E60DD,\n-/**/                   0x63A09277, 0x3FDAA95B,\n-/**/                   0xB13C0381, 0xBC66293E,\n-/**/                   0x727D94F0, 0x3FED1750,\n-/**/                   0x1EC1A48E, 0x3C80D52B,\n-/**/                   0x05321617, 0x3FDB1D83,\n-/**/                   0xCB99F519, 0xBC7AE242,\n-/**/                   0xFA52AD9F, 0x3FECFC6C,\n-/**/                   0x508F2A0D, 0x3C88B5B5,\n-/**/                   0x30DBAC43, 0x3FDB913E,\n-/**/                   0x2F6C3FF1, 0xBC7E38AD,\n-/**/                   0x909A82E5, 0x3FECE115,\n-/**/                   0xBB31109A, 0x3C81F139,\n-/**/                   0x17B140A3, 0x3FDC048B,\n-/**/                   0x757E9FA7, 0x3C619FE6,\n-/**/                   0xA2B2972E, 0x3FECC54A,\n-/**/                   0x2BA83A98, 0x3C64EE16,\n-/**/                   0xEC7FD19E, 0x3FDC7767,\n-/**/                   0x1A3D5826, 0xBC5EB14D,\n-/**/                   0x9FC67D0B, 0x3FECA90C,\n-/**/                   0x485E3462, 0xBC646A81,\n-/**/                   0xE3D4A51F, 0x3FDCE9D2,\n-/**/                   0x12DAE298, 0xBC62FC8A,\n-/**/                   0xF8CE1A84, 0x3FEC8C5B,\n-/**/                   0xA1590123, 0x3C7AB3D1,\n-/**/                   0x34047661, 0x3FDD5BCA,\n-/**/                   0xA75FC29C, 0x3C728A44,\n-/**/                   0x208BE53B, 0x3FEC6F39,\n-/**/                   0xFBAADB42, 0xBC8741DB,\n-/**/                   0x15329C9A, 0x3FDDCD4C,\n-/**/                   0xE171FD9A, 0x3C70D4C6,\n-/**/                   0x8B8B175E, 0x3FEC51A4,\n-/**/                   0x3B9AA880, 0xBC61BBB4,\n-/**/                   0xC1582A69, 0x3FDE3E56,\n-/**/                   0x1099F88F, 0xBC50A482,\n-/**/                   0xB01DDD81, 0x3FEC339E,\n-/**/                   0xEE82C5C0, 0xBC8CAAF5,\n-/**/                   0x744B05F0, 0x3FDEAEE8,\n-/**/                   0x3C9B027D, 0xBC5789B4,\n-/**/                   0x065B7D50, 0x3FEC1528,\n-/**/                   0x1312E828, 0xBC889211,\n-/**/                   0x6BC4F97B, 0x3FDF1EFF,\n-/**/                   0xF8A7525C, 0x3C717212,\n-/**/                   0x081E7536, 0x3FEBF641,\n-/**/                   0x1628A9A1, 0x3C8B7BD7,\n-/**/                   0xE76ABC97, 0x3FDF8E99,\n-/**/                   0xAF2D00A3, 0x3C59D950,\n-/**/                   0x310294F5, 0x3FEBD6EA,\n-/**/                   0xC88C109D, 0x3C731BBC,\n-/**/                   0x28D2F57A, 0x3FDFFDB6,\n-/**/                   0x2E905B6A, 0x3C6F4A99,\n-/**/                   0xFE630F32, 0x3FEBB723,\n-/**/                   0x452D0A39, 0x3C772BD2,\n-/**/                   0x39C69955, 0x3FE03629,\n-/**/                   0x78397B01, 0xBC82D8CD,\n-/**/                   0xEF58840E, 0x3FEB96EE,\n-/**/                   0xC78FADE0, 0x3C545A3C,\n-/**/                   0x86946E5B, 0x3FE06D36,\n-/**/                   0x4538FF1B, 0x3C83F5AE,\n-/**/                   0x84B704C2, 0x3FEB764B,\n-/**/                   0xC21B389B, 0xBC8F5848,\n-/**/                   0x1E9E1001, 0x3FE0A402,\n-/**/                   0xA13914F6, 0xBC86F643,\n-/**/                   0x410C104E, 0x3FEB553A,\n-/**/                   0x47027A16, 0x3C58FF79,\n-/**/                   0x26B5672E, 0x3FE0DA8B,\n-/**/                   0xF0BEE909, 0xBC8A58DE,\n-/**/                   0xA89C8948, 0x3FEB33BB,\n-/**/                   0x1D1F6CA9, 0x3C8EA6A5,\n-/**/                   0xC4B69C3B, 0x3FE110D0,\n-/**/                   0x98809981, 0x3C8D9189,\n-/**/                   0x4162A4C6, 0x3FEB11D0,\n-/**/                   0x1EFBC0C2, 0x3C71DD56,\n-/**/                   0x1F8B7F82, 0x3FE146D2,\n-/**/                   0x5E2739A8, 0x3C7BF953,\n-/**/                   0x930BD275, 0x3FEAEF78,\n-/**/                   0x79746F94, 0xBC7F8362,\n-/**/                   0x5F2EEDB0, 0x3FE17C8E,\n-/**/                   0x102E2488, 0x3C635E57,\n-/**/                   0x26F69DE5, 0x3FEACCB5,\n-/**/                   0x8DD6B6CC, 0x3C88FB6A,\n-/**/                   0xACB02FDD, 0x3FE1B204,\n-/**/                   0x70CBB5FF, 0xBC5F190C,\n-/**/                   0x88308913, 0x3FEAA986,\n-/**/                   0x07CD5070, 0xBC0B83D6,\n-/**/                   0x3236574C, 0x3FE1E734,\n-/**/                   0xA4F41D5A, 0x3C722A3F,\n-/**/                   0x4373E02D, 0x3FEA85ED,\n-/**/                   0x385EC792, 0x3C69BE06,\n-/**/                   0x1B0394CF, 0x3FE21C1C,\n-/**/                   0x4B23AA31, 0x3C5E5B32,\n-/**/                   0xE72586AF, 0x3FEA61E9,\n-/**/                   0xE2FD453F, 0x3C858330,\n-/**/                   0x93788BBB, 0x3FE250BB,\n-/**/                   0x2457BCCE, 0x3C7EA3D0,\n-/**/                   0x0352BDCF, 0x3FEA3D7D,\n-/**/                   0xECA19669, 0xBC868DBA,\n-/**/                   0xC917A067, 0x3FE28511,\n-/**/                   0xD9A16B70, 0xBC801DF1,\n-/**/                   0x29AEE445, 0x3FEA18A7,\n-/**/                   0x736C0358, 0x3C395E25,\n-/**/                   0xEA88421E, 0x3FE2B91D,\n-/**/                   0xDB216AB0, 0xBC8FA371,\n-/**/                   0xED912F85, 0x3FE9F368,\n-/**/                   0xC5791606, 0xBC81D200,\n-/**/                   0x279A3082, 0x3FE2ECDF,\n-/**/                   0xE0E7E37E, 0x3C8D3557,\n-/**/                   0xE3F25E5C, 0x3FE9CDC2,\n-/**/                   0x12993F62, 0x3C83F991,\n-/**/                   0xB148BC4F, 0x3FE32054,\n-/**/                   0x095A135B, 0x3C8F6B42,\n-/**/                   0xA36A6514, 0x3FE9A7B5,\n-/**/                   0xCC9FA7A9, 0x3C8722CF,\n-/**/                   0xB9BE0367, 0x3FE3537D,\n-/**/                   0x7AF040F0, 0x3C6B327E,\n-/**/                   0xC42E1310, 0x3FE98141,\n-/**/                   0x0488F08D, 0x3C8D1FF8,\n-/**/                   0x7456282B, 0x3FE38659,\n-/**/                   0xA93B07A8, 0xBC710FAD,\n-/**/                   0xE00CB1FD, 0x3FE95A67,\n-/**/                   0xA21F862D, 0xBC80BEFD,\n-/**/                   0x15A2840A, 0x3FE3B8E7,\n-/**/                   0xA7D2F07B, 0xBC797653,\n-/**/                   0x926D9E92, 0x3FE93328,\n-/**/                   0x03600CDA, 0xBC8BB770,\n-/**/                   0xD36CD53A, 0x3FE3EB25,\n-/**/                   0xE1570FC0, 0xBC5BE570,\n-/**/                   0x784DDAF7, 0x3FE90B84,\n-/**/                   0x0AB93B87, 0xBC70FEB1,\n-/**/                   0xE4BA6790, 0x3FE41D14,\n-/**/                   0xD287ECF5, 0x3C84608F,\n-/**/                   0x303D9AD1, 0x3FE8E37C,\n-/**/                   0xB53D4BF8, 0xBC6463A4,\n-/**/                   0x81CF386B, 0x3FE44EB3,\n-/**/                   0x1E6A5505, 0xBC83ED6C,\n-/**/                   0x5A5DC900, 0x3FE8BB10,\n-/**/                   0x3E9474C1, 0x3C8863E0,\n-/**/                   0xE431159F, 0x3FE48000,\n-/**/                   0x7463ED10, 0xBC8B194A,\n-/**/                   0x985D871F, 0x3FE89241,\n-/**/                   0xC413ED84, 0x3C8C48D9,\n-/**/                   0x46AAB761, 0x3FE4B0FC,\n-/**/                   0x738CC59A, 0x3C20DA05,\n-/**/                   0x8D77A6C6, 0x3FE86910,\n-/**/                   0xE2BFE9DD, 0x3C7338FF,\n-/**/                   0xE54ED51B, 0x3FE4E1A4,\n-/**/                   0x89B7C76A, 0xBC8A492F,\n-/**/                   0xDE701CA0, 0x3FE83F7D,\n-/**/                   0x609BC6E8, 0xBC4152CF,\n-/**/                   0xFD7B351C, 0x3FE511F9,\n-/**/                   0x61C48831, 0xBC85C0E8,\n-/**/                   0x31916D5D, 0x3FE8158A,\n-/**/                   0x0B8228DE, 0xBC6DE8B9,\n-/**/                   0xCDDBB724, 0x3FE541FA,\n-/**/                   0x8520D391, 0x3C7232C2,\n-/**/                   0x2EAA1488, 0x3FE7EB36,\n-/**/                   0xA4A5959F, 0x3C5A1D65,\n-/**/                   0x966D59B3, 0x3FE571A6,\n-/**/                   0x4D0FB198, 0x3C5C843B,\n-/**/                   0x7F09E54F, 0x3FE7C082,\n-/**/                   0xD72AEE68, 0xBC6C73D6,\n-/**/                   0x98813A12, 0x3FE5A0FC,\n-/**/                   0xB7D4227B, 0xBC8D82E2,\n-/**/                   0xCD7F6543, 0x3FE7956F,\n-/**/                   0xE9D45AE4, 0xBC8AB276,\n-/**/                   0x16BF8F0D, 0x3FE5CFFC,\n-/**/                   0x70EB578A, 0x3C896CB3,\n-/**/                   0xC655211F, 0x3FE769FE,\n-/**/                   0xCF8C68C5, 0xBC6827D5,\n-/**/                   0x552A9E57, 0x3FE5FEA4,\n-/**/                   0xF7EE20B7, 0x3C80B6CE,\n-/**/                   0x174EFBA1, 0x3FE73E30,\n-/**/                   0x3D94AD5F, 0xBC65D3AE,\n-/**/                   0x9921AC79, 0x3FE62CF4,\n-/**/                   0x55B6241A, 0xBC8EDD98,\n-/**/                   0x6FA77678, 0x3FE71204,\n-/**/                   0xA5029C81, 0x3C8425B0,\n-/**/                   0x2963E755, 0x3FE65AEC,\n-/**/                   0x6B71053C, 0x3C8126F9,\n-/**/                   0x800CF55E, 0x3FE6E57C,\n-/**/                   0xDEDBD0A6, 0x3C860286,\n-/**/                   0x4E134B2F, 0x3FE6888A,\n-/**/                   0x7644D5E6, 0xBC86B7D3,\n-/**/                   0xFA9EFB5D, 0x3FE6B898,\n-/**/                   0x86CCF4B2, 0x3C715AC7,\n-/**/                   0x50B7821A, 0x3FE6B5CE,\n-/**/                   0x8F702E0F, 0xBC65D515,\n-/**/                   0x92EB6253, 0x3FE68B5A,\n-/**/                   0xD985F89C, 0xBC89A91A,\n-/**/                   0x7C40BDE1, 0x3FE6E2B7,\n-/**/                   0x857FAD53, 0xBC70E729,\n-/**/                   0xFDEB8CBA, 0x3FE65DC1,\n-/**/                   0x47337C77, 0xBC597C1B,\n-/**/                   0x1D0A8C40, 0x3FE70F45,\n-/**/                   0x3885770D, 0x3C697EDE,\n-/**/                   0xF20191C7, 0x3FE62FCF,\n-/**/                   0x895756EF, 0x3C6D9143,\n-/**/                   0x80DEA578, 0x3FE73B76,\n-/**/                   0x06DC12A2, 0xBC722483,\n-/**/                   0x26F563DF, 0x3FE60185,\n-/**/                   0xE0E432D0, 0x3C846CA5,\n-/**/                   0xF6F7B524, 0x3FE7674A,\n-/**/                   0x94AC84A8, 0x3C7E9D3F,\n-/**/                   0x55F1F17A, 0x3FE5D2E2,\n-/**/                   0x04C8892B, 0x3C803141,\n-/**/                   0xD0041D52, 0x3FE792C1,\n-/**/                   0xEEB354EB, 0xBC8ABF05,\n-/**/                   0x39824077, 0x3FE5A3E8,\n-/**/                   0x2759BE62, 0x3C8428AA,\n-/**/                   0x5E28B3C2, 0x3FE7BDDA,\n-/**/                   0x7CCD0393, 0x3C4AD119,\n-/**/                   0x8D8E83F2, 0x3FE57497,\n-/**/                   0xAF282D23, 0x3C8F4714,\n-/**/                   0xF5037959, 0x3FE7E893,\n-/**/                   0xAA650C4C, 0x3C80EEFB,\n-/**/                   0x0F592CA5, 0x3FE544F1,\n-/**/                   0xE6C7A62F, 0xBC8E7AE8,\n-/**/                   0xE9AE4BA4, 0x3FE812ED,\n-/**/                   0xDF402DDA, 0xBC87830A,\n-/**/                   0x7D7BF3DA, 0x3FE514F5,\n-/**/                   0x8073C259, 0x3C747A10 } };\n-#endif\n-#endif"}, {"sha": "a4f896a4659f5105fd2cc7f681912108c1a99175", "filename": "libgcc-math/dbl-64/sincos32.c", "status": "removed", "additions": 0, "deletions": 352, "changes": 352, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fsincos32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fsincos32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc-math%2Fdbl-64%2Fsincos32.c?ref=5cd88d6857dffe4f10c834c773c300881ec20e32", "patch": "@@ -1,352 +0,0 @@\n-/*\n- * IBM Accurate Mathematical Library\n- * written by International Business Machines Corp.\n- * Copyright (C) 2001 Free Software Foundation\n- *\n- * This program is free software; you can redistribute it and/or modify\n- * it under the terms of the GNU Lesser General Public License as published by\n- * the Free Software Foundation; either version 2.1 of the License, or\n- * (at your option) any later version.\n- *\n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Lesser General Public License for more details.\n- *\n- * You should have received a copy of the GNU Lesser General Public License\n- * along with this program; if not, write to the Free Software\n- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n- */\n-/****************************************************************/\n-/*  MODULE_NAME: sincos32.c                                     */\n-/*                                                              */\n-/*  FUNCTIONS: ss32                                             */\n-/*             cc32                                             */\n-/*             c32                                              */\n-/*             sin32                                            */\n-/*             cos32                                            */\n-/*             mpsin                                            */\n-/*             mpcos                                            */\n-/*             mpranred                                         */\n-/*             mpsin1                                           */\n-/*             mpcos1                                           */\n-/*                                                              */\n-/* FILES NEEDED: endian.h mpa.h sincos32.h                      */\n-/*               mpa.c                                          */\n-/*                                                              */\n-/* Multi Precision sin() and cos() function with p=32  for sin()*/\n-/* cos() arcsin() and arccos() routines                         */\n-/* In addition mpranred() routine  performs range  reduction of */\n-/* a double number x into multi precision number   y,           */\n-/* such that y=x-n*pi/2, abs(y)<pi/4,  n=0,+-1,+-2,....         */\n-/****************************************************************/\n-#include \"endian.h\"\n-#include \"mpa.h\"\n-#include \"sincos32.h\"\n-#include \"math_private.h\"\n-\n-/****************************************************************/\n-/* Compute Multi-Precision sin() function for given p.  Receive */\n-/* Multi  Precision number x and result stored at y             */\n-/****************************************************************/\n-static void ss32(mp_no *x, mp_no *y, int p) {\n-  int i;\n-  double a;\n-#if 0\n-  double b;\n-  static const mp_no mpone = {1,{1.0,1.0}};\n-#endif\n-  mp_no mpt1,x2,gor,sum ,mpk={1,{1.0}};\n-#if 0\n-  mp_no mpt2;\n-#endif\n-  for (i=1;i<=p;i++) mpk.d[i]=0;\n-\n-  __mul(x,x,&x2,p);\n-  __cpy(&oofac27,&gor,p);\n-  __cpy(&gor,&sum,p);\n-  for (a=27.0;a>1.0;a-=2.0) {\n-    mpk.d[1]=a*(a-1.0);\n-    __mul(&gor,&mpk,&mpt1,p);\n-    __cpy(&mpt1,&gor,p);\n-    __mul(&x2,&sum,&mpt1,p);\n-    __sub(&gor,&mpt1,&sum,p);\n-  }\n-  __mul(x,&sum,y,p);\n-}\n-\n-/**********************************************************************/\n-/* Compute Multi-Precision cos() function for given p. Receive Multi  */\n-/* Precision number x and result stored at y                          */\n-/**********************************************************************/\n-static void cc32(mp_no *x, mp_no *y, int p) {\n-  int i;\n-  double a;\n-#if 0\n-  double b;\n-  static const mp_no mpone = {1,{1.0,1.0}};\n-#endif\n-  mp_no mpt1,x2,gor,sum ,mpk={1,{1.0}};\n-#if 0\n-  mp_no mpt2;\n-#endif\n-  for (i=1;i<=p;i++) mpk.d[i]=0;\n-\n-  __mul(x,x,&x2,p);\n-  mpk.d[1]=27.0;\n-  __mul(&oofac27,&mpk,&gor,p);\n-  __cpy(&gor,&sum,p);\n-  for (a=26.0;a>2.0;a-=2.0) {\n-    mpk.d[1]=a*(a-1.0);\n-    __mul(&gor,&mpk,&mpt1,p);\n-    __cpy(&mpt1,&gor,p);\n-    __mul(&x2,&sum,&mpt1,p);\n-    __sub(&gor,&mpt1,&sum,p);\n-  }\n-  __mul(&x2,&sum,y,p);\n-}\n-\n-/***************************************************************************/\n-/* c32()   computes both sin(x), cos(x) as Multi precision numbers         */\n-/***************************************************************************/\n-void __c32(mp_no *x, mp_no *y, mp_no *z, int p) {\n-  static const mp_no mpt={1,{1.0,2.0}}, one={1,{1.0,1.0}};\n-  mp_no u,t,t1,t2,c,s;\n-  int i;\n-  __cpy(x,&u,p);\n-  u.e=u.e-1;\n-  cc32(&u,&c,p);\n-  ss32(&u,&s,p);\n-  for (i=0;i<24;i++) {\n-    __mul(&c,&s,&t,p);\n-    __sub(&s,&t,&t1,p);\n-    __add(&t1,&t1,&s,p);\n-    __sub(&mpt,&c,&t1,p);\n-    __mul(&t1,&c,&t2,p);\n-    __add(&t2,&t2,&c,p);\n-  }\n-  __sub(&one,&c,y,p);\n-  __cpy(&s,z,p);\n-}\n-\n-/************************************************************************/\n-/*Routine receive double x and two double results of sin(x) and return  */\n-/*result which is more accurate                                         */\n-/*Computing sin(x) with multi precision routine c32                     */\n-/************************************************************************/\n-double __sin32(double x, double res, double res1) {\n-  int p;\n-  mp_no a,b,c;\n-  p=32;\n-  __dbl_mp(res,&a,p);\n-  __dbl_mp(0.5*(res1-res),&b,p);\n-  __add(&a,&b,&c,p);\n-  if (x>0.8)\n-  { __sub(&hp,&c,&a,p);\n-    __c32(&a,&b,&c,p);\n-  }\n-  else __c32(&c,&a,&b,p);     /* b=sin(0.5*(res+res1))  */\n-  __dbl_mp(x,&c,p);           /* c = x                  */\n-  __sub(&b,&c,&a,p);\n-  /* if a>0 return min(res,res1), otherwise return max(res,res1) */\n-  if (a.d[0]>0)  return (res<res1)?res:res1;\n-  else  return (res>res1)?res:res1;\n-}\n-\n-/************************************************************************/\n-/*Routine receive double x and two double results of cos(x) and return  */\n-/*result which is more accurate                                         */\n-/*Computing cos(x) with multi precision routine c32                     */\n-/************************************************************************/\n-double __cos32(double x, double res, double res1) {\n-  int p;\n-  mp_no a,b,c;\n-  p=32;\n-  __dbl_mp(res,&a,p);\n-  __dbl_mp(0.5*(res1-res),&b,p);\n-  __add(&a,&b,&c,p);\n-  if (x>2.4)\n-  { __sub(&pi,&c,&a,p);\n-    __c32(&a,&b,&c,p);\n-    b.d[0]=-b.d[0];\n-  }\n-  else if (x>0.8)\n-       { __sub(&hp,&c,&a,p);\n-         __c32(&a,&c,&b,p);\n-       }\n-  else __c32(&c,&b,&a,p);     /* b=cos(0.5*(res+res1))  */\n-  __dbl_mp(x,&c,p);    /* c = x                  */\n-  __sub(&b,&c,&a,p);\n-             /* if a>0 return max(res,res1), otherwise return min(res,res1) */\n-  if (a.d[0]>0)  return (res>res1)?res:res1;\n-  else  return (res<res1)?res:res1;\n-}\n-\n-/*******************************************************************/\n-/*Compute sin(x+dx) as Multi Precision number and return result as */\n-/* double                                                          */\n-/*******************************************************************/\n-double __mpsin(double x, double dx) {\n-  int p;\n-  double y;\n-  mp_no a,b,c;\n-  p=32;\n-  __dbl_mp(x,&a,p);\n-  __dbl_mp(dx,&b,p);\n-  __add(&a,&b,&c,p);\n-  if (x>0.8) { __sub(&hp,&c,&a,p); __c32(&a,&b,&c,p); }\n-  else __c32(&c,&a,&b,p);     /* b = sin(x+dx)     */\n-  __mp_dbl(&b,&y,p);\n-  return y;\n-}\n-\n-/*******************************************************************/\n-/* Compute cos()of double-length number (x+dx) as Multi Precision  */\n-/* number and return result as double                              */\n-/*******************************************************************/\n-double __mpcos(double x, double dx) {\n-  int p;\n-  double y;\n-  mp_no a,b,c;\n-  p=32;\n-  __dbl_mp(x,&a,p);\n-  __dbl_mp(dx,&b,p);\n-  __add(&a,&b,&c,p);\n-  if (x>0.8)\n-  { __sub(&hp,&c,&b,p);\n-    __c32(&b,&c,&a,p);\n-  }\n-  else __c32(&c,&a,&b,p);     /* a = cos(x+dx)     */\n-  __mp_dbl(&a,&y,p);\n-  return y;\n-}\n-\n-/******************************************************************/\n-/* mpranred() performs range reduction of a double number x into  */\n-/* multi precision number y, such that y=x-n*pi/2, abs(y)<pi/4,   */\n-/* n=0,+-1,+-2,....                                               */\n-/* Return int which indicates in which quarter of circle x is     */\n-/******************************************************************/\n-int __mpranred(double x, mp_no *y, int p)\n-{\n-  number v;\n-  double t,xn;\n-  int i,k,n;\n-  static const mp_no one = {1,{1.0,1.0}};\n-  mp_no a,b,c;\n-\n-  if (ABS(x) < 2.8e14) {\n-    t = (x*hpinv.d + toint.d);\n-    xn = t - toint.d;\n-    v.d = t;\n-    n =v.i[LOW_HALF]&3;\n-    __dbl_mp(xn,&a,p);\n-    __mul(&a,&hp,&b,p);\n-    __dbl_mp(x,&c,p);\n-    __sub(&c,&b,y,p);\n-    return n;\n-  }\n-  else {                      /* if x is very big more precision required */\n-    __dbl_mp(x,&a,p);\n-    a.d[0]=1.0;\n-    k = a.e-5;\n-    if (k < 0) k=0;\n-    b.e = -k;\n-    b.d[0] = 1.0;\n-    for (i=0;i<p;i++) b.d[i+1] = toverp[i+k];\n-    __mul(&a,&b,&c,p);\n-    t = c.d[c.e];\n-    for (i=1;i<=p-c.e;i++) c.d[i]=c.d[i+c.e];\n-    for (i=p+1-c.e;i<=p;i++) c.d[i]=0;\n-    c.e=0;\n-    if (c.d[1] >=  8388608.0)\n-    { t +=1.0;\n-      __sub(&c,&one,&b,p);\n-      __mul(&b,&hp,y,p);\n-    }\n-    else __mul(&c,&hp,y,p);\n-    n = (int) t;\n-    if (x < 0) { y->d[0] = - y->d[0]; n = -n; }\n-    return (n&3);\n-  }\n-}\n-\n-/*******************************************************************/\n-/* Multi-Precision sin() function subroutine, for p=32.  It is     */\n-/* based on the routines mpranred() and c32().                     */\n-/*******************************************************************/\n-double __mpsin1(double x)\n-{\n-  int p;\n-  int n;\n-  mp_no u,s,c;\n-  double y;\n-  p=32;\n-  n=__mpranred(x,&u,p);               /* n is 0, 1, 2 or 3 */\n-  __c32(&u,&c,&s,p);\n-  switch (n) {                      /* in which quarter of unit circle y is*/\n-  case 0:\n-    __mp_dbl(&s,&y,p);\n-    return y;\n-    break;\n-\n-  case 2:\n-    __mp_dbl(&s,&y,p);\n-    return -y;\n-    break;\n-\n-  case 1:\n-    __mp_dbl(&c,&y,p);\n-    return y;\n-    break;\n-\n-  case 3:\n-    __mp_dbl(&c,&y,p);\n-    return -y;\n-    break;\n-\n-  }\n-  return 0;                     /* unreachable, to make the compiler happy */\n-}\n-\n-/*****************************************************************/\n-/* Multi-Precision cos() function subroutine, for p=32.  It is   */\n-/* based  on the routines mpranred() and c32().                  */\n-/*****************************************************************/\n-\n-double __mpcos1(double x)\n-{\n-  int p;\n-  int n;\n-  mp_no u,s,c;\n-  double y;\n-\n-  p=32;\n-  n=__mpranred(x,&u,p);              /* n is 0, 1, 2 or 3 */\n-  __c32(&u,&c,&s,p);\n-  switch (n) {                     /* in what quarter of unit circle y is*/\n-\n-  case 0:\n-    __mp_dbl(&c,&y,p);\n-    return y;\n-    break;\n-\n-  case 2:\n-    __mp_dbl(&c,&y,p);\n-    return -y;\n-    break;\n-\n-  case 1:\n-    __mp_dbl(&s,&y,p);\n-    return -y;\n-    break;\n-\n-  case 3:\n-    __mp_dbl(&s,&y,p);\n-    return y;\n-    break;\n-\n-  }\n-  return 0;                     /* unreachable, to make the compiler happy */\n-}\n-/******************************************************************/"}, {"sha": "ee9d5a4ccfb8a246db3da6052260a0bbd4143872", "filename": "libgcc-math/dbl-64/sincos32.h", "status": "removed", "additions": 0, "deletions": 82, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fsincos32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fsincos32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc-math%2Fdbl-64%2Fsincos32.h?ref=5cd88d6857dffe4f10c834c773c300881ec20e32", "patch": "@@ -1,82 +0,0 @@\n-/*\n- * IBM Accurate Mathematical Library\n- * Written by International Business Machines Corp.\n- * Copyright (C) 2001 Free Software Foundation, Inc.\n- *\n- * This program is free software; you can redistribute it and/or modify\n- * it under the terms of the GNU Lesser General Public License as published by\n- * the Free Software Foundation; either version 2.1 of the License, or\n- * (at your option) any later version.\n- *\n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Lesser General Public License for more details.\n- *\n- * You should have received a copy of the GNU Lesser General Public License\n- * along with this program; if not, write to the Free Software\n- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n- */\n-\n-/******************************************************************/\n-/*                                                                */\n-/* MODULE_NAME:sincos32.h                                         */\n-/*                                                                */\n-/* common data and variables prototype and definition             */\n-/******************************************************************/\n-\n-#ifndef SINCOS32_H\n-#define SINCCOS32_H\n-\n-#ifdef BIG_ENDI\n-static const number\n-/**/          hpinv = {{0x3FE45F30, 0x6DC9C883}}, /*  0.63661977236758138    */\n-/**/          toint = {{0x43380000, 0x00000000}}; /*  6755399441055744       */\n-\n-#else\n-#ifdef LITTLE_ENDI\n-static const number\n-/**/          hpinv = {{0x6DC9C883, 0x3FE45F30}}, /*  0.63661977236758138    */\n-/**/          toint = {{0x00000000, 0x43380000}}; /*  6755399441055744       */\n-\n-#endif\n-#endif\n-\n-static const mp_no\n-  oofac27 = {-3,{1.0,7.0,4631664.0,12006312.0,13118056.0,6538613.0,646354.0,\n-   8508025.0,9131256.0,7548776.0,2529842.0,8864927.0,660489.0,15595125.0,12777885.0,\n-   11618489.0,13348664.0,5486686.0,514518.0,11275535.0,4727621.0,3575562.0,\n-   13579710.0,5829745.0,7531862.0,9507898.0,6915060.0,4079264.0,1907586.0,\n-   6078398.0,13789314.0,5504104.0,14136.0}},\n-  pi = {1,{1.0,3.0,\n-    2375530.0,8947107.0,578323.0,1673774.0,225395.0,4498441.0,3678761.0,\n-    10432976.0,536314.0,10021966.0,7113029.0,2630118.0,3723283.0,7847508.0,\n-    6737716.0,15273068.0,12626985.0,12044668.0,5299519.0,8705461.0,11880201.0,\n-    1544726.0,14014857.0,7994139.0,13709579.0,10918111.0,11906095.0,16610011.0,\n-    13638367.0,12040417.0,11529578.0,2522774.0}},\n-   hp = {1,{1.0, 1.0,\n-    9576373.0,4473553.0,8677769.0,9225495.0,112697.0,10637828.0,\n-    10227988.0,13605096.0,268157.0,5010983.0,3556514.0,9703667.0,\n-    1861641.0,12312362.0,3368858.0,7636534.0,6313492.0,14410942.0,\n-    2649759.0,12741338.0,14328708.0,9160971.0,7007428.0,12385677.0,\n-    15243397.0,13847663.0,14341655.0,16693613.0,15207791.0,14408816.0,\n-    14153397.0,1261387.0,6110792.0,2291862.0,4181138.0,5295267.0}};\n-\n-static const double toverp[75] = {\n-  10680707.0,  7228996.0,  1387004.0,  2578385.0, 16069853.0,\n-  12639074.0,  9804092.0,  4427841.0, 16666979.0, 11263675.0,\n-  12935607.0,  2387514.0,  4345298.0, 14681673.0,  3074569.0,\n-  13734428.0, 16653803.0,  1880361.0, 10960616.0,  8533493.0,\n-   3062596.0,  8710556.0,  7349940.0,  6258241.0,  3772886.0,\n-   3769171.0,  3798172.0,  8675211.0, 12450088.0,  3874808.0,\n-   9961438.0,   366607.0, 15675153.0,  9132554.0,  7151469.0,\n-   3571407.0,  2607881.0, 12013382.0,  4155038.0,  6285869.0,\n-   7677882.0, 13102053.0, 15825725.0,   473591.0,  9065106.0,\n-  15363067.0,  6271263.0,  9264392.0,  5636912.0,  4652155.0,\n-   7056368.0, 13614112.0, 10155062.0,  1944035.0,  9527646.0,\n-  15080200.0,  6658437.0,  6231200.0,  6832269.0, 16767104.0,\n-   5075751.0,  3212806.0,  1398474.0,  7579849.0,  6349435.0,\n-  12618859.0,  4703257.0, 12806093.0, 14477321.0,  2786137.0,\n-  12875403.0,  9837734.0, 14528324.0, 13719321.0,   343717.0 };\n-\n-#endif"}, {"sha": "78c107f709324cd5d49f9c3f0fb388ccbbd199bb", "filename": "libgcc-math/dbl-64/slowexp.c", "status": "removed", "additions": 0, "deletions": 66, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fslowexp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fslowexp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc-math%2Fdbl-64%2Fslowexp.c?ref=5cd88d6857dffe4f10c834c773c300881ec20e32", "patch": "@@ -1,66 +0,0 @@\n-/*\n- * IBM Accurate Mathematical Library\n- * written by International Business Machines Corp.\n- * Copyright (C) 2001 Free Software Foundation\n- *\n- * This program is free software; you can redistribute it and/or modify\n- * it under the terms of the GNU Lesser General Public License as published by\n- * the Free Software Foundation; either version 2.1 of the License, or\n- * (at your option) any later version.\n- *\n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Lesser General Public License for more details.\n- *\n- * You should have received a copy of the GNU Lesser General Public License\n- * along with this program; if not, write to the Free Software\n- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n- */\n-/**************************************************************************/\n-/*  MODULE_NAME:slowexp.c                                                 */\n-/*                                                                        */\n-/*  FUNCTION:slowexp                                                      */\n-/*                                                                        */\n-/*  FILES NEEDED:mpa.h                                                    */\n-/*               mpa.c mpexp.c                                            */\n-/*                                                                        */\n-/*Converting from double precision to Multi-precision and calculating     */\n-/* e^x                                                                    */\n-/**************************************************************************/\n-#include \"mpa.h\"\n-#include \"math_private.h\"\n-\n-void __mpexp(mp_no *x, mp_no *y, int p);\n-\n-/*Converting from double precision to Multi-precision and calculating  e^x */\n-double __slowexp(double x) {\n-  double w,z,res,eps=3.0e-26;\n-#if 0\n-  double y;\n-#endif\n-  int p;\n-#if 0\n-  int orig,i;\n-#endif\n-  mp_no mpx, mpy, mpz,mpw,mpeps,mpcor;\n-\n-  p=6;\n-  __dbl_mp(x,&mpx,p); /* Convert a double precision number  x               */\n-                    /* into a multiple precision number mpx with prec. p. */\n-  __mpexp(&mpx, &mpy, p); /* Multi-Precision exponential function */\n-  __dbl_mp(eps,&mpeps,p);\n-  __mul(&mpeps,&mpy,&mpcor,p);\n-  __add(&mpy,&mpcor,&mpw,p);\n-  __sub(&mpy,&mpcor,&mpz,p);\n-  __mp_dbl(&mpw, &w, p);\n-  __mp_dbl(&mpz, &z, p);\n-  if (w == z) return w;\n-  else  {                   /* if calculating is not exactly   */\n-    p = 32;\n-    __dbl_mp(x,&mpx,p);\n-    __mpexp(&mpx, &mpy, p);\n-    __mp_dbl(&mpy, &res, p);\n-    return res;\n-  }\n-}"}, {"sha": "e11a532bf863e3bd05bd5735288288edd5851cd5", "filename": "libgcc-math/dbl-64/slowpow.c", "status": "removed", "additions": 0, "deletions": 74, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fslowpow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fslowpow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc-math%2Fdbl-64%2Fslowpow.c?ref=5cd88d6857dffe4f10c834c773c300881ec20e32", "patch": "@@ -1,74 +0,0 @@\n-/*\n- * IBM Accurate Mathematical Library\n- * written by International Business Machines Corp.\n- * Copyright (C) 2001 Free Software Foundation\n- *\n- * This program is free software; you can redistribute it and/or modify\n- * it under the terms of the GNU Lesser General Public License as published by\n- * the Free Software Foundation; either version 2.1 of the License, or\n- * (at your option) any later version.\n- *\n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Lesser General Public License for more details.\n- *\n- * You should have received a copy of the GNU Lesser General Public License\n- * along with this program; if not, write to the Free Software\n- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n- */\n-/*************************************************************************/\n-/* MODULE_NAME:slowpow.c                                                 */\n-/*                                                                       */\n-/* FUNCTION:slowpow                                                      */\n-/*                                                                       */\n-/*FILES NEEDED:mpa.h                                                     */\n-/*             mpa.c mpexp.c mplog.c halfulp.c                           */\n-/*                                                                       */\n-/* Given two IEEE double machine numbers y,x , routine  computes the     */\n-/* correctly  rounded (to nearest) value of x^y. Result calculated  by   */\n-/* multiplication (in halfulp.c) or if result isn't accurate enough      */\n-/* then routine converts x and y into multi-precision doubles     and    */\n-/* calls to mpexp routine                                                */\n-/*************************************************************************/\n-\n-#include \"mpa.h\"\n-#include \"math_private.h\"\n-\n-void __mpexp(mp_no *x, mp_no *y, int p);\n-void __mplog(mp_no *x, mp_no *y, int p);\n-double ulog(double);\n-double __halfulp(double x,double y);\n-\n-double __slowpow(double x, double y, double z) {\n-  double res,res1;\n-  mp_no mpx, mpy, mpz,mpw,mpp,mpr,mpr1;\n-  static const mp_no eps = {-3,{1.0,4.0}};\n-  int p;\n-\n-  res = __halfulp(x,y);        /* halfulp() returns -10 or x^y             */\n-  if (res >= 0) return res;  /* if result was really computed by halfulp */\n-                  /*  else, if result was not really computed by halfulp */\n-  p = 10;         /*  p=precision   */\n-  __dbl_mp(x,&mpx,p);\n-  __dbl_mp(y,&mpy,p);\n-  __dbl_mp(z,&mpz,p);\n-  __mplog(&mpx, &mpz, p);     /* log(x) = z   */\n-  __mul(&mpy,&mpz,&mpw,p);    /*  y * z =w    */\n-  __mpexp(&mpw, &mpp, p);     /*  e^w =pp     */\n-  __add(&mpp,&eps,&mpr,p);    /*  pp+eps =r   */\n-  __mp_dbl(&mpr, &res, p);\n-  __sub(&mpp,&eps,&mpr1,p);   /*  pp -eps =r1 */\n-  __mp_dbl(&mpr1, &res1, p);  /*  converting into double precision */\n-  if (res == res1) return res;\n-\n-  p = 32;     /* if we get here result wasn't calculated exactly, continue */\n-  __dbl_mp(x,&mpx,p);                          /* for more exact calculation */\n-  __dbl_mp(y,&mpy,p);\n-  __dbl_mp(z,&mpz,p);\n-  __mplog(&mpx, &mpz, p);   /* log(c)=z  */\n-  __mul(&mpy,&mpz,&mpw,p);  /* y*z =w    */\n-  __mpexp(&mpw, &mpp, p);   /* e^w=pp    */\n-  __mp_dbl(&mpp, &res, p);  /* converting into double precision */\n-  return res;\n-}"}, {"sha": "7a33a9080c14fed8d5ac5efb437883c180b74a08", "filename": "libgcc-math/dbl-64/t_exp.c", "status": "removed", "additions": 0, "deletions": 436, "changes": 436, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Ft_exp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Ft_exp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc-math%2Fdbl-64%2Ft_exp.c?ref=5cd88d6857dffe4f10c834c773c300881ec20e32", "patch": "@@ -1,436 +0,0 @@\n-/* Accurate tables for exp().\n-   Copyright (C) 1998 Free Software Foundation, Inc.\n-   This file is part of the GNU C Library.\n-   Contributed by Geoffrey Keating <geoffk@ozemail.com.au>\n-\n-   The GNU C Library is free software; you can redistribute it and/or\n-   modify it under the terms of the GNU Lesser General Public\n-   License as published by the Free Software Foundation; either\n-   version 2.1 of the License, or (at your option) any later version.\n-\n-   The GNU C Library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-   Lesser General Public License for more details.\n-\n-   You should have received a copy of the GNU Lesser General Public\n-   License along with the GNU C Library; if not, write to the Free\n-   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n-   02111-1307 USA.  */\n-\n-/* This table has the property that, for all integers -177 <= i <= 177,\n-   exp(i/512.0 + __exp_deltatable[abs(i)]) == __exp_atable[i+177] + r\n-   for some -2^-64 < r < 2^-64 (abs(r) < 2^-65 if i <= 0); and that\n-   __exp_deltatable[abs(i)] == t * 2^-60\n-   for integer t so that abs(t) <= 8847927 * 2^8.  */\n-\n-#define W52 (2.22044605e-16)\n-#define W55 (2.77555756e-17)\n-#define W58 (3.46944695e-18)\n-#define W59 (1.73472348e-18)\n-#define W60 (8.67361738e-19)\n-const float __exp_deltatable[178] = {\n-         0*W60,  16558714*W60, -10672149*W59,   1441652*W60,\n- -15787963*W55,    462888*W60,   7291806*W60,   1698880*W60,\n- -14375103*W58,  -2021016*W60,    728829*W60,  -3759654*W60,\n-   3202123*W60, -10916019*W58,   -251570*W60,  -1043086*W60,\n-   8207536*W60,   -409964*W60,  -5993931*W60,   -475500*W60,\n-   2237522*W60,    324170*W60,   -244117*W60,     32077*W60,\n-    123907*W60,  -1019734*W60,      -143*W60,    813077*W60,\n-    743345*W60,    462461*W60,    629794*W60,   2125066*W60,\n-  -2339121*W60,   -337951*W60,   9922067*W60,   -648704*W60,\n-    149407*W60,  -2687209*W60,   -631608*W60,   2128280*W60,\n-  -4882082*W60,   2001360*W60,    175074*W60,   2923216*W60,\n-   -538947*W60,  -1212193*W60,  -1920926*W60,  -1080577*W60,\n-   3690196*W60,   2643367*W60,   2911937*W60,    671455*W60,\n-  -1128674*W60,    593282*W60,  -5219347*W60,  -1941490*W60,\n-  11007953*W60,    239609*W60,  -2969658*W60,  -1183650*W60,\n-    942998*W60,    699063*W60,    450569*W60,   -329250*W60,\n-  -7257875*W60,   -312436*W60,     51626*W60,    555877*W60,\n-   -641761*W60,   1565666*W60,    884327*W60, -10960035*W60,\n-  -2004679*W60,   -995793*W60,  -2229051*W60,   -146179*W60,\n-   -510327*W60,   1453482*W60,  -3778852*W60,  -2238056*W60,\n-  -4895983*W60,   3398883*W60,   -252738*W60,   1230155*W60,\n-    346918*W60,   1109352*W60,    268941*W60,  -2930483*W60,\n-  -1036263*W60,  -1159280*W60,   1328176*W60,   2937642*W60,\n-  -9371420*W60,  -6902650*W60,  -1419134*W60,   1442904*W60,\n-  -1319056*W60,    -16369*W60,    696555*W60,   -279987*W60,\n-  -7919763*W60,    252741*W60,    459711*W60,  -1709645*W60,\n-    354913*W60,   6025867*W60,   -421460*W60,   -853103*W60,\n-   -338649*W60,    962151*W60,    955965*W60,    784419*W60,\n-  -3633653*W60,   2277133*W60,  -8847927*W52,   1223028*W60,\n-   5907079*W60,    623167*W60,   5142888*W60,   2599099*W60,\n-   1214280*W60,   4870359*W60,    593349*W60,    -57705*W60,\n-   7761209*W60,  -5564097*W60,   2051261*W60,   6216869*W60,\n-   4692163*W60,    601691*W60,  -5264906*W60,   1077872*W60,\n-  -3205949*W60,   1833082*W60,   2081746*W60,   -987363*W60,\n-  -1049535*W60,   2015244*W60,    874230*W60,   2168259*W60,\n-  -1740124*W60, -10068269*W60,    -18242*W60,  -3013583*W60,\n-    580601*W60,  -2547161*W60,   -535689*W60,   2220815*W60,\n-   1285067*W60,   2806933*W60,   -983086*W60,  -1729097*W60,\n-  -1162985*W60,  -2561904*W60,    801988*W60,    244351*W60,\n-   1441893*W60,  -7517981*W60,    271781*W60, -15021588*W60,\n-  -2341588*W60,   -919198*W60,   1642232*W60,   4771771*W60,\n-  -1220099*W60,  -3062372*W60,    628624*W60,   1278114*W60,\n-  13083513*W60, -10521925*W60,   3180310*W60,  -1659307*W60,\n-   3543773*W60,   2501203*W60,      4151*W60,   -340748*W60,\n-  -2285625*W60,   2495202*W60\n-};\n-\n-const double __exp_atable[355] /* __attribute__((mode(DF))) */ = {\n- 0.707722561055888932371, /* 0x0.b52d4e46605c27ffd */\n- 0.709106182438804188967, /* 0x0.b587fb96f75097ffb */\n- 0.710492508843861281234, /* 0x0.b5e2d649899167ffd */\n- 0.711881545564593931623, /* 0x0.b63dde74d36bdfffe */\n- 0.713273297897442870573, /* 0x0.b699142f945f87ffc */\n- 0.714667771153751463236, /* 0x0.b6f477909c4ea0001 */\n- 0.716064970655995725059, /* 0x0.b75008aec758f8004 */\n- 0.717464901723956938193, /* 0x0.b7abc7a0eea7e0002 */\n- 0.718867569715736398602, /* 0x0.b807b47e1586c7ff8 */\n- 0.720272979947266023271, /* 0x0.b863cf5d10e380003 */\n- 0.721681137825144314297, /* 0x0.b8c01855195c37ffb */\n- 0.723092048691992950199, /* 0x0.b91c8f7d213740004 */\n- 0.724505717938892290800, /* 0x0.b97934ec5002d0007 */\n- 0.725922150953176470431, /* 0x0.b9d608b9c92ea7ffc */\n- 0.727341353138962865022, /* 0x0.ba330afcc29e98003 */\n- 0.728763329918453162104, /* 0x0.ba903bcc8618b7ffc */\n- 0.730188086709957051568, /* 0x0.baed9b40591ba0000 */\n- 0.731615628948127705309, /* 0x0.bb4b296f931e30002 */\n- 0.733045962086486091436, /* 0x0.bba8e671a05617ff9 */\n- 0.734479091556371366251, /* 0x0.bc06d25dd49568001 */\n- 0.735915022857225542529, /* 0x0.bc64ed4bce8f6fff9 */\n- 0.737353761441304711410, /* 0x0.bcc33752f915d7ff9 */\n- 0.738795312814142124419, /* 0x0.bd21b08af98e78005 */\n- 0.740239682467211168593, /* 0x0.bd80590b65e9a8000 */\n- 0.741686875913991849885, /* 0x0.bddf30ebec4a10000 */\n- 0.743136898669507939299, /* 0x0.be3e38443c84e0007 */\n- 0.744589756269486091620, /* 0x0.be9d6f2c1d32a0002 */\n- 0.746045454254026796384, /* 0x0.befcd5bb59baf8004 */\n- 0.747503998175051087583, /* 0x0.bf5c6c09ca84c0003 */\n- 0.748965393601880857739, /* 0x0.bfbc322f5b18b7ff8 */\n- 0.750429646104262104698, /* 0x0.c01c2843f776fffff */\n- 0.751896761271877989160, /* 0x0.c07c4e5fa18b88002 */\n- 0.753366744698445112140, /* 0x0.c0dca49a5fb18fffd */\n- 0.754839601988627206827, /* 0x0.c13d2b0c444db0005 */\n- 0.756315338768691947122, /* 0x0.c19de1cd798578006 */\n- 0.757793960659406629066, /* 0x0.c1fec8f623723fffd */\n- 0.759275473314173443536, /* 0x0.c25fe09e8a0f47ff8 */\n- 0.760759882363831851927, /* 0x0.c2c128dedc88f8000 */\n- 0.762247193485956486805, /* 0x0.c322a1cf7d6e7fffa */\n- 0.763737412354726363781, /* 0x0.c3844b88cb9347ffc */\n- 0.765230544649828092739, /* 0x0.c3e626232bd8f7ffc */\n- 0.766726596071518051729, /* 0x0.c44831b719bf18002 */\n- 0.768225572321911687194, /* 0x0.c4aa6e5d12d078001 */\n- 0.769727479119219348810, /* 0x0.c50cdc2da64a37ffb */\n- 0.771232322196981678892, /* 0x0.c56f7b41744490001 */\n- 0.772740107296721268087, /* 0x0.c5d24bb1259e70004 */\n- 0.774250840160724651565, /* 0x0.c6354d95640dd0007 */\n- 0.775764526565368872643, /* 0x0.c6988106fec447fff */\n- 0.777281172269557396602, /* 0x0.c6fbe61eb1bd0ffff */\n- 0.778800783068235302750, /* 0x0.c75f7cf560942fffc */\n- 0.780323364758801041312, /* 0x0.c7c345a3f1983fffe */\n- 0.781848923151573727006, /* 0x0.c8274043594cb0002 */\n- 0.783377464064598849602, /* 0x0.c88b6cec94b3b7ff9 */\n- 0.784908993312207869935, /* 0x0.c8efcbb89cba27ffe */\n- 0.786443516765346961618, /* 0x0.c9545cc0a88c70003 */\n- 0.787981040257604625744, /* 0x0.c9b9201dc643bfffa */\n- 0.789521569657452682047, /* 0x0.ca1e15e92a5410007 */\n- 0.791065110849462849192, /* 0x0.ca833e3c1ae510005 */\n- 0.792611669712891875319, /* 0x0.cae8992fd84667ffd */\n- 0.794161252150049179450, /* 0x0.cb4e26ddbc207fff8 */\n- 0.795713864077794763584, /* 0x0.cbb3e75f301b60003 */\n- 0.797269511407239561694, /* 0x0.cc19dacd978cd8002 */\n- 0.798828200086368567220, /* 0x0.cc8001427e55d7ffb */\n- 0.800389937624300440456, /* 0x0.cce65ade24d360006 */\n- 0.801954725261124767840, /* 0x0.cd4ce7a5de839fffb */\n- 0.803522573691593189330, /* 0x0.cdb3a7c79a678fffd */\n- 0.805093487311204114563, /* 0x0.ce1a9b563965ffffc */\n- 0.806667472122675088819, /* 0x0.ce81c26b838db8000 */\n- 0.808244534127439906441, /* 0x0.cee91d213f8428002 */\n- 0.809824679342317166307, /* 0x0.cf50ab9144d92fff9 */\n- 0.811407913793616542005, /* 0x0.cfb86dd5758c2ffff */\n- 0.812994243520784198882, /* 0x0.d0206407c20e20005 */\n- 0.814583674571603966162, /* 0x0.d0888e4223facfff9 */\n- 0.816176213022088536960, /* 0x0.d0f0ec9eb3f7c8002 */\n- 0.817771864936188586101, /* 0x0.d1597f377d6768002 */\n- 0.819370636400374108252, /* 0x0.d1c24626a46eafff8 */\n- 0.820972533518165570298, /* 0x0.d22b41865ff1e7ff9 */\n- 0.822577562404315121269, /* 0x0.d2947170f32ec7ff9 */\n- 0.824185729164559344159, /* 0x0.d2fdd60097795fff8 */\n- 0.825797039949601741075, /* 0x0.d3676f4fb796d0001 */\n- 0.827411500902565544264, /* 0x0.d3d13d78b5f68fffb */\n- 0.829029118181348834154, /* 0x0.d43b40960546d8001 */\n- 0.830649897953322891022, /* 0x0.d4a578c222a058000 */\n- 0.832273846408250750368, /* 0x0.d50fe617a3ba78005 */\n- 0.833900969738858188772, /* 0x0.d57a88b1218e90002 */\n- 0.835531274148056613016, /* 0x0.d5e560a94048f8006 */\n- 0.837164765846411529371, /* 0x0.d6506e1aac8078003 */\n- 0.838801451086016225394, /* 0x0.d6bbb1204074e0001 */\n- 0.840441336100884561780, /* 0x0.d72729d4c28518004 */\n- 0.842084427144139224814, /* 0x0.d792d8530e12b0001 */\n- 0.843730730487052604790, /* 0x0.d7febcb61273e7fff */\n- 0.845380252404570153833, /* 0x0.d86ad718c308dfff9 */\n- 0.847032999194574087728, /* 0x0.d8d727962c69d7fff */\n- 0.848688977161248581090, /* 0x0.d943ae49621ce7ffb */\n- 0.850348192619261200615, /* 0x0.d9b06b4d832ef8005 */\n- 0.852010651900976245816, /* 0x0.da1d5ebdc22220005 */\n- 0.853676361342631029337, /* 0x0.da8a88b555baa0006 */\n- 0.855345327311054837175, /* 0x0.daf7e94f965f98004 */\n- 0.857017556155879489641, /* 0x0.db6580a7c98f7fff8 */\n- 0.858693054267390953857, /* 0x0.dbd34ed9617befff8 */\n- 0.860371828028939855647, /* 0x0.dc4153ffc8b65fff9 */\n- 0.862053883854957292436, /* 0x0.dcaf90368bfca8004 */\n- 0.863739228154875360306, /* 0x0.dd1e0399328d87ffe */\n- 0.865427867361348468455, /* 0x0.dd8cae435d303fff9 */\n- 0.867119807911702289458, /* 0x0.ddfb9050b1cee8006 */\n- 0.868815056264353846599, /* 0x0.de6aa9dced8448001 */\n- 0.870513618890481399881, /* 0x0.ded9fb03db7320006 */\n- 0.872215502247877139094, /* 0x0.df4983e1380657ff8 */\n- 0.873920712852848668986, /* 0x0.dfb94490ffff77ffd */\n- 0.875629257204025623884, /* 0x0.e0293d2f1cb01fff9 */\n- 0.877341141814212965880, /* 0x0.e0996dd786fff0007 */\n- 0.879056373217612985183, /* 0x0.e109d6a64f5d57ffc */\n- 0.880774957955916648615, /* 0x0.e17a77b78e72a7ffe */\n- 0.882496902590150900078, /* 0x0.e1eb5127722cc7ff8 */\n- 0.884222213673356738383, /* 0x0.e25c63121fb0c8006 */\n- 0.885950897802399772740, /* 0x0.e2cdad93ec5340003 */\n- 0.887682961567391237685, /* 0x0.e33f30c925fb97ffb */\n- 0.889418411575228162725, /* 0x0.e3b0ecce2d05ffff9 */\n- 0.891157254447957902797, /* 0x0.e422e1bf727718006 */\n- 0.892899496816652704641, /* 0x0.e4950fb9713fc7ffe */\n- 0.894645145323828439008, /* 0x0.e50776d8b0e60fff8 */\n- 0.896394206626591749641, /* 0x0.e57a1739c8fadfffc */\n- 0.898146687421414902124, /* 0x0.e5ecf0f97c5798007 */\n- 0.899902594367530173098, /* 0x0.e660043464e378005 */\n- 0.901661934163603406867, /* 0x0.e6d3510747e150006 */\n- 0.903424713533971135418, /* 0x0.e746d78f06cd97ffd */\n- 0.905190939194458810123, /* 0x0.e7ba97e879c91fffc */\n- 0.906960617885092856864, /* 0x0.e82e92309390b0007 */\n- 0.908733756358986566306, /* 0x0.e8a2c6845544afffa */\n- 0.910510361377119825629, /* 0x0.e9173500c8abc7ff8 */\n- 0.912290439722343249336, /* 0x0.e98bddc30f98b0002 */\n- 0.914073998177417412765, /* 0x0.ea00c0e84bc4c7fff */\n- 0.915861043547953501680, /* 0x0.ea75de8db8094fffe */\n- 0.917651582652244779397, /* 0x0.eaeb36d09d3137ffe */\n- 0.919445622318405764159, /* 0x0.eb60c9ce4ed3dffff */\n- 0.921243169397334638073, /* 0x0.ebd697a43995b0007 */\n- 0.923044230737526172328, /* 0x0.ec4ca06fc7768fffa */\n- 0.924848813220121135342, /* 0x0.ecc2e44e865b6fffb */\n- 0.926656923710931002014, /* 0x0.ed39635df34e70006 */\n- 0.928468569126343790092, /* 0x0.edb01dbbc2f5b7ffa */\n- 0.930283756368834757725, /* 0x0.ee2713859aab57ffa */\n- 0.932102492359406786818, /* 0x0.ee9e44d9342870004 */\n- 0.933924784042873379360, /* 0x0.ef15b1d4635438005 */\n- 0.935750638358567643520, /* 0x0.ef8d5a94f60f50007 */\n- 0.937580062297704630580, /* 0x0.f0053f38f345cffff */\n- 0.939413062815381727516, /* 0x0.f07d5fde3a2d98001 */\n- 0.941249646905368053689, /* 0x0.f0f5bca2d481a8004 */\n- 0.943089821583810716806, /* 0x0.f16e55a4e497d7ffe */\n- 0.944933593864477061592, /* 0x0.f1e72b028a2827ffb */\n- 0.946780970781518460559, /* 0x0.f2603cd9fb5430001 */\n- 0.948631959382661205081, /* 0x0.f2d98b497d2a87ff9 */\n- 0.950486566729423554277, /* 0x0.f353166f63e3dffff */\n- 0.952344799896018723290, /* 0x0.f3ccde6a11ae37ffe */\n- 0.954206665969085765512, /* 0x0.f446e357f66120000 */\n- 0.956072172053890279009, /* 0x0.f4c12557964f0fff9 */\n- 0.957941325265908139014, /* 0x0.f53ba48781046fffb */\n- 0.959814132734539637840, /* 0x0.f5b66106555d07ffa */\n- 0.961690601603558903308, /* 0x0.f6315af2c2027fffc */\n- 0.963570739036113010927, /* 0x0.f6ac926b8aeb80004 */\n- 0.965454552202857141381, /* 0x0.f728078f7c5008002 */\n- 0.967342048278315158608, /* 0x0.f7a3ba7d66a908001 */\n- 0.969233234469444204768, /* 0x0.f81fab543e1897ffb */\n- 0.971128118008140250896, /* 0x0.f89bda33122c78007 */\n- 0.973026706099345495256, /* 0x0.f9184738d4cf97ff8 */\n- 0.974929006031422851235, /* 0x0.f994f284d3a5c0008 */\n- 0.976835024947348973265, /* 0x0.fa11dc35bc7820002 */\n- 0.978744770239899142285, /* 0x0.fa8f046b4fb7f8007 */\n- 0.980658249138918636210, /* 0x0.fb0c6b449ab1cfff9 */\n- 0.982575468959622777535, /* 0x0.fb8a10e1088fb7ffa */\n- 0.984496437054508843888, /* 0x0.fc07f5602d79afffc */\n- 0.986421160608523028820, /* 0x0.fc8618e0e55e47ffb */\n- 0.988349647107594098099, /* 0x0.fd047b83571b1fffa */\n- 0.990281903873210800357, /* 0x0.fd831d66f4c018002 */\n- 0.992217938695037382475, /* 0x0.fe01fead3320bfff8 */\n- 0.994157757657894713987, /* 0x0.fe811f703491e8006 */\n- 0.996101369488558541238, /* 0x0.ff007fd5744490005 */\n- 0.998048781093141101932, /* 0x0.ff801ffa9b9280007 */\n- 1.000000000000000000000, /* 0x1.00000000000000000 */\n- 1.001955033605393285965, /* 0x1.0080200565d29ffff */\n- 1.003913889319761887310, /* 0x1.0100802aa0e80fff0 */\n- 1.005876574715736104818, /* 0x1.01812090377240007 */\n- 1.007843096764807100351, /* 0x1.020201541aad7fff6 */\n- 1.009813464316352327214, /* 0x1.0283229c4c9820007 */\n- 1.011787683565730677817, /* 0x1.030484836910a000e */\n- 1.013765762469146736174, /* 0x1.0386272b9c077fffe */\n- 1.015747708536026694351, /* 0x1.04080ab526304fff0 */\n- 1.017733529475172815584, /* 0x1.048a2f412375ffff0 */\n- 1.019723232714418781378, /* 0x1.050c94ef7ad5e000a */\n- 1.021716825883923762690, /* 0x1.058f3be0f1c2d0004 */\n- 1.023714316605201180057, /* 0x1.06122436442e2000e */\n- 1.025715712440059545995, /* 0x1.06954e0fec63afff2 */\n- 1.027721021151397406936, /* 0x1.0718b98f41c92fff6 */\n- 1.029730250269221158939, /* 0x1.079c66d49bb2ffff1 */\n- 1.031743407506447551857, /* 0x1.082056011a9230009 */\n- 1.033760500517691527387, /* 0x1.08a487359ebd50002 */\n- 1.035781537016238873464, /* 0x1.0928fa93490d4fff3 */\n- 1.037806524719013578963, /* 0x1.09adb03b3e5b3000d */\n- 1.039835471338248051878, /* 0x1.0a32a84e9e5760004 */\n- 1.041868384612101516848, /* 0x1.0ab7e2eea5340ffff */\n- 1.043905272300907460835, /* 0x1.0b3d603ca784f0009 */\n- 1.045946142174331239262, /* 0x1.0bc3205a042060000 */\n- 1.047991002016745332165, /* 0x1.0c4923682a086fffe */\n- 1.050039859627715177527, /* 0x1.0ccf698898f3a000d */\n- 1.052092722826109660856, /* 0x1.0d55f2dce5d1dfffb */\n- 1.054149599440827866881, /* 0x1.0ddcbf86b09a5fff6 */\n- 1.056210497317612961855, /* 0x1.0e63cfa7abc97fffd */\n- 1.058275424318780855142, /* 0x1.0eeb23619c146fffb */\n- 1.060344388322010722446, /* 0x1.0f72bad65714bffff */\n- 1.062417397220589476718, /* 0x1.0ffa9627c38d30004 */\n- 1.064494458915699715017, /* 0x1.1082b577d0eef0003 */\n- 1.066575581342167566880, /* 0x1.110b18e893a90000a */\n- 1.068660772440545025953, /* 0x1.1193c09c267610006 */\n- 1.070750040138235936705, /* 0x1.121cacb4959befff6 */\n- 1.072843392435016474095, /* 0x1.12a5dd543cf36ffff */\n- 1.074940837302467588937, /* 0x1.132f529d59552000b */\n- 1.077042382749654914030, /* 0x1.13b90cb250d08fff5 */\n- 1.079148036789447484528, /* 0x1.14430bb58da3dfff9 */\n- 1.081257807444460983297, /* 0x1.14cd4fc984c4a000e */\n- 1.083371702785017154417, /* 0x1.1557d910df9c7000e */\n- 1.085489730853784307038, /* 0x1.15e2a7ae292d30002 */\n- 1.087611899742884524772, /* 0x1.166dbbc422d8c0004 */\n- 1.089738217537583819804, /* 0x1.16f9157586772ffff */\n- 1.091868692357631731528, /* 0x1.1784b4e533cacfff0 */\n- 1.094003332327482702577, /* 0x1.18109a360fc23fff2 */\n- 1.096142145591650907149, /* 0x1.189cc58b155a70008 */\n- 1.098285140311341168136, /* 0x1.1929370751ea50002 */\n- 1.100432324652149906842, /* 0x1.19b5eecdd79cefff0 */\n- 1.102583706811727015711, /* 0x1.1a42ed01dbdba000e */\n- 1.104739294993289488947, /* 0x1.1ad031c69a2eafff0 */\n- 1.106899097422573863281, /* 0x1.1b5dbd3f66e120003 */\n- 1.109063122341542140286, /* 0x1.1beb8f8fa8150000b */\n- 1.111231377994659874592, /* 0x1.1c79a8dac6ad0fff4 */\n- 1.113403872669181282605, /* 0x1.1d0809445a97ffffc */\n- 1.115580614653132185460, /* 0x1.1d96b0effc9db000e */\n- 1.117761612217810673898, /* 0x1.1e25a001332190000 */\n- 1.119946873713312474002, /* 0x1.1eb4d69bdb2a9fff1 */\n- 1.122136407473298902480, /* 0x1.1f4454e3bfae00006 */\n- 1.124330221845670330058, /* 0x1.1fd41afcbb48bfff8 */\n- 1.126528325196519908506, /* 0x1.2064290abc98c0001 */\n- 1.128730725913251964394, /* 0x1.20f47f31c9aa7000f */\n- 1.130937432396844410880, /* 0x1.21851d95f776dfff0 */\n- 1.133148453059692917203, /* 0x1.2216045b6784efffa */\n- 1.135363796355857157764, /* 0x1.22a733a6692ae0004 */\n- 1.137583470716100553249, /* 0x1.2338ab9b3221a0004 */\n- 1.139807484614418608939, /* 0x1.23ca6c5e27aadfff7 */\n- 1.142035846532929888057, /* 0x1.245c7613b7f6c0004 */\n- 1.144268564977221958089, /* 0x1.24eec8e06b035000c */\n- 1.146505648458203463465, /* 0x1.258164e8cea85fff8 */\n- 1.148747105501412235671, /* 0x1.26144a5180d380009 */\n- 1.150992944689175123667, /* 0x1.26a7793f5de2efffa */\n- 1.153243174560058870217, /* 0x1.273af1d712179000d */\n- 1.155497803703682491111, /* 0x1.27ceb43d81d42fff1 */\n- 1.157756840726344771440, /* 0x1.2862c097a3d29000c */\n- 1.160020294239811677834, /* 0x1.28f7170a74cf4fff1 */\n- 1.162288172883275239058, /* 0x1.298bb7bb0faed0004 */\n- 1.164560485298402170388, /* 0x1.2a20a2ce920dffff4 */\n- 1.166837240167474476460, /* 0x1.2ab5d86a4631ffff6 */\n- 1.169118446164539637555, /* 0x1.2b4b58b36d5220009 */\n- 1.171404112007080167155, /* 0x1.2be123cf786790002 */\n- 1.173694246390975415341, /* 0x1.2c7739e3c0aac000d */\n- 1.175988858069749065617, /* 0x1.2d0d9b15deb58fff6 */\n- 1.178287955789017793514, /* 0x1.2da4478b627040002 */\n- 1.180591548323240091978, /* 0x1.2e3b3f69fb794fffc */\n- 1.182899644456603782686, /* 0x1.2ed282d76421d0004 */\n- 1.185212252993012693694, /* 0x1.2f6a11f96c685fff3 */\n- 1.187529382762033236513, /* 0x1.3001ecf60082ffffa */\n- 1.189851042595508889847, /* 0x1.309a13f30f28a0004 */\n- 1.192177241354644978669, /* 0x1.31328716a758cfff7 */\n- 1.194507987909589896687, /* 0x1.31cb4686e1e85fffb */\n- 1.196843291137896336843, /* 0x1.32645269dfd04000a */\n- 1.199183159977805113226, /* 0x1.32fdaae604c39000f */\n- 1.201527603343041317132, /* 0x1.339750219980dfff3 */\n- 1.203876630171082595692, /* 0x1.3431424300e480007 */\n- 1.206230249419600664189, /* 0x1.34cb8170b3fee000e */\n- 1.208588470077065268869, /* 0x1.35660dd14dbd4fffc */\n- 1.210951301134513435915, /* 0x1.3600e78b6bdfc0005 */\n- 1.213318751604272271958, /* 0x1.369c0ec5c38ebfff2 */\n- 1.215690830512196507537, /* 0x1.373783a718d29000f */\n- 1.218067546930756250870, /* 0x1.37d3465662f480007 */\n- 1.220448909901335365929, /* 0x1.386f56fa770fe0008 */\n- 1.222834928513994334780, /* 0x1.390bb5ba5fc540004 */\n- 1.225225611877684750397, /* 0x1.39a862bd3c7a8fff3 */\n- 1.227620969111500981433, /* 0x1.3a455e2a37bcafffd */\n- 1.230021009336254911271, /* 0x1.3ae2a8287dfbefff6 */\n- 1.232425741726685064472, /* 0x1.3b8040df76f39fffa */\n- 1.234835175450728295084, /* 0x1.3c1e287682e48fff1 */\n- 1.237249319699482263931, /* 0x1.3cbc5f151b86bfff8 */\n- 1.239668183679933477545, /* 0x1.3d5ae4e2cc0a8000f */\n- 1.242091776620540377629, /* 0x1.3df9ba07373bf0006 */\n- 1.244520107762172811399, /* 0x1.3e98deaa0d8cafffe */\n- 1.246953186383919165383, /* 0x1.3f3852f32973efff0 */\n- 1.249391019292643401078, /* 0x1.3fd816ffc72b90001 */\n- 1.251833623164381181797, /* 0x1.40782b17863250005 */\n- 1.254280999953110153911, /* 0x1.41188f42caf400000 */\n- 1.256733161434815393410, /* 0x1.41b943b42945bfffd */\n- 1.259190116985283935980, /* 0x1.425a4893e5f10000a */\n- 1.261651875958665236542, /* 0x1.42fb9e0a2df4c0009 */\n- 1.264118447754797758244, /* 0x1.439d443f608c4fff9 */\n- 1.266589841787181258708, /* 0x1.443f3b5bebf850008 */\n- 1.269066067469190262045, /* 0x1.44e183883e561fff7 */\n- 1.271547134259576328224, /* 0x1.45841cecf7a7a0001 */\n- 1.274033051628237434048, /* 0x1.462707b2c43020009 */\n- 1.276523829025464573684, /* 0x1.46ca44023aa410007 */\n- 1.279019475999373156531, /* 0x1.476dd2045d46ffff0 */\n- 1.281520002043128991825, /* 0x1.4811b1e1f1f19000b */\n- 1.284025416692967214122, /* 0x1.48b5e3c3edd74fff4 */\n- 1.286535729509738823464, /* 0x1.495a67d3613c8fff7 */\n- 1.289050950070396384145, /* 0x1.49ff3e396e19d000b */\n- 1.291571087985403654081, /* 0x1.4aa4671f5b401fff1 */\n- 1.294096152842774794011, /* 0x1.4b49e2ae56d19000d */\n- 1.296626154297237043484, /* 0x1.4befb10fd84a3fff4 */\n- 1.299161101984141142272, /* 0x1.4c95d26d41d84fff8 */\n- 1.301701005575179204100, /* 0x1.4d3c46f01d9f0fff3 */\n- 1.304245874766450485904, /* 0x1.4de30ec21097d0003 */\n- 1.306795719266019562007, /* 0x1.4e8a2a0ccce3d0002 */\n- 1.309350548792467483458, /* 0x1.4f3198fa10346fff5 */\n- 1.311910373099227200545, /* 0x1.4fd95bb3be8cffffd */\n- 1.314475201942565174546, /* 0x1.50817263bf0e5fffb */\n- 1.317045045107389400535, /* 0x1.5129dd3418575000e */\n- 1.319619912422941299109, /* 0x1.51d29c4f01c54ffff */\n- 1.322199813675649204855, /* 0x1.527bafde83a310009 */\n- 1.324784758729532718739, /* 0x1.5325180cfb8b3fffd */\n- 1.327374757430096474625, /* 0x1.53ced504b2bd0fff4 */\n- 1.329969819671041886272, /* 0x1.5478e6f02775e0001 */\n- 1.332569955346704748651, /* 0x1.55234df9d8a59fff8 */\n- 1.335175174370685002822, /* 0x1.55ce0a4c5a6a9fff6 */\n- 1.337785486688218616860, /* 0x1.56791c1263abefff7 */\n- 1.340400902247843806217, /* 0x1.57248376aef21fffa */\n- 1.343021431036279800211, /* 0x1.57d040a420c0bfff3 */\n- 1.345647083048053138662, /* 0x1.587c53c5a630f0002 */\n- 1.348277868295411074918, /* 0x1.5928bd063fd7bfff9 */\n- 1.350913796821875845231, /* 0x1.59d57c9110ad60006 */\n- 1.353554878672557082439, /* 0x1.5a8292913d68cfffc */\n- 1.356201123929036356254, /* 0x1.5b2fff3212db00007 */\n- 1.358852542671913132777, /* 0x1.5bddc29edcc06fff3 */\n- 1.361509145047255398051, /* 0x1.5c8bdd032ed16000f */\n- 1.364170941142184734180, /* 0x1.5d3a4e8a5bf61fff4 */\n- 1.366837941171020309735, /* 0x1.5de9176042f1effff */\n- 1.369510155261156381121, /* 0x1.5e9837b062f4e0005 */\n- 1.372187593620959988833, /* 0x1.5f47afa69436cfff1 */\n- 1.374870266463378287715, /* 0x1.5ff77f6eb3f8cfffd */\n- 1.377558184010425845733, /* 0x1.60a7a734a9742fff9 */\n- 1.380251356531521533853, /* 0x1.6158272490016000c */\n- 1.382949794301995272203, /* 0x1.6208ff6a8978a000f */\n- 1.385653507605306700170, /* 0x1.62ba3032c0a280004 */\n- 1.388362506772382154503, /* 0x1.636bb9a994784000f */\n- 1.391076802081129493127, /* 0x1.641d9bfb29a7bfff6 */\n- 1.393796403973427855412, /* 0x1.64cfd7545928b0002 */\n- 1.396521322756352656542, /* 0x1.65826be167badfff8 */\n- 1.399251568859207761660, /* 0x1.663559cf20826000c */\n- 1.401987152677323100733, /* 0x1.66e8a14a29486fffc */\n- 1.404728084651919228815, /* 0x1.679c427f5a4b6000b */\n- 1.407474375243217723560, /* 0x1.68503d9ba0add000f */\n- 1.410226034922914983815, /* 0x1.690492cbf6303fff9 */\n- 1.412983074197955213304, /* 0x1.69b9423d7b548fff6 */\n-};"}, {"sha": "1fd73338cf36c0241509794de3016ebf3aa6f4f7", "filename": "libgcc-math/dbl-64/t_exp2.h", "status": "removed", "additions": 0, "deletions": 585, "changes": 585, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Ft_exp2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Ft_exp2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc-math%2Fdbl-64%2Ft_exp2.h?ref=5cd88d6857dffe4f10c834c773c300881ec20e32", "patch": "@@ -1,585 +0,0 @@\n-/* These values are accurate to 52+12 bits when represented as\n-   a double.  */\n-static const double exp2_accuratetable[512] = {\n-0.707106781187802013759 /* 0x0.b504f333fb3f80007 */,\n-0.708064712808760599040 /* 0x0.b543baa0f71b38000 */,\n-0.709023942160304065938 /* 0x0.b58297d3a8d518002 */,\n-0.709984470998547667624 /* 0x0.b5c18ad39b4ba0001 */,\n-0.710946301084324217006 /* 0x0.b60093a85e8d30001 */,\n-0.711909434180505784637 /* 0x0.b63fb25984e628005 */,\n-0.712873872052760648733 /* 0x0.b67ee6eea3b5f8003 */,\n-0.713839616467838999908 /* 0x0.b6be316f518c98001 */,\n-0.714806669195984345523 /* 0x0.b6fd91e328d148007 */,\n-0.715775032009894562898 /* 0x0.b73d0851c69e20002 */,\n-0.716744706683768884058 /* 0x0.b77c94c2c9b3d0003 */,\n-0.717715694995770148178 /* 0x0.b7bc373dd52eb0003 */,\n-0.718687998724665488852 /* 0x0.b7fbefca8cd530004 */,\n-0.719661619652575468291 /* 0x0.b83bbe70981da8001 */,\n-0.720636559564428180758 /* 0x0.b87ba337a194b0006 */,\n-0.721612820246623098989 /* 0x0.b8bb9e27556508004 */,\n-0.722590403488338473025 /* 0x0.b8fbaf4762c798006 */,\n-0.723569311081411870036 /* 0x0.b93bd69f7be1d0000 */,\n-0.724549544820974333906 /* 0x0.b97c1437567828007 */,\n-0.725531106502312561633 /* 0x0.b9bc6816a87ae8002 */,\n-0.726513997924421062181 /* 0x0.b9fcd2452bee00000 */,\n-0.727498220889519875430 /* 0x0.ba3d52ca9e6148002 */,\n-0.728483777200401694265 /* 0x0.ba7de9aebe05c8003 */,\n-0.729470668664712662563 /* 0x0.babe96f94e62a8002 */,\n-0.730458897090379144517 /* 0x0.baff5ab2134df0004 */,\n-0.731448464287988597833 /* 0x0.bb4034e0d38ab0000 */,\n-0.732439372072965166897 /* 0x0.bb81258d5b2d60001 */,\n-0.733431622260458326859 /* 0x0.bbc22cbf75fd28001 */,\n-0.734425216668725511232 /* 0x0.bc034a7ef32c00001 */,\n-0.735420157118880535324 /* 0x0.bc447ed3a50fe0005 */,\n-0.736416445434497690674 /* 0x0.bc85c9c560b350001 */,\n-0.737414083433310718618 /* 0x0.bcc72b5bf4b4e0000 */,\n-0.738413072966152328496 /* 0x0.bd08a39f5417a8007 */,\n-0.739413415848264365956 /* 0x0.bd4a32974abcd0002 */,\n-0.740415113911250699637 /* 0x0.bd8bd84bb68300002 */,\n-0.741418168994518067562 /* 0x0.bdcd94c47ddd30003 */,\n-0.742422582936659858376 /* 0x0.be0f6809865968006 */,\n-0.743428357577745613238 /* 0x0.be515222b72530003 */,\n-0.744435494762383687126 /* 0x0.be935317fc6ba0002 */,\n-0.745443996335090397492 /* 0x0.bed56af1423de8001 */,\n-0.746453864145572798553 /* 0x0.bf1799b67a6248007 */,\n-0.747465100043933849969 /* 0x0.bf59df6f970e70002 */,\n-0.748477705883256683178 /* 0x0.bf9c3c248dbee8001 */,\n-0.749491683518965001732 /* 0x0.bfdeafdd568308000 */,\n-0.750507034813367890373 /* 0x0.c0213aa1f0fc38004 */,\n-0.751523761622240105153 /* 0x0.c063dc7a559ca0003 */,\n-0.752541865811731880422 /* 0x0.c0a6956e883ed8000 */,\n-0.753561349247157341600 /* 0x0.c0e965868bd220006 */,\n-0.754582213796583967110 /* 0x0.c12c4cca664cb8002 */,\n-0.755604461332336940791 /* 0x0.c16f4b42225350006 */,\n-0.756628093726406381068 /* 0x0.c1b260f5ca2c48002 */,\n-0.757653112855631305506 /* 0x0.c1f58ded6d72d8001 */,\n-0.758679520599333412360 /* 0x0.c238d2311e7d08001 */,\n-0.759707318837184453227 /* 0x0.c27c2dc8f00368005 */,\n-0.760736509456435783249 /* 0x0.c2bfa0bcfd1400000 */,\n-0.761767094336480043995 /* 0x0.c3032b155818d0000 */,\n-0.762799075372231349951 /* 0x0.c346ccda248cc0001 */,\n-0.763832454453522768941 /* 0x0.c38a8613805488005 */,\n-0.764867233473625618441 /* 0x0.c3ce56c98d1ca8005 */,\n-0.765903414329434539816 /* 0x0.c4123f04708d80002 */,\n-0.766940998920452976510 /* 0x0.c4563ecc532dc0001 */,\n-0.767979989148100838946 /* 0x0.c49a56295f9f88006 */,\n-0.769020386915772125040 /* 0x0.c4de8523c2b0a0001 */,\n-0.770062194131770905170 /* 0x0.c522cbc3ae94e0003 */,\n-0.771105412703856241146 /* 0x0.c5672a1154e6b8004 */,\n-0.772150044545352520777 /* 0x0.c5aba014ed5f18003 */,\n-0.773196091570364285606 /* 0x0.c5f02dd6b09288003 */,\n-0.774243555696622731700 /* 0x0.c634d35edb1260003 */,\n-0.775292438842697939641 /* 0x0.c67990b5aa5c18004 */,\n-0.776342742931542928455 /* 0x0.c6be65e360bed8000 */,\n-0.777394469888802008854 /* 0x0.c70352f0437f50004 */,\n-0.778447621641124243320 /* 0x0.c74857e498fd00006 */,\n-0.779502200118583399303 /* 0x0.c78d74c8ab5b60000 */,\n-0.780558207255445668515 /* 0x0.c7d2a9a4c959f8000 */,\n-0.781615644985491186966 /* 0x0.c817f681412f80002 */,\n-0.782674515247667956808 /* 0x0.c85d5b6666c150006 */,\n-0.783734819983036512536 /* 0x0.c8a2d85c904760003 */,\n-0.784796561133562109454 /* 0x0.c8e86d6c14f850002 */,\n-0.785859740645942328471 /* 0x0.c92e1a9d513ec8002 */,\n-0.786924360469767103536 /* 0x0.c973dff8a4b390007 */,\n-0.787990422552312885808 /* 0x0.c9b9bd866c6440007 */,\n-0.789057928854407064640 /* 0x0.c9ffb34f1444b0001 */,\n-0.790126881326406182996 /* 0x0.ca45c15afcc570001 */,\n-0.791197281930050233534 /* 0x0.ca8be7b292db38000 */,\n-0.792269132620954885659 /* 0x0.cad2265e3cbee8000 */,\n-0.793342435380726906957 /* 0x0.cb187d667d3d38006 */,\n-0.794417192158282659010 /* 0x0.cb5eecd3b33158006 */,\n-0.795493404931386649540 /* 0x0.cba574ae5d2e80001 */,\n-0.796571075671306805268 /* 0x0.cbec14fef2a348004 */,\n-0.797650206352955137846 /* 0x0.cc32cdcdef0000000 */,\n-0.798730798954342069432 /* 0x0.cc799f23d11d18000 */,\n-0.799812855456121796232 /* 0x0.ccc089091abb28004 */,\n-0.800896377841454287795 /* 0x0.cd078b86505c18003 */,\n-0.801981368096190028208 /* 0x0.cd4ea6a3f97720007 */,\n-0.803067828208752554378 /* 0x0.cd95da6aa057b8007 */,\n-0.804155760170129796375 /* 0x0.cddd26e2d21b28001 */,\n-0.805245165974338261710 /* 0x0.ce248c151f3330001 */,\n-0.806336047619038653883 /* 0x0.ce6c0a0a1c1350001 */,\n-0.807428407102107836855 /* 0x0.ceb3a0ca5d6be0006 */,\n-0.808522246427078927792 /* 0x0.cefb505e7e2550007 */,\n-0.809617567597010201484 /* 0x0.cf4318cf18a268002 */,\n-0.810714372621179513182 /* 0x0.cf8afa24ce1c98004 */,\n-0.811812663508675536069 /* 0x0.cfd2f4683f9810005 */,\n-0.812912442272482604912 /* 0x0.d01b07a2126188003 */,\n-0.814013710929394895825 /* 0x0.d06333daeff618001 */,\n-0.815116471495287542325 /* 0x0.d0ab791b80d028006 */,\n-0.816220725993571205593 /* 0x0.d0f3d76c75b330000 */,\n-0.817326476447408967199 /* 0x0.d13c4ed67f1cf8000 */,\n-0.818433724883006474832 /* 0x0.d184df6250e3b0001 */,\n-0.819542473330909460055 /* 0x0.d1cd8918a3a328004 */,\n-0.820652723822034690935 /* 0x0.d2164c02305fa0002 */,\n-0.821764478391968422618 /* 0x0.d25f2827b53fb0005 */,\n-0.822877739077315761840 /* 0x0.d2a81d91f188b8000 */,\n-0.823992507918612782109 /* 0x0.d2f12c49a8d290005 */,\n-0.825108786960634610365 /* 0x0.d33a5457a35e40003 */,\n-0.826226578247117093869 /* 0x0.d38395c4a84848007 */,\n-0.827345883828319528258 /* 0x0.d3ccf09985d958004 */,\n-0.828466705754248966560 /* 0x0.d41664df0a1320005 */,\n-0.829589046080638992111 /* 0x0.d45ff29e094330000 */,\n-0.830712906863802391671 /* 0x0.d4a999df585a20005 */,\n-0.831838290163696481037 /* 0x0.d4f35aabd04a60006 */,\n-0.832965198041969556729 /* 0x0.d53d350c4be258002 */,\n-0.834093632565442222342 /* 0x0.d5872909aba050007 */,\n-0.835223595802037643865 /* 0x0.d5d136acd138e8006 */,\n-0.836355089820669306292 /* 0x0.d61b5dfe9f7780004 */,\n-0.837488116698010487424 /* 0x0.d6659f0801afa8005 */,\n-0.838622678508982644113 /* 0x0.d6aff9d1e147d8004 */,\n-0.839758777333464490056 /* 0x0.d6fa6e652d19e0000 */,\n-0.840896415254110962690 /* 0x0.d744fccad70d00003 */,\n-0.842035594355151628676 /* 0x0.d78fa50bd2c3b0000 */,\n-0.843176316724478125433 /* 0x0.d7da673117e730007 */,\n-0.844318584453106590905 /* 0x0.d8254343a19038003 */,\n-0.845462399634695271912 /* 0x0.d870394c6dbf30003 */,\n-0.846607764365415071965 /* 0x0.d8bb49547d37c0004 */,\n-0.847754680744707056494 /* 0x0.d9067364d45608003 */,\n-0.848903150873708822763 /* 0x0.d951b7867953b0006 */,\n-0.850053176859071113491 /* 0x0.d99d15c2787a30006 */,\n-0.851204760807439786431 /* 0x0.d9e88e21de11a0003 */,\n-0.852357904828824897169 /* 0x0.da3420adba1508003 */,\n-0.853512611037803181642 /* 0x0.da7fcd6f2184d8005 */,\n-0.854668881550406100980 /* 0x0.dacb946f2afaf8000 */,\n-0.855826718478671755185 /* 0x0.db1775b6e8ad48000 */,\n-0.856986123964844970247 /* 0x0.db63714f8e0818006 */,\n-0.858147100114499461478 /* 0x0.dbaf87422625b8000 */,\n-0.859309649060962410524 /* 0x0.dbfbb797daa460002 */,\n-0.860473772936213743282 /* 0x0.dc480259d3a710001 */,\n-0.861639473872910177676 /* 0x0.dc9467913a0f48006 */,\n-0.862806754008130227807 /* 0x0.dce0e7473b9b28003 */,\n-0.863975615481124226159 /* 0x0.dd2d8185086c20006 */,\n-0.865146060433749419813 /* 0x0.dd7a3653d38168005 */,\n-0.866318091005120138881 /* 0x0.ddc705bcccd628000 */,\n-0.867491709362415264210 /* 0x0.de13efc9434100004 */,\n-0.868666917636779056818 /* 0x0.de60f4825df9b8005 */,\n-0.869843717989716047624 /* 0x0.deae13f16599c0003 */,\n-0.871022112578215268471 /* 0x0.defb4e1f9dc388002 */,\n-0.872202103559697183859 /* 0x0.df48a3164a92f0001 */,\n-0.873383693097737778847 /* 0x0.df9612deb6e878007 */,\n-0.874566883362160263365 /* 0x0.dfe39d82348310001 */,\n-0.875751676517234511901 /* 0x0.e031430a0f0688000 */,\n-0.876938074732511840819 /* 0x0.e07f037f97e548001 */,\n-0.878126080186539592654 /* 0x0.e0ccdeec2a75e0006 */,\n-0.879315695055312818168 /* 0x0.e11ad5591f4078001 */,\n-0.880506921518618312932 /* 0x0.e168e6cfd2f880004 */,\n-0.881699761760385225541 /* 0x0.e1b71359a6df60003 */,\n-0.882894217964411143207 /* 0x0.e2055afffc1178000 */,\n-0.884090292325693805080 /* 0x0.e253bdcc3ffbb8001 */,\n-0.885287987031581180559 /* 0x0.e2a23bc7d7a1d8002 */,\n-0.886487304278189114386 /* 0x0.e2f0d4fc31ab80004 */,\n-0.887688246263368285778 /* 0x0.e33f8972bea8a8005 */,\n-0.888890815189881999840 /* 0x0.e38e5934f49010007 */,\n-0.890095013257492739835 /* 0x0.e3dd444c460bd0007 */,\n-0.891300842677948068626 /* 0x0.e42c4ac232f380000 */,\n-0.892508305659222567226 /* 0x0.e47b6ca036f8b8005 */,\n-0.893717404414979710310 /* 0x0.e4caa9efd40e58002 */,\n-0.894928141160697743242 /* 0x0.e51a02ba8e2610007 */,\n-0.896140518115016826430 /* 0x0.e5697709ecab90000 */,\n-0.897354537501434679237 /* 0x0.e5b906e77c61d0006 */,\n-0.898570201543732793877 /* 0x0.e608b25cca5ba8005 */,\n-0.899787512470129891014 /* 0x0.e6587973688ce8002 */,\n-0.901006472512270728537 /* 0x0.e6a85c34ecadb8000 */,\n-0.902227083902570559127 /* 0x0.e6f85aaaed4f20006 */,\n-0.903449348881299796343 /* 0x0.e74874df09a530003 */,\n-0.904673269686823378091 /* 0x0.e798aadadecba0007 */,\n-0.905898848559668845585 /* 0x0.e7e8fca80c3ee0001 */,\n-0.907126087750156795426 /* 0x0.e8396a503c3fe0005 */,\n-0.908354989505901100354 /* 0x0.e889f3dd1615b0002 */,\n-0.909585556079328783087 /* 0x0.e8da9958465228007 */,\n-0.910817789726044213523 /* 0x0.e92b5acb7d0578001 */,\n-0.912051692703457872481 /* 0x0.e97c38406c3c30003 */,\n-0.913287267274154990210 /* 0x0.e9cd31c0cbb370001 */,\n-0.914524515702244578108 /* 0x0.ea1e475654d540000 */,\n-0.915763440256158633982 /* 0x0.ea6f790ac5cc78001 */,\n-0.917004043205012497909 /* 0x0.eac0c6e7dd8448007 */,\n-0.918246326823137892807 /* 0x0.eb1230f760a428007 */,\n-0.919490293387826285200 /* 0x0.eb63b7431714a8007 */,\n-0.920735945178816406225 /* 0x0.ebb559d4cb6f30007 */,\n-0.921983284479243714322 /* 0x0.ec0718b64c0940002 */,\n-0.923232313574974705626 /* 0x0.ec58f3f16a3910002 */,\n-0.924483034755387955725 /* 0x0.ecaaeb8ffb3168005 */,\n-0.925735450311948926408 /* 0x0.ecfcff9bd67078000 */,\n-0.926989562542820610982 /* 0x0.ed4f301edad1a0007 */,\n-0.928245373740515189457 /* 0x0.eda17d22e0f9b0001 */,\n-0.929502886213858126045 /* 0x0.edf3e6b1d37d40001 */,\n-0.930762102264245716494 /* 0x0.ee466cd594c5c8005 */,\n-0.932023024199046146183 /* 0x0.ee990f980dcdb0005 */,\n-0.933285654329454095216 /* 0x0.eeebcf032bc470007 */,\n-0.934549994971191289044 /* 0x0.ef3eab20e0d3c0001 */,\n-0.935816048439005676599 /* 0x0.ef91a3fb1e1340004 */,\n-0.937083817055075818404 /* 0x0.efe4b99bdcc618006 */,\n-0.938353303143720007819 /* 0x0.f037ec0d1889b8000 */,\n-0.939624509028518128972 /* 0x0.f08b3b58cc2bb8006 */,\n-0.940897437041863904384 /* 0x0.f0dea788fc2a90000 */,\n-0.942172089516254085427 /* 0x0.f13230a7ad21b8003 */,\n-0.943448468787511540534 /* 0x0.f185d6bee754e0006 */,\n-0.944726577195256100890 /* 0x0.f1d999d8b73478005 */,\n-0.946006417082291717338 /* 0x0.f22d79ff2cb130000 */,\n-0.947287990793413858827 /* 0x0.f281773c59ec48007 */,\n-0.948571300678290207925 /* 0x0.f2d5919a566268001 */,\n-0.949856349088629370320 /* 0x0.f329c9233bceb0001 */,\n-0.951143138379053731954 /* 0x0.f37e1de1272068002 */,\n-0.952431670908847949364 /* 0x0.f3d28fde3a6728006 */,\n-0.953721949039916472305 /* 0x0.f4271f249a93f0001 */,\n-0.955013975135367898520 /* 0x0.f47bcbbe6deab0001 */,\n-0.956307751564417496418 /* 0x0.f4d095b5e16638004 */,\n-0.957603280698967163097 /* 0x0.f5257d1524f590006 */,\n-0.958900564911197350604 /* 0x0.f57a81e668d628000 */,\n-0.960199606581278120057 /* 0x0.f5cfa433e60e50007 */,\n-0.961500408088936442422 /* 0x0.f624e407d527a0007 */,\n-0.962802971817578789903 /* 0x0.f67a416c72b760006 */,\n-0.964107300155846558292 /* 0x0.f6cfbc6c011458004 */,\n-0.965413395493874504368 /* 0x0.f7255510c439a8002 */,\n-0.966721260225105960572 /* 0x0.f77b0b6503c5b8006 */,\n-0.968030896745834645873 /* 0x0.f7d0df730a7940005 */,\n-0.969342307458006424716 /* 0x0.f826d145294be8003 */,\n-0.970655494764855020231 /* 0x0.f87ce0e5b29fd8000 */,\n-0.971970461071268720958 /* 0x0.f8d30e5efaa8f0004 */,\n-0.973287208789983648852 /* 0x0.f92959bb5e3c08001 */,\n-0.974605740331924708124 /* 0x0.f97fc305383028004 */,\n-0.975926058115625383329 /* 0x0.f9d64a46ebb9f8004 */,\n-0.977248164559556209435 /* 0x0.fa2cef8adbfc68004 */,\n-0.978572062087848637573 /* 0x0.fa83b2db7253d0007 */,\n-0.979897753126343307191 /* 0x0.fada944319fda0005 */,\n-0.981225240104636631254 /* 0x0.fb3193cc425870002 */,\n-0.982554525455618277276 /* 0x0.fb88b1815e61d0003 */,\n-0.983885611617111077747 /* 0x0.fbdfed6ce683e0007 */,\n-0.985218501026348891812 /* 0x0.fc3747995282f8006 */,\n-0.986553196127724962867 /* 0x0.fc8ec0112202a0005 */,\n-0.987889699367056062238 /* 0x0.fce656ded63710002 */,\n-0.989228013193998778636 /* 0x0.fd3e0c0cf48d50005 */,\n-0.990568140061241164686 /* 0x0.fd95dfa605c7b0003 */,\n-0.991910082424819927754 /* 0x0.fdedd1b4965710004 */,\n-0.993253842749249660216 /* 0x0.fe45e2433bfea0000 */,\n-0.994599423484053835071 /* 0x0.fe9e115c7c05f0005 */,\n-0.995946827107488830167 /* 0x0.fef65f0afb4c28006 */,\n-0.997296056085008264529 /* 0x0.ff4ecb59509cc8001 */,\n-0.998647112892057764479 /* 0x0.ffa756521dbfd0007 */,\n-1.000000000000000000000 /* 0x1.00000000000000000 */,\n-1.001354719891689004659 /* 0x1.0058c86da14aa0005 */,\n-1.002711275050312211844 /* 0x1.00b1afa5abead0003 */,\n-1.004069667960743483835 /* 0x1.010ab5b2cc0660009 */,\n-1.005429901112333324093 /* 0x1.0163da9fb2af30008 */,\n-1.006791976999887428009 /* 0x1.01bd1e7716f6a0008 */,\n-1.008155898118476168101 /* 0x1.02168143b03890006 */,\n-1.009521666967782227439 /* 0x1.027003103ae320002 */,\n-1.010889286051850133326 /* 0x1.02c9a3e7783030002 */,\n-1.012258757875921233497 /* 0x1.032363d42aaa8000e */,\n-1.013630084952214405194 /* 0x1.037d42e11c88d0000 */,\n-1.015003269791313389451 /* 0x1.03d741191635a0001 */,\n-1.016378314911229763267 /* 0x1.04315e86e84630008 */,\n-1.017755222831652872635 /* 0x1.048b9b35652800002 */,\n-1.019133996077934645224 /* 0x1.04e5f72f65827000b */,\n-1.020514637175266248212 /* 0x1.0540727fc1cfa0006 */,\n-1.021897148653734488385 /* 0x1.059b0d3157ebb0002 */,\n-1.023281533050062419584 /* 0x1.05f5c74f0cfeb0002 */,\n-1.024667792897328677539 /* 0x1.0650a0e3c22ee0003 */,\n-1.026055930738840826806 /* 0x1.06ab99fa63e1b0008 */,\n-1.027445949118511947550 /* 0x1.0706b29ddf2700009 */,\n-1.028837850584049418178 /* 0x1.0761ead9253ab0009 */,\n-1.030231637685799839262 /* 0x1.07bd42b72a3f80008 */,\n-1.031627312979383592802 /* 0x1.0818ba42e824a000c */,\n-1.033024879021186448496 /* 0x1.0874518759b0b0008 */,\n-1.034424338374263729911 /* 0x1.08d0088f80ffa0006 */,\n-1.035825693601787333992 /* 0x1.092bdf66604e30005 */,\n-1.037228947273990842283 /* 0x1.0987d617019cd000a */,\n-1.038634101961269928846 /* 0x1.09e3ecac6f199000f */,\n-1.040041160239590700707 /* 0x1.0a402331b91270002 */,\n-1.041450124688240164200 /* 0x1.0a9c79b1f37c3000b */,\n-1.042860997889083929381 /* 0x1.0af8f038352160000 */,\n-1.044273782427270314011 /* 0x1.0b5586cf986890006 */,\n-1.045688480893644856116 /* 0x1.0bb23d833dfbf0006 */,\n-1.047105095879385272564 /* 0x1.0c0f145e46e330007 */,\n-1.048523629981608529302 /* 0x1.0c6c0b6bdaadc000f */,\n-1.049944085800634585634 /* 0x1.0cc922b72470a000f */,\n-1.051366465939483019223 /* 0x1.0d265a4b5238b0007 */,\n-1.052790773004648849929 /* 0x1.0d83b23395e510002 */,\n-1.054217009607077093512 /* 0x1.0de12a7b263970006 */,\n-1.055645178360430591625 /* 0x1.0e3ec32d3cf680000 */,\n-1.057075281882416506511 /* 0x1.0e9c7c55184f5000e */,\n-1.058507322794714378170 /* 0x1.0efa55fdfad51000a */,\n-1.059941303721639416236 /* 0x1.0f58503329fed0003 */,\n-1.061377227289284297385 /* 0x1.0fb66affed37f0000 */,\n-1.062815096132297298980 /* 0x1.1014a66f95540000c */,\n-1.064254912884593951029 /* 0x1.1073028d725850007 */,\n-1.065696680185205469411 /* 0x1.10d17f64d9ea2000b */,\n-1.067140400676658718053 /* 0x1.11301d012586a0007 */,\n-1.068586077004890055886 /* 0x1.118edb6db26ab0003 */,\n-1.070033711820396415998 /* 0x1.11edbab5e2d6e000b */,\n-1.071483307775789262099 /* 0x1.124cbae51b5ef0001 */,\n-1.072934867526001312439 /* 0x1.12abdc06c3240000c */,\n-1.074388393734249103080 /* 0x1.130b1e264a62e0005 */,\n-1.075843889063253344684 /* 0x1.136a814f20ccd0003 */,\n-1.077301356179926061823 /* 0x1.13ca058cbaaed000b */,\n-1.078760797756675327056 /* 0x1.1429aaea9260e000e */,\n-1.080222216468626150775 /* 0x1.148971742537c0009 */,\n-1.081685614993597610617 /* 0x1.14e95934f37e8000b */,\n-1.083150996013011013776 /* 0x1.1549623881762000d */,\n-1.084618362213087383633 /* 0x1.15a98c8a58a6a000b */,\n-1.086087716284427351384 /* 0x1.1609d8360768c0008 */,\n-1.087559060917626885283 /* 0x1.166a45471c13f0008 */,\n-1.089032398810997337465 /* 0x1.16cad3c92d7b50009 */,\n-1.090507732647478578212 /* 0x1.172b83c7c18b5000f */,\n-1.091985065182095926460 /* 0x1.178c554ead72a000c */,\n-1.093464399073070136880 /* 0x1.17ed48695befe000c */,\n-1.094945737045367906172 /* 0x1.184e5d23812500007 */,\n-1.096429081816546080591 /* 0x1.18af9388c90e40005 */,\n-1.097914436104650892651 /* 0x1.1910eba4e031a0001 */,\n-1.099401802629782043408 /* 0x1.19726583755720003 */,\n-1.100891184121537858001 /* 0x1.19d4013041b860007 */,\n-1.102382583308144647940 /* 0x1.1a35beb6fd0cd0007 */,\n-1.103876002922312915544 /* 0x1.1a979e2363fa10000 */,\n-1.105371445702084232160 /* 0x1.1af99f8139025000e */,\n-1.106868914387219016199 /* 0x1.1b5bc2dc408b9000e */,\n-1.108368411723785085252 /* 0x1.1bbe084045eb30002 */,\n-1.109869940458469095340 /* 0x1.1c206fb91524c000e */,\n-1.111373503344554869449 /* 0x1.1c82f952817cc0001 */,\n-1.112879103137133007859 /* 0x1.1ce5a51860344000f */,\n-1.114386742595953938610 /* 0x1.1d4873168babf000e */,\n-1.115896424484008608911 /* 0x1.1dab6358e1d4a000f */,\n-1.117408151567338414664 /* 0x1.1e0e75eb43f9c000c */,\n-1.118921926613465345265 /* 0x1.1e71aad995078000f */,\n-1.120437752409564780022 /* 0x1.1ed5022fcd8600003 */,\n-1.121955631720569668277 /* 0x1.1f387bf9cd88b0000 */,\n-1.123475567332998359439 /* 0x1.1f9c18438cdec000a */,\n-1.124997562033035469759 /* 0x1.1fffd71902f970002 */,\n-1.126521618608448571713 /* 0x1.2063b88629079000e */,\n-1.128047739853580200284 /* 0x1.20c7bc96ff72a0002 */,\n-1.129575928566289189112 /* 0x1.212be3578a81e0006 */,\n-1.131106187546149888259 /* 0x1.21902cd3d05f70007 */,\n-1.132638519598779369743 /* 0x1.21f49917ddda5000c */,\n-1.134172927531616359481 /* 0x1.2259282fc1c24000e */,\n-1.135709414157753949251 /* 0x1.22bdda27911e90007 */,\n-1.137247982292643566662 /* 0x1.2322af0b638e60007 */,\n-1.138788634756517259562 /* 0x1.2387a6e755f270000 */,\n-1.140331374372893558110 /* 0x1.23ecc1c788c890006 */,\n-1.141876203969685699176 /* 0x1.2451ffb821639000c */,\n-1.143423126377846266197 /* 0x1.24b760c5486dc0009 */,\n-1.144972144431494420774 /* 0x1.251ce4fb2a0cc0005 */,\n-1.146523260971646252006 /* 0x1.25828c65f9fb8000d */,\n-1.148076478839068270690 /* 0x1.25e85711ebaeb0000 */,\n-1.149631800883562204903 /* 0x1.264e450b3c8a30008 */,\n-1.151189229953253789786 /* 0x1.26b4565e281a20003 */,\n-1.152748768902654319399 /* 0x1.271a8b16f0f000002 */,\n-1.154310420590433317050 /* 0x1.2780e341de2fc0001 */,\n-1.155874187878668246681 /* 0x1.27e75eeb3abc90007 */,\n-1.157440073633736243899 /* 0x1.284dfe1f5633e000a */,\n-1.159008080725518974322 /* 0x1.28b4c0ea840d90001 */,\n-1.160578212048386514965 /* 0x1.291ba75932ae60000 */,\n-1.162150470417516290340 /* 0x1.2982b177796850008 */,\n-1.163724858777502646494 /* 0x1.29e9df51fdd900001 */,\n-1.165301379991388053320 /* 0x1.2a5130f50bf34000e */,\n-1.166880036952526289469 /* 0x1.2ab8a66d10fdc0008 */,\n-1.168460832550151540268 /* 0x1.2b203fc675b7a000a */,\n-1.170043769683112966389 /* 0x1.2b87fd0dad7260008 */,\n-1.171628851252754177681 /* 0x1.2befde4f2e3da000d */,\n-1.173216080163546060084 /* 0x1.2c57e397719940002 */,\n-1.174805459325657830448 /* 0x1.2cc00cf2f7491000c */,\n-1.176396991650083379037 /* 0x1.2d285a6e3ff90000b */,\n-1.177990680055698513602 /* 0x1.2d90cc15d4ff90005 */,\n-1.179586527463262646306 /* 0x1.2df961f641c57000c */,\n-1.181184536796979545103 /* 0x1.2e621c1c157cd000d */,\n-1.182784710984701836994 /* 0x1.2ecafa93e35af0004 */,\n-1.184387052960675701386 /* 0x1.2f33fd6a459cb0000 */,\n-1.185991565661414393112 /* 0x1.2f9d24abd8fd1000e */,\n-1.187598252026902612178 /* 0x1.300670653e083000a */,\n-1.189207115003001469262 /* 0x1.306fe0a31bc040008 */,\n-1.190818157535919796833 /* 0x1.30d9757219895000e */,\n-1.192431382587621380206 /* 0x1.31432edef01a1000f */,\n-1.194046793097208292195 /* 0x1.31ad0cf63f0630008 */,\n-1.195664392040319823392 /* 0x1.32170fc4ce0db000c */,\n-1.197284182375793593084 /* 0x1.32813757527750005 */,\n-1.198906167074650808198 /* 0x1.32eb83ba8eef3000f */,\n-1.200530349107333139048 /* 0x1.3355f4fb457e5000d */,\n-1.202156731453099647353 /* 0x1.33c08b2641df9000c */,\n-1.203785317090505513368 /* 0x1.342b46484f07b0005 */,\n-1.205416109005122526928 /* 0x1.3496266e3fa270005 */,\n-1.207049110184904572310 /* 0x1.35012ba4e8fa10000 */,\n-1.208684323627194912036 /* 0x1.356c55f92aabb0004 */,\n-1.210321752322854882437 /* 0x1.35d7a577dd33f0004 */,\n-1.211961399276747286580 /* 0x1.36431a2de8748000d */,\n-1.213603267492579629347 /* 0x1.36aeb4283309e000c */,\n-1.215247359985374142610 /* 0x1.371a7373b00160000 */,\n-1.216893679753690671322 /* 0x1.3786581d404e90000 */,\n-1.218542229828181611183 /* 0x1.37f26231e82e4000c */,\n-1.220193013225231215567 /* 0x1.385e91be9c2d20002 */,\n-1.221846032973555429280 /* 0x1.38cae6d05e66f0000 */,\n-1.223501292099485437962 /* 0x1.393761742e5830001 */,\n-1.225158793636904830441 /* 0x1.39a401b713cb3000e */,\n-1.226818540625497444577 /* 0x1.3a10c7a61ceae0007 */,\n-1.228480536107136034131 /* 0x1.3a7db34e5a4a50003 */,\n-1.230144783126481566885 /* 0x1.3aeac4bcdf8d60001 */,\n-1.231811284734168454619 /* 0x1.3b57fbfec6e950008 */,\n-1.233480043984379381835 /* 0x1.3bc559212e7a2000f */,\n-1.235151063936380300149 /* 0x1.3c32dc3139f2a0004 */,\n-1.236824347652524913647 /* 0x1.3ca0853c106ac000e */,\n-1.238499898199571624970 /* 0x1.3d0e544eddd240003 */,\n-1.240177718649636107175 /* 0x1.3d7c4976d3fcd0000 */,\n-1.241857812073360767273 /* 0x1.3dea64c1231f70004 */,\n-1.243540181554270152039 /* 0x1.3e58a63b099920005 */,\n-1.245224830175077013244 /* 0x1.3ec70df1c4e46000e */,\n-1.246911761022835740725 /* 0x1.3f359bf29741c000e */,\n-1.248600977188942806639 /* 0x1.3fa4504ac7b800009 */,\n-1.250292481770148400634 /* 0x1.40132b07a330d000a */,\n-1.251986277866492969263 /* 0x1.40822c367a340000b */,\n-1.253682368581898742876 /* 0x1.40f153e4a18e0000d */,\n-1.255380757024939564249 /* 0x1.4160a21f73289000d */,\n-1.257081446308726757662 /* 0x1.41d016f44deaa000c */,\n-1.258784439550028944083 /* 0x1.423fb27094c090008 */,\n-1.260489739869405489991 /* 0x1.42af74a1aec1c0006 */,\n-1.262197350394008266193 /* 0x1.431f5d950a453000c */,\n-1.263907274252603851764 /* 0x1.438f6d58176860004 */,\n-1.265619514578811388761 /* 0x1.43ffa3f84b9eb000d */,\n-1.267334074511444086425 /* 0x1.44700183221180008 */,\n-1.269050957191869555296 /* 0x1.44e0860618b930006 */,\n-1.270770165768063009230 /* 0x1.4551318eb4d20000e */,\n-1.272491703389059036805 /* 0x1.45c2042a7cc26000b */,\n-1.274215573211836316547 /* 0x1.4632fde6ffacd000d */,\n-1.275941778396075143580 /* 0x1.46a41ed1cfac40001 */,\n-1.277670322103555911043 /* 0x1.471566f8812ac0000 */,\n-1.279401207505722393185 /* 0x1.4786d668b33260005 */,\n-1.281134437771823675369 /* 0x1.47f86d3002637000a */,\n-1.282870016078732078362 /* 0x1.486a2b5c13c00000e */,\n-1.284607945607987078432 /* 0x1.48dc10fa916bd0004 */,\n-1.286348229545787758022 /* 0x1.494e1e192aaa30007 */,\n-1.288090871080605159846 /* 0x1.49c052c5913df000c */,\n-1.289835873406902644341 /* 0x1.4a32af0d7d8090002 */,\n-1.291583239722392528754 /* 0x1.4aa532feab5e10002 */,\n-1.293332973229098792374 /* 0x1.4b17dea6db8010008 */,\n-1.295085077135345708087 /* 0x1.4b8ab213d57d9000d */,\n-1.296839554650994097442 /* 0x1.4bfdad53629e10003 */,\n-1.298596408992440220988 /* 0x1.4c70d0735358a000d */,\n-1.300355643380135983739 /* 0x1.4ce41b817c99e0001 */,\n-1.302117261036232376282 /* 0x1.4d578e8bb52cb0003 */,\n-1.303881265192249561154 /* 0x1.4dcb299fde2920008 */,\n-1.305647659079073541490 /* 0x1.4e3eeccbd7f4c0003 */,\n-1.307416445934474813521 /* 0x1.4eb2d81d8a86f000b */,\n-1.309187629001237640529 /* 0x1.4f26eba2e35a5000e */,\n-1.310961211525240921493 /* 0x1.4f9b2769d35090009 */,\n-1.312737196755087820678 /* 0x1.500f8b804e4a30000 */,\n-1.314515587949291131086 /* 0x1.508417f4530d00009 */,\n-1.316296388365203462468 /* 0x1.50f8ccd3df1840003 */,\n-1.318079601265708777911 /* 0x1.516daa2cf60020002 */,\n-1.319865229921343141607 /* 0x1.51e2b00da3c2b0007 */,\n-1.321653277603506371251 /* 0x1.5257de83f5512000d */,\n-1.323443747588034513690 /* 0x1.52cd359dfc7d5000e */,\n-1.325236643161341820781 /* 0x1.5342b569d6baa000f */,\n-1.327031967602244177939 /* 0x1.53b85df59921b0000 */,\n-1.328829724206201046165 /* 0x1.542e2f4f6b17e0006 */,\n-1.330629916266568235675 /* 0x1.54a4298571b27000e */,\n-1.332432547083447937938 /* 0x1.551a4ca5d97190009 */,\n-1.334237619959296017340 /* 0x1.559098bed16bf0008 */,\n-1.336045138203900251029 /* 0x1.56070dde90c800000 */,\n-1.337855105129210686631 /* 0x1.567dac13510cd0009 */,\n-1.339667524053662184301 /* 0x1.56f4736b52e2c000c */,\n-1.341482398296830025383 /* 0x1.576b63f4d8333000f */,\n-1.343299731186792467254 /* 0x1.57e27dbe2c40e0003 */,\n-1.345119526053918823702 /* 0x1.5859c0d59cd37000f */,\n-1.346941786233264881662 /* 0x1.58d12d497cd9a0005 */,\n-1.348766515064854010261 /* 0x1.5948c32824b87000c */,\n-1.350593715891792223641 /* 0x1.59c0827ff03890007 */,\n-1.352423392064920459908 /* 0x1.5a386b5f43a3e0006 */,\n-1.354255546937278120764 /* 0x1.5ab07dd485af1000c */,\n-1.356090183865519494030 /* 0x1.5b28b9ee21085000f */,\n-1.357927306213322804534 /* 0x1.5ba11fba8816e000b */,\n-1.359766917346459269620 /* 0x1.5c19af482f8f2000f */,\n-1.361609020638567812980 /* 0x1.5c9268a594cc00004 */,\n-1.363453619463660171403 /* 0x1.5d0b4be135916000c */,\n-1.365300717204201985683 /* 0x1.5d84590998eeb0005 */,\n-1.367150317245710233754 /* 0x1.5dfd902d494e40001 */,\n-1.369002422974674892971 /* 0x1.5e76f15ad22c40008 */,\n-1.370857037789471544224 /* 0x1.5ef07ca0cc166000b */,\n-1.372714165088220639199 /* 0x1.5f6a320dcf5280006 */,\n-1.374573808273481745378 /* 0x1.5fe411b0790800009 */,\n-1.376435970755022220096 /* 0x1.605e1b976e4b1000e */,\n-1.378300655944092456600 /* 0x1.60d84fd155d15000e */,\n-1.380167867259843417228 /* 0x1.6152ae6cdf0030003 */,\n-1.382037608124419003675 /* 0x1.61cd3778bc879000d */,\n-1.383909881963391264069 /* 0x1.6247eb03a4dc40009 */,\n-1.385784692209972801544 /* 0x1.62c2c91c56d9b0002 */,\n-1.387662042298923203992 /* 0x1.633dd1d1930ec0001 */,\n-1.389541935670444372533 /* 0x1.63b90532200630004 */,\n-1.391424375772021271329 /* 0x1.6434634ccc4cc0007 */,\n-1.393309366052102982208 /* 0x1.64afec30677e90008 */,\n-1.395196909966106124701 /* 0x1.652b9febc8e0f000d */,\n-1.397087010973788290271 /* 0x1.65a77e8dcc7f10004 */,\n-1.398979672539331309267 /* 0x1.66238825534170000 */,\n-1.400874898129892187656 /* 0x1.669fbcc1415600008 */,\n-1.402772691220124823310 /* 0x1.671c1c708328e000a */,\n-1.404673055288671035301 /* 0x1.6798a7420988b000d */,\n-1.406575993818903302975 /* 0x1.68155d44ca77a000f */,\n-1.408481510297352468121 /* 0x1.68923e87bf70e000a */,\n-1.410389608216942924956 /* 0x1.690f4b19e8f74000c */,\n-1.412300291075172076232 /* 0x1.698c830a4c94c0008 */\n-};\n-#define S (1.0/4503599627370496.0)  /* 2^-52 */\n-static const float exp2_deltatable[512] = {\n- 11527*S,  -963*S,   884*S,  -781*S, -2363*S, -3441*S,   123*S,   526*S,\n-    -6*S,  1254*S, -1138*S,  1519*S,  1576*S,   -65*S,  1040*S,   793*S,\n- -1662*S, -5063*S,  -387*S,   968*S,  -941*S,   984*S, -2856*S,  -545*S,\n-   495*S, -5246*S, -2109*S,  1281*S,  2075*S,   909*S, -1642*S,-78233*S,\n--31653*S,  -265*S,   130*S,   430*S,  2482*S,  -742*S,  1616*S, -2213*S,\n-  -519*S,    20*S, -3134*S,-13981*S,  1343*S, -1740*S,   247*S,  1679*S,\n- -1097*S,  3131*S,   871*S, -1480*S,  1936*S, -1827*S, 17325*S,   528*S,\n-  -322*S,  1404*S,  -152*S, -1845*S,  -212*S,  2639*S,  -476*S,  2960*S,\n-  -962*S, -1012*S, -1231*S,  3030*S,  1659*S,  -486*S,  2154*S,  1728*S,\n- -2793*S,   699*S, -1560*S, -2125*S,  2156*S,   142*S, -1888*S,  4426*S,\n--13443*S,  1970*S,   -50*S,  1771*S,-43399*S,  4979*S, -2448*S,  -370*S,\n-  1414*S,  1075*S,   232*S,   206*S,   873*S,  2141*S,  2970*S,  1279*S,\n- -2331*S,   336*S, -2595*S,   753*S, -3384*S,  -616*S,    89*S,  -818*S,\n-  5755*S,  -241*S,  -528*S,  -661*S, -3777*S,  -354*S,   250*S,  3881*S,\n-  2632*S, -2131*S,  2565*S,  -316*S,  1746*S, -2541*S, -1324*S,   -50*S,\n-  2564*S,  -782*S,  1176*S,  6452*S, -1002*S,  1288*S,   336*S,  -185*S,\n-  3063*S,  3784*S,  2169*S,   686*S,   328*S,  -400*S,   312*S, -4517*S,\n- -1457*S,  1046*S, -1530*S,  -685*S,  1328*S,-49815*S,  -895*S,  1063*S,\n- -2091*S,  -672*S, -1710*S,  -665*S,  1545*S,  1819*S,-45265*S,  3548*S,\n-  -554*S,  -568*S,  4752*S, -1907*S,-13738*S,   675*S,  9611*S, -1115*S,\n-  -815*S,   408*S, -1281*S,  -937*S,-16376*S, -4772*S, -1440*S,   992*S,\n-   788*S, 10364*S, -1602*S,  -661*S, -1783*S,  -265*S,   -20*S, -3781*S,\n-  -861*S,  -345*S,  -994*S,  1364*S, -5339*S,  1620*S,  9390*S, -1066*S,\n-  -305*S,  -170*S,   175*S,  2461*S,  -490*S,  -769*S, -1450*S,  3315*S,\n-  2418*S,   -45*S,  -852*S, -1295*S,  -488*S,   -96*S,  1142*S, -2639*S,\n-  7905*S, -9306*S, -3859*S,   760*S,  1057*S, -1570*S,  3977*S,   209*S,\n-  -514*S,  7151*S,  1646*S,   627*S,   599*S,  -774*S, -1468*S,   633*S,\n-  -473*S,   851*S,  2406*S,   143*S,    74*S,  4260*S,  1177*S,  -913*S,\n-  2670*S, -3298*S, -1662*S,  -120*S, -3264*S, -2148*S,   410*S,  2078*S,\n- -2098*S,  -926*S,  3580*S, -1289*S,  2450*S, -1158*S,   907*S,  -590*S,\n-   986*S,  1801*S,  1145*S, -1677*S,  3455*S,   956*S,   710*S,   144*S,\n-   153*S,  -255*S, -1898*S, 28102*S,  2748*S,  1194*S, -3009*S,  7076*S,\n-     0*S, -2720*S,   711*S,  1225*S, -3034*S,  -473*S,   378*S, -1046*S,\n-   962*S, -2006*S,  4647*S,  3206*S,  1769*S, -2665*S,  1254*S,  2025*S,\n- -2430*S,  6193*S,  1224*S,  -856*S, -1592*S,  -325*S, -1521*S,  1827*S,\n-  -264*S,  2403*S, -1065*S,   967*S,  -681*S, -2106*S,  -474*S,  1333*S,\n-  -893*S,  2296*S,   592*S, -1220*S,  -326*S,   990*S,   139*S,   206*S,\n-  -779*S, -1683*S,  1238*S,  6098*S,   136*S,  1197*S,   790*S,  -107*S,\n- -1004*S, -2449*S,   939*S,  5568*S,   156*S,  1812*S,  2792*S, -1094*S,\n- -2677*S,  -251*S,  2297*S,   943*S, -1329*S,  2883*S,  -853*S, -2626*S,\n--105929*S, -6552*S,  1095*S, -1508*S,  1003*S,  5039*S, -2600*S,  -749*S,\n-  1790*S,   890*S,  2016*S, -1073*S,   624*S, -2084*S, -1536*S, -1330*S,\n-   358*S,  2444*S,  -179*S,-25759*S,  -243*S,  -552*S,  -124*S,  3766*S,\n-  1192*S, -1614*S,     6*S, -1227*S,   345*S,  -981*S,  -295*S, -1006*S,\n-  -995*S, -1195*S,   706*S,  2512*S, -1758*S,  -734*S, -6286*S,  -922*S,\n-  1530*S,  1542*S,  1223*S,    61*S,   -83*S,   522*S,116937*S,  -914*S,\n-  -418*S, -7339*S,   249*S,  -520*S,  -762*S,   426*S,  -505*S,  2664*S,\n- -1093*S, -1035*S,  2130*S,  4878*S,  1982*S,  1551*S,  2304*S,   193*S,\n-  1532*S, -7268*S, 24357*S,   531*S,  2676*S, -1170*S,  1465*S, -1917*S,\n-  2143*S,  1466*S,    -7*S, -7300*S,  3297*S, -1197*S,  -289*S, -1548*S,\n- 26226*S,  4401*S,  4123*S, -1588*S,  4243*S,  4069*S, -1276*S, -2010*S,\n-  1407*S,  1478*S,   488*S, -2366*S, -2909*S, -2534*S, -1285*S,  7095*S,\n-  -645*S, -2089*S,  -944*S,   -40*S, -1363*S,  -833*S,   917*S,  1609*S,\n-  1286*S,  1677*S,  1613*S, -2295*S, -1248*S,    40*S,    26*S,  2038*S,\n-   698*S,  2675*S, -1755*S, -3522*S, -1614*S, -6111*S,   270*S,  1822*S,\n-  -234*S, -2844*S, -1201*S,  -830*S,  1193*S,  2354*S,    47*S,  1522*S,\n-   -78*S,  -640*S,  2425*S, -1596*S,  1563*S,  1169*S, -1006*S,   -83*S,\n-  2362*S, -3521*S,  -314*S,  1814*S, -1751*S,   305*S,  1715*S, -3741*S,\n-  7847*S,  1291*S,  1206*S,    36*S,  1397*S, -1419*S, -1194*S, -2014*S,\n-  1742*S,  -578*S,  -207*S,   875*S,  1539*S,  2826*S, -1165*S,  -909*S,\n-  1849*S,   927*S,  2018*S,  -981*S,  1637*S,  -463*S,   905*S,  6618*S,\n-   400*S,   630*S,  2614*S,   900*S,  2323*S, -1094*S, -1858*S,  -212*S,\n- -2069*S,   747*S,  1845*S, -1450*S,   444*S,  -213*S,  -438*S,  1158*S,\n-  4738*S,  2497*S,  -370*S, -2016*S,  -518*S, -1160*S, -1510*S,   123*S\n-};\n-/* Maximum magnitude in above table: 116937 */\n-#undef S"}, {"sha": "69fbb58a50fd459da54a8f1522bcf5dbee69e2e2", "filename": "libgcc-math/dbl-64/uasncs.h", "status": "removed", "additions": 0, "deletions": 70, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fuasncs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fuasncs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc-math%2Fdbl-64%2Fuasncs.h?ref=5cd88d6857dffe4f10c834c773c300881ec20e32", "patch": "@@ -1,70 +0,0 @@\n-/*\n- * IBM Accurate Mathematical Library\n- * Written by International Business Machines Corp.\n- * Copyright (C) 2001 Free Software Foundation, Inc.\n- *\n- * This program is free software; you can redistribute it and/or modify\n- * it under the terms of the GNU Lesser General Public License as published by\n- * the Free Software Foundation; either version 2.1 of the License, or\n- * (at your option) any later version.\n- *\n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Lesser General Public License for more details.\n- *\n- * You should have received a copy of the GNU Lesser General Public License\n- * along with this program; if not, write to the Free Software\n- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n- */\n-\n-/******************************************************************/\n-/*                                                                */\n-/* MODULE_NAME:uasncs.h                                           */\n-/*                                                                */\n-/* common data and variables prototype and definition             */\n-/******************************************************************/\n-\n-#ifndef UANSNCS_H\n-#define UANSNCS_H\n-\n-#ifdef BIG_ENDI\n- static const  mynumber\n-/**/           a1 = {{0x3FC55580, 0x00000000 }},  /*  0.1666717529296875     */\n-/**/           a2 = {{0xBED55555, 0x55552330 }},  /* -5.0862630208224597e-06 */\n-/**/          hp0 = {{0x3FF921FB, 0x54442D18 }},  /*  1.5707963267948966     */\n-/**/          hp1 = {{0x3C91A626, 0x33145C07 }};  /*  6.123233995736766e-17  */\n-\n-#else\n-#ifdef LITTLE_ENDI\n- static const  mynumber\n-/**/           a1 = {{0x00000000, 0x3FC55580 }},  /*  0.1666717529296875     */\n-/**/           a2 = {{0x55552330, 0xBED55555 }},  /* -5.0862630208224597e-06 */\n-/**/          hp0 = {{0x54442D18, 0x3FF921FB }},  /*  1.5707963267948966     */\n-/**/          hp1 = {{0x33145C07, 0x3C91A626 }};  /*  6.123233995736766e-17  */\n-\n-#endif\n-#endif\n-\n-static const double\n-              f1 =  1.66666666666664110590506577996662E-01,\n-              f2 =  7.50000000026122686814431784722623E-02,\n-              f3 =  4.46428561421059750978517350006940E-02,\n-              f4 =  3.03821268582119319911193410625235E-02,\n-              f5 =  2.23551211026525610742786300334557E-02,\n-              f6 =  1.81382903404565056280372531963613E-02;\n-static const double\n-   c2 = 0.74999999999985410757087492918602258E-01,\n-   c3 = 0.44642857150311968932423372477866076E-01,\n-   c4 = 0.30381942574778615766200591683810471E-01,\n-   c5 = 0.22372413472984868331447708777000650E-01,\n-   c6 = 0.17333630246451830686009693735025490E-01,\n-   c7 = 0.14710362893628210269950864741085777E-01;\n-\n-static const double big = 103079215104.0, t24 = 16777216.0, t27 = 134217728.0;\n-static const double\n-   rt0 = 9.99999999859990725855365213134618E-01,\n-   rt1 = 4.99999999495955425917856814202739E-01,\n-   rt2 = 3.75017500867345182581453026130850E-01,\n-   rt3 = 3.12523626554518656309172508769531E-01;\n-#endif"}, {"sha": "5b4b5f27ae701c5c608e50c5f97728d0ac5308b9", "filename": "libgcc-math/dbl-64/uatan.tbl", "status": "removed", "additions": 0, "deletions": 11135, "changes": 11135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fuatan.tbl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fuatan.tbl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc-math%2Fdbl-64%2Fuatan.tbl?ref=5cd88d6857dffe4f10c834c773c300881ec20e32"}, {"sha": "de6f4f8cee713cc59473b61b24834c432bf47caa", "filename": "libgcc-math/dbl-64/uexp.h", "status": "removed", "additions": 0, "deletions": 70, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fuexp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fuexp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc-math%2Fdbl-64%2Fuexp.h?ref=5cd88d6857dffe4f10c834c773c300881ec20e32", "patch": "@@ -1,70 +0,0 @@\n-/*\n- * IBM Accurate Mathematical Library\n- * Written by International Business Machines Corp.\n- * Copyright (C) 2001 Free Software Foundation, Inc.\n- *\n- * This program is free software; you can redistribute it and/or modify\n- * it under the terms of the GNU Lesser General Public License as published by\n- * the Free Software Foundation; either version 2.1 of the License, or\n- * (at your option) any later version.\n- *\n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Lesser General Public License for more details.\n- *\n- * You should have received a copy of the GNU Lesser General Public License\n- * along with this program; if not, write to the Free Software\n- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n- */\n-\n-/******************************************************************/\n-/*                                                                */\n-/* MODULE_NAME:uexp.h                                             */\n-/*                                                                */\n-/* common data and variables prototype and definition             */\n-/******************************************************************/\n-\n-#ifndef UEXP_H\n-#define UEXP_H\n-\n-#include \"mydefs.h\"\n-\n-const static double one = 1.0, zero = 0.0, hhuge = 1.0e300, tiny = 1.0e-300,\n-err_0 = 1.000014, err_1 = 0.000016;\n-const static int4 bigint = 0x40862002,\n-             badint = 0x40876000,smallint = 0x3C8fffff;\n-const static int4 hugeint = 0x7FFFFFFF, infint = 0x7ff00000;\n-\n-#ifdef BIG_ENDI\n-const static mynumber  inf  = {{0x7FF00000, 0}}; /* inf   */\n-const static mynumber t256  = {{0x4ff00000, 0}}; /* 2^256 */\n-\n-const static mynumber ln_two1  = {{0x3FE62E42, 0xFEFA3800}};/*0.69314718055989033 */\n-const static mynumber ln_two2  = {{0x3D2EF357, 0x93C76730}};/*5.4979230187083712e-14*/\n-const static mynumber log2e    = {{0x3FF71547, 0x652B82FE}};/* 1.4426950408889634 */\n-\n-const static mynumber p2       = {{0x3FE00000, 0x000004DC}};/* 0.50000000000013811 */\n-const static mynumber p3       = {{0x3FC55555, 0x55555A0F}};/* 0.16666666666670024 */\n-\n-const static mynumber three33  = {{0x42180000, 0}};         /* 25769803776 */\n-const static mynumber three51  = {{0x43380000, 0}};         /*  6755399441055744 */\n-\n-#else\n-#ifdef LITTLE_ENDI\n- const static mynumber  inf  = {{0, 0x7FF00000}}; /* inf   */\n- const static mynumber t256  = {{0, 0x4ff00000}}; /* 2^256 */\n-\n- const static mynumber ln_two1 = {{0xFEFA3800, 0x3FE62E42}};/*0.69314718055989033 */\n- const static mynumber ln_two2 = {{0x93C76730, 0x3D2EF357}};/*5.4979230187083712e-14*/\n- const static mynumber log2e   = {{0x652B82FE, 0x3FF71547}};/* 1.4426950408889634 */\n-\n- const static mynumber p2      = {{0x000004DC, 0x3FE00000}};/* 0.50000000000013811 */\n- const static mynumber p3      = {{0x55555A0F, 0x3FC55555}};/* 0.16666666666670024 */\n-\n- const static mynumber three33 = {{0, 0x42180000}};   /*  25769803776      */\n- const static mynumber three51 = {{0, 0x43380000}};   /*  6755399441055744 */\n-\n-#endif\n-#endif\n-#endif"}, {"sha": "f2e8e8f559cde59928125c635d501e8f6b5cd2c9", "filename": "libgcc-math/dbl-64/uexp.tbl", "status": "removed", "additions": 0, "deletions": 1787, "changes": 1787, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fuexp.tbl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fuexp.tbl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc-math%2Fdbl-64%2Fuexp.tbl?ref=5cd88d6857dffe4f10c834c773c300881ec20e32", "patch": "@@ -1,1787 +0,0 @@\n-/*\n- * IBM Accurate Mathematical Library\n- * Written by International Business Machines Corp.\n- * Copyright (C) 2001 Free Software Foundation, Inc.\n- *\n- * This program is free software; you can redistribute it and/or modify\n- * it under the terms of the GNU Lesser General Public License as published by\n- * the Free Software Foundation; either version 2.1 of the License, or\n- * (at your option) any later version.\n- *\n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Lesser General Public License for more details.\n- *\n- * You should have received a copy of the GNU Lesser General Public License\n- * along with this program; if not, write to the Free Software\n- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n- */\n-\n-/****************************************************************/\n-/* TABLES FOR THE ulog() FUNCTION                               */\n-/****************************************************************/\n-\n-#ifdef BIG_ENDI\n-\n-static const  union {\n-  int i[1424];\n-  double x[712];\n-} coar = { .i = {\n-  0x3FE69A59,  0xC8000000,  0x3DF22D4D,  0x6079C9F7,\n-  0x3FE6A5A9,  0xC8000000,  0x3E19882D,  0x25AF6823,\n-  0x3FE6B0FF,  0x74000000,  0xBE221476,  0x31DABF59,\n-  0x3FE6BC5A,  0xC8000000,  0x3E2312AC,  0x99A2DC0A,\n-  0x3FE6C7BB,  0xD0000000,  0xBE265926,  0xCE9F9355,\n-  0x3FE6D322,  0x84000000,  0x3E2F2C26,  0x2D298DED,\n-  0x3FE6DE8E,  0xF4000000,  0xBE2EC28E,  0x1E748D2F,\n-  0x3FE6EA01,  0x14000000,  0x3E2D8C6D,  0xC68CB7E5,\n-  0x3FE6F578,  0xF4000000,  0x3DEE1A9E,  0x419FE2F0,\n-  0x3FE700F6,  0x90000000,  0xBDFF1AFD,  0xDEAEAE34,\n-  0x3FE70C79,  0xEC000000,  0xBE0730FE,  0x558B7122,\n-  0x3FE71803,  0x0C000000,  0xBE25CB85,  0x2D280C3B,\n-  0x3FE72391,  0xF0000000,  0xBE06F2CE,  0x337B7B54,\n-  0x3FE72F26,  0x9C000000,  0x3E289BCA,  0x45C02B72,\n-  0x3FE73AC1,  0x18000000,  0xBE18DEA6,  0x5039F1CA,\n-  0x3FE74661,  0x60000000,  0xBE09D090,  0x86CE0538,\n-  0x3FE75207,  0x78000000,  0x3E290E79,  0xCFCE5DDB,\n-  0x3FE75DB3,  0x68000000,  0x3DD61DF0,  0xB249A17C,\n-  0x3FE76965,  0x2C000000,  0x3E2F22F7,  0xE13445F7,\n-  0x3FE7751C,  0xD0000000,  0xBE2CD454,  0x874E75CE,\n-  0x3FE780DA,  0x4C000000,  0xBE0159CE,  0xDF43E3BC,\n-  0x3FE78C9D,  0xA8000000,  0x3E279291,  0x699A1332,\n-  0x3FE79866,  0xEC000000,  0xBE2A0BCD,  0x2DD98C6C,\n-  0x3FE7A436,  0x10000000,  0x3E25F375,  0x15AC979E,\n-  0x3FE7B00B,  0x20000000,  0x3E26CCF5,  0x2FEAFCF6,\n-  0x3FE7BBE6,  0x1C000000,  0x3E27D4F4,  0x53ADAD67,\n-  0x3FE7C7C7,  0x08000000,  0x3E10EEC7,  0x7FBD9566,\n-  0x3FE7D3AD,  0xE4000000,  0x3E2837F0,  0x9A831D86,\n-  0x3FE7DF9A,  0xB8000000,  0xBE129BE0,  0x5CB4C35B,\n-  0x3FE7EB8D,  0x80000000,  0x3E23990A,  0x0234F04D,\n-  0x3FE7F786,  0x44000000,  0x3E2EB807,  0x64D5C842,\n-  0x3FE80385,  0x08000000,  0x3E0FC86F,  0x02B4E9E8,\n-  0x3FE80F89,  0xCC000000,  0xBDD7B5B3,  0x7B4274BF,\n-  0x3FE81B94,  0x94000000,  0xBE16888B,  0xB899B00F,\n-  0x3FE827A5,  0x60000000,  0x3E288971,  0x5E94D155,\n-  0x3FE833BC,  0x38000000,  0x3E2AEEB2,  0x099F3E5E,\n-  0x3FE83FD9,  0x20000000,  0xBE23B922,  0x3FF60B7C,\n-  0x3FE84BFC,  0x14000000,  0xBDF7D3B1,  0x2DBD8012,\n-  0x3FE85825,  0x1C000000,  0xBDF24BA3,  0xA8872BEB,\n-  0x3FE86454,  0x38000000,  0x3E2EFE04,  0x01AA18A7,\n-  0x3FE87089,  0x70000000,  0x3E21986C,  0x944496A2,\n-  0x3FE87CC4,  0xC4000000,  0x3E096A8B,  0xB71FFAFF,\n-  0x3FE88906,  0x38000000,  0xBE21CE0A,  0xBC4C7AC5,\n-  0x3FE8954D,  0xCC000000,  0xBE076F45,  0xBAC02491,\n-  0x3FE8A19B,  0x84000000,  0x3E2B4FA2,  0xD922B925,\n-  0x3FE8ADEF,  0x68000000,  0x3DF759DB,  0x641863AF,\n-  0x3FE8BA49,  0x78000000,  0xBE2DB97C,  0xC6AB5E04,\n-  0x3FE8C6A9,  0xB4000000,  0xBE25364C,  0xE2156713,\n-  0x3FE8D310,  0x20000000,  0x3E1BEB7C,  0x862BEFF7,\n-  0x3FE8DF7C,  0xC4000000,  0xBDF4DD0C,  0x1CEA33A5,\n-  0x3FE8EBEF,  0xA0000000,  0xBE2537DF,  0x51797D47,\n-  0x3FE8F868,  0xB4000000,  0x3E0FB1C4,  0xF0107B28,\n-  0x3FE904E8,  0x08000000,  0x3E0AD6A1,  0xE01B68BD,\n-  0x3FE9116D,  0x9C000000,  0x3E292117,  0x1F78D9D9,\n-  0x3FE91DF9,  0x78000000,  0xBE1D75DA,  0x4F50E5CF,\n-  0x3FE92A8B,  0x98000000,  0x3DE5102B,  0x74959E58,\n-  0x3FE93724,  0x04000000,  0xBE01CA50,  0xD2216C35,\n-  0x3FE943C2,  0xBC000000,  0x3E225BFD,  0xB0B05884,\n-  0x3FE95067,  0xC8000000,  0xBE0F2183,  0x60B7C5C1,\n-  0x3FE95D13,  0x24000000,  0x3E2FB47A,  0xB5860441,\n-  0x3FE969C4,  0xDC000000,  0xBE01FFD2,  0xE2D4059E,\n-  0x3FE9767C,  0xEC000000,  0xBDE9ED72,  0x12BB6A8D,\n-  0x3FE9833B,  0x58000000,  0x3E2B3815,  0x43BFFB24,\n-  0x3FE99000,  0x28000000,  0x3E03FA22,  0xEE9EAD1E,\n-  0x3FE99CCB,  0x5C000000,  0xBE213841,  0x377138F7,\n-  0x3FE9A99C,  0xF4000000,  0x3E178105,  0xDB636C94,\n-  0x3FE9B674,  0xF8000000,  0x3E1E5E7A,  0xF5720122,\n-  0x3FE9C353,  0x6C000000,  0xBE238BFF,  0xA2AC5AAE,\n-  0x3FE9D038,  0x4C000000,  0x3E270893,  0xF93BDBD8,\n-  0x3FE9DD23,  0xA4000000,  0x3DF40420,  0x354B86CF,\n-  0x3FE9EA15,  0x74000000,  0xBE2D76D3,  0x88CB06B7,\n-  0x3FE9F70D,  0xBC000000,  0xBE251639,  0x9ED0EC60,\n-  0x3FEA040C,  0x80000000,  0x3E1F06E9,  0xE2DDE506,\n-  0x3FEA1111,  0xC8000000,  0x3E014549,  0x8E6DB477,\n-  0x3FEA1E1D,  0x94000000,  0xBDF4BC17,  0xF8716509,\n-  0x3FEA2B2F,  0xE8000000,  0xBE2107DB,  0xDA723A49,\n-  0x3FEA3848,  0xC4000000,  0x3E1A932A,  0x986AA369,\n-  0x3FEA4568,  0x30000000,  0x3E198092,  0x41592CDB,\n-  0x3FEA528E,  0x30000000,  0xBE2E260F,  0x676BCAB8,\n-  0x3FEA5FBA,  0xC0000000,  0x3DE2E821,  0x2D5D5610,\n-  0x3FEA6CED,  0xE8000000,  0x3E2F7046,  0x7DA20167,\n-  0x3FEA7A27,  0xB0000000,  0xBE1D2832,  0xF9FAAD30,\n-  0x3FEA8768,  0x14000000,  0xBE23F788,  0x43FA6C45,\n-  0x3FEA94AF,  0x18000000,  0x3E011E27,  0xAA082732,\n-  0x3FEAA1FC,  0xC4000000,  0xBE20BACB,  0xC682F0BF,\n-  0x3FEAAF51,  0x18000000,  0xBE2DC7DD,  0x7BD08C78,\n-  0x3FEABCAC,  0x14000000,  0x3E2271A2,  0xA3B10F9A,\n-  0x3FEACA0D,  0xC4000000,  0xBE15449C,  0x7966F94C,\n-  0x3FEAD776,  0x24000000,  0x3DD06137,  0x6FD8F3EE,\n-  0x3FEAE4E5,  0x3C000000,  0xBE267CD1,  0x8C5A144A,\n-  0x3FEAF25B,  0x0C000000,  0xBE29E584,  0xB59DA94B,\n-  0x3FEAFFD7,  0x98000000,  0xBE23DFCF,  0x7B52192F,\n-  0x3FEB0D5A,  0xE4000000,  0xBE1CF2FE,  0x78A76B45,\n-  0x3FEB1AE4,  0xF4000000,  0xBE23A561,  0x7EC80FF6,\n-  0x3FEB2875,  0xC8000000,  0x3E22C4C9,  0x932EED68,\n-  0x3FEB360D,  0x68000000,  0x3E2B085C,  0xB5833C97,\n-  0x3FEB43AB,  0xD8000000,  0xBE01F093,  0x93B9319A,\n-  0x3FEB5151,  0x18000000,  0xBE254F01,  0xFABCE670,\n-  0x3FEB5EFD,  0x28000000,  0x3E2F24C2,  0x627ABFB0,\n-  0x3FEB6CB0,  0x14000000,  0x3E1F1EEC,  0xE6AC0B48,\n-  0x3FEB7A69,  0xDC000000,  0xBE1A8671,  0x127F9ABC,\n-  0x3FEB882A,  0x80000000,  0xBDCB0C28,  0xC87C73B3,\n-  0x3FEB95F2,  0x08000000,  0xBE22E8DD,  0x7F2B5A97,\n-  0x3FEBA3C0,  0x74000000,  0xBE1B3645,  0x2D22A9D5,\n-  0x3FEBB195,  0xC8000000,  0x3E0ADACA,  0x428F8B88,\n-  0x3FEBBF72,  0x0C000000,  0xBE2E9E07,  0xCDF9F681,\n-  0x3FEBCD55,  0x3C000000,  0xBE08A127,  0x7FA54ACF,\n-  0x3FEBDB3F,  0x60000000,  0x3E0E92CE,  0x8225B385,\n-  0x3FEBE930,  0x7C000000,  0x3DF38C2A,  0x7BB09485,\n-  0x3FEBF728,  0x94000000,  0xBE2DFD64,  0xF681FA5F,\n-  0x3FEC0527,  0xA4000000,  0x3E2E384D,  0xDCE88BD2,\n-  0x3FEC132D,  0xBC000000,  0xBE20F111,  0xFE46A893,\n-  0x3FEC213A,  0xD4000000,  0x3E193DA1,  0xB189BFDA,\n-  0x3FEC2F4E,  0xF8000000,  0xBE20E3A1,  0x0E39FB00,\n-  0x3FEC3D6A,  0x24000000,  0x3E1DB044,  0x30F0FAC5,\n-  0x3FEC4B8C,  0x64000000,  0xBE2BC12C,  0x97446B17,\n-  0x3FEC59B5,  0xB4000000,  0xBE282696,  0x963F4150,\n-  0x3FEC67E6,  0x18000000,  0x3E224D26,  0x3049824B,\n-  0x3FEC761D,  0x98000000,  0x3E2C5BA5,  0x87F84C7D,\n-  0x3FEC845C,  0x38000000,  0xBDE1D14D,  0xC4852339,\n-  0x3FEC92A1,  0xF8000000,  0xBE1A451E,  0x5588D9E1,\n-  0x3FECA0EE,  0xDC000000,  0xBE1D3B96,  0x68BFF457,\n-  0x3FECAF42,  0xE8000000,  0xBE18B670,  0x4DADF774,\n-  0x3FECBD9E,  0x20000000,  0xBE1A1548,  0x7FB1FC01,\n-  0x3FECCC00,  0x88000000,  0xBE273F2E,  0x78FC5AF0,\n-  0x3FECDA6A,  0x20000000,  0x3E1D218F,  0xA6F4A841,\n-  0x3FECE8DA,  0xF0000000,  0x3E2E0BA9,  0x4D002CA0,\n-  0x3FECF752,  0xFC000000,  0x3E20F4BB,  0x065EF979,\n-  0x3FED05D2,  0x48000000,  0xBE2ED3D5,  0x11793B33,\n-  0x3FED1458,  0xD0000000,  0x3E115E3C,  0x913341B3,\n-  0x3FED22E6,  0xA0000000,  0x3DE97C02,  0xB3546109,\n-  0x3FED317B,  0xB8000000,  0x3E087540,  0x1BF898EF,\n-  0x3FED4018,  0x1C000000,  0x3E209430,  0x346F9641,\n-  0x3FED4EBB,  0xD0000000,  0x3E2B6DF4,  0x88F4B20B,\n-  0x3FED5D66,  0xDC000000,  0xBE2EC68F,  0x0CB26035,\n-  0x3FED6C19,  0x38000000,  0x3E2CA2C8,  0x1F44D9C3,\n-  0x3FED7AD2,  0xF4000000,  0x3E10E6F4,  0x41704EE0,\n-  0x3FED8994,  0x0C000000,  0x3E2F9273,  0x25F8F0E2,\n-  0x3FED985C,  0x88000000,  0x3E2D041A,  0x318798DE,\n-  0x3FEDA72C,  0x6C000000,  0xBE005680,  0x9349CF58,\n-  0x3FEDB603,  0xB8000000,  0xBE10F665,  0xCF0C934D,\n-  0x3FEDC4E2,  0x70000000,  0x3E166124,  0x19461C64,\n-  0x3FEDD3C8,  0x9C000000,  0xBE1B2ED6,  0x405624C8,\n-  0x3FEDE2B6,  0x3C000000,  0xBE273A7F,  0x62171501,\n-  0x3FEDF1AB,  0x54000000,  0xBE26022B,  0xE36E1450,\n-  0x3FEE00A7,  0xE8000000,  0xBE1C341E,  0x2E07AE15,\n-  0x3FEE0FAB,  0xFC000000,  0xBDFC7EAE,  0x18D0E701,\n-  0x3FEE1EB7,  0x94000000,  0x3E06B34F,  0xECD1FF8B,\n-  0x3FEE2DCA,  0xB4000000,  0x3E1394A3,  0x6813A649,\n-  0x3FEE3CE5,  0x60000000,  0x3E045496,  0xC1754D14,\n-  0x3FEE4C07,  0x9C000000,  0xBE180FFF,  0xF5C6087C,\n-  0x3FEE5B31,  0x68000000,  0x3E22FBCD,  0xADD9A300,\n-  0x3FEE6A62,  0xCC000000,  0x3E2EC7C7,  0xAF0289E5,\n-  0x3FEE799B,  0xCC000000,  0x3E242182,  0x3FB3EDD4,\n-  0x3FEE88DC,  0x6C000000,  0xBE201304,  0x04E39885,\n-  0x3FEE9824,  0xAC000000,  0xBE20D352,  0xE6831D31,\n-  0x3FEEA774,  0x90000000,  0x3E1E032D,  0x618DFCEB,\n-  0x3FEEB6CC,  0x20000000,  0x3E1956A3,  0xF9BB457E,\n-  0x3FEEC62B,  0x60000000,  0xBE2A77E0,  0x50845DB2,\n-  0x3FEED592,  0x4C000000,  0x3E2714F7,  0x47C43858,\n-  0x3FEEE500,  0xF0000000,  0x3E2EED96,  0x71813A66,\n-  0x3FEEF477,  0x50000000,  0xBE04CDBE,  0x4FB4AA34,\n-  0x3FEF03F5,  0x6C000000,  0xBE2774A2,  0x86EB4FF5,\n-  0x3FEF137B,  0x48000000,  0xBE29DD95,  0xAD43B2D2,\n-  0x3FEF2308,  0xE8000000,  0xBE1CADB0,  0xAC16E506,\n-  0x3FEF329E,  0x50000000,  0x3E12AC33,  0x58745C7B,\n-  0x3FEF423B,  0x88000000,  0xBE248118,  0x6EC2D854,\n-  0x3FEF51E0,  0x8C000000,  0x3E26986B,  0x304ACE08,\n-  0x3FEF618D,  0x68000000,  0x3E126D81,  0x3B09354E,\n-  0x3FEF7142,  0x1C000000,  0x3DF06AAE,  0x773C23B3,\n-  0x3FEF80FE,  0xAC000000,  0xBDA105B6,  0xD82EF423,\n-  0x3FEF90C3,  0x1C000000,  0x3DECDEED,  0x465499B8,\n-  0x3FEFA08F,  0x70000000,  0x3E0AEFD4,  0xE2EF03AE,\n-  0x3FEFB063,  0xAC000000,  0x3E1BD4C0,  0x0567B2E7,\n-  0x3FEFC03F,  0xD4000000,  0x3E26AA22,  0x4F97FCBF,\n-  0x3FEFD023,  0xF0000000,  0xBE2F9420,  0x5E4E88D1,\n-  0x3FEFE00F,  0xFC000000,  0xBE254004,  0x438E52E2,\n-  0x3FEFF004,  0x00000000,  0xBE1552AA,  0xEEE93EFC,\n-  0x3FF00000,  0x00000000,  0x00000000,  0x00000000,\n-  0x3FF00802,  0x00000000,  0x3E155800,  0x4449F507,\n-  0x3FF01008,  0x04000000,  0xBE354AA8,  0x882D75D6,\n-  0x3FF01812,  0x08000000,  0x3E303610,  0x3740DE56,\n-  0x3FF02020,  0x14000000,  0x3E360044,  0x5B0C3264,\n-  0x3FF02832,  0x28000000,  0x3E3C4C26,  0x0197EDC3,\n-  0x3FF03048,  0x48000000,  0x3E0B103B,  0x5046CA09,\n-  0x3FF03862,  0x74000000,  0xBE34659C,  0xF9A62624,\n-  0x3FF04080,  0xAC000000,  0xBE254438,  0xDD0A8F37,\n-  0x3FF048A2,  0xF4000000,  0x3DF256C2,  0x97AFB6E2,\n-  0x3FF050C9,  0x50000000,  0xBE3085DF,  0x923D25E1,\n-  0x3FF058F3,  0xC0000000,  0xBE3F0A93,  0x5EA3B091,\n-  0x3FF06122,  0x44000000,  0xBE237DE4,  0x5D63534C,\n-  0x3FF06954,  0xE0000000,  0x3E301719,  0xFF0C58B7,\n-  0x3FF0718B,  0x98000000,  0x3E2E8410,  0x9DF7B665,\n-  0x3FF079C6,  0x6C000000,  0x3E349CB9,  0x3B127222,\n-  0x3FF08205,  0x60000000,  0x3DF127EC,  0x98E0BD08,\n-  0x3FF08A48,  0x74000000,  0xBE24C1B6,  0x706CC41F,\n-  0x3FF0928F,  0xA8000000,  0x3E334EF9,  0x093044EF,\n-  0x3FF09ADB,  0x04000000,  0xBE1304B1,  0x56BC6C83,\n-  0x3FF0A32A,  0x84000000,  0x3E2D383E,  0xB028B984,\n-  0x3FF0AB7E,  0x30000000,  0xBE315B1E,  0x64E7A202,\n-  0x3FF0B3D6,  0x04000000,  0xBE0AC1E6,  0xC678291E,\n-  0x3FF0BC32,  0x04000000,  0x3E3A0418,  0x2F12FFE2,\n-  0x3FF0C492,  0x38000000,  0xBE37D617,  0x43D6D302,\n-  0x3FF0CCF6,  0x98000000,  0x3E2133F2,  0x152CC8FA,\n-  0x3FF0D55F,  0x2C000000,  0x3E3CE5D1,  0xE966E6B7,\n-  0x3FF0DDCB,  0xF8000000,  0x3E1ABF24,  0x7BCACA64,\n-  0x3FF0E63C,  0xFC000000,  0xBE3854F6,  0x2E8CDBED,\n-  0x3FF0EEB2,  0x38000000,  0xBE3E6463,  0x0C32156B,\n-  0x3FF0F72B,  0xAC000000,  0x3E365671,  0xB69772CC,\n-  0x3FF0FFA9,  0x64000000,  0xBE383E9A,  0x02B1201A,\n-  0x3FF1082B,  0x58000000,  0xBE205962,  0x50549CC0,\n-  0x3FF110B1,  0x90000000,  0xBE376BFE,  0xFFDACA72,\n-  0x3FF1193C,  0x08000000,  0x3E3C1C59,  0x5C43E2F3,\n-  0x3FF121CA,  0xCC000000,  0xBE26D374,  0xF7067C8B,\n-  0x3FF12A5D,  0xD4000000,  0x3E343CCC,  0x4DDAFE1D,\n-  0x3FF132F5,  0x28000000,  0x3E3D5C16,  0x58EBCB7F,\n-  0x3FF13B90,  0xCC000000,  0xBE2B5D12,  0xB66E8B53,\n-  0x3FF14430,  0xBC000000,  0xBE24E919,  0xB326B482,\n-  0x3FF14CD4,  0xFC000000,  0x3E23139A,  0xC8AABD43,\n-  0x3FF1557D,  0x90000000,  0x3E30DD8B,  0x16743B55,\n-  0x3FF15E2A,  0x7C000000,  0xBE31D701,  0x35904C50,\n-  0x3FF166DB,  0xBC000000,  0x3E107F42,  0x30E0CA83,\n-  0x3FF16F91,  0x58000000,  0xBE24F1F2,  0xDA1B7123,\n-  0x3FF1784B,  0x50000000,  0xBE3ACAF2,  0x0DC79E23,\n-  0x3FF18109,  0xA4000000,  0xBE23DC79,  0x609374EE,\n-  0x3FF189CC,  0x58000000,  0x3E262CF7,  0x3A40C3B7,\n-  0x3FF19293,  0x70000000,  0x3E1D3833,  0x5A24F463,\n-  0x3FF19B5E,  0xEC000000,  0x3E2BA9AD,  0x8A2E4440,\n-  0x3FF1A42E,  0xD0000000,  0x3DFD8CBC,  0x61C41828,\n-  0x3FF1AD03,  0x1C000000,  0x3E1A65E6,  0x5A4DDF0D,\n-  0x3FF1B5DB,  0xD4000000,  0xBDE2FDBB,  0x9F828DB5,\n-  0x3FF1BEB8,  0xF8000000,  0x3E2F4EE8,  0xB79B700F,\n-  0x3FF1C79A,  0x8C000000,  0x3E3ACC35,  0x0DE1D7E8,\n-  0x3FF1D080,  0x94000000,  0x3E11729E,  0xFF9E20A0,\n-  0x3FF1D96B,  0x10000000,  0xBE300F18,  0x6C2EA70B,\n-  0x3FF1E25A,  0x00000000,  0x3DF32E02,  0xCE425A35,\n-  0x3FF1EB4D,  0x68000000,  0x3E3BDE56,  0x9A322D12,\n-  0x3FF1F445,  0x50000000,  0xBE3C3F0D,  0xBA737AEF,\n-  0x3FF1FD41,  0xB0000000,  0xBE0A2DD0,  0xC896DB7A,\n-  0x3FF20642,  0x90000000,  0x3E2577B0,  0xF8B782F6,\n-  0x3FF20F47,  0xF4000000,  0xBE2C6DA3,  0x73607FC8,\n-  0x3FF21851,  0xD8000000,  0x3E35F7D1,  0xC8917348,\n-  0x3FF22160,  0x44000000,  0x3E3B6F5C,  0xCF9CED69,\n-  0x3FF22A73,  0x3C000000,  0xBE39967E,  0x85775C2E,\n-  0x3FF2338A,  0xB8000000,  0x3E3B3213,  0x497226D4,\n-  0x3FF23CA6,  0xC4000000,  0x3E3E2710,  0x30733227,\n-  0x3FF245C7,  0x60000000,  0x3E33B8A9,  0xAF215A72,\n-  0x3FF24EEC,  0x90000000,  0xBE3F96B2,  0x1365623F,\n-  0x3FF25816,  0x50000000,  0xBE37324F,  0x27DEE202,\n-  0x3FF26144,  0xA4000000,  0x3E318CD5,  0x4E484D87,\n-  0x3FF26A77,  0x94000000,  0xBDE3FD37,  0xA94519E8,\n-  0x3FF273AF,  0x1C000000,  0x3E37132F,  0xEE788C29,\n-  0x3FF27CEB,  0x44000000,  0xBE03DDB7,  0xE842E5C0,\n-  0x3FF2862C,  0x08000000,  0x3E37A3FB,  0xE17C9693,\n-  0x3FF28F71,  0x70000000,  0x3E24EABF,  0xAEB3D9A0,\n-  0x3FF298BB,  0x7C000000,  0xBE13C7B6,  0x853B0733,\n-  0x3FF2A20A,  0x2C000000,  0x3E2D2C80,  0xC7B588B5,\n-  0x3FF2AB5D,  0x88000000,  0xBE35B750,  0x708F3912,\n-  0x3FF2B4B5,  0x8C000000,  0xBE291A70,  0xD5FD9130,\n-  0x3FF2BE12,  0x3C000000,  0x3E2EE937,  0x0CCF9F73,\n-  0x3FF2C773,  0xA0000000,  0xBE3C3F0C,  0xD42CF76C,\n-  0x3FF2D0D9,  0xB0000000,  0x3E35DD54,  0x60763D61,\n-  0x3FF2DA44,  0x78000000,  0x3E26C418,  0xE7D6AA3B,\n-  0x3FF2E3B3,  0xF8000000,  0xBE3605C6,  0x6FB9B7A8,\n-  0x3FF2ED28,  0x2C000000,  0x3E3763D4,  0x24DCDDF5,\n-  0x3FF2F6A1,  0x20000000,  0xBE1A411E,  0xA8EC1AA8,\n-  0x3FF3001E,  0xD0000000,  0xBE23FCA1,  0x1FE8546F,\n-  0x3FF309A1,  0x40000000,  0xBE29DF0D,  0x3AAEE75E,\n-  0x3FF31328,  0x70000000,  0x3E36A5D6,  0x3C2C4206,\n-  0x3FF31CB4,  0x68000000,  0x3E1B7A3E,  0xB4C979B0,\n-  0x3FF32645,  0x28000000,  0xBE36157D,  0x706CD593,\n-  0x3FF32FDA,  0xB0000000,  0xBE39F357,  0x8DA4C646,\n-  0x3FF33975,  0x04000000,  0xBE3E64DE,  0xD575FE6F,\n-  0x3FF34314,  0x24000000,  0x3E07F9E3,  0x44D008E0,\n-  0x3FF34CB8,  0x18000000,  0xBE2E94F9,  0x5A563E77,\n-  0x3FF35660,  0xDC000000,  0x3E314DC2,  0x2475EF19,\n-  0x3FF3600E,  0x78000000,  0x3E26D623,  0xA33AC606,\n-  0x3FF369C0,  0xEC000000,  0x3E170F86,  0xC05B3160,\n-  0x3FF37378,  0x3C000000,  0xBE38DDFE,  0xDB0AE31A,\n-  0x3FF37D34,  0x64000000,  0x3E3662A9,  0x5706B570,\n-  0x3FF386F5,  0x70000000,  0xBE1625E4,  0x6770731E,\n-  0x3FF390BB,  0x5C000000,  0xBE1678F1,  0x62971091,\n-  0x3FF39A86,  0x2C000000,  0xBE061F7C,  0xD045CB0C,\n-  0x3FF3A455,  0xE4000000,  0xBE35CF51,  0x568B1CA2,\n-  0x3FF3AE2A,  0x84000000,  0xBE378185,  0x7FB61F58,\n-  0x3FF3B804,  0x0C000000,  0x3E3F77F4,  0x4FA133AF,\n-  0x3FF3C1E2,  0x88000000,  0xBE22F96A,  0xB00B73FE,\n-  0x3FF3CBC5,  0xF0000000,  0x3E351A64,  0x1EB4CE2F,\n-  0x3FF3D5AE,  0x50000000,  0xBE3D3516,  0xD3755639,\n-  0x3FF3DF9B,  0xA0000000,  0x3E1CD938,  0x43E8C10E,\n-  0x3FF3E98D,  0xEC000000,  0xBE35EE23,  0x455C8842,\n-  0x3FF3F385,  0x30000000,  0xBE29B282,  0x96C9F4ED,\n-  0x3FF3FD81,  0x70000000,  0x3E24A40E,  0x3168CC0B,\n-  0x3FF40782,  0xB0000000,  0x3E3784BC,  0x86C72839,\n-  0x3FF41188,  0xF4000000,  0x3E061F19,  0x0785D847,\n-  0x3FF41B94,  0x3C000000,  0xBE27AEF2,  0xE654A9C9,\n-  0x3FF425A4,  0x88000000,  0x3E33DFC3,  0xF9E4C1BA,\n-  0x3FF42FB9,  0xE0000000,  0x3E2455A8,  0x593D0C75,\n-  0x3FF439D4,  0x44000000,  0xBDE41D4E,  0x238B65D1,\n-  0x3FF443F3,  0xB4000000,  0x3E3BE616,  0x454CBECB,\n-  0x3FF44E18,  0x38000000,  0x3E207B3C,  0x931C5332,\n-  0x3FF45841,  0xD0000000,  0xBE330846,  0x7615DCC9,\n-  0x3FF46270,  0x7C000000,  0xBE2A8A7B,  0xE497F84E,\n-  0x3FF46CA4,  0x40000000,  0x3E020B50,  0xF737AF78,\n-  0x3FF476DD,  0x20000000,  0x3E116B19,  0xE34AFBD3,\n-  0x3FF4811B,  0x20000000,  0xBE3E15A7,  0x841EDB52,\n-  0x3FF48B5E,  0x3C000000,  0x3E0F40C3,  0x33B3DE1E,\n-  0x3FF495A6,  0x7C000000,  0x3E33607F,  0x92EFEE02,\n-  0x3FF49FF3,  0xE4000000,  0xBE1A2DB5,  0x14F7E168,\n-  0x3FF4AA46,  0x70000000,  0x3E3F59EC,  0x3EBA1C94,\n-  0x3FF4B49E,  0x2C000000,  0xBE31A539,  0x8B9AE885,\n-  0x3FF4BEFB,  0x10000000,  0x3E2FAC0B,  0xF13C8C95,\n-  0x3FF4C95D,  0x28000000,  0xBE32C0BB,  0xF8B74775,\n-  0x3FF4D3C4,  0x70000000,  0xBE2FC24E,  0x4F9474BB,\n-  0x3FF4DE30,  0xEC000000,  0x3E008F30,  0x09DA911F,\n-  0x3FF4E8A2,  0xA0000000,  0x3E2994C1,  0xBAF8D98B,\n-  0x3FF4F319,  0x90000000,  0xBE17C38C,  0x18648D0A,\n-  0x3FF4FD95,  0xBC000000,  0xBE288852,  0xF22F8698,\n-  0x3FF50817,  0x28000000,  0xBE3C3EC3,  0x30A2C153,\n-  0x3FF5129D,  0xD4000000,  0xBE27B606,  0x968492AA,\n-  0x3FF51D29,  0xC4000000,  0x3E2E0396,  0x61101629,\n-  0x3FF527BA,  0xFC000000,  0x3E3E876F,  0xDAEEAB38,\n-  0x3FF53251,  0x80000000,  0x3E29F59E,  0xED945B30,\n-  0x3FF53CED,  0x50000000,  0x3E12D7DA,  0x0B4AE3F1,\n-  0x3FF5478E,  0x70000000,  0xBE2FAFB8,  0x5FB946D0,\n-  0x3FF55234,  0xE0000000,  0xBE18A8B3,  0x87D80C66,\n-  0x3FF55CE0,  0xA4000000,  0x3E28B18F,  0x764CF85C,\n-  0x3FF56791,  0xC0000000,  0x3E326017,  0x2BDBC6F4,\n-  0x3FF57248,  0x38000000,  0xBE229F98,  0x53D523FE,\n-  0x3FF57D04,  0x0C000000,  0xBE3BDD08,  0x4D9B8720,\n-  0x3FF587C5,  0x3C000000,  0x3E169EBC,  0x09D8749E,\n-  0x3FF5928B,  0xD0000000,  0x3E190C8C,  0x339C2080,\n-  0x3FF59D57,  0xC8000000,  0x3E310FA4,  0xDE75E9CA,\n-  0x3FF5A829,  0x28000000,  0x3E313D18,  0x1097F186,\n-  0x3FF5B2FF,  0xF4000000,  0xBE2BDE04,  0xD51C23F6,\n-  0x3FF5BDDC,  0x28000000,  0x3E3EE67E,  0x8938C386,\n-  0x3FF5C8BD,  0xD0000000,  0x3E0973B8,  0x47DF6575,\n-  0x3FF5D3A4,  0xE8000000,  0x3E24DF02,  0x1DB97781,\n-  0x3FF5DE91,  0x78000000,  0xBE3FBA00,  0xAC4AECDC,\n-  0x3FF5E983,  0x7C000000,  0xBE2F37AF,  0x939F646A,\n-  0x3FF5F47A,  0xFC000000,  0xBE396DEF,  0x58A6EEE9,\n-  0x3FF5FF77,  0xF8000000,  0xBE315248,  0xE3613C7B,\n-  0x3FF60A7A,  0x74000000,  0xBE26A9E2,  0xF1553706,\n-  0x3FF61582,  0x74000000,  0xBE3B6BF6,  0xAE4D7CB6,\n-  0x3FF6208F,  0xF8000000,  0xBE35775B,  0x9EB5EBA5,\n-  0x3FF62BA3,  0x04000000,  0xBE2A821B,  0xC1E43506,\n-  0x3FF636BB,  0x9C000000,  0xBE367CDA,  0x7B2D8CF4,\n-  0x3FF641D9,  0xC0000000,  0xBE13218B,  0x3E907A1D,\n-  0x3FF64CFD,  0x74000000,  0x3E3454EE,  0x7BF5DFE4,\n-  0x3FF65826,  0xC0000000,  0xBE3E960F,  0x6366C5FD,\n-  0x3FF66355,  0x9C000000,  0x3E2E378F,  0x8B43C17E,\n-  0x3FF66E8A,  0x14000000,  0x3E244BE0,  0xA4306535,\n-  0x3FF679C4,  0x28000000,  0xBDE4B6C1,  0x8DF63D6E,\n-  0x3FF68503,  0xD8000000,  0x3E3BA122,  0xE6A239CF,\n-  0x3FF69049,  0x2C000000,  0x3E27F286,  0x59FB5F30,\n-  0x3FF69B94,  0x24000000,  0xBE044041,  0x971D3970 } };\n-\n-static const union {\n-  int4   i[2048];\n-  double x[1024];\n-}  fine = { .i = {\n-  0x3FF00000,  0x00000000,  0x00000000,  0x00000000,\n-  0x3FF00004,  0x00000000,  0x3DA00001,  0x55556AAB,\n-  0x3FF00008,  0x00000000,  0x3DC00002,  0xAAAB0000,\n-  0x3FF0000C,  0x00000000,  0x3DD20004,  0x8000D800,\n-  0x3FF00010,  0x00000000,  0x3DE00005,  0x5556AAAB,\n-  0x3FF00014,  0x00000000,  0x3DE9000A,  0x6AADEC01,\n-  0x3FF00018,  0x00000000,  0x3DF20009,  0x00036001,\n-  0x3FF0001C,  0x00000000,  0x3DF8800E,  0x4AB0EB58,\n-  0x3FF00020,  0x00000000,  0x3E00000A,  0xAAB00002,\n-  0x3FF00024,  0x00000000,  0x3E04400F,  0x30088B04,\n-  0x3FF00028,  0x00000000,  0x3E090014,  0xD5625AB1,\n-  0x3FF0002C,  0x00000000,  0x3E0E401B,  0xBABDBB0A,\n-  0x3FF00030,  0x00000000,  0x3E120012,  0x000D8008,\n-  0x3FF00034,  0x00000000,  0x3E152016,  0xE2BD42E1,\n-  0x3FF00038,  0x00000000,  0x3E18801C,  0x956E5812,\n-  0x3FF0003C,  0x00000000,  0x3E1C2023,  0x2820F599,\n-  0x3FF00040,  0x00000000,  0x3E200015,  0x556AAABC,\n-  0x3FF00044,  0x00000000,  0x3E221019,  0x96C5DAD7,\n-  0x3FF00048,  0x00000000,  0x3E24401E,  0x60222C1F,\n-  0x3FF0004C,  0x00000000,  0x3E269023,  0xB97FC193,\n-  0x3FF00050,  0x00000000,  0x3E290029,  0xAADEC034,\n-  0x3FF00054,  0x00000000,  0x3E2B9030,  0x3C3F4F02,\n-  0x3FF00058,  0x00000000,  0x3E2E4037,  0x75A196FF,\n-  0x3FF0005C,  0x00000000,  0x3E30881F,  0xAF82E194,\n-  0x3FF00060,  0x00000000,  0x3E320024,  0x00360041,\n-  0x3FF00064,  0x00000000,  0x3E338828,  0xB0EA3F05,\n-  0x3FF00068,  0x00000000,  0x3E35202D,  0xC59FB661,\n-  0x3FF0006C,  0x00000000,  0x3E36C833,  0x42567FD5,\n-  0x3FF00070,  0x00000000,  0x3E388039,  0x2B0EB5E1,\n-  0x3FF00074,  0x00000000,  0x3E3A483F,  0x83C87407,\n-  0x3FF00078,  0x00000000,  0x3E3C2046,  0x5083D6C6,\n-  0x3FF0007C,  0x00000000,  0x3E3E084D,  0x9540FB9E,\n-  0x3FF00080,  0x04000000,  0xBE3FFFAA,  0xA9FFFEEF,\n-  0x3FF00084,  0x04000000,  0xBE3DF7A2,  0x693EF962,\n-  0x3FF00088,  0x04000000,  0xBE3BDF99,  0xA47BD339,\n-  0x3FF0008C,  0x04000000,  0xBE39B790,  0x57B66AF5,\n-  0x3FF00090,  0x04000000,  0xBE377F86,  0x7EEE9E14,\n-  0x3FF00094,  0x04000000,  0xBE35377C,  0x16244916,\n-  0x3FF00098,  0x04000000,  0xBE32DF71,  0x1957477B,\n-  0x3FF0009C,  0x04000000,  0xBE307765,  0x848773C2,\n-  0x3FF000A0,  0x04000000,  0xBE2BFEB2,  0xA7694ED3,\n-  0x3FF000A4,  0x04000000,  0xBE26EE99,  0x05BD75E2,\n-  0x3FF000A8,  0x04000000,  0xBE21BE7E,  0x1C0B0BB1,\n-  0x3FF000AC,  0x04000000,  0xBE18DCC3,  0xC4A37A79,\n-  0x3FF000B0,  0x04000000,  0xBE0BF911,  0x4244D60F,\n-  0x3FF000B4,  0x04000000,  0xBDE6E255,  0xEC91D848,\n-  0x3FF000B8,  0x04000000,  0x3E0107EB,  0xEC1B8F0C,\n-  0x3FF000BC,  0x04000000,  0x3E142439,  0x89BE52AA,\n-  0x3FF000C0,  0x04000000,  0x3E200240,  0x06C01033,\n-  0x3FF000C4,  0x04000000,  0x3E261264,  0xC8A9F760,\n-  0x3FF000C8,  0x04000000,  0x3E2C428B,  0x129D3FDE,\n-  0x3FF000CC,  0x04000000,  0x3E314959,  0x764D2658,\n-  0x3FF000D0,  0x04000000,  0x3E34816E,  0x2F50C16C,\n-  0x3FF000D4,  0x04000000,  0x3E37C983,  0xB859A4AB,\n-  0x3FF000D8,  0x04000000,  0x3E3B219A,  0x15680499,\n-  0x3FF000DC,  0x04000000,  0x3E3E89B1,  0x4A7C16B5,\n-  0x3FF000E0,  0x08000000,  0xBE3DFE36,  0xA469EE7E,\n-  0x3FF000E4,  0x08000000,  0xBE3A761D,  0xB349D37F,\n-  0x3FF000E8,  0x08000000,  0xBE36DE03,  0xDE235FCD,\n-  0x3FF000EC,  0x08000000,  0xBE3335E9,  0x20F659E6,\n-  0x3FF000F0,  0x08000000,  0xBE2EFB9A,  0xEF850E8F,\n-  0x3FF000F4,  0x08000000,  0xBE276B61,  0xBD0F58E2,\n-  0x3FF000F8,  0x08000000,  0xBE1F764D,  0x45163381,\n-  0x3FF000FC,  0x08000000,  0xBE0FABA6,  0x5FDF589A,\n-  0x3FF00100,  0x08000000,  0x3D8555AA,  0xABBBBE94,\n-  0x3FF00104,  0x08000000,  0x3E102B2C,  0xDABB690B,\n-  0x3FF00108,  0x08000000,  0x3E2045D9,  0x7820FBA0,\n-  0x3FF0010C,  0x08000000,  0x3E28961E,  0x92F54742,\n-  0x3FF00110,  0x08000000,  0x3E308332,  0xE2ED8E39,\n-  0x3FF00114,  0x08000000,  0x3E34CB57,  0x8C698119,\n-  0x3FF00118,  0x08000000,  0x3E39237D,  0x49EEC0C4,\n-  0x3FF0011C,  0x08000000,  0x3E3D8BA4,  0x1F7D92BC,\n-  0x3FF00120,  0x0C000000,  0xBE3DFC33,  0xEEE9C27D,\n-  0x3FF00124,  0x0C000000,  0xBE39740A,  0xDD46F763,\n-  0x3FF00128,  0x0C000000,  0xBE34DBE0,  0xA799C375,\n-  0x3FF0012C,  0x0C000000,  0xBE3033B5,  0x49E1DD2F,\n-  0x3FF00130,  0x0C000000,  0xBE26F711,  0x803DF41F,\n-  0x3FF00134,  0x0C000000,  0xBE1ACD6C,  0x19433A4C,\n-  0x3FF00138,  0x0C000000,  0xBDFDB2C1,  0x8770E36F,\n-  0x3FF0013C,  0x0C000000,  0x3E086820,  0x6B74A43E,\n-  0x3FF00140,  0x0C000000,  0x3E200A6A,  0xDEC0D058,\n-  0x3FF00144,  0x0C000000,  0x3E2A1AD0,  0x22BD7872,\n-  0x3FF00148,  0x0C000000,  0x3E32259B,  0xF769E132,\n-  0x3FF0014C,  0x0C000000,  0x3E374DD1,  0x2582289A,\n-  0x3FF00150,  0x0C000000,  0x3E3C8607,  0x9FA7E4F4,\n-  0x3FF00154,  0x10000000,  0xBE3E31C0,  0x9624963C,\n-  0x3FF00158,  0x10000000,  0xBE38D987,  0x77E2F472,\n-  0x3FF0015C,  0x10000000,  0xBE33714D,  0x0192E02C,\n-  0x3FF00160,  0x10000000,  0xBE2BF222,  0x5E6805CB,\n-  0x3FF00164,  0x10000000,  0xBE20E1A7,  0xF98C0A34,\n-  0x3FF00168,  0x10000000,  0xBE06C4AB,  0x32447238,\n-  0x3FF0016C,  0x10000000,  0x3E067D54,  0xC225D8C1,\n-  0x3FF00170,  0x10000000,  0x3E210FD8,  0x05C4630F,\n-  0x3FF00174,  0x10000000,  0x3E2CA05D,  0xBB206115,\n-  0x3FF00178,  0x10000000,  0x3E342873,  0x2C4F14A6,\n-  0x3FF0017C,  0x10000000,  0x3E3A10B8,  0xF31F3B5E,\n-  0x3FF00180,  0x14000000,  0xBE3FF6FF,  0xC9FEFCC9,\n-  0x3FF00184,  0x14000000,  0xBE39EEB7,  0x070B344A,\n-  0x3FF00188,  0x14000000,  0xBE33D66C,  0xC0050AA2,\n-  0x3FF0018C,  0x14000000,  0xBE2B5C41,  0xE1D83C97,\n-  0x3FF00190,  0x14000000,  0xBE1DD74E,  0x57003305,\n-  0x3FF00194,  0x14000000,  0xBDF2D84A,  0xA80727F1,\n-  0x3FF00198,  0x14000000,  0x3E14AB2F,  0x534C5401,\n-  0x3FF0019C,  0x14000000,  0x3E27263B,  0xD875DE83,\n-  0x3FF001A0,  0x14000000,  0x3E320B71,  0x9FB782CA,\n-  0x3FF001A4,  0x14000000,  0x3E3893C6,  0xF349371F,\n-  0x3FF001A8,  0x14000000,  0x3E3F2C1D,  0xEAF074C6,\n-  0x3FF001AC,  0x18000000,  0xBE3A2B89,  0x75525ABC,\n-  0x3FF001B0,  0x18000000,  0xBE33732F,  0x297ECCE2,\n-  0x3FF001B4,  0x18000000,  0xBE2955A6,  0x5B28EC49,\n-  0x3FF001B8,  0x18000000,  0xBE1749D5,  0xF64BA7FD,\n-  0x3FF001BC,  0x18000000,  0x3DF15E9E,  0xA8645141,\n-  0x3FF001C0,  0x18000000,  0x3E201C96,  0x1D6F0B37,\n-  0x3FF001C4,  0x18000000,  0x3E2E2D5B,  0xE6028E39,\n-  0x3FF001C8,  0x18000000,  0x3E362F12,  0x9B63FA1E,\n-  0x3FF001CC,  0x18000000,  0x3E3D5779,  0x0BE01026,\n-  0x3FF001D0,  0x1C000000,  0xBE3B701E,  0xB78A0445,\n-  0x3FF001D4,  0x1C000000,  0xBE3427B4,  0xAAD9CF9D,\n-  0x3FF001D8,  0x1C000000,  0xBE299E91,  0x941DBAB5,\n-  0x3FF001DC,  0x1C000000,  0xBE159B6C,  0x44A2DFDD,\n-  0x3FF001E0,  0x1C000000,  0x3E008CA4,  0x1EC8B89C,\n-  0x3FF001E4,  0x1C000000,  0x3E23340B,  0xF1EE0E9A,\n-  0x3FF001E8,  0x1C000000,  0x3E313279,  0x5231913C,\n-  0x3FF001EC,  0x1C000000,  0x3E38DAEE,  0x93892E68,\n-  0x3FF001F0,  0x20000000,  0xBE3F6C9A,  0x3F01A6A8,\n-  0x3FF001F4,  0x20000000,  0xBE37A421,  0x216E726C,\n-  0x3FF001F8,  0x20000000,  0xBE2F974C,  0x1F7970B9,\n-  0x3FF001FC,  0x20000000,  0xBE1F8CA4,  0x17AFEBC8,\n-  0x3FF00200,  0x20000000,  0x3DB55600,  0x04445B06,\n-  0x3FF00204,  0x20000000,  0x3E203BAE,  0x0C290A26,\n-  0x3FF00208,  0x20000000,  0x3E30365A,  0x104547BD,\n-  0x3FF0020C,  0x20000000,  0x3E385EDF,  0x22970DE3,\n-  0x3FF00210,  0x24000000,  0xBE3F6899,  0xBEF5A5F4,\n-  0x3FF00214,  0x24000000,  0xBE372010,  0x90605040,\n-  0x3FF00218,  0x24000000,  0xBE2D8F0A,  0x9B50D8EE,\n-  0x3FF0021C,  0x24000000,  0xBE197BDF,  0xCB35D444,\n-  0x3FF00220,  0x24000000,  0x3E00CCBC,  0x2188E3D5,\n-  0x3FF00224,  0x24000000,  0x3E254452,  0x36A79F6A,\n-  0x3FF00228,  0x24000000,  0x3E333ABC,  0xD69B2D28,\n-  0x3FF0022C,  0x24000000,  0x3E3BE352,  0xBA07BE5B,\n-  0x3FF00230,  0x28000000,  0xBE3B6415,  0x3665F227,\n-  0x3FF00234,  0x28000000,  0xBE329B7A,  0xF6AD58D5,\n-  0x3FF00238,  0x28000000,  0xBE2385BD,  0x059BD24A,\n-  0x3FF0023C,  0x28000000,  0xBDEB47FA,  0xD8E2B1B4,\n-  0x3FF00240,  0x28000000,  0x3E203CC2,  0x22CF60F6,\n-  0x3FF00244,  0x28000000,  0x3E312704,  0x39BEF87F,\n-  0x3FF00248,  0x28000000,  0x3E3A3FA9,  0xA63F5309,\n-  0x3FF0024C,  0x2C000000,  0xBE3C97AE,  0xA516AE5E,\n-  0x3FF00250,  0x2C000000,  0xBE335F04,  0xA442792A,\n-  0x3FF00254,  0x2C000000,  0xBE242CB0,  0xA686F3A2,\n-  0x3FF00258,  0x2C000000,  0xBDE7B535,  0xC3237903,\n-  0x3FF0025C,  0x2C000000,  0x3E21560E,  0x9E7A6CF7,\n-  0x3FF00260,  0x2C000000,  0x3E3223BA,  0xA8C01385,\n-  0x3FF00264,  0x2C000000,  0x3E3BAC70,  0x627012DF,\n-  0x3FF00268,  0x30000000,  0xBE3ABAD7,  0x7FB232EA,\n-  0x3FF0026C,  0x30000000,  0xBE31121C,  0xF9A6244B,\n-  0x3FF00270,  0x30000000,  0xBE1D6580,  0x1DAC9AE4,\n-  0x3FF00274,  0x30000000,  0x3E037AFA,  0xD7FB0AC3,\n-  0x3FF00278,  0x30000000,  0x3E289042,  0x633420EB,\n-  0x3FF0027C,  0x30000000,  0x3E3630E5,  0x8065842A,\n-  0x3FF00280,  0x34000000,  0xBE3FD653,  0xB49DA4FF,\n-  0x3FF00284,  0x34000000,  0xBE35CD8A,  0x696ECB76,\n-  0x3FF00288,  0x34000000,  0xBE27697D,  0x341A9D63,\n-  0x3FF0028C,  0x34000000,  0xBDF8BF04,  0x2788D238,\n-  0x3FF00290,  0x34000000,  0x3E2159C1,  0x42A03782,\n-  0x3FF00294,  0x34000000,  0x3E32F5B4,  0x154D4F89,\n-  0x3FF00298,  0x34000000,  0x3E3D4E8A,  0x1D7FB2C1,\n-  0x3FF0029C,  0x38000000,  0xBE38489D,  0x42181508,\n-  0x3FF002A0,  0x38000000,  0xBE2B9F84,  0x0AF2C28C,\n-  0x3FF002A4,  0x38000000,  0xBE0A3721,  0x451C5357,\n-  0x3FF002A8,  0x38000000,  0x3E1D47F1,  0x61A8605E,\n-  0x3FF002AC,  0x38000000,  0x3E31FADF,  0x81B02FCF,\n-  0x3FF002B0,  0x38000000,  0x3E3CB3C5,  0x572F674A,\n-  0x3FF002B4,  0x3C000000,  0xBE388352,  0x231795EA,\n-  0x3FF002B8,  0x3C000000,  0xBE2B54CD,  0xD248367A,\n-  0x3FF002BC,  0x3C000000,  0xBE060BC7,  0xB7ABD90D,\n-  0x3FF002C0,  0x3C000000,  0x3E206EEF,  0x6EE9F1EF,\n-  0x3FF002C4,  0x3C000000,  0x3E33406B,  0x261BF09E,\n-  0x3FF002C8,  0x3C000000,  0x3E3E5961,  0x59001C60,\n-  0x3FF002CC,  0x40000000,  0xBE367DA5,  0xABDDD232,\n-  0x3FF002D0,  0x40000000,  0xBE268953,  0xC8FA5113,\n-  0x3FF002D4,  0x40000000,  0x3D9152CC,  0x8B33A701,\n-  0x3FF002D8,  0x40000000,  0x3E26BAAC,  0x3E058570,\n-  0x3FF002DC,  0x40000000,  0x3E36C65A,  0x63236E71,\n-  0x3FF002E0,  0x44000000,  0xBE3DC09E,  0x7C7A795C,\n-  0x3FF002E4,  0x44000000,  0xBE323794,  0x7BD63D1D,\n-  0x3FF002E8,  0x44000000,  0xBE1A7A1E,  0x5BBC9105,\n-  0x3FF002EC,  0x44000000,  0x3E142A20,  0xD8EE2B1B,\n-  0x3FF002F0,  0x44000000,  0x3E30C39A,  0xEFAA8A8D,\n-  0x3FF002F4,  0x44000000,  0x3E3C8CB0,  0x995E96A2,\n-  0x3FF002F8,  0x48000000,  0xBE379A36,  0xC8A79469,\n-  0x3FF002FC,  0x48000000,  0xBE276236,  0x64CE7203,\n-  0x3FF00300,  0x48000000,  0x3DD200D8,  0x0819DA68,\n-  0x3FF00304,  0x48000000,  0x3E28A249,  0xE5E018D4,\n-  0x3FF00308,  0x48000000,  0x3E386A49,  0x8A087692,\n-  0x3FF0030C,  0x4C000000,  0xBE3B6C8E,  0xD695988B,\n-  0x3FF00310,  0x4C000000,  0xBE2E66C8,  0x55D2BCBA,\n-  0x3FF00314,  0x4C000000,  0xBE0751B3,  0x7790BA7A,\n-  0x3FF00318,  0x4C000000,  0x3E22DDF4,  0xC2A20261,\n-  0x3FF0031C,  0x4C000000,  0x3E35D82E,  0x49E0B0B5,\n-  0x3FF00320,  0x50000000,  0xBE3DAE9A,  0xB142422E,\n-  0x3FF00324,  0x50000000,  0xBE312560,  0x8C170FE6,\n-  0x3FF00328,  0x50000000,  0xBE12308D,  0x0A73BF77,\n-  0x3FF0032C,  0x50000000,  0x3E203A3A,  0x5E59CEFA,\n-  0x3FF00330,  0x50000000,  0x3E34D660,  0xCD4740BF,\n-  0x3FF00334,  0x54000000,  0xBE3E6058,  0x644D1883,\n-  0x3FF00338,  0x54000000,  0xBE31870E,  0x618F57B6,\n-  0x3FF0033C,  0x54000000,  0xBE127704,  0x99FABD0F,\n-  0x3FF00340,  0x54000000,  0x3E20B71E,  0xA1CB5ECF,\n-  0x3FF00344,  0x54000000,  0x3E3564E3,  0x089E93E1,\n-  0x3FF00348,  0x58000000,  0xBE3D81C5,  0xFB533142,\n-  0x3FF0034C,  0x58000000,  0xBE30586B,  0xB6EECE6C,\n-  0x3FF00350,  0x58000000,  0xBE08F871,  0x319B883E,\n-  0x3FF00354,  0x58000000,  0x3E2454A5,  0x75BF7503,\n-  0x3FF00358,  0x58000000,  0x3E3783B6,  0xF04B88C5,\n-  0x3FF0035C,  0x5C000000,  0xBE3B12E1,  0x81EF30A7,\n-  0x3FF00360,  0x5C000000,  0xBE2B32ED,  0x2F9F3657,\n-  0x3FF00364,  0x5C000000,  0xBDB0084D,  0x54DF31BC,\n-  0x3FF00368,  0x5C000000,  0x3E2B12D2,  0xC303B7B9,\n-  0x3FF0036C,  0x5C000000,  0x3E3B32DE,  0x78B56F97,\n-  0x3FF00370,  0x60000000,  0xBE3713A9,  0x03B9496C,\n-  0x3FF00374,  0x60000000,  0xBE22945A,  0x1F92E726,\n-  0x3FF00378,  0x60000000,  0x3E123D49,  0x621736DF,\n-  0x3FF0037C,  0x60000000,  0x3E3278D5,  0x3935580D,\n-  0x3FF00380,  0x64000000,  0xBE3F8DA4,  0x69B9F5FB,\n-  0x3FF00384,  0x64000000,  0xBE31841A,  0x8C473CC8,\n-  0x3FF00388,  0x64000000,  0xBE0B5469,  0x538CDE07,\n-  0x3FF0038C,  0x64000000,  0x3E257E07,  0x7F8F9D65,\n-  0x3FF00390,  0x64000000,  0x3E38F898,  0x3665E52B,\n-  0x3FF00394,  0x68000000,  0xBE38BDCF,  0xC29674BD,\n-  0x3FF00398,  0x68000000,  0xBE24C868,  0x4E58B4D9,\n-  0x3FF0039C,  0x68000000,  0x3E1015AC,  0x329466D7,\n-  0x3FF003A0,  0x68000000,  0x3E327F0D,  0xDCDECE44,\n-  0x3FF003A4,  0x6C000000,  0xBE3EF74B,  0xB27E5528,\n-  0x3FF003A8,  0x6C000000,  0xBE305DA1,  0x9D7167F2,\n-  0x3FF003AC,  0x6C000000,  0xBDFB3F3D,  0xFF980820,\n-  0x3FF003B0,  0x6C000000,  0x3E2A0B7B,  0x13D49789,\n-  0x3FF003B4,  0x6C000000,  0x3E3BCF72,  0xA43AE87C,\n-  0x3FF003B8,  0x70000000,  0xBE3556D4,  0x8D06BDC0,\n-  0x3FF003BC,  0x70000000,  0xBE19B460,  0x1766E54D,\n-  0x3FF003C0,  0x70000000,  0x3E211950,  0x7B85C8BA,\n-  0x3FF003C4,  0x70000000,  0x3E37966C,  0x41D00AED,\n-  0x3FF003C8,  0x74000000,  0xBE394FCB,  0xF5B15507,\n-  0x3FF003CC,  0x74000000,  0xBE244C00,  0xC98093C4,\n-  0x3FF003D0,  0x74000000,  0x3E144F3B,  0xE2907BDF,\n-  0x3FF003D4,  0x74000000,  0x3E345DA2,  0x267CD924,\n-  0x3FF003D8,  0x78000000,  0xBE3C4886,  0xD73526C0,\n-  0x3FF003DC,  0x78000000,  0xBE29BD57,  0xF8E1D62E,\n-  0x3FF003E0,  0x78000000,  0x3E04D995,  0xD65415E1,\n-  0x3FF003E4,  0x78000000,  0x3E322515,  0x527E1A58,\n-  0x3FF003E8,  0x7C000000,  0xBE3E4104,  0x31552BA5,\n-  0x3FF003EC,  0x7C000000,  0xBE2D2E33,  0x995CAB3B,\n-  0x3FF003F0,  0x7C000000,  0x3DF22D48,  0x473970DC,\n-  0x3FF003F4,  0x7C000000,  0x3E30ECC6,  0xC61195FC,\n-  0x3FF003F8,  0x80000000,  0xBE3F3943,  0x03D35C34,\n-  0x3FF003FC,  0x80000000,  0xBE2E9E91,  0xAA7483C7,\n-  0x3FF00400,  0x80000000,  0x3DE556AA,  0xBBBC71CE,\n-  0x3FF00404,  0x80000000,  0x3E30B4B7,  0x817613C1,\n-  0x3FF00408,  0x84000000,  0xBE3F3142,  0x4E70B0AC,\n-  0x3FF0040C,  0x84000000,  0xBE2E0E70,  0x2BAAD02F,\n-  0x3FF00410,  0x84000000,  0x3DF32D62,  0xF48F01F2,\n-  0x3FF00414,  0x84000000,  0x3E317CE8,  0x84EB5B98,\n-  0x3FF00418,  0x88000000,  0xBE3E2901,  0x10ED210B,\n-  0x3FF0041C,  0x88000000,  0xBE2B7DCD,  0x1C7F0051,\n-  0x3FF00420,  0x88000000,  0x3E05D9C0,  0x87AA2706,\n-  0x3FF00424,  0x88000000,  0x3E33455A,  0xD0B235B3,\n-  0x3FF00428,  0x8C000000,  0xBE3C207E,  0x4B07A510,\n-  0x3FF0042C,  0x8C000000,  0xBE26ECA6,  0x7C6E838B,\n-  0x3FF00430,  0x8C000000,  0x3E150F6F,  0xEC91A8D5,\n-  0x3FF00434,  0x8C000000,  0x3E360E0F,  0x650C6A83,\n-  0x3FF00438,  0x90000000,  0xBE3917B8,  0xFC7E3439,\n-  0x3FF0043C,  0x90000000,  0xBE205AFA,  0x4AF4C8B6,\n-  0x3FF00440,  0x90000000,  0x3E219985,  0xDC31D181,\n-  0x3FF00444,  0x90000000,  0x3E39D707,  0x423CC2BE,\n-  0x3FF00448,  0x94000000,  0xBE350EB0,  0x250DC5BF,\n-  0x3FF0044C,  0x94000000,  0xBE0F231A,  0x1E2CF893,\n-  0x3FF00450,  0x94000000,  0x3E2AABDB,  0xD42C92D4,\n-  0x3FF00454,  0x94000000,  0x3E3EA043,  0x6887075B,\n-  0x3FF00458,  0x98000000,  0xBE300562,  0xC472509B,\n-  0x3FF0045C,  0x98000000,  0x3DF64FB6,  0x72B572E0,\n-  0x3FF00460,  0x98000000,  0x3E32DF5D,  0xEF61155C,\n-  0x3FF00464,  0x9C000000,  0xBE3B963B,  0x27CFFE6A,\n-  0x3FF00468,  0x9C000000,  0xBE23F79F,  0xB4CD96FE,\n-  0x3FF0046C,  0x9C000000,  0x3E1EBA7F,  0x6E771F13,\n-  0x3FF00470,  0x9C000000,  0x3E396913,  0xFE3ED608,\n-  0x3FF00474,  0xA0000000,  0xBE34CC73,  0x6E82850F,\n-  0x3FF00478,  0xA0000000,  0xBE078FB3,  0x352966B7,\n-  0x3FF0047C,  0xA0000000,  0x3E2DF116,  0x33AFF8AE,\n-  0x3FF00480,  0xA4000000,  0xBE3F0CEE,  0xE909EADD,\n-  0x3FF00484,  0xA4000000,  0xBE2A04C8,  0xD6938597,\n-  0x3FF00488,  0xA4000000,  0x3E1460AA,  0x5C6654D8,\n-  0x3FF0048C,  0xA4000000,  0x3E3742BE,  0x22213ECF,\n-  0x3FF00490,  0xA8000000,  0xBE3682A9,  0xC631A356,\n-  0x3FF00494,  0xA8000000,  0xBE10E034,  0x7777B644,\n-  0x3FF00498,  0xA8000000,  0x3E2C4528,  0x3E3B0991,\n-  0x3FF0049C,  0xAC000000,  0xBE3F72C6,  0x0B3E269F,\n-  0x3FF004A0,  0xAC000000,  0xBE29F037,  0x31DF923B,\n-  0x3FF004A4,  0xAC000000,  0x3E164A4D,  0xE82713DE,\n-  0x3FF004A8,  0xAC000000,  0x3E382D47,  0x31AFAC4B,\n-  0x3FF004AC,  0xB0000000,  0xBE352800,  0x6DFCE978,\n-  0x3FF004B0,  0xB0000000,  0xBE036A1B,  0x07D68D27,\n-  0x3FF004B4,  0xB0000000,  0x3E305D7E,  0x5CB71F6F,\n-  0x3FF004B8,  0xB4000000,  0xBE3CC7BB,  0x30E5E990,\n-  0x3FF004BC,  0xB4000000,  0xBE23B9E0,  0x0BA17DEA,\n-  0x3FF004C0,  0xB4000000,  0x3E223BBF,  0xC3EF9BD8,\n-  0x3FF004C4,  0xB4000000,  0x3E3C28B4,  0x8A74ECC0,\n-  0x3FF004C8,  0xB8000000,  0xBE30BC72,  0x085831CA,\n-  0x3FF004CC,  0xB8000000,  0x3E037361,  0x6C8D1FC8,\n-  0x3FF004D0,  0xB8000000,  0x3E35A94F,  0x3033A0B8,\n-  0x3FF004D4,  0xBC000000,  0xBE370BC8,  0xFC7107DE,\n-  0x3FF004D8,  0xBC000000,  0xBE0D86E2,  0xA2D908DA,\n-  0x3FF004DC,  0xBC000000,  0x3E2F742A,  0x58ED155E,\n-  0x3FF004E0,  0xC0000000,  0xBE3CCAF4,  0x75FACDD0,\n-  0x3FF004E4,  0xC0000000,  0xBE227FF2,  0x6F5BE5D3,\n-  0x3FF004E8,  0xC0000000,  0x3E24B60D,  0xD6BCA827,\n-  0x3FF004EC,  0xC0000000,  0x3E3E060B,  0xF72B40D6,\n-  0x3FF004F0,  0xC4000000,  0xBE2C7DD4,  0x208BE3E3,\n-  0x3FF004F4,  0xC4000000,  0x3E163093,  0x642FDDB8,\n-  0x3FF004F8,  0xC4000000,  0x3E396738,  0xB72239A5,\n-  0x3FF004FC,  0xC8000000,  0xBE32ADAE,  0x7201ED9B,\n-  0x3FF00500,  0xC8000000,  0x3DF4D6F6,  0x1A0C05F3,\n-  0x3FF00504,  0xC8000000,  0x3E355892,  0x360B8346,\n-  0x3FF00508,  0xCC000000,  0xBE368C45,  0xF0C06435,\n-  0x3FF0050C,  0xCC000000,  0xBE0308C8,  0x760DA2F6,\n-  0x3FF00510,  0xCC000000,  0x3E31DA18,  0xE008D57B,\n-  0x3FF00514,  0xD0000000,  0xBE39DAB0,  0x205F82F4,\n-  0x3FF00518,  0xD0000000,  0xBE15FDD0,  0x2FE5E3E3,\n-  0x3FF0051C,  0xD0000000,  0x3E2DD79A,  0x42787241,\n-  0x3FF00520,  0xD4000000,  0xBE3C98EC,  0x94BD25F4,\n-  0x3FF00524,  0xD4000000,  0xBE201B42,  0x53C89D03,\n-  0x3FF00528,  0xD4000000,  0x3E291B5E,  0xCB901057,\n-  0x3FF0052C,  0xD8000000,  0xBE3EC6FA,  0xE1B6D837,\n-  0x3FF00530,  0xD8000000,  0xBE24173F,  0xF8BF49E7,\n-  0x3FF00534,  0xD8000000,  0x3E257F80,  0x339DDB57,\n-  0x3FF00538,  0xD8000000,  0x3E3F9B25,  0x64D62C5C,\n-  0x3FF0053C,  0xDC000000,  0xBE26F2E0,  0x2E913659,\n-  0x3FF00540,  0xDC000000,  0x3E2303FF,  0x52E7CB93,\n-  0x3FF00544,  0xDC000000,  0x3E3E8D74,  0xAB0CFEF5,\n-  0x3FF00548,  0xE0000000,  0xBE28AE22,  0x1CF7FDE6,\n-  0x3FF0054C,  0xE0000000,  0x3E21A8DD,  0x01B47B93,\n-  0x3FF00550,  0xE0000000,  0x3E3E0FF3,  0x5D1107E2,\n-  0x3FF00554,  0xE4000000,  0xBE294904,  0xEBAC99E1,\n-  0x3FF00558,  0xE4000000,  0x3E216E1A,  0x184B2814,\n-  0x3FF0055C,  0xE4000000,  0x3E3E22A1,  0xE706008B,\n-  0x3FF00560,  0xE8000000,  0xBE28C387,  0xC267616A,\n-  0x3FF00564,  0xE8000000,  0x3E2253B7,  0x6EF3B008,\n-  0x3FF00568,  0xE8000000,  0x3E3EC580,  0xB50FF371,\n-  0x3FF0056C,  0xEC000000,  0xBE271DA9,  0xC8E0096B,\n-  0x3FF00570,  0xEC000000,  0x3E2459B5,  0xDDF69498,\n-  0x3FF00574,  0xEC000000,  0x3E3FF890,  0x33533C31,\n-  0x3FF00578,  0xF0000000,  0xBE24576A,  0x26CDA497,\n-  0x3FF0057C,  0xF0000000,  0x3E278016,  0x3D9CF923,\n-  0x3FF00580,  0xF4000000,  0xBE3E442F,  0x320B787B,\n-  0x3FF00584,  0xF4000000,  0xBE2070C8,  0x03E6A36B,\n-  0x3FF00588,  0xF4000000,  0x3E2BC6D9,  0x6630A33F,\n-  0x3FF0058C,  0xF8000000,  0xBE3BF0BD,  0x0EE72CBF,\n-  0x3FF00590,  0xF8000000,  0xBE16D385,  0x0FC1A853,\n-  0x3FF00594,  0xF8000000,  0x3E309700,  0x17FDFD5D,\n-  0x3FF00598,  0xFC000000,  0xBE390D18,  0xF71A91AC,\n-  0x3FF0059C,  0xFC000000,  0xBE050963,  0x69C58B86,\n-  0x3FF005A0,  0xFC000000,  0x3E33DAC5,  0xB9A504CD,\n-  0x3FF005A5,  0x00000000,  0xBE359942,  0x7E800734,\n-  0x3FF005A9,  0x00000000,  0x3DF02BAE,  0xE59934CD,\n-  0x3FF005AD,  0x00000000,  0x3E37AEBE,  0x04333E0E,\n-  0x3FF005B1,  0x04000000,  0xBE319539,  0x38F19C2F,\n-  0x3FF005B5,  0x04000000,  0x3E14DB54,  0xEBB1C157,\n-  0x3FF005B9,  0x04000000,  0x3E3C12E9,  0x63CED05D,\n-  0x3FF005BD,  0x08000000,  0xBE2A01F9,  0x74921CAF,\n-  0x3FF005C1,  0x08000000,  0x3E23F645,  0xC94C85F2,\n-  0x3FF005C5,  0x0C000000,  0xBE3EF8B7,  0xBB61CBEE,\n-  0x3FF005C9,  0x0C000000,  0xBE1F7232,  0x597F2931,\n-  0x3FF005CD,  0x0C000000,  0x3E2E9F48,  0xAF5B7345,\n-  0x3FF005D1,  0x10000000,  0xBE397424,  0xED37CD5F,\n-  0x3FF005D5,  0x10000000,  0xBE013F43,  0x08775C6B,\n-  0x3FF005D9,  0x10000000,  0x3E35345A,  0x0029D3DB,\n-  0x3FF005DD,  0x14000000,  0xBE335F5D,  0xC58C1962,\n-  0x3FF005E1,  0x14000000,  0x3E1073C1,  0x47430E04,\n-  0x3FF005E5,  0x14000000,  0x3E3BA944,  0x4A41E248,\n-  0x3FF005E9,  0x18000000,  0xBE2974C3,  0xB06E888E,\n-  0x3FF005ED,  0x18000000,  0x3E25E3FB,  0xDCCD9333,\n-  0x3FF005F1,  0x1C000000,  0xBE3D519C,  0x5DE27951,\n-  0x3FF005F5,  0x1C000000,  0xBE1614C2,  0xE4464502,\n-  0x3FF005F9,  0x1C000000,  0x3E325740,  0xE0DAFE93,\n-  0x3FF005FD,  0x20000000,  0xBE35BC47,  0x8C1B4C10,\n-  0x3FF00601,  0x20000000,  0x3E0201B0,  0x20686CE9,\n-  0x3FF00605,  0x20000000,  0x3E3A4CB9,  0x95558B63,\n-  0x3FF00609,  0x24000000,  0xBE2B2D79,  0xA880A3EB,\n-  0x3FF0060D,  0x24000000,  0x3E252BA5,  0x9699EEB7,\n-  0x3FF00611,  0x28000000,  0xBE3D2D97,  0x880115E1,\n-  0x3FF00615,  0x28000000,  0xBE1383EF,  0x28A3D788,\n-  0x3FF00619,  0x28000000,  0x3E337BA6,  0x08D6DC23,\n-  0x3FF0061D,  0x2C000000,  0xBE3417B2,  0x0B001A08,\n-  0x3FF00621,  0x2C000000,  0x3E1193EF,  0xF94EB99A,\n-  0x3FF00625,  0x2C000000,  0x3E3CF1B0,  0x28D3BD3B,\n-  0x3FF00629,  0x30000000,  0xBE24E32B,  0x0EFCC982,\n-  0x3FF0062D,  0x30000000,  0x3E2C7655,  0xE2BDA47F,\n-  0x3FF00631,  0x34000000,  0xBE39080E,  0x689312F8,\n-  0x3FF00635,  0x34000000,  0xBDCDA0C8,  0xA9444DB4,\n-  0x3FF00639,  0x34000000,  0x3E38A191,  0x7B21FE23,\n-  0x3FF0063D,  0x38000000,  0xBE2CE32A,  0x7E67E1E1,\n-  0x3FF00641,  0x38000000,  0x3E251694,  0x875A71F0,\n-  0x3FF00645,  0x3C000000,  0xBE3C67CF,  0xF838F455,\n-  0x3FF00649,  0x3C000000,  0xBE0A571F,  0x77274052,\n-  0x3FF0064D,  0x3C000000,  0x3E35E20E,  0x63AAEFA8,\n-  0x3FF00651,  0x40000000,  0xBE30E0F8,  0xFC87DA70,\n-  0x3FF00655,  0x40000000,  0x3E20D80B,  0xE9089AFD,\n-  0x3FF00659,  0x44000000,  0xBE3E36F4,  0xC52F03BD,\n-  0x3FF0065D,  0x44000000,  0xBE1327A4,  0x9680E14E,\n-  0x3FF00661,  0x44000000,  0x3E34B328,  0xD732468D,\n-  0x3FF00665,  0x48000000,  0xBE31BFBE,  0xCAB5EF4A,\n-  0x3FF00669,  0x48000000,  0x3E1F757F,  0xE2A2FBE1,\n-  0x3FF0066D,  0x4C000000,  0xBE3E757A,  0xDAB014DA,\n-  0x3FF00671,  0x4C000000,  0xBE12E13D,  0x02FB3FBB,\n-  0x3FF00675,  0x4C000000,  0x3E3514E2,  0xCA7E298D,\n-  0x3FF00679,  0x50000000,  0xBE310DE4,  0xB4F78B94,\n-  0x3FF0067D,  0x50000000,  0x3E21BEB4,  0x89C35D05,\n-  0x3FF00681,  0x54000000,  0xBE3D2360,  0x43F4895C,\n-  0x3FF00685,  0x54000000,  0xBE08B0A2,  0x5BC49ADF,\n-  0x3FF00689,  0x54000000,  0x3E37073E,  0x32573159,\n-  0x3FF0068D,  0x58000000,  0xBE2D96D1,  0x8D0732D2,\n-  0x3FF00691,  0x58000000,  0x3E26E3ED,  0x9BF15E67,\n-  0x3FF00695,  0x5C000000,  0xBE3A40A3,  0x0C3250FB,\n-  0x3FF00699,  0x5C000000,  0x3DBCC9AE,  0xFD0AE214,\n-  0x3FF0069D,  0x5C000000,  0x3E3A8A3D,  0x038868A1,\n-  0x3FF006A1,  0x60000000,  0xBE25F092,  0x151D21CE,\n-  0x3FF006A5,  0x60000000,  0x3E2F2A6F,  0x11738C43,\n-  0x3FF006A9,  0x64000000,  0xBE35CD41,  0x3E9CE96D,\n-  0x3FF006AD,  0x64000000,  0x3E138132,  0x8DBC2918,\n-  0x3FF006B1,  0x64000000,  0x3E3F9DE1,  0x32DF4C13,\n-  0x3FF006B5,  0x68000000,  0xBE16520E,  0x3129E0B2,\n-  0x3FF006B9,  0x68000000,  0x3E35491E,  0x69F36A61,\n-  0x3FF006BD,  0x6C000000,  0xBE2F9271,  0xCCCABCD4,\n-  0x3FF006C1,  0x6C000000,  0x3E2668ED,  0x0D59B899,\n-  0x3FF006C5,  0x70000000,  0xBE39BDD3,  0x4AD435A0,\n-  0x3FF006C9,  0x70000000,  0x3DF5FE9A,  0x9191CABB,\n-  0x3FF006CD,  0x70000000,  0x3E3C8DAD,  0x6676850B,\n-  0x3FF006D1,  0x74000000,  0xBE206910,  0x1D74934A,\n-  0x3FF006D5,  0x74000000,  0x3E331949,  0x4D886478,\n-  0x3FF006D9,  0x78000000,  0xBE3188DE,  0x80BFBBC2,\n-  0x3FF006DD,  0x78000000,  0x3E23CA01,  0x14DE1719,\n-  0x3FF006E1,  0x7C000000,  0xBE3A9D19,  0x8CE98EC0,\n-  0x3FF006E5,  0x7C000000,  0x3DEE1A67,  0xA705A6E7,\n-  0x3FF006E9,  0x7C000000,  0x3E3C8EC6,  0xECD5F851,\n-  0x3FF006ED,  0x80000000,  0xBE1F0CF9,  0xE839CE4D,\n-  0x3FF006F1,  0x80000000,  0x3E33FAC3,  0x0C8CA46A,\n-  0x3FF006F5,  0x84000000,  0xBE303734,  0x7B5703D8,\n-  0x3FF006F9,  0x84000000,  0x3E274DB5,  0xE490A112,\n-  0x3FF006FD,  0x88000000,  0xBE386B0E,  0xA693A093,\n-  0x3FF00701,  0x88000000,  0x3E0C9875,  0xF0B73DAA,\n-  0x3FF00705,  0x88000000,  0x3E3FA133,  0x2449A944,\n-  0x3FF00709,  0x8C000000,  0xBE110285,  0xBFE66C14,\n-  0x3FF0070D,  0x8C000000,  0x3E37ED91,  0x054EDCBD,\n-  0x3FF00711,  0x90000000,  0xBE27A86A,  0xEFB65924,\n-  0x3FF00715,  0x90000000,  0x3E307A0B,  0x1C8A0CF1,\n-  0x3FF00719,  0x94000000,  0xBE3327AD,  0x397FB1D6,\n-  0x3FF0071D,  0x94000000,  0x3E228D43,  0x1412B9FB,\n-  0x3FF00721,  0x98000000,  0xBE3A3B08,  0x94D8FFB0,\n-  0x3FF00725,  0x98000000,  0x3E029AA3,  0x6ED80040,\n-  0x3FF00729,  0x98000000,  0x3E3EF1B8,  0x9627250A,\n-  0x3FF0072D,  0x9C000000,  0xBE117F70,  0x5FCB1B09,\n-  0x3FF00731,  0x9C000000,  0x3E385E96,  0x678F0789,\n-  0x3FF00735,  0xA0000000,  0xBE25A5DF,  0xCEA3485B,\n-  0x3FF00739,  0xA0000000,  0x3E320B90,  0xFF6D0303,\n-  0x3FF0073D,  0xA4000000,  0xBE3105E6,  0xE03334FF,\n-  0x3FF00741,  0xA4000000,  0x3E27F150,  0xFB9F056D,\n-  0x3FF00745,  0xA8000000,  0xBE36F8C0,  0xE28905F4,\n-  0x3FF00749,  0xA8000000,  0x3E189774,  0x0B1407AA,\n-  0x3FF0074D,  0xAC000000,  0xBE3CAB7D,  0xCE4493C4,\n-  0x3FF00751,  0xAC000000,  0x3DE265D5,  0xCB817D78,\n-  0x3FF00755,  0xAC000000,  0x3E3DE1E2,  0x7CA8B4E3,\n-  0x3FF00759,  0xB0000000,  0xBE12FD89,  0x7D730FC6,\n-  0x3FF0075D,  0xB0000000,  0x3E38AF60,  0x1E4D7759,\n-  0x3FF00761,  0xB4000000,  0xBE23A3AC,  0x0CAD84A2,\n-  0x3FF00765,  0xB4000000,  0x3E33BCFB,  0x36B866FD,\n-  0x3FF00769,  0xB8000000,  0xBE2D4858,  0x4D0667A1,\n-  0x3FF0076D,  0xB8000000,  0x3E2E1567,  0xCBF08E6A,\n-  0x3FF00771,  0xBC000000,  0xBE333664,  0x9FD34D05,\n-  0x3FF00775,  0xBC000000,  0x3E253114,  0x9837D6E0,\n-  0x3FF00779,  0xC0000000,  0xBE37887F,  0x5238327D,\n-  0x3FF0077D,  0xC0000000,  0x3E1999FA,  0x24C8DC90,\n-  0x3FF00781,  0xC4000000,  0xBE3B9A7C,  0x1DA2F8BE,\n-  0x3FF00785,  0xC4000000,  0x3E03A485,  0xEA50EE6A,\n-  0x3FF00789,  0xC8000000,  0xBE3F6C5A,  0xE204A449,\n-  0x3FF0078D,  0xC8000000,  0xBDF3D3EF,  0x78D5D0F3,\n-  0x3FF00791,  0xC8000000,  0x3E3D01E4,  0x80B1D66C,\n-  0x3FF00795,  0xCC000000,  0xBE12BBC1,  0xD5149796,\n-  0x3FF00799,  0xCC000000,  0x3E39B042,  0x2A8F92F0,\n-  0x3FF0079D,  0xD0000000,  0xBE1F820E,  0x6F386487,\n-  0x3FF007A1,  0xD0000000,  0x3E369EBE,  0x3BA3BCDA,\n-  0x3FF007A5,  0xD4000000,  0xBE25A3F0,  0x96320652,\n-  0x3FF007A9,  0xD4000000,  0x3E33CD58,  0xD3FD8FCA,\n-  0x3FF007AD,  0xD8000000,  0xBE2B069C,  0xC62D40B1,\n-  0x3FF007B1,  0xD8000000,  0x3E313C12,  0x13AC5766,\n-  0x3FF007B5,  0xDC000000,  0xBE2FE90B,  0x876F3A0B,\n-  0x3FF007B9,  0xDC000000,  0x3E2DD5D4,  0x357EDEB8,\n-  0x3FF007BD,  0xE0000000,  0xBE32259E,  0x4CEC957E,\n-  0x3FF007C1,  0xE0000000,  0x3E29B3C2,  0x128C86C6,\n-  0x3FF007C5,  0xE4000000,  0xBE341697,  0xDEA61608,\n-  0x3FF007C9,  0xE4000000,  0x3E2611ED,  0xFEA09E70,\n-  0x3FF007CD,  0xE8000000,  0xBE35C772,  0x58D49AE3,\n-  0x3FF007D1,  0xE8000000,  0x3E22F058,  0x39DA3D42,\n-  0x3FF007D5,  0xEC000000,  0xBE37382D,  0x9B689043,\n-  0x3FF007D9,  0xEC000000,  0x3E204F01,  0x04589AD6,\n-  0x3FF007DD,  0xF0000000,  0xBE3868C9,  0x86525259,\n-  0x3FF007E1,  0xF0000000,  0x3E1C5BD1,  0x3C761DAC,\n-  0x3FF007E5,  0xF4000000,  0xBE395945,  0xF9822D4C,\n-  0x3FF007E9,  0xF4000000,  0x3E191A1E,  0x8F4221F9,\n-  0x3FF007ED,  0xF8000000,  0xBE3A09A2,  0xD4E85D3A,\n-  0x3FF007F1,  0xF8000000,  0x3E16D8EA,  0x81547225,\n-  0x3FF007F5,  0xFC000000,  0xBE3A79DF,  0xF8750E3B,\n-  0x3FF007F9,  0xFC000000,  0x3E159835,  0x92EC7DE3,\n-  0x3FF007FE,  0x00000000,  0xBE3AA9FD,  0x44185C5D } };\n-\n-#else\n-#ifdef LITTLE_ENDI\n-\n-static const  union {\n-  int i[1424];\n-  double x[712];\n-} coar = {  .i = {\n-  0xC8000000,  0x3FE69A59,  0x6079C9F7,  0x3DF22D4D,\n-  0xC8000000,  0x3FE6A5A9,  0x25AF6823,  0x3E19882D,\n-  0x74000000,  0x3FE6B0FF,  0x31DABF59,  0xBE221476,\n-  0xC8000000,  0x3FE6BC5A,  0x99A2DC0A,  0x3E2312AC,\n-  0xD0000000,  0x3FE6C7BB,  0xCE9F9355,  0xBE265926,\n-  0x84000000,  0x3FE6D322,  0x2D298DED,  0x3E2F2C26,\n-  0xF4000000,  0x3FE6DE8E,  0x1E748D2F,  0xBE2EC28E,\n-  0x14000000,  0x3FE6EA01,  0xC68CB7E5,  0x3E2D8C6D,\n-  0xF4000000,  0x3FE6F578,  0x419FE2F0,  0x3DEE1A9E,\n-  0x90000000,  0x3FE700F6,  0xDEAEAE34,  0xBDFF1AFD,\n-  0xEC000000,  0x3FE70C79,  0x558B7122,  0xBE0730FE,\n-  0x0C000000,  0x3FE71803,  0x2D280C3B,  0xBE25CB85,\n-  0xF0000000,  0x3FE72391,  0x337B7B54,  0xBE06F2CE,\n-  0x9C000000,  0x3FE72F26,  0x45C02B72,  0x3E289BCA,\n-  0x18000000,  0x3FE73AC1,  0x5039F1CA,  0xBE18DEA6,\n-  0x60000000,  0x3FE74661,  0x86CE0538,  0xBE09D090,\n-  0x78000000,  0x3FE75207,  0xCFCE5DDB,  0x3E290E79,\n-  0x68000000,  0x3FE75DB3,  0xB249A17C,  0x3DD61DF0,\n-  0x2C000000,  0x3FE76965,  0xE13445F7,  0x3E2F22F7,\n-  0xD0000000,  0x3FE7751C,  0x874E75CE,  0xBE2CD454,\n-  0x4C000000,  0x3FE780DA,  0xDF43E3BC,  0xBE0159CE,\n-  0xA8000000,  0x3FE78C9D,  0x699A1332,  0x3E279291,\n-  0xEC000000,  0x3FE79866,  0x2DD98C6C,  0xBE2A0BCD,\n-  0x10000000,  0x3FE7A436,  0x15AC979E,  0x3E25F375,\n-  0x20000000,  0x3FE7B00B,  0x2FEAFCF6,  0x3E26CCF5,\n-  0x1C000000,  0x3FE7BBE6,  0x53ADAD67,  0x3E27D4F4,\n-  0x08000000,  0x3FE7C7C7,  0x7FBD9566,  0x3E10EEC7,\n-  0xE4000000,  0x3FE7D3AD,  0x9A831D86,  0x3E2837F0,\n-  0xB8000000,  0x3FE7DF9A,  0x5CB4C35B,  0xBE129BE0,\n-  0x80000000,  0x3FE7EB8D,  0x0234F04D,  0x3E23990A,\n-  0x44000000,  0x3FE7F786,  0x64D5C842,  0x3E2EB807,\n-  0x08000000,  0x3FE80385,  0x02B4E9E8,  0x3E0FC86F,\n-  0xCC000000,  0x3FE80F89,  0x7B4274BF,  0xBDD7B5B3,\n-  0x94000000,  0x3FE81B94,  0xB899B00F,  0xBE16888B,\n-  0x60000000,  0x3FE827A5,  0x5E94D155,  0x3E288971,\n-  0x38000000,  0x3FE833BC,  0x099F3E5E,  0x3E2AEEB2,\n-  0x20000000,  0x3FE83FD9,  0x3FF60B7C,  0xBE23B922,\n-  0x14000000,  0x3FE84BFC,  0x2DBD8012,  0xBDF7D3B1,\n-  0x1C000000,  0x3FE85825,  0xA8872BEB,  0xBDF24BA3,\n-  0x38000000,  0x3FE86454,  0x01AA18A7,  0x3E2EFE04,\n-  0x70000000,  0x3FE87089,  0x944496A2,  0x3E21986C,\n-  0xC4000000,  0x3FE87CC4,  0xB71FFAFF,  0x3E096A8B,\n-  0x38000000,  0x3FE88906,  0xBC4C7AC5,  0xBE21CE0A,\n-  0xCC000000,  0x3FE8954D,  0xBAC02491,  0xBE076F45,\n-  0x84000000,  0x3FE8A19B,  0xD922B925,  0x3E2B4FA2,\n-  0x68000000,  0x3FE8ADEF,  0x641863AF,  0x3DF759DB,\n-  0x78000000,  0x3FE8BA49,  0xC6AB5E04,  0xBE2DB97C,\n-  0xB4000000,  0x3FE8C6A9,  0xE2156713,  0xBE25364C,\n-  0x20000000,  0x3FE8D310,  0x862BEFF7,  0x3E1BEB7C,\n-  0xC4000000,  0x3FE8DF7C,  0x1CEA33A5,  0xBDF4DD0C,\n-  0xA0000000,  0x3FE8EBEF,  0x51797D47,  0xBE2537DF,\n-  0xB4000000,  0x3FE8F868,  0xF0107B28,  0x3E0FB1C4,\n-  0x08000000,  0x3FE904E8,  0xE01B68BD,  0x3E0AD6A1,\n-  0x9C000000,  0x3FE9116D,  0x1F78D9D9,  0x3E292117,\n-  0x78000000,  0x3FE91DF9,  0x4F50E5CF,  0xBE1D75DA,\n-  0x98000000,  0x3FE92A8B,  0x74959E58,  0x3DE5102B,\n-  0x04000000,  0x3FE93724,  0xD2216C35,  0xBE01CA50,\n-  0xBC000000,  0x3FE943C2,  0xB0B05884,  0x3E225BFD,\n-  0xC8000000,  0x3FE95067,  0x60B7C5C1,  0xBE0F2183,\n-  0x24000000,  0x3FE95D13,  0xB5860441,  0x3E2FB47A,\n-  0xDC000000,  0x3FE969C4,  0xE2D4059E,  0xBE01FFD2,\n-  0xEC000000,  0x3FE9767C,  0x12BB6A8D,  0xBDE9ED72,\n-  0x58000000,  0x3FE9833B,  0x43BFFB24,  0x3E2B3815,\n-  0x28000000,  0x3FE99000,  0xEE9EAD1E,  0x3E03FA22,\n-  0x5C000000,  0x3FE99CCB,  0x377138F7,  0xBE213841,\n-  0xF4000000,  0x3FE9A99C,  0xDB636C94,  0x3E178105,\n-  0xF8000000,  0x3FE9B674,  0xF5720122,  0x3E1E5E7A,\n-  0x6C000000,  0x3FE9C353,  0xA2AC5AAE,  0xBE238BFF,\n-  0x4C000000,  0x3FE9D038,  0xF93BDBD8,  0x3E270893,\n-  0xA4000000,  0x3FE9DD23,  0x354B86CF,  0x3DF40420,\n-  0x74000000,  0x3FE9EA15,  0x88CB06B7,  0xBE2D76D3,\n-  0xBC000000,  0x3FE9F70D,  0x9ED0EC60,  0xBE251639,\n-  0x80000000,  0x3FEA040C,  0xE2DDE506,  0x3E1F06E9,\n-  0xC8000000,  0x3FEA1111,  0x8E6DB477,  0x3E014549,\n-  0x94000000,  0x3FEA1E1D,  0xF8716509,  0xBDF4BC17,\n-  0xE8000000,  0x3FEA2B2F,  0xDA723A49,  0xBE2107DB,\n-  0xC4000000,  0x3FEA3848,  0x986AA369,  0x3E1A932A,\n-  0x30000000,  0x3FEA4568,  0x41592CDB,  0x3E198092,\n-  0x30000000,  0x3FEA528E,  0x676BCAB8,  0xBE2E260F,\n-  0xC0000000,  0x3FEA5FBA,  0x2D5D5610,  0x3DE2E821,\n-  0xE8000000,  0x3FEA6CED,  0x7DA20167,  0x3E2F7046,\n-  0xB0000000,  0x3FEA7A27,  0xF9FAAD30,  0xBE1D2832,\n-  0x14000000,  0x3FEA8768,  0x43FA6C45,  0xBE23F788,\n-  0x18000000,  0x3FEA94AF,  0xAA082732,  0x3E011E27,\n-  0xC4000000,  0x3FEAA1FC,  0xC682F0BF,  0xBE20BACB,\n-  0x18000000,  0x3FEAAF51,  0x7BD08C78,  0xBE2DC7DD,\n-  0x14000000,  0x3FEABCAC,  0xA3B10F9A,  0x3E2271A2,\n-  0xC4000000,  0x3FEACA0D,  0x7966F94C,  0xBE15449C,\n-  0x24000000,  0x3FEAD776,  0x6FD8F3EE,  0x3DD06137,\n-  0x3C000000,  0x3FEAE4E5,  0x8C5A144A,  0xBE267CD1,\n-  0x0C000000,  0x3FEAF25B,  0xB59DA94B,  0xBE29E584,\n-  0x98000000,  0x3FEAFFD7,  0x7B52192F,  0xBE23DFCF,\n-  0xE4000000,  0x3FEB0D5A,  0x78A76B45,  0xBE1CF2FE,\n-  0xF4000000,  0x3FEB1AE4,  0x7EC80FF6,  0xBE23A561,\n-  0xC8000000,  0x3FEB2875,  0x932EED68,  0x3E22C4C9,\n-  0x68000000,  0x3FEB360D,  0xB5833C97,  0x3E2B085C,\n-  0xD8000000,  0x3FEB43AB,  0x93B9319A,  0xBE01F093,\n-  0x18000000,  0x3FEB5151,  0xFABCE670,  0xBE254F01,\n-  0x28000000,  0x3FEB5EFD,  0x627ABFB0,  0x3E2F24C2,\n-  0x14000000,  0x3FEB6CB0,  0xE6AC0B48,  0x3E1F1EEC,\n-  0xDC000000,  0x3FEB7A69,  0x127F9ABC,  0xBE1A8671,\n-  0x80000000,  0x3FEB882A,  0xC87C73B3,  0xBDCB0C28,\n-  0x08000000,  0x3FEB95F2,  0x7F2B5A97,  0xBE22E8DD,\n-  0x74000000,  0x3FEBA3C0,  0x2D22A9D5,  0xBE1B3645,\n-  0xC8000000,  0x3FEBB195,  0x428F8B88,  0x3E0ADACA,\n-  0x0C000000,  0x3FEBBF72,  0xCDF9F681,  0xBE2E9E07,\n-  0x3C000000,  0x3FEBCD55,  0x7FA54ACF,  0xBE08A127,\n-  0x60000000,  0x3FEBDB3F,  0x8225B385,  0x3E0E92CE,\n-  0x7C000000,  0x3FEBE930,  0x7BB09485,  0x3DF38C2A,\n-  0x94000000,  0x3FEBF728,  0xF681FA5F,  0xBE2DFD64,\n-  0xA4000000,  0x3FEC0527,  0xDCE88BD2,  0x3E2E384D,\n-  0xBC000000,  0x3FEC132D,  0xFE46A893,  0xBE20F111,\n-  0xD4000000,  0x3FEC213A,  0xB189BFDA,  0x3E193DA1,\n-  0xF8000000,  0x3FEC2F4E,  0x0E39FB00,  0xBE20E3A1,\n-  0x24000000,  0x3FEC3D6A,  0x30F0FAC5,  0x3E1DB044,\n-  0x64000000,  0x3FEC4B8C,  0x97446B17,  0xBE2BC12C,\n-  0xB4000000,  0x3FEC59B5,  0x963F4150,  0xBE282696,\n-  0x18000000,  0x3FEC67E6,  0x3049824B,  0x3E224D26,\n-  0x98000000,  0x3FEC761D,  0x87F84C7D,  0x3E2C5BA5,\n-  0x38000000,  0x3FEC845C,  0xC4852339,  0xBDE1D14D,\n-  0xF8000000,  0x3FEC92A1,  0x5588D9E1,  0xBE1A451E,\n-  0xDC000000,  0x3FECA0EE,  0x68BFF457,  0xBE1D3B96,\n-  0xE8000000,  0x3FECAF42,  0x4DADF774,  0xBE18B670,\n-  0x20000000,  0x3FECBD9E,  0x7FB1FC01,  0xBE1A1548,\n-  0x88000000,  0x3FECCC00,  0x78FC5AF0,  0xBE273F2E,\n-  0x20000000,  0x3FECDA6A,  0xA6F4A841,  0x3E1D218F,\n-  0xF0000000,  0x3FECE8DA,  0x4D002CA0,  0x3E2E0BA9,\n-  0xFC000000,  0x3FECF752,  0x065EF979,  0x3E20F4BB,\n-  0x48000000,  0x3FED05D2,  0x11793B33,  0xBE2ED3D5,\n-  0xD0000000,  0x3FED1458,  0x913341B3,  0x3E115E3C,\n-  0xA0000000,  0x3FED22E6,  0xB3546109,  0x3DE97C02,\n-  0xB8000000,  0x3FED317B,  0x1BF898EF,  0x3E087540,\n-  0x1C000000,  0x3FED4018,  0x346F9641,  0x3E209430,\n-  0xD0000000,  0x3FED4EBB,  0x88F4B20B,  0x3E2B6DF4,\n-  0xDC000000,  0x3FED5D66,  0x0CB26035,  0xBE2EC68F,\n-  0x38000000,  0x3FED6C19,  0x1F44D9C3,  0x3E2CA2C8,\n-  0xF4000000,  0x3FED7AD2,  0x41704EE0,  0x3E10E6F4,\n-  0x0C000000,  0x3FED8994,  0x25F8F0E2,  0x3E2F9273,\n-  0x88000000,  0x3FED985C,  0x318798DE,  0x3E2D041A,\n-  0x6C000000,  0x3FEDA72C,  0x9349CF58,  0xBE005680,\n-  0xB8000000,  0x3FEDB603,  0xCF0C934D,  0xBE10F665,\n-  0x70000000,  0x3FEDC4E2,  0x19461C64,  0x3E166124,\n-  0x9C000000,  0x3FEDD3C8,  0x405624C8,  0xBE1B2ED6,\n-  0x3C000000,  0x3FEDE2B6,  0x62171501,  0xBE273A7F,\n-  0x54000000,  0x3FEDF1AB,  0xE36E1450,  0xBE26022B,\n-  0xE8000000,  0x3FEE00A7,  0x2E07AE15,  0xBE1C341E,\n-  0xFC000000,  0x3FEE0FAB,  0x18D0E701,  0xBDFC7EAE,\n-  0x94000000,  0x3FEE1EB7,  0xECD1FF8B,  0x3E06B34F,\n-  0xB4000000,  0x3FEE2DCA,  0x6813A649,  0x3E1394A3,\n-  0x60000000,  0x3FEE3CE5,  0xC1754D14,  0x3E045496,\n-  0x9C000000,  0x3FEE4C07,  0xF5C6087C,  0xBE180FFF,\n-  0x68000000,  0x3FEE5B31,  0xADD9A300,  0x3E22FBCD,\n-  0xCC000000,  0x3FEE6A62,  0xAF0289E5,  0x3E2EC7C7,\n-  0xCC000000,  0x3FEE799B,  0x3FB3EDD4,  0x3E242182,\n-  0x6C000000,  0x3FEE88DC,  0x04E39885,  0xBE201304,\n-  0xAC000000,  0x3FEE9824,  0xE6831D31,  0xBE20D352,\n-  0x90000000,  0x3FEEA774,  0x618DFCEB,  0x3E1E032D,\n-  0x20000000,  0x3FEEB6CC,  0xF9BB457E,  0x3E1956A3,\n-  0x60000000,  0x3FEEC62B,  0x50845DB2,  0xBE2A77E0,\n-  0x4C000000,  0x3FEED592,  0x47C43858,  0x3E2714F7,\n-  0xF0000000,  0x3FEEE500,  0x71813A66,  0x3E2EED96,\n-  0x50000000,  0x3FEEF477,  0x4FB4AA34,  0xBE04CDBE,\n-  0x6C000000,  0x3FEF03F5,  0x86EB4FF5,  0xBE2774A2,\n-  0x48000000,  0x3FEF137B,  0xAD43B2D2,  0xBE29DD95,\n-  0xE8000000,  0x3FEF2308,  0xAC16E506,  0xBE1CADB0,\n-  0x50000000,  0x3FEF329E,  0x58745C7B,  0x3E12AC33,\n-  0x88000000,  0x3FEF423B,  0x6EC2D854,  0xBE248118,\n-  0x8C000000,  0x3FEF51E0,  0x304ACE08,  0x3E26986B,\n-  0x68000000,  0x3FEF618D,  0x3B09354E,  0x3E126D81,\n-  0x1C000000,  0x3FEF7142,  0x773C23B3,  0x3DF06AAE,\n-  0xAC000000,  0x3FEF80FE,  0xD82EF423,  0xBDA105B6,\n-  0x1C000000,  0x3FEF90C3,  0x465499B8,  0x3DECDEED,\n-  0x70000000,  0x3FEFA08F,  0xE2EF03AE,  0x3E0AEFD4,\n-  0xAC000000,  0x3FEFB063,  0x0567B2E7,  0x3E1BD4C0,\n-  0xD4000000,  0x3FEFC03F,  0x4F97FCBF,  0x3E26AA22,\n-  0xF0000000,  0x3FEFD023,  0x5E4E88D1,  0xBE2F9420,\n-  0xFC000000,  0x3FEFE00F,  0x438E52E2,  0xBE254004,\n-  0x00000000,  0x3FEFF004,  0xEEE93EFC,  0xBE1552AA,\n-  0x00000000,  0x3FF00000,  0x00000000,  0x00000000,\n-  0x00000000,  0x3FF00802,  0x4449F507,  0x3E155800,\n-  0x04000000,  0x3FF01008,  0x882D75D6,  0xBE354AA8,\n-  0x08000000,  0x3FF01812,  0x3740DE56,  0x3E303610,\n-  0x14000000,  0x3FF02020,  0x5B0C3264,  0x3E360044,\n-  0x28000000,  0x3FF02832,  0x0197EDC3,  0x3E3C4C26,\n-  0x48000000,  0x3FF03048,  0x5046CA09,  0x3E0B103B,\n-  0x74000000,  0x3FF03862,  0xF9A62624,  0xBE34659C,\n-  0xAC000000,  0x3FF04080,  0xDD0A8F37,  0xBE254438,\n-  0xF4000000,  0x3FF048A2,  0x97AFB6E2,  0x3DF256C2,\n-  0x50000000,  0x3FF050C9,  0x923D25E1,  0xBE3085DF,\n-  0xC0000000,  0x3FF058F3,  0x5EA3B091,  0xBE3F0A93,\n-  0x44000000,  0x3FF06122,  0x5D63534C,  0xBE237DE4,\n-  0xE0000000,  0x3FF06954,  0xFF0C58B7,  0x3E301719,\n-  0x98000000,  0x3FF0718B,  0x9DF7B665,  0x3E2E8410,\n-  0x6C000000,  0x3FF079C6,  0x3B127222,  0x3E349CB9,\n-  0x60000000,  0x3FF08205,  0x98E0BD08,  0x3DF127EC,\n-  0x74000000,  0x3FF08A48,  0x706CC41F,  0xBE24C1B6,\n-  0xA8000000,  0x3FF0928F,  0x093044EF,  0x3E334EF9,\n-  0x04000000,  0x3FF09ADB,  0x56BC6C83,  0xBE1304B1,\n-  0x84000000,  0x3FF0A32A,  0xB028B984,  0x3E2D383E,\n-  0x30000000,  0x3FF0AB7E,  0x64E7A202,  0xBE315B1E,\n-  0x04000000,  0x3FF0B3D6,  0xC678291E,  0xBE0AC1E6,\n-  0x04000000,  0x3FF0BC32,  0x2F12FFE2,  0x3E3A0418,\n-  0x38000000,  0x3FF0C492,  0x43D6D302,  0xBE37D617,\n-  0x98000000,  0x3FF0CCF6,  0x152CC8FA,  0x3E2133F2,\n-  0x2C000000,  0x3FF0D55F,  0xE966E6B7,  0x3E3CE5D1,\n-  0xF8000000,  0x3FF0DDCB,  0x7BCACA64,  0x3E1ABF24,\n-  0xFC000000,  0x3FF0E63C,  0x2E8CDBED,  0xBE3854F6,\n-  0x38000000,  0x3FF0EEB2,  0x0C32156B,  0xBE3E6463,\n-  0xAC000000,  0x3FF0F72B,  0xB69772CC,  0x3E365671,\n-  0x64000000,  0x3FF0FFA9,  0x02B1201A,  0xBE383E9A,\n-  0x58000000,  0x3FF1082B,  0x50549CC0,  0xBE205962,\n-  0x90000000,  0x3FF110B1,  0xFFDACA72,  0xBE376BFE,\n-  0x08000000,  0x3FF1193C,  0x5C43E2F3,  0x3E3C1C59,\n-  0xCC000000,  0x3FF121CA,  0xF7067C8B,  0xBE26D374,\n-  0xD4000000,  0x3FF12A5D,  0x4DDAFE1D,  0x3E343CCC,\n-  0x28000000,  0x3FF132F5,  0x58EBCB7F,  0x3E3D5C16,\n-  0xCC000000,  0x3FF13B90,  0xB66E8B53,  0xBE2B5D12,\n-  0xBC000000,  0x3FF14430,  0xB326B482,  0xBE24E919,\n-  0xFC000000,  0x3FF14CD4,  0xC8AABD43,  0x3E23139A,\n-  0x90000000,  0x3FF1557D,  0x16743B55,  0x3E30DD8B,\n-  0x7C000000,  0x3FF15E2A,  0x35904C50,  0xBE31D701,\n-  0xBC000000,  0x3FF166DB,  0x30E0CA83,  0x3E107F42,\n-  0x58000000,  0x3FF16F91,  0xDA1B7123,  0xBE24F1F2,\n-  0x50000000,  0x3FF1784B,  0x0DC79E23,  0xBE3ACAF2,\n-  0xA4000000,  0x3FF18109,  0x609374EE,  0xBE23DC79,\n-  0x58000000,  0x3FF189CC,  0x3A40C3B7,  0x3E262CF7,\n-  0x70000000,  0x3FF19293,  0x5A24F463,  0x3E1D3833,\n-  0xEC000000,  0x3FF19B5E,  0x8A2E4440,  0x3E2BA9AD,\n-  0xD0000000,  0x3FF1A42E,  0x61C41828,  0x3DFD8CBC,\n-  0x1C000000,  0x3FF1AD03,  0x5A4DDF0D,  0x3E1A65E6,\n-  0xD4000000,  0x3FF1B5DB,  0x9F828DB5,  0xBDE2FDBB,\n-  0xF8000000,  0x3FF1BEB8,  0xB79B700F,  0x3E2F4EE8,\n-  0x8C000000,  0x3FF1C79A,  0x0DE1D7E8,  0x3E3ACC35,\n-  0x94000000,  0x3FF1D080,  0xFF9E20A0,  0x3E11729E,\n-  0x10000000,  0x3FF1D96B,  0x6C2EA70B,  0xBE300F18,\n-  0x00000000,  0x3FF1E25A,  0xCE425A35,  0x3DF32E02,\n-  0x68000000,  0x3FF1EB4D,  0x9A322D12,  0x3E3BDE56,\n-  0x50000000,  0x3FF1F445,  0xBA737AEF,  0xBE3C3F0D,\n-  0xB0000000,  0x3FF1FD41,  0xC896DB7A,  0xBE0A2DD0,\n-  0x90000000,  0x3FF20642,  0xF8B782F6,  0x3E2577B0,\n-  0xF4000000,  0x3FF20F47,  0x73607FC8,  0xBE2C6DA3,\n-  0xD8000000,  0x3FF21851,  0xC8917348,  0x3E35F7D1,\n-  0x44000000,  0x3FF22160,  0xCF9CED69,  0x3E3B6F5C,\n-  0x3C000000,  0x3FF22A73,  0x85775C2E,  0xBE39967E,\n-  0xB8000000,  0x3FF2338A,  0x497226D4,  0x3E3B3213,\n-  0xC4000000,  0x3FF23CA6,  0x30733227,  0x3E3E2710,\n-  0x60000000,  0x3FF245C7,  0xAF215A72,  0x3E33B8A9,\n-  0x90000000,  0x3FF24EEC,  0x1365623F,  0xBE3F96B2,\n-  0x50000000,  0x3FF25816,  0x27DEE202,  0xBE37324F,\n-  0xA4000000,  0x3FF26144,  0x4E484D87,  0x3E318CD5,\n-  0x94000000,  0x3FF26A77,  0xA94519E8,  0xBDE3FD37,\n-  0x1C000000,  0x3FF273AF,  0xEE788C29,  0x3E37132F,\n-  0x44000000,  0x3FF27CEB,  0xE842E5C0,  0xBE03DDB7,\n-  0x08000000,  0x3FF2862C,  0xE17C9693,  0x3E37A3FB,\n-  0x70000000,  0x3FF28F71,  0xAEB3D9A0,  0x3E24EABF,\n-  0x7C000000,  0x3FF298BB,  0x853B0733,  0xBE13C7B6,\n-  0x2C000000,  0x3FF2A20A,  0xC7B588B5,  0x3E2D2C80,\n-  0x88000000,  0x3FF2AB5D,  0x708F3912,  0xBE35B750,\n-  0x8C000000,  0x3FF2B4B5,  0xD5FD9130,  0xBE291A70,\n-  0x3C000000,  0x3FF2BE12,  0x0CCF9F73,  0x3E2EE937,\n-  0xA0000000,  0x3FF2C773,  0xD42CF76C,  0xBE3C3F0C,\n-  0xB0000000,  0x3FF2D0D9,  0x60763D61,  0x3E35DD54,\n-  0x78000000,  0x3FF2DA44,  0xE7D6AA3B,  0x3E26C418,\n-  0xF8000000,  0x3FF2E3B3,  0x6FB9B7A8,  0xBE3605C6,\n-  0x2C000000,  0x3FF2ED28,  0x24DCDDF5,  0x3E3763D4,\n-  0x20000000,  0x3FF2F6A1,  0xA8EC1AA8,  0xBE1A411E,\n-  0xD0000000,  0x3FF3001E,  0x1FE8546F,  0xBE23FCA1,\n-  0x40000000,  0x3FF309A1,  0x3AAEE75E,  0xBE29DF0D,\n-  0x70000000,  0x3FF31328,  0x3C2C4206,  0x3E36A5D6,\n-  0x68000000,  0x3FF31CB4,  0xB4C979B0,  0x3E1B7A3E,\n-  0x28000000,  0x3FF32645,  0x706CD593,  0xBE36157D,\n-  0xB0000000,  0x3FF32FDA,  0x8DA4C646,  0xBE39F357,\n-  0x04000000,  0x3FF33975,  0xD575FE6F,  0xBE3E64DE,\n-  0x24000000,  0x3FF34314,  0x44D008E0,  0x3E07F9E3,\n-  0x18000000,  0x3FF34CB8,  0x5A563E77,  0xBE2E94F9,\n-  0xDC000000,  0x3FF35660,  0x2475EF19,  0x3E314DC2,\n-  0x78000000,  0x3FF3600E,  0xA33AC606,  0x3E26D623,\n-  0xEC000000,  0x3FF369C0,  0xC05B3160,  0x3E170F86,\n-  0x3C000000,  0x3FF37378,  0xDB0AE31A,  0xBE38DDFE,\n-  0x64000000,  0x3FF37D34,  0x5706B570,  0x3E3662A9,\n-  0x70000000,  0x3FF386F5,  0x6770731E,  0xBE1625E4,\n-  0x5C000000,  0x3FF390BB,  0x62971091,  0xBE1678F1,\n-  0x2C000000,  0x3FF39A86,  0xD045CB0C,  0xBE061F7C,\n-  0xE4000000,  0x3FF3A455,  0x568B1CA2,  0xBE35CF51,\n-  0x84000000,  0x3FF3AE2A,  0x7FB61F58,  0xBE378185,\n-  0x0C000000,  0x3FF3B804,  0x4FA133AF,  0x3E3F77F4,\n-  0x88000000,  0x3FF3C1E2,  0xB00B73FE,  0xBE22F96A,\n-  0xF0000000,  0x3FF3CBC5,  0x1EB4CE2F,  0x3E351A64,\n-  0x50000000,  0x3FF3D5AE,  0xD3755639,  0xBE3D3516,\n-  0xA0000000,  0x3FF3DF9B,  0x43E8C10E,  0x3E1CD938,\n-  0xEC000000,  0x3FF3E98D,  0x455C8842,  0xBE35EE23,\n-  0x30000000,  0x3FF3F385,  0x96C9F4ED,  0xBE29B282,\n-  0x70000000,  0x3FF3FD81,  0x3168CC0B,  0x3E24A40E,\n-  0xB0000000,  0x3FF40782,  0x86C72839,  0x3E3784BC,\n-  0xF4000000,  0x3FF41188,  0x0785D847,  0x3E061F19,\n-  0x3C000000,  0x3FF41B94,  0xE654A9C9,  0xBE27AEF2,\n-  0x88000000,  0x3FF425A4,  0xF9E4C1BA,  0x3E33DFC3,\n-  0xE0000000,  0x3FF42FB9,  0x593D0C75,  0x3E2455A8,\n-  0x44000000,  0x3FF439D4,  0x238B65D1,  0xBDE41D4E,\n-  0xB4000000,  0x3FF443F3,  0x454CBECB,  0x3E3BE616,\n-  0x38000000,  0x3FF44E18,  0x931C5332,  0x3E207B3C,\n-  0xD0000000,  0x3FF45841,  0x7615DCC9,  0xBE330846,\n-  0x7C000000,  0x3FF46270,  0xE497F84E,  0xBE2A8A7B,\n-  0x40000000,  0x3FF46CA4,  0xF737AF78,  0x3E020B50,\n-  0x20000000,  0x3FF476DD,  0xE34AFBD3,  0x3E116B19,\n-  0x20000000,  0x3FF4811B,  0x841EDB52,  0xBE3E15A7,\n-  0x3C000000,  0x3FF48B5E,  0x33B3DE1E,  0x3E0F40C3,\n-  0x7C000000,  0x3FF495A6,  0x92EFEE02,  0x3E33607F,\n-  0xE4000000,  0x3FF49FF3,  0x14F7E168,  0xBE1A2DB5,\n-  0x70000000,  0x3FF4AA46,  0x3EBA1C94,  0x3E3F59EC,\n-  0x2C000000,  0x3FF4B49E,  0x8B9AE885,  0xBE31A539,\n-  0x10000000,  0x3FF4BEFB,  0xF13C8C95,  0x3E2FAC0B,\n-  0x28000000,  0x3FF4C95D,  0xF8B74775,  0xBE32C0BB,\n-  0x70000000,  0x3FF4D3C4,  0x4F9474BB,  0xBE2FC24E,\n-  0xEC000000,  0x3FF4DE30,  0x09DA911F,  0x3E008F30,\n-  0xA0000000,  0x3FF4E8A2,  0xBAF8D98B,  0x3E2994C1,\n-  0x90000000,  0x3FF4F319,  0x18648D0A,  0xBE17C38C,\n-  0xBC000000,  0x3FF4FD95,  0xF22F8698,  0xBE288852,\n-  0x28000000,  0x3FF50817,  0x30A2C153,  0xBE3C3EC3,\n-  0xD4000000,  0x3FF5129D,  0x968492AA,  0xBE27B606,\n-  0xC4000000,  0x3FF51D29,  0x61101629,  0x3E2E0396,\n-  0xFC000000,  0x3FF527BA,  0xDAEEAB38,  0x3E3E876F,\n-  0x80000000,  0x3FF53251,  0xED945B30,  0x3E29F59E,\n-  0x50000000,  0x3FF53CED,  0x0B4AE3F1,  0x3E12D7DA,\n-  0x70000000,  0x3FF5478E,  0x5FB946D0,  0xBE2FAFB8,\n-  0xE0000000,  0x3FF55234,  0x87D80C66,  0xBE18A8B3,\n-  0xA4000000,  0x3FF55CE0,  0x764CF85C,  0x3E28B18F,\n-  0xC0000000,  0x3FF56791,  0x2BDBC6F4,  0x3E326017,\n-  0x38000000,  0x3FF57248,  0x53D523FE,  0xBE229F98,\n-  0x0C000000,  0x3FF57D04,  0x4D9B8720,  0xBE3BDD08,\n-  0x3C000000,  0x3FF587C5,  0x09D8749E,  0x3E169EBC,\n-  0xD0000000,  0x3FF5928B,  0x339C2080,  0x3E190C8C,\n-  0xC8000000,  0x3FF59D57,  0xDE75E9CA,  0x3E310FA4,\n-  0x28000000,  0x3FF5A829,  0x1097F186,  0x3E313D18,\n-  0xF4000000,  0x3FF5B2FF,  0xD51C23F6,  0xBE2BDE04,\n-  0x28000000,  0x3FF5BDDC,  0x8938C386,  0x3E3EE67E,\n-  0xD0000000,  0x3FF5C8BD,  0x47DF6575,  0x3E0973B8,\n-  0xE8000000,  0x3FF5D3A4,  0x1DB97781,  0x3E24DF02,\n-  0x78000000,  0x3FF5DE91,  0xAC4AECDC,  0xBE3FBA00,\n-  0x7C000000,  0x3FF5E983,  0x939F646A,  0xBE2F37AF,\n-  0xFC000000,  0x3FF5F47A,  0x58A6EEE9,  0xBE396DEF,\n-  0xF8000000,  0x3FF5FF77,  0xE3613C7B,  0xBE315248,\n-  0x74000000,  0x3FF60A7A,  0xF1553706,  0xBE26A9E2,\n-  0x74000000,  0x3FF61582,  0xAE4D7CB6,  0xBE3B6BF6,\n-  0xF8000000,  0x3FF6208F,  0x9EB5EBA5,  0xBE35775B,\n-  0x04000000,  0x3FF62BA3,  0xC1E43506,  0xBE2A821B,\n-  0x9C000000,  0x3FF636BB,  0x7B2D8CF4,  0xBE367CDA,\n-  0xC0000000,  0x3FF641D9,  0x3E907A1D,  0xBE13218B,\n-  0x74000000,  0x3FF64CFD,  0x7BF5DFE4,  0x3E3454EE,\n-  0xC0000000,  0x3FF65826,  0x6366C5FD,  0xBE3E960F,\n-  0x9C000000,  0x3FF66355,  0x8B43C17E,  0x3E2E378F,\n-  0x14000000,  0x3FF66E8A,  0xA4306535,  0x3E244BE0,\n-  0x28000000,  0x3FF679C4,  0x8DF63D6E,  0xBDE4B6C1,\n-  0xD8000000,  0x3FF68503,  0xE6A239CF,  0x3E3BA122,\n-  0x2C000000,  0x3FF69049,  0x59FB5F30,  0x3E27F286,\n-  0x24000000,  0x3FF69B94,  0x971D3970,  0xBE044041 } };\n-\n-static const union {\n-  int4   i[2048];\n-  double x[1024];\n-}  fine = { .i = {\n-  0x00000000,  0x3FF00000,  0x00000000,  0x00000000,\n-  0x00000000,  0x3FF00004,  0x55556AAB,  0x3DA00001,\n-  0x00000000,  0x3FF00008,  0xAAAB0000,  0x3DC00002,\n-  0x00000000,  0x3FF0000C,  0x8000D800,  0x3DD20004,\n-  0x00000000,  0x3FF00010,  0x5556AAAB,  0x3DE00005,\n-  0x00000000,  0x3FF00014,  0x6AADEC01,  0x3DE9000A,\n-  0x00000000,  0x3FF00018,  0x00036001,  0x3DF20009,\n-  0x00000000,  0x3FF0001C,  0x4AB0EB58,  0x3DF8800E,\n-  0x00000000,  0x3FF00020,  0xAAB00002,  0x3E00000A,\n-  0x00000000,  0x3FF00024,  0x30088B04,  0x3E04400F,\n-  0x00000000,  0x3FF00028,  0xD5625AB1,  0x3E090014,\n-  0x00000000,  0x3FF0002C,  0xBABDBB0A,  0x3E0E401B,\n-  0x00000000,  0x3FF00030,  0x000D8008,  0x3E120012,\n-  0x00000000,  0x3FF00034,  0xE2BD42E1,  0x3E152016,\n-  0x00000000,  0x3FF00038,  0x956E5812,  0x3E18801C,\n-  0x00000000,  0x3FF0003C,  0x2820F599,  0x3E1C2023,\n-  0x00000000,  0x3FF00040,  0x556AAABC,  0x3E200015,\n-  0x00000000,  0x3FF00044,  0x96C5DAD7,  0x3E221019,\n-  0x00000000,  0x3FF00048,  0x60222C1F,  0x3E24401E,\n-  0x00000000,  0x3FF0004C,  0xB97FC193,  0x3E269023,\n-  0x00000000,  0x3FF00050,  0xAADEC034,  0x3E290029,\n-  0x00000000,  0x3FF00054,  0x3C3F4F02,  0x3E2B9030,\n-  0x00000000,  0x3FF00058,  0x75A196FF,  0x3E2E4037,\n-  0x00000000,  0x3FF0005C,  0xAF82E194,  0x3E30881F,\n-  0x00000000,  0x3FF00060,  0x00360041,  0x3E320024,\n-  0x00000000,  0x3FF00064,  0xB0EA3F05,  0x3E338828,\n-  0x00000000,  0x3FF00068,  0xC59FB661,  0x3E35202D,\n-  0x00000000,  0x3FF0006C,  0x42567FD5,  0x3E36C833,\n-  0x00000000,  0x3FF00070,  0x2B0EB5E1,  0x3E388039,\n-  0x00000000,  0x3FF00074,  0x83C87407,  0x3E3A483F,\n-  0x00000000,  0x3FF00078,  0x5083D6C6,  0x3E3C2046,\n-  0x00000000,  0x3FF0007C,  0x9540FB9E,  0x3E3E084D,\n-  0x04000000,  0x3FF00080,  0xA9FFFEEF,  0xBE3FFFAA,\n-  0x04000000,  0x3FF00084,  0x693EF962,  0xBE3DF7A2,\n-  0x04000000,  0x3FF00088,  0xA47BD339,  0xBE3BDF99,\n-  0x04000000,  0x3FF0008C,  0x57B66AF5,  0xBE39B790,\n-  0x04000000,  0x3FF00090,  0x7EEE9E14,  0xBE377F86,\n-  0x04000000,  0x3FF00094,  0x16244916,  0xBE35377C,\n-  0x04000000,  0x3FF00098,  0x1957477B,  0xBE32DF71,\n-  0x04000000,  0x3FF0009C,  0x848773C2,  0xBE307765,\n-  0x04000000,  0x3FF000A0,  0xA7694ED3,  0xBE2BFEB2,\n-  0x04000000,  0x3FF000A4,  0x05BD75E2,  0xBE26EE99,\n-  0x04000000,  0x3FF000A8,  0x1C0B0BB1,  0xBE21BE7E,\n-  0x04000000,  0x3FF000AC,  0xC4A37A79,  0xBE18DCC3,\n-  0x04000000,  0x3FF000B0,  0x4244D60F,  0xBE0BF911,\n-  0x04000000,  0x3FF000B4,  0xEC91D848,  0xBDE6E255,\n-  0x04000000,  0x3FF000B8,  0xEC1B8F0C,  0x3E0107EB,\n-  0x04000000,  0x3FF000BC,  0x89BE52AA,  0x3E142439,\n-  0x04000000,  0x3FF000C0,  0x06C01033,  0x3E200240,\n-  0x04000000,  0x3FF000C4,  0xC8A9F760,  0x3E261264,\n-  0x04000000,  0x3FF000C8,  0x129D3FDE,  0x3E2C428B,\n-  0x04000000,  0x3FF000CC,  0x764D2658,  0x3E314959,\n-  0x04000000,  0x3FF000D0,  0x2F50C16C,  0x3E34816E,\n-  0x04000000,  0x3FF000D4,  0xB859A4AB,  0x3E37C983,\n-  0x04000000,  0x3FF000D8,  0x15680499,  0x3E3B219A,\n-  0x04000000,  0x3FF000DC,  0x4A7C16B5,  0x3E3E89B1,\n-  0x08000000,  0x3FF000E0,  0xA469EE7E,  0xBE3DFE36,\n-  0x08000000,  0x3FF000E4,  0xB349D37F,  0xBE3A761D,\n-  0x08000000,  0x3FF000E8,  0xDE235FCD,  0xBE36DE03,\n-  0x08000000,  0x3FF000EC,  0x20F659E6,  0xBE3335E9,\n-  0x08000000,  0x3FF000F0,  0xEF850E8F,  0xBE2EFB9A,\n-  0x08000000,  0x3FF000F4,  0xBD0F58E2,  0xBE276B61,\n-  0x08000000,  0x3FF000F8,  0x45163381,  0xBE1F764D,\n-  0x08000000,  0x3FF000FC,  0x5FDF589A,  0xBE0FABA6,\n-  0x08000000,  0x3FF00100,  0xABBBBE94,  0x3D8555AA,\n-  0x08000000,  0x3FF00104,  0xDABB690B,  0x3E102B2C,\n-  0x08000000,  0x3FF00108,  0x7820FBA0,  0x3E2045D9,\n-  0x08000000,  0x3FF0010C,  0x92F54742,  0x3E28961E,\n-  0x08000000,  0x3FF00110,  0xE2ED8E39,  0x3E308332,\n-  0x08000000,  0x3FF00114,  0x8C698119,  0x3E34CB57,\n-  0x08000000,  0x3FF00118,  0x49EEC0C4,  0x3E39237D,\n-  0x08000000,  0x3FF0011C,  0x1F7D92BC,  0x3E3D8BA4,\n-  0x0C000000,  0x3FF00120,  0xEEE9C27D,  0xBE3DFC33,\n-  0x0C000000,  0x3FF00124,  0xDD46F763,  0xBE39740A,\n-  0x0C000000,  0x3FF00128,  0xA799C375,  0xBE34DBE0,\n-  0x0C000000,  0x3FF0012C,  0x49E1DD2F,  0xBE3033B5,\n-  0x0C000000,  0x3FF00130,  0x803DF41F,  0xBE26F711,\n-  0x0C000000,  0x3FF00134,  0x19433A4C,  0xBE1ACD6C,\n-  0x0C000000,  0x3FF00138,  0x8770E36F,  0xBDFDB2C1,\n-  0x0C000000,  0x3FF0013C,  0x6B74A43E,  0x3E086820,\n-  0x0C000000,  0x3FF00140,  0xDEC0D058,  0x3E200A6A,\n-  0x0C000000,  0x3FF00144,  0x22BD7872,  0x3E2A1AD0,\n-  0x0C000000,  0x3FF00148,  0xF769E132,  0x3E32259B,\n-  0x0C000000,  0x3FF0014C,  0x2582289A,  0x3E374DD1,\n-  0x0C000000,  0x3FF00150,  0x9FA7E4F4,  0x3E3C8607,\n-  0x10000000,  0x3FF00154,  0x9624963C,  0xBE3E31C0,\n-  0x10000000,  0x3FF00158,  0x77E2F472,  0xBE38D987,\n-  0x10000000,  0x3FF0015C,  0x0192E02C,  0xBE33714D,\n-  0x10000000,  0x3FF00160,  0x5E6805CB,  0xBE2BF222,\n-  0x10000000,  0x3FF00164,  0xF98C0A34,  0xBE20E1A7,\n-  0x10000000,  0x3FF00168,  0x32447238,  0xBE06C4AB,\n-  0x10000000,  0x3FF0016C,  0xC225D8C1,  0x3E067D54,\n-  0x10000000,  0x3FF00170,  0x05C4630F,  0x3E210FD8,\n-  0x10000000,  0x3FF00174,  0xBB206115,  0x3E2CA05D,\n-  0x10000000,  0x3FF00178,  0x2C4F14A6,  0x3E342873,\n-  0x10000000,  0x3FF0017C,  0xF31F3B5E,  0x3E3A10B8,\n-  0x14000000,  0x3FF00180,  0xC9FEFCC9,  0xBE3FF6FF,\n-  0x14000000,  0x3FF00184,  0x070B344A,  0xBE39EEB7,\n-  0x14000000,  0x3FF00188,  0xC0050AA2,  0xBE33D66C,\n-  0x14000000,  0x3FF0018C,  0xE1D83C97,  0xBE2B5C41,\n-  0x14000000,  0x3FF00190,  0x57003305,  0xBE1DD74E,\n-  0x14000000,  0x3FF00194,  0xA80727F1,  0xBDF2D84A,\n-  0x14000000,  0x3FF00198,  0x534C5401,  0x3E14AB2F,\n-  0x14000000,  0x3FF0019C,  0xD875DE83,  0x3E27263B,\n-  0x14000000,  0x3FF001A0,  0x9FB782CA,  0x3E320B71,\n-  0x14000000,  0x3FF001A4,  0xF349371F,  0x3E3893C6,\n-  0x14000000,  0x3FF001A8,  0xEAF074C6,  0x3E3F2C1D,\n-  0x18000000,  0x3FF001AC,  0x75525ABC,  0xBE3A2B89,\n-  0x18000000,  0x3FF001B0,  0x297ECCE2,  0xBE33732F,\n-  0x18000000,  0x3FF001B4,  0x5B28EC49,  0xBE2955A6,\n-  0x18000000,  0x3FF001B8,  0xF64BA7FD,  0xBE1749D5,\n-  0x18000000,  0x3FF001BC,  0xA8645141,  0x3DF15E9E,\n-  0x18000000,  0x3FF001C0,  0x1D6F0B37,  0x3E201C96,\n-  0x18000000,  0x3FF001C4,  0xE6028E39,  0x3E2E2D5B,\n-  0x18000000,  0x3FF001C8,  0x9B63FA1E,  0x3E362F12,\n-  0x18000000,  0x3FF001CC,  0x0BE01026,  0x3E3D5779,\n-  0x1C000000,  0x3FF001D0,  0xB78A0445,  0xBE3B701E,\n-  0x1C000000,  0x3FF001D4,  0xAAD9CF9D,  0xBE3427B4,\n-  0x1C000000,  0x3FF001D8,  0x941DBAB5,  0xBE299E91,\n-  0x1C000000,  0x3FF001DC,  0x44A2DFDD,  0xBE159B6C,\n-  0x1C000000,  0x3FF001E0,  0x1EC8B89C,  0x3E008CA4,\n-  0x1C000000,  0x3FF001E4,  0xF1EE0E9A,  0x3E23340B,\n-  0x1C000000,  0x3FF001E8,  0x5231913C,  0x3E313279,\n-  0x1C000000,  0x3FF001EC,  0x93892E68,  0x3E38DAEE,\n-  0x20000000,  0x3FF001F0,  0x3F01A6A8,  0xBE3F6C9A,\n-  0x20000000,  0x3FF001F4,  0x216E726C,  0xBE37A421,\n-  0x20000000,  0x3FF001F8,  0x1F7970B9,  0xBE2F974C,\n-  0x20000000,  0x3FF001FC,  0x17AFEBC8,  0xBE1F8CA4,\n-  0x20000000,  0x3FF00200,  0x04445B06,  0x3DB55600,\n-  0x20000000,  0x3FF00204,  0x0C290A26,  0x3E203BAE,\n-  0x20000000,  0x3FF00208,  0x104547BD,  0x3E30365A,\n-  0x20000000,  0x3FF0020C,  0x22970DE3,  0x3E385EDF,\n-  0x24000000,  0x3FF00210,  0xBEF5A5F4,  0xBE3F6899,\n-  0x24000000,  0x3FF00214,  0x90605040,  0xBE372010,\n-  0x24000000,  0x3FF00218,  0x9B50D8EE,  0xBE2D8F0A,\n-  0x24000000,  0x3FF0021C,  0xCB35D444,  0xBE197BDF,\n-  0x24000000,  0x3FF00220,  0x2188E3D5,  0x3E00CCBC,\n-  0x24000000,  0x3FF00224,  0x36A79F6A,  0x3E254452,\n-  0x24000000,  0x3FF00228,  0xD69B2D28,  0x3E333ABC,\n-  0x24000000,  0x3FF0022C,  0xBA07BE5B,  0x3E3BE352,\n-  0x28000000,  0x3FF00230,  0x3665F227,  0xBE3B6415,\n-  0x28000000,  0x3FF00234,  0xF6AD58D5,  0xBE329B7A,\n-  0x28000000,  0x3FF00238,  0x059BD24A,  0xBE2385BD,\n-  0x28000000,  0x3FF0023C,  0xD8E2B1B4,  0xBDEB47FA,\n-  0x28000000,  0x3FF00240,  0x22CF60F6,  0x3E203CC2,\n-  0x28000000,  0x3FF00244,  0x39BEF87F,  0x3E312704,\n-  0x28000000,  0x3FF00248,  0xA63F5309,  0x3E3A3FA9,\n-  0x2C000000,  0x3FF0024C,  0xA516AE5E,  0xBE3C97AE,\n-  0x2C000000,  0x3FF00250,  0xA442792A,  0xBE335F04,\n-  0x2C000000,  0x3FF00254,  0xA686F3A2,  0xBE242CB0,\n-  0x2C000000,  0x3FF00258,  0xC3237903,  0xBDE7B535,\n-  0x2C000000,  0x3FF0025C,  0x9E7A6CF7,  0x3E21560E,\n-  0x2C000000,  0x3FF00260,  0xA8C01385,  0x3E3223BA,\n-  0x2C000000,  0x3FF00264,  0x627012DF,  0x3E3BAC70,\n-  0x30000000,  0x3FF00268,  0x7FB232EA,  0xBE3ABAD7,\n-  0x30000000,  0x3FF0026C,  0xF9A6244B,  0xBE31121C,\n-  0x30000000,  0x3FF00270,  0x1DAC9AE4,  0xBE1D6580,\n-  0x30000000,  0x3FF00274,  0xD7FB0AC3,  0x3E037AFA,\n-  0x30000000,  0x3FF00278,  0x633420EB,  0x3E289042,\n-  0x30000000,  0x3FF0027C,  0x8065842A,  0x3E3630E5,\n-  0x34000000,  0x3FF00280,  0xB49DA4FF,  0xBE3FD653,\n-  0x34000000,  0x3FF00284,  0x696ECB76,  0xBE35CD8A,\n-  0x34000000,  0x3FF00288,  0x341A9D63,  0xBE27697D,\n-  0x34000000,  0x3FF0028C,  0x2788D238,  0xBDF8BF04,\n-  0x34000000,  0x3FF00290,  0x42A03782,  0x3E2159C1,\n-  0x34000000,  0x3FF00294,  0x154D4F89,  0x3E32F5B4,\n-  0x34000000,  0x3FF00298,  0x1D7FB2C1,  0x3E3D4E8A,\n-  0x38000000,  0x3FF0029C,  0x42181508,  0xBE38489D,\n-  0x38000000,  0x3FF002A0,  0x0AF2C28C,  0xBE2B9F84,\n-  0x38000000,  0x3FF002A4,  0x451C5357,  0xBE0A3721,\n-  0x38000000,  0x3FF002A8,  0x61A8605E,  0x3E1D47F1,\n-  0x38000000,  0x3FF002AC,  0x81B02FCF,  0x3E31FADF,\n-  0x38000000,  0x3FF002B0,  0x572F674A,  0x3E3CB3C5,\n-  0x3C000000,  0x3FF002B4,  0x231795EA,  0xBE388352,\n-  0x3C000000,  0x3FF002B8,  0xD248367A,  0xBE2B54CD,\n-  0x3C000000,  0x3FF002BC,  0xB7ABD90D,  0xBE060BC7,\n-  0x3C000000,  0x3FF002C0,  0x6EE9F1EF,  0x3E206EEF,\n-  0x3C000000,  0x3FF002C4,  0x261BF09E,  0x3E33406B,\n-  0x3C000000,  0x3FF002C8,  0x59001C60,  0x3E3E5961,\n-  0x40000000,  0x3FF002CC,  0xABDDD232,  0xBE367DA5,\n-  0x40000000,  0x3FF002D0,  0xC8FA5113,  0xBE268953,\n-  0x40000000,  0x3FF002D4,  0x8B33A701,  0x3D9152CC,\n-  0x40000000,  0x3FF002D8,  0x3E058570,  0x3E26BAAC,\n-  0x40000000,  0x3FF002DC,  0x63236E71,  0x3E36C65A,\n-  0x44000000,  0x3FF002E0,  0x7C7A795C,  0xBE3DC09E,\n-  0x44000000,  0x3FF002E4,  0x7BD63D1D,  0xBE323794,\n-  0x44000000,  0x3FF002E8,  0x5BBC9105,  0xBE1A7A1E,\n-  0x44000000,  0x3FF002EC,  0xD8EE2B1B,  0x3E142A20,\n-  0x44000000,  0x3FF002F0,  0xEFAA8A8D,  0x3E30C39A,\n-  0x44000000,  0x3FF002F4,  0x995E96A2,  0x3E3C8CB0,\n-  0x48000000,  0x3FF002F8,  0xC8A79469,  0xBE379A36,\n-  0x48000000,  0x3FF002FC,  0x64CE7203,  0xBE276236,\n-  0x48000000,  0x3FF00300,  0x0819DA68,  0x3DD200D8,\n-  0x48000000,  0x3FF00304,  0xE5E018D4,  0x3E28A249,\n-  0x48000000,  0x3FF00308,  0x8A087692,  0x3E386A49,\n-  0x4C000000,  0x3FF0030C,  0xD695988B,  0xBE3B6C8E,\n-  0x4C000000,  0x3FF00310,  0x55D2BCBA,  0xBE2E66C8,\n-  0x4C000000,  0x3FF00314,  0x7790BA7A,  0xBE0751B3,\n-  0x4C000000,  0x3FF00318,  0xC2A20261,  0x3E22DDF4,\n-  0x4C000000,  0x3FF0031C,  0x49E0B0B5,  0x3E35D82E,\n-  0x50000000,  0x3FF00320,  0xB142422E,  0xBE3DAE9A,\n-  0x50000000,  0x3FF00324,  0x8C170FE6,  0xBE312560,\n-  0x50000000,  0x3FF00328,  0x0A73BF77,  0xBE12308D,\n-  0x50000000,  0x3FF0032C,  0x5E59CEFA,  0x3E203A3A,\n-  0x50000000,  0x3FF00330,  0xCD4740BF,  0x3E34D660,\n-  0x54000000,  0x3FF00334,  0x644D1883,  0xBE3E6058,\n-  0x54000000,  0x3FF00338,  0x618F57B6,  0xBE31870E,\n-  0x54000000,  0x3FF0033C,  0x99FABD0F,  0xBE127704,\n-  0x54000000,  0x3FF00340,  0xA1CB5ECF,  0x3E20B71E,\n-  0x54000000,  0x3FF00344,  0x089E93E1,  0x3E3564E3,\n-  0x58000000,  0x3FF00348,  0xFB533142,  0xBE3D81C5,\n-  0x58000000,  0x3FF0034C,  0xB6EECE6C,  0xBE30586B,\n-  0x58000000,  0x3FF00350,  0x319B883E,  0xBE08F871,\n-  0x58000000,  0x3FF00354,  0x75BF7503,  0x3E2454A5,\n-  0x58000000,  0x3FF00358,  0xF04B88C5,  0x3E3783B6,\n-  0x5C000000,  0x3FF0035C,  0x81EF30A7,  0xBE3B12E1,\n-  0x5C000000,  0x3FF00360,  0x2F9F3657,  0xBE2B32ED,\n-  0x5C000000,  0x3FF00364,  0x54DF31BC,  0xBDB0084D,\n-  0x5C000000,  0x3FF00368,  0xC303B7B9,  0x3E2B12D2,\n-  0x5C000000,  0x3FF0036C,  0x78B56F97,  0x3E3B32DE,\n-  0x60000000,  0x3FF00370,  0x03B9496C,  0xBE3713A9,\n-  0x60000000,  0x3FF00374,  0x1F92E726,  0xBE22945A,\n-  0x60000000,  0x3FF00378,  0x621736DF,  0x3E123D49,\n-  0x60000000,  0x3FF0037C,  0x3935580D,  0x3E3278D5,\n-  0x64000000,  0x3FF00380,  0x69B9F5FB,  0xBE3F8DA4,\n-  0x64000000,  0x3FF00384,  0x8C473CC8,  0xBE31841A,\n-  0x64000000,  0x3FF00388,  0x538CDE07,  0xBE0B5469,\n-  0x64000000,  0x3FF0038C,  0x7F8F9D65,  0x3E257E07,\n-  0x64000000,  0x3FF00390,  0x3665E52B,  0x3E38F898,\n-  0x68000000,  0x3FF00394,  0xC29674BD,  0xBE38BDCF,\n-  0x68000000,  0x3FF00398,  0x4E58B4D9,  0xBE24C868,\n-  0x68000000,  0x3FF0039C,  0x329466D7,  0x3E1015AC,\n-  0x68000000,  0x3FF003A0,  0xDCDECE44,  0x3E327F0D,\n-  0x6C000000,  0x3FF003A4,  0xB27E5528,  0xBE3EF74B,\n-  0x6C000000,  0x3FF003A8,  0x9D7167F2,  0xBE305DA1,\n-  0x6C000000,  0x3FF003AC,  0xFF980820,  0xBDFB3F3D,\n-  0x6C000000,  0x3FF003B0,  0x13D49789,  0x3E2A0B7B,\n-  0x6C000000,  0x3FF003B4,  0xA43AE87C,  0x3E3BCF72,\n-  0x70000000,  0x3FF003B8,  0x8D06BDC0,  0xBE3556D4,\n-  0x70000000,  0x3FF003BC,  0x1766E54D,  0xBE19B460,\n-  0x70000000,  0x3FF003C0,  0x7B85C8BA,  0x3E211950,\n-  0x70000000,  0x3FF003C4,  0x41D00AED,  0x3E37966C,\n-  0x74000000,  0x3FF003C8,  0xF5B15507,  0xBE394FCB,\n-  0x74000000,  0x3FF003CC,  0xC98093C4,  0xBE244C00,\n-  0x74000000,  0x3FF003D0,  0xE2907BDF,  0x3E144F3B,\n-  0x74000000,  0x3FF003D4,  0x267CD924,  0x3E345DA2,\n-  0x78000000,  0x3FF003D8,  0xD73526C0,  0xBE3C4886,\n-  0x78000000,  0x3FF003DC,  0xF8E1D62E,  0xBE29BD57,\n-  0x78000000,  0x3FF003E0,  0xD65415E1,  0x3E04D995,\n-  0x78000000,  0x3FF003E4,  0x527E1A58,  0x3E322515,\n-  0x7C000000,  0x3FF003E8,  0x31552BA5,  0xBE3E4104,\n-  0x7C000000,  0x3FF003EC,  0x995CAB3B,  0xBE2D2E33,\n-  0x7C000000,  0x3FF003F0,  0x473970DC,  0x3DF22D48,\n-  0x7C000000,  0x3FF003F4,  0xC61195FC,  0x3E30ECC6,\n-  0x80000000,  0x3FF003F8,  0x03D35C34,  0xBE3F3943,\n-  0x80000000,  0x3FF003FC,  0xAA7483C7,  0xBE2E9E91,\n-  0x80000000,  0x3FF00400,  0xBBBC71CE,  0x3DE556AA,\n-  0x80000000,  0x3FF00404,  0x817613C1,  0x3E30B4B7,\n-  0x84000000,  0x3FF00408,  0x4E70B0AC,  0xBE3F3142,\n-  0x84000000,  0x3FF0040C,  0x2BAAD02F,  0xBE2E0E70,\n-  0x84000000,  0x3FF00410,  0xF48F01F2,  0x3DF32D62,\n-  0x84000000,  0x3FF00414,  0x84EB5B98,  0x3E317CE8,\n-  0x88000000,  0x3FF00418,  0x10ED210B,  0xBE3E2901,\n-  0x88000000,  0x3FF0041C,  0x1C7F0051,  0xBE2B7DCD,\n-  0x88000000,  0x3FF00420,  0x87AA2706,  0x3E05D9C0,\n-  0x88000000,  0x3FF00424,  0xD0B235B3,  0x3E33455A,\n-  0x8C000000,  0x3FF00428,  0x4B07A510,  0xBE3C207E,\n-  0x8C000000,  0x3FF0042C,  0x7C6E838B,  0xBE26ECA6,\n-  0x8C000000,  0x3FF00430,  0xEC91A8D5,  0x3E150F6F,\n-  0x8C000000,  0x3FF00434,  0x650C6A83,  0x3E360E0F,\n-  0x90000000,  0x3FF00438,  0xFC7E3439,  0xBE3917B8,\n-  0x90000000,  0x3FF0043C,  0x4AF4C8B6,  0xBE205AFA,\n-  0x90000000,  0x3FF00440,  0xDC31D181,  0x3E219985,\n-  0x90000000,  0x3FF00444,  0x423CC2BE,  0x3E39D707,\n-  0x94000000,  0x3FF00448,  0x250DC5BF,  0xBE350EB0,\n-  0x94000000,  0x3FF0044C,  0x1E2CF893,  0xBE0F231A,\n-  0x94000000,  0x3FF00450,  0xD42C92D4,  0x3E2AABDB,\n-  0x94000000,  0x3FF00454,  0x6887075B,  0x3E3EA043,\n-  0x98000000,  0x3FF00458,  0xC472509B,  0xBE300562,\n-  0x98000000,  0x3FF0045C,  0x72B572E0,  0x3DF64FB6,\n-  0x98000000,  0x3FF00460,  0xEF61155C,  0x3E32DF5D,\n-  0x9C000000,  0x3FF00464,  0x27CFFE6A,  0xBE3B963B,\n-  0x9C000000,  0x3FF00468,  0xB4CD96FE,  0xBE23F79F,\n-  0x9C000000,  0x3FF0046C,  0x6E771F13,  0x3E1EBA7F,\n-  0x9C000000,  0x3FF00470,  0xFE3ED608,  0x3E396913,\n-  0xA0000000,  0x3FF00474,  0x6E82850F,  0xBE34CC73,\n-  0xA0000000,  0x3FF00478,  0x352966B7,  0xBE078FB3,\n-  0xA0000000,  0x3FF0047C,  0x33AFF8AE,  0x3E2DF116,\n-  0xA4000000,  0x3FF00480,  0xE909EADD,  0xBE3F0CEE,\n-  0xA4000000,  0x3FF00484,  0xD6938597,  0xBE2A04C8,\n-  0xA4000000,  0x3FF00488,  0x5C6654D8,  0x3E1460AA,\n-  0xA4000000,  0x3FF0048C,  0x22213ECF,  0x3E3742BE,\n-  0xA8000000,  0x3FF00490,  0xC631A356,  0xBE3682A9,\n-  0xA8000000,  0x3FF00494,  0x7777B644,  0xBE10E034,\n-  0xA8000000,  0x3FF00498,  0x3E3B0991,  0x3E2C4528,\n-  0xAC000000,  0x3FF0049C,  0x0B3E269F,  0xBE3F72C6,\n-  0xAC000000,  0x3FF004A0,  0x31DF923B,  0xBE29F037,\n-  0xAC000000,  0x3FF004A4,  0xE82713DE,  0x3E164A4D,\n-  0xAC000000,  0x3FF004A8,  0x31AFAC4B,  0x3E382D47,\n-  0xB0000000,  0x3FF004AC,  0x6DFCE978,  0xBE352800,\n-  0xB0000000,  0x3FF004B0,  0x07D68D27,  0xBE036A1B,\n-  0xB0000000,  0x3FF004B4,  0x5CB71F6F,  0x3E305D7E,\n-  0xB4000000,  0x3FF004B8,  0x30E5E990,  0xBE3CC7BB,\n-  0xB4000000,  0x3FF004BC,  0x0BA17DEA,  0xBE23B9E0,\n-  0xB4000000,  0x3FF004C0,  0xC3EF9BD8,  0x3E223BBF,\n-  0xB4000000,  0x3FF004C4,  0x8A74ECC0,  0x3E3C28B4,\n-  0xB8000000,  0x3FF004C8,  0x085831CA,  0xBE30BC72,\n-  0xB8000000,  0x3FF004CC,  0x6C8D1FC8,  0x3E037361,\n-  0xB8000000,  0x3FF004D0,  0x3033A0B8,  0x3E35A94F,\n-  0xBC000000,  0x3FF004D4,  0xFC7107DE,  0xBE370BC8,\n-  0xBC000000,  0x3FF004D8,  0xA2D908DA,  0xBE0D86E2,\n-  0xBC000000,  0x3FF004DC,  0x58ED155E,  0x3E2F742A,\n-  0xC0000000,  0x3FF004E0,  0x75FACDD0,  0xBE3CCAF4,\n-  0xC0000000,  0x3FF004E4,  0x6F5BE5D3,  0xBE227FF2,\n-  0xC0000000,  0x3FF004E8,  0xD6BCA827,  0x3E24B60D,\n-  0xC0000000,  0x3FF004EC,  0xF72B40D6,  0x3E3E060B,\n-  0xC4000000,  0x3FF004F0,  0x208BE3E3,  0xBE2C7DD4,\n-  0xC4000000,  0x3FF004F4,  0x642FDDB8,  0x3E163093,\n-  0xC4000000,  0x3FF004F8,  0xB72239A5,  0x3E396738,\n-  0xC8000000,  0x3FF004FC,  0x7201ED9B,  0xBE32ADAE,\n-  0xC8000000,  0x3FF00500,  0x1A0C05F3,  0x3DF4D6F6,\n-  0xC8000000,  0x3FF00504,  0x360B8346,  0x3E355892,\n-  0xCC000000,  0x3FF00508,  0xF0C06435,  0xBE368C45,\n-  0xCC000000,  0x3FF0050C,  0x760DA2F6,  0xBE0308C8,\n-  0xCC000000,  0x3FF00510,  0xE008D57B,  0x3E31DA18,\n-  0xD0000000,  0x3FF00514,  0x205F82F4,  0xBE39DAB0,\n-  0xD0000000,  0x3FF00518,  0x2FE5E3E3,  0xBE15FDD0,\n-  0xD0000000,  0x3FF0051C,  0x42787241,  0x3E2DD79A,\n-  0xD4000000,  0x3FF00520,  0x94BD25F4,  0xBE3C98EC,\n-  0xD4000000,  0x3FF00524,  0x53C89D03,  0xBE201B42,\n-  0xD4000000,  0x3FF00528,  0xCB901057,  0x3E291B5E,\n-  0xD8000000,  0x3FF0052C,  0xE1B6D837,  0xBE3EC6FA,\n-  0xD8000000,  0x3FF00530,  0xF8BF49E7,  0xBE24173F,\n-  0xD8000000,  0x3FF00534,  0x339DDB57,  0x3E257F80,\n-  0xD8000000,  0x3FF00538,  0x64D62C5C,  0x3E3F9B25,\n-  0xDC000000,  0x3FF0053C,  0x2E913659,  0xBE26F2E0,\n-  0xDC000000,  0x3FF00540,  0x52E7CB93,  0x3E2303FF,\n-  0xDC000000,  0x3FF00544,  0xAB0CFEF5,  0x3E3E8D74,\n-  0xE0000000,  0x3FF00548,  0x1CF7FDE6,  0xBE28AE22,\n-  0xE0000000,  0x3FF0054C,  0x01B47B93,  0x3E21A8DD,\n-  0xE0000000,  0x3FF00550,  0x5D1107E2,  0x3E3E0FF3,\n-  0xE4000000,  0x3FF00554,  0xEBAC99E1,  0xBE294904,\n-  0xE4000000,  0x3FF00558,  0x184B2814,  0x3E216E1A,\n-  0xE4000000,  0x3FF0055C,  0xE706008B,  0x3E3E22A1,\n-  0xE8000000,  0x3FF00560,  0xC267616A,  0xBE28C387,\n-  0xE8000000,  0x3FF00564,  0x6EF3B008,  0x3E2253B7,\n-  0xE8000000,  0x3FF00568,  0xB50FF371,  0x3E3EC580,\n-  0xEC000000,  0x3FF0056C,  0xC8E0096B,  0xBE271DA9,\n-  0xEC000000,  0x3FF00570,  0xDDF69498,  0x3E2459B5,\n-  0xEC000000,  0x3FF00574,  0x33533C31,  0x3E3FF890,\n-  0xF0000000,  0x3FF00578,  0x26CDA497,  0xBE24576A,\n-  0xF0000000,  0x3FF0057C,  0x3D9CF923,  0x3E278016,\n-  0xF4000000,  0x3FF00580,  0x320B787B,  0xBE3E442F,\n-  0xF4000000,  0x3FF00584,  0x03E6A36B,  0xBE2070C8,\n-  0xF4000000,  0x3FF00588,  0x6630A33F,  0x3E2BC6D9,\n-  0xF8000000,  0x3FF0058C,  0x0EE72CBF,  0xBE3BF0BD,\n-  0xF8000000,  0x3FF00590,  0x0FC1A853,  0xBE16D385,\n-  0xF8000000,  0x3FF00594,  0x17FDFD5D,  0x3E309700,\n-  0xFC000000,  0x3FF00598,  0xF71A91AC,  0xBE390D18,\n-  0xFC000000,  0x3FF0059C,  0x69C58B86,  0xBE050963,\n-  0xFC000000,  0x3FF005A0,  0xB9A504CD,  0x3E33DAC5,\n-  0x00000000,  0x3FF005A5,  0x7E800734,  0xBE359942,\n-  0x00000000,  0x3FF005A9,  0xE59934CD,  0x3DF02BAE,\n-  0x00000000,  0x3FF005AD,  0x04333E0E,  0x3E37AEBE,\n-  0x04000000,  0x3FF005B1,  0x38F19C2F,  0xBE319539,\n-  0x04000000,  0x3FF005B5,  0xEBB1C157,  0x3E14DB54,\n-  0x04000000,  0x3FF005B9,  0x63CED05D,  0x3E3C12E9,\n-  0x08000000,  0x3FF005BD,  0x74921CAF,  0xBE2A01F9,\n-  0x08000000,  0x3FF005C1,  0xC94C85F2,  0x3E23F645,\n-  0x0C000000,  0x3FF005C5,  0xBB61CBEE,  0xBE3EF8B7,\n-  0x0C000000,  0x3FF005C9,  0x597F2931,  0xBE1F7232,\n-  0x0C000000,  0x3FF005CD,  0xAF5B7345,  0x3E2E9F48,\n-  0x10000000,  0x3FF005D1,  0xED37CD5F,  0xBE397424,\n-  0x10000000,  0x3FF005D5,  0x08775C6B,  0xBE013F43,\n-  0x10000000,  0x3FF005D9,  0x0029D3DB,  0x3E35345A,\n-  0x14000000,  0x3FF005DD,  0xC58C1962,  0xBE335F5D,\n-  0x14000000,  0x3FF005E1,  0x47430E04,  0x3E1073C1,\n-  0x14000000,  0x3FF005E5,  0x4A41E248,  0x3E3BA944,\n-  0x18000000,  0x3FF005E9,  0xB06E888E,  0xBE2974C3,\n-  0x18000000,  0x3FF005ED,  0xDCCD9333,  0x3E25E3FB,\n-  0x1C000000,  0x3FF005F1,  0x5DE27951,  0xBE3D519C,\n-  0x1C000000,  0x3FF005F5,  0xE4464502,  0xBE1614C2,\n-  0x1C000000,  0x3FF005F9,  0xE0DAFE93,  0x3E325740,\n-  0x20000000,  0x3FF005FD,  0x8C1B4C10,  0xBE35BC47,\n-  0x20000000,  0x3FF00601,  0x20686CE9,  0x3E0201B0,\n-  0x20000000,  0x3FF00605,  0x95558B63,  0x3E3A4CB9,\n-  0x24000000,  0x3FF00609,  0xA880A3EB,  0xBE2B2D79,\n-  0x24000000,  0x3FF0060D,  0x9699EEB7,  0x3E252BA5,\n-  0x28000000,  0x3FF00611,  0x880115E1,  0xBE3D2D97,\n-  0x28000000,  0x3FF00615,  0x28A3D788,  0xBE1383EF,\n-  0x28000000,  0x3FF00619,  0x08D6DC23,  0x3E337BA6,\n-  0x2C000000,  0x3FF0061D,  0x0B001A08,  0xBE3417B2,\n-  0x2C000000,  0x3FF00621,  0xF94EB99A,  0x3E1193EF,\n-  0x2C000000,  0x3FF00625,  0x28D3BD3B,  0x3E3CF1B0,\n-  0x30000000,  0x3FF00629,  0x0EFCC982,  0xBE24E32B,\n-  0x30000000,  0x3FF0062D,  0xE2BDA47F,  0x3E2C7655,\n-  0x34000000,  0x3FF00631,  0x689312F8,  0xBE39080E,\n-  0x34000000,  0x3FF00635,  0xA9444DB4,  0xBDCDA0C8,\n-  0x34000000,  0x3FF00639,  0x7B21FE23,  0x3E38A191,\n-  0x38000000,  0x3FF0063D,  0x7E67E1E1,  0xBE2CE32A,\n-  0x38000000,  0x3FF00641,  0x875A71F0,  0x3E251694,\n-  0x3C000000,  0x3FF00645,  0xF838F455,  0xBE3C67CF,\n-  0x3C000000,  0x3FF00649,  0x77274052,  0xBE0A571F,\n-  0x3C000000,  0x3FF0064D,  0x63AAEFA8,  0x3E35E20E,\n-  0x40000000,  0x3FF00651,  0xFC87DA70,  0xBE30E0F8,\n-  0x40000000,  0x3FF00655,  0xE9089AFD,  0x3E20D80B,\n-  0x44000000,  0x3FF00659,  0xC52F03BD,  0xBE3E36F4,\n-  0x44000000,  0x3FF0065D,  0x9680E14E,  0xBE1327A4,\n-  0x44000000,  0x3FF00661,  0xD732468D,  0x3E34B328,\n-  0x48000000,  0x3FF00665,  0xCAB5EF4A,  0xBE31BFBE,\n-  0x48000000,  0x3FF00669,  0xE2A2FBE1,  0x3E1F757F,\n-  0x4C000000,  0x3FF0066D,  0xDAB014DA,  0xBE3E757A,\n-  0x4C000000,  0x3FF00671,  0x02FB3FBB,  0xBE12E13D,\n-  0x4C000000,  0x3FF00675,  0xCA7E298D,  0x3E3514E2,\n-  0x50000000,  0x3FF00679,  0xB4F78B94,  0xBE310DE4,\n-  0x50000000,  0x3FF0067D,  0x89C35D05,  0x3E21BEB4,\n-  0x54000000,  0x3FF00681,  0x43F4895C,  0xBE3D2360,\n-  0x54000000,  0x3FF00685,  0x5BC49ADF,  0xBE08B0A2,\n-  0x54000000,  0x3FF00689,  0x32573159,  0x3E37073E,\n-  0x58000000,  0x3FF0068D,  0x8D0732D2,  0xBE2D96D1,\n-  0x58000000,  0x3FF00691,  0x9BF15E67,  0x3E26E3ED,\n-  0x5C000000,  0x3FF00695,  0x0C3250FB,  0xBE3A40A3,\n-  0x5C000000,  0x3FF00699,  0xFD0AE214,  0x3DBCC9AE,\n-  0x5C000000,  0x3FF0069D,  0x038868A1,  0x3E3A8A3D,\n-  0x60000000,  0x3FF006A1,  0x151D21CE,  0xBE25F092,\n-  0x60000000,  0x3FF006A5,  0x11738C43,  0x3E2F2A6F,\n-  0x64000000,  0x3FF006A9,  0x3E9CE96D,  0xBE35CD41,\n-  0x64000000,  0x3FF006AD,  0x8DBC2918,  0x3E138132,\n-  0x64000000,  0x3FF006B1,  0x32DF4C13,  0x3E3F9DE1,\n-  0x68000000,  0x3FF006B5,  0x3129E0B2,  0xBE16520E,\n-  0x68000000,  0x3FF006B9,  0x69F36A61,  0x3E35491E,\n-  0x6C000000,  0x3FF006BD,  0xCCCABCD4,  0xBE2F9271,\n-  0x6C000000,  0x3FF006C1,  0x0D59B899,  0x3E2668ED,\n-  0x70000000,  0x3FF006C5,  0x4AD435A0,  0xBE39BDD3,\n-  0x70000000,  0x3FF006C9,  0x9191CABB,  0x3DF5FE9A,\n-  0x70000000,  0x3FF006CD,  0x6676850B,  0x3E3C8DAD,\n-  0x74000000,  0x3FF006D1,  0x1D74934A,  0xBE206910,\n-  0x74000000,  0x3FF006D5,  0x4D886478,  0x3E331949,\n-  0x78000000,  0x3FF006D9,  0x80BFBBC2,  0xBE3188DE,\n-  0x78000000,  0x3FF006DD,  0x14DE1719,  0x3E23CA01,\n-  0x7C000000,  0x3FF006E1,  0x8CE98EC0,  0xBE3A9D19,\n-  0x7C000000,  0x3FF006E5,  0xA705A6E7,  0x3DEE1A67,\n-  0x7C000000,  0x3FF006E9,  0xECD5F851,  0x3E3C8EC6,\n-  0x80000000,  0x3FF006ED,  0xE839CE4D,  0xBE1F0CF9,\n-  0x80000000,  0x3FF006F1,  0x0C8CA46A,  0x3E33FAC3,\n-  0x84000000,  0x3FF006F5,  0x7B5703D8,  0xBE303734,\n-  0x84000000,  0x3FF006F9,  0xE490A112,  0x3E274DB5,\n-  0x88000000,  0x3FF006FD,  0xA693A093,  0xBE386B0E,\n-  0x88000000,  0x3FF00701,  0xF0B73DAA,  0x3E0C9875,\n-  0x88000000,  0x3FF00705,  0x2449A944,  0x3E3FA133,\n-  0x8C000000,  0x3FF00709,  0xBFE66C14,  0xBE110285,\n-  0x8C000000,  0x3FF0070D,  0x054EDCBD,  0x3E37ED91,\n-  0x90000000,  0x3FF00711,  0xEFB65924,  0xBE27A86A,\n-  0x90000000,  0x3FF00715,  0x1C8A0CF1,  0x3E307A0B,\n-  0x94000000,  0x3FF00719,  0x397FB1D6,  0xBE3327AD,\n-  0x94000000,  0x3FF0071D,  0x1412B9FB,  0x3E228D43,\n-  0x98000000,  0x3FF00721,  0x94D8FFB0,  0xBE3A3B08,\n-  0x98000000,  0x3FF00725,  0x6ED80040,  0x3E029AA3,\n-  0x98000000,  0x3FF00729,  0x9627250A,  0x3E3EF1B8,\n-  0x9C000000,  0x3FF0072D,  0x5FCB1B09,  0xBE117F70,\n-  0x9C000000,  0x3FF00731,  0x678F0789,  0x3E385E96,\n-  0xA0000000,  0x3FF00735,  0xCEA3485B,  0xBE25A5DF,\n-  0xA0000000,  0x3FF00739,  0xFF6D0303,  0x3E320B90,\n-  0xA4000000,  0x3FF0073D,  0xE03334FF,  0xBE3105E6,\n-  0xA4000000,  0x3FF00741,  0xFB9F056D,  0x3E27F150,\n-  0xA8000000,  0x3FF00745,  0xE28905F4,  0xBE36F8C0,\n-  0xA8000000,  0x3FF00749,  0x0B1407AA,  0x3E189774,\n-  0xAC000000,  0x3FF0074D,  0xCE4493C4,  0xBE3CAB7D,\n-  0xAC000000,  0x3FF00751,  0xCB817D78,  0x3DE265D5,\n-  0xAC000000,  0x3FF00755,  0x7CA8B4E3,  0x3E3DE1E2,\n-  0xB0000000,  0x3FF00759,  0x7D730FC6,  0xBE12FD89,\n-  0xB0000000,  0x3FF0075D,  0x1E4D7759,  0x3E38AF60,\n-  0xB4000000,  0x3FF00761,  0x0CAD84A2,  0xBE23A3AC,\n-  0xB4000000,  0x3FF00765,  0x36B866FD,  0x3E33BCFB,\n-  0xB8000000,  0x3FF00769,  0x4D0667A1,  0xBE2D4858,\n-  0xB8000000,  0x3FF0076D,  0xCBF08E6A,  0x3E2E1567,\n-  0xBC000000,  0x3FF00771,  0x9FD34D05,  0xBE333664,\n-  0xBC000000,  0x3FF00775,  0x9837D6E0,  0x3E253114,\n-  0xC0000000,  0x3FF00779,  0x5238327D,  0xBE37887F,\n-  0xC0000000,  0x3FF0077D,  0x24C8DC90,  0x3E1999FA,\n-  0xC4000000,  0x3FF00781,  0x1DA2F8BE,  0xBE3B9A7C,\n-  0xC4000000,  0x3FF00785,  0xEA50EE6A,  0x3E03A485,\n-  0xC8000000,  0x3FF00789,  0xE204A449,  0xBE3F6C5A,\n-  0xC8000000,  0x3FF0078D,  0x78D5D0F3,  0xBDF3D3EF,\n-  0xC8000000,  0x3FF00791,  0x80B1D66C,  0x3E3D01E4,\n-  0xCC000000,  0x3FF00795,  0xD5149796,  0xBE12BBC1,\n-  0xCC000000,  0x3FF00799,  0x2A8F92F0,  0x3E39B042,\n-  0xD0000000,  0x3FF0079D,  0x6F386487,  0xBE1F820E,\n-  0xD0000000,  0x3FF007A1,  0x3BA3BCDA,  0x3E369EBE,\n-  0xD4000000,  0x3FF007A5,  0x96320652,  0xBE25A3F0,\n-  0xD4000000,  0x3FF007A9,  0xD3FD8FCA,  0x3E33CD58,\n-  0xD8000000,  0x3FF007AD,  0xC62D40B1,  0xBE2B069C,\n-  0xD8000000,  0x3FF007B1,  0x13AC5766,  0x3E313C12,\n-  0xDC000000,  0x3FF007B5,  0x876F3A0B,  0xBE2FE90B,\n-  0xDC000000,  0x3FF007B9,  0x357EDEB8,  0x3E2DD5D4,\n-  0xE0000000,  0x3FF007BD,  0x4CEC957E,  0xBE32259E,\n-  0xE0000000,  0x3FF007C1,  0x128C86C6,  0x3E29B3C2,\n-  0xE4000000,  0x3FF007C5,  0xDEA61608,  0xBE341697,\n-  0xE4000000,  0x3FF007C9,  0xFEA09E70,  0x3E2611ED,\n-  0xE8000000,  0x3FF007CD,  0x58D49AE3,  0xBE35C772,\n-  0xE8000000,  0x3FF007D1,  0x39DA3D42,  0x3E22F058,\n-  0xEC000000,  0x3FF007D5,  0x9B689043,  0xBE37382D,\n-  0xEC000000,  0x3FF007D9,  0x04589AD6,  0x3E204F01,\n-  0xF0000000,  0x3FF007DD,  0x86525259,  0xBE3868C9,\n-  0xF0000000,  0x3FF007E1,  0x3C761DAC,  0x3E1C5BD1,\n-  0xF4000000,  0x3FF007E5,  0xF9822D4C,  0xBE395945,\n-  0xF4000000,  0x3FF007E9,  0x8F4221F9,  0x3E191A1E,\n-  0xF8000000,  0x3FF007ED,  0xD4E85D3A,  0xBE3A09A2,\n-  0xF8000000,  0x3FF007F1,  0x81547225,  0x3E16D8EA,\n-  0xFC000000,  0x3FF007F5,  0xF8750E3B,  0xBE3A79DF,\n-  0xFC000000,  0x3FF007F9,  0x92EC7DE3,  0x3E159835,\n-  0x00000000,  0x3FF007FE,  0x44185C5D,  0xBE3AA9FD } };\n-\n-#endif\n-#endif"}, {"sha": "0ba6b7bb53112124c97a537a07e9cbf0fc4a96e9", "filename": "libgcc-math/dbl-64/ulog.h", "status": "removed", "additions": 0, "deletions": 200, "changes": 200, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fulog.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fulog.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc-math%2Fdbl-64%2Fulog.h?ref=5cd88d6857dffe4f10c834c773c300881ec20e32", "patch": "@@ -1,200 +0,0 @@\n-/*\n- * IBM Accurate Mathematical Library\n- * Written by International Business Machines Corp.\n- * Copyright (C) 2001 Free Software Foundation, Inc.\n- *\n- * This program is free software; you can redistribute it and/or modify\n- * it under the terms of the GNU Lesser General Public License as published by\n- * the Free Software Foundation; either version 2.1 of the License, or\n- * (at your option) any later version.\n- *\n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Lesser General Public License for more details.\n- *\n- * You should have received a copy of the GNU Lesser General Public License\n- * along with this program; if not, write to the Free Software\n- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n- */\n-\n-/******************************************************************/\n-/*                                                                */\n-/* MODULE_NAME:ulog.h                                             */\n-/*                                                                */\n-/* common data and variables prototype and definition             */\n-/******************************************************************/\n-\n-#ifndef ULOG_H\n-#define ULOG_H\n-\n-#ifdef BIG_ENDI\n-  static const number\n-  /* polynomial I */\n-/**/ a2             = {{0xbfe00000, 0x0001aa8f} }, /* -0.500... */\n-/**/ a3             = {{0x3fd55555, 0x55588d2e} }, /*  0.333... */\n-  /* polynomial II */\n-/**/ b0             = {{0x3fd55555, 0x55555555} }, /*  0.333... */\n-/**/ b1             = {{0xbfcfffff, 0xffffffbb} }, /* -0.249... */\n-/**/ b2             = {{0x3fc99999, 0x9999992f} }, /*  0.199... */\n-/**/ b3             = {{0xbfc55555, 0x556503fd} }, /* -0.166... */\n-/**/ b4             = {{0x3fc24924, 0x925b3d62} }, /*  0.142... */\n-/**/ b5             = {{0xbfbffffe, 0x160472fc} }, /* -0.124... */\n-/**/ b6             = {{0x3fbc71c5, 0x25db58ac} }, /*  0.111... */\n-/**/ b7             = {{0xbfb9a4ac, 0x11a2a61c} }, /* -0.100... */\n-/**/ b8             = {{0x3fb75077, 0x0df2b591} }, /*  0.091... */\n-  /* polynomial III */\n-#if 0\n-/**/ c1             = {{0x3ff00000, 0x00000000} }, /*  1        */\n-#endif\n-/**/ c2             = {{0xbfe00000, 0x00000000} }, /* -1/2      */\n-/**/ c3             = {{0x3fd55555, 0x55555555} }, /*  1/3      */\n-/**/ c4             = {{0xbfd00000, 0x00000000} }, /* -1/4      */\n-/**/ c5             = {{0x3fc99999, 0x9999999a} }, /*  1/5      */\n-  /* polynomial IV */\n-/**/ d2             = {{0xbfe00000, 0x00000000} }, /* -1/2      */\n-/**/ dd2            = {{0x00000000, 0x00000000} }, /* -1/2-d2   */\n-/**/ d3             = {{0x3fd55555, 0x55555555} }, /*  1/3      */\n-/**/ dd3            = {{0x3c755555, 0x55555555} }, /*  1/3-d3   */\n-/**/ d4             = {{0xbfd00000, 0x00000000} }, /* -1/4      */\n-/**/ dd4            = {{0x00000000, 0x00000000} }, /* -1/4-d4   */\n-/**/ d5             = {{0x3fc99999, 0x9999999a} }, /*  1/5      */\n-/**/ dd5            = {{0xbc699999, 0x9999999a} }, /*  1/5-d5   */\n-/**/ d6             = {{0xbfc55555, 0x55555555} }, /* -1/6      */\n-/**/ dd6            = {{0xbc655555, 0x55555555} }, /* -1/6-d6   */\n-/**/ d7             = {{0x3fc24924, 0x92492492} }, /*  1/7      */\n-/**/ dd7            = {{0x3c624924, 0x92492492} }, /*  1/7-d7   */\n-/**/ d8             = {{0xbfc00000, 0x00000000} }, /* -1/8      */\n-/**/ dd8            = {{0x00000000, 0x00000000} }, /* -1/8-d8   */\n-/**/ d9             = {{0x3fbc71c7, 0x1c71c71c} }, /*  1/9      */\n-/**/ dd9            = {{0x3c5c71c7, 0x1c71c71c} }, /*  1/9-d9   */\n-/**/ d10            = {{0xbfb99999, 0x9999999a} }, /* -1/10     */\n-/**/ dd10           = {{0x3c599999, 0x9999999a} }, /* -1/10-d10 */\n-/**/ d11            = {{0x3fb745d1, 0x745d1746} }, /*  1/11     */\n-/**/ d12            = {{0xbfb55555, 0x55555555} }, /* -1/12     */\n-/**/ d13            = {{0x3fb3b13b, 0x13b13b14} }, /*  1/13     */\n-/**/ d14            = {{0xbfb24924, 0x92492492} }, /* -1/14     */\n-/**/ d15            = {{0x3fb11111, 0x11111111} }, /*  1/15     */\n-/**/ d16            = {{0xbfb00000, 0x00000000} }, /* -1/16     */\n-/**/ d17            = {{0x3fae1e1e, 0x1e1e1e1e} }, /*  1/17     */\n-/**/ d18            = {{0xbfac71c7, 0x1c71c71c} }, /* -1/18     */\n-/**/ d19            = {{0x3faaf286, 0xbca1af28} }, /*  1/19     */\n-/**/ d20            = {{0xbfa99999, 0x9999999a} }, /* -1/20     */\n-  /* constants    */\n-/**/ zero           = {{0x00000000, 0x00000000} }, /* 0         */\n-/**/ one            = {{0x3ff00000, 0x00000000} }, /* 1         */\n-/**/ half           = {{0x3fe00000, 0x00000000} }, /* 1/2       */\n-/**/ mhalf          = {{0xbfe00000, 0x00000000} }, /* -1/2      */\n-/**/ sqrt_2         = {{0x3ff6a09e, 0x667f3bcc} }, /* sqrt(2)   */\n-/**/ h1             = {{0x3fd2e000, 0x00000000} }, /* 151/2**9  */\n-/**/ h2             = {{0x3f669000, 0x00000000} }, /* 361/2**17 */\n-/**/ delu           = {{0x3f700000, 0x00000000} }, /* 1/2**8    */\n-/**/ delv           = {{0x3ef00000, 0x00000000} }, /* 1/2**16   */\n-/**/ ln2a           = {{0x3fe62e42, 0xfefa3800} }, /* ln(2) 43 bits */\n-/**/ ln2b           = {{0x3d2ef357, 0x93c76730} }, /* ln(2)-ln2a    */\n-/**/ e1             = {{0x3bbcc868, 0x00000000} }, /* 6.095e-21     */\n-/**/ e2             = {{0x3c1138ce, 0x00000000} }, /* 2.334e-19     */\n-/**/ e3             = {{0x3aa1565d, 0x00000000} }, /* 2.801e-26     */\n-/**/ e4             = {{0x39809d88, 0x00000000} }, /* 1.024e-31     */\n-/**/ e[M]           ={{{0x37da223a, 0x00000000} }, /* 1.2e-39       */\n-/**/                  {{0x35c851c4, 0x00000000} }, /* 1.3e-49       */\n-/**/                  {{0x2ab85e51, 0x00000000} }, /* 6.8e-103      */\n-/**/                  {{0x17383827, 0x00000000} }},/* 8.1e-197      */\n-/**/ two54          = {{0x43500000, 0x00000000} }, /* 2**54         */\n-/**/ u03            = {{0x3f9eb851, 0xeb851eb8} }; /* 0.03          */\n-\n-#else\n-#ifdef LITTLE_ENDI\n-  static const number\n-  /* polynomial I */\n-/**/ a2             = {{0x0001aa8f, 0xbfe00000} }, /* -0.500... */\n-/**/ a3             = {{0x55588d2e, 0x3fd55555} }, /*  0.333... */\n-  /* polynomial II */\n-/**/ b0             = {{0x55555555, 0x3fd55555} }, /*  0.333... */\n-/**/ b1             = {{0xffffffbb, 0xbfcfffff} }, /* -0.249... */\n-/**/ b2             = {{0x9999992f, 0x3fc99999} }, /*  0.199... */\n-/**/ b3             = {{0x556503fd, 0xbfc55555} }, /* -0.166... */\n-/**/ b4             = {{0x925b3d62, 0x3fc24924} }, /*  0.142... */\n-/**/ b5             = {{0x160472fc, 0xbfbffffe} }, /* -0.124... */\n-/**/ b6             = {{0x25db58ac, 0x3fbc71c5} }, /*  0.111... */\n-/**/ b7             = {{0x11a2a61c, 0xbfb9a4ac} }, /* -0.100... */\n-/**/ b8             = {{0x0df2b591, 0x3fb75077} }, /*  0.091... */\n-  /* polynomial III */\n-#if 0\n-/**/ c1             = {{0x00000000, 0x3ff00000} }, /*  1        */\n-#endif\n-/**/ c2             = {{0x00000000, 0xbfe00000} }, /* -1/2      */\n-/**/ c3             = {{0x55555555, 0x3fd55555} }, /*  1/3      */\n-/**/ c4             = {{0x00000000, 0xbfd00000} }, /* -1/4      */\n-/**/ c5             = {{0x9999999a, 0x3fc99999} }, /*  1/5      */\n-  /* polynomial IV */\n-/**/ d2             = {{0x00000000, 0xbfe00000} }, /* -1/2      */\n-/**/ dd2            = {{0x00000000, 0x00000000} }, /* -1/2-d2   */\n-/**/ d3             = {{0x55555555, 0x3fd55555} }, /*  1/3      */\n-/**/ dd3            = {{0x55555555, 0x3c755555} }, /*  1/3-d3   */\n-/**/ d4             = {{0x00000000, 0xbfd00000} }, /* -1/4      */\n-/**/ dd4            = {{0x00000000, 0x00000000} }, /* -1/4-d4   */\n-/**/ d5             = {{0x9999999a, 0x3fc99999} }, /*  1/5      */\n-/**/ dd5            = {{0x9999999a, 0xbc699999} }, /*  1/5-d5   */\n-/**/ d6             = {{0x55555555, 0xbfc55555} }, /* -1/6      */\n-/**/ dd6            = {{0x55555555, 0xbc655555} }, /* -1/6-d6   */\n-/**/ d7             = {{0x92492492, 0x3fc24924} }, /*  1/7      */\n-/**/ dd7            = {{0x92492492, 0x3c624924} }, /*  1/7-d7   */\n-/**/ d8             = {{0x00000000, 0xbfc00000} }, /* -1/8      */\n-/**/ dd8            = {{0x00000000, 0x00000000} }, /* -1/8-d8   */\n-/**/ d9             = {{0x1c71c71c, 0x3fbc71c7} }, /*  1/9      */\n-/**/ dd9            = {{0x1c71c71c, 0x3c5c71c7} }, /*  1/9-d9   */\n-/**/ d10            = {{0x9999999a, 0xbfb99999} }, /* -1/10     */\n-/**/ dd10           = {{0x9999999a, 0x3c599999} }, /* -1/10-d10 */\n-/**/ d11            = {{0x745d1746, 0x3fb745d1} }, /*  1/11     */\n-/**/ d12            = {{0x55555555, 0xbfb55555} }, /* -1/12     */\n-/**/ d13            = {{0x13b13b14, 0x3fb3b13b} }, /*  1/13     */\n-/**/ d14            = {{0x92492492, 0xbfb24924} }, /* -1/14     */\n-/**/ d15            = {{0x11111111, 0x3fb11111} }, /*  1/15     */\n-/**/ d16            = {{0x00000000, 0xbfb00000} }, /* -1/16     */\n-/**/ d17            = {{0x1e1e1e1e, 0x3fae1e1e} }, /*  1/17     */\n-/**/ d18            = {{0x1c71c71c, 0xbfac71c7} }, /* -1/18     */\n-/**/ d19            = {{0xbca1af28, 0x3faaf286} }, /*  1/19     */\n-/**/ d20            = {{0x9999999a, 0xbfa99999} }, /* -1/20     */\n-  /* constants    */\n-/**/ zero           = {{0x00000000, 0x00000000} }, /* 0         */\n-/**/ one            = {{0x00000000, 0x3ff00000} }, /* 1         */\n-/**/ half           = {{0x00000000, 0x3fe00000} }, /* 1/2       */\n-/**/ mhalf          = {{0x00000000, 0xbfe00000} }, /* -1/2      */\n-/**/ sqrt_2         = {{0x667f3bcc, 0x3ff6a09e} }, /* sqrt(2)   */\n-/**/ h1             = {{0x00000000, 0x3fd2e000} }, /* 151/2**9  */\n-/**/ h2             = {{0x00000000, 0x3f669000} }, /* 361/2**17 */\n-/**/ delu           = {{0x00000000, 0x3f700000} }, /* 1/2**8    */\n-/**/ delv           = {{0x00000000, 0x3ef00000} }, /* 1/2**16   */\n-/**/ ln2a           = {{0xfefa3800, 0x3fe62e42} }, /* ln(2) 43 bits */\n-/**/ ln2b           = {{0x93c76730, 0x3d2ef357} }, /* ln(2)-ln2a    */\n-/**/ e1             = {{0x00000000, 0x3bbcc868} }, /* 6.095e-21     */\n-/**/ e2             = {{0x00000000, 0x3c1138ce} }, /* 2.334e-19     */\n-/**/ e3             = {{0x00000000, 0x3aa1565d} }, /* 2.801e-26     */\n-/**/ e4             = {{0x00000000, 0x39809d88} }, /* 1.024e-31     */\n-/**/ e[M]           ={{{0x00000000, 0x37da223a} }, /* 1.2e-39       */\n-/**/                  {{0x00000000, 0x35c851c4} }, /* 1.3e-49       */\n-/**/                  {{0x00000000, 0x2ab85e51} }, /* 6.8e-103      */\n-/**/                  {{0x00000000, 0x17383827} }},/* 8.1e-197      */\n-/**/ two54          = {{0x00000000, 0x43500000} }, /* 2**54         */\n-/**/ u03            = {{0xeb851eb8, 0x3f9eb851} }; /* 0.03          */\n-\n-#endif\n-#endif\n-\n-#define  ZERO      zero.d\n-#define  ONE       one.d\n-#define  HALF      half.d\n-#define  MHALF     mhalf.d\n-#define  SQRT_2    sqrt_2.d\n-#define  DEL_U     delu.d\n-#define  DEL_V     delv.d\n-#define  LN2A      ln2a.d\n-#define  LN2B      ln2b.d\n-#define  E1        e1.d\n-#define  E2        e2.d\n-#define  E3        e3.d\n-#define  E4        e4.d\n-#define  U03       u03.d\n-\n-#endif"}, {"sha": "41aed931fb47da0d19fcb5b55ead990854de0c98", "filename": "libgcc-math/dbl-64/ulog.tbl", "status": "removed", "additions": 0, "deletions": 3327, "changes": 3327, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fulog.tbl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fulog.tbl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc-math%2Fdbl-64%2Fulog.tbl?ref=5cd88d6857dffe4f10c834c773c300881ec20e32"}, {"sha": "1db748319dc04b2dabd7360d1f90f397c96b8ace", "filename": "libgcc-math/dbl-64/upow.h", "status": "removed", "additions": 0, "deletions": 81, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fupow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fupow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc-math%2Fdbl-64%2Fupow.h?ref=5cd88d6857dffe4f10c834c773c300881ec20e32", "patch": "@@ -1,81 +0,0 @@\n-/*\n- * IBM Accurate Mathematical Library\n- * Written by International Business Machines Corp.\n- * Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n- *\n- * This program is free software; you can redistribute it and/or modify\n- * it under the terms of the GNU Lesser General Public License as published by\n- * the Free Software Foundation; either version 2.1 of the License, or\n- * (at your option) any later version.\n- *\n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Lesser General Public License for more details.\n- *\n- * You should have received a copy of the GNU Lesser General Public License\n- * along with this program; if not, write to the Free Software\n- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n- */\n-\n-/******************************************************************/\n-/*                                                                */\n-/* MODULE_NAME:upow.h                                             */\n-/*                                                                */\n-/* common data and variables prototype and definition             */\n-/******************************************************************/\n-\n-#ifndef UPOW_H\n-#define UPOW_H\n-\n-#include \"mydefs.h\"\n-\n-#ifdef BIG_ENDI\n-  const static mynumber\n-/**/ nZERO\t    = {{0x80000000, 0}},\t  /* -0.0          */\n-/**/ INF            = {{0x7ff00000, 0x00000000}}, /* INF           */\n-/**/ nINF           = {{0xfff00000, 0x00000000}}, /* -INF          */\n-/**/ NaNQ           = {{0x7ff80000, 0x00000000}}, /* NaNQ          */\n-/**/ sqrt_2         = {{0x3ff6a09e, 0x667f3bcc}}, /* sqrt(2)       */\n-/**/ ln2a           = {{0x3fe62e42, 0xfefa3800}}, /* ln(2) 43 bits */\n-/**/ ln2b           = {{0x3d2ef357, 0x93c76730}}, /* ln(2)-ln2a    */\n-/**/ bigu           = {{0x4297ffff, 0xfffffd2c}}, /* 1.5*2**42 -724*2**-10  */\n-/**/ bigv           = {{0x4207ffff, 0xfff8016a}}, /* 1.5*2**33-1+362*2**-19  */\n-/**/ t52            = {{0x43300000, 0x00000000}}, /* 2**52         */\n-/**/ two52e         = {{0x43300000, 0x000003ff}}; /* 2**52'        */\n-\n-#else\n-#ifdef LITTLE_ENDI\n-  const static mynumber\n-/**/ nZERO\t    = {{0, 0x80000000}},\t  /* -0.0          */\n-/**/ INF            = {{0x00000000, 0x7ff00000}}, /* INF           */\n-/**/ nINF           = {{0x00000000, 0xfff00000}}, /* -INF           */\n-/**/ NaNQ           = {{0x00000000, 0x7ff80000}}, /* NaNQ          */\n-/**/ sqrt_2         = {{0x667f3bcc, 0x3ff6a09e}}, /* sqrt(2)       */\n-/**/ ln2a           = {{0xfefa3800, 0x3fe62e42}}, /* ln(2) 43 bits */\n-/**/ ln2b           = {{0x93c76730, 0x3d2ef357}}, /* ln(2)-ln2a    */\n-/**/ bigu           = {{0xfffffd2c, 0x4297ffff}}, /* 1.5*2**42 -724*2**-10  */\n-/**/ bigv           = {{0xfff8016a, 0x4207ffff}}, /* 1.5*2**33-1+362*2**-19  */\n-/**/ t52            = {{0x00000000, 0x43300000}}, /* 2**52         */\n-/**/ two52e         = {{0x000003ff, 0x43300000}}; /* 2**52'        */\n-\n-#endif\n-#endif\n-\n-const static double p2=-0.5, p3 =  3.3333333333333333333e-1, p4 = -0.25,\n-  q2 = -0.5, q3 = 3.3333333333331404e-01, q4 =  -2.4999999999996436e-01,\n-  q5 =  2.0000010500004459e-01, q6 =  -1.6666678916688004e-01,\n-  r3 =  3.33333333333333333372884096563030E-01,\n-  r4 = -2.50000000000000000213574153875908E-01,\n-  r5 =  1.99999999999683593814072199830603E-01,\n-  r6 = -1.66666666666065494878165510225378E-01,\n-  r7 =  1.42857517857114380606360005067609E-01,\n-  r8 = -1.25000449999974370683775964001702E-01,\n-  s3 =  0.333251953125000000e0,\n- ss3 =  8.138020833333333333e-05,\n-  s4 = -2.500000000000000000e-01,\n-  s5 =  1.999999999999960937e-01,\n-  s6 = -1.666666666666592447e-01,\n-  s7 =  1.428571845238194705e-01,\n-  s8 = -1.250000500000149097e-01;\n-#endif"}, {"sha": "acad6bcc894f5fa80c893abdd8fcf2cc0aa63d1b", "filename": "libgcc-math/dbl-64/upow.tbl", "status": "removed", "additions": 0, "deletions": 10189, "changes": 10189, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fupow.tbl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fupow.tbl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc-math%2Fdbl-64%2Fupow.tbl?ref=5cd88d6857dffe4f10c834c773c300881ec20e32"}, {"sha": "3713dd90d8a73467812ca00bfedf05d621d03d74", "filename": "libgcc-math/dbl-64/urem.h", "status": "removed", "additions": 0, "deletions": 51, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Furem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Furem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc-math%2Fdbl-64%2Furem.h?ref=5cd88d6857dffe4f10c834c773c300881ec20e32", "patch": "@@ -1,51 +0,0 @@\n-/*\n- * IBM Accurate Mathematical Library\n- * Written by International Business Machines Corp.\n- * Copyright (C) 2001 Free Software Foundation, Inc.\n- *\n- * This program is free software; you can redistribute it and/or modify\n- * it under the terms of the GNU Lesser General Public License as published by\n- * the Free Software Foundation; either version 2.1 of the License, or\n- * (at your option) any later version.\n- *\n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Lesser General Public License for more details.\n- *\n- * You should have received a copy of the GNU Lesser General Public License\n- * along with this program; if not, write to the Free Software\n- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n- */\n-\n-/************************************************************************/\n-/*  MODULE_NAME: urem.h                                                 */\n-/*                                                                      */\n-/*                                                                      */\n-/* \tcommon data and variables definition for BIG or LITTLE ENDIAN   */\n-/************************************************************************/\n-\n-#ifndef UREM_H\n-#define UREM_H\n-\n-#ifdef BIG_ENDI\n-static const mynumber big = {{0x43380000, 0}},  /* 6755399441055744 */\n-                     t128 = {{0x47f00000, 0}},  /*  2^ 128          */\n-                    tm128 = {{0x37f00000, 0}},  /*  2^-128          */\n-                      ZERO = {{0, 0}},          /*  0.0             */\n-                     nZERO = {{0x80000000, 0}}, /* -0.0             */\n-                       NAN = {{0x7ff80000, 0}}, /*  NaN             */\n-                      nNAN = {{0xfff80000, 0}}; /* -NaN             */\n-#else\n-#ifdef LITTLE_ENDI\n-static const mynumber big = {{0, 0x43380000}},  /* 6755399441055744 */\n-                     t128 = {{0, 0x47f00000}},  /*  2^ 128          */\n-                    tm128 = {{0, 0x37f00000}},  /*  2^-128          */\n-                      ZERO = {{0, 0}},          /*  0.0             */\n-                     nZERO = {{0, 0x80000000}}, /* -0.0             */\n-                       NAN = {{0, 0x7ff80000}}, /*  NaN             */\n-                      nNAN = {{0, 0xfff80000}}; /* -NaN             */\n-#endif\n-#endif\n-\n-#endif"}, {"sha": "02b74cb262ebe27b333b133ca40148af0aa06f8c", "filename": "libgcc-math/dbl-64/uroot.h", "status": "removed", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Furoot.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Furoot.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc-math%2Fdbl-64%2Furoot.h?ref=5cd88d6857dffe4f10c834c773c300881ec20e32", "patch": "@@ -1,44 +0,0 @@\n-/*\n- * IBM Accurate Mathematical Library\n- * Written by International Business Machines Corp.\n- * Copyright (C) 2001 Free Software Foundation, Inc.\n- *\n- * This program is free software; you can redistribute it and/or modify\n- * it under the terms of the GNU Lesser General Public License as published by\n- * the Free Software Foundation; either version 2.1 of the License, or\n- * (at your option) any later version.\n- *\n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Lesser General Public License for more details.\n- *\n- * You should have received a copy of the GNU Lesser General Public License\n- * along with this program; if not, write to the Free Software\n- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n- */\n-\n-/******************************************************************/\n-/*                                                                */\n-/* MODULE_NAME:uroot.h                                            */\n-/*                                                                */\n-/* common data and variables prototype and definition             */\n-/******************************************************************/\n-\n-#ifndef UROOT_H\n-#define UROOT_H\n-\n-#ifdef BIG_ENDI\n- static const  mynumber\n-/**/           t512 = {{0x5ff00000, 0x00000000 }},  /* 2^512  */\n-/**/          tm256 = {{0x2ff00000, 0x00000000 }};  /* 2^-256 */\n-\n-#else\n-#ifdef LITTLE_ENDI\n- static const  mynumber\n-/**/           t512 = {{0x00000000, 0x5ff00000 }}, /* 2^512  */\n-/**/          tm256 = {{0x00000000, 0x2ff00000 }}; /* 2^-256 */\n-#endif\n-#endif\n-\n-#endif"}, {"sha": "6c80f0cf958df322ad5eef9b4da85ea91f94cf08", "filename": "libgcc-math/dbl-64/usncs.h", "status": "removed", "additions": 0, "deletions": 80, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fusncs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Fusncs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc-math%2Fdbl-64%2Fusncs.h?ref=5cd88d6857dffe4f10c834c773c300881ec20e32", "patch": "@@ -1,80 +0,0 @@\n-/*\n- * IBM Accurate Mathematical Library\n- * Written by International Business Machines Corp.\n- * Copyright (C) 2001 Free Software Foundation, Inc.\n- *\n- * This program is free software; you can redistribute it and/or modify\n- * it under the terms of the GNU Lesser General Public License as published by\n- * the Free Software Foundation; either version 2.1 of the License, or\n- * (at your option) any later version.\n- *\n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Lesser General Public License for more details.\n- *\n- * You should have received a copy of the GNU Lesser General Public License\n- * along with this program; if not, write to the Free Software\n- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n- */\n-\n-/************************************************************************/\n-/*  MODULE_NAME: dosincos.h                                             */\n-/*                                                                      */\n-/*                                                                      */\n-/* \tcommon data and variables definition for BIG or LITTLE ENDIAN   */\n-/************************************************************************/\n-\n-#ifndef USNCS_H\n-#define USNCS_H\n-\n-#ifdef BIG_ENDI\n-static const mynumber\n-\n-/**/          NAN = {{0x7ff80000, 0x00000000 }}, /*  NaN                     */\n-/**/           s1 = {{0xBFC55555, 0x55555555 }}, /* -0.16666666666666666     */\n-/**/           s2 = {{0x3F811111, 0x11110ECE }}, /*  0.0083333333333323288   */\n-/**/           s3 = {{0xBF2A01A0, 0x19DB08B8 }}, /* -0.00019841269834414642  */\n-/**/           s4 = {{0x3EC71DE2, 0x7B9A7ED9 }}, /*  2.755729806860771e-06   */\n-/**/           s5 = {{0xBE5ADDFF, 0xC2FCDF59 }}, /* -2.5022014848318398e-08  */\n-/**/           aa = {{0xBFC55580, 0x00000000 }}, /* -0.1666717529296875      */\n-/**/           bb = {{0x3ED55555, 0x55556E24 }}, /*  5.0862630208387126e-06  */\n-/**/          big = {{0x42c80000, 0x00000000 }}, /*  52776558133248          */\n-/**/          hp0 = {{0x3FF921FB, 0x54442D18 }}, /*  1.5707963267948966      */\n-/**/          hp1 = {{0x3C91A626, 0x33145C07 }}, /*  6.123233995736766e-17   */\n-/**/          mp1 = {{0x3FF921FB, 0x58000000 }}, /*  1.5707963407039642      */\n-/**/          mp2 = {{0xBE4DDE97, 0x3C000000 }}, /* -1.3909067564377153e-08  */\n-/**/          mp3 = {{0xBC8CB3B3, 0x99D747F2 }}, /* -4.9789962505147994e-17  */\n-/**/          pp3 = {{0xBC8CB3B3, 0x98000000 }}, /* -4.9789962314799099e-17  */\n-/**/          pp4 = {{0xbacd747f, 0x23e32ed7 }}, /* -1.9034889620193266e-25  */\n-/**/        hpinv = {{0x3FE45F30, 0x6DC9C883 }}, /*  0.63661977236758138     */\n-/**/        toint = {{0x43380000, 0x00000000 }}; /*  6755399441055744        */\n-\n-#else\n-#ifdef LITTLE_ENDI\n-static const mynumber\n-\n-/**/          NAN = {{0x00000000, 0x7ff80000 }},/*  NaN                     */\n-/**/           s1 = {{0x55555555, 0xBFC55555 }},/* -0.16666666666666666     */\n-/**/           s2 = {{0x11110ECE, 0x3F811111 }},/*  0.0083333333333323288   */\n-/**/           s3 = {{0x19DB08B8, 0xBF2A01A0 }},/* -0.00019841269834414642  */\n-/**/           s4 = {{0x7B9A7ED9, 0x3EC71DE2 }},/*  2.755729806860771e-06   */\n-/**/           s5 = {{0xC2FCDF59, 0xBE5ADDFF }},/* -2.5022014848318398e-08  */\n-/**/           aa = {{0x00000000, 0xBFC55580 }},/* -0.1666717529296875      */\n-/**/           bb = {{0x55556E24, 0x3ED55555 }},/*  5.0862630208387126e-06  */\n-/**/          big = {{0x00000000, 0x42c80000 }},/*  52776558133248          */\n-/**/          hp0 = {{0x54442D18, 0x3FF921FB }},/*  1.5707963267948966      */\n-/**/          hp1 = {{0x33145C07, 0x3C91A626 }},/*  6.123233995736766e-17   */\n-/**/          mp1 = {{0x58000000, 0x3FF921FB }},/*  1.5707963407039642      */\n-/**/          mp2 = {{0x3C000000, 0xBE4DDE97 }},/* -1.3909067564377153e-08  */\n-/**/          mp3 = {{0x99D747F2, 0xBC8CB3B3 }},/* -4.9789962505147994e-17  */\n-/**/          pp3 = {{0x98000000, 0xBC8CB3B3 }},/* -4.9789962314799099e-17  */\n-/**/          pp4 = {{0x23e32ed7, 0xbacd747f }},/* -1.9034889620193266e-25  */\n-/**/        hpinv = {{0x6DC9C883, 0x3FE45F30 }},/*  0.63661977236758138     */\n-/**/        toint = {{0x00000000, 0x43380000 }};/*  6755399441055744        */\n-\n-\n-#endif\n-#endif\n-\n-#endif"}, {"sha": "c866e88edc8c0e633d2776fd594b6785304900d6", "filename": "libgcc-math/dbl-64/utan.h", "status": "removed", "additions": 0, "deletions": 280, "changes": 280, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Futan.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Futan.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc-math%2Fdbl-64%2Futan.h?ref=5cd88d6857dffe4f10c834c773c300881ec20e32", "patch": "@@ -1,280 +0,0 @@\n-/*\n- * IBM Accurate Mathematical Library\n- * Written by International Business Machines Corp.\n- * Copyright (C) 2001 Free Software Foundation, Inc.\n- *\n- * This program is free software; you can redistribute it and/or modify\n- * it under the terms of the GNU Lesser General Public License as published by\n- * the Free Software Foundation; either version 2.1 of the License, or\n- * (at your option) any later version.\n- *\n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Lesser General Public License for more details.\n- *\n- * You should have received a copy of the GNU Lesser General Public License\n- * along with this program; if not, write to the Free Software\n- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n- */\n-\n-/******************************************************************/\n-/*                                                                */\n-/* MODULE_NAME:utan.h                                             */\n-/*                                                                */\n-/* common data and variables prototype and definition             */\n-/******************************************************************/\n-\n-#ifndef UTAN_H\n-#define UTAN_H\n-\n-#ifdef BIG_ENDI\n-  static const number\n-  /* polynomial I */\n-/**/ d3             = {{0x3FD55555, 0x55555555} }, /*  0.333... */\n-/**/ d5             = {{0x3FC11111, 0x111107C6} }, /*  0.133... */\n-/**/ d7             = {{0x3FABA1BA, 0x1CDB8745} }, /*    .      */\n-/**/ d9             = {{0x3F9664ED, 0x49CFC666} }, /*    .      */\n-/**/ d11            = {{0x3F82385A, 0x3CF2E4EA} }, /*    .      */\n-  /* polynomial II */\n-/**/ a3             = {{0x3fd55555, 0x55555555} }, /*  1/3      */\n-/**/ aa3            = {{0x3c755555, 0x55555555} }, /*  1/3-a3   */\n-/**/ a5             = {{0x3fc11111, 0x11111111} }, /*  2/15     */\n-/**/ aa5            = {{0x3c411111, 0x11111111} }, /*  2/15-a5  */\n-/**/ a7             = {{0x3faba1ba, 0x1ba1ba1c} }, /*  17/315   */\n-/**/ aa7            = {{0xbc479179, 0x17917918} }, /*   ()-a7   */\n-/**/ a9             = {{0x3f9664f4, 0x882c10fa} }, /*  62/2835  */\n-/**/ aa9            = {{0xbc09a528, 0x8b6c44fd} }, /*   ()-a9   */\n-/**/ a11            = {{0x3f8226e3, 0x55e6c23d} }, /*    .      */\n-/**/ aa11           = {{0xbc2c292b, 0x8f1a2c13} }, /*    .      */\n-/**/ a13            = {{0x3f6d6d3d, 0x0e157de0} }, /*    .      */\n-/**/ aa13           = {{0xbc0280cf, 0xc968d971} }, /*    .      */\n-/**/ a15            = {{0x3f57da36, 0x452b75e3} }, /*    .      */\n-#if 0\n-/**/ aa15           = {{0xbbf25789, 0xb285d2ed} }, /*    .      */\n-#endif\n-/**/ a17            = {{0x3f435582, 0x48036744} }, /*    .      */\n-#if 0\n-/**/ aa17           = {{0x3be488d9, 0x563f1f23} }, /*    .      */\n-#endif\n-/**/ a19            = {{0x3f2f57d7, 0x734d1664} }, /*    .      */\n-#if 0\n-/**/ aa19           = {{0x3bb0d55a, 0x913ccb50} }, /*    .      */\n-#endif\n-/**/ a21            = {{0x3f1967e1, 0x8afcafad} }, /*    .      */\n-#if 0\n-/**/ aa21           = {{0xbbbd7614, 0xa42d44e6} }, /*    .      */\n-#endif\n-/**/ a23            = {{0x3f0497d8, 0xeea25259} }, /*    .      */\n-#if 0\n-/**/ aa23           = {{0x3b99f2d0, 0x2e4d2863} }, /*    .      */\n-#endif\n-/**/ a25            = {{0x3ef0b132, 0xd39a6050} }, /*    .      */\n-#if 0\n-/**/ aa25           = {{0x3b93b274, 0xc2c19614} }, /*    .      */\n-#endif\n-/**/ a27            = {{0x3edb0f72, 0xd3ee24e9} }, /*    .      */\n-#if 0\n-/**/ aa27           = {{0x3b61688d, 0xdd595609} }, /*    .      */\n-#endif\n-  /* polynomial III */\n-/**/ e0             = {{0x3FD55555, 0x55554DBD} }, /*    .      */\n-/**/ e1             = {{0x3FC11112, 0xE0A6B45F} }, /*    .      */\n-\n-  /* constants    */\n-/**/ zero           = {{0x00000000, 0x00000000} }, /* 0         */\n-/**/ one            = {{0x3ff00000, 0x00000000} }, /* 1         */\n-/**/ mone           = {{0xbff00000, 0x00000000} }, /*-1         */\n-/**/ mfftnhf        = {{0xc02f0000, 0x00000000} }, /*-15.5      */\n-/**/ two8           = {{0x40700000, 0x00000000} }, /* 256       */\n-\n-/**/ g1             = {{0x3e4b096c, 0x00000000} }, /* 1.259e-8  */\n-/**/ g2             = {{0x3faf212d, 0x00000000} }, /* 0.0608    */\n-/**/ g3             = {{0x3fe92f1a, 0x00000000} }, /* 0.787     */\n-/**/ g4             = {{0x40390000, 0x00000000} }, /* 25.0      */\n-/**/ g5             = {{0x4197d784, 0x00000000} }, /* 1e8       */\n-/**/ gy1            = {{0x3e7ad7f2, 0x9abcaf48} }, /* 1e-7      */\n-/**/ gy2            = {{0x3faf212d, 0x00000000} }, /* 0.0608    */\n-\n-/**/ u1             = {{0x3cc8c33a, 0x00000000} }, /* 6.873e-16 */\n-/**/ u2             = {{0x3983dc4d, 0x00000000} }, /* 1.224e-31 */\n-/**/ u3             = {{0x3c78e14b, 0x00000000} }, /* 2.158e-17 */\n-/**/ ua3            = {{0x3bfd8b58, 0x00000000} }, /* 1.001e-19 */\n-/**/ ub3            = {{0x3cc81898, 0x00000000} }, /* 6.688e-16 */\n-/**/ u4             = {{0x399856c2, 0x00000000} }, /* 3e-31     */\n-/**/ u5             = {{0x3c39d80a, 0x00000000} }, /* 1.401e-18 */\n-/**/ u6             = {{0x3c374c5a, 0x00000000} }, /* 1.263e-18 */\n-/**/ u7             = {{0x39903beb, 0x00000000} }, /* 2.001e-31 */\n-/**/ u8             = {{0x399c56ae, 0x00000000} }, /* 3.493e-31 */\n-/**/ u9             = {{0x3c7d0ac7, 0x00000000} }, /* 2.519e-17 */\n-/**/ ua9            = {{0x3bfd8b58, 0x00000000} }, /* 1.001e-19 */\n-/**/ ub9            = {{0x3ccc2375, 0x00000000} }, /* 7.810e-16 */\n-/**/ u10            = {{0x3c7e40af, 0x00000000} }, /* 2.624e-17 */\n-/**/ ua10           = {{0x3bfd8b58, 0x00000000} }, /* 1.001e-19 */\n-/**/ ub10           = {{0x3ccc6405, 0x00000000} }, /* 7.880e-16 */\n-/**/ u11            = {{0x39e509b6, 0x00000000} }, /* 8.298e-30 */\n-/**/ u12            = {{0x39e509b6, 0x00000000} }, /* 8.298e-30 */\n-/**/ u13            = {{0x3c39d80a, 0x00000000} }, /* 1.401e-18 */\n-/**/ u14            = {{0x3c374c5a, 0x00000000} }, /* 1.263e-18 */\n-/**/ u15            = {{0x3ab5767a, 0x00000000} }, /* 6.935e-26 */\n-/**/ u16            = {{0x3ab57744, 0x00000000} }, /* 6.936e-26 */\n-/**/ u17            = {{0x3c7d0ac7, 0x00000000} }, /* 2.519e-17 */\n-/**/ ua17           = {{0x3bfdb11f, 0x00000000} }, /* 1.006e-19 */\n-/**/ ub17           = {{0x3ccc2375, 0x00000000} }, /* 7.810e-16 */\n-/**/ u18            = {{0x3c7e40af, 0x00000000} }, /* 2.624e-17 */\n-/**/ ua18           = {{0x3bfdb11f, 0x00000000} }, /* 1.006e-19 */\n-/**/ ub18           = {{0x3ccc6405, 0x00000000} }, /* 7.880e-16 */\n-/**/ u19            = {{0x39a13b61, 0x00000000} }, /* 4.248e-31 */\n-/**/ u20            = {{0x39a13b61, 0x00000000} }, /* 4.248e-31 */\n-/**/ u21            = {{0x3c3bb9b8, 0x00000000} }, /* 1.503e-18 */\n-/**/ u22            = {{0x3c392e08, 0x00000000} }, /* 1.365e-18 */\n-/**/ u23            = {{0x3a0ce706, 0x00000000} }, /* 4.560e-29 */\n-/**/ u24            = {{0x3a0cff5d, 0x00000000} }, /* 4.575e-29 */\n-/**/ u25            = {{0x3c7d0ac7, 0x00000000} }, /* 2.519e-17 */\n-/**/ ua25           = {{0x3bfd8b58, 0x00000000} }, /* 1.001e-19 */\n-/**/ ub25           = {{0x3ccc2375, 0x00000000} }, /* 7.810e-16 */\n-/**/ u26            = {{0x3c7e40af, 0x00000000} }, /* 2.624e-17 */\n-/**/ ua26           = {{0x3bfd8b58, 0x00000000} }, /* 1.001e-19 */\n-/**/ ub26           = {{0x3ccc6405, 0x00000000} }, /* 7.880e-16 */\n-/**/ u27            = {{0x3ad421cb, 0x00000000} }, /* 2.602e-25 */\n-/**/ u28            = {{0x3ad421cb, 0x00000000} }, /* 2.602e-25 */\n-\n-/**/            mp1 = {{0x3FF921FB, 0x58000000} },\n-/**/            mp2 = {{0xBE4DDE97, 0x3C000000} },\n-/**/            mp3 = {{0xBC8CB3B3, 0x99D747F2} },\n-/**/            pp3 = {{0xBC8CB3B3, 0x98000000} },\n-/**/            pp4 = {{0xbacd747f, 0x23e32ed7} },\n-/**/          hpinv = {{0x3FE45F30, 0x6DC9C883} },\n-/**/          toint = {{0x43380000, 0x00000000} };\n-\n-#else\n-#ifdef LITTLE_ENDI\n-\n-  static const number\n-  /* polynomial I */\n-/**/ d3             = {{0x55555555, 0x3FD55555} }, /*  0.333... */\n-/**/ d5             = {{0x111107C6, 0x3FC11111} }, /*  0.133... */\n-/**/ d7             = {{0x1CDB8745, 0x3FABA1BA} }, /*    .      */\n-/**/ d9             = {{0x49CFC666, 0x3F9664ED} }, /*    .      */\n-/**/ d11            = {{0x3CF2E4EA, 0x3F82385A} }, /*    .      */\n-  /* polynomial II */\n-/**/ a3             = {{0x55555555, 0x3fd55555} }, /*  1/3      */\n-/**/ aa3            = {{0x55555555, 0x3c755555} }, /*  1/3-a3   */\n-/**/ a5             = {{0x11111111, 0x3fc11111} }, /*  2/15     */\n-/**/ aa5            = {{0x11111111, 0x3c411111} }, /*  2/15-a5  */\n-/**/ a7             = {{0x1ba1ba1c, 0x3faba1ba} }, /*  17/315   */\n-/**/ aa7            = {{0x17917918, 0xbc479179} }, /*   ()-a7   */\n-/**/ a9             = {{0x882c10fa, 0x3f9664f4} }, /*  62/2835  */\n-/**/ aa9            = {{0x8b6c44fd, 0xbc09a528} }, /*   ()-a9   */\n-/**/ a11            = {{0x55e6c23d, 0x3f8226e3} }, /*    .      */\n-/**/ aa11           = {{0x8f1a2c13, 0xbc2c292b} }, /*    .      */\n-/**/ a13            = {{0x0e157de0, 0x3f6d6d3d} }, /*    .      */\n-/**/ aa13           = {{0xc968d971, 0xbc0280cf} }, /*    .      */\n-/**/ a15            = {{0x452b75e3, 0x3f57da36} }, /*    .      */\n-#if 0\n-/**/ aa15           = {{0xb285d2ed, 0xbbf25789} }, /*    .      */\n-#endif\n-/**/ a17            = {{0x48036744, 0x3f435582} }, /*    .      */\n-#if 0\n-/**/ aa17           = {{0x563f1f23, 0x3be488d9} }, /*    .      */\n-#endif\n-/**/ a19            = {{0x734d1664, 0x3f2f57d7} }, /*    .      */\n-#if 0\n-/**/ aa19           = {{0x913ccb50, 0x3bb0d55a} }, /*    .      */\n-#endif\n-/**/ a21            = {{0x8afcafad, 0x3f1967e1} }, /*    .      */\n-#if 0\n-/**/ aa21           = {{0xa42d44e6, 0xbbbd7614} }, /*    .      */\n-#endif\n-/**/ a23            = {{0xeea25259, 0x3f0497d8} }, /*    .      */\n-#if 0\n-/**/ aa23           = {{0x2e4d2863, 0x3b99f2d0} }, /*    .      */\n-#endif\n-/**/ a25            = {{0xd39a6050, 0x3ef0b132} }, /*    .      */\n-#if 0\n-/**/ aa25           = {{0xc2c19614, 0x3b93b274} }, /*    .      */\n-#endif\n-/**/ a27            = {{0xd3ee24e9, 0x3edb0f72} }, /*    .      */\n-#if 0\n-/**/ aa27           = {{0xdd595609, 0x3b61688d} }, /*    .      */\n-#endif\n-  /* polynomial III */\n-/**/ e0             = {{0x55554DBD, 0x3FD55555} }, /*    .      */\n-/**/ e1             = {{0xE0A6B45F, 0x3FC11112} }, /*    .      */\n-\n-  /* constants    */\n-/**/ zero           = {{0x00000000, 0x00000000} }, /* 0         */\n-/**/ one            = {{0x00000000, 0x3ff00000} }, /* 1         */\n-/**/ mone           = {{0x00000000, 0xbff00000} }, /*-1         */\n-/**/ mfftnhf        = {{0x00000000, 0xc02f0000} }, /*-15.5      */\n-/**/ two8           = {{0x00000000, 0x40700000} }, /* 256       */\n-\n-/**/ g1             = {{0x00000000, 0x3e4b096c} }, /* 1.259e-8  */\n-/**/ g2             = {{0x00000000, 0x3faf212d} }, /* 0.0608    */\n-/**/ g3             = {{0x00000000, 0x3fe92f1a} }, /* 0.787     */\n-/**/ g4             = {{0x00000000, 0x40390000} }, /* 25.0      */\n-/**/ g5             = {{0x00000000, 0x4197d784} }, /* 1e8       */\n-/**/ gy1            = {{0x9abcaf48, 0x3e7ad7f2} }, /* 1e-7      */\n-/**/ gy2            = {{0x00000000, 0x3faf212d} }, /* 0.0608    */\n-\n-/**/ u1             = {{0x00000000, 0x3cc8c33a} }, /* 6.873e-16 */\n-/**/ u2             = {{0x00000000, 0x3983dc4d} }, /* 1.224e-31 */\n-/**/ u3             = {{0x00000000, 0x3c78e14b} }, /* 2.158e-17 */\n-/**/ ua3            = {{0x00000000, 0x3bfd8b58} }, /* 1.001e-19 */\n-/**/ ub3            = {{0x00000000, 0x3cc81898} }, /* 6.688e-16 */\n-/**/ u4             = {{0x00000000, 0x399856c2} }, /* 3e-31     */\n-/**/ u5             = {{0x00000000, 0x3c39d80a} }, /* 1.401e-18 */\n-/**/ u6             = {{0x00000000, 0x3c374c5a} }, /* 1.263e-18 */\n-/**/ u7             = {{0x00000000, 0x39903beb} }, /* 2.001e-31 */\n-/**/ u8             = {{0x00000000, 0x399c56ae} }, /* 3.493e-31 */\n-/**/ u9             = {{0x00000000, 0x3c7d0ac7} }, /* 2.519e-17 */\n-/**/ ua9            = {{0x00000000, 0x3bfd8b58} }, /* 1.001e-19 */\n-/**/ ub9            = {{0x00000000, 0x3ccc2375} }, /* 7.810e-16 */\n-/**/ u10            = {{0x00000000, 0x3c7e40af} }, /* 2.624e-17 */\n-/**/ ua10           = {{0x00000000, 0x3bfd8b58} }, /* 1.001e-19 */\n-/**/ ub10           = {{0x00000000, 0x3ccc6405} }, /* 7.880e-16 */\n-/**/ u11            = {{0x00000000, 0x39e509b6} }, /* 8.298e-30 */\n-/**/ u12            = {{0x00000000, 0x39e509b6} }, /* 8.298e-30 */\n-/**/ u13            = {{0x00000000, 0x3c39d80a} }, /* 1.401e-18 */\n-/**/ u14            = {{0x00000000, 0x3c374c5a} }, /* 1.263e-18 */\n-/**/ u15            = {{0x00000000, 0x3ab5767a} }, /* 6.935e-26 */\n-/**/ u16            = {{0x00000000, 0x3ab57744} }, /* 6.936e-26 */\n-/**/ u17            = {{0x00000000, 0x3c7d0ac7} }, /* 2.519e-17 */\n-/**/ ua17           = {{0x00000000, 0x3bfdb11f} }, /* 1.006e-19 */\n-/**/ ub17           = {{0x00000000, 0x3ccc2375} }, /* 7.810e-16 */\n-/**/ u18            = {{0x00000000, 0x3c7e40af} }, /* 2.624e-17 */\n-/**/ ua18           = {{0x00000000, 0x3bfdb11f} }, /* 1.006e-19 */\n-/**/ ub18           = {{0x00000000, 0x3ccc6405} }, /* 7.880e-16 */\n-/**/ u19            = {{0x00000000, 0x39a13b61} }, /* 4.248e-31 */\n-/**/ u20            = {{0x00000000, 0x39a13b61} }, /* 4.248e-31 */\n-/**/ u21            = {{0x00000000, 0x3c3bb9b8} }, /* 1.503e-18 */\n-/**/ u22            = {{0x00000000, 0x3c392e08} }, /* 1.365e-18 */\n-/**/ u23            = {{0x00000000, 0x3a0ce706} }, /* 4.560e-29 */\n-/**/ u24            = {{0x00000000, 0x3a0cff5d} }, /* 4.575e-29 */\n-/**/ u25            = {{0x00000000, 0x3c7d0ac7} }, /* 2.519e-17 */\n-/**/ ua25           = {{0x00000000, 0x3bfd8b58} }, /* 1.001e-19 */\n-/**/ ub25           = {{0x00000000, 0x3ccc2375} }, /* 7.810e-16 */\n-/**/ u26            = {{0x00000000, 0x3c7e40af} }, /* 2.624e-17 */\n-/**/ ua26           = {{0x00000000, 0x3bfd8b58} }, /* 1.001e-19 */\n-/**/ ub26           = {{0x00000000, 0x3ccc6405} }, /* 7.880e-16 */\n-/**/ u27            = {{0x00000000, 0x3ad421cb} }, /* 2.602e-25 */\n-/**/ u28            = {{0x00000000, 0x3ad421cb} }, /* 2.602e-25 */\n-\n-/**/            mp1 = {{0x58000000, 0x3FF921FB} },\n-/**/            mp2 = {{0x3C000000, 0xBE4DDE97} },\n-/**/            mp3 = {{0x99D747F2, 0xBC8CB3B3} },\n-/**/            pp3 = {{0x98000000, 0xBC8CB3B3} },\n-/**/            pp4 = {{0x23e32ed7, 0xbacd747f} },\n-/**/          hpinv = {{0x6DC9C883, 0x3FE45F30} },\n-/**/          toint = {{0x00000000, 0x43380000} };\n-\n-#endif\n-#endif\n-\n-\n-#define  ZERO      zero.d\n-#define  ONE       one.d\n-#define  MONE      mone.d\n-#define  TWO8      two8.d\n-\n-#endif"}, {"sha": "eb248bada9b51f0f332cc0eb32eee77f85662a30", "filename": "libgcc-math/dbl-64/utan.tbl", "status": "removed", "additions": 0, "deletions": 1526, "changes": 1526, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Futan.tbl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cd88d6857dffe4f10c834c773c300881ec20e32/libgcc-math%2Fdbl-64%2Futan.tbl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc-math%2Fdbl-64%2Futan.tbl?ref=5cd88d6857dffe4f10c834c773c300881ec20e32", "patch": "@@ -1,1526 +0,0 @@\n-/*\n- * IBM Accurate Mathematical Library\n- * Written by International Business Machines Corp.\n- * Copyright (C) 2001 Free Software Foundation, Inc.\n- *\n- * This program is free software; you can redistribute it and/or modify\n- * it under the terms of the GNU Lesser General Public License as published by\n- * the Free Software Foundation; either version 2.1 of the License, or\n- * (at your option) any later version.\n- *\n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Lesser General Public License for more details.\n- *\n- * You should have received a copy of the GNU Lesser General Public License\n- * along with this program; if not, write to the Free Software\n- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n- */\n-\n-/****************************************************************/\n-/* TABLES FOR THE utan() FUNCTION                               */\n-/****************************************************************/\n-\n-\n-#ifdef BIG_ENDI\n-static const number\n-      xfg[186][4] = {                             /* xi,Fi,Gi,FFi, i=16..201 */\n-/**/                 {{{0x3fb00000, 0x1e519d60} },\n-/**/                  {{0x3fb00557, 0x96c4e240} },\n-/**/                  {{0x402ff554, 0x628127b7} },\n-/**/                  {{0xbb9a1dee, 0x9e355b06} },},\n-/**/                 {{{0x3fb10000, 0x1b1a7010} },\n-/**/                  {{0x3fb10668, 0xaab892b7} },\n-/**/                  {{0x402e12c7, 0xbe3fdf74} },\n-/**/                  {{0x3ba89234, 0x037da741} },},\n-/**/                 {{{0x3fb20000, 0x2505e350} },\n-/**/                  {{0x3fb2079b, 0xff547824} },\n-/**/                  {{0x402c65c5, 0xde853633} },\n-/**/                  {{0x3bb7486e, 0xe9614250} },},\n-/**/                 {{{0x3fb2ffff, 0xfcdc4252} },\n-/**/                  {{0x3fb308f3, 0x5eb16c68} },\n-/**/                  {{0x402ae5da, 0xe56be74f} },\n-/**/                  {{0xbb82c726, 0x91a23034} },},\n-/**/                 {{{0x3fb3ffff, 0xe3ff849f} },\n-/**/                  {{0x3fb40a71, 0x154999cc} },\n-/**/                  {{0x40298c43, 0x046b7352} },\n-/**/                  {{0x3b9aceaf, 0x3843738f} },},\n-/**/                 {{{0x3fb4ffff, 0xedc9590f} },\n-/**/                  {{0x3fb50c17, 0x429bdd80} },\n-/**/                  {{0x40285384, 0x91b5d674} },\n-/**/                  {{0xbbc1d02d, 0xb4403d22} },},\n-/**/                 {{{0x3fb60000, 0x00ee83f7} },\n-/**/                  {{0x3fb60de7, 0xda80cc21} },\n-/**/                  {{0x40273724, 0xef21a2a7} },\n-/**/                  {{0xbb95e53c, 0x72523ffd} },},\n-/**/                 {{{0x3fb6ffff, 0xeb05ea41} },\n-/**/                  {{0x3fb70fe4, 0xb8c51bea} },\n-/**/                  {{0x40263370, 0xfae562ff} },\n-/**/                  {{0xbb99ad0e, 0x8ffe0626} },},\n-/**/                 {{{0x3fb7ffff, 0xdc0515f7} },\n-/**/                  {{0x3fb81210, 0x1db54498} },\n-/**/                  {{0x40254553, 0x0e7eab5c} },\n-/**/                  {{0xbb914c87, 0xd62ed686} },},\n-/**/                 {{{0x3fb8ffff, 0xe384d7ab} },\n-/**/                  {{0x3fb9146c, 0x2a8d3727} },\n-/**/                  {{0x40246a33, 0xfd57f3fd} },\n-/**/                  {{0xbbbbda8d, 0x5381e06d} },},\n-/**/                 {{{0x3fb9ffff, 0xe4832347} },\n-/**/                  {{0x3fba16fa, 0xd50e1050} },\n-/**/                  {{0x40239fe2, 0xc5537a96} },\n-/**/                  {{0x3bc7f695, 0xc111eabb} },},\n-/**/                 {{{0x3fbb0000, 0x274540e3} },\n-/**/                  {{0x3fbb19be, 0x7ae68517} },\n-/**/                  {{0x4022e481, 0x3637e946} },\n-/**/                  {{0x3bc307f8, 0x8dbd9d93} },},\n-/**/                 {{{0x3fbbffff, 0xfebf2e9b} },\n-/**/                  {{0x3fbc1cb8, 0x8369cd19} },\n-/**/                  {{0x40223676, 0x17aef223} },\n-/**/                  {{0x3bc50038, 0x424a9cf3} },},\n-/**/                 {{{0x3fbd0000, 0x23529045} },\n-/**/                  {{0x3fbd1feb, 0xc11d7ef7} },\n-/**/                  {{0x4021945f, 0xb8e43d4e} },\n-/**/                  {{0x3b812007, 0x52a6f224} },},\n-/**/                 {{{0x3fbdffff, 0xd872a829} },\n-/**/                  {{0x3fbe2359, 0x8ee4d6b7} },\n-/**/                  {{0x4020fd0c, 0x76195d5f} },\n-/**/                  {{0xbbb4d9ab, 0x85fdca85} },},\n-/**/                 {{{0x3fbeffff, 0xff323b84} },\n-/**/                  {{0x3fbf2704, 0xec9073e5} },\n-/**/                  {{0x40206f71, 0x3020200f} },\n-/**/                  {{0x3bb77aa2, 0x12836992} },},\n-/**/                 {{{0x3fc00000, 0x0ce79195} },\n-/**/                  {{0x3fc01577, 0xbc30cc61} },\n-/**/                  {{0x401fd549, 0xd6564a88} },\n-/**/                  {{0xbbc8926f, 0x965c0ad0} },},\n-/**/                 {{{0x3fc07fff, 0xee40e918} },\n-/**/                  {{0x3fc0978d, 0x8279ac01} },\n-/**/                  {{0x401edbb5, 0x9294bc03} },\n-/**/                  {{0xbb80a533, 0x4aae45d6} },},\n-/**/                 {{{0x3fc10000, 0x0cc091fd} },\n-/**/                  {{0x3fc119c5, 0x44dfb2f7} },\n-/**/                  {{0x401df0bb, 0x067d8e18} },\n-/**/                  {{0xbbcc2c18, 0x4ff642a4} },},\n-/**/                 {{{0x3fc18000, 0x0d9936a1} },\n-/**/                  {{0x3fc19c1f, 0xb9085a4b} },\n-/**/                  {{0x401d131a, 0x71ce3629} },\n-/**/                  {{0xbbc36553, 0x0669355b} },},\n-/**/                 {{{0x3fc1ffff, 0xed5f3188} },\n-/**/                  {{0x3fc21e9d, 0xee74bf2d} },\n-/**/                  {{0x401c41b6, 0xff0cd655} },\n-/**/                  {{0x3b8867f5, 0x478ecfc5} },},\n-/**/                 {{{0x3fc28000, 0x05f06a51} },\n-/**/                  {{0x3fc2a141, 0x550b313f} },\n-/**/                  {{0x401b7b92, 0x1702e6d2} },\n-/**/                  {{0xbbadab51, 0x380131fe} },},\n-/**/                 {{{0x3fc2ffff, 0xfe3d339e} },\n-/**/                  {{0x3fc3240a, 0xa75f76df} },\n-/**/                  {{0x401abfc8, 0xfcb6409d} },\n-/**/                  {{0x3bc60bcf, 0x0d291d83} },},\n-/**/                 {{{0x3fc37fff, 0xed888d6f} },\n-/**/                  {{0x3fc3a6fb, 0x13cc5db7} },\n-/**/                  {{0x401a0d8f, 0x8ed5320d} },\n-/**/                  {{0x3bb8a48e, 0x4eef03ab} },},\n-/**/                 {{{0x3fc40000, 0x02ca050d} },\n-/**/                  {{0x3fc42a13, 0xe25776bb} },\n-/**/                  {{0x4019642d, 0xfa84c2bc} },\n-/**/                  {{0xbbd0bd5d, 0xcc56516f} },},\n-/**/                 {{{0x3fc47fff, 0xf2531f5c} },\n-/**/                  {{0x3fc4ad55, 0xdeb73404} },\n-/**/                  {{0x4018c2fe, 0xf86e9035} },\n-/**/                  {{0x3b9cffe7, 0x5aa287c8} },},\n-/**/                 {{{0x3fc50000, 0x13774992} },\n-/**/                  {{0x3fc530c2, 0x7d0ee307} },\n-/**/                  {{0x4018296c, 0x370caf35} },\n-/**/                  {{0xbbcf75d1, 0xf91d6532} },},\n-/**/                 {{{0x3fc57fff, 0xedddcb2d} },\n-/**/                  {{0x3fc5b45a, 0x5db4347d} },\n-/**/                  {{0x401796ee, 0x52190c0e} },\n-/**/                  {{0x3b88a25f, 0x17d5d076} },},\n-/**/                 {{{0x3fc5ffff, 0xf41949a0} },\n-/**/                  {{0x3fc6381f, 0x13bf986a} },\n-/**/                  {{0x40170b09, 0x2d2255fd} },\n-/**/                  {{0xbb9bfb23, 0xb1bcd5e7} },},\n-/**/                 {{{0x3fc67fff, 0xf834d3a1} },\n-/**/                  {{0x3fc6bc11, 0x8ec85952} },\n-/**/                  {{0x4016854c, 0x62cf2268} },\n-/**/                  {{0x3b9ee53b, 0x82e39e04} },},\n-/**/                 {{{0x3fc6ffff, 0xfd9106ea} },\n-/**/                  {{0x3fc74032, 0xf298f6f7} },\n-/**/                  {{0x40160551, 0x1f4f84a9} },\n-/**/                  {{0xbbb59c4a, 0x112634b8} },},\n-/**/                 {{{0x3fc78000, 0x0f649a4f} },\n-/**/                  {{0x3fc7c484, 0x6ca53abc} },\n-/**/                  {{0x40158ab9, 0x4809d175} },\n-/**/                  {{0x3bc91c75, 0x73d3cd2e} },},\n-/**/                 {{{0x3fc7ffff, 0xef06bbd8} },\n-/**/                  {{0x3fc84906, 0xdf7d76ad} },\n-/**/                  {{0x4015152e, 0xdd2b30a6} },\n-/**/                  {{0xbbbfa2da, 0x084c3eef} },},\n-/**/                 {{{0x3fc88000, 0x021c6334} },\n-/**/                  {{0x3fc8cdbb, 0xd965f986} },\n-/**/                  {{0x4014a462, 0x51b74296} },\n-/**/                  {{0xbb9ec02e, 0x74dcfe0b} },},\n-/**/                 {{{0x3fc8ffff, 0xf38d0756} },\n-/**/                  {{0x3fc952a4, 0x28e173c7} },\n-/**/                  {{0x4014380b, 0x17b59ebd} },\n-/**/                  {{0xbbcd0f1c, 0xb77589f0} },},\n-/**/                 {{{0x3fc98000, 0x104efca1} },\n-/**/                  {{0x3fc9d7c1, 0x4644d23c} },\n-/**/                  {{0x4013cfe5, 0xcb1eabd5} },\n-/**/                  {{0xbbd5d6f7, 0xea188d9e} },},\n-/**/                 {{{0x3fca0000, 0x09417b30} },\n-/**/                  {{0x3fca5d14, 0x096d76aa} },\n-/**/                  {{0x40136bb4, 0xb3723db0} },\n-/**/                  {{0x3bbe3e0d, 0xfbf3979c} },},\n-/**/                 {{{0x3fca7fff, 0xeb1c23ec} },\n-/**/                  {{0x3fcae29d, 0xab60288d} },\n-/**/                  {{0x40130b3e, 0x783071d7} },\n-/**/                  {{0xbbc7dd82, 0x3d5384bf} },},\n-/**/                 {{{0x3fcaffff, 0xfb171c13} },\n-/**/                  {{0x3fcb685f, 0xa221a96b} },\n-/**/                  {{0x4012ae4d, 0xd8c0747d} },\n-/**/                  {{0x3bd4644b, 0xd5554972} },},\n-/**/                 {{{0x3fcb8000, 0x0aba44be} },\n-/**/                  {{0x3fcbee5a, 0xecdf241f} },\n-/**/                  {{0x401254b1, 0xc6fad63b} },\n-/**/                  {{0x3ba41916, 0xd092b85a} },},\n-/**/                 {{{0x3fcc0000, 0x113d2a3e} },\n-/**/                  {{0x3fcc7490, 0xb3e92543} },\n-/**/                  {{0x4011fe3c, 0x9a62c035} },\n-/**/                  {{0xbba3cc39, 0x41a03739} },},\n-/**/                 {{{0x3fcc7fff, 0xf49e00ce} },\n-/**/                  {{0x3fccfb02, 0x0f59eab0} },\n-/**/                  {{0x4011aac3, 0xe956a631} },\n-/**/                  {{0xbbb7a383, 0xbfa8cb5b} },},\n-/**/                 {{{0x3fcd0000, 0x05f611ab} },\n-/**/                  {{0x3fcd81b0, 0x89e6844e} },\n-/**/                  {{0x40115a1f, 0xf391268d} },\n-/**/                  {{0x3bd39b5c, 0xb2dc91f3} },},\n-/**/                 {{{0x3fcd8000, 0x14764ceb} },\n-/**/                  {{0x3fce089d, 0x27debf0d} },\n-/**/                  {{0x40110c2b, 0xfbc84740} },\n-/**/                  {{0x3bc14d4d, 0x84712510} },},\n-/**/                 {{{0x3fce0000, 0x14bcea76} },\n-/**/                  {{0x3fce8fc9, 0x16dbc820} },\n-/**/                  {{0x4010c0c5, 0xa00ca48e} },\n-/**/                  {{0xbbd33788, 0x640f1b9e} },},\n-/**/                 {{{0x3fce7fff, 0xfd7995bd} },\n-/**/                  {{0x3fcf1735, 0x88b50424} },\n-/**/                  {{0x401077cc, 0xbe02169a} },\n-/**/                  {{0xbbb61fee, 0x221fdf77} },},\n-/**/                 {{{0x3fcf0000, 0x0cc35436} },\n-/**/                  {{0x3fcf9ee3, 0xfd21a40b} },\n-/**/                  {{0x40103123, 0x1ee7ffe8} },\n-/**/                  {{0x3bd427e3, 0xc79ff5c1} },},\n-/**/                 {{{0x3fcf8000, 0x01d1da33} },\n-/**/                  {{0x3fd0136a, 0xb7dbe15c} },\n-/**/                  {{0x400fd959, 0x77d559e5} },\n-/**/                  {{0x3bb0c6a1, 0xd67948d7} },},\n-/**/                 {{{0x3fd00000, 0x060c13b2} },\n-/**/                  {{0x3fd05785, 0xaaad4f18} },\n-/**/                  {{0x400f549e, 0x2675d182} },\n-/**/                  {{0xbbc15208, 0x18f0dd10} },},\n-/**/                 {{{0x3fd04000, 0x03885492} },\n-/**/                  {{0x3fd09bc3, 0x660542d7} },\n-/**/                  {{0x400ed3e2, 0xdf3f5fec} },\n-/**/                  {{0xbbd95657, 0xb883ae62} },},\n-/**/                 {{{0x3fd08000, 0x052f5a13} },\n-/**/                  {{0x3fd0e024, 0x9a195045} },\n-/**/                  {{0x400e56f8, 0xfa68f2c8} },\n-/**/                  {{0x3bded7ba, 0x5a543e8e} },},\n-/**/                 {{{0x3fd0c000, 0x02ba1af5} },\n-/**/                  {{0x3fd124a9, 0xe2e7f24b} },\n-/**/                  {{0x400dddb4, 0xbffe633f} },\n-/**/                  {{0xbbdcba86, 0x0c60278f} },},\n-/**/                 {{{0x3fd0ffff, 0xf76642c1} },\n-/**/                  {{0x3fd16953, 0xe162ffe6} },\n-/**/                  {{0x400d67ed, 0x0311d5d5} },\n-/**/                  {{0x3b7b1f4a, 0xe40c5f9e} },},\n-/**/                 {{{0x3fd14000, 0x033602f0} },\n-/**/                  {{0x3fd1ae23, 0x5f49508e} },\n-/**/                  {{0x400cf57a, 0xb8708266} },\n-/**/                  {{0xbbd6a6c2, 0x8620f301} },},\n-/**/                 {{{0x3fd17fff, 0xfefd1a13} },\n-/**/                  {{0x3fd1f318, 0xdb2a9ba1} },\n-/**/                  {{0x400c8639, 0x8d11009e} },\n-/**/                  {{0x3bd3a9c6, 0x69b21d3b} },},\n-/**/                 {{{0x3fd1bfff, 0xf718365d} },\n-/**/                  {{0x3fd23835, 0x0c41e3ac} },\n-/**/                  {{0x400c1a06, 0xe02be47c} },\n-/**/                  {{0x3bdb961a, 0x129e8cd1} },},\n-/**/                 {{{0x3fd1ffff, 0xff001e00} },\n-/**/                  {{0x3fd27d78, 0xb2f6395e} },\n-/**/                  {{0x400bb0c1, 0xf2fe9a85} },\n-/**/                  {{0x3be074a9, 0xe68fd7d8} },},\n-/**/                 {{{0x3fd23fff, 0xfe425a6a} },\n-/**/                  {{0x3fd2c2e4, 0x618faabe} },\n-/**/                  {{0x400b4a4c, 0x190b18df} },\n-/**/                  {{0xbbdf0d1f, 0xf615aad1} },},\n-/**/                 {{{0x3fd28000, 0x059ec1db} },\n-/**/                  {{0x3fd30878, 0xd8583884} },\n-/**/                  {{0x400ae688, 0x0cd82bc2} },\n-/**/                  {{0xbbd563c3, 0x141c1f8d} },},\n-/**/                 {{{0x3fd2c000, 0x000dd081} },\n-/**/                  {{0x3fd34e36, 0xaffdb6d8} },\n-/**/                  {{0x400a855a, 0x5270fc15} },\n-/**/                  {{0xbbc6d88d, 0x9f2cdafd} },},\n-/**/                 {{{0x3fd2ffff, 0xfc1dcd2b} },\n-/**/                  {{0x3fd3941e, 0xa95875bc} },\n-/**/                  {{0x400a26a8, 0xaa9502b6} },\n-/**/                  {{0xbbe13cad, 0x8389b15c} },},\n-/**/                 {{{0x3fd33fff, 0xf6c0d4a0} },\n-/**/                  {{0x3fd3da31, 0x739845f5} },\n-/**/                  {{0x4009ca5a, 0x4d2573a0} },\n-/**/                  {{0xbbc71636, 0xacaee379} },},\n-/**/                 {{{0x3fd38000, 0x06b16793} },\n-/**/                  {{0x3fd4206f, 0xdbc088f0} },\n-/**/                  {{0x40097057, 0x9344e33a} },\n-/**/                  {{0xbbc2c052, 0x1d7a4f81} },},\n-/**/                 {{{0x3fd3c000, 0x07358fa3} },\n-/**/                  {{0x3fd466da, 0x6f23311d} },\n-/**/                  {{0x4009188a, 0x5aa612ea} },\n-/**/                  {{0x3b8653a5, 0x685e8edc} },},\n-/**/                 {{{0x3fd3ffff, 0xfc3b18cf} },\n-/**/                  {{0x3fd4ad71, 0xe9282e6b} },\n-/**/                  {{0x4008c2dd, 0x641e643d} },\n-/**/                  {{0x3b95f0ef, 0x3f567c64} },},\n-/**/                 {{{0x3fd44000, 0x000dd2a8} },\n-/**/                  {{0x3fd4f437, 0x1fa3f2d1} },\n-/**/                  {{0x40086f3c, 0x6072f821} },\n-/**/                  {{0x3bb68efa, 0x95ff68b5} },},\n-/**/                 {{{0x3fd47fff, 0xfbb43713} },\n-/**/                  {{0x3fd53b2a, 0xb3ac333c} },\n-/**/                  {{0x40081d94, 0x3da56692} },\n-/**/                  {{0xbbbf4d7f, 0x2985fd3f} },},\n-/**/                 {{{0x3fd4bfff, 0xfb113bf4} },\n-/**/                  {{0x3fd5824d, 0x6e8ed9c2} },\n-/**/                  {{0x4007cdd2, 0xa8add00f} },\n-/**/                  {{0x3bcf478a, 0x1c9b3657} },},\n-/**/                 {{{0x3fd4ffff, 0xf7f087c9} },\n-/**/                  {{0x3fd5c9a0, 0x07446496} },\n-/**/                  {{0x40077fe6, 0x444588eb} },\n-/**/                  {{0xbbc177dc, 0xa4eabb0c} },},\n-/**/                 {{{0x3fd54000, 0x088b3814} },\n-/**/                  {{0x3fd61123, 0x564125f9} },\n-/**/                  {{0x400733be, 0x6281a765} },\n-/**/                  {{0xbbc2c52c, 0xf57051c4} },},\n-/**/                 {{{0x3fd57fff, 0xf7d55966} },\n-/**/                  {{0x3fd658d7, 0xe194a5d5} },\n-/**/                  {{0x4006e94b, 0x73b47d1f} },\n-/**/                  {{0x3bda2fcf, 0xf9996dc6} },},\n-/**/                 {{{0x3fd5c000, 0x08bf2490} },\n-/**/                  {{0x3fd6a0be, 0xb775b28d} },\n-/**/                  {{0x4006a07e, 0x15b6ec28} },\n-/**/                  {{0xbbe0ca90, 0xaa5285b8} },},\n-/**/                 {{{0x3fd60000, 0x09fa853f} },\n-/**/                  {{0x3fd6e8d8, 0x65a66cfd} },\n-/**/                  {{0x40065948, 0x1c701269} },\n-/**/                  {{0x3bd9ea95, 0x8591e13a} },},\n-/**/                 {{{0x3fd64000, 0x07595fca} },\n-/**/                  {{0x3fd73125, 0xc0556a7c} },\n-/**/                  {{0x4006139b, 0xbaae9d02} },\n-/**/                  {{0x3bd88aff, 0x40152b83} },},\n-/**/                 {{{0x3fd68000, 0x031687da} },\n-/**/                  {{0x3fd779a7, 0x92e2cfd0} },\n-/**/                  {{0x4005cf6b, 0xcae0882b} },\n-/**/                  {{0xbbd8a4a2, 0x9f439451} },},\n-/**/                 {{{0x3fd6bfff, 0xf5c8cfe2} },\n-/**/                  {{0x3fd7c25e, 0x9fb452ed} },\n-/**/                  {{0x40058cab, 0xc561f1cd} },\n-/**/                  {{0xbbe371a6, 0xf6a37d74} },},\n-/**/                 {{{0x3fd6ffff, 0xf81df231} },\n-/**/                  {{0x3fd80b4b, 0xcfb4dab5} },\n-/**/                  {{0x40054b4f, 0x8d3ca5d3} },\n-/**/                  {{0x3bcb4686, 0x679dc99f} },},\n-/**/                 {{{0x3fd73fff, 0xfa71385e} },\n-/**/                  {{0x3fd8546f, 0xe007a9b6} },\n-/**/                  {{0x40050b4b, 0xb3b22176} },\n-/**/                  {{0xbbcd1540, 0xa5c73477} },},\n-/**/                 {{{0x3fd78000, 0x024a9c2b} },\n-/**/                  {{0x3fd89dcb, 0xa7fcf5cf} },\n-/**/                  {{0x4004cc95, 0x3159cbe1} },\n-/**/                  {{0xbbdc25ea, 0xd58a6ad0} },},\n-/**/                 {{{0x3fd7c000, 0x02eb62b8} },\n-/**/                  {{0x3fd8e75f, 0xec0ba5cf} },\n-/**/                  {{0x40048f21, 0x8731eeea} },\n-/**/                  {{0xbbc1cb73, 0xcc1adafb} },},\n-/**/                 {{{0x3fd80000, 0x054a52d1} },\n-/**/                  {{0x3fd9312d, 0x8bb822e9} },\n-/**/                  {{0x400452e6, 0x9170a729} },\n-/**/                  {{0xbbd8bb17, 0xeac002ee} },},\n-/**/                 {{{0x3fd83fff, 0xf93a00a3} },\n-/**/                  {{0x3fd97b35, 0x4bb9ad2a} },\n-/**/                  {{0x400417da, 0xae924e7f} },\n-/**/                  {{0x3bd4b800, 0x9a378cc7} },},\n-/**/                 {{{0x3fd87fff, 0xfbdc91c1} },\n-/**/                  {{0x3fd9c578, 0x2771b601} },\n-/**/                  {{0x4003ddf4, 0x78855799} },\n-/**/                  {{0x3bd9077d, 0xa00445d9} },},\n-/**/                 {{{0x3fd8bfff, 0xf6d215e6} },\n-/**/                  {{0x3fda0ff6, 0xe0ea4a0b} },\n-/**/                  {{0x4003a52b, 0x189a0989} },\n-/**/                  {{0xbbda6831, 0x89c0613d} },},\n-/**/                 {{{0x3fd90000, 0x02f734ef} },\n-/**/                  {{0x3fda5ab2, 0x736bf579} },\n-/**/                  {{0x40036d75, 0xe9244ca6} },\n-/**/                  {{0x3be3a6d8, 0x4b722377} },},\n-/**/                 {{{0x3fd94000, 0x04eef8b4} },\n-/**/                  {{0x3fdaa5ab, 0x9fb6e3d0} },\n-/**/                  {{0x400336cc, 0xc9089cb7} },\n-/**/                  {{0x3b9f6963, 0x22cc00bb} },},\n-/**/                 {{{0x3fd98000, 0x041ec76a} },\n-/**/                  {{0x3fdaf0e3, 0x5176c7e4} },\n-/**/                  {{0x40030127, 0xcb0b9506} },\n-/**/                  {{0x3bb1ffdb, 0x5385a849} },},\n-/**/                 {{{0x3fd9c000, 0x08044e47} },\n-/**/                  {{0x3fdb3c5a, 0x77071224} },\n-/**/                  {{0x4002cc7f, 0x50d75ec7} },\n-/**/                  {{0xbbb0fade, 0x78effc8a} },},\n-/**/                 {{{0x3fda0000, 0x01f8235b} },\n-/**/                  {{0x3fdb8811, 0xe725782e} },\n-/**/                  {{0x400298cc, 0x18fbfb37} },\n-/**/                  {{0xbbe55ed3, 0x3b50e71b} },},\n-/**/                 {{{0x3fda3fff, 0xfb8c6f08} },\n-/**/                  {{0x3fdbd40a, 0x97b086f3} },\n-/**/                  {{0x40026607, 0x154de04b} },\n-/**/                  {{0xbbdec65e, 0x455faae3} },},\n-/**/                 {{{0x3fda7fff, 0xfb3d63e1} },\n-/**/                  {{0x3fdc2045, 0x7d9a3b8a} },\n-/**/                  {{0x40023429, 0x7e60bfbb} },\n-/**/                  {{0x3be3001c, 0x154ebd33} },},\n-/**/                 {{{0x3fdabfff, 0xf5f45c48} },\n-/**/                  {{0x3fdc6cc3, 0x7b8d45e6} },\n-/**/                  {{0x4002032c, 0xdb1ace69} },\n-/**/                  {{0xbbe5ebf8, 0x3ed33616} },},\n-/**/                 {{{0x3fdb0000, 0x0508b34c} },\n-/**/                  {{0x3fdcb985, 0xa27e8d37} },\n-/**/                  {{0x4001d30a, 0xd4459a2b} },\n-/**/                  {{0xbbd01432, 0xae61e2d1} },},\n-/**/                 {{{0x3fdb4000, 0x0a84710c} },\n-/**/                  {{0x3fdd068c, 0xc3e50155} },\n-/**/                  {{0x4001a3bd, 0x775034dd} },\n-/**/                  {{0xbbe80b1e, 0x58e0e228} },},\n-/**/                 {{{0x3fdb7fff, 0xf692e9d8} },\n-/**/                  {{0x3fdd53d9, 0xc49d6627} },\n-/**/                  {{0x4001753e, 0xfe18066a} },\n-/**/                  {{0xbbb004c8, 0xf760d33e} },},\n-/**/                 {{{0x3fdbc000, 0x0280f14d} },\n-/**/                  {{0x3fdda16d, 0xe4e81013} },\n-/**/                  {{0x40014789, 0xa38ea052} },\n-/**/                  {{0x3be848bc, 0x27c9c4ea} },},\n-/**/                 {{{0x3fdc0000, 0x001121d1} },\n-/**/                  {{0x3fddef49, 0xeac018f0} },\n-/**/                  {{0x40011a98, 0x20b8be0c} },\n-/**/                  {{0xbbe1527e, 0xd0d6010e} },},\n-/**/                 {{{0x3fdc3fff, 0xfef662aa} },\n-/**/                  {{0x3fde3d6e, 0xea0c7070} },\n-/**/                  {{0x4000ee65, 0x32f46ccd} },\n-/**/                  {{0x3be8d241, 0x189a000d} },},\n-/**/                 {{{0x3fdc8000, 0x09845818} },\n-/**/                  {{0x3fde8bdd, 0xf36a8b1b} },\n-/**/                  {{0x4000c2eb, 0xcac73476} },\n-/**/                  {{0x3bd221f7, 0x12bed284} },},\n-/**/                 {{{0x3fdcbfff, 0xfb0493bf} },\n-/**/                  {{0x3fdeda97, 0xe0c60d10} },\n-/**/                  {{0x40009827, 0x251c7836} },\n-/**/                  {{0xbbe0bd54, 0x6eec41b7} },},\n-/**/                 {{{0x3fdcffff, 0xfd52961f} },\n-/**/                  {{0x3fdf299d, 0xefb3e44b} },\n-/**/                  {{0x40006e12, 0x74e459f5} },\n-/**/                  {{0xbbd93f77, 0xe969c82f} },},\n-/**/                 {{{0x3fdd3fff, 0xfe2319a4} },\n-/**/                  {{0x3fdf78f1, 0x17139490} },\n-/**/                  {{0x400044a9, 0x3e737e94} },\n-/**/                  {{0xbb91e7cc, 0x49594b7a} },},\n-/**/                 {{{0x3fdd7fff, 0xfa4de596} },\n-/**/                  {{0x3fdfc892, 0x638f49e8} },\n-/**/                  {{0x40001be7, 0x231057a5} },\n-/**/                  {{0x3bd482b0, 0xf5af9f5f} },},\n-/**/                 {{{0x3fddbfff, 0xfe729a69} },\n-/**/                  {{0x3fe00c41, 0x7c6ab019} },\n-/**/                  {{0x3fffe78f, 0xbf612660} },\n-/**/                  {{0x3bea5cda, 0x00da681e} },},\n-/**/                 {{{0x3fde0000, 0x09d66802} },\n-/**/                  {{0x3fe03461, 0xf6b883cf} },\n-/**/                  {{0x3fff988e, 0xbc05a87c} },\n-/**/                  {{0xbbe06c33, 0xf2372669} },},\n-/**/                 {{{0x3fde3fff, 0xfb211657} },\n-/**/                  {{0x3fe05cab, 0x191db8e8} },\n-/**/                  {{0x3fff4ac3, 0x7bcfe6be} },\n-/**/                  {{0xbbd5d51f, 0x5ed8d35b} },},\n-/**/                 {{{0x3fde8000, 0x0a3f068a} },\n-/**/                  {{0x3fe0851d, 0x95fb54f0} },\n-/**/                  {{0x3ffefe26, 0x144ca408} },\n-/**/                  {{0xbbc7c894, 0xa2c169c5} },},\n-/**/                 {{{0x3fdec000, 0x01adb060} },\n-/**/                  {{0x3fe0adb9, 0xdc7b54f9} },\n-/**/                  {{0x3ffeb2af, 0x5ebe52a7} },\n-/**/                  {{0x3bd4e740, 0x312c5ffd} },},\n-/**/                 {{{0x3fdeffff, 0xff5c0d01} },\n-/**/                  {{0x3fe0d680, 0x92550a8d} },\n-/**/                  {{0x3ffe6858, 0x0d71fdf0} },\n-/**/                  {{0x3bddd8a6, 0x96b35499} },},\n-/**/                 {{{0x3fdf3fff, 0xf93d5fcc} },\n-/**/                  {{0x3fe0ff72, 0x45cb4374} },\n-/**/                  {{0x3ffe1f19, 0x3cce5040} },\n-/**/                  {{0xbbc9f0ec, 0x7c1efab4} },},\n-/**/                 {{{0x3fdf7fff, 0xfa0dd18f} },\n-/**/                  {{0x3fe1288f, 0x944dd508} },\n-/**/                  {{0x3ffdd6ec, 0x298b874d} },\n-/**/                  {{0x3bea6ebd, 0x9642a0a6} },},\n-/**/                 {{{0x3fdfbfff, 0xfd3a9f1a} },\n-/**/                  {{0x3fe151d9, 0x13750f3e} },\n-/**/                  {{0x3ffd8fca, 0x5806a27e} },\n-/**/                  {{0x3bda2a03, 0xfc65ac7a} },},\n-/**/                 {{{0x3fdfffff, 0xfc481400} },\n-/**/                  {{0x3fe17b4f, 0x598944ca} },\n-/**/                  {{0x3ffd49ad, 0x82532170} },\n-/**/                  {{0x3bc4412e, 0x3d236dc3} },},\n-/**/                 {{{0x3fe01fff, 0xff53786c} },\n-/**/                  {{0x3fe1a4f3, 0x07d83d47} },\n-/**/                  {{0x3ffd048f, 0x851bffeb} },\n-/**/                  {{0x3bd1589d, 0x29f81b14} },},\n-/**/                 {{{0x3fe03fff, 0xfee301b7} },\n-/**/                  {{0x3fe1cec4, 0xb8a6a382} },\n-/**/                  {{0x3ffcc06a, 0x7c519db6} },\n-/**/                  {{0x3bd370e6, 0x5b24d6b2} },},\n-/**/                 {{{0x3fe06000, 0x006e36bf} },\n-/**/                  {{0x3fe1f8c5, 0x114eb8be} },\n-/**/                  {{0x3ffc7d38, 0xa34d6786} },\n-/**/                  {{0xbbea92de, 0x4b98c1d4} },},\n-/**/                 {{{0x3fe07fff, 0xfd60aa43} },\n-/**/                  {{0x3fe222f4, 0xabeccecb} },\n-/**/                  {{0x3ffc3af4, 0x77342ac4} },\n-/**/                  {{0xbbdd47f6, 0x03a5c2c2} },},\n-/**/                 {{{0x3fe0a000, 0x037762e8} },\n-/**/                  {{0x3fe24d54, 0x3f99efe8} },\n-/**/                  {{0x3ffbf998, 0x75f54fab} },\n-/**/                  {{0x3bedf7f4, 0x15771a46} },},\n-/**/                 {{{0x3fe0bfff, 0xff1c6921} },\n-/**/                  {{0x3fe277e4, 0x598e35d0} },\n-/**/                  {{0x3ffbb91f, 0x8addd186} },\n-/**/                  {{0x3be0f16c, 0x5e0e5a73} },},\n-/**/                 {{{0x3fe0dfff, 0xff07154b} },\n-/**/                  {{0x3fe2a2a5, 0xb6bc3986} },\n-/**/                  {{0x3ffb7984, 0x8301646d} },\n-/**/                  {{0xbbf02dd0, 0xbbaa5310} },},\n-/**/                 {{{0x3fe10000, 0x02fcdda4} },\n-/**/                  {{0x3fe2cd99, 0x02a59f1e} },\n-/**/                  {{0x3ffb3ac2, 0x705219bf} },\n-/**/                  {{0xbbe59357, 0x112fa616} },},\n-/**/                 {{{0x3fe12000, 0x01ce1140} },\n-/**/                  {{0x3fe2f8be, 0xdf0a67c2} },\n-/**/                  {{0x3ffafcd4, 0x9ab8ae2a} },\n-/**/                  {{0x3be2c542, 0x9303f346} },},\n-/**/                 {{{0x3fe14000, 0x04d0f355} },\n-/**/                  {{0x3fe32418, 0x08fcc7bf} },\n-/**/                  {{0x3ffabfb6, 0x497b9a36} },\n-/**/                  {{0x3bebc044, 0xb5a59234} },},\n-/**/                 {{{0x3fe16000, 0x00fb0c8a} },\n-/**/                  {{0x3fe34fa5, 0x2471618b} },\n-/**/                  {{0x3ffa8363, 0x0d26d117} },\n-/**/                  {{0xbbdbfbb2, 0x3f7bb7c9} },},\n-/**/                 {{{0x3fe18000, 0x026f10b3} },\n-/**/                  {{0x3fe37b66, 0xf7579056} },\n-/**/                  {{0x3ffa47d6, 0x6b4cf4b1} },\n-/**/                  {{0x3bf0f6b4, 0xaf0b5de9} },},\n-/**/                 {{{0x3fe19fff, 0xfd0978f8} },\n-/**/                  {{0x3fe3a75e, 0x290cc78c} },\n-/**/                  {{0x3ffa0d0c, 0x36c21315} },\n-/**/                  {{0x3beb2129, 0xa296b262} },},\n-/**/                 {{{0x3fe1bfff, 0xfd94840b} },\n-/**/                  {{0x3fe3d38b, 0x85b4e4a4} },\n-/**/                  {{0x3ff9d300, 0x32f2ecef} },\n-/**/                  {{0xbbdbab1a, 0xb9bb7d74} },},\n-/**/                 {{{0x3fe1dfff, 0xfbda1ea1} },\n-/**/                  {{0x3fe3ffef, 0xbf3cee2f} },\n-/**/                  {{0x3ff999ae, 0x6770fed8} },\n-/**/                  {{0x3bda0bdc, 0xb4ace9a4} },},\n-/**/                 {{{0x3fe1ffff, 0xfc989533} },\n-/**/                  {{0x3fe42c8b, 0x9c27900c} },\n-/**/                  {{0x3ff96112, 0xe0d9f1ac} },\n-/**/                  {{0xbbee19eb, 0x2fa2d81a} },},\n-/**/                 {{{0x3fe22000, 0x012b8d26} },\n-/**/                  {{0x3fe4595f, 0xe11975ca} },\n-/**/                  {{0x3ff92929, 0xcdaa4e80} },\n-/**/                  {{0x3bf23382, 0xacc82d4b} },},\n-/**/                 {{{0x3fe24000, 0x04f4d6af} },\n-/**/                  {{0x3fe4866d, 0x4d224131} },\n-/**/                  {{0x3ff8f1ef, 0x815c34e8} },\n-/**/                  {{0xbbd0c6ff, 0x3b740a99} },},\n-/**/                 {{{0x3fe25fff, 0xfcc07bda} },\n-/**/                  {{0x3fe4b3b4, 0x98b7d010} },\n-/**/                  {{0x3ff8bb60, 0x73e7ffa1} },\n-/**/                  {{0x3bebc31b, 0x1ad7a9c2} },},\n-/**/                 {{{0x3fe28000, 0x042d9639} },\n-/**/                  {{0x3fe4e136, 0xb64540d1} },\n-/**/                  {{0x3ff88578, 0xf4374938} },\n-/**/                  {{0x3be36de9, 0x1b85e901} },},\n-/**/                 {{{0x3fe2a000, 0x03be29a0} },\n-/**/                  {{0x3fe50ef4, 0x52bffd96} },\n-/**/                  {{0x3ff85035, 0xc0042c06} },\n-/**/                  {{0x3be15d01, 0x76f5efbd} },},\n-/**/                 {{{0x3fe2bfff, 0xfaa91f12} },\n-/**/                  {{0x3fe53cee, 0x3e2f4e0d} },\n-/**/                  {{0x3ff81b93, 0x8542df07} },\n-/**/                  {{0x3be555cd, 0x17662a2b} },},\n-/**/                 {{{0x3fe2dfff, 0xfe884891} },\n-/**/                  {{0x3fe56b25, 0x6c1a2470} },\n-/**/                  {{0x3ff7e78e, 0xe422ea70} },\n-/**/                  {{0x3bf03504, 0xbd030c11} },},\n-/**/                 {{{0x3fe2ffff, 0xfe87152b} },\n-/**/                  {{0x3fe5999a, 0x9beaaaa1} },\n-/**/                  {{0x3ff7b424, 0xd18fe9b3} },\n-/**/                  {{0xbb649a5f, 0x773e0e64} },},\n-/**/                 {{{0x3fe31fff, 0xffc1a721} },\n-/**/                  {{0x3fe5c84e, 0xafe0e564} },\n-/**/                  {{0x3ff78152, 0x338db8d4} },\n-/**/                  {{0x3beaf428, 0x5da8e935} },},\n-/**/                 {{{0x3fe33fff, 0xff70a372} },\n-/**/                  {{0x3fe5f742, 0x82191d64} },\n-/**/                  {{0x3ff74f14, 0x1122bcae} },\n-/**/                  {{0x3bdb1c4b, 0xdee4bfaf} },},\n-/**/                 {{{0x3fe36000, 0x0436e836} },\n-/**/                  {{0x3fe62676, 0xfde6ccff} },\n-/**/                  {{0x3ff71d67, 0x7644252c} },\n-/**/                  {{0xbbec3d10, 0xe08c3afb} },},\n-/**/                 {{{0x3fe37fff, 0xfcbe9641} },\n-/**/                  {{0x3fe655ec, 0xee9ffdaf} },\n-/**/                  {{0x3ff6ec49, 0xa6fc0515} },\n-/**/                  {{0x3bdda453, 0x2ed29567} },},\n-/**/                 {{{0x3fe39fff, 0xffb6d6ca} },\n-/**/                  {{0x3fe685a5, 0x5e67a1e1} },\n-/**/                  {{0x3ff6bbb7, 0xbc2ae969} },\n-/**/                  {{0x3becbf7b, 0x2ef43882} },},\n-/**/                 {{{0x3fe3c000, 0x04934fec} },\n-/**/                  {{0x3fe6b5a1, 0x2cc07d75} },\n-/**/                  {{0x3ff68baf, 0x10b02ef8} },\n-/**/                  {{0xbbe7c8fb, 0xfeb7cabd} },},\n-/**/                 {{{0x3fe3e000, 0x03f5cf7f} },\n-/**/                  {{0x3fe6e5e1, 0x3e59def6} },\n-/**/                  {{0x3ff65c2d, 0x0e61500f} },\n-/**/                  {{0xbbe30ba4, 0x035f7845} },},\n-/**/                 {{{0x3fe40000, 0x05280ad9} },\n-/**/                  {{0x3fe71666, 0x91ab4c3e} },\n-/**/                  {{0x3ff62d2f, 0x19f01c90} },\n-/**/                  {{0xbbf1e9f5, 0xffe95f6a} },},\n-/**/                 {{{0x3fe42000, 0x049efb65} },\n-/**/                  {{0x3fe74732, 0x18af3b9d} },\n-/**/                  {{0x3ff5feb2, 0xb86465e4} },\n-/**/                  {{0x3bc4cad7, 0x280d591e} },},\n-/**/                 {{{0x3fe44000, 0x0035ccb6} },\n-/**/                  {{0x3fe77844, 0xcb4ff1e5} },\n-/**/                  {{0x3ff5d0b5, 0x7c455428} },\n-/**/                  {{0x3bed8c18, 0x7ba5617c} },},\n-/**/                 {{{0x3fe46000, 0x03346717} },\n-/**/                  {{0x3fe7a99f, 0xba258778} },\n-/**/                  {{0x3ff5a334, 0xf4392254} },\n-/**/                  {{0xbbefd14a, 0xfc84a570} },},\n-/**/                 {{{0x3fe48000, 0x03002575} },\n-/**/                  {{0x3fe7db43, 0xd836768f} },\n-/**/                  {{0x3ff5762e, 0xdcf97e0c} },\n-/**/                  {{0xbbdd7eba, 0x5f5df49e} },},\n-/**/                 {{{0x3fe4a000, 0x055bf381} },\n-/**/                  {{0x3fe80d32, 0x35edeefa} },\n-/**/                  {{0x3ff549a0, 0xea46e31f} },\n-/**/                  {{0xbbdba522, 0x76823eac} },},\n-/**/                 {{{0x3fe4c000, 0x04ce10e3} },\n-/**/                  {{0x3fe83f6b, 0xd67dc1a8} },\n-/**/                  {{0x3ff51d88, 0xed82bcc4} },\n-/**/                  {{0xbbeae92d, 0x077d29ea} },},\n-/**/                 {{{0x3fe4e000, 0x016c60e1} },\n-/**/                  {{0x3fe871f1, 0xca0aaf31} },\n-/**/                  {{0x3ff4f1e4, 0xbdacbf16} },\n-/**/                  {{0x3be82958, 0x46ee425e} },},\n-/**/                 {{{0x3fe4ffff, 0xff966f0a} },\n-/**/                  {{0x3fe8a4c5, 0x2bff2dae} },\n-/**/                  {{0x3ff4c6b2, 0x3917657e} },\n-/**/                  {{0xbbf127c2, 0x5c86c705} },},\n-/**/                 {{{0x3fe52000, 0x0076e6eb} },\n-/**/                  {{0x3fe8d7e7, 0x175651e8} },\n-/**/                  {{0x3ff49bef, 0x4f459b05} },\n-/**/                  {{0xbbb1e9d1, 0x4181bbfc} },},\n-/**/                 {{{0x3fe54000, 0x03d12d3b} },\n-/**/                  {{0x3fe90b58, 0xa976ed56} },\n-/**/                  {{0x3ff47199, 0xfdf24af4} },\n-/**/                  {{0x3be38c17, 0xc30decaf} },},\n-/**/                 {{{0x3fe55fff, 0xfce7fa8d} },\n-/**/                  {{0x3fe93f1a, 0xf03a3a09} },\n-/**/                  {{0x3ff447b0, 0x5f13234b} },\n-/**/                  {{0x3bf1b8b2, 0x70df7e20} },},\n-/**/                 {{{0x3fe58000, 0x0331b46a} },\n-/**/                  {{0x3fe9732f, 0x38e83134} },\n-/**/                  {{0x3ff41e30, 0x68d8b41b} },\n-/**/                  {{0xbbee24d8, 0xb90bc28b} },},\n-/**/                 {{{0x3fe59fff, 0xfc14848e} },\n-/**/                  {{0x3fe9a796, 0x8471b489} },\n-/**/                  {{0x3ff3f518, 0x5de3aa73} },\n-/**/                  {{0xbbecacd9, 0xe0761536} },},\n-/**/                 {{{0x3fe5bfff, 0xfb7cd395} },\n-/**/                  {{0x3fe9dc52, 0x24a8b955} },\n-/**/                  {{0x3ff3cc66, 0x4f8fff15} },\n-/**/                  {{0xbbf67c97, 0x82045611} },},\n-/**/                 {{{0x3fe5e000, 0x000dcc40} },\n-/**/                  {{0x3fea1163, 0x4df5b93e} },\n-/**/                  {{0x3ff3a418, 0x75853228} },\n-/**/                  {{0xbbf585da, 0xd481f350} },},\n-/**/                 {{{0x3fe60000, 0x02efd2fc} },\n-/**/                  {{0x3fea46cb, 0x30d16323} },\n-/**/                  {{0x3ff37c2d, 0x187962ae} },\n-/**/                  {{0x3bf004c3, 0xa5f77bb0} },},\n-/**/                 {{{0x3fe61fff, 0xfeb8088a} },\n-/**/                  {{0x3fea7c8b, 0x053920c0} },\n-/**/                  {{0x3ff354a2, 0x891769a9} },\n-/**/                  {{0x3bbc6b30, 0x3fee3029} },},\n-/**/                 {{{0x3fe64000, 0x00f3ca06} },\n-/**/                  {{0x3feab2a4, 0x28a1911a} },\n-/**/                  {{0x3ff32d77, 0x0a6f0a4a} },\n-/**/                  {{0x3bf2a6f8, 0xfac5081a} },},\n-/**/                 {{{0x3fe65fff, 0xfe9ec2f4} },\n-/**/                  {{0x3feae917, 0xd4ce7239} },\n-/**/                  {{0x3ff306a9, 0x0751a948} },\n-/**/                  {{0xbbe950b5, 0x51ab9dbd} },},\n-/**/                 {{{0x3fe68000, 0x03d43966} },\n-/**/                  {{0x3feb1fe7, 0x708b998a} },\n-/**/                  {{0x3ff2e036, 0xd7a153c7} },\n-/**/                  {{0x3bdd36e2, 0xa1e4a14e} },},\n-/**/                 {{{0x3fe69fff, 0xfab67783} },\n-/**/                  {{0x3feb5714, 0x2e575464} },\n-/**/                  {{0x3ff2ba1f, 0x05006cb6} },\n-/**/                  {{0x3bea9a4a, 0x473c2e31} },},\n-/**/                 {{{0x3fe6bfff, 0xfcb65f89} },\n-/**/                  {{0x3feb8e9f, 0x981efd2f} },\n-/**/                  {{0x3ff2945f, 0xe948d9f7} },\n-/**/                  {{0xbbca5294, 0xe802df72} },},\n-/**/                 {{{0x3fe6dfff, 0xfc5609a9} },\n-/**/                  {{0x3febc68a, 0xfaed6ff1} },\n-/**/                  {{0x3ff26ef8, 0x1533411e} },\n-/**/                  {{0xbbf89153, 0xf51bc566} },},\n-/**/                 {{{0x3fe6ffff, 0xfc4eef86} },\n-/**/                  {{0x3febfed7, 0xc62205fe} },\n-/**/                  {{0x3ff249e6, 0x0e70978c} },\n-/**/                  {{0x3bc39021, 0xa2b9ff56} },},\n-/**/                 {{{0x3fe72000, 0x004d98b3} },\n-/**/                  {{0x3fec3787, 0x716968ad} },\n-/**/                  {{0x3ff22528, 0x61be7751} },\n-/**/                  {{0x3befc9c5, 0x74ee2211} },},\n-/**/                 {{{0x3fe73fff, 0xfc155075} },\n-/**/                  {{0x3fec709b, 0x5ec6fd4e} },\n-/**/                  {{0x3ff200bd, 0xb5d53311} },\n-/**/                  {{0x3be28a4d, 0xa269ae63} },},\n-/**/                 {{{0x3fe76000, 0x0498c203} },\n-/**/                  {{0x3fecaa15, 0x323d08c1} },\n-/**/                  {{0x3ff1dca4, 0x93433f65} },\n-/**/                  {{0x3bf8cae4, 0x14a28fb7} },},\n-/**/                 {{{0x3fe77fff, 0xff1e5636} },\n-/**/                  {{0x3fece3f6, 0x4147c12c} },\n-/**/                  {{0x3ff1b8db, 0xbfe294a8} },\n-/**/                  {{0xbbe7e19c, 0x4b56a744} },},\n-/**/                 {{{0x3fe7a000, 0x0226d45a} },\n-/**/                  {{0x3fed1e40, 0x4120eb7f} },\n-/**/                  {{0x3ff19561, 0xd15f8278} },\n-/**/                  {{0x3be64b28, 0x032c5d4c} },},\n-/**/                 {{{0x3fe7c000, 0x0250a5aa} },\n-/**/                  {{0x3fed58f4, 0xb112a1e1} },\n-/**/                  {{0x3ff17235, 0x8a59d565} },\n-/**/                  {{0xbbe716de, 0xb8dc7867} },},\n-/**/                 {{{0x3fe7e000, 0x0482f82e} },\n-/**/                  {{0x3fed9415, 0x3576bdf0} },\n-/**/                  {{0x3ff14f55, 0xa22a1c5b} },\n-/**/                  {{0x3bf207e1, 0xe1305604} },},\n-/**/                 {{{0x3fe80000, 0x0205003e} },\n-/**/                  {{0x3fedcfa3, 0x64d69ff7} },\n-/**/                  {{0x3ff12cc0, 0xe37eb26f} },\n-/**/                  {{0xbbd52ec6, 0xe32395f8} },},\n-/**/                 {{{0x3fe81fff, 0xfbf99411} },\n-/**/                  {{0x3fee0ba0, 0xebf98f51} },\n-/**/                  {{0x3ff10a76, 0x16ddd5d6} },\n-/**/                  {{0xbbece0d6, 0x59866045} },},\n-/**/                 {{{0x3fe84000, 0x0248e3a3} },\n-/**/                  {{0x3fee480f, 0x9bb7f565} },\n-/**/                  {{0x3ff0e873, 0xfb84e05c} },\n-/**/                  {{0x3bf4e5e8, 0x1595df92} },},\n-/**/                 {{{0x3fe86000, 0x0145c157} },\n-/**/                  {{0x3fee84f1, 0x0a10b3ab} },\n-/**/                  {{0x3ff0c6b9, 0x7cbd7b1e} },\n-/**/                  {{0xbbe19de6, 0xd5f121d0} },},\n-/**/                 {{{0x3fe88000, 0x022631b9} },\n-/**/                  {{0x3feec247, 0x0be1f047} },\n-/**/                  {{0x3ff0a545, 0x6d0b3ee6} },\n-/**/                  {{0xbbc272b1, 0xa3ba2c6f} },},\n-/**/                 {{{0x3fe8a000, 0x045f7828} },\n-/**/                  {{0x3fef0013, 0x6c45ba1c} },\n-/**/                  {{0x3ff08416, 0xaf2a0f09} },\n-/**/                  {{0x3be82b56, 0x5b63c799} },},\n-/**/                 {{{0x3fe8bfff, 0xffc686cf} },\n-/**/                  {{0x3fef3e57, 0xf03c824b} },\n-/**/                  {{0x3ff0632c, 0x33502220} },\n-/**/                  {{0xbbd039ad, 0x2dbeeb25} },},\n-/**/                 {{{0x3fe8dfff, 0xfd8644c6} },\n-/**/                  {{0x3fef7d16, 0x8774261d} },\n-/**/                  {{0x3ff04284, 0xdd5b3019} },\n-/**/                  {{0x3bd79f33, 0xe1eba933} },},\n-/**/                 {{{0x3fe8ffff, 0xfe4e7937} },\n-/**/                  {{0x3fefbc51, 0x1a99a641} },\n-/**/                  {{0x3ff0221f, 0x9f69840b} },\n-/**/                  {{0xbbea9e84, 0x7beee018} },},\n-/**/                 {{{0x3fe92000, 0x0435251f} },\n-/**/                  {{0x3feffc09, 0x9eb22390} },\n-/**/                  {{0x3ff001fb, 0x6f7c51e8} },\n-/**/                  {{0xbb5a12e7, 0x31032e0a} },},\n-  };\n-\n-#else\n-#ifdef LITTLE_ENDI\n-static const number\n-      xfg[186][4] = {                             /* xi,Fi,Gi,FFi, i=16..201 */\n-/**/                 {{{0x1e519d60, 0x3fb00000} },\n-/**/                  {{0x96c4e240, 0x3fb00557} },\n-/**/                  {{0x628127b7, 0x402ff554} },\n-/**/                  {{0x9e355b06, 0xbb9a1dee} },},\n-/**/                 {{{0x1b1a7010, 0x3fb10000} },\n-/**/                  {{0xaab892b7, 0x3fb10668} },\n-/**/                  {{0xbe3fdf74, 0x402e12c7} },\n-/**/                  {{0x037da741, 0x3ba89234} },},\n-/**/                 {{{0x2505e350, 0x3fb20000} },\n-/**/                  {{0xff547824, 0x3fb2079b} },\n-/**/                  {{0xde853633, 0x402c65c5} },\n-/**/                  {{0xe9614250, 0x3bb7486e} },},\n-/**/                 {{{0xfcdc4252, 0x3fb2ffff} },\n-/**/                  {{0x5eb16c68, 0x3fb308f3} },\n-/**/                  {{0xe56be74f, 0x402ae5da} },\n-/**/                  {{0x91a23034, 0xbb82c726} },},\n-/**/                 {{{0xe3ff849f, 0x3fb3ffff} },\n-/**/                  {{0x154999cc, 0x3fb40a71} },\n-/**/                  {{0x046b7352, 0x40298c43} },\n-/**/                  {{0x3843738f, 0x3b9aceaf} },},\n-/**/                 {{{0xedc9590f, 0x3fb4ffff} },\n-/**/                  {{0x429bdd80, 0x3fb50c17} },\n-/**/                  {{0x91b5d674, 0x40285384} },\n-/**/                  {{0xb4403d22, 0xbbc1d02d} },},\n-/**/                 {{{0x00ee83f7, 0x3fb60000} },\n-/**/                  {{0xda80cc21, 0x3fb60de7} },\n-/**/                  {{0xef21a2a7, 0x40273724} },\n-/**/                  {{0x72523ffd, 0xbb95e53c} },},\n-/**/                 {{{0xeb05ea41, 0x3fb6ffff} },\n-/**/                  {{0xb8c51bea, 0x3fb70fe4} },\n-/**/                  {{0xfae562ff, 0x40263370} },\n-/**/                  {{0x8ffe0626, 0xbb99ad0e} },},\n-/**/                 {{{0xdc0515f7, 0x3fb7ffff} },\n-/**/                  {{0x1db54498, 0x3fb81210} },\n-/**/                  {{0x0e7eab5c, 0x40254553} },\n-/**/                  {{0xd62ed686, 0xbb914c87} },},\n-/**/                 {{{0xe384d7ab, 0x3fb8ffff} },\n-/**/                  {{0x2a8d3727, 0x3fb9146c} },\n-/**/                  {{0xfd57f3fd, 0x40246a33} },\n-/**/                  {{0x5381e06d, 0xbbbbda8d} },},\n-/**/                 {{{0xe4832347, 0x3fb9ffff} },\n-/**/                  {{0xd50e1050, 0x3fba16fa} },\n-/**/                  {{0xc5537a96, 0x40239fe2} },\n-/**/                  {{0xc111eabb, 0x3bc7f695} },},\n-/**/                 {{{0x274540e3, 0x3fbb0000} },\n-/**/                  {{0x7ae68517, 0x3fbb19be} },\n-/**/                  {{0x3637e946, 0x4022e481} },\n-/**/                  {{0x8dbd9d93, 0x3bc307f8} },},\n-/**/                 {{{0xfebf2e9b, 0x3fbbffff} },\n-/**/                  {{0x8369cd19, 0x3fbc1cb8} },\n-/**/                  {{0x17aef223, 0x40223676} },\n-/**/                  {{0x424a9cf3, 0x3bc50038} },},\n-/**/                 {{{0x23529045, 0x3fbd0000} },\n-/**/                  {{0xc11d7ef7, 0x3fbd1feb} },\n-/**/                  {{0xb8e43d4e, 0x4021945f} },\n-/**/                  {{0x52a6f224, 0x3b812007} },},\n-/**/                 {{{0xd872a829, 0x3fbdffff} },\n-/**/                  {{0x8ee4d6b7, 0x3fbe2359} },\n-/**/                  {{0x76195d5f, 0x4020fd0c} },\n-/**/                  {{0x85fdca85, 0xbbb4d9ab} },},\n-/**/                 {{{0xff323b84, 0x3fbeffff} },\n-/**/                  {{0xec9073e5, 0x3fbf2704} },\n-/**/                  {{0x3020200f, 0x40206f71} },\n-/**/                  {{0x12836992, 0x3bb77aa2} },},\n-/**/                 {{{0x0ce79195, 0x3fc00000} },\n-/**/                  {{0xbc30cc61, 0x3fc01577} },\n-/**/                  {{0xd6564a88, 0x401fd549} },\n-/**/                  {{0x965c0ad0, 0xbbc8926f} },},\n-/**/                 {{{0xee40e918, 0x3fc07fff} },\n-/**/                  {{0x8279ac01, 0x3fc0978d} },\n-/**/                  {{0x9294bc03, 0x401edbb5} },\n-/**/                  {{0x4aae45d6, 0xbb80a533} },},\n-/**/                 {{{0x0cc091fd, 0x3fc10000} },\n-/**/                  {{0x44dfb2f7, 0x3fc119c5} },\n-/**/                  {{0x067d8e18, 0x401df0bb} },\n-/**/                  {{0x4ff642a4, 0xbbcc2c18} },},\n-/**/                 {{{0x0d9936a1, 0x3fc18000} },\n-/**/                  {{0xb9085a4b, 0x3fc19c1f} },\n-/**/                  {{0x71ce3629, 0x401d131a} },\n-/**/                  {{0x0669355b, 0xbbc36553} },},\n-/**/                 {{{0xed5f3188, 0x3fc1ffff} },\n-/**/                  {{0xee74bf2d, 0x3fc21e9d} },\n-/**/                  {{0xff0cd655, 0x401c41b6} },\n-/**/                  {{0x478ecfc5, 0x3b8867f5} },},\n-/**/                 {{{0x05f06a51, 0x3fc28000} },\n-/**/                  {{0x550b313f, 0x3fc2a141} },\n-/**/                  {{0x1702e6d2, 0x401b7b92} },\n-/**/                  {{0x380131fe, 0xbbadab51} },},\n-/**/                 {{{0xfe3d339e, 0x3fc2ffff} },\n-/**/                  {{0xa75f76df, 0x3fc3240a} },\n-/**/                  {{0xfcb6409d, 0x401abfc8} },\n-/**/                  {{0x0d291d83, 0x3bc60bcf} },},\n-/**/                 {{{0xed888d6f, 0x3fc37fff} },\n-/**/                  {{0x13cc5db7, 0x3fc3a6fb} },\n-/**/                  {{0x8ed5320d, 0x401a0d8f} },\n-/**/                  {{0x4eef03ab, 0x3bb8a48e} },},\n-/**/                 {{{0x02ca050d, 0x3fc40000} },\n-/**/                  {{0xe25776bb, 0x3fc42a13} },\n-/**/                  {{0xfa84c2bc, 0x4019642d} },\n-/**/                  {{0xcc56516f, 0xbbd0bd5d} },},\n-/**/                 {{{0xf2531f5c, 0x3fc47fff} },\n-/**/                  {{0xdeb73404, 0x3fc4ad55} },\n-/**/                  {{0xf86e9035, 0x4018c2fe} },\n-/**/                  {{0x5aa287c8, 0x3b9cffe7} },},\n-/**/                 {{{0x13774992, 0x3fc50000} },\n-/**/                  {{0x7d0ee307, 0x3fc530c2} },\n-/**/                  {{0x370caf35, 0x4018296c} },\n-/**/                  {{0xf91d6532, 0xbbcf75d1} },},\n-/**/                 {{{0xedddcb2d, 0x3fc57fff} },\n-/**/                  {{0x5db4347d, 0x3fc5b45a} },\n-/**/                  {{0x52190c0e, 0x401796ee} },\n-/**/                  {{0x17d5d076, 0x3b88a25f} },},\n-/**/                 {{{0xf41949a0, 0x3fc5ffff} },\n-/**/                  {{0x13bf986a, 0x3fc6381f} },\n-/**/                  {{0x2d2255fd, 0x40170b09} },\n-/**/                  {{0xb1bcd5e7, 0xbb9bfb23} },},\n-/**/                 {{{0xf834d3a1, 0x3fc67fff} },\n-/**/                  {{0x8ec85952, 0x3fc6bc11} },\n-/**/                  {{0x62cf2268, 0x4016854c} },\n-/**/                  {{0x82e39e04, 0x3b9ee53b} },},\n-/**/                 {{{0xfd9106ea, 0x3fc6ffff} },\n-/**/                  {{0xf298f6f7, 0x3fc74032} },\n-/**/                  {{0x1f4f84a9, 0x40160551} },\n-/**/                  {{0x112634b8, 0xbbb59c4a} },},\n-/**/                 {{{0x0f649a4f, 0x3fc78000} },\n-/**/                  {{0x6ca53abc, 0x3fc7c484} },\n-/**/                  {{0x4809d175, 0x40158ab9} },\n-/**/                  {{0x73d3cd2e, 0x3bc91c75} },},\n-/**/                 {{{0xef06bbd8, 0x3fc7ffff} },\n-/**/                  {{0xdf7d76ad, 0x3fc84906} },\n-/**/                  {{0xdd2b30a6, 0x4015152e} },\n-/**/                  {{0x084c3eef, 0xbbbfa2da} },},\n-/**/                 {{{0x021c6334, 0x3fc88000} },\n-/**/                  {{0xd965f986, 0x3fc8cdbb} },\n-/**/                  {{0x51b74296, 0x4014a462} },\n-/**/                  {{0x74dcfe0b, 0xbb9ec02e} },},\n-/**/                 {{{0xf38d0756, 0x3fc8ffff} },\n-/**/                  {{0x28e173c7, 0x3fc952a4} },\n-/**/                  {{0x17b59ebd, 0x4014380b} },\n-/**/                  {{0xb77589f0, 0xbbcd0f1c} },},\n-/**/                 {{{0x104efca1, 0x3fc98000} },\n-/**/                  {{0x4644d23c, 0x3fc9d7c1} },\n-/**/                  {{0xcb1eabd5, 0x4013cfe5} },\n-/**/                  {{0xea188d9e, 0xbbd5d6f7} },},\n-/**/                 {{{0x09417b30, 0x3fca0000} },\n-/**/                  {{0x096d76aa, 0x3fca5d14} },\n-/**/                  {{0xb3723db0, 0x40136bb4} },\n-/**/                  {{0xfbf3979c, 0x3bbe3e0d} },},\n-/**/                 {{{0xeb1c23ec, 0x3fca7fff} },\n-/**/                  {{0xab60288d, 0x3fcae29d} },\n-/**/                  {{0x783071d7, 0x40130b3e} },\n-/**/                  {{0x3d5384bf, 0xbbc7dd82} },},\n-/**/                 {{{0xfb171c13, 0x3fcaffff} },\n-/**/                  {{0xa221a96b, 0x3fcb685f} },\n-/**/                  {{0xd8c0747d, 0x4012ae4d} },\n-/**/                  {{0xd5554972, 0x3bd4644b} },},\n-/**/                 {{{0x0aba44be, 0x3fcb8000} },\n-/**/                  {{0xecdf241f, 0x3fcbee5a} },\n-/**/                  {{0xc6fad63b, 0x401254b1} },\n-/**/                  {{0xd092b85a, 0x3ba41916} },},\n-/**/                 {{{0x113d2a3e, 0x3fcc0000} },\n-/**/                  {{0xb3e92543, 0x3fcc7490} },\n-/**/                  {{0x9a62c035, 0x4011fe3c} },\n-/**/                  {{0x41a03739, 0xbba3cc39} },},\n-/**/                 {{{0xf49e00ce, 0x3fcc7fff} },\n-/**/                  {{0x0f59eab0, 0x3fccfb02} },\n-/**/                  {{0xe956a631, 0x4011aac3} },\n-/**/                  {{0xbfa8cb5b, 0xbbb7a383} },},\n-/**/                 {{{0x05f611ab, 0x3fcd0000} },\n-/**/                  {{0x89e6844e, 0x3fcd81b0} },\n-/**/                  {{0xf391268d, 0x40115a1f} },\n-/**/                  {{0xb2dc91f3, 0x3bd39b5c} },},\n-/**/                 {{{0x14764ceb, 0x3fcd8000} },\n-/**/                  {{0x27debf0d, 0x3fce089d} },\n-/**/                  {{0xfbc84740, 0x40110c2b} },\n-/**/                  {{0x84712510, 0x3bc14d4d} },},\n-/**/                 {{{0x14bcea76, 0x3fce0000} },\n-/**/                  {{0x16dbc820, 0x3fce8fc9} },\n-/**/                  {{0xa00ca48e, 0x4010c0c5} },\n-/**/                  {{0x640f1b9e, 0xbbd33788} },},\n-/**/                 {{{0xfd7995bd, 0x3fce7fff} },\n-/**/                  {{0x88b50424, 0x3fcf1735} },\n-/**/                  {{0xbe02169a, 0x401077cc} },\n-/**/                  {{0x221fdf77, 0xbbb61fee} },},\n-/**/                 {{{0x0cc35436, 0x3fcf0000} },\n-/**/                  {{0xfd21a40b, 0x3fcf9ee3} },\n-/**/                  {{0x1ee7ffe8, 0x40103123} },\n-/**/                  {{0xc79ff5c1, 0x3bd427e3} },},\n-/**/                 {{{0x01d1da33, 0x3fcf8000} },\n-/**/                  {{0xb7dbe15c, 0x3fd0136a} },\n-/**/                  {{0x77d559e5, 0x400fd959} },\n-/**/                  {{0xd67948d7, 0x3bb0c6a1} },},\n-/**/                 {{{0x060c13b2, 0x3fd00000} },\n-/**/                  {{0xaaad4f18, 0x3fd05785} },\n-/**/                  {{0x2675d182, 0x400f549e} },\n-/**/                  {{0x18f0dd10, 0xbbc15208} },},\n-/**/                 {{{0x03885492, 0x3fd04000} },\n-/**/                  {{0x660542d7, 0x3fd09bc3} },\n-/**/                  {{0xdf3f5fec, 0x400ed3e2} },\n-/**/                  {{0xb883ae62, 0xbbd95657} },},\n-/**/                 {{{0x052f5a13, 0x3fd08000} },\n-/**/                  {{0x9a195045, 0x3fd0e024} },\n-/**/                  {{0xfa68f2c8, 0x400e56f8} },\n-/**/                  {{0x5a543e8e, 0x3bded7ba} },},\n-/**/                 {{{0x02ba1af5, 0x3fd0c000} },\n-/**/                  {{0xe2e7f24b, 0x3fd124a9} },\n-/**/                  {{0xbffe633f, 0x400dddb4} },\n-/**/                  {{0x0c60278f, 0xbbdcba86} },},\n-/**/                 {{{0xf76642c1, 0x3fd0ffff} },\n-/**/                  {{0xe162ffe6, 0x3fd16953} },\n-/**/                  {{0x0311d5d5, 0x400d67ed} },\n-/**/                  {{0xe40c5f9e, 0x3b7b1f4a} },},\n-/**/                 {{{0x033602f0, 0x3fd14000} },\n-/**/                  {{0x5f49508e, 0x3fd1ae23} },\n-/**/                  {{0xb8708266, 0x400cf57a} },\n-/**/                  {{0x8620f301, 0xbbd6a6c2} },},\n-/**/                 {{{0xfefd1a13, 0x3fd17fff} },\n-/**/                  {{0xdb2a9ba1, 0x3fd1f318} },\n-/**/                  {{0x8d11009e, 0x400c8639} },\n-/**/                  {{0x69b21d3b, 0x3bd3a9c6} },},\n-/**/                 {{{0xf718365d, 0x3fd1bfff} },\n-/**/                  {{0x0c41e3ac, 0x3fd23835} },\n-/**/                  {{0xe02be47c, 0x400c1a06} },\n-/**/                  {{0x129e8cd1, 0x3bdb961a} },},\n-/**/                 {{{0xff001e00, 0x3fd1ffff} },\n-/**/                  {{0xb2f6395e, 0x3fd27d78} },\n-/**/                  {{0xf2fe9a85, 0x400bb0c1} },\n-/**/                  {{0xe68fd7d8, 0x3be074a9} },},\n-/**/                 {{{0xfe425a6a, 0x3fd23fff} },\n-/**/                  {{0x618faabe, 0x3fd2c2e4} },\n-/**/                  {{0x190b18df, 0x400b4a4c} },\n-/**/                  {{0xf615aad1, 0xbbdf0d1f} },},\n-/**/                 {{{0x059ec1db, 0x3fd28000} },\n-/**/                  {{0xd8583884, 0x3fd30878} },\n-/**/                  {{0x0cd82bc2, 0x400ae688} },\n-/**/                  {{0x141c1f8d, 0xbbd563c3} },},\n-/**/                 {{{0x000dd081, 0x3fd2c000} },\n-/**/                  {{0xaffdb6d8, 0x3fd34e36} },\n-/**/                  {{0x5270fc15, 0x400a855a} },\n-/**/                  {{0x9f2cdafd, 0xbbc6d88d} },},\n-/**/                 {{{0xfc1dcd2b, 0x3fd2ffff} },\n-/**/                  {{0xa95875bc, 0x3fd3941e} },\n-/**/                  {{0xaa9502b6, 0x400a26a8} },\n-/**/                  {{0x8389b15c, 0xbbe13cad} },},\n-/**/                 {{{0xf6c0d4a0, 0x3fd33fff} },\n-/**/                  {{0x739845f5, 0x3fd3da31} },\n-/**/                  {{0x4d2573a0, 0x4009ca5a} },\n-/**/                  {{0xacaee379, 0xbbc71636} },},\n-/**/                 {{{0x06b16793, 0x3fd38000} },\n-/**/                  {{0xdbc088f0, 0x3fd4206f} },\n-/**/                  {{0x9344e33a, 0x40097057} },\n-/**/                  {{0x1d7a4f81, 0xbbc2c052} },},\n-/**/                 {{{0x07358fa3, 0x3fd3c000} },\n-/**/                  {{0x6f23311d, 0x3fd466da} },\n-/**/                  {{0x5aa612ea, 0x4009188a} },\n-/**/                  {{0x685e8edc, 0x3b8653a5} },},\n-/**/                 {{{0xfc3b18cf, 0x3fd3ffff} },\n-/**/                  {{0xe9282e6b, 0x3fd4ad71} },\n-/**/                  {{0x641e643d, 0x4008c2dd} },\n-/**/                  {{0x3f567c64, 0x3b95f0ef} },},\n-/**/                 {{{0x000dd2a8, 0x3fd44000} },\n-/**/                  {{0x1fa3f2d1, 0x3fd4f437} },\n-/**/                  {{0x6072f821, 0x40086f3c} },\n-/**/                  {{0x95ff68b5, 0x3bb68efa} },},\n-/**/                 {{{0xfbb43713, 0x3fd47fff} },\n-/**/                  {{0xb3ac333c, 0x3fd53b2a} },\n-/**/                  {{0x3da56692, 0x40081d94} },\n-/**/                  {{0x2985fd3f, 0xbbbf4d7f} },},\n-/**/                 {{{0xfb113bf4, 0x3fd4bfff} },\n-/**/                  {{0x6e8ed9c2, 0x3fd5824d} },\n-/**/                  {{0xa8add00f, 0x4007cdd2} },\n-/**/                  {{0x1c9b3657, 0x3bcf478a} },},\n-/**/                 {{{0xf7f087c9, 0x3fd4ffff} },\n-/**/                  {{0x07446496, 0x3fd5c9a0} },\n-/**/                  {{0x444588eb, 0x40077fe6} },\n-/**/                  {{0xa4eabb0c, 0xbbc177dc} },},\n-/**/                 {{{0x088b3814, 0x3fd54000} },\n-/**/                  {{0x564125f9, 0x3fd61123} },\n-/**/                  {{0x6281a765, 0x400733be} },\n-/**/                  {{0xf57051c4, 0xbbc2c52c} },},\n-/**/                 {{{0xf7d55966, 0x3fd57fff} },\n-/**/                  {{0xe194a5d5, 0x3fd658d7} },\n-/**/                  {{0x73b47d1f, 0x4006e94b} },\n-/**/                  {{0xf9996dc6, 0x3bda2fcf} },},\n-/**/                 {{{0x08bf2490, 0x3fd5c000} },\n-/**/                  {{0xb775b28d, 0x3fd6a0be} },\n-/**/                  {{0x15b6ec28, 0x4006a07e} },\n-/**/                  {{0xaa5285b8, 0xbbe0ca90} },},\n-/**/                 {{{0x09fa853f, 0x3fd60000} },\n-/**/                  {{0x65a66cfd, 0x3fd6e8d8} },\n-/**/                  {{0x1c701269, 0x40065948} },\n-/**/                  {{0x8591e13a, 0x3bd9ea95} },},\n-/**/                 {{{0x07595fca, 0x3fd64000} },\n-/**/                  {{0xc0556a7c, 0x3fd73125} },\n-/**/                  {{0xbaae9d02, 0x4006139b} },\n-/**/                  {{0x40152b83, 0x3bd88aff} },},\n-/**/                 {{{0x031687da, 0x3fd68000} },\n-/**/                  {{0x92e2cfd0, 0x3fd779a7} },\n-/**/                  {{0xcae0882b, 0x4005cf6b} },\n-/**/                  {{0x9f439451, 0xbbd8a4a2} },},\n-/**/                 {{{0xf5c8cfe2, 0x3fd6bfff} },\n-/**/                  {{0x9fb452ed, 0x3fd7c25e} },\n-/**/                  {{0xc561f1cd, 0x40058cab} },\n-/**/                  {{0xf6a37d74, 0xbbe371a6} },},\n-/**/                 {{{0xf81df231, 0x3fd6ffff} },\n-/**/                  {{0xcfb4dab5, 0x3fd80b4b} },\n-/**/                  {{0x8d3ca5d3, 0x40054b4f} },\n-/**/                  {{0x679dc99f, 0x3bcb4686} },},\n-/**/                 {{{0xfa71385e, 0x3fd73fff} },\n-/**/                  {{0xe007a9b6, 0x3fd8546f} },\n-/**/                  {{0xb3b22176, 0x40050b4b} },\n-/**/                  {{0xa5c73477, 0xbbcd1540} },},\n-/**/                 {{{0x024a9c2b, 0x3fd78000} },\n-/**/                  {{0xa7fcf5cf, 0x3fd89dcb} },\n-/**/                  {{0x3159cbe1, 0x4004cc95} },\n-/**/                  {{0xd58a6ad0, 0xbbdc25ea} },},\n-/**/                 {{{0x02eb62b8, 0x3fd7c000} },\n-/**/                  {{0xec0ba5cf, 0x3fd8e75f} },\n-/**/                  {{0x8731eeea, 0x40048f21} },\n-/**/                  {{0xcc1adafb, 0xbbc1cb73} },},\n-/**/                 {{{0x054a52d1, 0x3fd80000} },\n-/**/                  {{0x8bb822e9, 0x3fd9312d} },\n-/**/                  {{0x9170a729, 0x400452e6} },\n-/**/                  {{0xeac002ee, 0xbbd8bb17} },},\n-/**/                 {{{0xf93a00a3, 0x3fd83fff} },\n-/**/                  {{0x4bb9ad2a, 0x3fd97b35} },\n-/**/                  {{0xae924e7f, 0x400417da} },\n-/**/                  {{0x9a378cc7, 0x3bd4b800} },},\n-/**/                 {{{0xfbdc91c1, 0x3fd87fff} },\n-/**/                  {{0x2771b601, 0x3fd9c578} },\n-/**/                  {{0x78855799, 0x4003ddf4} },\n-/**/                  {{0xa00445d9, 0x3bd9077d} },},\n-/**/                 {{{0xf6d215e6, 0x3fd8bfff} },\n-/**/                  {{0xe0ea4a0b, 0x3fda0ff6} },\n-/**/                  {{0x189a0989, 0x4003a52b} },\n-/**/                  {{0x89c0613d, 0xbbda6831} },},\n-/**/                 {{{0x02f734ef, 0x3fd90000} },\n-/**/                  {{0x736bf579, 0x3fda5ab2} },\n-/**/                  {{0xe9244ca6, 0x40036d75} },\n-/**/                  {{0x4b722377, 0x3be3a6d8} },},\n-/**/                 {{{0x04eef8b4, 0x3fd94000} },\n-/**/                  {{0x9fb6e3d0, 0x3fdaa5ab} },\n-/**/                  {{0xc9089cb7, 0x400336cc} },\n-/**/                  {{0x22cc00bb, 0x3b9f6963} },},\n-/**/                 {{{0x041ec76a, 0x3fd98000} },\n-/**/                  {{0x5176c7e4, 0x3fdaf0e3} },\n-/**/                  {{0xcb0b9506, 0x40030127} },\n-/**/                  {{0x5385a849, 0x3bb1ffdb} },},\n-/**/                 {{{0x08044e47, 0x3fd9c000} },\n-/**/                  {{0x77071224, 0x3fdb3c5a} },\n-/**/                  {{0x50d75ec7, 0x4002cc7f} },\n-/**/                  {{0x78effc8a, 0xbbb0fade} },},\n-/**/                 {{{0x01f8235b, 0x3fda0000} },\n-/**/                  {{0xe725782e, 0x3fdb8811} },\n-/**/                  {{0x18fbfb37, 0x400298cc} },\n-/**/                  {{0x3b50e71b, 0xbbe55ed3} },},\n-/**/                 {{{0xfb8c6f08, 0x3fda3fff} },\n-/**/                  {{0x97b086f3, 0x3fdbd40a} },\n-/**/                  {{0x154de04b, 0x40026607} },\n-/**/                  {{0x455faae3, 0xbbdec65e} },},\n-/**/                 {{{0xfb3d63e1, 0x3fda7fff} },\n-/**/                  {{0x7d9a3b8a, 0x3fdc2045} },\n-/**/                  {{0x7e60bfbb, 0x40023429} },\n-/**/                  {{0x154ebd33, 0x3be3001c} },},\n-/**/                 {{{0xf5f45c48, 0x3fdabfff} },\n-/**/                  {{0x7b8d45e6, 0x3fdc6cc3} },\n-/**/                  {{0xdb1ace69, 0x4002032c} },\n-/**/                  {{0x3ed33616, 0xbbe5ebf8} },},\n-/**/                 {{{0x0508b34c, 0x3fdb0000} },\n-/**/                  {{0xa27e8d37, 0x3fdcb985} },\n-/**/                  {{0xd4459a2b, 0x4001d30a} },\n-/**/                  {{0xae61e2d1, 0xbbd01432} },},\n-/**/                 {{{0x0a84710c, 0x3fdb4000} },\n-/**/                  {{0xc3e50155, 0x3fdd068c} },\n-/**/                  {{0x775034dd, 0x4001a3bd} },\n-/**/                  {{0x58e0e228, 0xbbe80b1e} },},\n-/**/                 {{{0xf692e9d8, 0x3fdb7fff} },\n-/**/                  {{0xc49d6627, 0x3fdd53d9} },\n-/**/                  {{0xfe18066a, 0x4001753e} },\n-/**/                  {{0xf760d33e, 0xbbb004c8} },},\n-/**/                 {{{0x0280f14d, 0x3fdbc000} },\n-/**/                  {{0xe4e81013, 0x3fdda16d} },\n-/**/                  {{0xa38ea052, 0x40014789} },\n-/**/                  {{0x27c9c4ea, 0x3be848bc} },},\n-/**/                 {{{0x001121d1, 0x3fdc0000} },\n-/**/                  {{0xeac018f0, 0x3fddef49} },\n-/**/                  {{0x20b8be0c, 0x40011a98} },\n-/**/                  {{0xd0d6010e, 0xbbe1527e} },},\n-/**/                 {{{0xfef662aa, 0x3fdc3fff} },\n-/**/                  {{0xea0c7070, 0x3fde3d6e} },\n-/**/                  {{0x32f46ccd, 0x4000ee65} },\n-/**/                  {{0x189a000d, 0x3be8d241} },},\n-/**/                 {{{0x09845818, 0x3fdc8000} },\n-/**/                  {{0xf36a8b1b, 0x3fde8bdd} },\n-/**/                  {{0xcac73476, 0x4000c2eb} },\n-/**/                  {{0x12bed284, 0x3bd221f7} },},\n-/**/                 {{{0xfb0493bf, 0x3fdcbfff} },\n-/**/                  {{0xe0c60d10, 0x3fdeda97} },\n-/**/                  {{0x251c7836, 0x40009827} },\n-/**/                  {{0x6eec41b7, 0xbbe0bd54} },},\n-/**/                 {{{0xfd52961f, 0x3fdcffff} },\n-/**/                  {{0xefb3e44b, 0x3fdf299d} },\n-/**/                  {{0x74e459f5, 0x40006e12} },\n-/**/                  {{0xe969c82f, 0xbbd93f77} },},\n-/**/                 {{{0xfe2319a4, 0x3fdd3fff} },\n-/**/                  {{0x17139490, 0x3fdf78f1} },\n-/**/                  {{0x3e737e94, 0x400044a9} },\n-/**/                  {{0x49594b7a, 0xbb91e7cc} },},\n-/**/                 {{{0xfa4de596, 0x3fdd7fff} },\n-/**/                  {{0x638f49e8, 0x3fdfc892} },\n-/**/                  {{0x231057a5, 0x40001be7} },\n-/**/                  {{0xf5af9f5f, 0x3bd482b0} },},\n-/**/                 {{{0xfe729a69, 0x3fddbfff} },\n-/**/                  {{0x7c6ab019, 0x3fe00c41} },\n-/**/                  {{0xbf612660, 0x3fffe78f} },\n-/**/                  {{0x00da681e, 0x3bea5cda} },},\n-/**/                 {{{0x09d66802, 0x3fde0000} },\n-/**/                  {{0xf6b883cf, 0x3fe03461} },\n-/**/                  {{0xbc05a87c, 0x3fff988e} },\n-/**/                  {{0xf2372669, 0xbbe06c33} },},\n-/**/                 {{{0xfb211657, 0x3fde3fff} },\n-/**/                  {{0x191db8e8, 0x3fe05cab} },\n-/**/                  {{0x7bcfe6be, 0x3fff4ac3} },\n-/**/                  {{0x5ed8d35b, 0xbbd5d51f} },},\n-/**/                 {{{0x0a3f068a, 0x3fde8000} },\n-/**/                  {{0x95fb54f0, 0x3fe0851d} },\n-/**/                  {{0x144ca408, 0x3ffefe26} },\n-/**/                  {{0xa2c169c5, 0xbbc7c894} },},\n-/**/                 {{{0x01adb060, 0x3fdec000} },\n-/**/                  {{0xdc7b54f9, 0x3fe0adb9} },\n-/**/                  {{0x5ebe52a7, 0x3ffeb2af} },\n-/**/                  {{0x312c5ffd, 0x3bd4e740} },},\n-/**/                 {{{0xff5c0d01, 0x3fdeffff} },\n-/**/                  {{0x92550a8d, 0x3fe0d680} },\n-/**/                  {{0x0d71fdf0, 0x3ffe6858} },\n-/**/                  {{0x96b35499, 0x3bddd8a6} },},\n-/**/                 {{{0xf93d5fcc, 0x3fdf3fff} },\n-/**/                  {{0x45cb4374, 0x3fe0ff72} },\n-/**/                  {{0x3cce5040, 0x3ffe1f19} },\n-/**/                  {{0x7c1efab4, 0xbbc9f0ec} },},\n-/**/                 {{{0xfa0dd18f, 0x3fdf7fff} },\n-/**/                  {{0x944dd508, 0x3fe1288f} },\n-/**/                  {{0x298b874d, 0x3ffdd6ec} },\n-/**/                  {{0x9642a0a6, 0x3bea6ebd} },},\n-/**/                 {{{0xfd3a9f1a, 0x3fdfbfff} },\n-/**/                  {{0x13750f3e, 0x3fe151d9} },\n-/**/                  {{0x5806a27e, 0x3ffd8fca} },\n-/**/                  {{0xfc65ac7a, 0x3bda2a03} },},\n-/**/                 {{{0xfc481400, 0x3fdfffff} },\n-/**/                  {{0x598944ca, 0x3fe17b4f} },\n-/**/                  {{0x82532170, 0x3ffd49ad} },\n-/**/                  {{0x3d236dc3, 0x3bc4412e} },},\n-/**/                 {{{0xff53786c, 0x3fe01fff} },\n-/**/                  {{0x07d83d47, 0x3fe1a4f3} },\n-/**/                  {{0x851bffeb, 0x3ffd048f} },\n-/**/                  {{0x29f81b14, 0x3bd1589d} },},\n-/**/                 {{{0xfee301b7, 0x3fe03fff} },\n-/**/                  {{0xb8a6a382, 0x3fe1cec4} },\n-/**/                  {{0x7c519db6, 0x3ffcc06a} },\n-/**/                  {{0x5b24d6b2, 0x3bd370e6} },},\n-/**/                 {{{0x006e36bf, 0x3fe06000} },\n-/**/                  {{0x114eb8be, 0x3fe1f8c5} },\n-/**/                  {{0xa34d6786, 0x3ffc7d38} },\n-/**/                  {{0x4b98c1d4, 0xbbea92de} },},\n-/**/                 {{{0xfd60aa43, 0x3fe07fff} },\n-/**/                  {{0xabeccecb, 0x3fe222f4} },\n-/**/                  {{0x77342ac4, 0x3ffc3af4} },\n-/**/                  {{0x03a5c2c2, 0xbbdd47f6} },},\n-/**/                 {{{0x037762e8, 0x3fe0a000} },\n-/**/                  {{0x3f99efe8, 0x3fe24d54} },\n-/**/                  {{0x75f54fab, 0x3ffbf998} },\n-/**/                  {{0x15771a46, 0x3bedf7f4} },},\n-/**/                 {{{0xff1c6921, 0x3fe0bfff} },\n-/**/                  {{0x598e35d0, 0x3fe277e4} },\n-/**/                  {{0x8addd186, 0x3ffbb91f} },\n-/**/                  {{0x5e0e5a73, 0x3be0f16c} },},\n-/**/                 {{{0xff07154b, 0x3fe0dfff} },\n-/**/                  {{0xb6bc3986, 0x3fe2a2a5} },\n-/**/                  {{0x8301646d, 0x3ffb7984} },\n-/**/                  {{0xbbaa5310, 0xbbf02dd0} },},\n-/**/                 {{{0x02fcdda4, 0x3fe10000} },\n-/**/                  {{0x02a59f1e, 0x3fe2cd99} },\n-/**/                  {{0x705219bf, 0x3ffb3ac2} },\n-/**/                  {{0x112fa616, 0xbbe59357} },},\n-/**/                 {{{0x01ce1140, 0x3fe12000} },\n-/**/                  {{0xdf0a67c2, 0x3fe2f8be} },\n-/**/                  {{0x9ab8ae2a, 0x3ffafcd4} },\n-/**/                  {{0x9303f346, 0x3be2c542} },},\n-/**/                 {{{0x04d0f355, 0x3fe14000} },\n-/**/                  {{0x08fcc7bf, 0x3fe32418} },\n-/**/                  {{0x497b9a36, 0x3ffabfb6} },\n-/**/                  {{0xb5a59234, 0x3bebc044} },},\n-/**/                 {{{0x00fb0c8a, 0x3fe16000} },\n-/**/                  {{0x2471618b, 0x3fe34fa5} },\n-/**/                  {{0x0d26d117, 0x3ffa8363} },\n-/**/                  {{0x3f7bb7c9, 0xbbdbfbb2} },},\n-/**/                 {{{0x026f10b3, 0x3fe18000} },\n-/**/                  {{0xf7579056, 0x3fe37b66} },\n-/**/                  {{0x6b4cf4b1, 0x3ffa47d6} },\n-/**/                  {{0xaf0b5de9, 0x3bf0f6b4} },},\n-/**/                 {{{0xfd0978f8, 0x3fe19fff} },\n-/**/                  {{0x290cc78c, 0x3fe3a75e} },\n-/**/                  {{0x36c21315, 0x3ffa0d0c} },\n-/**/                  {{0xa296b262, 0x3beb2129} },},\n-/**/                 {{{0xfd94840b, 0x3fe1bfff} },\n-/**/                  {{0x85b4e4a4, 0x3fe3d38b} },\n-/**/                  {{0x32f2ecef, 0x3ff9d300} },\n-/**/                  {{0xb9bb7d74, 0xbbdbab1a} },},\n-/**/                 {{{0xfbda1ea1, 0x3fe1dfff} },\n-/**/                  {{0xbf3cee2f, 0x3fe3ffef} },\n-/**/                  {{0x6770fed8, 0x3ff999ae} },\n-/**/                  {{0xb4ace9a4, 0x3bda0bdc} },},\n-/**/                 {{{0xfc989533, 0x3fe1ffff} },\n-/**/                  {{0x9c27900c, 0x3fe42c8b} },\n-/**/                  {{0xe0d9f1ac, 0x3ff96112} },\n-/**/                  {{0x2fa2d81a, 0xbbee19eb} },},\n-/**/                 {{{0x012b8d26, 0x3fe22000} },\n-/**/                  {{0xe11975ca, 0x3fe4595f} },\n-/**/                  {{0xcdaa4e80, 0x3ff92929} },\n-/**/                  {{0xacc82d4b, 0x3bf23382} },},\n-/**/                 {{{0x04f4d6af, 0x3fe24000} },\n-/**/                  {{0x4d224131, 0x3fe4866d} },\n-/**/                  {{0x815c34e8, 0x3ff8f1ef} },\n-/**/                  {{0x3b740a99, 0xbbd0c6ff} },},\n-/**/                 {{{0xfcc07bda, 0x3fe25fff} },\n-/**/                  {{0x98b7d010, 0x3fe4b3b4} },\n-/**/                  {{0x73e7ffa1, 0x3ff8bb60} },\n-/**/                  {{0x1ad7a9c2, 0x3bebc31b} },},\n-/**/                 {{{0x042d9639, 0x3fe28000} },\n-/**/                  {{0xb64540d1, 0x3fe4e136} },\n-/**/                  {{0xf4374938, 0x3ff88578} },\n-/**/                  {{0x1b85e901, 0x3be36de9} },},\n-/**/                 {{{0x03be29a0, 0x3fe2a000} },\n-/**/                  {{0x52bffd96, 0x3fe50ef4} },\n-/**/                  {{0xc0042c06, 0x3ff85035} },\n-/**/                  {{0x76f5efbd, 0x3be15d01} },},\n-/**/                 {{{0xfaa91f12, 0x3fe2bfff} },\n-/**/                  {{0x3e2f4e0d, 0x3fe53cee} },\n-/**/                  {{0x8542df07, 0x3ff81b93} },\n-/**/                  {{0x17662a2b, 0x3be555cd} },},\n-/**/                 {{{0xfe884891, 0x3fe2dfff} },\n-/**/                  {{0x6c1a2470, 0x3fe56b25} },\n-/**/                  {{0xe422ea70, 0x3ff7e78e} },\n-/**/                  {{0xbd030c11, 0x3bf03504} },},\n-/**/                 {{{0xfe87152b, 0x3fe2ffff} },\n-/**/                  {{0x9beaaaa1, 0x3fe5999a} },\n-/**/                  {{0xd18fe9b3, 0x3ff7b424} },\n-/**/                  {{0x773e0e64, 0xbb649a5f} },},\n-/**/                 {{{0xffc1a721, 0x3fe31fff} },\n-/**/                  {{0xafe0e564, 0x3fe5c84e} },\n-/**/                  {{0x338db8d4, 0x3ff78152} },\n-/**/                  {{0x5da8e935, 0x3beaf428} },},\n-/**/                 {{{0xff70a372, 0x3fe33fff} },\n-/**/                  {{0x82191d64, 0x3fe5f742} },\n-/**/                  {{0x1122bcae, 0x3ff74f14} },\n-/**/                  {{0xdee4bfaf, 0x3bdb1c4b} },},\n-/**/                 {{{0x0436e836, 0x3fe36000} },\n-/**/                  {{0xfde6ccff, 0x3fe62676} },\n-/**/                  {{0x7644252c, 0x3ff71d67} },\n-/**/                  {{0xe08c3afb, 0xbbec3d10} },},\n-/**/                 {{{0xfcbe9641, 0x3fe37fff} },\n-/**/                  {{0xee9ffdaf, 0x3fe655ec} },\n-/**/                  {{0xa6fc0515, 0x3ff6ec49} },\n-/**/                  {{0x2ed29567, 0x3bdda453} },},\n-/**/                 {{{0xffb6d6ca, 0x3fe39fff} },\n-/**/                  {{0x5e67a1e1, 0x3fe685a5} },\n-/**/                  {{0xbc2ae969, 0x3ff6bbb7} },\n-/**/                  {{0x2ef43882, 0x3becbf7b} },},\n-/**/                 {{{0x04934fec, 0x3fe3c000} },\n-/**/                  {{0x2cc07d75, 0x3fe6b5a1} },\n-/**/                  {{0x10b02ef8, 0x3ff68baf} },\n-/**/                  {{0xfeb7cabd, 0xbbe7c8fb} },},\n-/**/                 {{{0x03f5cf7f, 0x3fe3e000} },\n-/**/                  {{0x3e59def6, 0x3fe6e5e1} },\n-/**/                  {{0x0e61500f, 0x3ff65c2d} },\n-/**/                  {{0x035f7845, 0xbbe30ba4} },},\n-/**/                 {{{0x05280ad9, 0x3fe40000} },\n-/**/                  {{0x91ab4c3e, 0x3fe71666} },\n-/**/                  {{0x19f01c90, 0x3ff62d2f} },\n-/**/                  {{0xffe95f6a, 0xbbf1e9f5} },},\n-/**/                 {{{0x049efb65, 0x3fe42000} },\n-/**/                  {{0x18af3b9d, 0x3fe74732} },\n-/**/                  {{0xb86465e4, 0x3ff5feb2} },\n-/**/                  {{0x280d591e, 0x3bc4cad7} },},\n-/**/                 {{{0x0035ccb6, 0x3fe44000} },\n-/**/                  {{0xcb4ff1e5, 0x3fe77844} },\n-/**/                  {{0x7c455428, 0x3ff5d0b5} },\n-/**/                  {{0x7ba5617c, 0x3bed8c18} },},\n-/**/                 {{{0x03346717, 0x3fe46000} },\n-/**/                  {{0xba258778, 0x3fe7a99f} },\n-/**/                  {{0xf4392254, 0x3ff5a334} },\n-/**/                  {{0xfc84a570, 0xbbefd14a} },},\n-/**/                 {{{0x03002575, 0x3fe48000} },\n-/**/                  {{0xd836768f, 0x3fe7db43} },\n-/**/                  {{0xdcf97e0c, 0x3ff5762e} },\n-/**/                  {{0x5f5df49e, 0xbbdd7eba} },},\n-/**/                 {{{0x055bf381, 0x3fe4a000} },\n-/**/                  {{0x35edeefa, 0x3fe80d32} },\n-/**/                  {{0xea46e31f, 0x3ff549a0} },\n-/**/                  {{0x76823eac, 0xbbdba522} },},\n-/**/                 {{{0x04ce10e3, 0x3fe4c000} },\n-/**/                  {{0xd67dc1a8, 0x3fe83f6b} },\n-/**/                  {{0xed82bcc4, 0x3ff51d88} },\n-/**/                  {{0x077d29ea, 0xbbeae92d} },},\n-/**/                 {{{0x016c60e1, 0x3fe4e000} },\n-/**/                  {{0xca0aaf31, 0x3fe871f1} },\n-/**/                  {{0xbdacbf16, 0x3ff4f1e4} },\n-/**/                  {{0x46ee425e, 0x3be82958} },},\n-/**/                 {{{0xff966f0a, 0x3fe4ffff} },\n-/**/                  {{0x2bff2dae, 0x3fe8a4c5} },\n-/**/                  {{0x3917657e, 0x3ff4c6b2} },\n-/**/                  {{0x5c86c705, 0xbbf127c2} },},\n-/**/                 {{{0x0076e6eb, 0x3fe52000} },\n-/**/                  {{0x175651e8, 0x3fe8d7e7} },\n-/**/                  {{0x4f459b05, 0x3ff49bef} },\n-/**/                  {{0x4181bbfc, 0xbbb1e9d1} },},\n-/**/                 {{{0x03d12d3b, 0x3fe54000} },\n-/**/                  {{0xa976ed56, 0x3fe90b58} },\n-/**/                  {{0xfdf24af4, 0x3ff47199} },\n-/**/                  {{0xc30decaf, 0x3be38c17} },},\n-/**/                 {{{0xfce7fa8d, 0x3fe55fff} },\n-/**/                  {{0xf03a3a09, 0x3fe93f1a} },\n-/**/                  {{0x5f13234b, 0x3ff447b0} },\n-/**/                  {{0x70df7e20, 0x3bf1b8b2} },},\n-/**/                 {{{0x0331b46a, 0x3fe58000} },\n-/**/                  {{0x38e83134, 0x3fe9732f} },\n-/**/                  {{0x68d8b41b, 0x3ff41e30} },\n-/**/                  {{0xb90bc28b, 0xbbee24d8} },},\n-/**/                 {{{0xfc14848e, 0x3fe59fff} },\n-/**/                  {{0x8471b489, 0x3fe9a796} },\n-/**/                  {{0x5de3aa73, 0x3ff3f518} },\n-/**/                  {{0xe0761536, 0xbbecacd9} },},\n-/**/                 {{{0xfb7cd395, 0x3fe5bfff} },\n-/**/                  {{0x24a8b955, 0x3fe9dc52} },\n-/**/                  {{0x4f8fff15, 0x3ff3cc66} },\n-/**/                  {{0x82045611, 0xbbf67c97} },},\n-/**/                 {{{0x000dcc40, 0x3fe5e000} },\n-/**/                  {{0x4df5b93e, 0x3fea1163} },\n-/**/                  {{0x75853228, 0x3ff3a418} },\n-/**/                  {{0xd481f350, 0xbbf585da} },},\n-/**/                 {{{0x02efd2fc, 0x3fe60000} },\n-/**/                  {{0x30d16323, 0x3fea46cb} },\n-/**/                  {{0x187962ae, 0x3ff37c2d} },\n-/**/                  {{0xa5f77bb0, 0x3bf004c3} },},\n-/**/                 {{{0xfeb8088a, 0x3fe61fff} },\n-/**/                  {{0x053920c0, 0x3fea7c8b} },\n-/**/                  {{0x891769a9, 0x3ff354a2} },\n-/**/                  {{0x3fee3029, 0x3bbc6b30} },},\n-/**/                 {{{0x00f3ca06, 0x3fe64000} },\n-/**/                  {{0x28a1911a, 0x3feab2a4} },\n-/**/                  {{0x0a6f0a4a, 0x3ff32d77} },\n-/**/                  {{0xfac5081a, 0x3bf2a6f8} },},\n-/**/                 {{{0xfe9ec2f4, 0x3fe65fff} },\n-/**/                  {{0xd4ce7239, 0x3feae917} },\n-/**/                  {{0x0751a948, 0x3ff306a9} },\n-/**/                  {{0x51ab9dbd, 0xbbe950b5} },},\n-/**/                 {{{0x03d43966, 0x3fe68000} },\n-/**/                  {{0x708b998a, 0x3feb1fe7} },\n-/**/                  {{0xd7a153c7, 0x3ff2e036} },\n-/**/                  {{0xa1e4a14e, 0x3bdd36e2} },},\n-/**/                 {{{0xfab67783, 0x3fe69fff} },\n-/**/                  {{0x2e575464, 0x3feb5714} },\n-/**/                  {{0x05006cb6, 0x3ff2ba1f} },\n-/**/                  {{0x473c2e31, 0x3bea9a4a} },},\n-/**/                 {{{0xfcb65f89, 0x3fe6bfff} },\n-/**/                  {{0x981efd2f, 0x3feb8e9f} },\n-/**/                  {{0xe948d9f7, 0x3ff2945f} },\n-/**/                  {{0xe802df72, 0xbbca5294} },},\n-/**/                 {{{0xfc5609a9, 0x3fe6dfff} },\n-/**/                  {{0xfaed6ff1, 0x3febc68a} },\n-/**/                  {{0x1533411e, 0x3ff26ef8} },\n-/**/                  {{0xf51bc566, 0xbbf89153} },},\n-/**/                 {{{0xfc4eef86, 0x3fe6ffff} },\n-/**/                  {{0xc62205fe, 0x3febfed7} },\n-/**/                  {{0x0e70978c, 0x3ff249e6} },\n-/**/                  {{0xa2b9ff56, 0x3bc39021} },},\n-/**/                 {{{0x004d98b3, 0x3fe72000} },\n-/**/                  {{0x716968ad, 0x3fec3787} },\n-/**/                  {{0x61be7751, 0x3ff22528} },\n-/**/                  {{0x74ee2211, 0x3befc9c5} },},\n-/**/                 {{{0xfc155075, 0x3fe73fff} },\n-/**/                  {{0x5ec6fd4e, 0x3fec709b} },\n-/**/                  {{0xb5d53311, 0x3ff200bd} },\n-/**/                  {{0xa269ae63, 0x3be28a4d} },},\n-/**/                 {{{0x0498c203, 0x3fe76000} },\n-/**/                  {{0x323d08c1, 0x3fecaa15} },\n-/**/                  {{0x93433f65, 0x3ff1dca4} },\n-/**/                  {{0x14a28fb7, 0x3bf8cae4} },},\n-/**/                 {{{0xff1e5636, 0x3fe77fff} },\n-/**/                  {{0x4147c12c, 0x3fece3f6} },\n-/**/                  {{0xbfe294a8, 0x3ff1b8db} },\n-/**/                  {{0x4b56a744, 0xbbe7e19c} },},\n-/**/                 {{{0x0226d45a, 0x3fe7a000} },\n-/**/                  {{0x4120eb7f, 0x3fed1e40} },\n-/**/                  {{0xd15f8278, 0x3ff19561} },\n-/**/                  {{0x032c5d4c, 0x3be64b28} },},\n-/**/                 {{{0x0250a5aa, 0x3fe7c000} },\n-/**/                  {{0xb112a1e1, 0x3fed58f4} },\n-/**/                  {{0x8a59d565, 0x3ff17235} },\n-/**/                  {{0xb8dc7867, 0xbbe716de} },},\n-/**/                 {{{0x0482f82e, 0x3fe7e000} },\n-/**/                  {{0x3576bdf0, 0x3fed9415} },\n-/**/                  {{0xa22a1c5b, 0x3ff14f55} },\n-/**/                  {{0xe1305604, 0x3bf207e1} },},\n-/**/                 {{{0x0205003e, 0x3fe80000} },\n-/**/                  {{0x64d69ff7, 0x3fedcfa3} },\n-/**/                  {{0xe37eb26f, 0x3ff12cc0} },\n-/**/                  {{0xe32395f8, 0xbbd52ec6} },},\n-/**/                 {{{0xfbf99411, 0x3fe81fff} },\n-/**/                  {{0xebf98f51, 0x3fee0ba0} },\n-/**/                  {{0x16ddd5d6, 0x3ff10a76} },\n-/**/                  {{0x59866045, 0xbbece0d6} },},\n-/**/                 {{{0x0248e3a3, 0x3fe84000} },\n-/**/                  {{0x9bb7f565, 0x3fee480f} },\n-/**/                  {{0xfb84e05c, 0x3ff0e873} },\n-/**/                  {{0x1595df92, 0x3bf4e5e8} },},\n-/**/                 {{{0x0145c157, 0x3fe86000} },\n-/**/                  {{0x0a10b3ab, 0x3fee84f1} },\n-/**/                  {{0x7cbd7b1e, 0x3ff0c6b9} },\n-/**/                  {{0xd5f121d0, 0xbbe19de6} },},\n-/**/                 {{{0x022631b9, 0x3fe88000} },\n-/**/                  {{0x0be1f047, 0x3feec247} },\n-/**/                  {{0x6d0b3ee6, 0x3ff0a545} },\n-/**/                  {{0xa3ba2c6f, 0xbbc272b1} },},\n-/**/                 {{{0x045f7828, 0x3fe8a000} },\n-/**/                  {{0x6c45ba1c, 0x3fef0013} },\n-/**/                  {{0xaf2a0f09, 0x3ff08416} },\n-/**/                  {{0x5b63c799, 0x3be82b56} },},\n-/**/                 {{{0xffc686cf, 0x3fe8bfff} },\n-/**/                  {{0xf03c824b, 0x3fef3e57} },\n-/**/                  {{0x33502220, 0x3ff0632c} },\n-/**/                  {{0x2dbeeb25, 0xbbd039ad} },},\n-/**/                 {{{0xfd8644c6, 0x3fe8dfff} },\n-/**/                  {{0x8774261d, 0x3fef7d16} },\n-/**/                  {{0xdd5b3019, 0x3ff04284} },\n-/**/                  {{0xe1eba933, 0x3bd79f33} },},\n-/**/                 {{{0xfe4e7937, 0x3fe8ffff} },\n-/**/                  {{0x1a99a641, 0x3fefbc51} },\n-/**/                  {{0x9f69840b, 0x3ff0221f} },\n-/**/                  {{0x7beee018, 0xbbea9e84} },},\n-/**/                 {{{0x0435251f, 0x3fe92000} },\n-/**/                  {{0x9eb22390, 0x3feffc09} },\n-/**/                  {{0x6f7c51e8, 0x3ff001fb} },\n-/**/                  {{0x31032e0a, 0xbb5a12e7} },},\n-  };\n-\n-#endif\n-#endif"}, {"sha": "22de5461dc9fb61a0bca9ce504560cb33929dbe1", "filename": "libgcc-math/i386/Makefile.am", "status": "modified", "additions": 1, "deletions": 31, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d3a3b01c3f43635a798a0e03765aef9fdf17e9e/libgcc-math%2Fi386%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d3a3b01c3f43635a798a0e03765aef9fdf17e9e/libgcc-math%2Fi386%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc-math%2Fi386%2FMakefile.am?ref=7d3a3b01c3f43635a798a0e03765aef9fdf17e9e", "patch": "@@ -35,37 +35,7 @@ libsse2_la_SOURCES = \\\n   @srcdir@/../flt-32/e_sqrtf.c \\\n   @srcdir@/../flt-32/s_scalbnf.c \\\n   @srcdir@/../flt-32/s_floorf.c \\\n-  @srcdir@/../flt-32/s_isinff.c \\\n-  @srcdir@/../dbl-64/t_exp.c \\\n-  @srcdir@/../dbl-64/e_asin.c \\\n-  @srcdir@/../dbl-64/e_atan2.c \\\n-  @srcdir@/../dbl-64/s_atan.c \\\n-  @srcdir@/../dbl-64/branred.c \\\n-  @srcdir@/../dbl-64/doasin.c \\\n-  @srcdir@/../dbl-64/dosincos.c \\\n-  @srcdir@/../dbl-64/e_exp.c \\\n-  @srcdir@/../dbl-64/halfulp.c \\\n-  @srcdir@/../dbl-64/k_rem_pio2.c \\\n-  @srcdir@/../dbl-64/e_log10.c \\\n-  @srcdir@/../dbl-64/e_log.c \\\n-  @srcdir@/../dbl-64/mpa.c \\\n-  @srcdir@/../dbl-64/mpatan2.c \\\n-  @srcdir@/../dbl-64/mpatan.c \\\n-  @srcdir@/../dbl-64/mpexp.c \\\n-  @srcdir@/../dbl-64/mplog.c \\\n-  @srcdir@/../dbl-64/mpsqrt.c \\\n-  @srcdir@/../dbl-64/mptan.c \\\n-  @srcdir@/../dbl-64/e_pow.c \\\n-  @srcdir@/../dbl-64/e_rem_pio2.c \\\n-  @srcdir@/../dbl-64/s_sin.c \\\n-  @srcdir@/../dbl-64/sincos32.c \\\n-  @srcdir@/../dbl-64/slowexp.c \\\n-  @srcdir@/../dbl-64/slowpow.c \\\n-  @srcdir@/../dbl-64/e_sqrt.c \\\n-  @srcdir@/../dbl-64/s_tan.c \\\n-  @srcdir@/../dbl-64/s_scalbn.c \\\n-  @srcdir@/../dbl-64/s_floor.c \\\n-  @srcdir@/../dbl-64/s_isinf.c\n+  @srcdir@/../flt-32/s_isinff.c\n \n \n # XXX hack alert"}, {"sha": "c824a62a0e50763cbda29e94af086fc110122c03", "filename": "libgcc-math/i386/Makefile.in", "status": "modified", "additions": 2, "deletions": 285, "changes": 287, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d3a3b01c3f43635a798a0e03765aef9fdf17e9e/libgcc-math%2Fi386%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d3a3b01c3f43635a798a0e03765aef9fdf17e9e/libgcc-math%2Fi386%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc-math%2Fi386%2FMakefile.in?ref=7d3a3b01c3f43635a798a0e03765aef9fdf17e9e", "patch": "@@ -59,20 +59,7 @@ am_libsse2_la_OBJECTS = libsse2_la-e_acosf.lo libsse2_la-e_asinf.lo \\\n \tlibsse2_la-k_sinf.lo libsse2_la-k_tanf.lo \\\n \tlibsse2_la-e_rem_pio2f.lo libsse2_la-e_sqrtf.lo \\\n \tlibsse2_la-s_scalbnf.lo libsse2_la-s_floorf.lo \\\n-\tlibsse2_la-s_isinff.lo libsse2_la-t_exp.lo \\\n-\tlibsse2_la-e_asin.lo libsse2_la-e_atan2.lo \\\n-\tlibsse2_la-s_atan.lo libsse2_la-branred.lo \\\n-\tlibsse2_la-doasin.lo libsse2_la-dosincos.lo \\\n-\tlibsse2_la-e_exp.lo libsse2_la-halfulp.lo \\\n-\tlibsse2_la-k_rem_pio2.lo libsse2_la-e_log10.lo \\\n-\tlibsse2_la-e_log.lo libsse2_la-mpa.lo libsse2_la-mpatan2.lo \\\n-\tlibsse2_la-mpatan.lo libsse2_la-mpexp.lo libsse2_la-mplog.lo \\\n-\tlibsse2_la-mpsqrt.lo libsse2_la-mptan.lo libsse2_la-e_pow.lo \\\n-\tlibsse2_la-e_rem_pio2.lo libsse2_la-s_sin.lo \\\n-\tlibsse2_la-sincos32.lo libsse2_la-slowexp.lo \\\n-\tlibsse2_la-slowpow.lo libsse2_la-e_sqrt.lo libsse2_la-s_tan.lo \\\n-\tlibsse2_la-s_scalbn.lo libsse2_la-s_floor.lo \\\n-\tlibsse2_la-s_isinf.lo\n+\tlibsse2_la-s_isinff.lo\n libsse2_la_OBJECTS = $(am_libsse2_la_OBJECTS)\n DEFAULT_INCLUDES = -I. -I$(srcdir)\n depcomp = $(SHELL) $(top_srcdir)/../depcomp\n@@ -224,37 +211,7 @@ libsse2_la_SOURCES = \\\n   @srcdir@/../flt-32/e_sqrtf.c \\\n   @srcdir@/../flt-32/s_scalbnf.c \\\n   @srcdir@/../flt-32/s_floorf.c \\\n-  @srcdir@/../flt-32/s_isinff.c \\\n-  @srcdir@/../dbl-64/t_exp.c \\\n-  @srcdir@/../dbl-64/e_asin.c \\\n-  @srcdir@/../dbl-64/e_atan2.c \\\n-  @srcdir@/../dbl-64/s_atan.c \\\n-  @srcdir@/../dbl-64/branred.c \\\n-  @srcdir@/../dbl-64/doasin.c \\\n-  @srcdir@/../dbl-64/dosincos.c \\\n-  @srcdir@/../dbl-64/e_exp.c \\\n-  @srcdir@/../dbl-64/halfulp.c \\\n-  @srcdir@/../dbl-64/k_rem_pio2.c \\\n-  @srcdir@/../dbl-64/e_log10.c \\\n-  @srcdir@/../dbl-64/e_log.c \\\n-  @srcdir@/../dbl-64/mpa.c \\\n-  @srcdir@/../dbl-64/mpatan2.c \\\n-  @srcdir@/../dbl-64/mpatan.c \\\n-  @srcdir@/../dbl-64/mpexp.c \\\n-  @srcdir@/../dbl-64/mplog.c \\\n-  @srcdir@/../dbl-64/mpsqrt.c \\\n-  @srcdir@/../dbl-64/mptan.c \\\n-  @srcdir@/../dbl-64/e_pow.c \\\n-  @srcdir@/../dbl-64/e_rem_pio2.c \\\n-  @srcdir@/../dbl-64/s_sin.c \\\n-  @srcdir@/../dbl-64/sincos32.c \\\n-  @srcdir@/../dbl-64/slowexp.c \\\n-  @srcdir@/../dbl-64/slowpow.c \\\n-  @srcdir@/../dbl-64/e_sqrt.c \\\n-  @srcdir@/../dbl-64/s_tan.c \\\n-  @srcdir@/../dbl-64/s_scalbn.c \\\n-  @srcdir@/../dbl-64/s_floor.c \\\n-  @srcdir@/../dbl-64/s_isinf.c\n+  @srcdir@/../flt-32/s_isinff.c\n \n \n # XXX hack alert\n@@ -352,56 +309,26 @@ mostlyclean-compile:\n distclean-compile:\n \t-rm -f *.tab.c\n \n-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libsse2_la-branred.Plo@am__quote@\n-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libsse2_la-doasin.Plo@am__quote@\n-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libsse2_la-dosincos.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libsse2_la-e_acosf.Plo@am__quote@\n-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libsse2_la-e_asin.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libsse2_la-e_asinf.Plo@am__quote@\n-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libsse2_la-e_atan2.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libsse2_la-e_atan2f.Plo@am__quote@\n-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libsse2_la-e_exp.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libsse2_la-e_expf.Plo@am__quote@\n-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libsse2_la-e_log.Plo@am__quote@\n-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libsse2_la-e_log10.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libsse2_la-e_log10f.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libsse2_la-e_logf.Plo@am__quote@\n-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libsse2_la-e_pow.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libsse2_la-e_powf.Plo@am__quote@\n-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libsse2_la-e_rem_pio2.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libsse2_la-e_rem_pio2f.Plo@am__quote@\n-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libsse2_la-e_sqrt.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libsse2_la-e_sqrtf.Plo@am__quote@\n-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libsse2_la-halfulp.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libsse2_la-k_cosf.Plo@am__quote@\n-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libsse2_la-k_rem_pio2.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libsse2_la-k_rem_pio2f.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libsse2_la-k_sinf.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libsse2_la-k_tanf.Plo@am__quote@\n-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libsse2_la-mpa.Plo@am__quote@\n-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libsse2_la-mpatan.Plo@am__quote@\n-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libsse2_la-mpatan2.Plo@am__quote@\n-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libsse2_la-mpexp.Plo@am__quote@\n-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libsse2_la-mplog.Plo@am__quote@\n-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libsse2_la-mpsqrt.Plo@am__quote@\n-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libsse2_la-mptan.Plo@am__quote@\n-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libsse2_la-s_atan.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libsse2_la-s_atanf.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libsse2_la-s_cosf.Plo@am__quote@\n-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libsse2_la-s_floor.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libsse2_la-s_floorf.Plo@am__quote@\n-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libsse2_la-s_isinf.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libsse2_la-s_isinff.Plo@am__quote@\n-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libsse2_la-s_scalbn.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libsse2_la-s_scalbnf.Plo@am__quote@\n-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libsse2_la-s_sin.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libsse2_la-s_sinf.Plo@am__quote@\n-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libsse2_la-s_tan.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libsse2_la-s_tanf.Plo@am__quote@\n-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libsse2_la-sincos32.Plo@am__quote@\n-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libsse2_la-slowexp.Plo@am__quote@\n-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libsse2_la-slowpow.Plo@am__quote@\n-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libsse2_la-t_exp.Plo@am__quote@\n \n .c.o:\n @am__fastdepCC_TRUE@\tif $(COMPILE) -MT $@ -MD -MP -MF \"$(DEPDIR)/$*.Tpo\" -c -o $@ $<; \\\n@@ -564,216 +491,6 @@ libsse2_la-s_isinff.lo: @srcdir@/../flt-32/s_isinff.c\n @AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n @am__fastdepCC_FALSE@\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsse2_la_CFLAGS) $(CFLAGS) -c -o libsse2_la-s_isinff.lo `test -f '@srcdir@/../flt-32/s_isinff.c' || echo '$(srcdir)/'`@srcdir@/../flt-32/s_isinff.c\n \n-libsse2_la-t_exp.lo: @srcdir@/../dbl-64/t_exp.c\n-@am__fastdepCC_TRUE@\tif $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsse2_la_CFLAGS) $(CFLAGS) -MT libsse2_la-t_exp.lo -MD -MP -MF \"$(DEPDIR)/libsse2_la-t_exp.Tpo\" -c -o libsse2_la-t_exp.lo `test -f '@srcdir@/../dbl-64/t_exp.c' || echo '$(srcdir)/'`@srcdir@/../dbl-64/t_exp.c; \\\n-@am__fastdepCC_TRUE@\tthen mv -f \"$(DEPDIR)/libsse2_la-t_exp.Tpo\" \"$(DEPDIR)/libsse2_la-t_exp.Plo\"; else rm -f \"$(DEPDIR)/libsse2_la-t_exp.Tpo\"; exit 1; fi\n-@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='@srcdir@/../dbl-64/t_exp.c' object='libsse2_la-t_exp.lo' libtool=yes @AMDEPBACKSLASH@\n-@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n-@am__fastdepCC_FALSE@\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsse2_la_CFLAGS) $(CFLAGS) -c -o libsse2_la-t_exp.lo `test -f '@srcdir@/../dbl-64/t_exp.c' || echo '$(srcdir)/'`@srcdir@/../dbl-64/t_exp.c\n-\n-libsse2_la-e_asin.lo: @srcdir@/../dbl-64/e_asin.c\n-@am__fastdepCC_TRUE@\tif $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsse2_la_CFLAGS) $(CFLAGS) -MT libsse2_la-e_asin.lo -MD -MP -MF \"$(DEPDIR)/libsse2_la-e_asin.Tpo\" -c -o libsse2_la-e_asin.lo `test -f '@srcdir@/../dbl-64/e_asin.c' || echo '$(srcdir)/'`@srcdir@/../dbl-64/e_asin.c; \\\n-@am__fastdepCC_TRUE@\tthen mv -f \"$(DEPDIR)/libsse2_la-e_asin.Tpo\" \"$(DEPDIR)/libsse2_la-e_asin.Plo\"; else rm -f \"$(DEPDIR)/libsse2_la-e_asin.Tpo\"; exit 1; fi\n-@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='@srcdir@/../dbl-64/e_asin.c' object='libsse2_la-e_asin.lo' libtool=yes @AMDEPBACKSLASH@\n-@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n-@am__fastdepCC_FALSE@\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsse2_la_CFLAGS) $(CFLAGS) -c -o libsse2_la-e_asin.lo `test -f '@srcdir@/../dbl-64/e_asin.c' || echo '$(srcdir)/'`@srcdir@/../dbl-64/e_asin.c\n-\n-libsse2_la-e_atan2.lo: @srcdir@/../dbl-64/e_atan2.c\n-@am__fastdepCC_TRUE@\tif $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsse2_la_CFLAGS) $(CFLAGS) -MT libsse2_la-e_atan2.lo -MD -MP -MF \"$(DEPDIR)/libsse2_la-e_atan2.Tpo\" -c -o libsse2_la-e_atan2.lo `test -f '@srcdir@/../dbl-64/e_atan2.c' || echo '$(srcdir)/'`@srcdir@/../dbl-64/e_atan2.c; \\\n-@am__fastdepCC_TRUE@\tthen mv -f \"$(DEPDIR)/libsse2_la-e_atan2.Tpo\" \"$(DEPDIR)/libsse2_la-e_atan2.Plo\"; else rm -f \"$(DEPDIR)/libsse2_la-e_atan2.Tpo\"; exit 1; fi\n-@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='@srcdir@/../dbl-64/e_atan2.c' object='libsse2_la-e_atan2.lo' libtool=yes @AMDEPBACKSLASH@\n-@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n-@am__fastdepCC_FALSE@\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsse2_la_CFLAGS) $(CFLAGS) -c -o libsse2_la-e_atan2.lo `test -f '@srcdir@/../dbl-64/e_atan2.c' || echo '$(srcdir)/'`@srcdir@/../dbl-64/e_atan2.c\n-\n-libsse2_la-s_atan.lo: @srcdir@/../dbl-64/s_atan.c\n-@am__fastdepCC_TRUE@\tif $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsse2_la_CFLAGS) $(CFLAGS) -MT libsse2_la-s_atan.lo -MD -MP -MF \"$(DEPDIR)/libsse2_la-s_atan.Tpo\" -c -o libsse2_la-s_atan.lo `test -f '@srcdir@/../dbl-64/s_atan.c' || echo '$(srcdir)/'`@srcdir@/../dbl-64/s_atan.c; \\\n-@am__fastdepCC_TRUE@\tthen mv -f \"$(DEPDIR)/libsse2_la-s_atan.Tpo\" \"$(DEPDIR)/libsse2_la-s_atan.Plo\"; else rm -f \"$(DEPDIR)/libsse2_la-s_atan.Tpo\"; exit 1; fi\n-@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='@srcdir@/../dbl-64/s_atan.c' object='libsse2_la-s_atan.lo' libtool=yes @AMDEPBACKSLASH@\n-@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n-@am__fastdepCC_FALSE@\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsse2_la_CFLAGS) $(CFLAGS) -c -o libsse2_la-s_atan.lo `test -f '@srcdir@/../dbl-64/s_atan.c' || echo '$(srcdir)/'`@srcdir@/../dbl-64/s_atan.c\n-\n-libsse2_la-branred.lo: @srcdir@/../dbl-64/branred.c\n-@am__fastdepCC_TRUE@\tif $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsse2_la_CFLAGS) $(CFLAGS) -MT libsse2_la-branred.lo -MD -MP -MF \"$(DEPDIR)/libsse2_la-branred.Tpo\" -c -o libsse2_la-branred.lo `test -f '@srcdir@/../dbl-64/branred.c' || echo '$(srcdir)/'`@srcdir@/../dbl-64/branred.c; \\\n-@am__fastdepCC_TRUE@\tthen mv -f \"$(DEPDIR)/libsse2_la-branred.Tpo\" \"$(DEPDIR)/libsse2_la-branred.Plo\"; else rm -f \"$(DEPDIR)/libsse2_la-branred.Tpo\"; exit 1; fi\n-@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='@srcdir@/../dbl-64/branred.c' object='libsse2_la-branred.lo' libtool=yes @AMDEPBACKSLASH@\n-@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n-@am__fastdepCC_FALSE@\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsse2_la_CFLAGS) $(CFLAGS) -c -o libsse2_la-branred.lo `test -f '@srcdir@/../dbl-64/branred.c' || echo '$(srcdir)/'`@srcdir@/../dbl-64/branred.c\n-\n-libsse2_la-doasin.lo: @srcdir@/../dbl-64/doasin.c\n-@am__fastdepCC_TRUE@\tif $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsse2_la_CFLAGS) $(CFLAGS) -MT libsse2_la-doasin.lo -MD -MP -MF \"$(DEPDIR)/libsse2_la-doasin.Tpo\" -c -o libsse2_la-doasin.lo `test -f '@srcdir@/../dbl-64/doasin.c' || echo '$(srcdir)/'`@srcdir@/../dbl-64/doasin.c; \\\n-@am__fastdepCC_TRUE@\tthen mv -f \"$(DEPDIR)/libsse2_la-doasin.Tpo\" \"$(DEPDIR)/libsse2_la-doasin.Plo\"; else rm -f \"$(DEPDIR)/libsse2_la-doasin.Tpo\"; exit 1; fi\n-@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='@srcdir@/../dbl-64/doasin.c' object='libsse2_la-doasin.lo' libtool=yes @AMDEPBACKSLASH@\n-@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n-@am__fastdepCC_FALSE@\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsse2_la_CFLAGS) $(CFLAGS) -c -o libsse2_la-doasin.lo `test -f '@srcdir@/../dbl-64/doasin.c' || echo '$(srcdir)/'`@srcdir@/../dbl-64/doasin.c\n-\n-libsse2_la-dosincos.lo: @srcdir@/../dbl-64/dosincos.c\n-@am__fastdepCC_TRUE@\tif $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsse2_la_CFLAGS) $(CFLAGS) -MT libsse2_la-dosincos.lo -MD -MP -MF \"$(DEPDIR)/libsse2_la-dosincos.Tpo\" -c -o libsse2_la-dosincos.lo `test -f '@srcdir@/../dbl-64/dosincos.c' || echo '$(srcdir)/'`@srcdir@/../dbl-64/dosincos.c; \\\n-@am__fastdepCC_TRUE@\tthen mv -f \"$(DEPDIR)/libsse2_la-dosincos.Tpo\" \"$(DEPDIR)/libsse2_la-dosincos.Plo\"; else rm -f \"$(DEPDIR)/libsse2_la-dosincos.Tpo\"; exit 1; fi\n-@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='@srcdir@/../dbl-64/dosincos.c' object='libsse2_la-dosincos.lo' libtool=yes @AMDEPBACKSLASH@\n-@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n-@am__fastdepCC_FALSE@\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsse2_la_CFLAGS) $(CFLAGS) -c -o libsse2_la-dosincos.lo `test -f '@srcdir@/../dbl-64/dosincos.c' || echo '$(srcdir)/'`@srcdir@/../dbl-64/dosincos.c\n-\n-libsse2_la-e_exp.lo: @srcdir@/../dbl-64/e_exp.c\n-@am__fastdepCC_TRUE@\tif $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsse2_la_CFLAGS) $(CFLAGS) -MT libsse2_la-e_exp.lo -MD -MP -MF \"$(DEPDIR)/libsse2_la-e_exp.Tpo\" -c -o libsse2_la-e_exp.lo `test -f '@srcdir@/../dbl-64/e_exp.c' || echo '$(srcdir)/'`@srcdir@/../dbl-64/e_exp.c; \\\n-@am__fastdepCC_TRUE@\tthen mv -f \"$(DEPDIR)/libsse2_la-e_exp.Tpo\" \"$(DEPDIR)/libsse2_la-e_exp.Plo\"; else rm -f \"$(DEPDIR)/libsse2_la-e_exp.Tpo\"; exit 1; fi\n-@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='@srcdir@/../dbl-64/e_exp.c' object='libsse2_la-e_exp.lo' libtool=yes @AMDEPBACKSLASH@\n-@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n-@am__fastdepCC_FALSE@\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsse2_la_CFLAGS) $(CFLAGS) -c -o libsse2_la-e_exp.lo `test -f '@srcdir@/../dbl-64/e_exp.c' || echo '$(srcdir)/'`@srcdir@/../dbl-64/e_exp.c\n-\n-libsse2_la-halfulp.lo: @srcdir@/../dbl-64/halfulp.c\n-@am__fastdepCC_TRUE@\tif $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsse2_la_CFLAGS) $(CFLAGS) -MT libsse2_la-halfulp.lo -MD -MP -MF \"$(DEPDIR)/libsse2_la-halfulp.Tpo\" -c -o libsse2_la-halfulp.lo `test -f '@srcdir@/../dbl-64/halfulp.c' || echo '$(srcdir)/'`@srcdir@/../dbl-64/halfulp.c; \\\n-@am__fastdepCC_TRUE@\tthen mv -f \"$(DEPDIR)/libsse2_la-halfulp.Tpo\" \"$(DEPDIR)/libsse2_la-halfulp.Plo\"; else rm -f \"$(DEPDIR)/libsse2_la-halfulp.Tpo\"; exit 1; fi\n-@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='@srcdir@/../dbl-64/halfulp.c' object='libsse2_la-halfulp.lo' libtool=yes @AMDEPBACKSLASH@\n-@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n-@am__fastdepCC_FALSE@\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsse2_la_CFLAGS) $(CFLAGS) -c -o libsse2_la-halfulp.lo `test -f '@srcdir@/../dbl-64/halfulp.c' || echo '$(srcdir)/'`@srcdir@/../dbl-64/halfulp.c\n-\n-libsse2_la-k_rem_pio2.lo: @srcdir@/../dbl-64/k_rem_pio2.c\n-@am__fastdepCC_TRUE@\tif $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsse2_la_CFLAGS) $(CFLAGS) -MT libsse2_la-k_rem_pio2.lo -MD -MP -MF \"$(DEPDIR)/libsse2_la-k_rem_pio2.Tpo\" -c -o libsse2_la-k_rem_pio2.lo `test -f '@srcdir@/../dbl-64/k_rem_pio2.c' || echo '$(srcdir)/'`@srcdir@/../dbl-64/k_rem_pio2.c; \\\n-@am__fastdepCC_TRUE@\tthen mv -f \"$(DEPDIR)/libsse2_la-k_rem_pio2.Tpo\" \"$(DEPDIR)/libsse2_la-k_rem_pio2.Plo\"; else rm -f \"$(DEPDIR)/libsse2_la-k_rem_pio2.Tpo\"; exit 1; fi\n-@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='@srcdir@/../dbl-64/k_rem_pio2.c' object='libsse2_la-k_rem_pio2.lo' libtool=yes @AMDEPBACKSLASH@\n-@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n-@am__fastdepCC_FALSE@\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsse2_la_CFLAGS) $(CFLAGS) -c -o libsse2_la-k_rem_pio2.lo `test -f '@srcdir@/../dbl-64/k_rem_pio2.c' || echo '$(srcdir)/'`@srcdir@/../dbl-64/k_rem_pio2.c\n-\n-libsse2_la-e_log10.lo: @srcdir@/../dbl-64/e_log10.c\n-@am__fastdepCC_TRUE@\tif $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsse2_la_CFLAGS) $(CFLAGS) -MT libsse2_la-e_log10.lo -MD -MP -MF \"$(DEPDIR)/libsse2_la-e_log10.Tpo\" -c -o libsse2_la-e_log10.lo `test -f '@srcdir@/../dbl-64/e_log10.c' || echo '$(srcdir)/'`@srcdir@/../dbl-64/e_log10.c; \\\n-@am__fastdepCC_TRUE@\tthen mv -f \"$(DEPDIR)/libsse2_la-e_log10.Tpo\" \"$(DEPDIR)/libsse2_la-e_log10.Plo\"; else rm -f \"$(DEPDIR)/libsse2_la-e_log10.Tpo\"; exit 1; fi\n-@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='@srcdir@/../dbl-64/e_log10.c' object='libsse2_la-e_log10.lo' libtool=yes @AMDEPBACKSLASH@\n-@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n-@am__fastdepCC_FALSE@\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsse2_la_CFLAGS) $(CFLAGS) -c -o libsse2_la-e_log10.lo `test -f '@srcdir@/../dbl-64/e_log10.c' || echo '$(srcdir)/'`@srcdir@/../dbl-64/e_log10.c\n-\n-libsse2_la-e_log.lo: @srcdir@/../dbl-64/e_log.c\n-@am__fastdepCC_TRUE@\tif $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsse2_la_CFLAGS) $(CFLAGS) -MT libsse2_la-e_log.lo -MD -MP -MF \"$(DEPDIR)/libsse2_la-e_log.Tpo\" -c -o libsse2_la-e_log.lo `test -f '@srcdir@/../dbl-64/e_log.c' || echo '$(srcdir)/'`@srcdir@/../dbl-64/e_log.c; \\\n-@am__fastdepCC_TRUE@\tthen mv -f \"$(DEPDIR)/libsse2_la-e_log.Tpo\" \"$(DEPDIR)/libsse2_la-e_log.Plo\"; else rm -f \"$(DEPDIR)/libsse2_la-e_log.Tpo\"; exit 1; fi\n-@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='@srcdir@/../dbl-64/e_log.c' object='libsse2_la-e_log.lo' libtool=yes @AMDEPBACKSLASH@\n-@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n-@am__fastdepCC_FALSE@\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsse2_la_CFLAGS) $(CFLAGS) -c -o libsse2_la-e_log.lo `test -f '@srcdir@/../dbl-64/e_log.c' || echo '$(srcdir)/'`@srcdir@/../dbl-64/e_log.c\n-\n-libsse2_la-mpa.lo: @srcdir@/../dbl-64/mpa.c\n-@am__fastdepCC_TRUE@\tif $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsse2_la_CFLAGS) $(CFLAGS) -MT libsse2_la-mpa.lo -MD -MP -MF \"$(DEPDIR)/libsse2_la-mpa.Tpo\" -c -o libsse2_la-mpa.lo `test -f '@srcdir@/../dbl-64/mpa.c' || echo '$(srcdir)/'`@srcdir@/../dbl-64/mpa.c; \\\n-@am__fastdepCC_TRUE@\tthen mv -f \"$(DEPDIR)/libsse2_la-mpa.Tpo\" \"$(DEPDIR)/libsse2_la-mpa.Plo\"; else rm -f \"$(DEPDIR)/libsse2_la-mpa.Tpo\"; exit 1; fi\n-@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='@srcdir@/../dbl-64/mpa.c' object='libsse2_la-mpa.lo' libtool=yes @AMDEPBACKSLASH@\n-@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n-@am__fastdepCC_FALSE@\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsse2_la_CFLAGS) $(CFLAGS) -c -o libsse2_la-mpa.lo `test -f '@srcdir@/../dbl-64/mpa.c' || echo '$(srcdir)/'`@srcdir@/../dbl-64/mpa.c\n-\n-libsse2_la-mpatan2.lo: @srcdir@/../dbl-64/mpatan2.c\n-@am__fastdepCC_TRUE@\tif $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsse2_la_CFLAGS) $(CFLAGS) -MT libsse2_la-mpatan2.lo -MD -MP -MF \"$(DEPDIR)/libsse2_la-mpatan2.Tpo\" -c -o libsse2_la-mpatan2.lo `test -f '@srcdir@/../dbl-64/mpatan2.c' || echo '$(srcdir)/'`@srcdir@/../dbl-64/mpatan2.c; \\\n-@am__fastdepCC_TRUE@\tthen mv -f \"$(DEPDIR)/libsse2_la-mpatan2.Tpo\" \"$(DEPDIR)/libsse2_la-mpatan2.Plo\"; else rm -f \"$(DEPDIR)/libsse2_la-mpatan2.Tpo\"; exit 1; fi\n-@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='@srcdir@/../dbl-64/mpatan2.c' object='libsse2_la-mpatan2.lo' libtool=yes @AMDEPBACKSLASH@\n-@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n-@am__fastdepCC_FALSE@\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsse2_la_CFLAGS) $(CFLAGS) -c -o libsse2_la-mpatan2.lo `test -f '@srcdir@/../dbl-64/mpatan2.c' || echo '$(srcdir)/'`@srcdir@/../dbl-64/mpatan2.c\n-\n-libsse2_la-mpatan.lo: @srcdir@/../dbl-64/mpatan.c\n-@am__fastdepCC_TRUE@\tif $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsse2_la_CFLAGS) $(CFLAGS) -MT libsse2_la-mpatan.lo -MD -MP -MF \"$(DEPDIR)/libsse2_la-mpatan.Tpo\" -c -o libsse2_la-mpatan.lo `test -f '@srcdir@/../dbl-64/mpatan.c' || echo '$(srcdir)/'`@srcdir@/../dbl-64/mpatan.c; \\\n-@am__fastdepCC_TRUE@\tthen mv -f \"$(DEPDIR)/libsse2_la-mpatan.Tpo\" \"$(DEPDIR)/libsse2_la-mpatan.Plo\"; else rm -f \"$(DEPDIR)/libsse2_la-mpatan.Tpo\"; exit 1; fi\n-@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='@srcdir@/../dbl-64/mpatan.c' object='libsse2_la-mpatan.lo' libtool=yes @AMDEPBACKSLASH@\n-@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n-@am__fastdepCC_FALSE@\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsse2_la_CFLAGS) $(CFLAGS) -c -o libsse2_la-mpatan.lo `test -f '@srcdir@/../dbl-64/mpatan.c' || echo '$(srcdir)/'`@srcdir@/../dbl-64/mpatan.c\n-\n-libsse2_la-mpexp.lo: @srcdir@/../dbl-64/mpexp.c\n-@am__fastdepCC_TRUE@\tif $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsse2_la_CFLAGS) $(CFLAGS) -MT libsse2_la-mpexp.lo -MD -MP -MF \"$(DEPDIR)/libsse2_la-mpexp.Tpo\" -c -o libsse2_la-mpexp.lo `test -f '@srcdir@/../dbl-64/mpexp.c' || echo '$(srcdir)/'`@srcdir@/../dbl-64/mpexp.c; \\\n-@am__fastdepCC_TRUE@\tthen mv -f \"$(DEPDIR)/libsse2_la-mpexp.Tpo\" \"$(DEPDIR)/libsse2_la-mpexp.Plo\"; else rm -f \"$(DEPDIR)/libsse2_la-mpexp.Tpo\"; exit 1; fi\n-@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='@srcdir@/../dbl-64/mpexp.c' object='libsse2_la-mpexp.lo' libtool=yes @AMDEPBACKSLASH@\n-@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n-@am__fastdepCC_FALSE@\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsse2_la_CFLAGS) $(CFLAGS) -c -o libsse2_la-mpexp.lo `test -f '@srcdir@/../dbl-64/mpexp.c' || echo '$(srcdir)/'`@srcdir@/../dbl-64/mpexp.c\n-\n-libsse2_la-mplog.lo: @srcdir@/../dbl-64/mplog.c\n-@am__fastdepCC_TRUE@\tif $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsse2_la_CFLAGS) $(CFLAGS) -MT libsse2_la-mplog.lo -MD -MP -MF \"$(DEPDIR)/libsse2_la-mplog.Tpo\" -c -o libsse2_la-mplog.lo `test -f '@srcdir@/../dbl-64/mplog.c' || echo '$(srcdir)/'`@srcdir@/../dbl-64/mplog.c; \\\n-@am__fastdepCC_TRUE@\tthen mv -f \"$(DEPDIR)/libsse2_la-mplog.Tpo\" \"$(DEPDIR)/libsse2_la-mplog.Plo\"; else rm -f \"$(DEPDIR)/libsse2_la-mplog.Tpo\"; exit 1; fi\n-@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='@srcdir@/../dbl-64/mplog.c' object='libsse2_la-mplog.lo' libtool=yes @AMDEPBACKSLASH@\n-@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n-@am__fastdepCC_FALSE@\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsse2_la_CFLAGS) $(CFLAGS) -c -o libsse2_la-mplog.lo `test -f '@srcdir@/../dbl-64/mplog.c' || echo '$(srcdir)/'`@srcdir@/../dbl-64/mplog.c\n-\n-libsse2_la-mpsqrt.lo: @srcdir@/../dbl-64/mpsqrt.c\n-@am__fastdepCC_TRUE@\tif $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsse2_la_CFLAGS) $(CFLAGS) -MT libsse2_la-mpsqrt.lo -MD -MP -MF \"$(DEPDIR)/libsse2_la-mpsqrt.Tpo\" -c -o libsse2_la-mpsqrt.lo `test -f '@srcdir@/../dbl-64/mpsqrt.c' || echo '$(srcdir)/'`@srcdir@/../dbl-64/mpsqrt.c; \\\n-@am__fastdepCC_TRUE@\tthen mv -f \"$(DEPDIR)/libsse2_la-mpsqrt.Tpo\" \"$(DEPDIR)/libsse2_la-mpsqrt.Plo\"; else rm -f \"$(DEPDIR)/libsse2_la-mpsqrt.Tpo\"; exit 1; fi\n-@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='@srcdir@/../dbl-64/mpsqrt.c' object='libsse2_la-mpsqrt.lo' libtool=yes @AMDEPBACKSLASH@\n-@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n-@am__fastdepCC_FALSE@\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsse2_la_CFLAGS) $(CFLAGS) -c -o libsse2_la-mpsqrt.lo `test -f '@srcdir@/../dbl-64/mpsqrt.c' || echo '$(srcdir)/'`@srcdir@/../dbl-64/mpsqrt.c\n-\n-libsse2_la-mptan.lo: @srcdir@/../dbl-64/mptan.c\n-@am__fastdepCC_TRUE@\tif $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsse2_la_CFLAGS) $(CFLAGS) -MT libsse2_la-mptan.lo -MD -MP -MF \"$(DEPDIR)/libsse2_la-mptan.Tpo\" -c -o libsse2_la-mptan.lo `test -f '@srcdir@/../dbl-64/mptan.c' || echo '$(srcdir)/'`@srcdir@/../dbl-64/mptan.c; \\\n-@am__fastdepCC_TRUE@\tthen mv -f \"$(DEPDIR)/libsse2_la-mptan.Tpo\" \"$(DEPDIR)/libsse2_la-mptan.Plo\"; else rm -f \"$(DEPDIR)/libsse2_la-mptan.Tpo\"; exit 1; fi\n-@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='@srcdir@/../dbl-64/mptan.c' object='libsse2_la-mptan.lo' libtool=yes @AMDEPBACKSLASH@\n-@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n-@am__fastdepCC_FALSE@\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsse2_la_CFLAGS) $(CFLAGS) -c -o libsse2_la-mptan.lo `test -f '@srcdir@/../dbl-64/mptan.c' || echo '$(srcdir)/'`@srcdir@/../dbl-64/mptan.c\n-\n-libsse2_la-e_pow.lo: @srcdir@/../dbl-64/e_pow.c\n-@am__fastdepCC_TRUE@\tif $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsse2_la_CFLAGS) $(CFLAGS) -MT libsse2_la-e_pow.lo -MD -MP -MF \"$(DEPDIR)/libsse2_la-e_pow.Tpo\" -c -o libsse2_la-e_pow.lo `test -f '@srcdir@/../dbl-64/e_pow.c' || echo '$(srcdir)/'`@srcdir@/../dbl-64/e_pow.c; \\\n-@am__fastdepCC_TRUE@\tthen mv -f \"$(DEPDIR)/libsse2_la-e_pow.Tpo\" \"$(DEPDIR)/libsse2_la-e_pow.Plo\"; else rm -f \"$(DEPDIR)/libsse2_la-e_pow.Tpo\"; exit 1; fi\n-@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='@srcdir@/../dbl-64/e_pow.c' object='libsse2_la-e_pow.lo' libtool=yes @AMDEPBACKSLASH@\n-@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n-@am__fastdepCC_FALSE@\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsse2_la_CFLAGS) $(CFLAGS) -c -o libsse2_la-e_pow.lo `test -f '@srcdir@/../dbl-64/e_pow.c' || echo '$(srcdir)/'`@srcdir@/../dbl-64/e_pow.c\n-\n-libsse2_la-e_rem_pio2.lo: @srcdir@/../dbl-64/e_rem_pio2.c\n-@am__fastdepCC_TRUE@\tif $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsse2_la_CFLAGS) $(CFLAGS) -MT libsse2_la-e_rem_pio2.lo -MD -MP -MF \"$(DEPDIR)/libsse2_la-e_rem_pio2.Tpo\" -c -o libsse2_la-e_rem_pio2.lo `test -f '@srcdir@/../dbl-64/e_rem_pio2.c' || echo '$(srcdir)/'`@srcdir@/../dbl-64/e_rem_pio2.c; \\\n-@am__fastdepCC_TRUE@\tthen mv -f \"$(DEPDIR)/libsse2_la-e_rem_pio2.Tpo\" \"$(DEPDIR)/libsse2_la-e_rem_pio2.Plo\"; else rm -f \"$(DEPDIR)/libsse2_la-e_rem_pio2.Tpo\"; exit 1; fi\n-@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='@srcdir@/../dbl-64/e_rem_pio2.c' object='libsse2_la-e_rem_pio2.lo' libtool=yes @AMDEPBACKSLASH@\n-@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n-@am__fastdepCC_FALSE@\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsse2_la_CFLAGS) $(CFLAGS) -c -o libsse2_la-e_rem_pio2.lo `test -f '@srcdir@/../dbl-64/e_rem_pio2.c' || echo '$(srcdir)/'`@srcdir@/../dbl-64/e_rem_pio2.c\n-\n-libsse2_la-s_sin.lo: @srcdir@/../dbl-64/s_sin.c\n-@am__fastdepCC_TRUE@\tif $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsse2_la_CFLAGS) $(CFLAGS) -MT libsse2_la-s_sin.lo -MD -MP -MF \"$(DEPDIR)/libsse2_la-s_sin.Tpo\" -c -o libsse2_la-s_sin.lo `test -f '@srcdir@/../dbl-64/s_sin.c' || echo '$(srcdir)/'`@srcdir@/../dbl-64/s_sin.c; \\\n-@am__fastdepCC_TRUE@\tthen mv -f \"$(DEPDIR)/libsse2_la-s_sin.Tpo\" \"$(DEPDIR)/libsse2_la-s_sin.Plo\"; else rm -f \"$(DEPDIR)/libsse2_la-s_sin.Tpo\"; exit 1; fi\n-@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='@srcdir@/../dbl-64/s_sin.c' object='libsse2_la-s_sin.lo' libtool=yes @AMDEPBACKSLASH@\n-@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n-@am__fastdepCC_FALSE@\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsse2_la_CFLAGS) $(CFLAGS) -c -o libsse2_la-s_sin.lo `test -f '@srcdir@/../dbl-64/s_sin.c' || echo '$(srcdir)/'`@srcdir@/../dbl-64/s_sin.c\n-\n-libsse2_la-sincos32.lo: @srcdir@/../dbl-64/sincos32.c\n-@am__fastdepCC_TRUE@\tif $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsse2_la_CFLAGS) $(CFLAGS) -MT libsse2_la-sincos32.lo -MD -MP -MF \"$(DEPDIR)/libsse2_la-sincos32.Tpo\" -c -o libsse2_la-sincos32.lo `test -f '@srcdir@/../dbl-64/sincos32.c' || echo '$(srcdir)/'`@srcdir@/../dbl-64/sincos32.c; \\\n-@am__fastdepCC_TRUE@\tthen mv -f \"$(DEPDIR)/libsse2_la-sincos32.Tpo\" \"$(DEPDIR)/libsse2_la-sincos32.Plo\"; else rm -f \"$(DEPDIR)/libsse2_la-sincos32.Tpo\"; exit 1; fi\n-@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='@srcdir@/../dbl-64/sincos32.c' object='libsse2_la-sincos32.lo' libtool=yes @AMDEPBACKSLASH@\n-@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n-@am__fastdepCC_FALSE@\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsse2_la_CFLAGS) $(CFLAGS) -c -o libsse2_la-sincos32.lo `test -f '@srcdir@/../dbl-64/sincos32.c' || echo '$(srcdir)/'`@srcdir@/../dbl-64/sincos32.c\n-\n-libsse2_la-slowexp.lo: @srcdir@/../dbl-64/slowexp.c\n-@am__fastdepCC_TRUE@\tif $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsse2_la_CFLAGS) $(CFLAGS) -MT libsse2_la-slowexp.lo -MD -MP -MF \"$(DEPDIR)/libsse2_la-slowexp.Tpo\" -c -o libsse2_la-slowexp.lo `test -f '@srcdir@/../dbl-64/slowexp.c' || echo '$(srcdir)/'`@srcdir@/../dbl-64/slowexp.c; \\\n-@am__fastdepCC_TRUE@\tthen mv -f \"$(DEPDIR)/libsse2_la-slowexp.Tpo\" \"$(DEPDIR)/libsse2_la-slowexp.Plo\"; else rm -f \"$(DEPDIR)/libsse2_la-slowexp.Tpo\"; exit 1; fi\n-@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='@srcdir@/../dbl-64/slowexp.c' object='libsse2_la-slowexp.lo' libtool=yes @AMDEPBACKSLASH@\n-@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n-@am__fastdepCC_FALSE@\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsse2_la_CFLAGS) $(CFLAGS) -c -o libsse2_la-slowexp.lo `test -f '@srcdir@/../dbl-64/slowexp.c' || echo '$(srcdir)/'`@srcdir@/../dbl-64/slowexp.c\n-\n-libsse2_la-slowpow.lo: @srcdir@/../dbl-64/slowpow.c\n-@am__fastdepCC_TRUE@\tif $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsse2_la_CFLAGS) $(CFLAGS) -MT libsse2_la-slowpow.lo -MD -MP -MF \"$(DEPDIR)/libsse2_la-slowpow.Tpo\" -c -o libsse2_la-slowpow.lo `test -f '@srcdir@/../dbl-64/slowpow.c' || echo '$(srcdir)/'`@srcdir@/../dbl-64/slowpow.c; \\\n-@am__fastdepCC_TRUE@\tthen mv -f \"$(DEPDIR)/libsse2_la-slowpow.Tpo\" \"$(DEPDIR)/libsse2_la-slowpow.Plo\"; else rm -f \"$(DEPDIR)/libsse2_la-slowpow.Tpo\"; exit 1; fi\n-@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='@srcdir@/../dbl-64/slowpow.c' object='libsse2_la-slowpow.lo' libtool=yes @AMDEPBACKSLASH@\n-@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n-@am__fastdepCC_FALSE@\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsse2_la_CFLAGS) $(CFLAGS) -c -o libsse2_la-slowpow.lo `test -f '@srcdir@/../dbl-64/slowpow.c' || echo '$(srcdir)/'`@srcdir@/../dbl-64/slowpow.c\n-\n-libsse2_la-e_sqrt.lo: @srcdir@/../dbl-64/e_sqrt.c\n-@am__fastdepCC_TRUE@\tif $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsse2_la_CFLAGS) $(CFLAGS) -MT libsse2_la-e_sqrt.lo -MD -MP -MF \"$(DEPDIR)/libsse2_la-e_sqrt.Tpo\" -c -o libsse2_la-e_sqrt.lo `test -f '@srcdir@/../dbl-64/e_sqrt.c' || echo '$(srcdir)/'`@srcdir@/../dbl-64/e_sqrt.c; \\\n-@am__fastdepCC_TRUE@\tthen mv -f \"$(DEPDIR)/libsse2_la-e_sqrt.Tpo\" \"$(DEPDIR)/libsse2_la-e_sqrt.Plo\"; else rm -f \"$(DEPDIR)/libsse2_la-e_sqrt.Tpo\"; exit 1; fi\n-@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='@srcdir@/../dbl-64/e_sqrt.c' object='libsse2_la-e_sqrt.lo' libtool=yes @AMDEPBACKSLASH@\n-@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n-@am__fastdepCC_FALSE@\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsse2_la_CFLAGS) $(CFLAGS) -c -o libsse2_la-e_sqrt.lo `test -f '@srcdir@/../dbl-64/e_sqrt.c' || echo '$(srcdir)/'`@srcdir@/../dbl-64/e_sqrt.c\n-\n-libsse2_la-s_tan.lo: @srcdir@/../dbl-64/s_tan.c\n-@am__fastdepCC_TRUE@\tif $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsse2_la_CFLAGS) $(CFLAGS) -MT libsse2_la-s_tan.lo -MD -MP -MF \"$(DEPDIR)/libsse2_la-s_tan.Tpo\" -c -o libsse2_la-s_tan.lo `test -f '@srcdir@/../dbl-64/s_tan.c' || echo '$(srcdir)/'`@srcdir@/../dbl-64/s_tan.c; \\\n-@am__fastdepCC_TRUE@\tthen mv -f \"$(DEPDIR)/libsse2_la-s_tan.Tpo\" \"$(DEPDIR)/libsse2_la-s_tan.Plo\"; else rm -f \"$(DEPDIR)/libsse2_la-s_tan.Tpo\"; exit 1; fi\n-@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='@srcdir@/../dbl-64/s_tan.c' object='libsse2_la-s_tan.lo' libtool=yes @AMDEPBACKSLASH@\n-@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n-@am__fastdepCC_FALSE@\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsse2_la_CFLAGS) $(CFLAGS) -c -o libsse2_la-s_tan.lo `test -f '@srcdir@/../dbl-64/s_tan.c' || echo '$(srcdir)/'`@srcdir@/../dbl-64/s_tan.c\n-\n-libsse2_la-s_scalbn.lo: @srcdir@/../dbl-64/s_scalbn.c\n-@am__fastdepCC_TRUE@\tif $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsse2_la_CFLAGS) $(CFLAGS) -MT libsse2_la-s_scalbn.lo -MD -MP -MF \"$(DEPDIR)/libsse2_la-s_scalbn.Tpo\" -c -o libsse2_la-s_scalbn.lo `test -f '@srcdir@/../dbl-64/s_scalbn.c' || echo '$(srcdir)/'`@srcdir@/../dbl-64/s_scalbn.c; \\\n-@am__fastdepCC_TRUE@\tthen mv -f \"$(DEPDIR)/libsse2_la-s_scalbn.Tpo\" \"$(DEPDIR)/libsse2_la-s_scalbn.Plo\"; else rm -f \"$(DEPDIR)/libsse2_la-s_scalbn.Tpo\"; exit 1; fi\n-@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='@srcdir@/../dbl-64/s_scalbn.c' object='libsse2_la-s_scalbn.lo' libtool=yes @AMDEPBACKSLASH@\n-@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n-@am__fastdepCC_FALSE@\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsse2_la_CFLAGS) $(CFLAGS) -c -o libsse2_la-s_scalbn.lo `test -f '@srcdir@/../dbl-64/s_scalbn.c' || echo '$(srcdir)/'`@srcdir@/../dbl-64/s_scalbn.c\n-\n-libsse2_la-s_floor.lo: @srcdir@/../dbl-64/s_floor.c\n-@am__fastdepCC_TRUE@\tif $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsse2_la_CFLAGS) $(CFLAGS) -MT libsse2_la-s_floor.lo -MD -MP -MF \"$(DEPDIR)/libsse2_la-s_floor.Tpo\" -c -o libsse2_la-s_floor.lo `test -f '@srcdir@/../dbl-64/s_floor.c' || echo '$(srcdir)/'`@srcdir@/../dbl-64/s_floor.c; \\\n-@am__fastdepCC_TRUE@\tthen mv -f \"$(DEPDIR)/libsse2_la-s_floor.Tpo\" \"$(DEPDIR)/libsse2_la-s_floor.Plo\"; else rm -f \"$(DEPDIR)/libsse2_la-s_floor.Tpo\"; exit 1; fi\n-@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='@srcdir@/../dbl-64/s_floor.c' object='libsse2_la-s_floor.lo' libtool=yes @AMDEPBACKSLASH@\n-@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n-@am__fastdepCC_FALSE@\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsse2_la_CFLAGS) $(CFLAGS) -c -o libsse2_la-s_floor.lo `test -f '@srcdir@/../dbl-64/s_floor.c' || echo '$(srcdir)/'`@srcdir@/../dbl-64/s_floor.c\n-\n-libsse2_la-s_isinf.lo: @srcdir@/../dbl-64/s_isinf.c\n-@am__fastdepCC_TRUE@\tif $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsse2_la_CFLAGS) $(CFLAGS) -MT libsse2_la-s_isinf.lo -MD -MP -MF \"$(DEPDIR)/libsse2_la-s_isinf.Tpo\" -c -o libsse2_la-s_isinf.lo `test -f '@srcdir@/../dbl-64/s_isinf.c' || echo '$(srcdir)/'`@srcdir@/../dbl-64/s_isinf.c; \\\n-@am__fastdepCC_TRUE@\tthen mv -f \"$(DEPDIR)/libsse2_la-s_isinf.Tpo\" \"$(DEPDIR)/libsse2_la-s_isinf.Plo\"; else rm -f \"$(DEPDIR)/libsse2_la-s_isinf.Tpo\"; exit 1; fi\n-@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='@srcdir@/../dbl-64/s_isinf.c' object='libsse2_la-s_isinf.lo' libtool=yes @AMDEPBACKSLASH@\n-@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n-@am__fastdepCC_FALSE@\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsse2_la_CFLAGS) $(CFLAGS) -c -o libsse2_la-s_isinf.lo `test -f '@srcdir@/../dbl-64/s_isinf.c' || echo '$(srcdir)/'`@srcdir@/../dbl-64/s_isinf.c\n-\n mostlyclean-libtool:\n \t-rm -f *.lo\n "}]}