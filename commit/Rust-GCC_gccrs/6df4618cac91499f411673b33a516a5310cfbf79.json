{"sha": "6df4618cac91499f411673b33a516a5310cfbf79", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmRmNDYxOGNhYzkxNDk5ZjQxMTY3M2IzM2E1MTZhNTMxMGNmYmY3OQ==", "commit": {"author": {"name": "Srinath Parvathaneni", "email": "srinath.parvathaneni@arm.com", "date": "2020-03-17T12:23:42Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2020-03-17T13:33:45Z"}, "message": "[ARM][GCC][3/1x]: MVE intrinsics with unary operand.\n\nThis patch supports following MVE ACLE intrinsics with unary operand.\n\nvdupq_n_s8, vdupq_n_s16, vdupq_n_s32, vabsq_s8, vabsq_s16, vabsq_s32, vclsq_s8, vclsq_s16, vclsq_s32, vclzq_s8, vclzq_s16, vclzq_s32, vnegq_s8, vnegq_s16, vnegq_s32, vaddlvq_s32, vaddvq_s8, vaddvq_s16, vaddvq_s32, vmovlbq_s8, vmovlbq_s16, vmovltq_s8, vmovltq_s16, vmvnq_s8, vmvnq_s16, vmvnq_s32, vrev16q_s8, vrev32q_s8, vrev32q_s16, vqabsq_s8, vqabsq_s16, vqabsq_s32, vqnegq_s8, vqnegq_s16, vqnegq_s32, vcvtaq_s16_f16, vcvtaq_s32_f32, vcvtnq_s16_f16, vcvtnq_s32_f32, vcvtpq_s16_f16, vcvtpq_s32_f32, vcvtmq_s16_f16, vcvtmq_s32_f32, vmvnq_u8, vmvnq_u16, vmvnq_u32, vdupq_n_u8, vdupq_n_u16, vdupq_n_u32, vclzq_u8, vclzq_u16, vclzq_u32, vaddvq_u8, vaddvq_u16, vaddvq_u32, vrev32q_u8, vrev32q_u16, vmovltq_u8, vmovltq_u16, vmovlbq_u8, vmovlbq_u16, vrev16q_u8, vaddlvq_u32, vcvtpq_u16_f16, vcvtpq_u32_f32, vcvtnq_u16_f16, vcvtmq_u16_f16, vcvtmq_u32_f32, vcvtaq_u16_f16, vcvtaq_u32_f32, vdupq_n, vabsq, vclsq, vclzq, vnegq, vaddlvq, vaddvq, vmovlbq, vmovltq, vmvnq, vrev16q, vrev32q, vqabsq, vqnegq.\n\nA new register class \"EVEN_REGS\" which allows only even registers is added in this patch.\n\nThe new constraint \"e\" allows only reigsters of EVEN_REGS class.\n\nPlease refer to M-profile Vector Extension (MVE) intrinsics [1]  for more details.\n[1] https://developer.arm.com/architectures/instruction-sets/simd-isas/helium/mve-intrinsics\n\n2020-03-17  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n            Mihail Ionescu  <mihail.ionescu@arm.com>\n            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n\n\t* config/arm/arm.h (enum reg_class): Define new class EVEN_REGS.\n\t* config/arm/arm_mve.h (vdupq_n_s8): Define macro.\n\t(vdupq_n_s16): Likewise.\n\t(vdupq_n_s32): Likewise.\n\t(vabsq_s8): Likewise.\n\t(vabsq_s16): Likewise.\n\t(vabsq_s32): Likewise.\n\t(vclsq_s8): Likewise.\n\t(vclsq_s16): Likewise.\n\t(vclsq_s32): Likewise.\n\t(vclzq_s8): Likewise.\n\t(vclzq_s16): Likewise.\n\t(vclzq_s32): Likewise.\n\t(vnegq_s8): Likewise.\n\t(vnegq_s16): Likewise.\n\t(vnegq_s32): Likewise.\n\t(vaddlvq_s32): Likewise.\n\t(vaddvq_s8): Likewise.\n\t(vaddvq_s16): Likewise.\n\t(vaddvq_s32): Likewise.\n\t(vmovlbq_s8): Likewise.\n\t(vmovlbq_s16): Likewise.\n\t(vmovltq_s8): Likewise.\n\t(vmovltq_s16): Likewise.\n\t(vmvnq_s8): Likewise.\n\t(vmvnq_s16): Likewise.\n\t(vmvnq_s32): Likewise.\n\t(vrev16q_s8): Likewise.\n\t(vrev32q_s8): Likewise.\n\t(vrev32q_s16): Likewise.\n\t(vqabsq_s8): Likewise.\n\t(vqabsq_s16): Likewise.\n\t(vqabsq_s32): Likewise.\n\t(vqnegq_s8): Likewise.\n\t(vqnegq_s16): Likewise.\n\t(vqnegq_s32): Likewise.\n\t(vcvtaq_s16_f16): Likewise.\n\t(vcvtaq_s32_f32): Likewise.\n\t(vcvtnq_s16_f16): Likewise.\n\t(vcvtnq_s32_f32): Likewise.\n\t(vcvtpq_s16_f16): Likewise.\n\t(vcvtpq_s32_f32): Likewise.\n\t(vcvtmq_s16_f16): Likewise.\n\t(vcvtmq_s32_f32): Likewise.\n\t(vmvnq_u8): Likewise.\n\t(vmvnq_u16): Likewise.\n\t(vmvnq_u32): Likewise.\n\t(vdupq_n_u8): Likewise.\n\t(vdupq_n_u16): Likewise.\n\t(vdupq_n_u32): Likewise.\n\t(vclzq_u8): Likewise.\n\t(vclzq_u16): Likewise.\n\t(vclzq_u32): Likewise.\n\t(vaddvq_u8): Likewise.\n\t(vaddvq_u16): Likewise.\n\t(vaddvq_u32): Likewise.\n\t(vrev32q_u8): Likewise.\n\t(vrev32q_u16): Likewise.\n\t(vmovltq_u8): Likewise.\n\t(vmovltq_u16): Likewise.\n\t(vmovlbq_u8): Likewise.\n\t(vmovlbq_u16): Likewise.\n\t(vrev16q_u8): Likewise.\n\t(vaddlvq_u32): Likewise.\n\t(vcvtpq_u16_f16): Likewise.\n\t(vcvtpq_u32_f32): Likewise.\n\t(vcvtnq_u16_f16): Likewise.\n\t(vcvtmq_u16_f16): Likewise.\n\t(vcvtmq_u32_f32): Likewise.\n\t(vcvtaq_u16_f16): Likewise.\n\t(vcvtaq_u32_f32): Likewise.\n\t(__arm_vdupq_n_s8): Define intrinsic.\n\t(__arm_vdupq_n_s16): Likewise.\n\t(__arm_vdupq_n_s32): Likewise.\n\t(__arm_vabsq_s8): Likewise.\n\t(__arm_vabsq_s16): Likewise.\n\t(__arm_vabsq_s32): Likewise.\n\t(__arm_vclsq_s8): Likewise.\n\t(__arm_vclsq_s16): Likewise.\n\t(__arm_vclsq_s32): Likewise.\n\t(__arm_vclzq_s8): Likewise.\n\t(__arm_vclzq_s16): Likewise.\n\t(__arm_vclzq_s32): Likewise.\n\t(__arm_vnegq_s8): Likewise.\n\t(__arm_vnegq_s16): Likewise.\n\t(__arm_vnegq_s32): Likewise.\n\t(__arm_vaddlvq_s32): Likewise.\n\t(__arm_vaddvq_s8): Likewise.\n\t(__arm_vaddvq_s16): Likewise.\n\t(__arm_vaddvq_s32): Likewise.\n\t(__arm_vmovlbq_s8): Likewise.\n\t(__arm_vmovlbq_s16): Likewise.\n\t(__arm_vmovltq_s8): Likewise.\n\t(__arm_vmovltq_s16): Likewise.\n\t(__arm_vmvnq_s8): Likewise.\n\t(__arm_vmvnq_s16): Likewise.\n\t(__arm_vmvnq_s32): Likewise.\n\t(__arm_vrev16q_s8): Likewise.\n\t(__arm_vrev32q_s8): Likewise.\n\t(__arm_vrev32q_s16): Likewise.\n\t(__arm_vqabsq_s8): Likewise.\n\t(__arm_vqabsq_s16): Likewise.\n\t(__arm_vqabsq_s32): Likewise.\n\t(__arm_vqnegq_s8): Likewise.\n\t(__arm_vqnegq_s16): Likewise.\n\t(__arm_vqnegq_s32): Likewise.\n\t(__arm_vmvnq_u8): Likewise.\n\t(__arm_vmvnq_u16): Likewise.\n\t(__arm_vmvnq_u32): Likewise.\n\t(__arm_vdupq_n_u8): Likewise.\n\t(__arm_vdupq_n_u16): Likewise.\n\t(__arm_vdupq_n_u32): Likewise.\n\t(__arm_vclzq_u8): Likewise.\n\t(__arm_vclzq_u16): Likewise.\n\t(__arm_vclzq_u32): Likewise.\n\t(__arm_vaddvq_u8): Likewise.\n\t(__arm_vaddvq_u16): Likewise.\n\t(__arm_vaddvq_u32): Likewise.\n\t(__arm_vrev32q_u8): Likewise.\n\t(__arm_vrev32q_u16): Likewise.\n\t(__arm_vmovltq_u8): Likewise.\n\t(__arm_vmovltq_u16): Likewise.\n\t(__arm_vmovlbq_u8): Likewise.\n\t(__arm_vmovlbq_u16): Likewise.\n\t(__arm_vrev16q_u8): Likewise.\n\t(__arm_vaddlvq_u32): Likewise.\n\t(__arm_vcvtpq_u16_f16): Likewise.\n\t(__arm_vcvtpq_u32_f32): Likewise.\n\t(__arm_vcvtnq_u16_f16): Likewise.\n\t(__arm_vcvtmq_u16_f16): Likewise.\n\t(__arm_vcvtmq_u32_f32): Likewise.\n\t(__arm_vcvtaq_u16_f16): Likewise.\n\t(__arm_vcvtaq_u32_f32): Likewise.\n\t(__arm_vcvtaq_s16_f16): Likewise.\n\t(__arm_vcvtaq_s32_f32): Likewise.\n\t(__arm_vcvtnq_s16_f16): Likewise.\n\t(__arm_vcvtnq_s32_f32): Likewise.\n\t(__arm_vcvtpq_s16_f16): Likewise.\n\t(__arm_vcvtpq_s32_f32): Likewise.\n\t(__arm_vcvtmq_s16_f16): Likewise.\n\t(__arm_vcvtmq_s32_f32): Likewise.\n\t(vdupq_n): Define polymorphic variant.\n\t(vabsq): Likewise.\n\t(vclsq): Likewise.\n\t(vclzq): Likewise.\n\t(vnegq): Likewise.\n\t(vaddlvq): Likewise.\n\t(vaddvq): Likewise.\n\t(vmovlbq): Likewise.\n\t(vmovltq): Likewise.\n\t(vmvnq): Likewise.\n\t(vrev16q): Likewise.\n\t(vrev32q): Likewise.\n\t(vqabsq): Likewise.\n\t(vqnegq): Likewise.\n\t* config/arm/arm_mve_builtins.def (UNOP_SNONE_SNONE): Use it.\n\t(UNOP_SNONE_NONE): Likewise.\n\t(UNOP_UNONE_UNONE): Likewise.\n\t(UNOP_UNONE_NONE): Likewise.\n\t* config/arm/constraints.md (e): Define new constriant to allow only\n\teven registers.\n\t* config/arm/mve.md (mve_vqabsq_s<mode>): Define RTL pattern.\n\t(mve_vnegq_s<mode>): Likewise.\n\t(mve_vmvnq_<supf><mode>): Likewise.\n\t(mve_vdupq_n_<supf><mode>): Likewise.\n\t(mve_vclzq_<supf><mode>): Likewise.\n\t(mve_vclsq_s<mode>): Likewise.\n\t(mve_vaddvq_<supf><mode>): Likewise.\n\t(mve_vabsq_s<mode>): Likewise.\n\t(mve_vrev32q_<supf><mode>): Likewise.\n\t(mve_vmovltq_<supf><mode>): Likewise.\n\t(mve_vmovlbq_<supf><mode>): Likewise.\n\t(mve_vcvtpq_<supf><mode>): Likewise.\n\t(mve_vcvtnq_<supf><mode>): Likewise.\n\t(mve_vcvtmq_<supf><mode>): Likewise.\n\t(mve_vcvtaq_<supf><mode>): Likewise.\n\t(mve_vrev16q_<supf>v16qi): Likewise.\n\t(mve_vaddlvq_<supf>v4si): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n2020-03-17  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n            Mihail Ionescu  <mihail.ionescu@arm.com>\n            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n\n\t* gcc.target/arm/mve/intrinsics/vabsq_s16.c: New test.\n\t* gcc.target/arm/mve/intrinsics/vabsq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabsq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddlvq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddlvq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vclsq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vclsq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vclsq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vclzq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vclzq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vclzq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vclzq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vclzq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vclzq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtaq_s16_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtaq_s32_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtaq_u16_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtaq_u32_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtmq_s16_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtmq_s32_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtmq_u16_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtmq_u32_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtnq_s16_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtnq_s32_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtnq_u16_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtpq_s16_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtpq_s32_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtpq_u16_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtpq_u32_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdupq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdupq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdupq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdupq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdupq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdupq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmovlbq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmovlbq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmovlbq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmovlbq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmovltq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmovltq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmovltq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmovltq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmvnq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmvnq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmvnq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmvnq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmvnq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmvnq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vnegq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vnegq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vnegq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqabsq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqabsq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqabsq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqnegq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqnegq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqnegq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev16q_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev16q_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev32q_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev32q_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev32q_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev32q_u8.c: Likewise.", "tree": {"sha": "67dd7dd071262469a281548607745214b91b9d3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/67dd7dd071262469a281548607745214b91b9d3e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6df4618cac91499f411673b33a516a5310cfbf79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6df4618cac91499f411673b33a516a5310cfbf79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6df4618cac91499f411673b33a516a5310cfbf79", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6df4618cac91499f411673b33a516a5310cfbf79/comments", "author": {"login": "sripar01", "id": 115715849, "node_id": "U_kgDOBuWvCQ", "avatar_url": "https://avatars.githubusercontent.com/u/115715849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sripar01", "html_url": "https://github.com/sripar01", "followers_url": "https://api.github.com/users/sripar01/followers", "following_url": "https://api.github.com/users/sripar01/following{/other_user}", "gists_url": "https://api.github.com/users/sripar01/gists{/gist_id}", "starred_url": "https://api.github.com/users/sripar01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sripar01/subscriptions", "organizations_url": "https://api.github.com/users/sripar01/orgs", "repos_url": "https://api.github.com/users/sripar01/repos", "events_url": "https://api.github.com/users/sripar01/events{/privacy}", "received_events_url": "https://api.github.com/users/sripar01/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "700d4cb08c88aec37c13e21e63dd61fd698baabc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/700d4cb08c88aec37c13e21e63dd61fd698baabc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/700d4cb08c88aec37c13e21e63dd61fd698baabc"}], "stats": {"total": 2703, "additions": 2695, "deletions": 8}, "files": [{"sha": "8f7b261ca9d71fefceadc8b945389666709af9af", "filename": "gcc/ChangeLog", "status": "modified", "additions": 183, "deletions": 0, "changes": 183, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6df4618cac91499f411673b33a516a5310cfbf79", "patch": "@@ -1,3 +1,186 @@\n+2020-03-17  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+            Mihail Ionescu  <mihail.ionescu@arm.com>\n+            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\t* config/arm/arm.h (enum reg_class): Define new class EVEN_REGS.\n+\t* config/arm/arm_mve.h (vdupq_n_s8): Define macro.\n+\t(vdupq_n_s16): Likewise.\n+\t(vdupq_n_s32): Likewise.\n+\t(vabsq_s8): Likewise.\n+\t(vabsq_s16): Likewise.\n+\t(vabsq_s32): Likewise.\n+\t(vclsq_s8): Likewise.\n+\t(vclsq_s16): Likewise.\n+\t(vclsq_s32): Likewise.\n+\t(vclzq_s8): Likewise.\n+\t(vclzq_s16): Likewise.\n+\t(vclzq_s32): Likewise.\n+\t(vnegq_s8): Likewise.\n+\t(vnegq_s16): Likewise.\n+\t(vnegq_s32): Likewise.\n+\t(vaddlvq_s32): Likewise.\n+\t(vaddvq_s8): Likewise.\n+\t(vaddvq_s16): Likewise.\n+\t(vaddvq_s32): Likewise.\n+\t(vmovlbq_s8): Likewise.\n+\t(vmovlbq_s16): Likewise.\n+\t(vmovltq_s8): Likewise.\n+\t(vmovltq_s16): Likewise.\n+\t(vmvnq_s8): Likewise.\n+\t(vmvnq_s16): Likewise.\n+\t(vmvnq_s32): Likewise.\n+\t(vrev16q_s8): Likewise.\n+\t(vrev32q_s8): Likewise.\n+\t(vrev32q_s16): Likewise.\n+\t(vqabsq_s8): Likewise.\n+\t(vqabsq_s16): Likewise.\n+\t(vqabsq_s32): Likewise.\n+\t(vqnegq_s8): Likewise.\n+\t(vqnegq_s16): Likewise.\n+\t(vqnegq_s32): Likewise.\n+\t(vcvtaq_s16_f16): Likewise.\n+\t(vcvtaq_s32_f32): Likewise.\n+\t(vcvtnq_s16_f16): Likewise.\n+\t(vcvtnq_s32_f32): Likewise.\n+\t(vcvtpq_s16_f16): Likewise.\n+\t(vcvtpq_s32_f32): Likewise.\n+\t(vcvtmq_s16_f16): Likewise.\n+\t(vcvtmq_s32_f32): Likewise.\n+\t(vmvnq_u8): Likewise.\n+\t(vmvnq_u16): Likewise.\n+\t(vmvnq_u32): Likewise.\n+\t(vdupq_n_u8): Likewise.\n+\t(vdupq_n_u16): Likewise.\n+\t(vdupq_n_u32): Likewise.\n+\t(vclzq_u8): Likewise.\n+\t(vclzq_u16): Likewise.\n+\t(vclzq_u32): Likewise.\n+\t(vaddvq_u8): Likewise.\n+\t(vaddvq_u16): Likewise.\n+\t(vaddvq_u32): Likewise.\n+\t(vrev32q_u8): Likewise.\n+\t(vrev32q_u16): Likewise.\n+\t(vmovltq_u8): Likewise.\n+\t(vmovltq_u16): Likewise.\n+\t(vmovlbq_u8): Likewise.\n+\t(vmovlbq_u16): Likewise.\n+\t(vrev16q_u8): Likewise.\n+\t(vaddlvq_u32): Likewise.\n+\t(vcvtpq_u16_f16): Likewise.\n+\t(vcvtpq_u32_f32): Likewise.\n+\t(vcvtnq_u16_f16): Likewise.\n+\t(vcvtmq_u16_f16): Likewise.\n+\t(vcvtmq_u32_f32): Likewise.\n+\t(vcvtaq_u16_f16): Likewise.\n+\t(vcvtaq_u32_f32): Likewise.\n+\t(__arm_vdupq_n_s8): Define intrinsic.\n+\t(__arm_vdupq_n_s16): Likewise.\n+\t(__arm_vdupq_n_s32): Likewise.\n+\t(__arm_vabsq_s8): Likewise.\n+\t(__arm_vabsq_s16): Likewise.\n+\t(__arm_vabsq_s32): Likewise.\n+\t(__arm_vclsq_s8): Likewise.\n+\t(__arm_vclsq_s16): Likewise.\n+\t(__arm_vclsq_s32): Likewise.\n+\t(__arm_vclzq_s8): Likewise.\n+\t(__arm_vclzq_s16): Likewise.\n+\t(__arm_vclzq_s32): Likewise.\n+\t(__arm_vnegq_s8): Likewise.\n+\t(__arm_vnegq_s16): Likewise.\n+\t(__arm_vnegq_s32): Likewise.\n+\t(__arm_vaddlvq_s32): Likewise.\n+\t(__arm_vaddvq_s8): Likewise.\n+\t(__arm_vaddvq_s16): Likewise.\n+\t(__arm_vaddvq_s32): Likewise.\n+\t(__arm_vmovlbq_s8): Likewise.\n+\t(__arm_vmovlbq_s16): Likewise.\n+\t(__arm_vmovltq_s8): Likewise.\n+\t(__arm_vmovltq_s16): Likewise.\n+\t(__arm_vmvnq_s8): Likewise.\n+\t(__arm_vmvnq_s16): Likewise.\n+\t(__arm_vmvnq_s32): Likewise.\n+\t(__arm_vrev16q_s8): Likewise.\n+\t(__arm_vrev32q_s8): Likewise.\n+\t(__arm_vrev32q_s16): Likewise.\n+\t(__arm_vqabsq_s8): Likewise.\n+\t(__arm_vqabsq_s16): Likewise.\n+\t(__arm_vqabsq_s32): Likewise.\n+\t(__arm_vqnegq_s8): Likewise.\n+\t(__arm_vqnegq_s16): Likewise.\n+\t(__arm_vqnegq_s32): Likewise.\n+\t(__arm_vmvnq_u8): Likewise.\n+\t(__arm_vmvnq_u16): Likewise.\n+\t(__arm_vmvnq_u32): Likewise.\n+\t(__arm_vdupq_n_u8): Likewise.\n+\t(__arm_vdupq_n_u16): Likewise.\n+\t(__arm_vdupq_n_u32): Likewise.\n+\t(__arm_vclzq_u8): Likewise.\n+\t(__arm_vclzq_u16): Likewise.\n+\t(__arm_vclzq_u32): Likewise.\n+\t(__arm_vaddvq_u8): Likewise.\n+\t(__arm_vaddvq_u16): Likewise.\n+\t(__arm_vaddvq_u32): Likewise.\n+\t(__arm_vrev32q_u8): Likewise.\n+\t(__arm_vrev32q_u16): Likewise.\n+\t(__arm_vmovltq_u8): Likewise.\n+\t(__arm_vmovltq_u16): Likewise.\n+\t(__arm_vmovlbq_u8): Likewise.\n+\t(__arm_vmovlbq_u16): Likewise.\n+\t(__arm_vrev16q_u8): Likewise.\n+\t(__arm_vaddlvq_u32): Likewise.\n+\t(__arm_vcvtpq_u16_f16): Likewise.\n+\t(__arm_vcvtpq_u32_f32): Likewise.\n+\t(__arm_vcvtnq_u16_f16): Likewise.\n+\t(__arm_vcvtmq_u16_f16): Likewise.\n+\t(__arm_vcvtmq_u32_f32): Likewise.\n+\t(__arm_vcvtaq_u16_f16): Likewise.\n+\t(__arm_vcvtaq_u32_f32): Likewise.\n+\t(__arm_vcvtaq_s16_f16): Likewise.\n+\t(__arm_vcvtaq_s32_f32): Likewise.\n+\t(__arm_vcvtnq_s16_f16): Likewise.\n+\t(__arm_vcvtnq_s32_f32): Likewise.\n+\t(__arm_vcvtpq_s16_f16): Likewise.\n+\t(__arm_vcvtpq_s32_f32): Likewise.\n+\t(__arm_vcvtmq_s16_f16): Likewise.\n+\t(__arm_vcvtmq_s32_f32): Likewise.\n+\t(vdupq_n): Define polymorphic variant.\n+\t(vabsq): Likewise.\n+\t(vclsq): Likewise.\n+\t(vclzq): Likewise.\n+\t(vnegq): Likewise.\n+\t(vaddlvq): Likewise.\n+\t(vaddvq): Likewise.\n+\t(vmovlbq): Likewise.\n+\t(vmovltq): Likewise.\n+\t(vmvnq): Likewise.\n+\t(vrev16q): Likewise.\n+\t(vrev32q): Likewise.\n+\t(vqabsq): Likewise.\n+\t(vqnegq): Likewise.\n+\t* config/arm/arm_mve_builtins.def (UNOP_SNONE_SNONE): Use it.\n+\t(UNOP_SNONE_NONE): Likewise.\n+\t(UNOP_UNONE_UNONE): Likewise.\n+\t(UNOP_UNONE_NONE): Likewise.\n+\t* config/arm/constraints.md (e): Define new constriant to allow only\n+\teven registers.\n+\t* config/arm/mve.md (mve_vqabsq_s<mode>): Define RTL pattern.\n+\t(mve_vnegq_s<mode>): Likewise.\n+\t(mve_vmvnq_<supf><mode>): Likewise.\n+\t(mve_vdupq_n_<supf><mode>): Likewise.\n+\t(mve_vclzq_<supf><mode>): Likewise.\n+\t(mve_vclsq_s<mode>): Likewise.\n+\t(mve_vaddvq_<supf><mode>): Likewise.\n+\t(mve_vabsq_s<mode>): Likewise.\n+\t(mve_vrev32q_<supf><mode>): Likewise.\n+\t(mve_vmovltq_<supf><mode>): Likewise.\n+\t(mve_vmovlbq_<supf><mode>): Likewise.\n+\t(mve_vcvtpq_<supf><mode>): Likewise.\n+\t(mve_vcvtnq_<supf><mode>): Likewise.\n+\t(mve_vcvtmq_<supf><mode>): Likewise.\n+\t(mve_vcvtaq_<supf><mode>): Likewise.\n+\t(mve_vrev16q_<supf>v16qi): Likewise.\n+\t(mve_vaddlvq_<supf>v4si): Likewise.\n+\n 2020-03-17  Jakub Jelinek  <jakub@redhat.com>\n \n \t* lra-spills.c (remove_pseudos): Fix up duplicated word issue in"}, {"sha": "fb55f73c62b800009242947ffd4348003068b42a", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=6df4618cac91499f411673b33a516a5310cfbf79", "patch": "@@ -1167,6 +1167,7 @@ enum reg_class\n   BASE_REGS,\n   HI_REGS,\n   CALLER_SAVE_REGS,\n+  EVEN_REG,\n   GENERAL_REGS,\n   CORE_REGS,\n   VFP_D0_D7_REGS,\n@@ -1195,6 +1196,7 @@ enum reg_class\n   \"BASE_REGS\",\t\t\\\n   \"HI_REGS\",\t\t\\\n   \"CALLER_SAVE_REGS\",\t\\\n+  \"EVEN_REG\",\t\t\\\n   \"GENERAL_REGS\",\t\\\n   \"CORE_REGS\",\t\t\\\n   \"VFP_D0_D7_REGS\",\t\\\n@@ -1222,6 +1224,7 @@ enum reg_class\n   { 0x000020FF, 0x00000000, 0x00000000, 0x00000000 }, /* BASE_REGS */\t\\\n   { 0x00005F00, 0x00000000, 0x00000000, 0x00000000 }, /* HI_REGS */\t\\\n   { 0x0000100F, 0x00000000, 0x00000000, 0x00000000 }, /* CALLER_SAVE_REGS */ \\\n+  { 0x00005555, 0x00000000, 0x00000000, 0x00000000 }, /* EVEN_REGS.  */ \\\n   { 0x00005FFF, 0x00000000, 0x00000000, 0x00000000 }, /* GENERAL_REGS */ \\\n   { 0x00007FFF, 0x00000000, 0x00000000, 0x00000000 }, /* CORE_REGS */\t\\\n   { 0xFFFF0000, 0x00000000, 0x00000000, 0x00000000 }, /* VFP_D0_D7_REGS  */ \\"}, {"sha": "912849f0acd36e9c8c3a00f4253a691b7085e72d", "filename": "gcc/config/arm/arm_mve.h", "status": "modified", "additions": 740, "deletions": 0, "changes": 740, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Fconfig%2Farm%2Farm_mve.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Fconfig%2Farm%2Farm_mve.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve.h?ref=6df4618cac91499f411673b33a516a5310cfbf79", "patch": "@@ -108,20 +108,90 @@ typedef struct { uint8x16_t val[4]; } uint8x16x4_t;\n #define vcvtq_f32_s32(__a) __arm_vcvtq_f32_s32(__a)\n #define vcvtq_f16_u16(__a) __arm_vcvtq_f16_u16(__a)\n #define vcvtq_f32_u32(__a) __arm_vcvtq_f32_u32(__a)\n+#define vdupq_n_s8(__a) __arm_vdupq_n_s8(__a)\n+#define vdupq_n_s16(__a) __arm_vdupq_n_s16(__a)\n+#define vdupq_n_s32(__a) __arm_vdupq_n_s32(__a)\n+#define vabsq_s8(__a) __arm_vabsq_s8(__a)\n+#define vabsq_s16(__a) __arm_vabsq_s16(__a)\n+#define vabsq_s32(__a) __arm_vabsq_s32(__a)\n+#define vclsq_s8(__a) __arm_vclsq_s8(__a)\n+#define vclsq_s16(__a) __arm_vclsq_s16(__a)\n+#define vclsq_s32(__a) __arm_vclsq_s32(__a)\n+#define vclzq_s8(__a) __arm_vclzq_s8(__a)\n+#define vclzq_s16(__a) __arm_vclzq_s16(__a)\n+#define vclzq_s32(__a) __arm_vclzq_s32(__a)\n+#define vnegq_s8(__a) __arm_vnegq_s8(__a)\n+#define vnegq_s16(__a) __arm_vnegq_s16(__a)\n+#define vnegq_s32(__a) __arm_vnegq_s32(__a)\n+#define vaddlvq_s32(__a) __arm_vaddlvq_s32(__a)\n+#define vaddvq_s8(__a) __arm_vaddvq_s8(__a)\n+#define vaddvq_s16(__a) __arm_vaddvq_s16(__a)\n+#define vaddvq_s32(__a) __arm_vaddvq_s32(__a)\n+#define vmovlbq_s8(__a) __arm_vmovlbq_s8(__a)\n+#define vmovlbq_s16(__a) __arm_vmovlbq_s16(__a)\n+#define vmovltq_s8(__a) __arm_vmovltq_s8(__a)\n+#define vmovltq_s16(__a) __arm_vmovltq_s16(__a)\n+#define vmvnq_s8(__a) __arm_vmvnq_s8(__a)\n+#define vmvnq_s16(__a) __arm_vmvnq_s16(__a)\n+#define vmvnq_s32(__a) __arm_vmvnq_s32(__a)\n #define vmvnq_n_s16( __imm) __arm_vmvnq_n_s16( __imm)\n #define vmvnq_n_s32( __imm) __arm_vmvnq_n_s32( __imm)\n+#define vrev16q_s8(__a) __arm_vrev16q_s8(__a)\n+#define vrev32q_s8(__a) __arm_vrev32q_s8(__a)\n+#define vrev32q_s16(__a) __arm_vrev32q_s16(__a)\n #define vrev64q_s8(__a) __arm_vrev64q_s8(__a)\n #define vrev64q_s16(__a) __arm_vrev64q_s16(__a)\n #define vrev64q_s32(__a) __arm_vrev64q_s32(__a)\n+#define vqabsq_s8(__a) __arm_vqabsq_s8(__a)\n+#define vqabsq_s16(__a) __arm_vqabsq_s16(__a)\n+#define vqabsq_s32(__a) __arm_vqabsq_s32(__a)\n+#define vqnegq_s8(__a) __arm_vqnegq_s8(__a)\n+#define vqnegq_s16(__a) __arm_vqnegq_s16(__a)\n+#define vqnegq_s32(__a) __arm_vqnegq_s32(__a)\n+#define vcvtaq_s16_f16(__a) __arm_vcvtaq_s16_f16(__a)\n+#define vcvtaq_s32_f32(__a) __arm_vcvtaq_s32_f32(__a)\n+#define vcvtnq_s16_f16(__a) __arm_vcvtnq_s16_f16(__a)\n+#define vcvtnq_s32_f32(__a) __arm_vcvtnq_s32_f32(__a)\n+#define vcvtpq_s16_f16(__a) __arm_vcvtpq_s16_f16(__a)\n+#define vcvtpq_s32_f32(__a) __arm_vcvtpq_s32_f32(__a)\n+#define vcvtmq_s16_f16(__a) __arm_vcvtmq_s16_f16(__a)\n+#define vcvtmq_s32_f32(__a) __arm_vcvtmq_s32_f32(__a)\n #define vcvtq_s16_f16(__a) __arm_vcvtq_s16_f16(__a)\n #define vcvtq_s32_f32(__a) __arm_vcvtq_s32_f32(__a)\n #define vrev64q_u8(__a) __arm_vrev64q_u8(__a)\n #define vrev64q_u16(__a) __arm_vrev64q_u16(__a)\n #define vrev64q_u32(__a) __arm_vrev64q_u32(__a)\n+#define vmvnq_u8(__a) __arm_vmvnq_u8(__a)\n+#define vmvnq_u16(__a) __arm_vmvnq_u16(__a)\n+#define vmvnq_u32(__a) __arm_vmvnq_u32(__a)\n+#define vdupq_n_u8(__a) __arm_vdupq_n_u8(__a)\n+#define vdupq_n_u16(__a) __arm_vdupq_n_u16(__a)\n+#define vdupq_n_u32(__a) __arm_vdupq_n_u32(__a)\n+#define vclzq_u8(__a) __arm_vclzq_u8(__a)\n+#define vclzq_u16(__a) __arm_vclzq_u16(__a)\n+#define vclzq_u32(__a) __arm_vclzq_u32(__a)\n+#define vaddvq_u8(__a) __arm_vaddvq_u8(__a)\n+#define vaddvq_u16(__a) __arm_vaddvq_u16(__a)\n+#define vaddvq_u32(__a) __arm_vaddvq_u32(__a)\n+#define vrev32q_u8(__a) __arm_vrev32q_u8(__a)\n+#define vrev32q_u16(__a) __arm_vrev32q_u16(__a)\n+#define vmovltq_u8(__a) __arm_vmovltq_u8(__a)\n+#define vmovltq_u16(__a) __arm_vmovltq_u16(__a)\n+#define vmovlbq_u8(__a) __arm_vmovlbq_u8(__a)\n+#define vmovlbq_u16(__a) __arm_vmovlbq_u16(__a)\n #define vmvnq_n_u16( __imm) __arm_vmvnq_n_u16( __imm)\n #define vmvnq_n_u32( __imm) __arm_vmvnq_n_u32( __imm)\n+#define vrev16q_u8(__a) __arm_vrev16q_u8(__a)\n+#define vaddlvq_u32(__a) __arm_vaddlvq_u32(__a)\n #define vcvtq_u16_f16(__a) __arm_vcvtq_u16_f16(__a)\n #define vcvtq_u32_f32(__a) __arm_vcvtq_u32_f32(__a)\n+#define vcvtpq_u16_f16(__a) __arm_vcvtpq_u16_f16(__a)\n+#define vcvtpq_u32_f32(__a) __arm_vcvtpq_u32_f32(__a)\n+#define vcvtnq_u16_f16(__a) __arm_vcvtnq_u16_f16(__a)\n+#define vcvtmq_u16_f16(__a) __arm_vcvtmq_u16_f16(__a)\n+#define vcvtmq_u32_f32(__a) __arm_vcvtmq_u32_f32(__a)\n+#define vcvtaq_u16_f16(__a) __arm_vcvtaq_u16_f16(__a)\n+#define vcvtaq_u32_f32(__a) __arm_vcvtaq_u32_f32(__a)\n #endif\n \n __extension__ extern __inline void\n@@ -178,6 +248,188 @@ __arm_vst4q_u32 (uint32_t * __addr, uint32x4x4_t __value)\n   __builtin_mve_vst4qv4si ((__builtin_neon_si *) __addr, __rv.__o);\n }\n \n+__extension__ extern __inline int8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vdupq_n_s8 (int8_t __a)\n+{\n+  return __builtin_mve_vdupq_n_sv16qi (__a);\n+}\n+\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vdupq_n_s16 (int16_t __a)\n+{\n+  return __builtin_mve_vdupq_n_sv8hi (__a);\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vdupq_n_s32 (int32_t __a)\n+{\n+  return __builtin_mve_vdupq_n_sv4si (__a);\n+}\n+\n+__extension__ extern __inline int8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vabsq_s8 (int8x16_t __a)\n+{\n+  return __builtin_mve_vabsq_sv16qi (__a);\n+}\n+\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vabsq_s16 (int16x8_t __a)\n+{\n+  return __builtin_mve_vabsq_sv8hi (__a);\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vabsq_s32 (int32x4_t __a)\n+{\n+  return __builtin_mve_vabsq_sv4si (__a);\n+}\n+\n+__extension__ extern __inline int8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vclsq_s8 (int8x16_t __a)\n+{\n+  return __builtin_mve_vclsq_sv16qi (__a);\n+}\n+\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vclsq_s16 (int16x8_t __a)\n+{\n+  return __builtin_mve_vclsq_sv8hi (__a);\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vclsq_s32 (int32x4_t __a)\n+{\n+  return __builtin_mve_vclsq_sv4si (__a);\n+}\n+\n+__extension__ extern __inline int8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vclzq_s8 (int8x16_t __a)\n+{\n+  return __builtin_mve_vclzq_sv16qi (__a);\n+}\n+\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vclzq_s16 (int16x8_t __a)\n+{\n+  return __builtin_mve_vclzq_sv8hi (__a);\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vclzq_s32 (int32x4_t __a)\n+{\n+  return __builtin_mve_vclzq_sv4si (__a);\n+}\n+\n+__extension__ extern __inline int8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vnegq_s8 (int8x16_t __a)\n+{\n+  return __builtin_mve_vnegq_sv16qi (__a);\n+}\n+\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vnegq_s16 (int16x8_t __a)\n+{\n+  return __builtin_mve_vnegq_sv8hi (__a);\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vnegq_s32 (int32x4_t __a)\n+{\n+  return __builtin_mve_vnegq_sv4si (__a);\n+}\n+\n+__extension__ extern __inline int64_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vaddlvq_s32 (int32x4_t __a)\n+{\n+  return __builtin_mve_vaddlvq_sv4si (__a);\n+}\n+\n+__extension__ extern __inline int32_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vaddvq_s8 (int8x16_t __a)\n+{\n+  return __builtin_mve_vaddvq_sv16qi (__a);\n+}\n+\n+__extension__ extern __inline int32_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vaddvq_s16 (int16x8_t __a)\n+{\n+  return __builtin_mve_vaddvq_sv8hi (__a);\n+}\n+\n+__extension__ extern __inline int32_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vaddvq_s32 (int32x4_t __a)\n+{\n+  return __builtin_mve_vaddvq_sv4si (__a);\n+}\n+\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vmovlbq_s8 (int8x16_t __a)\n+{\n+  return __builtin_mve_vmovlbq_sv16qi (__a);\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vmovlbq_s16 (int16x8_t __a)\n+{\n+  return __builtin_mve_vmovlbq_sv8hi (__a);\n+}\n+\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vmovltq_s8 (int8x16_t __a)\n+{\n+  return __builtin_mve_vmovltq_sv16qi (__a);\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vmovltq_s16 (int16x8_t __a)\n+{\n+  return __builtin_mve_vmovltq_sv8hi (__a);\n+}\n+\n+__extension__ extern __inline int8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vmvnq_s8 (int8x16_t __a)\n+{\n+  return __builtin_mve_vmvnq_sv16qi (__a);\n+}\n+\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vmvnq_s16 (int16x8_t __a)\n+{\n+  return __builtin_mve_vmvnq_sv8hi (__a);\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vmvnq_s32 (int32x4_t __a)\n+{\n+  return __builtin_mve_vmvnq_sv4si (__a);\n+}\n+\n __extension__ extern __inline int16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vmvnq_n_s16 (const int16_t __imm)\n@@ -192,6 +444,27 @@ __arm_vmvnq_n_s32 (const int32_t __imm)\n   return __builtin_mve_vmvnq_n_sv4si (__imm);\n }\n \n+__extension__ extern __inline int8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vrev16q_s8 (int8x16_t __a)\n+{\n+  return __builtin_mve_vrev16q_sv16qi (__a);\n+}\n+\n+__extension__ extern __inline int8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vrev32q_s8 (int8x16_t __a)\n+{\n+  return __builtin_mve_vrev32q_sv16qi (__a);\n+}\n+\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vrev32q_s16 (int16x8_t __a)\n+{\n+  return __builtin_mve_vrev32q_sv8hi (__a);\n+}\n+\n __extension__ extern __inline int8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vrev64q_s8 (int8x16_t __a)\n@@ -213,6 +486,48 @@ __arm_vrev64q_s32 (int32x4_t __a)\n   return __builtin_mve_vrev64q_sv4si (__a);\n }\n \n+__extension__ extern __inline int8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vqabsq_s8 (int8x16_t __a)\n+{\n+  return __builtin_mve_vqabsq_sv16qi (__a);\n+}\n+\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vqabsq_s16 (int16x8_t __a)\n+{\n+  return __builtin_mve_vqabsq_sv8hi (__a);\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vqabsq_s32 (int32x4_t __a)\n+{\n+  return __builtin_mve_vqabsq_sv4si (__a);\n+}\n+\n+__extension__ extern __inline int8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vqnegq_s8 (int8x16_t __a)\n+{\n+  return __builtin_mve_vqnegq_sv16qi (__a);\n+}\n+\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vqnegq_s16 (int16x8_t __a)\n+{\n+  return __builtin_mve_vqnegq_sv8hi (__a);\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vqnegq_s32 (int32x4_t __a)\n+{\n+  return __builtin_mve_vqnegq_sv4si (__a);\n+}\n+\n __extension__ extern __inline uint8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vrev64q_u8 (uint8x16_t __a)\n@@ -234,6 +549,132 @@ __arm_vrev64q_u32 (uint32x4_t __a)\n   return __builtin_mve_vrev64q_uv4si (__a);\n }\n \n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vmvnq_u8 (uint8x16_t __a)\n+{\n+  return __builtin_mve_vmvnq_uv16qi (__a);\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vmvnq_u16 (uint16x8_t __a)\n+{\n+  return __builtin_mve_vmvnq_uv8hi (__a);\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vmvnq_u32 (uint32x4_t __a)\n+{\n+  return __builtin_mve_vmvnq_uv4si (__a);\n+}\n+\n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vdupq_n_u8 (uint8_t __a)\n+{\n+  return __builtin_mve_vdupq_n_uv16qi (__a);\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vdupq_n_u16 (uint16_t __a)\n+{\n+  return __builtin_mve_vdupq_n_uv8hi (__a);\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vdupq_n_u32 (uint32_t __a)\n+{\n+  return __builtin_mve_vdupq_n_uv4si (__a);\n+}\n+\n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vclzq_u8 (uint8x16_t __a)\n+{\n+  return __builtin_mve_vclzq_uv16qi (__a);\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vclzq_u16 (uint16x8_t __a)\n+{\n+  return __builtin_mve_vclzq_uv8hi (__a);\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vclzq_u32 (uint32x4_t __a)\n+{\n+  return __builtin_mve_vclzq_uv4si (__a);\n+}\n+\n+__extension__ extern __inline uint32_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vaddvq_u8 (uint8x16_t __a)\n+{\n+  return __builtin_mve_vaddvq_uv16qi (__a);\n+}\n+\n+__extension__ extern __inline uint32_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vaddvq_u16 (uint16x8_t __a)\n+{\n+  return __builtin_mve_vaddvq_uv8hi (__a);\n+}\n+\n+__extension__ extern __inline uint32_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vaddvq_u32 (uint32x4_t __a)\n+{\n+  return __builtin_mve_vaddvq_uv4si (__a);\n+}\n+\n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vrev32q_u8 (uint8x16_t __a)\n+{\n+  return __builtin_mve_vrev32q_uv16qi (__a);\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vrev32q_u16 (uint16x8_t __a)\n+{\n+  return __builtin_mve_vrev32q_uv8hi (__a);\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vmovltq_u8 (uint8x16_t __a)\n+{\n+  return __builtin_mve_vmovltq_uv16qi (__a);\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vmovltq_u16 (uint16x8_t __a)\n+{\n+  return __builtin_mve_vmovltq_uv8hi (__a);\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vmovlbq_u8 (uint8x16_t __a)\n+{\n+  return __builtin_mve_vmovlbq_uv16qi (__a);\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vmovlbq_u16 (uint16x8_t __a)\n+{\n+  return __builtin_mve_vmovlbq_uv8hi (__a);\n+}\n+\n __extension__ extern __inline uint16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vmvnq_n_u16 (const int __imm)\n@@ -248,6 +689,20 @@ __arm_vmvnq_n_u32 (const int __imm)\n   return __builtin_mve_vmvnq_n_uv4si (__imm);\n }\n \n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vrev16q_u8 (uint8x16_t __a)\n+{\n+  return __builtin_mve_vrev16q_uv16qi (__a);\n+}\n+\n+__extension__ extern __inline uint64_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vaddlvq_u32 (uint32x4_t __a)\n+{\n+  return __builtin_mve_vaddlvq_uv4si (__a);\n+}\n+\n #if (__ARM_FEATURE_MVE & 2) /* MVE Floating point.  */\n \n __extension__ extern __inline void\n@@ -485,6 +940,111 @@ __arm_vcvtq_u32_f32 (float32x4_t __a)\n   return __builtin_mve_vcvtq_from_f_uv4si (__a);\n }\n \n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vcvtpq_u16_f16 (float16x8_t __a)\n+{\n+  return __builtin_mve_vcvtpq_uv8hi (__a);\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vcvtpq_u32_f32 (float32x4_t __a)\n+{\n+  return __builtin_mve_vcvtpq_uv4si (__a);\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vcvtnq_u16_f16 (float16x8_t __a)\n+{\n+  return __builtin_mve_vcvtnq_uv8hi (__a);\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vcvtmq_u16_f16 (float16x8_t __a)\n+{\n+  return __builtin_mve_vcvtmq_uv8hi (__a);\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vcvtmq_u32_f32 (float32x4_t __a)\n+{\n+  return __builtin_mve_vcvtmq_uv4si (__a);\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vcvtaq_u16_f16 (float16x8_t __a)\n+{\n+  return __builtin_mve_vcvtaq_uv8hi (__a);\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vcvtaq_u32_f32 (float32x4_t __a)\n+{\n+  return __builtin_mve_vcvtaq_uv4si (__a);\n+}\n+\n+ __extension__ extern __inline int16x8_t\n+ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vcvtaq_s16_f16 (float16x8_t __a)\n+{\n+  return __builtin_mve_vcvtaq_sv8hi (__a);\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vcvtaq_s32_f32 (float32x4_t __a)\n+{\n+  return __builtin_mve_vcvtaq_sv4si (__a);\n+}\n+\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vcvtnq_s16_f16 (float16x8_t __a)\n+{\n+  return __builtin_mve_vcvtnq_sv8hi (__a);\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vcvtnq_s32_f32 (float32x4_t __a)\n+{\n+  return __builtin_mve_vcvtnq_sv4si (__a);\n+}\n+\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vcvtpq_s16_f16 (float16x8_t __a)\n+{\n+  return __builtin_mve_vcvtpq_sv8hi (__a);\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vcvtpq_s32_f32 (float32x4_t __a)\n+{\n+  return __builtin_mve_vcvtpq_sv4si (__a);\n+}\n+\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vcvtmq_s16_f16 (float16x8_t __a)\n+{\n+  return __builtin_mve_vcvtmq_sv8hi (__a);\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vcvtmq_s32_f32 (float32x4_t __a)\n+{\n+  return __builtin_mve_vcvtmq_sv4si (__a);\n+}\n+\n #endif\n \n enum {\n@@ -735,24 +1295,40 @@ extern void *__ARM_undef;\n #define vrev64q(p0) __arm_vrev64q(p0)\n #define __arm_vrev64q(p0) ({ __typeof(p0) __p0 = (p0); \\\n   _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_int8x16_t]: __arm_vrev64q_s8 (__ARM_mve_coerce(__p0, int8x16_t)), \\\n+  int (*)[__ARM_mve_type_int16x8_t]: __arm_vrev64q_s16 (__ARM_mve_coerce(__p0, int16x8_t)), \\\n+  int (*)[__ARM_mve_type_int32x4_t]: __arm_vrev64q_s32 (__ARM_mve_coerce(__p0, int32x4_t)), \\\n+  int (*)[__ARM_mve_type_uint8x16_t]: __arm_vrev64q_u8 (__ARM_mve_coerce(__p0, uint8x16_t)), \\\n+  int (*)[__ARM_mve_type_uint16x8_t]: __arm_vrev64q_u16 (__ARM_mve_coerce(__p0, uint16x8_t)), \\\n+  int (*)[__ARM_mve_type_uint32x4_t]: __arm_vrev64q_u32 (__ARM_mve_coerce(__p0, uint32x4_t)), \\\n   int (*)[__ARM_mve_type_float16x8_t]: __arm_vrev64q_f16 (__ARM_mve_coerce(__p0, float16x8_t)), \\\n   int (*)[__ARM_mve_type_float32x4_t]: __arm_vrev64q_f32 (__ARM_mve_coerce(__p0, float32x4_t)));})\n \n #define vnegq(p0) __arm_vnegq(p0)\n #define __arm_vnegq(p0) ({ __typeof(p0) __p0 = (p0); \\\n   _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_int8x16_t]: __arm_vnegq_s8 (__ARM_mve_coerce(__p0, int8x16_t)), \\\n+  int (*)[__ARM_mve_type_int16x8_t]: __arm_vnegq_s16 (__ARM_mve_coerce(__p0, int16x8_t)), \\\n+  int (*)[__ARM_mve_type_int32x4_t]: __arm_vnegq_s32 (__ARM_mve_coerce(__p0, int32x4_t)), \\\n   int (*)[__ARM_mve_type_float16x8_t]: __arm_vnegq_f16 (__ARM_mve_coerce(__p0, float16x8_t)), \\\n   int (*)[__ARM_mve_type_float32x4_t]: __arm_vnegq_f32 (__ARM_mve_coerce(__p0, float32x4_t)));})\n \n #define vabsq(p0) __arm_vabsq(p0)\n #define __arm_vabsq(p0) ({ __typeof(p0) __p0 = (p0); \\\n   _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_int8x16_t]: __arm_vabsq_s8 (__ARM_mve_coerce(__p0, int8x16_t)), \\\n+  int (*)[__ARM_mve_type_int16x8_t]: __arm_vabsq_s16 (__ARM_mve_coerce(__p0, int16x8_t)), \\\n+  int (*)[__ARM_mve_type_int32x4_t]: __arm_vabsq_s32 (__ARM_mve_coerce(__p0, int32x4_t)), \\\n   int (*)[__ARM_mve_type_float16x8_t]: __arm_vabsq_f16 (__ARM_mve_coerce(__p0, float16x8_t)), \\\n   int (*)[__ARM_mve_type_float32x4_t]: __arm_vabsq_f32 (__ARM_mve_coerce(__p0, float32x4_t)));})\n \n #define vrev32q(p0) __arm_vrev32q(p0)\n #define __arm_vrev32q(p0) ({ __typeof(p0) __p0 = (p0); \\\n   _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_int8x16_t]: __arm_vrev32q_s8 (__ARM_mve_coerce(__p0, int8x16_t)), \\\n+  int (*)[__ARM_mve_type_int16x8_t]: __arm_vrev32q_s16 (__ARM_mve_coerce(__p0, int16x8_t)), \\\n+  int (*)[__ARM_mve_type_uint8x16_t]: __arm_vrev32q_u8 (__ARM_mve_coerce(__p0, uint8x16_t)), \\\n+  int (*)[__ARM_mve_type_uint16x8_t]: __arm_vrev32q_u16 (__ARM_mve_coerce(__p0, uint16x8_t)), \\\n   int (*)[__ARM_mve_type_float16x8_t]: __arm_vrev32q_f16 (__ARM_mve_coerce(__p0, float16x8_t)));})\n \n #define vcvtbq_f32(p0) __arm_vcvtbq_f32(p0)\n@@ -765,6 +1341,69 @@ extern void *__ARM_undef;\n   _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n   int (*)[__ARM_mve_type_float16x8_t]: __arm_vcvttq_f32_f16 (__ARM_mve_coerce(__p0, float16x8_t)));})\n \n+#define vrev16q(p0) __arm_vrev16q(p0)\n+#define __arm_vrev16q(p0) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_int8x16_t]: __arm_vrev16q_s8 (__ARM_mve_coerce(__p0, int8x16_t)), \\\n+  int (*)[__ARM_mve_type_uint8x16_t]: __arm_vrev16q_u8 (__ARM_mve_coerce(__p0, uint8x16_t)));})\n+\n+#define vqabsq(p0) __arm_vqabsq(p0)\n+#define __arm_vqabsq(p0) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_int8x16_t]: __arm_vqabsq_s8 (__ARM_mve_coerce(__p0, int8x16_t)), \\\n+  int (*)[__ARM_mve_type_int16x8_t]: __arm_vqabsq_s16 (__ARM_mve_coerce(__p0, int16x8_t)), \\\n+  int (*)[__ARM_mve_type_int32x4_t]: __arm_vqabsq_s32 (__ARM_mve_coerce(__p0, int32x4_t)));})\n+\n+#define vqnegq(p0) __arm_vqnegq(p0)\n+#define __arm_vqnegq(p0) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_int8x16_t]: __arm_vqnegq_s8 (__ARM_mve_coerce(__p0, int8x16_t)), \\\n+  int (*)[__ARM_mve_type_int16x8_t]: __arm_vqnegq_s16 (__ARM_mve_coerce(__p0, int16x8_t)), \\\n+  int (*)[__ARM_mve_type_int32x4_t]: __arm_vqnegq_s32 (__ARM_mve_coerce(__p0, int32x4_t)));})\n+\n+#define vmvnq(p0) __arm_vmvnq(p0)\n+#define __arm_vmvnq(p0) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_int8x16_t]: __arm_vmvnq_s8 (__ARM_mve_coerce(__p0, int8x16_t)), \\\n+  int (*)[__ARM_mve_type_int16x8_t]: __arm_vmvnq_s16 (__ARM_mve_coerce(__p0, int16x8_t)), \\\n+  int (*)[__ARM_mve_type_int32x4_t]: __arm_vmvnq_s32 (__ARM_mve_coerce(__p0, int32x4_t)), \\\n+  int (*)[__ARM_mve_type_uint8x16_t]: __arm_vmvnq_u8 (__ARM_mve_coerce(__p0, uint8x16_t)), \\\n+  int (*)[__ARM_mve_type_uint16x8_t]: __arm_vmvnq_u16 (__ARM_mve_coerce(__p0, uint16x8_t)), \\\n+  int (*)[__ARM_mve_type_uint32x4_t]: __arm_vmvnq_u32 (__ARM_mve_coerce(__p0, uint32x4_t)));})\n+\n+#define vmovlbq(p0) __arm_vmovlbq(p0)\n+#define __arm_vmovlbq(p0) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_int8x16_t]: __arm_vmovlbq_s8 (__ARM_mve_coerce(__p0, int8x16_t)), \\\n+  int (*)[__ARM_mve_type_int16x8_t]: __arm_vmovlbq_s16 (__ARM_mve_coerce(__p0, int16x8_t)), \\\n+  int (*)[__ARM_mve_type_uint8x16_t]: __arm_vmovlbq_u8 (__ARM_mve_coerce(__p0, uint8x16_t)), \\\n+  int (*)[__ARM_mve_type_uint16x8_t]: __arm_vmovlbq_u16 (__ARM_mve_coerce(__p0, uint16x8_t)));})\n+\n+#define vmovltq(p0) __arm_vmovltq(p0)\n+#define __arm_vmovltq(p0) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_int8x16_t]: __arm_vmovltq_s8 (__ARM_mve_coerce(__p0, int8x16_t)), \\\n+  int (*)[__ARM_mve_type_int16x8_t]: __arm_vmovltq_s16 (__ARM_mve_coerce(__p0, int16x8_t)), \\\n+  int (*)[__ARM_mve_type_uint8x16_t]: __arm_vmovltq_u8 (__ARM_mve_coerce(__p0, uint8x16_t)), \\\n+  int (*)[__ARM_mve_type_uint16x8_t]: __arm_vmovltq_u16 (__ARM_mve_coerce(__p0, uint16x8_t)));})\n+\n+#define vclzq(p0) __arm_vclzq(p0)\n+#define __arm_vclzq(p0) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_int8x16_t]: __arm_vclzq_s8 (__ARM_mve_coerce(__p0, int8x16_t)), \\\n+  int (*)[__ARM_mve_type_int16x8_t]: __arm_vclzq_s16 (__ARM_mve_coerce(__p0, int16x8_t)), \\\n+  int (*)[__ARM_mve_type_int32x4_t]: __arm_vclzq_s32 (__ARM_mve_coerce(__p0, int32x4_t)), \\\n+  int (*)[__ARM_mve_type_uint8x16_t]: __arm_vclzq_u8 (__ARM_mve_coerce(__p0, uint8x16_t)), \\\n+  int (*)[__ARM_mve_type_uint16x8_t]: __arm_vclzq_u16 (__ARM_mve_coerce(__p0, uint16x8_t)), \\\n+  int (*)[__ARM_mve_type_uint32x4_t]: __arm_vclzq_u32 (__ARM_mve_coerce(__p0, uint32x4_t)));})\n+\n+#define vclsq(p0) __arm_vclsq(p0)\n+#define __arm_vclsq(p0) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_int8x16_t]: __arm_vclsq_s8 (__ARM_mve_coerce(__p0, int8x16_t)), \\\n+  int (*)[__ARM_mve_type_int16x8_t]: __arm_vclsq_s16 (__ARM_mve_coerce(__p0, int16x8_t)), \\\n+  int (*)[__ARM_mve_type_int32x4_t]: __arm_vclsq_s32 (__ARM_mve_coerce(__p0, int32x4_t)));})\n+\n #define vcvtq(p0) __arm_vcvtq(p0)\n #define __arm_vcvtq(p0) ({ __typeof(p0) __p0 = (p0); \\\n   _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n@@ -786,6 +1425,93 @@ extern void *__ARM_undef;\n   int (*)[__ARM_mve_type_uint16_t_ptr][__ARM_mve_type_uint16x8x4_t]: __arm_vst4q_u16 (__ARM_mve_coerce(__p0, uint16_t *), __ARM_mve_coerce(__p1, uint16x8x4_t)), \\\n   int (*)[__ARM_mve_type_uint32_t_ptr][__ARM_mve_type_uint32x4x4_t]: __arm_vst4q_u32 (__ARM_mve_coerce(__p0, uint32_t *), __ARM_mve_coerce(__p1, uint32x4x4_t)));})\n \n+#define vabsq(p0) __arm_vabsq(p0)\n+#define __arm_vabsq(p0) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_int8x16_t]: __arm_vabsq_s8 (__ARM_mve_coerce(__p0, int8x16_t)), \\\n+  int (*)[__ARM_mve_type_int16x8_t]: __arm_vabsq_s16 (__ARM_mve_coerce(__p0, int16x8_t)), \\\n+  int (*)[__ARM_mve_type_int32x4_t]: __arm_vabsq_s32 (__ARM_mve_coerce(__p0, int32x4_t)));})\n+\n+#define vclsq(p0) __arm_vclsq(p0)\n+#define __arm_vclsq(p0) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_int8x16_t]: __arm_vclsq_s8 (__ARM_mve_coerce(__p0, int8x16_t)), \\\n+  int (*)[__ARM_mve_type_int16x8_t]: __arm_vclsq_s16 (__ARM_mve_coerce(__p0, int16x8_t)), \\\n+  int (*)[__ARM_mve_type_int32x4_t]: __arm_vclsq_s32 (__ARM_mve_coerce(__p0, int32x4_t)));})\n+\n+#define vclzq(p0) __arm_vclzq(p0)\n+#define __arm_vclzq(p0) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_int8x16_t]: __arm_vclzq_s8 (__ARM_mve_coerce(__p0, int8x16_t)), \\\n+  int (*)[__ARM_mve_type_int16x8_t]: __arm_vclzq_s16 (__ARM_mve_coerce(__p0, int16x8_t)), \\\n+  int (*)[__ARM_mve_type_int32x4_t]: __arm_vclzq_s32 (__ARM_mve_coerce(__p0, int32x4_t)), \\\n+  int (*)[__ARM_mve_type_uint8x16_t]: __arm_vclzq_u8 (__ARM_mve_coerce(__p0, uint8x16_t)), \\\n+  int (*)[__ARM_mve_type_uint16x8_t]: __arm_vclzq_u16 (__ARM_mve_coerce(__p0, uint16x8_t)), \\\n+  int (*)[__ARM_mve_type_uint32x4_t]: __arm_vclzq_u32 (__ARM_mve_coerce(__p0, uint32x4_t)));})\n+\n+#define vnegq(p0) __arm_vnegq(p0)\n+#define __arm_vnegq(p0) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_int8x16_t]: __arm_vnegq_s8 (__ARM_mve_coerce(__p0, int8x16_t)), \\\n+  int (*)[__ARM_mve_type_int16x8_t]: __arm_vnegq_s16 (__ARM_mve_coerce(__p0, int16x8_t)), \\\n+  int (*)[__ARM_mve_type_int32x4_t]: __arm_vnegq_s32 (__ARM_mve_coerce(__p0, int32x4_t)));})\n+\n+#define vaddlvq(p0) __arm_vaddlvq(p0)\n+#define __arm_vaddlvq(p0) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_int32x4_t]: __arm_vaddlvq_s32 (__ARM_mve_coerce(__p0, int32x4_t)), \\\n+  int (*)[__ARM_mve_type_uint32x4_t]: __arm_vaddlvq_u32 (__ARM_mve_coerce(__p0, uint32x4_t)));})\n+\n+#define vaddvq(p0) __arm_vaddvq(p0)\n+#define __arm_vaddvq(p0) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_int8x16_t]: __arm_vaddvq_s8 (__ARM_mve_coerce(__p0, int8x16_t)), \\\n+  int (*)[__ARM_mve_type_int16x8_t]: __arm_vaddvq_s16 (__ARM_mve_coerce(__p0, int16x8_t)), \\\n+  int (*)[__ARM_mve_type_int32x4_t]: __arm_vaddvq_s32 (__ARM_mve_coerce(__p0, int32x4_t)), \\\n+  int (*)[__ARM_mve_type_uint8x16_t]: __arm_vaddvq_u8 (__ARM_mve_coerce(__p0, uint8x16_t)), \\\n+  int (*)[__ARM_mve_type_uint16x8_t]: __arm_vaddvq_u16 (__ARM_mve_coerce(__p0, uint16x8_t)), \\\n+  int (*)[__ARM_mve_type_uint32x4_t]: __arm_vaddvq_u32 (__ARM_mve_coerce(__p0, uint32x4_t)));})\n+\n+#define vmovlbq(p0) __arm_vmovlbq(p0)\n+#define __arm_vmovlbq(p0) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_int8x16_t]: __arm_vmovlbq_s8 (__ARM_mve_coerce(__p0, int8x16_t)), \\\n+  int (*)[__ARM_mve_type_int16x8_t]: __arm_vmovlbq_s16 (__ARM_mve_coerce(__p0, int16x8_t)), \\\n+  int (*)[__ARM_mve_type_uint8x16_t]: __arm_vmovlbq_u8 (__ARM_mve_coerce(__p0, uint8x16_t)), \\\n+  int (*)[__ARM_mve_type_uint16x8_t]: __arm_vmovlbq_u16 (__ARM_mve_coerce(__p0, uint16x8_t)));})\n+\n+#define vmovltq(p0) __arm_vmovltq(p0)\n+#define __arm_vmovltq(p0) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_int8x16_t]: __arm_vmovltq_s8 (__ARM_mve_coerce(__p0, int8x16_t)), \\\n+  int (*)[__ARM_mve_type_int16x8_t]: __arm_vmovltq_s16 (__ARM_mve_coerce(__p0, int16x8_t)), \\\n+  int (*)[__ARM_mve_type_uint8x16_t]: __arm_vmovltq_u8 (__ARM_mve_coerce(__p0, uint8x16_t)), \\\n+  int (*)[__ARM_mve_type_uint16x8_t]: __arm_vmovltq_u16 (__ARM_mve_coerce(__p0, uint16x8_t)));})\n+\n+#define vmvnq(p0) __arm_vmvnq(p0)\n+#define __arm_vmvnq(p0) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_int8x16_t]: __arm_vmvnq_s8 (__ARM_mve_coerce(__p0, int8x16_t)), \\\n+  int (*)[__ARM_mve_type_int16x8_t]: __arm_vmvnq_s16 (__ARM_mve_coerce(__p0, int16x8_t)), \\\n+  int (*)[__ARM_mve_type_int32x4_t]: __arm_vmvnq_s32 (__ARM_mve_coerce(__p0, int32x4_t)), \\\n+  int (*)[__ARM_mve_type_uint8x16_t]: __arm_vmvnq_u8 (__ARM_mve_coerce(__p0, uint8x16_t)), \\\n+  int (*)[__ARM_mve_type_uint16x8_t]: __arm_vmvnq_u16 (__ARM_mve_coerce(__p0, uint16x8_t)), \\\n+  int (*)[__ARM_mve_type_uint32x4_t]: __arm_vmvnq_u32 (__ARM_mve_coerce(__p0, uint32x4_t)));})\n+\n+#define vrev16q(p0) __arm_vrev16q(p0)\n+#define __arm_vrev16q(p0) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_int8x16_t]: __arm_vrev16q_s8 (__ARM_mve_coerce(__p0, int8x16_t)), \\\n+  int (*)[__ARM_mve_type_uint8x16_t]: __arm_vrev16q_u8 (__ARM_mve_coerce(__p0, uint8x16_t)));})\n+\n+#define vrev32q(p0) __arm_vrev32q(p0)\n+#define __arm_vrev32q(p0) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_int8x16_t]: __arm_vrev32q_s8 (__ARM_mve_coerce(__p0, int8x16_t)), \\\n+  int (*)[__ARM_mve_type_int16x8_t]: __arm_vrev32q_s16 (__ARM_mve_coerce(__p0, int16x8_t)), \\\n+  int (*)[__ARM_mve_type_uint8x16_t]: __arm_vrev32q_u8 (__ARM_mve_coerce(__p0, uint8x16_t)), \\\n+  int (*)[__ARM_mve_type_uint16x8_t]: __arm_vrev32q_u16 (__ARM_mve_coerce(__p0, uint16x8_t)));})\n+\n #define vrev64q(p0) __arm_vrev64q(p0)\n #define __arm_vrev64q(p0) ({ __typeof(p0) __p0 = (p0); \\\n   _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n@@ -796,6 +1522,20 @@ extern void *__ARM_undef;\n   int (*)[__ARM_mve_type_uint16x8_t]: __arm_vrev64q_u16 (__ARM_mve_coerce(__p0, uint16x8_t)), \\\n   int (*)[__ARM_mve_type_uint32x4_t]: __arm_vrev64q_u32 (__ARM_mve_coerce(__p0, uint32x4_t)));})\n \n+#define vqabsq(p0) __arm_vqabsq(p0)\n+#define __arm_vqabsq(p0) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_int8x16_t]: __arm_vqabsq_s8 (__ARM_mve_coerce(__p0, int8x16_t)), \\\n+  int (*)[__ARM_mve_type_int16x8_t]: __arm_vqabsq_s16 (__ARM_mve_coerce(__p0, int16x8_t)), \\\n+  int (*)[__ARM_mve_type_int32x4_t]: __arm_vqabsq_s32 (__ARM_mve_coerce(__p0, int32x4_t)));})\n+\n+#define vqnegq(p0) __arm_vqnegq(p0)\n+#define __arm_vqnegq(p0) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_int8x16_t]: __arm_vqnegq_s8 (__ARM_mve_coerce(__p0, int8x16_t)), \\\n+  int (*)[__ARM_mve_type_int16x8_t]: __arm_vqnegq_s16 (__ARM_mve_coerce(__p0, int16x8_t)), \\\n+  int (*)[__ARM_mve_type_int32x4_t]: __arm_vqnegq_s32 (__ARM_mve_coerce(__p0, int32x4_t)));})\n+\n #endif /* MVE Floating point.  */\n \n #ifdef __cplusplus"}, {"sha": "44807d6e8c4a4717c4f2fd2ef7015708ca3af4bc", "filename": "gcc/config/arm/arm_mve_builtins.def", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def?ref=6df4618cac91499f411673b33a516a5310cfbf79", "patch": "@@ -35,8 +35,39 @@ VAR1 (UNOP_NONE_NONE, vcvtbq_f32_f16, v4sf)\n VAR2 (UNOP_NONE_SNONE, vcvtq_to_f_s, v8hf, v4sf)\n VAR2 (UNOP_NONE_UNONE, vcvtq_to_f_u, v8hf, v4sf)\n VAR3 (UNOP_SNONE_SNONE, vrev64q_s, v16qi, v8hi, v4si)\n+VAR3 (UNOP_SNONE_SNONE, vqnegq_s, v16qi, v8hi, v4si)\n+VAR3 (UNOP_SNONE_SNONE, vqabsq_s, v16qi, v8hi, v4si)\n+VAR3 (UNOP_SNONE_SNONE, vnegq_s, v16qi, v8hi, v4si)\n+VAR3 (UNOP_SNONE_SNONE, vmvnq_s, v16qi, v8hi, v4si)\n+VAR3 (UNOP_SNONE_SNONE, vdupq_n_s, v16qi, v8hi, v4si)\n+VAR3 (UNOP_SNONE_SNONE, vclzq_s, v16qi, v8hi, v4si)\n+VAR3 (UNOP_SNONE_SNONE, vclsq_s, v16qi, v8hi, v4si)\n+VAR3 (UNOP_SNONE_SNONE, vaddvq_s, v16qi, v8hi, v4si)\n+VAR3 (UNOP_SNONE_SNONE, vabsq_s, v16qi, v8hi, v4si)\n+VAR2 (UNOP_SNONE_SNONE, vrev32q_s, v16qi, v8hi)\n+VAR2 (UNOP_SNONE_SNONE, vmovltq_s, v16qi, v8hi)\n+VAR2 (UNOP_SNONE_SNONE, vmovlbq_s, v16qi, v8hi)\n VAR2 (UNOP_SNONE_NONE, vcvtq_from_f_s, v8hi, v4si)\n+VAR2 (UNOP_SNONE_NONE, vcvtpq_s, v8hi, v4si)\n+VAR2 (UNOP_SNONE_NONE, vcvtnq_s, v8hi, v4si)\n+VAR2 (UNOP_SNONE_NONE, vcvtmq_s, v8hi, v4si)\n+VAR2 (UNOP_SNONE_NONE, vcvtaq_s, v8hi, v4si)\n VAR2 (UNOP_SNONE_IMM, vmvnq_n_s, v8hi, v4si)\n+VAR1 (UNOP_SNONE_SNONE, vrev16q_s, v16qi)\n+VAR1 (UNOP_SNONE_SNONE, vaddlvq_s, v4si)\n VAR3 (UNOP_UNONE_UNONE, vrev64q_u, v16qi, v8hi, v4si)\n+VAR3 (UNOP_UNONE_UNONE, vmvnq_u, v16qi, v8hi, v4si)\n+VAR3 (UNOP_UNONE_UNONE, vdupq_n_u, v16qi, v8hi, v4si)\n+VAR3 (UNOP_UNONE_UNONE, vclzq_u, v16qi, v8hi, v4si)\n+VAR3 (UNOP_UNONE_UNONE, vaddvq_u, v16qi, v8hi, v4si)\n+VAR2 (UNOP_UNONE_UNONE, vrev32q_u, v16qi, v8hi)\n+VAR2 (UNOP_UNONE_UNONE, vmovltq_u, v16qi, v8hi)\n+VAR2 (UNOP_UNONE_UNONE, vmovlbq_u, v16qi, v8hi)\n VAR2 (UNOP_UNONE_NONE, vcvtq_from_f_u, v8hi, v4si)\n+VAR2 (UNOP_UNONE_NONE, vcvtpq_u, v8hi, v4si)\n+VAR2 (UNOP_UNONE_NONE, vcvtnq_u, v8hi, v4si)\n+VAR2 (UNOP_UNONE_NONE, vcvtmq_u, v8hi, v4si)\n+VAR2 (UNOP_UNONE_NONE, vcvtaq_u, v8hi, v4si)\n VAR2 (UNOP_UNONE_IMM, vmvnq_n_u, v8hi, v4si)\n+VAR1 (UNOP_UNONE_UNONE, vrev16q_u, v16qi)\n+VAR1 (UNOP_UNONE_UNONE, vaddlvq_u, v4si)"}, {"sha": "492dc963419fbe9b53fcfb628030fd64ce57edd7", "filename": "gcc/config/arm/constraints.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Fconfig%2Farm%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Fconfig%2Farm%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fconstraints.md?ref=6df4618cac91499f411673b33a516a5310cfbf79", "patch": "@@ -49,6 +49,10 @@\n (define_register_constraint \"Uf\" \"TARGET_HAVE_MVE ? VFPCC_REG : NO_REGS\"\n   \"MVE FPCCR register\")\n \n+(define_register_constraint \"e\" \"TARGET_HAVE_MVE ? EVEN_REG : NO_REGS\"\n+  \"MVE EVEN registers @code{r0}, @code{r2}, @code{r4}, @code{r6}, @code{r8},\n+   @code{r10}, @code{r12}, @code{r14}\")\n+\n (define_register_constraint \"t\" \"TARGET_32BIT ? VFP_LO_REGS : NO_REGS\"\n  \"The VFP registers @code{s0}-@code{s31}.\")\n "}, {"sha": "dafdc1cf16e8ef51e39e8df1670fe29caa86d8e4", "filename": "gcc/config/arm/mve.md", "status": "modified", "additions": 285, "deletions": 6, "changes": 291, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Fconfig%2Farm%2Fmve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Fconfig%2Farm%2Fmve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fmve.md?ref=6df4618cac91499f411673b33a516a5310cfbf79", "patch": "@@ -22,26 +22,55 @@\n (define_mode_iterator MVE_types [V16QI V8HI V4SI V2DI TI V8HF V4SF V2DF])\n (define_mode_iterator MVE_VLD_ST [V16QI V8HI V4SI V8HF V4SF])\n (define_mode_iterator MVE_0 [V8HF V4SF])\n+(define_mode_iterator MVE_3 [V16QI V8HI])\n (define_mode_iterator MVE_2 [V16QI V8HI V4SI])\n (define_mode_iterator MVE_5 [V8HI V4SI])\n \n (define_c_enum \"unspec\" [VST4Q VRNDXQ_F VRNDQ_F VRNDPQ_F VRNDNQ_F VRNDMQ_F\n \t\t\t VRNDAQ_F VREV64Q_F VNEGQ_F VDUPQ_N_F VABSQ_F VREV32Q_F\n-\t\t\t VCVTTQ_F32_F16 VCVTBQ_F32_F16 VCVTQ_TO_F_S\n-\t\t\t VCVTQ_TO_F_U VMVNQ_N_S VMVNQ_N_U VREV64Q_S VREV64Q_U\n-\t\t\t VCVTQ_FROM_F_S VCVTQ_FROM_F_U])\n+\t\t\t VCVTTQ_F32_F16 VCVTBQ_F32_F16 VCVTQ_TO_F_S VQNEGQ_S\n+\t\t\t VCVTQ_TO_F_U VREV16Q_S VREV16Q_U VADDLVQ_S VMVNQ_N_S\n+\t\t\t VMVNQ_N_U VCVTAQ_S VCVTAQ_U VREV64Q_S VREV64Q_U\n+\t\t\t VQABSQ_S VNEGQ_S VMVNQ_S VMVNQ_U VDUPQ_N_U VDUPQ_N_S\n+\t\t\t VCLZQ_U VCLZQ_S VCLSQ_S VADDVQ_S VADDVQ_U VABSQ_S\n+\t\t\t VREV32Q_U VREV32Q_S VMOVLTQ_U VMOVLTQ_S VMOVLBQ_S\n+\t\t\t VMOVLBQ_U VCVTQ_FROM_F_S VCVTQ_FROM_F_U VCVTPQ_S\n+\t\t\t VCVTPQ_U VCVTNQ_S VCVTNQ_U VCVTMQ_S VCVTMQ_U\n+\t\t\t VADDLVQ_U])\n \n (define_mode_attr MVE_CNVT [(V8HI \"V8HF\") (V4SI \"V4SF\")\n \t\t\t    (V8HF \"V8HI\") (V4SF \"V4SI\")])\n \n-(define_int_attr supf [(VCVTQ_TO_F_S \"s\") (VCVTQ_TO_F_U \"u\") (VMVNQ_N_S \"s\")\n-\t\t       (VMVNQ_N_U \"u\") (VREV64Q_U \"u\") (VREV64Q_S \"s\")\n-\t\t       (VCVTQ_FROM_F_S \"s\") (VCVTQ_FROM_F_U \"u\")])\n+(define_int_attr supf [(VCVTQ_TO_F_S \"s\") (VCVTQ_TO_F_U \"u\") (VREV16Q_S \"s\")\n+\t\t       (VREV16Q_U \"u\") (VMVNQ_N_S \"s\") (VMVNQ_N_U \"u\")\n+\t\t       (VCVTAQ_U \"u\") (VCVTAQ_S \"s\") (VREV64Q_S \"s\")\n+\t\t       (VREV64Q_U \"u\") (VMVNQ_S \"s\") (VMVNQ_U \"u\")\n+\t\t       (VDUPQ_N_U \"u\") (VDUPQ_N_S\"s\") (VADDVQ_S \"s\")\n+\t\t       (VADDVQ_U \"u\") (VADDVQ_S \"s\") (VADDVQ_U \"u\")\n+\t\t       (VMOVLTQ_U \"u\") (VMOVLTQ_S \"s\") (VMOVLBQ_S \"s\")\n+\t\t       (VMOVLBQ_U \"u\") (VCVTQ_FROM_F_S \"s\") (VCVTQ_FROM_F_U \"u\")\n+\t\t       (VCVTPQ_S \"s\") (VCVTPQ_U \"u\") (VCVTNQ_S \"s\")\n+\t\t       (VCVTNQ_U \"u\") (VCVTMQ_S \"s\") (VCVTMQ_U \"u\")\n+\t\t       (VCLZQ_U \"u\") (VCLZQ_S \"s\") (VREV32Q_U \"u\")\n+\t\t       (VREV32Q_S \"s\") (VADDLVQ_U \"u\") (VADDLVQ_S \"s\")])\n \n (define_int_iterator VCVTQ_TO_F [VCVTQ_TO_F_S VCVTQ_TO_F_U])\n (define_int_iterator VMVNQ_N [VMVNQ_N_U VMVNQ_N_S])\n (define_int_iterator VREV64Q [VREV64Q_S VREV64Q_U])\n (define_int_iterator VCVTQ_FROM_F [VCVTQ_FROM_F_S VCVTQ_FROM_F_U])\n+(define_int_iterator VREV16Q [VREV16Q_U VREV16Q_S])\n+(define_int_iterator VCVTAQ [VCVTAQ_U VCVTAQ_S])\n+(define_int_iterator VMVNQ [VMVNQ_U VMVNQ_S])\n+(define_int_iterator VDUPQ_N [VDUPQ_N_U VDUPQ_N_S])\n+(define_int_iterator VCLZQ [VCLZQ_U VCLZQ_S])\n+(define_int_iterator VADDVQ [VADDVQ_U VADDVQ_S])\n+(define_int_iterator VREV32Q [VREV32Q_U VREV32Q_S])\n+(define_int_iterator VMOVLBQ [VMOVLBQ_S VMOVLBQ_U])\n+(define_int_iterator VMOVLTQ [VMOVLTQ_U VMOVLTQ_S])\n+(define_int_iterator VCVTPQ [VCVTPQ_S VCVTPQ_U])\n+(define_int_iterator VCVTNQ [VCVTNQ_S VCVTNQ_U])\n+(define_int_iterator VCVTMQ [VCVTMQ_S VCVTMQ_U])\n+(define_int_iterator VADDLVQ [VADDLVQ_U VADDLVQ_S])\n \n (define_insn \"*mve_mov<mode>\"\n   [(set (match_operand:MVE_types 0 \"nonimmediate_operand\" \"=w,w,r,w,w,r,w,Us\")\n@@ -362,6 +391,228 @@\n   \"vcvt.<supf>%#<V_sz_elem>.f%#<V_sz_elem>       %q0, %q1\"\n   [(set_attr \"type\" \"mve_move\")\n ])\n+;; [vqnegq_s])\n+;;\n+(define_insn \"mve_vqnegq_s<mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")]\n+\t VQNEGQ_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vqneg.s%#<V_sz_elem> %q0, %q1\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vqabsq_s])\n+;;\n+(define_insn \"mve_vqabsq_s<mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")]\n+\t VQABSQ_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vqabs.s%#<V_sz_elem> %q0, %q1\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vnegq_s])\n+;;\n+(define_insn \"mve_vnegq_s<mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")]\n+\t VNEGQ_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vneg.s%#<V_sz_elem>  %q0, %q1\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vmvnq_u, vmvnq_s])\n+;;\n+(define_insn \"mve_vmvnq_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")]\n+\t VMVNQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vmvn %q0, %q1\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vdupq_n_u, vdupq_n_s])\n+;;\n+(define_insn \"mve_vdupq_n_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:<V_elem> 1 \"s_register_operand\" \"r\")]\n+\t VDUPQ_N))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vdup.%#<V_sz_elem>   %q0, %1\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vclzq_u, vclzq_s])\n+;;\n+(define_insn \"mve_vclzq_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")]\n+\t VCLZQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vclz.i%#<V_sz_elem>  %q0, %q1\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vclsq_s])\n+;;\n+(define_insn \"mve_vclsq_s<mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")]\n+\t VCLSQ_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vcls.s%#<V_sz_elem>  %q0, %q1\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vaddvq_s, vaddvq_u])\n+;;\n+(define_insn \"mve_vaddvq_<supf><mode>\"\n+  [\n+   (set (match_operand:SI 0 \"s_register_operand\" \"=e\")\n+\t(unspec:SI [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")]\n+\t VADDVQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vaddv.<supf>%#<V_sz_elem>\\t%0, %q1\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vabsq_s])\n+;;\n+(define_insn \"mve_vabsq_s<mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")]\n+\t VABSQ_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vabs.s%#<V_sz_elem>\\t%q0, %q1\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vrev32q_u, vrev32q_s])\n+;;\n+(define_insn \"mve_vrev32q_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_3 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_3 [(match_operand:MVE_3 1 \"s_register_operand\" \"w\")]\n+\t VREV32Q))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vrev32.%#<V_sz_elem>\\t%q0, %q1\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vmovltq_u, vmovltq_s])\n+;;\n+(define_insn \"mve_vmovltq_<supf><mode>\"\n+  [\n+   (set (match_operand:<V_double_width> 0 \"s_register_operand\" \"=w\")\n+\t(unspec:<V_double_width> [(match_operand:MVE_3 1 \"s_register_operand\" \"w\")]\n+\t VMOVLTQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vmovlt.<supf>%#<V_sz_elem>   %q0, %q1\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vmovlbq_s, vmovlbq_u])\n+;;\n+(define_insn \"mve_vmovlbq_<supf><mode>\"\n+  [\n+   (set (match_operand:<V_double_width> 0 \"s_register_operand\" \"=w\")\n+\t(unspec:<V_double_width> [(match_operand:MVE_3 1 \"s_register_operand\" \"w\")]\n+\t VMOVLBQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vmovlb.<supf>%#<V_sz_elem>   %q0, %q1\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vcvtpq_s, vcvtpq_u])\n+;;\n+(define_insn \"mve_vcvtpq_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_5 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_5 [(match_operand:<MVE_CNVT> 1 \"s_register_operand\" \"w\")]\n+\t VCVTPQ))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vcvtp.<supf>%#<V_sz_elem>.f%#<V_sz_elem>      %q0, %q1\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vcvtnq_s, vcvtnq_u])\n+;;\n+(define_insn \"mve_vcvtnq_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_5 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_5 [(match_operand:<MVE_CNVT> 1 \"s_register_operand\" \"w\")]\n+\t VCVTNQ))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vcvtn.<supf>%#<V_sz_elem>.f%#<V_sz_elem>      %q0, %q1\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vcvtmq_s, vcvtmq_u])\n+;;\n+(define_insn \"mve_vcvtmq_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_5 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_5 [(match_operand:<MVE_CNVT> 1 \"s_register_operand\" \"w\")]\n+\t VCVTMQ))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vcvtm.<supf>%#<V_sz_elem>.f%#<V_sz_elem>      %q0, %q1\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vcvtaq_u, vcvtaq_s])\n+;;\n+(define_insn \"mve_vcvtaq_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_5 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_5 [(match_operand:<MVE_CNVT> 1 \"s_register_operand\" \"w\")]\n+\t VCVTAQ))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vcvta.<supf>%#<V_sz_elem>.f%#<V_sz_elem>      %q0, %q1\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n \n ;;\n ;; [vmvnq_n_u, vmvnq_n_s])\n@@ -376,3 +627,31 @@\n   \"vmvn.i%#<V_sz_elem>  %q0, %1\"\n   [(set_attr \"type\" \"mve_move\")\n ])\n+\n+;;\n+;; [vrev16q_u, vrev16q_s])\n+;;\n+(define_insn \"mve_vrev16q_<supf>v16qi\"\n+  [\n+   (set (match_operand:V16QI 0 \"s_register_operand\" \"=w\")\n+\t(unspec:V16QI [(match_operand:V16QI 1 \"s_register_operand\" \"w\")]\n+\t VREV16Q))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vrev16.8 %q0, %q1\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vaddlvq_s vaddlvq_u])\n+;;\n+(define_insn \"mve_vaddlvq_<supf>v4si\"\n+  [\n+   (set (match_operand:DI 0 \"s_register_operand\" \"=r\")\n+\t(unspec:DI [(match_operand:V4SI 1 \"s_register_operand\" \"w\")]\n+\t VADDLVQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vaddlv.<supf>32 %Q0, %R0, %q1\"\n+  [(set_attr \"type\" \"mve_move\")\n+])"}, {"sha": "b360cff2484382156a33e560fbf7151f74f90a15", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6df4618cac91499f411673b33a516a5310cfbf79", "patch": "@@ -1,3 +1,78 @@\n+2020-03-17  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+            Mihail Ionescu  <mihail.ionescu@arm.com>\n+            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\t* gcc.target/arm/mve/intrinsics/vabsq_s16.c: New test.\n+\t* gcc.target/arm/mve/intrinsics/vabsq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vabsq_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vaddlvq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vaddlvq_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vaddvq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vaddvq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vaddvq_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vaddvq_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vaddvq_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vaddvq_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vclsq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vclsq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vclsq_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vclzq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vclzq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vclzq_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vclzq_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vclzq_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vclzq_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtaq_s16_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtaq_s32_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtaq_u16_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtaq_u32_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtmq_s16_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtmq_s32_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtmq_u16_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtmq_u32_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtnq_s16_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtnq_s32_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtnq_u16_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtpq_s16_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtpq_s32_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtpq_u16_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtpq_u32_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vdupq_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vdupq_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vdupq_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vdupq_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vdupq_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vdupq_n_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmovlbq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmovlbq_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmovlbq_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmovlbq_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmovltq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmovltq_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmovltq_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmovltq_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmvnq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmvnq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmvnq_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmvnq_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmvnq_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmvnq_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vnegq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vnegq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vnegq_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqabsq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqabsq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqabsq_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqnegq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqnegq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqnegq_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrev16q_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrev16q_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrev32q_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrev32q_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrev32q_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrev32q_u8.c: Likewise.\n+\n 2020-03-17  Mihail Ionescu  <mihail.ionescu@arm.com>\n \n \t* gcc.target/arm/multilib.exp: Add new v8.1-M entry."}, {"sha": "e19f2a3c6e5d494486d05846694fc5d2bad34793", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabsq_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabsq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabsq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabsq_s16.c?ref=6df4618cac91499f411673b33a516a5310cfbf79", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a)\n+{\n+  return vabsq_s16 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vabs.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a)\n+{\n+  return vabsq (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vabs.s16\"  }  } */"}, {"sha": "b639df40765b95a151ad83c17aef79c73a8c69ac", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabsq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabsq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabsq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabsq_s32.c?ref=6df4618cac91499f411673b33a516a5310cfbf79", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a)\n+{\n+  return vabsq_s32 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vabs.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a)\n+{\n+  return vabsq (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vabs.s32\"  }  } */"}, {"sha": "32a7a8688dd0ac539c7fa6fe5320c7c71270d413", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabsq_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabsq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabsq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabsq_s8.c?ref=6df4618cac91499f411673b33a516a5310cfbf79", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a)\n+{\n+  return vabsq_s8 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vabs.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a)\n+{\n+  return vabsq (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vabs.s8\"  }  } */"}, {"sha": "491034b600f12f80e942be5eb3a368c3c0487adc", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddlvq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddlvq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddlvq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddlvq_s32.c?ref=6df4618cac91499f411673b33a516a5310cfbf79", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int64_t\n+foo (int32x4_t a)\n+{\n+  return vaddlvq_s32 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vaddlv.s32\"  }  } */\n+\n+int64_t\n+foo1 (int32x4_t a)\n+{\n+  return vaddlvq_s32 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vaddlv.s32\"  }  } */"}, {"sha": "40d064e672809711e62762fd1d9c6d424287ad57", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddlvq_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddlvq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddlvq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddlvq_u32.c?ref=6df4618cac91499f411673b33a516a5310cfbf79", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint64_t\n+foo (uint32x4_t a)\n+{\n+    return vaddlvq_u32 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vaddlv.u32\"  }  } */\n+\n+uint64_t\n+foo1 (uint32x4_t a)\n+{\n+    return vaddlvq (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vaddlv.u32\"  }  } */"}, {"sha": "3696e9705142f8bed5c546f4cc8d5f26e98e2bb4", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddvq_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvq_s16.c?ref=6df4618cac91499f411673b33a516a5310cfbf79", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32_t\n+foo (int16x8_t a)\n+{\n+  return vaddvq_s16 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vaddv.s16\"  }  } */\n+\n+int32_t\n+foo1 (int16x8_t a)\n+{\n+  return vaddvq_s16 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vaddv.s16\"  }  } */"}, {"sha": "b41ec7e9c66ed2480dfaf39472ae800f13a14bae", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddvq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvq_s32.c?ref=6df4618cac91499f411673b33a516a5310cfbf79", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32_t\n+foo (int32x4_t a)\n+{\n+  return vaddvq_s32 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vaddv.s32\"  }  } */\n+\n+int32_t\n+foo1 (int32x4_t a)\n+{\n+  return vaddvq_s32 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vaddv.s32\"  }  } */"}, {"sha": "4eeea5318e2f770ba209d154d5a0f2deae22dc2c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddvq_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvq_s8.c?ref=6df4618cac91499f411673b33a516a5310cfbf79", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32_t\n+foo (int8x16_t a)\n+{\n+  return vaddvq_s8 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vaddv.s8\"  }  } */\n+\n+int32_t\n+foo1 (int8x16_t a)\n+{\n+  return vaddvq (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vaddv.s8\"  }  } */"}, {"sha": "157e640d25fc7796497a12be997104a5aca37153", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddvq_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvq_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvq_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvq_u16.c?ref=6df4618cac91499f411673b33a516a5310cfbf79", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32_t\n+foo (uint16x8_t a)\n+{\n+    return vaddvq_u16 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vaddv.u16\"  }  } */\n+\n+uint32_t\n+foo1 (uint16x8_t a)\n+{\n+    return vaddvq (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vaddv.u16\"  }  } */"}, {"sha": "befca64f813e4282d245d1fd1c8238b3dfead5fe", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddvq_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvq_u32.c?ref=6df4618cac91499f411673b33a516a5310cfbf79", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32_t\n+foo (uint32x4_t a)\n+{\n+    return vaddvq_u32 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vaddv.u32\"  }  } */\n+\n+uint32_t\n+foo1 (uint32x4_t a)\n+{\n+    return vaddvq (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vaddv.u32\"  }  } */"}, {"sha": "e6837f9f2937520ecb13c3e219140f372f2c5774", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddvq_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvq_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvq_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvq_u8.c?ref=6df4618cac91499f411673b33a516a5310cfbf79", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32_t\n+foo (uint8x16_t a)\n+{\n+    return vaddvq_u8 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vaddv.u8\"  }  } */\n+\n+uint32_t\n+foo1 (uint8x16_t a)\n+{\n+    return vaddvq (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vaddv.u8\"  }  } */"}, {"sha": "ab3981b8f0c9524d8225655245d2a49851521d08", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vclsq_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclsq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclsq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclsq_s16.c?ref=6df4618cac91499f411673b33a516a5310cfbf79", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a)\n+{\n+  return vclsq_s16 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vcls.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a)\n+{\n+  return vclsq (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vcls.s16\"  }  } */"}, {"sha": "c02da23da04bda32c4afd3a70d2f76713e0846e8", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vclsq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclsq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclsq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclsq_s32.c?ref=6df4618cac91499f411673b33a516a5310cfbf79", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a)\n+{\n+  return vclsq_s32 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vcls.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a)\n+{\n+  return vclsq (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vcls.s32\"  }  } */"}, {"sha": "9f8d4523fdeb0bb4452a4ba842699d28d2d5d6f8", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vclsq_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclsq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclsq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclsq_s8.c?ref=6df4618cac91499f411673b33a516a5310cfbf79", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a)\n+{\n+  return vclsq_s8 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vcls.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a)\n+{\n+  return vclsq (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vcls.s8\"  }  } */"}, {"sha": "4c9f64fcbf9c118af7aae56cdbcc5726836440b9", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vclzq_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_s16.c?ref=6df4618cac91499f411673b33a516a5310cfbf79", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a)\n+{\n+  return vclzq_s16 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vclz.i16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a)\n+{\n+  return vclzq (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vclz.i16\"  }  } */"}, {"sha": "9281b94175b2b1ade071607c2bb89a6d0ad484ef", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vclzq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_s32.c?ref=6df4618cac91499f411673b33a516a5310cfbf79", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a)\n+{\n+  return vclzq_s32 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vclz.i32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a)\n+{\n+  return vclzq (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vclz.i32\"  }  } */"}, {"sha": "4aa7d549b361aa94ecc032389ddedb1d2151d36a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vclzq_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_s8.c?ref=6df4618cac91499f411673b33a516a5310cfbf79", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a)\n+{\n+  return vclzq_s8 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vclz.i8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a)\n+{\n+  return vclzq (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vclz.i8\"  }  } */"}, {"sha": "e842b75e6b68b02df70e5f64f9ce839825992d4a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vclzq_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_u16.c?ref=6df4618cac91499f411673b33a516a5310cfbf79", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a)\n+{\n+    return vclzq_u16 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vclz.i16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a)\n+{\n+    return vclzq (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vclz.i16\"  }  } */"}, {"sha": "917818445d0109c0be0cf1bcaae1e477a61b5c1d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vclzq_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_u32.c?ref=6df4618cac91499f411673b33a516a5310cfbf79", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t a)\n+{\n+    return vclzq_u32 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vclz.i32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t a)\n+{\n+    return vclzq (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vclz.i32\"  }  } */"}, {"sha": "5726728ff6a93b02f0d1fdd33d103e1674457da6", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vclzq_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_u8.c?ref=6df4618cac91499f411673b33a516a5310cfbf79", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a)\n+{\n+    return vclzq_u8 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vclz.i8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a)\n+{\n+    return vclzq (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vclz.i8\"  }  } */"}, {"sha": "9fa6037e533ebc21e6d7b46d121a0284989261a7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtaq_s16_f16.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtaq_s16_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtaq_s16_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtaq_s16_f16.c?ref=6df4618cac91499f411673b33a516a5310cfbf79", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (float16x8_t a)\n+{\n+  return vcvtaq_s16_f16 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vcvta.s16.f16\"  }  } */"}, {"sha": "bdf00b9ee6b08ee3c3b6dfbd6ed8b9eda9ef71da", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtaq_s32_f32.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtaq_s32_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtaq_s32_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtaq_s32_f32.c?ref=6df4618cac91499f411673b33a516a5310cfbf79", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (float32x4_t a)\n+{\n+  return vcvtaq_s32_f32 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vcvta.s32.f32\"  }  } */"}, {"sha": "ab27154c01366631e726c31c7159f2e90108574a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtaq_u16_f16.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtaq_u16_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtaq_u16_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtaq_u16_f16.c?ref=6df4618cac91499f411673b33a516a5310cfbf79", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (float16x8_t a)\n+{\n+    return vcvtaq_u16_f16 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vcvta.u16.f16\"  }  } */"}, {"sha": "daf0ff0dd2750c8c3ab38eb2cd06619a235e4c04", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtaq_u32_f32.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtaq_u32_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtaq_u32_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtaq_u32_f32.c?ref=6df4618cac91499f411673b33a516a5310cfbf79", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (float32x4_t a)\n+{\n+    return vcvtaq_u32_f32 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vcvta.u32.f32\"  }  } */"}, {"sha": "75134ddafb0ed6c638403b7d85a7367852e7634b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtmq_s16_f16.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtmq_s16_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtmq_s16_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtmq_s16_f16.c?ref=6df4618cac91499f411673b33a516a5310cfbf79", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (float16x8_t a)\n+{\n+  return vcvtmq_s16_f16 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vcvtm.s16.f16\"  }  } */"}, {"sha": "b4066c966a9ecd3084d262bc4f8636001dbf0155", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtmq_s32_f32.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtmq_s32_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtmq_s32_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtmq_s32_f32.c?ref=6df4618cac91499f411673b33a516a5310cfbf79", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (float32x4_t a)\n+{\n+  return vcvtmq_s32_f32 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vcvtm.s32.f32\"  }  } */"}, {"sha": "a5842bce09881522bc6cafbb34109180c4275c8b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtmq_u16_f16.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtmq_u16_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtmq_u16_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtmq_u16_f16.c?ref=6df4618cac91499f411673b33a516a5310cfbf79", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (float16x8_t a)\n+{\n+    return vcvtmq_u16_f16 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vcvtm.u16.f16\"  }  } */"}, {"sha": "03018e2fdf299e2d96b22a2aba9a4ce032dfcd6c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtmq_u32_f32.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtmq_u32_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtmq_u32_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtmq_u32_f32.c?ref=6df4618cac91499f411673b33a516a5310cfbf79", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (float32x4_t a)\n+{\n+    return vcvtmq_u32_f32 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vcvtm.u32.f32\"  }  } */"}, {"sha": "41b31571397d6c4ee4029eb7b17c3be286921961", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtnq_s16_f16.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtnq_s16_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtnq_s16_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtnq_s16_f16.c?ref=6df4618cac91499f411673b33a516a5310cfbf79", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (float16x8_t a)\n+{\n+  return vcvtnq_s16_f16 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vcvtn.s16.f16\"  }  } */"}, {"sha": "db921d9c9beeac5cf55b2fbea5d00c6449150a13", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtnq_s32_f32.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtnq_s32_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtnq_s32_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtnq_s32_f32.c?ref=6df4618cac91499f411673b33a516a5310cfbf79", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (float32x4_t a)\n+{\n+  return vcvtnq_s32_f32 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vcvtn.s32.f32\"  }  } */"}, {"sha": "ac446cb238b328f5cd97b6d3eebaa5b1077784a8", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtnq_u16_f16.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtnq_u16_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtnq_u16_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtnq_u16_f16.c?ref=6df4618cac91499f411673b33a516a5310cfbf79", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (float16x8_t a)\n+{\n+    return vcvtnq_u16_f16 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vcvtn.u16.f16\"  }  } */"}, {"sha": "6c2c1fe152ea706bff400d30e97fbdddad2014f6", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtpq_s16_f16.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtpq_s16_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtpq_s16_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtpq_s16_f16.c?ref=6df4618cac91499f411673b33a516a5310cfbf79", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (float16x8_t a)\n+{\n+  return vcvtpq_s16_f16 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vcvtp.s16.f16\"  }  } */"}, {"sha": "0b554b351337f993fa6e065ce2872c251d4e992f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtpq_s32_f32.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtpq_s32_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtpq_s32_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtpq_s32_f32.c?ref=6df4618cac91499f411673b33a516a5310cfbf79", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (float32x4_t a)\n+{\n+  return vcvtpq_s32_f32 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vcvtp.s32.f32\"  }  } */"}, {"sha": "27dcb7d1a405a4975cafc06e07ab8067ad72ce04", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtpq_u16_f16.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtpq_u16_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtpq_u16_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtpq_u16_f16.c?ref=6df4618cac91499f411673b33a516a5310cfbf79", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (float16x8_t a)\n+{\n+    return vcvtpq_u16_f16 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vcvtp.u16.f16\"  }  } */"}, {"sha": "b3a75c37a5cfe6bda58e48163ce66c277a91670f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtpq_u32_f32.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtpq_u32_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtpq_u32_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtpq_u32_f32.c?ref=6df4618cac91499f411673b33a516a5310cfbf79", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (float32x4_t a)\n+{\n+    return vcvtpq_u32_f32 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vcvtp.u32.f32\"  }  } */"}, {"sha": "8e5a3e6f2a318200914f305a43b3804b3bb713a0", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vdupq_n_s16.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdupq_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdupq_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdupq_n_s16.c?ref=6df4618cac91499f411673b33a516a5310cfbf79", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16_t a)\n+{\n+  return vdupq_n_s16 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vdup.16\"  }  } */"}, {"sha": "71da1428a7a98fc3b0b6a528a4e0d144f2887e7f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vdupq_n_s32.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdupq_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdupq_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdupq_n_s32.c?ref=6df4618cac91499f411673b33a516a5310cfbf79", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32_t a)\n+{\n+  return vdupq_n_s32 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vdup.32\"  }  } */"}, {"sha": "d80138d500c92f4737d4cb64bf46c138271d8408", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vdupq_n_s8.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdupq_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdupq_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdupq_n_s8.c?ref=6df4618cac91499f411673b33a516a5310cfbf79", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8_t a)\n+{\n+  return vdupq_n_s8 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vdup.8\"  }  } */"}, {"sha": "5fe7f1502a27b9c074a5ef56dcbaa6fcbf6236ba", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vdupq_n_u16.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdupq_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdupq_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdupq_n_u16.c?ref=6df4618cac91499f411673b33a516a5310cfbf79", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16_t a)\n+{\n+    return vdupq_n_u16 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vdup.16\"  }  } */"}, {"sha": "65dab51aab70a520719af75f1c1a60b3e715c9a6", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vdupq_n_u32.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdupq_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdupq_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdupq_n_u32.c?ref=6df4618cac91499f411673b33a516a5310cfbf79", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32_t a)\n+{\n+    return vdupq_n_u32 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vdup.32\"  }  } */"}, {"sha": "72e200999f9a0b56fd90458e0766be79cd38f491", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vdupq_n_u8.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdupq_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdupq_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdupq_n_u8.c?ref=6df4618cac91499f411673b33a516a5310cfbf79", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8_t a)\n+{\n+    return vdupq_n_u8 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vdup.8\"  }  } */"}, {"sha": "8c1a444b60872c06d925462c41f8f24b1b55c262", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmovlbq_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovlbq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovlbq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovlbq_s16.c?ref=6df4618cac91499f411673b33a516a5310cfbf79", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int16x8_t a)\n+{\n+  return vmovlbq_s16 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vmovlb.s16\"  }  } */\n+\n+int32x4_t\n+foo1 (int16x8_t a)\n+{\n+  return vmovlbq (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vmovlb.s16\"  }  } */"}, {"sha": "9ca36f1d492ebfb1a06603871996fcb1af69f533", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmovlbq_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovlbq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovlbq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovlbq_s8.c?ref=6df4618cac91499f411673b33a516a5310cfbf79", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int8x16_t a)\n+{\n+  return vmovlbq_s8 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vmovlb.s8\"  }  } */\n+\n+int16x8_t\n+foo1 (int8x16_t a)\n+{\n+  return vmovlbq (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vmovlb.s8\"  }  } */"}, {"sha": "9b537bf20f38cd71d091b74fd3853ce9b8362d4b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmovlbq_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovlbq_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovlbq_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovlbq_u16.c?ref=6df4618cac91499f411673b33a516a5310cfbf79", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint16x8_t a)\n+{\n+    return vmovlbq_u16 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vmovlb.u16\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint16x8_t a)\n+{\n+    return vmovlbq (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vmovlb.u16\"  }  } */"}, {"sha": "ef9a6c7a1d5fdb6f35f0625d92ae86704c8a5d57", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmovlbq_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovlbq_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovlbq_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovlbq_u8.c?ref=6df4618cac91499f411673b33a516a5310cfbf79", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint8x16_t a)\n+{\n+    return vmovlbq_u8 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vmovlb.u8\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint8x16_t a)\n+{\n+    return vmovlbq (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vmovlb.u8\"  }  } */"}, {"sha": "3bd5d37fd08704361a6d8f70e40c623493ae709e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmovltq_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovltq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovltq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovltq_s16.c?ref=6df4618cac91499f411673b33a516a5310cfbf79", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int16x8_t a)\n+{\n+  return vmovltq_s16 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vmovlt.s16\"  }  } */\n+\n+int32x4_t\n+foo1 (int16x8_t a)\n+{\n+  return vmovltq (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vmovlt.s16\"  }  } */"}, {"sha": "2bd4b7e6ec8eb063bcce87cefee36c5328bff3ad", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmovltq_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovltq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovltq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovltq_s8.c?ref=6df4618cac91499f411673b33a516a5310cfbf79", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int8x16_t a)\n+{\n+  return vmovltq_s8 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vmovlt.s8\"  }  } */\n+\n+int16x8_t\n+foo1 (int8x16_t a)\n+{\n+  return vmovltq (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vmovlt.s8\"  }  } */"}, {"sha": "65eb459506ada19ea1ad08e0fe91045745201301", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmovltq_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovltq_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovltq_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovltq_u16.c?ref=6df4618cac91499f411673b33a516a5310cfbf79", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint16x8_t a)\n+{\n+    return vmovltq_u16 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vmovlt.u16\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint16x8_t a)\n+{\n+    return vmovltq (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vmovlt.u16\"  }  } */"}, {"sha": "b4b9f614b5b98fcbb94f1b2bca6eb236d90eb80d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmovltq_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovltq_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovltq_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovltq_u8.c?ref=6df4618cac91499f411673b33a516a5310cfbf79", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint8x16_t a)\n+{\n+    return vmovltq_u8 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vmovlt.u8\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint8x16_t a)\n+{\n+    return vmovltq (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vmovlt.u8\"  }  } */"}, {"sha": "faa12585b94bd4c14a7f6416e594cb4ae5f61e0a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmvnq_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_s16.c?ref=6df4618cac91499f411673b33a516a5310cfbf79", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a)\n+{\n+  return vmvnq_s16 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vmvn\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a)\n+{\n+  return vmvnq (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vmvn\"  }  } */"}, {"sha": "739e91972ae2af8c39f2da374345586781f7033b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmvnq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_s32.c?ref=6df4618cac91499f411673b33a516a5310cfbf79", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a)\n+{\n+  return vmvnq_s32 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vmvn\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a)\n+{\n+  return vmvnq (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vmvn\"  }  } */"}, {"sha": "51f0fbc8e93c42d9de9f7ebe3c3a292b168b1b9a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmvnq_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_s8.c?ref=6df4618cac91499f411673b33a516a5310cfbf79", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a)\n+{\n+  return vmvnq_s8 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vmvn\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a)\n+{\n+  return vmvnq (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vmvn\"  }  } */"}, {"sha": "629d5dfe1e9907d6e5d19392289e11955d8bb013", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmvnq_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_u16.c?ref=6df4618cac91499f411673b33a516a5310cfbf79", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a)\n+{\n+    return vmvnq_u16 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vmvn\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a)\n+{\n+    return vmvnq (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vmvn\"  }  } */"}, {"sha": "25573b5a83e939e4f761388c79830d383aa54d28", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmvnq_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_u32.c?ref=6df4618cac91499f411673b33a516a5310cfbf79", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t a)\n+{\n+    return vmvnq_u32 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vmvn\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t a)\n+{\n+    return vmvnq (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vmvn\"  }  } */"}, {"sha": "5747d0417d8fc551fa4c735a228cbf6f211c2092", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmvnq_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_u8.c?ref=6df4618cac91499f411673b33a516a5310cfbf79", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a)\n+{\n+    return vmvnq_u8 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vmvn\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a)\n+{\n+    return vmvnq (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vmvn\"  }  } */"}, {"sha": "75a8deda263f8e86c652ee9f90248589294e96d5", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vnegq_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_s16.c?ref=6df4618cac91499f411673b33a516a5310cfbf79", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a)\n+{\n+  return vnegq_s16 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vneg.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a)\n+{\n+  return vnegq (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vneg.s16\"  }  } */"}, {"sha": "33c82c7413b95a24a3c0d1650f5d307b805d6f5a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vnegq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_s32.c?ref=6df4618cac91499f411673b33a516a5310cfbf79", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a)\n+{\n+  return vnegq_s32 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vneg.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a)\n+{\n+  return vnegq (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vneg.s32\"  }  } */"}, {"sha": "21655a83239c6523ff99a28f2a63f3812972a76c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vnegq_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_s8.c?ref=6df4618cac91499f411673b33a516a5310cfbf79", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a)\n+{\n+  return vnegq_s8 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vneg.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a)\n+{\n+  return vnegq (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vneg.s8\"  }  } */"}, {"sha": "2022eadeabc84ce081298a106d815e3089a0f0e5", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqabsq_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqabsq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqabsq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqabsq_s16.c?ref=6df4618cac91499f411673b33a516a5310cfbf79", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a)\n+{\n+  return vqabsq_s16 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vqabs.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a)\n+{\n+  return vqabsq (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vqabs.s16\"  }  } */"}, {"sha": "a96bb0bd52e04a098b53082a8d9060c059255c6e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqabsq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqabsq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqabsq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqabsq_s32.c?ref=6df4618cac91499f411673b33a516a5310cfbf79", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a)\n+{\n+  return vqabsq_s32 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vqabs.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a)\n+{\n+  return vqabsq (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vqabs.s32\"  }  } */"}, {"sha": "7c2c4e6e13e681d4d84072cc510771abfe2b51b3", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqabsq_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqabsq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqabsq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqabsq_s8.c?ref=6df4618cac91499f411673b33a516a5310cfbf79", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a)\n+{\n+  return vqabsq_s8 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vqabs.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a)\n+{\n+  return vqabsq (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vqabs.s8\"  }  } */"}, {"sha": "f0a8529f3dafabea7259c798d663641d6356910f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqnegq_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqnegq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqnegq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqnegq_s16.c?ref=6df4618cac91499f411673b33a516a5310cfbf79", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a)\n+{\n+  return vqnegq_s16 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vqneg.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a)\n+{\n+  return vqnegq (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vqneg.s16\"  }  } */"}, {"sha": "76923a382b913b9df78fb275b0e5a6034b38567d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqnegq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqnegq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqnegq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqnegq_s32.c?ref=6df4618cac91499f411673b33a516a5310cfbf79", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a)\n+{\n+  return vqnegq_s32 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vqneg.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a)\n+{\n+  return vqnegq (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vqneg.s32\"  }  } */"}, {"sha": "7bdab5d189b7e996c1bed39caa83ce4e071b2313", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqnegq_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqnegq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqnegq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqnegq_s8.c?ref=6df4618cac91499f411673b33a516a5310cfbf79", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a)\n+{\n+  return vqnegq_s8 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vqneg.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a)\n+{\n+  return vqnegq (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vqneg.s8\"  }  } */"}, {"sha": "ab62869cae767686969c6eb5a19f6077af530ddf", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrev16q_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev16q_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev16q_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev16q_s8.c?ref=6df4618cac91499f411673b33a516a5310cfbf79", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a)\n+{\n+  return vrev16q_s8 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vrev16.8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a)\n+{\n+  return vrev16q (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vrev16.8\"  }  } */"}, {"sha": "ea95db1fa89893dda0e2b948ba6a67b56860c220", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrev16q_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev16q_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev16q_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev16q_u8.c?ref=6df4618cac91499f411673b33a516a5310cfbf79", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a)\n+{\n+    return vrev16q_u8 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vrev16.8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a)\n+{\n+    return vrev16q (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vrev16.8\"  }  } */"}, {"sha": "1b339e74632e405fbbe37dc7209cb9e228195bed", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrev32q_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev32q_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev32q_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev32q_s16.c?ref=6df4618cac91499f411673b33a516a5310cfbf79", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a)\n+{\n+  return vrev32q_s16 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vrev32.16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a)\n+{\n+  return vrev32q (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vrev32.16\"  }  } */"}, {"sha": "cb2f8a7e62f07c44d23d82420b98a397e1d07fe3", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrev32q_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev32q_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev32q_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev32q_s8.c?ref=6df4618cac91499f411673b33a516a5310cfbf79", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a)\n+{\n+  return vrev32q_s8 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vrev32.8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a)\n+{\n+  return vrev32q (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vrev32.8\"  }  } */"}, {"sha": "296482c42a6bc685d3265cf1baea65afc0a2671c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrev32q_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev32q_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev32q_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev32q_u16.c?ref=6df4618cac91499f411673b33a516a5310cfbf79", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a)\n+{\n+    return vrev32q_u16 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vrev32.16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a)\n+{\n+    return vrev32q (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vrev32.16\"  }  } */"}, {"sha": "c70b27886472130b5926e83b2889004900350fb2", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrev32q_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev32q_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev32q_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev32q_u8.c?ref=6df4618cac91499f411673b33a516a5310cfbf79", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a)\n+{\n+    return vrev32q_u8 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vrev32.8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a)\n+{\n+    return vrev32q (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vrev32.8\"  }  } */"}, {"sha": "b2b6bd51985ac165556440649a9be65d11acdc28", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrev64q_s16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev64q_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev64q_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev64q_s16.c?ref=6df4618cac91499f411673b33a516a5310cfbf79", "patch": "@@ -16,7 +16,7 @@ foo (int16x8_t a)\n int16x8_t\n foo1 (int16x8_t a)\n {\n-  return vrev64q_s16 (a);\n+  return vrev64q (a);\n }\n \n /* { dg-final { scan-assembler \"vrev64.16\"  }  } */"}, {"sha": "e13f0750a099eee1661eb142d03acdcf3c330281", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrev64q_s32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev64q_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df4618cac91499f411673b33a516a5310cfbf79/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev64q_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev64q_s32.c?ref=6df4618cac91499f411673b33a516a5310cfbf79", "patch": "@@ -16,7 +16,7 @@ foo (int32x4_t a)\n int32x4_t\n foo1 (int32x4_t a)\n {\n-  return vrev64q_s32 (a);\n+  return vrev64q (a);\n }\n \n /* { dg-final { scan-assembler \"vrev64.32\"  }  } */"}]}