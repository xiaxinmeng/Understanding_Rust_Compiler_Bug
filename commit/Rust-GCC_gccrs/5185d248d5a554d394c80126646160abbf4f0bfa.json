{"sha": "5185d248d5a554d394c80126646160abbf4f0bfa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTE4NWQyNDhkNWE1NTRkMzk0YzgwMTI2NjQ2MTYwYWJiZjRmMGJmYQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-04-15T14:08:41Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-04-15T14:08:41Z"}, "message": "re PR tree-optimization/56933 (Vectorizer missing read-write dependency for interleaved accesses)\n\n2013-04-15  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/56933\n\t* tree-vectorizer.h (struct _stmt_vec_info): Remove read_write_dep\n\tmember.\n\t(GROUP_READ_WRITE_DEPENDENCE): Remove.\n\t(STMT_VINFO_GROUP_READ_WRITE_DEPENDENCE): Likewise.\n\t* tree-vect-data-refs.c (vect_analyze_group_access): Move\n\tdependence check ...\n\tvect_analyze_data_ref_dependence (vect_analyze_data_ref_dependence):\n\t... here.\n\t* tree-vect-stmts.c (new_stmt_vec_info): Do not initialize\n\tGROUP_READ_WRITE_DEPENDENCE.\n\n\t* gcc.dg/vect/pr56933.c: New testcase.\n\nFrom-SVN: r197972", "tree": {"sha": "52afb1966c9cc2b68285ff2632e2f574ef6e4c9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52afb1966c9cc2b68285ff2632e2f574ef6e4c9d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5185d248d5a554d394c80126646160abbf4f0bfa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5185d248d5a554d394c80126646160abbf4f0bfa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5185d248d5a554d394c80126646160abbf4f0bfa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5185d248d5a554d394c80126646160abbf4f0bfa/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a24243a0e5e09bd562eeb362c1c89ee497ea67e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a24243a0e5e09bd562eeb362c1c89ee497ea67e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a24243a0e5e09bd562eeb362c1c89ee497ea67e7"}], "stats": {"total": 113, "additions": 87, "deletions": 26}, "files": [{"sha": "db1b37325b45a674f1c851bb59b00727b7b6f6f8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5185d248d5a554d394c80126646160abbf4f0bfa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5185d248d5a554d394c80126646160abbf4f0bfa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5185d248d5a554d394c80126646160abbf4f0bfa", "patch": "@@ -1,3 +1,17 @@\n+2013-04-15  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/56933\n+\t* tree-vectorizer.h (struct _stmt_vec_info): Remove read_write_dep\n+\tmember.\n+\t(GROUP_READ_WRITE_DEPENDENCE): Remove.\n+\t(STMT_VINFO_GROUP_READ_WRITE_DEPENDENCE): Likewise.\n+\t* tree-vect-data-refs.c (vect_analyze_group_access): Move\n+\tdependence check ...\n+\tvect_analyze_data_ref_dependence (vect_analyze_data_ref_dependence):\n+\t... here.\n+\t* tree-vect-stmts.c (new_stmt_vec_info): Do not initialize\n+\tGROUP_READ_WRITE_DEPENDENCE.\n+\n 2013-04-15  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n \n \t* emit-rtl.c (reset_all_used_flags): New function."}, {"sha": "46135933624725768fbb9cdb20ea6ec35e5b8d03", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5185d248d5a554d394c80126646160abbf4f0bfa/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5185d248d5a554d394c80126646160abbf4f0bfa/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5185d248d5a554d394c80126646160abbf4f0bfa", "patch": "@@ -1,3 +1,8 @@\n+2013-04-15  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/56933\n+\t* gcc.dg/vect/pr56933.c: New testcase.\n+\n 2013-04-15  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* gcc.target/arm/anddi3-opt.c: New test."}, {"sha": "93a7da2ee8d1609ab9f7c1cf7976c8f80c388aaa", "filename": "gcc/testsuite/gcc.dg/vect/pr56933.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5185d248d5a554d394c80126646160abbf4f0bfa/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr56933.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5185d248d5a554d394c80126646160abbf4f0bfa/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr56933.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr56933.c?ref=5185d248d5a554d394c80126646160abbf4f0bfa", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do run } */\n+\n+extern void abort (void);\n+void __attribute__((noinline,noclone))\n+foo (double *b, double *d, double *f)\n+{\n+  int i;\n+  for (i = 0; i < 1024; i++)\n+    {\n+      d[2*i] = 2. * d[2*i];\n+      d[2*i+1] = 4. * d[2*i+1];\n+      b[i] = d[2*i] - 1.;\n+      f[i] = d[2*i+1] + 2.;\n+    }\n+}\n+int main()\n+{\n+  double b[1024], d[2*1024], f[1024];\n+  int i;\n+  for (i = 0; i < 2*1024; i++)\n+    d[i] = 1.;\n+  foo (b, d, f);\n+  for (i = 0; i < 1024; i+= 2)\n+    {\n+      if (d[2*i] != 2.)\n+\tabort ();\n+      if (d[2*i+1] != 4.)\n+\tabort ();\n+    }\n+  for (i = 0; i < 1024; i++)\n+    {\n+      if (b[i] != 1.)\n+\tabort ();\n+      if (f[i] != 6.)\n+\tabort ();\n+    }\n+  return 0;\n+}\n+\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "1fe5047c70b70eb72a9f61003b3cef426b596d63", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 28, "deletions": 19, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5185d248d5a554d394c80126646160abbf4f0bfa/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5185d248d5a554d394c80126646160abbf4f0bfa/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=5185d248d5a554d394c80126646160abbf4f0bfa", "patch": "@@ -341,14 +341,34 @@ vect_analyze_data_ref_dependence (struct data_dependence_relation *ddr,\n \t      dump_generic_expr (MSG_NOTE, TDF_SLIM, DR_REF (drb));\n \t    }\n \n-          /* For interleaving, mark that there is a read-write dependency if\n-             necessary.  We check before that one of the data-refs is store.  */\n-          if (DR_IS_READ (dra))\n-            GROUP_READ_WRITE_DEPENDENCE (stmtinfo_a) = true;\n-\t  else\n-            {\n-              if (DR_IS_READ (drb))\n-                GROUP_READ_WRITE_DEPENDENCE (stmtinfo_b) = true;\n+\t  /* When we perform grouped accesses and perform implicit CSE\n+\t     by detecting equal accesses and doing disambiguation with\n+\t     runtime alias tests like for\n+\t        .. = a[i];\n+\t\t.. = a[i+1];\n+\t\ta[i] = ..;\n+\t\ta[i+1] = ..;\n+\t\t*p = ..;\n+\t\t.. = a[i];\n+\t\t.. = a[i+1];\n+\t     where we will end up loading { a[i], a[i+1] } once, make\n+\t     sure that inserting group loads before the first load and\n+\t     stores after the last store will do the right thing.  */\n+\t  if ((STMT_VINFO_GROUPED_ACCESS (stmtinfo_a)\n+\t       && GROUP_SAME_DR_STMT (stmtinfo_a))\n+\t      || (STMT_VINFO_GROUPED_ACCESS (stmtinfo_b)\n+\t\t  && GROUP_SAME_DR_STMT (stmtinfo_b)))\n+\t    {\n+\t      gimple earlier_stmt;\n+\t      earlier_stmt = get_earlier_stmt (DR_STMT (dra), DR_STMT (drb));\n+\t      if (DR_IS_WRITE\n+\t\t    (STMT_VINFO_DATA_REF (vinfo_for_stmt (earlier_stmt))))\n+\t\t{\n+\t\t  if (dump_enabled_p ())\n+\t\t    dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n+\t\t\t\t     \"READ_WRITE dependence in interleaving.\");\n+\t\t  return true;\n+\t\t}\n \t    }\n \n \t  continue;\n@@ -2097,17 +2117,6 @@ vect_analyze_group_access (struct data_reference *dr)\n                   return false;\n                 }\n \n-              /* Check that there is no load-store dependencies for this loads\n-                 to prevent a case of load-store-load to the same location.  */\n-              if (GROUP_READ_WRITE_DEPENDENCE (vinfo_for_stmt (next))\n-                  || GROUP_READ_WRITE_DEPENDENCE (vinfo_for_stmt (prev)))\n-                {\n-                  if (dump_enabled_p ())\n-                    dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location, \n-                                     \"READ_WRITE dependence in interleaving.\");\n-                  return false;\n-                }\n-\n               /* For load use the same data-ref load.  */\n               GROUP_SAME_DR_STMT (vinfo_for_stmt (next)) = prev;\n "}, {"sha": "bdd4d6402ee66d729ee8448a03f89fe441d65207", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5185d248d5a554d394c80126646160abbf4f0bfa/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5185d248d5a554d394c80126646160abbf4f0bfa/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=5185d248d5a554d394c80126646160abbf4f0bfa", "patch": "@@ -5962,7 +5962,6 @@ new_stmt_vec_info (gimple stmt, loop_vec_info loop_vinfo,\n   GROUP_STORE_COUNT (res) = 0;\n   GROUP_GAP (res) = 0;\n   GROUP_SAME_DR_STMT (res) = NULL;\n-  GROUP_READ_WRITE_DEPENDENCE (res) = false;\n \n   return res;\n }"}, {"sha": "807114995203bc53e8d183abde252a71f37efeb2", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5185d248d5a554d394c80126646160abbf4f0bfa/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5185d248d5a554d394c80126646160abbf4f0bfa/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=5185d248d5a554d394c80126646160abbf4f0bfa", "patch": "@@ -460,10 +460,6 @@ typedef struct _stmt_vec_info {\n   /* Stmt is part of some pattern (computation idiom)  */\n   bool in_pattern_p;\n \n-  /* For loads only, if there is a store with the same location, this field is\n-     TRUE.  */\n-  bool read_write_dep;\n-\n   /* The stmt to which this info struct refers to.  */\n   gimple stmt;\n \n@@ -589,7 +585,6 @@ typedef struct _stmt_vec_info {\n #define STMT_VINFO_GROUP_STORE_COUNT(S)    (S)->store_count\n #define STMT_VINFO_GROUP_GAP(S)            (S)->gap\n #define STMT_VINFO_GROUP_SAME_DR_STMT(S)   (S)->same_dr_stmt\n-#define STMT_VINFO_GROUP_READ_WRITE_DEPENDENCE(S)  (S)->read_write_dep\n #define STMT_VINFO_GROUPED_ACCESS(S)      ((S)->first_element != NULL && (S)->data_ref_info)\n #define STMT_VINFO_LOOP_PHI_EVOLUTION_PART(S) (S)->loop_phi_evolution_part\n \n@@ -599,7 +594,6 @@ typedef struct _stmt_vec_info {\n #define GROUP_STORE_COUNT(S)            (S)->store_count\n #define GROUP_GAP(S)                    (S)->gap\n #define GROUP_SAME_DR_STMT(S)           (S)->same_dr_stmt\n-#define GROUP_READ_WRITE_DEPENDENCE(S)  (S)->read_write_dep\n \n #define STMT_VINFO_RELEVANT_P(S)          ((S)->relevant != vect_unused_in_scope)\n "}]}