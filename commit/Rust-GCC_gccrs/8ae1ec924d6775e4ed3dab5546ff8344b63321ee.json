{"sha": "8ae1ec924d6775e4ed3dab5546ff8344b63321ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGFlMWVjOTI0ZDY3NzVlNGVkM2RhYjU1NDZmZjgzNDRiNjMzMjFlZQ==", "commit": {"author": {"name": "Alessandro Fanfarillo", "email": "fanfarillo.gcc@gmail.com", "date": "2012-05-13T10:52:32Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2012-05-13T10:52:32Z"}, "message": "re PR fortran/52158 (Regression on character function with gfortran 4.7)\n\n2012-05-13  Alessandro Fanfarillo  <fanfarillo.gcc@gmail.com>\n            Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/52158\n        PR fortran/45170\n        PR fortran/49430\n        * resolve.c (resolve_fl_derived0): Deferred character length \n        procedure components are supported.\n        * trans-expr.c (gfc_conv_procedure_call): Handle TBP with \n        deferred-length results.\n        (gfc_string_to_single_character): Add a new check to prevent\n        NULL read.\n        (gfc_conv_procedure_call): Remove unuseful checks on \n        symbol's attributes. Add new checks to prevent NULL read on\n        string length. \n\n2012-05-13  Alessandro Fanfarillo  <fanfarillo.gcc@gmail.com>\n\n        PR fortran/45170\n        * gfortran.dg/deferred_type_param_3.f90: New.\n        * gfortran.dg/deferred_type_proc_pointer_1.f90: New.\n        * gfortran.dg/deferred_type_proc_pointer_2.f90: New.\n\n\nCo-Authored-By: Tobias Burnus <burnus@net-b.de>\n\nFrom-SVN: r187436", "tree": {"sha": "a3bff2c8461bdb75f783900d38a4aa797b862fe1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a3bff2c8461bdb75f783900d38a4aa797b862fe1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ae1ec924d6775e4ed3dab5546ff8344b63321ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ae1ec924d6775e4ed3dab5546ff8344b63321ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ae1ec924d6775e4ed3dab5546ff8344b63321ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ae1ec924d6775e4ed3dab5546ff8344b63321ee/comments", "author": null, "committer": null, "parents": [{"sha": "bf4c7d4a02e79fd43131865dbc104286130273ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf4c7d4a02e79fd43131865dbc104286130273ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf4c7d4a02e79fd43131865dbc104286130273ea"}], "stats": {"total": 143, "additions": 122, "deletions": 21}, "files": [{"sha": "251194b46af04c42e6de76b54ddb05add85341c1", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ae1ec924d6775e4ed3dab5546ff8344b63321ee/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ae1ec924d6775e4ed3dab5546ff8344b63321ee/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=8ae1ec924d6775e4ed3dab5546ff8344b63321ee", "patch": "@@ -1,3 +1,19 @@\n+2012-05-13  Alessandro Fanfarillo  <fanfarillo.gcc@gmail.com>\n+\t    Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/52158\n+\tPR fortran/45170\n+\tPR fortran/49430\n+\t* resolve.c (resolve_fl_derived0): Deferred character length \n+\tprocedure components are supported.\n+\t* trans-expr.c (gfc_conv_procedure_call): Handle TBP with \n+\tdeferred-length results.\n+\t(gfc_string_to_single_character): Add a new check to prevent\n+\tNULL read.\n+\t(gfc_conv_procedure_call): Remove unuseful checks on \n+\tsymbol's attributes. Add new checks to prevent NULL read on\n+\tstring length. \n+\n 2012-05-12  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/49110"}, {"sha": "9814c14753af7d5c6ec89a4d03abf951a1f0c681", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ae1ec924d6775e4ed3dab5546ff8344b63321ee/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ae1ec924d6775e4ed3dab5546ff8344b63321ee/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=8ae1ec924d6775e4ed3dab5546ff8344b63321ee", "patch": "@@ -11665,7 +11665,7 @@ resolve_fl_derived0 (gfc_symbol *sym)\n   for ( ; c != NULL; c = c->next)\n     {\n       /* See PRs 51550, 47545, 48654, 49050, 51075 - and 45170.  */\n-      if (c->ts.type == BT_CHARACTER && c->ts.deferred)\n+      if (c->ts.type == BT_CHARACTER && c->ts.deferred && !c->attr.function)\n \t{\n \t  gfc_error (\"Deferred-length character component '%s' at %L is not \"\n \t\t     \"yet supported\", c->name, &c->loc);"}, {"sha": "81562d2162d6faae650ae58a7466d35f13e60505", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 21, "deletions": 20, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ae1ec924d6775e4ed3dab5546ff8344b63321ee/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ae1ec924d6775e4ed3dab5546ff8344b63321ee/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=8ae1ec924d6775e4ed3dab5546ff8344b63321ee", "patch": "@@ -2073,7 +2073,8 @@ tree\n gfc_string_to_single_character (tree len, tree str, int kind)\n {\n \n-  if (!INTEGER_CST_P (len) || TREE_INT_CST_HIGH (len) != 0\n+  if (len == NULL\n+      || !INTEGER_CST_P (len) || TREE_INT_CST_HIGH (len) != 0\n       || !POINTER_TYPE_P (TREE_TYPE (str)))\n     return NULL_TREE;\n \n@@ -4175,7 +4176,7 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n \t     we take the character length of the first argument for the result.\n \t     For dummies, we have to look through the formal argument list for\n \t     this function and use the character length found there.*/\n-\t  if (ts.deferred && (sym->attr.allocatable || sym->attr.pointer))\n+\t  if (ts.deferred)\n \t    cl.backend_decl = gfc_create_var (gfc_charlen_type_node, \"slen\");\n \t  else if (!sym->attr.dummy)\n \t    cl.backend_decl = VEC_index (tree, stringargs, 0);\n@@ -4186,6 +4187,7 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n \t\tif (strcmp (formal->sym->name, sym->name) == 0)\n \t\t  cl.backend_decl = formal->sym->ts.u.cl->backend_decl;\n \t    }\n+\t  len = cl.backend_decl;\n         }\n       else\n         {\n@@ -4343,9 +4345,13 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n \n \t      if ((!comp && sym->attr.allocatable)\n \t\t  || (comp && comp->attr.allocatable))\n-\t\tgfc_add_modify (&se->pre, var,\n-\t\t\t\tfold_convert (TREE_TYPE (var),\n-\t\t\t\t\t      null_pointer_node));\n+\t\t{\n+\t\t  gfc_add_modify (&se->pre, var,\n+\t\t\t\t  fold_convert (TREE_TYPE (var),\n+\t\t\t\t\t\tnull_pointer_node));\n+\t\t  tmp = gfc_call_free (convert (pvoid_type_node, var));\n+\t\t  gfc_add_expr_to_block (&se->post, tmp);\n+\t\t}\n \n \t      /* Provide an address expression for the function arguments.  */\n \t      var = gfc_build_addr_expr (NULL_TREE, var);\n@@ -4364,17 +4370,16 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n \t  VEC_safe_push (tree, gc, retargs, var);\n \t}\n \n-      if (ts.type == BT_CHARACTER && ts.deferred\n-\t    && (sym->attr.allocatable || sym->attr.pointer))\n+      /* Add the string length to the argument list.  */\n+      if (ts.type == BT_CHARACTER && ts.deferred)\n \t{\n \t  tmp = len;\n \t  if (TREE_CODE (tmp) != VAR_DECL)\n \t    tmp = gfc_evaluate_now (len, &se->pre);\n-\t  len = gfc_build_addr_expr (NULL_TREE, tmp);\n+\t  tmp = gfc_build_addr_expr (NULL_TREE, tmp);\n+\t  VEC_safe_push (tree, gc, retargs, tmp);\n \t}\n-\n-      /* Add the string length to the argument list.  */\n-      if (ts.type == BT_CHARACTER)\n+      else if (ts.type == BT_CHARACTER)\n \tVEC_safe_push (tree, gc, retargs, len);\n     }\n   gfc_free_interface_mapping (&mapping);\n@@ -4483,10 +4488,7 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n \t      else\n \t        se->expr = var;\n \n-\t      if (!ts.deferred)\n-\t\tse->string_length = len;\n-\t      else if (sym->attr.allocatable || sym->attr.pointer)\n-\t\tse->string_length = cl.backend_decl;\n+\t      se->string_length = len;\n \t    }\n \t  else\n \t    {\n@@ -5776,8 +5778,7 @@ gfc_trans_pointer_assignment (gfc_expr * expr1, gfc_expr * expr2)\n \t really added if -fbounds-check is enabled.  Exclude deferred\n \t character length lefthand sides.  */\n       if (expr1->ts.type == BT_CHARACTER && expr2->expr_type != EXPR_NULL\n-\t  && !(expr1->ts.deferred\n-\t\t\t&& (TREE_CODE (lse.string_length) == VAR_DECL))\n+\t  && !expr1->ts.deferred\n \t  && !expr1->symtree->n.sym->attr.proc_pointer\n \t  && !gfc_is_proc_ptr_comp (expr1, NULL))\n \t{\n@@ -5790,11 +5791,11 @@ gfc_trans_pointer_assignment (gfc_expr * expr1, gfc_expr * expr2)\n \n       /* The assignment to an deferred character length sets the string\n \t length to that of the rhs.  */\n-      if (expr1->ts.deferred && (TREE_CODE (lse.string_length) == VAR_DECL))\n+      if (expr1->ts.deferred)\n \t{\n-\t  if (expr2->expr_type != EXPR_NULL)\n+\t  if (expr2->expr_type != EXPR_NULL && lse.string_length != NULL)\n \t    gfc_add_modify (&block, lse.string_length, rse.string_length);\n-\t  else\n+\t  else if (lse.string_length != NULL)\n \t    gfc_add_modify (&block, lse.string_length,\n \t\t\t    build_int_cst (gfc_charlen_type_node, 0));\n \t}"}, {"sha": "9a34ac44c358448afa6217a25e776fb8d27436b3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ae1ec924d6775e4ed3dab5546ff8344b63321ee/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ae1ec924d6775e4ed3dab5546ff8344b63321ee/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8ae1ec924d6775e4ed3dab5546ff8344b63321ee", "patch": "@@ -1,3 +1,10 @@\n+2012-05-13  Alessandro Fanfarillo  <fanfarillo.gcc@gmail.com>\n+\n+\tPR fortran/45170\n+\t* gfortran.dg/deferred_type_param_3.f90: New.\n+\t* gfortran.dg/deferred_type_proc_pointer_1.f90: New.\n+\t* gfortran.dg/deferred_type_proc_pointer_2.f90: New.\n+\n 2012-05-12  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/null_pointer_deref3.adb: New test."}, {"sha": "809738d5b98ccf154a0f03e9fec8ae521c6c5400", "filename": "gcc/testsuite/gfortran.dg/deferred_type_param_3.f90", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ae1ec924d6775e4ed3dab5546ff8344b63321ee/gcc%2Ftestsuite%2Fgfortran.dg%2Fdeferred_type_param_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ae1ec924d6775e4ed3dab5546ff8344b63321ee/gcc%2Ftestsuite%2Fgfortran.dg%2Fdeferred_type_param_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdeferred_type_param_3.f90?ref=8ae1ec924d6775e4ed3dab5546ff8344b63321ee", "patch": "@@ -0,0 +1,23 @@\n+! { dg-do compile }\n+!\n+! PR fortran/45170\n+! PR fortran/52158\n+!\n+! Contributed by Damian Rouson\n+\n+module speaker_class\n+  type speaker\n+  contains\n+    procedure :: speak\n+  end type\n+contains\n+  function speak(this)\n+    class(speaker) ,intent(in) :: this\n+    character(:) ,allocatable :: speak\n+  end function\n+  subroutine say_something(somebody)\n+    class(speaker) :: somebody\n+    print *,somebody%speak()\n+  end subroutine\n+end module\n+"}, {"sha": "3fc055e0e9ca56904db55ae555029bbcdfaccb49", "filename": "gcc/testsuite/gfortran.dg/deferred_type_proc_pointer_1.f90", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ae1ec924d6775e4ed3dab5546ff8344b63321ee/gcc%2Ftestsuite%2Fgfortran.dg%2Fdeferred_type_proc_pointer_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ae1ec924d6775e4ed3dab5546ff8344b63321ee/gcc%2Ftestsuite%2Fgfortran.dg%2Fdeferred_type_proc_pointer_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdeferred_type_proc_pointer_1.f90?ref=8ae1ec924d6775e4ed3dab5546ff8344b63321ee", "patch": "@@ -0,0 +1,27 @@\n+! { dg-do compile }\n+!\n+! PR fortran/45170\n+! PR fortran/52158\n+!\n+! Contributed by Tobias Burnus\n+\n+module test\n+ implicit none\n+ type t\n+   procedure(deferred_len), pointer, nopass :: ppt\n+ end type t\n+contains\n+ function deferred_len()\n+   character(len=:), allocatable :: deferred_len\n+   deferred_len = 'abc'\n+ end function deferred_len\n+ subroutine doIt()\n+   type(t) :: x\n+   x%ppt => deferred_len\n+   if (\"abc\" /= x%ppt()) call abort()\n+ end subroutine doIt\n+end module test\n+\n+use test\n+call doIt ()\n+end"}, {"sha": "dbdb3bdba34eccd0601649d07edf74b7c6f55ca1", "filename": "gcc/testsuite/gfortran.dg/deferred_type_proc_pointer_2.f90", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ae1ec924d6775e4ed3dab5546ff8344b63321ee/gcc%2Ftestsuite%2Fgfortran.dg%2Fdeferred_type_proc_pointer_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ae1ec924d6775e4ed3dab5546ff8344b63321ee/gcc%2Ftestsuite%2Fgfortran.dg%2Fdeferred_type_proc_pointer_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdeferred_type_proc_pointer_2.f90?ref=8ae1ec924d6775e4ed3dab5546ff8344b63321ee", "patch": "@@ -0,0 +1,27 @@\n+! { dg-do compile }\n+!\n+! PR fortran/45170\n+! PR fortran/52158\n+\n+module test\n+ implicit none\n+ type t\n+   procedure(deferred_len), pointer, nopass :: ppt\n+ end type t\n+contains\n+ function deferred_len()\n+   character(len=:), allocatable :: deferred_len\n+   deferred_len = 'abc'\n+ end function deferred_len\n+ subroutine doIt()\n+   type(t) :: x\n+   character(:), allocatable :: temp\n+   x%ppt => deferred_len\n+   temp = deferred_len()\n+   if (\"abc\" /= temp) call abort()\n+ end subroutine doIt\n+end module test\n+\n+use test\n+call doIt ()\n+end"}]}