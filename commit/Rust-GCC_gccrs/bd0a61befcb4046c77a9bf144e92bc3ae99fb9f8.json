{"sha": "bd0a61befcb4046c77a9bf144e92bc3ae99fb9f8", "node_id": "C_kwDOANBUbNoAKGJkMGE2MWJlZmNiNDA0NmM3N2E5YmYxNDRlOTJiYzNhZTk5ZmI5Zjg", "commit": {"author": {"name": "Jose E. Marchesi", "email": "jose.marchesi@oracle.com", "date": "2021-12-06T20:57:53Z"}, "committer": {"name": "Jose E. Marchesi", "email": "jose.marchesi@oracle.com", "date": "2021-12-06T20:57:53Z"}, "message": "bpf: mark/remove unused arguments and remove an unused function\n\nThis patch does a little bit of cleanup by removing some unused\narguments, or marking them as unused.  It also removes the function\nctfc_debuginfo_early_finish_p and the corresponding hook macro\ndefinition, which are not used by GCC.\n\ngcc/\n\t* config/bpf/bpf.c (bpf_handle_preserve_access_index_attribute):\n\tMark arguments `args' and flags' as unused.\n\t(bpf_core_newdecl): Remove unused local `newdecl'.\n\t(bpf_core_newdecl): Remove unused argument `loc'.\n\t(ctfc_debuginfo_early_finish_p): Remove unused function.\n\t(TARGET_CTFC_DEBUGINFO_EARLY_FINISH_P): Remove definition.\n\t(bpf_core_walk): Do not pass a location to bpf_core_newdecl.", "tree": {"sha": "6413fff5f14290e0246870ba6a52e9d07233ade9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6413fff5f14290e0246870ba6a52e9d07233ade9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd0a61befcb4046c77a9bf144e92bc3ae99fb9f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd0a61befcb4046c77a9bf144e92bc3ae99fb9f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd0a61befcb4046c77a9bf144e92bc3ae99fb9f8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd0a61befcb4046c77a9bf144e92bc3ae99fb9f8/comments", "author": {"login": "jemarch", "id": 7061875, "node_id": "MDQ6VXNlcjcwNjE4NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/7061875?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jemarch", "html_url": "https://github.com/jemarch", "followers_url": "https://api.github.com/users/jemarch/followers", "following_url": "https://api.github.com/users/jemarch/following{/other_user}", "gists_url": "https://api.github.com/users/jemarch/gists{/gist_id}", "starred_url": "https://api.github.com/users/jemarch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jemarch/subscriptions", "organizations_url": "https://api.github.com/users/jemarch/orgs", "repos_url": "https://api.github.com/users/jemarch/repos", "events_url": "https://api.github.com/users/jemarch/events{/privacy}", "received_events_url": "https://api.github.com/users/jemarch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jemarch", "id": 7061875, "node_id": "MDQ6VXNlcjcwNjE4NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/7061875?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jemarch", "html_url": "https://github.com/jemarch", "followers_url": "https://api.github.com/users/jemarch/followers", "following_url": "https://api.github.com/users/jemarch/following{/other_user}", "gists_url": "https://api.github.com/users/jemarch/gists{/gist_id}", "starred_url": "https://api.github.com/users/jemarch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jemarch/subscriptions", "organizations_url": "https://api.github.com/users/jemarch/orgs", "repos_url": "https://api.github.com/users/jemarch/repos", "events_url": "https://api.github.com/users/jemarch/events{/privacy}", "received_events_url": "https://api.github.com/users/jemarch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63c59f054a5cd6d356ad8bce79182ab205b7aa43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63c59f054a5cd6d356ad8bce79182ab205b7aa43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63c59f054a5cd6d356ad8bce79182ab205b7aa43"}], "stats": {"total": 25, "additions": 5, "deletions": 20}, "files": [{"sha": "9d2c0bb681884cfdcf2190d46aa502026bd44d6e", "filename": "gcc/config/bpf/bpf.c", "status": "modified", "additions": 5, "deletions": 20, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd0a61befcb4046c77a9bf144e92bc3ae99fb9f8/gcc%2Fconfig%2Fbpf%2Fbpf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd0a61befcb4046c77a9bf144e92bc3ae99fb9f8/gcc%2Fconfig%2Fbpf%2Fbpf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbpf%2Fbpf.c?ref=bd0a61befcb4046c77a9bf144e92bc3ae99fb9f8", "patch": "@@ -129,8 +129,8 @@ bpf_handle_fndecl_attribute (tree *node, tree name,\n \n static tree\n bpf_handle_preserve_access_index_attribute (tree *node, tree name,\n-\t\t\t\t\t    tree args,\n-\t\t\t\t\t    int flags,\n+\t\t\t\t\t    tree args ATTRIBUTE_UNUSED,\n+\t\t\t\t\t    int flags ATTRIBUTE_UNUSED,\n \t\t\t\t\t    bool *no_add_attrs)\n {\n   if (TREE_CODE (*node) != RECORD_TYPE && TREE_CODE (*node) != UNION_TYPE)\n@@ -258,20 +258,6 @@ bpf_option_override (void)\n #undef TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE bpf_option_override\n \n-/* Return FALSE iff -mcore has been specified.  */\n-\n-static bool\n-ctfc_debuginfo_early_finish_p (void)\n-{\n-  if (TARGET_BPF_CORE)\n-    return false;\n-  else\n-    return true;\n-}\n-\n-#undef TARGET_CTFC_DEBUGINFO_EARLY_FINISH_P\n-#define TARGET_CTFC_DEBUGINFO_EARLY_FINISH_P ctfc_debuginfo_early_finish_p\n-\n /* Implement TARGET_ASM_INIT_SECTIONS.  */\n \n static void\n@@ -1266,15 +1252,14 @@ bpf_core_get_index (const tree node)\n   return -1;\n }\n \n-/* Synthesize a new builtin function declaration at LOC with signature TYPE.\n+/* Synthesize a new builtin function declaration with signature TYPE.\n    Used by bpf_resolve_overloaded_builtin to resolve calls to\n    __builtin_preserve_access_index.  */\n \n static tree\n-bpf_core_newdecl (location_t loc, tree type)\n+bpf_core_newdecl (tree type)\n {\n   tree rettype = build_function_type_list (type, type, NULL);\n-  tree newdecl = NULL_TREE;\n   char name[80];\n   int len = snprintf (name, sizeof (name), \"%s\", \"__builtin_pai_\");\n \n@@ -1317,7 +1302,7 @@ bpf_core_walk (tree *tp, int *walk_subtrees, void *data)\n \n   if (bpf_core_is_maybe_aggregate_access (*tp))\n     {\n-      tree newdecl = bpf_core_newdecl (loc, TREE_TYPE (*tp));\n+      tree newdecl = bpf_core_newdecl (TREE_TYPE (*tp));\n       tree newcall = build_call_expr_loc (loc, newdecl, 1, *tp);\n       *tp = newcall;\n       *walk_subtrees = 0;"}]}