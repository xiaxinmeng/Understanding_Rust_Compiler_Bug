{"sha": "dc2698bc26065d3300ca0353f92c00f4f0a1496b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGMyNjk4YmMyNjA2NWQzMzAwY2EwMzUzZjkyYzAwZjRmMGExNDk2Yg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2001-02-28T16:20:43Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2001-02-28T16:20:43Z"}, "message": "ifcvt.c (noce_emit_store_flag, [...]): Use reversed_comparison_code instead of reverse_comparison and...\n\n\t* ifcvt.c (noce_emit_store_flag, noce_try_store_flag_constants,\n\tnoce_try_store_flag_inc, noce_try_store_flag_mask,\n\tnoce_try_cmove_arith):\n\tUse reversed_comparison_code instead of reverse_comparison and\n\tcan_reverse_comparison_p.\n\nFrom-SVN: r40119", "tree": {"sha": "5900c47b79d24a8642ec4a8c9b2cae931c32df23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5900c47b79d24a8642ec4a8c9b2cae931c32df23"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc2698bc26065d3300ca0353f92c00f4f0a1496b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc2698bc26065d3300ca0353f92c00f4f0a1496b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc2698bc26065d3300ca0353f92c00f4f0a1496b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc2698bc26065d3300ca0353f92c00f4f0a1496b/comments", "author": null, "committer": null, "parents": [{"sha": "2450703cc08737027b115c2da82db83a93cd4ecd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2450703cc08737027b115c2da82db83a93cd4ecd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2450703cc08737027b115c2da82db83a93cd4ecd"}], "stats": {"total": 39, "additions": 24, "deletions": 15}, "files": [{"sha": "95171236db6873efd3c6dda22a0db53ff4e698f1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc2698bc26065d3300ca0353f92c00f4f0a1496b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc2698bc26065d3300ca0353f92c00f4f0a1496b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dc2698bc26065d3300ca0353f92c00f4f0a1496b", "patch": "@@ -1,3 +1,11 @@\n+Wed Feb 28 17:19:28 CET 2001  Jan Hubicka  <jh@suse.cz.\n+\n+\t* ifcvt.c (noce_emit_store_flag, noce_try_store_flag_constants,\n+\tnoce_try_store_flag_inc, noce_try_store_flag_mask,\n+\tnoce_try_cmove_arith):\n+\tUse reversed_comparison_code instead of reverse_comparison and\n+\tcan_reverse_comparison_p.\n+\n Wed Feb 28 17:17:29 CET 2001  Jan Hubicka  <jh@suse.cz>\n \n \t* jump.c (reversed_comparison_code_parts): Allow reversal of"}, {"sha": "fd934b5643ec909aa5a166b57dbc64310ffdeec8", "filename": "gcc/ifcvt.c", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc2698bc26065d3300ca0353f92c00f4f0a1496b/gcc%2Fifcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc2698bc26065d3300ca0353f92c00f4f0a1496b/gcc%2Fifcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.c?ref=dc2698bc26065d3300ca0353f92c00f4f0a1496b", "patch": "@@ -496,15 +496,16 @@ noce_emit_store_flag (if_info, x, reversep, normalize)\n   if (cond_complex)\n     cond = XEXP (SET_SRC (pc_set (if_info->jump)), 0);\n \n+  if (reversep)\n+    code = reversed_comparison_code (cond, if_info->jump);\n+  else\n+    code = GET_CODE (cond);\n+\n   if ((if_info->cond_earliest == if_info->jump || cond_complex)\n       && (normalize == 0 || STORE_FLAG_VALUE == normalize))\n     {\n       rtx tmp;\n \n-      code = GET_CODE (cond);\n-      if (reversep)\n-\tcode = reverse_condition (code);\n-\n       tmp = gen_rtx_fmt_ee (code, GET_MODE (x), XEXP (cond, 0),\n \t\t\t    XEXP (cond, 1));\n       tmp = gen_rtx_SET (VOIDmode, x, tmp);\n@@ -530,10 +531,6 @@ noce_emit_store_flag (if_info, x, reversep, normalize)\n   if (cond_complex)\n     return NULL_RTX;\n \n-  code = GET_CODE (cond);\n-  if (reversep)\n-    code = reverse_condition (code);\n-\n   return emit_store_flag (x, code, XEXP (cond, 0),\n \t\t\t  XEXP (cond, 1), VOIDmode,\n \t\t\t  (code == LTU || code == LEU\n@@ -560,7 +557,8 @@ noce_try_store_flag (if_info)\n   else if (if_info->b == const0_rtx\n \t   && GET_CODE (if_info->a) == CONST_INT\n \t   && INTVAL (if_info->a) == STORE_FLAG_VALUE\n-\t   && can_reverse_comparison_p (if_info->cond, if_info->jump))\n+\t   && (reversed_comparison_code (if_info->cond, if_info->jump)\n+\t       != UNKNOWN))\n     reversep = 1;\n   else\n     return FALSE;\n@@ -605,7 +603,8 @@ noce_try_store_flag_constants (if_info)\n       itrue = INTVAL (if_info->b);\n       diff = itrue - ifalse;\n \n-      can_reverse = can_reverse_comparison_p (if_info->cond, if_info->jump);\n+      can_reverse = (reversed_comparison_code (if_info->cond, if_info->jump)\n+\t\t     != UNKNOWN);\n \n       reversep = 0;\n       if (diff == STORE_FLAG_VALUE || diff == -STORE_FLAG_VALUE)\n@@ -729,7 +728,8 @@ noce_try_store_flag_inc (if_info)\n       && (XEXP (if_info->a, 1) == const1_rtx\n \t  || XEXP (if_info->a, 1) == constm1_rtx)\n       && rtx_equal_p (XEXP (if_info->a, 0), if_info->x)\n-      && can_reverse_comparison_p (if_info->cond, if_info->jump))\n+      && (reversed_comparison_code (if_info->cond, if_info->jump)\n+\t  != UNKNOWN))\n     {\n       if (STORE_FLAG_VALUE == INTVAL (XEXP (if_info->a, 1)))\n \tsubtract = 0, normalize = 0;\n@@ -785,8 +785,9 @@ noce_try_store_flag_mask (if_info)\n \t  || STORE_FLAG_VALUE == -1)\n       && ((if_info->a == const0_rtx\n \t   && rtx_equal_p (if_info->b, if_info->x))\n-\t  || ((reversep = can_reverse_comparison_p (if_info->cond,\n-\t\t\t\t\t\t    if_info->jump))\n+\t  || ((reversep = (reversed_comparison_code (if_info->cond,\n+\t\t\t\t\t\t     if_info->jump)\n+\t\t\t   != UNKNOWN))\n \t      && if_info->b == const0_rtx\n \t      && rtx_equal_p (if_info->a, if_info->x))))\n     {\n@@ -964,7 +965,7 @@ noce_try_cmove_arith (if_info)\n   insn_b = if_info->insn_b;\n \n   /* Possibly rearrange operands to make things come out more natural.  */\n-  if (can_reverse_comparison_p (if_info->cond, if_info->jump))\n+  if (reversed_comparison_code (if_info->cond, if_info->jump) != UNKNOWN)\n     {\n       int reversep = 0;\n       if (rtx_equal_p (b, x))\n@@ -974,7 +975,7 @@ noce_try_cmove_arith (if_info)\n \n       if (reversep)\n \t{\n-\t  code = reverse_condition (code);\n+\t  code = reversed_comparison_code (if_info->cond, if_info->jump);\n \t  tmp = a, a = b, b = tmp;\n \t  tmp = insn_a, insn_a = insn_b, insn_b = tmp;\n \t}"}]}