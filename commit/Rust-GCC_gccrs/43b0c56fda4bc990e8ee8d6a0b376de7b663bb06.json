{"sha": "43b0c56fda4bc990e8ee8d6a0b376de7b663bb06", "node_id": "C_kwDOANBUbNoAKDQzYjBjNTZmZGE0YmM5OTBlOGVlOGQ2YTBiMzc2ZGU3YjY2M2JiMDY", "commit": {"author": {"name": "Takayuki 'January June' Suwa", "email": "jjsuwa_sys3175@yahoo.co.jp", "date": "2022-06-15T12:21:21Z"}, "committer": {"name": "Max Filippov", "email": "jcmvbkbc@gmail.com", "date": "2022-06-15T23:55:36Z"}, "message": "xtensa: Add support for sibling call optimization\n\nThis patch introduces support for sibling call optimization, when call0\nABI is in effect.\n\ngcc/ChangeLog:\n\n\t* config/xtensa/xtensa-protos.h (xtensa_prepare_expand_call,\n\txtensa_emit_sibcall): New prototypes.\n\t(xtensa_expand_epilogue): Add new argument that specifies whether\n\tor not sibling call.\n\t* config/xtensa/xtensa.cc (TARGET_FUNCTION_OK_FOR_SIBCALL):\n\tNew macro definition.\n\t(xtensa_prepare_expand_call): New function in order to share\n\tthe common code.\n\t(xtensa_emit_sibcall, xtensa_function_ok_for_sibcall):\n\tNew functions.\n\t(xtensa_expand_epilogue): Add new argument sibcall_p and use it\n\tfor sibling call handling.\n\t* config/xtensa/xtensa.md (call, call_value):\n\tUse xtensa_prepare_expand_call.\n\t(call_internal, call_value_internal):\n\tAdd the condition in order to be disabled if sibling call.\n\t(sibcall, sibcall_value, sibcall_epilogue): New expansions.\n\t(sibcall_internal, sibcall_value_internal): New insn patterns,\n\tand split ones in order to take care of the indirect sibcalls.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/xtensa/sibcalls.c: New.", "tree": {"sha": "e2b0511e65e49eac0883b44d8d9d262d9fa7dde8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e2b0511e65e49eac0883b44d8d9d262d9fa7dde8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43b0c56fda4bc990e8ee8d6a0b376de7b663bb06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43b0c56fda4bc990e8ee8d6a0b376de7b663bb06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43b0c56fda4bc990e8ee8d6a0b376de7b663bb06", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43b0c56fda4bc990e8ee8d6a0b376de7b663bb06/comments", "author": {"login": "jjsuwa-sys3175", "id": 73290592, "node_id": "MDQ6VXNlcjczMjkwNTky", "avatar_url": "https://avatars.githubusercontent.com/u/73290592?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jjsuwa-sys3175", "html_url": "https://github.com/jjsuwa-sys3175", "followers_url": "https://api.github.com/users/jjsuwa-sys3175/followers", "following_url": "https://api.github.com/users/jjsuwa-sys3175/following{/other_user}", "gists_url": "https://api.github.com/users/jjsuwa-sys3175/gists{/gist_id}", "starred_url": "https://api.github.com/users/jjsuwa-sys3175/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jjsuwa-sys3175/subscriptions", "organizations_url": "https://api.github.com/users/jjsuwa-sys3175/orgs", "repos_url": "https://api.github.com/users/jjsuwa-sys3175/repos", "events_url": "https://api.github.com/users/jjsuwa-sys3175/events{/privacy}", "received_events_url": "https://api.github.com/users/jjsuwa-sys3175/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jcmvbkbc", "id": 166731, "node_id": "MDQ6VXNlcjE2NjczMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/166731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jcmvbkbc", "html_url": "https://github.com/jcmvbkbc", "followers_url": "https://api.github.com/users/jcmvbkbc/followers", "following_url": "https://api.github.com/users/jcmvbkbc/following{/other_user}", "gists_url": "https://api.github.com/users/jcmvbkbc/gists{/gist_id}", "starred_url": "https://api.github.com/users/jcmvbkbc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jcmvbkbc/subscriptions", "organizations_url": "https://api.github.com/users/jcmvbkbc/orgs", "repos_url": "https://api.github.com/users/jcmvbkbc/repos", "events_url": "https://api.github.com/users/jcmvbkbc/events{/privacy}", "received_events_url": "https://api.github.com/users/jcmvbkbc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96518f714e3fab53a966a05b8d48011e27c1a718", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96518f714e3fab53a966a05b8d48011e27c1a718", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96518f714e3fab53a966a05b8d48011e27c1a718"}], "stats": {"total": 175, "additions": 155, "deletions": 20}, "files": [{"sha": "e020a332b0376922de720e93d36e3a9e9442d5fb", "filename": "gcc/config/xtensa/xtensa-protos.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43b0c56fda4bc990e8ee8d6a0b376de7b663bb06/gcc%2Fconfig%2Fxtensa%2Fxtensa-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43b0c56fda4bc990e8ee8d6a0b376de7b663bb06/gcc%2Fconfig%2Fxtensa%2Fxtensa-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa-protos.h?ref=43b0c56fda4bc990e8ee8d6a0b376de7b663bb06", "patch": "@@ -53,7 +53,9 @@ extern void xtensa_expand_atomic (enum rtx_code, rtx, rtx, rtx, bool);\n extern void xtensa_emit_loop_end (rtx_insn *, rtx *);\n extern char *xtensa_emit_branch (bool, rtx *);\n extern char *xtensa_emit_movcc (bool, bool, bool, rtx *);\n+extern void xtensa_prepare_expand_call (int, rtx *);\n extern char *xtensa_emit_call (int, rtx *);\n+extern char *xtensa_emit_sibcall (int, rtx *);\n extern bool xtensa_tls_referenced_p (rtx);\n extern enum rtx_code xtensa_shlrd_which_direction (rtx, rtx);\n \n@@ -73,7 +75,7 @@ extern int xtensa_dbx_register_number (int);\n extern long compute_frame_size (poly_int64);\n extern bool xtensa_use_return_instruction_p (void);\n extern void xtensa_expand_prologue (void);\n-extern void xtensa_expand_epilogue (void);\n+extern void xtensa_expand_epilogue (bool);\n extern void order_regs_for_local_alloc (void);\n extern enum reg_class xtensa_regno_to_class (int regno);\n extern HOST_WIDE_INT xtensa_initial_elimination_offset (int from, int to);"}, {"sha": "d6f08b11648ca79008d815afd89f193585516558", "filename": "gcc/config/xtensa/xtensa.cc", "status": "modified", "additions": 54, "deletions": 4, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43b0c56fda4bc990e8ee8d6a0b376de7b663bb06/gcc%2Fconfig%2Fxtensa%2Fxtensa.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43b0c56fda4bc990e8ee8d6a0b376de7b663bb06/gcc%2Fconfig%2Fxtensa%2Fxtensa.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.cc?ref=43b0c56fda4bc990e8ee8d6a0b376de7b663bb06", "patch": "@@ -189,7 +189,7 @@ static bool xtensa_can_eliminate (const int from ATTRIBUTE_UNUSED,\n \t\t\t\t  const int to);\n static HOST_WIDE_INT xtensa_starting_frame_offset (void);\n static unsigned HOST_WIDE_INT xtensa_asan_shadow_offset (void);\n-\n+static bool xtensa_function_ok_for_sibcall (tree, tree);\n static rtx xtensa_delegitimize_address (rtx);\n \n \f\n@@ -347,6 +347,9 @@ static rtx xtensa_delegitimize_address (rtx);\n #undef TARGET_DELEGITIMIZE_ADDRESS\n #define TARGET_DELEGITIMIZE_ADDRESS xtensa_delegitimize_address\n \n+#undef TARGET_FUNCTION_OK_FOR_SIBCALL\n+#define TARGET_FUNCTION_OK_FOR_SIBCALL xtensa_function_ok_for_sibcall\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n \f\n@@ -2127,6 +2130,20 @@ xtensa_emit_movcc (bool inverted, bool isfp, bool isbool, rtx *operands)\n }\n \n \n+void\n+xtensa_prepare_expand_call (int callop, rtx *operands)\n+{\n+  rtx addr = XEXP (operands[callop], 0);\n+\n+  if (flag_pic && SYMBOL_REF_P (addr)\n+      && (!SYMBOL_REF_LOCAL_P (addr) || SYMBOL_REF_EXTERNAL_P (addr)))\n+    addr = gen_sym_PLT (addr);\n+\n+  if (!call_insn_operand (addr, VOIDmode))\n+    XEXP (operands[callop], 0) = copy_to_mode_reg (Pmode, addr);\n+}\n+\n+\n char *\n xtensa_emit_call (int callop, rtx *operands)\n {\n@@ -2145,6 +2162,24 @@ xtensa_emit_call (int callop, rtx *operands)\n }\n \n \n+char *\n+xtensa_emit_sibcall (int callop, rtx *operands)\n+{\n+  static char result[64];\n+  rtx tgt = operands[callop];\n+\n+  if (GET_CODE (tgt) == CONST_INT)\n+    sprintf (result, \"j.l\\t\" HOST_WIDE_INT_PRINT_HEX \", a9\",\n+\t     INTVAL (tgt));\n+  else if (register_operand (tgt, VOIDmode))\n+    sprintf (result, \"jx\\t%%%d\", callop);\n+  else\n+    sprintf (result, \"j.l\\t%%%d, a9\", callop);\n+\n+  return result;\n+}\n+\n+\n bool\n xtensa_legitimate_address_p (machine_mode mode, rtx addr, bool strict)\n {\n@@ -3270,7 +3305,7 @@ xtensa_expand_prologue (void)\n }\n \n void\n-xtensa_expand_epilogue (void)\n+xtensa_expand_epilogue (bool sibcall_p)\n {\n   if (!TARGET_WINDOWED_ABI)\n     {\n@@ -3304,10 +3339,13 @@ xtensa_expand_epilogue (void)\n \t  if (xtensa_call_save_reg(regno))\n \t    {\n \t      rtx x = gen_rtx_PLUS (Pmode, stack_pointer_rtx, GEN_INT (offset));\n+\t      rtx reg;\n \n \t      offset -= UNITS_PER_WORD;\n-\t      emit_move_insn (gen_rtx_REG (SImode, regno),\n+\t      emit_move_insn (reg = gen_rtx_REG (SImode, regno),\n \t\t\t      gen_frame_mem (SImode, x));\n+\t      if (regno == A0_REG && sibcall_p)\n+\t\temit_use (reg);\n \t    }\n \t}\n \n@@ -3342,7 +3380,8 @@ xtensa_expand_epilogue (void)\n \t\t\t\t  EH_RETURN_STACKADJ_RTX));\n     }\n   cfun->machine->epilogue_done = true;\n-  emit_jump_insn (gen_return ());\n+  if (!sibcall_p)\n+    emit_jump_insn (gen_return ());\n }\n \n bool\n@@ -4869,6 +4908,17 @@ xtensa_asan_shadow_offset (void)\n   return HOST_WIDE_INT_UC (0x10000000);\n }\n \n+/* Implement TARGET_FUNCTION_OK_FOR_SIBCALL.  */\n+static bool\n+xtensa_function_ok_for_sibcall (tree decl ATTRIBUTE_UNUSED, tree exp ATTRIBUTE_UNUSED)\n+{\n+  /* Do not allow sibcalls when windowed registers ABI is in effect.  */\n+  if (TARGET_WINDOWED_ABI)\n+    return false;\n+\n+  return true;\n+}\n+\n static rtx\n xtensa_delegitimize_address (rtx op)\n {"}, {"sha": "3b05166988fe850fc8c079c2ae322c1f1d6ec5b2", "filename": "gcc/config/xtensa/xtensa.md", "status": "modified", "additions": 78, "deletions": 15, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43b0c56fda4bc990e8ee8d6a0b376de7b663bb06/gcc%2Fconfig%2Fxtensa%2Fxtensa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43b0c56fda4bc990e8ee8d6a0b376de7b663bb06/gcc%2Fconfig%2Fxtensa%2Fxtensa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.md?ref=43b0c56fda4bc990e8ee8d6a0b376de7b663bb06", "patch": "@@ -25,6 +25,7 @@\n   (A7_REG\t\t7)\n   (A8_REG\t\t8)\n   (A9_REG\t\t9)\n+  (A10_REG\t\t10)\n \n   (UNSPEC_NOP\t\t2)\n   (UNSPEC_PLT\t\t3)\n@@ -2148,18 +2149,13 @@\n \t (match_operand 1 \"\" \"\"))]\n   \"\"\n {\n-  rtx addr = XEXP (operands[0], 0);\n-  if (flag_pic && GET_CODE (addr) == SYMBOL_REF\n-      && (!SYMBOL_REF_LOCAL_P (addr) || SYMBOL_REF_EXTERNAL_P (addr)))\n-    addr = gen_sym_PLT (addr);\n-  if (!call_insn_operand (addr, VOIDmode))\n-    XEXP (operands[0], 0) = copy_to_mode_reg (Pmode, addr);\n+  xtensa_prepare_expand_call (0, operands);\n })\n \n (define_insn \"call_internal\"\n   [(call (mem (match_operand:SI 0 \"call_insn_operand\" \"nir\"))\n \t (match_operand 1 \"\" \"i\"))]\n-  \"\"\n+  \"!SIBLING_CALL_P (insn)\"\n {\n   return xtensa_emit_call (0, operands);\n }\n@@ -2173,26 +2169,85 @@\n \t      (match_operand 2 \"\" \"\")))]\n   \"\"\n {\n-  rtx addr = XEXP (operands[1], 0);\n-  if (flag_pic && GET_CODE (addr) == SYMBOL_REF\n-      && (!SYMBOL_REF_LOCAL_P (addr) || SYMBOL_REF_EXTERNAL_P (addr)))\n-    addr = gen_sym_PLT (addr);\n-  if (!call_insn_operand (addr, VOIDmode))\n-    XEXP (operands[1], 0) = copy_to_mode_reg (Pmode, addr);\n+  xtensa_prepare_expand_call (1, operands);\n })\n \n (define_insn \"call_value_internal\"\n   [(set (match_operand 0 \"register_operand\" \"=a\")\n         (call (mem (match_operand:SI 1 \"call_insn_operand\" \"nir\"))\n               (match_operand 2 \"\" \"i\")))]\n-  \"\"\n+  \"!SIBLING_CALL_P (insn)\"\n {\n   return xtensa_emit_call (1, operands);\n }\n   [(set_attr \"type\"\t\"call\")\n    (set_attr \"mode\"\t\"none\")\n    (set_attr \"length\"\t\"3\")])\n \n+(define_expand \"sibcall\"\n+  [(call (match_operand 0 \"memory_operand\" \"\")\n+\t (match_operand 1 \"\" \"\"))]\n+  \"!TARGET_WINDOWED_ABI\"\n+{\n+  xtensa_prepare_expand_call (0, operands);\n+})\n+\n+(define_insn \"sibcall_internal\"\n+  [(call (mem:SI (match_operand:SI 0 \"call_insn_operand\" \"nir\"))\n+\t (match_operand 1 \"\" \"i\"))]\n+  \"!TARGET_WINDOWED_ABI && SIBLING_CALL_P (insn)\"\n+{\n+  return xtensa_emit_sibcall (0, operands);\n+}\n+  [(set_attr \"type\"\t\"call\")\n+   (set_attr \"mode\"\t\"none\")\n+   (set_attr \"length\"\t\"3\")])\n+\n+(define_split\n+  [(call (mem:SI (match_operand:SI 0 \"register_operand\"))\n+\t (match_operand 1 \"\"))]\n+  \"reload_completed\n+   && !TARGET_WINDOWED_ABI && SIBLING_CALL_P (insn)\n+   && IN_RANGE (REGNO (operands[0]), 12, 15)\"\n+  [(set (reg:SI A10_REG)\n+\t(match_dup 0))\n+   (call (mem:SI (reg:SI A10_REG))\n+\t (match_dup 1))])\n+\n+(define_expand \"sibcall_value\"\n+  [(set (match_operand 0 \"register_operand\" \"\")\n+\t(call (match_operand 1 \"memory_operand\" \"\")\n+\t      (match_operand 2 \"\" \"\")))]\n+  \"!TARGET_WINDOWED_ABI\"\n+{\n+  xtensa_prepare_expand_call (1, operands);\n+})\n+\n+(define_insn \"sibcall_value_internal\"\n+  [(set (match_operand 0 \"register_operand\" \"=a\")\n+\t(call (mem:SI (match_operand:SI 1 \"call_insn_operand\" \"nir\"))\n+\t      (match_operand 2 \"\" \"i\")))]\n+  \"!TARGET_WINDOWED_ABI && SIBLING_CALL_P (insn)\"\n+{\n+  return xtensa_emit_sibcall (1, operands);\n+}\n+  [(set_attr \"type\"\t\"call\")\n+   (set_attr \"mode\"\t\"none\")\n+   (set_attr \"length\"\t\"3\")])\n+\n+(define_split\n+  [(set (match_operand 0 \"register_operand\")\n+\t(call (mem:SI (match_operand:SI 1 \"register_operand\"))\n+\t      (match_operand 2 \"\")))]\n+  \"reload_completed\n+   && !TARGET_WINDOWED_ABI && SIBLING_CALL_P (insn)\n+   && IN_RANGE (REGNO (operands[1]), 12, 15)\"\n+  [(set (reg:SI A10_REG)\n+\t(match_dup 1))\n+   (set (match_dup 0)\n+\t(call (mem:SI (reg:SI A10_REG))\n+\t      (match_dup 2)))])\n+\n (define_insn \"entry\"\n   [(set (reg:SI A1_REG)\n \t(unspec_volatile:SI [(match_operand:SI 0 \"const_int_operand\" \"i\")]\n@@ -2260,7 +2315,15 @@\n   [(return)]\n   \"\"\n {\n-  xtensa_expand_epilogue ();\n+  xtensa_expand_epilogue (false);\n+  DONE;\n+})\n+\n+(define_expand \"sibcall_epilogue\"\n+  [(return)]\n+  \"!TARGET_WINDOWED_ABI\"\n+{\n+  xtensa_expand_epilogue (true);\n   DONE;\n })\n "}, {"sha": "d2b3fccf1e5ef5bb41b67a9c927fcfae3ab1ff73", "filename": "gcc/testsuite/gcc.target/xtensa/sibcalls.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43b0c56fda4bc990e8ee8d6a0b376de7b663bb06/gcc%2Ftestsuite%2Fgcc.target%2Fxtensa%2Fsibcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43b0c56fda4bc990e8ee8d6a0b376de7b663bb06/gcc%2Ftestsuite%2Fgcc.target%2Fxtensa%2Fsibcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxtensa%2Fsibcalls.c?ref=43b0c56fda4bc990e8ee8d6a0b376de7b663bb06", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mabi=call0 -foptimize-sibling-calls\" } */\n+\n+extern int foo(int);\n+extern void bar(int);\n+\n+int test_0(int a) {\n+    return foo(a);\n+}\n+\n+void test_1(int a) {\n+    bar(a);\n+}\n+\n+int test_2(int (*a)(void)) {\n+    bar(0);\n+    return a();\n+}\n+\n+/* { dg-final { scan-assembler-not \"ret\" } } */"}]}