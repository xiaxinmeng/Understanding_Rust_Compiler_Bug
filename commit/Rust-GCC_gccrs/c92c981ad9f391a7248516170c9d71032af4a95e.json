{"sha": "c92c981ad9f391a7248516170c9d71032af4a95e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzkyYzk4MWFkOWYzOTFhNzI0ODUxNjE3MGM5ZDcxMDMyYWY0YTk1ZQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-03-10T22:11:09Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-03-10T22:11:09Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r429", "tree": {"sha": "544cbef4a89128fd4c09d9b1759030e8e61b9545", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/544cbef4a89128fd4c09d9b1759030e8e61b9545"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c92c981ad9f391a7248516170c9d71032af4a95e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c92c981ad9f391a7248516170c9d71032af4a95e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c92c981ad9f391a7248516170c9d71032af4a95e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c92c981ad9f391a7248516170c9d71032af4a95e/comments", "author": null, "committer": null, "parents": [{"sha": "54a8c4f3fe759a18f618cce735c06e06b6f94afb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54a8c4f3fe759a18f618cce735c06e06b6f94afb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54a8c4f3fe759a18f618cce735c06e06b6f94afb"}], "stats": {"total": 6, "additions": 6, "deletions": 0}, "files": [{"sha": "7b13d209cc2ef7e7e8a83ca5f020949ce5b6980e", "filename": "gcc/machmode.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c92c981ad9f391a7248516170c9d71032af4a95e/gcc%2Fmachmode.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c92c981ad9f391a7248516170c9d71032af4a95e/gcc%2Fmachmode.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmachmode.h?ref=c92c981ad9f391a7248516170c9d71032af4a95e", "patch": "@@ -98,6 +98,12 @@ extern int mode_unit_size[];\n extern enum machine_mode mode_wider_mode[];\n #define GET_MODE_WIDER_MODE(MODE)\t(mode_wider_mode[(int)(MODE)])\n \n+/* Return the mode for data of a given size SIZE and mode class CLASS.\n+   If LIMIT is nonzero, then don't use modes bigger than MAX_FIXED_MODE_SIZE.\n+   The value is BLKmode if no other mode is found.  */\n+\n+extern enum machine_mode mode_for_size ();\n+\n /* Find the best mode to use to access a bit field.  */\n \n extern enum machine_mode get_best_mode ();"}]}