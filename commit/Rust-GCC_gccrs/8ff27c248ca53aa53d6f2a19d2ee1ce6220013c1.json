{"sha": "8ff27c248ca53aa53d6f2a19d2ee1ce6220013c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGZmMjdjMjQ4Y2E1M2FhNTNkNmYyYTE5ZDJlZTFjZTYyMjAwMTNjMQ==", "commit": {"author": {"name": "Victor Kaplansky", "email": "victork@il.ibm.com", "date": "2008-08-26T09:14:37Z"}, "committer": {"name": "Victor Kaplansky", "email": "victork@gcc.gnu.org", "date": "2008-08-26T09:14:37Z"}, "message": "spu.md (vec_extract_evenv4si, [...]): Implement.S\n\n2008-08-26  Victor Kaplansky  <victork@il.ibm.com>\n            Dorit Nuzman  <dorit@il.ibm.com>\n\n        * gcc/config/spu/spu.md (vec_extract_evenv4si,\n        vec_extract_evenv4sf, vec_extract_evenv8hi,\n        vec_extract_evenv16qi, vec_extract_oddv4si,\n        vec_extract_oddv4sf, vec_extract_oddv8hi, vec_extract_oddv16qi,\n        vec_interleave_highv4sf, vec_interleave_lowv4sf,\n        vec_interleave_highv4si, vec_interleave_lowv4si,\n        vec_interleave_highv8hi, vec_interleave_lowv8hi,\n        vec_interleave_highv16qi, vec_interleave_lowv16qi,\n        vec_pack_trunc_v8hi, vec_pack_trunc_v4si): Implement.S\n\nTestsuite\n\n\t* gcc.dg/vect/slp-18.c: Require vect_intfloat_cvt.\n\t* gcc.dg/vect/slp-11.c: Likewise.\n\t* gcc.dg/vect/fast-math-pr35982.c: Likewise.\n\t* lib/target-supports.exp:\n\t(check_effective_target_vect_pack_trunc): Add SPU to the list.\n\t(check_effective_target_vect_extract_even_odd): Likewise.\n\t(check_effective_target_vect_extract_even_odd_wide): Likewise.\n\t(check_effective_target_vect_interleave): Likewise.\n\n\nCo-Authored-By: Dorit Nuzman <dorit@il.ibm.com>\n\nFrom-SVN: r139589", "tree": {"sha": "e075a664cb8c5d01803dd4b6bb675f6d315b52a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e075a664cb8c5d01803dd4b6bb675f6d315b52a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ff27c248ca53aa53d6f2a19d2ee1ce6220013c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ff27c248ca53aa53d6f2a19d2ee1ce6220013c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ff27c248ca53aa53d6f2a19d2ee1ce6220013c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ff27c248ca53aa53d6f2a19d2ee1ce6220013c1/comments", "author": null, "committer": null, "parents": [{"sha": "77b31725ed9a1f05e8b72ddf098ffdfecfd3afc4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77b31725ed9a1f05e8b72ddf098ffdfecfd3afc4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77b31725ed9a1f05e8b72ddf098ffdfecfd3afc4"}], "stats": {"total": 511, "additions": 506, "deletions": 5}, "files": [{"sha": "7aae9b1696d7ba095b2f39f70915e1be08120fc4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ff27c248ca53aa53d6f2a19d2ee1ce6220013c1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ff27c248ca53aa53d6f2a19d2ee1ce6220013c1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8ff27c248ca53aa53d6f2a19d2ee1ce6220013c1", "patch": "@@ -1,3 +1,16 @@\n+2008-08-26  Victor Kaplansky  <victork@il.ibm.com>\n+\t    Dorit Nuzman  <dorit@il.ibm.com>\n+\n+\t* gcc/config/spu/spu.md (vec_extract_evenv4si,\n+\tvec_extract_evenv4sf, vec_extract_evenv8hi,\n+\tvec_extract_evenv16qi, vec_extract_oddv4si,\n+\tvec_extract_oddv4sf, vec_extract_oddv8hi, vec_extract_oddv16qi,\n+\tvec_interleave_highv4sf, vec_interleave_lowv4sf,\n+\tvec_interleave_highv4si, vec_interleave_lowv4si,\n+\tvec_interleave_highv8hi, vec_interleave_lowv8hi,\n+\tvec_interleave_highv16qi, vec_interleave_lowv16qi,\n+\tvec_pack_trunc_v8hi, vec_pack_trunc_v4si): Implement.S\n+\n 2008-08-25  Janis Johnson  <janis187@us.ibm.com>\n \n \tPR target/36756"}, {"sha": "89f2109ceb3816aa6e71d6c6ca495eb91c7b96a6", "filename": "gcc/config/spu/spu.md", "status": "modified", "additions": 470, "deletions": 0, "changes": 470, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ff27c248ca53aa53d6f2a19d2ee1ce6220013c1/gcc%2Fconfig%2Fspu%2Fspu.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ff27c248ca53aa53d6f2a19d2ee1ce6220013c1/gcc%2Fconfig%2Fspu%2Fspu.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.md?ref=8ff27c248ca53aa53d6f2a19d2ee1ce6220013c1", "patch": "@@ -4757,6 +4757,476 @@ DONE;\n DONE;\n })\n \n+\f\n+(define_expand \"vec_extract_evenv4si\"\n+ [(set (match_operand:V4SI 0 \"spu_reg_operand\" \"=r\")\n+       (vec_concat:V4SI\n+         (vec_select:V2SI\n+\t   (match_operand:V4SI 1 \"spu_reg_operand\" \"r\")\n+\t   (parallel [(const_int 0)(const_int 2)]))\n+         (vec_select:V2SI\n+\t   (match_operand:V4SI 2 \"spu_reg_operand\" \"r\")\n+\t   (parallel [(const_int 0)(const_int 2)]))))]\n+ \n+  \"\"\n+  \"\n+{\n+  rtx mask = gen_reg_rtx (TImode);\n+  unsigned char arr[16] = {\n+\t0x00, 0x01, 0x02, 0x03,\n+ \t0x08, 0x09, 0x0A, 0x0B,\n+ \t0x10, 0x11, 0x12, 0x13,\n+ \t0x18, 0x19, 0x1A, 0x1B};\t\n+ \n+  emit_move_insn (mask, array_to_constant (TImode, arr));\n+  emit_insn (gen_shufb (operands[0], operands[1], operands[2], mask));\n+  DONE;\n+}\")\n+\n+ \n+(define_expand \"vec_extract_evenv4sf\"\n+ [(set (match_operand:V4SF 0 \"spu_reg_operand\" \"=r\")\n+       (vec_concat:V4SF\n+         (vec_select:V2SF\n+\t   (match_operand:V4SF 1 \"spu_reg_operand\" \"r\")\n+\t   (parallel [(const_int 0)(const_int 2)]))\n+         (vec_select:V2SF\n+\t   (match_operand:V4SF 2 \"spu_reg_operand\" \"r\")\n+\t   (parallel [(const_int 0)(const_int 2)]))))]\n+ \n+  \"\"\n+  \"\n+{\n+  rtx mask = gen_reg_rtx (TImode);\n+  unsigned char arr[16] = {\n+        0x00, 0x01, 0x02, 0x03,\n+        0x08, 0x09, 0x0A, 0x0B,\n+        0x10, 0x11, 0x12, 0x13,\n+        0x18, 0x19, 0x1A, 0x1B};\n+\n+  emit_move_insn (mask, array_to_constant (TImode, arr));\n+  emit_insn (gen_shufb (operands[0], operands[1], operands[2], mask));\n+  DONE;\n+}\")\n+ \n+(define_expand \"vec_extract_evenv8hi\"\n+ [(set (match_operand:V8HI 0 \"spu_reg_operand\" \"=r\")\n+       (vec_concat:V8HI\n+         (vec_select:V4HI\n+\t   (match_operand:V8HI 1 \"spu_reg_operand\" \"r\")\n+\t   (parallel [(const_int 0)(const_int 2)(const_int 4)(const_int 6)]))\n+         (vec_select:V4HI\n+\t   (match_operand:V8HI 2 \"spu_reg_operand\" \"r\")\n+\t   (parallel [(const_int 0)(const_int 2)(const_int 4)(const_int 6)]))))]\n+ \n+  \"\"\n+  \"\n+{\n+  rtx mask = gen_reg_rtx (TImode);\n+  unsigned char arr[16] = {\n+        0x00, 0x01, 0x04, 0x05,\n+        0x08, 0x09, 0x0C, 0x0D,\n+        0x10, 0x11, 0x14, 0x15,\n+        0x18, 0x19, 0x1C, 0x1D};\n+\n+  emit_move_insn (mask, array_to_constant (TImode, arr));\n+  emit_insn (gen_shufb (operands[0], operands[1], operands[2], mask));\n+  DONE;\n+}\")\n+ \n+(define_expand \"vec_extract_evenv16qi\"\n+ [(set (match_operand:V16QI 0 \"spu_reg_operand\" \"=r\")\n+       (vec_concat:V16QI\n+         (vec_select:V8QI\n+\t   (match_operand:V16QI 1 \"spu_reg_operand\" \"r\")\n+\t   (parallel [(const_int 0)(const_int 2)(const_int 4)(const_int 6)\n+\t\t      (const_int 8)(const_int 10)(const_int 12)(const_int 14)]))\n+         (vec_select:V8QI\n+\t   (match_operand:V16QI 2 \"spu_reg_operand\" \"r\")\n+\t   (parallel [(const_int 0)(const_int 2)(const_int 4)(const_int 6)\n+\t\t      (const_int 8)(const_int 10)(const_int 12)(const_int 14)]))))]\n+ \n+  \"\"\n+  \"\n+{\n+  rtx mask = gen_reg_rtx (TImode);\n+  unsigned char arr[16] = {\n+        0x00, 0x02, 0x04, 0x06,\n+        0x08, 0x0A, 0x0C, 0x0E,\n+        0x10, 0x12, 0x14, 0x16,\n+        0x18, 0x1A, 0x1C, 0x1E};\n+\n+  emit_move_insn (mask, array_to_constant (TImode, arr));\n+  emit_insn (gen_shufb (operands[0], operands[1], operands[2], mask));\n+  DONE;\n+}\")\n+ \n+(define_expand \"vec_extract_oddv4si\"\n+ [(set (match_operand:V4SI 0 \"spu_reg_operand\" \"=r\")\n+       (vec_concat:V4SI\n+         (vec_select:V2SI\n+\t   (match_operand:V4SI 1 \"spu_reg_operand\" \"r\")\n+\t   (parallel [(const_int 1)(const_int 3)]))\n+         (vec_select:V2SI\n+\t   (match_operand:V4SI 2 \"spu_reg_operand\" \"r\")\n+\t   (parallel [(const_int 1)(const_int 3)]))))]\n+ \n+  \"\"\n+  \"\n+{\n+  rtx mask = gen_reg_rtx (TImode);\n+  unsigned char arr[16] = {\n+        0x04, 0x05, 0x06, 0x07,\n+        0x0C, 0x0D, 0x0E, 0x0F,\n+        0x14, 0x15, 0x16, 0x17,\n+        0x1C, 0x1D, 0x1E, 0x1F};\n+\n+  emit_move_insn (mask, array_to_constant (TImode, arr));\n+  emit_insn (gen_shufb (operands[0], operands[1], operands[2], mask));\n+  DONE;\n+}\")\n+ \n+(define_expand \"vec_extract_oddv4sf\"\n+ [(set (match_operand:V4SF 0 \"spu_reg_operand\" \"=r\")\n+       (vec_concat:V4SF\n+         (vec_select:V2SF\n+\t   (match_operand:V4SF 1 \"spu_reg_operand\" \"r\")\n+\t   (parallel [(const_int 1)(const_int 3)]))\n+         (vec_select:V2SF\n+\t   (match_operand:V4SF 2 \"spu_reg_operand\" \"r\")\n+\t   (parallel [(const_int 1)(const_int 3)]))))]\n+ \n+  \"\"\n+  \"\n+{\n+  rtx mask = gen_reg_rtx (TImode);\n+  unsigned char arr[16] = {\n+        0x04, 0x05, 0x06, 0x07,\n+        0x0C, 0x0D, 0x0E, 0x0F,\n+        0x14, 0x15, 0x16, 0x17,\n+        0x1C, 0x1D, 0x1E, 0x1F};\n+\n+  emit_move_insn (mask, array_to_constant (TImode, arr));\n+  emit_insn (gen_shufb (operands[0], operands[1], operands[2], mask));\n+  DONE;\n+}\")\n+\n+(define_expand \"vec_extract_oddv8hi\"\n+ [(set (match_operand:V8HI 0 \"spu_reg_operand\" \"=r\")\n+       (vec_concat:V8HI\n+         (vec_select:V4HI\n+\t   (match_operand:V8HI 1 \"spu_reg_operand\" \"r\")\n+\t   (parallel [(const_int 1)(const_int 3)(const_int 5)(const_int 7)]))\n+         (vec_select:V4HI\n+\t   (match_operand:V8HI 2 \"spu_reg_operand\" \"r\")\n+\t   (parallel [(const_int 1)(const_int 3)(const_int 5)(const_int 7)]))))]\n+ \n+  \"\"\n+  \"\n+{\n+  rtx mask = gen_reg_rtx (TImode);\n+  unsigned char arr[16] = {\n+        0x02, 0x03, 0x06, 0x07,\n+        0x0A, 0x0B, 0x0E, 0x0F,\n+        0x12, 0x13, 0x16, 0x17,\n+        0x1A, 0x1B, 0x1E, 0x1F};\n+\n+  emit_move_insn (mask, array_to_constant (TImode, arr));\n+  emit_insn (gen_shufb (operands[0], operands[1], operands[2], mask));\n+  DONE;\n+}\")\n+ \n+(define_expand \"vec_extract_oddv16qi\"\n+ [(set (match_operand:V16QI 0 \"spu_reg_operand\" \"=r\")\n+       (vec_concat:V16QI\n+         (vec_select:V8QI\n+\t   (match_operand:V16QI 1 \"spu_reg_operand\" \"r\")\n+\t   (parallel [(const_int 1)(const_int 3)(const_int 5)(const_int 7)\n+\t\t      (const_int 9)(const_int 11)(const_int 13)(const_int 15)]))\n+         (vec_select:V8QI\n+\t   (match_operand:V16QI 2 \"spu_reg_operand\" \"r\")\n+\t   (parallel [(const_int 1)(const_int 3)(const_int 5)(const_int 7)\n+\t\t      (const_int 9)(const_int 11)(const_int 13)(const_int 15)]))))]\n+ \n+  \"\"\n+  \"\n+{\n+  rtx mask = gen_reg_rtx (TImode);\n+  unsigned char arr[16] = {\n+        0x01, 0x03, 0x05, 0x07,\n+        0x09, 0x0B, 0x0D, 0x0F,\n+        0x11, 0x13, 0x15, 0x17,\n+        0x19, 0x1B, 0x1D, 0x1F};\n+\n+  emit_move_insn (mask, array_to_constant (TImode, arr));\n+  emit_insn (gen_shufb (operands[0], operands[1], operands[2], mask));\n+  DONE;\n+}\")\n+ \n+(define_expand \"vec_interleave_highv4sf\"\n+ [(set (match_operand:V4SF 0 \"spu_reg_operand\" \"=r\")\n+       (vec_select:V4SF\n+         (vec_concat:V4SF\n+           (vec_select:V2SF\n+\t     (match_operand:V4SF 1 \"spu_reg_operand\" \"r\")\n+\t     (parallel [(const_int 0)(const_int 1)]))\n+           (vec_select:V2SF\n+\t     (match_operand:V4SF 2 \"spu_reg_operand\" \"r\")\n+\t     (parallel [(const_int 0)(const_int 1)])))\n+\t (parallel [(const_int 0)(const_int 2)(const_int 1)(const_int 3)])))]\n+ \n+  \"\"\n+  \"\n+{\n+  rtx mask = gen_reg_rtx (TImode);\n+  unsigned char arr[16] = {\n+        0x00, 0x01, 0x02, 0x03,\n+        0x10, 0x11, 0x12, 0x13,\n+        0x04, 0x05, 0x06, 0x07,\n+        0x14, 0x15, 0x16, 0x17};\n+\n+  emit_move_insn (mask, array_to_constant (TImode, arr));\n+  emit_insn (gen_shufb (operands[0], operands[1], operands[2], mask));\n+  DONE;\n+}\")\n \n+(define_expand \"vec_interleave_lowv4sf\"\n+ [(set (match_operand:V4SF 0 \"spu_reg_operand\" \"=r\")\n+       (vec_select:V4SF\n+         (vec_concat:V4SF\n+           (vec_select:V2SF\n+\t     (match_operand:V4SF 1 \"spu_reg_operand\" \"r\")\n+\t     (parallel [(const_int 2)(const_int 3)]))\n+           (vec_select:V2SF\n+\t     (match_operand:V4SF 2 \"spu_reg_operand\" \"r\")\n+\t     (parallel [(const_int 2)(const_int 3)])))\n+\t (parallel [(const_int 0)(const_int 2)(const_int 1)(const_int 3)])))]\n+ \n+  \"\"\n+  \"\n+{\n+  rtx mask = gen_reg_rtx (TImode);\n+  unsigned char arr[16] = {\n+        0x08, 0x09, 0x0A, 0x0B,\n+        0x18, 0x19, 0x1A, 0x1B,\n+        0x0C, 0x0D, 0x0E, 0x0F,\n+        0x1C, 0x1D, 0x1E, 0x1F};\n+\n+  emit_move_insn (mask, array_to_constant (TImode, arr));\n+  emit_insn (gen_shufb (operands[0], operands[1], operands[2], mask));\n+  DONE;\n+}\")\n+ \n+(define_expand \"vec_interleave_highv4si\"\n+ [(set (match_operand:V4SI 0 \"spu_reg_operand\" \"=r\")\n+       (vec_select:V4SI\n+         (vec_concat:V4SI\n+           (vec_select:V2SI\n+\t     (match_operand:V4SI 1 \"spu_reg_operand\" \"r\")\n+\t     (parallel [(const_int 0)(const_int 1)]))\n+           (vec_select:V2SI\n+\t     (match_operand:V4SI 2 \"spu_reg_operand\" \"r\")\n+\t     (parallel [(const_int 0)(const_int 1)])))\n+\t (parallel [(const_int 0)(const_int 2)(const_int 1)(const_int 3)])))]\n+ \n+  \"\"\n+  \"\n+{\n+  rtx mask = gen_reg_rtx (TImode);\n+  unsigned char arr[16] = {\n+\t0x00, 0x01, 0x02, 0x03,\n+\t0x10, 0x11, 0x12, 0x13,\n+ \t0x04, 0x05, 0x06, 0x07,\n+ \t0x14, 0x15, 0x16, 0x17};\n+ \n+  emit_move_insn (mask, array_to_constant (TImode, arr));\n+  emit_insn (gen_shufb (operands[0], operands[1], operands[2], mask));\n+  DONE;\n+}\")\n+\n+(define_expand \"vec_interleave_lowv4si\"\n+ [(set (match_operand:V4SI 0 \"spu_reg_operand\" \"=r\")\n+       (vec_select:V4SI\n+         (vec_concat:V4SI\n+           (vec_select:V2SI\n+\t     (match_operand:V4SI 1 \"spu_reg_operand\" \"r\")\n+\t     (parallel [(const_int 2)(const_int 3)]))\n+           (vec_select:V2SI\n+\t     (match_operand:V4SI 2 \"spu_reg_operand\" \"r\")\n+\t     (parallel [(const_int 2)(const_int 3)])))\n+\t (parallel [(const_int 0)(const_int 2)(const_int 1)(const_int 3)])))]\n+ \n+  \"\"\n+  \"\n+{\n+  rtx mask = gen_reg_rtx (TImode);\n+  unsigned char arr[16] = {\n+        0x08, 0x09, 0x0A, 0x0B,\n+        0x18, 0x19, 0x1A, 0x1B,\n+        0x0C, 0x0D, 0x0E, 0x0F,\n+        0x1C, 0x1D, 0x1E, 0x1F};\n+\n+  emit_move_insn (mask, array_to_constant (TImode, arr));\n+  emit_insn (gen_shufb (operands[0], operands[1], operands[2], mask));\n+  DONE;\n+}\")\n+ \n+(define_expand \"vec_interleave_highv8hi\"\n+ [(set (match_operand:V8HI 0 \"spu_reg_operand\" \"=r\")\n+       (vec_select:V8HI\n+         (vec_concat:V8HI\n+           (vec_select:V4HI\n+\t     (match_operand:V8HI 1 \"spu_reg_operand\" \"r\")\n+\t     (parallel [(const_int 0)(const_int 1)(const_int 2)(const_int 3)]))\n+           (vec_select:V4HI\n+\t     (match_operand:V8HI 2 \"spu_reg_operand\" \"r\")\n+\t     (parallel [(const_int 0)(const_int 1)(const_int 2)(const_int 3)])))\n+\t (parallel [(const_int 0)(const_int 4)(const_int 1)(const_int 5)\n+\t\t    (const_int 2)(const_int 6)(const_int 3)(const_int 7)])))]\n+ \n+  \"\"\n+  \"\n+{\n+  rtx mask = gen_reg_rtx (TImode);\n+  unsigned char arr[16] = {\n+        0x00, 0x01, 0x10, 0x11,\n+        0x02, 0x03, 0x12, 0x13,\n+        0x04, 0x05, 0x14, 0x15,\n+        0x06, 0x07, 0x16, 0x17};\n+ \n+  emit_move_insn (mask, array_to_constant (TImode, arr));\n+  emit_insn (gen_shufb (operands[0], operands[1], operands[2], mask));\n+  DONE;\n+ }\")\n+ \n+(define_expand \"vec_interleave_lowv8hi\"\n+ [(set (match_operand:V8HI 0 \"spu_reg_operand\" \"=r\")\n+       (vec_select:V8HI\n+         (vec_concat:V8HI\n+           (vec_select:V4HI\n+\t     (match_operand:V8HI 1 \"spu_reg_operand\" \"r\")\n+\t     (parallel [(const_int 4)(const_int 5)(const_int 6)(const_int 7)]))\n+           (vec_select:V4HI\n+\t     (match_operand:V8HI 2 \"spu_reg_operand\" \"r\")\n+\t     (parallel [(const_int 4)(const_int 5)(const_int 6)(const_int 7)])))\n+\t (parallel [(const_int 0)(const_int 4)(const_int 1)(const_int 5)\n+\t\t    (const_int 2)(const_int 6)(const_int 3)(const_int 7)])))]\n+ \n+  \"\"\n+  \"\n+{\n+  rtx mask = gen_reg_rtx (TImode);\n+  unsigned char arr[16] = {\n+        0x08, 0x09, 0x18, 0x19,\n+        0x0A, 0x0B, 0x1A, 0x1B,\n+        0x0C, 0x0D, 0x1C, 0x1D,\n+        0x0E, 0x0F, 0x1E, 0x1F};\n+\n+  emit_move_insn (mask, array_to_constant (TImode, arr));\n+  emit_insn (gen_shufb (operands[0], operands[1], operands[2], mask));\n+  DONE;\n+}\")\n+ \n+(define_expand \"vec_interleave_highv16qi\"\n+ [(set (match_operand:V16QI 0 \"spu_reg_operand\" \"=r\")\n+       (vec_select:V16QI\n+         (vec_concat:V16QI\n+           (vec_select:V8QI\n+\t     (match_operand:V16QI 1 \"spu_reg_operand\" \"r\")\n+\t     (parallel [(const_int 0)(const_int 1)(const_int 2)(const_int 3)\n+\t\t        (const_int 4)(const_int 5)(const_int 6)(const_int 7)]))\n+           (vec_select:V8QI\n+\t     (match_operand:V16QI 2 \"spu_reg_operand\" \"r\")\n+\t     (parallel [(const_int 0)(const_int 1)(const_int 2)(const_int 3)\n+\t\t        (const_int 4)(const_int 5)(const_int 6)(const_int 7)])))\n+\t (parallel [(const_int 0)(const_int 8)(const_int 1)(const_int 9)\n+\t\t    (const_int 2)(const_int 10)(const_int 3)(const_int 11)\n+\t\t    (const_int 4)(const_int 12)(const_int 5)(const_int 13)\n+\t\t    (const_int 6)(const_int 14)(const_int 7)(const_int 15)])))]\n+ \n+  \"\"\n+  \"\n+{\n+  rtx mask = gen_reg_rtx (TImode);\n+  unsigned char arr[16] = {\n+        0x00, 0x10, 0x01, 0x11,\n+        0x02, 0x12, 0x03, 0x13,\n+        0x04, 0x14, 0x05, 0x15,\n+        0x06, 0x16, 0x07, 0x17};\n+ \n+  emit_move_insn (mask, array_to_constant (TImode, arr));\n+  emit_insn (gen_shufb (operands[0], operands[1], operands[2], mask));\n+  DONE;\n+}\")\n+ \n+(define_expand \"vec_interleave_lowv16qi\"\n+ [(set (match_operand:V16QI 0 \"spu_reg_operand\" \"=r\")\n+       (vec_select:V16QI\n+         (vec_concat:V16QI\n+           (vec_select:V8QI\n+\t     (match_operand:V16QI 1 \"spu_reg_operand\" \"r\")\n+\t     (parallel [(const_int 8)(const_int 9)(const_int 10)(const_int 11)\n+\t\t        (const_int 12)(const_int 13)(const_int 14)(const_int 15)]))\n+           (vec_select:V8QI\n+\t     (match_operand:V16QI 2 \"spu_reg_operand\" \"r\")\n+\t     (parallel [(const_int 8)(const_int 9)(const_int 10)(const_int 11)\n+\t\t        (const_int 12)(const_int 13)(const_int 14)(const_int 15)])))\n+\t (parallel [(const_int 0)(const_int 8)(const_int 1)(const_int 9)\n+\t\t    (const_int 2)(const_int 10)(const_int 3)(const_int 11)\n+\t\t    (const_int 4)(const_int 12)(const_int 5)(const_int 13)\n+\t\t    (const_int 6)(const_int 14)(const_int 7)(const_int 15)])))]\n+ \n+  \"\"\n+  \"\n+{\n+  rtx mask = gen_reg_rtx (TImode);\n+  unsigned char arr[16] = {\n+         0x08, 0x18, 0x09, 0x19,\n+         0x0A, 0x1A, 0x0B, 0x1B,\n+         0x0C, 0x1C, 0x0D, 0x1D,\n+         0x0E, 0x1E, 0x0F, 0x1F};\n+ \n+  emit_move_insn (mask, array_to_constant (TImode, arr));\n+  emit_insn (gen_shufb (operands[0], operands[1], operands[2], mask));\n+  DONE;\n+}\")\n+\n+(define_expand \"vec_pack_trunc_v8hi\"\n+  [(set (match_operand:V16QI 0 \"spu_reg_operand\" \"=r\")\n+\t(vec_concat:V16QI\n+          (truncate:V8QI (match_operand:V8HI 1 \"spu_reg_operand\" \"r\"))\n+          (truncate:V8QI (match_operand:V8HI 2 \"spu_reg_operand\" \"r\"))))]\n+  \"\"\n+  \"\n+{\n+  rtx mask = gen_reg_rtx (TImode);\n+  unsigned char arr[16] = {\n+    0x01, 0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F,\n+    0x11, 0x13, 0x15, 0x17, 0x19, 0x1B, 0x1D, 0x1F};\n+\n+  emit_move_insn (mask, array_to_constant (TImode, arr));\n+  emit_insn (gen_shufb (operands[0], operands[1], operands[2], mask));\n+\n+  DONE;\n+}\")\n+\n+(define_expand \"vec_pack_trunc_v4si\"\n+  [(set (match_operand:V8HI 0 \"spu_reg_operand\" \"=r\")\n+\t(vec_concat:V8HI\n+          (truncate:V4HI (match_operand:V4SI 1 \"spu_reg_operand\" \"r\"))\n+          (truncate:V4HI (match_operand:V4SI 2 \"spu_reg_operand\" \"r\"))))]\n+  \"\"\n+  \"\n+{\n+  rtx mask = gen_reg_rtx (TImode);\n+  unsigned char arr[16] = {\n+    0x02, 0x03, 0x06, 0x07, 0x0A, 0x0B, 0x0E, 0x0F,\n+    0x12, 0x13, 0x16, 0x17, 0x1A, 0x1B, 0x1E, 0x1F};\n+\n+  emit_move_insn (mask, array_to_constant (TImode, arr));\n+  emit_insn (gen_shufb (operands[0], operands[1], operands[2], mask));\n+\n+  DONE;\n+}\")\n \n "}, {"sha": "2df0ac8a71b9cf1dbc1d025ae4cbb99e90bb440f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ff27c248ca53aa53d6f2a19d2ee1ce6220013c1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ff27c248ca53aa53d6f2a19d2ee1ce6220013c1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8ff27c248ca53aa53d6f2a19d2ee1ce6220013c1", "patch": "@@ -1,3 +1,14 @@\n+2008-08-26  Victor Kaplansky  <victork@il.ibm.com>\n+\n+\t* gcc.dg/vect/slp-18.c: Require vect_intfloat_cvt.\n+\t* gcc.dg/vect/slp-11.c: Likewise.\n+\t* gcc.dg/vect/fast-math-pr35982.c: Likewise.\n+\t* lib/target-supports.exp:\n+\t(check_effective_target_vect_pack_trunc): Add SPU to the list.\n+\t(check_effective_target_vect_extract_even_odd): Likewise.\n+\t(check_effective_target_vect_extract_even_odd_wide): Likewise.\n+\t(check_effective_target_vect_interleave): Likewise.\n+\n 2008-08-25  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n \t    Andrew Pinski  <andrew_pinski@playstation.sony.com>\n "}, {"sha": "6a01782bb3db4cc85c3790201894509e75bee6f9", "filename": "gcc/testsuite/gcc.dg/vect/fast-math-pr35982.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ff27c248ca53aa53d6f2a19d2ee1ce6220013c1/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ffast-math-pr35982.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ff27c248ca53aa53d6f2a19d2ee1ce6220013c1/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ffast-math-pr35982.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ffast-math-pr35982.c?ref=8ff27c248ca53aa53d6f2a19d2ee1ce6220013c1", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do compile } */\n /* { dg-require-effective-target vect_float } */\n /* { dg-require-effective-target vect_int } */\n+/* { dg-require-effective-target vect_intfloat_cvt } */\n \n struct mem \n {"}, {"sha": "1e87eef43440bdcb07e7a2a22b5dcf6e0361c007", "filename": "gcc/testsuite/gcc.dg/vect/slp-11.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ff27c248ca53aa53d6f2a19d2ee1ce6220013c1/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ff27c248ca53aa53d6f2a19d2ee1ce6220013c1/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-11.c?ref=8ff27c248ca53aa53d6f2a19d2ee1ce6220013c1", "patch": "@@ -106,7 +106,8 @@ int main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 3 loops\" 1 \"vect\"  { target { vect_strided_wide &&  vect_int_mult } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 3 loops\" 1 \"vect\"  { target { { vect_intfloat_cvt && vect_strided_wide } &&  vect_int_mult } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\"  { target { { { ! vect_intfloat_cvt } && vect_strided_wide } &&  vect_int_mult } } } } */\n /* { dg-final { scan-tree-dump-times \"vectorized 0 loops\" 1 \"vect\"  {target  { ! { vect_int_mult && vect_strided_wide } } } } }  */\n /* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 0  \"vect\"  } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "91e1e114c1be8e71d9a94107a483959d835664e4", "filename": "gcc/testsuite/gcc.dg/vect/slp-18.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ff27c248ca53aa53d6f2a19d2ee1ce6220013c1/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ff27c248ca53aa53d6f2a19d2ee1ce6220013c1/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-18.c?ref=8ff27c248ca53aa53d6f2a19d2ee1ce6220013c1", "patch": "@@ -1,4 +1,5 @@\n /* { dg-require-effective-target vect_int } */\n+/* { dg-require-effective-target vect_intfloat_cvt } */\n \n #include <stdarg.h>\n #include <stdio.h>"}, {"sha": "69c8ea438c654da89295dfaab1f28a8c2d813d3f", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ff27c248ca53aa53d6f2a19d2ee1ce6220013c1/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ff27c248ca53aa53d6f2a19d2ee1ce6220013c1/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=8ff27c248ca53aa53d6f2a19d2ee1ce6220013c1", "patch": "@@ -1830,7 +1830,8 @@ proc check_effective_target_vect_pack_trunc { } {\n         set et_vect_pack_trunc_saved 0\n         if { ([istarget powerpc*-*-*] && ![istarget powerpc-*-linux*paired*])\n              || [istarget i?86-*-*]\n-             || [istarget x86_64-*-*] } {\n+             || [istarget x86_64-*-*]\n+             || [istarget spu-*-*] } {\n             set et_vect_pack_trunc_saved 1\n         }\n     }\n@@ -2101,7 +2102,8 @@ proc check_effective_target_vect_extract_even_odd { } {\n         verbose \"check_effective_target_vect_extract_even_odd: using cached result\" 2\n     } else {\n         set et_vect_extract_even_odd_saved 0 \n-        if { [istarget powerpc*-*-*] } {\n+        if { [istarget powerpc*-*-*]\n+             || [istarget spu-*-*] } {\n            set et_vect_extract_even_odd_saved 1\n         }\n     }\n@@ -2122,7 +2124,8 @@ proc check_effective_target_vect_extract_even_odd_wide { } {\n         set et_vect_extract_even_odd_wide_saved 0 \n         if { [istarget powerpc*-*-*] \n              || [istarget i?86-*-*]\n-             || [istarget x86_64-*-*] } {\n+             || [istarget x86_64-*-*]\n+             || [istarget spu-*-*] } {\n            set et_vect_extract_even_odd_wide_saved 1\n         }\n     }\n@@ -2142,7 +2145,8 @@ proc check_effective_target_vect_interleave { } {\n         set et_vect_interleave_saved 0\n         if { [istarget powerpc*-*-*]\n              || [istarget i?86-*-*]\n-             || [istarget x86_64-*-*] } {\n+             || [istarget x86_64-*-*]\n+             || [istarget spu-*-*] } {\n            set et_vect_interleave_saved 1\n         }\n     }"}]}