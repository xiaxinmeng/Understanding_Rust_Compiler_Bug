{"sha": "37369edcc9531367872341c4bb074299949910c2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzczNjllZGNjOTUzMTM2Nzg3MjM0MWM0YmIwNzQyOTk5NDk5MTBjMg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-07-09T03:36:31Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-07-09T03:36:31Z"}, "message": "builtins.c (std_gimplify_va_arg_expr): Hoist valist into a temporary.\n\n        * builtins.c (std_gimplify_va_arg_expr): Hoist valist into a\n        temporary.  Use bit arithmetic to align.\n\nFrom-SVN: r84342", "tree": {"sha": "895500f09c8813b2569fa3d6e2795d630de50ca9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/895500f09c8813b2569fa3d6e2795d630de50ca9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/37369edcc9531367872341c4bb074299949910c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37369edcc9531367872341c4bb074299949910c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37369edcc9531367872341c4bb074299949910c2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37369edcc9531367872341c4bb074299949910c2/comments", "author": null, "committer": null, "parents": [{"sha": "4b4bf9414ffd808a7f93bb518cae543b4df45199", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b4bf9414ffd808a7f93bb518cae543b4df45199", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b4bf9414ffd808a7f93bb518cae543b4df45199"}], "stats": {"total": 45, "additions": 23, "deletions": 22}, "files": [{"sha": "bfeb09aeab33693313dead431f4f070b2e32971e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37369edcc9531367872341c4bb074299949910c2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37369edcc9531367872341c4bb074299949910c2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=37369edcc9531367872341c4bb074299949910c2", "patch": "@@ -1,3 +1,8 @@\n+2004-07-08  Richard Henderson  <rth@redhat.com>\n+\n+\t* builtins.c (std_gimplify_va_arg_expr): Hoist valist into a\n+\ttemporary.  Use bit arithmetic to align.\n+\n 2004-07-08  Jerry Quinn  <jlquinn@optonline.net>\n \n \t* alias.c (nonlocal_mentioned_p, nonlocal_referenced_p,"}, {"sha": "ecb7841ec6d8848963f6831860a6718a0f09a1fc", "filename": "gcc/builtins.c", "status": "modified", "additions": 18, "deletions": 22, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37369edcc9531367872341c4bb074299949910c2/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37369edcc9531367872341c4bb074299949910c2/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=37369edcc9531367872341c4bb074299949910c2", "patch": "@@ -4474,33 +4474,35 @@ tree\n std_gimplify_va_arg_expr (tree valist, tree type, tree *pre_p, tree *post_p)\n {\n   tree addr, t, type_size = NULL;\n-  tree align, alignm1;\n+  tree align, alignm1, malign;\n   tree rounded_size;\n+  tree valist_tmp;\n   HOST_WIDE_INT boundary;\n \n   /* Compute the rounded size of the type.  */\n   align = size_int (PARM_BOUNDARY / BITS_PER_UNIT);\n   alignm1 = size_int (PARM_BOUNDARY / BITS_PER_UNIT - 1);\n+  malign = size_int (-(PARM_BOUNDARY / BITS_PER_UNIT));\n   boundary = FUNCTION_ARG_BOUNDARY (TYPE_MODE (type), type);\n \n+  valist_tmp = get_initialized_tmp_var (valist, pre_p, NULL);\n+\n   /* va_list pointer is aligned to PARM_BOUNDARY.  If argument actually\n      requires greater alignment, we must perform dynamic alignment.  */\n \n   if (boundary > PARM_BOUNDARY)\n     {\n       if (!PAD_VARARGS_DOWN)\n \t{\n-\t  t = build2 (MODIFY_EXPR, TREE_TYPE (valist), valist,\n-\t\t      build2 (PLUS_EXPR, TREE_TYPE (valist), valist,\n+\t  t = build2 (MODIFY_EXPR, TREE_TYPE (valist), valist_tmp,\n+\t\t      build2 (PLUS_EXPR, TREE_TYPE (valist), valist_tmp,\n \t\t\t      build_int_2 (boundary / BITS_PER_UNIT - 1, 0)));\n-\t  gimplify_stmt (&t);\n-\t  append_to_statement_list (t, pre_p);\n+\t  gimplify_and_add (t, pre_p);\n \t}\n-      t = build2 (MODIFY_EXPR, TREE_TYPE (valist), valist,\n-\t\t  build2 (BIT_AND_EXPR, TREE_TYPE (valist), valist,\n+      t = build2 (MODIFY_EXPR, TREE_TYPE (valist), valist_tmp,\n+\t\t  build2 (BIT_AND_EXPR, TREE_TYPE (valist), valist_tmp,\n \t\t\t  build_int_2 (~(boundary / BITS_PER_UNIT - 1), -1)));\n-      gimplify_stmt (&t);\n-      append_to_statement_list (t, pre_p);\n+      gimplify_and_add (t, pre_p);\n     }\n   if (type == error_mark_node\n       || (type_size = TYPE_SIZE_UNIT (TYPE_MAIN_VARIANT (type))) == NULL\n@@ -4509,17 +4511,15 @@ std_gimplify_va_arg_expr (tree valist, tree type, tree *pre_p, tree *post_p)\n   else\n     {\n       rounded_size = fold (build2 (PLUS_EXPR, sizetype, type_size, alignm1));\n-      rounded_size = fold (build2 (TRUNC_DIV_EXPR, sizetype,\n-\t\t\t\t   rounded_size, align));\n-      rounded_size = fold (build2 (MULT_EXPR, sizetype,\n-\t\t\t\t   rounded_size, align));\n+      rounded_size = fold (build2 (BIT_AND_EXPR, sizetype,\n+\t\t\t\t   rounded_size, malign));\n     }\n \n   /* Reduce rounded_size so it's sharable with the postqueue.  */\n   gimplify_expr (&rounded_size, pre_p, post_p, is_gimple_val, fb_rvalue);\n \n   /* Get AP.  */\n-  addr = valist;\n+  addr = valist_tmp;\n   if (PAD_VARARGS_DOWN && ! integer_zerop (rounded_size))\n     {\n       /* Small args are padded downward.  */\n@@ -4536,14 +4536,10 @@ std_gimplify_va_arg_expr (tree valist, tree type, tree *pre_p, tree *post_p)\n     }\n \n   /* Compute new value for AP.  */\n-  if (! integer_zerop (rounded_size))\n-    {\n-      t = build2 (MODIFY_EXPR, TREE_TYPE (valist), valist,\n-\t\t  build2 (PLUS_EXPR, TREE_TYPE (valist), valist,\n-\t\t\t  rounded_size));\n-      gimplify_stmt (&t);\n-      append_to_statement_list (t, post_p);\n-    }\n+  t = build2 (MODIFY_EXPR, TREE_TYPE (valist), valist,\n+\t      fold (build2 (PLUS_EXPR, TREE_TYPE (valist),\n+\t\t\t    valist_tmp, rounded_size)));\n+  gimplify_and_add (t, pre_p);\n \n   addr = fold_convert (build_pointer_type (type), addr);\n   return build_fold_indirect_ref (addr);"}]}