{"sha": "96e4542172ff9a57b56370cdd65f1b1dacbdcdf8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTZlNDU0MjE3MmZmOWE1N2I1NjM3MGNkZDY1ZjFiMWRhY2JkY2RmOA==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2011-03-22T22:23:02Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2011-03-22T22:23:02Z"}, "message": "target.def (handle_option): Take gcc_options and cl_decoded_option pointers and location_t.\n\n\t* target.def (handle_option): Take gcc_options and\n\tcl_decoded_option pointers and location_t.\n\t* doc/tm.texi.in (TARGET_HANDLE_OPTION): Update documentation.\n\t* doc/tm.texi: Regenerate.\n\t* hooks.c (hook_bool_size_t_constcharptr_int_true): Remove.\n\t* hooks.h (hook_bool_size_t_constcharptr_int_true): Don't declare.\n\t* lto-opts.c (lto_reissue_options): Generate option structure for\n\ttargetm.handle_option call.\n\t* opts.c (target_handle_option): Update call to\n\ttargetm.handle_option.  Remove assertions about values now passed\n\tdown to hook.\n\t* targhooks.c (default_target_handle_option): New.\n\t* targhooks.h (default_target_handle_option): Declare.\n\t* config/alpha/alpha.c: Include opts.h.\n\t(alpha_handle_option): Update to new hook interface.\n\t* config/arm/arm.c: Include opts.h.\n\t(arm_handle_option): Update to new hook interface.\n\t* config/arm/t-arm (arm.o): Update dependencies.\n\t* config/bfin/bfin.c: Include opts.h.\n\t(bfin_handle_option): Update to new hook interface.\n\t* config/cris/cris.c: Include opts.h.\n\t(cris_handle_option): Update to new hook interface.\n\t* config/frv/frv.c: Include opts.h.\n\t(frv_handle_option): Update to new hook interface.\n\t* config/i386/i386.c: Include opts.h.\n\t(ix86_handle_option): Update to new hook interface.\n\t(ix86_valid_target_attribute_inner_p): Generate option structure\n\tfor call to ix86_handle_option.\n\t* config/i386/t-i386 (i386.o): Update dependencies.\n\t* config/ia64/ia64.c: Include opts.h.\n\t(ia64_handle_option): Update to new hook interface.\n\t* config/ia64/t-ia64 (ia64.o): Update dependencies.\n\t* config/iq2000/iq2000.c: Include opts.h.\n\t(iq2000_handle_option): Update to new hook interface.\n\t* config/m32c/m32c.c: Include opts.h.\n\t(m32c_handle_option): Update to new hook interface.\n\t* config/m32r/m32r.c: Include opts.h.\n\t(m32r_handle_option): Update to new hook interface.\n\t* config/m68k/m68k.c: Include opts.h.\n\t(m68k_handle_option): Update to new hook interface.\n\t* config/mep/mep.c: Include opts.h.\n\t(mep_handle_option): Update to new hook interface.\n\t* config/microblaze/microblaze.c: Include opts.h.\n\t(microblaze_handle_option): Update to new hook interface.\n\t* config/mips/mips.c: Include opts.h.\n\t(mips_handle_option): Update to new hook interface.\n\t* config/mn10300/mn10300.c: Include opts.h.\n\t(mn10300_handle_option): Update to new hook interface.\n\t* config/pa/pa.c: Include opts.h.\n\t(pa_handle_option): Update to new hook interface.\n\t* config/pdp11/pdp11.c: Include opts.h.\n\t(pdp11_handle_option): Update to new hook interface.\n\t* config/rs6000/rs6000.c: Include opts.h.\n\t(rs6000_handle_option): Update to new hook interface.\n\t* config/rs6000/t-rs6000 (rs6000.o): Update dependencies.\n\t* config/rx/rx.c: Include opts.h.\n\t(rx_handle_option): Update to new hook interface.\n\t* config/s390/s390.c: Include opts.h.\n\t(s390_handle_option): Update to new hook interface.\n\t* config/score/score.c: Include opts.h.\n\t(score_handle_option): Update to new hook interface.\n\t* config/sh/sh.c: Include opts.h.\n\t(sh_handle_option): Update to new hook interface.\n\t* config/sparc/sparc.c: Include opts.h.\n\t(sparc_handle_option): Update to new hook interface.\n\t* config/v850/v850.c: Include opts.h.\n\t(v850_handle_option): Update to new hook interface.\n\nFrom-SVN: r171308", "tree": {"sha": "242583f0d2f31c211bdd0415ce59692a99be7731", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/242583f0d2f31c211bdd0415ce59692a99be7731"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/96e4542172ff9a57b56370cdd65f1b1dacbdcdf8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96e4542172ff9a57b56370cdd65f1b1dacbdcdf8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96e4542172ff9a57b56370cdd65f1b1dacbdcdf8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96e4542172ff9a57b56370cdd65f1b1dacbdcdf8/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66017846ecd165a4bbc8bd414adfee622551ccf5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66017846ecd165a4bbc8bd414adfee622551ccf5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66017846ecd165a4bbc8bd414adfee622551ccf5"}], "stats": {"total": 545, "additions": 425, "deletions": 120}, "files": [{"sha": "97145c00652be426b5ceb9c92e2590d619cca624", "filename": "gcc/ChangeLog", "status": "modified", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e4542172ff9a57b56370cdd65f1b1dacbdcdf8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e4542172ff9a57b56370cdd65f1b1dacbdcdf8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=96e4542172ff9a57b56370cdd65f1b1dacbdcdf8", "patch": "@@ -1,3 +1,73 @@\n+2011-03-22  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* target.def (handle_option): Take gcc_options and\n+\tcl_decoded_option pointers and location_t.\n+\t* doc/tm.texi.in (TARGET_HANDLE_OPTION): Update documentation.\n+\t* doc/tm.texi: Regenerate.\n+\t* hooks.c (hook_bool_size_t_constcharptr_int_true): Remove.\n+\t* hooks.h (hook_bool_size_t_constcharptr_int_true): Don't declare.\n+\t* lto-opts.c (lto_reissue_options): Generate option structure for\n+\ttargetm.handle_option call.\n+\t* opts.c (target_handle_option): Update call to\n+\ttargetm.handle_option.  Remove assertions about values now passed\n+\tdown to hook.\n+\t* targhooks.c (default_target_handle_option): New.\n+\t* targhooks.h (default_target_handle_option): Declare.\n+\t* config/alpha/alpha.c: Include opts.h.\n+\t(alpha_handle_option): Update to new hook interface.\n+\t* config/arm/arm.c: Include opts.h.\n+\t(arm_handle_option): Update to new hook interface.\n+\t* config/arm/t-arm (arm.o): Update dependencies.\n+\t* config/bfin/bfin.c: Include opts.h.\n+\t(bfin_handle_option): Update to new hook interface.\n+\t* config/cris/cris.c: Include opts.h.\n+\t(cris_handle_option): Update to new hook interface.\n+\t* config/frv/frv.c: Include opts.h.\n+\t(frv_handle_option): Update to new hook interface.\n+\t* config/i386/i386.c: Include opts.h.\n+\t(ix86_handle_option): Update to new hook interface.\n+\t(ix86_valid_target_attribute_inner_p): Generate option structure\n+\tfor call to ix86_handle_option.\n+\t* config/i386/t-i386 (i386.o): Update dependencies.\n+\t* config/ia64/ia64.c: Include opts.h.\n+\t(ia64_handle_option): Update to new hook interface.\n+\t* config/ia64/t-ia64 (ia64.o): Update dependencies.\n+\t* config/iq2000/iq2000.c: Include opts.h.\n+\t(iq2000_handle_option): Update to new hook interface.\n+\t* config/m32c/m32c.c: Include opts.h.\n+\t(m32c_handle_option): Update to new hook interface.\n+\t* config/m32r/m32r.c: Include opts.h.\n+\t(m32r_handle_option): Update to new hook interface.\n+\t* config/m68k/m68k.c: Include opts.h.\n+\t(m68k_handle_option): Update to new hook interface.\n+\t* config/mep/mep.c: Include opts.h.\n+\t(mep_handle_option): Update to new hook interface.\n+\t* config/microblaze/microblaze.c: Include opts.h.\n+\t(microblaze_handle_option): Update to new hook interface.\n+\t* config/mips/mips.c: Include opts.h.\n+\t(mips_handle_option): Update to new hook interface.\n+\t* config/mn10300/mn10300.c: Include opts.h.\n+\t(mn10300_handle_option): Update to new hook interface.\n+\t* config/pa/pa.c: Include opts.h.\n+\t(pa_handle_option): Update to new hook interface.\n+\t* config/pdp11/pdp11.c: Include opts.h.\n+\t(pdp11_handle_option): Update to new hook interface.\n+\t* config/rs6000/rs6000.c: Include opts.h.\n+\t(rs6000_handle_option): Update to new hook interface.\n+\t* config/rs6000/t-rs6000 (rs6000.o): Update dependencies.\n+\t* config/rx/rx.c: Include opts.h.\n+\t(rx_handle_option): Update to new hook interface.\n+\t* config/s390/s390.c: Include opts.h.\n+\t(s390_handle_option): Update to new hook interface.\n+\t* config/score/score.c: Include opts.h.\n+\t(score_handle_option): Update to new hook interface.\n+\t* config/sh/sh.c: Include opts.h.\n+\t(sh_handle_option): Update to new hook interface.\n+\t* config/sparc/sparc.c: Include opts.h.\n+\t(sparc_handle_option): Update to new hook interface.\n+\t* config/v850/v850.c: Include opts.h.\n+\t(v850_handle_option): Update to new hook interface.\n+\n 2011-03-22  Joseph Myers  <joseph@codesourcery.com>\n \n \t* gcc.c (driver_unknown_option_callback): Only permit and save"}, {"sha": "ebdb37d861e26092876c81e3e3d5a8c596856bb4", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e4542172ff9a57b56370cdd65f1b1dacbdcdf8/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e4542172ff9a57b56370cdd65f1b1dacbdcdf8/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=96e4542172ff9a57b56370cdd65f1b1dacbdcdf8", "patch": "@@ -57,6 +57,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm-constrs.h\"\n #include \"df.h\"\n #include \"libfuncs.h\"\n+#include \"opts.h\"\n \n /* Specify which cpu to schedule for.  */\n enum processor_type alpha_tune;\n@@ -217,8 +218,17 @@ static const struct default_options alpha_option_optimization_table[] =\n /* Implement TARGET_HANDLE_OPTION.  */\n \n static bool\n-alpha_handle_option (size_t code, const char *arg, int value)\n+alpha_handle_option (struct gcc_options *opts, struct gcc_options *opts_set,\n+\t\t     const struct cl_decoded_option *decoded,\n+\t\t     location_t loc ATTRIBUTE_UNUSED)\n {\n+  size_t code = decoded->opt_index;\n+  const char *arg = decoded->arg;\n+  int value = decoded->value;\n+\n+  gcc_assert (opts == &global_options);\n+  gcc_assert (opts_set == &global_options_set);\n+\n   switch (code)\n     {\n     case OPT_mfp_regs:"}, {"sha": "31a0726858e4368c6dff6ed81c2e3ba64e459e31", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e4542172ff9a57b56370cdd65f1b1dacbdcdf8/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e4542172ff9a57b56370cdd65f1b1dacbdcdf8/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=96e4542172ff9a57b56370cdd65f1b1dacbdcdf8", "patch": "@@ -56,6 +56,7 @@\n #include \"intl.h\"\n #include \"libfuncs.h\"\n #include \"params.h\"\n+#include \"opts.h\"\n \n /* Forward definitions of types.  */\n typedef struct minipool_node    Mnode;\n@@ -218,7 +219,8 @@ static tree arm_build_builtin_va_list (void);\n static void arm_expand_builtin_va_start (tree, rtx);\n static tree arm_gimplify_va_arg_expr (tree, tree, gimple_seq *, gimple_seq *);\n static void arm_option_override (void);\n-static bool arm_handle_option (size_t, const char *, int);\n+static bool arm_handle_option (struct gcc_options *, struct gcc_options *,\n+\t\t\t       const struct cl_decoded_option *, location_t);\n static void arm_target_help (void);\n static unsigned HOST_WIDE_INT arm_shift_truncation_mask (enum machine_mode);\n static bool arm_cannot_copy_insn_p (rtx);\n@@ -1340,8 +1342,16 @@ arm_find_cpu (const char *name, const struct processors *sel, const char *desc)\n /* Implement TARGET_HANDLE_OPTION.  */\n \n static bool\n-arm_handle_option (size_t code, const char *arg, int value ATTRIBUTE_UNUSED)\n+arm_handle_option (struct gcc_options *opts, struct gcc_options *opts_set,\n+\t\t   const struct cl_decoded_option *decoded,\n+\t\t   location_t loc ATTRIBUTE_UNUSED)\n {\n+  size_t code = decoded->opt_index;\n+  const char *arg = decoded->arg;\n+\n+  gcc_assert (opts == &global_options);\n+  gcc_assert (opts_set == &global_options_set);\n+\n   switch (code)\n     {\n     case OPT_march_:"}, {"sha": "993d3d20740a749590770d8afeba92824691d145", "filename": "gcc/config/arm/t-arm", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e4542172ff9a57b56370cdd65f1b1dacbdcdf8/gcc%2Fconfig%2Farm%2Ft-arm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e4542172ff9a57b56370cdd65f1b1dacbdcdf8/gcc%2Fconfig%2Farm%2Ft-arm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-arm?ref=96e4542172ff9a57b56370cdd65f1b1dacbdcdf8", "patch": "@@ -1,6 +1,6 @@\n # Rules common to all arm targets\n #\n-# Copyright (C) 2004, 2005, 2007, 2008, 2009, 2010\n+# Copyright (C) 2004, 2005, 2007, 2008, 2009, 2010, 2011\n # Free Software Foundation, Inc.\n #\n # This file is part of GCC.\n@@ -58,7 +58,7 @@ arm.o: $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n   $(EXPR_H) $(OPTABS_H) $(RECOG_H) $(CGRAPH_H) \\\n   $(GGC_H) except.h $(C_PRAGMA_H) $(INTEGRATE_H) $(TM_P_H) \\\n   $(TARGET_H) $(TARGET_DEF_H) debug.h langhooks.h $(DF_H) \\\n-  intl.h libfuncs.h $(PARAMS_H)\n+  intl.h libfuncs.h $(PARAMS_H) $(OPTS_H)\n \n arm-c.o: $(srcdir)/config/arm/arm-c.c $(CONFIG_H) $(SYSTEM_H) \\\n     coretypes.h $(TM_H) $(TREE_H) output.h $(C_COMMON_H)"}, {"sha": "32f74cdb14e3715bcbffb14672ac350a63af3be1", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e4542172ff9a57b56370cdd65f1b1dacbdcdf8/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e4542172ff9a57b56370cdd65f1b1dacbdcdf8/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=96e4542172ff9a57b56370cdd65f1b1dacbdcdf8", "patch": "@@ -1,5 +1,5 @@\n /* The Blackfin code generation auxiliary output file.\n-   Copyright (C) 2005, 2006, 2007, 2008, 2009, 2010\n+   Copyright (C) 2005, 2006, 2007, 2008, 2009, 2010, 2011\n    Free Software Foundation, Inc.\n    Contributed by Analog Devices.\n \n@@ -56,6 +56,7 @@\n #include \"timevar.h\"\n #include \"df.h\"\n #include \"sel-sched.h\"\n+#include \"opts.h\"\n \n /* A C structure for machine-specific, per-function data.\n    This is added to the cfun structure.  */\n@@ -2558,8 +2559,17 @@ bfin_class_likely_spilled_p (reg_class_t rclass)\n /* Implement TARGET_HANDLE_OPTION.  */\n \n static bool\n-bfin_handle_option (size_t code, const char *arg, int value)\n+bfin_handle_option (struct gcc_options *opts, struct gcc_options *opts_set,\n+\t\t    const struct cl_decoded_option *decoded,\n+\t\t    location_t loc ATTRIBUTE_UNUSED)\n {\n+  size_t code = decoded->opt_index;\n+  const char *arg = decoded->arg;\n+  int value = decoded->value;\n+\n+  gcc_assert (opts == &global_options);\n+  gcc_assert (opts_set == &global_options_set);\n+\n   switch (code)\n     {\n     case OPT_mshared_library_id_:"}, {"sha": "37ccde461a033a79955b31667ab7288eedea1f8f", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e4542172ff9a57b56370cdd65f1b1dacbdcdf8/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e4542172ff9a57b56370cdd65f1b1dacbdcdf8/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=96e4542172ff9a57b56370cdd65f1b1dacbdcdf8", "patch": "@@ -1,6 +1,6 @@\n /* Definitions for GCC.  Part of the machine description for CRIS.\n    Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007,\n-   2008, 2009, 2010  Free Software Foundation, Inc.\n+   2008, 2009, 2010, 2011  Free Software Foundation, Inc.\n    Contributed by Axis Communications.  Written by Hans-Peter Nilsson.\n \n This file is part of GCC.\n@@ -45,6 +45,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"ggc.h\"\n #include \"optabs.h\"\n #include \"df.h\"\n+#include \"opts.h\"\n \n /* Usable when we have an amount to add or subtract, and want the\n    optimal size of the insn.  */\n@@ -136,7 +137,8 @@ static void cris_function_arg_advance (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t       const_tree, bool);\n static tree cris_md_asm_clobbers (tree, tree, tree);\n \n-static bool cris_handle_option (size_t, const char *, int);\n+static bool cris_handle_option (struct gcc_options *, struct gcc_options *,\n+\t\t\t\tconst struct cl_decoded_option *, location_t);\n static void cris_option_override (void);\n \n static bool cris_frame_pointer_required (void);\n@@ -2338,9 +2340,17 @@ cris_asm_output_case_end (FILE *stream, int num, rtx table)\n    cris_option_override.  */\n \n static bool\n-cris_handle_option (size_t code, const char *arg ATTRIBUTE_UNUSED,\n-\t\t    int value ATTRIBUTE_UNUSED)\n+cris_handle_option (struct gcc_options *opts, struct gcc_options *opts_set,\n+\t\t    const struct cl_decoded_option *decoded,\n+\t\t    location_t loc ATTRIBUTE_UNUSED)\n {\n+  size_t code = decoded->opt_index;\n+  const char *arg ATTRIBUTE_UNUSED = decoded->arg;\n+  int value ATTRIBUTE_UNUSED = decoded->value;\n+\n+  gcc_assert (opts == &global_options);\n+  gcc_assert (opts_set == &global_options_set);\n+\n   switch (code)\n     {\n     case OPT_metrax100:"}, {"sha": "dac5323f10eafaa24ad35aaf9e9760397d867320", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e4542172ff9a57b56370cdd65f1b1dacbdcdf8/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e4542172ff9a57b56370cdd65f1b1dacbdcdf8/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=96e4542172ff9a57b56370cdd65f1b1dacbdcdf8", "patch": "@@ -1,5 +1,5 @@\n /* Copyright (C) 1997, 1998, 1999, 2000, 2001, 2003, 2004, 2005, 2006, 2007,\n-   2008, 2009, 2010  Free Software Foundation, Inc.\n+   2008, 2009, 2010, 2011  Free Software Foundation, Inc.\n    Contributed by Red Hat, Inc.\n \n This file is part of GCC.\n@@ -49,6 +49,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"integrate.h\"\n #include \"langhooks.h\"\n #include \"df.h\"\n+#include \"opts.h\"\n \n #ifndef FRV_INLINE\n #define FRV_INLINE inline\n@@ -260,7 +261,10 @@ frv_cpu_t frv_cpu_type = CPU_TYPE;\t/* value of -mcpu= */\n \n /* Forward references */\n \n-static bool frv_handle_option\t\t\t(size_t, const char *, int);\n+static bool frv_handle_option\t\t\t(struct gcc_options *,\n+\t\t\t\t\t\t struct gcc_options *,\n+\t\t\t\t\t\t const struct cl_decoded_option *,\n+\t\t\t\t\t\t location_t);\n static void frv_option_override\t\t\t(void);\n static bool frv_legitimate_address_p\t\t(enum machine_mode, rtx, bool);\n static int frv_default_flags_for_cpu\t\t(void);\n@@ -630,8 +634,16 @@ frv_cannot_force_const_mem (rtx x ATTRIBUTE_UNUSED)\n /* Implement TARGET_HANDLE_OPTION.  */\n \n static bool\n-frv_handle_option (size_t code, const char *arg, int value ATTRIBUTE_UNUSED)\n+frv_handle_option (struct gcc_options *opts, struct gcc_options *opts_set,\n+\t\t   const struct cl_decoded_option *decoded,\n+\t\t   location_t loc ATTRIBUTE_UNUSED)\n {\n+  size_t code = decoded->opt_index;\n+  const char *arg = decoded->arg;\n+\n+  gcc_assert (opts == &global_options);\n+  gcc_assert (opts_set == &global_options_set);\n+\n   switch (code)\n     {\n     case OPT_mcpu_:"}, {"sha": "a7f6fa3aa49851239e9fac3c4780bddd1ac8251f", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e4542172ff9a57b56370cdd65f1b1dacbdcdf8/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e4542172ff9a57b56370cdd65f1b1dacbdcdf8/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=96e4542172ff9a57b56370cdd65f1b1dacbdcdf8", "patch": "@@ -58,6 +58,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"sched-int.h\"\n #include \"sbitmap.h\"\n #include \"fibheap.h\"\n+#include \"opts.h\"\n \n enum upper_128bits_state\n {\n@@ -2683,8 +2684,16 @@ ix86_using_red_zone (void)\n /* Implement TARGET_HANDLE_OPTION.  */\n \n static bool\n-ix86_handle_option (size_t code, const char *arg ATTRIBUTE_UNUSED, int value)\n+ix86_handle_option (struct gcc_options *opts, struct gcc_options *opts_set,\n+\t\t    const struct cl_decoded_option *decoded,\n+\t\t    location_t loc ATTRIBUTE_UNUSED)\n {\n+  size_t code = decoded->opt_index;\n+  int value = decoded->value;\n+\n+  gcc_assert (opts == &global_options);\n+  gcc_assert (opts_set == &global_options_set);\n+\n   switch (code)\n     {\n     case OPT_mmmx:\n@@ -4670,7 +4679,13 @@ ix86_valid_target_attribute_inner_p (tree args, char *p_strings[])\n \t}\n \n       else if (type == ix86_opt_isa)\n-\tix86_handle_option (opt, p, opt_set_p);\n+\t{\n+\t  struct cl_decoded_option decoded;\n+\n+\t  generate_option (opt, NULL, opt_set_p, CL_TARGET, &decoded);\n+\t  ix86_handle_option (&global_options, &global_options_set,\n+\t\t\t      &decoded, input_location);\n+\t}\n \n       else if (type == ix86_opt_yes || type == ix86_opt_no)\n \t{"}, {"sha": "e9fa3cd8d6f6d34ef60c3b664378675ce0eca7df", "filename": "gcc/config/i386/t-i386", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e4542172ff9a57b56370cdd65f1b1dacbdcdf8/gcc%2Fconfig%2Fi386%2Ft-i386", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e4542172ff9a57b56370cdd65f1b1dacbdcdf8/gcc%2Fconfig%2Fi386%2Ft-i386", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ft-i386?ref=96e4542172ff9a57b56370cdd65f1b1dacbdcdf8", "patch": "@@ -1,4 +1,4 @@\n-# Copyright (C) 2008, 2009, 2010 Free Software Foundation, Inc.\n+# Copyright (C) 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n #\n # This file is part of GCC.\n #\n@@ -23,7 +23,8 @@ i386.o: $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n   $(RECOG_H) $(EXPR_H) $(OPTABS_H) toplev.h $(BASIC_BLOCK_H) \\\n   $(GGC_H) $(TARGET_H) $(TARGET_DEF_H) langhooks.h $(CGRAPH_H) \\\n   $(TREE_GIMPLE_H) $(DWARF2_H) $(DF_H) tm-constrs.h $(PARAMS_H) \\\n-  i386-builtin-types.inc debug.h dwarf2out.h sbitmap.h $(FIBHEAP_H)\n+  i386-builtin-types.inc debug.h dwarf2out.h sbitmap.h $(FIBHEAP_H) \\\n+  $(OPTS_H)\n \n i386-c.o: $(srcdir)/config/i386/i386-c.c \\\n   $(srcdir)/config/i386/i386-protos.h $(CONFIG_H) $(SYSTEM_H) coretypes.h \\"}, {"sha": "c3d6303665dfafab9a487fa71133467ac5a65435", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e4542172ff9a57b56370cdd65f1b1dacbdcdf8/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e4542172ff9a57b56370cdd65f1b1dacbdcdf8/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=96e4542172ff9a57b56370cdd65f1b1dacbdcdf8", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler.\n    Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,\n-   2009, 2010\n+   2009, 2010, 2011\n    Free Software Foundation, Inc.\n    Contributed by James E. Wilson <wilson@cygnus.com> and\n \t\t  David Mosberger <davidm@hpl.hp.com>.\n@@ -61,6 +61,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"sel-sched.h\"\n #include \"reload.h\"\n #include \"dwarf2out.h\"\n+#include \"opts.h\"\n \n /* This is used for communication between ASM_OUTPUT_LABEL and\n    ASM_OUTPUT_LABELREF.  */\n@@ -231,7 +232,8 @@ static int ia64_memory_move_cost (enum machine_mode mode, reg_class_t,\n static bool ia64_rtx_costs (rtx, int, int, int *, bool);\n static int ia64_unspec_may_trap_p (const_rtx, unsigned);\n static void fix_range (const char *);\n-static bool ia64_handle_option (size_t, const char *, int);\n+static bool ia64_handle_option (struct gcc_options *, struct gcc_options *,\n+\t\t\t\tconst struct cl_decoded_option *, location_t);\n static struct machine_function * ia64_init_machine_status (void);\n static void emit_insn_group_barriers (FILE *);\n static void emit_all_insn_group_barriers (FILE *);\n@@ -5655,8 +5657,17 @@ fix_range (const char *const_str)\n /* Implement TARGET_HANDLE_OPTION.  */\n \n static bool\n-ia64_handle_option (size_t code, const char *arg, int value)\n+ia64_handle_option (struct gcc_options *opts, struct gcc_options *opts_set,\n+\t\t    const struct cl_decoded_option *decoded,\n+\t\t    location_t loc ATTRIBUTE_UNUSED)\n {\n+  size_t code = decoded->opt_index;\n+  const char *arg = decoded->arg;\n+  int value = decoded->value;\n+\n+  gcc_assert (opts == &global_options);\n+  gcc_assert (opts_set == &global_options_set);\n+\n   switch (code)\n     {\n     case OPT_mfixed_range_:"}, {"sha": "4f013e2d591ae0b2541b2989fbb95ee73c1ebddc", "filename": "gcc/config/ia64/t-ia64", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e4542172ff9a57b56370cdd65f1b1dacbdcdf8/gcc%2Fconfig%2Fia64%2Ft-ia64", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e4542172ff9a57b56370cdd65f1b1dacbdcdf8/gcc%2Fconfig%2Fia64%2Ft-ia64", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Ft-ia64?ref=96e4542172ff9a57b56370cdd65f1b1dacbdcdf8", "patch": "@@ -1,5 +1,5 @@\n # Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,\n-# 2010\n+# 2010, 2011\n # Free Software Foundation, Inc.\n #\n # This file is part of GCC.\n@@ -54,4 +54,4 @@ ia64-c.o: $(srcdir)/config/ia64/ia64-c.c $(CONFIG_H) $(SYSTEM_H) \\\n # genattrtab generates very long string literals.\n insn-attrtab.o-warn = -Wno-error\n \n-ia64.o: debug.h $(PARAMS_H) sel-sched.h reload.h\n+ia64.o: debug.h $(PARAMS_H) sel-sched.h reload.h $(OPTS_H)"}, {"sha": "ca949e23a13af1b932831d86fe78516a2eaabcd7", "filename": "gcc/config/iq2000/iq2000.c", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e4542172ff9a57b56370cdd65f1b1dacbdcdf8/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e4542172ff9a57b56370cdd65f1b1dacbdcdf8/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.c?ref=96e4542172ff9a57b56370cdd65f1b1dacbdcdf8", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines used for code generation on Vitesse IQ2000 processors\n-   Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+   Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -45,6 +45,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"target-def.h\"\n #include \"langhooks.h\"\n #include \"df.h\"\n+#include \"opts.h\"\n \n /* Enumeration for all of the relational tests, so that we can build\n    arrays indexed by the test type, and not worry about the order\n@@ -145,7 +146,10 @@ static enum machine_mode gpr_mode;\n \f\n /* Initialize the GCC target structure.  */\n static struct machine_function* iq2000_init_machine_status (void);\n-static bool iq2000_handle_option      (size_t, const char *, int);\n+static bool iq2000_handle_option      (struct gcc_options *,\n+\t\t\t\t       struct gcc_options *,\n+\t\t\t\t       const struct cl_decoded_option *,\n+\t\t\t\t       location_t);\n static void iq2000_option_override    (void);\n static section *iq2000_select_rtx_section (enum machine_mode, rtx,\n \t\t\t\t\t   unsigned HOST_WIDE_INT);\n@@ -1437,8 +1441,16 @@ iq2000_init_machine_status (void)\n /* Implement TARGET_HANDLE_OPTION.  */\n \n static bool\n-iq2000_handle_option (size_t code, const char *arg, int value ATTRIBUTE_UNUSED)\n+iq2000_handle_option (struct gcc_options *opts, struct gcc_options *opts_set,\n+\t\t      const struct cl_decoded_option *decoded,\n+\t\t      location_t loc ATTRIBUTE_UNUSED)\n {\n+  size_t code = decoded->opt_index;\n+  const char *arg = decoded->arg;\n+\n+  gcc_assert (opts == &global_options);\n+  gcc_assert (opts_set == &global_options_set);\n+\n   switch (code)\n     {\n     case OPT_mcpu_:"}, {"sha": "16f635770e747510a804e17ad52d87d9bf688a2c", "filename": "gcc/config/m32c/m32c.c", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e4542172ff9a57b56370cdd65f1b1dacbdcdf8/gcc%2Fconfig%2Fm32c%2Fm32c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e4542172ff9a57b56370cdd65f1b1dacbdcdf8/gcc%2Fconfig%2Fm32c%2Fm32c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c.c?ref=96e4542172ff9a57b56370cdd65f1b1dacbdcdf8", "patch": "@@ -1,5 +1,5 @@\n /* Target Code for R8C/M16C/M32C\n-   Copyright (C) 2005, 2006, 2007, 2008, 2009, 2010\n+   Copyright (C) 2005, 2006, 2007, 2008, 2009, 2010, 2011\n    Free Software Foundation, Inc.\n    Contributed by Red Hat.\n \n@@ -48,6 +48,7 @@\n #include \"langhooks.h\"\n #include \"gimple.h\"\n #include \"df.h\"\n+#include \"opts.h\"\n \n /* Prototypes */\n \n@@ -414,10 +415,16 @@ int ok_to_change_target_memregs = TRUE;\n #undef  TARGET_HANDLE_OPTION\n #define TARGET_HANDLE_OPTION m32c_handle_option\n static bool\n-m32c_handle_option (size_t code,\n-\t\t    const char *arg ATTRIBUTE_UNUSED,\n-\t\t    int value ATTRIBUTE_UNUSED)\n+m32c_handle_option (struct gcc_options *opts, struct gcc_options *opts_set,\n+\t\t    const struct cl_decoded_option *decoded,\n+\t\t    location_t loc ATTRIBUTE_UNUSED)\n {\n+  size_t code = decoded->opt_index;\n+  const char *arg = decoded->arg;\n+\n+  gcc_assert (opts == &global_options);\n+  gcc_assert (opts_set == &global_options_set);\n+\n   if (code == OPT_memregs_)\n     {\n       target_memregs_set = TRUE;"}, {"sha": "648afb97538619d565fd2bb0e94e20abff12fcba", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e4542172ff9a57b56370cdd65f1b1dacbdcdf8/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e4542172ff9a57b56370cdd65f1b1dacbdcdf8/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=96e4542172ff9a57b56370cdd65f1b1dacbdcdf8", "patch": "@@ -42,6 +42,7 @@\n #include \"target.h\"\n #include \"target-def.h\"\n #include \"tm-constrs.h\"\n+#include \"opts.h\"\n \n /* Array of valid operand punctuation characters.  */\n static char m32r_punct_chars[256];\n@@ -61,7 +62,8 @@ enum m32r_sdata m32r_sdata = M32R_SDATA_DEFAULT;\n #define LIT_NAME_P(NAME) ((NAME)[0] == '*' && (NAME)[1] == '.')\n \n /* Forward declaration.  */\n-static bool  m32r_handle_option (size_t, const char *, int);\n+static bool  m32r_handle_option (struct gcc_options *, struct gcc_options *,\n+\t\t\t\t const struct cl_decoded_option *, location_t);\n static void  m32r_option_override (void);\n static void  init_reg_tables (void);\n static void  block_move_call (rtx, rtx, rtx);\n@@ -223,8 +225,17 @@ struct gcc_target targetm = TARGET_INITIALIZER;\n /* Implement TARGET_HANDLE_OPTION.  */\n \n static bool\n-m32r_handle_option (size_t code, const char *arg, int value)\n+m32r_handle_option (struct gcc_options *opts, struct gcc_options *opts_set,\n+\t\t    const struct cl_decoded_option *decoded,\n+\t\t    location_t loc ATTRIBUTE_UNUSED)\n {\n+  size_t code = decoded->opt_index;\n+  const char *arg = decoded->arg;\n+  int value = decoded->value;\n+\n+  gcc_assert (opts == &global_options);\n+  gcc_assert (opts_set == &global_options_set);\n+\n   switch (code)\n     {\n     case OPT_m32r:"}, {"sha": "3a753858626aa85676c62e5e1300ed03dc3d98ee", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e4542172ff9a57b56370cdd65f1b1dacbdcdf8/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e4542172ff9a57b56370cdd65f1b1dacbdcdf8/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=96e4542172ff9a57b56370cdd65f1b1dacbdcdf8", "patch": "@@ -1,6 +1,6 @@\n /* Subroutines for insn-output.c for Motorola 68000 family.\n    Copyright (C) 1987, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,\n-   2001, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+   2001, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -46,6 +46,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"sched-int.h\"\n #include \"insn-codes.h\"\n #include \"ggc.h\"\n+#include \"opts.h\"\n \n enum reg_class regno_reg_class[] =\n {\n@@ -134,7 +135,8 @@ static int m68k_sched_first_cycle_multipass_dfa_lookahead (void);\n static bool m68k_can_eliminate (const int, const int);\n static void m68k_conditional_register_usage (void);\n static bool m68k_legitimate_address_p (enum machine_mode, rtx, bool);\n-static bool m68k_handle_option (size_t, const char *, int);\n+static bool m68k_handle_option (struct gcc_options *, struct gcc_options *,\n+\t\t\t\tconst struct cl_decoded_option *, location_t);\n static void m68k_option_override (void);\n static rtx find_addr_reg (rtx);\n static const char *singlemove_string (rtx *);\n@@ -475,8 +477,17 @@ m68k_find_selection (const struct m68k_target_selection **entry,\n /* Implement TARGET_HANDLE_OPTION.  */\n \n static bool\n-m68k_handle_option (size_t code, const char *arg, int value)\n+m68k_handle_option (struct gcc_options *opts, struct gcc_options *opts_set,\n+\t\t    const struct cl_decoded_option *decoded,\n+\t\t    location_t loc ATTRIBUTE_UNUSED)\n {\n+  size_t code = decoded->opt_index;\n+  const char *arg = decoded->arg;\n+  int value = decoded->value;\n+\n+  gcc_assert (opts == &global_options);\n+  gcc_assert (opts_set == &global_options_set);\n+\n   switch (code)\n     {\n     case OPT_march_:"}, {"sha": "1d75777eb1850e2ba8e66908b3699256a1b98936", "filename": "gcc/config/mep/mep.c", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e4542172ff9a57b56370cdd65f1b1dacbdcdf8/gcc%2Fconfig%2Fmep%2Fmep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e4542172ff9a57b56370cdd65f1b1dacbdcdf8/gcc%2Fconfig%2Fmep%2Fmep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmep%2Fmep.c?ref=96e4542172ff9a57b56370cdd65f1b1dacbdcdf8", "patch": "@@ -1,5 +1,6 @@\n /* Definitions for Toshiba Media Processor\n-   Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+   Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n+   2011\n    Free Software Foundation, Inc.\n    Contributed by Red Hat, Inc.\n \n@@ -50,6 +51,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"langhooks.h\"\n #include \"df.h\"\n #include \"gimple.h\"\n+#include \"opts.h\"\n \n /* Structure of this file:\n \n@@ -220,7 +222,8 @@ static rtx mep_function_arg (CUMULATIVE_ARGS *, enum machine_mode,\n static void mep_function_arg_advance (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t      const_tree, bool);\n static bool mep_vector_mode_supported_p (enum machine_mode);\n-static bool mep_handle_option (size_t, const char *, int);\n+static bool mep_handle_option (struct gcc_options *, struct gcc_options *,\n+\t\t\t       const struct cl_decoded_option *, location_t);\n static rtx  mep_allocate_initial_value (rtx);\n static void mep_asm_init_sections (void);\n static int mep_comp_type_attributes (const_tree, const_tree);\n@@ -7257,11 +7260,15 @@ mep_address_cost (rtx addr ATTRIBUTE_UNUSED, bool ATTRIBUTE_UNUSED speed_p)\n }\n \n static bool\n-mep_handle_option (size_t code,\n-\t\t   const char *arg ATTRIBUTE_UNUSED,\n-\t\t   int value ATTRIBUTE_UNUSED)\n+mep_handle_option (struct gcc_options *opts, struct gcc_options *opts_set,\n+\t\t   const struct cl_decoded_option *decoded,\n+\t\t   location_t loc ATTRIBUTE_UNUSED)\n {\n   int i;\n+  size_t code = decoded->opt_index;\n+\n+  gcc_assert (opts == &global_options);\n+  gcc_assert (opts_set == &global_options_set);\n \n   switch (code)\n     {"}, {"sha": "85295ef8f3b4fc586abbc120516114944f540dcb", "filename": "gcc/config/microblaze/microblaze.c", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e4542172ff9a57b56370cdd65f1b1dacbdcdf8/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e4542172ff9a57b56370cdd65f1b1dacbdcdf8/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c?ref=96e4542172ff9a57b56370cdd65f1b1dacbdcdf8", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines used for code generation on Xilinx MicroBlaze.\n-   Copyright 2009, 2010 Free Software Foundation, Inc.\n+   Copyright 2009, 2010, 2011 Free Software Foundation, Inc.\n \n    Contributed by Michael Eager <eager@eagercon.com>.\n \n@@ -48,6 +48,7 @@\n #include \"df.h\"\n #include \"optabs.h\"\n #include \"diagnostic-core.h\"\n+#include \"opts.h\"\n \n #define MICROBLAZE_VERSION_COMPARE(VA,VB) strcasecmp (VA, VB)\n \n@@ -1276,10 +1277,16 @@ microblaze_version_to_int (const char *version)\n }\n \n static bool\n-microblaze_handle_option (size_t code,\n-\t\t\t  const char *arg ATTRIBUTE_UNUSED,\n-\t\t\t  int value ATTRIBUTE_UNUSED)\n+microblaze_handle_option (struct gcc_options *opts,\n+\t\t\t  struct gcc_options *opts_set,\n+\t\t\t  const struct cl_decoded_option *decoded,\n+\t\t\t  location_t loc ATTRIBUTE_UNUSED)\n {\n+  size_t code = decoded->opt_index;\n+\n+  gcc_assert (opts == &global_options);\n+  gcc_assert (opts_set == &global_options_set);\n+\n   switch (code)\n     {\n     case OPT_mno_clearbss:"}, {"sha": "878d33e1fa6e1e0a91694aaa864aa3b5271965a1", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e4542172ff9a57b56370cdd65f1b1dacbdcdf8/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e4542172ff9a57b56370cdd65f1b1dacbdcdf8/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=96e4542172ff9a57b56370cdd65f1b1dacbdcdf8", "patch": "@@ -58,6 +58,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"bitmap.h\"\n #include \"diagnostic.h\"\n #include \"target-globals.h\"\n+#include \"opts.h\"\n \n /* True if X is an UNSPEC wrapper around a SYMBOL_REF or LABEL_REF.  */\n #define UNSPEC_ADDRESS_P(X)\t\t\t\t\t\\\n@@ -15459,8 +15460,16 @@ mips_set_tune (const struct mips_cpu_info *info)\n /* Implement TARGET_HANDLE_OPTION.  */\n \n static bool\n-mips_handle_option (size_t code, const char *arg, int value ATTRIBUTE_UNUSED)\n+mips_handle_option (struct gcc_options *opts, struct gcc_options *opts_set,\n+\t\t    const struct cl_decoded_option *decoded,\n+\t\t    location_t loc ATTRIBUTE_UNUSED)\n {\n+  size_t code = decoded->opt_index;\n+  const char *arg = decoded->arg;\n+\n+  gcc_assert (opts == &global_options);\n+  gcc_assert (opts_set == &global_options_set);\n+\n   switch (code)\n     {\n     case OPT_mabi_:"}, {"sha": "cae3ea1fb529ca44668e718394c73d885deb54c7", "filename": "gcc/config/mn10300/mn10300.c", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e4542172ff9a57b56370cdd65f1b1dacbdcdf8/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e4542172ff9a57b56370cdd65f1b1dacbdcdf8/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.c?ref=96e4542172ff9a57b56370cdd65f1b1dacbdcdf8", "patch": "@@ -44,6 +44,7 @@\n #include \"target.h\"\n #include \"target-def.h\"\n #include \"df.h\"\n+#include \"opts.h\"\n \n /* This is used in the am33_2.0-linux-gnu port, in which global symbol\n    names are not prefixed by underscores, to tell whether to prefix a\n@@ -90,10 +91,17 @@ static int cc_flags_for_code(enum rtx_code);\n /* Implement TARGET_HANDLE_OPTION.  */\n \n static bool\n-mn10300_handle_option (size_t code,\n-\t\t       const char *arg ATTRIBUTE_UNUSED,\n-\t\t       int value)\n+mn10300_handle_option (struct gcc_options *opts, struct gcc_options *opts_set,\n+\t\t       const struct cl_decoded_option *decoded,\n+\t\t       location_t loc ATTRIBUTE_UNUSED)\n {\n+  size_t code = decoded->opt_index;\n+  const char *arg = decoded->arg;\n+  int value = decoded->value;\n+\n+  gcc_assert (opts == &global_options);\n+  gcc_assert (opts_set == &global_options_set);\n+\n   switch (code)\n     {\n     case OPT_mam33:"}, {"sha": "c5cd8712c669796d98ed007482bd15700ea71565", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e4542172ff9a57b56370cdd65f1b1dacbdcdf8/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e4542172ff9a57b56370cdd65f1b1dacbdcdf8/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=96e4542172ff9a57b56370cdd65f1b1dacbdcdf8", "patch": "@@ -1,6 +1,6 @@\n /* Subroutines for insn-output.c for HPPA.\n    Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001,\n-   2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+   2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n    Free Software Foundation, Inc.\n    Contributed by Tim Moore (moore@cs.utah.edu), based on sparc.c\n \n@@ -48,6 +48,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"target-def.h\"\n #include \"langhooks.h\"\n #include \"df.h\"\n+#include \"opts.h\"\n \n /* Return nonzero if there is a bypass for the output of \n    OUT_INSN and the fp store IN_INSN.  */\n@@ -87,7 +88,8 @@ hppa_fpstore_bypass_p (rtx out_insn, rtx in_insn)\n static void pa_option_override (void);\n static void copy_reg_pointer (rtx, rtx);\n static void fix_range (const char *);\n-static bool pa_handle_option (size_t, const char *, int);\n+static bool pa_handle_option (struct gcc_options *, struct gcc_options *,\n+\t\t\t      const struct cl_decoded_option *, location_t);\n static int hppa_register_move_cost (enum machine_mode mode, reg_class_t,\n \t\t\t\t    reg_class_t);\n static int hppa_address_cost (rtx, bool);\n@@ -478,8 +480,16 @@ fix_range (const char *const_str)\n /* Implement TARGET_HANDLE_OPTION.  */\n \n static bool\n-pa_handle_option (size_t code, const char *arg, int value ATTRIBUTE_UNUSED)\n+pa_handle_option (struct gcc_options *opts, struct gcc_options *opts_set,\n+\t\t  const struct cl_decoded_option *decoded,\n+\t\t  location_t loc ATTRIBUTE_UNUSED)\n {\n+  size_t code = decoded->opt_index;\n+  const char *arg = decoded->arg;\n+\n+  gcc_assert (opts == &global_options);\n+  gcc_assert (opts_set == &global_options_set);\n+\n   switch (code)\n     {\n     case OPT_mnosnake:"}, {"sha": "a5f9c37ba6c499648787fdf781c7aac1a1414154", "filename": "gcc/config/pdp11/pdp11.c", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e4542172ff9a57b56370cdd65f1b1dacbdcdf8/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e4542172ff9a57b56370cdd65f1b1dacbdcdf8/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.c?ref=96e4542172ff9a57b56370cdd65f1b1dacbdcdf8", "patch": "@@ -1,6 +1,6 @@\n /* Subroutines for gcc2 for pdp11.\n    Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2001, 2004, 2005,\n-   2006, 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n+   2006, 2007, 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n    Contributed by Michael K. Gschwind (mike@vlsivie.tuwien.ac.at).\n \n This file is part of GCC.\n@@ -40,6 +40,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"target.h\"\n #include \"target-def.h\"\n #include \"df.h\"\n+#include \"opts.h\"\n \n /* this is the current value returned by the macro FIRST_PARM_OFFSET \n    defined in tm.h */\n@@ -138,7 +139,8 @@ decode_pdp11_d (const struct real_format *fmt ATTRIBUTE_UNUSED,\n /* This is where the condition code register lives.  */\n /* rtx cc0_reg_rtx; - no longer needed? */\n \n-static bool pdp11_handle_option (size_t, const char *, int);\n+static bool pdp11_handle_option (struct gcc_options *, struct gcc_options *,\n+\t\t\t\t const struct cl_decoded_option *, location_t);\n static void pdp11_option_init_struct (struct gcc_options *);\n static const char *singlemove_string (rtx *);\n static bool pdp11_assemble_integer (rtx, unsigned int, int);\n@@ -245,9 +247,15 @@ static const struct default_options pdp11_option_optimization_table[] =\n /* Implement TARGET_HANDLE_OPTION.  */\n \n static bool\n-pdp11_handle_option (size_t code, const char *arg ATTRIBUTE_UNUSED,\n-\t\t     int value ATTRIBUTE_UNUSED)\n+pdp11_handle_option (struct gcc_options *opts, struct gcc_options *opts_set,\n+\t\t     const struct cl_decoded_option *decoded,\n+\t\t     location_t loc ATTRIBUTE_UNUSED)\n {\n+  size_t code = decoded->opt_index;\n+\n+  gcc_assert (opts == &global_options);\n+  gcc_assert (opts_set == &global_options_set);\n+\n   switch (code)\n     {\n     case OPT_m10:"}, {"sha": "c3ca018d48452387dfa9db925a496105396832a0", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e4542172ff9a57b56370cdd65f1b1dacbdcdf8/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e4542172ff9a57b56370cdd65f1b1dacbdcdf8/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=96e4542172ff9a57b56370cdd65f1b1dacbdcdf8", "patch": "@@ -58,6 +58,7 @@\n #include \"intl.h\"\n #include \"params.h\"\n #include \"tm-constrs.h\"\n+#include \"opts.h\"\n #if TARGET_XCOFF\n #include \"xcoffout.h\"  /* get declarations of xcoff_*_section_name */\n #endif\n@@ -1077,7 +1078,9 @@ static int get_element_number (tree, tree);\n static void rs6000_option_override (void);\n static void rs6000_option_init_struct (struct gcc_options *);\n static void rs6000_option_default_params (void);\n-static bool rs6000_handle_option (size_t, const char *, int);\n+static bool rs6000_handle_option (struct gcc_options *, struct gcc_options *,\n+\t\t\t\t  const struct cl_decoded_option *,\n+\t\t\t\t  location_t);\n static int rs6000_loop_align_max_skip (rtx);\n static void rs6000_parse_yes_no_option (const char *, const char *, int *);\n static int first_altivec_reg_to_save (void);\n@@ -4208,11 +4211,19 @@ rs6000_builtin_vectorized_function (tree fndecl, tree type_out,\n /* Implement TARGET_HANDLE_OPTION.  */\n \n static bool\n-rs6000_handle_option (size_t code, const char *arg, int value)\n+rs6000_handle_option (struct gcc_options *opts, struct gcc_options *opts_set,\n+\t\t      const struct cl_decoded_option *decoded,\n+\t\t      location_t loc ATTRIBUTE_UNUSED)\n {\n   enum fpu_type_t fpu_type = FPU_NONE;\n   int isel;\n   char *p, *q;\n+  size_t code = decoded->opt_index;\n+  const char *arg = decoded->arg;\n+  int value = decoded->value;\n+\n+  gcc_assert (opts == &global_options);\n+  gcc_assert (opts_set == &global_options_set);\n \n   switch (code)\n     {"}, {"sha": "bfc793f489eabd0b387bce8ca67b5f289dbb30b1", "filename": "gcc/config/rs6000/t-rs6000", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e4542172ff9a57b56370cdd65f1b1dacbdcdf8/gcc%2Fconfig%2Frs6000%2Ft-rs6000", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e4542172ff9a57b56370cdd65f1b1dacbdcdf8/gcc%2Fconfig%2Frs6000%2Ft-rs6000", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ft-rs6000?ref=96e4542172ff9a57b56370cdd65f1b1dacbdcdf8", "patch": "@@ -1,7 +1,7 @@\n # General rules that all rs6000/ targets must have.\n #\n # Copyright (C) 1995, 1997, 1998, 1999, 2001, 2002, 2003, 2004, 2008, 2009,\n-# 2010 Free Software Foundation, Inc.\n+# 2010, 2011 Free Software Foundation, Inc.\n #\n # This file is part of GCC.\n #\n@@ -27,7 +27,7 @@ rs6000.o: $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n   $(OBSTACK_H) $(TREE_H) $(EXPR_H) $(OPTABS_H) except.h function.h \\\n   output.h $(BASIC_BLOCK_H) $(INTEGRATE_H) toplev.h $(GGC_H) $(HASHTAB_H) \\\n   $(TM_P_H) $(TARGET_H) $(TARGET_DEF_H) langhooks.h reload.h gt-rs6000.h \\\n-  cfglayout.h cfgloop.h\n+  cfglayout.h cfgloop.h $(OPTS_H)\n \n rs6000-c.o: $(srcdir)/config/rs6000/rs6000-c.c \\\n     $(srcdir)/config/rs6000/rs6000-protos.h \\"}, {"sha": "bec921b1effc8969f1424a07298d185752564971", "filename": "gcc/config/rx/rx.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e4542172ff9a57b56370cdd65f1b1dacbdcdf8/gcc%2Fconfig%2Frx%2Frx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e4542172ff9a57b56370cdd65f1b1dacbdcdf8/gcc%2Fconfig%2Frx%2Frx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.c?ref=96e4542172ff9a57b56370cdd65f1b1dacbdcdf8", "patch": "@@ -50,6 +50,7 @@\n #include \"target.h\"\n #include \"target-def.h\"\n #include \"langhooks.h\"\n+#include \"opts.h\"\n \f\n static void rx_print_operand (FILE *, rtx, int);\n \n@@ -2251,8 +2252,17 @@ const struct attribute_spec rx_attribute_table[] =\n /* Extra processing for target specific command line options.  */\n \n static bool\n-rx_handle_option (size_t code, const char *  arg ATTRIBUTE_UNUSED, int value)\n+rx_handle_option (struct gcc_options *opts, struct gcc_options *opts_set,\n+\t\t  const struct cl_decoded_option *decoded,\n+\t\t  location_t loc ATTRIBUTE_UNUSED)\n {\n+  size_t code = decoded->opt_index;\n+  const char *arg = decoded->arg;\n+  int value = decoded->value;\n+\n+  gcc_assert (opts == &global_options);\n+  gcc_assert (opts_set == &global_options_set);\n+\n   switch (code)\n     {\n     case OPT_mint_register_:"}, {"sha": "33518be41d30321d973d9a21ef884600bce5abe1", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e4542172ff9a57b56370cdd65f1b1dacbdcdf8/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e4542172ff9a57b56370cdd65f1b1dacbdcdf8/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=96e4542172ff9a57b56370cdd65f1b1dacbdcdf8", "patch": "@@ -53,6 +53,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"df.h\"\n #include \"params.h\"\n #include \"cfgloop.h\"\n+#include \"opts.h\"\n \n \n /* Define the specific costs for a given cpu.  */\n@@ -1588,8 +1589,16 @@ s390_handle_arch_option (const char *arg,\n /* Implement TARGET_HANDLE_OPTION.  */\n \n static bool\n-s390_handle_option (size_t code, const char *arg, int value ATTRIBUTE_UNUSED)\n+s390_handle_option (struct gcc_options *opts, struct gcc_options *opts_set,\n+\t\t    const struct cl_decoded_option *decoded,\n+\t\t    location_t loc ATTRIBUTE_UNUSED)\n {\n+  size_t code = decoded->opt_index;\n+  const char *arg = decoded->arg;\n+\n+  gcc_assert (opts == &global_options);\n+  gcc_assert (opts_set == &global_options_set);\n+\n   switch (code)\n     {\n     case OPT_march_:"}, {"sha": "ddb04cb1451df66d0b9259acbb3da03496a56d56", "filename": "gcc/config/score/score.c", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e4542172ff9a57b56370cdd65f1b1dacbdcdf8/gcc%2Fconfig%2Fscore%2Fscore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e4542172ff9a57b56370cdd65f1b1dacbdcdf8/gcc%2Fconfig%2Fscore%2Fscore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fscore%2Fscore.c?ref=96e4542172ff9a57b56370cdd65f1b1dacbdcdf8", "patch": "@@ -1,5 +1,6 @@\n /* Output routines for Sunplus S+CORE processor\n-   Copyright (C) 2005, 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n+   Copyright (C) 2005, 2007, 2008, 2009, 2010, 2011\n+   Free Software Foundation, Inc.\n    Contributed by Sunnorth.\n \n    This file is part of GCC.\n@@ -48,6 +49,7 @@\n #include \"langhooks.h\"\n #include \"score7.h\"\n #include \"df.h\"\n+#include \"opts.h\"\n \n static void score_option_override (void);\n \n@@ -281,8 +283,16 @@ score_asm_file_end (void)\n \n /* Implement TARGET_HANDLE_OPTION.  */\n static bool\n-score_handle_option (size_t code, const char *arg, int value ATTRIBUTE_UNUSED)\n+score_handle_option (struct gcc_options *opts, struct gcc_options *opts_set,\n+\t\t     const struct cl_decoded_option *decoded,\n+\t\t     location_t loc ATTRIBUTE_UNUSED)\n {\n+  size_t code = decoded->opt_index;\n+  const char *arg = decoded->arg;\n+\n+  gcc_assert (opts == &global_options);\n+  gcc_assert (opts_set == &global_options_set);\n+\n   switch (code)\n     {\n     case OPT_mscore7d:"}, {"sha": "bbeb7a258ddd38b0c0a8275317d8befbb6033c9b", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e4542172ff9a57b56370cdd65f1b1dacbdcdf8/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e4542172ff9a57b56370cdd65f1b1dacbdcdf8/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=96e4542172ff9a57b56370cdd65f1b1dacbdcdf8", "patch": "@@ -56,6 +56,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cfgloop.h\"\n #include \"alloc-pool.h\"\n #include \"tm-constrs.h\"\n+#include \"opts.h\"\n \n \n int code_for_indirect_jump_scratch = CODE_FOR_indirect_jump_scratch;\n@@ -167,7 +168,8 @@ int assembler_dialect;\n \n static bool shmedia_space_reserved_for_target_registers;\n \n-static bool sh_handle_option (size_t, const char *, int);\n+static bool sh_handle_option (struct gcc_options *, struct gcc_options *,\n+\t\t\t      const struct cl_decoded_option *, location_t);\n static void split_branches (rtx);\n static int branch_dest (rtx);\n static void force_into (rtx, rtx);\n@@ -604,9 +606,15 @@ struct gcc_target targetm = TARGET_INITIALIZER;\n /* Implement TARGET_HANDLE_OPTION.  */\n \n static bool\n-sh_handle_option (size_t code, const char *arg ATTRIBUTE_UNUSED,\n-\t\t  int value ATTRIBUTE_UNUSED)\n+sh_handle_option (struct gcc_options *opts, struct gcc_options *opts_set,\n+\t\t  const struct cl_decoded_option *decoded,\n+\t\t  location_t loc ATTRIBUTE_UNUSED)\n {\n+  size_t code = decoded->opt_index;\n+\n+  gcc_assert (opts == &global_options);\n+  gcc_assert (opts_set == &global_options_set);\n+\n   switch (code)\n     {\n     case OPT_m1:"}, {"sha": "149990d825b4ff00d60f6013b095747f545a2338", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e4542172ff9a57b56370cdd65f1b1dacbdcdf8/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e4542172ff9a57b56370cdd65f1b1dacbdcdf8/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=96e4542172ff9a57b56370cdd65f1b1dacbdcdf8", "patch": "@@ -1,6 +1,7 @@\n /* Subroutines for insn-output.c for SPARC.\n    Copyright (C) 1987, 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n+   2011\n    Free Software Foundation, Inc.\n    Contributed by Michael Tiemann (tiemann@cygnus.com)\n    64-bit SPARC-V9 support by Michael Tiemann, Jim Wilson, and Doug Evans,\n@@ -54,6 +55,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"params.h\"\n #include \"df.h\"\n #include \"dwarf2out.h\"\n+#include \"opts.h\"\n \n /* Processor costs */\n static const\n@@ -365,7 +367,8 @@ static HOST_WIDE_INT frame_base_offset;\n /* 1 if the next opcode is to be specially indented.  */\n int sparc_indent_opcode = 0;\n \n-static bool sparc_handle_option (size_t, const char *, int);\n+static bool sparc_handle_option (struct gcc_options *, struct gcc_options *,\n+\t\t\t\t const struct cl_decoded_option *, location_t);\n static void sparc_option_override (void);\n static void sparc_init_modes (void);\n static void scan_record_type (const_tree, int *, int *, int *);\n@@ -677,8 +680,16 @@ struct gcc_target targetm = TARGET_INITIALIZER;\n /* Implement TARGET_HANDLE_OPTION.  */\n \n static bool\n-sparc_handle_option (size_t code, const char *arg, int value ATTRIBUTE_UNUSED)\n+sparc_handle_option (struct gcc_options *opts, struct gcc_options *opts_set,\n+\t\t     const struct cl_decoded_option *decoded,\n+\t\t     location_t loc ATTRIBUTE_UNUSED)\n {\n+  size_t code = decoded->opt_index;\n+  const char *arg = decoded->arg;\n+\n+  gcc_assert (opts == &global_options);\n+  gcc_assert (opts_set == &global_options_set);\n+\n   switch (code)\n     {\n     case OPT_mfpu:"}, {"sha": "4a87bff10e76952f18f354112f64e95beb8a7621", "filename": "gcc/config/v850/v850.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e4542172ff9a57b56370cdd65f1b1dacbdcdf8/gcc%2Fconfig%2Fv850%2Fv850.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e4542172ff9a57b56370cdd65f1b1dacbdcdf8/gcc%2Fconfig%2Fv850%2Fv850.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.c?ref=96e4542172ff9a57b56370cdd65f1b1dacbdcdf8", "patch": "@@ -42,6 +42,7 @@\n #include \"target.h\"\n #include \"target-def.h\"\n #include \"df.h\"\n+#include \"opts.h\"\n \n #ifndef streq\n #define streq(a,b) (strcmp (a, b) == 0)\n@@ -109,8 +110,16 @@ v850_handle_memory_option (enum small_memory_type type, const char *value)\n /* Implement TARGET_HANDLE_OPTION.  */\n \n static bool\n-v850_handle_option (size_t code, const char *arg, int value ATTRIBUTE_UNUSED)\n+v850_handle_option (struct gcc_options *opts, struct gcc_options *opts_set,\n+\t\t    const struct cl_decoded_option *decoded,\n+\t\t    location_t loc ATTRIBUTE_UNUSED)\n {\n+  size_t code = decoded->opt_index;\n+  const char *arg = decoded->arg;\n+\n+  gcc_assert (opts == &global_options);\n+  gcc_assert (opts_set == &global_options_set);\n+\n   switch (code)\n     {\n     case OPT_mspace:"}, {"sha": "2afb55b496f179508aa3269c7001428c4cb3fdc5", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e4542172ff9a57b56370cdd65f1b1dacbdcdf8/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e4542172ff9a57b56370cdd65f1b1dacbdcdf8/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=96e4542172ff9a57b56370cdd65f1b1dacbdcdf8", "patch": "@@ -664,21 +664,18 @@ Its default setting is 0.\n @cindex optional hardware or system features\n @cindex features, optional, in system conventions\n \n-@deftypefn {Target Hook} bool TARGET_HANDLE_OPTION (size_t @var{code}, const char *@var{arg}, int @var{value})\n+@deftypefn {Target Hook} bool TARGET_HANDLE_OPTION (struct gcc_options *@var{opts}, struct gcc_options *@var{opts_set}, const struct cl_decoded_option *@var{decoded}, unsigned int @var{loc})\n This hook is called whenever the user specifies one of the\n target-specific options described by the @file{.opt} definition files\n (@pxref{Options}).  It has the opportunity to do some option-specific\n processing and should return true if the option is valid.  The default\n definition does nothing but return true.\n \n-@var{code} specifies the @code{OPT_@var{name}} enumeration value\n-associated with the selected option; @var{name} is just a rendering of\n-the option name in which non-alphanumeric characters are replaced by\n-underscores.  @var{arg} specifies the string argument and is null if\n-no argument was given.  If the option is flagged as a @code{UInteger}\n-(@pxref{Option properties}), @var{value} is the numeric value of the\n-argument.  Otherwise @var{value} is 1 if the positive form of the\n-option was used and 0 if the ``no-'' form was.\n+@var{decoded} specifies the option and its arguments.  @var{opts} and\n+@var{opts_set} are the @code{gcc_options} structures to be used for\n+storing option state, and @var{loc} is the location at which the\n+option was passed (@code{UNKNOWN_LOCATION} except for options passed\n+via attributes).\n @end deftypefn\n \n @deftypefn {Target Hook} bool TARGET_HANDLE_C_OPTION (size_t @var{code}, const char *@var{arg}, int @var{value})"}, {"sha": "2ceefdc085c9a42f6ae5fd46599a9192438a2bc4", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e4542172ff9a57b56370cdd65f1b1dacbdcdf8/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e4542172ff9a57b56370cdd65f1b1dacbdcdf8/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=96e4542172ff9a57b56370cdd65f1b1dacbdcdf8", "patch": "@@ -671,14 +671,11 @@ target-specific options described by the @file{.opt} definition files\n processing and should return true if the option is valid.  The default\n definition does nothing but return true.\n \n-@var{code} specifies the @code{OPT_@var{name}} enumeration value\n-associated with the selected option; @var{name} is just a rendering of\n-the option name in which non-alphanumeric characters are replaced by\n-underscores.  @var{arg} specifies the string argument and is null if\n-no argument was given.  If the option is flagged as a @code{UInteger}\n-(@pxref{Option properties}), @var{value} is the numeric value of the\n-argument.  Otherwise @var{value} is 1 if the positive form of the\n-option was used and 0 if the ``no-'' form was.\n+@var{decoded} specifies the option and its arguments.  @var{opts} and\n+@var{opts_set} are the @code{gcc_options} structures to be used for\n+storing option state, and @var{loc} is the location at which the\n+option was passed (@code{UNKNOWN_LOCATION} except for options passed\n+via attributes).\n @end deftypefn\n \n @hook TARGET_HANDLE_C_OPTION"}, {"sha": "594e34408bd72103efb9c5bd4690b198699912f5", "filename": "gcc/hooks.c", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e4542172ff9a57b56370cdd65f1b1dacbdcdf8/gcc%2Fhooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e4542172ff9a57b56370cdd65f1b1dacbdcdf8/gcc%2Fhooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.c?ref=96e4542172ff9a57b56370cdd65f1b1dacbdcdf8", "patch": "@@ -1,5 +1,5 @@\n /* General-purpose hooks.\n-   Copyright (C) 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2010\n+   Copyright (C) 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2010, 2011\n    Free Software Foundation, Inc.\n \n    This program is free software; you can redistribute it and/or modify it\n@@ -126,14 +126,6 @@ hook_bool_const_tree_hwi_hwi_const_tree_true (const_tree a ATTRIBUTE_UNUSED,\n   return true;\n }\n \n-bool\n-hook_bool_size_t_constcharptr_int_true (size_t a ATTRIBUTE_UNUSED,\n-\t\t\t\t\tconst char *b ATTRIBUTE_UNUSED,\n-\t\t\t\t\tint c ATTRIBUTE_UNUSED)\n-{\n-  return true;\n-}\n-\n bool\n default_can_output_mi_thunk_no_vcall (const_tree a ATTRIBUTE_UNUSED,\n \t\t\t\t      HOST_WIDE_INT b ATTRIBUTE_UNUSED,"}, {"sha": "90e3a14ae9a00781d51b8d2c96faabb78f54aa09", "filename": "gcc/hooks.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e4542172ff9a57b56370cdd65f1b1dacbdcdf8/gcc%2Fhooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e4542172ff9a57b56370cdd65f1b1dacbdcdf8/gcc%2Fhooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.h?ref=96e4542172ff9a57b56370cdd65f1b1dacbdcdf8", "patch": "@@ -1,5 +1,5 @@\n /* General-purpose hooks.\n-   Copyright (C) 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2010\n+   Copyright (C) 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2010, 2011\n    Free Software Foundation, Inc.\n \n    This program is free software; you can redistribute it and/or modify it\n@@ -50,7 +50,6 @@ extern bool hook_bool_rtx_false (rtx);\n extern bool hook_bool_rtx_int_false (rtx, int);\n extern bool hook_bool_uintp_uintp_false (unsigned int *, unsigned int *);\n extern bool hook_bool_rtx_int_int_intp_bool_false (rtx, int, int, int *, bool);\n-extern bool hook_bool_size_t_constcharptr_int_true (size_t, const char *, int);\n extern bool hook_bool_tree_tree_false (tree, tree);\n extern bool hook_bool_tree_tree_true (tree, tree);\n extern bool hook_bool_tree_bool_false (tree, bool);"}, {"sha": "ec4e78daf39b3a15b817ed4a67ccf5e946a686d2", "filename": "gcc/lto-opts.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e4542172ff9a57b56370cdd65f1b1dacbdcdf8/gcc%2Flto-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e4542172ff9a57b56370cdd65f1b1dacbdcdf8/gcc%2Flto-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-opts.c?ref=96e4542172ff9a57b56370cdd65f1b1dacbdcdf8", "patch": "@@ -1,6 +1,6 @@\n /* LTO IL options.\n \n-   Copyright 2009, 2010 Free Software Foundation, Inc.\n+   Copyright 2009, 2010, 2011 Free Software Foundation, Inc.\n    Contributed by Simon Baldwin <simonb@google.com>\n \n This file is part of GCC.\n@@ -413,7 +413,12 @@ lto_reissue_options (void)\n \t\t    DK_UNSPECIFIED, UNKNOWN_LOCATION, global_dc);\n \n       if (o->type == CL_TARGET)\n-\ttargetm.handle_option (o->code, o->arg, o->value);\n+\t{\n+\t  struct cl_decoded_option decoded;\n+\t  generate_option (o->code, o->arg, o->value, CL_TARGET, &decoded);\n+\t  targetm.handle_option (&global_options, &global_options_set,\n+\t\t\t\t &decoded, UNKNOWN_LOCATION);\n+\t}\n       else if (o->type == CL_COMMON)\n \tgcc_assert (flag_var);\n       else"}, {"sha": "5ea5fac4794421ef8121fd6fa84c943c37f5b578", "filename": "gcc/opts.c", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e4542172ff9a57b56370cdd65f1b1dacbdcdf8/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e4542172ff9a57b56370cdd65f1b1dacbdcdf8/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=96e4542172ff9a57b56370cdd65f1b1dacbdcdf8", "patch": "@@ -225,21 +225,13 @@ target_handle_option (struct gcc_options *opts,\n \t\t      struct gcc_options *opts_set,\n \t\t      const struct cl_decoded_option *decoded,\n \t\t      unsigned int lang_mask ATTRIBUTE_UNUSED, int kind,\n-\t\t      location_t loc ATTRIBUTE_UNUSED,\n+\t\t      location_t loc,\n \t\t      const struct cl_option_handlers *handlers ATTRIBUTE_UNUSED,\n \t\t      diagnostic_context *dc)\n {\n-  gcc_assert (opts == &global_options);\n-  gcc_assert (opts_set == &global_options_set);\n   gcc_assert (dc == global_dc);\n-  gcc_assert (decoded->canonical_option_num_elements <= 2);\n   gcc_assert (kind == DK_UNSPECIFIED);\n-  /* Although the location is not passed down to\n-     targetm.handle_option, do not make assertions about its value;\n-     options may come from optimize attributes and having the correct\n-     location in the handler is not generally important.  */\n-  return targetm.handle_option (decoded->opt_index, decoded->arg,\n-\t\t\t\tdecoded->value);\n+  return targetm.handle_option (opts, opts_set, decoded, loc);\n }\n \n /* Add comma-separated strings to a char_p vector.  */"}, {"sha": "75c821f2327636549c3205ec67475dd6cc14e549", "filename": "gcc/target.def", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e4542172ff9a57b56370cdd65f1b1dacbdcdf8/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e4542172ff9a57b56370cdd65f1b1dacbdcdf8/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=96e4542172ff9a57b56370cdd65f1b1dacbdcdf8", "patch": "@@ -1,5 +1,6 @@\n /* Target hook definitions.\n-   Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+   Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n+   2011\n    Free Software Foundation, Inc.\n \n    This program is free software; you can redistribute it and/or modify it\n@@ -1072,16 +1073,15 @@ DEFHOOK\n  void, (void),\n  hook_void_void)\n \n-/* Handle target switch CODE (an OPT_* value).  ARG is the argument\n-   passed to the switch; it is NULL if no argument was.  VALUE is the\n-   value of ARG if CODE specifies a UInteger option, otherwise it is\n-   1 if the positive form of the switch was used and 0 if the negative\n-   form was.  Return true if the switch was valid.  */\n+/* Handle target switch DECODED for options structures OPTS and\n+   OPTS_SET, at location LOC.  Return true if the switch was valid.  */\n DEFHOOK\n (handle_option,\n  \"\",\n- bool, (size_t code, const char *arg, int value),\n- hook_bool_size_t_constcharptr_int_true)\n+ bool, (struct gcc_options *opts, struct gcc_options *opts_set,\n+\tconst struct cl_decoded_option *decoded,\n+\tunsigned int /*location_t*/ loc),\n+ default_target_handle_option)\n \n /* Display extra, target specific information in response to a\n    --target-help switch.  */"}, {"sha": "7de00134429cca421205b2ea6565edb10097dc69", "filename": "gcc/targhooks.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e4542172ff9a57b56370cdd65f1b1dacbdcdf8/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e4542172ff9a57b56370cdd65f1b1dacbdcdf8/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=96e4542172ff9a57b56370cdd65f1b1dacbdcdf8", "patch": "@@ -1,5 +1,5 @@\n /* Default target hook functions.\n-   Copyright (C) 2003, 2004, 2005, 2007, 2008, 2009, 2010\n+   Copyright (C) 2003, 2004, 2005, 2007, 2008, 2009, 2010, 2011\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -1513,6 +1513,17 @@ default_pch_valid_p (const void *data_p, size_t len)\n   return NULL;\n }\n \n+/* Default version of TARGET_HANDLE_OPTION.  */\n+\n+bool\n+default_target_handle_option (struct gcc_options *opts ATTRIBUTE_UNUSED,\n+\t\t\t      struct gcc_options *opts_set ATTRIBUTE_UNUSED,\n+\t\t\t      const struct cl_decoded_option *decoded ATTRIBUTE_UNUSED,\n+\t\t\t      location_t loc ATTRIBUTE_UNUSED)\n+{\n+  return true;\n+}\n+\n const struct default_options empty_optimization_table[] =\n   {\n     { OPT_LEVELS_NONE, 0, NULL, 0 }"}, {"sha": "a2d2075ea35a5b93ba7a22f87e9314ce07328c0a", "filename": "gcc/targhooks.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e4542172ff9a57b56370cdd65f1b1dacbdcdf8/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e4542172ff9a57b56370cdd65f1b1dacbdcdf8/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=96e4542172ff9a57b56370cdd65f1b1dacbdcdf8", "patch": "@@ -1,5 +1,5 @@\n /* Default target hook functions.\n-   Copyright (C) 2003, 2004, 2005, 2007, 2008, 2009, 2010\n+   Copyright (C) 2003, 2004, 2005, 2007, 2008, 2009, 2010, 2011\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -181,5 +181,10 @@ extern enum machine_mode default_get_reg_raw_mode(int);\n \n extern const struct default_options empty_optimization_table[];\n \n+extern bool default_target_handle_option (struct gcc_options *,\n+\t\t\t\t\t  struct gcc_options *,\n+\t\t\t\t\t  const struct cl_decoded_option *,\n+\t\t\t\t\t  location_t);\n+\n extern void *default_get_pch_validity (size_t *);\n extern const char *default_pch_valid_p (const void *, size_t);"}]}