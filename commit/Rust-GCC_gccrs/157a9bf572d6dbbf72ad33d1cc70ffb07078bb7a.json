{"sha": "157a9bf572d6dbbf72ad33d1cc70ffb07078bb7a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTU3YTliZjU3MmQ2ZGJiZjcyYWQzM2QxY2M3MGZmYjA3MDc4YmI3YQ==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2007-09-10T12:48:54Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-09-10T12:48:54Z"}, "message": "sem_aggr.adb (Build_Record_Aggr_Code): If an aggregate component is given a box association...\n\n2007-09-10  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_aggr.adb (Build_Record_Aggr_Code): If an aggregate component is\n\tgiven a box association, the type of the component is discriminated,\n\tand the value of the discriminant is the discriminant of the enclosing\n\ttype, retrieve its value from the aggregate itself, where it must have\n\tbeen supplied.\n\n\t* sem_ch4.adb (Analyze_One_Call): Further refinement to previous fix,\n\tto remove other spurious ambiguities on arithmetic operations involving\n\tliterals and addresses, on systems where Address is a visible integer\n\ttype, when the operator is called in functional notation.\n\t(Try_Primitive_Operation): Within an instance, a call in prefixed form\n\tis legal when the types match, even if the operation is currently\n\thidden.\n\nFrom-SVN: r128337", "tree": {"sha": "f3bb77f4c24f0e40dc9005d043e77d31d2cce213", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f3bb77f4c24f0e40dc9005d043e77d31d2cce213"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/157a9bf572d6dbbf72ad33d1cc70ffb07078bb7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/157a9bf572d6dbbf72ad33d1cc70ffb07078bb7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/157a9bf572d6dbbf72ad33d1cc70ffb07078bb7a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/157a9bf572d6dbbf72ad33d1cc70ffb07078bb7a/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "10583694809011467d2b4578a5e263608d7e4dc3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10583694809011467d2b4578a5e263608d7e4dc3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10583694809011467d2b4578a5e263608d7e4dc3"}], "stats": {"total": 142, "additions": 103, "deletions": 39}, "files": [{"sha": "6c52b9f763b472c538bae9ba2450b333012a045a", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 31, "deletions": 4, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/157a9bf572d6dbbf72ad33d1cc70ffb07078bb7a/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/157a9bf572d6dbbf72ad33d1cc70ffb07078bb7a/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=157a9bf572d6dbbf72ad33d1cc70ffb07078bb7a", "patch": "@@ -10,14 +10,13 @@\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n -- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n -- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n -- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n -- for  more details.  You should have  received  a copy of the GNU General --\n--- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n--- to  the  Free Software Foundation,  51  Franklin  Street,  Fifth  Floor, --\n--- Boston, MA 02110-1301, USA.                                              --\n+-- Public License  distributed with GNAT; see file COPYING3.  If not, go to --\n+-- http://www.gnu.org/licenses for a complete copy of the license.          --\n --                                                                          --\n -- GNAT was originally developed  by the GNAT team at  New York University. --\n -- Extensive contributions were provided by Ada Core Technologies Inc.      --\n@@ -3039,6 +3038,8 @@ package body Sem_Aggr is\n \n                      declare\n                         Loc        : constant Source_Ptr := Sloc (N);\n+                        Assoc      : Node_Id;\n+                        Discr      : Entity_Id;\n                         Discr_Elmt : Elmt_Id;\n                         Discr_Val  : Node_Id;\n                         Expr       : Node_Id;\n@@ -3050,6 +3051,32 @@ package body Sem_Aggr is\n                           First_Elmt (Discriminant_Constraint (Ctyp));\n                         while Present (Discr_Elmt) loop\n                            Discr_Val := Node (Discr_Elmt);\n+\n+                           --  The constraint may be given by a discriminant\n+                           --  of the enclosing type, in which case we have\n+                           --  to retrieve its value, which is part of the\n+                           --  current aggregate.\n+\n+                           if Is_Entity_Name (Discr_Val)\n+                             and then\n+                               Ekind (Entity (Discr_Val)) = E_Discriminant\n+                           then\n+                              Discr := Entity (Discr_Val);\n+\n+                              Assoc := First (New_Assoc_List);\n+                              while Present (Assoc) loop\n+                                 if Present\n+                                   (Entity (First (Choices (Assoc))))\n+                                   and then\n+                                     Entity (First (Choices (Assoc))) = Discr\n+                                 then\n+                                    Discr_Val := Expression (Assoc);\n+                                    exit;\n+                                 end if;\n+                                 Next (Assoc);\n+                              end loop;\n+                           end if;\n+\n                            Append\n                              (New_Copy_Tree (Discr_Val), Expressions (Expr));\n "}, {"sha": "f72ac88886ffd449387779e5c5ae0621c797694b", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 72, "deletions": 35, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/157a9bf572d6dbbf72ad33d1cc70ffb07078bb7a/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/157a9bf572d6dbbf72ad33d1cc70ffb07078bb7a/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=157a9bf572d6dbbf72ad33d1cc70ffb07078bb7a", "patch": "@@ -10,14 +10,13 @@\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n -- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n -- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n -- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n -- for  more details.  You should have  received  a copy of the GNU General --\n--- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n--- to  the  Free Software Foundation,  51  Franklin  Street,  Fifth  Floor, --\n--- Boston, MA 02110-1301, USA.                                              --\n+-- Public License  distributed with GNAT; see file COPYING3.  If not, go to --\n+-- http://www.gnu.org/licenses for a complete copy of the license.          --\n --                                                                          --\n -- GNAT was originally developed  by the GNAT team at  New York University. --\n -- Extensive contributions were provided by Ada Core Technologies Inc.      --\n@@ -2001,6 +2000,19 @@ package body Sem_Ch4 is\n       Subp_Type  : constant Entity_Id := Etype (Nam);\n       Norm_OK    : Boolean;\n \n+      function Operator_Hidden_By (Fun : Entity_Id) return Boolean;\n+      --  There may be a user-defined operator that hides the current\n+      --  interpretation. We must check for this independently of the\n+      --  analysis of the call with the user-defined operation, because\n+      --  the parameter names may be wrong and yet the hiding takes place.\n+      --  This fixes a problem with ACATS test B34014O.\n+      --\n+      --  When the type Address is a visible integer type, and the DEC\n+      --  system extension is visible, the predefined operator may be\n+      --  hidden as well, by one of the address operations in auxdec.\n+      --  Finally, The abstract operations on address do not hide the\n+      --  predefined operator (this is the purpose of making them abstract).\n+\n       procedure Indicate_Name_And_Type;\n       --  If candidate interpretation matches, indicate name and type of\n       --  result on call node.\n@@ -2040,17 +2052,60 @@ package body Sem_Ch4 is\n          end if;\n       end Indicate_Name_And_Type;\n \n+      ------------------------\n+      -- Operator_Hidden_By --\n+      ------------------------\n+\n+      function Operator_Hidden_By (Fun : Entity_Id) return Boolean is\n+         Act1  : constant Node_Id   := First_Actual (N);\n+         Act2  : constant Node_Id   := Next_Actual (Act1);\n+         Form1 : constant Entity_Id := First_Formal (Fun);\n+         Form2 : constant Entity_Id := Next_Formal (Form1);\n+\n+      begin\n+         if Ekind (Fun) /= E_Function\n+           or else Is_Abstract_Subprogram (Fun)\n+         then\n+            return False;\n+\n+         elsif not Has_Compatible_Type (Act1, Etype (Form1)) then\n+            return False;\n+\n+         elsif Present (Form2) then\n+            if\n+              No (Act2) or else not Has_Compatible_Type (Act2, Etype (Form2))\n+            then\n+               return False;\n+            end if;\n+\n+         elsif Present (Act2) then\n+            return False;\n+         end if;\n+\n+         --  Now we know that the arity of the operator matches the function,\n+         --  and the function call is a valid interpretation. The function\n+         --  hides the operator if it has the right signature, or if one of\n+         --  its operands is a non-abstract operation on Address when this is\n+         --  a visible integer type.\n+\n+         return Hides_Op (Fun, Nam)\n+           or else Is_Descendent_Of_Address (Etype (Form1))\n+           or else\n+             (Present (Form2)\n+               and then Is_Descendent_Of_Address (Etype (Form2)));\n+      end Operator_Hidden_By;\n+\n    --  Start of processing for Analyze_One_Call\n \n    begin\n       Success := False;\n \n-      --  If the subprogram has no formals, or if all the formals have\n-      --  defaults, and the return type is an array type, the node may\n-      --  denote an indexing of the result of a parameterless call.\n-      --  In Ada 2005, the subprogram may have one non-defaulted formal,\n-      --  and the call may have been written in prefix notation, so that\n-      --  the rebuilt parameter list has more than one actual.\n+      --  If the subprogram has no formals or if all the formals have defaults,\n+      --  and the return type is an array type, the node may denote an indexing\n+      --  of the result of a parameterless call. In Ada 2005, the subprogram\n+      --  may have one non-defaulted formal, and the call may have been written\n+      --  in prefix notation, so that the rebuilt parameter list has more than\n+      --  one actual.\n \n       if Present (Actuals)\n         and then\n@@ -2131,13 +2186,7 @@ package body Sem_Ch4 is\n \n          if Etype (N) /= Prev_T then\n \n-            --  There may be a user-defined operator that hides the\n-            --  current interpretation. We must check for this independently\n-            --  of the analysis of the call with the user-defined operation,\n-            --  because the parameter names may be wrong and yet the hiding\n-            --  takes place. Fixes b34014o.\n-            --  The abstract operations on address do not hide the predefined\n-            --  operator (this is the purpose of making them abstract).\n+            --  Check that operator is not hidden by a function interpretation\n \n             if Is_Overloaded (Name (N)) then\n                declare\n@@ -2147,21 +2196,7 @@ package body Sem_Ch4 is\n                begin\n                   Get_First_Interp (Name (N), I, It);\n                   while Present (It.Nam) loop\n-                     if Ekind (It.Nam) /= E_Operator\n-                        and then not\n-                          (Is_Abstract_Subprogram (It.Nam)\n-                            and then\n-                              Is_Descendent_Of_Address\n-                                 (Etype (First_Formal (It.Nam))))\n-                        and then Hides_Op (It.Nam, Nam)\n-                        and then\n-                          Has_Compatible_Type\n-                            (First_Actual (N), Etype (First_Formal (It.Nam)))\n-                        and then (No (Next_Actual (First_Actual (N)))\n-                           or else Has_Compatible_Type\n-                            (Next_Actual (First_Actual (N)),\n-                             Etype (Next_Formal (First_Formal (It.Nam)))))\n-                     then\n+                     if Operator_Hidden_By (It.Nam) then\n                         Set_Etype (N, Prev_T);\n                         return;\n                      end if;\n@@ -5926,11 +5961,13 @@ package body Sem_Ch4 is\n                                              (Alias (Prim_Op)), Corr_Type))\n                  or else\n \n-               --  Do not consider hidden primitives unless they belong to a\n-               --  generic private type with a tagged parent.\n+               --  Do not consider hidden primitives unless the type is\n+               --  in an open scope or we are within an instance, where\n+               --  visibility is known to be correct.\n \n                   (Is_Hidden (Prim_Op)\n-                     and then not Is_Immediately_Visible (Obj_Type))\n+                     and then not Is_Immediately_Visible (Obj_Type)\n+                     and then not In_Instance)\n                then\n                   goto Continue;\n                end if;"}]}