{"sha": "318a91e6baec6dfb406bc069866789c0a11b01e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzE4YTkxZTZiYWVjNmRmYjQwNmJjMDY5ODY2Nzg5YzBhMTFiMDFlMA==", "commit": {"author": {"name": "SimplyTheOther", "email": "simplytheother@gmail.com", "date": "2020-08-25T12:55:08Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2020-11-28T21:13:20Z"}, "message": "Massive lexer cleanup and refactoring - moved lots of stuff out of main method\nMinor changes to parse_non_decimal_int_literal to fix naming\nAnother minor fix regarding naming in lexer\nMore lexer refactoring to reduce size of build_token() method", "tree": {"sha": "4ed8bfdb9358c42b72f6a012c8498b63cce19c19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ed8bfdb9358c42b72f6a012c8498b63cce19c19"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/318a91e6baec6dfb406bc069866789c0a11b01e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/318a91e6baec6dfb406bc069866789c0a11b01e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/318a91e6baec6dfb406bc069866789c0a11b01e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/318a91e6baec6dfb406bc069866789c0a11b01e0/comments", "author": {"login": "SimplyTheOther", "id": 19371469, "node_id": "MDQ6VXNlcjE5MzcxNDY5", "avatar_url": "https://avatars.githubusercontent.com/u/19371469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimplyTheOther", "html_url": "https://github.com/SimplyTheOther", "followers_url": "https://api.github.com/users/SimplyTheOther/followers", "following_url": "https://api.github.com/users/SimplyTheOther/following{/other_user}", "gists_url": "https://api.github.com/users/SimplyTheOther/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimplyTheOther/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimplyTheOther/subscriptions", "organizations_url": "https://api.github.com/users/SimplyTheOther/orgs", "repos_url": "https://api.github.com/users/SimplyTheOther/repos", "events_url": "https://api.github.com/users/SimplyTheOther/events{/privacy}", "received_events_url": "https://api.github.com/users/SimplyTheOther/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce72a38e081426b508fe799e7a0005bfcea7daa8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce72a38e081426b508fe799e7a0005bfcea7daa8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce72a38e081426b508fe799e7a0005bfcea7daa8"}], "stats": {"total": 4499, "additions": 2232, "deletions": 2267}, "files": [{"sha": "b299e950e0bf332982ffa4e288953d813b0cfdb9", "filename": ".gitignore", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/318a91e6baec6dfb406bc069866789c0a11b01e0/.gitignore", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/318a91e6baec6dfb406bc069866789c0a11b01e0/.gitignore", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/.gitignore?ref=318a91e6baec6dfb406bc069866789c0a11b01e0", "patch": "@@ -59,3 +59,10 @@ REVISION\n /mpc*\n /gmp*\n /isl*\n+\n+# ADDITIONS from GCCRS front-end\n+.vscode/*\n+test.code-workspace\n+\n+gcc/rust/test3-tiny/*\n+.clang-format.swap"}, {"sha": "1f0f9cbb244ee652dcb5d2a0ae7e98e281654f03", "filename": "gcc/rust/lex/rust-lex.cc", "status": "modified", "additions": 2194, "deletions": 2242, "changes": 4436, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/318a91e6baec6dfb406bc069866789c0a11b01e0/gcc%2Frust%2Flex%2Frust-lex.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/318a91e6baec6dfb406bc069866789c0a11b01e0/gcc%2Frust%2Flex%2Frust-lex.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flex%2Frust-lex.cc?ref=318a91e6baec6dfb406bc069866789c0a11b01e0"}, {"sha": "8a031ed32513583e2f5a8c13d9ec4150cb1bc1d0", "filename": "gcc/rust/lex/rust-lex.h", "status": "modified", "additions": 31, "deletions": 25, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/318a91e6baec6dfb406bc069866789c0a11b01e0/gcc%2Frust%2Flex%2Frust-lex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/318a91e6baec6dfb406bc069866789c0a11b01e0/gcc%2Frust%2Flex%2Frust-lex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flex%2Frust-lex.h?ref=318a91e6baec6dfb406bc069866789c0a11b01e0", "patch": "@@ -31,28 +31,37 @@ class Lexer\n   // Builds a token from the input queue.\n   TokenPtr build_token ();\n \n-  // ok maybe all these may mean the lexer structure needs to be rethought\n-  /* separated into functions because main method was too long, but they rely on\n-   * and change state in the lexer, so variables must be passed by reference. */\n   std::pair<std::string, int> parse_in_decimal ();\n   std::pair<std::string, int> parse_in_exponent_part ();\n   std::pair<PrimitiveCoreType, int> parse_in_type_suffix ();\n-  /*bool parse_ascii_escape (int &length,\n-\t\t\t\t  char &output_char);*/\n-  /*bool parse_quote_escape (char& current_char, int &length,\n-\t\t\t\t  char &output_char);*/\n-  /*bool parse_unicode_escape (\n-    char& current_char, int &length, Codepoint &output_char);*/\n-  /*bool parse_byte_escape (char& current_char, int &length,\n-\t\t\t\t char &output_char);*/\n   std::tuple<char, int, bool> parse_escape (char opening_char);\n   std::tuple<Codepoint, int, bool> parse_utf8_escape (char opening_char);\n-  int test_get_input_codepoint_length ();\n+  int parse_partial_string_continue ();\n+  std::pair<long, int> parse_partial_hex_escape ();\n+  std::pair<Codepoint, int> parse_partial_unicode_escape ();\n+\n+  int get_input_codepoint_length ();\n   int test_get_input_codepoint_n_length (int n_start_offset);\n-  Codepoint test_peek_codepoint_input ();\n-  Codepoint test_peek_codepoint_input (\n-    int n); // maybe can use get_input_codepoint_length to get starting index\n-  void test_skip_codepoint_input ();\n+  Codepoint peek_codepoint_input ();\n+  Codepoint test_peek_codepoint_input (int n);\n+  void skip_codepoint_input ();\n+\n+  TokenPtr parse_byte_char (Location loc);\n+  TokenPtr parse_byte_string (Location loc);\n+  TokenPtr parse_raw_byte_string (Location loc);\n+  TokenPtr parse_raw_identifier (Location loc);\n+  TokenPtr parse_string (Location loc);\n+  TokenPtr maybe_parse_raw_string (Location loc);\n+  TokenPtr parse_raw_string (Location loc, int initial_hash_count);\n+  TokenPtr parse_non_decimal_int_literals (Location loc);\n+  TokenPtr parse_decimal_int_or_float (Location loc);\n+  TokenPtr parse_char_or_lifetime (Location loc);\n+  TokenPtr parse_identifier_or_keyword (Location loc);\n+\n+  template <typename IsDigitFunc>\n+  TokenPtr parse_non_decimal_int_literal (Location loc,\n+\t\t\t\t\t  IsDigitFunc is_digit_func,\n+\t\t\t\t\t  std::string existent_str, int base);\n \n public:\n   // Construct lexer with input file and filename provided\n@@ -68,14 +77,14 @@ class Lexer\n   Lexer &operator= (Lexer &&other) = default;\n \n   // Returns token n tokens ahead of current position.\n-  const_TokenPtr peek_token (int n);\n+  const_TokenPtr peek_token (int n) { return token_queue.peek (n); }\n   // Peeks the current token.\n-  const_TokenPtr peek_token ();\n+  const_TokenPtr peek_token () { return peek_token (0); }\n \n   // Advances current token to n + 1 tokens ahead of current position.\n-  void skip_token (int n);\n+  void skip_token (int n) { token_queue.skip (n); }\n   // Skips the current token.\n-  void skip_token ();\n+  void skip_token () { skip_token (0); }\n \n   // Replaces the current token with a specified token.\n   void replace_current_token (TokenPtr replacement);\n@@ -90,6 +99,8 @@ class Lexer\n   int current_line;\n   // Current column number.\n   int current_column;\n+  // Current character.\n+  int current_char;\n   // Line map.\n   Linemap *line_map;\n \n@@ -132,11 +143,6 @@ class Lexer\n   TokenSource token_source;\n   // Token stream queue.\n   buffered_queue<std::shared_ptr<Token>, TokenSource> token_queue;\n-\n-  // START CRAPPY CHANGES\n-  int current_char;\n-\n-  // END CRAPPY CHANGES\n };\n } // namespace Rust\n "}]}