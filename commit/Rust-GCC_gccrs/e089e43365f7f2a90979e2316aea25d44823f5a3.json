{"sha": "e089e43365f7f2a90979e2316aea25d44823f5a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTA4OWU0MzM2NWY3ZjJhOTA5NzllMjMxNmFlYTI1ZDQ0ODIzZjVhMw==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2020-10-07T12:12:49Z"}, "committer": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2020-10-07T12:12:49Z"}, "message": "ipa-prop: Fix multiple-target speculation resolution\n\nAs the FIXME which this patch removes states, the current code does\nnot work when a call with multiple speculative targets gets resolved\nthrough parameter tracking during inlining - it feeds the inliner an\nedge it has already dealt with.  The patch makes the code which should\nprevent it aware of the possibility that that speculation can have\nmore than one target now.\n\ngcc/ChangeLog:\n\n2020-09-30  Martin Jambor  <mjambor@suse.cz>\n\n\tPR ipa/96394\n\t* ipa-prop.c (update_indirect_edges_after_inlining): Do not add\n\tresolved speculation edges to vector of new direct edges even in\n\tpresence of multiple speculative direct edges for a single call.\n\ngcc/testsuite/ChangeLog:\n\n2020-09-30  Martin Jambor  <mjambor@suse.cz>\n\n\tPR ipa/96394\n\t* gcc.dg/tree-prof/pr96394.c: New test.", "tree": {"sha": "5bfc4afe0739878724545014f51f7f8a9cf6bc88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5bfc4afe0739878724545014f51f7f8a9cf6bc88"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e089e43365f7f2a90979e2316aea25d44823f5a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e089e43365f7f2a90979e2316aea25d44823f5a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e089e43365f7f2a90979e2316aea25d44823f5a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e089e43365f7f2a90979e2316aea25d44823f5a3/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99e9b54313dbb8fdb3d2a354c9554478cc33e234", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99e9b54313dbb8fdb3d2a354c9554478cc33e234", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99e9b54313dbb8fdb3d2a354c9554478cc33e234"}], "stats": {"total": 74, "additions": 70, "deletions": 4}, "files": [{"sha": "2d09d9130519e4ceeeda48e52b182df4b271e2fb", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e089e43365f7f2a90979e2316aea25d44823f5a3/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e089e43365f7f2a90979e2316aea25d44823f5a3/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=e089e43365f7f2a90979e2316aea25d44823f5a3", "patch": "@@ -3787,11 +3787,13 @@ update_indirect_edges_after_inlining (struct cgraph_edge *cs,\n \n       param_index = ici->param_index;\n       jfunc = ipa_get_ith_jump_func (top, param_index);\n-      cgraph_node *spec_target = NULL;\n \n-      /* FIXME: This may need updating for multiple calls.  */\n+      auto_vec<cgraph_node *, 4> spec_targets;\n       if (ie->speculative)\n-\tspec_target = ie->first_speculative_call_target ()->callee;\n+\tfor (cgraph_edge *direct = ie->first_speculative_call_target ();\n+\t     direct;\n+\t     direct = direct->next_speculative_call_target ())\n+\t  spec_targets.safe_push (direct->callee);\n \n       if (!opt_for_fn (node->decl, flag_indirect_inlining))\n \tnew_direct_edge = NULL;\n@@ -3814,7 +3816,7 @@ update_indirect_edges_after_inlining (struct cgraph_edge *cs,\n \n       /* If speculation was removed, then we need to do nothing.  */\n       if (new_direct_edge && new_direct_edge != ie\n-\t  && new_direct_edge->callee == spec_target)\n+\t  && spec_targets.contains (new_direct_edge->callee))\n \t{\n \t  new_direct_edge->indirect_inlining_edge = 1;\n \t  top = IPA_EDGE_REF (cs);"}, {"sha": "4280182a7c30148d1eec66f2b183a0764ae39750", "filename": "gcc/testsuite/gcc.dg/tree-prof/pr96394.c", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e089e43365f7f2a90979e2316aea25d44823f5a3/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fpr96394.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e089e43365f7f2a90979e2316aea25d44823f5a3/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fpr96394.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fpr96394.c?ref=e089e43365f7f2a90979e2316aea25d44823f5a3", "patch": "@@ -0,0 +1,64 @@\n+/* PR ipa/96394 */\n+/* { dg-options \"-O2\" } */\n+\n+typedef struct _entry {\n+    int has_next;\n+    int next_ix;\n+    int count;\n+} entry;\n+\n+extern entry table[];\n+\n+void *\n+__attribute__((noipa))\n+PyErr_Format(entry * e){ return 0; }\n+\n+void ae(entry *);\n+int h(entry *);\n+int ap(entry *);\n+int ag(entry *);\n+\n+int ag(entry *j) {\n+  if (j->has_next)\n+    h(&table[j->next_ix]);\n+  return 0;\n+}\n+static int ai(entry *j, int k(entry *), int l, int m) {\n+  int am = 1;\n+  int ab;\n+\n+  /* k is either 'h' or 'ap': 50%/50% */\n+  ab = k(j);\n+\n+  /* loop never gets executed on real data */\n+  for (; j->count >= 2; am += 2)\n+    if (l) {\n+      entry *i = &table[am + m];\n+      PyErr_Format(i);\n+    }\n+  return ab;\n+}\n+void\n+__attribute__((noipa))\n+bug() {\n+  h(table);\n+  h(table);\n+}\n+int h(entry *j) { return ai(j, ap, 4, 5); }\n+int ap(entry *j) { return ai(j, ag, 14, 4); }\n+\n+int main(void)\n+{\n+    bug();\n+}\n+\n+entry table[2] = {\n+    { .has_next = 1\n+    , .next_ix  = 1\n+    , .count    = 0\n+    },\n+    { .has_next = 0\n+    , .next_ix  = 0\n+    , .count    = 0\n+    },\n+};"}]}