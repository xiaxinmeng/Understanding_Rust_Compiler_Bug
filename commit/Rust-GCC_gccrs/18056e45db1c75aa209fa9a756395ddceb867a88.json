{"sha": "18056e45db1c75aa209fa9a756395ddceb867a88", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTgwNTZlNDVkYjFjNzVhYTIwOWZhOWE3NTYzOTVkZGNlYjg2N2E4OA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-08-31T13:00:23Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-08-31T22:28:59Z"}, "message": "analyzer: fix ICE on unknown index in CONSTRUCTOR [PR96860]\n\nPR analyzer/96860 reports an ICE inside CONSTRUCTOR-handling with\n--param analyzer-max-svalue-depth=0 when attempting to build a\nbinding_map for the CONSTRUCTOR's values.\n\nThe issue is that when handling (index, value) pairs for initializing\nan array, the index values for the elements exceeds the svalue\ncomplexity limit, and the index is thus treated as unknown, leading to\na symbolic rather than concrete offset for each array element.\n\nThis patch updates the CONSTRUCTOR-handling code so that it can\nfail, returning an unknown value for the overall value of the\nconstructor for this case, fixing the ICE.\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/96860\n\t* region.cc (decl_region::get_svalue_for_constructor): Support\n\tapply_ctor_to_region failing.\n\t* store.cc (binding_map::apply_ctor_to_region): Add failure\n\thandling.\n\t(binding_map::apply_ctor_val_to_range): Likewise.\n\t(binding_map::apply_ctor_pair_to_child_region): Likewise.  Replace\n\tassertion that child_base_offset is not symbolic with error\n\thandling.\n\t* store.h (binding_map::apply_ctor_to_region): Convert return type\n\tfrom void to bool.\n\t(binding_map::apply_ctor_val_to_range): Likewise.\n\t(binding_map::apply_ctor_pair_to_child_region): Likewise.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/96860\n\t* gcc.dg/analyzer/pr96860-1.c: New test.\n\t* gcc.dg/analyzer/pr96860-2.c: New test.", "tree": {"sha": "0a2207a90419a73af0bcf0086cb1c3a6a45d35a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a2207a90419a73af0bcf0086cb1c3a6a45d35a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/18056e45db1c75aa209fa9a756395ddceb867a88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18056e45db1c75aa209fa9a756395ddceb867a88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18056e45db1c75aa209fa9a756395ddceb867a88", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18056e45db1c75aa209fa9a756395ddceb867a88/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73a2b8dd17dbc02c0c7e6286e90f17833aa50906", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73a2b8dd17dbc02c0c7e6286e90f17833aa50906", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73a2b8dd17dbc02c0c7e6286e90f17833aa50906"}], "stats": {"total": 59, "additions": 45, "deletions": 14}, "files": [{"sha": "53f32dc912c12fa591ba73162e9bd476e908d256", "filename": "gcc/analyzer/region.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18056e45db1c75aa209fa9a756395ddceb867a88/gcc%2Fanalyzer%2Fregion.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18056e45db1c75aa209fa9a756395ddceb867a88/gcc%2Fanalyzer%2Fregion.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion.cc?ref=18056e45db1c75aa209fa9a756395ddceb867a88", "patch": "@@ -904,7 +904,8 @@ decl_region::get_svalue_for_constructor (tree ctor,\n      decl_region as the base region when building child regions\n      for offset calculations.  */\n   binding_map map;\n-  map.apply_ctor_to_region (this, ctor, mgr);\n+  if (!map.apply_ctor_to_region (this, ctor, mgr))\n+    return mgr->get_or_create_unknown_svalue (get_type ());\n \n   /* Return a compound svalue for the map we built.  */\n   return mgr->get_or_create_compound_svalue (get_type (), map);"}, {"sha": "7f15aa92492977e957d5747dcaaf7e8661f76e52", "filename": "gcc/analyzer/store.cc", "status": "modified", "additions": 23, "deletions": 10, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18056e45db1c75aa209fa9a756395ddceb867a88/gcc%2Fanalyzer%2Fstore.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18056e45db1c75aa209fa9a756395ddceb867a88/gcc%2Fanalyzer%2Fstore.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fstore.cc?ref=18056e45db1c75aa209fa9a756395ddceb867a88", "patch": "@@ -402,9 +402,11 @@ get_svalue_for_ctor_val (tree val, region_model_manager *mgr)\n }\n \n /* Bind values from CONSTRUCTOR to this map, relative to\n-   PARENT_REG's relationship to its base region.  */\n+   PARENT_REG's relationship to its base region.\n+   Return true if successful, false if there was a problem (e.g. due\n+   to hitting a complexity limit).  */\n \n-void\n+bool\n binding_map::apply_ctor_to_region (const region *parent_reg, tree ctor,\n \t\t\t\t   region_model_manager *mgr)\n {\n@@ -423,18 +425,24 @@ binding_map::apply_ctor_to_region (const region *parent_reg, tree ctor,\n \t{\n \t  tree min_index = TREE_OPERAND (index, 0);\n \t  tree max_index = TREE_OPERAND (index, 1);\n-\t  apply_ctor_val_to_range (parent_reg, mgr, min_index, max_index, val);\n+\t  if (!apply_ctor_val_to_range (parent_reg, mgr,\n+\t\t\t\t\tmin_index, max_index, val))\n+\t    return false;\n \t  continue;\n \t}\n-      apply_ctor_pair_to_child_region (parent_reg, mgr, index, val);\n+      if (!apply_ctor_pair_to_child_region (parent_reg, mgr, index, val))\n+\treturn false;\n     }\n+  return true;\n }\n \n /* Bind the value VAL into the range of elements within PARENT_REF\n    from MIN_INDEX to MAX_INDEX (including endpoints).\n-   For use in handling RANGE_EXPR within a CONSTRUCTOR.  */\n+   For use in handling RANGE_EXPR within a CONSTRUCTOR.\n+   Return true if successful, false if there was a problem (e.g. due\n+   to hitting a complexity limit).  */\n \n-void\n+bool\n binding_map::apply_ctor_val_to_range (const region *parent_reg,\n \t\t\t\t      region_model_manager *mgr,\n \t\t\t\t      tree min_index, tree max_index,\n@@ -469,20 +477,23 @@ binding_map::apply_ctor_val_to_range (const region *parent_reg,\n \n   /* Bind the value to the range.  */\n   put (range_key, sval);\n+  return true;\n }\n \n /* Bind the value VAL into INDEX within PARENT_REF.\n-   For use in handling a pair of entries within a CONSTRUCTOR.  */\n+   For use in handling a pair of entries within a CONSTRUCTOR.\n+   Return true if successful, false if there was a problem (e.g. due\n+   to hitting a complexity limit).  */\n \n-void\n+bool\n binding_map::apply_ctor_pair_to_child_region (const region *parent_reg,\n \t\t\t\t\t      region_model_manager *mgr,\n \t\t\t\t\t      tree index, tree val)\n {\n   const region *child_reg\n     = get_subregion_within_ctor (parent_reg, index, mgr);\n   if (TREE_CODE (val) == CONSTRUCTOR)\n-    apply_ctor_to_region (child_reg, val, mgr);\n+    return apply_ctor_to_region (child_reg, val, mgr);\n   else\n     {\n       const svalue *sval = get_svalue_for_ctor_val (val, mgr);\n@@ -502,7 +513,8 @@ binding_map::apply_ctor_pair_to_child_region (const region *parent_reg,\n \t  bit_size_t sval_bit_size = sval_byte_size * BITS_PER_UNIT;\n \t  /* Get offset of child relative to base region.  */\n \t  region_offset child_base_offset = child_reg->get_offset ();\n-\t  gcc_assert (!child_base_offset.symbolic_p ());\n+\t  if (child_base_offset.symbolic_p ())\n+\t    return false;\n \t  /* Convert to an offset relative to the parent region.  */\n \t  region_offset parent_base_offset = parent_reg->get_offset ();\n \t  gcc_assert (!parent_base_offset.symbolic_p ());\n@@ -515,6 +527,7 @@ binding_map::apply_ctor_pair_to_child_region (const region *parent_reg,\n \t}\n       gcc_assert (k->concrete_p ());\n       put (k, sval);\n+      return true;\n     }\n }\n "}, {"sha": "83a43107b218b2a375dc8e62b9230bdf251f0eec", "filename": "gcc/analyzer/store.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18056e45db1c75aa209fa9a756395ddceb867a88/gcc%2Fanalyzer%2Fstore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18056e45db1c75aa209fa9a756395ddceb867a88/gcc%2Fanalyzer%2Fstore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fstore.h?ref=18056e45db1c75aa209fa9a756395ddceb867a88", "patch": "@@ -340,15 +340,15 @@ class binding_map\n   void dump_to_pp (pretty_printer *pp, bool simple, bool multiline) const;\n   void dump (bool simple) const;\n \n-  void apply_ctor_to_region (const region *parent_reg, tree ctor,\n+  bool apply_ctor_to_region (const region *parent_reg, tree ctor,\n \t\t\t     region_model_manager *mgr);\n \n private:\n-  void apply_ctor_val_to_range (const region *parent_reg,\n+  bool apply_ctor_val_to_range (const region *parent_reg,\n \t\t\t\tregion_model_manager *mgr,\n \t\t\t\ttree min_index, tree max_index,\n \t\t\t\ttree val);\n-  void apply_ctor_pair_to_child_region (const region *parent_reg,\n+  bool apply_ctor_pair_to_child_region (const region *parent_reg,\n \t\t\t\t\tregion_model_manager *mgr,\n \t\t\t\t\ttree index, tree val);\n "}, {"sha": "8f298ec04e7178363a7f198f1f6acd2c77a67f07", "filename": "gcc/testsuite/gcc.dg/analyzer/pr96860-1.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18056e45db1c75aa209fa9a756395ddceb867a88/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr96860-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18056e45db1c75aa209fa9a756395ddceb867a88/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr96860-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr96860-1.c?ref=18056e45db1c75aa209fa9a756395ddceb867a88", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-require-effective-target int128 } */\n+/* { dg-additional-options \"--param analyzer-max-svalue-depth=0\" } */\n+\n+void x7 (void)\n+{\n+  __int128 z5[] = {\n+    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1,\n+  };\n+}"}, {"sha": "90a818cb2836a3cea66cc367891e1720a49fd3d8", "filename": "gcc/testsuite/gcc.dg/analyzer/pr96860-2.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18056e45db1c75aa209fa9a756395ddceb867a88/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr96860-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18056e45db1c75aa209fa9a756395ddceb867a88/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr96860-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr96860-2.c?ref=18056e45db1c75aa209fa9a756395ddceb867a88", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-additional-options \"--param analyzer-max-svalue-depth=0\" } */\n+\n+void x7 (void)\n+{\n+  long z5[] = {\n+    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1,\n+  };\n+}"}]}