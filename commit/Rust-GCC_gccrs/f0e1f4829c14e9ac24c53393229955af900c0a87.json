{"sha": "f0e1f4829c14e9ac24c53393229955af900c0a87", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjBlMWY0ODI5YzE0ZTlhYzI0YzUzMzkzMjI5OTU1YWY5MDBjMGE4Nw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2002-03-21T07:14:18Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2002-03-21T07:14:18Z"}, "message": "re PR bootstrap/4195 (mn10200-elf fails building libgcc __ffssi2)\n\n\tPR bootstrap/4195\n\t* genrecog.c (maybe_both_true_mode): Remove.\n\t(maybe_both_true_2, write_switch): Revert 2001-07-17 changes.\n\t* machmode.def (Pmode): Likewise.\n\nFrom-SVN: r51115", "tree": {"sha": "dc4ae75d5f956b3b89aa319c1c4162e8c844d5e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc4ae75d5f956b3b89aa319c1c4162e8c844d5e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f0e1f4829c14e9ac24c53393229955af900c0a87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0e1f4829c14e9ac24c53393229955af900c0a87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0e1f4829c14e9ac24c53393229955af900c0a87", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0e1f4829c14e9ac24c53393229955af900c0a87/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c14b9960142c1daeff4f6098819beaed1edae50e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c14b9960142c1daeff4f6098819beaed1edae50e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c14b9960142c1daeff4f6098819beaed1edae50e"}], "stats": {"total": 52, "additions": 10, "deletions": 42}, "files": [{"sha": "0a06dbd1b20953d5e087098e1110fa6b3e13ed8e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0e1f4829c14e9ac24c53393229955af900c0a87/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0e1f4829c14e9ac24c53393229955af900c0a87/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f0e1f4829c14e9ac24c53393229955af900c0a87", "patch": "@@ -1,3 +1,10 @@\n+2002-03-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR bootstrap/4195\n+\t* genrecog.c (maybe_both_true_mode): Remove.\n+\t(maybe_both_true_2, write_switch): Revert 2001-07-17 changes.\n+\t* machmode.def (Pmode): Likewise.\n+\n Thu Mar 21 01:55:06 EST 2002  John Wehle  (john@feith.com)\n \n \t* alias.c: (nonlocal_mentioned_p): Use for_each_rtx."}, {"sha": "1e8f8545f1c431aed70ba20bd7e6f097b1938bbb", "filename": "gcc/genrecog.c", "status": "modified", "additions": 2, "deletions": 34, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0e1f4829c14e9ac24c53393229955af900c0a87/gcc%2Fgenrecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0e1f4829c14e9ac24c53393229955af900c0a87/gcc%2Fgenrecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenrecog.c?ref=f0e1f4829c14e9ac24c53393229955af900c0a87", "patch": "@@ -238,8 +238,6 @@ static void validate_pattern\n static struct decision *add_to_sequence\n   PARAMS ((rtx, struct decision_head *, const char *, enum routine_type, int));\n \n-static int maybe_both_true_mode\n-  PARAMS ((enum machine_mode, enum machine_mode));\n static int maybe_both_true_2\n   PARAMS ((struct decision_test *, struct decision_test *));\n static int maybe_both_true_1\n@@ -1056,29 +1054,6 @@ add_to_sequence (pattern, last, position, insn_type, top)\n   return sub;\n }\n \f\n-/* A subroutine of maybe_both_true; compares two modes.\n-   Returns > 0 for \"definitely both true\" and < 0 for \"maybe both true\".  */\n-\n-static int\n-maybe_both_true_mode (m1, m2)\n-     enum machine_mode m1, m2;\n-{\n-  enum mode_class other_mode_class;\n-\n-  /* Pmode is not a distinct mode.  We do know that it is\n-     either MODE_INT or MODE_PARTIAL_INT though.  */\n-  if (m1 == Pmode)\n-    other_mode_class = GET_MODE_CLASS (m2);\n-  else if (m2 == Pmode)\n-    other_mode_class = GET_MODE_CLASS (m1);\n-  else\n-    return m1 == m2;\n-\n-  return (other_mode_class == MODE_INT\n-\t  || other_mode_class == MODE_PARTIAL_INT\n-\t  ? -1 : 0);\n-}\n-\n /* A subroutine of maybe_both_true; examines only one test.\n    Returns > 0 for \"definitely both true\" and < 0 for \"maybe both true\".  */\n \n@@ -1091,7 +1066,7 @@ maybe_both_true_2 (d1, d2)\n       switch (d1->type)\n \t{\n \tcase DT_mode:\n-\t  return maybe_both_true_mode (d1->u.mode, d2->u.mode);\n+\t  return d1->u.mode == d2->u.mode;\n \n \tcase DT_code:\n \t  return d1->u.code == d2->u.code;\n@@ -1127,7 +1102,7 @@ maybe_both_true_2 (d1, d2)\n \t{\n \t  if (d2->type == DT_mode)\n \t    {\n-\t      if (maybe_both_true_mode (d1->u.pred.mode, d2->u.mode) == 0\n+\t      if (d1->u.pred.mode != d2->u.mode\n \t\t  /* The mode of an address_operand predicate is the\n \t\t     mode of the memory, not the operand.  It can only\n \t\t     be used for testing the predicate, so we must\n@@ -1910,9 +1885,6 @@ write_switch (start, depth)\n \t   || type == DT_elt_zero_wide_safe)\n     {\n       const char *indent = \"\";\n-      /* Pmode may not be a compile-time constant.  */\n-      if (type == DT_mode && p->tests->u.mode == Pmode)\n-\treturn p;\n \n       /* We cast switch parameter to integer, so we must ensure that the value\n \t fits.  */\n@@ -1956,10 +1928,6 @@ write_switch (start, depth)\n \t    if (nodes_identical_1 (p->tests, q->tests))\n \t      goto case_done;\n \n-\t  /* Pmode may not be a compile-time constant.  */\n-\t  if (type == DT_mode && p->tests->u.mode == Pmode)\n-\t    goto case_done;\n-\n \t  if (p != start && p->need_label && needs_label == NULL)\n \t    needs_label = p;\n "}, {"sha": "eedff972d997f4dd2458a823fc2843054bfa902e", "filename": "gcc/machmode.def", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0e1f4829c14e9ac24c53393229955af900c0a87/gcc%2Fmachmode.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0e1f4829c14e9ac24c53393229955af900c0a87/gcc%2Fmachmode.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmachmode.def?ref=f0e1f4829c14e9ac24c53393229955af900c0a87", "patch": "@@ -165,14 +165,7 @@ EXTRA_CC_MODES\n #undef CC\n \n /* The symbol Pmode stands for one of the above machine modes (usually SImode).\n-   The tm file specifies which one.  It is not a distinct mode.  Nevertheless,\n-   while processing the md file, we wish to treat as a distinct mode so that \n-   it is preserved intact through to the insn-foo.c files.  This eliminates a\n-   lot of redundancy in ports that support both 32-bit and 64-bit targets.  */\n-#ifdef GENERATOR_FILE\n-#undef Pmode\n-DEF_MACHMODE (Pmode, \"P\", MODE_RANDOM, 0, 0, 0, VOIDmode, VOIDmode)\n-#endif\n+   The tm file specifies which one.  It is not a distinct mode.  */\n \n /*\n Local variables:"}]}