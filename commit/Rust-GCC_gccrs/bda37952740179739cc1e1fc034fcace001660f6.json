{"sha": "bda37952740179739cc1e1fc034fcace001660f6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmRhMzc5NTI3NDAxNzk3MzljYzFlMWZjMDM0ZmNhY2UwMDE2NjBmNg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2008-04-28T20:43:27Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2008-04-28T20:43:27Z"}, "message": "re PR c++/57 ([DR 325] GCC can't parse a non-parenthesized comma in a template-id within a default argument)\n\n        PR c++/57\n        * parser.c (cp_parser_parameter_declaration): Handle < ambiguity\n        in default arguments.\n\nCo-Authored-By: Liu Guanwei <liu_gw@163.com>\n\nFrom-SVN: r134762", "tree": {"sha": "3e397d28969051c4bba11dca77914faf41b4189d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e397d28969051c4bba11dca77914faf41b4189d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bda37952740179739cc1e1fc034fcace001660f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bda37952740179739cc1e1fc034fcace001660f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bda37952740179739cc1e1fc034fcace001660f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bda37952740179739cc1e1fc034fcace001660f6/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d6b68fccba3828011c63478f4f1a758145a94b19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6b68fccba3828011c63478f4f1a758145a94b19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6b68fccba3828011c63478f4f1a758145a94b19"}], "stats": {"total": 65, "additions": 56, "deletions": 9}, "files": [{"sha": "368348a3d95ae8c98cacf72c0603b05d05eb13df", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bda37952740179739cc1e1fc034fcace001660f6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bda37952740179739cc1e1fc034fcace001660f6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=bda37952740179739cc1e1fc034fcace001660f6", "patch": "@@ -1,3 +1,10 @@\n+2008-04-28  Jason Merrill  <jason@redhat.com>\n+\t    Liu Guanwei <liu_gw@163.com>\n+\n+\tPR c++/57\n+\t* parser.c (cp_parser_parameter_declaration): Handle < ambiguity\n+\tin default arguments.\n+\n 2008-04-25  Jan Hubicka  <jh@suse.cz>\n \n \t* typeck.c (check_return_expr): Update."}, {"sha": "21a762dc59ef7ae5d6d63cfaa03e1b99c2624bfb", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 45, "deletions": 5, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bda37952740179739cc1e1fc034fcace001660f6/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bda37952740179739cc1e1fc034fcace001660f6/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=bda37952740179739cc1e1fc034fcace001660f6", "patch": "@@ -13723,6 +13723,7 @@ cp_parser_parameter_declaration (cp_parser *parser,\n \t  && TYPE_BEING_DEFINED (current_class_type))\n \t{\n \t  unsigned depth = 0;\n+\t  int maybe_template_id = 0;\n \t  cp_token *first_token;\n \t  cp_token *token;\n \n@@ -13741,6 +13742,33 @@ cp_parser_parameter_declaration (cp_parser *parser,\n \t\t  /* In valid code, a default argument must be\n \t\t     immediately followed by a `,' `)', or `...'.  */\n \t\tcase CPP_COMMA:\n+\t\t  if (depth == 0 && maybe_template_id)\n+\t\t    {\n+\t\t      /* If we've seen a '<', we might be in a\n+\t\t\t template-argument-list.  Until Core issue 325 is\n+\t\t\t resolved, we don't know how this situation ought\n+\t\t\t to be handled, so try to DTRT.  We check whether\n+\t\t\t what comes after the comma is a valid parameter\n+\t\t\t declaration list.  If it is, then the comma ends\n+\t\t\t the default argument; otherwise the default\n+\t\t\t argument continues.  */\n+\t\t      bool error = false;\n+\n+\t\t      /* Set ITALP so cp_parser_parameter_declaration_list\n+\t\t\t doesn't decide to commit to this parse.  */\n+\t\t      bool saved_italp = parser->in_template_argument_list_p;\n+\t\t      parser->in_template_argument_list_p = true;\n+\n+\t\t      cp_parser_parse_tentatively (parser);\n+\t\t      cp_lexer_consume_token (parser->lexer);\n+\t\t      cp_parser_parameter_declaration_list (parser, &error);\n+\t\t      if (!cp_parser_error_occurred (parser) && !error)\n+\t\t\tdone = true;\n+\t\t      cp_parser_abort_tentative_parse (parser);\n+\n+\t\t      parser->in_template_argument_list_p = saved_italp;\n+\t\t      break;\n+\t\t    }\n \t\tcase CPP_CLOSE_PAREN:\n \t\tcase CPP_ELLIPSIS:\n \t\t  /* If we run into a non-nested `;', `}', or `]',\n@@ -13764,6 +13792,13 @@ cp_parser_parameter_declaration (cp_parser *parser,\n \t\t  ++depth;\n \t\t  break;\n \n+\t\tcase CPP_LESS:\n+\t\t  if (depth == 0)\n+\t\t    /* This might be the comparison operator, or it might\n+\t\t       start a template argument list.  */\n+\t\t    ++maybe_template_id;\n+\t\t  break;\n+\n                 case CPP_RSHIFT:\n                   if (cxx_dialect == cxx98)\n                     break;\n@@ -13772,11 +13807,16 @@ cp_parser_parameter_declaration (cp_parser *parser,\n                      cases.  */\n \n \t\tcase CPP_GREATER:\n-\t\t  /* If we see a non-nested `>', and `>' is not an\n-\t\t     operator, then it marks the end of the default\n-\t\t     argument.  */\n-\t\t  if (!depth && !greater_than_is_operator_p)\n-\t\t    done = true;\n+\t\t  if (depth == 0)\n+\t\t    {\n+\t\t      /* This might be an operator, or it might close a\n+\t\t\t template argument list.  But if a previous '<'\n+\t\t\t started a template argument list, this will have\n+\t\t\t closed it, so we can't be in one anymore.  */\n+\t\t      maybe_template_id -= 1 + (token->type == CPP_RSHIFT);\n+\t\t      if (maybe_template_id < 0)\n+\t\t\tmaybe_template_id = 0;\n+\t\t    }\n \t\t  break;\n \n \t\t  /* If we run out of tokens, issue an error message.  */"}, {"sha": "a72e85c4394dc236bd9372ab75a4b7c527f56691", "filename": "gcc/testsuite/g++.old-deja/g++.pt/defarg8.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bda37952740179739cc1e1fc034fcace001660f6/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fdefarg8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bda37952740179739cc1e1fc034fcace001660f6/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fdefarg8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fdefarg8.C?ref=bda37952740179739cc1e1fc034fcace001660f6", "patch": "@@ -3,15 +3,15 @@\n // Default arguments containing more than one non-nested explicit\n // template argument leads to parse error\n \n-// This might be ill formed. See DR 325 (which would like to make it\n-// so)\n+// This might be ill formed. See DR 325 (one proposed resolution is to make\n+// it so)\n \n template <class T> class foo1;\n-template <class T, class U> class foo2; // { dg-error \"\" }\n+template <class T, class U> class foo2;\n \n struct bar {\n   template <class T, class U>\n   bar(int i = foo1<T>::baz, // { dg-bogus \"\" }  - \n       int j = int(foo2<T, U>::baz), // ok\n-      int k = foo2<T, U>::baz) {} // { dg-error \"\" }\n+      int k = foo2<T, U>::baz) {} // ok?\n };"}]}