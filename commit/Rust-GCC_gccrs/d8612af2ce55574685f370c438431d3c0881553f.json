{"sha": "d8612af2ce55574685f370c438431d3c0881553f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDg2MTJhZjJjZTU1NTc0Njg1ZjM3MGM0Mzg0MzFkM2MwODgxNTUzZg==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2008-06-13T22:07:28Z"}, "committer": {"name": "Olivier Hainque", "email": "hainque@gcc.gnu.org", "date": "2008-06-13T22:07:28Z"}, "message": "decl.c (FORCE_PREFERRED_STACK_BOUNDARY_IN_MAIN): Define to 0 if undefined.\n\n2008-06-13  Olivier Hainque  <hainque@adacore.com>\n\n\tada/\n\t* decl.c (FORCE_PREFERRED_STACK_BOUNDARY_IN_MAIN): Define to 0\n\tif undefined.\n\t(gnat_to_gnu_entity) <case E_Function/Procedure>: Request stack\n\trealignment with force_align_arg_pointer attribute on foreign\n\tconvention subprograms if FORCE_PREFERRED_STACK_BOUNDARY_IN_MAIN.\n\n\ttestsuite/\n\t* gnat.dg/task_stack_align.adb: New test.\n\nFrom-SVN: r136768", "tree": {"sha": "791e14f9e7ddcb75fa91e32178b0ce5a940da33a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/791e14f9e7ddcb75fa91e32178b0ce5a940da33a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8612af2ce55574685f370c438431d3c0881553f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8612af2ce55574685f370c438431d3c0881553f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8612af2ce55574685f370c438431d3c0881553f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8612af2ce55574685f370c438431d3c0881553f/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7f7e76a4ee4bf15404cdd73840c30566a39460bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f7e76a4ee4bf15404cdd73840c30566a39460bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f7e76a4ee4bf15404cdd73840c30566a39460bb"}], "stats": {"total": 79, "additions": 79, "deletions": 0}, "files": [{"sha": "2ad33efe5cfd208e7a96d0b75cf022d64fbf4f51", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8612af2ce55574685f370c438431d3c0881553f/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8612af2ce55574685f370c438431d3c0881553f/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d8612af2ce55574685f370c438431d3c0881553f", "patch": "@@ -1,3 +1,11 @@\n+2008-06-13  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* decl.c (FORCE_PREFERRED_STACK_BOUNDARY_IN_MAIN): Define to 0\n+\tif undefined.\n+\t(gnat_to_gnu_entity) <case E_Function/Procedure>: Request stack\n+\trealignment with force_align_arg_pointer attribute on foreign\n+\tconvention subprograms if FORCE_PREFERRED_STACK_BOUNDARY_IN_MAIN.\n+\t\n 2008-06-13  Olivier Hainque  <hainque@adacore.com>\n \n \t* utils.c (rest_of_record_type_compilation): When computing"}, {"sha": "ff2927fe64236778044f597449f8ece67802f4ef", "filename": "gcc/ada/decl.c", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8612af2ce55574685f370c438431d3c0881553f/gcc%2Fada%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8612af2ce55574685f370c438431d3c0881553f/gcc%2Fada%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdecl.c?ref=d8612af2ce55574685f370c438431d3c0881553f", "patch": "@@ -67,6 +67,29 @@\n #define Has_Stdcall_Convention(E) (0)\n #endif\n \n+/* Stack realignment for functions with foreign conventions is provided on a\n+   per back-end basis now, as it is handled by the prologue expanders and not\n+   as part of the function's body any more.  It might be requested by way of a\n+   dedicated function type attribute on the targets that support it.\n+\n+   We need a way to avoid setting the attribute on the targets that don't\n+   support it and use FORCE_PREFERRED_STACK_BOUNDARY_IN_MAIN for this purpose.\n+\n+   It is defined on targets where the circuitry is available, and indicates\n+   whether the realignment is needed for 'main'. We use this to decide for\n+   foreign subprograms as well.\n+\n+   It is not defined on targets where the circuitry is not implemented, and\n+   we just never set the attribute in these cases.\n+\n+   Whether it is defined on all targets that would need it in theory is\n+   not entirely clear.  We currently trust the base GCC settings for this\n+   purpose.  */\n+\n+#ifndef FORCE_PREFERRED_STACK_BOUNDARY_IN_MAIN\n+#define FORCE_PREFERRED_STACK_BOUNDARY_IN_MAIN 0\n+#endif\n+\n struct incomplete\n {\n   struct incomplete *next;\n@@ -3951,6 +3974,19 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t     get_identifier (\"stdcall\"), NULL_TREE,\n \t     gnat_entity);\n \n+\t/* If we are on a target where stack realignment is needed for 'main'\n+\t   to honor GCC's implicit expectations (stack alignment greater than\n+\t   what the base ABI guarantees), ensure we do the same for foreign\n+\t   convention subprograms as they might be used as callbacks from code\n+\t   breaking such expectations.  Note that this applies to task entry\n+\t   points in particular.  */\n+\tif (FORCE_PREFERRED_STACK_BOUNDARY_IN_MAIN\n+\t    && Has_Foreign_Convention (gnat_entity))\n+\t  prepend_one_attribute_to\n+\t    (&attr_list, ATTR_MACHINE_ATTRIBUTE,\n+\t     get_identifier (\"force_align_arg_pointer\"), NULL_TREE,\n+\t     gnat_entity);\n+\n \t/* The lists have been built in reverse.  */\n \tgnu_param_list = nreverse (gnu_param_list);\n \tif (has_stub)"}, {"sha": "6ddf1ce49d20abb0791996077c1dddc7bc209689", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8612af2ce55574685f370c438431d3c0881553f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8612af2ce55574685f370c438431d3c0881553f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d8612af2ce55574685f370c438431d3c0881553f", "patch": "@@ -1,3 +1,7 @@\n+2008-06-13  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* gnat.dg/task_stack_align.adb: New test.\n+\n 2008-06-13  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/35863"}, {"sha": "1151a913beb2739fa14d14f614ee0a8b131a61ce", "filename": "gcc/testsuite/gnat.dg/task_stack_align.adb", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8612af2ce55574685f370c438431d3c0881553f/gcc%2Ftestsuite%2Fgnat.dg%2Ftask_stack_align.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8612af2ce55574685f370c438431d3c0881553f/gcc%2Ftestsuite%2Fgnat.dg%2Ftask_stack_align.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Ftask_stack_align.adb?ref=d8612af2ce55574685f370c438431d3c0881553f", "patch": "@@ -0,0 +1,31 @@\n+-- { dg-do run }\n+\n+with Ada.Text_IO; use Ada.Text_IO;\n+with System.Storage_Elements; use System.Storage_Elements;\n+\n+procedure Task_Stack_Align is\n+\n+   type Align_Me is record\n+      Value : Integer;\n+   end record;\n+   for Align_Me'Alignment use Standard'Maximum_Alignment;\n+\n+   procedure Check_Local_Alignment_From (Context : String) is\n+      Object : Align_Me;\n+   begin\n+      if To_Integer (Object'Address) mod Object'Alignment /= 0 then\n+         Put_Line (\"alignment check failed in \" & Context);\n+      end if;\n+   end;\n+\n+   task type T;\n+\n+   task body T is\n+   begin\n+      Check_Local_Alignment_From (\"task T\");\n+   end;\n+\n+   Tasks : array (1 .. 50) of T;\n+begin\n+   Check_Local_Alignment_From (\"environment\");\n+end;"}]}