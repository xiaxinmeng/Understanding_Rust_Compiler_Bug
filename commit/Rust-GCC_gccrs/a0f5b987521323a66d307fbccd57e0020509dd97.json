{"sha": "a0f5b987521323a66d307fbccd57e0020509dd97", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTBmNWI5ODc1MjEzMjNhNjZkMzA3ZmJjY2Q1N2UwMDIwNTA5ZGQ5Nw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-11-15T17:05:23Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-11-15T17:05:23Z"}, "message": "decl.c (cp_finish_decomp): For DECL_NAMESPACE_SCOPE_P decl, set DECL_ASSEMBLER_NAME.\n\n\t* decl.c (cp_finish_decomp): For DECL_NAMESPACE_SCOPE_P decl,\n\tset DECL_ASSEMBLER_NAME.\n\t* parser.c (cp_parser_decomposition_declaration): Likewise\n\tif returning error_mark_node.\n\t* mangle.c (mangle_decomp): New function.\n\t* cp-tree.h (mangle_decomp): New declaration.\n\n\t* g++.dg/cpp1z/decomp13.C: New test.\n\nFrom-SVN: r242434", "tree": {"sha": "532b81c3e858c986b59c56ab5e42aafddb9e5c99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/532b81c3e858c986b59c56ab5e42aafddb9e5c99"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a0f5b987521323a66d307fbccd57e0020509dd97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0f5b987521323a66d307fbccd57e0020509dd97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0f5b987521323a66d307fbccd57e0020509dd97", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0f5b987521323a66d307fbccd57e0020509dd97/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "84c1b9d3d4d1ead79344b4a9403ec3d74e04d5ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84c1b9d3d4d1ead79344b4a9403ec3d74e04d5ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84c1b9d3d4d1ead79344b4a9403ec3d74e04d5ef"}], "stats": {"total": 124, "additions": 123, "deletions": 1}, "files": [{"sha": "0bcb730cb1ca9303f0161cc98f92c4aa36a2c482", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0f5b987521323a66d307fbccd57e0020509dd97/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0f5b987521323a66d307fbccd57e0020509dd97/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a0f5b987521323a66d307fbccd57e0020509dd97", "patch": "@@ -1,3 +1,12 @@\n+2016-11-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* decl.c (cp_finish_decomp): For DECL_NAMESPACE_SCOPE_P decl,\n+\tset DECL_ASSEMBLER_NAME.\n+\t* parser.c (cp_parser_decomposition_declaration): Likewise\n+\tif returning error_mark_node.\n+\t* mangle.c (mangle_decomp): New function.\n+\t* cp-tree.h (mangle_decomp): New declaration.\n+\n 2016-11-15  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/78358"}, {"sha": "0dcb8971edd066dc8cbbbfe5aef465465b3032dc", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0f5b987521323a66d307fbccd57e0020509dd97/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0f5b987521323a66d307fbccd57e0020509dd97/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=a0f5b987521323a66d307fbccd57e0020509dd97", "patch": "@@ -6868,6 +6868,7 @@ extern bool decl_tls_wrapper_p\t\t\t(tree);\n extern tree mangle_ref_init_variable\t\t(tree);\n extern char * get_mangled_vtable_map_var_name   (tree);\n extern bool mangle_return_type_p\t\t(tree);\n+extern tree mangle_decomp\t\t\t(tree, vec<tree> &);\n \n /* in dump.c */\n extern bool cp_dump_tree\t\t\t(void *, tree);"}, {"sha": "23ba087a86f06a23f22562d93c71e656d6a1c0f4", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0f5b987521323a66d307fbccd57e0020509dd97/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0f5b987521323a66d307fbccd57e0020509dd97/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=a0f5b987521323a66d307fbccd57e0020509dd97", "patch": "@@ -7301,7 +7301,6 @@ get_tuple_decomp_init (tree decl, unsigned i)\n void\n cp_finish_decomp (tree decl, tree first, unsigned int count)\n {\n-  location_t loc = DECL_SOURCE_LOCATION (decl);\n   if (error_operand_p (decl))\n     {\n      error_out:\n@@ -7315,9 +7314,12 @@ cp_finish_decomp (tree decl, tree first, unsigned int count)\n \t    }\n \t  first = DECL_CHAIN (first);\n \t}\n+      if (DECL_P (decl) && DECL_NAMESPACE_SCOPE_P (decl))\n+\tSET_DECL_ASSEMBLER_NAME (decl, get_identifier (\"<decomp>\"));\n       return;\n     }\n \n+  location_t loc = DECL_SOURCE_LOCATION (decl);\n   if (type_dependent_expression_p (decl)\n       /* This happens for range for when not in templates.\n \t Still add the DECL_VALUE_EXPRs for later processing.  */\n@@ -7530,6 +7532,8 @@ cp_finish_decomp (tree decl, tree first, unsigned int count)\n \t    i++;\n \t  }\n     }\n+  if (DECL_NAMESPACE_SCOPE_P (decl))\n+    SET_DECL_ASSEMBLER_NAME (decl, mangle_decomp (decl, v));\n }\n \n /* Returns a declaration for a VAR_DECL as if:"}, {"sha": "a4a2444ebfbc467c591c782701cd9c76aa3e5e8e", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0f5b987521323a66d307fbccd57e0020509dd97/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0f5b987521323a66d307fbccd57e0020509dd97/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=a0f5b987521323a66d307fbccd57e0020509dd97", "patch": "@@ -3995,6 +3995,53 @@ mangle_vtt_for_type (const tree type)\n   return mangle_special_for_type (type, \"TT\");\n }\n \n+/* Returns an identifier for the mangled name of the decomposition\n+   artificial variable DECL.  DECLS is the vector of the VAR_DECLs\n+   for the identifier-list.  */\n+\n+tree\n+mangle_decomp (const tree decl, vec<tree> &decls)\n+{\n+  gcc_assert (!type_dependent_expression_p (decl));\n+\n+  location_t saved_loc = input_location;\n+  input_location = DECL_SOURCE_LOCATION (decl);\n+\n+  start_mangling (decl);\n+  write_string (\"_Z\");\n+\n+  tree context = decl_mangling_context (decl);\n+  gcc_assert (context != NULL_TREE);\n+\n+  bool nested = false;\n+  if (DECL_NAMESPACE_STD_P (context))\n+    write_string (\"St\");\n+  else if (context != global_namespace)\n+    {\n+      nested = true;\n+      write_char ('N');\n+      write_prefix (decl_mangling_context (decl));\n+    }\n+\n+  write_string (\"DC\");\n+  unsigned int i;\n+  tree d;\n+  FOR_EACH_VEC_ELT (decls, i, d)\n+    write_unqualified_name (d);\n+  write_char ('E');\n+\n+  if (nested)\n+    write_char ('E');\n+\n+  tree id = finish_mangling_get_identifier ();\n+  if (DEBUG_MANGLE)\n+    fprintf (stderr, \"mangle_decomp = '%s'\\n\\n\",\n+             IDENTIFIER_POINTER (id));\n+\n+  input_location = saved_loc;\n+  return id;\n+}\n+\n /* Return an identifier for a construction vtable group.  TYPE is\n    the most derived class in the hierarchy; BINFO is the base\n    subobject for which this construction vtable group will be used."}, {"sha": "9a5039f99557c77a1310831a1dec9deb269a2083", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0f5b987521323a66d307fbccd57e0020509dd97/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0f5b987521323a66d307fbccd57e0020509dd97/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=a0f5b987521323a66d307fbccd57e0020509dd97", "patch": "@@ -12944,6 +12944,7 @@ cp_parser_decomposition_declaration (cp_parser *parser,\n   tree decl = start_decl (declarator, decl_specifiers, SD_INITIALIZED,\n \t\t\t  NULL_TREE, decl_specifiers->attributes,\n \t\t\t  &pushed_scope);\n+  tree orig_decl = decl;\n \n   unsigned int i;\n   cp_expr e;\n@@ -13020,6 +13021,12 @@ cp_parser_decomposition_declaration (cp_parser *parser,\n   if (pushed_scope)\n     pop_scope (pushed_scope);\n \n+  if (decl == error_mark_node && DECL_P (orig_decl))\n+    {\n+      if (DECL_NAMESPACE_SCOPE_P (orig_decl))\n+\tSET_DECL_ASSEMBLER_NAME (orig_decl, get_identifier (\"<decomp>\"));\n+    }\n+\n   return decl;\n }\n "}, {"sha": "a08009b6172591cd09c7a5becbd8fda3cb1c24da", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0f5b987521323a66d307fbccd57e0020509dd97/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0f5b987521323a66d307fbccd57e0020509dd97/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a0f5b987521323a66d307fbccd57e0020509dd97", "patch": "@@ -1,5 +1,7 @@\n 2016-11-15  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* g++.dg/cpp1z/decomp13.C: New test.\n+\n \t* g++.dg/cpp1y/auto-fn33.C (main): Turn // error: ... into dg-bogus.\n \n \tPR c++/71988"}, {"sha": "9ebddc6e6087a34a08b72d171a1fd78e90537084", "filename": "gcc/testsuite/g++.dg/cpp1z/decomp13.C", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0f5b987521323a66d307fbccd57e0020509dd97/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0f5b987521323a66d307fbccd57e0020509dd97/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp13.C?ref=a0f5b987521323a66d307fbccd57e0020509dd97", "patch": "@@ -0,0 +1,52 @@\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"\" }\n+\n+struct A { int i; long j; int k : 2; char l; } a;\n+int c[2];\n+struct B { template<int I> int &get () { return c[I]; } } b;\n+namespace std {\n+  template<typename T> struct tuple_size;\n+  template<int, typename> struct tuple_element;\n+}\n+template<> struct std::tuple_size<B> { static constexpr int value = 2; };\n+template<int I> struct std::tuple_element<I,B> { typedef int type; };\n+\n+auto [ aa, bb, cc, dd ] = a;\t\t// { dg-warning \"decomposition declaration only available with\" \"\" { target c++14_down } }\n+// { dg-final { scan-assembler \"_ZDC2aa2bb2cc2ddE\" } }\n+const auto & [ e, f, g, h ] = a;\t// { dg-warning \"decomposition declaration only available with\" \"\" { target c++14_down } }\n+// { dg-final { scan-assembler \"_ZDC1e1f1g1hE\" } }\n+auto [ ee, ff ] = b;\t\t\t// { dg-warning \"decomposition declaration only available with\" \"\" { target c++14_down } }\n+// { dg-final { scan-assembler \"_ZDC2ee2ffE\" } }\n+auto & [ gg, hh ] = b;\t\t\t// { dg-warning \"decomposition declaration only available with\" \"\" { target c++14_down } }\n+// { dg-final { scan-assembler \"_ZDC2gg2hhE\" } }\n+namespace N\n+{\n+  namespace M\n+  {\n+    auto [ i, j, k, l ] = a;\t\t// { dg-warning \"decomposition declaration only available with\" \"\" { target c++14_down } }\n+    // { dg-final { scan-assembler \"_ZN1N1MDC1i1j1k1lEE\" } }\n+    auto & [ m, n, o, ppp ] = a;\t// { dg-warning \"decomposition declaration only available with\" \"\" { target c++14_down } }\n+    // { dg-final { scan-assembler \"_ZN1N1MDC1m1n1o3pppEE\" } }\n+    auto [ ii, jj ] = b;\t\t// { dg-warning \"decomposition declaration only available with\" \"\" { target c++14_down } }\n+    // { dg-final { scan-assembler \"_ZN1N1MDC2ii2jjEE\" } }\n+    // { dg-final { scan-assembler \"_ZN1N1M2iiE\" } }\n+    // { dg-final { scan-assembler \"_ZN1N1M2jjE\" } }\n+    auto & [ mm, nn ] = b;\t\t// { dg-warning \"decomposition declaration only available with\" \"\" { target c++14_down } }\n+    // { dg-final { scan-assembler \"_ZN1N1MDC2mm2nnEE\" } }\n+    // { dg-final { scan-assembler \"_ZN1N1M2mmE\" } }\n+    // { dg-final { scan-assembler \"_ZN1N1M2nnE\" } }\n+  }\n+}\n+namespace std\n+{\n+  auto [ i2, j2, k2, l2 ] = a;\t\t// { dg-warning \"decomposition declaration only available with\" \"\" { target c++14_down } }\n+  // { dg-final { scan-assembler \"_ZStDC2i22j22k22l2E\" } }\n+  auto [ vv, ww ] = b;\t\t\t// { dg-warning \"decomposition declaration only available with\" \"\" { target c++14_down } }\n+  // { dg-final { scan-assembler \"_ZStDC2vv2wwE\" } }\n+  // { dg-final { scan-assembler \"_ZSt2vv\" } }\n+  // { dg-final { scan-assembler \"_ZSt2ww\" } }\n+}\n+namespace\n+{\n+  auto [ v, w, x, y ] = a;\t\t// { dg-warning \"decomposition declaration only available with\" \"\" { target c++14_down } }\n+}"}]}