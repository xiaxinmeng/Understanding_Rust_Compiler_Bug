{"sha": "13a9737c1920fd99fc6116111cd60b7db0d5590c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTNhOTczN2MxOTIwZmQ5OWZjNjExNjExMWNkNjBiN2RiMGQ1NTkwYw==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2005-06-01T07:18:20Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2005-06-01T07:18:20Z"}, "message": "trans-expr.c (gfc_conv_variable): Clean up bracketting.\n\n2005-06-01  Paul Thomas  <pault@gcc.gnu.org>\n\n\t* fortran/trans-expr.c (gfc_conv_variable): Clean up bracketting.\n\t* fortran/trans-expr.c (gfc_conv_function_call): Insert spaces.\n\tCorrect comments and replace convert of integer_one_node with\n\tbuild_int_cst.\n\nFrom-SVN: r100433", "tree": {"sha": "2f78d4cac83d02db9c3f3fa93f5d4f4946f4b00b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f78d4cac83d02db9c3f3fa93f5d4f4946f4b00b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/13a9737c1920fd99fc6116111cd60b7db0d5590c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13a9737c1920fd99fc6116111cd60b7db0d5590c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13a9737c1920fd99fc6116111cd60b7db0d5590c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13a9737c1920fd99fc6116111cd60b7db0d5590c/comments", "author": null, "committer": null, "parents": [{"sha": "bacf5b96edee976363fed3b78ab5923a62cd9bbb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bacf5b96edee976363fed3b78ab5923a62cd9bbb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bacf5b96edee976363fed3b78ab5923a62cd9bbb"}], "stats": {"total": 27, "additions": 14, "deletions": 13}, "files": [{"sha": "52d37039753f7610d289f13c59682aa01a3828d0", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13a9737c1920fd99fc6116111cd60b7db0d5590c/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13a9737c1920fd99fc6116111cd60b7db0d5590c/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=13a9737c1920fd99fc6116111cd60b7db0d5590c", "patch": "@@ -365,29 +365,30 @@ gfc_conv_variable (gfc_se * se, gfc_expr * expr)\n           /* Dereference character pointer dummy arguments\n \t     or results.  */\n \t  if ((sym->attr.pointer || sym->attr.allocatable)\n-\t      && ((sym->attr.dummy)\n-\t\t  || (sym->attr.function\n-\t\t  || sym->attr.result)))\n+\t      && (sym->attr.dummy\n+\t\t  || sym->attr.function\n+\t\t  || sym->attr.result))\n \t    se->expr = gfc_build_indirect_ref (se->expr);\n \t}\n       else\n \t{\n           /* Dereference non-character scalar dummy arguments.  */\n-\t  if ((sym->attr.dummy) && (!sym->attr.dimension))\n+\t  if (sym->attr.dummy && !sym->attr.dimension)\n \t    se->expr = gfc_build_indirect_ref (se->expr);\n \n           /* Dereference scalar hidden result.  */\n-\t  if ((gfc_option.flag_f2c && sym->ts.type == BT_COMPLEX)\n+\t  if (gfc_option.flag_f2c && sym->ts.type == BT_COMPLEX\n \t      && (sym->attr.function || sym->attr.result)\n-\t      && (!sym->attr.dimension))\n+\t      && !sym->attr.dimension)\n \t    se->expr = gfc_build_indirect_ref (se->expr);\n \n           /* Dereference non-character pointer variables. \n \t     These must be dummies, results, or scalars.  */\n \t  if ((sym->attr.pointer || sym->attr.allocatable)\n-\t      && ((sym->attr.dummy) \n-\t\t  || (sym->attr.function || sym->attr.result)\n-\t\t  || (!sym->attr.dimension)))\n+\t      && (sym->attr.dummy\n+\t\t  || sym->attr.function\n+\t\t  || sym->attr.result\n+\t\t  || !sym->attr.dimension))\n \t    se->expr = gfc_build_indirect_ref (se->expr);\n \t}\n \n@@ -1121,7 +1122,7 @@ gfc_conv_function_call (gfc_se * se, gfc_symbol * sym,\n               gfc_advance_se_ss_chain (se);\n \n \t      /* Bundle in the string length.  */\n-\t      se->string_length=len;\n+\t      se->string_length = len;\n               return;\n             }\n \t}\n@@ -1184,12 +1185,12 @@ gfc_conv_function_call (gfc_se * se, gfc_symbol * sym,\n \t  type = gfc_get_character_type (sym->ts.kind, sym->ts.cl);\n \t  type = build_pointer_type (type);\n \n-\t  /* Return an address to a char[4]* temporary for character pointers.  */\n+\t  /* Return an address to a char[0:len-1]* temporary for character pointers.  */\n \t  if (sym->attr.pointer || sym->attr.allocatable)\n \t    {\n-\t      /* Build char[4] * pstr.  */\n+\t      /* Build char[0:len-1] * pstr.  */\n \t      tmp = fold_build2 (MINUS_EXPR, gfc_charlen_type_node, len,\n-\t\t\t\t convert (gfc_charlen_type_node, integer_one_node));\n+\t\t\t\t build_int_cst (gfc_charlen_type_node, 1));\n \t      tmp = build_range_type (gfc_array_index_type, gfc_index_zero_node, tmp);\n \t      tmp = build_array_type (gfc_character1_type_node, tmp);\n \t      var = gfc_create_var (build_pointer_type (tmp), \"pstr\");"}]}