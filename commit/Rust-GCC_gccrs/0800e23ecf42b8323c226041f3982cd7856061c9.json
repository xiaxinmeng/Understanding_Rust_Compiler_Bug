{"sha": "0800e23ecf42b8323c226041f3982cd7856061c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDgwMGUyM2VjZjQyYjgzMjNjMjI2MDQxZjM5ODJjZDc4NTYwNjFjOQ==", "commit": {"author": {"name": "Wilco Dijkstra", "email": "wdijkstr@arm.com", "date": "2019-09-18T18:22:55Z"}, "committer": {"name": "Wilco Dijkstra", "email": "wilco@gcc.gnu.org", "date": "2019-09-18T18:22:55Z"}, "message": "[ARM] Cleanup highpart multiply patterns\n\nCleanup the various highpart multiply patterns using iterators.\nAs a result the signed and unsigned variants and the pre-Armv6\nmultiply operand constraints are all handled in a single pattern\nand simple expander.\n\n    gcc/\n\t* config/arm/arm.md (smulsi3_highpart): Use <US> and <SE> iterators.\n\t(smulsi3_highpart_nov6): Remove pattern.\n\t(smulsi3_highpart_v6): Likewise.\n\t(umulsi3_highpart): Likewise.\n\t(umulsi3_highpart_nov6): Likewise.\n\t(umulsi3_highpart_v6): Likewise.\n\t(<US>mull_high): Add new combined multiply pattern.\n\nFrom-SVN: r275899", "tree": {"sha": "1b407e563a47f198811972662dc15e9394533b1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b407e563a47f198811972662dc15e9394533b1c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0800e23ecf42b8323c226041f3982cd7856061c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0800e23ecf42b8323c226041f3982cd7856061c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0800e23ecf42b8323c226041f3982cd7856061c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0800e23ecf42b8323c226041f3982cd7856061c9/comments", "author": null, "committer": null, "parents": [{"sha": "901083b9bdf69a7b1382f9682c6fd1d5759667dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/901083b9bdf69a7b1382f9682c6fd1d5759667dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/901083b9bdf69a7b1382f9682c6fd1d5759667dd"}], "stats": {"total": 90, "additions": 21, "deletions": 69}, "files": [{"sha": "8b76a6235c1ec70cd71bf32aff7d82e6fe9fe99a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0800e23ecf42b8323c226041f3982cd7856061c9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0800e23ecf42b8323c226041f3982cd7856061c9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0800e23ecf42b8323c226041f3982cd7856061c9", "patch": "@@ -6,6 +6,16 @@\n \t(vectorizable_reduction): Also expect COND_EXPR non-reduction\n \toperand in position 2.  Remove assert.\n \n+2019-09-18  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\t* config/arm/arm.md (smulsi3_highpart): Use <US> and <SE> iterators.\n+\t(smulsi3_highpart_nov6): Remove pattern.\n+\t(smulsi3_highpart_v6): Likewise.\n+\t(umulsi3_highpart): Likewise.\n+\t(umulsi3_highpart_nov6): Likewise.\n+\t(umulsi3_highpart_v6): Likewise.\n+\t(<US>mull_high): Add new combined multiply pattern.\n+\n 2019-09-18  Wilco Dijkstra  <wdijkstr@arm.com>\n \n \t* config/arm/arm.md (arm_mulsi3): Remove pattern."}, {"sha": "b47e196f41a854151ffc5062e04cb4bdab7c0398", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 11, "deletions": 69, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0800e23ecf42b8323c226041f3982cd7856061c9/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0800e23ecf42b8323c226041f3982cd7856061c9/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=0800e23ecf42b8323c226041f3982cd7856061c9", "patch": "@@ -1895,92 +1895,34 @@\n    (set_attr \"predicable\" \"yes\")]\n )\n \n-(define_expand \"smulsi3_highpart\"\n+(define_expand \"<US>mulsi3_highpart\"\n   [(parallel\n     [(set (match_operand:SI 0 \"s_register_operand\")\n \t  (truncate:SI\n \t   (lshiftrt:DI\n \t    (mult:DI\n-\t     (sign_extend:DI (match_operand:SI 1 \"s_register_operand\"))\n-\t     (sign_extend:DI (match_operand:SI 2 \"s_register_operand\")))\n+\t     (SE:DI (match_operand:SI 1 \"s_register_operand\"))\n+\t     (SE:DI (match_operand:SI 2 \"s_register_operand\")))\n \t    (const_int 32))))\n      (clobber (match_scratch:SI 3 \"\"))])]\n   \"TARGET_32BIT\"\n   \"\"\n )\n \n-(define_insn \"*smulsi3_highpart_nov6\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=&r,&r\")\n+(define_insn \"*<US>mull_high\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,&r,&r\")\n \t(truncate:SI\n \t (lshiftrt:DI\n \t  (mult:DI\n-\t   (sign_extend:DI (match_operand:SI 1 \"s_register_operand\" \"%0,r\"))\n-\t   (sign_extend:DI (match_operand:SI 2 \"s_register_operand\" \"r,r\")))\n+\t   (SE:DI (match_operand:SI 1 \"s_register_operand\" \"%r,0,r\"))\n+\t   (SE:DI (match_operand:SI 2 \"s_register_operand\" \"r,r,r\")))\n \t  (const_int 32))))\n-   (clobber (match_scratch:SI 3 \"=&r,&r\"))]\n-  \"TARGET_32BIT && !arm_arch6\"\n-  \"smull%?\\\\t%3, %0, %2, %1\"\n-  [(set_attr \"type\" \"smull\")\n-   (set_attr \"predicable\" \"yes\")]\n-)\n-\n-(define_insn \"*smulsi3_highpart_v6\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n-\t(truncate:SI\n-\t (lshiftrt:DI\n-\t  (mult:DI\n-\t   (sign_extend:DI (match_operand:SI 1 \"s_register_operand\" \"r\"))\n-\t   (sign_extend:DI (match_operand:SI 2 \"s_register_operand\" \"r\")))\n-\t  (const_int 32))))\n-   (clobber (match_scratch:SI 3 \"=r\"))]\n-  \"TARGET_32BIT && arm_arch6\"\n-  \"smull%?\\\\t%3, %0, %2, %1\"\n-  [(set_attr \"type\" \"smull\")\n-   (set_attr \"predicable\" \"yes\")]\n-)\n-\n-(define_expand \"umulsi3_highpart\"\n-  [(parallel\n-    [(set (match_operand:SI 0 \"s_register_operand\")\n-\t  (truncate:SI\n-\t   (lshiftrt:DI\n-\t    (mult:DI\n-\t     (zero_extend:DI (match_operand:SI 1 \"s_register_operand\"))\n-\t      (zero_extend:DI (match_operand:SI 2 \"s_register_operand\")))\n-\t    (const_int 32))))\n-     (clobber (match_scratch:SI 3 \"\"))])]\n+   (clobber (match_scratch:SI 3 \"=r,&r,&r\"))]\n   \"TARGET_32BIT\"\n-  \"\"\n-)\n-\n-(define_insn \"*umulsi3_highpart_nov6\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=&r,&r\")\n-\t(truncate:SI\n-\t (lshiftrt:DI\n-\t  (mult:DI\n-\t   (zero_extend:DI (match_operand:SI 1 \"s_register_operand\" \"%0,r\"))\n-\t   (zero_extend:DI (match_operand:SI 2 \"s_register_operand\" \"r,r\")))\n-\t  (const_int 32))))\n-   (clobber (match_scratch:SI 3 \"=&r,&r\"))]\n-  \"TARGET_32BIT && !arm_arch6\"\n-  \"umull%?\\\\t%3, %0, %2, %1\"\n+  \"<US>mull%?\\\\t%3, %0, %2, %1\"\n   [(set_attr \"type\" \"umull\")\n-   (set_attr \"predicable\" \"yes\")]\n-)\n-\n-(define_insn \"*umulsi3_highpart_v6\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n-\t(truncate:SI\n-\t (lshiftrt:DI\n-\t  (mult:DI\n-\t   (zero_extend:DI (match_operand:SI 1 \"s_register_operand\" \"r\"))\n-\t   (zero_extend:DI (match_operand:SI 2 \"s_register_operand\" \"r\")))\n-\t  (const_int 32))))\n-   (clobber (match_scratch:SI 3 \"=r\"))]\n-  \"TARGET_32BIT && arm_arch6\"\n-  \"umull%?\\\\t%3, %0, %2, %1\"\n-  [(set_attr \"type\" \"umull\")\n-   (set_attr \"predicable\" \"yes\")]\n+   (set_attr \"predicable\" \"yes\")\n+   (set_attr \"arch\" \"v6,nov6,nov6\")]\n )\n \n (define_insn \"mulhisi3\""}]}