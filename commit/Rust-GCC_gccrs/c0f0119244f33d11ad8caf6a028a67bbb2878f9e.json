{"sha": "c0f0119244f33d11ad8caf6a028a67bbb2878f9e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzBmMDExOTI0NGYzM2QxMWFkOGNhZjZhMDI4YTY3YmJiMjg3OGY5ZQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-07-24T13:18:45Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-07-24T13:18:45Z"}, "message": "runtime: Move new 1.1.1 functions from thread-linux.c to runtime.c.\n\nThis way they are compiled on non-GNU/Linux systems.\n\nFrom-SVN: r201209", "tree": {"sha": "e5eb7ff5de63f09fc77ead5cc3983d2263707efd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e5eb7ff5de63f09fc77ead5cc3983d2263707efd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c0f0119244f33d11ad8caf6a028a67bbb2878f9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0f0119244f33d11ad8caf6a028a67bbb2878f9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0f0119244f33d11ad8caf6a028a67bbb2878f9e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0f0119244f33d11ad8caf6a028a67bbb2878f9e/comments", "author": null, "committer": null, "parents": [{"sha": "493f4c9e091a72c00b0b23f2e8ec137c4bde53ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/493f4c9e091a72c00b0b23f2e8ec137c4bde53ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/493f4c9e091a72c00b0b23f2e8ec137c4bde53ec"}], "stats": {"total": 93, "additions": 47, "deletions": 46}, "files": [{"sha": "1ff6d00e29998b3e99a4d3f8cbbd8d431e6f8c99", "filename": "libgo/runtime/runtime.c", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0f0119244f33d11ad8caf6a028a67bbb2878f9e/libgo%2Fruntime%2Fruntime.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0f0119244f33d11ad8caf6a028a67bbb2878f9e/libgo%2Fruntime%2Fruntime.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fruntime.c?ref=c0f0119244f33d11ad8caf6a028a67bbb2878f9e", "patch": "@@ -2,6 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n+#include <signal.h>\n #include <unistd.h>\n \n #include \"config.h\"\n@@ -232,3 +233,49 @@ runtime_pprof_runtime_cyclesPerSecond(void)\n {\n \treturn runtime_tickspersecond();\n }\n+\n+// Called to initialize a new m (including the bootstrap m).\n+// Called on the parent thread (main thread in case of bootstrap), can allocate memory.\n+void\n+runtime_mpreinit(M *mp)\n+{\n+\tmp->gsignal = runtime_malg(32*1024, &mp->gsignalstack, &mp->gsignalstacksize);\t// OS X wants >=8K, Linux >=2K\n+}\n+\n+// Called to initialize a new m (including the bootstrap m).\n+// Called on the new thread, can not allocate memory.\n+void\n+runtime_minit(void)\n+{\n+\tM* m;\n+\tsigset_t sigs;\n+\n+\t// Initialize signal handling.\n+\tm = runtime_m();\n+\truntime_signalstack(m->gsignalstack, m->gsignalstacksize);\n+\tif (sigemptyset(&sigs) != 0)\n+\t\truntime_throw(\"sigemptyset\");\n+\tsigprocmask(SIG_SETMASK, &sigs, nil);\n+}\n+\n+// Called from dropm to undo the effect of an minit.\n+void\n+runtime_unminit(void)\n+{\n+\truntime_signalstack(nil, 0);\n+}\n+\n+\n+void\n+runtime_signalstack(byte *p, int32 n)\n+{\n+\tstack_t st;\n+\n+\tst.ss_sp = p;\n+\tst.ss_size = n;\n+\tst.ss_flags = 0;\n+\tif(p == nil)\n+\t\tst.ss_flags = SS_DISABLE;\n+\tif(sigaltstack(&st, nil) < 0)\n+\t\t*(int *)0xf1 = 0xf1;\n+}"}, {"sha": "13d23c47b077ead3280056c2496f987f98dec11b", "filename": "libgo/runtime/thread-linux.c", "status": "modified", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0f0119244f33d11ad8caf6a028a67bbb2878f9e/libgo%2Fruntime%2Fthread-linux.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0f0119244f33d11ad8caf6a028a67bbb2878f9e/libgo%2Fruntime%2Fthread-linux.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fthread-linux.c?ref=c0f0119244f33d11ad8caf6a028a67bbb2878f9e", "patch": "@@ -15,7 +15,6 @@\n // Futexsleep is allowed to wake up spuriously.\n \n #include <errno.h>\n-#include <signal.h>\n #include <string.h>\n #include <time.h>\n #include <sys/types.h>\n@@ -84,48 +83,3 @@ runtime_goenvs(void)\n {\n \truntime_goenvs_unix();\n }\n-\n-// Called to initialize a new m (including the bootstrap m).\n-// Called on the parent thread (main thread in case of bootstrap), can allocate memory.\n-void\n-runtime_mpreinit(M *mp)\n-{\n-\tmp->gsignal = runtime_malg(32*1024, &mp->gsignalstack, &mp->gsignalstacksize);\t// OS X wants >=8K, Linux >=2K\n-}\n-\n-// Called to initialize a new m (including the bootstrap m).\n-// Called on the new thread, can not allocate memory.\n-void\n-runtime_minit(void)\n-{\n-\tM* m;\n-\tsigset_t sigs;\n-\n-\t// Initialize signal handling.\n-\tm = runtime_m();\n-\truntime_signalstack(m->gsignalstack, m->gsignalstacksize);\n-\tif (sigemptyset(&sigs) != 0)\n-\t\truntime_throw(\"sigemptyset\");\n-\tsigprocmask(SIG_SETMASK, &sigs, nil);\n-}\n-\n-// Called from dropm to undo the effect of an minit.\n-void\n-runtime_unminit(void)\n-{\n-\truntime_signalstack(nil, 0);\n-}\n-\n-void\n-runtime_signalstack(byte *p, int32 n)\n-{\n-\tstack_t st;\n-\n-\tst.ss_sp = p;\n-\tst.ss_size = n;\n-\tst.ss_flags = 0;\n-\tif(p == nil)\n-\t\tst.ss_flags = SS_DISABLE;\n-\tif(sigaltstack(&st, nil) < 0)\n-\t\t*(int *)0xf1 = 0xf1;\n-}"}]}