{"sha": "714902c8d41b98d1254a17cae94d9192ee8c7d82", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzE0OTAyYzhkNDFiOThkMTI1NGExN2NhZTk0ZDkxOTJlZThjN2Q4Mg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-03-05T01:51:56Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-03-05T01:51:56Z"}, "message": "testsuite_container_traits.h (traits_base): Add has_throwing_erase trait.\n\n2010-03-04  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* testsuite/util/testsuite_container_traits.h (traits_base): Add\n\thas_throwing_erase trait.\n\t(traits<vector>, traits<deque>): Typedef the latter to true_type.\n\t* testsuite/util/exception/safety.h (generation_prohibited):\n\tDo not test vector::erase and deque::erase: can throw if\n\teither copy constructor or assignment operator of value_type\n\tthrows.\n\t* testsuite/23_containers/vector/requirements/exception/\n\tgeneration_prohibited.cc: Remove xfail.\n\t* testsuite/23_containers/deque/requirements/exception/\n\tgeneration_prohibited.cc: Likewise.\n\n\t* include/ext/throw_allocator.h (hash<__gnu_cxx::throw_value_limit>::\n\toperator(), hash<__gnu_cxx::throw_value_random>::operator()): Pass\n\targument by const ref.\n\n\t* testsuite/util/testsuite_container_traits.h (traits<map>,\n\ttraits<multimap>, traits<set>, traits<multiset>,\n\ttraits<unordered_map>, traits<unordered_multimap>,\n\ttraits<unordered_set>, traits<unordered_multiset>): Typedef\n\tconsistently has_erase and has_insert as true_type.\n\n\t* testsuite/util/testsuite_container_traits.h\n\t(traits<unordered_map>, traits<unordered_multimap>,\n\ttraits<unordered_set>, traits<unordered_multiset>): Do not wrongly\n\ttypedef has_size_type_constructor as true_type: the constructor\n\taccepting a size_type actually gets the initial number of\n\tbuckets.\n\nFrom-SVN: r157239", "tree": {"sha": "c991893918a37695a0f5bf9ecd2333d472922937", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c991893918a37695a0f5bf9ecd2333d472922937"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/714902c8d41b98d1254a17cae94d9192ee8c7d82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/714902c8d41b98d1254a17cae94d9192ee8c7d82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/714902c8d41b98d1254a17cae94d9192ee8c7d82", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/714902c8d41b98d1254a17cae94d9192ee8c7d82/comments", "author": null, "committer": null, "parents": [{"sha": "630e6f1be53c41d0d17ece3b9d1167af0c561f84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/630e6f1be53c41d0d17ece3b9d1167af0c561f84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/630e6f1be53c41d0d17ece3b9d1167af0c561f84"}], "stats": {"total": 69, "additions": 56, "deletions": 13}, "files": [{"sha": "c677c05b3ed73145cb591ff5c80e73740fb1e47a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/714902c8d41b98d1254a17cae94d9192ee8c7d82/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/714902c8d41b98d1254a17cae94d9192ee8c7d82/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=714902c8d41b98d1254a17cae94d9192ee8c7d82", "patch": "@@ -1,3 +1,34 @@\n+2010-03-04  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* testsuite/util/testsuite_container_traits.h (traits_base): Add\n+\thas_throwing_erase trait.\n+\t(traits<vector>, traits<deque>): Typedef the latter to true_type.\n+\t* testsuite/util/exception/safety.h (generation_prohibited):\n+\tDo not test vector::erase and deque::erase: can throw if\n+\teither copy constructor or assignment operator of value_type\n+\tthrows.\n+\t* testsuite/23_containers/vector/requirements/exception/\n+\tgeneration_prohibited.cc: Remove xfail.\n+\t* testsuite/23_containers/deque/requirements/exception/\n+\tgeneration_prohibited.cc: Likewise.\n+\n+\t* include/ext/throw_allocator.h (hash<__gnu_cxx::throw_value_limit>::\n+\toperator(), hash<__gnu_cxx::throw_value_random>::operator()): Pass\n+\targument by const ref.\n+\n+\t* testsuite/util/testsuite_container_traits.h (traits<map>,\n+\ttraits<multimap>, traits<set>, traits<multiset>,\n+\ttraits<unordered_map>, traits<unordered_multimap>,\n+\ttraits<unordered_set>, traits<unordered_multiset>): Typedef\n+\tconsistently has_erase and has_insert as true_type.\n+\n+\t* testsuite/util/testsuite_container_traits.h\n+\t(traits<unordered_map>, traits<unordered_multimap>,\n+\ttraits<unordered_set>, traits<unordered_multiset>): Do not wrongly\n+\ttypedef has_size_type_constructor as true_type: the constructor\n+\taccepting a size_type actually gets the initial number of\n+\tbuckets.\n+\n 2010-03-03  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* doc/Makefile.am: Re-organize xml sources."}, {"sha": "48089bd7dd04d17b069841c92d008c277b5546fd", "filename": "libstdc++-v3/include/ext/throw_allocator.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/714902c8d41b98d1254a17cae94d9192ee8c7d82/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/714902c8d41b98d1254a17cae94d9192ee8c7d82/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h?ref=714902c8d41b98d1254a17cae94d9192ee8c7d82", "patch": "@@ -1,6 +1,7 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2007, 2008, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2007, 2008, 2009, 2010\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -728,7 +729,7 @@ namespace std\n     : public std::unary_function<__gnu_cxx::throw_value_limit, size_t>\n     {\n       size_t\n-      operator()(__gnu_cxx::throw_value_limit __val) const\n+      operator()(const __gnu_cxx::throw_value_limit& __val) const\n       {\n \tstd::hash<std::size_t> h;\n \tsize_t __result = h(__val._M_i);\n@@ -742,7 +743,7 @@ namespace std\n     : public std::unary_function<__gnu_cxx::throw_value_random, size_t>\n     {\n       size_t\n-      operator()(__gnu_cxx::throw_value_random __val) const\n+      operator()(const __gnu_cxx::throw_value_random& __val) const\n       {\n \tstd::hash<std::size_t> h;\n \tsize_t __result = h(__val._M_i);"}, {"sha": "aa3a8ba87f7db111040e4a0f820c7bec6cfd99ff", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/exception/generation_prohibited.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/714902c8d41b98d1254a17cae94d9192ee8c7d82/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fexception%2Fgeneration_prohibited.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/714902c8d41b98d1254a17cae94d9192ee8c7d82/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fexception%2Fgeneration_prohibited.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fexception%2Fgeneration_prohibited.cc?ref=714902c8d41b98d1254a17cae94d9192ee8c7d82", "patch": "@@ -1,10 +1,9 @@\n // { dg-options \"-std=gnu++0x\" }\n // { dg-require-cstdint \"\" }\n-// { dg-do run { xfail *-*-* } }\n \n // 2009-09-09  Benjamin Kosnik  <benjamin@redhat.com>\n \n-// Copyright (C) 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the"}, {"sha": "acd2c211d5abe9212e1655e405a0269b1bbd23ad", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/exception/generation_prohibited.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/714902c8d41b98d1254a17cae94d9192ee8c7d82/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fexception%2Fgeneration_prohibited.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/714902c8d41b98d1254a17cae94d9192ee8c7d82/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fexception%2Fgeneration_prohibited.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fexception%2Fgeneration_prohibited.cc?ref=714902c8d41b98d1254a17cae94d9192ee8c7d82", "patch": "@@ -1,10 +1,9 @@\n // { dg-options \"-std=gnu++0x\" }\n // { dg-require-cstdint \"\" }\n-// { dg-do run { xfail *-*-* } }\n \n // 2009-09-09  Benjamin Kosnik  <benjamin@redhat.com>\n \n-// Copyright (C) 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the"}, {"sha": "a17b755ce52f1f26cd6ee642b1d1a7af04d28e14", "filename": "libstdc++-v3/testsuite/util/exception/safety.h", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/714902c8d41b98d1254a17cae94d9192ee8c7d82/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fexception%2Fsafety.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/714902c8d41b98d1254a17cae94d9192ee8c7d82/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fexception%2Fsafety.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fexception%2Fsafety.h?ref=714902c8d41b98d1254a17cae94d9192ee8c7d82", "patch": "@@ -1096,8 +1096,13 @@ namespace __gnu_test\n \t{\n \t  condition_type::always_adjustor on;\n \n-\t  _M_erasep(_M_container);\n-\t  _M_eraser(_M_container);\n+\t  // NB: Vector and deque are special, erase can throw if the copy\n+\t  // constructor or assignment operator of value_type throws.\n+\t  if (!traits<container_type>::has_throwing_erase::value)\n+\t    {\n+\t      _M_erasep(_M_container);\n+\t      _M_eraser(_M_container);\n+\t    }\n \n \t  _M_popf(_M_container);\n \t  _M_popb(_M_container);"}, {"sha": "d6be4440b0a81162a10887ebe9094c8d46f89a5c", "filename": "libstdc++-v3/testsuite/util/testsuite_container_traits.h", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/714902c8d41b98d1254a17cae94d9192ee8c7d82/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_container_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/714902c8d41b98d1254a17cae94d9192ee8c7d82/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_container_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_container_traits.h?ref=714902c8d41b98d1254a17cae94d9192ee8c7d82", "patch": "@@ -39,6 +39,7 @@ namespace __gnu_test\n     typedef std::false_type\tis_mapped;\n \n     typedef std::false_type\thas_erase;\n+    typedef std::false_type\thas_throwing_erase;\n     typedef std::false_type\thas_insert;\n     typedef std::false_type\thas_push_pop;\n     typedef std::false_type\thas_size_type_constructor;\n@@ -65,6 +66,7 @@ namespace __gnu_test\n       typedef std::true_type\tis_allocator_aware;\n \n       typedef std::true_type\thas_erase;\n+      typedef std::true_type\thas_throwing_erase;\n       typedef std::true_type\thas_insert;\n       typedef std::true_type\thas_push_pop;\n       typedef std::true_type\thas_size_type_constructor;\n@@ -103,6 +105,7 @@ namespace __gnu_test\n       typedef std::true_type    is_allocator_aware;\n \n       typedef std::true_type\thas_erase;\n+      typedef std::true_type\thas_throwing_erase;\n       typedef std::true_type\thas_insert;\n       typedef std::true_type\thas_size_type_constructor;\n     };\n@@ -140,6 +143,7 @@ namespace __gnu_test\n       typedef std::true_type\tis_associative;\n       typedef std::true_type\tis_mapped;\n \n+      typedef std::true_type\thas_erase;\n       typedef std::true_type\thas_insert;\n     };\n \n@@ -152,6 +156,7 @@ namespace __gnu_test\n       typedef std::true_type\tis_associative;\n       typedef std::true_type\tis_mapped;\n \n+      typedef std::true_type\thas_erase;\n       typedef std::true_type\thas_insert;\n     };\n \n@@ -163,6 +168,7 @@ namespace __gnu_test\n       typedef std::true_type\tis_allocator_aware;\n       typedef std::true_type\tis_associative;\n \n+      typedef std::true_type\thas_erase;\n       typedef std::true_type\thas_insert;\n     };\n \n@@ -174,6 +180,7 @@ namespace __gnu_test\n       typedef std::true_type\tis_allocator_aware;\n       typedef std::true_type\tis_associative;\n \n+      typedef std::true_type\thas_erase;\n       typedef std::true_type\thas_insert;\n     };\n \n@@ -205,7 +212,7 @@ namespace __gnu_test\n       typedef std::true_type\tis_unordered;\n       typedef std::true_type\tis_mapped;\n \n-      typedef std::true_type\thas_size_type_constructor;\n+      typedef std::true_type\thas_erase;\n       typedef std::true_type\thas_insert;\n     };\n \n@@ -219,7 +226,8 @@ namespace __gnu_test\n       typedef std::true_type\tis_unordered;\n       typedef std::true_type\tis_mapped;\n \n-      typedef std::true_type\thas_size_type_constructor;\n+      typedef std::true_type\thas_erase;\n+      typedef std::true_type\thas_insert;\n     };\n \n   template<typename _Tp1, typename _Tp2, typename _Tp3, typename _Tp4>\n@@ -230,7 +238,7 @@ namespace __gnu_test\n       typedef std::true_type\tis_allocator_aware;\n       typedef std::true_type\tis_unordered;\n \n-      typedef std::true_type\thas_size_type_constructor;\n+      typedef std::true_type\thas_erase;\n       typedef std::true_type\thas_insert;\n     };\n \n@@ -242,7 +250,7 @@ namespace __gnu_test\n       typedef std::true_type\tis_allocator_aware;\n       typedef std::true_type\tis_unordered;\n \n-      typedef std::true_type\thas_size_type_constructor;\n+      typedef std::true_type\thas_erase;\n       typedef std::true_type\thas_insert;\n     };\n } // namespace __gnu_test"}]}