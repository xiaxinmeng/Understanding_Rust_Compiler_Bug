{"sha": "1dd4a3e6378a4f20d7c6ce9ef588e65cbe0e38e7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWRkNGEzZTYzNzhhNGYyMGQ3YzZjZTllZjU4OGU2NWNiZTBlMzhlNw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2008-06-12T13:19:06Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2008-06-12T13:19:06Z"}, "message": "decl.c (gnat_to_gnu_entity): In the case of a constrained subtype of a discriminated type...\n\n\t* decl.c (gnat_to_gnu_entity) <E_Record_Subtype>: In the case of a\n\tconstrained subtype of a discriminated type, discard the fields that\n\tare beyond its limits according to its size.\n\nFrom-SVN: r136707", "tree": {"sha": "2db270491bd07d4352f95eee6ffa4b3a27eca273", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2db270491bd07d4352f95eee6ffa4b3a27eca273"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1dd4a3e6378a4f20d7c6ce9ef588e65cbe0e38e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dd4a3e6378a4f20d7c6ce9ef588e65cbe0e38e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1dd4a3e6378a4f20d7c6ce9ef588e65cbe0e38e7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dd4a3e6378a4f20d7c6ce9ef588e65cbe0e38e7/comments", "author": null, "committer": null, "parents": [{"sha": "fcd2a5d4d6600edbd2937830c60b5e5696ab1593", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcd2a5d4d6600edbd2937830c60b5e5696ab1593", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fcd2a5d4d6600edbd2937830c60b5e5696ab1593"}], "stats": {"total": 140, "additions": 96, "deletions": 44}, "files": [{"sha": "5b143ae820a26765c1a81f1148f71828bf5debc2", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dd4a3e6378a4f20d7c6ce9ef588e65cbe0e38e7/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dd4a3e6378a4f20d7c6ce9ef588e65cbe0e38e7/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1dd4a3e6378a4f20d7c6ce9ef588e65cbe0e38e7", "patch": "@@ -1,3 +1,9 @@\n+2008-06-12  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* decl.c (gnat_to_gnu_entity) <E_Record_Subtype>: In the case of a\n+\tconstrained subtype of a discriminated type, discard the fields that\n+\tare beyond its limits according to its size.\n+\n 2008-06-10  Olivier Hainque  <hainque@adacore.com>\n \n \t* utils.c (create_subprog_decl): If this is for the 'main' entry"}, {"sha": "dbd797089faa7eff0ce9033d91435f333aa04d6e", "filename": "gcc/ada/decl.c", "status": "modified", "additions": 54, "deletions": 44, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dd4a3e6378a4f20d7c6ce9ef588e65cbe0e38e7/gcc%2Fada%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dd4a3e6378a4f20d7c6ce9ef588e65cbe0e38e7/gcc%2Fada%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdecl.c?ref=1dd4a3e6378a4f20d7c6ce9ef588e65cbe0e38e7", "patch": "@@ -2922,9 +2922,42 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \n \t      gnu_type = make_node (RECORD_TYPE);\n \t      TYPE_NAME (gnu_type) = gnu_entity_id;\n-\t      TYPE_ALIGN (gnu_type) = TYPE_ALIGN (gnu_base_type);\n \t      TYPE_VOLATILE (gnu_type) = Treat_As_Volatile (gnat_entity);\n \n+\t      /* Set the size, alignment and alias set of the new type to\n+\t\t match that of the old one, doing required substitutions.\n+\t\t We do it this early because we need the size of the new\n+\t\t type below to discard old fields if necessary.  */\n+\t      TYPE_SIZE (gnu_type) = TYPE_SIZE (gnu_base_type);\n+\t      TYPE_SIZE_UNIT (gnu_type) = TYPE_SIZE_UNIT (gnu_base_type);\n+\t      SET_TYPE_ADA_SIZE (gnu_type, TYPE_ADA_SIZE (gnu_base_type));\n+\t      TYPE_ALIGN (gnu_type) = TYPE_ALIGN (gnu_base_type);\n+\t      copy_alias_set (gnu_type, gnu_base_type);\n+\n+\t      if (CONTAINS_PLACEHOLDER_P (TYPE_SIZE (gnu_type)))\n+\t\tfor (gnu_temp = gnu_subst_list;\n+\t\t     gnu_temp; gnu_temp = TREE_CHAIN (gnu_temp))\n+\t\t  TYPE_SIZE (gnu_type)\n+\t\t    = substitute_in_expr (TYPE_SIZE (gnu_type),\n+\t\t\t\t\t  TREE_PURPOSE (gnu_temp),\n+\t\t\t\t\t  TREE_VALUE (gnu_temp));\n+\n+\t      if (CONTAINS_PLACEHOLDER_P (TYPE_SIZE_UNIT (gnu_type)))\n+\t\tfor (gnu_temp = gnu_subst_list;\n+\t\t     gnu_temp; gnu_temp = TREE_CHAIN (gnu_temp))\n+\t\t  TYPE_SIZE_UNIT (gnu_type)\n+\t\t    = substitute_in_expr (TYPE_SIZE_UNIT (gnu_type),\n+\t\t\t\t\t  TREE_PURPOSE (gnu_temp),\n+\t\t\t\t\t  TREE_VALUE (gnu_temp));\n+\n+\t      if (CONTAINS_PLACEHOLDER_P (TYPE_ADA_SIZE (gnu_type)))\n+\t\tfor (gnu_temp = gnu_subst_list;\n+\t\t     gnu_temp; gnu_temp = TREE_CHAIN (gnu_temp))\n+\t\t  SET_TYPE_ADA_SIZE\n+\t\t    (gnu_type, substitute_in_expr (TYPE_ADA_SIZE (gnu_type),\n+\t\t\t\t\t\t   TREE_PURPOSE (gnu_temp),\n+\t\t\t\t\t\t   TREE_VALUE (gnu_temp)));\n+\n \t      for (gnat_field = First_Entity (gnat_entity);\n \t\t   Present (gnat_field); gnat_field = Next_Entity (gnat_field))\n \t\tif ((Ekind (gnat_field) == E_Component\n@@ -2946,7 +2979,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t\t    tree gnu_field_type\n \t\t      = gnat_to_gnu_type (Etype (gnat_field));\n \t\t    tree gnu_size = TYPE_SIZE (gnu_field_type);\n-\t\t    tree gnu_new_pos = 0;\n+\t\t    tree gnu_new_pos = NULL_TREE;\n \t\t    unsigned int offset_align\n \t\t      = tree_low_cst (TREE_PURPOSE (TREE_VALUE (gnu_offset)),\n \t\t\t\t      1);\n@@ -2992,11 +3025,23 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t\t\t\t\t\t      TREE_PURPOSE (gnu_temp),\n \t\t\t\t\t\t      TREE_VALUE (gnu_temp));\n \n-\t\t    /* If the size is now a constant, we can set it as the\n-\t\t       size of the field when we make it.  Otherwise, we need\n-\t\t       to deal with it specially.  */\n+\t\t    /* If the position is now a constant, we can set it as the\n+\t\t       position of the field when we make it.  Otherwise, we need\n+\t\t       to deal with it specially below.  */\n \t\t    if (TREE_CONSTANT (gnu_pos))\n-\t\t      gnu_new_pos = bit_from_pos (gnu_pos, gnu_bitpos);\n+\t\t      {\n+\t\t        gnu_new_pos = bit_from_pos (gnu_pos, gnu_bitpos);\n+\n+\t\t\t/* Discard old fields that are outside the new type.\n+\t\t\t   This avoids confusing code scanning it to decide\n+\t\t\t   how to pass it to functions on some platforms.   */\n+\t\t\tif (TREE_CODE (gnu_new_pos) == INTEGER_CST\n+\t\t\t    && TREE_CODE (TYPE_SIZE (gnu_type)) == INTEGER_CST\n+\t\t\t    && !integer_zerop (gnu_size)\n+\t\t\t    && !tree_int_cst_lt (gnu_new_pos,\n+\t\t\t\t\t\t TYPE_SIZE (gnu_type)))\n+\t\t\t  continue;\n+\t\t      }\n \n \t\t    gnu_field\n \t\t      = create_field_decl\n@@ -3044,49 +3089,14 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t\t  gnat_to_gnu_entity (Etype (gnat_field), NULL_TREE, 0);\n \n \t      /* Do not finalize it since we're going to modify it below.  */\n-\t      finish_record_type (gnu_type, nreverse (gnu_field_list),\n-\t\t\t\t  2, true);\n-\n-\t      /* Now set the size, alignment and alias set of the new type to\n-\t\t match that of the old one, doing any substitutions, as\n-\t\t above.  */\n-\t      TYPE_ALIGN (gnu_type) = TYPE_ALIGN (gnu_base_type);\n-\t      TYPE_SIZE (gnu_type) = TYPE_SIZE (gnu_base_type);\n-\t      TYPE_SIZE_UNIT (gnu_type) = TYPE_SIZE_UNIT (gnu_base_type);\n-\t      SET_TYPE_ADA_SIZE (gnu_type, TYPE_ADA_SIZE (gnu_base_type));\n-\t      copy_alias_set (gnu_type, gnu_base_type);\n-\n-\t      if (CONTAINS_PLACEHOLDER_P (TYPE_SIZE (gnu_type)))\n-\t\tfor (gnu_temp = gnu_subst_list;\n-\t\t     gnu_temp; gnu_temp = TREE_CHAIN (gnu_temp))\n-\t\t  TYPE_SIZE (gnu_type)\n-\t\t    = substitute_in_expr (TYPE_SIZE (gnu_type),\n-\t\t\t\t\t  TREE_PURPOSE (gnu_temp),\n-\t\t\t\t\t  TREE_VALUE (gnu_temp));\n-\n-\t      if (CONTAINS_PLACEHOLDER_P (TYPE_SIZE_UNIT (gnu_type)))\n-\t\tfor (gnu_temp = gnu_subst_list;\n-\t\t     gnu_temp; gnu_temp = TREE_CHAIN (gnu_temp))\n-\t\t  TYPE_SIZE_UNIT (gnu_type)\n-\t\t    = substitute_in_expr (TYPE_SIZE_UNIT (gnu_type),\n-\t\t\t\t\t  TREE_PURPOSE (gnu_temp),\n-\t\t\t\t\t  TREE_VALUE (gnu_temp));\n-\n-\t      if (CONTAINS_PLACEHOLDER_P (TYPE_ADA_SIZE (gnu_type)))\n-\t\tfor (gnu_temp = gnu_subst_list;\n-\t\t     gnu_temp; gnu_temp = TREE_CHAIN (gnu_temp))\n-\t\t  SET_TYPE_ADA_SIZE\n-\t\t    (gnu_type, substitute_in_expr (TYPE_ADA_SIZE (gnu_type),\n-\t\t\t\t\t\t   TREE_PURPOSE (gnu_temp),\n-\t\t\t\t\t\t   TREE_VALUE (gnu_temp)));\n+\t      gnu_field_list = nreverse (gnu_field_list);\n+\t      finish_record_type (gnu_type, gnu_field_list, 2, true);\n \n-\t      /* Reapply variable_size since we have changed the sizes.  */\n+\t      /* Finalize size and mode.  */\n \t      TYPE_SIZE (gnu_type) = variable_size (TYPE_SIZE (gnu_type));\n \t      TYPE_SIZE_UNIT (gnu_type)\n \t\t= variable_size (TYPE_SIZE_UNIT (gnu_type));\n \n-\t      /* Recompute the mode of this record type now that we know its\n-\t\t actual size.  */\n \t      compute_record_mode (gnu_type);\n \n \t      /* Fill in locations of fields.  */"}, {"sha": "d0e0a736abba665da3596930a9459eba21f8ebed", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dd4a3e6378a4f20d7c6ce9ef588e65cbe0e38e7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dd4a3e6378a4f20d7c6ce9ef588e65cbe0e38e7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1dd4a3e6378a4f20d7c6ce9ef588e65cbe0e38e7", "patch": "@@ -1,3 +1,7 @@\n+2008-06-12  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/discr9.ad[sb]: New test.\n+\n 2008-06-12  Joseph Myers  <joseph@codesourcery.com>\n \n \t* gcc.dg/compat/struct-layout-1.exp (orig_gcc_exec_prefix_saved):"}, {"sha": "199855f57fc8a52dea871bba68acda64bbfae900", "filename": "gcc/testsuite/gnat.dg/discr9.adb", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dd4a3e6378a4f20d7c6ce9ef588e65cbe0e38e7/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dd4a3e6378a4f20d7c6ce9ef588e65cbe0e38e7/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr9.adb?ref=1dd4a3e6378a4f20d7c6ce9ef588e65cbe0e38e7", "patch": "@@ -0,0 +1,10 @@\n+-- { dg-do compile }\n+\n+package body Discr9 is\n+\n+   procedure Proc (From : in R; To : out R) is\n+   begin\n+      To := R'(D1 => False, D2 => From.D2, Field => From.Field);\n+   end;\n+\n+end Discr9;"}, {"sha": "5edde81bff8d55244312ced115bc234647bea693", "filename": "gcc/testsuite/gnat.dg/discr9.ads", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dd4a3e6378a4f20d7c6ce9ef588e65cbe0e38e7/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr9.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dd4a3e6378a4f20d7c6ce9ef588e65cbe0e38e7/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr9.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr9.ads?ref=1dd4a3e6378a4f20d7c6ce9ef588e65cbe0e38e7", "patch": "@@ -0,0 +1,22 @@\n+package Discr9 is\n+\n+   type IArr is Array (Natural range <>) of Integer;\n+   type CArr is Array (Natural range <>) of Character;\n+\n+   type Var_R (D1 : Boolean; D2 : Boolean) is record\n+      case D1 is\n+\t when True =>\n+\t    L : IArr (1..4);\n+\t    M1, M2 : CArr (1..16);\n+\t when False =>\n+\t    null;\n+      end case;\n+   end record;\n+\n+   type R (D1 : Boolean; D2 : Boolean) is record\n+      Field : Var_R (D1, D2);\n+   end record;\n+\n+   procedure Proc (From : in R; To : out R);\n+\n+end Discr9;"}]}