{"sha": "106aaf4f821d2a574c2e877740e513fb2eda4869", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTA2YWFmNGY4MjFkMmE1NzRjMmU4Nzc3NDBlNTEzZmIyZWRhNDg2OQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2015-01-31T00:20:10Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2015-01-31T00:20:10Z"}, "message": "compiler: Treat map index expressions as lvalues in range expressions.\n\nFixes golang/go#9695.\n\nFrom-SVN: r220301", "tree": {"sha": "0ad264db38d1315f3f7ab7a22dd919f00be68edd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0ad264db38d1315f3f7ab7a22dd919f00be68edd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/106aaf4f821d2a574c2e877740e513fb2eda4869", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/106aaf4f821d2a574c2e877740e513fb2eda4869", "html_url": "https://github.com/Rust-GCC/gccrs/commit/106aaf4f821d2a574c2e877740e513fb2eda4869", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/106aaf4f821d2a574c2e877740e513fb2eda4869/comments", "author": null, "committer": null, "parents": [{"sha": "a6b483da4da1fed7788c175ea2e74bf4d782a544", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6b483da4da1fed7788c175ea2e74bf4d782a544", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6b483da4da1fed7788c175ea2e74bf4d782a544"}], "stats": {"total": 19, "additions": 11, "deletions": 8}, "files": [{"sha": "29edba7650a2afd0626d673af657e6d032dd80b5", "filename": "gcc/go/gofrontend/parse.cc", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/106aaf4f821d2a574c2e877740e513fb2eda4869/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/106aaf4f821d2a574c2e877740e513fb2eda4869/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fparse.cc?ref=106aaf4f821d2a574c2e877740e513fb2eda4869", "patch": "@@ -4011,6 +4011,16 @@ Parse::tuple_assignment(Expression_list* lhs, bool may_be_composite_lit,\n \n   token = this->advance_token();\n \n+  if (lhs == NULL)\n+    return;\n+\n+  // Map expressions act differently when they are lvalues.\n+  for (Expression_list::iterator plv = lhs->begin();\n+       plv != lhs->end();\n+       ++plv)\n+    if ((*plv)->index_expression() != NULL)\n+      (*plv)->index_expression()->set_is_lvalue();\n+\n   if (p_range_clause != NULL && token->is_keyword(KEYWORD_RANGE))\n     {\n       if (op != OPERATOR_EQ)\n@@ -4023,7 +4033,7 @@ Parse::tuple_assignment(Expression_list* lhs, bool may_be_composite_lit,\n \t\t\t\t\t\tmay_be_composite_lit);\n \n   // We've parsed everything; check for errors.\n-  if (lhs == NULL || vals == NULL)\n+  if (vals == NULL)\n     return;\n   for (Expression_list::const_iterator pe = lhs->begin();\n        pe != lhs->end();\n@@ -4042,13 +4052,6 @@ Parse::tuple_assignment(Expression_list* lhs, bool may_be_composite_lit,\n \treturn;\n     }\n \n-  // Map expressions act differently when they are lvalues.\n-  for (Expression_list::iterator plv = lhs->begin();\n-       plv != lhs->end();\n-       ++plv)\n-    if ((*plv)->index_expression() != NULL)\n-      (*plv)->index_expression()->set_is_lvalue();\n-\n   Call_expression* call;\n   Index_expression* map_index;\n   Receive_expression* receive;"}]}