{"sha": "95c0a8a714efb1be55f3bb2af190db003d6455dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTVjMGE4YTcxNGVmYjFiZTU1ZjNiYjJhZjE5MGRiMDAzZDY0NTVkYw==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2011-12-07T19:47:03Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2011-12-07T19:47:03Z"}, "message": "re PR libstdc++/51386 (23_containers/unordered_set/hash_policy/load_factor.cc execution timeout)\n\n2011-12-07  Fran\u00e7ois Dumont <fdumont@gcc.gnu.org>\n\n\tPR libstdc++/51386\n\t* include/bits/hashtable_policy.h (_Prime_rehash_policy::_M_next_bkt):\n\tFix computation of _M_prev_resize so that hashtable do not keep on\n\tbeing rehashed when _M_max_load_factor is lower than 1.\n\nFrom-SVN: r182085", "tree": {"sha": "c55917c60479c8571ba34ecd6313ba38a6d70232", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c55917c60479c8571ba34ecd6313ba38a6d70232"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/95c0a8a714efb1be55f3bb2af190db003d6455dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95c0a8a714efb1be55f3bb2af190db003d6455dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95c0a8a714efb1be55f3bb2af190db003d6455dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95c0a8a714efb1be55f3bb2af190db003d6455dc/comments", "author": null, "committer": null, "parents": [{"sha": "3c411f3f2c4ed6dbc3a2c0996533dcb9d0365a8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c411f3f2c4ed6dbc3a2c0996533dcb9d0365a8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c411f3f2c4ed6dbc3a2c0996533dcb9d0365a8d"}], "stats": {"total": 40, "additions": 27, "deletions": 13}, "files": [{"sha": "d8707d8d3711e628071ff3093cd677fb62ab9bd7", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95c0a8a714efb1be55f3bb2af190db003d6455dc/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95c0a8a714efb1be55f3bb2af190db003d6455dc/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=95c0a8a714efb1be55f3bb2af190db003d6455dc", "patch": "@@ -1,3 +1,10 @@\n+2011-12-07  Fran\u00e7ois Dumont <fdumont@gcc.gnu.org>\n+\n+\tPR libstdc++/51386\n+\t* include/bits/hashtable_policy.h (_Prime_rehash_policy::_M_next_bkt):\n+\tFix computation of _M_prev_resize so that hashtable do not keep on\n+\tbeing rehashed when _M_max_load_factor is lower than 1.\n+\n 2011-12-06  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR libstdc++/51438"}, {"sha": "e97685c6ae7e0950386d3faaa4d29e949a600c8d", "filename": "libstdc++-v3/include/bits/hashtable_policy.h", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95c0a8a714efb1be55f3bb2af190db003d6455dc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95c0a8a714efb1be55f3bb2af190db003d6455dc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h?ref=95c0a8a714efb1be55f3bb2af190db003d6455dc", "patch": "@@ -300,23 +300,30 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   {\n     // Optimize lookups involving the first elements of __prime_list.\n     // (useful to speed-up, eg, constructors)\n-    static const unsigned long __fast_bkt[12]\n+    static const unsigned char __fast_bkt[12]\n       = { 2, 2, 2, 3, 5, 5, 7, 7, 11, 11, 11, 11 };\n \n+    if (__n <= 11)\n+      {\n+\t_M_prev_resize = 0;\n+\t_M_next_resize\n+\t  = __builtin_ceil(__fast_bkt[__n] * (long double)_M_max_load_factor);\n+\treturn __fast_bkt[__n];\n+      }\n+\n     const unsigned long* __p\n-      = __n <= 11 ? __fast_bkt + __n\n-\t\t  : std::lower_bound(__prime_list + 5,\n-\t\t\t\t     __prime_list + _S_n_primes, __n);\n-\n-    _M_prev_resize = __builtin_floor(*__p * (long double)_M_max_load_factor);\n-    if (__p != __fast_bkt)\n-      _M_prev_resize = std::min(_M_prev_resize,\n-\t\t\t\tstatic_cast<std::size_t>(*(__p - 1)));\n-    // Lets guaranty a minimal grow step of 11:\n+      = std::lower_bound(__prime_list + 5, __prime_list + _S_n_primes, __n);\n+\n+    // Shrink will take place only if the number of elements is small enough\n+    // so that the prime number 2 steps before __p is large enough to still\n+    // conform to the max load factor:\n+    _M_prev_resize\n+      = __builtin_floor(*(__p - 2) * (long double)_M_max_load_factor);\n+\n+    // Let's guaranty that a minimal grow step of 11 is used\n     if (*__p - __n < 11)\n-      __p = std::lower_bound(__prime_list + 5,\n-\t\t\t     __prime_list + _S_n_primes, __n + 11);\n-    _M_next_resize = __builtin_floor(*__p * (long double)_M_max_load_factor);\n+      __p = std::lower_bound(__p, __prime_list + _S_n_primes, __n + 11);\n+    _M_next_resize = __builtin_ceil(*__p * (long double)_M_max_load_factor);\n     return *__p;\n   }\n "}]}