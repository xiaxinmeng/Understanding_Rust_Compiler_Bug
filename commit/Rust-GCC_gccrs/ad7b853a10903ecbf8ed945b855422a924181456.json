{"sha": "ad7b853a10903ecbf8ed945b855422a924181456", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQ3Yjg1M2ExMDkwM2VjYmY4ZWQ5NDViODU1NDIyYTkyNDE4MTQ1Ng==", "commit": {"author": {"name": "Wilco Dijkstra", "email": "wdijkstr@arm.com", "date": "2015-07-27T16:18:36Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2015-07-27T16:18:36Z"}, "message": "[PATCH][AArch64] Improve spill code - swap order in shr patterns\n\ngcc/\n\n\t* gcc/config/aarch64/aarch64.md (aarch64_lshr_sisd_or_int_<mode>3):\n\tPlace integer variant first.\n\t(aarch64_ashr_sisd_or_int_<mode>3): Likewise.\n\nFrom-SVN: r226253", "tree": {"sha": "fddd4fba8e1a219fae4f88898c629f84d5042e98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fddd4fba8e1a219fae4f88898c629f84d5042e98"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad7b853a10903ecbf8ed945b855422a924181456", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad7b853a10903ecbf8ed945b855422a924181456", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad7b853a10903ecbf8ed945b855422a924181456", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad7b853a10903ecbf8ed945b855422a924181456/comments", "author": null, "committer": null, "parents": [{"sha": "6d60b856e4228daa75ea3514bfcaf1664e2b56d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d60b856e4228daa75ea3514bfcaf1664e2b56d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d60b856e4228daa75ea3514bfcaf1664e2b56d3"}], "stats": {"total": 33, "additions": 20, "deletions": 13}, "files": [{"sha": "c27c20dc83d089bef1323f3a1b031703a4b91afa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad7b853a10903ecbf8ed945b855422a924181456/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad7b853a10903ecbf8ed945b855422a924181456/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ad7b853a10903ecbf8ed945b855422a924181456", "patch": "@@ -1,3 +1,9 @@\n+2015-07-27  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\t* gcc/config/aarch64/aarch64.md (aarch64_lshr_sisd_or_int_<mode>3):\n+\tPlace integer variant first.\n+\t(aarch64_ashr_sisd_or_int_<mode>3): Likewise.\n+\n 2015-07-27  Alan Lawrence  <alan.lawrence@arm.com>\n \n \tPR/63870"}, {"sha": "01cdf9c74d54068b73da84371feb116a9457f79a", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad7b853a10903ecbf8ed945b855422a924181456/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad7b853a10903ecbf8ed945b855422a924181456/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=ad7b853a10903ecbf8ed945b855422a924181456", "patch": "@@ -3538,17 +3538,18 @@\n \n ;; Logical right shift using SISD or Integer instruction\n (define_insn \"*aarch64_lshr_sisd_or_int_<mode>3\"\n-  [(set (match_operand:GPI 0 \"register_operand\" \"=w,&w,r\")\n+  [(set (match_operand:GPI 0 \"register_operand\" \"=r,w,&w,&w\")\n         (lshiftrt:GPI\n-          (match_operand:GPI 1 \"register_operand\" \"w,w,r\")\n-          (match_operand:QI 2 \"aarch64_reg_or_shift_imm_<mode>\" \"Us<cmode>,w,rUs<cmode>\")))]\n+          (match_operand:GPI 1 \"register_operand\" \"r,w,w,w\")\n+          (match_operand:QI 2 \"aarch64_reg_or_shift_imm_<mode>\" \"rUs<cmode>,Us<cmode>,w,0\")))]\n   \"\"\n   \"@\n+   lsr\\t%<w>0, %<w>1, %<w>2\n    ushr\\t%<rtn>0<vas>, %<rtn>1<vas>, %2\n    #\n-   lsr\\t%<w>0, %<w>1, %<w>2\"\n-  [(set_attr \"simd\" \"yes,yes,no\")\n-   (set_attr \"type\" \"neon_shift_imm<q>,neon_shift_reg<q>,shift_reg\")]\n+   #\"\n+  [(set_attr \"simd\" \"no,yes,yes,yes\")\n+   (set_attr \"type\" \"shift_reg,neon_shift_imm<q>,neon_shift_reg<q>,neon_shift_reg<q>\")]\n )\n \n (define_split\n@@ -3583,18 +3584,18 @@\n \n ;; Arithmetic right shift using SISD or Integer instruction\n (define_insn \"*aarch64_ashr_sisd_or_int_<mode>3\"\n-  [(set (match_operand:GPI 0 \"register_operand\" \"=w,&w,&w,r\")\n+  [(set (match_operand:GPI 0 \"register_operand\" \"=r,w,&w,&w\")\n         (ashiftrt:GPI\n-          (match_operand:GPI 1 \"register_operand\" \"w,w,w,r\")\n-          (match_operand:QI 2 \"aarch64_reg_or_shift_imm_di\" \"Us<cmode>,w,0,rUs<cmode>\")))]\n+          (match_operand:GPI 1 \"register_operand\" \"r,w,w,w\")\n+          (match_operand:QI 2 \"aarch64_reg_or_shift_imm_di\" \"rUs<cmode>,Us<cmode>,w,0\")))]\n   \"\"\n   \"@\n+   asr\\t%<w>0, %<w>1, %<w>2\n    sshr\\t%<rtn>0<vas>, %<rtn>1<vas>, %2\n    #\n-   #\n-   asr\\t%<w>0, %<w>1, %<w>2\"\n-  [(set_attr \"simd\" \"yes,yes,yes,no\")\n-   (set_attr \"type\" \"neon_shift_imm<q>,neon_shift_reg<q>,neon_shift_reg<q>,shift_reg\")]\n+   #\"\n+  [(set_attr \"simd\" \"no,yes,yes,yes\")\n+   (set_attr \"type\" \"shift_reg,neon_shift_imm<q>,neon_shift_reg<q>,neon_shift_reg<q>\")]\n )\n \n (define_split"}]}