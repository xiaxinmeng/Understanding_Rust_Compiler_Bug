{"sha": "f4a513a98e6341b2d4796752644a27c722612847", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjRhNTEzYTk4ZTYzNDFiMmQ0Nzk2NzUyNjQ0YTI3YzcyMjYxMjg0Nw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2015-10-29T18:14:50Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2015-10-29T18:14:50Z"}, "message": "compiler, reflect, runtime: remove zero field from type descriptor\n    \n    Type descriptors picked up a zero field because the gc map\n    implementation used it.  However, it's since been dropped by the gc\n    library.  It was never used by gccgo.  Drop it now in preparation for\n    upgrading to the Go 1.5 library.\n    \n    Reviewed-on: https://go-review.googlesource.com/16486\n\nFrom-SVN: r229546", "tree": {"sha": "571dc5d41bd31a1e7befb942446857d17016547b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/571dc5d41bd31a1e7befb942446857d17016547b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f4a513a98e6341b2d4796752644a27c722612847", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4a513a98e6341b2d4796752644a27c722612847", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4a513a98e6341b2d4796752644a27c722612847", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4a513a98e6341b2d4796752644a27c722612847/comments", "author": null, "committer": null, "parents": [{"sha": "bdb60a10ac876bd1d68ab7b0b0ff2acc69e0c214", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdb60a10ac876bd1d68ab7b0b0ff2acc69e0c214", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdb60a10ac876bd1d68ab7b0b0ff2acc69e0c214"}], "stats": {"total": 150, "additions": 7, "deletions": 143}, "files": [{"sha": "987bd684c59f1f6e0b5366734f2298d02b163d7f", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4a513a98e6341b2d4796752644a27c722612847/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4a513a98e6341b2d4796752644a27c722612847/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=f4a513a98e6341b2d4796752644a27c722612847", "patch": "@@ -1,4 +1,4 @@\n-57da43e8159bfe1a31e49683c371cf36e2fb6051\n+85994dd0a88d1b24b2ddfc9c9ab22ee16c9e8b54\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "6708be93cf7295020e0cb38e2fcabee6a30cb510", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 1, "deletions": 87, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4a513a98e6341b2d4796752644a27c722612847/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4a513a98e6341b2d4796752644a27c722612847/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=f4a513a98e6341b2d4796752644a27c722612847", "patch": "@@ -42,9 +42,6 @@ Gogo::Gogo(Backend* backend, Linemap* linemap, int, int pointer_size)\n     pkgpath_(),\n     pkgpath_symbol_(),\n     prefix_(),\n-    zero_value_(NULL),\n-    zero_value_size_(0),\n-    zero_value_align_(0),\n     pkgpath_set_(false),\n     pkgpath_from_option_(false),\n     prefix_from_option_(false),\n@@ -638,87 +635,6 @@ Gogo::current_bindings() const\n     return this->globals_;\n }\n \n-// Return the special variable used as the zero value of types.\n-\n-Named_object*\n-Gogo::zero_value(Type *type)\n-{\n-  if (this->zero_value_ == NULL)\n-    {\n-      Location bloc = Linemap::predeclared_location();\n-\n-      // We will change the type later, when we know the size.\n-      Type* byte_type = this->lookup_global(\"byte\")->type_value();\n-\n-      Expression* zero = Expression::make_integer_ul(0, NULL, bloc);\n-      Type* array_type = Type::make_array_type(byte_type, zero);\n-\n-      Variable* var = new Variable(array_type, NULL, true, false, false, bloc);\n-      this->zero_value_ = Named_object::make_variable(\"go$zerovalue\", NULL,\n-\t\t\t\t\t\t      var);\n-    }\n-\n-  // The zero value will be the maximum required size.\n-  int64_t size;\n-  bool ok = type->backend_type_size(this, &size);\n-  if (!ok) {\n-    go_assert(saw_errors());\n-    size = 4;\n-  }\n-  if (size > this->zero_value_size_)\n-    this->zero_value_size_ = size;\n-\n-  int64_t align;\n-  ok = type->backend_type_align(this, &align);\n-  if (!ok) {\n-    go_assert(saw_errors());\n-    align = 4;\n-  }\n-  if (align > this->zero_value_align_)\n-    this->zero_value_align_ = align;\n-\n-  return this->zero_value_;\n-}\n-\n-// Return whether V is the zero value variable.\n-\n-bool\n-Gogo::is_zero_value(Variable* v) const\n-{\n-  return this->zero_value_ != NULL && this->zero_value_->var_value() == v;\n-}\n-\n-// Return the backend variable for the special zero value, or NULL if\n-// it is not needed.\n-\n-Bvariable*\n-Gogo::backend_zero_value()\n-{\n-  if (this->zero_value_ == NULL)\n-    return NULL;\n-\n-  Type* byte_type = this->lookup_global(\"byte\")->type_value();\n-  Btype* bbtype_type = byte_type->get_backend(this);\n-\n-  Type* int_type = this->lookup_global(\"int\")->type_value();\n-\n-  Expression* e = Expression::make_integer_int64(this->zero_value_size_,\n-\t\t\t\t\t\t int_type,\n-\t\t\t\t\t\t Linemap::unknown_location());\n-  Translate_context context(this, NULL, NULL, NULL);\n-  Bexpression* blength = e->get_backend(&context);\n-\n-  Btype* barray_type = this->backend()->array_type(bbtype_type, blength);\n-\n-  std::string zname = this->zero_value_->name();\n-  Bvariable* zvar =\n-    this->backend()->implicit_variable(zname, barray_type, false,\n-\t\t\t\t       true, true, this->zero_value_align_);\n-  this->backend()->implicit_variable_set_init(zvar, zname, barray_type,\n-\t\t\t\t\t      false, true, true, NULL);\n-  return zvar;\n-}\n-\n // Add statements to INIT_STMTS which run the initialization\n // functions for imported packages.  This is only used for the \"main\"\n // package.\n@@ -6534,9 +6450,7 @@ Variable::get_backend_variable(Gogo* gogo, Named_object* function,\n \t  Btype* btype = type->get_backend(gogo);\n \n \t  Bvariable* bvar;\n-\t  if (gogo->is_zero_value(this))\n-\t    bvar = gogo->backend_zero_value();\n-\t  else if (this->is_global_)\n+\t  if (this->is_global_)\n \t    bvar = backend->global_variable((package == NULL\n \t\t\t\t\t     ? gogo->package_name()\n \t\t\t\t\t     : package->package_name()),"}, {"sha": "0b1f8ef3ca3c2ac982fe3bdd3b53d8093db549e3", "filename": "gcc/go/gofrontend/gogo.h", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4a513a98e6341b2d4796752644a27c722612847/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4a513a98e6341b2d4796752644a27c722612847/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.h?ref=f4a513a98e6341b2d4796752644a27c722612847", "patch": "@@ -653,20 +653,6 @@ class Gogo\n   named_types_are_converted() const\n   { return this->named_types_are_converted_; }\n \n-  // Return the variable to use for the zero value of TYPE.  All types\n-  // shared the same zero value, and we make sure that it is large\n-  // enough.\n-  Named_object*\n-  zero_value(Type *type);\n-\n-  // Return whether a variable is the zero value variable.\n-  bool\n-  is_zero_value(Variable* v) const;\n-\n-  // Create the zero value variable.\n-  Bvariable*\n-  backend_zero_value();\n-\n   // Write out the global values.\n   void\n   write_globals();\n@@ -821,12 +807,6 @@ class Gogo\n   std::string pkgpath_symbol_;\n   // The prefix to use for symbols, from the -fgo-prefix option.\n   std::string prefix_;\n-  // The special zero value variable.\n-  Named_object* zero_value_;\n-  // The size of the zero value variable.\n-  int64_t zero_value_size_;\n-  // The alignment of the zero value variable, in bytes.\n-  int64_t zero_value_align_;\n   // Whether pkgpath_ has been set.\n   bool pkgpath_set_;\n   // Whether an explicit package path was set by -fgo-pkgpath."}, {"sha": "b4620ff0c86af54555da0e29de259ea2376b7424", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4a513a98e6341b2d4796752644a27c722612847/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4a513a98e6341b2d4796752644a27c722612847/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=f4a513a98e6341b2d4796752644a27c722612847", "patch": "@@ -1529,7 +1529,7 @@ Type::make_type_descriptor_type()\n       // The type descriptor type.\n \n       Struct_type* type_descriptor_type =\n-\tType::make_builtin_struct_type(12,\n+\tType::make_builtin_struct_type(11,\n \t\t\t\t       \"kind\", uint8_type,\n \t\t\t\t       \"align\", uint8_type,\n \t\t\t\t       \"fieldAlign\", uint8_type,\n@@ -1541,8 +1541,7 @@ Type::make_type_descriptor_type()\n \t\t\t\t       \"string\", pointer_string_type,\n \t\t\t\t       \"\", pointer_uncommon_type,\n \t\t\t\t       \"ptrToThis\",\n-\t\t\t\t       pointer_type_descriptor_type,\n-\t\t\t\t       \"zero\", unsafe_pointer_type);\n+\t\t\t\t       pointer_type_descriptor_type);\n \n       Named_type* named = Type::make_builtin_named_type(\"commonType\",\n \t\t\t\t\t\t\ttype_descriptor_type);\n@@ -2073,15 +2072,6 @@ Type::type_descriptor_constructor(Gogo* gogo, int runtime_type_kind,\n       vals->push_back(Expression::make_type_descriptor(pt, bloc));\n     }\n \n-  ++p;\n-  go_assert(p->is_field_name(\"zero\"));\n-  Expression* z = Expression::make_var_reference(gogo->zero_value(this), bloc);\n-  z = Expression::make_unary(OPERATOR_AND, z, bloc);\n-  Type* void_type = Type::make_void_type();\n-  Type* unsafe_pointer_type = Type::make_pointer_type(void_type);\n-  z = Expression::make_cast(unsafe_pointer_type, z, bloc);\n-  vals->push_back(z);\n-\n   ++p;\n   go_assert(p == fields->end());\n "}, {"sha": "5cdfba556486feddbda8c5a0365bf3760de095aa", "filename": "libgo/go/reflect/type.go", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4a513a98e6341b2d4796752644a27c722612847/libgo%2Fgo%2Freflect%2Ftype.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4a513a98e6341b2d4796752644a27c722612847/libgo%2Fgo%2Freflect%2Ftype.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Freflect%2Ftype.go?ref=f4a513a98e6341b2d4796752644a27c722612847", "patch": "@@ -262,7 +262,6 @@ type rtype struct {\n \tstring        *string        // string form; unnecessary  but undeniably useful\n \t*uncommonType                // (relatively) uncommon fields\n \tptrToThis     *rtype         // type for pointer to this type, if used in binary or has methods\n-\tzero          unsafe.Pointer // pointer to zero value\n }\n \n // Method on non-interface type\n@@ -1129,7 +1128,6 @@ func (t *rtype) ptrTo() *rtype {\n \n \tp.uncommonType = nil\n \tp.ptrToThis = nil\n-\tp.zero = unsafe.Pointer(&make([]byte, p.size)[0])\n \tp.elem = t\n \n \tif t.kind&kindNoPointers != 0 {\n@@ -1505,7 +1503,6 @@ func ChanOf(dir ChanDir, t Type) Type {\n \tch.elem = typ\n \tch.uncommonType = nil\n \tch.ptrToThis = nil\n-\tch.zero = unsafe.Pointer(&make([]byte, ch.size)[0])\n \n \tch.gc = unsafe.Pointer(&chanGC{\n \t\twidth: ch.size,\n@@ -1561,7 +1558,6 @@ func MapOf(key, elem Type) Type {\n \tmt.elem = etyp\n \tmt.uncommonType = nil\n \tmt.ptrToThis = nil\n-\tmt.zero = unsafe.Pointer(&make([]byte, mt.size)[0])\n \t// mt.gc = unsafe.Pointer(&ptrGC{\n \t// \twidth:  unsafe.Sizeof(uintptr(0)),\n \t// \top:     _GC_PTR,\n@@ -1848,7 +1844,6 @@ func SliceOf(t Type) Type {\n \tslice.elem = typ\n \tslice.uncommonType = nil\n \tslice.ptrToThis = nil\n-\tslice.zero = unsafe.Pointer(&make([]byte, slice.size)[0])\n \n \tif typ.size == 0 {\n \t\tslice.gc = unsafe.Pointer(&sliceEmptyGCProg)\n@@ -1920,7 +1915,6 @@ func arrayOf(count int, elem Type) Type {\n \t// TODO:\n \tarray.uncommonType = nil\n \tarray.ptrToThis = nil\n-\tarray.zero = unsafe.Pointer(&make([]byte, array.size)[0])\n \tarray.len = uintptr(count)\n \tarray.slice = slice.(*rtype)\n "}, {"sha": "eb063ec67894ba100d1a732fc69369678ada2712", "filename": "libgo/runtime/go-type.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4a513a98e6341b2d4796752644a27c722612847/libgo%2Fruntime%2Fgo-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4a513a98e6341b2d4796752644a27c722612847/libgo%2Fruntime%2Fgo-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-type.h?ref=f4a513a98e6341b2d4796752644a27c722612847", "patch": "@@ -108,11 +108,6 @@ struct __go_type_descriptor\n   /* The descriptor for the type which is a pointer to this type.\n      This may be NULL.  */\n   const struct __go_type_descriptor *__pointer_to_this;\n-\n-  /* A pointer to a zero value for this type.  All types will point to\n-     the same zero value, go$zerovalue, which is a common variable so\n-     that it will be large enough.  */\n-  void *__zero;\n };\n \n /* The information we store for each method of a type.  */"}, {"sha": "ce82fcd4070638b1a1b0018a25357bd0b8fd791b", "filename": "libgo/runtime/go-unsafe-pointer.c", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4a513a98e6341b2d4796752644a27c722612847/libgo%2Fruntime%2Fgo-unsafe-pointer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4a513a98e6341b2d4796752644a27c722612847/libgo%2Fruntime%2Fgo-unsafe-pointer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-unsafe-pointer.c?ref=f4a513a98e6341b2d4796752644a27c722612847", "patch": "@@ -10,9 +10,6 @@\n #include \"go-type.h\"\n #include \"mgc0.h\"\n \n-/* A pointer with a zero value.  */\n-static void *zero_pointer;\n-\n /* This file provides the type descriptor for the unsafe.Pointer type.\n    The unsafe package is defined by the compiler itself, which means\n    that there is no package to compile to define the type\n@@ -64,9 +61,7 @@ const struct __go_type_descriptor unsafe_Pointer =\n   /* __uncommon */\n   NULL,\n   /* __pointer_to_this */\n-  NULL,\n-  /* __zero */\n-  &zero_pointer\n+  NULL\n };\n \n /* We also need the type descriptor for the pointer to unsafe.Pointer,\n@@ -109,9 +104,7 @@ const struct __go_ptr_type pointer_unsafe_Pointer =\n     /* __uncommon */\n     NULL,\n     /* __pointer_to_this */\n-    NULL,\n-    /* __zero */\n-    &zero_pointer\n+    NULL\n   },\n   /* __element_type */\n   &unsafe_Pointer"}, {"sha": "8f82f5b9cc452318a47c87a8575ea51854e5cd74", "filename": "libgo/runtime/proc.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4a513a98e6341b2d4796752644a27c722612847/libgo%2Fruntime%2Fproc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4a513a98e6341b2d4796752644a27c722612847/libgo%2Fruntime%2Fproc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fproc.c?ref=f4a513a98e6341b2d4796752644a27c722612847", "patch": "@@ -538,9 +538,7 @@ static struct __go_channel_type chan_bool_type_descriptor =\n       /* __uncommon */\n       NULL,\n       /* __pointer_to_this */\n-      NULL,\n-      /* __zero */\n-      NULL /* This value doesn't matter */\n+      NULL\n     },\n     /* __element_type */\n     &bool_type_descriptor,"}]}