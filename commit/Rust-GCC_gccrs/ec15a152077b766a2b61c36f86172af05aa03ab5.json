{"sha": "ec15a152077b766a2b61c36f86172af05aa03ab5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWMxNWExNTIwNzdiNzY2YTJiNjFjMzZmODYxNzJhZjA1YWEwM2FiNQ==", "commit": {"author": {"name": "Robin Dapp", "email": "rdapp@linux.vnet.ibm.com", "date": "2017-07-18T09:23:35Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2017-07-18T09:23:35Z"}, "message": "Fix PR81362: Vector peeling\n\nnpeel was erroneously overwritten by vect_peeling_hash_get_lowest_cost\nalthough the corresponding dataref is not used afterwards.  It should\nbe safe to get rid of the npeel parameter since we use the returned\npeeling_info's npeel anyway.  Also removed the body_cost_vec parameter\nwhich is not used elsewhere.\n\ngcc/ChangeLog:\n\n2017-07-18  Robin Dapp  <rdapp@linux.vnet.ibm.com>\n\n\t* tree-vect-data-refs.c (vect_enhance_data_refs_alignment): Remove\n\tbody_cost_vec from _vect_peel_extended_info.\n\t(vect_peeling_hash_get_lowest_cost): Do not set body_cost_vec.\n\t(vect_peeling_hash_choose_best_peeling): Remove body_cost_vec and\n\tnpeel.\n\nFrom-SVN: r250300", "tree": {"sha": "be1907a923b236fb3c50be7ec8a8f85597b8f098", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be1907a923b236fb3c50be7ec8a8f85597b8f098"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec15a152077b766a2b61c36f86172af05aa03ab5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec15a152077b766a2b61c36f86172af05aa03ab5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec15a152077b766a2b61c36f86172af05aa03ab5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec15a152077b766a2b61c36f86172af05aa03ab5/comments", "author": {"login": "rdapp1", "id": 22046046, "node_id": "MDQ6VXNlcjIyMDQ2MDQ2", "avatar_url": "https://avatars.githubusercontent.com/u/22046046?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rdapp1", "html_url": "https://github.com/rdapp1", "followers_url": "https://api.github.com/users/rdapp1/followers", "following_url": "https://api.github.com/users/rdapp1/following{/other_user}", "gists_url": "https://api.github.com/users/rdapp1/gists{/gist_id}", "starred_url": "https://api.github.com/users/rdapp1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rdapp1/subscriptions", "organizations_url": "https://api.github.com/users/rdapp1/orgs", "repos_url": "https://api.github.com/users/rdapp1/repos", "events_url": "https://api.github.com/users/rdapp1/events{/privacy}", "received_events_url": "https://api.github.com/users/rdapp1/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4169392a241995c854e72ab9ed74581bfe8c067a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4169392a241995c854e72ab9ed74581bfe8c067a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4169392a241995c854e72ab9ed74581bfe8c067a"}], "stats": {"total": 38, "additions": 16, "deletions": 22}, "files": [{"sha": "5c2156f6a20b8767771d10481c87dd88b9336920", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec15a152077b766a2b61c36f86172af05aa03ab5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec15a152077b766a2b61c36f86172af05aa03ab5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ec15a152077b766a2b61c36f86172af05aa03ab5", "patch": "@@ -1,3 +1,11 @@\n+2017-07-18  Robin Dapp  <rdapp@linux.vnet.ibm.com>\n+\n+        * tree-vect-data-refs.c (vect_enhance_data_refs_alignment): Remove\n+\tbody_cost_vec from _vect_peel_extended_info.\n+\t(vect_peeling_hash_get_lowest_cost): Do not set body_cost_vec.\n+        (vect_peeling_hash_choose_best_peeling): Remove body_cost_vec and\n+\tnpeel.\n+\n 2017-07-18  Bin Cheng  <bin.cheng@arm.com>\n \n \t* config/arm/arm.c (emit_unlikely_jump): Remove unused var."}, {"sha": "8b55d5948eaf7c866b1578b4e7ff7242cb8d720a", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 8, "deletions": 22, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec15a152077b766a2b61c36f86172af05aa03ab5/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec15a152077b766a2b61c36f86172af05aa03ab5/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=ec15a152077b766a2b61c36f86172af05aa03ab5", "patch": "@@ -1078,7 +1078,6 @@ typedef struct _vect_peel_extended_info\n   struct _vect_peel_info peel_info;\n   unsigned int inside_cost;\n   unsigned int outside_cost;\n-  stmt_vector_for_cost body_cost_vec;\n } *vect_peel_extended_info;\n \n \n@@ -1226,6 +1225,8 @@ vect_peeling_hash_get_lowest_cost (_vect_peel_info **slot,\n   vect_get_peeling_costs_all_drs (elem->dr, &inside_cost, &outside_cost,\n \t\t\t\t  &body_cost_vec, elem->npeel, false);\n \n+  body_cost_vec.release ();\n+\n   outside_cost += vect_get_known_peeling_cost\n     (loop_vinfo, elem->npeel, &dummy,\n      &LOOP_VINFO_SCALAR_ITERATION_COST (loop_vinfo),\n@@ -1244,14 +1245,10 @@ vect_peeling_hash_get_lowest_cost (_vect_peel_info **slot,\n     {\n       min->inside_cost = inside_cost;\n       min->outside_cost = outside_cost;\n-      min->body_cost_vec.release ();\n-      min->body_cost_vec = body_cost_vec;\n       min->peel_info.dr = elem->dr;\n       min->peel_info.npeel = elem->npeel;\n       min->peel_info.count = elem->count;\n     }\n-  else\n-    body_cost_vec.release ();\n \n   return 1;\n }\n@@ -1263,14 +1260,11 @@ vect_peeling_hash_get_lowest_cost (_vect_peel_info **slot,\n \n static struct _vect_peel_extended_info\n vect_peeling_hash_choose_best_peeling (hash_table<peel_info_hasher> *peeling_htab,\n-\t\t\t\t       loop_vec_info loop_vinfo,\n-                                       unsigned int *npeel,\n-\t\t\t\t       stmt_vector_for_cost *body_cost_vec)\n+\t\t\t\t       loop_vec_info loop_vinfo)\n {\n    struct _vect_peel_extended_info res;\n \n    res.peel_info.dr = NULL;\n-   res.body_cost_vec = stmt_vector_for_cost ();\n \n    if (!unlimited_cost_model (LOOP_VINFO_LOOP (loop_vinfo)))\n      {\n@@ -1288,8 +1282,6 @@ vect_peeling_hash_choose_best_peeling (hash_table<peel_info_hasher> *peeling_hta\n        res.outside_cost = 0;\n      }\n \n-   *npeel = res.peel_info.npeel;\n-   *body_cost_vec = res.body_cost_vec;\n    return res;\n }\n \n@@ -1454,7 +1446,6 @@ vect_enhance_data_refs_alignment (loop_vec_info loop_vinfo)\n   unsigned possible_npeel_number = 1;\n   tree vectype;\n   unsigned int nelements, mis, same_align_drs_max = 0;\n-  stmt_vector_for_cost body_cost_vec = stmt_vector_for_cost ();\n   hash_table<peel_info_hasher> peeling_htab (1);\n \n   if (dump_enabled_p ())\n@@ -1729,7 +1720,7 @@ vect_enhance_data_refs_alignment (loop_vec_info loop_vinfo)\n          unless aligned.  So we try to choose the best possible peeling from\n \t the hash table.  */\n       peel_for_known_alignment = vect_peeling_hash_choose_best_peeling\n-\t(&peeling_htab, loop_vinfo, &npeel, &body_cost_vec);\n+\t(&peeling_htab, loop_vinfo);\n     }\n \n   /* Compare costs of peeling for known and unknown alignment. */\n@@ -1755,7 +1746,8 @@ vect_enhance_data_refs_alignment (loop_vec_info loop_vinfo)\n     {\n       /* Calculate the penalty for no peeling, i.e. leaving everything\n \t unaligned.\n-\t TODO: Adapt vect_get_peeling_costs_all_drs and use here.  */\n+\t TODO: Adapt vect_get_peeling_costs_all_drs and use here.\n+\t TODO: Use nopeel_outside_cost or get rid of it?  */\n       unsigned nopeel_inside_cost = 0;\n       unsigned nopeel_outside_cost = 0;\n \n@@ -1837,10 +1829,7 @@ vect_enhance_data_refs_alignment (loop_vec_info loop_vinfo)\n           if (!stat)\n             do_peeling = false;\n           else\n-\t    {\n-\t      body_cost_vec.release ();\n-\t      return stat;\n-\t    }\n+\t    return stat;\n         }\n \n       /* Cost model #1 - honor --param vect-max-peeling-for-alignment.  */\n@@ -1916,19 +1905,16 @@ vect_enhance_data_refs_alignment (loop_vec_info loop_vinfo)\n               dump_printf_loc (MSG_NOTE, vect_location,\n                                \"Peeling for alignment will be applied.\\n\");\n             }\n+\n \t  /* The inside-loop cost will be accounted for in vectorizable_load\n \t     and vectorizable_store correctly with adjusted alignments.\n \t     Drop the body_cst_vec on the floor here.  */\n-\t  body_cost_vec.release ();\n-\n \t  stat = vect_verify_datarefs_alignment (loop_vinfo);\n \t  gcc_assert (stat);\n           return stat;\n         }\n     }\n \n-  body_cost_vec.release ();\n-\n   /* (2) Versioning to force alignment.  */\n \n   /* Try versioning if:"}]}