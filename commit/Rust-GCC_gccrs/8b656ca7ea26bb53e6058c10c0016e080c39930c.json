{"sha": "8b656ca7ea26bb53e6058c10c0016e080c39930c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGI2NTZjYTdlYTI2YmI1M2U2MDU4YzEwYzAwMTZlMDgwYzM5OTMwYw==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2017-05-18T11:05:55Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2017-05-18T11:05:55Z"}, "message": "Move X==15-X to match.pd\n\n2017-05-18  Marc Glisse  <marc.glisse@inria.fr>\n\n\t* fold-const.c (fold_binary_loc): Move transformation...\n\t* match.pd (C - X CMP X): ... here.\n\nFrom-SVN: r248193", "tree": {"sha": "bad2b7bb3b9a02a1e6c6b9b76e1d5f4956ef07ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bad2b7bb3b9a02a1e6c6b9b76e1d5f4956ef07ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b656ca7ea26bb53e6058c10c0016e080c39930c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b656ca7ea26bb53e6058c10c0016e080c39930c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b656ca7ea26bb53e6058c10c0016e080c39930c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b656ca7ea26bb53e6058c10c0016e080c39930c/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e3455240edf5c8fa4ee4ee73219b35ce1265b076", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3455240edf5c8fa4ee4ee73219b35ce1265b076", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3455240edf5c8fa4ee4ee73219b35ce1265b076"}], "stats": {"total": 36, "additions": 12, "deletions": 24}, "files": [{"sha": "ee04a8606804356d4f80413fb1b051d5c454d23f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b656ca7ea26bb53e6058c10c0016e080c39930c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b656ca7ea26bb53e6058c10c0016e080c39930c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8b656ca7ea26bb53e6058c10c0016e080c39930c", "patch": "@@ -1,3 +1,8 @@\n+2017-05-18  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* fold-const.c (fold_binary_loc): Move transformation...\n+\t* match.pd (C - X CMP X): ... here.\n+\n 2017-05-18  Sheldon Lobo  <sheldon.lobo@oracle.com>\n \n \t* config/sparc/sparc.c (sparc_option_override): Set function"}, {"sha": "19aa72258497b710385ce9c456614e97b4a481a8", "filename": "gcc/fold-const.c", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b656ca7ea26bb53e6058c10c0016e080c39930c/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b656ca7ea26bb53e6058c10c0016e080c39930c/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=8b656ca7ea26bb53e6058c10c0016e080c39930c", "patch": "@@ -10532,30 +10532,6 @@ fold_binary_loc (location_t loc,\n \t\t\t\t\tTREE_OPERAND (arg1, 0), arg0);\n \t}\n \n-      /* Transform comparisons of the form C - X CMP X if C % 2 == 1.  */\n-      if (TREE_CODE (arg0) == MINUS_EXPR\n-\t  && TREE_CODE (TREE_OPERAND (arg0, 0)) == INTEGER_CST\n-\t  && operand_equal_p (tree_strip_nop_conversions (TREE_OPERAND (arg0,\n-\t\t\t\t\t\t\t\t\t1)),\n-\t\t\t      arg1, 0)\n-\t  && wi::extract_uhwi (TREE_OPERAND (arg0, 0), 0, 1) == 1)\n-\treturn omit_two_operands_loc (loc, type,\n-\t\t\t\t      code == NE_EXPR\n-\t\t\t\t      ? boolean_true_node : boolean_false_node,\n-\t\t\t\t      TREE_OPERAND (arg0, 1), arg1);\n-\n-      /* Transform comparisons of the form X CMP C - X if C % 2 == 1.  */\n-      if (TREE_CODE (arg1) == MINUS_EXPR\n-\t  && TREE_CODE (TREE_OPERAND (arg1, 0)) == INTEGER_CST\n-\t  && operand_equal_p (tree_strip_nop_conversions (TREE_OPERAND (arg1,\n-\t\t\t\t\t\t\t\t\t1)),\n-\t\t\t      arg0, 0)\n-\t  && wi::extract_uhwi (TREE_OPERAND (arg1, 0), 0, 1) == 1)\n-\treturn omit_two_operands_loc (loc, type,\n-\t\t\t\t      code == NE_EXPR\n-\t\t\t\t      ? boolean_true_node : boolean_false_node,\n-\t\t\t\t      TREE_OPERAND (arg1, 1), arg0);\n-\n       /* If this is an EQ or NE comparison with zero and ARG0 is\n \t (1 << foo) & bar, convert it to (bar >> foo) & 1.  Both require\n \t two operations, but the latter can be done in one less insn"}, {"sha": "ba501498cdd7724621455b7cb4f1d4996020e2ae", "filename": "gcc/match.pd", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b656ca7ea26bb53e6058c10c0016e080c39930c/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b656ca7ea26bb53e6058c10c0016e080c39930c/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=8b656ca7ea26bb53e6058c10c0016e080c39930c", "patch": "@@ -1090,6 +1090,13 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n \t   || TYPE_OVERFLOW_WRAPS (TREE_TYPE (@0))))\n    (op @1 @0))))\n \n+/* X == C - X can never be true if C is odd.  */\n+(for cmp (eq ne)\n+ (simplify\n+  (cmp:c (convert? @0) (convert1? (minus INTEGER_CST@1 (convert2? @0))))\n+  (if (TREE_INT_CST_LOW (@1) & 1)\n+   { constant_boolean_node (cmp == NE_EXPR, type); })))\n+\n /* ((X inner_op C0) outer_op C1)\n    With X being a tree where value_range has reasoned certain bits to always be\n    zero throughout its computed value range,"}]}