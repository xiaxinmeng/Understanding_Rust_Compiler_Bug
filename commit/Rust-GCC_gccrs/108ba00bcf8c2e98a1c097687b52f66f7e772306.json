{"sha": "108ba00bcf8c2e98a1c097687b52f66f7e772306", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTA4YmEwMGJjZjhjMmU5OGExYzA5NzY4N2I1MmY2NmY3ZTc3MjMwNg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-03-11T13:13:53Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-03-11T13:13:53Z"}, "message": "re PR lto/43200 ([LTO] tree check: expected array_type, have pointer_type in array_ref_low_bound)\n\n2010-03-11  Richard Guenther  <rguenther@suse.de>\n\n\tPR lto/43200\n\t* lto-streamer-in.c (maybe_fixup_decls): Simplify.\n\t(input_gimple_stmt): Fixup handled component types during\n\toperand read.  Also fix up decls in ADDR_EXPRs.\n\n\t* gcc.dg/lto/20100227-1_0.c: New testcase.\n\t* gcc.dg/lto/20100227-1_1.c: Likewise.\n\nFrom-SVN: r157385", "tree": {"sha": "c5ead7d502e43b0e780c079d238f6ac58b1a9889", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5ead7d502e43b0e780c079d238f6ac58b1a9889"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/108ba00bcf8c2e98a1c097687b52f66f7e772306", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/108ba00bcf8c2e98a1c097687b52f66f7e772306", "html_url": "https://github.com/Rust-GCC/gccrs/commit/108ba00bcf8c2e98a1c097687b52f66f7e772306", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/108ba00bcf8c2e98a1c097687b52f66f7e772306/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1aeffaf59881e8a4a08838607b28a0edcd76c1c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1aeffaf59881e8a4a08838607b28a0edcd76c1c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1aeffaf59881e8a4a08838607b28a0edcd76c1c4"}], "stats": {"total": 77, "additions": 68, "deletions": 9}, "files": [{"sha": "f10f8088b119efee01ec4f815d941944dc2a7f9a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/108ba00bcf8c2e98a1c097687b52f66f7e772306/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/108ba00bcf8c2e98a1c097687b52f66f7e772306/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=108ba00bcf8c2e98a1c097687b52f66f7e772306", "patch": "@@ -1,3 +1,10 @@\n+2010-03-11  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR lto/43200\n+\t* lto-streamer-in.c (maybe_fixup_decls): Simplify.\n+\t(input_gimple_stmt): Fixup handled component types during\n+\toperand read.  Also fix up decls in ADDR_EXPRs.\n+\n 2010-03-10  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* config/sparc/sol2-bi.h (CC1_SPEC): Default to -mcpu=v9 for -m32."}, {"sha": "6c50019527465c245b5b89d33941f098ce3ffba6", "filename": "gcc/lto-streamer-in.c", "status": "modified", "additions": 33, "deletions": 9, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/108ba00bcf8c2e98a1c097687b52f66f7e772306/gcc%2Flto-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/108ba00bcf8c2e98a1c097687b52f66f7e772306/gcc%2Flto-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-in.c?ref=108ba00bcf8c2e98a1c097687b52f66f7e772306", "patch": "@@ -946,7 +946,8 @@ maybe_fixup_handled_component (tree op)\n }\n \n /* Fixup reference tree operands for substituted prevailing decls\n-   with mismatched types in STMT.  */\n+   with mismatched types in STMT.  This handles plain DECLs where\n+   we need the stmt for context to lookup the required type.  */\n \n static void\n maybe_fixup_decls (gimple stmt)\n@@ -967,17 +968,13 @@ maybe_fixup_decls (gimple stmt)\n \t    gimple_assign_set_rhs1 (stmt, build1 (VIEW_CONVERT_EXPR,\n \t\t\t\t\t\t  TREE_TYPE (lhs), rhs));\n \t}\n-      else if (handled_component_p (rhs))\n-\tmaybe_fixup_handled_component (rhs);\n       /* Then catch scalar stores.  */\n       else if (TREE_CODE (lhs) == VAR_DECL)\n \t{\n \t  if (!useless_type_conversion_p (TREE_TYPE (lhs), TREE_TYPE (rhs)))\n \t    gimple_assign_set_lhs (stmt, build1 (VIEW_CONVERT_EXPR,\n \t\t\t\t\t\t TREE_TYPE (rhs), lhs));\n \t}\n-      else if (handled_component_p (lhs))\n-\tmaybe_fixup_handled_component (lhs);\n     }\n   else if (is_gimple_call (stmt))\n     {\n@@ -991,8 +988,6 @@ maybe_fixup_decls (gimple stmt)\n \t\t\t\t\t       gimple_call_return_type (stmt),\n \t\t\t\t\t       lhs));\n \t}\n-      else if (lhs && handled_component_p (lhs))\n-\tmaybe_fixup_handled_component (lhs);\n \n       /* Arguments, especially for varargs functions will be funny...  */\n     }\n@@ -1069,9 +1064,29 @@ input_gimple_stmt (struct lto_input_block *ib, struct data_in *data_in,\n \t{\n \t  tree op = lto_input_tree (ib, data_in);\n \t  gimple_set_op (stmt, i, op);\n+\t  if (!op)\n+\t    continue;\n+\n+\t  /* Fixup reference tree operands for substituted prevailing decls\n+\t     with mismatched types.  For plain VAR_DECLs we need to look\n+\t     at context to determine the wanted type - we do that below\n+\t     after the stmt is completed.  */\n+\t  if (TREE_CODE (op) == ADDR_EXPR\n+\t      && TREE_CODE (TREE_OPERAND (op, 0)) == VAR_DECL\n+\t      && !useless_type_conversion_p (TREE_TYPE (TREE_TYPE (op)),\n+\t\t\t\t\t     TREE_TYPE (op)))\n+\t    {\n+\t      TREE_OPERAND (op, 0)\n+\t\t= build1 (VIEW_CONVERT_EXPR, TREE_TYPE (TREE_TYPE (op)),\n+\t\t\t  TREE_OPERAND (op, 0));\n+\t      continue;\n+\t    }\n \n-\t  /* Fixup FIELD_DECLs.  */\n-\t  while (op && handled_component_p (op))\n+\t  /* Fixup FIELD_DECLs in COMPONENT_REFs, they are not handled\n+\t     by decl merging.  */\n+\t  if (TREE_CODE (op) == ADDR_EXPR)\n+\t    op = TREE_OPERAND (op, 0);\n+\t  while (handled_component_p (op))\n \t    {\n \t      if (TREE_CODE (op) == COMPONENT_REF)\n \t\t{\n@@ -1096,8 +1111,17 @@ input_gimple_stmt (struct lto_input_block *ib, struct data_in *data_in,\n \t\t    TREE_OPERAND (op, 1) = tem;\n \t\t}\n \n+\t      /* Preserve the last handled component for the fixup of\n+\t         its operand below.  */\n+\t      if (!handled_component_p (TREE_OPERAND (op, 0)))\n+\t\tbreak;\n \t      op = TREE_OPERAND (op, 0);\n \t    }\n+\n+\t  /* Fixup reference tree operands for substituted prevailing decls\n+\t     with mismatched types.  */\n+\t  if (handled_component_p (op))\n+\t    maybe_fixup_handled_component (op);\n \t}\n       break;\n "}, {"sha": "bf7d44bea93d9287a9229ec54bd0732a0d986626", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/108ba00bcf8c2e98a1c097687b52f66f7e772306/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/108ba00bcf8c2e98a1c097687b52f66f7e772306/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=108ba00bcf8c2e98a1c097687b52f66f7e772306", "patch": "@@ -1,3 +1,9 @@\n+2010-03-11  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR lto/43200\n+\t* gcc.dg/lto/20100227-1_0.c: New testcase.\n+\t* gcc.dg/lto/20100227-1_1.c: Likewise.\n+\n 2010-03-10  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libfortran/43320"}, {"sha": "4145c7001ef6ff98160fd222c45cef72ced484f6", "filename": "gcc/testsuite/gcc.dg/lto/20100227-1_0.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/108ba00bcf8c2e98a1c097687b52f66f7e772306/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2F20100227-1_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/108ba00bcf8c2e98a1c097687b52f66f7e772306/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2F20100227-1_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2F20100227-1_0.c?ref=108ba00bcf8c2e98a1c097687b52f66f7e772306", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-lto-do link } */\n+/* { dg-extra-ld-options \"-w\" } */\n+\n+/* Make sure we do not ICE on the invalid re-declaration of s.  */\n+\n+extern void f(void);\n+const char *s = \"Hello, world!\";\n+\n+int main(void)\n+{\n+  f();\n+  return 0;\n+}\n+"}, {"sha": "a10ba0259c98b56350b47216373d37ffe0247eb9", "filename": "gcc/testsuite/gcc.dg/lto/20100227-1_1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/108ba00bcf8c2e98a1c097687b52f66f7e772306/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2F20100227-1_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/108ba00bcf8c2e98a1c097687b52f66f7e772306/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2F20100227-1_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2F20100227-1_1.c?ref=108ba00bcf8c2e98a1c097687b52f66f7e772306", "patch": "@@ -0,0 +1,8 @@\n+extern int puts(const char *);\n+extern const char s[];\n+\n+void f(void)\n+{\n+  puts(s);\n+}\n+"}]}