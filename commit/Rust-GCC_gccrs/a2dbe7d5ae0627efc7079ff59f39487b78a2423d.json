{"sha": "a2dbe7d5ae0627efc7079ff59f39487b78a2423d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTJkYmU3ZDVhZTA2MjdlZmM3MDc5ZmY1OWYzOTQ4N2I3OGEyNDIzZA==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2018-01-11T08:56:12Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-01-11T08:56:12Z"}, "message": "[Ada] Crash on build-in-place call with address specification for target\n\nThe presence of an address clause complicates the build-in-place expansion\nbecause the indicated address must be processed before the indirect call is\ngenerated, including the definition of a local pointer to the object.\n\nThe address clause may come from an aspect specification or from an explicit\nattribute specification appearing after the object declaration. These two\ncases require different processing.\n\n2018-01-11  Ed Schonberg  <schonberg@adacore.com>\n\ngcc/ada/\n\n\t* exp_ch6.adb (Make_Build_In_Place_Call_In_Object_Declaration): Handle\n\tproperly object declarations with initializations that are\n\tbuild-in-place function calls, when there is an address specification,\n\teither as an aspect specification or an explicit attribute\n\tspecification clause, for the initialized object.\n\t* freeze.adb (Check_Address_Clause): Do not remove side-effects from\n\tinitial expressions in the case of a build-in-place call.\n\ngcc/testsuite/\n\n\t* gnat.dg/bip_overlay.adb, gnat.dg/bip_overlay.ads: New testcase.\n\nFrom-SVN: r256523", "tree": {"sha": "96944ace87d69544773593487f19776928d46ea9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/96944ace87d69544773593487f19776928d46ea9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a2dbe7d5ae0627efc7079ff59f39487b78a2423d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2dbe7d5ae0627efc7079ff59f39487b78a2423d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2dbe7d5ae0627efc7079ff59f39487b78a2423d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2dbe7d5ae0627efc7079ff59f39487b78a2423d/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "791f2d03b4c611040b0d20b61441b438eecef8b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/791f2d03b4c611040b0d20b61441b438eecef8b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/791f2d03b4c611040b0d20b61441b438eecef8b8"}], "stats": {"total": 134, "additions": 129, "deletions": 5}, "files": [{"sha": "63c2a9500a5ae4de481f23fa1cb76b1d331c286e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2dbe7d5ae0627efc7079ff59f39487b78a2423d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2dbe7d5ae0627efc7079ff59f39487b78a2423d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a2dbe7d5ae0627efc7079ff59f39487b78a2423d", "patch": "@@ -1,3 +1,13 @@\n+2018-01-11  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch6.adb (Make_Build_In_Place_Call_In_Object_Declaration): Handle\n+\tproperly object declarations with initializations that are\n+\tbuild-in-place function calls, when there is an address specification,\n+\teither as an aspect specification or an explicit attribute\n+\tspecification clause, for the initialized object.\n+\t* freeze.adb (Check_Address_Clause): Do not remove side-effects from\n+\tinitial expressions in the case of a build-in-place call.\n+\n 2018-01-11  Piotr Trojanek  <trojanek@adacore.com>\n \n \t* sem_eval.adb (Is_Null_Range): Retrieve the full view when called on a"}, {"sha": "c9d40433efd0a1040b60b83c154c12d56dda9366", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 61, "deletions": 1, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2dbe7d5ae0627efc7079ff59f39487b78a2423d/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2dbe7d5ae0627efc7079ff59f39487b78a2423d/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=a2dbe7d5ae0627efc7079ff59f39487b78a2423d", "patch": "@@ -24,6 +24,7 @@\n ------------------------------------------------------------------------------\n \n with Atree;     use Atree;\n+with Aspects;   use Aspects;\n with Checks;    use Checks;\n with Contracts; use Contracts;\n with Debug;     use Debug;\n@@ -8418,7 +8419,66 @@ package body Exp_Ch6 is\n       --  freezing.\n \n       if Definite and then not Is_Return_Object (Obj_Def_Id) then\n-         Insert_After_And_Analyze (Obj_Decl, Ptr_Typ_Decl);\n+\n+         --  The presence of an address clause complicates the build-in-place\n+         --  expansion because the indicated address must be processed before\n+         --  the indirect call is generated (including the definition of a\n+         --  local pointer to the object).  The address clause may come from\n+         --  an aspect specification or from an explicit attribute\n+         --  specification appearing after the object declaration. These two\n+         --  cases require different processing.\n+\n+         if Has_Aspect (Obj_Def_Id, Aspect_Address) then\n+\n+            --  Skip non-delayed pragmas that correspond to other aspects, if\n+            --  any, to find proper insertion point for freeze node of object.\n+\n+            declare\n+               D : Node_Id := Obj_Decl;\n+               N : Node_Id := Next (D);\n+\n+            begin\n+               while Present (N)\n+                 and then Nkind_In (N, N_Pragma, N_Attribute_Reference)\n+               loop\n+                  Analyze (N);\n+                  D := N;\n+                  Next (N);\n+               end loop;\n+\n+               Insert_After (D, Ptr_Typ_Decl);\n+\n+               --  Freeze object before pointer declaration, to ensure that\n+               --  generated attribute for address is inserted at the proper\n+               --  place.\n+\n+               Freeze_Before (Ptr_Typ_Decl, Obj_Def_Id);\n+            end;\n+\n+            Analyze (Ptr_Typ_Decl);\n+\n+         elsif Present (Following_Address_Clause (Obj_Decl)) then\n+\n+            --  Locate explicit address clause, which may also follow pragmas\n+            --  generated by other aspect specifications.\n+\n+            declare\n+               Addr : constant Node_Id := Following_Address_Clause (Obj_Decl);\n+               D    : Node_Id := Next (Obj_Decl);\n+\n+            begin\n+               while Present (D) loop\n+                  Analyze (D);\n+                  exit when D = Addr;\n+                  Next (D);\n+               end loop;\n+\n+               Insert_After_And_Analyze (Addr, Ptr_Typ_Decl);\n+            end;\n+\n+         else\n+            Insert_After_And_Analyze (Obj_Decl, Ptr_Typ_Decl);\n+         end if;\n       else\n          Insert_Action (Obj_Decl, Ptr_Typ_Decl);\n       end if;"}, {"sha": "08163ef90623251f1a427dfab72d8c23b6b13750", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2dbe7d5ae0627efc7079ff59f39487b78a2423d/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2dbe7d5ae0627efc7079ff59f39487b78a2423d/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=a2dbe7d5ae0627efc7079ff59f39487b78a2423d", "patch": "@@ -711,11 +711,16 @@ package body Freeze is\n             end;\n          end if;\n \n-         if Present (Init) then\n+         --  Remove side effects from initial expression, except in the case\n+         --  of a build-in-place call, which has its own later expansion.\n \n-            --  Capture initialization value at point of declaration,\n-            --  and make explicit assignment legal, because object may\n-            --  be a constant.\n+         if Present (Init)\n+           and then (Nkind (Init) /= N_Function_Call\n+             or else not Is_Expanded_Build_In_Place_Call (Init))\n+         then\n+\n+            --  Capture initialization value at point of declaration, and make\n+            --  explicit assignment legal, because object may be a constant.\n \n             Remove_Side_Effects (Init);\n             Lhs := New_Occurrence_Of (E, Sloc (Decl));"}, {"sha": "e6d2045674a84d8bf7fb022eec99bf0952b65ed7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2dbe7d5ae0627efc7079ff59f39487b78a2423d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2dbe7d5ae0627efc7079ff59f39487b78a2423d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a2dbe7d5ae0627efc7079ff59f39487b78a2423d", "patch": "@@ -1,3 +1,7 @@\n+2018-01-11  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* gnat.dg/bip_overlay.adb, gnat.dg/bip_overlay.ads: New testcase.\n+\n 2018-01-11  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* gnat.dg/protected_func.adb, gnat.dg/protected_func.ads: New testcase."}, {"sha": "c4a38499bc2a9fea996260671b18c50cc161eeca", "filename": "gcc/testsuite/gnat.dg/bip_overlay.adb", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2dbe7d5ae0627efc7079ff59f39487b78a2423d/gcc%2Ftestsuite%2Fgnat.dg%2Fbip_overlay.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2dbe7d5ae0627efc7079ff59f39487b78a2423d/gcc%2Ftestsuite%2Fgnat.dg%2Fbip_overlay.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fbip_overlay.adb?ref=a2dbe7d5ae0627efc7079ff59f39487b78a2423d", "patch": "@@ -0,0 +1,23 @@\n+--  { dg-do compile }\n+\n+with System;\n+\n+package body BIP_Overlay\n+with\n+   SPARK_Mode\n+is\n+   function Init return X\n+   is\n+   begin\n+      return Result : X do\n+         Result.E := 0;\n+      end return;\n+   end Init;\n+\n+   I : X := Init\n+   with\n+      Volatile,\n+      Async_Readers,\n+      Address => System'To_Address (16#1234_5678#);\n+\n+end BIP_Overlay;"}, {"sha": "9a564ff08656cac00f91c795f84fe7a14d99f84b", "filename": "gcc/testsuite/gnat.dg/bip_overlay.ads", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2dbe7d5ae0627efc7079ff59f39487b78a2423d/gcc%2Ftestsuite%2Fgnat.dg%2Fbip_overlay.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2dbe7d5ae0627efc7079ff59f39487b78a2423d/gcc%2Ftestsuite%2Fgnat.dg%2Fbip_overlay.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fbip_overlay.ads?ref=a2dbe7d5ae0627efc7079ff59f39487b78a2423d", "patch": "@@ -0,0 +1,22 @@\n+package BIP_Overlay\n+ with SPARK_Mode\n+is\n+   type X (<>) is limited private;\n+\n+   pragma Warnings (gnatprove, Off,\n+     \"volatile function \"\"Init\"\" has no volatile effects\",\n+      reason => \"Init is a pure function but returns a volatile type.\");\n+   function Init return X\n+   with\n+      Volatile_Function;\n+\n+private\n+   type A is limited record\n+      E : Integer;\n+   end record\n+      with\n+      Volatile;\n+      -- and Async_Readers when implemented;\n+\n+   type X is limited new A;\n+end BIP_Overlay;"}]}