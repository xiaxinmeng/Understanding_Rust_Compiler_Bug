{"sha": "d1a74aa7d3e30682a3e667a92671b668115e1426", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDFhNzRhYTdkM2UzMDY4MmEzZTY2N2E5MjY3MWI2NjgxMTVlMTQyNg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2003-03-03T21:28:23Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2003-03-03T21:28:23Z"}, "message": "tree-inline.c (find_builtin_longjmp_call): Save and restore lineno and input_filename.\n\n        * tree-inline.c (find_builtin_longjmp_call): Save and restore\n        lineno and input_filename.\n        (find_alloca_call): Likewise.\n        (inlinable_function_p): Run the langhook earlier.\n\n        * calls.c (compute_argument_addresses): Give the new MEMs a\n        minimum alignment of PARM_BOUNDARY.\ncp/\n        * decl.c (start_function): Clear DECL_NUM_STMTS.\n\n        * class.c (get_vtable_decl): Use vtbl_type_node.\n        (build_primary_vtable): Check for it.\n\nFrom-SVN: r63733", "tree": {"sha": "741f86ca04374ed16b82d6c1d12f545600129dc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/741f86ca04374ed16b82d6c1d12f545600129dc5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d1a74aa7d3e30682a3e667a92671b668115e1426", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1a74aa7d3e30682a3e667a92671b668115e1426", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1a74aa7d3e30682a3e667a92671b668115e1426", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1a74aa7d3e30682a3e667a92671b668115e1426/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d44cc4047b5ec4cb74a77f4bc46e6438d83f1ed5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d44cc4047b5ec4cb74a77f4bc46e6438d83f1ed5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d44cc4047b5ec4cb74a77f4bc46e6438d83f1ed5"}], "stats": {"total": 50, "additions": 41, "deletions": 9}, "files": [{"sha": "058e788068e2cc50b0ad0384183f8adfc5331f4c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1a74aa7d3e30682a3e667a92671b668115e1426/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1a74aa7d3e30682a3e667a92671b668115e1426/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d1a74aa7d3e30682a3e667a92671b668115e1426", "patch": "@@ -1,3 +1,13 @@\n+2003-03-03  Jason Merrill  <jason@redhat.com>\n+\n+\t* tree-inline.c (find_builtin_longjmp_call): Save and restore\n+\tlineno and input_filename.\n+\t(find_alloca_call): Likewise.\n+\t(inlinable_function_p): Run the langhook earlier.\n+\n+\t* calls.c (compute_argument_addresses): Give the new MEMs a\n+\tminimum alignment of PARM_BOUNDARY.\n+\n Mon Mar  3 20:45:25 2003  J\"orn Rennecke <joern.rennecke@superh.com>\n \n \t* config/sh/sh.h (EXTRA_SPECS): Add subtarget_asm_relax_spec and"}, {"sha": "57470b2cebc043f2e010c62f105684bb70b484da", "filename": "gcc/calls.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1a74aa7d3e30682a3e667a92671b668115e1426/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1a74aa7d3e30682a3e667a92671b668115e1426/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=d1a74aa7d3e30682a3e667a92671b668115e1426", "patch": "@@ -1634,6 +1634,7 @@ compute_argument_addresses (args, argblock, num_actuals)\n \n \t  addr = plus_constant (addr, arg_offset);\n \t  args[i].stack = gen_rtx_MEM (args[i].mode, addr);\n+\t  set_mem_align (args[i].stack, PARM_BOUNDARY);\n \t  set_mem_attributes (args[i].stack,\n \t\t\t      TREE_TYPE (args[i].tree_value), 1);\n \n@@ -1644,6 +1645,7 @@ compute_argument_addresses (args, argblock, num_actuals)\n \n \t  addr = plus_constant (addr, arg_offset);\n \t  args[i].stack_slot = gen_rtx_MEM (args[i].mode, addr);\n+\t  set_mem_align (args[i].stack_slot, PARM_BOUNDARY);\n \t  set_mem_attributes (args[i].stack_slot,\n \t\t\t      TREE_TYPE (args[i].tree_value), 1);\n \n@@ -4578,7 +4580,6 @@ store_one_arg (arg, argblock, flags, variable_size, reg_parm_stack_space)\n   return sibcall_failure;\n }\n \n-\n /* Nonzero if we do not know how to pass TYPE solely in registers.\n    We cannot do so in the following cases:\n "}, {"sha": "fd21b5a7f2ecf5e8d730243e69a570fc563b8613", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1a74aa7d3e30682a3e667a92671b668115e1426/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1a74aa7d3e30682a3e667a92671b668115e1426/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d1a74aa7d3e30682a3e667a92671b668115e1426", "patch": "@@ -1,3 +1,10 @@\n+2003-03-03  Jason Merrill  <jason@redhat.com>\n+\n+\t* decl.c (start_function): Clear DECL_NUM_STMTS.\n+\n+\t* class.c (get_vtable_decl): Use vtbl_type_node.\n+\t(build_primary_vtable): Check for it.\n+\n 2003-03-02  Aldy Hernandez  <aldyh@redhat.com>\n \n         * decl.c (check_initializer): Check for vector_opaque_p."}, {"sha": "f5d7ec52d69d58497be32b3669a0df1f8ee5907f", "filename": "gcc/cp/class.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1a74aa7d3e30682a3e667a92671b668115e1426/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1a74aa7d3e30682a3e667a92671b668115e1426/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=d1a74aa7d3e30682a3e667a92671b668115e1426", "patch": "@@ -533,7 +533,7 @@ get_vtable_decl (tree type, int complete)\n   if (CLASSTYPE_VTABLES (type))\n     return CLASSTYPE_VTABLES (type);\n   \n-  decl = build_vtable (type, get_vtable_name (type), void_type_node);\n+  decl = build_vtable (type, get_vtable_name (type), vtbl_type_node);\n   CLASSTYPE_VTABLES (type) = decl;\n \n   /* At one time the vtable info was grabbed 2 words at a time.  This\n@@ -594,8 +594,7 @@ build_primary_vtable (tree binfo, tree type)\n     }\n   else\n     {\n-      my_friendly_assert (TREE_CODE (TREE_TYPE (decl)) == VOID_TYPE,\n-                          20000118);\n+      my_friendly_assert (TREE_TYPE (decl) == vtbl_type_node, 20000118);\n       virtuals = NULL_TREE;\n     }\n "}, {"sha": "832a2d5657ad2380421817fffb2ba6cf0631dc6a", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1a74aa7d3e30682a3e667a92671b668115e1426/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1a74aa7d3e30682a3e667a92671b668115e1426/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=d1a74aa7d3e30682a3e667a92671b668115e1426", "patch": "@@ -13554,6 +13554,9 @@ start_function (tree declspecs, tree declarator, tree attrs, int flags)\n   /* Start the statement-tree, start the tree now.  */\n   begin_stmt_tree (&DECL_SAVED_TREE (decl1));\n \n+  /* Don't double-count statements in templates.  */\n+  DECL_NUM_STMTS (decl1) = 0;\n+\n   /* Let the user know we're compiling this function.  */\n   announce_function (decl1);\n "}, {"sha": "77b7bafff6d23e2c88541a04b462fd3e2c4c4455", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1a74aa7d3e30682a3e667a92671b668115e1426/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1a74aa7d3e30682a3e667a92671b668115e1426/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=d1a74aa7d3e30682a3e667a92671b668115e1426", "patch": "@@ -895,7 +895,12 @@ static tree\n find_alloca_call (exp)\n      tree exp;\n {\n-  return walk_tree (&exp, find_alloca_call_1, NULL, NULL);\n+  int line = lineno;\n+  const char *file = input_filename;\n+  tree ret = walk_tree (&exp, find_alloca_call_1, NULL, NULL);\n+  lineno = line;\n+  input_filename = file;\n+  return ret;\n }\n \n static tree\n@@ -921,7 +926,12 @@ static tree\n find_builtin_longjmp_call (exp)\n      tree exp;\n {\n-  return walk_tree (&exp, find_builtin_longjmp_call_1, NULL, NULL);\n+  int line = lineno;\n+  const char *file = input_filename;\n+  tree ret = walk_tree (&exp, find_builtin_longjmp_call_1, NULL, NULL);\n+  lineno = line;\n+  input_filename = file;\n+  return ret;\n }\n \n /* Returns nonzero if FN is a function that can be inlined into the\n@@ -942,6 +952,11 @@ inlinable_function_p (fn, id)\n   if (DECL_UNINLINABLE (fn))\n     return 0;\n \n+  /* Check this now so that we instantiate C++ templates before reading\n+     DECL_NUM_STMTS.  */\n+  if ((*lang_hooks.tree_inlining.cannot_inline_tree_fn) (&fn))\n+    return 0;\n+\n   /* Assume it is not inlinable.  */\n   inlinable = 0;\n        \n@@ -1022,9 +1037,6 @@ inlinable_function_p (fn, id)\n \t}\n     }\n \n-  if (inlinable && (*lang_hooks.tree_inlining.cannot_inline_tree_fn) (&fn))\n-    inlinable = 0;\n-\n   /* If we don't have the function body available, we can't inline\n      it.  */\n   if (! DECL_SAVED_TREE (fn))"}]}