{"sha": "80dab1828b9bab1a626580487c0c4031dd9750ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODBkYWIxODI4YjliYWIxYTYyNjU4MDQ4N2MwYzQwMzFkZDk3NTBlYw==", "commit": {"author": {"name": "Nathanael Nerode", "email": "neroden@gcc.gnu.org", "date": "2004-04-15T03:38:59Z"}, "committer": {"name": "Nathanael Nerode", "email": "neroden@gcc.gnu.org", "date": "2004-04-15T03:38:59Z"}, "message": "Makefile.in: Call gcc/ada/Makefile directly, not through the intermediary of gcc/Makefile.\n\n\t* Makefile.in: Call gcc/ada/Makefile directly, not through the\n\tintermediary of gcc/Makefile.  Incorporate all necessary parts of\n\trules from gcc/ada/Make-lang.in, including extra gnatlib/gnattools\n\ttargets, rts-zfp, rts-ravenscar.  Get needed bits of GCC\n\tconfiguration from (new) gcc/libada-mk.  Decide what gnatlib variant\n\tto build in configure.ac, not here.\n\t* configure.ac: Provide Makefile.in with the new information it needs,\n\tsuch as GCC's tmake_file and xmake_file.\n\t* configure: Regenerate.\n\nFrom-SVN: r80711", "tree": {"sha": "b99029e32e885c6370af412c5c3219559ee6deea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b99029e32e885c6370af412c5c3219559ee6deea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/80dab1828b9bab1a626580487c0c4031dd9750ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80dab1828b9bab1a626580487c0c4031dd9750ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80dab1828b9bab1a626580487c0c4031dd9750ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80dab1828b9bab1a626580487c0c4031dd9750ec/comments", "author": null, "committer": null, "parents": [{"sha": "69f9a3450a92da4b2e3773d2048444ff3aed48ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69f9a3450a92da4b2e3773d2048444ff3aed48ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69f9a3450a92da4b2e3773d2048444ff3aed48ff"}], "stats": {"total": 561, "additions": 495, "deletions": 66}, "files": [{"sha": "c010887c328d8ff01327b3e46e6960ae36de8699", "filename": "libada/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80dab1828b9bab1a626580487c0c4031dd9750ec/libada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80dab1828b9bab1a626580487c0c4031dd9750ec/libada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libada%2FChangeLog?ref=80dab1828b9bab1a626580487c0c4031dd9750ec", "patch": "@@ -1,3 +1,15 @@\n+2004-04-14  Nathanael Nerode  <neroden@gcc.gnu.org>\n+\n+\t* Makefile.in: Call gcc/ada/Makefile directly, not through the\n+\tintermediary of gcc/Makefile.  Incorporate all necessary parts of\n+\trules from gcc/ada/Make-lang.in, including extra gnatlib/gnattools\n+\ttargets, rts-zfp, rts-ravenscar.  Get needed bits of GCC\n+\tconfiguration from (new) gcc/libada-mk.  Decide what gnatlib variant\n+\tto build in configure.ac, not here.\n+\t* configure.ac: Provide Makefile.in with the new information it needs,\n+\tsuch as GCC's tmake_file and xmake_file.\n+\t* configure: Regenerate.\n+\n 2004-03-10  Kelley Cook  <kcook@gcc.gnu.org>\n \n \t* configure.in: Rename file to ..."}, {"sha": "5af0d5186bc1fa65e2215a3adc2c433daf970d83", "filename": "libada/Makefile.in", "status": "modified", "additions": 210, "deletions": 13, "changes": 223, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80dab1828b9bab1a626580487c0c4031dd9750ec/libada%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80dab1828b9bab1a626580487c0c4031dd9750ec/libada%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libada%2FMakefile.in?ref=80dab1828b9bab1a626580487c0c4031dd9750ec", "patch": "@@ -23,32 +23,229 @@ SHELL = @SHELL@\n srcdir = @srcdir@\n build = @build@\n target = @target@\n-enable_shared = @enable_shared@\n+prefix = @prefix@\n+INSTALL = @INSTALL@\n+INSTALL_DATA = @INSTALL_DATA@\n+INSTALL_PROGRAM = @INSTALL_PROGRAM@\n \n # Nonstandard autoconf-set variables.\n+enable_shared = @enable_shared@\n+LN_S=@LN_S@\n+target_noncanonical=@target_noncanonical@\n+\n+# Variables for the user (or the top level) to override.\n+objext=.o\n+GNATLIBFLAGS= -W -Wall -gnatpg\n+THREAD_KIND=native\n+TRACE=no\n+GNATLIBLDFLAGS=\n+ADA_FOR_BUILD=\n+ADA_FOR_TARGET=\n+LDFLAGS=\n+STAGE_PREFIX=\n+\n+# The tedious process of getting CFLAGS right.\n+CFLAGS=-g\n+LOOSE_WARN = -W -Wall -Wwrite-strings -Wstrict-prototypes -Wmissing-prototypes\n+GCC_WARN_CFLAGS = $(LOOSE_WARN) $(NOCOMMON_FLAG)\n \n-FLAGS_TO_PASS =\n+ADA_CFLAGS=\n+T_ADA_CFLAGS=\n+# HPPA is literally the only target which sets X_ADA_CFLAGS\n+X_ADA_CFLAGS=@x_ada_cflags@\n+ALL_ADA_CFLAGS=$(X_ADA_CFLAGS) $(T_ADA_CFLAGS) $(ADA_CFLAGS)\n \n-GNATLIB = gnatlib\n+# Variables for gnattools.\n+ADAFLAGS= -gnatpg -gnata\n+ADA_INCLUDE_DIR = $(libsubdir)/adainclude\n+ADA_RTL_OBJ_DIR = $(libsubdir)/adalib\n \n-ifeq ($(build),$(target))\n-  GNATTOOLS = gnattools\n+# For finding the GCC build dir, which is used far too much\n+GCC_DIR=../../gcc\n+# Include fragment generated by GCC configure.\n+include $(GCC_DIR)/libada-mk\n+# Variables based on those gleaned from the GCC makefile.  :-P\n+libsubdir=$(libdir)/gcc/$(target_noncanonical)/$(gcc_version)\n \n-  ifeq ($(enable_shared),yes)\n-    GNATLIB = gnatlib-shared\n-  endif\n+TARGET_LIBGCC2_CFLAGS=\n+GNATLIBCFLAGS= -g -O2\n+# Get target-specific overrides for TARGET_LIBGCC2_CFLAGS\n+# and possibly GNATLIBCFLAGS.  Currently this uses files\n+# in gcc/config.  The 'subst' call is used to rerelativize them\n+# from their gcc locations.  This is hackery, but there isn't\n+# yet a better way to do this.\n+tmake_file=$(subst /config,/../gcc/config,$(gcc_tmake_file))\n+ifneq ($(tmake_file),)\n+include $(tmake_file)\n+endif\n \n-else\n-  GNATTOOLS = cross-gnattools ada.all.cross\n+# Get possible host-specific override for libsubdir (ick).\n+xmake_file=$(subst /config,/../gcc/config,$(gcc_xmake_file))\n+ifneq ($(xmake_file),)\n+include $(xmake_file)\n endif\n \n+FLAGS_TO_PASS = \\\n+        \"MAKEOVERRIDES=\" \\\n+        \"LDFLAGS=$(LDFLAGS)\" \\\n+        \"LN_S=$(LN_S)\" \\\n+        \"SHELL=$(SHELL)\" \\\n+        \"exeext=$(exeext)\" \\\n+        \"objext=$(objext)\" \\\n+        \"prefix=$(prefix)\" \\\n+        \"STAGE_PREFIX=$(STAGE_PREFIX)\" \\\n+\t\"CC=$(cc_set_by_configure)\" \\\n+        \"CFLAGS=$(CFLAGS) $(WARN_CFLAGS)\"\n+\n+ADA_FLAGS_TO_PASS = \\\n+        \"ADA_FOR_BUILD=$(ADA_FOR_BUILD)\"        \\\n+        \"ADA_INCLUDE_DIR=$(ADA_INCLUDE_DIR)\"    \\\n+        \"ADA_RTL_OBJ_DIR=$(ADA_RTL_OBJ_DIR)\"    \\\n+        \"ADAFLAGS=$(ADAFLAGS)\"                  \\\n+        \"ADA_FOR_TARGET=$(ADA_FOR_TARGET)\"      \\\n+        \"INSTALL=$(INSTALL)\"                    \\\n+        \"INSTALL_DATA=$(INSTALL_DATA)\"          \\\n+        \"INSTALL_PROGRAM=$(INSTALL_PROGRAM)\"\n+\n+ADA_TOOLS_FLAGS_TO_PASS=\\\n+        \"CC=../../xgcc -B../../\"        \\\n+        \"CFLAGS=$(CFLAGS)\"              \\\n+        \"exeext=$(exeext)\"              \\\n+        \"ADAFLAGS=$(ADAFLAGS)\"          \\\n+        \"ADA_INCLUDES=-I../rts\"         \\\n+        \"GNATMAKE=../../gnatmake\"       \\\n+        \"GNATLINK=../../gnatlink\"       \\\n+        \"GNATBIND=../../gnatbind\"\n+\n+fyi:\n+\techo $(tmake_file)\n+\n # Rules to build gnatlib.\n-gnatlib:\n-\t$(MAKE) -C ../../gcc $(FLAGS_TO_PASS) $(GNATLIB)\n+.PHONY: gnatlib gnatlib-plain gnatlib-sjlj gnatlib-shared\n+gnatlib: @default_gnatlib_target@\n+\n+gnatlib-plain:\n+\t$(MAKE) -C $(GCC_DIR)/ada $(FLAGS_TO_PASS) \\\n+\t  GNATLIBFLAGS=\"$(GNATLIBFLAGS)\" \\\n+\t  GNATLIBCFLAGS=\"$(GNATLIBCFLAGS)\" \\\n+\t  TARGET_LIBGCC2_CFLAGS=\"$(TARGET_LIBGCC2_CFLAGS)\" \\\n+\t  THREAD_KIND=\"$(THREAD_KIND)\" \\\n+\t  TRACE=\"$(TRACE)\" \\\n+\t  gnatlib ; \\\n+\n+gnatlib-sjlj:\n+\t$(MAKE) -C $(GCC_DIR)/ada $(FLAGS_TO_PASS) \\\n+\t  GNATLIBFLAGS=\"$(GNATLIBFLAGS)\" \\\n+\t  GNATLIBCFLAGS=\"$(GNATLIBCFLAGS)\" \\\n+\t  TARGET_LIBGCC2_CFLAGS=\"$(TARGET_LIBGCC2_CFLAGS)\" \\\n+\t  THREAD_KIND=\"$(THREAD_KIND)\" \\\n+\t  TRACE=\"$(TRACE)\" \\\n+\t  gnatlib-sjlj ; \\\n+\n+gnatlib-shared:\n+\t$(MAKE) -C $(GCC_DIR)/ada $(FLAGS_TO_PASS) \\\n+\t  GNATLIBFLAGS=\"$(GNATLIBFLAGS)\" \\\n+\t  GNATLIBCFLAGS=\"$(GNATLIBCFLAGS)\" \\\n+\t  GNATLIBLDFLAGS=\"$(GNATLIBLDFLAGS)\" \\\n+\t  TARGET_LIBGCC2_CFLAGS=\"$(TARGET_LIBGCC2_CFLAGS)\" \\\n+\t  THREAD_KIND=\"$(THREAD_KIND)\" \\\n+\t  TRACE=\"$(TRACE)\" \\\n+\t  gnatlib-shared ; \\\n+\n+.PHONY: rts-zfp rts-ravenscar\n+rts-zfp:\n+\t$(MAKE) -C $(GCC_DIR)/ada $(FLAGS_TO_PASS) \\\n+\t  GNATMAKE=../gnatmake-cross \\\n+\t  rts-zfp\n+\n+rts-ravenscar:\n+\t$(MAKE) -C $(GCC_DIR)/ada $(FLAGS_TO_PASS) \\\n+\t  GNATMAKE=../gnatmake-cross \\\n+\t  rts-ravenscar\n \n # Rules to build gnattools.\n+# For cross builds of gnattools,\n+# put the host RTS dir first in the PATH to hide the default runtime\n+# files that are among the sources\n+RTS_DIR:=$(strip $(subst \\,/,$(shell gnatls -v | grep adalib )))\n+.PHONY: gnattools regnattools\n gnattools: gnatlib\n-\t$(MAKE) -C ../../gcc $(FLAGS_TO_PASS) $(GNATTOOLS)\n+\tif test $(build) = $(target) ; then \\\n+\t  $(MAKE) -C $(GCC_DIR)/ada $(FLAGS_TO_PASS) $(ADA_FLAGS_TO_PASS) \\\n+\t    ADA_INCLUDES=\"-I- -I../rts\" \\\n+\t    CC=\"../../xgcc -B../../\" STAGE_PREFIX=../../  gnattools1 ; \\\n+\t  $(MAKE) -C $(GCC_DIR)/ada $(ADA_TOOLS_FLAGS_TO_PASS) gnattools2 ; \\\n+\t  $(MAKE) -C $(GCC_DIR)/ada $(ADA_TOOLS_FLAGS_TO_PASS) gnattools3 ; \\\n+\telse \\\n+\t  $(MAKE)  -C $(GCC_DIR)/ada $(FLAGS_TO_PASS) $(ADA_FLAGS_TO_PASS) \\\n+\t    ADA_INCLUDES=\"-I$(RTS_DIR)../adainclude -I$(RTS_DIR)\" \\\n+\t    GNATMAKE=\"gnatmake\" \\\n+\t    GNATBIND=\"gnatbind\" \\\n+\t    GNATLINK=\"gnatlink\" \\\n+\t    LIBGNAT=\"\" \\\n+\t    gnattools1-re gnattools2 gnattools4 ; \\\n+\t  $(MAKE) $(FLAGS_TO_PASS) ada.all.cross ; \\\n+\tfi\n+\n+regnattools:\n+\t$(MAKE) -C $(GCC_DIR)/ada $(ADA_TOOLS_FLAGS_TO_PASS) gnattools1-re\n+\t$(MAKE) -C $(GCC_DIR)/ada $(ADA_TOOLS_FLAGS_TO_PASS) gnattools2\n+\t$(MAKE) -C $(GCC_DIR)/ada $(ADA_TOOLS_FLAGS_TO_PASS) gnattools3\n+\n+# It's unclear whether this is even needed, and if so whether it should run\n+# *before* the rest of crossgnattools or *after* it.\n+ada.all.cross:\n+\tif [ -f $(GCC_DIR)/gnatbind$(exeext) ] ; then \\\n+\t  mv $(GCC_DIR)/gnatbind$(exeext) $(GCC_DIR)/gnatbind-cross$(exeext); \\\n+\tfi\n+\tif [ -f $(GCC_DIR)/gnatbl$(exeext) ] ; then \\\n+\t  mv $(GCC_DIR)/gnatbl$(exeext) $(GCC_DIR)/gnatbl-cross$(exeext); \\\n+\tfi\n+\tif [ -f $(GCC_DIR)/gnatchop$(exeext) ] ; then \\\n+\t  mv $(GCC_DIR)/gnatchop$(exeext) $(GCC_DIR)/gnatchop-cross$(exeext); \\\n+\tfi\n+\tif [ -f $(GCC_DIR)/gnat$(exeext) ] ; then \\\n+\t  mv $(GCC_DIR)/gnat$(exeext) $(GCC_DIR)/gnat-cross$(exeext); \\\n+\tfi\n+\tif [ -f $(GCC_DIR)/gnatkr$(exeext) ] ; then \\\n+\t  mv $(GCC_DIR)/gnatkr$(exeext) $(GCC_DIR)/gnatkr-cross$(exeext); \\\n+\tfi\n+\tif [ -f $(GCC_DIR)/gnatlink$(exeext) ] ; then \\\n+\t  mv $(GCC_DIR)/gnatlink$(exeext) $(GCC_DIR)/gnatlink-cross$(exeext); \\\n+\tfi\n+\tif [ -f $(GCC_DIR)/gnatls$(exeext) ] ; then \\\n+\t  mv $(GCC_DIR)/gnatls$(exeext) $(GCC_DIR)/gnatls-cross$(exeext); \\\n+\tfi\n+\tif [ -f $(GCC_DIR)/gnatmake$(exeext) ] ; then \\\n+\t  mv $(GCC_DIR)/gnatmake$(exeext) $(GCC_DIR)/gnatmake-cross$(exeext); \\\n+\tfi\n+\tif [ -f $(GCC_DIR)/gnatmem$(exeext) ] ; then \\\n+\t  mv $(GCC_DIR)/gnatmem$(exeext) $(GCC_DIR)/gnatmem-cross$(exeext); \\\n+\tfi\n+\tif [ -f $(GCC_DIR)/gnatname$(exeext) ] ; then \\\n+\t  mv $(GCC_DIR)/gnatname$(exeext) $(GCC_DIR)/gnatname-cross$(exeext); \\\n+\tfi\n+\tif [ -f $(GCC_DIR)/gnatprep$(exeext) ] ; then \\\n+\t  mv $(GCC_DIR)/gnatprep$(exeext) $(GCC_DIR)/gnatprep-cross$(exeext); \\\n+\tfi\n+\tif [ -f $(GCC_DIR)/gnatxref$(exeext) ] ; then \\\n+\t  mv $(GCC_DIR)/gnatxref$(exeext) $(GCC_DIR)/gnatxref-cross$(exeext); \\\n+\tfi\n+\tif [ -f $(GCC_DIR)/gnatfind$(exeext) ] ; then \\\n+\t  mv $(GCC_DIR)/gnatfind$(exeext) $(GCC_DIR)/gnatfind-cross$(exeext); \\\n+\tfi\n+\tif [ -f $(GCC_DIR)/gnatclean$(exeext) ] ; then \\\n+\t  mv $(GCC_DIR)/gnatclean$(exeext) $(GCC_DIR)/gnatclean-cross$(exeext); \\\n+\tfi\n+\tif [ -f $(GCC_DIR)/gnatsym$(exeext) ] ; then \\\n+\t  mv $(GCC_DIR)/gnatsym$(exeext) $(GCC_DIR)/gnatsym-cross$(exeext); \\\n+\tfi\n+\tif [ -f $(GCC_DIR)/gpr2make$(exeext) ] ; then \\\n+\t  mv $(GCC_DIR)/gpr2make$(exeext) $(GCC_DIR)/gpr2make-cross$(exeext); \\\n+\tfi\n+\tif [ -f $(GCC_DIR)/gprcmd$(exeext) ] ; then \\\n+\t  mv $(GCC_DIR)/gprcmd$(exeext) $(GCC_DIR)/gprcmd-cross$(exeext); \\\n+\tfi\n \n # Check uninstalled version.\n check:"}, {"sha": "e8870875e6bfb6ecf1acc5650df1a445245f102d", "filename": "libada/configure", "status": "modified", "additions": 223, "deletions": 30, "changes": 253, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80dab1828b9bab1a626580487c0c4031dd9750ec/libada%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80dab1828b9bab1a626580487c0c4031dd9750ec/libada%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libada%2Fconfigure?ref=80dab1828b9bab1a626580487c0c4031dd9750ec", "patch": "@@ -272,7 +272,7 @@ PACKAGE_STRING=\n PACKAGE_BUGREPORT=\n \n ac_unique_file=\"Makefile.in\"\n-ac_subst_vars='SHELL PATH_SEPARATOR PACKAGE_NAME PACKAGE_TARNAME PACKAGE_VERSION PACKAGE_STRING PACKAGE_BUGREPORT exec_prefix prefix program_transform_name bindir sbindir libexecdir datadir sysconfdir sharedstatedir localstatedir libdir includedir oldincludedir infodir mandir build_alias host_alias target_alias DEFS ECHO_C ECHO_N ECHO_T LIBS MAINT build build_cpu build_vendor build_os host host_cpu host_vendor host_os target target_cpu target_vendor target_os enable_shared LIBOBJS LTLIBOBJS'\n+ac_subst_vars='SHELL PATH_SEPARATOR PACKAGE_NAME PACKAGE_TARNAME PACKAGE_VERSION PACKAGE_STRING PACKAGE_BUGREPORT exec_prefix prefix program_transform_name bindir sbindir libexecdir datadir sysconfdir sharedstatedir localstatedir libdir includedir oldincludedir infodir mandir build_alias host_alias target_alias DEFS ECHO_C ECHO_N ECHO_T LIBS MAINT enable_shared INSTALL_PROGRAM INSTALL_SCRIPT INSTALL_DATA build build_cpu build_vendor build_os host host_cpu host_vendor host_os target target_cpu target_vendor target_os target_noncanonical LN_S x_ada_cflags default_gnatlib_target LIBOBJS LTLIBOBJS'\n ac_subst_files=''\n \n # Initialize some variables set by options.\n@@ -881,7 +881,7 @@ esac\n     else\n       echo \"$as_me: WARNING: no configuration information is in $ac_dir\" >&2\n     fi\n-    cd $ac_popdir\n+    cd \"$ac_popdir\"\n   done\n fi\n \n@@ -1230,9 +1230,9 @@ ac_compiler_gnu=$ac_cv_c_compiler_gnu\n \n \n \n-# This is an autoconf 2.5x script.\n \n \n+# Command-line options.\n # Very limited version of AC_MAINTAINER_MODE.\n # Check whether --enable-maintainer-mode or --disable-maintainer-mode was given.\n if test \"${enable_maintainer_mode+set}\" = set; then\n@@ -1249,11 +1249,31 @@ else\n   MAINT='#'\n fi;\n \n-# Start of actual configure tests\n+# Check whether --enable-shared or --disable-shared was given.\n+if test \"${enable_shared+set}\" = set; then\n+  enableval=\"$enable_shared\"\n+\n+case $enable_shared in\n+  yes | no) ;;\n+  *)\n+    enable_shared=no\n+    IFS=\"${IFS=         }\"; ac_save_ifs=\"$IFS\"; IFS=\"${IFS}:,\"\n+    for pkg in $enableval; do\n+      case $pkg in\n+        ada | libada)\n+          enable_shared=yes ;;\n+      esac\n+    done\n+    IFS=\"$ac_save_ifs\"\n+    ;;\n+esac\n+\n+else\n+  enable_shared=yes\n+fi;\n \n-# Output: create a Makefile.\n-          ac_config_files=\"$ac_config_files Makefile\"\n \n+# Start of actual configure tests\n \n ac_aux_dir=\n for ac_dir in $srcdir $srcdir/.. $srcdir/../..; do\n@@ -1280,6 +1300,86 @@ ac_config_guess=\"$SHELL $ac_aux_dir/config.guess\"\n ac_config_sub=\"$SHELL $ac_aux_dir/config.sub\"\n ac_configure=\"$SHELL $ac_aux_dir/configure\" # This should be Cygnus configure.\n \n+# Find a good install program.  We prefer a C program (faster),\n+# so one script is as good as another.  But avoid the broken or\n+# incompatible versions:\n+# SysV /etc/install, /usr/sbin/install\n+# SunOS /usr/etc/install\n+# IRIX /sbin/install\n+# AIX /bin/install\n+# AmigaOS /C/install, which installs bootblocks on floppy discs\n+# AIX 4 /usr/bin/installbsd, which doesn't work without a -g flag\n+# AFS /usr/afsws/bin/install, which mishandles nonexistent args\n+# SVR4 /usr/ucb/install, which tries to use the nonexistent group \"staff\"\n+# OS/2's system install, which has a completely different semantic\n+# ./install, which can be erroneously created by make from ./install.sh.\n+echo \"$as_me:$LINENO: checking for a BSD-compatible install\" >&5\n+echo $ECHO_N \"checking for a BSD-compatible install... $ECHO_C\" >&6\n+if test -z \"$INSTALL\"; then\n+if test \"${ac_cv_path_install+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR\n+for as_dir in $PATH\n+do\n+  IFS=$as_save_IFS\n+  test -z \"$as_dir\" && as_dir=.\n+  # Account for people who put trailing slashes in PATH elements.\n+case $as_dir/ in\n+  ./ | .// | /cC/* | \\\n+  /etc/* | /usr/sbin/* | /usr/etc/* | /sbin/* | /usr/afsws/bin/* | \\\n+  ?:\\\\/os2\\\\/install\\\\/* | ?:\\\\/OS2\\\\/INSTALL\\\\/* | \\\n+  /usr/ucb/* ) ;;\n+  *)\n+    # OSF1 and SCO ODT 3.0 have their own names for install.\n+    # Don't use installbsd from OSF since it installs stuff as root\n+    # by default.\n+    for ac_prog in ginstall scoinst install; do\n+      for ac_exec_ext in '' $ac_executable_extensions; do\n+\tif $as_executable_p \"$as_dir/$ac_prog$ac_exec_ext\"; then\n+\t  if test $ac_prog = install &&\n+\t    grep dspmsg \"$as_dir/$ac_prog$ac_exec_ext\" >/dev/null 2>&1; then\n+\t    # AIX install.  It has an incompatible calling convention.\n+\t    :\n+\t  elif test $ac_prog = install &&\n+\t    grep pwplus \"$as_dir/$ac_prog$ac_exec_ext\" >/dev/null 2>&1; then\n+\t    # program-specific install script used by HP pwplus--don't use.\n+\t    :\n+\t  else\n+\t    ac_cv_path_install=\"$as_dir/$ac_prog$ac_exec_ext -c\"\n+\t    break 3\n+\t  fi\n+\tfi\n+      done\n+    done\n+    ;;\n+esac\n+done\n+\n+\n+fi\n+  if test \"${ac_cv_path_install+set}\" = set; then\n+    INSTALL=$ac_cv_path_install\n+  else\n+    # As a last resort, use the slow shell script.  We don't cache a\n+    # path for INSTALL within a source directory, because that will\n+    # break other packages using the cache if that directory is\n+    # removed, or if the path is relative.\n+    INSTALL=$ac_install_sh\n+  fi\n+fi\n+echo \"$as_me:$LINENO: result: $INSTALL\" >&5\n+echo \"${ECHO_T}$INSTALL\" >&6\n+\n+# Use test -z because SunOS4 sh mishandles braces in ${var-val}.\n+# It thinks the first close brace ends the variable substitution.\n+test -z \"$INSTALL_PROGRAM\" && INSTALL_PROGRAM='${INSTALL}'\n+\n+test -z \"$INSTALL_SCRIPT\" && INSTALL_SCRIPT='${INSTALL}'\n+\n+test -z \"$INSTALL_DATA\" && INSTALL_DATA='${INSTALL} -m 644'\n+\n+\n # Make sure we can run config.sub.\n $ac_config_sub sun4 >/dev/null 2>&1 ||\n   { { echo \"$as_me:$LINENO: error: cannot run $ac_config_sub\" >&5\n@@ -1363,27 +1463,106 @@ test -n \"$target_alias\" &&\n     NONENONEs,x,x, &&\n   program_prefix=${target_alias}-\n \n-# Check whether --enable-shared or --disable-shared was given.\n-if test \"${enable_shared+set}\" = set; then\n-  enableval=\"$enable_shared\"\n+# Autoconf M4 include file defining utility macros for complex Canadian\n+# cross builds.\n+\n+\n+\n+\n+\n+\n+####\n+# _NCN_TOOL_PREFIXES:  Some stuff that oughtta be done in AC_CANONICAL_SYSTEM\n+# or AC_INIT.\n+# These demand that AC_CANONICAL_SYSTEM be called beforehand.\n+\n+####\n+# NCN_CHECK_TARGET_TOOL(variable, prog-to-check-for,[value-if-not-found],[path])\n+# Like AC_CHECK_TOOL, but tries a prefix of the target, not the host.\n+# Code is pretty much lifted from autoconf2.53.\n+\n+\n+\n+####\n+# NCN_STRICT_CHECK_TOOL(variable, prog-to-check-for,[value-if-not-found],[path])\n+# Like AC_CHECK_TOOL, but requires the prefix if build!=host.\n+\n+\n+\n+####\n+# NCN_STRICT_CHECK_TARGET_TOOL(variable, prog-to-check-for,[value-if-not-found],[path])\n+# Like NCN_CHECK_TARGET_TOOL, but requires the prefix if build!=target.\n \n-  case $enable_shared in\n-  yes | no) ;;\n-  *)\n-    enable_shared=no\n-    IFS=\"${IFS=         }\"; ac_save_ifs=\"$IFS\"; IFS=\"${IFS}:,\"\n-    for pkg in $enableval; do\n-      if test \"$pkg\" = \"ada\" || test \"$pkg\" = \"libada\"; then\n-        enable_shared=yes\n-      fi\n-    done\n-    IFS=\"$ac_save_ifs\"\n-    ;;\n-  esac\n \n+###\n+# AC_PROG_CPP_WERROR\n+# Used for autoconf 2.5x to force AC_PREPROC_IFELSE to reject code which\n+# triggers warnings from the preprocessor.  Will be in autoconf 2.58.\n+# For now, using this also overrides header checks to use only the\n+# preprocessor (matches 2.13 behavior; matching 2.58's behavior is a\n+# bit harder from here).\n+# Eventually autoconf will default to checking headers with the compiler\n+# instead, and we'll have to do this differently.\n+\n+# AC_PROG_CPP_WERROR\n+\n+# Test for GNAT.\n+# We require the gnatbind program, and a compiler driver that\n+# understands Ada.  We use the user's CC setting, already found.\n+#\n+# Sets the shell variable have_gnat to yes or no as appropriate, and\n+# substitutes GNATBIND.\n+\n+\n+ case ${build_alias} in\n+  \"\") build_noncanonical=${build} ;;\n+  *) build_noncanonical=${build_alias} ;;\n+esac\n+\n+ case ${host_alias} in\n+  \"\") host_noncanonical=${build_noncanonical} ;;\n+  *) host_noncanonical=${host_alias} ;;\n+esac\n+\n+ case ${target_alias} in\n+  \"\") target_noncanonical=${host_noncanonical} ;;\n+  *) target_noncanonical=${target_alias} ;;\n+esac\n+\n+\n+\n+# Need to pass this down for now :-P\n+echo \"$as_me:$LINENO: checking whether ln -s works\" >&5\n+echo $ECHO_N \"checking whether ln -s works... $ECHO_C\" >&6\n+LN_S=$as_ln_s\n+if test \"$LN_S\" = \"ln -s\"; then\n+  echo \"$as_me:$LINENO: result: yes\" >&5\n+echo \"${ECHO_T}yes\" >&6\n else\n-  enable_shared=yes\n-fi;\n+  echo \"$as_me:$LINENO: result: no, using $LN_S\" >&5\n+echo \"${ECHO_T}no, using $LN_S\" >&6\n+fi\n+\n+\n+# Determine x_ada_cflags\n+case $host in\n+  hppa*) x_ada_cflags=-mdisable-indexing ;;\n+  *) x_ada_cflags= ;;\n+esac\n+\n+\n+# Determine what to build for 'gnatlib'\n+if test $build = $target \\\n+   && test ${enable_shared} = yes ; then\n+  # Note that build=target is almost certainly the wrong test; FIXME\n+  default_gnatlib_target=\"gnatlib-shared\"\n+else\n+  default_gnatlib_target=\"gnatlib-simple\"\n+fi\n+\n+\n+# Output: create a Makefile.\n+          ac_config_files=\"$ac_config_files Makefile\"\n \n \n cat >confcache <<\\_ACEOF\n@@ -1842,6 +2021,7 @@ Copyright (C) 2003 Free Software Foundation, Inc.\n This config.status script is free software; the Free Software Foundation\n gives unlimited permission to copy, distribute and modify it.\"\n srcdir=$srcdir\n+INSTALL=\"$INSTALL\"\n _ACEOF\n \n cat >>$CONFIG_STATUS <<\\_ACEOF\n@@ -2021,6 +2201,10 @@ s,@ECHO_N@,$ECHO_N,;t t\n s,@ECHO_T@,$ECHO_T,;t t\n s,@LIBS@,$LIBS,;t t\n s,@MAINT@,$MAINT,;t t\n+s,@enable_shared@,$enable_shared,;t t\n+s,@INSTALL_PROGRAM@,$INSTALL_PROGRAM,;t t\n+s,@INSTALL_SCRIPT@,$INSTALL_SCRIPT,;t t\n+s,@INSTALL_DATA@,$INSTALL_DATA,;t t\n s,@build@,$build,;t t\n s,@build_cpu@,$build_cpu,;t t\n s,@build_vendor@,$build_vendor,;t t\n@@ -2033,7 +2217,10 @@ s,@target@,$target,;t t\n s,@target_cpu@,$target_cpu,;t t\n s,@target_vendor@,$target_vendor,;t t\n s,@target_os@,$target_os,;t t\n-s,@enable_shared@,$enable_shared,;t t\n+s,@target_noncanonical@,$target_noncanonical,;t t\n+s,@LN_S@,$LN_S,;t t\n+s,@x_ada_cflags@,$x_ada_cflags,;t t\n+s,@default_gnatlib_target@,$default_gnatlib_target,;t t\n s,@LIBOBJS@,$LIBOBJS,;t t\n s,@LTLIBOBJS@,$LTLIBOBJS,;t t\n CEOF\n@@ -2197,12 +2384,11 @@ case $ac_abs_builddir in\n esac\n \n \n+  case $INSTALL in\n+  [\\\\/$]* | ?:[\\\\/]* ) ac_INSTALL=$INSTALL ;;\n+  *) ac_INSTALL=$ac_top_builddir$INSTALL ;;\n+  esac\n \n-  if test x\"$ac_file\" != x-; then\n-    { echo \"$as_me:$LINENO: creating $ac_file\" >&5\n-echo \"$as_me: creating $ac_file\" >&6;}\n-    rm -f \"$ac_file\"\n-  fi\n   # Let's still pretend it is `configure' which instantiates (i.e., don't\n   # use $as_me), people would be surprised to read:\n   #    /* config.h.  Generated by config.status.  */\n@@ -2241,6 +2427,12 @@ echo \"$as_me: error: cannot find input file: $f\" >&2;}\n \t fi;;\n       esac\n     done` || { (exit 1); exit 1; }\n+\n+  if test x\"$ac_file\" != x-; then\n+    { echo \"$as_me:$LINENO: creating $ac_file\" >&5\n+echo \"$as_me: creating $ac_file\" >&6;}\n+    rm -f \"$ac_file\"\n+  fi\n _ACEOF\n cat >>$CONFIG_STATUS <<_ACEOF\n   sed \"$ac_vpsub\n@@ -2258,6 +2450,7 @@ s,@builddir@,$ac_builddir,;t t\n s,@abs_builddir@,$ac_abs_builddir,;t t\n s,@top_builddir@,$ac_top_builddir,;t t\n s,@abs_top_builddir@,$ac_abs_top_builddir,;t t\n+s,@INSTALL@,$ac_INSTALL,;t t\n \" $ac_file_inputs | (eval \"$ac_sed_cmds\") >$tmp/out\n   rm -f $tmp/stdin\n   if test x\"$ac_file\" != x-; then"}, {"sha": "580447ef6a75e4acff9c7e6736b448e674f6791a", "filename": "libada/configure.ac", "status": "modified", "additions": 50, "deletions": 23, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80dab1828b9bab1a626580487c0c4031dd9750ec/libada%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80dab1828b9bab1a626580487c0c4031dd9750ec/libada%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libada%2Fconfigure.ac?ref=80dab1828b9bab1a626580487c0c4031dd9750ec", "patch": "@@ -16,17 +16,16 @@\n # Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n \n AC_INIT\n-AC_CONFIG_SRCDIR([Makefile.in])\n-\n-# This is an autoconf 2.5x script.\n AC_PREREQ([2.59])\n \n+AC_CONFIG_SRCDIR([Makefile.in])\n+\n+# Command-line options.\n # Very limited version of AC_MAINTAINER_MODE.\n-AC_ARG_ENABLE(\n-  [maintainer-mode],\n-  AC_HELP_STRING([--enable-maintainer-mode],\n+AC_ARG_ENABLE([maintainer-mode],\n+  [AC_HELP_STRING([--enable-maintainer-mode],\n                  [enable make rules and dependencies not useful (and\n-                  sometimes confusing) to the casual installer]),\n+                  sometimes confusing) to the casual installer])],\n   [case ${enable_maintainer_mode} in\n      yes) MAINT='' ;;\n      no) MAINT='#' ;;\n@@ -36,30 +35,58 @@ AC_ARG_ENABLE(\n   [MAINT='#'])\n AC_SUBST([MAINT])dnl\n \n-# Start of actual configure tests\n-\n-# Output: create a Makefile.\n-AC_CONFIG_FILES([Makefile])\n-\n-AC_CANONICAL_SYSTEM\n-\n-AC_ARG_ENABLE(shared,\n-[  --disable-shared        don't provide a shared libgnat],\n-[ \n-  case $enable_shared in\n+AC_ARG_ENABLE([shared],\n+[AC_HELP_STRING([--disable-shared],\n+                [don't provide a shared libgnat])],\n+[\n+case $enable_shared in\n   yes | no) ;;\n   *)\n     enable_shared=no\n     IFS=\"${IFS=         }\"; ac_save_ifs=\"$IFS\"; IFS=\"${IFS}:,\"\n     for pkg in $enableval; do\n-      if test \"$pkg\" = \"ada\" || test \"$pkg\" = \"libada\"; then\n-        enable_shared=yes\n-      fi\n+      case $pkg in\n+        ada | libada)\n+          enable_shared=yes ;;\n+      esac\n     done\n     IFS=\"$ac_save_ifs\"\n     ;;\n-  esac\n+esac\n ], [enable_shared=yes])\n-AC_SUBST(enable_shared)\n+AC_SUBST([enable_shared])\n+\n+# Start of actual configure tests\n+\n+AC_PROG_INSTALL\n+\n+AC_CANONICAL_SYSTEM\n+\n+sinclude(../config/acx.m4)\n+_GCC_TOPLEV_NONCANONICAL_TARGET\n+AC_SUBST(target_noncanonical)\n+\n+# Need to pass this down for now :-P\n+AC_PROG_LN_S\n+\n+# Determine x_ada_cflags\n+case $host in\n+  hppa*) x_ada_cflags=-mdisable-indexing ;;\n+  *) x_ada_cflags= ;;\n+esac\n+AC_SUBST([x_ada_cflags])\n+\n+# Determine what to build for 'gnatlib'\n+if test $build = $target \\\n+   && test ${enable_shared} = yes ; then\n+  # Note that build=target is almost certainly the wrong test; FIXME\n+  default_gnatlib_target=\"gnatlib-shared\"\n+else\n+  default_gnatlib_target=\"gnatlib-simple\"\n+fi\n+AC_SUBST([default_gnatlib_target])\n+\n+# Output: create a Makefile.\n+AC_CONFIG_FILES([Makefile])\n \n AC_OUTPUT"}]}