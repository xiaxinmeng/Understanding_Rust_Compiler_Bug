{"sha": "daae8185c813fc4970409ccb50231607494ca0f2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGFhZTgxODVjODEzZmM0OTcwNDA5Y2NiNTAyMzE2MDc0OTRjYTBmMg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2004-03-04T22:00:59Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2004-03-04T22:00:59Z"}, "message": "expr.c (expand_expr_real, [...]): Get proper type of stack slot for temp used for result of BLKmode but in...\n\n\t* expr.c (expand_expr_real, case COMPONENT_REF): Get proper type of\n\tstack slot for temp used for result of BLKmode but in integral mode.\n\nFrom-SVN: r78937", "tree": {"sha": "69b234d253f52addaf041f13820cbfe3ccc1701d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/69b234d253f52addaf041f13820cbfe3ccc1701d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/daae8185c813fc4970409ccb50231607494ca0f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/daae8185c813fc4970409ccb50231607494ca0f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/daae8185c813fc4970409ccb50231607494ca0f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/daae8185c813fc4970409ccb50231607494ca0f2/comments", "author": null, "committer": null, "parents": [{"sha": "f345f21a90e56d8f1f9a61e96519a9de2ede2d04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f345f21a90e56d8f1f9a61e96519a9de2ede2d04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f345f21a90e56d8f1f9a61e96519a9de2ede2d04"}], "stats": {"total": 20, "additions": 16, "deletions": 4}, "files": [{"sha": "a141cc97684c3bc7a278da1ad04ff66e1d6bf054", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daae8185c813fc4970409ccb50231607494ca0f2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daae8185c813fc4970409ccb50231607494ca0f2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=daae8185c813fc4970409ccb50231607494ca0f2", "patch": "@@ -1,3 +1,8 @@\n+2004-03-04  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* expr.c (expand_expr_real, case COMPONENT_REF): Get proper type of\n+\tstack slot for temp used for result of BLKmode but in integral mode.\n+\n 2004-03-04  Jan Hubicka  <jh@suse.cz>\n \n \t* reload.c (find_reloads): Reorganize if seqeunce to switch."}, {"sha": "9bd27402768dcc7575e38c070ece2736816ed3ea", "filename": "gcc/expr.c", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daae8185c813fc4970409ccb50231607494ca0f2/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daae8185c813fc4970409ccb50231607494ca0f2/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=daae8185c813fc4970409ccb50231607494ca0f2", "patch": "@@ -7240,12 +7240,19 @@ expand_expr_real (tree exp, rtx target, enum machine_mode tmode,\n \t\t\t\t\t    - bitsize),\n \t\t\t\t  op0, 1);\n \n+\t    /* If the result type is BLKmode, store the data into a temporary\n+\t       of the appropriate type, but with the mode corresponding to the\n+\t       mode for the data we have (op0's mode).  It's tempting to make\n+\t       this a constant type, since we know it's only being stored once,\n+\t       but that can cause problems if we are taking the address of this\n+\t       COMPONENT_REF because the MEM of any reference via that address\n+\t       will have flags corresponding to the type, which will not\n+\t       necessarily be constant.  */\n \t    if (mode == BLKmode)\n \t      {\n-\t\trtx new = assign_temp (build_qualified_type\n-\t\t\t\t       ((*lang_hooks.types.type_for_mode)\n-\t\t\t\t\t(ext_mode, 0),\n-\t\t\t\t\tTYPE_QUAL_CONST), 0, 1, 1);\n+\t\trtx new\n+\t\t  = assign_stack_temp_for_type\n+\t\t    (ext_mode, GET_MODE_BITSIZE (ext_mode), 0, type);\n \n \t\temit_move_insn (new, op0);\n \t\top0 = copy_rtx (new);"}]}