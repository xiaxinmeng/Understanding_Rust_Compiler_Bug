{"sha": "44a8d0b35727556fe4a7ac43706a3c233112fa9b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDRhOGQwYjM1NzI3NTU2ZmU0YTdhYzQzNzA2YTNjMjMzMTEyZmE5Yg==", "commit": {"author": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1995-04-18T19:23:38Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1995-04-18T19:23:38Z"}, "message": "65th Cygnus<->FSF merge\n\nFrom-SVN: r9412", "tree": {"sha": "744e3a3465f78ad554e0d859f3f4a6f0f84b74be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/744e3a3465f78ad554e0d859f3f4a6f0f84b74be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/44a8d0b35727556fe4a7ac43706a3c233112fa9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44a8d0b35727556fe4a7ac43706a3c233112fa9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44a8d0b35727556fe4a7ac43706a3c233112fa9b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44a8d0b35727556fe4a7ac43706a3c233112fa9b/comments", "author": null, "committer": null, "parents": [{"sha": "7b83cfef6d24a23122a20ab7b0d892913cf9baaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b83cfef6d24a23122a20ab7b0d892913cf9baaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b83cfef6d24a23122a20ab7b0d892913cf9baaf"}], "stats": {"total": 283, "additions": 193, "deletions": 90}, "files": [{"sha": "f8268ecc52187314ad2b60aa59619b24a12e15da", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44a8d0b35727556fe4a7ac43706a3c233112fa9b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44a8d0b35727556fe4a7ac43706a3c233112fa9b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=44a8d0b35727556fe4a7ac43706a3c233112fa9b", "patch": "@@ -1,3 +1,83 @@\n+Tue Apr 18 03:57:35 1995  Michael Meissner  (meissner@cygnus.com)\n+\n+\t* Makefile.in (lex.o): Add dependency on c-pragma.h.\n+\n+\t* lex.c (handle_sysv_pragma): Use NULL_PTR and NULL_TREE as\n+\tappropriate, instead of 0.\n+\n+Mon Apr 17 12:28:42 1995  Jason Merrill  <jason@phydeaux.cygnus.com>\n+\n+\t* decl.c (pushdecl): Use decls_match, not duplicate_decls, for\n+\tcomparing local and global decls.\n+\n+Fri Apr 14 01:46:52 1995  Jason Merrill  <jason@phydeaux.cygnus.com>\n+\n+\t* typeck.c (convert_arguments): Only prohibit passing to ... of\n+\ttypes with non-trivial copy constructors.\n+\n+\t* repo.c (repo_template_used): Don't try to mess with no id.\n+\n+Fri Apr 14 23:32:50 1995  Per Bothner  <bothner@rtl.cygnus.com>\n+\n+\t* decl.c (duplicate_decls):  Use cp_warning_at for redundant-decls.\n+\n+Thu Apr 13 15:37:42 1995  Brendan Kehoe  (brendan@lisa.cygnus.com)\n+\n+\t* cp-tree.h (current_tinst_level): Delete declaration, since it's\n+\tstatic inside pt.c.\n+\n+\t* typeck.c (build_modify_expr): Catch incompatible array assignment.\n+\n+\t* parse.y (attribute_list, attrib): Rewrite actions to feed the\n+\tright stuff to decl_attributes.\n+\n+Thu Apr 13 11:24:10 1995  Jason Merrill  <jason@phydeaux.cygnus.com>\n+\n+\t* search.c (dfs_debug_mark): Check for magic virtual like\n+\timport_export_vtable.\n+\n+\t* typeck.c (build_binary_op_nodefault): Don't call cp_pedwarn with\n+\tfour args.\n+\n+Wed Apr 12 12:02:57 1995  Jason Merrill  <jason@deneb.cygnus.com>\n+\n+\t* decl2.c (finish_file): Move prevtable pass before needs_messing_up\n+\tdecision.\n+\n+Tue Apr 11 11:20:27 1995  Jason Merrill  <jason@phydeaux.cygnus.com>\n+\n+\t* decl.c (finish_decl): If we're writing out a static data member of\n+\ta class, we want the debug info for that class.\n+\n+\t* gc.c (build_t_desc): Check linkage of a class properly.\n+\n+\t* class.c (finish_struct): Set the 'headof' offset for the main\n+\tvtable properly.\n+\t(prepare_fresh_vtable): Fix typeinfo pointer here.\n+\t(modify_one_vtable): Instead of here.\n+\n+Mon Apr 10 12:15:59 1995  Jason Merrill  <jason@phydeaux.cygnus.com>\n+\n+\t* repo.c (repo_get_id): New function to return the interesting\n+\tidentifier for a repo entity.\n+\t(repo_template_used): Use it.\n+\t(repo_template_instantiated): Mark the id as chosen.\n+\t(init_repo): Record whether or not the id was chosen.\n+\t(finish_repo): Note if an id was newly chosen.\n+\n+\t* pt.c (do_function_instantiation): Call repo_template_instantiated.\n+\t(do_type_instantiation): Ditto.  Don't diagnose multiple\n+\tinstantiation.\n+\n+\t* decl2.c (finish_file): Use DECL_NOT_REALLY_EXTERN when deciding\n+\twhether or not to synthesize a method.\n+\n+\tUndo these changes:\n+\t* class.c (finish_vtbls): build more vtables if flag_rtti is on.\n+\t* class.c (modify_all_direct_vtables): ditto.\n+\t* init.c (expand_direct_vtbls_init): expand more vtables if\n+\tflag_rtti is on.\n+\n Sat Apr  8 17:45:41 1995  Mike Stump  <mrs@cygnus.com>\n \n \t* gc.c (build_headof): Use ptrdiff_type_node instead of"}, {"sha": "4ef9c0a6c443b452780fbd4278e7b31b64116028", "filename": "gcc/cp/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44a8d0b35727556fe4a7ac43706a3c233112fa9b/gcc%2Fcp%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44a8d0b35727556fe4a7ac43706a3c233112fa9b/gcc%2Fcp%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMakefile.in?ref=44a8d0b35727556fe4a7ac43706a3c233112fa9b", "patch": "@@ -247,7 +247,7 @@ pt.o : pt.c $(CONFIG_H) $(CXX_TREE_H) decl.h $(PARSE_H)\n error.o : error.c $(CONFIG_H) $(CXX_TREE_H)\n errfn.o : errfn.c $(CONFIG_H) $(CXX_TREE_H)\n sig.o : sig.c $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../flags.h\n-repo.o : repo.c $(CONFIG.H) $(CXX_TREE_H)\n+repo.o : repo.c $(CONFIG_H) $(CXX_TREE_H)\n \f\n # These exist for maintenance purposes.\n "}, {"sha": "a4d9b6b170ceadb9f8fecfa07d55484c54879cab", "filename": "gcc/cp/class.c", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44a8d0b35727556fe4a7ac43706a3c233112fa9b/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44a8d0b35727556fe4a7ac43706a3c233112fa9b/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=44a8d0b35727556fe4a7ac43706a3c233112fa9b", "patch": "@@ -691,7 +691,7 @@ prepare_fresh_vtable (binfo, for_type)\n   if (flag_rtti)\n     TREE_VALUE (BINFO_VIRTUALS (binfo))\n       = build_vtable_entry (size_binop (MINUS_EXPR, integer_zero_node, offset),\n-\t    FNADDR_FROM_VTABLE_ENTRY (TREE_VALUE (BINFO_VIRTUALS (binfo))));\n+\t\t\t    build_t_desc (for_type, 0));\n \n #ifdef GATHER_STATISTICS\n   n_vtables += 1;\n@@ -2115,7 +2115,7 @@ finish_vtbls (binfo, do_self, t)\n \t{\n \t  base_binfo = binfo_member (BINFO_TYPE (base_binfo), CLASSTYPE_VBASECLASSES (t));\n \t}\n-      finish_vtbls (base_binfo, (is_not_base_vtable || flag_rtti), t);\n+      finish_vtbls (base_binfo, is_not_base_vtable, t);\n     }\n }\n \n@@ -2250,11 +2250,6 @@ modify_one_vtable (binfo, t, fndecl, pfn)\n \t  if (! BINFO_NEW_VTABLE_MARKED (binfo))\n \t    prepare_fresh_vtable (binfo, t);\n \t}\n-      old_rtti = get_vtable_entry_n (BINFO_VIRTUALS (binfo), 0);\n-      if (old_rtti)\n-\tTREE_VALUE (old_rtti) = build_vtable_entry (\n-\tDELTA_FROM_VTABLE_ENTRY (TREE_VALUE (old_rtti)), \n-        build_t_desc (t, 0));\n     }\n   if (fndecl == NULL_TREE) return;\n \n@@ -2343,7 +2338,7 @@ modify_all_direct_vtables (binfo, do_self, t, fndecl, pfn)\n       int is_not_base_vtable =\n \ti != CLASSTYPE_VFIELD_PARENT (BINFO_TYPE (binfo));\n       if (! TREE_VIA_VIRTUAL (base_binfo))\n-\tmodify_all_direct_vtables (base_binfo, (is_not_base_vtable || flag_rtti), t, fndecl, pfn);\n+\tmodify_all_direct_vtables (base_binfo, is_not_base_vtable, t, fndecl, pfn);\n     }\n }\n \n@@ -3794,8 +3789,12 @@ finish_struct (t, list_of_fieldlists, warn_anon)\n \n \t  /* Update the rtti pointer for this class.  */\n \t  if (flag_rtti)\n-\t    TREE_VALUE (TYPE_BINFO_VIRTUALS (t))\n-\t      = build_vtable_entry (integer_zero_node, build_t_desc (t, 0));\n+\t    {\n+\t      tree offset = get_derived_offset (TYPE_BINFO (t), NULL_TREE);\n+\t      offset = size_binop (MINUS_EXPR, integer_zero_node, offset);\n+\t      TREE_VALUE (TYPE_BINFO_VIRTUALS (t))\n+\t\t= build_vtable_entry (offset, build_t_desc (t, 0));\n+\t    }\n \t}\n \n       /* If this type has basetypes with constructors, then those"}, {"sha": "a5f761baab3c93832a930e820136eda12d9baf47", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44a8d0b35727556fe4a7ac43706a3c233112fa9b/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44a8d0b35727556fe4a7ac43706a3c233112fa9b/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=44a8d0b35727556fe4a7ac43706a3c233112fa9b", "patch": "@@ -1500,8 +1500,6 @@ struct tinst_level\n   struct tinst_level *next;\n };\n \n-extern struct tinst_level *current_tinst_level;\n-\n /* in class.c */\n extern tree current_class_name;\n extern tree current_class_type;"}, {"sha": "d288048f4b5ce473d5b4742155ba2833f416a96c", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44a8d0b35727556fe4a7ac43706a3c233112fa9b/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44a8d0b35727556fe4a7ac43706a3c233112fa9b/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=44a8d0b35727556fe4a7ac43706a3c233112fa9b", "patch": "@@ -2395,7 +2395,7 @@ duplicate_decls (newdecl, olddecl)\n       && !(DECL_EXTERNAL (olddecl) && ! DECL_EXTERNAL (newdecl)))\n     {\n       cp_warning (\"redundant redeclaration of `%D' in same scope\", newdecl);\n-      cp_warning (\"previous declaration of `%D'\", olddecl);\n+      cp_warning_at (\"previous declaration of `%D'\", olddecl);\n     }\n \n   /* Copy all the DECL_... slots specified in the new decl\n@@ -2971,7 +2971,7 @@ pushdecl (x)\n \t      && TREE_CODE (oldglobal) == FUNCTION_DECL)\n \t    {\n \t      /* We have one.  Their types must agree.  */\n-\t      if (duplicate_decls (x, oldglobal))\n+\t      if (decls_match (x, oldglobal))\n \t\t/* OK */;\n \t      else\n \t\t{\n@@ -6231,6 +6231,10 @@ finish_decl (decl, init, asmspec_tree, need_pop, flags)\n \t/* Let debugger know it should output info for this type.  */\n \tnote_debug_info_needed (ttype);\n \n+      if (TREE_STATIC (decl) && DECL_CONTEXT (decl)\n+\t  && TREE_CODE_CLASS (TREE_CODE (DECL_CONTEXT (decl))) == 't')\n+\tnote_debug_info_needed (DECL_CONTEXT (decl));\n+\n       if ((DECL_EXTERNAL (decl) || TREE_STATIC (decl))\n \t  && DECL_SIZE (decl) != NULL_TREE\n \t  && ! TREE_CONSTANT (DECL_SIZE (decl)))"}, {"sha": "7e3528c7ee0ea37cf56cde3fbf278a744dd84d25", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 25, "deletions": 23, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44a8d0b35727556fe4a7ac43706a3c233112fa9b/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44a8d0b35727556fe4a7ac43706a3c233112fa9b/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=44a8d0b35727556fe4a7ac43706a3c233112fa9b", "patch": "@@ -2794,7 +2794,7 @@ finish_file ()\n   int start_time, this_time;\n \n   tree fnname;\n-  tree vars = static_aggregates;\n+  tree vars;\n   int needs_cleaning = 0, needs_messing_up = 0;\n \n   if (flag_detailed_statistics)\n@@ -2810,27 +2810,6 @@ finish_file ()\n      we'll need here.  */\n   push_lang_context (lang_name_c);\n \n-  if (static_ctors || vars || might_have_exceptions_p ())\n-    needs_messing_up = 1;\n-  if (static_dtors)\n-    needs_cleaning = 1;\n-\n-  /* See if we really need the hassle.  */\n-  while (vars && needs_cleaning == 0)\n-    {\n-      tree decl = TREE_VALUE (vars);\n-      tree type = TREE_TYPE (decl);\n-      if (TYPE_NEEDS_DESTRUCTOR (type))\n-\t{\n-\t  needs_cleaning = 1;\n-\t  needs_messing_up = 1;\n-\t  break;\n-\t}\n-      else\n-\tneeds_messing_up |= TYPE_NEEDS_CONSTRUCTING (type);\n-      vars = TREE_CHAIN (vars);\n-    }\n-\n   /* Otherwise, GDB can get confused, because in only knows\n      about source for LINENO-1 lines.  */\n   lineno -= 1;\n@@ -2867,6 +2846,29 @@ finish_file ()\n      that we can pick up any other tdecls that those routines need. */\n   walk_vtables ((void (*)())0, finish_prevtable_vardecl);\n \n+  vars = static_aggregates;\n+\n+  if (static_ctors || vars || might_have_exceptions_p ())\n+    needs_messing_up = 1;\n+  if (static_dtors)\n+    needs_cleaning = 1;\n+\n+  /* See if we really need the hassle.  */\n+  while (vars && needs_cleaning == 0)\n+    {\n+      tree decl = TREE_VALUE (vars);\n+      tree type = TREE_TYPE (decl);\n+      if (TYPE_NEEDS_DESTRUCTOR (type))\n+\t{\n+\t  needs_cleaning = 1;\n+\t  needs_messing_up = 1;\n+\t  break;\n+\t}\n+      else\n+\tneeds_messing_up |= TYPE_NEEDS_CONSTRUCTING (type);\n+      vars = TREE_CHAIN (vars);\n+    }\n+\n   if (needs_cleaning == 0)\n     goto mess_up;\n \n@@ -3101,7 +3103,7 @@ finish_file ()\n \t    if (DECL_ARTIFICIAL (decl) && ! DECL_INITIAL (decl))\n \t      {\n \t\tif (TREE_USED (decl)\n-\t\t    || (TREE_PUBLIC (decl) && ! DECL_EXTERNAL (decl)))\n+\t\t    || (TREE_PUBLIC (decl) && DECL_NOT_REALLY_EXTERN (decl)))\n \t\t  synthesize_method (decl);\n \t\telse\n \t\t  {"}, {"sha": "b601d3d18b85c3f6fa07abde988c3e7517ddf1a0", "filename": "gcc/cp/init.c", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44a8d0b35727556fe4a7ac43706a3c233112fa9b/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44a8d0b35727556fe4a7ac43706a3c233112fa9b/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=44a8d0b35727556fe4a7ac43706a3c233112fa9b", "patch": "@@ -125,7 +125,6 @@ expand_direct_vtbls_init (real_binfo, binfo, init_self, can_elide, addr)\n   tree real_binfos = BINFO_BASETYPES (real_binfo);\n   tree binfos = BINFO_BASETYPES (binfo);\n   int i, n_baselinks = real_binfos ? TREE_VEC_LENGTH (real_binfos) : 0;\n-  int has_expanded = 0;\n \n   for (i = 0; i < n_baselinks; i++)\n     {\n@@ -134,20 +133,16 @@ expand_direct_vtbls_init (real_binfo, binfo, init_self, can_elide, addr)\n       int is_not_base_vtable =\n \ti != CLASSTYPE_VFIELD_PARENT (BINFO_TYPE (real_binfo));\n       if (! TREE_VIA_VIRTUAL (real_base_binfo))\n-\t{\n-\t  expand_direct_vtbls_init (real_base_binfo, base_binfo,\n-\t\t  (is_not_base_vtable || flag_rtti), can_elide, addr);\n-\t  if (is_not_base_vtable && flag_rtti)\n-\t    has_expanded = 1;\n-\t}\n+\texpand_direct_vtbls_init (real_base_binfo, base_binfo,\n+\t\t\t\t  is_not_base_vtable, can_elide, addr);\n     }\n #if 0\n   /* Before turning this on, make sure it is correct.  */\n   if (can_elide  && ! BINFO_MODIFIED (binfo))\n     return;\n #endif\n   /* Should we use something besides CLASSTYPE_VFIELDS? */\n-  if (init_self && !has_expanded && CLASSTYPE_VFIELDS (BINFO_TYPE (real_binfo)))\n+  if (init_self && CLASSTYPE_VFIELDS (BINFO_TYPE (real_binfo)))\n     {\n       tree base_ptr = convert_pointer_to_real (binfo, addr);\n       expand_virtual_init (real_binfo, base_ptr);"}, {"sha": "48c2ae87321788e1da18338dd9c571e3b095cd41", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44a8d0b35727556fe4a7ac43706a3c233112fa9b/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44a8d0b35727556fe4a7ac43706a3c233112fa9b/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=44a8d0b35727556fe4a7ac43706a3c233112fa9b", "patch": "@@ -2085,22 +2085,22 @@ attribute:\n \n attribute_list:\n       attrib\n-\t\t{ $$ = build_tree_list (NULL_TREE, $1); }\n+\t\t{ $$ = $1; }\n \t| attribute_list ',' attrib\n-\t\t{ $$ = chainon ($1, build_tree_list (NULL_TREE, $3)); }\n+\t\t{ $$ = chainon ($1, $3); }\n \t;\n  \n attrib:\n     /* empty */\n \t\t{ $$ = NULL_TREE; }\n \t| any_word\n-\t\t{ $$ = $1; }\n+\t\t{ $$ = build_tree_list ($1, NULL_TREE); }\n \t| any_word '(' IDENTIFIER ')'\n-\t\t{ $$ = tree_cons ($1, NULL_TREE, build_tree_list (NULL_TREE, $3)); }\n+\t\t{ $$ = build_tree_list ($1, build_tree_list (NULL_TREE, $3)); }\n \t| any_word '(' IDENTIFIER ',' nonnull_exprlist ')'\n-\t\t{ $$ = tree_cons ($1, NULL_TREE, tree_cons (NULL_TREE, $3, $5)); }\n+\t\t{ $$ = build_tree_list ($1, tree_cons (NULL_TREE, $3, $5)); }\n \t| any_word '(' nonnull_exprlist ')'\n-\t\t{ $$ = tree_cons ($1, NULL_TREE, $3); }\n+\t\t{ $$ = build_tree_list ($1, $3); }\n \t;\n \n /* This still leaves out most reserved keywords,"}, {"sha": "f7ec05d091372533c0efd99213fc27512962b66e", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 10, "deletions": 19, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44a8d0b35727556fe4a7ac43706a3c233112fa9b/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44a8d0b35727556fe4a7ac43706a3c233112fa9b/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=44a8d0b35727556fe4a7ac43706a3c233112fa9b", "patch": "@@ -2559,6 +2559,7 @@ do_function_instantiation (declspecs, declarator, storage)\n     cp_error (\"storage class `%D' applied to template instantiation\",\n \t      storage);\n   mark_function_instantiated (result, extern_p);\n+  repo_template_instantiated (result, extern_p);\n }\n \n void\n@@ -2608,15 +2609,15 @@ do_type_instantiation (name, storage)\n     }\n \n   /* We've already instantiated this.  */\n-  if (CLASSTYPE_EXPLICIT_INSTANTIATION (t) && ! CLASSTYPE_INTERFACE_ONLY (t))\n-    {\n-      if (! extern_p)\n-\tcp_pedwarn (\"multiple explicit instantiation of `%#T'\", t);\n-      return;\n-    }\n+  if (CLASSTYPE_EXPLICIT_INSTANTIATION (t) && ! CLASSTYPE_INTERFACE_ONLY (t)\n+      && extern_p)\n+    return;\n \n   if (! CLASSTYPE_TEMPLATE_SPECIALIZATION (t))\n-    mark_class_instantiated (t, extern_p);\n+    {\n+      mark_class_instantiated (t, extern_p);\n+      repo_template_instantiated (t, extern_p);\n+    }\n   \n   {\n     tree tmp;\n@@ -2632,18 +2633,8 @@ do_type_instantiation (name, storage)\n     tmp = TREE_VEC_ELT (CLASSTYPE_METHOD_VEC (t), 0);\n     for (; tmp; tmp = TREE_CHAIN (tmp))\n       {\n-\tif (DECL_TEMPLATE_SPECIALIZATION (tmp)\n-\t    || (DECL_USE_TEMPLATE (tmp) == 0\n-\t\t&& CLASSTYPE_TEMPLATE_SPECIALIZATION (t)))\n-\t  continue;\n-\n-\tSET_DECL_EXPLICIT_INSTANTIATION (tmp);\n-\tTREE_PUBLIC (tmp) = 1;\n-\tif (! extern_p)\n-\t  {\n-\t    DECL_INTERFACE_KNOWN (tmp) = 1;\n-\t    DECL_NOT_REALLY_EXTERN (tmp) = 1;\n-\t  }\n+\tmark_function_instantiated (tmp, extern_p);\n+\trepo_template_instantiated (tmp, extern_p);\n       }\n \n #if 0"}, {"sha": "6b5f2496948b34d90249619afac1bdbac20fb6f0", "filename": "gcc/cp/repo.c", "status": "modified", "additions": 43, "deletions": 10, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44a8d0b35727556fe4a7ac43706a3c233112fa9b/gcc%2Fcp%2Frepo.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44a8d0b35727556fe4a7ac43706a3c233112fa9b/gcc%2Fcp%2Frepo.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frepo.c?ref=44a8d0b35727556fe4a7ac43706a3c233112fa9b", "patch": "@@ -79,6 +79,19 @@ repo_class_defined (t)\n      tree t;\n {}\n \n+tree\n+repo_get_id (t)\n+     tree t;\n+{\n+  if (TREE_CODE_CLASS (TREE_CODE (t)) == 't')\n+    {\n+      t = TYPE_BINFO_VTABLE (t);\n+      if (t == NULL_TREE)\n+\treturn t;\n+    }\n+  return DECL_ASSEMBLER_NAME (t);\n+}\n+\n /* Note that a template has been used.  If we can see the definition, offer\n    to emit it. */\n \n@@ -91,18 +104,17 @@ repo_template_used (t)\n   if (! flag_use_repository)\n     return;\n \n+  id = repo_get_id (t);\n+  if (id == NULL_TREE)\n+    return;\n+  \n   if (TREE_CODE_CLASS (TREE_CODE (t)) == 't')\n     {\n-      id = TYPE_BINFO_VTABLE (t);\n-      if (id == NULL_TREE)\n-\treturn;\n-      id = DECL_ASSEMBLER_NAME (id);\n       if (IDENTIFIER_REPO_CHOSEN (id))\n \tmark_class_instantiated (t, 0);\n     }\n   else if (TREE_CODE_CLASS (TREE_CODE (t)) == 'd')\n     {\n-      id = DECL_ASSEMBLER_NAME (t);\n       if (IDENTIFIER_REPO_CHOSEN (id))\n \tmark_function_instantiated (t, 0);\n     }\n@@ -157,6 +169,19 @@ repo_tinfo_used (ti)\n {\n }\n \n+void\n+repo_template_instantiated (t, extern_p)\n+     tree t;\n+     int extern_p;\n+{\n+  if (! extern_p)\n+    {\n+      tree id = repo_get_id (t);\n+      if (id)\n+\tIDENTIFIER_REPO_CHOSEN (id) = 1;\n+    }\n+}\n+\n static char *\n save_string (s, len)\n      char *s;\n@@ -270,15 +295,21 @@ init_repo (filename)\n \tcase 'O':\n \t  {\n \t    char *q;\n-\t    tree id;\n+\t    tree id, orig;\n \n \t    for (q = &buf[2]; *q && *q != ' ' && *q != '\\n'; ++q) ;\n \t    q = save_string (&buf[2], q - &buf[2]);\n \t    id = get_identifier (q);\n \n \t    if (buf[0] == 'C')\n-\t      IDENTIFIER_REPO_CHOSEN (id) = 1;\n-\t    original_repo = perm_tree_cons (NULL_TREE, id, original_repo);\n+\t      {\n+\t\tIDENTIFIER_REPO_CHOSEN (id) = 1;\n+\t\torig = integer_one_node;\n+\t      }\n+\t    else\n+\t      orig = NULL_TREE;\n+\n+\t    original_repo = perm_tree_cons (orig, id, original_repo);\n \t  }\n \t  break;\n \tdefault:\n@@ -315,11 +346,13 @@ finish_repo ()\n \n   /* Do we have to write out a new info file?  */\n \n-  /* Are there any old templates that aren't used any longer?  */\n+  /* Are there any old templates that aren't used any longer or that are\n+     newly chosen?  */\n   \n   for (t = original_repo; t; t = TREE_CHAIN (t))\n     {\n-      if (! IDENTIFIER_REPO_USED (TREE_VALUE (t)))\n+      if (! IDENTIFIER_REPO_USED (TREE_VALUE (t))\n+\t  || (! TREE_PURPOSE (t) && IDENTIFIER_REPO_CHOSEN (TREE_VALUE (t))))\n \t{\n \t  repo_changed = 1;\n \t  break;"}, {"sha": "7d7d2ff5a55d0acc70c3811372c7214c4766de34", "filename": "gcc/cp/search.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44a8d0b35727556fe4a7ac43706a3c233112fa9b/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44a8d0b35727556fe4a7ac43706a3c233112fa9b/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=44a8d0b35727556fe4a7ac43706a3c233112fa9b", "patch": "@@ -2427,8 +2427,7 @@ dfs_debug_mark (binfo)\n       while (methods)\n \t{\n \t  if (DECL_VINDEX (methods)\n-\t      && DECL_SAVED_INSNS (methods) == 0\n-\t      && DECL_PENDING_INLINE_INFO (methods) == 0\n+\t      && DECL_THIS_INLINE (methods) == 0\n \t      && DECL_ABSTRACT_VIRTUAL_P (methods) == 0)\n \t    {\n \t      /* Somebody, somewhere is going to have to define this"}, {"sha": "0384d7abff0eefd084f0887fe55d85c286a219be", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44a8d0b35727556fe4a7ac43706a3c233112fa9b/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44a8d0b35727556fe4a7ac43706a3c233112fa9b/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=44a8d0b35727556fe4a7ac43706a3c233112fa9b", "patch": "@@ -2665,8 +2665,8 @@ convert_arguments (return_loc, typelist, values, fndecl, flags)\n \t    /* Convert `float' to `double'.  */\n \t    result = tree_cons (NULL_TREE, convert (double_type_node, val), result);\n \t  else if (TYPE_LANG_SPECIFIC (TREE_TYPE (val))\n-\t\t   && (TYPE_HAS_INIT_REF (TREE_TYPE (val))\n-\t\t       || TYPE_HAS_ASSIGN_REF (TREE_TYPE (val))))\n+\t\t   && (! TYPE_HAS_INIT_REF (TREE_TYPE (val))\n+\t\t       || TYPE_HAS_COMPLEX_INIT_REF (TREE_TYPE (val))))\n \t    {\n \t      cp_warning (\"cannot pass objects of type `%T' through `...'\",\n \t\t\t  TREE_TYPE (val));\n@@ -3147,11 +3147,6 @@ build_binary_op_nodefault (code, orig_op0, orig_op1, error_code)\n \t\t  && tree_int_cst_lt (TYPE_SIZE (type1), TYPE_SIZE (type0)))\n \t\tpedwarn (\"ANSI C++ forbids comparison of `void *' with function pointer\");\n \t    }\n-\t  else if ((TYPE_SIZE (tt0) != 0) != (TYPE_SIZE (tt1) != 0))\n-\t    cp_pedwarn (\"comparison of %scomplete and %scomplete pointers `%T' and `%T'\",\n-\t\t\tTYPE_SIZE (tt0) == 0 ? \"in\" : \"\",\n-\t\t\tTYPE_SIZE (tt1) == 0 ? \"in\" : \"\",\n-\t\t\ttype0, type1);\n \t  else\n \t    cp_pedwarn (\"comparison of distinct pointer types `%T' and `%T' lacks a cast\",\n \t\t\ttype0, type1);\n@@ -5931,6 +5926,13 @@ build_modify_expr (lhs, modifycode, rhs)\n     {\n       int from_array;\n       \n+      if (! comptypes (lhstype, TREE_TYPE (rhs), 0))\n+\t{\n+\t  cp_error (\"incompatible types in assignment of `%T' to `%T'\",\n+\t\t    TREE_TYPE (rhs), lhstype);\n+\t  return error_mark_node;\n+\t}\n+\n       /* Allow array assignment in compiler-generated code.  */\n       if (pedantic && ! DECL_ARTIFICIAL (current_function_decl))\n \tpedwarn (\"ANSI C++ forbids assignment of arrays\");"}]}