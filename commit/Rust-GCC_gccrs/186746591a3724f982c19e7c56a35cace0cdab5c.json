{"sha": "186746591a3724f982c19e7c56a35cace0cdab5c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTg2NzQ2NTkxYTM3MjRmOTgyYzE5ZTdjNTZhMzVjYWNlMGNkYWI1Yw==", "commit": {"author": {"name": "DJ Delorie", "email": "dj@redhat.com", "date": "2009-10-15T02:30:48Z"}, "committer": {"name": "DJ Delorie", "email": "dj@gcc.gnu.org", "date": "2009-10-15T02:30:48Z"}, "message": "h8300.c (F): New.\n\n* config/h8300/h8300.c (F): New.\n(Fpa): New.\n(h8300_emit_stack_adjustment): Call them.\n(push): Likewise.\n(h8300_push_pop): Likewise.\n(h8300_expand_prologue): Likewise.\n* config/h8300/h8300.h (DWARF2_DEBUGGING_INFO): Define.\n(MUST_USE_SJLJ_EXCEPTIONS): Define.\n(INCOMING_RETURN_ADDR_RTX): Define.\n(INCOMING_FRAME_SP_OFFSET): Define.\n(DWARF_CIE_DATA_ALIGNMENT): Define.\n\nFrom-SVN: r152795", "tree": {"sha": "b5da7d3a067b79db6c0829c71b78e400bf64f6b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5da7d3a067b79db6c0829c71b78e400bf64f6b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/186746591a3724f982c19e7c56a35cace0cdab5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/186746591a3724f982c19e7c56a35cace0cdab5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/186746591a3724f982c19e7c56a35cace0cdab5c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/186746591a3724f982c19e7c56a35cace0cdab5c/comments", "author": null, "committer": null, "parents": [{"sha": "5cab70136913d6b6ab56de94620f0d62497c0460", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cab70136913d6b6ab56de94620f0d62497c0460", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5cab70136913d6b6ab56de94620f0d62497c0460"}], "stats": {"total": 85, "additions": 72, "deletions": 13}, "files": [{"sha": "a161100ac55de7681adb2de40f026b9a65b20705", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/186746591a3724f982c19e7c56a35cace0cdab5c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/186746591a3724f982c19e7c56a35cace0cdab5c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=186746591a3724f982c19e7c56a35cace0cdab5c", "patch": "@@ -1,3 +1,17 @@\n+2009-10-14  DJ Delorie  <dj@redhat.com>\n+\t\n+\t* config/h8300/h8300.c (F): New.\n+\t(Fpa): New.\n+\t(h8300_emit_stack_adjustment): Call them.\n+\t(push): Likewise.\n+\t(h8300_push_pop): Likewise.\n+\t(h8300_expand_prologue): Likewise.\n+\t* config/h8300/h8300.h (DWARF2_DEBUGGING_INFO): Define.\n+\t(MUST_USE_SJLJ_EXCEPTIONS): Define.\n+\t(INCOMING_RETURN_ADDR_RTX): Define.\n+\t(INCOMING_FRAME_SP_OFFSET): Define.\n+\t(DWARF_CIE_DATA_ALIGNMENT): Define.\n+\n 2009-10-14  Jakub Jelinek  <jakub@redhat.com>\n \n \t* stor-layout.c (place_field): Don't emit -Wpadded warnings for"}, {"sha": "7bb1e7a6c5c6ed33f91413267a8baf3dedb7ea7e", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 47, "deletions": 13, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/186746591a3724f982c19e7c56a35cace0cdab5c/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/186746591a3724f982c19e7c56a35cace0cdab5c/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=186746591a3724f982c19e7c56a35cace0cdab5c", "patch": "@@ -507,6 +507,32 @@ byte_reg (rtx x, int b)\n \t   && call_used_regs[regno]\t\t\t\t\t\\\n \t   && !current_function_is_leaf)))\n \n+/* We use this to wrap all emitted insns in the prologue.  */\n+static rtx\n+F (rtx x)\n+{\n+  RTX_FRAME_RELATED_P (x) = 1;\n+  return x;\n+}\n+\n+/* Mark all the subexpressions of the PARALLEL rtx PAR as\n+   frame-related.  Return PAR.\n+\n+   dwarf2out.c:dwarf2out_frame_debug_expr ignores sub-expressions of a\n+   PARALLEL rtx other than the first if they do not have the\n+   FRAME_RELATED flag set on them.  */\n+static rtx\n+Fpa (rtx par)\n+{\n+  int len = XVECLEN (par, 0);\n+  int i;\n+\n+  for (i = 0; i < len; i++)\n+    F (XVECEXP (par, 0, i));\n+\n+  return par;\n+}\n+\n /* Output assembly language to FILE for the operation OP with operand size\n    SIZE to adjust the stack pointer.  */\n \n@@ -526,22 +552,27 @@ h8300_emit_stack_adjustment (int sign, HOST_WIDE_INT size)\n       && !(cfun->static_chain_decl != NULL && sign < 0))\n     {\n       rtx r3 = gen_rtx_REG (Pmode, 3);\n-      emit_insn (gen_movhi (r3, GEN_INT (sign * size)));\n-      emit_insn (gen_addhi3 (stack_pointer_rtx,\n-\t\t\t     stack_pointer_rtx, r3));\n+      F (emit_insn (gen_movhi (r3, GEN_INT (sign * size))));\n+      F (emit_insn (gen_addhi3 (stack_pointer_rtx,\n+\t\t\t\tstack_pointer_rtx, r3)));\n     }\n   else\n     {\n       /* The stack adjustment made here is further optimized by the\n \t splitter.  In case of H8/300, the splitter always splits the\n-\t addition emitted here to make the adjustment\n-\t interrupt-safe.  */\n+\t addition emitted here to make the adjustment interrupt-safe.\n+\t FIXME: We don't always tag those, because we don't know what\n+\t the splitter will do.  */\n       if (Pmode == HImode)\n-\temit_insn (gen_addhi3 (stack_pointer_rtx,\n-\t\t\t       stack_pointer_rtx, GEN_INT (sign * size)));\n+\t{\n+\t  rtx x = emit_insn (gen_addhi3 (stack_pointer_rtx,\n+\t\t\t\t\t stack_pointer_rtx, GEN_INT (sign * size)));\n+\t  if (size < 4)\n+\t    F (x);\n+\t}\n       else\n-\temit_insn (gen_addsi3 (stack_pointer_rtx,\n-\t\t\t       stack_pointer_rtx, GEN_INT (sign * size)));\n+\tF (emit_insn (gen_addsi3 (stack_pointer_rtx,\n+\t\t\t\t  stack_pointer_rtx, GEN_INT (sign * size))));\n     }\n }\n \n@@ -591,7 +622,7 @@ push (int rn)\n     x = gen_push_h8300hs_advanced (reg);\n   else\n     x = gen_push_h8300hs_normal (reg);\n-  x = emit_insn (x);\n+  x = F (emit_insn (x));\n   REG_NOTES (x) = gen_rtx_EXPR_LIST (REG_INC, stack_pointer_rtx, 0);\n }\n \n@@ -634,7 +665,7 @@ h8300_push_pop (int regno, int nregs, int pop_p, int return_p)\n {\n   int i, j;\n   rtvec vec;\n-  rtx sp, offset;\n+  rtx sp, offset, x;\n \n   /* See whether we can use a simple push or pop.  */\n   if (!return_p && nregs == 1)\n@@ -685,7 +716,10 @@ h8300_push_pop (int regno, int nregs, int pop_p, int return_p)\n   RTVEC_ELT (vec, i + j) = gen_rtx_SET (VOIDmode, sp,\n \t\t\t\t\tgen_rtx_PLUS (Pmode, sp, offset));\n \n-  emit_insn (gen_rtx_PARALLEL (VOIDmode, vec));\n+  x = gen_rtx_PARALLEL (VOIDmode, vec);\n+  if (!pop_p)\n+    x = Fpa (x);\n+  emit_insn (x);\n }\n \n /* Return true if X has the value sp + OFFSET.  */\n@@ -820,7 +854,7 @@ h8300_expand_prologue (void)\n     {\n       /* Push fp.  */\n       push (HARD_FRAME_POINTER_REGNUM);\n-      emit_move_insn (hard_frame_pointer_rtx, stack_pointer_rtx);\n+      F (emit_move_insn (hard_frame_pointer_rtx, stack_pointer_rtx));\n     }\n \n   /* Push the rest of the registers in ascending order.  */"}, {"sha": "9757afc2de3c4a54c7d9b65d02099d4acb9f9199", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/186746591a3724f982c19e7c56a35cace0cdab5c/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/186746591a3724f982c19e7c56a35cace0cdab5c/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=186746591a3724f982c19e7c56a35cace0cdab5c", "patch": "@@ -147,6 +147,17 @@ extern const char * const *h8_reg_names;\n /* Show we can debug even without a frame pointer.  */\n /* #define CAN_DEBUG_WITHOUT_FP */\n \n+/* We want dwarf2 info available to gdb...  */\n+#define DWARF2_DEBUGGING_INFO        1\n+/* ... but we don't actually support full dwarf2 EH.  */\n+#define MUST_USE_SJLJ_EXCEPTIONS 1\n+\n+/* The return address is pushed on the stack.  */\n+#define INCOMING_RETURN_ADDR_RTX   gen_rtx_MEM (Pmode, gen_rtx_REG (Pmode, STACK_POINTER_REGNUM))\n+#define INCOMING_FRAME_SP_OFFSET   (POINTER_SIZE / 8)\n+\n+#define DWARF_CIE_DATA_ALIGNMENT\t2\n+\n /* Define this if addresses of constant functions\n    shouldn't be put through pseudo regs where they can be cse'd.\n    Desirable on machines where ordinary constants are expensive"}]}