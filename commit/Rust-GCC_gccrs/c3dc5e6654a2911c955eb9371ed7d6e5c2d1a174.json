{"sha": "c3dc5e6654a2911c955eb9371ed7d6e5c2d1a174", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzNkYzVlNjY1NGEyOTExYzk1NWViOTM3MWVkN2Q2ZTVjMmQxYTE3NA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-05-26T11:02:27Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-05-26T11:02:27Z"}, "message": "caller-save.c (init_caller_save): Base temporary register numbers on LAST_VIRTUAL_REGISTER + 1 rather than...\n\ngcc/\n\t* caller-save.c (init_caller_save): Base temporary register numbers\n\ton LAST_VIRTUAL_REGISTER + 1 rather than FIRST_PSEUDO_REGISTER.\n\t* cfgloopanal.c (init_set_costs): Likewise.\n\t* dojump.c (prefer_and_bit_test): Likewise.\n\t* expr.c (init_expr_target): Likewise.\n\t* ira.c (setup_prohibited_mode_move_regs): Likewise.\n\t* lower-subreg.c (init_lower_subreg): Likewise.\n\t* postreload.c (reload_cse_regs_1): Likewise.\n\nFrom-SVN: r223688", "tree": {"sha": "dba2c286c477be2bf4c71b98ce3dda560e91b05a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dba2c286c477be2bf4c71b98ce3dda560e91b05a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c3dc5e6654a2911c955eb9371ed7d6e5c2d1a174", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3dc5e6654a2911c955eb9371ed7d6e5c2d1a174", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3dc5e6654a2911c955eb9371ed7d6e5c2d1a174", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3dc5e6654a2911c955eb9371ed7d6e5c2d1a174/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "851ee5f43c954f1831ae23ec45347ce5441ebab5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/851ee5f43c954f1831ae23ec45347ce5441ebab5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/851ee5f43c954f1831ae23ec45347ce5441ebab5"}], "stats": {"total": 35, "additions": 23, "deletions": 12}, "files": [{"sha": "d4107ca584c93e8aef253d19078ed9f143cc92dd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3dc5e6654a2911c955eb9371ed7d6e5c2d1a174/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3dc5e6654a2911c955eb9371ed7d6e5c2d1a174/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c3dc5e6654a2911c955eb9371ed7d6e5c2d1a174", "patch": "@@ -1,3 +1,14 @@\n+2015-05-26  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* caller-save.c (init_caller_save): Base temporary register numbers\n+\ton LAST_VIRTUAL_REGISTER + 1 rather than FIRST_PSEUDO_REGISTER.\n+\t* cfgloopanal.c (init_set_costs): Likewise.\n+\t* dojump.c (prefer_and_bit_test): Likewise.\n+\t* expr.c (init_expr_target): Likewise.\n+\t* ira.c (setup_prohibited_mode_move_regs): Likewise.\n+\t* lower-subreg.c (init_lower_subreg): Likewise.\n+\t* postreload.c (reload_cse_regs_1): Likewise.\n+\n 2015-05-26  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* gensupport.h (compute_test_codes): Declare."}, {"sha": "be7be7d739980dd2029cc3e44b4577604003c1dd", "filename": "gcc/caller-save.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3dc5e6654a2911c955eb9371ed7d6e5c2d1a174/gcc%2Fcaller-save.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3dc5e6654a2911c955eb9371ed7d6e5c2d1a174/gcc%2Fcaller-save.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcaller-save.c?ref=c3dc5e6654a2911c955eb9371ed7d6e5c2d1a174", "patch": "@@ -286,7 +286,7 @@ init_caller_save (void)\n      To avoid lots of unnecessary RTL allocation, we construct all the RTL\n      once, then modify the memory and register operands in-place.  */\n \n-  test_reg = gen_rtx_REG (word_mode, FIRST_PSEUDO_REGISTER);\n+  test_reg = gen_rtx_REG (word_mode, LAST_VIRTUAL_REGISTER + 1);\n   test_mem = gen_rtx_MEM (word_mode, address);\n   savepat = gen_rtx_SET (test_mem, test_reg);\n   restpat = gen_rtx_SET (test_reg, test_mem);"}, {"sha": "35c1e8d6ba26f7a946be07c2e2065a180b61fe88", "filename": "gcc/cfgloopanal.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3dc5e6654a2911c955eb9371ed7d6e5c2d1a174/gcc%2Fcfgloopanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3dc5e6654a2911c955eb9371ed7d6e5c2d1a174/gcc%2Fcfgloopanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloopanal.c?ref=c3dc5e6654a2911c955eb9371ed7d6e5c2d1a174", "patch": "@@ -336,9 +336,9 @@ init_set_costs (void)\n {\n   int speed;\n   rtx_insn *seq;\n-  rtx reg1 = gen_raw_REG (SImode, FIRST_PSEUDO_REGISTER);\n-  rtx reg2 = gen_raw_REG (SImode, FIRST_PSEUDO_REGISTER + 1);\n-  rtx addr = gen_raw_REG (Pmode, FIRST_PSEUDO_REGISTER + 2);\n+  rtx reg1 = gen_raw_REG (SImode, LAST_VIRTUAL_REGISTER + 1);\n+  rtx reg2 = gen_raw_REG (SImode, LAST_VIRTUAL_REGISTER + 2);\n+  rtx addr = gen_raw_REG (Pmode, LAST_VIRTUAL_REGISTER + 3);\n   rtx mem = validize_mem (gen_rtx_MEM (SImode, addr));\n   unsigned i;\n "}, {"sha": "d788fe090561805afd2d0974665e38bcfe417f2a", "filename": "gcc/dojump.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3dc5e6654a2911c955eb9371ed7d6e5c2d1a174/gcc%2Fdojump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3dc5e6654a2911c955eb9371ed7d6e5c2d1a174/gcc%2Fdojump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdojump.c?ref=c3dc5e6654a2911c955eb9371ed7d6e5c2d1a174", "patch": "@@ -198,7 +198,7 @@ prefer_and_bit_test (machine_mode mode, int bitnum)\n     {\n       /* Set up rtxes for the two variations.  Use NULL as a placeholder\n \t for the BITNUM-based constants.  */\n-      and_reg = gen_rtx_REG (mode, FIRST_PSEUDO_REGISTER);\n+      and_reg = gen_rtx_REG (mode, LAST_VIRTUAL_REGISTER + 1);\n       and_test = gen_rtx_AND (mode, and_reg, NULL);\n       shift_test = gen_rtx_AND (mode, gen_rtx_ASHIFTRT (mode, and_reg, NULL),\n \t\t\t\tconst1_rtx);"}, {"sha": "a613bebe824d9eef548052726b66edfa64c27670", "filename": "gcc/expr.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3dc5e6654a2911c955eb9371ed7d6e5c2d1a174/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3dc5e6654a2911c955eb9371ed7d6e5c2d1a174/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=c3dc5e6654a2911c955eb9371ed7d6e5c2d1a174", "patch": "@@ -199,7 +199,7 @@ init_expr_target (void)\n \n   /* A scratch register we can modify in-place below to avoid\n      useless RTL allocations.  */\n-  reg = gen_rtx_REG (word_mode, FIRST_PSEUDO_REGISTER);\n+  reg = gen_rtx_REG (word_mode, LAST_VIRTUAL_REGISTER + 1);\n \n   insn = rtx_alloc (INSN);\n   pat = gen_rtx_SET (NULL_RTX, NULL_RTX);\n@@ -249,7 +249,7 @@ init_expr_target (void)\n \t  }\n     }\n \n-  mem = gen_rtx_MEM (VOIDmode, gen_raw_REG (Pmode, FIRST_PSEUDO_REGISTER));\n+  mem = gen_rtx_MEM (VOIDmode, gen_raw_REG (Pmode, LAST_VIRTUAL_REGISTER + 1));\n \n   for (mode = GET_CLASS_NARROWEST_MODE (MODE_FLOAT); mode != VOIDmode;\n        mode = GET_MODE_WIDER_MODE (mode))"}, {"sha": "804d162f0f012647e59809a5bd3ee7840c8ff2f3", "filename": "gcc/ira.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3dc5e6654a2911c955eb9371ed7d6e5c2d1a174/gcc%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3dc5e6654a2911c955eb9371ed7d6e5c2d1a174/gcc%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.c?ref=c3dc5e6654a2911c955eb9371ed7d6e5c2d1a174", "patch": "@@ -1767,8 +1767,8 @@ setup_prohibited_mode_move_regs (void)\n   if (ira_prohibited_mode_move_regs_initialized_p)\n     return;\n   ira_prohibited_mode_move_regs_initialized_p = true;\n-  test_reg1 = gen_rtx_REG (word_mode, FIRST_PSEUDO_REGISTER);\n-  test_reg2 = gen_rtx_REG (word_mode, FIRST_PSEUDO_REGISTER);\n+  test_reg1 = gen_rtx_REG (word_mode, LAST_VIRTUAL_REGISTER + 1);\n+  test_reg2 = gen_rtx_REG (word_mode, LAST_VIRTUAL_REGISTER + 2);\n   move_pat = gen_rtx_SET (test_reg1, test_reg2);\n   move_insn = gen_rtx_INSN (VOIDmode, 0, 0, 0, move_pat, 0, -1, 0);\n   for (i = 0; i < NUM_MACHINE_MODES; i++)"}, {"sha": "095b5696e712ffb4be70305c4c557d27d3001e0c", "filename": "gcc/lower-subreg.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3dc5e6654a2911c955eb9371ed7d6e5c2d1a174/gcc%2Flower-subreg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3dc5e6654a2911c955eb9371ed7d6e5c2d1a174/gcc%2Flower-subreg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flower-subreg.c?ref=c3dc5e6654a2911c955eb9371ed7d6e5c2d1a174", "patch": "@@ -295,8 +295,8 @@ init_lower_subreg (void)\n \n   twice_word_mode = GET_MODE_2XWIDER_MODE (word_mode);\n \n-  rtxes.target = gen_rtx_REG (word_mode, FIRST_PSEUDO_REGISTER);\n-  rtxes.source = gen_rtx_REG (word_mode, FIRST_PSEUDO_REGISTER + 1);\n+  rtxes.target = gen_rtx_REG (word_mode, LAST_VIRTUAL_REGISTER + 1);\n+  rtxes.source = gen_rtx_REG (word_mode, LAST_VIRTUAL_REGISTER + 2);\n   rtxes.set = gen_rtx_SET (rtxes.target, rtxes.source);\n   rtxes.zext = gen_rtx_ZERO_EXTEND (twice_word_mode, rtxes.source);\n   rtxes.shift = gen_rtx_ASHIFT (twice_word_mode, rtxes.source, const0_rtx);"}, {"sha": "4d3c26fc7bf264068ca25d6fbee570b1ef558fb6", "filename": "gcc/postreload.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3dc5e6654a2911c955eb9371ed7d6e5c2d1a174/gcc%2Fpostreload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3dc5e6654a2911c955eb9371ed7d6e5c2d1a174/gcc%2Fpostreload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpostreload.c?ref=c3dc5e6654a2911c955eb9371ed7d6e5c2d1a174", "patch": "@@ -234,7 +234,7 @@ reload_cse_regs_1 (void)\n   bool cfg_changed = false;\n   basic_block bb;\n   rtx_insn *insn;\n-  rtx testreg = gen_rtx_REG (word_mode, FIRST_PSEUDO_REGISTER);\n+  rtx testreg = gen_rtx_REG (word_mode, LAST_VIRTUAL_REGISTER + 1);\n \n   cselib_init (CSELIB_RECORD_MEMORY);\n   init_alias_analysis ();"}]}