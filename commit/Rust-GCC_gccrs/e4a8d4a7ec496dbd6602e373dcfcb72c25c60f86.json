{"sha": "e4a8d4a7ec496dbd6602e373dcfcb72c25c60f86", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTRhOGQ0YTdlYzQ5NmRiZDY2MDJlMzczZGNmY2I3MmMyNWM2MGY4Ng==", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@adacore.com", "date": "2019-09-03T06:06:02Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2019-09-03T06:06:02Z"}, "message": "[x86 testsuite] preserve full register across main\n\nThis test uses a call-saved register as a global variable.  It\nattempts to preserve its value across main, but only the lower int\npart is preserved, which is not good enough for x86_64, when the\nruntime that calls main() happens to hold something in the chosen\nregister that is not a zero-extension from the 32-bit value, and\nrightfully expects the full register to remain unchanged when main()\nreturns.\n\n\nfor  gcc/testsuite/ChangeLog\n\n\t* gcc.target/i386/20020616-1.c: Preserve full register across\n\tmain.\n\nFrom-SVN: r275329", "tree": {"sha": "1aaf91dc17af50f66d50dcf207aecf120365ef84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1aaf91dc17af50f66d50dcf207aecf120365ef84"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e4a8d4a7ec496dbd6602e373dcfcb72c25c60f86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4a8d4a7ec496dbd6602e373dcfcb72c25c60f86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4a8d4a7ec496dbd6602e373dcfcb72c25c60f86", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4a8d4a7ec496dbd6602e373dcfcb72c25c60f86/comments", "author": null, "committer": null, "parents": [{"sha": "97d6a7c80e63563390bda35b1e7126b48e3a51f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97d6a7c80e63563390bda35b1e7126b48e3a51f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97d6a7c80e63563390bda35b1e7126b48e3a51f3"}], "stats": {"total": 19, "additions": 14, "deletions": 5}, "files": [{"sha": "efb25dff085b48e786a724be3c6ed52bfb8c2706", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4a8d4a7ec496dbd6602e373dcfcb72c25c60f86/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4a8d4a7ec496dbd6602e373dcfcb72c25c60f86/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e4a8d4a7ec496dbd6602e373dcfcb72c25c60f86", "patch": "@@ -1,3 +1,8 @@\n+2019-09-03  Alexandre Oliva <oliva@adacore.com>\n+\n+\t* gcc.target/i386/20020616-1.c: Preserve full register across\n+\tmain.\n+\n 2019-09-02  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/91589"}, {"sha": "48dea27956ce2495f5a04f1e91e05d8dfb554dea", "filename": "gcc/testsuite/gcc.target/i386/20020616-1.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4a8d4a7ec496dbd6602e373dcfcb72c25c60f86/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F20020616-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4a8d4a7ec496dbd6602e373dcfcb72c25c60f86/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F20020616-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F20020616-1.c?ref=e4a8d4a7ec496dbd6602e373dcfcb72c25c60f86", "patch": "@@ -2,12 +2,16 @@\n /* { dg-do run } */\n /* { dg-options \"-O2\" } */\n \n+/* We need this type to be as wide as the register chosen below, so\n+   that, when we preserve it across main, we preserve all of it.  */\n+typedef int __attribute__ ((mode (__word__))) reg_type;\n+\n #if !__PIC__\n-register int k asm(\"%ebx\");\n+register reg_type k asm(\"%ebx\");\n #elif __amd64\n-register int k asm(\"%r12\");\n+register reg_type k asm(\"%r12\");\n #else\n-register int k asm(\"%esi\");\n+register reg_type k asm(\"%esi\");\n #endif\n \n void __attribute__((noinline))\n@@ -18,7 +22,7 @@ foo()\n \n void test()\n {\n-  int i;\n+  reg_type i;\n   for (i = 0; i < 10; i += k)\n     {\n       k = 0;\n@@ -28,7 +32,7 @@ void test()\n \n int main()\n {\n-  int old = k;\n+  reg_type old = k;\n   test();\n   k = old;\n   return 0;"}]}