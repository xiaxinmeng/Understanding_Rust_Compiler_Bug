{"sha": "6bcca5f642eb950a3cef024ea49a35e4792306f6", "node_id": "C_kwDOANBUbNoAKDZiY2NhNWY2NDJlYjk1MGEzY2VmMDI0ZWE0OWEzNWU0NzkyMzA2ZjY", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-09-12T18:14:24Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-09-12T19:46:59Z"}, "message": "c++: cast to array of unknown bound [PR93259]\n\nWe already know to treat a variable of array-of-unknown-bound type as\ndependent, we should do the same for arr{}.\n\n\tPR c++/93259\n\ngcc/cp/ChangeLog:\n\n\t* pt.cc (type_dependent_expression_p): Treat a compound\n\tliteral of array-of-unknown-bound type like a variable.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp0x/initlist-array17.C: New test.", "tree": {"sha": "b3dd30c6c6ed9248c4b22d0a19a2711fa0c6e2a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b3dd30c6c6ed9248c4b22d0a19a2711fa0c6e2a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6bcca5f642eb950a3cef024ea49a35e4792306f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bcca5f642eb950a3cef024ea49a35e4792306f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bcca5f642eb950a3cef024ea49a35e4792306f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bcca5f642eb950a3cef024ea49a35e4792306f6/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "936efcac733fe49e5ea9e636403e5941f24ff1b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/936efcac733fe49e5ea9e636403e5941f24ff1b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/936efcac733fe49e5ea9e636403e5941f24ff1b3"}], "stats": {"total": 43, "additions": 40, "deletions": 3}, "files": [{"sha": "31e3e3910989b3678c55a556cfb763d216b30778", "filename": "gcc/cp/pt.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bcca5f642eb950a3cef024ea49a35e4792306f6/gcc%2Fcp%2Fpt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bcca5f642eb950a3cef024ea49a35e4792306f6/gcc%2Fcp%2Fpt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.cc?ref=6bcca5f642eb950a3cef024ea49a35e4792306f6", "patch": "@@ -28082,11 +28082,11 @@ type_dependent_expression_p (tree expression)\n      If the array has no length and has an initializer, it must be that\n      we couldn't determine its length in cp_complete_array_type because\n      it is dependent.  */\n-  if (VAR_P (expression)\n+  if (((VAR_P (expression) && DECL_INITIAL (expression))\n+       || COMPOUND_LITERAL_P (expression))\n       && TREE_TYPE (expression) != NULL_TREE\n       && TREE_CODE (TREE_TYPE (expression)) == ARRAY_TYPE\n-      && !TYPE_DOMAIN (TREE_TYPE (expression))\n-      && DECL_INITIAL (expression))\n+      && !TYPE_DOMAIN (TREE_TYPE (expression)))\n    return true;\n \n   /* Pull a FUNCTION_DECL out of a BASELINK if we can.  */"}, {"sha": "c4284a7b3913007e82b71c0f1241d5c95f18cf78", "filename": "gcc/testsuite/g++.dg/cpp0x/initlist-array17.C", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bcca5f642eb950a3cef024ea49a35e4792306f6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist-array17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bcca5f642eb950a3cef024ea49a35e4792306f6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist-array17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist-array17.C?ref=6bcca5f642eb950a3cef024ea49a35e4792306f6", "patch": "@@ -0,0 +1,37 @@\n+// PR c++/93259\n+// { dg-do compile { target c++11 } }\n+\n+template <class T, class U> struct is_same;\n+template <class T> struct is_same<T,T> { };\n+\n+using Array = int[];\n+\n+template <typename ...Ts>\n+void bar1(Ts ...)\n+{\n+  auto && array = Array{ 1, 2, 3 };\n+\n+  is_same<int (&&)[3], decltype(array)>{}; // this fails, deduces array as int (&&) []\n+}\n+\n+template <typename T>\n+void bar2()\n+{\n+  auto && array = Array{ 1, 2, 3 };\n+\n+  is_same<int (&&)[3], decltype(array)>{};  // this fails, deduces array as int (&&) []\n+}\n+\n+void bar3()\n+{\n+  auto && array = Array{ 1, 2, 3 };\n+\n+  is_same<int (&&)[3], decltype(array)>{}; // OK\n+}\n+\n+int main()\n+{\n+  bar1<int>(1, 2, 3);\n+  bar2<int>();\n+  bar3();\n+}"}]}