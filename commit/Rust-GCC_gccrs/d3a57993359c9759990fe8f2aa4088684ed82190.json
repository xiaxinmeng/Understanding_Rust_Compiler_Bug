{"sha": "d3a57993359c9759990fe8f2aa4088684ed82190", "node_id": "C_kwDOANBUbNoAKGQzYTU3OTkzMzU5Yzk3NTk5OTBmZThmMmFhNDA4ODY4NGVkODIxOTA", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-12-17T10:45:02Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-01-17T16:58:12Z"}, "message": "diagnostic: avoid repeating include path\n\nWhen a sequence of diagnostic messages bounces back and forth repeatedly\nbetween two includes, as with\n\n #include <map>\n std::map<const char*, const char*> m (\"123\", \"456\");\n\nThe output is quite a bit longer than necessary because we dump the include\npath each time it changes.  I'd think we could print the include path once\nfor each header file, and then expect that the user can look earlier in the\noutput if they're wondering.\n\ngcc/ChangeLog:\n\n\t* diagnostic.h (struct diagnostic_context): Add includes_seen.\n\t* diagnostic.c (diagnostic_initialize): Initialize it.\n\t(diagnostic_finish): Clean it up.\n\t(includes_seen): New function.\n\t(diagnostic_report_current_module): Use it.\n\ngcc/testsuite/ChangeLog:\n\n\t* c-c++-common/cpp/line-2.c: Only expect includes once.\n\t* c-c++-common/cpp/line-3.c: Likewise.", "tree": {"sha": "82399b3aeabcffc665f0808ade49811306a04557", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/82399b3aeabcffc665f0808ade49811306a04557"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d3a57993359c9759990fe8f2aa4088684ed82190", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3a57993359c9759990fe8f2aa4088684ed82190", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3a57993359c9759990fe8f2aa4088684ed82190", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3a57993359c9759990fe8f2aa4088684ed82190/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "450c85b81f4dd67bf6211d307afdc0f3c07ef44f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/450c85b81f4dd67bf6211d307afdc0f3c07ef44f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/450c85b81f4dd67bf6211d307afdc0f3c07ef44f"}], "stats": {"total": 44, "additions": 40, "deletions": 4}, "files": [{"sha": "5c02ff05882cee7f42dc32aa9a81291319b94700", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 34, "deletions": 2, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3a57993359c9759990fe8f2aa4088684ed82190/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3a57993359c9759990fe8f2aa4088684ed82190/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=d3a57993359c9759990fe8f2aa4088684ed82190", "patch": "@@ -237,6 +237,7 @@ diagnostic_initialize (diagnostic_context *context, int n_opts)\n   context->begin_group_cb = NULL;\n   context->end_group_cb = NULL;\n   context->final_cb = default_diagnostic_final_cb;\n+  context->includes_seen = NULL;\n }\n \n /* Maybe initialize the color support. We require clients to do this\n@@ -329,6 +330,12 @@ diagnostic_finish (diagnostic_context *context)\n       delete context->edit_context_ptr;\n       context->edit_context_ptr = NULL;\n     }\n+\n+  if (context->includes_seen)\n+    {\n+      delete context->includes_seen;\n+      context->includes_seen = nullptr;\n+    }\n }\n \n /* Initialize DIAGNOSTIC, where the message MSG has already been\n@@ -700,6 +707,31 @@ set_last_module (diagnostic_context *context, const line_map_ordinary *map)\n   context->last_module = map;\n }\n \n+/* Only dump the \"In file included from...\" stack once for each file.  */\n+\n+static bool\n+includes_seen (diagnostic_context *context, const line_map_ordinary *map)\n+{\n+  /* No include path for main.  */\n+  if (MAIN_FILE_P (map))\n+    return true;\n+\n+  /* Always identify C++ modules, at least for now.  */\n+  auto probe = map;\n+  if (linemap_check_ordinary (map)->reason == LC_RENAME)\n+    /* The module source file shows up as LC_RENAME inside LC_MODULE.  */\n+    probe = linemap_included_from_linemap (line_table, map);\n+  if (MAP_MODULE_P (probe))\n+    return false;\n+\n+  if (!context->includes_seen)\n+    context->includes_seen = new hash_set<location_t, false, location_hash>;\n+\n+  /* Hash the location of the #include directive to better handle files\n+     that are included multiple times with different macros defined.  */\n+  return context->includes_seen->add (linemap_included_from (map));\n+}\n+\n void\n diagnostic_report_current_module (diagnostic_context *context, location_t where)\n {\n@@ -721,7 +753,7 @@ diagnostic_report_current_module (diagnostic_context *context, location_t where)\n   if (map && last_module_changed_p (context, map))\n     {\n       set_last_module (context, map);\n-      if (! MAIN_FILE_P (map))\n+      if (!includes_seen (context, map))\n \t{\n \t  bool first = true, need_inc = true, was_module = MAP_MODULE_P (map);\n \t  expanded_location s = {};\n@@ -760,7 +792,7 @@ diagnostic_report_current_module (diagnostic_context *context, location_t where)\n \t\t\t   \"locus\", s.file, line_col);\n \t      first = false, need_inc = was_module, was_module = is_module;\n \t    }\n-\t  while (! MAIN_FILE_P (map));\n+\t  while (!includes_seen (context, map));\n \t  pp_verbatim (context->printer, \":\");\n \t  pp_newline (context->printer);\n \t}"}, {"sha": "ccaa33b581721b1ef4b13071d5e816d40dff13b4", "filename": "gcc/diagnostic.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3a57993359c9759990fe8f2aa4088684ed82190/gcc%2Fdiagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3a57993359c9759990fe8f2aa4088684ed82190/gcc%2Fdiagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.h?ref=d3a57993359c9759990fe8f2aa4088684ed82190", "patch": "@@ -387,6 +387,10 @@ struct diagnostic_context\n      the BLOCK_SUPERCONTEXT() chain hanging off the LOCATION_BLOCK()\n      of a diagnostic's location.  */\n   void (*set_locations_cb)(diagnostic_context *, diagnostic_info *);\n+\n+  /* Include files that diagnostic_report_current_module has already listed the\n+     include path for.  */\n+  hash_set<location_t, false, location_hash> *includes_seen;\n };\n \n static inline void"}, {"sha": "364ad0e39318871ffb282fa0612c330aa029bd79", "filename": "gcc/testsuite/c-c++-common/cpp/line-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3a57993359c9759990fe8f2aa4088684ed82190/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fline-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3a57993359c9759990fe8f2aa4088684ed82190/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fline-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fline-2.c?ref=d3a57993359c9759990fe8f2aa4088684ed82190", "patch": "@@ -8,4 +8,4 @@ int line4;\n \n // { dg-regexp {In file included from <command-line>:\\n[^\\n]*/line-2.h:4:2: error: #error wrong\\n} }\n \n-// { dg-regexp {[^\\n]*/line-2.c:3:11: error: macro \"bill\" passed 1 arguments, but takes just 0\\nIn file included from <command-line>:\\n[^\\n]*/line-2.h:3: note: macro \"bill\" defined here\\n} }\n+// { dg-regexp {[^\\n]*/line-2.c:3:11: error: macro \"bill\" passed 1 arguments, but takes just 0\\n[^\\n]*/line-2.h:3: note: macro \"bill\" defined here\\n} }"}, {"sha": "b254ae400419c1cf6d07698c95621eea2854b620", "filename": "gcc/testsuite/c-c++-common/cpp/line-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3a57993359c9759990fe8f2aa4088684ed82190/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fline-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3a57993359c9759990fe8f2aa4088684ed82190/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fline-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fline-3.c?ref=d3a57993359c9759990fe8f2aa4088684ed82190", "patch": "@@ -15,6 +15,6 @@ int line4;\n \n // { dg-regexp {In file included from <command-line>:\\n[^\\n]*/line-2.h:4:2: error: #error wrong\\n} }\n \n-// { dg-regexp {[^\\n]*/line-3.c:3:11: error: macro \"bill\" passed 1 arguments, but takes just 0\\nIn file included from <command-line>:\\n[^\\n]*/line-2.h:3: note: macro \"bill\" defined here\\n} }\n+// { dg-regexp {[^\\n]*/line-3.c:3:11: error: macro \"bill\" passed 1 arguments, but takes just 0\\n[^\\n]*/line-2.h:3: note: macro \"bill\" defined here\\n} }\n \n // { dg-options \"-fpreprocessed -fdirectives-only\" }"}]}