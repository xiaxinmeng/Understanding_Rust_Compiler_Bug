{"sha": "1a2d7586b03493b0b90d251ff94ce99d7bccd786", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWEyZDc1ODZiMDM0OTNiMGI5MGQyNTFmZjk0Y2U5OWQ3YmNjZDc4Ng==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2015-12-11T21:58:48Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2015-12-11T21:58:48Z"}, "message": "re PR middle-end/68215 (FAIL: c-c++-common/opaque-vector.c  -std=c++11 (internal compiler error))\n\n\tPR middle-end/68215\n\t* tree-vect-generic.c (tree_vec_extract): Remove GSI parameter.\n\tDo not gimplify the result.\n\t(do_unop): Adjust call to tree_vec_extract.\n\t(do_binop): Likewise.\n\t(do_compare): Likewise.\n\t(do_plus_minus): Likewise.\n\t(do_negate): Likewise.\n\t(expand_vector_condition): Likewise.\n\t(do_cond): Likewise.\n\nFrom-SVN: r231575", "tree": {"sha": "e1469781a1193c2facc323c87f7e08a73370f2cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e1469781a1193c2facc323c87f7e08a73370f2cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a2d7586b03493b0b90d251ff94ce99d7bccd786", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a2d7586b03493b0b90d251ff94ce99d7bccd786", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a2d7586b03493b0b90d251ff94ce99d7bccd786", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a2d7586b03493b0b90d251ff94ce99d7bccd786/comments", "author": null, "committer": null, "parents": [{"sha": "f3d7dd52a6e8c379f7f90cb547e2cd186fa07653", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3d7dd52a6e8c379f7f90cb547e2cd186fa07653", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3d7dd52a6e8c379f7f90cb547e2cd186fa07653"}], "stats": {"total": 62, "additions": 36, "deletions": 26}, "files": [{"sha": "33b08569dff219adfc1634e2d0363e3ab381e919", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a2d7586b03493b0b90d251ff94ce99d7bccd786/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a2d7586b03493b0b90d251ff94ce99d7bccd786/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1a2d7586b03493b0b90d251ff94ce99d7bccd786", "patch": "@@ -1,3 +1,16 @@\n+2015-12-11  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR middle-end/68215\n+\t* tree-vect-generic.c (tree_vec_extract): Remove GSI parameter.\n+\tDo not gimplify the result.\n+\t(do_unop): Adjust call to tree_vec_extract.\n+\t(do_binop): Likewise.\n+\t(do_compare): Likewise.\n+\t(do_plus_minus): Likewise.\n+\t(do_negate): Likewise.\n+\t(expand_vector_condition): Likewise.\n+\t(do_cond): Likewise.\n+\n 2015-12-11  Nathan Sidwell  <nathan@acm.org>\n \n \t* config/nvptx/nvptx.h (RETURN_ADDR_REGNO): Delete.\n@@ -19,7 +32,6 @@\n \tPR target/26427\n \tPR target/33120\n \tPR testsuite/35710\n-\n \t* config/darwin.c (darwin_use_anchors_for_symbol_p): Fix indention and\n \ttrailing whitespace.\n "}, {"sha": "9dc9a7bcea72bfe58c8e015975addcd60eeaa5d3", "filename": "gcc/tree-vect-generic.c", "status": "modified", "additions": 23, "deletions": 25, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a2d7586b03493b0b90d251ff94ce99d7bccd786/gcc%2Ftree-vect-generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a2d7586b03493b0b90d251ff94ce99d7bccd786/gcc%2Ftree-vect-generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-generic.c?ref=1a2d7586b03493b0b90d251ff94ce99d7bccd786", "patch": "@@ -103,8 +103,7 @@ typedef tree (*elem_op_func) (gimple_stmt_iterator *,\n \t\t\t      tree);\n \n static inline tree\n-tree_vec_extract (gimple_stmt_iterator *gsi, tree type,\n-\t\t  tree t, tree bitsize, tree bitpos)\n+tree_vec_extract (tree type, tree t, tree bitsize, tree bitpos)\n {\n   if (TREE_CODE (t) == SSA_NAME)\n     {\n@@ -115,30 +114,29 @@ tree_vec_extract (gimple_stmt_iterator *gsi, tree type,\n \t\t  && gimple_assign_rhs_code (def_stmt) == CONSTRUCTOR)))\n \tt = gimple_assign_rhs1 (def_stmt);\n     }\n+\n   if (bitpos)\n     {\n       if (TREE_CODE (type) == BOOLEAN_TYPE)\n \t{\n \t  tree itype\n \t    = build_nonstandard_integer_type (tree_to_uhwi (bitsize), 0);\n-\t  tree field = gimplify_build3 (gsi, BIT_FIELD_REF, itype, t,\n-\t\t\t\t\tbitsize, bitpos);\n-\t  return gimplify_build2 (gsi, NE_EXPR, type, field,\n-\t\t\t\t  build_zero_cst (itype));\n+\t  tree field = fold_build3 (BIT_FIELD_REF, itype, t, bitsize, bitpos);\n+\t  return fold_build2 (NE_EXPR, type, field, build_zero_cst (itype));\n \t}\n-      else\n-\treturn gimplify_build3 (gsi, BIT_FIELD_REF, type, t, bitsize, bitpos);\n+ \n+      return fold_build3 (BIT_FIELD_REF, type, t, bitsize, bitpos);\n     }\n-  else\n-    return gimplify_build1 (gsi, VIEW_CONVERT_EXPR, type, t);\n+\n+  return fold_build1 (VIEW_CONVERT_EXPR, type, t);\n }\n \n static tree\n do_unop (gimple_stmt_iterator *gsi, tree inner_type, tree a,\n \t tree b ATTRIBUTE_UNUSED, tree bitpos, tree bitsize,\n \t enum tree_code code, tree type ATTRIBUTE_UNUSED)\n {\n-  a = tree_vec_extract (gsi, inner_type, a, bitsize, bitpos);\n+  a = tree_vec_extract (inner_type, a, bitsize, bitpos);\n   return gimplify_build1 (gsi, code, inner_type, a);\n }\n \n@@ -148,9 +146,9 @@ do_binop (gimple_stmt_iterator *gsi, tree inner_type, tree a, tree b,\n \t  tree type ATTRIBUTE_UNUSED)\n {\n   if (TREE_CODE (TREE_TYPE (a)) == VECTOR_TYPE)\n-    a = tree_vec_extract (gsi, inner_type, a, bitsize, bitpos);\n+    a = tree_vec_extract (inner_type, a, bitsize, bitpos);\n   if (TREE_CODE (TREE_TYPE (b)) == VECTOR_TYPE)\n-    b = tree_vec_extract (gsi, inner_type, b, bitsize, bitpos);\n+    b = tree_vec_extract (inner_type, b, bitsize, bitpos);\n   return gimplify_build2 (gsi, code, inner_type, a, b);\n }\n \n@@ -169,8 +167,8 @@ do_compare (gimple_stmt_iterator *gsi, tree inner_type, tree a, tree b,\n   tree cst_true = build_all_ones_cst (stype);\n   tree cmp;\n \n-  a = tree_vec_extract (gsi, inner_type, a, bitsize, bitpos);\n-  b = tree_vec_extract (gsi, inner_type, b, bitsize, bitpos);\n+  a = tree_vec_extract (inner_type, a, bitsize, bitpos);\n+  b = tree_vec_extract (inner_type, b, bitsize, bitpos);\n \n   cmp = build2 (code, boolean_type_node, a, b);\n   return gimplify_build3 (gsi, COND_EXPR, stype, cmp, cst_true, cst_false);\n@@ -202,8 +200,8 @@ do_plus_minus (gimple_stmt_iterator *gsi, tree word_type, tree a, tree b,\n   low_bits = build_replicated_const (word_type, inner_type, max >> 1);\n   high_bits = build_replicated_const (word_type, inner_type, max & ~(max >> 1));\n \n-  a = tree_vec_extract (gsi, word_type, a, bitsize, bitpos);\n-  b = tree_vec_extract (gsi, word_type, b, bitsize, bitpos);\n+  a = tree_vec_extract (word_type, a, bitsize, bitpos);\n+  b = tree_vec_extract (word_type, b, bitsize, bitpos);\n \n   signs = gimplify_build2 (gsi, BIT_XOR_EXPR, word_type, a, b);\n   b_low = gimplify_build2 (gsi, BIT_AND_EXPR, word_type, b, low_bits);\n@@ -235,7 +233,7 @@ do_negate (gimple_stmt_iterator *gsi, tree word_type, tree b,\n   low_bits = build_replicated_const (word_type, inner_type, max >> 1);\n   high_bits = build_replicated_const (word_type, inner_type, max & ~(max >> 1));\n \n-  b = tree_vec_extract (gsi, word_type, b, bitsize, bitpos);\n+  b = tree_vec_extract (word_type, b, bitsize, bitpos);\n \n   b_low = gimplify_build2 (gsi, BIT_AND_EXPR, word_type, b, low_bits);\n   signs = gimplify_build1 (gsi, BIT_NOT_EXPR, word_type, b);\n@@ -891,16 +889,16 @@ expand_vector_condition (gimple_stmt_iterator *gsi)\n        i++, index = int_const_binop (PLUS_EXPR, index, width))\n     {\n       tree aa, result;\n-      tree bb = tree_vec_extract (gsi, inner_type, b, width, index);\n-      tree cc = tree_vec_extract (gsi, inner_type, c, width, index);\n+      tree bb = tree_vec_extract (inner_type, b, width, index);\n+      tree cc = tree_vec_extract (inner_type, c, width, index);\n       if (a_is_comparison)\n \t{\n-\t  tree aa1 = tree_vec_extract (gsi, comp_inner_type, a1, width, index);\n-\t  tree aa2 = tree_vec_extract (gsi, comp_inner_type, a2, width, index);\n+\t  tree aa1 = tree_vec_extract (comp_inner_type, a1, width, index);\n+\t  tree aa2 = tree_vec_extract (comp_inner_type, a2, width, index);\n \t  aa = build2 (TREE_CODE (a), cond_type, aa1, aa2);\n \t}\n       else\n-\taa = tree_vec_extract (gsi, cond_type, a, width, index);\n+\taa = tree_vec_extract (cond_type, a, width, index);\n       result = gimplify_build3 (gsi, COND_EXPR, inner_type, aa, bb, cc);\n       constructor_elt ce = {NULL_TREE, result};\n       v->quick_push (ce);\n@@ -1449,9 +1447,9 @@ do_cond (gimple_stmt_iterator *gsi, tree inner_type, tree a, tree b,\n \t tree type ATTRIBUTE_UNUSED)\n {\n   if (TREE_CODE (TREE_TYPE (a)) == VECTOR_TYPE)\n-    a = tree_vec_extract (gsi, inner_type, a, bitsize, bitpos);\n+    a = tree_vec_extract (inner_type, a, bitsize, bitpos);\n   if (TREE_CODE (TREE_TYPE (b)) == VECTOR_TYPE)\n-    b = tree_vec_extract (gsi, inner_type, b, bitsize, bitpos);\n+    b = tree_vec_extract (inner_type, b, bitsize, bitpos);\n   tree cond = gimple_assign_rhs1 (gsi_stmt (*gsi));\n   return gimplify_build3 (gsi, code, inner_type, unshare_expr (cond), a, b);\n }"}]}