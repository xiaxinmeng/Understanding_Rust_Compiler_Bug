{"sha": "85a43114c926498ce981a5366e19acf79834b059", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODVhNDMxMTRjOTI2NDk4Y2U5ODFhNTM2NmUxOWFjZjc5ODM0YjA1OQ==", "commit": {"author": {"name": "Zdenek Dvorak", "email": "dvorakz@suse.cz", "date": "2005-11-12T23:27:13Z"}, "committer": {"name": "Zdenek Dvorak", "email": "rakdver@gcc.gnu.org", "date": "2005-11-12T23:27:13Z"}, "message": "tree-ssa-loop-ivopts.c (get_address_cost): Prevent splitting addressing modes during calculation of costs.\n\n\t* tree-ssa-loop-ivopts.c (get_address_cost): Prevent splitting\n\taddressing modes during calculation of costs.\n\n\t* testsuite/gcc.dg/tree-ssa/loop-2.c: Fix outcome.\n\t* testsuite/gcc.dg/tree-ssa/loop-3.c: Change type of loop control\n\tvariable.\n\nFrom-SVN: r106842", "tree": {"sha": "469dc7ab23a0f8d94e352c61f2fe1894d53d850f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/469dc7ab23a0f8d94e352c61f2fe1894d53d850f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/85a43114c926498ce981a5366e19acf79834b059", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85a43114c926498ce981a5366e19acf79834b059", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85a43114c926498ce981a5366e19acf79834b059", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85a43114c926498ce981a5366e19acf79834b059/comments", "author": null, "committer": null, "parents": [{"sha": "4cfe2e7514c65b59a0b5dc3f32e63b5dd7a8c26d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cfe2e7514c65b59a0b5dc3f32e63b5dd7a8c26d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cfe2e7514c65b59a0b5dc3f32e63b5dd7a8c26d"}], "stats": {"total": 24, "additions": 21, "deletions": 3}, "files": [{"sha": "530fefd83e44cf9c6586b055804d7545debaae08", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85a43114c926498ce981a5366e19acf79834b059/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85a43114c926498ce981a5366e19acf79834b059/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=85a43114c926498ce981a5366e19acf79834b059", "patch": "@@ -1,3 +1,8 @@\n+2005-11-13  Zdenek Dvorak  <dvorakz@suse.cz>\n+\n+\t* tree-ssa-loop-ivopts.c (get_address_cost): Prevent splitting\n+\taddressing modes during calculation of costs.\n+\n 2005-11-12  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* function.c (assign_stack_local_1): Restrict sanity check"}, {"sha": "388ea7e2f77f26e4dec4fa8482c48ca972b0241a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85a43114c926498ce981a5366e19acf79834b059/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85a43114c926498ce981a5366e19acf79834b059/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=85a43114c926498ce981a5366e19acf79834b059", "patch": "@@ -1,3 +1,9 @@\n+2005-11-13  Zdenek Dvorak  <dvorakz@suse.cz>\n+\n+\t* gcc.dg/tree-ssa/loop-2.c: Fix outcome.\n+\t* gcc.dg/tree-ssa/loop-3.c: Change type of loop control\n+\tvariable.\n+\n 2005-11-12  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \ttestsuite/24614"}, {"sha": "589de3630027651d42d22727328c7c93638e0431", "filename": "gcc/testsuite/gcc.dg/tree-ssa/loop-2.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85a43114c926498ce981a5366e19acf79834b059/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85a43114c926498ce981a5366e19acf79834b059/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-2.c?ref=85a43114c926498ce981a5366e19acf79834b059", "patch": "@@ -34,9 +34,10 @@ void xxx(void)\n /* { dg-final { scan-tree-dump-times \" \\\\+ 17\" 1 \"vars\" } } */\n \n /* The induction variable comparison with 99 should be eliminated\n-   and replaced by comparison of the variable for 17 * iter with 1700.  */\n+   and replaced by comparison of one of the newly created ivs.  */\n \n-/* { dg-final { scan-tree-dump-times \"1700\" 1 \"vars\" } } */\n /* { dg-final { scan-tree-dump-times \"iter\" 0 \"vars\" } } */\n+/* { dg-final { scan-tree-dump-times \"99\" 0 \"vars\" } } */\n+/* { dg-final { scan-tree-dump-times \"100\" 0 \"vars\" } } */\n \n /* { dg-final { cleanup-tree-dump \"vars\" } } */"}, {"sha": "82d1d2d73c5f54cf0cca566d4768a1b1c7ec39ed", "filename": "gcc/testsuite/gcc.dg/tree-ssa/loop-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85a43114c926498ce981a5366e19acf79834b059/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85a43114c926498ce981a5366e19acf79834b059/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-3.c?ref=85a43114c926498ce981a5366e19acf79834b059", "patch": "@@ -11,7 +11,7 @@ int foo(int);\n \n void xxx(void)\n {\n-  int iter;\n+  long iter;\n \n   for (iter = 0; iter < 100; iter++)\n     arr_base[iter] = foo (iter);"}, {"sha": "4affcf4172835acf803245927f0bebabf8c6ffa6", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85a43114c926498ce981a5366e19acf79834b059/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85a43114c926498ce981a5366e19acf79834b059/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=85a43114c926498ce981a5366e19acf79834b059", "patch": "@@ -3384,6 +3384,7 @@ get_address_cost (bool symbol_present, bool var_present,\n   acost = costs[symbol_present][var_present][offset_p][ratio_p];\n   if (!acost)\n     {\n+      int old_cse_not_expected;\n       acost = 0;\n       \n       addr = gen_raw_REG (Pmode, LAST_VIRTUAL_REGISTER + 1);\n@@ -3412,7 +3413,12 @@ get_address_cost (bool symbol_present, bool var_present,\n \taddr = gen_rtx_fmt_ee (PLUS, Pmode, addr, base);\n   \n       start_sequence ();\n+      /* To avoid splitting addressing modes, pretend that no cse will\n+ \t follow.  */\n+      old_cse_not_expected = cse_not_expected;\n+      cse_not_expected = true;\n       addr = memory_address (Pmode, addr);\n+      cse_not_expected = old_cse_not_expected;\n       seq = get_insns ();\n       end_sequence ();\n   "}]}