{"sha": "b37421c62a163edcc389bb32df13b7589cfe5715", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjM3NDIxYzYyYTE2M2VkY2MzODliYjMyZGYxM2I3NTg5Y2ZlNTcxNQ==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2010-11-17T14:31:07Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2010-11-17T14:31:07Z"}, "message": "invoke.texi (-dy): Remove.\n\n\t* doc/invoke.texi (-dy): Remove.\n\t* langhooks-def.h (lhd_do_nothing_i): Don't declare.\n\t(LANG_HOOKS_PARSE_FILE): Define to lhd_do_nothing.\n\t* langhooks.c (lhd_do_nothing_i): Remove.\n\t* langhooks.h (lang_hooks.parse_file): Take no arguments.\n\t* toplev.c (set_yydebug): Remove.\n\t(compile_file): Update call to lang_hooks.parse_file.\n\t(decode_d_option): Don't handle -dy.\n\nada:\n\t* gcc-interface/misc.c (gnat_parse_file): Take no arguments.\n\nc-family:\n\t* c-opts.c (c_common_parse_file): Take no arguments.\n\t* c-common.h (c_common_parse_file): Update prototype.\n\nfortran:\n\t* f95-lang.c (gfc_be_parse_file): Take no arguments.\n\njava:\n\t* jcf-parse.c (java_parse_file): Take no arguments.\n\t* java-tree.h (java_parse_file): Update prototype.\n\nlto:\n\t* lto.c (lto_main): Take no arguments.\n\t* lto.h (lto_main): Update prototype.\n\nFrom-SVN: r166868", "tree": {"sha": "0d20227504dcaf792fb3e2663879383129b47382", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0d20227504dcaf792fb3e2663879383129b47382"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b37421c62a163edcc389bb32df13b7589cfe5715", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b37421c62a163edcc389bb32df13b7589cfe5715", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b37421c62a163edcc389bb32df13b7589cfe5715", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b37421c62a163edcc389bb32df13b7589cfe5715/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "073d7052e568286ab54cf68583340cf0c1d70ebe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/073d7052e568286ab54cf68583340cf0c1d70ebe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/073d7052e568286ab54cf68583340cf0c1d70ebe"}], "stats": {"total": 100, "additions": 47, "deletions": 53}, "files": [{"sha": "71b28f5b660615db53b161d88d6f25ecbbddf84d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b37421c62a163edcc389bb32df13b7589cfe5715/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b37421c62a163edcc389bb32df13b7589cfe5715/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b37421c62a163edcc389bb32df13b7589cfe5715", "patch": "@@ -1,3 +1,14 @@\n+2010-11-17  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* doc/invoke.texi (-dy): Remove.\n+\t* langhooks-def.h (lhd_do_nothing_i): Don't declare.\n+\t(LANG_HOOKS_PARSE_FILE): Define to lhd_do_nothing.\n+\t* langhooks.c (lhd_do_nothing_i): Remove.\n+\t* langhooks.h (lang_hooks.parse_file): Take no arguments.\n+\t* toplev.c (set_yydebug): Remove.\n+\t(compile_file): Update call to lang_hooks.parse_file.\n+\t(decode_d_option): Don't handle -dy.\n+\n 2010-11-17  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/46440"}, {"sha": "b6210537a0691323c0ab7118aa977574a0f97274", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b37421c62a163edcc389bb32df13b7589cfe5715/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b37421c62a163edcc389bb32df13b7589cfe5715/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b37421c62a163edcc389bb32df13b7589cfe5715", "patch": "@@ -1,3 +1,7 @@\n+2010-11-17  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc-interface/misc.c (gnat_parse_file): Take no arguments.\n+\n 2010-11-17  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/trans.c (addressable_p): Rewrite obsolete paragraph in"}, {"sha": "ed66f8b942216576a432254c1c603ec647ab10f1", "filename": "gcc/ada/gcc-interface/misc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b37421c62a163edcc389bb32df13b7589cfe5715/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b37421c62a163edcc389bb32df13b7589cfe5715/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fmisc.c?ref=b37421c62a163edcc389bb32df13b7589cfe5715", "patch": "@@ -77,7 +77,7 @@ extern void _ada_gnat1drv (void);\n /* The parser for the language.  For us, we process the GNAT tree.  */\n \n static void\n-gnat_parse_file (int set_yydebug ATTRIBUTE_UNUSED)\n+gnat_parse_file (void)\n {\n   int seh[2];\n "}, {"sha": "81e636c28f507a4c12713ae200d1693f5ea0c29b", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b37421c62a163edcc389bb32df13b7589cfe5715/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b37421c62a163edcc389bb32df13b7589cfe5715/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=b37421c62a163edcc389bb32df13b7589cfe5715", "patch": "@@ -1,3 +1,8 @@\n+2010-11-17  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-opts.c (c_common_parse_file): Take no arguments.\n+\t* c-common.h (c_common_parse_file): Update prototype.\n+\n 2010-11-16  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/46401"}, {"sha": "76842d2ded1b921e59bcdfa4f0d83e121c780463", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b37421c62a163edcc389bb32df13b7589cfe5715/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b37421c62a163edcc389bb32df13b7589cfe5715/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=b37421c62a163edcc389bb32df13b7589cfe5715", "patch": "@@ -771,7 +771,7 @@ extern void c_common_init_options (unsigned int, struct cl_decoded_option *);\n extern bool c_common_post_options (const char **);\n extern bool c_common_init (void);\n extern void c_common_finish (void);\n-extern void c_common_parse_file (int);\n+extern void c_common_parse_file (void);\n extern alias_set_type c_common_get_alias_set (tree);\n extern void c_register_builtin_type (tree, const char*);\n extern bool c_promoting_integer_type_p (const_tree);"}, {"sha": "3d70136ee0e0fe4101f7b7753eb0bb42a52961e3", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 1, "deletions": 22, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b37421c62a163edcc389bb32df13b7589cfe5715/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b37421c62a163edcc389bb32df13b7589cfe5715/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=b37421c62a163edcc389bb32df13b7589cfe5715", "patch": "@@ -1057,31 +1057,10 @@ c_common_init (void)\n /* Initialize the integrated preprocessor after debug output has been\n    initialized; loop over each input file.  */\n void\n-c_common_parse_file (int set_yydebug)\n+c_common_parse_file (void)\n {\n   unsigned int i;\n \n-  if (set_yydebug)\n-    switch (c_language)\n-      {\n-      case clk_c:\n-\twarning(0, \"the C parser does not support -dy, option ignored\");\n-\tbreak;\n-      case clk_objc:\n-\twarning(0,\n-\t\t\"the Objective-C parser does not support -dy, option ignored\");\n-\tbreak;\n-      case clk_cxx:\n-\twarning(0, \"the C++ parser does not support -dy, option ignored\");\n-\tbreak;\n-      case clk_objcxx:\n-\twarning(0,\n-\t    \"the Objective-C++ parser does not support -dy, option ignored\");\n-\tbreak;\n-      default:\n-\tgcc_unreachable ();\n-    }\n-\n   i = 0;\n   for (;;)\n     {"}, {"sha": "0aebe4524fd5f89dc1436b0523e7428c6d128ea7", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b37421c62a163edcc389bb32df13b7589cfe5715/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b37421c62a163edcc389bb32df13b7589cfe5715/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=b37421c62a163edcc389bb32df13b7589cfe5715", "patch": "@@ -5275,10 +5275,6 @@ to @file{@var{file}.@var{pass}.vcg}.\n @opindex dx\n Just generate RTL for a function instead of compiling it.  Usually used\n with @option{-fdump-rtl-expand}.\n-\n-@item -dy\n-@opindex dy\n-Dump debugging information during parsing, to standard error.\n @end table\n \n @item -fdump-noaddr"}, {"sha": "0961df3c25afb53e0230e9d95a1e05a29f67fe5c", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b37421c62a163edcc389bb32df13b7589cfe5715/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b37421c62a163edcc389bb32df13b7589cfe5715/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=b37421c62a163edcc389bb32df13b7589cfe5715", "patch": "@@ -1,3 +1,7 @@\n+2010-11-17  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* f95-lang.c (gfc_be_parse_file): Take no arguments.\n+\n 2010-11-16  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \t    Tobias Burnus  <burnus@net-b.de>\n "}, {"sha": "3ed500b8587fa89dc464fb7cf43ba7058d101c49", "filename": "gcc/fortran/f95-lang.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b37421c62a163edcc389bb32df13b7589cfe5715/gcc%2Ffortran%2Ff95-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b37421c62a163edcc389bb32df13b7589cfe5715/gcc%2Ffortran%2Ff95-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ff95-lang.c?ref=b37421c62a163edcc389bb32df13b7589cfe5715", "patch": "@@ -93,7 +93,7 @@ static void gfc_print_identifier (FILE *, tree, int);\n void do_function_end (void);\n int global_bindings_p (void);\n static void clear_binding_stack (void);\n-static void gfc_be_parse_file (int);\n+static void gfc_be_parse_file (void);\n static alias_set_type gfc_get_alias_set (tree);\n static void gfc_init_ts (void);\n \n@@ -241,7 +241,7 @@ gfc_create_decls (void)\n \n \n static void\n-gfc_be_parse_file (int set_yydebug ATTRIBUTE_UNUSED)\n+gfc_be_parse_file (void)\n {\n   int errors;\n   int warnings;"}, {"sha": "05cbb037509c9c6278971d2ab595a8eb031921f4", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b37421c62a163edcc389bb32df13b7589cfe5715/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b37421c62a163edcc389bb32df13b7589cfe5715/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=b37421c62a163edcc389bb32df13b7589cfe5715", "patch": "@@ -1,3 +1,8 @@\n+2010-11-17  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* jcf-parse.c (java_parse_file): Take no arguments.\n+\t* java-tree.h (java_parse_file): Update prototype.\n+\n 2010-11-09  Joern Rennecke  <amylaar@spamcop.net>\n \t    Andrew Haley  <aph@redhat.com>\n "}, {"sha": "3addcca09e7a973745046a18cd729c2aeb11c87c", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b37421c62a163edcc389bb32df13b7589cfe5715/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b37421c62a163edcc389bb32df13b7589cfe5715/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=b37421c62a163edcc389bb32df13b7589cfe5715", "patch": "@@ -939,7 +939,7 @@ struct GTY((variable_size)) lang_type {\n /* Defined in java-except.h  */\n struct eh_range;\n \n-extern void java_parse_file (int);\n+extern void java_parse_file (void);\n extern tree java_type_for_mode (enum machine_mode, int);\n extern tree java_type_for_size (unsigned int, int);\n extern tree java_truthvalue_conversion (tree);"}, {"sha": "28d9ad4422282efebedd7917f09b68e215bdf2bb", "filename": "gcc/java/jcf-parse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b37421c62a163edcc389bb32df13b7589cfe5715/gcc%2Fjava%2Fjcf-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b37421c62a163edcc389bb32df13b7589cfe5715/gcc%2Fjava%2Fjcf-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-parse.c?ref=b37421c62a163edcc389bb32df13b7589cfe5715", "patch": "@@ -1732,7 +1732,7 @@ java_emit_static_constructor (void)\n \n \n void\n-java_parse_file (int set_yydebug ATTRIBUTE_UNUSED)\n+java_parse_file (void)\n {\n   int filename_count = 0;\n   location_t save_location = input_location;"}, {"sha": "961e929b61fae09ac3698e61c1449c76a4b6d43e", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b37421c62a163edcc389bb32df13b7589cfe5715/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b37421c62a163edcc389bb32df13b7589cfe5715/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=b37421c62a163edcc389bb32df13b7589cfe5715", "patch": "@@ -37,7 +37,6 @@ struct diagnostic_info;\n \n extern void lhd_do_nothing (void);\n extern void lhd_do_nothing_t (tree);\n-extern void lhd_do_nothing_i (int);\n extern void lhd_do_nothing_f (struct function *);\n extern tree lhd_pass_through_t (tree);\n extern bool lhd_post_options (const char **);\n@@ -85,7 +84,7 @@ extern void lhd_omp_firstprivatize_type_sizes (struct gimplify_omp_ctx *,\n #define LANG_HOOKS_IDENTIFIER_SIZE\tsizeof (struct lang_identifier)\n #define LANG_HOOKS_INIT\t\t\thook_bool_void_false\n #define LANG_HOOKS_FINISH\t\tlhd_do_nothing\n-#define LANG_HOOKS_PARSE_FILE\t\tlhd_do_nothing_i\n+#define LANG_HOOKS_PARSE_FILE\t\tlhd_do_nothing\n #define LANG_HOOKS_OPTION_LANG_MASK\thook_uint_void_0\n #define LANG_HOOKS_INIT_OPTIONS_STRUCT\thook_void_gcc_optionsp\n #define LANG_HOOKS_INIT_OPTIONS\t\tlhd_init_options"}, {"sha": "80efd32580d190fd3925148675fd5df7b91870ee", "filename": "gcc/langhooks.c", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b37421c62a163edcc389bb32df13b7589cfe5715/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b37421c62a163edcc389bb32df13b7589cfe5715/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=b37421c62a163edcc389bb32df13b7589cfe5715", "patch": "@@ -62,13 +62,6 @@ lhd_pass_through_t (tree t)\n   return t;\n }\n \n-/* Do nothing (int).  */\n-\n-void\n-lhd_do_nothing_i (int ARG_UNUSED (i))\n-{\n-}\n-\n /* Do nothing (int, int, int).  Return NULL_TREE.  */\n \n tree"}, {"sha": "a9947293e9199a8000ae4e725c4d7280ee61aeb0", "filename": "gcc/langhooks.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b37421c62a163edcc389bb32df13b7589cfe5715/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b37421c62a163edcc389bb32df13b7589cfe5715/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=b37421c62a163edcc389bb32df13b7589cfe5715", "patch": "@@ -317,9 +317,8 @@ struct lang_hooks\n   /* Called at the end of compilation, as a finalizer.  */\n   void (*finish) (void);\n \n-  /* Parses the entire file.  The argument is nonzero to cause bison\n-     parsers to dump debugging information during parsing.  */\n-  void (*parse_file) (int);\n+  /* Parses the entire file.  */\n+  void (*parse_file) (void);\n \n   /* Determines if it's ok for a function to have no noreturn attribute.  */\n   bool (*missing_noreturn_ok_p) (tree);"}, {"sha": "8b026724cb391e628778de17dabe63b7c19529da", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b37421c62a163edcc389bb32df13b7589cfe5715/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b37421c62a163edcc389bb32df13b7589cfe5715/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=b37421c62a163edcc389bb32df13b7589cfe5715", "patch": "@@ -1,3 +1,8 @@\n+2010-11-17  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* lto.c (lto_main): Take no arguments.\n+\t* lto.h (lto_main): Update prototype.\n+\n 2010-11-16  Ian Lance Taylor  <iant@google.com>\n \n \t* lto-object.c (lto_obj_file_open): Call"}, {"sha": "44f866ad075bce01931230cc177507a0cc2b1f50", "filename": "gcc/lto/lto.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b37421c62a163edcc389bb32df13b7589cfe5715/gcc%2Flto%2Flto.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b37421c62a163edcc389bb32df13b7589cfe5715/gcc%2Flto%2Flto.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto.c?ref=b37421c62a163edcc389bb32df13b7589cfe5715", "patch": "@@ -2437,7 +2437,7 @@ lto_process_name (void)\n      simply applies them.  */\n \n void\n-lto_main (int debug_p ATTRIBUTE_UNUSED)\n+lto_main (void)\n {\n   lto_process_name ();\n "}, {"sha": "8110ace2749751b24b052b4bd1338fba5866500f", "filename": "gcc/lto/lto.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b37421c62a163edcc389bb32df13b7589cfe5715/gcc%2Flto%2Flto.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b37421c62a163edcc389bb32df13b7589cfe5715/gcc%2Flto%2Flto.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto.h?ref=b37421c62a163edcc389bb32df13b7589cfe5715", "patch": "@@ -37,7 +37,7 @@ extern const char *resolution_file_name;\n \n /* In lto.c  */\n extern tree lto_eh_personality (void);\n-extern void lto_main (int);\n+extern void lto_main (void);\n extern void lto_read_all_file_options (void);\n \n /* In lto-elf.c or lto-coff.c  */"}, {"sha": "7c91b06bb7c5c0f34f1f879cf0722eaf9859a15f", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b37421c62a163edcc389bb32df13b7589cfe5715/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b37421c62a163edcc389bb32df13b7589cfe5715/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=b37421c62a163edcc389bb32df13b7589cfe5715", "patch": "@@ -117,9 +117,6 @@ static void crash_signal (int) ATTRIBUTE_NORETURN;\n static void setup_core_dumping (void);\n static void compile_file (void);\n \n-/* Nonzero to dump debug info whilst parsing (-dy option).  */\n-static int set_yydebug;\n-\n /* True if we don't need a backend (e.g. preprocessing only).  */\n static bool no_backend;\n \n@@ -870,7 +867,7 @@ compile_file (void)\n \n   /* Call the parser, which parses the entire file (calling\n      rest_of_compilation for each function).  */\n-  lang_hooks.parse_file (set_yydebug);\n+  lang_hooks.parse_file ();\n \n   /* Compilation is now finished except for writing\n      what's left of the symbol table output.  */\n@@ -993,9 +990,6 @@ decode_d_option (const char *arg)\n       case 'x':\n \trtl_dump_and_exit = 1;\n \tbreak;\n-      case 'y':\n-\tset_yydebug = 1;\n-\tbreak;\n       case 'D':\t/* These are handled by the preprocessor.  */\n       case 'I':\n       case 'M':"}]}