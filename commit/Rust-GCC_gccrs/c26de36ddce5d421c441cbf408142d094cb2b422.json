{"sha": "c26de36ddce5d421c441cbf408142d094cb2b422", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzI2ZGUzNmRkY2U1ZDQyMWM0NDFjYmY0MDgxNDJkMDk0Y2IyYjQyMg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-04-20T13:23:59Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-04-20T13:23:59Z"}, "message": "gimple-fold.h (gimple_build): Remove optional valueize arguments.\n\n2015-04-20  Richard Biener  <rguenther@suse.de>\n\n\t* gimple-fold.h (gimple_build): Remove optional valueize arguments.\n\t* gimple-fold.c (gimple_build_valueize): New function.\n\t(gimple_build): Always use gimple_build_valueize as valueize hook.\n\nFrom-SVN: r222231", "tree": {"sha": "0d2d43c701ab128b5cc039da87819d90ef62d257", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0d2d43c701ab128b5cc039da87819d90ef62d257"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c26de36ddce5d421c441cbf408142d094cb2b422", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c26de36ddce5d421c441cbf408142d094cb2b422", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c26de36ddce5d421c441cbf408142d094cb2b422", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c26de36ddce5d421c441cbf408142d094cb2b422/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9adc2d48acdadae96a52dc2ffc58c881fc4af6dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9adc2d48acdadae96a52dc2ffc58c881fc4af6dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9adc2d48acdadae96a52dc2ffc58c881fc4af6dc"}], "stats": {"total": 85, "additions": 43, "deletions": 42}, "files": [{"sha": "09d11ff4f015b5e9d492c9be64596a339d774892", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c26de36ddce5d421c441cbf408142d094cb2b422/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c26de36ddce5d421c441cbf408142d094cb2b422/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c26de36ddce5d421c441cbf408142d094cb2b422", "patch": "@@ -1,3 +1,9 @@\n+2015-04-20  Richard Biener  <rguenther@suse.de>\n+\n+\t* gimple-fold.h (gimple_build): Remove optional valueize arguments.\n+\t* gimple-fold.c (gimple_build_valueize): New function.\n+\t(gimple_build): Always use gimple_build_valueize as valueize hook.\n+\n 2015-04-20  Alan Lawrence  <alan.lawrence@arm.com>\n \n \tPR target/64134"}, {"sha": "d607e8fe0badd35dbf7c7a9f5d65beae41034db1", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 31, "deletions": 30, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c26de36ddce5d421c441cbf408142d094cb2b422/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c26de36ddce5d421c441cbf408142d094cb2b422/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=c26de36ddce5d421c441cbf408142d094cb2b422", "patch": "@@ -6078,18 +6078,28 @@ rewrite_to_defined_overflow (gimple stmt)\n }\n \n \n+/* The valueization hook we use for the gimple_build API simplification.\n+   This makes us match fold_buildN behavior by only combining with\n+   statements in the sequence(s) we are currently building.  */\n+\n+static tree\n+gimple_build_valueize (tree op)\n+{\n+  if (gimple_bb (SSA_NAME_DEF_STMT (op)) == NULL)\n+    return op;\n+  return NULL_TREE;\n+}\n+\n /* Build the expression CODE OP0 of type TYPE with location LOC,\n-   simplifying it first if possible using VALUEIZE if not NULL.\n-   OP0 is expected to be valueized already.  Returns the built\n+   simplifying it first if possible.  Returns the built\n    expression value and appends statements possibly defining it\n    to SEQ.  */\n \n tree\n gimple_build (gimple_seq *seq, location_t loc,\n-\t      enum tree_code code, tree type, tree op0,\n-\t      tree (*valueize)(tree))\n+\t      enum tree_code code, tree type, tree op0)\n {\n-  tree res = gimple_simplify (code, type, op0, seq, valueize);\n+  tree res = gimple_simplify (code, type, op0, seq, gimple_build_valueize);\n   if (!res)\n     {\n       if (gimple_in_ssa_p (cfun))\n@@ -6110,17 +6120,15 @@ gimple_build (gimple_seq *seq, location_t loc,\n }\n \n /* Build the expression OP0 CODE OP1 of type TYPE with location LOC,\n-   simplifying it first if possible using VALUEIZE if not NULL.\n-   OP0 and OP1 are expected to be valueized already.  Returns the built\n+   simplifying it first if possible.  Returns the built\n    expression value and appends statements possibly defining it\n    to SEQ.  */\n \n tree\n gimple_build (gimple_seq *seq, location_t loc,\n-\t      enum tree_code code, tree type, tree op0, tree op1,\n-\t      tree (*valueize)(tree))\n+\t      enum tree_code code, tree type, tree op0, tree op1)\n {\n-  tree res = gimple_simplify (code, type, op0, op1, seq, valueize);\n+  tree res = gimple_simplify (code, type, op0, op1, seq, gimple_build_valueize);\n   if (!res)\n     {\n       if (gimple_in_ssa_p (cfun))\n@@ -6135,18 +6143,16 @@ gimple_build (gimple_seq *seq, location_t loc,\n }\n \n /* Build the expression (CODE OP0 OP1 OP2) of type TYPE with location LOC,\n-   simplifying it first if possible using VALUEIZE if not NULL.\n-   OP0, OP1 and OP2 are expected to be valueized already.  Returns the built\n+   simplifying it first if possible.  Returns the built\n    expression value and appends statements possibly defining it\n    to SEQ.  */\n \n tree\n gimple_build (gimple_seq *seq, location_t loc,\n-\t      enum tree_code code, tree type, tree op0, tree op1, tree op2,\n-\t      tree (*valueize)(tree))\n+\t      enum tree_code code, tree type, tree op0, tree op1, tree op2)\n {\n   tree res = gimple_simplify (code, type, op0, op1, op2,\n-\t\t\t      seq, valueize);\n+\t\t\t      seq, gimple_build_valueize);\n   if (!res)\n     {\n       if (gimple_in_ssa_p (cfun))\n@@ -6167,17 +6173,15 @@ gimple_build (gimple_seq *seq, location_t loc,\n \n /* Build the call FN (ARG0) with a result of type TYPE\n    (or no result if TYPE is void) with location LOC,\n-   simplifying it first if possible using VALUEIZE if not NULL.\n-   ARG0 is expected to be valueized already.  Returns the built\n+   simplifying it first if possible.  Returns the built\n    expression value (or NULL_TREE if TYPE is void) and appends\n    statements possibly defining it to SEQ.  */\n \n tree\n gimple_build (gimple_seq *seq, location_t loc,\n-\t      enum built_in_function fn, tree type, tree arg0,\n-\t      tree (*valueize)(tree))\n+\t      enum built_in_function fn, tree type, tree arg0)\n {\n-  tree res = gimple_simplify (fn, type, arg0, seq, valueize);\n+  tree res = gimple_simplify (fn, type, arg0, seq, gimple_build_valueize);\n   if (!res)\n     {\n       tree decl = builtin_decl_implicit (fn);\n@@ -6198,17 +6202,15 @@ gimple_build (gimple_seq *seq, location_t loc,\n \n /* Build the call FN (ARG0, ARG1) with a result of type TYPE\n    (or no result if TYPE is void) with location LOC,\n-   simplifying it first if possible using VALUEIZE if not NULL.\n-   ARG0 is expected to be valueized already.  Returns the built\n+   simplifying it first if possible.  Returns the built\n    expression value (or NULL_TREE if TYPE is void) and appends\n    statements possibly defining it to SEQ.  */\n \n tree\n gimple_build (gimple_seq *seq, location_t loc,\n-\t      enum built_in_function fn, tree type, tree arg0, tree arg1,\n-\t      tree (*valueize)(tree))\n+\t      enum built_in_function fn, tree type, tree arg0, tree arg1)\n {\n-  tree res = gimple_simplify (fn, type, arg0, arg1, seq, valueize);\n+  tree res = gimple_simplify (fn, type, arg0, arg1, seq, gimple_build_valueize);\n   if (!res)\n     {\n       tree decl = builtin_decl_implicit (fn);\n@@ -6229,18 +6231,17 @@ gimple_build (gimple_seq *seq, location_t loc,\n \n /* Build the call FN (ARG0, ARG1, ARG2) with a result of type TYPE\n    (or no result if TYPE is void) with location LOC,\n-   simplifying it first if possible using VALUEIZE if not NULL.\n-   ARG0 is expected to be valueized already.  Returns the built\n+   simplifying it first if possible.  Returns the built\n    expression value (or NULL_TREE if TYPE is void) and appends\n    statements possibly defining it to SEQ.  */\n \n tree\n gimple_build (gimple_seq *seq, location_t loc,\n \t      enum built_in_function fn, tree type,\n-\t      tree arg0, tree arg1, tree arg2,\n-\t      tree (*valueize)(tree))\n+\t      tree arg0, tree arg1, tree arg2)\n {\n-  tree res = gimple_simplify (fn, type, arg0, arg1, arg2, seq, valueize);\n+  tree res = gimple_simplify (fn, type, arg0, arg1, arg2,\n+\t\t\t      seq, gimple_build_valueize);\n   if (!res)\n     {\n       tree decl = builtin_decl_implicit (fn);"}, {"sha": "1204c8a82423bdaf301d6fe8a3ce844a41d0e369", "filename": "gcc/gimple-fold.h", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c26de36ddce5d421c441cbf408142d094cb2b422/gcc%2Fgimple-fold.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c26de36ddce5d421c441cbf408142d094cb2b422/gcc%2Fgimple-fold.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.h?ref=c26de36ddce5d421c441cbf408142d094cb2b422", "patch": "@@ -57,53 +57,47 @@ extern gimple_seq rewrite_to_defined_overflow (gimple);\n    int the provided sequence, matching and simplifying them on-the-fly.\n    Supposed to replace force_gimple_operand (fold_buildN (...), ...).  */\n extern tree gimple_build (gimple_seq *, location_t,\n-\t\t\t  enum tree_code, tree, tree,\n-\t\t\t  tree (*valueize) (tree) = NULL);\n+\t\t\t  enum tree_code, tree, tree);\n inline tree\n gimple_build (gimple_seq *seq,\n \t      enum tree_code code, tree type, tree op0)\n {\n   return gimple_build (seq, UNKNOWN_LOCATION, code, type, op0);\n }\n extern tree gimple_build (gimple_seq *, location_t,\n-\t\t\t  enum tree_code, tree, tree, tree,\n-\t\t\t  tree (*valueize) (tree) = NULL);\n+\t\t\t  enum tree_code, tree, tree, tree);\n inline tree\n gimple_build (gimple_seq *seq,\n \t      enum tree_code code, tree type, tree op0, tree op1)\n {\n   return gimple_build (seq, UNKNOWN_LOCATION, code, type, op0, op1);\n }\n extern tree gimple_build (gimple_seq *, location_t,\n-\t\t\t  enum tree_code, tree, tree, tree, tree,\n-\t\t\t  tree (*valueize) (tree) = NULL);\n+\t\t\t  enum tree_code, tree, tree, tree, tree);\n inline tree\n gimple_build (gimple_seq *seq,\n \t      enum tree_code code, tree type, tree op0, tree op1, tree op2)\n {\n   return gimple_build (seq, UNKNOWN_LOCATION, code, type, op0, op1, op2);\n }\n extern tree gimple_build (gimple_seq *, location_t,\n-\t\t\t  enum built_in_function, tree, tree,\n-\t\t\t  tree (*valueize) (tree) = NULL);\n+\t\t\t  enum built_in_function, tree, tree);\n inline tree\n gimple_build (gimple_seq *seq,\n \t      enum built_in_function fn, tree type, tree arg0)\n {\n   return gimple_build (seq, UNKNOWN_LOCATION, fn, type, arg0);\n }\n extern tree gimple_build (gimple_seq *, location_t,\n-\t\t\t  enum built_in_function, tree, tree, tree,\n-\t\t\t  tree (*valueize) (tree) = NULL);\n+\t\t\t  enum built_in_function, tree, tree, tree);\n inline tree\n gimple_build (gimple_seq *seq,\n \t      enum built_in_function fn, tree type, tree arg0, tree arg1)\n {\n   return gimple_build (seq, UNKNOWN_LOCATION, fn, type, arg0, arg1);\n }\n extern tree gimple_build (gimple_seq *, location_t,\n-\t\t\t  enum built_in_function, tree, tree, tree, tree,\n-\t\t\t  tree (*valueize) (tree) = NULL);\n+\t\t\t  enum built_in_function, tree, tree, tree, tree);\n inline tree\n gimple_build (gimple_seq *seq,\n \t      enum built_in_function fn, tree type,"}]}