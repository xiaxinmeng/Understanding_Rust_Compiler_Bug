{"sha": "5ee360d069e3e36c14620414d17e77f4a26cebba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWVlMzYwZDA2OWUzZTM2YzE0NjIwNDE0ZDE3ZTc3ZjRhMjZjZWJiYQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2011-11-07T13:45:03Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2011-11-07T13:45:03Z"}, "message": "acinclude.m4 (GLIBCXX_CHECK_SC_NPROC_ONLN): Define.\n\n\t* acinclude.m4 (GLIBCXX_CHECK_SC_NPROC_ONLN): Define.\n\t(GLIBCXX_CHECK_PTHREADS_NUM_PROCESSORS_NP): Define.\n\t(GLIBCXX_CHECK_SYSCTL_HW_NCPU): Define.\n\t* configure.ac: Use new checks.\n\t* configure: Regenerate.\n\t* config.h.in: Regenerate.\n\t* src/thread.cc: Check new config macros.\n\t* testsuite/lib/libstdc++.exp: Likewise.\n\nFrom-SVN: r181084", "tree": {"sha": "461e6e015d8436bcc9d9a9eb507a084852127558", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/461e6e015d8436bcc9d9a9eb507a084852127558"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ee360d069e3e36c14620414d17e77f4a26cebba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ee360d069e3e36c14620414d17e77f4a26cebba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ee360d069e3e36c14620414d17e77f4a26cebba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ee360d069e3e36c14620414d17e77f4a26cebba/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51e674b7f1aa2a940befe7000a2c3975aa2e355e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51e674b7f1aa2a940befe7000a2c3975aa2e355e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51e674b7f1aa2a940befe7000a2c3975aa2e355e"}], "stats": {"total": 390, "additions": 384, "deletions": 6}, "files": [{"sha": "2e5ccf0ecfc0f3806840356809d62cf6cd8a3159", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ee360d069e3e36c14620414d17e77f4a26cebba/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ee360d069e3e36c14620414d17e77f4a26cebba/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5ee360d069e3e36c14620414d17e77f4a26cebba", "patch": "@@ -1,3 +1,14 @@\n+2011-11-07  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\t* acinclude.m4 (GLIBCXX_CHECK_SC_NPROC_ONLN): Define.\n+\t(GLIBCXX_CHECK_PTHREADS_NUM_PROCESSORS_NP): Define.\n+\t(GLIBCXX_CHECK_SYSCTL_HW_NCPU): Define.\n+\t* configure.ac: Use new checks.\n+\t* configure: Regenerate.\n+\t* config.h.in: Regenerate.\n+\t* src/thread.cc: Check new config macros.\n+\t* testsuite/lib/libstdc++.exp: Likewise.\n+\n 2011-11-07  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \t* config/abi/pre/gnu.ver: Fix exports for string::pop_back."}, {"sha": "6cc6ace873fd055b18c118f3ecf0b3fd5d967028", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ee360d069e3e36c14620414d17e77f4a26cebba/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ee360d069e3e36c14620414d17e77f4a26cebba/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=5ee360d069e3e36c14620414d17e77f4a26cebba", "patch": "@@ -3459,6 +3459,94 @@ AC_DEFUN([GLIBCXX_CHECK_SC_NPROCESSORS_ONLN], [\n   AC_LANG_RESTORE\n ])\n \n+dnl\n+dnl Check whether sysconf(_SC_NPROC_ONLN) is available in <unistd.h>, and define _GLIBCXX_USE_SC_NPROC_ONLN.\n+dnl\n+AC_DEFUN([GLIBCXX_CHECK_SC_NPROC_ONLN], [\n+\n+  AC_LANG_SAVE\n+  AC_LANG_CPLUSPLUS\n+  ac_save_CXXFLAGS=\"$CXXFLAGS\"\n+  CXXFLAGS=\"$CXXFLAGS -fno-exceptions\"\n+\n+  AC_MSG_CHECKING([for _SC_NPROC_ONLN])\n+  AC_CACHE_VAL(glibcxx_cv_SC_NPROC_ONLN, [\n+    GCC_TRY_COMPILE_OR_LINK(\n+      [#include <unistd.h>],\n+      [int n = sysconf(_SC_NPROC_ONLN);],\n+      [glibcxx_cv_SC_NPROC_ONLN=yes],\n+      [glibcxx_cv_SC_NPROC_ONLN=no])\n+  ])\n+  if test $glibcxx_cv_SC_NPROC_ONLN = yes; then\n+    AC_DEFINE(_GLIBCXX_USE_SC_NPROC_ONLN, 1, [Define if _SC_NPROC_ONLN  is available in <unistd.h>.])\n+  fi\n+  AC_MSG_RESULT($glibcxx_cv_SC_NPROC_ONLN)\n+\n+  CXXFLAGS=\"$ac_save_CXXFLAGS\"\n+  AC_LANG_RESTORE\n+])\n+\n+dnl\n+dnl Check whether pthread_num_processors_np is available in <pthread.h>, and define _GLIBCXX_USE_PTHREADS_NUM_PROCESSORS_NP.\n+dnl\n+AC_DEFUN([GLIBCXX_CHECK_PTHREADS_NUM_PROCESSORS_NP], [\n+\n+  AC_LANG_SAVE\n+  AC_LANG_CPLUSPLUS\n+  ac_save_CXXFLAGS=\"$CXXFLAGS\"\n+  CXXFLAGS=\"$CXXFLAGS -fno-exceptions\"\n+\n+  AC_MSG_CHECKING([for pthreads_num_processors_np])\n+  AC_CACHE_VAL(glibcxx_cv_PTHREADS_NUM_PROCESSORS_NP, [\n+    GCC_TRY_COMPILE_OR_LINK(\n+      [#include <pthread.h>],\n+      [int n = pthread_num_processors_np();],\n+      [glibcxx_cv_PTHREADS_NUM_PROCESSORS_NP=yes],\n+      [glibcxx_cv_PTHREADS_NUM_PROCESSORS_NP=no])\n+  ])\n+  if test $glibcxx_cv_PTHREADS_NUM_PROCESSORS_NP = yes; then\n+    AC_DEFINE(_GLIBCXX_USE_PTHREADS_NUM_PROCESSORS_NP, 1, [Define if pthreads_num_processors_np is available in <pthread.h>.])\n+  fi\n+  AC_MSG_RESULT($glibcxx_cv_PTHREADS_NUM_PROCESSORS_NP)\n+\n+  CXXFLAGS=\"$ac_save_CXXFLAGS\"\n+  AC_LANG_RESTORE\n+])\n+\n+dnl\n+dnl Check whether sysctl is available in <pthread.h>, and define _GLIBCXX_USE_SYSCTL_HW_NCPU.\n+dnl\n+AC_DEFUN([GLIBCXX_CHECK_SYSCTL_HW_NCPU], [\n+\n+  AC_LANG_SAVE\n+  AC_LANG_CPLUSPLUS\n+  ac_save_CXXFLAGS=\"$CXXFLAGS\"\n+  CXXFLAGS=\"$CXXFLAGS -fno-exceptions\"\n+\n+  AC_MSG_CHECKING([for hw.ncpu sysctl])\n+  AC_CACHE_VAL(glibcxx_cv_SYSCTL_HW_NCPU, [\n+    GCC_TRY_COMPILE_OR_LINK(\n+      [\n+       #include <stddef.h>\n+       #include <sys/sysctl.h>\n+       ],\n+      [\n+       int count;\n+       size_t size = sizeof(count);\n+       int mib[] = { CTL_HW, HW_NCPU };\n+       sysctl(mib, 2, &count, &size, NULL, 0);\n+      ],\n+      [glibcxx_cv_SYSCTL_HW_NCPU=yes],\n+      [glibcxx_cv_SYSCTL_HW_NCPU=no])\n+  ])\n+  if test $glibcxx_cv_SYSCTL_HW_NCPU = yes; then\n+    AC_DEFINE(_GLIBCXX_USE_SYSCTL_HW_NCPU, 1, [Define if sysctl(), CTL_HW and HW_NCPU are available in <sys/sysctl.h>.])\n+  fi\n+  AC_MSG_RESULT($glibcxx_cv_SYSCTL_HW_NCPU)\n+\n+  CXXFLAGS=\"$ac_save_CXXFLAGS\"\n+  AC_LANG_RESTORE\n+])\n \n # Macros from the top-level gcc directory.\n m4_include([../config/gc++filt.m4])"}, {"sha": "7215a7fec62a5cf8a43e7ef9867fa8805b25fb25", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ee360d069e3e36c14620414d17e77f4a26cebba/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ee360d069e3e36c14620414d17e77f4a26cebba/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=5ee360d069e3e36c14620414d17e77f4a26cebba", "patch": "@@ -831,6 +831,9 @@\n /* Define if NLS translations are to be used. */\n #undef _GLIBCXX_USE_NLS\n \n+/* Define if pthreads_num_processors_np is available in <pthread.h>. */\n+#undef _GLIBCXX_USE_PTHREADS_NUM_PROCESSORS_NP\n+\n /* Define if /dev/random and /dev/urandom are available for the random_device\n    of TR1 (Chapter 5.1). */\n #undef _GLIBCXX_USE_RANDOM_TR1\n@@ -841,6 +844,12 @@\n /* Define if _SC_NPROCESSORS_ONLN is available in <unistd.h>. */\n #undef _GLIBCXX_USE_SC_NPROCESSORS_ONLN\n \n+/* Define if _SC_NPROC_ONLN is available in <unistd.h>. */\n+#undef _GLIBCXX_USE_SC_NPROC_ONLN\n+\n+/* Define if sysctl(), CTL_HW and HW_NCPU are available in <sys/sysctl.h>. */\n+#undef _GLIBCXX_USE_SYSCTL_HW_NCPU\n+\n /* Define if code specialized for wchar_t should be used. */\n #undef _GLIBCXX_USE_WCHAR_T\n "}, {"sha": "3be252e5c857b23d1c0836b45612134d82bee35c", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 250, "deletions": 0, "changes": 250, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ee360d069e3e36c14620414d17e77f4a26cebba/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ee360d069e3e36c14620414d17e77f4a26cebba/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=5ee360d069e3e36c14620414d17e77f4a26cebba", "patch": "@@ -20132,6 +20132,256 @@ ac_compiler_gnu=$ac_cv_c_compiler_gnu\n \n \n \n+\n+\n+  ac_ext=cpp\n+ac_cpp='$CXXCPP $CPPFLAGS'\n+ac_compile='$CXX -c $CXXFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n+ac_link='$CXX -o conftest$ac_exeext $CXXFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\n+ac_compiler_gnu=$ac_cv_cxx_compiler_gnu\n+\n+  ac_save_CXXFLAGS=\"$CXXFLAGS\"\n+  CXXFLAGS=\"$CXXFLAGS -fno-exceptions\"\n+\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for _SC_NPROC_ONLN\" >&5\n+$as_echo_n \"checking for _SC_NPROC_ONLN... \" >&6; }\n+  if test \"${glibcxx_cv_SC_NPROC_ONLN+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+\n+    if test x$gcc_no_link = xyes; then\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+#include <unistd.h>\n+int\n+main ()\n+{\n+int n = sysconf(_SC_NPROC_ONLN);\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_cxx_try_compile \"$LINENO\"; then :\n+  glibcxx_cv_SC_NPROC_ONLN=yes\n+else\n+  glibcxx_cv_SC_NPROC_ONLN=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+else\n+  if test x$gcc_no_link = xyes; then\n+  as_fn_error \"Link tests are not allowed after GCC_NO_EXECUTABLES.\" \"$LINENO\" 5\n+fi\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+#include <unistd.h>\n+int\n+main ()\n+{\n+int n = sysconf(_SC_NPROC_ONLN);\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_cxx_try_link \"$LINENO\"; then :\n+  glibcxx_cv_SC_NPROC_ONLN=yes\n+else\n+  glibcxx_cv_SC_NPROC_ONLN=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+fi\n+\n+fi\n+\n+  if test $glibcxx_cv_SC_NPROC_ONLN = yes; then\n+\n+$as_echo \"#define _GLIBCXX_USE_SC_NPROC_ONLN 1\" >>confdefs.h\n+\n+  fi\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $glibcxx_cv_SC_NPROC_ONLN\" >&5\n+$as_echo \"$glibcxx_cv_SC_NPROC_ONLN\" >&6; }\n+\n+  CXXFLAGS=\"$ac_save_CXXFLAGS\"\n+  ac_ext=c\n+ac_cpp='$CPP $CPPFLAGS'\n+ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n+ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\n+ac_compiler_gnu=$ac_cv_c_compiler_gnu\n+\n+\n+\n+\n+\n+  ac_ext=cpp\n+ac_cpp='$CXXCPP $CPPFLAGS'\n+ac_compile='$CXX -c $CXXFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n+ac_link='$CXX -o conftest$ac_exeext $CXXFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\n+ac_compiler_gnu=$ac_cv_cxx_compiler_gnu\n+\n+  ac_save_CXXFLAGS=\"$CXXFLAGS\"\n+  CXXFLAGS=\"$CXXFLAGS -fno-exceptions\"\n+\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for pthreads_num_processors_np\" >&5\n+$as_echo_n \"checking for pthreads_num_processors_np... \" >&6; }\n+  if test \"${glibcxx_cv_PTHREADS_NUM_PROCESSORS_NP+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+\n+    if test x$gcc_no_link = xyes; then\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+#include <pthread.h>\n+int\n+main ()\n+{\n+int n = pthread_num_processors_np();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_cxx_try_compile \"$LINENO\"; then :\n+  glibcxx_cv_PTHREADS_NUM_PROCESSORS_NP=yes\n+else\n+  glibcxx_cv_PTHREADS_NUM_PROCESSORS_NP=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+else\n+  if test x$gcc_no_link = xyes; then\n+  as_fn_error \"Link tests are not allowed after GCC_NO_EXECUTABLES.\" \"$LINENO\" 5\n+fi\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+#include <pthread.h>\n+int\n+main ()\n+{\n+int n = pthread_num_processors_np();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_cxx_try_link \"$LINENO\"; then :\n+  glibcxx_cv_PTHREADS_NUM_PROCESSORS_NP=yes\n+else\n+  glibcxx_cv_PTHREADS_NUM_PROCESSORS_NP=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+fi\n+\n+fi\n+\n+  if test $glibcxx_cv_PTHREADS_NUM_PROCESSORS_NP = yes; then\n+\n+$as_echo \"#define _GLIBCXX_USE_PTHREADS_NUM_PROCESSORS_NP 1\" >>confdefs.h\n+\n+  fi\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $glibcxx_cv_PTHREADS_NUM_PROCESSORS_NP\" >&5\n+$as_echo \"$glibcxx_cv_PTHREADS_NUM_PROCESSORS_NP\" >&6; }\n+\n+  CXXFLAGS=\"$ac_save_CXXFLAGS\"\n+  ac_ext=c\n+ac_cpp='$CPP $CPPFLAGS'\n+ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n+ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\n+ac_compiler_gnu=$ac_cv_c_compiler_gnu\n+\n+\n+\n+\n+\n+  ac_ext=cpp\n+ac_cpp='$CXXCPP $CPPFLAGS'\n+ac_compile='$CXX -c $CXXFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n+ac_link='$CXX -o conftest$ac_exeext $CXXFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\n+ac_compiler_gnu=$ac_cv_cxx_compiler_gnu\n+\n+  ac_save_CXXFLAGS=\"$CXXFLAGS\"\n+  CXXFLAGS=\"$CXXFLAGS -fno-exceptions\"\n+\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for hw.ncpu sysctl\" >&5\n+$as_echo_n \"checking for hw.ncpu sysctl... \" >&6; }\n+  if test \"${glibcxx_cv_SYSCTL_HW_NCPU+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+\n+    if test x$gcc_no_link = xyes; then\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+       #include <stddef.h>\n+       #include <sys/sysctl.h>\n+\n+int\n+main ()\n+{\n+\n+       int count;\n+       size_t size = sizeof(count);\n+       int mib[] = { CTL_HW, HW_NCPU };\n+       sysctl(mib, 2, &count, &size, NULL, 0);\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_cxx_try_compile \"$LINENO\"; then :\n+  glibcxx_cv_SYSCTL_HW_NCPU=yes\n+else\n+  glibcxx_cv_SYSCTL_HW_NCPU=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+else\n+  if test x$gcc_no_link = xyes; then\n+  as_fn_error \"Link tests are not allowed after GCC_NO_EXECUTABLES.\" \"$LINENO\" 5\n+fi\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+       #include <stddef.h>\n+       #include <sys/sysctl.h>\n+\n+int\n+main ()\n+{\n+\n+       int count;\n+       size_t size = sizeof(count);\n+       int mib[] = { CTL_HW, HW_NCPU };\n+       sysctl(mib, 2, &count, &size, NULL, 0);\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_cxx_try_link \"$LINENO\"; then :\n+  glibcxx_cv_SYSCTL_HW_NCPU=yes\n+else\n+  glibcxx_cv_SYSCTL_HW_NCPU=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+fi\n+\n+fi\n+\n+  if test $glibcxx_cv_SYSCTL_HW_NCPU = yes; then\n+\n+$as_echo \"#define _GLIBCXX_USE_SYSCTL_HW_NCPU 1\" >>confdefs.h\n+\n+  fi\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $glibcxx_cv_SYSCTL_HW_NCPU\" >&5\n+$as_echo \"$glibcxx_cv_SYSCTL_HW_NCPU\" >&6; }\n+\n+  CXXFLAGS=\"$ac_save_CXXFLAGS\"\n+  ac_ext=c\n+ac_cpp='$CPP $CPPFLAGS'\n+ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n+ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\n+ac_compiler_gnu=$ac_cv_c_compiler_gnu\n+\n+\n+\n # Check for available headers.\n for ac_header in endian.h execinfo.h float.h fp.h ieeefp.h inttypes.h \\\n locale.h machine/endian.h machine/param.h nan.h stdint.h stdlib.h string.h \\"}, {"sha": "8f853076cbeaf0a94141da8eebb76ed767deb90c", "filename": "libstdc++-v3/configure.ac", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ee360d069e3e36c14620414d17e77f4a26cebba/libstdc%2B%2B-v3%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ee360d069e3e36c14620414d17e77f4a26cebba/libstdc%2B%2B-v3%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.ac?ref=5ee360d069e3e36c14620414d17e77f4a26cebba", "patch": "@@ -174,6 +174,9 @@ AC_CHECK_HEADERS(sys/sysinfo.h)\n GLIBCXX_CHECK_GET_NPROCS\n AC_CHECK_HEADERS(unistd.h)\n GLIBCXX_CHECK_SC_NPROCESSORS_ONLN\n+GLIBCXX_CHECK_SC_NPROC_ONLN\n+GLIBCXX_CHECK_PTHREADS_NUM_PROCESSORS_NP\n+GLIBCXX_CHECK_SYSCTL_HW_NCPU\n \n # Check for available headers.\n AC_CHECK_HEADERS([endian.h execinfo.h float.h fp.h ieeefp.h inttypes.h \\"}, {"sha": "ff034b16143b9a83e806c1372d0ff2c3d1f5e3c6", "filename": "libstdc++-v3/src/thread.cc", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ee360d069e3e36c14620414d17e77f4a26cebba/libstdc%2B%2B-v3%2Fsrc%2Fthread.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ee360d069e3e36c14620414d17e77f4a26cebba/libstdc%2B%2B-v3%2Fsrc%2Fthread.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fthread.cc?ref=5ee360d069e3e36c14620414d17e77f4a26cebba", "patch": "@@ -30,9 +30,27 @@\n #if defined(_GLIBCXX_USE_GET_NPROCS)\n # include <sys/sysinfo.h>\n # define _GLIBCXX_NPROCS get_nprocs()\n+#elif defined(_GLIBCXX_USE_PTHREADS_NUM_PROCESSORS_NP)\n+# define _GLIBCXX_NPROCS pthread_num_processors_np()\n+#elif defined(_GLIBCXX_USE_SYSCTL_HW_NCPU)\n+# include <stddef.h>\n+# include <sys/sysctl.h>\n+static inline int get_nprocs()\n+{\n+ int count;\n+ size_t size = sizeof(count);\n+ int mib[] = { CTL_HW, HW_NCPU };\n+ if (!sysctl(mib, 2, &count, &size, NULL, 0))\n+   return count;\n+ return 0;\n+}\n+# define _GLIBCXX_NPROCS get_nprocs()\n #elif defined(_GLIBCXX_USE_SC_NPROCESSORS_ONLN)\n # include <unistd.h>\n # define _GLIBCXX_NPROCS sysconf(_SC_NPROCESSORS_ONLN)\n+#elif defined(_GLIBCXX_USE_SC_NPROC_ONLN)\n+# include <unistd.h>\n+# define _GLIBCXX_NPROCS sysconf(_SC_NPROC_ONLN)\n #else\n # define _GLIBCXX_NPROCS 0\n #endif"}, {"sha": "e419192554637412edb01521e2f24b777a983f1c", "filename": "libstdc++-v3/testsuite/lib/libstdc++.exp", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ee360d069e3e36c14620414d17e77f4a26cebba/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ee360d069e3e36c14620414d17e77f4a26cebba/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp?ref=5ee360d069e3e36c14620414d17e77f4a26cebba", "patch": "@@ -1673,13 +1673,12 @@ proc check_v3_target_nprocs { } {\n \tset f [open $src \"w\"]\n         puts $f \"#include <bits/c++config.h>\"\n \tputs $f \"#if defined(_GLIBCXX_USE_GET_NPROCS)\"\n-\tputs $f \"#elif defined(_GLIBCXX_USE_SYSCONF)\"\n-        puts $f \"# include <unistd.h>\"\n-\tputs $f \"# if !defined(_SC_NPROCESSORS_ONLN)\"\n-\tputs $f \"#  error No sysconf option\"\n-\tputs $f \"# endif\"\n+\tputs $f \"#elif defined(_GLIBCXX_USE_PTHREADS_NUM_PROCESSORS_NP)\"\n+\tputs $f \"#elif defined(_GLIBCXX_USE_SYSCTL_HW_NCPU)\"\n+\tputs $f \"#elif defined(_GLIBCXX_USE_SC_NPROCESSORS_ONLN)\"\n+\tputs $f \"#elif defined(_GLIBCXX_USE_SC_NPROC_ONLN)\"\n \tputs $f \"#else\"\n-\tputs $f \"#  error No get_nprocs or sysconf\"\n+\tputs $f \"#  error hardware_concurrency not implemented\"\n \tputs $f \"#endif\"\n \tclose $f\n "}]}