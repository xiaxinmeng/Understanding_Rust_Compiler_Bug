{"sha": "d398949230786a4d678677fab0070ad779cc1c84", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDM5ODk0OTIzMDc4NmE0ZDY3ODY3N2ZhYjAwNzBhZDc3OWNjMWM4NA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-11-06T14:13:56Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-11-06T14:41:04Z"}, "message": "make PRE constant value IDs negative\n\nThis separates constant and non-constant value-ids to allow for\na more efficient constant_value_id_p and for more efficient bit-packing\ninside the bitmap sets which never contain any constant values.\n\nThere's further optimization opportunities but at this stage\nI'll do small refactorings.\n\n2020-11-06  Richard Biener  <rguenther@suse.de>\n\n\t* tree-ssa-sccvn.h (get_max_constant_value_id): Declare.\n\t(get_next_constant_value_id): Likewise.\n\t(value_id_constant_p): Inline and simplify.\n\t* tree-ssa-sccvn.c (constant_value_ids): Remove.\n\t(next_constant_value_id): Add.\n\t(get_or_alloc_constant_value_id): Adjust.\n\t(value_id_constant_p): Remove definition.\n\t(get_max_constant_value_id): Define.\n\t(get_next_value_id): Add assert for overflow.\n\t(get_next_constant_value_id): Define.\n\t(run_rpo_vn): Adjust.\n\t(free_rpo_vn): Likewise.\n\t(do_rpo_vn): Initialize next_constant_value_id.\n\t* tree-ssa-pre.c (constant_value_expressions): New.\n\t(add_to_value): Split into constant/non-constant value\n\thandling.  Avoid exact re-allocation.\n\t(vn_valnum_from_value_id): Adjust.\n\t(phi_translate_1): Remove spurious exact re-allocation.\n\t(bitmap_find_leader): Adjust.  Make sure we return\n\ta CONSTANT value for a constant value id.\n\t(do_pre_regular_insertion): Use 2 auto-elements for avail.\n\t(do_pre_partial_partial_insertion): Likewise.\n\t(init_pre): Allocate constant_value_expressions.\n\t(fini_pre): Release constant_value_expressions.", "tree": {"sha": "4f9140fee42f85962b5b44af1c26357e2472706b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f9140fee42f85962b5b44af1c26357e2472706b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d398949230786a4d678677fab0070ad779cc1c84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d398949230786a4d678677fab0070ad779cc1c84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d398949230786a4d678677fab0070ad779cc1c84", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d398949230786a4d678677fab0070ad779cc1c84/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22175d0dc6a89ddd630f19d0f32a2d1ddb046807", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22175d0dc6a89ddd630f19d0f32a2d1ddb046807", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22175d0dc6a89ddd630f19d0f32a2d1ddb046807"}], "stats": {"total": 103, "additions": 69, "deletions": 34}, "files": [{"sha": "65e8aaaca027e3c91816af8a2b2ebb7ad162a2c6", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 37, "deletions": 20, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d398949230786a4d678677fab0070ad779cc1c84/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d398949230786a4d678677fab0070ad779cc1c84/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=d398949230786a4d678677fab0070ad779cc1c84", "patch": "@@ -444,6 +444,9 @@ typedef class bitmap_set\n \n /* Mapping from value id to expressions with that value_id.  */\n static vec<bitmap> value_expressions;\n+/* ???  We want to just record a single expression for each constant\n+   value, one of kind CONSTANT.  */\n+static vec<bitmap> constant_value_expressions;\n \n /* Sets that we need to keep track of.  */\n typedef struct bb_bitmap_sets\n@@ -624,18 +627,30 @@ add_to_value (unsigned int v, pre_expr e)\n \n   gcc_checking_assert (get_expr_value_id (e) == v);\n \n-  if (v >= value_expressions.length ())\n+  if (value_id_constant_p (v))\n     {\n-      value_expressions.safe_grow_cleared (v + 1, true);\n-    }\n+      if (-v >= constant_value_expressions.length ())\n+\tconstant_value_expressions.safe_grow_cleared (-v + 1);\n \n-  set = value_expressions[v];\n-  if (!set)\n-    {\n-      set = BITMAP_ALLOC (&grand_bitmap_obstack);\n-      value_expressions[v] = set;\n+      set = constant_value_expressions[-v];\n+      if (!set)\n+\t{\n+\t  set = BITMAP_ALLOC (&grand_bitmap_obstack);\n+\t  constant_value_expressions[-v] = set;\n+\t}\n     }\n+  else\n+    {\n+      if (v >= value_expressions.length ())\n+\tvalue_expressions.safe_grow_cleared (v + 1);\n \n+      set = value_expressions[v];\n+      if (!set)\n+\t{\n+\t  set = BITMAP_ALLOC (&grand_bitmap_obstack);\n+\t  value_expressions[v] = set;\n+\t}\n+    }\n   bitmap_set_bit (set, get_or_alloc_expression_id (e));\n }\n \n@@ -687,7 +702,11 @@ vn_valnum_from_value_id (unsigned int val)\n {\n   bitmap_iterator bi;\n   unsigned int i;\n-  bitmap exprset = value_expressions[val];\n+  bitmap exprset;\n+  if (value_id_constant_p (val))\n+    exprset = constant_value_expressions[-val];\n+  else\n+    exprset = value_expressions[val];\n   EXECUTE_IF_SET_IN_BITMAP (exprset, 0, i, bi)\n     {\n       pre_expr vexpr = expression_for_id (i);\n@@ -1451,8 +1470,6 @@ phi_translate_1 (bitmap_set_t dest,\n \t    else\n \t      {\n \t\tnew_val_id = get_next_value_id ();\n-\t\tvalue_expressions.safe_grow_cleared (get_max_value_id () + 1,\n-\t\t\t\t\t\t     true);\n \t\tnary = vn_nary_op_insert_pieces (newnary->length,\n \t\t\t\t\t\t newnary->opcode,\n \t\t\t\t\t\t newnary->type,\n@@ -1603,11 +1620,7 @@ phi_translate_1 (bitmap_set_t dest,\n \t    else\n \t      {\n \t\tif (changed || !same_valid)\n-\t\t  {\n-\t\t    new_val_id = get_next_value_id ();\n-\t\t    value_expressions.safe_grow_cleared\n-\t\t      (get_max_value_id () + 1, true);\n-\t\t  }\n+\t\t  new_val_id = get_next_value_id ();\n \t\telse\n \t\t  new_val_id = ref->value_id;\n \t\tif (!newoperands.exists ())\n@@ -1745,14 +1758,15 @@ bitmap_find_leader (bitmap_set_t set, unsigned int val)\n     {\n       unsigned int i;\n       bitmap_iterator bi;\n-      bitmap exprset = value_expressions[val];\n+      bitmap exprset = constant_value_expressions[-val];\n \n       EXECUTE_IF_SET_IN_BITMAP (exprset, 0, i, bi)\n \t{\n \t  pre_expr expr = expression_for_id (i);\n \t  if (expr->kind == CONSTANT)\n \t    return expr;\n \t}\n+      gcc_unreachable ();\n     }\n   if (bitmap_set_contains_value (set, val))\n     {\n@@ -3190,7 +3204,7 @@ do_pre_regular_insertion (basic_block block, basic_block dom)\n   bool new_stuff = false;\n   vec<pre_expr> exprs;\n   pre_expr expr;\n-  auto_vec<pre_expr> avail;\n+  auto_vec<pre_expr, 2> avail;\n   int i;\n \n   exprs = sorted_array_from_bitmap_set (ANTIC_IN (block));\n@@ -3357,7 +3371,7 @@ do_pre_partial_partial_insertion (basic_block block, basic_block dom)\n   bool new_stuff = false;\n   vec<pre_expr> exprs;\n   pre_expr expr;\n-  auto_vec<pre_expr> avail;\n+  auto_vec<pre_expr, 2> avail;\n   int i;\n \n   exprs = sorted_array_from_bitmap_set (PA_IN (block));\n@@ -4111,7 +4125,9 @@ init_pre (void)\n   expressions.create (0);\n   expressions.safe_push (NULL);\n   value_expressions.create (get_max_value_id () + 1);\n-  value_expressions.safe_grow_cleared (get_max_value_id () + 1, true);\n+  value_expressions.quick_grow_cleared (get_max_value_id () + 1);\n+  constant_value_expressions.create (get_max_constant_value_id () + 1);\n+  constant_value_expressions.quick_grow_cleared (get_max_constant_value_id () + 1);\n   name_to_id.create (0);\n \n   inserted_exprs = BITMAP_ALLOC (NULL);\n@@ -4142,6 +4158,7 @@ static void\n fini_pre ()\n {\n   value_expressions.release ();\n+  constant_value_expressions.release ();\n   expressions.release ();\n   BITMAP_FREE (inserted_exprs);\n   bitmap_obstack_release (&grand_bitmap_obstack);"}, {"sha": "8c9880e40cd952b670f5f34267be427891453881", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 21, "deletions": 13, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d398949230786a4d678677fab0070ad779cc1c84/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d398949230786a4d678677fab0070ad779cc1c84/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=d398949230786a4d678677fab0070ad779cc1c84", "patch": "@@ -288,7 +288,6 @@ vn_constant_hasher::equal (const vn_constant_s *vc1, const vn_constant_s *vc2)\n }\n \n static hash_table<vn_constant_hasher> *constant_to_value_id;\n-static bitmap constant_value_ids;\n \n \n /* Obstack we allocate the vn-tables elements from.  */\n@@ -322,6 +321,7 @@ tree VN_TOP;\n /* Unique counter for our value ids.  */\n \n static unsigned int next_value_id;\n+static int next_constant_value_id;\n \n \n /* Table of vn_ssa_aux_t's, one per ssa_name.  The vn_ssa_aux_t objects\n@@ -611,20 +611,11 @@ get_or_alloc_constant_value_id (tree constant)\n   vcp = XNEW (struct vn_constant_s);\n   vcp->hashcode = vc.hashcode;\n   vcp->constant = constant;\n-  vcp->value_id = get_next_value_id ();\n+  vcp->value_id = get_next_constant_value_id ();\n   *slot = vcp;\n-  bitmap_set_bit (constant_value_ids, vcp->value_id);\n   return vcp->value_id;\n }\n \n-/* Return true if V is a value id for a constant.  */\n-\n-bool\n-value_id_constant_p (unsigned int v)\n-{\n-  return bitmap_bit_p (constant_value_ids, v);\n-}\n-\n /* Compute the hash for a reference operand VRO1.  */\n \n static void\n@@ -5578,14 +5569,32 @@ get_max_value_id (void)\n   return next_value_id;\n }\n \n+/* Return the maximum constant value id we have ever seen.  */\n+\n+unsigned int\n+get_max_constant_value_id (void)\n+{\n+  return -next_constant_value_id;\n+}\n+\n /* Return the next unique value id.  */\n \n unsigned int\n get_next_value_id (void)\n {\n+  gcc_checking_assert ((int)next_value_id > 0);\n   return next_value_id++;\n }\n \n+/* Return the next unique value id for constants.  */\n+\n+unsigned int\n+get_next_constant_value_id (void)\n+{\n+  gcc_checking_assert (next_constant_value_id < 0);\n+  return next_constant_value_id--;\n+}\n+\n \n /* Compare two expressions E1 and E2 and return true if they are equal.  */\n \n@@ -6654,7 +6663,6 @@ run_rpo_vn (vn_lookup_kind kind)\n \n   /* ???  Prune requirement of these.  */\n   constant_to_value_id = new hash_table<vn_constant_hasher> (23);\n-  constant_value_ids = BITMAP_ALLOC (NULL);\n \n   /* Initialize the value ids and prune out remaining VN_TOPs\n      from dead code.  */\n@@ -6721,7 +6729,6 @@ free_rpo_vn (void)\n \n   delete constant_to_value_id;\n   constant_to_value_id = NULL;\n-  BITMAP_FREE (constant_value_ids);\n }\n \n /* Hook for maybe_push_res_to_seq, lookup the expression in the VN tables.  */\n@@ -7446,6 +7453,7 @@ do_rpo_vn (function *fn, edge entry, bitmap exit_bbs,\n \t\t\t  / (n_basic_blocks_for_fn (fn) - NUM_FIXED_BLOCKS));\n   VN_TOP = create_tmp_var_raw (void_type_node, \"vn_top\");\n   next_value_id = 1;\n+  next_constant_value_id = -1;\n \n   vn_ssa_aux_hash = new hash_table <vn_ssa_aux_hasher> (region_size * 2);\n   gcc_obstack_init (&vn_ssa_aux_obstack);"}, {"sha": "3420e6bca09e780d85801fc65b8e5423eba7cb4b", "filename": "gcc/tree-ssa-sccvn.h", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d398949230786a4d678677fab0070ad779cc1c84/gcc%2Ftree-ssa-sccvn.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d398949230786a4d678677fab0070ad779cc1c84/gcc%2Ftree-ssa-sccvn.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.h?ref=d398949230786a4d678677fab0070ad779cc1c84", "patch": "@@ -269,11 +269,21 @@ bool vn_nary_op_eq (const_vn_nary_op_t const vno1,\n bool vn_nary_may_trap (vn_nary_op_t);\n bool vn_reference_may_trap (vn_reference_t);\n bool vn_reference_eq (const_vn_reference_t const, const_vn_reference_t const);\n+\n unsigned int get_max_value_id (void);\n+unsigned int get_max_constant_value_id (void);\n unsigned int get_next_value_id (void);\n+unsigned int get_next_constant_value_id (void);\n unsigned int get_constant_value_id (tree);\n unsigned int get_or_alloc_constant_value_id (tree);\n-bool value_id_constant_p (unsigned int);\n+\n+/* Return true if V is a value id for a constant.  */\n+static inline bool\n+value_id_constant_p (unsigned int v)\n+{\n+  return (int)v < 0;\n+}\n+\n tree fully_constant_vn_reference_p (vn_reference_t);\n tree vn_nary_simplify (vn_nary_op_t);\n "}]}