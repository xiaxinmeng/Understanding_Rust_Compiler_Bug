{"sha": "fae803b2db46b8baf1610948fea344475974b7da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmFlODAzYjJkYjQ2YjhiYWYxNjEwOTQ4ZmVhMzQ0NDc1OTc0YjdkYQ==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2019-05-21T22:03:37Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2019-05-21T22:03:37Z"}, "message": "rs6000: wh -> d+p8v\n\nThis replaces the \"wh\" constraint by \"d\", with isa \"p8v\".\n\n\n\t* config/rs6000/constraints.md (define_register_constraint \"wh\"):\n\tDelete.\n\t* config/rs6000/rs6000.h (enum r6000_reg_class_enum): Delete\n\tRS6000_CONSTRAINT_wh.\n\t* config/rs6000/rs6000.c (rs6000_debug_reg_global): Adjust.\n\t(rs6000_init_hard_regno_mode_ok): Adjust.\n\t* config/rs6000/rs6000.md: Replace \"wh\" constraint by \"wa\" with \"p8v\".\n\t* doc/md.texi (Machine Constraints): Adjust.\n\nFrom-SVN: r271483", "tree": {"sha": "6cd1fa1f00a4fc40bed7633dab4d8605bd47d37e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6cd1fa1f00a4fc40bed7633dab4d8605bd47d37e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fae803b2db46b8baf1610948fea344475974b7da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fae803b2db46b8baf1610948fea344475974b7da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fae803b2db46b8baf1610948fea344475974b7da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fae803b2db46b8baf1610948fea344475974b7da/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5007f60b33a58edbcba399b7e5083553bf604faf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5007f60b33a58edbcba399b7e5083553bf604faf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5007f60b33a58edbcba399b7e5083553bf604faf"}], "stats": {"total": 44, "additions": 24, "deletions": 20}, "files": [{"sha": "ce52649f31fe32cfe7541bd085c9bed3de0d639b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fae803b2db46b8baf1610948fea344475974b7da/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fae803b2db46b8baf1610948fea344475974b7da/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fae803b2db46b8baf1610948fea344475974b7da", "patch": "@@ -1,3 +1,14 @@\n+2019-05-21  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* config/rs6000/constraints.md (define_register_constraint \"wh\"):\n+\tDelete.\n+\t* config/rs6000/rs6000.h (enum r6000_reg_class_enum): Delete\n+\tRS6000_CONSTRAINT_wh.\n+\t* config/rs6000/rs6000.c (rs6000_debug_reg_global): Adjust.\n+\t(rs6000_init_hard_regno_mode_ok): Adjust.\n+\t* config/rs6000/rs6000.md: Replace \"wh\" constraint by \"wa\" with \"p8v\".\n+\t* doc/md.texi (Machine Constraints): Adjust.\n+\n 2019-05-21  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \tPR target/90547"}, {"sha": "c9f168f0b1d4d990f5dcba582d85db1810ddae08", "filename": "gcc/config/rs6000/constraints.md", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fae803b2db46b8baf1610948fea344475974b7da/gcc%2Fconfig%2Frs6000%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fae803b2db46b8baf1610948fea344475974b7da/gcc%2Fconfig%2Frs6000%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fconstraints.md?ref=fae803b2db46b8baf1610948fea344475974b7da", "patch": "@@ -71,9 +71,6 @@\n (define_register_constraint \"wg\" \"rs6000_constraints[RS6000_CONSTRAINT_wg]\"\n   \"If -mmfpgpr was used, a floating point register or NO_REGS.\")\n \n-(define_register_constraint \"wh\" \"rs6000_constraints[RS6000_CONSTRAINT_wh]\"\n-  \"Floating point register if direct moves are available, or NO_REGS.\")\n-\n (define_register_constraint \"wi\" \"rs6000_constraints[RS6000_CONSTRAINT_wi]\"\n   \"FP or VSX register to hold 64-bit integers for VSX insns or NO_REGS.\")\n "}, {"sha": "1a4cb76a8a104a91c64e523119358e3500de3f90", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fae803b2db46b8baf1610948fea344475974b7da/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fae803b2db46b8baf1610948fea344475974b7da/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=fae803b2db46b8baf1610948fea344475974b7da", "patch": "@@ -2512,7 +2512,6 @@ rs6000_debug_reg_global (void)\n \t   \"we reg_class = %s\\n\"\n \t   \"wf reg_class = %s\\n\"\n \t   \"wg reg_class = %s\\n\"\n-\t   \"wh reg_class = %s\\n\"\n \t   \"wi reg_class = %s\\n\"\n \t   \"wj reg_class = %s\\n\"\n \t   \"wk reg_class = %s\\n\"\n@@ -2537,7 +2536,6 @@ rs6000_debug_reg_global (void)\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_we]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wf]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wg]],\n-\t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wh]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wi]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wj]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wk]],\n@@ -3163,7 +3161,6 @@ rs6000_init_hard_regno_mode_ok (bool global_init_p)\n \twd - Preferred register class for V2DFmode.\n \twf - Preferred register class for V4SFmode.\n \twg - Float register for power6x move insns.\n-\twh - FP register for direct move instructions.\n \twi - FP or VSX register to hold 64-bit integers for VSX insns.\n \twj - FP or VSX register to hold 64-bit integers for direct moves.\n \twk - FP or VSX register to hold 64-bit doubles for direct moves.\n@@ -3208,7 +3205,6 @@ rs6000_init_hard_regno_mode_ok (bool global_init_p)\n \n   if (TARGET_DIRECT_MOVE)\n     {\n-      rs6000_constraints[RS6000_CONSTRAINT_wh] = FLOAT_REGS;\n       rs6000_constraints[RS6000_CONSTRAINT_wj]\t\t\t/* DImode  */\n \t= rs6000_constraints[RS6000_CONSTRAINT_wi];\n       rs6000_constraints[RS6000_CONSTRAINT_wk]\t\t\t/* DFmode  */"}, {"sha": "ca30639ff5c58f4b6f5016df040dd8885abada48", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fae803b2db46b8baf1610948fea344475974b7da/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fae803b2db46b8baf1610948fea344475974b7da/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=fae803b2db46b8baf1610948fea344475974b7da", "patch": "@@ -1253,7 +1253,6 @@ enum r6000_reg_class_enum {\n   RS6000_CONSTRAINT_we,\t\t/* VSX register if ISA 3.0 vector. */\n   RS6000_CONSTRAINT_wf,\t\t/* VSX register for V4SF */\n   RS6000_CONSTRAINT_wg,\t\t/* FPR register for -mmfpgpr */\n-  RS6000_CONSTRAINT_wh,\t\t/* FPR register for direct moves.  */\n   RS6000_CONSTRAINT_wi,\t\t/* FPR/VSX register to hold DImode */\n   RS6000_CONSTRAINT_wj,\t\t/* FPR/VSX register for DImode direct moves. */\n   RS6000_CONSTRAINT_wk,\t\t/* FPR/VSX register for DFmode direct moves. */"}, {"sha": "398398ca8cff775df3a60c515cc7fde709c1e77a", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fae803b2db46b8baf1610948fea344475974b7da/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fae803b2db46b8baf1610948fea344475974b7da/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=fae803b2db46b8baf1610948fea344475974b7da", "patch": "@@ -471,7 +471,7 @@\n (define_mode_attr f64_vsx [(DF \"ws\") (DD \"wn\")])\n \n ; Definitions for 64-bit direct move\n-(define_mode_attr f64_dm  [(DF \"wk\") (DD \"wh\")])\n+(define_mode_attr f64_dm  [(DF \"wk\") (DD \"d\")])\n \n ; Definitions for 64-bit use of altivec registers\n (define_mode_attr f64_av  [(DF \"wv\") (DD \"wn\")])\n@@ -7349,10 +7349,10 @@\n ;;\tFMR          MR         MT%0       MF%1       NOP\n (define_insn \"movsd_hardfloat\"\n   [(set (match_operand:SD 0 \"nonimmediate_operand\"\n-\t \"=!r,       wz,        m,         Z,         ?wh,       ?r,\n+\t \"=!r,       wz,        m,         Z,         ?d,        ?r,\n \t  f,         !r,        *c*l,      !r,        *h\")\n \t(match_operand:SD 1 \"input_operand\"\n-\t \"m,         Z,         r,         wx,        r,         wh,\n+\t \"m,         Z,         r,         wx,        r,         d,\n \t  f,         r,         r,         *h,        0\"))]\n   \"(register_operand (operands[0], SDmode)\n    || register_operand (operands[1], SDmode))\n@@ -7371,7 +7371,10 @@\n    nop\"\n   [(set_attr \"type\"\n \t\"load,       fpload,    store,     fpstore,   mffgpr,    mftgpr,\n-\t fpsimple,   *,         mtjmpr,    mfjmpr,    *\")])\n+\t fpsimple,   *,         mtjmpr,    mfjmpr,    *\")\n+   (set_attr \"isa\"\n+\t\"*,          *,         *,         *,         p8v,       p8v,\n+\t *,          *,         *,         *,         *\")])\n \n ;;\tMR           MT%0       MF%0       LWZ        STW        LI\n ;;\tLIS          G-const.   F/n-const  NOP\n@@ -7684,7 +7687,7 @@\n             \"*,           *,          *,          p9v,        p9v,\n              *,           *,          *,          *,          *,\n              *,           *,          *,          *,          *,\n-             *,           *,          *,          *,          *\")])\n+             *,           *,          *,          p8v,        p8v\")])\n \n ;;           STD      LD       MR      MT<SPR> MF<SPR> G-const\n ;;           H-const  F-const  Special\n@@ -7737,8 +7740,8 @@\n ;; problematical.  Don't allow direct move for this case.\n \n (define_insn_and_split \"*mov<mode>_64bit_dm\"\n-  [(set (match_operand:FMOVE128_FPR 0 \"nonimmediate_operand\" \"=m,d,d,d,Y,r,r,r,wh\")\n-\t(match_operand:FMOVE128_FPR 1 \"input_operand\" \"d,m,d,<zero_fp>,r,<zero_fp>Y,r,wh,r\"))]\n+  [(set (match_operand:FMOVE128_FPR 0 \"nonimmediate_operand\" \"=m,d,d,d,Y,r,r,r,d\")\n+\t(match_operand:FMOVE128_FPR 1 \"input_operand\" \"d,m,d,<zero_fp>,r,<zero_fp>Y,r,d,r\"))]\n   \"TARGET_HARD_FLOAT && TARGET_POWERPC64 && FLOAT128_2REG_P (<MODE>mode)\n    && (<MODE>mode != TDmode || WORDS_BIG_ENDIAN)\n    && (gpc_reg_operand (operands[0], <MODE>mode)\n@@ -7747,7 +7750,8 @@\n   \"&& reload_completed\"\n   [(pc)]\n { rs6000_split_multireg_move (operands[0], operands[1]); DONE; }\n-  [(set_attr \"length\" \"8,8,8,8,12,12,8,8,8\")])\n+  [(set_attr \"length\" \"8,8,8,8,12,12,8,8,8\")\n+   (set_attr \"isa\" \"*,*,*,*,*,*,*,p8v,p8v\")])\n \n (define_insn_and_split \"*movtd_64bit_nodm\"\n   [(set (match_operand:TD 0 \"nonimmediate_operand\" \"=m,d,d,Y,r,r\")"}, {"sha": "daf0195fe3bf7ad41f70f1f200676cab2cbb203f", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fae803b2db46b8baf1610948fea344475974b7da/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fae803b2db46b8baf1610948fea344475974b7da/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=fae803b2db46b8baf1610948fea344475974b7da", "patch": "@@ -3197,7 +3197,7 @@ Altivec vector register\n Any VSX register if the @option{-mvsx} option was used or NO_REGS.\n \n When using any of the register constraints (@code{wa}, @code{wd},\n-@code{wf}, @code{wg}, @code{wh}, @code{wi}, @code{wj}, @code{wk},\n+@code{wf}, @code{wg}, @code{wi}, @code{wj}, @code{wk},\n @code{wl}, @code{wm}, @code{wp}, @code{wq}, @code{ws},\n @code{wt}, @code{wv}, or @code{ww})\n that take VSX registers, you must use @code{%x<n>} in the template so\n@@ -3259,9 +3259,6 @@ VSX vector register to hold vector float data or NO_REGS.\n @item wg\n If @option{-mmfpgpr} was used, a floating point register or NO_REGS.\n \n-@item wh\n-Floating point register if direct moves are available, or NO_REGS.\n-\n @item wi\n FP or VSX register to hold 64-bit integers for VSX insns or NO_REGS.\n "}]}