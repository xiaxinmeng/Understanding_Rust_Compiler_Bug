{"sha": "4ab9d9ce3366e51ccfe8a6a1a94e0eafedec5abb", "node_id": "C_kwDOANBUbNoAKDRhYjlkOWNlMzM2NmU1MWNjZmU4YTZhMWE5NGUwZWFmZWRlYzVhYmI", "commit": {"author": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2023-03-01T22:09:47Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2023-03-03T19:27:24Z"}, "message": "gccrs: Fix missing move and copy constructors missing the associated-path\n\nAddresses #1524\n\nSigned-off-by: Philip Herron <herron.philip@googlemail.com>\n\ngcc/rust/ChangeLog:\n\n\t* ast/rust-ast.cc (QualifiedPathInType::as_string): add missing to string\n\t* ast/rust-path.h: add missing copy+move constructors and assignment overloads\n\t* hir/tree/rust-hir-path.h: likewise\n\t* hir/tree/rust-hir.cc (QualifiedPathInType::as_string): add missing to string\n\ngcc/testsuite/ChangeLog:\n\n\t* rust/compile/parse_associated_type_as_generic_arg.rs: it now works without -fsyntax-only\n\t* rust/compile/parse_associated_type_as_generic_arg2.rs: likewise", "tree": {"sha": "341d783caf88e7061cb929c17426120141072297", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/341d783caf88e7061cb929c17426120141072297"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ab9d9ce3366e51ccfe8a6a1a94e0eafedec5abb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ab9d9ce3366e51ccfe8a6a1a94e0eafedec5abb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ab9d9ce3366e51ccfe8a6a1a94e0eafedec5abb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ab9d9ce3366e51ccfe8a6a1a94e0eafedec5abb/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22465fbc8cca239aadcb35cd51d820d6d7213238", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22465fbc8cca239aadcb35cd51d820d6d7213238", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22465fbc8cca239aadcb35cd51d820d6d7213238"}], "stats": {"total": 103, "additions": 77, "deletions": 26}, "files": [{"sha": "bb3562a73a3f6c44198003523f90b155b6b3da68", "filename": "gcc/rust/ast/rust-ast.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ab9d9ce3366e51ccfe8a6a1a94e0eafedec5abb/gcc%2Frust%2Fast%2Frust-ast.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ab9d9ce3366e51ccfe8a6a1a94e0eafedec5abb/gcc%2Frust%2Fast%2Frust-ast.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast.cc?ref=4ab9d9ce3366e51ccfe8a6a1a94e0eafedec5abb", "patch": "@@ -2397,6 +2397,7 @@ QualifiedPathInType::as_string () const\n    * literalised */\n   std::string str = path_type.as_string ();\n \n+  str += \"::\" + associated_segment->as_string ();\n   for (const auto &segment : segments)\n     str += \"::\" + segment->as_string ();\n "}, {"sha": "5f7c5e35f25855c27ec6bef65162a28c9a51988e", "filename": "gcc/rust/ast/rust-path.h", "status": "modified", "additions": 63, "deletions": 9, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ab9d9ce3366e51ccfe8a6a1a94e0eafedec5abb/gcc%2Frust%2Fast%2Frust-path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ab9d9ce3366e51ccfe8a6a1a94e0eafedec5abb/gcc%2Frust%2Fast%2Frust-path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-path.h?ref=4ab9d9ce3366e51ccfe8a6a1a94e0eafedec5abb", "patch": "@@ -202,6 +202,9 @@ class GenericArg\n     return *this;\n   }\n \n+  GenericArg (GenericArg &&other) = default;\n+  GenericArg &operator= (GenericArg &&other) = default;\n+\n   bool is_error () const { return kind == Kind::Error; }\n \n   Kind get_kind () const { return kind; }\n@@ -411,20 +414,33 @@ struct GenericArgs\n \n   // copy constructor with vector clone\n   GenericArgs (GenericArgs const &other)\n-    : lifetime_args (other.lifetime_args), generic_args (other.generic_args),\n-      binding_args (other.binding_args), locus (other.locus)\n-  {}\n+    : lifetime_args (other.lifetime_args), binding_args (other.binding_args),\n+      locus (other.locus)\n+  {\n+    generic_args.clear ();\n+    generic_args.reserve (other.generic_args.size ());\n+    for (const auto &arg : other.generic_args)\n+      {\n+\tgeneric_args.push_back (GenericArg (arg));\n+      }\n+  }\n \n   ~GenericArgs () = default;\n \n   // overloaded assignment operator to vector clone\n   GenericArgs &operator= (GenericArgs const &other)\n   {\n     lifetime_args = other.lifetime_args;\n-    generic_args = other.generic_args;\n     binding_args = other.binding_args;\n     locus = other.locus;\n \n+    generic_args.clear ();\n+    generic_args.reserve (other.generic_args.size ());\n+    for (const auto &arg : other.generic_args)\n+      {\n+\tgeneric_args.push_back (GenericArg (arg));\n+      }\n+\n     return *this;\n   }\n \n@@ -672,6 +688,7 @@ class TypePathSegment\n   bool has_separating_scope_resolution;\n   NodeId node_id;\n \n+public:\n   // Clone function implementation - not pure virtual as overrided by\n   // subclasses\n   virtual TypePathSegment *clone_type_path_segment_impl () const\n@@ -705,6 +722,25 @@ class TypePathSegment\n       node_id (Analysis::Mappings::get ()->get_next_node_id ())\n   {}\n \n+  TypePathSegment (TypePathSegment const &other)\n+    : ident_segment (other.ident_segment), locus (other.locus),\n+      has_separating_scope_resolution (other.has_separating_scope_resolution),\n+      node_id (other.node_id)\n+  {}\n+\n+  TypePathSegment &operator= (TypePathSegment const &other)\n+  {\n+    ident_segment = other.ident_segment;\n+    locus = other.locus;\n+    has_separating_scope_resolution = other.has_separating_scope_resolution;\n+    node_id = other.node_id;\n+\n+    return *this;\n+  }\n+\n+  TypePathSegment (TypePathSegment &&other) = default;\n+  TypePathSegment &operator= (TypePathSegment &&other) = default;\n+\n   virtual std::string as_string () const { return ident_segment.as_string (); }\n \n   /* Returns whether the type path segment is in an error state. May be\n@@ -780,6 +816,23 @@ class TypePathSegmentGeneric : public TypePathSegment\n \t\t\t\t std::move (binding_args)))\n   {}\n \n+  // Copy constructor with vector clone\n+  TypePathSegmentGeneric (TypePathSegmentGeneric const &other)\n+    : TypePathSegment (other), generic_args (other.generic_args)\n+  {}\n+\n+  // Overloaded assignment operator with vector clone\n+  TypePathSegmentGeneric &operator= (TypePathSegmentGeneric const &other)\n+  {\n+    generic_args = other.generic_args;\n+\n+    return *this;\n+  }\n+\n+  // move constructors\n+  TypePathSegmentGeneric (TypePathSegmentGeneric &&other) = default;\n+  TypePathSegmentGeneric &operator= (TypePathSegmentGeneric &&other) = default;\n+\n   std::string as_string () const override;\n \n   void accept_vis (ASTVisitor &vis) override;\n@@ -791,7 +844,6 @@ class TypePathSegmentGeneric : public TypePathSegment\n     return generic_args;\n   }\n \n-protected:\n   // Use covariance to override base class method\n   TypePathSegmentGeneric *clone_type_path_segment_impl () const override\n   {\n@@ -941,7 +993,6 @@ class TypePathSegmentFunction : public TypePathSegment\n     return function_path;\n   }\n \n-protected:\n   // Use covariance to override base class method\n   TypePathSegmentFunction *clone_type_path_segment_impl () const override\n   {\n@@ -1242,13 +1293,13 @@ class QualifiedPathInType : public TypeNoBounds\n       segments (std::move (path_segments)), locus (locus)\n   {}\n \n-  /* TODO: maybe make a shortcut constructor that has QualifiedPathType\n-   * elements as params */\n-\n   // Copy constructor with vector clone\n   QualifiedPathInType (QualifiedPathInType const &other)\n     : path_type (other.path_type), locus (other.locus)\n   {\n+    auto seg = other.associated_segment->clone_type_path_segment_impl ();\n+    associated_segment = std::unique_ptr<TypePathSegment> (seg);\n+\n     segments.reserve (other.segments.size ());\n     for (const auto &e : other.segments)\n       segments.push_back (e->clone_type_path_segment ());\n@@ -1257,6 +1308,9 @@ class QualifiedPathInType : public TypeNoBounds\n   // Overloaded assignment operator with vector clone\n   QualifiedPathInType &operator= (QualifiedPathInType const &other)\n   {\n+    auto seg = other.associated_segment->clone_type_path_segment_impl ();\n+    associated_segment = std::unique_ptr<TypePathSegment> (seg);\n+\n     path_type = other.path_type;\n     locus = other.locus;\n "}, {"sha": "f8a7dab00010dd8f4627d3b8c0de6bc7a51e67f4", "filename": "gcc/rust/hir/tree/rust-hir-path.h", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ab9d9ce3366e51ccfe8a6a1a94e0eafedec5abb/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ab9d9ce3366e51ccfe8a6a1a94e0eafedec5abb/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-path.h?ref=4ab9d9ce3366e51ccfe8a6a1a94e0eafedec5abb", "patch": "@@ -431,6 +431,7 @@ class TypePathSegment\n   bool has_separating_scope_resolution;\n   SegmentType type;\n \n+public:\n   // Clone function implementation - not pure virtual as overrided by subclasses\n   virtual TypePathSegment *clone_type_path_segment_impl () const\n   {\n@@ -538,7 +539,6 @@ class TypePathSegmentGeneric : public TypePathSegment\n     return SegmentType::GENERIC;\n   }\n \n-protected:\n   // Use covariance to override base class method\n   TypePathSegmentGeneric *clone_type_path_segment_impl () const override\n   {\n@@ -654,7 +654,6 @@ class TypePathSegmentFunction : public TypePathSegment\n \n   TypePathFunction &get_function_path () { return function_path; }\n \n-protected:\n   // Use covariance to override base class method\n   TypePathSegmentFunction *clone_type_path_segment_impl () const override\n   {\n@@ -933,24 +932,24 @@ class QualifiedPathInType : public TypeNoBounds\n       segments (std::move (path_segments))\n   {}\n \n-  /* TODO: maybe make a shortcut constructor that has QualifiedPathType elements\n-   * as params */\n-\n   // Copy constructor with vector clone\n   QualifiedPathInType (QualifiedPathInType const &other)\n     : TypeNoBounds (other.mappings, other.locus), path_type (other.path_type)\n   {\n+    auto seg = other.associated_segment->clone_type_path_segment_impl ();\n+    associated_segment = std::unique_ptr<TypePathSegment> (seg);\n+\n     segments.reserve (other.segments.size ());\n     for (const auto &e : other.segments)\n       segments.push_back (e->clone_type_path_segment ());\n-\n-    // Untested.\n-    gcc_unreachable ();\n   }\n \n   // Overloaded assignment operator with vector clone\n   QualifiedPathInType &operator= (QualifiedPathInType const &other)\n   {\n+    auto seg = other.associated_segment->clone_type_path_segment_impl ();\n+    associated_segment = std::unique_ptr<TypePathSegment> (seg);\n+\n     path_type = other.path_type;\n     locus = other.locus;\n     mappings = other.mappings;"}, {"sha": "3a4362f92b4769e3721ebbe368e367ef2191b8ee", "filename": "gcc/rust/hir/tree/rust-hir.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ab9d9ce3366e51ccfe8a6a1a94e0eafedec5abb/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ab9d9ce3366e51ccfe8a6a1a94e0eafedec5abb/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.cc?ref=4ab9d9ce3366e51ccfe8a6a1a94e0eafedec5abb", "patch": "@@ -2112,6 +2112,7 @@ QualifiedPathInType::as_string () const\n {\n   std::string str = path_type.as_string ();\n \n+  str += \"::\" + associated_segment->as_string ();\n   for (const auto &segment : segments)\n     {\n       str += \"::\" + segment->as_string ();"}, {"sha": "fbe79f00bde0246a6ab82beee99d9ee2786a7201", "filename": "gcc/testsuite/rust/compile/parse_associated_type_as_generic_arg.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ab9d9ce3366e51ccfe8a6a1a94e0eafedec5abb/gcc%2Ftestsuite%2Frust%2Fcompile%2Fparse_associated_type_as_generic_arg.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ab9d9ce3366e51ccfe8a6a1a94e0eafedec5abb/gcc%2Ftestsuite%2Frust%2Fcompile%2Fparse_associated_type_as_generic_arg.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fparse_associated_type_as_generic_arg.rs?ref=4ab9d9ce3366e51ccfe8a6a1a94e0eafedec5abb", "patch": "@@ -1,12 +1,10 @@\n-// { dg-additional-options \"-fsyntax-only\" }\n-\n trait Foo {\n     type A;\n \n     fn foo();\n }\n \n-struct S;\n+struct S; // { dg-warning \"struct is never constructed\" }\n \n impl Foo for S {\n     type A = i32;\n@@ -19,6 +17,6 @@ enum Maybe<T> {\n     Nothing,\n }\n \n-fn foo() -> Maybe<<S as Foo>::A> {\n+pub fn foo() -> Maybe<<S as Foo>::A> {\n     Maybe::Something(15)\n }"}, {"sha": "ba5d9a3936c94a9b6e165b26e47b7eaf54ea8295", "filename": "gcc/testsuite/rust/compile/parse_associated_type_as_generic_arg2.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ab9d9ce3366e51ccfe8a6a1a94e0eafedec5abb/gcc%2Ftestsuite%2Frust%2Fcompile%2Fparse_associated_type_as_generic_arg2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ab9d9ce3366e51ccfe8a6a1a94e0eafedec5abb/gcc%2Ftestsuite%2Frust%2Fcompile%2Fparse_associated_type_as_generic_arg2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fparse_associated_type_as_generic_arg2.rs?ref=4ab9d9ce3366e51ccfe8a6a1a94e0eafedec5abb", "patch": "@@ -1,12 +1,10 @@\n-// { dg-additional-options \"-fsyntax-only\" }\n-\n trait Foo {\n     type A;\n \n     fn foo();\n }\n \n-struct S;\n+struct S; // { dg-warning \"struct is never constructed\" }\n \n impl Foo for S {\n     type A = ();\n@@ -19,6 +17,6 @@ enum Maybe<T> {\n     Nothing,\n }\n \n-fn main() {\n-    let a: Maybe<<S as Foo>::A> = Maybe::Something(());\n+pub fn test() {\n+    let _a: Maybe<<S as Foo>::A> = Maybe::Something(());\n }"}]}