{"sha": "32ee472864ada44ef05b2a3b087b8ce413bee282", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzJlZTQ3Mjg2NGFkYTQ0ZWYwNWIyYTNiMDg3YjhjZTQxM2JlZTI4Mg==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2020-11-06T03:42:17Z"}, "committer": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2020-11-06T03:46:00Z"}, "message": "Improve overflow check\n\nConvert\nx < (short) ((unsigned short)x + const)\nto\nx <= SHORT_MAX \u2013 const\n(and similarly for other integral types) if const is not 0.\n\ngcc/\n\tPR tree-optimization/97223\n\t* match.pd (overflow detection and optimization): Handle conversions.\n\ngcc/testsuite/\n\n\t* gcc.dg/no-strict-overflow-4.c: Adjust expected output.", "tree": {"sha": "058c571d79ef476500b22795e764f3cce62c755d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/058c571d79ef476500b22795e764f3cce62c755d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/32ee472864ada44ef05b2a3b087b8ce413bee282", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32ee472864ada44ef05b2a3b087b8ce413bee282", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32ee472864ada44ef05b2a3b087b8ce413bee282", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32ee472864ada44ef05b2a3b087b8ce413bee282/comments", "author": null, "committer": null, "parents": [{"sha": "6483f05989ef31ebf2583deeb4753211ca2b7e17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6483f05989ef31ebf2583deeb4753211ca2b7e17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6483f05989ef31ebf2583deeb4753211ca2b7e17"}], "stats": {"total": 21, "additions": 13, "deletions": 8}, "files": [{"sha": "349eab61d6b3e158c520586f3b35aa1b9157c62d", "filename": "gcc/match.pd", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32ee472864ada44ef05b2a3b087b8ce413bee282/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32ee472864ada44ef05b2a3b087b8ce413bee282/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=32ee472864ada44ef05b2a3b087b8ce413bee282", "patch": "@@ -4945,18 +4945,22 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n /* When one argument is a constant, overflow detection can be simplified.\n    Currently restricted to single use so as not to interfere too much with\n    ADD_OVERFLOW detection in tree-ssa-math-opts.c.\n-   A + CST CMP A  ->  A CMP' CST' */\n+   CONVERT?(CONVERT?(A) + CST) CMP A  ->  A CMP' CST' */\n (for cmp (lt le ge gt)\n      out (gt gt le le)\n  (simplify\n-  (cmp:c (plus@2 @0 INTEGER_CST@1) @0)\n-  (if (TYPE_UNSIGNED (TREE_TYPE (@0))\n-       && TYPE_OVERFLOW_WRAPS (TREE_TYPE (@0))\n+  (cmp:c (convert?@3 (plus@2 (convert?@4 @0) INTEGER_CST@1)) @0)\n+  (if (TYPE_OVERFLOW_WRAPS (TREE_TYPE (@2))\n+       && types_match (TREE_TYPE (@0), TREE_TYPE (@3))\n+       && tree_nop_conversion_p (TREE_TYPE (@4), TREE_TYPE (@0))\n        && wi::to_wide (@1) != 0\n        && single_use (@2))\n-   (with { unsigned int prec = TYPE_PRECISION (TREE_TYPE (@0)); }\n+   (with {\n+     unsigned int prec = TYPE_PRECISION (TREE_TYPE (@0));\n+     signop sign = TYPE_SIGN (TREE_TYPE (@0));\n+    }\n     (out @0 { wide_int_to_tree (TREE_TYPE (@0),\n-\t\t\t        wi::max_value (prec, UNSIGNED)\n+\t\t\t        wi::max_value (prec, sign)\n \t\t\t\t- wi::to_wide (@1)); })))))\n \n /* To detect overflow in unsigned A - B, A < B is simpler than A - B > A."}, {"sha": "90145ff9422ad4d56b730896e4af1b8592fc9583", "filename": "gcc/testsuite/gcc.dg/no-strict-overflow-4.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32ee472864ada44ef05b2a3b087b8ce413bee282/gcc%2Ftestsuite%2Fgcc.dg%2Fno-strict-overflow-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32ee472864ada44ef05b2a3b087b8ce413bee282/gcc%2Ftestsuite%2Fgcc.dg%2Fno-strict-overflow-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fno-strict-overflow-4.c?ref=32ee472864ada44ef05b2a3b087b8ce413bee282", "patch": "@@ -4,12 +4,13 @@\n /* Source: Ian Lance Taylor.  Dual of strict-overflow-4.c.  */\n \n /* We can only simplify the conditional when using strict overflow\n-   semantics.  */\n+   semantics or when using wrap overflow semantics. -fno-strict-overflow is\n+   equivalent to -fwrapv.  */\n \n int\n foo (int i)\n {\n   return i + 1 > i;\n }\n \n-/* { dg-final { scan-tree-dump \"\\[^ \\]*_.(\\\\\\(D\\\\\\))? (>|<) \\[^ \\]*_.\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump \"\\[^ \\]*_.(\\\\\\(D\\\\\\))? != \\[0-9]+\" \"optimized\" } } */"}]}