{"sha": "ad7be0090c0276c2526887944f5f6927e20507f2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQ3YmUwMDkwYzAyNzZjMjUyNjg4Nzk0NGY1ZjY5MjdlMjA1MDdmMg==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2011-04-08T19:39:48Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2011-04-08T19:39:48Z"}, "message": "gcc_update (gcc/config/arm/arm-tables.opt): New dependencies.\n\ncontrib:\n\t* gcc_update (gcc/config/arm/arm-tables.opt): New dependencies.\n\ngcc:\n\t* config.gcc (arm*-*-*): Add arm/arm-tables.opt to extra_options.\n\t* config/arm/arm-arches.def: New.\n\t* config/arm/arm-opts.h: New.\n\t* config/arm/genopt.sh: New.\n\t* config/arm/arm-tables.opt: New (generated).\n\t* config/arm/arm.c (arm_handle_option, arm_target_help,\n\tTARGET_HANDLE_OPTION, TARGET_HELP, arm_find_cpu): Remove.\n\t(all_architectures): Get most table contents from arm-arches.def.\n\t(arm_option_override): Set arm_selected_arch, arm_selected_cpu and\n\tarm_selected_tune here.\n\t* config/arm/arm.h (enum processor_type): Move to arm-opts.h.\n\t* config/arm/arm.opt (config/arm/arm-opts.h): New HeaderInclude.\n\t(march=, mcpu=, mtune=): Use Enum and Var.\n\t* config/arm/t-arm ($(srcdir)/config/arm/arm-tables.opt): New.\n\t(arm.o): Update dependencies.\n\nFrom-SVN: r172205", "tree": {"sha": "224638ec4303904967918f2aaa77811b650345f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/224638ec4303904967918f2aaa77811b650345f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad7be0090c0276c2526887944f5f6927e20507f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad7be0090c0276c2526887944f5f6927e20507f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad7be0090c0276c2526887944f5f6927e20507f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad7be0090c0276c2526887944f5f6927e20507f2/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ecbb6fb7e40ad675386f78937cc153ce5bfaf990", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecbb6fb7e40ad675386f78937cc153ce5bfaf990", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ecbb6fb7e40ad675386f78937cc153ce5bfaf990"}], "stats": {"total": 751, "additions": 564, "deletions": 187}, "files": [{"sha": "8363e785c6745da7a2f6466bb6cd1417bcd71897", "filename": "contrib/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad7be0090c0276c2526887944f5f6927e20507f2/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad7be0090c0276c2526887944f5f6927e20507f2/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=ad7be0090c0276c2526887944f5f6927e20507f2", "patch": "@@ -1,3 +1,7 @@\n+2011-04-08  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc_update (gcc/config/arm/arm-tables.opt): New dependencies.\n+\n 2011-03-22  Joseph Myers  <joseph@codesourcery.com>\n \n \t* compare-all-tests (all_targets): Remove crx and m68hc11."}, {"sha": "cc847fb6c389cd407621e8c6a9766ff09c4dcd13", "filename": "contrib/gcc_update", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad7be0090c0276c2526887944f5f6927e20507f2/contrib%2Fgcc_update", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad7be0090c0276c2526887944f5f6927e20507f2/contrib%2Fgcc_update", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fgcc_update?ref=ad7be0090c0276c2526887944f5f6927e20507f2", "patch": "@@ -4,8 +4,8 @@\n # repository, with an emphasis on treating generated files correctly, so\n # that autoconf, gperf et al are not required for the ``end'' user.\n #\n-# (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2009, 2010\n-# Free Software Foundation\n+# (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2009, 2010,\n+# 2011 Free Software Foundation\n # Originally by Gerald Pfeifer <pfeifer@dbai.tuwien.ac.at>, August 1998.\n #\n # This script is Free Software, and it can be copied, distributed and\n@@ -80,6 +80,7 @@ gcc/cstamp-h.in: gcc/configure.ac\n gcc/config.in: gcc/cstamp-h.in\n gcc/fixinc/fixincl.x: gcc/fixinc/fixincl.tpl gcc/fixinc/inclhack.def\n gcc/config/arm/arm-tune.md: gcc/config/arm/arm-cores.def gcc/config/arm/gentune.sh\n+gcc/config/arm/arm-tables.opt: gcc/config/arm/arm-arches.def gcc/config/arm/arm-cores.def gcc/config/arm/genopt.sh\n # And then, language-specific files\n gcc/cp/cfns.h: gcc/cp/cfns.gperf\n gcc/java/keyword.h: gcc/java/keyword.gperf"}, {"sha": "9fd40ebf7a0be3d8ce3c8c1d43532de912f74b12", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad7be0090c0276c2526887944f5f6927e20507f2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad7be0090c0276c2526887944f5f6927e20507f2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ad7be0090c0276c2526887944f5f6927e20507f2", "patch": "@@ -1,3 +1,20 @@\n+2011-04-08  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* config.gcc (arm*-*-*): Add arm/arm-tables.opt to extra_options.\n+\t* config/arm/arm-arches.def: New.\n+\t* config/arm/arm-opts.h: New.\n+\t* config/arm/genopt.sh: New.\n+\t* config/arm/arm-tables.opt: New (generated).\n+\t* config/arm/arm.c (arm_handle_option, arm_target_help,\n+\tTARGET_HANDLE_OPTION, TARGET_HELP, arm_find_cpu): Remove.\n+\t(all_architectures): Get most table contents from arm-arches.def.\n+\t(arm_option_override): Set arm_selected_arch, arm_selected_cpu and\n+\tarm_selected_tune here.\n+\t* config/arm/arm.h (enum processor_type): Move to arm-opts.h.\n+\t* config/arm/arm.opt (config/arm/arm-opts.h): New HeaderInclude.\n+\t(march=, mcpu=, mtune=): Use Enum and Var.\n+\t* config/arm/t-arm ($(srcdir)/config/arm/arm-tables.opt): New.\n+\t(arm.o): Update dependencies.\n \n 2011-04-08 \ufffdBasile Starynkevitch \ufffd<basile@starynkevitch.net>\n "}, {"sha": "8be3afc9f2b7975c26c71308f5ce87c07da98e21", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad7be0090c0276c2526887944f5f6927e20507f2/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad7be0090c0276c2526887944f5f6927e20507f2/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=ad7be0090c0276c2526887944f5f6927e20507f2", "patch": "@@ -296,6 +296,7 @@ arm*-*-*)\n \textra_headers=\"mmintrin.h arm_neon.h\"\n \tc_target_objs=\"arm-c.o\"\n \tcxx_target_objs=\"arm-c.o\"\n+\textra_options=\"${extra_options} arm/arm-tables.opt\"\n \t;;\n avr-*-*)\n \tcpu_type=avr"}, {"sha": "1086233b293dec75338bf676efefa881e59cbf95", "filename": "gcc/config/arm/arm-arches.def", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad7be0090c0276c2526887944f5f6927e20507f2/gcc%2Fconfig%2Farm%2Farm-arches.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad7be0090c0276c2526887944f5f6927e20507f2/gcc%2Fconfig%2Farm%2Farm-arches.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-arches.def?ref=ad7be0090c0276c2526887944f5f6927e20507f2", "patch": "@@ -0,0 +1,59 @@\n+/* ARM CPU architectures.\n+   Copyright (C) 1991, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001,\n+   2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n+   Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+/* Before using #include to read this file, define a macro:\n+\n+      ARM_ARCH(NAME, CORE, ARCH, FLAGS)\n+\n+   The NAME is the name of the architecture, represented as a string\n+   constant.  The CORE is the identifier for a core representative of\n+   this architecture.  ARCH is the architecture revision.  FLAGS are\n+   the flags implied by the architecture.\n+\n+   genopt.sh assumes no whitespace up to the first \",\" in each entry.  */\n+\n+ARM_ARCH(\"armv2\",   arm2,       2,   FL_CO_PROC | FL_MODE26 | FL_FOR_ARCH2)\n+ARM_ARCH(\"armv2a\",  arm2,       2,   FL_CO_PROC | FL_MODE26 | FL_FOR_ARCH2)\n+ARM_ARCH(\"armv3\",   arm6,       3,   FL_CO_PROC | FL_MODE26 | FL_FOR_ARCH3)\n+ARM_ARCH(\"armv3m\",  arm7m,      3M,  FL_CO_PROC | FL_MODE26 | FL_FOR_ARCH3M)\n+ARM_ARCH(\"armv4\",   arm7tdmi,   4,   FL_CO_PROC | FL_MODE26 | FL_FOR_ARCH4)\n+/* Strictly, FL_MODE26 is a permitted option for v4t, but there are no\n+   implementations that support it, so we will leave it out for now.  */\n+ARM_ARCH(\"armv4t\",  arm7tdmi,   4T,  FL_CO_PROC |             FL_FOR_ARCH4T)\n+ARM_ARCH(\"armv5\",   arm10tdmi,  5,   FL_CO_PROC |             FL_FOR_ARCH5)\n+ARM_ARCH(\"armv5t\",  arm10tdmi,  5T,  FL_CO_PROC |             FL_FOR_ARCH5T)\n+ARM_ARCH(\"armv5e\",  arm1026ejs, 5E,  FL_CO_PROC |             FL_FOR_ARCH5E)\n+ARM_ARCH(\"armv5te\", arm1026ejs, 5TE, FL_CO_PROC |             FL_FOR_ARCH5TE)\n+ARM_ARCH(\"armv6\",   arm1136js,  6,   FL_CO_PROC |             FL_FOR_ARCH6)\n+ARM_ARCH(\"armv6j\",  arm1136js,  6J,  FL_CO_PROC |             FL_FOR_ARCH6J)\n+ARM_ARCH(\"armv6k\",  mpcore,\t6K,  FL_CO_PROC |             FL_FOR_ARCH6K)\n+ARM_ARCH(\"armv6z\",  arm1176jzs, 6Z,  FL_CO_PROC |             FL_FOR_ARCH6Z)\n+ARM_ARCH(\"armv6zk\", arm1176jzs, 6ZK, FL_CO_PROC |             FL_FOR_ARCH6ZK)\n+ARM_ARCH(\"armv6t2\", arm1156t2s, 6T2, FL_CO_PROC |             FL_FOR_ARCH6T2)\n+ARM_ARCH(\"armv6-m\", cortexm1,\t6M,\t\t\t      FL_FOR_ARCH6M)\n+ARM_ARCH(\"armv7\",   cortexa8,\t7,   FL_CO_PROC |\t      FL_FOR_ARCH7)\n+ARM_ARCH(\"armv7-a\", cortexa8,\t7A,  FL_CO_PROC |\t      FL_FOR_ARCH7A)\n+ARM_ARCH(\"armv7-r\", cortexr4,\t7R,  FL_CO_PROC |\t      FL_FOR_ARCH7R)\n+ARM_ARCH(\"armv7-m\", cortexm3,\t7M,  FL_CO_PROC |\t      FL_FOR_ARCH7M)\n+ARM_ARCH(\"armv7e-m\", cortexm4,  7EM, FL_CO_PROC |\t      FL_FOR_ARCH7EM)\n+ARM_ARCH(\"ep9312\",  ep9312,     4T,  FL_LDSCHED | FL_CIRRUS | FL_FOR_ARCH4)\n+ARM_ARCH(\"iwmmxt\",  iwmmxt,     5TE, FL_LDSCHED | FL_STRONG | FL_FOR_ARCH5TE | FL_XSCALE | FL_IWMMXT)\n+ARM_ARCH(\"iwmmxt2\", iwmmxt2,    5TE, FL_LDSCHED | FL_STRONG | FL_FOR_ARCH5TE | FL_XSCALE | FL_IWMMXT)"}, {"sha": "f9f18036b92519b512a7a9d37b4f9a80acea94a6", "filename": "gcc/config/arm/arm-opts.h", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad7be0090c0276c2526887944f5f6927e20507f2/gcc%2Fconfig%2Farm%2Farm-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad7be0090c0276c2526887944f5f6927e20507f2/gcc%2Fconfig%2Farm%2Farm-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-opts.h?ref=ad7be0090c0276c2526887944f5f6927e20507f2", "patch": "@@ -0,0 +1,36 @@\n+/* Definitions for option handling for ARM.\n+   Copyright (C) 1991, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,\n+   2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n+   Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef ARM_OPTS_H\n+#define ARM_OPTS_H\n+\n+/* The various ARM cores.  */\n+enum processor_type\n+{\n+#define ARM_CORE(NAME, IDENT, ARCH, FLAGS, COSTS) \\\n+  IDENT,\n+#include \"arm-cores.def\"\n+#undef ARM_CORE\n+  /* Used to indicate that no processor has been specified.  */\n+  arm_none\n+};\n+\n+#endif"}, {"sha": "36cf2019682754af89df175babbca22bc028877f", "filename": "gcc/config/arm/arm-tables.opt", "status": "added", "additions": 341, "deletions": 0, "changes": 341, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad7be0090c0276c2526887944f5f6927e20507f2/gcc%2Fconfig%2Farm%2Farm-tables.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad7be0090c0276c2526887944f5f6927e20507f2/gcc%2Fconfig%2Farm%2Farm-tables.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-tables.opt?ref=ad7be0090c0276c2526887944f5f6927e20507f2", "patch": "@@ -0,0 +1,341 @@\n+; -*- buffer-read-only: t -*-\n+; Generated automatically by genopt.sh from arm-cores.def and arm-arches.def.\n+\n+; Copyright (C) 2011 Free Software Foundation, Inc.\n+;\n+; This file is part of GCC.\n+;\n+; GCC is free software; you can redistribute it and/or modify it under\n+; the terms of the GNU General Public License as published by the Free\n+; Software Foundation; either version 3, or (at your option) any later\n+; version.\n+;\n+; GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+; WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+; for more details.\n+;\n+; You should have received a copy of the GNU General Public License\n+; along with GCC; see the file COPYING3.  If not see\n+; <http://www.gnu.org/licenses/>.\n+\n+Enum\n+Name(processor_type) Type(enum processor_type)\n+Known ARM CPUs (for use with the -mcpu= and -mtune= options):\n+\n+EnumValue\n+Enum(processor_type) String(arm2) Value(arm2)\n+\n+EnumValue\n+Enum(processor_type) String(arm250) Value(arm250)\n+\n+EnumValue\n+Enum(processor_type) String(arm3) Value(arm3)\n+\n+EnumValue\n+Enum(processor_type) String(arm6) Value(arm6)\n+\n+EnumValue\n+Enum(processor_type) String(arm60) Value(arm60)\n+\n+EnumValue\n+Enum(processor_type) String(arm600) Value(arm600)\n+\n+EnumValue\n+Enum(processor_type) String(arm610) Value(arm610)\n+\n+EnumValue\n+Enum(processor_type) String(arm620) Value(arm620)\n+\n+EnumValue\n+Enum(processor_type) String(arm7) Value(arm7)\n+\n+EnumValue\n+Enum(processor_type) String(arm7d) Value(arm7d)\n+\n+EnumValue\n+Enum(processor_type) String(arm7di) Value(arm7di)\n+\n+EnumValue\n+Enum(processor_type) String(arm70) Value(arm70)\n+\n+EnumValue\n+Enum(processor_type) String(arm700) Value(arm700)\n+\n+EnumValue\n+Enum(processor_type) String(arm700i) Value(arm700i)\n+\n+EnumValue\n+Enum(processor_type) String(arm710) Value(arm710)\n+\n+EnumValue\n+Enum(processor_type) String(arm720) Value(arm720)\n+\n+EnumValue\n+Enum(processor_type) String(arm710c) Value(arm710c)\n+\n+EnumValue\n+Enum(processor_type) String(arm7100) Value(arm7100)\n+\n+EnumValue\n+Enum(processor_type) String(arm7500) Value(arm7500)\n+\n+EnumValue\n+Enum(processor_type) String(arm7500fe) Value(arm7500fe)\n+\n+EnumValue\n+Enum(processor_type) String(arm7m) Value(arm7m)\n+\n+EnumValue\n+Enum(processor_type) String(arm7dm) Value(arm7dm)\n+\n+EnumValue\n+Enum(processor_type) String(arm7dmi) Value(arm7dmi)\n+\n+EnumValue\n+Enum(processor_type) String(arm8) Value(arm8)\n+\n+EnumValue\n+Enum(processor_type) String(arm810) Value(arm810)\n+\n+EnumValue\n+Enum(processor_type) String(strongarm) Value(strongarm)\n+\n+EnumValue\n+Enum(processor_type) String(strongarm110) Value(strongarm110)\n+\n+EnumValue\n+Enum(processor_type) String(strongarm1100) Value(strongarm1100)\n+\n+EnumValue\n+Enum(processor_type) String(strongarm1110) Value(strongarm1110)\n+\n+EnumValue\n+Enum(processor_type) String(fa526) Value(fa526)\n+\n+EnumValue\n+Enum(processor_type) String(fa626) Value(fa626)\n+\n+EnumValue\n+Enum(processor_type) String(arm7tdmi) Value(arm7tdmi)\n+\n+EnumValue\n+Enum(processor_type) String(arm7tdmi-s) Value(arm7tdmis)\n+\n+EnumValue\n+Enum(processor_type) String(arm710t) Value(arm710t)\n+\n+EnumValue\n+Enum(processor_type) String(arm720t) Value(arm720t)\n+\n+EnumValue\n+Enum(processor_type) String(arm740t) Value(arm740t)\n+\n+EnumValue\n+Enum(processor_type) String(arm9) Value(arm9)\n+\n+EnumValue\n+Enum(processor_type) String(arm9tdmi) Value(arm9tdmi)\n+\n+EnumValue\n+Enum(processor_type) String(arm920) Value(arm920)\n+\n+EnumValue\n+Enum(processor_type) String(arm920t) Value(arm920t)\n+\n+EnumValue\n+Enum(processor_type) String(arm922t) Value(arm922t)\n+\n+EnumValue\n+Enum(processor_type) String(arm940t) Value(arm940t)\n+\n+EnumValue\n+Enum(processor_type) String(ep9312) Value(ep9312)\n+\n+EnumValue\n+Enum(processor_type) String(arm10tdmi) Value(arm10tdmi)\n+\n+EnumValue\n+Enum(processor_type) String(arm1020t) Value(arm1020t)\n+\n+EnumValue\n+Enum(processor_type) String(arm9e) Value(arm9e)\n+\n+EnumValue\n+Enum(processor_type) String(arm946e-s) Value(arm946es)\n+\n+EnumValue\n+Enum(processor_type) String(arm966e-s) Value(arm966es)\n+\n+EnumValue\n+Enum(processor_type) String(arm968e-s) Value(arm968es)\n+\n+EnumValue\n+Enum(processor_type) String(arm10e) Value(arm10e)\n+\n+EnumValue\n+Enum(processor_type) String(arm1020e) Value(arm1020e)\n+\n+EnumValue\n+Enum(processor_type) String(arm1022e) Value(arm1022e)\n+\n+EnumValue\n+Enum(processor_type) String(xscale) Value(xscale)\n+\n+EnumValue\n+Enum(processor_type) String(iwmmxt) Value(iwmmxt)\n+\n+EnumValue\n+Enum(processor_type) String(iwmmxt2) Value(iwmmxt2)\n+\n+EnumValue\n+Enum(processor_type) String(fa606te) Value(fa606te)\n+\n+EnumValue\n+Enum(processor_type) String(fa626te) Value(fa626te)\n+\n+EnumValue\n+Enum(processor_type) String(fmp626) Value(fmp626)\n+\n+EnumValue\n+Enum(processor_type) String(fa726te) Value(fa726te)\n+\n+EnumValue\n+Enum(processor_type) String(arm926ej-s) Value(arm926ejs)\n+\n+EnumValue\n+Enum(processor_type) String(arm1026ej-s) Value(arm1026ejs)\n+\n+EnumValue\n+Enum(processor_type) String(arm1136j-s) Value(arm1136js)\n+\n+EnumValue\n+Enum(processor_type) String(arm1136jf-s) Value(arm1136jfs)\n+\n+EnumValue\n+Enum(processor_type) String(arm1176jz-s) Value(arm1176jzs)\n+\n+EnumValue\n+Enum(processor_type) String(arm1176jzf-s) Value(arm1176jzfs)\n+\n+EnumValue\n+Enum(processor_type) String(mpcorenovfp) Value(mpcorenovfp)\n+\n+EnumValue\n+Enum(processor_type) String(mpcore) Value(mpcore)\n+\n+EnumValue\n+Enum(processor_type) String(arm1156t2-s) Value(arm1156t2s)\n+\n+EnumValue\n+Enum(processor_type) String(arm1156t2f-s) Value(arm1156t2fs)\n+\n+EnumValue\n+Enum(processor_type) String(cortex-a5) Value(cortexa5)\n+\n+EnumValue\n+Enum(processor_type) String(cortex-a8) Value(cortexa8)\n+\n+EnumValue\n+Enum(processor_type) String(cortex-a9) Value(cortexa9)\n+\n+EnumValue\n+Enum(processor_type) String(cortex-a15) Value(cortexa15)\n+\n+EnumValue\n+Enum(processor_type) String(cortex-r4) Value(cortexr4)\n+\n+EnumValue\n+Enum(processor_type) String(cortex-r4f) Value(cortexr4f)\n+\n+EnumValue\n+Enum(processor_type) String(cortex-m4) Value(cortexm4)\n+\n+EnumValue\n+Enum(processor_type) String(cortex-m3) Value(cortexm3)\n+\n+EnumValue\n+Enum(processor_type) String(cortex-m1) Value(cortexm1)\n+\n+EnumValue\n+Enum(processor_type) String(cortex-m0) Value(cortexm0)\n+\n+Enum\n+Name(arm_arch) Type(int)\n+Known ARM architectures (for use with the -march= option):\n+\n+EnumValue\n+Enum(arm_arch) String(armv2) Value(0)\n+\n+EnumValue\n+Enum(arm_arch) String(armv2a) Value(1)\n+\n+EnumValue\n+Enum(arm_arch) String(armv3) Value(2)\n+\n+EnumValue\n+Enum(arm_arch) String(armv3m) Value(3)\n+\n+EnumValue\n+Enum(arm_arch) String(armv4) Value(4)\n+\n+EnumValue\n+Enum(arm_arch) String(armv4t) Value(5)\n+\n+EnumValue\n+Enum(arm_arch) String(armv5) Value(6)\n+\n+EnumValue\n+Enum(arm_arch) String(armv5t) Value(7)\n+\n+EnumValue\n+Enum(arm_arch) String(armv5e) Value(8)\n+\n+EnumValue\n+Enum(arm_arch) String(armv5te) Value(9)\n+\n+EnumValue\n+Enum(arm_arch) String(armv6) Value(10)\n+\n+EnumValue\n+Enum(arm_arch) String(armv6j) Value(11)\n+\n+EnumValue\n+Enum(arm_arch) String(armv6k) Value(12)\n+\n+EnumValue\n+Enum(arm_arch) String(armv6z) Value(13)\n+\n+EnumValue\n+Enum(arm_arch) String(armv6zk) Value(14)\n+\n+EnumValue\n+Enum(arm_arch) String(armv6t2) Value(15)\n+\n+EnumValue\n+Enum(arm_arch) String(armv6-m) Value(16)\n+\n+EnumValue\n+Enum(arm_arch) String(armv7) Value(17)\n+\n+EnumValue\n+Enum(arm_arch) String(armv7-a) Value(18)\n+\n+EnumValue\n+Enum(arm_arch) String(armv7-r) Value(19)\n+\n+EnumValue\n+Enum(arm_arch) String(armv7-m) Value(20)\n+\n+EnumValue\n+Enum(arm_arch) String(armv7e-m) Value(21)\n+\n+EnumValue\n+Enum(arm_arch) String(ep9312) Value(22)\n+\n+EnumValue\n+Enum(arm_arch) String(iwmmxt) Value(23)\n+\n+EnumValue\n+Enum(arm_arch) String(iwmmxt2) Value(24)\n+"}, {"sha": "c29469c72d395cf35160f4c50404779db7fd88a7", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 13, "deletions": 170, "changes": 183, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad7be0090c0276c2526887944f5f6927e20507f2/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad7be0090c0276c2526887944f5f6927e20507f2/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=ad7be0090c0276c2526887944f5f6927e20507f2", "patch": "@@ -219,9 +219,6 @@ static tree arm_build_builtin_va_list (void);\n static void arm_expand_builtin_va_start (tree, rtx);\n static tree arm_gimplify_va_arg_expr (tree, tree, gimple_seq *, gimple_seq *);\n static void arm_option_override (void);\n-static bool arm_handle_option (struct gcc_options *, struct gcc_options *,\n-\t\t\t       const struct cl_decoded_option *, location_t);\n-static void arm_target_help (void);\n static unsigned HOST_WIDE_INT arm_shift_truncation_mask (enum machine_mode);\n static bool arm_cannot_copy_insn_p (rtx);\n static bool arm_tls_symbol_p (rtx x);\n@@ -349,10 +346,6 @@ static const struct default_options arm_option_optimization_table[] =\n \n #undef  TARGET_DEFAULT_TARGET_FLAGS\n #define TARGET_DEFAULT_TARGET_FLAGS (TARGET_DEFAULT | MASK_SCHED_PROLOG)\n-#undef  TARGET_HANDLE_OPTION\n-#define TARGET_HANDLE_OPTION arm_handle_option\n-#undef  TARGET_HELP\n-#define TARGET_HELP arm_target_help\n #undef  TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE arm_option_override\n #undef  TARGET_OPTION_OPTIMIZATION_TABLE\n@@ -927,33 +920,10 @@ static const struct processors all_architectures[] =\n   /* We don't specify tuning costs here as it will be figured out\n      from the core.  */\n \n-  {\"armv2\",   arm2,       \"2\",   FL_CO_PROC | FL_MODE26 | FL_FOR_ARCH2, NULL},\n-  {\"armv2a\",  arm2,       \"2\",   FL_CO_PROC | FL_MODE26 | FL_FOR_ARCH2, NULL},\n-  {\"armv3\",   arm6,       \"3\",   FL_CO_PROC | FL_MODE26 | FL_FOR_ARCH3, NULL},\n-  {\"armv3m\",  arm7m,      \"3M\",  FL_CO_PROC | FL_MODE26 | FL_FOR_ARCH3M, NULL},\n-  {\"armv4\",   arm7tdmi,   \"4\",   FL_CO_PROC | FL_MODE26 | FL_FOR_ARCH4, NULL},\n-  /* Strictly, FL_MODE26 is a permitted option for v4t, but there are no\n-     implementations that support it, so we will leave it out for now.  */\n-  {\"armv4t\",  arm7tdmi,   \"4T\",  FL_CO_PROC |             FL_FOR_ARCH4T, NULL},\n-  {\"armv5\",   arm10tdmi,  \"5\",   FL_CO_PROC |             FL_FOR_ARCH5, NULL},\n-  {\"armv5t\",  arm10tdmi,  \"5T\",  FL_CO_PROC |             FL_FOR_ARCH5T, NULL},\n-  {\"armv5e\",  arm1026ejs, \"5E\",  FL_CO_PROC |             FL_FOR_ARCH5E, NULL},\n-  {\"armv5te\", arm1026ejs, \"5TE\", FL_CO_PROC |             FL_FOR_ARCH5TE, NULL},\n-  {\"armv6\",   arm1136js,  \"6\",   FL_CO_PROC |             FL_FOR_ARCH6, NULL},\n-  {\"armv6j\",  arm1136js,  \"6J\",  FL_CO_PROC |             FL_FOR_ARCH6J, NULL},\n-  {\"armv6k\",  mpcore,\t  \"6K\",  FL_CO_PROC |             FL_FOR_ARCH6K, NULL},\n-  {\"armv6z\",  arm1176jzs, \"6Z\",  FL_CO_PROC |             FL_FOR_ARCH6Z, NULL},\n-  {\"armv6zk\", arm1176jzs, \"6ZK\", FL_CO_PROC |             FL_FOR_ARCH6ZK, NULL},\n-  {\"armv6t2\", arm1156t2s, \"6T2\", FL_CO_PROC |             FL_FOR_ARCH6T2, NULL},\n-  {\"armv6-m\", cortexm1,\t  \"6M\",\t\t\t\t  FL_FOR_ARCH6M, NULL},\n-  {\"armv7\",   cortexa8,\t  \"7\",\t FL_CO_PROC |\t\t  FL_FOR_ARCH7, NULL},\n-  {\"armv7-a\", cortexa8,\t  \"7A\",\t FL_CO_PROC |\t\t  FL_FOR_ARCH7A, NULL},\n-  {\"armv7-r\", cortexr4,\t  \"7R\",\t FL_CO_PROC |\t\t  FL_FOR_ARCH7R, NULL},\n-  {\"armv7-m\", cortexm3,\t  \"7M\",\t FL_CO_PROC |\t\t  FL_FOR_ARCH7M, NULL},\n-  {\"armv7e-m\", cortexm4,  \"7EM\", FL_CO_PROC |\t\t  FL_FOR_ARCH7EM, NULL},\n-  {\"ep9312\",  ep9312,     \"4T\",  FL_LDSCHED | FL_CIRRUS | FL_FOR_ARCH4, NULL},\n-  {\"iwmmxt\",  iwmmxt,     \"5TE\", FL_LDSCHED | FL_STRONG | FL_FOR_ARCH5TE | FL_XSCALE | FL_IWMMXT , NULL},\n-  {\"iwmmxt2\", iwmmxt2,     \"5TE\", FL_LDSCHED | FL_STRONG | FL_FOR_ARCH5TE | FL_XSCALE | FL_IWMMXT , NULL},\n+#define ARM_ARCH(NAME, CORE, ARCH, FLAGS) \\\n+  {NAME, CORE, #ARCH, FLAGS, NULL},\n+#include \"arm-arches.def\"\n+#undef ARM_ARCH\n   {NULL, arm_none, NULL, 0 , NULL}\n };\n \n@@ -1325,148 +1295,21 @@ arm_gimplify_va_arg_expr (tree valist, tree type, gimple_seq *pre_p,\n   return std_gimplify_va_arg_expr (valist, type, pre_p, post_p);\n }\n \n-/* Lookup NAME in SEL.  */\n-\n-static const struct processors *\n-arm_find_cpu (const char *name, const struct processors *sel, const char *desc)\n-{\n-  if (!(name && *name))\n-    return NULL;\n-\n-  for (; sel->name != NULL; sel++)\n-    {\n-      if (streq (name, sel->name))\n-\treturn sel;\n-    }\n-\n-  error (\"bad value (%s) for %s switch\", name, desc);\n-  return NULL;\n-}\n-\n-/* Implement TARGET_HANDLE_OPTION.  */\n-\n-static bool\n-arm_handle_option (struct gcc_options *opts, struct gcc_options *opts_set,\n-\t\t   const struct cl_decoded_option *decoded,\n-\t\t   location_t loc ATTRIBUTE_UNUSED)\n-{\n-  size_t code = decoded->opt_index;\n-  const char *arg = decoded->arg;\n-\n-  gcc_assert (opts == &global_options);\n-  gcc_assert (opts_set == &global_options_set);\n-\n-  switch (code)\n-    {\n-    case OPT_march_:\n-      arm_selected_arch = arm_find_cpu(arg, all_architectures, \"-march\");\n-      return true;\n-\n-    case OPT_mcpu_:\n-      arm_selected_cpu = arm_find_cpu(arg, all_cores, \"-mcpu\");\n-      return true;\n-\n-    case OPT_mtune_:\n-      arm_selected_tune = arm_find_cpu(arg, all_cores, \"-mtune\");\n-      return true;\n-\n-    default:\n-      return true;\n-    }\n-}\n-\n-static void\n-arm_target_help (void)\n-{\n-  int i;\n-  static int columns = 0;\n-  int remaining;\n-\n-  /* If we have not done so already, obtain the desired maximum width of\n-     the output.  Note - this is a duplication of the code at the start of\n-     gcc/opts.c:print_specific_help() - the two copies should probably be\n-     replaced by a single function.  */\n-  if (columns == 0)\n-    {\n-      const char *p;\n-\n-      p = getenv (\"COLUMNS\");\n-      if (p != NULL)\n-\t{\n-\t  int value = atoi (p);\n-\n-\t  if (value > 0)\n-\t    columns = value;\n-\t}\n-\n-      if (columns == 0)\n-\t/* Use a reasonable default.  */\n-\tcolumns = 80;\n-    }\n-\n-  printf (\"  Known ARM CPUs (for use with the -mcpu= and -mtune= options):\\n\");\n-\n-  /* The - 2 is because we know that the last entry in the array is NULL.  */\n-  i = ARRAY_SIZE (all_cores) - 2;\n-  gcc_assert (i > 0);\n-  printf (\"    %s\", all_cores[i].name);\n-  remaining = columns - (strlen (all_cores[i].name) + 4);\n-  gcc_assert (remaining >= 0);\n-\n-  while (i--)\n-    {\n-      int len = strlen (all_cores[i].name);\n-\n-      if (remaining > len + 2)\n-\t{\n-\t  printf (\", %s\", all_cores[i].name);\n-\t  remaining -= len + 2;\n-\t}\n-      else\n-\t{\n-\t  if (remaining > 0)\n-\t    printf (\",\");\n-\t  printf (\"\\n    %s\", all_cores[i].name);\n-\t  remaining = columns - (len + 4);\n-\t}\n-    }\n-\n-  printf (\"\\n\\n  Known ARM architectures (for use with the -march= option):\\n\");\n-\n-  i = ARRAY_SIZE (all_architectures) - 2;\n-  gcc_assert (i > 0);\n-  \n-  printf (\"    %s\", all_architectures[i].name);\n-  remaining = columns - (strlen (all_architectures[i].name) + 4);\n-  gcc_assert (remaining >= 0);\n-\n-  while (i--)\n-    {\n-      int len = strlen (all_architectures[i].name);\n-\n-      if (remaining > len + 2)\n-\t{\n-\t  printf (\", %s\", all_architectures[i].name);\n-\t  remaining -= len + 2;\n-\t}\n-      else\n-\t{\n-\t  if (remaining > 0)\n-\t    printf (\",\");\n-\t  printf (\"\\n    %s\", all_architectures[i].name);\n-\t  remaining = columns - (len + 4);\n-\t}\n-    }\n-  printf (\"\\n\");\n-\n-}\n-\n /* Fix up any incompatible options that the user has specified.  */\n static void\n arm_option_override (void)\n {\n   unsigned i;\n \n+  if (global_options_set.x_arm_arch_option)\n+    arm_selected_arch = &all_architectures[arm_arch_option];\n+\n+  if (global_options_set.x_arm_cpu_option)\n+    arm_selected_cpu = &all_cores[(int) arm_cpu_option];\n+\n+  if (global_options_set.x_arm_tune_option)\n+    arm_selected_tune = &all_cores[(int) arm_tune_option];\n+\n #ifdef SUBTARGET_OVERRIDE_OPTIONS\n   SUBTARGET_OVERRIDE_OPTIONS;\n #endif"}, {"sha": "a7718fa53189adbf691038f9fce1a8f0db2e0e27", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad7be0090c0276c2526887944f5f6927e20507f2/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad7be0090c0276c2526887944f5f6927e20507f2/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=ad7be0090c0276c2526887944f5f6927e20507f2", "patch": "@@ -103,16 +103,7 @@ extern char arm_arch_name[];\n \t  }\t\t\t\t\t\t\\\n     } while (0)\n \n-/* The various ARM cores.  */\n-enum processor_type\n-{\n-#define ARM_CORE(NAME, IDENT, ARCH, FLAGS, COSTS) \\\n-  IDENT,\n-#include \"arm-cores.def\"\n-#undef ARM_CORE\n-  /* Used to indicate that no processor has been specified.  */\n-  arm_none\n-};\n+#include \"config/arm/arm-opts.h\"\n \n enum target_cpus\n {"}, {"sha": "7d2d84cda7de73797a7bd638df75ac5f6b76621b", "filename": "gcc/config/arm/arm.opt", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad7be0090c0276c2526887944f5f6927e20507f2/gcc%2Fconfig%2Farm%2Farm.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad7be0090c0276c2526887944f5f6927e20507f2/gcc%2Fconfig%2Farm%2Farm.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.opt?ref=ad7be0090c0276c2526887944f5f6927e20507f2", "patch": "@@ -1,6 +1,6 @@\n ; Options for the ARM port of the compiler.\n \n-; Copyright (C) 2005, 2007, 2008 Free Software Foundation, Inc.\n+; Copyright (C) 2005, 2007, 2008, 2009, 2011 Free Software Foundation, Inc.\n ;\n ; This file is part of GCC.\n ;\n@@ -18,6 +18,9 @@\n ; along with GCC; see the file COPYING3.  If not see\n ; <http://www.gnu.org/licenses/>.\n \n+HeaderInclude\n+config/arm/arm-opts.h\n+\n mabi=\n Target RejectNegative Joined Var(target_abi_name)\n Specify an ABI\n@@ -45,7 +48,7 @@ mapcs-stack-check\n Target Report Mask(APCS_STACK) Undocumented\n \n march=\n-Target RejectNegative Joined\n+Target RejectNegative Joined Enum(arm_arch) Var(arm_arch_option)\n Specify the name of the target architecture\n \n marm\n@@ -68,7 +71,7 @@ Target Report Mask(CIRRUS_FIX_INVALID_INSNS)\n Cirrus: Place NOPs to avoid invalid instruction combinations\n \n mcpu=\n-Target RejectNegative Joined\n+Target RejectNegative Joined Enum(processor_type) Var(arm_cpu_option) Init(arm_none)\n Specify the name of the target CPU\n \n mfloat-abi=\n@@ -148,7 +151,7 @@ Target Report Mask(TPCS_LEAF_FRAME)\n Thumb: Generate (leaf) stack frames even if not needed\n \n mtune=\n-Target RejectNegative Joined\n+Target RejectNegative Joined Enum(processor_type) Var(arm_tune_option) Init(arm_none)\n Tune code for the given processor\n \n mwords-little-endian"}, {"sha": "28cee6caabe9e3f52abafe11c532bb413bfef78e", "filename": "gcc/config/arm/genopt.sh", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad7be0090c0276c2526887944f5f6927e20507f2/gcc%2Fconfig%2Farm%2Fgenopt.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad7be0090c0276c2526887944f5f6927e20507f2/gcc%2Fconfig%2Farm%2Fgenopt.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fgenopt.sh?ref=ad7be0090c0276c2526887944f5f6927e20507f2", "patch": "@@ -0,0 +1,75 @@\n+#!/bin/sh\n+# Generate arm-tables.opt from the lists in *.def.\n+# Copyright (C) 2011 Free Software Foundation, Inc.\n+#\n+# This file is part of GCC.\n+#\n+# GCC is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3, or (at your option)\n+# any later version.\n+#\n+# GCC is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+cat <<EOF\n+; -*- buffer-read-only: t -*-\n+; Generated automatically by genopt.sh from arm-cores.def and arm-arches.def.\n+\n+; Copyright (C) 2011 Free Software Foundation, Inc.\n+;\n+; This file is part of GCC.\n+;\n+; GCC is free software; you can redistribute it and/or modify it under\n+; the terms of the GNU General Public License as published by the Free\n+; Software Foundation; either version 3, or (at your option) any later\n+; version.\n+;\n+; GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+; WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+; for more details.\n+;\n+; You should have received a copy of the GNU General Public License\n+; along with GCC; see the file COPYING3.  If not see\n+; <http://www.gnu.org/licenses/>.\n+\n+Enum\n+Name(processor_type) Type(enum processor_type)\n+Known ARM CPUs (for use with the -mcpu= and -mtune= options):\n+\n+EOF\n+\n+awk -F'[(, \t]+' '/^ARM_CORE/ {\n+    name = $2\n+    enum = $3\n+    gsub(\"\\\"\", \"\", name)\n+    print \"EnumValue\"\n+    print \"Enum(processor_type) String(\" name \") Value(\" enum \")\"\n+    print \"\"\n+}' $1/arm-cores.def\n+\n+cat <<EOF\n+Enum\n+Name(arm_arch) Type(int)\n+Known ARM architectures (for use with the -march= option):\n+\n+EOF\n+\n+awk -F'[(, \t]+' 'BEGIN {\n+    value = 0\n+}\n+/^ARM_ARCH/ {\n+    name = $2\n+    gsub(\"\\\"\", \"\", name)\n+    print \"EnumValue\"\n+    print \"Enum(arm_arch) String(\" name \") Value(\" value \")\"\n+    print \"\"\n+    value++\n+}' $1/arm-arches.def"}, {"sha": "18a548a3f745b55ed2e620bee36cb3fa143823f8", "filename": "gcc/config/arm/t-arm", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad7be0090c0276c2526887944f5f6927e20507f2/gcc%2Fconfig%2Farm%2Ft-arm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad7be0090c0276c2526887944f5f6927e20507f2/gcc%2Fconfig%2Farm%2Ft-arm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-arm?ref=ad7be0090c0276c2526887944f5f6927e20507f2", "patch": "@@ -51,14 +51,20 @@ $(srcdir)/config/arm/arm-tune.md: $(srcdir)/config/arm/gentune.sh \\\n \t\t$(srcdir)/config/arm/arm-cores.def > \\\n \t\t$(srcdir)/config/arm/arm-tune.md\n \n+$(srcdir)/config/arm/arm-tables.opt: $(srcdir)/config/arm/genopt.sh \\\n+  $(srcdir)/config/arm/arm-cores.def $(srcdir)/config/arm/arm-arches.def\n+\t$(SHELL) $(srcdir)/config/arm/genopt.sh $(srcdir)/config/arm > \\\n+\t\t$(srcdir)/config/arm/arm-tables.opt\n+\n arm.o: $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n   $(RTL_H) $(TREE_H) $(OBSTACK_H) $(REGS_H) hard-reg-set.h \\\n   insn-config.h conditions.h output.h \\\n   $(INSN_ATTR_H) $(FLAGS_H) reload.h $(FUNCTION_H) \\\n   $(EXPR_H) $(OPTABS_H) $(RECOG_H) $(CGRAPH_H) \\\n   $(GGC_H) except.h $(C_PRAGMA_H) $(INTEGRATE_H) $(TM_P_H) \\\n   $(TARGET_H) $(TARGET_DEF_H) debug.h langhooks.h $(DF_H) \\\n-  intl.h libfuncs.h $(PARAMS_H) $(OPTS_H)\n+  intl.h libfuncs.h $(PARAMS_H) $(OPTS_H) $(srcdir)/config/arm/arm-cores.def \\\n+  $(srcdir)/config/arm/arm-arches.def\n \n arm-c.o: $(srcdir)/config/arm/arm-c.c $(CONFIG_H) $(SYSTEM_H) \\\n     coretypes.h $(TM_H) $(TREE_H) output.h $(C_COMMON_H)"}]}