{"sha": "52895e1a46c720b4869414b60051d9b77793064a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTI4OTVlMWE0NmM3MjBiNDg2OTQxNGI2MDA1MWQ5Yjc3NzkzMDY0YQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2003-01-30T18:14:06Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2003-01-30T18:14:06Z"}, "message": "ggc-page.c (G.context_depth_allocations): New.\n\n        * ggc-page.c (G.context_depth_allocations): New.\n        (G.context_depth_collections): New.\n        (alloc_page): Set G.context_depth_allocations.\n        (ggc_collect): Set G.context_depth_collections.\n        (ggc_push_context): Limit to HOST_BITS_PER_LONG contexts.\n        (ggc_pop_context): Early exit for no allocations or collections.\n\nFrom-SVN: r62152", "tree": {"sha": "ffe622bf1cea9eb96a1c15e2ecd46e025053bd39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ffe622bf1cea9eb96a1c15e2ecd46e025053bd39"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/52895e1a46c720b4869414b60051d9b77793064a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52895e1a46c720b4869414b60051d9b77793064a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52895e1a46c720b4869414b60051d9b77793064a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52895e1a46c720b4869414b60051d9b77793064a/comments", "author": null, "committer": null, "parents": [{"sha": "c35c7e526f1da3895f6a1eb33b8c68585fd6c27c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c35c7e526f1da3895f6a1eb33b8c68585fd6c27c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c35c7e526f1da3895f6a1eb33b8c68585fd6c27c"}], "stats": {"total": 31, "additions": 30, "deletions": 1}, "files": [{"sha": "62d24ddda74413486f9f46e03f57e3152db94b42", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52895e1a46c720b4869414b60051d9b77793064a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52895e1a46c720b4869414b60051d9b77793064a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=52895e1a46c720b4869414b60051d9b77793064a", "patch": "@@ -1,3 +1,12 @@\n+2003-01-30  Richard Henderson  <rth@redhat.com>\n+\n+\t* ggc-page.c (G.context_depth_allocations): New.\n+\t(G.context_depth_collections): New.\n+\t(alloc_page): Set G.context_depth_allocations.\n+\t(ggc_collect): Set G.context_depth_collections.\n+\t(ggc_push_context): Limit to HOST_BITS_PER_LONG contexts.\n+\t(ggc_pop_context): Early exit for no allocations or collections.\n+\n 2003-01-30  Richard Henderson  <rth@redhat.com>\n \n \t* tree-inline.c (walk_tree): Streamline duplicate hash table lookup."}, {"sha": "e0064e7fdb2a5e9e35e0190af860e7f7f8810cf9", "filename": "gcc/ggc-page.c", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52895e1a46c720b4869414b60051d9b77793064a/gcc%2Fggc-page.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52895e1a46c720b4869414b60051d9b77793064a/gcc%2Fggc-page.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-page.c?ref=52895e1a46c720b4869414b60051d9b77793064a", "patch": "@@ -344,6 +344,12 @@ static struct globals\n   /* Total amount of memory mapped.  */\n   size_t bytes_mapped;\n \n+  /* Bit N set if any allocations have been done at context depth N.  */\n+  unsigned long context_depth_allocations;\n+\n+  /* Bit N set if any collections have been done at context depth N.  */\n+  unsigned long context_depth_collections;\n+\n   /* The current depth in the context stack.  */\n   unsigned short context_depth;\n \n@@ -743,6 +749,8 @@ alloc_page (order)\n   entry->num_free_objects = num_objects;\n   entry->next_bit_hint = 1;\n \n+  G.context_depth_allocations |= (unsigned long)1 << G.context_depth;\n+\n #ifdef USING_MALLOC_PAGE_GROUPS\n   entry->group = group;\n   set_page_group_in_use (group, page);\n@@ -1221,7 +1229,7 @@ ggc_push_context ()\n   ++G.context_depth;\n \n   /* Die on wrap.  */\n-  if (G.context_depth == 0)\n+  if (G.context_depth >= HOST_BITS_PER_LONG)\n     abort ();\n }\n \n@@ -1269,9 +1277,18 @@ ggc_recalculate_in_use_p (p)\n void\n ggc_pop_context ()\n {\n+  unsigned long omask;\n   unsigned order, depth;\n \n   depth = --G.context_depth;\n+  omask = (unsigned long)1 << (depth + 1);\n+\n+  if (!((G.context_depth_allocations | G.context_depth_collections) & omask))\n+    return;\n+\n+  G.context_depth_allocations |= (G.context_depth_allocations & omask) >> 1;\n+  G.context_depth_allocations &= omask - 1;\n+  G.context_depth_collections &= omask - 1;\n \n   /* Any remaining pages in the popped context are lowered to the new\n      current context; i.e. objects allocated in the popped context and\n@@ -1529,6 +1546,9 @@ ggc_collect ()\n      reuse in the interim.  */\n   release_pages ();\n \n+  /* Indicate that we've seen collections at this context depth.  */\n+  G.context_depth_collections = ((unsigned long)1 << (G.context_depth + 1)) - 1;\n+\n   clear_marks ();\n   ggc_mark_roots ();\n "}]}