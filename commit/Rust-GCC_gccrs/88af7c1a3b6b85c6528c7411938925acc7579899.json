{"sha": "88af7c1a3b6b85c6528c7411938925acc7579899", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODhhZjdjMWEzYjZiODVjNjUyOGM3NDExOTM4OTI1YWNjNzU3OTg5OQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-05-31T13:57:15Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-05-31T13:57:15Z"}, "message": "tree-loop-distribution.c (stmt_has_scalar_dependences_outside_loop): Use FOR_EACH_SSA_DEF_OPERAND.\n\n2012-05-31  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-loop-distribution.c (stmt_has_scalar_dependences_outside_loop):\n\tUse FOR_EACH_SSA_DEF_OPERAND.\n\t(generate_builtin): Adjust.\n\t(stmt_generated_in_another_partition): Remove.\n\t(add_scalar_computations_to_partition): Likewise.\n\t(rdg_build_partitions): Do not call\n\tadd_scalar_computations_to_partition.\n\n\t* gcc.dg/tree-ssa/ldist-pr45948-2.c: New testcase copy of\n\tldist-pr45948.c with disabled SCCP.\n\nFrom-SVN: r188061", "tree": {"sha": "67b6d0b32fef7bb2500141681c3f5083551fad64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/67b6d0b32fef7bb2500141681c3f5083551fad64"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88af7c1a3b6b85c6528c7411938925acc7579899", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88af7c1a3b6b85c6528c7411938925acc7579899", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88af7c1a3b6b85c6528c7411938925acc7579899", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88af7c1a3b6b85c6528c7411938925acc7579899/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ca8d9092f171e56bf3c1263a7116123d066af07f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca8d9092f171e56bf3c1263a7116123d066af07f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca8d9092f171e56bf3c1263a7116123d066af07f"}], "stats": {"total": 130, "additions": 50, "deletions": 80}, "files": [{"sha": "68bb12a6a709923de6f19ac2629c9ef7b4ae6ffb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88af7c1a3b6b85c6528c7411938925acc7579899/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88af7c1a3b6b85c6528c7411938925acc7579899/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=88af7c1a3b6b85c6528c7411938925acc7579899", "patch": "@@ -1,3 +1,13 @@\n+2012-05-31  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-loop-distribution.c (stmt_has_scalar_dependences_outside_loop):\n+\tUse FOR_EACH_SSA_DEF_OPERAND.\n+\t(generate_builtin): Adjust.\n+\t(stmt_generated_in_another_partition): Remove.\n+\t(add_scalar_computations_to_partition): Likewise.\n+\t(rdg_build_partitions): Do not call\n+\tadd_scalar_computations_to_partition.\n+\n 2012-05-31  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* tree-dfa.c (get_ref_base_and_extent): Compute the offset using"}, {"sha": "29ed833df4c247c29aef670dd64363d93f81caaa", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88af7c1a3b6b85c6528c7411938925acc7579899/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88af7c1a3b6b85c6528c7411938925acc7579899/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=88af7c1a3b6b85c6528c7411938925acc7579899", "patch": "@@ -1,3 +1,8 @@\n+2012-05-31  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gcc.dg/tree-ssa/ldist-pr45948-2.c: New testcase copy of\n+\tldist-pr45948.c with disabled SCCP.\n+\n 2012-05-31  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/48493"}, {"sha": "aecb49f1c6bd1f2750cacd3ea9eda10e480fbae8", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ldist-pr45948-2.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88af7c1a3b6b85c6528c7411938925acc7579899/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fldist-pr45948-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88af7c1a3b6b85c6528c7411938925acc7579899/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fldist-pr45948-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fldist-pr45948-2.c?ref=88af7c1a3b6b85c6528c7411938925acc7579899", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-loop-distribution -fno-tree-scev-cprop\" } */\n+\n+extern void bar(int);\n+\n+void\n+foo (int i, int n)\n+{\n+  int a[30];\n+  int b[30];\n+  for (; i < n; i++)\n+    a[i] = b[i] = 0;\n+\n+  while (1)\n+    if (b[0])\n+      bar (a[i - 1]);\n+}"}, {"sha": "5f7018a678302a1036755cd118fbad6fa8058f03", "filename": "gcc/tree-loop-distribution.c", "status": "modified", "additions": 18, "deletions": 80, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88af7c1a3b6b85c6528c7411938925acc7579899/gcc%2Ftree-loop-distribution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88af7c1a3b6b85c6528c7411938925acc7579899/gcc%2Ftree-loop-distribution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-loop-distribution.c?ref=88af7c1a3b6b85c6528c7411938925acc7579899", "patch": "@@ -80,32 +80,19 @@ ssa_name_has_uses_outside_loop_p (tree def, loop_p loop)\n }\n \n /* Returns true when STMT defines a scalar variable used after the\n-   loop.  */\n+   loop LOOP.  */\n \n static bool\n-stmt_has_scalar_dependences_outside_loop (gimple stmt)\n+stmt_has_scalar_dependences_outside_loop (loop_p loop, gimple stmt)\n {\n-  tree name;\n+  def_operand_p def_p;\n+  ssa_op_iter op_iter;\n \n-  switch (gimple_code (stmt))\n-    {\n-    case GIMPLE_CALL:\n-    case GIMPLE_ASSIGN:\n-      name = gimple_get_lhs (stmt);\n-      break;\n-\n-    case GIMPLE_PHI:\n-      name = gimple_phi_result (stmt);\n-      break;\n-\n-    default:\n-      return false;\n-    }\n+  FOR_EACH_SSA_DEF_OPERAND (def_p, stmt, op_iter, SSA_OP_DEF)\n+    if (ssa_name_has_uses_outside_loop_p (DEF_FROM_PTR (def_p), loop))\n+      return true;\n \n-  return (name\n-\t  && TREE_CODE (name) == SSA_NAME\n-\t  && ssa_name_has_uses_outside_loop_p (name,\n-\t\t\t\t\t       loop_containing_stmt (stmt)));\n+  return false;\n }\n \n /* Update the PHI nodes of NEW_LOOP.  NEW_LOOP is a duplicate of\n@@ -382,9 +369,16 @@ generate_builtin (struct loop *loop, bitmap partition, bool copy_p)\n \t  if (!bitmap_bit_p (partition, x++))\n \t    continue;\n \n-\t  /* If the stmt has uses outside of the loop fail.  */\n-\t  if (stmt_has_scalar_dependences_outside_loop (stmt))\n-\t    goto end;\n+\t  /* If the stmt has uses outside of the loop fail.\n+\t     ???  If the stmt is generated in another partition that\n+\t     is not created as builtin we can ignore this.  */\n+\t  if (stmt_has_scalar_dependences_outside_loop (loop, stmt))\n+\t    {\n+\t      if (dump_file && (dump_flags & TDF_DETAILS))\n+\t\tfprintf (dump_file, \"not generating builtin, partition has \"\n+\t\t\t \"scalar uses outside of the loop\\n\");\n+\t      goto end;\n+\t    }\n \n \t  if (is_gimple_assign (stmt)\n \t      && !is_gimple_reg (gimple_assign_lhs (stmt)))\n@@ -879,60 +873,6 @@ fuse_partitions_with_similar_memory_accesses (struct graph *rdg,\n \t  }\n }\n \n-/* Returns true when STMT will be code generated in a partition of RDG\n-   different than PART and that will not be code generated as a\n-   builtin.  */\n-\n-static bool\n-stmt_generated_in_another_partition (struct graph *rdg, gimple stmt, int part,\n-\t\t\t\t     VEC (bitmap, heap) *partitions)\n-{\n-  int p;\n-  bitmap pp;\n-  unsigned i;\n-  bitmap_iterator bi;\n-\n-  FOR_EACH_VEC_ELT (bitmap, partitions, p, pp)\n-    if (p != part\n-\t&& !can_generate_builtin (rdg, pp))\n-      EXECUTE_IF_SET_IN_BITMAP (pp, 0, i, bi)\n-\tif (stmt == RDG_STMT (rdg, i))\n-\t  return true;\n-\n-  return false;\n-}\n-\n-/* For each partition in PARTITIONS that will be code generated using\n-   a builtin, add its scalar computations used after the loop to\n-   PARTITION.  */\n-\n-static void\n-add_scalar_computations_to_partition (struct graph *rdg,\n-\t\t\t\t      VEC (bitmap, heap) *partitions,\n-\t\t\t\t      bitmap partition)\n-{\n-  int p;\n-  bitmap pp;\n-  unsigned i;\n-  bitmap_iterator bi;\n-  bitmap l = BITMAP_ALLOC (NULL);\n-  bitmap pr = BITMAP_ALLOC (NULL);\n-  bool f = false;\n-\n-  FOR_EACH_VEC_ELT (bitmap, partitions, p, pp)\n-    if (can_generate_builtin (rdg, pp))\n-      EXECUTE_IF_SET_IN_BITMAP (pp, 0, i, bi)\n-\tif (stmt_has_scalar_dependences_outside_loop (RDG_STMT (rdg, i))\n-\t    && !stmt_generated_in_another_partition (rdg, RDG_STMT (rdg, i), p,\n-\t\t\t\t\t\t     partitions))\n-\t  rdg_flag_vertex_and_dependent (rdg, i, partition, l, pr, &f);\n-\n-  rdg_flag_loop_exits (rdg, l, partition, pr, &f);\n-\n-  BITMAP_FREE (pr);\n-  BITMAP_FREE (l);\n-}\n-\n /* Aggregate several components into a useful partition that is\n    registered in the PARTITIONS vector.  Partitions will be\n    distributed in different loops.  */\n@@ -996,8 +936,6 @@ rdg_build_partitions (struct graph *rdg, VEC (rdgc, heap) *components,\n       free_rdg_components (comps);\n     }\n \n-  add_scalar_computations_to_partition (rdg, *partitions, partition);\n-\n   /* If there is something left in the last partition, save it.  */\n   if (bitmap_count_bits (partition) > 0)\n     VEC_safe_push (bitmap, heap, *partitions, partition);"}]}