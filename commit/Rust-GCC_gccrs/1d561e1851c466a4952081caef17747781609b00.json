{"sha": "1d561e1851c466a4952081caef17747781609b00", "node_id": "C_kwDOANBUbNoAKDFkNTYxZTE4NTFjNDY2YTQ5NTIwODFjYWVmMTc3NDc3ODE2MDliMDA", "commit": {"author": {"name": "Artem Klimov", "email": "jakmobius@gmail.com", "date": "2022-07-06T14:02:01Z"}, "committer": {"name": "Alexander Monakov", "email": "amonakov@ispras.ru", "date": "2022-10-20T17:51:56Z"}, "message": "ipa-visibility: Optimize TLS access [PR99619]\n\nFix PR99619, which asks to optimize TLS model based on visibility.\nThe fix is implemented as an IPA optimization: this allows to take\noptimized visibility status into account (as well as avoid modifying\nall language frontends).\n\n2022-04-17  Artem Klimov  <jakmobius@gmail.com>\n\ngcc/ChangeLog:\n\n\tPR middle-end/99619\n\t* ipa-visibility.cc (function_and_variable_visibility): Promote\n\tTLS access model afer visibility optimizations.\n\t* varasm.cc (have_optimized_refs): New helper.\n\t(optimize_dyn_tls_for_decl_p): New helper. Use it ...\n\t(decl_default_tls_model): ... here in place of 'optimize' check.\n\ngcc/testsuite/ChangeLog:\n\n\tPR middle-end/99619\n\t* gcc.dg/tls/vis-attr-gd.c: New test.\n\t* gcc.dg/tls/vis-attr-hidden-gd.c: New test.\n\t* gcc.dg/tls/vis-attr-hidden.c: New test.\n\t* gcc.dg/tls/vis-flag-hidden-gd.c: New test.\n\t* gcc.dg/tls/vis-flag-hidden.c: New test.\n\t* gcc.dg/tls/vis-pragma-hidden-gd.c: New test.\n\t* gcc.dg/tls/vis-pragma-hidden.c: New test.\n\nCo-Authored-By:  Alexander Monakov  <amonakov@gcc.gnu.org>\nSigned-off-by: Artem Klimov <jakmobius@gmail.com>", "tree": {"sha": "6c929c8bcc04c338d4a9f015e0ae125c200eb5f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c929c8bcc04c338d4a9f015e0ae125c200eb5f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d561e1851c466a4952081caef17747781609b00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d561e1851c466a4952081caef17747781609b00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d561e1851c466a4952081caef17747781609b00", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d561e1851c466a4952081caef17747781609b00/comments", "author": {"login": "JakMobius", "id": 45604726, "node_id": "MDQ6VXNlcjQ1NjA0NzI2", "avatar_url": "https://avatars.githubusercontent.com/u/45604726?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JakMobius", "html_url": "https://github.com/JakMobius", "followers_url": "https://api.github.com/users/JakMobius/followers", "following_url": "https://api.github.com/users/JakMobius/following{/other_user}", "gists_url": "https://api.github.com/users/JakMobius/gists{/gist_id}", "starred_url": "https://api.github.com/users/JakMobius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JakMobius/subscriptions", "organizations_url": "https://api.github.com/users/JakMobius/orgs", "repos_url": "https://api.github.com/users/JakMobius/repos", "events_url": "https://api.github.com/users/JakMobius/events{/privacy}", "received_events_url": "https://api.github.com/users/JakMobius/received_events", "type": "User", "site_admin": false}, "committer": {"login": "amonakov", "id": 1997391, "node_id": "MDQ6VXNlcjE5OTczOTE=", "avatar_url": "https://avatars.githubusercontent.com/u/1997391?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amonakov", "html_url": "https://github.com/amonakov", "followers_url": "https://api.github.com/users/amonakov/followers", "following_url": "https://api.github.com/users/amonakov/following{/other_user}", "gists_url": "https://api.github.com/users/amonakov/gists{/gist_id}", "starred_url": "https://api.github.com/users/amonakov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amonakov/subscriptions", "organizations_url": "https://api.github.com/users/amonakov/orgs", "repos_url": "https://api.github.com/users/amonakov/repos", "events_url": "https://api.github.com/users/amonakov/events{/privacy}", "received_events_url": "https://api.github.com/users/amonakov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3dfdc0d1e1c4e00a77f2afc41d577c1b36cb4702", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dfdc0d1e1c4e00a77f2afc41d577c1b36cb4702", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3dfdc0d1e1c4e00a77f2afc41d577c1b36cb4702"}], "stats": {"total": 146, "additions": 145, "deletions": 1}, "files": [{"sha": "3ed2b7cf6797d130dacfbc26c4ec31c5ff1f1dfe", "filename": "gcc/ipa-visibility.cc", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d561e1851c466a4952081caef17747781609b00/gcc%2Fipa-visibility.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d561e1851c466a4952081caef17747781609b00/gcc%2Fipa-visibility.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-visibility.cc?ref=1d561e1851c466a4952081caef17747781609b00", "patch": "@@ -873,6 +873,25 @@ function_and_variable_visibility (bool whole_program)\n \t}\n     }\n \n+  if (symtab->state >= IPA_SSA)\n+    {\n+      FOR_EACH_VARIABLE (vnode)\n+\t{\n+\t  tree decl = vnode->decl;\n+\n+\t  /* Upgrade TLS access model based on optimized visibility status,\n+\t     unless it was specified explicitly or no references remain.  */\n+\t  if (DECL_THREAD_LOCAL_P (decl)\n+\t      && !lookup_attribute (\"tls_model\", DECL_ATTRIBUTES (decl))\n+\t      && vnode->ref_list.referring.length ())\n+\t    {\n+\t      enum tls_model new_model = decl_default_tls_model (decl);\n+\t      gcc_checking_assert (new_model >= decl_tls_model (decl));\n+\t      set_decl_tls_model (decl, new_model);\n+\t    }\n+\t}\n+    }\n+\n   if (dump_file)\n     {\n       fprintf (dump_file, \"\\nMarking local functions:\");"}, {"sha": "89a248a8028dc606807025de9cefc4c96cab4d8c", "filename": "gcc/testsuite/gcc.dg/tls/vis-attr-gd.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d561e1851c466a4952081caef17747781609b00/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fvis-attr-gd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d561e1851c466a4952081caef17747781609b00/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fvis-attr-gd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fvis-attr-gd.c?ref=1d561e1851c466a4952081caef17747781609b00", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target fpic } */\n+/* { dg-require-effective-target tls } */\n+/* { dg-options \"-O2 -fPIC -fdump-ipa-whole-program\" } */\n+\n+// tls_model should be global-dynamic due to explicitly specified attribute\n+__attribute__((tls_model(\"global-dynamic\")))\n+__thread int x;\n+\n+void reference() { x++; }\n+\n+/* { dg-final { scan-ipa-dump \"Varpool flags: tls-global-dynamic\" \"whole-program\" } } */"}, {"sha": "e32565588c816bb5ee4d8d590ae8e05e608b8dc4", "filename": "gcc/testsuite/gcc.dg/tls/vis-attr-hidden-gd.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d561e1851c466a4952081caef17747781609b00/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fvis-attr-hidden-gd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d561e1851c466a4952081caef17747781609b00/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fvis-attr-hidden-gd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fvis-attr-hidden-gd.c?ref=1d561e1851c466a4952081caef17747781609b00", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target fpic } */\n+/* { dg-require-effective-target tls } */\n+/* { dg-options \"-O2 -fPIC -fdump-ipa-whole-program\" } */\n+\n+// tls_model should be global-dynamic due to explicitly specified attribute\n+__attribute__((visibility(\"hidden\")))\n+__attribute__((tls_model(\"global-dynamic\")))\n+__thread int x;\n+\n+void reference() { x++; }\n+\n+/* { dg-final { scan-ipa-dump \"Varpool flags: tls-global-dynamic\" \"whole-program\" } } */"}, {"sha": "0d43fc565b090ed320e7da15024a46043c45700b", "filename": "gcc/testsuite/gcc.dg/tls/vis-attr-hidden.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d561e1851c466a4952081caef17747781609b00/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fvis-attr-hidden.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d561e1851c466a4952081caef17747781609b00/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fvis-attr-hidden.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fvis-attr-hidden.c?ref=1d561e1851c466a4952081caef17747781609b00", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target fpic } */\n+/* { dg-require-effective-target tls } */\n+/* { dg-options \"-O2 -fPIC -fdump-ipa-whole-program\" } */\n+\n+//tls_model should be local-dynamic due to visibility(\"hidden\")\n+__attribute__((visibility(\"hidden\")))\n+__thread int x;\n+\n+void reference() { x++; }\n+\n+/* { dg-final { scan-ipa-dump \"Varpool flags: tls-local-dynamic\" \"whole-program\" } } */"}, {"sha": "cad41e0c8e6dbf2560e5ef79fc5cbcebc00ed04b", "filename": "gcc/testsuite/gcc.dg/tls/vis-flag-hidden-gd.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d561e1851c466a4952081caef17747781609b00/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fvis-flag-hidden-gd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d561e1851c466a4952081caef17747781609b00/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fvis-flag-hidden-gd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fvis-flag-hidden-gd.c?ref=1d561e1851c466a4952081caef17747781609b00", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target fpic } */\n+/* { dg-require-effective-target tls } */\n+/* { dg-options \"-O2 -fPIC -fdump-ipa-whole-program -fvisibility=hidden\" } */\n+\n+\n+// tls_model should be global-dynamic due to explicitly specified attribute\n+__attribute__((tls_model(\"global-dynamic\")))\n+__thread int x;\n+\n+void reference() { x++; }\n+\n+/* { dg-final { scan-ipa-dump \"Varpool flags: tls-global-dynamic\" \"whole-program\" } } */"}, {"sha": "a15df092d4d0c7a19cc5d77d79d43308d7e237f2", "filename": "gcc/testsuite/gcc.dg/tls/vis-flag-hidden.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d561e1851c466a4952081caef17747781609b00/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fvis-flag-hidden.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d561e1851c466a4952081caef17747781609b00/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fvis-flag-hidden.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fvis-flag-hidden.c?ref=1d561e1851c466a4952081caef17747781609b00", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target fpic } */\n+/* { dg-require-effective-target tls } */\n+/* { dg-options \"-O2 -fPIC -fdump-ipa-whole-program -fvisibility=hidden\" } */\n+\n+\n+// tls_model should be local-dynamic due to -fvisibility=hidden\n+__thread int x;\n+\n+void reference() { x++; }\n+\n+/* { dg-final { scan-ipa-dump \"Varpool flags: tls-local-dynamic\" \"whole-program\" } } */"}, {"sha": "3b3598134fea6b7fab41316cbcff37621666717a", "filename": "gcc/testsuite/gcc.dg/tls/vis-pragma-hidden-gd.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d561e1851c466a4952081caef17747781609b00/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fvis-pragma-hidden-gd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d561e1851c466a4952081caef17747781609b00/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fvis-pragma-hidden-gd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fvis-pragma-hidden-gd.c?ref=1d561e1851c466a4952081caef17747781609b00", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target fpic } */\n+/* { dg-require-effective-target tls } */\n+/* { dg-options \"-O2 -fPIC -fdump-ipa-whole-program\" } */\n+\n+\n+#pragma GCC visibility push(hidden)\n+\n+// tls_model should be global-dynamic due to explicitly specified attribute\n+__attribute__((tls_model(\"global-dynamic\")))\n+__thread int x;\n+\n+#pragma GCC visibility pop\n+\n+void reference() { x++; }\n+\n+/* { dg-final { scan-ipa-dump \"Varpool flags: tls-global-dynamic\" \"whole-program\" } } */"}, {"sha": "1be97644243ab451a6afd697178505c5c848f438", "filename": "gcc/testsuite/gcc.dg/tls/vis-pragma-hidden.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d561e1851c466a4952081caef17747781609b00/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fvis-pragma-hidden.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d561e1851c466a4952081caef17747781609b00/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fvis-pragma-hidden.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fvis-pragma-hidden.c?ref=1d561e1851c466a4952081caef17747781609b00", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target fpic } */\n+/* { dg-require-effective-target tls } */\n+/* { dg-options \"-O2 -fPIC -fdump-ipa-whole-program\" } */\n+\n+\n+#pragma GCC visibility push(hidden)\n+\n+// tls_model should be local-dynamic due to a pragma\n+__thread int x;\n+\n+#pragma GCC visibility pop\n+\n+void reference() { x++; }\n+\n+/* { dg-final { scan-ipa-dump \"Varpool flags: tls-local-dynamic\" \"whole-program\" } } */"}, {"sha": "d0beac8f8e36814921a06407950f6afc6b8b641b", "filename": "gcc/varasm.cc", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d561e1851c466a4952081caef17747781609b00/gcc%2Fvarasm.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d561e1851c466a4952081caef17747781609b00/gcc%2Fvarasm.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.cc?ref=1d561e1851c466a4952081caef17747781609b00", "patch": "@@ -6658,6 +6658,36 @@ init_varasm_once (void)\n #endif\n }\n \n+/* Determine whether SYMBOL is used in any optimized function.  */\n+\n+static bool\n+have_optimized_refs (struct symtab_node *symbol)\n+{\n+  struct ipa_ref *ref;\n+\n+  for (int i = 0; symbol->iterate_referring (i, ref); i++)\n+    {\n+      cgraph_node *cnode = dyn_cast <cgraph_node *> (ref->referring);\n+\n+      if (cnode && opt_for_fn (cnode->decl, optimize))\n+\treturn true;\n+    }\n+\n+  return false;\n+}\n+\n+/* Check if promoting general-dynamic TLS access model to local-dynamic is\n+   desirable for DECL.  */\n+\n+static bool\n+optimize_dyn_tls_for_decl_p (const_tree decl)\n+{\n+  if (cfun)\n+    return optimize;\n+  return symtab->state >= IPA && have_optimized_refs (symtab_node::get (decl));\n+}\n+\n+\n enum tls_model\n decl_default_tls_model (const_tree decl)\n {\n@@ -6675,7 +6705,7 @@ decl_default_tls_model (const_tree decl)\n \n   /* Local dynamic is inefficient when we're not combining the\n      parts of the address.  */\n-  else if (optimize && is_local)\n+  else if (is_local && optimize_dyn_tls_for_decl_p (decl))\n     kind = TLS_MODEL_LOCAL_DYNAMIC;\n   else\n     kind = TLS_MODEL_GLOBAL_DYNAMIC;"}]}