{"sha": "c404ab029db3cf2b4980ce2adfde67c3ee6252e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzQwNGFiMDI5ZGIzY2YyYjQ5ODBjZTJhZGZkZTY3YzNlZTYyNTJlMA==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2004-01-09T21:30:31Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2004-01-09T21:30:31Z"}, "message": "name-lookup.c (qualified_lookup_using_namespace): Consider strong using directives even if we've already found a binding.\n\n* name-lookup.c (qualified_lookup_using_namespace): Consider\nstrong using directives even if we've already found a binding.\n\nFrom-SVN: r75599", "tree": {"sha": "3d35383337edd3a450bf5a6e1c4c06c1e0c75389", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d35383337edd3a450bf5a6e1c4c06c1e0c75389"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c404ab029db3cf2b4980ce2adfde67c3ee6252e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c404ab029db3cf2b4980ce2adfde67c3ee6252e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c404ab029db3cf2b4980ce2adfde67c3ee6252e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c404ab029db3cf2b4980ce2adfde67c3ee6252e0/comments", "author": null, "committer": null, "parents": [{"sha": "bafb62a279780038d9a42d120496c7b0ab7b4734", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bafb62a279780038d9a42d120496c7b0ab7b4734", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bafb62a279780038d9a42d120496c7b0ab7b4734"}], "stats": {"total": 28, "additions": 19, "deletions": 9}, "files": [{"sha": "bdbdd36389b2ed69510bb7636a53fc46b72877df", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c404ab029db3cf2b4980ce2adfde67c3ee6252e0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c404ab029db3cf2b4980ce2adfde67c3ee6252e0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c404ab029db3cf2b4980ce2adfde67c3ee6252e0", "patch": "@@ -1,3 +1,8 @@\n+2004-01-09  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* name-lookup.c (qualified_lookup_using_namespace): Consider\n+\tstrong using directives even if we've already found a binding.\n+\n 2004-01-09  Mark Mitchell  <mark@codesourcery.com>\n \n \t* cp-tree.h (cxx_expand_expr): Change prototype."}, {"sha": "010bbe3989c632a3713ce9032a29b01c20c7e266", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c404ab029db3cf2b4980ce2adfde67c3ee6252e0/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c404ab029db3cf2b4980ce2adfde67c3ee6252e0/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=c404ab029db3cf2b4980ce2adfde67c3ee6252e0", "patch": "@@ -1,5 +1,5 @@\n /* Definitions for C++ name lookup routines.\n-   Copyright (C) 2003 Free Software Foundation, Inc.\n+   Copyright (C) 2003, 2004 Free Software Foundation, Inc.\n    Contributed by Gabriel Dos Reis <gdr@integrable-solutions.net>\n \n This file is part of GCC.\n@@ -3789,14 +3789,19 @@ qualified_lookup_using_namespace (tree name, tree scope, cxx_binding *result,\n       seen = tree_cons (scope, NULL_TREE, seen);\n       if (binding)\n         result = ambiguous_decl (name, result, binding, flags);\n-      if (!result->value && !result->type)\n-\t/* Consider using directives.  */\n-\tfor (usings = DECL_NAMESPACE_USING (scope); usings;\n-\t     usings = TREE_CHAIN (usings))\n-\t  /* If this was a real directive, and we have not seen it.  */\n-\t  if (!TREE_INDIRECT_USING (usings)\n-\t      && !purpose_member (TREE_PURPOSE (usings), seen))\n-\t    todo = tree_cons (TREE_PURPOSE (usings), NULL_TREE, todo);\n+\n+      /* Consider strong using directives always, and non-strong ones\n+\t if we haven't found a binding yet.  ??? Shouldn't we consider\n+\t non-strong ones if the initial RESULT is non-NULL, but the\n+\t binding in the given namespace is?  */\n+      for (usings = DECL_NAMESPACE_USING (scope); usings;\n+\t   usings = TREE_CHAIN (usings))\n+\t/* If this was a real directive, and we have not seen it.  */\n+\tif (!TREE_INDIRECT_USING (usings)\n+\t    && ((!result->value && !result->type)\n+\t\t|| is_associated_namespace (scope, TREE_PURPOSE (usings)))\n+\t    && !purpose_member (TREE_PURPOSE (usings), seen))\n+\t  todo = tree_cons (TREE_PURPOSE (usings), NULL_TREE, todo);\n       if (todo)\n \t{\n \t  scope = TREE_PURPOSE (todo);"}]}