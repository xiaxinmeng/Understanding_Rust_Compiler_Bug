{"sha": "c2cc077888d46ed6c75ad56599af8d78da74b317", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzJjYzA3Nzg4OGQ0NmVkNmM3NWFkNTY1OTlhZjhkNzhkYTc0YjMxNw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-12-26T12:55:11Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-12-26T12:55:11Z"}, "message": "(fold_rtx...\n\n(fold_rtx, case PLUS): If we have (plus A B), A is equivalent to a\nnegative constant, and the negated constant is in register, convert to\n(minus A C) where C is the register containing the negated constant.\n\nFrom-SVN: r6326", "tree": {"sha": "50547e360c759c9f023e73579b0f2702d78f919a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/50547e360c759c9f023e73579b0f2702d78f919a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c2cc077888d46ed6c75ad56599af8d78da74b317", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2cc077888d46ed6c75ad56599af8d78da74b317", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2cc077888d46ed6c75ad56599af8d78da74b317", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2cc077888d46ed6c75ad56599af8d78da74b317/comments", "author": null, "committer": null, "parents": [{"sha": "75600ead0c51e477b2993ff06ec7810636def420", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75600ead0c51e477b2993ff06ec7810636def420", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75600ead0c51e477b2993ff06ec7810636def420"}], "stats": {"total": 21, "additions": 21, "deletions": 0}, "files": [{"sha": "d1fc015ce8068565281ff701cf9d447e7b73bbb5", "filename": "gcc/cse.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2cc077888d46ed6c75ad56599af8d78da74b317/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2cc077888d46ed6c75ad56599af8d78da74b317/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=c2cc077888d46ed6c75ad56599af8d78da74b317", "patch": "@@ -5350,6 +5350,27 @@ fold_rtx (x, insn)\n \t\t  && XEXP (XEXP (y, 1), 0) == XEXP (const_arg1, 0))\n \t\treturn XEXP (y, 0);\n \t    }\n+\n+\t  /* If second operand is a register equivalent to a negative\n+\t     CONST_INT, see if we can find a register equivalent to the\n+\t     positive constant.  Make a MINUS if so.  Don't do this for\n+\t     a negative constant since we might then alternate between\n+\t     chosing positive and negative constants.  Having the positive\n+\t     constant previously-used is the more common case.  */\n+\t  if (const_arg1 && GET_CODE (const_arg1) == CONST_INT\n+\t      && INTVAL (const_arg1) < 0 && GET_CODE (folded_arg1) == REG)\n+\t    {\n+\t      rtx new_const = GEN_INT (- INTVAL (const_arg1));\n+\t      struct table_elt *p\n+\t\t= lookup (new_const, safe_hash (new_const, mode) % NBUCKETS,\n+\t\t\t  mode);\n+\n+\t      if (p)\n+\t\tfor (p = p->first_same_value; p; p = p->next_same_value)\n+\t\t  if (GET_CODE (p->exp) == REG)\n+\t\t    return cse_gen_binary (MINUS, mode, folded_arg0,\n+\t\t\t\t\t   canon_reg (p->exp, NULL_RTX));\n+\t    }\n \t  goto from_plus;\n \n \tcase MINUS:"}]}