{"sha": "436529eae35b089720e402b3e9354b7786ea2c38", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDM2NTI5ZWFlMzViMDg5NzIwZTQwMmIzZTkzNTRiNzc4NmVhMmMzOA==", "commit": {"author": {"name": "Tobias Schl\u00fcter", "email": "tobias.schlueter@physik.uni-muenchen.de", "date": "2004-08-24T16:25:16Z"}, "committer": {"name": "Tobias Schl\u00fcter", "email": "tobi@gcc.gnu.org", "date": "2004-08-24T16:25:16Z"}, "message": "* trans-types.c: Spelling and formatting fixes.\n\nFrom-SVN: r86490", "tree": {"sha": "92512c1fdd288e76872640061f9de4284445873f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/92512c1fdd288e76872640061f9de4284445873f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/436529eae35b089720e402b3e9354b7786ea2c38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/436529eae35b089720e402b3e9354b7786ea2c38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/436529eae35b089720e402b3e9354b7786ea2c38", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/436529eae35b089720e402b3e9354b7786ea2c38/comments", "author": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7746c5c31a9d121d17c534c6d676c22e28645f66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7746c5c31a9d121d17c534c6d676c22e28645f66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7746c5c31a9d121d17c534c6d676c22e28645f66"}], "stats": {"total": 28, "additions": 16, "deletions": 12}, "files": [{"sha": "b6ce788b35be0ec98ceca825aa6e9531cbab0b06", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/436529eae35b089720e402b3e9354b7786ea2c38/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/436529eae35b089720e402b3e9354b7786ea2c38/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=436529eae35b089720e402b3e9354b7786ea2c38", "patch": "@@ -1,3 +1,7 @@\n+2004-08-24  Tobias Schlueter  <tobias.schlueter@physik.uni-muenchen.de>\n+\n+\t* trans-types.c: Spelling and formatting fixes.\n+\n 2004-08-23  Richard Henderson  <rth@redhat.com>\n \n \t* trans-const.c (gfc_conv_mpz_to_tree): Use mpz_getlimbn instead"}, {"sha": "20ba42846e26058a0610716fec41f8bc62f66641", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/436529eae35b089720e402b3e9354b7786ea2c38/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/436529eae35b089720e402b3e9354b7786ea2c38/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=436529eae35b089720e402b3e9354b7786ea2c38", "patch": "@@ -177,7 +177,7 @@ gfc_init_types (void)\n   boolean_false_node = build_int_cst (boolean_type_node, 0, 0);\n }\n \n-/* Get a type node for an integer kind */\n+/* Get a type node for an integer kind.  */\n \n tree\n gfc_get_int_type (int kind)\n@@ -201,7 +201,7 @@ gfc_get_int_type (int kind)\n     }\n }\n \n-/* Get a type node for a real kind */\n+/* Get a type node for a real kind.  */\n \n tree\n gfc_get_real_type (int kind)\n@@ -221,11 +221,12 @@ gfc_get_real_type (int kind)\n     }\n }\n \n-/* Get a type node for a complex kind */\n+/* Get a type node for a complex kind.  */\n \n tree\n gfc_get_complex_type (int kind)\n {\n+\n   switch (kind)\n     {\n     case 4:\n@@ -241,7 +242,7 @@ gfc_get_complex_type (int kind)\n     }\n }\n \n-/* Get a type node for a logical kind */\n+/* Get a type node for a logical kind.  */\n \n tree\n gfc_get_logical_type (int kind)\n@@ -445,8 +446,7 @@ gfc_get_element_type (tree type)\n    dimension.  This requires extra fields in the descriptor (both real_ubound\n    and fake_ubound).  In tree.def there is mention of TYPE_SEP, which\n    may allow us to do this.  However I can't find mention of this anywhere\n-   else.\n- */\n+   else.  */\n \n \n /* Returns true if the array sym does not require a descriptor.  */\n@@ -903,7 +903,8 @@ gfc_get_array_type_bounds (tree etype, int dimen, tree * lbound,\n static tree\n gfc_build_pointer_type (gfc_symbol * sym, tree type)\n {\n-  /* Array pointer types aren't actualy pointers.  */\n+\n+  /* Array pointer types aren't actually pointers.  */\n   if (sym->attr.dimension)\n     return type;\n   else\n@@ -1036,10 +1037,10 @@ gfc_get_derived_type (gfc_symbol * derived)\n   assert (derived && derived->attr.flavor == FL_DERIVED);\n \n   /* derived->backend_decl != 0 means we saw it before, but its\n-  component's backend_decl may have not been built.  */\n+     components' backend_decl may have not been built.  */\n   if (derived->backend_decl)\n     {\n-      /* Its component's backend_decl has been built.  */\n+      /* Its components' backend_decl have been built.  */\n       if (TYPE_FIELDS (derived->backend_decl))\n         return derived->backend_decl;\n       else\n@@ -1144,7 +1145,6 @@ gfc_return_by_reference (gfc_symbol * sym)\n   return 0;\n }\n \f\n-\n tree\n gfc_get_function_type (gfc_symbol * sym)\n {\n@@ -1193,7 +1193,7 @@ gfc_get_function_type (gfc_symbol * sym)\n \ttypelist = gfc_chainon_list (typelist, gfc_strlen_type_node);\n     }\n \n-  /* Build the argument types for the function */\n+  /* Build the argument types for the function.  */\n   for (f = sym->formal; f; f = f->next)\n     {\n       arg = f->sym;\n@@ -1255,7 +1255,7 @@ gfc_get_function_type (gfc_symbol * sym)\n   return type;\n }\n \f\n-/* Routines for getting integer type nodes */\n+/* Routines for getting integer type nodes.  */\n \n \n /* Return an integer type with BITS bits of precision,"}]}