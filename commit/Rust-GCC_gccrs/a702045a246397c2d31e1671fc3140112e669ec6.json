{"sha": "a702045a246397c2d31e1671fc3140112e669ec6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTcwMjA0NWEyNDYzOTdjMmQzMWUxNjcxZmMzMTQwMTEyZTY2OWVjNg==", "commit": {"author": {"name": "Ollie Wild", "email": "aaw@google.com", "date": "2007-05-24T20:55:36Z"}, "committer": {"name": "Ollie Wild", "email": "aaw@gcc.gnu.org", "date": "2007-05-24T20:55:36Z"}, "message": "macro.c (_cpp_builtin_macro_text): Handle BT_COUNTER.\n\n\t* macro.c (_cpp_builtin_macro_text): Handle BT_COUNTER.\n\t* pch.c (cpp_write_pch_deps): Save __COUNTER__ state.\n\t(cpp_write_pch_state): Save __COUNTER__ state.\n\t(cpp_valid_state): Check valid __COUNTER__ state.\n\t(cpp_read_state): Read new __COUNTER__ state.\n\t* include/cpplib.h (enum builtin_type): Add BT_COUNTER enumerator.\n\t* init.c (builtin_array): Add __COUNTER__/BT_COUNTER.\n\t* internal.h (struct cpp_reader): Add counter member.\n\n\t* gcc.dg/cpp/counter-1.c: New test.\n\t* gcc.dg/pch/counter-1.c: New test.\n\t* gcc.dg/pch/counter-1.hs: New file.\n\t* gcc.dg/pch/counter-2.c: New test.\n\t* gcc.dg/pch/counter-2.hs: New file.\n\t* gcc.dg/pch/counter-3.c: New test.\n\t* gcc.dg/pch/counter-3.hs: New file.\n\n\t* doc/cpp.texi (Common Predefined Macros): Add __COUNTER__\n\tdescription.\n\nFrom-SVN: r125041", "tree": {"sha": "39f5da17b3f4b0f1ab1e9e7b4922fef43daed126", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/39f5da17b3f4b0f1ab1e9e7b4922fef43daed126"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a702045a246397c2d31e1671fc3140112e669ec6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a702045a246397c2d31e1671fc3140112e669ec6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a702045a246397c2d31e1671fc3140112e669ec6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a702045a246397c2d31e1671fc3140112e669ec6/comments", "author": {"login": "olliewild", "id": 11523068, "node_id": "MDQ6VXNlcjExNTIzMDY4", "avatar_url": "https://avatars.githubusercontent.com/u/11523068?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olliewild", "html_url": "https://github.com/olliewild", "followers_url": "https://api.github.com/users/olliewild/followers", "following_url": "https://api.github.com/users/olliewild/following{/other_user}", "gists_url": "https://api.github.com/users/olliewild/gists{/gist_id}", "starred_url": "https://api.github.com/users/olliewild/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olliewild/subscriptions", "organizations_url": "https://api.github.com/users/olliewild/orgs", "repos_url": "https://api.github.com/users/olliewild/repos", "events_url": "https://api.github.com/users/olliewild/events{/privacy}", "received_events_url": "https://api.github.com/users/olliewild/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e1b871ecc12b6c2a7b62a64ffbbd0714ab8d5c56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1b871ecc12b6c2a7b62a64ffbbd0714ab8d5c56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1b871ecc12b6c2a7b62a64ffbbd0714ab8d5c56"}], "stats": {"total": 155, "additions": 154, "deletions": 1}, "files": [{"sha": "28dcaec58ae06eda5e63a815e2e8351ae4e3e2ee", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a702045a246397c2d31e1671fc3140112e669ec6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a702045a246397c2d31e1671fc3140112e669ec6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a702045a246397c2d31e1671fc3140112e669ec6", "patch": "@@ -1,3 +1,8 @@\n+2007-05-24  Ollie Wild  <aaw@google.com>\n+\n+\t* doc/cpp.texi (Common Predefined Macros): Add __COUNTER__\n+\tdescription.\n+\n 2007-05-24  Richard Sandiford  <rsandifo@nildram.co.uk>\n \n \t* postreload-gcse.c (reg_changed_after_insn_p): New function."}, {"sha": "54941a9f3c6deb61728550df98868d8cd4accbb6", "filename": "gcc/doc/cpp.texi", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a702045a246397c2d31e1671fc3140112e669ec6/gcc%2Fdoc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a702045a246397c2d31e1671fc3140112e669ec6/gcc%2Fdoc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp.texi?ref=a702045a246397c2d31e1671fc3140112e669ec6", "patch": "@@ -1917,6 +1917,13 @@ underscores.\n \n @table @code\n \n+@item __COUNTER__\n+This macro expands to sequential integral values starting from 0.  In\n+conjuction with the @code{##} operator, this provides a convenient means to\n+generate unique identifiers.  Care must be taken to ensure that\n+@code{__COUNTER__} is not expanded prior to inclusion of precompiled headers\n+which use it.  Otherwise, the precompiled headers will not be used.\n+\n @item __GNUC__\n @itemx __GNUC_MINOR__\n @itemx __GNUC_PATCHLEVEL__"}, {"sha": "7a33bde99a80f560a41c39973f1eee20c2656a4e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a702045a246397c2d31e1671fc3140112e669ec6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a702045a246397c2d31e1671fc3140112e669ec6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a702045a246397c2d31e1671fc3140112e669ec6", "patch": "@@ -1,3 +1,13 @@\n+2007-05-24  Ollie Wild  <aaw@google.com>\n+\n+\t* gcc.dg/cpp/counter-1.c: New test.\n+\t* gcc.dg/pch/counter-1.c: New test.\n+\t* gcc.dg/pch/counter-1.hs: New file.\n+\t* gcc.dg/pch/counter-2.c: New test.\n+\t* gcc.dg/pch/counter-2.hs: New file.\n+\t* gcc.dg/pch/counter-3.c: New test.\n+\t* gcc.dg/pch/counter-3.hs: New file.\n+\n 2007-05-24  Zdenek Dvorak  <dvorakz@suse.cz>\n \n \t* gcc.dg/tree-ssa/predcom-1.c: New test."}, {"sha": "80d8b789271f25dec6ba983b23108fae43e2974d", "filename": "gcc/testsuite/gcc.dg/cpp/counter-1.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a702045a246397c2d31e1671fc3140112e669ec6/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcounter-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a702045a246397c2d31e1671fc3140112e669ec6/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcounter-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcounter-1.c?ref=a702045a246397c2d31e1671fc3140112e669ec6", "patch": "@@ -0,0 +1,20 @@\n+/* Copyright (C) 2007 Free Software Foundation\n+   Contributed by Ollie Wild <aaw@google.com> */\n+\n+/* { dg-do preprocess } */\n+\n+/* Tests __COUNTER__ macro is correctly expanded.  */\n+\n+#define counter __COUNTER__\n+\n+#if __COUNTER__ != 0\n+#error __COUNTER__ != 0\n+#endif\n+\n+#if counter != 1\n+#error counter != 1\n+#endif\n+\n+#if __COUNTER__ != 2\n+#error __COUNTER__ != 2\n+#endif"}, {"sha": "79cea882d9b4554abefe795471e2b026d6a5660f", "filename": "gcc/testsuite/gcc.dg/pch/counter-1.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a702045a246397c2d31e1671fc3140112e669ec6/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fcounter-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a702045a246397c2d31e1671fc3140112e669ec6/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fcounter-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fcounter-1.c?ref=a702045a246397c2d31e1671fc3140112e669ec6", "patch": "@@ -0,0 +1,9 @@\n+/* Copyright (C) 2007 Free Software Foundation\n+   Contributed by Ollie Wild <aaw@google.com> */\n+\n+#include \"counter-1.h\"\n+\n+int main(void) \n+{\n+  return __COUNTER__;\n+}"}, {"sha": "c3d2ce7919a5fd6d8a729554d7d4a97af34dcfb9", "filename": "gcc/testsuite/gcc.dg/pch/counter-1.hs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a702045a246397c2d31e1671fc3140112e669ec6/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fcounter-1.hs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a702045a246397c2d31e1671fc3140112e669ec6/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fcounter-1.hs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fcounter-1.hs?ref=a702045a246397c2d31e1671fc3140112e669ec6", "patch": "@@ -0,0 +1,5 @@\n+/* Copyright (C) 2007 Free Software Foundation\n+   Contributed by Ollie Wild <aaw@google.com> */\n+\n+static unsigned offset[] = {__COUNTER__, __COUNTER__, __COUNTER__};\n+#define counter __COUNTER__"}, {"sha": "7bbde23e062ad9d89974f06e9905fc8d5bb162a9", "filename": "gcc/testsuite/gcc.dg/pch/counter-2.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a702045a246397c2d31e1671fc3140112e669ec6/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fcounter-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a702045a246397c2d31e1671fc3140112e669ec6/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fcounter-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fcounter-2.c?ref=a702045a246397c2d31e1671fc3140112e669ec6", "patch": "@@ -0,0 +1,15 @@\n+/* Copyright (C) 2007 Free Software Foundation\n+   Contributed by Ollie Wild <aaw@google.com> */\n+\n+/* { dg-options \"-I. -Winvalid-pch\" } */\n+\n+#if __COUNTER__ != 0\n+#error __COUNTER__ != 0\n+#endif\n+\n+#include \"counter-2.h\"/* { dg-error \"`__COUNTER__' is invalid|No such file|they were invalid\" } */\n+\n+int main(void) \n+{\n+  return __COUNTER__;\n+}"}, {"sha": "63b8a2b7fa5eb80b26386d1e538dd37a82fbacec", "filename": "gcc/testsuite/gcc.dg/pch/counter-2.hs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a702045a246397c2d31e1671fc3140112e669ec6/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fcounter-2.hs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a702045a246397c2d31e1671fc3140112e669ec6/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fcounter-2.hs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fcounter-2.hs?ref=a702045a246397c2d31e1671fc3140112e669ec6", "patch": "@@ -0,0 +1,4 @@\n+/* Copyright (C) 2007 Free Software Foundation\n+   Contributed by Ollie Wild <aaw@google.com> */\n+\n+static int i = __COUNTER__;"}, {"sha": "827920563bde1fb76e934822e456161eca0dfe63", "filename": "gcc/testsuite/gcc.dg/pch/counter-3.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a702045a246397c2d31e1671fc3140112e669ec6/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fcounter-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a702045a246397c2d31e1671fc3140112e669ec6/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fcounter-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fcounter-3.c?ref=a702045a246397c2d31e1671fc3140112e669ec6", "patch": "@@ -0,0 +1,13 @@\n+/* Copyright (C) 2007 Free Software Foundation\n+   Contributed by Ollie Wild <aaw@google.com> */\n+\n+#if __COUNTER__ != 0\n+#error __COUNTER__ != 0\n+#endif\n+\n+#include \"counter-3.h\"\n+\n+int main(void) \n+{\n+  return __COUNTER__;\n+}"}, {"sha": "19039c82074b33d2b5c84ef702587434b43d794e", "filename": "gcc/testsuite/gcc.dg/pch/counter-3.hs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a702045a246397c2d31e1671fc3140112e669ec6/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fcounter-3.hs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a702045a246397c2d31e1671fc3140112e669ec6/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fcounter-3.hs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fcounter-3.hs?ref=a702045a246397c2d31e1671fc3140112e669ec6", "patch": "@@ -0,0 +1,4 @@\n+/* Copyright (C) 2007 Free Software Foundation\n+   Contributed by Ollie Wild <aaw@google.com> */\n+\n+#define counter __COUNTER__"}, {"sha": "a95ae545b07f69620189ffc602a967d8e23d28bd", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a702045a246397c2d31e1671fc3140112e669ec6/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a702045a246397c2d31e1671fc3140112e669ec6/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=a702045a246397c2d31e1671fc3140112e669ec6", "patch": "@@ -1,3 +1,14 @@\n+2007-05-24  Ollie Wild  <aaw@google.com>\n+\n+\t* macro.c (_cpp_builtin_macro_text): Handle BT_COUNTER.\n+\t* pch.c (cpp_write_pch_deps): Save __COUNTER__ state.\n+\t(cpp_write_pch_state): Save __COUNTER__ state.\n+\t(cpp_valid_state): Check valid __COUNTER__ state.\n+\t(cpp_read_state): Read new __COUNTER__ state.\n+\t* include/cpplib.h (enum builtin_type): Add BT_COUNTER enumerator.\n+\t* init.c (builtin_array): Add __COUNTER__/BT_COUNTER.\n+\t* internal.h (struct cpp_reader): Add counter member.\n+\n 2007-05-23  Simon Martin  <simartin@users.sourceforge.net>\n \n \tPR preprocessor/20077"}, {"sha": "ff5292ef3c8615e22bcb215ca58bb08c45295fd3", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a702045a246397c2d31e1671fc3140112e669ec6/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a702045a246397c2d31e1671fc3140112e669ec6/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=a702045a246397c2d31e1671fc3140112e669ec6", "patch": "@@ -555,7 +555,8 @@ enum builtin_type\n   BT_TIME,\t\t\t/* `__TIME__' */\n   BT_STDC,\t\t\t/* `__STDC__' */\n   BT_PRAGMA,\t\t\t/* `_Pragma' operator */\n-  BT_TIMESTAMP\t\t\t/* `__TIMESTAMP__' */\n+  BT_TIMESTAMP,\t\t\t/* `__TIMESTAMP__' */\n+  BT_COUNTER\t\t\t/* `__COUNTER__' */\n };\n \n #define CPP_HASHNODE(HNODE)\t((cpp_hashnode *) (HNODE))"}, {"sha": "71583df94d6451d108893739bdd82b1aeb446501", "filename": "libcpp/init.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a702045a246397c2d31e1671fc3140112e669ec6/libcpp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a702045a246397c2d31e1671fc3140112e669ec6/libcpp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finit.c?ref=a702045a246397c2d31e1671fc3140112e669ec6", "patch": "@@ -310,6 +310,7 @@ static const struct builtin builtin_array[] =\n   B(\"__BASE_FILE__\",\t BT_BASE_FILE),\n   B(\"__LINE__\",\t\t BT_SPECLINE),\n   B(\"__INCLUDE_LEVEL__\", BT_INCLUDE_LEVEL),\n+  B(\"__COUNTER__\",\t BT_COUNTER),\n   /* Keep builtins not used for -traditional-cpp at the end, and\n      update init_builtins() if any more are added.  */\n   B(\"_Pragma\",\t\t BT_PRAGMA),"}, {"sha": "d000cfda54fa0c084f4b08e2c670591bf7e015a0", "filename": "libcpp/internal.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a702045a246397c2d31e1671fc3140112e669ec6/libcpp%2Finternal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a702045a246397c2d31e1671fc3140112e669ec6/libcpp%2Finternal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finternal.h?ref=a702045a246397c2d31e1671fc3140112e669ec6", "patch": "@@ -452,6 +452,9 @@ struct cpp_reader\n   /* A saved list of the defined macros, for dependency checking\n      of precompiled headers.  */\n   struct cpp_savedstate *savedstate;\n+\n+  /* Next value of __COUNTER__ macro. */\n+  unsigned int counter;\n };\n \n /* Character classes.  Based on the more primitive macros in safe-ctype.h."}, {"sha": "c8d099ed210f6eadc630bc671de7867540d1df33", "filename": "libcpp/macro.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a702045a246397c2d31e1671fc3140112e669ec6/libcpp%2Fmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a702045a246397c2d31e1671fc3140112e669ec6/libcpp%2Fmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fmacro.c?ref=a702045a246397c2d31e1671fc3140112e669ec6", "patch": "@@ -263,6 +263,10 @@ _cpp_builtin_macro_text (cpp_reader *pfile, cpp_hashnode *node)\n       else\n \tresult = pfile->time;\n       break;\n+\n+    case BT_COUNTER:\n+      number = pfile->counter++;\n+      break;\n     }\n \n   if (result == NULL)"}, {"sha": "09373a2fd4e14d696662c3fd8f81078a48bfa2aa", "filename": "libcpp/pch.c", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a702045a246397c2d31e1671fc3140112e669ec6/libcpp%2Fpch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a702045a246397c2d31e1671fc3140112e669ec6/libcpp%2Fpch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fpch.c?ref=a702045a246397c2d31e1671fc3140112e669ec6", "patch": "@@ -337,6 +337,14 @@ cpp_write_pch_deps (cpp_reader *r, FILE *f)\n   /* Free the saved state.  */\n   free (ss);\n   r->savedstate = NULL;\n+\n+  /* Save the next value of __COUNTER__. */\n+  if (fwrite (&r->counter, sizeof (r->counter), 1, f) != 1)\n+    {\n+      cpp_errno (r, CPP_DL_ERROR, \"while writing precompiled header\");\n+      return -1;\n+    }\n+\n   return 0;\n }\n \n@@ -361,6 +369,15 @@ cpp_write_pch_state (cpp_reader *r, FILE *f)\n       return -1;\n     }\n \n+  /* Save the next __COUNTER__ value.  When we include a precompiled header,\n+     we need to start at the offset we would have if the header had been\n+     included normally. */\n+  if (fwrite (&r->counter, sizeof (r->counter), 1, f) != 1)\n+    {\n+      cpp_errno (r, CPP_DL_ERROR, \"while writing precompiled header\");\n+      return -1;\n+    }\n+\n   return 0;\n }\n \n@@ -423,6 +440,7 @@ cpp_valid_state (cpp_reader *r, const char *name, int fd)\n   struct ht_node_list nl = { 0, 0, 0 };\n   unsigned char *first, *last;\n   unsigned int i;\n+  unsigned int counter;\n   \n   /* Read in the list of identifiers that must be defined\n      Check that they are defined in the same way.  */\n@@ -524,7 +542,23 @@ cpp_valid_state (cpp_reader *r, const char *name, int fd)\n     }\n    \n   free(nl.defs);\n+  nl.defs = NULL;\n   free (undeftab);\n+  undeftab = NULL;\n+\n+  /* Read in the next value of __COUNTER__.\n+     Check that (a) __COUNTER__ was not used in the pch or (b) __COUNTER__\n+     has not been used in this translation unit. */\n+  if (read (fd, &counter, sizeof (counter)) != sizeof (counter))\n+    goto error;\n+  if (counter && r->counter)\n+    {\n+      if (CPP_OPTION (r, warn_invalid_pch))\n+\tcpp_error (r, CPP_DL_WARNING_SYSHDR, \n+\t\t   \"%s: not used because `__COUNTER__' is invalid\",\n+\t\t   name);\n+\tgoto fail;\n+    }\n \n   /* We win!  */\n   return 0;\n@@ -631,6 +665,7 @@ cpp_read_state (cpp_reader *r, const char *name, FILE *f,\n {\n   size_t i;\n   struct lexer_state old_state;\n+  unsigned int counter;\n \n   /* Restore spec_nodes, which will be full of references to the old \n      hashtable entries and so will now be invalid.  */\n@@ -690,6 +725,12 @@ cpp_read_state (cpp_reader *r, const char *name, FILE *f,\n   if (! _cpp_read_file_entries (r, f))\n     goto error;\n \n+  if (fread (&counter, sizeof (counter), 1, f) != 1)\n+    goto error;\n+\n+  if (!r->counter)\n+    r->counter = counter;\n+\n   return 0;\n   \n  error:"}]}