{"sha": "ab5519b72116dd509ea5cb0d14be6b6341a8a59a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWI1NTE5YjcyMTE2ZGQ1MDllYTVjYjBkMTRiZTZiNjM0MWE4YTU5YQ==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1993-01-11T22:25:36Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1993-01-11T22:25:36Z"}, "message": "(*): Make all fp patterns conditional on TARGET_FPU.\n\n(movtf, movdf, movsf): Add !TARGET_FPU versions.\n(sfmode return): Add pattern for when !TARGET_FPU.\n(movsi+2, movsf+1): Use %@ instead of %%fp.\n(mulsidi3, umulsidi3): Rewrite, to avoid extending constants.\n\nFrom-SVN: r3195", "tree": {"sha": "467e5f3acde97b8f62b08d1aceb9eb4b266b36ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/467e5f3acde97b8f62b08d1aceb9eb4b266b36ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab5519b72116dd509ea5cb0d14be6b6341a8a59a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab5519b72116dd509ea5cb0d14be6b6341a8a59a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab5519b72116dd509ea5cb0d14be6b6341a8a59a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab5519b72116dd509ea5cb0d14be6b6341a8a59a/comments", "author": null, "committer": null, "parents": [{"sha": "883bc780752784d32304321283176d4837346ce7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/883bc780752784d32304321283176d4837346ce7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/883bc780752784d32304321283176d4837346ce7"}], "stats": {"total": 245, "additions": 184, "deletions": 61}, "files": [{"sha": "bef48086a2894ba15655d5e5bc7a00ebd445f373", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 184, "deletions": 61, "changes": 245, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab5519b72116dd509ea5cb0d14be6b6341a8a59a/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab5519b72116dd509ea5cb0d14be6b6341a8a59a/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=ab5519b72116dd509ea5cb0d14be6b6341a8a59a", "patch": "@@ -200,7 +200,7 @@\n   [(set (reg:CCFP 0)\n \t(compare:CCFP (match_operand:SF 0 \"register_operand\" \"\")\n \t\t      (match_operand:SF 1 \"register_operand\" \"\")))]\n-  \"\"\n+  \"TARGET_FPU\"\n   \"\n {\n   sparc_compare_op0 = operands[0];\n@@ -212,7 +212,7 @@\n   [(set (reg:CCFP 0)\n \t(compare:CCFP (match_operand:DF 0 \"register_operand\" \"\")\n \t\t      (match_operand:DF 1 \"register_operand\" \"\")))]\n-  \"\"\n+  \"TARGET_FPU\"\n   \"\n {\n   sparc_compare_op0 = operands[0];\n@@ -224,7 +224,7 @@\n   [(set (reg:CCFP 0)\n \t(compare:CCFP (match_operand:TF 0 \"register_operand\" \"\")\n \t\t      (match_operand:TF 1 \"register_operand\" \"\")))]\n-  \"\"\n+  \"TARGET_FPU\"\n   \"\n {\n   sparc_compare_op0 = operands[0];\n@@ -394,47 +394,47 @@\n   [(set (reg:CCFPE 0)\n \t(compare:CCFPE (match_operand:DF 0 \"register_operand\" \"f\")\n \t\t       (match_operand:DF 1 \"register_operand\" \"f\")))]\n-  \"\"\n+  \"TARGET_FPU\"\n   \"fcmped %0,%1\"\n   [(set_attr \"type\" \"fpcmp\")])\n \n (define_insn \"\"\n   [(set (reg:CCFPE 0)\n \t(compare:CCFPE (match_operand:SF 0 \"register_operand\" \"f\")\n \t\t       (match_operand:SF 1 \"register_operand\" \"f\")))]\n-  \"\"\n+  \"TARGET_FPU\"\n   \"fcmpes %0,%1\"\n   [(set_attr \"type\" \"fpcmp\")])\n \n (define_insn \"\"\n   [(set (reg:CCFPE 0)\n \t(compare:CCFPE (match_operand:TF 0 \"register_operand\" \"f\")\n \t\t       (match_operand:TF 1 \"register_operand\" \"f\")))]\n-  \"\"\n+  \"TARGET_FPU\"\n   \"fcmpeq %0,%1\"\n   [(set_attr \"type\" \"fpcmp\")])\n \n (define_insn \"\"\n   [(set (reg:CCFP 0)\n \t(compare:CCFP (match_operand:DF 0 \"register_operand\" \"f\")\n \t\t      (match_operand:DF 1 \"register_operand\" \"f\")))]\n-  \"\"\n+  \"TARGET_FPU\"\n   \"fcmpd %0,%1\"\n   [(set_attr \"type\" \"fpcmp\")])\n \n (define_insn \"\"\n   [(set (reg:CCFP 0)\n \t(compare:CCFP (match_operand:SF 0 \"register_operand\" \"f\")\n \t\t      (match_operand:SF 1 \"register_operand\" \"f\")))]\n-  \"\"\n+  \"TARGET_FPU\"\n   \"fcmps %0,%1\"\n   [(set_attr \"type\" \"fpcmp\")])\n \n (define_insn \"\"\n   [(set (reg:CCFP 0)\n \t(compare:CCFP (match_operand:TF 0 \"register_operand\" \"f\")\n \t\t      (match_operand:TF 1 \"register_operand\" \"f\")))]\n-  \"\"\n+  \"TARGET_FPU\"\n   \"fcmpq %0,%1\"\n   [(set_attr \"type\" \"fpcmp\")])\n \n@@ -815,7 +815,7 @@\n    ld %1,%0\n    st %r1,%0\n    st %r1,%0\n-   st %r1,[%%fp-4]\\;ld [%%fp-4],%0\"\n+   st %r1,[%@-4]\\;ld [%@-4],%0\"\n   [(set_attr \"type\" \"move,move,load,load,store,store,multi\")\n    (set_attr \"length\" \"*,1,*,*,*,*,*\")])\n \n@@ -1077,7 +1077,7 @@\n (define_insn \"\"\n   [(set (match_operand:TF 0 \"general_operand\" \"=?r,f,o\")\n \t(match_operand:TF 1 \"\" \"?E,m,G\"))]\n-  \"GET_CODE (operands[1]) == CONST_DOUBLE\"\n+  \"TARGET_FPU && GET_CODE (operands[1]) == CONST_DOUBLE\"\n   \"*\n {\n   switch (which_alternative)\n@@ -1109,8 +1109,9 @@\n (define_insn \"\"\n   [(set (match_operand:TF 0 \"reg_or_nonsymb_mem_operand\" \"=f,r,Q,Q,f,&r,?f,?r\")\n \t(match_operand:TF 1 \"reg_or_nonsymb_mem_operand\" \"f,r,f,r,Q,Q,r,f\"))]\n-  \"register_operand (operands[0], TFmode)\n-   || register_operand (operands[1], TFmode)\"\n+  \"TARGET_FPU\n+   && (register_operand (operands[0], TFmode)\n+       || register_operand (operands[1], TFmode))\"\n   \"*\n {\n   if (FP_REG_P (operands[0]) || FP_REG_P (operands[1]))\n@@ -1120,6 +1121,25 @@\n   [(set_attr \"type\" \"fp,move,fpstore,store,fpload,load,multi,multi\")\n    (set_attr \"length\" \"4,4,5,5,5,5,5,5\")])\n \n+;; Exactly the same as above, except that all `f' cases are deleted.\n+;; This is necessary to prevent reload from ever trying to use a `f' reg\n+;; when -mno-fpu.\n+\n+(define_insn \"\"\n+  [(set (match_operand:TF 0 \"reg_or_nonsymb_mem_operand\" \"=r,Q,&r\")\n+\t(match_operand:TF 1 \"reg_or_nonsymb_mem_operand\" \"r,r,Q\"))]\n+  \"! TARGET_FPU\n+   && (register_operand (operands[0], TFmode)\n+       || register_operand (operands[1], TFmode))\"\n+  \"*\n+{\n+  if (FP_REG_P (operands[0]) || FP_REG_P (operands[1]))\n+    return output_fp_move_quad (operands);\n+  return output_move_quad (operands);\n+}\"\n+  [(set_attr \"type\" \"move,store,load\")\n+   (set_attr \"length\" \"4,5,5\")])\n+\n (define_insn \"\"\n   [(set (mem:TF (match_operand:SI 0 \"symbolic_operand\" \"i,i\"))\n \t(match_operand:TF 1 \"reg_or_0_operand\" \"rf,G\"))\n@@ -1139,10 +1159,11 @@\n ;; This pattern forces (set (reg:DF ...) (const_double ...))\n ;; to be reloaded by putting the constant into memory.\n ;; It must come before the more general movdf pattern.\n+\n (define_insn \"\"\n   [(set (match_operand:DF 0 \"general_operand\" \"=?r,f,o\")\n \t(match_operand:DF 1 \"\" \"?E,m,G\"))]\n-  \"GET_CODE (operands[1]) == CONST_DOUBLE\"\n+  \"TARGET_FPU && GET_CODE (operands[1]) == CONST_DOUBLE\"\n   \"*\n {\n   switch (which_alternative)\n@@ -1172,8 +1193,9 @@\n (define_insn \"\"\n   [(set (match_operand:DF 0 \"reg_or_nonsymb_mem_operand\" \"=T,U,f,r,Q,Q,f,&r,?f,?r\")\n \t(match_operand:DF 1 \"reg_or_nonsymb_mem_operand\" \"U,T,f,r,f,r,Q,Q,r,f\"))]\n-  \"register_operand (operands[0], DFmode)\n-   || register_operand (operands[1], DFmode)\"\n+  \"TARGET_FPU\n+   && (register_operand (operands[0], DFmode)\n+       || register_operand (operands[1], DFmode))\"\n   \"*\n {\n   if (FP_REG_P (operands[0]) || FP_REG_P (operands[1]))\n@@ -1183,6 +1205,25 @@\n   [(set_attr \"type\" \"fpstore,fpload,fp,move,fpstore,store,fpload,load,multi,multi\")\n    (set_attr \"length\" \"1,1,2,2,3,3,3,3,3,3\")])\n \n+;; Exactly the same as above, except that all `f' cases are deleted.\n+;; This is necessary to prevent reload from ever trying to use a `f' reg\n+;; when -mno-fpu.\n+\n+(define_insn \"\"\n+  [(set (match_operand:DF 0 \"reg_or_nonsymb_mem_operand\" \"=T,U,r,Q,&r\")\n+\t(match_operand:DF 1 \"reg_or_nonsymb_mem_operand\" \"U,T,r,r,Q\"))]\n+  \"! TARGET_FPU\n+   && (register_operand (operands[0], DFmode)\n+       || register_operand (operands[1], DFmode))\"\n+  \"*\n+{\n+  if (FP_REG_P (operands[0]) || FP_REG_P (operands[1]))\n+    return output_fp_move_double (operands);\n+  return output_move_double (operands);\n+}\"\n+  [(set_attr \"type\" \"fpstore,fpload,move,store,load\")\n+   (set_attr \"length\" \"1,1,2,3,3\")])\n+\n (define_insn \"\"\n   [(set (mem:DF (match_operand:SI 0 \"symbolic_operand\" \"i,i\"))\n \t(match_operand:DF 1 \"reg_or_0_operand\" \"rf,G\"))\n@@ -1234,7 +1275,7 @@\n (define_insn \"\"\n   [(set (match_operand:SF 0 \"general_operand\" \"=?r,f,m\")\n \t(match_operand:SF 1 \"\" \"?E,m,G\"))]\n-  \"GET_CODE (operands[1]) == CONST_DOUBLE\"\n+  \"TARGET_FPU && GET_CODE (operands[1]) == CONST_DOUBLE\"\n   \"*\n {\n   switch (which_alternative)\n@@ -1263,18 +1304,35 @@\n (define_insn \"\"\n   [(set (match_operand:SF 0 \"reg_or_nonsymb_mem_operand\" \"=f,r,rf,f,r,Q,Q\")\n \t(match_operand:SF 1 \"reg_or_nonsymb_mem_operand\" \"f,r,!rf,Q,Q,f,r\"))]\n-  \"register_operand (operands[0], SFmode)\n-   || register_operand (operands[1], SFmode)\"\n+  \"TARGET_FPU\n+   && (register_operand (operands[0], SFmode)\n+       || register_operand (operands[1], SFmode))\"\n   \"@\n    fmovs %1,%0\n    mov %1,%0\n-   st %r1,[%%fp-4]\\;ld [%%fp-4],%0\n+   st %r1,[%@-4]\\;ld [%@-4],%0\n    ld %1,%0\n    ld %1,%0\n    st %r1,%0\n    st %r1,%0\"\n   [(set_attr \"type\" \"fp,move,multi,fpload,load,fpstore,store\")])\n \n+;; Exactly the same as above, except that all `f' cases are deleted.\n+;; This is necessary to prevent reload from ever trying to use a `f' reg\n+;; when -mno-fpu.\n+\n+(define_insn \"\"\n+  [(set (match_operand:SF 0 \"reg_or_nonsymb_mem_operand\" \"=r,r,Q\")\n+\t(match_operand:SF 1 \"reg_or_nonsymb_mem_operand\" \"r,Q,r\"))]\n+  \"! TARGET_FPU\n+   && (register_operand (operands[0], SFmode)\n+       || register_operand (operands[1], SFmode))\"\n+  \"@\n+   mov %1,%0\n+   ld %1,%0\n+   st %r1,%0\"\n+  [(set_attr \"type\" \"move,load,store\")])\n+\n (define_insn \"\"\n   [(set (mem:SF (match_operand:SI 0 \"symbolic_operand\" \"i\"))\n \t(match_operand:SF 1 \"reg_or_0_operand\" \"rfG\"))\n@@ -1477,47 +1535,47 @@\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n \t(float_extend:DF\n \t (match_operand:SF 1 \"register_operand\" \"f\")))]\n-  \"\"\n+  \"TARGET_FPU\"\n   \"fstod %1,%0\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"extendsftf2\"\n   [(set (match_operand:TF 0 \"register_operand\" \"=f\")\n \t(float_extend:TF\n \t (match_operand:SF 1 \"register_operand\" \"f\")))]\n-  \"\"\n+  \"TARGET_FPU\"\n   \"fstoq %1,%0\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"extenddftf2\"\n   [(set (match_operand:TF 0 \"register_operand\" \"=f\")\n \t(float_extend:TF\n \t (match_operand:DF 1 \"register_operand\" \"f\")))]\n-  \"\"\n+  \"TARGET_FPU\"\n   \"fdtoq %1,%0\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"truncdfsf2\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n \t(float_truncate:SF\n \t (match_operand:DF 1 \"register_operand\" \"f\")))]\n-  \"\"\n+  \"TARGET_FPU\"\n   \"fdtos %1,%0\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"trunctfsf2\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n \t(float_truncate:SF\n \t (match_operand:TF 1 \"register_operand\" \"f\")))]\n-  \"\"\n+  \"TARGET_FPU\"\n   \"fqtos %1,%0\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"trunctfdf2\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n \t(float_truncate:DF\n \t (match_operand:TF 1 \"register_operand\" \"f\")))]\n-  \"\"\n+  \"TARGET_FPU\"\n   \"fqtod %1,%0\"\n   [(set_attr \"type\" \"fp\")])\n \f\n@@ -1526,21 +1584,21 @@\n (define_insn \"floatsisf2\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n \t(float:SF (match_operand:SI 1 \"register_operand\" \"f\")))]\n-  \"\"\n+  \"TARGET_FPU\"\n   \"fitos %1,%0\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"floatsidf2\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n \t(float:DF (match_operand:SI 1 \"register_operand\" \"f\")))]\n-  \"\"\n+  \"TARGET_FPU\"\n   \"fitod %1,%0\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"floatsitf2\"\n   [(set (match_operand:TF 0 \"register_operand\" \"=f\")\n \t(float:TF (match_operand:SI 1 \"register_operand\" \"f\")))]\n-  \"\"\n+  \"TARGET_FPU\"\n   \"fitox %1,%0\"\n   [(set_attr \"type\" \"fp\")])\n \n@@ -1550,21 +1608,21 @@\n (define_insn \"fix_truncsfsi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=f\")\n \t(fix:SI (fix:SF (match_operand:SF 1 \"register_operand\" \"f\"))))]\n-  \"\"\n+  \"TARGET_FPU\"\n   \"fstoi %1,%0\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"fix_truncdfsi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=f\")\n \t(fix:SI (fix:DF (match_operand:DF 1 \"register_operand\" \"f\"))))]\n-  \"\"\n+  \"TARGET_FPU\"\n   \"fdtoi %1,%0\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"fix_trunctfsi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=f\")\n \t(fix:SI (fix:TF (match_operand:TF 1 \"register_operand\" \"f\"))))]\n-  \"\"\n+  \"TARGET_FPU\"\n   \"fqtoi %1,%0\"\n   [(set_attr \"type\" \"fp\")])\n \f\n@@ -1705,20 +1763,68 @@\n   \"TARGET_V8 || TARGET_SPARCLITE\"\n   \"smulcc %1,%2,%0\")\n \n-(define_insn \"mulsidi3\"\n+(define_expand \"mulsidi3\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+\t(mult:DI (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"\"))\n+\t\t (sign_extend:DI (match_operand:SI 2 \"arith_operand\" \"\"))))]\n+  \"TARGET_V8 || TARGET_SPARCLITE\"\n+  \"\n+{\n+  if (CONSTANT_P (operands[2]))\n+    {\n+      emit_insn (gen_const_mulsidi3 (operands[0], operands[1], operands[2]));\n+      DONE;\n+    }\n+}\")\n+\n+(define_insn \"\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(mult:DI (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"r\"))\n+\t\t (sign_extend:DI (match_operand:SI 2 \"register_operand\" \"r\"))))]\n+  \"TARGET_V8 || TARGET_SPARCLITE\"\n+  \"smul %1,%2,%R0\\;rd %%y,%0\"\n+  [(set_attr \"length\" \"2\")])\n+\n+;; Extra pattern, because sign_extend of a constant isn't legal.\n+\n+(define_insn \"const_mulsidi3\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(mult:DI (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"r\"))\n+\t\t (match_operand:SI 2 \"small_int\" \"I\")))]\n+  \"TARGET_V8 || TARGET_SPARCLITE\"\n+  \"smul %1,%2,%R0\\;rd %%y,%0\"\n+  [(set_attr \"length\" \"2\")])\n+\n+(define_expand \"umulsidi3\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+\t(mult:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"\"))\n+\t\t (zero_extend:DI (match_operand:SI 2 \"arith_operand\" \"\"))))]\n+  \"TARGET_V8 || TARGET_SPARCLITE\"\n+  \"\n+{\n+  if (CONSTANT_P (operands[2]))\n+    {\n+      emit_insn (gen_const_umulsidi3 (operands[0], operands[1], operands[2]));\n+      DONE;\n+    }\n+}\")\n+\n+(define_insn \"\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(mult:DI (sign_extend:DI (match_operand:SI 1 \"arith_operand\" \"%r\"))\n-\t\t (sign_extend:DI (match_operand:SI 2 \"arith_operand\" \"rI\"))))]\n+\t(mult:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"r\"))\n+\t\t (zero_extend:DI (match_operand:SI 2 \"register_operand\" \"r\"))))]\n   \"TARGET_V8 || TARGET_SPARCLITE\"\n-  \"smul %1,%2,%R0\\;rd %y,%0\"\n+  \"umul %1,%2,%R0\\;rd %%y,%0\"\n   [(set_attr \"length\" \"2\")])\n \n-(define_insn \"umulsidi3\"\n+;; Extra pattern, because sign_extend of a constant isn't legal.\n+\n+(define_insn \"const_umulsidi3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(mult:DI (zero_extend:DI (match_operand:SI 1 \"arith_operand\" \"%r\"))\n-\t\t (zero_extend:DI (match_operand:SI 2 \"arith_operand\" \"rI\"))))]\n+\t(mult:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"r\"))\n+\t\t (match_operand:SI 2 \"small_int\" \"I\")))]\n   \"TARGET_V8 || TARGET_SPARCLITE\"\n-  \"umul %1,%2,%R0\\;rd %y,%0\"\n+  \"umul %1,%2,%R0\\;rd %%y,%0\"\n   [(set_attr \"length\" \"2\")])\n \n ;; The architecture specifies that there must be 3 instructions between\n@@ -2189,102 +2295,102 @@\n   [(set (match_operand:TF 0 \"register_operand\" \"=f\")\n \t(plus:TF (match_operand:TF 1 \"register_operand\" \"f\")\n \t\t (match_operand:TF 2 \"register_operand\" \"f\")))]\n-  \"\"\n+  \"TARGET_FPU\"\n   \"faddq %1,%2,%0\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"adddf3\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n \t(plus:DF (match_operand:DF 1 \"register_operand\" \"f\")\n \t\t (match_operand:DF 2 \"register_operand\" \"f\")))]\n-  \"\"\n+  \"TARGET_FPU\"\n   \"faddd %1,%2,%0\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"addsf3\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n \t(plus:SF (match_operand:SF 1 \"register_operand\" \"f\")\n \t\t (match_operand:SF 2 \"register_operand\" \"f\")))]\n-  \"\"\n+  \"TARGET_FPU\"\n   \"fadds %1,%2,%0\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"subtf3\"\n   [(set (match_operand:TF 0 \"register_operand\" \"=f\")\n \t(minus:TF (match_operand:TF 1 \"register_operand\" \"f\")\n \t\t  (match_operand:TF 2 \"register_operand\" \"f\")))]\n-  \"\"\n+  \"TARGET_FPU\"\n   \"fsubq %1,%2,%0\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"subdf3\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n \t(minus:DF (match_operand:DF 1 \"register_operand\" \"f\")\n \t\t  (match_operand:DF 2 \"register_operand\" \"f\")))]\n-  \"\"\n+  \"TARGET_FPU\"\n   \"fsubd %1,%2,%0\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"subsf3\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n \t(minus:SF (match_operand:SF 1 \"register_operand\" \"f\")\n \t\t  (match_operand:SF 2 \"register_operand\" \"f\")))]\n-  \"\"\n+  \"TARGET_FPU\"\n   \"fsubs %1,%2,%0\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"multf3\"\n   [(set (match_operand:TF 0 \"register_operand\" \"=f\")\n \t(mult:TF (match_operand:TF 1 \"register_operand\" \"f\")\n \t\t (match_operand:TF 2 \"register_operand\" \"f\")))]\n-  \"\"\n+  \"TARGET_FPU\"\n   \"fmulq %1,%2,%0\"\n   [(set_attr \"type\" \"fpmul\")])\n \n (define_insn \"muldf3\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n \t(mult:DF (match_operand:DF 1 \"register_operand\" \"f\")\n \t\t (match_operand:DF 2 \"register_operand\" \"f\")))]\n-  \"\"\n+  \"TARGET_FPU\"\n   \"fmuld %1,%2,%0\"\n   [(set_attr \"type\" \"fpmul\")])\n \n (define_insn \"mulsf3\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n \t(mult:SF (match_operand:SF 1 \"register_operand\" \"f\")\n \t\t (match_operand:SF 2 \"register_operand\" \"f\")))]\n-  \"\"\n+  \"TARGET_FPU\"\n   \"fmuls %1,%2,%0\"\n   [(set_attr \"type\" \"fpmul\")])\n \n (define_insn \"divtf3\"\n   [(set (match_operand:TF 0 \"register_operand\" \"=f\")\n \t(div:TF (match_operand:TF 1 \"register_operand\" \"f\")\n \t\t(match_operand:TF 2 \"register_operand\" \"f\")))]\n-  \"\"\n+  \"TARGET_FPU\"\n   \"fdivq %1,%2,%0\"\n   [(set_attr \"type\" \"fpdiv\")])\n \n (define_insn \"divdf3\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n \t(div:DF (match_operand:DF 1 \"register_operand\" \"f\")\n \t\t(match_operand:DF 2 \"register_operand\" \"f\")))]\n-  \"\"\n+  \"TARGET_FPU\"\n   \"fdivd %1,%2,%0\"\n   [(set_attr \"type\" \"fpdiv\")])\n \n (define_insn \"divsf3\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n \t(div:SF (match_operand:SF 1 \"register_operand\" \"f\")\n \t\t(match_operand:SF 2 \"register_operand\" \"f\")))]\n-  \"\"\n+  \"TARGET_FPU\"\n   \"fdivs %1,%2,%0\"\n   [(set_attr \"type\" \"fpdiv\")])\n \n (define_insn \"negtf2\"\n   [(set (match_operand:TF 0 \"register_operand\" \"=f,f\")\n \t(neg:TF (match_operand:TF 1 \"register_operand\" \"0,f\")))]\n-  \"\"\n+  \"TARGET_FPU\"\n   \"@\n    fnegs %0,%0\n    fnegs %1,%0\\;fmovs %R1,%R0\\;fmovs %S1,%S0\\;fmovs %T1,%T0\"\n@@ -2294,7 +2400,7 @@\n (define_insn \"negdf2\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f,f\")\n \t(neg:DF (match_operand:DF 1 \"register_operand\" \"0,f\")))]\n-  \"\"\n+  \"TARGET_FPU\"\n   \"@\n    fnegs %0,%0\n    fnegs %1,%0\\;fmovs %R1,%R0\"\n@@ -2304,14 +2410,14 @@\n (define_insn \"negsf2\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n \t(neg:SF (match_operand:SF 1 \"register_operand\" \"f\")))]\n-  \"\"\n+  \"TARGET_FPU\"\n   \"fnegs %1,%0\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"abstf2\"\n   [(set (match_operand:TF 0 \"register_operand\" \"=f,f\")\n \t(abs:TF (match_operand:TF 1 \"register_operand\" \"0,f\")))]\n-  \"\"\n+  \"TARGET_FPU\"\n   \"@\n    fabss %0,%0\n    fabss %1,%0\\;fmovs %R1,%R0\\;fmovs %S1,%S0\\;fmovs %T1,%T0\"\n@@ -2321,7 +2427,7 @@\n (define_insn \"absdf2\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f,f\")\n \t(abs:DF (match_operand:DF 1 \"register_operand\" \"0,f\")))]\n-  \"\"\n+  \"TARGET_FPU\"\n   \"@\n    fabss %0,%0\n    fabss %1,%0\\;fmovs %R1,%R0\"\n@@ -2331,28 +2437,28 @@\n (define_insn \"abssf2\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n \t(abs:SF (match_operand:SF 1 \"register_operand\" \"f\")))]\n-  \"\"\n+  \"TARGET_FPU\"\n   \"fabss %1,%0\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"sqrttf2\"\n   [(set (match_operand:TF 0 \"register_operand\" \"=f\")\n \t(sqrt:TF (match_operand:TF 1 \"register_operand\" \"f\")))]\n-  \"\"\n+  \"TARGET_FPU\"\n   \"fsqrtq %1,%0\"\n   [(set_attr \"type\" \"fpsqrt\")])\n \n (define_insn \"sqrtdf2\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n \t(sqrt:DF (match_operand:DF 1 \"register_operand\" \"f\")))]\n-  \"\"\n+  \"TARGET_FPU\"\n   \"fsqrtd %1,%0\"\n   [(set_attr \"type\" \"fpsqrt\")])\n \n (define_insn \"sqrtsf2\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n \t(sqrt:SF (match_operand:SF 1 \"register_operand\" \"f\")))]\n-  \"\"\n+  \"TARGET_FPU\"\n   \"fsqrts %1,%0\"\n   [(set_attr \"type\" \"fpsqrt\")])\n \f\n@@ -3095,6 +3201,23 @@\n }\"\n   [(set_attr \"type\" \"multi\")])\n \n+;; The following pattern is only generated by delayed-branch scheduling,\n+;; when the insn winds up in the epilogue.  This can only happen when\n+;; ! TARGET_FPU because otherwise fp return values are in %f0.\n+(define_insn \"\"\n+  [(set (match_operand:SF 0 \"restore_operand\" \"r\")\n+\t(match_operand:SF 1 \"register_operand\" \"r\"))\n+   (return)]\n+  \"! TARGET_FPU && ! TARGET_EPILOGUE\"\n+  \"*\n+{\n+  if (current_function_returns_struct)\n+    return \\\"jmp %%i7+12\\;restore %%g0,%1,%Y0\\\";\n+  else\n+    return \\\"ret\\;restore %%g0,%1,%Y0\\\";\n+}\"\n+  [(set_attr \"type\" \"multi\")])\n+\n (define_insn \"\"\n   [(set (match_operand:SI 0 \"restore_operand\" \"\")\n \t(plus:SI (match_operand:SI 1 \"arith_operand\" \"%r\")"}]}