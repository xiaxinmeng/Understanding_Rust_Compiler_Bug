{"sha": "1692089663b0feffa054f594afe91dc2d5b8416a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTY5MjA4OTY2M2IwZmVmZmEwNTRmNTk0YWZlOTFkYzJkNWI4NDE2YQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-03-16T01:32:53Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-03-16T01:32:53Z"}, "message": "forward_list.tcc (_Fwd_list_node_base:: _M_transfer_after): Return _Fwd_list_node_base*.\n\n2010-03-15  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/forward_list.tcc (_Fwd_list_node_base::\n\t_M_transfer_after): Return _Fwd_list_node_base*.\n\t(forward_list<>::_M_splice_after): Add.\n\t(forward_list<>::insert_after(const_iterator, size_type, const _Tp&),\n\tinsert_after(const_iterator, _InputIterator, _InputIterator),\n\tinsert_after(const_iterator, initializer_list<>)): Use the above,\n\timplement DR 1278 ([Ready] in Pittsburgh).\n\t* include/bits/forward_list.h (insert_after(const_iterator,\n\tsize_type, const _Tp&), insert_after(const_iterator, _InputIterator,\n\t_InputIterator), insert_after(const_iterator, initializer_list<>)):\n\tOnly declare.\n\t* testsuite/23_containers/forward_list/modifiers/2.cc: Adjust.\n\t* testsuite/23_containers/forward_list/requirements/dr438/\n\tassign_neg.cc: Adjust dg-error line number.\n\t* testsuite/23_containers/forward_list/requirements/dr438/\n\tinsert_neg.cc: Likewise.\n\t* testsuite/23_containers/forward_list/requirements/dr438/\n\tconstructor_1_neg.cc: Likewise.\n\t* testsuite/23_containers/forward_list/requirements/dr438/\n\tconstructor_2_neg.cc: Likewise.\n\nFrom-SVN: r157471", "tree": {"sha": "ee2c7ad82ea64831a119dc46ef71194c61adf96b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee2c7ad82ea64831a119dc46ef71194c61adf96b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1692089663b0feffa054f594afe91dc2d5b8416a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1692089663b0feffa054f594afe91dc2d5b8416a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1692089663b0feffa054f594afe91dc2d5b8416a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1692089663b0feffa054f594afe91dc2d5b8416a/comments", "author": null, "committer": null, "parents": [{"sha": "92ff10839d2e16a47dba083f1d030af662b4d1bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92ff10839d2e16a47dba083f1d030af662b4d1bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92ff10839d2e16a47dba083f1d030af662b4d1bc"}], "stats": {"total": 223, "additions": 147, "deletions": 76}, "files": [{"sha": "24543b02edb62bff5ea2ef831e35e9c29e684e2f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1692089663b0feffa054f594afe91dc2d5b8416a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1692089663b0feffa054f594afe91dc2d5b8416a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=1692089663b0feffa054f594afe91dc2d5b8416a", "patch": "@@ -1,3 +1,26 @@\n+2010-03-15  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/forward_list.tcc (_Fwd_list_node_base::\n+\t_M_transfer_after): Return _Fwd_list_node_base*.\n+\t(forward_list<>::_M_splice_after): Add.\n+\t(forward_list<>::insert_after(const_iterator, size_type, const _Tp&),\n+\tinsert_after(const_iterator, _InputIterator, _InputIterator),\n+\tinsert_after(const_iterator, initializer_list<>)): Use the above,\n+\timplement DR 1278 ([Ready] in Pittsburgh).\n+\t* include/bits/forward_list.h (insert_after(const_iterator,\n+\tsize_type, const _Tp&), insert_after(const_iterator, _InputIterator,\n+\t_InputIterator), insert_after(const_iterator, initializer_list<>)):\n+\tOnly declare.\n+\t* testsuite/23_containers/forward_list/modifiers/2.cc: Adjust.\n+\t* testsuite/23_containers/forward_list/requirements/dr438/\n+\tassign_neg.cc: Adjust dg-error line number.\n+\t* testsuite/23_containers/forward_list/requirements/dr438/\n+\tinsert_neg.cc: Likewise.\n+\t* testsuite/23_containers/forward_list/requirements/dr438/\n+\tconstructor_1_neg.cc: Likewise.\n+\t* testsuite/23_containers/forward_list/requirements/dr438/\n+\tconstructor_2_neg.cc: Likewise.\n+\n 2010-03-15  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* testsuite/23_containers/forward_list/requirements/dr438/"}, {"sha": "57b7836a3243e916f1ffa63a35ba75c62aafde3f", "filename": "libstdc++-v3/include/bits/forward_list.h", "status": "modified", "additions": 33, "deletions": 36, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1692089663b0feffa054f594afe91dc2d5b8416a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1692089663b0feffa054f594afe91dc2d5b8416a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h?ref=1692089663b0feffa054f594afe91dc2d5b8416a", "patch": "@@ -51,28 +51,29 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     swap(_Fwd_list_node_base& __x, _Fwd_list_node_base& __y)\n     { std::swap(__x._M_next, __y._M_next); }\n \n-    void\n-    _M_transfer_after(_Fwd_list_node_base* __bbegin)\n+    _Fwd_list_node_base*\n+    _M_transfer_after(_Fwd_list_node_base* __begin)\n     {\n-      _Fwd_list_node_base* __bend = __bbegin;\n-      while (__bend && __bend->_M_next)\n-\t__bend = __bend->_M_next;\n-      _M_transfer_after(__bbegin, __bend);\n+      _Fwd_list_node_base* __end = __begin;\n+      while (__end && __end->_M_next)\n+\t__end = __end->_M_next;\n+      return _M_transfer_after(__begin, __end);\n     }\n \n-    void\n-    _M_transfer_after(_Fwd_list_node_base* __bbegin,\n-\t\t      _Fwd_list_node_base* __bend)\n+    _Fwd_list_node_base*\n+    _M_transfer_after(_Fwd_list_node_base* __begin,\n+\t\t      _Fwd_list_node_base* __end)\n     {\n-      _Fwd_list_node_base* __keep = __bbegin->_M_next;\n-      if (__bend)\n+      _Fwd_list_node_base* __keep = __begin->_M_next;\n+      if (__end)\n \t{\n-\t  __bbegin->_M_next = __bend->_M_next;\n-\t  __bend->_M_next = _M_next;\n+\t  __begin->_M_next = __end->_M_next;\n+\t  __end->_M_next = _M_next;\n \t}\n       else\n-\t__bbegin->_M_next = 0;\n+\t__begin->_M_next = 0;\n       _M_next = __keep;\n+      return __end;\n     }\n \n     void\n@@ -865,7 +866,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  @param  pos  An iterator into the %forward_list.\n        *  @param  n  Number of elements to be inserted.\n        *  @param  val  Data to be inserted.\n-       *  @return  pos.\n+       *  @return  An iterator pointing to the last inserted copy of\n+       *           @a val or @a pos if @a n == 0.\n        *\n        *  This function will insert a specified number of copies of the\n        *  given data after the location specified by @a pos.\n@@ -874,19 +876,15 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  does not invalidate iterators and references.\n        */\n       iterator\n-      insert_after(const_iterator __pos, size_type __n, const _Tp& __val)\n-      {\n-        forward_list __tmp(__n, __val, this->_M_get_Node_allocator());\n-        splice_after(__pos, std::move(__tmp));\n-\treturn iterator(const_cast<_Node_base*>(__pos._M_node));\n-      }\n+      insert_after(const_iterator __pos, size_type __n, const _Tp& __val);\n \n       /**\n        *  @brief  Inserts a range into the %forward_list.\n        *  @param  position  An iterator into the %forward_list.\n        *  @param  first  An input iterator.\n        *  @param  last   An input iterator.\n-       *  @return  pos.\n+       *  @return  An iterator pointing to the last inserted element or\n+       *           @a pos if @a first == @a last.\n        *\n        *  This function will insert copies of the data in the range [@a\n        *  first,@a last) into the %forward_list after the location specified\n@@ -898,19 +896,15 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       template<typename _InputIterator>\n         iterator\n         insert_after(const_iterator __pos,\n-                     _InputIterator __first, _InputIterator __last)\n-        {\n-          forward_list __tmp(__first, __last, this->_M_get_Node_allocator());\n-          splice_after(__pos, std::move(__tmp));\n-\t  return iterator(const_cast<_Node_base*>(__pos._M_node));\n-        }\n+                     _InputIterator __first, _InputIterator __last);\n \n       /**\n        *  @brief  Inserts the contents of an initializer_list into\n        *          %forward_list after the specified iterator.\n        *  @param  pos  An iterator into the %forward_list.\n        *  @param  il  An initializer_list of value_type.\n-       *  @return  pos.\n+       *  @return  An iterator pointing to the last inserted element\n+       *           or @a pos if @a il is empty.\n        *\n        *  This function will insert copies of the data in the\n        *  initializer_list @a il into the %forward_list before the location\n@@ -920,12 +914,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  does not invalidate iterators and references.\n        */\n       iterator\n-      insert_after(const_iterator __pos, std::initializer_list<_Tp> __il)\n-      {\n-        forward_list __tmp(__il, this->_M_get_Node_allocator());\n-        splice_after(__pos, std::move(__tmp));\n-\treturn iterator(const_cast<_Node_base*>(__pos._M_node));\n-      }\n+      insert_after(const_iterator __pos, std::initializer_list<_Tp> __il);\n \n       /**\n        *  @brief  Removes the element pointed to by the iterator following\n@@ -1037,7 +1026,11 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  Requires this != @a x.\n        */\n       void\n-      splice_after(const_iterator __pos, forward_list&& __list);\n+      splice_after(const_iterator __pos, forward_list&& __list)\n+      {\n+\tif (!__list.empty())\n+\t  _M_splice_after(__pos, std::move(__list));\n+      }\n \n       /**\n        *  @brief  Insert element from another %forward_list.\n@@ -1210,6 +1203,10 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       // turns out to be the same thing.\n       void\n       _M_fill_initialize(size_type __n, const value_type& __value);\n+\n+      // Called by splice_after and insert_after.\n+      iterator\n+      _M_splice_after(const_iterator __pos, forward_list&& __list);\n     };\n \n   /**"}, {"sha": "7468a90d1afb806bad2d3fb4b9f19a03e42e2f42", "filename": "libstdc++-v3/include/bits/forward_list.tcc", "status": "modified", "additions": 48, "deletions": 9, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1692089663b0feffa054f594afe91dc2d5b8416a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1692089663b0feffa054f594afe91dc2d5b8416a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.tcc?ref=1692089663b0feffa054f594afe91dc2d5b8416a", "patch": "@@ -203,29 +203,68 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     }\n \n   template<typename _Tp, typename _Alloc>\n-    void\n+    typename forward_list<_Tp, _Alloc>::iterator\n     forward_list<_Tp, _Alloc>::\n-    splice_after(const_iterator __pos, forward_list&& __list)\n+    _M_splice_after(const_iterator __pos, forward_list&& __list)\n     {\n-      if (!__list.empty() && &__list != this)\n-        {\n-          _Node_base* __tmp = const_cast<_Node_base*>(__pos._M_node);\n-          const_iterator __before = __list.cbefore_begin();\n-          __tmp->_M_transfer_after(const_cast<_Node_base*>(__before._M_node));\n-        }\n+      _Node_base* __tmp = const_cast<_Node_base*>(__pos._M_node);\n+      iterator __before = __list.before_begin();\n+      return iterator(__tmp->_M_transfer_after(__before._M_node));\n     }\n \n   template<typename _Tp, typename _Alloc>\n     void\n     forward_list<_Tp, _Alloc>::\n-    splice_after(const_iterator __pos, forward_list&& __list,\n+    splice_after(const_iterator __pos, forward_list&&,\n                  const_iterator __before, const_iterator __last)\n     {\n       _Node_base* __tmp = const_cast<_Node_base*>(__pos._M_node);\n       __tmp->_M_transfer_after(const_cast<_Node_base*>(__before._M_node),\n                                const_cast<_Node_base*>(__last._M_node));\n     }\n \n+  template<typename _Tp, typename _Alloc>\n+    typename forward_list<_Tp, _Alloc>::iterator\n+    forward_list<_Tp, _Alloc>::\n+    insert_after(const_iterator __pos, size_type __n, const _Tp& __val)\n+    {\n+      if (__n)\n+\t{\n+\t  forward_list __tmp(__n, __val, this->_M_get_Node_allocator());\n+\t  return _M_splice_after(__pos, std::move(__tmp));\n+\t}\n+      else\n+\treturn iterator(const_cast<_Node_base*>(__pos._M_node));\n+    }\n+\n+  template<typename _Tp, typename _Alloc>\n+    template<typename _InputIterator>\n+      typename forward_list<_Tp, _Alloc>::iterator\n+      forward_list<_Tp, _Alloc>::\n+      insert_after(const_iterator __pos,\n+\t\t   _InputIterator __first, _InputIterator __last)\n+      {\n+\tforward_list __tmp(__first, __last, this->_M_get_Node_allocator());\n+\tif (!__tmp.empty())\n+\t  return _M_splice_after(__pos, std::move(__tmp));\n+\telse\n+\t  return iterator(const_cast<_Node_base*>(__pos._M_node));\n+      }\n+\n+  template<typename _Tp, typename _Alloc>\n+    typename forward_list<_Tp, _Alloc>::iterator\n+    forward_list<_Tp, _Alloc>::\n+    insert_after(const_iterator __pos, std::initializer_list<_Tp> __il)\n+    {\n+      if (__il.size())\n+\t{\n+\t  forward_list __tmp(__il, this->_M_get_Node_allocator());\n+\t  return _M_splice_after(__pos, std::move(__tmp));\n+\t}\n+      else\n+\treturn iterator(const_cast<_Node_base*>(__pos._M_node));\n+    }\n+\n   template<typename _Tp, typename _Alloc>\n     void\n     forward_list<_Tp, _Alloc>::"}, {"sha": "b6ae3f3795c40f468b4e8575dc29772c1ea833b2", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/modifiers/2.cc", "status": "modified", "additions": 39, "deletions": 27, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1692089663b0feffa054f594afe91dc2d5b8416a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fmodifiers%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1692089663b0feffa054f594afe91dc2d5b8416a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fmodifiers%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fmodifiers%2F2.cc?ref=1692089663b0feffa054f594afe91dc2d5b8416a", "patch": "@@ -36,8 +36,8 @@ test01()\n \n   std::forward_list<int>::iterator ret = fl.insert_after(fl.before_begin(),\n \t\t\t\t\t\t\t 42);\n-  VERIFY(ret == fl.begin());\n-  VERIFY(fl.front() == 42);\n+  VERIFY( ret == fl.begin() );\n+  VERIFY( fl.front() == 42 );\n }\n \n // This test verifies the following:\n@@ -48,21 +48,24 @@ test02()\n \n   std::forward_list<int>::const_iterator pos = fl.cbegin();\n   ++pos;\n-  VERIFY(*pos == 1);\n+  VERIFY( *pos == 1 );\n \n-  // Note: Calling l.insert_after(pos, 5, 42); without the long five\n-  // gets resolved to the iterator range version and fails to compile!\n-  std::forward_list<int>::iterator ret = fl.insert_after(pos, 5, 42);\n-  VERIFY(ret == pos);\n-  VERIFY(*pos == 1);\n+  std::forward_list<int>::iterator ret = fl.insert_after(pos, 0, 42);\n+  VERIFY( ret == pos );\n \n+  ret = fl.insert_after(pos, 5, 42);\n+  VERIFY( *pos == 1 );\n+\n+  ++pos;\n+  VERIFY( *pos == 42 );\n   ++pos;\n-  VERIFY(*pos == 42);\n   ++pos;\n   ++pos;\n   ++pos;\n+  VERIFY( *pos == 42 );\n+  VERIFY( ret == pos );\n   ++pos;\n-  VERIFY(*pos == 42);\n+  VERIFY( *pos == 2 );\n }\n \n // This test verifies the following:\n@@ -73,19 +76,22 @@ test03()\n \n   std::forward_list<int>::const_iterator pos = fl.cbegin();\n   ++pos;\n-  VERIFY(*pos == 1);\n+  VERIFY( *pos == 1 );\n \n   int i[3] = {666, 777, 888};\n-  std::forward_list<int>::iterator ret = fl.insert_after(pos, i, i + 3);\n-  VERIFY(ret == pos);\n-  VERIFY(*pos == 1);\n+  std::forward_list<int>::iterator ret = fl.insert_after(pos, i, i);\n+  VERIFY( ret == pos );\n+\n+  ret = fl.insert_after(pos, i, i + 3);\n+  VERIFY( *pos == 1 );\n \n   ++pos;\n   ++pos;\n   ++pos;\n-  VERIFY(*pos == 888);\n+  VERIFY( *pos == 888 );\n+  VERIFY( ret == pos );\n   ++pos;\n-  VERIFY(*pos == 2);\n+  VERIFY( *pos == 2 );\n }\n \n // This test verifies the following:\n@@ -96,17 +102,23 @@ test04()\n \n   std::forward_list<int>::const_iterator pos = fl.cbegin();\n   ++pos;\n-  VERIFY(*pos == 1);\n+  VERIFY( *pos == 1 );\n+\n+  std::forward_list<int>::iterator ret = fl.insert_after(pos, { });\n+  VERIFY( ret == pos);\n \n-  std::forward_list<int>::iterator ret\n-    = fl.insert_after(pos, {-1, -2, -3, -4, -5});\n-  VERIFY(ret == pos);\n-  VERIFY(*pos == 1);\n+  ret = fl.insert_after(pos, {-1, -2, -3, -4, -5});\n+  VERIFY( *pos == 1);\n \n   ++pos;\n   ++pos;\n   ++pos;\n-  VERIFY(*pos == -3);\n+  VERIFY( *pos == -3 );\n+  ++pos;\n+  ++pos;\n+  VERIFY( ret == pos );\n+  ++pos;\n+  VERIFY( *pos == 2 );\n }\n \n // This test verifies the following:\n@@ -117,17 +129,17 @@ test05()\n \n   std::forward_list<std::string>::const_iterator pos = fl.cbegin();\n   ++pos;\n-  VERIFY(*pos == \"BBB\");\n+  VERIFY( *pos == \"BBB\" );\n \n   std::string x( \"XXX\" );\n   std::forward_list<std::string>::iterator ret\n     = fl.insert_after(pos, std::move(x));\n-  VERIFY(*pos == \"BBB\");\n+  VERIFY( *pos == \"BBB\" );\n   ++pos;\n-  VERIFY(ret == pos);\n-  VERIFY(*pos == \"XXX\");\n+  VERIFY( ret == pos );\n+  VERIFY( *pos == \"XXX\" );\n   ++pos;\n-  VERIFY(*pos == \"CCC\");\n+  VERIFY( *pos == \"CCC\" );\n }\n \n int"}, {"sha": "8d72db59c8b821774b503ff25034bab0b2450294", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/requirements/dr438/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1692089663b0feffa054f594afe91dc2d5b8416a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1692089663b0feffa054f594afe91dc2d5b8416a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fassign_neg.cc?ref=1692089663b0feffa054f594afe91dc2d5b8416a", "patch": "@@ -1,6 +1,6 @@\n // { dg-do compile }\n // { dg-options \"-std=gnu++0x\" }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1201 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1194 }\n // { dg-excess-errors \"\" }\n \n // Copyright (C) 2009, 2010 Free Software Foundation"}, {"sha": "5f5ac2c7713acbcacbf0baadca75a02046d80197", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/requirements/dr438/constructor_1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1692089663b0feffa054f594afe91dc2d5b8416a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1692089663b0feffa054f594afe91dc2d5b8416a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc?ref=1692089663b0feffa054f594afe91dc2d5b8416a", "patch": "@@ -1,6 +1,6 @@\n // { dg-do compile }\n // { dg-options \"-std=gnu++0x\" }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1201 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1194 }\n // { dg-excess-errors \"\" }\n \n // Copyright (C) 2009, 2010 Free Software Foundation"}, {"sha": "340a6be65e3d620fb2644badec436e45f7d5b1f9", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/requirements/dr438/constructor_2_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1692089663b0feffa054f594afe91dc2d5b8416a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1692089663b0feffa054f594afe91dc2d5b8416a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc?ref=1692089663b0feffa054f594afe91dc2d5b8416a", "patch": "@@ -1,6 +1,6 @@\n // { dg-do compile }\n // { dg-options \"-std=gnu++0x\" }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1201 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1194 }\n // { dg-excess-errors \"\" }\n \n // Copyright (C) 2009, 2010 Free Software Foundation"}, {"sha": "1173dc1b697aaf046c1c59cc9e87a11be628e5d9", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/requirements/dr438/insert_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1692089663b0feffa054f594afe91dc2d5b8416a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Finsert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1692089663b0feffa054f594afe91dc2d5b8416a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Finsert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Finsert_neg.cc?ref=1692089663b0feffa054f594afe91dc2d5b8416a", "patch": "@@ -1,6 +1,6 @@\n // { dg-do compile }\n // { dg-options \"-std=gnu++0x\" }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1201 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1194 }\n // { dg-excess-errors \"\" }\n \n // Copyright (C) 2009, 2010 Free Software Foundation"}]}