{"sha": "f1cb6795d3c9394f06d19d8be6999d9d8a108b19", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjFjYjY3OTVkM2M5Mzk0ZjA2ZDE5ZDhiZTY5OTlkOWQ4YTEwOGIxOQ==", "commit": {"author": {"name": "Joern Rennecke", "email": "amylaar@spamcop.net", "date": "2010-11-12T17:46:02Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2010-11-12T17:46:02Z"}, "message": "re PR target/46450 (xstormy16-elf --enable-werror-always build fails)\n\n\tPR target/46450\n\t* config/stormy16/stormy16.c (xstormy16_expand_prologue):\n\tUse add_reg_note.\n\t(xstormy16_function_arg): Dereference cum.\n\t(xstormy16_expand_builtin): Use expand_normal.\n\tChange type of omode to enum machine_mode.\n\t(combine_bnp): Rename and to and_insn.\n\nFrom-SVN: r166665", "tree": {"sha": "d309a0571f2b89db4ad577ed4e797972c55d9cc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d309a0571f2b89db4ad577ed4e797972c55d9cc5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f1cb6795d3c9394f06d19d8be6999d9d8a108b19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1cb6795d3c9394f06d19d8be6999d9d8a108b19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1cb6795d3c9394f06d19d8be6999d9d8a108b19", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1cb6795d3c9394f06d19d8be6999d9d8a108b19/comments", "author": null, "committer": null, "parents": [{"sha": "a8ea94841c56104dd32eb9cbaa90a9cc12dbc57e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8ea94841c56104dd32eb9cbaa90a9cc12dbc57e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8ea94841c56104dd32eb9cbaa90a9cc12dbc57e"}], "stats": {"total": 80, "additions": 44, "deletions": 36}, "files": [{"sha": "399fe7a348f9b2ad97efd7de17cc79e19377b1a9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1cb6795d3c9394f06d19d8be6999d9d8a108b19/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1cb6795d3c9394f06d19d8be6999d9d8a108b19/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f1cb6795d3c9394f06d19d8be6999d9d8a108b19", "patch": "@@ -83,6 +83,14 @@\n \t* config/fr30/fr30.md (*movsf_constant_store): Remove duplicated\n \tassignment.\n \n+\tPR target/46450\n+\t* config/stormy16/stormy16.c (xstormy16_expand_prologue):\n+\tUse add_reg_note.\n+\t(xstormy16_function_arg): Dereference cum.\n+\t(xstormy16_expand_builtin): Use expand_normal.\n+\tChange type of omode to enum machine_mode.\n+\t(combine_bnp): Rename and to and_insn.\n+\n 2010-11-12  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR debug/46375"}, {"sha": "86a5caae147638aa4d6f548d6f0dd673eeb150a5", "filename": "gcc/config/stormy16/stormy16.c", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1cb6795d3c9394f06d19d8be6999d9d8a108b19/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1cb6795d3c9394f06d19d8be6999d9d8a108b19/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.c?ref=f1cb6795d3c9394f06d19d8be6999d9d8a108b19", "patch": "@@ -1109,9 +1109,7 @@ xstormy16_expand_prologue (void)\n \tXVECEXP (dwarf, 0, 1) = gen_rtx_SET (Pmode, stack_pointer_rtx,\n \t\t\t\t\t     plus_constant (stack_pointer_rtx,\n \t\t\t\t\t\t\t    GET_MODE_SIZE (Pmode)));\n-\tREG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_FRAME_RELATED_EXPR,\n-\t\t\t\t\t      dwarf,\n-\t\t\t\t\t      REG_NOTES (insn));\n+\tadd_reg_note (insn, REG_FRAME_RELATED_EXPR, dwarf);\n \tRTX_FRAME_RELATED_P (XVECEXP (dwarf, 0, 0)) = 1;\n \tRTX_FRAME_RELATED_P (XVECEXP (dwarf, 0, 1)) = 1;\n       }\n@@ -1134,9 +1132,7 @@ xstormy16_expand_prologue (void)\n \tXVECEXP (dwarf, 0, 1) = gen_rtx_SET (Pmode, stack_pointer_rtx,\n \t\t\t\t\t     plus_constant (stack_pointer_rtx,\n \t\t\t\t\t\t\t    GET_MODE_SIZE (Pmode)));\n-\tREG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_FRAME_RELATED_EXPR,\n-\t\t\t\t\t      dwarf,\n-\t\t\t\t\t      REG_NOTES (insn));\n+\tadd_reg_note (insn, REG_FRAME_RELATED_EXPR, dwarf);\n \tRTX_FRAME_RELATED_P (XVECEXP (dwarf, 0, 0)) = 1;\n \tRTX_FRAME_RELATED_P (XVECEXP (dwarf, 0, 1)) = 1;\n       }\n@@ -1279,9 +1275,9 @@ xstormy16_function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n   if (mode == VOIDmode)\n     return const0_rtx;\n   if (targetm.calls.must_pass_in_stack (mode, type)\n-      || cum + XSTORMY16_WORD_SIZE (type, mode) > NUM_ARGUMENT_REGISTERS)\n+      || *cum + XSTORMY16_WORD_SIZE (type, mode) > NUM_ARGUMENT_REGISTERS)\n     return NULL_RTX;\n-  return gen_rtx_REG (mode, cum + FIRST_ARGUMENT_REGISTER);\n+  return gen_rtx_REG (mode, *cum + FIRST_ARGUMENT_REGISTER);\n }\n \n /* Build the va_list type.\n@@ -2332,19 +2328,19 @@ xstormy16_expand_builtin (tree exp, rtx target,\n \n   for (a = 0; a < 10 && argtree; a++)\n     {\n-      args[a] = expand_expr (TREE_VALUE (argtree), NULL_RTX, VOIDmode, 0);\n+      args[a] = expand_normal (TREE_VALUE (argtree));\n       argtree = TREE_CHAIN (argtree);\n     }\n \n   for (o = 0; s16builtins[i].arg_ops[o]; o++)\n     {\n       char ao = s16builtins[i].arg_ops[o];\n       char c = insn_data[code].operand[o].constraint[0];\n-      int omode;\n+      enum machine_mode omode;\n \n       copyto[o] = 0;\n \n-      omode = insn_data[code].operand[o].mode;\n+      omode = (enum machine_mode) insn_data[code].operand[o].mode;\n       if (ao == 'r')\n \top[o] = target ? target : gen_reg_rtx (omode);\n       else if (ao == 't')\n@@ -2391,7 +2387,7 @@ combine_bnp (rtx insn)\n {\n   int insn_code, regno, need_extend;\n   unsigned int mask;\n-  rtx cond, reg, and, load, qireg, mem;\n+  rtx cond, reg, and_insn, load, qireg, mem;\n   enum machine_mode load_mode = QImode;\n   enum machine_mode and_mode = QImode;\n   rtx shift = NULL_RTX;\n@@ -2432,50 +2428,52 @@ combine_bnp (rtx insn)\n     {\n       /* LT and GE conditionals should have a sign extend before\n \t them.  */\n-      for (and = prev_real_insn (insn); and; and = prev_real_insn (and))\n+      for (and_insn = prev_real_insn (insn); and_insn;\n+\t   and_insn = prev_real_insn (and_insn))\n \t{\n-\t  int and_code = recog_memoized (and);\n+\t  int and_code = recog_memoized (and_insn);\n \n \t  if (and_code == CODE_FOR_extendqihi2\n-\t      && rtx_equal_p (SET_DEST (PATTERN (and)), reg)\n-\t      && rtx_equal_p (XEXP (SET_SRC (PATTERN (and)), 0), qireg))\n+\t      && rtx_equal_p (SET_DEST (PATTERN (and_insn)), reg)\n+\t      && rtx_equal_p (XEXP (SET_SRC (PATTERN (and_insn)), 0), qireg))\n \t    break;\n \n \t  if (and_code == CODE_FOR_movhi_internal\n-\t      && rtx_equal_p (SET_DEST (PATTERN (and)), reg))\n+\t      && rtx_equal_p (SET_DEST (PATTERN (and_insn)), reg))\n \t    {\n \t      /* This is for testing bit 15.  */\n-\t      and = insn;\n+\t      and_insn = insn;\n \t      break;\n \t    }\n \n-\t  if (reg_mentioned_p (reg, and))\n+\t  if (reg_mentioned_p (reg, and_insn))\n \t    return;\n \n-\t  if (GET_CODE (and) != NOTE\n-\t      && GET_CODE (and) != INSN)\n+\t  if (GET_CODE (and_insn) != NOTE\n+\t      && GET_CODE (and_insn) != INSN)\n \t    return;\n \t}\n     }\n   else\n     {\n       /* EQ and NE conditionals have an AND before them.  */\n-      for (and = prev_real_insn (insn); and; and = prev_real_insn (and))\n+      for (and_insn = prev_real_insn (insn); and_insn;\n+\t   and_insn = prev_real_insn (and_insn))\n \t{\n-\t  if (recog_memoized (and) == CODE_FOR_andhi3\n-\t      && rtx_equal_p (SET_DEST (PATTERN (and)), reg)\n-\t      && rtx_equal_p (XEXP (SET_SRC (PATTERN (and)), 0), reg))\n+\t  if (recog_memoized (and_insn) == CODE_FOR_andhi3\n+\t      && rtx_equal_p (SET_DEST (PATTERN (and_insn)), reg)\n+\t      && rtx_equal_p (XEXP (SET_SRC (PATTERN (and_insn)), 0), reg))\n \t    break;\n \n-\t  if (reg_mentioned_p (reg, and))\n+\t  if (reg_mentioned_p (reg, and_insn))\n \t    return;\n \n-\t  if (GET_CODE (and) != NOTE\n-\t      && GET_CODE (and) != INSN)\n+\t  if (GET_CODE (and_insn) != NOTE\n+\t      && GET_CODE (and_insn) != INSN)\n \t    return;\n \t}\n \n-      if (and)\n+      if (and_insn)\n \t{\n \t  /* Some mis-optimizations by GCC can generate a RIGHT-SHIFT\n \t     followed by an AND like this:\n@@ -2486,7 +2484,8 @@ combine_bnp (rtx insn)\n                (set (reg:HI r7) (and:HI (reg:HI r7) (const_int 1)))\n \n \t     Attempt to detect this here.  */\n-\t  for (shift = prev_real_insn (and); shift; shift = prev_real_insn (shift))\n+\t  for (shift = prev_real_insn (and_insn); shift;\n+\t       shift = prev_real_insn (shift))\n \t    {\n \t      if (recog_memoized (shift) == CODE_FOR_lshrhi3\n \t\t  && rtx_equal_p (SET_DEST (XVECEXP (PATTERN (shift), 0, 0)), reg)\n@@ -2503,10 +2502,10 @@ combine_bnp (rtx insn)\n \t    }\n \t}\n     }\n-  if (!and)\n+  if (!and_insn)\n     return;\n \n-  for (load = shift ? prev_real_insn (shift) : prev_real_insn (and);\n+  for (load = shift ? prev_real_insn (shift) : prev_real_insn (and_insn);\n        load;\n        load = prev_real_insn (load))\n     {\n@@ -2562,10 +2561,11 @@ combine_bnp (rtx insn)\n     }\n   else\n     {\n-      if (!xstormy16_onebit_set_operand (XEXP (SET_SRC (PATTERN (and)), 1), load_mode))\n+      if (!xstormy16_onebit_set_operand (XEXP (SET_SRC (PATTERN (and_insn)), 1),\n+\t\t\t\t\t load_mode))\n \treturn;\n \n-      mask = (int) INTVAL (XEXP (SET_SRC (PATTERN (and)), 1));\n+      mask = (int) INTVAL (XEXP (SET_SRC (PATTERN (and_insn)), 1));\n \n       if (shift)\n \tmask <<= INTVAL (XEXP (SET_SRC (XVECEXP (PATTERN (shift), 0, 0)), 1));\n@@ -2591,8 +2591,8 @@ combine_bnp (rtx insn)\n   INSN_CODE (insn) = -1;\n   delete_insn (load);\n \n-  if (and != insn)\n-    delete_insn (and);\n+  if (and_insn != insn)\n+    delete_insn (and_insn);\n \n   if (shift != NULL_RTX)\n     delete_insn (shift);"}]}