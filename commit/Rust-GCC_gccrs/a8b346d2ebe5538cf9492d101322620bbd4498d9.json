{"sha": "a8b346d2ebe5538cf9492d101322620bbd4498d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YThiMzQ2ZDJlYmU1NTM4Y2Y5NDkyZDEwMTMyMjYyMGJiZDQ0OThkOQ==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2014-07-29T13:27:42Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-29T13:27:42Z"}, "message": "sem_ch3.adb, [...]: Minor reformatting.\n\n2014-07-29  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch3.adb, sinfo.ads, types.ads, sem_prag.adb, a-except-2005.adb,\n\tsem_ch6.adb, par-ch3.adb: Minor reformatting.\n\nFrom-SVN: r213174", "tree": {"sha": "92accbfd333b2b1974bccb80ee74edf872ea5cf8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/92accbfd333b2b1974bccb80ee74edf872ea5cf8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a8b346d2ebe5538cf9492d101322620bbd4498d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8b346d2ebe5538cf9492d101322620bbd4498d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8b346d2ebe5538cf9492d101322620bbd4498d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8b346d2ebe5538cf9492d101322620bbd4498d9/comments", "author": null, "committer": null, "parents": [{"sha": "84c0a895d4fd336f1119370c72800e43ac487ff2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84c0a895d4fd336f1119370c72800e43ac487ff2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84c0a895d4fd336f1119370c72800e43ac487ff2"}], "stats": {"total": 54, "additions": 40, "deletions": 14}, "files": [{"sha": "58a3246b520dde944e2f47cd74eabe706dfa37e0", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8b346d2ebe5538cf9492d101322620bbd4498d9/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8b346d2ebe5538cf9492d101322620bbd4498d9/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a8b346d2ebe5538cf9492d101322620bbd4498d9", "patch": "@@ -1,3 +1,8 @@\n+2014-07-29  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch3.adb, sinfo.ads, types.ads, sem_prag.adb, a-except-2005.adb,\n+\tsem_ch6.adb, par-ch3.adb: Minor reformatting.\n+\n 2014-07-29  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_ch6.adb (Check_Return_Subtype_Indication): Reject a return"}, {"sha": "168a619aece9dc8f6eb7f53bcae6ac057a3f5e91", "filename": "gcc/ada/a-except-2005.adb", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8b346d2ebe5538cf9492d101322620bbd4498d9/gcc%2Fada%2Fa-except-2005.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8b346d2ebe5538cf9492d101322620bbd4498d9/gcc%2Fada%2Fa-except-2005.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-except-2005.adb?ref=a8b346d2ebe5538cf9492d101322620bbd4498d9", "patch": "@@ -403,9 +403,17 @@ package body Ada.Exceptions is\n    --  These routines raise a specific exception with a reason message\n    --  attached. The parameters are the file name and line number in each\n    --  case. The names are defined by Exp_Ch11.Get_RT_Exception_Name.\n-   --  Note that these routines should be declared in the same order as the\n-   --  corresponding Rmsg_xx constants below, this is needed by the\n-   --  .NET runtime (see exceptmsg.awk script).\n+\n+   --  Note on ordering of these routines. Normally in the Ada.Exceptions units\n+   --  we don't care about the ordering of entries for Rcheck routines, and\n+   --  the normal approach is to keep them in the same order as declarations\n+   --  in Types.\n+\n+   --  This section is an IMPORTANT EXCEPTION. It is essential that the\n+   --  routines in this section be declared in the same order as the Rmsg_xx\n+   --  constants in the following section. This is required by the .Net runtime\n+   --  which uses the exceptmsg.awk script to generate require exception data,\n+   --  and this script requires and expects that this ordering rule holds.\n \n    procedure Rcheck_CE_Access_Check\n      (File : System.Address; Line : Integer);\n@@ -479,7 +487,6 @@ package body Ada.Exceptions is\n      (File : System.Address; Line : Integer);\n    procedure Rcheck_PE_Stream_Operation_Not_Allowed\n      (File : System.Address; Line : Integer);\n-\n    procedure Rcheck_CE_Access_Check_Ext\n      (File : System.Address; Line, Column : Integer);\n    procedure Rcheck_CE_Index_Check_Ext"}, {"sha": "acf35a56f3f3efd352813908dec484e205344a7d", "filename": "gcc/ada/par-ch3.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8b346d2ebe5538cf9492d101322620bbd4498d9/gcc%2Fada%2Fpar-ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8b346d2ebe5538cf9492d101322620bbd4498d9/gcc%2Fada%2Fpar-ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch3.adb?ref=a8b346d2ebe5538cf9492d101322620bbd4498d9", "patch": "@@ -3966,15 +3966,15 @@ package body Ch3 is\n    begin\n       if not Header_Already_Parsed then\n \n-         --  not null access .. is a common form of access definition\n-         --  access non null ..  is certainly rare, but syntactically legal.\n-         --  not null access not null .. is rarer yet, and also legal.\n+         --  NOT NULL ACCESS .. is a common form of access definition.\n+         --  ACCESS NON NULL ..  is certainly rare, but syntactically legal.\n+         --  NOT NULL ACCESS NOT NULL .. is rarer yet, and also legal.\n          --  The last two cases are only meaningful if the following subtype\n          --  indication denotes an access type (semantic check).\n \n          Not_Null_Present := P_Null_Exclusion;     --  Ada 2005 (AI-231)\n          Scan; -- past ACCESS\n-         Not_Null_Subtype := P_Null_Exclusion;     --  Might also appear.\n+         Not_Null_Subtype := P_Null_Exclusion;     --  Might also appear\n       end if;\n \n       if Token_Name = Name_Protected then"}, {"sha": "9c70acb5d5b6748cd2d9c11c101f481687e5cfdd", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8b346d2ebe5538cf9492d101322620bbd4498d9/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8b346d2ebe5538cf9492d101322620bbd4498d9/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=a8b346d2ebe5538cf9492d101322620bbd4498d9", "patch": "@@ -1337,7 +1337,7 @@ package body Sem_Ch3 is\n               Process_Subtype (S, P, T, 'P'));\n          end if;\n \n-         --  If the access definition is of the form : access not null ..\n+         --  If the access definition is of the form: ACCESS NOT NULL ..\n          --  the subtype indication must be of an access type. Create\n          --  a null-excluding subtype of it.\n \n@@ -1355,7 +1355,7 @@ package body Sem_Ch3 is\n                   Decl :=\n                     Make_Subtype_Declaration (Loc,\n                       Defining_Identifier => Nam,\n-                      Subtype_Indication =>\n+                      Subtype_Indication  =>\n                         New_Occurrence_Of (Entity (S), Loc));\n                   Set_Null_Exclusion_Present (Decl);\n                   Insert_Before (Parent (Def), Decl);\n@@ -1383,7 +1383,7 @@ package body Sem_Ch3 is\n \n       --  In Ada 2005, the type may have a limited view through some unit in\n       --  its own context, allowing the following circularity that cannot be\n-      --  detected earlier\n+      --  detected earlier.\n \n       elsif Is_Class_Wide_Type (Full_Desig) and then Etype (Full_Desig) = T\n       then"}, {"sha": "cc1cc7bb9e7be3b5494d382e04a8190950abbb3f", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8b346d2ebe5538cf9492d101322620bbd4498d9/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8b346d2ebe5538cf9492d101322620bbd4498d9/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=a8b346d2ebe5538cf9492d101322620bbd4498d9", "patch": "@@ -811,9 +811,11 @@ package body Sem_Ch6 is\n                end if;\n             end if;\n \n-            --  Previous versions of this subprogram allowed the return value\n-            --  to be the ancestor of the return type if the return type was\n-            --  a null extension.  This was plainly incorrect.\n+         --  All remaining cases are illegal\n+\n+         --  Note: previous versions of this subprogram allowed the return\n+         --  value to be the ancestor of the return type if the return type\n+         --  was a null extension. This was plainly incorrect.\n \n          else\n             Error_Msg_N"}, {"sha": "bc3468da63c81b6169fb908e6035057aa8da918e", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8b346d2ebe5538cf9492d101322620bbd4498d9/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8b346d2ebe5538cf9492d101322620bbd4498d9/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=a8b346d2ebe5538cf9492d101322620bbd4498d9", "patch": "@@ -11019,6 +11019,7 @@ package body Sem_Prag is\n             --  integer address values. If Address is not private (e.g. on\n             --  VMS, where it is an integer type), then this pragma has no\n             --  purpose, so it is simply ignored.\n+\n             --  If Allow_Integer_Address is already set do nothing, otherwise\n             --  calling RTE on RE_Address would cause a crash when loading\n             --  system.ads."}, {"sha": "2533f5b56fdc19bba4036f0882f4377200c62964", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8b346d2ebe5538cf9492d101322620bbd4498d9/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8b346d2ebe5538cf9492d101322620bbd4498d9/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=a8b346d2ebe5538cf9492d101322620bbd4498d9", "patch": "@@ -1850,6 +1850,9 @@ package Sinfo is\n    --    expected type is a thin pointer to unconstrained array. This flag is\n    --    to assist in detecting this illegal use of Unrestricted_Access.\n \n+   --  Null_Excluding_Subtype (Flag16)\n+   --    ??? needs documentation ???\n+\n    --  Original_Discriminant (Node2-Sem)\n    --    Present in identifiers. Used in references to discriminants that\n    --    appear in generic units. Because the names of the discriminants may be"}, {"sha": "a8d2f5ba27ae925626ba48c015c64355d4ded53e", "filename": "gcc/ada/types.ads", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8b346d2ebe5538cf9492d101322620bbd4498d9/gcc%2Fada%2Ftypes.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8b346d2ebe5538cf9492d101322620bbd4498d9/gcc%2Fada%2Ftypes.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftypes.ads?ref=a8b346d2ebe5538cf9492d101322620bbd4498d9", "patch": "@@ -836,6 +836,14 @@ package Types is\n    --       static string constant. Note that there is more than one version\n    --       of a-except.adb which must be modified.\n \n+   --  Note on ordering of references. For the tables in Ada.Exceptions units,\n+   --  usually the ordering does not matter, and we use the same ordering as\n+   --  is used here (note the requirement in the ordering here that CE/PE/SE\n+   --  codes be kept together, so the subtype declarations work OK). However,\n+   --  there is an important exception, which is in a-except-2005.adb, where\n+   --  ordering of the Rcheck routines must correspond to the ordering of the\n+   --  Rmsg_xx messages. This is required by the .NET scripts.\n+\n    type RT_Exception_Code is\n      (CE_Access_Check_Failed,            -- 00\n       CE_Access_Parameter_Is_Null,       -- 01"}]}