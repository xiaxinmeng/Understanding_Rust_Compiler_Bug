{"sha": "bec2e3595757d4d7d43972b78fc4eee87e1be753", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmVjMmUzNTk1NzU3ZDRkN2Q0Mzk3MmI3OGZjNGVlZTg3ZTFiZTc1Mw==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1992-04-27T16:44:10Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1992-04-27T16:44:10Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r839", "tree": {"sha": "62adc32f4adabd538834f0da72423ee84c39707d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/62adc32f4adabd538834f0da72423ee84c39707d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bec2e3595757d4d7d43972b78fc4eee87e1be753", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bec2e3595757d4d7d43972b78fc4eee87e1be753", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bec2e3595757d4d7d43972b78fc4eee87e1be753", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bec2e3595757d4d7d43972b78fc4eee87e1be753/comments", "author": null, "committer": null, "parents": [{"sha": "ea47d37c9a33bda4ea158008cb7eae2a1547af03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea47d37c9a33bda4ea158008cb7eae2a1547af03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea47d37c9a33bda4ea158008cb7eae2a1547af03"}], "stats": {"total": 80, "additions": 41, "deletions": 39}, "files": [{"sha": "ade79cb9277ea34194f1c232e7ef656999472598", "filename": "gcc/combine.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bec2e3595757d4d7d43972b78fc4eee87e1be753/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bec2e3595757d4d7d43972b78fc4eee87e1be753/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=bec2e3595757d4d7d43972b78fc4eee87e1be753", "patch": "@@ -4424,8 +4424,7 @@ force_to_mode (x, mode, bits, reg)\n \n     case CONST_INT:\n       if (bits < HOST_BITS_PER_INT)\n-\tx = gen_rtx (CONST_INT, VOIDmode,\n-\t\t     INTVAL (x) & ((1 << (bits + 1)) - 1));\n+\tx = gen_rtx (CONST_INT, VOIDmode, INTVAL (x) & ((1 << bits) - 1));\n       return x;\n \n     case SUBREG:\n@@ -4452,7 +4451,7 @@ force_to_mode (x, mode, bits, reg)\n \t\t\t      reg);\n \n \t  if (bits < HOST_BITS_PER_INT)\n-\t    mask &= (1 << (bits + 1)) - 1;\n+\t    mask &= (1 << bits) - 1;\n \n \t  x = simplify_and_const_int (x, mode, op, mask);\n \n@@ -4462,7 +4461,7 @@ force_to_mode (x, mode, bits, reg)\n \n \t  if (GET_CODE (x) == AND && GET_CODE (XEXP (x, 1)) == CONST_INT\n \t      && bits < HOST_BITS_PER_INT\n-\t      && INTVAL (XEXP (x, 1)) == (1 << (bits + 1)) - 1)\n+\t      && INTVAL (XEXP (x, 1)) == (1 << bits) - 1)\n \t    x = XEXP (x, 0);\n \t  return x;\n \t}"}, {"sha": "5be9cdbf56bf45fc75445f165503af7873c0fb81", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 38, "deletions": 35, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bec2e3595757d4d7d43972b78fc4eee87e1be753/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bec2e3595757d4d7d43972b78fc4eee87e1be753/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=bec2e3595757d4d7d43972b78fc4eee87e1be753", "patch": "@@ -1065,56 +1065,59 @@ extern union tree_node *current_function_decl;\n \n    If you change this, execute \"rm explow.o recog.o reload.o\".  */\n \n+#define RTX_OK_FOR_BASE_P(X)\t\t\t\t\t\t\\\n+  ((GET_CODE (X) == REG && REG_OK_FOR_BASE_P (X))\t\t\t\\\n+  || (GET_CODE (X) == SUBREG\t\t\t\t\t\t\\\n+      && GET_CODE (SUBREG_REG (X)) == REG\t\t\t\t\\\n+      && REG_OK_FOR_BASE_P (SUBREG_REG (X))))\n+\n+#define RTX_OK_FOR_INDEX_P(X)\t\t\t\t\t\t\\\n+  ((GET_CODE (X) == REG && REG_OK_FOR_INDEX_P (X))\t\t\t\\\n+  || (GET_CODE (X) == SUBREG\t\t\t\t\t\t\\\n+      && GET_CODE (SUBREG_REG (X)) == REG\t\t\t\t\\\n+      && REG_OK_FOR_INDEX_P (SUBREG_REG (X))))\n+\n+#define RTX_OK_FOR_OFFSET_P(X)\t\t\t\t\t\t\\\n+  (GET_CODE (X) == CONST_INT && INTVAL (X) >= -0x1000 && INTVAL (X) < 0x1000)\n+\n #define GO_IF_LEGITIMATE_ADDRESS(MODE, X, ADDR)\t\t\\\n-{ if (GET_CODE (X) == REG)\t\t\t\t\\\n-    { if (REG_OK_FOR_BASE_P (X)) goto ADDR; }\t\t\\\n+{ if (RTX_OK_FOR_BASE_P (X))\t\t\t\t\\\n+    goto ADDR;\t\t\t\t\t\t\\\n   else if (GET_CODE (X) == PLUS)\t\t\t\\\n     {\t\t\t\t\t\t\t\\\n-      if (flag_pic && XEXP (X, 0) == pic_offset_table_rtx)\\\n+      register rtx op0 = XEXP (X, 0);\t\t\t\\\n+      register rtx op1 = XEXP (X, 1);\t\t\t\\\n+      if (flag_pic && op0 == pic_offset_table_rtx)\t\\\n \t{\t\t\t\t\t\t\\\n-\t  if (GET_CODE (XEXP (X, 1)) == REG\t\t\\\n-\t      && REG_OK_FOR_BASE_P (XEXP (X, 1)))\t\\\n+\t  if (RTX_OK_FOR_BASE_P (op1))\t\t\t\\\n \t    goto ADDR;\t\t\t\t\t\\\n \t  else if (flag_pic == 1\t\t\t\\\n-\t\t   && GET_CODE (XEXP (X, 1)) != REG\t\\\n-\t\t   && GET_CODE (XEXP (X, 1)) != LO_SUM\t\\\n-\t\t   && GET_CODE (XEXP (X, 1)) != MEM)\t\\\n+\t\t   && GET_CODE (op1) != REG\t\t\\\n+\t\t   && GET_CODE (op1) != LO_SUM\t\t\\\n+\t\t   && GET_CODE (op1) != MEM)\t\t\\\n \t    goto ADDR;\t\t\t\t\t\\\n \t}\t\t\t\t\t\t\\\n-      else if (GET_CODE (XEXP (X, 0)) == REG\t\t\\\n-\t  && REG_OK_FOR_BASE_P (XEXP (X, 0)))\t\t\\\n+      else if (RTX_OK_FOR_BASE_P (op0))\t\t\t\\\n \t{\t\t\t\t\t\t\\\n-\t  if (GET_CODE (XEXP (X, 1)) == REG\t\t\\\n-\t      && REG_OK_FOR_INDEX_P (XEXP (X, 1)))\t\\\n-\t    goto ADDR;\t\t\t\t\t\\\n-\t  if (GET_CODE (XEXP (X, 1)) == CONST_INT\t\\\n-\t      && INTVAL (XEXP (X, 1)) >= -0x1000\t\\\n-\t      && INTVAL (XEXP (X, 1)) < 0x1000)\t\t\\\n+\t  if (RTX_OK_FOR_INDEX_P (op1)\t\t\t\\\n+\t      || RTX_OK_FOR_OFFSET_P (op1))\t\t\\\n \t    goto ADDR;\t\t\t\t\t\\\n \t}\t\t\t\t\t\t\\\n-      else if (GET_CODE (XEXP (X, 1)) == REG\t\t\\\n-\t  && REG_OK_FOR_BASE_P (XEXP (X, 1)))\t\t\\\n+      else if (RTX_OK_FOR_BASE_P (op1))\t\t\t\\\n \t{\t\t\t\t\t\t\\\n-\t  if (GET_CODE (XEXP (X, 0)) == REG\t\t\\\n-\t      && REG_OK_FOR_INDEX_P (XEXP (X, 0)))\t\\\n-\t    goto ADDR;\t\t\t\t\t\\\n-\t  if (GET_CODE (XEXP (X, 0)) == CONST_INT\t\\\n-\t      && INTVAL (XEXP (X, 0)) >= -0x1000\t\\\n-\t      && INTVAL (XEXP (X, 0)) < 0x1000)\t\t\\\n+\t  if (RTX_OK_FOR_INDEX_P (op0)\t\t\t\\\n+\t      || RTX_OK_FOR_OFFSET_P (op0))\t\t\\\n \t    goto ADDR;\t\t\t\t\t\\\n \t}\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\\\n-  else if (GET_CODE (X) == LO_SUM\t\t\t\\\n-\t   && GET_CODE (XEXP (X, 0)) == REG\t\t\\\n-\t   && REG_OK_FOR_BASE_P (XEXP (X, 0))\t\t\\\n-\t   && CONSTANT_P (XEXP (X, 1)))\t\t\t\\\n-    goto ADDR;\t\t\t\t\t\t\\\n-  else if (GET_CODE (X) == LO_SUM\t\t\t\\\n-\t   && GET_CODE (XEXP (X, 0)) == SUBREG\t\t\\\n-\t   && GET_CODE (SUBREG_REG (XEXP (X, 0))) == REG\\\n-\t   && REG_OK_FOR_BASE_P (SUBREG_REG (XEXP (X, 0)))\\\n-\t   && CONSTANT_P (XEXP (X, 1)))\t\t\t\\\n-    goto ADDR;\t\t\t\t\t\t\\\n+  else if (GET_CODE (X) == LO_SUM)\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      register rtx op0 = XEXP (X, 0);\t\t\t\\\n+      register rtx op1 = XEXP (X, 1);\t\t\t\\\n+      if (RTX_OK_FOR_BASE_P (op0)\t\t\t\\\n+\t  && CONSTANT_P (op1))\t\t\t\t\\\n+\tgoto ADDR;\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\\\n   else if (GET_CODE (X) == CONST_INT && SMALL_INT (X))\t\\\n     goto ADDR;\t\t\t\t\t\t\\\n }"}]}