{"sha": "1b18663e0fbd6e253feca9e1f29e6f5b5538408d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWIxODY2M2UwZmJkNmUyNTNmZWNhOWUxZjI5ZTZmNWI1NTM4NDA4ZA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-05-14T11:17:11Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-05-14T11:17:11Z"}, "message": "LWG 2899 - Make is_move_constructible correct for unique_ptr\n\n\t* include/bits/unique_ptr.h (__uniq_ptr_impl): Add move constructor,\n\tmove assignment operator.\n\t(__uniq_ptr_impl::release(), __uniq_ptr_impl::reset(pointer)): Add.\n\t(__uniq_ptr_data): New class template with conditionally deleted\n\tspecial members.\n\t(unique_ptr, unique_ptr<T[], D>): Change type of data member from\n\t__uniq_ptr_impl<T, D> to __uniq_ptr_data<T, D>. Define move\n\tconstructor and move assignment operator as defaulted.\n\t(unique_ptr::release(), unique_ptr<T[], D>::release()): Forward to\n\t__uniq_ptr_impl::release().\n\t(unique_ptr::reset(pointer), unique_ptr<T[], D>::reset<U>(U)): Forward\n\tto __uniq_ptr_impl::reset(pointer).\n\t* python/libstdcxx/v6/printers.py (UniquePointerPrinter.__init__):\n\tCheck for new __uniq_ptr_data type.\n\t* testsuite/20_util/unique_ptr/dr2899.cc: New test.\n\nFrom-SVN: r271158", "tree": {"sha": "be2e6b69d0fe35d1b66e9bb20d0403e15e5daa86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be2e6b69d0fe35d1b66e9bb20d0403e15e5daa86"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b18663e0fbd6e253feca9e1f29e6f5b5538408d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b18663e0fbd6e253feca9e1f29e6f5b5538408d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b18663e0fbd6e253feca9e1f29e6f5b5538408d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b18663e0fbd6e253feca9e1f29e6f5b5538408d/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24c30e14105435d100aee4a5a832e09cab1be6e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24c30e14105435d100aee4a5a832e09cab1be6e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24c30e14105435d100aee4a5a832e09cab1be6e1"}], "stats": {"total": 205, "additions": 153, "deletions": 52}, "files": [{"sha": "440a1dfd80d786167cfa5d004c2dc2673db6be15", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b18663e0fbd6e253feca9e1f29e6f5b5538408d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b18663e0fbd6e253feca9e1f29e6f5b5538408d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=1b18663e0fbd6e253feca9e1f29e6f5b5538408d", "patch": "@@ -1,3 +1,22 @@\n+2019-05-14  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tLWG 2899 - Make is_move_constructible correct for unique_ptr\n+\t* include/bits/unique_ptr.h (__uniq_ptr_impl): Add move constructor,\n+\tmove assignment operator.\n+\t(__uniq_ptr_impl::release(), __uniq_ptr_impl::reset(pointer)): Add.\n+\t(__uniq_ptr_data): New class template with conditionally deleted\n+\tspecial members.\n+\t(unique_ptr, unique_ptr<T[], D>): Change type of data member from\n+\t__uniq_ptr_impl<T, D> to __uniq_ptr_data<T, D>. Define move\n+\tconstructor and move assignment operator as defaulted.\n+\t(unique_ptr::release(), unique_ptr<T[], D>::release()): Forward to\n+\t__uniq_ptr_impl::release().\n+\t(unique_ptr::reset(pointer), unique_ptr<T[], D>::reset<U>(U)): Forward\n+\tto __uniq_ptr_impl::reset(pointer).\n+\t* python/libstdcxx/v6/printers.py (UniquePointerPrinter.__init__):\n+\tCheck for new __uniq_ptr_data type.\n+\t* testsuite/20_util/unique_ptr/dr2899.cc: New test.\n+\n 2019-05-13  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/90454.cc path construction from void*"}, {"sha": "484c8b328e42e070b7ca1c0fe45122faa5d71646", "filename": "libstdc++-v3/include/bits/unique_ptr.h", "status": "modified", "additions": 77, "deletions": 51, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b18663e0fbd6e253feca9e1f29e6f5b5538408d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b18663e0fbd6e253feca9e1f29e6f5b5538408d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h?ref=1b18663e0fbd6e253feca9e1f29e6f5b5538408d", "patch": "@@ -119,6 +119,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// @cond undocumented\n \n+  // Manages the pointer and deleter of a unique_ptr\n   template <typename _Tp, typename _Dp>\n     class __uniq_ptr_impl\n     {\n@@ -153,14 +154,75 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __uniq_ptr_impl(pointer __p, _Del&& __d)\n \t: _M_t(__p, std::forward<_Del>(__d)) { }\n \n+      __uniq_ptr_impl(__uniq_ptr_impl&& __u) noexcept\n+      : _M_t(std::move(__u._M_t))\n+      { __u._M_ptr() = nullptr; }\n+\n+      __uniq_ptr_impl& operator=(__uniq_ptr_impl&& __u) noexcept\n+      {\n+\treset(__u.release());\n+\t_M_deleter() = std::forward<_Dp>(__u._M_deleter());\n+\treturn *this;\n+      }\n+\n       pointer&   _M_ptr() { return std::get<0>(_M_t); }\n       pointer    _M_ptr() const { return std::get<0>(_M_t); }\n       _Dp&       _M_deleter() { return std::get<1>(_M_t); }\n       const _Dp& _M_deleter() const { return std::get<1>(_M_t); }\n \n+      void reset(pointer __p) noexcept\n+      {\n+\tconst pointer __old_p = _M_ptr();\n+\t_M_ptr() = __p;\n+\tif (__old_p)\n+\t  _M_deleter()(__old_p);\n+      }\n+\n+      pointer release() noexcept\n+      {\n+\tpointer __p = _M_ptr();\n+\t_M_ptr() = nullptr;\n+\treturn __p;\n+      }\n+\n     private:\n       tuple<pointer, _Dp> _M_t;\n     };\n+\n+  // Defines move construction + assignment as either defaulted or deleted.\n+  template <typename _Tp, typename _Dp,\n+\t    bool = is_move_constructible<_Dp>::value,\n+\t    bool = is_move_assignable<_Dp>::value>\n+    struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>\n+    {\n+      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;\n+      __uniq_ptr_data(__uniq_ptr_data&&) = default;\n+      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = default;\n+    };\n+\n+  template <typename _Tp, typename _Dp>\n+    struct __uniq_ptr_data<_Tp, _Dp, true, false> : __uniq_ptr_impl<_Tp, _Dp>\n+    {\n+      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;\n+      __uniq_ptr_data(__uniq_ptr_data&&) = default;\n+      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = delete;\n+    };\n+\n+  template <typename _Tp, typename _Dp>\n+    struct __uniq_ptr_data<_Tp, _Dp, false, true> : __uniq_ptr_impl<_Tp, _Dp>\n+    {\n+      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;\n+      __uniq_ptr_data(__uniq_ptr_data&&) = delete;\n+      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = default;\n+    };\n+\n+  template <typename _Tp, typename _Dp>\n+    struct __uniq_ptr_data<_Tp, _Dp, false, false> : __uniq_ptr_impl<_Tp, _Dp>\n+    {\n+      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;\n+      __uniq_ptr_data(__uniq_ptr_data&&) = delete;\n+      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = delete;\n+    };\n   /// @endcond\n \n   /// 20.7.1.2 unique_ptr for single objects.\n@@ -171,7 +233,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tusing _DeleterConstraint =\n \t  typename __uniq_ptr_impl<_Tp, _Up>::_DeleterConstraint::type;\n \n-      __uniq_ptr_impl<_Tp, _Dp> _M_t;\n+      __uniq_ptr_data<_Tp, _Dp> _M_t;\n \n     public:\n       using pointer\t  = typename __uniq_ptr_impl<_Tp, _Dp>::pointer;\n@@ -255,8 +317,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       // Move constructors.\n \n       /// Move constructor.\n-      unique_ptr(unique_ptr&& __u) noexcept\n-      : _M_t(__u.release(), std::forward<deleter_type>(__u.get_deleter())) { }\n+      unique_ptr(unique_ptr&&) = default;\n \n       /** @brief Converting constructor from another type\n        *\n@@ -298,24 +359,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       /** @brief Move assignment operator.\n        *\n-       * @param __u  The object to transfer ownership from.\n-       *\n-       * Invokes the deleter first if this object owns a pointer.\n+       * Invokes the deleter if this object owns a pointer.\n        */\n-      unique_ptr&\n-      operator=(unique_ptr&& __u) noexcept\n-      {\n-\treset(__u.release());\n-\tget_deleter() = std::forward<deleter_type>(__u.get_deleter());\n-\treturn *this;\n-      }\n+      unique_ptr& operator=(unique_ptr&&) = default;\n \n       /** @brief Assignment from another type.\n        *\n        * @param __u  The object to transfer ownership from, which owns a\n        *             convertible pointer to a non-array object.\n        *\n-       * Invokes the deleter first if this object owns a pointer.\n+       * Invokes the deleter if this object owns a pointer.\n        */\n       template<typename _Up, typename _Ep>\n         typename enable_if< __and_<\n@@ -380,11 +433,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       /// Release ownership of any stored pointer.\n       pointer\n       release() noexcept\n-      {\n-\tpointer __p = get();\n-\t_M_t._M_ptr() = pointer();\n-\treturn __p;\n-      }\n+      { return _M_t.release(); }\n \n       /** @brief Replace the stored pointer.\n        *\n@@ -397,10 +446,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       {\n \tstatic_assert(__is_invocable<deleter_type&, pointer>::value,\n \t\t      \"unique_ptr's deleter must be invocable with a pointer\");\n-\tusing std::swap;\n-\tswap(_M_t._M_ptr(), __p);\n-\tif (__p != pointer())\n-\t  get_deleter()(std::move(__p));\n+\t_M_t.reset(std::move(__p));\n       }\n \n       /// Exchange the pointer and deleter with another object.\n@@ -427,7 +473,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       using _DeleterConstraint =\n \ttypename __uniq_ptr_impl<_Tp, _Up>::_DeleterConstraint::type;\n \n-      __uniq_ptr_impl<_Tp, _Dp> _M_t;\n+      __uniq_ptr_data<_Tp, _Dp> _M_t;\n \n       template<typename _Up>\n \tusing __remove_cv = typename remove_cv<_Up>::type;\n@@ -536,8 +582,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t _DelUnref&&>) = delete;\n \n       /// Move constructor.\n-      unique_ptr(unique_ptr&& __u) noexcept\n-      : _M_t(__u.release(), std::forward<deleter_type>(__u.get_deleter())) { }\n+      unique_ptr(unique_ptr&&) = default;\n \n       /// Creates a unique_ptr that owns nothing.\n       template<typename _Del = _Dp, typename = _DeleterConstraint<_Del>>\n@@ -564,24 +609,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       /** @brief Move assignment operator.\n        *\n-       * @param __u  The object to transfer ownership from.\n-       *\n-       * Invokes the deleter first if this object owns a pointer.\n+       * Invokes the deleter if this object owns a pointer.\n        */\n       unique_ptr&\n-      operator=(unique_ptr&& __u) noexcept\n-      {\n-\treset(__u.release());\n-\tget_deleter() = std::forward<deleter_type>(__u.get_deleter());\n-\treturn *this;\n-      }\n+      operator=(unique_ptr&&) = default;\n \n       /** @brief Assignment from another type.\n        *\n        * @param __u  The object to transfer ownership from, which owns a\n        *             convertible pointer to an array object.\n        *\n-       * Invokes the deleter first if this object owns a pointer.\n+       * Invokes the deleter if this object owns a pointer.\n        */\n       template<typename _Up, typename _Ep>\n \ttypename\n@@ -638,11 +676,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       /// Release ownership of any stored pointer.\n       pointer\n       release() noexcept\n-      {\n-\tpointer __p = get();\n-\t_M_t._M_ptr() = pointer();\n-\treturn __p;\n-      }\n+      { return _M_t.release(); }\n \n       /** @brief Replace the stored pointer.\n        *\n@@ -664,18 +698,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n                >>\n       void\n       reset(_Up __p) noexcept\n-      {\n-\tpointer __ptr = __p;\n-\tusing std::swap;\n-\tswap(_M_t._M_ptr(), __ptr);\n-\tif (__ptr != nullptr)\n-\t  get_deleter()(__ptr);\n-      }\n+      { _M_t.reset(std::move(__p)); }\n \n       void reset(nullptr_t = nullptr) noexcept\n-      {\n-        reset(pointer());\n-      }\n+      { reset(pointer()); }\n \n       /// Exchange the pointer and deleter with another object.\n       void"}, {"sha": "eae06f93c345813efc8a80f965546b50324094c3", "filename": "libstdc++-v3/python/libstdcxx/v6/printers.py", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b18663e0fbd6e253feca9e1f29e6f5b5538408d/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b18663e0fbd6e253feca9e1f29e6f5b5538408d/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py?ref=1b18663e0fbd6e253feca9e1f29e6f5b5538408d", "patch": "@@ -182,7 +182,9 @@ class UniquePointerPrinter:\n     def __init__ (self, typename, val):\n         self.val = val\n         impl_type = val.type.fields()[0].type.tag\n-        if is_specialization_of(impl_type, '__uniq_ptr_impl'): # New implementation\n+        # Check for new implementations first:\n+        if is_specialization_of(impl_type, '__uniq_ptr_data') \\\n+            or is_specialization_of(impl_type, '__uniq_ptr_impl'):\n             self.pointer = val['_M_t']['_M_t']['_M_head_impl']\n         elif is_specialization_of(impl_type, 'tuple'):\n             self.pointer = val['_M_t']['_M_head_impl']"}, {"sha": "b528841c862595176bd3fcac98d07add3083b0ab", "filename": "libstdc++-v3/testsuite/20_util/unique_ptr/dr2899.cc", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b18663e0fbd6e253feca9e1f29e6f5b5538408d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fdr2899.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b18663e0fbd6e253feca9e1f29e6f5b5538408d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fdr2899.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fdr2899.cc?ref=1b18663e0fbd6e253feca9e1f29e6f5b5538408d", "patch": "@@ -0,0 +1,54 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+#include <memory>\n+\n+struct Del {\n+  Del() = default;\n+  Del(Del&&) = delete;\n+\n+  void operator()(int*) const;\n+};\n+\n+static_assert(!std::is_move_constructible<std::unique_ptr<int, Del>>::value);\n+static_assert(std::is_move_constructible<std::unique_ptr<int, Del&>>::value);\n+\n+struct Del2 {\n+  Del2() = default;\n+  Del2(Del2&&) = default;\n+  Del2& operator=(Del2&&) = delete;\n+  Del2& operator=(const Del2&) = default;\n+\n+  void operator()(int*) const;\n+};\n+\n+static_assert(!std::is_move_assignable<std::unique_ptr<int, Del2>>::value);\n+static_assert(std::is_move_assignable<std::unique_ptr<int, Del2&>>::value);\n+\n+struct Del3 {\n+  Del3() = default;\n+  Del3(Del3&&) = default;\n+  Del3& operator=(Del3&&) = default;\n+  Del3& operator=(const Del3&) = delete;\n+\n+  void operator()(int*) const;\n+};\n+\n+static_assert(std::is_move_assignable<std::unique_ptr<int, Del3>>::value);\n+static_assert(!std::is_move_assignable<std::unique_ptr<int, Del3&>>::value);"}]}