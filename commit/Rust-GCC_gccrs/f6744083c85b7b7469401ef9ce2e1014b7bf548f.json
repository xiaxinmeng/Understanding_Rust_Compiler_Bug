{"sha": "f6744083c85b7b7469401ef9ce2e1014b7bf548f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjY3NDQwODNjODViN2I3NDY5NDAxZWY5Y2UyZTEwMTRiN2JmNTQ4Zg==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2017-05-23T19:47:40Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2017-05-23T19:47:40Z"}, "message": "i386.md (*movdi_internal): Remove SSE4 alternative 18 (?r, *v).\n\n\t* config/i386/i386.md (*movdi_internal): Remove SSE4\n\talternative 18 (?r, *v).  Update insn attributes.\n\t(*movsi_internal): Remove SSE4 alternative 13 (?r, *v).\n\tUpdate insn attributes.\n\t(*zero_extendsidi2): Remove SSE4 alternative (?r, *x).\n\tUpdate insn attributes.\n\t* config/i386/sse.md (vec_extract<ssevecmodelower>_0): Remove SSE4\n\talternative 1 (r, v). Remove isa attribute.\n\t* config/i386/i386.c (dimode_scalar_chain::make_vector_copies):\n\tAlways move value through stack for !TARGET_INTER_UNIT_MOVES_TO_VEC\n\tand !TARGET_INTER_UNIT_MOVES_TO_VEC targets.\n\nFrom-SVN: r248383", "tree": {"sha": "46ee8b752ed5622d460b34ac18d3adbdad4f6b41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46ee8b752ed5622d460b34ac18d3adbdad4f6b41"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f6744083c85b7b7469401ef9ce2e1014b7bf548f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6744083c85b7b7469401ef9ce2e1014b7bf548f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6744083c85b7b7469401ef9ce2e1014b7bf548f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6744083c85b7b7469401ef9ce2e1014b7bf548f/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "aa7bda5f27458fd958226050a221713dc6a39d26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa7bda5f27458fd958226050a221713dc6a39d26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa7bda5f27458fd958226050a221713dc6a39d26"}], "stats": {"total": 167, "additions": 70, "deletions": 97}, "files": [{"sha": "95b47f764111b911a3fd82c5de6447ba26107111", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6744083c85b7b7469401ef9ce2e1014b7bf548f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6744083c85b7b7469401ef9ce2e1014b7bf548f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f6744083c85b7b7469401ef9ce2e1014b7bf548f", "patch": "@@ -1,3 +1,17 @@\n+2017-05-23  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (*movdi_internal): Remove SSE4\n+\talternative 18 (?r, *v).  Update insn attributes.\n+\t(*movsi_internal): Remove SSE4 alternative 13 (?r, *v).\n+\tUpdate insn attributes.\n+\t(*zero_extendsidi2): Remove SSE4 alternative (?r, *x).\n+\tUpdate insn attributes.\n+\t* config/i386/sse.md (vec_extract<ssevecmodelower>_0): Remove SSE4\n+\talternative 1 (r, v). Remove isa attribute.\n+\t* config/i386/i386.c (dimode_scalar_chain::make_vector_copies):\n+\tAlways move value through stack for !TARGET_INTER_UNIT_MOVES_TO_VEC\n+\tand !TARGET_INTER_UNIT_MOVES_TO_VEC targets.\n+\n 2017-05-23  Tom de Vries  <tom@codesourcery.com>\n \n \t* doc/sourcebuild.texi (Directives, Verify compiler message): Document"}, {"sha": "6413aa3685d66779dd219c6601c8ef48c808b698", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6744083c85b7b7469401ef9ce2e1014b7bf548f/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6744083c85b7b7469401ef9ce2e1014b7bf548f/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=f6744083c85b7b7469401ef9ce2e1014b7bf548f", "patch": "@@ -3881,6 +3881,15 @@ dimode_scalar_chain::make_vector_copies (unsigned regno)\n \n \t    emit_insn (gen_zero_extendsidi2 (vreg, tmp));\n \t  }\n+\telse if (!TARGET_INTER_UNIT_MOVES_TO_VEC)\n+\t  {\n+\t    rtx tmp = assign_386_stack_local (DImode, SLOT_STV_TEMP);\n+\t    emit_move_insn (adjust_address (tmp, SImode, 0),\n+\t\t\t    gen_rtx_SUBREG (SImode, reg, 0));\n+\t    emit_move_insn (adjust_address (tmp, SImode, 4),\n+\t\t\t    gen_rtx_SUBREG (SImode, reg, 4));\n+\t    emit_move_insn (vreg, tmp);\n+\t  }\n \telse if (TARGET_SSE4_1)\n \t  {\n \t    emit_insn (gen_sse2_loadld (gen_rtx_SUBREG (V4SImode, vreg, 0),\n@@ -3891,7 +3900,7 @@ dimode_scalar_chain::make_vector_copies (unsigned regno)\n \t\t\t\t\t  gen_rtx_SUBREG (SImode, reg, 4),\n \t\t\t\t\t  GEN_INT (2)));\n \t  }\n-\telse if (TARGET_INTER_UNIT_MOVES_TO_VEC)\n+\telse\n \t  {\n \t    rtx tmp = gen_reg_rtx (DImode);\n \t    emit_insn (gen_sse2_loadld (gen_rtx_SUBREG (V4SImode, vreg, 0),\n@@ -3905,15 +3914,6 @@ dimode_scalar_chain::make_vector_copies (unsigned regno)\n \t\t\tgen_rtx_SUBREG (V4SImode, vreg, 0),\n \t\t\tgen_rtx_SUBREG (V4SImode, tmp, 0)));\n \t  }\n-\telse\n-\t  {\n-\t    rtx tmp = assign_386_stack_local (DImode, SLOT_STV_TEMP);\n-\t    emit_move_insn (adjust_address (tmp, SImode, 0),\n-\t\t\t    gen_rtx_SUBREG (SImode, reg, 0));\n-\t    emit_move_insn (adjust_address (tmp, SImode, 4),\n-\t\t\t    gen_rtx_SUBREG (SImode, reg, 4));\n-\t    emit_move_insn (vreg, tmp);\n-\t  }\n \trtx_insn *seq = get_insns ();\n \tend_sequence ();\n \trtx_insn *insn = DF_REF_INSN (ref);\n@@ -3987,7 +3987,16 @@ dimode_scalar_chain::convert_reg (unsigned regno)\n       if (scalar_copy)\n \t{\n \t  start_sequence ();\n-\t  if (TARGET_SSE4_1)\n+\t  if (!TARGET_INTER_UNIT_MOVES_FROM_VEC)\n+\t    {\n+\t      rtx tmp = assign_386_stack_local (DImode, SLOT_STV_TEMP);\n+\t      emit_move_insn (tmp, reg);\n+\t      emit_move_insn (gen_rtx_SUBREG (SImode, scopy, 0),\n+\t\t\t      adjust_address (tmp, SImode, 0));\n+\t      emit_move_insn (gen_rtx_SUBREG (SImode, scopy, 4),\n+\t\t\t      adjust_address (tmp, SImode, 4));\n+\t    }\n+\t  else if (TARGET_SSE4_1)\n \t    {\n \t      rtx tmp = gen_rtx_PARALLEL (VOIDmode, gen_rtvec (1, const0_rtx));\n \t      emit_insn\n@@ -4003,7 +4012,7 @@ dimode_scalar_chain::convert_reg (unsigned regno)\n \t\t  gen_rtx_VEC_SELECT (SImode,\n \t\t\t\t      gen_rtx_SUBREG (V4SImode, reg, 0), tmp)));\n \t    }\n-\t  else if (TARGET_INTER_UNIT_MOVES_FROM_VEC)\n+\t  else\n \t    {\n \t      rtx vcopy = gen_reg_rtx (V2DImode);\n \t      emit_move_insn (vcopy, gen_rtx_SUBREG (V2DImode, reg, 0));\n@@ -4014,15 +4023,6 @@ dimode_scalar_chain::convert_reg (unsigned regno)\n \t      emit_move_insn (gen_rtx_SUBREG (SImode, scopy, 4),\n \t\t\t      gen_rtx_SUBREG (SImode, vcopy, 0));\n \t    }\n-\t  else\n-\t    {\n-\t      rtx tmp = assign_386_stack_local (DImode, SLOT_STV_TEMP);\n-\t      emit_move_insn (tmp, reg);\n-\t      emit_move_insn (gen_rtx_SUBREG (SImode, scopy, 0),\n-\t\t\t      adjust_address (tmp, SImode, 0));\n-\t      emit_move_insn (gen_rtx_SUBREG (SImode, scopy, 4),\n-\t\t\t      adjust_address (tmp, SImode, 4));\n-\t    }\n \t  rtx_insn *seq = get_insns ();\n \t  end_sequence ();\n \t  emit_conversion_insns (seq, insn);"}, {"sha": "140defae6e3b57dea06233712bed1f8c3e32c63f", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 32, "deletions": 72, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6744083c85b7b7469401ef9ce2e1014b7bf548f/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6744083c85b7b7469401ef9ce2e1014b7bf548f/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=f6744083c85b7b7469401ef9ce2e1014b7bf548f", "patch": "@@ -2147,9 +2147,9 @@\n \n (define_insn \"*movdi_internal\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\"\n-    \"=r  ,o  ,r,r  ,r,m ,*y,*y,?*y,?m,?r ,?*Ym,*v,*v,*v,m ,m,?r ,?r,?*Yi,?*Ym,?*Yi,*k,*k ,*r,*m\")\n+    \"=r  ,o  ,r,r  ,r,m ,*y,*y,?*y,?m,?r ,?*Ym,*v,*v,*v,m ,m,?r ,?*Yi,?*Ym,?*Yi,*k,*k ,*r,*m\")\n \t(match_operand:DI 1 \"general_operand\"\n-    \"riFo,riF,Z,rem,i,re,C ,*y,m  ,*y,*Yn,r   ,C ,*v,m ,*v,v,*Yj,*v,r   ,*Yj ,*Yn ,*r,*km,*k,*k\"))]\n+    \"riFo,riF,Z,rem,i,re,C ,*y,m  ,*y,*Yn,r   ,C ,*v,m ,*v,v,*Yj,r   ,*Yj ,*Yn ,*r,*km,*k,*k\"))]\n   \"!(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n {\n   switch (get_attr_type (insn))\n@@ -2171,9 +2171,6 @@\n       return \"movq\\t{%1, %0|%0, %1}\";\n \n     case TYPE_SSELOG1:\n-      if (GENERAL_REG_P (operands[0]))\n-\treturn \"%vpextrq\\t{$0, %1, %0|%0, %1, 0}\";\n-\n       return standard_sse_constant_opcode (insn, operands[1]);\n \n     case TYPE_SSEMOV:\n@@ -2227,10 +2224,8 @@\n   [(set (attr \"isa\")\n      (cond [(eq_attr \"alternative\" \"0,1\")\n \t      (const_string \"nox64\")\n-\t    (eq_attr \"alternative\" \"2,3,4,5,10,11,17,19,22,24\")\n+\t    (eq_attr \"alternative\" \"2,3,4,5,10,11,17,18,21,23\")\n \t      (const_string \"x64\")\n-\t    (eq_attr \"alternative\" \"18\")\n-\t      (const_string \"x64_sse4\")\n \t   ]\n \t   (const_string \"*\")))\n    (set (attr \"type\")\n@@ -2240,13 +2235,13 @@\n \t      (const_string \"mmx\")\n \t    (eq_attr \"alternative\" \"7,8,9,10,11\")\n \t      (const_string \"mmxmov\")\n-\t    (eq_attr \"alternative\" \"12,18\")\n+\t    (eq_attr \"alternative\" \"12\")\n \t      (const_string \"sselog1\")\n-\t    (eq_attr \"alternative\" \"13,14,15,16,17,19\")\n+\t    (eq_attr \"alternative\" \"13,14,15,16,17,18\")\n \t      (const_string \"ssemov\")\n-\t    (eq_attr \"alternative\" \"20,21\")\n+\t    (eq_attr \"alternative\" \"19,20\")\n \t      (const_string \"ssecvt\")\n-\t    (eq_attr \"alternative\" \"22,23,24,25\")\n+\t    (eq_attr \"alternative\" \"21,22,23,24\")\n \t      (const_string \"mskmov\")\n \t    (and (match_operand 0 \"register_operand\")\n \t\t (match_operand 1 \"pic_32bit_operand\"))\n@@ -2256,21 +2251,16 @@\n    (set (attr \"modrm\")\n      (if_then_else\n        (and (eq_attr \"alternative\" \"4\") (eq_attr \"type\" \"imov\"))\n-\t (const_string \"0\")\n-\t (const_string \"*\")))\n+       (const_string \"0\")\n+       (const_string \"*\")))\n    (set (attr \"length_immediate\")\n-     (cond [(and (eq_attr \"alternative\" \"4\") (eq_attr \"type\" \"imov\"))\n-\t      (const_string \"8\")\n-\t    (eq_attr \"alternative\" \"18\")\n-\t      (const_string \"1\")\n-\t   ]\n-\t   (const_string \"*\")))\n-   (set (attr \"prefix_rex\")\n-     (if_then_else (eq_attr \"alternative\" \"10,11,17,18,19\")\n-       (const_string \"1\")\n+     (if_then_else\n+       (and (eq_attr \"alternative\" \"4\") (eq_attr \"type\" \"imov\"))\n+       (const_string \"8\")\n        (const_string \"*\")))\n-   (set (attr \"prefix_extra\")\n-     (if_then_else (eq_attr \"alternative\" \"18\")\n+   (set (attr \"prefix_rex\")\n+     (if_then_else\n+       (eq_attr \"alternative\" \"10,11,17,18\")\n        (const_string \"1\")\n        (const_string \"*\")))\n    (set (attr \"prefix\")\n@@ -2301,8 +2291,6 @@\n \t    (and (eq_attr \"alternative\" \"14,15,16\")\n \t\t (not (match_test \"TARGET_SSE2\")))\n \t      (const_string \"V2SF\")\n-\t    (eq_attr \"alternative\" \"18\")\n-\t      (const_string \"TI\")\n \t   ]\n \t   (const_string \"DI\")))\n    (set (attr \"enabled\")\n@@ -2328,17 +2316,14 @@\n \n (define_insn \"*movsi_internal\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\"\n-    \"=r,m ,*y,*y,?*y,?m,?r ,?*Ym,*v,*v,*v,m ,?r ,?r,?*Yi,*k,*k ,*rm\")\n+    \"=r,m ,*y,*y,?*y,?m,?r ,?*Ym,*v,*v,*v,m ,?r ,?*Yi,*k,*k ,*rm\")\n \t(match_operand:SI 1 \"general_operand\"\n-    \"g ,re,C ,*y,m  ,*y,*Yn,r   ,C ,*v,m ,*v,*Yj,*v,r   ,*r,*km,*k\"))]\n+    \"g ,re,C ,*y,m  ,*y,*Yn,r   ,C ,*v,m ,*v,*Yj,r   ,*r,*km,*k\"))]\n   \"!(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n {\n   switch (get_attr_type (insn))\n     {\n     case TYPE_SSELOG1:\n-      if (GENERAL_REG_P (operands[0]))\n-\treturn \"%vpextrd\\t{$0, %1, %0|%0, %1, 0}\";\n-\n       return standard_sse_constant_opcode (insn, operands[1]);\n \n     case TYPE_MSKMOV:\n@@ -2394,34 +2379,22 @@\n       gcc_unreachable ();\n     }\n }\n-  [(set (attr \"isa\")\n-     (if_then_else (eq_attr \"alternative\" \"13\")\n-       (const_string \"sse4\")\n-       (const_string \"*\")))\n-   (set (attr \"type\")\n+  [(set (attr \"type\")\n      (cond [(eq_attr \"alternative\" \"2\")\n \t      (const_string \"mmx\")\n \t    (eq_attr \"alternative\" \"3,4,5,6,7\")\n \t      (const_string \"mmxmov\")\n-\t    (eq_attr \"alternative\" \"8,13\")\n+\t    (eq_attr \"alternative\" \"8\")\n \t      (const_string \"sselog1\")\n-\t    (eq_attr \"alternative\" \"9,10,11,12,14\")\n+\t    (eq_attr \"alternative\" \"9,10,11,12,13\")\n \t      (const_string \"ssemov\")\n-\t    (eq_attr \"alternative\" \"15,16,17\")\n+\t    (eq_attr \"alternative\" \"14,15,16\")\n \t      (const_string \"mskmov\")\n \t    (and (match_operand 0 \"register_operand\")\n \t\t (match_operand 1 \"pic_32bit_operand\"))\n \t      (const_string \"lea\")\n \t   ]\n \t   (const_string \"imov\")))\n-   (set (attr \"length_immediate\")\n-     (if_then_else (eq_attr \"alternative\" \"13\")\n-       (const_string \"1\")\n-       (const_string \"*\")))\n-   (set (attr \"prefix_extra\")\n-     (if_then_else (eq_attr \"alternative\" \"13\")\n-       (const_string \"1\")\n-       (const_string \"*\")))\n    (set (attr \"prefix\")\n      (if_then_else (eq_attr \"type\" \"sselog1,ssemov\")\n        (const_string \"maybe_vex\")\n@@ -2450,8 +2423,6 @@\n \t    (and (eq_attr \"alternative\" \"10,11\")\n \t         (not (match_test \"TARGET_SSE2\")))\n \t      (const_string \"SF\")\n-\t    (eq_attr \"alternative\" \"13\")\n-\t      (const_string \"TI\")\n \t   ]\n \t   (const_string \"SI\")))])\n \n@@ -3762,10 +3733,10 @@\n \n (define_insn \"*zero_extendsidi2\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\"\n-\t\t\"=r,?r,?o,r   ,o,?*Ym,?!*y,?r ,?r,?*Yi,*x,*x,*v,*r\")\n+\t\t\"=r,?r,?o,r   ,o,?*Ym,?!*y,?r ,?*Yi,*x,*x,*v,*r\")\n \t(zero_extend:DI\n \t (match_operand:SI 1 \"x86_64_zext_operand\"\n-\t        \"0 ,rm,r ,rmWz,0,r   ,m   ,*Yj,*x,r   ,m ,*x,*v,*k\")))]\n+\t        \"0 ,rm,r ,rmWz,0,r   ,m   ,*Yj,r   ,m ,*x,*v,*k\")))]\n   \"\"\n {\n   switch (get_attr_type (insn))\n@@ -3782,9 +3753,6 @@\n     case TYPE_MMXMOV:\n       return \"movd\\t{%1, %0|%0, %1}\";\n \n-    case TYPE_SSELOG1:\n-      return \"%vpextrd\\t{$0, %1, %k0|%k0, %1, 0}\";\n-\n     case TYPE_SSEMOV:\n       if (SSE_REG_P (operands[0]) && SSE_REG_P (operands[1]))\n \t{\n@@ -3812,15 +3780,13 @@\n \t      (const_string \"nox64\")\n \t    (eq_attr \"alternative\" \"3,7\")\n \t      (const_string \"x64\")\n-\t    (eq_attr \"alternative\" \"8\")\n-\t      (const_string \"x64_sse4\")\n-\t    (eq_attr \"alternative\" \"10\")\n+\t    (eq_attr \"alternative\" \"9\")\n \t      (const_string \"sse2\")\n-\t    (eq_attr \"alternative\" \"11\")\n+\t    (eq_attr \"alternative\" \"10\")\n \t      (const_string \"sse4\")\n-\t    (eq_attr \"alternative\" \"12\")\n+\t    (eq_attr \"alternative\" \"11\")\n \t      (const_string \"avx512f\")\n-\t    (eq_attr \"alternative\" \"13\")\n+\t    (eq_attr \"alternative\" \"12\")\n \t      (const_string \"x64_avx512bw\")\n \t   ]\n \t   (const_string \"*\")))\n@@ -3829,24 +3795,18 @@\n \t      (const_string \"multi\")\n \t    (eq_attr \"alternative\" \"5,6\")\n \t      (const_string \"mmxmov\")\n-\t    (eq_attr \"alternative\" \"7,9,10,11,12\")\n+\t    (eq_attr \"alternative\" \"7,8,9,10,11\")\n \t      (const_string \"ssemov\")\n-\t    (eq_attr \"alternative\" \"8\")\n-\t      (const_string \"sselog1\")\n-\t    (eq_attr \"alternative\" \"13\")\n+\t    (eq_attr \"alternative\" \"12\")\n \t      (const_string \"mskmov\")\n \t   ]\n \t   (const_string \"imovx\")))\n    (set (attr \"prefix_extra\")\n-     (if_then_else (eq_attr \"alternative\" \"8,11,12\")\n-       (const_string \"1\")\n-       (const_string \"*\")))\n-   (set (attr \"length_immediate\")\n-     (if_then_else (eq_attr \"alternative\" \"8\")\n+     (if_then_else (eq_attr \"alternative\" \"10,11\")\n        (const_string \"1\")\n        (const_string \"*\")))\n    (set (attr \"prefix\")\n-     (if_then_else (eq_attr \"type\" \"ssemov,sselog1\")\n+     (if_then_else (eq_attr \"type\" \"ssemov\")\n        (const_string \"maybe_vex\")\n        (const_string \"orig\")))\n    (set (attr \"prefix_0f\")\n@@ -3856,7 +3816,7 @@\n    (set (attr \"mode\")\n      (cond [(eq_attr \"alternative\" \"5,6\")\n \t      (const_string \"DI\")\n-\t    (eq_attr \"alternative\" \"7,8,9,11,12\")\n+\t    (eq_attr \"alternative\" \"7,8,10,11\")\n \t      (const_string \"TI\")\n \t   ]\n \t   (const_string \"SI\")))])"}, {"sha": "29a039d5b361509fdebce5555e5a8c3fd1fe10bd", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6744083c85b7b7469401ef9ce2e1014b7bf548f/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6744083c85b7b7469401ef9ce2e1014b7bf548f/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=f6744083c85b7b7469401ef9ce2e1014b7bf548f", "patch": "@@ -13529,13 +13529,12 @@\n   \"#\")\n \n (define_insn \"*vec_extract<ssevecmodelower>_0\"\n-  [(set (match_operand:SWI48 0 \"nonimmediate_operand\"\t       \"=r ,r,v ,m\")\n+  [(set (match_operand:SWI48 0 \"nonimmediate_operand\"\t       \"=r ,v ,m\")\n \t(vec_select:SWI48\n-\t  (match_operand:<ssevecmode> 1 \"nonimmediate_operand\" \"mYj,v,vm,v\")\n+\t  (match_operand:<ssevecmode> 1 \"nonimmediate_operand\" \"mYj,vm,v\")\n \t  (parallel [(const_int 0)])))]\n   \"TARGET_SSE && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n-  \"#\"\n-  [(set_attr \"isa\" \"*,sse4,*,*\")])\n+  \"#\")\n \n (define_insn \"*vec_extractv2di_0_sse\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\"     \"=v,m\")"}]}