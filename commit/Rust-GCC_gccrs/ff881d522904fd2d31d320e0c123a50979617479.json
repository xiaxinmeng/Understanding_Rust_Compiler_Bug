{"sha": "ff881d522904fd2d31d320e0c123a50979617479", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmY4ODFkNTIyOTA0ZmQyZDMxZDMyMGUwYzEyM2E1MDk3OTYxNzQ3OQ==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "joern.rennecke@superh.com", "date": "2002-10-31T12:53:06Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2002-10-31T12:53:06Z"}, "message": "sh.h (binary_logical_operator): Declare.\n\n\t* sh.h (binary_logical_operator): Declare.\n\t* sh.c (binary_logical_operator): New function.\n\t* sh.md (xordi3+1): New combiner splitter pattern.\n\nFrom-SVN: r58675", "tree": {"sha": "d503c78a995cd6c96064902035ad21801537af7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d503c78a995cd6c96064902035ad21801537af7b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff881d522904fd2d31d320e0c123a50979617479", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff881d522904fd2d31d320e0c123a50979617479", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff881d522904fd2d31d320e0c123a50979617479", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff881d522904fd2d31d320e0c123a50979617479/comments", "author": null, "committer": null, "parents": [{"sha": "e8e4c876bcf67039d8f9a8694a4cac4c82f1fb55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8e4c876bcf67039d8f9a8694a4cac4c82f1fb55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8e4c876bcf67039d8f9a8694a4cac4c82f1fb55"}], "stats": {"total": 53, "additions": 53, "deletions": 0}, "files": [{"sha": "95b754a64334b6d784268a2c3a72c1669f799407", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff881d522904fd2d31d320e0c123a50979617479/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff881d522904fd2d31d320e0c123a50979617479/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ff881d522904fd2d31d320e0c123a50979617479", "patch": "@@ -1,3 +1,9 @@\n+Thu Oct 31 12:45:55 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n+\n+\t* sh.h (binary_logical_operator): Declare.\n+\t* sh.c (binary_logical_operator): New function.\n+\t* sh.md (xordi3+1): New combiner splitter pattern.\n+\n 2002-10-31  David O'Brien  <obrien@FreeBSD.org>\n \n \t* config/sparc/freebsd.h (TRANSFER_FROM_TRAMPOLINE): Define"}, {"sha": "4e6981bfbe4b3676a3ca5c696534ee06f51a67f8", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff881d522904fd2d31d320e0c123a50979617479/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff881d522904fd2d31d320e0c123a50979617479/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=ff881d522904fd2d31d320e0c123a50979617479", "patch": "@@ -6176,6 +6176,25 @@ binary_float_operator (op, mode)\n   return 0;\n }\n \n+int\n+binary_logical_operator (op, mode)\n+     rtx op;\n+     enum machine_mode mode;\n+{\n+  if (GET_MODE (op) != mode)\n+    return 0;\n+  switch (GET_CODE (op))\n+    {\n+    case IOR:\n+    case AND:\n+    case XOR:\n+      return 1;\n+    default:\n+      break;\n+    }\n+  return 0;\n+}\n+\n int\n equality_comparison_operator (op, mode)\n      rtx op;"}, {"sha": "d0bbbdf0805cf1ba1f0cf570d857d922431fce3e", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff881d522904fd2d31d320e0c123a50979617479/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff881d522904fd2d31d320e0c123a50979617479/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=ff881d522904fd2d31d320e0c123a50979617479", "patch": "@@ -3225,6 +3225,7 @@ extern int rtx_equal_function_value_matters;\n   {\"arith_reg_operand\", {SUBREG, REG}},\t\t\t\t\t\\\n   {\"arith_reg_or_0_operand\", {SUBREG, REG, CONST_INT, CONST_VECTOR}},\t\\\n   {\"binary_float_operator\", {PLUS, MINUS, MULT, DIV}},\t\t\t\\\n+  {\"binary_logical_operator\", {AND, IOR, XOR}},\t\t\t\t\\\n   {\"commutative_float_operator\", {PLUS, MULT}},\t\t\t\t\\\n   {\"equality_comparison_operator\", {EQ,NE}},\t\t\t\t\\\n   {\"extend_reg_operand\", {SUBREG, REG, TRUNCATE}},\t\t\t\\"}, {"sha": "95b140658fe50000e9b5bd8bffdaac17549f6b31", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff881d522904fd2d31d320e0c123a50979617479/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff881d522904fd2d31d320e0c123a50979617479/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=ff881d522904fd2d31d320e0c123a50979617479", "patch": "@@ -2038,6 +2038,33 @@\n \txor\t%1, %2, %0\n \txori\t%1, %2, %0\"\n   [(set_attr \"type\" \"arith_media\")])\n+\n+;; Combiner bridge pattern for 2 * sign extend -> logical op -> truncate.\n+;; converts 2 * sign extend -> logical op into logical op -> sign extend\n+(define_split\n+  [(set (match_operand:DI 0 \"arith_reg_operand\" \"\")\n+\t(sign_extend:DI (match_operator 4 \"binary_logical_operator\"\n+\t\t\t  [(match_operand 1 \"any_register_operand\" \"\")\n+\t\t\t   (match_operand 2 \"any_register_operand\" \"\")])))]\n+  \"TARGET_SHMEDIA\"\n+  [(set (match_dup 5) (match_dup 4))\n+   (set (match_dup 0) (sign_extend:DI (match_dup 5)))]\n+\"\n+{\n+  enum machine_mode inmode = GET_MODE (operands[1]);\n+  int regno, offset = 0;\n+\n+  if (GET_CODE (operands[0]) == SUBREG)\n+    {\n+      offset = SUBREG_BYTE (operands[0]);\n+      operands[0] = SUBREG_REG (operands[0]);\n+    }\n+  if (GET_CODE (operands[0]) != REG)\n+    abort ();\n+  if (! TARGET_LITTLE_ENDIAN)\n+    offset += 8 - GET_MODE_SIZE (inmode);\n+  operands[5] = gen_rtx_SUBREG (inmode, operands[0], offset);\n+}\")\n \f\n ;; -------------------------------------------------------------------------\n ;; Shifts and rotates"}]}