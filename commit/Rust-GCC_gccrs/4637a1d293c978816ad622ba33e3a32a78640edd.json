{"sha": "4637a1d293c978816ad622ba33e3a32a78640edd", "node_id": "C_kwDOANBUbNoAKDQ2MzdhMWQyOTNjOTc4ODE2YWQ2MjJiYTMzZTNhMzJhNzg2NDBlZGQ", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2022-08-31T17:15:20Z"}, "committer": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gmail.com", "date": "2022-09-19T11:03:28Z"}, "message": "Fortran: F2018 rounding modes changes\n\nAdd the new IEEE_AWAY rounding mode. It is unsupported on all known\ntargets, but could be supported by glibc and AIX as part of the C2x\nproposal. Testing for now is minimal.\n\nAdd the optional RADIX argument to IEEE_SET_ROUNDING_MODE and\nIEEE_GET_ROUNDING_MODE. It is unused for now, because we do not\nsupport radices other than 2.\n\n2022-08-31  Francois-Xavier Coudert <fxcoudert@gcc.gnu.org>\n\ngcc/fortran/\n\t* libgfortran.h: Declare GFC_FPE_AWAY.\n\ngcc/testsuite/\n\t* gfortran.dg/ieee/rounding_2.f90: New test.\n\nlibgfortran/\n\t* ieee/ieee_arithmetic.F90: Add RADIX argument to\n\tIEEE_SET_ROUNDING_MODE and IEEE_GET_ROUNDING_MODE.\n\t* config/fpu-387.h: Add IEEE_AWAY mode.\n\t* config/fpu-aarch64.h: Add IEEE_AWAY mode.\n\t* config/fpu-aix.h: Add IEEE_AWAY mode.\n\t* config/fpu-generic.h: Add IEEE_AWAY mode.\n\t* config/fpu-glibc.h: Add IEEE_AWAY mode.\n\t* config/fpu-sysv.h: Add IEEE_AWAY mode.", "tree": {"sha": "f7ab4b7bcfe646712d86ef182fa888f5783c65ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f7ab4b7bcfe646712d86ef182fa888f5783c65ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4637a1d293c978816ad622ba33e3a32a78640edd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4637a1d293c978816ad622ba33e3a32a78640edd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4637a1d293c978816ad622ba33e3a32a78640edd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4637a1d293c978816ad622ba33e3a32a78640edd/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b5b8ac5cb7fe92dd17ae8bd7de84640daa59e84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b5b8ac5cb7fe92dd17ae8bd7de84640daa59e84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b5b8ac5cb7fe92dd17ae8bd7de84640daa59e84"}], "stats": {"total": 100, "additions": 88, "deletions": 12}, "files": [{"sha": "79a8c2ff450345ab65420490dfb0d211ee57eea6", "filename": "gcc/fortran/libgfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4637a1d293c978816ad622ba33e3a32a78640edd/gcc%2Ffortran%2Flibgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4637a1d293c978816ad622ba33e3a32a78640edd/gcc%2Ffortran%2Flibgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Flibgfortran.h?ref=4637a1d293c978816ad622ba33e3a32a78640edd", "patch": "@@ -60,6 +60,7 @@ along with GCC; see the file COPYING3.  If not see\n #define GFC_FPE_TONEAREST  2\n #define GFC_FPE_TOWARDZERO 3\n #define GFC_FPE_UPWARD     4\n+#define GFC_FPE_AWAY       5\n \n /* Size of the buffer required to store FPU state for any target.\n    In particular, this has to be larger than fenv_t on all glibc targets."}, {"sha": "8af6c9182f4544cab4f2715356758be8320602d6", "filename": "gcc/testsuite/gfortran.dg/ieee/rounding_2.f90", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4637a1d293c978816ad622ba33e3a32a78640edd/gcc%2Ftestsuite%2Fgfortran.dg%2Fieee%2Frounding_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4637a1d293c978816ad622ba33e3a32a78640edd/gcc%2Ftestsuite%2Fgfortran.dg%2Fieee%2Frounding_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fieee%2Frounding_2.f90?ref=4637a1d293c978816ad622ba33e3a32a78640edd", "patch": "@@ -0,0 +1,20 @@\n+! { dg-do run }\n+\n+  use, intrinsic :: ieee_arithmetic\n+  implicit none\n+\n+  real :: sx1, sx2, sx3\n+  double precision :: dx1, dx2, dx3\n+\n+  ! IEEE_AWAY was added in Fortran 2018 and not supported by any target\n+  ! at the moment. Just check we can query for its support.\n+\n+  ! We should support at least C float and C double types\n+  if (ieee_support_rounding(ieee_away) &\n+      .or. ieee_support_rounding(ieee_away, 0.) &\n+      .or. ieee_support_rounding(ieee_away, 0.d0)) then\n+    print *, \"If a target / libc now supports this, we need to add a proper check!\"\n+    stop 1\n+  end if\n+\n+end"}, {"sha": "e2f4a7d3fbfd4bd3c6b057598c760e26a9c5b4f8", "filename": "libgfortran/config/fpu-387.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4637a1d293c978816ad622ba33e3a32a78640edd/libgfortran%2Fconfig%2Ffpu-387.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4637a1d293c978816ad622ba33e3a32a78640edd/libgfortran%2Fconfig%2Ffpu-387.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfig%2Ffpu-387.h?ref=4637a1d293c978816ad622ba33e3a32a78640edd", "patch": "@@ -418,9 +418,12 @@ get_fpu_rounding_mode (void)\n }\n \n int\n-support_fpu_rounding_mode (int mode __attribute__((unused)))\n+support_fpu_rounding_mode (int mode)\n {\n-  return 1;\n+  if (mode == GFC_FPE_AWAY)\n+    return 0;\n+  else\n+    return 1;\n }\n \n void"}, {"sha": "47893908f604fc6361ab8ee5392902a08a49f8ae", "filename": "libgfortran/config/fpu-aarch64.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4637a1d293c978816ad622ba33e3a32a78640edd/libgfortran%2Fconfig%2Ffpu-aarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4637a1d293c978816ad622ba33e3a32a78640edd/libgfortran%2Fconfig%2Ffpu-aarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfig%2Ffpu-aarch64.h?ref=4637a1d293c978816ad622ba33e3a32a78640edd", "patch": "@@ -293,9 +293,12 @@ set_fpu_rounding_mode (int round)\n \n \n int\n-support_fpu_rounding_mode (int mode __attribute__((unused)))\n+support_fpu_rounding_mode (int mode)\n {\n-  return 1;\n+  if (mode == GFC_FPE_AWAY)\n+    return 0;\n+  else\n+    return 1;\n }\n \n "}, {"sha": "fb1ac809f035149eb1b1f269ca48c0a98c0e5bcb", "filename": "libgfortran/config/fpu-aix.h", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4637a1d293c978816ad622ba33e3a32a78640edd/libgfortran%2Fconfig%2Ffpu-aix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4637a1d293c978816ad622ba33e3a32a78640edd/libgfortran%2Fconfig%2Ffpu-aix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfig%2Ffpu-aix.h?ref=4637a1d293c978816ad622ba33e3a32a78640edd", "patch": "@@ -320,6 +320,11 @@ get_fpu_rounding_mode (void)\n \treturn GFC_FPE_TOWARDZERO;\n #endif\n \n+#ifdef FE_TONEARESTFROMZERO\n+      case FE_TONEARESTFROMZERO:\n+\treturn GFC_FPE_AWAY;\n+#endif\n+\n       default:\n \treturn 0; /* Should be unreachable.  */\n     }\n@@ -357,8 +362,14 @@ set_fpu_rounding_mode (int mode)\n \tbreak;\n #endif\n \n+#ifdef FE_TONEARESTFROMZERO\n+      case GFC_FPE_AWAY:\n+\trnd_mode = FE_TONEARESTFROMZERO;\n+\tbreak;\n+#endif\n+\n       default:\n-\treturn; /* Should be unreachable.  */\n+\treturn;\n     }\n \n   fesetround (rnd_mode);\n@@ -398,8 +409,15 @@ support_fpu_rounding_mode (int mode)\n \treturn 0;\n #endif\n \n+      case GFC_FPE_AWAY:\n+#ifdef FE_TONEARESTFROMZERO\n+\treturn 1;\n+#else\n+\treturn 0;\n+#endif\n+\n       default:\n-\treturn 0; /* Should be unreachable.  */\n+\treturn 0;\n     }\n }\n "}, {"sha": "9e976a8ded860a36bb8cd77ef95ce80ae0c31924", "filename": "libgfortran/config/fpu-generic.h", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4637a1d293c978816ad622ba33e3a32a78640edd/libgfortran%2Fconfig%2Ffpu-generic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4637a1d293c978816ad622ba33e3a32a78640edd/libgfortran%2Fconfig%2Ffpu-generic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfig%2Ffpu-generic.h?ref=4637a1d293c978816ad622ba33e3a32a78640edd", "patch": "@@ -66,9 +66,16 @@ get_fpu_except_flags (void)\n \n int\n get_fpu_rounding_mode (void)\n-{   \n+{\n+  return 0;\n+}\n+\n+\n+int\n+support_fpu_rounding_mode (int mode __attribute__((unused)))\n+{\n   return 0;\n-}               \n+}\n \n \n void"}, {"sha": "f34b696a5f744ea95d1b22c72d171374bf3b43a2", "filename": "libgfortran/config/fpu-glibc.h", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4637a1d293c978816ad622ba33e3a32a78640edd/libgfortran%2Fconfig%2Ffpu-glibc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4637a1d293c978816ad622ba33e3a32a78640edd/libgfortran%2Fconfig%2Ffpu-glibc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfig%2Ffpu-glibc.h?ref=4637a1d293c978816ad622ba33e3a32a78640edd", "patch": "@@ -342,6 +342,11 @@ get_fpu_rounding_mode (void)\n \treturn GFC_FPE_TOWARDZERO;\n #endif\n \n+#ifdef FE_TONEARESTFROMZERO\n+      case FE_TONEARESTFROMZERO:\n+\treturn GFC_FPE_AWAY;\n+#endif\n+\n       default:\n \treturn 0; /* Should be unreachable.  */\n     }\n@@ -379,6 +384,12 @@ set_fpu_rounding_mode (int mode)\n \tbreak;\n #endif\n \n+#ifdef FE_TONEARESTFROMZERO\n+      case GFC_FPE_AWAY:\n+\trnd_mode = FE_TONEARESTFROMZERO;\n+\tbreak;\n+#endif\n+\n       default:\n \treturn; /* Should be unreachable.  */\n     }\n@@ -420,6 +431,13 @@ support_fpu_rounding_mode (int mode)\n \treturn 0;\n #endif\n \n+      case GFC_FPE_AWAY:\n+#ifdef FE_TONEARESTFROMZERO\n+\treturn 1;\n+#else\n+\treturn 0;\n+#endif\n+\n       default:\n \treturn 0; /* Should be unreachable.  */\n     }"}, {"sha": "4681322ae9b2d2b2c052f74a9c30c87390090ebe", "filename": "libgfortran/config/fpu-sysv.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4637a1d293c978816ad622ba33e3a32a78640edd/libgfortran%2Fconfig%2Ffpu-sysv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4637a1d293c978816ad622ba33e3a32a78640edd/libgfortran%2Fconfig%2Ffpu-sysv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfig%2Ffpu-sysv.h?ref=4637a1d293c978816ad622ba33e3a32a78640edd", "patch": "@@ -374,9 +374,12 @@ set_fpu_rounding_mode (int mode)\n \n \n int\n-support_fpu_rounding_mode (int mode __attribute__((unused)))\n+support_fpu_rounding_mode (int mode)\n {\n-  return 1;\n+  if (mode == GFC_FPE_AWAY)\n+    return 0;\n+  else\n+    return 1;\n }\n \n "}, {"sha": "7dce37a509997b3dd22621f2995815f398f507a3", "filename": "libgfortran/ieee/ieee_arithmetic.F90", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4637a1d293c978816ad622ba33e3a32a78640edd/libgfortran%2Fieee%2Fieee_arithmetic.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4637a1d293c978816ad622ba33e3a32a78640edd/libgfortran%2Fieee%2Fieee_arithmetic.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fieee%2Fieee_arithmetic.F90?ref=4637a1d293c978816ad622ba33e3a32a78640edd", "patch": "@@ -73,6 +73,7 @@ module IEEE_ARITHMETIC\n     IEEE_TO_ZERO           = IEEE_ROUND_TYPE(GFC_FPE_TOWARDZERO), &\n     IEEE_UP                = IEEE_ROUND_TYPE(GFC_FPE_UPWARD), &\n     IEEE_DOWN              = IEEE_ROUND_TYPE(GFC_FPE_DOWNWARD), &\n+    IEEE_AWAY              = IEEE_ROUND_TYPE(GFC_FPE_AWAY), &\n     IEEE_OTHER             = IEEE_ROUND_TYPE(0)\n \n \n@@ -1044,9 +1045,10 @@ elemental real(kind=16) function IEEE_VALUE_16(X, CLASS) result(res)\n \n   ! IEEE_GET_ROUNDING_MODE\n \n-  subroutine IEEE_GET_ROUNDING_MODE (ROUND_VALUE)\n+  subroutine IEEE_GET_ROUNDING_MODE (ROUND_VALUE, RADIX)\n     implicit none\n     type(IEEE_ROUND_TYPE), intent(out) :: ROUND_VALUE\n+    integer, intent(in), optional :: RADIX\n \n     interface\n       integer function helper() &\n@@ -1060,9 +1062,10 @@ integer function helper() &\n \n   ! IEEE_SET_ROUNDING_MODE\n \n-  subroutine IEEE_SET_ROUNDING_MODE (ROUND_VALUE)\n+  subroutine IEEE_SET_ROUNDING_MODE (ROUND_VALUE, RADIX)\n     implicit none\n     type(IEEE_ROUND_TYPE), intent(in) :: ROUND_VALUE\n+    integer, intent(in), optional :: RADIX\n \n     interface\n       subroutine helper(val) &"}]}