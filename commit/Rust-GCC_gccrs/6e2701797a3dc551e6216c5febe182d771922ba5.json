{"sha": "6e2701797a3dc551e6216c5febe182d771922ba5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmUyNzAxNzk3YTNkYzU1MWU2MjE2YzVmZWJlMTgyZDc3MTkyMmJhNQ==", "commit": {"author": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2003-05-11T13:43:36Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2003-05-11T13:43:36Z"}, "message": "c-cppbuiltin.c (c_cpp_builtins): Move __STDC_HOSTED__ into cpplib as it's a Standard Predefined Macro.\n\n\t* c-cppbuiltin.c (c_cpp_builtins): Move __STDC_HOSTED__ into\n\tcpplib as it's a Standard Predefined Macro.\n\t* c-opts.c (finish_options): Pass flag_hosted to cpp_init_builtins.\n\t* cppinit.c (_cpp_init_builtins): Take HOSTED.  Define\n\t__STDC_HOSTED__ appropriately.\n\t* cpplib.h (_cpp_init_builtins): Update.\n\t* fix-header.c (read_scan_file): Update.\n\t* doc/cpp.texi, doc/cppopts.texi: Update documentation.\n\t* cppfiles.c (find_or_create_entry): Preserve errno.\n\nFrom-SVN: r66688", "tree": {"sha": "7cab977994e83b118651dd8ede9739970a4c0152", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7cab977994e83b118651dd8ede9739970a4c0152"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e2701797a3dc551e6216c5febe182d771922ba5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e2701797a3dc551e6216c5febe182d771922ba5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e2701797a3dc551e6216c5febe182d771922ba5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e2701797a3dc551e6216c5febe182d771922ba5/comments", "author": null, "committer": null, "parents": [{"sha": "8af992ea30b76cc71f3d57f90c005ed2d3671ff3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8af992ea30b76cc71f3d57f90c005ed2d3671ff3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8af992ea30b76cc71f3d57f90c005ed2d3671ff3"}], "stats": {"total": 70, "additions": 47, "deletions": 23}, "files": [{"sha": "514e2d2e22b2860776b2fcd9b1fb78bc2d5ef892", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e2701797a3dc551e6216c5febe182d771922ba5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e2701797a3dc551e6216c5febe182d771922ba5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6e2701797a3dc551e6216c5febe182d771922ba5", "patch": "@@ -1,3 +1,18 @@\n+2003-05-11  Bruno Haible  <bruno@clisp.org>\n+\t\n+\t* cppfiles.c (find_or_create_entry): Preserve errno.\n+\n+2003-05-11  Neil Booth  <neil@cat.daikokuya.co.uk>\n+\n+\t* c-cppbuiltin.c (c_cpp_builtins): Move __STDC_HOSTED__ into\n+\tcpplib as it's a Standard Predefined Macro.\n+\t* c-opts.c (finish_options): Pass flag_hosted to cpp_init_builtins.\n+\t* cppinit.c (_cpp_init_builtins): Take HOSTED.  Define\n+\t__STDC_HOSTED__ appropriately.\n+\t* cpplib.h (_cpp_init_builtins): Update.\n+\t* fix-header.c (read_scan_file): Update.\n+\t* doc/cpp.texi, doc/cppopts.texi: Update documentation.\n+\n 2003-05-11  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n \tPR C++/689"}, {"sha": "9cb1b4efb52bb5ede4e45bb988c5d0fb8583f351", "filename": "gcc/c-cppbuiltin.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e2701797a3dc551e6216c5febe182d771922ba5/gcc%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e2701797a3dc551e6216c5febe182d771922ba5/gcc%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-cppbuiltin.c?ref=6e2701797a3dc551e6216c5febe182d771922ba5", "patch": "@@ -355,11 +355,6 @@ c_cpp_builtins (pfile)\n   if (optimize)\n     cpp_define (pfile, \"__OPTIMIZE__\");\n \n-  if (flag_hosted)\n-    cpp_define (pfile, \"__STDC_HOSTED__=1\");\n-  else\n-    cpp_define (pfile, \"__STDC_HOSTED__=0\");\n-\n   if (fast_math_flags_set_p ())\n     cpp_define (pfile, \"__FAST_MATH__\");\n   if (flag_really_no_inline)"}, {"sha": "23ed899ae18d0db83bc1d8ffa940d2adbaa4ed5c", "filename": "gcc/c-opts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e2701797a3dc551e6216c5febe182d771922ba5/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e2701797a3dc551e6216c5febe182d771922ba5/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=6e2701797a3dc551e6216c5febe182d771922ba5", "patch": "@@ -1789,7 +1789,7 @@ finish_options ()\n       size_t i;\n \n       cpp_change_file (parse_in, LC_RENAME, _(\"<built-in>\"));\n-      cpp_init_builtins (parse_in);\n+      cpp_init_builtins (parse_in, flag_hosted);\n       c_cpp_builtins (parse_in);\n       cpp_change_file (parse_in, LC_RENAME, _(\"<command line>\"));\n       for (i = 0; i < deferred_count; i++)"}, {"sha": "66865af26516744813163d63cb0339e63a8a366d", "filename": "gcc/cppfiles.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e2701797a3dc551e6216c5febe182d771922ba5/gcc%2Fcppfiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e2701797a3dc551e6216c5febe182d771922ba5/gcc%2Fcppfiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppfiles.c?ref=6e2701797a3dc551e6216c5febe182d771922ba5", "patch": "@@ -174,8 +174,10 @@ find_or_create_entry (pfile, fname)\n   splay_tree_node node;\n   struct include_file *file;\n   char *name = xstrdup (fname);\n+  int saved_errno;\n \n   cpp_simplify_path (name);\n+  saved_errno = errno;\n   node = splay_tree_lookup (pfile->all_include_files, (splay_tree_key) name);\n   if (node)\n     free (name);\n@@ -184,7 +186,7 @@ find_or_create_entry (pfile, fname)\n       file = xcnew (struct include_file);\n       file->name = name;\n       file->header_name = name;\n-      file->err_no = errno;\n+      file->err_no = saved_errno;\n       node = splay_tree_insert (pfile->all_include_files,\n \t\t\t\t(splay_tree_key) file->name,\n \t\t\t\t(splay_tree_value) file);"}, {"sha": "96ac9a46bd2aaa8de7e57d1f7e1f9cc4bc250dc2", "filename": "gcc/cppinit.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e2701797a3dc551e6216c5febe182d771922ba5/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e2701797a3dc551e6216c5febe182d771922ba5/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=6e2701797a3dc551e6216c5febe182d771922ba5", "patch": "@@ -327,10 +327,12 @@ mark_named_operators (pfile)\n }\n \n /* Read the builtins table above and enter them, and language-specific\n-   macros, into the hash table.  */\n+   macros, into the hash table.  HOSTED is true if this is a hosted\n+   environment.  */\n void\n-cpp_init_builtins (pfile)\n+cpp_init_builtins (pfile, hosted)\n      cpp_reader *pfile;\n+     int hosted;\n {\n   const struct builtin *b;\n   size_t n = ARRAY_SIZE (builtin_array);\n@@ -355,6 +357,11 @@ cpp_init_builtins (pfile)\n   else if (CPP_OPTION (pfile, c99))\n     _cpp_define_builtin (pfile, \"__STDC_VERSION__ 199901L\");\n \n+  if (hosted)\n+    cpp_define (pfile, \"__STDC_HOSTED__=1\");\n+  else\n+    cpp_define (pfile, \"__STDC_HOSTED__=0\");\n+\n   if (CPP_OPTION (pfile, objc))\n     _cpp_define_builtin (pfile, \"__OBJC__ 1\");\n }"}, {"sha": "a47a7fbf077fd1e0982b220359e28feef3fe6177", "filename": "gcc/cpplib.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e2701797a3dc551e6216c5febe182d771922ba5/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e2701797a3dc551e6216c5febe182d771922ba5/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=6e2701797a3dc551e6216c5febe182d771922ba5", "patch": "@@ -526,7 +526,7 @@ extern void cpp_set_callbacks PARAMS ((cpp_reader *, cpp_callbacks *));\n extern const char *cpp_read_main_file PARAMS ((cpp_reader *, const char *));\n \n /* Set up built-ins like __FILE__.  */\n-extern void cpp_init_builtins PARAMS ((cpp_reader *));\n+extern void cpp_init_builtins PARAMS ((cpp_reader *, int));\n \n /* Call this to finish preprocessing.  If you requested dependency\n    generation, pass an open stream to write the information to,"}, {"sha": "336cc47706bf1aefb1466beb75123a17e95a508a", "filename": "gcc/doc/cpp.texi", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e2701797a3dc551e6216c5febe182d771922ba5/gcc%2Fdoc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e2701797a3dc551e6216c5febe182d771922ba5/gcc%2Fdoc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp.texi?ref=6e2701797a3dc551e6216c5febe182d771922ba5", "patch": "@@ -264,15 +264,14 @@ complete support for international character sets in a future release.\n \n Different systems use different conventions to indicate the end of a\n line.  GCC accepts the ASCII control sequences @kbd{LF}, @kbd{@w{CR\n-LF}}, @kbd{CR}, and @kbd{@w{LF CR}} as end-of-line markers.  The first\n-three are the canonical sequences used by Unix, DOS and VMS, and the\n+LF}}, @kbd{CR} as end-of-line markers.  These\n+are the canonical sequences used by Unix, DOS and VMS, and the\n classic Mac OS (before OSX) respectively.  You may therefore safely copy\n source code written on any of those systems to a different one and use\n it without conversion.  (GCC may lose track of the current line number\n if a file doesn't consistently use one convention, as sometimes happens\n when it is edited on computers with different conventions that share a\n-network file system.)  @kbd{@w{LF CR}} is included because it has been\n-reported as an end-of-line marker under exotic conditions.\n+network file system.)\n \n If the last line of any input file lacks an end-of-line marker, the end\n of the file is considered to implicitly supply one.  The C standard says\n@@ -1733,7 +1732,7 @@ predefined macros, but you cannot undefine them.\n @subsection Standard Predefined Macros\n @cindex standard predefined macros.\n \n-The standard predefined macros are specified by the C and/or C++\n+The standard predefined macros are specified by the relevant\n language standards, so they are available with all compilers that\n implement those standards.  Older compilers may not provide all of\n them.  Their names all start with double underscores.\n@@ -1852,6 +1851,14 @@ of the 1998 C++ standard will define this macro to @code{199711L}.  The\n GNU C++ compiler is not yet fully conforming, so it uses @code{1}\n instead.  We hope to complete our implementation in the near future.\n \n+@item __OBJC__\n+This macro is defined, with value 1, when the Objective-C compiler is in\n+use.  You can use @code{__OBJC__} to test whether a header is compiled\n+by a C compiler or a Objective-C compiler.\n+\n+@item __ASSEMBLER__\n+This macro is defined with value 1 when preprocessing assembler.\n+\n @end table\n \n @node Common Predefined Macros\n@@ -1913,11 +1920,6 @@ calculate a single number, then compare that against a threshold:\n @noindent\n Many people find this form easier to understand.\n \n-@item __OBJC__\n-This macro is defined, with value 1, when the Objective-C compiler is in\n-use.  You can use @code{__OBJC__} to test whether a header is compiled\n-by a C compiler or a Objective-C compiler.\n-\n @item __GNUG__\n The GNU C++ compiler defines this.  Testing it is equivalent to\n testing @code{@w{(__GNUC__ && __cplusplus)}}."}, {"sha": "4c98c322f841960c9ac3d7864b339d6280b6de28", "filename": "gcc/doc/cppopts.texi", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e2701797a3dc551e6216c5febe182d771922ba5/gcc%2Fdoc%2Fcppopts.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e2701797a3dc551e6216c5febe182d771922ba5/gcc%2Fdoc%2Fcppopts.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppopts.texi?ref=6e2701797a3dc551e6216c5febe182d771922ba5", "patch": "@@ -40,8 +40,11 @@ provided with a @option{-D} option.\n \n @item -undef\n @opindex undef\n-Do not predefine any system-specific macros.  The common predefined\n-macros remain defined.\n+Do not predefine any system-specific or GCC-specific macros.  The\n+standard predefined macros remain defined.\n+@ifset cppmanual\n+@xref{Standard Predefined Macros}\n+@end ifset\n \n @item -I @var{dir}\n @opindex I"}, {"sha": "c34d3c3e3be3a2800df57a023a5710a4d90774c4", "filename": "gcc/fix-header.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e2701797a3dc551e6216c5febe182d771922ba5/gcc%2Ffix-header.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e2701797a3dc551e6216c5febe182d771922ba5/gcc%2Ffix-header.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffix-header.c?ref=6e2701797a3dc551e6216c5febe182d771922ba5", "patch": "@@ -636,7 +636,7 @@ read_scan_file (in_fname, argc, argv)\n     exit (FATAL_EXIT_CODE);\n \n   cpp_change_file (scan_in, LC_RENAME, \"<built-in>\");\n-  cpp_init_builtins (scan_in);\n+  cpp_init_builtins (scan_in, true);\n   cpp_change_file (scan_in, LC_RENAME, in_fname);\n \n   /* Process switches after builtins so -D can override them.  */"}]}