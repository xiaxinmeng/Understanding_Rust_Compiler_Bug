{"sha": "4d4a0aa42322c84b472c299f4e33c0044650cc2e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGQ0YTBhYTQyMzIyYzg0YjQ3MmMyOTlmNGUzM2MwMDQ0NjUwY2MyZQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-07-14T15:11:13Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-07-14T15:20:38Z"}, "message": "c++: Refactor some class fns\n\nStoring CLASSTYPE_AS_BASE in a local variable makes some code clearer\n(and textually no longer).  For some reason we store a DECL in a variable\ncalled 'value', which is confusing.\n\n\tgcc/cp/\n\t* class.c (build_base_field_1): Cache CLASSTYPE_AS_BASE.\n\t(build_self_reference): Rename value -> decl.\n\t(dump_class_hierarchy_1): Cache CLASSTYPE_AS_BASE.", "tree": {"sha": "9cd4708a575d275954fcde727770fd161dbceb4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9cd4708a575d275954fcde727770fd161dbceb4f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d4a0aa42322c84b472c299f4e33c0044650cc2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d4a0aa42322c84b472c299f4e33c0044650cc2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d4a0aa42322c84b472c299f4e33c0044650cc2e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d4a0aa42322c84b472c299f4e33c0044650cc2e/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f97bed9a7989e14cbb53e405fbd8b3c08aa75ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f97bed9a7989e14cbb53e405fbd8b3c08aa75ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f97bed9a7989e14cbb53e405fbd8b3c08aa75ec"}], "stats": {"total": 33, "additions": 17, "deletions": 16}, "files": [{"sha": "803b33bf346a6476c5e3311c31b66c740d674c2b", "filename": "gcc/cp/class.c", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d4a0aa42322c84b472c299f4e33c0044650cc2e/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d4a0aa42322c84b472c299f4e33c0044650cc2e/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=4d4a0aa42322c84b472c299f4e33c0044650cc2e", "patch": "@@ -4456,9 +4456,10 @@ build_base_field_1 (tree t, tree binfo, tree access, tree *&next_field)\n {\n   /* Create the FIELD_DECL.  */\n   tree basetype = BINFO_TYPE (binfo);\n-  gcc_assert (CLASSTYPE_AS_BASE (basetype));\n-  tree decl = build_decl (input_location,\n-\t\t\t  FIELD_DECL, NULL_TREE, CLASSTYPE_AS_BASE (basetype));\n+  tree as_base = CLASSTYPE_AS_BASE (basetype);\n+  gcc_assert (as_base);\n+  tree decl = build_decl (input_location, FIELD_DECL, NULL_TREE, as_base);\n+\n   DECL_ARTIFICIAL (decl) = 1;\n   DECL_IGNORED_P (decl) = 1;\n   DECL_FIELD_CONTEXT (decl) = t;\n@@ -8678,20 +8679,20 @@ void\n build_self_reference (void)\n {\n   tree name = DECL_NAME (TYPE_NAME (current_class_type));\n-  tree value = build_lang_decl (TYPE_DECL, name, current_class_type);\n+  tree decl = build_lang_decl (TYPE_DECL, name, current_class_type);\n \n-  DECL_NONLOCAL (value) = 1;\n-  DECL_CONTEXT (value) = current_class_type;\n-  DECL_ARTIFICIAL (value) = 1;\n-  SET_DECL_SELF_REFERENCE_P (value);\n-  set_underlying_type (value);\n+  DECL_NONLOCAL (decl) = 1;\n+  DECL_CONTEXT (decl) = current_class_type;\n+  DECL_ARTIFICIAL (decl) = 1;\n+  SET_DECL_SELF_REFERENCE_P (decl);\n+  set_underlying_type (decl);\n \n   if (processing_template_decl)\n-    value = push_template_decl (value);\n+    decl = push_template_decl (decl);\n \n   tree saved_cas = current_access_specifier;\n   current_access_specifier = access_public_node;\n-  finish_member_declaration (value);\n+  finish_member_declaration (decl);\n   current_access_specifier = saved_cas;\n }\n \n@@ -9006,11 +9007,11 @@ dump_class_hierarchy_1 (FILE *stream, dump_flags_t flags, tree t)\n   fprintf (stream, \"   size=%lu align=%lu\\n\",\n \t   (unsigned long)(tree_to_shwi (TYPE_SIZE (t)) / BITS_PER_UNIT),\n \t   (unsigned long)(TYPE_ALIGN (t) / BITS_PER_UNIT));\n-  fprintf (stream, \"   base size=%lu base align=%lu\\n\",\n-\t   (unsigned long)(tree_to_shwi (TYPE_SIZE (CLASSTYPE_AS_BASE (t)))\n-\t\t\t   / BITS_PER_UNIT),\n-\t   (unsigned long)(TYPE_ALIGN (CLASSTYPE_AS_BASE (t))\n-\t\t\t   / BITS_PER_UNIT));\n+  if (tree as_base = CLASSTYPE_AS_BASE (t))\n+    fprintf (stream, \"   base size=%lu base align=%lu\\n\",\n+\t     (unsigned long)(tree_to_shwi (TYPE_SIZE (as_base))\n+\t\t\t     / BITS_PER_UNIT),\n+\t     (unsigned long)(TYPE_ALIGN (as_base) / BITS_PER_UNIT));\n   dump_class_hierarchy_r (stream, flags, TYPE_BINFO (t), TYPE_BINFO (t), 0);\n   fprintf (stream, \"\\n\");\n }"}]}