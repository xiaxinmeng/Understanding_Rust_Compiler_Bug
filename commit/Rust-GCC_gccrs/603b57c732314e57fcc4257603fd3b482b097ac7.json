{"sha": "603b57c732314e57fcc4257603fd3b482b097ac7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjAzYjU3YzczMjMxNGU1N2ZjYzQyNTc2MDNmZDNiNDgyYjA5N2FjNw==", "commit": {"author": {"name": "Patrick Bernardi", "email": "bernardi@adacore.com", "date": "2020-07-30T23:06:13Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-10-21T07:22:45Z"}, "message": "[Ada] Use VxWorks 7 APIs for accessing environment variables in kernel mode\n\ngcc/ada/\n\n\t* env.c (__gnat_setenv): call setenv for VxWorks 7 kernel mode.\n\t(__gnat_environ): envGet takes an int instead of a NULL pointer.\n\t(__gnat_unsetenv): call unsetenv for VxWorks 7 kernel mode.\n\t(__gnat_clearenv): use __gnat_unsetenv to clear environment\n\tvariables.", "tree": {"sha": "8303547fa0bc0879d4a0c2b4f9957567faad223d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8303547fa0bc0879d4a0c2b4f9957567faad223d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/603b57c732314e57fcc4257603fd3b482b097ac7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/603b57c732314e57fcc4257603fd3b482b097ac7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/603b57c732314e57fcc4257603fd3b482b097ac7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/603b57c732314e57fcc4257603fd3b482b097ac7/comments", "author": {"login": "burratoo", "id": 23646118, "node_id": "MDQ6VXNlcjIzNjQ2MTE4", "avatar_url": "https://avatars.githubusercontent.com/u/23646118?v=4", "gravatar_id": "", "url": "https://api.github.com/users/burratoo", "html_url": "https://github.com/burratoo", "followers_url": "https://api.github.com/users/burratoo/followers", "following_url": "https://api.github.com/users/burratoo/following{/other_user}", "gists_url": "https://api.github.com/users/burratoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/burratoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/burratoo/subscriptions", "organizations_url": "https://api.github.com/users/burratoo/orgs", "repos_url": "https://api.github.com/users/burratoo/repos", "events_url": "https://api.github.com/users/burratoo/events{/privacy}", "received_events_url": "https://api.github.com/users/burratoo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e98f6ed1e2e9f0cfaac5dad0e279091d88fd353f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e98f6ed1e2e9f0cfaac5dad0e279091d88fd353f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e98f6ed1e2e9f0cfaac5dad0e279091d88fd353f"}], "stats": {"total": 31, "additions": 20, "deletions": 11}, "files": [{"sha": "0ee09f45b63a6fc024a26962296863d27d9ddc14", "filename": "gcc/ada/env.c", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/603b57c732314e57fcc4257603fd3b482b097ac7/gcc%2Fada%2Fenv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/603b57c732314e57fcc4257603fd3b482b097ac7/gcc%2Fada%2Fenv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fenv.c?ref=603b57c732314e57fcc4257603fd3b482b097ac7", "patch": "@@ -99,7 +99,8 @@ __gnat_getenv (char *name, int *len, char **value)\n void\n __gnat_setenv (char *name, char *value)\n {\n-#if (defined (__vxworks) && defined (__RTP__)) || defined (__APPLE__)\n+#if (defined (__vxworks) && (defined (__RTP__) || _WRS_VXWORKS_MAJOR >= 7)) \\\n+    || defined (__APPLE__)\n   setenv (name, value, 1);\n \n #else\n@@ -110,9 +111,9 @@ __gnat_setenv (char *name, char *value)\n \n   sprintf (expression, \"%s=%s\", name, value);\n   putenv (expression);\n-#if defined (__MINGW32__) || (defined (__vxworks) && ! defined (__RTP__))\n-  /* On some systems like MacOS X and Windows, putenv is making a copy of the\n-     expression string so we can free it after the call to putenv */\n+#if defined (__MINGW32__) || defined (__vxworks)\n+  /* putenv for Windows and VxWorks 6 kernel modules makes a copy of the\n+     expression string, so we need to free it after the call to putenv. */\n   free (expression);\n #endif\n #endif\n@@ -138,16 +139,22 @@ __gnat_environ (void)\n   #if defined (__RTP__) || defined (VTHREADS)\n     return environ;\n   #else\n-    /* Kernel mode */\n-    return envGet (NULL);\n+    /* For VxWorks kernel modules use envGet to get the task's environment\n+       (either the task's private environment if it has one or the global\n+       environment otherwise). taskId parameter of 0 refers to the current\n+       task (the VxWorks documentation says to use NULL but the compiler\n+       complains that taskId is an int rather than a pointer. Internally,\n+       VxWorks uses 0 as well). */\n+    return envGet (0);\n   #endif\n #endif\n }\n \n void __gnat_unsetenv (char *name)\n {\n #if defined (__hpux__) || defined (__sun__) \\\n-     || (defined (__vxworks) && ! defined (__RTP__)) \\\n+     || (defined (__vxworks) && ! defined (__RTP__) \\\n+          && _WRS_VXWORKS_MAJOR <= 6) \\\n      || defined (_AIX) || defined (__Lynx__)\n \n   /* On Solaris and HP-UX there is no function to clear an environment\n@@ -170,7 +177,7 @@ void __gnat_unsetenv (char *name)\n      if (strlen (env[index]) > size) {\n        if (strstr (env[index], name) == env[index] &&\n \t   env[index][size] == '=') {\n-#if defined (__vxworks) && ! defined (__RTP__)\n+#if defined (__vxworks)\n          /* on Vxworks we are sure that the string has been allocated using\n             malloc */\n          free (env[index]);\n@@ -203,9 +210,10 @@ void __gnat_unsetenv (char *name)\n void __gnat_clearenv (void)\n {\n #if defined (__sun__) \\\n-  || (defined (__vxworks) && ! defined (__RTP__)) || defined (__Lynx__) \\\n+  || (defined (__vxworks) && !defined (__RTP__) && _WRS_VXWORKS_MAJOR <= 6) \\\n+  || defined (__Lynx__) \\\n   || defined (__PikeOS__)\n-  /* On Solaris, VxWorks (not RTPs), and Lynx there is no system\n+  /* On Solaris, VxWorks kernel pre 7, and Lynx there is no system\n      call to unset a variable or to clear the environment so set all\n      the entries in the environ table to NULL (see comment in\n      __gnat_unsetenv for more explanation). */\n@@ -217,7 +225,8 @@ void __gnat_clearenv (void)\n     index++;\n   }\n #elif defined (__MINGW32__) || defined (__FreeBSD__) || defined (__APPLE__) \\\n-   || (defined (__vxworks) && defined (__RTP__)) || defined (__CYGWIN__) \\\n+   || (defined (__vxworks) && defined (__RTP__) || _WRS_VXWORKS_MAJOR >= 7) \\\n+   || defined (__CYGWIN__) \\\n    || defined (__NetBSD__) || defined (__OpenBSD__) || defined (__rtems__) \\\n    || defined (__DragonFly__) || defined (__DJGPP__)\n   /* On Windows, FreeBSD and MacOS there is no function to clean all the"}]}