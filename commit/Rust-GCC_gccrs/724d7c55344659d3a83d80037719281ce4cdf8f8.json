{"sha": "724d7c55344659d3a83d80037719281ce4cdf8f8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzI0ZDdjNTUzNDQ2NTlkM2E4M2Q4MDAzNzcxOTI4MWNlNGNkZjhmOA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@libertysurf.fr", "date": "2007-06-17T11:17:10Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2007-06-17T11:17:10Z"}, "message": "sparc.c (sparc_vis_init_builtins): Retrieve the return mode from the builtin itself.\n\n\t* config/sparc/sparc.c (sparc_vis_init_builtins): Retrieve the\n\treturn mode from the builtin itself.\n\t(sparc_fold_builtin): Fix cast of zero constant.\n\nFrom-SVN: r125768", "tree": {"sha": "1d3b093b0d68dce3f13e4611de3ba6d90229261e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d3b093b0d68dce3f13e4611de3ba6d90229261e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/724d7c55344659d3a83d80037719281ce4cdf8f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/724d7c55344659d3a83d80037719281ce4cdf8f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/724d7c55344659d3a83d80037719281ce4cdf8f8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/724d7c55344659d3a83d80037719281ce4cdf8f8/comments", "author": {"login": "ebotcazou", "id": 48091907, "node_id": "MDQ6VXNlcjQ4MDkxOTA3", "avatar_url": "https://avatars.githubusercontent.com/u/48091907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebotcazou", "html_url": "https://github.com/ebotcazou", "followers_url": "https://api.github.com/users/ebotcazou/followers", "following_url": "https://api.github.com/users/ebotcazou/following{/other_user}", "gists_url": "https://api.github.com/users/ebotcazou/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebotcazou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebotcazou/subscriptions", "organizations_url": "https://api.github.com/users/ebotcazou/orgs", "repos_url": "https://api.github.com/users/ebotcazou/repos", "events_url": "https://api.github.com/users/ebotcazou/events{/privacy}", "received_events_url": "https://api.github.com/users/ebotcazou/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b92d0c71266b06e5b95023bb36b18062429a48bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b92d0c71266b06e5b95023bb36b18062429a48bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b92d0c71266b06e5b95023bb36b18062429a48bd"}], "stats": {"total": 75, "additions": 46, "deletions": 29}, "files": [{"sha": "30406dd62ded36b932faaa7072d9a1f3ae7d8d48", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/724d7c55344659d3a83d80037719281ce4cdf8f8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/724d7c55344659d3a83d80037719281ce4cdf8f8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=724d7c55344659d3a83d80037719281ce4cdf8f8", "patch": "@@ -1,3 +1,9 @@\n+2007-06-17  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\t* config/sparc/sparc.c (sparc_vis_init_builtins): Retrieve the\n+\treturn mode from the builtin itself.\n+\t(sparc_fold_builtin): Fix cast of zero constant.\n+\n 2007-06-16  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* targhooks.c (default_builtin_reciprocal): New default target hook."}, {"sha": "0c9989e3b63c66e30012d342dbef55ee15e2b336", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/724d7c55344659d3a83d80037719281ce4cdf8f8/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/724d7c55344659d3a83d80037719281ce4cdf8f8/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=724d7c55344659d3a83d80037719281ce4cdf8f8", "patch": "@@ -8031,8 +8031,10 @@ sparc_vis_init_builtins (void)\n    Expand builtin functions for sparc intrinsics.  */\n \n static rtx\n-sparc_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n-\t\t      enum machine_mode tmode, int ignore ATTRIBUTE_UNUSED)\n+sparc_expand_builtin (tree exp, rtx target,\n+\t\t      rtx subtarget ATTRIBUTE_UNUSED,\n+\t\t      enum machine_mode tmode ATTRIBUTE_UNUSED,\n+\t\t      int ignore ATTRIBUTE_UNUSED)\n {\n   tree arg;\n   call_expr_arg_iterator iter;\n@@ -8042,14 +8044,13 @@ sparc_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n   enum machine_mode mode[4];\n   int arg_count = 0;\n \n-  mode[arg_count] = tmode;\n-\n-  if (target == 0\n-      || GET_MODE (target) != tmode\n-      || ! (*insn_data[icode].operand[0].predicate) (target, tmode))\n-    op[arg_count] = gen_reg_rtx (tmode);\n+  mode[0] = insn_data[icode].operand[0].mode;\n+  if (!target\n+      || GET_MODE (target) != mode[0]\n+      || ! (*insn_data[icode].operand[0].predicate) (target, mode[0]))\n+    op[0] = gen_reg_rtx (mode[0]);\n   else\n-    op[arg_count] = target;\n+    op[0] = target;\n \n   FOR_EACH_CALL_EXPR_ARG (arg, iter, exp)\n     {\n@@ -8162,11 +8163,11 @@ sparc_fold_builtin (tree fndecl, tree arglist, bool ignore)\n {\n   tree arg0, arg1, arg2;\n   tree rtype = TREE_TYPE (TREE_TYPE (fndecl));\n-  \n \n-  if (ignore && DECL_FUNCTION_CODE (fndecl) != CODE_FOR_alignaddrsi_vis\n+  if (ignore\n+      && DECL_FUNCTION_CODE (fndecl) != CODE_FOR_alignaddrsi_vis\n       && DECL_FUNCTION_CODE (fndecl) != CODE_FOR_alignaddrdi_vis)\n-    return build_int_cst (rtype, 0);\n+    return fold_convert (rtype, integer_zero_node);\n \n   switch (DECL_FUNCTION_CODE (fndecl))\n     {\n@@ -8280,6 +8281,7 @@ sparc_fold_builtin (tree fndecl, tree arglist, bool ignore)\n     default:\n       break;\n     }\n+\n   return NULL_TREE;\n }\n \f"}, {"sha": "2a69e6ae4ea6f857b1ea27c2517499f6564e34df", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/724d7c55344659d3a83d80037719281ce4cdf8f8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/724d7c55344659d3a83d80037719281ce4cdf8f8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=724d7c55344659d3a83d80037719281ce4cdf8f8", "patch": "@@ -1,3 +1,15 @@\n+2007-06-17  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\t* gcc.target/sparc/align.c: Use 'unsigned char' as element type.\n+\t* gcc.target/sparc/combined-2.c: Likewise.\n+\t* gcc.target/sparc/fexpand.c : Likewise.\n+\t* gcc.target/sparc/fnot.c: Likewise.  Fix a couple of prototypes.\n+\t* gcc.target/sparc/fpack16.c : Likewise.\n+\t* gcc.target/sparc/fpmerge.c : Likewise.\n+\t* gcc.target/sparc/fpmul.c : Likewise.\n+\t* gcc.target/sparc/noresult.c : Likewise.\n+\t* gcc.target/sparc/pdist.c: Likewise.\n+\n 2007-06-16  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR middle-end/31723"}, {"sha": "804ca9397f3469faab64da6b98bef23b3e561a43", "filename": "gcc/testsuite/gcc.target/sparc/align.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/724d7c55344659d3a83d80037719281ce4cdf8f8/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Falign.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/724d7c55344659d3a83d80037719281ce4cdf8f8/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Falign.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Falign.c?ref=724d7c55344659d3a83d80037719281ce4cdf8f8", "patch": "@@ -1,10 +1,9 @@\n /* { dg-do compile } */\n /* { dg-options \"-mcpu=ultrasparc -mvis\" } */\n-\n typedef long long int64_t;\n typedef int vec32 __attribute__((vector_size(8)));\n typedef short vec16 __attribute__((vector_size(8)));\n-typedef char vec8 __attribute__((vector_size(8)));\n+typedef unsigned char vec8 __attribute__((vector_size(8)));\n \n vec16 foo1 (vec16 a, vec16 b) {\n   return __builtin_vis_faligndatav4hi (a, b);"}, {"sha": "c4b70a55a2d4a3f3871b7fc59a94b5c73798d66c", "filename": "gcc/testsuite/gcc.target/sparc/combined-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/724d7c55344659d3a83d80037719281ce4cdf8f8/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fcombined-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/724d7c55344659d3a83d80037719281ce4cdf8f8/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fcombined-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fcombined-2.c?ref=724d7c55344659d3a83d80037719281ce4cdf8f8", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -mcpu=ultrasparc -mvis\" } */\n-typedef char pixel __attribute__((vector_size(4)));\n-typedef char vec8 __attribute__((vector_size(8)));\n+typedef unsigned char pixel __attribute__((vector_size(4)));\n+typedef unsigned char vec8 __attribute__((vector_size(8)));\n typedef short vec16 __attribute__((vector_size(8)));\n \n vec16 foo (pixel a, pixel b) {"}, {"sha": "21aeafff0b1a0b25fa07d583ab6a2c9aaa14cbe3", "filename": "gcc/testsuite/gcc.target/sparc/fexpand.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/724d7c55344659d3a83d80037719281ce4cdf8f8/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Ffexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/724d7c55344659d3a83d80037719281ce4cdf8f8/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Ffexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Ffexpand.c?ref=724d7c55344659d3a83d80037719281ce4cdf8f8", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-mcpu=ultrasparc -mvis\" } */\n typedef short vec16 __attribute__((vector_size(8)));\n-typedef char vec8 __attribute__((vector_size(4)));\n+typedef unsigned char vec8 __attribute__((vector_size(4)));\n \n vec16 foo (vec8 a) {\n   return __builtin_vis_fexpand (a);"}, {"sha": "dceee52f7da4c72475ed440cdb3988ea1d7d6b14", "filename": "gcc/testsuite/gcc.target/sparc/fnot.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/724d7c55344659d3a83d80037719281ce4cdf8f8/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Ffnot.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/724d7c55344659d3a83d80037719281ce4cdf8f8/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Ffnot.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Ffnot.c?ref=724d7c55344659d3a83d80037719281ce4cdf8f8", "patch": "@@ -1,8 +1,8 @@\n /* { dg-do compile } */\n /* { dg-options \"-O -mcpu=ultrasparc -mvis\" } */\n-typedef char  vec8 __attribute__((vector_size(8)));\n+typedef unsigned char vec8 __attribute__((vector_size(8)));\n typedef short vec16 __attribute__((vector_size(8)));\n-typedef int   vec32 __attribute__((vector_size(8)));\n+typedef int vec32 __attribute__((vector_size(8)));\n \n extern vec8 foo1_8(void);\n extern void foo2_8(vec8);\n@@ -21,7 +21,7 @@ vec8 fun8_2(vec8 a)\n #endif\n \n extern vec16 foo1_16(void);\n-extern void foo2_16(vec8);\n+extern void foo2_16(vec16);\n \n \n vec16 fun16(void)\n@@ -38,7 +38,7 @@ vec16 fun16_2(vec16 a)\n #endif\n \n extern vec32 foo1_32(void);\n-extern void foo2_32(vec8);\n+extern void foo2_32(vec32);\n \n vec32 fun32(void)\n {"}, {"sha": "79e0c4c1577b65eca1e39acd3a527d6190ea5a99", "filename": "gcc/testsuite/gcc.target/sparc/fpack16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/724d7c55344659d3a83d80037719281ce4cdf8f8/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Ffpack16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/724d7c55344659d3a83d80037719281ce4cdf8f8/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Ffpack16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Ffpack16.c?ref=724d7c55344659d3a83d80037719281ce4cdf8f8", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-mcpu=ultrasparc -mvis\" } */\n typedef short vec16 __attribute__((vector_size(8)));\n-typedef char vec8 __attribute__((vector_size(4)));\n+typedef unsigned char vec8 __attribute__((vector_size(4)));\n \n vec8 foo (vec16 a) {\n   return __builtin_vis_fpack16 (a);"}, {"sha": "4d6a9c02382ec292b56ad3ada4e5ea7efcf3219d", "filename": "gcc/testsuite/gcc.target/sparc/fpmerge.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/724d7c55344659d3a83d80037719281ce4cdf8f8/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Ffpmerge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/724d7c55344659d3a83d80037719281ce4cdf8f8/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Ffpmerge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Ffpmerge.c?ref=724d7c55344659d3a83d80037719281ce4cdf8f8", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-mcpu=ultrasparc -mvis\" } */\n-typedef char pixel __attribute__((vector_size(8)));\n-typedef char vec8 __attribute__((vector_size(4)));\n+typedef unsigned char pixel __attribute__((vector_size(8)));\n+typedef unsigned char vec8 __attribute__((vector_size(4)));\n \n pixel foo (vec8 a, vec8 b) {\n   return __builtin_vis_fpmerge (a, b);"}, {"sha": "71b3b17ac57a7ead773a930437f4baf49feb1651", "filename": "gcc/testsuite/gcc.target/sparc/fpmul.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/724d7c55344659d3a83d80037719281ce4cdf8f8/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Ffpmul.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/724d7c55344659d3a83d80037719281ce4cdf8f8/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Ffpmul.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Ffpmul.c?ref=724d7c55344659d3a83d80037719281ce4cdf8f8", "patch": "@@ -2,9 +2,9 @@\n /* { dg-options \"-mcpu=ultrasparc -mvis\" } */\n typedef int vec32 __attribute__((vector_size(8)));\n typedef short vec16 __attribute__((vector_size(8)));\n-typedef char pixel __attribute__((vector_size(4)));\n+typedef unsigned char pixel __attribute__((vector_size(4)));\n typedef short pixel16 __attribute__((vector_size(4)));\n-typedef char vec8 __attribute__((vector_size(8)));\n+typedef unsigned char vec8 __attribute__((vector_size(8)));\n \n vec16 foo1 (pixel a, vec16 b) {\n   return __builtin_vis_fmul8x16 (a, b);"}, {"sha": "1be7458d2be8324adf5e5963070d746d93667e7b", "filename": "gcc/testsuite/gcc.target/sparc/noresult.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/724d7c55344659d3a83d80037719281ce4cdf8f8/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fnoresult.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/724d7c55344659d3a83d80037719281ce4cdf8f8/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fnoresult.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fnoresult.c?ref=724d7c55344659d3a83d80037719281ce4cdf8f8", "patch": "@@ -1,7 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-mcpu=ultrasparc -mvis\" } */\n typedef short vec16 __attribute__((vector_size(8)));\n-typedef char vec8 __attribute__((vector_size(4)));\n \n void foo (vec16 a) {\n   __builtin_vis_fpack16 (a);"}, {"sha": "6ecc20aa178c4aa576382bf4e2937c834eecf087", "filename": "gcc/testsuite/gcc.target/sparc/pdist.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/724d7c55344659d3a83d80037719281ce4cdf8f8/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fpdist.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/724d7c55344659d3a83d80037719281ce4cdf8f8/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fpdist.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fpdist.c?ref=724d7c55344659d3a83d80037719281ce4cdf8f8", "patch": "@@ -1,8 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-mcpu=ultrasparc -mvis\" } */\n-\n typedef long long int64_t;\n-typedef char vec8 __attribute__((vector_size(8)));\n+typedef unsigned char vec8 __attribute__((vector_size(8)));\n \n int64_t foo (vec8 a, vec8 b) {\n   int64_t d = 0;"}]}