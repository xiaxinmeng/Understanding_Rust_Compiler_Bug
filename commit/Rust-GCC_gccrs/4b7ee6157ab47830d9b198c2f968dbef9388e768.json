{"sha": "4b7ee6157ab47830d9b198c2f968dbef9388e768", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGI3ZWU2MTU3YWI0NzgzMGQ5YjE5OGMyZjk2OGRiZWY5Mzg4ZTc2OA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2000-04-10T16:18:21Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2000-04-10T16:18:21Z"}, "message": "rtl.def (ASHIFT, [...]): Recomment.\n\n\t* rtl.def (ASHIFT, ROTATE, ASHIFTRT, LSHIFTRT, ROTATERT):\n\tRecomment.\n\t* tree.def (LSHIFT_EXPR, RSHIFT_EXPR): Recomment.\n\nFrom-SVN: r33060", "tree": {"sha": "9ec67c01ad5da2b351a0eb8c1ca52cbc4af6d209", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ec67c01ad5da2b351a0eb8c1ca52cbc4af6d209"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b7ee6157ab47830d9b198c2f968dbef9388e768", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b7ee6157ab47830d9b198c2f968dbef9388e768", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b7ee6157ab47830d9b198c2f968dbef9388e768", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b7ee6157ab47830d9b198c2f968dbef9388e768/comments", "author": null, "committer": null, "parents": [{"sha": "08158df35aaccfdb532a7ad441f5f2a93513b9df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08158df35aaccfdb532a7ad441f5f2a93513b9df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08158df35aaccfdb532a7ad441f5f2a93513b9df"}], "stats": {"total": 68, "additions": 11, "deletions": 57}, "files": [{"sha": "b1dd20e7bfdcd5d6a0fe00ac756b56b460ff0459", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 46, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b7ee6157ab47830d9b198c2f968dbef9388e768/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b7ee6157ab47830d9b198c2f968dbef9388e768/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4b7ee6157ab47830d9b198c2f968dbef9388e768", "patch": "@@ -1,48 +1,8 @@\n-Mon Apr 10 07:21:13 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n-\n-\t* sbitmap.h: Whitespace changes and use upper-case macro args.\n-\t(struct simple_bitmap_def): All sizes now unsigned.\n-\t(EXECUTE_IF_SET_IN_SBITMAP): Internal vars now _X instead of X_.\n-\t* sbitmap.c (sbitmap_alloc): N_ELMS now unsigned; also local vars.\n-\t(sbitmap_vector_alloc): Parms and local vars now unsigned.\n-\t(sbitmap_zero): Cast bzero arg to PTR.\n-\t(sbitmap_vector_zero, sbitmap_vector_one): Parm and Local var unsigned.\n-\t(sbitmap_union_of_diffs): Change loop index to unsigned and rework\n-\tloop to make structure clearer.\n-\t(sbitmap_not, sbitmap_difference, sbitmap_a_and_b): Likewise.\n-\t(sbitmap_a_or_b, sbitmap_a_subset_b_p, sbitmap_a_or_b_and_c): Likewise.\n-\t(sbitmap_a_and_b_or_c): Likewise.\n-\t(sbitmap_intersection_of_succs): Minor cleanups.\n-\t(sbitmap_intersection_of_preds, sbitmap_union_of_succs): Likewise.\n-\t(sbitmap_union_of_preds): Likewise.\n-\t(sbitmap_first_set_bit, dump_sbitmap): Local variables now unsigned.\n-\t(debug_sbitmap): New function.\n-\t\n-\t* c-convert.c (convert): Handle REFERENCE_TYPE like POINTER_TYPE.\n-\t* c-typeck.c (convert_for_assignment): Likewise.\n-\n-\t* expmed.c (init_expmed): Don't free objects we make.\n-\t* emit-rtl.c (gen_rtx_CONST_INT, init_emit_once): Minor cleanups.\n-\n-\t* expr.c (get_inner_reference): Correct some WITH_RECORD_EXPR cases.\n-\t(expand_expr, case CONVERT_EXPR): Pass proper alignment to store_field.\n-\n-\t* gcse.c (expr_hash_table_size): Now unsigned.\n-\t(compute_ae_gen): Local variable `i' now unsigned.\n-\t(compute_ae_kill, pre_insert_copies, pre_delete, pre_gcse): Likewise.\n-\t(compute_transout, hoist_code): Likewise.\n-\t(compute_local_properties): Likewise, also hash_table_size.\n-\t(alloc_expr_hash_table): N_INSNS now unsigned.\n-\t(delete_null_pointer_checks): Mark arg F as unused.\n+2000-04-10  Nathan Sidwell  <nathan@codesourcery.com>\n \n-\t* regrename.c: Minor cleanups, including chang some variables\n-\tto unsigned int.\n-\n-2000-04-10  Neil Booth  <NeilB@earthling.net>\n-\n-\t* cpplex.c (skip_block_comment): Use pointer arithmetic rather\n-\tthan GETC ().\n-\t* cpphash.h: (CPP_BUMP_BUFFER_LINE_CUR, CPP_BUMP_LINE_CUR): New.\n+\t* rtl.def (ASHIFT, ROTATE, ASHIFTRT, LSHIFTRT, ROTATERT):\n+\tRecomment.\n+\t* tree.def (LSHIFT_EXPR, RSHIFT_EXPR): Recomment.\n \n 2000-04-10  Martin v. L\ufffdwis  <loewis@informatik.hu-berlin.de>\n \n@@ -23607,5 +23567,3 @@ Wed May 19 00:34:40 1999  Jeffrey A Law  (law@cygnus.com)\n \tgcc-2.95 branch.\n \n See ChangeLog.1 for earlier changes.\n-\n-\t\n\\ No newline at end of file"}, {"sha": "58d24e9af3b857a215c61e394bec8c7f09771e4d", "filename": "gcc/rtl.def", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b7ee6157ab47830d9b198c2f968dbef9388e768/gcc%2Frtl.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b7ee6157ab47830d9b198c2f968dbef9388e768/gcc%2Frtl.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.def?ref=4b7ee6157ab47830d9b198c2f968dbef9388e768", "patch": "@@ -688,15 +688,11 @@ DEF_RTL_EXPR(NOT, \"not\", \"e\", '1')\n /* Operand:\n      0:  value to be shifted.\n      1:  number of bits.  */\n-DEF_RTL_EXPR(ASHIFT, \"ashift\", \"ee\", '2')\n-DEF_RTL_EXPR(ROTATE, \"rotate\", \"ee\", '2')\n-\n-/* Right shift operations, for machines where these are not the same\n-   as left shifting with a negative argument.  */\n-\n-DEF_RTL_EXPR(ASHIFTRT, \"ashiftrt\", \"ee\", '2')\n-DEF_RTL_EXPR(LSHIFTRT, \"lshiftrt\", \"ee\", '2')\n-DEF_RTL_EXPR(ROTATERT, \"rotatert\", \"ee\", '2')\n+DEF_RTL_EXPR(ASHIFT, \"ashift\", \"ee\", '2') /* shift left */\n+DEF_RTL_EXPR(ROTATE, \"rotate\", \"ee\", '2') /* rotate left */\n+DEF_RTL_EXPR(ASHIFTRT, \"ashiftrt\", \"ee\", '2') /* arithmetic shift right */\n+DEF_RTL_EXPR(LSHIFTRT, \"lshiftrt\", \"ee\", '2') /* logical shift right */\n+DEF_RTL_EXPR(ROTATERT, \"rotatert\", \"ee\", '2') /* rotate right */\n \n /* Minimum and maximum values of two operands.  We need both signed and\n    unsigned forms.  (We cannot use MIN for SMIN because it conflicts"}, {"sha": "e3fb8b4962ba73507f1989429ac937342682e180", "filename": "gcc/tree.def", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b7ee6157ab47830d9b198c2f968dbef9388e768/gcc%2Ftree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b7ee6157ab47830d9b198c2f968dbef9388e768/gcc%2Ftree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.def?ref=4b7ee6157ab47830d9b198c2f968dbef9388e768", "patch": "@@ -602,8 +602,8 @@ DEFTREECODE (ABS_EXPR, \"abs_expr\", '1', 1)\n DEFTREECODE (FFS_EXPR, \"ffs_expr\", '1', 1)\n \n /* Shift operations for shift and rotate.\n-   Shift is supposed to mean logical shift if done on an\n-   unsigned type, arithmetic shift on a signed type.\n+   Shift means logical shift if done on an\n+   unsigned type, arithmetic shift if done on a signed type.\n    The second operand is the number of bits to\n    shift by; it need not be the same type as the first operand and result.  */\n DEFTREECODE (LSHIFT_EXPR, \"lshift_expr\", '2', 2)"}]}