{"sha": "3fe5612d61dddd4661bfdeda82534e7fd41e7248", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2ZlNTYxMmQ2MWRkZGQ0NjYxYmZkZWRhODI1MzRlN2ZkNDFlNzI0OA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1998-09-19T12:14:38Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1998-09-19T12:14:38Z"}, "message": "alpha.c (alpha_return_addr): SET should be VOIDmode.\n\n        * alpha.c (alpha_return_addr): SET should be VOIDmode.\n        (alpha_emit_set_long_const): Rewrite to be callable from reload\n        and 32-bit hosts.\n        (alpha_expand_epilogue): Update for alpha_emit_set_long_const.\n        * alpha.md (movdi): Likewise.\n\nFrom-SVN: r22479", "tree": {"sha": "3d93707991574c3a5819bf79898916729f831317", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d93707991574c3a5819bf79898916729f831317"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3fe5612d61dddd4661bfdeda82534e7fd41e7248", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fe5612d61dddd4661bfdeda82534e7fd41e7248", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fe5612d61dddd4661bfdeda82534e7fd41e7248", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fe5612d61dddd4661bfdeda82534e7fd41e7248/comments", "author": null, "committer": null, "parents": [{"sha": "9c8cc54f26b2b0b7fedf7029b9b8702bddac2635", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c8cc54f26b2b0b7fedf7029b9b8702bddac2635", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c8cc54f26b2b0b7fedf7029b9b8702bddac2635"}], "stats": {"total": 126, "additions": 67, "deletions": 59}, "files": [{"sha": "3664172fc92206dc41c90bd868837f805cabb5d2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fe5612d61dddd4661bfdeda82534e7fd41e7248/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fe5612d61dddd4661bfdeda82534e7fd41e7248/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3fe5612d61dddd4661bfdeda82534e7fd41e7248", "patch": "@@ -1,3 +1,11 @@\n+Sat Sep 19 12:05:09 1998  Richard Henderson  <rth@cygnus.com>\n+\n+\t* alpha.c (alpha_return_addr): SET should be VOIDmode.\n+\t(alpha_emit_set_long_const): Rewrite to be callable from reload\n+\tand 32-bit hosts.\n+\t(alpha_expand_epilogue): Update for alpha_emit_set_long_const.\n+\t* alpha.md (movdi): Likewise.\n+\n Sat Sep 19 07:33:36 1998  Richard Earnshaw (rearnsha@arm.com)\n \n \t* arm.c (add_constant): New parameter address_only, change caller."}, {"sha": "e4a1f17b3e665f40614dd63b1d8d5f830379f966", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 44, "deletions": 51, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fe5612d61dddd4661bfdeda82534e7fd41e7248/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fe5612d61dddd4661bfdeda82534e7fd41e7248/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=3fe5612d61dddd4661bfdeda82534e7fd41e7248", "patch": "@@ -1180,70 +1180,66 @@ alpha_emit_set_const_1 (target, mode, c, n)\n   return 0;\n }\n \n-#if HOST_BITS_PER_WIDE_INT == 64\n /* Having failed to find a 3 insn sequence in alpha_emit_set_const,\n    fall back to a straight forward decomposition.  We do this to avoid\n    exponential run times encountered when looking for longer sequences\n    with alpha_emit_set_const.  */\n \n rtx\n-alpha_emit_set_long_const (target, c)\n+alpha_emit_set_long_const (target, c1, c2)\n      rtx target;\n-     HOST_WIDE_INT c;\n+     HOST_WIDE_INT c1, c2;\n {\n-  /* Use a pseudo if highly optimizing and still generating RTL.  */\n-  rtx subtarget\n-    = (flag_expensive_optimizations && rtx_equal_function_value_matters\n-       ? 0 : target);\n   HOST_WIDE_INT d1, d2, d3, d4;\n-  rtx r1, r2;\n \n   /* Decompose the entire word */\n-  d1 = ((c & 0xffff) ^ 0x8000) - 0x8000;\n-  c -= d1;\n-  d2 = ((c & 0xffffffff) ^ 0x80000000) - 0x80000000;\n-  c = (c - d2) >> 32;\n-  d3 = ((c & 0xffff) ^ 0x8000) - 0x8000;\n-  c -= d3;\n-  d4 = ((c & 0xffffffff) ^ 0x80000000) - 0x80000000;\n-\n-  if (c - d4 != 0)\n-    abort();\n+#if HOST_BITS_PER_WIDE_INT >= 64\n+  if (c2 != -(c1 < 0))\n+    abort ();\n+  d1 = ((c1 & 0xffff) ^ 0x8000) - 0x8000;\n+  c1 -= d1;\n+  d2 = ((c1 & 0xffffffff) ^ 0x80000000) - 0x80000000;\n+  c1 = (c1 - d2) >> 32;\n+  d3 = ((c1 & 0xffff) ^ 0x8000) - 0x8000;\n+  c1 -= d3;\n+  d4 = ((c1 & 0xffffffff) ^ 0x80000000) - 0x80000000;\n+  if (c1 != d4)\n+    abort ();\n+#else\n+  d1 = ((c1 & 0xffff) ^ 0x8000) - 0x8000;\n+  c1 -= d1;\n+  d2 = ((c1 & 0xffffffff) ^ 0x80000000) - 0x80000000;\n+  if (c1 != d2)\n+    abort ();\n+  c2 += (d2 < 0);\n+  d3 = ((c2 & 0xffff) ^ 0x8000) - 0x8000;\n+  c2 -= d3;\n+  d4 = ((c2 & 0xffffffff) ^ 0x80000000) - 0x80000000;\n+  if (c2 != d4)\n+    abort ();\n+#endif\n \n   /* Construct the high word */\n-  if (d3 == 0)\n-    r1 = copy_to_suggested_reg (GEN_INT (d4), subtarget, DImode);\n-  else if (d4 == 0)\n-    r1 = copy_to_suggested_reg (GEN_INT (d3), subtarget, DImode);\n+  if (d4)\n+    {\n+      emit_move_insn (target, GEN_INT (d4));\n+      if (d3)\n+\temit_move_insn (target, gen_rtx_PLUS (DImode, target, GEN_INT (d3)));\n+    }\n   else\n-    r1 = expand_binop (DImode, add_optab, GEN_INT (d3), GEN_INT (d4),\n-\t\t       subtarget, 0, OPTAB_WIDEN);\n+    emit_move_insn (target, GEN_INT (d3));\n \n   /* Shift it into place */\n-  r2 = expand_binop (DImode, ashl_optab, r1, GEN_INT (32), \n-\t\t     subtarget, 0, OPTAB_WIDEN);\n+  emit_move_insn (target, gen_rtx_ASHIFT (DImode, target, GEN_INT (32)));\n \n-  if (subtarget == 0 && d1 == d3 && d2 == d4)\n-    r1 = expand_binop (DImode, add_optab, r1, r2, subtarget, 0, OPTAB_WIDEN);\n-  else\n-    {\n-      r1 = r2;\n-\n-      /* Add in the low word */\n-      if (d2 != 0)\n-\tr1 = expand_binop (DImode, add_optab, r1, GEN_INT (d2),\n-\t\t           subtarget, 0, OPTAB_WIDEN);\n-      if (d1 != 0)\n-\tr1 = expand_binop (DImode, add_optab, r1, GEN_INT (d1),\n-\t\t           subtarget, 0, OPTAB_WIDEN);\n-    }\n+  /* Add in the low bits.  */\n+  if (d2)\n+    emit_move_insn (target, gen_rtx_PLUS (DImode, target, GEN_INT (d2)));\n+  if (d1)\n+    emit_move_insn (target, gen_rtx_PLUS (DImode, target, GEN_INT (d1)));\n \n-  if (subtarget == 0)\n-    r1 = copy_to_suggested_reg(r1, target, DImode);\n-\n-  return r1;\n+  return target;\n }\n-#endif /* HOST_BITS_PER_WIDE_INT == 64 */\n \n /* Generate the comparison for a conditional branch.  */\n \n@@ -2459,7 +2455,7 @@ alpha_return_addr (count, frame)\n \n   /* No rtx yet.  Invent one, and initialize it from $26 in the prologue.  */\n   alpha_return_addr_rtx = gen_reg_rtx (Pmode);\n-  init = gen_rtx_SET (Pmode, alpha_return_addr_rtx,\n+  init = gen_rtx_SET (VOIDmode, alpha_return_addr_rtx,\n \t\t      gen_rtx_REG (Pmode, REG_RA));\n \n   /* Emit the insn to the prologue with the other argument copies.  */\n@@ -3811,13 +3807,10 @@ alpha_expand_epilogue ()\n \t    {\n \t      /* We can't drop new things to memory this late, afaik,\n \t\t so build it up by pieces.  */\n-#if HOST_BITS_PER_WIDE_INT == 64\n-\t      FRP (sp_adj2 = alpha_emit_set_long_const (tmp, frame_size));\n+\t      FRP (sp_adj2 = alpha_emit_set_long_const (tmp, frame_size,\n+\t\t\t\t\t\t\t-(frame_size < 0)));\n \t      if (!sp_adj2)\n \t\tabort ();\n-#else\n-\t      abort ();\n-#endif\n \t    }\n \t}\n "}, {"sha": "bcd0b1e1fa8825c9a3c8517bc10c4e3c8a534d4c", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fe5612d61dddd4661bfdeda82534e7fd41e7248/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fe5612d61dddd4661bfdeda82534e7fd41e7248/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=3fe5612d61dddd4661bfdeda82534e7fd41e7248", "patch": "@@ -4342,24 +4342,31 @@\n     {\n       if (TARGET_BUILD_CONSTANTS)\n \t{\n-#if HOST_BITS_PER_WIDE_INT == 64\n-\t  HOST_WIDE_INT i;\n+\t  HOST_WIDE_INT i0, i1;\n \n \t  if (GET_CODE (operands[1]) == CONST_INT)\n-\t    i = INTVAL (operands[1]);\n+\t    {\n+\t      i0 = INTVAL (operands[1]);\n+\t      i1 = -(i0 < 0);\n+\t    }\n \t  else if (GET_CODE (operands[1]) == CONST_DOUBLE)\n-\t    i = CONST_DOUBLE_LOW (operands[1]);\n+\t    {\n+#if HOST_BITS_PER_WIDE_INT >= 64\n+\t      i0 = CONST_DOUBLE_LOW (operands[1]);\n+\t      i1 = -(i0 < 0);\n+#else\n+\t      i0 = CONST_DOUBLE_LOW (operands[1]);\n+\t      i1 = CONST_DOUBLE_HIGH (operands[1]);\n+#endif\n+\t    }\n \t  else\n \t    abort();\n \t  \n-          tem = alpha_emit_set_long_const (operands[0], i);\n+          tem = alpha_emit_set_long_const (operands[0], i0, i1);\n           if (rtx_equal_p (tem, operands[0]))\n \t    DONE;\n           else\n \t    operands[1] = tem;\n-#else\n-          abort();\n-#endif\n \t}\n       else\n \t{"}]}