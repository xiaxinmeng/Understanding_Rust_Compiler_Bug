{"sha": "2ffa993239e53b8a905c7761c1f065d24f74556e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmZmYTk5MzIzOWU1M2I4YTkwNWM3NzYxYzFmMDY1ZDI0Zjc0NTU2ZQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2002-10-17T13:54:32Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2002-10-17T13:54:32Z"}, "message": "Really commit patch announced at Oct 14 PR c/7344\n\n\tReally commit patch announced at Oct 14\n\tPR c/7344\n\t* predict.c (can_predict_insn_p): New function.\n\t(estimate_probability): Avoid unnecesary work.\n\t(process_note_prediction): Likewise.\n\t* toplev.c (rest_of_compilation): Account early branch prediction pass\n\tas TV_BRANCH_PROB.\n\nFrom-SVN: r58246", "tree": {"sha": "eec33f64b6ca8a24f1836169b02e799c86f22c09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eec33f64b6ca8a24f1836169b02e799c86f22c09"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ffa993239e53b8a905c7761c1f065d24f74556e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ffa993239e53b8a905c7761c1f065d24f74556e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ffa993239e53b8a905c7761c1f065d24f74556e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ffa993239e53b8a905c7761c1f065d24f74556e/comments", "author": null, "committer": null, "parents": [{"sha": "b216f69b04b7fea3c554235274820eb9ec2ebf7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b216f69b04b7fea3c554235274820eb9ec2ebf7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b216f69b04b7fea3c554235274820eb9ec2ebf7f"}], "stats": {"total": 43, "additions": 30, "deletions": 13}, "files": [{"sha": "611755228719e3abc9c1f473b97ce7a2fd3d660c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ffa993239e53b8a905c7761c1f065d24f74556e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ffa993239e53b8a905c7761c1f065d24f74556e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2ffa993239e53b8a905c7761c1f065d24f74556e", "patch": "@@ -1,3 +1,13 @@\n+Wed Oct 16 15:01:29 CEST 2002  Jan Hubicka  <jh@suse.cz>\n+\n+\tReally commit patch announced at Oct 14\n+\tPR c/7344\n+\t* predict.c (can_predict_insn_p): New function.\n+\t(estimate_probability): Avoid unnecesary work.\n+\t(process_note_prediction): Likewise.\n+\t* toplev.c (rest_of_compilation): Account early branch prediction pass\n+\tas TV_BRANCH_PROB.\n+\n 2002-10-17  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* config.gcc (mips*-*-*): Add OBJECT_FORMAT_ELF to $tm_defines\n@@ -147,13 +157,6 @@ Mon Oct 14 20:33:12 CEST 2002  Jan Hubicka  <jh@suse.cz>\n \n \t* xmmintrin.h (__m128i): Define as __v2di.\n \n-\tPR c/7344\n-\t* predict.c (can_predict_insn_p): New function.\n-\t(estimate_probability): Avoid unnecesary work.\n-\t(process_note_prediction): Likewise.\n-\t* toplev.c (rest_of_compilation): Account early branch prediction pass\n-\tas TV_BRANCH_PROB.\n-\n \tPR c++/6419\n \t(expand_expr): Use DECL_RTL_SET_P.\n "}, {"sha": "7e581468dec7097e7a69cdfebab1e138263affed", "filename": "gcc/predict.c", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ffa993239e53b8a905c7761c1f065d24f74556e/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ffa993239e53b8a905c7761c1f065d24f74556e/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=2ffa993239e53b8a905c7761c1f065d24f74556e", "patch": "@@ -80,6 +80,7 @@ static void process_note_prediction\t PARAMS ((basic_block, int *,\n static bool last_basic_block_p           PARAMS ((basic_block));\n static void compute_function_frequency\t PARAMS ((void));\n static void choose_function_section\t PARAMS ((void));\n+static bool can_predict_insn_p\t\t PARAMS ((rtx));\n \n /* Information we hold about each branch predictor.\n    Filled using information from predict.def.  */\n@@ -230,6 +231,18 @@ predict_edge (e, predictor, probability)\n   predict_insn (last_insn, predictor, probability);\n }\n \n+/* Return true when we can store prediction on insn INSN.\n+   At the moment we represent predictions only on conditional\n+   jumps, not at computed jump or other complicated cases.  */\n+static bool\n+can_predict_insn_p (insn)\n+\trtx insn;\n+{\n+  return (GET_CODE (insn) == JUMP_INSN\n+\t  && any_condjump_p (insn)\n+\t  && BLOCK_FOR_INSN (insn)->succ->succ_next);\n+}\n+\n /* Predict edge E by given predictor if possible.  */\n \n void\n@@ -440,7 +453,8 @@ estimate_probability (loops_info)\n \t     statements construct loops via \"non-loop\" constructs\n \t     in the source language and are better to be handled\n \t     separately.  */\n-\t  if (predicted_by_p (bb, PRED_CONTINUE))\n+\t  if (!can_predict_insn_p (bb->end)\n+\t      || predicted_by_p (bb, PRED_CONTINUE))\n \t    continue;\n \n \t  /* Loop branch heuristics - predict an edge back to a\n@@ -474,7 +488,7 @@ estimate_probability (loops_info)\n       rtx cond, earliest;\n       edge e;\n \n-      if (GET_CODE (last_insn) != JUMP_INSN || ! any_condjump_p (last_insn))\n+      if (! can_predict_insn_p (last_insn))\n \tcontinue;\n \n       for (e = bb->succ; e; e = e->succ_next)\n@@ -763,7 +777,7 @@ process_note_prediction (bb, heads, dominators, post_dominators, pred, flags)\n \n   /* Now find the edge that leads to our branch and aply the prediction.  */\n \n-  if (y == last_basic_block)\n+  if (y == last_basic_block || !can_predict_insn_p (BASIC_BLOCK (y)->end))\n     return;\n   for (e = BASIC_BLOCK (y)->succ; e; e = e->succ_next)\n     if (e->dest->index >= 0\n@@ -1148,9 +1162,7 @@ estimate_bb_frequencies (loops)\n \t{\n \t  rtx last_insn = bb->end;\n \n-\t  if (GET_CODE (last_insn) != JUMP_INSN || !any_condjump_p (last_insn)\n-\t      /* Avoid handling of conditional jumps jumping to fallthru edge.  */\n-\t      || bb->succ->succ_next == NULL)\n+\t  if (!can_predict_insn_p (last_insn))\n \t    {\n \t      /* We can predict only conditional jumps at the moment.\n \t         Expect each edge to be equally probable."}, {"sha": "21738982597c66e6ad1a3cc75f713afc83908b74", "filename": "gcc/toplev.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ffa993239e53b8a905c7761c1f065d24f74556e/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ffa993239e53b8a905c7761c1f065d24f74556e/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=2ffa993239e53b8a905c7761c1f065d24f74556e", "patch": "@@ -2590,7 +2590,9 @@ rest_of_compilation (decl)\n   delete_unreachable_blocks ();\n \n   /* Turn NOTE_INSN_PREDICTIONs into branch predictions.  */\n+  timevar_push (TV_BRANCH_PROB);\n   note_prediction_to_br_prob ();\n+  timevar_pop (TV_BRANCH_PROB);\n \n   /* We may have potential sibling or tail recursion sites.  Select one\n      (of possibly multiple) methods of performing the call.  */"}]}