{"sha": "c3aac51278b48f1571a2ff73b567ff108741c588", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzNhYWM1MTI3OGI0OGYxNTcxYTJmZjczYjU2N2ZmMTA4NzQxYzU4OA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2001-04-30T22:46:01Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2001-04-30T22:46:01Z"}, "message": "fdl.texi: New file.\n\n\t* fdl.texi: New file.\n\t* c-tree.texi: Use the GFDL.\n\t* gcc.texi: Likewise.\n\n\t* porting.texi: Use the GFDL.\n\n\t* objc-features.texi: Use the GFDL.\n\n\t* gxxint.texi: Remove.\n\t* Make-lang.in: Remove all traces of gxxint.texi.\n\nFrom-SVN: r41700", "tree": {"sha": "52963658be3349969e94d39564b26e413f4acc7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52963658be3349969e94d39564b26e413f4acc7f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c3aac51278b48f1571a2ff73b567ff108741c588", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3aac51278b48f1571a2ff73b567ff108741c588", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3aac51278b48f1571a2ff73b567ff108741c588", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3aac51278b48f1571a2ff73b567ff108741c588/comments", "author": null, "committer": null, "parents": [{"sha": "5fd893d507445801b27c0ebb36b4b802b4df86af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fd893d507445801b27c0ebb36b4b802b4df86af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fd893d507445801b27c0ebb36b4b802b4df86af"}], "stats": {"total": 2072, "additions": 115, "deletions": 1957}, "files": [{"sha": "b50c9c9af862d2768820c8460f6658cd71942f81", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3aac51278b48f1571a2ff73b567ff108741c588/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3aac51278b48f1571a2ff73b567ff108741c588/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c3aac51278b48f1571a2ff73b567ff108741c588", "patch": "@@ -1,3 +1,9 @@\n+2001-04-30  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* fdl.texi: New file.\n+\t* c-tree.texi: Use the GFDL.\n+\t* gcc.texi: Likewise.\n+\n 2001-04-30  Stan Shebs  <shebs@apple.com>\n \n \t* invoke.texi: Add a section documenting Objective-C options."}, {"sha": "a3ba52d8496d2b2fbcc0de7ac9df68ba10466bf9", "filename": "gcc/c-tree.texi", "status": "modified", "additions": 25, "deletions": 19, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3aac51278b48f1571a2ff73b567ff108741c588/gcc%2Fc-tree.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3aac51278b48f1571a2ff73b567ff108741c588/gcc%2Fc-tree.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.texi?ref=c3aac51278b48f1571a2ff73b567ff108741c588", "patch": "@@ -1,24 +1,5 @@\n \\input texinfo\n \n-@c ---------------------------------------------------------------------\n-@c This file is part of GNU CC.\n-@c \n-@c GNU CC is free software; you can redistribute it and/or modify\n-@c it under the terms of the GNU General Public License as published by\n-@c the Free Software Foundation; either version 2, or (at your option)\n-@c any later version.\n-@c\n-@c GNU CC is distributed in the hope that it will be useful,\n-@c but WITHOUT ANY WARRANTY; without even the implied warranty of\n-@c MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-@c GNU General Public License for more details.\n-@c \n-@c You should have received a copy of the GNU General Public License\n-@c along with GNU CC; see the file COPYING.  If not, write to\n-@c the Free Software Foundation, 59 Temple Place - Suite 330,\n-@c Boston, MA 02111-1307, USA.\n-@c ---------------------------------------------------------------------\n-\n @c ---------------------------------------------------------------------\n @c Prologue\n @c ---------------------------------------------------------------------\n@@ -48,6 +29,24 @@ Copyright (c) 1999, 2000, 2001 Free Software Foundation, Inc.\n @page\n @vskip 0pt plus 1filll\n Copyright @copyright{} 1999, 2000, 2001 Free Software Foundation, Inc.\n+\n+Permission is granted to copy, distribute and/or modify this document\n+under the terms of the GNU Free Documentation License, Version 1.1 or\n+any later version published by the Free Software Foundation; with the\n+Invariant Sections being ``GNU General Public License'', the Front-Cover\n+texts being (a) (see below), and with the Back-Cover Texts being (b)\n+(see below).  A copy of the license is included in the section entitled\n+``GNU Free Documentation License''.\n+\n+(a) The FSF's Front-Cover Text is:\n+\n+     A GNU Manual\n+\n+(b) The FSF's Back-Cover Text is:\n+\n+     You have freedom to copy and modify this GNU Manual, like GNU\n+     software.  Copies published by the Free Software Foundation raise\n+     funds for GNU development.\n @end titlepage\n \n @c ---------------------------------------------------------------------\n@@ -101,6 +100,7 @@ not appear in C.\n * Functions::           Overloading, function bodies, and linkage.\n * Declarations::        Type declarations and variables.\n * Expressions::         From @code{typeid} to @code{throw}.\n+* GNU Free Documentation License:: How you can copy and share this manual.\n * Node Index::          The various types of tree nodes.\n * Function Index::      Functions and macros described in this manual.\n * Concept Index::       Index.\n@@ -2274,6 +2274,12 @@ not return a value.\n \n @end table\n \n+@c ---------------------------------------------------------------------\n+@c GFDL\n+@c ---------------------------------------------------------------------\n+\n+@include fdl.texi\n+\n @c ---------------------------------------------------------------------\n @c Node Index\n @c ---------------------------------------------------------------------"}, {"sha": "1d0f7cedfdd4e6158a6771ecc8edc7b9ec031534", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3aac51278b48f1571a2ff73b567ff108741c588/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3aac51278b48f1571a2ff73b567ff108741c588/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c3aac51278b48f1571a2ff73b567ff108741c588", "patch": "@@ -1,3 +1,8 @@\n+2001-04-30  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* gxxint.texi: Remove.\n+\t* Make-lang.in: Remove all traces of gxxint.texi.\n+\n Mon Apr 30 16:14:10 2001  Mark P Mitchell  <mark@codesourcery.com>\n \n \t* decl2.c (start_static_initialization_or_destruction): Correct"}, {"sha": "84baffb4043b9b8b2a3dc25ca7ce1006e9891c60", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 2, "deletions": 25, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3aac51278b48f1571a2ff73b567ff108741c588/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3aac51278b48f1571a2ff73b567ff108741c588/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=c3aac51278b48f1571a2ff73b567ff108741c588", "patch": "@@ -129,15 +129,9 @@ c++.all.cross: g++-cross$(exeext) $(DEMANGLER_PROG)\n c++.start.encap: g++$(exeext)\n c++.rest.encap: $(DEMANGLER_PROG)\n \n-c++.info: $(srcdir)/cp/g++int.info\n+c++.info: \n c++.dvi:\n \n-$(srcdir)/cp/g++int.info: $(srcdir)/cp/gxxint.texi\n-\tif [ x$(BUILD_INFO) = xinfo ]; then \\\n-\t  rm -f $(srcdir)/cp/g++int.info*; \\\n-\t  cd $(srcdir)/cp && $(MAKEINFO) -o g++int.info gxxint.texi; \\\n-\telse true; fi\n-\n #\f\n # Install hooks:\n # cc1plus is installed elsewhere as part of $(COMPILERS).\n@@ -185,22 +179,7 @@ c++.install-common: installdirs\n \t  fi ; \\\n \tfi\n \n-c++.install-info: c++.info installdirs\n-\tif [ -f cc1plus$(exeext) ] ; then \\\n-\t  if [ -f $(srcdir)/cp/g++int.info ]; then \\\n-\t    rm -f $(infodir)/g++int.info*; \\\n-\t    for f in $(srcdir)/cp/g++int.info*; do \\\n-\t      realfile=`echo $$f | sed -e 's|.*/\\([^/]*\\)$$|\\1|'`; \\\n-\t      $(INSTALL_DATA) $$f $(infodir)/$$realfile; \\\n-\t    done; \\\n-\t    chmod a-x $(infodir)/g++int.info*; \\\n-\t  else true; fi; \\\n-\telse true; fi\n-\t-if [ -f cc1plus$(exeext) ] && [ -f $(infodir)/g++int.info ]; then \\\n-\t  if $(SHELL) -c 'install-info --version' >/dev/null 2>&1; then \\\n-\t    install-info --dir-file=$(infodir)/dir $(infodir)/g++int.info; \\\n-\t  else true; fi; \\\n-\telse true; fi\n+c++.install-info: \n \n c++.install-man: installdirs $(srcdir)/cp/g++.1\n \t-if [ -f cc1plus$(exeext) ] ; then \\\n@@ -224,7 +203,6 @@ c++.uninstall:\n \t-rm -rf $(bindir)/$(DEMANGLER_CROSS_NAME)$(exeext)\n \t-rm -rf $(man1dir)/$(GXX_INSTALL_NAME)$(manext)\n \t-rm -rf $(man1dir)/$(GXX_CROSS_NAME)$(manext)\n-\t-rm -rf $(infodir)/g++int.info*\n #\f\n # Clean hooks:\n # A lot of the ancillary files are deleted by the main makefile.\n@@ -239,7 +217,6 @@ c++.distclean:\n c++.extraclean:\n c++.maintainer-clean:\n \t-rm -f $(srcdir)/cp/parse.c $(srcdir)/cp/parse.h\n-\t-rm -f $(srcdir)/cp/g++int.info*\n #\f\n # Stage hooks:\n # The main makefile has already created stage?/cp."}, {"sha": "eaf812222f48d3a405ffe53703b365f86aa42183", "filename": "gcc/cp/gxxint.texi", "status": "removed", "additions": 0, "deletions": 1859, "changes": 1859, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fd893d507445801b27c0ebb36b4b802b4df86af/gcc%2Fcp%2Fgxxint.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fd893d507445801b27c0ebb36b4b802b4df86af/gcc%2Fcp%2Fgxxint.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fgxxint.texi?ref=5fd893d507445801b27c0ebb36b4b802b4df86af", "patch": "@@ -1,1859 +0,0 @@\n-\\input texinfo  @c -*-texinfo-*-\n-@c %**start of header \n-@setfilename g++int.info\n-@settitle G++ internals\n-@setchapternewpage odd\n-@ifinfo\n-@dircategory Programming\n-@direntry\n-* G++ internals: (g++int).     G++ Internals.\n-@end direntry\n-@end ifinfo\n-@c %**end of header\n-     \n-@node Top, Limitations of g++, (dir), (dir)\n-@chapter Internal Architecture of the Compiler\n-\n-This is meant to describe the C++ front-end for gcc in detail.\n-Questions and comments to Jason Merrill @email{jason@@redhat.com} and\n-Mark Mitchell @email{mark@@codesourcery.com}.\n-\n-@menu\n-* Limitations of g++::          \n-* Routines::                    \n-* Implementation Specifics::    \n-* Glossary::                    \n-* Macros::                      \n-* Typical Behavior::            \n-* Coding Conventions::          \n-* Templates::                   \n-* Access Control::              \n-* Error Reporting::             \n-* Parser::                      \n-* Exception Handling::          \n-* Free Store::                  \n-* Mangling::  Function name mangling for C++ and Java\n-* Concept Index::               \n-@end menu\n-\n-@node Limitations of g++, Routines, Top, Top\n-@section Limitations of g++\n-\n-@itemize @bullet\n-@item\n-Limitations on input source code: 240 nesting levels with the parser\n-stacksize (YYSTACKSIZE) set to 500 (the default), and requires around\n-16.4k swap space per nesting level.  The parser needs about 2.09 *\n-number of nesting levels worth of stackspace.\n-\n-@cindex pushdecl_class_level\n-@item\n-I suspect there are other uses of pushdecl_class_level that do not call\n-set_identifier_type_value in tandem with the call to\n-pushdecl_class_level.  It would seem to be an omission.\n-\n-@end itemize\n-\n-@node Routines, Implementation Specifics, Limitations of g++, Top\n-@section Routines\n-\n-This section describes some of the routines used in the C++ front-end.\n-\n-@code{build_vtable} and @code{prepare_fresh_vtable} is used only within\n-the @file{cp-class.c} file, and only in @code{finish_struct} and\n-@code{modify_vtable_entries}.\n-\n-@code{build_vtable}, @code{prepare_fresh_vtable}, and\n-@code{finish_struct} are the only routines that set @code{DECL_VPARENT}.\n-\n-@code{finish_struct} can steal the virtual function table from parents,\n-this prohibits related_vslot from working.  When finish_struct steals,\n-we know that\n-\n-@example\n-get_binfo (DECL_FIELD_CONTEXT (CLASSTYPE_VFIELD (t)), t, 0)\n-@end example\n-\n-@noindent\n-will get the related binfo.\n-\n-@code{layout_basetypes} does something with the VIRTUALS.\n-\n-Supposedly (according to Tiemann) most of the breadth first searching\n-done, like in @code{get_base_distance} and in @code{get_binfo} was not\n-because of any design decision.  I have since found out the at least one\n-part of the compiler needs the notion of depth first binfo searching, I\n-am going to try and convert the whole thing, it should just work.  The\n-term left-most refers to the depth first left-most node.  It uses\n-@code{MAIN_VARIANT == type} as the condition to get left-most, because\n-the things that have @code{BINFO_OFFSET}s of zero are shared and will\n-have themselves as their own @code{MAIN_VARIANT}s.  The non-shared right\n-ones, are copies of the left-most one, hence if it is its own\n-@code{MAIN_VARIANT}, we know it IS a left-most one, if it is not, it is\n-a non-left-most one.\n-\n-@code{get_base_distance}'s path and distance matters in its use in:\n-\n-@itemize @bullet\n-@item\n-@code{prepare_fresh_vtable} (the code is probably wrong)\n-@item\n-@code{init_vfields} Depends upon distance probably in a safe way,\n-build_offset_ref might use partial paths to do further lookups,\n-hack_identifier is probably not properly checking access.\n-\n-@item\n-@code{get_first_matching_virtual} probably should check for\n-@code{get_base_distance} returning -2.\n-\n-@item\n-@code{resolve_offset_ref} should be called in a more deterministic\n-manner.  Right now, it is called in some random contexts, like for\n-arguments at @code{build_method_call} time, @code{default_conversion}\n-time, @code{convert_arguments} time, @code{build_unary_op} time,\n-@code{build_c_cast} time, @code{build_modify_expr} time,\n-@code{convert_for_assignment} time, and\n-@code{convert_for_initialization} time.\n-\n-But, there are still more contexts it needs to be called in, one was the\n-ever simple:\n-\n-@example\n-if (obj.*pmi != 7)\n-   @dots{}\n-@end example\n-\n-Seems that the problems were due to the fact that @code{TREE_TYPE} of\n-the @code{OFFSET_REF} was not a @code{OFFSET_TYPE}, but rather the type\n-of the referent (like @code{INTEGER_TYPE}).  This problem was fixed by\n-changing @code{default_conversion} to check @code{TREE_CODE (x)},\n-instead of only checking @code{TREE_CODE (TREE_TYPE (x))} to see if it\n-was @code{OFFSET_TYPE}.\n-\n-@end itemize\n-\n-@node Implementation Specifics, Glossary, Routines, Top\n-@section Implementation Specifics\n-\n-@itemize @bullet\n-@item Explicit Initialization\n-\n-The global list @code{current_member_init_list} contains the list of\n-mem-initializers specified in a constructor declaration.  For example:\n-\n-@example\n-foo::foo() : a(1), b(2) @{@}\n-@end example\n-\n-@noindent\n-will initialize @samp{a} with 1 and @samp{b} with 2.\n-@code{expand_member_init} places each initialization (a with 1) on the\n-global list.  Then, when the fndecl is being processed,\n-@code{emit_base_init} runs down the list, initializing them.  It used to\n-be the case that g++ first ran down @code{current_member_init_list},\n-then ran down the list of members initializing the ones that weren't\n-explicitly initialized.  Things were rewritten to perform the\n-initializations in order of declaration in the class.  So, for the above\n-example, @samp{a} and @samp{b} will be initialized in the order that\n-they were declared:\n-\n-@example\n-class foo @{ public: int b; int a; foo (); @};\n-@end example\n-\n-@noindent\n-Thus, @samp{b} will be initialized with 2 first, then @samp{a} will be\n-initialized with 1, regardless of how they're listed in the mem-initializer.\n-\n-@item The Explicit Keyword\n-\n-The use of @code{explicit} on a constructor is used by @code{grokdeclarator}\n-to set the field @code{DECL_NONCONVERTING_P}.  That value is used by\n-@code{build_method_call} and @code{build_user_type_conversion_1} to decide\n-if a particular constructor should be used as a candidate for conversions.\n-\n-@end itemize\n-\n-@node Glossary, Macros, Implementation Specifics, Top\n-@section Glossary\n-\n-@table @r\n-@item binfo\n-The main data structure in the compiler used to represent the\n-inheritance relationships between classes.  The data in the binfo can be\n-accessed by the BINFO_ accessor macros.\n-\n-@item vtable\n-@itemx virtual function table\n-\n-The virtual function table holds information used in virtual function\n-dispatching.  In the compiler, they are usually referred to as vtables,\n-or vtbls.  The first index is not used in the normal way, I believe it\n-is probably used for the virtual destructor.\n-\n-@item vfield\n-\n-vfields can be thought of as the base information needed to build\n-vtables.  For every vtable that exists for a class, there is a vfield.\n-See also vtable and virtual function table pointer.  When a type is used\n-as a base class to another type, the virtual function table for the\n-derived class can be based upon the vtable for the base class, just\n-extended to include the additional virtual methods declared in the\n-derived class.  The virtual function table from a virtual base class is\n-never reused in a derived class.  @code{is_normal} depends upon this.\n-\n-@item virtual function table pointer\n-\n-These are @code{FIELD_DECL}s that are pointer types that point to\n-vtables.  See also vtable and vfield.\n-@end table\n-\n-@node Macros, Typical Behavior, Glossary, Top\n-@section Macros\n-\n-This section describes some of the macros used on trees.  The list\n-should be alphabetical.  Eventually all macros should be documented\n-here.\n-\n-@table @code\n-@item BINFO_BASETYPES\n-A vector of additional binfos for the types inherited by this basetype.\n-The binfos are fully unshared (except for virtual bases, in which\n-case the binfo structure is shared).\n-\n-   If this basetype describes type D as inherited in C,\n-   and if the basetypes of D are E anf F,\n-   then this vector contains binfos for inheritance of E and F by C.\n-\n-Has values of:\n-\n-\tTREE_VECs\n-\n-\n-@item BINFO_INHERITANCE_CHAIN\n-Temporarily used to represent specific inheritances.  It usually points\n-to the binfo associated with the lesser derived type, but it can be\n-reversed by reverse_path.  For example:\n-\n-@example\n-\tZ ZbY\tleast derived\n-\t|\n-\tY YbX\n-\t|\n-\tX Xb\tmost derived\n-\n-TYPE_BINFO (X) == Xb\n-BINFO_INHERITANCE_CHAIN (Xb) == YbX\n-BINFO_INHERITANCE_CHAIN (Yb) == ZbY\n-BINFO_INHERITANCE_CHAIN (Zb) == 0\n-@end example\n-\n-Not sure is the above is really true, get_base_distance has is point\n-towards the most derived type, opposite from above.\n-\n-Set by build_vbase_path, recursive_bounded_basetype_p,\n-get_base_distance, lookup_field, lookup_fnfields, and reverse_path.\n-\n-What things can this be used on:\n-\n-\tTREE_VECs that are binfos\n-\n-\n-@item BINFO_OFFSET\n-The offset where this basetype appears in its containing type.\n-BINFO_OFFSET slot holds the offset (in bytes) from the base of the\n-complete object to the base of the part of the object that is allocated\n-on behalf of this `type'.  This is always 0 except when there is\n-multiple inheritance.\n-\n-Used on TREE_VEC_ELTs of the binfos BINFO_BASETYPES (...) for example.\n-\n-\n-@item BINFO_VIRTUALS\n-A unique list of functions for the virtual function table.  See also\n-TYPE_BINFO_VIRTUALS.\n-\n-What things can this be used on:\n-\n-\tTREE_VECs that are binfos\n-\n-\n-@item BINFO_VTABLE\n-Used to find the VAR_DECL that is the virtual function table associated\n-with this binfo.  See also TYPE_BINFO_VTABLE.  To get the virtual\n-function table pointer, see CLASSTYPE_VFIELD.\n-\n-What things can this be used on:\n-\n-\tTREE_VECs that are binfos\n-\n-Has values of:\n-\n-\tVAR_DECLs that are virtual function tables\n-\n-\n-@item BLOCK_SUPERCONTEXT\n-In the outermost scope of each function, it points to the FUNCTION_DECL\n-node.  It aids in better DWARF support of inline functions.\n-\n-\n-@item CLASSTYPE_TAGS\n-CLASSTYPE_TAGS is a linked (via TREE_CHAIN) list of member classes of a\n-class. TREE_PURPOSE is the name, TREE_VALUE is the type (pushclass scans\n-these and calls pushtag on them.)\n-\n-finish_struct scans these to produce TYPE_DECLs to add to the\n-TYPE_FIELDS of the type.\n-\n-It is expected that name found in the TREE_PURPOSE slot is unique,\n-resolve_scope_to_name is one such place that depends upon this\n-uniqueness.\n-\n-\n-@item CLASSTYPE_METHOD_VEC\n-The following is true after finish_struct has been called (on the\n-class?) but not before.  Before finish_struct is called, things are\n-different to some extent.  Contains a TREE_VEC of methods of the class.\n-The TREE_VEC_LENGTH is the number of differently named methods plus one\n-for the 0th entry.  The 0th entry is always allocated, and reserved for\n-ctors and dtors.  If there are none, TREE_VEC_ELT(N,0) == NULL_TREE.\n-Each entry of the TREE_VEC is a FUNCTION_DECL.  For each FUNCTION_DECL,\n-there is a DECL_CHAIN slot.  If the FUNCTION_DECL is the last one with a\n-given name, the DECL_CHAIN slot is NULL_TREE.  Otherwise it is the next\n-method that has the same name (but a different signature).  It would\n-seem that it is not true that because the DECL_CHAIN slot is used in\n-this way, we cannot call pushdecl to put the method in the global scope\n-(cause that would overwrite the TREE_CHAIN slot), because they use\n-different _CHAINs.  finish_struct_methods setups up one version of the\n-TREE_CHAIN slots on the FUNCTION_DECLs.\n-\n-friends are kept in TREE_LISTs, so that there's no need to use their\n-TREE_CHAIN slot for anything.\n-\n-Has values of:\n-\n-\tTREE_VECs\n-\t\n-\n-@item CLASSTYPE_VFIELD\n-Seems to be in the process of being renamed TYPE_VFIELD.  Use on types\n-to get the main virtual function table pointer.  To get the virtual\n-function table use BINFO_VTABLE (TYPE_BINFO ()).\n-\n-Has values of:\n-\n-\tFIELD_DECLs that are virtual function table pointers\n-\n-What things can this be used on:\n-\n-\tRECORD_TYPEs\n-\n-\n-@item DECL_CLASS_CONTEXT\n-Identifies the context that the _DECL was found in.  For virtual function\n-tables, it points to the type associated with the virtual function\n-table.  See also DECL_CONTEXT, DECL_FIELD_CONTEXT and DECL_FCONTEXT.\n-\n-The difference between this and DECL_CONTEXT, is that for virtuals\n-functions like:\n-\n-@example\n-struct A\n-@{\n-  virtual int f ();\n-@};\n-\n-struct B : A\n-@{\n-  int f ();\n-@};\n-\n-DECL_CONTEXT (A::f) == A\n-DECL_CLASS_CONTEXT (A::f) == A\n-\n-DECL_CONTEXT (B::f) == A\n-DECL_CLASS_CONTEXT (B::f) == B\n-@end example\n-\n-Has values of:\n-\n-\tRECORD_TYPEs, or UNION_TYPEs\n-\n-What things can this be used on:\n-\n-\tTYPE_DECLs, _DECLs\n-\n-\n-@item DECL_CONTEXT\n-Identifies the context that the _DECL was found in.  Can be used on\n-virtual function tables to find the type associated with the virtual\n-function table, but since they are FIELD_DECLs, DECL_FIELD_CONTEXT is a\n-better access method.  Internally the same as DECL_FIELD_CONTEXT, so\n-don't us both.  See also DECL_FIELD_CONTEXT, DECL_FCONTEXT and\n-DECL_CLASS_CONTEXT.\n-\n-Has values of:\n-\n-\tRECORD_TYPEs\n-\n-\n-What things can this be used on:\n-\n-@display\n-VAR_DECLs that are virtual function tables\n-_DECLs\n-@end display\n-\n-\n-@item DECL_FIELD_CONTEXT\n-Identifies the context that the FIELD_DECL was found in.  Internally the\n-same as DECL_CONTEXT, so don't us both.  See also DECL_CONTEXT,\n-DECL_FCONTEXT and DECL_CLASS_CONTEXT.\n-\n-Has values of:\n-\n-\tRECORD_TYPEs\n-\n-What things can this be used on:\n-\n-@display\n-FIELD_DECLs that are virtual function pointers\n-FIELD_DECLs\n-@end display\n-\n-\n-@item DECL_NAME\n-\n-Has values of:\n-\n-@display\n-0 for things that don't have names\n-IDENTIFIER_NODEs for TYPE_DECLs\n-@end display\n-\n-@item DECL_IGNORED_P\n-A bit that can be set to inform the debug information output routines in\n-the back-end that a certain _DECL node should be totally ignored.\n-\n-Used in cases where it is known that the debugging information will be\n-output in another file, or where a sub-type is known not to be needed\n-because the enclosing type is not needed.\n-\n-A compiler constructed virtual destructor in derived classes that do not\n-define an explicit destructor that was defined explicit in a base class\n-has this bit set as well.  Also used on __FUNCTION__ and\n-__PRETTY_FUNCTION__ to mark they are ``compiler generated.''  c-decl and\n-c-lex.c both want DECL_IGNORED_P set for ``internally generated vars,''\n-and ``user-invisible variable.''\n-\n-Functions built by the C++ front-end such as default destructors,\n-virtual destructors and default constructors want to be marked that\n-they are compiler generated, but unsure why.\n-\n-Currently, it is used in an absolute way in the C++ front-end, as an\n-optimization, to tell the debug information output routines to not\n-generate debugging information that will be output by another separately\n-compiled file.\n-\n-\n-@item DECL_VIRTUAL_P\n-A flag used on FIELD_DECLs and VAR_DECLs.  (Documentation in tree.h is\n-wrong.)  Used in VAR_DECLs to indicate that the variable is a vtable.\n-It is also used in FIELD_DECLs for vtable pointers.\n-\n-What things can this be used on:\n-\n-\tFIELD_DECLs and VAR_DECLs\n-\n-\n-@item DECL_VPARENT\n-Used to point to the parent type of the vtable if there is one, else it\n-is just the type associated with the vtable.  Because of the sharing of\n-virtual function tables that goes on, this slot is not very useful, and\n-is in fact, not used in the compiler at all.  It can be removed.\n-\n-What things can this be used on:\n-\n-\tVAR_DECLs that are virtual function tables\n-\n-Has values of:\n-\n-\tRECORD_TYPEs maybe UNION_TYPEs\n-\n-\n-@item DECL_FCONTEXT\n-Used to find the first baseclass in which this FIELD_DECL is defined.\n-See also DECL_CONTEXT, DECL_FIELD_CONTEXT and DECL_CLASS_CONTEXT.\n-\n-How it is used:\n-\n-\tUsed when writing out debugging information about vfield and\n-\tvbase decls.\n-\n-What things can this be used on:\n-\n-\tFIELD_DECLs that are virtual function pointers\n-\tFIELD_DECLs\n-\n-\n-@item DECL_REFERENCE_SLOT\n-Used to hold the initialize for the reference.\n-\n-What things can this be used on:\n-\n-\tPARM_DECLs and VAR_DECLs that have a reference type\n-\n-\n-@item DECL_VINDEX\n-Used for FUNCTION_DECLs in two different ways.  Before the structure\n-containing the FUNCTION_DECL is laid out, DECL_VINDEX may point to a\n-FUNCTION_DECL in a base class which is the FUNCTION_DECL which this\n-FUNCTION_DECL will replace as a virtual function.  When the class is\n-laid out, this pointer is changed to an INTEGER_CST node which is\n-suitable to find an index into the virtual function table.  See\n-get_vtable_entry as to how one can find the right index into the virtual\n-function table.  The first index 0, of a virtual function table it not\n-used in the normal way, so the first real index is 1.\n-\n-DECL_VINDEX may be a TREE_LIST, that would seem to be a list of\n-overridden FUNCTION_DECLs.  add_virtual_function has code to deal with\n-this when it uses the variable base_fndecl_list, but it would seem that\n-somehow, it is possible for the TREE_LIST to pursist until method_call,\n-and it should not.\n-\n-\n-What things can this be used on:\n-\n-\tFUNCTION_DECLs\n-\n-\n-@item DECL_SOURCE_FILE\n-Identifies what source file a particular declaration was found in.\n-\n-Has values of:\n-\n-\t\"<built-in>\" on TYPE_DECLs to mean the typedef is built in\n-\n-\n-@item DECL_SOURCE_LINE\n-Identifies what source line number in the source file the declaration\n-was found at.\n-\n-Has values of:\n-\n-@display\n-0 for an undefined label\n-\n-0 for TYPE_DECLs that are internally generated\n-\n-0 for FUNCTION_DECLs for functions generated by the compiler\n-\t(not yet, but should be)\n-\n-0 for ``magic'' arguments to functions, that the user has no\n-\tcontrol over\n-@end display\n-\n-\n-@item TREE_USED\n-\n-Has values of:\n-\n-\t0 for unused labels\n-\n-\n-@item TREE_ADDRESSABLE\n-A flag that is set for any type that has a constructor.\n-\n-\n-@item TREE_COMPLEXITY\n-They seem a kludge way to track recursion, poping, and pushing.  They only\n-appear in cp-decl.c and cp-decl2.c, so the are a good candidate for\n-proper fixing, and removal.\n-\n-\n-@item TREE_HAS_CONSTRUCTOR\n-A flag to indicate when a CALL_EXPR represents a call to a constructor.\n-If set, we know that the type of the object, is the complete type of the\n-object, and that the value returned is nonnull.  When used in this\n-fashion, it is an optimization.  Can also be used on SAVE_EXPRs to\n-indicate when they are of fixed type and nonnull.  Can also be used on\n-INDIRECT_EXPRs on CALL_EXPRs that represent a call to a constructor.\n-\n-\n-@item TREE_PRIVATE\n-Set for FIELD_DECLs by finish_struct.  But not uniformly set.\n-\n-The following routines do something with PRIVATE access:\n-build_method_call, alter_access, finish_struct_methods,\n-finish_struct, convert_to_aggr, CWriteLanguageDecl, CWriteLanguageType,\n-CWriteUseObject, compute_access, lookup_field, dfs_pushdecl,\n-GNU_xref_member, dbxout_type_fields, dbxout_type_method_1\n-\n-\n-@item TREE_PROTECTED\n-The following routines do something with PROTECTED access:\n-build_method_call, alter_access, finish_struct, convert_to_aggr,\n-CWriteLanguageDecl, CWriteLanguageType, CWriteUseObject,\n-compute_access, lookup_field, GNU_xref_member, dbxout_type_fields,\n-dbxout_type_method_1\n-\n-\n-@item TYPE_BINFO\n-Used to get the binfo for the type.\n-\n-Has values of:\n-\n-\tTREE_VECs that are binfos\n-\n-What things can this be used on:\n-\n-\tRECORD_TYPEs\n-\n-\n-@item TYPE_BINFO_BASETYPES\n-See also BINFO_BASETYPES.\n-\n-@item TYPE_BINFO_VIRTUALS\n-A unique list of functions for the virtual function table.  See also\n-BINFO_VIRTUALS.\n-\n-What things can this be used on:\n-\n-\tRECORD_TYPEs\n-\n-\n-@item TYPE_BINFO_VTABLE\n-Points to the virtual function table associated with the given type.\n-See also BINFO_VTABLE.\n-\n-What things can this be used on:\n-\n-\tRECORD_TYPEs\n-\n-Has values of:\n-\n-\tVAR_DECLs that are virtual function tables\n-\n-\n-@item TYPE_NAME\n-Names the type.\n-\n-Has values of:\n-\n-@display\n-0 for things that don't have names.\n-should be IDENTIFIER_NODE for RECORD_TYPEs UNION_TYPEs and \n-        ENUM_TYPEs.\n-TYPE_DECL for RECORD_TYPEs, UNION_TYPEs and ENUM_TYPEs, but \n-        shouldn't be.\n-TYPE_DECL for typedefs, unsure why.\n-@end display\n-\n-What things can one use this on:\n-\n-@display\n-TYPE_DECLs\n-RECORD_TYPEs\n-UNION_TYPEs\n-ENUM_TYPEs\n-@end display\n-\n-History:\n-\n-\tIt currently points to the TYPE_DECL for RECORD_TYPEs,\n-\tUNION_TYPEs and ENUM_TYPEs, but it should be history soon.\n-\n-\n-@item TYPE_METHODS\n-Synonym for @code{CLASSTYPE_METHOD_VEC}.  Chained together with\n-@code{TREE_CHAIN}.  @file{dbxout.c} uses this to get at the methods of a\n-class.\n-\n-\n-@item TYPE_DECL\n-Used to represent typedefs, and used to represent bindings layers.\n-\n-Components:\n-\n-\tDECL_NAME is the name of the typedef.  For example, foo would\n-\tbe found in the DECL_NAME slot when @code{typedef int foo;} is\n-\tseen.\n-\n-\tDECL_SOURCE_LINE identifies what source line number in the\n-\tsource file the declaration was found at.  A value of 0\n-\tindicates that this TYPE_DECL is just an internal binding layer\n-\tmarker, and does not correspond to a user supplied typedef.\n-\n-\tDECL_SOURCE_FILE\n-\n-@item TYPE_FIELDS\n-A linked list (via @code{TREE_CHAIN}) of member types of a class.  The\n-list can contain @code{TYPE_DECL}s, but there can also be other things\n-in the list apparently.  See also @code{CLASSTYPE_TAGS}.\n-\n-\n-@item TYPE_VIRTUAL_P\n-A flag used on a @code{FIELD_DECL} or a @code{VAR_DECL}, indicates it is\n-a virtual function table or a pointer to one.  When used on a\n-@code{FUNCTION_DECL}, indicates that it is a virtual function.  When\n-used on an @code{IDENTIFIER_NODE}, indicates that a function with this\n-same name exists and has been declared virtual.\n-\n-When used on types, it indicates that the type has virtual functions, or\n-is derived from one that does.\n-\n-Not sure if the above about virtual function tables is still true.  See\n-also info on @code{DECL_VIRTUAL_P}.\n-\n-What things can this be used on:\n-\n-\tFIELD_DECLs, VAR_DECLs, FUNCTION_DECLs, IDENTIFIER_NODEs\n-\n-\n-@item VF_BASETYPE_VALUE\n-Get the associated type from the binfo that caused the given vfield to\n-exist.  This is the least derived class (the most parent class) that\n-needed a virtual function table.  It is probably the case that all uses\n-of this field are misguided, but they need to be examined on a\n-case-by-case basis.  See history for more information on why the\n-previous statement was made.\n-\n-Set at @code{finish_base_struct} time.\n-\n-What things can this be used on:\n-\n-\tTREE_LISTs that are vfields\n-\n-History:\n-\n-\tThis field was used to determine if a virtual function table's\n-\tslot should be filled in with a certain virtual function, by\n-\tchecking to see if the type returned by VF_BASETYPE_VALUE was a\n-\tparent of the context in which the old virtual function existed.\n-\tThis incorrectly assumes that a given type _could_ not appear as\n-\ta parent twice in a given inheritance lattice.  For single\n-\tinheritance, this would in fact work, because a type could not\n-\tpossibly appear more than once in an inheritance lattice, but\n-\twith multiple inheritance, a type can appear more than once.\n-\n-\n-@item VF_BINFO_VALUE\n-Identifies the binfo that caused this vfield to exist.  If this vfield\n-is from the first direct base class that has a virtual function table,\n-then VF_BINFO_VALUE is NULL_TREE, otherwise it will be the binfo of the\n-direct base where the vfield came from.  Can use @code{TREE_VIA_VIRTUAL}\n-on result to find out if it is a virtual base class.  Related to the\n-binfo found by\n-\n-@example\n-get_binfo (VF_BASETYPE_VALUE (vfield), t, 0)\n-@end example\n-\n-@noindent\n-where @samp{t} is the type that has the given vfield.\n-\n-@example\n-get_binfo (VF_BASETYPE_VALUE (vfield), t, 0)\n-@end example\n-\n-@noindent\n-will return the binfo for the given vfield.\n-\n-May or may not be set at @code{modify_vtable_entries} time.  Set at\n-@code{finish_base_struct} time.\n-\n-What things can this be used on:\n-\n-\tTREE_LISTs that are vfields\n-\n-\n-@item VF_DERIVED_VALUE\n-Identifies the type of the most derived class of the vfield, excluding\n-the class this vfield is for.\n-\n-Set at @code{finish_base_struct} time.\n-\n-What things can this be used on:\n-\n-\tTREE_LISTs that are vfields\n-\n-\n-@item VF_NORMAL_VALUE\n-Identifies the type of the most derived class of the vfield, including\n-the class this vfield is for.\n-\n-Set at @code{finish_base_struct} time.\n-\n-What things can this be used on:\n-\n-\tTREE_LISTs that are vfields\n-\n-\n-@item WRITABLE_VTABLES\n-This is a option that can be defined when building the compiler, that\n-will cause the compiler to output vtables into the data segment so that\n-the vtables maybe written.  This is undefined by default, because\n-normally the vtables should be unwritable.  People that implement object\n-I/O facilities may, or people that want to change the dynamic type of\n-objects may want to have the vtables writable.  Another way of achieving\n-this would be to make a copy of the vtable into writable memory, but the\n-drawback there is that that method only changes the type for one object.\n-\n-@end table\n-\n-@node Typical Behavior, Coding Conventions, Macros, Top\n-@section Typical Behavior\n-\n-@cindex parse errors\n-\n-Whenever seemingly normal code fails with errors like\n-@code{syntax error at `\\@{'}, it's highly likely that grokdeclarator is\n-returning a NULL_TREE for whatever reason.\n-\n-@node Coding Conventions, Templates, Typical Behavior, Top\n-@section Coding Conventions\n-\n-It should never be that case that trees are modified in-place by the\n-back-end, @emph{unless} it is guaranteed that the semantics are the same\n-no matter how shared the tree structure is.  @file{fold-const.c} still\n-has some cases where this is not true, but rms hypothesizes that this\n-will never be a problem.\n-\n-@node Templates, Access Control, Coding Conventions, Top\n-@section Templates\n-\n-A template is represented by a @code{TEMPLATE_DECL}.  The specific\n-fields used are:\n-\n-@table @code\n-@item DECL_TEMPLATE_RESULT\n-The generic decl on which instantiations are based.  This looks just\n-like any other decl.\n-\n-@item DECL_TEMPLATE_PARMS\n-The parameters to this template.\n-@end table\n-\n-The generic decl is parsed as much like any other decl as possible,\n-given the parameterization.  The template decl is not built up until the\n-generic decl has been completed.  For template classes, a template decl\n-is generated for each member function and static data member, as well.\n-\n-Template members of template classes are represented by a TEMPLATE_DECL\n-for the class' parameters around another TEMPLATE_DECL for the member's\n-parameters.\n-\n-All declarations that are instantiations or specializations of templates\n-refer to their template and parameters through DECL_TEMPLATE_INFO.\n-\n-How should I handle parsing member functions with the proper param\n-decls?  Set them up again or try to use the same ones?  Currently we do\n-the former.  We can probably do this without any extra machinery in\n-store_pending_inline, by deducing the parameters from the decl in\n-do_pending_inlines.  PRE_PARSED_TEMPLATE_DECL?\n-\n-If a base is a parm, we can't check anything about it.  If a base is not\n-a parm, we need to check it for name binding.  Do finish_base_struct if\n-no bases are parameterized (only if none, including indirect, are\n-parms).  Nah, don't bother trying to do any of this until instantiation\n--- we only need to do name binding in advance.\n-\n-Always set up method vec and fields, inc. synthesized methods.  Really?\n-We can't know the types of the copy folks, or whether we need a\n-destructor, or can have a default ctor, until we know our bases and\n-fields.  Otherwise, we can assume and fix ourselves later.  Hopefully.\n-\n-@node Access Control, Error Reporting, Templates, Top\n-@section Access Control\n-The function compute_access returns one of three values:\n-\n-@table @code\n-@item access_public\n-means that the field can be accessed by the current lexical scope.\n-\n-@item access_protected\n-means that the field cannot be accessed by the current lexical scope\n-because it is protected.\n-\n-@item access_private\n-means that the field cannot be accessed by the current lexical scope\n-because it is private.\n-@end table\n-\n-DECL_ACCESS is used for access declarations; alter_access creates a list\n-of types and accesses for a given decl.\n-\n-Formerly, DECL_@{PUBLIC,PROTECTED,PRIVATE@} corresponded to the return\n-codes of compute_access and were used as a cache for compute_access.\n-Now they are not used at all.\n-\n-TREE_PROTECTED and TREE_PRIVATE are used to record the access levels\n-granted by the containing class.  BEWARE: TREE_PUBLIC means something\n-completely unrelated to access control!\n-\n-@node Error Reporting, Parser, Access Control, Top\n-@section Error Reporting\n-\n-The C++ front-end uses a call-back mechanism to allow functions to print\n-out reasonable strings for types and functions without putting extra\n-logic in the functions where errors are found.  The interface is through\n-the @code{cp_error} function (or @code{cp_warning}, etc.).  The\n-syntax is exactly like that of @code{error}, except that a few more\n-conversions are supported:\n-\n-@itemize @bullet\n-@item\n-%C indicates a value of `enum tree_code'.\n-@item\n-%D indicates a *_DECL node.\n-@item\n-%E indicates a *_EXPR node.\n-@item\n-%L indicates a value of `enum languages'.\n-@item\n-%P indicates the name of a parameter (i.e. \"this\", \"1\", \"2\", ...)\n-@item\n-%T indicates a *_TYPE node.\n-@item\n-%O indicates the name of an operator (MODIFY_EXPR -> \"operator =\").\n-\n-@end itemize\n-\n-There is some overlap between these; for instance, any of the node\n-options can be used for printing an identifier (though only @code{%D}\n-tries to decipher function names).\n-\n-For a more verbose message (@code{class foo} as opposed to just @code{foo},\n-including the return type for functions), use @code{%#c}.\n-To have the line number on the error message indicate the line of the\n-DECL, use @code{cp_error_at} and its ilk; to indicate which argument you want,\n-use @code{%+D}, or it will default to the first.\n-\n-@node Parser, Exception Handling, Error Reporting, Top\n-@section Parser\n-\n-Some comments on the parser:\n-\n-The @code{after_type_declarator} / @code{notype_declarator} hack is\n-necessary in order to allow redeclarations of @code{TYPENAME}s, for\n-instance\n-\n-@example\n-typedef int foo;\n-class A @{\n-  char *foo;\n-@};\n-@end example\n-\n-In the above, the first @code{foo} is parsed as a @code{notype_declarator},\n-and the second as a @code{after_type_declarator}.\n-\n-Ambiguities:\n-\n-There are currently four reduce/reduce ambiguities in the parser.  They are:\n-\n-1) Between @code{template_parm} and\n-@code{named_class_head_sans_basetype}, for the tokens @code{aggr\n-identifier}.  This situation occurs in code looking like\n-\n-@example\n-template <class T> class A @{ @};\n-@end example\n-\n-It is ambiguous whether @code{class T} should be parsed as the\n-declaration of a template type parameter named @code{T} or an unnamed\n-constant parameter of type @code{class T}.  Section 14.6, paragraph 3 of\n-the January '94 working paper states that the first interpretation is\n-the correct one.  This ambiguity results in two reduce/reduce conflicts.\n-\n-2) Between @code{primary} and @code{type_id} for code like @samp{int()}\n-in places where both can be accepted, such as the argument to\n-@code{sizeof}.  Section 8.1 of the pre-San Diego working paper specifies\n-that these ambiguous constructs will be interpreted as @code{typename}s.\n-This ambiguity results in six reduce/reduce conflicts between\n-@samp{absdcl} and @samp{functional_cast}.\n-\n-3) Between @code{functional_cast} and\n-@code{complex_direct_notype_declarator}, for various token strings.\n-This situation occurs in code looking like\n-\n-@example\n-int (*a);\n-@end example\n-\n-This code is ambiguous; it could be a declaration of the variable\n-@samp{a} as a pointer to @samp{int}, or it could be a functional cast of\n-@samp{*a} to @samp{int}.  Section 6.8 specifies that the former\n-interpretation is correct.  This ambiguity results in 7 reduce/reduce\n-conflicts.  Another aspect of this ambiguity is code like 'int (x[2]);',\n-which is resolved at the '[' and accounts for 6 reduce/reduce conflicts\n-between @samp{direct_notype_declarator} and\n-@samp{primary}/@samp{overqualified_id}.  Finally, there are 4 r/r\n-conflicts between @samp{expr_or_declarator} and @samp{primary} over code\n-like 'int (a);', which could probably be resolved but would also\n-probably be more trouble than it's worth.  In all, this situation\n-accounts for 17 conflicts.  Ack!\n-\n-The second case above is responsible for the failure to parse 'LinppFile\n-ppfile (String (argv[1]), &outs, argc, argv);' (from Rogue Wave\n-Math.h++) as an object declaration, and must be fixed so that it does\n-not resolve until later.\n-\n-4) Indirectly between @code{after_type_declarator} and @code{parm}, for\n-type names.  This occurs in (as one example) code like\n-\n-@example\n-typedef int foo, bar;\n-class A @{\n-  foo (bar);\n-@};\n-@end example\n-\n-What is @code{bar} inside the class definition?  We currently interpret\n-it as a @code{parm}, as does Cfront, but IBM xlC interprets it as an\n-@code{after_type_declarator}.  I believe that xlC is correct, in light\n-of 7.1p2, which says \"The longest sequence of @i{decl-specifiers} that\n-could possibly be a type name is taken as the @i{decl-specifier-seq} of\n-a @i{declaration}.\"  However, it seems clear that this rule must be\n-violated in the case of constructors.  This ambiguity accounts for 8\n-conflicts.\n-\n-Unlike the others, this ambiguity is not recognized by the Working Paper.\n-\n-@node  Exception Handling, Free Store, Parser, Top\n-@section Exception Handling\n-\n-Note, exception handling in g++ is still under development.  \n-\n-This section describes the mapping of C++ exceptions in the C++\n-front-end, into the back-end exception handling framework.\n-\n-The basic mechanism of exception handling in the back-end is\n-unwind-protect a la elisp.  This is a general, robust, and language\n-independent representation for exceptions.\n-\n-The C++ front-end exceptions are mapping into the unwind-protect\n-semantics by the C++ front-end.  The mapping is describe below.\n-\n-When -frtti is used, rtti is used to do exception object type checking,\n-when it isn't used, the encoded name for the type of the object being\n-thrown is used instead.  All code that originates exceptions, even code\n-that throws exceptions as a side effect, like dynamic casting, and all\n-code that catches exceptions must be compiled with either -frtti, or\n--fno-rtti.  It is not possible to mix rtti base exception handling\n-objects with code that doesn't use rtti.  The exceptions to this, are\n-code that doesn't catch or throw exceptions, catch (...), and code that\n-just rethrows an exception.\n-\n-Currently we use the normal mangling used in building functions names\n-(int's are \"i\", const char * is PCc) to build the non-rtti base type\n-descriptors for exception handling.  These descriptors are just plain\n-NULL terminated strings, and internally they are passed around as char\n-*.\n-\n-In C++, all cleanups should be protected by exception regions.  The\n-region starts just after the reason why the cleanup is created has\n-ended.  For example, with an automatic variable, that has a constructor,\n-it would be right after the constructor is run.  The region ends just\n-before the finalization is expanded.  Since the backend may expand the\n-cleanup multiple times along different paths, once for normal end of the\n-region, once for non-local gotos, once for returns, etc, the backend\n-must take special care to protect the finalization expansion, if the\n-expansion is for any other reason than normal region end, and it is\n-`inline' (it is inside the exception region).  The backend can either\n-choose to move them out of line, or it can created an exception region\n-over the finalization to protect it, and in the handler associated with\n-it, it would not run the finalization as it otherwise would have, but\n-rather just rethrow to the outer handler, careful to skip the normal\n-handler for the original region.\n-\n-In Ada, they will use the more runtime intensive approach of having\n-fewer regions, but at the cost of additional work at run time, to keep a\n-list of things that need cleanups.  When a variable has finished\n-construction, they add the cleanup to the list, when the come to the end\n-of the lifetime of the variable, the run the list down.  If the take a\n-hit before the section finishes normally, they examine the list for\n-actions to perform.  I hope they add this logic into the back-end, as it\n-would be nice to get that alternative approach in C++.\n-\n-On an rs6000, xlC stores exception objects on that stack, under the try\n-block.  When is unwinds down into a handler, the frame pointer is\n-adjusted back to the normal value for the frame in which the handler\n-resides, and the stack pointer is left unchanged from the time at which\n-the object was thrown.  This is so that there is always someplace for\n-the exception object, and nothing can overwrite it, once we start\n-throwing.  The only bad part, is that the stack remains large.\n-\n-The below points out some things that work in g++'s exception handling.\n-\n-All completely constructed temps and local variables are cleaned up in\n-all unwinded scopes.  Completely constructed parts of partially\n-constructed objects are cleaned up.  This includes partially built\n-arrays.  Exception specifications are now handled.  Thrown objects are\n-now cleaned up all the time.  We can now tell if we have an active\n-exception being thrown or not (__eh_type != 0).  We use this to call\n-terminate if someone does a throw; without there being an active\n-exception object.  uncaught_exception () works.  Exception handling\n-should work right if you optimize.  Exception handling should work with\n--fpic or -fPIC.\n-\n-The below points out some flaws in g++'s exception handling, as it now\n-stands.\n-\n-Only exact type matching or reference matching of throw types works when\n--fno-rtti is used.  Only works on a SPARC (like Suns) (both -mflat and\n--mno-flat models work), SPARClite, Hitachi SH, i386, arm, rs6000,\n-PowerPC, Alpha, mips, VAX, m68k and z8k machines.  SPARC v9 may not\n-work.  HPPA is mostly done, but throwing between a shared library and\n-user code doesn't yet work.  Some targets have support for data-driven\n-unwinding.  Partial support is in for all other machines, but a stack\n-unwinder called __unwind_function has to be written, and added to\n-libgcc2 for them.  The new EH code doesn't rely upon the\n-__unwind_function for C++ code, instead it creates per function\n-unwinders right inside the function, unfortunately, on many platforms\n-the definition of RETURN_ADDR_RTX in the tm.h file for the machine port\n-is wrong.  See below for details on __unwind_function.  RTL_EXPRs for EH\n-cond variables for && and || exprs should probably be wrapped in\n-UNSAVE_EXPRs, and RTL_EXPRs tweaked so that they can be unsaved.\n-\n-We only do pointer conversions on exception matching a la 15.3 p2 case\n-3: `A handler with type T, const T, T&, or const T& is a match for a\n-throw-expression with an object of type E if [3]T is a pointer type and\n-E is a pointer type that can be converted to T by a standard pointer\n-conversion (_conv.ptr_) not involving conversions to pointers to private\n-or protected base classes.' when -frtti is given.\n-\n-We don't call delete on new expressions that die because the ctor threw\n-an exception.  See except/18 for a test case.\n-\n-15.2 para 13: The exception being handled should be rethrown if control\n-reaches the end of a handler of the function-try-block of a constructor\n-or destructor, right now, it is not.\n-\n-15.2 para 12: If a return statement appears in a handler of\n-function-try-block of a constructor, the program is ill-formed, but this\n-isn't diagnosed.\n-\n-15.2 para 11: If the handlers of a function-try-block contain a jump\n-into the body of a constructor or destructor, the program is ill-formed,\n-but this isn't diagnosed.\n-\n-15.2 para 9: Check that the fully constructed base classes and members\n-of an object are destroyed before entering the handler of a\n-function-try-block of a constructor or destructor for that object.\n-\n-build_exception_variant should sort the incoming list, so that it\n-implements set compares, not exact list equality.  Type smashing should\n-smash exception specifications using set union.\n-\n-Thrown objects are usually allocated on the heap, in the usual way.  If\n-one runs out of heap space, throwing an object will probably never work.\n-This could be relaxed some by passing an __in_chrg parameter to track\n-who has control over the exception object.  Thrown objects are not\n-allocated on the heap when they are pointer to object types.  We should\n-extend it so that all small (<4*sizeof(void*)) objects are stored\n-directly, instead of allocated on the heap.\n-\n-When the backend returns a value, it can create new exception regions\n-that need protecting.  The new region should rethrow the object in\n-context of the last associated cleanup that ran to completion.\n-\n-The structure of the code that is generated for C++ exception handling\n-code is shown below:\n-\n-@example\n-Ln:\t\t\t\t\tthrow value;\n-        copy value onto heap\n-        jump throw (Ln, id, address of copy of value on heap)\n-\n-                                        try @{\n-+Lstart:\tthe start of the main EH region\n-|...\t\t\t\t\t\t...\n-+Lend:\t\tthe end of the main EH region\n-                                        @} catch (T o) @{\n-\t\t\t\t\t\t...1\n-                                        @}\n-Lresume:\n-        nop\tused to make sure there is something before\n-                the next region ends, if there is one\n-...                                     ...\n-\n-        jump Ldone\n-[\n-Lmainhandler:    handler for the region Lstart-Lend\n-\tcleanup\n-] zero or more, depending upon automatic vars with dtors\n-+Lpartial:\n-|        jump Lover\n-+Lhere:\n-        rethrow (Lhere, same id, same obj);\n-Lterm:\t\thandler for the region Lpartial-Lhere\n-        call terminate\n-Lover:\n-[\n- [\n-        call throw_type_match\n-        if (eq) @{\n- ] these lines disappear when there is no catch condition\n-+Lsregion2:\n-|\t...1\n-|\tjump Lresume\n-|Lhandler:\thandler for the region Lsregion2-Leregion2\n-|\trethrow (Lresume, same id, same obj);\n-+Leregion2\n-        @}\n-] there are zero or more of these sections, depending upon how many\n-  catch clauses there are\n------------------------------ expand_end_all_catch --------------------------\n-                here we have fallen off the end of all catch\n-                clauses, so we rethrow to outer\n-        rethrow (Lresume, same id, same obj);\n------------------------------ expand_end_all_catch --------------------------\n-[\n-L1:     maybe throw routine\n-] depending upon if we have expanded it or not\n-Ldone:\n-        ret\n-\n-start_all_catch emits labels: Lresume, \n-\n-@end example\n-\n-The __unwind_function takes a pointer to the throw handler, and is\n-expected to pop the stack frame that was built to call it, as well as\n-the frame underneath and then jump to the throw handler.  It must\n-restore all registers to their proper values as well as all other\n-machine state as determined by the context in which we are unwinding\n-into.  The way I normally start is to compile:\n-\n-        void *g;\n-        foo(void* a) @{ g = a; @}\n-\n-with -S, and change the thing that alters the PC (return, or ret\n-usually) to not alter the PC, making sure to leave all other semantics\n-(like adjusting the stack pointer, or frame pointers) in.  After that,\n-replicate the prologue once more at the end, again, changing the PC\n-altering instructions, and finally, at the very end, jump to `g'.\n-\n-It takes about a week to write this routine, if someone wants to\n-volunteer to write this routine for any architecture, exception support\n-for that architecture will be added to g++.  Please send in those code\n-donations.  One other thing that needs to be done, is to double check\n-that __builtin_return_address (0) works.\n-\n-@subsection Specific Targets\n-\n-For the alpha, the __unwind_function will be something resembling:\n-\n-@example\n-void\n-__unwind_function(void *ptr)\n-@{\n-  /* First frame */\n-  asm (\"ldq $15, 8($30)\"); /* get the saved frame ptr; 15 is fp, 30 is sp */\n-  asm (\"bis $15, $15, $30\"); /* reload sp with the fp we found */\n-\n-  /* Second frame */\n-  asm (\"ldq $15, 8($30)\"); /* fp */\n-  asm (\"bis $15, $15, $30\"); /* reload sp with the fp we found */\n-\n-  /* Return */\n-  asm (\"ret $31, ($16), 1\"); /* return to PTR, stored in a0 */\n-@}\n-@end example\n-\n-@noindent\n-However, there are a few problems preventing it from working.  First of\n-all, the gcc-internal function @code{__builtin_return_address} needs to\n-work given an argument of 0 for the alpha.  As it stands as of August\n-30th, 1995, the code for @code{BUILT_IN_RETURN_ADDRESS} in @file{expr.c}\n-will definitely not work on the alpha.  Instead, we need to define\n-the macros @code{DYNAMIC_CHAIN_ADDRESS} (maybe),\n-@code{RETURN_ADDR_IN_PREVIOUS_FRAME}, and definitely need a new\n-definition for @code{RETURN_ADDR_RTX}.\n-\n-In addition (and more importantly), we need a way to reliably find the\n-frame pointer on the alpha.  The use of the value 8 above to restore the\n-frame pointer (register 15) is incorrect.  On many systems, the frame\n-pointer is consistently offset to a specific point on the stack.  On the\n-alpha, however, the frame pointer is pushed last.  First the return\n-address is stored, then any other registers are saved (e.g., @code{s0}),\n-and finally the frame pointer is put in place.  So @code{fp} could have\n-an offset of 8, but if the calling function saved any registers at all,\n-they add to the offset.\n-\n-The only places the frame size is noted are with the @samp{.frame}\n-directive, for use by the debugger and the OSF exception handling model\n-(useless to us), and in the initial computation of the new value for\n-@code{sp}, the stack pointer.  For example, the function may start with:\n-\n-@example\n-lda $30,-32($30)\n-.frame $15,32,$26,0\n-@end example \n-\n-@noindent\n-The 32 above is exactly the value we need.  With this, we can be sure\n-that the frame pointer is stored 8 bytes less---in this case, at 24(sp)).\n-The drawback is that there is no way that I (Brendan) have found to let\n-us discover the size of a previous frame @emph{inside} the definition\n-of @code{__unwind_function}.\n-\n-So to accomplish exception handling support on the alpha, we need two\n-things: first, a way to figure out where the frame pointer was stored,\n-and second, a functional @code{__builtin_return_address} implementation\n-for except.c to be able to use it.\n-\n-Or just support DWARF 2 unwind info.\n-\n-@subsection New Backend Exception Support\n-\n-This subsection discusses various aspects of the design of the\n-data-driven model being implemented for the exception handling backend.\n-\n-The goal is to generate enough data during the compilation of user code,\n-such that we can dynamically unwind through functions at run time with a\n-single routine (@code{__throw}) that lives in libgcc.a, built by the\n-compiler, and dispatch into associated exception handlers.\n-\n-This information is generated by the DWARF 2 debugging backend, and\n-includes all of the information __throw needs to unwind an arbitrary\n-frame.  It specifies where all of the saved registers and the return\n-address can be found at any point in the function.\n-\n-Major disadvantages when enabling exceptions are:\n-\n-@itemize @bullet\n-@item\n-Code that uses caller saved registers, can't, when flow can be\n-transferred into that code from an exception handler.  In high performance\n-code this should not usually be true, so the effects should be minimal.\n-\n-@end itemize\n-\n-@subsection Backend Exception Support\n-\n-The backend must be extended to fully support exceptions.  Right now\n-there are a few hooks into the alpha exception handling backend that\n-resides in the C++ frontend from that backend that allows exception\n-handling to work in g++.  An exception region is a segment of generated\n-code that has a handler associated with it.  The exception regions are\n-denoted in the generated code as address ranges denoted by a starting PC\n-value and an ending PC value of the region.  Some of the limitations\n-with this scheme are:\n-\n-@itemize @bullet\n-@item\n-The backend replicates insns for such things as loop unrolling and\n-function inlining.  Right now, there are no hooks into the frontend's\n-exception handling backend to handle the replication of insns.  When\n-replication happens, a new exception region descriptor needs to be\n-generated for the new region.\n-\n-@item\n-The backend expects to be able to rearrange code, for things like jump\n-optimization.  Any rearranging of the code needs have exception region\n-descriptors updated appropriately.\n-\n-@item\n-The backend can eliminate dead code.  Any associated exception region\n-descriptor that refers to fully contained code that has been eliminated\n-should also be removed, although not doing this is harmless in terms of\n-semantics.\n-\n-@end itemize\n-\n-The above is not meant to be exhaustive, but does include all things I\n-have thought of so far.  I am sure other limitations exist.\n-\n-Below are some notes on the migration of the exception handling code\n-backend from the C++ frontend to the backend.\n-\n-NOTEs are to be used to denote the start of an exception region, and the\n-end of the region.  I presume that the interface used to generate these\n-notes in the backend would be two functions, start_exception_region and\n-end_exception_region (or something like that).  The frontends are\n-required to call them in pairs.  When marking the end of a region, an\n-argument can be passed to indicate the handler for the marked region.\n-This can be passed in many ways, currently a tree is used.  Another\n-possibility would be insns for the handler, or a label that denotes a\n-handler.  I have a feeling insns might be the best way to pass it.\n-Semantics are, if an exception is thrown inside the region, control is\n-transferred unconditionally to the handler.  If control passes through\n-the handler, then the backend is to rethrow the exception, in the\n-context of the end of the original region.  The handler is protected by\n-the conventional mechanisms; it is the frontend's responsibility to\n-protect the handler, if special semantics are required.\n-\n-This is a very low level view, and it would be nice is the backend\n-supported a somewhat higher level view in addition to this view.  This\n-higher level could include source line number, name of the source file,\n-name of the language that threw the exception and possibly the name of\n-the exception.  Kenner may want to rope you into doing more than just\n-the basics required by C++.  You will have to resolve this.  He may want\n-you to do support for non-local gotos, first scan for exception handler,\n-if none is found, allow the debugger to be entered, without any cleanups\n-being done.  To do this, the backend would have to know the difference\n-between a cleanup-rethrower, and a real handler, if would also have to\n-have a way to know if a handler `matches' a thrown exception, and this\n-is frontend specific.\n-\n-The stack unwinder is one of the hardest parts to do.  It is highly\n-machine dependent.  The form that kenner seems to like was a couple of\n-macros, that would do the machine dependent grunt work.  One preexisting\n-function that might be of some use is __builtin_return_address ().  One\n-macro he seemed to want was __builtin_return_address, and the other\n-would do the hard work of fixing up the registers, adjusting the stack\n-pointer, frame pointer, arg pointer and so on.\n-\n-\n-@node Free Store, Mangling, Exception Handling, Top\n-@section Free Store\n-\n-@code{operator new []} adds a magic cookie to the beginning of arrays\n-for which the number of elements will be needed by @code{operator delete\n-[]}.  These are arrays of objects with destructors and arrays of objects\n-that define @code{operator delete []} with the optional size_t argument.\n-This cookie can be examined from a program as follows:\n-\n-@example\n-typedef unsigned long size_t;\n-extern \"C\" int printf (const char *, ...);\n-\n-size_t nelts (void *p)\n-@{\n-  struct cookie @{\n-    size_t nelts __attribute__ ((aligned (sizeof (double))));\n-  @};\n-\n-  cookie *cp = (cookie *)p;\n-  --cp;\n-\n-  return cp->nelts;\n-@}\n-\n-struct A @{\n-  ~A() @{ @}\n-@};\n-\n-main()\n-@{\n-  A *ap = new A[3];\n-  printf (\"%ld\\n\", nelts (ap));\n-@}\n-@end example\n-\n-@section Linkage\n-The linkage code in g++ is horribly twisted in order to meet two design goals:\n-\n-1) Avoid unnecessary emission of inlines and vtables.\n-\n-2) Support pedantic assemblers like the one in AIX.\n-\n-To meet the first goal, we defer emission of inlines and vtables until\n-the end of the translation unit, where we can decide whether or not they\n-are needed, and how to emit them if they are.\n-        \n-@node Mangling, Concept Index, Free Store, Top\n-@section Function name mangling for C++ and Java\n-\n-Both C++ and Java provide overloaded functions and methods,\n-which are methods with the same types but different parameter lists.\n-Selecting the correct version is done at compile time.\n-Though the overloaded functions have the same name in the source code,\n-they need to be translated into different assembler-level names,\n-since typical assemblers and linkers cannot handle overloading.\n-This process of encoding the parameter types with the method name\n-into a unique name is called @dfn{name mangling}.  The inverse\n-process is called @dfn{demangling}.\n-\n-It is convenient that C++ and Java use compatible mangling schemes,\n-since the makes life easier for tools such as gdb, and it eases\n-integration between C++ and Java.\n-\n-Note there is also a standard \"Jave Native Interface\" (JNI) which\n-implements a different calling convention, and uses a different\n-mangling scheme.  The JNI is a rather abstract ABI so Java can call methods\n-written in C or C++; \n-we are concerned here about a lower-level interface primarily\n-intended for methods written in Java, but that can also be used for C++\n-(and less easily C).\n-\n-Note that on systems that follow BSD tradition, a C identifier @code{var}\n-would get \"mangled\" into the assembler name @samp{_var}.  On such\n-systems, all other mangled names are also prefixed by a @samp{_}\n-which is not shown in the following examples.\n-\n-@subsection Method name mangling\n-\n-C++ mangles a method by emitting the function name, followed by @code{__},\n-followed by encodings of any method qualifiers (such as @code{const}),\n-followed by the mangling of the method's class,\n-followed by the mangling of the parameters, in order.\n-\n-For example @code{Foo::bar(int, long) const} is mangled\n-as @samp{bar__C3Fooil}.\n-\n-For a constructor, the method name is left out.\n-That is @code{Foo::Foo(int, long) const}  is mangled \n-as @samp{__C3Fooil}. \n-\n-GNU Java does the same.\n-\n-@subsection Primitive types\n-\n-The C++ types @code{int}, @code{long}, @code{short}, @code{char},\n-and @code{long long} are mangled as @samp{i}, @samp{l},\n-@samp{s}, @samp{c}, and @samp{x}, respectively.\n-The corresponding unsigned types have @samp{U} prefixed\n-to the mangling.  The type @code{signed char} is mangled @samp{Sc}.\n-\n-The C++ and Java floating-point types @code{float} and @code{double}\n-are mangled as @samp{f} and @samp{d} respectively.\n-\n-The C++ @code{bool} type and the Java @code{boolean} type are\n-mangled as @samp{b}.\n-\n-The C++ @code{wchar_t} and the Java @code{char} types are\n-mangled as @samp{w}.\n-\n-The Java integral types @code{byte}, @code{short}, @code{int}\n-and @code{long} are mangled as @samp{c}, @samp{s}, @samp{i},\n-and @samp{x}, respectively.\n-\n-C++ code that has included @code{javatypes.h} will mangle\n-the typedefs  @code{jbyte}, @code{jshort}, @code{jint}\n-and @code{jlong} as respectively @samp{c}, @samp{s}, @samp{i},\n-and @samp{x}.  (This has not been implemented yet.)\n-\n-@subsection Mangling of simple names\n-\n-A simple class, package, template, or namespace name is\n-encoded as the number of characters in the name, followed by\n-the actual characters.  Thus the class @code{Foo}\n-is encoded as @samp{3Foo}.\n-\n-If any of the characters in the name are not alphanumeric\n-(i.e not one of the standard ASCII letters, digits, or '_'),\n-or the initial character is a digit, then the name is\n-mangled as a sequence of encoded Unicode letters.\n-A Unicode encoding starts with a @samp{U} to indicate\n-that Unicode escapes are used, followed by the number of\n-bytes used by the Unicode encoding, followed by the bytes\n-representing the encoding.  ASSCI letters and\n-non-initial digits are encoded without change.  However, all\n-other characters (including underscore and initial digits) are\n-translated into a sequence starting with an underscore,\n-followed by the big-endian 4-hex-digit lower-case encoding of the character.\n-\n-If a method name contains Unicode-escaped characters, the\n-entire mangled method name is followed by a @samp{U}.\n-\n-For example, the method @code{X\\u0319::M\\u002B(int)} is encoded as\n-@samp{M_002b__U6X_0319iU}.\n-\n-\n-@subsection Pointer and reference types\n-\n-A C++ pointer type is mangled as @samp{P} followed by the\n-mangling of the type pointed to.\n-\n-A C++ reference type as mangled as @samp{R} followed by the\n-mangling of the type referenced.\n-\n-A Java object reference type is equivalent\n-to a C++ pointer parameter, so we mangle such an parameter type\n-as @samp{P} followed by the mangling of the class name.\n-\n-@subsection Squangled type compression\n-\n-Squangling (enabled with the @samp{-fsquangle} option), utilizes the\n-@samp{B} code to indicate reuse of a previously seen type within an\n-indentifier. Types are recognized in a left to right manner and given\n-increasing values, which are appended to the code in the standard\n-manner. Ie, multiple digit numbers are delimited by @samp{_}\n-characters. A type is considered to be any non primitive type,\n-regardless of whether its a parameter, template parameter, or entire\n-template. Certain codes are considered modifiers of a type, and are not\n-included as part of the type. These are the @samp{C}, @samp{V},\n-@samp{P}, @samp{A}, @samp{R}, @samp{U} and @samp{u} codes, denoting\n-constant, volatile, pointer, array, reference, unsigned, and restrict.\n-These codes may precede a @samp{B} type in order to make the required\n-modifications to the type.\n-\n-For example:\n-@example\n-template <class T> class class1 @{ @};\n-\n-template <class T> class class2 @{ @};\n-\n-class class3 @{ @};\n-\n-int f(class2<class1<class3> > a ,int b, const class1<class3>&c, class3 *d) @{ @}\n-\n-    B0 -> class2<class1<class3>\n-    B1 -> class1<class3>\n-    B2 -> class3\n-@end example\n-Produces the mangled name @samp{f__FGt6class21Zt6class11Z6class3iRCB1PB2}.\n-The int parameter is a basic type, and does not receive a B encoding...\n-\n-@subsection Qualified names\n-\n-Both C++ and Java allow a class to be lexically nested inside another\n-class.  C++ also supports namespaces.\n-Java also supports packages.\n-\n-These are all mangled the same way:  First the letter @samp{Q}\n-indicates that we are emitting a qualified name.\n-That is followed by the number of parts in the qualified name.\n-If that number is 9 or less, it is emitted with no delimiters.\n-Otherwise, an underscore is written before and after the count.\n-Then follows each part of the qualified name, as described above.\n-\n-For example @code{Foo::\\u0319::Bar} is encoded as\n-@samp{Q33FooU5_03193Bar}.\n-\n-Squangling utilizes the the letter @samp{K} to indicate a \n-remembered portion of a qualified name. As qualified names are processed\n-for an identifier, the names are numbered and remembered in a \n-manner similar to the @samp{B} type compression code. \n-Names are recognized left to right, and given increasing values, which are\n-appended to the code in the standard manner. ie, multiple digit numbers\n-are delimited by @samp{_} characters.\n-\n-For example \n-@example\n-class Andrew \n-@{\n-  class WasHere \n-  @{\n-      class AndHereToo \n-      @{\n-      @};\n-  @};\n-@};\n-\n-f(Andrew&r1, Andrew::WasHere& r2, Andrew::WasHere::AndHereToo& r3) @{ @}\n-\n-   K0 ->  Andrew\n-   K1 ->  Andrew::WasHere\n-   K2 ->  Andrew::WasHere::AndHereToo\n-@end example\n-Function @samp{f()} would be mangled as : \n-@samp{f__FR6AndrewRQ2K07WasHereRQ2K110AndHereToo}\n-\n-There are some occasions when either a @samp{B} or @samp{K} code could\n-be chosen, preference is always given to the @samp{B} code. Ie, the example\n-in the section on @samp{B} mangling could have used a @samp{K} code \n-instead of @samp{B2}.\n-\n-@subsection Templates\n-\n-A class template instantiation is encoded as the letter @samp{t},\n-followed by the encoding of the template name, followed\n-the number of template parameters, followed by encoding of the template\n-parameters.  If a template parameter is a type, it is written\n-as a @samp{Z} followed by the encoding of the type.  If it is a\n-template, it is encoded as @samp{z} followed by the parameter\n-of the template template parameter and the template name.\n-\n-A function template specialization (either an instantiation or an\n-explicit specialization) is encoded by an @samp{H} followed by the\n-encoding of the template parameters, as described above, followed by an\n-@samp{_}, the encoding of the argument types to the template function\n-(not the specialization), another @samp{_}, and the return type.  (Like\n-the argument types, the return type is the return type of the function\n-template, not the specialization.)  Template parameters in the argument\n-and return types are encoded by an @samp{X} for type parameters, \n-@samp{zX} for template parameters, \n-or a @samp{Y} for constant parameters, an index indicating their position\n-in the template parameter list declaration, and their template depth.\n-\n-@subsection Arrays\n-\n-C++ array types are mangled by emitting @samp{A}, followed by\n-the length of the array, followed by an @samp{_}, followed by\n-the mangling of the element type.  Of course, normally\n-array parameter types decay into a pointer types, so you\n-don't see this.\n-\n-Java arrays are objects.  A Java type @code{T[]} is mangled\n-as if it were the C++ type @code{JArray<T>}.\n-For example @code{java.lang.String[]} is encoded as\n-@samp{Pt6JArray1ZPQ34java4lang6String}.\n-\n-@subsection Static fields\n-\n-Both C++ and Java classes can have static fields.\n-These are allocated statically, and are shared among all instances.\n-\n-The mangling starts with a prefix (@samp{_} in most systems), which is\n-followed by the mangling\n-of the class name, followed by the \"joiner\" and finally the field name.\n-The joiner (see @code{JOINER} in @code{cp-tree.h}) is a special\n-separator character.  For historical reasons (and idiosyncracies\n-of assembler syntax) it can @samp{$} or @samp{.} (or even\n-@samp{_} on a few systems).  If the joiner is @samp{_} then the prefix\n-is @samp{__static_} instead of just @samp{_}.\n-\n-For example @code{Foo::Bar::var} (or @code{Foo.Bar.var} in Java syntax)\n-would be encoded as @samp{_Q23Foo3Bar$var} or @samp{_Q23Foo3Bar.var}\n-(or rarely @samp{__static_Q23Foo3Bar_var}).\n-\n-If the name of a static variable needs Unicode escapes,\n-the Unicode indicator @samp{U} comes before the \"joiner\".\n-This @code{\\u1234Foo::var\\u3445} becomes @code{_U8_1234FooU.var_3445}.\n-\n-@subsection Table of demangling code characters\n-\n-The following special characters are used in mangling:\n-\n-@table @samp\n-@item A\n-Indicates a C++ array type.\n-\n-@item b\n-Encodes the C++ @code{bool} type,\n-and the Java @code{boolean} type.\n-\n-@item B\n-Used for squangling. Similar in concept to the 'T' non-squangled code.\n-\n-@item c\n-Encodes the C++ @code{char} type, and the Java @code{byte} type.\n-\n-@item C\n-A modifier to indicate a @code{const} type.\n-Also used to indicate a @code{const} member function\n-(in which cases it precedes the encoding of the method's class).\n-\n-@item d\n-Encodes the C++ and Java @code{double} types.\n-\n-@item e\n-Indicates extra unknown arguments @code{...}.\n-\n-@item E\n-Indicates the opening parenthesis of an expression.\n-\n-@item f\n-Encodes the C++ and Java @code{float} types.\n-\n-@item F\n-Used to indicate a function type.\n-\n-@item H\n-Used to indicate a template function.\n-\n-@item i\n-Encodes the C++ and Java @code{int} types.\n-\n-@item I\n-Encodes typedef names of the form @code{int@var{n}_t}, where @var{n} is a\n-positive decimal number.  The @samp{I} is followed by either two\n-hexidecimal digits, which encode the value of @var{n}, or by an\n-arbitrary number of hexidecimal digits between underscores.  For\n-example, @samp{I40} encodes the type @code{int64_t}, and @samp{I_200_}\n-encodes the type @code{int512_t}.\n-\n-@item J\n-Indicates a complex type.\n-\n-@item K\n-Used by squangling to compress qualified names.\n-\n-@item l\n-Encodes the C++ @code{long} type.\n-\n-@item n\n-Immediate repeated type. Followed by the repeat count.\n-\n-@item N \n-Repeated type. Followed by the repeat count of the repeated type,\n-followed by the type index of the repeated type. Due to a bug in\n-g++ 2.7.2, this is only generated if index is 0. Superceded by\n-@samp{n} when squangling.\n-\n-@item O\n-Pointer-to-member type.\n-\n-@item o\n-vector type.\n-\n-@item P\n-Indicates a pointer type.  Followed by the type pointed to.\n-\n-@item Q\n-Used to mangle qualified names, which arise from nested classes.\n-Also used for namespaces.\n-In Java used to mangle package-qualified names, and inner classes.\n-\n-@item r\n-Encodes the GNU C++ @code{long double} type.\n-\n-@item R\n-Indicates a reference type.  Followed by the referenced type.\n-\n-@item s\n-Encodes the C++ and java @code{short} types.\n-\n-@item S\n-A modifier that indicates that the following integer type is signed.\n-Only used with @code{char}.\n-\n-Also used as a modifier to indicate a static member function.\n-\n-@item t\n-Indicates a template instantiation.\n-\n-@item T\n-A back reference to a previously seen type.\n-\n-@item U\n-A modifier that indicates that the following integer type is unsigned.\n-Also used to indicate that the following class or namespace name\n-is encoded using Unicode-mangling.\n-\n-@item u\n-The @code{restrict} type qualifier.\n-\n-@item v\n-Encodes the C++ and Java @code{void} types.\n-\n-@item V\n-A modifier for a @code{volatile} type or method.\n-\n-@item w\n-Encodes the C++ @code{wchar_t} type, and the Java @code{char} types.\n-\n-@item W\n-Indicates the closing parenthesis of an expression.\n-\n-@item x\n-Encodes the GNU C++ @code{long long} type, and the Java @code{long} type.\n-\n-@item X\n-Encodes a template type parameter, when part of a function type.\n-\n-@item Y\n-Encodes a template constant parameter, when part of a function type.\n-\n-@item z\n-Used for template template parameters. \n-\n-@item Z\n-Used for template type parameters. \n-\n-@end table\n-\n-The letters @samp{G}, @samp{M}, @samp{O}, and @samp{p}\n-also seem to be used for obscure purposes ...\n-\n-@node Concept Index,  , Mangling, Top\n-\n-@section Concept Index\n-\n-@printindex cp\n-\n-@bye"}, {"sha": "365fbfecddb893aee9ed0fceb5b3f5db181cecd9", "filename": "gcc/gcc.texi", "status": "modified", "additions": 36, "deletions": 40, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3aac51278b48f1571a2ff73b567ff108741c588/gcc%2Fgcc.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3aac51278b48f1571a2ff73b567ff108741c588/gcc%2Fgcc.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.texi?ref=c3aac51278b48f1571a2ff73b567ff108741c588", "patch": "@@ -122,30 +122,23 @@ Boston, MA 02111-1307 USA\n Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n 1999, 2000, 2001 Free Software Foundation, Inc.\n @sp 1\n-Permission is granted to make and distribute verbatim copies of\n-this manual provided the copyright notice and this permission notice\n-are preserved on all copies.\n-@sp 1\n-@ignore\n-Permission is granted to process this file through Tex and print the\n-results, provided the printed document carries copying permission\n-notice identical to this one except for the removal of this paragraph\n-(this paragraph not being relevant to the printed manual).\n+Permission is granted to copy, distribute and/or modify this document\n+under the terms of the GNU Free Documentation License, Version 1.1 or\n+any later version published by the Free Software Foundation; with the\n+Invariant Sections being ``GNU General Public License'', the Front-Cover\n+texts being (a) (see below), and with the Back-Cover Texts being (b)\n+(see below).  A copy of the license is included in the section entitled\n+``GNU Free Documentation License''.\n \n-@end ignore\n-Permission is granted to copy and distribute modified versions of this\n-manual under the conditions for verbatim copying, provided also that the\n-sections entitled ``GNU General Public License'' and ``Funding for Free\n-Software'' are included exactly as in the original, and provided that \n-the entire resulting derived work is distributed under the terms of a \n-permission notice identical to this one.\n-@sp 1\n-Permission is granted to copy and distribute translations of this manual\n-into another language, under the above conditions for modified versions,\n-except that the sections entitled ``GNU General Public License'' and\n-``Funding for Free Software'', and this permission notice, may be \n-included in translations approved by the Free Software Foundation \n-instead of in the original English.\n+(a) The FSF's Front-Cover Text is:\n+\n+     A GNU Manual\n+\n+(b) The FSF's Back-Cover Text is:\n+\n+     You have freedom to copy and modify this GNU Manual, like GNU\n+     software.  Copies published by the Free Software Foundation raise\n+     funds for GNU development.\n @end ifnottex\n \n @setchapternewpage odd\n@@ -185,23 +178,23 @@ Last printed April, 1998.@*\n Printed copies are available for $50 each.@*\n ISBN 1-882114-37-X\n @sp 1\n-Permission is granted to make and distribute verbatim copies of\n-this manual provided the copyright notice and this permission notice\n-are preserved on all copies.\n-\n-Permission is granted to copy and distribute modified versions of this\n-manual under the conditions for verbatim copying, provided also that the\n-sections entitled ``GNU General Public License'' and ``Funding for Free\n-Software'' are included exactly as in the original, and provided that \n-the entire resulting derived work is distributed under the terms of a \n-permission notice identical to this one.\n-\n-Permission is granted to copy and distribute translations of this manual\n-into another language, under the above conditions for modified versions,\n-except that the sections entitled ``GNU General Public License'' and\n-``Funding for Free Software'', and this permission notice, may be \n-included in translations approved by the Free Software Foundation \n-instead of in the original English.\n+Permission is granted to copy, distribute and/or modify this document\n+under the terms of the GNU Free Documentation License, Version 1.1 or\n+any later version published by the Free Software Foundation; with the\n+Invariant Sections being ``GNU General Public License'', the Front-Cover\n+texts being (a) (see below), and with the Back-Cover Texts being (b)\n+(see below).  A copy of the license is included in the section entitled\n+``GNU Free Documentation License''.\n+\n+(a) The FSF's Front-Cover Text is:\n+\n+     A GNU Manual\n+\n+(b) The FSF's Back-Cover Text is:\n+\n+     You have freedom to copy and modify this GNU Manual, like GNU\n+     software.  Copies published by the Free Software Foundation raise\n+     funds for GNU development.\n @end titlepage\n @page\n \n@@ -260,6 +253,7 @@ bugs.  It corresponds to GCC version 3.1.\n \n * Copying::         GNU General Public License says\n                      how you can copy and share GCC.\n+* GNU Free Documentation License:: How you can copy and share this manual.\n * Contributors::    People who have contributed to GCC.\n \n * Index::\t    Index of concepts and symbol names.\n@@ -4906,6 +4900,8 @@ consider it more useful to permit linking proprietary applications with the\n library.  If this is what you want to do, use the GNU Library General\n Public License instead of this License.\n \n+@include fdl.texi\n+\n @node Contributors\n @unnumbered Contributors to GCC\n @cindex contributors"}, {"sha": "f54a1ab9ea15d1c6ca560e7713c955b5d6fe40c6", "filename": "libobjc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3aac51278b48f1571a2ff73b567ff108741c588/libobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3aac51278b48f1571a2ff73b567ff108741c588/libobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FChangeLog?ref=c3aac51278b48f1571a2ff73b567ff108741c588", "patch": "@@ -1,3 +1,7 @@\n+2001-04-30  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* objc-features.texi: Use the GFDL.\n+\n Wed Mar 21 04:44:58 EST 2001  John Wehle  (john@feith.com)\n \n \t* encoding.c (REAL_TYPE): Define."}, {"sha": "c8dc1cd202d6a18a2698ed93068c7a653b756b63", "filename": "libobjc/objc-features.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3aac51278b48f1571a2ff73b567ff108741c588/libobjc%2Fobjc-features.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3aac51278b48f1571a2ff73b567ff108741c588/libobjc%2Fobjc-features.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc-features.texi?ref=c3aac51278b48f1571a2ff73b567ff108741c588", "patch": "@@ -5,6 +5,9 @@\n @setchapternewpage odd\n @c %**end of header\n      \n+Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n+1999, 2000, 2001 Free Software Foundation, Inc.\n+\n @node Top, Executing code before main, (dir), (dir)\n @comment  node-name,  next,  previous,  up\n \n@@ -22,6 +25,7 @@ comments about this document to Ovidiu Predescu\n * Garbage Collection::          \n * Constant string objects::     \n * compatibility_alias::\n+* GNU Free Documentation License::\n @end menu\n \n @node Executing code before main, Type encoding, Top, Top\n@@ -431,6 +435,8 @@ as argument to this option. It is possible to have multiple compilation\n units referring to different constant string classes, neither the\n compiler nor the linker impose any restrictions in doing this.\n \n+@include fdl.texi\n+\n @c =========================================================================\n @node compatibility_alias,  , Constant string objects, Top\n @comment  node-name,  next,  previous,  up"}, {"sha": "b0646a9e51beb748b57f7072a2ba95ab828953a8", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3aac51278b48f1571a2ff73b567ff108741c588/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3aac51278b48f1571a2ff73b567ff108741c588/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c3aac51278b48f1571a2ff73b567ff108741c588", "patch": "@@ -1,3 +1,7 @@\n+2001-04-30  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* porting.texi: Use the GFDL.\n+\n 2001-04-30  Benjamin Kosnik  <bkoz@redhat.com>\n \n \tlibstdc++/2627 "}, {"sha": "7d421713dc29317f66e3bd121cf4dbb9e3306a15", "filename": "libstdc++-v3/porting.texi", "status": "modified", "additions": 27, "deletions": 14, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3aac51278b48f1571a2ff73b567ff108741c588/libstdc%2B%2B-v3%2Fporting.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3aac51278b48f1571a2ff73b567ff108741c588/libstdc%2B%2B-v3%2Fporting.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fporting.texi?ref=c3aac51278b48f1571a2ff73b567ff108741c588", "patch": "@@ -1,15 +1,3 @@\n-%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n-%\n-% File:   porting.texi\n-% Author: Mark Mitchell\n-% Date:   11/21/2000\n-%\n-% Contents:\n-%\n-% Copyright (c) 2000 by Free Software Foundation, Inc.\n-%\n-%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n-\n \\input texinfo\n \n @c ---------------------------------------------------------------------\n@@ -24,7 +12,7 @@\n This file explains how to port libstdc++-v3 (the GNU C++ library) to \n a new target.\n \n-Copyright (c) 2000 Free Software Foundation, Inc.\n+Copyright (c) 2000, 2001 Free Software Foundation, Inc.\n @end ifinfo\n \n @c ---------------------------------------------------------------------\n@@ -36,7 +24,25 @@ Copyright (c) 2000 Free Software Foundation, Inc.\n @author Mark Mitchell\n @page\n @vskip 0pt plus 1filll\n-Copyright @copyright{} 2000 Free Software Foundation, Inc.\n+Copyright @copyright{} 2000, 2001 Free Software Foundation, Inc.\n+\n+Permission is granted to copy, distribute and/or modify this document\n+under the terms of the GNU Free Documentation License, Version 1.1 or\n+any later version published by the Free Software Foundation; with the\n+Invariant Sections being ``GNU General Public License'', the Front-Cover\n+texts being (a) (see below), and with the Back-Cover Texts being (b)\n+(see below).  A copy of the license is included in the section entitled\n+``GNU Free Documentation License''.\n+\n+(a) The FSF's Front-Cover Text is:\n+\n+     A GNU Manual\n+\n+(b) The FSF's Back-Cover Text is:\n+\n+     You have freedom to copy and modify this GNU Manual, like GNU\n+     software.  Copies published by the Free Software Foundation raise\n+     funds for GNU development.\n @end titlepage\n \n @c ---------------------------------------------------------------------\n@@ -69,6 +75,7 @@ Here are the primary steps required to port the library:\n * Character types::     Implementing character classification.\n * Thread safety::       Implementing atomic operations.\n * Libtool::             Using libtool.\n+* GNU Free Documentation License:: How you can copy and share this manual.\n @end menu\n \n @c ---------------------------------------------------------------------\n@@ -447,6 +454,12 @@ If you need to change how the library is linked, look at\n that sets @code{archive_cmds}.  Here, adjust the setting for your\n operating system.\n \n+@c ---------------------------------------------------------------------\n+@c GFDL\n+@c ---------------------------------------------------------------------\n+\n+@include fdl.texi\n+\n @c ---------------------------------------------------------------------\n @c Epilogue\n @c ---------------------------------------------------------------------"}]}