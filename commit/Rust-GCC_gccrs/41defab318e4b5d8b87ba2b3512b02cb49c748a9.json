{"sha": "41defab318e4b5d8b87ba2b3512b02cb49c748a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDFkZWZhYjMxOGU0YjVkOGI4N2JhMmIzNTEyYjAyY2I0OWM3NDhhOQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-09-12T13:27:13Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-09-12T13:27:13Z"}, "message": "PR81285: Fix uninitialised variable in emit_store_flag_int\n\n2017-09-12  Richard Sandiford  <richard.sandiford@linaro.org>\n\ngcc/\n\tPR rtl-optimization/82185\n\t* expmed.c (emit_store_flag_int): Only test tem if it has been\n\tinitialized.\n\nFrom-SVN: r252008", "tree": {"sha": "1696acdfd953f44e0c6d5d50bc4ab0aeac08f502", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1696acdfd953f44e0c6d5d50bc4ab0aeac08f502"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/41defab318e4b5d8b87ba2b3512b02cb49c748a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41defab318e4b5d8b87ba2b3512b02cb49c748a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41defab318e4b5d8b87ba2b3512b02cb49c748a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41defab318e4b5d8b87ba2b3512b02cb49c748a9/comments", "author": null, "committer": null, "parents": [{"sha": "c651dca218fe1660781bdc5cfb249fd4c3da8a28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c651dca218fe1660781bdc5cfb249fd4c3da8a28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c651dca218fe1660781bdc5cfb249fd4c3da8a28"}], "stats": {"total": 27, "additions": 17, "deletions": 10}, "files": [{"sha": "267eabf58952b384b5497a93d0051d652e590c66", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41defab318e4b5d8b87ba2b3512b02cb49c748a9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41defab318e4b5d8b87ba2b3512b02cb49c748a9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=41defab318e4b5d8b87ba2b3512b02cb49c748a9", "patch": "@@ -1,3 +1,9 @@\n+2017-09-12  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\tPR rtl-optimization/82185\n+\t* expmed.c (emit_store_flag_int): Only test tem if it has been\n+\tinitialized.\n+\n 2017-09-12  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/82149"}, {"sha": "ca48c60683db749c1c9f11cd6f5d80cde699fdba", "filename": "gcc/expmed.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41defab318e4b5d8b87ba2b3512b02cb49c748a9/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41defab318e4b5d8b87ba2b3512b02cb49c748a9/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=41defab318e4b5d8b87ba2b3512b02cb49c748a9", "patch": "@@ -5601,7 +5601,6 @@ emit_store_flag_int (rtx target, rtx subtarget, enum rtx_code code, rtx op0,\n {\n   machine_mode target_mode = target ? GET_MODE (target) : VOIDmode;\n   rtx_insn *last = get_last_insn ();\n-  rtx tem;\n \n   /* If this is an equality comparison of integers, we can try to exclusive-or\n      (or subtract) the two operands and use a recursive call to try the\n@@ -5610,8 +5609,8 @@ emit_store_flag_int (rtx target, rtx subtarget, enum rtx_code code, rtx op0,\n \n   if ((code == EQ || code == NE) && op1 != const0_rtx)\n     {\n-      tem = expand_binop (mode, xor_optab, op0, op1, subtarget, 1,\n-\t\t\t  OPTAB_WIDEN);\n+      rtx tem = expand_binop (mode, xor_optab, op0, op1, subtarget, 1,\n+\t\t\t      OPTAB_WIDEN);\n \n       if (tem == 0)\n \ttem = expand_binop (mode, sub_optab, op0, op1, subtarget, 1,\n@@ -5643,26 +5642,28 @@ emit_store_flag_int (rtx target, rtx subtarget, enum rtx_code code, rtx op0,\n \t  && rtx_cost (GEN_INT (normalizep), mode, PLUS, 1,\n \t\t       optimize_insn_for_speed_p ()) == 0)\n \t{\n-\t  tem = emit_store_flag_1 (subtarget, rcode, op0, op1, mode, 0,\n-\t\t\t\t   STORE_FLAG_VALUE, target_mode);\n+\t  rtx tem = emit_store_flag_1 (subtarget, rcode, op0, op1, mode, 0,\n+\t\t\t\t       STORE_FLAG_VALUE, target_mode);\n \t  if (tem != 0)\n \t    tem = expand_binop (target_mode, add_optab, tem,\n \t\t\t\tgen_int_mode (normalizep, target_mode),\n \t\t\t\ttarget, 0, OPTAB_WIDEN);\n+\t  if (tem != 0)\n+\t    return tem;\n \t}\n       else if (!want_add\n \t       && rtx_cost (trueval, mode, XOR, 1,\n \t\t\t    optimize_insn_for_speed_p ()) == 0)\n \t{\n-\t  tem = emit_store_flag_1 (subtarget, rcode, op0, op1, mode, 0,\n-\t\t\t\t   normalizep, target_mode);\n+\t  rtx tem = emit_store_flag_1 (subtarget, rcode, op0, op1, mode, 0,\n+\t\t\t\t       normalizep, target_mode);\n \t  if (tem != 0)\n \t    tem = expand_binop (target_mode, xor_optab, tem, trueval, target,\n \t\t\t\tINTVAL (trueval) >= 0, OPTAB_WIDEN);\n+\t  if (tem != 0)\n+\t    return tem;\n \t}\n \n-      if (tem != 0)\n-\treturn tem;\n       delete_insns_since (last);\n     }\n \n@@ -5680,7 +5681,7 @@ emit_store_flag_int (rtx target, rtx subtarget, enum rtx_code code, rtx op0,\n   /* Try to put the result of the comparison in the sign bit.  Assume we can't\n      do the necessary operation below.  */\n \n-  tem = 0;\n+  rtx tem = 0;\n \n   /* To see if A <= 0, compute (A | (A - 1)).  A <= 0 iff that result has\n      the sign bit set.  */"}]}