{"sha": "a801991954f70fb9470502d305065719849c5660", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTgwMTk5MTk1NGY3MGZiOTQ3MDUwMmQzMDUwNjU3MTk4NDljNTY2MA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-08-08T15:16:43Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-08-08T15:16:43Z"}, "message": "Prevent internal aligned_alloc clashing with libc version\n\nIf configure fails to detect aligned_alloc we will try to define our\nown in new_opa.cc but that could clash with the libcversion in\n<stdlib.h>. Use a namespace to keep them distinct.\n\n\t* libsupc++/new_opa.cc (aligned_alloc): Declare inside namespace to\n\tavoid clashing with an ::aligned_alloc function that was not detected\n\tby configure.\n\nFrom-SVN: r263409", "tree": {"sha": "6140734fa914c13ae1a56deaea9d7838f55e0cdb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6140734fa914c13ae1a56deaea9d7838f55e0cdb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a801991954f70fb9470502d305065719849c5660", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a801991954f70fb9470502d305065719849c5660", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a801991954f70fb9470502d305065719849c5660", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a801991954f70fb9470502d305065719849c5660/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e09a12f016e53f1edadc10db22806937d3b8894", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e09a12f016e53f1edadc10db22806937d3b8894", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e09a12f016e53f1edadc10db22806937d3b8894"}], "stats": {"total": 34, "additions": 24, "deletions": 10}, "files": [{"sha": "0bbc7f9e2c6e013a601b9458122efffb89bb127b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a801991954f70fb9470502d305065719849c5660/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a801991954f70fb9470502d305065719849c5660/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a801991954f70fb9470502d305065719849c5660", "patch": "@@ -1,5 +1,9 @@\n 2018-08-08  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* libsupc++/new_opa.cc (aligned_alloc): Declare inside namespace to\n+\tavoid clashing with an ::aligned_alloc function that was not detected\n+\tby configure.\n+\n \t* doc/xml/manual/using.xml: Fix markup for empty table entry.\n \t* doc/html/*: Regenerate.\n "}, {"sha": "68eac5b8cebb53e6d59ecac1ae00d2e539889af9", "filename": "libstdc++-v3/libsupc++/new_opa.cc", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a801991954f70fb9470502d305065719849c5660/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opa.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a801991954f70fb9470502d305065719849c5660/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opa.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opa.cc?ref=a801991954f70fb9470502d305065719849c5660", "patch": "@@ -25,15 +25,30 @@\n \n #include <bits/c++config.h>\n #include <stdlib.h>\n+#include <stdint.h>\n #include <bits/exception_defines.h>\n #include \"new\"\n \n+#if !_GLIBCXX_HAVE_ALIGNED_ALLOC && !_GLIBCXX_HAVE__ALIGNED_MALLOC \\\n+  && !_GLIBCXX_HAVE_POSIX_MEMALIGN && _GLIBCXX_HAVE_MEMALIGN\n+# if _GLIBCXX_HOSTED && __has_include(<malloc.h>)\n+// Some C libraries declare memalign in <malloc.h>\n+#  include <malloc.h>\n+# else\n+extern \"C\" void *memalign(std::size_t boundary, std::size_t size);\n+# endif\n+#endif\n+\n using std::new_handler;\n using std::bad_alloc;\n \n-#if !_GLIBCXX_HAVE_ALIGNED_ALLOC\n-#if _GLIBCXX_HAVE__ALIGNED_MALLOC\n-#define aligned_alloc(al,sz) _aligned_malloc(sz,al)\n+namespace __gnu_cxx {\n+#if _GLIBCXX_HAVE_ALIGNED_ALLOC\n+using ::aligned_alloc;\n+#elif _GLIBCXX_HAVE__ALIGNED_MALLOC\n+static inline void*\n+aligned_alloc (std::size_t al, std::size_t sz)\n+{ return _aligned_malloc(sz, al); }\n #elif _GLIBCXX_HAVE_POSIX_MEMALIGN\n static inline void*\n aligned_alloc (std::size_t al, std::size_t sz)\n@@ -49,11 +64,6 @@ aligned_alloc (std::size_t al, std::size_t sz)\n   return nullptr;\n }\n #elif _GLIBCXX_HAVE_MEMALIGN\n-#if _GLIBCXX_HOSTED\n-#include <malloc.h>\n-#else\n-extern \"C\" void *memalign(std::size_t boundary, std::size_t size);\n-#endif\n static inline void*\n aligned_alloc (std::size_t al, std::size_t sz)\n {\n@@ -66,7 +76,6 @@ aligned_alloc (std::size_t al, std::size_t sz)\n   return memalign (al, sz);\n }\n #else // !HAVE__ALIGNED_MALLOC && !HAVE_POSIX_MEMALIGN && !HAVE_MEMALIGN\n-#include <stdint.h>\n // The C library doesn't provide any aligned allocation functions, define one.\n // This is a modified version of code from gcc/config/i386/gmm_malloc.h\n static inline void*\n@@ -87,7 +96,7 @@ aligned_alloc (std::size_t al, std::size_t sz)\n   return aligned_ptr;\n }\n #endif\n-#endif\n+} // namespace __gnu_cxx\n \n _GLIBCXX_WEAK_DEFINITION void *\n operator new (std::size_t sz, std::align_val_t al)\n@@ -116,6 +125,7 @@ operator new (std::size_t sz, std::align_val_t al)\n     sz += align - rem;\n #endif\n \n+  using __gnu_cxx::aligned_alloc;\n   while (__builtin_expect ((p = aligned_alloc (align, sz)) == 0, false))\n     {\n       new_handler handler = std::get_new_handler ();"}]}