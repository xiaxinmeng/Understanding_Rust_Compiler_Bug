{"sha": "7e5e44bd1729b7a9b458d512ddf61bfba5031869", "node_id": "C_kwDOANBUbNoAKDdlNWU0NGJkMTcyOWI3YTliNDU4ZDUxMmRkZjYxYmZiYTUwMzE4Njk", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-09-22T07:34:15Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-09-22T11:28:08Z"}, "message": "path solver: Use range_on_path_entry instead of looking at equivalences.\n\nCycling through equivalences to improve a range is nowhere near as\nefficient as asking the ranger what the range on entry is.\n\nTesting on a hybrid VRP threader, shows that this improves our VRP\nthreading benefit from 14.5% to 18.5% and our overall jump threads from\n0.85% to 1.28%.\n\nTested on x86-64 Linux.\n\ngcc/ChangeLog:\n\n\t* gimple-range-path.cc (path_range_query::internal_range_of_expr):\n\tRemove call to improve_range_with_equivs.\n\t(path_range_query::improve_range_with_equivs): Remove\n\t* gimple-range-path.h: Remove improve_range_with_equivs.", "tree": {"sha": "467be1ab1d3f12fbf1f32a2018a2e186ddf6ff92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/467be1ab1d3f12fbf1f32a2018a2e186ddf6ff92"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e5e44bd1729b7a9b458d512ddf61bfba5031869", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e5e44bd1729b7a9b458d512ddf61bfba5031869", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e5e44bd1729b7a9b458d512ddf61bfba5031869", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e5e44bd1729b7a9b458d512ddf61bfba5031869/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b0e0b29c639451dd8e2234907b68806e51019c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b0e0b29c639451dd8e2234907b68806e51019c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b0e0b29c639451dd8e2234907b68806e51019c7"}], "stats": {"total": 34, "additions": 1, "deletions": 33}, "files": [{"sha": "d052ebd81fcd3f58946f8da2f93134384f0e9415", "filename": "gcc/gimple-range-path.cc", "status": "modified", "additions": 1, "deletions": 32, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e5e44bd1729b7a9b458d512ddf61bfba5031869/gcc%2Fgimple-range-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e5e44bd1729b7a9b458d512ddf61bfba5031869/gcc%2Fgimple-range-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-path.cc?ref=7e5e44bd1729b7a9b458d512ddf61bfba5031869", "patch": "@@ -163,10 +163,6 @@ path_range_query::internal_range_of_expr (irange &r, tree name, gimple *stmt)\n   if (m_resolve && defined_outside_path (name))\n     {\n       range_on_path_entry (r, name);\n-\n-      if (r.varying_p ())\n-\timprove_range_with_equivs (r, name);\n-\n       set_cache (r, name);\n       return true;\n     }\n@@ -178,7 +174,7 @@ path_range_query::internal_range_of_expr (irange &r, tree name, gimple *stmt)\n \tr.intersect (gimple_range_global (name));\n \n       if (m_resolve && r.varying_p ())\n-\timprove_range_with_equivs (r, name);\n+\trange_on_path_entry (r, name);\n \n       set_cache (r, name);\n       return true;\n@@ -201,33 +197,6 @@ path_range_query::range_of_expr (irange &r, tree name, gimple *stmt)\n   return false;\n }\n \n-// Improve the range of NAME with the range of any of its equivalences.\n-\n-void\n-path_range_query::improve_range_with_equivs (irange &r, tree name)\n-{\n-  if (TREE_CODE (name) != SSA_NAME)\n-    return;\n-\n-  basic_block entry = entry_bb ();\n-  relation_oracle *oracle = m_ranger.oracle ();\n-\n-  if (const bitmap_head *equivs = oracle->equiv_set (name, entry))\n-    {\n-      int_range_max t;\n-      bitmap_iterator bi;\n-      unsigned i;\n-\n-      EXECUTE_IF_SET_IN_BITMAP (equivs, 0, i, bi)\n-\tif (i != SSA_NAME_VERSION (name) && r.varying_p ())\n-\t  {\n-\t    tree equiv = ssa_name (i);\n-\t    range_on_path_entry (t, equiv);\n-\t    r.intersect (t);\n-\t  }\n-    }\n-}\n-\n bool\n path_range_query::unreachable_path_p ()\n {"}, {"sha": "f7d9832ac8c8974027122ed6697003e226654f69", "filename": "gcc/gimple-range-path.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e5e44bd1729b7a9b458d512ddf61bfba5031869/gcc%2Fgimple-range-path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e5e44bd1729b7a9b458d512ddf61bfba5031869/gcc%2Fgimple-range-path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-path.h?ref=7e5e44bd1729b7a9b458d512ddf61bfba5031869", "patch": "@@ -63,7 +63,6 @@ class path_range_query : public range_query\n   void ssa_range_in_phi (irange &r, gphi *phi);\n   void precompute_relations (const vec<basic_block> &);\n   void precompute_phi_relations (basic_block bb, basic_block prev);\n-  void improve_range_with_equivs (irange &r, tree name);\n   void add_copies_to_imports ();\n   bool add_to_imports (tree name, bitmap imports);\n "}]}