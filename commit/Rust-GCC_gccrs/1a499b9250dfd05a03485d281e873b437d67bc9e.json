{"sha": "1a499b9250dfd05a03485d281e873b437d67bc9e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWE0OTliOTI1MGRmZDA1YTAzNDg1ZDI4MWU4NzNiNDM3ZDY3YmM5ZQ==", "commit": {"author": {"name": "Marek Michalkiewicz", "email": "marekm@amelek.gda.pl", "date": "2002-05-10T12:22:36Z"}, "committer": {"name": "Marek Michalkiewicz", "email": "marekm@gcc.gnu.org", "date": "2002-05-10T12:22:36Z"}, "message": "avr.c (print_operand): Check that addr is a SYMBOL_REF before using SYMBOL_REF_FLAG (addr).\n\n\n\t* config/avr/avr.c (print_operand): Check that addr is a SYMBOL_REF\n\tbefore using SYMBOL_REF_FLAG (addr).\n\n\t* config/avr/avr-protos.h (avr_io_address_p): Declare.\n\t* config/avr/avr.c (io_address_p): Rename to avr_io_address_p.\n\tMake non-static.  Update all callers.\n\t* config/avr/avr.md (*cbi, *sbi, *sbix_branch, *sbix_branch_bit7):\n\tNew insns to clear/set/test a single bit in I/O address space.\n\nFrom-SVN: r53359", "tree": {"sha": "cd8d4e691fea1c61cd8ce9e0eb7a77b6ae4dfba1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd8d4e691fea1c61cd8ce9e0eb7a77b6ae4dfba1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a499b9250dfd05a03485d281e873b437d67bc9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a499b9250dfd05a03485d281e873b437d67bc9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a499b9250dfd05a03485d281e873b437d67bc9e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a499b9250dfd05a03485d281e873b437d67bc9e/comments", "author": null, "committer": null, "parents": [{"sha": "fbdb9fcec9c18eedea04d8b781024d77a273c60e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbdb9fcec9c18eedea04d8b781024d77a273c60e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbdb9fcec9c18eedea04d8b781024d77a273c60e"}], "stats": {"total": 132, "additions": 122, "deletions": 10}, "files": [{"sha": "8d1122a2688656aa034dbeabef7e54f203747030", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a499b9250dfd05a03485d281e873b437d67bc9e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a499b9250dfd05a03485d281e873b437d67bc9e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1a499b9250dfd05a03485d281e873b437d67bc9e", "patch": "@@ -1,3 +1,14 @@\n+2002-05-10  Marek Michalkiewicz  <marekm@amelek.gda.pl>\n+\n+\t* config/avr/avr.c (print_operand): Check that addr is a SYMBOL_REF\n+\tbefore using SYMBOL_REF_FLAG (addr).\n+\n+\t* config/avr/avr-protos.h (avr_io_address_p): Declare.\n+\t* config/avr/avr.c (io_address_p): Rename to avr_io_address_p.\n+\tMake non-static.  Update all callers.\n+\t* config/avr/avr.md (*cbi, *sbi, *sbix_branch, *sbix_branch_bit7):\n+\tNew insns to clear/set/test a single bit in I/O address space.\n+\n 2002-05-09  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* rtl.h (ENABLE_RTL_FLAG_CHECKING): Also check for gcc >= 2.7."}, {"sha": "fe69e636efe5592200f84e22d8211389f817b137", "filename": "gcc/config/avr/avr-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a499b9250dfd05a03485d281e873b437d67bc9e/gcc%2Fconfig%2Favr%2Favr-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a499b9250dfd05a03485d281e873b437d67bc9e/gcc%2Fconfig%2Favr%2Favr-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-protos.h?ref=1a499b9250dfd05a03485d281e873b437d67bc9e", "patch": "@@ -141,6 +141,7 @@ extern int    compare_eq_p           PARAMS ((rtx insn));\n extern void   out_shift_with_cnt     PARAMS ((const char *template, rtx insn,\n \t\t\t\t\t      rtx operands[], int *len,\n \t\t\t\t\t      int t_len));\n+extern int    avr_io_address_p\t     PARAMS ((rtx x, int size));\n extern int    const_int_pow2_p       PARAMS ((rtx x));\n extern int    avr_peep2_scratch_safe PARAMS ((rtx reg_rtx));\n #endif /* RTX_CODE */"}, {"sha": "40276622ab2d499d004218d11c7d5034029d02f7", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a499b9250dfd05a03485d281e873b437d67bc9e/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a499b9250dfd05a03485d281e873b437d67bc9e/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=1a499b9250dfd05a03485d281e873b437d67bc9e", "patch": "@@ -56,7 +56,6 @@ static int    out_set_stack_ptr    PARAMS ((FILE *, int, int));\n static RTX_CODE compare_condition  PARAMS ((rtx insn));\n static int    compare_sign_p       PARAMS ((rtx insn));\n static int    reg_was_0            PARAMS ((rtx insn, rtx op));\n-static int    io_address_p         PARAMS ((rtx x, int size));\n void          debug_hard_reg_set   PARAMS ((HARD_REG_SET set));\n static tree   avr_handle_progmem_attribute PARAMS ((tree *, tree, tree, int, bool *));\n static tree   avr_handle_fndecl_attribute PARAMS ((tree *, tree, tree, int, bool *));\n@@ -1001,7 +1000,8 @@ print_operand_address (file, addr)\n \n     default:\n       if (CONSTANT_ADDRESS_P (addr)\n-\t  && (SYMBOL_REF_FLAG (addr) || GET_CODE (addr) == LABEL_REF))\n+\t  && ((GET_CODE (addr) == SYMBOL_REF && SYMBOL_REF_FLAG (addr))\n+\t      || GET_CODE (addr) == LABEL_REF))\n \t{\n \t  fprintf (file, \"pm(\");\n \t  output_addr_const (file,addr);\n@@ -1802,7 +1802,7 @@ out_movqi_r_mr (insn, op, l)\n   \n   if (CONSTANT_ADDRESS_P (x))\n     {\n-      if (io_address_p (x, 1))\n+      if (avr_io_address_p (x, 1))\n \t{\n \t  *l = 1;\n \t  return AS2 (in,%0,%1-0x20);\n@@ -1971,7 +1971,7 @@ out_movhi_r_mr (insn, op, l)\n     }\n   else if (CONSTANT_ADDRESS_P (base))\n     {\n-      if (io_address_p (base, 2))\n+      if (avr_io_address_p (base, 2))\n \t{\n \t  *l = 2;\n \t  return (AS2 (in,%A0,%A1-0x20) CR_TAB\n@@ -2514,7 +2514,7 @@ out_movqi_mr_r (insn, op, l)\n   \n   if (CONSTANT_ADDRESS_P (x))\n     {\n-      if (io_address_p (x, 1))\n+      if (avr_io_address_p (x, 1))\n \t{\n \t  *l = 1;\n \t  return AS2 (out,%0-0x20,%1);\n@@ -2592,7 +2592,7 @@ out_movhi_mr_r (insn, op, l)\n     l = &tmp;\n   if (CONSTANT_ADDRESS_P (base))\n     {\n-      if (io_address_p (base, 2))\n+      if (avr_io_address_p (base, 2))\n \t{\n \t  *l = 2;\n \t  return (AS2 (out,%B0-0x20,%B1) CR_TAB\n@@ -4927,7 +4927,7 @@ avr_address_cost (x)\n     return 18;\n   if (CONSTANT_ADDRESS_P (x))\n     {\n-      if (io_address_p (x, 1))\n+      if (avr_io_address_p (x, 1))\n \treturn 2;\n       return 4;\n     }\n@@ -5246,10 +5246,11 @@ reg_was_0 (insn, op)\n }\n \n /* Returns 1 if X is a valid address for an I/O register of size SIZE\n-   (1 or 2).  Used for lds/sts -> in/out optimization.  */\n+   (1 or 2).  Used for lds/sts -> in/out optimization.  Add 0x20 to SIZE\n+   to check for the lower half of I/O space (for cbi/sbi/sbic/sbis).  */\n \n-static int\n-io_address_p (x, size)\n+int\n+avr_io_address_p (x, size)\n      rtx x;\n      int size;\n {"}, {"sha": "da4c571742bbd9f62ec1d05405b0615985828def", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a499b9250dfd05a03485d281e873b437d67bc9e/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a499b9250dfd05a03485d281e873b437d67bc9e/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=1a499b9250dfd05a03485d281e873b437d67bc9e", "patch": "@@ -2230,6 +2230,105 @@\n   [(set_attr \"length\" \"1\")\n    (set_attr \"cc\" \"compare\")])\n \n+;; Clear/set/test a single bit in I/O address space.\n+\n+(define_insn \"*cbi\"\n+  [(set (mem:QI (match_operand 0 \"const_int_operand\" \"n\"))\n+\t(and:QI (mem:QI (match_dup 0))\n+\t\t(match_operand 1 \"const_int_operand\" \"n\")))]\n+  \"avr_io_address_p (operands[0], 1 + 0x20)\n+   && exact_log2 (~INTVAL (operands[1]) & 0xff) >= 0\"\n+{\n+  operands[2] = GEN_INT (exact_log2 (~INTVAL (operands[1]) & 0xff));\n+  return AS2 (cbi,%0-0x20,%2);\n+}\n+  [(set_attr \"length\" \"1\")\n+   (set_attr \"cc\" \"none\")])\n+\n+(define_insn \"*sbi\"\n+  [(set (mem:QI (match_operand 0 \"const_int_operand\" \"n\"))\n+\t(ior:QI (mem:QI (match_dup 0))\n+\t\t(match_operand 1 \"const_int_operand\" \"n\")))]\n+  \"avr_io_address_p (operands[0], 1 + 0x20)\n+   && exact_log2 (INTVAL (operands[1]) & 0xff) >= 0\"\n+{\n+  operands[2] = GEN_INT (exact_log2 (INTVAL (operands[1]) & 0xff));\n+  return AS2 (sbi,%0-0x20,%2);\n+}\n+  [(set_attr \"length\" \"1\")\n+   (set_attr \"cc\" \"none\")])\n+\n+(define_insn \"*sbix_branch\"\n+  [(set (pc)\n+\t(if_then_else\n+\t (match_operator 0 \"comparison_operator\"\n+\t\t\t [(zero_extract\n+\t\t\t   (mem:QI (match_operand 1 \"const_int_operand\" \"n\"))\n+\t\t\t   (const_int 1)\n+\t\t\t   (match_operand 2 \"const_int_operand\" \"n\"))\n+\t\t\t  (const_int 0)])\n+\t (label_ref (match_operand 3 \"\" \"\"))\n+\t (pc)))]\n+  \"(GET_CODE (operands[0]) == EQ || GET_CODE (operands[0]) == NE)\n+   && avr_io_address_p (operands[1], 1 + 0x20)\"\n+{\n+  enum rtx_code comp = GET_CODE (operands[0]);\n+  int reverse = (get_attr_length (insn) == 4);\n+\n+  if (reverse)\n+    comp = reverse_condition (comp);\n+  if (comp == EQ)\n+    output_asm_insn (AS2 (sbis,%1-0x20,%2), operands);\n+  else\n+    output_asm_insn (AS2 (sbic,%1-0x20,%2), operands);\n+  if (!reverse)\n+    return AS1 (rjmp,%3);\n+  return (AS1 (rjmp,_PC_+4) CR_TAB\n+\t  AS1 (jmp,%3));\n+}\n+  [(set (attr \"length\")\n+\t(if_then_else (and (ge (minus (pc) (match_dup 3)) (const_int -2046))\n+\t\t\t   (le (minus (pc) (match_dup 3)) (const_int 2046)))\n+\t\t      (const_int 2)\n+\t\t      (if_then_else (eq_attr \"mcu_mega\" \"no\")\n+\t\t\t\t    (const_int 2)\n+\t\t\t\t    (const_int 4))))\n+   (set_attr \"cc\" \"clobber\")])\n+\n+;; Tests of bit 7 are pessimized to sign tests, so we need this too...\n+(define_insn \"*sbix_branch_bit7\"\n+  [(set (pc)\n+\t(if_then_else\n+\t (match_operator 0 \"comparison_operator\"\n+\t\t\t [(mem:QI (match_operand 1 \"const_int_operand\" \"n\"))\n+\t\t\t  (const_int 0)])\n+\t (label_ref (match_operand 2 \"\" \"\"))\n+\t (pc)))]\n+  \"(GET_CODE (operands[0]) == GE || GET_CODE (operands[0]) == LT)\n+   && avr_io_address_p (operands[1], 1 + 0x20)\"\n+{\n+  enum rtx_code comp = GET_CODE (operands[0]);\n+  int reverse = (get_attr_length (insn) == 4);\n+\n+  if (reverse)\n+    comp = reverse_condition (comp);\n+  if (comp == GE)\n+    output_asm_insn (AS2 (sbis,%1-0x20,7), operands);\n+  else\n+    output_asm_insn (AS2 (sbic,%1-0x20,7), operands);\n+  if (!reverse)\n+    return AS1 (rjmp,%2);\n+  return (AS1 (rjmp,_PC_+4) CR_TAB\n+\t  AS1 (jmp,%2));\n+}\n+  [(set (attr \"length\")\n+\t(if_then_else (and (ge (minus (pc) (match_dup 2)) (const_int -2046))\n+\t\t\t   (le (minus (pc) (match_dup 2)) (const_int 2046)))\n+\t\t      (const_int 2)\n+\t\t      (if_then_else (eq_attr \"mcu_mega\" \"no\")\n+\t\t\t\t    (const_int 2)\n+\t\t\t\t    (const_int 4))))\n+   (set_attr \"cc\" \"clobber\")])\n \n ;; ************************* Peepholes ********************************\n "}]}