{"sha": "7da551a2e80eeb4f2b3fa8765e84b79e899d934c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2RhNTUxYTJlODBlZWI0ZjJiM2ZhODc2NWU4NGI3OWU4OTlkOTM0Yw==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-05-22T20:33:20Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-05-22T20:33:20Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r1052", "tree": {"sha": "7563cb6789d2ea397a02a4bbb6dc3acb789068d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7563cb6789d2ea397a02a4bbb6dc3acb789068d5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7da551a2e80eeb4f2b3fa8765e84b79e899d934c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7da551a2e80eeb4f2b3fa8765e84b79e899d934c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7da551a2e80eeb4f2b3fa8765e84b79e899d934c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7da551a2e80eeb4f2b3fa8765e84b79e899d934c/comments", "author": null, "committer": null, "parents": [{"sha": "88d92ca5b290f6bd966ebfa9ca98652763f61b18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88d92ca5b290f6bd966ebfa9ca98652763f61b18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88d92ca5b290f6bd966ebfa9ca98652763f61b18"}], "stats": {"total": 100, "additions": 54, "deletions": 46}, "files": [{"sha": "0c8118e39f34e6e39c27ad075b8af1a21878f0b9", "filename": "gcc/c-common.c", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7da551a2e80eeb4f2b3fa8765e84b79e899d934c/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7da551a2e80eeb4f2b3fa8765e84b79e899d934c/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=7da551a2e80eeb4f2b3fa8765e84b79e899d934c", "patch": "@@ -27,6 +27,53 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #undef NULL\n #define NULL 0\n \n+/* Make bindings for __NAME__ and __PRINTABLE_NAME__.  */\n+\n+void\n+declare_function_name ()\n+{\n+  tree decl, init;\n+  char *name, *printable_name;\n+\n+  if (current_function_decl == NULL)\n+    {\n+      name = \"\";\n+      printable_name = \"top level\";\n+    }\n+  else\n+    {\n+      char *kind = \"function\";\n+      if (TREE_CODE (TREE_TYPE (current_function_decl)) == METHOD_TYPE)\n+\tkind = \"method\";\n+      name = IDENTIFIER_POINTER (DECL_NAME (current_function_decl));\n+      printable_name = (*decl_printable_name) (current_function_decl, &kind);\n+    }\n+\n+  push_obstacks_nochange ();\n+  decl = build_decl (VAR_DECL, get_identifier (\"__NAME__\"),\n+\t\t     char_array_type_node);\n+  TREE_STATIC (decl) = 1;\n+  TREE_READONLY (decl) = 1;\n+  TREE_NO_UNUSED_WARNING (decl) = 1;\n+  DECL_IGNORED_P (decl) = 1;\n+  init = build_string (strlen (name) + 1, name);\n+  TREE_TYPE (init) = char_array_type_node;\n+  DECL_INITIAL (decl) = init;\n+  finish_decl (pushdecl (decl), init, NULL_TREE);\n+\n+  push_obstacks_nochange ();\n+  decl = build_decl (VAR_DECL, get_identifier (\"__PRINTABLE_NAME__\"),\n+\t\t     char_array_type_node);\n+  TREE_STATIC (decl) = 1;\n+  TREE_READONLY (decl) = 1;\n+  TREE_NO_UNUSED_WARNING (decl) = 1;\n+  DECL_IGNORED_P (decl) = 1;\n+  init = build_string (strlen (printable_name) + 1, printable_name);\n+  TREE_TYPE (init) = char_array_type_node;\n+  DECL_INITIAL (decl) = init;\n+  finish_decl (pushdecl (decl), init, NULL_TREE);\n+}\n+\n /* Given a chain of STRING_CST nodes,\n    concatenate them into one STRING_CST\n    and give it a suitable array-of-chars data type.  */"}, {"sha": "5f90817706394d4306ea598abaac6b20109f8507", "filename": "gcc/c-decl.c", "status": "modified", "additions": 7, "deletions": 46, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7da551a2e80eeb4f2b3fa8765e84b79e899d934c/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7da551a2e80eeb4f2b3fa8765e84b79e899d934c/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=7da551a2e80eeb4f2b3fa8765e84b79e899d934c", "patch": "@@ -381,7 +381,6 @@ static struct binding_level *label_level_chain;\n static tree grokparms (), grokdeclarator ();\n tree pushdecl ();\n tree builtin_function ();\n-static void declare_function_name ();\n \n static tree lookup_tag ();\n static tree lookup_tag_reverse ();\n@@ -1790,7 +1789,10 @@ pushdecl (x)\n \t\t   /* No shadow warnings for internally generated vars.  */\n \t\t   && !DECL_IGNORED_P (x)\n \t\t   /* No shadow warnings for vars made for inlining.  */\n-\t\t   && ! DECL_FROM_INLINE (x))\n+\t\t   && ! DECL_FROM_INLINE (x)\n+\t\t   /* No shadow warnings for user-invisible decls.  */\n+\t\t   && ! (TREE_CODE (x) == VAR_DECL\n+\t\t\t && DECL_IGNORED_P (x) && TREE_READONLY (x)))\n \t    {\n \t      char *warnstring = 0;\n \n@@ -2598,46 +2600,13 @@ init_decl_processing ()\n #endif\n \n   /* Create the global bindings of __NAME__ and __PRINTABLE_NAME__.  */\n-  declare_function_name (\"\", \"top level\");\n+  declare_function_name ();\n \n   start_identifier_warnings ();\n \n   init_format_info_table ();\n }\n \n-/* Make bindings for __NAME__ and __PRINTABLE_NAME__.  */\n-\n-static void\n-declare_function_name (name, printable_name)\n-     char *name, *printable_name;\n-{\n-  tree decl, init;\n-\n-  push_obstacks_nochange ();\n-  decl = pushdecl (build_decl (VAR_DECL,\n-\t\t\t       get_identifier (\"__NAME__\"),\n-\t\t\t       char_array_type_node));\n-  TREE_STATIC (decl) = 1;\n-  TREE_READONLY (decl) = 1;\n-  DECL_IGNORED_P (decl) = 1;\n-  init = build_string (strlen (name) + 1, name);\n-  TREE_TYPE (init) = char_array_type_node;\n-  DECL_INITIAL (decl) = init;\n-  finish_decl (decl, init, NULL_TREE);\n-\n-  push_obstacks_nochange ();\n-  decl = pushdecl (build_decl (VAR_DECL,\n-\t\t\t       get_identifier (\"__PRINTABLE_NAME__\"),\n-\t\t\t       char_array_type_node));\n-  TREE_STATIC (decl) = 1;\n-  TREE_READONLY (decl) = 1;\n-  DECL_IGNORED_P (decl) = 1;\n-  init = build_string (strlen (printable_name) + 1, printable_name);\n-  TREE_TYPE (init) = char_array_type_node;\n-  DECL_INITIAL (decl) = init;\n-  finish_decl (decl, init, NULL_TREE);\n-}\n-\n /* Return a definition for a builtin function named NAME and whose data type\n    is TYPE.  TYPE should be a function type with argument types.\n    FUNCTION_CODE tells later passes how to compile calls to this function.\n@@ -5488,16 +5457,8 @@ store_parm_decls ()\n     mark_varargs ();\n \n   /* Declare __NAME__ and __PRINTABLE_NAME__ for this function.  */\n-  {\n-    char *kind = \"function\";\n-    char *name;\n-    if (current_function_decl != 0\n-\t&& TREE_CODE (TREE_TYPE (current_function_decl)) == METHOD_TYPE)\n-      kind = \"method\";\n-    name = (*decl_printable_name) (current_function_decl, &kind);\n-    declare_function_name (name,\n-\t\t\t   IDENTIFIER_POINTER (DECL_NAME (current_function_decl)));\n-  }\n+\n+  declare_function_name ();\n \n   /* Set up parameters and prepare for return, for the function.  */\n "}]}