{"sha": "8eddb62513c8450dff7428a66b49135f2334cc5c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGVkZGI2MjUxM2M4NDUwZGZmNzQyOGE2NmI0OTEzNWYyMzM0Y2M1Yw==", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@cavium.com", "date": "2012-04-24T08:43:33Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2012-04-24T08:43:33Z"}, "message": "tree-ssa-forwprop.c (simplify_bitwise_binary): Don't directly use def1/def2.\n\n2012-04-24  Andrew Pinski  <apinski@cavium.com>\n\n\t* tree-ssa-forwprop.c (simplify_bitwise_binary):\n\tDon't directly use def1/def2.\n\nFrom-SVN: r186757", "tree": {"sha": "3be390f2ab14eb44a93f3a755ff5a0cdf9a0dc45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3be390f2ab14eb44a93f3a755ff5a0cdf9a0dc45"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8eddb62513c8450dff7428a66b49135f2334cc5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8eddb62513c8450dff7428a66b49135f2334cc5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8eddb62513c8450dff7428a66b49135f2334cc5c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8eddb62513c8450dff7428a66b49135f2334cc5c/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e1b435ad06fe3575a7318acb229f30076a19c910", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1b435ad06fe3575a7318acb229f30076a19c910", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1b435ad06fe3575a7318acb229f30076a19c910"}], "stats": {"total": 11, "additions": 8, "deletions": 3}, "files": [{"sha": "8e57d2843cc3d4b54e1f2d09d020fb32e00530be", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eddb62513c8450dff7428a66b49135f2334cc5c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eddb62513c8450dff7428a66b49135f2334cc5c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8eddb62513c8450dff7428a66b49135f2334cc5c", "patch": "@@ -1,3 +1,8 @@\n+2012-04-24  Andrew Pinski  <apinski@cavium.com>\n+\n+\t* tree-ssa-forwprop.c (simplify_bitwise_binary):\n+\tDon't directly use def1/def2.\n+\n 2012-04-24  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/53098"}, {"sha": "3f00b1d42c4b20794d2d92da25bb215a91753ae9", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eddb62513c8450dff7428a66b49135f2334cc5c/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eddb62513c8450dff7428a66b49135f2334cc5c/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=8eddb62513c8450dff7428a66b49135f2334cc5c", "patch": "@@ -1913,10 +1913,10 @@ simplify_bitwise_binary (gimple_stmt_iterator *gsi)\n    /* Simplify (A & B) OP0 (C & B) to (A OP0 C) & B. */\n    if (def1_code == def2_code\n        && def1_code == BIT_AND_EXPR\n-       && operand_equal_for_phi_arg_p (gimple_assign_rhs2 (def1),\n-\t\t\t\t       gimple_assign_rhs2 (def2)))\n+       && operand_equal_for_phi_arg_p (def1_arg2,\n+\t\t\t\t       def2_arg2))\n     {\n-      tree b = gimple_assign_rhs2 (def1);\n+      tree b = def1_arg2;\n       tree a = def1_arg1;\n       tree c = def2_arg1;\n       tree inner = fold_build2 (code, TREE_TYPE (arg2), a, c);"}]}