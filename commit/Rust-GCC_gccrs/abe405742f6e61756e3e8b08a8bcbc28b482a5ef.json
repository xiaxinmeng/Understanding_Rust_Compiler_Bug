{"sha": "abe405742f6e61756e3e8b08a8bcbc28b482a5ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWJlNDA1NzQyZjZlNjE3NTZlM2U4YjA4YThiY2JjMjhiNDgyYTVlZg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2016-11-23T13:34:20Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2016-11-23T13:34:20Z"}, "message": "sparc.md (*ashrsi3_extend): Rename to...\n\n\t* config/sparc/sparc.md (*ashrsi3_extend): Rename to...\n\t(*ashrsi3_extend0): ...this.  Accept constant integers.\n\t(*ashrsi3_extend2): Rename to...\n\t(*ashrsi3_extend1): ...this.\n\t(*ashrsi3_extend2): New pattern.\n\t(*lshrsi3_extend1): Accept constant integers.\n\t(*lshrsi3_extend2): Fix condition on operand 2.\n\nFrom-SVN: r242753", "tree": {"sha": "1415ea66f3f05a68e00a6c00fa8a9ffc124142e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1415ea66f3f05a68e00a6c00fa8a9ffc124142e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/abe405742f6e61756e3e8b08a8bcbc28b482a5ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abe405742f6e61756e3e8b08a8bcbc28b482a5ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abe405742f6e61756e3e8b08a8bcbc28b482a5ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abe405742f6e61756e3e8b08a8bcbc28b482a5ef/comments", "author": null, "committer": null, "parents": [{"sha": "4987b1e0338c7e3e52c5390503134ea47f694db0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4987b1e0338c7e3e52c5390503134ea47f694db0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4987b1e0338c7e3e52c5390503134ea47f694db0"}], "stats": {"total": 56, "additions": 45, "deletions": 11}, "files": [{"sha": "09724e306ef7d22b4898f8dd8550326959cf7741", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abe405742f6e61756e3e8b08a8bcbc28b482a5ef/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abe405742f6e61756e3e8b08a8bcbc28b482a5ef/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=abe405742f6e61756e3e8b08a8bcbc28b482a5ef", "patch": "@@ -1,3 +1,13 @@\n+2016-11-23  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* config/sparc/sparc.md (*ashrsi3_extend): Rename to...\n+\t(*ashrsi3_extend0): ...this.  Accept constant integers.\n+\t(*ashrsi3_extend2): Rename to...\n+\t(*ashrsi3_extend1): ...this.\n+\t(*ashrsi3_extend2): New pattern.\n+\t(*lshrsi3_extend1): Accept constant integers.\n+\t(*lshrsi3_extend2): Fix condition on operand 2.\n+\n 2016-11-23  Martin Liska  <mliska@suse.cz>\n \n \t* config/i386/i386.c: Initialize function pointer to NULL."}, {"sha": "f33c39182f8bb0d592ea079a2a170230b2f7e08a", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 35, "deletions": 11, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abe405742f6e61756e3e8b08a8bcbc28b482a5ef/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abe405742f6e61756e3e8b08a8bcbc28b482a5ef/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=abe405742f6e61756e3e8b08a8bcbc28b482a5ef", "patch": "@@ -6508,17 +6508,22 @@\n }\n   [(set_attr \"type\" \"shift\")])\n \n-(define_insn \"*ashrsi3_extend\"\n+(define_insn \"*ashrsi3_extend0\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(sign_extend:DI (ashiftrt:SI (match_operand:SI 1 \"register_operand\" \"r\")\n-\t\t\t\t     (match_operand:SI 2 \"arith_operand\" \"r\"))))]\n+\t\t\t\t     (match_operand:SI 2 \"arith_operand\" \"rI\"))))]\n   \"TARGET_ARCH64\"\n-  \"sra\\t%1, %2, %0\"\n+{\n+  if (GET_CODE (operands[2]) == CONST_INT)\n+   operands[2] = GEN_INT (INTVAL (operands[2]) & 0x1f);\n+  return \"sra\\t%1, %2, %0\";\n+}\n   [(set_attr \"type\" \"shift\")])\n \n-;; This handles the case as above, but with constant shift instead of\n-;; register. Combiner \"simplifies\" it for us a little bit though.\n-(define_insn \"*ashrsi3_extend2\"\n+;; This handles the case where\n+;; (sign_extend:DI (ashiftrt:SI (match_operand:SI) (match_operand:SI)))\n+;; but combiner \"simplifies\" it for us.\n+(define_insn \"*ashrsi3_extend1\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(ashiftrt:DI (ashift:DI (subreg:DI (match_operand:SI 1 \"register_operand\" \"r\") 0)\n \t\t\t\t(const_int 32))\n@@ -6530,6 +6535,21 @@\n }\n   [(set_attr \"type\" \"shift\")])\n \n+;; This handles the case where\n+;; (ashiftrt:DI (sign_extend:DI (match_operand:SI)) (const_int))\n+;; but combiner \"simplifies\" it for us.\n+(define_insn \"*ashrsi3_extend2\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(sign_extract:DI (subreg:DI (match_operand:SI 1 \"register_operand\" \"r\") 0)\n+\t\t\t (match_operand 2 \"small_int_operand\" \"I\")\n+\t\t\t (const_int 32)))]\n+  \"TARGET_ARCH64 && INTVAL (operands[2]) > 0 && INTVAL (operands[2]) <= 32\"\n+{\n+  operands[2] = GEN_INT (32 - INTVAL (operands[2]));\n+  return \"sra\\t%1, %2, %0\";\n+}\n+  [(set_attr \"type\" \"shift\")])\n+\n (define_expand \"ashrdi3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(ashiftrt:DI (match_operand:DI 1 \"register_operand\" \"r\")\n@@ -6595,26 +6615,30 @@\n   [(set_attr \"type\" \"shift\")])\n \n ;; This handles the case where\n-;; (zero_extend:DI (lshiftrt:SI (match_operand:SI) (match_operand:SI))),\n+;; (zero_extend:DI (lshiftrt:SI (match_operand:SI) (match_operand:SI)))\n ;; but combiner \"simplifies\" it for us.\n (define_insn \"*lshrsi3_extend1\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(and:DI (subreg:DI (lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"r\")\n-\t\t\t   (match_operand:SI 2 \"arith_operand\" \"r\")) 0)\n+\t\t\t\t\t(match_operand:SI 2 \"arith_operand\" \"rI\")) 0)\n \t\t(match_operand 3 \"const_int_operand\" \"\")))]\n   \"TARGET_ARCH64 && (unsigned HOST_WIDE_INT) INTVAL (operands[3]) == 0xffffffff\"\n-  \"srl\\t%1, %2, %0\"\n+{\n+  if (GET_CODE (operands[2]) == CONST_INT)\n+    operands[2] = GEN_INT (INTVAL (operands[2]) & 0x1f);\n+  return \"srl\\t%1, %2, %0\";\n+}\n   [(set_attr \"type\" \"shift\")])\n \n ;; This handles the case where\n-;; (lshiftrt:DI (zero_extend:DI (match_operand:SI)) (const_int >=0 < 32))\n+;; (lshiftrt:DI (zero_extend:DI (match_operand:SI)) (const_int))\n ;; but combiner \"simplifies\" it for us.\n (define_insn \"*lshrsi3_extend2\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(zero_extract:DI (subreg:DI (match_operand:SI 1 \"register_operand\" \"r\") 0)\n \t\t\t (match_operand 2 \"small_int_operand\" \"I\")\n \t\t\t (const_int 32)))]\n-  \"TARGET_ARCH64 && (unsigned HOST_WIDE_INT) INTVAL (operands[2]) < 32\"\n+  \"TARGET_ARCH64 && INTVAL (operands[2]) > 0 && INTVAL (operands[2]) <= 32\"\n {\n   operands[2] = GEN_INT (32 - INTVAL (operands[2]));\n   return \"srl\\t%1, %2, %0\";"}]}