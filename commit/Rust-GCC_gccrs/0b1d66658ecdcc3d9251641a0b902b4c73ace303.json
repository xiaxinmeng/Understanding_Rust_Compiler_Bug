{"sha": "0b1d66658ecdcc3d9251641a0b902b4c73ace303", "node_id": "C_kwDOANBUbNoAKDBiMWQ2NjY1OGVjZGNjM2Q5MjUxNjQxYTBiOTAyYjRjNzNhY2UzMDM", "commit": {"author": {"name": "Andrew Pinski", "email": "pinskia@gmail.com", "date": "2022-12-08T22:34:16Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2022-12-16T20:15:59Z"}, "message": "coroutines: Build pointer initializers with nullptr_node [PR107768]\n\nThe PR reports that using integer_zero_node triggers a warning for\n-Wzero-as-null-pointer-constant which comes from compiler-generated code so\nmakes no sense to the end user.\n\nCo-Authored-By: Iain Sandoe <iain@sandoe.co.uk>\n\n\tPR c++/107768\n\ngcc/cp/ChangeLog:\n\n\t* coroutines.cc (coro_rewrite_function_body): Initialize pointers\n\tfrom nullptr_node.  (morph_fn_to_coro): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/coroutines/pr107768.C: New test.", "tree": {"sha": "04e85509a96dd71a31b5a6ba7c473e1f33aa89e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/04e85509a96dd71a31b5a6ba7c473e1f33aa89e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b1d66658ecdcc3d9251641a0b902b4c73ace303", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b1d66658ecdcc3d9251641a0b902b4c73ace303", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b1d66658ecdcc3d9251641a0b902b4c73ace303", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b1d66658ecdcc3d9251641a0b902b4c73ace303/comments", "author": {"login": "pinskia", "id": 8496799, "node_id": "MDQ6VXNlcjg0OTY3OTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8496799?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pinskia", "html_url": "https://github.com/pinskia", "followers_url": "https://api.github.com/users/pinskia/followers", "following_url": "https://api.github.com/users/pinskia/following{/other_user}", "gists_url": "https://api.github.com/users/pinskia/gists{/gist_id}", "starred_url": "https://api.github.com/users/pinskia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pinskia/subscriptions", "organizations_url": "https://api.github.com/users/pinskia/orgs", "repos_url": "https://api.github.com/users/pinskia/repos", "events_url": "https://api.github.com/users/pinskia/events{/privacy}", "received_events_url": "https://api.github.com/users/pinskia/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fdc8546b5c6cb1fe254e40b5bdd19ed6fbb44da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fdc8546b5c6cb1fe254e40b5bdd19ed6fbb44da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fdc8546b5c6cb1fe254e40b5bdd19ed6fbb44da"}], "stats": {"total": 32, "additions": 29, "deletions": 3}, "files": [{"sha": "88d6c30d8b1b578ce99d027ccdf832131ae5cefb", "filename": "gcc/cp/coroutines.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b1d66658ecdcc3d9251641a0b902b4c73ace303/gcc%2Fcp%2Fcoroutines.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b1d66658ecdcc3d9251641a0b902b4c73ace303/gcc%2Fcp%2Fcoroutines.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcoroutines.cc?ref=0b1d66658ecdcc3d9251641a0b902b4c73ace303", "patch": "@@ -4132,7 +4132,7 @@ coro_rewrite_function_body (location_t fn_start, tree fnbody, tree orig,\n   /* We will need to be able to set the resume function pointer to nullptr\n      to signal that the coroutine is 'done'.  */\n   tree zero_resume\n-    = build1 (CONVERT_EXPR, resume_fn_ptr_type, integer_zero_node);\n+    = build1 (CONVERT_EXPR, resume_fn_ptr_type, nullptr_node);\n \n   /* The pointer to the destroy function.  */\n   tree var = coro_build_artificial_var (fn_start, coro_destroy_fn_id,\n@@ -4519,7 +4519,7 @@ morph_fn_to_coro (tree orig, tree *resumer, tree *destroyer)\n   tree ramp_body = push_stmt_list ();\n \n   tree zeroinit = build1_loc (fn_start, CONVERT_EXPR,\n-\t\t\t      coro_frame_ptr, integer_zero_node);\n+\t\t\t      coro_frame_ptr, nullptr_node);\n   tree coro_fp = coro_build_artificial_var (fn_start, \"_Coro_frameptr\",\n \t\t\t\t\t    coro_frame_ptr, orig, zeroinit);\n   tree varlist = coro_fp;\n@@ -4754,7 +4754,7 @@ morph_fn_to_coro (tree orig, tree *resumer, tree *destroyer)\n \n       gcc_checking_assert (same_type_p (fn_return_type, TREE_TYPE (grooaf)));\n       tree if_stmt = begin_if_stmt ();\n-      tree cond = build1 (CONVERT_EXPR, coro_frame_ptr, integer_zero_node);\n+      tree cond = build1 (CONVERT_EXPR, coro_frame_ptr, nullptr_node);\n       cond = build2 (EQ_EXPR, boolean_type_node, coro_fp, cond);\n       finish_if_stmt_cond (cond, if_stmt);\n       if (VOID_TYPE_P (fn_return_type))"}, {"sha": "22d7074f2615caedf8f15d05ab16f1422e67e0bf", "filename": "gcc/testsuite/g++.dg/coroutines/pr107768.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b1d66658ecdcc3d9251641a0b902b4c73ace303/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr107768.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b1d66658ecdcc3d9251641a0b902b4c73ace303/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr107768.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr107768.C?ref=0b1d66658ecdcc3d9251641a0b902b4c73ace303", "patch": "@@ -0,0 +1,26 @@\n+//  { dg-additional-options \"-Wzero-as-null-pointer-constant -fsyntax-only\" }\n+\n+#include <coroutine>\n+ \n+struct task\n+{\n+    struct promise_type\n+    {\n+        task get_return_object() { return {}; }\n+        std::suspend_never initial_suspend() { return {}; }\n+        std::suspend_never final_suspend() noexcept { return {}; }\n+        void return_void() {}\n+        void unhandled_exception() {}\n+    };\n+};\n+ \n+task resuming_on_new_thread(void)\n+{\n+    struct awaitable\n+    {\n+        bool await_ready() { return false; }\n+        void await_suspend(std::coroutine_handle<> h)         {         }\n+        void await_resume() {}\n+    };\n+    co_await awaitable{};\n+}"}]}