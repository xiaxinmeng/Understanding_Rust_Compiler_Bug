{"sha": "80c5ad359f30c86d48a04c080785606a2701ab71", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODBjNWFkMzU5ZjMwYzg2ZDQ4YTA0YzA4MDc4NTYwNmEyNzAxYWI3MQ==", "commit": {"author": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2016-08-18T14:39:22Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2016-08-18T14:39:22Z"}, "message": "DWARF: do not emit DW_TAG_variable to materialize DWARF procedures\n\nHello,\n\nFor -gdwarf-3 and newer, the DWARF back-end sometimes generates DWARF\nprocedures to factorize complex location descriptions.  DWARF procedures\ncan be materialized as DW_TAG_dwarf_procedure DIEs, but actually any DIE\nthat can hold a DW_AT_location attribute is also accepted.\n\nUnlike what I thought at some point, the DW_TAG_dwarf_procedure tag was\nintroduced in the DWARFv3 standard, not the DWARFv4 one, so the back-end\ncan always emit DW_TAG_dwarf_procedure DIEs, as this simplifies code and\nprevents the types pruning pass from missing a DWARF procedure.\n\nBoostrapped and regtested on x86_64-linux: no regression.  Ok to commit?\nThank you in advance!\n\ngcc/\n\n\t* dwarf2out.c (copy_dwarf_procedure): Remove obsolete comment.\n\t(new_dwarf_proc_die): Emit DW_TAG_dwarf_procedure DIEs even for\n\t-gdwarf-3.\n\t(function_to_dwarf_procedure): Update comment.\n\nFrom-SVN: r239575", "tree": {"sha": "e55edc4fa8fd327e421894c2c5b542df4808abf6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e55edc4fa8fd327e421894c2c5b542df4808abf6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/80c5ad359f30c86d48a04c080785606a2701ab71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80c5ad359f30c86d48a04c080785606a2701ab71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80c5ad359f30c86d48a04c080785606a2701ab71", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80c5ad359f30c86d48a04c080785606a2701ab71/comments", "author": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0b224dcf60dd8bd401501178f6118b8455ceeb1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b224dcf60dd8bd401501178f6118b8455ceeb1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b224dcf60dd8bd401501178f6118b8455ceeb1f"}], "stats": {"total": 23, "additions": 9, "deletions": 14}, "files": [{"sha": "505e66eae01a20ff59a35d1156390822d567ee15", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80c5ad359f30c86d48a04c080785606a2701ab71/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80c5ad359f30c86d48a04c080785606a2701ab71/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=80c5ad359f30c86d48a04c080785606a2701ab71", "patch": "@@ -1,3 +1,10 @@\n+2016-08-18  Pierre-Marie de Rodat  <derodat@adacore.com>\n+\n+\t* dwarf2out.c (copy_dwarf_procedure): Remove obsolete comment.\n+\t(new_dwarf_proc_die): Emit DW_TAG_dwarf_procedure DIEs even for\n+\t-gdwarf-3.\n+\t(function_to_dwarf_procedure): Update comment.\n+\n 2016-08-18  David Malcolm  <dmalcolm@redhat.com>\n \n \t* input.c (diagnostics_file_cache_forcibly_evict_file): New"}, {"sha": "98f08b7f65ba83a3ad34ab7e39cd0e7989b97f8e", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80c5ad359f30c86d48a04c080785606a2701ab71/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80c5ad359f30c86d48a04c080785606a2701ab71/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=80c5ad359f30c86d48a04c080785606a2701ab71", "patch": "@@ -7747,9 +7747,6 @@ copy_dwarf_procedure (dw_die_ref die,\n \t\t      comdat_type_node *type_node,\n \t\t      hash_map<dw_die_ref, dw_die_ref> &copied_dwarf_procs)\n {\n-  /* We do this for COMDAT section, which is DWARFv4 specific, so\n-     DWARF procedure are always DW_TAG_dwarf_procedure DIEs (unlike\n-     DW_TAG_variable in DWARFv3).  */\n   gcc_assert (die->die_tag == DW_TAG_dwarf_procedure);\n \n   /* DWARF procedures are not supposed to have children...  */\n@@ -15332,22 +15329,15 @@ static dw_die_ref\n new_dwarf_proc_die (dw_loc_descr_ref location, tree fndecl,\n \t\t    dw_die_ref parent_die)\n {\n-  const bool dwarf_proc_supported = dwarf_version >= 4;\n   dw_die_ref dwarf_proc_die;\n \n   if ((dwarf_version < 3 && dwarf_strict)\n       || location == NULL)\n     return NULL;\n \n-  dwarf_proc_die  = new_die (dwarf_proc_supported\n-\t\t\t     ? DW_TAG_dwarf_procedure\n-\t\t\t     : DW_TAG_variable,\n-\t\t\t     parent_die,\n-\t\t\t     fndecl);\n+  dwarf_proc_die = new_die (DW_TAG_dwarf_procedure, parent_die, fndecl);\n   if (fndecl)\n     equate_decl_number_to_die (fndecl, dwarf_proc_die);\n-  if (!dwarf_proc_supported)\n-    add_AT_flag (dwarf_proc_die, DW_AT_artificial, 1);\n   add_AT_loc (dwarf_proc_die, DW_AT_location, location);\n   return dwarf_proc_die;\n }\n@@ -15673,9 +15663,7 @@ function_to_dwarf_procedure (tree fndecl)\n   if (dwarf_proc_die != NULL)\n     return dwarf_proc_die;\n \n-  /* DWARF procedures are available starting with the DWARFv3 standard, but\n-     it's the DWARFv4 standard that introduces the DW_TAG_dwarf_procedure\n-     DIE.  */\n+  /* DWARF procedures are available starting with the DWARFv3 standard.  */\n   if (dwarf_version < 3 && dwarf_strict)\n     return NULL;\n "}]}