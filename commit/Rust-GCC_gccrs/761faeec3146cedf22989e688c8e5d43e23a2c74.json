{"sha": "761faeec3146cedf22989e688c8e5d43e23a2c74", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzYxZmFlZWMzMTQ2Y2VkZjIyOTg5ZTY4OGM4ZTVkNDNlMjNhMmM3NA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2003-10-24T22:51:15Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2003-10-24T22:51:15Z"}, "message": "locale_facets.tcc (money_get::do_get(..., long double&): Properly size the temporary buffer.\n\n2003-10-24  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/locale_facets.tcc (money_get::do_get(...,\n\tlong double&): Properly size the temporary buffer.\n\t* testsuite/22_locale/money_get/get/char/11.cc: New.\n\t* testsuite/22_locale/money_get/get/wchar_t/11.cc: Ditto.\n\n\t* include/bits/locale_facets.tcc (num_put::_M_group_int,\n\tnum_put::_M_group_float, money_put::do_put(..., const\n\tstring_type&), collate::do_compare, collate::do_transform):\n\tPrefer basic_string::data() to c_str() when the '\\0'\n\tterminator is not really needed.\n\nFrom-SVN: r72911", "tree": {"sha": "823122ab2d102de228ac9319c5347dd66d069abe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/823122ab2d102de228ac9319c5347dd66d069abe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/761faeec3146cedf22989e688c8e5d43e23a2c74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/761faeec3146cedf22989e688c8e5d43e23a2c74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/761faeec3146cedf22989e688c8e5d43e23a2c74", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/761faeec3146cedf22989e688c8e5d43e23a2c74/comments", "author": null, "committer": null, "parents": [{"sha": "7bb1ad9314f7e671cf8c4b69da55dc0afe7cba01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bb1ad9314f7e671cf8c4b69da55dc0afe7cba01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bb1ad9314f7e671cf8c4b69da55dc0afe7cba01"}], "stats": {"total": 163, "additions": 151, "deletions": 12}, "files": [{"sha": "2c1ec40354bf63323abf936bb5aa07649f4ff77a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/761faeec3146cedf22989e688c8e5d43e23a2c74/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/761faeec3146cedf22989e688c8e5d43e23a2c74/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=761faeec3146cedf22989e688c8e5d43e23a2c74", "patch": "@@ -1,3 +1,16 @@\n+2003-10-24  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/locale_facets.tcc (money_get::do_get(...,\n+\tlong double&): Properly size the temporary buffer.\n+\t* testsuite/22_locale/money_get/get/char/11.cc: New.\n+\t* testsuite/22_locale/money_get/get/wchar_t/11.cc: Ditto.\n+\n+\t* include/bits/locale_facets.tcc (num_put::_M_group_int,\n+\tnum_put::_M_group_float, money_put::do_put(..., const\n+\tstring_type&), collate::do_compare, collate::do_transform):\n+\tPrefer basic_string::data() to c_str() when the '\\0'\n+\tterminator is not really needed.\n+\n 2003-10-24  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/locale_facets.tcc (__verify_grouping):"}, {"sha": "94d41a545c4b64be46ec1132db921620cfbec261", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/761faeec3146cedf22989e688c8e5d43e23a2c74/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/761faeec3146cedf22989e688c8e5d43e23a2c74/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=761faeec3146cedf22989e688c8e5d43e23a2c74", "patch": "@@ -795,8 +795,8 @@ namespace std\n \t    __new[1] = __cs[1];\n \t  }\n       _CharT* __p;\n-      __p = std::__add_grouping(__new + __off, __sep, __grouping.c_str(), \n-\t\t\t\t__grouping.c_str() + __grouping.size(),\n+      __p = std::__add_grouping(__new + __off, __sep, __grouping.data(), \n+\t\t\t\t__grouping.data() + __grouping.size(),\n \t\t\t\t__cs + __off, __cs + __len);\n       __len = __p - __new;\n     }\n@@ -866,8 +866,8 @@ namespace std\n       // Add grouping, if necessary. \n       _CharT* __p2;\n       const int __declen = __p ? __p - __cs : __len;\n-      __p2 = std::__add_grouping(__new, __sep, __grouping.c_str(),\n-\t\t\t\t __grouping.c_str() + __grouping.size(),\n+      __p2 = std::__add_grouping(__new, __sep, __grouping.data(),\n+\t\t\t\t __grouping.data() + __grouping.size(),\n \t\t\t\t __cs, __cs + __declen);\n       \n       // Tack on decimal part.\n@@ -1117,12 +1117,12 @@ namespace std\n       string_type __str;\n       __beg = this->do_get(__beg, __end, __intl, __io, __err, __str); \n \n-      const int __n = numeric_limits<long double>::digits10;\n-      char* __cs = static_cast<char*>(__builtin_alloca(__n));\n+      const int __cs_size = __str.size() + 1;\n+      char* __cs = static_cast<char*>(__builtin_alloca(__cs_size));\n       const locale __loc = __io.getloc();\n       const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc); \n       const _CharT* __wcs = __str.c_str();\n-      __ctype.narrow(__wcs, __wcs + __str.size() + 1, char(), __cs);      \n+      __ctype.narrow(__wcs, __wcs + __cs_size, char(), __cs);      \n       std::__convert_to_v(__cs, __units, __err, _S_get_c_locale());\n       return __beg;\n     }\n@@ -1457,7 +1457,7 @@ namespace std\n \t\t{\n \t\t  const char_type __sep = __intl ? __mpt.thousands_sep() \n \t\t    \t\t\t         : __mpf.thousands_sep();\n-\t\t  const char* __gbeg = __grouping.c_str();\n+\t\t  const char* __gbeg = __grouping.data();\n \t\t  const char* __gend = __gbeg + __grouping.size();\n \t\t  const int __n = (__end - __beg) * 2;\n \t\t  _CharT* __ws2 =\n@@ -1530,7 +1530,7 @@ namespace std\n \t    }\n \n \t  // Write resulting, fully-formatted string to output iterator.\n-\t  __s = std::__write(__s, __res.c_str(), __len);\n+\t  __s = std::__write(__s, __res.data(), __len);\n \t}\n       __io.width(0);\n       return __s; \n@@ -2101,9 +2101,9 @@ namespace std\n       const string_type __two(__lo2, __hi2);\n \n       const _CharT* __p = __one.c_str();\n-      const _CharT* __pend = __one.c_str() + __one.length();\n+      const _CharT* __pend = __one.data() + __one.length();\n       const _CharT* __q = __two.c_str();\n-      const _CharT* __qend = __two.c_str() + __two.length();\n+      const _CharT* __qend = __two.data() + __two.length();\n \n       // strcoll stops when it sees a nul character so we break\n       // the strings into zero-terminated substrings and pass those\n@@ -2137,7 +2137,7 @@ namespace std\n       string_type __str(__lo, __hi);\n \n       const _CharT* __p = __str.c_str();\n-      const _CharT* __pend = __str.c_str() + __str.length();\n+      const _CharT* __pend = __str.data() + __str.length();\n \n       size_t __len = (__hi - __lo) * 2;\n "}, {"sha": "5494ca0d075c852b27542989695871543070f878", "filename": "libstdc++-v3/testsuite/22_locale/money_get/get/char/11.cc", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/761faeec3146cedf22989e688c8e5d43e23a2c74/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F11.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/761faeec3146cedf22989e688c8e5d43e23a2c74/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F11.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F11.cc?ref=761faeec3146cedf22989e688c8e5d43e23a2c74", "patch": "@@ -0,0 +1,63 @@\n+// 2003-10-24  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.6.1.1 money_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <limits>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  using namespace std;\n+  typedef istreambuf_iterator<char> iterator_type;\n+\n+  bool test __attribute__((unused)) = true;\n+  \n+  // basic construction\n+  locale loc_de = __gnu_test::try_named_locale(\"de_DE@euro\");\n+\n+  iterator_type end;\n+  istringstream iss;\n+  iss.imbue(loc_de);\n+\n+  // cache the money_get facet\n+  const money_get<char>& mon_get = use_facet<money_get<char> >(iss.getloc()); \n+\n+  // A _very_ big amount.\n+  string str = \"1\";\n+  for (int i = 0; i < 2 * numeric_limits<long double>::digits10; ++i)\n+    str += \".000\";\n+  str += \",00 \";\n+\n+  iss.str(str);\n+  iterator_type is_it01(iss);\n+  long double result1;\n+  ios_base::iostate err01 = ios_base::goodbit;\n+  mon_get.get(is_it01, end, true, iss, err01, result1);\n+  VERIFY( err01 == ios_base::eofbit );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "af2c230b9a1e1aad8828ae21ad93baa2ca5ef8ac", "filename": "libstdc++-v3/testsuite/22_locale/money_get/get/wchar_t/11.cc", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/761faeec3146cedf22989e688c8e5d43e23a2c74/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F11.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/761faeec3146cedf22989e688c8e5d43e23a2c74/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F11.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F11.cc?ref=761faeec3146cedf22989e688c8e5d43e23a2c74", "patch": "@@ -0,0 +1,63 @@\n+// 2003-10-24  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.6.1.1 money_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <limits>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  using namespace std;\n+  typedef istreambuf_iterator<wchar_t> iterator_type;\n+\n+  bool test __attribute__((unused)) = true;\n+  \n+  // basic construction\n+  locale loc_de = __gnu_test::try_named_locale(\"de_DE@euro\");\n+\n+  iterator_type end;\n+  wistringstream iss;\n+  iss.imbue(loc_de);\n+\n+  // cache the money_get facet\n+  const money_get<wchar_t>& mon_get = use_facet<money_get<wchar_t> >(iss.getloc()); \n+\n+  // A _very_ big amount.\n+  wstring str = L\"1\";\n+  for (int i = 0; i < 2 * numeric_limits<long double>::digits10; ++i)\n+    str += L\".000\";\n+  str += L\",00 \";\n+\n+  iss.str(str);\n+  iterator_type is_it01(iss);\n+  long double result1;\n+  ios_base::iostate err01 = ios_base::goodbit;\n+  mon_get.get(is_it01, end, true, iss, err01, result1);\n+  VERIFY( err01 == ios_base::eofbit );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}