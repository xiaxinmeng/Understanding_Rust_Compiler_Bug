{"sha": "539edbe025fc62fd752336b6bfe8b6a05a3afe0e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTM5ZWRiZTAyNWZjNjJmZDc1MjMzNmI2YmZlOGI2YTA1YTNhZmUwZQ==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-11-23T01:38:31Z"}, "committer": {"name": "Mohan Embar", "email": "membar@gcc.gnu.org", "date": "2003-11-23T01:38:31Z"}, "message": "* gnu/java/net/natPlainDatagramSocketImplWin32.cc\n\t(peekData): Use offset and maximal free space in datagram packet.\n\t(receive): Likewise.\n\t(send): Use offset in datagram packet.\n\nFrom-SVN: r73848", "tree": {"sha": "1ff853f8f58898b54d30065be8b294cce97ba655", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ff853f8f58898b54d30065be8b294cce97ba655"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/539edbe025fc62fd752336b6bfe8b6a05a3afe0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/539edbe025fc62fd752336b6bfe8b6a05a3afe0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/539edbe025fc62fd752336b6bfe8b6a05a3afe0e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/539edbe025fc62fd752336b6bfe8b6a05a3afe0e/comments", "author": null, "committer": null, "parents": [{"sha": "a6e5d84721ffda399db293cf22911f74585c25f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6e5d84721ffda399db293cf22911f74585c25f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6e5d84721ffda399db293cf22911f74585c25f6"}], "stats": {"total": 19, "additions": 14, "deletions": 5}, "files": [{"sha": "938a517fd64976641ec315b528f4b587a207a491", "filename": "libjava/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/539edbe025fc62fd752336b6bfe8b6a05a3afe0e/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/539edbe025fc62fd752336b6bfe8b6a05a3afe0e/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=539edbe025fc62fd752336b6bfe8b6a05a3afe0e", "patch": "@@ -1,3 +1,10 @@\n+2003-11-22  Michael Koch  <konqueror@gmx.de>\n+\n+\t* gnu/java/net/natPlainDatagramSocketImplWin32.cc\n+\t(peekData): Use offset and maximal free space in datagram packet.\n+\t(receive): Likewise.\n+\t(send): Use offset in datagram packet.\n+\n 2003-11-22  Michael Koch  <konqueror@gmx.de>\n \n \t* gnu/java/net/natPlainDatagramSocketImplPosix.cc"}, {"sha": "15105b963cb879ceadfd84a2fa614e8b3a6bd1ab", "filename": "libjava/gnu/java/net/natPlainDatagramSocketImplWin32.cc", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/539edbe025fc62fd752336b6bfe8b6a05a3afe0e/libjava%2Fgnu%2Fjava%2Fnet%2FnatPlainDatagramSocketImplWin32.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/539edbe025fc62fd752336b6bfe8b6a05a3afe0e/libjava%2Fgnu%2Fjava%2Fnet%2FnatPlainDatagramSocketImplWin32.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnet%2FnatPlainDatagramSocketImplWin32.cc?ref=539edbe025fc62fd752336b6bfe8b6a05a3afe0e", "patch": "@@ -202,7 +202,8 @@ gnu::java::net::PlainDatagramSocketImpl::peekData(::java::net::DatagramPacket *p\n   // FIXME: Deal with Multicast and if the socket is connected.\n   union SockAddr u;\n   socklen_t addrlen = sizeof(u);\n-  jbyte *dbytes = elements (p->getData());\n+  jbyte *dbytes = elements (p->getData()) + p->getOffset();\n+  jint maxlen = p->getData()->length - p->getOffset();\n   ssize_t retlen = 0;\n \n   if (timeout > 0)\n@@ -214,7 +215,7 @@ gnu::java::net::PlainDatagramSocketImpl::peekData(::java::net::DatagramPacket *p\n     }\n \n   retlen =\n-    ::recvfrom (native_fd, (char *) dbytes, p->getLength(), MSG_PEEK, (sockaddr*) &u,\n+    ::recvfrom (native_fd, (char *) dbytes, maxlen, MSG_PEEK, (sockaddr*) &u,\n       &addrlen);\n   if (retlen == SOCKET_ERROR)\n     goto error;\n@@ -280,7 +281,7 @@ gnu::java::net::PlainDatagramSocketImpl::send (::java::net::DatagramPacket *p)\n   jbyte *bytes = elements (haddress);\n   int len = haddress->length;\n   struct sockaddr *ptr = (struct sockaddr *) &u.address;\n-  jbyte *dbytes = elements (p->getData());\n+  jbyte *dbytes = elements (p->getData()) + p->getOffset();\n   if (len == 4)\n     {\n       u.address.sin_family = AF_INET;\n@@ -316,7 +317,8 @@ gnu::java::net::PlainDatagramSocketImpl::receive (::java::net::DatagramPacket *p\n   // FIXME: Deal with Multicast and if the socket is connected.\n   union SockAddr u;\n   socklen_t addrlen = sizeof(u);\n-  jbyte *dbytes = elements (p->getData());\n+  jbyte *dbytes = elements (p->getData()) + p->getOffset();\n+  jint maxlen = p->getData()->length - p->getOffset();\n   ssize_t retlen = 0;\n \n   if (timeout > 0)\n@@ -331,7 +333,7 @@ gnu::java::net::PlainDatagramSocketImpl::receive (::java::net::DatagramPacket *p\n     }\n \n   retlen =\n-    ::recvfrom (native_fd, (char *) dbytes, p->getLength(), 0, (sockaddr*) &u,\n+    ::recvfrom (native_fd, (char *) dbytes, maxlen, 0, (sockaddr*) &u,\n       &addrlen);\n   if (retlen < 0)\n     goto error;"}]}