{"sha": "26e0dcb3262e0b0dae53d60ef6a8ea3cce6b2e40", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjZlMGRjYjMyNjJlMGIwZGFlNTNkNjBlZjZhOGVhM2NjZTZiMmU0MA==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@apple.com", "date": "2003-07-17T21:52:51Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2003-07-17T21:52:51Z"}, "message": "re PR middle-end/11498 (asm can't be used to give a variable its own name)\n\n\tPR 11498\n\t* Makefile.in (c-opts.o): Add $(LANGHOOKS_DEF_H).\n\t(langhooks.o): Add $(GGC_H), gt-langhooks.h.\n\t(GTFILES): Add langhooks.c.\n\t(gt-langhooks.h): New.\n\t* c-common.h (c_static_assembler_name): Prototype.\n\t* c-lang.c (LANG_HOOKS_SET_DECL_ASSEMBLER_NAME): Define.\n\t* objc/objc-lang.c (LANG_HOOKS_SET_DECL_ASSEMBLER_NAME): Define.\n\t* c-opts.c: Include langhooks-def.h.\n\t(c_static_assembler_name): New.\n\t* langhooks.c: Include ggc.h.  Include gt-langhooks.h.\n\t(var_labelno): New.\n\t(lhd_set_decl_assembler_name): Give static objects with context\n\tunique names.\n\t* varasm.c (var_labelno): Delete.\n\t(make_decl_rtl): Don't change the assembler name once it's set.\n\nFrom-SVN: r69527", "tree": {"sha": "29814f71f7c3a3908af1f0248cd905e9f4e13d0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/29814f71f7c3a3908af1f0248cd905e9f4e13d0f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26e0dcb3262e0b0dae53d60ef6a8ea3cce6b2e40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26e0dcb3262e0b0dae53d60ef6a8ea3cce6b2e40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26e0dcb3262e0b0dae53d60ef6a8ea3cce6b2e40", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26e0dcb3262e0b0dae53d60ef6a8ea3cce6b2e40/comments", "author": {"login": "geoffk01", "id": 31905243, "node_id": "MDQ6VXNlcjMxOTA1MjQz", "avatar_url": "https://avatars.githubusercontent.com/u/31905243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geoffk01", "html_url": "https://github.com/geoffk01", "followers_url": "https://api.github.com/users/geoffk01/followers", "following_url": "https://api.github.com/users/geoffk01/following{/other_user}", "gists_url": "https://api.github.com/users/geoffk01/gists{/gist_id}", "starred_url": "https://api.github.com/users/geoffk01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geoffk01/subscriptions", "organizations_url": "https://api.github.com/users/geoffk01/orgs", "repos_url": "https://api.github.com/users/geoffk01/repos", "events_url": "https://api.github.com/users/geoffk01/events{/privacy}", "received_events_url": "https://api.github.com/users/geoffk01/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "89e9faee226678f1298961f6ef75243f2c1b3b2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89e9faee226678f1298961f6ef75243f2c1b3b2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89e9faee226678f1298961f6ef75243f2c1b3b2c"}], "stats": {"total": 135, "additions": 91, "deletions": 44}, "files": [{"sha": "fea6e3b6be59f029f7511d09100e756f6d15c2e9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e0dcb3262e0b0dae53d60ef6a8ea3cce6b2e40/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e0dcb3262e0b0dae53d60ef6a8ea3cce6b2e40/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=26e0dcb3262e0b0dae53d60ef6a8ea3cce6b2e40", "patch": "@@ -1,5 +1,22 @@\n 2003-07-17  Geoffrey Keating  <geoffk@apple.com>\n \n+\tPR 11498\n+\t* Makefile.in (c-opts.o): Add $(LANGHOOKS_DEF_H).\n+\t(langhooks.o): Add $(GGC_H), gt-langhooks.h.\n+\t(GTFILES): Add langhooks.c.\n+\t(gt-langhooks.h): New.\n+\t* c-common.h (c_static_assembler_name): Prototype.\n+\t* c-lang.c (LANG_HOOKS_SET_DECL_ASSEMBLER_NAME): Define.\n+\t* objc/objc-lang.c (LANG_HOOKS_SET_DECL_ASSEMBLER_NAME): Define.\n+\t* c-opts.c: Include langhooks-def.h.\n+\t(c_static_assembler_name): New.\n+\t* langhooks.c: Include ggc.h.  Include gt-langhooks.h.\n+\t(var_labelno): New.\n+\t(lhd_set_decl_assembler_name): Give static objects with context\n+\tunique names.\n+\t* varasm.c (var_labelno): Delete.\n+\t(make_decl_rtl): Don't change the assembler name once it's set.\n+\n \t* c-opts.c (this_input_filename): New.\n \t(finish_options): Take new parameter, name of file being compiled.\n \tUpdate callers.  Set this_input_filename."}, {"sha": "7ba4fa912f4b957ffbee7ae66a6eb857967c1e3a", "filename": "gcc/Makefile.in", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e0dcb3262e0b0dae53d60ef6a8ea3cce6b2e40/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e0dcb3262e0b0dae53d60ef6a8ea3cce6b2e40/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=26e0dcb3262e0b0dae53d60ef6a8ea3cce6b2e40", "patch": "@@ -1324,7 +1324,8 @@ c-pretty-print.o : c-pretty-print.c c-pretty-print.h pretty-print.h \\\n \n c-opts.o : c-opts.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n         c-pragma.h flags.h toplev.h langhooks.h tree-inline.h diagnostic.h \\\n-\tintl.h debug.h $(C_COMMON_H) opts.h options.h $(PARAMS_H)\n+\tintl.h debug.h $(C_COMMON_H) opts.h options.h $(PARAMS_H) \\\n+\t$(LANGHOOKS_DEF_H)\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n \t\t$< $(OUTPUT_OPTION) @TARGET_SYSTEM_ROOT_DEFINE@\n \n@@ -1463,7 +1464,7 @@ convert.o: convert.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) flags\n \n langhooks.o : langhooks.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) toplev.h \\\n    tree-inline.h $(RTL_H) insn-config.h $(INTEGRATE_H) langhooks.h \\\n-   $(LANGHOOKS_DEF_H) flags.h\n+   $(LANGHOOKS_DEF_H) flags.h $(GGC_H) gt-langhooks.h\n tree.o : tree.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) flags.h function.h \\\n    toplev.h $(GGC_H) $(HASHTAB_H) $(TARGET_H) output.h $(TM_P_H) langhooks.h \\\n    real.h gt-tree.h\n@@ -2019,7 +2020,7 @@ GTFILES = $(srcdir)/input.h $(srcdir)/coretypes.h $(srcdir)/cpplib.h \\\n   $(srcdir)/fold-const.c $(srcdir)/function.c \\\n   $(srcdir)/gcse.c $(srcdir)/integrate.c $(srcdir)/lists.c $(srcdir)/optabs.c \\\n   $(srcdir)/profile.c $(srcdir)/ra-build.c $(srcdir)/regclass.c \\\n-  $(srcdir)/reg-stack.c $(srcdir)/cfglayout.c \\\n+  $(srcdir)/reg-stack.c $(srcdir)/cfglayout.c $(srcdir)/langhooks.c \\\n   $(srcdir)/sdbout.c $(srcdir)/stmt.c $(srcdir)/stor-layout.c \\\n   $(srcdir)/stringpool.c $(srcdir)/tree.c $(srcdir)/varasm.c \\\n   $(out_file) \\\n@@ -2038,7 +2039,7 @@ gt-expr.h gt-sdbout.h gt-optabs.h gt-bitmap.h \\\n gt-dwarf2out.h gt-ra-build.h gt-reg-stack.h gt-dwarf2asm.h \\\n gt-dbxout.h gt-c-common.h gt-c-decl.h gt-c-parse.h \\\n gt-c-pragma.h gt-c-objc-common.h gtype-c.h gt-input.h gt-cfglayout.h \\\n-gt-stringpool.h : s-gtype ; @true\n+gt-stringpool.h gt-langhooks.h : s-gtype ; @true\n \n gtyp-gen.h: Makefile\n \techo \"/* This file is machine generated.  Do not edit.  */\" > tmp-gtyp.h"}, {"sha": "6f579ac9ed1d597d819dc20aa5aa08c1f479476d", "filename": "gcc/c-common.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e0dcb3262e0b0dae53d60ef6a8ea3cce6b2e40/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e0dcb3262e0b0dae53d60ef6a8ea3cce6b2e40/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=26e0dcb3262e0b0dae53d60ef6a8ea3cce6b2e40", "patch": "@@ -905,6 +905,7 @@ extern void check_function_format (int *, tree, tree);\n extern void set_Wformat (int);\n extern tree handle_format_attribute (tree *, tree, tree, int, bool *);\n extern tree handle_format_arg_attribute (tree *, tree, tree, int, bool *);\n+extern void c_static_assembler_name (tree);\n extern void c_common_insert_default_attributes (tree);\n extern int c_common_handle_option (size_t code, const char *arg, int value);\n extern void c_common_handle_filename (const char *filename);"}, {"sha": "98158a1eaefc7105019412122a88f6b5252ef474", "filename": "gcc/c-lang.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e0dcb3262e0b0dae53d60ef6a8ea3cce6b2e40/gcc%2Fc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e0dcb3262e0b0dae53d60ef6a8ea3cce6b2e40/gcc%2Fc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lang.c?ref=26e0dcb3262e0b0dae53d60ef6a8ea3cce6b2e40", "patch": "@@ -71,6 +71,8 @@ enum c_language_kind c_language = clk_c;\n #define LANG_HOOKS_UNSAFE_FOR_REEVAL c_common_unsafe_for_reeval\n #undef LANG_HOOKS_STATICP\n #define LANG_HOOKS_STATICP c_staticp\n+#undef LANG_HOOKS_SET_DECL_ASSEMBLER_NAME\n+#define LANG_HOOKS_SET_DECL_ASSEMBLER_NAME c_static_assembler_name\n #undef LANG_HOOKS_NO_BODY_BLOCKS\n #define LANG_HOOKS_NO_BODY_BLOCKS true\n #undef LANG_HOOKS_WARN_UNUSED_GLOBAL_DECL"}, {"sha": "9fa6ddac104c053e1c5f72d55486d41e124402e7", "filename": "gcc/c-opts.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e0dcb3262e0b0dae53d60ef6a8ea3cce6b2e40/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e0dcb3262e0b0dae53d60ef6a8ea3cce6b2e40/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=26e0dcb3262e0b0dae53d60ef6a8ea3cce6b2e40", "patch": "@@ -37,6 +37,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"debug.h\"\t\t/* For debug_hooks.  */\n #include \"opts.h\"\n #include \"options.h\"\n+#include \"langhooks-def.h\"\n \n #ifndef DOLLARS_IN_IDENTIFIERS\n # define DOLLARS_IN_IDENTIFIERS true\n@@ -1250,6 +1251,22 @@ c_common_finish (void)\n     fatal_error (\"when writing output to %s: %m\", out_fname);\n }\n \n+/* A wrapper around lhd_set_decl_assembler_name that gives static\n+   variables their C names if they are at the top level and only one\n+   translation unit is being compiled, for backwards compatibility\n+   with certain bizzare assembler hacks (like crtstuff.c).  */\n+\n+void\n+c_static_assembler_name (tree decl)\n+{\n+  if (num_in_fnames == 1\n+      && TREE_STATIC (decl) && !TREE_PUBLIC (decl) && DECL_CONTEXT (decl)\n+      && TREE_CODE (DECL_CONTEXT (decl)) == TRANSLATION_UNIT_DECL)\n+    SET_DECL_ASSEMBLER_NAME (decl, DECL_NAME (decl));\n+  else\n+    lhd_set_decl_assembler_name (decl);\n+}\n+\n /* Either of two environment variables can specify output of\n    dependencies.  Their value is either \"OUTPUT_FILE\" or \"OUTPUT_FILE\n    DEPS_TARGET\", where OUTPUT_FILE is the file to write deps info to"}, {"sha": "e86cfb2b5539e4e02efc3bfe4b7aca19d1f4341d", "filename": "gcc/langhooks.c", "status": "modified", "additions": 30, "deletions": 6, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e0dcb3262e0b0dae53d60ef6a8ea3cce6b2e40/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e0dcb3262e0b0dae53d60ef6a8ea3cce6b2e40/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=26e0dcb3262e0b0dae53d60ef6a8ea3cce6b2e40", "patch": "@@ -32,6 +32,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"flags.h\"\n #include \"langhooks.h\"\n #include \"langhooks-def.h\"\n+#include \"ggc.h\"\n \n /* Do nothing; in many cases the default hook.  */\n \n@@ -136,6 +137,11 @@ lhd_warn_unused_global_decl (tree decl)\n   return true;\n }\n \n+/* Number for making the label on the next\n+   static variable internal to a function.  */\n+\n+static GTY(()) int var_labelno;\n+\n /* Set the DECL_ASSEMBLER_NAME for DECL.  */\n void\n lhd_set_decl_assembler_name (tree decl)\n@@ -149,12 +155,28 @@ lhd_set_decl_assembler_name (tree decl)\n \t  && (TREE_STATIC (decl)\n \t      || DECL_EXTERNAL (decl)\n \t      || TREE_PUBLIC (decl))))\n-    /* By default, assume the name to use in assembly code is the\n-       same as that used in the source language.  (That's correct\n-       for C, and GCC used to set DECL_ASSEMBLER_NAME to the same\n-       value as DECL_NAME in build_decl, so this choice provides\n-       backwards compatibility with existing front-ends.  */\n-    SET_DECL_ASSEMBLER_NAME (decl, DECL_NAME (decl));\n+    {\n+      /* By default, assume the name to use in assembly code is the\n+\t same as that used in the source language.  (That's correct\n+\t for C, and GCC used to set DECL_ASSEMBLER_NAME to the same\n+\t value as DECL_NAME in build_decl, so this choice provides\n+\t backwards compatibility with existing front-ends.  \n+\n+         Can't use just the variable's own name for a variable whose\n+\t scope is less than the whole compilation.  Concatenate a\n+\t distinguishing number.  */\n+      if (!TREE_PUBLIC (decl) && DECL_CONTEXT (decl))\n+\t{\n+\t  const char *name = IDENTIFIER_POINTER (DECL_NAME (decl));\n+\t  char *label;\n+\t  \n+\t  ASM_FORMAT_PRIVATE_NAME (label, name, var_labelno);\n+\t  var_labelno++;\n+\t  SET_DECL_ASSEMBLER_NAME (decl, get_identifier (label));\n+\t}\n+      else\n+\tSET_DECL_ASSEMBLER_NAME (decl, DECL_NAME (decl));\n+    }\n   else\n     /* Nobody should ever be asking for the DECL_ASSEMBLER_NAME of\n        these DECLs -- unless they're in language-dependent code, in\n@@ -456,3 +478,5 @@ write_global_declarations (void)\n     /* Clean up.  */\n   free (vec);\n }\n+\n+#include \"gt-langhooks.h\""}, {"sha": "1700fb0ceee52a23d19a87d3f8eda85dfe6bbef9", "filename": "gcc/objc/objc-lang.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e0dcb3262e0b0dae53d60ef6a8ea3cce6b2e40/gcc%2Fobjc%2Fobjc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e0dcb3262e0b0dae53d60ef6a8ea3cce6b2e40/gcc%2Fobjc%2Fobjc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-lang.c?ref=26e0dcb3262e0b0dae53d60ef6a8ea3cce6b2e40", "patch": "@@ -69,6 +69,8 @@ enum c_language_kind c_language = clk_objc;\n #define LANG_HOOKS_UNSAFE_FOR_REEVAL c_common_unsafe_for_reeval\n #undef LANG_HOOKS_STATICP\n #define LANG_HOOKS_STATICP c_staticp\n+#undef LANG_HOOKS_SET_DECL_ASSEMBLER_NAME\n+#define LANG_HOOKS_SET_DECL_ASSEMBLER_NAME c_static_assembler_name\n #undef LANG_HOOKS_NO_BODY_BLOCKS\n #define LANG_HOOKS_NO_BODY_BLOCKS true\n #undef LANG_HOOKS_DUP_LANG_SPECIFIC_DECL"}, {"sha": "9be0bd68814133a9ab4feb9dac76873e1adeb5c0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e0dcb3262e0b0dae53d60ef6a8ea3cce6b2e40/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e0dcb3262e0b0dae53d60ef6a8ea3cce6b2e40/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=26e0dcb3262e0b0dae53d60ef6a8ea3cce6b2e40", "patch": "@@ -1,3 +1,8 @@\n+2003-07-17  Geoffrey Keating  <geoffk@apple.com>\n+\n+\tPR 11498\n+\t* gcc.c-torture/compile/mangle-1.c: New file.\n+\n 2003-07-17  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n \n \tPR c++/7809"}, {"sha": "7abc934e75c5ad457bcb8623162e274a2322fdec", "filename": "gcc/testsuite/gcc.c-torture/compile/mangle-1.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e0dcb3262e0b0dae53d60ef6a8ea3cce6b2e40/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fmangle-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e0dcb3262e0b0dae53d60ef6a8ea3cce6b2e40/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fmangle-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fmangle-1.c?ref=26e0dcb3262e0b0dae53d60ef6a8ea3cce6b2e40", "patch": "@@ -0,0 +1,9 @@\n+int foo(void)\n+{\n+  static int x asm (\"x\") = 3;\n+  return x++;\n+}\n+\n+int X2 asm (\"x.0\") = 4;\n+int X3 asm (\"_x.0\") = 5;\n+"}, {"sha": "9b02fe0d3133dda8b9668a84de5dc2aec40ebf62", "filename": "gcc/varasm.c", "status": "modified", "additions": 3, "deletions": 34, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e0dcb3262e0b0dae53d60ef6a8ea3cce6b2e40/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e0dcb3262e0b0dae53d60ef6a8ea3cce6b2e40/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=26e0dcb3262e0b0dae53d60ef6a8ea3cce6b2e40", "patch": "@@ -114,11 +114,6 @@ struct varasm_status GTY(())\n \n static GTY(()) int const_labelno;\n \n-/* Number for making the label on the next\n-   static variable internal to a function.  */\n-\n-static GTY(()) int var_labelno;\n-\n /* Carry information from ASM_DECLARE_OBJECT_NAME\n    to ASM_FINISH_DECLARE_OBJECT.  */\n \n@@ -750,11 +745,7 @@ decode_reg_name (const char *asmspec)\n void\n make_decl_rtl (tree decl, const char *asmspec)\n {\n-  int top_level = (DECL_CONTEXT (decl) == NULL_TREE\n-\t\t   || (TREE_CODE (DECL_CONTEXT (decl))\n-\t\t       == TRANSLATION_UNIT_DECL));\n   const char *name = 0;\n-  const char *new_name = 0;\n   int reg_number;\n   rtx x;\n \n@@ -794,8 +785,6 @@ make_decl_rtl (tree decl, const char *asmspec)\n       return;\n     }\n \n-  new_name = name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl));\n-\n   reg_number = decode_reg_name (asmspec);\n   if (reg_number == -2)\n     {\n@@ -804,9 +793,11 @@ make_decl_rtl (tree decl, const char *asmspec)\n       char *starred = alloca (strlen (asmspec) + 2);\n       starred[0] = '*';\n       strcpy (starred + 1, asmspec);\n-      new_name = starred;\n+      SET_DECL_ASSEMBLER_NAME (decl, get_identifier (starred));\n     }\n \n+  name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl));\n+\n   if (TREE_CODE (decl) != FUNCTION_DECL && DECL_REGISTER (decl))\n     {\n       /* First detect errors in declaring global registers.  */\n@@ -878,28 +869,6 @@ make_decl_rtl (tree decl, const char *asmspec)\n   if (TREE_CODE (decl) == VAR_DECL && DECL_WEAK (decl))\n     DECL_COMMON (decl) = 0;\n \n-  /* Can't use just the variable's own name for a variable\n-     whose scope is less than the whole file, unless it's a member\n-     of a local class (which will already be unambiguous).\n-     Concatenate a distinguishing number.  */\n-  if (!top_level && !TREE_PUBLIC (decl)\n-      && ! (DECL_CONTEXT (decl) && TYPE_P (DECL_CONTEXT (decl)))\n-      && asmspec == 0\n-      && name == IDENTIFIER_POINTER (DECL_NAME (decl)))\n-    {\n-      char *label;\n-\n-      ASM_FORMAT_PRIVATE_NAME (label, name, var_labelno);\n-      var_labelno++;\n-      new_name = label;\n-    }\n-\n-  if (name != new_name)\n-    {\n-      SET_DECL_ASSEMBLER_NAME (decl, get_identifier (new_name));\n-      name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl));\n-    }\n-\n   x = gen_rtx_SYMBOL_REF (Pmode, name);\n   SYMBOL_REF_WEAK (x) = DECL_WEAK (decl);\n   SYMBOL_REF_DECL (x) = decl;"}]}