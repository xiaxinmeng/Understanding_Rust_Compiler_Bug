{"sha": "f31fa9ea35ebcf221a2abaacba5511225f5d036e", "node_id": "C_kwDOANBUbNoAKGYzMWZhOWVhMzVlYmNmMjIxYTJhYmFhY2JhNTUxMTIyNWY1ZDAzNmU", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2023-01-24T09:49:18Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2023-01-24T14:29:17Z"}, "message": "tree-optimization/108500 - avoid useless fast-query compute in CFG cleanup\n\nCFG cleanup computes dominators before the loop over blocks looking\nfor merging opportunities.  That computes also the fast-query DFS\nnumbers but that's a bit pointless since any CFG cleanup will invalidate\nthem immediately (they are re-computed before fixing up loops).\nThe following avoids this and fixes the SIGSEGV due to the deep\nrecursion in assign_dfs_numbers after inlining very many small\nfunctions.\n\n\tPR tree-optimization/108500\n\t* dominance.h (calculate_dominance_info): Add parameter\n\tto indicate fast-query compute, defaulted to true.\n\t* dominance.cc (calculate_dominance_info): Honor\n\tfast-query compute parameter.\n\t* tree-cfgcleanup.cc (cleanup_tree_cfg_noloop): Do\n\tnot compute the dominator fast-query DFS numbers.", "tree": {"sha": "0e7da00770611f268fca937e237226cd166694f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0e7da00770611f268fca937e237226cd166694f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f31fa9ea35ebcf221a2abaacba5511225f5d036e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f31fa9ea35ebcf221a2abaacba5511225f5d036e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f31fa9ea35ebcf221a2abaacba5511225f5d036e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f31fa9ea35ebcf221a2abaacba5511225f5d036e/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f0cb3368af735e95776769c4f28fa9cbb60eaf8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f0cb3368af735e95776769c4f28fa9cbb60eaf8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f0cb3368af735e95776769c4f28fa9cbb60eaf8"}], "stats": {"total": 17, "additions": 11, "deletions": 6}, "files": [{"sha": "099b8fd3f24b243a1f320db71ecb8b4dd24f5914", "filename": "gcc/dominance.cc", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f31fa9ea35ebcf221a2abaacba5511225f5d036e/gcc%2Fdominance.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f31fa9ea35ebcf221a2abaacba5511225f5d036e/gcc%2Fdominance.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdominance.cc?ref=f31fa9ea35ebcf221a2abaacba5511225f5d036e", "patch": "@@ -705,10 +705,12 @@ compute_dom_fast_query_in_region (enum cdi_direction dir,\n }\n \n /* The main entry point into this module.  DIR is set depending on whether\n-   we want to compute dominators or postdominators.  */\n+   we want to compute dominators or postdominators.  If COMPUTE_FAST_QUERY\n+   is false then the DFS numbers allowing for a O(1) dominance query\n+   are not computed.  */\n \n void\n-calculate_dominance_info (cdi_direction dir)\n+calculate_dominance_info (cdi_direction dir, bool compute_fast_query)\n {\n   unsigned int dir_index = dom_convert_dir_to_idx (dir);\n \n@@ -745,7 +747,8 @@ calculate_dominance_info (cdi_direction dir)\n   else\n     checking_verify_dominators (dir);\n \n-  compute_dom_fast_query (dir);\n+  if (compute_fast_query)\n+    compute_dom_fast_query (dir);\n \n   timevar_pop (TV_DOMINANCE);\n }"}, {"sha": "3c5a345f4786ad05d474824fdc37afd9a9ffbbf4", "filename": "gcc/dominance.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f31fa9ea35ebcf221a2abaacba5511225f5d036e/gcc%2Fdominance.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f31fa9ea35ebcf221a2abaacba5511225f5d036e/gcc%2Fdominance.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdominance.h?ref=f31fa9ea35ebcf221a2abaacba5511225f5d036e", "patch": "@@ -35,7 +35,7 @@ enum dom_state\n   DOM_OK\t\t/* Everything is ok.  */\n };\n \n-extern void calculate_dominance_info (enum cdi_direction);\n+extern void calculate_dominance_info (enum cdi_direction, bool = true);\n extern void calculate_dominance_info_for_region (enum cdi_direction,\n \t\t\t\t\t\t vec<basic_block>);\n extern void free_dominance_info (function *, enum cdi_direction);"}, {"sha": "64ff16fc45bab5a91e6b1e05cb4651c3aede28b0", "filename": "gcc/tree-cfgcleanup.cc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f31fa9ea35ebcf221a2abaacba5511225f5d036e/gcc%2Ftree-cfgcleanup.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f31fa9ea35ebcf221a2abaacba5511225f5d036e/gcc%2Ftree-cfgcleanup.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfgcleanup.cc?ref=f31fa9ea35ebcf221a2abaacba5511225f5d036e", "patch": "@@ -1106,9 +1106,11 @@ cleanup_tree_cfg_noloop (unsigned ssa_update_flags)\n       timevar_push (TV_TREE_CLEANUP_CFG);\n     }\n \n-  /* Compute dominator info which we need for the iterative process below.  */\n+  /* Compute dominator info which we need for the iterative process below.\n+     Avoid computing the fast query DFS numbers since any block merging\n+     done will invalidate them anyway.  */\n   if (!dom_info_available_p (CDI_DOMINATORS))\n-    calculate_dominance_info (CDI_DOMINATORS);\n+    calculate_dominance_info (CDI_DOMINATORS, false);\n   else\n     checking_verify_dominators (CDI_DOMINATORS);\n "}]}