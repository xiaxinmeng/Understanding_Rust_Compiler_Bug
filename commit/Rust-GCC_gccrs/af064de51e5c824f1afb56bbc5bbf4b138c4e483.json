{"sha": "af064de51e5c824f1afb56bbc5bbf4b138c4e483", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWYwNjRkZTUxZTVjODI0ZjFhZmI1NmJiYzViYmY0YjEzOGM0ZTQ4Mw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-07-13T08:43:41Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-07-13T08:43:41Z"}, "message": "builtins.c (std_gimplify_va_arg_expr): Handle types passed by reference.\n\n        * builtins.c (std_gimplify_va_arg_expr): Handle types passed\n        by reference.\n        (ind_gimplify_va_arg_expr): Remove.\n        * tree.h (ind_gimplify_va_arg_expr): Remove.\n        * config/pa/pa.c (hppa_gimplify_va_arg_expr): Don't use it.\n        * config/mmix/mmix.c (mmix_function_arg_pass_by_reference): Allow\n        argsp to be null.\n\n        * config/arc/arc.c (arc_gimplify_va_arg_expr): Remove.\n        (TARGET_GIMPLIFY_VA_ARG_EXPR): Remove.\n        * config/cris/cris.c, config/fr30/fr30.c, config/frv/frv.c,\n        config/iq2000/iq2000.c, config/m32r/m32r.c, config/mmix/mmix.c,\n        config/mn10300/mn10300.c, config/v850/v850.c: Similarly.\n\nFrom-SVN: r84608", "tree": {"sha": "d9a896211b7b86323ca0988aebcee6681c40a375", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d9a896211b7b86323ca0988aebcee6681c40a375"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af064de51e5c824f1afb56bbc5bbf4b138c4e483", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af064de51e5c824f1afb56bbc5bbf4b138c4e483", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af064de51e5c824f1afb56bbc5bbf4b138c4e483", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af064de51e5c824f1afb56bbc5bbf4b138c4e483/comments", "author": null, "committer": null, "parents": [{"sha": "0976078c73f58e7350fcc0516618fdd7737c9696", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0976078c73f58e7350fcc0516618fdd7737c9696", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0976078c73f58e7350fcc0516618fdd7737c9696"}], "stats": {"total": 198, "additions": 37, "deletions": 161}, "files": [{"sha": "e2bc6decee87effe1479f803e7483f345ac54ee9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af064de51e5c824f1afb56bbc5bbf4b138c4e483/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af064de51e5c824f1afb56bbc5bbf4b138c4e483/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=af064de51e5c824f1afb56bbc5bbf4b138c4e483", "patch": "@@ -1,3 +1,19 @@\n+2004-07-13  Richard Henderson  <rth@redhat.com>\n+\n+\t* builtins.c (std_gimplify_va_arg_expr): Handle types passed\n+\tby reference.\n+\t(ind_gimplify_va_arg_expr): Remove.\n+\t* tree.h (ind_gimplify_va_arg_expr): Remove.\n+\t* config/pa/pa.c (hppa_gimplify_va_arg_expr): Don't use it.\n+\t* config/mmix/mmix.c (mmix_function_arg_pass_by_reference): Allow\n+\targsp to be null.\n+\n+\t* config/arc/arc.c (arc_gimplify_va_arg_expr): Remove.\n+\t(TARGET_GIMPLIFY_VA_ARG_EXPR): Remove.\n+\t* config/cris/cris.c, config/fr30/fr30.c, config/frv/frv.c,\n+\tconfig/iq2000/iq2000.c, config/m32r/m32r.c, config/mmix/mmix.c,\n+\tconfig/mn10300/mn10300.c, config/v850/v850.c: Similarly.\n+\n 2004-07-13  Richard Henderson  <rth@redhat.com>\n \n \t* function.c (pass_by_reference): New."}, {"sha": "292f50dbf5850df2d1e6394b2f2c0b51b565e6b7", "filename": "gcc/builtins.c", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af064de51e5c824f1afb56bbc5bbf4b138c4e483/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af064de51e5c824f1afb56bbc5bbf4b138c4e483/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=af064de51e5c824f1afb56bbc5bbf4b138c4e483", "patch": "@@ -4477,6 +4477,7 @@ std_gimplify_va_arg_expr (tree valist, tree type, tree *pre_p, tree *post_p)\n {\n   tree addr, t, type_size, rounded_size, valist_tmp;\n   unsigned HOST_WIDE_INT align, boundary;\n+  bool indirect;\n \n #ifdef ARGS_GROW_DOWNWARD\n   /* All of the alignment and movement below is for args-grow-up machines.\n@@ -4485,6 +4486,10 @@ std_gimplify_va_arg_expr (tree valist, tree type, tree *pre_p, tree *post_p)\n   abort ();\n #endif\n \n+  indirect = pass_by_reference (NULL, TYPE_MODE (type), type, false);\n+  if (indirect)\n+    type = build_pointer_type (type);\n+\n   align = PARM_BOUNDARY / BITS_PER_UNIT;\n   boundary = FUNCTION_ARG_BOUNDARY (TYPE_MODE (type), type) / BITS_PER_UNIT;\n \n@@ -4532,18 +4537,11 @@ std_gimplify_va_arg_expr (tree valist, tree type, tree *pre_p, tree *post_p)\n   gimplify_and_add (t, pre_p);\n \n   addr = fold_convert (build_pointer_type (type), addr);\n-  return build_fold_indirect_ref (addr);\n-}\n \n-/* Like std_gimplify_va_arg_expr, but uses pass-by-reference.  */\n- \n-tree\n-ind_gimplify_va_arg_expr (tree valist, tree type, tree *pre_p, tree *post_p)\n-{\n-  tree t;\n-  t = build_pointer_type (type);\n-  t = std_gimplify_va_arg_expr (valist, t, pre_p, post_p);\n-  return build_fold_indirect_ref (t);\n+  if (indirect)\n+    addr = build_fold_indirect_ref (addr);\n+\n+  return build_fold_indirect_ref (addr);\n }\n \n /* Return a dummy expression of type TYPE in order to keep going after an"}, {"sha": "d648028030bc0a7ffe98f9e210cd64a9b24f90c8", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af064de51e5c824f1afb56bbc5bbf4b138c4e483/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af064de51e5c824f1afb56bbc5bbf4b138c4e483/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=af064de51e5c824f1afb56bbc5bbf4b138c4e483", "patch": "@@ -102,7 +102,6 @@ static bool arc_rtx_costs (rtx, int, int, int *);\n static int arc_address_cost (rtx);\n static void arc_external_libcall (rtx);\n static bool arc_return_in_memory (tree, tree);\n-static tree arc_gimplify_va_arg_expr (tree, tree, tree *, tree *);\n \f\n /* Initialize the GCC target structure.  */\n #undef TARGET_ASM_ALIGNED_HI_OP\n@@ -142,8 +141,6 @@ static tree arc_gimplify_va_arg_expr (tree, tree, tree *, tree *);\n \n #undef TARGET_SETUP_INCOMING_VARARGS\n #define TARGET_SETUP_INCOMING_VARARGS arc_setup_incoming_varargs\n-#undef TARGET_GIMPLIFY_VA_ARG_EXPR\n-#define TARGET_GIMPLIFY_VA_ARG_EXPR arc_gimplify_va_arg_expr\n \n #undef TARGET_SCHED_USE_DFA_PIPELINE_INTERFACE\n #define TARGET_SCHED_USE_DFA_PIPELINE_INTERFACE hook_int_void_1\n@@ -2295,18 +2292,6 @@ arc_va_start (tree valist, rtx nextarg)\n   std_expand_builtin_va_start (valist, nextarg);\n }\n \n-static tree\n-arc_gimplify_va_arg_expr (tree valist, tree type, tree *pre_p, tree *post_p)\n-{\n-  /* All aggregates are passed by reference.  All scalar types larger\n-     than 8 bytes are passed by reference.  */\n-\n-  if (AGGREGATE_TYPE_P (type) || int_size_in_bytes (type) > 8)\n-    return ind_gimplify_va_arg_expr (valist, type, pre_p, post_p);\n-\n-  return std_gimplify_va_arg_expr (valist, type, pre_p, post_p);\n-}\n-\n /* This is how to output a definition of an internal numbered label where\n    PREFIX is the class of label and NUM is the number within the class.  */\n "}, {"sha": "b28896f549a74b65f57cae98b2652645ee3192aa", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af064de51e5c824f1afb56bbc5bbf4b138c4e483/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af064de51e5c824f1afb56bbc5bbf4b138c4e483/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=af064de51e5c824f1afb56bbc5bbf4b138c4e483", "patch": "@@ -116,8 +116,6 @@ static void cris_init_libfuncs (void);\n static bool cris_rtx_costs (rtx, int, int, int *);\n static int cris_address_cost (rtx);\n \n-static tree cris_gimplify_va_arg_expr (tree, tree, tree *, tree *);\n-\n /* The function cris_target_asm_function_epilogue puts the last insn to\n    output here.  It always fits; there won't be a symbol operand.  Used in\n    delay_slots_for_epilogue and function_epilogue.  */\n@@ -191,8 +189,6 @@ int cris_cpu_version = CRIS_DEFAULT_CPU_VERSION;\n \n #undef TARGET_SETUP_INCOMING_VARARGS\n #define TARGET_SETUP_INCOMING_VARARGS cris_setup_incoming_varargs\n-#undef TARGET_GIMPLIFY_VA_ARG_EXPR\n-#define TARGET_GIMPLIFY_VA_ARG_EXPR cris_gimplify_va_arg_expr\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \n@@ -2789,18 +2785,6 @@ cris_init_libfuncs (void)\n   set_optab_libfunc (umod_optab, SImode, \"__Umod\");\n }\n \n-/* The va_arg gimplifier.  All we need to do here special is notice\n-   when we we've got a pass-by-reference.  */\n-\n-static tree\n-cris_gimplify_va_arg_expr (tree valist, tree type, tree *pre_p, tree *post_p)\n-{\n-  if (FUNCTION_ARG_PASS_BY_REFERENCE (dummy, TYPE_MODE (type), type, dummy))\n-    return ind_gimplify_va_arg_expr (valist, type, pre_p, post_p);\n-  else\n-    return std_gimplify_va_arg_expr (valist, type, pre_p, post_p);\n-}\n-\n /* The INIT_EXPANDERS worker sets the per-function-data initializer and\n    mark functions.  */\n "}, {"sha": "98e45c439392f585ad2ee6071256cab7a98f020d", "filename": "gcc/config/fr30/fr30.c", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af064de51e5c824f1afb56bbc5bbf4b138c4e483/gcc%2Fconfig%2Ffr30%2Ffr30.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af064de51e5c824f1afb56bbc5bbf4b138c4e483/gcc%2Fconfig%2Ffr30%2Ffr30.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.c?ref=af064de51e5c824f1afb56bbc5bbf4b138c4e483", "patch": "@@ -123,7 +123,6 @@ static struct fr30_frame_info \tzero_frame_info;\n \n static void fr30_setup_incoming_varargs (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t\t tree, int *, int);\n-static tree fr30_gimplify_va_arg_expr (tree, tree, tree *, tree *);\n static bool fr30_must_pass_in_stack (enum machine_mode, tree);\n \n #define FRAME_POINTER_MASK \t(1 << (FRAME_POINTER_REGNUM))\n@@ -158,9 +157,6 @@ static bool fr30_must_pass_in_stack (enum machine_mode, tree);\n #undef  TARGET_MUST_PASS_IN_STACK\n #define TARGET_MUST_PASS_IN_STACK fr30_must_pass_in_stack\n \n-#undef  TARGET_GIMPLIFY_VA_ARG_EXPR\n-#define TARGET_GIMPLIFY_VA_ARG_EXPR fr30_gimplify_va_arg_expr\n-\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Returns the number of bytes offset between FROM_REG and TO_REG\n@@ -729,17 +725,6 @@ fr30_function_arg_partial_nregs (CUMULATIVE_ARGS cum, enum machine_mode mode,\n   return FR30_NUM_ARG_REGS - cum;\n }\n \n-/* Implement `va_arg'.  */\n-\n-static tree\n-fr30_gimplify_va_arg_expr (tree valist, tree type, tree *pre_p, tree *post_p)\n-{\n-  if (FUNCTION_ARG_PASS_BY_REFERENCE (dummy, TYPE_MODE (type), type, dummy))\n-    return ind_gimplify_va_arg_expr (valist, type, pre_p, post_p);\n-  else\n-    return std_gimplify_va_arg_expr (valist, type, pre_p, post_p);\n-}\n-\n /*}}}*/\n /*{{{  Operand predicates */ \n "}, {"sha": "9935fef489581976d95ccd529ed16f08d6bc242d", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af064de51e5c824f1afb56bbc5bbf4b138c4e483/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af064de51e5c824f1afb56bbc5bbf4b138c4e483/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=af064de51e5c824f1afb56bbc5bbf4b138c4e483", "patch": "@@ -286,7 +286,6 @@ static void frv_output_const_unspec\t\t(FILE *,\n \t\t\t\t\t\t const struct frv_unspec *);\n static bool frv_function_ok_for_sibcall\t\t(tree, tree);\n static rtx frv_struct_value_rtx\t\t\t(tree, int);\n-static tree frv_gimplify_va_arg_expr\t\t(tree, tree, tree *, tree *);\n static bool frv_must_pass_in_stack (enum machine_mode mode, tree type);\n \f\n /* Initialize the GCC target structure.  */\n@@ -335,8 +334,6 @@ static bool frv_must_pass_in_stack (enum machine_mode mode, tree type);\n #define TARGET_EXPAND_BUILTIN_SAVEREGS frv_expand_builtin_saveregs\n #undef TARGET_SETUP_INCOMING_VARARGS\n #define TARGET_SETUP_INCOMING_VARARGS frv_setup_incoming_varargs\n-#undef TARGET_GIMPLIFY_VA_ARG_EXPR\n-#define TARGET_GIMPLIFY_VA_ARG_EXPR frv_gimplify_va_arg_expr\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n@@ -2084,18 +2081,6 @@ frv_expand_builtin_va_start (tree valist, rtx nextarg)\n   expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n }\n \n-\f\n-/* Expand __builtin_va_arg to do the va_arg macro.  */\n-\n-static tree\n-frv_gimplify_va_arg_expr (tree valist, tree type, tree *pre_p, tree *post_p)\n-{\n-  if (AGGREGATE_TYPE_P (type))\n-    return ind_gimplify_va_arg_expr (valist, type, pre_p, post_p);\n-  else\n-    return std_gimplify_va_arg_expr (valist, type, pre_p, post_p);\n-}\n-\n \f\n /* Expand a block move operation, and return 1 if successful.  Return 0\n    if we should let the compiler generate normal code."}, {"sha": "4da8712025700368f2211351f6f9ffb3db358890", "filename": "gcc/config/iq2000/iq2000.c", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af064de51e5c824f1afb56bbc5bbf4b138c4e483/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af064de51e5c824f1afb56bbc5bbf4b138c4e483/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.c?ref=af064de51e5c824f1afb56bbc5bbf4b138c4e483", "patch": "@@ -171,7 +171,6 @@ static bool iq2000_rtx_costs          (rtx, int, int, int *);\n static int  iq2000_address_cost       (rtx);\n static void iq2000_select_section     (tree, int, unsigned HOST_WIDE_INT);\n static bool iq2000_return_in_memory   (tree, tree);\n-static tree iq2000_gimplify_va_arg_expr (tree, tree, tree *, tree *);\n \n #undef  TARGET_INIT_BUILTINS\n #define TARGET_INIT_BUILTINS \t\tiq2000_init_builtins\n@@ -200,8 +199,6 @@ static tree iq2000_gimplify_va_arg_expr (tree, tree, tree *, tree *);\n #define TARGET_SETUP_INCOMING_VARARGS\tiq2000_setup_incoming_varargs\n #undef  TARGET_STRICT_ARGUMENT_NAMING\n #define TARGET_STRICT_ARGUMENT_NAMING\thook_bool_CUMULATIVE_ARGS_true\n-#undef  TARGET_GIMPLIFY_VA_ARG_EXPR\n-#define TARGET_GIMPLIFY_VA_ARG_EXPR\tiq2000_gimplify_va_arg_expr\n \n #undef TARGET_SCHED_USE_DFA_PIPELINE_INTERFACE\n #define TARGET_SCHED_USE_DFA_PIPELINE_INTERFACE hook_int_void_1\n@@ -1590,17 +1587,6 @@ iq2000_va_start (tree valist, rtx nextarg)\n   nextarg = plus_constant (nextarg, - gpr_save_area_size);\n   std_expand_builtin_va_start (valist, nextarg);\n }\n-\n-/* Implement va_arg.  */\n-\n-static tree\n-iq2000_gimplify_va_arg_expr (tree valist, tree type, tree *pre_p, tree *post_p)\n-{\n-  if (function_arg_pass_by_reference (NULL, TYPE_MODE (type), type, 0))\n-    return ind_gimplify_va_arg_expr (valist, type, pre_p, post_p);\n-  else\n-    return std_gimplify_va_arg_expr (valist, type, pre_p, post_p);\n-}\n \f\n /* Allocate a chunk of memory for per-function machine-dependent data.  */\n "}, {"sha": "6c4a5dd5918b1b236701d06d5153495fda54ec2f", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af064de51e5c824f1afb56bbc5bbf4b138c4e483/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af064de51e5c824f1afb56bbc5bbf4b138c4e483/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=af064de51e5c824f1afb56bbc5bbf4b138c4e483", "patch": "@@ -99,7 +99,6 @@ static void m32r_setup_incoming_varargs (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t\t tree, int *, int);\n static void init_idents (void);\n static bool m32r_rtx_costs (rtx, int, int, int *);\n-static tree m32r_gimplify_va_arg_expr (tree, tree, tree *, tree *);\n \f\n /* Initialize the GCC target structure.  */\n #undef  TARGET_ATTRIBUTE_TABLE\n@@ -144,9 +143,6 @@ static tree m32r_gimplify_va_arg_expr (tree, tree, tree *, tree *);\n #undef  TARGET_MUST_PASS_IN_STACK\n #define TARGET_MUST_PASS_IN_STACK must_pass_in_stack_var_size\n \n-#undef  TARGET_GIMPLIFY_VA_ARG_EXPR\n-#define TARGET_GIMPLIFY_VA_ARG_EXPR m32r_gimplify_va_arg_expr\n-\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Called by OVERRIDE_OPTIONS to initialize various things.  */\n@@ -1395,17 +1391,6 @@ m32r_setup_incoming_varargs (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n     }\n }\n \n-\f\n-/* Implement `va_arg'.  */\n-\n-static tree\n-m32r_gimplify_va_arg_expr (tree valist, tree type, tree *pre_p, tree *post_p)\n-{\n-  if (m32r_pass_by_reference (type))\n-    return ind_gimplify_va_arg_expr (valist, type, pre_p, post_p);\n-  else\n-    return std_gimplify_va_arg_expr (valist, type, pre_p, post_p);\n-}\n \f\n /* Return true if INSN is real instruction bearing insn.  */\n "}, {"sha": "4e1731bc29e337681998d522119c231ceb10e8be", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 9, "deletions": 23, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af064de51e5c824f1afb56bbc5bbf4b138c4e483/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af064de51e5c824f1afb56bbc5bbf4b138c4e483/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=af064de51e5c824f1afb56bbc5bbf4b138c4e483", "patch": "@@ -139,7 +139,6 @@ static void mmix_file_start (void);\n static void mmix_file_end (void);\n static bool mmix_rtx_costs (rtx, int, int, int *);\n static rtx mmix_struct_value_rtx (tree, int);\n-static tree mmix_gimplify_va_arg_expr (tree, tree, tree *, tree *);\n \n \n /* Target structure macros.  Listed by node.  See `Using and Porting GCC'\n@@ -205,8 +204,6 @@ static tree mmix_gimplify_va_arg_expr (tree, tree, tree *, tree *);\n \n #undef TARGET_SETUP_INCOMING_VARARGS\n #define TARGET_SETUP_INCOMING_VARARGS mmix_setup_incoming_varargs\n-#undef TARGET_GIMPLIFY_VA_ARG_EXPR\n-#define TARGET_GIMPLIFY_VA_ARG_EXPR mmix_gimplify_va_arg_expr\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \n@@ -601,11 +598,15 @@ mmix_function_arg_pass_by_reference (const CUMULATIVE_ARGS *argsp,\n {\n   /* FIXME: Check: I'm not sure the must_pass_in_stack check is\n      necessary.  */\n-  return\n-    targetm.calls.must_pass_in_stack (mode, type)\n-    || (MMIX_FUNCTION_ARG_SIZE (mode, type) > 8\n-\t&& !TARGET_LIBFUNC\n-\t&& !argsp->lib);\n+  if (targetm.calls.must_pass_in_stack (mode, type))\n+    return true;\n+\n+  if (MMIX_FUNCTION_ARG_SIZE (mode, type) > 8\n+      && !TARGET_LIBFUNC\n+      && (!argsp || !argsp->lib))\n+    return true;\n+\n+  return false;\n }\n \n /* Return nonzero if regno is a register number where a parameter is\n@@ -846,21 +847,6 @@ mmix_setup_incoming_varargs (CUMULATIVE_ARGS *args_so_farp,\n     internal_error (\"MMIX Internal: Last named vararg would not fit in a register\");\n }\n \n-/* Gimplify VA_ARG_EXPR.  All we need to do is figure out if TYPE is\n-   pass-by-reference and hand off to standard routines.  */\n-\n-static tree\n-mmix_gimplify_va_arg_expr (tree valist, tree type, tree *pre_p, tree *post_p)\n-{\n-  CUMULATIVE_ARGS cum;\n-  cum.lib = 0;\n-\n-  if (mmix_function_arg_pass_by_reference (&cum, TYPE_MODE (type), type, 0))\n-    return ind_gimplify_va_arg_expr (valist, type, pre_p, post_p);\n-  else\n-    return std_gimplify_va_arg_expr (valist, type, pre_p, post_p);\n-}\n-\n /* TRAMPOLINE_SIZE.  */\n /* Four 4-byte insns plus two 8-byte values.  */\n int mmix_trampoline_size = 32;"}, {"sha": "b5686c404ed6d283f6766e5b7c59d18e9d0fd194", "filename": "gcc/config/mn10300/mn10300.c", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af064de51e5c824f1afb56bbc5bbf4b138c4e483/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af064de51e5c824f1afb56bbc5bbf4b138c4e483/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.c?ref=af064de51e5c824f1afb56bbc5bbf4b138c4e483", "patch": "@@ -71,7 +71,6 @@ static bool mn10300_rtx_costs (rtx, int, int, int *);\n static void mn10300_file_start (void);\n static bool mn10300_return_in_memory (tree, tree);\n static rtx mn10300_builtin_saveregs (void);\n-static tree mn10300_gimplify_va_arg_expr (tree, tree, tree *, tree *);\n \f\n /* Initialize the GCC target structure.  */\n #undef TARGET_ASM_ALIGNED_HI_OP\n@@ -98,8 +97,6 @@ static tree mn10300_gimplify_va_arg_expr (tree, tree, tree *, tree *);\n \n #undef TARGET_EXPAND_BUILTIN_SAVEREGS\n #define TARGET_EXPAND_BUILTIN_SAVEREGS mn10300_builtin_saveregs\n-#undef TARGET_GIMPLIFY_VA_ARG_EXPR\n-#define TARGET_GIMPLIFY_VA_ARG_EXPR mn10300_gimplify_va_arg_expr\n \n static void mn10300_encode_section_info (tree, rtx, int);\n struct gcc_target targetm = TARGET_INITIALIZER;\n@@ -1459,15 +1456,6 @@ mn10300_va_start (tree valist, rtx nextarg)\n   std_expand_builtin_va_start (valist, nextarg);\n }\n \n-static tree\n-mn10300_gimplify_va_arg_expr (tree valist, tree type, tree *pre_p, tree *post_p)\n-{\n-  if (FUNCTION_ARG_PASS_BY_REFERENCE (dummy, TYPE_MODE (type), type, dummy))\n-    return ind_gimplify_va_arg_expr (valist, type, pre_p, post_p);\n-  else\n-    return std_gimplify_va_arg_expr (valist, type, pre_p, post_p);\n-}\n-\n /* Return an RTX to represent where a value with mode MODE will be returned\n    from a function.  If the result is 0, the argument is pushed.  */\n "}, {"sha": "723fbec2ea58d83069b06f9146bb33a6ed9646fa", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af064de51e5c824f1afb56bbc5bbf4b138c4e483/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af064de51e5c824f1afb56bbc5bbf4b138c4e483/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=af064de51e5c824f1afb56bbc5bbf4b138c4e483", "patch": "@@ -5956,26 +5956,20 @@ hppa_va_start (tree valist, rtx nextarg)\n static tree\n hppa_gimplify_va_arg_expr (tree valist, tree type, tree *pre_p, tree *post_p)\n {\n-  bool indirect;\n-\n-  indirect = FUNCTION_ARG_PASS_BY_REFERENCE (dummy, TYPE_MODE (type), type, 0);\n-\n   if (TARGET_64BIT)\n     {\n       /* Args grow upward.  We can use the generic routines.  */\n-\n-      if (indirect)\n-\treturn ind_gimplify_va_arg_expr (valist, type, pre_p, post_p);\n-      else\n-\treturn std_gimplify_va_arg_expr (valist, type, pre_p, post_p);\n+      return std_gimplify_va_arg_expr (valist, type, pre_p, post_p);\n     }\n   else /* !TARGET_64BIT */\n     {\n       tree ptr = build_pointer_type (type);\n       tree valist_type;\n       tree t, u;\n       unsigned int size, ofs;\n+      bool indirect;\n \n+      indirect = pass_by_reference (NULL, TYPE_MODE (type), type, 0);\n       if (indirect)\n \t{\n \t  type = ptr;"}, {"sha": "7221bd737db92cd6ef43db6964cb0446aacd036e", "filename": "gcc/config/v850/v850.c", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af064de51e5c824f1afb56bbc5bbf4b138c4e483/gcc%2Fconfig%2Fv850%2Fv850.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af064de51e5c824f1afb56bbc5bbf4b138c4e483/gcc%2Fconfig%2Fv850%2Fv850.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.c?ref=af064de51e5c824f1afb56bbc5bbf4b138c4e483", "patch": "@@ -67,7 +67,6 @@ static void v850_encode_section_info (tree, rtx, int);\n static bool v850_return_in_memory    (tree, tree);\n static void v850_setup_incoming_varargs (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t\t tree, int *, int);\n-static tree v850_gimplify_va_arg_expr (tree, tree, tree *, tree *);\n \n /* Information about the various small memory areas.  */\n struct small_memory_info small_memory[ (int)SMALL_MEMORY_max ] =\n@@ -133,9 +132,6 @@ static int v850_interrupt_p = FALSE;\n #undef TARGET_SETUP_INCOMING_VARARGS\n #define TARGET_SETUP_INCOMING_VARARGS v850_setup_incoming_varargs\n \n-#undef TARGET_GIMPLIFY_VA_ARG_EXPR\n-#define TARGET_GIMPLIFY_VA_ARG_EXPR v850_gimplify_va_arg_expr\n-\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Sometimes certain combinations of command options do not make\n@@ -3308,17 +3304,6 @@ construct_prepare_instruction (rtx op)\n   return buff;\n }\n \f\n-/* Implement `va_arg'.  */\n-\n-static tree\n-v850_gimplify_va_arg_expr (tree valist, tree type, tree *pre_p, tree *post_p)\n-{\n-  if (FUNCTION_ARG_PASS_BY_REFERENCE (dummy, TYPE_MODE (type), type, 0))\n-    return ind_gimplify_va_arg_expr (valist, type, pre_p, post_p);\n-  else\n-    return std_gimplify_va_arg_expr (valist, type, pre_p, post_p);\n-}\n-\f\n /* Return an RTX indicating where the return address to the\n    calling function can be found.  */\n "}, {"sha": "13f97ce6779b9e456270b7cdf5b61c13c02148f4", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af064de51e5c824f1afb56bbc5bbf4b138c4e483/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af064de51e5c824f1afb56bbc5bbf4b138c4e483/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=af064de51e5c824f1afb56bbc5bbf4b138c4e483", "patch": "@@ -3437,7 +3437,6 @@ extern tree strip_float_extensions (tree);\n extern tree simplify_builtin (tree, int);\n extern tree c_strlen (tree, int);\n extern tree std_gimplify_va_arg_expr (tree, tree, tree *, tree *);\n-extern tree ind_gimplify_va_arg_expr (tree, tree, tree *, tree *);\n \n /* In convert.c */\n extern tree strip_float_extensions (tree);"}]}