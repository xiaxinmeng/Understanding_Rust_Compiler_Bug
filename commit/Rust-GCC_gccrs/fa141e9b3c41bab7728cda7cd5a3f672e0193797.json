{"sha": "fa141e9b3c41bab7728cda7cd5a3f672e0193797", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmExNDFlOWIzYzQxYmFiNzcyOGNkYTdjZDVhM2Y2NzJlMDE5Mzc5Nw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2018-05-10T18:39:19Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2018-05-10T18:39:19Z"}, "message": "decl.c (make_typename_type): s/parameters/arguments/.\n\n\t* decl.c (make_typename_type): s/parameters/arguments/.\n\n\t* parser.c (cp_parser_nested_name_specifier_opt): Likewise.\n\t* pt.c (make_pack_expansion): Correct error message.\n\nFrom-SVN: r260121", "tree": {"sha": "2f7d44c95f19f0703c1f1ef4028646c2b35057b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f7d44c95f19f0703c1f1ef4028646c2b35057b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa141e9b3c41bab7728cda7cd5a3f672e0193797", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa141e9b3c41bab7728cda7cd5a3f672e0193797", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa141e9b3c41bab7728cda7cd5a3f672e0193797", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa141e9b3c41bab7728cda7cd5a3f672e0193797/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4c35d09956290adf5eb10a7f65351c192d869352", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c35d09956290adf5eb10a7f65351c192d869352", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c35d09956290adf5eb10a7f65351c192d869352"}], "stats": {"total": 20, "additions": 13, "deletions": 7}, "files": [{"sha": "e70d3948eb156a160af33036a06cdcc16b72071d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa141e9b3c41bab7728cda7cd5a3f672e0193797/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa141e9b3c41bab7728cda7cd5a3f672e0193797/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=fa141e9b3c41bab7728cda7cd5a3f672e0193797", "patch": "@@ -1,3 +1,9 @@\n+2018-05-09  Jason Merrill  <jason@redhat.com>\n+\n+\t* decl.c (make_typename_type): s/parameters/arguments/.\n+\t* parser.c (cp_parser_nested_name_specifier_opt): Likewise.\n+\t* pt.c (make_pack_expansion): Correct error message.\n+\n 2018-05-10  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/85662"}, {"sha": "d58964754b92ad90f458da7bc7f1686c36e9d6f7", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa141e9b3c41bab7728cda7cd5a3f672e0193797/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa141e9b3c41bab7728cda7cd5a3f672e0193797/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=fa141e9b3c41bab7728cda7cd5a3f672e0193797", "patch": "@@ -3756,7 +3756,7 @@ make_typename_type (tree context, tree name, enum tag_types tag_type,\n   if (TREE_CODE (name) == TEMPLATE_DECL)\n     {\n       if (complain & tf_error)\n-\terror (\"%qD used without template parameters\", name);\n+\terror (\"%qD used without template arguments\", name);\n       return error_mark_node;\n     }\n   gcc_assert (identifier_p (name));"}, {"sha": "88db9988bd40ce1ae0b8679c5ffd44950fd3f93e", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa141e9b3c41bab7728cda7cd5a3f672e0193797/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa141e9b3c41bab7728cda7cd5a3f672e0193797/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=fa141e9b3c41bab7728cda7cd5a3f672e0193797", "patch": "@@ -6346,7 +6346,7 @@ cp_parser_nested_name_specifier_opt (cp_parser *parser,\n \t\t\t\t\t\t    token->location);\n \t\t      if (TREE_CODE (decl) == TEMPLATE_DECL)\n \t\t\terror_at (token->location,\n-\t\t\t\t  \"%qD used without template parameters\",\n+\t\t\t\t  \"%qD used without template arguments\",\n \t\t\t\t  decl);\n \t\t      else if (ambiguous_decls)\n \t\t\t{"}, {"sha": "e8346d3bf589efa06e551bc2d2d07c0df68bc38f", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa141e9b3c41bab7728cda7cd5a3f672e0193797/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa141e9b3c41bab7728cda7cd5a3f672e0193797/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=fa141e9b3c41bab7728cda7cd5a3f672e0193797", "patch": "@@ -4007,9 +4007,9 @@ make_pack_expansion (tree arg, tsubst_flags_t complain)\n       if (complain & tf_error)\n \t{\n \t  if (TYPE_P (arg))\n-\t    error (\"expansion pattern %qT contains no argument packs\", arg);\n+\t    error (\"expansion pattern %qT contains no parameter packs\", arg);\n \t  else\n-\t    error (\"expansion pattern %qE contains no argument packs\", arg);\n+\t    error (\"expansion pattern %qE contains no parameter packs\", arg);\n \t}\n       return error_mark_node;\n     }"}, {"sha": "05d15ffe40b649be129710c7de9f1fa3d9bc2283", "filename": "gcc/testsuite/g++.dg/cpp0x/alignas9.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa141e9b3c41bab7728cda7cd5a3f672e0193797/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falignas9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa141e9b3c41bab7728cda7cd5a3f672e0193797/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falignas9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falignas9.C?ref=fa141e9b3c41bab7728cda7cd5a3f672e0193797", "patch": "@@ -2,5 +2,5 @@\n // { dg-do compile { target c++11 } }\n \n template <typename... T>\n-struct A { alignas(int...) char c; }; // { dg-error \"no argument packs|expected\" }\n+struct A { alignas(int...) char c; }; // { dg-error \"no parameter packs|expected\" }\n A<int, double> a;"}, {"sha": "ca7ed33ac02e06015f012f9b1e52bb94e6753991", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic-ex13.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa141e9b3c41bab7728cda7cd5a3f672e0193797/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa141e9b3c41bab7728cda7cd5a3f672e0193797/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex13.C?ref=fa141e9b3c41bab7728cda7cd5a3f672e0193797", "patch": "@@ -32,7 +32,7 @@ template<typename... Args> void f(Args...);\n template<typename... Args> void g(Args... args) \n {\n    f(const_cast<const Args*>(&args)...); // okay: ``Args'' and ``args'' are expanded\n-   f(5 ...); // { dg-error \"contains no argument packs\" }\n+   f(5 ...); // { dg-error \"contains no parameter packs\" }\n    f(args); // { dg-error \"5:parameter packs not expanded\" }\n    // { dg-message \"args\" \"note\" { target *-*-* } .-1 }\n    f(h(args...) + args...); // okay: first ``args'' expanded within h, second ``args'' expanded within f."}, {"sha": "0191ae55dfc5fa81198e96f11bbe9717403621d2", "filename": "gcc/testsuite/g++.dg/template/type1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa141e9b3c41bab7728cda7cd5a3f672e0193797/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftype1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa141e9b3c41bab7728cda7cd5a3f672e0193797/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftype1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftype1.C?ref=fa141e9b3c41bab7728cda7cd5a3f672e0193797", "patch": "@@ -4,5 +4,5 @@ struct A {\n   template <class T> struct B { static int c; };\n };\n \n-int A::B::c;\t\t\t// { dg-error \"parameters\" }\n+int A::B::c;\t\t\t// { dg-error \"arguments\" }\n int A::C::d;\t\t\t// { dg-error \"declared\" }"}]}