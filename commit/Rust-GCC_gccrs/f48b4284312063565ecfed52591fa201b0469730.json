{"sha": "f48b4284312063565ecfed52591fa201b0469730", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjQ4YjQyODQzMTIwNjM1NjVlY2ZlZDUyNTkxZmEyMDFiMDQ2OTczMA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-05-23T18:59:38Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-05-23T18:59:38Z"}, "message": "i386.h (IS_STACK_MODE): Enable for TARGET_MIX_SSE_I387.\n\n\t* config/i386/i386.h (IS_STACK_MODE): Enable for\n\tTARGET_MIX_SSE_I387.  Rewrite using X87_FLOAT_MODE_P and\n\tSSE_FLOAT_MODE_P macros.\n\t* config/i386/i386.c (ix86_preferred_reload_class): Use\n\tIS_STACK_MODE, INTEGER_CLASS_P and FLOAT_CLASS_P macros.  Cleanup\n\tregclass processing for CONST_DOUBLE_P.\n\t(ix86_preferred_output_reload_class): Use IS_STACK_MODE macro.\n\t(ix86_rtx_costs): Remove redundant TARGET_80387 check\n\twith IS_STACK_MODE macro.\n\t* config/i386/i386.md: Replace SSE_FLOAT_MODE_P (DFmode)\n\twith TARGET_SSE2.\n\t(*movdf_internal): Use IS_STACK_MODE macro.\n\t(*movsf_internal): Ditto.\n\nFrom-SVN: r236607", "tree": {"sha": "653db4965ff71817f457501c26dcd565c879296b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/653db4965ff71817f457501c26dcd565c879296b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f48b4284312063565ecfed52591fa201b0469730", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f48b4284312063565ecfed52591fa201b0469730", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f48b4284312063565ecfed52591fa201b0469730", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f48b4284312063565ecfed52591fa201b0469730/comments", "author": null, "committer": null, "parents": [{"sha": "ece46666cd43d0996769a2e97d8acef7faa94b4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ece46666cd43d0996769a2e97d8acef7faa94b4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ece46666cd43d0996769a2e97d8acef7faa94b4d"}], "stats": {"total": 118, "additions": 66, "deletions": 52}, "files": [{"sha": "92f25c746d54eb3c4132fbcd871c296879f74324", "filename": "gcc/ChangeLog", "status": "modified", "additions": 31, "deletions": 15, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f48b4284312063565ecfed52591fa201b0469730/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f48b4284312063565ecfed52591fa201b0469730/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f48b4284312063565ecfed52591fa201b0469730", "patch": "@@ -1,3 +1,19 @@\n+2016-05-23  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.h (IS_STACK_MODE): Enable for\n+\tTARGET_MIX_SSE_I387.  Rewrite using X87_FLOAT_MODE_P and\n+\tSSE_FLOAT_MODE_P macros.\n+\t* config/i386/i386.c (ix86_preferred_reload_class): Use\n+\tIS_STACK_MODE, INTEGER_CLASS_P and FLOAT_CLASS_P macros.  Cleanup\n+\tregclass processing for CONST_DOUBLE_P.\n+\t(ix86_preferred_output_reload_class): Use IS_STACK_MODE macro.\n+\t(ix86_rtx_costs): Remove redundant TARGET_80387 check\n+\twith IS_STACK_MODE macro.\n+\t* config/i386/i386.md: Replace SSE_FLOAT_MODE_P (DFmode)\n+\twith TARGET_SSE2.\n+\t(*movdf_internal): Use IS_STACK_MODE macro.\n+\t(*movsf_internal): Ditto.\n+\n 2016-05-23  Marc Glisse  <marc.glisse@inria.fr>\n \n \t* match.pd (a * (1 << b), ~x & ~y, ~X ^ ~Y, (X ^ Y) ^ Y, ~ (-A),\n@@ -143,7 +159,7 @@\n \n 2016-05-20  Uros Bizjak  <ubizjak@gmail.com>\n \n-\t* gcc/config/i386/i386.c (ix86_rtx_costs) <case CONST_DOUBLE>:\n+\t* config/i386/i386.c (ix86_rtx_costs) <case CONST_DOUBLE>:\n \tUse IS_STACK_MODE when calculating cost of standard 80387 constants.\n \tFallthru to CONST_VECTOR case to calculate cost of standard SSE\n \tconstants.\n@@ -279,7 +295,7 @@\n \n 2016-05-19  Sandra Loosemore  <sandra@codesourcery.com>\n \n-\t* config/i386/cygming.h (DWARF2_UNWIND_INFO): Allow \n+\t* config/i386/cygming.h (DWARF2_UNWIND_INFO): Allow\n \t--disable-sjlj-exceptions for TARGET_BI_ARCH to select DWARF-2 EH\n \tfor 32-bit mode and SEH for 64-bit.\n \t* config/i386/mingw32.h (SHARED_LIBGCC_UNDEFS_SPEC): Handle\n@@ -676,7 +692,7 @@\n \n 2016-05-18  Kirill Yukhin  <kirill.yukhin@intel.com>\n \n-\t* gcc/config/i386/sse.md (define_insn \"*andnot<mode>3\"): Extend static\n+\t* config/i386/sse.md (define_insn \"*andnot<mode>3\"): Extend static\n \tarray to 128 chars.\n \t(define_insn \"*andnottf3\"): Ditto.\n \t(define_insn \"*<code><mode>3\"/any_logic): Ditto.\n@@ -942,7 +958,7 @@\n \n 2016-05-16  Wilco Dijkstra  <wdijkstr@arm.com>\n \n-\t * gcc/config/aarch64/aarch64.md (aarch64_ashl_sisd_or_int_<mode>3):\n+\t* config/aarch64/aarch64.md (aarch64_ashl_sisd_or_int_<mode>3):\n \tSplit integer shifts into shift_reg and bfm.\n \t(aarch64_lshr_sisd_or_int_<mode>3): Likewise.\n \t(aarch64_ashr_sisd_or_int_<mode>3): Likewise.\n@@ -1608,7 +1624,7 @@\n \n \tPR tree-optimization/70786\n \t* tree-chkp.c (chkp_find_bounds_1): Support WITH_SIZE_EXPR.\n-\t* gcc/calls.c (initialize_argument_information): Bind bounds\n+\t* calls.c (initialize_argument_information): Bind bounds\n \twith corresponding args passed by reference.\n \n 2016-05-10  Jakub Jelinek  <jakub@redhat.com>\n@@ -4642,7 +4658,7 @@\n 2016-04-21  Kirill Yukhin  <kirill.yukhin@intel.com>\n \n \tPR target/70728\n-\t* gcc/config/i386/sse.md (define_insn \"<shift_insn><mode>3<mask_name>\"):\n+\t* config/i386/sse.md (define_insn \"<shift_insn><mode>3<mask_name>\"):\n \tExtract AVX-512BW constraint from AVX.\n \n 2016-04-21  Richard Biener  <rguenther@suse.de>\n@@ -5904,7 +5920,7 @@\n \tFix the predicate \"aarch64_simd_reg_or_zero\" to correctly validate\n \tthe \"Y\" constraint (scalar FP 0.0 immediate).\n \n-\t* gcc/config/aarch64/predicates.md (aarch64_simd_reg_or_zero):\n+\t* config/aarch64/predicates.md (aarch64_simd_reg_or_zero):\n \tAdd the \"const_double\" to the list of operand constraints.\n \n 2016-04-01  Jakub Jelinek  <jakub@redhat.com>\n@@ -7177,7 +7193,7 @@\n \t* config/arm/arm-cores.def (cortex-r8): New.\n \t* config/arm/arm-tables.opt (cortex-r8): Regenerate.\n \t* config/arm/arm-tune.md: Likewise.\n-\t* gcc/doc/invoke.texi: Add cortex-r8 to list of cpu values.\n+\t* doc/invoke.texi: Add cortex-r8 to list of cpu values.\n \n 2016-03-07  Martin Sebor  <msebor@redhat.com>\n \n@@ -7778,12 +7794,12 @@\n 2016-02-26  Joel Sherrill  <joel@rtems.org>\n \n \t* config.gcc: Add x86_64-*-rtems*.\n-\t* gcc/config/i386/rtems-64.h: New file.\n+\t* config/i386/rtems-64.h: New file.\n \n 2016-02-26  Joel Sherrill  <joel@rtems.org>\n \n \t* config.gcc: Add aarch64-*-rtems*.\n-\t* gcc/config/aarch64/rtems.h: New file.\n+\t* config/aarch64/rtems.h: New file.\n \n 2016-02-26  Segher Boessenkool  <segher@kernel.crashing.org>\n \n@@ -9523,7 +9539,7 @@\n \n 2016-02-04  Victoria Stepanyan  <victoria.stepanyan@amd.com>\n \n-\t* gcc/config/i386/x86-tune.def: Disable default prefetching\n+\t* config/i386/x86-tune.def: Disable default prefetching\n \tfor -march=znver1.\n \n 2016-02-03  Michael Meissner  <meissner@linux.vnet.ibm.com>\n@@ -11775,10 +11791,10 @@\n 2016-01-14  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \t* config/rs6000/rs6000-builtin.def: Revert 2016-01-13 change.\n-\t* gcc/config/rs6000/rs6000.c: Likewise.\n-\t* gcc/config/rs6000/rs6000.h: Likewise.\n-\t* gcc/config/rs6000/rs6000.md: Likewise.\n-\t* gcc/doc/extend.texi: Likewsie.\n+\t* config/rs6000/rs6000.c: Likewise.\n+\t* config/rs6000/rs6000.h: Likewise.\n+\t* config/rs6000/rs6000.md: Likewise.\n+\t* doc/extend.texi: Likewsie.\n \n 2016-01-14  Jeff Law  <law@redhat.com>\n "}, {"sha": "c474bb5c37e3c464fe2fe870d93e34d420f91741", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f48b4284312063565ecfed52591fa201b0469730/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f48b4284312063565ecfed52591fa201b0469730/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=f48b4284312063565ecfed52591fa201b0469730", "patch": "@@ -43301,37 +43301,35 @@ ix86_preferred_reload_class (rtx x, reg_class_t regclass)\n \t  || MAYBE_MASK_CLASS_P (regclass)))\n     return NO_REGS;\n \n-  /* Prefer SSE regs only, if we can use them for math.  */\n-  if (TARGET_SSE_MATH && !TARGET_MIX_SSE_I387 && SSE_FLOAT_MODE_P (mode))\n-    return SSE_CLASS_P (regclass) ? regclass : NO_REGS;\n-\n   /* Floating-point constants need more complex checks.  */\n   if (CONST_DOUBLE_P (x))\n     {\n       /* General regs can load everything.  */\n-      if (reg_class_subset_p (regclass, GENERAL_REGS))\n+      if (INTEGER_CLASS_P (regclass))\n         return regclass;\n \n       /* Floats can load 0 and 1 plus some others.  Note that we eliminated\n \t zero above.  We only want to wind up preferring 80387 registers if\n \t we plan on doing computation with them.  */\n-      if (TARGET_80387\n+      if (IS_STACK_MODE (mode)\n \t  && standard_80387_constant_p (x) > 0)\n \t{\n-\t  /* Limit class to non-sse.  */\n-\t  if (regclass == FLOAT_SSE_REGS)\n+\t  /* Limit class to FP regs.  */\n+\t  if (FLOAT_CLASS_P (regclass))\n \t    return FLOAT_REGS;\n-\t  if (regclass == FP_TOP_SSE_REGS)\n+\t  else if (regclass == FP_TOP_SSE_REGS)\n \t    return FP_TOP_REG;\n-\t  if (regclass == FP_SECOND_SSE_REGS)\n+\t  else if (regclass == FP_SECOND_SSE_REGS)\n \t    return FP_SECOND_REG;\n-\t  if (regclass == FLOAT_INT_REGS || regclass == FLOAT_REGS)\n-\t    return regclass;\n \t}\n \n       return NO_REGS;\n     }\n \n+  /* Prefer SSE regs only, if we can use them for math.  */\n+  if (SSE_FLOAT_MODE_P (mode) && TARGET_SSE_MATH)\n+    return SSE_CLASS_P (regclass) ? regclass : NO_REGS;\n+\n   /* Generally when we see PLUS here, it's the function invariant\n      (plus soft-fp const_int).  Which can only be computed into general\n      regs.  */\n@@ -43363,10 +43361,10 @@ ix86_preferred_output_reload_class (rtx x, reg_class_t regclass)\n      math on.  If we would like not to return a subset of CLASS, reject this\n      alternative: if reload cannot do this, it will still use its choice.  */\n   mode = GET_MODE (x);\n-  if (TARGET_SSE_MATH && SSE_FLOAT_MODE_P (mode))\n+  if (SSE_FLOAT_MODE_P (mode) && TARGET_SSE_MATH)\n     return MAYBE_SSE_CLASS_P (regclass) ? ALL_SSE_REGS : NO_REGS;\n \n-  if (X87_FLOAT_MODE_P (mode))\n+  if (IS_STACK_MODE (mode))\n     {\n       if (regclass == FP_TOP_SSE_REGS)\n \treturn FP_TOP_REG;\n@@ -44071,7 +44069,7 @@ ix86_rtx_costs (rtx x, machine_mode mode, int outer_code_i, int opno,\n       return true;\n \n     case CONST_DOUBLE:\n-      if (TARGET_80387 && IS_STACK_MODE (mode))\n+      if (IS_STACK_MODE (mode))\n \tswitch (standard_80387_constant_p (x))\n \t  {\n \t  case -1:"}, {"sha": "92823ace2a1e73daf87e0507e2145523e9d2e686", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f48b4284312063565ecfed52591fa201b0469730/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f48b4284312063565ecfed52591fa201b0469730/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=f48b4284312063565ecfed52591fa201b0469730", "patch": "@@ -957,10 +957,10 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n \n #define STACK_REGS\n \n-#define IS_STACK_MODE(MODE)\t\t\t\t\t\\\n-  (((MODE) == SFmode && !(TARGET_SSE && TARGET_SSE_MATH))\t\\\n-   || ((MODE) == DFmode && !(TARGET_SSE2 && TARGET_SSE_MATH))\t\\\n-   || (MODE) == XFmode)\n+#define IS_STACK_MODE(MODE)\t\t\t\t\\\n+  (X87_FLOAT_MODE_P (MODE)\t\t\t\t\\\n+   && (!(SSE_FLOAT_MODE_P (MODE) && TARGET_SSE_MATH)\t\\\n+       || TARGET_MIX_SSE_I387))\n \n /* Number of actual hardware registers.\n    The hardware registers are assigned numbers for the compiler"}, {"sha": "d20bbe431fa5da3cd8efc743e3382c8a1b2f7ca1", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f48b4284312063565ecfed52591fa201b0469730/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f48b4284312063565ecfed52591fa201b0469730/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=f48b4284312063565ecfed52591fa201b0469730", "patch": "@@ -3276,7 +3276,7 @@\n        || !CONST_DOUBLE_P (operands[1])\n        || ((optimize_function_for_size_p (cfun)\n \t    || (ix86_cmodel == CM_LARGE || ix86_cmodel == CM_LARGE_PIC))\n-\t   && ((!(TARGET_SSE2 && TARGET_SSE_MATH)\n+\t   && ((IS_STACK_MODE (DFmode)\n \t\t&& standard_80387_constant_p (operands[1]) > 0)\n \t       || (TARGET_SSE2 && TARGET_SSE_MATH\n \t\t   && standard_sse_constant_p (operands[1], DFmode) == 1))\n@@ -3478,9 +3478,9 @@\n        || !CONST_DOUBLE_P (operands[1])\n        || ((optimize_function_for_size_p (cfun)\n \t    || (ix86_cmodel == CM_LARGE || ix86_cmodel == CM_LARGE_PIC))\n-\t   && ((!TARGET_SSE_MATH\n+\t   && ((IS_STACK_MODE (SFmode)\n \t\t&& standard_80387_constant_p (operands[1]) > 0)\n-\t       || (TARGET_SSE_MATH\n+\t       || (TARGET_SSE && TARGET_SSE_MATH\n \t\t   && standard_sse_constant_p (operands[1], SFmode) == 1)))\n        || memory_operand (operands[0], SFmode)\n        || !TARGET_HARD_SF_REGS)\"\n@@ -4197,13 +4197,13 @@\n (define_expand \"extendsfdf2\"\n   [(set (match_operand:DF 0 \"nonimm_ssenomem_operand\")\n         (float_extend:DF (match_operand:SF 1 \"general_operand\")))]\n-  \"TARGET_80387 || (SSE_FLOAT_MODE_P (DFmode) && TARGET_SSE_MATH)\"\n+  \"TARGET_80387 || (TARGET_SSE2 && TARGET_SSE_MATH)\"\n {\n   /* ??? Needed for compress_float_constant since all fp constants\n      are TARGET_LEGITIMATE_CONSTANT_P.  */\n   if (CONST_DOUBLE_P (operands[1]))\n     {\n-      if ((!SSE_FLOAT_MODE_P (DFmode) || TARGET_MIX_SSE_I387)\n+      if ((!TARGET_SSE2 || TARGET_MIX_SSE_I387)\n \t  && standard_80387_constant_p (operands[1]) > 0)\n \t{\n \t  operands[1] = simplify_const_unary_operation\n@@ -4286,7 +4286,7 @@\n   [(set (match_operand:DF 0 \"nonimm_ssenomem_operand\" \"=f,m,v\")\n         (float_extend:DF\n \t  (match_operand:SF 1 \"nonimmediate_operand\" \"fm,f,vm\")))]\n-  \"TARGET_80387 || (SSE_FLOAT_MODE_P (DFmode) && TARGET_SSE_MATH)\"\n+  \"TARGET_80387 || (TARGET_SSE2 && TARGET_SSE_MATH)\"\n {\n   switch (which_alternative)\n     {\n@@ -4306,7 +4306,7 @@\n    (set_attr \"mode\" \"SF,XF,DF\")\n    (set (attr \"enabled\")\n      (if_then_else\n-       (match_test (\"SSE_FLOAT_MODE_P (DFmode) && TARGET_SSE_MATH\"))\n+       (match_test (\"TARGET_SSE2 && TARGET_SSE_MATH\"))\n        (if_then_else\n \t (eq_attr \"alternative\" \"0,1\")\n \t (symbol_ref \"TARGET_MIX_SSE_I387\")\n@@ -4357,9 +4357,9 @@\n   [(set (match_operand:SF 0 \"nonimmediate_operand\")\n \t(float_truncate:SF\n \t  (match_operand:DF 1 \"nonimmediate_operand\")))]\n-  \"TARGET_80387 || (SSE_FLOAT_MODE_P (DFmode) && TARGET_SSE_MATH)\"\n+  \"TARGET_80387 || (TARGET_SSE2 && TARGET_SSE_MATH)\"\n {\n-  if (SSE_FLOAT_MODE_P (DFmode) && TARGET_SSE_MATH && !TARGET_MIX_SSE_I387)\n+  if (TARGET_SSE2 && TARGET_SSE_MATH && !TARGET_MIX_SSE_I387)\n     ;\n   else if (flag_unsafe_math_optimizations)\n     ;\n@@ -4439,7 +4439,7 @@\n   [(set (match_operand:SF 0 \"nonimmediate_operand\"   \"=fm,v\")\n         (float_truncate:SF\n           (match_operand:DF 1 \"nonimmediate_operand\" \"f  ,vm\")))]\n-  \"SSE_FLOAT_MODE_P (DFmode) && TARGET_SSE_MATH\"\n+  \"TARGET_SSE2 && TARGET_SSE_MATH\"\n {\n   switch (which_alternative)\n     {\n@@ -14859,7 +14859,7 @@\n (define_expand \"asin<mode>2\"\n   [(use (match_operand:MODEF 0 \"register_operand\"))\n    (use (match_operand:MODEF 1 \"general_operand\"))]\n- \"TARGET_USE_FANCY_MATH_387\n+  \"TARGET_USE_FANCY_MATH_387\n    && (!(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n        || TARGET_MIX_SSE_I387)\n    && flag_unsafe_math_optimizations\"\n@@ -14897,7 +14897,7 @@\n (define_expand \"acos<mode>2\"\n   [(use (match_operand:MODEF 0 \"register_operand\"))\n    (use (match_operand:MODEF 1 \"general_operand\"))]\n- \"TARGET_USE_FANCY_MATH_387\n+  \"TARGET_USE_FANCY_MATH_387\n    && (!(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n        || TARGET_MIX_SSE_I387)\n    && flag_unsafe_math_optimizations\"\n@@ -15251,7 +15251,7 @@\n (define_expand \"exp<mode>2\"\n   [(use (match_operand:MODEF 0 \"register_operand\"))\n    (use (match_operand:MODEF 1 \"general_operand\"))]\n- \"TARGET_USE_FANCY_MATH_387\n+  \"TARGET_USE_FANCY_MATH_387\n    && (!(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n        || TARGET_MIX_SSE_I387)\n    && flag_unsafe_math_optimizations\"\n@@ -15285,7 +15285,7 @@\n (define_expand \"exp10<mode>2\"\n   [(use (match_operand:MODEF 0 \"register_operand\"))\n    (use (match_operand:MODEF 1 \"general_operand\"))]\n- \"TARGET_USE_FANCY_MATH_387\n+  \"TARGET_USE_FANCY_MATH_387\n    && (!(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n        || TARGET_MIX_SSE_I387)\n    && flag_unsafe_math_optimizations\"\n@@ -15319,7 +15319,7 @@\n (define_expand \"exp2<mode>2\"\n   [(use (match_operand:MODEF 0 \"register_operand\"))\n    (use (match_operand:MODEF 1 \"general_operand\"))]\n- \"TARGET_USE_FANCY_MATH_387\n+  \"TARGET_USE_FANCY_MATH_387\n    && (!(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n        || TARGET_MIX_SSE_I387)\n    && flag_unsafe_math_optimizations\"\n@@ -15375,7 +15375,7 @@\n (define_expand \"expm1<mode>2\"\n   [(use (match_operand:MODEF 0 \"register_operand\"))\n    (use (match_operand:MODEF 1 \"general_operand\"))]\n- \"TARGET_USE_FANCY_MATH_387\n+  \"TARGET_USE_FANCY_MATH_387\n    && (!(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n        || TARGET_MIX_SSE_I387)\n    && flag_unsafe_math_optimizations\"\n@@ -15413,7 +15413,7 @@\n   [(use (match_operand:MODEF 0 \"register_operand\"))\n    (use (match_operand:MODEF 1 \"general_operand\"))\n    (use (match_operand:SI 2 \"register_operand\"))]\n- \"TARGET_USE_FANCY_MATH_387\n+  \"TARGET_USE_FANCY_MATH_387\n    && (!(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n        || TARGET_MIX_SSE_I387)\n    && flag_unsafe_math_optimizations\"\n@@ -15447,7 +15447,7 @@\n   [(use (match_operand:MODEF 0 \"register_operand\"))\n    (use (match_operand:MODEF 1 \"general_operand\"))\n    (use (match_operand:MODEF 2 \"general_operand\"))]\n- \"TARGET_USE_FANCY_MATH_387\n+  \"TARGET_USE_FANCY_MATH_387\n    && (!(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n        || TARGET_MIX_SSE_I387)\n    && flag_unsafe_math_optimizations\""}]}