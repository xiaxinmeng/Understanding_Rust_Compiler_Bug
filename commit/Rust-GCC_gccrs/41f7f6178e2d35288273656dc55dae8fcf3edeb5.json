{"sha": "41f7f6178e2d35288273656dc55dae8fcf3edeb5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDFmN2Y2MTc4ZTJkMzUyODgyNzM2NTZkYzU1ZGFlOGZjZjNlZGViNQ==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2020-10-27T16:14:10Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2020-11-03T08:13:07Z"}, "message": "[Fortran] More precise location information for OpenACC 'gang', 'worker', 'vector' clauses with argument [PR92793]\n\n\tgcc/fortran/\n\tPR fortran/92793\n\t* trans-openmp.c (gfc_trans_omp_clauses): More precise location\n\tinformation for OpenACC 'gang', 'worker', 'vector' clauses with\n\targument.\n\tgcc/testsuite/\n\tPR fortran/92793\n\t* gfortran.dg/goacc/pr92793-1.f90: Adjust.", "tree": {"sha": "089751fca69257eabb151eabd06023b1a959f1b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/089751fca69257eabb151eabd06023b1a959f1b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/41f7f6178e2d35288273656dc55dae8fcf3edeb5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41f7f6178e2d35288273656dc55dae8fcf3edeb5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41f7f6178e2d35288273656dc55dae8fcf3edeb5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41f7f6178e2d35288273656dc55dae8fcf3edeb5/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "beddd1762ad2bbe84dd776c54489153f83f21e56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/beddd1762ad2bbe84dd776c54489153f83f21e56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/beddd1762ad2bbe84dd776c54489153f83f21e56"}], "stats": {"total": 69, "additions": 36, "deletions": 33}, "files": [{"sha": "1d652a09f9d23b6cf0380fd829d349dbbdedbb1f", "filename": "gcc/fortran/trans-openmp.c", "status": "modified", "additions": 26, "deletions": 14, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41f7f6178e2d35288273656dc55dae8fcf3edeb5/gcc%2Ffortran%2Ftrans-openmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41f7f6178e2d35288273656dc55dae8fcf3edeb5/gcc%2Ffortran%2Ftrans-openmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-openmp.c?ref=41f7f6178e2d35288273656dc55dae8fcf3edeb5", "patch": "@@ -3771,46 +3771,58 @@ gfc_trans_omp_clauses (stmtblock_t *block, gfc_omp_clauses *clauses,\n     }\n   if (clauses->vector)\n     {\n+      c = build_omp_clause (gfc_get_location (&where), OMP_CLAUSE_VECTOR);\n+      omp_clauses = gfc_trans_add_clause (c, omp_clauses);\n+\n       if (clauses->vector_expr)\n \t{\n \t  tree vector_var\n \t    = gfc_convert_expr_to_tree (block, clauses->vector_expr);\n-\t  c = build_omp_clause (gfc_get_location (&where), OMP_CLAUSE_VECTOR);\n \t  OMP_CLAUSE_VECTOR_EXPR (c) = vector_var;\n-\t  omp_clauses = gfc_trans_add_clause (c, omp_clauses);\n-\t}\n-      else\n-\t{\n-\t  c = build_omp_clause (gfc_get_location (&where), OMP_CLAUSE_VECTOR);\n-\t  omp_clauses = gfc_trans_add_clause (c, omp_clauses);\n+\n+\t  /* TODO: We're not capturing location information for individual\n+\t     clauses.  However, if we have an expression attached to the\n+\t     clause, that one provides better location information.  */\n+\t  OMP_CLAUSE_LOCATION (c)\n+\t    = gfc_get_location (&clauses->vector_expr->where);\n \t}\n     }\n   if (clauses->worker)\n     {\n+      c = build_omp_clause (gfc_get_location (&where), OMP_CLAUSE_WORKER);\n+      omp_clauses = gfc_trans_add_clause (c, omp_clauses);\n+\n       if (clauses->worker_expr)\n \t{\n \t  tree worker_var\n \t    = gfc_convert_expr_to_tree (block, clauses->worker_expr);\n-\t  c = build_omp_clause (gfc_get_location (&where), OMP_CLAUSE_WORKER);\n \t  OMP_CLAUSE_WORKER_EXPR (c) = worker_var;\n-\t  omp_clauses = gfc_trans_add_clause (c, omp_clauses);\n-\t}\n-      else\n-\t{\n-\t  c = build_omp_clause (gfc_get_location (&where), OMP_CLAUSE_WORKER);\n-\t  omp_clauses = gfc_trans_add_clause (c, omp_clauses);\n+\n+\t  /* TODO: We're not capturing location information for individual\n+\t     clauses.  However, if we have an expression attached to the\n+\t     clause, that one provides better location information.  */\n+\t  OMP_CLAUSE_LOCATION (c)\n+\t    = gfc_get_location (&clauses->worker_expr->where);\n \t}\n     }\n   if (clauses->gang)\n     {\n       tree arg;\n       c = build_omp_clause (gfc_get_location (&where), OMP_CLAUSE_GANG);\n       omp_clauses = gfc_trans_add_clause (c, omp_clauses);\n+\n       if (clauses->gang_num_expr)\n \t{\n \t  arg = gfc_convert_expr_to_tree (block, clauses->gang_num_expr);\n \t  OMP_CLAUSE_GANG_EXPR (c) = arg;\n+\n+\t  /* TODO: We're not capturing location information for individual\n+\t     clauses.  However, if we have an expression attached to the\n+\t     clause, that one provides better location information.  */\n+\t  OMP_CLAUSE_LOCATION (c)\n+\t    = gfc_get_location (&clauses->gang_num_expr->where);\n \t}\n+\n       if (clauses->gang_static)\n \t{\n \t  arg = clauses->gang_static_expr"}, {"sha": "4651ccffaa1fa0192b38326d8ff4ad01b909563b", "filename": "gcc/testsuite/gfortran.dg/goacc/pr92793-1.f90", "status": "modified", "additions": 10, "deletions": 19, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41f7f6178e2d35288273656dc55dae8fcf3edeb5/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fpr92793-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41f7f6178e2d35288273656dc55dae8fcf3edeb5/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fpr92793-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fpr92793-1.f90?ref=41f7f6178e2d35288273656dc55dae8fcf3edeb5", "patch": "@@ -52,13 +52,10 @@ subroutine gwv_sl ()\n   integer :: i\n \n   !$acc serial loop &\n-  !$acc &       gang(num:5) & ! { dg-error \"argument not permitted on 'gang' clause\" \"TODO\" { xfail *-*-* } }\n-  !$acc & & ! { dg-bogus \"14: argument not permitted on 'gang' clause\" \"TODO\" { xfail *-*-* } .+6 }\n-  !$acc &    worker(num:5) & ! { dg-error \"argument not permitted on 'worker' clause\" \"TODO\" { xfail *-*-* } }\n-  !$acc & & ! { dg-bogus \"14: argument not permitted on 'worker' clause\" \"TODO\" { xfail *-*-* } .+4 }\n-  !$acc &     vector(length:5) & ! { dg-error \"argument not permitted on 'vector' clause\" \"TODO\" { xfail *-*-* } }\n-  !$acc & ! { dg-bogus \"14: argument not permitted on 'vector' clause\" \"TODO\" { xfail *-*-* } .+2 }\n-  ! { dg-message \"99: enclosing parent compute construct\" \"\" { target *-*-* } .-1 }\n+  !$acc &       gang(num:5) & ! { dg-error \"25: argument not permitted on 'gang' clause\" }\n+  !$acc &    worker(num:5) & ! { dg-error \"24: argument not permitted on 'worker' clause\" }\n+  !$acc &     vector(length:5) ! { dg-error \"28: argument not permitted on 'vector' clause\" }\n+  ! { dg-message \"93: enclosing parent compute construct\" \"\" { target *-*-* } .-1 }\n   do i = 0, 10\n   end do\n   !$acc end serial loop\n@@ -70,12 +67,9 @@ subroutine gwv_s_l ()\n \n   !$acc serial ! { dg-message \"72: enclosing parent compute construct\" }\n   !$acc loop &\n-  !$acc &         gang(num:5) & ! { dg-error \"argument not permitted on 'gang' clause\" \"TODO\" { xfail *-*-* } }\n-  !$acc & & ! { dg-bogus \"14: argument not permitted on 'gang' clause\" \"TODO\" { xfail *-*-* } .+5 }\n-  !$acc &   worker(num:5) & ! { dg-error \"argument not permitted on 'worker' clause\" \"TODO\" { xfail *-*-* } }\n-  !$acc & & ! { dg-bogus \"14: argument not permitted on 'worker' clause\" \"TODO\" { xfail *-*-* } .+3 }\n-  !$acc &      vector(length:5) & ! { dg-error \"argument not permitted on 'vector' clause\" \"TODO\" { xfail *-*-* } }\n-  !$acc & ! { dg-bogus \"14: argument not permitted on 'vector' clause\" \"TODO\" { xfail *-*-* } .+1 }\n+  !$acc &         gang(num:5) & ! { dg-error \"27: argument not permitted on 'gang' clause\" }\n+  !$acc &   worker(num:5) & ! { dg-error \"23: argument not permitted on 'worker' clause\" }\n+  !$acc &      vector(length:5) ! { dg-error \"29: argument not permitted on 'vector' clause\" }\n   do i = 0, 10\n   end do\n   !$acc end serial\n@@ -88,12 +82,9 @@ subroutine gwv_r () ! { dg-message \"16: enclosing routine\" }\n   !$acc routine(gwv_r)\n \n   !$acc loop &\n-  !$acc &     gang(num:5) & ! { dg-error \"argument not permitted on 'gang' clause\" \"TODO\" { xfail *-*-* } }\n-  !$acc & & ! { dg-bogus \"14: argument not permitted on 'gang' clause\" \"TODO\" { xfail *-*-* } .+5 }\n-  !$acc &      worker(num:5) & ! { dg-error \"argument not permitted on 'worker' clause\" \"TODO\" { xfail *-*-* } }\n-  !$acc & & ! { dg-bogus \"14: argument not permitted on 'worker' clause\" \"TODO\" { xfail *-*-* } .+3 }\n-  !$acc &    vector(length:5) & ! { dg-error \"argument not permitted on 'vector' clause\" \"TODO\" { xfail *-*-* } }\n-  !$acc & ! { dg-bogus \"14: argument not permitted on 'vector' clause\" \"TODO\" { xfail *-*-* } .+1 }\n+  !$acc &     gang(num:5) & ! { dg-error \"23: argument not permitted on 'gang' clause\" }\n+  !$acc &      worker(num:5) & ! { dg-error \"26: argument not permitted on 'worker' clause\" }\n+  !$acc &    vector(length:5) ! { dg-error \"27: argument not permitted on 'vector' clause\" }\n   do i = 0, 10\n   end do\n end subroutine gwv_r"}]}