{"sha": "d16d5eac2a0132adcd9e88ae288bedd03abfc513", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDE2ZDVlYWMyYTAxMzJhZGNkOWU4OGFlMjg4YmVkZDAzYWJmYzUxMw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-05-08T17:54:55Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-05-08T17:54:55Z"}, "message": "name-lookup.h (pushdecl_with_scope): Replace with ...\n\n\t* name-lookup.h (pushdecl_with_scope): Replace with ...\n\t(pushdecl_outermost_localscope): ... this.\n\t* name-lookup.c (pushdecl_with_scope): Replace with ...\n\t(pushdecl_outermost_localscope): ... this.\n\t(pushdecl_namespace_level): Adjust.\n\t* decl.c (cp_make_fname_decl): Use pushdecl_outermost_localscope.\n\t* lambda.c (insert_capture_proxy): Likewise.\n\nFrom-SVN: r247752", "tree": {"sha": "28f4f3f132d35b2fc0ad9b9ec589c8e81c8e4957", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/28f4f3f132d35b2fc0ad9b9ec589c8e81c8e4957"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d16d5eac2a0132adcd9e88ae288bedd03abfc513", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d16d5eac2a0132adcd9e88ae288bedd03abfc513", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d16d5eac2a0132adcd9e88ae288bedd03abfc513", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d16d5eac2a0132adcd9e88ae288bedd03abfc513/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "29eb9a442b145c3b637e7b41000e51148969c989", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29eb9a442b145c3b637e7b41000e51148969c989", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29eb9a442b145c3b637e7b41000e51148969c989"}], "stats": {"total": 56, "additions": 28, "deletions": 28}, "files": [{"sha": "36ccab65241540a4e35784c67003cc7a118c3a36", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d16d5eac2a0132adcd9e88ae288bedd03abfc513/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d16d5eac2a0132adcd9e88ae288bedd03abfc513/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d16d5eac2a0132adcd9e88ae288bedd03abfc513", "patch": "@@ -1,5 +1,13 @@\n 2017-05-08  Nathan Sidwell  <nathan@acm.org>\n \n+\t* name-lookup.h (pushdecl_with_scope): Replace with ...\n+\t(pushdecl_outermost_localscope): ... this.\n+\t* name-lookup.c (pushdecl_with_scope): Replace with ...\n+\t(pushdecl_outermost_localscope): ... this.\n+\t(pushdecl_namespace_level): Adjust.\n+\t* decl.c (cp_make_fname_decl): Use pushdecl_outermost_localscope.\n+\t* lambda.c (insert_capture_proxy): Likewise.\n+\n \t* class.c (build_vtbl_initializer): Don't shadow outer variable\n \twith static var.\n "}, {"sha": "fbb8db7e5fc33949162d25f0424ac167cb4823c1", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d16d5eac2a0132adcd9e88ae288bedd03abfc513/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d16d5eac2a0132adcd9e88ae288bedd03abfc513/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=d16d5eac2a0132adcd9e88ae288bedd03abfc513", "patch": "@@ -4335,9 +4335,6 @@ cp_make_fname_decl (location_t loc, tree id, int type_dep)\n   if (name)\n     free (CONST_CAST (char *, name));\n \n-  /* As we're using pushdecl_with_scope, we must set the context.  */\n-  DECL_CONTEXT (decl) = current_function_decl;\n-\n   TREE_STATIC (decl) = 1;\n   TREE_READONLY (decl) = 1;\n   DECL_ARTIFICIAL (decl) = 1;\n@@ -4346,12 +4343,8 @@ cp_make_fname_decl (location_t loc, tree id, int type_dep)\n \n   if (current_function_decl)\n     {\n-      cp_binding_level *b = current_binding_level;\n-      if (b->kind == sk_function_parms)\n-\treturn error_mark_node;\n-      while (b->level_chain->kind != sk_function_parms)\n-\tb = b->level_chain;\n-      pushdecl_with_scope (decl, b, /*is_friend=*/false);\n+      DECL_CONTEXT (decl) = current_function_decl;\n+      decl = pushdecl_outermost_localscope (decl);\n       cp_finish_decl (decl, init, /*init_const_expr_p=*/false, NULL_TREE,\n \t\t      LOOKUP_ONLYCONVERTING);\n     }"}, {"sha": "5061597fa3e878e580e77dbfdf4ebe9b8469b10e", "filename": "gcc/cp/lambda.c", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d16d5eac2a0132adcd9e88ae288bedd03abfc513/gcc%2Fcp%2Flambda.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d16d5eac2a0132adcd9e88ae288bedd03abfc513/gcc%2Fcp%2Flambda.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flambda.c?ref=d16d5eac2a0132adcd9e88ae288bedd03abfc513", "patch": "@@ -295,24 +295,13 @@ is_normal_capture_proxy (tree decl)\n void\n insert_capture_proxy (tree var)\n {\n-  cp_binding_level *b;\n-  tree stmt_list;\n-\n   /* Put the capture proxy in the extra body block so that it won't clash\n      with a later local variable.  */\n-  b = current_binding_level;\n-  for (;;)\n-    {\n-      cp_binding_level *n = b->level_chain;\n-      if (n->kind == sk_function_parms)\n-\tbreak;\n-      b = n;\n-    }\n-  pushdecl_with_scope (var, b, false);\n+  pushdecl_outermost_localscope (var);\n \n   /* And put a DECL_EXPR in the STATEMENT_LIST for the same block.  */\n   var = build_stmt (DECL_SOURCE_LOCATION (var), DECL_EXPR, var);\n-  stmt_list = (*stmt_list_stack)[1];\n+  tree stmt_list = (*stmt_list_stack)[1];\n   gcc_assert (stmt_list);\n   append_to_statement_list_force (var, &stmt_list);\n }"}, {"sha": "ed9bfcdaa2604e559647c30b9b097dcf7eb6cf22", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d16d5eac2a0132adcd9e88ae288bedd03abfc513/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d16d5eac2a0132adcd9e88ae288bedd03abfc513/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=d16d5eac2a0132adcd9e88ae288bedd03abfc513", "patch": "@@ -2870,14 +2870,23 @@ pushdecl_with_scope_1 (tree x, cp_binding_level *level, bool is_friend)\n   return x;\n }\n  \n-/* Wrapper for pushdecl_with_scope_1.  */\n+/* Inject X into the local scope just before the function parms.  */\n \n tree\n-pushdecl_with_scope (tree x, cp_binding_level *level, bool is_friend)\n+pushdecl_outermost_localscope (tree x)\n {\n-  tree ret;\n   bool subtime = timevar_cond_start (TV_NAME_LOOKUP);\n-  ret = pushdecl_with_scope_1 (x, level, is_friend);\n+  cp_binding_level *b  = NULL, *n = current_binding_level;\n+\n+  if (n->kind == sk_function_parms)\n+    return error_mark_node;\n+  do\n+    {\n+      b = n;\n+      n = b->level_chain;\n+    }\n+  while (n->kind != sk_function_parms);\n+  tree ret = pushdecl_with_scope_1 (x, b, false);\n   timevar_cond_stop (TV_NAME_LOOKUP, subtime);\n   return ret;\n }\n@@ -4350,7 +4359,8 @@ pushdecl_namespace_level (tree x, bool is_friend)\n   tree t;\n \n   bool subtime = timevar_cond_start (TV_NAME_LOOKUP);\n-  t = pushdecl_with_scope (x, NAMESPACE_LEVEL (current_namespace), is_friend);\n+  t = pushdecl_with_scope_1\n+    (x, NAMESPACE_LEVEL (current_namespace), is_friend);\n \n   /* Now, the type_shadowed stack may screw us.  Munge it so it does\n      what we want.  */"}, {"sha": "904b14ea53753be67bb9cae20e035e417967cbfc", "filename": "gcc/cp/name-lookup.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d16d5eac2a0132adcd9e88ae288bedd03abfc513/gcc%2Fcp%2Fname-lookup.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d16d5eac2a0132adcd9e88ae288bedd03abfc513/gcc%2Fcp%2Fname-lookup.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.h?ref=d16d5eac2a0132adcd9e88ae288bedd03abfc513", "patch": "@@ -300,14 +300,14 @@ extern tree push_inner_scope (tree);\n extern void pop_inner_scope (tree, tree);\n extern void push_binding_level (cp_binding_level *);\n \f\n+extern tree pushdecl_outermost_localscope (tree);\n extern bool push_namespace (tree);\n extern void pop_namespace (void);\n extern void push_nested_namespace (tree);\n extern void pop_nested_namespace (tree);\n extern bool handle_namespace_attrs (tree, tree);\n extern void pushlevel_class (void);\n extern void poplevel_class (void);\n-extern tree pushdecl_with_scope (tree, cp_binding_level *, bool);\n extern tree lookup_name_prefer_type (tree, int);\n extern tree lookup_name_real (tree, int, int, bool, int, int);\n extern tree lookup_type_scope (tree, tag_scope);"}]}