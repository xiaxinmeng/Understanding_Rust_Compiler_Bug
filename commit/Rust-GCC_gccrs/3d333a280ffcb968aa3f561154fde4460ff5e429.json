{"sha": "3d333a280ffcb968aa3f561154fde4460ff5e429", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2QzMzNhMjgwZmZjYjk2OGFhM2Y1NjExNTRmZGU0NDYwZmY1ZTQyOQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2012-07-19T20:20:17Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2012-07-19T20:20:17Z"}, "message": "trans-expr.c (gfc_conv_procedure_call): Fix handling of polymorphic arguments.\n\n2012-07-19  Tobias Burnus  <burnus@net-b.de>\n\n        * trans-expr.c (gfc_conv_procedure_call): Fix handling\n        of polymorphic arguments.\n        * resolve.c (resolve_formal_arglist): Ditto, mark polymorphic\n        assumed-shape arrays as such.\n\nFrom-SVN: r189678", "tree": {"sha": "184c424f1429e8cc9e55ae799bd1b5431551e537", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/184c424f1429e8cc9e55ae799bd1b5431551e537"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d333a280ffcb968aa3f561154fde4460ff5e429", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d333a280ffcb968aa3f561154fde4460ff5e429", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d333a280ffcb968aa3f561154fde4460ff5e429", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d333a280ffcb968aa3f561154fde4460ff5e429/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a73b8b59fb0c47fdf8a31f812867ec56744ec6a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a73b8b59fb0c47fdf8a31f812867ec56744ec6a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a73b8b59fb0c47fdf8a31f812867ec56744ec6a4"}], "stats": {"total": 43, "additions": 33, "deletions": 10}, "files": [{"sha": "6100796aaaedde20f64a2164963feb2bd7ba0752", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d333a280ffcb968aa3f561154fde4460ff5e429/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d333a280ffcb968aa3f561154fde4460ff5e429/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=3d333a280ffcb968aa3f561154fde4460ff5e429", "patch": "@@ -1,3 +1,10 @@\n+2012-07-19  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* trans-expr.c (gfc_conv_procedure_call): Fix handling\n+\tof polymorphic arguments.\n+\t* resolve.c (resolve_formal_arglist): Ditto, mark polymorphic\n+\tassumed-shape arrays as such.\n+\n 2012-07-19  Tobias Burnus  <burnus@net-b.de>\n \n \t* interface.c (compare_parameter, compare_actual_formal): Fix"}, {"sha": "753f1c7939fdf563ab5f592e466a8fb2bdc29ef8", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d333a280ffcb968aa3f561154fde4460ff5e429/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d333a280ffcb968aa3f561154fde4460ff5e429/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=3d333a280ffcb968aa3f561154fde4460ff5e429", "patch": "@@ -251,6 +251,7 @@ resolve_formal_arglist (gfc_symbol *proc)\n   for (f = proc->formal; f; f = f->next)\n     {\n       sym = f->sym;\n+      gfc_array_spec *as;\n \n       if (sym == NULL)\n \t{\n@@ -284,23 +285,33 @@ resolve_formal_arglist (gfc_symbol *proc)\n \t    gfc_set_default_type (sym, 1, sym->ns);\n \t}\n \n-      gfc_resolve_array_spec (sym->as, 0);\n+      as = sym->ts.type == BT_CLASS && sym->attr.class_ok\n+\t   ? CLASS_DATA (sym)->as : sym->as;\n+\n+      gfc_resolve_array_spec (as, 0);\n \n       /* We can't tell if an array with dimension (:) is assumed or deferred\n \t shape until we know if it has the pointer or allocatable attributes.\n       */\n-      if (sym->as && sym->as->rank > 0 && sym->as->type == AS_DEFERRED\n-\t  && !(sym->attr.pointer || sym->attr.allocatable)\n+      if (as && as->rank > 0 && as->type == AS_DEFERRED\n+\t  && ((sym->ts.type != BT_CLASS\n+\t       && !(sym->attr.pointer || sym->attr.allocatable))\n+              || (sym->ts.type == BT_CLASS\n+\t\t  && !(CLASS_DATA (sym)->attr.class_pointer\n+\t\t       || CLASS_DATA (sym)->attr.allocatable)))\n \t  && sym->attr.flavor != FL_PROCEDURE)\n \t{\n-\t  sym->as->type = AS_ASSUMED_SHAPE;\n-\t  for (i = 0; i < sym->as->rank; i++)\n-\t    sym->as->lower[i] = gfc_get_int_expr (gfc_default_integer_kind,\n-\t\t\t\t\t\t  NULL, 1);\n+\t  as->type = AS_ASSUMED_SHAPE;\n+\t  for (i = 0; i < as->rank; i++)\n+\t    as->lower[i] = gfc_get_int_expr (gfc_default_integer_kind, NULL, 1);\n \t}\n \n-      if ((sym->as && sym->as->rank > 0 && sym->as->type == AS_ASSUMED_SHAPE)\n+      if ((as && as->rank > 0 && as->type == AS_ASSUMED_SHAPE)\n \t  || sym->attr.pointer || sym->attr.allocatable || sym->attr.target\n+\t  || (sym->ts.type == BT_CLASS && sym->attr.class_ok\n+\t      && (CLASS_DATA (sym)->attr.class_pointer\n+\t\t  || CLASS_DATA (sym)->attr.allocatable\n+\t\t  || CLASS_DATA (sym)->attr.target))\n \t  || sym->attr.optional)\n \t{\n \t  proc->attr.always_explicit = 1;"}, {"sha": "17964bb2c6404d86971ef409be77779f169e1f99", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d333a280ffcb968aa3f561154fde4460ff5e429/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d333a280ffcb968aa3f561154fde4460ff5e429/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=3d333a280ffcb968aa3f561154fde4460ff5e429", "patch": "@@ -3620,10 +3620,15 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n \t\tparmse.string_length = build_int_cst (gfc_charlen_type_node, 0);\n \t    }\n \t}\n-      else if (arg->expr->expr_type == EXPR_NULL && fsym && !fsym->attr.pointer)\n+      else if (arg->expr->expr_type == EXPR_NULL\n+\t       && fsym && !fsym->attr.pointer\n+\t       && (fsym->ts.type != BT_CLASS\n+\t\t   || !CLASS_DATA (fsym)->attr.class_pointer))\n \t{\n \t  /* Pass a NULL pointer to denote an absent arg.  */\n-\t  gcc_assert (fsym->attr.optional && !fsym->attr.allocatable);\n+\t  gcc_assert (fsym->attr.optional && !fsym->attr.allocatable\n+\t\t      && (fsym->ts.type != BT_CLASS\n+\t\t\t  || !CLASS_DATA (fsym)->attr.allocatable));\n \t  gfc_init_se (&parmse, NULL);\n \t  parmse.expr = null_pointer_node;\n \t  if (arg->missing_arg_type == BT_CHARACTER)"}]}