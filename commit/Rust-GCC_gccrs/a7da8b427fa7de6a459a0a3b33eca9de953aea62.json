{"sha": "a7da8b427fa7de6a459a0a3b33eca9de953aea62", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTdkYThiNDI3ZmE3ZGU2YTQ1OWEwYTNiMzNlY2E5ZGU5NTNhZWE2Mg==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2008-10-22T16:33:17Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2008-10-22T16:33:17Z"}, "message": "re PR c/30949 (\"incompatible pointer type\" warning does not point to declaration)\n\n2008-10-22  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\tPR c/30949\n\t* c-typeck.c (convert_for_assignment): Do not give declaration's\n\tlocation for builtins. Spell out which type was expected and which\n\twas given.\ntestsuite/\n\t* gcc.target/i386/sse-vect-types.c: Update.\n\t* gcc.dg/simd-5.c: Update.\n\t* gcc.dg/assign-warn-2.c: Update.\n\t* gcc.dg/simd-2.c: Update.\n\t* gcc.dg/simd-6.c: Update.\n\t* gcc.dg/assign-warn-1.c: Update.\n\t* gcc.dg/dfp/composite-type.c: Update.\n\t* gcc.dg/simd-1.c: Update.\n\t* gcc.dg/pr36997.c: Update.\n\nFrom-SVN: r141298", "tree": {"sha": "02faddfaf2899520e26249176f8c487a14c6b89b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/02faddfaf2899520e26249176f8c487a14c6b89b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7da8b427fa7de6a459a0a3b33eca9de953aea62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7da8b427fa7de6a459a0a3b33eca9de953aea62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7da8b427fa7de6a459a0a3b33eca9de953aea62", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7da8b427fa7de6a459a0a3b33eca9de953aea62/comments", "author": null, "committer": null, "parents": [{"sha": "92010a793b9bc51b3312d9e07f3e83dc86ed1ddc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92010a793b9bc51b3312d9e07f3e83dc86ed1ddc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92010a793b9bc51b3312d9e07f3e83dc86ed1ddc"}], "stats": {"total": 83, "additions": 57, "deletions": 26}, "files": [{"sha": "7e72bca41ce38b80f3e33a2cc564ca907baa518b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7da8b427fa7de6a459a0a3b33eca9de953aea62/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7da8b427fa7de6a459a0a3b33eca9de953aea62/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a7da8b427fa7de6a459a0a3b33eca9de953aea62", "patch": "@@ -1,3 +1,10 @@\n+2008-10-22  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR c/30949\n+\t* c-typeck.c (convert_for_assignment): Do not give declaration's\n+\tlocation for builtins. Spell out which type was expected and which\n+\twas given.\n+\n 2008-10-22  Nick Clifton  <nickc@redhat.com>\n \n \t* config/frv/frv.h (HARD_REGNO_RENAME_OK): Define.  Do not allow"}, {"sha": "52042fa657761ed133d7363a1eaada4c8361af5e", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7da8b427fa7de6a459a0a3b33eca9de953aea62/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7da8b427fa7de6a459a0a3b33eca9de953aea62/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=a7da8b427fa7de6a459a0a3b33eca9de953aea62", "patch": "@@ -4012,7 +4012,8 @@ convert_for_assignment (tree type, tree rhs, enum impl_conv errtype,\n       {                                                                  \\\n       case ic_argpass:                                                   \\\n         if (pedwarn (LOCATION, OPT, AR, parmnum, rname))                 \\\n-          inform (fundecl ? DECL_SOURCE_LOCATION (fundecl) : LOCATION,   \\\n+          inform ((fundecl && !DECL_IS_BUILTIN (fundecl))                \\\n+\t\t  ? DECL_SOURCE_LOCATION (fundecl) : LOCATION,           \\\n                   \"expected %qT but argument is of type %qT\",            \\\n                   type, rhstype);                                        \\\n         break;                                                           \\\n@@ -4451,15 +4452,21 @@ convert_for_assignment (tree type, tree rhs, enum impl_conv errtype,\n       /* ??? This should not be an error when inlining calls to\n \t unprototyped functions.  */\n       error (\"incompatible type for argument %d of %qE\", parmnum, rname);\n+      inform ((fundecl && !DECL_IS_BUILTIN (fundecl))\n+\t      ? DECL_SOURCE_LOCATION (fundecl) : input_location,\n+\t      \"expected %qT but argument is of type %qT\", type, rhstype);\n       break;\n     case ic_assign:\n-      error (\"incompatible types in assignment\");\n+      error (\"incompatible types when assigning to type %qT from type %qT\",\n+\t     type, rhstype);\n       break;\n     case ic_init:\n-      error (\"incompatible types in initialization\");\n+      error (\"incompatible types when initializing type %qT using type %qT\",\n+\t     type, rhstype);\n       break;\n     case ic_return:\n-      error (\"incompatible types in return\");\n+      error (\"incompatible types when returning type %qT but %qT was expected\",\n+\t     rhstype, type);\n       break;\n     default:\n       gcc_unreachable ();"}, {"sha": "76fc9db49ac44f7429550ce2deb802790b5e8a71", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7da8b427fa7de6a459a0a3b33eca9de953aea62/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7da8b427fa7de6a459a0a3b33eca9de953aea62/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a7da8b427fa7de6a459a0a3b33eca9de953aea62", "patch": "@@ -1,3 +1,16 @@\n+2008-10-22  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR c/30949\n+\t* gcc.target/i386/sse-vect-types.c: Update.\n+\t* gcc.dg/simd-5.c: Update.\n+\t* gcc.dg/assign-warn-2.c: Update.\n+\t* gcc.dg/simd-2.c: Update.\n+\t* gcc.dg/simd-6.c: Update.\n+\t* gcc.dg/assign-warn-1.c: Update.\n+\t* gcc.dg/dfp/composite-type.c: Update.\n+\t* gcc.dg/simd-1.c: Update.\n+\t* gcc.dg/pr36997.c: Update.\n+\n 2008-10-21  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR libfortran/36795"}, {"sha": "a0cfd890f1093122696a3160564cde38eff4912f", "filename": "gcc/testsuite/gcc.dg/assign-warn-1.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7da8b427fa7de6a459a0a3b33eca9de953aea62/gcc%2Ftestsuite%2Fgcc.dg%2Fassign-warn-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7da8b427fa7de6a459a0a3b33eca9de953aea62/gcc%2Ftestsuite%2Fgcc.dg%2Fassign-warn-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fassign-warn-1.c?ref=a7da8b427fa7de6a459a0a3b33eca9de953aea62", "patch": "@@ -112,15 +112,17 @@ struct s { int a; };\n \n TESTARG(stria, struct s, int); /* { dg-error \"incompatible type for argument 1 of 'striaF'\" } */\n TESTARP(strib, struct s, int); /* { dg-error \"incompatible type for argument 1 of 'stribFp.x'\" } */\n-TESTASS(stric, struct s, int); /* { dg-error \"incompatible types in assignment\" } */\n+TESTASS(stric, struct s, int); /* { dg-error \"incompatible types when assigning to type 'struct s' from type 'int'\" } */\n TESTINI(strid, struct s, int); /* { dg-error \"invalid initializer\" } */\n-TESTRET(strie, struct s, int); /* { dg-error \"incompatible types in return\" } */\n+TESTRET(strie, struct s, int); /* { dg-error \"incompatible types when returning type 'int' but 'struct s' was expected\" } */\n \n TESTARG(istra, int, struct s); /* { dg-error \"incompatible type for argument 1 of 'istraF'\" } */\n+\n TESTARP(istrb, int, struct s); /* { dg-error \"incompatible type for argument 1 of 'istrbFp.x'\" } */\n-TESTASS(istrc, int, struct s); /* { dg-error \"incompatible types in assignment\" } */\n-TESTINI(istrd, int, struct s); /* { dg-error \"incompatible types in initialization\" } */\n-TESTRET(istre, int, struct s); /* { dg-error \"incompatible types in return\" } */\n+\n+TESTASS(istrc, int, struct s); /* { dg-error \"incompatible types when assigning to type 'int' from type 'struct s'\" } */\n+TESTINI(istrd, int, struct s); /* { dg-error \"incompatible types when initializing type 'int' using type 'struct s'\" } */\n+TESTRET(istre, int, struct s); /* { dg-error \"incompatible types when returning type 'struct s' but 'int' was expected\" } */\n \n /* Match all extra informative notes.  */\n /* { dg-message \"note: expected '\\[^\\n'\\]*' but argument is of type '\\[^\\n'\\]*'\" \"note: expected\" { target *-*-* } 0 } */"}, {"sha": "f3d861d7405b7af84aab83974503c2971b69b881", "filename": "gcc/testsuite/gcc.dg/assign-warn-2.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7da8b427fa7de6a459a0a3b33eca9de953aea62/gcc%2Ftestsuite%2Fgcc.dg%2Fassign-warn-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7da8b427fa7de6a459a0a3b33eca9de953aea62/gcc%2Ftestsuite%2Fgcc.dg%2Fassign-warn-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fassign-warn-2.c?ref=a7da8b427fa7de6a459a0a3b33eca9de953aea62", "patch": "@@ -113,13 +113,13 @@ struct s { int a; };\n \n TESTARG(stria, struct s, int); /* { dg-error \"incompatible type for argument 1 of 'striaF'\" } */\n TESTARP(strib, struct s, int); /* { dg-error \"incompatible type for argument 1 of 'stribFp.x'\" } */\n-TESTASS(stric, struct s, int); /* { dg-error \"incompatible types in assignment\" } */\n+TESTASS(stric, struct s, int); /* { dg-error \"incompatible types when assigning to type 'struct s' from type 'int'\" } */\n TESTINI(strid, struct s, int); /* { dg-error \"invalid initializer\" } */\n-TESTRET(strie, struct s, int); /* { dg-error \"incompatible types in return\" } */\n+TESTRET(strie, struct s, int); /* { dg-error \"incompatible types when returning type 'int' but 'struct s' was expected\" } */\n \n TESTARG(istra, int, struct s); /* { dg-error \"incompatible type for argument 1 of 'istraF'\" } */\n TESTARP(istrb, int, struct s); /* { dg-error \"incompatible type for argument 1 of 'istrbFp.x'\" } */\n-TESTASS(istrc, int, struct s); /* { dg-error \"incompatible types in assignment\" } */\n-TESTINI(istrd, int, struct s); /* { dg-error \"incompatible types in initialization\" } */\n-TESTRET(istre, int, struct s); /* { dg-error \"incompatible types in return\" } */\n+TESTASS(istrc, int, struct s); /* { dg-error \"incompatible types when assigning to type 'int' from type 'struct s'\" } */\n+TESTINI(istrd, int, struct s); /* { dg-error \"incompatible types when initializing type 'int' using type 'struct s'\" } */\n+TESTRET(istre, int, struct s); /* { dg-error \"incompatible types when returning type 'struct s' but 'int' was expected\" } */\n /* { dg-message \"note: expected '\\[^'\\n\\]*' but argument is of type '\\[^'\\n\\]*'\" \"note: expected\" { target *-*-* } 0 } */"}, {"sha": "2abc82175958febb72f0c2ec4f8736dde0e044de", "filename": "gcc/testsuite/gcc.dg/dfp/composite-type.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7da8b427fa7de6a459a0a3b33eca9de953aea62/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcomposite-type.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7da8b427fa7de6a459a0a3b33eca9de953aea62/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcomposite-type.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcomposite-type.c?ref=a7da8b427fa7de6a459a0a3b33eca9de953aea62", "patch": "@@ -32,15 +32,15 @@ do \\\n  d##TYPE = f2_##TYPE(h3_##TYPE); \\\n } while(0)\n  \n-DECIMAL_COMPOSITE_DECL(32);  /* { dg-error \"incompatible types in assignment\" } */\n+DECIMAL_COMPOSITE_DECL(32);  /* { dg-error \"incompatible types when assigning to type '\\[^\\n\\]*' from type '\\[^\\n\\]*'\" } */\n /* { dg-message \"note: expected '\\[^'\\n\\]*' but argument is of type '\\[^'\\n\\]*'\" \"note: expected\" { target *-*-* } 35 } */\n \n \n-DECIMAL_COMPOSITE_DECL(64);  /* { dg-error \"incompatible types in assignment\" } */\n+DECIMAL_COMPOSITE_DECL(64);  /* { dg-error \"incompatible types when assigning to type '\\[^\\n\\]*' from type '\\[^\\n\\]*'\" } */\n /* { dg-message \"note: expected '\\[^'\\n\\]*' but argument is of type '\\[^'\\n\\]*'\" \"note: expected\" { target *-*-* } 39 } */\n \n \n-DECIMAL_COMPOSITE_DECL(128); /* { dg-error \"incompatible types in assignment\" } */\n+DECIMAL_COMPOSITE_DECL(128); /* { dg-error \"incompatible types when assigning to type '\\[^\\n\\]*' from type '\\[^\\n\\]*'\" } */\n /* { dg-message \"note: expected '\\[^'\\n\\]*' but argument is of type '\\[^'\\n\\]*'\" \"note: expected\" { target *-*-* } 43 } */\n \n "}, {"sha": "1fbb8fd6946c29b740c97228c78d9a6f5cd3ef0b", "filename": "gcc/testsuite/gcc.dg/pr36997.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7da8b427fa7de6a459a0a3b33eca9de953aea62/gcc%2Ftestsuite%2Fgcc.dg%2Fpr36997.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7da8b427fa7de6a459a0a3b33eca9de953aea62/gcc%2Ftestsuite%2Fgcc.dg%2Fpr36997.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr36997.c?ref=a7da8b427fa7de6a459a0a3b33eca9de953aea62", "patch": "@@ -5,4 +5,5 @@ typedef int __m64 __attribute__ ((__vector_size__ (8), __may_alias__));\n __m64 _mm_add_si64 (__m64 __m1, __m64 __m2)\n {\n     return (__m64) __builtin_ia32_paddq ((long long)__m1, (long long)__m2); /* { dg-error \"incompatible type\" } */\n+    /* { dg-message \"note: expected 'long long int __vector__' but argument is of type 'long long int'\" \"\" { target *-*-* } 7 } */\n }"}, {"sha": "e00e1dd693127a279c8ece1c812dfaf46037e8e0", "filename": "gcc/testsuite/gcc.dg/simd-1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7da8b427fa7de6a459a0a3b33eca9de953aea62/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7da8b427fa7de6a459a0a3b33eca9de953aea62/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-1.c?ref=a7da8b427fa7de6a459a0a3b33eca9de953aea62", "patch": "@@ -25,21 +25,21 @@ hanneke ()\n   a = b;\n \n   /* Assignment of different types.  */\n-  b = c; /* { dg-error \"incompatible types in assignment\" } */\n-  d = a; /* { dg-error \"incompatible types in assignment\" } */\n+  b = c; /* { dg-error \"incompatible types when assigning\" } */\n+  d = a; /* { dg-error \"incompatible types when assigning\" } */\n \n   /* Casting between SIMDs of the same size.  */\n   e = (typeof (e)) a;\n \n   /* Different signed SIMD assignment.  */\n   f = a; /* { dg-message \"note: use -flax-vector-conversions to permit conversions between vectors with differing element types or numbers of subparts\" } */\n-  /* { dg-error \"incompatible types in assignment\" \"\" { target *-*-* } 35 } */\n+  /* { dg-error \"incompatible types when assigning\" \"\" { target *-*-* } 35 } */\n \n   /* Casted different signed SIMD assignment.  */\n   f = (uv4si) a;\n \n   /* Assignment between scalar and SIMD of different size.  */\n-  foo = a; /* { dg-error \"incompatible types in assignment\" } */\n+  foo = a; /* { dg-error \"incompatible types when assigning\" } */\n \n   /* Casted assignment between scalar and SIMD of same size.  */\n   foo = (typeof (foo)) foo2;"}, {"sha": "13e1caba6cb1c8e9ad0815ea50d95e7c81f8adde", "filename": "gcc/testsuite/gcc.dg/simd-2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7da8b427fa7de6a459a0a3b33eca9de953aea62/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7da8b427fa7de6a459a0a3b33eca9de953aea62/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-2.c?ref=a7da8b427fa7de6a459a0a3b33eca9de953aea62", "patch": "@@ -23,14 +23,14 @@ hanneke ()\n   a = b;\n \n   /* Assignment of different types.  */\n-  b = c; /* { dg-error \"incompatible types in assignment\" } */\n-  d = a; /* { dg-error \"incompatible types in assignment\" } */\n+  b = c; /* { dg-error \"incompatible types when assigning\" } */\n+  d = a; /* { dg-error \"incompatible types when assigning\" } */\n \n   /* Casting between SIMDs of the same size.  */\n   e = (typeof (e)) a;\n \n   /* Assignment between scalar and SIMD of different size.  */\n-  foo = a; /* { dg-error \"incompatible types in assignment\" } */\n+  foo = a; /* { dg-error \"incompatible types when assigning\" } */\n \n   /* Casted assignment between scalar and SIMD of same size.  */\n   foo = (typeof (foo)) foo2; /* { dg-error \"aggregate value used where a float was expected\" } */"}, {"sha": "cb0ecf8982a8422d56594ed9cd70aefb2b733404", "filename": "gcc/testsuite/gcc.dg/simd-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7da8b427fa7de6a459a0a3b33eca9de953aea62/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7da8b427fa7de6a459a0a3b33eca9de953aea62/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-5.c?ref=a7da8b427fa7de6a459a0a3b33eca9de953aea62", "patch": "@@ -5,4 +5,4 @@\n #define vector __attribute__ ((vector_size (8)))\n vector char x = (vector char) {1,2,3,4,5,6,7,8}; /* { dg-bogus \"initializer\" } */\n vector char y = (vector short) {1,2,3,4}; /* { dg-message \"note: use -flax-vector-conversions to permit conversions between vectors with differing element types or numbers of subparts\" } */\n-  /* { dg-error \"incompatible types in initialization\" \"\" { target *-*-* } 7 } */\n+  /* { dg-error \"incompatible types when initializing\" \"\" { target *-*-* } 7 } */"}, {"sha": "969697994dc6df61868464bc8104adc98a3b4318", "filename": "gcc/testsuite/gcc.dg/simd-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7da8b427fa7de6a459a0a3b33eca9de953aea62/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7da8b427fa7de6a459a0a3b33eca9de953aea62/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-6.c?ref=a7da8b427fa7de6a459a0a3b33eca9de953aea62", "patch": "@@ -5,4 +5,4 @@\n #define vector __attribute__ ((vector_size (8)))\n vector char x = (vector char) {1,2,3,4,5,6,7,8}; /* { dg-bogus \"initializer\" } */\n vector char y = (vector short) {1,2,3,4}; /* { dg-message \"note: use -flax-vector-conversions to permit conversions between vectors with differing element types or numbers of subparts\" } */\n-  /* { dg-error \"incompatible types in initialization\" \"\" { target *-*-* } 7 } */\n+  /* { dg-error \"incompatible types when initializing\" \"\" { target *-*-* } 7 } */"}, {"sha": "9cb6f3e07cd45fe6fa8c9cd68af71e3e605f11e7", "filename": "gcc/testsuite/gcc.target/i386/sse-vect-types.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7da8b427fa7de6a459a0a3b33eca9de953aea62/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-vect-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7da8b427fa7de6a459a0a3b33eca9de953aea62/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-vect-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-vect-types.c?ref=a7da8b427fa7de6a459a0a3b33eca9de953aea62", "patch": "@@ -10,3 +10,4 @@ __m128d foo1(__m128d z, __m128d  a, int N) {\n   }\n   return a;\n }\n+/* { dg-message \"note: expected '\\[^'\\n\\]*' but argument is of type '\\[^'\\n\\]*'\" \"note: expected\" { target *-*-* } 0 } */"}]}