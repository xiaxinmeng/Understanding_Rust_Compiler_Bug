{"sha": "b8353767564e8042ce75d6879e813ce313a0a050", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjgzNTM3Njc1NjRlODA0MmNlNzVkNjg3OWU4MTNjZTMxM2EwYTA1MA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-11-09T15:17:29Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-11-09T15:17:29Z"}, "message": "Add a vect_unaligned_possible target selector\n\nThis patch adds a target selector that says whether we can ever\ngenerate an \"unaligned\" accesses, where \"unaligned\" is relative\nto the target's preferred vector alignment.  This is already true if:\n\n   vect_no_align && { ! vect_hw_misalign }\n\ni.e. if the target doesn't have any alignment mechanism and also\ndoesn't allow unaligned accesses.  It is also true (for the things\ntested by gcc.dg/vect) if the target only wants things to be aligned\nto an element; in that case every normal scalar access is \"vector aligned\".\n\n2017-11-09  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* doc/sourcebuild.texi (vect_unaligned_possible): Document.\n\ngcc/testsuite/\n\t* lib/target-supports.exp\n\t(check_effective_target_vect_unaligned_possible): New proc.\n\t* gcc.dg/vect/slp-25.c: Extend XFAIL of peeling for alignment from\n\tvect_no_align && { ! vect_hw_misalign } to ! vect_unaligned_possible.\n\t* gcc.dg/vect/vect-multitypes-1.c: Likewise.\n\t* gcc.dg/vect/vect-109.c: XFAIL vectorisation of an unaligned\n\taccess to ! vect_unaligned_possible.\n\t* gcc.dg/vect/vect-33.c: Likewise.\n\t* gcc.dg/vect/vect-42.c: Likewise.\n\t* gcc.dg/vect/vect-56.c: Likewise.\n\t* gcc.dg/vect/vect-60.c: Likewise.\n\t* gcc.dg/vect/vect-96.c: Likewise.\n\t* gcc.dg/vect/vect-peel-1.c: Likewise.\n\t* gcc.dg/vect/vect-27.c: Extend XFAIL of unaligned vectorization from\n\tvect_no_align && { ! vect_hw_misalign } to ! vect_unaligned_possible.\n\t* gcc.dg/vect/vect-29.c: Likewise.\n\t* gcc.dg/vect/vect-44.c: Likewise.\n\t* gcc.dg/vect/vect-48.c: Likewise.\n\t* gcc.dg/vect/vect-50.c: Likewise.\n\t* gcc.dg/vect/vect-52.c: Likewise.\n\t* gcc.dg/vect/vect-72.c: Likewise.\n\t* gcc.dg/vect/vect-75-big-array.c: Likewise.\n\t* gcc.dg/vect/vect-75.c: Likewise.\n\t* gcc.dg/vect/vect-77-alignchecks.c: Likewise.\n\t* gcc.dg/vect/vect-77-global.c: Likewise.\n\t* gcc.dg/vect/vect-78-alignchecks.c: Likewise.\n\t* gcc.dg/vect/vect-78-global.c: Likewise.\n\t* gcc.dg/vect/vect-multitypes-3.c: Likewise.\n\t* gcc.dg/vect/vect-multitypes-4.c: Likewise.\n\t* gcc.dg/vect/vect-multitypes-6.c: Likewise.\n\t* gcc.dg/vect/vect-peel-4.c: Likewise.\n\t* gcc.dg/vect/vect-peel-3.c: Likewise, and also for peeling\n\tfor alignment.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r254594", "tree": {"sha": "4fb2fbfcfa7048ba2169a13c4d4d2d3f441f1516", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4fb2fbfcfa7048ba2169a13c4d4d2d3f441f1516"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b8353767564e8042ce75d6879e813ce313a0a050", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8353767564e8042ce75d6879e813ce313a0a050", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8353767564e8042ce75d6879e813ce313a0a050", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8353767564e8042ce75d6879e813ce313a0a050/comments", "author": null, "committer": null, "parents": [{"sha": "4d83db5d73ce3e355f9ac166e04d72ce41decfb5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d83db5d73ce3e355f9ac166e04d72ce41decfb5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d83db5d73ce3e355f9ac166e04d72ce41decfb5"}], "stats": {"total": 121, "additions": 89, "deletions": 32}, "files": [{"sha": "01743bd724ec2c9a7858cc8b77da0ecc5dc51282", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8353767564e8042ce75d6879e813ce313a0a050/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8353767564e8042ce75d6879e813ce313a0a050/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b8353767564e8042ce75d6879e813ce313a0a050", "patch": "@@ -1,3 +1,9 @@\n+2017-11-09  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* doc/sourcebuild.texi (vect_unaligned_possible): Document.\n+\n 2017-11-09  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "cdee0502e470e98418499300d99808f71d89edd0", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8353767564e8042ce75d6879e813ce313a0a050/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8353767564e8042ce75d6879e813ce313a0a050/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=b8353767564e8042ce75d6879e813ce313a0a050", "patch": "@@ -1481,6 +1481,11 @@ Like @code{vect_perm3_byte}, but for 16-bit elements.\n @item vect_shift\n Target supports a hardware vector shift operation.\n \n+@item vect_unaligned_possible\n+Target prefers vectors to have an alignment greater than element\n+alignment, but also allows unaligned vector accesses in some\n+circumstances.\n+\n @item vect_widen_sum_hi_to_si\n Target supports a vector widening summation of @code{short} operands\n into @code{int} results, or can promote (unpack) from @code{short}"}, {"sha": "76d9f3cca7db97373222f8d49f85c8a5f416360b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8353767564e8042ce75d6879e813ce313a0a050/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8353767564e8042ce75d6879e813ce313a0a050/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b8353767564e8042ce75d6879e813ce313a0a050", "patch": "@@ -1,3 +1,41 @@\n+2017-11-09  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* lib/target-supports.exp\n+\t(check_effective_target_vect_unaligned_possible): New proc.\n+\t* gcc.dg/vect/slp-25.c: Extend XFAIL of peeling for alignment from\n+\tvect_no_align && { ! vect_hw_misalign } to ! vect_unaligned_possible.\n+\t* gcc.dg/vect/vect-multitypes-1.c: Likewise.\n+\t* gcc.dg/vect/vect-109.c: XFAIL vectorisation of an unaligned\n+\taccess to ! vect_unaligned_possible.\n+\t* gcc.dg/vect/vect-33.c: Likewise.\n+\t* gcc.dg/vect/vect-42.c: Likewise.\n+\t* gcc.dg/vect/vect-56.c: Likewise.\n+\t* gcc.dg/vect/vect-60.c: Likewise.\n+\t* gcc.dg/vect/vect-96.c: Likewise.\n+\t* gcc.dg/vect/vect-peel-1.c: Likewise.\n+\t* gcc.dg/vect/vect-27.c: Extend XFAIL of unaligned vectorization from\n+\tvect_no_align && { ! vect_hw_misalign } to ! vect_unaligned_possible.\n+\t* gcc.dg/vect/vect-29.c: Likewise.\n+\t* gcc.dg/vect/vect-44.c: Likewise.\n+\t* gcc.dg/vect/vect-48.c: Likewise.\n+\t* gcc.dg/vect/vect-50.c: Likewise.\n+\t* gcc.dg/vect/vect-52.c: Likewise.\n+\t* gcc.dg/vect/vect-72.c: Likewise.\n+\t* gcc.dg/vect/vect-75-big-array.c: Likewise.\n+\t* gcc.dg/vect/vect-75.c: Likewise.\n+\t* gcc.dg/vect/vect-77-alignchecks.c: Likewise.\n+\t* gcc.dg/vect/vect-77-global.c: Likewise.\n+\t* gcc.dg/vect/vect-78-alignchecks.c: Likewise.\n+\t* gcc.dg/vect/vect-78-global.c: Likewise.\n+\t* gcc.dg/vect/vect-multitypes-3.c: Likewise.\n+\t* gcc.dg/vect/vect-multitypes-4.c: Likewise.\n+\t* gcc.dg/vect/vect-multitypes-6.c: Likewise.\n+\t* gcc.dg/vect/vect-peel-4.c: Likewise.\n+\t* gcc.dg/vect/vect-peel-3.c: Likewise, and also for peeling\n+\tfor alignment.\n+\n 2017-11-09  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "ff7eff202cb64ab5a4e6ff8feb71d7b1e1890bb3", "filename": "gcc/testsuite/gcc.dg/vect/slp-25.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8353767564e8042ce75d6879e813ce313a0a050/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-25.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8353767564e8042ce75d6879e813ce313a0a050/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-25.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-25.c?ref=b8353767564e8042ce75d6879e813ce313a0a050", "patch": "@@ -57,4 +57,4 @@ int main (void)\n \n /* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\"  } } */\n /* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 2 \"vect\" { xfail { { vect_no_align && { ! vect_hw_misalign } } || { ! vect_natural_alignment } } } } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 2 \"vect\" { xfail { { ! vect_unaligned_possible } || { ! vect_natural_alignment } } } } } */"}, {"sha": "9a5071058991fb9f855038132fcddd83d6057ef9", "filename": "gcc/testsuite/gcc.dg/vect/vect-109.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8353767564e8042ce75d6879e813ce313a0a050/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-109.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8353767564e8042ce75d6879e813ce313a0a050/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-109.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-109.c?ref=b8353767564e8042ce75d6879e813ce313a0a050", "patch": "@@ -76,5 +76,5 @@ int main (void)\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 2 \"vect\" { target vect_element_align } } } */\n /* { dg-final { scan-tree-dump-times \"not vectorized: unsupported unaligned store\" 2 \"vect\" { xfail vect_element_align } } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 3 \"vect\" { target vect_element_align } } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 3 \"vect\" { target vect_element_align xfail { ! vect_unaligned_possible } } } } */\n "}, {"sha": "590217feee79c958999687239315c9ca4977a1bd", "filename": "gcc/testsuite/gcc.dg/vect/vect-27.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8353767564e8042ce75d6879e813ce313a0a050/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-27.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8353767564e8042ce75d6879e813ce313a0a050/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-27.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-27.c?ref=b8353767564e8042ce75d6879e813ce313a0a050", "patch": "@@ -46,5 +46,5 @@ int main (void)\n /* The initialization induction loop (with aligned access) is also vectorized.  */\n /* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\" { xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target { vect_no_align && { ! vect_hw_misalign } } } } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { xfail { ! vect_unaligned_possible } } } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 0 \"vect\" } } */"}, {"sha": "86ec2cc1ddf89af2418d9bdea48b113acfcd646a", "filename": "gcc/testsuite/gcc.dg/vect/vect-29.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8353767564e8042ce75d6879e813ce313a0a050/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-29.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8353767564e8042ce75d6879e813ce313a0a050/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-29.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-29.c?ref=b8353767564e8042ce75d6879e813ce313a0a050", "patch": "@@ -51,6 +51,6 @@ int main (void)\n \n /* The initialization induction loop (with aligned access) is also vectorized.  */\n /* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { xfail { ! vect_unaligned_possible } } } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 0 \"vect\" } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning.\" 1 \"vect\" {target { vect_no_align && { ! vect_hw_misalign } } } } } */"}, {"sha": "e215052ff777a911358e1291630df9cabd27e343", "filename": "gcc/testsuite/gcc.dg/vect/vect-33.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8353767564e8042ce75d6879e813ce313a0a050/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-33.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8353767564e8042ce75d6879e813ce313a0a050/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-33.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-33.c?ref=b8353767564e8042ce75d6879e813ce313a0a050", "patch": "@@ -37,6 +37,6 @@ int main (void)\n } \n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\"  } } */\n-/* { dg-final { scan-tree-dump \"Vectorizing an unaligned access\" \"vect\" { target { { { ! powerpc*-*-* } && vect_hw_misalign } && { { ! vect64 } || vect_multiple_sizes } } } } }  */\n+/* { dg-final { scan-tree-dump \"Vectorizing an unaligned access\" \"vect\" { target { { { ! powerpc*-*-* } && vect_hw_misalign } && { { ! vect64 } || vect_multiple_sizes } } xfail { ! vect_unaligned_possible } } } }  */\n /* { dg-final { scan-tree-dump \"Alignment of access forced using peeling\" \"vect\" { target { vector_alignment_reachable && { vect64 && {! vect_multiple_sizes} } } } } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 1 \"vect\" { target { { {! vector_alignment_reachable} || {! vect64} } && {! vect_hw_misalign} } } } } */"}, {"sha": "c42cdb1d36c725f144c9f9ecb275e2f7c37fbf51", "filename": "gcc/testsuite/gcc.dg/vect/vect-42.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8353767564e8042ce75d6879e813ce313a0a050/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-42.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8353767564e8042ce75d6879e813ce313a0a050/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-42.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-42.c?ref=b8353767564e8042ce75d6879e813ce313a0a050", "patch": "@@ -67,5 +67,5 @@ int main (void)\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 3 \"vect\" { target { vect_no_align && { ! vect_hw_misalign } } } } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 1 \"vect\" { target { { ! vector_alignment_reachable } && { ! vect_element_align } } } } } */\n /* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 4 \"vect\" { xfail { vect_no_align || { { !  vector_alignment_reachable } || vect_element_align  } } } } }  */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 3 \"vect\" { target vect_element_align } } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 3 \"vect\" { target vect_element_align xfail { ! vect_unaligned_possible } } } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" { xfail { vect_no_align || { { ! vector_alignment_reachable } || vect_element_align } } } } } */"}, {"sha": "03ef2c0f6717f33867de1d3a73f011248dcb1a89", "filename": "gcc/testsuite/gcc.dg/vect/vect-44.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8353767564e8042ce75d6879e813ce313a0a050/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-44.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8353767564e8042ce75d6879e813ce313a0a050/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-44.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-44.c?ref=b8353767564e8042ce75d6879e813ce313a0a050", "patch": "@@ -65,7 +65,7 @@ int main (void)\n    two loads to be aligned).  */\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 3 \"vect\" { xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 3 \"vect\" { xfail { ! vect_unaligned_possible } } } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 0 \"vect\" { xfail { { vect_no_align && { ! vect_hw_misalign } } || {! vector_alignment_reachable} } } } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning.\" 3 \"vect\" { target { vect_no_align && { ! vect_hw_misalign } } } } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning.\" 1 \"vect\" { target { {! vector_alignment_reachable} && {{! vect_no_align} && {! vect_hw_misalign} } } } } } */"}, {"sha": "d64b6657a090e117a1abebad8344ca8f19916ada", "filename": "gcc/testsuite/gcc.dg/vect/vect-48.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8353767564e8042ce75d6879e813ce313a0a050/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-48.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8353767564e8042ce75d6879e813ce313a0a050/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-48.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-48.c?ref=b8353767564e8042ce75d6879e813ce313a0a050", "patch": "@@ -55,6 +55,6 @@ int main (void)\n    (The store is aligned).  */\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\"  } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 2 \"vect\" { xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 2 \"vect\" { xfail { ! vect_unaligned_possible } } } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 0 \"vect\" } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning.\" 2 \"vect\" { target { vect_no_align && { ! vect_hw_misalign } } } } } */"}, {"sha": "c9500ca91e5bb451084335c4eb46bfdbb8360894", "filename": "gcc/testsuite/gcc.dg/vect/vect-50.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8353767564e8042ce75d6879e813ce313a0a050/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-50.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8353767564e8042ce75d6879e813ce313a0a050/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-50.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-50.c?ref=b8353767564e8042ce75d6879e813ce313a0a050", "patch": "@@ -61,8 +61,7 @@ int main (void)\n    align the store will not force the two loads to be aligned).  */\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 3 \"vect\" { xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 3 \"vect\" { target vect_hw_misalign } } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 3 \"vect\" { xfail { ! vect_unaligned_possible } } } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 0 \"vect\" { xfail { { vect_no_align && { ! vect_hw_misalign } } || {! vector_alignment_reachable} } } } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning.\" 3 \"vect\" { target { vect_no_align && { ! vect_hw_misalign } } } } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning.\" 1 \"vect\" { target { {! vector_alignment_reachable} && { {! vect_no_align } && {! vect_hw_misalign } } } } } } */"}, {"sha": "671e0e14d38d1d1ecd71d825fe964cf2a06c8b75", "filename": "gcc/testsuite/gcc.dg/vect/vect-52.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8353767564e8042ce75d6879e813ce313a0a050/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-52.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8353767564e8042ce75d6879e813ce313a0a050/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-52.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-52.c?ref=b8353767564e8042ce75d6879e813ce313a0a050", "patch": "@@ -56,6 +56,6 @@ int main (void)\n    (The store is aligned).  */\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 2 \"vect\" { xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 2 \"vect\" { xfail { ! vect_unaligned_possible } } } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 0 \"vect\" } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning.\" 2 \"vect\" { target { vect_no_align && { ! vect_hw_misalign } } } } } */"}, {"sha": "8060b05e7812941044990d6062f16036e9cbc4dd", "filename": "gcc/testsuite/gcc.dg/vect/vect-56.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8353767564e8042ce75d6879e813ce313a0a050/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-56.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8353767564e8042ce75d6879e813ce313a0a050/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-56.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-56.c?ref=b8353767564e8042ce75d6879e813ce313a0a050", "patch": "@@ -68,7 +68,7 @@ int main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 2 \"vect\" { xfail { vect_no_align || vect_element_align } } } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { target { vect_element_align } } } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 2 \"vect\" { target { ! vect_element_align } xfail { ! vect_unaligned_possible } } } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { target { vect_element_align } xfail { ! vect_unaligned_possible } } } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 0 \"vect\" { target { { ! vect_element_align } || vect_element_align_preferred} } } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" { target { vect_element_align && { ! vect_element_align_preferred } } } } } */"}, {"sha": "3b7477c96ab4bbec85341b2d2351fb2cadcd795f", "filename": "gcc/testsuite/gcc.dg/vect/vect-60.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8353767564e8042ce75d6879e813ce313a0a050/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-60.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8353767564e8042ce75d6879e813ce313a0a050/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-60.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-60.c?ref=b8353767564e8042ce75d6879e813ce313a0a050", "patch": "@@ -69,7 +69,7 @@ int main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 2 \"vect\" { xfail { vect_no_align || vect_element_align } } } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { target { vect_element_align } } } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 2 \"vect\" { target { ! vect_element_align } xfail { ! vect_unaligned_possible } } } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { target { vect_element_align } xfail { ! vect_unaligned_possible } } } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 0 \"vect\" { target { { ! vect_element_align } || vect_element_align_preferred } } } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" { target { vect_element_align && { ! vect_element_align_preferred } } } } } */"}, {"sha": "472d8d57549cf73c2357c81ed1e8ac018e179c01", "filename": "gcc/testsuite/gcc.dg/vect/vect-72.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8353767564e8042ce75d6879e813ce313a0a050/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-72.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8353767564e8042ce75d6879e813ce313a0a050/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-72.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-72.c?ref=b8353767564e8042ce75d6879e813ce313a0a050", "patch": "@@ -48,5 +48,5 @@ int main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { xfail { ! vect_unaligned_possible } } } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 0 \"vect\" } } */"}, {"sha": "010fac9a0761b5d44d4ba5e0456856862e9543ce", "filename": "gcc/testsuite/gcc.dg/vect/vect-75-big-array.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8353767564e8042ce75d6879e813ce313a0a050/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-75-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8353767564e8042ce75d6879e813ce313a0a050/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-75-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-75-big-array.c?ref=b8353767564e8042ce75d6879e813ce313a0a050", "patch": "@@ -50,4 +50,4 @@ int main (void)\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n /*  { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 1 \"vect\" { target { vect_no_align && { ! vect_hw_misalign } } } } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { xfail { ! vect_unaligned_possible } } } } */"}, {"sha": "7a3da4aed6487a561b35cbe81e424d08981064fa", "filename": "gcc/testsuite/gcc.dg/vect/vect-75.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8353767564e8042ce75d6879e813ce313a0a050/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-75.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8353767564e8042ce75d6879e813ce313a0a050/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-75.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-75.c?ref=b8353767564e8042ce75d6879e813ce313a0a050", "patch": "@@ -50,4 +50,4 @@ int main (void)\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 1 \"vect\" { target { vect_no_align && { ! vect_hw_misalign } } } } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { xfail { ! vect_unaligned_possible } } } } */"}, {"sha": "e969a9257d4b572b107e0b7f7c7cc9123417411f", "filename": "gcc/testsuite/gcc.dg/vect/vect-77-alignchecks.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8353767564e8042ce75d6879e813ce313a0a050/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-77-alignchecks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8353767564e8042ce75d6879e813ce313a0a050/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-77-alignchecks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-77-alignchecks.c?ref=b8353767564e8042ce75d6879e813ce313a0a050", "patch": "@@ -54,7 +54,7 @@ int main (void)\n    both for the load and the store.  */\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { xfail { ! vect_unaligned_possible } } } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" { target { {! vect_no_align} && { unaligned_stack && vector_alignment_reachable } } } } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning.\" 1 \"vect\" { target { { {! unaligned_stack} && { vect_no_align && { ! vect_hw_misalign } } } || {unaligned_stack && { {! vector_alignment_reachable} && {! vect_no_align } } } } } } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning.\" 2 \"vect\" { target { { unaligned_stack && { vector_alignment_reachable && vect_no_align } } || {unaligned_stack && { {! vector_alignment_reachable} && vect_no_align } } } } } } */"}, {"sha": "f0b73505d68c0bd66ecc5e61baf72a2d12aaae16", "filename": "gcc/testsuite/gcc.dg/vect/vect-77-global.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8353767564e8042ce75d6879e813ce313a0a050/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-77-global.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8353767564e8042ce75d6879e813ce313a0a050/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-77-global.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-77-global.c?ref=b8353767564e8042ce75d6879e813ce313a0a050", "patch": "@@ -48,6 +48,6 @@ int main (void)\n /* Requires versioning for aliasing.  */\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { xfail { ! vect_unaligned_possible } } } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 0 \"vect\" } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning.\" 1 \"vect\" { target { vect_no_align && { ! vect_hw_misalign } } } } } */"}, {"sha": "21b80f45fb6586acac0fd682d97ec56aa22800d0", "filename": "gcc/testsuite/gcc.dg/vect/vect-78-alignchecks.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8353767564e8042ce75d6879e813ce313a0a050/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-78-alignchecks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8353767564e8042ce75d6879e813ce313a0a050/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-78-alignchecks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-78-alignchecks.c?ref=b8353767564e8042ce75d6879e813ce313a0a050", "patch": "@@ -55,7 +55,7 @@ int main (void)\n    both for the load and the store.  */\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { xfail { vect_no_align && { ! vect_hw_misalign } } } } } */ \n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { xfail { ! vect_unaligned_possible } } } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" { target { {! vect_no_align} && { unaligned_stack && vector_alignment_reachable } } } } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning.\" 1 \"vect\" { target { { {! unaligned_stack} && { vect_no_align && { ! vect_hw_misalign } } } || {unaligned_stack && { {! vector_alignment_reachable} && { ! vect_no_align } } } } } } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning.\" 2 \"vect\" { target { { unaligned_stack && { vector_alignment_reachable && vect_no_align } } || {unaligned_stack && { {! vector_alignment_reachable} && vect_no_align } } } } } } */"}, {"sha": "241e7fa94b599a601c5d3a411388c992b43d770f", "filename": "gcc/testsuite/gcc.dg/vect/vect-78-global.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8353767564e8042ce75d6879e813ce313a0a050/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-78-global.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8353767564e8042ce75d6879e813ce313a0a050/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-78-global.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-78-global.c?ref=b8353767564e8042ce75d6879e813ce313a0a050", "patch": "@@ -48,6 +48,6 @@ int main (void)\n    (The store is aligned).  */\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { xfail { ! vect_unaligned_possible } } } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 0 \"vect\" } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning.\" 1 \"vect\" { target { vect_no_align && { ! vect_hw_misalign } } } } } */"}, {"sha": "e7d05ef328ce295acaadbd8c655d290c3b8a24f7", "filename": "gcc/testsuite/gcc.dg/vect/vect-96.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8353767564e8042ce75d6879e813ce313a0a050/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-96.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8353767564e8042ce75d6879e813ce313a0a050/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-96.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-96.c?ref=b8353767564e8042ce75d6879e813ce313a0a050", "patch": "@@ -48,6 +48,6 @@ int main (void)\n    For targets that don't support unaligned loads, version for the store.  */\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { target { {! vect_no_align} && vector_alignment_reachable } } } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { target { {! vect_no_align} && vector_alignment_reachable } xfail { ! vect_unaligned_possible } } } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" { xfail { { vect_no_align } || { { ! vector_alignment_reachable} || vect_element_align } } } } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning.\" 1 \"vect\" { target { { vect_no_align && { ! vect_hw_misalign } } || { {! vector_alignment_reachable} && {! vect_element_align} } } } } } */"}, {"sha": "378a5fe642ac415cd20f45e88f06e8d7b9040c98", "filename": "gcc/testsuite/gcc.dg/vect/vect-multitypes-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8353767564e8042ce75d6879e813ce313a0a050/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-multitypes-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8353767564e8042ce75d6879e813ce313a0a050/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-multitypes-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-multitypes-1.c?ref=b8353767564e8042ce75d6879e813ce313a0a050", "patch": "@@ -89,6 +89,6 @@ int main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 2 \"vect\" { xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n-/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 2 \"vect\" { xfail {{ vect_no_align && { ! vect_hw_misalign } } || {vect_sizes_32B_16B }}} } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 2 \"vect\" { xfail { { ! vect_unaligned_possible } || vect_sizes_32B_16B } } } } */\n /* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 4 \"vect\" { target { vect_no_align && { { ! vect_hw_misalign } && vect_sizes_32B_16B } } }} } */\n "}, {"sha": "93212394e804dec8c91875cb36f7b942e9e4bb0a", "filename": "gcc/testsuite/gcc.dg/vect/vect-multitypes-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8353767564e8042ce75d6879e813ce313a0a050/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-multitypes-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8353767564e8042ce75d6879e813ce313a0a050/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-multitypes-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-multitypes-3.c?ref=b8353767564e8042ce75d6879e813ce313a0a050", "patch": "@@ -59,5 +59,5 @@ int main (void)\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 3 \"vect\" { target { vect_no_align && { ! vect_hw_misalign } } } } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 3 \"vect\" {xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 3 \"vect\" { xfail { ! vect_unaligned_possible } } } } */\n "}, {"sha": "43887865bf4db474bb9bb5092af9fd68a53fcdf9", "filename": "gcc/testsuite/gcc.dg/vect/vect-multitypes-4.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8353767564e8042ce75d6879e813ce313a0a050/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-multitypes-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8353767564e8042ce75d6879e813ce313a0a050/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-multitypes-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-multitypes-4.c?ref=b8353767564e8042ce75d6879e813ce313a0a050", "patch": "@@ -95,6 +95,6 @@ int main (void)\n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 2 \"vect\" { xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 0 \"vect\" { target { vect_element_align}  } } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 2 \"vect\" { xfail { vect_no_align || vect_element_align } } } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 8 \"vect\" { xfail { vect_no_align || vect_element_align } } } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 4 \"vect\" { target { vect_element_align  } } } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 8 \"vect\" { target { ! vect_element_align } xfail { ! vect_unaligned_possible } } } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 4 \"vect\" { target { vect_element_align } xfail { ! vect_unaligned_possible } } } } */\n "}, {"sha": "29ce369c51b19f93e23a5dec8784eb5b6a722412", "filename": "gcc/testsuite/gcc.dg/vect/vect-multitypes-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8353767564e8042ce75d6879e813ce313a0a050/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-multitypes-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8353767564e8042ce75d6879e813ce313a0a050/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-multitypes-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-multitypes-6.c?ref=b8353767564e8042ce75d6879e813ce313a0a050", "patch": "@@ -66,5 +66,5 @@ int main (void)\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail { sparc*-*-* && ilp32 } }} } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 6 \"vect\" { target { vect_no_align && { ! vect_hw_misalign } } } } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 6 \"vect\" {xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 6 \"vect\" { xfail { ! vect_unaligned_possible } } } } */\n "}, {"sha": "fae99ab0b08ab99953062a54193460baa7a271c0", "filename": "gcc/testsuite/gcc.dg/vect/vect-peel-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8353767564e8042ce75d6879e813ce313a0a050/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-peel-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8353767564e8042ce75d6879e813ce313a0a050/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-peel-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-peel-1.c?ref=b8353767564e8042ce75d6879e813ce313a0a050", "patch": "@@ -48,5 +48,5 @@ int main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { target { { vect_element_align } && { vect_aligned_arrays } } } } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { target { { vect_element_align } && { vect_aligned_arrays } } xfail { ! vect_unaligned_possible } } } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" { xfail vect_element_align_preferred } } } */"}, {"sha": "d5c0cf10ce1a9725350d64d56e9e26395968eb25", "filename": "gcc/testsuite/gcc.dg/vect/vect-peel-3.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8353767564e8042ce75d6879e813ce313a0a050/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-peel-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8353767564e8042ce75d6879e813ce313a0a050/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-peel-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-peel-3.c?ref=b8353767564e8042ce75d6879e813ce313a0a050", "patch": "@@ -61,5 +61,5 @@ int main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\"  { xfail { { vect_no_align && { ! vect_hw_misalign } } || {vect_sizes_32B_16B } } } } } */\n-/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" { xfail { { vect_no_align && { ! vect_hw_misalign } } || {vect_sizes_32B_16B } } } } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\"  { xfail { { ! vect_unaligned_possible } || vect_sizes_32B_16B } } } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" { xfail { { ! vect_unaligned_possible } || vect_sizes_32B_16B } } } } */"}, {"sha": "88f9f0ddcbab55b84e619d9fb2086e093be95820", "filename": "gcc/testsuite/gcc.dg/vect/vect-peel-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8353767564e8042ce75d6879e813ce313a0a050/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-peel-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8353767564e8042ce75d6879e813ce313a0a050/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-peel-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-peel-4.c?ref=b8353767564e8042ce75d6879e813ce313a0a050", "patch": "@@ -46,5 +46,5 @@ int main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\"  { xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\"  { xfail { ! vect_unaligned_possible } } } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 0 \"vect\" } } */"}, {"sha": "353887dac8c209ca0b680a5d463148619c5ad37c", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8353767564e8042ce75d6879e813ce313a0a050/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8353767564e8042ce75d6879e813ce313a0a050/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=b8353767564e8042ce75d6879e813ce313a0a050", "patch": "@@ -6399,6 +6399,15 @@ proc check_effective_target_vect_element_align { } {\n     return $et_vect_element_align($et_index)\n }\n \n+# Return 1 if we expect to see unaligned accesses in at least some\n+# vector dumps.\n+\n+proc check_effective_target_vect_unaligned_possible { } {\n+    return [expr { ![check_effective_target_vect_element_align_preferred]\n+\t\t   && (![check_effective_target_vect_no_align]\n+\t\t       || [check_effective_target_vect_hw_misalign]) }]\n+}\n+\n # Return 1 if the target supports vector LOAD_LANES operations, 0 otherwise.\n \n proc check_effective_target_vect_load_lanes { } {"}]}