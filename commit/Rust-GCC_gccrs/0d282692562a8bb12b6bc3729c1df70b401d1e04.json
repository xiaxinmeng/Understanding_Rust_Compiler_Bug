{"sha": "0d282692562a8bb12b6bc3729c1df70b401d1e04", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQyODI2OTI1NjJhOGJiMTJiNmJjMzcyOWMxZGY3MGI0MDFkMWUwNA==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2005-01-24T02:28:15Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2005-01-24T02:28:15Z"}, "message": "expmed.c (expand_mult_highpart): Make static.\n\n\n\t* expmed.c (expand_mult_highpart): Make static.  Change type of\n\tconstant multiplier argument from unsigned HOST_WIDE_INT to rtx.\n\t(expand_divmod): Updates calls to expand_mult_highpart by using\n\tgen_int_mode to pass a CONST_INT rtx.\n\t* rtl.h (expand_mult_highpart): Remove prototype.\n\nFrom-SVN: r94139", "tree": {"sha": "b3833928ae70e9cb178a394429459c20d718c72f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b3833928ae70e9cb178a394429459c20d718c72f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d282692562a8bb12b6bc3729c1df70b401d1e04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d282692562a8bb12b6bc3729c1df70b401d1e04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d282692562a8bb12b6bc3729c1df70b401d1e04", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d282692562a8bb12b6bc3729c1df70b401d1e04/comments", "author": null, "committer": null, "parents": [{"sha": "29105d25095547099cb277f6e3a82d8f095a65fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29105d25095547099cb277f6e3a82d8f095a65fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29105d25095547099cb277f6e3a82d8f095a65fc"}], "stats": {"total": 46, "additions": 29, "deletions": 17}, "files": [{"sha": "592811ee47e2c3cad8abd5b03519ac1b124b50f6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d282692562a8bb12b6bc3729c1df70b401d1e04/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d282692562a8bb12b6bc3729c1df70b401d1e04/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0d282692562a8bb12b6bc3729c1df70b401d1e04", "patch": "@@ -1,3 +1,11 @@\n+2005-01-23  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* expmed.c (expand_mult_highpart): Make static.  Change type of\n+\tconstant multiplier argument from unsigned HOST_WIDE_INT to rtx.\n+\t(expand_divmod): Updates calls to expand_mult_highpart by using\n+\tgen_int_mode to pass a CONST_INT rtx.\n+\t* rtl.h (expand_mult_highpart): Remove prototype.\n+\n 2005-01-23  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* flow.c (regset_bytes, regset_size): Remove."}, {"sha": "21080ee284e04b637b6d011fdabb80f6160fdf2b", "filename": "gcc/expmed.c", "status": "modified", "additions": 21, "deletions": 15, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d282692562a8bb12b6bc3729c1df70b401d1e04/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d282692562a8bb12b6bc3729c1df70b401d1e04/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=0d282692562a8bb12b6bc3729c1df70b401d1e04", "patch": "@@ -2389,6 +2389,7 @@ static unsigned HOST_WIDE_INT choose_multiplier (unsigned HOST_WIDE_INT, int,\n \t\t\t\t\t\t int *, int *);\n static unsigned HOST_WIDE_INT invert_mod2n (unsigned HOST_WIDE_INT, int);\n static rtx extract_high_half (enum machine_mode, rtx);\n+static rtx expand_mult_highpart (enum machine_mode, rtx, rtx, rtx, int, int);\n static rtx expand_mult_highpart_optab (enum machine_mode, rtx, rtx, rtx,\n \t\t\t\t       int, int);\n /* Compute and return the best algorithm for multiplying by T.\n@@ -3359,33 +3360,33 @@ expand_mult_highpart_optab (enum machine_mode mode, rtx op0, rtx op1,\n   return 0;\n }\n \n-/* Emit code to multiply OP0 and CNST1, putting the high half of the result\n-   in TARGET if that is convenient, and return where the result is.  If the\n-   operation can not be performed, 0 is returned.\n+/* Emit code to multiply OP0 and OP1 (where OP1 is an integer constant),\n+   putting the high half of the result in TARGET if that is convenient,\n+   and return where the result is.  If the operation can not be performed,\n+   0 is returned.\n \n    MODE is the mode of operation and result.\n \n    UNSIGNEDP nonzero means unsigned multiply.\n \n    MAX_COST is the total allowed cost for the expanded RTL.  */\n \n-rtx\n-expand_mult_highpart (enum machine_mode mode, rtx op0,\n-\t\t      unsigned HOST_WIDE_INT cnst1, rtx target,\n-\t\t      int unsignedp, int max_cost)\n+static rtx\n+expand_mult_highpart (enum machine_mode mode, rtx op0, rtx op1,\n+\t\t      rtx target, int unsignedp, int max_cost)\n {\n   enum machine_mode wider_mode = GET_MODE_WIDER_MODE (mode);\n+  unsigned HOST_WIDE_INT cnst1;\n   int extra_cost;\n   bool sign_adjust = false;\n   enum mult_variant variant;\n   struct algorithm alg;\n-  rtx op1, tem;\n+  rtx tem;\n \n   /* We can't support modes wider than HOST_BITS_PER_INT.  */\n   gcc_assert (GET_MODE_BITSIZE (mode) <= HOST_BITS_PER_WIDE_INT);\n \n-  op1 = gen_int_mode (cnst1, wider_mode);\n-  cnst1 &= GET_MODE_MASK (mode);\n+  cnst1 = INTVAL (op1) & GET_MODE_MASK (mode);\n \n   /* We can't optimize modes wider than BITS_PER_WORD. \n      ??? We might be able to perform double-word arithmetic if \n@@ -3916,7 +3917,8 @@ expand_divmod (int rem_flag, enum tree_code code, enum machine_mode mode,\n \t\t\t      = (shift_cost[compute_mode][post_shift - 1]\n \t\t\t\t + shift_cost[compute_mode][1]\n \t\t\t\t + 2 * add_cost[compute_mode]);\n-\t\t\t    t1 = expand_mult_highpart (compute_mode, op0, ml,\n+\t\t\t    t1 = gen_int_mode (ml, compute_mode);\n+\t\t\t    t1 = expand_mult_highpart (compute_mode, op0, t1,\n \t\t\t\t\t\t       NULL_RTX, 1,\n \t\t\t\t\t\t       max_cost - extra_cost);\n \t\t\t    if (t1 == 0)\n@@ -3951,7 +3953,8 @@ expand_divmod (int rem_flag, enum tree_code code, enum machine_mode mode,\n \t\t\t    extra_cost\n \t\t\t      = (shift_cost[compute_mode][pre_shift]\n \t\t\t\t + shift_cost[compute_mode][post_shift]);\n-\t\t\t    t2 = expand_mult_highpart (compute_mode, t1, ml,\n+\t\t\t    t2 = gen_int_mode (ml, compute_mode);\n+\t\t\t    t2 = expand_mult_highpart (compute_mode, t1, t2,\n \t\t\t\t\t\t       NULL_RTX, 1,\n \t\t\t\t\t\t       max_cost - extra_cost);\n \t\t\t    if (t2 == 0)\n@@ -4072,7 +4075,8 @@ expand_divmod (int rem_flag, enum tree_code code, enum machine_mode mode,\n \t\t\textra_cost = (shift_cost[compute_mode][post_shift]\n \t\t\t\t      + shift_cost[compute_mode][size - 1]\n \t\t\t\t      + add_cost[compute_mode]);\n-\t\t\tt1 = expand_mult_highpart (compute_mode, op0, ml,\n+\t\t\tt1 = gen_int_mode (ml, compute_mode);\n+\t\t\tt1 = expand_mult_highpart (compute_mode, op0, t1,\n \t\t\t\t\t\t   NULL_RTX, 0,\n \t\t\t\t\t\t   max_cost - extra_cost);\n \t\t\tif (t1 == 0)\n@@ -4108,7 +4112,8 @@ expand_divmod (int rem_flag, enum tree_code code, enum machine_mode mode,\n \t\t\textra_cost = (shift_cost[compute_mode][post_shift]\n \t\t\t\t      + shift_cost[compute_mode][size - 1]\n \t\t\t\t      + 2 * add_cost[compute_mode]);\n-\t\t\tt1 = expand_mult_highpart (compute_mode, op0, ml,\n+\t\t\tt1 = gen_int_mode (ml, compute_mode);\n+\t\t\tt1 = expand_mult_highpart (compute_mode, op0, t1,\n \t\t\t\t\t\t   NULL_RTX, 0,\n \t\t\t\t\t\t   max_cost - extra_cost);\n \t\t\tif (t1 == 0)\n@@ -4202,7 +4207,8 @@ expand_divmod (int rem_flag, enum tree_code code, enum machine_mode mode,\n \t\t\textra_cost = (shift_cost[compute_mode][post_shift]\n \t\t\t\t      + shift_cost[compute_mode][size - 1]\n \t\t\t\t      + 2 * add_cost[compute_mode]);\n-\t\t\tt3 = expand_mult_highpart (compute_mode, t2, ml,\n+\t\t\tt3 = gen_int_mode (ml, compute_mode);\n+\t\t\tt3 = expand_mult_highpart (compute_mode, t2, t3,\n \t\t\t\t\t\t   NULL_RTX, 1,\n \t\t\t\t\t\t   max_cost - extra_cost);\n \t\t\tif (t3 != 0)"}, {"sha": "957923279276afd9494a0422e47b24e94a448fa7", "filename": "gcc/rtl.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d282692562a8bb12b6bc3729c1df70b401d1e04/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d282692562a8bb12b6bc3729c1df70b401d1e04/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=0d282692562a8bb12b6bc3729c1df70b401d1e04", "patch": "@@ -2028,8 +2028,6 @@ extern void dump_flow_info (FILE *);\n extern void init_expmed (void);\n extern void expand_inc (rtx, rtx);\n extern void expand_dec (rtx, rtx);\n-extern rtx expand_mult_highpart (enum machine_mode, rtx,\n-\t\t\t\t unsigned HOST_WIDE_INT, rtx, int, int);\n \n /* In gcse.c */\n extern bool can_copy_p (enum machine_mode);"}]}