{"sha": "82c68a78249be9fd1d0fcdb1c0e6fb699a907e20", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODJjNjhhNzgyNDliZTlmZDFkMGZjZGIxYzBlNmZiNjk5YTkwN2UyMA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-04-21T19:31:56Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-04-21T19:31:56Z"}, "message": "Add prototypes for static functions.\n\nFrom-SVN: r7118", "tree": {"sha": "f37b220f222f1b41d8ea6926806503d4201f32af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f37b220f222f1b41d8ea6926806503d4201f32af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/82c68a78249be9fd1d0fcdb1c0e6fb699a907e20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82c68a78249be9fd1d0fcdb1c0e6fb699a907e20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82c68a78249be9fd1d0fcdb1c0e6fb699a907e20", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82c68a78249be9fd1d0fcdb1c0e6fb699a907e20/comments", "author": null, "committer": null, "parents": [{"sha": "81fbaa4179fdff35a8f4a30505ce38ff38ece210", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81fbaa4179fdff35a8f4a30505ce38ff38ece210", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81fbaa4179fdff35a8f4a30505ce38ff38ece210"}], "stats": {"total": 90, "additions": 52, "deletions": 38}, "files": [{"sha": "8c23d8c8933b79980a42bd35aaa3e86a615a6687", "filename": "gcc/expmed.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82c68a78249be9fd1d0fcdb1c0e6fb699a907e20/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82c68a78249be9fd1d0fcdb1c0e6fb699a907e20/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=82c68a78249be9fd1d0fcdb1c0e6fb699a907e20", "patch": "@@ -30,12 +30,15 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #include \"real.h\"\n #include \"recog.h\"\n \n-static rtx extract_split_bit_field ();\n-static rtx extract_fixed_bit_field ();\n-static void store_split_bit_field ();\n-static void store_fixed_bit_field ();\n-static rtx mask_rtx ();\n-static rtx lshift_value ();\n+static void store_fixed_bit_field\tPROTO((rtx, int, int, int, rtx, int));\n+static void store_split_bit_field\tPROTO((rtx, int, int, rtx, int));\n+static rtx extract_fixed_bit_field\tPROTO((enum machine_mode, rtx, int,\n+\t\t\t\t\t       int, int, rtx, int, int));\n+static rtx mask_rtx\t\t\tPROTO((enum machine_mode, int,\n+\t\t\t\t\t       int, int));\n+static rtx lshift_value\t\t\tPROTO((enum machine_mode, rtx,\n+\t\t\t\t\t       int, int));\n+static rtx extract_split_bit_field\tPROTO((rtx, int, int, int, int));\n \n #define CEIL(x,y) (((x) + (y) - 1) / (y))\n "}, {"sha": "92c717b70b27333ede3f660ebd7f07c55da7692e", "filename": "gcc/global.c", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82c68a78249be9fd1d0fcdb1c0e6fb699a907e20/gcc%2Fglobal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82c68a78249be9fd1d0fcdb1c0e6fb699a907e20/gcc%2Fglobal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fglobal.c?ref=82c68a78249be9fd1d0fcdb1c0e6fb699a907e20", "patch": "@@ -250,20 +250,20 @@ static int n_regs_set;\n \n static HARD_REG_SET eliminable_regset;\n \n-static int allocno_compare ();\n-static void mark_reg_store ();\n-static void mark_reg_clobber ();\n-static void mark_reg_conflicts ();\n-static void mark_reg_live_nc ();\n-static void mark_reg_death ();\n-static void dump_conflicts ();\n-void dump_global_regs ();\n-static void find_reg ();\n-static void global_conflicts ();\n-static void expand_preferences ();\n-static void prune_preferences ();\n-static void record_conflicts ();\n-static void set_preference ();\n+static int allocno_compare\tPROTO((int *, int *));\n+static void global_conflicts\tPROTO((void));\n+static void expand_preferences\tPROTO((void));\n+static void prune_preferences\tPROTO((void));\n+static void find_reg\t\tPROTO((int, HARD_REG_SET, int, int, int));\n+static void record_one_conflict PROTO((int));\n+static void record_conflicts\tPROTO((short *, int));\n+static void mark_reg_store\tPROTO((rtx, rtx));\n+static void mark_reg_clobber\tPROTO((rtx, rtx));\n+static void mark_reg_conflicts\tPROTO((rtx));\n+static void mark_reg_death\tPROTO((rtx));\n+static void mark_reg_live_nc\tPROTO((int, enum machine_mode));\n+static void set_preference\tPROTO((rtx, rtx));\n+static void dump_conflicts\tPROTO((FILE *));\n \f\n /* Perform allocation of pseudo-registers not allocated by local_alloc.\n    FILE is a file to output debugging information on,"}, {"sha": "2d1819a15b4baa9b0832264d190e4f0e80fd5266", "filename": "gcc/local-alloc.c", "status": "modified", "additions": 29, "deletions": 18, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82c68a78249be9fd1d0fcdb1c0e6fb699a907e20/gcc%2Flocal-alloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82c68a78249be9fd1d0fcdb1c0e6fb699a907e20/gcc%2Flocal-alloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flocal-alloc.c?ref=82c68a78249be9fd1d0fcdb1c0e6fb699a907e20", "patch": "@@ -237,21 +237,32 @@ static int scratch_index;\n static int this_insn_number;\n static rtx this_insn;\n \n-static void block_alloc ();\n-static void update_equiv_regs ();\n-static int no_conflict_p ();\n-static int combine_regs ();\n-static void wipe_dead_reg ();\n-static int find_free_reg ();\n-static void reg_is_born ();\n-static void reg_is_set ();\n-static void mark_life ();\n-static void post_mark_life ();\n-static int qty_compare ();\n-static int qty_compare_1 ();\n-static int reg_meets_class_p ();\n-static void update_qty_class ();\n-static int requires_inout_p ();\n+static void alloc_qty\t\tPROTO((int, enum machine_mode, int, int));\n+static void alloc_qty_for_scratch PROTO((rtx, int, rtx, int, int));\n+static void validate_equiv_mem_from_store PROTO((rtx, rtx));\n+static int validate_equiv_mem\tPROTO((rtx, rtx, rtx));\n+static int memref_referenced_p\tPROTO((rtx, rtx));\n+static int memref_used_between_p PROTO((rtx, rtx, rtx));\n+static void optimize_reg_copy_1\tPROTO((rtx, rtx, rtx));\n+static void optimize_reg_copy_2\tPROTO((rtx, rtx, rtx));\n+static void update_equiv_regs\tPROTO((void));\n+static void block_alloc\t\tPROTO((int));\n+static int qty_compare    \tPROTO((int, int));\n+static int qty_compare_1\tPROTO((int *, int *));\n+static int combine_regs\t\tPROTO((rtx, rtx, int, int, rtx, int));\n+static int reg_meets_class_p\tPROTO((int, enum reg_class));\n+static int reg_classes_overlap_p PROTO((enum reg_class, enum reg_class,\n+\t\t\t\t\tint));\n+static void update_qty_class\tPROTO((int, int));\n+static void reg_is_set\t\tPROTO((rtx, rtx));\n+static void reg_is_born\t\tPROTO((rtx, int));\n+static void wipe_dead_reg\tPROTO((rtx, int));\n+static int find_free_reg\tPROTO((enum reg_class, enum machine_mode,\n+\t\t\t\t       int, int, int, int, int));\n+static void mark_life\t\tPROTO((int, enum machine_mode, int));\n+static void post_mark_life\tPROTO((int, enum machine_mode, int, int, int));\n+static int no_conflict_p\tPROTO((rtx, rtx, rtx));\n+static int requires_inout_p\tPROTO((char *));\n \f\n /* Allocate a new quantity (new within current basic block)\n    for register number REGNO which is born at index BIRTH\n@@ -1909,9 +1920,9 @@ find_free_reg (class, mode, qty, accept_call_clobbered, just_try_suggested,\n \t       born_index, dead_index)\n      enum reg_class class;\n      enum machine_mode mode;\n+     int qty;\n      int accept_call_clobbered;\n      int just_try_suggested;\n-     int qty;\n      int born_index, dead_index;\n {\n   register int i, ins;\n@@ -2070,9 +2081,9 @@ mark_life (regno, mode, life)\n \n static void\n post_mark_life (regno, mode, life, birth, death)\n-     register int regno, life, birth;\n+     int regno;\n      enum machine_mode mode;\n-     int death;\n+     int life, birth, death;\n {\n   register int j = HARD_REGNO_NREGS (regno, mode);\n #ifdef HARD_REG_SET"}]}